;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_tree$ 0)
(declare-sort A_tree_tree$ 0)
(declare-sort A_tree_tree_tree$ 0)
(declare-sort A_tree_tree_tree_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun root$a (A_tree_tree$)A_tree$)
(declare-fun left$a (A_tree_tree$)A_tree_tree$)
(declare-fun right$a (A_tree_tree$)A_tree_tree$)
(declare-fun node$a (A_tree$ A_tree_tree$ A_tree_tree$ )A_tree_tree$)
(declare-fun root$b (A_tree_tree_tree$)A_tree_tree$)
(declare-fun left$b (A_tree_tree_tree$)A_tree_tree_tree$)
(declare-fun right$b (A_tree_tree_tree$)A_tree_tree_tree$)
(declare-fun node$b (A_tree_tree$ A_tree_tree_tree$ A_tree_tree_tree$ )A_tree_tree_tree$)
(declare-fun root$c (A_tree_tree_tree_tree$)A_tree_tree_tree$)
(declare-fun left$c (A_tree_tree_tree_tree$)A_tree_tree_tree_tree$)
(declare-fun right$c (A_tree_tree_tree_tree$)A_tree_tree_tree_tree$)
(declare-fun node$c (A_tree_tree_tree$ A_tree_tree_tree_tree$ A_tree_tree_tree_tree$ )A_tree_tree_tree_tree$)
(declare-fun x$ ()A_tree$ )
(declare-fun y$ ()A_tree$ )
(declare-fun mod$ (A_tree$ A_tree$ )A_tree$ )
(declare-fun mod$a (A$ A$ )A$ )
(declare-fun mod$b (A_tree_tree_tree_tree$ A_tree_tree_tree_tree$ )A_tree_tree_tree_tree$ )
(declare-fun mod$c (A_tree_tree_tree$ A_tree_tree_tree$ )A_tree_tree_tree$ )
(declare-fun mod$d (A_tree_tree$ A_tree_tree$ )A_tree_tree$ )
(declare-fun plus$ (A_tree$ A_tree$ )A_tree$ )
(declare-fun plus$a (A$ A$ )A$ )
(declare-fun plus$b (A_tree_tree_tree$ A_tree_tree_tree$ )A_tree_tree_tree$ )
(declare-fun plus$c (A_tree_tree$ A_tree_tree$ )A_tree_tree$ )
(declare-fun plus$d (A_tree_tree_tree_tree$ A_tree_tree_tree_tree$ )A_tree_tree_tree_tree$ )
(assert (! (not (= (mod$ (plus$ x$ y$ )y$ )(mod$ x$ y$ ))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (mod$a (plus$a ?v0 ?v1 )?v1 )(mod$a ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (mod$a (plus$a ?v0 ?v1 )?v0 )(mod$a ?v1 ?v0 ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (mod$a (mod$a ?v0 ?v1 )?v1 )(mod$a ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree_tree$ ))(= (= (plus$b ?v0 ?v1 )(plus$b ?v2 ?v1 ))(= ?v0 ?v2 ))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (= (plus$a ?v0 ?v1 )(plus$a ?v2 ?v1 ))(= ?v0 ?v2 ))):named a5 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ ))(= (= (plus$c ?v0 ?v1 )(plus$c ?v2 ?v1 ))(= ?v0 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a7 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree_tree$ ))(= (= (plus$b ?v0 ?v1 )(plus$b ?v0 ?v2 ))(= ?v1 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (= (plus$a ?v0 ?v1 )(plus$a ?v0 ?v2 ))(= ?v1 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ ))(= (= (plus$c ?v0 ?v1 )(plus$c ?v0 ?v2 ))(= ?v1 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (mod$a (plus$a ?v0 ?v1 )?v2 )(mod$a (plus$a (mod$a ?v0 ?v2 )(mod$a ?v1 ?v2 ))?v2 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (mod$a (plus$a ?v0 ?v1 )?v2 )(mod$a (plus$a (mod$a ?v0 ?v2 )?v1 )?v2 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (mod$a (plus$a ?v0 ?v1 )?v2 )(mod$a (plus$a ?v0 (mod$a ?v1 ?v2 ))?v2 ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ )(?v4 A$ ))(=> (and (= (mod$a ?v0 ?v1 )(mod$a ?v2 ?v1 ))(= (mod$a ?v3 ?v1 )(mod$a ?v4 ?v1 )))(= (mod$a (plus$a ?v0 ?v3 )?v1 )(mod$a (plus$a ?v2 ?v4 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_tree_tree_tree_tree$ )(?v1 A_tree_tree_tree_tree$ ))(= (root$c (mod$b ?v0 ?v1 ))(mod$c (root$c ?v0 )(root$c ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ ))(= (root$b (mod$c ?v0 ?v1 ))(mod$d (root$b ?v0 )(root$b ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ ))(= (root$a (mod$d ?v0 ?v1 ))(mod$ (root$a ?v0 )(root$a ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (root$ (mod$ ?v0 ?v1 ))(mod$a (root$ ?v0 )(root$ ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree_tree$ )(?v3 A_tree_tree_tree$ ))(= (plus$b (plus$b ?v0 ?v1 )(plus$b ?v2 ?v3 ))(plus$b (plus$b ?v0 ?v2 )(plus$b ?v1 ?v3 )))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (plus$a (plus$a ?v0 ?v1 )(plus$a ?v2 ?v3 ))(plus$a (plus$a ?v0 ?v2 )(plus$a ?v1 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ )(?v3 A_tree_tree$ ))(= (plus$c (plus$c ?v0 ?v1 )(plus$c ?v2 ?v3 ))(plus$c (plus$c ?v0 ?v2 )(plus$c ?v1 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (plus$ (plus$ ?v0 ?v1 )(plus$ ?v2 ?v3 ))(plus$ (plus$ ?v0 ?v2 )(plus$ ?v1 ?v3 )))):named a23 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree_tree$ ))(= (plus$b (plus$b ?v0 ?v1 )?v2 )(plus$b (plus$b ?v0 ?v2 )?v1 ))):named a24 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (plus$a (plus$a ?v0 ?v1 )?v2 )(plus$a (plus$a ?v0 ?v2 )?v1 ))):named a25 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ ))(= (plus$c (plus$c ?v0 ?v1 )?v2 )(plus$c (plus$c ?v0 ?v2 )?v1 ))):named a26 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ (plus$ ?v0 ?v2 )?v1 ))):named a27 ))
(assert (! (forall ((?v0 A_tree_tree_tree_tree$ )(?v1 A_tree_tree_tree_tree$ ))(= (root$c (plus$d ?v0 ?v1 ))(plus$b (root$c ?v0 )(root$c ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ ))(= (root$b (plus$b ?v0 ?v1 ))(plus$c (root$b ?v0 )(root$b ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ ))(= (root$a (plus$c ?v0 ?v1 ))(plus$ (root$a ?v0 )(root$a ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (root$ (plus$ ?v0 ?v1 ))(plus$a (root$ ?v0 )(root$ ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree_tree$ ))(=> (= (plus$b ?v0 ?v1 )(plus$b ?v0 ?v2 ))(= ?v1 ?v2 ))):named a32 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (= (plus$a ?v0 ?v1 )(plus$a ?v0 ?v2 ))(= ?v1 ?v2 ))):named a33 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ ))(=> (= (plus$c ?v0 ?v1 )(plus$c ?v0 ?v2 ))(= ?v1 ?v2 ))):named a34 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(=> (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a35 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree_tree$ ))(=> (= (plus$b ?v0 ?v1 )(plus$b ?v0 ?v2 ))(= ?v1 ?v2 ))):named a36 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (= (plus$a ?v0 ?v1 )(plus$a ?v0 ?v2 ))(= ?v1 ?v2 ))):named a37 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ ))(=> (= (plus$c ?v0 ?v1 )(plus$c ?v0 ?v2 ))(= ?v1 ?v2 ))):named a38 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(=> (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a39 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ )(?v2 A_tree_tree_tree$ ))(=> (= (plus$b ?v0 ?v1 )(plus$b ?v2 ?v1 ))(= ?v0 ?v2 ))):named a40 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (= (plus$a ?v0 ?v1 )(plus$a ?v2 ?v1 ))(= ?v0 ?v2 ))):named a41 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ ))(=> (= (plus$c ?v0 ?v1 )(plus$c ?v2 ?v1 ))(= ?v0 ?v2 ))):named a42 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(=> (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a43 ))
(check-sat )
;(get-unsat-core )
