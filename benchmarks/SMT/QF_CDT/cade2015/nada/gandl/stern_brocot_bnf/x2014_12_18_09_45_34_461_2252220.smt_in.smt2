;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_fun_a_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun_a_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun_a_fun_a_a_fun_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_a_a_fun_a_fun_fun_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort A_a_fun_tree$ 0)
(declare-sort A_a_fun_a_fun_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun select$ (A_a_fun_tree$)A_a_fun$)
(declare-fun selecta$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun selectb$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun node$a (A_a_fun$ A_a_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$)
(declare-fun selectc$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun$)
(declare-fun selectd$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun_tree$)
(declare-fun selecte$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun_tree$)
(declare-fun node$b (A_a_fun_a_fun$ A_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$)
(declare-fun l$ ()A_a_fun$ )
(declare-fun r$ ()A_a_fun$ )
(declare-fun t$ ()A_tree$ )
(declare-fun x$ ()A$ )
(declare-fun id$ ()A_a_fun$ )
(declare-fun uu$ ()A_a_fun_a_fun$ )
(declare-fun id$a ()A_a_fun_a_a_fun_fun$ )
(declare-fun id$b ()A_a_fun_a_fun_a_a_fun_a_fun_fun$ )
(declare-fun id$c ()A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun uua$ ()A_a_fun_a_a_fun_fun$ )
(declare-fun uub$ ()A_a_fun_a_a_fun_fun$ )
(declare-fun uuc$ (A_a_fun$ )A_a_fun_a_a_fun_fun_a_a_fun_fun$ )
(declare-fun uud$ (A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun uue$ (A_a_fun$ )A_a_fun_a_fun_a_fun$ )
(declare-fun uuf$ (A_a_fun_a_a_fun_fun$ )A_a_fun_a_fun_a_a_fun_a_fun_fun$ )
(declare-fun uug$ (A$ )A_a_fun_a_fun$ )
(declare-fun uuh$ (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun uui$ (A_a_fun_a_fun$ )A_a_fun_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun$ )
(declare-fun uuj$ (A_a_fun_a_fun_a_a_fun_a_fun_fun$ )A_a_fun_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_a_a_fun_a_fun_fun_fun$ )
(declare-fun comp$ (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun comp$a (A_a_fun_a_fun_a_a_fun_a_fun_fun$ )A_a_fun_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_a_a_fun_a_fun_fun_fun$ )
(declare-fun comp$b (A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun comp$c (A_a_fun_a_fun$ )A_a_fun_a_a_fun_fun_a_a_fun_a_fun_fun$ )
(declare-fun comp$d (A_a_fun$ )A_a_fun_a_fun_a_a_fun_a_fun_fun$ )
(declare-fun comp$e (A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_fun_fun$ )
(declare-fun comp$f (A_a_fun$ )A_a_fun_a_fun_a_fun_a_a_fun_a_fun_a_fun_fun$ )
(declare-fun fun_app$ (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$a (A_a_fun_a_fun$ A_a_fun$ )A$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (A_a_fun_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_a_a_fun_a_fun_fun_fun$ A_a_fun_a_fun_a_a_fun_a_fun_fun$ )A_a_fun_a_fun_a_a_fun_a_fun_fun$ )
(declare-fun fun_app$d (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun fun_app$e (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$ )A_a_fun_a_fun$ )
(declare-fun fun_app$f (A_a_fun_a_a_fun_fun_a_a_fun_a_fun_fun$ A_a_fun_a_a_fun_fun$ )A_a_fun_a_fun$ )
(declare-fun fun_app$g (A_a_fun_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun_a_a_fun_a_fun_fun$ )A_a_fun_a_fun$ )
(declare-fun fun_app$h (A_a_fun_a_a_fun_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ )A_a_fun$ )
(declare-fun fun_app$i (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun$ )A$ )
(declare-fun fun_app$j (A_a_fun_a_a_fun_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun_a_a_fun_fun$ )
(declare-fun fun_app$k (A_a_fun_a_fun_a_fun_a_a_fun_a_fun_a_fun_fun$ A_a_fun_a_fun_a_fun$ )A_a_fun_a_fun_a_fun$ )
(declare-fun map_tree$ (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$a (A_a_fun_a_a_fun_fun$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$b (A_a_fun_a_fun$ A_a_fun_tree$ )A_tree$ )
(declare-fun unfold_tree$ (A_a_fun_a_fun$ A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ A_a_fun$ )A_tree$ )
(declare-fun tree_recurse$ (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$ )A_a_fun_a_fun_tree$ )
(declare-fun unfold_tree$a (A_a_fun_a_a_fun_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$ )A_a_fun_tree$ )
(declare-fun unfold_tree$b (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$ )A_tree$ )
(declare-fun unfold_tree$c (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun_tree$ )
(declare-fun unfold_tree$d (A_a_fun$ A_a_fun$ A_a_fun$ A$ )A_tree$ )
(declare-fun unfold_tree$e (A_a_fun_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_a_a_fun_a_fun_fun_fun$ A_a_fun_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_a_a_fun_a_fun_fun_fun$ A_a_fun_a_fun_a_a_fun_a_fun_fun$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_recurse$a (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_recurse$b (A_a_fun$ A_a_fun$ A$ )A_tree$ )
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$ uub$ ?v0 )(fun_app$ (comp$ ?v0 )r$ )):pattern ((fun_app$ uub$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$ uua$ ?v0 )(fun_app$ (comp$ ?v0 )l$ )):pattern ((fun_app$ uua$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$a uu$ ?v0 )(fun_app$b ?v0 x$ )):pattern ((fun_app$a uu$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_a_fun_a_fun_fun$ )(?v1 A_a_fun_a_fun_a_a_fun_a_fun_fun$ ))(! (= (fun_app$c (uuj$ ?v0 )?v1 )(fun_app$c (comp$a ?v1 )?v0 )):pattern ((fun_app$c (uuj$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun$ ))(! (= (fun_app$d (uud$ ?v0 )?v1 )(fun_app$d (comp$b ?v1 )?v0 )):pattern ((fun_app$d (uud$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_fun$ ))(! (= (fun_app$e (uuf$ ?v0 )?v1 )(fun_app$f (comp$c ?v1 )?v0 )):pattern ((fun_app$e (uuf$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ ))(! (= (fun_app$ (uuh$ ?v0 )?v1 )(fun_app$ (comp$ ?v1 )?v0 )):pattern ((fun_app$ (uuh$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_a_fun_a_a_fun_a_fun_fun$ ))(! (= (fun_app$g (uui$ ?v0 )?v1 )(fun_app$e ?v1 ?v0 )):pattern ((fun_app$g (uui$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_a_a_fun_fun$ ))(! (= (fun_app$h (uuc$ ?v0 )?v1 )(fun_app$ ?v1 ?v0 )):pattern ((fun_app$h (uuc$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_a_fun$ ))(! (= (fun_app$i (uue$ ?v0 )?v1 )(fun_app$a ?v1 ?v0 )):pattern ((fun_app$i (uue$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_fun$ ))(! (= (fun_app$a (uug$ ?v0 )?v1 )(fun_app$b ?v1 ?v0 )):pattern ((fun_app$a (uug$ ?v0 )?v1 )))):named a10 ))
(assert (! (not (= t$ (unfold_tree$ uu$ uua$ uub$ id$ ))):named a11 ))
(assert (! (= t$ (node$ x$ (map_tree$ l$ t$ )(map_tree$ r$ t$ ))):named a12 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun_a_a_fun_fun$ )(?v3 A_a_fun_a_a_fun_fun$ )(?v4 A_a_fun_a_a_fun_fun$ ))(= (map_tree$a ?v0 (unfold_tree$a (uuc$ ?v1 )(uud$ ?v2 )(uud$ ?v3 )?v4 ))(unfold_tree$a (uuc$ ?v1 )(uud$ ?v2 )(uud$ ?v3 )(fun_app$d (comp$b ?v0 )?v4 )))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun_a_a_fun_fun$ )(?v3 A_a_fun_a_a_fun_fun$ )(?v4 A_a_fun_a_fun$ ))(= (map_tree$ ?v0 (unfold_tree$b (uue$ ?v1 )(uuf$ ?v2 )(uuf$ ?v3 )?v4 ))(unfold_tree$b (uue$ ?v1 )(uuf$ ?v2 )(uuf$ ?v3 )(fun_app$e (comp$d ?v0 )?v4 )))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A_a_fun$ ))(= (map_tree$ ?v0 (unfold_tree$ (uug$ ?v1 )(uuh$ ?v2 )(uuh$ ?v3 )?v4 ))(unfold_tree$ (uug$ ?v1 )(uuh$ ?v2 )(uuh$ ?v3 )(fun_app$ (comp$ ?v0 )?v4 )))):named a15 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ ))(= (fun_app$f (comp$c ?v0 )id$a )?v0 )):named a16 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ ))(= (fun_app$d (comp$b ?v0 )id$a )?v0 )):named a17 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (fun_app$ (comp$ ?v0 )id$ )?v0 )):named a18 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ ))(= (fun_app$d (comp$b id$a )?v0 )?v0 )):named a19 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ ))(= (fun_app$e (comp$d id$ )?v0 )?v0 )):named a20 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (fun_app$ (comp$ id$ )?v0 )?v0 )):named a21 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ ))(= (fun_app$d (comp$b id$a )?v0 )?v0 )):named a22 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ ))(= (fun_app$e (comp$d id$ )?v0 )?v0 )):named a23 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (fun_app$ (comp$ id$ )?v0 )?v0 )):named a24 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun_a_a_fun_fun$ )(?v3 A_a_fun_a_a_fun_fun$ )(?v4 A_a_fun$ ))(= (map_tree$a ?v0 (unfold_tree$c ?v1 ?v2 ?v3 ?v4 ))(unfold_tree$c (fun_app$d (comp$b ?v0 )?v1 )?v2 ?v3 ?v4 ))):named a25 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun_a_a_fun_fun$ )(?v3 A_a_fun_a_a_fun_fun$ )(?v4 A_a_fun$ ))(= (map_tree$b ?v0 (unfold_tree$c ?v1 ?v2 ?v3 ?v4 ))(unfold_tree$ (fun_app$f (comp$c ?v0 )?v1 )?v2 ?v3 ?v4 ))):named a26 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun_a_a_fun_fun$ )(?v2 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )(?v3 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )(?v4 A_a_fun_a_a_fun_fun$ ))(= (map_tree$a ?v0 (unfold_tree$a ?v1 ?v2 ?v3 ?v4 ))(unfold_tree$a (fun_app$j (comp$e ?v0 )?v1 )?v2 ?v3 ?v4 ))):named a27 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_a_fun_a_fun$ )(?v2 A_a_fun_a_fun_a_a_fun_a_fun_fun$ )(?v3 A_a_fun_a_fun_a_a_fun_a_fun_fun$ )(?v4 A_a_fun_a_fun$ ))(= (map_tree$ ?v0 (unfold_tree$b ?v1 ?v2 ?v3 ?v4 ))(unfold_tree$b (fun_app$k (comp$f ?v0 )?v1 )?v2 ?v3 ?v4 ))):named a28 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (map_tree$ ?v0 (unfold_tree$d ?v1 ?v2 ?v3 ?v4 ))(unfold_tree$d (fun_app$ (comp$ ?v0 )?v1 )?v2 ?v3 ?v4 ))):named a29 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_a_fun$ )(?v2 A_a_fun_a_a_fun_fun$ )(?v3 A_a_fun_a_a_fun_fun$ )(?v4 A_a_fun$ ))(= (map_tree$ ?v0 (unfold_tree$ ?v1 ?v2 ?v3 ?v4 ))(unfold_tree$ (fun_app$e (comp$d ?v0 )?v1 )?v2 ?v3 ?v4 ))):named a30 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_a_fun_a_fun_fun$ )(?v1 A_a_fun_a_fun_a_a_fun_a_fun_fun$ )(?v2 A_a_fun_a_fun$ ))(= (tree_recurse$ ?v0 ?v1 ?v2 )(unfold_tree$e (uui$ ?v2 )(uuj$ ?v0 )(uuj$ ?v1 )id$b ))):named a31 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun$ ))(= (tree_recurse$a ?v0 ?v1 ?v2 )(unfold_tree$a (uuc$ ?v2 )(uud$ ?v0 )(uud$ ?v1 )id$a ))):named a32 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (tree_recurse$b ?v0 ?v1 ?v2 )(unfold_tree$ (uug$ ?v2 )(uuh$ ?v0 )(uuh$ ?v1 )id$ ))):named a33 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ ))(! (= (fun_app$e id$b ?v0 )?v0 ):pattern ((fun_app$e id$b ?v0 )))):named a34 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$ id$a ?v0 )?v0 ):pattern ((fun_app$ id$a ?v0 )))):named a35 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b id$ ?v0 )?v0 ):pattern ((fun_app$b id$ ?v0 )))):named a36 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun$ ))(! (= (fun_app$a (fun_app$f (comp$c ?v0 )?v1 )?v2 )(fun_app$a ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$f (comp$c ?v0 )?v1 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun$ ))(! (= (fun_app$ (fun_app$d (comp$b ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$d (comp$b ?v0 )?v1 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_a_fun$ )(?v2 A_a_fun$ ))(! (= (fun_app$a (fun_app$e (comp$d ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$e (comp$d ?v0 )?v1 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$b (fun_app$ (comp$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$ (comp$ ?v0 )?v1 )?v2 )))):named a40 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun$ )(?v1 A_a_fun_a_fun_a_a_fun_a_fun_fun$ )(?v2 A_a_fun_a_fun_a_a_fun_a_fun_fun$ )(?v3 A_a_fun_a_fun$ ))(= (unfold_tree$b ?v0 ?v1 ?v2 ?v3 )(node$ (fun_app$i ?v0 ?v3 )(unfold_tree$b ?v0 ?v1 ?v2 (fun_app$e ?v1 ?v3 ))(unfold_tree$b ?v0 ?v1 ?v2 (fun_app$e ?v2 ?v3 ))))):named a41 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )(?v2 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )(?v3 A_a_fun_a_a_fun_fun$ ))(= (unfold_tree$a ?v0 ?v1 ?v2 ?v3 )(node$a (fun_app$h ?v0 ?v3 )(unfold_tree$a ?v0 ?v1 ?v2 (fun_app$d ?v1 ?v3 ))(unfold_tree$a ?v0 ?v1 ?v2 (fun_app$d ?v2 ?v3 ))))):named a42 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A$ ))(= (unfold_tree$d ?v0 ?v1 ?v2 ?v3 )(node$ (fun_app$b ?v0 ?v3 )(unfold_tree$d ?v0 ?v1 ?v2 (fun_app$b ?v1 ?v3 ))(unfold_tree$d ?v0 ?v1 ?v2 (fun_app$b ?v2 ?v3 ))))):named a43 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun_a_a_fun_fun$ )(?v3 A_a_fun$ ))(= (unfold_tree$ ?v0 ?v1 ?v2 ?v3 )(node$ (fun_app$a ?v0 ?v3 )(unfold_tree$ ?v0 ?v1 ?v2 (fun_app$ ?v1 ?v3 ))(unfold_tree$ ?v0 ?v1 ?v2 (fun_app$ ?v2 ?v3 ))))):named a44 ))
(assert (! (= (comp$b id$a )id$c ):named a45 ))
(assert (! (= (comp$d id$ )id$b ):named a46 ))
(assert (! (= (comp$ id$ )id$a ):named a47 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$f (comp$c ?v0 )?v1 )(fun_app$e (comp$d id$ )?v2 ))(= (fun_app$a ?v0 (fun_app$ ?v1 ?v3 ))(fun_app$a ?v2 ?v3 )))):named a48 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun_a_a_fun_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$d (comp$b ?v0 )?v1 )(fun_app$d (comp$b id$a )?v2 ))(= (fun_app$ ?v0 (fun_app$ ?v1 ?v3 ))(fun_app$ ?v2 ?v3 )))):named a49 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_a_fun$ )(?v2 A_a_fun_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$e (comp$d ?v0 )?v1 )(fun_app$e (comp$d id$ )?v2 ))(= (fun_app$b ?v0 (fun_app$a ?v1 ?v3 ))(fun_app$a ?v2 ?v3 )))):named a50 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A$ ))(=> (= (fun_app$ (comp$ ?v0 )?v1 )(fun_app$ (comp$ id$ )?v2 ))(= (fun_app$b ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$b ?v2 ?v3 )))):named a51 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun$ ))(=> (= (fun_app$d (comp$b ?v0 )?v1 )id$a )(= (fun_app$ ?v0 (fun_app$ ?v1 ?v2 ))?v2 ))):named a52 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(=> (= (fun_app$ (comp$ ?v0 )?v1 )id$ )(= (fun_app$b ?v0 (fun_app$b ?v1 ?v2 ))?v2 ))):named a53 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a54 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun$ ))(! (= (tree_recurse$a ?v0 ?v1 ?v2 )(node$a ?v2 (map_tree$a ?v0 (tree_recurse$a ?v0 ?v1 ?v2 ))(map_tree$a ?v1 (tree_recurse$a ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$a ?v0 ?v1 ?v2 )))):named a55 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (tree_recurse$b ?v0 ?v1 ?v2 )(node$ ?v2 (map_tree$ ?v0 (tree_recurse$b ?v0 ?v1 ?v2 ))(map_tree$ ?v1 (tree_recurse$b ?v0 ?v1 ?v2 )))):pattern ((tree_recurse$b ?v0 ?v1 ?v2 )))):named a56 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (map_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))(node$ (fun_app$b ?v0 ?v1 )(map_tree$ ?v0 ?v2 )(map_tree$ ?v0 ?v3 ))):pattern ((map_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a57 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (forall ((?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false ))false )):named a58 ))
(check-sat )
;(get-unsat-core )
