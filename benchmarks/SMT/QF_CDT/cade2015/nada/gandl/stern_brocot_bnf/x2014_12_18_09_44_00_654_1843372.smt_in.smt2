;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun$ 0 )
(declare-sort A_tree_a_tree_fun$ 0 )
(declare-sort A_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun_a_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_tree_tree_a_tree_tree_fun$ 0 )
(declare-sort A_a_fun_tree_a_a_fun_tree_fun$ 0 )
(declare-sort A_tree_tree_tree_a_tree_tree_tree_fun$ 0 )
(declare-sort A_a_fun_tree_tree_a_a_fun_tree_tree_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort A_a_fun_tree$ 0)
(declare-sort A_tree_tree$ 0)
(declare-sort A_a_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_fun_tree$ 0)
(declare-sort A_a_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_tree_a_tree_fun_tree$ 0)
(declare-sort A_a_fun_tree_tree$ 0)
(declare-sort A_tree_tree_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun select$ (A_a_fun_tree$)A_a_fun$)
(declare-fun selecta$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun selectb$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun node$a (A_a_fun$ A_a_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$)
(declare-fun root$a (A_tree_tree$)A_tree$)
(declare-fun left$a (A_tree_tree$)A_tree_tree$)
(declare-fun right$a (A_tree_tree$)A_tree_tree$)
(declare-fun node$b (A_tree$ A_tree_tree$ A_tree_tree$ )A_tree_tree$)
(declare-fun selectc$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun$)
(declare-fun selectd$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun selecte$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun node$c (A_a_a_fun_fun$ A_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$)
(declare-fun selectf$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun$)
(declare-fun selectg$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun_tree$)
(declare-fun selecth$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun_tree$)
(declare-fun node$d (A_a_fun_a_fun$ A_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$)
(declare-fun selecti$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun$)
(declare-fun selectj$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun_tree$)
(declare-fun selectk$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun_tree$)
(declare-fun node$e (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$)
(declare-fun selectl$ (A_tree_a_tree_fun_tree$)A_tree_a_tree_fun$)
(declare-fun selectm$ (A_tree_a_tree_fun_tree$)A_tree_a_tree_fun_tree$)
(declare-fun selectn$ (A_tree_a_tree_fun_tree$)A_tree_a_tree_fun_tree$)
(declare-fun node$f (A_tree_a_tree_fun$ A_tree_a_tree_fun_tree$ A_tree_a_tree_fun_tree$ )A_tree_a_tree_fun_tree$)
(declare-fun root$b (A_a_fun_tree_tree$)A_a_fun_tree$)
(declare-fun left$b (A_a_fun_tree_tree$)A_a_fun_tree_tree$)
(declare-fun right$b (A_a_fun_tree_tree$)A_a_fun_tree_tree$)
(declare-fun node$g (A_a_fun_tree$ A_a_fun_tree_tree$ A_a_fun_tree_tree$ )A_a_fun_tree_tree$)
(declare-fun root$c (A_tree_tree_tree$)A_tree_tree$)
(declare-fun left$c (A_tree_tree_tree$)A_tree_tree_tree$)
(declare-fun right$c (A_tree_tree_tree$)A_tree_tree_tree$)
(declare-fun node$h (A_tree_tree$ A_tree_tree_tree$ A_tree_tree_tree$ )A_tree_tree_tree$)
(declare-fun t$ ()A_tree$ )
(declare-fun id$ ()A_a_fun$ )
(declare-fun id$a ()A_a_fun_a_a_fun_fun$ )
(declare-fun id$b ()A_a_fun_tree_a_a_fun_tree_fun$ )
(declare-fun id$c ()A_tree_tree_a_tree_tree_fun$ )
(declare-fun id$d ()A_tree_a_tree_fun$ )
(declare-fun id$e ()A_a_fun_tree_tree_a_a_fun_tree_tree_fun$ )
(declare-fun id$f ()A_tree_tree_tree_a_tree_tree_tree_fun$ )
(declare-fun left$d (A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun left$e (A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun left$f (A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun left$g (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun root$d (A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun$ )
(declare-fun root$e (A_a_fun_a_fun_tree$ )A_a_fun_a_fun$ )
(declare-fun root$f (A_a_a_fun_fun_tree$ )A_a_a_fun_fun$ )
(declare-fun root$g (A_a_fun_tree$ )A_a_fun$ )
(declare-fun right$d (A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun right$e (A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun right$f (A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun right$g (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun fun_app$ (A_tree_a_tree_fun$ A_tree$ )A_tree$ )
(declare-fun tree_ap$ (A_a_fun_tree$ )A_tree_a_tree_fun$ )
(declare-fun fun_app$a (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$b (A_a_fun_tree_a_a_fun_tree_fun$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun fun_app$c (A_tree_tree_a_tree_tree_fun$ A_tree_tree$ )A_tree_tree$ )
(declare-fun fun_app$d (A_a_fun$ A$ )A$ )
(declare-fun fun_app$e (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$f (A_a_fun_a_fun$ A_a_fun$ )A$ )
(declare-fun fun_app$g (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun$ )A$ )
(declare-fun fun_app$h (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun$ )A$ )
(declare-fun fun_app$i (A_a_a_fun_a_fun_fun$ A$ )A_a_fun_a_fun$ )
(declare-fun fun_app$j (A_a_a_a_fun_fun_fun$ A$ )A_a_a_fun_fun$ )
(declare-fun fun_app$k (A_a_fun_a_a_fun_a_fun_fun$ A_a_fun$ )A_a_fun_a_fun$ )
(declare-fun fun_app$l (A_a_fun_tree_tree_a_a_fun_tree_tree_fun$ A_a_fun_tree_tree$ )A_a_fun_tree_tree$ )
(declare-fun fun_app$m (A_tree_tree_tree_a_tree_tree_tree_fun$ A_tree_tree_tree$ )A_tree_tree_tree$ )
(declare-fun map_tree$ (A_a_fun_a_fun$ A_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$a (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$b (A_a_fun_a_fun_tree$ A_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$c (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$d (A_tree_a_tree_fun_tree$ A_tree_tree$ )A_tree_tree$ )
(declare-fun map_tree$a (A_a_a_fun_fun$ A_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$b (A_tree_a_tree_fun$ )A_tree_tree_a_tree_tree_fun$ )
(declare-fun map_tree$c (A_a_fun_a_a_fun_fun$ )A_a_fun_tree_a_a_fun_tree_fun$ )
(declare-fun map_tree$d (A_a_fun$ )A_tree_a_tree_fun$ )
(declare-fun map_tree$e (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$f (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun map_tree$g (A_a_a_fun_a_fun_fun$ A_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun map_tree$h (A_a_a_a_fun_fun_fun$ A_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun map_tree$i (A_a_fun_a_a_fun_a_fun_fun$ A_a_fun_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun map_tree$j (A_a_fun_tree_a_a_fun_tree_fun$ )A_a_fun_tree_tree_a_a_fun_tree_tree_fun$ )
(declare-fun map_tree$k (A_tree_tree_a_tree_tree_fun$ )A_tree_tree_tree_a_tree_tree_tree_fun$ )
(declare-fun tree_pure$ (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$a (A_a_a_fun_fun$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_pure$b (A_a_fun_a_fun$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_pure$c (A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_pure$d (A_tree_a_tree_fun$ )A_tree_a_tree_fun_tree$ )
(declare-fun tree_pure$e (A$ )A_tree$ )
(declare-fun tree_pure$f (A_tree$ )A_tree_tree$ )
(assert (! (not (= (fun_app$ (tree_ap$ (tree_pure$ id$ ))t$ )t$ )):named a0 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$a id$a ?v0 )?v0 ):pattern ((fun_app$a id$a ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_a_fun_tree$ ))(! (= (fun_app$b id$b ?v0 )?v0 ):pattern ((fun_app$b id$b ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_tree_tree$ ))(! (= (fun_app$c id$c ?v0 )?v0 ):pattern ((fun_app$c id$c ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (fun_app$ id$d ?v0 )?v0 ):pattern ((fun_app$ id$d ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$d id$ ?v0 )?v0 ):pattern ((fun_app$d id$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$a (tree_pure$a ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$a (fun_app$e ?v0 ?v1 )(tree_ap$a (tree_pure$a ?v0 )?v2 )(tree_ap$a (tree_pure$a ?v0 )?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun_tree$ )(?v3 A_a_fun_tree$ ))(= (tree_ap$b (tree_pure$b ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$ (fun_app$f ?v0 ?v1 )(tree_ap$b (tree_pure$b ?v0 )?v2 )(tree_ap$b (tree_pure$b ?v0 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun_tree$ )(?v3 A_a_fun_tree$ ))(= (tree_ap$c (tree_pure$c ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$a (fun_app$a ?v0 ?v1 )(tree_ap$c (tree_pure$c ?v0 )?v2 )(tree_ap$c (tree_pure$c ?v0 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (fun_app$ (tree_ap$ (tree_pure$ ?v0 ))(node$ ?v1 ?v2 ?v3 ))(node$ (fun_app$d ?v0 ?v1 )(fun_app$ (tree_ap$ (tree_pure$ ?v0 ))?v2 )(fun_app$ (tree_ap$ (tree_pure$ ?v0 ))?v3 )))):named a9 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$a id$a ?v0 )?v0 ):pattern ((fun_app$a id$a ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_a_fun_tree$ ))(! (= (fun_app$b id$b ?v0 )?v0 ):pattern ((fun_app$b id$b ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_tree_tree$ ))(! (= (fun_app$c id$c ?v0 )?v0 ):pattern ((fun_app$c id$c ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (fun_app$ id$d ?v0 )?v0 ):pattern ((fun_app$ id$d ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$d id$ ?v0 )?v0 ):pattern ((fun_app$d id$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_tree$ ))(= (tree_ap$b (tree_pure$b ?v0 )?v1 )(map_tree$ ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_tree$ ))(= (tree_ap$a (tree_pure$a ?v0 )?v1 )(map_tree$a ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_tree_a_tree_fun$ )(?v1 A_tree_tree$ ))(= (tree_ap$d (tree_pure$d ?v0 )?v1 )(fun_app$c (map_tree$b ?v0 )?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_tree$ ))(= (tree_ap$c (tree_pure$c ?v0 )?v1 )(fun_app$b (map_tree$c ?v0 )?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (fun_app$ (tree_ap$ (tree_pure$ ?v0 ))?v1 )(fun_app$ (map_tree$d ?v0 )?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ ))(= (fun_app$b (map_tree$c ?v0 )(tree_pure$ ?v1 ))(tree_pure$ (fun_app$a ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$ (map_tree$d ?v0 )(tree_pure$e ?v1 ))(tree_pure$e (fun_app$d ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun$ ))(= (map_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$e (fun_app$f ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (map_tree$a ?v0 (tree_pure$e ?v1 ))(tree_pure$ (fun_app$e ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_tree_a_tree_fun$ )(?v1 A_tree$ ))(= (fun_app$c (map_tree$b ?v0 )(tree_pure$f ?v1 ))(tree_pure$f (fun_app$ ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun$ )(?v1 A_a_fun_a_fun$ ))(= (map_tree$e ?v0 (tree_pure$b ?v1 ))(tree_pure$e (fun_app$g ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun$ )(?v1 A_a_a_fun_fun$ ))(= (map_tree$f ?v0 (tree_pure$a ?v1 ))(tree_pure$e (fun_app$h ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$ )(?v1 A$ ))(= (map_tree$g ?v0 (tree_pure$e ?v1 ))(tree_pure$b (fun_app$i ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun$ )(?v1 A$ ))(= (map_tree$h ?v0 (tree_pure$e ?v1 ))(tree_pure$a (fun_app$j ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_fun_fun$ )(?v1 A_a_fun$ ))(= (map_tree$i ?v0 (tree_pure$ ?v1 ))(tree_pure$b (fun_app$k ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ ))(= (root$d (tree_pure$c ?v0 ))?v0 )):named a30 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ ))(= (root$e (tree_pure$b ?v0 ))?v0 )):named a31 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(= (root$f (tree_pure$a ?v0 ))?v0 )):named a32 ))
(assert (! (forall ((?v0 A$ ))(= (root$ (tree_pure$e ?v0 ))?v0 )):named a33 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (root$g (tree_pure$ ?v0 ))?v0 )):named a34 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ ))(= (left$d (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a35 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ ))(= (left$e (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a36 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(= (left$f (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a37 ))
(assert (! (forall ((?v0 A$ ))(= (left$ (tree_pure$e ?v0 ))(tree_pure$e ?v0 ))):named a38 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (left$g (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a39 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ ))(= (right$d (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a40 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ ))(= (right$e (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a41 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(= (right$f (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a42 ))
(assert (! (forall ((?v0 A$ ))(= (right$ (tree_pure$e ?v0 ))(tree_pure$e ?v0 ))):named a43 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (right$g (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a44 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ ))(! (= (tree_pure$c ?v0 )(node$e ?v0 (tree_pure$c ?v0 )(tree_pure$c ?v0 ))):pattern ((tree_pure$c ?v0 )))):named a45 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ ))(! (= (tree_pure$b ?v0 )(node$d ?v0 (tree_pure$b ?v0 )(tree_pure$b ?v0 ))):pattern ((tree_pure$b ?v0 )))):named a46 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(! (= (tree_pure$a ?v0 )(node$c ?v0 (tree_pure$a ?v0 )(tree_pure$a ?v0 ))):pattern ((tree_pure$a ?v0 )))):named a47 ))
(assert (! (forall ((?v0 A$ ))(! (= (tree_pure$e ?v0 )(node$ ?v0 (tree_pure$e ?v0 )(tree_pure$e ?v0 ))):pattern ((tree_pure$e ?v0 )))):named a48 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (tree_pure$ ?v0 )(node$a ?v0 (tree_pure$ ?v0 )(tree_pure$ ?v0 ))):pattern ((tree_pure$ ?v0 )))):named a49 ))
(assert (! (forall ((?v0 A_a_fun_tree_tree$ ))(= (fun_app$l (map_tree$j id$b )?v0 )?v0 )):named a50 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ ))(= (fun_app$m (map_tree$k id$c )?v0 )?v0 )):named a51 ))
(assert (! (forall ((?v0 A_tree_tree$ ))(= (fun_app$c (map_tree$b id$d )?v0 )?v0 )):named a52 ))
(assert (! (forall ((?v0 A_a_fun_tree$ ))(= (fun_app$b (map_tree$c id$a )?v0 )?v0 )):named a53 ))
(assert (! (forall ((?v0 A_tree$ ))(= (fun_app$ (map_tree$d id$ )?v0 )?v0 )):named a54 ))
(assert (! (= (map_tree$j id$b )id$e ):named a55 ))
(assert (! (= (map_tree$k id$c )id$f ):named a56 ))
(assert (! (= (map_tree$b id$d )id$c ):named a57 ))
(assert (! (= (map_tree$c id$a )id$b ):named a58 ))
(assert (! (= (map_tree$d id$ )id$d ):named a59 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a60 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ )(?v3 A_a_fun$ )(?v4 A_a_fun_tree$ )(?v5 A_a_fun_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a61 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_tree$ ))(= (left$g (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$ ?v1 )))):named a62 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$g ?v1 )))):named a63 ))
(assert (! (forall ((?v0 A_tree_a_tree_fun$ )(?v1 A_tree_tree$ ))(= (left$a (fun_app$c (map_tree$b ?v0 )?v1 ))(fun_app$c (map_tree$b ?v0 )(left$a ?v1 )))):named a64 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$ (fun_app$ (map_tree$d ?v0 )?v1 ))(fun_app$ (map_tree$d ?v0 )(left$ ?v1 )))):named a65 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_tree$ ))(= (left$g (fun_app$b (map_tree$c ?v0 )?v1 ))(fun_app$b (map_tree$c ?v0 )(left$g ?v1 )))):named a66 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_tree$ ))(= (left$g (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$ ?v1 )))):named a67 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$g ?v1 )))):named a68 ))
(assert (! (forall ((?v0 A_tree_a_tree_fun$ )(?v1 A_tree_tree$ ))(= (left$a (fun_app$c (map_tree$b ?v0 )?v1 ))(fun_app$c (map_tree$b ?v0 )(left$a ?v1 )))):named a69 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$ (fun_app$ (map_tree$d ?v0 )?v1 ))(fun_app$ (map_tree$d ?v0 )(left$ ?v1 )))):named a70 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_tree$ ))(= (left$g (fun_app$b (map_tree$c ?v0 )?v1 ))(fun_app$b (map_tree$c ?v0 )(left$g ?v1 )))):named a71 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_tree$ ))(= (right$g (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (right$ ?v1 )))):named a72 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_tree$ ))(= (right$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$g ?v1 )))):named a73 ))
(assert (! (forall ((?v0 A_tree_a_tree_fun$ )(?v1 A_tree_tree$ ))(= (right$a (fun_app$c (map_tree$b ?v0 )?v1 ))(fun_app$c (map_tree$b ?v0 )(right$a ?v1 )))):named a74 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (right$ (fun_app$ (map_tree$d ?v0 )?v1 ))(fun_app$ (map_tree$d ?v0 )(right$ ?v1 )))):named a75 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_tree$ ))(= (right$g (fun_app$b (map_tree$c ?v0 )?v1 ))(fun_app$b (map_tree$c ?v0 )(right$g ?v1 )))):named a76 ))
(check-sat )
;(get-unsat-core )
