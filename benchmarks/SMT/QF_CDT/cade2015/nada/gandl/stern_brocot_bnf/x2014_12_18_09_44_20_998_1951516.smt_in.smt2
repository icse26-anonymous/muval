;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort A_c_a_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun$ 0 )
(declare-sort C_a_a_fun_fun$ 0 )
(declare-sort C_a_fun_a_fun$ 0 )
(declare-sort C_b_a_fun_fun$ 0 )
(declare-sort C_b_c_fun_fun$ 0 )
(declare-sort C_c_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_a_fun_fun$ 0 )
(declare-sort A_c_a_fun_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_c_a_fun_a_fun_fun$ 0 )
(declare-sort B_c_fun_b_a_fun_fun$ 0 )
(declare-sort C_a_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_c_a_fun_fun$ 0 )
(declare-sort C_b_a_fun_a_fun_fun$ 0 )
(declare-sort C_b_fun_c_a_fun_fun$ 0 )
(declare-sort C_c_b_a_fun_fun_fun$ 0 )
(declare-sort C_c_fun_c_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort A_c_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_c_b_a_fun_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort C_a_fun_a_c_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_c_b_a_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_c_a_fun_fun$ 0 )
(declare-sort C_c_fun_c_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_c_a_fun_c_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_c_b_fun_c_a_fun_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun_c_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_c_c_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_c_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun$ 0 )
(declare-sort C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort B_a_fun_tree$ 0)
(declare-sort B_tree$ 0)
(declare-sort C_b_a_fun_fun_tree$ 0)
(declare-sort C_tree$ 0)
(declare-sort B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_c_a_fun_fun_tree$ 0)
(declare-sort C_a_fun_tree$ 0)
(declare-sort B_c_fun_tree$ 0)
(declare-sort B_b_fun_tree$ 0)
(declare-sort A_c_a_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_tree$ 0)
(declare-sort B_a_a_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_fun_tree$ 0)
(declare-sort B_b_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_c_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort C_a_a_fun_fun_tree$ 0)
(declare-sort C_a_fun_c_a_fun_fun_tree$ 0)
(declare-sort C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ 0)
(declare-sort C_b_fun_tree$ 0)
(declare-sort C_b_fun_c_a_fun_fun_tree$ 0)
(declare-sort C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$ 0)
(declare-sort C_c_a_fun_fun_tree$ 0)
(declare-sort C_c_fun_tree$ 0)
(declare-sort C_c_fun_c_a_fun_fun_tree$ 0)
(declare-sort C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$ 0)
(declare-sort B_c_a_fun_a_fun_fun_tree$ 0)
(declare-sort B_c_a_fun_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort C_a_fun_a_fun_tree$ 0)
(declare-sort C_a_b_a_fun_fun_fun_tree$ 0)
(declare-sort C_a_fun_c_b_a_fun_fun_fun_tree$ 0)
(declare-sort C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort C_c_b_a_fun_fun_fun_tree$ 0)
(declare-sort C_c_fun_c_b_a_fun_fun_fun_tree$ 0)
(declare-sort C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort C_b_a_fun_a_fun_fun_tree$ 0)
(declare-sort C_b_a_fun_fun_c_a_fun_fun_tree$ 0)
(declare-sort C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_a_fun_tree$ 0)
(declare-sort C_b_c_fun_fun_tree$ 0)
(declare-sort B_b_b_fun_fun_tree$ 0)
(declare-sort C_a_fun_a_c_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_a_b_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_tree$ 0)
(declare-sort B_a_fun_c_b_a_fun_fun_fun_tree$ 0)
(declare-sort C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort C_a_fun_b_c_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ 0)
(declare-sort C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ 0)
(declare-sort C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ 0)
(declare-sort C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ 0)
(declare-sort C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ 0)
(declare-sort C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ 0)
(declare-sort A_c_a_fun_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_c_a_fun_a_fun_fun_tree$ 0)
(declare-sort C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$ 0)
(declare-sort C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$ 0)
(declare-sort C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_a_fun_fun_tree$ 0)
(declare-sort A_c_fun_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun select$ (B_a_fun_tree$)B_a_fun$)
(declare-fun selecta$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun selectb$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun node$a (B_a_fun$ B_a_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$)
(declare-fun root$a (B_tree$)B$)
(declare-fun left$a (B_tree$)B_tree$)
(declare-fun right$a (B_tree$)B_tree$)
(declare-fun node$b (B$ B_tree$ B_tree$ )B_tree$)
(declare-fun selectc$ (C_b_a_fun_fun_tree$)C_b_a_fun_fun$)
(declare-fun selectd$ (C_b_a_fun_fun_tree$)C_b_a_fun_fun_tree$)
(declare-fun selecte$ (C_b_a_fun_fun_tree$)C_b_a_fun_fun_tree$)
(declare-fun node$c (C_b_a_fun_fun$ C_b_a_fun_fun_tree$ C_b_a_fun_fun_tree$ )C_b_a_fun_fun_tree$)
(declare-fun root$b (C_tree$)C$)
(declare-fun left$b (C_tree$)C_tree$)
(declare-fun right$b (C_tree$)C_tree$)
(declare-fun node$d (C$ C_tree$ C_tree$ )C_tree$)
(declare-fun selectf$ (B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$)B_c_a_fun_fun_c_b_a_fun_fun_fun$)
(declare-fun selectg$ (B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$)B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$)
(declare-fun selecth$ (B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$)B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$)
(declare-fun node$e (B_c_a_fun_fun_c_b_a_fun_fun_fun$ B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$)
(declare-fun selecti$ (B_c_a_fun_fun_tree$)B_c_a_fun_fun$)
(declare-fun selectj$ (B_c_a_fun_fun_tree$)B_c_a_fun_fun_tree$)
(declare-fun selectk$ (B_c_a_fun_fun_tree$)B_c_a_fun_fun_tree$)
(declare-fun node$f (B_c_a_fun_fun$ B_c_a_fun_fun_tree$ B_c_a_fun_fun_tree$ )B_c_a_fun_fun_tree$)
(declare-fun selectl$ (C_a_fun_tree$)C_a_fun$)
(declare-fun selectm$ (C_a_fun_tree$)C_a_fun_tree$)
(declare-fun selectn$ (C_a_fun_tree$)C_a_fun_tree$)
(declare-fun node$g (C_a_fun$ C_a_fun_tree$ C_a_fun_tree$ )C_a_fun_tree$)
(declare-fun selecto$ (B_c_fun_tree$)B_c_fun$)
(declare-fun selectp$ (B_c_fun_tree$)B_c_fun_tree$)
(declare-fun selectq$ (B_c_fun_tree$)B_c_fun_tree$)
(declare-fun node$h (B_c_fun$ B_c_fun_tree$ B_c_fun_tree$ )B_c_fun_tree$)
(declare-fun selectr$ (B_b_fun_tree$)B_b_fun$)
(declare-fun selects$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun selectt$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun node$i (B_b_fun$ B_b_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$)
(declare-fun selectu$ (A_c_a_fun_fun_tree$)A_c_a_fun_fun$)
(declare-fun selectv$ (A_c_a_fun_fun_tree$)A_c_a_fun_fun_tree$)
(declare-fun selectw$ (A_c_a_fun_fun_tree$)A_c_a_fun_fun_tree$)
(declare-fun node$j (A_c_a_fun_fun$ A_c_a_fun_fun_tree$ A_c_a_fun_fun_tree$ )A_c_a_fun_fun_tree$)
(declare-fun selectx$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun$)
(declare-fun selecty$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun_tree$)
(declare-fun selectz$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun_tree$)
(declare-fun node$k (A_b_a_fun_fun$ A_b_a_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$)
(declare-fun selecua$ (A_a_fun_tree$)A_a_fun$)
(declare-fun selecub$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun selecuc$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun node$l (A_a_fun$ A_a_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$)
(declare-fun selecud$ (B_a_a_fun_fun_tree$)B_a_a_fun_fun$)
(declare-fun selecue$ (B_a_a_fun_fun_tree$)B_a_a_fun_fun_tree$)
(declare-fun selecuf$ (B_a_a_fun_fun_tree$)B_a_a_fun_fun_tree$)
(declare-fun node$m (B_a_a_fun_fun$ B_a_a_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_a_fun_fun_tree$)
(declare-fun selecug$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun$)
(declare-fun selecuh$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun_tree$)
(declare-fun selecui$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun_tree$)
(declare-fun node$n (B_a_fun_b_a_fun_fun$ B_a_fun_b_a_fun_fun_tree$ B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$)
(declare-fun selecuj$ (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$)
(declare-fun selecuk$ (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecul$ (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$o (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecum$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun$)
(declare-fun selecun$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun_tree$)
(declare-fun selecuo$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun_tree$)
(declare-fun node$p (B_b_a_fun_fun$ B_b_a_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$)
(declare-fun selecup$ (B_b_fun_b_a_fun_fun_tree$)B_b_fun_b_a_fun_fun$)
(declare-fun selecuq$ (B_b_fun_b_a_fun_fun_tree$)B_b_fun_b_a_fun_fun_tree$)
(declare-fun selecur$ (B_b_fun_b_a_fun_fun_tree$)B_b_fun_b_a_fun_fun_tree$)
(declare-fun node$q (B_b_fun_b_a_fun_fun$ B_b_fun_b_a_fun_fun_tree$ B_b_fun_b_a_fun_fun_tree$ )B_b_fun_b_a_fun_fun_tree$)
(declare-fun selecus$ (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$)
(declare-fun selecut$ (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecuu$ (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$r (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecuv$ (B_c_fun_b_a_fun_fun_tree$)B_c_fun_b_a_fun_fun$)
(declare-fun selecuw$ (B_c_fun_b_a_fun_fun_tree$)B_c_fun_b_a_fun_fun_tree$)
(declare-fun selecux$ (B_c_fun_b_a_fun_fun_tree$)B_c_fun_b_a_fun_fun_tree$)
(declare-fun node$s (B_c_fun_b_a_fun_fun$ B_c_fun_b_a_fun_fun_tree$ B_c_fun_b_a_fun_fun_tree$ )B_c_fun_b_a_fun_fun_tree$)
(declare-fun selecuy$ (B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$)B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun$)
(declare-fun selecuz$ (B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$)B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecva$ (B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$)B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$t (B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun$ B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ )B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecvb$ (C_a_a_fun_fun_tree$)C_a_a_fun_fun$)
(declare-fun selecvc$ (C_a_a_fun_fun_tree$)C_a_a_fun_fun_tree$)
(declare-fun selecvd$ (C_a_a_fun_fun_tree$)C_a_a_fun_fun_tree$)
(declare-fun node$u (C_a_a_fun_fun$ C_a_a_fun_fun_tree$ C_a_a_fun_fun_tree$ )C_a_a_fun_fun_tree$)
(declare-fun selecve$ (C_a_fun_c_a_fun_fun_tree$)C_a_fun_c_a_fun_fun$)
(declare-fun selecvf$ (C_a_fun_c_a_fun_fun_tree$)C_a_fun_c_a_fun_fun_tree$)
(declare-fun selecvg$ (C_a_fun_c_a_fun_fun_tree$)C_a_fun_c_a_fun_fun_tree$)
(declare-fun node$v (C_a_fun_c_a_fun_fun$ C_a_fun_c_a_fun_fun_tree$ C_a_fun_c_a_fun_fun_tree$ )C_a_fun_c_a_fun_fun_tree$)
(declare-fun selecvh$ (C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun$)
(declare-fun selecvi$ (C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecvj$ (C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)
(declare-fun node$w (C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun$ C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ )C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecvk$ (C_b_fun_tree$)C_b_fun$)
(declare-fun selecvl$ (C_b_fun_tree$)C_b_fun_tree$)
(declare-fun selecvm$ (C_b_fun_tree$)C_b_fun_tree$)
(declare-fun node$x (C_b_fun$ C_b_fun_tree$ C_b_fun_tree$ )C_b_fun_tree$)
(declare-fun selecvn$ (C_b_fun_c_a_fun_fun_tree$)C_b_fun_c_a_fun_fun$)
(declare-fun selecvo$ (C_b_fun_c_a_fun_fun_tree$)C_b_fun_c_a_fun_fun_tree$)
(declare-fun selecvp$ (C_b_fun_c_a_fun_fun_tree$)C_b_fun_c_a_fun_fun_tree$)
(declare-fun node$y (C_b_fun_c_a_fun_fun$ C_b_fun_c_a_fun_fun_tree$ C_b_fun_c_a_fun_fun_tree$ )C_b_fun_c_a_fun_fun_tree$)
(declare-fun selecvq$ (C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$)C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun$)
(declare-fun selecvr$ (C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$)C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecvs$ (C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$)C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$)
(declare-fun node$z (C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun$ C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$ C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$ )C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecvt$ (C_c_a_fun_fun_tree$)C_c_a_fun_fun$)
(declare-fun selecvu$ (C_c_a_fun_fun_tree$)C_c_a_fun_fun_tree$)
(declare-fun selecvv$ (C_c_a_fun_fun_tree$)C_c_a_fun_fun_tree$)
(declare-fun node$aa (C_c_a_fun_fun$ C_c_a_fun_fun_tree$ C_c_a_fun_fun_tree$ )C_c_a_fun_fun_tree$)
(declare-fun selecvw$ (C_c_fun_tree$)C_c_fun$)
(declare-fun selecvx$ (C_c_fun_tree$)C_c_fun_tree$)
(declare-fun selecvy$ (C_c_fun_tree$)C_c_fun_tree$)
(declare-fun node$ab (C_c_fun$ C_c_fun_tree$ C_c_fun_tree$ )C_c_fun_tree$)
(declare-fun selecvz$ (C_c_fun_c_a_fun_fun_tree$)C_c_fun_c_a_fun_fun$)
(declare-fun selecwa$ (C_c_fun_c_a_fun_fun_tree$)C_c_fun_c_a_fun_fun_tree$)
(declare-fun selecwb$ (C_c_fun_c_a_fun_fun_tree$)C_c_fun_c_a_fun_fun_tree$)
(declare-fun node$ac (C_c_fun_c_a_fun_fun$ C_c_fun_c_a_fun_fun_tree$ C_c_fun_c_a_fun_fun_tree$ )C_c_fun_c_a_fun_fun_tree$)
(declare-fun selecwc$ (C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$)C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun$)
(declare-fun selecwd$ (C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$)C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecwe$ (C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$)C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$)
(declare-fun node$ad (C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun$ C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$ C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$ )C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecwf$ (B_c_a_fun_a_fun_fun_tree$)B_c_a_fun_a_fun_fun$)
(declare-fun selecwg$ (B_c_a_fun_a_fun_fun_tree$)B_c_a_fun_a_fun_fun_tree$)
(declare-fun selecwh$ (B_c_a_fun_a_fun_fun_tree$)B_c_a_fun_a_fun_fun_tree$)
(declare-fun node$ae (B_c_a_fun_a_fun_fun$ B_c_a_fun_a_fun_fun_tree$ B_c_a_fun_a_fun_fun_tree$ )B_c_a_fun_a_fun_fun_tree$)
(declare-fun selecwi$ (B_c_a_fun_fun_b_a_fun_fun_tree$)B_c_a_fun_fun_b_a_fun_fun$)
(declare-fun selecwj$ (B_c_a_fun_fun_b_a_fun_fun_tree$)B_c_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun selecwk$ (B_c_a_fun_fun_b_a_fun_fun_tree$)B_c_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun node$af (B_c_a_fun_fun_b_a_fun_fun$ B_c_a_fun_fun_b_a_fun_fun_tree$ B_c_a_fun_fun_b_a_fun_fun_tree$ )B_c_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun selecwl$ (B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$)B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun$)
(declare-fun selecwm$ (B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$)B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecwn$ (B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$)B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$ag (B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun$ B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ )B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecwo$ (C_a_fun_a_fun_tree$)C_a_fun_a_fun$)
(declare-fun selecwp$ (C_a_fun_a_fun_tree$)C_a_fun_a_fun_tree$)
(declare-fun selecwq$ (C_a_fun_a_fun_tree$)C_a_fun_a_fun_tree$)
(declare-fun node$ah (C_a_fun_a_fun$ C_a_fun_a_fun_tree$ C_a_fun_a_fun_tree$ )C_a_fun_a_fun_tree$)
(declare-fun selecwr$ (C_a_b_a_fun_fun_fun_tree$)C_a_b_a_fun_fun_fun$)
(declare-fun selecws$ (C_a_b_a_fun_fun_fun_tree$)C_a_b_a_fun_fun_fun_tree$)
(declare-fun selecwt$ (C_a_b_a_fun_fun_fun_tree$)C_a_b_a_fun_fun_fun_tree$)
(declare-fun node$ai (C_a_b_a_fun_fun_fun$ C_a_b_a_fun_fun_fun_tree$ C_a_b_a_fun_fun_fun_tree$ )C_a_b_a_fun_fun_fun_tree$)
(declare-fun selecwu$ (C_a_fun_c_b_a_fun_fun_fun_tree$)C_a_fun_c_b_a_fun_fun_fun$)
(declare-fun selecwv$ (C_a_fun_c_b_a_fun_fun_fun_tree$)C_a_fun_c_b_a_fun_fun_fun_tree$)
(declare-fun selecww$ (C_a_fun_c_b_a_fun_fun_fun_tree$)C_a_fun_c_b_a_fun_fun_fun_tree$)
(declare-fun node$aj (C_a_fun_c_b_a_fun_fun_fun$ C_a_fun_c_b_a_fun_fun_fun_tree$ C_a_fun_c_b_a_fun_fun_fun_tree$ )C_a_fun_c_b_a_fun_fun_fun_tree$)
(declare-fun selecwx$ (C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$)C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun$)
(declare-fun selecwy$ (C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$)C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecwz$ (C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$)C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$ak (C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun$ C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ )C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecxa$ (C_c_b_a_fun_fun_fun_tree$)C_c_b_a_fun_fun_fun$)
(declare-fun selecxb$ (C_c_b_a_fun_fun_fun_tree$)C_c_b_a_fun_fun_fun_tree$)
(declare-fun selecxc$ (C_c_b_a_fun_fun_fun_tree$)C_c_b_a_fun_fun_fun_tree$)
(declare-fun node$al (C_c_b_a_fun_fun_fun$ C_c_b_a_fun_fun_fun_tree$ C_c_b_a_fun_fun_fun_tree$ )C_c_b_a_fun_fun_fun_tree$)
(declare-fun selecxd$ (C_c_fun_c_b_a_fun_fun_fun_tree$)C_c_fun_c_b_a_fun_fun_fun$)
(declare-fun selecxe$ (C_c_fun_c_b_a_fun_fun_fun_tree$)C_c_fun_c_b_a_fun_fun_fun_tree$)
(declare-fun selecxf$ (C_c_fun_c_b_a_fun_fun_fun_tree$)C_c_fun_c_b_a_fun_fun_fun_tree$)
(declare-fun node$am (C_c_fun_c_b_a_fun_fun_fun$ C_c_fun_c_b_a_fun_fun_fun_tree$ C_c_fun_c_b_a_fun_fun_fun_tree$ )C_c_fun_c_b_a_fun_fun_fun_tree$)
(declare-fun selecxg$ (C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$)C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun$)
(declare-fun selecxh$ (C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$)C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecxi$ (C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$)C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$an (C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun$ C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ )C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecxj$ (C_b_a_fun_a_fun_fun_tree$)C_b_a_fun_a_fun_fun$)
(declare-fun selecxk$ (C_b_a_fun_a_fun_fun_tree$)C_b_a_fun_a_fun_fun_tree$)
(declare-fun selecxl$ (C_b_a_fun_a_fun_fun_tree$)C_b_a_fun_a_fun_fun_tree$)
(declare-fun node$ao (C_b_a_fun_a_fun_fun$ C_b_a_fun_a_fun_fun_tree$ C_b_a_fun_a_fun_fun_tree$ )C_b_a_fun_a_fun_fun_tree$)
(declare-fun selecxm$ (C_b_a_fun_fun_c_a_fun_fun_tree$)C_b_a_fun_fun_c_a_fun_fun$)
(declare-fun selecxn$ (C_b_a_fun_fun_c_a_fun_fun_tree$)C_b_a_fun_fun_c_a_fun_fun_tree$)
(declare-fun selecxo$ (C_b_a_fun_fun_c_a_fun_fun_tree$)C_b_a_fun_fun_c_a_fun_fun_tree$)
(declare-fun node$ap (C_b_a_fun_fun_c_a_fun_fun$ C_b_a_fun_fun_c_a_fun_fun_tree$ C_b_a_fun_fun_c_a_fun_fun_tree$ )C_b_a_fun_fun_c_a_fun_fun_tree$)
(declare-fun selecxp$ (C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$)C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun$)
(declare-fun selecxq$ (C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$)C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecxr$ (C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$)C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$)
(declare-fun node$aq (C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun$ C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ )C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecxs$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun$)
(declare-fun selecxt$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun_tree$)
(declare-fun selecxu$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun_tree$)
(declare-fun node$ar (B_a_fun_a_fun$ B_a_fun_a_fun_tree$ B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$)
(declare-fun selecxv$ (C_b_c_fun_fun_tree$)C_b_c_fun_fun$)
(declare-fun selecxw$ (C_b_c_fun_fun_tree$)C_b_c_fun_fun_tree$)
(declare-fun selecxx$ (C_b_c_fun_fun_tree$)C_b_c_fun_fun_tree$)
(declare-fun node$as (C_b_c_fun_fun$ C_b_c_fun_fun_tree$ C_b_c_fun_fun_tree$ )C_b_c_fun_fun_tree$)
(declare-fun selecxy$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun$)
(declare-fun selecxz$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun_tree$)
(declare-fun selecya$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun_tree$)
(declare-fun node$at (B_b_b_fun_fun$ B_b_b_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_b_fun_fun_tree$)
(declare-fun selecyb$ (C_a_fun_a_c_a_fun_fun_fun_tree$)C_a_fun_a_c_a_fun_fun_fun$)
(declare-fun selecyc$ (C_a_fun_a_c_a_fun_fun_fun_tree$)C_a_fun_a_c_a_fun_fun_fun_tree$)
(declare-fun selecyd$ (C_a_fun_a_c_a_fun_fun_fun_tree$)C_a_fun_a_c_a_fun_fun_fun_tree$)
(declare-fun node$au (C_a_fun_a_c_a_fun_fun_fun$ C_a_fun_a_c_a_fun_fun_fun_tree$ C_a_fun_a_c_a_fun_fun_fun_tree$ )C_a_fun_a_c_a_fun_fun_fun_tree$)
(declare-fun selecye$ (B_a_fun_a_b_a_fun_fun_fun_tree$)B_a_fun_a_b_a_fun_fun_fun$)
(declare-fun selecyf$ (B_a_fun_a_b_a_fun_fun_fun_tree$)B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun selecyg$ (B_a_fun_a_b_a_fun_fun_fun_tree$)B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun node$av (B_a_fun_a_b_a_fun_fun_fun$ B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_a_b_a_fun_fun_fun_tree$ )B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun selecyh$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun$)
(declare-fun selecyi$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun selecyj$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun node$aw (A_a_a_fun_fun$ A_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$)
(declare-fun selecyk$ (B_a_fun_c_b_a_fun_fun_fun_tree$)B_a_fun_c_b_a_fun_fun_fun$)
(declare-fun selecyl$ (B_a_fun_c_b_a_fun_fun_fun_tree$)B_a_fun_c_b_a_fun_fun_fun_tree$)
(declare-fun selecym$ (B_a_fun_c_b_a_fun_fun_fun_tree$)B_a_fun_c_b_a_fun_fun_fun_tree$)
(declare-fun node$ax (B_a_fun_c_b_a_fun_fun_fun$ B_a_fun_c_b_a_fun_fun_fun_tree$ B_a_fun_c_b_a_fun_fun_fun_tree$ )B_a_fun_c_b_a_fun_fun_fun_tree$)
(declare-fun selecyn$ (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$)C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun$)
(declare-fun selecyo$ (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$)C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecyp$ (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$)C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$ay (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecyq$ (C_a_fun_b_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_fun$)
(declare-fun selecyr$ (C_a_fun_b_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_fun_tree$)
(declare-fun selecys$ (C_a_fun_b_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_fun_tree$)
(declare-fun node$az (C_a_fun_b_c_a_fun_fun_fun$ C_a_fun_b_c_a_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_fun_tree$ )C_a_fun_b_c_a_fun_fun_fun_tree$)
(declare-fun selecyt$ (A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)A_a_fun_b_a_fun_b_a_fun_fun_fun$)
(declare-fun selecyu$ (A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecyv$ (A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$ba (A_a_fun_b_a_fun_b_a_fun_fun_fun$ A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecyw$ (B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_b_fun_b_a_fun_fun_fun$)
(declare-fun selecyx$ (B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecyy$ (B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$bb (B_a_fun_b_b_fun_b_a_fun_fun_fun$ B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ )B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecyz$ (C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)C_a_fun_b_c_fun_b_a_fun_fun_fun$)
(declare-fun selecza$ (C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun seleczb$ (C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$bc (C_a_fun_b_c_fun_b_a_fun_fun_fun$ C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun seleczc$ (A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$)A_a_fun_c_a_fun_c_a_fun_fun_fun$)
(declare-fun seleczd$ (A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$)A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$)
(declare-fun selecze$ (A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$)A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$)
(declare-fun node$bd (A_a_fun_c_a_fun_c_a_fun_fun_fun$ A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ )A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$)
(declare-fun seleczf$ (B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$)B_a_fun_c_b_fun_c_a_fun_fun_fun$)
(declare-fun seleczg$ (B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$)B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$)
(declare-fun seleczh$ (B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$)B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$)
(declare-fun node$be (B_a_fun_c_b_fun_c_a_fun_fun_fun$ B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ )B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$)
(declare-fun seleczi$ (C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$)C_a_fun_c_c_fun_c_a_fun_fun_fun$)
(declare-fun seleczj$ (C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$)C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$)
(declare-fun seleczk$ (C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$)C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$)
(declare-fun node$bf (C_a_fun_c_c_fun_c_a_fun_fun_fun$ C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ )C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$)
(declare-fun seleczl$ (C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$)C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun$)
(declare-fun seleczm$ (C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$)C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun seleczn$ (C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$)C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$bg (C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun$ C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ )C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun seleczo$ (A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$)A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun$)
(declare-fun seleczp$ (A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$)A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun seleczq$ (A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$)A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$bh (A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun$ A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ )A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun seleczr$ (C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$)C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun$)
(declare-fun seleczs$ (C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$)C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun seleczt$ (C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$)C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$bi (C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun$ C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ )C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun seleczu$ (B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$)B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun$)
(declare-fun seleczv$ (B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$)B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$)
(declare-fun seleczw$ (B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$)B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$)
(declare-fun node$bj (B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun$ B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ )B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$)
(declare-fun seleczx$ (C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun$)
(declare-fun seleczy$ (C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)
(declare-fun seleczz$ (C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)
(declare-fun node$bk (C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun$ C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ )C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$)
(declare-fun seledaa$ (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun$)
(declare-fun seledab$ (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$)
(declare-fun seledac$ (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$)
(declare-fun node$bl (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ )C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$)
(declare-fun seledad$ (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun$)
(declare-fun seledae$ (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$)
(declare-fun seledaf$ (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$)C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$)
(declare-fun node$bm (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ )C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$)
(declare-fun seledag$ (A_c_a_fun_fun_a_a_fun_fun_tree$)A_c_a_fun_fun_a_a_fun_fun$)
(declare-fun seledah$ (A_c_a_fun_fun_a_a_fun_fun_tree$)A_c_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun seledai$ (A_c_a_fun_fun_a_a_fun_fun_tree$)A_c_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun node$bn (A_c_a_fun_fun_a_a_fun_fun$ A_c_a_fun_fun_a_a_fun_fun_tree$ A_c_a_fun_fun_a_a_fun_fun_tree$ )A_c_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun seledaj$ (A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$)A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun$)
(declare-fun seledak$ (A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$)A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun seledal$ (A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$)A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$bo (A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun$ A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ )A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun seledam$ (A_c_a_fun_a_fun_fun_tree$)A_c_a_fun_a_fun_fun$)
(declare-fun seledan$ (A_c_a_fun_a_fun_fun_tree$)A_c_a_fun_a_fun_fun_tree$)
(declare-fun seledao$ (A_c_a_fun_a_fun_fun_tree$)A_c_a_fun_a_fun_fun_tree$)
(declare-fun node$bp (A_c_a_fun_a_fun_fun$ A_c_a_fun_a_fun_fun_tree$ A_c_a_fun_a_fun_fun_tree$ )A_c_a_fun_a_fun_fun_tree$)
(declare-fun seledap$ (C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$)C_b_a_fun_fun_c_b_a_fun_fun_fun$)
(declare-fun seledaq$ (C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$)C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$)
(declare-fun seledar$ (C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$)C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$)
(declare-fun node$bq (C_b_a_fun_fun_c_b_a_fun_fun_fun$ C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$ C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$ )C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$)
(declare-fun seledas$ (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$)C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun$)
(declare-fun seledat$ (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$)C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun seledau$ (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$)C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$br (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun seledav$ (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$)C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun$)
(declare-fun seledaw$ (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$)C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$)
(declare-fun seledax$ (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$)C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$)
(declare-fun node$bs (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$ )C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$)
(declare-fun seleday$ (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$)C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun$)
(declare-fun seledaz$ (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$)C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun seledba$ (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$)C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$bt (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$)
(declare-fun seledbb$ (B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun$)
(declare-fun seledbc$ (B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun seledbd$ (B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$bu (B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun$ B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun seledbe$ (B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$)B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun$)
(declare-fun seledbf$ (B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$)B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$)
(declare-fun seledbg$ (B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$)B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$bv (B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun$ B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ )B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$)
(declare-fun seledbh$ (B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$)B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun$)
(declare-fun seledbi$ (B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$)B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun seledbj$ (B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$)B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$bw (B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun$ B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$ )B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun seledbk$ (A_b_a_fun_fun_a_a_fun_fun_tree$)A_b_a_fun_fun_a_a_fun_fun$)
(declare-fun seledbl$ (A_b_a_fun_fun_a_a_fun_fun_tree$)A_b_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun seledbm$ (A_b_a_fun_fun_a_a_fun_fun_tree$)A_b_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun node$bx (A_b_a_fun_fun_a_a_fun_fun$ A_b_a_fun_fun_a_a_fun_fun_tree$ A_b_a_fun_fun_a_a_fun_fun_tree$ )A_b_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun seledbn$ (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun$)
(declare-fun seledbo$ (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun seledbp$ (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$by (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun$ A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ )A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun seledbq$ (A_b_a_fun_a_fun_fun_tree$)A_b_a_fun_a_fun_fun$)
(declare-fun seledbr$ (A_b_a_fun_a_fun_fun_tree$)A_b_a_fun_a_fun_fun_tree$)
(declare-fun seledbs$ (A_b_a_fun_a_fun_fun_tree$)A_b_a_fun_a_fun_fun_tree$)
(declare-fun node$bz (A_b_a_fun_a_fun_fun$ A_b_a_fun_a_fun_fun_tree$ A_b_a_fun_a_fun_fun_tree$ )A_b_a_fun_a_fun_fun_tree$)
(declare-fun seledbt$ (A_c_fun_tree$)A_c_fun$)
(declare-fun seledbu$ (A_c_fun_tree$)A_c_fun_tree$)
(declare-fun seledbv$ (A_c_fun_tree$)A_c_fun_tree$)
(declare-fun node$ca (A_c_fun$ A_c_fun_tree$ A_c_fun_tree$ )A_c_fun_tree$)
(declare-fun u$ ()B_c_a_fun_fun_tree$ )
(declare-fun v$ ()C_tree$ )
(declare-fun w$ ()B_tree$ )
(declare-fun comp$ ()A_a_fun_b_a_fun_b_a_fun_fun_fun$ )
(declare-fun comp$a ()B_a_fun_b_b_fun_b_a_fun_fun_fun$ )
(declare-fun comp$b ()C_a_fun_b_c_fun_b_a_fun_fun_fun$ )
(declare-fun comp$c ()A_a_fun_c_a_fun_c_a_fun_fun_fun$ )
(declare-fun comp$d ()B_a_fun_c_b_fun_c_a_fun_fun_fun$ )
(declare-fun comp$e ()C_a_fun_c_c_fun_c_a_fun_fun_fun$ )
(declare-fun comp$f ()C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun$ )
(declare-fun comp$g ()A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun$ )
(declare-fun comp$h ()C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun$ )
(declare-fun comp$i ()B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun$ )
(declare-fun left$c (B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun left$d (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun left$e (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun left$f (C_b_a_fun_fun_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun left$g (B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun left$h (B_c_a_fun_fun_tree$ )B_c_a_fun_fun_tree$ )
(declare-fun left$i (C_a_fun_tree$ )C_a_fun_tree$ )
(declare-fun root$c (B_a_fun_tree$ )B_a_fun$ )
(declare-fun root$d (C_a_fun_tree$ )C_a_fun$ )
(declare-fun root$e (C_b_a_fun_fun_tree$ )C_b_a_fun_fun$ )
(declare-fun root$f (B_c_a_fun_fun_tree$ )B_c_a_fun_fun$ )
(declare-fun root$g (B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )B_c_a_fun_fun_c_b_a_fun_fun_fun$ )
(declare-fun root$h (C_c_fun_tree$ )C_c_fun$ )
(declare-fun root$i (B_c_fun_tree$ )B_c_fun$ )
(declare-fun root$j (A_c_fun_tree$ )A_c_fun$ )
(declare-fun root$k (C_b_fun_tree$ )C_b_fun$ )
(declare-fun root$l (B_b_fun_tree$ )B_b_fun$ )
(declare-fun right$c (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun right$d (C_b_a_fun_fun_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun right$e (B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun right$f (B_c_a_fun_fun_tree$ )B_c_a_fun_fun_tree$ )
(declare-fun right$g (C_a_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_C$ ()B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_I$ ()C_a_fun_c_a_fun_fun_tree$ )
(declare-fun tree_K$ ()C_b_c_fun_fun_tree$ )
(declare-fun tree_S$ ()B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun fun_app$ (B_a_fun$ B$ )A$ )
(declare-fun tree_I$a ()A_a_fun_tree$ )
(declare-fun tree_I$b ()C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_I$c ()B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_K$a ()B_b_b_fun_fun_tree$ )
(declare-fun tree_K$b ()C_a_fun_a_c_a_fun_fun_fun_tree$ )
(declare-fun tree_K$c ()B_a_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$d ()A_a_a_fun_fun_tree$ )
(declare-fun tree_K$e ()A_b_a_fun_fun_tree$ )
(declare-fun tree_K$f ()B_a_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$g ()C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_K$h ()A_c_a_fun_fun_tree$ )
(declare-fun tree_K$i ()C_a_fun_b_c_a_fun_fun_fun_tree$ )
(declare-fun tree_K$j ()C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_K$k ()A_c_a_fun_a_fun_fun_tree$ )
(declare-fun tree_K$l ()C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_K$m ()B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$n ()A_b_a_fun_a_fun_fun_tree$ )
(declare-fun tree_S$a ()B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$b ()B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$c ()C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_S$d ()C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_S$e ()C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_S$f ()B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$g ()C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$h ()C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$i ()C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_S$j ()C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$k ()A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$l ()C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$m ()B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$n ()A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun fun_app$a (C_a_fun$ C$ )A$ )
(declare-fun fun_app$b (C_b_a_fun_fun$ C$ )B_a_fun$ )
(declare-fun fun_app$c (B_c_a_fun_fun$ B$ )C_a_fun$ )
(declare-fun fun_app$d (B_c_a_fun_fun_c_b_a_fun_fun_fun$ B_c_a_fun_fun$ )C_b_a_fun_fun$ )
(declare-fun fun_app$e (C_c_fun$ C$ )C$ )
(declare-fun fun_app$f (C_b_fun$ C$ )B$ )
(declare-fun fun_app$g (B_c_fun$ B$ )C$ )
(declare-fun fun_app$h (B_b_fun$ B$ )B$ )
(declare-fun fun_app$i (A_c_fun$ A$ )C$ )
(declare-fun map_tree$ (B_c_fun$ B_tree$ )C_tree$ )
(declare-fun tree_ap$a (C_b_a_fun_fun_tree$ C_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$b (B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ B_c_a_fun_fun_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun tree_ap$c (C_a_fun_tree$ C_tree$ )A_tree$ )
(declare-fun tree_ap$d (B_c_a_fun_fun_tree$ B_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$e (B_c_fun_tree$ B_tree$ )C_tree$ )
(declare-fun tree_ap$f (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun tree_ap$g (A_c_a_fun_fun_tree$ A_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$h (A_b_a_fun_fun_tree$ A_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$i (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$j (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$k (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$l (B_a_a_fun_fun_tree$ B_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$m (B_b_fun_b_a_fun_fun_tree$ B_b_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$n (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$o (B_b_a_fun_fun_tree$ B_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$p (B_c_fun_b_a_fun_fun_tree$ B_c_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$q (B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ B_c_a_fun_fun_tree$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$r (C_a_fun_c_a_fun_fun_tree$ C_a_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$s (C_a_a_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ C_a_a_fun_fun_tree$ )C_a_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$t (C_a_a_fun_fun_tree$ C_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$u (C_b_fun_c_a_fun_fun_tree$ C_b_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$v (C_b_a_fun_fun_c_b_fun_c_a_fun_fun_fun_tree$ C_b_a_fun_fun_tree$ )C_b_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$w (C_b_fun_tree$ C_tree$ )B_tree$ )
(declare-fun tree_ap$x (C_c_fun_c_a_fun_fun_tree$ C_c_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$y (C_c_a_fun_fun_c_c_fun_c_a_fun_fun_fun_tree$ C_c_a_fun_fun_tree$ )C_c_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$z (C_c_a_fun_fun_tree$ C_tree$ )C_a_fun_tree$ )
(declare-fun map_tree$a (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun map_tree$b (A_c_a_fun_fun$ A_tree$ )C_a_fun_tree$ )
(declare-fun map_tree$c (A_b_a_fun_fun$ A_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$d (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$e (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun map_tree$f (C_b_a_fun_fun$ C_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$g (B_c_a_fun_fun_c_b_a_fun_fun_fun$ B_c_a_fun_fun_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun map_tree$h (C_a_fun$ C_tree$ )A_tree$ )
(declare-fun map_tree$i (B_c_a_fun_fun$ B_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$aa (C_c_fun_tree$ C_tree$ )C_tree$ )
(declare-fun tree_ap$ab (B_c_a_fun_fun_b_a_fun_fun_tree$ B_c_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$ac (B_c_a_fun_a_fun_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ B_c_a_fun_a_fun_fun_tree$ )B_c_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ad (C_a_fun_a_fun_tree$ C_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$ae (B_c_a_fun_a_fun_fun_tree$ B_tree$ )C_a_fun_a_fun_tree$ )
(declare-fun tree_ap$af (C_a_fun_c_b_a_fun_fun_fun_tree$ C_a_fun_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ag (C_a_b_a_fun_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ C_a_b_a_fun_fun_fun_tree$ )C_a_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$ah (C_a_b_a_fun_fun_fun_tree$ C_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ai (C_c_fun_c_b_a_fun_fun_fun_tree$ C_c_fun_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun tree_ap$aj (C_c_b_a_fun_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ C_c_b_a_fun_fun_fun_tree$ )C_c_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$ak (C_c_b_a_fun_fun_fun_tree$ C_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun tree_ap$al (C_b_a_fun_fun_c_a_fun_fun_tree$ C_b_a_fun_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$am (C_b_a_fun_a_fun_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ C_b_a_fun_a_fun_fun_tree$ )C_b_a_fun_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$an (B_a_fun_a_fun_tree$ B_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$ao (C_b_a_fun_a_fun_fun_tree$ C_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_ap$ap (C_b_c_fun_fun_tree$ C_tree$ )B_c_fun_tree$ )
(declare-fun tree_ap$aq (B_b_b_fun_fun_tree$ B_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$ar (C_a_fun_a_c_a_fun_fun_fun_tree$ C_a_fun_tree$ )A_c_a_fun_fun_tree$ )
(declare-fun tree_ap$as (B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$at (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$au (B_a_fun_c_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )C_b_a_fun_fun_tree$ )
(declare-fun tree_ap$av (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ C_b_a_fun_fun_tree$ )B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$aw (C_a_fun_b_c_a_fun_fun_fun_tree$ C_a_fun_tree$ )B_c_a_fun_fun_tree$ )
(declare-fun tree_ap$ax (A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ A_a_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ay (B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )B_b_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$az (C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ C_a_fun_tree$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ba (A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ A_a_fun_tree$ )C_a_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$bb (B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ B_a_fun_tree$ )C_b_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$bc (C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ C_a_fun_tree$ )C_c_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$bd (C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ C_a_fun_a_fun_tree$ )B_c_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$be (A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ A_b_a_fun_fun_tree$ )C_a_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$bf (C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ C_b_a_fun_fun_tree$ )C_c_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$bg (B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ B_a_fun_a_fun_tree$ )C_b_a_fun_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$bh (C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_fun_tree$ )C_a_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$bi (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ )C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$bj (A_c_a_fun_fun_a_a_fun_fun_tree$ A_c_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$bk (A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ A_c_a_fun_a_fun_fun_tree$ )A_c_a_fun_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$bl (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )C_b_a_fun_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$bm (C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_fun_tree$ C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )C_b_a_fun_fun_b_c_a_fun_fun_c_b_a_fun_fun_fun_fun_c_b_a_fun_fun_c_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_ap$bn (B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_fun_c_b_a_fun_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$bo (B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ B_a_fun_c_b_a_fun_fun_b_a_fun_fun_fun_tree$ )B_a_fun_c_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$bp (A_b_a_fun_fun_a_a_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$bq (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_a_fun_fun_tree$ )A_b_a_fun_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$br (A_c_fun_tree$ A_tree$ )C_tree$ )
(declare-fun tree_pure$ (B$ )B_tree$ )
(declare-fun tree_pure$a (A$ )A_tree$ )
(declare-fun tree_pure$b (C$ )C_tree$ )
(declare-fun tree_pure$c (B_c_a_fun_fun$ )B_c_a_fun_fun_tree$ )
(declare-fun tree_pure$d (A_a_fun_b_a_fun_b_a_fun_fun_fun$ )A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$e (B_a_fun_b_b_fun_b_a_fun_fun_fun$ )B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$f (C_a_fun_b_c_fun_b_a_fun_fun_fun$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$g (A_a_fun_c_a_fun_c_a_fun_fun_fun$ )A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$h (B_a_fun_c_b_fun_c_a_fun_fun_fun$ )B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$i (C_a_fun_c_c_fun_c_a_fun_fun_fun$ )C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$j (C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun$ )C_a_fun_a_fun_b_c_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$k (A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun$ )A_b_a_fun_fun_c_a_fun_c_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_pure$l (C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun$ )C_b_a_fun_fun_c_c_fun_c_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_pure$m (B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun$ )B_a_fun_a_fun_c_b_a_fun_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$n (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$o (C_a_fun$ )C_a_fun_tree$ )
(declare-fun tree_pure$p (C_b_a_fun_fun$ )C_b_a_fun_fun_tree$ )
(declare-fun tree_pure$q (B_c_a_fun_fun_c_b_a_fun_fun_fun$ )B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$r (C_c_fun$ )C_c_fun_tree$ )
(declare-fun tree_pure$s (C_b_fun$ )C_b_fun_tree$ )
(declare-fun tree_pure$t (B_c_fun$ )B_c_fun_tree$ )
(declare-fun tree_pure$u (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$v (A_c_fun$ )A_c_fun_tree$ )
(declare-fun tree_pure$w (A_c_a_fun_fun$ )A_c_a_fun_fun_tree$ )
(declare-fun tree_pure$x (A_b_a_fun_fun$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_pure$y (A_a_fun$ )A_a_fun_tree$ )
(assert (! (not (= (tree_ap$ (tree_ap$a (tree_ap$b tree_C$ u$ )v$ )w$ )(tree_ap$c (tree_ap$d u$ w$ )v$ ))):named a0 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_c_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$e ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$f ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_c_a_fun_fun_tree$ )(?v1 A_c_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$g ?v0 ?v2 )(tree_ap$g ?v1 ?v2 )))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$h ?v0 ?v2 )(tree_ap$h ?v1 ?v2 )))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$i ?v0 ?v2 )(tree_ap$i ?v1 ?v2 )))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$ ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 C_b_a_fun_fun_tree$ ))(=> (forall ((?v2 C_tree$ ))(= (tree_ap$a ?v0 ?v2 )(tree_ap$a ?v1 ?v2 )))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(?v1 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ ))(=> (forall ((?v2 B_c_a_fun_fun_tree$ ))(= (tree_ap$b ?v0 ?v2 )(tree_ap$b ?v1 ?v2 )))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_a_fun_tree$ ))(=> (forall ((?v2 C_tree$ ))(= (tree_ap$c ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$d ?v0 ?v2 )(tree_ap$d ?v1 ?v2 )))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$j (tree_ap$k tree_S$ ?v0 )?v1 )?v2 )(tree_ap$i (tree_ap$l ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$m (tree_ap$n tree_S$a ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$o ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_c_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$p (tree_ap$q tree_S$b ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$d ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 C_a_a_fun_fun_tree$ )(?v1 C_a_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$r (tree_ap$s tree_S$c ?v0 )?v1 )?v2 )(tree_ap$i (tree_ap$t ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 C_b_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$u (tree_ap$v tree_S$d ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$a ?v0 ?v2 )(tree_ap$w ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 C_c_a_fun_fun_tree$ )(?v1 C_c_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$x (tree_ap$y tree_S$e ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$z ?v0 ?v2 )(tree_ap$aa ?v1 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 B_c_a_fun_a_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ab (tree_ap$ac tree_S$f ?v0 )?v1 )?v2 )(tree_ap$ad (tree_ap$ae ?v0 ?v2 )(tree_ap$d ?v1 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 C_a_b_a_fun_fun_fun_tree$ )(?v1 C_a_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$a (tree_ap$af (tree_ap$ag tree_S$g ?v0 )?v1 )?v2 )(tree_ap$h (tree_ap$ah ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 C_c_b_a_fun_fun_fun_tree$ )(?v1 C_c_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$a (tree_ap$ai (tree_ap$aj tree_S$h ?v0 )?v1 )?v2 )(tree_ap$a (tree_ap$ak ?v0 ?v2 )(tree_ap$aa ?v1 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 C_b_a_fun_a_fun_fun_tree$ )(?v1 C_b_a_fun_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$al (tree_ap$am tree_S$i ?v0 )?v1 )?v2 )(tree_ap$an (tree_ap$ao ?v0 ?v2 )(tree_ap$a ?v1 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 C_tree$ )(?v1 B_tree$ ))(= (tree_ap$e (tree_ap$ap tree_K$ ?v0 )?v1 )?v0 )):named a21 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_tree$ ))(= (tree_ap$f (tree_ap$aq tree_K$a ?v0 )?v1 )?v0 )):named a22 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$g (tree_ap$ar tree_K$b ?v0 )?v1 )?v0 )):named a23 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$h (tree_ap$as tree_K$c ?v0 )?v1 )?v0 )):named a24 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (tree_ap$i (tree_ap$at tree_K$d ?v0 )?v1 )?v0 )):named a25 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_ap$h tree_K$e ?v0 )?v1 )?v0 )):named a26 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 C_tree$ ))(= (tree_ap$a (tree_ap$au tree_K$f ?v0 )?v1 )?v0 )):named a27 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(= (tree_ap$b (tree_ap$av tree_K$g ?v0 )?v1 )?v0 )):named a28 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 C_tree$ ))(= (tree_ap$c (tree_ap$g tree_K$h ?v0 )?v1 )?v0 )):named a29 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$d (tree_ap$aw tree_K$i ?v0 )?v1 )?v0 )):named a30 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_c_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$e ?v0 (tree_pure$ ?v2 ))(tree_ap$e ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$f ?v0 (tree_pure$ ?v2 ))(tree_ap$f ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_c_a_fun_fun_tree$ )(?v1 A_c_a_fun_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$g ?v0 (tree_pure$a ?v2 ))(tree_ap$g ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a33 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$h ?v0 (tree_pure$a ?v2 ))(tree_ap$h ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a34 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$i ?v0 (tree_pure$a ?v2 ))(tree_ap$i ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a35 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$ ?v0 (tree_pure$ ?v2 ))(tree_ap$ ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 C_b_a_fun_fun_tree$ ))(=> (forall ((?v2 C$ ))(= (tree_ap$a ?v0 (tree_pure$b ?v2 ))(tree_ap$a ?v1 (tree_pure$b ?v2 ))))(= ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(?v1 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ ))(=> (forall ((?v2 B_c_a_fun_fun$ ))(= (tree_ap$b ?v0 (tree_pure$c ?v2 ))(tree_ap$b ?v1 (tree_pure$c ?v2 ))))(= ?v0 ?v1 ))):named a38 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_a_fun_tree$ ))(=> (forall ((?v2 C$ ))(= (tree_ap$c ?v0 (tree_pure$b ?v2 ))(tree_ap$c ?v1 (tree_pure$b ?v2 ))))(= ?v0 ?v1 ))):named a39 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$d ?v0 (tree_pure$ ?v2 ))(tree_ap$d ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a40 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$j (tree_ap$ax (tree_pure$d comp$ )?v0 )?v1 )?v2 )(tree_ap$i ?v0 (tree_ap$ ?v1 ?v2 )))):named a41 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$m (tree_ap$ay (tree_pure$e comp$a )?v0 )?v1 )?v2 )(tree_ap$ ?v0 (tree_ap$f ?v1 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 B_c_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$p (tree_ap$az (tree_pure$f comp$b )?v0 )?v1 )?v2 )(tree_ap$c ?v0 (tree_ap$e ?v1 ?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 C_a_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$r (tree_ap$ba (tree_pure$g comp$c )?v0 )?v1 )?v2 )(tree_ap$i ?v0 (tree_ap$c ?v1 ?v2 )))):named a44 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 C_b_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$u (tree_ap$bb (tree_pure$h comp$d )?v0 )?v1 )?v2 )(tree_ap$ ?v0 (tree_ap$w ?v1 ?v2 )))):named a45 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_c_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$x (tree_ap$bc (tree_pure$i comp$e )?v0 )?v1 )?v2 )(tree_ap$c ?v0 (tree_ap$aa ?v1 ?v2 )))):named a46 ))
(assert (! (forall ((?v0 C_a_fun_a_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ab (tree_ap$bd (tree_pure$j comp$f )?v0 )?v1 )?v2 )(tree_ap$ad ?v0 (tree_ap$d ?v1 ?v2 )))):named a47 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 C_a_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$a (tree_ap$af (tree_ap$be (tree_pure$k comp$g )?v0 )?v1 )?v2 )(tree_ap$h ?v0 (tree_ap$c ?v1 ?v2 )))):named a48 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 C_c_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$a (tree_ap$ai (tree_ap$bf (tree_pure$l comp$h )?v0 )?v1 )?v2 )(tree_ap$a ?v0 (tree_ap$aa ?v1 ?v2 )))):named a49 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 C_b_a_fun_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$al (tree_ap$bg (tree_pure$m comp$i )?v0 )?v1 )?v2 )(tree_ap$an ?v0 (tree_ap$a ?v1 ?v2 )))):named a50 ))
(assert (! (= tree_I$ (tree_ap$bh (tree_ap$bi tree_S$j tree_K$j )tree_K$i )):named a51 ))
(assert (! (= tree_I$a (tree_ap$bj (tree_ap$bk tree_S$k tree_K$k )tree_K$h )):named a52 ))
(assert (! (= tree_I$b (tree_ap$bl (tree_ap$bm tree_S$l tree_K$l )tree_K$g )):named a53 ))
(assert (! (= tree_I$c (tree_ap$bn (tree_ap$bo tree_S$m tree_K$m )tree_K$f )):named a54 ))
(assert (! (= tree_I$a (tree_ap$bp (tree_ap$bq tree_S$n tree_K$n )tree_K$e )):named a55 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (tree_ap$ (tree_pure$n ?v0 )(tree_pure$ ?v1 ))(tree_pure$a (fun_app$ ?v0 ?v1 )))):named a56 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C$ ))(= (tree_ap$c (tree_pure$o ?v0 )(tree_pure$b ?v1 ))(tree_pure$a (fun_app$a ?v0 ?v1 )))):named a57 ))
(assert (! (forall ((?v0 C_b_a_fun_fun$ )(?v1 C$ ))(= (tree_ap$a (tree_pure$p ?v0 )(tree_pure$b ?v1 ))(tree_pure$n (fun_app$b ?v0 ?v1 )))):named a58 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$d (tree_pure$c ?v0 )(tree_pure$ ?v1 ))(tree_pure$o (fun_app$c ?v0 ?v1 )))):named a59 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun$ )(?v1 B_c_a_fun_fun$ ))(= (tree_ap$b (tree_pure$q ?v0 )(tree_pure$c ?v1 ))(tree_pure$p (fun_app$d ?v0 ?v1 )))):named a60 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ ))(= (tree_ap$aa (tree_pure$r ?v0 )(tree_pure$b ?v1 ))(tree_pure$b (fun_app$e ?v0 ?v1 )))):named a61 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C$ ))(= (tree_ap$w (tree_pure$s ?v0 )(tree_pure$b ?v1 ))(tree_pure$ (fun_app$f ?v0 ?v1 )))):named a62 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B$ ))(= (tree_ap$e (tree_pure$t ?v0 )(tree_pure$ ?v1 ))(tree_pure$b (fun_app$g ?v0 ?v1 )))):named a63 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (tree_ap$f (tree_pure$u ?v0 )(tree_pure$ ?v1 ))(tree_pure$ (fun_app$h ?v0 ?v1 )))):named a64 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A$ ))(= (tree_ap$br (tree_pure$v ?v0 )(tree_pure$a ?v1 ))(tree_pure$b (fun_app$i ?v0 ?v1 )))):named a65 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$ (tree_pure$n ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$ (fun_app$ ?v0 ?v1 )(tree_ap$ (tree_pure$n ?v0 )?v2 )(tree_ap$ (tree_pure$n ?v0 )?v3 )))):named a66 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$c (tree_pure$o ?v0 )(node$d ?v1 ?v2 ?v3 ))(node$ (fun_app$a ?v0 ?v1 )(tree_ap$c (tree_pure$o ?v0 )?v2 )(tree_ap$c (tree_pure$o ?v0 )?v3 )))):named a67 ))
(assert (! (forall ((?v0 C_b_a_fun_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$a (tree_pure$p ?v0 )(node$d ?v1 ?v2 ?v3 ))(node$a (fun_app$b ?v0 ?v1 )(tree_ap$a (tree_pure$p ?v0 )?v2 )(tree_ap$a (tree_pure$p ?v0 )?v3 )))):named a68 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$d (tree_pure$c ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$g (fun_app$c ?v0 ?v1 )(tree_ap$d (tree_pure$c ?v0 )?v2 )(tree_ap$d (tree_pure$c ?v0 )?v3 )))):named a69 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun$ )(?v1 B_c_a_fun_fun$ )(?v2 B_c_a_fun_fun_tree$ )(?v3 B_c_a_fun_fun_tree$ ))(= (tree_ap$b (tree_pure$q ?v0 )(node$f ?v1 ?v2 ?v3 ))(node$c (fun_app$d ?v0 ?v1 )(tree_ap$b (tree_pure$q ?v0 )?v2 )(tree_ap$b (tree_pure$q ?v0 )?v3 )))):named a70 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$aa (tree_pure$r ?v0 )(node$d ?v1 ?v2 ?v3 ))(node$d (fun_app$e ?v0 ?v1 )(tree_ap$aa (tree_pure$r ?v0 )?v2 )(tree_ap$aa (tree_pure$r ?v0 )?v3 )))):named a71 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$w (tree_pure$s ?v0 )(node$d ?v1 ?v2 ?v3 ))(node$b (fun_app$f ?v0 ?v1 )(tree_ap$w (tree_pure$s ?v0 )?v2 )(tree_ap$w (tree_pure$s ?v0 )?v3 )))):named a72 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$e (tree_pure$t ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$d (fun_app$g ?v0 ?v1 )(tree_ap$e (tree_pure$t ?v0 )?v2 )(tree_ap$e (tree_pure$t ?v0 )?v3 )))):named a73 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$f (tree_pure$u ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$b (fun_app$h ?v0 ?v1 )(tree_ap$f (tree_pure$u ?v0 )?v2 )(tree_ap$f (tree_pure$u ?v0 )?v3 )))):named a74 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$br (tree_pure$v ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$d (fun_app$i ?v0 ?v1 )(tree_ap$br (tree_pure$v ?v0 )?v2 )(tree_ap$br (tree_pure$v ?v0 )?v3 )))):named a75 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$ (fun_app$ ?v0 ?v3 )(tree_ap$ ?v1 ?v4 )(tree_ap$ ?v2 ?v5 ))):pattern ((tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a76 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_a_fun_tree$ )(?v2 C_a_fun_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(! (= (tree_ap$c (node$g ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$ (fun_app$a ?v0 ?v3 )(tree_ap$c ?v1 ?v4 )(tree_ap$c ?v2 ?v5 ))):pattern ((tree_ap$c (node$g ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a77 ))
(assert (! (forall ((?v0 C_b_a_fun_fun$ )(?v1 C_b_a_fun_fun_tree$ )(?v2 C_b_a_fun_fun_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(! (= (tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$a (fun_app$b ?v0 ?v3 )(tree_ap$a ?v1 ?v4 )(tree_ap$a ?v2 ?v5 ))):pattern ((tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a78 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_c_a_fun_fun_tree$ )(?v2 B_c_a_fun_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$d (node$f ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$g (fun_app$c ?v0 ?v3 )(tree_ap$d ?v1 ?v4 )(tree_ap$d ?v2 ?v5 ))):pattern ((tree_ap$d (node$f ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a79 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun$ )(?v1 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(?v2 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(?v3 B_c_a_fun_fun$ )(?v4 B_c_a_fun_fun_tree$ )(?v5 B_c_a_fun_fun_tree$ ))(! (= (tree_ap$b (node$e ?v0 ?v1 ?v2 )(node$f ?v3 ?v4 ?v5 ))(node$c (fun_app$d ?v0 ?v3 )(tree_ap$b ?v1 ?v4 )(tree_ap$b ?v2 ?v5 ))):pattern ((tree_ap$b (node$e ?v0 ?v1 ?v2 )(node$f ?v3 ?v4 ?v5 ))))):named a80 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_c_fun_tree$ )(?v2 C_c_fun_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(! (= (tree_ap$aa (node$ab ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$d (fun_app$e ?v0 ?v3 )(tree_ap$aa ?v1 ?v4 )(tree_ap$aa ?v2 ?v5 ))):pattern ((tree_ap$aa (node$ab ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a81 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_b_fun_tree$ )(?v2 C_b_fun_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(! (= (tree_ap$w (node$x ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$b (fun_app$f ?v0 ?v3 )(tree_ap$w ?v1 ?v4 )(tree_ap$w ?v2 ?v5 ))):pattern ((tree_ap$w (node$x ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a82 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_c_fun_tree$ )(?v2 B_c_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$e (node$h ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$d (fun_app$g ?v0 ?v3 )(tree_ap$e ?v1 ?v4 )(tree_ap$e ?v2 ?v5 ))):pattern ((tree_ap$e (node$h ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a83 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun_tree$ )(?v2 B_b_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$f (node$i ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$b (fun_app$h ?v0 ?v3 )(tree_ap$f ?v1 ?v4 )(tree_ap$f ?v2 ?v5 ))):pattern ((tree_ap$f (node$i ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a84 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_c_fun_tree$ )(?v2 A_c_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$br (node$ca ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$d (fun_app$i ?v0 ?v3 )(tree_ap$br ?v1 ?v4 )(tree_ap$br ?v2 ?v5 ))):pattern ((tree_ap$br (node$ca ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a85 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_tree$ ))(= (tree_ap$e (tree_pure$t ?v0 )?v1 )(map_tree$ ?v0 ?v1 ))):named a86 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (tree_ap$f (tree_pure$u ?v0 )?v1 )(map_tree$a ?v0 ?v1 ))):named a87 ))
(assert (! (forall ((?v0 A_c_a_fun_fun$ )(?v1 A_tree$ ))(= (tree_ap$g (tree_pure$w ?v0 )?v1 )(map_tree$b ?v0 ?v1 ))):named a88 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (tree_ap$h (tree_pure$x ?v0 )?v1 )(map_tree$c ?v0 ?v1 ))):named a89 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (tree_ap$i (tree_pure$y ?v0 )?v1 )(map_tree$d ?v0 ?v1 ))):named a90 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_pure$n ?v0 )?v1 )(map_tree$e ?v0 ?v1 ))):named a91 ))
(assert (! (forall ((?v0 C_b_a_fun_fun$ )(?v1 C_tree$ ))(= (tree_ap$a (tree_pure$p ?v0 )?v1 )(map_tree$f ?v0 ?v1 ))):named a92 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun$ )(?v1 B_c_a_fun_fun_tree$ ))(= (tree_ap$b (tree_pure$q ?v0 )?v1 )(map_tree$g ?v0 ?v1 ))):named a93 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_tree$ ))(= (tree_ap$c (tree_pure$o ?v0 )?v1 )(map_tree$h ?v0 ?v1 ))):named a94 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_tree$ ))(= (tree_ap$d (tree_pure$c ?v0 )?v1 )(map_tree$i ?v0 ?v1 ))):named a95 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (root$ (tree_ap$ ?v0 ?v1 ))(fun_app$ (root$c ?v0 )(root$a ?v1 )))):named a96 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_tree$ ))(= (root$ (tree_ap$c ?v0 ?v1 ))(fun_app$a (root$d ?v0 )(root$b ?v1 )))):named a97 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 C_tree$ ))(= (root$c (tree_ap$a ?v0 ?v1 ))(fun_app$b (root$e ?v0 )(root$b ?v1 )))):named a98 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (root$d (tree_ap$d ?v0 ?v1 ))(fun_app$c (root$f ?v0 )(root$a ?v1 )))):named a99 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(= (root$e (tree_ap$b ?v0 ?v1 ))(fun_app$d (root$g ?v0 )(root$f ?v1 )))):named a100 ))
(assert (! (forall ((?v0 C_c_fun_tree$ )(?v1 C_tree$ ))(= (root$b (tree_ap$aa ?v0 ?v1 ))(fun_app$e (root$h ?v0 )(root$b ?v1 )))):named a101 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_tree$ ))(= (root$b (tree_ap$e ?v0 ?v1 ))(fun_app$g (root$i ?v0 )(root$a ?v1 )))):named a102 ))
(assert (! (forall ((?v0 A_c_fun_tree$ )(?v1 A_tree$ ))(= (root$b (tree_ap$br ?v0 ?v1 ))(fun_app$i (root$j ?v0 )(root$ ?v1 )))):named a103 ))
(assert (! (forall ((?v0 C_b_fun_tree$ )(?v1 C_tree$ ))(= (root$a (tree_ap$w ?v0 ?v1 ))(fun_app$f (root$k ?v0 )(root$b ?v1 )))):named a104 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (root$a (tree_ap$f ?v0 ?v1 ))(fun_app$h (root$l ?v0 )(root$a ?v1 )))):named a105 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (left$ (tree_ap$an ?v0 ?v1 ))(tree_ap$an (left$c ?v0 )(left$d ?v1 )))):named a106 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (left$ (tree_ap$i ?v0 ?v1 ))(tree_ap$i (left$e ?v0 )(left$ ?v1 )))):named a107 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (left$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (left$d ?v0 )(left$a ?v1 )))):named a108 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 C_tree$ ))(= (left$d (tree_ap$a ?v0 ?v1 ))(tree_ap$a (left$f ?v0 )(left$b ?v1 )))):named a109 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(= (left$f (tree_ap$b ?v0 ?v1 ))(tree_ap$b (left$g ?v0 )(left$h ?v1 )))):named a110 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_tree$ ))(= (left$ (tree_ap$c ?v0 ?v1 ))(tree_ap$c (left$i ?v0 )(left$b ?v1 )))):named a111 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (left$i (tree_ap$d ?v0 ?v1 ))(tree_ap$d (left$h ?v0 )(left$a ?v1 )))):named a112 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (right$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (right$c ?v0 )(right$a ?v1 )))):named a113 ))
(assert (! (forall ((?v0 C_b_a_fun_fun_tree$ )(?v1 C_tree$ ))(= (right$c (tree_ap$a ?v0 ?v1 ))(tree_ap$a (right$d ?v0 )(right$b ?v1 )))):named a114 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_c_b_a_fun_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(= (right$d (tree_ap$b ?v0 ?v1 ))(tree_ap$b (right$e ?v0 )(right$f ?v1 )))):named a115 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_tree$ ))(= (right$ (tree_ap$c ?v0 ?v1 ))(tree_ap$c (right$g ?v0 )(right$b ?v1 )))):named a116 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (right$g (tree_ap$d ?v0 ?v1 ))(tree_ap$d (right$f ?v0 )(right$a ?v1 )))):named a117 ))
(check-sat )
;(get-unsat-core )
