;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_tree$ 0)
(declare-sort Nat_tree_tree$ 0)
(declare-fun root$ (Nat_tree$)Nat$)
(declare-fun left$ (Nat_tree$)Nat_tree$)
(declare-fun right$ (Nat_tree$)Nat_tree$)
(declare-fun node$ (Nat$ Nat_tree$ Nat_tree$ )Nat_tree$)
(declare-fun root$a (Nat_tree_tree$)Nat_tree$)
(declare-fun left$a (Nat_tree_tree$)Nat_tree_tree$)
(declare-fun right$a (Nat_tree_tree$)Nat_tree_tree$)
(declare-fun node$a (Nat_tree$ Nat_tree_tree$ Nat_tree_tree$ )Nat_tree_tree$)
(declare-fun num$ ()Nat_tree$ )
(declare-fun one$ ()Nat$ )
(declare-fun one$a ()Nat_tree$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun of_nat$ (Nat$ )Nat_tree$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun of_nat$a (Nat$ )Nat$ )
(declare-fun of_nat$b (Nat$ )Nat_tree_tree$ )
(declare-fun map_tree$ (Nat_nat_fun$ Nat_tree$ )Nat_tree$ )
(declare-fun set_tree$ (Nat_tree$ )Nat_set$ )
(declare-fun tree_pure$ (Nat$ )Nat_tree$ )
(declare-fun tree_pure$a (Nat_tree$ )Nat_tree_tree$ )
(declare-fun tree_iterate$ (Nat_nat_fun$ Nat_nat_fun$ Nat$ )Nat_tree$ )
(assert (! (not (= (root$ num$ )one$ )):named a0 ))
(assert (! (= one$ one$ ):named a1 ))
(assert (! (forall ((?v0 Nat$ ))(= (= one$ ?v0 )(= ?v0 one$ ))):named a2 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ ))(= (root$ (tree_iterate$ ?v0 ?v1 ?v2 ))?v2 )):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(= (root$ (tree_pure$ ?v0 ))?v0 )):named a4 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$ ?v1 )))):named a5 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$ ?v1 )))):named a6 ))
(assert (! (= (of_nat$ one$ )one$a ):named a7 ))
(assert (! (= (of_nat$a one$ )one$ ):named a8 ))
(assert (! (forall ((?v0 Nat_tree$ ))(member$ (root$ ?v0 )(set_tree$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 Nat_tree$ ))(member$ (root$ ?v0 )(set_tree$ ?v0 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$ ?v0 )(of_nat$ ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$a ?v0 )(of_nat$a ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (map_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (tree_pure$ ?v0 )(tree_pure$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (of_nat$b ?v0 )(tree_pure$a (of_nat$ ?v0 ))):pattern ((of_nat$b ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (of_nat$ ?v0 )(tree_pure$ (of_nat$a ?v0 ))):pattern ((of_nat$ ?v0 )))):named a16 ))
(check-sat )
;(get-unsat-core )
