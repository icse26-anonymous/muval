;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_tree_bool_fun$ 0 )
(declare-sort A_a_tree_bool_fun_fun$ 0 )
(declare-sort A_tree_a_tree_bool_fun_fun$ 0 )
(declare-sort Dir$ 0)
(declare-sort Dir_list$ 0)
(declare-fun l$ ()Dir$)
(declare-fun r$ ()Dir$)
(declare-fun nil$ ()Dir_list$)
(declare-fun hd$ (Dir_list$)Dir$)
(declare-fun tl$ (Dir_list$)Dir_list$)
(declare-fun cons$ (Dir$ Dir_list$ )Dir_list$)
(declare-sort A_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun p$ ()Dir_list$ )
(declare-fun ta$ ()A_tree$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_tree_bool_fun$ A_tree$ )Bool )
(declare-fun fun_app$a (A_a_tree_bool_fun_fun$ A$ )A_tree_bool_fun$ )
(declare-fun fun_app$b (A_tree_a_tree_bool_fun_fun$ A_tree$ )A_tree_bool_fun$ )
(declare-fun fun_app$c (A_a_fun$ A$ )A$ )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(declare-fun tree_chop$ (A_tree$ )A_tree$ )
(declare-fun tree_pure$ (A$ )A_tree$ )
(declare-fun tree_iterate$ (A_a_fun$ A_a_fun$ A$ )A_tree$ )
(declare-fun traverse_tree$ (Dir_list$ A_tree$ )A_tree$ )
(assert (! (not (exists ((?v0 Dir_list$ ))(= (root$ (traverse_tree$ p$ (left$ ta$ )))(root$ (traverse_tree$ ?v0 ta$ ))))):named a0 ))
(assert (! (member$ (root$ (traverse_tree$ p$ (left$ ta$ )))(set_tree$ (left$ ta$ ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (member$ ?v0 (set_tree$ (left$ ?v1 )))(member$ ?v0 (set_tree$ ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (member$ ?v0 (set_tree$ (left$ ?v1 )))(member$ ?v0 (set_tree$ ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_tree$ ))(member$ (root$ ?v0 )(set_tree$ ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_tree$ ))(member$ (root$ ?v0 )(set_tree$ ?v0 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_a_tree_bool_fun_fun$ ))(=> (and (member$ ?v0 (set_tree$ ?v1 ))(and (forall ((?v3 A_tree$ ))(fun_app$ (fun_app$a ?v2 (root$ ?v3 ))?v3 ))(and (forall ((?v3 A$ )(?v4 A_tree$ ))(=> (and (member$ ?v3 (set_tree$ (left$ ?v4 )))(fun_app$ (fun_app$a ?v2 ?v3 )(left$ ?v4 )))(fun_app$ (fun_app$a ?v2 ?v3 )?v4 )))(forall ((?v3 A$ )(?v4 A_tree$ ))(=> (and (member$ ?v3 (set_tree$ (right$ ?v4 )))(fun_app$ (fun_app$a ?v2 ?v3 )(right$ ?v4 )))(fun_app$ (fun_app$a ?v2 ?v3 )?v4 ))))))(fun_app$ (fun_app$a ?v2 ?v0 )?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_tree$ ))(= (root$ (tree_chop$ ?v0 ))(root$ (left$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(and (= (left$ ?v0 )(left$ ?v1 ))(= (right$ ?v0 )(right$ ?v1 ))))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_tree_a_tree_bool_fun_fun$ )(?v1 A_tree$ )(?v2 A_tree$ ))(=> (and (fun_app$ (fun_app$b ?v0 ?v1 )?v2 )(forall ((?v3 A_tree$ )(?v4 A_tree$ ))(=> (fun_app$ (fun_app$b ?v0 ?v3 )?v4 )(and (= (root$ ?v3 )(root$ ?v4 ))(and (or (fun_app$ (fun_app$b ?v0 (left$ ?v3 ))(left$ ?v4 ))(= (left$ ?v3 )(left$ ?v4 )))(or (fun_app$ (fun_app$b ?v0 (right$ ?v3 ))(right$ ?v4 ))(= (right$ ?v3 )(right$ ?v4 ))))))))(= ?v1 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_tree_a_tree_bool_fun_fun$ )(?v1 A_tree$ )(?v2 A_tree$ ))(=> (and (fun_app$ (fun_app$b ?v0 ?v1 )?v2 )(forall ((?v3 A_tree$ )(?v4 A_tree$ ))(=> (fun_app$ (fun_app$b ?v0 ?v3 )?v4 )(and (= (root$ ?v3 )(root$ ?v4 ))(and (fun_app$ (fun_app$b ?v0 (left$ ?v3 ))(left$ ?v4 ))(fun_app$ (fun_app$b ?v0 (right$ ?v3 ))(right$ ?v4 )))))))(= ?v1 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A$ ))(= (traverse_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$ ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (left$ (tree_iterate$ ?v0 ?v1 ?v2 ))(tree_iterate$ ?v0 ?v1 (fun_app$c ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (root$ (tree_iterate$ ?v0 ?v1 ?v2 ))?v2 )):named a13 ))
(assert (! (forall ((?v0 A$ ))(= (tree_chop$ (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a14 ))
(check-sat )
;(get-unsat-core )
