;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Nat_nat_nat_prod_fun$ 0 )
(declare-sort Nat_nat_prod_nat_fun$ 0 )
(declare-sort Nat_nat_prod_bool_fun$ 0 )
(declare-sort Nat_nat_prod_nat_nat_prod_fun$ 0 )
(declare-sort Nat_stream$ 0)
(declare-fun shd$ (Nat_stream$)Nat$)
(declare-fun stl$ (Nat_stream$)Nat_stream$)
(declare-fun sCons$ (Nat$ Nat_stream$ )Nat_stream$)
(declare-sort Nat_nat_prod$ 0)
(declare-fun fst$ (Nat_nat_prod$)Nat$)
(declare-fun snd$ (Nat_nat_prod$)Nat$)
(declare-fun pair$ (Nat$ Nat$ )Nat_nat_prod$)
(declare-sort Nat_nat_prod_stream$ 0)
(declare-fun shd$a (Nat_nat_prod_stream$)Nat_nat_prod$)
(declare-fun stl$a (Nat_nat_prod_stream$)Nat_nat_prod_stream$)
(declare-fun sCons$a (Nat_nat_prod$ Nat_nat_prod_stream$ )Nat_nat_prod_stream$)
(declare-fun uu$ ()Nat_nat_prod_nat_fun$ )
(declare-fun one$ ()Nat$ )
(declare-fun uua$ ()Nat_nat_prod_nat_fun$ )
(declare-fun fusc$ ()Nat_stream$ )
(declare-fun smap$ (Nat_nat_prod_nat_fun$ Nat_nat_prod_stream$ )Nat_stream$ )
(declare-fun fusc$a ()Nat_stream$ )
(declare-fun smap$a (Nat_nat_nat_prod_fun$ Nat_stream$ )Nat_nat_prod_stream$ )
(declare-fun smap$b (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod_stream$ )Nat_nat_prod_stream$ )
(declare-fun smap$c (Nat_nat_fun$ Nat_stream$ )Nat_stream$ )
(declare-fun fun_app$ (Nat_nat_prod_nat_fun$ Nat_nat_prod$ )Nat$ )
(declare-fun smember$ (Nat_nat_prod$ Nat_nat_prod_stream$ )Bool )
(declare-fun fun_app$a (Nat_nat_nat_prod_fun$ Nat$ )Nat_nat_prod$ )
(declare-fun fun_app$b (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod$ )Nat_nat_prod$ )
(declare-fun fun_app$c (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$d (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$e (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun fun_app$f (Nat_nat_prod_bool_fun$ Nat_nat_prod$ )Bool )
(declare-fun siterate$ (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod$ )Nat_nat_prod_stream$ )
(declare-fun smember$a (Nat$ Nat_stream$ )Bool )
(declare-fun siterate$a (Nat_nat_fun$ Nat$ )Nat_stream$ )
(declare-fun stream_all$ (Nat_nat_prod_bool_fun$ Nat_nat_prod_stream$ )Bool )
(declare-fun pred_stream$ (Nat_nat_prod_bool_fun$ Nat_nat_prod_stream$ )Bool )
(declare-fun stream_all$a (Nat_bool_fun$ Nat_stream$ )Bool )
(declare-fun pred_stream$a (Nat_bool_fun$ Nat_stream$ )Bool )
(declare-fun stern_brocot_loopless$ ()Nat_nat_prod_stream$ )
(assert (! (forall ((?v0 Nat_nat_prod$ ))(! (= (fun_app$ uua$ ?v0 )(snd$ ?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat_nat_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (not (= (smap$ uu$ stern_brocot_loopless$ )(sCons$ one$ (smap$ uua$ stern_brocot_loopless$ )))):named a2 ))
(assert (! (= fusc$ (smap$ uu$ stern_brocot_loopless$ )):named a3 ))
(assert (! (= fusc$a (smap$ uua$ stern_brocot_loopless$ )):named a4 ))
(assert (! (forall ((?v0 Nat_nat_prod$ )(?v1 Nat_nat_prod_stream$ )(?v2 Nat_nat_prod$ )(?v3 Nat_nat_prod_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_stream$ )(?v2 Nat$ )(?v3 Nat_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 Nat_nat_nat_prod_fun$ )(?v1 Nat$ )(?v2 Nat_stream$ ))(! (= (smap$a ?v0 (sCons$ ?v1 ?v2 ))(sCons$a (fun_app$a ?v0 ?v1 )(smap$a ?v0 ?v2 ))):pattern ((smap$a ?v0 (sCons$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$ )(?v1 Nat_nat_prod$ )(?v2 Nat_nat_prod_stream$ ))(! (= (smap$b ?v0 (sCons$a ?v1 ?v2 ))(sCons$a (fun_app$b ?v0 ?v1 )(smap$b ?v0 ?v2 ))):pattern ((smap$b ?v0 (sCons$a ?v1 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_fun$ )(?v1 Nat_nat_prod$ )(?v2 Nat_nat_prod_stream$ ))(! (= (smap$ ?v0 (sCons$a ?v1 ?v2 ))(sCons$ (fun_app$ ?v0 ?v1 )(smap$ ?v0 ?v2 ))):pattern ((smap$ ?v0 (sCons$a ?v1 ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat_stream$ ))(! (= (smap$c ?v0 (sCons$ ?v1 ?v2 ))(sCons$ (fun_app$c ?v0 ?v1 )(smap$c ?v0 ?v2 ))):pattern ((smap$c ?v0 (sCons$ ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 Nat_nat_prod$ )(?v1 Nat_nat_prod$ ))(= (= ?v0 ?v1 )(and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 Nat_nat_prod$ )(?v1 Nat_nat_prod$ ))(=> (and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 )))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat_nat_prod$ )(?v1 Nat_nat_prod$ ))(=> (and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 )))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat_nat_prod$ ))(=> (and (fun_app$d (fun_app$e ?v0 (snd$ ?v1 ))(fst$ ?v1 ))(forall ((?v2 Nat$ )(?v3 Nat$ ))(=> (fun_app$d (fun_app$e ?v0 ?v3 )?v2 )false )))false )):named a14 ))
(assert (! (forall ((?v0 Nat_nat_prod_stream$ ))(=> (forall ((?v1 Nat_nat_prod$ )(?v2 Nat_nat_prod_stream$ ))(=> (= ?v0 (sCons$a ?v1 ?v2 ))false ))false )):named a15 ))
(assert (! (forall ((?v0 Nat_stream$ ))(=> (forall ((?v1 Nat$ )(?v2 Nat_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a16 ))
(assert (! (= one$ one$ ):named a17 ))
(assert (! (forall ((?v0 Nat$ ))(= (= one$ ?v0 )(= ?v0 one$ ))):named a18 ))
(assert (! (forall ((?v0 Nat_nat_prod$ )(?v1 Nat_nat_prod$ )(?v2 Nat_nat_prod_stream$ ))(! (= (smember$ ?v0 (sCons$a ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (smember$ ?v0 ?v2 ))):pattern ((smember$ ?v0 (sCons$a ?v1 ?v2 ))))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_stream$ ))(! (= (smember$a ?v0 (sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (smember$a ?v0 ?v2 ))):pattern ((smember$a ?v0 (sCons$ ?v1 ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 Nat_nat_prod_bool_fun$ )(?v1 Nat_nat_prod$ )(?v2 Nat_nat_prod_stream$ ))(! (= (pred_stream$ ?v0 (sCons$a ?v1 ?v2 ))(and (fun_app$f ?v0 ?v1 )(pred_stream$ ?v0 ?v2 ))):pattern ((pred_stream$ ?v0 (sCons$a ?v1 ?v2 ))))):named a21 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat_stream$ ))(! (= (pred_stream$a ?v0 (sCons$ ?v1 ?v2 ))(and (fun_app$d ?v0 ?v1 )(pred_stream$a ?v0 ?v2 ))):pattern ((pred_stream$a ?v0 (sCons$ ?v1 ?v2 ))))):named a22 ))
(assert (! (forall ((?v0 Nat_nat_prod_bool_fun$ )(?v1 Nat_nat_prod$ )(?v2 Nat_nat_prod_stream$ ))(! (= (stream_all$ ?v0 (sCons$a ?v1 ?v2 ))(and (fun_app$f ?v0 ?v1 )(stream_all$ ?v0 ?v2 ))):pattern ((stream_all$ ?v0 (sCons$a ?v1 ?v2 ))))):named a23 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat_stream$ ))(! (= (stream_all$a ?v0 (sCons$ ?v1 ?v2 ))(and (fun_app$d ?v0 ?v1 )(stream_all$a ?v0 ?v2 ))):pattern ((stream_all$a ?v0 (sCons$ ?v1 ?v2 ))))):named a24 ))
(assert (! (forall ((?v0 Nat_nat_prod_stream$ )(?v1 Nat_nat_prod$ )(?v2 Nat_nat_prod_nat_nat_prod_fun$ ))(=> (= ?v0 (sCons$a ?v1 (smap$b ?v2 ?v0 )))(= ?v0 (siterate$ ?v2 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat$ )(?v2 Nat_nat_fun$ ))(=> (= ?v0 (sCons$ ?v1 (smap$c ?v2 ?v0 )))(= ?v0 (siterate$a ?v2 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 Nat_nat_prod$ ))(= (pair$ (fst$ ?v0 )(snd$ ?v0 ))?v0 )):named a27 ))
(check-sat )
;(get-unsat-core )
