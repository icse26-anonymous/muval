;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Int_int_fun$ 0 )
(declare-sort Int_nat_fun$ 0 )
(declare-sort Nat_int_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Int_int_tree_fun$ 0 )
(declare-sort Int_nat_tree_fun$ 0 )
(declare-sort Int_tree_int_fun$ 0 )
(declare-sort Int_tree_nat_fun$ 0 )
(declare-sort Nat_int_tree_fun$ 0 )
(declare-sort Nat_tree_int_fun$ 0 )
(declare-sort Nat_tree_nat_fun$ 0 )
(declare-sort Int_tree$ 0)
(declare-sort Nat_tree$ 0)
(declare-fun root$ (Int_tree$)Int)
(declare-fun left$ (Int_tree$)Int_tree$)
(declare-fun right$ (Int_tree$)Int_tree$)
(declare-fun node$ (Int Int_tree$ Int_tree$ )Int_tree$)
(declare-fun root$a (Nat_tree$)Nat$)
(declare-fun left$a (Nat_tree$)Nat_tree$)
(declare-fun right$a (Nat_tree$)Nat_tree$)
(declare-fun node$a (Nat$ Nat_tree$ Nat_tree$ )Nat_tree$)
(declare-sort Num$ 0)
(declare-fun one$ ()Num$)
(declare-fun select$ (Num$)Num$)
(declare-fun bit0$ (Num$ )Num$)
(declare-fun selecta$ (Num$)Num$)
(declare-fun bit1$ (Num$ )Num$)
(declare-sort Nat_tree_tree$ 0)
(declare-sort Nat_tree_tree_tree$ 0)
(declare-sort Int_tree_tree$ 0)
(declare-sort Int_tree_tree_tree$ 0)
(declare-sort Nat_tree_tree_tree_tree$ 0)
(declare-sort Int_tree_tree_tree_tree$ 0)
(declare-fun root$b (Nat_tree_tree$)Nat_tree$)
(declare-fun left$b (Nat_tree_tree$)Nat_tree_tree$)
(declare-fun right$b (Nat_tree_tree$)Nat_tree_tree$)
(declare-fun node$b (Nat_tree$ Nat_tree_tree$ Nat_tree_tree$ )Nat_tree_tree$)
(declare-fun root$c (Nat_tree_tree_tree$)Nat_tree_tree$)
(declare-fun left$c (Nat_tree_tree_tree$)Nat_tree_tree_tree$)
(declare-fun right$c (Nat_tree_tree_tree$)Nat_tree_tree_tree$)
(declare-fun node$c (Nat_tree_tree$ Nat_tree_tree_tree$ Nat_tree_tree_tree$ )Nat_tree_tree_tree$)
(declare-fun root$d (Int_tree_tree$)Int_tree$)
(declare-fun left$d (Int_tree_tree$)Int_tree_tree$)
(declare-fun right$d (Int_tree_tree$)Int_tree_tree$)
(declare-fun node$d (Int_tree$ Int_tree_tree$ Int_tree_tree$ )Int_tree_tree$)
(declare-fun root$e (Int_tree_tree_tree$)Int_tree_tree$)
(declare-fun left$e (Int_tree_tree_tree$)Int_tree_tree_tree$)
(declare-fun right$e (Int_tree_tree_tree$)Int_tree_tree_tree$)
(declare-fun node$e (Int_tree_tree$ Int_tree_tree_tree$ Int_tree_tree_tree$ )Int_tree_tree_tree$)
(declare-fun root$f (Nat_tree_tree_tree_tree$)Nat_tree_tree_tree$)
(declare-fun left$f (Nat_tree_tree_tree_tree$)Nat_tree_tree_tree_tree$)
(declare-fun right$f (Nat_tree_tree_tree_tree$)Nat_tree_tree_tree_tree$)
(declare-fun node$f (Nat_tree_tree_tree$ Nat_tree_tree_tree_tree$ Nat_tree_tree_tree_tree$ )Nat_tree_tree_tree_tree$)
(declare-fun root$g (Int_tree_tree_tree_tree$)Int_tree_tree_tree$)
(declare-fun left$g (Int_tree_tree_tree_tree$)Int_tree_tree_tree_tree$)
(declare-fun right$g (Int_tree_tree_tree_tree$)Int_tree_tree_tree_tree$)
(declare-fun node$g (Int_tree_tree_tree$ Int_tree_tree_tree_tree$ Int_tree_tree_tree_tree$ )Int_tree_tree_tree_tree$)
(declare-sort Dir$ 0)
(declare-sort Dir_list$ 0)
(declare-fun l$ ()Dir$)
(declare-fun r$ ()Dir$)
(declare-fun nil$ ()Dir_list$)
(declare-fun hd$ (Dir_list$)Dir$)
(declare-fun tl$ (Dir_list$)Dir_list$)
(declare-fun cons$ (Dir$ Dir_list$ )Dir_list$)
(declare-fun n$ ()Num$ )
(declare-fun den$ ()Int_tree$ )
(declare-fun num$ ()Int_tree$ )
(declare-fun den$a ()Nat_tree$ )
(declare-fun num$a ()Nat_tree$ )
(declare-fun of_nat$ ()Nat_int_fun$ )
(declare-fun fIXME_x$ ()Int_tree$ )
(declare-fun fun_app$ (Nat_int_fun$ Nat$ )Int )
(declare-fun numeral$ (Num$ )Nat_tree$ )
(declare-fun of_nat$a (Nat$ )Nat_tree_tree_tree$ )
(declare-fun of_nat$b (Nat$ )Int_tree_tree_tree$ )
(declare-fun of_nat$c (Nat$ )Int_tree_tree$ )
(declare-fun of_nat$d (Nat$ )Nat_tree_tree$ )
(declare-fun of_nat$e (Nat$ )Nat_tree$ )
(declare-fun of_nat$f (Nat$ )Int_tree$ )
(declare-fun of_nat$g (Nat$ )Nat$ )
(declare-fun fIXME_x$a ()Nat_tree$ )
(declare-fun fun_app$a (Int_int_fun$ Int )Int )
(declare-fun fun_app$b (Int_nat_fun$ Int )Nat$ )
(declare-fun fun_app$c (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$d (Int_tree_int_fun$ Int_tree$ )Int )
(declare-fun fun_app$e (Nat_tree_int_fun$ Nat_tree$ )Int )
(declare-fun fun_app$f (Int_tree_nat_fun$ Int_tree$ )Nat$ )
(declare-fun fun_app$g (Nat_tree_nat_fun$ Nat_tree$ )Nat$ )
(declare-fun fun_app$h (Int_int_tree_fun$ Int )Int_tree$ )
(declare-fun fun_app$i (Nat_int_tree_fun$ Nat$ )Int_tree$ )
(declare-fun map_tree$ (Nat_int_fun$ Nat_tree$ )Int_tree$ )
(declare-fun numeral$a (Num$ )Int_tree$ )
(declare-fun numeral$b (Num$ )Nat$ )
(declare-fun numeral$c (Num$ )Nat_tree_tree_tree$ )
(declare-fun numeral$d (Num$ )Int_tree_tree_tree$ )
(declare-fun numeral$e (Num$ )Int_tree_tree$ )
(declare-fun numeral$f (Num$ )Nat_tree_tree$ )
(declare-fun numeral$g (Num$ )Int )
(declare-fun numeral$h (Num$ )Nat_tree_tree_tree_tree$ )
(declare-fun numeral$i (Num$ )Int_tree_tree_tree_tree$ )
(declare-fun map_tree$a (Int_nat_tree_fun$ Int_tree$ )Nat_tree_tree$ )
(declare-fun map_tree$b (Int_int_tree_fun$ Int_tree$ )Int_tree_tree$ )
(declare-fun map_tree$c (Int_int_fun$ Int_tree$ )Int_tree$ )
(declare-fun map_tree$d (Int_nat_fun$ Int_tree$ )Nat_tree$ )
(declare-fun map_tree$e (Nat_nat_fun$ Nat_tree$ )Nat_tree$ )
(declare-fun map_tree$f (Int_tree_int_fun$ Int_tree_tree$ )Int_tree$ )
(declare-fun map_tree$g (Nat_tree_int_fun$ Nat_tree_tree$ )Int_tree$ )
(declare-fun map_tree$h (Int_tree_nat_fun$ Int_tree_tree$ )Nat_tree$ )
(declare-fun map_tree$i (Nat_tree_nat_fun$ Nat_tree_tree$ )Nat_tree$ )
(declare-fun map_tree$j (Nat_int_tree_fun$ Nat_tree$ )Int_tree_tree$ )
(declare-fun tree_chop$ (Int_tree$ )Int_tree$ )
(declare-fun tree_chop$a (Nat_tree$ )Nat_tree$ )
(declare-fun traverse_tree$ (Dir_list$ Nat_tree_tree$ )Nat_tree_tree$ )
(declare-fun traverse_tree$a (Dir_list$ Int_tree$ )Int_tree$ )
(declare-fun traverse_tree$b (Dir_list$ Int_tree_tree$ )Int_tree_tree$ )
(declare-fun traverse_tree$c (Dir_list$ Nat_tree$ )Nat_tree$ )
(assert (! (not (= (map_tree$ of_nat$ (numeral$ n$ ))(numeral$a n$ ))):named a0 ))
(assert (! (forall ((?v0 Num$ ))(= (of_nat$a (numeral$b ?v0 ))(numeral$c ?v0 ))):named a1 ))
(assert (! (forall ((?v0 Num$ ))(= (of_nat$b (numeral$b ?v0 ))(numeral$d ?v0 ))):named a2 ))
(assert (! (forall ((?v0 Num$ ))(= (of_nat$c (numeral$b ?v0 ))(numeral$e ?v0 ))):named a3 ))
(assert (! (forall ((?v0 Num$ ))(= (of_nat$d (numeral$b ?v0 ))(numeral$f ?v0 ))):named a4 ))
(assert (! (forall ((?v0 Num$ ))(= (of_nat$e (numeral$b ?v0 ))(numeral$ ?v0 ))):named a5 ))
(assert (! (forall ((?v0 Num$ ))(= (of_nat$f (numeral$b ?v0 ))(numeral$a ?v0 ))):named a6 ))
(assert (! (forall ((?v0 Num$ ))(= (of_nat$g (numeral$b ?v0 ))(numeral$b ?v0 ))):named a7 ))
(assert (! (forall ((?v0 Num$ ))(= (fun_app$ of_nat$ (numeral$b ?v0 ))(numeral$g ?v0 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$d ?v0 )(of_nat$d ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$c ?v0 )(of_nat$c ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$g ?v0 )(of_nat$g ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$f ?v0 )(of_nat$f ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$e ?v0 )(of_nat$e ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ of_nat$ ?v0 )(fun_app$ of_nat$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$c ?v0 )(numeral$c ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$d ?v0 )(numeral$d ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$e ?v0 )(numeral$e ?v1 ))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$f ?v0 )(numeral$f ?v1 ))(= ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$a ?v0 )(numeral$a ?v1 ))(= ?v0 ?v1 ))):named a20 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$b ?v0 )(numeral$b ?v1 ))(= ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$g ?v0 )(numeral$g ?v1 ))(= ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ of_nat$ ?v0 )(fun_app$ of_nat$ ?v1 ))(= ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ of_nat$ ?v0 )(fun_app$ of_nat$ ?v1 ))(= ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 Bool )(?v1 Nat$ )(?v2 Nat$ ))(= (ite ?v0 (fun_app$ of_nat$ ?v1 )(fun_app$ of_nat$ ?v2 ))(fun_app$ of_nat$ (ite ?v0 ?v1 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 Num$ ))(= (root$f (numeral$h ?v0 ))(numeral$c ?v0 ))):named a26 ))
(assert (! (forall ((?v0 Num$ ))(= (root$g (numeral$i ?v0 ))(numeral$d ?v0 ))):named a27 ))
(assert (! (forall ((?v0 Num$ ))(= (root$e (numeral$d ?v0 ))(numeral$e ?v0 ))):named a28 ))
(assert (! (forall ((?v0 Num$ ))(= (root$c (numeral$c ?v0 ))(numeral$f ?v0 ))):named a29 ))
(assert (! (forall ((?v0 Num$ ))(= (root$b (numeral$f ?v0 ))(numeral$ ?v0 ))):named a30 ))
(assert (! (forall ((?v0 Num$ ))(= (root$d (numeral$e ?v0 ))(numeral$a ?v0 ))):named a31 ))
(assert (! (forall ((?v0 Num$ ))(= (root$a (numeral$ ?v0 ))(numeral$b ?v0 ))):named a32 ))
(assert (! (forall ((?v0 Num$ ))(= (root$ (numeral$a ?v0 ))(numeral$g ?v0 ))):named a33 ))
(assert (! (= fIXME_x$ (map_tree$ of_nat$ fIXME_x$a )):named a34 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_nat_tree_fun$ )(?v2 Int_tree$ ))(= (traverse_tree$ ?v0 (map_tree$a ?v1 ?v2 ))(map_tree$a ?v1 (traverse_tree$a ?v0 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_int_tree_fun$ )(?v2 Int_tree$ ))(= (traverse_tree$b ?v0 (map_tree$b ?v1 ?v2 ))(map_tree$b ?v1 (traverse_tree$a ?v0 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_int_fun$ )(?v2 Int_tree$ ))(= (traverse_tree$a ?v0 (map_tree$c ?v1 ?v2 ))(map_tree$c ?v1 (traverse_tree$a ?v0 ?v2 )))):named a37 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_nat_fun$ )(?v2 Int_tree$ ))(= (traverse_tree$c ?v0 (map_tree$d ?v1 ?v2 ))(map_tree$d ?v1 (traverse_tree$a ?v0 ?v2 )))):named a38 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_nat_fun$ )(?v2 Nat_tree$ ))(= (traverse_tree$c ?v0 (map_tree$e ?v1 ?v2 ))(map_tree$e ?v1 (traverse_tree$c ?v0 ?v2 )))):named a39 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_int_fun$ )(?v2 Nat_tree$ ))(= (traverse_tree$a ?v0 (map_tree$ ?v1 ?v2 ))(map_tree$ ?v1 (traverse_tree$c ?v0 ?v2 )))):named a40 ))
(assert (! (= den$ (map_tree$ of_nat$ den$a )):named a41 ))
(assert (! (= num$ (map_tree$ of_nat$ num$a )):named a42 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$a ?v1 )))):named a43 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (root$ (map_tree$c ?v0 ?v1 ))(fun_app$a ?v0 (root$ ?v1 )))):named a44 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (root$a (map_tree$d ?v0 ?v1 ))(fun_app$b ?v0 (root$ ?v1 )))):named a45 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (root$a (map_tree$e ?v0 ?v1 ))(fun_app$c ?v0 (root$a ?v1 )))):named a46 ))
(assert (! (forall ((?v0 Int_tree_int_fun$ )(?v1 Int_tree_tree$ ))(= (root$ (map_tree$f ?v0 ?v1 ))(fun_app$d ?v0 (root$d ?v1 )))):named a47 ))
(assert (! (forall ((?v0 Nat_tree_int_fun$ )(?v1 Nat_tree_tree$ ))(= (root$ (map_tree$g ?v0 ?v1 ))(fun_app$e ?v0 (root$b ?v1 )))):named a48 ))
(assert (! (forall ((?v0 Int_tree_nat_fun$ )(?v1 Int_tree_tree$ ))(= (root$a (map_tree$h ?v0 ?v1 ))(fun_app$f ?v0 (root$d ?v1 )))):named a49 ))
(assert (! (forall ((?v0 Nat_tree_nat_fun$ )(?v1 Nat_tree_tree$ ))(= (root$a (map_tree$i ?v0 ?v1 ))(fun_app$g ?v0 (root$b ?v1 )))):named a50 ))
(assert (! (forall ((?v0 Int_int_tree_fun$ )(?v1 Int_tree$ ))(= (root$d (map_tree$b ?v0 ?v1 ))(fun_app$h ?v0 (root$ ?v1 )))):named a51 ))
(assert (! (forall ((?v0 Nat_int_tree_fun$ )(?v1 Nat_tree$ ))(= (root$d (map_tree$j ?v0 ?v1 ))(fun_app$i ?v0 (root$a ?v1 )))):named a52 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$a ?v1 )))):named a53 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (root$ (map_tree$c ?v0 ?v1 ))(fun_app$a ?v0 (root$ ?v1 )))):named a54 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (root$a (map_tree$d ?v0 ?v1 ))(fun_app$b ?v0 (root$ ?v1 )))):named a55 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (root$a (map_tree$e ?v0 ?v1 ))(fun_app$c ?v0 (root$a ?v1 )))):named a56 ))
(assert (! (forall ((?v0 Int_tree_int_fun$ )(?v1 Int_tree_tree$ ))(= (root$ (map_tree$f ?v0 ?v1 ))(fun_app$d ?v0 (root$d ?v1 )))):named a57 ))
(assert (! (forall ((?v0 Nat_tree_int_fun$ )(?v1 Nat_tree_tree$ ))(= (root$ (map_tree$g ?v0 ?v1 ))(fun_app$e ?v0 (root$b ?v1 )))):named a58 ))
(assert (! (forall ((?v0 Int_tree_nat_fun$ )(?v1 Int_tree_tree$ ))(= (root$a (map_tree$h ?v0 ?v1 ))(fun_app$f ?v0 (root$d ?v1 )))):named a59 ))
(assert (! (forall ((?v0 Nat_tree_nat_fun$ )(?v1 Nat_tree_tree$ ))(= (root$a (map_tree$i ?v0 ?v1 ))(fun_app$g ?v0 (root$b ?v1 )))):named a60 ))
(assert (! (forall ((?v0 Int_int_tree_fun$ )(?v1 Int_tree$ ))(= (root$d (map_tree$b ?v0 ?v1 ))(fun_app$h ?v0 (root$ ?v1 )))):named a61 ))
(assert (! (forall ((?v0 Nat_int_tree_fun$ )(?v1 Nat_tree$ ))(= (root$d (map_tree$j ?v0 ?v1 ))(fun_app$i ?v0 (root$a ?v1 )))):named a62 ))
(assert (! (forall ((?v0 Num$ ))(= (fun_app$ of_nat$ (numeral$b ?v0 ))(numeral$g ?v0 ))):named a63 ))
(assert (! (= den$ (tree_chop$ num$ )):named a64 ))
(assert (! (= den$a (tree_chop$a num$a )):named a65 ))
(check-sat )
;(get-unsat-core )
