;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_tree_fun$ 0 )
(declare-sort A_b_tree_fun$ 0 )
(declare-sort B_a_tree_fun$ 0 )
(declare-sort B_b_tree_fun$ 0 )
(declare-sort A_a_tree_tree_fun$ 0 )
(declare-sort A_b_tree_tree_fun$ 0 )
(declare-sort A_tree_a_tree_fun$ 0 )
(declare-sort A_tree_b_tree_fun$ 0 )
(declare-sort B_tree_a_tree_fun$ 0 )
(declare-sort B_tree_b_tree_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort A_tree_a_tree_tree_fun$ 0 )
(declare-sort A_a_fun_a_a_tree_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_tree_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_tree_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_tree_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_tree_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_tree_fun_fun$ 0 )
(declare-sort A_tree_tree_b_tree_tree_fun$ 0 )
(declare-sort A_a_fun_a_a_tree_tree_fun_fun$ 0 )
(declare-sort A_a_tree_fun_a_a_tree_fun_fun$ 0 )
(declare-sort A_a_tree_fun_a_b_tree_fun_fun$ 0 )
(declare-sort A_b_tree_fun_a_a_tree_fun_fun$ 0 )
(declare-sort A_b_tree_fun_a_b_tree_fun_fun$ 0 )
(declare-sort B_a_tree_fun_b_a_tree_fun_fun$ 0 )
(declare-sort B_a_tree_fun_b_b_tree_fun_fun$ 0 )
(declare-sort B_b_tree_fun_b_a_tree_fun_fun$ 0 )
(declare-sort B_b_tree_fun_b_b_tree_fun_fun$ 0 )
(declare-sort A_a_tree_fun_a_a_tree_tree_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_a_a_tree_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_a_b_tree_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_b_a_tree_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_b_b_tree_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_a_a_tree_tree_fun_fun_fun$ 0 )
(declare-sort A_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun$ 0 )
(declare-sort A_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun$ 0 )
(declare-sort B_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun$ 0 )
(declare-sort B_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun$ 0 )
(declare-sort A_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun$ 0 )
(declare-sort A_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun$ 0 )
(declare-sort A_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun$ 0 )
(declare-sort A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_a_tree_fun_b_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_bool_fun_a_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_bool_fun_a_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_a_tree_fun_b_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_tree$ 0)
(declare-sort A_tree$ 0)
(declare-sort A_tree_tree$ 0)
(declare-sort B_tree_tree$ 0)
(declare-fun root$ (B_tree$)B$)
(declare-fun left$ (B_tree$)B_tree$)
(declare-fun right$ (B_tree$)B_tree$)
(declare-fun node$ (B$ B_tree$ B_tree$ )B_tree$)
(declare-fun root$a (A_tree$)A$)
(declare-fun left$a (A_tree$)A_tree$)
(declare-fun right$a (A_tree$)A_tree$)
(declare-fun node$a (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun root$b (A_tree_tree$)A_tree$)
(declare-fun left$b (A_tree_tree$)A_tree_tree$)
(declare-fun right$b (A_tree_tree$)A_tree_tree$)
(declare-fun node$b (A_tree$ A_tree_tree$ A_tree_tree$ )A_tree_tree$)
(declare-fun root$c (B_tree_tree$)B_tree$)
(declare-fun left$c (B_tree_tree$)B_tree_tree$)
(declare-fun right$c (B_tree_tree$)B_tree_tree$)
(declare-fun node$c (B_tree$ B_tree_tree$ B_tree_tree$ )B_tree_tree$)
(declare-fun h$ ()A_b_fun$ )
(declare-fun l$ ()A_a_fun$ )
(declare-fun r$ ()A_a_fun$ )
(declare-fun x$ ()A$ )
(declare-fun l$a ()B_b_fun$ )
(declare-fun r$a ()B_b_fun$ )
(declare-fun comp$ (B_b_fun$ )A_b_fun_a_b_fun_fun$ )
(declare-fun comp$a (A_b_fun$ )A_a_fun_a_b_fun_fun$ )
(declare-fun comp$b (B_a_fun$ )A_b_fun_a_a_fun_fun$ )
(declare-fun comp$c (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun comp$d (A_b_fun$ )B_a_fun_b_b_fun_fun$ )
(declare-fun comp$e (A_a_fun$ )B_a_fun_b_a_fun_fun$ )
(declare-fun comp$f (B_b_fun$ )B_b_fun_b_b_fun_fun$ )
(declare-fun comp$g (B_a_fun$ )B_b_fun_b_a_fun_fun$ )
(declare-fun comp$h (A_tree_b_tree_fun$ )A_a_tree_fun_a_b_tree_fun_fun$ )
(declare-fun comp$i (B_a_tree_fun$ )A_b_fun_a_a_tree_fun_fun$ )
(declare-fun comp$j (A_b_tree_fun$ )B_a_fun_b_b_tree_fun_fun$ )
(declare-fun comp$k (A_b_tree_fun$ )A_a_fun_a_b_tree_fun_fun$ )
(declare-fun comp$l (B_tree_b_tree_fun$ )A_b_tree_fun_a_b_tree_fun_fun$ )
(declare-fun comp$m (A_tree_b_tree_fun$ )B_a_tree_fun_b_b_tree_fun_fun$ )
(declare-fun comp$n (B_tree_b_tree_fun$ )B_b_tree_fun_b_b_tree_fun_fun$ )
(declare-fun comp$o (A_tree_a_tree_fun$ )A_a_tree_fun_a_a_tree_fun_fun$ )
(declare-fun comp$p (B_tree_a_tree_fun$ )A_b_tree_fun_a_a_tree_fun_fun$ )
(declare-fun comp$q (A_tree_tree_b_tree_tree_fun$ A_a_tree_tree_fun$ )A_b_tree_tree_fun$ )
(declare-fun comp$r (B_tree_a_tree_fun$ )B_b_tree_fun_b_a_tree_fun_fun$ )
(declare-fun comp$s (A_tree_a_tree_fun$ )B_a_tree_fun_b_a_tree_fun_fun$ )
(declare-fun comp$t (A_tree_a_tree_tree_fun$ )A_a_tree_fun_a_a_tree_tree_fun_fun$ )
(declare-fun comp$u (A_a_tree_fun$ )A_a_fun_a_a_tree_fun_fun$ )
(declare-fun fun_app$ (A_tree_b_tree_fun$ A_tree$ )B_tree$ )
(declare-fun fun_app$a (A_tree_a_tree_fun$ A_tree$ )A_tree$ )
(declare-fun fun_app$b (A_a_tree_fun$ A$ )A_tree$ )
(declare-fun fun_app$c (A_a_fun_a_a_tree_fun_fun$ A_a_fun$ )A_a_tree_fun$ )
(declare-fun fun_app$d (A_b_fun$ A$ )B$ )
(declare-fun fun_app$e (A_b_fun_a_b_fun_fun$ A_b_fun$ )A_b_fun$ )
(declare-fun fun_app$f (A_a_fun_a_b_fun_fun$ A_a_fun$ )A_b_fun$ )
(declare-fun fun_app$g (B_b_tree_fun$ B$ )B_tree$ )
(declare-fun fun_app$h (B_b_fun_b_b_tree_fun_fun$ B_b_fun$ )B_b_tree_fun$ )
(declare-fun fun_app$i (B_tree_b_tree_fun$ B_tree$ )B_tree$ )
(declare-fun fun_app$j (A_tree_tree_b_tree_tree_fun$ A_tree_tree$ )B_tree_tree$ )
(declare-fun fun_app$k (A_tree_a_tree_tree_fun$ A_tree$ )A_tree_tree$ )
(declare-fun fun_app$l (A_b_tree_fun$ A$ )B_tree$ )
(declare-fun fun_app$m (B_tree_a_tree_fun$ B_tree$ )A_tree$ )
(declare-fun fun_app$n (B_a_fun$ B$ )A$ )
(declare-fun fun_app$o (B_b_fun$ B$ )B$ )
(declare-fun fun_app$p (A_a_fun$ A$ )A$ )
(declare-fun fun_app$q (A_b_fun_a_a_fun_fun$ A_b_fun$ )A_a_fun$ )
(declare-fun fun_app$r (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$s (B_a_fun_b_b_fun_fun$ B_a_fun$ )B_b_fun$ )
(declare-fun fun_app$t (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$u (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun$ )
(declare-fun fun_app$v (B_b_fun_b_a_fun_fun$ B_b_fun$ )B_a_fun$ )
(declare-fun fun_app$w (A_a_tree_fun_a_b_tree_fun_fun$ A_a_tree_fun$ )A_b_tree_fun$ )
(declare-fun fun_app$x (A_b_fun_a_a_tree_fun_fun$ A_b_fun$ )A_a_tree_fun$ )
(declare-fun fun_app$y (B_a_fun_b_b_tree_fun_fun$ B_a_fun$ )B_b_tree_fun$ )
(declare-fun fun_app$z (A_a_fun_a_b_tree_fun_fun$ A_a_fun$ )A_b_tree_fun$ )
(declare-fun map_tree$ (A_b_fun$ )A_tree_b_tree_fun$ )
(declare-fun fun_app$aa (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$ab (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$ac (A_a_fun_a_a_fun_a_b_tree_fun_fun_fun$ A_a_fun$ )A_a_fun_a_b_tree_fun_fun$ )
(declare-fun fun_app$ad (A_a_fun_a_a_fun_a_a_tree_fun_fun_fun$ A_a_fun$ )A_a_fun_a_a_tree_fun_fun$ )
(declare-fun fun_app$ae (B_a_tree_fun$ B$ )A_tree$ )
(declare-fun fun_app$af (B_b_fun_b_a_tree_fun_fun$ B_b_fun$ )B_a_tree_fun$ )
(declare-fun fun_app$ag (B_b_fun_b_b_fun_b_a_tree_fun_fun_fun$ B_b_fun$ )B_b_fun_b_a_tree_fun_fun$ )
(declare-fun fun_app$ah (B_b_fun_b_b_fun_b_b_tree_fun_fun_fun$ B_b_fun$ )B_b_fun_b_b_tree_fun_fun$ )
(declare-fun fun_app$ai (A_a_tree_tree_fun$ A$ )A_tree_tree$ )
(declare-fun fun_app$aj (A_a_fun_a_a_tree_tree_fun_fun$ A_a_fun$ )A_a_tree_tree_fun$ )
(declare-fun fun_app$ak (A_a_fun_a_a_fun_a_a_tree_tree_fun_fun_fun$ A_a_fun$ )A_a_fun_a_a_tree_tree_fun_fun$ )
(declare-fun fun_app$al (A_b_tree_fun_a_b_tree_fun_fun$ A_b_tree_fun$ )A_b_tree_fun$ )
(declare-fun fun_app$am (A_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun$ A_b_tree_fun$ )A_a_fun_a_b_tree_fun_fun$ )
(declare-fun fun_app$an (A_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun$ A_bool_fun$ )A_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun$ )
(declare-fun fun_app$ao (A_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun$ A_a_fun$ )A_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun$ )
(declare-fun fun_app$ap (A_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun$ A_b_tree_fun$ )A_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$aq (A_bool_fun_a_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun_fun$ A_bool_fun$ )A_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$ar (A_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun$ A_a_tree_fun$ )A_a_fun_a_a_tree_fun_fun$ )
(declare-fun fun_app$as (A_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun$ A_bool_fun$ )A_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun$ )
(declare-fun fun_app$at (A_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun$ A_a_fun$ )A_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun$ )
(declare-fun fun_app$au (A_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun$ A_a_tree_fun$ )A_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$av (A_bool_fun_a_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun_fun$ A_bool_fun$ )A_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$aw (B_a_tree_fun_b_b_tree_fun_fun$ B_a_tree_fun$ )B_b_tree_fun$ )
(declare-fun fun_app$ax (B_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun$ B_a_tree_fun$ )B_b_fun_b_a_tree_fun_fun$ )
(declare-fun fun_app$ay (B_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun$ B_bool_fun$ )B_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun$ )
(declare-fun fun_app$az (B_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun$ B_b_fun$ )B_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun$ )
(declare-fun fun_app$ba (B_a_tree_fun_b_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun_fun$ B_a_tree_fun$ )B_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$bb (B_bool_fun_b_a_tree_fun_b_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun_fun_fun$ B_bool_fun$ )B_a_tree_fun_b_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$bc (B_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun$ B_b_tree_fun$ )B_b_fun_b_b_tree_fun_fun$ )
(declare-fun fun_app$bd (B_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun$ B_bool_fun$ )B_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun$ )
(declare-fun fun_app$be (B_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun$ B_b_fun$ )B_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun$ )
(declare-fun fun_app$bf (B_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun$ B_b_tree_fun$ )B_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$bg (B_bool_fun_b_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun_fun$ B_bool_fun$ )B_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$bh (B_b_tree_fun_b_b_tree_fun_fun$ B_b_tree_fun$ )B_b_tree_fun$ )
(declare-fun fun_app$bi (A_a_tree_fun_a_a_tree_fun_fun$ A_a_tree_fun$ )A_a_tree_fun$ )
(declare-fun fun_app$bj (A_b_tree_fun_a_a_tree_fun_fun$ A_b_tree_fun$ )A_a_tree_fun$ )
(declare-fun fun_app$bk (A_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun$ A_a_tree_tree_fun$ )A_a_fun_a_a_tree_tree_fun_fun$ )
(declare-fun fun_app$bl (A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun$ A_bool_fun$ )A_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun$ )
(declare-fun fun_app$bm (A_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun$ A_a_fun$ )A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun$ )
(declare-fun fun_app$bn (A_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun$ A_a_tree_tree_fun$ )A_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$bo (A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun_fun$ A_bool_fun$ )A_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$bp (B_b_tree_fun_b_a_tree_fun_fun$ B_b_tree_fun$ )B_a_tree_fun$ )
(declare-fun fun_app$bq (B_a_tree_fun_b_a_tree_fun_fun$ B_a_tree_fun$ )B_a_tree_fun$ )
(declare-fun fun_app$br (A_a_tree_fun_a_a_tree_tree_fun_fun$ A_a_tree_fun$ )A_a_tree_tree_fun$ )
(declare-fun map_tree$a (A_a_fun$ )A_tree_a_tree_fun$ )
(declare-fun map_tree$b (B_b_fun$ )B_tree_b_tree_fun$ )
(declare-fun map_tree$c (A_tree_b_tree_fun$ )A_tree_tree_b_tree_tree_fun$ )
(declare-fun map_tree$d (A_a_tree_fun$ )A_tree_a_tree_tree_fun$ )
(declare-fun map_tree$e (A_b_tree_fun$ A_tree$ )B_tree_tree$ )
(declare-fun map_tree$f (B_a_fun$ )B_tree_a_tree_fun$ )
(declare-fun map_tree$g (B_a_tree_fun$ B_tree$ )A_tree_tree$ )
(declare-fun pred_tree$ (A_bool_fun$ A_tree$ )Bool )
(declare-fun corec_tree$ (A_b_fun$ )A_bool_fun_a_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun_fun$ )
(declare-fun pred_tree$a (B_bool_fun$ B_tree$ )Bool )
(declare-fun corec_tree$a (A_a_fun$ )A_bool_fun_a_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun_fun$ )
(declare-fun corec_tree$b (B_a_fun$ )B_bool_fun_b_a_tree_fun_b_b_fun_b_bool_fun_b_a_tree_fun_b_b_fun_b_a_tree_fun_fun_fun_fun_fun_fun_fun$ )
(declare-fun corec_tree$c (B_b_fun$ )B_bool_fun_b_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun_fun$ )
(declare-fun corec_tree$d (A_a_tree_fun$ )A_bool_fun_a_a_tree_tree_fun_a_a_fun_a_bool_fun_a_a_tree_tree_fun_a_a_fun_a_a_tree_tree_fun_fun_fun_fun_fun_fun_fun$ )
(declare-fun corec_tree$e (A_b_tree_fun$ A_bool_fun$ A_b_tree_tree_fun$ A_a_fun$ A_bool_fun$ A_b_tree_tree_fun$ A_a_fun$ )A_b_tree_tree_fun$ )
(declare-fun unfold_tree$ (A_b_fun$ )A_a_fun_a_a_fun_a_b_tree_fun_fun_fun$ )
(declare-fun tree_recurse$ (A_a_fun$ )A_a_fun_a_a_tree_fun_fun$ )
(declare-fun unfold_tree$a (A_a_fun$ )A_a_fun_a_a_fun_a_a_tree_fun_fun_fun$ )
(declare-fun unfold_tree$b (B_a_fun$ )B_b_fun_b_b_fun_b_a_tree_fun_fun_fun$ )
(declare-fun unfold_tree$c (B_b_fun$ )B_b_fun_b_b_fun_b_b_tree_fun_fun_fun$ )
(declare-fun unfold_tree$d (A_a_tree_fun$ )A_a_fun_a_a_fun_a_a_tree_tree_fun_fun_fun$ )
(declare-fun unfold_tree$e (A_b_tree_fun$ A_a_fun$ A_a_fun$ A$ )B_tree_tree$ )
(declare-fun tree_recurse$a (B_b_fun$ )B_b_fun_b_b_tree_fun_fun$ )
(assert (! (not (= (fun_app$ (map_tree$ h$ )(node$a x$ (fun_app$a (map_tree$a l$ )(fun_app$b (fun_app$c (tree_recurse$ l$ )r$ )x$ ))(fun_app$a (map_tree$a r$ )(fun_app$b (fun_app$c (tree_recurse$ l$ )r$ )x$ ))))(node$ (fun_app$d h$ x$ )(fun_app$ (map_tree$ (fun_app$e (comp$ l$a )h$ ))(fun_app$b (fun_app$c (tree_recurse$ l$ )r$ )x$ ))(fun_app$ (map_tree$ (fun_app$e (comp$ r$a )h$ ))(fun_app$b (fun_app$c (tree_recurse$ l$ )r$ )x$ ))))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B_tree$ )(?v2 B_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a2 ))
(assert (! (= (fun_app$f (comp$a h$ )l$ )(fun_app$e (comp$ l$a )h$ )):named a3 ))
(assert (! (= (fun_app$f (comp$a h$ )r$ )(fun_app$e (comp$ r$a )h$ )):named a4 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$g (fun_app$h (tree_recurse$a ?v0 )?v1 )?v2 )(node$ ?v2 (fun_app$i (map_tree$b ?v0 )(fun_app$g (fun_app$h (tree_recurse$a ?v0 )?v1 )?v2 ))(fun_app$i (map_tree$b ?v1 )(fun_app$g (fun_app$h (tree_recurse$a ?v0 )?v1 )?v2 )))):pattern ((fun_app$g (fun_app$h (tree_recurse$a ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$b (fun_app$c (tree_recurse$ ?v0 )?v1 )?v2 )(node$a ?v2 (fun_app$a (map_tree$a ?v0 )(fun_app$b (fun_app$c (tree_recurse$ ?v0 )?v1 )?v2 ))(fun_app$a (map_tree$a ?v1 )(fun_app$b (fun_app$c (tree_recurse$ ?v0 )?v1 )?v2 )))):pattern ((fun_app$b (fun_app$c (tree_recurse$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_tree_b_tree_fun$ )(?v1 A_tree$ )(?v2 A_tree_tree$ )(?v3 A_tree_tree$ ))(! (= (fun_app$j (map_tree$c ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$c (fun_app$ ?v0 ?v1 )(fun_app$j (map_tree$c ?v0 )?v2 )(fun_app$j (map_tree$c ?v0 )?v3 ))):pattern ((fun_app$j (map_tree$c ?v0 )(node$b ?v1 ?v2 ?v3 ))))):named a7 ))
(assert (! (forall ((?v0 A_a_tree_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (fun_app$k (map_tree$d ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$b (fun_app$b ?v0 ?v1 )(fun_app$k (map_tree$d ?v0 )?v2 )(fun_app$k (map_tree$d ?v0 )?v3 ))):pattern ((fun_app$k (map_tree$d ?v0 )(node$a ?v1 ?v2 ?v3 ))))):named a8 ))
(assert (! (forall ((?v0 A_b_tree_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (map_tree$e ?v0 (node$a ?v1 ?v2 ?v3 ))(node$c (fun_app$l ?v0 ?v1 )(map_tree$e ?v0 ?v2 )(map_tree$e ?v0 ?v3 ))):pattern ((map_tree$e ?v0 (node$a ?v1 ?v2 ?v3 ))))):named a9 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(! (= (fun_app$m (map_tree$f ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$a (fun_app$n ?v0 ?v1 )(fun_app$m (map_tree$f ?v0 )?v2 )(fun_app$m (map_tree$f ?v0 )?v3 ))):pattern ((fun_app$m (map_tree$f ?v0 )(node$ ?v1 ?v2 ?v3 ))))):named a10 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(! (= (fun_app$i (map_tree$b ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$ (fun_app$o ?v0 ?v1 )(fun_app$i (map_tree$b ?v0 )?v2 )(fun_app$i (map_tree$b ?v0 )?v3 ))):pattern ((fun_app$i (map_tree$b ?v0 )(node$ ?v1 ?v2 ?v3 ))))):named a11 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (fun_app$ (map_tree$ ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$ (fun_app$d ?v0 ?v1 )(fun_app$ (map_tree$ ?v0 )?v2 )(fun_app$ (map_tree$ ?v0 )?v3 ))):pattern ((fun_app$ (map_tree$ ?v0 )(node$a ?v1 ?v2 ?v3 ))))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (fun_app$a (map_tree$a ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$a (fun_app$p ?v0 ?v1 )(fun_app$a (map_tree$a ?v0 )?v2 )(fun_app$a (map_tree$a ?v0 )?v3 ))):pattern ((fun_app$a (map_tree$a ?v0 )(node$a ?v1 ?v2 ?v3 ))))):named a13 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_tree$ ))(= (fun_app$i (map_tree$b ?v0 )(fun_app$ (map_tree$ ?v1 )?v2 ))(fun_app$ (map_tree$ (fun_app$e (comp$ ?v0 )?v1 ))?v2 ))):named a14 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_tree$ ))(= (fun_app$m (map_tree$f ?v0 )(fun_app$ (map_tree$ ?v1 )?v2 ))(fun_app$a (map_tree$a (fun_app$q (comp$b ?v0 )?v1 ))?v2 ))):named a15 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_tree$ ))(= (fun_app$ (map_tree$ ?v0 )(fun_app$a (map_tree$a ?v1 )?v2 ))(fun_app$ (map_tree$ (fun_app$f (comp$a ?v0 )?v1 ))?v2 ))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_tree$ ))(= (fun_app$a (map_tree$a ?v0 )(fun_app$a (map_tree$a ?v1 )?v2 ))(fun_app$a (map_tree$a (fun_app$r (comp$c ?v0 )?v1 ))?v2 ))):named a17 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_tree$ ))(= (fun_app$ (map_tree$ ?v0 )(fun_app$m (map_tree$f ?v1 )?v2 ))(fun_app$i (map_tree$b (fun_app$s (comp$d ?v0 )?v1 ))?v2 ))):named a18 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_tree$ ))(= (fun_app$a (map_tree$a ?v0 )(fun_app$m (map_tree$f ?v1 )?v2 ))(fun_app$m (map_tree$f (fun_app$t (comp$e ?v0 )?v1 ))?v2 ))):named a19 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_tree$ ))(= (fun_app$i (map_tree$b ?v0 )(fun_app$i (map_tree$b ?v1 )?v2 ))(fun_app$i (map_tree$b (fun_app$u (comp$f ?v0 )?v1 ))?v2 ))):named a20 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_tree$ ))(= (fun_app$m (map_tree$f ?v0 )(fun_app$i (map_tree$b ?v1 )?v2 ))(fun_app$m (map_tree$f (fun_app$v (comp$g ?v0 )?v1 ))?v2 ))):named a21 ))
(assert (! (forall ((?v0 A_tree_b_tree_fun$ )(?v1 A_a_tree_fun$ )(?v2 A_tree$ ))(= (fun_app$j (map_tree$c ?v0 )(fun_app$k (map_tree$d ?v1 )?v2 ))(map_tree$e (fun_app$w (comp$h ?v0 )?v1 )?v2 ))):named a22 ))
(assert (! (forall ((?v0 B_a_tree_fun$ )(?v1 A_b_fun$ )(?v2 A_tree$ ))(= (map_tree$g ?v0 (fun_app$ (map_tree$ ?v1 )?v2 ))(fun_app$k (map_tree$d (fun_app$x (comp$i ?v0 )?v1 ))?v2 ))):named a23 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (forall ((?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v0 (node$a ?v1 ?v2 ?v3 ))false ))false )):named a24 ))
(assert (! (forall ((?v0 B_tree$ ))(=> (forall ((?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false ))false )):named a25 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (= ?v0 (node$ ?v1 (fun_app$i (map_tree$b ?v2 )?v0 )(fun_app$i (map_tree$b ?v3 )?v0 )))(= ?v0 (fun_app$g (fun_app$h (tree_recurse$a ?v2 )?v3 )?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (= ?v0 (node$a ?v1 (fun_app$a (map_tree$a ?v2 )?v0 )(fun_app$a (map_tree$a ?v3 )?v0 )))(= ?v0 (fun_app$b (fun_app$c (tree_recurse$ ?v2 )?v3 )?v1 )))):named a27 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$d (fun_app$e (comp$ ?v0 )?v1 )?v2 )(fun_app$o ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$e (comp$ ?v0 )?v1 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$d (fun_app$f (comp$a ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$f (comp$a ?v0 )?v1 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$o (fun_app$u (comp$f ?v0 )?v1 )?v2 )(fun_app$o ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$o (fun_app$u (comp$f ?v0 )?v1 )?v2 )))):named a30 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$p (fun_app$q (comp$b ?v0 )?v1 )?v2 )(fun_app$n ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$p (fun_app$q (comp$b ?v0 )?v1 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$o (fun_app$s (comp$d ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$o (fun_app$s (comp$d ?v0 )?v1 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$p (fun_app$r (comp$c ?v0 )?v1 )?v2 )(fun_app$p ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$p (fun_app$r (comp$c ?v0 )?v1 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 A_tree_b_tree_fun$ )(?v1 A_a_tree_fun$ )(?v2 A$ ))(! (= (fun_app$l (fun_app$w (comp$h ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$w (comp$h ?v0 )?v1 )?v2 )))):named a34 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$n (fun_app$t (comp$e ?v0 )?v1 )?v2 )(fun_app$p ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$n (fun_app$t (comp$e ?v0 )?v1 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 A_b_tree_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$g (fun_app$y (comp$j ?v0 )?v1 )?v2 )(fun_app$l ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$y (comp$j ?v0 )?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 A_b_tree_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$l (fun_app$z (comp$k ?v0 )?v1 )?v2 )(fun_app$l ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$z (comp$k ?v0 )?v1 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (pred_tree$ ?v0 (node$a ?v1 ?v2 ?v3 ))(and (fun_app$aa ?v0 ?v1 )(and (pred_tree$ ?v0 ?v2 )(pred_tree$ ?v0 ?v3 )))):pattern ((pred_tree$ ?v0 (node$a ?v1 ?v2 ?v3 ))))):named a38 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(! (= (pred_tree$a ?v0 (node$ ?v1 ?v2 ?v3 ))(and (fun_app$ab ?v0 ?v1 )(and (pred_tree$a ?v0 ?v2 )(pred_tree$a ?v0 ?v3 )))):pattern ((pred_tree$a ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a39 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (fun_app$i (map_tree$b ?v0 )(fun_app$l (fun_app$z (fun_app$ac (unfold_tree$ ?v1 )?v2 )?v3 )?v4 ))(fun_app$l (fun_app$z (fun_app$ac (unfold_tree$ (fun_app$e (comp$ ?v0 )?v1 ))?v2 )?v3 )?v4 ))):named a40 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (fun_app$ (map_tree$ ?v0 )(fun_app$b (fun_app$c (fun_app$ad (unfold_tree$a ?v1 )?v2 )?v3 )?v4 ))(fun_app$l (fun_app$z (fun_app$ac (unfold_tree$ (fun_app$f (comp$a ?v0 )?v1 ))?v2 )?v3 )?v4 ))):named a41 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(= (fun_app$ (map_tree$ ?v0 )(fun_app$ae (fun_app$af (fun_app$ag (unfold_tree$b ?v1 )?v2 )?v3 )?v4 ))(fun_app$g (fun_app$h (fun_app$ah (unfold_tree$c (fun_app$s (comp$d ?v0 )?v1 ))?v2 )?v3 )?v4 ))):named a42 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (fun_app$a (map_tree$a ?v0 )(fun_app$b (fun_app$c (fun_app$ad (unfold_tree$a ?v1 )?v2 )?v3 )?v4 ))(fun_app$b (fun_app$c (fun_app$ad (unfold_tree$a (fun_app$r (comp$c ?v0 )?v1 ))?v2 )?v3 )?v4 ))):named a43 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(= (fun_app$i (map_tree$b ?v0 )(fun_app$g (fun_app$h (fun_app$ah (unfold_tree$c ?v1 )?v2 )?v3 )?v4 ))(fun_app$g (fun_app$h (fun_app$ah (unfold_tree$c (fun_app$u (comp$f ?v0 )?v1 ))?v2 )?v3 )?v4 ))):named a44 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (fun_app$m (map_tree$f ?v0 )(fun_app$l (fun_app$z (fun_app$ac (unfold_tree$ ?v1 )?v2 )?v3 )?v4 ))(fun_app$b (fun_app$c (fun_app$ad (unfold_tree$a (fun_app$q (comp$b ?v0 )?v1 ))?v2 )?v3 )?v4 ))):named a45 ))
(assert (! (forall ((?v0 A_tree_b_tree_fun$ )(?v1 A_a_tree_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (fun_app$j (map_tree$c ?v0 )(fun_app$ai (fun_app$aj (fun_app$ak (unfold_tree$d ?v1 )?v2 )?v3 )?v4 ))(unfold_tree$e (fun_app$w (comp$h ?v0 )?v1 )?v2 ?v3 ?v4 ))):named a46 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(= (fun_app$a (map_tree$a ?v0 )(fun_app$ae (fun_app$af (fun_app$ag (unfold_tree$b ?v1 )?v2 )?v3 )?v4 ))(fun_app$ae (fun_app$af (fun_app$ag (unfold_tree$b (fun_app$t (comp$e ?v0 )?v1 ))?v2 )?v3 )?v4 ))):named a47 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(= (fun_app$m (map_tree$f ?v0 )(fun_app$g (fun_app$h (fun_app$ah (unfold_tree$c ?v1 )?v2 )?v3 )?v4 ))(fun_app$ae (fun_app$af (fun_app$ag (unfold_tree$b (fun_app$v (comp$g ?v0 )?v1 ))?v2 )?v3 )?v4 ))):named a48 ))
(assert (! (forall ((?v0 B_a_tree_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (map_tree$g ?v0 (fun_app$l (fun_app$z (fun_app$ac (unfold_tree$ ?v1 )?v2 )?v3 )?v4 ))(fun_app$ai (fun_app$aj (fun_app$ak (unfold_tree$d (fun_app$x (comp$i ?v0 )?v1 ))?v2 )?v3 )?v4 ))):named a49 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_bool_fun$ )(?v3 A_b_tree_fun$ )(?v4 A_a_fun$ )(?v5 A_bool_fun$ )(?v6 A_b_tree_fun$ )(?v7 A_a_fun$ ))(= (fun_app$al (comp$l (map_tree$b ?v0 ))(fun_app$z (fun_app$am (fun_app$an (fun_app$ao (fun_app$ap (fun_app$aq (corec_tree$ ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$z (fun_app$am (fun_app$an (fun_app$ao (fun_app$ap (fun_app$aq (corec_tree$ (fun_app$e (comp$ ?v0 )?v1 ))?v2 )(fun_app$al (comp$l (map_tree$b ?v0 ))?v3 ))?v4 )?v5 )(fun_app$al (comp$l (map_tree$b ?v0 ))?v6 ))?v7 ))):named a50 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_bool_fun$ )(?v3 A_a_tree_fun$ )(?v4 A_a_fun$ )(?v5 A_bool_fun$ )(?v6 A_a_tree_fun$ )(?v7 A_a_fun$ ))(= (fun_app$w (comp$h (map_tree$ ?v0 ))(fun_app$c (fun_app$ar (fun_app$as (fun_app$at (fun_app$au (fun_app$av (corec_tree$a ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$z (fun_app$am (fun_app$an (fun_app$ao (fun_app$ap (fun_app$aq (corec_tree$ (fun_app$f (comp$a ?v0 )?v1 ))?v2 )(fun_app$w (comp$h (map_tree$ ?v0 ))?v3 ))?v4 )?v5 )(fun_app$w (comp$h (map_tree$ ?v0 ))?v6 ))?v7 ))):named a51 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_bool_fun$ )(?v3 B_a_tree_fun$ )(?v4 B_b_fun$ )(?v5 B_bool_fun$ )(?v6 B_a_tree_fun$ )(?v7 B_b_fun$ ))(= (fun_app$aw (comp$m (map_tree$ ?v0 ))(fun_app$af (fun_app$ax (fun_app$ay (fun_app$az (fun_app$ba (fun_app$bb (corec_tree$b ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$h (fun_app$bc (fun_app$bd (fun_app$be (fun_app$bf (fun_app$bg (corec_tree$c (fun_app$s (comp$d ?v0 )?v1 ))?v2 )(fun_app$aw (comp$m (map_tree$ ?v0 ))?v3 ))?v4 )?v5 )(fun_app$aw (comp$m (map_tree$ ?v0 ))?v6 ))?v7 ))):named a52 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_bool_fun$ )(?v3 B_b_tree_fun$ )(?v4 B_b_fun$ )(?v5 B_bool_fun$ )(?v6 B_b_tree_fun$ )(?v7 B_b_fun$ ))(= (fun_app$bh (comp$n (map_tree$b ?v0 ))(fun_app$h (fun_app$bc (fun_app$bd (fun_app$be (fun_app$bf (fun_app$bg (corec_tree$c ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$h (fun_app$bc (fun_app$bd (fun_app$be (fun_app$bf (fun_app$bg (corec_tree$c (fun_app$u (comp$f ?v0 )?v1 ))?v2 )(fun_app$bh (comp$n (map_tree$b ?v0 ))?v3 ))?v4 )?v5 )(fun_app$bh (comp$n (map_tree$b ?v0 ))?v6 ))?v7 ))):named a53 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_bool_fun$ )(?v3 A_a_tree_fun$ )(?v4 A_a_fun$ )(?v5 A_bool_fun$ )(?v6 A_a_tree_fun$ )(?v7 A_a_fun$ ))(= (fun_app$bi (comp$o (map_tree$a ?v0 ))(fun_app$c (fun_app$ar (fun_app$as (fun_app$at (fun_app$au (fun_app$av (corec_tree$a ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$c (fun_app$ar (fun_app$as (fun_app$at (fun_app$au (fun_app$av (corec_tree$a (fun_app$r (comp$c ?v0 )?v1 ))?v2 )(fun_app$bi (comp$o (map_tree$a ?v0 ))?v3 ))?v4 )?v5 )(fun_app$bi (comp$o (map_tree$a ?v0 ))?v6 ))?v7 ))):named a54 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_bool_fun$ )(?v3 A_b_tree_fun$ )(?v4 A_a_fun$ )(?v5 A_bool_fun$ )(?v6 A_b_tree_fun$ )(?v7 A_a_fun$ ))(= (fun_app$bj (comp$p (map_tree$f ?v0 ))(fun_app$z (fun_app$am (fun_app$an (fun_app$ao (fun_app$ap (fun_app$aq (corec_tree$ ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$c (fun_app$ar (fun_app$as (fun_app$at (fun_app$au (fun_app$av (corec_tree$a (fun_app$q (comp$b ?v0 )?v1 ))?v2 )(fun_app$bj (comp$p (map_tree$f ?v0 ))?v3 ))?v4 )?v5 )(fun_app$bj (comp$p (map_tree$f ?v0 ))?v6 ))?v7 ))):named a55 ))
(assert (! (forall ((?v0 A_tree_b_tree_fun$ )(?v1 A_a_tree_fun$ )(?v2 A_bool_fun$ )(?v3 A_a_tree_tree_fun$ )(?v4 A_a_fun$ )(?v5 A_bool_fun$ )(?v6 A_a_tree_tree_fun$ )(?v7 A_a_fun$ ))(= (comp$q (map_tree$c ?v0 )(fun_app$aj (fun_app$bk (fun_app$bl (fun_app$bm (fun_app$bn (fun_app$bo (corec_tree$d ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(corec_tree$e (fun_app$w (comp$h ?v0 )?v1 )?v2 (comp$q (map_tree$c ?v0 )?v3 )?v4 ?v5 (comp$q (map_tree$c ?v0 )?v6 )?v7 ))):named a56 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_bool_fun$ )(?v3 B_b_tree_fun$ )(?v4 B_b_fun$ )(?v5 B_bool_fun$ )(?v6 B_b_tree_fun$ )(?v7 B_b_fun$ ))(= (fun_app$bp (comp$r (map_tree$f ?v0 ))(fun_app$h (fun_app$bc (fun_app$bd (fun_app$be (fun_app$bf (fun_app$bg (corec_tree$c ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$af (fun_app$ax (fun_app$ay (fun_app$az (fun_app$ba (fun_app$bb (corec_tree$b (fun_app$v (comp$g ?v0 )?v1 ))?v2 )(fun_app$bp (comp$r (map_tree$f ?v0 ))?v3 ))?v4 )?v5 )(fun_app$bp (comp$r (map_tree$f ?v0 ))?v6 ))?v7 ))):named a57 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_bool_fun$ )(?v3 B_a_tree_fun$ )(?v4 B_b_fun$ )(?v5 B_bool_fun$ )(?v6 B_a_tree_fun$ )(?v7 B_b_fun$ ))(= (fun_app$bq (comp$s (map_tree$a ?v0 ))(fun_app$af (fun_app$ax (fun_app$ay (fun_app$az (fun_app$ba (fun_app$bb (corec_tree$b ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$af (fun_app$ax (fun_app$ay (fun_app$az (fun_app$ba (fun_app$bb (corec_tree$b (fun_app$t (comp$e ?v0 )?v1 ))?v2 )(fun_app$bq (comp$s (map_tree$a ?v0 ))?v3 ))?v4 )?v5 )(fun_app$bq (comp$s (map_tree$a ?v0 ))?v6 ))?v7 ))):named a58 ))
(assert (! (forall ((?v0 A_a_tree_fun$ )(?v1 A_a_fun$ )(?v2 A_bool_fun$ )(?v3 A_a_tree_fun$ )(?v4 A_a_fun$ )(?v5 A_bool_fun$ )(?v6 A_a_tree_fun$ )(?v7 A_a_fun$ ))(= (fun_app$br (comp$t (map_tree$d ?v0 ))(fun_app$c (fun_app$ar (fun_app$as (fun_app$at (fun_app$au (fun_app$av (corec_tree$a ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$aj (fun_app$bk (fun_app$bl (fun_app$bm (fun_app$bn (fun_app$bo (corec_tree$d (fun_app$c (comp$u ?v0 )?v1 ))?v2 )(fun_app$br (comp$t (map_tree$d ?v0 ))?v3 ))?v4 )?v5 )(fun_app$br (comp$t (map_tree$d ?v0 ))?v6 ))?v7 ))):named a59 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ ))(= (fun_app$e (comp$ ?v0 )(fun_app$e (comp$ ?v1 )?v2 ))(fun_app$e (comp$ (fun_app$u (comp$f ?v0 )?v1 ))?v2 ))):named a60 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ ))(= (fun_app$e (comp$ ?v0 )(fun_app$f (comp$a ?v1 )?v2 ))(fun_app$f (comp$a (fun_app$e (comp$ ?v0 )?v1 ))?v2 ))):named a61 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 A_b_fun$ ))(= (fun_app$f (comp$a ?v0 )(fun_app$q (comp$b ?v1 )?v2 ))(fun_app$e (comp$ (fun_app$s (comp$d ?v0 )?v1 ))?v2 ))):named a62 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(= (fun_app$f (comp$a ?v0 )(fun_app$r (comp$c ?v1 )?v2 ))(fun_app$f (comp$a (fun_app$f (comp$a ?v0 )?v1 ))?v2 ))):named a63 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 B_a_fun$ ))(= (fun_app$v (comp$g ?v0 )(fun_app$s (comp$d ?v1 )?v2 ))(fun_app$t (comp$e (fun_app$q (comp$b ?v0 )?v1 ))?v2 ))):named a64 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$u (comp$f ?v0 )(fun_app$u (comp$f ?v1 )?v2 ))(fun_app$u (comp$f (fun_app$u (comp$f ?v0 )?v1 ))?v2 ))):named a65 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 B_a_fun$ ))(= (fun_app$u (comp$f ?v0 )(fun_app$s (comp$d ?v1 )?v2 ))(fun_app$s (comp$d (fun_app$e (comp$ ?v0 )?v1 ))?v2 ))):named a66 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ ))(= (fun_app$q (comp$b ?v0 )(fun_app$e (comp$ ?v1 )?v2 ))(fun_app$q (comp$b (fun_app$v (comp$g ?v0 )?v1 ))?v2 ))):named a67 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ ))(= (fun_app$q (comp$b ?v0 )(fun_app$f (comp$a ?v1 )?v2 ))(fun_app$r (comp$c (fun_app$q (comp$b ?v0 )?v1 ))?v2 ))):named a68 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (fun_app$s (comp$d ?v0 )(fun_app$v (comp$g ?v1 )?v2 ))(fun_app$u (comp$f (fun_app$s (comp$d ?v0 )?v1 ))?v2 ))):named a69 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ ))(= (fun_app$e (comp$ (fun_app$u (comp$f ?v0 )?v1 ))?v2 )(fun_app$e (comp$ ?v0 )(fun_app$e (comp$ ?v1 )?v2 )))):named a70 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 A_b_fun$ ))(= (fun_app$e (comp$ (fun_app$s (comp$d ?v0 )?v1 ))?v2 )(fun_app$f (comp$a ?v0 )(fun_app$q (comp$b ?v1 )?v2 )))):named a71 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ ))(= (fun_app$f (comp$a (fun_app$e (comp$ ?v0 )?v1 ))?v2 )(fun_app$e (comp$ ?v0 )(fun_app$f (comp$a ?v1 )?v2 )))):named a72 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(= (fun_app$f (comp$a (fun_app$f (comp$a ?v0 )?v1 ))?v2 )(fun_app$f (comp$a ?v0 )(fun_app$r (comp$c ?v1 )?v2 )))):named a73 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 B_a_fun$ ))(= (fun_app$t (comp$e (fun_app$q (comp$b ?v0 )?v1 ))?v2 )(fun_app$v (comp$g ?v0 )(fun_app$s (comp$d ?v1 )?v2 )))):named a74 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$u (comp$f (fun_app$u (comp$f ?v0 )?v1 ))?v2 )(fun_app$u (comp$f ?v0 )(fun_app$u (comp$f ?v1 )?v2 )))):named a75 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (fun_app$u (comp$f (fun_app$s (comp$d ?v0 )?v1 ))?v2 )(fun_app$s (comp$d ?v0 )(fun_app$v (comp$g ?v1 )?v2 )))):named a76 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ ))(= (fun_app$q (comp$b (fun_app$v (comp$g ?v0 )?v1 ))?v2 )(fun_app$q (comp$b ?v0 )(fun_app$e (comp$ ?v1 )?v2 )))):named a77 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 A_b_fun$ ))(= (fun_app$q (comp$b (fun_app$t (comp$e ?v0 )?v1 ))?v2 )(fun_app$r (comp$c ?v0 )(fun_app$q (comp$b ?v1 )?v2 )))):named a78 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 B_a_fun$ ))(= (fun_app$s (comp$d (fun_app$e (comp$ ?v0 )?v1 ))?v2 )(fun_app$u (comp$f ?v0 )(fun_app$s (comp$d ?v1 )?v2 )))):named a79 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$d (fun_app$e (comp$ ?v0 )?v1 )?v2 )(fun_app$o ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$e (comp$ ?v0 )?v1 )?v2 )))):named a80 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$d (fun_app$f (comp$a ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$f (comp$a ?v0 )?v1 )?v2 )))):named a81 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$o (fun_app$u (comp$f ?v0 )?v1 )?v2 )(fun_app$o ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$o (fun_app$u (comp$f ?v0 )?v1 )?v2 )))):named a82 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$p (fun_app$q (comp$b ?v0 )?v1 )?v2 )(fun_app$n ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$p (fun_app$q (comp$b ?v0 )?v1 )?v2 )))):named a83 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$o (fun_app$s (comp$d ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$o (fun_app$s (comp$d ?v0 )?v1 )?v2 )))):named a84 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$p (fun_app$r (comp$c ?v0 )?v1 )?v2 )(fun_app$p ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$p (fun_app$r (comp$c ?v0 )?v1 )?v2 )))):named a85 ))
(assert (! (forall ((?v0 A_tree_b_tree_fun$ )(?v1 A_a_tree_fun$ )(?v2 A$ ))(! (= (fun_app$l (fun_app$w (comp$h ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$w (comp$h ?v0 )?v1 )?v2 )))):named a86 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$n (fun_app$t (comp$e ?v0 )?v1 )?v2 )(fun_app$p ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$n (fun_app$t (comp$e ?v0 )?v1 )?v2 )))):named a87 ))
(assert (! (forall ((?v0 A_b_tree_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$g (fun_app$y (comp$j ?v0 )?v1 )?v2 )(fun_app$l ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$y (comp$j ?v0 )?v1 )?v2 )))):named a88 ))
(assert (! (forall ((?v0 A_b_tree_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$l (fun_app$z (comp$k ?v0 )?v1 )?v2 )(fun_app$l ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$z (comp$k ?v0 )?v1 )?v2 )))):named a89 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ ))(=> (and (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$e (comp$ ?v2 )?v3 ))(=> (forall ((?v4 A$ ))(= (fun_app$o ?v0 (fun_app$d ?v1 ?v4 ))(fun_app$o ?v2 (fun_app$d ?v3 ?v4 ))))false ))false )):named a90 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ ))(=> (and (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$f (comp$a ?v2 )?v3 ))(=> (forall ((?v4 A$ ))(= (fun_app$o ?v0 (fun_app$d ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$p ?v3 ?v4 ))))false ))false )):named a91 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ ))(=> (and (= (fun_app$f (comp$a ?v0 )?v1 )(fun_app$e (comp$ ?v2 )?v3 ))(=> (forall ((?v4 A$ ))(= (fun_app$d ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$o ?v2 (fun_app$d ?v3 ?v4 ))))false ))false )):named a92 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ ))(=> (and (= (fun_app$f (comp$a ?v0 )?v1 )(fun_app$f (comp$a ?v2 )?v3 ))(=> (forall ((?v4 A$ ))(= (fun_app$d ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$p ?v3 ?v4 ))))false ))false )):named a93 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$u (comp$f ?v0 )?v1 )(fun_app$u (comp$f ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$o ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$o ?v2 (fun_app$o ?v3 ?v4 ))))false ))false )):named a94 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ )(?v3 B_a_fun$ ))(=> (and (= (fun_app$u (comp$f ?v0 )?v1 )(fun_app$s (comp$d ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$o ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$n ?v3 ?v4 ))))false ))false )):named a95 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 B_a_fun$ )(?v3 A_b_fun$ ))(=> (and (= (fun_app$q (comp$b ?v0 )?v1 )(fun_app$q (comp$b ?v2 )?v3 ))(=> (forall ((?v4 A$ ))(= (fun_app$n ?v0 (fun_app$d ?v1 ?v4 ))(fun_app$n ?v2 (fun_app$d ?v3 ?v4 ))))false ))false )):named a96 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (= (fun_app$q (comp$b ?v0 )?v1 )(fun_app$r (comp$c ?v2 )?v3 ))(=> (forall ((?v4 A$ ))(= (fun_app$n ?v0 (fun_app$d ?v1 ?v4 ))(fun_app$p ?v2 (fun_app$p ?v3 ?v4 ))))false ))false )):named a97 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$s (comp$d ?v0 )?v1 )(fun_app$u (comp$f ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$d ?v0 (fun_app$n ?v1 ?v4 ))(fun_app$o ?v2 (fun_app$o ?v3 ?v4 ))))false ))false )):named a98 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 A_b_fun$ )(?v3 B_a_fun$ ))(=> (and (= (fun_app$s (comp$d ?v0 )?v1 )(fun_app$s (comp$d ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$d ?v0 (fun_app$n ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$n ?v3 ?v4 ))))false ))false )):named a99 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 B_a_fun$ )(?v3 A_b_fun$ )(?v4 A_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$r (comp$c ?v0 )?v1 )(fun_app$q (comp$b ?v2 )?v3 ))(= (fun_app$s (comp$d ?v4 )?v2 )?v5 ))(= (fun_app$f (comp$a (fun_app$f (comp$a ?v4 )?v0 ))?v1 )(fun_app$e (comp$ ?v5 )?v3 )))):named a100 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$q (comp$b ?v0 )?v1 )(fun_app$r (comp$c ?v2 )?v3 ))(= (fun_app$f (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$e (comp$ (fun_app$s (comp$d ?v4 )?v0 ))?v1 )(fun_app$f (comp$a ?v5 )?v3 )))):named a101 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$r (comp$c ?v0 )?v1 )(fun_app$r (comp$c ?v2 )?v3 ))(= (fun_app$f (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$f (comp$a (fun_app$f (comp$a ?v4 )?v0 ))?v1 )(fun_app$f (comp$a ?v5 )?v3 )))):named a102 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$e (comp$ ?v2 )?v3 ))(= (fun_app$u (comp$f ?v4 )?v2 )?v5 ))(= (fun_app$e (comp$ (fun_app$u (comp$f ?v4 )?v0 ))?v1 )(fun_app$e (comp$ ?v5 )?v3 )))):named a103 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ )(?v4 B_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$f (comp$a ?v2 )?v3 ))(= (fun_app$e (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$e (comp$ (fun_app$u (comp$f ?v4 )?v0 ))?v1 )(fun_app$f (comp$a ?v5 )?v3 )))):named a104 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$f (comp$a ?v0 )?v1 )(fun_app$e (comp$ ?v2 )?v3 ))(= (fun_app$u (comp$f ?v4 )?v2 )?v5 ))(= (fun_app$f (comp$a (fun_app$e (comp$ ?v4 )?v0 ))?v1 )(fun_app$e (comp$ ?v5 )?v3 )))):named a105 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ )(?v4 B_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$f (comp$a ?v0 )?v1 )(fun_app$f (comp$a ?v2 )?v3 ))(= (fun_app$e (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$f (comp$a (fun_app$e (comp$ ?v4 )?v0 ))?v1 )(fun_app$f (comp$a ?v5 )?v3 )))):named a106 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 A_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$v (comp$g ?v0 )?v1 )(fun_app$t (comp$e ?v2 )?v3 ))(= (fun_app$f (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$u (comp$f (fun_app$s (comp$d ?v4 )?v0 ))?v1 )(fun_app$s (comp$d ?v5 )?v3 )))):named a107 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 A_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$t (comp$e ?v0 )?v1 )(fun_app$t (comp$e ?v2 )?v3 ))(= (fun_app$f (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$s (comp$d (fun_app$f (comp$a ?v4 )?v0 ))?v1 )(fun_app$s (comp$d ?v5 )?v3 )))):named a108 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 A_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$v (comp$g ?v0 )?v1 )(fun_app$v (comp$g ?v2 )?v3 ))(= (fun_app$s (comp$d ?v4 )?v2 )?v5 ))(= (fun_app$u (comp$f (fun_app$s (comp$d ?v4 )?v0 ))?v1 )(fun_app$u (comp$f ?v5 )?v3 )))):named a109 ))
(check-sat )
;(get-unsat-core )
