;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_tree_fun$ 0 )
(declare-sort A_b_tree_fun$ 0 )
(declare-sort B_b_tree_fun$ 0 )
(declare-sort B_tree_a_fun$ 0 )
(declare-sort A_b_tree_tree_fun$ 0 )
(declare-sort A_tree_b_tree_fun$ 0 )
(declare-sort B_tree_b_tree_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_tree_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_tree_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_tree_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_tree_fun_fun$ 0 )
(declare-sort B_tree_tree_b_tree_tree_fun$ 0 )
(declare-sort A_a_fun_a_b_tree_tree_fun_fun$ 0 )
(declare-sort A_a_tree_fun_a_b_tree_fun_fun$ 0 )
(declare-sort A_b_tree_fun_a_b_tree_fun_fun$ 0 )
(declare-sort B_b_tree_fun_b_b_tree_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_a_a_tree_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_a_b_tree_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_b_b_tree_fun_fun_fun$ 0 )
(declare-sort A_b_tree_tree_fun_a_b_tree_tree_fun_fun$ 0 )
(declare-sort B_tree_b_tree_fun_b_tree_b_tree_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_a_b_tree_tree_fun_fun_fun$ 0 )
(declare-sort A_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun$ 0 )
(declare-sort A_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun$ 0 )
(declare-sort B_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun$ 0 )
(declare-sort A_b_tree_tree_fun_a_a_fun_a_b_tree_tree_fun_fun_fun$ 0 )
(declare-sort A_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun$ 0 )
(declare-sort A_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun$ 0 )
(declare-sort A_bool_fun_a_b_tree_tree_fun_a_a_fun_a_b_tree_tree_fun_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_bool_fun_a_b_tree_tree_fun_a_a_fun_a_b_tree_tree_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_b_tree_tree_fun_a_a_fun_a_bool_fun_a_b_tree_tree_fun_a_a_fun_a_b_tree_tree_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_bool_fun_a_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_bool_fun_a_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_bool_fun_a_b_tree_tree_fun_a_a_fun_a_bool_fun_a_b_tree_tree_fun_a_a_fun_a_b_tree_tree_fun_fun_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_tree$ 0)
(declare-sort A_tree$ 0)
(declare-sort B_tree_tree$ 0)
(declare-fun root$ (B_tree$)B$)
(declare-fun left$ (B_tree$)B_tree$)
(declare-fun right$ (B_tree$)B_tree$)
(declare-fun node$ (B$ B_tree$ B_tree$ )B_tree$)
(declare-fun root$a (A_tree$)A$)
(declare-fun left$a (A_tree$)A_tree$)
(declare-fun right$a (A_tree$)A_tree$)
(declare-fun node$a (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun root$b (B_tree_tree$)B_tree$)
(declare-fun left$b (B_tree_tree$)B_tree_tree$)
(declare-fun right$b (B_tree_tree$)B_tree_tree$)
(declare-fun node$b (B_tree$ B_tree_tree$ B_tree_tree$ )B_tree_tree$)
(declare-fun f$ ()A_b_fun$ )
(declare-fun g$ ()B_b_fun$ )
(declare-fun unf$ (A_b_fun$ )B_tree$ )
(declare-fun comp$ (B_b_fun$ )A_b_fun_a_b_fun_fun$ )
(declare-fun comp$a (B_b_fun$ )B_b_fun_b_b_fun_fun$ )
(declare-fun comp$b (A_b_fun$ )B_a_fun_b_b_fun_fun$ )
(declare-fun comp$c (A_b_fun$ )A_a_fun_a_b_fun_fun$ )
(declare-fun comp$d (B_tree_b_tree_fun$ )A_b_tree_fun_a_b_tree_fun_fun$ )
(declare-fun comp$e (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun comp$f (A_a_fun$ )B_a_fun_b_a_fun_fun$ )
(declare-fun comp$g (B_a_fun$ )B_b_fun_b_a_fun_fun$ )
(declare-fun comp$h (B_a_fun$ )A_b_fun_a_a_fun_fun$ )
(declare-fun comp$i (B_b_tree_fun$ )A_b_fun_a_b_tree_fun_fun$ )
(declare-fun comp$j (A_b_tree_fun$ )A_a_fun_a_b_tree_fun_fun$ )
(declare-fun comp$k (A_b_fun$ B_tree_a_fun$ B_tree$ )B$ )
(declare-fun comp$l (B_tree_tree_b_tree_tree_fun$ )A_b_tree_tree_fun_a_b_tree_tree_fun_fun$ )
(declare-fun comp$m (B_tree_b_tree_fun$ )B_b_tree_fun_b_b_tree_fun_fun$ )
(declare-fun comp$n (A_tree_b_tree_fun$ )A_a_tree_fun_a_b_tree_fun_fun$ )
(declare-fun comp$o (B_tree_b_tree_fun$ )B_tree_b_tree_fun_b_tree_b_tree_fun_fun$ )
(declare-fun fun_app$ (B_tree_b_tree_fun$ B_tree$ )B_tree$ )
(declare-fun fun_app$a (A_b_fun_a_b_fun_fun$ A_b_fun$ )A_b_fun$ )
(declare-fun fun_app$b (A_tree_b_tree_fun$ A_tree$ )B_tree$ )
(declare-fun fun_app$c (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun$ )
(declare-fun fun_app$d (B_a_fun_b_b_fun_fun$ B_a_fun$ )B_b_fun$ )
(declare-fun fun_app$e (A_a_fun_a_b_fun_fun$ A_a_fun$ )A_b_fun$ )
(declare-fun fun_app$f (B_tree_tree_b_tree_tree_fun$ B_tree_tree$ )B_tree_tree$ )
(declare-fun fun_app$g (A_b_tree_fun_a_b_tree_fun_fun$ A_b_tree_fun$ )A_b_tree_fun$ )
(declare-fun fun_app$h (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$i (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$j (B_b_fun_b_a_fun_fun$ B_b_fun$ )B_a_fun$ )
(declare-fun fun_app$k (A_b_fun_a_a_fun_fun$ A_b_fun$ )A_a_fun$ )
(declare-fun fun_app$l (A_b_fun_a_b_tree_fun_fun$ A_b_fun$ )A_b_tree_fun$ )
(declare-fun fun_app$m (A_b_tree_fun$ A$ )B_tree$ )
(declare-fun fun_app$n (A_a_fun_a_b_tree_fun_fun$ A_a_fun$ )A_b_tree_fun$ )
(declare-fun fun_app$o (A_a_fun$ A$ )A$ )
(declare-fun fun_app$p (A_b_fun$ A$ )B$ )
(declare-fun fun_app$q (B_tree_a_fun$ B_tree$ )A$ )
(declare-fun fun_app$r (B_b_fun$ B$ )B$ )
(declare-fun fun_app$s (B_a_fun$ B$ )A$ )
(declare-fun fun_app$t (A_a_tree_fun$ A$ )A_tree$ )
(declare-fun fun_app$u (A_a_fun_a_a_tree_fun_fun$ A_a_fun$ )A_a_tree_fun$ )
(declare-fun fun_app$v (A_a_fun_a_a_fun_a_a_tree_fun_fun_fun$ A_a_fun$ )A_a_fun_a_a_tree_fun_fun$ )
(declare-fun fun_app$w (A_b_tree_tree_fun$ A$ )B_tree_tree$ )
(declare-fun fun_app$x (A_a_fun_a_b_tree_tree_fun_fun$ A_a_fun$ )A_b_tree_tree_fun$ )
(declare-fun fun_app$y (A_a_fun_a_a_fun_a_b_tree_tree_fun_fun_fun$ A_a_fun$ )A_a_fun_a_b_tree_tree_fun_fun$ )
(declare-fun fun_app$z (B_b_tree_fun$ B$ )B_tree$ )
(declare-fun map_tree$ (B_b_fun$ )B_tree_b_tree_fun$ )
(declare-fun fun_app$aa (B_b_fun_b_b_tree_fun_fun$ B_b_fun$ )B_b_tree_fun$ )
(declare-fun fun_app$ab (B_b_fun_b_b_fun_b_b_tree_fun_fun_fun$ B_b_fun$ )B_b_fun_b_b_tree_fun_fun$ )
(declare-fun fun_app$ac (A_a_fun_a_a_fun_a_b_tree_fun_fun_fun$ A_a_fun$ )A_a_fun_a_b_tree_fun_fun$ )
(declare-fun fun_app$ad (A_b_tree_tree_fun_a_b_tree_tree_fun_fun$ A_b_tree_tree_fun$ )A_b_tree_tree_fun$ )
(declare-fun fun_app$ae (A_b_tree_tree_fun_a_a_fun_a_b_tree_tree_fun_fun_fun$ A_b_tree_tree_fun$ )A_a_fun_a_b_tree_tree_fun_fun$ )
(declare-fun fun_app$af (A_bool_fun_a_b_tree_tree_fun_a_a_fun_a_b_tree_tree_fun_fun_fun_fun$ A_bool_fun$ )A_b_tree_tree_fun_a_a_fun_a_b_tree_tree_fun_fun_fun$ )
(declare-fun fun_app$ag (A_a_fun_a_bool_fun_a_b_tree_tree_fun_a_a_fun_a_b_tree_tree_fun_fun_fun_fun_fun$ A_a_fun$ )A_bool_fun_a_b_tree_tree_fun_a_a_fun_a_b_tree_tree_fun_fun_fun_fun$ )
(declare-fun fun_app$ah (A_b_tree_tree_fun_a_a_fun_a_bool_fun_a_b_tree_tree_fun_a_a_fun_a_b_tree_tree_fun_fun_fun_fun_fun_fun$ A_b_tree_tree_fun$ )A_a_fun_a_bool_fun_a_b_tree_tree_fun_a_a_fun_a_b_tree_tree_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$ai (A_bool_fun_a_b_tree_tree_fun_a_a_fun_a_bool_fun_a_b_tree_tree_fun_a_a_fun_a_b_tree_tree_fun_fun_fun_fun_fun_fun_fun$ A_bool_fun$ )A_b_tree_tree_fun_a_a_fun_a_bool_fun_a_b_tree_tree_fun_a_a_fun_a_b_tree_tree_fun_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$aj (B_b_tree_fun_b_b_tree_fun_fun$ B_b_tree_fun$ )B_b_tree_fun$ )
(declare-fun fun_app$ak (B_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun$ B_b_tree_fun$ )B_b_fun_b_b_tree_fun_fun$ )
(declare-fun fun_app$al (B_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun$ B_bool_fun$ )B_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun$ )
(declare-fun fun_app$am (B_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun$ B_b_fun$ )B_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun$ )
(declare-fun fun_app$an (B_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun$ B_b_tree_fun$ )B_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$ao (B_bool_fun_b_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun_fun$ B_bool_fun$ )B_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$ap (A_a_tree_fun_a_b_tree_fun_fun$ A_a_tree_fun$ )A_b_tree_fun$ )
(declare-fun fun_app$aq (A_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun$ A_a_tree_fun$ )A_a_fun_a_a_tree_fun_fun$ )
(declare-fun fun_app$ar (A_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun$ A_bool_fun$ )A_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun$ )
(declare-fun fun_app$as (A_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun$ A_a_fun$ )A_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun$ )
(declare-fun fun_app$at (A_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun$ A_a_tree_fun$ )A_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$au (A_bool_fun_a_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun_fun$ A_bool_fun$ )A_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$av (A_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun$ A_b_tree_fun$ )A_a_fun_a_b_tree_fun_fun$ )
(declare-fun fun_app$aw (A_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun$ A_bool_fun$ )A_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun$ )
(declare-fun fun_app$ax (A_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun$ A_a_fun$ )A_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun$ )
(declare-fun fun_app$ay (A_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun$ A_b_tree_fun$ )A_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$az (A_bool_fun_a_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun_fun$ A_bool_fun$ )A_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun$ )
(declare-fun fun_app$ba (B_tree_b_tree_fun_b_tree_b_tree_fun_fun$ B_tree_b_tree_fun$ )B_tree_b_tree_fun$ )
(declare-fun map_tree$a (A_b_fun$ )A_tree_b_tree_fun$ )
(declare-fun map_tree$b (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun map_tree$c (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$d (B_tree_b_tree_fun$ )B_tree_tree_b_tree_tree_fun$ )
(declare-fun map_tree$e (A_b_tree_fun$ A_tree$ )B_tree_tree$ )
(declare-fun map_tree$f (B_b_tree_fun$ B_tree$ )B_tree_tree$ )
(declare-fun corec_tree$ (A_b_tree_fun$ )A_bool_fun_a_b_tree_tree_fun_a_a_fun_a_bool_fun_a_b_tree_tree_fun_a_a_fun_a_b_tree_tree_fun_fun_fun_fun_fun_fun_fun$ )
(declare-fun corec_tree$a (B_b_fun$ )B_bool_fun_b_b_tree_fun_b_b_fun_b_bool_fun_b_b_tree_fun_b_b_fun_b_b_tree_fun_fun_fun_fun_fun_fun_fun$ )
(declare-fun corec_tree$b (A_a_fun$ )A_bool_fun_a_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun_fun$ )
(declare-fun corec_tree$c (A_b_fun$ )A_bool_fun_a_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun_fun$ )
(declare-fun unfold_tree$ (A_a_fun$ )A_a_fun_a_a_fun_a_a_tree_fun_fun_fun$ )
(declare-fun unfold_tree$a (A_b_tree_fun$ )A_a_fun_a_a_fun_a_b_tree_tree_fun_fun_fun$ )
(declare-fun unfold_tree$b (B_b_fun$ )B_b_fun_b_b_fun_b_b_tree_fun_fun_fun$ )
(declare-fun unfold_tree$c (A_b_fun$ )A_a_fun_a_a_fun_a_b_tree_fun_fun_fun$ )
(assert (! (not (= (fun_app$ (map_tree$ g$ )(unf$ f$ ))(unf$ (fun_app$a (comp$ g$ )f$ )))):named a0 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_tree$ ))(= (fun_app$ (map_tree$ ?v0 )(fun_app$b (map_tree$a ?v1 )?v2 ))(fun_app$b (map_tree$a (fun_app$a (comp$ ?v0 )?v1 ))?v2 ))):named a1 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_tree$ ))(= (fun_app$ (map_tree$ ?v0 )(fun_app$ (map_tree$ ?v1 )?v2 ))(fun_app$ (map_tree$ (fun_app$c (comp$a ?v0 )?v1 ))?v2 ))):named a2 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_tree$ ))(= (fun_app$b (map_tree$a ?v0 )(map_tree$b ?v1 ?v2 ))(fun_app$ (map_tree$ (fun_app$d (comp$b ?v0 )?v1 ))?v2 ))):named a3 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_tree$ ))(= (fun_app$b (map_tree$a ?v0 )(map_tree$c ?v1 ?v2 ))(fun_app$b (map_tree$a (fun_app$e (comp$c ?v0 )?v1 ))?v2 ))):named a4 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 A_b_tree_fun$ )(?v2 A_tree$ ))(= (fun_app$f (map_tree$d ?v0 )(map_tree$e ?v1 ?v2 ))(map_tree$e (fun_app$g (comp$d ?v0 )?v1 )?v2 ))):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_tree$ ))(= (map_tree$c ?v0 (map_tree$c ?v1 ?v2 ))(map_tree$c (fun_app$h (comp$e ?v0 )?v1 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_tree$ ))(= (map_tree$c ?v0 (map_tree$b ?v1 ?v2 ))(map_tree$b (fun_app$i (comp$f ?v0 )?v1 )?v2 ))):named a7 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_tree$ ))(= (map_tree$b ?v0 (fun_app$ (map_tree$ ?v1 )?v2 ))(map_tree$b (fun_app$j (comp$g ?v0 )?v1 )?v2 ))):named a8 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_tree$ ))(= (map_tree$b ?v0 (fun_app$b (map_tree$a ?v1 )?v2 ))(map_tree$c (fun_app$k (comp$h ?v0 )?v1 )?v2 ))):named a9 ))
(assert (! (forall ((?v0 B_b_tree_fun$ )(?v1 A_b_fun$ )(?v2 A_tree$ ))(= (map_tree$f ?v0 (fun_app$b (map_tree$a ?v1 )?v2 ))(map_tree$e (fun_app$l (comp$i ?v0 )?v1 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 A_b_tree_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$m (fun_app$n (comp$j ?v0 )?v1 )?v2 )(fun_app$m ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$m (fun_app$n (comp$j ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_tree_a_fun$ )(?v2 B_tree$ ))(! (= (comp$k ?v0 ?v1 ?v2 )(fun_app$p ?v0 (fun_app$q ?v1 ?v2 ))):pattern ((comp$k ?v0 ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$r (fun_app$d (comp$b ?v0 )?v1 )?v2 )(fun_app$p ?v0 (fun_app$s ?v1 ?v2 ))):pattern ((fun_app$r (fun_app$d (comp$b ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$s (fun_app$i (comp$f ?v0 )?v1 )?v2 )(fun_app$o ?v0 (fun_app$s ?v1 ?v2 ))):pattern ((fun_app$s (fun_app$i (comp$f ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$o (fun_app$h (comp$e ?v0 )?v1 )?v2 )(fun_app$o ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$o (fun_app$h (comp$e ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$r (fun_app$c (comp$a ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$r (fun_app$c (comp$a ?v0 )?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 A_b_tree_fun$ )(?v2 A$ ))(! (= (fun_app$m (fun_app$g (comp$d ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$m ?v1 ?v2 ))):pattern ((fun_app$m (fun_app$g (comp$d ?v0 )?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$p (fun_app$e (comp$c ?v0 )?v1 )?v2 )(fun_app$p ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$p (fun_app$e (comp$c ?v0 )?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$p (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$p (fun_app$a (comp$ ?v0 )?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_b_tree_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (map_tree$e ?v0 (fun_app$t (fun_app$u (fun_app$v (unfold_tree$ ?v1 )?v2 )?v3 )?v4 ))(fun_app$w (fun_app$x (fun_app$y (unfold_tree$a (fun_app$n (comp$j ?v0 )?v1 ))?v2 )?v3 )?v4 ))):named a20 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 A_b_tree_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (fun_app$f (map_tree$d ?v0 )(fun_app$w (fun_app$x (fun_app$y (unfold_tree$a ?v1 )?v2 )?v3 )?v4 ))(fun_app$w (fun_app$x (fun_app$y (unfold_tree$a (fun_app$g (comp$d ?v0 )?v1 ))?v2 )?v3 )?v4 ))):named a21 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(= (fun_app$ (map_tree$ ?v0 )(fun_app$z (fun_app$aa (fun_app$ab (unfold_tree$b ?v1 )?v2 )?v3 )?v4 ))(fun_app$z (fun_app$aa (fun_app$ab (unfold_tree$b (fun_app$c (comp$a ?v0 )?v1 ))?v2 )?v3 )?v4 ))):named a22 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (fun_app$b (map_tree$a ?v0 )(fun_app$t (fun_app$u (fun_app$v (unfold_tree$ ?v1 )?v2 )?v3 )?v4 ))(fun_app$m (fun_app$n (fun_app$ac (unfold_tree$c (fun_app$e (comp$c ?v0 )?v1 ))?v2 )?v3 )?v4 ))):named a23 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (fun_app$ (map_tree$ ?v0 )(fun_app$m (fun_app$n (fun_app$ac (unfold_tree$c ?v1 )?v2 )?v3 )?v4 ))(fun_app$m (fun_app$n (fun_app$ac (unfold_tree$c (fun_app$a (comp$ ?v0 )?v1 ))?v2 )?v3 )?v4 ))):named a24 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 A_b_tree_fun$ )(?v2 A_bool_fun$ )(?v3 A_b_tree_tree_fun$ )(?v4 A_a_fun$ )(?v5 A_bool_fun$ )(?v6 A_b_tree_tree_fun$ )(?v7 A_a_fun$ ))(= (fun_app$ad (comp$l (map_tree$d ?v0 ))(fun_app$x (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tree$ ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$x (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tree$ (fun_app$g (comp$d ?v0 )?v1 ))?v2 )(fun_app$ad (comp$l (map_tree$d ?v0 ))?v3 ))?v4 )?v5 )(fun_app$ad (comp$l (map_tree$d ?v0 ))?v6 ))?v7 ))):named a25 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_bool_fun$ )(?v3 B_b_tree_fun$ )(?v4 B_b_fun$ )(?v5 B_bool_fun$ )(?v6 B_b_tree_fun$ )(?v7 B_b_fun$ ))(= (fun_app$aj (comp$m (map_tree$ ?v0 ))(fun_app$aa (fun_app$ak (fun_app$al (fun_app$am (fun_app$an (fun_app$ao (corec_tree$a ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$aa (fun_app$ak (fun_app$al (fun_app$am (fun_app$an (fun_app$ao (corec_tree$a (fun_app$c (comp$a ?v0 )?v1 ))?v2 )(fun_app$aj (comp$m (map_tree$ ?v0 ))?v3 ))?v4 )?v5 )(fun_app$aj (comp$m (map_tree$ ?v0 ))?v6 ))?v7 ))):named a26 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_bool_fun$ )(?v3 A_a_tree_fun$ )(?v4 A_a_fun$ )(?v5 A_bool_fun$ )(?v6 A_a_tree_fun$ )(?v7 A_a_fun$ ))(= (fun_app$ap (comp$n (map_tree$a ?v0 ))(fun_app$u (fun_app$aq (fun_app$ar (fun_app$as (fun_app$at (fun_app$au (corec_tree$b ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$n (fun_app$av (fun_app$aw (fun_app$ax (fun_app$ay (fun_app$az (corec_tree$c (fun_app$e (comp$c ?v0 )?v1 ))?v2 )(fun_app$ap (comp$n (map_tree$a ?v0 ))?v3 ))?v4 )?v5 )(fun_app$ap (comp$n (map_tree$a ?v0 ))?v6 ))?v7 ))):named a27 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_bool_fun$ )(?v3 A_b_tree_fun$ )(?v4 A_a_fun$ )(?v5 A_bool_fun$ )(?v6 A_b_tree_fun$ )(?v7 A_a_fun$ ))(= (fun_app$g (comp$d (map_tree$ ?v0 ))(fun_app$n (fun_app$av (fun_app$aw (fun_app$ax (fun_app$ay (fun_app$az (corec_tree$c ?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 ))(fun_app$n (fun_app$av (fun_app$aw (fun_app$ax (fun_app$ay (fun_app$az (corec_tree$c (fun_app$a (comp$ ?v0 )?v1 ))?v2 )(fun_app$g (comp$d (map_tree$ ?v0 ))?v3 ))?v4 )?v5 )(fun_app$g (comp$d (map_tree$ ?v0 ))?v6 ))?v7 ))):named a28 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 B_a_fun$ ))(= (fun_app$c (comp$a ?v0 )(fun_app$d (comp$b ?v1 )?v2 ))(fun_app$d (comp$b (fun_app$a (comp$ ?v0 )?v1 ))?v2 ))):named a29 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$c (comp$a ?v0 )(fun_app$c (comp$a ?v1 )?v2 ))(fun_app$c (comp$a (fun_app$c (comp$a ?v0 )?v1 ))?v2 ))):named a30 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 A_b_tree_fun$ )(?v2 A_a_fun$ ))(= (fun_app$g (comp$d ?v0 )(fun_app$n (comp$j ?v1 )?v2 ))(fun_app$n (comp$j (fun_app$g (comp$d ?v0 )?v1 ))?v2 ))):named a31 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 B_tree_b_tree_fun$ )(?v2 A_b_tree_fun$ ))(= (fun_app$g (comp$d ?v0 )(fun_app$g (comp$d ?v1 )?v2 ))(fun_app$g (comp$d (fun_app$ba (comp$o ?v0 )?v1 ))?v2 ))):named a32 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 A_b_fun$ ))(= (fun_app$e (comp$c ?v0 )(fun_app$k (comp$h ?v1 )?v2 ))(fun_app$a (comp$ (fun_app$d (comp$b ?v0 )?v1 ))?v2 ))):named a33 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(= (fun_app$e (comp$c ?v0 )(fun_app$h (comp$e ?v1 )?v2 ))(fun_app$e (comp$c (fun_app$e (comp$c ?v0 )?v1 ))?v2 ))):named a34 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ ))(= (fun_app$a (comp$ ?v0 )(fun_app$e (comp$c ?v1 )?v2 ))(fun_app$e (comp$c (fun_app$a (comp$ ?v0 )?v1 ))?v2 ))):named a35 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ ))(= (fun_app$a (comp$ ?v0 )(fun_app$a (comp$ ?v1 )?v2 ))(fun_app$a (comp$ (fun_app$c (comp$a ?v0 )?v1 ))?v2 ))):named a36 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 B_a_fun$ ))(= (fun_app$d (comp$b (fun_app$a (comp$ ?v0 )?v1 ))?v2 )(fun_app$c (comp$a ?v0 )(fun_app$d (comp$b ?v1 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 A_b_tree_fun$ )(?v2 A_a_fun$ ))(= (fun_app$n (comp$j (fun_app$g (comp$d ?v0 )?v1 ))?v2 )(fun_app$g (comp$d ?v0 )(fun_app$n (comp$j ?v1 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 A_b_fun$ ))(= (fun_app$a (comp$ (fun_app$d (comp$b ?v0 )?v1 ))?v2 )(fun_app$e (comp$c ?v0 )(fun_app$k (comp$h ?v1 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$c (comp$a (fun_app$c (comp$a ?v0 )?v1 ))?v2 )(fun_app$c (comp$a ?v0 )(fun_app$c (comp$a ?v1 )?v2 )))):named a40 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 B_tree_b_tree_fun$ )(?v2 A_b_tree_fun$ ))(= (fun_app$g (comp$d (fun_app$ba (comp$o ?v0 )?v1 ))?v2 )(fun_app$g (comp$d ?v0 )(fun_app$g (comp$d ?v1 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(= (fun_app$e (comp$c (fun_app$e (comp$c ?v0 )?v1 ))?v2 )(fun_app$e (comp$c ?v0 )(fun_app$h (comp$e ?v1 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ ))(= (fun_app$e (comp$c (fun_app$a (comp$ ?v0 )?v1 ))?v2 )(fun_app$a (comp$ ?v0 )(fun_app$e (comp$c ?v1 )?v2 )))):named a43 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ ))(= (fun_app$a (comp$ (fun_app$c (comp$a ?v0 )?v1 ))?v2 )(fun_app$a (comp$ ?v0 )(fun_app$a (comp$ ?v1 )?v2 )))):named a44 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$r (fun_app$c (comp$a ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$r (fun_app$c (comp$a ?v0 )?v1 )?v2 )))):named a45 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 A_b_tree_fun$ )(?v2 A$ ))(! (= (fun_app$m (fun_app$g (comp$d ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$m ?v1 ?v2 ))):pattern ((fun_app$m (fun_app$g (comp$d ?v0 )?v1 )?v2 )))):named a46 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$p (fun_app$e (comp$c ?v0 )?v1 )?v2 )(fun_app$p ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$p (fun_app$e (comp$c ?v0 )?v1 )?v2 )))):named a47 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$p (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$p (fun_app$a (comp$ ?v0 )?v1 )?v2 )))):named a48 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$e (comp$c ?v2 )?v3 ))(=> (forall ((?v4 A$ ))(= (fun_app$r ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$p ?v2 (fun_app$o ?v3 ?v4 ))))false ))false )):named a49 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$c (comp$a ?v0 )?v1 )(fun_app$c (comp$a ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$r ?v0 (fun_app$r ?v1 ?v4 ))(fun_app$r ?v2 (fun_app$r ?v3 ?v4 ))))false ))false )):named a50 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 A_b_tree_fun$ )(?v2 B_tree_b_tree_fun$ )(?v3 A_b_tree_fun$ ))(=> (and (= (fun_app$g (comp$d ?v0 )?v1 )(fun_app$g (comp$d ?v2 )?v3 ))(=> (forall ((?v4 A$ ))(= (fun_app$ ?v0 (fun_app$m ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$m ?v3 ?v4 ))))false ))false )):named a51 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ ))(=> (and (= (fun_app$e (comp$c ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(=> (forall ((?v4 A$ ))(= (fun_app$p ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$r ?v2 (fun_app$p ?v3 ?v4 ))))false ))false )):named a52 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ ))(=> (and (= (fun_app$e (comp$c ?v0 )?v1 )(fun_app$e (comp$c ?v2 )?v3 ))(=> (forall ((?v4 A$ ))(= (fun_app$p ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$p ?v2 (fun_app$o ?v3 ?v4 ))))false ))false )):named a53 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(=> (forall ((?v4 A$ ))(= (fun_app$r ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$r ?v2 (fun_app$p ?v3 ?v4 ))))false ))false )):named a54 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$e (comp$c ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$c (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$e (comp$c (fun_app$a (comp$ ?v4 )?v0 ))?v1 )(fun_app$a (comp$ ?v5 )?v3 )))):named a55 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ )(?v4 B_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$e (comp$c ?v2 )?v3 ))(= (fun_app$a (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$a (comp$ (fun_app$c (comp$a ?v4 )?v0 ))?v1 )(fun_app$e (comp$c ?v5 )?v3 )))):named a56 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$c (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$a (comp$ (fun_app$c (comp$a ?v4 )?v0 ))?v1 )(fun_app$a (comp$ ?v5 )?v3 )))):named a57 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 A_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$i (comp$f ?v0 )?v1 )(fun_app$j (comp$g ?v2 )?v3 ))(= (fun_app$d (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$d (comp$b (fun_app$e (comp$c ?v4 )?v0 ))?v1 )(fun_app$c (comp$a ?v5 )?v3 )))):named a58 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 B_a_fun$ )(?v3 A_b_fun$ )(?v4 A_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$h (comp$e ?v0 )?v1 )(fun_app$k (comp$h ?v2 )?v3 ))(= (fun_app$d (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$e (comp$c (fun_app$e (comp$c ?v4 )?v0 ))?v1 )(fun_app$a (comp$ ?v5 )?v3 )))):named a59 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$k (comp$h ?v0 )?v1 )(fun_app$h (comp$e ?v2 )?v3 ))(= (fun_app$e (comp$c ?v4 )?v2 )?v5 ))(= (fun_app$a (comp$ (fun_app$d (comp$b ?v4 )?v0 ))?v1 )(fun_app$e (comp$c ?v5 )?v3 )))):named a60 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 A_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$j (comp$g ?v0 )?v1 )(fun_app$i (comp$f ?v2 )?v3 ))(= (fun_app$e (comp$c ?v4 )?v2 )?v5 ))(= (fun_app$c (comp$a (fun_app$d (comp$b ?v4 )?v0 ))?v1 )(fun_app$d (comp$b ?v5 )?v3 )))):named a61 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$h (comp$e ?v0 )?v1 )(fun_app$h (comp$e ?v2 )?v3 ))(= (fun_app$e (comp$c ?v4 )?v2 )?v5 ))(= (fun_app$e (comp$c (fun_app$e (comp$c ?v4 )?v0 ))?v1 )(fun_app$e (comp$c ?v5 )?v3 )))):named a62 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$d (comp$b ?v0 )?v1 )(fun_app$c (comp$a ?v2 )?v3 ))(= (fun_app$c (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$d (comp$b (fun_app$a (comp$ ?v4 )?v0 ))?v1 )(fun_app$c (comp$a ?v5 )?v3 )))):named a63 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ )(?v3 B_a_fun$ )(?v4 B_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$c (comp$a ?v0 )?v1 )(fun_app$d (comp$b ?v2 )?v3 ))(= (fun_app$a (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$c (comp$a (fun_app$c (comp$a ?v4 )?v0 ))?v1 )(fun_app$d (comp$b ?v5 )?v3 )))):named a64 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 A_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$c (comp$a ?v0 )?v1 )(fun_app$c (comp$a ?v2 )?v3 ))(= (fun_app$a (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$a (comp$ ?v0 )(fun_app$a (comp$ ?v1 )?v4 ))(fun_app$a (comp$ ?v2 )?v5 )))):named a65 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 A_a_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$e (comp$c ?v3 )?v4 )?v5 ))(= (fun_app$a (comp$ ?v0 )(fun_app$e (comp$c ?v1 )?v4 ))(fun_app$a (comp$ ?v2 )?v5 )))):named a66 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 A_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$d (comp$b ?v0 )?v1 )(fun_app$c (comp$a ?v2 )?v3 ))(= (fun_app$a (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$e (comp$c ?v0 )(fun_app$k (comp$h ?v1 )?v4 ))(fun_app$a (comp$ ?v2 )?v5 )))):named a67 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 B_a_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$d (comp$b ?v3 )?v4 )?v5 ))(= (fun_app$c (comp$a ?v0 )(fun_app$d (comp$b ?v1 )?v4 ))(fun_app$c (comp$a ?v2 )?v5 )))):named a68 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ )(?v4 A_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$e (comp$c ?v2 )?v3 ))(= (fun_app$h (comp$e ?v3 )?v4 )?v5 ))(= (fun_app$a (comp$ ?v0 )(fun_app$e (comp$c ?v1 )?v4 ))(fun_app$e (comp$c ?v2 )?v5 )))):named a69 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ )(?v4 B_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$e (comp$c ?v2 )?v3 ))(= (fun_app$i (comp$f ?v3 )?v4 )?v5 ))(= (fun_app$c (comp$a ?v0 )(fun_app$d (comp$b ?v1 )?v4 ))(fun_app$d (comp$b ?v2 )?v5 )))):named a70 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ )(?v3 B_a_fun$ )(?v4 A_b_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$c (comp$a ?v0 )?v1 )(fun_app$d (comp$b ?v2 )?v3 ))(= (fun_app$k (comp$h ?v3 )?v4 )?v5 ))(= (fun_app$a (comp$ ?v0 )(fun_app$a (comp$ ?v1 )?v4 ))(fun_app$e (comp$c ?v2 )?v5 )))):named a71 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$c (comp$a ?v0 )?v1 )(fun_app$c (comp$a ?v2 )?v3 ))(= (fun_app$c (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$c (comp$a ?v0 )(fun_app$c (comp$a ?v1 )?v4 ))(fun_app$c (comp$a ?v2 )?v5 )))):named a72 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 B_a_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$e (comp$c ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$d (comp$b ?v3 )?v4 )?v5 ))(= (fun_app$d (comp$b ?v0 )(fun_app$i (comp$f ?v1 )?v4 ))(fun_app$c (comp$a ?v2 )?v5 )))):named a73 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 A_a_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$e (comp$c ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$e (comp$c ?v3 )?v4 )?v5 ))(= (fun_app$e (comp$c ?v0 )(fun_app$h (comp$e ?v1 )?v4 ))(fun_app$a (comp$ ?v2 )?v5 )))):named a74 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$e (comp$c ?v2 )?v3 ))(= (fun_app$r ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$p ?v2 (fun_app$o ?v3 ?v4 ))))):named a75 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$c (comp$a ?v0 )?v1 )(fun_app$c (comp$a ?v2 )?v3 ))(= (fun_app$r ?v0 (fun_app$r ?v1 ?v4 ))(fun_app$r ?v2 (fun_app$r ?v3 ?v4 ))))):named a76 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 A_b_tree_fun$ )(?v2 B_tree_b_tree_fun$ )(?v3 A_b_tree_fun$ )(?v4 A$ ))(=> (= (fun_app$g (comp$d ?v0 )?v1 )(fun_app$g (comp$d ?v2 )?v3 ))(= (fun_app$ ?v0 (fun_app$m ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$m ?v3 ?v4 ))))):named a77 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 A$ ))(=> (= (fun_app$e (comp$c ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$p ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$r ?v2 (fun_app$p ?v3 ?v4 ))))):named a78 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(=> (= (fun_app$e (comp$c ?v0 )?v1 )(fun_app$e (comp$c ?v2 )?v3 ))(= (fun_app$p ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$p ?v2 (fun_app$o ?v3 ?v4 ))))):named a79 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 A$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$r ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$r ?v2 (fun_app$p ?v3 ?v4 ))))):named a80 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$d (comp$b ?v0 )?v1 )?v2 )(= (fun_app$d (comp$b (fun_app$a (comp$ ?v3 )?v0 ))?v1 )(fun_app$c (comp$a ?v3 )?v2 )))):named a81 ))
(assert (! (forall ((?v0 A_b_tree_fun$ )(?v1 A_a_fun$ )(?v2 A_b_tree_fun$ )(?v3 B_tree_b_tree_fun$ ))(=> (= (fun_app$n (comp$j ?v0 )?v1 )?v2 )(= (fun_app$n (comp$j (fun_app$g (comp$d ?v3 )?v0 ))?v1 )(fun_app$g (comp$d ?v3 )?v2 )))):named a82 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 A_b_fun$ ))(=> (= (fun_app$k (comp$h ?v0 )?v1 )?v2 )(= (fun_app$a (comp$ (fun_app$d (comp$b ?v3 )?v0 ))?v1 )(fun_app$e (comp$c ?v3 )?v2 )))):named a83 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_b_fun$ ))(=> (= (fun_app$h (comp$e ?v0 )?v1 )?v2 )(= (fun_app$e (comp$c (fun_app$e (comp$c ?v3 )?v0 ))?v1 )(fun_app$e (comp$c ?v3 )?v2 )))):named a84 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$c (comp$a ?v0 )?v1 )?v2 )(= (fun_app$c (comp$a (fun_app$c (comp$a ?v3 )?v0 ))?v1 )(fun_app$c (comp$a ?v3 )?v2 )))):named a85 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 A_b_tree_fun$ )(?v2 A_b_tree_fun$ )(?v3 B_tree_b_tree_fun$ ))(=> (= (fun_app$g (comp$d ?v0 )?v1 )?v2 )(= (fun_app$g (comp$d (fun_app$ba (comp$o ?v3 )?v0 ))?v1 )(fun_app$g (comp$d ?v3 )?v2 )))):named a86 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_b_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$e (comp$c ?v0 )?v1 )?v2 )(= (fun_app$e (comp$c (fun_app$a (comp$ ?v3 )?v0 ))?v1 )(fun_app$a (comp$ ?v3 )?v2 )))):named a87 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )?v2 )(= (fun_app$a (comp$ (fun_app$c (comp$a ?v3 )?v0 ))?v1 )(fun_app$a (comp$ ?v3 )?v2 )))):named a88 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 B_tree_b_tree_fun$ )(?v2 B_tree_b_tree_fun$ )(?v3 A_b_tree_fun$ ))(=> (= (fun_app$ba (comp$o ?v0 )?v1 )?v2 )(= (fun_app$g (comp$d ?v0 )(fun_app$g (comp$d ?v1 )?v3 ))(fun_app$g (comp$d ?v2 )?v3 )))):named a89 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ ))(=> (= (fun_app$d (comp$b ?v0 )?v1 )?v2 )(= (fun_app$e (comp$c ?v0 )(fun_app$k (comp$h ?v1 )?v3 ))(fun_app$a (comp$ ?v2 )?v3 )))):named a90 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )?v2 )(= (fun_app$c (comp$a ?v0 )(fun_app$d (comp$b ?v1 )?v3 ))(fun_app$d (comp$b ?v2 )?v3 )))):named a91 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$c (comp$a ?v0 )?v1 )?v2 )(= (fun_app$c (comp$a ?v0 )(fun_app$c (comp$a ?v1 )?v3 ))(fun_app$c (comp$a ?v2 )?v3 )))):named a92 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 A_b_tree_fun$ )(?v2 A_b_tree_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$g (comp$d ?v0 )?v1 )?v2 )(= (fun_app$g (comp$d ?v0 )(fun_app$n (comp$j ?v1 )?v3 ))(fun_app$n (comp$j ?v2 )?v3 )))):named a93 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$e (comp$c ?v0 )?v1 )?v2 )(= (fun_app$e (comp$c ?v0 )(fun_app$h (comp$e ?v1 )?v3 ))(fun_app$e (comp$c ?v2 )?v3 )))):named a94 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ ))(=> (= (fun_app$c (comp$a ?v0 )?v1 )?v2 )(= (fun_app$a (comp$ ?v0 )(fun_app$a (comp$ ?v1 )?v3 ))(fun_app$a (comp$ ?v2 )?v3 )))):named a95 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )?v2 )(= (fun_app$a (comp$ ?v0 )(fun_app$e (comp$c ?v1 )?v3 ))(fun_app$e (comp$c ?v2 )?v3 )))):named a96 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_bool_fun$ )(?v2 A_b_tree_fun$ )(?v3 A_a_fun$ )(?v4 A_bool_fun$ )(?v5 A_b_tree_fun$ )(?v6 A_a_fun$ )(?v7 A$ ))(! (= (fun_app$m (fun_app$n (fun_app$av (fun_app$aw (fun_app$ax (fun_app$ay (fun_app$az (corec_tree$c ?v0 )?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 )(fun_app$m (fun_app$n (fun_app$av (fun_app$aw (fun_app$ax (fun_app$ay (fun_app$az (corec_tree$c ?v0 )?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 )):pattern ((fun_app$m (fun_app$n (fun_app$av (fun_app$aw (fun_app$ax (fun_app$ay (fun_app$az (corec_tree$c ?v0 )?v1 )?v2 )?v3 )?v4 )?v5 )?v6 )?v7 )))):named a97 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B$ ))(=> (= (fun_app$c (comp$a ?v0 )?v1 )?v2 )(= (fun_app$r ?v0 (fun_app$r ?v1 ?v3 ))(fun_app$r ?v2 ?v3 )))):named a98 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 A_b_tree_fun$ )(?v2 A_b_tree_fun$ )(?v3 A$ ))(=> (= (fun_app$g (comp$d ?v0 )?v1 )?v2 )(= (fun_app$ ?v0 (fun_app$m ?v1 ?v3 ))(fun_app$m ?v2 ?v3 )))):named a99 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_b_fun$ )(?v3 A$ ))(=> (= (fun_app$e (comp$c ?v0 )?v1 )?v2 )(= (fun_app$p ?v0 (fun_app$o ?v1 ?v3 ))(fun_app$p ?v2 ?v3 )))):named a100 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 A$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )?v2 )(= (fun_app$r ?v0 (fun_app$p ?v1 ?v3 ))(fun_app$p ?v2 ?v3 )))):named a101 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ )(?v5 B$ ))(=> (= (fun_app$r ?v0 (fun_app$p ?v1 ?v2 ))(fun_app$r ?v3 (fun_app$r ?v4 ?v5 )))(= (fun_app$p (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$r (fun_app$c (comp$a ?v3 )?v4 )?v5 )))):named a102 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A$ )(?v3 A_b_fun$ )(?v4 A_a_fun$ )(?v5 A$ ))(=> (= (fun_app$r ?v0 (fun_app$p ?v1 ?v2 ))(fun_app$p ?v3 (fun_app$o ?v4 ?v5 )))(= (fun_app$p (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$p (fun_app$e (comp$c ?v3 )?v4 )?v5 )))):named a103 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B_b_fun$ )(?v4 A_b_fun$ )(?v5 A$ ))(=> (= (fun_app$r ?v0 (fun_app$r ?v1 ?v2 ))(fun_app$r ?v3 (fun_app$p ?v4 ?v5 )))(= (fun_app$r (fun_app$c (comp$a ?v0 )?v1 )?v2 )(fun_app$p (fun_app$a (comp$ ?v3 )?v4 )?v5 )))):named a104 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ )(?v5 B$ ))(=> (= (fun_app$r ?v0 (fun_app$r ?v1 ?v2 ))(fun_app$r ?v3 (fun_app$r ?v4 ?v5 )))(= (fun_app$r (fun_app$c (comp$a ?v0 )?v1 )?v2 )(fun_app$r (fun_app$c (comp$a ?v3 )?v4 )?v5 )))):named a105 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 A_b_fun$ )(?v4 A_a_fun$ )(?v5 A$ ))(=> (= (fun_app$r ?v0 (fun_app$r ?v1 ?v2 ))(fun_app$p ?v3 (fun_app$o ?v4 ?v5 )))(= (fun_app$r (fun_app$c (comp$a ?v0 )?v1 )?v2 )(fun_app$p (fun_app$e (comp$c ?v3 )?v4 )?v5 )))):named a106 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 A_b_tree_fun$ )(?v2 A$ )(?v3 B_tree_b_tree_fun$ )(?v4 A_b_tree_fun$ )(?v5 A$ ))(=> (= (fun_app$ ?v0 (fun_app$m ?v1 ?v2 ))(fun_app$ ?v3 (fun_app$m ?v4 ?v5 )))(= (fun_app$m (fun_app$g (comp$d ?v0 )?v1 )?v2 )(fun_app$m (fun_app$g (comp$d ?v3 )?v4 )?v5 )))):named a107 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A$ )(?v3 B_b_fun$ )(?v4 A_b_fun$ )(?v5 A$ ))(=> (= (fun_app$p ?v0 (fun_app$o ?v1 ?v2 ))(fun_app$r ?v3 (fun_app$p ?v4 ?v5 )))(= (fun_app$p (fun_app$e (comp$c ?v0 )?v1 )?v2 )(fun_app$p (fun_app$a (comp$ ?v3 )?v4 )?v5 )))):named a108 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ )(?v5 B$ ))(=> (= (fun_app$p ?v0 (fun_app$o ?v1 ?v2 ))(fun_app$r ?v3 (fun_app$r ?v4 ?v5 )))(= (fun_app$p (fun_app$e (comp$c ?v0 )?v1 )?v2 )(fun_app$r (fun_app$c (comp$a ?v3 )?v4 )?v5 )))):named a109 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A$ )(?v3 A_b_fun$ )(?v4 A_a_fun$ )(?v5 A$ ))(=> (= (fun_app$p ?v0 (fun_app$o ?v1 ?v2 ))(fun_app$p ?v3 (fun_app$o ?v4 ?v5 )))(= (fun_app$p (fun_app$e (comp$c ?v0 )?v1 )?v2 )(fun_app$p (fun_app$e (comp$c ?v3 )?v4 )?v5 )))):named a110 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A$ )(?v3 B_b_fun$ )(?v4 A_b_fun$ )(?v5 A$ ))(=> (= (fun_app$r ?v0 (fun_app$p ?v1 ?v2 ))(fun_app$r ?v3 (fun_app$p ?v4 ?v5 )))(= (fun_app$p (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$p (fun_app$a (comp$ ?v3 )?v4 )?v5 )))):named a111 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A$ )(?v3 A_b_fun$ )(?v4 A_a_fun$ ))(=> (= (fun_app$r ?v0 (fun_app$p ?v1 ?v2 ))(fun_app$p ?v3 (fun_app$o ?v4 ?v2 )))(= (fun_app$p (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$p (fun_app$e (comp$c ?v3 )?v4 )?v2 )))):named a112 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ ))(=> (= (fun_app$r ?v0 (fun_app$r ?v1 ?v2 ))(fun_app$r ?v3 (fun_app$r ?v4 ?v2 )))(= (fun_app$r (fun_app$c (comp$a ?v0 )?v1 )?v2 )(fun_app$r (fun_app$c (comp$a ?v3 )?v4 )?v2 )))):named a113 ))
(assert (! (forall ((?v0 B_tree_b_tree_fun$ )(?v1 A_b_tree_fun$ )(?v2 A$ )(?v3 B_tree_b_tree_fun$ )(?v4 A_b_tree_fun$ ))(=> (= (fun_app$ ?v0 (fun_app$m ?v1 ?v2 ))(fun_app$ ?v3 (fun_app$m ?v4 ?v2 )))(= (fun_app$m (fun_app$g (comp$d ?v0 )?v1 )?v2 )(fun_app$m (fun_app$g (comp$d ?v3 )?v4 )?v2 )))):named a114 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A$ )(?v3 B_b_fun$ )(?v4 A_b_fun$ ))(=> (= (fun_app$p ?v0 (fun_app$o ?v1 ?v2 ))(fun_app$r ?v3 (fun_app$p ?v4 ?v2 )))(= (fun_app$p (fun_app$e (comp$c ?v0 )?v1 )?v2 )(fun_app$p (fun_app$a (comp$ ?v3 )?v4 )?v2 )))):named a115 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A$ )(?v3 A_b_fun$ )(?v4 A_a_fun$ ))(=> (= (fun_app$p ?v0 (fun_app$o ?v1 ?v2 ))(fun_app$p ?v3 (fun_app$o ?v4 ?v2 )))(= (fun_app$p (fun_app$e (comp$c ?v0 )?v1 )?v2 )(fun_app$p (fun_app$e (comp$c ?v3 )?v4 )?v2 )))):named a116 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A$ )(?v3 B_b_fun$ )(?v4 A_b_fun$ ))(=> (= (fun_app$r ?v0 (fun_app$p ?v1 ?v2 ))(fun_app$r ?v3 (fun_app$p ?v4 ?v2 )))(= (fun_app$p (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$p (fun_app$a (comp$ ?v3 )?v4 )?v2 )))):named a117 ))
(check-sat )
;(get-unsat-core )
