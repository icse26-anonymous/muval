;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_stream$ 0)
(declare-sort Nat_tree$ 0)
(declare-fun shd$ (Nat_stream$)Nat$)
(declare-fun stl$ (Nat_stream$)Nat_stream$)
(declare-fun sCons$ (Nat$ Nat_stream$ )Nat_stream$)
(declare-fun root$ (Nat_tree$)Nat$)
(declare-fun left$ (Nat_tree$)Nat_tree$)
(declare-fun right$ (Nat_tree$)Nat_tree$)
(declare-fun node$ (Nat$ Nat_tree$ Nat_tree$ )Nat_tree$)
(declare-sort Num$ 0)
(declare-fun one$ ()Num$)
(declare-fun select$ (Num$)Num$)
(declare-fun bit0$ (Num$ )Num$)
(declare-fun selecta$ (Num$)Num$)
(declare-fun bit1$ (Num$ )Num$)
(declare-fun den$ ()Nat_tree$ )
(declare-fun mod$ (Nat_stream$ Nat_stream$ )Nat_stream$ )
(declare-fun num$ ()Nat_tree$ )
(declare-fun mod$a (Nat$ Nat$ )Nat$ )
(declare-fun mod$b (Int Int )Int )
(declare-fun one$a ()Nat$ )
(declare-fun one$b ()Nat_stream$ )
(declare-fun plus$ (Nat_stream$ Nat_stream$ )Nat_stream$ )
(declare-fun minus$ (Nat_stream$ Nat_stream$ )Nat_stream$ )
(declare-fun plus$a (Nat$ Nat$ )Nat$ )
(declare-fun plus$b (Num$ Num$ )Num$ )
(declare-fun times$ (Nat_stream$ Nat_stream$ )Nat_stream$ )
(declare-fun stream$ (Nat_tree$ )Nat_stream$ )
(declare-fun times$a (Nat$ Nat$ )Nat$ )
(declare-fun times$b (Int Int )Int )
(declare-fun numeral$ (Num$ )Nat_stream$ )
(declare-fun numeral$a (Num$ )Nat$ )
(declare-fun numeral$b (Num$ )Int )
(assert (! (not (= (stream$ den$ )(sCons$ one$a (minus$ (plus$ (stream$ num$ )(stream$ den$ ))(times$ (numeral$ (bit0$ one$ ))(mod$ (stream$ num$ )(stream$ den$ ))))))):named a0 ))
(assert (! (= (stream$ num$ )(sCons$ one$a (stream$ den$ ))):named a1 ))
(assert (! (= (mod$a one$a (numeral$a (bit0$ one$ )))one$a ):named a2 ))
(assert (! (= (mod$b 1 2 )1 ):named a3 ))
(assert (! (= (plus$a one$a one$a )(numeral$a (bit0$ one$ ))):named a4 ))
(assert (! (= (plus$ one$b one$b )(numeral$ (bit0$ one$ ))):named a5 ))
(assert (! (= (+ 1 1 )2 ):named a6 ))
(assert (! (forall ((?v0 Num$ ))(= (plus$a (numeral$a ?v0 )one$a )(numeral$a (plus$b ?v0 one$ )))):named a7 ))
(assert (! (forall ((?v0 Num$ ))(= (plus$ (numeral$ ?v0 )one$b )(numeral$ (plus$b ?v0 one$ )))):named a8 ))
(assert (! (forall ((?v0 Num$ ))(= (+ (numeral$b ?v0 )1 )(numeral$b (plus$b ?v0 one$ )))):named a9 ))
(assert (! (forall ((?v0 Num$ ))(= (plus$a one$a (numeral$a ?v0 ))(numeral$a (plus$b one$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Num$ ))(= (plus$ one$b (numeral$ ?v0 ))(numeral$ (plus$b one$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Num$ ))(= (+ 1 (numeral$b ?v0 ))(numeral$b (plus$b one$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Num$ ))(= (= (numeral$a ?v0 )one$a )(= ?v0 one$ ))):named a13 ))
(assert (! (forall ((?v0 Num$ ))(= (= (numeral$ ?v0 )one$b )(= ?v0 one$ ))):named a14 ))
(assert (! (forall ((?v0 Num$ ))(= (= (numeral$b ?v0 )1 )(= ?v0 one$ ))):named a15 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$a (numeral$a ?v0 ))(= one$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$b (numeral$ ?v0 ))(= one$ ?v0 ))):named a17 ))
(assert (! (forall ((?v0 Num$ ))(= (= 1 (numeral$b ?v0 ))(= one$ ?v0 ))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (mod$a (plus$a (times$a ?v0 ?v1 )?v2 )?v0 )(mod$a ?v2 ?v0 ))):named a19 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (mod$b (+ (times$b ?v0 ?v1 )?v2 )?v0 )(mod$b ?v2 ?v0 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (mod$a (plus$a (times$a ?v0 ?v1 )?v2 )?v1 )(mod$a ?v2 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (mod$b (+ (times$b ?v0 ?v1 )?v2 )?v1 )(mod$b ?v2 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (mod$a (plus$a ?v0 (times$a ?v1 ?v2 ))?v1 )(mod$a ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (mod$b (+ ?v0 (times$b ?v1 ?v2 ))?v1 )(mod$b ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (mod$a (plus$a ?v0 (times$a ?v1 ?v2 ))?v2 )(mod$a ?v0 ?v2 ))):named a25 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (mod$b (+ ?v0 (times$b ?v1 ?v2 ))?v2 )(mod$b ?v0 ?v2 ))):named a26 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Num$ ))(= (times$b (- ?v0 ?v1 )(numeral$b ?v2 ))(- (times$b ?v0 (numeral$b ?v2 ))(times$b ?v1 (numeral$b ?v2 ))))):named a27 ))
(assert (! (forall ((?v0 Num$ )(?v1 Int )(?v2 Int ))(= (times$b (numeral$b ?v0 )(- ?v1 ?v2 ))(- (times$b (numeral$b ?v0 )?v1 )(times$b (numeral$b ?v0 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$a ?v0 )(numeral$a ?v1 ))(= ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$b ?v0 )(numeral$b ?v1 ))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 Num$ ))(= (mod$b 1 (numeral$b (bit0$ ?v0 )))1 )):named a32 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a33 ))
(check-sat )
;(get-unsat-core )
