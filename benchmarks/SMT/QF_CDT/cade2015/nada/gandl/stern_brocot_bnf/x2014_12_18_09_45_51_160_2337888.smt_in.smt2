;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun$ 0 )
(declare-sort B_a_fun_b_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort A_tree_a_tree_fun$ 0 )
(declare-sort B_tree_b_tree_fun$ 0 )
(declare-sort A_a_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_b_a_fun_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort B_a_a_fun_a_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_a_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_a_fun_fun$ 0 )
(declare-sort B_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort A_a_fun_b_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_tree_b_a_fun_tree_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_b_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun_b_b_b_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$ 0 )
(declare-sort A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$ 0 )
(declare-sort A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$ 0 )
(declare-sort B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-sort Dir$ 0)
(declare-sort Dir_list$ 0)
(declare-fun l$ ()Dir$)
(declare-fun r$ ()Dir$)
(declare-fun nil$ ()Dir_list$)
(declare-fun hd$ (Dir_list$)Dir$)
(declare-fun tl$ (Dir_list$)Dir_list$)
(declare-fun cons$ (Dir$ Dir_list$ )Dir_list$)
(declare-sort B_a_fun_tree$ 0)
(declare-sort B_tree$ 0)
(declare-sort B_b_a_fun_fun_tree$ 0)
(declare-sort B_a_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_tree$ 0)
(declare-sort B_b_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_tree$ 0)
(declare-sort B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort B_a_b_a_fun_fun_fun_tree$ 0)
(declare-sort A_b_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort B_b_a_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ 0)
(declare-sort B_b_b_fun_fun_tree$ 0)
(declare-sort B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ 0)
(declare-sort A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort A_a_b_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_b_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_b_fun_fun_tree$ 0)
(declare-sort B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ 0)
(declare-sort A_b_fun_tree$ 0)
(declare-sort B_b_fun_b_b_fun_fun_tree$ 0)
(declare-sort B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ 0)
(declare-sort A_b_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_a_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_a_fun_tree$ 0)
(declare-sort B_a_a_fun_a_fun_fun_tree$ 0)
(declare-sort B_a_a_fun_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_fun_tree$ 0)
(declare-sort B_b_fun_b_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort A_a_fun_b_a_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_a_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_fun_tree$ 0)
(declare-fun select$ (B_a_fun_tree$)B_a_fun$)
(declare-fun selecta$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun selectb$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun node$a (B_a_fun$ B_a_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$)
(declare-fun root$a (B_tree$)B$)
(declare-fun left$a (B_tree$)B_tree$)
(declare-fun right$a (B_tree$)B_tree$)
(declare-fun node$b (B$ B_tree$ B_tree$ )B_tree$)
(declare-fun selectc$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun$)
(declare-fun selectd$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun_tree$)
(declare-fun selecte$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun_tree$)
(declare-fun node$c (B_b_a_fun_fun$ B_b_a_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$)
(declare-fun selectf$ (B_a_a_fun_fun_tree$)B_a_a_fun_fun$)
(declare-fun selectg$ (B_a_a_fun_fun_tree$)B_a_a_fun_fun_tree$)
(declare-fun selecth$ (B_a_a_fun_fun_tree$)B_a_a_fun_fun_tree$)
(declare-fun node$d (B_a_a_fun_fun$ B_a_a_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_a_fun_fun_tree$)
(declare-fun selecti$ (A_a_fun_tree$)A_a_fun$)
(declare-fun selectj$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun selectk$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun node$e (A_a_fun$ A_a_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$)
(declare-fun selectl$ (B_b_fun_tree$)B_b_fun$)
(declare-fun selectm$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun selectn$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun node$f (B_b_fun$ B_b_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$)
(declare-fun selecto$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun$)
(declare-fun selectp$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun_tree$)
(declare-fun selectq$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun_tree$)
(declare-fun node$g (A_b_a_fun_fun$ A_b_a_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$)
(declare-fun selectr$ (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)B_a_a_fun_fun_a_b_a_fun_fun_fun$)
(declare-fun selects$ (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun selectt$ (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun node$h (B_a_a_fun_fun_a_b_a_fun_fun_fun$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ )B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun selectu$ (B_b_b_a_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun$)
(declare-fun selectv$ (B_b_b_a_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_tree$)
(declare-fun selectw$ (B_b_b_a_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_tree$)
(declare-fun node$i (B_b_b_a_fun_fun_fun$ B_b_b_a_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$ )B_b_b_a_fun_fun_fun_tree$)
(declare-fun selectx$ (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$)
(declare-fun selecty$ (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selectz$ (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$j (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ )B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecua$ (B_a_b_a_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun$)
(declare-fun selecub$ (B_a_b_a_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_tree$)
(declare-fun selecuc$ (B_a_b_a_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_tree$)
(declare-fun node$k (B_a_b_a_fun_fun_fun$ B_a_b_a_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$ )B_a_b_a_fun_fun_fun_tree$)
(declare-fun selecud$ (A_b_b_a_fun_fun_fun_tree$)A_b_b_a_fun_fun_fun$)
(declare-fun selecue$ (A_b_b_a_fun_fun_fun_tree$)A_b_b_a_fun_fun_fun_tree$)
(declare-fun selecuf$ (A_b_b_a_fun_fun_fun_tree$)A_b_b_a_fun_fun_fun_tree$)
(declare-fun node$l (A_b_b_a_fun_fun_fun$ A_b_b_a_fun_fun_fun_tree$ A_b_b_a_fun_fun_fun_tree$ )A_b_b_a_fun_fun_fun_tree$)
(declare-fun selecug$ (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$)
(declare-fun selecuh$ (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecui$ (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$m (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ )B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecuj$ (B_b_a_a_fun_fun_fun_tree$)B_b_a_a_fun_fun_fun$)
(declare-fun selecuk$ (B_b_a_a_fun_fun_fun_tree$)B_b_a_a_fun_fun_fun_tree$)
(declare-fun selecul$ (B_b_a_a_fun_fun_fun_tree$)B_b_a_a_fun_fun_fun_tree$)
(declare-fun node$n (B_b_a_a_fun_fun_fun$ B_b_a_a_fun_fun_fun_tree$ B_b_a_a_fun_fun_fun_tree$ )B_b_a_a_fun_fun_fun_tree$)
(declare-fun selecum$ (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$)
(declare-fun selecun$ (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)
(declare-fun selecuo$ (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)
(declare-fun node$o (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ )B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)
(declare-fun selecup$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun$)
(declare-fun selecuq$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun_tree$)
(declare-fun selecur$ (B_b_b_fun_fun_tree$)B_b_b_fun_fun_tree$)
(declare-fun node$p (B_b_b_fun_fun$ B_b_b_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_b_fun_fun_tree$)
(declare-fun selecus$ (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)B_b_b_fun_fun_b_b_b_fun_fun_fun$)
(declare-fun selecut$ (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)
(declare-fun selecuu$ (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)
(declare-fun node$q (B_b_b_fun_fun_b_b_b_fun_fun_fun$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ )B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)
(declare-fun selecuv$ (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$)
(declare-fun selecuw$ (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecux$ (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$r (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ )A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecuy$ (A_a_b_a_fun_fun_fun_tree$)A_a_b_a_fun_fun_fun$)
(declare-fun selecuz$ (A_a_b_a_fun_fun_fun_tree$)A_a_b_a_fun_fun_fun_tree$)
(declare-fun selecva$ (A_a_b_a_fun_fun_fun_tree$)A_a_b_a_fun_fun_fun_tree$)
(declare-fun node$s (A_a_b_a_fun_fun_fun$ A_a_b_a_fun_fun_fun_tree$ A_a_b_a_fun_fun_fun_tree$ )A_a_b_a_fun_fun_fun_tree$)
(declare-fun selecvb$ (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$)
(declare-fun selecvc$ (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecvd$ (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$t (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ )A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecve$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun$)
(declare-fun selecvf$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun selecvg$ (A_a_a_fun_fun_tree$)A_a_a_fun_fun_tree$)
(declare-fun node$u (A_a_a_fun_fun$ A_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$)
(declare-fun selecvh$ (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)A_a_a_fun_fun_a_a_a_fun_fun_fun$)
(declare-fun selecvi$ (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun selecvj$ (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun node$v (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ )A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun selecvk$ (A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)A_b_a_fun_fun_b_a_a_fun_fun_fun$)
(declare-fun selecvl$ (A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun selecvm$ (A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun node$w (A_b_a_fun_fun_b_a_a_fun_fun_fun$ A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ )A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun selecvn$ (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)B_b_a_fun_fun_b_b_a_fun_fun_fun$)
(declare-fun selecvo$ (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun selecvp$ (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun node$x (B_b_a_fun_fun_b_b_a_fun_fun_fun$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ )B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun selecvq$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun$)
(declare-fun selecvr$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun_tree$)
(declare-fun selecvs$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun_tree$)
(declare-fun node$y (B_a_fun_b_a_fun_fun$ B_a_fun_b_a_fun_fun_tree$ B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$)
(declare-fun selecvt$ (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$)
(declare-fun selecvu$ (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecvv$ (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$z (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecvw$ (B_b_fun_b_a_fun_fun_tree$)B_b_fun_b_a_fun_fun$)
(declare-fun selecvx$ (B_b_fun_b_a_fun_fun_tree$)B_b_fun_b_a_fun_fun_tree$)
(declare-fun selecvy$ (B_b_fun_b_a_fun_fun_tree$)B_b_fun_b_a_fun_fun_tree$)
(declare-fun node$aa (B_b_fun_b_a_fun_fun$ B_b_fun_b_a_fun_fun_tree$ B_b_fun_b_a_fun_fun_tree$ )B_b_fun_b_a_fun_fun_tree$)
(declare-fun selecvz$ (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$)
(declare-fun selecwa$ (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecwb$ (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$ab (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecwc$ (B_a_b_fun_fun_tree$)B_a_b_fun_fun$)
(declare-fun selecwd$ (B_a_b_fun_fun_tree$)B_a_b_fun_fun_tree$)
(declare-fun selecwe$ (B_a_b_fun_fun_tree$)B_a_b_fun_fun_tree$)
(declare-fun node$ac (B_a_b_fun_fun$ B_a_b_fun_fun_tree$ B_a_b_fun_fun_tree$ )B_a_b_fun_fun_tree$)
(declare-fun selecwf$ (B_a_fun_b_b_fun_fun_tree$)B_a_fun_b_b_fun_fun$)
(declare-fun selecwg$ (B_a_fun_b_b_fun_fun_tree$)B_a_fun_b_b_fun_fun_tree$)
(declare-fun selecwh$ (B_a_fun_b_b_fun_fun_tree$)B_a_fun_b_b_fun_fun_tree$)
(declare-fun node$ad (B_a_fun_b_b_fun_fun$ B_a_fun_b_b_fun_fun_tree$ B_a_fun_b_b_fun_fun_tree$ )B_a_fun_b_b_fun_fun_tree$)
(declare-fun selecwi$ (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$)
(declare-fun selecwj$ (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecwk$ (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun node$ae (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ )B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecwl$ (A_b_fun_tree$)A_b_fun$)
(declare-fun selecwm$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun selecwn$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun node$af (A_b_fun$ A_b_fun_tree$ A_b_fun_tree$ )A_b_fun_tree$)
(declare-fun selecwo$ (B_b_fun_b_b_fun_fun_tree$)B_b_fun_b_b_fun_fun$)
(declare-fun selecwp$ (B_b_fun_b_b_fun_fun_tree$)B_b_fun_b_b_fun_fun_tree$)
(declare-fun selecwq$ (B_b_fun_b_b_fun_fun_tree$)B_b_fun_b_b_fun_fun_tree$)
(declare-fun node$ag (B_b_fun_b_b_fun_fun$ B_b_fun_b_b_fun_fun_tree$ B_b_fun_b_b_fun_fun_tree$ )B_b_fun_b_b_fun_fun_tree$)
(declare-fun selecwr$ (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$)
(declare-fun selecws$ (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecwt$ (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun node$ah (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ )B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecwu$ (A_b_fun_a_a_fun_fun_tree$)A_b_fun_a_a_fun_fun$)
(declare-fun selecwv$ (A_b_fun_a_a_fun_fun_tree$)A_b_fun_a_a_fun_fun_tree$)
(declare-fun selecww$ (A_b_fun_a_a_fun_fun_tree$)A_b_fun_a_a_fun_fun_tree$)
(declare-fun node$ai (A_b_fun_a_a_fun_fun$ A_b_fun_a_a_fun_fun_tree$ A_b_fun_a_a_fun_fun_tree$ )A_b_fun_a_a_fun_fun_tree$)
(declare-fun selecwx$ (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$)
(declare-fun selecwy$ (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecwz$ (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$aj (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ )A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecxa$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun$)
(declare-fun selecxb$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun_tree$)
(declare-fun selecxc$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun_tree$)
(declare-fun node$ak (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$)
(declare-fun selecxd$ (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun selecxe$ (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecxf$ (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$al (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ )A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecxg$ (B_b_a_fun_a_fun_fun_tree$)B_b_a_fun_a_fun_fun$)
(declare-fun selecxh$ (B_b_a_fun_a_fun_fun_tree$)B_b_a_fun_a_fun_fun_tree$)
(declare-fun selecxi$ (B_b_a_fun_a_fun_fun_tree$)B_b_a_fun_a_fun_fun_tree$)
(declare-fun node$am (B_b_a_fun_a_fun_fun$ B_b_a_fun_a_fun_fun_tree$ B_b_a_fun_a_fun_fun_tree$ )B_b_a_fun_a_fun_fun_tree$)
(declare-fun selecxj$ (B_b_a_fun_fun_b_a_fun_fun_tree$)B_b_a_fun_fun_b_a_fun_fun$)
(declare-fun selecxk$ (B_b_a_fun_fun_b_a_fun_fun_tree$)B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun selecxl$ (B_b_a_fun_fun_b_a_fun_fun_tree$)B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun node$an (B_b_a_fun_fun_b_a_fun_fun$ B_b_a_fun_fun_b_a_fun_fun_tree$ B_b_a_fun_fun_b_a_fun_fun_tree$ )B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun selecxm$ (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$)
(declare-fun selecxn$ (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecxo$ (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$ao (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ )B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecxp$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun$)
(declare-fun selecxq$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun_tree$)
(declare-fun selecxr$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun_tree$)
(declare-fun node$ap (B_a_fun_a_fun$ B_a_fun_a_fun_tree$ B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$)
(declare-fun selecxs$ (B_a_a_fun_a_fun_fun_tree$)B_a_a_fun_a_fun_fun$)
(declare-fun selecxt$ (B_a_a_fun_a_fun_fun_tree$)B_a_a_fun_a_fun_fun_tree$)
(declare-fun selecxu$ (B_a_a_fun_a_fun_fun_tree$)B_a_a_fun_a_fun_fun_tree$)
(declare-fun node$aq (B_a_a_fun_a_fun_fun$ B_a_a_fun_a_fun_fun_tree$ B_a_a_fun_a_fun_fun_tree$ )B_a_a_fun_a_fun_fun_tree$)
(declare-fun selecxv$ (B_a_a_fun_fun_b_a_fun_fun_tree$)B_a_a_fun_fun_b_a_fun_fun$)
(declare-fun selecxw$ (B_a_a_fun_fun_b_a_fun_fun_tree$)B_a_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun selecxx$ (B_a_a_fun_fun_b_a_fun_fun_tree$)B_a_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun node$ar (B_a_a_fun_fun_b_a_fun_fun$ B_a_a_fun_fun_b_a_fun_fun_tree$ B_a_a_fun_fun_b_a_fun_fun_tree$ )B_a_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun selecxy$ (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$)
(declare-fun selecxz$ (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecya$ (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$as (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ )B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecyb$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun$)
(declare-fun selecyc$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun_tree$)
(declare-fun selecyd$ (A_a_fun_a_fun_tree$)A_a_fun_a_fun_tree$)
(declare-fun node$at (A_a_fun_a_fun$ A_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$)
(declare-fun selecye$ (B_b_fun_b_b_a_fun_fun_fun_tree$)B_b_fun_b_b_a_fun_fun_fun$)
(declare-fun selecyf$ (B_b_fun_b_b_a_fun_fun_fun_tree$)B_b_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun selecyg$ (B_b_fun_b_b_a_fun_fun_fun_tree$)B_b_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun node$au (B_b_fun_b_b_a_fun_fun_fun$ B_b_fun_b_b_a_fun_fun_fun_tree$ B_b_fun_b_b_a_fun_fun_fun_tree$ )B_b_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun selecyh$ (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$)
(declare-fun selecyi$ (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecyj$ (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$av (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ )B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecyk$ (B_a_fun_b_b_a_fun_fun_fun_tree$)B_a_fun_b_b_a_fun_fun_fun$)
(declare-fun selecyl$ (B_a_fun_b_b_a_fun_fun_fun_tree$)B_a_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun selecym$ (B_a_fun_b_b_a_fun_fun_fun_tree$)B_a_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun node$aw (B_a_fun_b_b_a_fun_fun_fun$ B_a_fun_b_b_a_fun_fun_fun_tree$ B_a_fun_b_b_a_fun_fun_fun_tree$ )B_a_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun selecyn$ (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$)
(declare-fun selecyo$ (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecyp$ (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$ax (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ )B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecyq$ (A_a_fun_b_a_a_fun_fun_fun_tree$)A_a_fun_b_a_a_fun_fun_fun$)
(declare-fun selecyr$ (A_a_fun_b_a_a_fun_fun_fun_tree$)A_a_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun selecys$ (A_a_fun_b_a_a_fun_fun_fun_tree$)A_a_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun node$ay (A_a_fun_b_a_a_fun_fun_fun$ A_a_fun_b_a_a_fun_fun_fun_tree$ A_a_fun_b_a_a_fun_fun_fun_tree$ )A_a_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun selecyt$ (B_a_fun_a_b_a_fun_fun_fun_tree$)B_a_fun_a_b_a_fun_fun_fun$)
(declare-fun selecyu$ (B_a_fun_a_b_a_fun_fun_fun_tree$)B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun selecyv$ (B_a_fun_a_b_a_fun_fun_fun_tree$)B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun node$az (B_a_fun_a_b_a_fun_fun_fun$ B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_a_b_a_fun_fun_fun_tree$ )B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun selecyw$ (B_a_fun_b_fun_tree$)B_a_fun_b_fun$)
(declare-fun selecyx$ (B_a_fun_b_fun_tree$)B_a_fun_b_fun_tree$)
(declare-fun selecyy$ (B_a_fun_b_fun_tree$)B_a_fun_b_fun_tree$)
(declare-fun node$ba (B_a_fun_b_fun$ B_a_fun_b_fun_tree$ B_a_fun_b_fun_tree$ )B_a_fun_b_fun_tree$)
(declare-fun f$ ()B_a_fun_tree$ )
(declare-fun x$ ()B_tree$ )
(declare-fun id$ ()A_tree_a_tree_fun$ )
(declare-fun id$a ()B_a_fun_tree_b_a_fun_tree_fun$ )
(declare-fun id$b ()B_tree_b_tree_fun$ )
(declare-fun path$ ()Dir_list$ )
(declare-fun root$b (A_a_fun_tree$ )A_a_fun$ )
(declare-fun root$c (B_a_a_fun_fun_tree$ )B_a_a_fun_fun$ )
(declare-fun root$d (B_a_fun_a_fun_tree$ )B_a_fun_a_fun$ )
(declare-fun root$e (B_a_fun_tree$ )B_a_fun$ )
(declare-fun root$f (A_b_a_fun_fun_tree$ )A_b_a_fun_fun$ )
(declare-fun root$g (B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun$ )
(declare-fun root$h (B_b_a_fun_fun_tree$ )B_b_a_fun_fun$ )
(declare-fun root$i (A_b_fun_tree$ )A_b_fun$ )
(declare-fun root$j (B_a_fun_b_fun_tree$ )B_a_fun_b_fun$ )
(declare-fun root$k (B_b_fun_tree$ )B_b_fun$ )
(declare-fun tree_C$ ()B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$ ()B_a_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$ ()B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun fun_app$ (A_tree_a_tree_fun$ A_tree$ )A_tree$ )
(declare-fun tree_C$a ()B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$b ()B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$c ()B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$d ()B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ )
(declare-fun tree_C$e ()A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$f ()A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$g ()A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ )
(declare-fun tree_C$h ()A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ )
(declare-fun tree_C$i ()B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$a ()A_a_fun_b_a_a_fun_fun_fun_tree$ )
(declare-fun tree_K$b ()B_b_b_fun_fun_tree$ )
(declare-fun tree_K$c ()B_a_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$d ()A_a_a_fun_fun_tree$ )
(declare-fun tree_K$e ()A_b_a_fun_fun_tree$ )
(declare-fun tree_S$a ()B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$b ()B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ )
(declare-fun tree_S$c ()B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ )
(declare-fun tree_S$d ()A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$e ()A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$f ()B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$g ()B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$h ()B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$i ()B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun fun_app$a (B_a_fun_tree_b_a_fun_tree_fun$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun fun_app$b (B_tree_b_tree_fun$ B_tree$ )B_tree$ )
(declare-fun fun_app$c (B_a_a_fun_fun$ B$ )A_a_fun$ )
(declare-fun fun_app$d (B_b_fun$ B$ )B$ )
(declare-fun fun_app$e (B_b_a_fun_fun$ B$ )B_a_fun$ )
(declare-fun fun_app$f (B_a_fun_b_fun$ B_a_fun$ )B$ )
(declare-fun fun_app$g (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$h (B_a_fun_a_fun$ B_a_fun$ )A$ )
(declare-fun fun_app$i (A_b_fun$ A$ )B$ )
(declare-fun fun_app$j (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$k (A_a_fun$ A$ )A$ )
(declare-fun fun_app$l (B_a_fun$ B$ )A$ )
(declare-fun map_tree$ (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun tree_ap$a (B_b_a_fun_fun_tree$ B_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$b (B_a_a_fun_fun_tree$ B_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$c (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun tree_ap$d (A_b_a_fun_fun_tree$ A_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$e (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$f (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$g (B_b_b_a_fun_fun_fun_tree$ B_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$h (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$ )B_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$i (A_b_b_a_fun_fun_fun_tree$ A_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$j (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$ )A_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$k (B_a_b_a_fun_fun_fun_tree$ B_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$l (B_b_a_a_fun_fun_fun_tree$ B_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_ap$m (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ B_b_a_a_fun_fun_fun_tree$ )B_b_a_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$n (B_b_b_fun_fun_tree$ B_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$o (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_b_fun_fun_tree$ )
(declare-fun tree_ap$p (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ A_b_b_a_fun_fun_fun_tree$ )B_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$q (A_a_b_a_fun_fun_fun_tree$ A_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$r (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ A_a_b_a_fun_fun_fun_tree$ )A_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$s (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$t (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_ap$u (A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_ap$v (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$w (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$x (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$y (B_b_fun_b_a_fun_fun_tree$ B_b_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$z (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_fun_b_a_fun_fun_tree$ )
(declare-fun map_tree$a (B_a_fun_a_fun$ B_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$b (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun map_tree$c (A_b_a_fun_fun$ A_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$d (B_a_fun_b_a_fun_fun$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$e (B_b_a_fun_fun$ B_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$f (A_b_fun$ A_tree$ )B_tree$ )
(declare-fun map_tree$g (B_a_fun_b_fun$ B_a_fun_tree$ )B_tree$ )
(declare-fun map_tree$h (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun map_tree$i (B_a_a_fun_fun$ B_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$aa (B_a_fun_b_b_fun_fun_tree$ B_a_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$ab (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ B_a_b_fun_fun_tree$ )B_a_fun_b_b_fun_fun_tree$ )
(declare-fun tree_ap$ac (A_b_fun_tree$ A_tree$ )B_tree$ )
(declare-fun tree_ap$ad (B_a_b_fun_fun_tree$ B_tree$ )A_b_fun_tree$ )
(declare-fun tree_ap$ae (B_b_fun_b_b_fun_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$af (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_fun_b_b_fun_fun_tree$ )
(declare-fun tree_ap$ag (A_b_fun_a_a_fun_fun_tree$ A_b_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$ah (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_b_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$ai (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$aj (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$ak (B_b_a_fun_fun_b_a_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$al (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_a_fun_fun_tree$ )B_b_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$am (B_a_fun_a_fun_tree$ B_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$an (B_b_a_fun_a_fun_fun_tree$ B_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_ap$ao (B_a_a_fun_fun_b_a_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$ap (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_a_fun_fun_tree$ )B_a_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$aq (A_a_fun_a_fun_tree$ A_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$ar (B_a_a_fun_a_fun_fun_tree$ B_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_ap$as (B_b_fun_b_b_a_fun_fun_fun_tree$ B_b_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$at (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$ )B_b_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$au (B_a_fun_b_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$av (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$ )B_a_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$aw (A_a_fun_b_a_a_fun_fun_fun_tree$ A_a_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_ap$ax (B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ay (B_a_fun_b_fun_tree$ B_a_fun_tree$ )B_tree$ )
(declare-fun tree_pure$ (A$ )A_tree$ )
(declare-fun tree_pure$a (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$b (B$ )B_tree$ )
(declare-fun tree_pure$c (B_a_a_fun_fun$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_pure$d (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$e (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$f (B_b_a_fun_fun$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_pure$g (B_a_fun_b_fun$ )B_a_fun_b_fun_tree$ )
(declare-fun tree_pure$h (B_a_fun_b_a_fun_fun$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$i (B_a_fun_a_fun$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_pure$j (A_b_fun$ )A_b_fun_tree$ )
(declare-fun tree_pure$k (A_b_a_fun_fun$ )A_b_a_fun_fun_tree$ )
(declare-fun traverse_tree$ (Dir_list$ )A_tree_a_tree_fun$ )
(declare-fun traverse_tree$a (Dir_list$ )B_a_fun_tree_b_a_fun_tree_fun$ )
(declare-fun traverse_tree$b (Dir_list$ )B_tree_b_tree_fun$ )
(assert (! (not (= (fun_app$ (traverse_tree$ path$ )(tree_ap$ f$ x$ ))(tree_ap$ (fun_app$a (traverse_tree$a path$ )f$ )(fun_app$b (traverse_tree$b path$ )x$ )))):named a0 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$a ?v0 ?v2 )(tree_ap$a ?v1 ?v2 )))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_a_fun_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$b ?v0 ?v2 )(tree_ap$b ?v1 ?v2 )))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$c ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$d ?v0 ?v2 )(tree_ap$d ?v1 ?v2 )))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$e ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$ ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 A_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$d (tree_ap$f tree_C$ ?v0 )?v1 )?v2 )(tree_ap$e (tree_ap$b ?v0 ?v2 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$a (tree_ap$g (tree_ap$h tree_C$a ?v0 )?v1 )?v2 )(tree_ap$a (tree_ap$g ?v0 ?v2 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$ )(?v1 A_tree$ )(?v2 B_tree$ ))(= (tree_ap$a (tree_ap$i (tree_ap$j tree_C$b ?v0 )?v1 )?v2 )(tree_ap$d (tree_ap$k ?v0 ?v2 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 B_b_a_a_fun_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$b (tree_ap$l (tree_ap$m tree_C$c ?v0 )?v1 )?v2 )(tree_ap$b (tree_ap$l ?v0 ?v2 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$c (tree_ap$n (tree_ap$o tree_C$d ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$n ?v0 ?v2 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_b_b_a_fun_fun_fun_tree$ )(?v1 B_tree$ )(?v2 A_tree$ ))(= (tree_ap$d (tree_ap$k (tree_ap$p tree_C$e ?v0 )?v1 )?v2 )(tree_ap$a (tree_ap$i ?v0 ?v2 )?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_a_b_a_fun_fun_fun_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(= (tree_ap$d (tree_ap$q (tree_ap$r tree_C$f ?v0 )?v1 )?v2 )(tree_ap$d (tree_ap$q ?v0 ?v2 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(= (tree_ap$e (tree_ap$s (tree_ap$t tree_C$g ?v0 )?v1 )?v2 )(tree_ap$e (tree_ap$s ?v0 ?v2 )?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 B_tree$ )(?v2 A_tree$ ))(= (tree_ap$e (tree_ap$b (tree_ap$u tree_C$h ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$d ?v0 ?v2 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$a (tree_ap$v tree_C$i ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$a ?v0 ?v2 )?v1 ))):named a16 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$w (tree_ap$x tree_S$ ?v0 )?v1 )?v2 )(tree_ap$e (tree_ap$b ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$y (tree_ap$z tree_S$a ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$a ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$c (tree_ap$aa (tree_ap$ab tree_S$b ?v0 )?v1 )?v2 )(tree_ap$ac (tree_ap$ad ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$c (tree_ap$ae (tree_ap$af tree_S$c ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$n ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$e (tree_ap$ag (tree_ap$ah tree_S$d ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$d ?v0 ?v2 )(tree_ap$ac ?v1 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$e (tree_ap$ai (tree_ap$aj tree_S$e ?v0 )?v1 )?v2 )(tree_ap$e (tree_ap$s ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ak (tree_ap$al tree_S$f ?v0 )?v1 )?v2 )(tree_ap$am (tree_ap$an ?v0 ?v2 )(tree_ap$a ?v1 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 B_a_a_fun_a_fun_fun_tree$ )(?v1 B_a_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ao (tree_ap$ap tree_S$g ?v0 )?v1 )?v2 )(tree_ap$aq (tree_ap$ar ?v0 ?v2 )(tree_ap$b ?v1 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$a (tree_ap$as (tree_ap$at tree_S$h ?v0 )?v1 )?v2 )(tree_ap$a (tree_ap$g ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$a (tree_ap$au (tree_ap$av tree_S$i ?v0 )?v1 )?v2 )(tree_ap$d (tree_ap$k ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$a (tree_ap$au tree_K$ ?v0 )?v1 )?v0 )):named a27 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$b (tree_ap$aw tree_K$a ?v0 )?v1 )?v0 )):named a28 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_tree$ ))(= (tree_ap$c (tree_ap$n tree_K$b ?v0 )?v1 )?v0 )):named a29 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$d (tree_ap$ax tree_K$c ?v0 )?v1 )?v0 )):named a30 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (tree_ap$e (tree_ap$s tree_K$d ?v0 )?v1 )?v0 )):named a31 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_ap$d tree_K$e ?v0 )?v1 )?v0 )):named a32 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A$ ))(= (fun_app$ (traverse_tree$ ?v0 )(tree_pure$ ?v1 ))(tree_pure$ ?v1 ))):named a33 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun$ ))(= (fun_app$a (traverse_tree$a ?v0 )(tree_pure$a ?v1 ))(tree_pure$a ?v1 ))):named a34 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B$ ))(= (fun_app$b (traverse_tree$b ?v0 )(tree_pure$b ?v1 ))(tree_pure$b ?v1 ))):named a35 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun$ )(?v2 A_tree$ ))(= (fun_app$ (traverse_tree$ ?v0 )(map_tree$ ?v1 ?v2 ))(map_tree$ ?v1 (fun_app$ (traverse_tree$ ?v0 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun_a_fun$ )(?v2 B_a_fun_tree$ ))(= (fun_app$ (traverse_tree$ ?v0 )(map_tree$a ?v1 ?v2 ))(map_tree$a ?v1 (fun_app$a (traverse_tree$a ?v0 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun$ )(?v2 B_tree$ ))(= (fun_app$ (traverse_tree$ ?v0 )(map_tree$b ?v1 ?v2 ))(map_tree$b ?v1 (fun_app$b (traverse_tree$b ?v0 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_a_fun_fun$ )(?v2 A_tree$ ))(= (fun_app$a (traverse_tree$a ?v0 )(map_tree$c ?v1 ?v2 ))(map_tree$c ?v1 (fun_app$ (traverse_tree$ ?v0 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun_b_a_fun_fun$ )(?v2 B_a_fun_tree$ ))(= (fun_app$a (traverse_tree$a ?v0 )(map_tree$d ?v1 ?v2 ))(map_tree$d ?v1 (fun_app$a (traverse_tree$a ?v0 )?v2 )))):named a40 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_b_a_fun_fun$ )(?v2 B_tree$ ))(= (fun_app$a (traverse_tree$a ?v0 )(map_tree$e ?v1 ?v2 ))(map_tree$e ?v1 (fun_app$b (traverse_tree$b ?v0 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_fun$ )(?v2 A_tree$ ))(= (fun_app$b (traverse_tree$b ?v0 )(map_tree$f ?v1 ?v2 ))(map_tree$f ?v1 (fun_app$ (traverse_tree$ ?v0 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun_b_fun$ )(?v2 B_a_fun_tree$ ))(= (fun_app$b (traverse_tree$b ?v0 )(map_tree$g ?v1 ?v2 ))(map_tree$g ?v1 (fun_app$a (traverse_tree$a ?v0 )?v2 )))):named a43 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_b_fun$ )(?v2 B_tree$ ))(= (fun_app$b (traverse_tree$b ?v0 )(map_tree$h ?v1 ?v2 ))(map_tree$h ?v1 (fun_app$b (traverse_tree$b ?v0 )?v2 )))):named a44 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$a ?v0 (tree_pure$b ?v2 ))(tree_ap$a ?v1 (tree_pure$b ?v2 ))))(= ?v0 ?v1 ))):named a45 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_a_fun_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$b ?v0 (tree_pure$b ?v2 ))(tree_ap$b ?v1 (tree_pure$b ?v2 ))))(= ?v0 ?v1 ))):named a46 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$c ?v0 (tree_pure$b ?v2 ))(tree_ap$c ?v1 (tree_pure$b ?v2 ))))(= ?v0 ?v1 ))):named a47 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$d ?v0 (tree_pure$ ?v2 ))(tree_ap$d ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a48 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$e ?v0 (tree_pure$ ?v2 ))(tree_ap$e ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a49 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$ ?v0 (tree_pure$b ?v2 ))(tree_ap$ ?v1 (tree_pure$b ?v2 ))))(= ?v0 ?v1 ))):named a50 ))
(assert (! (= (traverse_tree$ nil$ )id$ ):named a51 ))
(assert (! (= (traverse_tree$a nil$ )id$a ):named a52 ))
(assert (! (= (traverse_tree$b nil$ )id$b ):named a53 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$b (tree_pure$c ?v0 )(tree_pure$b ?v1 ))(tree_pure$d (fun_app$c ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (tree_ap$c (tree_pure$e ?v0 )(tree_pure$b ?v1 ))(tree_pure$b (fun_app$d ?v0 ?v1 )))):named a55 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$a (tree_pure$f ?v0 )(tree_pure$b ?v1 ))(tree_pure$a (fun_app$e ?v0 ?v1 )))):named a56 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$ay (tree_pure$g ?v0 )(tree_pure$a ?v1 ))(tree_pure$b (fun_app$f ?v0 ?v1 )))):named a57 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$w (tree_pure$h ?v0 )(tree_pure$a ?v1 ))(tree_pure$a (fun_app$g ?v0 ?v1 )))):named a58 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$am (tree_pure$i ?v0 )(tree_pure$a ?v1 ))(tree_pure$ (fun_app$h ?v0 ?v1 )))):named a59 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (tree_ap$ac (tree_pure$j ?v0 )(tree_pure$ ?v1 ))(tree_pure$b (fun_app$i ?v0 ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ ))(= (tree_ap$d (tree_pure$k ?v0 )(tree_pure$ ?v1 ))(tree_pure$a (fun_app$j ?v0 ?v1 )))):named a61 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (tree_ap$e (tree_pure$d ?v0 )(tree_pure$ ?v1 ))(tree_pure$ (fun_app$k ?v0 ?v1 )))):named a62 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (tree_ap$ (tree_pure$a ?v0 )(tree_pure$b ?v1 ))(tree_pure$ (fun_app$l ?v0 ?v1 )))):named a63 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$b (tree_pure$c ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$e (fun_app$c ?v0 ?v1 )(tree_ap$b (tree_pure$c ?v0 )?v2 )(tree_ap$b (tree_pure$c ?v0 )?v3 )))):named a64 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$c (tree_pure$e ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$b (fun_app$d ?v0 ?v1 )(tree_ap$c (tree_pure$e ?v0 )?v2 )(tree_ap$c (tree_pure$e ?v0 )?v3 )))):named a65 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$a (tree_pure$f ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$a (fun_app$e ?v0 ?v1 )(tree_ap$a (tree_pure$f ?v0 )?v2 )(tree_ap$a (tree_pure$f ?v0 )?v3 )))):named a66 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$ac (tree_pure$j ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$b (fun_app$i ?v0 ?v1 )(tree_ap$ac (tree_pure$j ?v0 )?v2 )(tree_ap$ac (tree_pure$j ?v0 )?v3 )))):named a67 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$e (tree_pure$d ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$ (fun_app$k ?v0 ?v1 )(tree_ap$e (tree_pure$d ?v0 )?v2 )(tree_ap$e (tree_pure$d ?v0 )?v3 )))):named a68 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$d (tree_pure$k ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$a (fun_app$j ?v0 ?v1 )(tree_ap$d (tree_pure$k ?v0 )?v2 )(tree_ap$d (tree_pure$k ?v0 )?v3 )))):named a69 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$ay (tree_pure$g ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$b (fun_app$f ?v0 ?v1 )(tree_ap$ay (tree_pure$g ?v0 )?v2 )(tree_ap$ay (tree_pure$g ?v0 )?v3 )))):named a70 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$am (tree_pure$i ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$ (fun_app$h ?v0 ?v1 )(tree_ap$am (tree_pure$i ?v0 )?v2 )(tree_ap$am (tree_pure$i ?v0 )?v3 )))):named a71 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$w (tree_pure$h ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$a (fun_app$g ?v0 ?v1 )(tree_ap$w (tree_pure$h ?v0 )?v2 )(tree_ap$w (tree_pure$h ?v0 )?v3 )))):named a72 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$ (tree_pure$a ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$ (fun_app$l ?v0 ?v1 )(tree_ap$ (tree_pure$a ?v0 )?v2 )(tree_ap$ (tree_pure$a ?v0 )?v3 )))):named a73 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B_a_a_fun_fun_tree$ )(?v2 B_a_a_fun_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$b (node$d ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$e (fun_app$c ?v0 ?v3 )(tree_ap$b ?v1 ?v4 )(tree_ap$b ?v2 ?v5 ))):pattern ((tree_ap$b (node$d ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a74 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun_tree$ )(?v2 B_b_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$c (node$f ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$b (fun_app$d ?v0 ?v3 )(tree_ap$c ?v1 ?v4 )(tree_ap$c ?v2 ?v5 ))):pattern ((tree_ap$c (node$f ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a75 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_b_a_fun_fun_tree$ )(?v2 B_b_a_fun_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$a (fun_app$e ?v0 ?v3 )(tree_ap$a ?v1 ?v4 )(tree_ap$a ?v2 ?v5 ))):pattern ((tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a76 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun_tree$ )(?v2 A_b_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$ac (node$af ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$b (fun_app$i ?v0 ?v3 )(tree_ap$ac ?v1 ?v4 )(tree_ap$ac ?v2 ?v5 ))):pattern ((tree_ap$ac (node$af ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a77 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$e (node$e ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$ (fun_app$k ?v0 ?v3 )(tree_ap$e ?v1 ?v4 )(tree_ap$e ?v2 ?v5 ))):pattern ((tree_ap$e (node$e ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a78 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_b_a_fun_fun_tree$ )(?v2 A_b_a_fun_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$d (node$g ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$a (fun_app$j ?v0 ?v3 )(tree_ap$d ?v1 ?v4 )(tree_ap$d ?v2 ?v5 ))):pattern ((tree_ap$d (node$g ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a79 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun_b_fun_tree$ )(?v2 B_a_fun_b_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(! (= (tree_ap$ay (node$ba ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$b (fun_app$f ?v0 ?v3 )(tree_ap$ay ?v1 ?v4 )(tree_ap$ay ?v2 ?v5 ))):pattern ((tree_ap$ay (node$ba ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a80 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_a_fun_tree$ )(?v2 B_a_fun_a_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(! (= (tree_ap$am (node$ap ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$ (fun_app$h ?v0 ?v3 )(tree_ap$am ?v1 ?v4 )(tree_ap$am ?v2 ?v5 ))):pattern ((tree_ap$am (node$ap ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a81 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_b_a_fun_fun_tree$ )(?v2 B_a_fun_b_a_fun_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(! (= (tree_ap$w (node$y ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$a (fun_app$g ?v0 ?v3 )(tree_ap$w ?v1 ?v4 )(tree_ap$w ?v2 ?v5 ))):pattern ((tree_ap$w (node$y ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a82 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$ (fun_app$l ?v0 ?v3 )(tree_ap$ ?v1 ?v4 )(tree_ap$ ?v2 ?v5 ))):pattern ((tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a83 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_tree$ ))(= (tree_ap$a (tree_pure$f ?v0 )?v1 )(map_tree$e ?v0 ?v1 ))):named a84 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B_tree$ ))(= (tree_ap$b (tree_pure$c ?v0 )?v1 )(map_tree$i ?v0 ?v1 ))):named a85 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (tree_ap$c (tree_pure$e ?v0 )?v1 )(map_tree$h ?v0 ?v1 ))):named a86 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (tree_ap$d (tree_pure$k ?v0 )?v1 )(map_tree$c ?v0 ?v1 ))):named a87 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (tree_ap$ac (tree_pure$j ?v0 )?v1 )(map_tree$f ?v0 ?v1 ))):named a88 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (tree_ap$e (tree_pure$d ?v0 )?v1 )(map_tree$ ?v0 ?v1 ))):named a89 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_pure$a ?v0 )?v1 )(map_tree$b ?v0 ?v1 ))):named a90 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (root$b (tree_ap$b ?v0 ?v1 ))(fun_app$c (root$c ?v0 )(root$a ?v1 )))):named a91 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (root$ (tree_ap$e ?v0 ?v1 ))(fun_app$k (root$b ?v0 )(root$ ?v1 )))):named a92 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (root$ (tree_ap$am ?v0 ?v1 ))(fun_app$h (root$d ?v0 )(root$e ?v1 )))):named a93 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (root$e (tree_ap$d ?v0 ?v1 ))(fun_app$j (root$f ?v0 )(root$ ?v1 )))):named a94 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (root$e (tree_ap$w ?v0 ?v1 ))(fun_app$g (root$g ?v0 )(root$e ?v1 )))):named a95 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (root$e (tree_ap$a ?v0 ?v1 ))(fun_app$e (root$h ?v0 )(root$a ?v1 )))):named a96 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (root$a (tree_ap$ac ?v0 ?v1 ))(fun_app$i (root$i ?v0 )(root$ ?v1 )))):named a97 ))
(assert (! (forall ((?v0 B_a_fun_b_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (root$a (tree_ap$ay ?v0 ?v1 ))(fun_app$f (root$j ?v0 )(root$e ?v1 )))):named a98 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (root$a (tree_ap$c ?v0 ?v1 ))(fun_app$d (root$k ?v0 )(root$a ?v1 )))):named a99 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (root$ (tree_ap$ ?v0 ?v1 ))(fun_app$l (root$e ?v0 )(root$a ?v1 )))):named a100 ))
(assert (! (forall ((?v0 B$ )(?v1 B_tree$ )(?v2 B_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(= (= (node$b ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a101 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a102 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a103 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ ))(= (map_tree$e ?v0 (tree_pure$b ?v1 ))(tree_pure$a (fun_app$e ?v0 ?v1 )))):named a104 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ ))(= (map_tree$g ?v0 (tree_pure$a ?v1 ))(tree_pure$b (fun_app$f ?v0 ?v1 )))):named a105 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ ))(= (map_tree$d ?v0 (tree_pure$a ?v1 ))(tree_pure$a (fun_app$g ?v0 ?v1 )))):named a106 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ ))(= (map_tree$a ?v0 (tree_pure$a ?v1 ))(tree_pure$ (fun_app$h ?v0 ?v1 )))):named a107 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (map_tree$h ?v0 (tree_pure$b ?v1 ))(tree_pure$b (fun_app$d ?v0 ?v1 )))):named a108 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (map_tree$b ?v0 (tree_pure$b ?v1 ))(tree_pure$ (fun_app$l ?v0 ?v1 )))):named a109 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ ))(= (map_tree$c ?v0 (tree_pure$ ?v1 ))(tree_pure$a (fun_app$j ?v0 ?v1 )))):named a110 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (map_tree$f ?v0 (tree_pure$ ?v1 ))(tree_pure$b (fun_app$i ?v0 ?v1 )))):named a111 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$k ?v0 ?v1 )))):named a112 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (root$a (map_tree$h ?v0 ?v1 ))(fun_app$d ?v0 (root$a ?v1 )))):named a113 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (root$ (map_tree$b ?v0 ?v1 ))(fun_app$l ?v0 (root$a ?v1 )))):named a114 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (root$e (map_tree$c ?v0 ?v1 ))(fun_app$j ?v0 (root$ ?v1 )))):named a115 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (root$a (map_tree$f ?v0 ?v1 ))(fun_app$i ?v0 (root$ ?v1 )))):named a116 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$k ?v0 (root$ ?v1 )))):named a117 ))
(check-sat )
;(get-unsat-core )
