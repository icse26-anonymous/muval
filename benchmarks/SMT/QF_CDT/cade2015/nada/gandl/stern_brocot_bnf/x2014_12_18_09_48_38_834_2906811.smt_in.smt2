;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Int_int_fun$ 0 )
(declare-sort Int_nat_fun$ 0 )
(declare-sort Nat_int_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Int_int_fun_int_fun$ 0 )
(declare-sort Int_int_fun_nat_fun$ 0 )
(declare-sort Int_int_int_fun_fun$ 0 )
(declare-sort Int_int_nat_fun_fun$ 0 )
(declare-sort Int_nat_fun_int_fun$ 0 )
(declare-sort Nat_int_int_fun_fun$ 0 )
(declare-sort Int_int_fun_int_int_fun_fun$ 0 )
(declare-sort Int_tree$ 0)
(declare-sort Int_nat_fun_tree$ 0)
(declare-sort Int_int_int_fun_fun_tree$ 0)
(declare-sort Int_int_fun_nat_fun_tree$ 0)
(declare-sort Int_int_fun_int_fun_tree$ 0)
(declare-sort Int_int_fun_int_int_fun_fun_tree$ 0)
(declare-sort Int_int_fun_tree$ 0)
(declare-sort Nat_tree$ 0)
(declare-sort Nat_int_fun_tree$ 0)
(declare-sort Nat_nat_fun_tree$ 0)
(declare-sort Nat_int_int_fun_fun_tree$ 0)
(declare-sort Int_nat_fun_int_fun_tree$ 0)
(declare-sort Int_nat_fun_stream$ 0)
(declare-sort Int_int_int_fun_fun_stream$ 0)
(declare-sort Int_int_fun_nat_fun_stream$ 0)
(declare-sort Int_int_fun_int_fun_stream$ 0)
(declare-sort Int_int_fun_int_int_fun_fun_stream$ 0)
(declare-sort Int_int_fun_stream$ 0)
(declare-sort Nat_stream$ 0)
(declare-sort Int_stream$ 0)
(declare-fun root$ (Int_tree$)Int)
(declare-fun left$ (Int_tree$)Int_tree$)
(declare-fun right$ (Int_tree$)Int_tree$)
(declare-fun node$ (Int Int_tree$ Int_tree$ )Int_tree$)
(declare-fun select$ (Int_nat_fun_tree$)Int_nat_fun$)
(declare-fun selecta$ (Int_nat_fun_tree$)Int_nat_fun_tree$)
(declare-fun selectb$ (Int_nat_fun_tree$)Int_nat_fun_tree$)
(declare-fun node$a (Int_nat_fun$ Int_nat_fun_tree$ Int_nat_fun_tree$ )Int_nat_fun_tree$)
(declare-fun selectc$ (Int_int_int_fun_fun_tree$)Int_int_int_fun_fun$)
(declare-fun selectd$ (Int_int_int_fun_fun_tree$)Int_int_int_fun_fun_tree$)
(declare-fun selecte$ (Int_int_int_fun_fun_tree$)Int_int_int_fun_fun_tree$)
(declare-fun node$b (Int_int_int_fun_fun$ Int_int_int_fun_fun_tree$ Int_int_int_fun_fun_tree$ )Int_int_int_fun_fun_tree$)
(declare-fun selectf$ (Int_int_fun_nat_fun_tree$)Int_int_fun_nat_fun$)
(declare-fun selectg$ (Int_int_fun_nat_fun_tree$)Int_int_fun_nat_fun_tree$)
(declare-fun selecth$ (Int_int_fun_nat_fun_tree$)Int_int_fun_nat_fun_tree$)
(declare-fun node$c (Int_int_fun_nat_fun$ Int_int_fun_nat_fun_tree$ Int_int_fun_nat_fun_tree$ )Int_int_fun_nat_fun_tree$)
(declare-fun selecti$ (Int_int_fun_int_fun_tree$)Int_int_fun_int_fun$)
(declare-fun selectj$ (Int_int_fun_int_fun_tree$)Int_int_fun_int_fun_tree$)
(declare-fun selectk$ (Int_int_fun_int_fun_tree$)Int_int_fun_int_fun_tree$)
(declare-fun node$d (Int_int_fun_int_fun$ Int_int_fun_int_fun_tree$ Int_int_fun_int_fun_tree$ )Int_int_fun_int_fun_tree$)
(declare-fun selectl$ (Int_int_fun_int_int_fun_fun_tree$)Int_int_fun_int_int_fun_fun$)
(declare-fun selectm$ (Int_int_fun_int_int_fun_fun_tree$)Int_int_fun_int_int_fun_fun_tree$)
(declare-fun selectn$ (Int_int_fun_int_int_fun_fun_tree$)Int_int_fun_int_int_fun_fun_tree$)
(declare-fun node$e (Int_int_fun_int_int_fun_fun$ Int_int_fun_int_int_fun_fun_tree$ Int_int_fun_int_int_fun_fun_tree$ )Int_int_fun_int_int_fun_fun_tree$)
(declare-fun selecto$ (Int_int_fun_tree$)Int_int_fun$)
(declare-fun selectp$ (Int_int_fun_tree$)Int_int_fun_tree$)
(declare-fun selectq$ (Int_int_fun_tree$)Int_int_fun_tree$)
(declare-fun node$f (Int_int_fun$ Int_int_fun_tree$ Int_int_fun_tree$ )Int_int_fun_tree$)
(declare-fun root$a (Nat_tree$)Nat$)
(declare-fun left$a (Nat_tree$)Nat_tree$)
(declare-fun right$a (Nat_tree$)Nat_tree$)
(declare-fun node$g (Nat$ Nat_tree$ Nat_tree$ )Nat_tree$)
(declare-fun selectr$ (Nat_int_fun_tree$)Nat_int_fun$)
(declare-fun selects$ (Nat_int_fun_tree$)Nat_int_fun_tree$)
(declare-fun selectt$ (Nat_int_fun_tree$)Nat_int_fun_tree$)
(declare-fun node$h (Nat_int_fun$ Nat_int_fun_tree$ Nat_int_fun_tree$ )Nat_int_fun_tree$)
(declare-fun selectu$ (Nat_nat_fun_tree$)Nat_nat_fun$)
(declare-fun selectv$ (Nat_nat_fun_tree$)Nat_nat_fun_tree$)
(declare-fun selectw$ (Nat_nat_fun_tree$)Nat_nat_fun_tree$)
(declare-fun node$i (Nat_nat_fun$ Nat_nat_fun_tree$ Nat_nat_fun_tree$ )Nat_nat_fun_tree$)
(declare-fun selectx$ (Nat_int_int_fun_fun_tree$)Nat_int_int_fun_fun$)
(declare-fun selecty$ (Nat_int_int_fun_fun_tree$)Nat_int_int_fun_fun_tree$)
(declare-fun selectz$ (Nat_int_int_fun_fun_tree$)Nat_int_int_fun_fun_tree$)
(declare-fun node$j (Nat_int_int_fun_fun$ Nat_int_int_fun_fun_tree$ Nat_int_int_fun_fun_tree$ )Nat_int_int_fun_fun_tree$)
(declare-fun selecua$ (Int_nat_fun_int_fun_tree$)Int_nat_fun_int_fun$)
(declare-fun selecub$ (Int_nat_fun_int_fun_tree$)Int_nat_fun_int_fun_tree$)
(declare-fun selecuc$ (Int_nat_fun_int_fun_tree$)Int_nat_fun_int_fun_tree$)
(declare-fun node$k (Int_nat_fun_int_fun$ Int_nat_fun_int_fun_tree$ Int_nat_fun_int_fun_tree$ )Int_nat_fun_int_fun_tree$)
(declare-fun selecud$ (Int_nat_fun_stream$)Int_nat_fun$)
(declare-fun selecue$ (Int_nat_fun_stream$)Int_nat_fun_stream$)
(declare-fun sCons$ (Int_nat_fun$ Int_nat_fun_stream$ )Int_nat_fun_stream$)
(declare-fun selecuf$ (Int_int_int_fun_fun_stream$)Int_int_int_fun_fun$)
(declare-fun selecug$ (Int_int_int_fun_fun_stream$)Int_int_int_fun_fun_stream$)
(declare-fun sCons$a (Int_int_int_fun_fun$ Int_int_int_fun_fun_stream$ )Int_int_int_fun_fun_stream$)
(declare-fun selecuh$ (Int_int_fun_nat_fun_stream$)Int_int_fun_nat_fun$)
(declare-fun selecui$ (Int_int_fun_nat_fun_stream$)Int_int_fun_nat_fun_stream$)
(declare-fun sCons$b (Int_int_fun_nat_fun$ Int_int_fun_nat_fun_stream$ )Int_int_fun_nat_fun_stream$)
(declare-fun selecuj$ (Int_int_fun_int_fun_stream$)Int_int_fun_int_fun$)
(declare-fun selecuk$ (Int_int_fun_int_fun_stream$)Int_int_fun_int_fun_stream$)
(declare-fun sCons$c (Int_int_fun_int_fun$ Int_int_fun_int_fun_stream$ )Int_int_fun_int_fun_stream$)
(declare-fun selecul$ (Int_int_fun_int_int_fun_fun_stream$)Int_int_fun_int_int_fun_fun$)
(declare-fun selecum$ (Int_int_fun_int_int_fun_fun_stream$)Int_int_fun_int_int_fun_fun_stream$)
(declare-fun sCons$d (Int_int_fun_int_int_fun_fun$ Int_int_fun_int_int_fun_fun_stream$ )Int_int_fun_int_int_fun_fun_stream$)
(declare-fun selecun$ (Int_int_fun_stream$)Int_int_fun$)
(declare-fun selecuo$ (Int_int_fun_stream$)Int_int_fun_stream$)
(declare-fun sCons$e (Int_int_fun$ Int_int_fun_stream$ )Int_int_fun_stream$)
(declare-fun shd$ (Nat_stream$)Nat$)
(declare-fun stl$ (Nat_stream$)Nat_stream$)
(declare-fun sCons$f (Nat$ Nat_stream$ )Nat_stream$)
(declare-fun shd$a (Int_stream$)Int)
(declare-fun stl$a (Int_stream$)Int_stream$)
(declare-fun sCons$g (Int Int_stream$ )Int_stream$)
(declare-fun den$ ()Int_tree$ )
(declare-fun num$ ()Int_tree$ )
(declare-fun den$a ()Nat_tree$ )
(declare-fun num$a ()Nat_tree$ )
(declare-fun plus$ (Int_tree$ Int_tree$ )Int_tree$ )
(declare-fun stl$b (Int_nat_fun_stream$ )Int_nat_fun_stream$ )
(declare-fun stl$c (Int_int_int_fun_fun_stream$ )Int_int_int_fun_fun_stream$ )
(declare-fun stl$d (Int_int_fun_nat_fun_stream$ )Int_int_fun_nat_fun_stream$ )
(declare-fun stl$e (Int_int_fun_int_fun_stream$ )Int_int_fun_int_fun_stream$ )
(declare-fun stl$f (Int_int_fun_int_int_fun_fun_stream$ )Int_int_fun_int_int_fun_fun_stream$ )
(declare-fun stl$g (Int_int_fun_stream$ )Int_int_fun_stream$ )
(declare-fun left$b (Int_nat_fun_tree$ )Int_nat_fun_tree$ )
(declare-fun left$c (Int_int_int_fun_fun_tree$ )Int_int_int_fun_fun_tree$ )
(declare-fun left$d (Int_int_fun_nat_fun_tree$ )Int_int_fun_nat_fun_tree$ )
(declare-fun left$e (Int_int_fun_int_fun_tree$ )Int_int_fun_int_fun_tree$ )
(declare-fun left$f (Int_int_fun_int_int_fun_fun_tree$ )Int_int_fun_int_int_fun_fun_tree$ )
(declare-fun left$g (Int_int_fun_tree$ )Int_int_fun_tree$ )
(declare-fun root$b (Int_nat_fun_tree$ )Int_nat_fun$ )
(declare-fun root$c (Int_int_int_fun_fun_tree$ )Int_int_int_fun_fun$ )
(declare-fun root$d (Int_int_fun_nat_fun_tree$ )Int_int_fun_nat_fun$ )
(declare-fun root$e (Int_int_fun_int_fun_tree$ )Int_int_fun_int_fun$ )
(declare-fun root$f (Int_int_fun_int_int_fun_fun_tree$ )Int_int_fun_int_int_fun_fun$ )
(declare-fun root$g (Int_int_fun_tree$ )Int_int_fun$ )
(declare-fun of_nat$ ()Nat_int_fun$ )
(declare-fun right$b (Int_nat_fun_tree$ )Int_nat_fun_tree$ )
(declare-fun right$c (Int_int_int_fun_fun_tree$ )Int_int_int_fun_fun_tree$ )
(declare-fun right$d (Int_int_fun_nat_fun_tree$ )Int_int_fun_nat_fun_tree$ )
(declare-fun right$e (Int_int_fun_int_fun_tree$ )Int_int_fun_int_fun_tree$ )
(declare-fun right$f (Int_int_fun_int_int_fun_fun_tree$ )Int_int_fun_int_int_fun_fun_tree$ )
(declare-fun right$g (Int_int_fun_tree$ )Int_int_fun_tree$ )
(declare-fun stream$ (Int_nat_fun_tree$ )Int_nat_fun_stream$ )
(declare-fun fun_app$ (Int_nat_fun$ Int )Nat$ )
(declare-fun stream$a (Int_int_int_fun_fun_tree$ )Int_int_int_fun_fun_stream$ )
(declare-fun stream$b (Int_int_fun_nat_fun_tree$ )Int_int_fun_nat_fun_stream$ )
(declare-fun stream$c (Int_int_fun_int_fun_tree$ )Int_int_fun_int_fun_stream$ )
(declare-fun stream$d (Int_int_fun_int_int_fun_fun_tree$ )Int_int_fun_int_int_fun_fun_stream$ )
(declare-fun stream$e (Int_int_fun_tree$ )Int_int_fun_stream$ )
(declare-fun stream$f (Nat_tree$ )Nat_stream$ )
(declare-fun stream$g (Int_tree$ )Int_stream$ )
(declare-fun tree_ap$ (Int_int_fun_tree$ Int_tree$ )Int_tree$ )
(declare-fun fun_app$a (Int_int_int_fun_fun$ Int )Int_int_fun$ )
(declare-fun fun_app$b (Nat_int_fun$ Nat$ )Int )
(declare-fun fun_app$c (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$d (Nat_int_int_fun_fun$ Nat$ )Int_int_fun$ )
(declare-fun fun_app$e (Int_int_fun_int_fun$ Int_int_fun$ )Int )
(declare-fun fun_app$f (Int_int_fun_nat_fun$ Int_int_fun$ )Nat$ )
(declare-fun fun_app$g (Int_int_fun_int_int_fun_fun$ Int_int_fun$ )Int_int_fun$ )
(declare-fun fun_app$h (Int_int_fun$ Int )Int )
(declare-fun map_tree$ (Int_int_fun$ Int_tree$ )Int_tree$ )
(declare-fun tree_ap$a (Nat_int_fun_tree$ Nat_tree$ )Int_tree$ )
(declare-fun tree_ap$b (Int_nat_fun_tree$ Int_tree$ )Nat_tree$ )
(declare-fun tree_ap$c (Nat_nat_fun_tree$ Nat_tree$ )Nat_tree$ )
(declare-fun tree_ap$d (Int_int_fun_int_fun_tree$ Int_int_fun_tree$ )Int_tree$ )
(declare-fun tree_ap$e (Int_int_int_fun_fun_tree$ Int_tree$ )Int_int_fun_tree$ )
(declare-fun tree_ap$f (Nat_int_int_fun_fun_tree$ Nat_tree$ )Int_int_fun_tree$ )
(declare-fun tree_ap$g (Int_int_fun_nat_fun_tree$ Int_int_fun_tree$ )Nat_tree$ )
(declare-fun tree_ap$h (Int_int_fun_int_int_fun_fun_tree$ Int_int_fun_tree$ )Int_int_fun_tree$ )
(declare-fun tree_ap$i (Int_nat_fun_int_fun_tree$ Int_nat_fun_tree$ )Int_tree$ )
(declare-fun map_tree$a (Nat_int_fun$ Nat_tree$ )Int_tree$ )
(declare-fun map_tree$b (Int_nat_fun$ Int_tree$ )Nat_tree$ )
(declare-fun map_tree$c (Nat_nat_fun$ Nat_tree$ )Nat_tree$ )
(declare-fun map_tree$d (Int_int_int_fun_fun$ Int_tree$ )Int_int_fun_tree$ )
(declare-fun map_tree$e (Int_int_fun_int_fun$ Int_int_fun_tree$ )Int_tree$ )
(declare-fun map_tree$f (Int_int_fun_nat_fun$ Int_int_fun_tree$ )Nat_tree$ )
(declare-fun map_tree$g (Nat_int_int_fun_fun$ Nat_tree$ )Int_int_fun_tree$ )
(declare-fun map_tree$h (Int_int_fun_int_int_fun_fun$ Int_int_fun_tree$ )Int_int_fun_tree$ )
(declare-fun map_tree$i (Int_int_nat_fun_fun$ Int_tree$ )Int_nat_fun_tree$ )
(declare-fun tree_chop$ (Int_tree$ )Int_tree$ )
(declare-fun tree_pure$ (Int_nat_fun$ )Int_nat_fun_tree$ )
(declare-fun tree_chop$a (Int_nat_fun_tree$ )Int_nat_fun_tree$ )
(declare-fun tree_chop$b (Int_int_int_fun_fun_tree$ )Int_int_int_fun_fun_tree$ )
(declare-fun tree_chop$c (Int_int_fun_nat_fun_tree$ )Int_int_fun_nat_fun_tree$ )
(declare-fun tree_chop$d (Int_int_fun_int_fun_tree$ )Int_int_fun_int_fun_tree$ )
(declare-fun tree_chop$e (Int_int_fun_int_int_fun_fun_tree$ )Int_int_fun_int_int_fun_fun_tree$ )
(declare-fun tree_chop$f (Int_int_fun_tree$ )Int_int_fun_tree$ )
(declare-fun tree_chop$g (Nat_tree$ )Nat_tree$ )
(declare-fun tree_chop$h (Nat_int_fun_tree$ )Nat_int_fun_tree$ )
(declare-fun tree_chop$i (Nat_nat_fun_tree$ )Nat_nat_fun_tree$ )
(declare-fun tree_chop$j (Nat_int_int_fun_fun_tree$ )Nat_int_int_fun_fun_tree$ )
(declare-fun tree_chop$k (Int_nat_fun_int_fun_tree$ )Int_nat_fun_int_fun_tree$ )
(declare-fun tree_pure$a (Int_int_int_fun_fun$ )Int_int_int_fun_fun_tree$ )
(declare-fun tree_pure$b (Int_int_fun_nat_fun$ )Int_int_fun_nat_fun_tree$ )
(declare-fun tree_pure$c (Int_int_fun_int_fun$ )Int_int_fun_int_fun_tree$ )
(declare-fun tree_pure$d (Int_int_fun_int_int_fun_fun$ )Int_int_fun_int_int_fun_fun_tree$ )
(declare-fun tree_pure$e (Int_int_fun$ )Int_int_fun_tree$ )
(declare-fun tree_pure$f (Nat$ )Nat_tree$ )
(declare-fun tree_pure$g (Int )Int_tree$ )
(declare-fun tree_pure$h (Nat_int_fun$ )Nat_int_fun_tree$ )
(declare-fun tree_pure$i (Nat_nat_fun$ )Nat_nat_fun_tree$ )
(declare-fun tree_pure$j (Nat_int_int_fun_fun$ )Nat_int_int_fun_fun_tree$ )
(assert (! (not (= den$ (tree_chop$ num$ ))):named a0 ))
(assert (! (forall ((?v0 Int_nat_fun$ ))(= (tree_chop$a (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a1 ))
(assert (! (forall ((?v0 Int_int_int_fun_fun$ ))(= (tree_chop$b (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a2 ))
(assert (! (forall ((?v0 Int_int_fun_nat_fun$ ))(= (tree_chop$c (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a3 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun$ ))(= (tree_chop$d (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a4 ))
(assert (! (forall ((?v0 Int_int_fun_int_int_fun_fun$ ))(= (tree_chop$e (tree_pure$d ?v0 ))(tree_pure$d ?v0 ))):named a5 ))
(assert (! (forall ((?v0 Int_int_fun$ ))(= (tree_chop$f (tree_pure$e ?v0 ))(tree_pure$e ?v0 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(= (tree_chop$g (tree_pure$f ?v0 ))(tree_pure$f ?v0 ))):named a7 ))
(assert (! (forall ((?v0 Int ))(= (tree_chop$ (tree_pure$g ?v0 ))(tree_pure$g ?v0 ))):named a8 ))
(assert (! (= (left$ num$ )num$ ):named a9 ))
(assert (! (= (right$ num$ )(plus$ num$ den$ )):named a10 ))
(assert (! (forall ((?v0 Int_int_fun_tree$ )(?v1 Int_tree$ ))(= (tree_chop$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (tree_chop$f ?v0 )(tree_chop$ ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Nat_int_fun_tree$ )(?v1 Nat_tree$ ))(= (tree_chop$ (tree_ap$a ?v0 ?v1 ))(tree_ap$a (tree_chop$h ?v0 )(tree_chop$g ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Int_nat_fun_tree$ )(?v1 Int_tree$ ))(= (tree_chop$g (tree_ap$b ?v0 ?v1 ))(tree_ap$b (tree_chop$a ?v0 )(tree_chop$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Nat_nat_fun_tree$ )(?v1 Nat_tree$ ))(= (tree_chop$g (tree_ap$c ?v0 ?v1 ))(tree_ap$c (tree_chop$i ?v0 )(tree_chop$g ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun_tree$ )(?v1 Int_int_fun_tree$ ))(= (tree_chop$ (tree_ap$d ?v0 ?v1 ))(tree_ap$d (tree_chop$d ?v0 )(tree_chop$f ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Int_int_int_fun_fun_tree$ )(?v1 Int_tree$ ))(= (tree_chop$f (tree_ap$e ?v0 ?v1 ))(tree_ap$e (tree_chop$b ?v0 )(tree_chop$ ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Nat_int_int_fun_fun_tree$ )(?v1 Nat_tree$ ))(= (tree_chop$f (tree_ap$f ?v0 ?v1 ))(tree_ap$f (tree_chop$j ?v0 )(tree_chop$g ?v1 )))):named a17 ))
(assert (! (forall ((?v0 Int_int_fun_nat_fun_tree$ )(?v1 Int_int_fun_tree$ ))(= (tree_chop$g (tree_ap$g ?v0 ?v1 ))(tree_ap$g (tree_chop$c ?v0 )(tree_chop$f ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Int_int_fun_int_int_fun_fun_tree$ )(?v1 Int_int_fun_tree$ ))(= (tree_chop$f (tree_ap$h ?v0 ?v1 ))(tree_ap$h (tree_chop$e ?v0 )(tree_chop$f ?v1 )))):named a19 ))
(assert (! (forall ((?v0 Int_nat_fun_int_fun_tree$ )(?v1 Int_nat_fun_tree$ ))(= (tree_chop$ (tree_ap$i ?v0 ?v1 ))(tree_ap$i (tree_chop$k ?v0 )(tree_chop$a ?v1 )))):named a20 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (map_tree$ ?v0 (tree_chop$ ?v1 ))(tree_chop$ (map_tree$ ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (map_tree$a ?v0 (tree_chop$g ?v1 ))(tree_chop$ (map_tree$a ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (map_tree$b ?v0 (tree_chop$ ?v1 ))(tree_chop$g (map_tree$b ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (map_tree$c ?v0 (tree_chop$g ?v1 ))(tree_chop$g (map_tree$c ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 Int_int_int_fun_fun$ )(?v1 Int_tree$ ))(= (map_tree$d ?v0 (tree_chop$ ?v1 ))(tree_chop$f (map_tree$d ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun$ )(?v1 Int_int_fun_tree$ ))(= (map_tree$e ?v0 (tree_chop$f ?v1 ))(tree_chop$ (map_tree$e ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 Int_int_fun_nat_fun$ )(?v1 Int_int_fun_tree$ ))(= (map_tree$f ?v0 (tree_chop$f ?v1 ))(tree_chop$g (map_tree$f ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 Nat_int_int_fun_fun$ )(?v1 Nat_tree$ ))(= (map_tree$g ?v0 (tree_chop$g ?v1 ))(tree_chop$f (map_tree$g ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 Int_int_fun_int_int_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (map_tree$h ?v0 (tree_chop$f ?v1 ))(tree_chop$f (map_tree$h ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 Int_int_nat_fun_fun$ )(?v1 Int_tree$ ))(= (map_tree$i ?v0 (tree_chop$ ?v1 ))(tree_chop$a (map_tree$i ?v0 ?v1 )))):named a30 ))
(assert (! (= (root$ num$ )1 ):named a31 ))
(assert (! (= den$ (map_tree$a of_nat$ den$a )):named a32 ))
(assert (! (forall ((?v0 Int_nat_fun_tree$ ))(= (stl$b (stream$ ?v0 ))(stream$ (tree_chop$a ?v0 )))):named a33 ))
(assert (! (forall ((?v0 Int_int_int_fun_fun_tree$ ))(= (stl$c (stream$a ?v0 ))(stream$a (tree_chop$b ?v0 )))):named a34 ))
(assert (! (forall ((?v0 Int_int_fun_nat_fun_tree$ ))(= (stl$d (stream$b ?v0 ))(stream$b (tree_chop$c ?v0 )))):named a35 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun_tree$ ))(= (stl$e (stream$c ?v0 ))(stream$c (tree_chop$d ?v0 )))):named a36 ))
(assert (! (forall ((?v0 Int_int_fun_int_int_fun_fun_tree$ ))(= (stl$f (stream$d ?v0 ))(stream$d (tree_chop$e ?v0 )))):named a37 ))
(assert (! (forall ((?v0 Int_int_fun_tree$ ))(= (stl$g (stream$e ?v0 ))(stream$e (tree_chop$f ?v0 )))):named a38 ))
(assert (! (forall ((?v0 Nat_tree$ ))(= (stl$ (stream$f ?v0 ))(stream$f (tree_chop$g ?v0 )))):named a39 ))
(assert (! (forall ((?v0 Int_tree$ ))(= (stl$a (stream$g ?v0 ))(stream$g (tree_chop$ ?v0 )))):named a40 ))
(assert (! (forall ((?v0 Int_nat_fun_tree$ ))(= (root$b (tree_chop$a ?v0 ))(root$b (left$b ?v0 )))):named a41 ))
(assert (! (forall ((?v0 Int_int_int_fun_fun_tree$ ))(= (root$c (tree_chop$b ?v0 ))(root$c (left$c ?v0 )))):named a42 ))
(assert (! (forall ((?v0 Int_int_fun_nat_fun_tree$ ))(= (root$d (tree_chop$c ?v0 ))(root$d (left$d ?v0 )))):named a43 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun_tree$ ))(= (root$e (tree_chop$d ?v0 ))(root$e (left$e ?v0 )))):named a44 ))
(assert (! (forall ((?v0 Int_int_fun_int_int_fun_fun_tree$ ))(= (root$f (tree_chop$e ?v0 ))(root$f (left$f ?v0 )))):named a45 ))
(assert (! (forall ((?v0 Int_int_fun_tree$ ))(= (root$g (tree_chop$f ?v0 ))(root$g (left$g ?v0 )))):named a46 ))
(assert (! (forall ((?v0 Nat_tree$ ))(= (root$a (tree_chop$g ?v0 ))(root$a (left$a ?v0 )))):named a47 ))
(assert (! (forall ((?v0 Int_tree$ ))(= (root$ (tree_chop$ ?v0 ))(root$ (left$ ?v0 )))):named a48 ))
(assert (! (forall ((?v0 Int_nat_fun_tree$ ))(= (right$b (tree_chop$a ?v0 ))(tree_chop$a (left$b ?v0 )))):named a49 ))
(assert (! (forall ((?v0 Int_int_int_fun_fun_tree$ ))(= (right$c (tree_chop$b ?v0 ))(tree_chop$b (left$c ?v0 )))):named a50 ))
(assert (! (forall ((?v0 Int_int_fun_nat_fun_tree$ ))(= (right$d (tree_chop$c ?v0 ))(tree_chop$c (left$d ?v0 )))):named a51 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun_tree$ ))(= (right$e (tree_chop$d ?v0 ))(tree_chop$d (left$e ?v0 )))):named a52 ))
(assert (! (forall ((?v0 Int_int_fun_int_int_fun_fun_tree$ ))(= (right$f (tree_chop$e ?v0 ))(tree_chop$e (left$f ?v0 )))):named a53 ))
(assert (! (forall ((?v0 Int_int_fun_tree$ ))(= (right$g (tree_chop$f ?v0 ))(tree_chop$f (left$g ?v0 )))):named a54 ))
(assert (! (forall ((?v0 Int_tree$ ))(= (right$ (tree_chop$ ?v0 ))(tree_chop$ (left$ ?v0 )))):named a55 ))
(assert (! (forall ((?v0 Nat_tree$ ))(= (right$a (tree_chop$g ?v0 ))(tree_chop$g (left$a ?v0 )))):named a56 ))
(assert (! (forall ((?v0 Int_nat_fun_tree$ ))(= (left$b (tree_chop$a ?v0 ))(right$b ?v0 ))):named a57 ))
(assert (! (forall ((?v0 Int_int_int_fun_fun_tree$ ))(= (left$c (tree_chop$b ?v0 ))(right$c ?v0 ))):named a58 ))
(assert (! (forall ((?v0 Int_int_fun_nat_fun_tree$ ))(= (left$d (tree_chop$c ?v0 ))(right$d ?v0 ))):named a59 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun_tree$ ))(= (left$e (tree_chop$d ?v0 ))(right$e ?v0 ))):named a60 ))
(assert (! (forall ((?v0 Int_int_fun_int_int_fun_fun_tree$ ))(= (left$f (tree_chop$e ?v0 ))(right$f ?v0 ))):named a61 ))
(assert (! (forall ((?v0 Int_int_fun_tree$ ))(= (left$g (tree_chop$f ?v0 ))(right$g ?v0 ))):named a62 ))
(assert (! (forall ((?v0 Int_tree$ ))(= (left$ (tree_chop$ ?v0 ))(right$ ?v0 ))):named a63 ))
(assert (! (forall ((?v0 Nat_tree$ ))(= (left$a (tree_chop$g ?v0 ))(right$a ?v0 ))):named a64 ))
(assert (! (= num$ (map_tree$a of_nat$ num$a )):named a65 ))
(assert (! (= (right$a den$a )den$a ):named a66 ))
(assert (! (= (left$a num$a )num$a ):named a67 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int ))(= (tree_ap$b (tree_pure$ ?v0 )(tree_pure$g ?v1 ))(tree_pure$f (fun_app$ ?v0 ?v1 )))):named a68 ))
(assert (! (forall ((?v0 Int_int_int_fun_fun$ )(?v1 Int ))(= (tree_ap$e (tree_pure$a ?v0 )(tree_pure$g ?v1 ))(tree_pure$e (fun_app$a ?v0 ?v1 )))):named a69 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat$ ))(= (tree_ap$a (tree_pure$h ?v0 )(tree_pure$f ?v1 ))(tree_pure$g (fun_app$b ?v0 ?v1 )))):named a70 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (tree_ap$c (tree_pure$i ?v0 )(tree_pure$f ?v1 ))(tree_pure$f (fun_app$c ?v0 ?v1 )))):named a71 ))
(assert (! (forall ((?v0 Nat_int_int_fun_fun$ )(?v1 Nat$ ))(= (tree_ap$f (tree_pure$j ?v0 )(tree_pure$f ?v1 ))(tree_pure$e (fun_app$d ?v0 ?v1 )))):named a72 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun$ )(?v1 Int_int_fun$ ))(= (tree_ap$d (tree_pure$c ?v0 )(tree_pure$e ?v1 ))(tree_pure$g (fun_app$e ?v0 ?v1 )))):named a73 ))
(assert (! (forall ((?v0 Int_int_fun_nat_fun$ )(?v1 Int_int_fun$ ))(= (tree_ap$g (tree_pure$b ?v0 )(tree_pure$e ?v1 ))(tree_pure$f (fun_app$f ?v0 ?v1 )))):named a74 ))
(assert (! (forall ((?v0 Int_int_fun_int_int_fun_fun$ )(?v1 Int_int_fun$ ))(= (tree_ap$h (tree_pure$d ?v0 )(tree_pure$e ?v1 ))(tree_pure$e (fun_app$g ?v0 ?v1 )))):named a75 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int ))(= (tree_ap$ (tree_pure$e ?v0 )(tree_pure$g ?v1 ))(tree_pure$g (fun_app$h ?v0 ?v1 )))):named a76 ))
(assert (! (forall ((?v0 Nat_int_int_fun_fun$ )(?v1 Nat_tree$ ))(= (root$g (map_tree$g ?v0 ?v1 ))(fun_app$d ?v0 (root$a ?v1 )))):named a77 ))
(assert (! (forall ((?v0 Int_int_int_fun_fun$ )(?v1 Int_tree$ ))(= (root$g (map_tree$d ?v0 ?v1 ))(fun_app$a ?v0 (root$ ?v1 )))):named a78 ))
(assert (! (forall ((?v0 Int_int_fun_nat_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$a (map_tree$f ?v0 ?v1 ))(fun_app$f ?v0 (root$g ?v1 )))):named a79 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$ (map_tree$e ?v0 ?v1 ))(fun_app$e ?v0 (root$g ?v1 )))):named a80 ))
(assert (! (forall ((?v0 Int_int_fun_int_int_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$g (map_tree$h ?v0 ?v1 ))(fun_app$g ?v0 (root$g ?v1 )))):named a81 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (root$a (map_tree$b ?v0 ?v1 ))(fun_app$ ?v0 (root$ ?v1 )))):named a82 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (root$a (map_tree$c ?v0 ?v1 ))(fun_app$c ?v0 (root$a ?v1 )))):named a83 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$h ?v0 (root$ ?v1 )))):named a84 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (root$ (map_tree$a ?v0 ?v1 ))(fun_app$b ?v0 (root$a ?v1 )))):named a85 ))
(assert (! (forall ((?v0 Nat_int_int_fun_fun$ )(?v1 Nat_tree$ ))(= (root$g (map_tree$g ?v0 ?v1 ))(fun_app$d ?v0 (root$a ?v1 )))):named a86 ))
(assert (! (forall ((?v0 Int_int_int_fun_fun$ )(?v1 Int_tree$ ))(= (root$g (map_tree$d ?v0 ?v1 ))(fun_app$a ?v0 (root$ ?v1 )))):named a87 ))
(assert (! (forall ((?v0 Int_int_fun_nat_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$a (map_tree$f ?v0 ?v1 ))(fun_app$f ?v0 (root$g ?v1 )))):named a88 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$ (map_tree$e ?v0 ?v1 ))(fun_app$e ?v0 (root$g ?v1 )))):named a89 ))
(assert (! (forall ((?v0 Int_int_fun_int_int_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$g (map_tree$h ?v0 ?v1 ))(fun_app$g ?v0 (root$g ?v1 )))):named a90 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (root$a (map_tree$b ?v0 ?v1 ))(fun_app$ ?v0 (root$ ?v1 )))):named a91 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (root$a (map_tree$c ?v0 ?v1 ))(fun_app$c ?v0 (root$a ?v1 )))):named a92 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$h ?v0 (root$ ?v1 )))):named a93 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (root$ (map_tree$a ?v0 ?v1 ))(fun_app$b ?v0 (root$a ?v1 )))):named a94 ))
(check-sat )
;(get-unsat-core )
