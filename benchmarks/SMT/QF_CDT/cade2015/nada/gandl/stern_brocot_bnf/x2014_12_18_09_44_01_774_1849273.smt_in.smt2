;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_c_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_fun_a_c_fun_fun$ 0 )
(declare-sort A_c_fun_a_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_a_fun_b_c_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_b_c_fun_fun$ 0 )
(declare-sort B_c_fun_b_a_fun_fun$ 0 )
(declare-sort B_c_fun_b_b_fun_fun$ 0 )
(declare-sort B_c_fun_b_c_fun_fun$ 0 )
(declare-sort C_a_fun_c_a_fun_fun$ 0 )
(declare-sort C_a_fun_c_b_fun_fun$ 0 )
(declare-sort C_a_fun_c_c_fun_fun$ 0 )
(declare-sort C_b_fun_c_a_fun_fun$ 0 )
(declare-sort C_b_fun_c_b_fun_fun$ 0 )
(declare-sort C_b_fun_c_c_fun_fun$ 0 )
(declare-sort C_c_fun_c_a_fun_fun$ 0 )
(declare-sort C_c_fun_c_b_fun_fun$ 0 )
(declare-sort C_c_fun_c_c_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_fun_b_a_fun_fun_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort B_a_fun_tree$ 0)
(declare-sort B_tree$ 0)
(declare-sort B_c_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_c_fun_tree$ 0)
(declare-sort C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort C_a_fun_tree$ 0)
(declare-sort C_tree$ 0)
(declare-sort C_c_fun_tree$ 0)
(declare-sort C_b_fun_tree$ 0)
(declare-sort B_b_fun_tree$ 0)
(declare-sort A_c_fun_tree$ 0)
(declare-sort A_b_fun_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun select$ (B_a_fun_tree$)B_a_fun$)
(declare-fun selecta$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun selectb$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun node$a (B_a_fun$ B_a_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$)
(declare-fun root$a (B_tree$)B$)
(declare-fun left$a (B_tree$)B_tree$)
(declare-fun right$a (B_tree$)B_tree$)
(declare-fun node$b (B$ B_tree$ B_tree$ )B_tree$)
(declare-fun selectc$ (B_c_fun_b_a_fun_fun_tree$)B_c_fun_b_a_fun_fun$)
(declare-fun selectd$ (B_c_fun_b_a_fun_fun_tree$)B_c_fun_b_a_fun_fun_tree$)
(declare-fun selecte$ (B_c_fun_b_a_fun_fun_tree$)B_c_fun_b_a_fun_fun_tree$)
(declare-fun node$c (B_c_fun_b_a_fun_fun$ B_c_fun_b_a_fun_fun_tree$ B_c_fun_b_a_fun_fun_tree$ )B_c_fun_b_a_fun_fun_tree$)
(declare-fun selectf$ (B_c_fun_tree$)B_c_fun$)
(declare-fun selectg$ (B_c_fun_tree$)B_c_fun_tree$)
(declare-fun selecth$ (B_c_fun_tree$)B_c_fun_tree$)
(declare-fun node$d (B_c_fun$ B_c_fun_tree$ B_c_fun_tree$ )B_c_fun_tree$)
(declare-fun selecti$ (C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)C_a_fun_b_c_fun_b_a_fun_fun_fun$)
(declare-fun selectj$ (C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun selectk$ (C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$e (C_a_fun_b_c_fun_b_a_fun_fun_fun$ C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$)
(declare-fun selectl$ (C_a_fun_tree$)C_a_fun$)
(declare-fun selectm$ (C_a_fun_tree$)C_a_fun_tree$)
(declare-fun selectn$ (C_a_fun_tree$)C_a_fun_tree$)
(declare-fun node$f (C_a_fun$ C_a_fun_tree$ C_a_fun_tree$ )C_a_fun_tree$)
(declare-fun root$b (C_tree$)C$)
(declare-fun left$b (C_tree$)C_tree$)
(declare-fun right$b (C_tree$)C_tree$)
(declare-fun node$g (C$ C_tree$ C_tree$ )C_tree$)
(declare-fun selecto$ (C_c_fun_tree$)C_c_fun$)
(declare-fun selectp$ (C_c_fun_tree$)C_c_fun_tree$)
(declare-fun selectq$ (C_c_fun_tree$)C_c_fun_tree$)
(declare-fun node$h (C_c_fun$ C_c_fun_tree$ C_c_fun_tree$ )C_c_fun_tree$)
(declare-fun selectr$ (C_b_fun_tree$)C_b_fun$)
(declare-fun selects$ (C_b_fun_tree$)C_b_fun_tree$)
(declare-fun selectt$ (C_b_fun_tree$)C_b_fun_tree$)
(declare-fun node$i (C_b_fun$ C_b_fun_tree$ C_b_fun_tree$ )C_b_fun_tree$)
(declare-fun selectu$ (B_b_fun_tree$)B_b_fun$)
(declare-fun selectv$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun selectw$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun node$j (B_b_fun$ B_b_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$)
(declare-fun selectx$ (A_c_fun_tree$)A_c_fun$)
(declare-fun selecty$ (A_c_fun_tree$)A_c_fun_tree$)
(declare-fun selectz$ (A_c_fun_tree$)A_c_fun_tree$)
(declare-fun node$k (A_c_fun$ A_c_fun_tree$ A_c_fun_tree$ )A_c_fun_tree$)
(declare-fun selecua$ (A_b_fun_tree$)A_b_fun$)
(declare-fun selecub$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun selecuc$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun node$l (A_b_fun$ A_b_fun_tree$ A_b_fun_tree$ )A_b_fun_tree$)
(declare-fun r1$ ()C_a_fun_tree$ )
(declare-fun r2$ ()B_c_fun_tree$ )
(declare-fun r3$ ()B_tree$ )
(declare-fun comp$ ()C_a_fun_b_c_fun_b_a_fun_fun_fun$ )
(declare-fun comp$a (C_a_fun$ )C_c_fun_c_a_fun_fun$ )
(declare-fun comp$b (B_c_fun$ )B_b_fun_b_c_fun_fun$ )
(declare-fun comp$c (B_a_fun$ )B_b_fun_b_a_fun_fun$ )
(declare-fun comp$d (A_a_fun$ )C_a_fun_c_a_fun_fun$ )
(declare-fun comp$e (A_a_fun$ )B_a_fun_b_a_fun_fun$ )
(declare-fun comp$f (C_c_fun$ )B_c_fun_b_c_fun_fun$ )
(declare-fun comp$g (A_c_fun$ )B_a_fun_b_c_fun_fun$ )
(declare-fun comp$h (C_a_fun$ )A_c_fun_a_a_fun_fun$ )
(declare-fun comp$i (B_c_fun$ )C_b_fun_c_c_fun_fun$ )
(declare-fun comp$j (B_a_fun$ )C_b_fun_c_a_fun_fun$ )
(declare-fun comp$k (C_c_fun$ )C_c_fun_c_c_fun_fun$ )
(declare-fun comp$l (A_c_fun$ )C_a_fun_c_c_fun_fun$ )
(declare-fun comp$m (B_b_fun$ )B_b_fun_b_b_fun_fun$ )
(declare-fun comp$n (C_b_fun$ )B_c_fun_b_b_fun_fun$ )
(declare-fun comp$o (B_b_fun$ )C_b_fun_c_b_fun_fun$ )
(declare-fun comp$p (C_b_fun$ )C_c_fun_c_b_fun_fun$ )
(declare-fun comp$q (A_b_fun$ )C_a_fun_c_b_fun_fun$ )
(declare-fun comp$r (B_a_fun$ )A_b_fun_a_a_fun_fun$ )
(declare-fun comp$s (A_b_fun$ )B_a_fun_b_b_fun_fun$ )
(declare-fun comp$t (A_c_fun$ )A_a_fun_a_c_fun_fun$ )
(declare-fun comp$u (B_c_fun$ )A_b_fun_a_c_fun_fun$ )
(declare-fun comp$v (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun fun_app$ (C_a_fun$ C$ )A$ )
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun fun_app$a (C_c_fun_c_a_fun_fun$ C_c_fun$ )C_a_fun$ )
(declare-fun fun_app$b (C_c_fun$ C$ )C$ )
(declare-fun fun_app$c (B_c_fun$ B$ )C$ )
(declare-fun fun_app$d (B_b_fun_b_c_fun_fun$ B_b_fun$ )B_c_fun$ )
(declare-fun fun_app$e (B_b_fun$ B$ )B$ )
(declare-fun fun_app$f (B_a_fun$ B$ )A$ )
(declare-fun fun_app$g (B_b_fun_b_a_fun_fun$ B_b_fun$ )B_a_fun$ )
(declare-fun fun_app$h (C_a_fun_c_a_fun_fun$ C_a_fun$ )C_a_fun$ )
(declare-fun fun_app$i (A_a_fun$ A$ )A$ )
(declare-fun fun_app$j (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$k (B_c_fun_b_a_fun_fun$ B_c_fun$ )B_a_fun$ )
(declare-fun fun_app$l (C_a_fun_b_c_fun_b_a_fun_fun_fun$ C_a_fun$ )B_c_fun_b_a_fun_fun$ )
(declare-fun fun_app$m (C_b_fun$ C$ )B$ )
(declare-fun fun_app$n (A_c_fun$ A$ )C$ )
(declare-fun fun_app$o (A_b_fun$ A$ )B$ )
(declare-fun fun_app$p (B_c_fun_b_c_fun_fun$ B_c_fun$ )B_c_fun$ )
(declare-fun fun_app$q (B_a_fun_b_c_fun_fun$ B_a_fun$ )B_c_fun$ )
(declare-fun fun_app$r (A_c_fun_a_a_fun_fun$ A_c_fun$ )A_a_fun$ )
(declare-fun fun_app$s (C_b_fun_c_c_fun_fun$ C_b_fun$ )C_c_fun$ )
(declare-fun fun_app$t (C_b_fun_c_a_fun_fun$ C_b_fun$ )C_a_fun$ )
(declare-fun fun_app$u (C_c_fun_c_c_fun_fun$ C_c_fun$ )C_c_fun$ )
(declare-fun fun_app$v (C_a_fun_c_c_fun_fun$ C_a_fun$ )C_c_fun$ )
(declare-fun fun_app$w (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun$ )
(declare-fun fun_app$x (B_c_fun_b_b_fun_fun$ B_c_fun$ )B_b_fun$ )
(declare-fun fun_app$y (C_b_fun_c_b_fun_fun$ C_b_fun$ )C_b_fun$ )
(declare-fun fun_app$z (C_c_fun_c_b_fun_fun$ C_c_fun$ )C_b_fun$ )
(declare-fun tree_ap$a (B_c_fun_b_a_fun_fun_tree$ B_c_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$b (C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ C_a_fun_tree$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$c (C_a_fun_tree$ C_tree$ )A_tree$ )
(declare-fun tree_ap$d (B_c_fun_tree$ B_tree$ )C_tree$ )
(declare-fun tree_ap$e (C_c_fun_tree$ C_tree$ )C_tree$ )
(declare-fun tree_ap$f (C_b_fun_tree$ C_tree$ )B_tree$ )
(declare-fun tree_ap$g (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun tree_ap$h (A_c_fun_tree$ A_tree$ )C_tree$ )
(declare-fun tree_ap$i (A_b_fun_tree$ A_tree$ )B_tree$ )
(declare-fun fun_app$aa (C_a_fun_c_b_fun_fun$ C_a_fun$ )C_b_fun$ )
(declare-fun fun_app$ab (A_b_fun_a_a_fun_fun$ A_b_fun$ )A_a_fun$ )
(declare-fun fun_app$ac (B_a_fun_b_b_fun_fun$ B_a_fun$ )B_b_fun$ )
(declare-fun fun_app$ad (A_a_fun_a_c_fun_fun$ A_a_fun$ )A_c_fun$ )
(declare-fun fun_app$ae (A_b_fun_a_c_fun_fun$ A_b_fun$ )A_c_fun$ )
(declare-fun fun_app$af (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun tree_pure$ (C_a_fun_b_c_fun_b_a_fun_fun_fun$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$a (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$b (C_a_fun$ )C_a_fun_tree$ )
(declare-fun tree_pure$c (B_c_fun$ )B_c_fun_tree$ )
(declare-fun tree_pure$d (B_c_fun_b_a_fun_fun$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$e (C_c_fun$ )C_c_fun_tree$ )
(declare-fun tree_pure$f (C_b_fun$ )C_b_fun_tree$ )
(declare-fun tree_pure$g (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$h (A_c_fun$ )A_c_fun_tree$ )
(declare-fun tree_pure$i (A_b_fun$ )A_b_fun_tree$ )
(assert (! (not (= (tree_ap$ (tree_ap$a (tree_ap$b (tree_pure$ comp$ )r1$ )r2$ )r3$ )(tree_ap$c r1$ (tree_ap$d r2$ r3$ )))):named a0 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C$ ))(! (= (fun_app$ (fun_app$a (comp$a ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (comp$a ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$c (fun_app$d (comp$b ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$d (comp$b ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$f (fun_app$g (comp$c ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$g (comp$c ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$ (fun_app$h (comp$d ?v0 )?v1 )?v2 )(fun_app$i ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$h (comp$d ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$f (fun_app$j (comp$e ?v0 )?v1 )?v2 )(fun_app$i ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$j (comp$e ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B$ ))(! (= (fun_app$f (fun_app$k (fun_app$l comp$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$k (fun_app$l comp$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$ (tree_pure$a ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$ (fun_app$f ?v0 ?v1 )(tree_ap$ (tree_pure$a ?v0 )?v2 )(tree_ap$ (tree_pure$a ?v0 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$c (tree_pure$b ?v0 )(node$g ?v1 ?v2 ?v3 ))(node$ (fun_app$ ?v0 ?v1 )(tree_ap$c (tree_pure$b ?v0 )?v2 )(tree_ap$c (tree_pure$b ?v0 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$d (tree_pure$c ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$g (fun_app$c ?v0 ?v1 )(tree_ap$d (tree_pure$c ?v0 )?v2 )(tree_ap$d (tree_pure$c ?v0 )?v3 )))):named a9 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun$ )(?v1 B_c_fun$ )(?v2 B_c_fun_tree$ )(?v3 B_c_fun_tree$ ))(= (tree_ap$a (tree_pure$d ?v0 )(node$d ?v1 ?v2 ?v3 ))(node$a (fun_app$k ?v0 ?v1 )(tree_ap$a (tree_pure$d ?v0 )?v2 )(tree_ap$a (tree_pure$d ?v0 )?v3 )))):named a10 ))
(assert (! (forall ((?v0 C_a_fun_b_c_fun_b_a_fun_fun_fun$ )(?v1 C_a_fun$ )(?v2 C_a_fun_tree$ )(?v3 C_a_fun_tree$ ))(= (tree_ap$b (tree_pure$ ?v0 )(node$f ?v1 ?v2 ?v3 ))(node$c (fun_app$l ?v0 ?v1 )(tree_ap$b (tree_pure$ ?v0 )?v2 )(tree_ap$b (tree_pure$ ?v0 )?v3 )))):named a11 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$e (tree_pure$e ?v0 )(node$g ?v1 ?v2 ?v3 ))(node$g (fun_app$b ?v0 ?v1 )(tree_ap$e (tree_pure$e ?v0 )?v2 )(tree_ap$e (tree_pure$e ?v0 )?v3 )))):named a12 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$f (tree_pure$f ?v0 )(node$g ?v1 ?v2 ?v3 ))(node$b (fun_app$m ?v0 ?v1 )(tree_ap$f (tree_pure$f ?v0 )?v2 )(tree_ap$f (tree_pure$f ?v0 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$g (tree_pure$g ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$b (fun_app$e ?v0 ?v1 )(tree_ap$g (tree_pure$g ?v0 )?v2 )(tree_ap$g (tree_pure$g ?v0 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$h (tree_pure$h ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$g (fun_app$n ?v0 ?v1 )(tree_ap$h (tree_pure$h ?v0 )?v2 )(tree_ap$h (tree_pure$h ?v0 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$i (tree_pure$i ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$b (fun_app$o ?v0 ?v1 )(tree_ap$i (tree_pure$i ?v0 )?v2 )(tree_ap$i (tree_pure$i ?v0 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 B_c_fun$ ))(= (fun_app$j (comp$e ?v0 )(fun_app$k (fun_app$l comp$ ?v1 )?v2 ))(fun_app$k (fun_app$l comp$ (fun_app$h (comp$d ?v0 )?v1 ))?v2 ))):named a17 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_b_fun$ ))(= (fun_app$k (fun_app$l comp$ ?v0 )(fun_app$d (comp$b ?v1 )?v2 ))(fun_app$g (comp$c (fun_app$k (fun_app$l comp$ ?v0 )?v1 ))?v2 ))):named a18 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 B_c_fun$ ))(= (fun_app$k (fun_app$l comp$ ?v0 )(fun_app$p (comp$f ?v1 )?v2 ))(fun_app$k (fun_app$l comp$ (fun_app$a (comp$a ?v0 )?v1 ))?v2 ))):named a19 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 B_c_fun$ )(?v2 B_b_fun$ ))(= (fun_app$p (comp$f ?v0 )(fun_app$d (comp$b ?v1 )?v2 ))(fun_app$d (comp$b (fun_app$p (comp$f ?v0 )?v1 ))?v2 ))):named a20 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (fun_app$q (comp$g ?v0 )(fun_app$g (comp$c ?v1 )?v2 ))(fun_app$d (comp$b (fun_app$q (comp$g ?v0 )?v1 ))?v2 ))):named a21 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 A_c_fun$ )(?v2 B_a_fun$ ))(= (fun_app$k (fun_app$l comp$ ?v0 )(fun_app$q (comp$g ?v1 )?v2 ))(fun_app$j (comp$e (fun_app$r (comp$h ?v0 )?v1 ))?v2 ))):named a22 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 C_b_fun$ ))(= (fun_app$a (comp$a ?v0 )(fun_app$s (comp$i ?v1 )?v2 ))(fun_app$t (comp$j (fun_app$k (fun_app$l comp$ ?v0 )?v1 ))?v2 ))):named a23 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_c_fun$ ))(= (fun_app$a (comp$a ?v0 )(fun_app$u (comp$k ?v1 )?v2 ))(fun_app$a (comp$a (fun_app$a (comp$a ?v0 )?v1 ))?v2 ))):named a24 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 A_c_fun$ )(?v2 C_a_fun$ ))(= (fun_app$a (comp$a ?v0 )(fun_app$v (comp$l ?v1 )?v2 ))(fun_app$h (comp$d (fun_app$r (comp$h ?v0 )?v1 ))?v2 ))):named a25 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$d (comp$b ?v0 )(fun_app$w (comp$m ?v1 )?v2 ))(fun_app$d (comp$b (fun_app$d (comp$b ?v0 )?v1 ))?v2 ))):named a26 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_b_fun$ ))(= (fun_app$g (comp$c (fun_app$k (fun_app$l comp$ ?v0 )?v1 ))?v2 )(fun_app$k (fun_app$l comp$ ?v0 )(fun_app$d (comp$b ?v1 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 B_c_fun$ ))(= (fun_app$k (fun_app$l comp$ (fun_app$h (comp$d ?v0 )?v1 ))?v2 )(fun_app$j (comp$e ?v0 )(fun_app$k (fun_app$l comp$ ?v1 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 B_c_fun$ ))(= (fun_app$k (fun_app$l comp$ (fun_app$a (comp$a ?v0 )?v1 ))?v2 )(fun_app$k (fun_app$l comp$ ?v0 )(fun_app$p (comp$f ?v1 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 C_b_fun$ ))(= (fun_app$t (comp$j (fun_app$k (fun_app$l comp$ ?v0 )?v1 ))?v2 )(fun_app$a (comp$a ?v0 )(fun_app$s (comp$i ?v1 )?v2 )))):named a30 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (fun_app$t (comp$j (fun_app$j (comp$e ?v0 )?v1 ))?v2 )(fun_app$h (comp$d ?v0 )(fun_app$t (comp$j ?v1 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_c_fun$ ))(= (fun_app$k (fun_app$l comp$ (fun_app$t (comp$j ?v0 )?v1 ))?v2 )(fun_app$g (comp$c ?v0 )(fun_app$x (comp$n ?v1 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_c_fun$ ))(= (fun_app$a (comp$a (fun_app$a (comp$a ?v0 )?v1 ))?v2 )(fun_app$a (comp$a ?v0 )(fun_app$u (comp$k ?v1 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_c_fun$ ))(= (fun_app$a (comp$a (fun_app$h (comp$d ?v0 )?v1 ))?v2 )(fun_app$h (comp$d ?v0 )(fun_app$a (comp$a ?v1 )?v2 )))):named a34 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 B_c_fun$ )(?v2 B_b_fun$ ))(= (fun_app$d (comp$b (fun_app$p (comp$f ?v0 )?v1 ))?v2 )(fun_app$p (comp$f ?v0 )(fun_app$d (comp$b ?v1 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (fun_app$d (comp$b (fun_app$q (comp$g ?v0 )?v1 ))?v2 )(fun_app$q (comp$g ?v0 )(fun_app$g (comp$c ?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C$ ))(! (= (fun_app$ (fun_app$a (comp$a ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (comp$a ?v0 )?v1 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$c (fun_app$d (comp$b ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$d (comp$b ?v0 )?v1 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$f (fun_app$g (comp$c ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$g (comp$c ?v0 )?v1 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$ (fun_app$h (comp$d ?v0 )?v1 )?v2 )(fun_app$i ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$h (comp$d ?v0 )?v1 )?v2 )))):named a40 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$f (fun_app$j (comp$e ?v0 )?v1 )?v2 )(fun_app$i ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$j (comp$e ?v0 )?v1 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B$ ))(! (= (fun_app$f (fun_app$k (fun_app$l comp$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$k (fun_app$l comp$ ?v0 )?v1 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 C_a_fun$ )(?v3 B_c_fun$ ))(=> (and (= (fun_app$k (fun_app$l comp$ ?v0 )?v1 )(fun_app$k (fun_app$l comp$ ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$ ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$c ?v3 ?v4 ))))false ))false )):named a43 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$k (fun_app$l comp$ ?v0 )?v1 )(fun_app$g (comp$c ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$ ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$e ?v3 ?v4 ))))false ))false )):named a44 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (and (= (fun_app$k (fun_app$l comp$ ?v0 )?v1 )(fun_app$j (comp$e ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$ ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$i ?v2 (fun_app$f ?v3 ?v4 ))))false ))false )):named a45 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ ))(=> (and (= (fun_app$a (comp$a ?v0 )?v1 )(fun_app$a (comp$a ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$ ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$b ?v3 ?v4 ))))false ))false )):named a46 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (and (= (fun_app$a (comp$a ?v0 )?v1 )(fun_app$h (comp$d ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$ ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$i ?v2 (fun_app$ ?v3 ?v4 ))))false ))false )):named a47 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_b_fun$ )(?v2 B_c_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$d (comp$b ?v0 )?v1 )(fun_app$d (comp$b ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$c ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$e ?v3 ?v4 ))))false ))false )):named a48 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 C_a_fun$ )(?v3 B_c_fun$ ))(=> (and (= (fun_app$g (comp$c ?v0 )?v1 )(fun_app$k (fun_app$l comp$ ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$f ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$c ?v3 ?v4 ))))false ))false )):named a49 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$g (comp$c ?v0 )?v1 )(fun_app$g (comp$c ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$f ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$e ?v3 ?v4 ))))false ))false )):named a50 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (and (= (fun_app$g (comp$c ?v0 )?v1 )(fun_app$j (comp$e ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$f ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$i ?v2 (fun_app$f ?v3 ?v4 ))))false ))false )):named a51 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ ))(=> (and (= (fun_app$h (comp$d ?v0 )?v1 )(fun_app$a (comp$a ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$i ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$b ?v3 ?v4 ))))false ))false )):named a52 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_b_fun$ )(?v2 C_c_fun$ )(?v3 B_c_fun$ )(?v4 C_a_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$d (comp$b ?v0 )?v1 )(fun_app$p (comp$f ?v2 )?v3 ))(= (fun_app$a (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$g (comp$c (fun_app$k (fun_app$l comp$ ?v4 )?v0 ))?v1 )(fun_app$k (fun_app$l comp$ ?v5 )?v3 )))):named a53 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 B_c_fun$ )(?v2 B_c_fun$ )(?v3 B_b_fun$ )(?v4 C_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$p (comp$f ?v0 )?v1 )(fun_app$d (comp$b ?v2 )?v3 ))(= (fun_app$k (fun_app$l comp$ ?v4 )?v2 )?v5 ))(= (fun_app$k (fun_app$l comp$ (fun_app$a (comp$a ?v4 )?v0 ))?v1 )(fun_app$g (comp$c ?v5 )?v3 )))):named a54 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 C_a_fun$ )(?v3 B_c_fun$ )(?v4 A_a_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$k (fun_app$l comp$ ?v0 )?v1 )(fun_app$k (fun_app$l comp$ ?v2 )?v3 ))(= (fun_app$h (comp$d ?v4 )?v2 )?v5 ))(= (fun_app$k (fun_app$l comp$ (fun_app$h (comp$d ?v4 )?v0 ))?v1 )(fun_app$k (fun_app$l comp$ ?v5 )?v3 )))):named a55 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 C_b_fun$ )(?v2 A_c_fun$ )(?v3 C_a_fun$ )(?v4 C_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$s (comp$i ?v0 )?v1 )(fun_app$v (comp$l ?v2 )?v3 ))(= (fun_app$r (comp$h ?v4 )?v2 )?v5 ))(= (fun_app$t (comp$j (fun_app$k (fun_app$l comp$ ?v4 )?v0 ))?v1 )(fun_app$h (comp$d ?v5 )?v3 )))):named a56 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C_b_fun$ )(?v3 C_c_fun$ )(?v4 B_a_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$y (comp$o ?v0 )?v1 )(fun_app$z (comp$p ?v2 )?v3 ))(= (fun_app$t (comp$j ?v4 )?v2 )?v5 ))(= (fun_app$t (comp$j (fun_app$g (comp$c ?v4 )?v0 ))?v1 )(fun_app$a (comp$a ?v5 )?v3 )))):named a57 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 A_b_fun$ )(?v3 C_a_fun$ )(?v4 B_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$y (comp$o ?v0 )?v1 )(fun_app$aa (comp$q ?v2 )?v3 ))(= (fun_app$ab (comp$r ?v4 )?v2 )?v5 ))(= (fun_app$t (comp$j (fun_app$g (comp$c ?v4 )?v0 ))?v1 )(fun_app$h (comp$d ?v5 )?v3 )))):named a58 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 B_c_fun$ )(?v2 A_c_fun$ )(?v3 B_a_fun$ )(?v4 C_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$p (comp$f ?v0 )?v1 )(fun_app$q (comp$g ?v2 )?v3 ))(= (fun_app$r (comp$h ?v4 )?v2 )?v5 ))(= (fun_app$k (fun_app$l comp$ (fun_app$a (comp$a ?v4 )?v0 ))?v1 )(fun_app$j (comp$e ?v5 )?v3 )))):named a59 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_c_fun$ )(?v2 A_c_fun$ )(?v3 C_a_fun$ )(?v4 C_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$u (comp$k ?v0 )?v1 )(fun_app$v (comp$l ?v2 )?v3 ))(= (fun_app$r (comp$h ?v4 )?v2 )?v5 ))(= (fun_app$a (comp$a (fun_app$a (comp$a ?v4 )?v0 ))?v1 )(fun_app$h (comp$d ?v5 )?v3 )))):named a60 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 C_b_fun$ )(?v3 B_c_fun$ )(?v4 B_a_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$w (comp$m ?v0 )?v1 )(fun_app$x (comp$n ?v2 )?v3 ))(= (fun_app$t (comp$j ?v4 )?v2 )?v5 ))(= (fun_app$g (comp$c (fun_app$g (comp$c ?v4 )?v0 ))?v1 )(fun_app$k (fun_app$l comp$ ?v5 )?v3 )))):named a61 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ )(?v3 B_a_fun$ )(?v4 B_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$w (comp$m ?v0 )?v1 )(fun_app$ac (comp$s ?v2 )?v3 ))(= (fun_app$ab (comp$r ?v4 )?v2 )?v5 ))(= (fun_app$g (comp$c (fun_app$g (comp$c ?v4 )?v0 ))?v1 )(fun_app$j (comp$e ?v5 )?v3 )))):named a62 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ )(?v4 B_c_fun$ )(?v5 B_c_fun$ ))(=> (and (= (fun_app$h (comp$d ?v0 )?v1 )(fun_app$a (comp$a ?v2 )?v3 ))(= (fun_app$p (comp$f ?v3 )?v4 )?v5 ))(= (fun_app$j (comp$e ?v0 )(fun_app$k (fun_app$l comp$ ?v1 )?v4 ))(fun_app$k (fun_app$l comp$ ?v2 )?v5 )))):named a63 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ )(?v4 B_c_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$a (comp$a ?v0 )?v1 )(fun_app$h (comp$d ?v2 )?v3 ))(= (fun_app$k (fun_app$l comp$ ?v3 )?v4 )?v5 ))(= (fun_app$k (fun_app$l comp$ ?v0 )(fun_app$p (comp$f ?v1 )?v4 ))(fun_app$j (comp$e ?v2 )?v5 )))):named a64 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 C_a_fun$ )(?v3 B_c_fun$ )(?v4 B_b_fun$ )(?v5 B_c_fun$ ))(=> (and (= (fun_app$k (fun_app$l comp$ ?v0 )?v1 )(fun_app$k (fun_app$l comp$ ?v2 )?v3 ))(= (fun_app$d (comp$b ?v3 )?v4 )?v5 ))(= (fun_app$k (fun_app$l comp$ ?v0 )(fun_app$d (comp$b ?v1 )?v4 ))(fun_app$k (fun_app$l comp$ ?v2 )?v5 )))):named a65 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 C_a_fun$ )(?v2 B_c_fun$ )(?v3 C_b_fun$ )(?v4 B_c_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$v (comp$l ?v0 )?v1 )(fun_app$s (comp$i ?v2 )?v3 ))(= (fun_app$x (comp$n ?v3 )?v4 )?v5 ))(= (fun_app$q (comp$g ?v0 )(fun_app$k (fun_app$l comp$ ?v1 )?v4 ))(fun_app$d (comp$b ?v2 )?v5 )))):named a66 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_a_fun$ )(?v2 B_c_fun$ )(?v3 A_b_fun$ )(?v4 B_a_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$ad (comp$t ?v0 )?v1 )(fun_app$ae (comp$u ?v2 )?v3 ))(= (fun_app$ac (comp$s ?v3 )?v4 )?v5 ))(= (fun_app$q (comp$g ?v0 )(fun_app$j (comp$e ?v1 )?v4 ))(fun_app$d (comp$b ?v2 )?v5 )))):named a67 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 C_a_fun$ )(?v3 A_c_fun$ )(?v4 C_a_fun$ )(?v5 C_c_fun$ ))(=> (and (= (fun_app$af (comp$v ?v0 )?v1 )(fun_app$r (comp$h ?v2 )?v3 ))(= (fun_app$v (comp$l ?v3 )?v4 )?v5 ))(= (fun_app$h (comp$d ?v0 )(fun_app$h (comp$d ?v1 )?v4 ))(fun_app$a (comp$a ?v2 )?v5 )))):named a68 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 C_a_fun$ )(?v3 A_c_fun$ )(?v4 B_a_fun$ )(?v5 B_c_fun$ ))(=> (and (= (fun_app$af (comp$v ?v0 )?v1 )(fun_app$r (comp$h ?v2 )?v3 ))(= (fun_app$q (comp$g ?v3 )?v4 )?v5 ))(= (fun_app$j (comp$e ?v0 )(fun_app$j (comp$e ?v1 )?v4 ))(fun_app$k (fun_app$l comp$ ?v2 )?v5 )))):named a69 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 B_a_fun$ )(?v3 A_b_fun$ )(?v4 B_a_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$af (comp$v ?v0 )?v1 )(fun_app$ab (comp$r ?v2 )?v3 ))(= (fun_app$ac (comp$s ?v3 )?v4 )?v5 ))(= (fun_app$j (comp$e ?v0 )(fun_app$j (comp$e ?v1 )?v4 ))(fun_app$g (comp$c ?v2 )?v5 )))):named a70 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 C_b_fun$ )(?v2 A_c_fun$ )(?v3 C_a_fun$ )(?v4 B_c_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$s (comp$i ?v0 )?v1 )(fun_app$v (comp$l ?v2 )?v3 ))(= (fun_app$k (fun_app$l comp$ ?v3 )?v4 )?v5 ))(= (fun_app$d (comp$b ?v0 )(fun_app$x (comp$n ?v1 )?v4 ))(fun_app$q (comp$g ?v2 )?v5 )))):named a71 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 A_c_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 C_a_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$r (comp$h ?v0 )?v1 )(fun_app$af (comp$v ?v2 )?v3 ))(= (fun_app$h (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$a (comp$a ?v0 )(fun_app$v (comp$l ?v1 )?v4 ))(fun_app$h (comp$d ?v2 )?v5 )))):named a72 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 C_a_fun$ )(?v3 B_c_fun$ )(?v4 B$ ))(=> (= (fun_app$k (fun_app$l comp$ ?v0 )?v1 )(fun_app$k (fun_app$l comp$ ?v2 )?v3 ))(= (fun_app$ ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$c ?v3 ?v4 ))))):named a73 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$k (fun_app$l comp$ ?v0 )?v1 )(fun_app$g (comp$c ?v2 )?v3 ))(= (fun_app$ ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$e ?v3 ?v4 ))))):named a74 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 B$ ))(=> (= (fun_app$k (fun_app$l comp$ ?v0 )?v1 )(fun_app$j (comp$e ?v2 )?v3 ))(= (fun_app$ ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$i ?v2 (fun_app$f ?v3 ?v4 ))))):named a75 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(=> (= (fun_app$a (comp$a ?v0 )?v1 )(fun_app$a (comp$a ?v2 )?v3 ))(= (fun_app$ ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$b ?v3 ?v4 ))))):named a76 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ )(?v4 C$ ))(=> (= (fun_app$a (comp$a ?v0 )?v1 )(fun_app$h (comp$d ?v2 )?v3 ))(= (fun_app$ ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$i ?v2 (fun_app$ ?v3 ?v4 ))))):named a77 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_b_fun$ )(?v2 B_c_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$d (comp$b ?v0 )?v1 )(fun_app$d (comp$b ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$e ?v3 ?v4 ))))):named a78 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 C_a_fun$ )(?v3 B_c_fun$ )(?v4 B$ ))(=> (= (fun_app$g (comp$c ?v0 )?v1 )(fun_app$k (fun_app$l comp$ ?v2 )?v3 ))(= (fun_app$f ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$c ?v3 ?v4 ))))):named a79 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$g (comp$c ?v0 )?v1 )(fun_app$g (comp$c ?v2 )?v3 ))(= (fun_app$f ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$e ?v3 ?v4 ))))):named a80 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 B$ ))(=> (= (fun_app$g (comp$c ?v0 )?v1 )(fun_app$j (comp$e ?v2 )?v3 ))(= (fun_app$f ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$i ?v2 (fun_app$f ?v3 ?v4 ))))):named a81 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(=> (= (fun_app$h (comp$d ?v0 )?v1 )(fun_app$a (comp$a ?v2 )?v3 ))(= (fun_app$i ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$b ?v3 ?v4 ))))):named a82 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_b_fun$ )(?v2 B_c_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$d (comp$b ?v0 )?v1 )?v2 )(= (fun_app$g (comp$c (fun_app$k (fun_app$l comp$ ?v3 )?v0 ))?v1 )(fun_app$k (fun_app$l comp$ ?v3 )?v2 )))):named a83 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 B_c_fun$ )(?v2 B_c_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$p (comp$f ?v0 )?v1 )?v2 )(= (fun_app$k (fun_app$l comp$ (fun_app$a (comp$a ?v3 )?v0 ))?v1 )(fun_app$k (fun_app$l comp$ ?v3 )?v2 )))):named a84 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$k (fun_app$l comp$ ?v0 )?v1 )?v2 )(= (fun_app$k (fun_app$l comp$ (fun_app$h (comp$d ?v3 )?v0 ))?v1 )(fun_app$j (comp$e ?v3 )?v2 )))):named a85 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 C_b_fun$ )(?v2 C_c_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$s (comp$i ?v0 )?v1 )?v2 )(= (fun_app$t (comp$j (fun_app$k (fun_app$l comp$ ?v3 )?v0 ))?v1 )(fun_app$a (comp$a ?v3 )?v2 )))):named a86 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$t (comp$j ?v0 )?v1 )?v2 )(= (fun_app$t (comp$j (fun_app$j (comp$e ?v3 )?v0 ))?v1 )(fun_app$h (comp$d ?v3 )?v2 )))):named a87 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 B_c_fun$ )(?v2 B_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$x (comp$n ?v0 )?v1 )?v2 )(= (fun_app$k (fun_app$l comp$ (fun_app$t (comp$j ?v3 )?v0 ))?v1 )(fun_app$g (comp$c ?v3 )?v2 )))):named a88 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_c_fun$ )(?v2 C_c_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$u (comp$k ?v0 )?v1 )?v2 )(= (fun_app$a (comp$a (fun_app$a (comp$a ?v3 )?v0 ))?v1 )(fun_app$a (comp$a ?v3 )?v2 )))):named a89 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_c_fun$ ))(=> (= (fun_app$w (comp$m ?v0 )?v1 )?v2 )(= (fun_app$d (comp$b (fun_app$d (comp$b ?v3 )?v0 ))?v1 )(fun_app$d (comp$b ?v3 )?v2 )))):named a90 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$w (comp$m ?v0 )?v1 )?v2 )(= (fun_app$g (comp$c (fun_app$g (comp$c ?v3 )?v0 ))?v1 )(fun_app$g (comp$c ?v3 )?v2 )))):named a91 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 C_a_fun$ )(?v2 C_c_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$v (comp$l ?v0 )?v1 )?v2 )(= (fun_app$h (comp$d (fun_app$r (comp$h ?v3 )?v0 ))?v1 )(fun_app$a (comp$a ?v3 )?v2 )))):named a92 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_a_fun$ )(?v3 B_c_fun$ ))(=> (= (fun_app$h (comp$d ?v0 )?v1 )?v2 )(= (fun_app$j (comp$e ?v0 )(fun_app$k (fun_app$l comp$ ?v1 )?v3 ))(fun_app$k (fun_app$l comp$ ?v2 )?v3 )))):named a93 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_a_fun$ )(?v3 B_c_fun$ ))(=> (= (fun_app$a (comp$a ?v0 )?v1 )?v2 )(= (fun_app$k (fun_app$l comp$ ?v0 )(fun_app$p (comp$f ?v1 )?v3 ))(fun_app$k (fun_app$l comp$ ?v2 )?v3 )))):named a94 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$k (fun_app$l comp$ ?v0 )?v1 )?v2 )(= (fun_app$k (fun_app$l comp$ ?v0 )(fun_app$d (comp$b ?v1 )?v3 ))(fun_app$g (comp$c ?v2 )?v3 )))):named a95 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 B_c_fun$ )(?v2 B_c_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$p (comp$f ?v0 )?v1 )?v2 )(= (fun_app$p (comp$f ?v0 )(fun_app$d (comp$b ?v1 )?v3 ))(fun_app$d (comp$b ?v2 )?v3 )))):named a96 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 B_a_fun$ )(?v2 B_c_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$q (comp$g ?v0 )?v1 )?v2 )(= (fun_app$q (comp$g ?v0 )(fun_app$g (comp$c ?v1 )?v3 ))(fun_app$d (comp$b ?v2 )?v3 )))):named a97 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 A_c_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$r (comp$h ?v0 )?v1 )?v2 )(= (fun_app$k (fun_app$l comp$ ?v0 )(fun_app$q (comp$g ?v1 )?v3 ))(fun_app$j (comp$e ?v2 )?v3 )))):named a98 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 A_c_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$r (comp$h ?v0 )?v1 )?v2 )(= (fun_app$a (comp$a ?v0 )(fun_app$v (comp$l ?v1 )?v3 ))(fun_app$h (comp$d ?v2 )?v3 )))):named a99 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 B_c_fun$ ))(=> (= (fun_app$t (comp$j ?v0 )?v1 )?v2 )(= (fun_app$g (comp$c ?v0 )(fun_app$x (comp$n ?v1 )?v3 ))(fun_app$k (fun_app$l comp$ ?v2 )?v3 )))):named a100 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$ab (comp$r ?v0 )?v1 )?v2 )(= (fun_app$g (comp$c ?v0 )(fun_app$ac (comp$s ?v1 )?v3 ))(fun_app$j (comp$e ?v2 )?v3 )))):named a101 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$af (comp$v ?v0 )?v1 )?v2 )(= (fun_app$h (comp$d ?v0 )(fun_app$h (comp$d ?v1 )?v3 ))(fun_app$h (comp$d ?v2 )?v3 )))):named a102 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_a_fun$ )(?v3 C$ ))(=> (= (fun_app$a (comp$a ?v0 )?v1 )?v2 )(= (fun_app$ ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$ ?v2 ?v3 )))):named a103 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_b_fun$ )(?v2 B_c_fun$ )(?v3 B$ ))(=> (= (fun_app$d (comp$b ?v0 )?v1 )?v2 )(= (fun_app$c ?v0 (fun_app$e ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a104 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B$ ))(=> (= (fun_app$g (comp$c ?v0 )?v1 )?v2 )(= (fun_app$f ?v0 (fun_app$e ?v1 ?v3 ))(fun_app$f ?v2 ?v3 )))):named a105 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_a_fun$ )(?v3 C$ ))(=> (= (fun_app$h (comp$d ?v0 )?v1 )?v2 )(= (fun_app$i ?v0 (fun_app$ ?v1 ?v3 ))(fun_app$ ?v2 ?v3 )))):named a106 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B$ ))(=> (= (fun_app$j (comp$e ?v0 )?v1 )?v2 )(= (fun_app$i ?v0 (fun_app$f ?v1 ?v3 ))(fun_app$f ?v2 ?v3 )))):named a107 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_a_fun$ )(?v3 B$ ))(=> (= (fun_app$k (fun_app$l comp$ ?v0 )?v1 )?v2 )(= (fun_app$ ?v0 (fun_app$c ?v1 ?v3 ))(fun_app$f ?v2 ?v3 )))):named a108 ))
(assert (! (forall ((?v0 C$ )(?v1 C_tree$ )(?v2 C_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(= (= (node$g ?v0 ?v1 ?v2 )(node$g ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a109 ))
(assert (! (forall ((?v0 B$ )(?v1 B_tree$ )(?v2 B_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(= (= (node$b ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a110 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a111 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$ (fun_app$f ?v0 ?v3 )(tree_ap$ ?v1 ?v4 )(tree_ap$ ?v2 ?v5 ))):pattern ((tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a112 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun$ )(?v1 B_c_fun_b_a_fun_fun_tree$ )(?v2 B_c_fun_b_a_fun_fun_tree$ )(?v3 B_c_fun$ )(?v4 B_c_fun_tree$ )(?v5 B_c_fun_tree$ ))(! (= (tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$a (fun_app$k ?v0 ?v3 )(tree_ap$a ?v1 ?v4 )(tree_ap$a ?v2 ?v5 ))):pattern ((tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a113 ))
(assert (! (forall ((?v0 C_a_fun_b_c_fun_b_a_fun_fun_fun$ )(?v1 C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )(?v2 C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )(?v3 C_a_fun$ )(?v4 C_a_fun_tree$ )(?v5 C_a_fun_tree$ ))(! (= (tree_ap$b (node$e ?v0 ?v1 ?v2 )(node$f ?v3 ?v4 ?v5 ))(node$c (fun_app$l ?v0 ?v3 )(tree_ap$b ?v1 ?v4 )(tree_ap$b ?v2 ?v5 ))):pattern ((tree_ap$b (node$e ?v0 ?v1 ?v2 )(node$f ?v3 ?v4 ?v5 ))))):named a114 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_a_fun_tree$ )(?v2 C_a_fun_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(! (= (tree_ap$c (node$f ?v0 ?v1 ?v2 )(node$g ?v3 ?v4 ?v5 ))(node$ (fun_app$ ?v0 ?v3 )(tree_ap$c ?v1 ?v4 )(tree_ap$c ?v2 ?v5 ))):pattern ((tree_ap$c (node$f ?v0 ?v1 ?v2 )(node$g ?v3 ?v4 ?v5 ))))):named a115 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_c_fun_tree$ )(?v2 B_c_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$d (node$d ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$g (fun_app$c ?v0 ?v3 )(tree_ap$d ?v1 ?v4 )(tree_ap$d ?v2 ?v5 ))):pattern ((tree_ap$d (node$d ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a116 ))
(assert (! (forall ((?v0 C_a_fun_b_c_fun_b_a_fun_fun_fun$ ))(! (= (tree_pure$ ?v0 )(node$e ?v0 (tree_pure$ ?v0 )(tree_pure$ ?v0 ))):pattern ((tree_pure$ ?v0 )))):named a117 ))
(check-sat )
;(get-unsat-core )
