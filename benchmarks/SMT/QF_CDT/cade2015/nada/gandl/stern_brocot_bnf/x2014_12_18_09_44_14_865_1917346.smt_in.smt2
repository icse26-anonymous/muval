;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun$ 0 )
(declare-sort B_a_fun_b_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort A_a_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_b_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_a_fun_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort A_b_fun_b_a_fun_b_b_fun_fun_fun$ 0 )
(declare-sort B_a_fun_a_b_fun_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_b_b_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_a_fun_a_fun_fun_a_b_a_fun_a_fun_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort B_a_fun_tree$ 0)
(declare-sort B_tree$ 0)
(declare-sort A_b_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_fun_tree$ 0)
(declare-sort B_a_fun_b_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_fun_tree$ 0)
(declare-sort B_b_fun_tree$ 0)
(declare-sort A_b_fun_tree$ 0)
(declare-sort B_a_fun_b_fun_tree$ 0)
(declare-sort B_a_fun_a_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_b_fun_tree$ 0)
(declare-sort A_a_b_a_fun_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_a_fun_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_a_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_a_fun_a_fun_fun_a_b_a_fun_a_fun_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_a_fun_a_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_b_a_fun_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort A_b_a_fun_fun_a_b_a_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_b_fun_fun_tree$ 0)
(declare-sort A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$ 0)
(declare-sort B_b_fun_b_b_fun_fun_tree$ 0)
(declare-sort B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$ 0)
(declare-sort A_b_fun_a_a_fun_fun_tree$ 0)
(declare-sort B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort B_b_a_fun_fun_b_a_fun_fun_tree$ 0)
(declare-sort B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ 0)
(declare-fun root$ (A_tree$)A$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun select$ (B_a_fun_tree$)B_a_fun$)
(declare-fun selecta$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun selectb$ (B_a_fun_tree$)B_a_fun_tree$)
(declare-fun node$a (B_a_fun$ B_a_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$)
(declare-fun root$a (B_tree$)B$)
(declare-fun left$a (B_tree$)B_tree$)
(declare-fun right$a (B_tree$)B_tree$)
(declare-fun node$b (B$ B_tree$ B_tree$ )B_tree$)
(declare-fun selectc$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun$)
(declare-fun selectd$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun_tree$)
(declare-fun selecte$ (A_b_a_fun_fun_tree$)A_b_a_fun_fun_tree$)
(declare-fun node$c (A_b_a_fun_fun$ A_b_a_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$)
(declare-fun selectf$ (A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)A_a_fun_b_a_fun_b_a_fun_fun_fun$)
(declare-fun selectg$ (A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecth$ (A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$d (A_a_fun_b_a_fun_b_a_fun_fun_fun$ A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecti$ (A_a_fun_tree$)A_a_fun$)
(declare-fun selectj$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun selectk$ (A_a_fun_tree$)A_a_fun_tree$)
(declare-fun node$e (A_a_fun$ A_a_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$)
(declare-fun selectl$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun$)
(declare-fun selectm$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun_tree$)
(declare-fun selectn$ (B_a_fun_b_a_fun_fun_tree$)B_a_fun_b_a_fun_fun_tree$)
(declare-fun node$f (B_a_fun_b_a_fun_fun$ B_a_fun_b_a_fun_fun_tree$ B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$)
(declare-fun selecto$ (A_a_fun_a_b_a_fun_fun_fun_tree$)A_a_fun_a_b_a_fun_fun_fun$)
(declare-fun selectp$ (A_a_fun_a_b_a_fun_fun_fun_tree$)A_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun selectq$ (A_a_fun_a_b_a_fun_fun_fun_tree$)A_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun node$g (A_a_fun_a_b_a_fun_fun_fun$ A_a_fun_a_b_a_fun_fun_fun_tree$ A_a_fun_a_b_a_fun_fun_fun_tree$ )A_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun selectr$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun$)
(declare-fun selects$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun_tree$)
(declare-fun selectt$ (B_b_a_fun_fun_tree$)B_b_a_fun_fun_tree$)
(declare-fun node$h (B_b_a_fun_fun$ B_b_a_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$)
(declare-fun selectu$ (B_b_fun_tree$)B_b_fun$)
(declare-fun selectv$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun selectw$ (B_b_fun_tree$)B_b_fun_tree$)
(declare-fun node$i (B_b_fun$ B_b_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$)
(declare-fun selectx$ (A_b_fun_tree$)A_b_fun$)
(declare-fun selecty$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun selectz$ (A_b_fun_tree$)A_b_fun_tree$)
(declare-fun node$j (A_b_fun$ A_b_fun_tree$ A_b_fun_tree$ )A_b_fun_tree$)
(declare-fun selecua$ (B_a_fun_b_fun_tree$)B_a_fun_b_fun$)
(declare-fun selecub$ (B_a_fun_b_fun_tree$)B_a_fun_b_fun_tree$)
(declare-fun selecuc$ (B_a_fun_b_fun_tree$)B_a_fun_b_fun_tree$)
(declare-fun node$k (B_a_fun_b_fun$ B_a_fun_b_fun_tree$ B_a_fun_b_fun_tree$ )B_a_fun_b_fun_tree$)
(declare-fun selecud$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun$)
(declare-fun selecue$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun_tree$)
(declare-fun selecuf$ (B_a_fun_a_fun_tree$)B_a_fun_a_fun_tree$)
(declare-fun node$l (B_a_fun_a_fun$ B_a_fun_a_fun_tree$ B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$)
(declare-fun selecug$ (A_b_a_fun_fun_b_fun_tree$)A_b_a_fun_fun_b_fun$)
(declare-fun selecuh$ (A_b_a_fun_fun_b_fun_tree$)A_b_a_fun_fun_b_fun_tree$)
(declare-fun selecui$ (A_b_a_fun_fun_b_fun_tree$)A_b_a_fun_fun_b_fun_tree$)
(declare-fun node$m (A_b_a_fun_fun_b_fun$ A_b_a_fun_fun_b_fun_tree$ A_b_a_fun_fun_b_fun_tree$ )A_b_a_fun_fun_b_fun_tree$)
(declare-fun selecuj$ (A_a_b_a_fun_fun_fun_tree$)A_a_b_a_fun_fun_fun$)
(declare-fun selecuk$ (A_a_b_a_fun_fun_fun_tree$)A_a_b_a_fun_fun_fun_tree$)
(declare-fun selecul$ (A_a_b_a_fun_fun_fun_tree$)A_a_b_a_fun_fun_fun_tree$)
(declare-fun node$n (A_a_b_a_fun_fun_fun$ A_a_b_a_fun_fun_fun_tree$ A_a_b_a_fun_fun_fun_tree$ )A_a_b_a_fun_fun_fun_tree$)
(declare-fun selecum$ (A_b_a_fun_a_fun_fun_a_a_fun_fun_tree$)A_b_a_fun_a_fun_fun_a_a_fun_fun$)
(declare-fun selecun$ (A_b_a_fun_a_fun_fun_a_a_fun_fun_tree$)A_b_a_fun_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun selecuo$ (A_b_a_fun_a_fun_fun_a_a_fun_fun_tree$)A_b_a_fun_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun node$o (A_b_a_fun_a_fun_fun_a_a_fun_fun$ A_b_a_fun_a_fun_fun_a_a_fun_fun_tree$ A_b_a_fun_a_fun_fun_a_a_fun_fun_tree$ )A_b_a_fun_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun selecup$ (A_b_a_fun_a_fun_fun_tree$)A_b_a_fun_a_fun_fun$)
(declare-fun selecuq$ (A_b_a_fun_a_fun_fun_tree$)A_b_a_fun_a_fun_fun_tree$)
(declare-fun selecur$ (A_b_a_fun_a_fun_fun_tree$)A_b_a_fun_a_fun_fun_tree$)
(declare-fun node$p (A_b_a_fun_a_fun_fun$ A_b_a_fun_a_fun_fun_tree$ A_b_a_fun_a_fun_fun_tree$ )A_b_a_fun_a_fun_fun_tree$)
(declare-fun selecus$ (A_b_a_fun_a_fun_a_fun_fun_a_b_a_fun_a_fun_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_a_fun_a_fun_fun_a_b_a_fun_a_fun_fun_a_a_fun_fun_fun$)
(declare-fun selecut$ (A_b_a_fun_a_fun_a_fun_fun_a_b_a_fun_a_fun_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_a_fun_a_fun_fun_a_b_a_fun_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecuu$ (A_b_a_fun_a_fun_a_fun_fun_a_b_a_fun_a_fun_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_a_fun_a_fun_fun_a_b_a_fun_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$q (A_b_a_fun_a_fun_a_fun_fun_a_b_a_fun_a_fun_fun_a_a_fun_fun_fun$ A_b_a_fun_a_fun_a_fun_fun_a_b_a_fun_a_fun_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_a_fun_a_fun_fun_a_b_a_fun_a_fun_fun_a_a_fun_fun_fun_tree$ )A_b_a_fun_a_fun_a_fun_fun_a_b_a_fun_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecuv$ (A_b_a_fun_a_fun_a_fun_fun_tree$)A_b_a_fun_a_fun_a_fun_fun$)
(declare-fun selecuw$ (A_b_a_fun_a_fun_a_fun_fun_tree$)A_b_a_fun_a_fun_a_fun_fun_tree$)
(declare-fun selecux$ (A_b_a_fun_a_fun_a_fun_fun_tree$)A_b_a_fun_a_fun_a_fun_fun_tree$)
(declare-fun node$r (A_b_a_fun_a_fun_a_fun_fun$ A_b_a_fun_a_fun_a_fun_fun_tree$ A_b_a_fun_a_fun_a_fun_fun_tree$ )A_b_a_fun_a_fun_a_fun_fun_tree$)
(declare-fun selecuy$ (A_b_a_fun_fun_a_a_fun_fun_tree$)A_b_a_fun_fun_a_a_fun_fun$)
(declare-fun selecuz$ (A_b_a_fun_fun_a_a_fun_fun_tree$)A_b_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun selecva$ (A_b_a_fun_fun_a_a_fun_fun_tree$)A_b_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun node$s (A_b_a_fun_fun_a_a_fun_fun$ A_b_a_fun_fun_a_a_fun_fun_tree$ A_b_a_fun_fun_a_a_fun_fun_tree$ )A_b_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun selecvb$ (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun$)
(declare-fun selecvc$ (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecvd$ (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$t (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun$ A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ )A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecve$ (B_b_fun_b_a_fun_fun_tree$)B_b_fun_b_a_fun_fun$)
(declare-fun selecvf$ (B_b_fun_b_a_fun_fun_tree$)B_b_fun_b_a_fun_fun_tree$)
(declare-fun selecvg$ (B_b_fun_b_a_fun_fun_tree$)B_b_fun_b_a_fun_fun_tree$)
(declare-fun node$u (B_b_fun_b_a_fun_fun$ B_b_fun_b_a_fun_fun_tree$ B_b_fun_b_a_fun_fun_tree$ )B_b_fun_b_a_fun_fun_tree$)
(declare-fun selecvh$ (B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_b_fun_b_a_fun_fun_fun$)
(declare-fun selecvi$ (B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecvj$ (B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$v (B_a_fun_b_b_fun_b_a_fun_fun_fun$ B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ )B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecvk$ (B_a_fun_b_b_a_fun_fun_fun_tree$)B_a_fun_b_b_a_fun_fun_fun$)
(declare-fun selecvl$ (B_a_fun_b_b_a_fun_fun_fun_tree$)B_a_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun selecvm$ (B_a_fun_b_b_a_fun_fun_fun_tree$)B_a_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun node$w (B_a_fun_b_b_a_fun_fun_fun$ B_a_fun_b_b_a_fun_fun_fun_tree$ B_a_fun_b_b_a_fun_fun_fun_tree$ )B_a_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun selecvn$ (A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$)
(declare-fun selecvo$ (A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecvp$ (A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$x (A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ )A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecvq$ (A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun_tree$)A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun$)
(declare-fun selecvr$ (A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun_tree$)A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecvs$ (A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun_tree$)A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$y (A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun$ A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun_tree$ A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun_tree$ )A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecvt$ (A_b_a_fun_fun_a_b_a_fun_fun_fun_tree$)A_b_a_fun_fun_a_b_a_fun_fun_fun$)
(declare-fun selecvu$ (A_b_a_fun_fun_a_b_a_fun_fun_fun_tree$)A_b_a_fun_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun selecvv$ (A_b_a_fun_fun_a_b_a_fun_fun_fun_tree$)A_b_a_fun_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun node$z (A_b_a_fun_fun_a_b_a_fun_fun_fun$ A_b_a_fun_fun_a_b_a_fun_fun_fun_tree$ A_b_a_fun_fun_a_b_a_fun_fun_fun_tree$ )A_b_a_fun_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun selecvw$ (B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun_tree$)B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun$)
(declare-fun selecvx$ (B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun_tree$)B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecvy$ (B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun_tree$)B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun node$aa (B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun$ B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun_tree$ B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun_tree$ )B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun selecvz$ (B_a_fun_b_b_fun_fun_tree$)B_a_fun_b_b_fun_fun$)
(declare-fun selecwa$ (B_a_fun_b_b_fun_fun_tree$)B_a_fun_b_b_fun_fun_tree$)
(declare-fun selecwb$ (B_a_fun_b_b_fun_fun_tree$)B_a_fun_b_b_fun_fun_tree$)
(declare-fun node$ab (B_a_fun_b_b_fun_fun$ B_a_fun_b_b_fun_fun_tree$ B_a_fun_b_b_fun_fun_tree$ )B_a_fun_b_b_fun_fun_tree$)
(declare-fun selecwc$ (A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$)A_b_fun_b_a_fun_b_b_fun_fun_fun$)
(declare-fun selecwd$ (A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$)A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecwe$ (A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$)A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun node$ac (A_b_fun_b_a_fun_b_b_fun_fun_fun$ A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$ A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$ )A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecwf$ (B_b_fun_b_b_fun_fun_tree$)B_b_fun_b_b_fun_fun$)
(declare-fun selecwg$ (B_b_fun_b_b_fun_fun_tree$)B_b_fun_b_b_fun_fun_tree$)
(declare-fun selecwh$ (B_b_fun_b_b_fun_fun_tree$)B_b_fun_b_b_fun_fun_tree$)
(declare-fun node$ad (B_b_fun_b_b_fun_fun$ B_b_fun_b_b_fun_fun_tree$ B_b_fun_b_b_fun_fun_tree$ )B_b_fun_b_b_fun_fun_tree$)
(declare-fun selecwi$ (B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$)B_b_fun_b_b_fun_b_b_fun_fun_fun$)
(declare-fun selecwj$ (B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$)B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecwk$ (B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$)B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun node$ae (B_b_fun_b_b_fun_b_b_fun_fun_fun$ B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$ B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$ )B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecwl$ (A_b_fun_a_a_fun_fun_tree$)A_b_fun_a_a_fun_fun$)
(declare-fun selecwm$ (A_b_fun_a_a_fun_fun_tree$)A_b_fun_a_a_fun_fun_tree$)
(declare-fun selecwn$ (A_b_fun_a_a_fun_fun_tree$)A_b_fun_a_a_fun_fun_tree$)
(declare-fun node$af (A_b_fun_a_a_fun_fun$ A_b_fun_a_a_fun_fun_tree$ A_b_fun_a_a_fun_fun_tree$ )A_b_fun_a_a_fun_fun_tree$)
(declare-fun selecwo$ (B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$)B_a_fun_a_b_fun_a_a_fun_fun_fun$)
(declare-fun selecwp$ (B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$)B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecwq$ (B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$)B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$ag (B_a_fun_a_b_fun_a_a_fun_fun_fun$ B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$ B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$ )B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecwr$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun$)
(declare-fun selecws$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun_tree$)
(declare-fun selecwt$ (A_a_fun_a_a_fun_fun_tree$)A_a_fun_a_a_fun_fun_tree$)
(declare-fun node$ah (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$)
(declare-fun selecwu$ (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)A_a_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun selecwv$ (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecww$ (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$ai (A_a_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ )A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecwx$ (B_b_a_fun_fun_b_a_fun_fun_tree$)B_b_a_fun_fun_b_a_fun_fun$)
(declare-fun selecwy$ (B_b_a_fun_fun_b_a_fun_fun_tree$)B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun selecwz$ (B_b_a_fun_fun_b_a_fun_fun_tree$)B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun node$aj (B_b_a_fun_fun_b_a_fun_fun$ B_b_a_fun_fun_b_a_fun_fun_tree$ B_b_a_fun_fun_b_a_fun_fun_tree$ )B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun selecxa$ (B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun$)
(declare-fun selecxb$ (B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun selecxc$ (B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun node$ak (B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ )B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun u$ ()A_tree$ )
(declare-fun v$ ()B_tree$ )
(declare-fun id$ ()B_b_fun$ )
(declare-fun uu$ ()A_b_a_fun_a_fun_fun$ )
(declare-fun id$a ()A_a_fun$ )
(declare-fun uua$ ()A_b_a_fun_fun$ )
(declare-fun comp$ ()A_a_fun_b_a_fun_b_a_fun_fun_fun$ )
(declare-fun comp$a ()B_a_fun_b_b_fun_b_a_fun_fun_fun$ )
(declare-fun comp$b ()A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ )
(declare-fun comp$c ()A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun$ )
(declare-fun comp$d ()B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun$ )
(declare-fun comp$e ()A_b_fun_b_a_fun_b_b_fun_fun_fun$ )
(declare-fun comp$f ()B_b_fun_b_b_fun_b_b_fun_fun_fun$ )
(declare-fun comp$g ()B_a_fun_a_b_fun_a_a_fun_fun_fun$ )
(declare-fun comp$h ()A_a_fun_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun comp$i ()B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ )
(declare-fun left$b (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun left$c (A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun left$d (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun left$e (A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun left$f (B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun left$g (B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun left$h (B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun left$i (B_a_fun_b_fun_tree$ )B_a_fun_b_fun_tree$ )
(declare-fun left$j (B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun left$k (A_a_b_a_fun_fun_fun_tree$ )A_a_b_a_fun_fun_fun_tree$ )
(declare-fun root$b (B_a_fun_tree$ )B_a_fun$ )
(declare-fun root$c (A_b_a_fun_fun_tree$ )A_b_a_fun_fun$ )
(declare-fun root$d (A_a_fun_tree$ )A_a_fun$ )
(declare-fun root$e (A_b_fun_tree$ )A_b_fun$ )
(declare-fun root$f (B_b_fun_tree$ )B_b_fun$ )
(declare-fun root$g (B_b_a_fun_fun_tree$ )B_b_a_fun_fun$ )
(declare-fun root$h (B_a_fun_a_fun_tree$ )B_a_fun_a_fun$ )
(declare-fun root$i (B_a_fun_b_fun_tree$ )B_a_fun_b_fun$ )
(declare-fun root$j (B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun$ )
(declare-fun root$k (A_a_b_a_fun_fun_fun_tree$ )A_a_b_a_fun_fun_fun$ )
(declare-fun right$b (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun right$c (A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun right$d (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun right$e (A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun right$f (B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun right$g (B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun right$h (B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun right$i (B_a_fun_b_fun_tree$ )B_a_fun_b_fun_tree$ )
(declare-fun right$j (B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun right$k (A_a_b_a_fun_fun_fun_tree$ )A_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_I$ ()A_a_fun_tree$ )
(declare-fun tree_K$ ()A_b_a_fun_fun_tree$ )
(declare-fun tree_S$ ()A_b_a_fun_a_fun_a_fun_fun_a_b_a_fun_a_fun_fun_a_a_fun_fun_fun_tree$ )
(declare-fun fun_app$ (B_a_fun_a_fun$ B_a_fun$ )A$ )
(declare-fun tree_K$a ()A_b_a_fun_a_fun_a_fun_fun_tree$ )
(declare-fun tree_K$b ()A_b_a_fun_a_fun_fun_tree$ )
(declare-fun tree_S$a ()A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun fun_app$a (A_b_a_fun_a_fun_fun$ A$ )B_a_fun_a_fun$ )
(declare-fun fun_app$b (B_a_fun$ B$ )A$ )
(declare-fun fun_app$c (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$d (B_b_fun$ B$ )B$ )
(declare-fun fun_app$e (A_b_fun$ A$ )B$ )
(declare-fun fun_app$f (A_a_fun$ A$ )A$ )
(declare-fun fun_app$g (B_a_fun_b_fun$ B_a_fun$ )B$ )
(declare-fun fun_app$h (B_b_a_fun_fun$ B$ )B_a_fun$ )
(declare-fun fun_app$i (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$j (A_b_a_fun_fun_b_fun$ A_b_a_fun_fun$ )B$ )
(declare-fun fun_app$k (A_a_b_a_fun_fun_fun$ A$ )A_b_a_fun_fun$ )
(declare-fun map_tree$ (A_a_fun_a_b_a_fun_fun_fun$ A_a_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$a (A_b_a_fun_fun_tree$ A_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$b (A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ A_a_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$c (A_a_fun_a_b_a_fun_fun_fun_tree$ A_a_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$d (B_b_a_fun_fun_tree$ B_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$e (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun tree_ap$f (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$g (A_b_fun_tree$ A_tree$ )B_tree$ )
(declare-fun tree_ap$h (B_a_fun_b_fun_tree$ B_a_fun_tree$ )B_tree$ )
(declare-fun tree_ap$i (B_a_fun_a_fun_tree$ B_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$j (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$k (A_b_a_fun_fun_b_fun_tree$ A_b_a_fun_fun_tree$ )B_tree$ )
(declare-fun tree_ap$l (A_a_b_a_fun_fun_fun_tree$ A_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$m (A_b_a_fun_a_fun_fun_a_a_fun_fun_tree$ A_b_a_fun_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$n (A_b_a_fun_a_fun_a_fun_fun_a_b_a_fun_a_fun_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_a_fun_a_fun_fun_tree$ )A_b_a_fun_a_fun_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$o (A_b_a_fun_fun_a_a_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$p (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_a_fun_fun_tree$ )A_b_a_fun_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$q (B_b_fun_b_a_fun_fun_tree$ B_b_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$r (B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )B_b_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$s (B_a_fun_b_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$t (A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ A_b_a_fun_fun_tree$ )B_a_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$u (A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_a_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$v (A_b_a_fun_fun_a_b_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$w (B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun_tree$ B_a_fun_b_a_fun_fun_tree$ )A_b_a_fun_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$x (B_a_fun_b_b_fun_fun_tree$ B_a_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$y (A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$ A_b_fun_tree$ )B_a_fun_b_b_fun_fun_tree$ )
(declare-fun tree_ap$z (B_b_fun_b_b_fun_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun map_tree$a (B_b_a_fun_fun$ B_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$b (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun map_tree$c (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$d (A_a_fun_b_a_fun_b_a_fun_fun_fun$ A_a_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun map_tree$e (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun map_tree$f (A_b_a_fun_fun$ A_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$g (A_b_fun$ A_tree$ )B_tree$ )
(declare-fun map_tree$h (B_a_fun_a_fun$ B_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$i (B_a_fun_b_fun$ B_a_fun_tree$ )B_tree$ )
(declare-fun map_tree$j (B_a_fun_b_a_fun_fun$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$k (A_a_b_a_fun_fun_fun$ A_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun map_tree$l (A_b_a_fun_fun_b_fun$ A_b_a_fun_fun_tree$ )B_tree$ )
(declare-fun tree_ap$aa (B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$ B_b_fun_tree$ )B_b_fun_b_b_fun_fun_tree$ )
(declare-fun tree_ap$ab (A_b_fun_a_a_fun_fun_tree$ A_b_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$ac (B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$ B_a_fun_tree$ )A_b_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$ad (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$ae (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$af (B_b_a_fun_fun_b_a_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$ag (B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_a_fun_a_fun_tree$ )B_b_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$ (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$a (B$ )B_tree$ )
(declare-fun tree_pure$b (A$ )A_tree$ )
(declare-fun tree_pure$c (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$d (A_b_a_fun_fun$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_pure$e (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$f (A_b_fun$ )A_b_fun_tree$ )
(declare-fun tree_pure$g (B_a_fun_b_fun$ )B_a_fun_b_fun_tree$ )
(declare-fun tree_pure$h (B_a_fun_a_fun$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_pure$i (B_b_a_fun_fun$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_pure$j (B_a_fun_b_a_fun_fun$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$k (A_b_a_fun_fun_b_fun$ )A_b_a_fun_fun_b_fun_tree$ )
(declare-fun tree_pure$l (A_a_b_a_fun_fun_fun$ )A_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$m (A_a_fun_a_b_a_fun_fun_fun$ )A_a_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$n (A_a_fun_b_a_fun_b_a_fun_fun_fun$ )A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$o (B_a_fun_b_b_fun_b_a_fun_fun_fun$ )B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$p (A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ )A_b_a_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_pure$q (A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun$ )A_b_a_fun_fun_a_a_fun_a_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_pure$r (B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun$ )B_a_fun_b_a_fun_fun_a_b_a_fun_fun_a_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_pure$s (A_b_fun_b_a_fun_b_b_fun_fun_fun$ )A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$ )
(declare-fun tree_pure$t (B_b_fun_b_b_fun_b_b_fun_fun_fun$ )B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$ )
(declare-fun tree_pure$u (B_a_fun_a_b_fun_a_a_fun_fun_fun$ )B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$v (A_a_fun_a_a_fun_a_a_fun_fun_fun$ )A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$w (B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ )B_a_fun_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$x (A_b_a_fun_a_fun_fun$ )A_b_a_fun_a_fun_fun_tree$ )
(assert (! (forall ((?v0 A$ )(?v1 B_a_fun$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ ))(! (= (fun_app$b (fun_app$c uua$ ?v0 )?v1 )?v0 ):pattern ((fun_app$b (fun_app$c uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (= (tree_ap$ (tree_ap$a tree_K$ u$ )v$ )u$ )):named a2 ))
(assert (! (forall ((?v0 A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )(?v1 A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ ))(=> (forall ((?v2 A_a_fun_tree$ ))(= (tree_ap$b ?v0 ?v2 )(tree_ap$b ?v1 ?v2 )))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_a_fun_a_b_a_fun_fun_fun_tree$ )(?v1 A_a_fun_a_b_a_fun_fun_fun_tree$ ))(=> (forall ((?v2 A_a_fun_tree$ ))(= (tree_ap$c ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$d ?v0 ?v2 )(tree_ap$d ?v1 ?v2 )))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$e ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$f ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$ ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$a ?v0 ?v2 )(tree_ap$a ?v1 ?v2 )))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )(?v1 A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ ))(=> (forall ((?v2 A_a_fun$ ))(= (tree_ap$b ?v0 (tree_pure$ ?v2 ))(tree_ap$b ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_a_fun_a_b_a_fun_fun_fun_tree$ )(?v1 A_a_fun_a_b_a_fun_fun_fun_tree$ ))(=> (forall ((?v2 A_a_fun$ ))(= (tree_ap$c ?v0 (tree_pure$ ?v2 ))(tree_ap$c ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$d ?v0 (tree_pure$a ?v2 ))(tree_ap$d ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$e ?v0 (tree_pure$a ?v2 ))(tree_ap$e ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$f ?v0 (tree_pure$b ?v2 ))(tree_ap$f ?v1 (tree_pure$b ?v2 ))))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$ ?v0 (tree_pure$a ?v2 ))(tree_ap$ ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$a ?v0 (tree_pure$b ?v2 ))(tree_ap$a ?v1 (tree_pure$b ?v2 ))))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (tree_ap$ (tree_pure$c ?v0 )(tree_pure$a ?v1 ))(tree_pure$b (fun_app$b ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ ))(= (tree_ap$a (tree_pure$d ?v0 )(tree_pure$b ?v1 ))(tree_pure$c (fun_app$c ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (tree_ap$e (tree_pure$e ?v0 )(tree_pure$a ?v1 ))(tree_pure$a (fun_app$d ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (tree_ap$g (tree_pure$f ?v0 )(tree_pure$b ?v1 ))(tree_pure$a (fun_app$e ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (tree_ap$f (tree_pure$ ?v0 )(tree_pure$b ?v1 ))(tree_pure$b (fun_app$f ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$h (tree_pure$g ?v0 )(tree_pure$c ?v1 ))(tree_pure$a (fun_app$g ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$i (tree_pure$h ?v0 )(tree_pure$c ?v1 ))(tree_pure$b (fun_app$ ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$d (tree_pure$i ?v0 )(tree_pure$a ?v1 ))(tree_pure$c (fun_app$h ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$j (tree_pure$j ?v0 )(tree_pure$c ?v1 ))(tree_pure$c (fun_app$i ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_b_fun$ )(?v1 A_b_a_fun_fun$ ))(= (tree_ap$k (tree_pure$k ?v0 )(tree_pure$d ?v1 ))(tree_pure$a (fun_app$j ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$ (tree_pure$c ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$ (fun_app$b ?v0 ?v1 )(tree_ap$ (tree_pure$c ?v0 )?v2 )(tree_ap$ (tree_pure$c ?v0 )?v3 )))):named a27 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$a (tree_pure$d ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$a (fun_app$c ?v0 ?v1 )(tree_ap$a (tree_pure$d ?v0 )?v2 )(tree_ap$a (tree_pure$d ?v0 )?v3 )))):named a28 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$f (tree_pure$ ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$ (fun_app$f ?v0 ?v1 )(tree_ap$f (tree_pure$ ?v0 )?v2 )(tree_ap$f (tree_pure$ ?v0 )?v3 )))):named a29 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$g (tree_pure$f ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$b (fun_app$e ?v0 ?v1 )(tree_ap$g (tree_pure$f ?v0 )?v2 )(tree_ap$g (tree_pure$f ?v0 )?v3 )))):named a30 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$e (tree_pure$e ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$b (fun_app$d ?v0 ?v1 )(tree_ap$e (tree_pure$e ?v0 )?v2 )(tree_ap$e (tree_pure$e ?v0 )?v3 )))):named a31 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$i (tree_pure$h ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$ (fun_app$ ?v0 ?v1 )(tree_ap$i (tree_pure$h ?v0 )?v2 )(tree_ap$i (tree_pure$h ?v0 )?v3 )))):named a32 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$h (tree_pure$g ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$b (fun_app$g ?v0 ?v1 )(tree_ap$h (tree_pure$g ?v0 )?v2 )(tree_ap$h (tree_pure$g ?v0 )?v3 )))):named a33 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$d (tree_pure$i ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$a (fun_app$h ?v0 ?v1 )(tree_ap$d (tree_pure$i ?v0 )?v2 )(tree_ap$d (tree_pure$i ?v0 )?v3 )))):named a34 ))
(assert (! (forall ((?v0 A_a_b_a_fun_fun_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$l (tree_pure$l ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$c (fun_app$k ?v0 ?v1 )(tree_ap$l (tree_pure$l ?v0 )?v2 )(tree_ap$l (tree_pure$l ?v0 )?v3 )))):named a35 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$j (tree_pure$j ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$a (fun_app$i ?v0 ?v1 )(tree_ap$j (tree_pure$j ?v0 )?v2 )(tree_ap$j (tree_pure$j ?v0 )?v3 )))):named a36 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$ (fun_app$b ?v0 ?v3 )(tree_ap$ ?v1 ?v4 )(tree_ap$ ?v2 ?v5 ))):pattern ((tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a37 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_b_a_fun_fun_tree$ )(?v2 A_b_a_fun_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$a (fun_app$c ?v0 ?v3 )(tree_ap$a ?v1 ?v4 )(tree_ap$a ?v2 ?v5 ))):pattern ((tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a38 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$f (node$e ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$ (fun_app$f ?v0 ?v3 )(tree_ap$f ?v1 ?v4 )(tree_ap$f ?v2 ?v5 ))):pattern ((tree_ap$f (node$e ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a39 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun_tree$ )(?v2 A_b_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$g (node$j ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$b (fun_app$e ?v0 ?v3 )(tree_ap$g ?v1 ?v4 )(tree_ap$g ?v2 ?v5 ))):pattern ((tree_ap$g (node$j ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a40 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun_tree$ )(?v2 B_b_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$e (node$i ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$b (fun_app$d ?v0 ?v3 )(tree_ap$e ?v1 ?v4 )(tree_ap$e ?v2 ?v5 ))):pattern ((tree_ap$e (node$i ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a41 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_a_fun_tree$ )(?v2 B_a_fun_a_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(! (= (tree_ap$i (node$l ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$ (fun_app$ ?v0 ?v3 )(tree_ap$i ?v1 ?v4 )(tree_ap$i ?v2 ?v5 ))):pattern ((tree_ap$i (node$l ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a42 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun_b_fun_tree$ )(?v2 B_a_fun_b_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(! (= (tree_ap$h (node$k ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$b (fun_app$g ?v0 ?v3 )(tree_ap$h ?v1 ?v4 )(tree_ap$h ?v2 ?v5 ))):pattern ((tree_ap$h (node$k ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a43 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_b_a_fun_fun_tree$ )(?v2 B_b_a_fun_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$d (node$h ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$a (fun_app$h ?v0 ?v3 )(tree_ap$d ?v1 ?v4 )(tree_ap$d ?v2 ?v5 ))):pattern ((tree_ap$d (node$h ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a44 ))
(assert (! (forall ((?v0 A_a_b_a_fun_fun_fun$ )(?v1 A_a_b_a_fun_fun_fun_tree$ )(?v2 A_a_b_a_fun_fun_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$l (node$n ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$c (fun_app$k ?v0 ?v3 )(tree_ap$l ?v1 ?v4 )(tree_ap$l ?v2 ?v5 ))):pattern ((tree_ap$l (node$n ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a45 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_b_a_fun_fun_tree$ )(?v2 B_a_fun_b_a_fun_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(! (= (tree_ap$j (node$f ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$a (fun_app$i ?v0 ?v3 )(tree_ap$j ?v1 ?v4 )(tree_ap$j ?v2 ?v5 ))):pattern ((tree_ap$j (node$f ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a46 ))
(assert (! (= tree_I$ (tree_ap$m (tree_ap$n tree_S$ tree_K$a )tree_K$b )):named a47 ))
(assert (! (= tree_I$ (tree_ap$o (tree_ap$p tree_S$a tree_K$b )tree_K$ )):named a48 ))
(assert (! (forall ((?v0 A_a_fun_a_b_a_fun_fun_fun$ )(?v1 A_a_fun_tree$ ))(= (tree_ap$c (tree_pure$m ?v0 )?v1 )(map_tree$ ?v0 ?v1 ))):named a49 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_tree$ ))(= (tree_ap$d (tree_pure$i ?v0 )?v1 )(map_tree$a ?v0 ?v1 ))):named a50 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (tree_ap$e (tree_pure$e ?v0 )?v1 )(map_tree$b ?v0 ?v1 ))):named a51 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (tree_ap$f (tree_pure$ ?v0 )?v1 )(map_tree$c ?v0 ?v1 ))):named a52 ))
(assert (! (forall ((?v0 A_a_fun_b_a_fun_b_a_fun_fun_fun$ )(?v1 A_a_fun_tree$ ))(= (tree_ap$b (tree_pure$n ?v0 )?v1 )(map_tree$d ?v0 ?v1 ))):named a53 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_pure$c ?v0 )?v1 )(map_tree$e ?v0 ?v1 ))):named a54 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (tree_ap$a (tree_pure$d ?v0 )?v1 )(map_tree$f ?v0 ?v1 ))):named a55 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (root$ (tree_ap$ ?v0 ?v1 ))(fun_app$b (root$b ?v0 )(root$a ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (root$b (tree_ap$a ?v0 ?v1 ))(fun_app$c (root$c ?v0 )(root$ ?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (root$ (tree_ap$f ?v0 ?v1 ))(fun_app$f (root$d ?v0 )(root$ ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (root$a (tree_ap$g ?v0 ?v1 ))(fun_app$e (root$e ?v0 )(root$ ?v1 )))):named a59 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (root$a (tree_ap$e ?v0 ?v1 ))(fun_app$d (root$f ?v0 )(root$a ?v1 )))):named a60 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (root$b (tree_ap$d ?v0 ?v1 ))(fun_app$h (root$g ?v0 )(root$a ?v1 )))):named a61 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (root$ (tree_ap$i ?v0 ?v1 ))(fun_app$ (root$h ?v0 )(root$b ?v1 )))):named a62 ))
(assert (! (forall ((?v0 B_a_fun_b_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (root$a (tree_ap$h ?v0 ?v1 ))(fun_app$g (root$i ?v0 )(root$b ?v1 )))):named a63 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (root$b (tree_ap$j ?v0 ?v1 ))(fun_app$i (root$j ?v0 )(root$b ?v1 )))):named a64 ))
(assert (! (forall ((?v0 A_a_b_a_fun_fun_fun_tree$ )(?v1 A_tree$ ))(= (root$c (tree_ap$l ?v0 ?v1 ))(fun_app$k (root$k ?v0 )(root$ ?v1 )))):named a65 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (left$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (left$b ?v0 )(left$a ?v1 )))):named a66 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (left$b (tree_ap$a ?v0 ?v1 ))(tree_ap$a (left$c ?v0 )(left$ ?v1 )))):named a67 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (left$ (tree_ap$f ?v0 ?v1 ))(tree_ap$f (left$d ?v0 )(left$ ?v1 )))):named a68 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (left$a (tree_ap$g ?v0 ?v1 ))(tree_ap$g (left$e ?v0 )(left$ ?v1 )))):named a69 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (left$a (tree_ap$e ?v0 ?v1 ))(tree_ap$e (left$f ?v0 )(left$a ?v1 )))):named a70 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (left$b (tree_ap$d ?v0 ?v1 ))(tree_ap$d (left$g ?v0 )(left$a ?v1 )))):named a71 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (left$ (tree_ap$i ?v0 ?v1 ))(tree_ap$i (left$h ?v0 )(left$b ?v1 )))):named a72 ))
(assert (! (forall ((?v0 B_a_fun_b_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (left$a (tree_ap$h ?v0 ?v1 ))(tree_ap$h (left$i ?v0 )(left$b ?v1 )))):named a73 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (left$b (tree_ap$j ?v0 ?v1 ))(tree_ap$j (left$j ?v0 )(left$b ?v1 )))):named a74 ))
(assert (! (forall ((?v0 A_a_b_a_fun_fun_fun_tree$ )(?v1 A_tree$ ))(= (left$c (tree_ap$l ?v0 ?v1 ))(tree_ap$l (left$k ?v0 )(left$ ?v1 )))):named a75 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (right$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (right$b ?v0 )(right$a ?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (right$b (tree_ap$a ?v0 ?v1 ))(tree_ap$a (right$c ?v0 )(right$ ?v1 )))):named a77 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (right$ (tree_ap$f ?v0 ?v1 ))(tree_ap$f (right$d ?v0 )(right$ ?v1 )))):named a78 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (right$a (tree_ap$g ?v0 ?v1 ))(tree_ap$g (right$e ?v0 )(right$ ?v1 )))):named a79 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (right$a (tree_ap$e ?v0 ?v1 ))(tree_ap$e (right$f ?v0 )(right$a ?v1 )))):named a80 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (right$b (tree_ap$d ?v0 ?v1 ))(tree_ap$d (right$g ?v0 )(right$a ?v1 )))):named a81 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (right$ (tree_ap$i ?v0 ?v1 ))(tree_ap$i (right$h ?v0 )(right$b ?v1 )))):named a82 ))
(assert (! (forall ((?v0 B_a_fun_b_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (right$a (tree_ap$h ?v0 ?v1 ))(tree_ap$h (right$i ?v0 )(right$b ?v1 )))):named a83 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (right$b (tree_ap$j ?v0 ?v1 ))(tree_ap$j (right$j ?v0 )(right$b ?v1 )))):named a84 ))
(assert (! (forall ((?v0 A_a_b_a_fun_fun_fun_tree$ )(?v1 A_tree$ ))(= (right$c (tree_ap$l ?v0 ?v1 ))(tree_ap$l (right$k ?v0 )(right$ ?v1 )))):named a85 ))
(assert (! (forall ((?v0 B_tree$ ))(= (tree_ap$e (tree_pure$e id$ )?v0 )?v0 )):named a86 ))
(assert (! (forall ((?v0 A_tree$ ))(= (tree_ap$f (tree_pure$ id$a )?v0 )?v0 )):named a87 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$j (tree_ap$b (tree_pure$n comp$ )?v0 )?v1 )?v2 )(tree_ap$f ?v0 (tree_ap$ ?v1 ?v2 )))):named a88 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$q (tree_ap$r (tree_pure$o comp$a )?v0 )?v1 )?v2 )(tree_ap$ ?v0 (tree_ap$e ?v1 ?v2 )))):named a89 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$d (tree_ap$s (tree_ap$t (tree_pure$p comp$b )?v0 )?v1 )?v2 )(tree_ap$a ?v0 (tree_ap$ ?v1 ?v2 )))):named a90 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$a (tree_ap$c (tree_ap$u (tree_pure$q comp$c )?v0 )?v1 )?v2 )(tree_ap$a ?v0 (tree_ap$f ?v1 ?v2 )))):named a91 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$a (tree_ap$v (tree_ap$w (tree_pure$r comp$d )?v0 )?v1 )?v2 )(tree_ap$j ?v0 (tree_ap$a ?v1 ?v2 )))):named a92 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$x (tree_ap$y (tree_pure$s comp$e )?v0 )?v1 )?v2 )(tree_ap$g ?v0 (tree_ap$ ?v1 ?v2 )))):named a93 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$z (tree_ap$aa (tree_pure$t comp$f )?v0 )?v1 )?v2 )(tree_ap$e ?v0 (tree_ap$e ?v1 ?v2 )))):named a94 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 A_b_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$f (tree_ap$ab (tree_ap$ac (tree_pure$u comp$g )?v0 )?v1 )?v2 )(tree_ap$ ?v0 (tree_ap$g ?v1 ?v2 )))):named a95 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$f (tree_ap$ad (tree_ap$ae (tree_pure$v comp$h )?v0 )?v1 )?v2 )(tree_ap$f ?v0 (tree_ap$f ?v1 ?v2 )))):named a96 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$af (tree_ap$ag (tree_pure$w comp$i )?v0 )?v1 )?v2 )(tree_ap$i ?v0 (tree_ap$d ?v1 ?v2 )))):named a97 ))
(assert (! (= tree_K$b (tree_pure$x uu$ )):named a98 ))
(assert (! (= tree_K$ (tree_pure$d uua$ )):named a99 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a100 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a101 ))
(assert (! (forall ((?v0 B$ )(?v1 B_tree$ )(?v2 B_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(= (= (node$b ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a102 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_b_a_fun_fun_tree$ )(?v2 A_b_a_fun_fun_tree$ )(?v3 A_b_a_fun_fun$ )(?v4 A_b_a_fun_fun_tree$ )(?v5 A_b_a_fun_fun_tree$ ))(= (= (node$c ?v0 ?v1 ?v2 )(node$c ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a103 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$ ?v1 )))):named a104 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$g ?v0 ?v1 ))(map_tree$g ?v0 (left$ ?v1 )))):named a105 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$a ?v1 )))):named a106 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$e ?v0 ?v1 ))(map_tree$e ?v0 (left$a ?v1 )))):named a107 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_tree$ ))(= (left$b (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$a ?v1 )))):named a108 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_tree$ ))(= (left$ (map_tree$h ?v0 ?v1 ))(map_tree$h ?v0 (left$b ?v1 )))):named a109 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun_tree$ ))(= (left$a (map_tree$i ?v0 ?v1 ))(map_tree$i ?v0 (left$b ?v1 )))):named a110 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (left$b (map_tree$f ?v0 ?v1 ))(map_tree$f ?v0 (left$ ?v1 )))):named a111 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_tree$ ))(= (left$b (map_tree$j ?v0 ?v1 ))(map_tree$j ?v0 (left$b ?v1 )))):named a112 ))
(assert (! (forall ((?v0 A_a_b_a_fun_fun_fun$ )(?v1 A_tree$ ))(= (left$c (map_tree$k ?v0 ?v1 ))(map_tree$k ?v0 (left$ ?v1 )))):named a113 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun_tree$ ))(= (left$a (map_tree$i ?v0 ?v1 ))(map_tree$i ?v0 (left$b ?v1 )))):named a114 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_b_fun$ )(?v1 A_b_a_fun_fun_tree$ ))(= (left$a (map_tree$l ?v0 ?v1 ))(map_tree$l ?v0 (left$c ?v1 )))):named a115 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$g ?v0 ?v1 ))(map_tree$g ?v0 (left$ ?v1 )))):named a116 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$a ?v1 )))):named a117 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (left$b (map_tree$f ?v0 ?v1 ))(map_tree$f ?v0 (left$ ?v1 )))):named a118 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$e ?v0 ?v1 ))(map_tree$e ?v0 (left$a ?v1 )))):named a119 ))
(check-sat )
;(get-unsat-core )
