;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_tree$ 0)
(declare-fun root$ (Nat_tree$)Nat$)
(declare-fun left$ (Nat_tree$)Nat_tree$)
(declare-fun right$ (Nat_tree$)Nat_tree$)
(declare-fun node$ (Nat$ Nat_tree$ Nat_tree$ )Nat_tree$)
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-fun nibble0$ ()Nibble$)
(declare-fun nibble1$ ()Nibble$)
(declare-fun nibble2$ ()Nibble$)
(declare-fun nibble3$ ()Nibble$)
(declare-fun nibble4$ ()Nibble$)
(declare-fun nibble5$ ()Nibble$)
(declare-fun nibble6$ ()Nibble$)
(declare-fun nibble7$ ()Nibble$)
(declare-fun nibble8$ ()Nibble$)
(declare-fun nibble9$ ()Nibble$)
(declare-fun nibbleA$ ()Nibble$)
(declare-fun nibbleB$ ()Nibble$)
(declare-fun nibbleC$ ()Nibble$)
(declare-fun nibbleD$ ()Nibble$)
(declare-fun nibbleE$ ()Nibble$)
(declare-fun nibbleF$ ()Nibble$)
(declare-fun select$ (Char$)Nibble$)
(declare-fun selecta$ (Char$)Nibble$)
(declare-fun char$ (Nibble$ Nibble$ )Char$)
(declare-fun x$ ()Nat_tree$ )
(declare-fun num$ ()Nat_tree$ )
(declare-fun zero$ ()Nat$ )
(declare-fun fIXME_x$ ()Nat_tree$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun pred_tree$ (Nat_bool_fun$ Nat_tree$ )Bool )
(declare-fun size_char$ (Char$ )Nat$ )
(declare-fun tree_iterate$ (Nat_nat_fun$ Nat_nat_fun$ Nat$ )Nat_tree$ )
(assert (! (not (= x$ fIXME_x$ )):named a0 ))
(assert (! (= x$ (node$ zero$ num$ x$ )):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ )(?v3 Nat$ )(?v4 Nat_tree$ )(?v5 Nat_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a2 ))
(assert (! (= fIXME_x$ (node$ zero$ num$ fIXME_x$ )):named a3 ))
(assert (! (forall ((?v0 Nat_tree$ ))(=> (forall ((?v1 Nat$ )(?v2 Nat_tree$ )(?v3 Nat_tree$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false ))false )):named a4 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat_tree$ )(?v3 Nat_tree$ ))(! (= (pred_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))(and (fun_app$ ?v0 ?v1 )(and (pred_tree$ ?v0 ?v2 )(pred_tree$ ?v0 ?v3 )))):pattern ((pred_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a5 ))
(assert (! (= zero$ zero$ ):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a8 ))
(assert (! (= (left$ fIXME_x$ )num$ ):named a9 ))
(assert (! (= (root$ fIXME_x$ )zero$ ):named a10 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ ))(= (tree_iterate$ ?v0 ?v1 ?v2 )(node$ ?v2 (tree_iterate$ ?v0 ?v1 (fun_app$a ?v0 ?v2 ))(tree_iterate$ ?v0 ?v1 (fun_app$a ?v1 ?v2 ))))):named a12 ))
(assert (! (= (left$ num$ )num$ ):named a13 ))
(check-sat )
;(get-unsat-core )
