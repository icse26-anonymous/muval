;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_tree_fun$ 0 )
(declare-sort A_b_tree_fun$ 0 )
(declare-sort A_tree_a_fun$ 0 )
(declare-sort A_tree_b_fun$ 0 )
(declare-sort B_a_tree_fun$ 0 )
(declare-sort B_b_tree_fun$ 0 )
(declare-sort B_tree_a_fun$ 0 )
(declare-sort B_tree_b_fun$ 0 )
(declare-sort B_tree$ 0)
(declare-sort A_tree$ 0)
(declare-sort A_tree_tree$ 0)
(declare-sort A_tree_tree_tree$ 0)
(declare-sort A_tree_tree_tree_tree$ 0)
(declare-sort B_tree_tree$ 0)
(declare-sort B_tree_tree_tree$ 0)
(declare-sort B_tree_tree_tree_tree$ 0)
(declare-fun root$ (B_tree$)B$)
(declare-fun left$ (B_tree$)B_tree$)
(declare-fun right$ (B_tree$)B_tree$)
(declare-fun node$ (B$ B_tree$ B_tree$ )B_tree$)
(declare-fun root$a (A_tree$)A$)
(declare-fun left$a (A_tree$)A_tree$)
(declare-fun right$a (A_tree$)A_tree$)
(declare-fun node$a (A$ A_tree$ A_tree$ )A_tree$)
(declare-fun root$b (A_tree_tree$)A_tree$)
(declare-fun left$b (A_tree_tree$)A_tree_tree$)
(declare-fun right$b (A_tree_tree$)A_tree_tree$)
(declare-fun node$b (A_tree$ A_tree_tree$ A_tree_tree$ )A_tree_tree$)
(declare-fun root$c (A_tree_tree_tree$)A_tree_tree$)
(declare-fun left$c (A_tree_tree_tree$)A_tree_tree_tree$)
(declare-fun right$c (A_tree_tree_tree$)A_tree_tree_tree$)
(declare-fun node$c (A_tree_tree$ A_tree_tree_tree$ A_tree_tree_tree$ )A_tree_tree_tree$)
(declare-fun root$d (A_tree_tree_tree_tree$)A_tree_tree_tree$)
(declare-fun left$d (A_tree_tree_tree_tree$)A_tree_tree_tree_tree$)
(declare-fun right$d (A_tree_tree_tree_tree$)A_tree_tree_tree_tree$)
(declare-fun node$d (A_tree_tree_tree$ A_tree_tree_tree_tree$ A_tree_tree_tree_tree$ )A_tree_tree_tree_tree$)
(declare-fun root$e (B_tree_tree$)B_tree$)
(declare-fun left$e (B_tree_tree$)B_tree_tree$)
(declare-fun right$e (B_tree_tree$)B_tree_tree$)
(declare-fun node$e (B_tree$ B_tree_tree$ B_tree_tree$ )B_tree_tree$)
(declare-fun root$f (B_tree_tree_tree$)B_tree_tree$)
(declare-fun left$f (B_tree_tree_tree$)B_tree_tree_tree$)
(declare-fun right$f (B_tree_tree_tree$)B_tree_tree_tree$)
(declare-fun node$f (B_tree_tree$ B_tree_tree_tree$ B_tree_tree_tree$ )B_tree_tree_tree$)
(declare-fun root$g (B_tree_tree_tree_tree$)B_tree_tree_tree$)
(declare-fun left$g (B_tree_tree_tree_tree$)B_tree_tree_tree_tree$)
(declare-fun right$g (B_tree_tree_tree_tree$)B_tree_tree_tree_tree$)
(declare-fun node$g (B_tree_tree_tree$ B_tree_tree_tree_tree$ B_tree_tree_tree_tree$ )B_tree_tree_tree_tree$)
(declare-sort Dir$ 0)
(declare-sort Dir_list$ 0)
(declare-fun l$ ()Dir$)
(declare-fun r$ ()Dir$)
(declare-fun nil$ ()Dir_list$)
(declare-fun hd$ (Dir_list$)Dir$)
(declare-fun tl$ (Dir_list$)Dir_list$)
(declare-fun cons$ (Dir$ Dir_list$ )Dir_list$)
(declare-fun f$ ()A_b_fun$ )
(declare-fun t$ ()A_tree$ )
(declare-fun t$a ()A_tree$ )
(declare-fun mod$ (A_tree$ A_tree$ )A_tree$ )
(declare-fun mod$a (B_tree$ B_tree$ )B_tree$ )
(declare-fun mod$b (A_tree_tree_tree_tree$ A_tree_tree_tree_tree$ )A_tree_tree_tree_tree$ )
(declare-fun mod$c (A_tree_tree_tree$ A_tree_tree_tree$ )A_tree_tree_tree$ )
(declare-fun mod$d (B_tree_tree_tree_tree$ B_tree_tree_tree_tree$ )B_tree_tree_tree_tree$ )
(declare-fun mod$e (B_tree_tree_tree$ B_tree_tree_tree$ )B_tree_tree_tree$ )
(declare-fun mod$f (B_tree_tree$ B_tree_tree$ )B_tree_tree$ )
(declare-fun mod$g (A_tree_tree$ A_tree_tree$ )A_tree_tree$ )
(declare-fun mod$h (A$ )A_a_fun$ )
(declare-fun mod$i (B$ )B_b_fun$ )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun fun_app$a (B_b_fun$ B$ )B$ )
(declare-fun fun_app$b (A_b_tree_fun$ A$ )B_tree$ )
(declare-fun fun_app$c (A_a_tree_fun$ A$ )A_tree$ )
(declare-fun fun_app$d (B_a_fun$ B$ )A$ )
(declare-fun fun_app$e (A_b_fun$ A$ )B$ )
(declare-fun fun_app$f (B_tree_b_fun$ B_tree$ )B$ )
(declare-fun fun_app$g (A_tree_b_fun$ A_tree$ )B$ )
(declare-fun fun_app$h (B_tree_a_fun$ B_tree$ )A$ )
(declare-fun fun_app$i (A_tree_a_fun$ A_tree$ )A$ )
(declare-fun fun_app$j (B_b_tree_fun$ B$ )B_tree$ )
(declare-fun map_tree$ (A_b_fun$ A_tree$ )B_tree$ )
(declare-fun map_tree$a (A_b_tree_fun$ A_tree$ )B_tree_tree$ )
(declare-fun map_tree$b (A_a_tree_fun$ A_tree$ )A_tree_tree$ )
(declare-fun map_tree$c (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun map_tree$d (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun map_tree$e (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$f (B_tree_b_fun$ B_tree_tree$ )B_tree$ )
(declare-fun map_tree$g (A_tree_b_fun$ A_tree_tree$ )B_tree$ )
(declare-fun map_tree$h (B_tree_a_fun$ B_tree_tree$ )A_tree$ )
(declare-fun map_tree$i (A_tree_a_fun$ A_tree_tree$ )A_tree$ )
(declare-fun map_tree$j (B_b_tree_fun$ B_tree$ )B_tree_tree$ )
(declare-fun map_tree$k (B_a_tree_fun$ B_tree$ )A_tree_tree$ )
(declare-fun tree_chop$ (A_tree$ )A_tree$ )
(declare-fun tree_pure$ (A$ )A_tree$ )
(declare-fun tree_chop$a (B_tree_tree$ )B_tree_tree$ )
(declare-fun tree_chop$b (A_tree_tree$ )A_tree_tree$ )
(declare-fun tree_chop$c (B_tree$ )B_tree$ )
(declare-fun tree_pure$a (B_tree$ )B_tree_tree$ )
(declare-fun tree_pure$b (A_tree$ )A_tree_tree$ )
(declare-fun tree_pure$c (B$ )B_tree$ )
(declare-fun traverse_tree$ (Dir_list$ B_tree_tree$ )B_tree_tree$ )
(declare-fun traverse_tree$a (Dir_list$ A_tree$ )A_tree$ )
(declare-fun traverse_tree$b (Dir_list$ A_tree_tree$ )A_tree_tree$ )
(declare-fun traverse_tree$c (Dir_list$ B_tree$ )B_tree$ )
(assert (! (not (= (map_tree$ f$ (mod$ t$ t$a ))(mod$a (map_tree$ f$ t$ )(map_tree$ f$ t$a )))):named a0 ))
(assert (! (forall ((?v0 A_tree_tree_tree_tree$ )(?v1 A_tree_tree_tree_tree$ ))(= (root$d (mod$b ?v0 ?v1 ))(mod$c (root$d ?v0 )(root$d ?v1 )))):named a1 ))
(assert (! (forall ((?v0 B_tree_tree_tree_tree$ )(?v1 B_tree_tree_tree_tree$ ))(= (root$g (mod$d ?v0 ?v1 ))(mod$e (root$g ?v0 )(root$g ?v1 )))):named a2 ))
(assert (! (forall ((?v0 B_tree_tree_tree$ )(?v1 B_tree_tree_tree$ ))(= (root$f (mod$e ?v0 ?v1 ))(mod$f (root$f ?v0 )(root$f ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ ))(= (root$c (mod$c ?v0 ?v1 ))(mod$g (root$c ?v0 )(root$c ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ ))(= (root$b (mod$g ?v0 ?v1 ))(mod$ (root$b ?v0 )(root$b ?v1 )))):named a5 ))
(assert (! (forall ((?v0 B_tree_tree$ )(?v1 B_tree_tree$ ))(= (root$e (mod$f ?v0 ?v1 ))(mod$a (root$e ?v0 )(root$e ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (root$a (mod$ ?v0 ?v1 ))(fun_app$ (mod$h (root$a ?v0 ))(root$a ?v1 )))):named a7 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_tree$ ))(= (root$ (mod$a ?v0 ?v1 ))(fun_app$a (mod$i (root$ ?v0 ))(root$ ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_tree_fun$ )(?v2 A_tree$ ))(= (traverse_tree$ ?v0 (map_tree$a ?v1 ?v2 ))(map_tree$a ?v1 (traverse_tree$a ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_tree_fun$ )(?v2 A_tree$ ))(= (traverse_tree$b ?v0 (map_tree$b ?v1 ?v2 ))(map_tree$b ?v1 (traverse_tree$a ?v0 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_b_fun$ )(?v2 B_tree$ ))(= (traverse_tree$c ?v0 (map_tree$c ?v1 ?v2 ))(map_tree$c ?v1 (traverse_tree$c ?v0 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B_a_fun$ )(?v2 B_tree$ ))(= (traverse_tree$a ?v0 (map_tree$d ?v1 ?v2 ))(map_tree$d ?v1 (traverse_tree$c ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun$ )(?v2 A_tree$ ))(= (traverse_tree$a ?v0 (map_tree$e ?v1 ?v2 ))(map_tree$e ?v1 (traverse_tree$a ?v0 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_b_fun$ )(?v2 A_tree$ ))(= (traverse_tree$c ?v0 (map_tree$ ?v1 ?v2 ))(map_tree$ ?v1 (traverse_tree$a ?v0 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_b_tree_fun$ )(?v1 A$ ))(= (map_tree$a ?v0 (tree_pure$ ?v1 ))(tree_pure$a (fun_app$b ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_a_tree_fun$ )(?v1 A$ ))(= (map_tree$b ?v0 (tree_pure$ ?v1 ))(tree_pure$b (fun_app$c ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$e ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$ ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (map_tree$d ?v0 (tree_pure$c ?v1 ))(tree_pure$ (fun_app$d ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (map_tree$c ?v0 (tree_pure$c ?v1 ))(tree_pure$c (fun_app$a ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (map_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$c (fun_app$e ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_b_tree_fun$ )(?v1 A_tree$ ))(= (map_tree$a ?v0 (tree_chop$ ?v1 ))(tree_chop$a (map_tree$a ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_a_tree_fun$ )(?v1 A_tree$ ))(= (map_tree$b ?v0 (tree_chop$ ?v1 ))(tree_chop$b (map_tree$b ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (map_tree$e ?v0 (tree_chop$ ?v1 ))(tree_chop$ (map_tree$e ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (map_tree$d ?v0 (tree_chop$c ?v1 ))(tree_chop$ (map_tree$d ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (map_tree$c ?v0 (tree_chop$c ?v1 ))(tree_chop$c (map_tree$c ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (map_tree$ ?v0 (tree_chop$ ?v1 ))(tree_chop$c (map_tree$ ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ ))(= (right$c (mod$c ?v0 ?v1 ))(mod$c (right$c ?v0 )(right$c ?v1 )))):named a27 ))
(assert (! (forall ((?v0 B_tree_tree_tree$ )(?v1 B_tree_tree_tree$ ))(= (right$f (mod$e ?v0 ?v1 ))(mod$e (right$f ?v0 )(right$f ?v1 )))):named a28 ))
(assert (! (forall ((?v0 B_tree_tree$ )(?v1 B_tree_tree$ ))(= (right$e (mod$f ?v0 ?v1 ))(mod$f (right$e ?v0 )(right$e ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ ))(= (right$b (mod$g ?v0 ?v1 ))(mod$g (right$b ?v0 )(right$b ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (right$a (mod$ ?v0 ?v1 ))(mod$ (right$a ?v0 )(right$a ?v1 )))):named a31 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_tree$ ))(= (right$ (mod$a ?v0 ?v1 ))(mod$a (right$ ?v0 )(right$ ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ ))(= (left$c (mod$c ?v0 ?v1 ))(mod$c (left$c ?v0 )(left$c ?v1 )))):named a33 ))
(assert (! (forall ((?v0 B_tree_tree_tree$ )(?v1 B_tree_tree_tree$ ))(= (left$f (mod$e ?v0 ?v1 ))(mod$e (left$f ?v0 )(left$f ?v1 )))):named a34 ))
(assert (! (forall ((?v0 B_tree_tree$ )(?v1 B_tree_tree$ ))(= (left$e (mod$f ?v0 ?v1 ))(mod$f (left$e ?v0 )(left$e ?v1 )))):named a35 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ ))(= (left$b (mod$g ?v0 ?v1 ))(mod$g (left$b ?v0 )(left$b ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (left$a (mod$ ?v0 ?v1 ))(mod$ (left$a ?v0 )(left$a ?v1 )))):named a37 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_tree$ ))(= (left$ (mod$a ?v0 ?v1 ))(mod$a (left$ ?v0 )(left$ ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (fun_app$e f$ (fun_app$ (mod$h ?v0 )?v1 ))(fun_app$a (mod$i (fun_app$e f$ ?v0 ))(fun_app$e f$ ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$e ?v0 (root$a ?v1 )))):named a40 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (root$ (map_tree$c ?v0 ?v1 ))(fun_app$a ?v0 (root$ ?v1 )))):named a41 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (root$a (map_tree$d ?v0 ?v1 ))(fun_app$d ?v0 (root$ ?v1 )))):named a42 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$a (map_tree$e ?v0 ?v1 ))(fun_app$ ?v0 (root$a ?v1 )))):named a43 ))
(assert (! (forall ((?v0 B_tree_b_fun$ )(?v1 B_tree_tree$ ))(= (root$ (map_tree$f ?v0 ?v1 ))(fun_app$f ?v0 (root$e ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_tree_b_fun$ )(?v1 A_tree_tree$ ))(= (root$ (map_tree$g ?v0 ?v1 ))(fun_app$g ?v0 (root$b ?v1 )))):named a45 ))
(assert (! (forall ((?v0 B_tree_a_fun$ )(?v1 B_tree_tree$ ))(= (root$a (map_tree$h ?v0 ?v1 ))(fun_app$h ?v0 (root$e ?v1 )))):named a46 ))
(assert (! (forall ((?v0 A_tree_a_fun$ )(?v1 A_tree_tree$ ))(= (root$a (map_tree$i ?v0 ?v1 ))(fun_app$i ?v0 (root$b ?v1 )))):named a47 ))
(assert (! (forall ((?v0 B_b_tree_fun$ )(?v1 B_tree$ ))(= (root$e (map_tree$j ?v0 ?v1 ))(fun_app$j ?v0 (root$ ?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_b_tree_fun$ )(?v1 A_tree$ ))(= (root$e (map_tree$a ?v0 ?v1 ))(fun_app$b ?v0 (root$a ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$e ?v0 (root$a ?v1 )))):named a50 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (root$ (map_tree$c ?v0 ?v1 ))(fun_app$a ?v0 (root$ ?v1 )))):named a51 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (root$a (map_tree$d ?v0 ?v1 ))(fun_app$d ?v0 (root$ ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$a (map_tree$e ?v0 ?v1 ))(fun_app$ ?v0 (root$a ?v1 )))):named a53 ))
(assert (! (forall ((?v0 B_tree_b_fun$ )(?v1 B_tree_tree$ ))(= (root$ (map_tree$f ?v0 ?v1 ))(fun_app$f ?v0 (root$e ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A_tree_b_fun$ )(?v1 A_tree_tree$ ))(= (root$ (map_tree$g ?v0 ?v1 ))(fun_app$g ?v0 (root$b ?v1 )))):named a55 ))
(assert (! (forall ((?v0 B_tree_a_fun$ )(?v1 B_tree_tree$ ))(= (root$a (map_tree$h ?v0 ?v1 ))(fun_app$h ?v0 (root$e ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_tree_a_fun$ )(?v1 A_tree_tree$ ))(= (root$a (map_tree$i ?v0 ?v1 ))(fun_app$i ?v0 (root$b ?v1 )))):named a57 ))
(assert (! (forall ((?v0 B_b_tree_fun$ )(?v1 B_tree$ ))(= (root$e (map_tree$j ?v0 ?v1 ))(fun_app$j ?v0 (root$ ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_b_tree_fun$ )(?v1 A_tree$ ))(= (root$e (map_tree$a ?v0 ?v1 ))(fun_app$b ?v0 (root$a ?v1 )))):named a59 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (right$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$a ?v1 )))):named a60 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (right$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (right$ ?v1 )))):named a61 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (right$a (map_tree$d ?v0 ?v1 ))(map_tree$d ?v0 (right$ ?v1 )))):named a62 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (right$a (map_tree$e ?v0 ?v1 ))(map_tree$e ?v0 (right$a ?v1 )))):named a63 ))
(assert (! (forall ((?v0 A_tree_b_fun$ )(?v1 A_tree_tree$ ))(= (right$ (map_tree$g ?v0 ?v1 ))(map_tree$g ?v0 (right$b ?v1 )))):named a64 ))
(assert (! (forall ((?v0 B_tree_b_fun$ )(?v1 B_tree_tree$ ))(= (right$ (map_tree$f ?v0 ?v1 ))(map_tree$f ?v0 (right$e ?v1 )))):named a65 ))
(assert (! (forall ((?v0 A_tree_a_fun$ )(?v1 A_tree_tree$ ))(= (right$a (map_tree$i ?v0 ?v1 ))(map_tree$i ?v0 (right$b ?v1 )))):named a66 ))
(assert (! (forall ((?v0 B_tree_a_fun$ )(?v1 B_tree_tree$ ))(= (right$a (map_tree$h ?v0 ?v1 ))(map_tree$h ?v0 (right$e ?v1 )))):named a67 ))
(assert (! (forall ((?v0 B_a_tree_fun$ )(?v1 B_tree$ ))(= (right$b (map_tree$k ?v0 ?v1 ))(map_tree$k ?v0 (right$ ?v1 )))):named a68 ))
(assert (! (forall ((?v0 B_b_tree_fun$ )(?v1 B_tree$ ))(= (right$e (map_tree$j ?v0 ?v1 ))(map_tree$j ?v0 (right$ ?v1 )))):named a69 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (right$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$a ?v1 )))):named a70 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (right$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (right$ ?v1 )))):named a71 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (right$a (map_tree$d ?v0 ?v1 ))(map_tree$d ?v0 (right$ ?v1 )))):named a72 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (right$a (map_tree$e ?v0 ?v1 ))(map_tree$e ?v0 (right$a ?v1 )))):named a73 ))
(assert (! (forall ((?v0 A_tree_b_fun$ )(?v1 A_tree_tree$ ))(= (right$ (map_tree$g ?v0 ?v1 ))(map_tree$g ?v0 (right$b ?v1 )))):named a74 ))
(assert (! (forall ((?v0 B_tree_b_fun$ )(?v1 B_tree_tree$ ))(= (right$ (map_tree$f ?v0 ?v1 ))(map_tree$f ?v0 (right$e ?v1 )))):named a75 ))
(assert (! (forall ((?v0 A_tree_a_fun$ )(?v1 A_tree_tree$ ))(= (right$a (map_tree$i ?v0 ?v1 ))(map_tree$i ?v0 (right$b ?v1 )))):named a76 ))
(assert (! (forall ((?v0 B_tree_a_fun$ )(?v1 B_tree_tree$ ))(= (right$a (map_tree$h ?v0 ?v1 ))(map_tree$h ?v0 (right$e ?v1 )))):named a77 ))
(assert (! (forall ((?v0 B_a_tree_fun$ )(?v1 B_tree$ ))(= (right$b (map_tree$k ?v0 ?v1 ))(map_tree$k ?v0 (right$ ?v1 )))):named a78 ))
(assert (! (forall ((?v0 B_b_tree_fun$ )(?v1 B_tree$ ))(= (right$e (map_tree$j ?v0 ?v1 ))(map_tree$j ?v0 (right$ ?v1 )))):named a79 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$a ?v1 )))):named a80 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$ ?v1 )))):named a81 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$d ?v0 ?v1 ))(map_tree$d ?v0 (left$ ?v1 )))):named a82 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$e ?v0 ?v1 ))(map_tree$e ?v0 (left$a ?v1 )))):named a83 ))
(assert (! (forall ((?v0 A_tree_b_fun$ )(?v1 A_tree_tree$ ))(= (left$ (map_tree$g ?v0 ?v1 ))(map_tree$g ?v0 (left$b ?v1 )))):named a84 ))
(assert (! (forall ((?v0 B_tree_b_fun$ )(?v1 B_tree_tree$ ))(= (left$ (map_tree$f ?v0 ?v1 ))(map_tree$f ?v0 (left$e ?v1 )))):named a85 ))
(assert (! (forall ((?v0 A_tree_a_fun$ )(?v1 A_tree_tree$ ))(= (left$a (map_tree$i ?v0 ?v1 ))(map_tree$i ?v0 (left$b ?v1 )))):named a86 ))
(assert (! (forall ((?v0 B_tree_a_fun$ )(?v1 B_tree_tree$ ))(= (left$a (map_tree$h ?v0 ?v1 ))(map_tree$h ?v0 (left$e ?v1 )))):named a87 ))
(assert (! (forall ((?v0 B_a_tree_fun$ )(?v1 B_tree$ ))(= (left$b (map_tree$k ?v0 ?v1 ))(map_tree$k ?v0 (left$ ?v1 )))):named a88 ))
(assert (! (forall ((?v0 B_b_tree_fun$ )(?v1 B_tree$ ))(= (left$e (map_tree$j ?v0 ?v1 ))(map_tree$j ?v0 (left$ ?v1 )))):named a89 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$a ?v1 )))):named a90 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$ ?v1 )))):named a91 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$d ?v0 ?v1 ))(map_tree$d ?v0 (left$ ?v1 )))):named a92 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$e ?v0 ?v1 ))(map_tree$e ?v0 (left$a ?v1 )))):named a93 ))
(assert (! (forall ((?v0 A_tree_b_fun$ )(?v1 A_tree_tree$ ))(= (left$ (map_tree$g ?v0 ?v1 ))(map_tree$g ?v0 (left$b ?v1 )))):named a94 ))
(assert (! (forall ((?v0 B_tree_b_fun$ )(?v1 B_tree_tree$ ))(= (left$ (map_tree$f ?v0 ?v1 ))(map_tree$f ?v0 (left$e ?v1 )))):named a95 ))
(assert (! (forall ((?v0 A_tree_a_fun$ )(?v1 A_tree_tree$ ))(= (left$a (map_tree$i ?v0 ?v1 ))(map_tree$i ?v0 (left$b ?v1 )))):named a96 ))
(assert (! (forall ((?v0 B_tree_a_fun$ )(?v1 B_tree_tree$ ))(= (left$a (map_tree$h ?v0 ?v1 ))(map_tree$h ?v0 (left$e ?v1 )))):named a97 ))
(assert (! (forall ((?v0 B_a_tree_fun$ )(?v1 B_tree$ ))(= (left$b (map_tree$k ?v0 ?v1 ))(map_tree$k ?v0 (left$ ?v1 )))):named a98 ))
(assert (! (forall ((?v0 B_b_tree_fun$ )(?v1 B_tree$ ))(= (left$e (map_tree$j ?v0 ?v1 ))(map_tree$j ?v0 (left$ ?v1 )))):named a99 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 B$ ))(= (traverse_tree$c ?v0 (tree_pure$c ?v1 ))(tree_pure$c ?v1 ))):named a100 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A$ ))(= (traverse_tree$a ?v0 (tree_pure$ ?v1 ))(tree_pure$ ?v1 ))):named a101 ))
(assert (! (forall ((?v0 A$ ))(= (tree_chop$ (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a102 ))
(assert (! (forall ((?v0 B$ ))(= (tree_chop$c (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a103 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (tree_pure$ ?v0 )(tree_pure$ ?v1 ))(= ?v0 ?v1 ))):named a104 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tree_pure$c ?v0 )(tree_pure$c ?v1 ))(= ?v0 ?v1 ))):named a105 ))
(check-sat )
;(get-unsat-core )
