;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort Nat_a_fun_nat_a_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun n$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun uu$ ()A_a_fun$ )
(declare-fun xs$ ()A_stream$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun uua$ (A_a_fun$ )A_a_a_fun_fun_a_a_a_fun_fun_fun$ )
(declare-fun smap$ (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun snth$ (A_stream$ )Nat_a_fun$ )
(declare-fun smap2$ (A_a_a_fun_fun$ A_stream$ A_stream$ )A_stream$ )
(declare-fun of_seq$ (Nat_a_fun$ )A_stream$ )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun smember$ (A$ A_stream$ )Bool )
(declare-fun case_nat$ (A$ )Nat_a_fun_nat_a_fun_fun$ )
(declare-fun fun_app$a (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$b (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$ )A_a_a_fun_fun$ )
(declare-fun fun_app$c (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$d (Nat_a_fun_nat_a_fun_fun$ Nat_a_fun$ )Nat_a_fun$ )
(declare-fun fun_app$e (A_bool_fun$ A$ )Bool )
(declare-fun stream_all$ (A_bool_fun$ A_stream$ )Bool )
(declare-fun pred_stream$ (A_bool_fun$ A_stream$ )Bool )
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_a_fun_fun$ )(?v2 A$ )(?v3 A$ ))(! (= (fun_app$ (fun_app$a (fun_app$b (uua$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (fun_app$b (uua$ ?v0 )?v1 )?v2 )?v3 )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )?v0 ):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (not (= (fun_app$c (snth$ (sCons$ x$ xs$ ))n$ )(fun_app$c (fun_app$d (case_nat$ x$ )(snth$ xs$ ))n$ ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(= (snth$ (of_seq$ ?v0 ))?v0 )):named a4 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smember$ ?v0 (sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (smember$ ?v0 ?v2 ))):pattern ((smember$ ?v0 (sCons$ ?v1 ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (pred_stream$ ?v0 (sCons$ ?v1 ?v2 ))(and (fun_app$e ?v0 ?v1 )(pred_stream$ ?v0 ?v2 ))):pattern ((pred_stream$ ?v0 (sCons$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 Nat$ ))(! (= (fun_app$c (snth$ (sCons$ ?v0 ?v1 ))(suc$ ?v2 ))(fun_app$c (snth$ ?v1 )?v2 )):pattern ((fun_app$c (snth$ (sCons$ ?v0 ?v1 ))(suc$ ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (stream_all$ ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$e ?v0 (fun_app$c (snth$ ?v1 )?v2 ))))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (stream_all$ ?v0 (sCons$ ?v1 ?v2 ))(and (fun_app$e ?v0 ?v1 )(stream_all$ ?v0 ?v2 ))):pattern ((stream_all$ ?v0 (sCons$ ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$ ?v0 ?v4 ))(= ?v3 (smap$ ?v0 ?v5 ))))))):named a11 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 Nat$ ))(= (fun_app$c (snth$ (smap2$ ?v0 ?v1 ?v2 ))?v3 )(fun_app$ (fun_app$a ?v0 (fun_app$c (snth$ ?v1 )?v3 ))(fun_app$c (snth$ ?v2 )?v3 )))):named a12 ))
(assert (! (forall ((?v0 A_stream$ ))(= (smap$ uu$ ?v0 )?v0 )):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$c (snth$ (smap$ ?v0 ?v1 ))?v2 )(fun_app$ ?v0 (fun_app$c (snth$ ?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_a_fun_fun$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (smap$ ?v0 (smap2$ ?v1 ?v2 ?v3 ))(smap2$ (fun_app$b (uua$ ?v0 )?v1 )?v2 ?v3 ))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smap$ ?v0 (sCons$ ?v1 ?v2 ))(sCons$ (fun_app$ ?v0 ?v1 )(smap$ ?v0 ?v2 ))):pattern ((smap$ ?v0 (sCons$ ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (smap$ ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$ ?v0 (fun_app$c (snth$ ?v1 )?v3 ))(fun_app$c (snth$ ?v2 )?v3 ))))):named a17 ))
(check-sat )
;(get-unsat-core )
