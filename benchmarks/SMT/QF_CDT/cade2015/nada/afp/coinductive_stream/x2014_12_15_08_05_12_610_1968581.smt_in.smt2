;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort C_set$ 0 )
(declare-sort D_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort A_d_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort B_d_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort C_d_fun$ 0 )
(declare-sort D_a_fun$ 0 )
(declare-sort D_b_fun$ 0 )
(declare-sort D_c_fun$ 0 )
(declare-sort D_d_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort D_bool_fun$ 0 )
(declare-sort B_a_set_fun$ 0 )
(declare-sort B_b_set_fun$ 0 )
(declare-sort B_c_set_fun$ 0 )
(declare-sort B_d_set_fun$ 0 )
(declare-sort D_a_set_fun$ 0 )
(declare-sort D_b_set_fun$ 0 )
(declare-sort D_c_set_fun$ 0 )
(declare-sort D_d_set_fun$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort B_stream_set$ 0 )
(declare-sort C_d_prod_set$ 0 )
(declare-sort C_stream_set$ 0 )
(declare-sort D_stream_set$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort A_d_prod_a_fun$ 0 )
(declare-sort A_d_prod_b_fun$ 0 )
(declare-sort A_d_prod_d_fun$ 0 )
(declare-sort C_a_b_prod_fun$ 0 )
(declare-sort C_b_prod_a_fun$ 0 )
(declare-sort C_b_prod_b_fun$ 0 )
(declare-sort C_b_prod_c_fun$ 0 )
(declare-sort C_d_prod_a_fun$ 0 )
(declare-sort C_d_prod_b_fun$ 0 )
(declare-sort C_d_prod_c_fun$ 0 )
(declare-sort C_d_prod_d_fun$ 0 )
(declare-sort D_a_b_prod_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort C_d_bool_fun_fun$ 0 )
(declare-sort A_b_a_set_fun_fun$ 0 )
(declare-sort A_b_b_set_fun_fun$ 0 )
(declare-sort A_b_c_set_fun_fun$ 0 )
(declare-sort A_b_d_set_fun_fun$ 0 )
(declare-sort C_d_a_set_fun_fun$ 0 )
(declare-sort C_d_b_set_fun_fun$ 0 )
(declare-sort C_d_c_set_fun_fun$ 0 )
(declare-sort C_d_d_set_fun_fun$ 0 )
(declare-sort B_a_stream_set_fun$ 0 )
(declare-sort D_a_stream_set_fun$ 0 )
(declare-sort A_b_prod_stream_set$ 0 )
(declare-sort C_d_prod_stream_set$ 0 )
(declare-sort C_d_a_b_prod_fun_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_d_prod_fun$ 0 )
(declare-sort A_b_prod_c_b_prod_fun$ 0 )
(declare-sort A_d_prod_a_b_prod_fun$ 0 )
(declare-sort A_d_prod_a_d_prod_fun$ 0 )
(declare-sort A_d_prod_c_d_prod_fun$ 0 )
(declare-sort B_d_prod_b_d_prod_fun$ 0 )
(declare-sort C_a_prod_c_a_prod_fun$ 0 )
(declare-sort C_b_prod_a_b_prod_fun$ 0 )
(declare-sort C_b_prod_c_b_prod_fun$ 0 )
(declare-sort C_b_prod_c_d_prod_fun$ 0 )
(declare-sort C_c_prod_c_c_prod_fun$ 0 )
(declare-sort C_d_prod_a_b_prod_fun$ 0 )
(declare-sort C_d_prod_a_d_prod_fun$ 0 )
(declare-sort C_d_prod_c_b_prod_fun$ 0 )
(declare-sort C_d_prod_c_d_prod_fun$ 0 )
(declare-sort D_a_prod_d_a_prod_fun$ 0 )
(declare-sort D_b_prod_d_b_prod_fun$ 0 )
(declare-sort D_c_prod_d_c_prod_fun$ 0 )
(declare-sort D_d_prod_d_d_prod_fun$ 0 )
(declare-sort A_b_a_stream_set_fun_fun$ 0 )
(declare-sort C_d_a_stream_set_fun_fun$ 0 )
(declare-sort C_b_prod_a_b_prod_b_prod_fun$ 0 )
(declare-sort C_d_prod_a_b_prod_d_prod_fun$ 0 )
(declare-sort B_b_fun_a_b_prod_a_b_prod_fun_fun$ 0 )
(declare-sort D_b_fun_c_d_prod_a_b_prod_fun_fun$ 0 )
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_stream$ 0)
(declare-sort A_stream$ 0)
(declare-sort B_stream$ 0)
(declare-sort C_stream$ 0)
(declare-sort D_stream$ 0)
(declare-fun shd$ (A_b_prod_stream$)A_b_prod$)
(declare-fun stl$ (A_b_prod_stream$)A_b_prod_stream$)
(declare-fun sCons$ (A_b_prod$ A_b_prod_stream$ )A_b_prod_stream$)
(declare-fun shd$a (A_stream$)A$)
(declare-fun stl$a (A_stream$)A_stream$)
(declare-fun sCons$a (A$ A_stream$ )A_stream$)
(declare-fun shd$b (B_stream$)B$)
(declare-fun stl$b (B_stream$)B_stream$)
(declare-fun sCons$b (B$ B_stream$ )B_stream$)
(declare-fun shd$c (C_stream$)C$)
(declare-fun stl$c (C_stream$)C_stream$)
(declare-fun sCons$c (C$ C_stream$ )C_stream$)
(declare-fun shd$d (D_stream$)D$)
(declare-fun stl$d (D_stream$)D_stream$)
(declare-fun sCons$d (D$ D_stream$ )D_stream$)
(declare-sort C_d_prod$ 0)
(declare-fun fst$a (C_d_prod$)C$)
(declare-fun snd$a (C_d_prod$)D$)
(declare-fun pair$a (C$ D$ )C_d_prod$)
(declare-sort C_d_prod_stream$ 0)
(declare-fun shd$e (C_d_prod_stream$)C_d_prod$)
(declare-fun stl$e (C_d_prod_stream$)C_d_prod_stream$)
(declare-fun sCons$e (C_d_prod$ C_d_prod_stream$ )C_d_prod_stream$)
(declare-sort C_b_prod$ 0)
(declare-fun fst$b (C_b_prod$)C$)
(declare-fun snd$b (C_b_prod$)B$)
(declare-fun pair$b (C$ B$ )C_b_prod$)
(declare-sort C_b_prod_stream$ 0)
(declare-fun shd$f (C_b_prod_stream$)C_b_prod$)
(declare-fun stl$f (C_b_prod_stream$)C_b_prod_stream$)
(declare-fun sCons$f (C_b_prod$ C_b_prod_stream$ )C_b_prod_stream$)
(declare-sort A_d_prod$ 0)
(declare-fun fst$c (A_d_prod$)A$)
(declare-fun snd$c (A_d_prod$)D$)
(declare-fun pair$c (A$ D$ )A_d_prod$)
(declare-sort A_d_prod_stream$ 0)
(declare-fun shd$g (A_d_prod_stream$)A_d_prod$)
(declare-fun stl$g (A_d_prod_stream$)A_d_prod_stream$)
(declare-fun sCons$g (A_d_prod$ A_d_prod_stream$ )A_d_prod_stream$)
(declare-sort A_b_prod_d_prod$ 0)
(declare-fun fst$d (A_b_prod_d_prod$)A_b_prod$)
(declare-fun snd$d (A_b_prod_d_prod$)D$)
(declare-fun pair$d (A_b_prod$ D$ )A_b_prod_d_prod$)
(declare-sort A_b_prod_d_prod_stream$ 0)
(declare-fun shd$h (A_b_prod_d_prod_stream$)A_b_prod_d_prod$)
(declare-fun stl$h (A_b_prod_d_prod_stream$)A_b_prod_d_prod_stream$)
(declare-fun sCons$h (A_b_prod_d_prod$ A_b_prod_d_prod_stream$ )A_b_prod_d_prod_stream$)
(declare-sort A_b_prod_b_prod$ 0)
(declare-fun fst$e (A_b_prod_b_prod$)A_b_prod$)
(declare-fun snd$e (A_b_prod_b_prod$)B$)
(declare-fun pair$e (A_b_prod$ B$ )A_b_prod_b_prod$)
(declare-sort A_b_prod_b_prod_stream$ 0)
(declare-fun shd$i (A_b_prod_b_prod_stream$)A_b_prod_b_prod$)
(declare-fun stl$i (A_b_prod_b_prod_stream$)A_b_prod_b_prod_stream$)
(declare-fun sCons$i (A_b_prod_b_prod$ A_b_prod_b_prod_stream$ )A_b_prod_b_prod_stream$)
(declare-sort D_d_prod$ 0)
(declare-fun fst$f (D_d_prod$)D$)
(declare-fun snd$f (D_d_prod$)D$)
(declare-fun pair$f (D$ D$ )D_d_prod$)
(declare-sort D_d_prod_stream$ 0)
(declare-fun shd$j (D_d_prod_stream$)D_d_prod$)
(declare-fun stl$j (D_d_prod_stream$)D_d_prod_stream$)
(declare-fun sCons$j (D_d_prod$ D_d_prod_stream$ )D_d_prod_stream$)
(declare-sort D_c_prod$ 0)
(declare-fun fst$g (D_c_prod$)D$)
(declare-fun snd$g (D_c_prod$)C$)
(declare-fun pair$g (D$ C$ )D_c_prod$)
(declare-sort D_c_prod_stream$ 0)
(declare-fun shd$k (D_c_prod_stream$)D_c_prod$)
(declare-fun stl$k (D_c_prod_stream$)D_c_prod_stream$)
(declare-fun sCons$k (D_c_prod$ D_c_prod_stream$ )D_c_prod_stream$)
(declare-sort D_b_prod$ 0)
(declare-fun fst$h (D_b_prod$)D$)
(declare-fun snd$h (D_b_prod$)B$)
(declare-fun pair$h (D$ B$ )D_b_prod$)
(declare-sort D_b_prod_stream$ 0)
(declare-fun shd$l (D_b_prod_stream$)D_b_prod$)
(declare-fun stl$l (D_b_prod_stream$)D_b_prod_stream$)
(declare-fun sCons$l (D_b_prod$ D_b_prod_stream$ )D_b_prod_stream$)
(declare-sort D_a_prod$ 0)
(declare-fun fst$i (D_a_prod$)D$)
(declare-fun snd$i (D_a_prod$)A$)
(declare-fun pair$i (D$ A$ )D_a_prod$)
(declare-sort D_a_prod_stream$ 0)
(declare-fun shd$m (D_a_prod_stream$)D_a_prod$)
(declare-fun stl$m (D_a_prod_stream$)D_a_prod_stream$)
(declare-fun sCons$m (D_a_prod$ D_a_prod_stream$ )D_a_prod_stream$)
(declare-sort C_c_prod$ 0)
(declare-fun fst$j (C_c_prod$)C$)
(declare-fun snd$j (C_c_prod$)C$)
(declare-fun pair$j (C$ C$ )C_c_prod$)
(declare-sort C_c_prod_stream$ 0)
(declare-fun shd$n (C_c_prod_stream$)C_c_prod$)
(declare-fun stl$n (C_c_prod_stream$)C_c_prod_stream$)
(declare-fun sCons$n (C_c_prod$ C_c_prod_stream$ )C_c_prod_stream$)
(declare-sort C_a_prod$ 0)
(declare-fun fst$k (C_a_prod$)C$)
(declare-fun snd$k (C_a_prod$)A$)
(declare-fun pair$k (C$ A$ )C_a_prod$)
(declare-sort C_a_prod_stream$ 0)
(declare-fun shd$o (C_a_prod_stream$)C_a_prod$)
(declare-fun stl$o (C_a_prod_stream$)C_a_prod_stream$)
(declare-fun sCons$o (C_a_prod$ C_a_prod_stream$ )C_a_prod_stream$)
(declare-sort B_d_prod$ 0)
(declare-fun fst$l (B_d_prod$)B$)
(declare-fun snd$l (B_d_prod$)D$)
(declare-fun pair$l (B$ D$ )B_d_prod$)
(declare-sort B_d_prod_stream$ 0)
(declare-fun shd$p (B_d_prod_stream$)B_d_prod$)
(declare-fun stl$p (B_d_prod_stream$)B_d_prod_stream$)
(declare-fun sCons$p (B_d_prod$ B_d_prod_stream$ )B_d_prod_stream$)
(declare-fun f$ ()C_a_fun$ )
(declare-fun g$ ()D_b_fun$ )
(declare-fun uu$ (C_a_fun$ )C_b_prod_a_fun$ )
(declare-fun xs$ ()C_stream$ )
(declare-fun ys$ ()D_stream$ )
(declare-fun uua$ (C_a_b_prod_fun$ )C_b_prod_a_b_prod_fun$ )
(declare-fun uub$ (C_c_fun$ )C_b_prod_c_fun$ )
(declare-fun uuc$ (A_a_fun$ )A_d_prod_a_fun$ )
(declare-fun uud$ (C_c_fun$ )C_d_prod_c_fun$ )
(declare-fun uue$ (A_a_fun$ )A_b_prod_a_fun$ )
(declare-fun uuf$ (C_a_fun$ )C_d_prod_a_fun$ )
(declare-fun uug$ (C_a_b_prod_fun$ )C_d_prod_a_b_prod_fun$ )
(declare-fun uuh$ (D_b_fun$ )A_d_prod_b_fun$ )
(declare-fun uui$ (D_d_fun$ )A_d_prod_d_fun$ )
(declare-fun uuj$ (B_b_fun$ )A_b_prod_b_fun$ )
(declare-fun uuk$ (B_b_fun$ )C_b_prod_b_fun$ )
(declare-fun uul$ (D_d_fun$ )C_d_prod_d_fun$ )
(declare-fun uum$ (D_b_fun$ )C_d_prod_b_fun$ )
(declare-fun uun$ (D_a_b_prod_fun$ )C_d_prod_a_b_prod_fun$ )
(declare-fun smap$ (C_a_fun$ C_stream$ )A_stream$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun szip$ (A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun apfst$ (A_c_fun$ )A_d_prod_c_d_prod_fun$ )
(declare-fun apsnd$ (B_d_fun$ )C_b_prod_c_d_prod_fun$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun smap$a (D_b_fun$ D_stream$ )B_stream$ )
(declare-fun smap$b (C_d_prod_a_b_prod_fun$ C_d_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$c (B_d_fun$ B_stream$ )D_stream$ )
(declare-fun smap$d (C_b_prod_c_d_prod_fun$ C_b_prod_stream$ )C_d_prod_stream$ )
(declare-fun smap$e (A_b_prod_a_d_prod_fun$ A_b_prod_stream$ )A_d_prod_stream$ )
(declare-fun smap$f (D_d_fun$ D_stream$ )D_stream$ )
(declare-fun smap$g (A_d_prod_a_d_prod_fun$ A_d_prod_stream$ )A_d_prod_stream$ )
(declare-fun smap$h (B_b_fun$ B_stream$ )B_stream$ )
(declare-fun smap$i (C_b_prod_c_b_prod_fun$ C_b_prod_stream$ )C_b_prod_stream$ )
(declare-fun smap$j (A_b_prod_a_b_prod_fun$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$k (C_d_prod_c_d_prod_fun$ C_d_prod_stream$ )C_d_prod_stream$ )
(declare-fun smap$l (C_d_prod_c_b_prod_fun$ C_d_prod_stream$ )C_b_prod_stream$ )
(declare-fun smap$m (A_d_prod_a_b_prod_fun$ A_d_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$n (A_c_fun$ A_stream$ )C_stream$ )
(declare-fun smap$o (A_d_prod_c_d_prod_fun$ A_d_prod_stream$ )C_d_prod_stream$ )
(declare-fun smap$p (A_b_prod_c_b_prod_fun$ A_b_prod_stream$ )C_b_prod_stream$ )
(declare-fun smap$q (C_a_b_prod_fun$ C_stream$ )A_b_prod_stream$ )
(declare-fun smap$r (C_d_prod_a_b_prod_d_prod_fun$ C_d_prod_stream$ )A_b_prod_d_prod_stream$ )
(declare-fun smap$s (C_b_prod_a_b_prod_b_prod_fun$ C_b_prod_stream$ )A_b_prod_b_prod_stream$ )
(declare-fun smap$t (C_c_fun$ C_stream$ )C_stream$ )
(declare-fun smap$u (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun smap$v (C_d_prod_a_d_prod_fun$ C_d_prod_stream$ )A_d_prod_stream$ )
(declare-fun smap$w (C_b_prod_a_b_prod_fun$ C_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$x (C_d_fun$ C_stream$ )D_stream$ )
(declare-fun smap$y (A_d_fun$ A_stream$ )D_stream$ )
(declare-fun smap$z (D_c_fun$ D_stream$ )C_stream$ )
(declare-fun smap2$ (C_d_a_b_prod_fun_fun$ C_stream$ D_stream$ )A_b_prod_stream$ )
(declare-fun snth$a (C_stream$ Nat$ )C$ )
(declare-fun snth$b (B_stream$ Nat$ )B$ )
(declare-fun snth$c (D_stream$ Nat$ )D$ )
(declare-fun snth$d (A_b_prod_stream$ Nat$ )A_b_prod$ )
(declare-fun snth$e (C_d_prod_stream$ Nat$ )C_d_prod$ )
(declare-fun szip$a (C_stream$ D_stream$ )C_d_prod_stream$ )
(declare-fun szip$b (C_stream$ B_stream$ )C_b_prod_stream$ )
(declare-fun szip$c (A_stream$ D_stream$ )A_d_prod_stream$ )
(declare-fun szip$d (A_b_prod_stream$ D_stream$ )A_b_prod_d_prod_stream$ )
(declare-fun szip$e (A_b_prod_stream$ B_stream$ )A_b_prod_b_prod_stream$ )
(declare-fun szip$f (D_stream$ D_stream$ )D_d_prod_stream$ )
(declare-fun szip$g (D_stream$ C_stream$ )D_c_prod_stream$ )
(declare-fun szip$h (D_stream$ B_stream$ )D_b_prod_stream$ )
(declare-fun szip$i (D_stream$ A_stream$ )D_a_prod_stream$ )
(declare-fun szip$j (C_stream$ C_stream$ )C_c_prod_stream$ )
(declare-fun szip$k (C_stream$ A_stream$ )C_a_prod_stream$ )
(declare-fun szip$l (B_stream$ D_stream$ )B_d_prod_stream$ )
(declare-fun apfst$a (A_c_fun$ )A_b_prod_c_b_prod_fun$ )
(declare-fun apfst$b (C_a_b_prod_fun$ )C_d_prod_a_b_prod_d_prod_fun$ )
(declare-fun apfst$c (C_a_b_prod_fun$ )C_b_prod_a_b_prod_b_prod_fun$ )
(declare-fun apfst$d (C_c_fun$ )C_b_prod_c_b_prod_fun$ )
(declare-fun apfst$e (A_a_fun$ )A_d_prod_a_d_prod_fun$ )
(declare-fun apfst$f (A_a_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun apfst$g (C_c_fun$ )C_d_prod_c_d_prod_fun$ )
(declare-fun apfst$h (C_a_fun$ )C_d_prod_a_d_prod_fun$ )
(declare-fun apfst$i (C_a_fun$ )C_b_prod_a_b_prod_fun$ )
(declare-fun apsnd$a (B_d_fun$ )A_b_prod_a_d_prod_fun$ )
(declare-fun apsnd$b (D_d_fun$ )A_d_prod_a_d_prod_fun$ )
(declare-fun apsnd$c (B_b_fun$ )C_b_prod_c_b_prod_fun$ )
(declare-fun apsnd$d (B_b_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun apsnd$e (D_d_fun$ )C_d_prod_c_d_prod_fun$ )
(declare-fun apsnd$f (D_b_fun$ )C_d_prod_c_b_prod_fun$ )
(declare-fun apsnd$g (D_b_fun$ )A_d_prod_a_b_prod_fun$ )
(declare-fun member$ (C_stream$ C_stream_set$ )Bool )
(declare-fun sdrop$a (Nat$ C_stream$ )C_stream$ )
(declare-fun sdrop$b (Nat$ B_stream$ )B_stream$ )
(declare-fun sdrop$c (Nat$ D_stream$ )D_stream$ )
(declare-fun sdrop$d (Nat$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun sdrop$e (Nat$ C_d_prod_stream$ )C_d_prod_stream$ )
(declare-fun smap$aa (B_c_fun$ B_stream$ )C_stream$ )
(declare-fun smap$ab (C_b_fun$ C_stream$ )B_stream$ )
(declare-fun smap$ac (C_b_prod_a_fun$ C_b_prod_stream$ )A_stream$ )
(declare-fun smap$ad (C_b_prod_c_fun$ C_b_prod_stream$ )C_stream$ )
(declare-fun smap$ae (A_d_prod_a_fun$ A_d_prod_stream$ )A_stream$ )
(declare-fun smap$af (C_d_prod_c_fun$ C_d_prod_stream$ )C_stream$ )
(declare-fun smap$ag (A_b_prod_a_fun$ A_b_prod_stream$ )A_stream$ )
(declare-fun smap$ah (C_d_prod_a_fun$ C_d_prod_stream$ )A_stream$ )
(declare-fun smap$ai (A_d_prod_b_fun$ A_d_prod_stream$ )B_stream$ )
(declare-fun smap$aj (A_d_prod_d_fun$ A_d_prod_stream$ )D_stream$ )
(declare-fun smap$ak (A_b_prod_b_fun$ A_b_prod_stream$ )B_stream$ )
(declare-fun smap$al (C_b_prod_b_fun$ C_b_prod_stream$ )B_stream$ )
(declare-fun smap$am (C_d_prod_d_fun$ C_d_prod_stream$ )D_stream$ )
(declare-fun smap$an (C_d_prod_b_fun$ C_d_prod_stream$ )B_stream$ )
(declare-fun smap$ao (D_a_b_prod_fun$ D_stream$ )A_b_prod_stream$ )
(declare-fun smap$ap (D_a_fun$ D_stream$ )A_stream$ )
(declare-fun smap$aq (B_a_fun$ B_stream$ )A_stream$ )
(declare-fun fun_app$ (C_d_prod_a_b_prod_fun$ C_d_prod$ )A_b_prod$ )
(declare-fun member$a (C$ C_set$ )Bool )
(declare-fun member$b (A$ A_set$ )Bool )
(declare-fun member$c (A_stream$ A_stream_set$ )Bool )
(declare-fun member$d (D_stream$ D_stream_set$ )Bool )
(declare-fun member$e (D$ D_set$ )Bool )
(declare-fun member$f (B$ B_set$ )Bool )
(declare-fun member$g (B_stream$ B_stream_set$ )Bool )
(declare-fun member$h (C_d_prod_stream$ C_d_prod_stream_set$ )Bool )
(declare-fun member$i (C_d_prod$ C_d_prod_set$ )Bool )
(declare-fun member$j (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun member$k (A_b_prod_stream$ A_b_prod_stream_set$ )Bool )
(declare-fun streams$ (C_set$ )C_stream_set$ )
(declare-fun fun_app$a (D_a_b_prod_fun$ D$ )A_b_prod$ )
(declare-fun fun_app$b (C_d_prod_d_fun$ C_d_prod$ )D$ )
(declare-fun fun_app$c (D_d_fun$ D$ )D$ )
(declare-fun fun_app$d (A_d_prod_d_fun$ A_d_prod$ )D$ )
(declare-fun fun_app$e (C_d_prod_b_fun$ C_d_prod$ )B$ )
(declare-fun fun_app$f (D_b_fun$ D$ )B$ )
(declare-fun fun_app$g (A_d_prod_b_fun$ A_d_prod$ )B$ )
(declare-fun fun_app$h (C_b_prod_b_fun$ C_b_prod$ )B$ )
(declare-fun fun_app$i (B_b_fun$ B$ )B$ )
(declare-fun fun_app$j (A_b_prod_b_fun$ A_b_prod$ )B$ )
(declare-fun fun_app$k (C_a_b_prod_fun$ C$ )A_b_prod$ )
(declare-fun fun_app$l (C_b_prod_a_b_prod_fun$ C_b_prod$ )A_b_prod$ )
(declare-fun fun_app$m (C_d_prod_c_fun$ C_d_prod$ )C$ )
(declare-fun fun_app$n (C_c_fun$ C$ )C$ )
(declare-fun fun_app$o (C_b_prod_c_fun$ C_b_prod$ )C$ )
(declare-fun fun_app$p (C_d_prod_a_fun$ C_d_prod$ )A$ )
(declare-fun fun_app$q (C_a_fun$ C$ )A$ )
(declare-fun fun_app$r (C_b_prod_a_fun$ C_b_prod$ )A$ )
(declare-fun fun_app$s (A_d_prod_a_fun$ A_d_prod$ )A$ )
(declare-fun fun_app$t (A_a_fun$ A$ )A$ )
(declare-fun fun_app$u (A_b_prod_a_fun$ A_b_prod$ )A$ )
(declare-fun fun_app$v (D_b_fun_c_d_prod_a_b_prod_fun_fun$ D_b_fun$ )C_d_prod_a_b_prod_fun$ )
(declare-fun fun_app$w (C_d_fun$ C$ )D$ )
(declare-fun fun_app$x (B_d_fun$ B$ )D$ )
(declare-fun fun_app$y (A_d_fun$ A$ )D$ )
(declare-fun fun_app$z (D_c_fun$ D$ )C$ )
(declare-fun map_prod$ (C_a_fun$ )D_b_fun_c_d_prod_a_b_prod_fun_fun$ )
(declare-fun siterate$ (A_a_fun$ A$ )A_stream$ )
(declare-fun streams$a (A_set$ )A_stream_set$ )
(declare-fun streams$b (D_set$ )D_stream_set$ )
(declare-fun streams$c (B_set$ )B_stream_set$ )
(declare-fun streams$d (C_d_prod_set$ )C_d_prod_stream_set$ )
(declare-fun streams$e (A_b_prod_set$ )A_b_prod_stream_set$ )
(declare-fun case_prod$ (C_d_a_b_prod_fun_fun$ )C_d_prod_a_b_prod_fun$ )
(declare-fun fun_app$aa (B_c_fun$ B$ )C$ )
(declare-fun fun_app$ab (A_c_fun$ A$ )C$ )
(declare-fun fun_app$ac (C_b_fun$ C$ )B$ )
(declare-fun fun_app$ad (B_b_fun_a_b_prod_a_b_prod_fun_fun$ B_b_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun fun_app$ae (C_d_prod_c_d_prod_fun$ C_d_prod$ )C_d_prod$ )
(declare-fun fun_app$af (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod$ )
(declare-fun fun_app$ag (D_a_fun$ D$ )A$ )
(declare-fun fun_app$ah (B_a_fun$ B$ )A$ )
(declare-fun fun_app$ai (D_a_stream_set_fun$ D$ )A_stream_set$ )
(declare-fun fun_app$aj (C_d_a_stream_set_fun_fun$ C$ )D_a_stream_set_fun$ )
(declare-fun fun_app$ak (D_d_set_fun$ D$ )D_set$ )
(declare-fun fun_app$al (C_d_d_set_fun_fun$ C$ )D_d_set_fun$ )
(declare-fun fun_app$am (D_c_set_fun$ D$ )C_set$ )
(declare-fun fun_app$an (C_d_c_set_fun_fun$ C$ )D_c_set_fun$ )
(declare-fun fun_app$ao (D_b_set_fun$ D$ )B_set$ )
(declare-fun fun_app$ap (C_d_b_set_fun_fun$ C$ )D_b_set_fun$ )
(declare-fun fun_app$aq (D_a_set_fun$ D$ )A_set$ )
(declare-fun fun_app$ar (C_d_a_set_fun_fun$ C$ )D_a_set_fun$ )
(declare-fun fun_app$as (B_a_stream_set_fun$ B$ )A_stream_set$ )
(declare-fun fun_app$at (A_b_a_stream_set_fun_fun$ A$ )B_a_stream_set_fun$ )
(declare-fun fun_app$au (B_d_set_fun$ B$ )D_set$ )
(declare-fun fun_app$av (A_b_d_set_fun_fun$ A$ )B_d_set_fun$ )
(declare-fun fun_app$aw (B_c_set_fun$ B$ )C_set$ )
(declare-fun fun_app$ax (A_b_c_set_fun_fun$ A$ )B_c_set_fun$ )
(declare-fun fun_app$ay (B_b_set_fun$ B$ )B_set$ )
(declare-fun fun_app$az (A_b_b_set_fun_fun$ A$ )B_b_set_fun$ )
(declare-fun fun_app$ba (B_a_set_fun$ B$ )A_set$ )
(declare-fun fun_app$bb (A_b_a_set_fun_fun$ A$ )B_a_set_fun$ )
(declare-fun fun_app$bc (D_bool_fun$ D$ )Bool )
(declare-fun fun_app$bd (C_d_bool_fun_fun$ C$ )D_bool_fun$ )
(declare-fun fun_app$be (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$bf (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun map_prod$a (A_a_fun$ )B_b_fun_a_b_prod_a_b_prod_fun_fun$ )
(declare-fun map_prod$b (C_c_fun$ D_d_fun$ )C_d_prod_c_d_prod_fun$ )
(declare-fun map_prod$c (D_d_fun$ D_d_fun$ )D_d_prod_d_d_prod_fun$ )
(declare-fun map_prod$d (D_d_fun$ C_c_fun$ )D_c_prod_d_c_prod_fun$ )
(declare-fun map_prod$e (D_d_fun$ B_b_fun$ )D_b_prod_d_b_prod_fun$ )
(declare-fun map_prod$f (D_d_fun$ A_a_fun$ )D_a_prod_d_a_prod_fun$ )
(declare-fun map_prod$g (C_c_fun$ C_c_fun$ )C_c_prod_c_c_prod_fun$ )
(declare-fun map_prod$h (C_c_fun$ B_b_fun$ )C_b_prod_c_b_prod_fun$ )
(declare-fun map_prod$i (C_c_fun$ A_a_fun$ )C_a_prod_c_a_prod_fun$ )
(declare-fun map_prod$j (B_b_fun$ D_d_fun$ )B_d_prod_b_d_prod_fun$ )
(declare-fun map_prod$k (A_c_fun$ B_d_fun$ A_b_prod$ )C_d_prod$ )
(declare-fun siterate$a (B_b_fun$ B$ )B_stream$ )
(declare-fun siterate$b (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod_stream$ )
(declare-fun siterate$c (C_c_fun$ C$ )C_stream$ )
(declare-fun siterate$d (D_d_fun$ D$ )D_stream$ )
(declare-fun siterate$e (C_d_prod_c_d_prod_fun$ C_d_prod$ )C_d_prod_stream$ )
(declare-fun siterate$f (D_d_prod_d_d_prod_fun$ D_d_prod$ )D_d_prod_stream$ )
(declare-fun siterate$g (D_c_prod_d_c_prod_fun$ D_c_prod$ )D_c_prod_stream$ )
(declare-fun siterate$h (D_b_prod_d_b_prod_fun$ D_b_prod$ )D_b_prod_stream$ )
(declare-fun siterate$i (D_a_prod_d_a_prod_fun$ D_a_prod$ )D_a_prod_stream$ )
(declare-fun siterate$j (C_c_prod_c_c_prod_fun$ C_c_prod$ )C_c_prod_stream$ )
(declare-fun siterate$k (C_b_prod_c_b_prod_fun$ C_b_prod$ )C_b_prod_stream$ )
(declare-fun siterate$l (C_a_prod_c_a_prod_fun$ C_a_prod$ )C_a_prod_stream$ )
(declare-fun siterate$m (B_d_prod_b_d_prod_fun$ B_d_prod$ )B_d_prod_stream$ )
(declare-fun case_prod$a (C_d_a_stream_set_fun_fun$ C_d_prod$ )A_stream_set$ )
(declare-fun case_prod$b (C_d_d_set_fun_fun$ C_d_prod$ )D_set$ )
(declare-fun case_prod$c (C_d_c_set_fun_fun$ C_d_prod$ )C_set$ )
(declare-fun case_prod$d (C_d_b_set_fun_fun$ C_d_prod$ )B_set$ )
(declare-fun case_prod$e (C_d_a_set_fun_fun$ C_d_prod$ )A_set$ )
(declare-fun case_prod$f (A_b_a_stream_set_fun_fun$ A_b_prod$ )A_stream_set$ )
(declare-fun case_prod$g (A_b_d_set_fun_fun$ A_b_prod$ )D_set$ )
(declare-fun case_prod$h (A_b_c_set_fun_fun$ A_b_prod$ )C_set$ )
(declare-fun case_prod$i (A_b_b_set_fun_fun$ A_b_prod$ )B_set$ )
(declare-fun case_prod$j (A_b_a_set_fun_fun$ A_b_prod$ )A_set$ )
(declare-fun case_prod$k (C_d_bool_fun_fun$ C_d_prod$ )Bool )
(declare-fun case_prod$l (A_b_bool_fun_fun$ A_b_prod$ )Bool )
(assert (! (forall ((?v0 D_a_b_prod_fun$ )(?v1 C_d_prod$ ))(! (= (fun_app$ (uun$ ?v0 )?v1 )(fun_app$a ?v0 (snd$a ?v1 ))):pattern ((fun_app$ (uun$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 D_d_fun$ )(?v1 C_d_prod$ ))(! (= (fun_app$b (uul$ ?v0 )?v1 )(fun_app$c ?v0 (snd$a ?v1 ))):pattern ((fun_app$b (uul$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 D_d_fun$ )(?v1 A_d_prod$ ))(! (= (fun_app$d (uui$ ?v0 )?v1 )(fun_app$c ?v0 (snd$c ?v1 ))):pattern ((fun_app$d (uui$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 D_b_fun$ )(?v1 C_d_prod$ ))(! (= (fun_app$e (uum$ ?v0 )?v1 )(fun_app$f ?v0 (snd$a ?v1 ))):pattern ((fun_app$e (uum$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 D_b_fun$ )(?v1 A_d_prod$ ))(! (= (fun_app$g (uuh$ ?v0 )?v1 )(fun_app$f ?v0 (snd$c ?v1 ))):pattern ((fun_app$g (uuh$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_prod$ ))(! (= (fun_app$h (uuk$ ?v0 )?v1 )(fun_app$i ?v0 (snd$b ?v1 ))):pattern ((fun_app$h (uuk$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_prod$ ))(! (= (fun_app$j (uuj$ ?v0 )?v1 )(fun_app$i ?v0 (snd$ ?v1 ))):pattern ((fun_app$j (uuj$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 C_a_b_prod_fun$ )(?v1 C_d_prod$ ))(! (= (fun_app$ (uug$ ?v0 )?v1 )(fun_app$k ?v0 (fst$a ?v1 ))):pattern ((fun_app$ (uug$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 C_a_b_prod_fun$ )(?v1 C_b_prod$ ))(! (= (fun_app$l (uua$ ?v0 )?v1 )(fun_app$k ?v0 (fst$b ?v1 ))):pattern ((fun_app$l (uua$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_d_prod$ ))(! (= (fun_app$m (uud$ ?v0 )?v1 )(fun_app$n ?v0 (fst$a ?v1 ))):pattern ((fun_app$m (uud$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_b_prod$ ))(! (= (fun_app$o (uub$ ?v0 )?v1 )(fun_app$n ?v0 (fst$b ?v1 ))):pattern ((fun_app$o (uub$ ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_d_prod$ ))(! (= (fun_app$p (uuf$ ?v0 )?v1 )(fun_app$q ?v0 (fst$a ?v1 ))):pattern ((fun_app$p (uuf$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_b_prod$ ))(! (= (fun_app$r (uu$ ?v0 )?v1 )(fun_app$q ?v0 (fst$b ?v1 ))):pattern ((fun_app$r (uu$ ?v0 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_d_prod$ ))(! (= (fun_app$s (uuc$ ?v0 )?v1 )(fun_app$t ?v0 (fst$c ?v1 ))):pattern ((fun_app$s (uuc$ ?v0 )?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_b_prod$ ))(! (= (fun_app$u (uue$ ?v0 )?v1 )(fun_app$t ?v0 (fst$ ?v1 ))):pattern ((fun_app$u (uue$ ?v0 )?v1 )))):named a14 ))
(assert (! (not (= (szip$ (smap$ f$ xs$ )(smap$a g$ ys$ ))(smap$b (fun_app$v (map_prod$ f$ )g$ )(szip$a xs$ ys$ )))):named a15 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 B_d_fun$ )(?v2 B_stream$ ))(= (szip$a ?v0 (smap$c ?v1 ?v2 ))(smap$d (apsnd$ ?v1 )(szip$b ?v0 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_d_fun$ )(?v2 B_stream$ ))(= (szip$c ?v0 (smap$c ?v1 ?v2 ))(smap$e (apsnd$a ?v1 )(szip$ ?v0 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 D_d_fun$ )(?v2 D_stream$ ))(= (szip$c ?v0 (smap$f ?v1 ?v2 ))(smap$g (apsnd$b ?v1 )(szip$c ?v0 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 B_b_fun$ )(?v2 B_stream$ ))(= (szip$b ?v0 (smap$h ?v1 ?v2 ))(smap$i (apsnd$c ?v1 )(szip$b ?v0 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_b_fun$ )(?v2 B_stream$ ))(= (szip$ ?v0 (smap$h ?v1 ?v2 ))(smap$j (apsnd$d ?v1 )(szip$ ?v0 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 D_d_fun$ )(?v2 D_stream$ ))(= (szip$a ?v0 (smap$f ?v1 ?v2 ))(smap$k (apsnd$e ?v1 )(szip$a ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 D_b_fun$ )(?v2 D_stream$ ))(= (szip$b ?v0 (smap$a ?v1 ?v2 ))(smap$l (apsnd$f ?v1 )(szip$a ?v0 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 D_b_fun$ )(?v2 D_stream$ ))(= (szip$ ?v0 (smap$a ?v1 ?v2 ))(smap$m (apsnd$g ?v1 )(szip$c ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_stream$ )(?v2 D_stream$ ))(= (szip$a (smap$n ?v0 ?v1 )?v2 )(smap$o (apfst$ ?v0 )(szip$c ?v1 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (szip$b (smap$n ?v0 ?v1 )?v2 )(smap$p (apfst$a ?v0 )(szip$ ?v1 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 C_a_b_prod_fun$ )(?v1 C_stream$ )(?v2 D_stream$ ))(= (szip$d (smap$q ?v0 ?v1 )?v2 )(smap$r (apfst$b ?v0 )(szip$a ?v1 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 C_a_b_prod_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (szip$e (smap$q ?v0 ?v1 )?v2 )(smap$s (apfst$c ?v0 )(szip$b ?v1 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (szip$b (smap$t ?v0 ?v1 )?v2 )(smap$i (apfst$d ?v0 )(szip$b ?v1 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 D_stream$ ))(= (szip$c (smap$u ?v0 ?v1 )?v2 )(smap$g (apfst$e ?v0 )(szip$c ?v1 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (szip$ (smap$u ?v0 ?v1 )?v2 )(smap$j (apfst$f ?v0 )(szip$ ?v1 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_stream$ )(?v2 D_stream$ ))(= (szip$a (smap$t ?v0 ?v1 )?v2 )(smap$k (apfst$g ?v0 )(szip$a ?v1 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_stream$ )(?v2 D_stream$ ))(= (szip$c (smap$ ?v0 ?v1 )?v2 )(smap$v (apfst$h ?v0 )(szip$a ?v1 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (szip$ (smap$ ?v0 ?v1 )?v2 )(smap$w (apfst$i ?v0 )(szip$b ?v1 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$ ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(exists ((?v4 C$ )(?v5 C_stream$ ))(and (= ?v1 (sCons$c ?v4 ?v5 ))(and (= ?v2 (fun_app$q ?v0 ?v4 ))(= ?v3 (smap$ ?v0 ?v5 ))))))):named a34 ))
(assert (! (forall ((?v0 D_b_fun$ )(?v1 D_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$a ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(exists ((?v4 D$ )(?v5 D_stream$ ))(and (= ?v1 (sCons$d ?v4 ?v5 ))(and (= ?v2 (fun_app$f ?v0 ?v4 ))(= ?v3 (smap$a ?v0 ?v5 ))))))):named a35 ))
(assert (! (forall ((?v0 C_d_prod_a_b_prod_fun$ )(?v1 C_d_prod_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (smap$b ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 C_d_prod$ )(?v5 C_d_prod_stream$ ))(and (= ?v1 (sCons$e ?v4 ?v5 ))(and (= ?v2 (fun_app$ ?v0 ?v4 ))(= ?v3 (smap$b ?v0 ?v5 ))))))):named a36 ))
(assert (! (forall ((?v0 D_d_fun$ )(?v1 D_stream$ )(?v2 D$ )(?v3 D_stream$ ))(= (= (smap$f ?v0 ?v1 )(sCons$d ?v2 ?v3 ))(exists ((?v4 D$ )(?v5 D_stream$ ))(and (= ?v1 (sCons$d ?v4 ?v5 ))(and (= ?v2 (fun_app$c ?v0 ?v4 ))(= ?v3 (smap$f ?v0 ?v5 ))))))):named a37 ))
(assert (! (forall ((?v0 C_d_fun$ )(?v1 C_stream$ )(?v2 D$ )(?v3 D_stream$ ))(= (= (smap$x ?v0 ?v1 )(sCons$d ?v2 ?v3 ))(exists ((?v4 C$ )(?v5 C_stream$ ))(and (= ?v1 (sCons$c ?v4 ?v5 ))(and (= ?v2 (fun_app$w ?v0 ?v4 ))(= ?v3 (smap$x ?v0 ?v5 ))))))):named a38 ))
(assert (! (forall ((?v0 B_d_fun$ )(?v1 B_stream$ )(?v2 D$ )(?v3 D_stream$ ))(= (= (smap$c ?v0 ?v1 )(sCons$d ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v1 (sCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$x ?v0 ?v4 ))(= ?v3 (smap$c ?v0 ?v5 ))))))):named a39 ))
(assert (! (forall ((?v0 A_d_fun$ )(?v1 A_stream$ )(?v2 D$ )(?v3 D_stream$ ))(= (= (smap$y ?v0 ?v1 )(sCons$d ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$y ?v0 ?v4 ))(= ?v3 (smap$y ?v0 ?v5 ))))))):named a40 ))
(assert (! (forall ((?v0 D_c_fun$ )(?v1 D_stream$ )(?v2 C$ )(?v3 C_stream$ ))(= (= (smap$z ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(exists ((?v4 D$ )(?v5 D_stream$ ))(and (= ?v1 (sCons$d ?v4 ?v5 ))(and (= ?v2 (fun_app$z ?v0 ?v4 ))(= ?v3 (smap$z ?v0 ?v5 ))))))):named a41 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_stream$ )(?v2 C$ )(?v3 C_stream$ ))(= (= (smap$t ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(exists ((?v4 C$ )(?v5 C_stream$ ))(and (= ?v1 (sCons$c ?v4 ?v5 ))(and (= ?v2 (fun_app$n ?v0 ?v4 ))(= ?v3 (smap$t ?v0 ?v5 ))))))):named a42 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_stream$ )(?v2 C$ )(?v3 C_stream$ ))(= (= (smap$aa ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v1 (sCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$aa ?v0 ?v4 ))(= ?v3 (smap$aa ?v0 ?v5 ))))))):named a43 ))
(assert (! (forall ((?v0 C_d_a_b_prod_fun_fun$ )(?v1 C_stream$ )(?v2 D_stream$ ))(! (= (smap2$ ?v0 ?v1 ?v2 )(smap$b (case_prod$ ?v0 )(szip$a ?v1 ?v2 ))):pattern ((smap2$ ?v0 ?v1 ?v2 )))):named a44 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_a_fun$ )(?v2 C_stream$ ))(= (sdrop$ ?v0 (smap$ ?v1 ?v2 ))(smap$ ?v1 (sdrop$a ?v0 ?v2 )))):named a45 ))
(assert (! (forall ((?v0 Nat$ )(?v1 D_b_fun$ )(?v2 D_stream$ ))(= (sdrop$b ?v0 (smap$a ?v1 ?v2 ))(smap$a ?v1 (sdrop$c ?v0 ?v2 )))):named a46 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_d_prod_a_b_prod_fun$ )(?v2 C_d_prod_stream$ ))(= (sdrop$d ?v0 (smap$b ?v1 ?v2 ))(smap$b ?v1 (sdrop$e ?v0 ?v2 )))):named a47 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_d_fun$ )(?v2 C_stream$ ))(= (sdrop$c ?v0 (smap$x ?v1 ?v2 ))(smap$x ?v1 (sdrop$a ?v0 ?v2 )))):named a48 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_d_fun$ )(?v2 B_stream$ ))(= (sdrop$c ?v0 (smap$c ?v1 ?v2 ))(smap$c ?v1 (sdrop$b ?v0 ?v2 )))):named a49 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_d_fun$ )(?v2 A_stream$ ))(= (sdrop$c ?v0 (smap$y ?v1 ?v2 ))(smap$y ?v1 (sdrop$ ?v0 ?v2 )))):named a50 ))
(assert (! (forall ((?v0 Nat$ )(?v1 D_c_fun$ )(?v2 D_stream$ ))(= (sdrop$a ?v0 (smap$z ?v1 ?v2 ))(smap$z ?v1 (sdrop$c ?v0 ?v2 )))):named a51 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_c_fun$ )(?v2 B_stream$ ))(= (sdrop$a ?v0 (smap$aa ?v1 ?v2 ))(smap$aa ?v1 (sdrop$b ?v0 ?v2 )))):named a52 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_c_fun$ )(?v2 A_stream$ ))(= (sdrop$a ?v0 (smap$n ?v1 ?v2 ))(smap$n ?v1 (sdrop$ ?v0 ?v2 )))):named a53 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_b_fun$ )(?v2 C_stream$ ))(= (sdrop$b ?v0 (smap$ab ?v1 ?v2 ))(smap$ab ?v1 (sdrop$a ?v0 ?v2 )))):named a54 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (smap$ac (uu$ ?v0 )(szip$b ?v1 ?v2 ))(smap$ ?v0 ?v1 ))):named a55 ))
(assert (! (forall ((?v0 C_a_b_prod_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (smap$w (uua$ ?v0 )(szip$b ?v1 ?v2 ))(smap$q ?v0 ?v1 ))):named a56 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (smap$ad (uub$ ?v0 )(szip$b ?v1 ?v2 ))(smap$t ?v0 ?v1 ))):named a57 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 D_stream$ ))(= (smap$ae (uuc$ ?v0 )(szip$c ?v1 ?v2 ))(smap$u ?v0 ?v1 ))):named a58 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_stream$ )(?v2 D_stream$ ))(= (smap$af (uud$ ?v0 )(szip$a ?v1 ?v2 ))(smap$t ?v0 ?v1 ))):named a59 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (smap$ag (uue$ ?v0 )(szip$ ?v1 ?v2 ))(smap$u ?v0 ?v1 ))):named a60 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_stream$ )(?v2 D_stream$ ))(= (smap$ah (uuf$ ?v0 )(szip$a ?v1 ?v2 ))(smap$ ?v0 ?v1 ))):named a61 ))
(assert (! (forall ((?v0 C_a_b_prod_fun$ )(?v1 C_stream$ )(?v2 D_stream$ ))(= (smap$b (uug$ ?v0 )(szip$a ?v1 ?v2 ))(smap$q ?v0 ?v1 ))):named a62 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_stream$ )(?v2 Nat$ ))(= (snth$ (smap$ ?v0 ?v1 )?v2 )(fun_app$q ?v0 (snth$a ?v1 ?v2 )))):named a63 ))
(assert (! (forall ((?v0 D_b_fun$ )(?v1 D_stream$ )(?v2 Nat$ ))(= (snth$b (smap$a ?v0 ?v1 )?v2 )(fun_app$f ?v0 (snth$c ?v1 ?v2 )))):named a64 ))
(assert (! (forall ((?v0 C_d_prod_a_b_prod_fun$ )(?v1 C_d_prod_stream$ )(?v2 Nat$ ))(= (snth$d (smap$b ?v0 ?v1 )?v2 )(fun_app$ ?v0 (snth$e ?v1 ?v2 )))):named a65 ))
(assert (! (forall ((?v0 C_d_fun$ )(?v1 C_stream$ )(?v2 Nat$ ))(= (snth$c (smap$x ?v0 ?v1 )?v2 )(fun_app$w ?v0 (snth$a ?v1 ?v2 )))):named a66 ))
(assert (! (forall ((?v0 B_d_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$c (smap$c ?v0 ?v1 )?v2 )(fun_app$x ?v0 (snth$b ?v1 ?v2 )))):named a67 ))
(assert (! (forall ((?v0 A_d_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$c (smap$y ?v0 ?v1 )?v2 )(fun_app$y ?v0 (snth$ ?v1 ?v2 )))):named a68 ))
(assert (! (forall ((?v0 D_c_fun$ )(?v1 D_stream$ )(?v2 Nat$ ))(= (snth$a (smap$z ?v0 ?v1 )?v2 )(fun_app$z ?v0 (snth$c ?v1 ?v2 )))):named a69 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$a (smap$aa ?v0 ?v1 )?v2 )(fun_app$aa ?v0 (snth$b ?v1 ?v2 )))):named a70 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$a (smap$n ?v0 ?v1 )?v2 )(fun_app$ab ?v0 (snth$ ?v1 ?v2 )))):named a71 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_stream$ )(?v2 Nat$ ))(= (snth$b (smap$ab ?v0 ?v1 )?v2 )(fun_app$ac ?v0 (snth$a ?v1 ?v2 )))):named a72 ))
(assert (! (forall ((?v0 D_b_fun$ )(?v1 A_stream$ )(?v2 D_stream$ ))(= (smap$ai (uuh$ ?v0 )(szip$c ?v1 ?v2 ))(smap$a ?v0 ?v2 ))):named a73 ))
(assert (! (forall ((?v0 D_d_fun$ )(?v1 A_stream$ )(?v2 D_stream$ ))(= (smap$aj (uui$ ?v0 )(szip$c ?v1 ?v2 ))(smap$f ?v0 ?v2 ))):named a74 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (smap$ak (uuj$ ?v0 )(szip$ ?v1 ?v2 ))(smap$h ?v0 ?v2 ))):named a75 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (smap$al (uuk$ ?v0 )(szip$b ?v1 ?v2 ))(smap$h ?v0 ?v2 ))):named a76 ))
(assert (! (forall ((?v0 D_d_fun$ )(?v1 C_stream$ )(?v2 D_stream$ ))(= (smap$am (uul$ ?v0 )(szip$a ?v1 ?v2 ))(smap$f ?v0 ?v2 ))):named a77 ))
(assert (! (forall ((?v0 D_b_fun$ )(?v1 C_stream$ )(?v2 D_stream$ ))(= (smap$an (uum$ ?v0 )(szip$a ?v1 ?v2 ))(smap$a ?v0 ?v2 ))):named a78 ))
(assert (! (forall ((?v0 D_a_b_prod_fun$ )(?v1 C_stream$ )(?v2 D_stream$ ))(= (smap$b (uun$ ?v0 )(szip$a ?v1 ?v2 ))(smap$ao ?v0 ?v2 ))):named a79 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (szip$ (siterate$ ?v0 ?v1 )(siterate$a ?v2 ?v3 ))(siterate$b (fun_app$ad (map_prod$a ?v0 )?v2 )(pair$ ?v1 ?v3 )))):named a80 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ )(?v2 D_d_fun$ )(?v3 D$ ))(= (szip$a (siterate$c ?v0 ?v1 )(siterate$d ?v2 ?v3 ))(siterate$e (map_prod$b ?v0 ?v2 )(pair$a ?v1 ?v3 )))):named a81 ))
(assert (! (forall ((?v0 D_d_fun$ )(?v1 D$ )(?v2 D_d_fun$ )(?v3 D$ ))(= (szip$f (siterate$d ?v0 ?v1 )(siterate$d ?v2 ?v3 ))(siterate$f (map_prod$c ?v0 ?v2 )(pair$f ?v1 ?v3 )))):named a82 ))
(assert (! (forall ((?v0 D_d_fun$ )(?v1 D$ )(?v2 C_c_fun$ )(?v3 C$ ))(= (szip$g (siterate$d ?v0 ?v1 )(siterate$c ?v2 ?v3 ))(siterate$g (map_prod$d ?v0 ?v2 )(pair$g ?v1 ?v3 )))):named a83 ))
(assert (! (forall ((?v0 D_d_fun$ )(?v1 D$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (szip$h (siterate$d ?v0 ?v1 )(siterate$a ?v2 ?v3 ))(siterate$h (map_prod$e ?v0 ?v2 )(pair$h ?v1 ?v3 )))):named a84 ))
(assert (! (forall ((?v0 D_d_fun$ )(?v1 D$ )(?v2 A_a_fun$ )(?v3 A$ ))(= (szip$i (siterate$d ?v0 ?v1 )(siterate$ ?v2 ?v3 ))(siterate$i (map_prod$f ?v0 ?v2 )(pair$i ?v1 ?v3 )))):named a85 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ )(?v2 C_c_fun$ )(?v3 C$ ))(= (szip$j (siterate$c ?v0 ?v1 )(siterate$c ?v2 ?v3 ))(siterate$j (map_prod$g ?v0 ?v2 )(pair$j ?v1 ?v3 )))):named a86 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (szip$b (siterate$c ?v0 ?v1 )(siterate$a ?v2 ?v3 ))(siterate$k (map_prod$h ?v0 ?v2 )(pair$b ?v1 ?v3 )))):named a87 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ )(?v2 A_a_fun$ )(?v3 A$ ))(= (szip$k (siterate$c ?v0 ?v1 )(siterate$ ?v2 ?v3 ))(siterate$l (map_prod$i ?v0 ?v2 )(pair$k ?v1 ?v3 )))):named a88 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 D_d_fun$ )(?v3 D$ ))(= (szip$l (siterate$a ?v0 ?v1 )(siterate$d ?v2 ?v3 ))(siterate$m (map_prod$j ?v0 ?v2 )(pair$l ?v1 ?v3 )))):named a89 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 B_d_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (map_prod$k ?v0 ?v1 (pair$ ?v2 ?v3 ))(pair$a (fun_app$ab ?v0 ?v2 )(fun_app$x ?v1 ?v3 ))):pattern ((map_prod$k ?v0 ?v1 (pair$ ?v2 ?v3 ))))):named a90 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 D_d_fun$ )(?v2 C$ )(?v3 D$ ))(! (= (fun_app$ae (map_prod$b ?v0 ?v1 )(pair$a ?v2 ?v3 ))(pair$a (fun_app$n ?v0 ?v2 )(fun_app$c ?v1 ?v3 ))):pattern ((fun_app$ae (map_prod$b ?v0 ?v1 )(pair$a ?v2 ?v3 ))))):named a91 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$af (fun_app$ad (map_prod$a ?v0 )?v1 )(pair$ ?v2 ?v3 ))(pair$ (fun_app$t ?v0 ?v2 )(fun_app$i ?v1 ?v3 ))):pattern ((fun_app$af (fun_app$ad (map_prod$a ?v0 )?v1 )(pair$ ?v2 ?v3 ))))):named a92 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 D_b_fun$ )(?v2 C$ )(?v3 D$ ))(! (= (fun_app$ (fun_app$v (map_prod$ ?v0 )?v1 )(pair$a ?v2 ?v3 ))(pair$ (fun_app$q ?v0 ?v2 )(fun_app$f ?v1 ?v3 ))):pattern ((fun_app$ (fun_app$v (map_prod$ ?v0 )?v1 )(pair$a ?v2 ?v3 ))))):named a93 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod$ ))(= (smap$j ?v0 (siterate$b ?v0 ?v1 ))(siterate$b ?v0 (fun_app$af ?v0 ?v1 )))):named a94 ))
(assert (! (forall ((?v0 D_d_fun$ )(?v1 D$ ))(= (smap$f ?v0 (siterate$d ?v0 ?v1 ))(siterate$d ?v0 (fun_app$c ?v0 ?v1 )))):named a95 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ ))(= (smap$t ?v0 (siterate$c ?v0 ?v1 ))(siterate$c ?v0 (fun_app$n ?v0 ?v1 )))):named a96 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (smap$h ?v0 (siterate$a ?v0 ?v1 ))(siterate$a ?v0 (fun_app$i ?v0 ?v1 )))):named a97 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (smap$u ?v0 (siterate$ ?v0 ?v1 ))(siterate$ ?v0 (fun_app$t ?v0 ?v1 )))):named a98 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ )(?v2 C_a_fun$ )(?v3 A_set$ ))(=> (and (member$ ?v0 (streams$ ?v1 ))(forall ((?v4 C$ ))(=> (member$a ?v4 ?v1 )(member$b (fun_app$q ?v2 ?v4 )?v3 ))))(member$c (smap$ ?v2 ?v0 )(streams$a ?v3 )))):named a99 ))
(assert (! (forall ((?v0 D_stream$ )(?v1 D_set$ )(?v2 D_b_fun$ )(?v3 B_set$ ))(=> (and (member$d ?v0 (streams$b ?v1 ))(forall ((?v4 D$ ))(=> (member$e ?v4 ?v1 )(member$f (fun_app$f ?v2 ?v4 )?v3 ))))(member$g (smap$a ?v2 ?v0 )(streams$c ?v3 )))):named a100 ))
(assert (! (forall ((?v0 C_d_prod_stream$ )(?v1 C_d_prod_set$ )(?v2 C_d_prod_a_b_prod_fun$ )(?v3 A_b_prod_set$ ))(=> (and (member$h ?v0 (streams$d ?v1 ))(forall ((?v4 C_d_prod$ ))(=> (member$i ?v4 ?v1 )(member$j (fun_app$ ?v2 ?v4 )?v3 ))))(member$k (smap$b ?v2 ?v0 )(streams$e ?v3 )))):named a101 ))
(assert (! (forall ((?v0 D_stream$ )(?v1 D_set$ )(?v2 D_c_fun$ )(?v3 C_set$ ))(=> (and (member$d ?v0 (streams$b ?v1 ))(forall ((?v4 D$ ))(=> (member$e ?v4 ?v1 )(member$a (fun_app$z ?v2 ?v4 )?v3 ))))(member$ (smap$z ?v2 ?v0 )(streams$ ?v3 )))):named a102 ))
(assert (! (forall ((?v0 D_stream$ )(?v1 D_set$ )(?v2 D_a_fun$ )(?v3 A_set$ ))(=> (and (member$d ?v0 (streams$b ?v1 ))(forall ((?v4 D$ ))(=> (member$e ?v4 ?v1 )(member$b (fun_app$ag ?v2 ?v4 )?v3 ))))(member$c (smap$ap ?v2 ?v0 )(streams$a ?v3 )))):named a103 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ )(?v2 C_d_fun$ )(?v3 D_set$ ))(=> (and (member$ ?v0 (streams$ ?v1 ))(forall ((?v4 C$ ))(=> (member$a ?v4 ?v1 )(member$e (fun_app$w ?v2 ?v4 )?v3 ))))(member$d (smap$x ?v2 ?v0 )(streams$b ?v3 )))):named a104 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ )(?v2 C_b_fun$ )(?v3 B_set$ ))(=> (and (member$ ?v0 (streams$ ?v1 ))(forall ((?v4 C$ ))(=> (member$a ?v4 ?v1 )(member$f (fun_app$ac ?v2 ?v4 )?v3 ))))(member$g (smap$ab ?v2 ?v0 )(streams$c ?v3 )))):named a105 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ )(?v2 B_d_fun$ )(?v3 D_set$ ))(=> (and (member$g ?v0 (streams$c ?v1 ))(forall ((?v4 B$ ))(=> (member$f ?v4 ?v1 )(member$e (fun_app$x ?v2 ?v4 )?v3 ))))(member$d (smap$c ?v2 ?v0 )(streams$b ?v3 )))):named a106 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ )(?v2 B_c_fun$ )(?v3 C_set$ ))(=> (and (member$g ?v0 (streams$c ?v1 ))(forall ((?v4 B$ ))(=> (member$f ?v4 ?v1 )(member$a (fun_app$aa ?v2 ?v4 )?v3 ))))(member$ (smap$aa ?v2 ?v0 )(streams$ ?v3 )))):named a107 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ )(?v2 B_a_fun$ )(?v3 A_set$ ))(=> (and (member$g ?v0 (streams$c ?v1 ))(forall ((?v4 B$ ))(=> (member$f ?v4 ?v1 )(member$b (fun_app$ah ?v2 ?v4 )?v3 ))))(member$c (smap$aq ?v2 ?v0 )(streams$a ?v3 )))):named a108 ))
(assert (! (forall ((?v0 C$ )(?v1 D$ )(?v2 C$ )(?v3 D$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a109 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a110 ))
(assert (! (forall ((?v0 C$ )(?v1 D$ )(?v2 C$ )(?v3 D$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a111 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a112 ))
(assert (! (forall ((?v0 C_d_prod$ )(?v1 A_stream$ )(?v2 C_d_a_stream_set_fun_fun$ ))(=> (forall ((?v3 C$ )(?v4 D$ ))(=> (= ?v0 (pair$a ?v3 ?v4 ))(member$c ?v1 (fun_app$ai (fun_app$aj ?v2 ?v3 )?v4 ))))(member$c ?v1 (case_prod$a ?v2 ?v0 )))):named a113 ))
(assert (! (forall ((?v0 C_d_prod$ )(?v1 D$ )(?v2 C_d_d_set_fun_fun$ ))(=> (forall ((?v3 C$ )(?v4 D$ ))(=> (= ?v0 (pair$a ?v3 ?v4 ))(member$e ?v1 (fun_app$ak (fun_app$al ?v2 ?v3 )?v4 ))))(member$e ?v1 (case_prod$b ?v2 ?v0 )))):named a114 ))
(assert (! (forall ((?v0 C_d_prod$ )(?v1 C$ )(?v2 C_d_c_set_fun_fun$ ))(=> (forall ((?v3 C$ )(?v4 D$ ))(=> (= ?v0 (pair$a ?v3 ?v4 ))(member$a ?v1 (fun_app$am (fun_app$an ?v2 ?v3 )?v4 ))))(member$a ?v1 (case_prod$c ?v2 ?v0 )))):named a115 ))
(assert (! (forall ((?v0 C_d_prod$ )(?v1 B$ )(?v2 C_d_b_set_fun_fun$ ))(=> (forall ((?v3 C$ )(?v4 D$ ))(=> (= ?v0 (pair$a ?v3 ?v4 ))(member$f ?v1 (fun_app$ao (fun_app$ap ?v2 ?v3 )?v4 ))))(member$f ?v1 (case_prod$d ?v2 ?v0 )))):named a116 ))
(assert (! (forall ((?v0 C_d_prod$ )(?v1 A$ )(?v2 C_d_a_set_fun_fun$ ))(=> (forall ((?v3 C$ )(?v4 D$ ))(=> (= ?v0 (pair$a ?v3 ?v4 ))(member$b ?v1 (fun_app$aq (fun_app$ar ?v2 ?v3 )?v4 ))))(member$b ?v1 (case_prod$e ?v2 ?v0 )))):named a117 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_stream$ )(?v2 A_b_a_stream_set_fun_fun$ ))(=> (forall ((?v3 A$ )(?v4 B$ ))(=> (= ?v0 (pair$ ?v3 ?v4 ))(member$c ?v1 (fun_app$as (fun_app$at ?v2 ?v3 )?v4 ))))(member$c ?v1 (case_prod$f ?v2 ?v0 )))):named a118 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 D$ )(?v2 A_b_d_set_fun_fun$ ))(=> (forall ((?v3 A$ )(?v4 B$ ))(=> (= ?v0 (pair$ ?v3 ?v4 ))(member$e ?v1 (fun_app$au (fun_app$av ?v2 ?v3 )?v4 ))))(member$e ?v1 (case_prod$g ?v2 ?v0 )))):named a119 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 C$ )(?v2 A_b_c_set_fun_fun$ ))(=> (forall ((?v3 A$ )(?v4 B$ ))(=> (= ?v0 (pair$ ?v3 ?v4 ))(member$a ?v1 (fun_app$aw (fun_app$ax ?v2 ?v3 )?v4 ))))(member$a ?v1 (case_prod$h ?v2 ?v0 )))):named a120 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 B$ )(?v2 A_b_b_set_fun_fun$ ))(=> (forall ((?v3 A$ )(?v4 B$ ))(=> (= ?v0 (pair$ ?v3 ?v4 ))(member$f ?v1 (fun_app$ay (fun_app$az ?v2 ?v3 )?v4 ))))(member$f ?v1 (case_prod$i ?v2 ?v0 )))):named a121 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A$ )(?v2 A_b_a_set_fun_fun$ ))(=> (forall ((?v3 A$ )(?v4 B$ ))(=> (= ?v0 (pair$ ?v3 ?v4 ))(member$b ?v1 (fun_app$ba (fun_app$bb ?v2 ?v3 )?v4 ))))(member$b ?v1 (case_prod$j ?v2 ?v0 )))):named a122 ))
(assert (! (forall ((?v0 C_d_prod$ )(?v1 C_d_bool_fun_fun$ ))(=> (forall ((?v2 C$ )(?v3 D$ ))(=> (= ?v0 (pair$a ?v2 ?v3 ))(fun_app$bc (fun_app$bd ?v1 ?v2 )?v3 )))(case_prod$k ?v1 ?v0 ))):named a123 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_bool_fun_fun$ ))(=> (forall ((?v2 A$ )(?v3 B$ ))(=> (= ?v0 (pair$ ?v2 ?v3 ))(fun_app$be (fun_app$bf ?v1 ?v2 )?v3 )))(case_prod$l ?v1 ?v0 ))):named a124 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 C_d_a_stream_set_fun_fun$ )(?v2 C$ )(?v3 D$ ))(=> (member$c ?v0 (fun_app$ai (fun_app$aj ?v1 ?v2 )?v3 ))(member$c ?v0 (case_prod$a ?v1 (pair$a ?v2 ?v3 ))))):named a125 ))
(assert (! (forall ((?v0 D$ )(?v1 C_d_d_set_fun_fun$ )(?v2 C$ )(?v3 D$ ))(=> (member$e ?v0 (fun_app$ak (fun_app$al ?v1 ?v2 )?v3 ))(member$e ?v0 (case_prod$b ?v1 (pair$a ?v2 ?v3 ))))):named a126 ))
(assert (! (forall ((?v0 C$ )(?v1 C_d_c_set_fun_fun$ )(?v2 C$ )(?v3 D$ ))(=> (member$a ?v0 (fun_app$am (fun_app$an ?v1 ?v2 )?v3 ))(member$a ?v0 (case_prod$c ?v1 (pair$a ?v2 ?v3 ))))):named a127 ))
(assert (! (forall ((?v0 B$ )(?v1 C_d_b_set_fun_fun$ )(?v2 C$ )(?v3 D$ ))(=> (member$f ?v0 (fun_app$ao (fun_app$ap ?v1 ?v2 )?v3 ))(member$f ?v0 (case_prod$d ?v1 (pair$a ?v2 ?v3 ))))):named a128 ))
(assert (! (forall ((?v0 A$ )(?v1 C_d_a_set_fun_fun$ )(?v2 C$ )(?v3 D$ ))(=> (member$b ?v0 (fun_app$aq (fun_app$ar ?v1 ?v2 )?v3 ))(member$b ?v0 (case_prod$e ?v1 (pair$a ?v2 ?v3 ))))):named a129 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_b_a_stream_set_fun_fun$ )(?v2 A$ )(?v3 B$ ))(=> (member$c ?v0 (fun_app$as (fun_app$at ?v1 ?v2 )?v3 ))(member$c ?v0 (case_prod$f ?v1 (pair$ ?v2 ?v3 ))))):named a130 ))
(assert (! (forall ((?v0 D$ )(?v1 A_b_d_set_fun_fun$ )(?v2 A$ )(?v3 B$ ))(=> (member$e ?v0 (fun_app$au (fun_app$av ?v1 ?v2 )?v3 ))(member$e ?v0 (case_prod$g ?v1 (pair$ ?v2 ?v3 ))))):named a131 ))
(assert (! (forall ((?v0 C$ )(?v1 A_b_c_set_fun_fun$ )(?v2 A$ )(?v3 B$ ))(=> (member$a ?v0 (fun_app$aw (fun_app$ax ?v1 ?v2 )?v3 ))(member$a ?v0 (case_prod$h ?v1 (pair$ ?v2 ?v3 ))))):named a132 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_b_set_fun_fun$ )(?v2 A$ )(?v3 B$ ))(=> (member$f ?v0 (fun_app$ay (fun_app$az ?v1 ?v2 )?v3 ))(member$f ?v0 (case_prod$i ?v1 (pair$ ?v2 ?v3 ))))):named a133 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_a_set_fun_fun$ )(?v2 A$ )(?v3 B$ ))(=> (member$b ?v0 (fun_app$ba (fun_app$bb ?v1 ?v2 )?v3 ))(member$b ?v0 (case_prod$j ?v1 (pair$ ?v2 ?v3 ))))):named a134 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ )(?v1 C$ )(?v2 D$ ))(=> (fun_app$bc (fun_app$bd ?v0 ?v1 )?v2 )(case_prod$k ?v0 (pair$a ?v1 ?v2 )))):named a135 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 B$ ))(=> (fun_app$be (fun_app$bf ?v0 ?v1 )?v2 )(case_prod$l ?v0 (pair$ ?v1 ?v2 )))):named a136 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ )(?v1 C$ )(?v2 D$ ))(=> (fun_app$bc (fun_app$bd ?v0 ?v1 )?v2 )(case_prod$k ?v0 (pair$a ?v1 ?v2 )))):named a137 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 B$ ))(=> (fun_app$be (fun_app$bf ?v0 ?v1 )?v2 )(case_prod$l ?v0 (pair$ ?v1 ?v2 )))):named a138 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 D_b_fun$ )(?v2 C_d_prod$ ))(= (fst$ (fun_app$ (fun_app$v (map_prod$ ?v0 )?v1 )?v2 ))(fun_app$q ?v0 (fst$a ?v2 )))):named a139 ))
(check-sat )
;(get-unsat-core )
