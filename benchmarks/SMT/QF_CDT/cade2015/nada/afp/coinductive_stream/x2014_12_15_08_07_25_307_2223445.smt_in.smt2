;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort B_llist_set$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort B_stream_bool_fun$ 0 )
(declare-sort A_b_prod_llist_set$ 0 )
(declare-sort A_b_prod_stream_set$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_llist_bool_fun$ 0 )
(declare-sort A_b_prod_stream_bool_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_fun$ 0 )
(declare-sort A_stream_a_stream_bool_fun_fun$ 0 )
(declare-sort A_stream_b_stream_bool_fun_fun$ 0 )
(declare-sort B_stream_a_stream_bool_fun_fun$ 0 )
(declare-sort B_stream_b_stream_bool_fun_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_prod_set$ 0 )
(declare-sort A_b_prod_stream_b_stream_prod_set$ 0 )
(declare-sort A_b_prod_stream_a_stream_bool_fun_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_bool_fun_fun$ 0 )
(declare-sort A_stream_a_b_prod_stream_bool_fun_fun$ 0 )
(declare-sort B_stream_a_b_prod_stream_bool_fun_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_prod_bool_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_prod_bool_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_prod_stream_set$ 0 )
(declare-sort A_b_prod_stream_b_stream_prod_stream_set$ 0 )
(declare-sort A_b_prod_stream_a_stream_prod_a_stream_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_prod_b_stream_fun$ 0 )
(declare-sort A_stream_stream_a_stream_stream_bool_fun_fun$ 0 )
(declare-sort B_stream_stream_b_stream_stream_bool_fun_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_prod_stream_bool_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_prod_stream_bool_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_prod_a_b_prod_stream_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_prod_a_b_prod_stream_fun$ 0 )
(declare-sort A_b_prod_stream_stream_a_stream_stream_bool_fun_fun$ 0 )
(declare-sort A_b_prod_stream_stream_b_stream_stream_bool_fun_fun$ 0 )
(declare-sort A_stream_stream_a_b_prod_stream_stream_bool_fun_fun$ 0 )
(declare-sort B_stream_stream_a_b_prod_stream_stream_bool_fun_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_stream_stream_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_prod_stream_b_stream_stream_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod_set$ 0 )
(declare-sort A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod_set$ 0 )
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_stream_stream_bool_fun_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_prod_stream_b_stream_stream_bool_fun_fun$ 0 )
(declare-sort A_stream_stream_a_b_prod_stream_a_stream_prod_stream_bool_fun_fun$ 0 )
(declare-sort B_stream_stream_a_b_prod_stream_b_stream_prod_stream_bool_fun_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod_bool_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod_bool_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod_set$ 0 )
(declare-sort A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod_set$ 0 )
(declare-sort A_b_prod_stream_a_stream_fun_a_b_prod_stream_a_stream_bool_fun_fun_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_fun_a_b_prod_stream_b_stream_bool_fun_fun_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_bool_fun_fun_a_stream_a_stream_bool_fun_fun_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_bool_fun_fun_b_stream_a_stream_bool_fun_fun_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_bool_fun_fun_a_stream_b_stream_bool_fun_fun_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_bool_fun_fun_b_stream_b_stream_bool_fun_fun_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$ 0 )
(declare-sort A_b_prod_stream_stream_a_b_prod_stream_a_stream_prod_stream_bool_fun_fun$ 0 )
(declare-sort A_b_prod_stream_stream_a_b_prod_stream_b_stream_prod_stream_bool_fun_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod_bool_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod_bool_fun$ 0 )
(declare-sort A_b_prod_stream_a_stream_bool_fun_fun_a_b_prod_stream_a_stream_bool_fun_fun_fun$ 0 )
(declare-sort A_b_prod_stream_b_stream_bool_fun_fun_a_b_prod_stream_b_stream_bool_fun_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_stream$ 0)
(declare-sort B_stream$ 0)
(declare-sort A_llist$ 0)
(declare-sort A_b_prod_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun shd$a (A_b_prod_stream$)A_b_prod$)
(declare-fun stl$a (A_b_prod_stream$)A_b_prod_stream$)
(declare-fun sCons$a (A_b_prod$ A_b_prod_stream$ )A_b_prod_stream$)
(declare-fun shd$b (B_stream$)B$)
(declare-fun stl$b (B_stream$)B_stream$)
(declare-fun sCons$b (B$ B_stream$ )B_stream$)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_b_prod_llist$)
(declare-fun lhd$a (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$a (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$a (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-sort A_b_prod_stream_a_stream_prod$ 0)
(declare-fun fst$a (A_b_prod_stream_a_stream_prod$)A_b_prod_stream$)
(declare-fun snd$a (A_b_prod_stream_a_stream_prod$)A_stream$)
(declare-fun pair$a (A_b_prod_stream$ A_stream$ )A_b_prod_stream_a_stream_prod$)
(declare-sort A_b_prod_stream_a_stream_prod_llist$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_stream$ 0)
(declare-fun lNil$c ()A_b_prod_stream_a_stream_prod_llist$)
(declare-fun lhd$c (A_b_prod_stream_a_stream_prod_llist$)A_b_prod_stream_a_stream_prod$)
(declare-fun ltl$c (A_b_prod_stream_a_stream_prod_llist$)A_b_prod_stream_a_stream_prod_llist$)
(declare-fun lCons$c (A_b_prod_stream_a_stream_prod$ A_b_prod_stream_a_stream_prod_llist$ )A_b_prod_stream_a_stream_prod_llist$)
(declare-fun shd$c (A_b_prod_stream_a_stream_prod_stream$)A_b_prod_stream_a_stream_prod$)
(declare-fun stl$c (A_b_prod_stream_a_stream_prod_stream$)A_b_prod_stream_a_stream_prod_stream$)
(declare-fun sCons$c (A_b_prod_stream_a_stream_prod$ A_b_prod_stream_a_stream_prod_stream$ )A_b_prod_stream_a_stream_prod_stream$)
(declare-sort A_b_prod_stream_b_stream_prod$ 0)
(declare-fun fst$b (A_b_prod_stream_b_stream_prod$)A_b_prod_stream$)
(declare-fun snd$b (A_b_prod_stream_b_stream_prod$)B_stream$)
(declare-fun pair$b (A_b_prod_stream$ B_stream$ )A_b_prod_stream_b_stream_prod$)
(declare-sort A_b_prod_stream_b_stream_prod_llist$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-sort A_stream_llist$ 0)
(declare-sort A_b_prod_stream_stream$ 0)
(declare-sort B_stream_stream$ 0)
(declare-fun lNil$d ()A_b_prod_stream_b_stream_prod_llist$)
(declare-fun lhd$d (A_b_prod_stream_b_stream_prod_llist$)A_b_prod_stream_b_stream_prod$)
(declare-fun ltl$d (A_b_prod_stream_b_stream_prod_llist$)A_b_prod_stream_b_stream_prod_llist$)
(declare-fun lCons$d (A_b_prod_stream_b_stream_prod$ A_b_prod_stream_b_stream_prod_llist$ )A_b_prod_stream_b_stream_prod_llist$)
(declare-fun shd$d (A_b_prod_stream_b_stream_prod_stream$)A_b_prod_stream_b_stream_prod$)
(declare-fun stl$d (A_b_prod_stream_b_stream_prod_stream$)A_b_prod_stream_b_stream_prod_stream$)
(declare-fun sCons$d (A_b_prod_stream_b_stream_prod$ A_b_prod_stream_b_stream_prod_stream$ )A_b_prod_stream_b_stream_prod_stream$)
(declare-fun shd$e (A_stream_stream$)A_stream$)
(declare-fun stl$e (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$e (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-fun lNil$e ()A_stream_llist$)
(declare-fun lhd$e (A_stream_llist$)A_stream$)
(declare-fun ltl$e (A_stream_llist$)A_stream_llist$)
(declare-fun lCons$e (A_stream$ A_stream_llist$ )A_stream_llist$)
(declare-fun shd$f (A_b_prod_stream_stream$)A_b_prod_stream$)
(declare-fun stl$f (A_b_prod_stream_stream$)A_b_prod_stream_stream$)
(declare-fun sCons$f (A_b_prod_stream$ A_b_prod_stream_stream$ )A_b_prod_stream_stream$)
(declare-fun shd$g (B_stream_stream$)B_stream$)
(declare-fun stl$g (B_stream_stream$)B_stream_stream$)
(declare-fun sCons$g (B_stream$ B_stream_stream$ )B_stream_stream$)
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod$ 0)
(declare-fun fst$c (A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod$)A_b_prod_stream_a_stream_prod_stream$)
(declare-fun snd$c (A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod$)A_b_prod_stream_stream$)
(declare-fun pair$c (A_b_prod_stream_a_stream_prod_stream$ A_b_prod_stream_stream$ )A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod$)
(declare-fun fst$d (A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod$)A_b_prod_stream_a_stream_prod_stream$)
(declare-fun snd$d (A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod$)A_stream_stream$)
(declare-fun pair$d (A_b_prod_stream_a_stream_prod_stream$ A_stream_stream$ )A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod$)
(declare-fun fst$e (A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod$)A_b_prod_stream_b_stream_prod_stream$)
(declare-fun snd$e (A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod$)A_b_prod_stream_stream$)
(declare-fun pair$e (A_b_prod_stream_b_stream_prod_stream$ A_b_prod_stream_stream$ )A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod$)
(declare-fun fst$f (A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod$)A_b_prod_stream_b_stream_prod_stream$)
(declare-fun snd$f (A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod$)B_stream_stream$)
(declare-fun pair$f (A_b_prod_stream_b_stream_prod_stream$ B_stream_stream$ )A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod$)
(declare-fun b$ ()A_b_prod_llist$ )
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun uu$ ()A_b_prod_stream_bool_fun$ )
(declare-fun xs$ ()A_stream$ )
(declare-fun ys$ ()B_stream$ )
(declare-fun grp$ (A_b_prod_stream_set$ )A_b_prod_stream_a_stream_fun_a_b_prod_stream_a_stream_bool_fun_fun_fun$ )
(declare-fun uua$ ()A_b_prod_a_fun$ )
(declare-fun uub$ ()A_b_prod_b_fun$ )
(declare-fun uuc$ ()A_b_prod_llist_bool_fun$ )
(declare-fun uud$ ()A_llist_bool_fun$ )
(declare-fun uue$ ()B_llist_bool_fun$ )
(declare-fun uuf$ ()A_b_prod_a_b_prod_fun$ )
(declare-fun uug$ ()B_b_fun$ )
(declare-fun uuh$ ()A_a_fun$ )
(declare-fun uui$ (Bool )A_b_prod_stream_b_stream_bool_fun_fun_a_b_prod_stream_b_stream_bool_fun_fun_fun$ )
(declare-fun uuj$ (Bool )A_b_prod_stream_a_stream_bool_fun_fun_a_b_prod_stream_a_stream_bool_fun_fun_fun$ )
(declare-fun uuk$ (Bool A_b_bool_fun_fun$ )A_b_bool_fun_fun$ )
(declare-fun uul$ (A_b_prod_stream_b_stream_bool_fun_fun$ )A_b_prod_stream_b_stream_prod_stream_bool_fun$ )
(declare-fun uum$ ()A_b_prod_stream_b_stream_prod_a_b_prod_stream_fun$ )
(declare-fun uun$ ()A_b_prod_stream_b_stream_prod_b_stream_fun$ )
(declare-fun uuo$ (A_b_prod_stream_a_stream_bool_fun_fun$ )A_b_prod_stream_a_stream_prod_stream_bool_fun$ )
(declare-fun uup$ ()A_b_prod_stream_a_stream_prod_a_b_prod_stream_fun$ )
(declare-fun uuq$ ()A_b_prod_stream_a_stream_prod_a_stream_fun$ )
(declare-fun uur$ (A_b_bool_fun_fun$ )A_b_prod_stream_bool_fun$ )
(declare-fun grp$a (A_b_prod_stream_set$ )A_b_prod_stream_b_stream_fun_a_b_prod_stream_b_stream_bool_fun_fun_fun$ )
(declare-fun grp$b (A_b_prod_stream_b_stream_prod_stream_set$ A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_fun$ )A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$ )
(declare-fun grp$c (A_b_prod_stream_b_stream_prod_stream_set$ A_b_prod_stream_b_stream_prod_stream_b_stream_stream_fun$ )A_b_prod_stream_b_stream_prod_stream_b_stream_stream_bool_fun_fun$ )
(declare-fun grp$d (A_b_prod_stream_a_stream_prod_stream_set$ A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_fun$ )A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$ )
(declare-fun grp$e (A_b_prod_stream_a_stream_prod_stream_set$ A_b_prod_stream_a_stream_prod_stream_a_stream_stream_fun$ )A_b_prod_stream_a_stream_prod_stream_a_stream_stream_bool_fun_fun$ )
(declare-fun grp$f (A_set$ A_b_fun$ )A_b_bool_fun_fun$ )
(declare-fun lmap$ (A_b_prod_a_fun$ A_b_prod_llist$ )A_llist$ )
(declare-fun lset$ (A_b_prod_llist$ )A_b_prod_set$ )
(declare-fun smap$ (A_b_prod_a_fun$ )A_b_prod_stream_a_stream_fun$ )
(declare-fun sset$ (A_b_prod_stream$ )A_b_prod_set$ )
(declare-fun lmap$a (A_b_prod_b_fun$ A_b_prod_llist$ )B_llist$ )
(declare-fun lmap$b (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$c (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$d (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$e (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$f (A_a_b_prod_fun$ A_llist$ )A_b_prod_llist$ )
(declare-fun lmap$g (B_a_b_prod_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun lmap$h (A_b_prod_a_b_prod_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lmap$i (A_b_prod_stream_a_stream_prod_a_stream_fun$ A_b_prod_stream_a_stream_prod_llist$ )A_stream_llist$ )
(declare-fun lset$a (A_b_prod_stream_a_stream_prod_llist$ )A_b_prod_stream_a_stream_prod_set$ )
(declare-fun lset$b (A_b_prod_stream_b_stream_prod_llist$ )A_b_prod_stream_b_stream_prod_set$ )
(declare-fun lset$c (A_llist$ )A_set$ )
(declare-fun lset$d (B_llist$ )B_set$ )
(declare-fun smap$a (A_b_prod_b_fun$ )A_b_prod_stream_b_stream_fun$ )
(declare-fun smap$b (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun smap$c (A_b_fun$ A_stream$ )B_stream$ )
(declare-fun smap$d (B_a_fun$ B_stream$ )A_stream$ )
(declare-fun smap$e (B_b_fun$ B_stream$ )B_stream$ )
(declare-fun smap$f (A_a_b_prod_fun$ A_stream$ )A_b_prod_stream$ )
(declare-fun smap$g (B_a_b_prod_fun$ B_stream$ )A_b_prod_stream$ )
(declare-fun smap$h (A_b_prod_a_b_prod_fun$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$i (A_b_prod_stream_a_stream_prod_a_stream_fun$ )A_b_prod_stream_a_stream_prod_stream_a_stream_stream_fun$ )
(declare-fun smap$j (A_b_prod_stream_b_stream_prod_a_b_prod_stream_fun$ )A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_fun$ )
(declare-fun smap$k (A_b_prod_stream_b_stream_prod_b_stream_fun$ )A_b_prod_stream_b_stream_prod_stream_b_stream_stream_fun$ )
(declare-fun smap$l (A_b_prod_stream_a_stream_prod_a_b_prod_stream_fun$ )A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_fun$ )
(declare-fun sset$a (A_b_prod_stream_b_stream_prod_stream$ )A_b_prod_stream_b_stream_prod_set$ )
(declare-fun sset$b (A_b_prod_stream_a_stream_prod_stream$ )A_b_prod_stream_a_stream_prod_set$ )
(declare-fun sset$c (A_stream$ )A_set$ )
(declare-fun sset$d (B_stream$ )B_set$ )
(declare-fun member$ (A_b_prod_llist$ A_b_prod_llist_set$ )Bool )
(declare-fun collect$ (A_b_prod_bool_fun$ )A_b_prod_set$ )
(declare-fun fun_app$ (A_b_prod_stream_bool_fun$ A_b_prod_stream$ )Bool )
(declare-fun less_eq$ (A_b_prod_set$ A_b_prod_set$ )Bool )
(declare-fun lfinite$ (A_b_prod_llist$ )Bool )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun member$b (B_llist$ B_llist_set$ )Bool )
(declare-fun member$c (A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod$ A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod_set$ )Bool )
(declare-fun member$d (A_b_prod_stream_a_stream_prod_stream$ A_b_prod_stream_a_stream_prod_stream_set$ )Bool )
(declare-fun member$e (A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod$ A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod_set$ )Bool )
(declare-fun member$f (A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod$ A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod_set$ )Bool )
(declare-fun member$g (A_b_prod_stream_b_stream_prod_stream$ A_b_prod_stream_b_stream_prod_stream_set$ )Bool )
(declare-fun member$h (A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod$ A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod_set$ )Bool )
(declare-fun member$i (A_b_prod_stream_a_stream_prod$ A_b_prod_stream_a_stream_prod_set$ )Bool )
(declare-fun member$j (A_b_prod_stream$ A_b_prod_stream_set$ )Bool )
(declare-fun member$k (A_b_prod_stream_b_stream_prod$ A_b_prod_stream_b_stream_prod_set$ )Bool )
(declare-fun member$l (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun member$m (A$ A_set$ )Bool )
(declare-fun collect$a (A_b_prod_stream_b_stream_prod_bool_fun$ )A_b_prod_stream_b_stream_prod_set$ )
(declare-fun collect$b (A_b_prod_stream_a_stream_prod_bool_fun$ )A_b_prod_stream_a_stream_prod_set$ )
(declare-fun collect$c (A_b_prod_stream_bool_fun$ )A_b_prod_stream_set$ )
(declare-fun collect$d (A_b_prod_llist_bool_fun$ )A_b_prod_llist_set$ )
(declare-fun collect$e (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun collect$f (B_llist_bool_fun$ )B_llist_set$ )
(declare-fun collect$g (A_b_prod_stream_b_stream_prod_stream_bool_fun$ )A_b_prod_stream_b_stream_prod_stream_set$ )
(declare-fun collect$h (A_b_prod_stream_a_stream_prod_stream_bool_fun$ )A_b_prod_stream_a_stream_prod_stream_set$ )
(declare-fun collect$i (A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod_bool_fun$ )A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod_set$ )
(declare-fun collect$j (A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod_bool_fun$ )A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod_set$ )
(declare-fun collect$k (A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod_bool_fun$ )A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod_set$ )
(declare-fun collect$l (A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod_bool_fun$ )A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod_set$ )
(declare-fun fun_app$a (A_b_prod_llist_bool_fun$ A_b_prod_llist$ )Bool )
(declare-fun fun_app$b (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$d (A_b_prod_stream_b_stream_prod_b_stream_fun$ A_b_prod_stream_b_stream_prod$ )B_stream$ )
(declare-fun fun_app$e (A_b_prod_stream_a_stream_prod_a_stream_fun$ A_b_prod_stream_a_stream_prod$ )A_stream$ )
(declare-fun fun_app$f (A_b_prod_b_fun$ A_b_prod$ )B$ )
(declare-fun fun_app$g (A_b_prod_stream_b_stream_prod_a_b_prod_stream_fun$ A_b_prod_stream_b_stream_prod$ )A_b_prod_stream$ )
(declare-fun fun_app$h (A_b_prod_stream_a_stream_prod_a_b_prod_stream_fun$ A_b_prod_stream_a_stream_prod$ )A_b_prod_stream$ )
(declare-fun fun_app$i (A_b_prod_a_fun$ A_b_prod$ )A$ )
(declare-fun fun_app$j (A_b_prod_stream_b_stream_prod_stream_bool_fun$ A_b_prod_stream_b_stream_prod_stream$ )Bool )
(declare-fun fun_app$k (A_b_prod_stream_a_stream_prod_stream_bool_fun$ A_b_prod_stream_a_stream_prod_stream$ )Bool )
(declare-fun fun_app$l (B_stream_bool_fun$ B_stream$ )Bool )
(declare-fun fun_app$m (A_b_prod_stream_b_stream_bool_fun_fun$ A_b_prod_stream$ )B_stream_bool_fun$ )
(declare-fun fun_app$n (A_b_prod_stream_b_stream_bool_fun_fun_a_b_prod_stream_b_stream_bool_fun_fun_fun$ A_b_prod_stream_b_stream_bool_fun_fun$ )A_b_prod_stream_b_stream_bool_fun_fun$ )
(declare-fun fun_app$o (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$p (A_b_prod_stream_a_stream_bool_fun_fun$ A_b_prod_stream$ )A_stream_bool_fun$ )
(declare-fun fun_app$q (A_b_prod_stream_a_stream_bool_fun_fun_a_b_prod_stream_a_stream_bool_fun_fun_fun$ A_b_prod_stream_a_stream_bool_fun_fun$ )A_b_prod_stream_a_stream_bool_fun_fun$ )
(declare-fun fun_app$r (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$s (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$t (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod$ )
(declare-fun fun_app$u (B_b_fun$ B$ )B$ )
(declare-fun fun_app$v (A_a_fun$ A$ )A$ )
(declare-fun fun_app$w (A_stream_b_stream_bool_fun_fun$ A_stream$ )B_stream_bool_fun$ )
(declare-fun fun_app$x (A_b_prod_stream_b_stream_bool_fun_fun_a_stream_b_stream_bool_fun_fun_fun$ A_b_prod_stream_b_stream_bool_fun_fun$ )A_stream_b_stream_bool_fun_fun$ )
(declare-fun fun_app$y (A_b_prod_stream_a_stream_fun_a_b_prod_stream_a_stream_bool_fun_fun_fun$ A_b_prod_stream_a_stream_fun$ )A_b_prod_stream_a_stream_bool_fun_fun$ )
(declare-fun fun_app$z (A_b_prod_stream_b_stream_fun_a_b_prod_stream_b_stream_bool_fun_fun_fun$ A_b_prod_stream_b_stream_fun$ )A_b_prod_stream_b_stream_bool_fun_fun$ )
(declare-fun less_eq$a (A_b_prod_stream_b_stream_prod_set$ A_b_prod_stream_b_stream_prod_set$ )Bool )
(declare-fun less_eq$b (A_b_prod_stream_a_stream_prod_set$ A_b_prod_stream_a_stream_prod_set$ )Bool )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun lfinite$b (A_llist$ )Bool )
(declare-fun lfinite$c (A_b_prod_stream_a_stream_prod_llist$ )Bool )
(declare-fun lfinite$d (A_b_prod_stream_b_stream_prod_llist$ )Bool )
(declare-fun relcompp$ (A_stream_a_b_prod_stream_bool_fun_fun$ )A_b_prod_stream_b_stream_bool_fun_fun_a_stream_b_stream_bool_fun_fun_fun$ )
(declare-fun case_prod$ (A_b_bool_fun_fun$ )A_b_prod_bool_fun$ )
(declare-fun conversep$ (A_b_prod_stream_a_stream_bool_fun_fun$ )A_stream_a_b_prod_stream_bool_fun_fun$ )
(declare-fun fun_app$aa (A_b_prod_stream_a_stream_fun$ A_b_prod_stream$ )A_stream$ )
(declare-fun fun_app$ab (A_b_prod_stream_b_stream_fun$ A_b_prod_stream$ )B_stream$ )
(declare-fun fun_app$ac (A_b_prod_stream_a_stream_prod_stream_a_stream_stream_fun$ A_b_prod_stream_a_stream_prod_stream$ )A_stream_stream$ )
(declare-fun fun_app$ad (A_b_prod_stream_b_stream_prod_bool_fun$ A_b_prod_stream_b_stream_prod$ )Bool )
(declare-fun fun_app$ae (A_b_prod_stream_a_stream_prod_bool_fun$ A_b_prod_stream_a_stream_prod$ )Bool )
(declare-fun fun_app$af (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun fun_app$ag (B_stream_a_b_prod_stream_bool_fun_fun$ B_stream$ )A_b_prod_stream_bool_fun$ )
(declare-fun fun_app$ah (Bool_bool_fun$ Bool )Bool )
(declare-fun fun_app$ai (A_stream_a_b_prod_stream_bool_fun_fun$ A_stream$ )A_b_prod_stream_bool_fun$ )
(declare-fun fun_app$aj (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$ak (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$al (A_b_prod_stream_a_stream_bool_fun_fun_b_stream_a_stream_bool_fun_fun_fun$ A_b_prod_stream_a_stream_bool_fun_fun$ )B_stream_a_stream_bool_fun_fun$ )
(declare-fun fun_app$am (A_b_prod_stream_b_stream_bool_fun_fun_b_stream_b_stream_bool_fun_fun_fun$ A_b_prod_stream_b_stream_bool_fun_fun$ )B_stream_b_stream_bool_fun_fun$ )
(declare-fun fun_app$an (A_b_prod_stream_a_stream_bool_fun_fun_a_stream_a_stream_bool_fun_fun_fun$ A_b_prod_stream_a_stream_bool_fun_fun$ )A_stream_a_stream_bool_fun_fun$ )
(declare-fun relcompp$a (A_b_prod_stream_stream_a_b_prod_stream_b_stream_prod_stream_bool_fun_fun$ A_b_prod_stream_b_stream_prod_stream_b_stream_stream_bool_fun_fun$ )A_b_prod_stream_stream_b_stream_stream_bool_fun_fun$ )
(declare-fun relcompp$b (A_b_prod_stream_stream_a_b_prod_stream_a_stream_prod_stream_bool_fun_fun$ A_b_prod_stream_a_stream_prod_stream_a_stream_stream_bool_fun_fun$ )A_b_prod_stream_stream_a_stream_stream_bool_fun_fun$ )
(declare-fun relcompp$c (B_stream_a_b_prod_stream_bool_fun_fun$ )A_b_prod_stream_a_stream_bool_fun_fun_b_stream_a_stream_bool_fun_fun_fun$ )
(declare-fun relcompp$d (B_stream_a_b_prod_stream_bool_fun_fun$ )A_b_prod_stream_b_stream_bool_fun_fun_b_stream_b_stream_bool_fun_fun_fun$ )
(declare-fun relcompp$e (A_stream_a_b_prod_stream_bool_fun_fun$ )A_b_prod_stream_a_stream_bool_fun_fun_a_stream_a_stream_bool_fun_fun_fun$ )
(declare-fun relcompp$f (B_a_bool_fun_fun$ A_b_bool_fun_fun$ )B_b_bool_fun_fun$ )
(declare-fun relcompp$g (A_stream_stream_a_b_prod_stream_a_stream_prod_stream_bool_fun_fun$ A_b_prod_stream_a_stream_prod_stream_a_stream_stream_bool_fun_fun$ )A_stream_stream_a_stream_stream_bool_fun_fun$ )
(declare-fun relcompp$h (B_stream_stream_a_b_prod_stream_b_stream_prod_stream_bool_fun_fun$ A_b_prod_stream_b_stream_prod_stream_b_stream_stream_bool_fun_fun$ )B_stream_stream_b_stream_stream_bool_fun_fun$ )
(declare-fun relcompp$i (A_stream_stream_a_b_prod_stream_a_stream_prod_stream_bool_fun_fun$ A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$ )A_stream_stream_a_b_prod_stream_stream_bool_fun_fun$ )
(declare-fun relcompp$j (B_stream_stream_a_b_prod_stream_b_stream_prod_stream_bool_fun_fun$ A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$ )B_stream_stream_a_b_prod_stream_stream_bool_fun_fun$ )
(declare-fun case_prod$a (A_b_prod_stream_b_stream_bool_fun_fun$ )A_b_prod_stream_b_stream_prod_bool_fun$ )
(declare-fun case_prod$b (A_b_prod_stream_a_stream_bool_fun_fun$ )A_b_prod_stream_a_stream_prod_bool_fun$ )
(declare-fun case_prod$c (A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$ )A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod_bool_fun$ )
(declare-fun case_prod$d (A_b_prod_stream_a_stream_prod_stream_a_stream_stream_bool_fun_fun$ )A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod_bool_fun$ )
(declare-fun case_prod$e (A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$ )A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod_bool_fun$ )
(declare-fun case_prod$f (A_b_prod_stream_b_stream_prod_stream_b_stream_stream_bool_fun_fun$ )A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod_bool_fun$ )
(declare-fun conversep$a (A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$ )A_b_prod_stream_stream_a_b_prod_stream_b_stream_prod_stream_bool_fun_fun$ )
(declare-fun conversep$b (A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$ )A_b_prod_stream_stream_a_b_prod_stream_a_stream_prod_stream_bool_fun_fun$ )
(declare-fun conversep$c (A_b_prod_stream_b_stream_bool_fun_fun$ )B_stream_a_b_prod_stream_bool_fun_fun$ )
(declare-fun conversep$d (A_b_bool_fun_fun$ )B_a_bool_fun_fun$ )
(declare-fun conversep$e (A_b_prod_stream_a_stream_prod_stream_a_stream_stream_bool_fun_fun$ )A_stream_stream_a_b_prod_stream_a_stream_prod_stream_bool_fun_fun$ )
(declare-fun conversep$f (A_b_prod_stream_b_stream_prod_stream_b_stream_stream_bool_fun_fun$ )B_stream_stream_a_b_prod_stream_b_stream_prod_stream_bool_fun_fun$ )
(declare-fun stream_all2$ (A_b_prod_stream_b_stream_bool_fun_fun$ )A_b_prod_stream_stream_b_stream_stream_bool_fun_fun$ )
(declare-fun stream_all2$a (A_b_prod_stream_a_stream_bool_fun_fun$ )A_b_prod_stream_stream_a_stream_stream_bool_fun_fun$ )
(declare-fun stream_all2$b (A_b_bool_fun_fun$ )A_stream_b_stream_bool_fun_fun$ )
(declare-fun stream_of_llist$ (A_llist$ )A_stream$ )
(declare-fun stream_of_llist$a (B_llist$ )B_stream$ )
(declare-fun stream_of_llist$b (A_b_prod_stream_a_stream_prod_llist$ )A_b_prod_stream_a_stream_prod_stream$ )
(declare-fun stream_of_llist$c (A_b_prod_stream_b_stream_prod_llist$ )A_b_prod_stream_b_stream_prod_stream$ )
(declare-fun stream_of_llist$d (A_b_prod_llist$ )A_b_prod_stream$ )
(declare-fun stream_of_llist$e (A_stream_llist$ )A_stream_stream$ )
(assert (! (forall ((?v0 A_b_prod_stream$ ))(! (= (fun_app$ uu$ ?v0 )(less_eq$ (sset$ ?v0 )(collect$ (case_prod$ p$ )))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$a uuc$ ?v0 )(not (lfinite$ ?v0 ))):pattern ((fun_app$a uuc$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$b uue$ ?v0 )(not (lfinite$a ?v0 ))):pattern ((fun_app$b uue$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c uud$ ?v0 )(not (lfinite$b ?v0 ))):pattern ((fun_app$c uud$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_prod$ ))(! (= (fun_app$d uun$ ?v0 )(snd$b ?v0 )):pattern ((fun_app$d uun$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod$ ))(! (= (fun_app$e uuq$ ?v0 )(snd$a ?v0 )):pattern ((fun_app$e uuq$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$f uub$ ?v0 )(snd$ ?v0 )):pattern ((fun_app$f uub$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_prod$ ))(! (= (fun_app$g uum$ ?v0 )(fst$b ?v0 )):pattern ((fun_app$g uum$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod$ ))(! (= (fun_app$h uup$ ?v0 )(fst$a ?v0 )):pattern ((fun_app$h uup$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$i uua$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$i uua$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_bool_fun_fun$ )(?v1 A_b_prod_stream_b_stream_prod_stream$ ))(! (= (fun_app$j (uul$ ?v0 )?v1 )(less_eq$a (sset$a ?v1 )(collect$a (case_prod$a ?v0 )))):pattern ((fun_app$j (uul$ ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_bool_fun_fun$ )(?v1 A_b_prod_stream_a_stream_prod_stream$ ))(! (= (fun_app$k (uuo$ ?v0 )?v1 )(less_eq$b (sset$b ?v1 )(collect$b (case_prod$b ?v0 )))):pattern ((fun_app$k (uuo$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_prod_stream$ ))(! (= (fun_app$ (uur$ ?v0 )?v1 )(less_eq$ (sset$ ?v1 )(collect$ (case_prod$ ?v0 )))):pattern ((fun_app$ (uur$ ?v0 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_prod_stream_b_stream_bool_fun_fun$ )(?v2 A_b_prod_stream$ )(?v3 B_stream$ ))(! (= (fun_app$l (fun_app$m (fun_app$n (uui$ ?v0 )?v1 )?v2 )?v3 )(and ?v0 (fun_app$l (fun_app$m ?v1 ?v2 )?v3 ))):pattern ((fun_app$l (fun_app$m (fun_app$n (uui$ ?v0 )?v1 )?v2 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_prod_stream_a_stream_bool_fun_fun$ )(?v2 A_b_prod_stream$ )(?v3 A_stream$ ))(! (= (fun_app$o (fun_app$p (fun_app$q (uuj$ ?v0 )?v1 )?v2 )?v3 )(and ?v0 (fun_app$o (fun_app$p ?v1 ?v2 )?v3 ))):pattern ((fun_app$o (fun_app$p (fun_app$q (uuj$ ?v0 )?v1 )?v2 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_bool_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$r (fun_app$s (uuk$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$r (fun_app$s ?v1 ?v2 )?v3 ))):pattern ((fun_app$r (fun_app$s (uuk$ ?v0 ?v1 )?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$t uuf$ ?v0 )?v0 ):pattern ((fun_app$t uuf$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$u uug$ ?v0 )?v0 ):pattern ((fun_app$u uug$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$v uuh$ ?v0 )?v0 ):pattern ((fun_app$v uuh$ ?v0 )))):named a18 ))
(assert (! (not (fun_app$l (fun_app$w (fun_app$x (relcompp$ (conversep$ (fun_app$y (grp$ (collect$c uu$ ))(smap$ uua$ ))))(fun_app$z (grp$a (collect$c uu$ ))(smap$a uub$ )))(stream_of_llist$ (lmap$ uua$ b$ )))(stream_of_llist$a (lmap$a uub$ b$ )))):named a19 ))
(assert (! (= xs$ (stream_of_llist$ (lmap$ uua$ b$ ))):named a20 ))
(assert (! (not (lfinite$b (lmap$ uua$ b$ ))):named a21 ))
(assert (! (= ys$ (stream_of_llist$a (lmap$a uub$ b$ ))):named a22 ))
(assert (! (not (lfinite$a (lmap$a uub$ b$ ))):named a23 ))
(assert (! (less_eq$ (lset$ b$ )(collect$ (case_prod$ p$ ))):named a24 ))
(assert (! (less_eq$ (lset$ b$ )(collect$ (case_prod$ p$ ))):named a25 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod_llist$ ))(=> (and (not (lfinite$c ?v0 ))(not (lfinite$c ?v0 )))(= (sset$b (stream_of_llist$b ?v0 ))(lset$a ?v0 )))):named a26 ))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_prod_llist$ ))(=> (and (not (lfinite$d ?v0 ))(not (lfinite$d ?v0 )))(= (sset$a (stream_of_llist$c ?v0 ))(lset$b ?v0 )))):named a27 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(=> (and (not (lfinite$ ?v0 ))(not (lfinite$ ?v0 )))(= (sset$ (stream_of_llist$d ?v0 ))(lset$ ?v0 )))):named a28 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (not (lfinite$b ?v0 ))(not (lfinite$b ?v0 )))(= (sset$c (stream_of_llist$ ?v0 ))(lset$c ?v0 )))):named a29 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (and (not (lfinite$a ?v0 ))(not (lfinite$a ?v0 )))(= (sset$d (stream_of_llist$a ?v0 ))(lset$d ?v0 )))):named a30 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_fun$ ))(=> (not (lfinite$b ?v0 ))(= (smap$b ?v1 (stream_of_llist$ ?v0 ))(stream_of_llist$ (lmap$b ?v1 ?v0 ))))):named a31 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_fun$ ))(=> (not (lfinite$b ?v0 ))(= (smap$c ?v1 (stream_of_llist$ ?v0 ))(stream_of_llist$a (lmap$c ?v1 ?v0 ))))):named a32 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_a_fun$ ))(=> (not (lfinite$a ?v0 ))(= (smap$d ?v1 (stream_of_llist$a ?v0 ))(stream_of_llist$ (lmap$d ?v1 ?v0 ))))):named a33 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_b_fun$ ))(=> (not (lfinite$a ?v0 ))(= (smap$e ?v1 (stream_of_llist$a ?v0 ))(stream_of_llist$a (lmap$e ?v1 ?v0 ))))):named a34 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_a_fun$ ))(=> (not (lfinite$ ?v0 ))(= (fun_app$aa (smap$ ?v1 )(stream_of_llist$d ?v0 ))(stream_of_llist$ (lmap$ ?v1 ?v0 ))))):named a35 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_b_fun$ ))(=> (not (lfinite$ ?v0 ))(= (fun_app$ab (smap$a ?v1 )(stream_of_llist$d ?v0 ))(stream_of_llist$a (lmap$a ?v1 ?v0 ))))):named a36 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_b_prod_fun$ ))(=> (not (lfinite$b ?v0 ))(= (smap$f ?v1 (stream_of_llist$ ?v0 ))(stream_of_llist$d (lmap$f ?v1 ?v0 ))))):named a37 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_a_b_prod_fun$ ))(=> (not (lfinite$a ?v0 ))(= (smap$g ?v1 (stream_of_llist$a ?v0 ))(stream_of_llist$d (lmap$g ?v1 ?v0 ))))):named a38 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_a_b_prod_fun$ ))(=> (not (lfinite$ ?v0 ))(= (smap$h ?v1 (stream_of_llist$d ?v0 ))(stream_of_llist$d (lmap$h ?v1 ?v0 ))))):named a39 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod_llist$ )(?v1 A_b_prod_stream_a_stream_prod_a_stream_fun$ ))(=> (not (lfinite$c ?v0 ))(= (fun_app$ac (smap$i ?v1 )(stream_of_llist$b ?v0 ))(stream_of_llist$e (lmap$i ?v1 ?v0 ))))):named a40 ))
(assert (! (forall ((?v0 A_b_prod_stream_bool_fun$ )(?v1 A_b_prod_stream$ ))(=> (forall ((?v2 A_b_prod_llist$ ))(=> (member$ ?v2 (collect$d uuc$ ))(fun_app$ ?v0 (stream_of_llist$d ?v2 ))))(fun_app$ ?v0 ?v1 ))):named a41 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (forall ((?v2 A_llist$ ))(=> (member$a ?v2 (collect$e uud$ ))(fun_app$o ?v0 (stream_of_llist$ ?v2 ))))(fun_app$o ?v0 ?v1 ))):named a42 ))
(assert (! (forall ((?v0 B_stream_bool_fun$ )(?v1 B_stream$ ))(=> (forall ((?v2 B_llist$ ))(=> (member$b ?v2 (collect$f uue$ ))(fun_app$l ?v0 (stream_of_llist$a ?v2 ))))(fun_app$l ?v0 ?v1 ))):named a43 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(=> (forall ((?v1 A_b_prod_llist$ ))(=> (and (= ?v0 (stream_of_llist$d ?v1 ))(member$ ?v1 (collect$d uuc$ )))false ))false )):named a44 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A_llist$ ))(=> (and (= ?v0 (stream_of_llist$ ?v1 ))(member$a ?v1 (collect$e uud$ )))false ))false )):named a45 ))
(assert (! (forall ((?v0 B_stream$ ))(=> (forall ((?v1 B_llist$ ))(=> (and (= ?v0 (stream_of_llist$a ?v1 ))(member$b ?v1 (collect$f uue$ )))false ))false )):named a46 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(=> (and (member$ ?v0 (collect$d uuc$ ))(member$ ?v1 (collect$d uuc$ )))(= (= (stream_of_llist$d ?v0 )(stream_of_llist$d ?v1 ))(= ?v0 ?v1 )))):named a47 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (member$a ?v0 (collect$e uud$ ))(member$a ?v1 (collect$e uud$ )))(= (= (stream_of_llist$ ?v0 )(stream_of_llist$ ?v1 ))(= ?v0 ?v1 )))):named a48 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (member$b ?v0 (collect$f uue$ ))(member$b ?v1 (collect$f uue$ )))(= (= (stream_of_llist$a ?v0 )(stream_of_llist$a ?v1 ))(= ?v0 ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$f ?v0 ?v1 ))(lfinite$b ?v1 ))):named a50 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_llist$ ))(= (lfinite$ (lmap$g ?v0 ?v1 ))(lfinite$a ?v1 ))):named a51 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_llist$ ))(= (lfinite$ (lmap$h ?v0 ?v1 ))(lfinite$ ?v1 ))):named a52 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$b (lmap$b ?v0 ?v1 ))(lfinite$b ?v1 ))):named a53 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lfinite$b (lmap$d ?v0 ?v1 ))(lfinite$a ?v1 ))):named a54 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lfinite$a (lmap$c ?v0 ?v1 ))(lfinite$b ?v1 ))):named a55 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lfinite$a (lmap$e ?v0 ?v1 ))(lfinite$a ?v1 ))):named a56 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_llist$ ))(= (lfinite$b (lmap$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a57 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_llist$ ))(= (lfinite$a (lmap$a ?v0 ?v1 ))(lfinite$ ?v1 ))):named a58 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(= (smap$h uuf$ ?v0 )?v0 )):named a59 ))
(assert (! (forall ((?v0 B_stream$ ))(= (smap$e uug$ ?v0 )?v0 )):named a60 ))
(assert (! (forall ((?v0 A_stream$ ))(= (smap$b uuh$ ?v0 )?v0 )):named a61 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(= (lmap$h uuf$ ?v0 )?v0 )):named a62 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lmap$e uug$ ?v0 )?v0 )):named a63 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lmap$b uuh$ ?v0 )?v0 )):named a64 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_prod_stream_b_stream_bool_fun_fun$ )(?v2 A_b_prod_stream_b_stream_prod$ ))(= (fun_app$ad (case_prod$a (fun_app$n (uui$ ?v0 )?v1 ))?v2 )(and ?v0 (fun_app$ad (case_prod$a ?v1 )?v2 )))):named a65 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_prod_stream_a_stream_bool_fun_fun$ )(?v2 A_b_prod_stream_a_stream_prod$ ))(= (fun_app$ae (case_prod$b (fun_app$q (uuj$ ?v0 )?v1 ))?v2 )(and ?v0 (fun_app$ae (case_prod$b ?v1 )?v2 )))):named a66 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_bool_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$af (case_prod$ (uuk$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$af (case_prod$ ?v1 )?v2 )))):named a67 ))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_bool_fun_fun$ )(?v1 A_b_prod_stream_b_stream_prod$ ))(! (= (fun_app$ad (case_prod$a ?v0 )?v1 )(fun_app$l (fun_app$m ?v0 (fst$b ?v1 ))(snd$b ?v1 ))):pattern ((fun_app$ad (case_prod$a ?v0 )?v1 )))):named a68 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_bool_fun_fun$ )(?v1 A_b_prod_stream_a_stream_prod$ ))(! (= (fun_app$ae (case_prod$b ?v0 )?v1 )(fun_app$o (fun_app$p ?v0 (fst$a ?v1 ))(snd$a ?v1 ))):pattern ((fun_app$ae (case_prod$b ?v0 )?v1 )))):named a69 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_prod$ ))(! (= (fun_app$af (case_prod$ ?v0 )?v1 )(fun_app$r (fun_app$s ?v0 (fst$ ?v1 ))(snd$ ?v1 ))):pattern ((fun_app$af (case_prod$ ?v0 )?v1 )))):named a70 ))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_bool_fun_fun$ )(?v1 A_b_prod_stream_b_stream_prod$ ))(! (= (fun_app$ad (case_prod$a ?v0 )?v1 )(fun_app$l (fun_app$m ?v0 (fst$b ?v1 ))(snd$b ?v1 ))):pattern ((fun_app$ad (case_prod$a ?v0 )?v1 )))):named a71 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_bool_fun_fun$ )(?v1 A_b_prod_stream_a_stream_prod$ ))(! (= (fun_app$ae (case_prod$b ?v0 )?v1 )(fun_app$o (fun_app$p ?v0 (fst$a ?v1 ))(snd$a ?v1 ))):pattern ((fun_app$ae (case_prod$b ?v0 )?v1 )))):named a72 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_prod$ ))(! (= (fun_app$af (case_prod$ ?v0 )?v1 )(fun_app$r (fun_app$s ?v0 (fst$ ?v1 ))(snd$ ?v1 ))):pattern ((fun_app$af (case_prod$ ?v0 )?v1 )))):named a73 ))
(assert (! (forall ((?v0 B_stream_a_b_prod_stream_bool_fun_fun$ )(?v1 A_b_prod_stream_b_stream_prod$ )(?v2 Bool_bool_fun$ )(?v3 A_b_prod_stream_b_stream_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$ag ?v0 (snd$b ?v1 ))(fst$b ?v1 ))(forall ((?v4 A_b_prod_stream$ )(?v5 B_stream$ ))(=> (fun_app$ (fun_app$ag ?v0 ?v5 )?v4 )(fun_app$ah ?v2 (fun_app$l (fun_app$m ?v3 ?v4 )?v5 )))))(fun_app$ah ?v2 (fun_app$ad (case_prod$a ?v3 )?v1 )))):named a74 ))
(assert (! (forall ((?v0 A_stream_a_b_prod_stream_bool_fun_fun$ )(?v1 A_b_prod_stream_a_stream_prod$ )(?v2 Bool_bool_fun$ )(?v3 A_b_prod_stream_a_stream_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$ai ?v0 (snd$a ?v1 ))(fst$a ?v1 ))(forall ((?v4 A_b_prod_stream$ )(?v5 A_stream$ ))(=> (fun_app$ (fun_app$ai ?v0 ?v5 )?v4 )(fun_app$ah ?v2 (fun_app$o (fun_app$p ?v3 ?v4 )?v5 )))))(fun_app$ah ?v2 (fun_app$ae (case_prod$b ?v3 )?v1 )))):named a75 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 A_b_prod$ )(?v2 Bool_bool_fun$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$aj (fun_app$ak ?v0 (snd$ ?v1 ))(fst$ ?v1 ))(forall ((?v4 A$ )(?v5 B$ ))(=> (fun_app$aj (fun_app$ak ?v0 ?v5 )?v4 )(fun_app$ah ?v2 (fun_app$r (fun_app$s ?v3 ?v4 )?v5 )))))(fun_app$ah ?v2 (fun_app$af (case_prod$ ?v3 )?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_bool_fun_fun$ ))(= (stream_all2$ ?v0 )(relcompp$a (conversep$a (grp$b (collect$g (uul$ ?v0 ))(smap$j uum$ )))(grp$c (collect$g (uul$ ?v0 ))(smap$k uun$ ))))):named a77 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_bool_fun_fun$ ))(= (stream_all2$a ?v0 )(relcompp$b (conversep$b (grp$d (collect$h (uuo$ ?v0 ))(smap$l uup$ )))(grp$e (collect$h (uuo$ ?v0 ))(smap$i uuq$ ))))):named a78 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ ))(= (stream_all2$b ?v0 )(fun_app$x (relcompp$ (conversep$ (fun_app$y (grp$ (collect$c (uur$ ?v0 )))(smap$ uua$ ))))(fun_app$z (grp$a (collect$c (uur$ ?v0 )))(smap$a uub$ ))))):named a79 ))
(assert (! (forall ((?v0 A_b_prod_stream_set$ )(?v1 A_b_prod_stream_set$ )(?v2 A_b_prod_stream_b_stream_fun$ )(?v3 A_b_prod_stream_a_stream_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$al (relcompp$c (conversep$c (fun_app$z (grp$a ?v0 )?v2 )))(fun_app$y (grp$ ?v0 )?v3 ))(fun_app$al (relcompp$c (conversep$c (fun_app$z (grp$a ?v1 )?v2 )))(fun_app$y (grp$ ?v1 )?v3 ))))):named a80 ))
(assert (! (forall ((?v0 A_b_prod_stream_set$ )(?v1 A_b_prod_stream_set$ )(?v2 A_b_prod_stream_b_stream_fun$ )(?v3 A_b_prod_stream_b_stream_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$am (relcompp$d (conversep$c (fun_app$z (grp$a ?v0 )?v2 )))(fun_app$z (grp$a ?v0 )?v3 ))(fun_app$am (relcompp$d (conversep$c (fun_app$z (grp$a ?v1 )?v2 )))(fun_app$z (grp$a ?v1 )?v3 ))))):named a81 ))
(assert (! (forall ((?v0 A_b_prod_stream_set$ )(?v1 A_b_prod_stream_set$ )(?v2 A_b_prod_stream_a_stream_fun$ )(?v3 A_b_prod_stream_a_stream_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$an (relcompp$e (conversep$ (fun_app$y (grp$ ?v0 )?v2 )))(fun_app$y (grp$ ?v0 )?v3 ))(fun_app$an (relcompp$e (conversep$ (fun_app$y (grp$ ?v1 )?v2 )))(fun_app$y (grp$ ?v1 )?v3 ))))):named a82 ))
(assert (! (forall ((?v0 A_b_prod_stream_set$ )(?v1 A_b_prod_stream_set$ )(?v2 A_b_prod_stream_a_stream_fun$ )(?v3 A_b_prod_stream_b_stream_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$x (relcompp$ (conversep$ (fun_app$y (grp$ ?v0 )?v2 )))(fun_app$z (grp$a ?v0 )?v3 ))(fun_app$x (relcompp$ (conversep$ (fun_app$y (grp$ ?v1 )?v2 )))(fun_app$z (grp$a ?v1 )?v3 ))))):named a83 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_b_fun$ )(?v3 A_b_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$f (conversep$d (grp$f ?v0 ?v2 ))(grp$f ?v0 ?v3 ))(relcompp$f (conversep$d (grp$f ?v1 ?v2 ))(grp$f ?v1 ?v3 ))))):named a84 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod_stream_set$ )(?v1 A_b_prod_stream_a_stream_prod_stream_set$ )(?v2 A_b_prod_stream_a_stream_prod_stream_a_stream_stream_fun$ )(?v3 A_b_prod_stream_a_stream_prod_stream_a_stream_stream_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$g (conversep$e (grp$e ?v0 ?v2 ))(grp$e ?v0 ?v3 ))(relcompp$g (conversep$e (grp$e ?v1 ?v2 ))(grp$e ?v1 ?v3 ))))):named a85 ))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_prod_stream_set$ )(?v1 A_b_prod_stream_b_stream_prod_stream_set$ )(?v2 A_b_prod_stream_b_stream_prod_stream_b_stream_stream_fun$ )(?v3 A_b_prod_stream_b_stream_prod_stream_b_stream_stream_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$h (conversep$f (grp$c ?v0 ?v2 ))(grp$c ?v0 ?v3 ))(relcompp$h (conversep$f (grp$c ?v1 ?v2 ))(grp$c ?v1 ?v3 ))))):named a86 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod_stream_set$ )(?v1 A_b_prod_stream_a_stream_prod_stream_set$ )(?v2 A_b_prod_stream_a_stream_prod_stream_a_stream_stream_fun$ )(?v3 A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$i (conversep$e (grp$e ?v0 ?v2 ))(grp$d ?v0 ?v3 ))(relcompp$i (conversep$e (grp$e ?v1 ?v2 ))(grp$d ?v1 ?v3 ))))):named a87 ))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_prod_stream_set$ )(?v1 A_b_prod_stream_b_stream_prod_stream_set$ )(?v2 A_b_prod_stream_b_stream_prod_stream_b_stream_stream_fun$ )(?v3 A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$j (conversep$f (grp$c ?v0 ?v2 ))(grp$b ?v0 ?v3 ))(relcompp$j (conversep$f (grp$c ?v1 ?v2 ))(grp$b ?v1 ?v3 ))))):named a88 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod_stream_set$ )(?v1 A_b_prod_stream_a_stream_prod_stream_set$ )(?v2 A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_fun$ )(?v3 A_b_prod_stream_a_stream_prod_stream_a_stream_stream_fun$ ))(=> (= ?v0 ?v1 )(= (relcompp$b (conversep$b (grp$d ?v0 ?v2 ))(grp$e ?v0 ?v3 ))(relcompp$b (conversep$b (grp$d ?v1 ?v2 ))(grp$e ?v1 ?v3 ))))):named a89 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod$ )(?v1 A_b_prod_stream_a_stream_prod_stream_set$ )(?v2 A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_fun$ ))(=> (member$c ?v0 (collect$i (case_prod$c (grp$d ?v1 ?v2 ))))(member$d (fst$c ?v0 )?v1 ))):named a90 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod$ )(?v1 A_b_prod_stream_a_stream_prod_stream_set$ )(?v2 A_b_prod_stream_a_stream_prod_stream_a_stream_stream_fun$ ))(=> (member$e ?v0 (collect$j (case_prod$d (grp$e ?v1 ?v2 ))))(member$d (fst$d ?v0 )?v1 ))):named a91 ))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod$ )(?v1 A_b_prod_stream_b_stream_prod_stream_set$ )(?v2 A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_fun$ ))(=> (member$f ?v0 (collect$k (case_prod$e (grp$b ?v1 ?v2 ))))(member$g (fst$e ?v0 )?v1 ))):named a92 ))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod$ )(?v1 A_b_prod_stream_b_stream_prod_stream_set$ )(?v2 A_b_prod_stream_b_stream_prod_stream_b_stream_stream_fun$ ))(=> (member$h ?v0 (collect$l (case_prod$f (grp$c ?v1 ?v2 ))))(member$g (fst$f ?v0 )?v1 ))):named a93 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod$ )(?v1 A_b_prod_stream_set$ )(?v2 A_b_prod_stream_a_stream_fun$ ))(=> (member$i ?v0 (collect$b (case_prod$b (fun_app$y (grp$ ?v1 )?v2 ))))(member$j (fst$a ?v0 )?v1 ))):named a94 ))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_prod$ )(?v1 A_b_prod_stream_set$ )(?v2 A_b_prod_stream_b_stream_fun$ ))(=> (member$k ?v0 (collect$a (case_prod$a (fun_app$z (grp$a ?v1 )?v2 ))))(member$j (fst$b ?v0 )?v1 ))):named a95 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_set$ )(?v2 A_b_fun$ ))(=> (member$l ?v0 (collect$ (case_prod$ (grp$f ?v1 ?v2 ))))(member$m (fst$ ?v0 )?v1 ))):named a96 ))
(check-sat )
;(get-unsat-core )
