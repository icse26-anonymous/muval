;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun p$ ()A_stream_bool_fun$ )
(declare-fun ev$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun alw$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun zero$ ()Enat$ )
(declare-fun epred$ (Enat$ )Enat$ )
(declare-fun omega$ ()A_stream$ )
(declare-fun scount$ (A_stream_bool_fun$ A_stream$ )Enat$ )
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$a (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$b (Enat_enat_bool_fun_fun$ Enat$ )Enat_bool_fun$ )
(declare-fun infinity$ ()Enat$ )
(assert (! (not (and (= (= (scount$ p$ omega$ )zero$ )(= infinity$ zero$ ))(=> (and (not (= (scount$ p$ omega$ )zero$ ))(not (= infinity$ zero$ )))(or (exists ((?v0 A_stream$ ))(and (= (epred$ (scount$ p$ omega$ ))(scount$ p$ ?v0 ))(and (= (epred$ infinity$ )infinity$ )(fun_app$ (alw$ (ev$ p$ ))?v0 ))))(= (epred$ (scount$ p$ omega$ ))(epred$ infinity$ )))))):named a0 ))
(assert (! (fun_app$ (ev$ p$ )omega$ ):named a1 ))
(assert (! (fun_app$ (alw$ (ev$ p$ ))omega$ ):named a2 ))
(assert (! (= (epred$ infinity$ )infinity$ ):named a3 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (ev$ (ev$ ?v0 ))(ev$ ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (alw$ (alw$ ?v0 ))(alw$ ?v0 ))):named a5 ))
(assert (! (= (epred$ zero$ )zero$ ):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (= (= ?v0 zero$ )(= ?v1 zero$ ))(=> (and (not (= ?v0 zero$ ))(not (= ?v1 zero$ )))(= (epred$ ?v0 )(epred$ ?v1 ))))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (not (= ?v0 zero$ ))(not (= ?v1 zero$ )))(= (= (epred$ ?v0 )(epred$ ?v1 ))(= ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )(and (forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (fun_app$a (fun_app$b ?v0 ?v3 )?v4 )(= (= ?v3 zero$ )(= ?v4 zero$ ))))(forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (and (fun_app$a (fun_app$b ?v0 ?v3 )?v4 )(and (not (= ?v3 zero$ ))(not (= ?v4 zero$ ))))(or (fun_app$a (fun_app$b ?v0 (epred$ ?v3 ))(epred$ ?v4 ))(= (epred$ ?v3 )(epred$ ?v4 )))))))(= ?v1 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )(forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (fun_app$a (fun_app$b ?v0 ?v3 )?v4 )(and (= (= ?v3 zero$ )(= ?v4 zero$ ))(=> (and (not (= ?v3 zero$ ))(not (= ?v4 zero$ )))(or (fun_app$a (fun_app$b ?v0 (epred$ ?v3 ))(epred$ ?v4 ))(= (epred$ ?v3 )(epred$ ?v4 ))))))))(= ?v1 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (fun_app$ (ev$ (alw$ ?v0 ))?v1 )(fun_app$ (alw$ (ev$ ?v0 ))?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_stream_bool_fun$ )(?v3 A_stream_bool_fun$ ))(=> (and (fun_app$ (alw$ ?v0 )?v1 )(forall ((?v4 A_stream$ ))(=> (fun_app$ ?v0 ?v4 )(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (fun_app$ (ev$ ?v2 )?v1 )(fun_app$ (ev$ ?v3 )?v1 )))):named a12 ))
(assert (! (not (= infinity$ zero$ )):named a13 ))
(assert (! (forall ((?v0 Enat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a14 ))
(assert (! (forall ((?v0 Enat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a15 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (fun_app$ (alw$ ?v0 )?v1 )(fun_app$ ?v0 ?v1 ))):named a16 ))
(check-sat )
;(get-unsat-core )
