;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_stream_a_stream_bool_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun y$ ()A$ )
(declare-fun xs$ ()A_stream$ )
(declare-fun ys$ ()A_stream$ )
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$a (A_stream_a_stream_bool_fun_fun$ A_stream$ )A_stream_bool_fun$ )
(declare-fun sinterleave$ (A_stream$ A_stream$ )A_stream$ )
(assert (! (not (and (= (shd$ xs$ )y$ )(= (stl$ xs$ )ys$ ))):named a0 ))
(assert (! (= xs$ (sCons$ y$ ys$ )):named a1 ))
(assert (! (forall ((?v0 A_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a2 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (=> (= ?v0 (sCons$ (shd$ ?v0 )(stl$ ?v0 )))false )false )):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (shd$ (sCons$ ?v0 ?v1 ))?v0 ):pattern ((sCons$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (stl$ (sCons$ ?v0 ?v1 ))?v1 ):pattern ((sCons$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$ (fun_app$a ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(fun_app$ (fun_app$a ?v0 (stl$ ?v3 ))(stl$ ?v4 ))))))(= ?v1 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a10 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (sinterleave$ ?v0 ?v1 )(sCons$ (shd$ ?v0 )(sinterleave$ ?v1 (stl$ ?v0 ))))):named a11 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (stl$ (sinterleave$ ?v0 ?v1 ))(sinterleave$ ?v1 (stl$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$ (sinterleave$ ?v0 ?v1 ))(shd$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_stream$ ))(! (= (sinterleave$ (sCons$ ?v0 ?v1 )?v2 )(sCons$ ?v0 (sinterleave$ ?v2 ?v1 ))):pattern ((sinterleave$ (sCons$ ?v0 ?v1 )?v2 )))):named a14 ))
(check-sat )
;(get-unsat-core )
