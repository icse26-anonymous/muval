;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Enat_set$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun p$ (A_stream$ )Bool )
(declare-fun uu$ ()Enat_bool_fun$ )
(declare-fun bot$ ()Enat_set$ )
(declare-fun sup$ (Enat_set$ Enat_set$ )Enat_set$ )
(declare-fun uua$ ()Enat_bool_fun$ )
(declare-fun uub$ (Enat$ )Enat_bool_fun$ )
(declare-fun uuc$ (Enat$ )Enat_bool_fun$ )
(declare-fun eSuc$ ()Enat_enat_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun zero$ ()Enat$ )
(declare-fun image$ (Enat_enat_fun$ Enat_set$ )Enat_set$ )
(declare-fun omega$ ()A_stream$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun insert$ (Enat$ Enat_set$ )Enat_set$ )
(declare-fun member$ (Enat$ Enat_set$ )Bool )
(declare-fun collect$ (Enat_bool_fun$ )Enat_set$ )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$a (Enat_enat_fun$ Enat$ )Enat$ )
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ uua$ ?v0 )(exists ((?v1 Nat$ ))(and (= ?v0 (enat$ ?v1 ))(p$ (sdrop$ ?v1 (stl$ omega$ )))))):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ uu$ ?v0 )(exists ((?v1 Nat$ ))(and (= ?v0 (enat$ ?v1 ))(p$ (sdrop$ ?v1 omega$ ))))):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (fun_app$ (uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )(= ?v1 ?v0 )):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (= (collect$ uu$ )(sup$ (ite (p$ omega$ )(insert$ zero$ bot$ )bot$ )(image$ eSuc$ (collect$ uua$ ))))):named a4 ))
(assert (! (forall ((?v0 Enat$ ))(= (collect$ (uub$ ?v0 ))(insert$ ?v0 bot$ ))):named a5 ))
(assert (! (forall ((?v0 Enat$ ))(= (collect$ (uuc$ ?v0 ))(insert$ ?v0 bot$ ))):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat_set$ )(?v2 Enat_set$ ))(= (sup$ (insert$ ?v0 ?v1 )?v2 )(insert$ ?v0 (sup$ ?v1 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat$ )(?v2 Enat_set$ ))(= (sup$ ?v0 (insert$ ?v1 ?v2 ))(insert$ ?v1 (sup$ ?v0 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ ))(= (= (sup$ ?v0 ?v1 )bot$ )(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a9 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat$ )(?v2 Enat_set$ ))(= (image$ ?v0 (insert$ ?v1 ?v2 ))(insert$ (fun_app$a ?v0 ?v1 )(image$ ?v0 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat_set$ )(?v2 Enat_enat_fun$ ))(=> (member$ ?v0 ?v1 )(= (insert$ (fun_app$a ?v2 ?v0 )(image$ ?v2 ?v1 ))(image$ ?v2 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ ))(member$ ?v0 (insert$ ?v0 bot$ ))):named a12 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ ))(= (= bot$ (sup$ ?v0 ?v1 ))(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a13 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ ))(= (= (sup$ ?v0 ?v1 )bot$ )(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a14 ))
(assert (! (forall ((?v0 Enat_set$ ))(= (sup$ ?v0 bot$ )?v0 )):named a15 ))
(assert (! (forall ((?v0 Enat_set$ ))(= (sup$ bot$ ?v0 )?v0 )):named a16 ))
(assert (! (forall ((?v0 Enat$ ))(= (member$ ?v0 bot$ )false )):named a17 ))
(assert (! (forall ((?v0 Enat_bool_fun$ ))(= (= bot$ (collect$ ?v0 ))(forall ((?v1 Enat$ ))(not (fun_app$ ?v0 ?v1 ))))):named a18 ))
(assert (! (forall ((?v0 Enat_set$ ))(= (forall ((?v1 Enat$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$ ))):named a19 ))
(assert (! (forall ((?v0 Enat_bool_fun$ ))(= (= (collect$ ?v0 )bot$ )(forall ((?v1 Enat$ ))(not (fun_app$ ?v0 ?v1 ))))):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat_enat_fun$ )(?v2 Enat$ )(?v3 Enat_set$ ))(=> (and (= ?v0 (fun_app$a ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$ ?v1 ?v3 )))):named a21 ))
(check-sat )
;(get-unsat-core )
