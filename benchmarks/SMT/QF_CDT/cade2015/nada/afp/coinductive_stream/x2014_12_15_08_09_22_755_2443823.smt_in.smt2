;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort Nat_a_stream_bool_fun_fun$ 0 )
(declare-sort A_stream_bool_fun_a_stream_bool_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_list$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun n$ ()Nat$ )
(declare-fun p$ ()A_stream_bool_fun$ )
(declare-fun ev$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun nxt$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun ev_at$ (A_stream_bool_fun$ )Nat_a_stream_bool_fun_fun$ )
(declare-fun omega$ ()A_stream$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun shift$ (A_list$ A_stream$ )A_stream$ )
(declare-fun sfirst$ (A_stream_bool_fun$ A_stream$ )Enat$ )
(declare-fun suntil$ (A_stream_bool_fun$ )A_stream_bool_fun_a_stream_bool_fun_fun$ )
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$a (Nat_a_stream_bool_fun_fun$ Nat$ )A_stream_bool_fun$ )
(declare-fun fun_app$b (A_stream_bool_fun_a_stream_bool_fun_fun$ A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun infinity$ ()Enat$ )
(assert (! (not (fun_app$ (ev$ p$ )omega$ )):named a0 ))
(assert (! (= (sfirst$ p$ omega$ )(enat$ n$ )):named a1 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= (sfirst$ p$ omega$ )(enat$ ?v0 ))false ))false ):named a2 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (ev$ (ev$ ?v0 ))(ev$ ?v0 ))):named a3 ))
(assert (! (less$ (sfirst$ p$ omega$ )infinity$ ):named a4 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_stream_bool_fun$ ))(=> (and (fun_app$ (ev$ ?v0 )?v1 )(forall ((?v3 A_stream$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ ?v2 ?v3 ))))(fun_app$ (ev$ ?v2 )?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (fun_app$ ?v0 ?v1 )(fun_app$ (ev$ ?v0 )?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(= (fun_app$ (ev$ ?v0 )?v1 )(exists ((?v2 Nat$ ))(fun_app$ (fun_app$a (ev_at$ ?v0 )?v2 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(= (fun_app$ (ev$ ?v0 )?v1 )(exists ((?v2 Nat$ ))(and (fun_app$ (fun_app$a (ev_at$ ?v0 )?v2 )?v1 )(forall ((?v3 Nat$ ))(=> (fun_app$ (fun_app$a (ev_at$ ?v0 )?v3 )?v1 )(= ?v3 ?v2 ))))))):named a8 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(! (= (fun_app$ (ev$ ?v0 )?v1 )(or (fun_app$ ?v0 ?v1 )(fun_app$ (nxt$ (ev$ ?v0 ))?v1 ))):pattern ((fun_app$ (ev$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(= (fun_app$ (ev$ (fun_app$b (suntil$ ?v0 )?v1 ))?v2 )(fun_app$ (ev$ ?v1 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(=> (fun_app$ (fun_app$b (suntil$ ?v0 )?v1 )?v2 )(fun_app$ (ev$ ?v1 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(= (fun_app$ (ev$ ?v0 )?v1 )(exists ((?v2 Nat$ ))(fun_app$ ?v0 (sdrop$ ?v2 ?v1 ))))):named a12 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_list$ ))(=> (fun_app$ (ev$ ?v0 )?v1 )(fun_app$ (ev$ ?v0 )(shift$ ?v2 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (fun_app$ (ev$ ?v0 )?v1 )(exists ((?v2 A_list$ )(?v3 A_stream$ ))(and (= ?v1 (shift$ ?v2 ?v3 ))(fun_app$ ?v0 ?v3 ))))):named a14 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 Nat$ )(?v2 A_stream$ )(?v3 Nat$ ))(=> (and (fun_app$ (fun_app$a (ev_at$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a (ev_at$ ?v0 )?v3 )?v2 ))(= ?v1 ?v3 ))):named a15 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 Nat$ )(?v2 A_stream$ ))(=> (fun_app$ (fun_app$a (ev_at$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (sdrop$ ?v1 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(=> (less$ (enat$ ?v0 )(sfirst$ ?v1 ?v2 ))(not (fun_app$ ?v1 (sdrop$ ?v0 ?v2 ))))):named a17 ))
(check-sat )
;(get-unsat-core )
