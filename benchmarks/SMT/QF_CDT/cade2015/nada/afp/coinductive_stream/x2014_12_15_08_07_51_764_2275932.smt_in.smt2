;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Nat_nat_fun_nat_a_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun f$ ()Nat_a_fun$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun comp$ (Nat_a_fun$ )Nat_nat_fun_nat_a_fun_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun of_seq$ (Nat_a_fun$ )A_stream$ )
(declare-fun fun_app$ (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$a (Nat_nat_fun_nat_a_fun_fun$ Nat_nat_fun$ )Nat_a_fun$ )
(declare-fun fun_app$b (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$c (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$d (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(assert (! (not (= (of_seq$ f$ )(sCons$ (fun_app$ f$ zero$ )(of_seq$ (fun_app$a (comp$ f$ )suc$ ))))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (comp$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$b suc$ ?v0 )(fun_app$b suc$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$b suc$ ?v0 )(fun_app$b suc$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$b suc$ ?v1 ))false )))false )):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$b suc$ ?v1 ))false )))false )):named a6 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$c (fun_app$d ?v0 ?v3 )zero$ ))(and (forall ((?v3 Nat$ ))(fun_app$c (fun_app$d ?v0 zero$ )(fun_app$b suc$ ?v3 )))(forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (fun_app$c (fun_app$d ?v0 ?v3 )?v4 )(fun_app$c (fun_app$d ?v0 (fun_app$b suc$ ?v3 ))(fun_app$b suc$ ?v4 ))))))(fun_app$c (fun_app$d ?v0 ?v1 )?v2 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= (fun_app$b suc$ ?v0 )zero$ )false )):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 (fun_app$b suc$ ?v1 ))(not (= ?v0 zero$ )))):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= zero$ (fun_app$b suc$ ?v0 ))false )):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (fun_app$b suc$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (fun_app$b suc$ ?v0 )(fun_app$b suc$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_a_fun$ )(?v3 Nat$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )?v2 )(= (fun_app$ ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$ ?v2 ?v3 )))):named a15 ))
(check-sat )
;(get-unsat-core )
