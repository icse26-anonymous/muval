;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_stream_a_stream_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_stream$ 0)
(declare-sort A_llist_stream$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun shd$a (A_llist_stream$)A_llist$)
(declare-fun stl$a (A_llist_stream$)A_llist_stream$)
(declare-fun sCons$a (A_llist$ A_llist_stream$ )A_llist_stream$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun uu$ ()A_a_bool_fun_fun$ )
(declare-fun xs$ ()A_stream$ )
(declare-fun bot$ ()A_set$ )
(declare-fun uua$ ()A_stream_a_stream_bool_fun_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun snth$ (A_llist_stream$ Nat$ )A_llist$ )
(declare-fun sset$ (A_stream$ )A_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lset$a (A_llist_llist$ )A_llist_set$ )
(declare-fun lsetp$ (A_llist_llist$ A_llist$ )Bool )
(declare-fun snth$a (A_stream$ Nat$ )A$ )
(declare-fun sset$a (A_llist_stream$ )A_llist_set$ )
(declare-fun lsetp$a (A_llist$ A$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lmember$ (A_llist$ A_llist_llist$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun smember$ (A_llist$ A_llist_stream$ )Bool )
(declare-fun fun_app$a (A_stream_a_stream_bool_fun_fun$ A_stream$ )A_stream_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$e (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$f (A_llist_a_bool_fun_fun$ A_llist$ )A_bool_fun$ )
(declare-fun fun_app$g (A_a_llist_bool_fun_fun$ A$ )A_llist_bool_fun$ )
(declare-fun lmember$a (A$ A_llist$ )Bool )
(declare-fun smember$a (A$ A_stream$ )Bool )
(declare-fun stream_all2$ (A_llist_a_llist_bool_fun_fun$ A_llist_stream$ A_llist_stream$ )Bool )
(declare-fun stream_all2$a (A_llist_a_bool_fun_fun$ A_llist_stream$ A_stream$ )Bool )
(declare-fun stream_all2$b (A_a_llist_bool_fun_fun$ A_stream$ A_llist_stream$ )Bool )
(declare-fun stream_all2$c (A_a_bool_fun_fun$ )A_stream_a_stream_bool_fun_fun$ )
(declare-fun llist_of_stream$ (A_stream$ )A_llist$ )
(declare-fun stream_of_llist$ (A_llist$ )A_stream$ )
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(! (= (fun_app$ (fun_app$a uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$b (fun_app$c uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uu$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (= (lset$ (llist_of_stream$ xs$ ))(sset$ xs$ ))):named a2 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (= (llist_of_stream$ ?v0 )(llist_of_stream$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (llist_of_stream$ ?v0 ))?v0 )):named a4 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (llist_of_stream$ ?v0 ))?v0 )):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_stream$ ))(! (= (smember$ ?v0 ?v1 )(member$ ?v0 (sset$a ?v1 ))):pattern ((smember$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (smember$a ?v0 ?v1 )(member$a ?v0 (sset$ ?v1 ))):pattern ((smember$a ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_stream$ ))(not (= (sset$ ?v0 )bot$ ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(= (member$ ?v0 (lset$a ?v1 ))(lmember$ ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$a ?v0 (lset$ ?v1 ))(lmember$a ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_stream$ ))(not (lnull$ (llist_of_stream$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_stream$ ))(not (lfinite$ (llist_of_stream$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(=> (member$ ?v0 (lset$a ?v1 ))(lsetp$ ?v1 ?v0 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (member$a ?v0 (lset$ ?v1 ))(lsetp$a ?v1 ?v0 ))):named a14 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ ))(=> (lsetp$ ?v0 ?v1 )(member$ ?v1 (lset$a ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (lsetp$a ?v0 ?v1 )(member$a ?v1 (lset$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lfinite$ ?v0 ))(= (llist_of_stream$ (stream_of_llist$ ?v0 ))?v0 ))):named a17 ))
(assert (! (forall ((?v0 A_llist_stream$ )(?v1 Nat$ ))(member$ (snth$ ?v0 ?v1 )(sset$a ?v0 ))):named a18 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 Nat$ ))(member$a (snth$a ?v0 ?v1 )(sset$ ?v0 ))):named a19 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_stream$ )(?v2 A_llist_stream$ )(?v3 A_llist_a_llist_bool_fun_fun$ ))(=> (and (stream_all2$ ?v0 ?v1 ?v2 )(forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (and (member$ ?v4 (sset$a ?v1 ))(and (member$ ?v5 (sset$a ?v2 ))(fun_app$d (fun_app$e ?v0 ?v4 )?v5 )))(fun_app$d (fun_app$e ?v3 ?v4 )?v5 ))))(stream_all2$ ?v3 ?v1 ?v2 ))):named a20 ))
(assert (! (forall ((?v0 A_llist_a_bool_fun_fun$ )(?v1 A_llist_stream$ )(?v2 A_stream$ )(?v3 A_llist_a_bool_fun_fun$ ))(=> (and (stream_all2$a ?v0 ?v1 ?v2 )(forall ((?v4 A_llist$ )(?v5 A$ ))(=> (and (member$ ?v4 (sset$a ?v1 ))(and (member$a ?v5 (sset$ ?v2 ))(fun_app$b (fun_app$f ?v0 ?v4 )?v5 )))(fun_app$b (fun_app$f ?v3 ?v4 )?v5 ))))(stream_all2$a ?v3 ?v1 ?v2 ))):named a21 ))
(assert (! (forall ((?v0 A_a_llist_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_llist_stream$ )(?v3 A_a_llist_bool_fun_fun$ ))(=> (and (stream_all2$b ?v0 ?v1 ?v2 )(forall ((?v4 A$ )(?v5 A_llist$ ))(=> (and (member$a ?v4 (sset$ ?v1 ))(and (member$ ?v5 (sset$a ?v2 ))(fun_app$d (fun_app$g ?v0 ?v4 )?v5 )))(fun_app$d (fun_app$g ?v3 ?v4 )?v5 ))))(stream_all2$b ?v3 ?v1 ?v2 ))):named a22 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (stream_all2$c ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$a ?v4 (sset$ ?v1 ))(and (member$a ?v5 (sset$ ?v2 ))(fun_app$b (fun_app$c ?v0 ?v4 )?v5 )))(fun_app$b (fun_app$c ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$a (stream_all2$c ?v3 )?v1 )?v2 ))):named a23 ))
(assert (! (forall ((?v0 A_llist$ ))(= (= (lset$ ?v0 )bot$ )(lnull$ ?v0 ))):named a24 ))
(assert (! (= (stream_all2$c uu$ )uua$ ):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a26 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a27 ))
(check-sat )
;(get-unsat-core )
