;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_list_nat_fun$ 0 )
(declare-sort B_list_nat_fun$ 0 )
(declare-sort Nat_list_nat_fun$ 0 )
(declare-sort A_a_prod_list_nat_fun$ 0 )
(declare-sort A_b_prod_list_nat_fun$ 0 )
(declare-sort B_a_prod_list_nat_fun$ 0 )
(declare-sort B_b_prod_list_nat_fun$ 0 )
(declare-sort Nat_a_prod_list_nat_fun$ 0 )
(declare-sort A_b_a_prod_prod_list_nat_fun$ 0 )
(declare-sort A_b_b_prod_prod_list_nat_fun$ 0 )
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_stream$ 0)
(declare-sort A_stream$ 0)
(declare-sort B_stream$ 0)
(declare-fun shd$ (A_b_prod_stream$)A_b_prod$)
(declare-fun stl$ (A_b_prod_stream$)A_b_prod_stream$)
(declare-fun sCons$ (A_b_prod$ A_b_prod_stream$ )A_b_prod_stream$)
(declare-fun shd$a (A_stream$)A$)
(declare-fun stl$a (A_stream$)A_stream$)
(declare-fun sCons$a (A$ A_stream$ )A_stream$)
(declare-fun shd$b (B_stream$)B$)
(declare-fun stl$b (B_stream$)B_stream$)
(declare-fun sCons$b (B$ B_stream$ )B_stream$)
(declare-sort A_list$ 0)
(declare-sort B_list$ 0)
(declare-sort A_b_prod_list$ 0)
(declare-sort Nat_a_prod$ 0)
(declare-sort Nat_a_prod_list$ 0)
(declare-sort B_b_prod$ 0)
(declare-sort B_b_prod_list$ 0)
(declare-sort B_a_prod$ 0)
(declare-sort B_a_prod_list$ 0)
(declare-sort A_a_prod$ 0)
(declare-sort A_a_prod_list$ 0)
(declare-sort Nat_list$ 0)
(declare-sort A_b_b_prod_prod$ 0)
(declare-sort A_b_b_prod_prod_list$ 0)
(declare-sort A_b_a_prod_prod$ 0)
(declare-sort A_b_a_prod_prod_list$ 0)
(declare-sort A_nat_a_prod_prod$ 0)
(declare-sort A_nat_a_prod_prod_list$ 0)
(declare-sort A_a_b_prod_prod$ 0)
(declare-sort A_a_b_prod_prod_list$ 0)
(declare-sort A_a_a_prod_prod$ 0)
(declare-sort A_a_a_prod_prod_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun nil$a ()B_list$)
(declare-fun hd$a (B_list$)B$)
(declare-fun tl$a (B_list$)B_list$)
(declare-fun cons$a (B$ B_list$ )B_list$)
(declare-fun nil$b ()A_b_prod_list$)
(declare-fun hd$b (A_b_prod_list$)A_b_prod$)
(declare-fun tl$b (A_b_prod_list$)A_b_prod_list$)
(declare-fun cons$b (A_b_prod$ A_b_prod_list$ )A_b_prod_list$)
(declare-fun fst$a (Nat_a_prod$)Nat$)
(declare-fun snd$a (Nat_a_prod$)A$)
(declare-fun pair$a (Nat$ A$ )Nat_a_prod$)
(declare-fun nil$c ()Nat_a_prod_list$)
(declare-fun hd$c (Nat_a_prod_list$)Nat_a_prod$)
(declare-fun tl$c (Nat_a_prod_list$)Nat_a_prod_list$)
(declare-fun cons$c (Nat_a_prod$ Nat_a_prod_list$ )Nat_a_prod_list$)
(declare-fun fst$b (B_b_prod$)B$)
(declare-fun snd$b (B_b_prod$)B$)
(declare-fun pair$b (B$ B$ )B_b_prod$)
(declare-fun nil$d ()B_b_prod_list$)
(declare-fun hd$d (B_b_prod_list$)B_b_prod$)
(declare-fun tl$d (B_b_prod_list$)B_b_prod_list$)
(declare-fun cons$d (B_b_prod$ B_b_prod_list$ )B_b_prod_list$)
(declare-fun fst$c (B_a_prod$)B$)
(declare-fun snd$c (B_a_prod$)A$)
(declare-fun pair$c (B$ A$ )B_a_prod$)
(declare-fun nil$e ()B_a_prod_list$)
(declare-fun hd$e (B_a_prod_list$)B_a_prod$)
(declare-fun tl$e (B_a_prod_list$)B_a_prod_list$)
(declare-fun cons$e (B_a_prod$ B_a_prod_list$ )B_a_prod_list$)
(declare-fun fst$d (A_a_prod$)A$)
(declare-fun snd$d (A_a_prod$)A$)
(declare-fun pair$d (A$ A$ )A_a_prod$)
(declare-fun nil$f ()A_a_prod_list$)
(declare-fun hd$f (A_a_prod_list$)A_a_prod$)
(declare-fun tl$f (A_a_prod_list$)A_a_prod_list$)
(declare-fun cons$f (A_a_prod$ A_a_prod_list$ )A_a_prod_list$)
(declare-fun nil$g ()Nat_list$)
(declare-fun hd$g (Nat_list$)Nat$)
(declare-fun tl$g (Nat_list$)Nat_list$)
(declare-fun cons$g (Nat$ Nat_list$ )Nat_list$)
(declare-fun fst$e (A_b_b_prod_prod$)A$)
(declare-fun snd$e (A_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$e (A$ B_b_prod$ )A_b_b_prod_prod$)
(declare-fun nil$h ()A_b_b_prod_prod_list$)
(declare-fun hd$h (A_b_b_prod_prod_list$)A_b_b_prod_prod$)
(declare-fun tl$h (A_b_b_prod_prod_list$)A_b_b_prod_prod_list$)
(declare-fun cons$h (A_b_b_prod_prod$ A_b_b_prod_prod_list$ )A_b_b_prod_prod_list$)
(declare-fun fst$f (A_b_a_prod_prod$)A$)
(declare-fun snd$f (A_b_a_prod_prod$)B_a_prod$)
(declare-fun pair$f (A$ B_a_prod$ )A_b_a_prod_prod$)
(declare-fun nil$i ()A_b_a_prod_prod_list$)
(declare-fun hd$i (A_b_a_prod_prod_list$)A_b_a_prod_prod$)
(declare-fun tl$i (A_b_a_prod_prod_list$)A_b_a_prod_prod_list$)
(declare-fun cons$i (A_b_a_prod_prod$ A_b_a_prod_prod_list$ )A_b_a_prod_prod_list$)
(declare-fun fst$g (A_nat_a_prod_prod$)A$)
(declare-fun snd$g (A_nat_a_prod_prod$)Nat_a_prod$)
(declare-fun pair$g (A$ Nat_a_prod$ )A_nat_a_prod_prod$)
(declare-fun nil$j ()A_nat_a_prod_prod_list$)
(declare-fun hd$j (A_nat_a_prod_prod_list$)A_nat_a_prod_prod$)
(declare-fun tl$j (A_nat_a_prod_prod_list$)A_nat_a_prod_prod_list$)
(declare-fun cons$j (A_nat_a_prod_prod$ A_nat_a_prod_prod_list$ )A_nat_a_prod_prod_list$)
(declare-fun fst$h (A_a_b_prod_prod$)A$)
(declare-fun snd$h (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$h (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-fun nil$k ()A_a_b_prod_prod_list$)
(declare-fun hd$k (A_a_b_prod_prod_list$)A_a_b_prod_prod$)
(declare-fun tl$k (A_a_b_prod_prod_list$)A_a_b_prod_prod_list$)
(declare-fun cons$k (A_a_b_prod_prod$ A_a_b_prod_prod_list$ )A_a_b_prod_prod_list$)
(declare-fun fst$i (A_a_a_prod_prod$)A$)
(declare-fun snd$i (A_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$i (A$ A_a_prod$ )A_a_a_prod_prod$)
(declare-fun nil$l ()A_a_a_prod_prod_list$)
(declare-fun hd$l (A_a_a_prod_prod_list$)A_a_a_prod_prod$)
(declare-fun tl$l (A_a_a_prod_prod_list$)A_a_a_prod_prod_list$)
(declare-fun cons$l (A_a_a_prod_prod$ A_a_a_prod_prod_list$ )A_a_a_prod_prod_list$)
(declare-sort A_a_prod_stream$ 0)
(declare-sort B_a_prod_stream$ 0)
(declare-sort B_b_prod_stream$ 0)
(declare-fun shd$c (A_a_prod_stream$)A_a_prod$)
(declare-fun stl$c (A_a_prod_stream$)A_a_prod_stream$)
(declare-fun sCons$c (A_a_prod$ A_a_prod_stream$ )A_a_prod_stream$)
(declare-fun shd$d (B_a_prod_stream$)B_a_prod$)
(declare-fun stl$d (B_a_prod_stream$)B_a_prod_stream$)
(declare-fun sCons$d (B_a_prod$ B_a_prod_stream$ )B_a_prod_stream$)
(declare-fun shd$e (B_b_prod_stream$)B_b_prod$)
(declare-fun stl$e (B_b_prod_stream$)B_b_prod_stream$)
(declare-fun sCons$e (B_b_prod$ B_b_prod_stream$ )B_b_prod_stream$)
(declare-sort A_b_prod_a_prod$ 0)
(declare-sort A_b_prod_a_prod_list$ 0)
(declare-fun fst$j (A_b_prod_a_prod$)A_b_prod$)
(declare-fun snd$j (A_b_prod_a_prod$)A$)
(declare-fun pair$j (A_b_prod$ A$ )A_b_prod_a_prod$)
(declare-fun nil$m ()A_b_prod_a_prod_list$)
(declare-fun hd$m (A_b_prod_a_prod_list$)A_b_prod_a_prod$)
(declare-fun tl$m (A_b_prod_a_prod_list$)A_b_prod_a_prod_list$)
(declare-fun cons$m (A_b_prod_a_prod$ A_b_prod_a_prod_list$ )A_b_prod_a_prod_list$)
(declare-sort A_b_prod_a_prod_stream$ 0)
(declare-fun shd$f (A_b_prod_a_prod_stream$)A_b_prod_a_prod$)
(declare-fun stl$f (A_b_prod_a_prod_stream$)A_b_prod_a_prod_stream$)
(declare-fun sCons$f (A_b_prod_a_prod$ A_b_prod_a_prod_stream$ )A_b_prod_a_prod_stream$)
(declare-sort A_b_prod_b_prod$ 0)
(declare-sort A_b_prod_b_prod_list$ 0)
(declare-fun fst$k (A_b_prod_b_prod$)A_b_prod$)
(declare-fun snd$k (A_b_prod_b_prod$)B$)
(declare-fun pair$k (A_b_prod$ B$ )A_b_prod_b_prod$)
(declare-fun nil$n ()A_b_prod_b_prod_list$)
(declare-fun hd$n (A_b_prod_b_prod_list$)A_b_prod_b_prod$)
(declare-fun tl$n (A_b_prod_b_prod_list$)A_b_prod_b_prod_list$)
(declare-fun cons$n (A_b_prod_b_prod$ A_b_prod_b_prod_list$ )A_b_prod_b_prod_list$)
(declare-sort A_b_prod_b_prod_stream$ 0)
(declare-sort A_a_b_prod_prod_stream$ 0)
(declare-fun shd$g (A_b_prod_b_prod_stream$)A_b_prod_b_prod$)
(declare-fun stl$g (A_b_prod_b_prod_stream$)A_b_prod_b_prod_stream$)
(declare-fun sCons$g (A_b_prod_b_prod$ A_b_prod_b_prod_stream$ )A_b_prod_b_prod_stream$)
(declare-fun shd$h (A_a_b_prod_prod_stream$)A_a_b_prod_prod$)
(declare-fun stl$h (A_a_b_prod_prod_stream$)A_a_b_prod_prod_stream$)
(declare-fun sCons$h (A_a_b_prod_prod$ A_a_b_prod_prod_stream$ )A_a_b_prod_prod_stream$)
(declare-sort B_a_b_prod_prod$ 0)
(declare-sort B_a_b_prod_prod_list$ 0)
(declare-fun fst$l (B_a_b_prod_prod$)B$)
(declare-fun snd$l (B_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$l (B$ A_b_prod$ )B_a_b_prod_prod$)
(declare-fun nil$o ()B_a_b_prod_prod_list$)
(declare-fun hd$o (B_a_b_prod_prod_list$)B_a_b_prod_prod$)
(declare-fun tl$o (B_a_b_prod_prod_list$)B_a_b_prod_prod_list$)
(declare-fun cons$o (B_a_b_prod_prod$ B_a_b_prod_prod_list$ )B_a_b_prod_prod_list$)
(declare-sort B_a_b_prod_prod_stream$ 0)
(declare-fun shd$i (B_a_b_prod_prod_stream$)B_a_b_prod_prod$)
(declare-fun stl$i (B_a_b_prod_prod_stream$)B_a_b_prod_prod_stream$)
(declare-fun sCons$i (B_a_b_prod_prod$ B_a_b_prod_prod_stream$ )B_a_b_prod_prod_stream$)
(declare-sort A_b_prod_a_b_prod_prod$ 0)
(declare-sort A_b_prod_a_b_prod_prod_list$ 0)
(declare-fun fst$m (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun snd$m (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$m (A_b_prod$ A_b_prod$ )A_b_prod_a_b_prod_prod$)
(declare-fun nil$p ()A_b_prod_a_b_prod_prod_list$)
(declare-fun hd$p (A_b_prod_a_b_prod_prod_list$)A_b_prod_a_b_prod_prod$)
(declare-fun tl$p (A_b_prod_a_b_prod_prod_list$)A_b_prod_a_b_prod_prod_list$)
(declare-fun cons$p (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_list$)
(declare-sort A_b_prod_a_b_prod_prod_stream$ 0)
(declare-sort Nat_a_prod_stream$ 0)
(declare-sort A_nat_a_prod_prod_stream$ 0)
(declare-fun shd$j (A_b_prod_a_b_prod_prod_stream$)A_b_prod_a_b_prod_prod$)
(declare-fun stl$j (A_b_prod_a_b_prod_prod_stream$)A_b_prod_a_b_prod_prod_stream$)
(declare-fun sCons$j (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_stream$ )A_b_prod_a_b_prod_prod_stream$)
(declare-fun shd$k (Nat_a_prod_stream$)Nat_a_prod$)
(declare-fun stl$k (Nat_a_prod_stream$)Nat_a_prod_stream$)
(declare-fun sCons$k (Nat_a_prod$ Nat_a_prod_stream$ )Nat_a_prod_stream$)
(declare-fun shd$l (A_nat_a_prod_prod_stream$)A_nat_a_prod_prod$)
(declare-fun stl$l (A_nat_a_prod_prod_stream$)A_nat_a_prod_prod_stream$)
(declare-fun sCons$l (A_nat_a_prod_prod$ A_nat_a_prod_prod_stream$ )A_nat_a_prod_prod_stream$)
(declare-sort Nat_b_prod$ 0)
(declare-sort Nat_b_prod_list$ 0)
(declare-sort Nat_nat_a_prod_prod$ 0)
(declare-sort Nat_nat_a_prod_prod_list$ 0)
(declare-sort Nat_b_b_prod_prod$ 0)
(declare-sort Nat_b_b_prod_prod_list$ 0)
(declare-sort Nat_b_a_prod_prod$ 0)
(declare-sort Nat_b_a_prod_prod_list$ 0)
(declare-sort Nat_a_b_prod_prod$ 0)
(declare-sort Nat_a_b_prod_prod_list$ 0)
(declare-sort Nat_a_a_prod_prod$ 0)
(declare-sort Nat_a_a_prod_prod_list$ 0)
(declare-sort Nat_nat_prod$ 0)
(declare-sort Nat_nat_prod_list$ 0)
(declare-sort Nat_a_b_b_prod_prod_prod$ 0)
(declare-sort Nat_a_b_b_prod_prod_prod_list$ 0)
(declare-sort Nat_a_b_a_prod_prod_prod$ 0)
(declare-sort Nat_a_b_a_prod_prod_prod_list$ 0)
(declare-fun fst$n (Nat_b_prod$)Nat$)
(declare-fun snd$n (Nat_b_prod$)B$)
(declare-fun pair$n (Nat$ B$ )Nat_b_prod$)
(declare-fun nil$q ()Nat_b_prod_list$)
(declare-fun hd$q (Nat_b_prod_list$)Nat_b_prod$)
(declare-fun tl$q (Nat_b_prod_list$)Nat_b_prod_list$)
(declare-fun cons$q (Nat_b_prod$ Nat_b_prod_list$ )Nat_b_prod_list$)
(declare-fun fst$o (Nat_nat_a_prod_prod$)Nat$)
(declare-fun snd$o (Nat_nat_a_prod_prod$)Nat_a_prod$)
(declare-fun pair$o (Nat$ Nat_a_prod$ )Nat_nat_a_prod_prod$)
(declare-fun nil$r ()Nat_nat_a_prod_prod_list$)
(declare-fun hd$r (Nat_nat_a_prod_prod_list$)Nat_nat_a_prod_prod$)
(declare-fun tl$r (Nat_nat_a_prod_prod_list$)Nat_nat_a_prod_prod_list$)
(declare-fun cons$r (Nat_nat_a_prod_prod$ Nat_nat_a_prod_prod_list$ )Nat_nat_a_prod_prod_list$)
(declare-fun fst$p (Nat_b_b_prod_prod$)Nat$)
(declare-fun snd$p (Nat_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$p (Nat$ B_b_prod$ )Nat_b_b_prod_prod$)
(declare-fun nil$s ()Nat_b_b_prod_prod_list$)
(declare-fun hd$s (Nat_b_b_prod_prod_list$)Nat_b_b_prod_prod$)
(declare-fun tl$s (Nat_b_b_prod_prod_list$)Nat_b_b_prod_prod_list$)
(declare-fun cons$s (Nat_b_b_prod_prod$ Nat_b_b_prod_prod_list$ )Nat_b_b_prod_prod_list$)
(declare-fun fst$q (Nat_b_a_prod_prod$)Nat$)
(declare-fun snd$q (Nat_b_a_prod_prod$)B_a_prod$)
(declare-fun pair$q (Nat$ B_a_prod$ )Nat_b_a_prod_prod$)
(declare-fun nil$t ()Nat_b_a_prod_prod_list$)
(declare-fun hd$t (Nat_b_a_prod_prod_list$)Nat_b_a_prod_prod$)
(declare-fun tl$t (Nat_b_a_prod_prod_list$)Nat_b_a_prod_prod_list$)
(declare-fun cons$t (Nat_b_a_prod_prod$ Nat_b_a_prod_prod_list$ )Nat_b_a_prod_prod_list$)
(declare-fun fst$r (Nat_a_b_prod_prod$)Nat$)
(declare-fun snd$r (Nat_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$r (Nat$ A_b_prod$ )Nat_a_b_prod_prod$)
(declare-fun nil$u ()Nat_a_b_prod_prod_list$)
(declare-fun hd$u (Nat_a_b_prod_prod_list$)Nat_a_b_prod_prod$)
(declare-fun tl$u (Nat_a_b_prod_prod_list$)Nat_a_b_prod_prod_list$)
(declare-fun cons$u (Nat_a_b_prod_prod$ Nat_a_b_prod_prod_list$ )Nat_a_b_prod_prod_list$)
(declare-fun fst$s (Nat_a_a_prod_prod$)Nat$)
(declare-fun snd$s (Nat_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$s (Nat$ A_a_prod$ )Nat_a_a_prod_prod$)
(declare-fun nil$v ()Nat_a_a_prod_prod_list$)
(declare-fun hd$v (Nat_a_a_prod_prod_list$)Nat_a_a_prod_prod$)
(declare-fun tl$v (Nat_a_a_prod_prod_list$)Nat_a_a_prod_prod_list$)
(declare-fun cons$v (Nat_a_a_prod_prod$ Nat_a_a_prod_prod_list$ )Nat_a_a_prod_prod_list$)
(declare-fun fst$t (Nat_nat_prod$)Nat$)
(declare-fun snd$t (Nat_nat_prod$)Nat$)
(declare-fun pair$t (Nat$ Nat$ )Nat_nat_prod$)
(declare-fun nil$w ()Nat_nat_prod_list$)
(declare-fun hd$w (Nat_nat_prod_list$)Nat_nat_prod$)
(declare-fun tl$w (Nat_nat_prod_list$)Nat_nat_prod_list$)
(declare-fun cons$w (Nat_nat_prod$ Nat_nat_prod_list$ )Nat_nat_prod_list$)
(declare-fun fst$u (Nat_a_b_b_prod_prod_prod$)Nat$)
(declare-fun snd$u (Nat_a_b_b_prod_prod_prod$)A_b_b_prod_prod$)
(declare-fun pair$u (Nat$ A_b_b_prod_prod$ )Nat_a_b_b_prod_prod_prod$)
(declare-fun nil$x ()Nat_a_b_b_prod_prod_prod_list$)
(declare-fun hd$x (Nat_a_b_b_prod_prod_prod_list$)Nat_a_b_b_prod_prod_prod$)
(declare-fun tl$x (Nat_a_b_b_prod_prod_prod_list$)Nat_a_b_b_prod_prod_prod_list$)
(declare-fun cons$x (Nat_a_b_b_prod_prod_prod$ Nat_a_b_b_prod_prod_prod_list$ )Nat_a_b_b_prod_prod_prod_list$)
(declare-fun fst$v (Nat_a_b_a_prod_prod_prod$)Nat$)
(declare-fun snd$v (Nat_a_b_a_prod_prod_prod$)A_b_a_prod_prod$)
(declare-fun pair$v (Nat$ A_b_a_prod_prod$ )Nat_a_b_a_prod_prod_prod$)
(declare-fun nil$y ()Nat_a_b_a_prod_prod_prod_list$)
(declare-fun hd$y (Nat_a_b_a_prod_prod_prod_list$)Nat_a_b_a_prod_prod_prod$)
(declare-fun tl$y (Nat_a_b_a_prod_prod_prod_list$)Nat_a_b_a_prod_prod_prod_list$)
(declare-fun cons$y (Nat_a_b_a_prod_prod_prod$ Nat_a_b_a_prod_prod_prod_list$ )Nat_a_b_a_prod_prod_prod_list$)
(declare-fun us$ ()B_list$ )
(declare-fun xs$ ()A_list$ )
(declare-fun ys$ ()A_stream$ )
(declare-fun zs$ ()B_stream$ )
(declare-fun min$ (Nat$ Nat$ )Nat$ )
(declare-fun zip$ (A_list$ B_list$ )A_b_prod_list$ )
(declare-fun size$ ()A_list_nat_fun$ )
(declare-fun szip$ (A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun zip$a (A_list$ A_list$ )A_a_prod_list$ )
(declare-fun zip$b (B_list$ A_list$ )B_a_prod_list$ )
(declare-fun zip$c (B_list$ B_list$ )B_b_prod_list$ )
(declare-fun zip$d (Nat_list$ A_list$ )Nat_a_prod_list$ )
(declare-fun zip$e (A_list$ Nat_a_prod_list$ )A_nat_a_prod_prod_list$ )
(declare-fun zip$f (A_list$ B_b_prod_list$ )A_b_b_prod_prod_list$ )
(declare-fun zip$g (A_list$ B_a_prod_list$ )A_b_a_prod_prod_list$ )
(declare-fun zip$h (A_list$ A_b_prod_list$ )A_a_b_prod_prod_list$ )
(declare-fun zip$i (A_list$ A_a_prod_list$ )A_a_a_prod_prod_list$ )
(declare-fun zip$j (A_b_prod_list$ A_list$ )A_b_prod_a_prod_list$ )
(declare-fun zip$k (A_b_prod_list$ B_list$ )A_b_prod_b_prod_list$ )
(declare-fun zip$l (B_list$ A_b_prod_list$ )B_a_b_prod_prod_list$ )
(declare-fun zip$m (A_b_prod_list$ A_b_prod_list$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun shift$ (A_list$ A_stream$ )A_stream$ )
(declare-fun size$a ()B_list_nat_fun$ )
(declare-fun size$b ()Nat_a_prod_list_nat_fun$ )
(declare-fun size$c ()B_b_prod_list_nat_fun$ )
(declare-fun size$d ()B_a_prod_list_nat_fun$ )
(declare-fun size$e ()A_b_prod_list_nat_fun$ )
(declare-fun size$f ()A_a_prod_list_nat_fun$ )
(declare-fun size$g ()Nat_list_nat_fun$ )
(declare-fun size$h ()A_b_b_prod_prod_list_nat_fun$ )
(declare-fun size$i ()A_b_a_prod_prod_list_nat_fun$ )
(declare-fun size$j (A_nat_a_prod_prod_list$ )Nat$ )
(declare-fun size$k (A_a_b_prod_prod_list$ )Nat$ )
(declare-fun size$l (A_a_a_prod_prod_list$ )Nat$ )
(declare-fun size$m (Nat_b_prod_list$ )Nat$ )
(declare-fun size$n (Nat_nat_a_prod_prod_list$ )Nat$ )
(declare-fun size$o (Nat_b_b_prod_prod_list$ )Nat$ )
(declare-fun size$p (Nat_b_a_prod_prod_list$ )Nat$ )
(declare-fun size$q (Nat_a_b_prod_prod_list$ )Nat$ )
(declare-fun size$r (Nat_a_a_prod_prod_list$ )Nat$ )
(declare-fun size$s (Nat_nat_prod_list$ )Nat$ )
(declare-fun size$t (Nat_a_b_b_prod_prod_prod_list$ )Nat$ )
(declare-fun size$u (Nat_a_b_a_prod_prod_prod_list$ )Nat$ )
(declare-fun stake$ (Nat$ A_b_prod_stream$ )A_b_prod_list$ )
(declare-fun szip$a (A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun szip$b (B_stream$ A_stream$ )B_a_prod_stream$ )
(declare-fun szip$c (B_stream$ B_stream$ )B_b_prod_stream$ )
(declare-fun szip$d (A_b_prod_stream$ A_stream$ )A_b_prod_a_prod_stream$ )
(declare-fun szip$e (A_b_prod_stream$ B_stream$ )A_b_prod_b_prod_stream$ )
(declare-fun szip$f (A_stream$ A_b_prod_stream$ )A_a_b_prod_prod_stream$ )
(declare-fun szip$g (B_stream$ A_b_prod_stream$ )B_a_b_prod_prod_stream$ )
(declare-fun szip$h (A_b_prod_stream$ A_b_prod_stream$ )A_b_prod_a_b_prod_prod_stream$ )
(declare-fun szip$i (A_stream$ Nat_a_prod_stream$ )A_nat_a_prod_prod_stream$ )
(declare-fun rotate$ (Nat$ A_list$ )A_list$ )
(declare-fun shift$a (B_list$ B_stream$ )B_stream$ )
(declare-fun shift$b (A_b_prod_list$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun stake$a (Nat$ A_stream$ )A_list$ )
(declare-fun stake$b (Nat$ B_stream$ )B_list$ )
(declare-fun stake$c (Nat$ A_a_prod_stream$ )A_a_prod_list$ )
(declare-fun stake$d (Nat$ B_a_prod_stream$ )B_a_prod_list$ )
(declare-fun stake$e (Nat$ B_b_prod_stream$ )B_b_prod_list$ )
(declare-fun stake$f (Nat$ A_b_prod_a_prod_stream$ )A_b_prod_a_prod_list$ )
(declare-fun stake$g (Nat$ A_b_prod_b_prod_stream$ )A_b_prod_b_prod_list$ )
(declare-fun stake$h (Nat$ A_a_b_prod_prod_stream$ )A_a_b_prod_prod_list$ )
(declare-fun stake$i (Nat$ B_a_b_prod_prod_stream$ )B_a_b_prod_prod_list$ )
(declare-fun stake$j (Nat$ A_b_prod_a_b_prod_prod_stream$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun stake$k (Nat$ A_nat_a_prod_prod_stream$ )A_nat_a_prod_prod_list$ )
(declare-fun stake$l (Nat$ Nat_a_prod_stream$ )Nat_a_prod_list$ )
(declare-fun fun_app$ (A_list_nat_fun$ A_list$ )Nat$ )
(declare-fun remdups$ (Nat_list$ )Nat_list$ )
(declare-fun rotate$a (Nat$ B_list$ )B_list$ )
(declare-fun rotate$b (Nat$ Nat_a_prod_list$ )Nat_a_prod_list$ )
(declare-fun rotate$c (Nat$ B_b_prod_list$ )B_b_prod_list$ )
(declare-fun rotate$d (Nat$ B_a_prod_list$ )B_a_prod_list$ )
(declare-fun rotate$e (Nat$ A_b_prod_list$ )A_b_prod_list$ )
(declare-fun rotate$f (Nat$ A_a_prod_list$ )A_a_prod_list$ )
(declare-fun rotate$g (Nat$ Nat_list$ )Nat_list$ )
(declare-fun rotate$h (Nat$ A_b_b_prod_prod_list$ )A_b_b_prod_prod_list$ )
(declare-fun rotate$i (Nat$ A_b_a_prod_prod_list$ )A_b_a_prod_prod_list$ )
(declare-fun rotate1$ (A_list$ )A_list$ )
(declare-fun fun_app$a (B_list_nat_fun$ B_list$ )Nat$ )
(declare-fun fun_app$b (Nat_a_prod_list_nat_fun$ Nat_a_prod_list$ )Nat$ )
(declare-fun fun_app$c (B_b_prod_list_nat_fun$ B_b_prod_list$ )Nat$ )
(declare-fun fun_app$d (B_a_prod_list_nat_fun$ B_a_prod_list$ )Nat$ )
(declare-fun fun_app$e (A_b_prod_list_nat_fun$ A_b_prod_list$ )Nat$ )
(declare-fun fun_app$f (A_a_prod_list_nat_fun$ A_a_prod_list$ )Nat$ )
(declare-fun fun_app$g (Nat_list_nat_fun$ Nat_list$ )Nat$ )
(declare-fun fun_app$h (A_b_b_prod_prod_list_nat_fun$ A_b_b_prod_prod_list$ )Nat$ )
(declare-fun fun_app$i (A_b_a_prod_prod_list_nat_fun$ A_b_a_prod_prod_list$ )Nat$ )
(declare-fun remdups$a (Nat_a_prod_list$ )Nat_a_prod_list$ )
(declare-fun remdups$b (B_b_prod_list$ )B_b_prod_list$ )
(declare-fun remdups$c (B_a_prod_list$ )B_a_prod_list$ )
(declare-fun remdups$d (A_b_prod_list$ )A_b_prod_list$ )
(declare-fun remdups$e (A_a_prod_list$ )A_a_prod_list$ )
(declare-fun remdups$f (A_list$ )A_list$ )
(declare-fun remdups$g (B_list$ )B_list$ )
(declare-fun rotate1$a (B_list$ )B_list$ )
(declare-fun rotate1$b (Nat_a_prod_list$ )Nat_a_prod_list$ )
(declare-fun rotate1$c (B_b_prod_list$ )B_b_prod_list$ )
(declare-fun rotate1$d (B_a_prod_list$ )B_a_prod_list$ )
(declare-fun rotate1$e (A_b_prod_list$ )A_b_prod_list$ )
(declare-fun rotate1$f (A_a_prod_list$ )A_a_prod_list$ )
(declare-fun rotate1$g (Nat_list$ )Nat_list$ )
(declare-fun rotate1$h (A_b_b_prod_prod_list$ )A_b_b_prod_prod_list$ )
(declare-fun rotate1$i (A_b_a_prod_prod_list$ )A_b_a_prod_prod_list$ )
(declare-fun enumerate$ (Nat$ A_list$ )Nat_a_prod_list$ )
(declare-fun enumerate$a (Nat$ B_list$ )Nat_b_prod_list$ )
(declare-fun enumerate$b (Nat$ Nat_a_prod_list$ )Nat_nat_a_prod_prod_list$ )
(declare-fun enumerate$c (Nat$ B_b_prod_list$ )Nat_b_b_prod_prod_list$ )
(declare-fun enumerate$d (Nat$ B_a_prod_list$ )Nat_b_a_prod_prod_list$ )
(declare-fun enumerate$e (Nat$ A_b_prod_list$ )Nat_a_b_prod_prod_list$ )
(declare-fun enumerate$f (Nat$ A_a_prod_list$ )Nat_a_a_prod_prod_list$ )
(declare-fun enumerate$g (Nat$ Nat_list$ )Nat_nat_prod_list$ )
(declare-fun enumerate$h (Nat$ A_b_b_prod_prod_list$ )Nat_a_b_b_prod_prod_prod_list$ )
(declare-fun enumerate$i (Nat$ A_b_a_prod_prod_list$ )Nat_a_b_a_prod_prod_prod_list$ )
(declare-fun is_measure$ (A_list_nat_fun$ )Bool )
(declare-fun is_measure$a (B_list_nat_fun$ )Bool )
(declare-fun is_measure$b (Nat_a_prod_list_nat_fun$ )Bool )
(declare-fun is_measure$c (B_b_prod_list_nat_fun$ )Bool )
(declare-fun is_measure$d (B_a_prod_list_nat_fun$ )Bool )
(declare-fun is_measure$e (A_b_prod_list_nat_fun$ )Bool )
(declare-fun is_measure$f (A_a_prod_list_nat_fun$ )Bool )
(declare-fun is_measure$g (Nat_list_nat_fun$ )Bool )
(declare-fun is_measure$h (A_b_b_prod_prod_list_nat_fun$ )Bool )
(declare-fun is_measure$i (A_b_a_prod_prod_list_nat_fun$ )Bool )
(assert (! (not (= (szip$ (shift$ xs$ ys$ )(shift$a us$ zs$ ))(shift$b (zip$ xs$ us$ )(szip$ ys$ zs$ )))):named a0 ))
(assert (! (= (fun_app$ size$ xs$ )(fun_app$a size$a us$ )):named a1 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (shift$ ?v0 ?v1 )(shift$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a2 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (= (shift$a ?v0 ?v1 )(shift$a ?v0 ?v2 ))(= ?v1 ?v2 ))):named a3 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_stream$ ))(= (= (shift$b ?v0 ?v1 )(shift$b ?v0 ?v2 ))(= ?v1 ?v2 ))):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (fun_app$ size$ ?v0 )(fun_app$ size$ ?v1 )))(= (= ?v0 ?v1 )false ))):named a5 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(=> (not (= (fun_app$a size$a ?v0 )(fun_app$a size$a ?v1 )))(= (= ?v0 ?v1 )false ))):named a6 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ )(?v1 Nat_a_prod_list$ ))(=> (not (= (fun_app$b size$b ?v0 )(fun_app$b size$b ?v1 )))(= (= ?v0 ?v1 )false ))):named a7 ))
(assert (! (forall ((?v0 B_b_prod_list$ )(?v1 B_b_prod_list$ ))(=> (not (= (fun_app$c size$c ?v0 )(fun_app$c size$c ?v1 )))(= (= ?v0 ?v1 )false ))):named a8 ))
(assert (! (forall ((?v0 B_a_prod_list$ )(?v1 B_a_prod_list$ ))(=> (not (= (fun_app$d size$d ?v0 )(fun_app$d size$d ?v1 )))(= (= ?v0 ?v1 )false ))):named a9 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(=> (not (= (fun_app$e size$e ?v0 )(fun_app$e size$e ?v1 )))(= (= ?v0 ?v1 )false ))):named a10 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_a_prod_list$ ))(=> (not (= (fun_app$f size$f ?v0 )(fun_app$f size$f ?v1 )))(= (= ?v0 ?v1 )false ))):named a11 ))
(assert (! (forall ((?v0 Nat_list$ )(?v1 Nat_list$ ))(=> (not (= (fun_app$g size$g ?v0 )(fun_app$g size$g ?v1 )))(= (= ?v0 ?v1 )false ))):named a12 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_list$ )(?v1 A_b_b_prod_prod_list$ ))(=> (not (= (fun_app$h size$h ?v0 )(fun_app$h size$h ?v1 )))(= (= ?v0 ?v1 )false ))):named a13 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_list$ )(?v1 A_b_a_prod_prod_list$ ))(=> (not (= (fun_app$i size$i ?v0 )(fun_app$i size$i ?v1 )))(= (= ?v0 ?v1 )false ))):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_list$ ))(= (fun_app$ size$ ?v1 )?v0 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 B_list$ ))(= (fun_app$a size$a ?v1 )?v0 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 Nat_a_prod_list$ ))(= (fun_app$b size$b ?v1 )?v0 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 B_b_prod_list$ ))(= (fun_app$c size$c ?v1 )?v0 ))):named a18 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 B_a_prod_list$ ))(= (fun_app$d size$d ?v1 )?v0 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_b_prod_list$ ))(= (fun_app$e size$e ?v1 )?v0 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_a_prod_list$ ))(= (fun_app$f size$f ?v1 )?v0 ))):named a21 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 Nat_list$ ))(= (fun_app$g size$g ?v1 )?v0 ))):named a22 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_b_b_prod_prod_list$ ))(= (fun_app$h size$h ?v1 )?v0 ))):named a23 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_b_a_prod_prod_list$ ))(= (fun_app$i size$i ?v1 )?v0 ))):named a24 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (fun_app$ size$ ?v0 )(fun_app$ size$ ?v1 )))(not (= ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(=> (not (= (fun_app$a size$a ?v0 )(fun_app$a size$a ?v1 )))(not (= ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ )(?v1 Nat_a_prod_list$ ))(=> (not (= (fun_app$b size$b ?v0 )(fun_app$b size$b ?v1 )))(not (= ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 B_b_prod_list$ )(?v1 B_b_prod_list$ ))(=> (not (= (fun_app$c size$c ?v0 )(fun_app$c size$c ?v1 )))(not (= ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 B_a_prod_list$ )(?v1 B_a_prod_list$ ))(=> (not (= (fun_app$d size$d ?v0 )(fun_app$d size$d ?v1 )))(not (= ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(=> (not (= (fun_app$e size$e ?v0 )(fun_app$e size$e ?v1 )))(not (= ?v0 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_a_prod_list$ ))(=> (not (= (fun_app$f size$f ?v0 )(fun_app$f size$f ?v1 )))(not (= ?v0 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 Nat_list$ )(?v1 Nat_list$ ))(=> (not (= (fun_app$g size$g ?v0 )(fun_app$g size$g ?v1 )))(not (= ?v0 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_list$ )(?v1 A_b_b_prod_prod_list$ ))(=> (not (= (fun_app$h size$h ?v0 )(fun_app$h size$h ?v1 )))(not (= ?v0 ?v1 )))):named a33 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_list$ )(?v1 A_b_a_prod_prod_list$ ))(=> (not (= (fun_app$i size$i ?v0 )(fun_app$i size$i ?v1 )))(not (= ?v0 ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (fun_app$f size$f (zip$a ?v0 ?v1 ))(min$ (fun_app$ size$ ?v0 )(fun_app$ size$ ?v1 )))):named a35 ))
(assert (! (forall ((?v0 A_list$ )(?v1 B_list$ ))(= (fun_app$e size$e (zip$ ?v0 ?v1 ))(min$ (fun_app$ size$ ?v0 )(fun_app$a size$a ?v1 )))):named a36 ))
(assert (! (forall ((?v0 B_list$ )(?v1 A_list$ ))(= (fun_app$d size$d (zip$b ?v0 ?v1 ))(min$ (fun_app$a size$a ?v0 )(fun_app$ size$ ?v1 )))):named a37 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(= (fun_app$c size$c (zip$c ?v0 ?v1 ))(min$ (fun_app$a size$a ?v0 )(fun_app$a size$a ?v1 )))):named a38 ))
(assert (! (forall ((?v0 Nat_list$ )(?v1 A_list$ ))(= (fun_app$b size$b (zip$d ?v0 ?v1 ))(min$ (fun_app$g size$g ?v0 )(fun_app$ size$ ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat_a_prod_list$ ))(= (size$j (zip$e ?v0 ?v1 ))(min$ (fun_app$ size$ ?v0 )(fun_app$b size$b ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_list$ )(?v1 B_b_prod_list$ ))(= (fun_app$h size$h (zip$f ?v0 ?v1 ))(min$ (fun_app$ size$ ?v0 )(fun_app$c size$c ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A_list$ )(?v1 B_a_prod_list$ ))(= (fun_app$i size$i (zip$g ?v0 ?v1 ))(min$ (fun_app$ size$ ?v0 )(fun_app$d size$d ?v1 )))):named a42 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_b_prod_list$ ))(= (size$k (zip$h ?v0 ?v1 ))(min$ (fun_app$ size$ ?v0 )(fun_app$e size$e ?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_a_prod_list$ ))(= (size$l (zip$i ?v0 ?v1 ))(min$ (fun_app$ size$ ?v0 )(fun_app$f size$f ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_list$ ))(= (fun_app$ size$ (rotate1$ ?v0 ))(fun_app$ size$ ?v0 ))):named a45 ))
(assert (! (forall ((?v0 B_list$ ))(= (fun_app$a size$a (rotate1$a ?v0 ))(fun_app$a size$a ?v0 ))):named a46 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ ))(= (fun_app$b size$b (rotate1$b ?v0 ))(fun_app$b size$b ?v0 ))):named a47 ))
(assert (! (forall ((?v0 B_b_prod_list$ ))(= (fun_app$c size$c (rotate1$c ?v0 ))(fun_app$c size$c ?v0 ))):named a48 ))
(assert (! (forall ((?v0 B_a_prod_list$ ))(= (fun_app$d size$d (rotate1$d ?v0 ))(fun_app$d size$d ?v0 ))):named a49 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (fun_app$e size$e (rotate1$e ?v0 ))(fun_app$e size$e ?v0 ))):named a50 ))
(assert (! (forall ((?v0 A_a_prod_list$ ))(= (fun_app$f size$f (rotate1$f ?v0 ))(fun_app$f size$f ?v0 ))):named a51 ))
(assert (! (forall ((?v0 Nat_list$ ))(= (fun_app$g size$g (rotate1$g ?v0 ))(fun_app$g size$g ?v0 ))):named a52 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_list$ ))(= (fun_app$h size$h (rotate1$h ?v0 ))(fun_app$h size$h ?v0 ))):named a53 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_list$ ))(= (fun_app$i size$i (rotate1$i ?v0 ))(fun_app$i size$i ?v0 ))):named a54 ))
(assert (! (is_measure$ size$ ):named a55 ))
(assert (! (is_measure$a size$a ):named a56 ))
(assert (! (is_measure$b size$b ):named a57 ))
(assert (! (is_measure$c size$c ):named a58 ))
(assert (! (is_measure$d size$d ):named a59 ))
(assert (! (is_measure$e size$e ):named a60 ))
(assert (! (is_measure$f size$f ):named a61 ))
(assert (! (is_measure$g size$g ):named a62 ))
(assert (! (is_measure$h size$h ):named a63 ))
(assert (! (is_measure$i size$i ):named a64 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (stake$ ?v0 (szip$ ?v1 ?v2 ))(zip$ (stake$a ?v0 ?v1 )(stake$b ?v0 ?v2 )))):named a65 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stake$c ?v0 (szip$a ?v1 ?v2 ))(zip$a (stake$a ?v0 ?v1 )(stake$a ?v0 ?v2 )))):named a66 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (stake$d ?v0 (szip$b ?v1 ?v2 ))(zip$b (stake$b ?v0 ?v1 )(stake$a ?v0 ?v2 )))):named a67 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (stake$e ?v0 (szip$c ?v1 ?v2 ))(zip$c (stake$b ?v0 ?v1 )(stake$b ?v0 ?v2 )))):named a68 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ )(?v2 A_stream$ ))(= (stake$f ?v0 (szip$d ?v1 ?v2 ))(zip$j (stake$ ?v0 ?v1 )(stake$a ?v0 ?v2 )))):named a69 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ )(?v2 B_stream$ ))(= (stake$g ?v0 (szip$e ?v1 ?v2 ))(zip$k (stake$ ?v0 ?v1 )(stake$b ?v0 ?v2 )))):named a70 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 A_b_prod_stream$ ))(= (stake$h ?v0 (szip$f ?v1 ?v2 ))(zip$h (stake$a ?v0 ?v1 )(stake$ ?v0 ?v2 )))):named a71 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 A_b_prod_stream$ ))(= (stake$i ?v0 (szip$g ?v1 ?v2 ))(zip$l (stake$b ?v0 ?v1 )(stake$ ?v0 ?v2 )))):named a72 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_stream$ ))(= (stake$j ?v0 (szip$h ?v1 ?v2 ))(zip$m (stake$ ?v0 ?v1 )(stake$ ?v0 ?v2 )))):named a73 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 Nat_a_prod_stream$ ))(= (stake$k ?v0 (szip$i ?v1 ?v2 ))(zip$e (stake$a ?v0 ?v1 )(stake$l ?v0 ?v2 )))):named a74 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (fun_app$b size$b (enumerate$ ?v0 ?v1 ))(fun_app$ size$ ?v1 ))):named a75 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_list$ ))(= (size$m (enumerate$a ?v0 ?v1 ))(fun_app$a size$a ?v1 ))):named a76 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_prod_list$ ))(= (size$n (enumerate$b ?v0 ?v1 ))(fun_app$b size$b ?v1 ))):named a77 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_list$ ))(= (size$o (enumerate$c ?v0 ?v1 ))(fun_app$c size$c ?v1 ))):named a78 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_list$ ))(= (size$p (enumerate$d ?v0 ?v1 ))(fun_app$d size$d ?v1 ))):named a79 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_list$ ))(= (size$q (enumerate$e ?v0 ?v1 ))(fun_app$e size$e ?v1 ))):named a80 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_list$ ))(= (size$r (enumerate$f ?v0 ?v1 ))(fun_app$f size$f ?v1 ))):named a81 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_list$ ))(= (size$s (enumerate$g ?v0 ?v1 ))(fun_app$g size$g ?v1 ))):named a82 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_b_prod_prod_list$ ))(= (size$t (enumerate$h ?v0 ?v1 ))(fun_app$h size$h ?v1 ))):named a83 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_a_prod_prod_list$ ))(= (size$u (enumerate$i ?v0 ?v1 ))(fun_app$i size$i ?v1 ))):named a84 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (fun_app$ size$ (rotate$ ?v0 ?v1 ))(fun_app$ size$ ?v1 ))):named a85 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_list$ ))(= (fun_app$a size$a (rotate$a ?v0 ?v1 ))(fun_app$a size$a ?v1 ))):named a86 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_prod_list$ ))(= (fun_app$b size$b (rotate$b ?v0 ?v1 ))(fun_app$b size$b ?v1 ))):named a87 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_list$ ))(= (fun_app$c size$c (rotate$c ?v0 ?v1 ))(fun_app$c size$c ?v1 ))):named a88 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_list$ ))(= (fun_app$d size$d (rotate$d ?v0 ?v1 ))(fun_app$d size$d ?v1 ))):named a89 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_list$ ))(= (fun_app$e size$e (rotate$e ?v0 ?v1 ))(fun_app$e size$e ?v1 ))):named a90 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_list$ ))(= (fun_app$f size$f (rotate$f ?v0 ?v1 ))(fun_app$f size$f ?v1 ))):named a91 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_list$ ))(= (fun_app$g size$g (rotate$g ?v0 ?v1 ))(fun_app$g size$g ?v1 ))):named a92 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_b_prod_prod_list$ ))(= (fun_app$h size$h (rotate$h ?v0 ?v1 ))(fun_app$h size$h ?v1 ))):named a93 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_a_prod_prod_list$ ))(= (fun_app$i size$i (rotate$i ?v0 ?v1 ))(fun_app$i size$i ?v1 ))):named a94 ))
(assert (! (forall ((?v0 Nat_list$ ))(= (= (fun_app$g size$g (remdups$ ?v0 ))(fun_app$g size$g ?v0 ))(= (remdups$ ?v0 )?v0 ))):named a95 ))
(assert (! (forall ((?v0 Nat_a_prod_list$ ))(= (= (fun_app$b size$b (remdups$a ?v0 ))(fun_app$b size$b ?v0 ))(= (remdups$a ?v0 )?v0 ))):named a96 ))
(assert (! (forall ((?v0 B_b_prod_list$ ))(= (= (fun_app$c size$c (remdups$b ?v0 ))(fun_app$c size$c ?v0 ))(= (remdups$b ?v0 )?v0 ))):named a97 ))
(assert (! (forall ((?v0 B_a_prod_list$ ))(= (= (fun_app$d size$d (remdups$c ?v0 ))(fun_app$d size$d ?v0 ))(= (remdups$c ?v0 )?v0 ))):named a98 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (= (fun_app$e size$e (remdups$d ?v0 ))(fun_app$e size$e ?v0 ))(= (remdups$d ?v0 )?v0 ))):named a99 ))
(assert (! (forall ((?v0 A_a_prod_list$ ))(= (= (fun_app$f size$f (remdups$e ?v0 ))(fun_app$f size$f ?v0 ))(= (remdups$e ?v0 )?v0 ))):named a100 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (fun_app$ size$ (remdups$f ?v0 ))(fun_app$ size$ ?v0 ))(= (remdups$f ?v0 )?v0 ))):named a101 ))
(assert (! (forall ((?v0 B_list$ ))(= (= (fun_app$a size$a (remdups$g ?v0 ))(fun_app$a size$a ?v0 ))(= (remdups$g ?v0 )?v0 ))):named a102 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_prod_stream$ ))(= (fun_app$b size$b (stake$l ?v0 ?v1 ))?v0 )):named a103 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_stream$ ))(= (fun_app$c size$c (stake$e ?v0 ?v1 ))?v0 )):named a104 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_stream$ ))(= (fun_app$d size$d (stake$d ?v0 ?v1 ))?v0 )):named a105 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ ))(= (fun_app$e size$e (stake$ ?v0 ?v1 ))?v0 )):named a106 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_stream$ ))(= (fun_app$f size$f (stake$c ?v0 ?v1 ))?v0 )):named a107 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (fun_app$ size$ (stake$a ?v0 ?v1 ))?v0 )):named a108 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(= (fun_app$a size$a (stake$b ?v0 ?v1 ))?v0 )):named a109 ))
(assert (! (forall ((?v0 B_list$ ))(= (remdups$g (remdups$g ?v0 ))(remdups$g ?v0 ))):named a110 ))
(assert (! (forall ((?v0 A_list$ ))(= (remdups$f (remdups$f ?v0 ))(remdups$f ?v0 ))):named a111 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_list$ ))(= (rotate1$a (rotate$a ?v0 ?v1 ))(rotate$a ?v0 (rotate1$a ?v1 )))):named a112 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (rotate1$ (rotate$ ?v0 ?v1 ))(rotate$ ?v0 (rotate1$ ?v1 )))):named a113 ))
(assert (! (forall ((?v0 B_list_nat_fun$ ))(! (= (is_measure$a ?v0 )(exists ((?v1 B_list_nat_fun$ ))(= ?v0 ?v1 ))):pattern ((is_measure$a ?v0 )))):named a114 ))
(assert (! (forall ((?v0 A_list_nat_fun$ ))(! (= (is_measure$ ?v0 )(exists ((?v1 A_list_nat_fun$ ))(= ?v0 ?v1 ))):pattern ((is_measure$ ?v0 )))):named a115 ))
(assert (! (forall ((?v0 B_list_nat_fun$ ))(=> (and (is_measure$a ?v0 )(forall ((?v1 B_list_nat_fun$ ))(=> (= ?v0 ?v1 )false )))false )):named a116 ))
(assert (! (forall ((?v0 A_list_nat_fun$ ))(=> (and (is_measure$ ?v0 )(forall ((?v1 A_list_nat_fun$ ))(=> (= ?v0 ?v1 )false )))false )):named a117 ))
(assert (! (forall ((?v0 B_list_nat_fun$ ))(is_measure$a ?v0 )):named a118 ))
(assert (! (forall ((?v0 A_list_nat_fun$ ))(is_measure$ ?v0 )):named a119 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (min$ (min$ ?v0 ?v1 )?v1 )(min$ ?v0 ?v1 ))):named a120 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (min$ ?v0 (min$ ?v0 ?v1 ))(min$ ?v0 ?v1 ))):named a121 ))
(assert (! (forall ((?v0 Nat$ ))(= (min$ ?v0 ?v0 )?v0 )):named a122 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (min$ (min$ ?v0 ?v1 )?v2 )(min$ ?v0 (min$ ?v1 ?v2 )))):named a123 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (min$ ?v0 (min$ ?v1 ?v2 ))(min$ ?v1 (min$ ?v0 ?v2 )))):named a124 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (min$ ?v0 ?v1 )(min$ ?v1 ?v0 ))):named a125 ))
(check-sat )
;(get-unsat-core )
