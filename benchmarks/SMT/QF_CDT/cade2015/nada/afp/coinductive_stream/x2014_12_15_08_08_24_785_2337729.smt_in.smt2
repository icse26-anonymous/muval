;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_prod_set$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort B_a_prod_set$ 0 )
(declare-sort B_b_prod_set$ 0 )
(declare-sort A_a_a_prod_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_a_prod_fun$ 0 )
(declare-sort A_b_stream_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort B_b_b_prod_fun$ 0 )
(declare-sort B_b_stream_fun$ 0 )
(declare-sort B_stream_a_fun$ 0 )
(declare-sort B_stream_b_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort Nat_a_a_prod_fun$ 0 )
(declare-sort Nat_a_b_prod_fun$ 0 )
(declare-sort Nat_a_stream_fun$ 0 )
(declare-sort Nat_b_a_prod_fun$ 0 )
(declare-sort Nat_b_b_prod_fun$ 0 )
(declare-sort Nat_b_stream_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort B_b_prod_bool_fun$ 0 )
(declare-sort A_a_b_prod_prod_set$ 0 )
(declare-sort A_b_b_prod_prod_set$ 0 )
(declare-sort B_a_b_prod_prod_set$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort B_a_prod_b_a_prod_fun$ 0 )
(declare-sort B_a_prod_b_b_prod_fun$ 0 )
(declare-sort B_b_prod_b_b_prod_fun$ 0 )
(declare-sort B_stream_b_stream_fun$ 0 )
(declare-sort A_a_b_prod_bool_fun_fun$ 0 )
(declare-sort A_b_b_prod_bool_fun_fun$ 0 )
(declare-sort B_a_b_prod_bool_fun_fun$ 0 )
(declare-sort Nat_a_b_prod_stream_fun$ 0 )
(declare-sort Nat_b_stream_stream_fun$ 0 )
(declare-sort A_b_prod_a_a_b_prod_prod_fun$ 0 )
(declare-sort A_b_prod_b_a_b_prod_prod_fun$ 0 )
(declare-sort B_b_prod_a_b_b_prod_prod_fun$ 0 )
(declare-sort B_b_prod_b_a_b_prod_prod_fun$ 0 )
(declare-sort A_a_fun_a_a_prod_a_a_prod_fun_fun$ 0 )
(declare-sort A_a_fun_b_a_prod_b_a_prod_fun_fun$ 0 )
(declare-sort B_b_fun_a_b_prod_a_b_prod_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_prod_b_b_prod_fun_fun$ 0 )
(declare-sort A_a_b_prod_prod_a_a_b_prod_prod_fun$ 0 )
(declare-sort A_b_b_prod_prod_a_b_b_prod_prod_fun$ 0 )
(declare-sort A_b_prod_a_prod_a_b_prod_a_prod_fun$ 0 )
(declare-sort A_b_prod_b_prod_a_b_prod_b_prod_fun$ 0 )
(declare-sort A_b_prod_stream_a_b_prod_stream_fun$ 0 )
(declare-sort A_stream_stream_a_stream_stream_fun$ 0 )
(declare-sort B_a_b_prod_prod_b_a_b_prod_prod_fun$ 0 )
(declare-sort B_b_b_prod_prod_b_b_b_prod_prod_fun$ 0 )
(declare-sort B_b_prod_stream_b_b_prod_stream_fun$ 0 )
(declare-sort B_stream_stream_b_stream_stream_fun$ 0 )
(declare-sort A_b_prod_stream_stream_a_b_prod_stream_stream_fun$ 0 )
(declare-sort B_stream_stream_stream_b_stream_stream_stream_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun_a_a_b_prod_prod_a_a_b_prod_prod_fun_fun$ 0 )
(declare-sort B_b_prod_b_b_prod_fun_a_b_b_prod_prod_a_b_b_prod_prod_fun_fun$ 0 )
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_stream$ 0)
(declare-sort A_stream$ 0)
(declare-sort B_stream$ 0)
(declare-fun shd$ (A_b_prod_stream$)A_b_prod$)
(declare-fun stl$ (A_b_prod_stream$)A_b_prod_stream$)
(declare-fun sCons$ (A_b_prod$ A_b_prod_stream$ )A_b_prod_stream$)
(declare-fun shd$a (A_stream$)A$)
(declare-fun stl$a (A_stream$)A_stream$)
(declare-fun sCons$a (A$ A_stream$ )A_stream$)
(declare-fun shd$b (B_stream$)B$)
(declare-fun stl$b (B_stream$)B_stream$)
(declare-fun sCons$b (B$ B_stream$ )B_stream$)
(declare-sort B_a_b_prod_prod$ 0)
(declare-fun fst$a (B_a_b_prod_prod$)B$)
(declare-fun snd$a (B_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$a (B$ A_b_prod$ )B_a_b_prod_prod$)
(declare-sort B_a_b_prod_prod_stream$ 0)
(declare-fun shd$c (B_a_b_prod_prod_stream$)B_a_b_prod_prod$)
(declare-fun stl$c (B_a_b_prod_prod_stream$)B_a_b_prod_prod_stream$)
(declare-fun sCons$c (B_a_b_prod_prod$ B_a_b_prod_prod_stream$ )B_a_b_prod_prod_stream$)
(declare-sort B_a_prod$ 0)
(declare-fun fst$b (B_a_prod$)B$)
(declare-fun snd$b (B_a_prod$)A$)
(declare-fun pair$b (B$ A$ )B_a_prod$)
(declare-sort B_a_prod_stream$ 0)
(declare-fun shd$d (B_a_prod_stream$)B_a_prod$)
(declare-fun stl$d (B_a_prod_stream$)B_a_prod_stream$)
(declare-fun sCons$d (B_a_prod$ B_a_prod_stream$ )B_a_prod_stream$)
(declare-sort B_b_prod$ 0)
(declare-fun fst$c (B_b_prod$)B$)
(declare-fun snd$c (B_b_prod$)B$)
(declare-fun pair$c (B$ B$ )B_b_prod$)
(declare-sort B_b_prod_stream$ 0)
(declare-fun shd$e (B_b_prod_stream$)B_b_prod$)
(declare-fun stl$e (B_b_prod_stream$)B_b_prod_stream$)
(declare-fun sCons$e (B_b_prod$ B_b_prod_stream$ )B_b_prod_stream$)
(declare-sort A_b_b_prod_prod$ 0)
(declare-fun fst$d (A_b_b_prod_prod$)A$)
(declare-fun snd$d (A_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$d (A$ B_b_prod$ )A_b_b_prod_prod$)
(declare-sort A_b_b_prod_prod_stream$ 0)
(declare-fun shd$f (A_b_b_prod_prod_stream$)A_b_b_prod_prod$)
(declare-fun stl$f (A_b_b_prod_prod_stream$)A_b_b_prod_prod_stream$)
(declare-fun sCons$f (A_b_b_prod_prod$ A_b_b_prod_prod_stream$ )A_b_b_prod_prod_stream$)
(declare-sort A_a_b_prod_prod$ 0)
(declare-fun fst$e (A_a_b_prod_prod$)A$)
(declare-fun snd$e (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$e (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-sort A_a_b_prod_prod_stream$ 0)
(declare-fun shd$g (A_a_b_prod_prod_stream$)A_a_b_prod_prod$)
(declare-fun stl$g (A_a_b_prod_prod_stream$)A_a_b_prod_prod_stream$)
(declare-fun sCons$g (A_a_b_prod_prod$ A_a_b_prod_prod_stream$ )A_a_b_prod_prod_stream$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$f (A_a_prod$)A$)
(declare-fun snd$f (A_a_prod$)A$)
(declare-fun pair$f (A$ A$ )A_a_prod$)
(declare-sort A_a_prod_stream$ 0)
(declare-sort B_stream_stream$ 0)
(declare-sort A_b_prod_stream_stream$ 0)
(declare-sort B_stream_stream_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-fun shd$h (A_a_prod_stream$)A_a_prod$)
(declare-fun stl$h (A_a_prod_stream$)A_a_prod_stream$)
(declare-fun sCons$h (A_a_prod$ A_a_prod_stream$ )A_a_prod_stream$)
(declare-fun shd$i (B_stream_stream$)B_stream$)
(declare-fun stl$i (B_stream_stream$)B_stream_stream$)
(declare-fun sCons$i (B_stream$ B_stream_stream$ )B_stream_stream$)
(declare-fun shd$j (A_b_prod_stream_stream$)A_b_prod_stream$)
(declare-fun stl$j (A_b_prod_stream_stream$)A_b_prod_stream_stream$)
(declare-fun sCons$j (A_b_prod_stream$ A_b_prod_stream_stream$ )A_b_prod_stream_stream$)
(declare-fun shd$k (B_stream_stream_stream$)B_stream_stream$)
(declare-fun stl$k (B_stream_stream_stream$)B_stream_stream_stream$)
(declare-fun sCons$k (B_stream_stream$ B_stream_stream_stream$ )B_stream_stream_stream$)
(declare-fun shd$l (A_stream_stream$)A_stream$)
(declare-fun stl$l (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$l (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-sort B_b_b_prod_prod$ 0)
(declare-fun fst$g (B_b_b_prod_prod$)B$)
(declare-fun snd$g (B_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$g (B$ B_b_prod$ )B_b_b_prod_prod$)
(declare-sort B_b_b_prod_prod_stream$ 0)
(declare-fun shd$m (B_b_b_prod_prod_stream$)B_b_b_prod_prod$)
(declare-fun stl$m (B_b_b_prod_prod_stream$)B_b_b_prod_prod_stream$)
(declare-fun sCons$m (B_b_b_prod_prod$ B_b_b_prod_prod_stream$ )B_b_b_prod_prod_stream$)
(declare-sort A_b_prod_b_prod$ 0)
(declare-fun fst$h (A_b_prod_b_prod$)A_b_prod$)
(declare-fun snd$h (A_b_prod_b_prod$)B$)
(declare-fun pair$h (A_b_prod$ B$ )A_b_prod_b_prod$)
(declare-sort A_b_prod_b_prod_stream$ 0)
(declare-fun shd$n (A_b_prod_b_prod_stream$)A_b_prod_b_prod$)
(declare-fun stl$n (A_b_prod_b_prod_stream$)A_b_prod_b_prod_stream$)
(declare-fun sCons$n (A_b_prod_b_prod$ A_b_prod_b_prod_stream$ )A_b_prod_b_prod_stream$)
(declare-sort A_b_prod_a_prod$ 0)
(declare-fun fst$i (A_b_prod_a_prod$)A_b_prod$)
(declare-fun snd$i (A_b_prod_a_prod$)A$)
(declare-fun pair$i (A_b_prod$ A$ )A_b_prod_a_prod$)
(declare-sort A_b_prod_a_prod_stream$ 0)
(declare-fun shd$o (A_b_prod_a_prod_stream$)A_b_prod_a_prod$)
(declare-fun stl$o (A_b_prod_a_prod_stream$)A_b_prod_a_prod_stream$)
(declare-fun sCons$o (A_b_prod_a_prod$ A_b_prod_a_prod_stream$ )A_b_prod_a_prod_stream$)
(declare-fun b$ ()B$ )
(declare-fun id$ ()B_b_fun$ )
(declare-fun uu$ ()A_a_b_prod_fun$ )
(declare-fun xs$ ()A_stream$ )
(declare-fun id$a ()A_a_fun$ )
(declare-fun id$b ()A_b_prod_a_b_prod_fun$ )
(declare-fun id$c ()B_stream_b_stream_fun$ )
(declare-fun id$d ()B_b_prod_b_b_prod_fun$ )
(declare-fun id$e ()A_b_prod_stream_a_b_prod_stream_fun$ )
(declare-fun id$f ()B_stream_stream_b_stream_stream_fun$ )
(declare-fun id$g ()A_stream_a_stream_fun$ )
(declare-fun id$h ()B_b_prod_stream_b_b_prod_stream_fun$ )
(declare-fun id$i ()A_b_prod_stream_stream_a_b_prod_stream_stream_fun$ )
(declare-fun id$j ()B_stream_stream_stream_b_stream_stream_stream_fun$ )
(declare-fun id$k ()A_stream_stream_a_stream_stream_fun$ )
(declare-fun id$l ()B_a_prod_b_a_prod_fun$ )
(declare-fun id$m ()A_a_prod_a_a_prod_fun$ )
(declare-fun uua$ (B$ )A_b_prod_b_a_b_prod_prod_fun$ )
(declare-fun uub$ (B$ )A_b_a_prod_fun$ )
(declare-fun uuc$ (A$ )B_b_prod_a_b_b_prod_prod_fun$ )
(declare-fun uud$ (A$ )A_b_prod_a_a_b_prod_prod_fun$ )
(declare-fun uue$ (A$ )A_a_a_prod_fun$ )
(declare-fun uuf$ (B$ )B_b_b_prod_fun$ )
(declare-fun uug$ (A$ )B_a_b_prod_fun$ )
(declare-fun uuh$ ()A_a_fun$ )
(declare-fun uui$ ()B_b_fun$ )
(declare-fun uuj$ ()A_b_prod_a_b_prod_fun$ )
(declare-fun uuk$ (B_a_b_prod_prod_set$ )B_a_b_prod_bool_fun_fun$ )
(declare-fun uul$ (B_a_prod_set$ )B_a_bool_fun_fun$ )
(declare-fun uum$ (A_b_b_prod_prod_set$ )A_b_b_prod_bool_fun_fun$ )
(declare-fun uun$ (A_a_b_prod_prod_set$ )A_a_b_prod_bool_fun_fun$ )
(declare-fun uuo$ (A_a_prod_set$ )A_a_bool_fun_fun$ )
(declare-fun uup$ (B_b_prod_set$ )B_b_bool_fun_fun$ )
(declare-fun uuq$ (A_b_prod_set$ )A_b_bool_fun_fun$ )
(declare-fun uur$ (B$ )Nat_b_fun$ )
(declare-fun uus$ (A$ )Nat_a_fun$ )
(declare-fun uut$ (B_stream$ )Nat_b_stream_fun$ )
(declare-fun uuu$ (A_b_prod$ )Nat_a_b_prod_fun$ )
(declare-fun uuv$ (B_b_prod$ )Nat_b_b_prod_fun$ )
(declare-fun uuw$ (A_stream$ )Nat_a_stream_fun$ )
(declare-fun uux$ (B_stream_stream$ )Nat_b_stream_stream_fun$ )
(declare-fun uuy$ (B_a_prod$ )Nat_b_a_prod_fun$ )
(declare-fun uuz$ (A_a_prod$ )Nat_a_a_prod_fun$ )
(declare-fun uva$ (A_b_prod_stream$ )Nat_a_b_prod_stream_fun$ )
(declare-fun smap$ (A_a_b_prod_fun$ A_stream$ )A_b_prod_stream$ )
(declare-fun szip$ (A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun apsnd$ (A_b_fun$ )B_a_prod_b_b_prod_fun$ )
(declare-fun smap$a (A_b_prod_b_a_b_prod_prod_fun$ A_b_prod_stream$ )B_a_b_prod_prod_stream$ )
(declare-fun smap$b (A_b_a_prod_fun$ A_stream$ )B_a_prod_stream$ )
(declare-fun smap$c (B_b_prod_a_b_b_prod_prod_fun$ B_b_prod_stream$ )A_b_b_prod_prod_stream$ )
(declare-fun smap$d (A_b_prod_a_a_b_prod_prod_fun$ A_b_prod_stream$ )A_a_b_prod_prod_stream$ )
(declare-fun smap$e (A_a_a_prod_fun$ A_stream$ )A_a_prod_stream$ )
(declare-fun smap$f (B_b_b_prod_fun$ B_stream$ )B_b_prod_stream$ )
(declare-fun smap$g (B_a_b_prod_fun$ B_stream$ )A_b_prod_stream$ )
(declare-fun smap$h (B_a_prod_b_a_prod_fun$ B_a_prod_stream$ )B_a_prod_stream$ )
(declare-fun smap$i (A_b_b_prod_prod_a_b_b_prod_prod_fun$ A_b_b_prod_prod_stream$ )A_b_b_prod_prod_stream$ )
(declare-fun smap$j (A_a_b_prod_prod_a_a_b_prod_prod_fun$ A_a_b_prod_prod_stream$ )A_a_b_prod_prod_stream$ )
(declare-fun smap$k (A_a_prod_a_a_prod_fun$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun smap$l (B_stream_b_stream_fun$ )B_stream_stream_b_stream_stream_fun$ )
(declare-fun smap$m (A_a_fun$ )A_stream_a_stream_fun$ )
(declare-fun smap$n (B_b_prod_b_b_prod_fun$ )B_b_prod_stream_b_b_prod_stream_fun$ )
(declare-fun smap$o (A_b_prod_a_b_prod_fun$ )A_b_prod_stream_a_b_prod_stream_fun$ )
(declare-fun smap$p (B_b_fun$ )B_stream_b_stream_fun$ )
(declare-fun smap$q (B_a_fun$ B_stream$ )A_stream$ )
(declare-fun smap$r (A_b_fun$ A_stream$ )B_stream$ )
(declare-fun smap$s (B_stream_b_fun$ B_stream_stream$ )B_stream$ )
(declare-fun smap$t (B_stream_a_fun$ B_stream_stream$ )A_stream$ )
(declare-fun smap$u (B_b_stream_fun$ B_stream$ )B_stream_stream$ )
(declare-fun smap$v (A_b_stream_fun$ A_stream$ )B_stream_stream$ )
(declare-fun smap$w (A_b_prod_stream_a_b_prod_stream_fun$ )A_b_prod_stream_stream_a_b_prod_stream_stream_fun$ )
(declare-fun smap$x (B_stream_stream_b_stream_stream_fun$ )B_stream_stream_stream_b_stream_stream_stream_fun$ )
(declare-fun smap$y (A_stream_a_stream_fun$ )A_stream_stream_a_stream_stream_fun$ )
(declare-fun smap$z (B_a_prod_b_b_prod_fun$ B_a_prod_stream$ )B_b_prod_stream$ )
(declare-fun szip$a (B_stream$ A_b_prod_stream$ )B_a_b_prod_prod_stream$ )
(declare-fun szip$b (B_stream$ A_stream$ )B_a_prod_stream$ )
(declare-fun szip$c (A_stream$ B_b_prod_stream$ )A_b_b_prod_prod_stream$ )
(declare-fun szip$d (A_stream$ A_b_prod_stream$ )A_a_b_prod_prod_stream$ )
(declare-fun szip$e (A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun szip$f (B_stream$ B_stream$ )B_b_prod_stream$ )
(declare-fun szip$g (B_stream$ B_b_prod_stream$ )B_b_b_prod_prod_stream$ )
(declare-fun szip$h (A_b_prod_stream$ B_stream$ )A_b_prod_b_prod_stream$ )
(declare-fun szip$i (A_b_prod_stream$ A_stream$ )A_b_prod_a_prod_stream$ )
(declare-fun apsnd$a (A_a_fun$ )B_a_prod_b_a_prod_fun$ )
(declare-fun apsnd$b (A_a_fun$ )A_a_prod_a_a_prod_fun$ )
(declare-fun apsnd$c (B_a_b_prod_fun$ )A_b_prod_a_a_b_prod_prod_fun$ )
(declare-fun apsnd$d (B_a_b_prod_fun$ )B_b_prod_b_a_b_prod_prod_fun$ )
(declare-fun apsnd$e (B_b_fun$ )B_b_prod_b_b_prod_fun$ )
(declare-fun apsnd$f (B_b_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun member$ (B_a_b_prod_prod$ B_a_b_prod_prod_set$ )Bool )
(declare-fun of_seq$ (Nat_b_fun$ )B_stream$ )
(declare-fun smap$aa (B_b_prod_b_a_b_prod_prod_fun$ B_b_prod_stream$ )B_a_b_prod_prod_stream$ )
(declare-fun fun_app$ (A_a_b_prod_fun$ A$ )A_b_prod$ )
(declare-fun member$a (B_b_prod$ B_b_prod_set$ )Bool )
(declare-fun member$b (B_a_prod$ B_a_prod_set$ )Bool )
(declare-fun member$c (A_b_b_prod_prod$ A_b_b_prod_prod_set$ )Bool )
(declare-fun member$d (A_a_b_prod_prod$ A_a_b_prod_prod_set$ )Bool )
(declare-fun member$e (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun member$f (A_a_prod$ A_a_prod_set$ )Bool )
(declare-fun of_seq$a (Nat_a_fun$ )A_stream$ )
(declare-fun of_seq$b (Nat_b_stream_fun$ )B_stream_stream$ )
(declare-fun of_seq$c (Nat_a_b_prod_fun$ )A_b_prod_stream$ )
(declare-fun of_seq$d (Nat_b_b_prod_fun$ )B_b_prod_stream$ )
(declare-fun of_seq$e (Nat_a_stream_fun$ )A_stream_stream$ )
(declare-fun of_seq$f (Nat_b_stream_stream_fun$ )B_stream_stream_stream$ )
(declare-fun of_seq$g (Nat_b_a_prod_fun$ )B_a_prod_stream$ )
(declare-fun of_seq$h (Nat_a_a_prod_fun$ )A_a_prod_stream$ )
(declare-fun of_seq$i (Nat_a_b_prod_stream_fun$ )A_b_prod_stream_stream$ )
(declare-fun fun_app$a (A_b_prod_b_a_b_prod_prod_fun$ A_b_prod$ )B_a_b_prod_prod$ )
(declare-fun fun_app$b (B_b_b_prod_fun$ B$ )B_b_prod$ )
(declare-fun fun_app$c (A_b_a_prod_fun$ A$ )B_a_prod$ )
(declare-fun fun_app$d (B_b_prod_a_b_b_prod_prod_fun$ B_b_prod$ )A_b_b_prod_prod$ )
(declare-fun fun_app$e (A_b_prod_a_a_b_prod_prod_fun$ A_b_prod$ )A_a_b_prod_prod$ )
(declare-fun fun_app$f (B_a_b_prod_fun$ B$ )A_b_prod$ )
(declare-fun fun_app$g (A_a_a_prod_fun$ A$ )A_a_prod$ )
(declare-fun fun_app$h (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun fun_app$i (B_a_b_prod_bool_fun_fun$ B$ )A_b_prod_bool_fun$ )
(declare-fun fun_app$j (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$k (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$l (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$m (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$n (B_b_prod_bool_fun$ B_b_prod$ )Bool )
(declare-fun fun_app$o (A_b_b_prod_bool_fun_fun$ A$ )B_b_prod_bool_fun$ )
(declare-fun fun_app$p (A_a_b_prod_bool_fun_fun$ A$ )A_b_prod_bool_fun$ )
(declare-fun fun_app$q (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$r (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$s (Nat_b_b_prod_fun$ Nat$ )B_b_prod$ )
(declare-fun fun_app$t (Nat_b_a_prod_fun$ Nat$ )B_a_prod$ )
(declare-fun fun_app$u (Nat_a_b_prod_fun$ Nat$ )A_b_prod$ )
(declare-fun fun_app$v (Nat_a_a_prod_fun$ Nat$ )A_a_prod$ )
(declare-fun fun_app$w (Nat_a_b_prod_stream_fun$ Nat$ )A_b_prod_stream$ )
(declare-fun fun_app$x (Nat_b_stream_stream_fun$ Nat$ )B_stream_stream$ )
(declare-fun fun_app$y (Nat_b_stream_fun$ Nat$ )B_stream$ )
(declare-fun fun_app$z (Nat_a_stream_fun$ Nat$ )A_stream$ )
(declare-fun map_prod$ (B_b_fun$ )B_b_fun_b_b_prod_b_b_prod_fun_fun$ )
(declare-fun siterate$ (B_b_fun$ )B_b_stream_fun$ )
(declare-fun fun_app$aa (Nat_b_fun$ Nat$ )B$ )
(declare-fun fun_app$ab (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$ac (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod$ )
(declare-fun fun_app$ad (B_b_fun$ B$ )B$ )
(declare-fun fun_app$ae (A_a_fun$ A$ )A$ )
(declare-fun fun_app$af (B_b_stream_fun$ B$ )B_stream$ )
(declare-fun fun_app$ag (B_a_prod_b_a_prod_fun$ B_a_prod$ )B_a_prod$ )
(declare-fun fun_app$ah (A_b_b_prod_prod_a_b_b_prod_prod_fun$ A_b_b_prod_prod$ )A_b_b_prod_prod$ )
(declare-fun fun_app$ai (A_a_b_prod_prod_a_a_b_prod_prod_fun$ A_a_b_prod_prod$ )A_a_b_prod_prod$ )
(declare-fun fun_app$aj (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod$ )
(declare-fun fun_app$ak (B_stream_stream_b_stream_stream_fun$ B_stream_stream$ )B_stream_stream$ )
(declare-fun fun_app$al (B_stream_b_stream_fun$ B_stream$ )B_stream$ )
(declare-fun fun_app$am (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun fun_app$an (B_b_prod_stream_b_b_prod_stream_fun$ B_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun fun_app$ao (B_b_prod_b_b_prod_fun$ B_b_prod$ )B_b_prod$ )
(declare-fun fun_app$ap (A_b_prod_stream_a_b_prod_stream_fun$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun fun_app$aq (B_a_fun$ B$ )A$ )
(declare-fun fun_app$ar (A_b_fun$ A$ )B$ )
(declare-fun fun_app$as (B_stream_b_fun$ B_stream$ )B$ )
(declare-fun fun_app$at (B_stream_a_fun$ B_stream$ )A$ )
(declare-fun fun_app$au (A_b_stream_fun$ A$ )B_stream$ )
(declare-fun fun_app$av (A_b_prod_stream_stream_a_b_prod_stream_stream_fun$ A_b_prod_stream_stream$ )A_b_prod_stream_stream$ )
(declare-fun fun_app$aw (B_stream_stream_stream_b_stream_stream_stream_fun$ B_stream_stream_stream$ )B_stream_stream_stream$ )
(declare-fun fun_app$ax (A_stream_stream_a_stream_stream_fun$ A_stream_stream$ )A_stream_stream$ )
(declare-fun fun_app$ay (B_b_fun_b_b_prod_b_b_prod_fun_fun$ B_b_fun$ )B_b_prod_b_b_prod_fun$ )
(declare-fun fun_app$az (B_b_fun_a_b_prod_a_b_prod_fun_fun$ B_b_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun fun_app$ba (A_a_fun_b_a_prod_b_a_prod_fun_fun$ A_a_fun$ )B_a_prod_b_a_prod_fun$ )
(declare-fun fun_app$bb (A_a_fun_a_a_prod_a_a_prod_fun_fun$ A_a_fun$ )A_a_prod_a_a_prod_fun$ )
(declare-fun fun_app$bc (A_b_prod_a_b_prod_fun_a_a_b_prod_prod_a_a_b_prod_prod_fun_fun$ A_b_prod_a_b_prod_fun$ )A_a_b_prod_prod_a_a_b_prod_prod_fun$ )
(declare-fun fun_app$bd (B_b_prod_b_b_prod_fun_a_b_b_prod_prod_a_b_b_prod_prod_fun_fun$ B_b_prod_b_b_prod_fun$ )A_b_b_prod_prod_a_b_b_prod_prod_fun$ )
(declare-fun map_prod$a (A_a_fun$ )B_b_fun_a_b_prod_a_b_prod_fun_fun$ )
(declare-fun map_prod$b (B_b_fun$ )A_a_fun_b_a_prod_b_a_prod_fun_fun$ )
(declare-fun map_prod$c (A_a_fun$ )A_a_fun_a_a_prod_a_a_prod_fun_fun$ )
(declare-fun map_prod$d (B_b_fun$ A_b_prod_a_b_prod_fun$ )B_a_b_prod_prod_b_a_b_prod_prod_fun$ )
(declare-fun map_prod$e (B_b_fun$ B_b_prod_b_b_prod_fun$ )B_b_b_prod_prod_b_b_b_prod_prod_fun$ )
(declare-fun map_prod$f (A_a_fun$ )A_b_prod_a_b_prod_fun_a_a_b_prod_prod_a_a_b_prod_prod_fun_fun$ )
(declare-fun map_prod$g (A_a_fun$ )B_b_prod_b_b_prod_fun_a_b_b_prod_prod_a_b_b_prod_prod_fun_fun$ )
(declare-fun map_prod$h (A_b_prod_a_b_prod_fun$ B_b_fun$ )A_b_prod_b_prod_a_b_prod_b_prod_fun$ )
(declare-fun map_prod$i (A_b_prod_a_b_prod_fun$ A_a_fun$ )A_b_prod_a_prod_a_b_prod_a_prod_fun$ )
(declare-fun map_prod$j (A_b_fun$ B_b_fun$ A_b_prod$ )B_b_prod$ )
(declare-fun map_prod$k (B_a_fun$ B_b_fun$ B_b_prod$ )A_b_prod$ )
(declare-fun siterate$a (A_a_fun$ A$ )A_stream$ )
(declare-fun siterate$b (B_a_prod_b_a_prod_fun$ B_a_prod$ )B_a_prod_stream$ )
(declare-fun siterate$c (A_b_b_prod_prod_a_b_b_prod_prod_fun$ A_b_b_prod_prod$ )A_b_b_prod_prod_stream$ )
(declare-fun siterate$d (A_a_b_prod_prod_a_a_b_prod_prod_fun$ A_a_b_prod_prod$ )A_a_b_prod_prod_stream$ )
(declare-fun siterate$e (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod_stream$ )
(declare-fun siterate$f (B_stream_b_stream_fun$ B_stream$ )B_stream_stream$ )
(declare-fun siterate$g (B_b_prod_b_b_prod_fun$ B_b_prod$ )B_b_prod_stream$ )
(declare-fun siterate$h (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod_stream$ )
(declare-fun siterate$i (A_stream_a_stream_fun$ A_stream$ )A_stream_stream$ )
(declare-fun siterate$j (B_stream_stream_b_stream_stream_fun$ B_stream_stream$ )B_stream_stream_stream$ )
(declare-fun siterate$k (A_b_prod_stream_a_b_prod_stream_fun$ A_b_prod_stream$ )A_b_prod_stream_stream$ )
(declare-fun siterate$l (B_a_b_prod_prod_b_a_b_prod_prod_fun$ B_a_b_prod_prod$ )B_a_b_prod_prod_stream$ )
(declare-fun siterate$m (B_b_b_prod_prod_b_b_b_prod_prod_fun$ B_b_b_prod_prod$ )B_b_b_prod_prod_stream$ )
(declare-fun siterate$n (A_b_prod_b_prod_a_b_prod_b_prod_fun$ A_b_prod_b_prod$ )A_b_prod_b_prod_stream$ )
(declare-fun siterate$o (A_b_prod_a_prod_a_b_prod_a_prod_fun$ A_b_prod_a_prod$ )A_b_prod_a_prod_stream$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(pair$ ?v0 b$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_prod$ ))(! (= (fun_app$a (uua$ ?v0 )?v1 )(pair$a ?v0 ?v1 )):pattern ((fun_app$a (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$b (uuf$ ?v0 )?v1 )(pair$c ?v0 ?v1 )):pattern ((fun_app$b (uuf$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ ))(! (= (fun_app$c (uub$ ?v0 )?v1 )(pair$b ?v0 ?v1 )):pattern ((fun_app$c (uub$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_prod$ ))(! (= (fun_app$d (uuc$ ?v0 )?v1 )(pair$d ?v0 ?v1 )):pattern ((fun_app$d (uuc$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ ))(! (= (fun_app$e (uud$ ?v0 )?v1 )(pair$e ?v0 ?v1 )):pattern ((fun_app$e (uud$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ ))(! (= (fun_app$f (uug$ ?v0 )?v1 )(pair$ ?v0 ?v1 )):pattern ((fun_app$f (uug$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$g (uue$ ?v0 )?v1 )(pair$f ?v0 ?v1 )):pattern ((fun_app$g (uue$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_set$ )(?v1 B$ )(?v2 A_b_prod$ ))(! (= (fun_app$h (fun_app$i (uuk$ ?v0 )?v1 )?v2 )(member$ (pair$a ?v1 ?v2 )?v0 )):pattern ((fun_app$h (fun_app$i (uuk$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 B_b_prod_set$ )(?v1 B$ )(?v2 B$ ))(! (= (fun_app$j (fun_app$k (uup$ ?v0 )?v1 )?v2 )(member$a (pair$c ?v1 ?v2 )?v0 )):pattern ((fun_app$j (fun_app$k (uup$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 B_a_prod_set$ )(?v1 B$ )(?v2 A$ ))(! (= (fun_app$l (fun_app$m (uul$ ?v0 )?v1 )?v2 )(member$b (pair$b ?v1 ?v2 )?v0 )):pattern ((fun_app$l (fun_app$m (uul$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_set$ )(?v1 A$ )(?v2 B_b_prod$ ))(! (= (fun_app$n (fun_app$o (uum$ ?v0 )?v1 )?v2 )(member$c (pair$d ?v1 ?v2 )?v0 )):pattern ((fun_app$n (fun_app$o (uum$ ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_set$ )(?v1 A$ )(?v2 A_b_prod$ ))(! (= (fun_app$h (fun_app$p (uun$ ?v0 )?v1 )?v2 )(member$d (pair$e ?v1 ?v2 )?v0 )):pattern ((fun_app$h (fun_app$p (uun$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$j (fun_app$q (uuq$ ?v0 )?v1 )?v2 )(member$e (pair$ ?v1 ?v2 )?v0 )):pattern ((fun_app$j (fun_app$q (uuq$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_a_prod_set$ )(?v1 A$ )(?v2 A$ ))(! (= (fun_app$l (fun_app$r (uuo$ ?v0 )?v1 )?v2 )(member$f (pair$f ?v1 ?v2 )?v0 )):pattern ((fun_app$l (fun_app$r (uuo$ ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 Nat$ ))(! (= (fun_app$s (uuv$ ?v0 )?v1 )?v0 ):pattern ((fun_app$s (uuv$ ?v0 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 Nat$ ))(! (= (fun_app$t (uuy$ ?v0 )?v1 )?v0 ):pattern ((fun_app$t (uuy$ ?v0 )?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 Nat$ ))(! (= (fun_app$u (uuu$ ?v0 )?v1 )?v0 ):pattern ((fun_app$u (uuu$ ?v0 )?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 Nat$ ))(! (= (fun_app$v (uuz$ ?v0 )?v1 )?v0 ):pattern ((fun_app$v (uuz$ ?v0 )?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 Nat$ ))(! (= (fun_app$w (uva$ ?v0 )?v1 )?v0 ):pattern ((fun_app$w (uva$ ?v0 )?v1 )))):named a19 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 Nat$ ))(! (= (fun_app$x (uux$ ?v0 )?v1 )?v0 ):pattern ((fun_app$x (uux$ ?v0 )?v1 )))):named a20 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 Nat$ ))(! (= (fun_app$y (uut$ ?v0 )?v1 )?v0 ):pattern ((fun_app$y (uut$ ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 Nat$ ))(! (= (fun_app$z (uuw$ ?v0 )?v1 )?v0 ):pattern ((fun_app$z (uuw$ ?v0 )?v1 )))):named a22 ))
(assert (! (forall ((?v0 B$ )(?v1 Nat$ ))(! (= (fun_app$aa (uur$ ?v0 )?v1 )?v0 ):pattern ((fun_app$aa (uur$ ?v0 )?v1 )))):named a23 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ ))(! (= (fun_app$ab (uus$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ab (uus$ ?v0 )?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$ac uuj$ ?v0 )?v0 ):pattern ((fun_app$ac uuj$ ?v0 )))):named a25 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ad uui$ ?v0 )?v0 ):pattern ((fun_app$ad uui$ ?v0 )))):named a26 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ae uuh$ ?v0 )?v0 ):pattern ((fun_app$ae uuh$ ?v0 )))):named a27 ))
(assert (! (not (= (szip$ xs$ (fun_app$af (siterate$ id$ )b$ ))(smap$ uu$ xs$ ))):named a28 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_prod_stream$ ))(= (szip$a (fun_app$af (siterate$ id$ )?v0 )?v1 )(smap$a (uua$ ?v0 )?v1 ))):named a29 ))
(assert (! (forall ((?v0 B$ )(?v1 A_stream$ ))(= (szip$b (fun_app$af (siterate$ id$ )?v0 )?v1 )(smap$b (uub$ ?v0 )?v1 ))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_prod_stream$ ))(= (szip$c (siterate$a id$a ?v0 )?v1 )(smap$c (uuc$ ?v0 )?v1 ))):named a31 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod_stream$ ))(= (szip$d (siterate$a id$a ?v0 )?v1 )(smap$d (uud$ ?v0 )?v1 ))):named a32 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(= (szip$e (siterate$a id$a ?v0 )?v1 )(smap$e (uue$ ?v0 )?v1 ))):named a33 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(= (szip$f (fun_app$af (siterate$ id$ )?v0 )?v1 )(smap$f (uuf$ ?v0 )?v1 ))):named a34 ))
(assert (! (forall ((?v0 A$ )(?v1 B_stream$ ))(= (szip$ (siterate$a id$a ?v0 )?v1 )(smap$g (uug$ ?v0 )?v1 ))):named a35 ))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_fun$ )(?v1 B_a_prod$ ))(= (smap$h ?v0 (siterate$b ?v0 ?v1 ))(siterate$b ?v0 (fun_app$ag ?v0 ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_a_b_b_prod_prod_fun$ )(?v1 A_b_b_prod_prod$ ))(= (smap$i ?v0 (siterate$c ?v0 ?v1 ))(siterate$c ?v0 (fun_app$ah ?v0 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_a_a_b_prod_prod_fun$ )(?v1 A_a_b_prod_prod$ ))(= (smap$j ?v0 (siterate$d ?v0 ?v1 ))(siterate$d ?v0 (fun_app$ai ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod$ ))(= (smap$k ?v0 (siterate$e ?v0 ?v1 ))(siterate$e ?v0 (fun_app$aj ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 B_stream_b_stream_fun$ )(?v1 B_stream$ ))(= (fun_app$ak (smap$l ?v0 )(siterate$f ?v0 ?v1 ))(siterate$f ?v0 (fun_app$al ?v0 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$am (smap$m ?v0 )(siterate$a ?v0 ?v1 ))(siterate$a ?v0 (fun_app$ae ?v0 ?v1 )))):named a41 ))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_fun$ )(?v1 B_b_prod$ ))(= (fun_app$an (smap$n ?v0 )(siterate$g ?v0 ?v1 ))(siterate$g ?v0 (fun_app$ao ?v0 ?v1 )))):named a42 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod$ ))(= (fun_app$ap (smap$o ?v0 )(siterate$h ?v0 ?v1 ))(siterate$h ?v0 (fun_app$ac ?v0 ?v1 )))):named a43 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (fun_app$al (smap$p ?v0 )(fun_app$af (siterate$ ?v0 )?v1 ))(fun_app$af (siterate$ ?v0 )(fun_app$ad ?v0 ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_stream$ ))(= (fun_app$am (smap$m uuh$ )?v0 )?v0 )):named a45 ))
(assert (! (forall ((?v0 B_stream$ ))(= (fun_app$al (smap$p uui$ )?v0 )?v0 )):named a46 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(= (fun_app$ap (smap$o uuj$ )?v0 )?v0 )):named a47 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (fun_app$al (smap$p ?v0 )(fun_app$af (siterate$ id$ )?v1 ))(fun_app$af (siterate$ id$ )(fun_app$ad ?v0 ?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A$ ))(= (smap$ ?v0 (siterate$a id$a ?v1 ))(siterate$h id$b (fun_app$ ?v0 ?v1 )))):named a49 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (smap$q ?v0 (fun_app$af (siterate$ id$ )?v1 ))(siterate$a id$a (fun_app$aq ?v0 ?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (smap$r ?v0 (siterate$a id$a ?v1 ))(fun_app$af (siterate$ id$ )(fun_app$ar ?v0 ?v1 )))):named a51 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$am (smap$m ?v0 )(siterate$a id$a ?v1 ))(siterate$a id$a (fun_app$ae ?v0 ?v1 )))):named a52 ))
(assert (! (forall ((?v0 B_stream_b_fun$ )(?v1 B_stream$ ))(= (smap$s ?v0 (siterate$f id$c ?v1 ))(fun_app$af (siterate$ id$ )(fun_app$as ?v0 ?v1 )))):named a53 ))
(assert (! (forall ((?v0 B_stream_a_fun$ )(?v1 B_stream$ ))(= (smap$t ?v0 (siterate$f id$c ?v1 ))(siterate$a id$a (fun_app$at ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 B_b_stream_fun$ )(?v1 B$ ))(= (smap$u ?v0 (fun_app$af (siterate$ id$ )?v1 ))(siterate$f id$c (fun_app$af ?v0 ?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_b_stream_fun$ )(?v1 A$ ))(= (smap$v ?v0 (siterate$a id$a ?v1 ))(siterate$f id$c (fun_app$au ?v0 ?v1 )))):named a56 ))
(assert (! (forall ((?v0 B_stream_b_stream_fun$ )(?v1 B_stream$ ))(= (fun_app$ak (smap$l ?v0 )(siterate$f id$c ?v1 ))(siterate$f id$c (fun_app$al ?v0 ?v1 )))):named a57 ))
(assert (! (forall ((?v0 B_b_prod$ ))(! (= (fun_app$ao id$d ?v0 )?v0 ):pattern ((fun_app$ao id$d ?v0 )))):named a58 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(! (= (fun_app$ap id$e ?v0 )?v0 ):pattern ((fun_app$ap id$e ?v0 )))):named a59 ))
(assert (! (forall ((?v0 B_stream_stream$ ))(! (= (fun_app$ak id$f ?v0 )?v0 ):pattern ((fun_app$ak id$f ?v0 )))):named a60 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$am id$g ?v0 )?v0 ):pattern ((fun_app$am id$g ?v0 )))):named a61 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ae id$a ?v0 )?v0 ):pattern ((fun_app$ae id$a ?v0 )))):named a62 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$ac id$b ?v0 )?v0 ):pattern ((fun_app$ac id$b ?v0 )))):named a63 ))
(assert (! (forall ((?v0 B_stream$ ))(! (= (fun_app$al id$c ?v0 )?v0 ):pattern ((fun_app$al id$c ?v0 )))):named a64 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ad id$ ?v0 )?v0 ):pattern ((fun_app$ad id$ ?v0 )))):named a65 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_prod$ )(?v2 B$ )(?v3 A_b_prod$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a66 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ )(?v2 B$ )(?v3 A$ ))(= (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a67 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_prod$ )(?v2 A$ )(?v3 B_b_prod$ ))(= (= (pair$d ?v0 ?v1 )(pair$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a68 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ )(?v2 A$ )(?v3 A_b_prod$ ))(= (= (pair$e ?v0 ?v1 )(pair$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a69 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$f ?v0 ?v1 )(pair$f ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a70 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B$ )(?v3 B$ ))(= (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a71 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a72 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_prod$ )(?v2 B$ )(?v3 A_b_prod$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a73 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ )(?v2 B$ )(?v3 A$ ))(= (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a74 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_prod$ )(?v2 A$ )(?v3 B_b_prod$ ))(= (= (pair$d ?v0 ?v1 )(pair$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a75 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ )(?v2 A$ )(?v3 A_b_prod$ ))(= (= (pair$e ?v0 ?v1 )(pair$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a76 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$f ?v0 ?v1 )(pair$f ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a77 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B$ )(?v3 B$ ))(= (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a78 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a79 ))
(assert (! (forall ((?v0 B_b_prod_stream$ ))(= (fun_app$an (smap$n id$d )?v0 )?v0 )):named a80 ))
(assert (! (forall ((?v0 A_b_prod_stream_stream$ ))(= (fun_app$av (smap$w id$e )?v0 )?v0 )):named a81 ))
(assert (! (forall ((?v0 B_stream_stream_stream$ ))(= (fun_app$aw (smap$x id$f )?v0 )?v0 )):named a82 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(= (fun_app$ax (smap$y id$g )?v0 )?v0 )):named a83 ))
(assert (! (forall ((?v0 A_stream$ ))(= (fun_app$am (smap$m id$a )?v0 )?v0 )):named a84 ))
(assert (! (forall ((?v0 B_stream_stream$ ))(= (fun_app$ak (smap$l id$c )?v0 )?v0 )):named a85 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(= (fun_app$ap (smap$o id$b )?v0 )?v0 )):named a86 ))
(assert (! (forall ((?v0 B_stream$ ))(= (fun_app$al (smap$p id$ )?v0 )?v0 )):named a87 ))
(assert (! (= (smap$n id$d )id$h ):named a88 ))
(assert (! (= (smap$w id$e )id$i ):named a89 ))
(assert (! (= (smap$x id$f )id$j ):named a90 ))
(assert (! (= (smap$y id$g )id$k ):named a91 ))
(assert (! (= (smap$m id$a )id$g ):named a92 ))
(assert (! (= (smap$l id$c )id$f ):named a93 ))
(assert (! (= (smap$o id$b )id$e ):named a94 ))
(assert (! (= (smap$p id$ )id$c ):named a95 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_set$ )(?v1 B_a_b_prod_prod_set$ ))(= (= (uuk$ ?v0 )(uuk$ ?v1 ))(= ?v0 ?v1 ))):named a96 ))
(assert (! (forall ((?v0 B_a_prod_set$ )(?v1 B_a_prod_set$ ))(= (= (uul$ ?v0 )(uul$ ?v1 ))(= ?v0 ?v1 ))):named a97 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_set$ )(?v1 A_b_b_prod_prod_set$ ))(= (= (uum$ ?v0 )(uum$ ?v1 ))(= ?v0 ?v1 ))):named a98 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_set$ )(?v1 A_a_b_prod_prod_set$ ))(= (= (uun$ ?v0 )(uun$ ?v1 ))(= ?v0 ?v1 ))):named a99 ))
(assert (! (forall ((?v0 A_a_prod_set$ )(?v1 A_a_prod_set$ ))(= (= (uuo$ ?v0 )(uuo$ ?v1 ))(= ?v0 ?v1 ))):named a100 ))
(assert (! (forall ((?v0 B_b_prod_set$ )(?v1 B_b_prod_set$ ))(= (= (uup$ ?v0 )(uup$ ?v1 ))(= ?v0 ?v1 ))):named a101 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_set$ ))(= (= (uuq$ ?v0 )(uuq$ ?v1 ))(= ?v0 ?v1 ))):named a102 ))
(assert (! (forall ((?v0 B$ ))(= (fun_app$af (siterate$ id$ )?v0 )(of_seq$ (uur$ ?v0 )))):named a103 ))
(assert (! (forall ((?v0 A$ ))(= (siterate$a id$a ?v0 )(of_seq$a (uus$ ?v0 )))):named a104 ))
(assert (! (forall ((?v0 B_stream$ ))(= (siterate$f id$c ?v0 )(of_seq$b (uut$ ?v0 )))):named a105 ))
(assert (! (forall ((?v0 A_b_prod$ ))(= (siterate$h id$b ?v0 )(of_seq$c (uuu$ ?v0 )))):named a106 ))
(assert (! (forall ((?v0 B_b_prod$ ))(= (siterate$g id$d ?v0 )(of_seq$d (uuv$ ?v0 )))):named a107 ))
(assert (! (forall ((?v0 A_stream$ ))(= (siterate$i id$g ?v0 )(of_seq$e (uuw$ ?v0 )))):named a108 ))
(assert (! (forall ((?v0 B_stream_stream$ ))(= (siterate$j id$f ?v0 )(of_seq$f (uux$ ?v0 )))):named a109 ))
(assert (! (forall ((?v0 B_a_prod$ ))(= (siterate$b id$l ?v0 )(of_seq$g (uuy$ ?v0 )))):named a110 ))
(assert (! (forall ((?v0 A_a_prod$ ))(= (siterate$e id$m ?v0 )(of_seq$h (uuz$ ?v0 )))):named a111 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(= (siterate$k id$e ?v0 )(of_seq$i (uva$ ?v0 )))):named a112 ))
(assert (! (forall ((?v0 B_b_prod$ ))(! (= (fun_app$ao id$d ?v0 )?v0 ):pattern ((fun_app$ao id$d ?v0 )))):named a113 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(! (= (fun_app$ap id$e ?v0 )?v0 ):pattern ((fun_app$ap id$e ?v0 )))):named a114 ))
(assert (! (forall ((?v0 B_stream_stream$ ))(! (= (fun_app$ak id$f ?v0 )?v0 ):pattern ((fun_app$ak id$f ?v0 )))):named a115 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$am id$g ?v0 )?v0 ):pattern ((fun_app$am id$g ?v0 )))):named a116 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ae id$a ?v0 )?v0 ):pattern ((fun_app$ae id$a ?v0 )))):named a117 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$ac id$b ?v0 )?v0 ):pattern ((fun_app$ac id$b ?v0 )))):named a118 ))
(assert (! (forall ((?v0 B_stream$ ))(! (= (fun_app$al id$c ?v0 )?v0 ):pattern ((fun_app$al id$c ?v0 )))):named a119 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ad id$ ?v0 )?v0 ):pattern ((fun_app$ad id$ ?v0 )))):named a120 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (szip$f (fun_app$af (siterate$ ?v0 )?v1 )(fun_app$af (siterate$ ?v2 )?v3 ))(siterate$g (fun_app$ay (map_prod$ ?v0 )?v2 )(pair$c ?v1 ?v3 )))):named a121 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (szip$ (siterate$a ?v0 ?v1 )(fun_app$af (siterate$ ?v2 )?v3 ))(siterate$h (fun_app$az (map_prod$a ?v0 )?v2 )(pair$ ?v1 ?v3 )))):named a122 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 A_a_fun$ )(?v3 A$ ))(= (szip$b (fun_app$af (siterate$ ?v0 )?v1 )(siterate$a ?v2 ?v3 ))(siterate$b (fun_app$ba (map_prod$b ?v0 )?v2 )(pair$b ?v1 ?v3 )))):named a123 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_a_fun$ )(?v3 A$ ))(= (szip$e (siterate$a ?v0 ?v1 )(siterate$a ?v2 ?v3 ))(siterate$e (fun_app$bb (map_prod$c ?v0 )?v2 )(pair$f ?v1 ?v3 )))):named a124 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 A_b_prod_a_b_prod_fun$ )(?v3 A_b_prod$ ))(= (szip$a (fun_app$af (siterate$ ?v0 )?v1 )(siterate$h ?v2 ?v3 ))(siterate$l (map_prod$d ?v0 ?v2 )(pair$a ?v1 ?v3 )))):named a125 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_b_prod_b_b_prod_fun$ )(?v3 B_b_prod$ ))(= (szip$g (fun_app$af (siterate$ ?v0 )?v1 )(siterate$g ?v2 ?v3 ))(siterate$m (map_prod$e ?v0 ?v2 )(pair$g ?v1 ?v3 )))):named a126 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_b_prod_a_b_prod_fun$ )(?v3 A_b_prod$ ))(= (szip$d (siterate$a ?v0 ?v1 )(siterate$h ?v2 ?v3 ))(siterate$d (fun_app$bc (map_prod$f ?v0 )?v2 )(pair$e ?v1 ?v3 )))):named a127 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 B_b_prod_b_b_prod_fun$ )(?v3 B_b_prod$ ))(= (szip$c (siterate$a ?v0 ?v1 )(siterate$g ?v2 ?v3 ))(siterate$c (fun_app$bd (map_prod$g ?v0 )?v2 )(pair$d ?v1 ?v3 )))):named a128 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (szip$h (siterate$h ?v0 ?v1 )(fun_app$af (siterate$ ?v2 )?v3 ))(siterate$n (map_prod$h ?v0 ?v2 )(pair$h ?v1 ?v3 )))):named a129 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod$ )(?v2 A_a_fun$ )(?v3 A$ ))(= (szip$i (siterate$h ?v0 ?v1 )(siterate$a ?v2 ?v3 ))(siterate$o (map_prod$i ?v0 ?v2 )(pair$i ?v1 ?v3 )))):named a130 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_b_fun$ )(?v2 A_stream$ ))(= (szip$f ?v0 (smap$r ?v1 ?v2 ))(smap$z (apsnd$ ?v1 )(szip$b ?v0 ?v2 )))):named a131 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (szip$b ?v0 (fun_app$am (smap$m ?v1 )?v2 ))(smap$h (apsnd$a ?v1 )(szip$b ?v0 ?v2 )))):named a132 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (szip$e ?v0 (fun_app$am (smap$m ?v1 )?v2 ))(smap$k (apsnd$b ?v1 )(szip$e ?v0 ?v2 )))):named a133 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_a_b_prod_fun$ )(?v2 B_stream$ ))(= (szip$d ?v0 (smap$g ?v1 ?v2 ))(smap$d (apsnd$c ?v1 )(szip$ ?v0 ?v2 )))):named a134 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_a_b_prod_fun$ )(?v2 B_stream$ ))(= (szip$a ?v0 (smap$g ?v1 ?v2 ))(smap$aa (apsnd$d ?v1 )(szip$f ?v0 ?v2 )))):named a135 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_b_fun$ )(?v2 B_stream$ ))(= (szip$f ?v0 (fun_app$al (smap$p ?v1 )?v2 ))(fun_app$an (smap$n (apsnd$e ?v1 ))(szip$f ?v0 ?v2 )))):named a136 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_b_fun$ )(?v2 B_stream$ ))(= (szip$ ?v0 (fun_app$al (smap$p ?v1 )?v2 ))(fun_app$ap (smap$o (apsnd$f ?v1 ))(szip$ ?v0 ?v2 )))):named a137 ))
(assert (! (forall ((?v0 A_b_prod$ ))(= (fun_app$ac (fun_app$az (map_prod$a uuh$ )uui$ )?v0 )?v0 )):named a138 ))
(assert (! (forall ((?v0 B_b_prod$ ))(= (fun_app$ao (fun_app$ay (map_prod$ uui$ )uui$ )?v0 )?v0 )):named a139 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_b_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (map_prod$j ?v0 ?v1 (pair$ ?v2 ?v3 ))(pair$c (fun_app$ar ?v0 ?v2 )(fun_app$ad ?v1 ?v3 ))):pattern ((map_prod$j ?v0 ?v1 (pair$ ?v2 ?v3 ))))):named a140 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B$ ))(! (= (map_prod$k ?v0 ?v1 (pair$c ?v2 ?v3 ))(pair$ (fun_app$aq ?v0 ?v2 )(fun_app$ad ?v1 ?v3 ))):pattern ((map_prod$k ?v0 ?v1 (pair$c ?v2 ?v3 ))))):named a141 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B$ ))(! (= (fun_app$ao (fun_app$ay (map_prod$ ?v0 )?v1 )(pair$c ?v2 ?v3 ))(pair$c (fun_app$ad ?v0 ?v2 )(fun_app$ad ?v1 ?v3 ))):pattern ((fun_app$ao (fun_app$ay (map_prod$ ?v0 )?v1 )(pair$c ?v2 ?v3 ))))):named a142 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$ac (fun_app$az (map_prod$a ?v0 )?v1 )(pair$ ?v2 ?v3 ))(pair$ (fun_app$ae ?v0 ?v2 )(fun_app$ad ?v1 ?v3 ))):pattern ((fun_app$ac (fun_app$az (map_prod$a ?v0 )?v1 )(pair$ ?v2 ?v3 ))))):named a143 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B$ ))(! (= (fun_app$ao (apsnd$e ?v0 )(pair$c ?v1 ?v2 ))(pair$c ?v1 (fun_app$ad ?v0 ?v2 ))):pattern ((fun_app$ao (apsnd$e ?v0 )(pair$c ?v1 ?v2 ))))):named a144 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$ac (apsnd$f ?v0 )(pair$ ?v1 ?v2 ))(pair$ ?v1 (fun_app$ad ?v0 ?v2 ))):pattern ((fun_app$ac (apsnd$f ?v0 )(pair$ ?v1 ?v2 ))))):named a145 ))
(check-sat )
;(get-unsat-core )
