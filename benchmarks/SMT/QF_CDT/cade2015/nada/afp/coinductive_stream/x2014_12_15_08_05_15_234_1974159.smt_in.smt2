;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_a_prod_a_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort B_a_prod_a_fun$ 0 )
(declare-sort B_a_prod_b_fun$ 0 )
(declare-sort A_a_a_b_prod_fun_fun$ 0 )
(declare-sort A_a_b_prod_a_fun_fun$ 0 )
(declare-sort A_b_a_b_prod_fun_fun$ 0 )
(declare-sort A_b_prod_a_a_fun_fun$ 0 )
(declare-sort A_a_b_prod_prod_a_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_a_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_b_prod_a_fun$ 0 )
(declare-sort B_a_prod_b_a_prod_fun$ 0 )
(declare-sort B_b_prod_b_b_prod_fun$ 0 )
(declare-sort A_a_b_prod_a_b_prod_fun_fun$ 0 )
(declare-sort A_b_prod_a_a_b_prod_fun_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_a_fun_fun$ 0 )
(declare-sort A_b_prod_b_a_b_prod_fun_fun$ 0 )
(declare-sort A_a_b_prod_prod_a_a_prod_fun$ 0 )
(declare-sort A_a_b_prod_prod_a_b_prod_fun$ 0 )
(declare-sort A_a_prod_a_b_prod_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_prod_a_fun$ 0 )
(declare-sort A_b_prod_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_b_prod_b_prod_a_a_prod_fun$ 0 )
(declare-sort A_b_prod_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_a_fun_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_a_b_prod_a_a_prod_fun_fun$ 0 )
(declare-sort B_b_fun_a_b_prod_a_b_prod_fun_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_a_a_prod_fun_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_a_b_prod_fun_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_prod_a_a_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_b_prod_a_b_prod_b_prod_fun$ 0 )
(declare-sort A_b_a_b_prod_fun_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_prod_a_a_b_prod_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_prod_a_b_prod_a_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_prod_a_b_prod_b_prod_fun$ 0 )
(declare-sort A_b_prod_b_prod_a_b_prod_a_b_prod_prod_fun$ 0 )
(declare-sort A_b_prod_b_prod_b_prod_a_b_prod_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun_a_b_prod_a_b_prod_prod_a_a_prod_fun_fun$ 0 )
(declare-sort A_b_prod_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_stream$ 0)
(declare-sort B_stream$ 0)
(declare-fun shd$a (A_b_prod_stream$)A_b_prod$)
(declare-fun stl$a (A_b_prod_stream$)A_b_prod_stream$)
(declare-fun sCons$a (A_b_prod$ A_b_prod_stream$ )A_b_prod_stream$)
(declare-fun shd$b (B_stream$)B$)
(declare-fun stl$b (B_stream$)B_stream$)
(declare-fun sCons$b (B$ B_stream$ )B_stream$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$a (A_a_prod$)A$)
(declare-fun snd$a (A_a_prod$)A$)
(declare-fun pair$a (A$ A$ )A_a_prod$)
(declare-sort A_a_prod_stream$ 0)
(declare-fun shd$c (A_a_prod_stream$)A_a_prod$)
(declare-fun stl$c (A_a_prod_stream$)A_a_prod_stream$)
(declare-fun sCons$c (A_a_prod$ A_a_prod_stream$ )A_a_prod_stream$)
(declare-sort A_a_b_prod_prod$ 0)
(declare-fun fst$b (A_a_b_prod_prod$)A$)
(declare-fun snd$b (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$b (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-sort A_a_b_prod_prod_stream$ 0)
(declare-fun shd$d (A_a_b_prod_prod_stream$)A_a_b_prod_prod$)
(declare-fun stl$d (A_a_b_prod_prod_stream$)A_a_b_prod_prod_stream$)
(declare-fun sCons$d (A_a_b_prod_prod$ A_a_b_prod_prod_stream$ )A_a_b_prod_prod_stream$)
(declare-sort A_b_prod_b_prod$ 0)
(declare-fun fst$c (A_b_prod_b_prod$)A_b_prod$)
(declare-fun snd$c (A_b_prod_b_prod$)B$)
(declare-fun pair$c (A_b_prod$ B$ )A_b_prod_b_prod$)
(declare-sort A_b_prod_b_prod_stream$ 0)
(declare-fun shd$e (A_b_prod_b_prod_stream$)A_b_prod_b_prod$)
(declare-fun stl$e (A_b_prod_b_prod_stream$)A_b_prod_b_prod_stream$)
(declare-fun sCons$e (A_b_prod_b_prod$ A_b_prod_b_prod_stream$ )A_b_prod_b_prod_stream$)
(declare-sort A_b_prod_a_b_prod_prod$ 0)
(declare-fun fst$d (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun snd$d (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$d (A_b_prod$ A_b_prod$ )A_b_prod_a_b_prod_prod$)
(declare-sort A_b_prod_a_b_prod_prod_stream$ 0)
(declare-fun shd$f (A_b_prod_a_b_prod_prod_stream$)A_b_prod_a_b_prod_prod$)
(declare-fun stl$f (A_b_prod_a_b_prod_prod_stream$)A_b_prod_a_b_prod_prod_stream$)
(declare-fun sCons$f (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_stream$ )A_b_prod_a_b_prod_prod_stream$)
(declare-sort A_b_prod_a_prod$ 0)
(declare-fun fst$e (A_b_prod_a_prod$)A_b_prod$)
(declare-fun snd$e (A_b_prod_a_prod$)A$)
(declare-fun pair$e (A_b_prod$ A$ )A_b_prod_a_prod$)
(declare-sort A_b_prod_a_prod_stream$ 0)
(declare-fun shd$g (A_b_prod_a_prod_stream$)A_b_prod_a_prod$)
(declare-fun stl$g (A_b_prod_a_prod_stream$)A_b_prod_a_prod_stream$)
(declare-fun sCons$g (A_b_prod_a_prod$ A_b_prod_a_prod_stream$ )A_b_prod_a_prod_stream$)
(declare-sort A_b_prod_b_prod_b_prod$ 0)
(declare-fun fst$f (A_b_prod_b_prod_b_prod$)A_b_prod_b_prod$)
(declare-fun snd$f (A_b_prod_b_prod_b_prod$)B$)
(declare-fun pair$f (A_b_prod_b_prod$ B$ )A_b_prod_b_prod_b_prod$)
(declare-sort A_b_prod_b_prod_b_prod_stream$ 0)
(declare-fun shd$h (A_b_prod_b_prod_b_prod_stream$)A_b_prod_b_prod_b_prod$)
(declare-fun stl$h (A_b_prod_b_prod_b_prod_stream$)A_b_prod_b_prod_b_prod_stream$)
(declare-fun sCons$h (A_b_prod_b_prod_b_prod$ A_b_prod_b_prod_b_prod_stream$ )A_b_prod_b_prod_b_prod_stream$)
(declare-sort A_b_prod_b_prod_a_b_prod_prod$ 0)
(declare-fun fst$g (A_b_prod_b_prod_a_b_prod_prod$)A_b_prod_b_prod$)
(declare-fun snd$g (A_b_prod_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$g (A_b_prod_b_prod$ A_b_prod$ )A_b_prod_b_prod_a_b_prod_prod$)
(declare-sort A_b_prod_b_prod_a_b_prod_prod_stream$ 0)
(declare-fun shd$i (A_b_prod_b_prod_a_b_prod_prod_stream$)A_b_prod_b_prod_a_b_prod_prod$)
(declare-fun stl$i (A_b_prod_b_prod_a_b_prod_prod_stream$)A_b_prod_b_prod_a_b_prod_prod_stream$)
(declare-fun sCons$i (A_b_prod_b_prod_a_b_prod_prod$ A_b_prod_b_prod_a_b_prod_prod_stream$ )A_b_prod_b_prod_a_b_prod_prod_stream$)
(declare-sort B_b_prod$ 0)
(declare-fun fst$h (B_b_prod$)B$)
(declare-fun snd$h (B_b_prod$)B$)
(declare-fun pair$h (B$ B$ )B_b_prod$)
(declare-sort B_b_prod_stream$ 0)
(declare-fun shd$j (B_b_prod_stream$)B_b_prod$)
(declare-fun stl$j (B_b_prod_stream$)B_b_prod_stream$)
(declare-fun sCons$j (B_b_prod$ B_b_prod_stream$ )B_b_prod_stream$)
(declare-sort B_a_prod$ 0)
(declare-fun fst$i (B_a_prod$)B$)
(declare-fun snd$i (B_a_prod$)A$)
(declare-fun pair$i (B$ A$ )B_a_prod$)
(declare-sort B_a_prod_stream$ 0)
(declare-fun shd$k (B_a_prod_stream$)B_a_prod$)
(declare-fun stl$k (B_a_prod_stream$)B_a_prod_stream$)
(declare-fun sCons$k (B_a_prod$ B_a_prod_stream$ )B_a_prod_stream$)
(declare-fun uu$ ()A_b_prod_a_fun$ )
(declare-fun xs$ ()A_stream$ )
(declare-fun ys$ ()B_stream$ )
(declare-fun uua$ (A_a_fun$ )A_b_prod_a_fun$ )
(declare-fun uub$ (A_a_fun$ )A_a_prod_a_fun$ )
(declare-fun uuc$ (A_b_prod_a_fun$ )A_b_prod_b_prod_a_fun$ )
(declare-fun uud$ (A_a_b_prod_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun uue$ (A_b_prod_a_fun$ )A_b_prod_a_b_prod_prod_a_fun$ )
(declare-fun uuf$ (A_b_prod_a_b_prod_fun$ )A_b_prod_b_prod_a_b_prod_fun$ )
(declare-fun uug$ (A_b_prod_a_b_prod_fun$ )A_b_prod_a_b_prod_prod_a_b_prod_fun$ )
(declare-fun uuh$ (A_b_prod_a_a_prod_fun$ )A_b_prod_a_b_prod_prod_a_a_prod_fun$ )
(declare-fun uui$ (B_b_fun$ )B_a_prod_b_fun$ )
(declare-fun uuj$ (B_a_fun$ )B_a_prod_a_fun$ )
(declare-fun uuk$ ()B_b_fun$ )
(declare-fun uul$ ()A_b_prod_a_b_prod_fun$ )
(declare-fun uum$ ()A_a_fun$ )
(declare-fun uun$ (A_b_prod_a_fun$ )A_b_a_b_prod_fun_fun_a_b_a_fun_fun_fun$ )
(declare-fun uuo$ (A_a_fun$ )A_b_a_fun_fun_a_b_a_fun_fun_fun$ )
(declare-fun uup$ (A_b_a_fun_fun$ )A_b_a_b_prod_fun_fun_a_b_a_fun_fun_fun$ )
(declare-fun uuq$ ()A_b_a_fun_fun$ )
(declare-fun smap$ (A_b_prod_a_fun$ A_b_prod_stream$ )A_stream$ )
(declare-fun szip$ (A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun apfst$ (A_a_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun apsnd$ (B_b_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun fstsp$ (A_b_prod_a_b_prod_prod$ A_b_prod$ )Bool )
(declare-fun smap$a (B_b_fun$ B_stream$ )B_stream$ )
(declare-fun smap$b (A_b_prod_a_b_prod_fun$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$c (A_b_fun$ A_stream$ )B_stream$ )
(declare-fun smap$d (A_a_prod_a_b_prod_fun$ A_a_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$e (B_a_fun$ B_stream$ )A_stream$ )
(declare-fun smap$f (A_b_prod_a_a_prod_fun$ A_b_prod_stream$ )A_a_prod_stream$ )
(declare-fun smap$g (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun smap$h (A_a_prod_a_a_prod_fun$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun smap$i (A_a_b_prod_prod_a_a_prod_fun$ A_a_b_prod_prod_stream$ )A_a_prod_stream$ )
(declare-fun smap$j (A_b_prod_b_prod_a_b_prod_b_prod_fun$ A_b_prod_b_prod_stream$ )A_b_prod_b_prod_stream$ )
(declare-fun smap$k (A_b_prod_b_fun$ A_b_prod_stream$ )B_stream$ )
(declare-fun smap$l (A_b_prod_a_b_prod_prod_a_b_prod_b_prod_fun$ A_b_prod_a_b_prod_prod_stream$ )A_b_prod_b_prod_stream$ )
(declare-fun smap$m (B_a_b_prod_fun$ B_stream$ )A_b_prod_stream$ )
(declare-fun smap$n (A_b_prod_b_prod_a_b_prod_a_b_prod_prod_fun$ A_b_prod_b_prod_stream$ )A_b_prod_a_b_prod_prod_stream$ )
(declare-fun smap$o (A_b_prod_a_b_prod_prod_a_b_prod_a_prod_fun$ A_b_prod_a_b_prod_prod_stream$ )A_b_prod_a_prod_stream$ )
(declare-fun smap$p (A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ A_b_prod_a_b_prod_prod_stream$ )A_b_prod_a_b_prod_prod_stream$ )
(declare-fun smap$q (A_b_prod_b_prod_a_b_prod_fun$ A_b_prod_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$r (A_a_b_prod_fun$ A_stream$ )A_b_prod_stream$ )
(declare-fun smap$s (A_b_prod_a_b_prod_b_prod_fun$ A_b_prod_stream$ )A_b_prod_b_prod_stream$ )
(declare-fun smap$t (A_b_prod_a_prod_a_a_prod_fun$ A_b_prod_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun smap$u (A_b_prod_a_b_prod_prod_a_a_b_prod_prod_fun$ A_b_prod_a_b_prod_prod_stream$ )A_a_b_prod_prod_stream$ )
(declare-fun smap$v (A_b_prod_b_prod_b_prod_a_b_prod_b_prod_fun$ A_b_prod_b_prod_b_prod_stream$ )A_b_prod_b_prod_stream$ )
(declare-fun smap$w (A_b_prod_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ A_b_prod_b_prod_a_b_prod_prod_stream$ )A_b_prod_a_b_prod_prod_stream$ )
(declare-fun smap$x (A_b_prod_a_b_prod_prod_a_a_prod_fun$ A_b_prod_a_b_prod_prod_stream$ )A_a_prod_stream$ )
(declare-fun smap$y (B_b_prod_b_b_prod_fun$ B_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun smap$z (B_a_prod_b_a_prod_fun$ B_a_prod_stream$ )B_a_prod_stream$ )
(declare-fun smap2$ (A_a_b_prod_a_b_prod_fun_fun$ A_stream$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun szip$a (A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun szip$b (A_stream$ A_b_prod_stream$ )A_a_b_prod_prod_stream$ )
(declare-fun szip$c (A_b_prod_stream$ B_stream$ )A_b_prod_b_prod_stream$ )
(declare-fun szip$d (A_b_prod_stream$ A_b_prod_stream$ )A_b_prod_a_b_prod_prod_stream$ )
(declare-fun szip$e (A_b_prod_stream$ A_stream$ )A_b_prod_a_prod_stream$ )
(declare-fun szip$f (A_b_prod_b_prod_stream$ B_stream$ )A_b_prod_b_prod_b_prod_stream$ )
(declare-fun szip$g (A_b_prod_b_prod_stream$ A_b_prod_stream$ )A_b_prod_b_prod_a_b_prod_prod_stream$ )
(declare-fun szip$h (B_stream$ B_stream$ )B_b_prod_stream$ )
(declare-fun szip$i (B_stream$ A_stream$ )B_a_prod_stream$ )
(declare-fun apfst$a (A_b_prod_a_fun$ )A_b_prod_b_prod_a_b_prod_fun$ )
(declare-fun apfst$b (A_a_fun$ )A_a_prod_a_a_prod_fun$ )
(declare-fun apfst$c (A_a_b_prod_fun$ )A_b_prod_a_b_prod_b_prod_fun$ )
(declare-fun apfst$d (A_b_prod_a_fun$ )A_b_prod_a_prod_a_a_prod_fun$ )
(declare-fun apfst$e (A_b_prod_a_fun$ )A_b_prod_a_b_prod_prod_a_a_b_prod_prod_fun$ )
(declare-fun apfst$f (A_b_prod_a_b_prod_fun$ )A_b_prod_b_prod_a_b_prod_b_prod_fun$ )
(declare-fun apfst$g (A_b_prod_a_b_prod_fun$ )A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ )
(declare-fun apfst$h (A_b_prod_b_prod_a_b_prod_fun$ )A_b_prod_b_prod_b_prod_a_b_prod_b_prod_fun$ )
(declare-fun apfst$i (A_b_prod_b_prod_a_b_prod_fun$ )A_b_prod_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ )
(declare-fun apsnd$a (A_b_fun$ )A_a_prod_a_b_prod_fun$ )
(declare-fun apsnd$b (B_a_fun$ )A_b_prod_a_a_prod_fun$ )
(declare-fun apsnd$c (A_a_fun$ )A_a_prod_a_a_prod_fun$ )
(declare-fun apsnd$d (A_b_prod_a_fun$ )A_a_b_prod_prod_a_a_prod_fun$ )
(declare-fun apsnd$e (B_b_fun$ )A_b_prod_b_prod_a_b_prod_b_prod_fun$ )
(declare-fun apsnd$f (A_b_prod_b_fun$ )A_b_prod_a_b_prod_prod_a_b_prod_b_prod_fun$ )
(declare-fun apsnd$g (B_a_b_prod_fun$ )A_b_prod_b_prod_a_b_prod_a_b_prod_prod_fun$ )
(declare-fun apsnd$h (A_b_prod_a_fun$ )A_b_prod_a_b_prod_prod_a_b_prod_a_prod_fun$ )
(declare-fun apsnd$i (A_b_prod_a_b_prod_fun$ )A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ )
(declare-fun fstsp$a (A_b_prod_b_prod$ A_b_prod$ )Bool )
(declare-fun fstsp$b (A_a_prod$ A$ )Bool )
(declare-fun fstsp$c (A_b_prod$ A$ )Bool )
(declare-fun smap$aa (A_a_prod_a_b_prod_b_prod_fun$ A_a_prod_stream$ )A_b_prod_b_prod_stream$ )
(declare-fun smap$ab (A_b_prod_b_prod_a_a_prod_fun$ A_b_prod_b_prod_stream$ )A_a_prod_stream$ )
(declare-fun smap$ac (A_a_prod_a_fun$ A_a_prod_stream$ )A_stream$ )
(declare-fun smap$ad (A_b_prod_b_prod_a_fun$ A_b_prod_b_prod_stream$ )A_stream$ )
(declare-fun smap$ae (A_b_prod_a_b_prod_prod_a_fun$ A_b_prod_a_b_prod_prod_stream$ )A_stream$ )
(declare-fun smap$af (A_b_prod_a_b_prod_prod_a_b_prod_fun$ A_b_prod_a_b_prod_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$ag (B_a_prod_b_fun$ B_a_prod_stream$ )B_stream$ )
(declare-fun smap$ah (B_a_prod_a_fun$ B_a_prod_stream$ )A_stream$ )
(declare-fun smap$ai (A_a_b_prod_prod_a_b_prod_fun$ A_a_b_prod_prod_stream$ )A_b_prod_stream$ )
(declare-fun smap$aj (A_a_b_prod_prod_a_fun$ A_a_b_prod_prod_stream$ )A_stream$ )
(declare-fun smap2$a (A_a_b_prod_a_fun_fun$ A_stream$ A_b_prod_stream$ )A_stream$ )
(declare-fun smap2$b (A_a_a_b_prod_fun_fun$ A_stream$ A_stream$ )A_b_prod_stream$ )
(declare-fun smap2$c (A_a_a_fun_fun$ A_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$d (A_b_a_b_prod_fun_fun$ A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun smap2$e (A_b_prod_b_a_b_prod_fun_fun$ A_b_prod_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun smap2$f (A_b_prod_a_b_prod_a_a_prod_fun_fun$ A_b_prod_stream$ A_b_prod_stream$ )A_a_prod_stream$ )
(declare-fun smap2$g (A_b_a_fun_fun$ A_stream$ B_stream$ )A_stream$ )
(declare-fun smap2$h (A_b_prod_a_a_fun_fun$ A_b_prod_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$i (A_b_prod_a_a_b_prod_fun_fun$ A_b_prod_stream$ A_stream$ )A_b_prod_stream$ )
(declare-fun smap2$j (A_b_prod_a_b_prod_a_fun_fun$ A_b_prod_stream$ A_b_prod_stream$ )A_stream$ )
(declare-fun smap2$k (A_b_prod_a_b_prod_a_b_prod_fun_fun$ A_b_prod_stream$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun fun_app$ (A_b_prod_a_fun$ A_b_prod$ )A$ )
(declare-fun fun_app$a (A_b_prod_a_b_prod_prod_a_b_prod_fun$ A_b_prod_a_b_prod_prod$ )A_b_prod$ )
(declare-fun fun_app$b (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod$ )
(declare-fun fun_app$c (A_b_prod_b_prod_a_b_prod_fun$ A_b_prod_b_prod$ )A_b_prod$ )
(declare-fun fun_app$d (A_b_prod_a_b_prod_prod_a_a_prod_fun$ A_b_prod_a_b_prod_prod$ )A_a_prod$ )
(declare-fun fun_app$e (A_b_prod_a_a_prod_fun$ A_b_prod$ )A_a_prod$ )
(declare-fun fun_app$f (A_b_prod_a_b_prod_prod_a_fun$ A_b_prod_a_b_prod_prod$ )A$ )
(declare-fun fun_app$g (A_b_prod_b_prod_a_fun$ A_b_prod_b_prod$ )A$ )
(declare-fun fun_app$h (B_a_prod_b_fun$ B_a_prod$ )B$ )
(declare-fun fun_app$i (B_b_fun$ B$ )B$ )
(declare-fun fun_app$j (B_a_prod_a_fun$ B_a_prod$ )A$ )
(declare-fun fun_app$k (B_a_fun$ B$ )A$ )
(declare-fun fun_app$l (A_a_b_prod_fun$ A$ )A_b_prod$ )
(declare-fun fun_app$m (A_a_fun$ A$ )A$ )
(declare-fun fun_app$n (A_a_prod_a_fun$ A_a_prod$ )A$ )
(declare-fun fun_app$o (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$p (A_b_a_b_prod_fun_fun_a_b_a_fun_fun_fun$ A_b_a_b_prod_fun_fun$ )A_b_a_fun_fun$ )
(declare-fun fun_app$q (B_a_b_prod_fun$ B$ )A_b_prod$ )
(declare-fun fun_app$r (A_b_a_b_prod_fun_fun$ A$ )B_a_b_prod_fun$ )
(declare-fun fun_app$s (A_b_a_fun_fun_a_b_a_fun_fun_fun$ A_b_a_fun_fun$ )A_b_a_fun_fun$ )
(declare-fun fun_app$t (B_b_fun_a_b_prod_a_b_prod_fun_fun$ B_b_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun fun_app$u (A_b_prod_a_fun_a_b_prod_a_b_prod_prod_a_a_prod_fun_fun$ A_b_prod_a_fun$ )A_b_prod_a_b_prod_prod_a_a_prod_fun$ )
(declare-fun fun_app$v (B_a_fun_a_b_prod_a_a_prod_fun_fun$ B_a_fun$ )A_b_prod_a_a_prod_fun$ )
(declare-fun fun_app$w (A_b_fun$ A$ )B$ )
(declare-fun fun_app$x (A_a_prod_a_b_prod_fun$ A_a_prod$ )A_b_prod$ )
(declare-fun fun_app$y (A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ A_b_prod_a_b_prod_prod$ )A_b_prod_a_b_prod_prod$ )
(declare-fun fun_app$z (A_b_prod_b_prod_a_b_prod_a_b_prod_prod_fun$ A_b_prod_b_prod$ )A_b_prod_a_b_prod_prod$ )
(declare-fun map_prod$ (A_a_fun$ )B_b_fun_a_b_prod_a_b_prod_fun_fun$ )
(declare-fun case_prod$ (A_b_a_fun_fun$ )A_b_prod_a_fun$ )
(declare-fun fun_app$aa (A_b_prod_a_b_prod_prod_a_b_prod_b_prod_fun$ A_b_prod_a_b_prod_prod$ )A_b_prod_b_prod$ )
(declare-fun fun_app$ab (A_b_prod_b_prod_a_b_prod_b_prod_fun$ A_b_prod_b_prod$ )A_b_prod_b_prod$ )
(declare-fun fun_app$ac (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod$ )
(declare-fun fun_app$ad (A_b_prod_a_prod_a_a_prod_fun$ A_b_prod_a_prod$ )A_a_prod$ )
(declare-fun fun_app$ae (A_b_prod_a_b_prod_b_prod_fun$ A_b_prod$ )A_b_prod_b_prod$ )
(declare-fun fun_app$af (A_b_prod_a_b_prod_prod_a_a_b_prod_prod_fun$ A_b_prod_a_b_prod_prod$ )A_a_b_prod_prod$ )
(declare-fun fun_app$ag (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$ah (A_a_a_b_prod_fun_fun$ A$ )A_a_b_prod_fun$ )
(declare-fun fun_app$ai (A_a_b_prod_a_fun_fun$ A$ )A_b_prod_a_fun$ )
(declare-fun fun_app$aj (A_a_b_prod_a_b_prod_fun_fun$ A$ )A_b_prod_a_b_prod_fun$ )
(declare-fun fun_app$ak (A_b_prod_a_a_fun_fun$ A_b_prod$ )A_a_fun$ )
(declare-fun fun_app$al (A_b_prod_a_a_b_prod_fun_fun$ A_b_prod$ )A_a_b_prod_fun$ )
(declare-fun fun_app$am (A_b_prod_a_b_prod_a_fun_fun$ A_b_prod$ )A_b_prod_a_fun$ )
(declare-fun fun_app$an (A_b_prod_a_b_prod_a_b_prod_fun_fun$ A_b_prod$ )A_b_prod_a_b_prod_fun$ )
(declare-fun map_prod$a (A_b_prod_a_fun$ )A_b_prod_a_fun_a_b_prod_a_b_prod_prod_a_a_prod_fun_fun$ )
(declare-fun map_prod$b (B_b_fun$ B_b_fun$ )B_b_prod_b_b_prod_fun$ )
(declare-fun map_prod$c (B_b_fun$ A_a_fun$ )B_a_prod_b_a_prod_fun$ )
(declare-fun map_prod$d (A_a_fun$ A_b_fun$ )A_a_prod_a_b_prod_fun$ )
(declare-fun map_prod$e (A_a_fun$ )B_a_fun_a_b_prod_a_a_prod_fun_fun$ )
(declare-fun map_prod$f (A_a_fun$ A_a_fun$ )A_a_prod_a_a_prod_fun$ )
(declare-fun map_prod$g (A_a_b_prod_fun$ A_b_fun$ )A_a_prod_a_b_prod_b_prod_fun$ )
(declare-fun map_prod$h (A_a_b_prod_fun$ B_b_fun$ )A_b_prod_a_b_prod_b_prod_fun$ )
(declare-fun map_prod$i (A_b_prod_a_fun$ B_a_fun$ )A_b_prod_b_prod_a_a_prod_fun$ )
(declare-fun case_prod$a (A_a_b_prod_a_b_prod_fun_fun$ )A_a_b_prod_prod_a_b_prod_fun$ )
(declare-fun case_prod$b (A_a_b_prod_a_fun_fun$ )A_a_b_prod_prod_a_fun$ )
(declare-fun case_prod$c (A_a_a_b_prod_fun_fun$ )A_a_prod_a_b_prod_fun$ )
(declare-fun case_prod$d (A_a_a_fun_fun$ )A_a_prod_a_fun$ )
(declare-fun case_prod$e (A_b_a_b_prod_fun_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun case_prod$f (A_b_prod_b_a_b_prod_fun_fun$ )A_b_prod_b_prod_a_b_prod_fun$ )
(declare-fun case_prod$g (A_b_prod_a_b_prod_a_a_prod_fun_fun$ )A_b_prod_a_b_prod_prod_a_a_prod_fun$ )
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_a_b_prod_prod$ ))(! (= (fun_app$a (uug$ ?v0 )?v1 )(fun_app$b ?v0 (fst$d ?v1 ))):pattern ((fun_app$a (uug$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_b_prod$ ))(! (= (fun_app$c (uuf$ ?v0 )?v1 )(fun_app$b ?v0 (fst$c ?v1 ))):pattern ((fun_app$c (uuf$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_b_prod_a_a_prod_fun$ )(?v1 A_b_prod_a_b_prod_prod$ ))(! (= (fun_app$d (uuh$ ?v0 )?v1 )(fun_app$e ?v0 (fst$d ?v1 ))):pattern ((fun_app$d (uuh$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_a_b_prod_prod$ ))(! (= (fun_app$f (uue$ ?v0 )?v1 )(fun_app$ ?v0 (fst$d ?v1 ))):pattern ((fun_app$f (uue$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_b_prod$ ))(! (= (fun_app$g (uuc$ ?v0 )?v1 )(fun_app$ ?v0 (fst$c ?v1 ))):pattern ((fun_app$g (uuc$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_a_prod$ ))(! (= (fun_app$h (uui$ ?v0 )?v1 )(fun_app$i ?v0 (fst$i ?v1 ))):pattern ((fun_app$h (uui$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_prod$ ))(! (= (fun_app$j (uuj$ ?v0 )?v1 )(fun_app$k ?v0 (fst$i ?v1 ))):pattern ((fun_app$j (uuj$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_b_prod$ ))(! (= (fun_app$b (uud$ ?v0 )?v1 )(fun_app$l ?v0 (fst$ ?v1 ))):pattern ((fun_app$b (uud$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_b_prod$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(fun_app$m ?v0 (fst$ ?v1 ))):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_prod$ ))(! (= (fun_app$n (uub$ ?v0 )?v1 )(fun_app$m ?v0 (fst$a ?v1 ))):pattern ((fun_app$n (uub$ ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$k (fun_app$o (fun_app$p (uup$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (case_prod$ ?v0 )(fun_app$q (fun_app$r ?v1 ?v2 )?v3 ))):pattern ((fun_app$k (fun_app$o (fun_app$p (uup$ ?v0 )?v1 )?v2 )?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$k (fun_app$o (fun_app$p (uun$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ ?v0 (fun_app$q (fun_app$r ?v1 ?v2 )?v3 ))):pattern ((fun_app$k (fun_app$o (fun_app$p (uun$ ?v0 )?v1 )?v2 )?v3 )))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_b_a_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$k (fun_app$o (fun_app$s (uuo$ ?v0 )?v1 )?v2 )?v3 )(fun_app$m ?v0 (fun_app$k (fun_app$o ?v1 ?v2 )?v3 ))):pattern ((fun_app$k (fun_app$o (fun_app$s (uuo$ ?v0 )?v1 )?v2 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ ))(! (= (fun_app$k (fun_app$o uuq$ ?v0 )?v1 )?v0 ):pattern ((fun_app$k (fun_app$o uuq$ ?v0 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$b uul$ ?v0 )?v0 ):pattern ((fun_app$b uul$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$i uuk$ ?v0 )?v0 ):pattern ((fun_app$i uuk$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$m uum$ ?v0 )?v0 ):pattern ((fun_app$m uum$ ?v0 )))):named a17 ))
(assert (! (not (= (smap$ uu$ (szip$ xs$ ys$ ))xs$ )):named a18 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_b_fun$ )(?v2 B_stream$ ))(= (szip$ ?v0 (smap$a ?v1 ?v2 ))(smap$b (apsnd$ ?v1 )(szip$ ?v0 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_b_fun$ )(?v2 A_stream$ ))(= (szip$ ?v0 (smap$c ?v1 ?v2 ))(smap$d (apsnd$a ?v1 )(szip$a ?v0 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_a_fun$ )(?v2 B_stream$ ))(= (szip$a ?v0 (smap$e ?v1 ?v2 ))(smap$f (apsnd$b ?v1 )(szip$ ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (szip$a ?v0 (smap$g ?v1 ?v2 ))(smap$h (apsnd$c ?v1 )(szip$a ?v0 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_b_prod_a_fun$ )(?v2 A_b_prod_stream$ ))(= (szip$a ?v0 (smap$ ?v1 ?v2 ))(smap$i (apsnd$d ?v1 )(szip$b ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 B_b_fun$ )(?v2 B_stream$ ))(= (szip$c ?v0 (smap$a ?v1 ?v2 ))(smap$j (apsnd$e ?v1 )(szip$c ?v0 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_b_fun$ )(?v2 A_b_prod_stream$ ))(= (szip$c ?v0 (smap$k ?v1 ?v2 ))(smap$l (apsnd$f ?v1 )(szip$d ?v0 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 B_a_b_prod_fun$ )(?v2 B_stream$ ))(= (szip$d ?v0 (smap$m ?v1 ?v2 ))(smap$n (apsnd$g ?v1 )(szip$c ?v0 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_a_fun$ )(?v2 A_b_prod_stream$ ))(= (szip$e ?v0 (smap$ ?v1 ?v2 ))(smap$o (apsnd$h ?v1 )(szip$d ?v0 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_a_b_prod_fun$ )(?v2 A_b_prod_stream$ ))(= (szip$d ?v0 (smap$b ?v1 ?v2 ))(smap$p (apsnd$i ?v1 )(szip$d ?v0 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (szip$ (smap$g ?v0 ?v1 )?v2 )(smap$b (apfst$ ?v0 )(szip$ ?v1 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ )(?v2 B_stream$ ))(= (szip$ (smap$ ?v0 ?v1 )?v2 )(smap$q (apfst$a ?v0 )(szip$c ?v1 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (szip$a (smap$g ?v0 ?v1 )?v2 )(smap$h (apfst$b ?v0 )(szip$a ?v1 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (szip$c (smap$r ?v0 ?v1 )?v2 )(smap$s (apfst$c ?v0 )(szip$ ?v1 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ )(?v2 A_stream$ ))(= (szip$a (smap$ ?v0 ?v1 )?v2 )(smap$t (apfst$d ?v0 )(szip$e ?v1 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_stream$ ))(= (szip$b (smap$ ?v0 ?v1 )?v2 )(smap$u (apfst$e ?v0 )(szip$d ?v1 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ )(?v2 B_stream$ ))(= (szip$c (smap$b ?v0 ?v1 )?v2 )(smap$j (apfst$f ?v0 )(szip$c ?v1 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_stream$ ))(= (szip$d (smap$b ?v0 ?v1 )?v2 )(smap$p (apfst$g ?v0 )(szip$d ?v1 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 A_b_prod_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_b_prod_stream$ )(?v2 B_stream$ ))(= (szip$c (smap$q ?v0 ?v1 )?v2 )(smap$v (apfst$h ?v0 )(szip$f ?v1 ?v2 )))):named a37 ))
(assert (! (forall ((?v0 A_b_prod_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_b_prod_stream$ )(?v2 A_b_prod_stream$ ))(= (szip$d (smap$q ?v0 ?v1 )?v2 )(smap$w (apfst$i ?v0 )(szip$g ?v1 ?v2 )))):named a38 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 B_b_fun$ )(?v3 B_stream$ ))(= (szip$ (smap$g ?v0 ?v1 )(smap$a ?v2 ?v3 ))(smap$b (fun_app$t (map_prod$ ?v0 )?v2 )(szip$ ?v1 ?v3 )))):named a39 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_a_fun$ )(?v3 A_b_prod_stream$ ))(= (szip$a (smap$ ?v0 ?v1 )(smap$ ?v2 ?v3 ))(smap$x (fun_app$u (map_prod$a ?v0 )?v2 )(szip$d ?v1 ?v3 )))):named a40 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 B_b_fun$ )(?v3 B_stream$ ))(= (szip$h (smap$a ?v0 ?v1 )(smap$a ?v2 ?v3 ))(smap$y (map_prod$b ?v0 ?v2 )(szip$h ?v1 ?v3 )))):named a41 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 A_a_fun$ )(?v3 A_stream$ ))(= (szip$i (smap$a ?v0 ?v1 )(smap$g ?v2 ?v3 ))(smap$z (map_prod$c ?v0 ?v2 )(szip$i ?v1 ?v3 )))):named a42 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A_b_fun$ )(?v3 A_stream$ ))(= (szip$ (smap$g ?v0 ?v1 )(smap$c ?v2 ?v3 ))(smap$d (map_prod$d ?v0 ?v2 )(szip$a ?v1 ?v3 )))):named a43 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 B_a_fun$ )(?v3 B_stream$ ))(= (szip$a (smap$g ?v0 ?v1 )(smap$e ?v2 ?v3 ))(smap$f (fun_app$v (map_prod$e ?v0 )?v2 )(szip$ ?v1 ?v3 )))):named a44 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A_a_fun$ )(?v3 A_stream$ ))(= (szip$a (smap$g ?v0 ?v1 )(smap$g ?v2 ?v3 ))(smap$h (map_prod$f ?v0 ?v2 )(szip$a ?v1 ?v3 )))):named a45 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 A_b_fun$ )(?v3 A_stream$ ))(= (szip$c (smap$r ?v0 ?v1 )(smap$c ?v2 ?v3 ))(smap$aa (map_prod$g ?v0 ?v2 )(szip$a ?v1 ?v3 )))):named a46 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 B_b_fun$ )(?v3 B_stream$ ))(= (szip$c (smap$r ?v0 ?v1 )(smap$a ?v2 ?v3 ))(smap$s (map_prod$h ?v0 ?v2 )(szip$ ?v1 ?v3 )))):named a47 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ )(?v2 B_a_fun$ )(?v3 B_stream$ ))(= (szip$a (smap$ ?v0 ?v1 )(smap$e ?v2 ?v3 ))(smap$ab (map_prod$i ?v0 ?v2 )(szip$c ?v1 ?v3 )))):named a48 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (smap$ (uua$ ?v0 )(szip$ ?v1 ?v2 ))(smap$g ?v0 ?v1 ))):named a49 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (smap$ac (uub$ ?v0 )(szip$a ?v1 ?v2 ))(smap$g ?v0 ?v1 ))):named a50 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ )(?v2 B_stream$ ))(= (smap$ad (uuc$ ?v0 )(szip$c ?v1 ?v2 ))(smap$ ?v0 ?v1 ))):named a51 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (smap$b (uud$ ?v0 )(szip$ ?v1 ?v2 ))(smap$r ?v0 ?v1 ))):named a52 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_stream$ ))(= (smap$ae (uue$ ?v0 )(szip$d ?v1 ?v2 ))(smap$ ?v0 ?v1 ))):named a53 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ )(?v2 B_stream$ ))(= (smap$q (uuf$ ?v0 )(szip$c ?v1 ?v2 ))(smap$b ?v0 ?v1 ))):named a54 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_stream$ ))(= (smap$af (uug$ ?v0 )(szip$d ?v1 ?v2 ))(smap$b ?v0 ?v1 ))):named a55 ))
(assert (! (forall ((?v0 A_b_prod_a_a_prod_fun$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_stream$ ))(= (smap$x (uuh$ ?v0 )(szip$d ?v1 ?v2 ))(smap$f ?v0 ?v1 ))):named a56 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (smap$ag (uui$ ?v0 )(szip$i ?v1 ?v2 ))(smap$a ?v0 ?v1 ))):named a57 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (smap$ah (uuj$ ?v0 )(szip$i ?v1 ?v2 ))(smap$e ?v0 ?v1 ))):named a58 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ )(?v1 A_b_prod$ ))(! (= (fstsp$ ?v0 ?v1 )(= ?v1 (fst$d ?v0 ))):pattern ((fstsp$ ?v0 ?v1 )))):named a59 ))
(assert (! (forall ((?v0 A_b_prod_b_prod$ )(?v1 A_b_prod$ ))(! (= (fstsp$a ?v0 ?v1 )(= ?v1 (fst$c ?v0 ))):pattern ((fstsp$a ?v0 ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A$ ))(! (= (fstsp$b ?v0 ?v1 )(= ?v1 (fst$a ?v0 ))):pattern ((fstsp$b ?v0 ?v1 )))):named a61 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A$ ))(! (= (fstsp$c ?v0 ?v1 )(= ?v1 (fst$ ?v0 ))):pattern ((fstsp$c ?v0 ?v1 )))):named a62 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ )(?v1 A_b_prod$ ))(=> (and (fstsp$ ?v0 ?v1 )(=> (= ?v1 (fst$d ?v0 ))false ))false )):named a63 ))
(assert (! (forall ((?v0 A_b_prod_b_prod$ )(?v1 A_b_prod$ ))(=> (and (fstsp$a ?v0 ?v1 )(=> (= ?v1 (fst$c ?v0 ))false ))false )):named a64 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A$ ))(=> (and (fstsp$b ?v0 ?v1 )(=> (= ?v1 (fst$a ?v0 ))false ))false )):named a65 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A$ ))(=> (and (fstsp$c ?v0 ?v1 )(=> (= ?v1 (fst$ ?v0 ))false ))false )):named a66 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ ))(fstsp$ ?v0 (fst$d ?v0 ))):named a67 ))
(assert (! (forall ((?v0 A_b_prod_b_prod$ ))(fstsp$a ?v0 (fst$c ?v0 ))):named a68 ))
(assert (! (forall ((?v0 A_a_prod$ ))(fstsp$b ?v0 (fst$a ?v0 ))):named a69 ))
(assert (! (forall ((?v0 A_b_prod$ ))(fstsp$c ?v0 (fst$ ?v0 ))):named a70 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 A_b_prod$ )(?v5 A_b_prod_stream$ ))(and (= ?v1 (sCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$ ?v0 ?v4 ))(= ?v3 (smap$ ?v0 ?v5 ))))))):named a71 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$a ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v1 (sCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$i ?v0 ?v4 ))(= ?v3 (smap$a ?v0 ?v5 ))))))):named a72 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$g ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$m ?v0 ?v4 ))(= ?v3 (smap$g ?v0 ?v5 ))))))):named a73 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (smap$r ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$l ?v0 ?v4 ))(= ?v3 (smap$r ?v0 ?v5 ))))))):named a74 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (smap$b ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(exists ((?v4 A_b_prod$ )(?v5 A_b_prod_stream$ ))(and (= ?v1 (sCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$b ?v0 ?v4 ))(= ?v3 (smap$b ?v0 ?v5 ))))))):named a75 ))
(assert (! (forall ((?v0 A_b_prod_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_b_prod_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (smap$q ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(exists ((?v4 A_b_prod_b_prod$ )(?v5 A_b_prod_b_prod_stream$ ))(and (= ?v1 (sCons$e ?v4 ?v5 ))(and (= ?v2 (fun_app$c ?v0 ?v4 ))(= ?v3 (smap$q ?v0 ?v5 ))))))):named a76 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_a_a_prod_fun$ )(?v1 A_b_prod_a_b_prod_prod_stream$ )(?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(= (= (smap$x ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(exists ((?v4 A_b_prod_a_b_prod_prod$ )(?v5 A_b_prod_a_b_prod_prod_stream$ ))(and (= ?v1 (sCons$f ?v4 ?v5 ))(and (= ?v2 (fun_app$d ?v0 ?v4 ))(= ?v3 (smap$x ?v0 ?v5 ))))))):named a77 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$e ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v1 (sCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$k ?v0 ?v4 ))(= ?v3 (smap$e ?v0 ?v5 ))))))):named a78 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$c ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v1 (sCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$w ?v0 ?v4 ))(= ?v3 (smap$c ?v0 ?v5 ))))))):named a79 ))
(assert (! (forall ((?v0 A_a_prod_a_fun$ )(?v1 A_a_prod_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$ac ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(exists ((?v4 A_a_prod$ )(?v5 A_a_prod_stream$ ))(and (= ?v1 (sCons$c ?v4 ?v5 ))(and (= ?v2 (fun_app$n ?v0 ?v4 ))(= ?v3 (smap$ac ?v0 ?v5 ))))))):named a80 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_fun_fun$ )(?v1 A_stream$ )(?v2 A_b_prod_stream$ ))(! (= (smap2$ ?v0 ?v1 ?v2 )(smap$ai (case_prod$a ?v0 )(szip$b ?v1 ?v2 ))):pattern ((smap2$ ?v0 ?v1 ?v2 )))):named a81 ))
(assert (! (forall ((?v0 A_a_b_prod_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_b_prod_stream$ ))(! (= (smap2$a ?v0 ?v1 ?v2 )(smap$aj (case_prod$b ?v0 )(szip$b ?v1 ?v2 ))):pattern ((smap2$a ?v0 ?v1 ?v2 )))):named a82 ))
(assert (! (forall ((?v0 A_a_a_b_prod_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(! (= (smap2$b ?v0 ?v1 ?v2 )(smap$d (case_prod$c ?v0 )(szip$a ?v1 ?v2 ))):pattern ((smap2$b ?v0 ?v1 ?v2 )))):named a83 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(! (= (smap2$c ?v0 ?v1 ?v2 )(smap$ac (case_prod$d ?v0 )(szip$a ?v1 ?v2 ))):pattern ((smap2$c ?v0 ?v1 ?v2 )))):named a84 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(! (= (smap2$d ?v0 ?v1 ?v2 )(smap$b (case_prod$e ?v0 )(szip$ ?v1 ?v2 ))):pattern ((smap2$d ?v0 ?v1 ?v2 )))):named a85 ))
(assert (! (forall ((?v0 A_b_prod_b_a_b_prod_fun_fun$ )(?v1 A_b_prod_stream$ )(?v2 B_stream$ ))(! (= (smap2$e ?v0 ?v1 ?v2 )(smap$q (case_prod$f ?v0 )(szip$c ?v1 ?v2 ))):pattern ((smap2$e ?v0 ?v1 ?v2 )))):named a86 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_a_a_prod_fun_fun$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_stream$ ))(! (= (smap2$f ?v0 ?v1 ?v2 )(smap$x (case_prod$g ?v0 )(szip$d ?v1 ?v2 ))):pattern ((smap2$f ?v0 ?v1 ?v2 )))):named a87 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(! (= (smap2$g ?v0 ?v1 ?v2 )(smap$ (case_prod$ ?v0 )(szip$ ?v1 ?v2 ))):pattern ((smap2$g ?v0 ?v1 ?v2 )))):named a88 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_prod$ ))(= (fst$ (fun_app$x (apsnd$a ?v0 )?v1 ))(fst$a ?v1 ))):named a89 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_a_b_prod_prod$ ))(= (fst$d (fun_app$y (apsnd$i ?v0 )?v1 ))(fst$d ?v1 ))):named a90 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 A_b_prod_b_prod$ ))(= (fst$d (fun_app$z (apsnd$g ?v0 )?v1 ))(fst$c ?v1 ))):named a91 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_a_b_prod_prod$ ))(= (fst$c (fun_app$aa (apsnd$f ?v0 )?v1 ))(fst$d ?v1 ))):named a92 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_prod_b_prod$ ))(= (fst$c (fun_app$ab (apsnd$e ?v0 )?v1 ))(fst$c ?v1 ))):named a93 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_prod$ ))(= (fst$a (fun_app$e (apsnd$b ?v0 )?v1 ))(fst$ ?v1 ))):named a94 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_prod$ ))(= (fst$a (fun_app$ac (apsnd$c ?v0 )?v1 ))(fst$a ?v1 ))):named a95 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_prod$ ))(= (fst$ (fun_app$b (apsnd$ ?v0 )?v1 ))(fst$ ?v1 ))):named a96 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_a_prod$ )(?v2 A_b_prod_a_fun$ ))(= (= (fun_app$ad (apfst$d ?v0 )?v1 )(fun_app$ad (apfst$d ?v2 )?v1 ))(= (fun_app$ ?v0 (fst$e ?v1 ))(fun_app$ ?v2 (fst$e ?v1 ))))):named a97 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_b_prod$ )(?v2 A_a_b_prod_fun$ ))(= (= (fun_app$ae (apfst$c ?v0 )?v1 )(fun_app$ae (apfst$c ?v2 )?v1 ))(= (fun_app$l ?v0 (fst$ ?v1 ))(fun_app$l ?v2 (fst$ ?v1 ))))):named a98 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_a_b_prod_prod$ )(?v2 A_b_prod_a_fun$ ))(= (= (fun_app$af (apfst$e ?v0 )?v1 )(fun_app$af (apfst$e ?v2 )?v1 ))(= (fun_app$ ?v0 (fst$d ?v1 ))(fun_app$ ?v2 (fst$d ?v1 ))))):named a99 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_b_prod$ )(?v2 A_b_prod_a_b_prod_fun$ ))(= (= (fun_app$ab (apfst$f ?v0 )?v1 )(fun_app$ab (apfst$f ?v2 )?v1 ))(= (fun_app$b ?v0 (fst$c ?v1 ))(fun_app$b ?v2 (fst$c ?v1 ))))):named a100 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_prod$ )(?v2 A_a_fun$ ))(= (= (fun_app$ac (apfst$b ?v0 )?v1 )(fun_app$ac (apfst$b ?v2 )?v1 ))(= (fun_app$m ?v0 (fst$a ?v1 ))(fun_app$m ?v2 (fst$a ?v1 ))))):named a101 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_b_prod$ )(?v2 A_b_prod_a_fun$ ))(= (= (fun_app$c (apfst$a ?v0 )?v1 )(fun_app$c (apfst$a ?v2 )?v1 ))(= (fun_app$ ?v0 (fst$c ?v1 ))(fun_app$ ?v2 (fst$c ?v1 ))))):named a102 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_b_prod$ )(?v2 A_a_fun$ ))(= (= (fun_app$b (apfst$ ?v0 )?v1 )(fun_app$b (apfst$ ?v2 )?v1 ))(= (fun_app$m ?v0 (fst$ ?v1 ))(fun_app$m ?v2 (fst$ ?v1 ))))):named a103 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_a_b_prod_prod$ ))(= (fst$b (fun_app$af (apfst$e ?v0 )?v1 ))(fun_app$ ?v0 (fst$d ?v1 )))):named a104 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_a_b_prod_prod$ ))(= (fst$d (fun_app$y (apfst$g ?v0 )?v1 ))(fun_app$b ?v0 (fst$d ?v1 )))):named a105 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_b_prod$ ))(= (fst$c (fun_app$ae (apfst$c ?v0 )?v1 ))(fun_app$l ?v0 (fst$ ?v1 )))):named a106 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_b_prod$ ))(= (fst$c (fun_app$ab (apfst$f ?v0 )?v1 ))(fun_app$b ?v0 (fst$c ?v1 )))):named a107 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_a_prod$ ))(= (fst$a (fun_app$ad (apfst$d ?v0 )?v1 ))(fun_app$ ?v0 (fst$e ?v1 )))):named a108 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_prod$ ))(= (fst$a (fun_app$ac (apfst$b ?v0 )?v1 ))(fun_app$m ?v0 (fst$a ?v1 )))):named a109 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_b_prod$ ))(= (fst$ (fun_app$c (apfst$a ?v0 )?v1 ))(fun_app$ ?v0 (fst$c ?v1 )))):named a110 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_b_prod$ ))(= (fst$ (fun_app$b (apfst$ ?v0 )?v1 ))(fun_app$m ?v0 (fst$ ?v1 )))):named a111 ))
(assert (! (forall ((?v0 A_b_prod_b_prod$ )(?v1 A_b_prod_b_prod_stream$ )(?v2 A_b_prod_b_prod$ )(?v3 A_b_prod_b_prod_stream$ ))(= (= (sCons$e ?v0 ?v1 )(sCons$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a112 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(= (= (sCons$c ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a113 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ )(?v1 A_b_prod_a_b_prod_prod_stream$ )(?v2 A_b_prod_a_b_prod_prod$ )(?v3 A_b_prod_a_b_prod_prod_stream$ ))(= (= (sCons$f ?v0 ?v1 )(sCons$f ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a114 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (sCons$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a115 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a116 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a117 ))
(assert (! (forall ((?v0 B_stream$ ))(= (smap$a uuk$ ?v0 )?v0 )):named a118 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(= (smap$b uul$ ?v0 )?v0 )):named a119 ))
(assert (! (forall ((?v0 A_stream$ ))(= (smap$g uum$ ?v0 )?v0 )):named a120 ))
(assert (! (forall ((?v0 A_b_prod$ ))(= (fun_app$b (fun_app$t (map_prod$ uum$ )uuk$ )?v0 )?v0 )):named a121 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_a_fun$ )(?v2 A_b_prod_a_b_prod_prod$ ))(= (fst$a (fun_app$d (fun_app$u (map_prod$a ?v0 )?v1 )?v2 ))(fun_app$ ?v0 (fst$d ?v2 )))):named a122 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_prod$ ))(= (fst$ (fun_app$b (fun_app$t (map_prod$ ?v0 )?v1 )?v2 ))(fun_app$m ?v0 (fst$ ?v2 )))):named a123 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_stream$ )(?v3 B_stream$ ))(= (smap$ ?v0 (smap2$d ?v1 ?v2 ?v3 ))(smap2$g (fun_app$p (uun$ ?v0 )?v1 )?v2 ?v3 ))):named a124 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_b_a_fun_fun$ )(?v2 A_stream$ )(?v3 B_stream$ ))(= (smap$g ?v0 (smap2$g ?v1 ?v2 ?v3 ))(smap2$g (fun_app$s (uuo$ ?v0 )?v1 )?v2 ?v3 ))):named a125 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_prod_a_fun$ )(?v2 A_b_prod_b_prod$ ))(= (fun_app$b (apsnd$ ?v0 )(fun_app$c (apfst$a ?v1 )?v2 ))(fun_app$c (apfst$a ?v1 )(fun_app$ab (apsnd$e ?v0 )?v2 )))):named a126 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_a_fun$ )(?v2 A_b_prod$ ))(= (fun_app$b (apsnd$ ?v0 )(fun_app$b (apfst$ ?v1 )?v2 ))(fun_app$b (apfst$ ?v1 )(fun_app$b (apsnd$ ?v0 )?v2 )))):named a127 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 B$ )(?v4 B_stream$ ))(! (= (smap2$g ?v0 (sCons$ ?v1 ?v2 )(sCons$b ?v3 ?v4 ))(sCons$ (fun_app$k (fun_app$o ?v0 ?v1 )?v3 )(smap2$g ?v0 ?v2 ?v4 ))):pattern ((smap2$g ?v0 (sCons$ ?v1 ?v2 )(sCons$b ?v3 ?v4 ))))):named a128 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$c ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$ (fun_app$m (fun_app$ag ?v0 ?v1 )?v3 )(smap2$c ?v0 ?v2 ?v4 ))):pattern ((smap2$c ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a129 ))
(assert (! (forall ((?v0 A_a_a_b_prod_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$b ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$a (fun_app$l (fun_app$ah ?v0 ?v1 )?v3 )(smap2$b ?v0 ?v2 ?v4 ))):pattern ((smap2$b ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a130 ))
(assert (! (forall ((?v0 A_a_b_prod_a_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A_b_prod$ )(?v4 A_b_prod_stream$ ))(! (= (smap2$a ?v0 (sCons$ ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$ (fun_app$ (fun_app$ai ?v0 ?v1 )?v3 )(smap2$a ?v0 ?v2 ?v4 ))):pattern ((smap2$a ?v0 (sCons$ ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a131 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A_b_prod$ )(?v4 A_b_prod_stream$ ))(! (= (smap2$ ?v0 (sCons$ ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$a (fun_app$b (fun_app$aj ?v0 ?v1 )?v3 )(smap2$ ?v0 ?v2 ?v4 ))):pattern ((smap2$ ?v0 (sCons$ ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a132 ))
(assert (! (forall ((?v0 A_b_prod_a_a_fun_fun$ )(?v1 A_b_prod$ )(?v2 A_b_prod_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$h ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$ (fun_app$m (fun_app$ak ?v0 ?v1 )?v3 )(smap2$h ?v0 ?v2 ?v4 ))):pattern ((smap2$h ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a133 ))
(assert (! (forall ((?v0 A_b_prod_a_a_b_prod_fun_fun$ )(?v1 A_b_prod$ )(?v2 A_b_prod_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$i ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$a (fun_app$l (fun_app$al ?v0 ?v1 )?v3 )(smap2$i ?v0 ?v2 ?v4 ))):pattern ((smap2$i ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a134 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_a_fun_fun$ )(?v1 A_b_prod$ )(?v2 A_b_prod_stream$ )(?v3 A_b_prod$ )(?v4 A_b_prod_stream$ ))(! (= (smap2$j ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$ (fun_app$ (fun_app$am ?v0 ?v1 )?v3 )(smap2$j ?v0 ?v2 ?v4 ))):pattern ((smap2$j ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a135 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_a_b_prod_fun_fun$ )(?v1 A_b_prod$ )(?v2 A_b_prod_stream$ )(?v3 A_b_prod$ )(?v4 A_b_prod_stream$ ))(! (= (smap2$k ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$a (fun_app$b (fun_app$an ?v0 ?v1 )?v3 )(smap2$k ?v0 ?v2 ?v4 ))):pattern ((smap2$k ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a136 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$ (case_prod$ ?v0 )(fun_app$b (case_prod$e ?v1 )?v2 ))(fun_app$ (case_prod$ (fun_app$p (uup$ ?v0 )?v1 ))?v2 ))):named a137 ))
(assert (! (forall ((?v0 A_b_prod$ ))(= (fst$ ?v0 )(fun_app$ (case_prod$ uuq$ )?v0 ))):named a138 ))
(assert (! (forall ((?v0 A_b_prod$ ))(= (fun_app$b (fun_app$t (map_prod$ uum$ )uuk$ )?v0 )?v0 )):named a139 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_b_a_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$m ?v0 (fun_app$ (case_prod$ ?v1 )?v2 ))(fun_app$ (case_prod$ (fun_app$s (uuo$ ?v0 )?v1 ))?v2 ))):named a140 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a141 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(=> (forall ((?v1 A_b_prod$ )(?v2 A_b_prod_stream$ ))(=> (= ?v0 (sCons$a ?v1 ?v2 ))false ))false )):named a142 ))
(check-sat )
;(get-unsat-core )
