;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun less$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lstrict_prefix$ ()A_llist_a_llist_bool_fun_fun$ )
(assert (! (not (= less$ lstrict_prefix$ )):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$ (fun_app$a less$ ?v0 )?v1 )(fun_app$ (fun_app$a lstrict_prefix$ ?v0 )?v1 )):pattern ((fun_app$ (fun_app$a less$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (forall ((?v2 A_llist$ ))(=> (forall ((?v3 A_llist$ ))(=> (fun_app$ (fun_app$a lstrict_prefix$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (= ?v0 (fun_app$b ?v1 ?v2 ))(and (fun_app$ (fun_app$a less$ ?v2 )?v3 )(forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (fun_app$ (fun_app$a less$ ?v4 )?v5 )(fun_app$ (fun_app$a less$ (fun_app$b ?v1 ?v4 ))(fun_app$b ?v1 ?v5 ))))))(fun_app$ (fun_app$a less$ ?v0 )(fun_app$b ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(=> (not false )(fun_app$ (fun_app$a less$ ?v1 )?v0 )))false )):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(and (= (fun_app$b ?v2 ?v1 )?v3 )(forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (fun_app$ (fun_app$a less$ ?v4 )?v5 )(fun_app$ (fun_app$a less$ (fun_app$b ?v2 ?v4 ))(fun_app$b ?v2 ?v5 ))))))(fun_app$ (fun_app$a less$ (fun_app$b ?v2 ?v0 ))?v3 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(and (fun_app$ (fun_app$a less$ (fun_app$b ?v2 ?v1 ))?v3 )(forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (fun_app$ (fun_app$a less$ ?v4 )?v5 )(fun_app$ (fun_app$a less$ (fun_app$b ?v2 ?v4 ))(fun_app$b ?v2 ?v5 ))))))(fun_app$ (fun_app$a less$ (fun_app$b ?v2 ?v0 ))?v3 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(not (fun_app$ (fun_app$a less$ ?v0 )?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(not (fun_app$ (fun_app$a less$ ?v0 )?v0 ))):named a10 ))
(check-sat )
;(get-unsat-core )
