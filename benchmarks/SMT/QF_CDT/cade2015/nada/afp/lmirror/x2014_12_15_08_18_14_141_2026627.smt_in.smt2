;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun acca$ ()A_llist$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun xs_a$ ()B_llist$ )
(declare-fun acc_a$ ()B_llist$ )
(declare-fun lmap$a (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$b (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$b (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$c (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$d (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$e (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$f (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$g (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun lappend$a (B_llist$ B_llist$ )B_llist$ )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(declare-fun llist_all2$a (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun llist_all2$b (B_a_bool_fun_fun$ B_llist$ A_llist$ )Bool )
(declare-fun llist_all2$c (B_b_bool_fun_fun$ B_llist$ B_llist$ )Bool )
(declare-fun lmirror_aux$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lmirror_aux$a (B_llist$ )B_llist_b_llist_fun$ )
(assert (! (not (= (llength$ (fun_app$ (lmirror_aux$ acca$ )xsa$ ))(llength$a (fun_app$a (lmirror_aux$a acc_a$ )xs_a$ )))):named a0 ))
(assert (! (llist_all2$ p$ acca$ acc_a$ ):named a1 ))
(assert (! (llist_all2$ p$ (fun_app$ (lmirror_aux$ acca$ )xsa$ )(fun_app$a (lmirror_aux$a acc_a$ )xs_a$ )):named a2 ))
(assert (! (lfinite$ acca$ ):named a3 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (and (llist_all2$a ?v0 ?v1 ?v2 )(llist_all2$a ?v0 ?v3 ?v4 ))(llist_all2$a ?v0 (fun_app$ (lmirror_aux$ ?v1 )?v3 )(fun_app$ (lmirror_aux$ ?v2 )?v4 )))):named a4 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_llist$ )(?v4 B_llist$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(llist_all2$ ?v0 ?v3 ?v4 ))(llist_all2$ ?v0 (fun_app$ (lmirror_aux$ ?v1 )?v3 )(fun_app$a (lmirror_aux$a ?v2 )?v4 )))):named a5 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist$ )(?v4 A_llist$ ))(=> (and (llist_all2$b ?v0 ?v1 ?v2 )(llist_all2$b ?v0 ?v3 ?v4 ))(llist_all2$b ?v0 (fun_app$a (lmirror_aux$a ?v1 )?v3 )(fun_app$ (lmirror_aux$ ?v2 )?v4 )))):named a6 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_llist$ )(?v4 B_llist$ ))(=> (and (llist_all2$c ?v0 ?v1 ?v2 )(llist_all2$c ?v0 ?v3 ?v4 ))(llist_all2$c ?v0 (fun_app$a (lmirror_aux$a ?v1 )?v3 )(fun_app$a (lmirror_aux$a ?v2 )?v4 )))):named a7 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (llist_all2$a ?v0 ?v1 ?v2 )(= (llength$ ?v1 )(llength$ ?v2 )))):named a8 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (llist_all2$b ?v0 ?v1 ?v2 )(= (llength$a ?v1 )(llength$ ?v2 )))):named a9 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (llist_all2$c ?v0 ?v1 ?v2 )(= (llength$a ?v1 )(llength$a ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (llist_all2$ ?v0 ?v1 ?v2 )(= (llength$ ?v1 )(llength$a ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lmirror_aux$ ?v0 )lNil$ )?v0 ):pattern ((lmirror_aux$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$a (lmirror_aux$a ?v0 )lNil$a )?v0 ):pattern ((lmirror_aux$a ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$ (lmirror_aux$ ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v1 (fun_app$ (lmirror_aux$ (lCons$ ?v1 ?v0 ))?v2 ))):pattern ((fun_app$ (lmirror_aux$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (fun_app$a (lmirror_aux$a ?v0 )(lCons$a ?v1 ?v2 ))(lCons$a ?v1 (fun_app$a (lmirror_aux$a (lCons$a ?v1 ?v0 ))?v2 ))):pattern ((fun_app$a (lmirror_aux$a ?v0 )(lCons$a ?v1 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (fun_app$ (lmirror_aux$ ?v0 )?v1 )))(or (not (lnull$ ?v1 ))(not (lnull$ ?v0 ))))):named a16 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$a (fun_app$a (lmirror_aux$a ?v0 )?v1 )))(or (not (lnull$a ?v1 ))(not (lnull$a ?v0 ))))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (lmirror_aux$ ?v0 )?v1 ))(and (lnull$ ?v1 )(lnull$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$a (fun_app$a (lmirror_aux$a ?v0 )?v1 ))(and (lnull$a ?v1 )(lnull$a ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$ (lmirror_aux$ ?v0 )?v1 ))(and (lfinite$ ?v1 )(lfinite$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lfinite$a (fun_app$a (lmirror_aux$a ?v0 )?v1 ))(and (lfinite$a ?v1 )(lfinite$a ?v0 )))):named a21 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(not (lnull$ (fun_app$ (lmirror_aux$ ?v1 )?v0 ))))):named a22 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (or (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))(not (lnull$a (fun_app$a (lmirror_aux$a ?v1 )?v0 ))))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lnull$ ?v0 )(lnull$ ?v1 ))(lnull$ (fun_app$ (lmirror_aux$ ?v1 )?v0 )))):named a24 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (lnull$a ?v0 )(lnull$a ?v1 ))(lnull$a (fun_app$a (lmirror_aux$a ?v1 )?v0 )))):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ (lmirror_aux$ (lappend$ ?v0 ?v1 ))?v2 )(lappend$ (fun_app$ (lmirror_aux$ ?v0 )?v2 )?v1 ))):named a26 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$a (lmirror_aux$a (lappend$a ?v0 ?v1 ))?v2 )(lappend$a (fun_app$a (lmirror_aux$a ?v0 )?v2 )?v1 ))):named a27 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (fun_app$ (lmirror_aux$ ?v1 )?v0 )?v0 )):pattern ((fun_app$ (lmirror_aux$ ?v1 )?v0 )))):named a28 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (=> (not (lfinite$a ?v0 ))(= (fun_app$a (lmirror_aux$a ?v1 )?v0 )?v0 )):pattern ((fun_app$a (lmirror_aux$a ?v1 )?v0 )))):named a29 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lmap$ ?v0 (fun_app$ (lmirror_aux$ ?v1 )?v2 ))(fun_app$ (lmirror_aux$ (lmap$ ?v0 ?v1 ))(lmap$ ?v0 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lmap$a ?v0 (fun_app$ (lmirror_aux$ ?v1 )?v2 ))(fun_app$a (lmirror_aux$a (lmap$a ?v0 ?v1 ))(lmap$a ?v0 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (lmap$b ?v0 (fun_app$a (lmirror_aux$a ?v1 )?v2 ))(fun_app$ (lmirror_aux$ (lmap$b ?v0 ?v1 ))(lmap$b ?v0 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (lmap$c ?v0 (fun_app$a (lmirror_aux$a ?v1 )?v2 ))(fun_app$a (lmirror_aux$a (lmap$c ?v0 ?v1 ))(lmap$c ?v0 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a34 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a35 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 B$ )(?v4 B_llist$ ))(! (= (llist_all2$c ?v0 (lCons$a ?v1 ?v2 )(lCons$a ?v3 ?v4 ))(and (fun_app$b (fun_app$c ?v0 ?v1 )?v3 )(llist_all2$c ?v0 ?v2 ?v4 ))):pattern ((llist_all2$c ?v0 (lCons$a ?v1 ?v2 )(lCons$a ?v3 ?v4 ))))):named a36 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (llist_all2$b ?v0 (lCons$a ?v1 ?v2 )(lCons$ ?v3 ?v4 ))(and (fun_app$d (fun_app$e ?v0 ?v1 )?v3 )(llist_all2$b ?v0 ?v2 ?v4 ))):pattern ((llist_all2$b ?v0 (lCons$a ?v1 ?v2 )(lCons$ ?v3 ?v4 ))))):named a37 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (llist_all2$a ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))(and (fun_app$d (fun_app$f ?v0 ?v1 )?v3 )(llist_all2$a ?v0 ?v2 ?v4 ))):pattern ((llist_all2$a ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))))):named a38 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 B$ )(?v4 B_llist$ ))(! (= (llist_all2$ ?v0 (lCons$ ?v1 ?v2 )(lCons$a ?v3 ?v4 ))(and (fun_app$b (fun_app$g ?v0 ?v1 )?v3 )(llist_all2$ ?v0 ?v2 ?v4 ))):pattern ((llist_all2$ ?v0 (lCons$ ?v1 ?v2 )(lCons$a ?v3 ?v4 ))))):named a39 ))
(check-sat )
;(get-unsat-core )
