;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Num$ 0)
(declare-fun one$ ()Num$)
(declare-fun select$ (Num$)Num$)
(declare-fun bit0$ (Num$ )Num$)
(declare-fun selecta$ (Num$)Num$)
(declare-fun bit1$ (Num$ )Num$)
(declare-fun xsa$ ()A_llist$ )
(declare-fun acca$ ()A_llist$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun zero$ ()Enat$ )
(declare-fun epred$ (Enat$ )Enat$ )
(declare-fun plus$a (Num$ Num$ )Num$ )
(declare-fun times$ (Enat$ Enat$ )Enat$ )
(declare-fun times$a (Num$ Num$ )Num$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun numeral$ (Num$ )Enat$ )
(declare-fun lmirror_aux$ (A_llist$ A_llist$ )A_llist$ )
(assert (! (not (and (= (= (llength$ (lmirror_aux$ acca$ xsa$ ))zero$ )(= (plus$ (times$ (numeral$ (bit0$ one$ ))(llength$ xsa$ ))(llength$ acca$ ))zero$ ))(=> (and (not (= (llength$ (lmirror_aux$ acca$ xsa$ ))zero$ ))(not (= (plus$ (times$ (numeral$ (bit0$ one$ ))(llength$ xsa$ ))(llength$ acca$ ))zero$ )))(or (exists ((?v0 A_llist$ )(?v1 A_llist$ ))(and (= (epred$ (llength$ (lmirror_aux$ acca$ xsa$ )))(llength$ (lmirror_aux$ ?v0 ?v1 )))(= (epred$ (plus$ (times$ (numeral$ (bit0$ one$ ))(llength$ xsa$ ))(llength$ acca$ )))(plus$ (times$ (numeral$ (bit0$ one$ ))(llength$ ?v1 ))(llength$ ?v0 )))))(= (epred$ (llength$ (lmirror_aux$ acca$ xsa$ )))(epred$ (plus$ (times$ (numeral$ (bit0$ one$ ))(llength$ xsa$ ))(llength$ acca$ )))))))):named a0 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Num$ ))(= (times$ (plus$ ?v0 ?v1 )(numeral$ ?v2 ))(plus$ (times$ ?v0 (numeral$ ?v2 ))(times$ ?v1 (numeral$ ?v2 ))))):named a1 ))
(assert (! (forall ((?v0 Num$ )(?v1 Enat$ )(?v2 Enat$ ))(= (times$ (numeral$ ?v0 )(plus$ ?v1 ?v2 ))(plus$ (times$ (numeral$ ?v0 )?v1 )(times$ (numeral$ ?v0 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (times$ ?v0 ?v1 )zero$ )(or (= ?v0 zero$ )(= ?v1 zero$ )))):named a3 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit0$ ?v0 )one$ )false )):named a4 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit0$ ?v0 ))false )):named a5 ))
(assert (! (forall ((?v0 Enat$ ))(= (times$ (numeral$ (bit0$ one$ ))?v0 )(plus$ ?v0 ?v0 ))):named a6 ))
(assert (! (forall ((?v0 Enat$ ))(= (times$ ?v0 (numeral$ (bit0$ one$ )))(plus$ ?v0 ?v0 ))):named a7 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ )(?v2 Enat$ ))(= (times$ (numeral$ ?v0 )(times$ (numeral$ ?v1 )?v2 ))(times$ (numeral$ (times$a ?v0 ?v1 ))?v2 ))):named a8 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (times$ (numeral$ ?v0 )(numeral$ ?v1 ))(numeral$ (times$a ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ )(?v2 Enat$ ))(= (plus$ (numeral$ ?v0 )(plus$ (numeral$ ?v1 )?v2 ))(plus$ (numeral$ (plus$a ?v0 ?v1 ))?v2 ))):named a10 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (plus$ (numeral$ ?v0 )(numeral$ ?v1 ))(numeral$ (plus$a ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Enat$ ))(= (times$ zero$ ?v0 )zero$ )):named a15 ))
(check-sat )
;(get-unsat-core )
