;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun acca$ ()A_llist$ )
(declare-fun xs_a$ ()B_llist$ )
(declare-fun acc_a$ ()B_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun fun_app$ (B_bool_fun$ B$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$d (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun iterates$a (B_b_fun$ B$ )B_llist$ )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(declare-fun llist_all2$a (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun llist_all2$b (B_a_bool_fun_fun$ B_llist$ A_llist$ )Bool )
(declare-fun llist_all2$c (B_b_bool_fun_fun$ B_llist$ B_llist$ )Bool )
(declare-fun lmirror_aux$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lmirror_aux$a (B_llist$ B_llist$ )B_llist$ )
(assert (! (not (fun_app$ (fun_app$a p$ (lhd$ xsa$ ))(lhd$a xs_a$ ))):named a0 ))
(assert (! (not (lnull$ xsa$ )):named a1 ))
(assert (! (not (lnull$a xs_a$ )):named a2 ))
(assert (! (llist_all2$ p$ acca$ acc_a$ ):named a3 ))
(assert (! (llist_all2$ p$ (lmirror_aux$ acca$ xsa$ )(lmirror_aux$a acc_a$ xs_a$ )):named a4 ))
(assert (! (lfinite$ acca$ ):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lhd$ (lmirror_aux$ ?v0 ?v1 ))(ite (lnull$ ?v1 )(lhd$ ?v0 )(lhd$ ?v1 )))):named a6 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lhd$a (lmirror_aux$a ?v0 ?v1 ))(ite (lnull$a ?v1 )(lhd$a ?v0 )(lhd$a ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (=> (or (lnull$ ?v0 )(not (fun_app$b ?v1 (lhd$ ?v0 ))))false )(=> (and (not (lnull$ ?v0 ))(fun_app$b ?v1 (lhd$ ?v0 )))false ))false )):named a8 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_bool_fun$ ))(=> (and (=> (or (lnull$a ?v0 )(not (fun_app$ ?v1 (lhd$a ?v0 ))))false )(=> (and (not (lnull$a ?v0 ))(fun_app$ ?v1 (lhd$a ?v0 )))false ))false )):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a10 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (=> (and (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (or (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (llist_all2$a ?v0 ?v1 ?v2 )(not (lnull$ ?v2 )))(fun_app$b (fun_app$c ?v0 (lhd$ ?v1 ))(lhd$ ?v2 )))):named a12 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (and (llist_all2$b ?v0 ?v1 ?v2 )(not (lnull$ ?v2 )))(fun_app$b (fun_app$d ?v0 (lhd$a ?v1 ))(lhd$ ?v2 )))):named a13 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (llist_all2$c ?v0 ?v1 ?v2 )(not (lnull$a ?v2 )))(fun_app$ (fun_app$e ?v0 (lhd$a ?v1 ))(lhd$a ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(not (lnull$a ?v2 )))(fun_app$ (fun_app$a ?v0 (lhd$ ?v1 ))(lhd$a ?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (llist_all2$a ?v0 ?v1 ?v2 )(not (lnull$ ?v1 )))(fun_app$b (fun_app$c ?v0 (lhd$ ?v1 ))(lhd$ ?v2 )))):named a16 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (and (llist_all2$b ?v0 ?v1 ?v2 )(not (lnull$a ?v1 )))(fun_app$b (fun_app$d ?v0 (lhd$a ?v1 ))(lhd$ ?v2 )))):named a17 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (llist_all2$c ?v0 ?v1 ?v2 )(not (lnull$a ?v1 )))(fun_app$ (fun_app$e ?v0 (lhd$a ?v1 ))(lhd$a ?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(not (lnull$ ?v1 )))(fun_app$ (fun_app$a ?v0 (lhd$ ?v1 ))(lhd$a ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (lmirror_aux$ ?v0 ?v1 )))(or (not (lnull$ ?v1 ))(not (lnull$ ?v0 ))))):named a20 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$a (lmirror_aux$a ?v0 ?v1 )))(or (not (lnull$a ?v1 ))(not (lnull$a ?v0 ))))):named a21 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (lmirror_aux$ ?v0 ?v1 ))(and (lnull$ ?v1 )(lnull$ ?v0 )))):named a22 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$a (lmirror_aux$a ?v0 ?v1 ))(and (lnull$a ?v1 )(lnull$a ?v0 )))):named a23 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (lhd$ (iterates$ ?v0 ?v1 ))?v1 )):named a24 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (lhd$a (iterates$a ?v0 ?v1 ))?v1 )):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(not (lnull$ (lmirror_aux$ ?v1 ?v0 ))))):named a26 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (or (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))(not (lnull$a (lmirror_aux$a ?v1 ?v0 ))))):named a27 ))
(check-sat )
;(get-unsat-core )
