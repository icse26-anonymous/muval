;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun acca$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun xs_a$ ()B_llist$ )
(declare-fun acc_a$ ()B_llist$ )
(declare-fun llcp$a (B_llist$ )B_llist_enat_fun$ )
(declare-fun lmap$a (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$b (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun infinity$ ()Enat$ )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun lprefix$a (B_llist$ B_llist$ )Bool )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun llist_all2$a (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun llist_all2$b (B_a_bool_fun_fun$ B_llist$ A_llist$ )Bool )
(declare-fun llist_all2$c (B_b_bool_fun_fun$ B_llist$ B_llist$ )Bool )
(declare-fun lmirror_aux$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun ltakeWhile$a (B_bool_fun$ B_llist$ )B_llist$ )
(declare-fun lmirror_aux$a (B_llist$ B_llist$ )B_llist$ )
(assert (! (not (= (llength$ xsa$ )(llength$a xs_a$ ))):named a0 ))
(assert (! (= (llength$ acca$ )(llength$a acc_a$ )):named a1 ))
(assert (! (= (llength$ (lmirror_aux$ acca$ xsa$ ))(llength$a (lmirror_aux$a acc_a$ xs_a$ ))):named a2 ))
(assert (! (llist_all2$ p$ (lmirror_aux$ acca$ xsa$ )(lmirror_aux$a acc_a$ xs_a$ )):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (lmirror_aux$ ?v0 ?v1 ))(and (lfinite$ ?v1 )(lfinite$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lfinite$a (lmirror_aux$a ?v0 ?v1 ))(and (lfinite$a ?v1 )(lfinite$a ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$a (llcp$a ?v0 )?v0 )(llength$a ?v0 )):pattern ((llcp$a ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$ ?v1 ))):named a8 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$ (lmap$a ?v0 ?v1 ))(llength$a ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$b ?v0 ?v1 ))(llength$ ?v1 ))):named a10 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$a (lmap$c ?v0 ?v1 ))(llength$a ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(= (llength$ ?v0 )(llength$ ?v1 )))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(= (llength$a ?v0 )(llength$a ?v1 )))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (lmirror_aux$ ?v1 ?v0 )?v0 )):pattern ((lmirror_aux$ ?v1 ?v0 )))):named a14 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (=> (not (lfinite$a ?v0 ))(= (lmirror_aux$a ?v1 ?v0 )?v0 )):pattern ((lmirror_aux$a ?v1 ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (llength$ (ltakeWhile$ ?v0 ?v1 ))(llength$ ?v1 ))(= (ltakeWhile$ ?v0 ?v1 )?v1 ))):named a16 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_llist$ ))(= (= (llength$a (ltakeWhile$a ?v0 ?v1 ))(llength$a ?v1 ))(= (ltakeWhile$a ?v0 ?v1 )?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (llist_all2$a ?v0 ?v1 ?v2 )(= (llength$ ?v1 )(llength$ ?v2 )))):named a18 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (llist_all2$b ?v0 ?v1 ?v2 )(= (llength$a ?v1 )(llength$ ?v2 )))):named a19 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (llist_all2$c ?v0 ?v1 ?v2 )(= (llength$a ?v1 )(llength$a ?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (llist_all2$ ?v0 ?v1 ?v2 )(= (llength$ ?v1 )(llength$a ?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_llist$ ))(= (= (llength$ ?v0 )infinity$ )(not (lfinite$ ?v0 )))):named a22 ))
(assert (! (forall ((?v0 B_llist$ ))(= (= (llength$a ?v0 )infinity$ )(not (lfinite$a ?v0 )))):named a23 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (llength$ ?v0 )infinity$ )):pattern ((llength$ ?v0 )))):named a24 ))
(assert (! (forall ((?v0 B_llist$ ))(! (=> (not (lfinite$a ?v0 ))(= (llength$a ?v0 )infinity$ )):pattern ((llength$a ?v0 )))):named a25 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ ?v0 )(exists ((?v1 Nat$ ))(= (llength$ ?v0 )(enat$ ?v1 ))))):named a26 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lfinite$a ?v0 )(exists ((?v1 Nat$ ))(= (llength$a ?v0 )(enat$ ?v1 ))))):named a27 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (= (llength$ ?v0 )(enat$ ?v1 ))(lfinite$ ?v0 ))):named a28 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Nat$ ))(=> (= (llength$a ?v0 )(enat$ ?v1 ))(lfinite$a ?v0 ))):named a29 ))
(assert (! (lfinite$ acca$ ):named a30 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a31 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a32 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a33 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a34 ))
(check-sat )
;(get-unsat-core )
