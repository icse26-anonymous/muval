;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun n$ ()A$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_list$ )
(declare-fun zs$ ()A_list$ )
(declare-fun set$ (A_list$ )A_set$ )
(declare-fun xs$a ()A_list$ )
(declare-fun xs$b ()A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun graph$ ()A_a_bool_fun_fun$ )
(declare-fun paths$ (A_a_bool_fun_fun$ )A_llist_set$ )
(declare-fun append$ (A_list$ A_list$ )A_list$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(assert (! (not (lfinite$ (lCons$ n$ (llist_of$ ys$ )))):named a0 ))
(assert (! (not (= n$ x$ )):named a1 ))
(assert (! (lfinite$ xs$ ):named a2 ))
(assert (! (=> (forall ((?v0 A_list$ ))(=> (= xs$ (llist_of$ ?v0 ))false ))false ):named a3 ))
(assert (! (= xs$ (llist_of$ xs$a )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a6 ))
(assert (! (not (member$ n$ (set$ zs$ ))):named a7 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (member$a (lCons$ n$ xs$b )(paths$ graph$ )):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (lfinite$ ?v0 )(lfinite$ (lCons$ ?v1 ?v0 )))):named a12 ))
(assert (! (member$ n$ (lset$ xs$ )):named a13 ))
(assert (! (= xs$a (append$ ys$ (cons$ n$ zs$ ))):named a14 ))
(assert (! (not (member$ x$ (lset$ xs$ ))):named a15 ))
(assert (! (member$ x$ (lset$ xs$b )):named a16 ))
(assert (! (member$ n$ (set$ xs$a )):named a17 ))
(check-sat )
;(get-unsat-core )
