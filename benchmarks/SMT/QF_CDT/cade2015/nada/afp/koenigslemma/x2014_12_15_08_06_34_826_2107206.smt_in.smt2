;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Node$ 0 )
(declare-sort Node_set$ 0 )
(declare-sort Node_llist_set$ 0 )
(declare-sort Node_node_bool_fun_fun$ 0 )
(declare-sort Node_node_set_prod_bool_fun$ 0 )
(declare-sort Node_llist$ 0)
(declare-fun lNil$ ()Node_llist$)
(declare-fun lhd$ (Node_llist$)Node$)
(declare-fun ltl$ (Node_llist$)Node_llist$)
(declare-fun lCons$ (Node$ Node_llist$ )Node_llist$)
(declare-sort Node_node_set_prod$ 0)
(declare-fun fst$ (Node_node_set_prod$)Node$)
(declare-fun snd$ (Node_node_set_prod$)Node_set$)
(declare-fun pair$ (Node$ Node_set$ )Node_node_set_prod$)
(declare-fun f$ (Node_node_set_prod$ )Node_llist$ )
(declare-fun na$ ()Node$ )
(declare-fun ns$ ()Node_set$ )
(declare-fun bot$ ()Node_set$ )
(declare-fun nsa$ ()Node_set$ )
(declare-fun graph$ ()Node_node_bool_fun_fun$ )
(declare-fun lnull$ (Node_llist$ )Bool )
(declare-fun member$ (Node_llist$ Node_llist_set$ )Bool )
(declare-fun fun_app$ (Node_node_set_prod_bool_fun$ Node_node_set_prod$ )Bool )
(declare-fun connected$ (Node_node_bool_fun_fun$ )Bool )
(assert (! (not (not (lnull$ (f$ (pair$ na$ nsa$ ))))):named a0 ))
(assert (! (connected$ graph$ ):named a1 ))
(assert (! (= ns$ bot$ ):named a2 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ )(?v2 Node$ )(?v3 Node_set$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ )(?v2 Node$ )(?v3 Node_set$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 Node_llist$ )(?v1 Node_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a5 ))
(assert (! (forall ((?v0 Node_llist_set$ ))(=> (and (=> (forall ((?v1 Node_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 Node_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a6 ))
(assert (! (forall ((?v0 Node_llist$ )(?v1 Node_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a7 ))
(assert (! (forall ((?v0 Node_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a8 ))
(assert (! (forall ((?v0 Node_node_set_prod$ ))(=> (forall ((?v1 Node$ )(?v2 Node_set$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a9 ))
(assert (! (forall ((?v0 Node_node_set_prod$ ))(exists ((?v1 Node$ )(?v2 Node_set$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ )(?v2 Node$ )(?v3 Node_set$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a11 ))
(assert (! (forall ((?v0 Node_node_set_prod$ ))(=> (forall ((?v1 Node$ )(?v2 Node_set$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a12 ))
(assert (! (forall ((?v0 Node_node_set_prod_bool_fun$ )(?v1 Node_node_set_prod$ ))(=> (forall ((?v2 Node$ )(?v3 Node_set$ ))(fun_app$ ?v0 (pair$ ?v2 ?v3 )))(fun_app$ ?v0 ?v1 ))):named a13 ))
(check-sat )
;(get-unsat-core )
