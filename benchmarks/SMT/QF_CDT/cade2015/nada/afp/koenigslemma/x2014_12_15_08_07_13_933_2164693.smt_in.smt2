;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Node$ 0 )
(declare-sort Node_bool_fun$ 0 )
(declare-sort Node_llist_set$ 0 )
(declare-sort Node_node_bool_fun_fun$ 0 )
(declare-sort Node_list_node_list_fun$ 0 )
(declare-sort Node_llist$ 0)
(declare-fun lNil$ ()Node_llist$)
(declare-fun lhd$ (Node_llist$)Node$)
(declare-fun ltl$ (Node_llist$)Node_llist$)
(declare-fun lCons$ (Node$ Node_llist$ )Node_llist$)
(declare-sort Node_list$ 0)
(declare-fun nil$ ()Node_list$)
(declare-fun hd$ (Node_list$)Node$)
(declare-fun tl$ (Node_list$)Node_list$)
(declare-fun cons$ (Node$ Node_list$ )Node_list$)
(declare-fun n$ ()Node$ )
(declare-fun n$a ()Node$ )
(declare-fun xs$ ()Node_list$ )
(declare-fun graph$ ()Node_node_bool_fun_fun$ )
(declare-fun paths$ (Node_node_bool_fun_fun$ )Node_llist_set$ )
(declare-fun append$ (Node_list$ )Node_list_node_list_fun$ )
(declare-fun member$ (Node_llist$ Node_llist_set$ )Bool )
(declare-fun fun_app$ (Node_list_node_list_fun$ Node_list$ )Node_list$ )
(declare-fun fun_app$a (Node_bool_fun$ Node$ )Bool )
(declare-fun fun_app$b (Node_node_bool_fun_fun$ Node$ )Node_bool_fun$ )
(declare-fun llist_of$ (Node_list$ )Node_llist$ )
(declare-fun connected$ (Node_node_bool_fun_fun$ )Bool )
(assert (! (not (member$ (lCons$ n$ (llist_of$ (fun_app$ (append$ xs$ )(cons$ n$a nil$ ))))(paths$ graph$ ))):named a0 ))
(assert (! (connected$ graph$ ):named a1 ))
(assert (! (not (= n$ n$a )):named a2 ))
(assert (! (member$ (llist_of$ (cons$ n$ (fun_app$ (append$ xs$ )(cons$ n$a nil$ ))))(paths$ graph$ )):named a3 ))
(assert (! (=> (forall ((?v0 Node_list$ ))(=> (member$ (llist_of$ (cons$ n$ (fun_app$ (append$ ?v0 )(cons$ n$a nil$ ))))(paths$ graph$ ))false ))false ):named a4 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_llist$ )(?v2 Node_node_bool_fun_fun$ ))(=> (member$ (lCons$ ?v0 ?v1 )(paths$ ?v2 ))(member$ ?v1 (paths$ ?v2 )))):named a5 ))
(assert (! (forall ((?v0 Node_node_bool_fun_fun$ )(?v1 Node$ )(?v2 Node$ )(?v3 Node_llist$ ))(=> (and (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )(member$ (lCons$ ?v2 ?v3 )(paths$ ?v0 )))(member$ (lCons$ ?v1 (lCons$ ?v2 ?v3 ))(paths$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Node_list$ )(?v1 Node$ )(?v2 Node_list$ )(?v3 Node$ ))(= (= (fun_app$ (append$ ?v0 )(cons$ ?v1 nil$ ))(fun_app$ (append$ ?v2 )(cons$ ?v3 nil$ )))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 Node_node_bool_fun_fun$ ))(= (connected$ ?v0 )(forall ((?v1 Node$ )(?v2 Node$ ))(exists ((?v3 Node_list$ ))(member$ (llist_of$ (cons$ ?v1 (fun_app$ (append$ ?v3 )(cons$ ?v2 nil$ ))))(paths$ ?v0 )))))):named a8 ))
(assert (! (forall ((?v0 Node_node_bool_fun_fun$ )(?v1 Node$ )(?v2 Node$ ))(=> (connected$ ?v0 )(exists ((?v3 Node_list$ ))(member$ (llist_of$ (cons$ ?v1 (fun_app$ (append$ ?v3 )(cons$ ?v2 nil$ ))))(paths$ ?v0 ))))):named a9 ))
(assert (! (forall ((?v0 Node_list$ )(?v1 Node_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )?v1 )(= ?v0 nil$ ))):named a10 ))
(assert (! (forall ((?v0 Node_list$ )(?v1 Node_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )?v0 )(= ?v1 nil$ ))):named a11 ))
(assert (! (forall ((?v0 Node_list$ )(?v1 Node_list$ ))(= (= ?v0 (fun_app$ (append$ ?v1 )?v0 ))(= ?v1 nil$ ))):named a12 ))
(assert (! (forall ((?v0 Node_list$ )(?v1 Node_list$ ))(= (= ?v0 (fun_app$ (append$ ?v0 )?v1 ))(= ?v1 nil$ ))):named a13 ))
(assert (! (forall ((?v0 Node_list$ )(?v1 Node_list$ ))(= (= nil$ (fun_app$ (append$ ?v0 )?v1 ))(and (= ?v0 nil$ )(= ?v1 nil$ )))):named a14 ))
(assert (! (forall ((?v0 Node_list$ )(?v1 Node_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )nil$ )(and (= ?v0 nil$ )(= ?v1 nil$ )))):named a15 ))
(assert (! (forall ((?v0 Node_list$ ))(! (= (fun_app$ (append$ ?v0 )nil$ )?v0 ):pattern ((append$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 Node_list$ )(?v1 Node$ )(?v2 Node_llist$ ))(= (= (llist_of$ ?v0 )(lCons$ ?v1 ?v2 ))(exists ((?v3 Node_list$ ))(and (= ?v0 (cons$ ?v1 ?v3 ))(= ?v2 (llist_of$ ?v3 )))))):named a17 ))
(check-sat )
;(get-unsat-core )
