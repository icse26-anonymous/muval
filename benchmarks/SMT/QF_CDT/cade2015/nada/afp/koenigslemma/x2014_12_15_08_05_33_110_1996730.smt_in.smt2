;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun n$ ()A$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_list$ )
(declare-fun zs$ ()A_list$ )
(declare-fun set$ (A_list$ )A_set$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xs$b ()A_list$ )
(declare-fun xs$c ()A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun graph$ ()A_a_bool_fun_fun$ )
(declare-fun paths$ (A_a_bool_fun_fun$ )A_llist_set$ )
(declare-fun append$ (A_list$ A_list$ )A_list$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(assert (! (not (member$ (lappend$ (lCons$ n$ (llist_of$ ys$ ))(lappend$ (lCons$ n$ (lappend$ (llist_of$ zs$ )(lCons$ x$ lNil$ )))xs$ ))(paths$ graph$ ))):named a0 ))
(assert (! (= xs$a (llist_of$ xs$b )):named a1 ))
(assert (! (not (= n$ x$ )):named a2 ))
(assert (! (=> (forall ((?v0 A_list$ ))(=> (= xs$a (llist_of$ ?v0 ))false ))false ):named a3 ))
(assert (! (member$ (lCons$ n$ xs$c )(paths$ graph$ )):named a4 ))
(assert (! (= xs$c (lappend$ xs$a (lCons$ x$ xs$ ))):named a5 ))
(assert (! (= xs$b (append$ ys$ (cons$ n$ zs$ ))):named a6 ))
(assert (! (not (member$a n$ (set$ zs$ ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_bool_fun_fun$ ))(= (member$ ?v0 (paths$ ?v1 ))(or (= ?v0 lNil$ )(or (exists ((?v2 A$ ))(= ?v0 (lCons$ ?v2 lNil$ )))(exists ((?v2 A$ )(?v3 A$ )(?v4 A_llist$ ))(and (= ?v0 (lCons$ ?v2 (lCons$ ?v3 ?v4 )))(and (fun_app$ (fun_app$a ?v1 ?v2 )?v3 )(member$ (lCons$ ?v3 ?v4 )(paths$ ?v1 ))))))))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (member$ (lappend$ ?v0 ?v1 )(paths$ ?v2 ))(member$ ?v0 (paths$ ?v2 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (member$ (lCons$ ?v0 ?v1 )(paths$ ?v2 ))(member$ ?v1 (paths$ ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_bool_fun_fun$ ))(=> (and (member$ ?v0 (paths$ ?v1 ))(and (=> (= ?v0 lNil$ )false )(and (forall ((?v2 A$ ))(=> (= ?v0 (lCons$ ?v2 lNil$ ))false ))(forall ((?v2 A$ )(?v3 A$ )(?v4 A_llist$ ))(=> (and (= ?v0 (lCons$ ?v2 (lCons$ ?v3 ?v4 )))(and (fun_app$ (fun_app$a ?v1 ?v2 )?v3 )(member$ (lCons$ ?v3 ?v4 )(paths$ ?v1 ))))false )))))false )):named a11 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (and (fun_app$b ?v0 ?v1 )(forall ((?v3 A_llist$ ))(=> (fun_app$b ?v0 ?v3 )(or (= ?v3 lNil$ )(or (exists ((?v4 A$ ))(= ?v3 (lCons$ ?v4 lNil$ )))(exists ((?v4 A$ )(?v5 A$ )(?v6 A_llist$ ))(and (= ?v3 (lCons$ ?v4 (lCons$ ?v5 ?v6 )))(and (fun_app$ (fun_app$a ?v2 ?v4 )?v5 )(or (fun_app$b ?v0 (lCons$ ?v5 ?v6 ))(member$ (lCons$ ?v5 ?v6 )(paths$ ?v2 )))))))))))(member$ ?v1 (paths$ ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_llist$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(member$ (lCons$ ?v2 ?v3 )(paths$ ?v0 )))(member$ (lCons$ ?v1 (lCons$ ?v2 ?v3 ))(paths$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_bool_fun_fun$ ))(member$ (lCons$ ?v0 lNil$ )(paths$ ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ ))(member$ lNil$ (paths$ ?v0 ))):named a15 ))
(assert (! (member$a x$ (lset$ xs$c )):named a16 ))
(assert (! (not (member$a x$ (lset$ xs$a ))):named a17 ))
(check-sat )
;(get-unsat-core )
