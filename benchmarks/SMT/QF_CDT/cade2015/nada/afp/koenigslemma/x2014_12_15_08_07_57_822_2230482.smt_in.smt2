;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Node$ 0 )
(declare-sort Node_set$ 0 )
(declare-sort Node_node_bool_fun_fun$ 0 )
(declare-sort Node_llist$ 0)
(declare-fun lNil$ ()Node_llist$)
(declare-fun lhd$ (Node_llist$)Node$)
(declare-fun ltl$ (Node_llist$)Node_llist$)
(declare-fun lCons$ (Node$ Node_llist$ )Node_llist$)
(declare-sort Node_node_set_prod$ 0)
(declare-fun fst$ (Node_node_set_prod$)Node$)
(declare-fun snd$ (Node_node_set_prod$)Node_set$)
(declare-fun pair$ (Node$ Node_set$ )Node_node_set_prod$)
(declare-fun f$ (Node_node_set_prod$ )Node_llist$ )
(declare-fun na$ ()Node$ )
(declare-fun nsa$ ()Node_set$ )
(declare-fun top$ ()Node_set$ )
(declare-fun graph$ ()Node_node_bool_fun_fun$ )
(declare-fun lnull$ (Node_llist$ )Bool )
(declare-fun finite$ (Node_set$ )Bool )
(declare-fun insert$ (Node$ Node_set$ )Node_set$ )
(declare-fun member$ (Node$ Node_set$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun uminus$ (Node_set$ )Node_set$ )
(declare-fun connected$ (Node_node_bool_fun_fun$ )Bool )
(declare-fun reachable_via$ (Node_node_bool_fun_fun$ Node_set$ Node$ )Node_set$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (=> (and (finite$ nsa$ )(not (finite$ (reachable_via$ graph$ (uminus$ (insert$ na$ nsa$ ))na$ ))))thesis$ ):named a1 ))
(assert (! (connected$ graph$ ):named a2 ))
(assert (! (not (lnull$ (f$ (pair$ na$ nsa$ )))):named a3 ))
(assert (! (and (not (finite$ (reachable_via$ graph$ (uminus$ (insert$ na$ nsa$ ))na$ )))(finite$ nsa$ )):named a4 ))
(assert (! (not (finite$ top$ )):named a5 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ ))(= (finite$ (insert$ ?v0 ?v1 ))(finite$ ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Node_set$ )(?v1 Node_set$ ))(= (= (uminus$ ?v0 )(uminus$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ ))(= (member$ ?v0 (uminus$ ?v1 ))(not (member$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ ))(=> (=> (member$ ?v0 ?v1 )false )(member$ ?v0 (uminus$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node$ )(?v2 Node_set$ ))(= (member$ ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ )(?v2 Node$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$ ?v2 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Node_set$ )(?v1 Node_set$ ))(= (= (uminus$ ?v0 )(uminus$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Node_set$ ))(= (uminus$ (uminus$ ?v0 ))?v0 )):named a14 ))
(check-sat )
;(get-unsat-core )
