;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_llist_set$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_llist_llist_set$ 0 )
(declare-sort A_llist_llist_a_llist_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort A_llist_llist_llist$ 0)
(declare-sort A_llist_llist_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun lNil$c ()A_llist_llist_llist_llist$)
(declare-fun lhd$c (A_llist_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun ltl$c (A_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun lCons$c (A_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$)
(declare-fun n$ ()A$ )
(declare-fun x$ ()A$ )
(declare-fun n$a ()A$ )
(declare-fun ns$ ()A_set$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun graph$ ()A_a_bool_fun_fun$ )
(declare-fun lset$a (A_llist_llist_llist_llist$ )A_llist_llist_llist_set$ )
(declare-fun lset$b (A_llist_llist_llist$ )A_llist_llist_set$ )
(declare-fun lset$c (A_llist_llist$ )A_llist_set$ )
(declare-fun paths$ (A_a_bool_fun_fun$ )A_llist_set$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun paths$a (A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ )A_llist_llist_llist_llist_set$ )
(declare-fun paths$b (A_llist_llist_a_llist_llist_bool_fun_fun$ )A_llist_llist_llist_set$ )
(declare-fun paths$c (A_llist_a_llist_bool_fun_fun$ )A_llist_llist_set$ )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (A_llist_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun less_eq$ (A_set$ A_set$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun member$b (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_set$ )Bool )
(declare-fun member$c (A_llist_llist_llist$ A_llist_llist_llist_set$ )Bool )
(declare-fun member$d (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun fun_app$a (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist$ )A_llist_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$e (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun less_eq$a (A_llist_llist_llist_set$ A_llist_llist_llist_set$ )Bool )
(declare-fun less_eq$b (A_llist_llist_set$ A_llist_llist_set$ )Bool )
(declare-fun less_eq$c (A_llist_set$ A_llist_set$ )Bool )
(declare-fun reachable_via$ (A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ A_llist_llist_llist_set$ A_llist_llist_llist$ )A_llist_llist_llist_set$ )
(declare-fun reachable_via$a (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist_set$ A_llist_llist$ )A_llist_llist_set$ )
(declare-fun reachable_via$b (A_llist_a_llist_bool_fun_fun$ A_llist_set$ A_llist$ )A_llist_set$ )
(declare-fun reachable_via$c (A_a_bool_fun_fun$ A_set$ A$ )A_set$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (member$ (lCons$ n$ ?v0 )(paths$ graph$ ))(and (less_eq$ (lset$ ?v0 )(lset$ xs$ ))(and (member$a x$ (lset$ ?v0 ))(not (member$a n$ (lset$ ?v0 ))))))thesis$ )):named a1 ))
(assert (! (not (= x$ n$ )):named a2 ))
(assert (! (member$a x$ (lset$ xs$a )):named a3 ))
(assert (! (=> (not (= n$ x$ ))(exists ((?v0 A_llist$ ))(and (member$ (lCons$ n$ ?v0 )(paths$ graph$ ))(and (less_eq$ (lset$ ?v0 )(lset$ xs$ ))(and (member$a x$ (lset$ ?v0 ))(not (member$a n$ (lset$ ?v0 )))))))):named a4 ))
(assert (! (member$a x$ (lset$ xs$ )):named a5 ))
(assert (! (= xs$a (lCons$ n$ xs$ )):named a6 ))
(assert (! (member$ (lCons$ n$ xs$ )(paths$ graph$ )):named a7 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ )(?v2 A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ )(?v3 A_llist_llist_llist$ ))(=> (and (member$b (lCons$c ?v0 ?v1 )(paths$a ?v2 ))(and (member$c ?v3 (lset$a ?v1 ))(not (= ?v0 ?v3 ))))(exists ((?v4 A_llist_llist_llist_llist$ ))(and (member$b (lCons$c ?v0 ?v4 )(paths$a ?v2 ))(and (less_eq$a (lset$a ?v4 )(lset$a ?v1 ))(and (member$c ?v3 (lset$a ?v4 ))(not (member$c ?v0 (lset$a ?v4 ))))))))):named a8 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_a_llist_llist_bool_fun_fun$ )(?v3 A_llist_llist$ ))(=> (and (member$c (lCons$b ?v0 ?v1 )(paths$b ?v2 ))(and (member$d ?v3 (lset$b ?v1 ))(not (= ?v0 ?v3 ))))(exists ((?v4 A_llist_llist_llist$ ))(and (member$c (lCons$b ?v0 ?v4 )(paths$b ?v2 ))(and (less_eq$b (lset$b ?v4 )(lset$b ?v1 ))(and (member$d ?v3 (lset$b ?v4 ))(not (member$d ?v0 (lset$b ?v4 ))))))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist$ ))(=> (and (member$d (lCons$a ?v0 ?v1 )(paths$c ?v2 ))(and (member$ ?v3 (lset$c ?v1 ))(not (= ?v0 ?v3 ))))(exists ((?v4 A_llist_llist$ ))(and (member$d (lCons$a ?v0 ?v4 )(paths$c ?v2 ))(and (less_eq$c (lset$c ?v4 )(lset$c ?v1 ))(and (member$ ?v3 (lset$c ?v4 ))(not (member$ ?v0 (lset$c ?v4 ))))))))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ )(?v3 A$ ))(=> (and (member$ (lCons$ ?v0 ?v1 )(paths$ ?v2 ))(and (member$a ?v3 (lset$ ?v1 ))(not (= ?v0 ?v3 ))))(exists ((?v4 A_llist$ ))(and (member$ (lCons$ ?v0 ?v4 )(paths$ ?v2 ))(and (less_eq$ (lset$ ?v4 )(lset$ ?v1 ))(and (member$a ?v3 (lset$ ?v4 ))(not (member$a ?v0 (lset$ ?v4 ))))))))):named a11 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_a_llist_llist_bool_fun_fun$ ))(=> (member$c (lCons$b ?v0 ?v1 )(paths$b ?v2 ))(member$c ?v1 (paths$b ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_bool_fun_fun$ ))(=> (member$d (lCons$a ?v0 ?v1 )(paths$c ?v2 ))(member$d ?v1 (paths$c ?v2 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (member$ (lCons$ ?v0 ?v1 )(paths$ ?v2 ))(member$ ?v1 (paths$ ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(member$c (lCons$b ?v2 ?v3 )(paths$b ?v0 )))(member$c (lCons$b ?v1 (lCons$b ?v2 ?v3 ))(paths$b ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(=> (and (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(member$d (lCons$a ?v2 ?v3 )(paths$c ?v0 )))(member$d (lCons$a ?v1 (lCons$a ?v2 ?v3 ))(paths$c ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_llist$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(member$ (lCons$ ?v2 ?v3 )(paths$ ?v0 )))(member$ (lCons$ ?v1 (lCons$ ?v2 ?v3 ))(paths$ ?v0 )))):named a17 ))
(assert (! (fun_app$d (fun_app$e graph$ n$a )n$ ):named a18 ))
(assert (! (=> (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (= xs$a (lCons$ ?v0 ?v1 ))false ))false ):named a19 ))
(assert (! (less_eq$ (lset$ xs$ )ns$ ):named a20 ))
(assert (! (member$ (lCons$ n$a xs$a )(paths$ graph$ )):named a21 ))
(assert (! (member$a n$ ns$ ):named a22 ))
(assert (! (less_eq$ (lset$ xs$a )ns$ ):named a23 ))
(assert (! (=> (forall ((?v0 A_llist$ ))(=> (and (member$ (lCons$ n$a ?v0 )(paths$ graph$ ))(and (member$a x$ (lset$ ?v0 ))(less_eq$ (lset$ ?v0 )ns$ )))false ))false ):named a24 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ )(?v2 A_llist_llist_llist_set$ )(?v3 A_llist_llist_llist$ ))(= (member$c ?v0 (reachable_via$ ?v1 ?v2 ?v3 ))(exists ((?v4 A_llist_llist_llist_llist$ )(?v5 A_llist_llist_llist$ ))(and (= ?v0 ?v5 )(and (member$b (lCons$c ?v3 ?v4 )(paths$a ?v1 ))(and (member$c ?v5 (lset$a ?v4 ))(less_eq$a (lset$a ?v4 )?v2 ))))))):named a25 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_a_llist_llist_bool_fun_fun$ )(?v2 A_llist_llist_set$ )(?v3 A_llist_llist$ ))(= (member$d ?v0 (reachable_via$a ?v1 ?v2 ?v3 ))(exists ((?v4 A_llist_llist_llist$ )(?v5 A_llist_llist$ ))(and (= ?v0 ?v5 )(and (member$c (lCons$b ?v3 ?v4 )(paths$b ?v1 ))(and (member$d ?v5 (lset$b ?v4 ))(less_eq$b (lset$b ?v4 )?v2 ))))))):named a26 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_set$ )(?v3 A_llist$ ))(= (member$ ?v0 (reachable_via$b ?v1 ?v2 ?v3 ))(exists ((?v4 A_llist_llist$ )(?v5 A_llist$ ))(and (= ?v0 ?v5 )(and (member$d (lCons$a ?v3 ?v4 )(paths$c ?v1 ))(and (member$ ?v5 (lset$c ?v4 ))(less_eq$c (lset$c ?v4 )?v2 ))))))):named a27 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_set$ )(?v3 A$ ))(= (member$a ?v0 (reachable_via$c ?v1 ?v2 ?v3 ))(exists ((?v4 A_llist$ )(?v5 A$ ))(and (= ?v0 ?v5 )(and (member$ (lCons$ ?v3 ?v4 )(paths$ ?v1 ))(and (member$a ?v5 (lset$ ?v4 ))(less_eq$ (lset$ ?v4 )?v2 ))))))):named a28 ))
(check-sat )
;(get-unsat-core )
