;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_rule_fun$ 0 )
(declare-sort Rule_nat_fun$ 0 )
(declare-sort Rule_bool_fun$ 0 )
(declare-sort Rule_rule_fun$ 0 )
(declare-sort Nat_rule_list_fun$ 0 )
(declare-sort Rule_list_nat_fun$ 0 )
(declare-sort Rule_list_rule_fun$ 0 )
(declare-sort Rule_rule_list_fun$ 0 )
(declare-sort Nat_stream_bool_fun$ 0 )
(declare-sort Rule_stream_bool_fun$ 0 )
(declare-sort Rule_list_rule_list_fun$ 0 )
(declare-sort Rule_list_stream_bool_fun$ 0 )
(declare-sort Nat_nat_fun_nat_stream_bool_fun_fun$ 0 )
(declare-sort Nat_rule_fun_nat_stream_bool_fun_fun$ 0 )
(declare-sort Rule_nat_fun_rule_stream_bool_fun_fun$ 0 )
(declare-sort Rule_rule_fun_rule_stream_bool_fun_fun$ 0 )
(declare-sort Nat_rule_list_fun_nat_stream_bool_fun_fun$ 0 )
(declare-sort Rule_rule_list_fun_rule_stream_bool_fun_fun$ 0 )
(declare-sort Rule_list_nat_fun_rule_list_stream_bool_fun_fun$ 0 )
(declare-sort Rule_list_rule_fun_rule_list_stream_bool_fun_fun$ 0 )
(declare-sort Rule_list_rule_list_fun_rule_list_stream_bool_fun_fun$ 0 )
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-sort Rule_list$ 0)
(declare-fun nil$ ()Rule_list$)
(declare-fun hd$ (Rule_list$)Rule$)
(declare-fun tl$ (Rule_list$)Rule_list$)
(declare-fun cons$ (Rule$ Rule_list$ )Rule_list$)
(declare-sort Rule_list_stream$ 0)
(declare-sort Nat_stream$ 0)
(declare-fun shd$a (Rule_list_stream$)Rule_list$)
(declare-fun stl$a (Rule_list_stream$)Rule_list_stream$)
(declare-fun sCons$a (Rule_list$ Rule_list_stream$ )Rule_list_stream$)
(declare-fun shd$b (Nat_stream$)Nat$)
(declare-fun stl$b (Nat_stream$)Nat_stream$)
(declare-fun sCons$b (Nat$ Nat_stream$ )Nat_stream$)
(declare-sort Rule_list_list$ 0)
(declare-sort Nat_list$ 0)
(declare-fun nil$a ()Rule_list_list$)
(declare-fun hd$a (Rule_list_list$)Rule_list$)
(declare-fun tl$a (Rule_list_list$)Rule_list_list$)
(declare-fun cons$a (Rule_list$ Rule_list_list$ )Rule_list_list$)
(declare-fun nil$b ()Nat_list$)
(declare-fun hd$b (Nat_list$)Nat$)
(declare-fun tl$b (Nat_list$)Nat_list$)
(declare-fun cons$b (Nat$ Nat_list$ )Nat_list$)
(declare-fun m$ ()Nat$ )
(declare-fun n$ ()Nat$ )
(declare-fun r$ ()Rule$ )
(declare-fun ev$ (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun rs$ ()Rule_list$ )
(declare-fun uu$ ()Rule_bool_fun$ )
(declare-fun alw$ (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun ev$a (Nat_stream_bool_fun$ )Nat_stream_bool_fun$ )
(declare-fun ev$b (Rule_list_stream_bool_fun$ )Rule_list_stream_bool_fun$ )
(declare-fun one$ ()Nat$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun uua$ ()Nat_rule_list_fun$ )
(declare-fun uub$ (Rule_list_stream_bool_fun$ )Rule_list_stream_bool_fun$ )
(declare-fun uuc$ (Rule_list_stream_bool_fun$ )Rule_list_stream_bool_fun$ )
(declare-fun uud$ (Nat_stream_bool_fun$ )Nat_stream_bool_fun$ )
(declare-fun uue$ (Nat_stream_bool_fun$ )Nat_stream_bool_fun$ )
(declare-fun uuf$ (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun uug$ (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun uuh$ (Rule_list_stream_bool_fun$ )Rule_list_stream_bool_fun$ )
(declare-fun uui$ (Nat_stream_bool_fun$ )Nat_stream_bool_fun$ )
(declare-fun uuj$ (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun uuk$ (Rule_stream_bool_fun$ )Rule_list_rule_fun_rule_list_stream_bool_fun_fun$ )
(declare-fun uul$ (Rule_stream_bool_fun$ )Nat_rule_fun_nat_stream_bool_fun_fun$ )
(declare-fun uum$ (Rule_list_stream_bool_fun$ )Rule_rule_list_fun_rule_stream_bool_fun_fun$ )
(declare-fun uun$ (Rule_list_stream_bool_fun$ )Rule_list_rule_list_fun_rule_list_stream_bool_fun_fun$ )
(declare-fun uuo$ (Nat_stream_bool_fun$ )Rule_nat_fun_rule_stream_bool_fun_fun$ )
(declare-fun uup$ (Nat_stream_bool_fun$ )Rule_list_nat_fun_rule_list_stream_bool_fun_fun$ )
(declare-fun uuq$ (Nat_stream_bool_fun$ )Nat_nat_fun_nat_stream_bool_fun_fun$ )
(declare-fun uur$ (Rule_list_stream_bool_fun$ )Nat_rule_list_fun_nat_stream_bool_fun_fun$ )
(declare-fun uus$ (Rule_stream_bool_fun$ )Rule_rule_fun_rule_stream_bool_fun_fun$ )
(declare-fun alw$a (Nat_stream_bool_fun$ )Nat_stream_bool_fun$ )
(declare-fun alw$b (Rule_list_stream_bool_fun$ )Rule_list_stream_bool_fun$ )
(declare-fun flat$ (Rule_list_stream$ )Rule_stream$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun smap$ (Rule_list_rule_list_fun$ Rule_list_stream$ )Rule_list_stream$ )
(declare-fun snth$ (Rule_stream$ )Nat_rule_fun$ )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun fenum$ (Rule_stream$ )Rule_stream$ )
(declare-fun holds$ (Rule_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun shift$ (Rule_list$ Rule_stream$ )Rule_stream$ )
(declare-fun smap$a (Nat_rule_list_fun$ Nat_stream$ )Rule_list_stream$ )
(declare-fun smap$b (Rule_rule_list_fun$ Rule_stream$ )Rule_list_stream$ )
(declare-fun smap$c (Rule_list_nat_fun$ Rule_list_stream$ )Nat_stream$ )
(declare-fun smap$d (Nat_nat_fun$ Nat_stream$ )Nat_stream$ )
(declare-fun smap$e (Rule_nat_fun$ Rule_stream$ )Nat_stream$ )
(declare-fun smap$f (Rule_list_rule_fun$ Rule_list_stream$ )Rule_stream$ )
(declare-fun smap$g (Nat_rule_fun$ Nat_stream$ )Rule_stream$ )
(declare-fun smap$h (Rule_rule_fun$ Rule_stream$ )Rule_stream$ )
(declare-fun snth$a (Rule_list_stream$ )Nat_rule_list_fun$ )
(declare-fun snth$b (Nat_stream$ )Nat_nat_fun$ )
(declare-fun stake$ (Nat$ Rule_stream$ )Rule_list$ )
(declare-fun member$ (Rule$ Rule_set$ )Bool )
(declare-fun shift$a (Rule_list_list$ Rule_list_stream$ )Rule_list_stream$ )
(declare-fun shift$b (Nat_list$ Nat_stream$ )Nat_stream$ )
(declare-fun fun_app$ (Nat_rule_list_fun$ Nat$ )Rule_list$ )
(declare-fun fun_app$a (Rule_bool_fun$ Rule$ )Bool )
(declare-fun fun_app$b (Rule_stream_bool_fun$ Rule_stream$ )Bool )
(declare-fun fun_app$c (Nat_stream_bool_fun$ Nat_stream$ )Bool )
(declare-fun fun_app$d (Rule_list_stream_bool_fun$ Rule_list_stream$ )Bool )
(declare-fun fun_app$e (Rule_list_rule_list_fun_rule_list_stream_bool_fun_fun$ Rule_list_rule_list_fun$ )Rule_list_stream_bool_fun$ )
(declare-fun fun_app$f (Nat_rule_list_fun_nat_stream_bool_fun_fun$ Nat_rule_list_fun$ )Nat_stream_bool_fun$ )
(declare-fun fun_app$g (Rule_rule_list_fun_rule_stream_bool_fun_fun$ Rule_rule_list_fun$ )Rule_stream_bool_fun$ )
(declare-fun fun_app$h (Rule_list_nat_fun_rule_list_stream_bool_fun_fun$ Rule_list_nat_fun$ )Rule_list_stream_bool_fun$ )
(declare-fun fun_app$i (Nat_nat_fun_nat_stream_bool_fun_fun$ Nat_nat_fun$ )Nat_stream_bool_fun$ )
(declare-fun fun_app$j (Rule_nat_fun_rule_stream_bool_fun_fun$ Rule_nat_fun$ )Rule_stream_bool_fun$ )
(declare-fun fun_app$k (Rule_list_rule_fun_rule_list_stream_bool_fun_fun$ Rule_list_rule_fun$ )Rule_list_stream_bool_fun$ )
(declare-fun fun_app$l (Nat_rule_fun_nat_stream_bool_fun_fun$ Nat_rule_fun$ )Nat_stream_bool_fun$ )
(declare-fun fun_app$m (Rule_rule_fun_rule_stream_bool_fun_fun$ Rule_rule_fun$ )Rule_stream_bool_fun$ )
(declare-fun fun_app$n (Nat_rule_fun$ Nat$ )Rule$ )
(declare-fun fun_app$o (Rule_list_rule_fun$ Rule_list$ )Rule$ )
(declare-fun fun_app$p (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$q (Rule_rule_list_fun$ Rule$ )Rule_list$ )
(declare-fun fun_app$r (Rule_list_rule_list_fun$ Rule_list$ )Rule_list$ )
(declare-fun fun_app$s (Rule_nat_fun$ Rule$ )Nat$ )
(declare-fun fun_app$t (Rule_list_nat_fun$ Rule_list$ )Nat$ )
(declare-fun fun_app$u (Rule_rule_fun$ Rule$ )Rule$ )
(declare-fun siterate$ (Nat_nat_fun$ Nat$ )Nat_stream$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uua$ ?v0 )(stake$ ?v0 rules$ )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Rule$ ))(! (= (fun_app$a uu$ ?v0 )(= r$ ?v0 )):pattern ((fun_app$a uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_stream$ ))(! (= (fun_app$b (uug$ ?v0 )?v1 )(not (fun_app$b (alw$ (uuf$ ?v0 ))?v1 ))):pattern ((fun_app$b (uug$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Nat_stream$ ))(! (= (fun_app$c (uue$ ?v0 )?v1 )(not (fun_app$c (alw$a (uud$ ?v0 ))?v1 ))):pattern ((fun_app$c (uue$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Rule_list_stream$ ))(! (= (fun_app$d (uuc$ ?v0 )?v1 )(not (fun_app$d (alw$b (uub$ ?v0 ))?v1 ))):pattern ((fun_app$d (uuc$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_stream$ ))(! (= (fun_app$b (uuj$ ?v0 )?v1 )(not (fun_app$b (ev$ (uuf$ ?v0 ))?v1 ))):pattern ((fun_app$b (uuj$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Nat_stream$ ))(! (= (fun_app$c (uui$ ?v0 )?v1 )(not (fun_app$c (ev$a (uud$ ?v0 ))?v1 ))):pattern ((fun_app$c (uui$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Rule_list_stream$ ))(! (= (fun_app$d (uuh$ ?v0 )?v1 )(not (fun_app$d (ev$b (uub$ ?v0 ))?v1 ))):pattern ((fun_app$d (uuh$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Rule_list_stream$ ))(! (= (fun_app$d (uub$ ?v0 )?v1 )(not (fun_app$d ?v0 ?v1 ))):pattern ((fun_app$d (uub$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Nat_stream$ ))(! (= (fun_app$c (uud$ ?v0 )?v1 )(not (fun_app$c ?v0 ?v1 ))):pattern ((fun_app$c (uud$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_stream$ ))(! (= (fun_app$b (uuf$ ?v0 )?v1 )(not (fun_app$b ?v0 ?v1 ))):pattern ((fun_app$b (uuf$ ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Rule_list_rule_list_fun$ )(?v2 Rule_list_stream$ ))(! (= (fun_app$d (fun_app$e (uun$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (smap$ ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$e (uun$ ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Nat_rule_list_fun$ )(?v2 Nat_stream$ ))(! (= (fun_app$c (fun_app$f (uur$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (smap$a ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$f (uur$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Rule_rule_list_fun$ )(?v2 Rule_stream$ ))(! (= (fun_app$b (fun_app$g (uum$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (smap$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$g (uum$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Rule_list_nat_fun$ )(?v2 Rule_list_stream$ ))(! (= (fun_app$d (fun_app$h (uup$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (smap$c ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$h (uup$ ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_stream$ ))(! (= (fun_app$c (fun_app$i (uuq$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (smap$d ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$i (uuq$ ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Rule_nat_fun$ )(?v2 Rule_stream$ ))(! (= (fun_app$b (fun_app$j (uuo$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (smap$e ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$j (uuo$ ?v0 )?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_list_rule_fun$ )(?v2 Rule_list_stream$ ))(! (= (fun_app$d (fun_app$k (uuk$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (smap$f ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$k (uuk$ ?v0 )?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Nat_rule_fun$ )(?v2 Nat_stream$ ))(! (= (fun_app$c (fun_app$l (uul$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (smap$g ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$l (uul$ ?v0 )?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_rule_fun$ )(?v2 Rule_stream$ ))(! (= (fun_app$b (fun_app$m (uus$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (smap$h ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$m (uus$ ?v0 )?v1 )?v2 )))):named a19 ))
(assert (! (not (fun_app$b (alw$ (ev$ (holds$ uu$ )))(shift$ rs$ (flat$ (smap$a uua$ (siterate$ suc$ n$ )))))):named a20 ))
(assert (! (less$ zero$ n$ ):named a21 ))
(assert (! (member$ r$ (sset$ rules$ )):named a22 ))
(assert (! (= r$ (fun_app$n (snth$ rules$ )m$ )):named a23 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ ))(= (uuc$ ?v0 )(ev$b ?v0 ))):named a24 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ ))(= (uue$ ?v0 )(ev$a ?v0 ))):named a25 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ ))(= (uug$ ?v0 )(ev$ ?v0 ))):named a26 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ ))(= (uuh$ ?v0 )(alw$b ?v0 ))):named a27 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ ))(= (uui$ ?v0 )(alw$a ?v0 ))):named a28 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ ))(= (uuj$ ?v0 )(alw$ ?v0 ))):named a29 ))
(assert (! (= (fenum$ rules$ )(flat$ (smap$a uua$ (siterate$ suc$ one$ )))):named a30 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= r$ (fun_app$n (snth$ rules$ )?v0 ))false ))false ):named a31 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Rule_list_stream$ )(?v2 Rule_list_list$ ))(=> (fun_app$d (alw$b ?v0 )?v1 )(fun_app$d (ev$b (alw$b ?v0 ))(shift$a ?v2 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Nat_stream$ )(?v2 Nat_list$ ))(=> (fun_app$c (alw$a ?v0 )?v1 )(fun_app$c (ev$a (alw$a ?v0 ))(shift$b ?v2 ?v1 )))):named a33 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_stream$ )(?v2 Rule_list$ ))(=> (fun_app$b (alw$ ?v0 )?v1 )(fun_app$b (ev$ (alw$ ?v0 ))(shift$ ?v2 ?v1 )))):named a34 ))
(assert (! (forall ((?v0 Nat_list$ )(?v1 Nat_stream$ )(?v2 Nat_stream$ ))(= (= (shift$b ?v0 ?v1 )(shift$b ?v0 ?v2 ))(= ?v1 ?v2 ))):named a35 ))
(assert (! (forall ((?v0 Rule_list_list$ )(?v1 Rule_list_stream$ )(?v2 Rule_list_stream$ ))(= (= (shift$a ?v0 ?v1 )(shift$a ?v0 ?v2 ))(= ?v1 ?v2 ))):named a36 ))
(assert (! (forall ((?v0 Rule_list$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(= (= (shift$ ?v0 ?v1 )(shift$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a37 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ ))(= (alw$b (alw$b ?v0 ))(alw$b ?v0 ))):named a38 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ ))(= (alw$a (alw$a ?v0 ))(alw$a ?v0 ))):named a39 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ ))(= (alw$ (alw$ ?v0 ))(alw$ ?v0 ))):named a40 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ ))(= (ev$b (ev$b ?v0 ))(ev$b ?v0 ))):named a41 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ ))(= (ev$a (ev$a ?v0 ))(ev$a ?v0 ))):named a42 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ ))(= (ev$ (ev$ ?v0 ))(ev$ ?v0 ))):named a43 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_list_rule_fun$ )(?v2 Rule_list_stream$ ))(= (fun_app$b (alw$ ?v0 )(smap$f ?v1 ?v2 ))(fun_app$d (alw$b (fun_app$k (uuk$ ?v0 )?v1 ))?v2 ))):named a44 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Nat_rule_fun$ )(?v2 Nat_stream$ ))(= (fun_app$b (alw$ ?v0 )(smap$g ?v1 ?v2 ))(fun_app$c (alw$a (fun_app$l (uul$ ?v0 )?v1 ))?v2 ))):named a45 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Rule_rule_list_fun$ )(?v2 Rule_stream$ ))(= (fun_app$d (alw$b ?v0 )(smap$b ?v1 ?v2 ))(fun_app$b (alw$ (fun_app$g (uum$ ?v0 )?v1 ))?v2 ))):named a46 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Rule_list_rule_list_fun$ )(?v2 Rule_list_stream$ ))(= (fun_app$d (alw$b ?v0 )(smap$ ?v1 ?v2 ))(fun_app$d (alw$b (fun_app$e (uun$ ?v0 )?v1 ))?v2 ))):named a47 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Rule_nat_fun$ )(?v2 Rule_stream$ ))(= (fun_app$c (alw$a ?v0 )(smap$e ?v1 ?v2 ))(fun_app$b (alw$ (fun_app$j (uuo$ ?v0 )?v1 ))?v2 ))):named a48 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Rule_list_nat_fun$ )(?v2 Rule_list_stream$ ))(= (fun_app$c (alw$a ?v0 )(smap$c ?v1 ?v2 ))(fun_app$d (alw$b (fun_app$h (uup$ ?v0 )?v1 ))?v2 ))):named a49 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_stream$ ))(= (fun_app$c (alw$a ?v0 )(smap$d ?v1 ?v2 ))(fun_app$c (alw$a (fun_app$i (uuq$ ?v0 )?v1 ))?v2 ))):named a50 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Nat_rule_list_fun$ )(?v2 Nat_stream$ ))(= (fun_app$d (alw$b ?v0 )(smap$a ?v1 ?v2 ))(fun_app$c (alw$a (fun_app$f (uur$ ?v0 )?v1 ))?v2 ))):named a51 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_rule_fun$ )(?v2 Rule_stream$ ))(= (fun_app$b (alw$ ?v0 )(smap$h ?v1 ?v2 ))(fun_app$b (alw$ (fun_app$m (uus$ ?v0 )?v1 ))?v2 ))):named a52 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_list_rule_fun$ )(?v2 Rule_list_stream$ ))(= (fun_app$b (ev$ ?v0 )(smap$f ?v1 ?v2 ))(fun_app$d (ev$b (fun_app$k (uuk$ ?v0 )?v1 ))?v2 ))):named a53 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Nat_rule_fun$ )(?v2 Nat_stream$ ))(= (fun_app$b (ev$ ?v0 )(smap$g ?v1 ?v2 ))(fun_app$c (ev$a (fun_app$l (uul$ ?v0 )?v1 ))?v2 ))):named a54 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Rule_rule_list_fun$ )(?v2 Rule_stream$ ))(= (fun_app$d (ev$b ?v0 )(smap$b ?v1 ?v2 ))(fun_app$b (ev$ (fun_app$g (uum$ ?v0 )?v1 ))?v2 ))):named a55 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Rule_list_rule_list_fun$ )(?v2 Rule_list_stream$ ))(= (fun_app$d (ev$b ?v0 )(smap$ ?v1 ?v2 ))(fun_app$d (ev$b (fun_app$e (uun$ ?v0 )?v1 ))?v2 ))):named a56 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Rule_nat_fun$ )(?v2 Rule_stream$ ))(= (fun_app$c (ev$a ?v0 )(smap$e ?v1 ?v2 ))(fun_app$b (ev$ (fun_app$j (uuo$ ?v0 )?v1 ))?v2 ))):named a57 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Rule_list_nat_fun$ )(?v2 Rule_list_stream$ ))(= (fun_app$c (ev$a ?v0 )(smap$c ?v1 ?v2 ))(fun_app$d (ev$b (fun_app$h (uup$ ?v0 )?v1 ))?v2 ))):named a58 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_stream$ ))(= (fun_app$c (ev$a ?v0 )(smap$d ?v1 ?v2 ))(fun_app$c (ev$a (fun_app$i (uuq$ ?v0 )?v1 ))?v2 ))):named a59 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Nat_rule_list_fun$ )(?v2 Nat_stream$ ))(= (fun_app$d (ev$b ?v0 )(smap$a ?v1 ?v2 ))(fun_app$c (ev$a (fun_app$f (uur$ ?v0 )?v1 ))?v2 ))):named a60 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_rule_fun$ )(?v2 Rule_stream$ ))(= (fun_app$b (ev$ ?v0 )(smap$h ?v1 ?v2 ))(fun_app$b (ev$ (fun_app$m (uus$ ?v0 )?v1 ))?v2 ))):named a61 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Rule_list_stream$ ))(= (not (fun_app$d (ev$b ?v0 )?v1 ))(fun_app$d (alw$b (uub$ ?v0 ))?v1 ))):named a62 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Nat_stream$ ))(= (not (fun_app$c (ev$a ?v0 )?v1 ))(fun_app$c (alw$a (uud$ ?v0 ))?v1 ))):named a63 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_stream$ ))(= (not (fun_app$b (ev$ ?v0 )?v1 ))(fun_app$b (alw$ (uuf$ ?v0 ))?v1 ))):named a64 ))
(assert (! (= (sset$ (fenum$ rules$ ))(sset$ rules$ )):named a65 ))
(assert (! (forall ((?v0 Rule_list_rule_fun$ )(?v1 Rule_list_stream$ )(?v2 Nat$ ))(= (fun_app$n (snth$ (smap$f ?v0 ?v1 ))?v2 )(fun_app$o ?v0 (fun_app$ (snth$a ?v1 )?v2 )))):named a66 ))
(assert (! (forall ((?v0 Nat_rule_fun$ )(?v1 Nat_stream$ )(?v2 Nat$ ))(= (fun_app$n (snth$ (smap$g ?v0 ?v1 ))?v2 )(fun_app$n ?v0 (fun_app$p (snth$b ?v1 )?v2 )))):named a67 ))
(assert (! (forall ((?v0 Rule_rule_list_fun$ )(?v1 Rule_stream$ )(?v2 Nat$ ))(= (fun_app$ (snth$a (smap$b ?v0 ?v1 ))?v2 )(fun_app$q ?v0 (fun_app$n (snth$ ?v1 )?v2 )))):named a68 ))
(assert (! (forall ((?v0 Rule_list_rule_list_fun$ )(?v1 Rule_list_stream$ )(?v2 Nat$ ))(= (fun_app$ (snth$a (smap$ ?v0 ?v1 ))?v2 )(fun_app$r ?v0 (fun_app$ (snth$a ?v1 )?v2 )))):named a69 ))
(assert (! (forall ((?v0 Rule_nat_fun$ )(?v1 Rule_stream$ )(?v2 Nat$ ))(= (fun_app$p (snth$b (smap$e ?v0 ?v1 ))?v2 )(fun_app$s ?v0 (fun_app$n (snth$ ?v1 )?v2 )))):named a70 ))
(assert (! (forall ((?v0 Rule_list_nat_fun$ )(?v1 Rule_list_stream$ )(?v2 Nat$ ))(= (fun_app$p (snth$b (smap$c ?v0 ?v1 ))?v2 )(fun_app$t ?v0 (fun_app$ (snth$a ?v1 )?v2 )))):named a71 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_stream$ )(?v2 Nat$ ))(= (fun_app$p (snth$b (smap$d ?v0 ?v1 ))?v2 )(fun_app$p ?v0 (fun_app$p (snth$b ?v1 )?v2 )))):named a72 ))
(assert (! (forall ((?v0 Rule_rule_fun$ )(?v1 Rule_stream$ )(?v2 Nat$ ))(= (fun_app$n (snth$ (smap$h ?v0 ?v1 ))?v2 )(fun_app$u ?v0 (fun_app$n (snth$ ?v1 )?v2 )))):named a73 ))
(assert (! (forall ((?v0 Nat_rule_list_fun$ )(?v1 Nat_stream$ )(?v2 Nat$ ))(= (fun_app$ (snth$a (smap$a ?v0 ?v1 ))?v2 )(fun_app$ ?v0 (fun_app$p (snth$b ?v1 )?v2 )))):named a74 ))
(assert (! (forall ((?v0 Rule_stream$ ))(= (sset$ (fenum$ ?v0 ))(sset$ ?v0 ))):named a75 ))
(check-sat )
;(get-unsat-core )
