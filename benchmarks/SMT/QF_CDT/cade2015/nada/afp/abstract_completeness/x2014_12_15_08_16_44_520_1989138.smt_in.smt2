;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-sort State_rule_prod_stream$ 0)
(declare-sort State_stream$ 0)
(declare-fun shd$a (State_rule_prod_stream$)State_rule_prod$)
(declare-fun stl$a (State_rule_prod_stream$)State_rule_prod_stream$)
(declare-fun sCons$a (State_rule_prod$ State_rule_prod_stream$ )State_rule_prod_stream$)
(declare-fun shd$b (State_stream$)State$)
(declare-fun stl$b (State_stream$)State_stream$)
(declare-fun sCons$b (State$ State_stream$ )State_stream$)
(declare-fun n$ ()Nat$ )
(declare-fun s$ ()State$ )
(declare-fun t$ ()State_rule_prod_tree$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State_set$ )
(declare-fun s$b ()State$ )
(declare-fun s$c ()State$ )
(declare-fun sl$ ()State_fset$ )
(declare-fun bot$ ()Rule_set$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun rsa$ ()Rule_stream$ )
(declare-fun fair$ (Rule_stream$ Rule_stream$ )Bool )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun fenum$ (Rule_stream$ )Rule_stream$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun sdrop$ (Nat$ Rule_stream$ )Rule_stream$ )
(declare-fun sset$a (State_stream$ )State_set$ )
(declare-fun fenum$a (State_stream$ )State_stream$ )
(declare-fun member$ (Rule$ Rule_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )State_rule_prod_tree$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun member$a (State$ State_set$ )Bool )
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun countable$ (Rule_set$ )Bool )
(declare-fun saturated$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_stream$ )Bool )
(declare-fun saturated$a (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State_rule_prod_stream$ )Bool )
(assert (! (not (member$ (shd$ (trim$ eff$ (sdrop$ n$ rsa$ )s$ ))(sset$ rules$ ))):named a0 ))
(assert (! (fair$ rules$ rsa$ ):named a1 ))
(assert (! (member$a s$ s$a ):named a2 ))
(assert (! (fun_app$ (fun_app$a (fun_app$b eff$ (shd$ (trim$ eff$ (sdrop$ n$ rsa$ )s$ )))s$ )sl$ ):named a3 ))
(assert (! (= (sset$ (fenum$ rules$ ))(sset$ rules$ )):named a4 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(= (saturated$ eff$ rules$ ?v0 )(forall ((?v1 Rule$ ))(=> (member$ ?v1 (sset$ rules$ ))(saturated$a eff$ ?v1 ?v0 ))))):named a5 ))
(assert (! (fair$ rules$ rs$ ):named a6 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Nat$ ))(=> (fair$ rules$ ?v0 )(fair$ rules$ (sdrop$ ?v1 ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 State$ ))(=> (member$a ?v0 s$a )(exists ((?v1 Rule$ ))(and (member$ ?v1 (sset$ rules$ ))(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v1 )?v0 )?v2 )))))):named a9 ))
(assert (! (not (= (sset$ rules$ )bot$ )):named a10 ))
(assert (! (forall ((?v0 State_stream$ ))(member$a (shd$b ?v0 )(sset$a ?v0 ))):named a11 ))
(assert (! (forall ((?v0 Rule_stream$ ))(member$ (shd$ ?v0 )(sset$ ?v0 ))):named a12 ))
(assert (! (countable$ (sset$ rules$ )):named a13 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$a ?v0 s$a )(fair$ rules$ ?v1 ))(member$ (shd$ (trim$ eff$ ?v1 ?v0 ))(sset$ rules$ )))):named a14 ))
(assert (! (= t$ (mkTree$ eff$ (stl$ (trim$ eff$ (sdrop$ n$ rsa$ )s$ ))s$b )):named a15 ))
(assert (! (forall ((?v0 State_stream$ ))(= (sset$a (fenum$a ?v0 ))(sset$a ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Rule_stream$ ))(= (sset$ (fenum$ ?v0 ))(sset$ ?v0 ))):named a17 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$a ?v0 s$a )(fair$ rules$ ?v1 ))(fair$ rules$ (trim$ eff$ ?v1 ?v0 )))):named a18 ))
(assert (! (member$a s$c s$a ):named a19 ))
(check-sat )
;(get-unsat-core )
