;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_rule_prod_bool_fun$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_stream_bool_fun$ 0 )
(declare-sort Rule_state_rule_prod_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_state_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_bool_fun_state_rule_prod_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-sort State_rule_prod_stream$ 0)
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (State_rule_prod_stream$)State_rule_prod$)
(declare-fun stl$ (State_rule_prod_stream$)State_rule_prod_stream$)
(declare-fun sCons$ (State_rule_prod$ State_rule_prod_stream$ )State_rule_prod_stream$)
(declare-fun shd$a (Rule_stream$)Rule$)
(declare-fun stl$a (Rule_stream$)Rule_stream$)
(declare-fun sCons$a (Rule$ Rule_stream$ )Rule_stream$)
(declare-fun r$ ()Rule$ )
(declare-fun s$ ()State$ )
(declare-fun ev$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State_set$ )
(declare-fun uu$ ()State_rule_prod_bool_fun$ )
(declare-fun alw$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun uua$ ()State_rule_prod_bool_fun$ )
(declare-fun uub$ (Rule$ )State_rule_prod_bool_fun$ )
(declare-fun uuc$ (Rule$ )State_rule_prod_bool_fun$ )
(declare-fun uud$ (Rule$ )State_rule_prod_stream_bool_fun$ )
(declare-fun uue$ (State_rule_prod_bool_fun$ )State_rule_prod_bool_fun_state_rule_prod_bool_fun_fun$ )
(declare-fun uuf$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_state_rule_prod_bool_fun_fun$ )
(declare-fun uug$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_state_rule_prod_stream_bool_fun_fun$ )
(declare-fun uuh$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$ )
(declare-fun uui$ ()State_rule_prod_stream_bool_fun$ )
(declare-fun uuj$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun uuk$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun uul$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun fair$ (Rule_stream$ Rule_stream$ )Bool )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun holds$ (State_rule_prod_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun ipath$ (State_rule_prod_tree$ )State_rule_prod_stream_bool_fun$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun steps$ ()State_rule_prod_stream$ )
(declare-fun member$ (Rule$ Rule_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )State_rule_prod_tree$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (State_rule_prod_bool_fun$ State_rule_prod$ )Bool )
(declare-fun member$a (State$ State_set$ )Bool )
(declare-fun fun_app$a (State_rule_prod_stream_bool_fun$ State_rule_prod_stream$ )Bool )
(declare-fun fun_app$b (Rule_state_rule_prod_bool_fun_fun$ Rule$ )State_rule_prod_bool_fun$ )
(declare-fun fun_app$c (Rule_state_rule_prod_stream_bool_fun_fun$ Rule$ )State_rule_prod_stream_bool_fun$ )
(declare-fun fun_app$d (State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$ State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun fun_app$e (State_rule_prod_bool_fun_state_rule_prod_bool_fun_fun$ State_rule_prod_bool_fun$ )State_rule_prod_bool_fun$ )
(declare-fun fun_app$f (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$g (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$h (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun saturated$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_state_rule_prod_stream_bool_fun_fun$ )
(assert (! (forall ((?v0 State_rule_prod$ ))(! (= (fun_app$ uua$ ?v0 )(enabled$ eff$ r$ (fst$ ?v0 ))):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 State_rule_prod$ ))(! (= (fun_app$ uu$ ?v0 )(= (snd$ ?v0 )r$ )):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State_rule_prod$ ))(! (= (fun_app$ (uub$ ?v0 )?v1 )(enabled$ eff$ ?v0 (fst$ ?v1 ))):pattern ((fun_app$ (uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State_rule_prod_stream$ ))(! (= (fun_app$a (uud$ ?v0 )?v1 )(=> (fun_app$a (holds$ (uub$ ?v0 ))?v1 )(fun_app$a (ev$ (holds$ (uuc$ ?v0 )))?v1 ))):pattern ((fun_app$a (uud$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State_rule_prod$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )(= (snd$ ?v1 )?v0 )):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream$ ))(! (= (fun_app$a (uuk$ ?v0 )?v1 )(not (fun_app$a (alw$ (uuj$ ?v0 ))?v1 ))):pattern ((fun_app$a (uuk$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream$ ))(! (= (fun_app$a (uul$ ?v0 )?v1 )(not (fun_app$a (ev$ (uuj$ ?v0 ))?v1 ))):pattern ((fun_app$a (uul$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream$ ))(! (= (fun_app$a (uuj$ ?v0 )?v1 )(not (fun_app$a ?v0 ?v1 ))):pattern ((fun_app$a (uuj$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State_rule_prod$ ))(! (= (fun_app$ (fun_app$b (uuf$ ?v0 )?v1 )?v2 )(enabled$ ?v0 ?v1 (fst$ ?v2 ))):pattern ((fun_app$ (fun_app$b (uuf$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State_rule_prod_stream$ ))(! (= (fun_app$a (fun_app$c (uug$ ?v0 )?v1 )?v2 )(=> (fun_app$a (holds$ (fun_app$b (uuf$ ?v0 )?v1 ))?v2 )(fun_app$a (ev$ (holds$ (uuc$ ?v1 )))?v2 ))):pattern ((fun_app$a (fun_app$c (uug$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream_bool_fun$ )(?v2 State_rule_prod_stream$ ))(! (= (fun_app$a (fun_app$d (uuh$ ?v0 )?v1 )?v2 )(or (fun_app$a ?v0 ?v2 )(fun_app$a ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$d (uuh$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$ )(?v1 State_rule_prod_bool_fun$ )(?v2 State_rule_prod$ ))(! (= (fun_app$ (fun_app$e (uue$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$e (uue$ ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(! (= (fun_app$a uui$ ?v0 )false ):pattern ((fun_app$a uui$ ?v0 )))):named a12 ))
(assert (! (not (fun_app$a (ev$ (holds$ uu$ ))steps$ )):named a13 ))
(assert (! (fun_app$a (ipath$ (mkTree$ eff$ rs$ s$ ))steps$ ):named a14 ))
(assert (! (fun_app$a (alw$ (holds$ uua$ ))steps$ ):named a15 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$f (fun_app$g (fun_app$h eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a16 ))
(assert (! (member$ r$ (sset$ rules$ )):named a17 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ ))(= (ev$ (ev$ ?v0 ))(ev$ ?v0 ))):named a18 ))
(assert (! (forall ((?v0 Rule$ ))(= (fun_app$c (saturated$ eff$ )?v0 )(alw$ (uud$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_bool_fun$ ))(= (and (fun_app$a (holds$ ?v0 )?v1 )(fun_app$a (holds$ ?v2 )?v1 ))(fun_app$a (holds$ (fun_app$e (uue$ ?v0 )?v2 ))?v1 ))):named a20 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ ))(= (fun_app$c (saturated$ ?v0 )?v1 )(alw$ (fun_app$c (uug$ ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream_bool_fun$ )(?v2 State_rule_prod_stream$ ))(= (fun_app$a (ev$ (fun_app$d (uuh$ ?v0 )?v1 ))?v2 )(or (fun_app$a (ev$ ?v0 )?v2 )(fun_app$a (ev$ ?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(= (fun_app$a (ev$ uui$ )?v0 )false )):named a23 ))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_bool_fun$ ))(=> (and (fun_app$a (holds$ ?v0 )?v1 )(forall ((?v3 State_rule_prod$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ ?v2 ?v3 ))))(fun_app$a (holds$ ?v2 )?v1 ))):named a24 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_stream_bool_fun$ ))(=> (and (fun_app$a (ev$ ?v0 )?v1 )(forall ((?v3 State_rule_prod_stream$ ))(=> (fun_app$a ?v0 ?v3 )(fun_app$a ?v2 ?v3 ))))(fun_app$a (ev$ ?v2 )?v1 ))):named a25 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream$ ))(=> (fun_app$a ?v0 ?v1 )(fun_app$a (ev$ ?v0 )?v1 ))):named a26 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ ))(= (uuk$ ?v0 )(ev$ ?v0 ))):named a27 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ ))(= (uul$ ?v0 )(alw$ ?v0 ))):named a28 ))
(assert (! (member$a s$ s$a ):named a29 ))
(assert (! (fair$ rules$ rs$ ):named a30 ))
(check-sat )
;(get-unsat-core )
