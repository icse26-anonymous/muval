;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort Rule_bool_fun$ 0 )
(declare-sort Rule_rule_fun$ 0 )
(declare-sort Rule_state_fun$ 0 )
(declare-sort State_bool_fun$ 0 )
(declare-sort State_rule_fun$ 0 )
(declare-sort Rule_stream_set$ 0 )
(declare-sort State_state_fun$ 0 )
(declare-sort State_stream_set$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort Rule_rule_stream_fun$ 0 )
(declare-sort Rule_stream_bool_fun$ 0 )
(declare-sort Rule_stream_rule_fun$ 0 )
(declare-sort Rule_state_stream_fun$ 0 )
(declare-sort State_stream_bool_fun$ 0 )
(declare-sort State_stream_rule_fun$ 0 )
(declare-sort Rule_rule_rule_fun_fun$ 0 )
(declare-sort Rule_stream_stream_set$ 0 )
(declare-sort Rule_rule_state_fun_fun$ 0 )
(declare-sort Rule_state_bool_fun_fun$ 0 )
(declare-sort Rule_state_rule_fun_fun$ 0 )
(declare-sort State_rule_rule_fun_fun$ 0 )
(declare-sort State_stream_stream_set$ 0 )
(declare-sort Rule_state_state_fun_fun$ 0 )
(declare-sort State_rule_state_fun_fun$ 0 )
(declare-sort State_state_rule_fun_fun$ 0 )
(declare-sort State_state_state_fun_fun$ 0 )
(declare-sort Rule_stream_stream_bool_fun$ 0 )
(declare-sort State_stream_stream_bool_fun$ 0 )
(declare-sort Rule_rule_rule_stream_fun_fun$ 0 )
(declare-sort Rule_rule_stream_rule_fun_fun$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_rule_state_stream_fun_fun$ 0 )
(declare-sort Rule_state_stream_rule_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-sort State_rule_prod_stream$ 0)
(declare-sort State_stream$ 0)
(declare-sort State_stream_stream$ 0)
(declare-sort State_stream_stream_stream$ 0)
(declare-sort Rule_stream_stream$ 0)
(declare-sort Rule_stream_stream_stream$ 0)
(declare-sort State_stream_stream_stream_stream$ 0)
(declare-sort Rule_stream_stream_stream_stream$ 0)
(declare-fun shd$a (State_rule_prod_stream$)State_rule_prod$)
(declare-fun stl$a (State_rule_prod_stream$)State_rule_prod_stream$)
(declare-fun sCons$a (State_rule_prod$ State_rule_prod_stream$ )State_rule_prod_stream$)
(declare-fun shd$b (State_stream$)State$)
(declare-fun stl$b (State_stream$)State_stream$)
(declare-fun sCons$b (State$ State_stream$ )State_stream$)
(declare-fun shd$c (State_stream_stream$)State_stream$)
(declare-fun stl$c (State_stream_stream$)State_stream_stream$)
(declare-fun sCons$c (State_stream$ State_stream_stream$ )State_stream_stream$)
(declare-fun shd$d (State_stream_stream_stream$)State_stream_stream$)
(declare-fun stl$d (State_stream_stream_stream$)State_stream_stream_stream$)
(declare-fun sCons$d (State_stream_stream$ State_stream_stream_stream$ )State_stream_stream_stream$)
(declare-fun shd$e (Rule_stream_stream$)Rule_stream$)
(declare-fun stl$e (Rule_stream_stream$)Rule_stream_stream$)
(declare-fun sCons$e (Rule_stream$ Rule_stream_stream$ )Rule_stream_stream$)
(declare-fun shd$f (Rule_stream_stream_stream$)Rule_stream_stream$)
(declare-fun stl$f (Rule_stream_stream_stream$)Rule_stream_stream_stream$)
(declare-fun sCons$f (Rule_stream_stream$ Rule_stream_stream_stream$ )Rule_stream_stream_stream$)
(declare-fun shd$g (State_stream_stream_stream_stream$)State_stream_stream_stream$)
(declare-fun stl$g (State_stream_stream_stream_stream$)State_stream_stream_stream_stream$)
(declare-fun sCons$g (State_stream_stream_stream$ State_stream_stream_stream_stream$ )State_stream_stream_stream_stream$)
(declare-fun shd$h (Rule_stream_stream_stream_stream$)Rule_stream_stream_stream$)
(declare-fun stl$h (Rule_stream_stream_stream_stream$)Rule_stream_stream_stream_stream$)
(declare-fun sCons$h (Rule_stream_stream_stream$ Rule_stream_stream_stream_stream$ )Rule_stream_stream_stream_stream$)
(declare-fun m$ ()Nat$ )
(declare-fun r$ ()Rule$ )
(declare-fun s$ ()State$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State_set$ )
(declare-fun sl$ ()State_fset$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun fair$ (Rule_stream$ )Rule_stream_bool_fun$ )
(declare-fun snth$ (Rule_stream$ Nat$ )Rule$ )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun smap2$ (Rule_rule_rule_fun_fun$ Rule_stream$ Rule_stream$ )Rule_stream$ )
(declare-fun snth$a (State_stream_stream_stream$ Nat$ )State_stream_stream$ )
(declare-fun snth$b (Rule_stream_stream_stream$ Nat$ )Rule_stream_stream$ )
(declare-fun snth$c (Rule_stream_stream$ Nat$ )Rule_stream$ )
(declare-fun snth$d (State_stream_stream$ Nat$ )State_stream$ )
(declare-fun snth$e (State_stream$ Nat$ )State$ )
(declare-fun snth$f (State_stream_stream_stream_stream$ Nat$ )State_stream_stream_stream$ )
(declare-fun snth$g (Rule_stream_stream_stream_stream$ Nat$ )Rule_stream_stream_stream$ )
(declare-fun sset$a (State_stream_stream_stream$ )State_stream_stream_set$ )
(declare-fun sset$b (Rule_stream_stream_stream$ )Rule_stream_stream_set$ )
(declare-fun sset$c (Rule_stream_stream$ )Rule_stream_set$ )
(declare-fun sset$d (State_stream_stream$ )State_stream_set$ )
(declare-fun sset$e (State_stream$ )State_set$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun smap2$a (Rule_state_rule_fun_fun$ Rule_stream$ State_stream$ )Rule_stream$ )
(declare-fun smap2$b (State_rule_rule_fun_fun$ State_stream$ Rule_stream$ )Rule_stream$ )
(declare-fun smap2$c (State_state_rule_fun_fun$ State_stream$ State_stream$ )Rule_stream$ )
(declare-fun smap2$d (Rule_rule_state_fun_fun$ Rule_stream$ Rule_stream$ )State_stream$ )
(declare-fun smap2$e (Rule_state_state_fun_fun$ Rule_stream$ State_stream$ )State_stream$ )
(declare-fun smap2$f (State_rule_state_fun_fun$ State_stream$ Rule_stream$ )State_stream$ )
(declare-fun smap2$g (State_state_state_fun_fun$ State_stream$ State_stream$ )State_stream$ )
(declare-fun smap2$h (Rule_rule_stream_rule_fun_fun$ Rule_stream$ Rule_stream_stream$ )Rule_stream$ )
(declare-fun smap2$i (Rule_state_stream_rule_fun_fun$ Rule_stream$ State_stream_stream$ )Rule_stream$ )
(declare-fun smap2$j (Rule_rule_rule_stream_fun_fun$ Rule_stream$ Rule_stream$ )Rule_stream_stream$ )
(declare-fun smap2$k (Rule_rule_state_stream_fun_fun$ Rule_stream$ Rule_stream$ )State_stream_stream$ )
(declare-fun smerge$ (State_stream_stream_stream_stream$ )State_stream_stream_stream$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_state_bool_fun_fun$ )
(declare-fun fmember$ (State$ State_fset$ )Bool )
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun member$a (Rule$ Rule_set$ )Bool )
(declare-fun member$b (State_stream_stream$ State_stream_stream_set$ )Bool )
(declare-fun member$c (Rule_stream_stream$ Rule_stream_stream_set$ )Bool )
(declare-fun member$d (Rule_stream$ Rule_stream_set$ )Bool )
(declare-fun member$e (State_stream$ State_stream_set$ )Bool )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun smerge$a (Rule_stream_stream_stream_stream$ )Rule_stream_stream_stream$ )
(declare-fun smerge$b (Rule_stream_stream_stream$ )Rule_stream_stream$ )
(declare-fun smerge$c (State_stream_stream_stream$ )State_stream_stream$ )
(declare-fun smerge$d (State_stream_stream$ )State_stream$ )
(declare-fun smerge$e (Rule_stream_stream$ )Rule_stream$ )
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun fun_app$c (Rule_stream_bool_fun$ Rule_stream$ )Bool )
(declare-fun fun_app$d (State_bool_fun$ State$ )Bool )
(declare-fun fun_app$e (Rule_state_bool_fun_fun$ Rule$ )State_bool_fun$ )
(declare-fun fun_app$f (State_stream_stream_bool_fun$ State_stream_stream$ )Bool )
(declare-fun fun_app$g (Rule_stream_stream_bool_fun$ Rule_stream_stream$ )Bool )
(declare-fun fun_app$h (State_stream_bool_fun$ State_stream$ )Bool )
(declare-fun fun_app$i (Rule_bool_fun$ Rule$ )Bool )
(declare-fun fun_app$j (Rule_rule_fun$ Rule$ )Rule$ )
(declare-fun fun_app$k (Rule_rule_rule_fun_fun$ Rule$ )Rule_rule_fun$ )
(declare-fun fun_app$l (State_rule_fun$ State$ )Rule$ )
(declare-fun fun_app$m (Rule_state_rule_fun_fun$ Rule$ )State_rule_fun$ )
(declare-fun fun_app$n (State_rule_rule_fun_fun$ State$ )Rule_rule_fun$ )
(declare-fun fun_app$o (State_state_rule_fun_fun$ State$ )State_rule_fun$ )
(declare-fun fun_app$p (Rule_state_fun$ Rule$ )State$ )
(declare-fun fun_app$q (Rule_rule_state_fun_fun$ Rule$ )Rule_state_fun$ )
(declare-fun fun_app$r (State_state_fun$ State$ )State$ )
(declare-fun fun_app$s (Rule_state_state_fun_fun$ Rule$ )State_state_fun$ )
(declare-fun fun_app$t (State_rule_state_fun_fun$ State$ )Rule_state_fun$ )
(declare-fun fun_app$u (State_state_state_fun_fun$ State$ )State_state_fun$ )
(declare-fun fun_app$v (Rule_stream_rule_fun$ Rule_stream$ )Rule$ )
(declare-fun fun_app$w (Rule_rule_stream_rule_fun_fun$ Rule$ )Rule_stream_rule_fun$ )
(declare-fun fun_app$x (State_stream_rule_fun$ State_stream$ )Rule$ )
(declare-fun fun_app$y (Rule_state_stream_rule_fun_fun$ Rule$ )State_stream_rule_fun$ )
(declare-fun fun_app$z (Rule_rule_stream_fun$ Rule$ )Rule_stream$ )
(declare-fun fun_app$aa (Rule_rule_rule_stream_fun_fun$ Rule$ )Rule_rule_stream_fun$ )
(declare-fun fun_app$ab (Rule_state_stream_fun$ Rule$ )State_stream$ )
(declare-fun fun_app$ac (Rule_rule_state_stream_fun_fun$ Rule$ )Rule_state_stream_fun$ )
(declare-fun saturated$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_stream$ )Bool )
(declare-fun saturated$a (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State_rule_prod_stream$ )Bool )
(declare-fun stream_all$ (State_stream_stream_bool_fun$ State_stream_stream_stream$ )Bool )
(declare-fun stream_all$a (Rule_stream_stream_bool_fun$ Rule_stream_stream_stream$ )Bool )
(declare-fun stream_all$b (State_bool_fun$ )State_stream_bool_fun$ )
(declare-fun stream_all$c (Rule_stream_bool_fun$ )Rule_stream_stream_bool_fun$ )
(declare-fun stream_all$d (State_stream_bool_fun$ )State_stream_stream_bool_fun$ )
(declare-fun stream_all$e (Rule_bool_fun$ )Rule_stream_bool_fun$ )
(assert (! (not (exists ((?v0 Nat$ )(?v1 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ (snth$ rs$ ?v0 ))s$ )?v1 ))):named a0 ))
(assert (! (fun_app$ (fun_app$a (fun_app$b eff$ r$ )s$ )sl$ ):named a1 ))
(assert (! (= r$ (snth$ rs$ m$ )):named a2 ))
(assert (! (member$ s$ s$a ):named a3 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= r$ (snth$ rs$ ?v0 ))false ))false ):named a4 ))
(assert (! (fun_app$c (fair$ rules$ )rs$ ):named a5 ))
(assert (! (=> (forall ((?v0 Rule$ )(?v1 State_fset$ ))(=> (and (member$a ?v0 (sset$ rules$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )s$ )?v1 ))false ))false ):named a6 ))
(assert (! (exists ((?v0 Rule$ ))(and (member$a ?v0 (sset$ rules$ ))(exists ((?v1 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )s$ )?v1 )))):named a7 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (fun_app$d (fun_app$e (enabled$ eff$ )?v0 )?v1 )(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )?v2 ))):pattern ((fun_app$d (fun_app$e (enabled$ eff$ )?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 State$ ))(=> (member$ ?v0 s$a )(exists ((?v1 Rule$ ))(and (member$a ?v1 (sset$ rules$ ))(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v1 )?v0 )?v2 )))))):named a9 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(=> (fun_app$d (fun_app$e (enabled$ eff$ )?v0 )?v1 )(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )(pickEff$ eff$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(= (saturated$ eff$ rules$ ?v0 )(forall ((?v1 Rule$ ))(=> (member$a ?v1 (sset$ rules$ ))(saturated$a eff$ ?v1 ?v0 ))))):named a11 ))
(assert (! (forall ((?v0 State_stream_stream_stream$ )(?v1 Nat$ ))(member$b (snth$a ?v0 ?v1 )(sset$a ?v0 ))):named a12 ))
(assert (! (forall ((?v0 Rule_stream_stream_stream$ )(?v1 Nat$ ))(member$c (snth$b ?v0 ?v1 )(sset$b ?v0 ))):named a13 ))
(assert (! (forall ((?v0 Rule_stream_stream$ )(?v1 Nat$ ))(member$d (snth$c ?v0 ?v1 )(sset$c ?v0 ))):named a14 ))
(assert (! (forall ((?v0 State_stream_stream$ )(?v1 Nat$ ))(member$e (snth$d ?v0 ?v1 )(sset$d ?v0 ))):named a15 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 Nat$ ))(member$ (snth$e ?v0 ?v1 )(sset$e ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Nat$ ))(member$a (snth$ ?v0 ?v1 )(sset$ ?v0 ))):named a17 ))
(assert (! (forall ((?v0 State_stream_stream_bool_fun$ )(?v1 State_stream_stream_stream$ ))(= (stream_all$ ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$f ?v0 (snth$a ?v1 ?v2 ))))):named a18 ))
(assert (! (forall ((?v0 Rule_stream_stream_bool_fun$ )(?v1 Rule_stream_stream_stream$ ))(= (stream_all$a ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$g ?v0 (snth$b ?v1 ?v2 ))))):named a19 ))
(assert (! (forall ((?v0 State_bool_fun$ )(?v1 State_stream$ ))(= (fun_app$h (stream_all$b ?v0 )?v1 )(forall ((?v2 Nat$ ))(fun_app$d ?v0 (snth$e ?v1 ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_stream_stream$ ))(= (fun_app$g (stream_all$c ?v0 )?v1 )(forall ((?v2 Nat$ ))(fun_app$c ?v0 (snth$c ?v1 ?v2 ))))):named a21 ))
(assert (! (forall ((?v0 State_stream_bool_fun$ )(?v1 State_stream_stream$ ))(= (fun_app$f (stream_all$d ?v0 )?v1 )(forall ((?v2 Nat$ ))(fun_app$h ?v0 (snth$d ?v1 ?v2 ))))):named a22 ))
(assert (! (forall ((?v0 Rule_bool_fun$ )(?v1 Rule_stream$ ))(= (fun_app$c (stream_all$e ?v0 )?v1 )(forall ((?v2 Nat$ ))(fun_app$i ?v0 (snth$ ?v1 ?v2 ))))):named a23 ))
(assert (! (forall ((?v0 Rule_rule_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$ ?v0 ?v1 ?v2 )?v3 )(fun_app$j (fun_app$k ?v0 (snth$ ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 Rule_state_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$a ?v0 ?v1 ?v2 )?v3 )(fun_app$l (fun_app$m ?v0 (snth$ ?v1 ?v3 ))(snth$e ?v2 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 State_rule_rule_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$b ?v0 ?v1 ?v2 )?v3 )(fun_app$j (fun_app$n ?v0 (snth$e ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a26 ))
(assert (! (forall ((?v0 State_state_rule_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$c ?v0 ?v1 ?v2 )?v3 )(fun_app$l (fun_app$o ?v0 (snth$e ?v1 ?v3 ))(snth$e ?v2 ?v3 )))):named a27 ))
(assert (! (forall ((?v0 Rule_rule_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 Nat$ ))(= (snth$e (smap2$d ?v0 ?v1 ?v2 )?v3 )(fun_app$p (fun_app$q ?v0 (snth$ ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a28 ))
(assert (! (forall ((?v0 Rule_state_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ )(?v3 Nat$ ))(= (snth$e (smap2$e ?v0 ?v1 ?v2 )?v3 )(fun_app$r (fun_app$s ?v0 (snth$ ?v1 ?v3 ))(snth$e ?v2 ?v3 )))):named a29 ))
(assert (! (forall ((?v0 State_rule_state_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ )(?v3 Nat$ ))(= (snth$e (smap2$f ?v0 ?v1 ?v2 )?v3 )(fun_app$p (fun_app$t ?v0 (snth$e ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a30 ))
(assert (! (forall ((?v0 State_state_state_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ )(?v3 Nat$ ))(= (snth$e (smap2$g ?v0 ?v1 ?v2 )?v3 )(fun_app$r (fun_app$u ?v0 (snth$e ?v1 ?v3 ))(snth$e ?v2 ?v3 )))):named a31 ))
(assert (! (forall ((?v0 Rule_rule_stream_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$h ?v0 ?v1 ?v2 )?v3 )(fun_app$v (fun_app$w ?v0 (snth$ ?v1 ?v3 ))(snth$c ?v2 ?v3 )))):named a32 ))
(assert (! (forall ((?v0 Rule_state_stream_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$i ?v0 ?v1 ?v2 )?v3 )(fun_app$x (fun_app$y ?v0 (snth$ ?v1 ?v3 ))(snth$d ?v2 ?v3 )))):named a33 ))
(assert (! (forall ((?v0 State_stream_stream_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$b (snth$a (snth$f ?v0 ?v1 )?v2 )(sset$a (smerge$ ?v0 )))):named a34 ))
(assert (! (forall ((?v0 Rule_stream_stream_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$c (snth$b (snth$g ?v0 ?v1 )?v2 )(sset$b (smerge$a ?v0 )))):named a35 ))
(assert (! (forall ((?v0 Rule_stream_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$d (snth$c (snth$b ?v0 ?v1 )?v2 )(sset$c (smerge$b ?v0 )))):named a36 ))
(assert (! (forall ((?v0 State_stream_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$e (snth$d (snth$a ?v0 ?v1 )?v2 )(sset$d (smerge$c ?v0 )))):named a37 ))
(assert (! (forall ((?v0 State_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$ (snth$e (snth$d ?v0 ?v1 )?v2 )(sset$e (smerge$d ?v0 )))):named a38 ))
(assert (! (forall ((?v0 Rule_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$a (snth$ (snth$c ?v0 ?v1 )?v2 )(sset$ (smerge$e ?v0 )))):named a39 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule$ )(?v2 State_fset$ )(?v3 State$ ))(=> (and (member$ ?v0 s$a )(and (member$a ?v1 (sset$ rules$ ))(and (fun_app$ (fun_app$a (fun_app$b eff$ ?v1 )?v0 )?v2 )(fmember$ ?v3 ?v2 ))))(member$ ?v3 s$a ))):named a40 ))
(assert (! (forall ((?v0 Rule_rule_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 Rule_stream$ ))(= (= (smap2$ ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$j (fun_app$k ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a41 ))
(assert (! (forall ((?v0 Rule_rule_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 State_stream$ ))(= (= (smap2$d ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$p (fun_app$q ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$e ?v3 ?v4 ))))):named a42 ))
(assert (! (forall ((?v0 Rule_state_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ )(?v3 Rule_stream$ ))(= (= (smap2$a ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$l (fun_app$m ?v0 (snth$ ?v1 ?v4 ))(snth$e ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a43 ))
(assert (! (forall ((?v0 Rule_state_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ )(?v3 State_stream$ ))(= (= (smap2$e ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$r (fun_app$s ?v0 (snth$ ?v1 ?v4 ))(snth$e ?v2 ?v4 ))(snth$e ?v3 ?v4 ))))):named a44 ))
(assert (! (forall ((?v0 State_rule_rule_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ )(?v3 Rule_stream$ ))(= (= (smap2$b ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$j (fun_app$n ?v0 (snth$e ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a45 ))
(assert (! (forall ((?v0 State_rule_state_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ )(?v3 State_stream$ ))(= (= (smap2$f ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$p (fun_app$t ?v0 (snth$e ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$e ?v3 ?v4 ))))):named a46 ))
(assert (! (forall ((?v0 State_state_rule_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ )(?v3 Rule_stream$ ))(= (= (smap2$c ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$l (fun_app$o ?v0 (snth$e ?v1 ?v4 ))(snth$e ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a47 ))
(assert (! (forall ((?v0 State_state_state_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ )(?v3 State_stream$ ))(= (= (smap2$g ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$r (fun_app$u ?v0 (snth$e ?v1 ?v4 ))(snth$e ?v2 ?v4 ))(snth$e ?v3 ?v4 ))))):named a48 ))
(assert (! (forall ((?v0 Rule_rule_rule_stream_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 Rule_stream_stream$ ))(= (= (smap2$j ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$z (fun_app$aa ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$c ?v3 ?v4 ))))):named a49 ))
(assert (! (forall ((?v0 Rule_rule_state_stream_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 State_stream_stream$ ))(= (= (smap2$k ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$ab (fun_app$ac ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$d ?v3 ?v4 ))))):named a50 ))
(check-sat )
;(get-unsat-core )
