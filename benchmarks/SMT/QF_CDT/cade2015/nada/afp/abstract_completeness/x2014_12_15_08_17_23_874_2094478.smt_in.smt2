;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_bool_fun$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort Rule_state_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_bool_fun$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_stream_bool_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_state_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort Rule_stream_state_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_bool_fun_state_rule_prod_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-sort State_rule_prod_stream$ 0)
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (State_rule_prod_stream$)State_rule_prod$)
(declare-fun stl$ (State_rule_prod_stream$)State_rule_prod_stream$)
(declare-fun sCons$ (State_rule_prod$ State_rule_prod_stream$ )State_rule_prod_stream$)
(declare-fun shd$a (Rule_stream$)Rule$)
(declare-fun stl$a (Rule_stream$)Rule_stream$)
(declare-fun sCons$a (Rule$ Rule_stream$ )Rule_stream$)
(declare-fun r$ ()Rule$ )
(declare-fun s$ ()State_set$ )
(declare-fun ev$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun uu$ ()State_rule_prod_bool_fun$ )
(declare-fun alw$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun nxt$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun per$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_set$ Rule$ )Bool )
(declare-fun uua$ ()State_rule_prod_bool_fun$ )
(declare-fun uub$ ()State_rule_prod_stream_bool_fun$ )
(declare-fun uuc$ (Rule$ )State_rule_prod_bool_fun$ )
(declare-fun uud$ (Rule$ )State_rule_prod_bool_fun$ )
(declare-fun uue$ (Rule$ )State_rule_prod_stream_bool_fun$ )
(declare-fun uuf$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun uug$ (State_rule_prod_bool_fun$ )State_rule_prod_bool_fun_state_rule_prod_bool_fun_fun$ )
(declare-fun uuh$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$ )
(declare-fun uui$ ()State_rule_prod_stream_bool_fun$ )
(declare-fun uuj$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$ )
(declare-fun epath$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_stream_state_rule_prod_stream_bool_fun_fun$ )
(declare-fun holds$ (State_rule_prod_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun steps$ ()State_rule_prod_stream$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_bool_fun$ )
(declare-fun fun_app$ (State_rule_prod_bool_fun$ State_rule_prod$ )Bool )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun fun_app$a (State_bool_fun$ State$ )Bool )
(declare-fun fun_app$b (State_rule_prod_stream_bool_fun$ State_rule_prod_stream$ )Bool )
(declare-fun fun_app$c (State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$ State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun fun_app$d (State_rule_prod_bool_fun_state_rule_prod_bool_fun_fun$ State_rule_prod_bool_fun$ )State_rule_prod_bool_fun$ )
(declare-fun fun_app$e (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$f (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$g (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun fun_app$h (Rule_stream_state_rule_prod_stream_bool_fun_fun$ Rule_stream$ )State_rule_prod_stream_bool_fun$ )
(declare-fun fun_app$i (Rule_state_rule_prod_stream_bool_fun_fun$ Rule$ )State_rule_prod_stream_bool_fun$ )
(declare-fun fun_app$j (Rule_state_bool_fun_fun$ Rule$ )State_bool_fun$ )
(declare-fun saturated$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_state_rule_prod_stream_bool_fun_fun$ )
(assert (! (forall ((?v0 State_rule_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$a (enabled$ eff$ r$ )(fst$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(! (= (fun_app$b uub$ ?v0 )(=> (fun_app$b (holds$ uu$ )?v0 )(or (fun_app$b (holds$ uua$ )?v0 )(fun_app$b (nxt$ (holds$ uu$ ))?v0 )))):pattern ((fun_app$b uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 State_rule_prod$ ))(! (= (fun_app$ uua$ ?v0 )(= (snd$ ?v0 )r$ )):pattern ((fun_app$ uua$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State_rule_prod$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )(fun_app$a (enabled$ eff$ ?v0 )(fst$ ?v1 ))):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State_rule_prod_stream$ ))(! (= (fun_app$b (uue$ ?v0 )?v1 )(=> (fun_app$b (holds$ (uuc$ ?v0 ))?v1 )(fun_app$b (ev$ (holds$ (uud$ ?v0 )))?v1 ))):pattern ((fun_app$b (uue$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream$ ))(! (= (fun_app$b (uuf$ ?v0 )?v1 )(=> (fun_app$b ?v0 ?v1 )(fun_app$b (nxt$ ?v0 )?v1 ))):pattern ((fun_app$b (uuf$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State_rule_prod$ ))(! (= (fun_app$ (uud$ ?v0 )?v1 )(= (snd$ ?v1 )?v0 )):pattern ((fun_app$ (uud$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream_bool_fun$ )(?v2 State_rule_prod_stream$ ))(! (= (fun_app$b (fun_app$c (uuj$ ?v0 )?v1 )?v2 )(=> (fun_app$b ?v0 ?v2 )(fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$c (uuj$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$ )(?v1 State_rule_prod_bool_fun$ )(?v2 State_rule_prod$ ))(! (= (fun_app$ (fun_app$d (uug$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$d (uug$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream_bool_fun$ )(?v2 State_rule_prod_stream$ ))(! (= (fun_app$b (fun_app$c (uuh$ ?v0 )?v1 )?v2 )(and (fun_app$b ?v0 ?v2 )(fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$c (uuh$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(! (= (fun_app$b uui$ ?v0 )false ):pattern ((fun_app$b uui$ ?v0 )))):named a10 ))
(assert (! (not (fun_app$b (alw$ uub$ )steps$ )):named a11 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (fun_app$a (enabled$ eff$ ?v0 )?v1 )(exists ((?v2 State_fset$ ))(fun_app$e (fun_app$f (fun_app$g eff$ ?v0 )?v1 )?v2 ))):pattern ((fun_app$a (enabled$ eff$ ?v0 )?v1 )))):named a12 ))
(assert (! (and (fun_app$b (fun_app$h (epath$ eff$ )rules$ )steps$ )(member$ (fst$ (shd$ steps$ ))s$ )):named a13 ))
(assert (! (per$ eff$ rules$ s$ r$ ):named a14 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(=> (fun_app$a (enabled$ eff$ ?v0 )?v1 )(fun_app$e (fun_app$f (fun_app$g eff$ ?v0 )?v1 )(pickEff$ eff$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State$ ))(! (= (fun_app$a (enabled$ ?v0 ?v1 )?v2 )(exists ((?v3 State_fset$ ))(fun_app$e (fun_app$f (fun_app$g ?v0 ?v1 )?v2 )?v3 ))):pattern ((fun_app$a (enabled$ ?v0 ?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 Rule$ ))(= (fun_app$i (saturated$ eff$ )?v0 )(alw$ (uue$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream$ ))(=> (and (fun_app$b ?v0 ?v1 )(fun_app$b (alw$ (uuf$ ?v0 ))?v1 ))(fun_app$b (alw$ ?v0 )?v1 ))):named a18 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ ))(= (alw$ (alw$ ?v0 ))(alw$ ?v0 ))):named a19 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream$ ))(! (= (fun_app$b (alw$ ?v0 )?v1 )(and (fun_app$b ?v0 ?v1 )(fun_app$b (nxt$ (alw$ ?v0 ))?v1 ))):pattern ((fun_app$b (alw$ ?v0 )?v1 )))):named a20 ))
(assert (! (forall ((?v0 State_rule_prod$ )(?v1 State_rule_prod$ ))(= (= ?v0 ?v1 )(and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 ))))):named a21 ))
(assert (! (forall ((?v0 State_rule_prod$ )(?v1 State_rule_prod$ ))(=> (and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 )))(= ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 State_rule_prod$ )(?v1 State_rule_prod$ ))(=> (and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 )))(= ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 Rule_state_bool_fun_fun$ )(?v1 State_rule_prod$ ))(=> (and (fun_app$a (fun_app$j ?v0 (snd$ ?v1 ))(fst$ ?v1 ))(forall ((?v2 State$ )(?v3 Rule$ ))(=> (fun_app$a (fun_app$j ?v0 ?v3 )?v2 )false )))false )):named a24 ))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_bool_fun$ ))(= (and (fun_app$b (holds$ ?v0 )?v1 )(fun_app$b (holds$ ?v2 )?v1 ))(fun_app$b (holds$ (fun_app$d (uug$ ?v0 )?v2 ))?v1 ))):named a25 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream_bool_fun$ )(?v2 State_rule_prod_stream$ ))(= (fun_app$b (alw$ (fun_app$c (uuh$ ?v0 )?v1 ))?v2 )(and (fun_app$b (alw$ ?v0 )?v2 )(fun_app$b (alw$ ?v1 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(= (fun_app$b (alw$ uui$ )?v0 )false )):named a27 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_stream_bool_fun$ ))(=> (and (fun_app$b (alw$ ?v0 )?v1 )(fun_app$b (alw$ (fun_app$c (uuj$ ?v0 )?v2 ))?v1 ))(fun_app$b (alw$ ?v2 )?v1 ))):named a28 ))
(check-sat )
;(get-unsat-core )
