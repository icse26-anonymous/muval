;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Rule_bool_fun$ 0 )
(declare-sort Rule_rule_fun$ 0 )
(declare-sort Rule_state_fun$ 0 )
(declare-sort State_rule_fun$ 0 )
(declare-sort State_state_fun$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort Rule_stream_bool_fun$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_stream_bool_fun$ 0 )
(declare-sort Rule_rule_rule_fun_fun$ 0 )
(declare-sort Rule_rule_prod_rule_fun$ 0 )
(declare-sort Rule_rule_state_fun_fun$ 0 )
(declare-sort Rule_state_rule_fun_fun$ 0 )
(declare-sort State_rule_rule_fun_fun$ 0 )
(declare-sort Rule_state_state_fun_fun$ 0 )
(declare-sort State_rule_prod_rule_fun$ 0 )
(declare-sort State_rule_state_fun_fun$ 0 )
(declare-sort State_state_rule_fun_fun$ 0 )
(declare-sort State_state_state_fun_fun$ 0 )
(declare-sort Nat_rule_stream_bool_fun_fun$ 0 )
(declare-sort Nat_state_stream_bool_fun_fun$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_rule_prod_stream_bool_fun$ 0 )
(declare-sort State_rule_prod_stream_bool_fun$ 0 )
(declare-sort Rule_rule_prod_rule_rule_fun_fun$ 0 )
(declare-sort Rule_rule_rule_prod_rule_fun_fun$ 0 )
(declare-sort Rule_rule_rule_rule_prod_fun_fun$ 0 )
(declare-sort Rule_state_rule_prod_rule_fun_fun$ 0 )
(declare-sort Nat_rule_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Nat_state_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort Rule_rule_prod_rule_prod_stream_bool_fun$ 0 )
(declare-sort Rule_rule_rule_prod_prod_stream_bool_fun$ 0 )
(declare-sort Rule_rule_prod_rule_rule_prod_rule_fun_fun$ 0 )
(declare-sort Rule_rule_prod_rule_rule_rule_prod_fun_fun$ 0 )
(declare-sort Rule_rule_rule_prod_rule_rule_prod_fun_fun$ 0 )
(declare-sort Nat_rule_rule_prod_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort Nat_rule_rule_rule_prod_prod_stream_bool_fun_fun$ 0 )
(declare-sort Rule_rule_prod_rule_rule_prod_prod_stream_bool_fun$ 0 )
(declare-sort Rule_rule_prod_rule_rule_prod_rule_rule_prod_fun_fun$ 0 )
(declare-sort Nat_rule_rule_prod_rule_rule_prod_prod_stream_bool_fun_fun$ 0 )
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-sort Rule_rule_prod$ 0)
(declare-sort Rule_rule_prod_rule_rule_prod_prod$ 0)
(declare-fun fst$ (Rule_rule_prod$)Rule$)
(declare-fun snd$ (Rule_rule_prod$)Rule$)
(declare-fun pair$ (Rule$ Rule$ )Rule_rule_prod$)
(declare-fun fst$a (Rule_rule_prod_rule_rule_prod_prod$)Rule_rule_prod$)
(declare-fun snd$a (Rule_rule_prod_rule_rule_prod_prod$)Rule_rule_prod$)
(declare-fun pair$a (Rule_rule_prod$ Rule_rule_prod$ )Rule_rule_prod_rule_rule_prod_prod$)
(declare-sort Rule_rule_prod_rule_rule_prod_prod_stream$ 0)
(declare-fun shd$a (Rule_rule_prod_rule_rule_prod_prod_stream$)Rule_rule_prod_rule_rule_prod_prod$)
(declare-fun stl$a (Rule_rule_prod_rule_rule_prod_prod_stream$)Rule_rule_prod_rule_rule_prod_prod_stream$)
(declare-fun sCons$a (Rule_rule_prod_rule_rule_prod_prod$ Rule_rule_prod_rule_rule_prod_prod_stream$ )Rule_rule_prod_rule_rule_prod_prod_stream$)
(declare-sort Rule_rule_prod_rule_prod$ 0)
(declare-fun fst$b (Rule_rule_prod_rule_prod$)Rule_rule_prod$)
(declare-fun snd$b (Rule_rule_prod_rule_prod$)Rule$)
(declare-fun pair$b (Rule_rule_prod$ Rule$ )Rule_rule_prod_rule_prod$)
(declare-sort Rule_rule_prod_rule_prod_stream$ 0)
(declare-fun shd$b (Rule_rule_prod_rule_prod_stream$)Rule_rule_prod_rule_prod$)
(declare-fun stl$b (Rule_rule_prod_rule_prod_stream$)Rule_rule_prod_rule_prod_stream$)
(declare-fun sCons$b (Rule_rule_prod_rule_prod$ Rule_rule_prod_rule_prod_stream$ )Rule_rule_prod_rule_prod_stream$)
(declare-sort Rule_rule_rule_prod_prod$ 0)
(declare-fun fst$c (Rule_rule_rule_prod_prod$)Rule$)
(declare-fun snd$c (Rule_rule_rule_prod_prod$)Rule_rule_prod$)
(declare-fun pair$c (Rule$ Rule_rule_prod$ )Rule_rule_rule_prod_prod$)
(declare-sort Rule_rule_rule_prod_prod_stream$ 0)
(declare-fun shd$c (Rule_rule_rule_prod_prod_stream$)Rule_rule_rule_prod_prod$)
(declare-fun stl$c (Rule_rule_rule_prod_prod_stream$)Rule_rule_rule_prod_prod_stream$)
(declare-fun sCons$c (Rule_rule_rule_prod_prod$ Rule_rule_rule_prod_prod_stream$ )Rule_rule_rule_prod_prod_stream$)
(declare-sort State_rule_prod$ 0)
(declare-fun fst$d (State_rule_prod$)State$)
(declare-fun snd$d (State_rule_prod$)Rule$)
(declare-fun pair$d (State$ Rule$ )State_rule_prod$)
(declare-sort State_rule_prod_stream$ 0)
(declare-sort State_stream$ 0)
(declare-sort Rule_rule_prod_stream$ 0)
(declare-fun shd$d (State_rule_prod_stream$)State_rule_prod$)
(declare-fun stl$d (State_rule_prod_stream$)State_rule_prod_stream$)
(declare-fun sCons$d (State_rule_prod$ State_rule_prod_stream$ )State_rule_prod_stream$)
(declare-fun shd$e (State_stream$)State$)
(declare-fun stl$e (State_stream$)State_stream$)
(declare-fun sCons$e (State$ State_stream$ )State_stream$)
(declare-fun shd$f (Rule_rule_prod_stream$)Rule_rule_prod$)
(declare-fun stl$f (Rule_rule_prod_stream$)Rule_rule_prod_stream$)
(declare-fun sCons$f (Rule_rule_prod$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$)
(declare-sort Rule_state_prod$ 0)
(declare-fun fst$e (Rule_state_prod$)Rule$)
(declare-fun snd$e (Rule_state_prod$)State$)
(declare-fun pair$e (Rule$ State$ )Rule_state_prod$)
(declare-sort Rule_state_prod_stream$ 0)
(declare-fun shd$g (Rule_state_prod_stream$)Rule_state_prod$)
(declare-fun stl$g (Rule_state_prod_stream$)Rule_state_prod_stream$)
(declare-fun sCons$g (Rule_state_prod$ Rule_state_prod_stream$ )Rule_state_prod_stream$)
(declare-sort State_state_prod$ 0)
(declare-fun fst$f (State_state_prod$)State$)
(declare-fun snd$f (State_state_prod$)State$)
(declare-fun pair$f (State$ State$ )State_state_prod$)
(declare-sort State_state_prod_stream$ 0)
(declare-fun shd$h (State_state_prod_stream$)State_state_prod$)
(declare-fun stl$h (State_state_prod_stream$)State_state_prod_stream$)
(declare-fun sCons$h (State_state_prod$ State_state_prod_stream$ )State_state_prod_stream$)
(declare-sort Rule_state_rule_prod_prod$ 0)
(declare-fun fst$g (Rule_state_rule_prod_prod$)Rule$)
(declare-fun snd$g (Rule_state_rule_prod_prod$)State_rule_prod$)
(declare-fun pair$g (Rule$ State_rule_prod$ )Rule_state_rule_prod_prod$)
(declare-sort Rule_state_rule_prod_prod_stream$ 0)
(declare-fun shd$i (Rule_state_rule_prod_prod_stream$)Rule_state_rule_prod_prod$)
(declare-fun stl$i (Rule_state_rule_prod_prod_stream$)Rule_state_rule_prod_prod_stream$)
(declare-fun sCons$i (Rule_state_rule_prod_prod$ Rule_state_rule_prod_prod_stream$ )Rule_state_rule_prod_prod_stream$)
(declare-sort Rule_rule_prod_state_prod$ 0)
(declare-fun fst$h (Rule_rule_prod_state_prod$)Rule_rule_prod$)
(declare-fun snd$h (Rule_rule_prod_state_prod$)State$)
(declare-fun pair$h (Rule_rule_prod$ State$ )Rule_rule_prod_state_prod$)
(declare-sort Rule_rule_prod_state_prod_stream$ 0)
(declare-fun shd$j (Rule_rule_prod_state_prod_stream$)Rule_rule_prod_state_prod$)
(declare-fun stl$j (Rule_rule_prod_state_prod_stream$)Rule_rule_prod_state_prod_stream$)
(declare-fun sCons$j (Rule_rule_prod_state_prod$ Rule_rule_prod_state_prod_stream$ )Rule_rule_prod_state_prod_stream$)
(declare-sort State_rule_prod_rule_prod$ 0)
(declare-fun fst$i (State_rule_prod_rule_prod$)State_rule_prod$)
(declare-fun snd$i (State_rule_prod_rule_prod$)Rule$)
(declare-fun pair$i (State_rule_prod$ Rule$ )State_rule_prod_rule_prod$)
(declare-sort State_rule_prod_rule_prod_stream$ 0)
(declare-fun shd$k (State_rule_prod_rule_prod_stream$)State_rule_prod_rule_prod$)
(declare-fun stl$k (State_rule_prod_rule_prod_stream$)State_rule_prod_rule_prod_stream$)
(declare-fun sCons$k (State_rule_prod_rule_prod$ State_rule_prod_rule_prod_stream$ )State_rule_prod_rule_prod_stream$)
(declare-sort State_rule_prod_state_prod$ 0)
(declare-fun fst$j (State_rule_prod_state_prod$)State_rule_prod$)
(declare-fun snd$j (State_rule_prod_state_prod$)State$)
(declare-fun pair$j (State_rule_prod$ State$ )State_rule_prod_state_prod$)
(declare-sort State_rule_prod_state_prod_stream$ 0)
(declare-fun shd$l (State_rule_prod_state_prod_stream$)State_rule_prod_state_prod$)
(declare-fun stl$l (State_rule_prod_state_prod_stream$)State_rule_prod_state_prod_stream$)
(declare-fun sCons$l (State_rule_prod_state_prod$ State_rule_prod_state_prod_stream$ )State_rule_prod_state_prod_stream$)
(declare-fun s$ ()State$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State_set$ )
(declare-fun uu$ (Rule_stream$ State$ )Nat_bool_fun$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun uua$ (State$ )Rule_bool_fun$ )
(declare-fun uub$ (Rule_state_state_fset_bool_fun_fun_fun$ State$ )Rule_bool_fun$ )
(declare-fun fair$ (Rule_stream$ )Rule_stream_bool_fun$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun root$ (State_rule_prod_tree$ )State_rule_prod$ )
(declare-fun szip$ (Rule_stream$ Rule_stream$ )Rule_rule_prod_stream$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun ev_at$ (Rule_rule_prod_rule_rule_prod_prod_stream_bool_fun$ )Nat_rule_rule_prod_rule_rule_prod_prod_stream_bool_fun_fun$ )
(declare-fun fair$a (Rule_rule_prod_rule_rule_prod_prod_stream$ )Rule_rule_prod_rule_rule_prod_prod_stream_bool_fun$ )
(declare-fun fair$b (Rule_rule_prod_rule_prod_stream$ )Rule_rule_prod_rule_prod_stream_bool_fun$ )
(declare-fun fair$c (Rule_rule_rule_prod_prod_stream$ )Rule_rule_rule_prod_prod_stream_bool_fun$ )
(declare-fun fair$d (State_rule_prod_stream$ )State_rule_prod_stream_bool_fun$ )
(declare-fun fair$e (State_stream$ )State_stream_bool_fun$ )
(declare-fun fair$f (Rule_rule_prod_stream$ )Rule_rule_prod_stream_bool_fun$ )
(declare-fun fenum$ (Rule_stream$ )Rule_stream$ )
(declare-fun least$ (Nat_bool_fun$ )Nat$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun sdrop$ (Nat$ Rule_stream$ )Rule_stream$ )
(declare-fun smap2$ (Rule_rule_rule_fun_fun$ Rule_stream$ Rule_stream$ )Rule_stream$ )
(declare-fun szip$a (State_stream$ Rule_stream$ )State_rule_prod_stream$ )
(declare-fun szip$b (Rule_stream$ Rule_rule_prod_stream$ )Rule_rule_rule_prod_prod_stream$ )
(declare-fun szip$c (Rule_rule_prod_stream$ Rule_stream$ )Rule_rule_prod_rule_prod_stream$ )
(declare-fun szip$d (Rule_rule_prod_stream$ Rule_rule_prod_stream$ )Rule_rule_prod_rule_rule_prod_prod_stream$ )
(declare-fun szip$e (Rule_stream$ State_stream$ )Rule_state_prod_stream$ )
(declare-fun szip$f (State_stream$ State_stream$ )State_state_prod_stream$ )
(declare-fun szip$g (Rule_stream$ State_rule_prod_stream$ )Rule_state_rule_prod_prod_stream$ )
(declare-fun szip$h (Rule_rule_prod_stream$ State_stream$ )Rule_rule_prod_state_prod_stream$ )
(declare-fun szip$i (State_rule_prod_stream$ Rule_stream$ )State_rule_prod_rule_prod_stream$ )
(declare-fun szip$j (State_rule_prod_stream$ State_stream$ )State_rule_prod_state_prod_stream$ )
(declare-fun ev_at$a (Rule_rule_prod_rule_prod_stream_bool_fun$ )Nat_rule_rule_prod_rule_prod_stream_bool_fun_fun$ )
(declare-fun ev_at$b (Rule_rule_rule_prod_prod_stream_bool_fun$ )Nat_rule_rule_rule_prod_prod_stream_bool_fun_fun$ )
(declare-fun ev_at$c (State_rule_prod_stream_bool_fun$ )Nat_state_rule_prod_stream_bool_fun_fun$ )
(declare-fun ev_at$d (State_stream_bool_fun$ )Nat_state_stream_bool_fun_fun$ )
(declare-fun ev_at$e (Rule_rule_prod_stream_bool_fun$ )Nat_rule_rule_prod_stream_bool_fun_fun$ )
(declare-fun ev_at$f (Rule_stream_bool_fun$ )Nat_rule_stream_bool_fun_fun$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )State_rule_prod_tree$ )
(declare-fun sdrop$a (Nat$ Rule_rule_prod_rule_rule_prod_prod_stream$ )Rule_rule_prod_rule_rule_prod_prod_stream$ )
(declare-fun sdrop$b (Nat$ Rule_rule_prod_rule_prod_stream$ )Rule_rule_prod_rule_prod_stream$ )
(declare-fun sdrop$c (Nat$ Rule_rule_rule_prod_prod_stream$ )Rule_rule_rule_prod_prod_stream$ )
(declare-fun sdrop$d (Nat$ State_rule_prod_stream$ )State_rule_prod_stream$ )
(declare-fun sdrop$e (Nat$ State_stream$ )State_stream$ )
(declare-fun sdrop$f (Nat$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$ )
(declare-fun sdrop$g (Nat$ Rule_state_prod_stream$ )Rule_state_prod_stream$ )
(declare-fun sdrop$h (Nat$ State_state_prod_stream$ )State_state_prod_stream$ )
(declare-fun sdrop$i (Nat$ Rule_state_rule_prod_prod_stream$ )Rule_state_rule_prod_prod_stream$ )
(declare-fun sdrop$j (Nat$ Rule_rule_prod_state_prod_stream$ )Rule_rule_prod_state_prod_stream$ )
(declare-fun sdrop$k (Nat$ State_rule_prod_rule_prod_stream$ )State_rule_prod_rule_prod_stream$ )
(declare-fun smap2$a (Rule_rule_rule_prod_rule_fun_fun$ Rule_stream$ Rule_rule_prod_stream$ )Rule_stream$ )
(declare-fun smap2$b (Rule_rule_prod_rule_rule_fun_fun$ Rule_rule_prod_stream$ Rule_stream$ )Rule_stream$ )
(declare-fun smap2$c (Rule_rule_rule_rule_prod_fun_fun$ Rule_stream$ Rule_stream$ )Rule_rule_prod_stream$ )
(declare-fun smap2$d (Rule_rule_prod_rule_rule_prod_rule_fun_fun$ Rule_rule_prod_stream$ Rule_rule_prod_stream$ )Rule_stream$ )
(declare-fun smap2$e (Rule_rule_rule_prod_rule_rule_prod_fun_fun$ Rule_stream$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$ )
(declare-fun smap2$f (Rule_rule_prod_rule_rule_rule_prod_fun_fun$ Rule_rule_prod_stream$ Rule_stream$ )Rule_rule_prod_stream$ )
(declare-fun smap2$g (Rule_rule_prod_rule_rule_prod_rule_rule_prod_fun_fun$ Rule_rule_prod_stream$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$ )
(declare-fun smap2$h (State_rule_rule_fun_fun$ State_stream$ Rule_stream$ )Rule_stream$ )
(declare-fun smap2$i (State_state_rule_fun_fun$ State_stream$ State_stream$ )Rule_stream$ )
(declare-fun smap2$j (Rule_state_rule_fun_fun$ Rule_stream$ State_stream$ )Rule_stream$ )
(declare-fun smap2$k (Rule_rule_state_fun_fun$ Rule_stream$ Rule_stream$ )State_stream$ )
(declare-fun smap2$l (Rule_state_state_fun_fun$ Rule_stream$ State_stream$ )State_stream$ )
(declare-fun smap2$m (State_rule_state_fun_fun$ State_stream$ Rule_stream$ )State_stream$ )
(declare-fun smap2$n (State_state_state_fun_fun$ State_stream$ State_stream$ )State_stream$ )
(declare-fun smap2$o (Rule_state_rule_prod_rule_fun_fun$ Rule_stream$ State_rule_prod_stream$ )Rule_stream$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (Rule_bool_fun$ Rule$ )Bool )
(declare-fun minWait$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Nat$ )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$b (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$c (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$d (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun fun_app$e (Rule_stream_bool_fun$ Rule_stream$ )Bool )
(declare-fun fun_app$f (Rule_rule_prod_rule_rule_prod_prod_stream_bool_fun$ Rule_rule_prod_rule_rule_prod_prod_stream$ )Bool )
(declare-fun fun_app$g (Rule_rule_prod_rule_prod_stream_bool_fun$ Rule_rule_prod_rule_prod_stream$ )Bool )
(declare-fun fun_app$h (Rule_rule_rule_prod_prod_stream_bool_fun$ Rule_rule_rule_prod_prod_stream$ )Bool )
(declare-fun fun_app$i (State_rule_prod_stream_bool_fun$ State_rule_prod_stream$ )Bool )
(declare-fun fun_app$j (State_stream_bool_fun$ State_stream$ )Bool )
(declare-fun fun_app$k (Rule_rule_prod_stream_bool_fun$ Rule_rule_prod_stream$ )Bool )
(declare-fun fun_app$l (Nat_rule_rule_prod_rule_rule_prod_prod_stream_bool_fun_fun$ Nat$ )Rule_rule_prod_rule_rule_prod_prod_stream_bool_fun$ )
(declare-fun fun_app$m (Nat_rule_rule_prod_rule_prod_stream_bool_fun_fun$ Nat$ )Rule_rule_prod_rule_prod_stream_bool_fun$ )
(declare-fun fun_app$n (Nat_rule_rule_rule_prod_prod_stream_bool_fun_fun$ Nat$ )Rule_rule_rule_prod_prod_stream_bool_fun$ )
(declare-fun fun_app$o (Nat_state_rule_prod_stream_bool_fun_fun$ Nat$ )State_rule_prod_stream_bool_fun$ )
(declare-fun fun_app$p (Nat_state_stream_bool_fun_fun$ Nat$ )State_stream_bool_fun$ )
(declare-fun fun_app$q (Nat_rule_rule_prod_stream_bool_fun_fun$ Nat$ )Rule_rule_prod_stream_bool_fun$ )
(declare-fun fun_app$r (Nat_rule_stream_bool_fun_fun$ Nat$ )Rule_stream_bool_fun$ )
(declare-fun fun_app$s (Rule_rule_fun$ Rule$ )Rule$ )
(declare-fun fun_app$t (Rule_rule_rule_fun_fun$ Rule$ )Rule_rule_fun$ )
(declare-fun fun_app$u (State_rule_fun$ State$ )Rule$ )
(declare-fun fun_app$v (Rule_state_rule_fun_fun$ Rule$ )State_rule_fun$ )
(declare-fun fun_app$w (State_rule_rule_fun_fun$ State$ )Rule_rule_fun$ )
(declare-fun fun_app$x (State_state_rule_fun_fun$ State$ )State_rule_fun$ )
(declare-fun fun_app$y (Rule_state_fun$ Rule$ )State$ )
(declare-fun fun_app$z (Rule_rule_state_fun_fun$ Rule$ )Rule_state_fun$ )
(declare-fun fun_app$aa (State_state_fun$ State$ )State$ )
(declare-fun fun_app$ab (Rule_state_state_fun_fun$ Rule$ )State_state_fun$ )
(declare-fun fun_app$ac (State_rule_state_fun_fun$ State$ )Rule_state_fun$ )
(declare-fun fun_app$ad (State_state_state_fun_fun$ State$ )State_state_fun$ )
(declare-fun fun_app$ae (Rule_rule_prod_rule_fun$ Rule_rule_prod$ )Rule$ )
(declare-fun fun_app$af (Rule_rule_rule_prod_rule_fun_fun$ Rule$ )Rule_rule_prod_rule_fun$ )
(declare-fun fun_app$ag (State_rule_prod_rule_fun$ State_rule_prod$ )Rule$ )
(declare-fun fun_app$ah (Rule_state_rule_prod_rule_fun_fun$ Rule$ )State_rule_prod_rule_fun$ )
(declare-fun sdrop_while$ (Rule_bool_fun$ Rule_stream$ )Rule_stream$ )
(assert (! (forall ((?v0 State$ )(?v1 Rule$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(not (enabled$ eff$ ?v1 ?v0 ))):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ )(?v2 Nat$ ))(! (= (fun_app$a (uu$ ?v0 ?v1 )?v2 )(enabled$ eff$ (shd$ (sdrop$ ?v2 ?v0 ))?v1 )):pattern ((fun_app$a (uu$ ?v0 ?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 State$ )(?v2 Rule$ ))(! (= (fun_app$ (uub$ ?v0 ?v1 )?v2 )(not (enabled$ ?v0 ?v2 ?v1 ))):pattern ((fun_app$ (uub$ ?v0 ?v1 )?v2 )))):named a2 ))
(assert (! (not (= (trim$ eff$ rs$ s$ )(sdrop$ (minWait$ eff$ rs$ s$ )rs$ ))):named a3 ))
(assert (! (member$ s$ s$a ):named a4 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$b (fun_app$c (fun_app$d eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a5 ))
(assert (! (fun_app$e (fair$ rules$ )rs$ ):named a6 ))
(assert (! (forall ((?v0 Rule_rule_prod_rule_rule_prod_prod_stream$ )(?v1 Rule_rule_prod_rule_rule_prod_prod_stream$ )(?v2 Nat$ ))(=> (fun_app$f (fair$a ?v0 )?v1 )(fun_app$f (fair$a ?v0 )(sdrop$a ?v2 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Rule_rule_prod_rule_prod_stream$ )(?v1 Rule_rule_prod_rule_prod_stream$ )(?v2 Nat$ ))(=> (fun_app$g (fair$b ?v0 )?v1 )(fun_app$g (fair$b ?v0 )(sdrop$b ?v2 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Rule_rule_rule_prod_prod_stream$ )(?v1 Rule_rule_rule_prod_prod_stream$ )(?v2 Nat$ ))(=> (fun_app$h (fair$c ?v0 )?v1 )(fun_app$h (fair$c ?v0 )(sdrop$c ?v2 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 State_rule_prod_stream$ )(?v2 Nat$ ))(=> (fun_app$i (fair$d ?v0 )?v1 )(fun_app$i (fair$d ?v0 )(sdrop$d ?v2 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 State_stream$ )(?v2 Nat$ ))(=> (fun_app$j (fair$e ?v0 )?v1 )(fun_app$j (fair$e ?v0 )(sdrop$e ?v2 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Rule_rule_prod_stream$ )(?v1 Rule_rule_prod_stream$ )(?v2 Nat$ ))(=> (fun_app$k (fair$f ?v0 )?v1 )(fun_app$k (fair$f ?v0 )(sdrop$f ?v2 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ )(?v2 Nat$ ))(=> (fun_app$e (fair$ ?v0 )?v1 )(fun_app$e (fair$ ?v0 )(sdrop$ ?v2 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(=> (enabled$ eff$ ?v0 ?v1 )(fun_app$b (fun_app$c (fun_app$d eff$ ?v0 )?v1 )(pickEff$ eff$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Nat$ ))(=> (fun_app$e (fair$ rules$ )?v0 )(fun_app$e (fair$ rules$ )(sdrop$ ?v1 ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (minWait$ eff$ ?v0 ?v1 )(least$ (uu$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(= (sdrop$f ?v0 (szip$ ?v1 ?v2 ))(szip$ (sdrop$ ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ )(?v2 Rule_stream$ ))(= (sdrop$d ?v0 (szip$a ?v1 ?v2 ))(szip$a (sdrop$e ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 Rule_rule_prod_stream$ ))(= (sdrop$c ?v0 (szip$b ?v1 ?v2 ))(szip$b (sdrop$ ?v0 ?v1 )(sdrop$f ?v0 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_stream$ )(?v2 Rule_stream$ ))(= (sdrop$b ?v0 (szip$c ?v1 ?v2 ))(szip$c (sdrop$f ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_stream$ )(?v2 Rule_rule_prod_stream$ ))(= (sdrop$a ?v0 (szip$d ?v1 ?v2 ))(szip$d (sdrop$f ?v0 ?v1 )(sdrop$f ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 State_stream$ ))(= (sdrop$g ?v0 (szip$e ?v1 ?v2 ))(szip$e (sdrop$ ?v0 ?v1 )(sdrop$e ?v0 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ )(?v2 State_stream$ ))(= (sdrop$h ?v0 (szip$f ?v1 ?v2 ))(szip$f (sdrop$e ?v0 ?v1 )(sdrop$e ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_stream$ ))(= (sdrop$i ?v0 (szip$g ?v1 ?v2 ))(szip$g (sdrop$ ?v0 ?v1 )(sdrop$d ?v0 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_stream$ )(?v2 State_stream$ ))(= (sdrop$j ?v0 (szip$h ?v1 ?v2 ))(szip$h (sdrop$f ?v0 ?v1 )(sdrop$e ?v0 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_rule_prod_stream$ )(?v2 Rule_stream$ ))(= (sdrop$k ?v0 (szip$i ?v1 ?v2 ))(szip$i (sdrop$d ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_rule_fun_fun$ )(?v2 Rule_stream$ )(?v3 Rule_stream$ ))(= (sdrop$ ?v0 (smap2$ ?v1 ?v2 ?v3 ))(smap2$ ?v1 (sdrop$ ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_rule_prod_rule_fun_fun$ )(?v2 Rule_stream$ )(?v3 Rule_rule_prod_stream$ ))(= (sdrop$ ?v0 (smap2$a ?v1 ?v2 ?v3 ))(smap2$a ?v1 (sdrop$ ?v0 ?v2 )(sdrop$f ?v0 ?v3 )))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_rule_rule_fun_fun$ )(?v2 Rule_rule_prod_stream$ )(?v3 Rule_stream$ ))(= (sdrop$ ?v0 (smap2$b ?v1 ?v2 ?v3 ))(smap2$b ?v1 (sdrop$f ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_rule_rule_prod_fun_fun$ )(?v2 Rule_stream$ )(?v3 Rule_stream$ ))(= (sdrop$f ?v0 (smap2$c ?v1 ?v2 ?v3 ))(smap2$c ?v1 (sdrop$ ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_rule_rule_prod_rule_fun_fun$ )(?v2 Rule_rule_prod_stream$ )(?v3 Rule_rule_prod_stream$ ))(= (sdrop$ ?v0 (smap2$d ?v1 ?v2 ?v3 ))(smap2$d ?v1 (sdrop$f ?v0 ?v2 )(sdrop$f ?v0 ?v3 )))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_rule_prod_rule_rule_prod_fun_fun$ )(?v2 Rule_stream$ )(?v3 Rule_rule_prod_stream$ ))(= (sdrop$f ?v0 (smap2$e ?v1 ?v2 ?v3 ))(smap2$e ?v1 (sdrop$ ?v0 ?v2 )(sdrop$f ?v0 ?v3 )))):named a32 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_rule_rule_rule_prod_fun_fun$ )(?v2 Rule_rule_prod_stream$ )(?v3 Rule_stream$ ))(= (sdrop$f ?v0 (smap2$f ?v1 ?v2 ?v3 ))(smap2$f ?v1 (sdrop$f ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a33 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_rule_rule_prod_rule_rule_prod_fun_fun$ )(?v2 Rule_rule_prod_stream$ )(?v3 Rule_rule_prod_stream$ ))(= (sdrop$f ?v0 (smap2$g ?v1 ?v2 ?v3 ))(smap2$g ?v1 (sdrop$f ?v0 ?v2 )(sdrop$f ?v0 ?v3 )))):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_rule_rule_fun_fun$ )(?v2 State_stream$ )(?v3 Rule_stream$ ))(= (sdrop$ ?v0 (smap2$h ?v1 ?v2 ?v3 ))(smap2$h ?v1 (sdrop$e ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_state_rule_fun_fun$ )(?v2 State_stream$ )(?v3 State_stream$ ))(= (sdrop$ ?v0 (smap2$i ?v1 ?v2 ?v3 ))(smap2$i ?v1 (sdrop$e ?v0 ?v2 )(sdrop$e ?v0 ?v3 )))):named a36 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (trim$ eff$ ?v0 ?v1 )(sdrop_while$ (uua$ ?v1 )?v0 ))):named a37 ))
(assert (! (forall ((?v0 Rule_rule_prod_rule_rule_prod_prod_stream_bool_fun$ )(?v1 Nat$ )(?v2 Rule_rule_prod_rule_rule_prod_prod_stream$ ))(=> (fun_app$f (fun_app$l (ev_at$ ?v0 )?v1 )?v2 )(fun_app$f ?v0 (sdrop$a ?v1 ?v2 )))):named a38 ))
(assert (! (forall ((?v0 Rule_rule_prod_rule_prod_stream_bool_fun$ )(?v1 Nat$ )(?v2 Rule_rule_prod_rule_prod_stream$ ))(=> (fun_app$g (fun_app$m (ev_at$a ?v0 )?v1 )?v2 )(fun_app$g ?v0 (sdrop$b ?v1 ?v2 )))):named a39 ))
(assert (! (forall ((?v0 Rule_rule_rule_prod_prod_stream_bool_fun$ )(?v1 Nat$ )(?v2 Rule_rule_rule_prod_prod_stream$ ))(=> (fun_app$h (fun_app$n (ev_at$b ?v0 )?v1 )?v2 )(fun_app$h ?v0 (sdrop$c ?v1 ?v2 )))):named a40 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 Nat$ )(?v2 State_rule_prod_stream$ ))(=> (fun_app$i (fun_app$o (ev_at$c ?v0 )?v1 )?v2 )(fun_app$i ?v0 (sdrop$d ?v1 ?v2 )))):named a41 ))
(assert (! (forall ((?v0 State_stream_bool_fun$ )(?v1 Nat$ )(?v2 State_stream$ ))(=> (fun_app$j (fun_app$p (ev_at$d ?v0 )?v1 )?v2 )(fun_app$j ?v0 (sdrop$e ?v1 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 Rule_rule_prod_stream_bool_fun$ )(?v1 Nat$ )(?v2 Rule_rule_prod_stream$ ))(=> (fun_app$k (fun_app$q (ev_at$e ?v0 )?v1 )?v2 )(fun_app$k ?v0 (sdrop$f ?v1 ?v2 )))):named a43 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Nat$ )(?v2 Rule_stream$ ))(=> (fun_app$e (fun_app$r (ev_at$f ?v0 )?v1 )?v2 )(fun_app$e ?v0 (sdrop$ ?v1 ?v2 )))):named a44 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (root$ (mkTree$ eff$ ?v0 ?v1 ))(pair$d ?v1 (shd$ (trim$ eff$ ?v0 ?v1 ))))):named a45 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Rule_rule_prod_rule_rule_prod_prod_stream$ ))(= (sdrop$a ?v0 (sdrop$a ?v1 ?v2 ))(sdrop$a (plus$ ?v1 ?v0 )?v2 ))):named a46 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Rule_rule_prod_rule_prod_stream$ ))(= (sdrop$b ?v0 (sdrop$b ?v1 ?v2 ))(sdrop$b (plus$ ?v1 ?v0 )?v2 ))):named a47 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Rule_rule_rule_prod_prod_stream$ ))(= (sdrop$c ?v0 (sdrop$c ?v1 ?v2 ))(sdrop$c (plus$ ?v1 ?v0 )?v2 ))):named a48 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 State_rule_prod_stream$ ))(= (sdrop$d ?v0 (sdrop$d ?v1 ?v2 ))(sdrop$d (plus$ ?v1 ?v0 )?v2 ))):named a49 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 State_stream$ ))(= (sdrop$e ?v0 (sdrop$e ?v1 ?v2 ))(sdrop$e (plus$ ?v1 ?v0 )?v2 ))):named a50 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Rule_rule_prod_stream$ ))(= (sdrop$f ?v0 (sdrop$f ?v1 ?v2 ))(sdrop$f (plus$ ?v1 ?v0 )?v2 ))):named a51 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Rule_stream$ ))(= (sdrop$ ?v0 (sdrop$ ?v1 ?v2 ))(sdrop$ (plus$ ?v1 ?v0 )?v2 ))):named a52 ))
(assert (! (fun_app$e (fair$ rules$ )(fenum$ rules$ )):named a53 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule_stream$ )(?v2 State$ ))(= (trim$ ?v0 ?v1 ?v2 )(sdrop_while$ (uub$ ?v0 ?v2 )?v1 ))):named a54 ))
(assert (! (forall ((?v0 Rule_rule_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(= (shd$ (smap2$ ?v0 ?v1 ?v2 ))(fun_app$s (fun_app$t ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a55 ))
(assert (! (forall ((?v0 Rule_state_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ ))(= (shd$ (smap2$j ?v0 ?v1 ?v2 ))(fun_app$u (fun_app$v ?v0 (shd$ ?v1 ))(shd$e ?v2 )))):named a56 ))
(assert (! (forall ((?v0 State_rule_rule_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ ))(= (shd$ (smap2$h ?v0 ?v1 ?v2 ))(fun_app$s (fun_app$w ?v0 (shd$e ?v1 ))(shd$ ?v2 )))):named a57 ))
(assert (! (forall ((?v0 State_state_rule_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ ))(= (shd$ (smap2$i ?v0 ?v1 ?v2 ))(fun_app$u (fun_app$x ?v0 (shd$e ?v1 ))(shd$e ?v2 )))):named a58 ))
(assert (! (forall ((?v0 Rule_rule_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(= (shd$e (smap2$k ?v0 ?v1 ?v2 ))(fun_app$y (fun_app$z ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a59 ))
(assert (! (forall ((?v0 Rule_state_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ ))(= (shd$e (smap2$l ?v0 ?v1 ?v2 ))(fun_app$aa (fun_app$ab ?v0 (shd$ ?v1 ))(shd$e ?v2 )))):named a60 ))
(assert (! (forall ((?v0 State_rule_state_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ ))(= (shd$e (smap2$m ?v0 ?v1 ?v2 ))(fun_app$y (fun_app$ac ?v0 (shd$e ?v1 ))(shd$ ?v2 )))):named a61 ))
(assert (! (forall ((?v0 State_state_state_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ ))(= (shd$e (smap2$n ?v0 ?v1 ?v2 ))(fun_app$aa (fun_app$ad ?v0 (shd$e ?v1 ))(shd$e ?v2 )))):named a62 ))
(assert (! (forall ((?v0 Rule_rule_rule_prod_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_rule_prod_stream$ ))(= (shd$ (smap2$a ?v0 ?v1 ?v2 ))(fun_app$ae (fun_app$af ?v0 (shd$ ?v1 ))(shd$f ?v2 )))):named a63 ))
(assert (! (forall ((?v0 Rule_state_rule_prod_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_stream$ ))(= (shd$ (smap2$o ?v0 ?v1 ?v2 ))(fun_app$ag (fun_app$ah ?v0 (shd$ ?v1 ))(shd$d ?v2 )))):named a64 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 Rule_stream$ ))(= (shd$d (szip$a ?v0 ?v1 ))(pair$d (shd$e ?v0 )(shd$ ?v1 )))):named a65 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ ))(= (shd$f (szip$ ?v0 ?v1 ))(pair$ (shd$ ?v0 )(shd$ ?v1 )))):named a66 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State_stream$ ))(= (shd$g (szip$e ?v0 ?v1 ))(pair$e (shd$ ?v0 )(shd$e ?v1 )))):named a67 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 State_stream$ ))(= (shd$h (szip$f ?v0 ?v1 ))(pair$f (shd$e ?v0 )(shd$e ?v1 )))):named a68 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_rule_prod_stream$ ))(= (shd$c (szip$b ?v0 ?v1 ))(pair$c (shd$ ?v0 )(shd$f ?v1 )))):named a69 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State_rule_prod_stream$ ))(= (shd$i (szip$g ?v0 ?v1 ))(pair$g (shd$ ?v0 )(shd$d ?v1 )))):named a70 ))
(assert (! (forall ((?v0 Rule_rule_prod_stream$ )(?v1 Rule_stream$ ))(= (shd$b (szip$c ?v0 ?v1 ))(pair$b (shd$f ?v0 )(shd$ ?v1 )))):named a71 ))
(assert (! (forall ((?v0 Rule_rule_prod_stream$ )(?v1 State_stream$ ))(= (shd$j (szip$h ?v0 ?v1 ))(pair$h (shd$f ?v0 )(shd$e ?v1 )))):named a72 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 Rule_stream$ ))(= (shd$k (szip$i ?v0 ?v1 ))(pair$i (shd$d ?v0 )(shd$ ?v1 )))):named a73 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 State_stream$ ))(= (shd$l (szip$j ?v0 ?v1 ))(pair$j (shd$d ?v0 )(shd$e ?v1 )))):named a74 ))
(check-sat )
;(get-unsat-core )
