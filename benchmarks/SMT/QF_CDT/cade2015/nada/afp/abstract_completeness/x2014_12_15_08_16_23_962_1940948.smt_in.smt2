;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort Rule_tree$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_tree$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Rule_rule_prod_set$ 0 )
(declare-sort Rule_rule_prod_tree$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort Rule_stream_bool_fun$ 0 )
(declare-sort State_stream_bool_fun$ 0 )
(declare-sort Rule_rule_rule_fun_fun$ 0 )
(declare-sort Rule_state_rule_fun_fun$ 0 )
(declare-sort State_rule_rule_fun_fun$ 0 )
(declare-sort Nat_rule_stream_bool_fun_fun$ 0 )
(declare-sort Nat_state_stream_bool_fun_fun$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_rule_prod_stream_bool_fun$ 0 )
(declare-sort Rule_rule_prod_rule_rule_fun_fun$ 0 )
(declare-sort Rule_rule_rule_prod_rule_fun_fun$ 0 )
(declare-sort Rule_rule_rule_rule_prod_fun_fun$ 0 )
(declare-sort Nat_rule_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_rule_prod_rule_prod_stream_bool_fun$ 0 )
(declare-sort Rule_rule_rule_prod_prod_stream_bool_fun$ 0 )
(declare-sort Rule_rule_prod_rule_rule_prod_rule_fun_fun$ 0 )
(declare-sort Rule_rule_prod_rule_rule_rule_prod_fun_fun$ 0 )
(declare-sort Rule_rule_rule_prod_rule_rule_prod_fun_fun$ 0 )
(declare-sort Nat_rule_rule_prod_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort Nat_rule_rule_rule_prod_prod_stream_bool_fun_fun$ 0 )
(declare-sort Rule_rule_prod_rule_rule_prod_prod_stream_bool_fun$ 0 )
(declare-sort Rule_rule_prod_rule_rule_prod_rule_rule_prod_fun_fun$ 0 )
(declare-sort Nat_rule_rule_prod_rule_rule_prod_prod_stream_bool_fun_fun$ 0 )
(declare-sort Rule_stream$ 0)
(declare-sort State_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-fun shd$a (State_stream$)State$)
(declare-fun stl$a (State_stream$)State_stream$)
(declare-fun sCons$a (State$ State_stream$ )State_stream$)
(declare-sort Rule_rule_prod$ 0)
(declare-sort Rule_rule_prod_rule_rule_prod_prod$ 0)
(declare-fun fst$ (Rule_rule_prod$)Rule$)
(declare-fun snd$ (Rule_rule_prod$)Rule$)
(declare-fun pair$ (Rule$ Rule$ )Rule_rule_prod$)
(declare-fun fst$a (Rule_rule_prod_rule_rule_prod_prod$)Rule_rule_prod$)
(declare-fun snd$a (Rule_rule_prod_rule_rule_prod_prod$)Rule_rule_prod$)
(declare-fun pair$a (Rule_rule_prod$ Rule_rule_prod$ )Rule_rule_prod_rule_rule_prod_prod$)
(declare-sort Rule_rule_prod_rule_rule_prod_prod_stream$ 0)
(declare-fun shd$b (Rule_rule_prod_rule_rule_prod_prod_stream$)Rule_rule_prod_rule_rule_prod_prod$)
(declare-fun stl$b (Rule_rule_prod_rule_rule_prod_prod_stream$)Rule_rule_prod_rule_rule_prod_prod_stream$)
(declare-fun sCons$b (Rule_rule_prod_rule_rule_prod_prod$ Rule_rule_prod_rule_rule_prod_prod_stream$ )Rule_rule_prod_rule_rule_prod_prod_stream$)
(declare-sort Rule_rule_prod_rule_prod$ 0)
(declare-fun fst$b (Rule_rule_prod_rule_prod$)Rule_rule_prod$)
(declare-fun snd$b (Rule_rule_prod_rule_prod$)Rule$)
(declare-fun pair$b (Rule_rule_prod$ Rule$ )Rule_rule_prod_rule_prod$)
(declare-sort Rule_rule_prod_rule_prod_stream$ 0)
(declare-fun shd$c (Rule_rule_prod_rule_prod_stream$)Rule_rule_prod_rule_prod$)
(declare-fun stl$c (Rule_rule_prod_rule_prod_stream$)Rule_rule_prod_rule_prod_stream$)
(declare-fun sCons$c (Rule_rule_prod_rule_prod$ Rule_rule_prod_rule_prod_stream$ )Rule_rule_prod_rule_prod_stream$)
(declare-sort Rule_rule_rule_prod_prod$ 0)
(declare-fun fst$c (Rule_rule_rule_prod_prod$)Rule$)
(declare-fun snd$c (Rule_rule_rule_prod_prod$)Rule_rule_prod$)
(declare-fun pair$c (Rule$ Rule_rule_prod$ )Rule_rule_rule_prod_prod$)
(declare-sort Rule_rule_rule_prod_prod_stream$ 0)
(declare-sort Rule_rule_prod_stream$ 0)
(declare-fun shd$d (Rule_rule_rule_prod_prod_stream$)Rule_rule_rule_prod_prod$)
(declare-fun stl$d (Rule_rule_rule_prod_prod_stream$)Rule_rule_rule_prod_prod_stream$)
(declare-fun sCons$d (Rule_rule_rule_prod_prod$ Rule_rule_rule_prod_prod_stream$ )Rule_rule_rule_prod_prod_stream$)
(declare-fun shd$e (Rule_rule_prod_stream$)Rule_rule_prod$)
(declare-fun stl$e (Rule_rule_prod_stream$)Rule_rule_prod_stream$)
(declare-fun sCons$e (Rule_rule_prod$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$)
(declare-sort Rule_state_prod$ 0)
(declare-fun fst$d (Rule_state_prod$)Rule$)
(declare-fun snd$d (Rule_state_prod$)State$)
(declare-fun pair$d (Rule$ State$ )Rule_state_prod$)
(declare-sort Rule_state_prod_stream$ 0)
(declare-fun shd$f (Rule_state_prod_stream$)Rule_state_prod$)
(declare-fun stl$f (Rule_state_prod_stream$)Rule_state_prod_stream$)
(declare-fun sCons$f (Rule_state_prod$ Rule_state_prod_stream$ )Rule_state_prod_stream$)
(declare-sort State_rule_prod$ 0)
(declare-fun fst$e (State_rule_prod$)State$)
(declare-fun snd$e (State_rule_prod$)Rule$)
(declare-fun pair$e (State$ Rule$ )State_rule_prod$)
(declare-sort State_rule_prod_stream$ 0)
(declare-fun shd$g (State_rule_prod_stream$)State_rule_prod$)
(declare-fun stl$g (State_rule_prod_stream$)State_rule_prod_stream$)
(declare-fun sCons$g (State_rule_prod$ State_rule_prod_stream$ )State_rule_prod_stream$)
(declare-sort State_state_prod$ 0)
(declare-fun fst$f (State_state_prod$)State$)
(declare-fun snd$f (State_state_prod$)State$)
(declare-fun pair$f (State$ State$ )State_state_prod$)
(declare-sort State_state_prod_stream$ 0)
(declare-fun shd$h (State_state_prod_stream$)State_state_prod$)
(declare-fun stl$h (State_state_prod_stream$)State_state_prod_stream$)
(declare-fun sCons$h (State_state_prod$ State_state_prod_stream$ )State_state_prod_stream$)
(declare-sort Rule_rule_prod_state_prod$ 0)
(declare-fun fst$g (Rule_rule_prod_state_prod$)Rule_rule_prod$)
(declare-fun snd$g (Rule_rule_prod_state_prod$)State$)
(declare-fun pair$g (Rule_rule_prod$ State$ )Rule_rule_prod_state_prod$)
(declare-sort Rule_rule_prod_state_prod_stream$ 0)
(declare-fun shd$i (Rule_rule_prod_state_prod_stream$)Rule_rule_prod_state_prod$)
(declare-fun stl$i (Rule_rule_prod_state_prod_stream$)Rule_rule_prod_state_prod_stream$)
(declare-fun sCons$i (Rule_rule_prod_state_prod$ Rule_rule_prod_state_prod_stream$ )Rule_rule_prod_state_prod_stream$)
(declare-sort State_rule_rule_prod_prod$ 0)
(declare-fun fst$h (State_rule_rule_prod_prod$)State$)
(declare-fun snd$h (State_rule_rule_prod_prod$)Rule_rule_prod$)
(declare-fun pair$h (State$ Rule_rule_prod$ )State_rule_rule_prod_prod$)
(declare-sort State_rule_rule_prod_prod_stream$ 0)
(declare-fun shd$j (State_rule_rule_prod_prod_stream$)State_rule_rule_prod_prod$)
(declare-fun stl$j (State_rule_rule_prod_prod_stream$)State_rule_rule_prod_prod_stream$)
(declare-fun sCons$j (State_rule_rule_prod_prod$ State_rule_rule_prod_prod_stream$ )State_rule_rule_prod_prod_stream$)
(declare-sort Rule_rule_rule_prod_rule_prod_prod$ 0)
(declare-fun fst$i (Rule_rule_rule_prod_rule_prod_prod$)Rule$)
(declare-fun snd$i (Rule_rule_rule_prod_rule_prod_prod$)Rule_rule_prod_rule_prod$)
(declare-fun pair$i (Rule$ Rule_rule_prod_rule_prod$ )Rule_rule_rule_prod_rule_prod_prod$)
(declare-sort Rule_rule_rule_prod_rule_prod_prod_stream$ 0)
(declare-fun shd$k (Rule_rule_rule_prod_rule_prod_prod_stream$)Rule_rule_rule_prod_rule_prod_prod$)
(declare-fun stl$k (Rule_rule_rule_prod_rule_prod_prod_stream$)Rule_rule_rule_prod_rule_prod_prod_stream$)
(declare-fun sCons$k (Rule_rule_rule_prod_rule_prod_prod$ Rule_rule_rule_prod_rule_prod_prod_stream$ )Rule_rule_rule_prod_rule_prod_prod_stream$)
(declare-fun r$ ()Rule$ )
(declare-fun s$ ()State$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State_set$ )
(declare-fun uu$ (Rule_stream$ State$ )Nat_bool_fun$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun fair$ (Rule_stream$ )Rule_stream_bool_fun$ )
(declare-fun root$ (Rule_rule_prod_tree$ )Rule_rule_prod$ )
(declare-fun snth$ (Rule_rule_prod_rule_rule_prod_prod_stream$ Nat$ )Rule_rule_prod_rule_rule_prod_prod$ )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun szip$ (Rule_stream$ Rule_stream$ )Rule_rule_prod_stream$ )
(declare-fun ev_at$ (State_stream_bool_fun$ )Nat_state_stream_bool_fun_fun$ )
(declare-fun fair$a (State_stream$ )State_stream_bool_fun$ )
(declare-fun fair$b (Rule_rule_prod_rule_rule_prod_prod_stream$ )Rule_rule_prod_rule_rule_prod_prod_stream_bool_fun$ )
(declare-fun fair$c (Rule_rule_prod_rule_prod_stream$ )Rule_rule_prod_rule_prod_stream_bool_fun$ )
(declare-fun fair$d (Rule_rule_rule_prod_prod_stream$ )Rule_rule_rule_prod_prod_stream_bool_fun$ )
(declare-fun fair$e (Rule_rule_prod_stream$ )Rule_rule_prod_stream_bool_fun$ )
(declare-fun konig$ (Rule_rule_prod_tree$ )Rule_rule_prod_stream$ )
(declare-fun least$ (Nat_bool_fun$ )Nat$ )
(declare-fun root$a (State_tree$ )State$ )
(declare-fun root$b (Rule_tree$ )Rule$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun sdrop$ (Nat$ Rule_stream$ )Rule_stream$ )
(declare-fun smap2$ (Rule_rule_rule_fun_fun$ Rule_stream$ Rule_stream$ )Rule_stream$ )
(declare-fun snth$a (Rule_rule_prod_rule_prod_stream$ Nat$ )Rule_rule_prod_rule_prod$ )
(declare-fun snth$b (Rule_rule_rule_prod_prod_stream$ Nat$ )Rule_rule_rule_prod_prod$ )
(declare-fun snth$c (Rule_rule_prod_stream$ Nat$ )Rule_rule_prod$ )
(declare-fun snth$d (State_stream$ Nat$ )State$ )
(declare-fun snth$e (Rule_stream$ Nat$ )Rule$ )
(declare-fun sset$a (Rule_rule_prod_stream$ )Rule_rule_prod_set$ )
(declare-fun sset$b (State_stream$ )State_set$ )
(declare-fun szip$a (Rule_stream$ Rule_rule_prod_stream$ )Rule_rule_rule_prod_prod_stream$ )
(declare-fun szip$b (Rule_rule_prod_stream$ Rule_stream$ )Rule_rule_prod_rule_prod_stream$ )
(declare-fun szip$c (Rule_rule_prod_stream$ Rule_rule_prod_stream$ )Rule_rule_prod_rule_rule_prod_prod_stream$ )
(declare-fun szip$d (Rule_stream$ State_stream$ )Rule_state_prod_stream$ )
(declare-fun szip$e (State_stream$ Rule_stream$ )State_rule_prod_stream$ )
(declare-fun szip$f (State_stream$ State_stream$ )State_state_prod_stream$ )
(declare-fun szip$g (Rule_rule_prod_stream$ State_stream$ )Rule_rule_prod_state_prod_stream$ )
(declare-fun szip$h (State_stream$ Rule_rule_prod_stream$ )State_rule_rule_prod_prod_stream$ )
(declare-fun szip$i (Rule_stream$ Rule_rule_prod_rule_prod_stream$ )Rule_rule_rule_prod_rule_prod_prod_stream$ )
(declare-fun ev_at$a (Rule_rule_prod_rule_rule_prod_prod_stream_bool_fun$ )Nat_rule_rule_prod_rule_rule_prod_prod_stream_bool_fun_fun$ )
(declare-fun ev_at$b (Rule_rule_prod_rule_prod_stream_bool_fun$ )Nat_rule_rule_prod_rule_prod_stream_bool_fun_fun$ )
(declare-fun ev_at$c (Rule_rule_rule_prod_prod_stream_bool_fun$ )Nat_rule_rule_rule_prod_prod_stream_bool_fun_fun$ )
(declare-fun ev_at$d (Rule_rule_prod_stream_bool_fun$ )Nat_rule_rule_prod_stream_bool_fun_fun$ )
(declare-fun ev_at$e (Rule_stream_bool_fun$ )Nat_rule_stream_bool_fun_fun$ )
(declare-fun konig$a (State_tree$ )State_stream$ )
(declare-fun konig$b (Rule_tree$ )Rule_stream$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun sdrop$a (Nat$ State_stream$ )State_stream$ )
(declare-fun sdrop$b (Nat$ Rule_rule_prod_rule_rule_prod_prod_stream$ )Rule_rule_prod_rule_rule_prod_prod_stream$ )
(declare-fun sdrop$c (Nat$ Rule_rule_prod_rule_prod_stream$ )Rule_rule_prod_rule_prod_stream$ )
(declare-fun sdrop$d (Nat$ Rule_rule_rule_prod_prod_stream$ )Rule_rule_rule_prod_prod_stream$ )
(declare-fun sdrop$e (Nat$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$ )
(declare-fun sdrop$f (Nat$ Rule_state_prod_stream$ )Rule_state_prod_stream$ )
(declare-fun sdrop$g (Nat$ State_rule_prod_stream$ )State_rule_prod_stream$ )
(declare-fun sdrop$h (Nat$ State_state_prod_stream$ )State_state_prod_stream$ )
(declare-fun sdrop$i (Nat$ Rule_rule_prod_state_prod_stream$ )Rule_rule_prod_state_prod_stream$ )
(declare-fun sdrop$j (Nat$ State_rule_rule_prod_prod_stream$ )State_rule_rule_prod_prod_stream$ )
(declare-fun sdrop$k (Nat$ Rule_rule_rule_prod_rule_prod_prod_stream$ )Rule_rule_rule_prod_rule_prod_prod_stream$ )
(declare-fun smap2$a (Rule_rule_rule_prod_rule_fun_fun$ Rule_stream$ Rule_rule_prod_stream$ )Rule_stream$ )
(declare-fun smap2$b (Rule_rule_prod_rule_rule_fun_fun$ Rule_rule_prod_stream$ Rule_stream$ )Rule_stream$ )
(declare-fun smap2$c (Rule_rule_rule_rule_prod_fun_fun$ Rule_stream$ Rule_stream$ )Rule_rule_prod_stream$ )
(declare-fun smap2$d (Rule_rule_prod_rule_rule_prod_rule_fun_fun$ Rule_rule_prod_stream$ Rule_rule_prod_stream$ )Rule_stream$ )
(declare-fun smap2$e (Rule_rule_rule_prod_rule_rule_prod_fun_fun$ Rule_stream$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$ )
(declare-fun smap2$f (Rule_rule_prod_rule_rule_rule_prod_fun_fun$ Rule_rule_prod_stream$ Rule_stream$ )Rule_rule_prod_stream$ )
(declare-fun smap2$g (Rule_rule_prod_rule_rule_prod_rule_rule_prod_fun_fun$ Rule_rule_prod_stream$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$ )
(declare-fun smap2$h (Rule_state_rule_fun_fun$ Rule_stream$ State_stream$ )Rule_stream$ )
(declare-fun smap2$i (State_rule_rule_fun_fun$ State_stream$ Rule_stream$ )Rule_stream$ )
(declare-fun thesis$ ()Bool )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun member$a (Rule$ Rule_set$ )Bool )
(declare-fun member$b (Rule_rule_prod$ Rule_rule_prod_set$ )Bool )
(declare-fun minWait$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Nat$ )
(declare-fun fun_app$a (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$b (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$c (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun fun_app$d (Rule_stream_bool_fun$ Rule_stream$ )Bool )
(declare-fun fun_app$e (State_stream_bool_fun$ State_stream$ )Bool )
(declare-fun fun_app$f (Rule_rule_prod_rule_rule_prod_prod_stream_bool_fun$ Rule_rule_prod_rule_rule_prod_prod_stream$ )Bool )
(declare-fun fun_app$g (Rule_rule_prod_rule_prod_stream_bool_fun$ Rule_rule_prod_rule_prod_stream$ )Bool )
(declare-fun fun_app$h (Rule_rule_rule_prod_prod_stream_bool_fun$ Rule_rule_rule_prod_prod_stream$ )Bool )
(declare-fun fun_app$i (Rule_rule_prod_stream_bool_fun$ Rule_rule_prod_stream$ )Bool )
(declare-fun fun_app$j (Nat_state_stream_bool_fun_fun$ Nat$ )State_stream_bool_fun$ )
(declare-fun fun_app$k (Nat_rule_rule_prod_rule_rule_prod_prod_stream_bool_fun_fun$ Nat$ )Rule_rule_prod_rule_rule_prod_prod_stream_bool_fun$ )
(declare-fun fun_app$l (Nat_rule_rule_prod_rule_prod_stream_bool_fun_fun$ Nat$ )Rule_rule_prod_rule_prod_stream_bool_fun$ )
(declare-fun fun_app$m (Nat_rule_rule_rule_prod_prod_stream_bool_fun_fun$ Nat$ )Rule_rule_rule_prod_prod_stream_bool_fun$ )
(declare-fun fun_app$n (Nat_rule_rule_prod_stream_bool_fun_fun$ Nat$ )Rule_rule_prod_stream_bool_fun$ )
(declare-fun fun_app$o (Nat_rule_stream_bool_fun_fun$ Nat$ )Rule_stream_bool_fun$ )
(declare-fun sinterleave$ (Rule_rule_prod_stream$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$ )
(declare-fun sinterleave$a (State_stream$ State_stream$ )State_stream$ )
(declare-fun sinterleave$b (Rule_stream$ Rule_stream$ )Rule_stream$ )
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ )(?v2 Nat$ ))(! (= (fun_app$ (uu$ ?v0 ?v1 )?v2 )(enabled$ eff$ (shd$ (sdrop$ ?v2 ?v0 ))?v1 )):pattern ((fun_app$ (uu$ ?v0 ?v1 )?v2 )))):named a0 ))
(assert (! (not thesis$ ):named a1 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= (shd$ (sdrop$ ?v0 rs$ ))r$ )thesis$ )):named a2 ))
(assert (! (member$ s$ s$a ):named a3 ))
(assert (! (member$a r$ (sset$ rules$ )):named a4 ))
(assert (! (enabled$ eff$ r$ s$ ):named a5 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$a (fun_app$b (fun_app$c eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a6 ))
(assert (! (fun_app$d (fair$ rules$ )rs$ ):named a7 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Nat$ ))(=> (fun_app$d (fair$ rules$ )?v0 )(fun_app$d (fair$ rules$ )(sdrop$ ?v1 ?v0 )))):named a8 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State$ ))(! (= (enabled$ ?v0 ?v1 ?v2 )(exists ((?v3 State_fset$ ))(fun_app$a (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )?v3 ))):pattern ((enabled$ ?v0 ?v1 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 State_stream$ )(?v2 Nat$ ))(=> (fun_app$e (fair$a ?v0 )?v1 )(fun_app$e (fair$a ?v0 )(sdrop$a ?v2 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Rule_rule_prod_rule_rule_prod_prod_stream$ )(?v1 Rule_rule_prod_rule_rule_prod_prod_stream$ )(?v2 Nat$ ))(=> (fun_app$f (fair$b ?v0 )?v1 )(fun_app$f (fair$b ?v0 )(sdrop$b ?v2 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Rule_rule_prod_rule_prod_stream$ )(?v1 Rule_rule_prod_rule_prod_stream$ )(?v2 Nat$ ))(=> (fun_app$g (fair$c ?v0 )?v1 )(fun_app$g (fair$c ?v0 )(sdrop$c ?v2 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Rule_rule_rule_prod_prod_stream$ )(?v1 Rule_rule_rule_prod_prod_stream$ )(?v2 Nat$ ))(=> (fun_app$h (fair$d ?v0 )?v1 )(fun_app$h (fair$d ?v0 )(sdrop$d ?v2 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Rule_rule_prod_stream$ )(?v1 Rule_rule_prod_stream$ )(?v2 Nat$ ))(=> (fun_app$i (fair$e ?v0 )?v1 )(fun_app$i (fair$e ?v0 )(sdrop$e ?v2 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ )(?v2 Nat$ ))(=> (fun_app$d (fair$ ?v0 )?v1 )(fun_app$d (fair$ ?v0 )(sdrop$ ?v2 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_rule_rule_prod_prod_stream$ ))(= (shd$b (sdrop$b ?v0 ?v1 ))(snth$ ?v1 ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_rule_prod_stream$ ))(= (shd$c (sdrop$c ?v0 ?v1 ))(snth$a ?v1 ?v0 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_rule_prod_prod_stream$ ))(= (shd$d (sdrop$d ?v0 ?v1 ))(snth$b ?v1 ?v0 ))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_stream$ ))(= (shd$e (sdrop$e ?v0 ?v1 ))(snth$c ?v1 ?v0 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ ))(= (shd$a (sdrop$a ?v0 ?v1 ))(snth$d ?v1 ?v0 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ ))(= (shd$ (sdrop$ ?v0 ?v1 ))(snth$e ?v1 ?v0 ))):named a21 ))
(assert (! (forall ((?v0 Rule_rule_prod_stream$ ))(member$b (shd$e ?v0 )(sset$a ?v0 ))):named a22 ))
(assert (! (forall ((?v0 State_stream$ ))(member$ (shd$a ?v0 )(sset$b ?v0 ))):named a23 ))
(assert (! (forall ((?v0 Rule_stream$ ))(member$a (shd$ ?v0 )(sset$ ?v0 ))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(= (sdrop$e ?v0 (szip$ ?v1 ?v2 ))(szip$ (sdrop$ ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 Rule_rule_prod_stream$ ))(= (sdrop$d ?v0 (szip$a ?v1 ?v2 ))(szip$a (sdrop$ ?v0 ?v1 )(sdrop$e ?v0 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_stream$ )(?v2 Rule_stream$ ))(= (sdrop$c ?v0 (szip$b ?v1 ?v2 ))(szip$b (sdrop$e ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_stream$ )(?v2 Rule_rule_prod_stream$ ))(= (sdrop$b ?v0 (szip$c ?v1 ?v2 ))(szip$c (sdrop$e ?v0 ?v1 )(sdrop$e ?v0 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 State_stream$ ))(= (sdrop$f ?v0 (szip$d ?v1 ?v2 ))(szip$d (sdrop$ ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ )(?v2 Rule_stream$ ))(= (sdrop$g ?v0 (szip$e ?v1 ?v2 ))(szip$e (sdrop$a ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ )(?v2 State_stream$ ))(= (sdrop$h ?v0 (szip$f ?v1 ?v2 ))(szip$f (sdrop$a ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_stream$ )(?v2 State_stream$ ))(= (sdrop$i ?v0 (szip$g ?v1 ?v2 ))(szip$g (sdrop$e ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ )(?v2 Rule_rule_prod_stream$ ))(= (sdrop$j ?v0 (szip$h ?v1 ?v2 ))(szip$h (sdrop$a ?v0 ?v1 )(sdrop$e ?v0 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 Rule_rule_prod_rule_prod_stream$ ))(= (sdrop$k ?v0 (szip$i ?v1 ?v2 ))(szip$i (sdrop$ ?v0 ?v1 )(sdrop$c ?v0 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_rule_fun_fun$ )(?v2 Rule_stream$ )(?v3 Rule_stream$ ))(= (sdrop$ ?v0 (smap2$ ?v1 ?v2 ?v3 ))(smap2$ ?v1 (sdrop$ ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_rule_prod_rule_fun_fun$ )(?v2 Rule_stream$ )(?v3 Rule_rule_prod_stream$ ))(= (sdrop$ ?v0 (smap2$a ?v1 ?v2 ?v3 ))(smap2$a ?v1 (sdrop$ ?v0 ?v2 )(sdrop$e ?v0 ?v3 )))):named a36 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_rule_rule_fun_fun$ )(?v2 Rule_rule_prod_stream$ )(?v3 Rule_stream$ ))(= (sdrop$ ?v0 (smap2$b ?v1 ?v2 ?v3 ))(smap2$b ?v1 (sdrop$e ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a37 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_rule_rule_prod_fun_fun$ )(?v2 Rule_stream$ )(?v3 Rule_stream$ ))(= (sdrop$e ?v0 (smap2$c ?v1 ?v2 ?v3 ))(smap2$c ?v1 (sdrop$ ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a38 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_rule_rule_prod_rule_fun_fun$ )(?v2 Rule_rule_prod_stream$ )(?v3 Rule_rule_prod_stream$ ))(= (sdrop$ ?v0 (smap2$d ?v1 ?v2 ?v3 ))(smap2$d ?v1 (sdrop$e ?v0 ?v2 )(sdrop$e ?v0 ?v3 )))):named a39 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_rule_prod_rule_rule_prod_fun_fun$ )(?v2 Rule_stream$ )(?v3 Rule_rule_prod_stream$ ))(= (sdrop$e ?v0 (smap2$e ?v1 ?v2 ?v3 ))(smap2$e ?v1 (sdrop$ ?v0 ?v2 )(sdrop$e ?v0 ?v3 )))):named a40 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_rule_rule_rule_prod_fun_fun$ )(?v2 Rule_rule_prod_stream$ )(?v3 Rule_stream$ ))(= (sdrop$e ?v0 (smap2$f ?v1 ?v2 ?v3 ))(smap2$f ?v1 (sdrop$e ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a41 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_rule_prod_rule_rule_prod_rule_rule_prod_fun_fun$ )(?v2 Rule_rule_prod_stream$ )(?v3 Rule_rule_prod_stream$ ))(= (sdrop$e ?v0 (smap2$g ?v1 ?v2 ?v3 ))(smap2$g ?v1 (sdrop$e ?v0 ?v2 )(sdrop$e ?v0 ?v3 )))):named a42 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_state_rule_fun_fun$ )(?v2 Rule_stream$ )(?v3 State_stream$ ))(= (sdrop$ ?v0 (smap2$h ?v1 ?v2 ?v3 ))(smap2$h ?v1 (sdrop$ ?v0 ?v2 )(sdrop$a ?v0 ?v3 )))):named a43 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_rule_rule_fun_fun$ )(?v2 State_stream$ )(?v3 Rule_stream$ ))(= (sdrop$ ?v0 (smap2$i ?v1 ?v2 ?v3 ))(smap2$i ?v1 (sdrop$a ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a44 ))
(assert (! (forall ((?v0 Rule_rule_prod_stream$ )(?v1 Rule_rule_prod_stream$ ))(= (shd$e (sinterleave$ ?v0 ?v1 ))(shd$e ?v0 ))):named a45 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 State_stream$ ))(= (shd$a (sinterleave$a ?v0 ?v1 ))(shd$a ?v0 ))):named a46 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ ))(= (shd$ (sinterleave$b ?v0 ?v1 ))(shd$ ?v0 ))):named a47 ))
(assert (! (forall ((?v0 State_stream_bool_fun$ )(?v1 Nat$ )(?v2 State_stream$ ))(=> (fun_app$e (fun_app$j (ev_at$ ?v0 )?v1 )?v2 )(fun_app$e ?v0 (sdrop$a ?v1 ?v2 )))):named a48 ))
(assert (! (forall ((?v0 Rule_rule_prod_rule_rule_prod_prod_stream_bool_fun$ )(?v1 Nat$ )(?v2 Rule_rule_prod_rule_rule_prod_prod_stream$ ))(=> (fun_app$f (fun_app$k (ev_at$a ?v0 )?v1 )?v2 )(fun_app$f ?v0 (sdrop$b ?v1 ?v2 )))):named a49 ))
(assert (! (forall ((?v0 Rule_rule_prod_rule_prod_stream_bool_fun$ )(?v1 Nat$ )(?v2 Rule_rule_prod_rule_prod_stream$ ))(=> (fun_app$g (fun_app$l (ev_at$b ?v0 )?v1 )?v2 )(fun_app$g ?v0 (sdrop$c ?v1 ?v2 )))):named a50 ))
(assert (! (forall ((?v0 Rule_rule_rule_prod_prod_stream_bool_fun$ )(?v1 Nat$ )(?v2 Rule_rule_rule_prod_prod_stream$ ))(=> (fun_app$h (fun_app$m (ev_at$c ?v0 )?v1 )?v2 )(fun_app$h ?v0 (sdrop$d ?v1 ?v2 )))):named a51 ))
(assert (! (forall ((?v0 Rule_rule_prod_stream_bool_fun$ )(?v1 Nat$ )(?v2 Rule_rule_prod_stream$ ))(=> (fun_app$i (fun_app$n (ev_at$d ?v0 )?v1 )?v2 )(fun_app$i ?v0 (sdrop$e ?v1 ?v2 )))):named a52 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Nat$ )(?v2 Rule_stream$ ))(=> (fun_app$d (fun_app$o (ev_at$e ?v0 )?v1 )?v2 )(fun_app$d ?v0 (sdrop$ ?v1 ?v2 )))):named a53 ))
(assert (! (forall ((?v0 Rule_rule_prod_tree$ ))(= (shd$e (konig$ ?v0 ))(root$ ?v0 ))):named a54 ))
(assert (! (forall ((?v0 State_tree$ ))(= (shd$a (konig$a ?v0 ))(root$a ?v0 ))):named a55 ))
(assert (! (forall ((?v0 Rule_tree$ ))(= (shd$ (konig$b ?v0 ))(root$b ?v0 ))):named a56 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (minWait$ eff$ ?v0 ?v1 )(least$ (uu$ ?v0 ?v1 )))):named a57 ))
(check-sat )
;(get-unsat-core )
