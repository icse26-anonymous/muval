;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-sort Rule_stream$ 0)
(declare-sort State_rule_prod_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-fun shd$a (State_rule_prod_stream$)State_rule_prod$)
(declare-fun stl$a (State_rule_prod_stream$)State_rule_prod_stream$)
(declare-fun sCons$a (State_rule_prod$ State_rule_prod_stream$ )State_rule_prod_stream$)
(declare-fun s$ ()State$ )
(declare-fun s$a ()State_set$ )
(declare-fun wf$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_tree$ )Bool )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun per$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_set$ Rule$ )Bool )
(declare-fun fair$ (Rule_stream$ Rule_stream$ )Bool )
(declare-fun root$ (State_rule_prod_tree$ )State_rule_prod$ )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun epath$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_stream$ )Bool )
(declare-fun fenum$ (Rule_stream$ )Rule_stream$ )
(declare-fun ipath$ (State_rule_prod_tree$ State_rule_prod_stream$ )Bool )
(declare-fun konig$ (State_rule_prod_tree$ )State_rule_prod_stream$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )State_rule_prod_tree$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun member$a (Rule$ Rule_set$ )Bool )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun tfinite$ (State_rule_prod_tree$ )Bool )
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun saturated$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_stream$ )Bool )
(declare-fun saturated$a (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State_rule_prod_stream$ )Bool )
(assert (! (not (or (exists ((?v0 State_rule_prod_tree$ ))(and (= (fst$ (root$ ?v0 ))s$ )(and (wf$ eff$ rules$ ?v0 )(tfinite$ ?v0 ))))(exists ((?v0 State_rule_prod_stream$ ))(and (= (fst$ (shd$a ?v0 ))s$ )(and (epath$ eff$ rules$ ?v0 )(saturated$ eff$ rules$ ?v0 )))))):named a0 ))
(assert (! (=> (not (exists ((?v0 State_rule_prod_tree$ ))(and (= (fst$ (root$ ?v0 ))s$ )(and (wf$ eff$ rules$ ?v0 )(tfinite$ ?v0 )))))(exists ((?v0 State_rule_prod_stream$ ))(and (= (fst$ (shd$a ?v0 ))s$ )(and (epath$ eff$ rules$ ?v0 )(saturated$ eff$ rules$ ?v0 ))))):named a1 ))
(assert (! (member$ s$ s$a ):named a2 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_stream$ ))(=> (and (wf$ eff$ rules$ ?v0 )(ipath$ ?v0 ?v1 ))(epath$ eff$ rules$ ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(= (saturated$ eff$ rules$ ?v0 )(forall ((?v1 Rule$ ))(=> (member$a ?v1 (sset$ rules$ ))(saturated$a eff$ ?v1 ?v0 ))))):named a5 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ ))(= (shd$a (konig$ ?v0 ))(root$ ?v0 ))):named a6 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_tree$ )(?v3 State_rule_prod_stream$ ))(=> (and (wf$ ?v0 ?v1 ?v2 )(ipath$ ?v2 ?v3 ))(epath$ ?v0 ?v1 ?v3 ))):named a7 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_stream$ ))(=> (tfinite$ ?v0 )(not (ipath$ ?v0 ?v1 )))):named a8 ))
(assert (! (fair$ rules$ (fenum$ rules$ )):named a9 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(=> (enabled$ eff$ ?v0 ?v1 )(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )(pickEff$ eff$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 State$ ))(=> (member$ ?v0 s$a )(exists ((?v1 Rule$ ))(and (member$a ?v1 (sset$ rules$ ))(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v1 )?v0 )?v2 )))))):named a11 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$ ?v0 s$a )(fair$ rules$ ?v1 ))(wf$ eff$ rules$ (mkTree$ eff$ ?v1 ?v0 )))):named a12 ))
(assert (! (= (sset$ (fenum$ rules$ ))(sset$ rules$ )):named a13 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_stream$ ))(=> (and (member$ ?v0 s$a )(and (fair$ rules$ ?v1 )(ipath$ (mkTree$ eff$ ?v1 ?v0 )?v2 )))(saturated$ eff$ rules$ ?v2 ))):named a14 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_stream$ )(?v3 Rule$ ))(=> (and (member$ ?v0 s$a )(and (fair$ rules$ ?v1 )(and (ipath$ (mkTree$ eff$ ?v1 ?v0 )?v2 )(member$a ?v3 (sset$ rules$ )))))(saturated$a eff$ ?v3 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 Rule$ ))(=> (member$a ?v0 (sset$ rules$ ))(per$ eff$ rules$ s$a ?v0 ))):named a16 ))
(check-sat )
;(get-unsat-core )
