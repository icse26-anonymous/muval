;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort Rule_bool_fun$ 0 )
(declare-sort Rule_rule_fun$ 0 )
(declare-sort Rule_state_fun$ 0 )
(declare-sort State_bool_fun$ 0 )
(declare-sort State_rule_fun$ 0 )
(declare-sort Rule_stream_set$ 0 )
(declare-sort State_state_fun$ 0 )
(declare-sort State_stream_set$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort Rule_rule_stream_fun$ 0 )
(declare-sort Rule_stream_bool_fun$ 0 )
(declare-sort Rule_stream_rule_fun$ 0 )
(declare-sort Rule_state_stream_fun$ 0 )
(declare-sort Rule_stream_state_fun$ 0 )
(declare-sort State_rule_stream_fun$ 0 )
(declare-sort State_stream_bool_fun$ 0 )
(declare-sort State_stream_rule_fun$ 0 )
(declare-sort Rule_rule_rule_fun_fun$ 0 )
(declare-sort Rule_stream_stream_set$ 0 )
(declare-sort State_state_stream_fun$ 0 )
(declare-sort State_stream_state_fun$ 0 )
(declare-sort Rule_rule_state_fun_fun$ 0 )
(declare-sort Rule_state_bool_fun_fun$ 0 )
(declare-sort Rule_state_rule_fun_fun$ 0 )
(declare-sort State_rule_rule_fun_fun$ 0 )
(declare-sort State_stream_stream_set$ 0 )
(declare-sort Rule_state_state_fun_fun$ 0 )
(declare-sort State_rule_state_fun_fun$ 0 )
(declare-sort State_state_rule_fun_fun$ 0 )
(declare-sort State_state_state_fun_fun$ 0 )
(declare-sort Rule_rule_rule_stream_fun_fun$ 0 )
(declare-sort Rule_rule_stream_rule_fun_fun$ 0 )
(declare-sort Rule_stream_stream_stream_set$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_rule_state_stream_fun_fun$ 0 )
(declare-sort Rule_state_stream_rule_fun_fun$ 0 )
(declare-sort State_stream_stream_stream_set$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_stream$ 0)
(declare-sort State_stream$ 0)
(declare-sort State_stream_stream$ 0)
(declare-sort Rule_stream_stream$ 0)
(declare-sort State_stream_stream_stream$ 0)
(declare-sort Rule_stream_stream_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-fun shd$a (State_stream$)State$)
(declare-fun stl$a (State_stream$)State_stream$)
(declare-fun sCons$a (State$ State_stream$ )State_stream$)
(declare-fun shd$b (State_stream_stream$)State_stream$)
(declare-fun stl$b (State_stream_stream$)State_stream_stream$)
(declare-fun sCons$b (State_stream$ State_stream_stream$ )State_stream_stream$)
(declare-fun shd$c (Rule_stream_stream$)Rule_stream$)
(declare-fun stl$c (Rule_stream_stream$)Rule_stream_stream$)
(declare-fun sCons$c (Rule_stream$ Rule_stream_stream$ )Rule_stream_stream$)
(declare-fun shd$d (State_stream_stream_stream$)State_stream_stream$)
(declare-fun stl$d (State_stream_stream_stream$)State_stream_stream_stream$)
(declare-fun sCons$d (State_stream_stream$ State_stream_stream_stream$ )State_stream_stream_stream$)
(declare-fun shd$e (Rule_stream_stream_stream$)Rule_stream_stream$)
(declare-fun stl$e (Rule_stream_stream_stream$)Rule_stream_stream_stream$)
(declare-fun sCons$e (Rule_stream_stream$ Rule_stream_stream_stream$ )Rule_stream_stream_stream$)
(declare-fun r$ ()Rule$ )
(declare-fun s$ ()State$ )
(declare-fun ev$ (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State_set$ )
(declare-fun sl$ ()State_fset$ )
(declare-fun uu$ ()Rule_bool_fun$ )
(declare-fun alw$ (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun fair$ (Rule_stream$ )Rule_stream_bool_fun$ )
(declare-fun smap$ (Rule_rule_fun$ Rule_stream$ )Rule_stream$ )
(declare-fun snth$ (Rule_stream$ Nat$ )Rule$ )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun holds$ (Rule_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun smap$a (State_rule_fun$ State_stream$ )Rule_stream$ )
(declare-fun smap$b (Rule_state_fun$ Rule_stream$ )State_stream$ )
(declare-fun smap$c (State_state_fun$ State_stream$ )State_stream$ )
(declare-fun smap$d (State_stream_rule_fun$ State_stream_stream$ )Rule_stream$ )
(declare-fun smap$e (Rule_stream_rule_fun$ Rule_stream_stream$ )Rule_stream$ )
(declare-fun smap$f (State_stream_state_fun$ State_stream_stream$ )State_stream$ )
(declare-fun smap$g (Rule_stream_state_fun$ Rule_stream_stream$ )State_stream$ )
(declare-fun smap$h (Rule_state_stream_fun$ Rule_stream$ )State_stream_stream$ )
(declare-fun smap$i (State_state_stream_fun$ State_stream$ )State_stream_stream$ )
(declare-fun smap$j (Rule_rule_stream_fun$ Rule_stream$ )Rule_stream_stream$ )
(declare-fun smap$k (State_rule_stream_fun$ State_stream$ )Rule_stream_stream$ )
(declare-fun smap2$ (Rule_rule_rule_fun_fun$ Rule_stream$ Rule_stream$ )Rule_stream$ )
(declare-fun snth$a (State_stream_stream$ Nat$ )State_stream$ )
(declare-fun snth$b (Rule_stream_stream$ Nat$ )Rule_stream$ )
(declare-fun snth$c (State_stream$ Nat$ )State$ )
(declare-fun snth$d (State_stream_stream_stream$ Nat$ )State_stream_stream$ )
(declare-fun snth$e (Rule_stream_stream_stream$ Nat$ )Rule_stream_stream$ )
(declare-fun sset$a (State_stream_stream_stream$ )State_stream_stream_set$ )
(declare-fun sset$b (Rule_stream_stream_stream$ )Rule_stream_stream_set$ )
(declare-fun sset$c (Rule_stream_stream$ )Rule_stream_set$ )
(declare-fun sset$d (State_stream_stream$ )State_stream_set$ )
(declare-fun sset$e (State_stream$ )State_set$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun smap2$a (Rule_state_rule_fun_fun$ Rule_stream$ State_stream$ )Rule_stream$ )
(declare-fun smap2$b (State_rule_rule_fun_fun$ State_stream$ Rule_stream$ )Rule_stream$ )
(declare-fun smap2$c (State_state_rule_fun_fun$ State_stream$ State_stream$ )Rule_stream$ )
(declare-fun smap2$d (Rule_rule_state_fun_fun$ Rule_stream$ Rule_stream$ )State_stream$ )
(declare-fun smap2$e (Rule_state_state_fun_fun$ Rule_stream$ State_stream$ )State_stream$ )
(declare-fun smap2$f (State_rule_state_fun_fun$ State_stream$ Rule_stream$ )State_stream$ )
(declare-fun smap2$g (State_state_state_fun_fun$ State_stream$ State_stream$ )State_stream$ )
(declare-fun smap2$h (Rule_state_stream_rule_fun_fun$ Rule_stream$ State_stream_stream$ )Rule_stream$ )
(declare-fun smap2$i (Rule_rule_stream_rule_fun_fun$ Rule_stream$ Rule_stream_stream$ )Rule_stream$ )
(declare-fun smap2$j (Rule_rule_state_stream_fun_fun$ Rule_stream$ Rule_stream$ )State_stream_stream$ )
(declare-fun smap2$k (Rule_rule_rule_stream_fun_fun$ Rule_stream$ Rule_stream$ )Rule_stream_stream$ )
(declare-fun thesis$ ()Bool )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_state_bool_fun_fun$ )
(declare-fun fun_app$ (Rule_bool_fun$ Rule$ )Bool )
(declare-fun member$a (Rule$ Rule_set$ )Bool )
(declare-fun member$b (State_stream_stream_stream$ State_stream_stream_stream_set$ )Bool )
(declare-fun member$c (State_stream_stream$ State_stream_stream_set$ )Bool )
(declare-fun member$d (Rule_stream_stream_stream$ Rule_stream_stream_stream_set$ )Bool )
(declare-fun member$e (Rule_stream_stream$ Rule_stream_stream_set$ )Bool )
(declare-fun member$f (Rule_stream$ Rule_stream_set$ )Bool )
(declare-fun member$g (State_stream$ State_stream_set$ )Bool )
(declare-fun streams$ (State_stream_stream_set$ )State_stream_stream_stream_set$ )
(declare-fun fun_app$a (Rule_stream_bool_fun$ Rule_stream$ )Bool )
(declare-fun fun_app$b (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$c (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$d (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun fun_app$e (State_stream_bool_fun$ State_stream$ )Bool )
(declare-fun fun_app$f (State_bool_fun$ State$ )Bool )
(declare-fun fun_app$g (Rule_rule_fun$ Rule$ )Rule$ )
(declare-fun fun_app$h (Rule_rule_rule_fun_fun$ Rule$ )Rule_rule_fun$ )
(declare-fun fun_app$i (State_rule_fun$ State$ )Rule$ )
(declare-fun fun_app$j (Rule_state_rule_fun_fun$ Rule$ )State_rule_fun$ )
(declare-fun fun_app$k (State_rule_rule_fun_fun$ State$ )Rule_rule_fun$ )
(declare-fun fun_app$l (State_state_rule_fun_fun$ State$ )State_rule_fun$ )
(declare-fun fun_app$m (Rule_state_fun$ Rule$ )State$ )
(declare-fun fun_app$n (Rule_rule_state_fun_fun$ Rule$ )Rule_state_fun$ )
(declare-fun fun_app$o (State_state_fun$ State$ )State$ )
(declare-fun fun_app$p (Rule_state_state_fun_fun$ Rule$ )State_state_fun$ )
(declare-fun fun_app$q (State_rule_state_fun_fun$ State$ )Rule_state_fun$ )
(declare-fun fun_app$r (State_state_state_fun_fun$ State$ )State_state_fun$ )
(declare-fun fun_app$s (State_stream_rule_fun$ State_stream$ )Rule$ )
(declare-fun fun_app$t (Rule_state_stream_rule_fun_fun$ Rule$ )State_stream_rule_fun$ )
(declare-fun fun_app$u (Rule_stream_rule_fun$ Rule_stream$ )Rule$ )
(declare-fun fun_app$v (Rule_rule_stream_rule_fun_fun$ Rule$ )Rule_stream_rule_fun$ )
(declare-fun fun_app$w (Rule_state_stream_fun$ Rule$ )State_stream$ )
(declare-fun fun_app$x (Rule_rule_state_stream_fun_fun$ Rule$ )Rule_state_stream_fun$ )
(declare-fun fun_app$y (Rule_rule_stream_fun$ Rule$ )Rule_stream$ )
(declare-fun fun_app$z (Rule_rule_rule_stream_fun_fun$ Rule$ )Rule_rule_stream_fun$ )
(declare-fun streams$a (Rule_stream_stream_set$ )Rule_stream_stream_stream_set$ )
(declare-fun streams$b (Rule_stream_set$ )Rule_stream_stream_set$ )
(declare-fun streams$c (State_stream_set$ )State_stream_stream_set$ )
(declare-fun streams$d (State_set$ )State_stream_set$ )
(declare-fun streams$e (Rule_set$ )Rule_stream_set$ )
(declare-fun fun_app$aa (State_stream_state_fun$ State_stream$ )State$ )
(declare-fun fun_app$ab (Rule_stream_state_fun$ Rule_stream$ )State$ )
(declare-fun fun_app$ac (State_state_stream_fun$ State$ )State_stream$ )
(declare-fun fun_app$ad (State_rule_stream_fun$ State$ )Rule_stream$ )
(declare-fun fun_app$ae (Rule_state_bool_fun_fun$ Rule$ )State_bool_fun$ )
(declare-fun stream_all$ (State_stream_bool_fun$ State_stream_stream$ )Bool )
(declare-fun stream_all$a (Rule_stream_bool_fun$ Rule_stream_stream$ )Bool )
(declare-fun stream_all$b (State_bool_fun$ )State_stream_bool_fun$ )
(declare-fun stream_all$c (Rule_bool_fun$ )Rule_stream_bool_fun$ )
(assert (! (forall ((?v0 Rule$ ))(! (= (fun_app$ uu$ ?v0 )(= r$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not thesis$ ):named a1 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= r$ (snth$ rs$ ?v0 ))thesis$ )):named a2 ))
(assert (! (member$ s$ s$a ):named a3 ))
(assert (! (fun_app$a (alw$ (ev$ (holds$ uu$ )))rs$ ):named a4 ))
(assert (! (fun_app$a (fair$ rules$ )rs$ ):named a5 ))
(assert (! (fun_app$b (fun_app$c (fun_app$d eff$ r$ )s$ )sl$ ):named a6 ))
(assert (! (member$a r$ (sset$ rules$ )):named a7 ))
(assert (! (forall ((?v0 State_stream_bool_fun$ )(?v1 State_stream_stream$ ))(= (stream_all$ ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$e ?v0 (snth$a ?v1 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_stream_stream$ ))(= (stream_all$a ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$a ?v0 (snth$b ?v1 ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 State_bool_fun$ )(?v1 State_stream$ ))(= (fun_app$e (stream_all$b ?v0 )?v1 )(forall ((?v2 Nat$ ))(fun_app$f ?v0 (snth$c ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 Rule_bool_fun$ )(?v1 Rule_stream$ ))(= (fun_app$a (stream_all$c ?v0 )?v1 )(forall ((?v2 Nat$ ))(fun_app$ ?v0 (snth$ ?v1 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 Rule_rule_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$ ?v0 ?v1 ?v2 )?v3 )(fun_app$g (fun_app$h ?v0 (snth$ ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 Rule_state_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$a ?v0 ?v1 ?v2 )?v3 )(fun_app$i (fun_app$j ?v0 (snth$ ?v1 ?v3 ))(snth$c ?v2 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 State_rule_rule_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$b ?v0 ?v1 ?v2 )?v3 )(fun_app$g (fun_app$k ?v0 (snth$c ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 State_state_rule_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$c ?v0 ?v1 ?v2 )?v3 )(fun_app$i (fun_app$l ?v0 (snth$c ?v1 ?v3 ))(snth$c ?v2 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 Rule_rule_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 Nat$ ))(= (snth$c (smap2$d ?v0 ?v1 ?v2 )?v3 )(fun_app$m (fun_app$n ?v0 (snth$ ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 Rule_state_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ )(?v3 Nat$ ))(= (snth$c (smap2$e ?v0 ?v1 ?v2 )?v3 )(fun_app$o (fun_app$p ?v0 (snth$ ?v1 ?v3 ))(snth$c ?v2 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 State_rule_state_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ )(?v3 Nat$ ))(= (snth$c (smap2$f ?v0 ?v1 ?v2 )?v3 )(fun_app$m (fun_app$q ?v0 (snth$c ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a18 ))
(assert (! (forall ((?v0 State_state_state_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ )(?v3 Nat$ ))(= (snth$c (smap2$g ?v0 ?v1 ?v2 )?v3 )(fun_app$o (fun_app$r ?v0 (snth$c ?v1 ?v3 ))(snth$c ?v2 ?v3 )))):named a19 ))
(assert (! (forall ((?v0 Rule_state_stream_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$h ?v0 ?v1 ?v2 )?v3 )(fun_app$s (fun_app$t ?v0 (snth$ ?v1 ?v3 ))(snth$a ?v2 ?v3 )))):named a20 ))
(assert (! (forall ((?v0 Rule_rule_stream_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$i ?v0 ?v1 ?v2 )?v3 )(fun_app$u (fun_app$v ?v0 (snth$ ?v1 ?v3 ))(snth$b ?v2 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 Rule_rule_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 Rule_stream$ ))(= (= (smap2$ ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$g (fun_app$h ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a22 ))
(assert (! (forall ((?v0 Rule_rule_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 State_stream$ ))(= (= (smap2$d ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$m (fun_app$n ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$c ?v3 ?v4 ))))):named a23 ))
(assert (! (forall ((?v0 Rule_state_rule_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ )(?v3 Rule_stream$ ))(= (= (smap2$a ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$i (fun_app$j ?v0 (snth$ ?v1 ?v4 ))(snth$c ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a24 ))
(assert (! (forall ((?v0 Rule_state_state_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ )(?v3 State_stream$ ))(= (= (smap2$e ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$o (fun_app$p ?v0 (snth$ ?v1 ?v4 ))(snth$c ?v2 ?v4 ))(snth$c ?v3 ?v4 ))))):named a25 ))
(assert (! (forall ((?v0 State_rule_rule_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ )(?v3 Rule_stream$ ))(= (= (smap2$b ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$g (fun_app$k ?v0 (snth$c ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a26 ))
(assert (! (forall ((?v0 State_rule_state_fun_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ )(?v3 State_stream$ ))(= (= (smap2$f ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$m (fun_app$q ?v0 (snth$c ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$c ?v3 ?v4 ))))):named a27 ))
(assert (! (forall ((?v0 State_state_rule_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ )(?v3 Rule_stream$ ))(= (= (smap2$c ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$i (fun_app$l ?v0 (snth$c ?v1 ?v4 ))(snth$c ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a28 ))
(assert (! (forall ((?v0 State_state_state_fun_fun$ )(?v1 State_stream$ )(?v2 State_stream$ )(?v3 State_stream$ ))(= (= (smap2$g ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$o (fun_app$r ?v0 (snth$c ?v1 ?v4 ))(snth$c ?v2 ?v4 ))(snth$c ?v3 ?v4 ))))):named a29 ))
(assert (! (forall ((?v0 Rule_rule_state_stream_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 State_stream_stream$ ))(= (= (smap2$j ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$w (fun_app$x ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$a ?v3 ?v4 ))))):named a30 ))
(assert (! (forall ((?v0 Rule_rule_rule_stream_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ )(?v3 Rule_stream_stream$ ))(= (= (smap2$k ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$y (fun_app$z ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$b ?v3 ?v4 ))))):named a31 ))
(assert (! (forall ((?v0 Rule_rule_fun$ )(?v1 Rule_stream$ )(?v2 Nat$ ))(= (snth$ (smap$ ?v0 ?v1 )?v2 )(fun_app$g ?v0 (snth$ ?v1 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 State_rule_fun$ )(?v1 State_stream$ )(?v2 Nat$ ))(= (snth$ (smap$a ?v0 ?v1 )?v2 )(fun_app$i ?v0 (snth$c ?v1 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 Rule_state_fun$ )(?v1 Rule_stream$ )(?v2 Nat$ ))(= (snth$c (smap$b ?v0 ?v1 )?v2 )(fun_app$m ?v0 (snth$ ?v1 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_stream$ )(?v2 Nat$ ))(= (snth$c (smap$c ?v0 ?v1 )?v2 )(fun_app$o ?v0 (snth$c ?v1 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 State_stream_rule_fun$ )(?v1 State_stream_stream$ )(?v2 Nat$ ))(= (snth$ (smap$d ?v0 ?v1 )?v2 )(fun_app$s ?v0 (snth$a ?v1 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 Rule_stream_rule_fun$ )(?v1 Rule_stream_stream$ )(?v2 Nat$ ))(= (snth$ (smap$e ?v0 ?v1 )?v2 )(fun_app$u ?v0 (snth$b ?v1 ?v2 )))):named a37 ))
(assert (! (forall ((?v0 State_stream_state_fun$ )(?v1 State_stream_stream$ )(?v2 Nat$ ))(= (snth$c (smap$f ?v0 ?v1 )?v2 )(fun_app$aa ?v0 (snth$a ?v1 ?v2 )))):named a38 ))
(assert (! (forall ((?v0 Rule_stream_state_fun$ )(?v1 Rule_stream_stream$ )(?v2 Nat$ ))(= (snth$c (smap$g ?v0 ?v1 )?v2 )(fun_app$ab ?v0 (snth$b ?v1 ?v2 )))):named a39 ))
(assert (! (forall ((?v0 Rule_state_stream_fun$ )(?v1 Rule_stream$ )(?v2 Nat$ ))(= (snth$a (smap$h ?v0 ?v1 )?v2 )(fun_app$w ?v0 (snth$ ?v1 ?v2 )))):named a40 ))
(assert (! (forall ((?v0 State_state_stream_fun$ )(?v1 State_stream$ )(?v2 Nat$ ))(= (snth$a (smap$i ?v0 ?v1 )?v2 )(fun_app$ac ?v0 (snth$c ?v1 ?v2 )))):named a41 ))
(assert (! (forall ((?v0 State_stream_stream_stream$ )(?v1 State_stream_stream_set$ ))(= (member$b ?v0 (streams$ ?v1 ))(forall ((?v2 Nat$ ))(member$c (snth$d ?v0 ?v2 )?v1 )))):named a42 ))
(assert (! (forall ((?v0 Rule_stream_stream_stream$ )(?v1 Rule_stream_stream_set$ ))(= (member$d ?v0 (streams$a ?v1 ))(forall ((?v2 Nat$ ))(member$e (snth$e ?v0 ?v2 )?v1 )))):named a43 ))
(assert (! (forall ((?v0 Rule_stream_stream$ )(?v1 Rule_stream_set$ ))(= (member$e ?v0 (streams$b ?v1 ))(forall ((?v2 Nat$ ))(member$f (snth$b ?v0 ?v2 )?v1 )))):named a44 ))
(assert (! (forall ((?v0 State_stream_stream$ )(?v1 State_stream_set$ ))(= (member$c ?v0 (streams$c ?v1 ))(forall ((?v2 Nat$ ))(member$g (snth$a ?v0 ?v2 )?v1 )))):named a45 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 State_set$ ))(= (member$g ?v0 (streams$d ?v1 ))(forall ((?v2 Nat$ ))(member$ (snth$c ?v0 ?v2 )?v1 )))):named a46 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_set$ ))(= (member$f ?v0 (streams$e ?v1 ))(forall ((?v2 Nat$ ))(member$a (snth$ ?v0 ?v2 )?v1 )))):named a47 ))
(assert (! (forall ((?v0 State_stream_stream_stream$ )(?v1 State_stream_stream_set$ )(?v2 Nat$ ))(=> (member$b ?v0 (streams$ ?v1 ))(member$c (snth$d ?v0 ?v2 )?v1 ))):named a48 ))
(assert (! (forall ((?v0 Rule_stream_stream_stream$ )(?v1 Rule_stream_stream_set$ )(?v2 Nat$ ))(=> (member$d ?v0 (streams$a ?v1 ))(member$e (snth$e ?v0 ?v2 )?v1 ))):named a49 ))
(assert (! (forall ((?v0 Rule_stream_stream$ )(?v1 Rule_stream_set$ )(?v2 Nat$ ))(=> (member$e ?v0 (streams$b ?v1 ))(member$f (snth$b ?v0 ?v2 )?v1 ))):named a50 ))
(assert (! (forall ((?v0 State_stream_stream$ )(?v1 State_stream_set$ )(?v2 Nat$ ))(=> (member$c ?v0 (streams$c ?v1 ))(member$g (snth$a ?v0 ?v2 )?v1 ))):named a51 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 State_set$ )(?v2 Nat$ ))(=> (member$g ?v0 (streams$d ?v1 ))(member$ (snth$c ?v0 ?v2 )?v1 ))):named a52 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_set$ )(?v2 Nat$ ))(=> (member$f ?v0 (streams$e ?v1 ))(member$a (snth$ ?v0 ?v2 )?v1 ))):named a53 ))
(assert (! (forall ((?v0 Rule_rule_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(= (= (smap$ ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$g ?v0 (snth$ ?v1 ?v3 ))(snth$ ?v2 ?v3 ))))):named a54 ))
(assert (! (forall ((?v0 Rule_state_fun$ )(?v1 Rule_stream$ )(?v2 State_stream$ ))(= (= (smap$b ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$m ?v0 (snth$ ?v1 ?v3 ))(snth$c ?v2 ?v3 ))))):named a55 ))
(assert (! (forall ((?v0 State_rule_fun$ )(?v1 State_stream$ )(?v2 Rule_stream$ ))(= (= (smap$a ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$i ?v0 (snth$c ?v1 ?v3 ))(snth$ ?v2 ?v3 ))))):named a56 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_stream$ )(?v2 State_stream$ ))(= (= (smap$c ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$o ?v0 (snth$c ?v1 ?v3 ))(snth$c ?v2 ?v3 ))))):named a57 ))
(assert (! (forall ((?v0 Rule_state_stream_fun$ )(?v1 Rule_stream$ )(?v2 State_stream_stream$ ))(= (= (smap$h ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$w ?v0 (snth$ ?v1 ?v3 ))(snth$a ?v2 ?v3 ))))):named a58 ))
(assert (! (forall ((?v0 Rule_rule_stream_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream_stream$ ))(= (= (smap$j ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$y ?v0 (snth$ ?v1 ?v3 ))(snth$b ?v2 ?v3 ))))):named a59 ))
(assert (! (forall ((?v0 State_state_stream_fun$ )(?v1 State_stream$ )(?v2 State_stream_stream$ ))(= (= (smap$i ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$ac ?v0 (snth$c ?v1 ?v3 ))(snth$a ?v2 ?v3 ))))):named a60 ))
(assert (! (forall ((?v0 State_rule_stream_fun$ )(?v1 State_stream$ )(?v2 Rule_stream_stream$ ))(= (= (smap$k ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$ad ?v0 (snth$c ?v1 ?v3 ))(snth$b ?v2 ?v3 ))))):named a61 ))
(assert (! (forall ((?v0 State_stream_rule_fun$ )(?v1 State_stream_stream$ )(?v2 Rule_stream$ ))(= (= (smap$d ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$s ?v0 (snth$a ?v1 ?v3 ))(snth$ ?v2 ?v3 ))))):named a62 ))
(assert (! (forall ((?v0 State_stream_state_fun$ )(?v1 State_stream_stream$ )(?v2 State_stream$ ))(= (= (smap$f ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$aa ?v0 (snth$a ?v1 ?v3 ))(snth$c ?v2 ?v3 ))))):named a63 ))
(assert (! (forall ((?v0 State_stream_stream_stream$ )(?v1 Nat$ ))(member$c (snth$d ?v0 ?v1 )(sset$a ?v0 ))):named a64 ))
(assert (! (forall ((?v0 Rule_stream_stream_stream$ )(?v1 Nat$ ))(member$e (snth$e ?v0 ?v1 )(sset$b ?v0 ))):named a65 ))
(assert (! (forall ((?v0 Rule_stream_stream$ )(?v1 Nat$ ))(member$f (snth$b ?v0 ?v1 )(sset$c ?v0 ))):named a66 ))
(assert (! (forall ((?v0 State_stream_stream$ )(?v1 Nat$ ))(member$g (snth$a ?v0 ?v1 )(sset$d ?v0 ))):named a67 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 Nat$ ))(member$ (snth$c ?v0 ?v1 )(sset$e ?v0 ))):named a68 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Nat$ ))(member$a (snth$ ?v0 ?v1 )(sset$ ?v0 ))):named a69 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State$ ))(! (= (fun_app$f (fun_app$ae (enabled$ ?v0 )?v1 )?v2 )(exists ((?v3 State_fset$ ))(fun_app$b (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )?v3 ))):pattern ((fun_app$f (fun_app$ae (enabled$ ?v0 )?v1 )?v2 )))):named a70 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (fun_app$f (fun_app$ae (enabled$ eff$ )?v0 )?v1 )(exists ((?v2 State_fset$ ))(fun_app$b (fun_app$c (fun_app$d eff$ ?v0 )?v1 )?v2 ))):pattern ((fun_app$f (fun_app$ae (enabled$ eff$ )?v0 )?v1 )))):named a71 ))
(assert (! (=> (forall ((?v0 Rule$ )(?v1 State_fset$ ))(=> (and (member$a ?v0 (sset$ rules$ ))(fun_app$b (fun_app$c (fun_app$d eff$ ?v0 )s$ )?v1 ))false ))false ):named a72 ))
(assert (! (forall ((?v0 State$ ))(=> (member$ ?v0 s$a )(exists ((?v1 Rule$ ))(and (member$a ?v1 (sset$ rules$ ))(exists ((?v2 State_fset$ ))(fun_app$b (fun_app$c (fun_app$d eff$ ?v1 )?v0 )?v2 )))))):named a73 ))
(check-sat )
;(get-unsat-core )
