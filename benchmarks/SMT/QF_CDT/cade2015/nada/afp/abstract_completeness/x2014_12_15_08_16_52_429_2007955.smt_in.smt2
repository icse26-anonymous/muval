;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_bool_fun$ 0 )
(declare-sort State_state_fun$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_rule_prod_fset$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort Rule_state_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_state_fun$ 0 )
(declare-sort State_rule_prod_tree_fset$ 0 )
(declare-sort State_state_rule_prod_fun$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_fun$ 0 )
(declare-sort State_state_rule_prod_tree_fun$ 0 )
(declare-sort State_rule_prod_state_rule_prod_fun$ 0 )
(declare-sort State_state_fun_state_state_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_rule_prod_fun$ 0 )
(declare-sort State_rule_prod_tree_state_rule_prod_tree_fun$ 0 )
(declare-sort State_state_fun_state_state_rule_prod_fun_fun$ 0 )
(declare-sort State_state_rule_prod_fun_state_state_fun_fun$ 0 )
(declare-sort Rule_stream_state_state_rule_prod_tree_fun_fun$ 0 )
(declare-sort State_state_fun_state_state_rule_prod_tree_fun_fun$ 0 )
(declare-sort State_state_rule_prod_tree_fun_state_state_fun_fun$ 0 )
(declare-sort State_rule_prod_state_fun_state_rule_prod_state_fun_fun$ 0 )
(declare-sort State_state_rule_prod_tree_fun_state_state_rule_prod_fun_fun$ 0 )
(declare-sort State_rule_prod_state_fun_state_rule_prod_state_rule_prod_fun_fun$ 0 )
(declare-sort State_rule_prod_state_rule_prod_fun_state_rule_prod_state_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_fun_state_rule_prod_tree_state_fun_fun$ 0 )
(declare-sort State_state_rule_prod_tree_fun_state_state_rule_prod_tree_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_fun_state_rule_prod_tree_state_rule_prod_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_rule_prod_fun_state_rule_prod_tree_state_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_rule_prod_tree_fun_state_rule_prod_tree_state_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_rule_prod_fun_state_rule_prod_tree_state_rule_prod_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_rule_prod_tree_fun_state_rule_prod_tree_state_rule_prod_fun_fun$ 0 )
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-fun s$ ()State_set$ )
(declare-fun id$ ()State_state_fun$ )
(declare-fun s$a ()State$ )
(declare-fun sa$ ()State$ )
(declare-fun uu$ ()State_rule_prod_state_fun$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun rsa$ ()Rule_stream$ )
(declare-fun comp$ (State_rule_prod_state_fun$ )State_rule_prod_tree_state_rule_prod_fun_state_rule_prod_tree_state_fun_fun$ )
(declare-fun cont$ (State_rule_prod_tree$ )State_rule_prod_tree_fset$ )
(declare-fun node$ (State_rule_prod$ State_rule_prod_tree_fset$ )State_rule_prod_tree$ )
(declare-fun root$ ()State_rule_prod_tree_state_rule_prod_fun$ )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun comp$a (State_rule_prod_tree_state_fun$ )State_state_rule_prod_tree_fun_state_state_fun_fun$ )
(declare-fun comp$b (State_state_fun$ )State_rule_prod_tree_state_fun_state_rule_prod_tree_state_fun_fun$ )
(declare-fun comp$c (State_rule_prod_tree_state_fun$ )State_rule_prod_tree_state_rule_prod_tree_fun_state_rule_prod_tree_state_fun_fun$ )
(declare-fun comp$d (State_state_fun$ )State_state_fun_state_state_fun_fun$ )
(declare-fun comp$e (State_state_fun$ )State_rule_prod_state_fun_state_rule_prod_state_fun_fun$ )
(declare-fun comp$f (State_rule_prod_state_fun$ )State_state_rule_prod_fun_state_state_fun_fun$ )
(declare-fun comp$g (State_state_rule_prod_tree_fun$ )State_state_fun_state_state_rule_prod_tree_fun_fun$ )
(declare-fun comp$h (State_rule_prod_state_fun$ )State_rule_prod_state_rule_prod_fun_state_rule_prod_state_fun_fun$ )
(declare-fun comp$i (State_state_rule_prod_fun$ )State_rule_prod_tree_state_fun_state_rule_prod_tree_state_rule_prod_fun_fun$ )
(declare-fun comp$j (State_state_rule_prod_fun$ )State_state_fun_state_state_rule_prod_fun_fun$ )
(declare-fun comp$k (State_state_rule_prod_fun$ )State_rule_prod_state_fun_state_rule_prod_state_rule_prod_fun_fun$ )
(declare-fun comp$l (State_state_rule_prod_tree_fun$ State_rule_prod_state_fun$ State_rule_prod$ )State_rule_prod_tree$ )
(declare-fun comp$m (State_rule_prod_tree_state_rule_prod_fun$ )State_state_rule_prod_tree_fun_state_state_rule_prod_fun_fun$ )
(declare-fun comp$n (State_rule_prod_tree_state_rule_prod_tree_fun$ )State_state_rule_prod_tree_fun_state_state_rule_prod_tree_fun_fun$ )
(declare-fun comp$o (State_rule_prod_state_rule_prod_fun$ )State_rule_prod_tree_state_rule_prod_fun_state_rule_prod_tree_state_rule_prod_fun_fun$ )
(declare-fun comp$p (State_rule_prod_tree_state_rule_prod_fun$ )State_rule_prod_tree_state_rule_prod_tree_fun_state_rule_prod_tree_state_rule_prod_fun_fun$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun fimage$ (State_rule_prod_tree_state_fun$ State_rule_prod_tree_fset$ )State_fset$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_stream_state_state_rule_prod_tree_fun_fun$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_bool_fun$ )
(declare-fun fimage$a (State_state_fun$ State_fset$ )State_fset$ )
(declare-fun fimage$b (State_state_rule_prod_tree_fun$ State_fset$ )State_rule_prod_tree_fset$ )
(declare-fun fimage$c (State_rule_prod_state_fun$ State_rule_prod_fset$ )State_fset$ )
(declare-fun fimage$d (State_rule_prod_tree_state_rule_prod_fun$ State_rule_prod_tree_fset$ )State_rule_prod_fset$ )
(declare-fun fimage$e (State_rule_prod_tree_state_rule_prod_tree_fun$ State_rule_prod_tree_fset$ )State_rule_prod_tree_fset$ )
(declare-fun fimage$f (State_state_rule_prod_fun$ State_fset$ )State_rule_prod_fset$ )
(declare-fun fimage$g (State_rule_prod_state_rule_prod_fun$ State_rule_prod_fset$ )State_rule_prod_fset$ )
(declare-fun fun_app$ (State_rule_prod_state_fun$ State_rule_prod$ )State$ )
(declare-fun member$a (Rule$ Rule_set$ )Bool )
(declare-fun fun_app$a (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$b (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$c (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun fun_app$d (State_rule_prod_tree_state_rule_prod_fun$ State_rule_prod_tree$ )State_rule_prod$ )
(declare-fun fun_app$e (State_state_rule_prod_tree_fun$ State$ )State_rule_prod_tree$ )
(declare-fun fun_app$f (Rule_stream_state_state_rule_prod_tree_fun_fun$ Rule_stream$ )State_state_rule_prod_tree_fun$ )
(declare-fun fun_app$g (State_rule_prod_tree_state_rule_prod_fun_state_rule_prod_tree_state_fun_fun$ State_rule_prod_tree_state_rule_prod_fun$ )State_rule_prod_tree_state_fun$ )
(declare-fun fun_app$h (State_state_rule_prod_tree_fun_state_state_fun_fun$ State_state_rule_prod_tree_fun$ )State_state_fun$ )
(declare-fun fun_app$i (State_rule_prod_tree_state_fun_state_rule_prod_tree_state_fun_fun$ State_rule_prod_tree_state_fun$ )State_rule_prod_tree_state_fun$ )
(declare-fun fun_app$j (State_rule_prod_tree_state_rule_prod_tree_fun_state_rule_prod_tree_state_fun_fun$ State_rule_prod_tree_state_rule_prod_tree_fun$ )State_rule_prod_tree_state_fun$ )
(declare-fun fun_app$k (State_state_fun_state_state_fun_fun$ State_state_fun$ )State_state_fun$ )
(declare-fun fun_app$l (State_rule_prod_state_fun_state_rule_prod_state_fun_fun$ State_rule_prod_state_fun$ )State_rule_prod_state_fun$ )
(declare-fun fun_app$m (State_state_rule_prod_fun_state_state_fun_fun$ State_state_rule_prod_fun$ )State_state_fun$ )
(declare-fun fun_app$n (State_state_fun_state_state_rule_prod_tree_fun_fun$ State_state_fun$ )State_state_rule_prod_tree_fun$ )
(declare-fun fun_app$o (State_rule_prod_state_rule_prod_fun_state_rule_prod_state_fun_fun$ State_rule_prod_state_rule_prod_fun$ )State_rule_prod_state_fun$ )
(declare-fun fun_app$p (State_rule_prod_tree_state_fun_state_rule_prod_tree_state_rule_prod_fun_fun$ State_rule_prod_tree_state_fun$ )State_rule_prod_tree_state_rule_prod_fun$ )
(declare-fun fun_app$q (State_bool_fun$ State$ )Bool )
(declare-fun fun_app$r (State_state_fun$ State$ )State$ )
(declare-fun fun_app$s (State_rule_prod_tree_state_fun$ State_rule_prod_tree$ )State$ )
(declare-fun fun_app$t (State_state_rule_prod_fun$ State$ )State_rule_prod$ )
(declare-fun fun_app$u (State_state_fun_state_state_rule_prod_fun_fun$ State_state_fun$ )State_state_rule_prod_fun$ )
(declare-fun fun_app$v (State_rule_prod_state_rule_prod_fun$ State_rule_prod$ )State_rule_prod$ )
(declare-fun fun_app$w (State_rule_prod_state_fun_state_rule_prod_state_rule_prod_fun_fun$ State_rule_prod_state_fun$ )State_rule_prod_state_rule_prod_fun$ )
(declare-fun fun_app$x (Rule_state_bool_fun_fun$ Rule$ )State_bool_fun$ )
(declare-fun fun_app$y (State_state_rule_prod_tree_fun_state_state_rule_prod_fun_fun$ State_state_rule_prod_tree_fun$ )State_state_rule_prod_fun$ )
(declare-fun fun_app$z (State_state_rule_prod_tree_fun_state_state_rule_prod_tree_fun_fun$ State_state_rule_prod_tree_fun$ )State_state_rule_prod_tree_fun$ )
(declare-fun fun_app$aa (State_rule_prod_tree_state_rule_prod_fun_state_rule_prod_tree_state_rule_prod_fun_fun$ State_rule_prod_tree_state_rule_prod_fun$ )State_rule_prod_tree_state_rule_prod_fun$ )
(declare-fun fun_app$ab (State_rule_prod_tree_state_rule_prod_tree_fun_state_rule_prod_tree_state_rule_prod_fun_fun$ State_rule_prod_tree_state_rule_prod_tree_fun$ )State_rule_prod_tree_state_rule_prod_fun$ )
(assert (! (forall ((?v0 State_rule_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (fun_app$a (fun_app$b (fun_app$c eff$ (snd$ (fun_app$d root$ (fun_app$e (fun_app$f (mkTree$ eff$ )rsa$ )sa$ ))))(fst$ (fun_app$d root$ (fun_app$e (fun_app$f (mkTree$ eff$ )rsa$ )sa$ ))))(fimage$ (fun_app$g (comp$ uu$ )root$ )(cont$ (fun_app$e (fun_app$f (mkTree$ eff$ )rsa$ )sa$ ))))):named a1 ))
(assert (! (member$ sa$ s$ ):named a2 ))
(assert (! (= (fun_app$h (comp$a (fun_app$g (comp$ uu$ )root$ ))(fun_app$f (mkTree$ eff$ )(stl$ (trim$ eff$ rsa$ sa$ ))))id$ ):named a3 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_tree$ ))(=> (and (= (fun_app$d root$ ?v0 )(fun_app$d root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a4 ))
(assert (! (member$ s$a s$ ):named a5 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_rule_prod_tree_state_fun$ )(?v2 State_rule_prod_tree_fset$ ))(= (fimage$a ?v0 (fimage$ ?v1 ?v2 ))(fimage$ (fun_app$i (comp$b ?v0 )?v1 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_fun$ )(?v1 State_state_rule_prod_tree_fun$ )(?v2 State_fset$ ))(= (fimage$ ?v0 (fimage$b ?v1 ?v2 ))(fimage$a (fun_app$h (comp$a ?v0 )?v1 )?v2 ))):named a7 ))
(assert (! (forall ((?v0 State_rule_prod_state_fun$ )(?v1 State_rule_prod_tree_state_rule_prod_fun$ )(?v2 State_rule_prod_tree_fset$ ))(= (fimage$c ?v0 (fimage$d ?v1 ?v2 ))(fimage$ (fun_app$g (comp$ ?v0 )?v1 )?v2 ))):named a8 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_fun$ )(?v1 State_rule_prod_tree_state_rule_prod_tree_fun$ )(?v2 State_rule_prod_tree_fset$ ))(= (fimage$ ?v0 (fimage$e ?v1 ?v2 ))(fimage$ (fun_app$j (comp$c ?v0 )?v1 )?v2 ))):named a9 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_state_fun$ )(?v2 State_fset$ ))(= (fimage$a ?v0 (fimage$a ?v1 ?v2 ))(fimage$a (fun_app$k (comp$d ?v0 )?v1 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_rule_prod_state_fun$ )(?v2 State_rule_prod_fset$ ))(= (fimage$a ?v0 (fimage$c ?v1 ?v2 ))(fimage$c (fun_app$l (comp$e ?v0 )?v1 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 State_rule_prod_state_fun$ )(?v1 State_state_rule_prod_fun$ )(?v2 State_fset$ ))(= (fimage$c ?v0 (fimage$f ?v1 ?v2 ))(fimage$a (fun_app$m (comp$f ?v0 )?v1 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 State_state_rule_prod_tree_fun$ )(?v1 State_state_fun$ )(?v2 State_fset$ ))(= (fimage$b ?v0 (fimage$a ?v1 ?v2 ))(fimage$b (fun_app$n (comp$g ?v0 )?v1 )?v2 ))):named a13 ))
(assert (! (forall ((?v0 State_rule_prod_state_fun$ )(?v1 State_rule_prod_state_rule_prod_fun$ )(?v2 State_rule_prod_fset$ ))(= (fimage$c ?v0 (fimage$g ?v1 ?v2 ))(fimage$c (fun_app$o (comp$h ?v0 )?v1 )?v2 ))):named a14 ))
(assert (! (forall ((?v0 State_state_rule_prod_fun$ )(?v1 State_rule_prod_tree_state_fun$ )(?v2 State_rule_prod_tree_fset$ ))(= (fimage$f ?v0 (fimage$ ?v1 ?v2 ))(fimage$d (fun_app$p (comp$i ?v0 )?v1 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (fun_app$q (enabled$ eff$ ?v0 )?v1 )(exists ((?v2 State_fset$ ))(fun_app$a (fun_app$b (fun_app$c eff$ ?v0 )?v1 )?v2 ))):pattern ((fun_app$q (enabled$ eff$ ?v0 )?v1 )))):named a16 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_fun$ )(?v1 State_state_rule_prod_tree_fun$ )(?v2 State$ ))(! (= (fun_app$r (fun_app$h (comp$a ?v0 )?v1 )?v2 )(fun_app$s ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$r (fun_app$h (comp$a ?v0 )?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 State_rule_prod_state_fun$ )(?v1 State_rule_prod_tree_state_rule_prod_fun$ )(?v2 State_rule_prod_tree$ ))(! (= (fun_app$s (fun_app$g (comp$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$s (fun_app$g (comp$ ?v0 )?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_state_fun$ )(?v2 State$ ))(! (= (fun_app$r (fun_app$k (comp$d ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$r (fun_app$k (comp$d ?v0 )?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 State_rule_prod_state_fun$ )(?v1 State_state_rule_prod_fun$ )(?v2 State$ ))(! (= (fun_app$r (fun_app$m (comp$f ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$t ?v1 ?v2 ))):pattern ((fun_app$r (fun_app$m (comp$f ?v0 )?v1 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_rule_prod_state_fun$ )(?v2 State_rule_prod$ ))(! (= (fun_app$ (fun_app$l (comp$e ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$l (comp$e ?v0 )?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 State_state_rule_prod_tree_fun$ )(?v1 State_state_fun$ )(?v2 State$ ))(! (= (fun_app$e (fun_app$n (comp$g ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$n (comp$g ?v0 )?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_rule_prod_tree_state_fun$ )(?v2 State_rule_prod_tree$ ))(! (= (fun_app$s (fun_app$i (comp$b ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$s ?v1 ?v2 ))):pattern ((fun_app$s (fun_app$i (comp$b ?v0 )?v1 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 State_state_rule_prod_fun$ )(?v1 State_state_fun$ )(?v2 State$ ))(! (= (fun_app$t (fun_app$u (comp$j ?v0 )?v1 )?v2 )(fun_app$t ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$t (fun_app$u (comp$j ?v0 )?v1 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 State_state_rule_prod_fun$ )(?v1 State_rule_prod_state_fun$ )(?v2 State_rule_prod$ ))(! (= (fun_app$v (fun_app$w (comp$k ?v0 )?v1 )?v2 )(fun_app$t ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$v (fun_app$w (comp$k ?v0 )?v1 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 State_state_rule_prod_tree_fun$ )(?v1 State_rule_prod_state_fun$ )(?v2 State_rule_prod$ ))(! (= (comp$l ?v0 ?v1 ?v2 )(fun_app$e ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((comp$l ?v0 ?v1 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 State_rule_prod$ )(?v1 State_rule_prod$ ))(= (= ?v0 ?v1 )(and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 ))))):named a27 ))
(assert (! (forall ((?v0 State_rule_prod$ )(?v1 State_rule_prod$ ))(=> (and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 )))(= ?v0 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 State_rule_prod$ )(?v1 State_rule_prod$ ))(=> (and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 )))(= ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 Rule_state_bool_fun_fun$ )(?v1 State_rule_prod$ ))(=> (and (fun_app$q (fun_app$x ?v0 (snd$ ?v1 ))(fst$ ?v1 ))(forall ((?v2 State$ )(?v3 Rule$ ))(=> (fun_app$q (fun_app$x ?v0 ?v3 )?v2 )false )))false )):named a30 ))
(assert (! (member$a (snd$ (fun_app$d root$ (fun_app$e (fun_app$f (mkTree$ eff$ )rsa$ )sa$ )))(sset$ rules$ )):named a31 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ ))(= (node$ (fun_app$d root$ ?v0 )(cont$ ?v0 ))?v0 )):named a32 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_rule_prod_tree_state_fun$ )(?v2 State_state_rule_prod_tree_fun$ ))(= (fun_app$k (comp$d ?v0 )(fun_app$h (comp$a ?v1 )?v2 ))(fun_app$h (comp$a (fun_app$i (comp$b ?v0 )?v1 ))?v2 ))):named a33 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_fun$ )(?v1 State_state_rule_prod_tree_fun$ )(?v2 State_state_fun$ ))(= (fun_app$h (comp$a ?v0 )(fun_app$n (comp$g ?v1 )?v2 ))(fun_app$k (comp$d (fun_app$h (comp$a ?v0 )?v1 ))?v2 ))):named a34 ))
(assert (! (forall ((?v0 State_rule_prod_state_fun$ )(?v1 State_rule_prod_tree_state_rule_prod_fun$ )(?v2 State_state_rule_prod_tree_fun$ ))(= (fun_app$m (comp$f ?v0 )(fun_app$y (comp$m ?v1 )?v2 ))(fun_app$h (comp$a (fun_app$g (comp$ ?v0 )?v1 ))?v2 ))):named a35 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_rule_prod_state_fun$ )(?v2 State_rule_prod_tree_state_rule_prod_fun$ ))(= (fun_app$i (comp$b ?v0 )(fun_app$g (comp$ ?v1 )?v2 ))(fun_app$g (comp$ (fun_app$l (comp$e ?v0 )?v1 ))?v2 ))):named a36 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_fun$ )(?v1 State_rule_prod_tree_state_rule_prod_tree_fun$ )(?v2 State_state_rule_prod_tree_fun$ ))(= (fun_app$h (comp$a ?v0 )(fun_app$z (comp$n ?v1 )?v2 ))(fun_app$h (comp$a (fun_app$j (comp$c ?v0 )?v1 ))?v2 ))):named a37 ))
(assert (! (forall ((?v0 State_rule_prod_state_fun$ )(?v1 State_rule_prod_state_rule_prod_fun$ )(?v2 State_rule_prod_tree_state_rule_prod_fun$ ))(= (fun_app$g (comp$ ?v0 )(fun_app$aa (comp$o ?v1 )?v2 ))(fun_app$g (comp$ (fun_app$o (comp$h ?v0 )?v1 ))?v2 ))):named a38 ))
(assert (! (forall ((?v0 State_rule_prod_state_fun$ )(?v1 State_rule_prod_tree_state_rule_prod_fun$ )(?v2 State_rule_prod_tree_state_rule_prod_tree_fun$ ))(= (fun_app$g (comp$ ?v0 )(fun_app$ab (comp$p ?v1 )?v2 ))(fun_app$j (comp$c (fun_app$g (comp$ ?v0 )?v1 ))?v2 ))):named a39 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_state_fun$ )(?v2 State_state_fun$ ))(= (fun_app$k (comp$d ?v0 )(fun_app$k (comp$d ?v1 )?v2 ))(fun_app$k (comp$d (fun_app$k (comp$d ?v0 )?v1 ))?v2 ))):named a40 ))
(assert (! (forall ((?v0 State_rule_prod_state_fun$ )(?v1 State_state_rule_prod_fun$ )(?v2 State_state_fun$ ))(= (fun_app$m (comp$f ?v0 )(fun_app$u (comp$j ?v1 )?v2 ))(fun_app$k (comp$d (fun_app$m (comp$f ?v0 )?v1 ))?v2 ))):named a41 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_state_fun$ )(?v2 State_rule_prod_state_fun$ ))(= (fun_app$l (comp$e ?v0 )(fun_app$l (comp$e ?v1 )?v2 ))(fun_app$l (comp$e (fun_app$k (comp$d ?v0 )?v1 ))?v2 ))):named a42 ))
(assert (! (forall ((?v0 State$ ))(! (= (fun_app$r id$ ?v0 )?v0 ):pattern ((fun_app$r id$ ?v0 )))):named a43 ))
(assert (! (forall ((?v0 State_rule_prod$ )(?v1 State_rule_prod_tree_fset$ )(?v2 State_rule_prod$ )(?v3 State_rule_prod_tree_fset$ ))(= (= (node$ ?v0 ?v1 )(node$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a44 ))
(check-sat )
;(get-unsat-core )
