;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort Rule_stream_bool_fun$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_rule_prod_bool_fun$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_stream_bool_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_state_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-sort State_rule_prod_stream$ 0)
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (State_rule_prod_stream$)State_rule_prod$)
(declare-fun stl$ (State_rule_prod_stream$)State_rule_prod_stream$)
(declare-fun sCons$ (State_rule_prod$ State_rule_prod_stream$ )State_rule_prod_stream$)
(declare-fun shd$a (Rule_stream$)Rule$)
(declare-fun stl$a (Rule_stream$)Rule_stream$)
(declare-fun sCons$a (Rule$ Rule_stream$ )Rule_stream$)
(declare-fun r$ ()Rule$ )
(declare-fun s$ ()State_set$ )
(declare-fun ev$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State$ )
(declare-fun sa$ ()State$ )
(declare-fun uu$ ()State_rule_prod_bool_fun$ )
(declare-fun wf$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_tree$ )Bool )
(declare-fun alw$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun ev$a (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun rsa$ ()Rule_stream$ )
(declare-fun uua$ ()State_rule_prod_bool_fun$ )
(declare-fun uub$ ()State_rule_prod_stream_bool_fun$ )
(declare-fun uuc$ (Rule$ )State_rule_prod_bool_fun$ )
(declare-fun uud$ (Rule$ )State_rule_prod_bool_fun$ )
(declare-fun uue$ (Rule$ )State_rule_prod_stream_bool_fun$ )
(declare-fun uuf$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_rule_prod_bool_fun$ )
(declare-fun uug$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_state_rule_prod_stream_bool_fun_fun$ )
(declare-fun alw$a (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun fair$ (Rule_stream$ )Rule_stream_bool_fun$ )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun fair$a (State_rule_prod_stream$ )State_rule_prod_stream_bool_fun$ )
(declare-fun fenum$ (Rule_stream$ )Rule_stream$ )
(declare-fun holds$ (State_rule_prod_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun ipath$ (State_rule_prod_tree$ )State_rule_prod_stream_bool_fun$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun steps$ ()State_rule_prod_stream$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )State_rule_prod_tree$ )
(declare-fun stepsa$ ()State_rule_prod_stream$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (State_rule_prod_bool_fun$ State_rule_prod$ )Bool )
(declare-fun member$a (Rule$ Rule_set$ )Bool )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun fun_app$a (State_rule_prod_stream_bool_fun$ State_rule_prod_stream$ )Bool )
(declare-fun fun_app$b (Rule_state_rule_prod_stream_bool_fun_fun$ Rule$ )State_rule_prod_stream_bool_fun$ )
(declare-fun fun_app$c (Rule_stream_bool_fun$ Rule_stream$ )Bool )
(declare-fun fun_app$d (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$e (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$f (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun saturated$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_state_rule_prod_stream_bool_fun_fun$ )
(assert (! (forall ((?v0 State_rule_prod$ ))(! (= (fun_app$ uu$ ?v0 )(enabled$ eff$ r$ (fst$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(! (= (fun_app$a uub$ ?v0 )(=> (fun_app$a (holds$ uu$ )?v0 )(fun_app$a (ev$ (holds$ uua$ ))?v0 ))):pattern ((fun_app$a uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 State_rule_prod$ ))(! (= (fun_app$ uua$ ?v0 )(= (snd$ ?v0 )r$ )):pattern ((fun_app$ uua$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State_rule_prod$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )(enabled$ eff$ ?v0 (fst$ ?v1 ))):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State_rule_prod_stream$ ))(! (= (fun_app$a (uue$ ?v0 )?v1 )(=> (fun_app$a (holds$ (uuc$ ?v0 ))?v1 )(fun_app$a (ev$ (holds$ (uud$ ?v0 )))?v1 ))):pattern ((fun_app$a (uue$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State_rule_prod$ ))(! (= (fun_app$ (uud$ ?v0 )?v1 )(= (snd$ ?v1 )?v0 )):pattern ((fun_app$ (uud$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State_rule_prod$ ))(! (= (fun_app$ (uuf$ ?v0 ?v1 )?v2 )(enabled$ ?v0 ?v1 (fst$ ?v2 ))):pattern ((fun_app$ (uuf$ ?v0 ?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State_rule_prod_stream$ ))(! (= (fun_app$a (fun_app$b (uug$ ?v0 )?v1 )?v2 )(=> (fun_app$a (holds$ (uuf$ ?v0 ?v1 ))?v2 )(fun_app$a (ev$ (holds$ (uud$ ?v1 )))?v2 ))):pattern ((fun_app$a (fun_app$b (uug$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (not (exists ((?v0 State_rule_prod_stream$ ))(and (= stepsa$ ?v0 )(and (=> (fun_app$a (holds$ uu$ )?v0 )(fun_app$a (ev$ (holds$ uua$ ))?v0 ))(or (exists ((?v1 Rule_stream$ )(?v2 State$ )(?v3 State_rule_prod_stream$ ))(and (= (stl$ ?v0 )?v3 )(and (member$ ?v2 s$ )(and (fun_app$c (fair$ rules$ )?v1 )(fun_app$a (ipath$ (mkTree$ eff$ ?v1 ?v2 ))?v3 )))))(fun_app$a (alw$ uub$ )(stl$ ?v0 ))))))):named a8 ))
(assert (! (member$ s$a s$ ):named a9 ))
(assert (! (member$ sa$ s$ ):named a10 ))
(assert (! (fun_app$c (fair$ rules$ )rs$ ):named a11 ))
(assert (! (fun_app$c (fair$ rules$ )rsa$ ):named a12 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$d (fun_app$e (fun_app$f eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a13 ))
(assert (! (fun_app$a (ipath$ (mkTree$ eff$ rsa$ sa$ ))stepsa$ ):named a14 ))
(assert (! (fun_app$c (fair$ rules$ )(fenum$ rules$ )):named a15 ))
(assert (! (fun_app$a (ipath$ (mkTree$ eff$ rs$ s$a ))steps$ ):named a16 ))
(assert (! (forall ((?v0 Rule$ ))(= (fun_app$b (saturated$ eff$ )?v0 )(alw$ (uue$ ?v0 )))):named a17 ))
(assert (! (member$a r$ (sset$ rules$ )):named a18 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(=> (enabled$ eff$ ?v0 ?v1 )(fun_app$d (fun_app$e (fun_app$f eff$ ?v0 )?v1 )(pickEff$ eff$ ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State$ ))(! (= (enabled$ ?v0 ?v1 ?v2 )(exists ((?v3 State_fset$ ))(fun_app$d (fun_app$e (fun_app$f ?v0 ?v1 )?v2 )?v3 ))):pattern ((enabled$ ?v0 ?v1 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 State_rule_prod_stream$ ))(=> (fun_app$a (fair$a ?v0 )?v1 )(fun_app$a (fair$a ?v0 )(stl$ ?v1 )))):named a21 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ ))(=> (fun_app$c (fair$ ?v0 )?v1 )(fun_app$c (fair$ ?v0 )(stl$a ?v1 )))):named a22 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$ ?v0 s$ )(fun_app$c (fair$ rules$ )?v1 ))(wf$ eff$ rules$ (mkTree$ eff$ ?v1 ?v0 )))):named a23 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_stream$ )(?v3 Rule$ ))(=> (and (member$ ?v0 s$ )(and (fun_app$c (fair$ rules$ )?v1 )(and (fun_app$a (ipath$ (mkTree$ eff$ ?v1 ?v0 ))?v2 )(and (member$a ?v3 (sset$ rules$ ))(fun_app$a (alw$ (holds$ (uuc$ ?v3 )))?v2 )))))(fun_app$a (ev$ (holds$ (uud$ ?v3 )))?v2 ))):named a24 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ ))(= (fun_app$b (saturated$ ?v0 )?v1 )(alw$ (fun_app$b (uug$ ?v0 )?v1 )))):named a25 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_stream$ ))(= (fun_app$c (ev$a (alw$a ?v0 ))(stl$a ?v1 ))(fun_app$c (ev$a (alw$a ?v0 ))?v1 ))):named a26 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream$ ))(= (fun_app$a (ev$ (alw$ ?v0 ))(stl$ ?v1 ))(fun_app$a (ev$ (alw$ ?v0 ))?v1 ))):named a27 ))
(check-sat )
;(get-unsat-core )
