;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_tree$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort Rule_tree_fset$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort Rule_stream_bool_fun$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_rule_prod_tree_fset$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_stream_bool_fun$ 0 )
(declare-sort Rule_tree_rule_stream_bool_fun_fun$ 0 )
(declare-sort Rule_stream_rule_stream_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_stream_state_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-sort Rule_stream$ 0)
(declare-sort State_rule_prod_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-fun shd$a (State_rule_prod_stream$)State_rule_prod$)
(declare-fun stl$a (State_rule_prod_stream$)State_rule_prod_stream$)
(declare-fun sCons$a (State_rule_prod$ State_rule_prod_stream$ )State_rule_prod_stream$)
(declare-fun s$ ()State_set$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State$ )
(declare-fun sa$ ()State$ )
(declare-fun wf$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_tree$ )Bool )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun rsa$ ()Rule_stream$ )
(declare-fun cont$ (State_rule_prod_tree$ )State_rule_prod_tree_fset$ )
(declare-fun fair$ (Rule_stream$ Rule_stream$ )Bool )
(declare-fun root$ (State_rule_prod_tree$ )State_rule_prod$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun cont$a (Rule_tree$ )Rule_tree_fset$ )
(declare-fun fair$a (State_rule_prod_stream$ State_rule_prod_stream$ )Bool )
(declare-fun ipath$ (State_rule_prod_tree$ State_rule_prod_stream$ )Bool )
(declare-fun root$a (Rule_tree$ )Rule$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun sdrop$ (Nat$ Rule_stream$ )Rule_stream$ )
(declare-fun steps$ ()State_rule_prod_stream$ )
(declare-fun ipath$a (Rule_tree$ Rule_stream$ )Bool )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )State_rule_prod_tree$ )
(declare-fun stepsa$ ()State_rule_prod_stream$ )
(declare-fun thesis$ ()Bool )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fmember$ (State_rule_prod_tree$ State_rule_prod_tree_fset$ )Bool )
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun minWait$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Nat$ )
(declare-fun fmember$a (State$ State_fset$ )Bool )
(declare-fun fmember$b (Rule_tree$ Rule_tree_fset$ )Bool )
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun fun_app$c (Rule_stream_bool_fun$ Rule_stream$ )Bool )
(declare-fun fun_app$d (Rule_tree_rule_stream_bool_fun_fun$ Rule_tree$ )Rule_stream_bool_fun$ )
(declare-fun fun_app$e (State_rule_prod_stream_bool_fun$ State_rule_prod_stream$ )Bool )
(declare-fun fun_app$f (State_rule_prod_tree_state_rule_prod_stream_bool_fun_fun$ State_rule_prod_tree$ )State_rule_prod_stream_bool_fun$ )
(declare-fun fun_app$g (Rule_stream_rule_stream_bool_fun_fun$ Rule_stream$ )Rule_stream_bool_fun$ )
(declare-fun fun_app$h (State_rule_prod_stream_state_rule_prod_stream_bool_fun_fun$ State_rule_prod_stream$ )State_rule_prod_stream_bool_fun$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 State$ ))(=> (and (= (root$ (mkTree$ eff$ rsa$ sa$ ))(shd$a stepsa$ ))(and (ipath$ (mkTree$ eff$ (stl$ (trim$ eff$ rsa$ sa$ ))?v0 )(stl$a stepsa$ ))(member$ ?v0 s$ )))thesis$ )):named a1 ))
(assert (! (fair$ rules$ rs$ ):named a2 ))
(assert (! (fair$ rules$ rsa$ ):named a3 ))
(assert (! (member$ sa$ s$ ):named a4 ))
(assert (! (member$ s$a s$ ):named a5 ))
(assert (! (ipath$ (mkTree$ eff$ rsa$ sa$ )stepsa$ ):named a6 ))
(assert (! (forall ((?v0 Rule_stream$ ))(=> (fair$ rules$ ?v0 )(fair$ rules$ (stl$ ?v0 )))):named a7 ))
(assert (! (ipath$ (mkTree$ eff$ rs$ s$a )steps$ ):named a8 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$ ?v0 s$ )(fair$ rules$ ?v1 ))(fair$ rules$ (trim$ eff$ ?v1 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_tree$ ))(=> (and (member$ ?v0 s$ )(and (fair$ rules$ ?v1 )(fmember$ ?v2 (cont$ (mkTree$ eff$ ?v1 ?v0 )))))(exists ((?v3 State_fset$ )(?v4 State$ ))(and (member$ ?v4 s$ )(and (fun_app$ (fun_app$a (fun_app$b eff$ (shd$ (trim$ eff$ ?v1 ?v0 )))?v0 )?v3 )(and (fmember$a ?v4 ?v3 )(= ?v2 (mkTree$ eff$ (stl$ (trim$ eff$ ?v1 ?v0 ))?v4 )))))))):named a10 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Rule_tree$ )(?v1 Rule_stream$ ))(= (ipath$a ?v0 ?v1 )(exists ((?v2 Rule_tree$ )(?v3 Rule_stream$ )(?v4 Rule_tree$ ))(and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (root$a ?v2 )(shd$ ?v3 ))(and (fmember$b ?v4 (cont$a ?v2 ))(ipath$a ?v4 (stl$ ?v3 ))))))))):named a12 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_stream$ ))(= (ipath$ ?v0 ?v1 )(exists ((?v2 State_rule_prod_tree$ )(?v3 State_rule_prod_stream$ )(?v4 State_rule_prod_tree$ ))(and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (root$ ?v2 )(shd$a ?v3 ))(and (fmember$ ?v4 (cont$ ?v2 ))(ipath$ ?v4 (stl$a ?v3 ))))))))):named a13 ))
(assert (! (forall ((?v0 Rule_tree$ )(?v1 Rule_stream$ )(?v2 Rule_tree$ ))(=> (and (= (root$a ?v0 )(shd$ ?v1 ))(and (fmember$b ?v2 (cont$a ?v0 ))(ipath$a ?v2 (stl$ ?v1 ))))(ipath$a ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_tree$ ))(=> (and (= (root$ ?v0 )(shd$a ?v1 ))(and (fmember$ ?v2 (cont$ ?v0 ))(ipath$ ?v2 (stl$a ?v1 ))))(ipath$ ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Rule_tree$ )(?v1 Rule_stream$ ))(=> (and (ipath$a ?v0 ?v1 )(forall ((?v2 Rule_tree$ )(?v3 Rule_stream$ )(?v4 Rule_tree$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (root$a ?v2 )(shd$ ?v3 ))(and (fmember$b ?v4 (cont$a ?v2 ))(ipath$a ?v4 (stl$ ?v3 ))))))false )))false )):named a16 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_stream$ ))(=> (and (ipath$ ?v0 ?v1 )(forall ((?v2 State_rule_prod_tree$ )(?v3 State_rule_prod_stream$ )(?v4 State_rule_prod_tree$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (root$ ?v2 )(shd$a ?v3 ))(and (fmember$ ?v4 (cont$ ?v2 ))(ipath$ ?v4 (stl$a ?v3 ))))))false )))false )):named a17 ))
(assert (! (forall ((?v0 Rule_tree_rule_stream_bool_fun_fun$ )(?v1 Rule_tree$ )(?v2 Rule_stream$ ))(=> (and (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(forall ((?v3 Rule_tree$ )(?v4 Rule_stream$ ))(=> (fun_app$c (fun_app$d ?v0 ?v3 )?v4 )(exists ((?v5 Rule_tree$ )(?v6 Rule_stream$ )(?v7 Rule_tree$ ))(and (= ?v3 ?v5 )(and (= ?v4 ?v6 )(and (= (root$a ?v5 )(shd$ ?v6 ))(and (fmember$b ?v7 (cont$a ?v5 ))(or (fun_app$c (fun_app$d ?v0 ?v7 )(stl$ ?v6 ))(ipath$a ?v7 (stl$ ?v6 )))))))))))(ipath$a ?v1 ?v2 ))):named a18 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_rule_prod_stream_bool_fun_fun$ )(?v1 State_rule_prod_tree$ )(?v2 State_rule_prod_stream$ ))(=> (and (fun_app$e (fun_app$f ?v0 ?v1 )?v2 )(forall ((?v3 State_rule_prod_tree$ )(?v4 State_rule_prod_stream$ ))(=> (fun_app$e (fun_app$f ?v0 ?v3 )?v4 )(exists ((?v5 State_rule_prod_tree$ )(?v6 State_rule_prod_stream$ )(?v7 State_rule_prod_tree$ ))(and (= ?v3 ?v5 )(and (= ?v4 ?v6 )(and (= (root$ ?v5 )(shd$a ?v6 ))(and (fmember$ ?v7 (cont$ ?v5 ))(or (fun_app$e (fun_app$f ?v0 ?v7 )(stl$a ?v6 ))(ipath$ ?v7 (stl$a ?v6 )))))))))))(ipath$ ?v1 ?v2 ))):named a19 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (root$ (mkTree$ eff$ ?v0 ?v1 ))(pair$ ?v1 (shd$ (trim$ eff$ ?v0 ?v1 ))))):named a20 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 State_rule_prod_stream$ ))(=> (fair$a ?v0 ?v1 )(fair$a ?v0 (stl$a ?v1 )))):named a21 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ ))(=> (fair$ ?v0 ?v1 )(fair$ ?v0 (stl$ ?v1 )))):named a22 ))
(assert (! (= (trim$ eff$ rsa$ sa$ )(sdrop$ (minWait$ eff$ rsa$ sa$ )rsa$ )):named a23 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 State_rule_prod_stream$ ))(=> (and (= (shd$a ?v0 )(shd$a ?v1 ))(= (stl$a ?v0 )(stl$a ?v1 )))(= ?v0 ?v1 ))):named a25 ))
(assert (! (forall ((?v0 Rule_stream_rule_stream_bool_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(=> (and (fun_app$c (fun_app$g ?v0 ?v1 )?v2 )(forall ((?v3 Rule_stream$ )(?v4 Rule_stream$ ))(=> (fun_app$c (fun_app$g ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$c (fun_app$g ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a26 ))
(assert (! (forall ((?v0 State_rule_prod_stream_state_rule_prod_stream_bool_fun_fun$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_stream$ ))(=> (and (fun_app$e (fun_app$h ?v0 ?v1 )?v2 )(forall ((?v3 State_rule_prod_stream$ )(?v4 State_rule_prod_stream$ ))(=> (fun_app$e (fun_app$h ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(or (fun_app$e (fun_app$h ?v0 (stl$a ?v3 ))(stl$a ?v4 ))(= (stl$a ?v3 )(stl$a ?v4 )))))))(= ?v1 ?v2 ))):named a27 ))
(assert (! (forall ((?v0 Rule_stream_rule_stream_bool_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(=> (and (fun_app$c (fun_app$g ?v0 ?v1 )?v2 )(forall ((?v3 Rule_stream$ )(?v4 Rule_stream$ ))(=> (fun_app$c (fun_app$g ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(fun_app$c (fun_app$g ?v0 (stl$ ?v3 ))(stl$ ?v4 ))))))(= ?v1 ?v2 ))):named a28 ))
(assert (! (forall ((?v0 State_rule_prod_stream_state_rule_prod_stream_bool_fun_fun$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_stream$ ))(=> (and (fun_app$e (fun_app$h ?v0 ?v1 )?v2 )(forall ((?v3 State_rule_prod_stream$ )(?v4 State_rule_prod_stream$ ))(=> (fun_app$e (fun_app$h ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(fun_app$e (fun_app$h ?v0 (stl$a ?v3 ))(stl$a ?v4 ))))))(= ?v1 ?v2 ))):named a29 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$ ?v0 s$ )(fair$ rules$ ?v1 ))(wf$ eff$ rules$ (mkTree$ eff$ ?v1 ?v0 )))):named a30 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Nat$ ))(=> (fair$ rules$ ?v0 )(fair$ rules$ (sdrop$ ?v1 ?v0 )))):named a31 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$ ?v0 s$ )(fair$ rules$ ?v1 ))(enabled$ eff$ (shd$ (trim$ eff$ ?v1 ?v0 ))?v0 ))):named a32 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$ ?v0 s$ )(fair$ rules$ ?v1 ))(exists ((?v2 Nat$ ))(enabled$ eff$ (shd$ (sdrop$ ?v2 ?v1 ))?v0 )))):named a33 ))
(check-sat )
;(get-unsat-core )
