;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Rule$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort Rule_bool_fun$ 0 )
(declare-sort Rule_stream_bool_fun$ 0 )
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-sort Rule_list$ 0)
(declare-fun nil$ ()Rule_list$)
(declare-fun hd$ (Rule_list$)Rule$)
(declare-fun tl$ (Rule_list$)Rule_list$)
(declare-fun cons$ (Rule$ Rule_list$ )Rule_list$)
(declare-fun ev$ (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun uu$ (Rule$ )Rule_bool_fun$ )
(declare-fun alw$ (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun bot$ ()Rule_set$ )
(declare-fun fair$ (Rule_stream$ )Rule_stream_bool_fun$ )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun fenum$ (Rule_stream$ )Rule_stream$ )
(declare-fun holds$ (Rule_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun shift$ (Rule_list$ Rule_stream$ )Rule_stream$ )
(declare-fun member$ (Rule$ Rule_set$ )Bool )
(declare-fun collect$ (Rule_bool_fun$ )Rule_set$ )
(declare-fun fun_app$ (Rule_bool_fun$ Rule$ )Bool )
(declare-fun less_eq$ (Rule_set$ Rule_set$ )Bool )
(declare-fun fun_app$a (Rule_stream_bool_fun$ Rule_stream$ )Bool )
(declare-fun countable$ (Rule_set$ )Bool )
(assert (! (forall ((?v0 Rule$ )(?v1 Rule$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (and (less_eq$ (sset$ rules$ )(sset$ rules$ ))(forall ((?v0 Rule$ ))(=> (member$ ?v0 (sset$ rules$ ))(fun_app$a (alw$ (ev$ (holds$ (uu$ ?v0 ))))(fenum$ rules$ )))))):named a1 ))
(assert (! (= (sset$ (fenum$ rules$ ))(sset$ rules$ )):named a2 ))
(assert (! (forall ((?v0 Rule_stream$ ))(= (fun_app$a (fair$ rules$ )?v0 )(and (less_eq$ (sset$ ?v0 )(sset$ rules$ ))(forall ((?v1 Rule$ ))(=> (member$ ?v1 (sset$ rules$ ))(fun_app$a (alw$ (ev$ (holds$ (uu$ ?v1 ))))?v0 )))))):named a3 ))
(assert (! (forall ((?v0 Rule_stream$ ))(= (sset$ (fenum$ ?v0 ))(sset$ ?v0 ))):named a4 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ ))(= (fun_app$a (fair$ ?v0 )?v1 )(and (less_eq$ (sset$ ?v1 )(sset$ ?v0 ))(forall ((?v2 Rule$ ))(=> (member$ ?v2 (sset$ ?v0 ))(fun_app$a (alw$ (ev$ (holds$ (uu$ ?v2 ))))?v1 )))))):named a5 ))
(assert (! (forall ((?v0 Rule_bool_fun$ )(?v1 Rule_stream$ ))(= (fun_app$a (ev$ (holds$ ?v0 ))?v1 )(exists ((?v2 Rule$ ))(and (member$ ?v2 (sset$ ?v1 ))(fun_app$ ?v0 ?v2 ))))):named a6 ))
(assert (! (not (= (sset$ rules$ )bot$ )):named a7 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ ))(= (alw$ (alw$ ?v0 ))(alw$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ ))(= (ev$ (ev$ ?v0 ))(ev$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 Rule_set$ )(?v1 Rule_set$ ))(=> (forall ((?v2 Rule$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 )))(less_eq$ ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Rule_set$ )(?v1 Rule_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Rule_set$ ))(less_eq$ ?v0 ?v0 )):named a12 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_stream$ ))(=> (fun_app$a (ev$ (alw$ ?v0 ))?v1 )(fun_app$a (alw$ (ev$ ?v0 ))?v1 ))):named a13 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream_bool_fun$ )(?v3 Rule_stream_bool_fun$ ))(=> (and (fun_app$a (alw$ ?v0 )?v1 )(forall ((?v4 Rule_stream$ ))(=> (fun_app$a ?v0 ?v4 )(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (fun_app$a (ev$ ?v2 )?v1 )(fun_app$a (ev$ ?v3 )?v1 )))):named a14 ))
(assert (! (countable$ (sset$ rules$ )):named a15 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_stream$ )(?v2 Rule_list$ ))(=> (fun_app$a (alw$ ?v0 )?v1 )(fun_app$a (ev$ (alw$ ?v0 ))(shift$ ?v2 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Rule_bool_fun$ ))(= (= (collect$ ?v0 )bot$ )(forall ((?v1 Rule$ ))(not (fun_app$ ?v0 ?v1 ))))):named a17 ))
(check-sat )
;(get-unsat-core )
