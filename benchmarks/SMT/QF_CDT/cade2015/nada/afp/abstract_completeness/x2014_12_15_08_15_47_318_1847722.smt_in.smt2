;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort State_fset_option$ 0)
(declare-fun none$ ()State_fset_option$)
(declare-fun the$ (State_fset_option$)State_fset$)
(declare-fun some$ (State_fset$ )State_fset_option$)
(declare-fun r$ ()Rule$ )
(declare-fun s$ ()State$ )
(declare-fun uu$ (State_fset$ )State_fset_bool_fun$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun eps$ (State_fset_bool_fun$ )State_fset$ )
(declare-fun uua$ (State_fset$ )State_fset_bool_fun$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(assert (! (forall ((?v0 State_fset$ )(?v1 State_fset$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 State_fset$ )(?v1 State_fset$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(= ?v1 ?v0 )):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (fun_app$ (fun_app$a (fun_app$b eff$ r$ )s$ )(pickEff$ eff$ r$ s$ ))):named a2 ))
(assert (! (enabled$ eff$ r$ s$ ):named a3 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State$ ))(! (= (enabled$ ?v0 ?v1 ?v2 )(exists ((?v3 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )?v3 ))):pattern ((enabled$ ?v0 ?v1 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (pickEff$ eff$ ?v0 ?v1 )(ite (enabled$ eff$ ?v0 ?v1 )(eps$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 ))(the$ none$ ))):pattern ((pickEff$ eff$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State$ ))(! (= (pickEff$ ?v0 ?v1 ?v2 )(ite (enabled$ ?v0 ?v1 ?v2 )(eps$ (fun_app$a (fun_app$b ?v0 ?v1 )?v2 ))(the$ none$ ))):pattern ((pickEff$ ?v0 ?v1 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 State_fset$ ))(= (eps$ (uu$ ?v0 ))?v0 )):named a8 ))
(assert (! (forall ((?v0 State_fset$ ))(= (eps$ (uua$ ?v0 ))?v0 )):named a9 ))
(assert (! (forall ((?v0 State_fset_bool_fun$ )(?v1 State_fset$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v2 State_fset$ ))(=> (fun_app$ ?v0 ?v2 )(= ?v2 ?v1 ))))(= (eps$ ?v0 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 State_fset_option$ )(?v1 State_fset_option$ ))(=> (and (= (= ?v0 none$ )(= ?v1 none$ ))(=> (and (not (= ?v0 none$ ))(not (= ?v1 none$ )))(= (the$ ?v0 )(the$ ?v1 ))))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 State_fset_bool_fun$ ))(= (fun_app$ ?v0 (eps$ ?v0 ))(exists ((?v1 State_fset$ ))(fun_app$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 State_fset_bool_fun$ )(?v1 State_fset_bool_fun$ ))(=> (and (exists ((?v2 State_fset$ ))(fun_app$ ?v0 ?v2 ))(forall ((?v2 State_fset$ ))(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))))(fun_app$ ?v1 (eps$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 State_fset_bool_fun$ ))(=> (exists ((?v1 State_fset$ ))(fun_app$ ?v0 ?v1 ))(fun_app$ ?v0 (eps$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 State_fset_bool_fun$ )(?v1 State_fset$ ))(=> (and (exists ((?v2 State_fset$ ))(and (fun_app$ ?v0 ?v2 )(forall ((?v3 State_fset$ ))(=> (fun_app$ ?v0 ?v3 )(= ?v3 ?v2 )))))(fun_app$ ?v0 ?v1 ))(= (eps$ ?v0 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 State_fset_bool_fun$ )(?v1 State_fset$ )(?v2 State_fset_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v3 State_fset$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ ?v2 ?v3 ))))(fun_app$ ?v2 (eps$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 State_fset_bool_fun$ )(?v1 State_fset$ )(?v2 State_fset$ ))(=> (and (fun_app$ ?v0 ?v1 )(and (not (fun_app$ ?v0 ?v2 ))(= (eps$ ?v0 )?v2 )))(= (eps$ ?v0 )?v1 ))):named a17 ))
(check-sat )
;(get-unsat-core )
