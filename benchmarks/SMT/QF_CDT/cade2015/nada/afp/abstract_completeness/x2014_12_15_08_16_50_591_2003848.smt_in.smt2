;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_state_fun$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_rule_prod_state_fun$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_fun$ 0 )
(declare-sort State_state_rule_prod_tree_fun$ 0 )
(declare-sort State_state_fun_state_state_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_rule_prod_fun$ 0 )
(declare-sort Rule_stream_state_state_rule_prod_tree_fun_fun$ 0 )
(declare-sort State_state_rule_prod_tree_fun_state_state_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_fun_state_rule_prod_tree_state_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_rule_prod_fun_state_rule_prod_tree_state_fun_fun$ 0 )
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-fun s$ ()State_set$ )
(declare-fun id$ ()State_state_fun$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State$ )
(declare-fun sa$ ()State$ )
(declare-fun uu$ ()State_rule_prod_state_fun$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun id$a ()State_state_fun_state_state_fun_fun$ )
(declare-fun id$b ()State_rule_prod_tree_state_fun_state_rule_prod_tree_state_fun_fun$ )
(declare-fun rsa$ ()Rule_stream$ )
(declare-fun comp$ (State_rule_prod_tree_state_fun$ )State_state_rule_prod_tree_fun_state_state_fun_fun$ )
(declare-fun fair$ (Rule_stream$ Rule_stream$ )Bool )
(declare-fun root$ ()State_rule_prod_tree_state_rule_prod_fun$ )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun comp$a (State_rule_prod_state_fun$ )State_rule_prod_tree_state_rule_prod_fun_state_rule_prod_tree_state_fun_fun$ )
(declare-fun comp$b (State_state_fun$ )State_state_fun_state_state_fun_fun$ )
(declare-fun comp$c (State_state_fun$ )State_rule_prod_tree_state_fun_state_rule_prod_tree_state_fun_fun$ )
(declare-fun fenum$ (Rule_stream$ )Rule_stream$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_stream_state_state_rule_prod_tree_fun_fun$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (State_rule_prod_state_fun$ State_rule_prod$ )State$ )
(declare-fun member$a (Rule$ Rule_set$ )Bool )
(declare-fun fun_app$a (State_state_rule_prod_tree_fun_state_state_fun_fun$ State_state_rule_prod_tree_fun$ )State_state_fun$ )
(declare-fun fun_app$b (State_rule_prod_tree_state_rule_prod_fun_state_rule_prod_tree_state_fun_fun$ State_rule_prod_tree_state_rule_prod_fun$ )State_rule_prod_tree_state_fun$ )
(declare-fun fun_app$c (Rule_stream_state_state_rule_prod_tree_fun_fun$ Rule_stream$ )State_state_rule_prod_tree_fun$ )
(declare-fun fun_app$d (State_state_fun_state_state_fun_fun$ State_state_fun$ )State_state_fun$ )
(declare-fun fun_app$e (State_rule_prod_tree_state_fun_state_rule_prod_tree_state_fun_fun$ State_rule_prod_tree_state_fun$ )State_rule_prod_tree_state_fun$ )
(declare-fun fun_app$f (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$g (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$h (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun fun_app$i (State_state_fun$ State$ )State$ )
(declare-fun fun_app$j (State_rule_prod_tree_state_fun$ State_rule_prod_tree$ )State$ )
(declare-fun fun_app$k (State_state_rule_prod_tree_fun$ State$ )State_rule_prod_tree$ )
(declare-fun fun_app$l (State_rule_prod_tree_state_rule_prod_fun$ State_rule_prod_tree$ )State_rule_prod$ )
(assert (! (forall ((?v0 State_rule_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (fun_app$a (comp$ (fun_app$b (comp$a uu$ )root$ ))(fun_app$c (mkTree$ eff$ )(stl$ (trim$ eff$ rsa$ sa$ ))))id$ )):named a1 ))
(assert (! (member$ sa$ s$ ):named a2 ))
(assert (! (member$ s$a s$ ):named a3 ))
(assert (! (forall ((?v0 State_state_fun$ ))(= (fun_app$d (comp$b ?v0 )id$ )?v0 )):named a4 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_fun$ ))(= (fun_app$e (comp$c id$ )?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 State_state_fun$ ))(= (fun_app$d (comp$b id$ )?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_fun$ ))(= (fun_app$e (comp$c id$ )?v0 )?v0 )):named a7 ))
(assert (! (forall ((?v0 State_state_fun$ ))(= (fun_app$d (comp$b id$ )?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$f (fun_app$g (fun_app$h eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 State_state_fun$ ))(! (= (fun_app$d id$a ?v0 )?v0 ):pattern ((fun_app$d id$a ?v0 )))):named a10 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_fun$ ))(! (= (fun_app$e id$b ?v0 )?v0 ):pattern ((fun_app$e id$b ?v0 )))):named a11 ))
(assert (! (forall ((?v0 State$ ))(! (= (fun_app$i id$ ?v0 )?v0 ):pattern ((fun_app$i id$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_rule_prod_tree_state_fun$ )(?v2 State_rule_prod_tree$ ))(! (= (fun_app$j (fun_app$e (comp$c ?v0 )?v1 )?v2 )(fun_app$i ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$e (comp$c ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_state_fun$ )(?v2 State$ ))(! (= (fun_app$i (fun_app$d (comp$b ?v0 )?v1 )?v2 )(fun_app$i ?v0 (fun_app$i ?v1 ?v2 ))):pattern ((fun_app$i (fun_app$d (comp$b ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_fun$ )(?v1 State_state_rule_prod_tree_fun$ )(?v2 State$ ))(! (= (fun_app$i (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$k ?v1 ?v2 ))):pattern ((fun_app$i (fun_app$a (comp$ ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 State_rule_prod_state_fun$ )(?v1 State_rule_prod_tree_state_rule_prod_fun$ )(?v2 State_rule_prod_tree$ ))(! (= (fun_app$j (fun_app$b (comp$a ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$l ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$b (comp$a ?v0 )?v1 )?v2 )))):named a16 ))
(assert (! (= (comp$c id$ )id$b ):named a17 ))
(assert (! (= (comp$b id$ )id$a ):named a18 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_rule_prod_tree_state_fun$ )(?v2 State_rule_prod_tree_state_fun$ )(?v3 State_rule_prod_tree$ ))(=> (= (fun_app$e (comp$c ?v0 )?v1 )(fun_app$e (comp$c id$ )?v2 ))(= (fun_app$i ?v0 (fun_app$j ?v1 ?v3 ))(fun_app$j ?v2 ?v3 )))):named a19 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_state_fun$ )(?v2 State_state_fun$ )(?v3 State$ ))(=> (= (fun_app$d (comp$b ?v0 )?v1 )(fun_app$d (comp$b id$ )?v2 ))(= (fun_app$i ?v0 (fun_app$i ?v1 ?v3 ))(fun_app$i ?v2 ?v3 )))):named a20 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_fun$ )(?v1 State_state_rule_prod_tree_fun$ )(?v2 State_state_fun$ )(?v3 State$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$d (comp$b id$ )?v2 ))(= (fun_app$j ?v0 (fun_app$k ?v1 ?v3 ))(fun_app$i ?v2 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 State_rule_prod_state_fun$ )(?v1 State_rule_prod_tree_state_rule_prod_fun$ )(?v2 State_rule_prod_tree_state_fun$ )(?v3 State_rule_prod_tree$ ))(=> (= (fun_app$b (comp$a ?v0 )?v1 )(fun_app$e (comp$c id$ )?v2 ))(= (fun_app$ ?v0 (fun_app$l ?v1 ?v3 ))(fun_app$j ?v2 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_state_fun$ )(?v2 State$ ))(=> (= (fun_app$d (comp$b ?v0 )?v1 )id$ )(= (fun_app$i ?v0 (fun_app$i ?v1 ?v2 ))?v2 ))):named a23 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_fun$ )(?v1 State_state_rule_prod_tree_fun$ )(?v2 State$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )id$ )(= (fun_app$j ?v0 (fun_app$k ?v1 ?v2 ))?v2 ))):named a24 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (fun_app$l root$ (fun_app$k (fun_app$c (mkTree$ eff$ )?v0 )?v1 ))(pair$ ?v1 (shd$ (trim$ eff$ ?v0 ?v1 ))))):named a25 ))
(assert (! (member$a (snd$ (fun_app$l root$ (fun_app$k (fun_app$c (mkTree$ eff$ )rsa$ )sa$ )))(sset$ rules$ )):named a26 ))
(assert (! (forall ((?v0 State$ ))(=> (member$ ?v0 s$ )(exists ((?v1 Rule$ ))(and (member$a ?v1 (sset$ rules$ ))(exists ((?v2 State_fset$ ))(fun_app$f (fun_app$g (fun_app$h eff$ ?v1 )?v0 )?v2 )))))):named a27 ))
(assert (! (fair$ rules$ rsa$ ):named a28 ))
(assert (! (fair$ rules$ rs$ ):named a29 ))
(assert (! (= (sset$ (fenum$ rules$ ))(sset$ rules$ )):named a30 ))
(check-sat )
;(get-unsat-core )
