;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-fun r$ ()Rule$ )
(declare-fun s$ ()State$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State_set$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun pos$ (Rule_stream$ Rule$ )Nat$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun plus$ (Nat$ )Nat_nat_fun$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun zero$ ()Nat$ )
(declare-fun minus$ (Nat$ )Nat_nat_fun$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun minWait$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Nat$ )
(declare-fun fun_app$a (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$b (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$c (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(assert (! (not (less_eq$ (pos$ rs$ r$ )(fun_app$ (plus$ (pos$ (stl$ (trim$ eff$ rs$ s$ ))r$ ))(suc$ (minWait$ eff$ rs$ s$ ))))):named a0 ))
(assert (! (member$ s$ s$a ):named a1 ))
(assert (! (less$ (minWait$ eff$ rs$ s$ )(pos$ rs$ r$ )):named a2 ))
(assert (! (less_eq$ (pos$ (stl$ (trim$ eff$ rs$ s$ ))r$ )(fun_app$ (minus$ (pos$ rs$ r$ ))(suc$ (minWait$ eff$ rs$ s$ )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less_eq$ (fun_app$ (plus$ ?v0 )?v1 )(fun_app$ (plus$ ?v0 )?v2 ))(less_eq$ ?v1 ?v2 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (less_eq$ (suc$ ?v0 )(suc$ ?v1 ))(less_eq$ ?v0 ?v1 )):pattern ((less_eq$ (suc$ ?v0 )(suc$ ?v1 ))))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (plus$ ?v0 )(suc$ ?v1 ))(suc$ (fun_app$ (plus$ ?v0 )?v1 ))):pattern ((fun_app$ (plus$ ?v0 )(suc$ ?v1 ))))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less_eq$ (fun_app$ (plus$ ?v0 )?v1 )(fun_app$ (plus$ ?v2 )?v1 ))(less_eq$ ?v0 ?v2 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less_eq$ (fun_app$ (plus$ ?v0 )?v1 )(fun_app$ (plus$ ?v0 )?v2 ))(less_eq$ ?v1 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$a (fun_app$b (fun_app$c eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less_eq$ (fun_app$ ?v0 (suc$ ?v3 ))(fun_app$ ?v0 ?v3 )))(less_eq$ ?v1 ?v2 ))(less_eq$ (fun_app$ ?v0 ?v2 )(fun_app$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less_eq$ (fun_app$ ?v0 ?v3 )(fun_app$ ?v0 (suc$ ?v3 ))))(less_eq$ ?v1 ?v2 ))(less_eq$ (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 ?v2 )))):named a11 ))
(assert (! (= (fun_app$ (plus$ (fun_app$ (minus$ (pos$ rs$ r$ ))(suc$ (minWait$ eff$ rs$ s$ ))))(minWait$ eff$ rs$ s$ ))(fun_app$ (minus$ (pos$ rs$ r$ ))(suc$ zero$ ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$ (plus$ ?v0 )?v1 )(fun_app$ (plus$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$ (plus$ ?v0 )?v1 )(fun_app$ (plus$ ?v2 )?v1 ))(= ?v0 ?v2 ))):named a16 ))
(check-sat )
;(get-unsat-core )
