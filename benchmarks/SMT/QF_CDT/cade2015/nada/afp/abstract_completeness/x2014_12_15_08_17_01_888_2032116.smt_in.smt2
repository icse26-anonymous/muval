;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort State_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-fun r$ ()Rule$ )
(declare-fun s$ ()State$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State_set$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun pos$ (Rule_stream$ Rule$ )Nat$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun plus$ (Nat$ )Nat_nat_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun minus$ (Nat$ )Nat_nat_fun$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun minWait$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Nat$ )
(assert (! (not (= (fun_app$ (plus$ (fun_app$ (minus$ (pos$ rs$ r$ ))(suc$ (minWait$ eff$ rs$ s$ ))))(minWait$ eff$ rs$ s$ ))(fun_app$ (minus$ (pos$ rs$ r$ ))(suc$ zero$ )))):named a0 ))
(assert (! (less$ (minWait$ eff$ rs$ s$ )(pos$ rs$ r$ )):named a1 ))
(assert (! (member$ s$ s$a ):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$ (minus$ ?v0 )(fun_app$ (plus$ ?v0 )?v1 ))zero$ )):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (minus$ (fun_app$ (minus$ ?v0 )?v1 ))?v2 )(fun_app$ (minus$ ?v0 )(fun_app$ (plus$ ?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (minus$ (fun_app$ (minus$ (suc$ ?v0 ))?v1 ))(suc$ ?v2 ))(fun_app$ (minus$ (fun_app$ (minus$ ?v0 )?v1 ))?v2 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (minus$ (suc$ ?v0 ))(suc$ ?v1 ))(fun_app$ (minus$ ?v0 )?v1 )):pattern ((fun_app$ (minus$ (suc$ ?v0 ))(suc$ ?v1 ))))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (minus$ ?v0 )?v0 )zero$ ):pattern ((minus$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (minus$ zero$ )?v0 )zero$ ):pattern ((fun_app$ (minus$ zero$ )?v0 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (plus$ ?v0 )(suc$ ?v1 ))(suc$ (fun_app$ (plus$ ?v0 )?v1 ))):pattern ((fun_app$ (plus$ ?v0 )(suc$ ?v1 ))))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ (plus$ ?v0 )?v1 )zero$ )(and (= ?v0 zero$ )(= ?v1 zero$ )))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (plus$ ?v0 )zero$ )?v0 ):pattern ((plus$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (minus$ (fun_app$ (plus$ ?v0 )?v1 ))(fun_app$ (plus$ ?v2 )?v1 ))(fun_app$ (minus$ ?v0 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (minus$ (fun_app$ (plus$ ?v0 )?v1 ))(fun_app$ (plus$ ?v0 )?v2 ))(fun_app$ (minus$ ?v1 )?v2 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$ (plus$ ?v0 )?v1 )(fun_app$ (plus$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$ (plus$ ?v0 )?v1 )(fun_app$ (plus$ ?v2 )?v1 ))(= ?v0 ?v2 ))):named a15 ))
(check-sat )
;(get-unsat-core )
