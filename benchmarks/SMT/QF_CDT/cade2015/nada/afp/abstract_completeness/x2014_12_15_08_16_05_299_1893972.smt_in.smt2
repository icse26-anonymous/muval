;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_rule_fun$ 0 )
(declare-sort Rule_nat_fun$ 0 )
(declare-sort Rule_bool_fun$ 0 )
(declare-sort Rule_rule_fun$ 0 )
(declare-sort Nat_rule_list_fun$ 0 )
(declare-sort Rule_list_nat_fun$ 0 )
(declare-sort Rule_list_rule_fun$ 0 )
(declare-sort Rule_rule_list_fun$ 0 )
(declare-sort Nat_stream_bool_fun$ 0 )
(declare-sort Rule_stream_bool_fun$ 0 )
(declare-sort Rule_list_rule_list_fun$ 0 )
(declare-sort Rule_list_stream_bool_fun$ 0 )
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-sort Rule_list$ 0)
(declare-fun nil$ ()Rule_list$)
(declare-fun hd$ (Rule_list$)Rule$)
(declare-fun tl$ (Rule_list$)Rule_list$)
(declare-fun cons$ (Rule$ Rule_list$ )Rule_list$)
(declare-sort Rule_list_stream$ 0)
(declare-sort Nat_stream$ 0)
(declare-fun shd$a (Rule_list_stream$)Rule_list$)
(declare-fun stl$a (Rule_list_stream$)Rule_list_stream$)
(declare-fun sCons$a (Rule_list$ Rule_list_stream$ )Rule_list_stream$)
(declare-fun shd$b (Nat_stream$)Nat$)
(declare-fun stl$b (Nat_stream$)Nat_stream$)
(declare-fun sCons$b (Nat$ Nat_stream$ )Nat_stream$)
(declare-fun m$ ()Nat$ )
(declare-fun n$ ()Nat$ )
(declare-fun r$ ()Rule$ )
(declare-fun ev$ (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun na$ ()Nat$ )
(declare-fun uu$ ()Nat_rule_list_fun$ )
(declare-fun alw$ (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun ev$a (Rule_list_stream_bool_fun$ )Rule_list_stream_bool_fun$ )
(declare-fun ev$b (Nat_stream_bool_fun$ )Nat_stream_bool_fun$ )
(declare-fun one$ ()Nat$ )
(declare-fun rsa$ ()Rule_list$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun uua$ ()Rule_bool_fun$ )
(declare-fun uub$ (Nat_stream_bool_fun$ )Nat_stream_bool_fun$ )
(declare-fun uuc$ (Nat_stream_bool_fun$ )Nat_stream_bool_fun$ )
(declare-fun uud$ (Rule_list_stream_bool_fun$ )Rule_list_stream_bool_fun$ )
(declare-fun uue$ (Rule_list_stream_bool_fun$ )Rule_list_stream_bool_fun$ )
(declare-fun uuf$ (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun uug$ (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun uuh$ (Nat_stream_bool_fun$ )Nat_stream_bool_fun$ )
(declare-fun uui$ (Rule_list_stream_bool_fun$ )Rule_list_stream_bool_fun$ )
(declare-fun uuj$ (Rule_stream_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun alw$a (Rule_list_stream_bool_fun$ )Rule_list_stream_bool_fun$ )
(declare-fun alw$b (Nat_stream_bool_fun$ )Nat_stream_bool_fun$ )
(declare-fun fair$ (Rule_stream$ )Rule_stream_bool_fun$ )
(declare-fun flat$ (Rule_list_stream$ )Rule_stream$ )
(declare-fun less$ (Nat$ )Nat_bool_fun$ )
(declare-fun smap$ (Nat_rule_list_fun$ Nat_stream$ )Rule_list_stream$ )
(declare-fun snth$ (Rule_stream$ )Nat_rule_fun$ )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun fenum$ (Rule_stream$ )Rule_stream$ )
(declare-fun holds$ (Rule_bool_fun$ )Rule_stream_bool_fun$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun shift$ (Rule_list$ Rule_stream$ )Rule_stream$ )
(declare-fun smap$a (Rule_list_rule_fun$ Rule_list_stream$ )Rule_stream$ )
(declare-fun smap$b (Nat_rule_fun$ Nat_stream$ )Rule_stream$ )
(declare-fun smap$c (Rule_rule_list_fun$ Rule_stream$ )Rule_list_stream$ )
(declare-fun smap$d (Rule_list_rule_list_fun$ Rule_list_stream$ )Rule_list_stream$ )
(declare-fun smap$e (Rule_nat_fun$ Rule_stream$ )Nat_stream$ )
(declare-fun smap$f (Rule_list_nat_fun$ Rule_list_stream$ )Nat_stream$ )
(declare-fun smap$g (Nat_nat_fun$ Nat_stream$ )Nat_stream$ )
(declare-fun smap$h (Rule_rule_fun$ Rule_stream$ )Rule_stream$ )
(declare-fun stake$ (Nat$ Rule_stream$ )Rule_list$ )
(declare-fun member$ (Rule$ Rule_set$ )Bool )
(declare-fun fun_app$ (Nat_rule_list_fun$ Nat$ )Rule_list$ )
(declare-fun fun_app$a (Rule_bool_fun$ Rule$ )Bool )
(declare-fun fun_app$b (Rule_stream_bool_fun$ Rule_stream$ )Bool )
(declare-fun fun_app$c (Rule_list_stream_bool_fun$ Rule_list_stream$ )Bool )
(declare-fun fun_app$d (Nat_stream_bool_fun$ Nat_stream$ )Bool )
(declare-fun fun_app$e (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$f (Nat_rule_fun$ Nat$ )Rule$ )
(declare-fun fun_app$g (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun siterate$ (Nat_nat_fun$ Nat$ )Nat_stream$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(stake$ ?v0 rules$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Rule$ ))(! (= (fun_app$a uua$ ?v0 )(= r$ ?v0 )):pattern ((fun_app$a uua$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_stream$ ))(! (= (fun_app$b (uug$ ?v0 )?v1 )(not (fun_app$b (alw$ (uuf$ ?v0 ))?v1 ))):pattern ((fun_app$b (uug$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Rule_list_stream$ ))(! (= (fun_app$c (uue$ ?v0 )?v1 )(not (fun_app$c (alw$a (uud$ ?v0 ))?v1 ))):pattern ((fun_app$c (uue$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Nat_stream$ ))(! (= (fun_app$d (uuc$ ?v0 )?v1 )(not (fun_app$d (alw$b (uub$ ?v0 ))?v1 ))):pattern ((fun_app$d (uuc$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_stream$ ))(! (= (fun_app$b (uuj$ ?v0 )?v1 )(not (fun_app$b (ev$ (uuf$ ?v0 ))?v1 ))):pattern ((fun_app$b (uuj$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Rule_list_stream$ ))(! (= (fun_app$c (uui$ ?v0 )?v1 )(not (fun_app$c (ev$a (uud$ ?v0 ))?v1 ))):pattern ((fun_app$c (uui$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Nat_stream$ ))(! (= (fun_app$d (uuh$ ?v0 )?v1 )(not (fun_app$d (ev$b (uub$ ?v0 ))?v1 ))):pattern ((fun_app$d (uuh$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Rule_list_stream$ ))(! (= (fun_app$c (uud$ ?v0 )?v1 )(not (fun_app$c ?v0 ?v1 ))):pattern ((fun_app$c (uud$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Nat_stream$ ))(! (= (fun_app$d (uub$ ?v0 )?v1 )(not (fun_app$d ?v0 ?v1 ))):pattern ((fun_app$d (uub$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_stream$ ))(! (= (fun_app$b (uuf$ ?v0 )?v1 )(not (fun_app$b ?v0 ?v1 ))):pattern ((fun_app$b (uuf$ ?v0 )?v1 )))):named a10 ))
(assert (! (not (exists ((?v0 Rule_stream$ ))(and (= (shift$ rsa$ (flat$ (smap$ uu$ (siterate$ suc$ na$ ))))?v0 )(and (fun_app$b (ev$ (holds$ uua$ ))?v0 )(or (exists ((?v1 Nat$ )(?v2 Rule_list$ ))(and (= (stl$ ?v0 )(shift$ ?v2 (flat$ (smap$ uu$ (siterate$ suc$ ?v1 )))))(fun_app$e (less$ zero$ )?v1 )))(fun_app$b (alw$ (ev$ (holds$ uua$ )))(stl$ ?v0 ))))))):named a11 ))
(assert (! (fun_app$e (less$ zero$ )n$ ):named a12 ))
(assert (! (fun_app$e (less$ zero$ )na$ ):named a13 ))
(assert (! (member$ r$ (sset$ rules$ )):named a14 ))
(assert (! (forall ((?v0 Rule_stream$ ))(=> (fun_app$b (fair$ rules$ )?v0 )(fun_app$b (fair$ rules$ )(stl$ ?v0 )))):named a15 ))
(assert (! (= r$ (fun_app$f (snth$ rules$ )m$ )):named a16 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ )(?v1 Rule_list_stream$ ))(= (fun_app$c (ev$a (alw$a ?v0 ))(stl$a ?v1 ))(fun_app$c (ev$a (alw$a ?v0 ))?v1 ))):named a17 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ )(?v1 Nat_stream$ ))(= (fun_app$d (ev$b (alw$b ?v0 ))(stl$b ?v1 ))(fun_app$d (ev$b (alw$b ?v0 ))?v1 ))):named a18 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ )(?v1 Rule_stream$ ))(= (fun_app$b (ev$ (alw$ ?v0 ))(stl$ ?v1 ))(fun_app$b (ev$ (alw$ ?v0 ))?v1 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$e (less$ ?v0 )(fun_app$g suc$ zero$ ))(= ?v0 zero$ )):pattern ((less$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$e (less$ zero$ )(fun_app$g suc$ ?v0 ))):named a21 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ ))(= (uuc$ ?v0 )(ev$b ?v0 ))):named a22 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ ))(= (uue$ ?v0 )(ev$a ?v0 ))):named a23 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ ))(= (uug$ ?v0 )(ev$ ?v0 ))):named a24 ))
(assert (! (forall ((?v0 Nat_stream_bool_fun$ ))(= (uuh$ ?v0 )(alw$b ?v0 ))):named a25 ))
(assert (! (forall ((?v0 Rule_list_stream_bool_fun$ ))(= (uui$ ?v0 )(alw$a ?v0 ))):named a26 ))
(assert (! (forall ((?v0 Rule_stream_bool_fun$ ))(= (uuj$ ?v0 )(alw$ ?v0 ))):named a27 ))
(assert (! (forall ((?v0 Rule_list_rule_fun$ )(?v1 Rule_list_stream$ ))(= (stl$ (smap$a ?v0 ?v1 ))(smap$a ?v0 (stl$a ?v1 )))):named a28 ))
(assert (! (forall ((?v0 Nat_rule_fun$ )(?v1 Nat_stream$ ))(= (stl$ (smap$b ?v0 ?v1 ))(smap$b ?v0 (stl$b ?v1 )))):named a29 ))
(assert (! (forall ((?v0 Rule_rule_list_fun$ )(?v1 Rule_stream$ ))(= (stl$a (smap$c ?v0 ?v1 ))(smap$c ?v0 (stl$ ?v1 )))):named a30 ))
(assert (! (forall ((?v0 Rule_list_rule_list_fun$ )(?v1 Rule_list_stream$ ))(= (stl$a (smap$d ?v0 ?v1 ))(smap$d ?v0 (stl$a ?v1 )))):named a31 ))
(assert (! (forall ((?v0 Rule_nat_fun$ )(?v1 Rule_stream$ ))(= (stl$b (smap$e ?v0 ?v1 ))(smap$e ?v0 (stl$ ?v1 )))):named a32 ))
(assert (! (forall ((?v0 Rule_list_nat_fun$ )(?v1 Rule_list_stream$ ))(= (stl$b (smap$f ?v0 ?v1 ))(smap$f ?v0 (stl$a ?v1 )))):named a33 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_stream$ ))(= (stl$b (smap$g ?v0 ?v1 ))(smap$g ?v0 (stl$b ?v1 )))):named a34 ))
(assert (! (forall ((?v0 Rule_rule_fun$ )(?v1 Rule_stream$ ))(= (stl$ (smap$h ?v0 ?v1 ))(smap$h ?v0 (stl$ ?v1 )))):named a35 ))
(assert (! (forall ((?v0 Nat_rule_list_fun$ )(?v1 Nat_stream$ ))(= (stl$a (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$b ?v1 )))):named a36 ))
(assert (! (= (fenum$ rules$ )(flat$ (smap$ uu$ (siterate$ suc$ one$ )))):named a37 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$e (less$ (fun_app$g suc$ ?v0 ))(fun_app$g suc$ ?v1 ))(fun_app$e (less$ ?v0 )?v1 )):pattern ((fun_app$e (less$ (fun_app$g suc$ ?v0 ))(fun_app$g suc$ ?v1 ))))):named a38 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$e (less$ ?v0 )?v1 )(fun_app$e (less$ (fun_app$g suc$ ?v0 ))(fun_app$g suc$ ?v1 )))):named a39 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$e (less$ ?v0 )(fun_app$g suc$ ?v0 ))):named a40 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (= ?v0 zero$ ))(fun_app$e (less$ zero$ )?v0 ))):named a41 ))
(check-sat )
;(get-unsat-core )
