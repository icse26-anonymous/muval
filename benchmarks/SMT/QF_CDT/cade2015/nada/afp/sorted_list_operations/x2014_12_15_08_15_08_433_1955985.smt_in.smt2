;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun x1$ ()A$ )
(declare-fun x2$ ()A$ )
(declare-fun l1a$ ()A_list$ )
(declare-fun l2b$ ()A_list$ )
(declare-fun set$ (A_list$ )A_set$ )
(declare-fun less$ (A$ )A_bool_fun$ )
(declare-fun insert$ (A$ A_list$ )A_list$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun rotate$ (Nat$ A_list$ )A_list$ )
(declare-fun sorted$ (A_list$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun less_eq$ (A$ )A_bool_fun$ )
(declare-fun listMem$ (A$ A_list$ )Bool )
(declare-fun member$a (A_list$ )A_bool_fun$ )
(declare-fun rotate1$ (A_list$ )A_list$ )
(declare-fun distinct$ (A_list$ )Bool )
(declare-fun list_ex1$ (A_bool_fun$ A_list$ )Bool )
(declare-fun quicksort$ (A_list$ )A_list$ )
(declare-fun removeAll$ (A$ A_list$ )A_list$ )
(declare-fun mergesort_by_rel$ (A_a_bool_fun_fun$ A_list$ )A_list$ )
(assert (! (not (not (member$ x2$ (set$ l1a$ )))):named a0 ))
(assert (! (fun_app$ (less$ x2$ )x1$ ):named a1 ))
(assert (! (not (= x1$ x2$ )):named a2 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 (set$ l1a$ ))(fun_app$ (less_eq$ x1$ )?v0 ))):named a3 ))
(assert (! (not (fun_app$ (less$ x1$ )x2$ )):named a4 ))
(assert (! (not (member$ x1$ (set$ l1a$ ))):named a5 ))
(assert (! (not (member$ x2$ (set$ l2b$ ))):named a6 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 (set$ l2b$ ))(fun_app$ (less_eq$ x2$ )?v0 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(= (member$ ?v0 (set$ ?v1 ))(fun_app$ (member$a ?v1 )?v0 ))):named a8 ))
(assert (! (and (distinct$ l1a$ )(sorted$ l1a$ )):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (=> (member$ ?v0 (set$ ?v1 ))(= (insert$ ?v0 ?v1 )?v1 )):pattern ((insert$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_list$ ))(= (list_ex1$ ?v0 ?v1 )(exists ((?v2 A$ ))(and (and (member$ ?v2 (set$ ?v1 ))(fun_app$ ?v0 ?v2 ))(forall ((?v3 A$ ))(=> (and (member$ ?v3 (set$ ?v1 ))(fun_app$ ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a11 ))
(assert (! (forall ((?v0 A_list$ ))(= (set$ (rotate1$ ?v0 ))(set$ ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_list$ ))(= (set$ (quicksort$ ?v0 ))(set$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (listMem$ ?v0 ?v1 )(member$ ?v0 (set$ ?v1 ))):pattern ((listMem$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (=> (not (member$ ?v0 (set$ ?v1 )))(= (removeAll$ ?v0 ?v1 )?v1 )):pattern ((removeAll$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ ))(= (set$ (mergesort_by_rel$ ?v0 ?v1 ))(set$ ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (set$ (rotate$ ?v0 ?v1 ))(set$ ?v1 ))):named a17 ))
(check-sat )
;(get-unsat-core )
