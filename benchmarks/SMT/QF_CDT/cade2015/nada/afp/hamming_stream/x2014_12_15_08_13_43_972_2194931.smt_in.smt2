;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_llist$ 0)
(declare-fun lNil$ ()Nat_llist$)
(declare-fun lhd$ (Nat_llist$)Nat$)
(declare-fun ltl$ (Nat_llist$)Nat_llist$)
(declare-fun lCons$ (Nat$ Nat_llist$ )Nat_llist$)
(declare-fun n$ ()Nat$ )
(declare-fun na$ ()Nat$ )
(declare-fun one$ ()Nat$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun lset$ (Nat_llist$ )Nat_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun of_nat$ (Nat$ )Nat$ )
(declare-fun smooth$ (Nat$ )Bool )
(declare-fun hamming$ ()Nat_llist$ )
(declare-fun of_bool$ (Bool )Nat$ )
(assert (! (not (= na$ one$ )):named a0 ))
(assert (! (smooth$ n$ ):named a1 ))
(assert (! (not (= na$ zero$ )):named a2 ))
(assert (! (not (less$ one$ na$ )):named a3 ))
(assert (! (smooth$ na$ ):named a4 ))
(assert (! (= one$ one$ ):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(= (= one$ ?v0 )(= ?v0 one$ ))):named a6 ))
(assert (! (not (= zero$ one$ )):named a7 ))
(assert (! (not (less$ one$ one$ )):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(= (less$ ?v0 one$ )(= ?v0 zero$ ))):named a9 ))
(assert (! (= (of_nat$ one$ )one$ ):named a10 ))
(assert (! (= (of_bool$ true )one$ ):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (less$ ?v0 na$ )(smooth$ ?v0 ))(member$ ?v0 (lset$ hamming$ )))):named a12 ))
(assert (! (less$ zero$ one$ ):named a13 ))
(assert (! (not (less$ one$ zero$ )):named a14 ))
(check-sat )
;(get-unsat-core )
