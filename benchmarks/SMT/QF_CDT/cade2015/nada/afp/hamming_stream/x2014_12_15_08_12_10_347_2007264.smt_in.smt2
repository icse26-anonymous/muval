;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun uu$ (A$ )A_bool_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()A_llist$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lmerge$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )A_llist$ )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun lessThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun greaterThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (lfinite$ (lmerge$ less$ xsa$ ysa$ ))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a2 ))
(assert (! (not (lnull$ xsa$ )):named a3 ))
(assert (! (lfinite$ xsa$ ):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a6 ))
(assert (! (lfinite$ ysa$ ):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(lfinite$ (lmerge$ less$ (ltl$ xsa$ )?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lfinite$ (lmerge$ less$ ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (or (lnull$ ?v0 )(lnull$ ?v1 ))(lnull$ (lmerge$ less$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(not (lnull$ (lmerge$ less$ ?v0 ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 A$ ))(= (lessThan$ less$ ?v0 )(collect$ (uu$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A$ ))(! (= (greaterThan$ less$ ?v0 )(collect$ (fun_app$a less$ ?v0 ))):pattern ((greaterThan$ less$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (lfinite$ (lmerge$ ?v0 ?v1 ?v2 ))(or (lfinite$ ?v1 )(lfinite$ ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (lmerge$ less$ ?v0 ?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (lmerge$ less$ ?v0 ?v1 ))(or (lnull$ ?v0 )(lnull$ ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (lmerge$ less$ ?v0 ?v1 )lNil$ )(or (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v2 ?v3 ))(lprefix$ (lmerge$ less$ ?v0 ?v2 )(lmerge$ less$ ?v1 ?v3 )))):named a18 ))
(check-sat )
;(get-unsat-core )
