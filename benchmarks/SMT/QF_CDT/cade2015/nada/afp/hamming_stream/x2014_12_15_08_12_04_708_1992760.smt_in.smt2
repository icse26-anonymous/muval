;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_set_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun uu$ ()A_llist_a_llist_fun$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun uua$ (A$ )A_bool_fun$ )
(declare-fun uub$ (A_llist_a_llist_a_llist_fun_fun$ )A_llist_a_llist_a_llist_fun_fun$ )
(declare-fun uuc$ (A_llist_a_llist_a_llist_fun_fun$ )A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uud$ (A_llist_a_llist_fun$ )A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uue$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun uuf$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun uug$ (A_llist_a_llist_fun$ )A_llist_a_llist_a_llist_fun_fun$ )
(declare-fun uuh$ (A_llist_a_llist_fun$ )A_llist_a_llist_a_llist_fun_fun$ )
(declare-fun lSup$ ()A_llist_set_a_llist_fun$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun mcont$ (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun lmerge$ (A_a_bool_fun_fun$ )A_llist_a_llist_a_llist_fun_fun$ )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_a_llist_fun_fun$ A_llist$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$d (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$e (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$f (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun lessThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun monotone$ (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun lexordp_eq$ (A_a_bool_fun_fun$ A_list$ A_list$ )Bool )
(declare-fun greaterThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$ (fun_app$a (lmerge$ less$ )?v0 )ys$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$ (uuf$ ?v0 )?v1 )(fun_app$ (fun_app$a (lmerge$ less$ )?v1 )?v0 )):pattern ((fun_app$ (uuf$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$b (uua$ ?v0 )?v1 )(fun_app$b (fun_app$c less$ ?v1 )?v0 )):pattern ((fun_app$b (uua$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$a (uuh$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a (lmerge$ less$ )(fun_app$ ?v0 ?v2 ))?v1 )):pattern ((fun_app$ (fun_app$a (uuh$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$a (uug$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a (lmerge$ less$ )?v1 )(fun_app$ ?v0 ?v2 ))):pattern ((fun_app$ (fun_app$a (uug$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_llist_a_llist_a_llist_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$d (uuc$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$d (uuc$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_llist_a_llist_a_llist_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$a (uub$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$a (uub$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$d (uud$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$d (uud$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$ (uue$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (uue$ ?v0 )?v1 )))):named a8 ))
(assert (! (not (mcont$ lSup$ lprefix$ lSup$ lprefix$ uu$ )):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$b (fun_app$c less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$b (fun_app$c less$ ?v0 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$b (fun_app$c less$ ?v1 )?v2 ))(fun_app$b (fun_app$c less$ ?v0 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v2 )?v3 ))(fun_app$e (fun_app$f lprefix$ (fun_app$ (fun_app$a (lmerge$ less$ )?v0 )?v2 ))(fun_app$ (fun_app$a (lmerge$ less$ )?v1 )?v3 )))):named a12 ))
(assert (! (forall ((?v0 A$ ))(= (lessThan$ less$ ?v0 )(collect$ (uua$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A$ ))(! (= (greaterThan$ less$ ?v0 )(collect$ (fun_app$c less$ ?v0 ))):pattern ((greaterThan$ less$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ )(?v4 A_a_bool_fun_fun$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v2 )?v3 ))(fun_app$e (fun_app$f lprefix$ (fun_app$ (fun_app$a (lmerge$ ?v4 )?v0 )?v2 ))(fun_app$ (fun_app$a (lmerge$ ?v4 )?v1 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_a_llist_fun_fun$ )(?v3 A_llist_set_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ )(?v5 A_llist_a_llist_fun$ ))(=> (and (forall ((?v6 A_llist$ ))(mcont$ ?v0 ?v1 lSup$ lprefix$ (fun_app$a ?v2 ?v6 )))(and (forall ((?v6 A_llist$ ))(mcont$ ?v3 ?v4 lSup$ lprefix$ (fun_app$a (uub$ ?v2 )?v6 )))(mcont$ ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$ ?v3 ?v4 lSup$ lprefix$ (fun_app$d (uuc$ ?v2 )?v5 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist_set_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ )(?v5 A_llist_a_llist_fun$ ))(=> (and (mcont$ ?v0 ?v1 lSup$ lprefix$ ?v2 )(mcont$ ?v3 ?v4 ?v0 ?v1 ?v5 ))(mcont$ ?v3 ?v4 lSup$ lprefix$ (fun_app$d (uud$ ?v2 )?v5 )))):named a17 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist$ ))(mcont$ ?v0 ?v1 lSup$ lprefix$ (uue$ ?v2 ))):named a18 ))
(assert (! (forall ((?v0 A_llist$ ))(monotone$ lprefix$ lprefix$ (fun_app$a (lmerge$ less$ )?v0 ))):named a19 ))
(assert (! (forall ((?v0 A_llist$ ))(monotone$ lprefix$ lprefix$ (uuf$ ?v0 ))):named a20 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(=> (monotone$ ?v0 lprefix$ ?v1 )(monotone$ ?v0 lprefix$ (fun_app$a (uug$ ?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(=> (monotone$ ?v0 lprefix$ ?v1 )(monotone$ ?v0 lprefix$ (fun_app$a (uuh$ ?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$e (fun_app$f lprefix$ ?v0 )?v0 )):named a23 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$e (fun_app$f lprefix$ ?v0 )?v0 )):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (fun_app$ (fun_app$a (lmerge$ less$ )?v0 )?v1 )lNil$ )(or (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a25 ))
(assert (! (forall ((?v0 A_list$ ))(lexordp_eq$ less$ ?v0 ?v0 )):named a26 ))
(check-sat )
;(get-unsat-core )
