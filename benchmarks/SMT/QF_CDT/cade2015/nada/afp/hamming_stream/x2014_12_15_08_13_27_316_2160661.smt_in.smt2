;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort Nat_llist$ 0)
(declare-fun lNil$ ()Nat_llist$)
(declare-fun lhd$ (Nat_llist$)Nat$)
(declare-fun ltl$ (Nat_llist$)Nat_llist$)
(declare-fun lCons$ (Nat$ Nat_llist$ )Nat_llist$)
(declare-sort Num$ 0)
(declare-fun one$ ()Num$)
(declare-fun select$ (Num$)Num$)
(declare-fun bit0$ (Num$ )Num$)
(declare-fun selecta$ (Num$)Num$)
(declare-fun bit1$ (Num$ )Num$)
(declare-fun n$ ()Nat$ )
(declare-fun inf$ (Enat$ Enat$ )Enat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lmap$ (Nat_nat_fun$ Nat_llist$ )Nat_llist$ )
(declare-fun times$ (Nat$ )Nat_nat_fun$ )
(declare-fun lmerge$ (Nat_llist$ Nat_llist$ )Nat_llist$ )
(declare-fun times$a (Num$ Num$ )Num$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun hamming$ ()Nat_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun lfinite$ (Nat_llist$ )Bool )
(declare-fun llength$ (Nat_llist$ )Enat$ )
(declare-fun numeral$ (Num$ )Nat$ )
(declare-fun less_eq$a (Nat$ Nat$ )Bool )
(declare-fun less_eq$b (Num$ Num$ )Bool )
(assert (! (not (less_eq$ (llength$ hamming$ )(llength$ (lmerge$ (lmap$ (times$ (numeral$ (bit0$ one$ )))hamming$ )(lmerge$ (lmap$ (times$ (numeral$ (bit1$ one$ )))hamming$ )(lmap$ (times$ (numeral$ (bit1$ (bit0$ one$ ))))hamming$ )))))):named a0 ))
(assert (! (less_eq$ (llength$ hamming$ )(llength$ (lmerge$ (lmap$ (times$ (numeral$ (bit1$ one$ )))hamming$ )(lmap$ (times$ (numeral$ (bit1$ (bit0$ one$ ))))hamming$ )))):named a1 ))
(assert (! (less_eq$ (inf$ (llength$ (lmap$ (times$ (numeral$ (bit0$ one$ )))hamming$ ))(llength$ (lmerge$ (lmap$ (times$ (numeral$ (bit1$ one$ )))hamming$ )(lmap$ (times$ (numeral$ (bit1$ (bit0$ one$ ))))hamming$ ))))(llength$ (lmerge$ (lmap$ (times$ (numeral$ (bit0$ one$ )))hamming$ )(lmerge$ (lmap$ (times$ (numeral$ (bit1$ one$ )))hamming$ )(lmap$ (times$ (numeral$ (bit1$ (bit0$ one$ ))))hamming$ ))))):named a2 ))
(assert (! (lfinite$ hamming$ ):named a3 ))
(assert (! (less_eq$ (inf$ (llength$ (lmap$ (times$ (numeral$ (bit1$ one$ )))hamming$ ))(llength$ (lmap$ (times$ (numeral$ (bit1$ (bit0$ one$ ))))hamming$ )))(llength$ (lmerge$ (lmap$ (times$ (numeral$ (bit1$ one$ )))hamming$ )(lmap$ (times$ (numeral$ (bit1$ (bit0$ one$ ))))hamming$ )))):named a4 ))
(assert (! (= (llength$ hamming$ )(enat$ n$ )):named a5 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$ ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit1$ ?v0 )one$ )false )):named a7 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit1$ ?v0 ))false )):named a8 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit1$ ?v1 ))false )):named a9 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit1$ ?v0 )(bit0$ ?v1 ))false )):named a10 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit0$ ?v0 )one$ )false )):named a11 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit0$ ?v0 ))false )):named a12 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ )(?v2 Nat$ ))(= (fun_app$ (times$ (numeral$ ?v0 ))(fun_app$ (times$ (numeral$ ?v1 ))?v2 ))(fun_app$ (times$ (numeral$ (times$a ?v0 ?v1 )))?v2 ))):named a13 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (fun_app$ (times$ (numeral$ ?v0 ))(numeral$ ?v1 ))(numeral$ (times$a ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (less_eq$a (numeral$ ?v0 )(numeral$ ?v1 ))(less_eq$b ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(less_eq$ (inf$ (llength$ ?v0 )(llength$ ?v1 ))(llength$ (lmerge$ ?v0 ?v1 )))):named a16 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= (llength$ hamming$ )(enat$ ?v0 ))false ))false ):named a17 ))
(check-sat )
;(get-unsat-core )
