;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun x$ ()A$ )
(declare-fun y$ ()A$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()A_llist$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lmerge$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )A_llist$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun less_eq$ (A$ A$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(assert (! (not (member$ x$ (lset$ (lmerge$ less$ xsa$ (lCons$ x$ ysa$ ))))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (=> (less_eq$ ?v0 ?v1 )false )(=> (less_eq$ ?v1 ?v0 )false ))false )):named a2 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ ))(=> (and (forall ((?v3 A$ )(?v4 A$ ))(=> (less_eq$ ?v3 ?v4 )(fun_app$ (fun_app$a ?v0 ?v3 )?v4 )))(forall ((?v3 A$ )(?v4 A$ ))(=> (fun_app$ (fun_app$a ?v0 ?v4 )?v3 )(fun_app$ (fun_app$a ?v0 ?v3 )?v4 ))))(fun_app$ (fun_app$a ?v0 ?v1 )?v2 ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(less_eq$ ?v0 ?v2 ))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (= ?v0 ?v1 )(less_eq$ ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (less_eq$ ?v0 ?v1 )(= ?v1 ?v2 ))(less_eq$ ?v0 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v1 ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(less_eq$ ?v0 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(less_eq$ ?v0 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v2 ?v0 ))(less_eq$ ?v2 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (less_eq$ ?v0 ?v1 )(= (less_eq$ ?v1 ?v0 )(= ?v1 ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(or (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))):named a14 ))
(assert (! (less_eq$ x$ y$ ):named a15 ))
(assert (! (member$ y$ (lset$ xsa$ )):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (fun_app$ (fun_app$a less$ ?v0 )?v1 ))(or (fun_app$ (fun_app$a less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
