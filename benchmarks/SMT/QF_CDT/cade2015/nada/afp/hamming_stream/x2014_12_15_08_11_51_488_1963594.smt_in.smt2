;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_prod_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_prod_a_llist_a_llist_prod_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_llist_a_llist_prod$ 0)
(declare-sort A_list$ 0)
(declare-fun fst$ (A_llist_a_llist_prod$)A_llist$)
(declare-fun snd$ (A_llist_a_llist_prod$)A_llist$)
(declare-fun pair$ (A_llist$ A_llist$ )A_llist_a_llist_prod$)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lmerge$ (A_a_bool_fun_fun$ )A_llist_a_llist_a_llist_fun_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lexordp$ (A_a_bool_fun_fun$ A_list$ A_list$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$e (A_llist_a_llist_a_llist_fun_fun$ A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lessThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun monotone$ (A_llist_a_llist_prod_a_llist_a_llist_prod_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_prod_a_llist_fun$ )Bool )
(declare-fun rel_prod$ (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ )A_llist_a_llist_prod_a_llist_a_llist_prod_bool_fun_fun$ )
(declare-fun case_prod$ (A_llist_a_llist_a_llist_fun_fun$ )A_llist_a_llist_prod_a_llist_fun$ )
(declare-fun lexordp_eq$ (A_a_bool_fun_fun$ A_list$ A_list$ )Bool )
(declare-fun greaterThanLessThan$ (A_a_bool_fun_fun$ A$ A$ )A_set$ )
(assert (! (not (monotone$ (rel_prod$ lprefix$ lprefix$ )lprefix$ (case_prod$ (lmerge$ less$ )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v2 )?v3 ))(fun_app$b (fun_app$c lprefix$ (fun_app$d (fun_app$e (lmerge$ less$ )?v0 )?v2 ))(fun_app$d (fun_app$e (lmerge$ less$ )?v1 )?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ )(?v4 A_a_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v2 )?v3 ))(fun_app$b (fun_app$c lprefix$ (fun_app$d (fun_app$e (lmerge$ ?v4 )?v0 )?v2 ))(fun_app$d (fun_app$e (lmerge$ ?v4 )?v1 )?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (fun_app$d (fun_app$e (lmerge$ less$ )?v0 )?v1 )lNil$ )(or (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(lexordp_eq$ less$ ?v0 ?v0 )):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$d (fun_app$e (lmerge$ less$ )(lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(ite (fun_app$ (fun_app$a less$ ?v0 )?v2 )(lCons$ ?v0 (fun_app$d (fun_app$e (lmerge$ less$ )?v1 )(lCons$ ?v2 ?v3 )))(ite (fun_app$ (fun_app$a less$ ?v2 )?v0 )(lCons$ ?v2 (fun_app$d (fun_app$e (lmerge$ less$ )(lCons$ ?v0 ?v1 ))?v3 ))(lCons$ ?v2 (fun_app$d (fun_app$e (lmerge$ less$ )?v1 )?v3 ))))):pattern ((fun_app$d (fun_app$e (lmerge$ less$ )(lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (or (lnull$ ?v0 )(lnull$ ?v1 ))(lnull$ (fun_app$d (fun_app$e (lmerge$ less$ )?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(not (lnull$ (fun_app$d (fun_app$e (lmerge$ less$ )?v0 )?v1 ))))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (fun_app$d (fun_app$e (lmerge$ less$ )?v1 )?v2 )))(or (member$ ?v0 (lset$ ?v1 ))(member$ ?v0 (lset$ ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lfinite$ (fun_app$d (fun_app$e (lmerge$ less$ )?v0 )?v1 ))(or (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (member$ ?v0 (greaterThanLessThan$ less$ ?v1 ?v2 ))(and (fun_app$ (fun_app$a less$ ?v1 )?v0 )(fun_app$ (fun_app$a less$ ?v0 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_list$ ))(=> (forall ((?v1 A$ ))(not (fun_app$ (fun_app$a less$ ?v1 )?v1 )))(not (lexordp$ less$ ?v0 ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (lessThan$ less$ ?v1 ))(fun_app$ (fun_app$a less$ ?v0 )?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a17 ))
(check-sat )
;(get-unsat-core )
