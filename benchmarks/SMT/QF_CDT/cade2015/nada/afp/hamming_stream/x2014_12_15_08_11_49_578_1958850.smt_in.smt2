;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_set_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_prod_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_prod_a_llist_fun_set_a_llist_a_llist_prod_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_llist_a_llist_prod$ 0)
(declare-fun fst$ (A_llist_a_llist_prod$)A_llist$)
(declare-fun snd$ (A_llist_a_llist_prod$)A_llist$)
(declare-fun pair$ (A_llist$ A_llist$ )A_llist_a_llist_prod$)
(declare-fun f$ ()A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$ )
(declare-fun xsb$ ()A_llist$ )
(declare-fun ysa$ ()A_llist$ )
(declare-fun fixp$ (A_llist_a_llist_prod_a_llist_fun_set_a_llist_a_llist_prod_a_llist_fun_fun$ A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$ A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$ )A_llist_a_llist_prod_a_llist_fun$ )
(declare-fun lSup$ ()A_llist_set_a_llist_fun$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun curry$ (A_llist_a_llist_prod_a_llist_fun$ A_llist$ A_llist$ )A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lmerge$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun fun_lub$ (A_llist_set_a_llist_fun$ )A_llist_a_llist_prod_a_llist_fun_set_a_llist_a_llist_prod_a_llist_fun_fun$ )
(declare-fun fun_ord$ (A_llist_a_llist_bool_fun_fun$ )A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(assert (! (not (and (= (lnull$ (lmerge$ less$ xsb$ ysa$ ))(lnull$ (curry$ (fixp$ (fun_lub$ lSup$ )(fun_ord$ lprefix$ )f$ )xsb$ ysa$ )))(=> (and (not (lnull$ (lmerge$ less$ xsb$ ysa$ )))(not (lnull$ (curry$ (fixp$ (fun_lub$ lSup$ )(fun_ord$ lprefix$ )f$ )xsb$ ysa$ ))))(and (= (lhd$ (lmerge$ less$ xsb$ ysa$ ))(lhd$ (curry$ (fixp$ (fun_lub$ lSup$ )(fun_ord$ lprefix$ )f$ )xsb$ ysa$ )))(exists ((?v0 A_llist$ )(?v1 A_llist$ ))(and (= (ltl$ (lmerge$ less$ xsb$ ysa$ ))(lmerge$ less$ ?v0 ?v1 ))(= (ltl$ (curry$ (fixp$ (fun_lub$ lSup$ )(fun_ord$ lprefix$ )f$ )xsb$ ysa$ ))(curry$ (fixp$ (fun_lub$ lSup$ )(fun_ord$ lprefix$ )f$ )?v0 ?v1 )))))))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less$ ?v1 )?v2 ))(fun_app$ (fun_app$a less$ ?v0 )?v2 ))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (or (lnull$ ?v0 )(lnull$ ?v1 ))(lnull$ (lmerge$ less$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(not (lnull$ (lmerge$ less$ ?v0 ?v1 ))))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v2 )?v3 ))(fun_app$b (fun_app$c lprefix$ (lmerge$ less$ ?v0 ?v2 ))(lmerge$ less$ ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(= (lhd$ (lmerge$ less$ ?v0 ?v1 ))(ite (fun_app$ (fun_app$a less$ (lhd$ ?v0 ))(lhd$ ?v1 ))(lhd$ ?v0 )(lhd$ ?v1 ))))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(= (ltl$ (lmerge$ less$ ?v0 ?v1 ))(ite (fun_app$ (fun_app$a less$ (lhd$ ?v0 ))(lhd$ ?v1 ))(lmerge$ less$ (ltl$ ?v0 )?v1 )(ite (fun_app$ (fun_app$a less$ (lhd$ ?v1 ))(lhd$ ?v0 ))(lmerge$ less$ ?v0 (ltl$ ?v1 ))(lmerge$ less$ (ltl$ ?v0 )(ltl$ ?v1 ))))))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (lmerge$ less$ ?v0 ?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (lmerge$ less$ ?v0 ?v1 ))(or (lnull$ ?v0 )(lnull$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (not (lnull$ (lmerge$ ?v0 ?v1 ?v2 )))(and (not (lnull$ ?v1 ))(not (lnull$ ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lnull$ (lmerge$ ?v0 ?v1 ?v2 ))(or (lnull$ ?v1 )(lnull$ ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (or (lnull$ ?v0 )(lnull$ ?v1 ))(lnull$ (lmerge$ ?v2 ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ )(?v4 A_a_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v2 )?v3 ))(fun_app$b (fun_app$c lprefix$ (lmerge$ ?v4 ?v0 ?v2 ))(lmerge$ ?v4 ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(= (lhd$ (lmerge$ ?v2 ?v0 ?v1 ))(ite (fun_app$ (fun_app$a ?v2 (lhd$ ?v0 ))(lhd$ ?v1 ))(lhd$ ?v0 )(lhd$ ?v1 ))))):named a16 ))
(check-sat )
;(get-unsat-core )
