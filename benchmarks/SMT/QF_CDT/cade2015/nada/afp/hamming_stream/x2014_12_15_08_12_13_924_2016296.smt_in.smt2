;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun inf$ (Enat$ )Enat_enat_fun$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun lmerge$ (A_a_bool_fun_fun$ A_llist$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(assert (! (not (less_eq$ (fun_app$ (inf$ (llength$ xs$ ))(llength$ ys$ ))(llength$ (fun_app$a (lmerge$ less$ xs$ )ys$ )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$b (fun_app$c less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$b (fun_app$c less$ ?v0 )?v2 ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$b (fun_app$c less$ ?v1 )?v2 ))(fun_app$b (fun_app$c less$ ?v0 )?v2 ))):named a2 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less_eq$ ?v0 (fun_app$ (inf$ ?v1 )?v2 ))(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v0 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less_eq$ ?v0 (fun_app$ (inf$ ?v1 )?v2 ))(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v0 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (fun_app$ (inf$ (fun_app$ (inf$ ?v0 )?v1 ))?v1 )(fun_app$ (inf$ ?v0 )?v1 ))):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (fun_app$ (inf$ (fun_app$ (inf$ ?v0 )?v1 ))?v1 )(fun_app$ (inf$ ?v0 )?v1 ))):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (fun_app$ (inf$ ?v0 )(fun_app$ (inf$ ?v0 )?v1 ))(fun_app$ (inf$ ?v0 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (fun_app$ (inf$ ?v0 )(fun_app$ (inf$ ?v0 )?v1 ))(fun_app$ (inf$ ?v0 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (inf$ ?v0 )?v0 )?v0 ):pattern ((inf$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (inf$ ?v0 )?v0 )?v0 ):pattern ((inf$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ ))(less_eq$ ?v0 ?v0 )):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (fun_app$a (lmerge$ less$ ?v0 )?v1 )lNil$ )(or (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v2 ?v3 ))(lprefix$ (fun_app$a (lmerge$ less$ ?v0 )?v2 )(fun_app$a (lmerge$ less$ ?v1 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (lmerge$ less$ lNil$ )?v0 )lNil$ ):pattern ((fun_app$a (lmerge$ less$ lNil$ )?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (lmerge$ less$ ?v0 )lNil$ )lNil$ ):pattern ((lmerge$ less$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ )(?v4 A_a_bool_fun_fun$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v2 ?v3 ))(lprefix$ (fun_app$a (lmerge$ ?v4 ?v0 )?v2 )(fun_app$a (lmerge$ ?v4 ?v1 )?v3 )))):named a16 ))
(check-sat )
;(get-unsat-core )
