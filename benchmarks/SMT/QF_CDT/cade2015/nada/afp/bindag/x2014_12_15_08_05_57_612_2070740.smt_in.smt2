;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Ref$ 0 )
(declare-sort Ref_set$ 0 )
(declare-sort Ref_ref_fun$ 0 )
(declare-sort Dag$ 0)
(declare-fun tip$ ()Dag$)
(declare-fun select$ (Dag$)Dag$)
(declare-fun selecta$ (Dag$)Ref$)
(declare-fun selectb$ (Dag$)Dag$)
(declare-fun node$ (Dag$ Ref$ Dag$ )Dag$)
(declare-fun l$ ()Ref_ref_fun$ )
(declare-fun p$ ()Ref$ )
(declare-fun r$ ()Ref_ref_fun$ )
(declare-fun t$ ()Dag$ )
(declare-fun lt$ ()Dag$ )
(declare-fun rt$ ()Dag$ )
(declare-fun dag$ (Ref$ Ref_ref_fun$ Ref_ref_fun$ Dag$ )Bool )
(declare-fun null$ ()Ref$ )
(declare-fun member$ (Ref$ Ref_set$ )Bool )
(declare-fun set_of$ (Dag$ )Ref_set$ )
(declare-fun subdag$ (Dag$ Dag$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (Ref_ref_fun$ Ref$ )Ref$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 Ref$ ))(=> (dag$ ?v0 l$ r$ (node$ lt$ p$ rt$ ))thesis$ )):named a1 ))
(assert (! (dag$ (fun_app$ r$ p$ )l$ r$ t$ ):named a2 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Dag$ ))(=> (= t$ (node$ ?v0 p$ ?v1 ))false )):named a3 ))
(assert (! (subdag$ t$ (node$ lt$ p$ rt$ )):named a4 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Ref$ )(?v2 Dag$ )(?v3 Dag$ )(?v4 Ref$ )(?v5 Dag$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a5 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Dag$ ))(=> (and (dag$ ?v0 ?v1 ?v2 ?v3 )(dag$ ?v0 ?v1 ?v2 ?v4 ))(= ?v3 ?v4 ))):named a6 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (dag$ ?v0 ?v1 ?v2 ?v3 )(exists ((?v4 Dag$ ))(and (dag$ ?v0 ?v1 ?v2 ?v4 )(forall ((?v5 Dag$ ))(=> (dag$ ?v0 ?v1 ?v2 ?v5 )(= ?v5 ?v4 ))))))):named a7 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Ref$ )(?v2 Dag$ )(?v3 Dag$ ))(! (= (subdag$ (node$ ?v0 ?v1 ?v2 )?v3 )(or (= ?v3 ?v0 )(or (= ?v3 ?v2 )(or (subdag$ ?v0 ?v3 )(subdag$ ?v2 ?v3 ))))):pattern ((subdag$ (node$ ?v0 ?v1 ?v2 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Dag$ )(?v2 Ref$ )(?v3 Dag$ ))(=> (subdag$ ?v0 (node$ ?v1 ?v2 ?v3 ))(and (subdag$ ?v0 ?v1 )(subdag$ ?v0 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Dag$ ))(=> (and (dag$ ?v0 ?v1 ?v2 ?v3 )(subdag$ ?v3 ?v4 ))(exists ((?v5 Ref$ ))(dag$ ?v5 ?v1 ?v2 ?v4 )))):named a10 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (not (= ?v0 null$ ))(= (dag$ ?v0 ?v1 ?v2 ?v3 )(exists ((?v4 Dag$ )(?v5 Dag$ ))(and (= ?v3 (node$ ?v4 ?v0 ?v5 ))(and (dag$ (fun_app$ ?v1 ?v0 )?v1 ?v2 ?v4 )(dag$ (fun_app$ ?v2 ?v0 )?v1 ?v2 ?v5 ))))))):named a11 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Ref$ )(?v5 Dag$ ))(! (= (dag$ ?v0 ?v1 ?v2 (node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v4 )(and (not (= ?v0 null$ ))(and (dag$ (fun_app$ ?v1 ?v0 )?v1 ?v2 ?v3 )(dag$ (fun_app$ ?v2 ?v0 )?v1 ?v2 ?v5 ))))):pattern ((dag$ ?v0 ?v1 ?v2 (node$ ?v3 ?v4 ?v5 ))))):named a12 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (dag$ (fun_app$ ?v0 ?v1 )?v0 ?v2 ?v3 )(not (member$ ?v1 (set_of$ ?v3 ))))):named a13 ))
(assert (! (forall ((?v0 Dag$ ))(=> (and (=> (= ?v0 tip$ )false )(forall ((?v1 Dag$ )(?v2 Ref$ )(?v3 Dag$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false )))false )):named a14 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Ref$ )(?v2 Dag$ ))(not (= tip$ (node$ ?v0 ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Dag$ )(?v2 Dag$ ))(=> (and (subdag$ ?v0 ?v1 )(subdag$ ?v1 ?v2 ))(subdag$ ?v0 ?v2 ))):named a16 ))
(check-sat )
;(get-unsat-core )
