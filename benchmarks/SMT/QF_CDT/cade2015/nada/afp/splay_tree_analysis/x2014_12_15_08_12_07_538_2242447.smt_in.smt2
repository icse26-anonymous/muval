;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_tree$ 0)
(declare-fun leaf$ ()A_tree$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun val$ (A_tree$)A$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A_tree$ A$ A_tree$ )A_tree$)
(declare-fun dbl$ (Real )Real )
(declare-fun phi$ (A_tree$ )Real )
(declare-fun norm$ (Real )Real )
(declare-fun scaleR$ (Real Real )Real )
(declare-fun of_bool$ (Bool )Real )
(declare-fun of_real$ (Real )Real )
(assert (! (not (= (phi$ leaf$ )0.0 )):named a0 ))
(assert (! (= (phi$ leaf$ )0.0 ):named a1 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (=> (= ?v0 leaf$ )false )(=> (not (= ?v0 leaf$ ))false ))false )):named a2 ))
(assert (! (forall ((?v0 Real ))(= (= 0.0 ?v0 )(= ?v0 0.0 ))):named a3 ))
(assert (! (forall ((?v0 Real ))(= (= (of_real$ ?v0 )0.0 )(= ?v0 0.0 ))):named a4 ))
(assert (! (= (of_real$ 0.0 )0.0 ):named a5 ))
(assert (! (forall ((?v0 Real ))(= (= (norm$ ?v0 )0.0 )(= ?v0 0.0 ))):named a6 ))
(assert (! (= (norm$ 0.0 )0.0 ):named a7 ))
(assert (! (forall ((?v0 Real )(?v1 Real ))(= (= (scaleR$ ?v0 ?v1 )0.0 )(or (= ?v0 0.0 )(= ?v1 0.0 )))):named a8 ))
(assert (! (forall ((?v0 Real ))(= (scaleR$ 0.0 ?v0 )0.0 )):named a9 ))
(assert (! (= (of_bool$ false )0.0 ):named a10 ))
(assert (! (= (dbl$ 0.0 )0.0 ):named a11 ))
(assert (! (forall ((?v0 Real )(?v1 Real ))(= (= (of_real$ ?v0 )(of_real$ ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Real ))(= (scaleR$ ?v0 0.0 )0.0 )):named a13 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Real ))(= (= (scaleR$ ?v0 ?v1 )(scaleR$ ?v2 ?v1 ))(or (= ?v0 ?v2 )(= ?v1 0.0 )))):named a14 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Real ))(= (= (scaleR$ ?v0 ?v1 )(scaleR$ ?v0 ?v2 ))(or (= ?v1 ?v2 )(= ?v0 0.0 )))):named a15 ))
(assert (! (forall ((?v0 Bool )(?v1 Bool ))(= (= (of_bool$ ?v0 )(of_bool$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(check-sat )
;(get-unsat-core )
