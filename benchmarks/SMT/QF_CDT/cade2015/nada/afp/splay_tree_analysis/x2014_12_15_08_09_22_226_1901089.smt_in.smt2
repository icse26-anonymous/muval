;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_tree_set$ 0 )
(declare-sort A_tree$ 0)
(declare-sort Num$ 0)
(declare-fun leaf$ ()A_tree$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun val$ (A_tree$)A$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A_tree$ A$ A_tree$ )A_tree$)
(declare-fun one$ ()Num$)
(declare-fun select$ (Num$)Num$)
(declare-fun bit0$ (Num$ )Num$)
(declare-fun selecta$ (Num$)Num$)
(declare-fun bit1$ (Num$ )Num$)
(declare-fun a$ (A$ A_tree$ )Real )
(declare-fun b$ ()A$ )
(declare-fun c$ ()A$ )
(declare-fun l$ ()A_tree$ )
(declare-fun r$ ()A_tree$ )
(declare-fun u$ ()A$ )
(declare-fun aa$ ()A$ )
(declare-fun l$a ()A_tree$ )
(declare-fun la$ ()A_tree$ )
(declare-fun ll$ ()A_tree$ )
(declare-fun lr$ ()A_tree$ )
(declare-fun r$a ()A_tree$ )
(declare-fun ra$ ()A_tree$ )
(declare-fun bst$ (A_tree$ )Bool )
(declare-fun log$ (Real Real )Real )
(declare-fun less$ (A$ A$ )Bool )
(declare-fun real$ (Nat$ )Real )
(declare-fun size1$ (A_tree$ )Nat$ )
(declare-fun splay$ (A$ A_tree$ )A_tree$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun member$a (A_tree$ A_tree_set$ )Bool )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(declare-fun subtrees$ (A_tree$ )A_tree_set$ )
(assert (! (not (<= (+ (- (- (+ (+ (a$ aa$ ll$ )(log$ 2.0 (real$ (size1$ (node$ r$ b$ (node$ lr$ c$ r$a ))))))(log$ 2.0 (real$ (size1$ (node$ lr$ c$ r$a )))))(log$ 2.0 (real$ (size1$ (node$ ll$ b$ lr$ )))))(log$ 2.0 (real$ (size1$ (node$ l$ u$ r$ )))))1.0 )(+ (- (- (- (+ (+ (* 3.0 (log$ 2.0 (real$ (size1$ ll$ ))))(log$ 2.0 (real$ (size1$ (node$ r$ b$ (node$ lr$ c$ r$a ))))))(log$ 2.0 (real$ (size1$ (node$ lr$ c$ r$a )))))(log$ 2.0 (real$ (size1$ (node$ ll$ b$ lr$ )))))(log$ 2.0 (real$ (size1$ (node$ l$ u$ r$ )))))(* 3.0 (log$ 2.0 (real$ (size1$ (node$ la$ aa$ ra$ ))))))2.0 ))):named a0 ))
(assert (! (not (= ll$ leaf$ )):named a1 ))
(assert (! (less$ aa$ b$ ):named a2 ))
(assert (! (not (= aa$ c$ )):named a3 ))
(assert (! (not (= aa$ b$ )):named a4 ))
(assert (! (=> (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(=> (= l$a (node$ ?v0 ?v1 ?v2 ))false ))false ):named a5 ))
(assert (! (less$ aa$ c$ ):named a6 ))
(assert (! (bst$ (node$ l$a c$ r$a )):named a7 ))
(assert (! (and (not (member$ aa$ (set_tree$ lr$ )))(not (member$ aa$ (set_tree$ r$a )))):named a8 ))
(assert (! (member$a (node$ la$ aa$ ra$ )(subtrees$ (node$ l$a c$ r$a ))):named a9 ))
(assert (! (or (less$ aa$ c$ )(less$ c$ aa$ )):named a10 ))
(assert (! (or (less$ aa$ b$ )(less$ b$ aa$ )):named a11 ))
(assert (! (less$ b$ c$ ):named a12 ))
(assert (! (member$ aa$ (set_tree$ ll$ )):named a13 ))
(assert (! (not (member$ b$ (set_tree$ r$a ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (a$ ?v0 (node$ ?v1 ?v0 ?v2 ))1.0 ):pattern ((node$ ?v1 ?v0 ?v2 )))):named a15 ))
(assert (! (= (splay$ aa$ ll$ )(node$ l$ u$ r$ )):named a16 ))
(assert (! (= (a$ aa$ (node$ l$a c$ r$a ))(+ (- (- (+ (+ (a$ aa$ ll$ )(log$ 2.0 (real$ (size1$ (node$ r$ b$ (node$ lr$ c$ r$a ))))))(log$ 2.0 (real$ (size1$ (node$ lr$ c$ r$a )))))(log$ 2.0 (real$ (size1$ (node$ ll$ b$ lr$ )))))(log$ 2.0 (real$ (size1$ (node$ l$ u$ r$ )))))1.0 )):named a17 ))
(check-sat )
;(get-unsat-core )
