;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_real_fun$ 0 )
(declare-sort A_tree_bool_fun$ 0 )
(declare-sort A_tree_real_fun$ 0 )
(declare-sort A_op_s_t_a_tree_real_fun_fun$ 0 )
(declare-sort A_op_s_t_a_tree_a_tree_fun_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort A_op_s_t$ 0)
(declare-sort Num$ 0)
(declare-fun leaf$ ()A_tree$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun val$ (A_tree$)A$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A_tree$ A$ A_tree$ )A_tree$)
(declare-fun select$ (A_op_s_t$)A$)
(declare-fun splay$ (A$ )A_op_s_t$)
(declare-fun selecta$ (A_op_s_t$)A$)
(declare-fun insert$ (A$ )A_op_s_t$)
(declare-fun selectb$ (A_op_s_t$)A$)
(declare-fun delete$ (A$ )A_op_s_t$)
(declare-fun one$ ()Num$)
(declare-fun selectc$ (Num$)Num$)
(declare-fun bit0$ (Num$ )Num$)
(declare-fun selectd$ (Num$)Num$)
(declare-fun bit1$ (Num$ )Num$)
(declare-fun uu$ (A_tree$ )A_real_fun$ )
(declare-fun bst$ ()A_tree_bool_fun$ )
(declare-fun log$ (Real Real )Real )
(declare-fun phi$ ()A_tree_real_fun$ )
(declare-fun uua$ (A_tree$ )A_real_fun$ )
(declare-fun uub$ (A_tree$ )A_real_fun$ )
(declare-fun uuc$ ()A_op_s_t_a_tree_real_fun_fun$ )
(declare-fun amor$ (A_tree$ A_op_s_t_a_tree_a_tree_fun_fun$ A_tree_bool_fun$ A_op_s_t_a_tree_real_fun_fun$ A_tree_real_fun$ A_op_s_t_a_tree_real_fun_fun$ )Bool )
(declare-fun plus$ (Num$ Num$ )Num$ )
(declare-fun real$ (Nat$ )Real )
(declare-fun size1$ (A_tree$ )Nat$ )
(declare-fun t_s_t$ ()A_op_s_t_a_tree_real_fun_fun$ )
(declare-fun times$ (Real Real )Real )
(declare-fun times$a (Num$ Num$ )Num$ )
(declare-fun fun_app$ (A_tree_real_fun$ A_tree$ )Real )
(declare-fun numeral$ (Num$ )Real )
(declare-fun nxt_s_t$ ()A_op_s_t_a_tree_a_tree_fun_fun$ )
(declare-fun fun_app$a (A_op_s_t_a_tree_real_fun_fun$ A_op_s_t$ )A_tree_real_fun$ )
(declare-fun fun_app$b (A_real_fun$ A$ )Real )
(declare-fun case_op_s_t$ (A_real_fun$ A_real_fun$ A_real_fun$ A_op_s_t$ )Real )
(assert (! (forall ((?v0 A_op_s_t$ )(?v1 A_tree$ ))(! (= (fun_app$ (fun_app$a uuc$ ?v0 )?v1 )(case_op_s_t$ (uu$ ?v1 )(uua$ ?v1 )(uub$ ?v1 )?v0 )):pattern ((fun_app$ (fun_app$a uuc$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(! (= (fun_app$b (uub$ ?v0 )?v1 )(+ (* 6.0 (log$ 2.0 (real$ (size1$ ?v0 ))))2.0 )):pattern ((fun_app$b (uub$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(! (= (fun_app$b (uua$ ?v0 )?v1 )(+ (* 4.0 (log$ 2.0 (real$ (size1$ ?v0 ))))2.0 )):pattern ((fun_app$b (uua$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(! (= (fun_app$b (uu$ ?v0 )?v1 )(+ (* 3.0 (log$ 2.0 (real$ (size1$ ?v0 ))))1.0 )):pattern ((fun_app$b (uu$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (amor$ leaf$ nxt_s_t$ bst$ t_s_t$ phi$ uuc$ )):named a4 ))
(assert (! (= (+ 1.0 1.0 )2.0 ):named a5 ))
(assert (! (forall ((?v0 Num$ ))(= (+ (numeral$ ?v0 )1.0 )(numeral$ (plus$ ?v0 one$ )))):named a6 ))
(assert (! (forall ((?v0 Num$ ))(= (+ 1.0 (numeral$ ?v0 ))(numeral$ (plus$ one$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Num$ ))(= (= (numeral$ ?v0 )1.0 )(= ?v0 one$ ))):named a8 ))
(assert (! (forall ((?v0 Num$ ))(= (= 1.0 (numeral$ ?v0 ))(= one$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Num$ ))(= (times$ (+ ?v0 ?v1 )(numeral$ ?v2 ))(+ (times$ ?v0 (numeral$ ?v2 ))(times$ ?v1 (numeral$ ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 Num$ )(?v1 Real )(?v2 Real ))(= (times$ (numeral$ ?v0 )(+ ?v1 ?v2 ))(+ (times$ (numeral$ ?v0 )?v1 )(times$ (numeral$ ?v0 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit1$ ?v0 )one$ )false )):named a12 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit1$ ?v0 ))false )):named a13 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit1$ ?v1 ))false )):named a14 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit1$ ?v0 )(bit0$ ?v1 ))false )):named a15 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit0$ ?v0 )one$ )false )):named a16 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(! (= (times$a (bit0$ ?v0 )(bit0$ ?v1 ))(bit0$ (bit0$ (times$a ?v0 ?v1 )))):pattern ((times$a (bit0$ ?v0 )(bit0$ ?v1 ))))):named a18 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a20 ))
(check-sat )
;(get-unsat-core )
