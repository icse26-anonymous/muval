;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_real_fun$ 0 )
(declare-sort A_op_s_t$ 0)
(declare-sort A_tree$ 0)
(declare-sort Num$ 0)
(declare-fun select$ (A_op_s_t$)A$)
(declare-fun splay$ (A$ )A_op_s_t$)
(declare-fun selecta$ (A_op_s_t$)A$)
(declare-fun insert$ (A$ )A_op_s_t$)
(declare-fun selectb$ (A_op_s_t$)A$)
(declare-fun delete$ (A$ )A_op_s_t$)
(declare-fun leaf$ ()A_tree$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun val$ (A_tree$)A$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A_tree$ A$ A_tree$ )A_tree$)
(declare-fun one$ ()Num$)
(declare-fun selectc$ (Num$)Num$)
(declare-fun bit0$ (Num$ )Num$)
(declare-fun selectd$ (Num$)Num$)
(declare-fun bit1$ (Num$ )Num$)
(declare-fun f$ ()A_op_s_t$ )
(declare-fun l$ ()A_tree$ )
(declare-fun r$ ()A_tree$ )
(declare-fun s$ ()A_tree$ )
(declare-fun y$ ()A$ )
(declare-fun l$a ()A_tree$ )
(declare-fun ll$ ()A_tree$ )
(declare-fun lr$ ()A_tree$ )
(declare-fun r$a ()A_tree$ )
(declare-fun uu$ ()A_real_fun$ )
(declare-fun bst$ (A_tree$ )Bool )
(declare-fun log$ (Real Real )Real )
(declare-fun phi$ (A_tree$ )Real )
(declare-fun uua$ ()A_real_fun$ )
(declare-fun uub$ ()A_real_fun$ )
(declare-fun one$a ()Nat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun real$ (Nat$ )Real )
(declare-fun plus$a (Num$ Num$ )Num$ )
(declare-fun size1$ (A_tree$ )Nat$ )
(declare-fun t_s_t$ (A_op_s_t$ A_tree$ )Real )
(declare-fun times$ (Real Real )Real )
(declare-fun times$a (Nat$ Nat$ )Nat$ )
(declare-fun fun_app$ (A_real_fun$ A$ )Real )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun numeral$ (Num$ )Nat$ )
(declare-fun nxt_s_t$ (A_op_s_t$ A_tree$ )A_tree$ )
(declare-fun less_eq$a (Num$ Num$ )Bool )
(declare-fun numeral$a (Num$ )Real )
(declare-fun case_op_s_t$ (A_real_fun$ A_real_fun$ A_real_fun$ A_op_s_t$ )Real )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uub$ ?v0 )(+ (* 6.0 (log$ 2.0 (real$ (size1$ s$ ))))2.0 )):pattern ((fun_app$ uub$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uua$ ?v0 )(+ (* 4.0 (log$ 2.0 (real$ (size1$ s$ ))))2.0 )):pattern ((fun_app$ uua$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(+ (* 3.0 (log$ 2.0 (real$ (size1$ s$ ))))1.0 )):pattern ((fun_app$ uu$ ?v0 )))):named a2 ))
(assert (! (not (<= (- (+ (t_s_t$ f$ s$ )(phi$ (nxt_s_t$ f$ s$ )))(phi$ s$ ))(case_op_s_t$ uu$ uua$ uub$ f$ ))):named a3 ))
(assert (! (<= (log$ 2.0 (real$ (plus$ (size1$ l$ )(size1$ r$ ))))(+ (log$ 2.0 (real$ (plus$ (size1$ l$ )(size1$ r$a ))))(log$ 2.0 (+ (real$ (size1$ l$a ))(real$ (size1$ r$ )))))):named a4 ))
(assert (! (bst$ s$ ):named a5 ))
(assert (! (= (plus$ one$a one$a )(numeral$ (bit0$ one$ ))):named a6 ))
(assert (! (= (+ 1.0 1.0 )2.0 ):named a7 ))
(assert (! (forall ((?v0 Num$ ))(= (plus$ (numeral$ ?v0 )one$a )(numeral$ (plus$a ?v0 one$ )))):named a8 ))
(assert (! (forall ((?v0 Num$ ))(= (+ (numeral$a ?v0 )1.0 )(numeral$a (plus$a ?v0 one$ )))):named a9 ))
(assert (! (forall ((?v0 Num$ ))(= (plus$ one$a (numeral$ ?v0 ))(numeral$ (plus$a one$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Num$ ))(= (+ 1.0 (numeral$a ?v0 ))(numeral$a (plus$a one$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Num$ ))(= (less_eq$ (numeral$ ?v0 )one$a )(less_eq$a ?v0 one$ ))):named a12 ))
(assert (! (forall ((?v0 Num$ ))(= (<= (numeral$a ?v0 )1.0 )(less_eq$a ?v0 one$ ))):named a13 ))
(assert (! (forall ((?v0 Num$ ))(= (= (numeral$ ?v0 )one$a )(= ?v0 one$ ))):named a14 ))
(assert (! (forall ((?v0 Num$ ))(= (= (numeral$a ?v0 )1.0 )(= ?v0 one$ ))):named a15 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$a (numeral$ ?v0 ))(= one$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Num$ ))(= (= 1.0 (numeral$a ?v0 ))(= one$ ?v0 ))):named a17 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Num$ ))(= (times$ (- ?v0 ?v1 )(numeral$a ?v2 ))(- (times$ ?v0 (numeral$a ?v2 ))(times$ ?v1 (numeral$a ?v2 ))))):named a18 ))
(assert (! (forall ((?v0 Num$ )(?v1 Real )(?v2 Real ))(= (times$ (numeral$a ?v0 )(- ?v1 ?v2 ))(- (times$ (numeral$a ?v0 )?v1 )(times$ (numeral$a ?v0 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Num$ ))(= (times$a (plus$ ?v0 ?v1 )(numeral$ ?v2 ))(plus$ (times$a ?v0 (numeral$ ?v2 ))(times$a ?v1 (numeral$ ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Num$ ))(= (times$ (+ ?v0 ?v1 )(numeral$a ?v2 ))(+ (times$ ?v0 (numeral$a ?v2 ))(times$ ?v1 (numeral$a ?v2 ))))):named a21 ))
(assert (! (forall ((?v0 Num$ )(?v1 Nat$ )(?v2 Nat$ ))(= (times$a (numeral$ ?v0 )(plus$ ?v1 ?v2 ))(plus$ (times$a (numeral$ ?v0 )?v1 )(times$a (numeral$ ?v0 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 Num$ )(?v1 Real )(?v2 Real ))(= (times$ (numeral$a ?v0 )(+ ?v1 ?v2 ))(+ (times$ (numeral$a ?v0 )?v1 )(times$ (numeral$a ?v0 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit1$ ?v0 )one$ )false )):named a24 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit1$ ?v0 ))false )):named a25 ))
(assert (! (= l$a (node$ ll$ y$ lr$ )):named a26 ))
(assert (! (bst$ l$a ):named a27 ))
(check-sat )
;(get-unsat-core )
