;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_op_s_t$ 0)
(declare-sort A_tree$ 0)
(declare-fun select$ (A_op_s_t$)A$)
(declare-fun splay$ (A$ )A_op_s_t$)
(declare-fun selecta$ (A_op_s_t$)A$)
(declare-fun insert$ (A$ )A_op_s_t$)
(declare-fun selectb$ (A_op_s_t$)A$)
(declare-fun delete$ (A$ )A_op_s_t$)
(declare-fun leaf$ ()A_tree$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun val$ (A_tree$)A$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A_tree$ A$ A_tree$ )A_tree$)
(declare-fun a$ ()A$ )
(declare-fun e$ ()A$ )
(declare-fun f$ ()A_op_s_t$ )
(declare-fun l$ ()A_tree$ )
(declare-fun r$ ()A_tree$ )
(declare-fun s$ ()A_tree$ )
(declare-fun bst$ (A_tree$ )Bool )
(declare-fun less$ (A$ A$ )Bool )
(declare-fun splay$a (A$ A_tree$ )A_tree$ )
(assert (! (not (not (= e$ a$ ))):named a0 ))
(assert (! (less$ a$ e$ ):named a1 ))
(assert (! (or (less$ e$ a$ )(or (= e$ a$ )(less$ a$ e$ ))):named a2 ))
(assert (! (= f$ (insert$ a$ )):named a3 ))
(assert (! (= (splay$a a$ s$ )(node$ l$ e$ r$ )):named a4 ))
(assert (! (=> (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(=> (= (splay$a a$ s$ )(node$ ?v0 ?v1 ?v2 ))false ))false ):named a5 ))
(assert (! (bst$ s$ ):named a6 ))
(assert (! (not (= s$ leaf$ )):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A_tree$ )(?v4 A_tree$ ))(! (=> (and (less$ ?v0 ?v1 )(less$ ?v2 ?v0 ))(= (splay$a ?v0 (node$ (node$ ?v3 ?v2 leaf$ )?v1 ?v4 ))(node$ ?v3 ?v2 (node$ leaf$ ?v1 ?v4 )))):pattern ((splay$a ?v0 (node$ (node$ ?v3 ?v2 leaf$ )?v1 ?v4 ))))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A_tree$ )(?v4 A_tree$ ))(! (=> (and (less$ ?v0 ?v1 )(less$ ?v1 ?v2 ))(= (splay$a ?v1 (node$ ?v3 ?v0 (node$ leaf$ ?v2 ?v4 )))(node$ (node$ ?v3 ?v0 leaf$ )?v2 ?v4 ))):pattern ((splay$a ?v1 (node$ ?v3 ?v0 (node$ leaf$ ?v2 ?v4 )))))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_tree$ ))(! (=> (less$ ?v0 ?v1 )(= (splay$a ?v1 (node$ ?v2 ?v0 leaf$ ))(node$ ?v2 ?v0 leaf$ ))):pattern ((splay$a ?v1 (node$ ?v2 ?v0 leaf$ ))))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_tree$ ))(! (=> (less$ ?v0 ?v1 )(= (splay$a ?v0 (node$ leaf$ ?v1 ?v2 ))(node$ leaf$ ?v1 ?v2 ))):pattern ((splay$a ?v0 (node$ leaf$ ?v1 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ )(?v6 A_tree$ )(?v7 A_tree$ )(?v8 A_tree$ ))(=> (and (less$ ?v0 ?v1 )(and (less$ ?v2 ?v0 )(= (splay$a ?v0 ?v3 )(node$ ?v4 ?v5 ?v6 ))))(= (splay$a ?v0 (node$ (node$ ?v7 ?v2 ?v3 )?v1 ?v8 ))(node$ (node$ ?v7 ?v2 ?v4 )?v5 (node$ ?v6 ?v1 ?v8 ))))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ )(?v6 A_tree$ )(?v7 A_tree$ )(?v8 A_tree$ ))(=> (and (less$ ?v0 ?v1 )(and (less$ ?v0 ?v2 )(= (splay$a ?v0 ?v3 )(node$ ?v4 ?v5 ?v6 ))))(= (splay$a ?v0 (node$ (node$ ?v3 ?v2 ?v7 )?v1 ?v8 ))(node$ ?v4 ?v5 (node$ ?v6 ?v2 (node$ ?v7 ?v1 ?v8 )))))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ )(?v6 A_tree$ )(?v7 A_tree$ )(?v8 A_tree$ ))(=> (and (less$ ?v0 ?v1 )(and (less$ ?v2 ?v1 )(= (splay$a ?v1 ?v3 )(node$ ?v4 ?v5 ?v6 ))))(= (splay$a ?v1 (node$ ?v7 ?v0 (node$ ?v8 ?v2 ?v3 )))(node$ (node$ (node$ ?v7 ?v0 ?v8 )?v2 ?v4 )?v5 ?v6 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ )(?v6 A_tree$ )(?v7 A_tree$ )(?v8 A_tree$ ))(=> (and (less$ ?v0 ?v1 )(and (less$ ?v1 ?v2 )(= (splay$a ?v1 ?v3 )(node$ ?v4 ?v5 ?v6 ))))(= (splay$a ?v1 (node$ ?v7 ?v0 (node$ ?v3 ?v2 ?v8 )))(node$ (node$ ?v7 ?v0 ?v4 )?v5 (node$ ?v6 ?v2 ?v8 ))))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ )(?v4 A_tree$ ))(! (=> (less$ ?v0 ?v1 )(= (splay$a ?v0 (node$ (node$ ?v2 ?v0 ?v3 )?v1 ?v4 ))(node$ ?v2 ?v0 (node$ ?v3 ?v1 ?v4 )))):pattern ((node$ (node$ ?v2 ?v0 ?v3 )?v1 ?v4 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ )(?v4 A_tree$ ))(! (=> (less$ ?v0 ?v1 )(= (splay$a ?v1 (node$ ?v2 ?v0 (node$ ?v3 ?v1 ?v4 )))(node$ (node$ ?v2 ?v0 ?v3 )?v1 ?v4 ))):pattern ((node$ ?v2 ?v0 (node$ ?v3 ?v1 ?v4 ))))):named a17 ))
(check-sat )
;(get-unsat-core )
