;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_tree$ 0)
(declare-sort Num$ 0)
(declare-fun leaf$ ()A_tree$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun val$ (A_tree$)A$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A_tree$ A$ A_tree$ )A_tree$)
(declare-fun one$ ()Num$)
(declare-fun select$ (Num$)Num$)
(declare-fun bit0$ (Num$ )Num$)
(declare-fun selecta$ (Num$)Num$)
(declare-fun bit1$ (Num$ )Num$)
(declare-fun l$ ()A_tree$ )
(declare-fun am$ (A_tree$ )Real )
(declare-fun log$ (Real Real )Real )
(declare-fun phi$ (A_tree$ )Real )
(declare-fun plus$ (Num$ Num$ )Num$ )
(declare-fun real$ (Nat$ )Real )
(declare-fun size1$ (A_tree$ )Nat$ )
(declare-fun times$ (Real Real )Real )
(declare-fun times$a (Num$ Num$ )Num$ )
(declare-fun less_eq$ (Num$ Num$ )Bool )
(declare-fun numeral$ (Num$ )Real )
(declare-fun splay_max$ (A_tree$ )A_tree$ )
(declare-fun t_splay_max$ (A_tree$ )Nat$ )
(assert (! (not (<= (- (+ (real$ (t_splay_max$ l$ ))(phi$ (splay_max$ l$ )))(phi$ l$ ))(+ (* 3.0 (log$ 2.0 (real$ (size1$ l$ ))))1.0 ))):named a0 ))
(assert (! (= (+ 1.0 1.0 )2.0 ):named a1 ))
(assert (! (forall ((?v0 Num$ ))(= (+ (numeral$ ?v0 )1.0 )(numeral$ (plus$ ?v0 one$ )))):named a2 ))
(assert (! (forall ((?v0 Num$ ))(= (+ 1.0 (numeral$ ?v0 ))(numeral$ (plus$ one$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 Num$ ))(= (<= (numeral$ ?v0 )1.0 )(less_eq$ ?v0 one$ ))):named a4 ))
(assert (! (forall ((?v0 Num$ ))(= (= (numeral$ ?v0 )1.0 )(= ?v0 one$ ))):named a5 ))
(assert (! (forall ((?v0 Num$ ))(= (= 1.0 (numeral$ ?v0 ))(= one$ ?v0 ))):named a6 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Num$ ))(= (times$ (- ?v0 ?v1 )(numeral$ ?v2 ))(- (times$ ?v0 (numeral$ ?v2 ))(times$ ?v1 (numeral$ ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 Num$ )(?v1 Real )(?v2 Real ))(= (times$ (numeral$ ?v0 )(- ?v1 ?v2 ))(- (times$ (numeral$ ?v0 )?v1 )(times$ (numeral$ ?v0 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Num$ ))(= (times$ (+ ?v0 ?v1 )(numeral$ ?v2 ))(+ (times$ ?v0 (numeral$ ?v2 ))(times$ ?v1 (numeral$ ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 Num$ )(?v1 Real )(?v2 Real ))(= (times$ (numeral$ ?v0 )(+ ?v1 ?v2 ))(+ (times$ (numeral$ ?v0 )?v1 )(times$ (numeral$ ?v0 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (am$ ?v0 )(- (+ (real$ (t_splay_max$ ?v0 ))(phi$ (splay_max$ ?v0 )))(phi$ ?v0 ))):pattern ((am$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit1$ ?v0 )one$ )false )):named a12 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(! (= (times$a (bit0$ ?v0 )(bit0$ ?v1 ))(bit0$ (bit0$ (times$a ?v0 ?v1 )))):pattern ((times$a (bit0$ ?v0 )(bit0$ ?v1 ))))):named a14 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(check-sat )
;(get-unsat-core )
