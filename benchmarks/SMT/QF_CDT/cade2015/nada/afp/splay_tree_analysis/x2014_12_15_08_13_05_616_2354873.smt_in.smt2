;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort A_op_s_t$ 0)
(declare-fun leaf$ ()A_tree$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun val$ (A_tree$)A$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A_tree$ A$ A_tree$ )A_tree$)
(declare-fun select$ (A_op_s_t$)A$)
(declare-fun splay$ (A$ )A_op_s_t$)
(declare-fun selecta$ (A_op_s_t$)A$)
(declare-fun insert$ (A$ )A_op_s_t$)
(declare-fun selectb$ (A_op_s_t$)A$)
(declare-fun delete$ (A$ )A_op_s_t$)
(declare-fun a$ ()A$ )
(declare-fun f$ ()A_op_s_t$ )
(declare-fun s$ ()A_tree$ )
(declare-fun x$ ()A$ )
(declare-fun ls$ ()A_tree$ )
(declare-fun rs$ ()A_tree$ )
(declare-fun bst$ (A_tree$ )Bool )
(declare-fun less$ (A$ )A_bool_fun$ )
(declare-fun size$ (A_tree$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun splay$a (A$ A_tree$ )A_tree$ )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(declare-fun pred_tree$ (A_bool_fun$ A_tree$ )Bool )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(=> (= (splay$a a$ (node$ ls$ x$ rs$ ))(node$ ?v0 ?v1 ?v2 ))thesis$ )):named a1 ))
(assert (! (bst$ s$ ):named a2 ))
(assert (! (= s$ (node$ ls$ x$ rs$ )):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (splay$a ?v0 (node$ ?v1 ?v0 ?v2 ))(node$ ?v1 ?v0 ?v2 )):pattern ((node$ ?v1 ?v0 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ )(?v4 A$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a5 ))
(assert (! (= f$ (delete$ a$ )):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ )(?v6 A_tree$ )(?v7 A_tree$ )(?v8 A_tree$ ))(=> (and (fun_app$ (less$ ?v0 )?v1 )(and (fun_app$ (less$ ?v2 )?v0 )(= (splay$a ?v0 ?v3 )(node$ ?v4 ?v5 ?v6 ))))(= (splay$a ?v0 (node$ (node$ ?v7 ?v2 ?v3 )?v1 ?v8 ))(node$ (node$ ?v7 ?v2 ?v4 )?v5 (node$ ?v6 ?v1 ?v8 ))))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ )(?v6 A_tree$ )(?v7 A_tree$ )(?v8 A_tree$ ))(=> (and (fun_app$ (less$ ?v0 )?v1 )(and (fun_app$ (less$ ?v0 )?v2 )(= (splay$a ?v0 ?v3 )(node$ ?v4 ?v5 ?v6 ))))(= (splay$a ?v0 (node$ (node$ ?v3 ?v2 ?v7 )?v1 ?v8 ))(node$ ?v4 ?v5 (node$ ?v6 ?v2 (node$ ?v7 ?v1 ?v8 )))))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ )(?v6 A_tree$ )(?v7 A_tree$ )(?v8 A_tree$ ))(=> (and (fun_app$ (less$ ?v0 )?v1 )(and (fun_app$ (less$ ?v2 )?v1 )(= (splay$a ?v1 ?v3 )(node$ ?v4 ?v5 ?v6 ))))(= (splay$a ?v1 (node$ ?v7 ?v0 (node$ ?v8 ?v2 ?v3 )))(node$ (node$ (node$ ?v7 ?v0 ?v8 )?v2 ?v4 )?v5 ?v6 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ )(?v6 A_tree$ )(?v7 A_tree$ )(?v8 A_tree$ ))(=> (and (fun_app$ (less$ ?v0 )?v1 )(and (fun_app$ (less$ ?v1 )?v2 )(= (splay$a ?v1 ?v3 )(node$ ?v4 ?v5 ?v6 ))))(= (splay$a ?v1 (node$ ?v7 ?v0 (node$ ?v3 ?v2 ?v8 )))(node$ (node$ ?v7 ?v0 ?v4 )?v5 (node$ ?v6 ?v2 ?v8 ))))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ )(?v4 A_tree$ ))(! (=> (fun_app$ (less$ ?v0 )?v1 )(= (splay$a ?v0 (node$ (node$ ?v2 ?v0 ?v3 )?v1 ?v4 ))(node$ ?v2 ?v0 (node$ ?v3 ?v1 ?v4 )))):pattern ((node$ (node$ ?v2 ?v0 ?v3 )?v1 ?v4 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ )(?v4 A_tree$ ))(! (=> (fun_app$ (less$ ?v0 )?v1 )(= (splay$a ?v1 (node$ ?v2 ?v0 (node$ ?v3 ?v1 ?v4 )))(node$ (node$ ?v2 ?v0 ?v3 )?v1 ?v4 ))):pattern ((node$ ?v2 ?v0 (node$ ?v3 ?v1 ?v4 ))))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(! (= (pred_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))(and (pred_tree$ ?v0 ?v1 )(and (fun_app$ ?v0 ?v2 )(pred_tree$ ?v0 ?v3 )))):pattern ((pred_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(= (size$ (splay$a ?v0 ?v1 ))(size$ ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (bst$ ?v0 )(bst$ (splay$a ?v1 ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (delete$ ?v0 )(delete$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A$ ))(=> (and (bst$ ?v0 )(and (= (splay$a ?v1 ?v0 )(node$ ?v2 ?v3 ?v4 ))(member$ ?v5 (set_tree$ ?v2 ))))(fun_app$ (less$ ?v5 )?v1 ))):named a17 ))
(check-sat )
;(get-unsat-core )
