;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_b_tllist_b_fun$ 0 )
(declare-sort B_a_b_tllist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_b_tllist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun us$ ()A_llist$ )
(declare-fun uu$ ()A_b_tllist_b_fun$ )
(declare-fun vs$ ()A_llist$ )
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun fun_app$ (A_b_tllist_b_fun$ A_b_tllist$ )B$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun tappend$ (A_b_tllist$ B_a_b_tllist_fun$ )A_b_tllist$ )
(declare-fun fun_app$a (B_a_b_tllist_fun$ B$ )A_b_tllist$ )
(declare-fun lappendt$ (A_llist$ A_b_tllist$ )A_b_tllist$ )
(declare-fun terminal0$ ()A_b_tllist_b_fun$ )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$ (B$ A_llist$ )A_b_tllist$ )
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (fun_app$ uu$ ?v0 )(terminal$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (= (llist_of_tllist$ xs$ )(lappend$ us$ vs$ ))(exists ((?v0 A_b_tllist$ ))(and (= xs$ (lappendt$ us$ ?v0 ))(and (= vs$ (llist_of_tllist$ ?v0 ))(= (terminal$ xs$ )(terminal$ ?v0 ))))))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_tllist$ ))(= (llist_of_tllist$ (lappendt$ ?v0 ?v1 ))(lappend$ ?v0 (llist_of_tllist$ ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 B_a_b_tllist_fun$ ))(= (llist_of_tllist$ (tappend$ ?v0 ?v1 ))(lappend$ (llist_of_tllist$ ?v0 )(llist_of_tllist$ (fun_app$a ?v1 (terminal$ ?v0 )))))):named a3 ))
(assert (! (= terminal0$ uu$ ):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_tllist$ ))(=> (lfinite$ ?v0 )(= (terminal$ (lappendt$ ?v0 ?v1 ))(terminal$ ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (tllist_of_llist$ (terminal$ ?v0 )(llist_of_tllist$ ?v0 ))?v0 )):named a7 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (lappendt$ lNil$ ?v0 )?v0 ):pattern ((lappendt$ lNil$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (terminal$ (ttl$ ?v0 ))(terminal$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (llist_of_tllist$ (tllist_of_llist$ ?v0 ?v1 ))?v1 )):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (terminal$ (tCons$ ?v0 ?v1 ))(terminal$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 B$ ))(! (= (terminal$ (tNil$ ?v0 ))?v0 ):pattern ((tNil$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (= (lfinite$ lNil$ )true ):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lappend$ lNil$ ?v0 )?v0 ):pattern ((lappend$ lNil$ ?v0 )))):named a16 ))
(check-sat )
;(get-unsat-core )
