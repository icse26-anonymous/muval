;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort A_b_tllist_bool_fun$ 0 )
(declare-sort B_a_llist_b_prod_fun$ 0 )
(declare-sort A_llist_b_bool_fun_fun$ 0 )
(declare-sort Bool_bool_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_bool_fun$ 0 )
(declare-sort Bool_a_llist_b_prod_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_fun$ 0 )
(declare-sort A_llist_b_prod_a_b_tllist_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun_a_llist_b_prod_a_b_tllist_bool_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_llist_b_prod$ 0)
(declare-fun fst$ (A_llist_b_prod$)A_llist$)
(declare-fun snd$ (A_llist_b_prod$)B$)
(declare-fun pair$ (A_llist$ B$ )A_llist_b_prod$)
(declare-sort A_b_tllist$ 0)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun uu$ ()A_a_bool_fun_fun$ )
(declare-fun uua$ ()B_b_bool_fun_fun$ )
(declare-fun uub$ ()Bool_bool_bool_fun_fun$ )
(declare-fun uuc$ ()A_llist_b_bool_fun_fun$ )
(declare-fun uud$ (Bool A_llist_b_bool_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uue$ (A_llist_b_a_llist_b_prod_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_llist_b_prod_fun_fun$ )
(declare-fun uuf$ (A_llist_b_bool_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uug$ (Bool_a_llist_b_prod_fun$ A_llist_b_bool_fun_fun$ )A_llist_b_a_llist_b_prod_fun_fun$ )
(declare-fun uuh$ (A_llist_b_prod_bool_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uui$ (A_llist_b_prod_a_llist_b_prod_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_llist_b_prod_fun_fun$ )
(declare-fun uuj$ (Bool_bool_fun$ A_llist_b_bool_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (Bool_bool_fun$ Bool )Bool )
(declare-fun is_TNil$ ()A_b_tllist_bool_fun$ )
(declare-fun rel_fun$ (A_llist_b_prod_a_b_tllist_bool_fun_fun$ Bool_bool_bool_fun_fun$ A_llist_b_prod_bool_fun$ A_b_tllist_bool_fun$ )Bool )
(declare-fun fun_app$a (Bool_bool_bool_fun_fun$ Bool )Bool_bool_fun$ )
(declare-fun fun_app$b (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$c (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$d (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$e (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$f (A_llist_b_bool_fun_fun$ A_llist$ )B_bool_fun$ )
(declare-fun fun_app$g (B_a_llist_b_prod_fun$ B$ )A_llist_b_prod$ )
(declare-fun fun_app$h (A_llist_b_a_llist_b_prod_fun_fun$ A_llist$ )B_a_llist_b_prod_fun$ )
(declare-fun fun_app$i (A_llist_b_prod_a_llist_b_prod_fun$ A_llist_b_prod$ )A_llist_b_prod$ )
(declare-fun fun_app$j (A_llist_b_prod_bool_fun$ A_llist_b_prod$ )Bool )
(declare-fun fun_app$k (Bool_a_llist_b_prod_fun$ Bool )A_llist_b_prod$ )
(declare-fun fun_app$l (B_b_bool_fun_fun_a_llist_b_prod_a_b_tllist_bool_fun_fun_fun$ B_b_bool_fun_fun$ )A_llist_b_prod_a_b_tllist_bool_fun_fun$ )
(declare-fun fun_app$m (A_b_tllist_bool_fun$ A_b_tllist$ )Bool )
(declare-fun fun_app$n (A_llist_b_prod_a_b_tllist_bool_fun_fun$ A_llist_b_prod$ )A_b_tllist_bool_fun$ )
(declare-fun case_prod$ (A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_prod_a_llist_b_prod_fun$ )
(declare-fun cr_tllist$ ()A_llist_b_prod_a_b_tllist_bool_fun_fun$ )
(declare-fun case_prod$a (A_llist_b_bool_fun_fun$ )A_llist_b_prod_bool_fun$ )
(declare-fun pcr_tllist$ (A_a_bool_fun_fun$ )B_b_bool_fun_fun_a_llist_b_prod_a_b_tllist_bool_fun_fun_fun$ )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(assert (! (forall ((?v0 Bool )(?v1 Bool ))(! (= (fun_app$ (fun_app$a uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uub$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$b (fun_app$c uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$d (fun_app$e uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uu$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$b (fun_app$f uuc$ ?v0 )?v1 )(lnull$ ?v0 )):pattern ((fun_app$b (fun_app$f uuc$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$h (uue$ ?v0 ?v1 )?v2 )?v3 )(fun_app$i (case_prod$ ?v0 )(fun_app$g (fun_app$h ?v1 ?v2 )?v3 ))):pattern ((fun_app$g (fun_app$h (uue$ ?v0 ?v1 )?v2 )?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$b (fun_app$f (uuf$ ?v0 ?v1 )?v2 )?v3 )(fun_app$j (case_prod$a ?v0 )(fun_app$g (fun_app$h ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$f (uuf$ ?v0 ?v1 )?v2 )?v3 )))):named a5 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$b (fun_app$f (uud$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$b (fun_app$f ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$f (uud$ ?v0 ?v1 )?v2 )?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$h (uui$ ?v0 ?v1 )?v2 )?v3 )(fun_app$i ?v0 (fun_app$g (fun_app$h ?v1 ?v2 )?v3 ))):pattern ((fun_app$g (fun_app$h (uui$ ?v0 ?v1 )?v2 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$b (fun_app$f (uuh$ ?v0 ?v1 )?v2 )?v3 )(fun_app$j ?v0 (fun_app$g (fun_app$h ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$f (uuh$ ?v0 ?v1 )?v2 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 Bool_a_llist_b_prod_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$h (uug$ ?v0 ?v1 )?v2 )?v3 )(fun_app$k ?v0 (fun_app$b (fun_app$f ?v1 ?v2 )?v3 ))):pattern ((fun_app$g (fun_app$h (uug$ ?v0 ?v1 )?v2 )?v3 )))):named a9 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$b (fun_app$f (uuj$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ ?v0 (fun_app$b (fun_app$f ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$f (uuj$ ?v0 ?v1 )?v2 )?v3 )))):named a10 ))
(assert (! (not (rel_fun$ (fun_app$l (pcr_tllist$ uu$ )uua$ )uub$ (case_prod$a uuc$ )is_TNil$ )):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a12 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (and (=> (fun_app$m is_TNil$ ?v0 )false )(=> (not (fun_app$m is_TNil$ ?v0 ))false ))false )):named a13 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (and (=> (fun_app$m is_TNil$ ?v0 )false )(=> (not (fun_app$m is_TNil$ ?v0 ))false ))false )):named a14 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$j (case_prod$a (uud$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$j (case_prod$a ?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_b_tllist_bool_fun_fun$ )(?v1 Bool_bool_bool_fun_fun$ )(?v2 A_llist_b_prod_bool_fun$ )(?v3 A_b_tllist_bool_fun$ ))(=> (forall ((?v4 A_llist_b_prod$ )(?v5 A_b_tllist$ ))(=> (fun_app$m (fun_app$n ?v0 ?v4 )?v5 )(fun_app$ (fun_app$a ?v1 (fun_app$j ?v2 ?v4 ))(fun_app$m ?v3 ?v5 ))))(rel_fun$ ?v0 ?v1 ?v2 ?v3 ))):named a16 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$i (case_prod$ ?v0 )(fun_app$i (case_prod$ ?v1 )?v2 ))(fun_app$i (case_prod$ (uue$ ?v0 ?v1 ))?v2 ))):named a17 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$j (case_prod$a ?v0 )(fun_app$i (case_prod$ ?v1 )?v2 ))(fun_app$j (case_prod$a (uuf$ ?v0 ?v1 ))?v2 ))):named a18 ))
(assert (! (forall ((?v0 Bool_a_llist_b_prod_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$k ?v0 (fun_app$j (case_prod$a ?v1 )?v2 ))(fun_app$i (case_prod$ (uug$ ?v0 ?v1 ))?v2 ))):named a19 ))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$j ?v0 (fun_app$i (case_prod$ ?v1 )?v2 ))(fun_app$j (case_prod$a (uuh$ ?v0 ?v1 ))?v2 ))):named a20 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$i ?v0 (fun_app$i (case_prod$ ?v1 )?v2 ))(fun_app$i (case_prod$ (uui$ ?v0 ?v1 ))?v2 ))):named a21 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ ?v0 (fun_app$j (case_prod$a ?v1 )?v2 ))(fun_app$j (case_prod$a (uuj$ ?v0 ?v1 ))?v2 ))):named a22 ))
(assert (! (= (fun_app$l (pcr_tllist$ uu$ )uua$ )cr_tllist$ ):named a23 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (not (lnull$ (llist_of_tllist$ ?v0 )))(not (fun_app$m is_TNil$ ?v0 )))):named a24 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (lnull$ (llist_of_tllist$ ?v0 ))(fun_app$m is_TNil$ ?v0 ))):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a26 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a27 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a28 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (fun_app$m is_TNil$ ?v0 )(lnull$ (llist_of_tllist$ ?v0 )))):named a29 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (not (fun_app$m is_TNil$ ?v0 ))(not (lnull$ (llist_of_tllist$ ?v0 ))))):named a30 ))
(check-sat )
;(get-unsat-core )
