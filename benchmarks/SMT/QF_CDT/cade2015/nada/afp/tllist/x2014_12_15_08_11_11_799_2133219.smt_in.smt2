;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_b_tllist_bool_fun$ 0 )
(declare-sort A_a_b_tllist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_b_tllist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun tmap$ (A_a_fun$ B_b_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun tset$ (A_b_tllist$ )A_set$ )
(declare-fun lsetp$ (A_llist$ A$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_b_tllist_bool_fun$ A_b_tllist$ )Bool )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(declare-fun member$a (B$ B_set$ )Bool )
(declare-fun fun_app$a (A_a_b_tllist_bool_fun_fun$ A$ )A_b_tllist_bool_fun$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (B_b_fun$ B$ )B$ )
(declare-fun set2_tllist$ (A_b_tllist$ )B_set$ )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$ (B$ A_llist$ )A_b_tllist$ )
(assert (! (not (= (lset$ (llist_of_tllist$ xs$ ))(tset$ xs$ ))):named a0 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (llist_of_tllist$ (tllist_of_llist$ ?v0 ?v1 ))?v1 )):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(=> (member$ ?v0 (tset$ (ttl$ ?v1 )))(member$ ?v0 (tset$ ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A_a_b_tllist_bool_fun_fun$ ))(=> (and (member$ ?v0 (tset$ ?v1 ))(and (forall ((?v3 A$ )(?v4 A_b_tllist$ ))(fun_app$ (fun_app$a ?v2 ?v3 )(tCons$ ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_b_tllist$ )(?v5 A$ ))(=> (and (member$ ?v5 (tset$ ?v4 ))(fun_app$ (fun_app$a ?v2 ?v5 )?v4 ))(fun_app$ (fun_app$a ?v2 ?v5 )(tCons$ ?v3 ?v4 ))))))(fun_app$ (fun_app$a ?v2 ?v0 )?v1 ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(=> (and (member$ ?v0 (tset$ ?v1 ))(and (forall ((?v2 A_b_tllist$ ))(=> (= ?v1 (tCons$ ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_b_tllist$ ))(=> (and (= ?v1 (tCons$ ?v2 ?v3 ))(member$ ?v0 (tset$ ?v3 )))false ))))false )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ ))(=> (member$ ?v0 (tset$ ?v1 ))(member$ ?v0 (tset$ (tCons$ ?v2 ?v1 ))))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(member$ ?v0 (tset$ (tCons$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(lmember$ ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (member$ ?v0 (lset$ ?v1 ))(lsetp$ ?v1 ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (lsetp$ ?v0 ?v1 )(member$ ?v1 (lset$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (tllist_of_llist$ (terminal$ ?v0 )(llist_of_tllist$ ?v0 ))?v0 )):named a10 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_b_tllist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (and (forall ((?v6 A$ )(?v7 A$ ))(=> (and (member$ ?v6 (tset$ ?v0 ))(and (member$ ?v7 (tset$ ?v1 ))(= (fun_app$b ?v2 ?v6 )(fun_app$b ?v3 ?v7 ))))(= ?v6 ?v7 )))(and (forall ((?v6 B$ )(?v7 B$ ))(=> (and (member$a ?v6 (set2_tllist$ ?v0 ))(and (member$a ?v7 (set2_tllist$ ?v1 ))(= (fun_app$c ?v4 ?v6 )(fun_app$c ?v5 ?v7 ))))(= ?v6 ?v7 )))(= (tmap$ ?v2 ?v4 ?v0 )(tmap$ ?v3 ?v5 ?v1 ))))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ ))(=> (and (forall ((?v5 A$ ))(=> (member$ ?v5 (tset$ ?v0 ))(= (fun_app$b ?v1 ?v5 )(fun_app$b ?v2 ?v5 ))))(forall ((?v5 B$ ))(=> (member$a ?v5 (set2_tllist$ ?v0 ))(= (fun_app$c ?v3 ?v5 )(fun_app$c ?v4 ?v5 )))))(= (tmap$ ?v1 ?v3 ?v0 )(tmap$ ?v2 ?v4 ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ ))(= (ttl$ (tmap$ ?v0 ?v1 ?v2 ))(tmap$ ?v0 ?v1 (ttl$ ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (terminal$ (tCons$ ?v0 ?v1 ))(terminal$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (terminal$ (ttl$ ?v0 ))(terminal$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (tmap$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))(tCons$ (fun_app$b ?v0 ?v2 )(tmap$ ?v0 ?v1 ?v3 ))):pattern ((tmap$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a17 ))
(check-sat )
;(get-unsat-core )
