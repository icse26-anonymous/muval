;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort B_a_b_tllist_fun$ 0 )
(declare-sort A_b_tllist$ 0)
(declare-sort A_llist$ 0)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun x$ ()A$ )
(declare-fun tr$ ()A_b_tllist$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun member$ (B$ B_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun tappend$ (A_b_tllist$ B_a_b_tllist_fun$ )A_b_tllist$ )
(declare-fun lappendt$ (A_llist$ A_b_tllist$ )A_b_tllist$ )
(declare-fun pred_tllist$ (A_bool_fun$ B_bool_fun$ A_b_tllist$ )Bool )
(declare-fun set2_tllist$ (A_b_tllist$ )B_set$ )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$ (B$ A_llist$ )A_b_tllist$ )
(assert (! (not (= (lappendt$ (lCons$ x$ xs$ )tr$ )(tCons$ x$ (lappendt$ xs$ tr$ )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))(and (fun_app$ ?v0 ?v2 )(pred_tllist$ ?v0 ?v1 ?v3 ))):pattern ((pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (llist_of_tllist$ (tCons$ ?v0 ?v1 ))(lCons$ ?v0 (llist_of_tllist$ ?v1 ))):pattern ((tCons$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (tllist_of_llist$ ?v0 (lCons$ ?v1 ?v2 ))(tCons$ ?v1 (tllist_of_llist$ ?v0 ?v2 ))):pattern ((tllist_of_llist$ ?v0 (lCons$ ?v1 ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 B_a_b_tllist_fun$ ))(! (= (tappend$ (tCons$ ?v0 ?v1 )?v2 )(tCons$ ?v0 (tappend$ ?v1 ?v2 ))):pattern ((tappend$ (tCons$ ?v0 ?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (lappendt$ lNil$ ?v0 )?v0 ):pattern ((lappendt$ lNil$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (terminal$ (tCons$ ?v0 ?v1 ))(terminal$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (set2_tllist$ (tCons$ ?v0 ?v1 ))(set2_tllist$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_tllist$ )(?v2 A$ ))(=> (member$ ?v0 (set2_tllist$ ?v1 ))(member$ ?v0 (set2_tllist$ (tCons$ ?v2 ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (llist_of_tllist$ (tllist_of_llist$ ?v0 ?v1 ))?v1 )):named a11 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (tllist_of_llist$ (terminal$ ?v0 )(llist_of_tllist$ ?v0 ))?v0 )):named a12 ))
(check-sat )
;(get-unsat-core )
