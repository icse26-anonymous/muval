;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort D_bool_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Enat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort C_c_bool_fun_fun$ 0 )
(declare-sort C_d_bool_fun_fun$ 0 )
(declare-sort D_c_bool_fun_fun$ 0 )
(declare-sort D_d_bool_fun_fun$ 0 )
(declare-sort A_c_tllist_bool_fun$ 0 )
(declare-sort B_d_tllist_bool_fun$ 0 )
(declare-sort A_c_tllist_a_c_tllist_bool_fun_fun$ 0 )
(declare-sort B_d_tllist_b_d_tllist_bool_fun_fun$ 0 )
(declare-sort A_c_tllist$ 0)
(declare-sort B_d_tllist$ 0)
(declare-fun terminal$ (A_c_tllist$)C$)
(declare-fun tNil$ (C$ )A_c_tllist$)
(declare-fun thd$ (A_c_tllist$)A$)
(declare-fun ttl$ (A_c_tllist$)A_c_tllist$)
(declare-fun tCons$ (A$ A_c_tllist$ )A_c_tllist$)
(declare-fun terminal$a (B_d_tllist$)D$)
(declare-fun tNil$a (D$ )B_d_tllist$)
(declare-fun thd$a (B_d_tllist$)B$)
(declare-fun ttl$a (B_d_tllist$)B_d_tllist$)
(declare-fun tCons$a (B$ B_d_tllist$ )B_d_tllist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Nat$ )
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun q$ ()C_d_bool_fun_fun$ )
(declare-fun uu$ ()B_b_bool_fun_fun$ )
(declare-fun xs$ ()A_c_tllist$ )
(declare-fun ys$ ()B_d_tllist$ )
(declare-fun uua$ ()D_d_bool_fun_fun$ )
(declare-fun uub$ ()B_d_tllist_b_d_tllist_bool_fun_fun$ )
(declare-fun uuc$ ()A_a_bool_fun_fun$ )
(declare-fun uud$ ()C_c_bool_fun_fun$ )
(declare-fun uue$ ()A_c_tllist_a_c_tllist_bool_fun_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun tnth$ (A_c_tllist$ Nat$ )A$ )
(declare-fun less$a (Nat$ )Nat_bool_fun$ )
(declare-fun tnth$a (B_d_tllist$ Nat$ )B$ )
(declare-fun fun_app$ (B_d_tllist_bool_fun$ B_d_tllist$ )Bool )
(declare-fun tlength$ (A_c_tllist$ )Enat$ )
(declare-fun fun_app$a (B_d_tllist_b_d_tllist_bool_fun_fun$ B_d_tllist$ )B_d_tllist_bool_fun$ )
(declare-fun fun_app$b (A_c_tllist_bool_fun$ A_c_tllist$ )Bool )
(declare-fun fun_app$c (A_c_tllist_a_c_tllist_bool_fun_fun$ A_c_tllist$ )A_c_tllist_bool_fun$ )
(declare-fun fun_app$d (D_bool_fun$ D$ )Bool )
(declare-fun fun_app$e (D_d_bool_fun_fun$ D$ )D_bool_fun$ )
(declare-fun fun_app$f (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$g (C_c_bool_fun_fun$ C$ )C_bool_fun$ )
(declare-fun fun_app$h (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$i (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$j (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$k (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$l (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$m (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$n (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$o (D_c_bool_fun_fun$ D$ )C_bool_fun$ )
(declare-fun fun_app$p (C_d_bool_fun_fun$ C$ )D_bool_fun$ )
(declare-fun fun_app$q (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$r (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun fun_app$s (Enat_nat_fun$ Enat$ )Nat$ )
(declare-fun fun_app$t (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun fun_app$u (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun tlength$a (B_d_tllist$ )Enat$ )
(declare-fun tllist_all2$ (A_b_bool_fun_fun$ C_d_bool_fun_fun$ A_c_tllist$ B_d_tllist$ )Bool )
(declare-fun tllist_all2$a (B_b_bool_fun_fun$ D_d_bool_fun_fun$ )B_d_tllist_b_d_tllist_bool_fun_fun$ )
(declare-fun tllist_all2$b (A_a_bool_fun_fun$ C_c_bool_fun_fun$ )A_c_tllist_a_c_tllist_bool_fun_fun$ )
(declare-fun tllist_all2$c (B_a_bool_fun_fun$ D_c_bool_fun_fun$ B_d_tllist$ A_c_tllist$ )Bool )
(assert (! (forall ((?v0 B_d_tllist$ )(?v1 B_d_tllist$ ))(! (= (fun_app$ (fun_app$a uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uub$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_c_tllist$ ))(! (= (fun_app$b (fun_app$c uue$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uue$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 D$ )(?v1 D$ ))(! (= (fun_app$d (fun_app$e uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uua$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 C$ )(?v1 C$ ))(! (= (fun_app$f (fun_app$g uud$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uud$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$h (fun_app$i uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$h (fun_app$i uu$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$j (fun_app$k uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$j (fun_app$k uuc$ ?v0 )?v1 )))):named a5 ))
(assert (! (not (fun_app$h (fun_app$l p$ (tnth$ xs$ n$ ))(tnth$a ys$ n$ ))):named a6 ))
(assert (! (tllist_all2$ p$ q$ xs$ ys$ ):named a7 ))
(assert (! (fun_app$m (less$ (enat$ n$ ))(tlength$ xs$ )):named a8 ))
(assert (! (= (tllist_all2$a uu$ uua$ )uub$ ):named a9 ))
(assert (! (= (tllist_all2$b uuc$ uud$ )uue$ ):named a10 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 B_d_tllist$ )(?v4 B_b_bool_fun_fun$ )(?v5 D_d_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (tllist_all2$a ?v0 ?v1 )?v2 )?v3 )(and (forall ((?v6 B$ )(?v7 B$ ))(=> (fun_app$h (fun_app$i ?v0 ?v6 )?v7 )(fun_app$h (fun_app$i ?v4 ?v6 )?v7 )))(forall ((?v6 D$ )(?v7 D$ ))(=> (fun_app$d (fun_app$e ?v1 ?v6 )?v7 )(fun_app$d (fun_app$e ?v5 ?v6 )?v7 )))))(fun_app$ (fun_app$a (tllist_all2$a ?v4 ?v5 )?v2 )?v3 ))):named a11 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 D_c_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 A_c_tllist$ )(?v4 B_a_bool_fun_fun$ )(?v5 D_c_bool_fun_fun$ ))(=> (and (tllist_all2$c ?v0 ?v1 ?v2 ?v3 )(and (forall ((?v6 B$ )(?v7 A$ ))(=> (fun_app$j (fun_app$n ?v0 ?v6 )?v7 )(fun_app$j (fun_app$n ?v4 ?v6 )?v7 )))(forall ((?v6 D$ )(?v7 C$ ))(=> (fun_app$f (fun_app$o ?v1 ?v6 )?v7 )(fun_app$f (fun_app$o ?v5 ?v6 )?v7 )))))(tllist_all2$c ?v4 ?v5 ?v2 ?v3 ))):named a12 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 A_c_tllist$ )(?v4 A_a_bool_fun_fun$ )(?v5 C_c_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (tllist_all2$b ?v0 ?v1 )?v2 )?v3 )(and (forall ((?v6 A$ )(?v7 A$ ))(=> (fun_app$j (fun_app$k ?v0 ?v6 )?v7 )(fun_app$j (fun_app$k ?v4 ?v6 )?v7 )))(forall ((?v6 C$ )(?v7 C$ ))(=> (fun_app$f (fun_app$g ?v1 ?v6 )?v7 )(fun_app$f (fun_app$g ?v5 ?v6 )?v7 )))))(fun_app$b (fun_app$c (tllist_all2$b ?v4 ?v5 )?v2 )?v3 ))):named a13 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 C_d_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 B_d_tllist$ )(?v4 A_b_bool_fun_fun$ )(?v5 C_d_bool_fun_fun$ ))(=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(and (forall ((?v6 A$ )(?v7 B$ ))(=> (fun_app$h (fun_app$l ?v0 ?v6 )?v7 )(fun_app$h (fun_app$l ?v4 ?v6 )?v7 )))(forall ((?v6 C$ )(?v7 D$ ))(=> (fun_app$d (fun_app$p ?v1 ?v6 )?v7 )(fun_app$d (fun_app$p ?v5 ?v6 )?v7 )))))(tllist_all2$ ?v4 ?v5 ?v2 ?v3 ))):named a14 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 D_c_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 A_c_tllist$ ))(=> (tllist_all2$c ?v0 ?v1 ?v2 ?v3 )(= (tlength$a ?v2 )(tlength$ ?v3 )))):named a15 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 B_d_tllist$ )(?v3 B_d_tllist$ ))(=> (fun_app$ (fun_app$a (tllist_all2$a ?v0 ?v1 )?v2 )?v3 )(= (tlength$a ?v2 )(tlength$a ?v3 )))):named a16 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 A_c_tllist$ ))(=> (fun_app$b (fun_app$c (tllist_all2$b ?v0 ?v1 )?v2 )?v3 )(= (tlength$ ?v2 )(tlength$ ?v3 )))):named a17 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 C_d_bool_fun_fun$ )(?v2 A_c_tllist$ )(?v3 B_d_tllist$ ))(=> (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(= (tlength$ ?v2 )(tlength$a ?v3 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (fun_app$m (less$ ?v0 )(enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$m (less$ ?v3 )?v2 )(fun_app$m ?v0 ?v3 )))(fun_app$m ?v0 ?v2 )))(fun_app$m ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$m (less$ ?v0 )?v1 )(fun_app$m (less$ ?v1 )?v0 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$q (less$a ?v0 )?v1 )(fun_app$q (less$a ?v1 )?v0 )))):named a23 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (fun_app$m (less$ ?v0 )?v1 ))(or (fun_app$m (less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (fun_app$q (less$a ?v0 )?v1 ))(or (fun_app$q (less$a ?v1 )?v0 )(= ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (=> (fun_app$m (less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$m (less$ ?v1 )?v0 )false )))false )):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (=> (fun_app$q (less$a ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$q (less$a ?v1 )?v0 )false )))false )):named a27 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$m (less$ ?v3 )?v2 )(fun_app$m ?v0 ?v3 )))(fun_app$m ?v0 ?v2 )))(fun_app$m ?v0 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(=> (fun_app$q (less$a ?v3 )?v2 )(fun_app$q ?v0 ?v3 )))(fun_app$q ?v0 ?v2 )))(fun_app$q ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat_enat_fun$ )(?v2 Enat$ )(?v3 Enat$ ))(=> (and (= ?v0 (fun_app$r ?v1 ?v2 ))(and (fun_app$m (less$ ?v2 )?v3 )(forall ((?v4 Enat$ )(?v5 Enat$ ))(=> (fun_app$m (less$ ?v4 )?v5 )(fun_app$m (less$ (fun_app$r ?v1 ?v4 ))(fun_app$r ?v1 ?v5 ))))))(fun_app$m (less$ ?v0 )(fun_app$r ?v1 ?v3 )))):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat_nat_fun$ )(?v2 Enat$ )(?v3 Enat$ ))(=> (and (= ?v0 (fun_app$s ?v1 ?v2 ))(and (fun_app$m (less$ ?v2 )?v3 )(forall ((?v4 Enat$ )(?v5 Enat$ ))(=> (fun_app$m (less$ ?v4 )?v5 )(fun_app$q (less$a (fun_app$s ?v1 ?v4 ))(fun_app$s ?v1 ?v5 ))))))(fun_app$q (less$a ?v0 )(fun_app$s ?v1 ?v3 )))):named a31 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat_enat_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (= ?v0 (fun_app$t ?v1 ?v2 ))(and (fun_app$q (less$a ?v2 )?v3 )(forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (fun_app$q (less$a ?v4 )?v5 )(fun_app$m (less$ (fun_app$t ?v1 ?v4 ))(fun_app$t ?v1 ?v5 ))))))(fun_app$m (less$ ?v0 )(fun_app$t ?v1 ?v3 )))):named a32 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (= ?v0 (fun_app$u ?v1 ?v2 ))(and (fun_app$q (less$a ?v2 )?v3 )(forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (fun_app$q (less$a ?v4 )?v5 )(fun_app$q (less$a (fun_app$u ?v1 ?v4 ))(fun_app$u ?v1 ?v5 ))))))(fun_app$q (less$a ?v0 )(fun_app$u ?v1 ?v3 )))):named a33 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (= ?v0 ?v1 )(fun_app$m (less$ ?v1 )?v2 ))(fun_app$m (less$ ?v0 )?v2 ))):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (= ?v0 ?v1 )(fun_app$q (less$a ?v1 )?v2 ))(fun_app$q (less$a ?v0 )?v2 ))):named a35 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (fun_app$m (less$ ?v0 )?v1 )(=> (not false )(fun_app$m (less$ ?v1 )?v0 )))false )):named a36 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$q (less$a ?v0 )?v1 )(=> (not false )(fun_app$q (less$a ?v1 )?v0 )))false )):named a37 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$m (less$ (enat$ ?v0 ))(enat$ ?v1 ))(fun_app$q (less$a ?v0 )?v1 )):pattern ((fun_app$m (less$ (enat$ ?v0 ))(enat$ ?v1 ))))):named a38 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (and (fun_app$m (less$ ?v0 )(enat$ ?v1 ))(forall ((?v2 Nat$ ))(=> (and (= ?v0 (enat$ ?v2 ))(fun_app$q (less$a ?v2 )?v1 ))false )))false )):named a39 ))
(check-sat )
;(get-unsat-core )
