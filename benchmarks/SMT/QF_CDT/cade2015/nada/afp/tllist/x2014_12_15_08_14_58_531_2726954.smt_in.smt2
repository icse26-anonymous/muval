;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Unit$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Unit_b_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_b_tllist_a_b_tllist_fun$ 0 )
(declare-sort A_bool_fun_a_b_tllist_a_b_tllist_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_b_tllist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun b$ ()B$ )
(declare-fun p$ ()A_bool_fun$ )
(declare-fun tr$ ()A_b_tllist$ )
(declare-fun tset$ (A_b_tllist$ )A_set$ )
(declare-fun unity$ ()Unit$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_b_tllist_a_b_tllist_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun is_TNil$ (A_b_tllist$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfilter$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun tfilter$ (B$ )A_bool_fun_a_b_tllist_a_b_tllist_fun_fun$ )
(declare-fun fun_app$a (A_bool_fun_a_b_tllist_a_b_tllist_fun_fun$ A_bool_fun$ )A_b_tllist_a_b_tllist_fun$ )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$c (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$d (Unit_b_fun$ Unit$ )B$ )
(declare-fun lappendt$ (A_llist$ A_b_tllist$ )A_b_tllist$ )
(declare-fun tfilter$a (Unit_b_fun$ )A_bool_fun_a_b_tllist_a_b_tllist_fun_fun$ )
(declare-fun ldistinct$ (A_llist$ )Bool )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$ (B$ A_llist$ )A_b_tllist$ )
(assert (! (not (= (llist_of_tllist$ (fun_app$ (fun_app$a (tfilter$ b$ )p$ )tr$ ))(fun_app$b (lfilter$ p$ )(llist_of_tllist$ tr$ )))):named a0 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$b (lfilter$ ?v0 )(fun_app$b (lfilter$ ?v0 )?v1 ))(fun_app$b (lfilter$ ?v0 )?v1 ))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 A_bool_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (fun_app$ (fun_app$a (tfilter$ ?v0 )?v1 )(tCons$ ?v2 ?v3 ))(ite (fun_app$c ?v1 ?v2 )(tCons$ ?v2 (fun_app$ (fun_app$a (tfilter$ ?v0 )?v1 )?v3 ))(fun_app$ (fun_app$a (tfilter$ ?v0 )?v1 )?v3 ))):pattern ((fun_app$ (fun_app$a (tfilter$ ?v0 )?v1 )(tCons$ ?v2 ?v3 ))))):named a2 ))
(assert (! (forall ((?v0 B$ )(?v1 A_bool_fun$ )(?v2 B$ ))(! (= (fun_app$ (fun_app$a (tfilter$ ?v0 )?v1 )(tNil$ ?v2 ))(tNil$ ?v2 )):pattern ((fun_app$ (fun_app$a (tfilter$ ?v0 )?v1 )(tNil$ ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (llist_of_tllist$ (tllist_of_llist$ ?v0 ?v1 ))?v1 )):named a4 ))
(assert (! (forall ((?v0 Unit_b_fun$ ))(! (= (tfilter$a ?v0 )(tfilter$ (fun_app$d ?v0 unity$ ))):pattern ((tfilter$a ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$b (lfilter$ ?v0 )lNil$ )lNil$ ):pattern ((lfilter$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_tllist$ ))(= (llist_of_tllist$ (lappendt$ ?v0 ?v1 ))(lappend$ ?v0 (llist_of_tllist$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$b (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))(ite (fun_app$c ?v0 ?v1 )(lCons$ ?v1 (fun_app$b (lfilter$ ?v0 )?v2 ))(fun_app$b (lfilter$ ?v0 )?v2 ))):pattern ((fun_app$b (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 B$ )(?v1 A_bool_fun$ )(?v2 A_b_tllist$ ))(= (is_TNil$ (fun_app$ (fun_app$a (tfilter$ ?v0 )?v1 )?v2 ))(forall ((?v3 A$ ))(=> (member$ ?v3 (tset$ ?v2 ))(not (fun_app$c ?v1 ?v3 )))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (fun_app$b (lfilter$ ?v1 )?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_bool_fun$ ))(=> (lprefix$ ?v0 ?v1 )(lprefix$ (fun_app$b (lfilter$ ?v2 )?v0 )(fun_app$b (lfilter$ ?v2 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a16 ))
(check-sat )
;(get-unsat-core )
