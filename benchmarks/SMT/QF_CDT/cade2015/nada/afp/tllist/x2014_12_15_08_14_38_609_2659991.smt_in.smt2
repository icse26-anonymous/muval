;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort E$ 0 )
(declare-sort F$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort A_e_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_f_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort C_e_fun$ 0 )
(declare-sort D_b_fun$ 0 )
(declare-sort D_d_fun$ 0 )
(declare-sort E_a_fun$ 0 )
(declare-sort E_c_fun$ 0 )
(declare-sort E_e_fun$ 0 )
(declare-sort F_b_fun$ 0 )
(declare-sort F_f_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort D_bool_fun$ 0 )
(declare-sort E_bool_fun$ 0 )
(declare-sort F_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_c_bool_fun_fun$ 0 )
(declare-sort A_e_bool_fun_fun$ 0 )
(declare-sort C_a_bool_fun_fun$ 0 )
(declare-sort C_c_bool_fun_fun$ 0 )
(declare-sort C_e_bool_fun_fun$ 0 )
(declare-sort E_a_bool_fun_fun$ 0 )
(declare-sort E_c_bool_fun_fun$ 0 )
(declare-sort E_e_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_e_llist_fun$ 0 )
(declare-sort C_a_fun_c_a_fun_fun$ 0 )
(declare-sort C_llist_a_llist_fun$ 0 )
(declare-sort C_llist_c_llist_fun$ 0 )
(declare-sort E_a_fun_e_a_fun_fun$ 0 )
(declare-sort E_llist_a_llist_fun$ 0 )
(declare-sort E_llist_e_llist_fun$ 0 )
(declare-sort A_llist_b_bool_fun_fun$ 0 )
(declare-sort C_llist_d_bool_fun_fun$ 0 )
(declare-sort E_llist_f_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_bool_fun$ 0 )
(declare-sort C_llist_d_prod_bool_fun$ 0 )
(declare-sort E_llist_f_prod_bool_fun$ 0 )
(declare-sort B_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort B_e_llist_f_prod_bool_fun_fun$ 0 )
(declare-sort D_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort D_e_llist_f_prod_bool_fun_fun$ 0 )
(declare-sort F_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort C_a_fun_c_llist_a_llist_fun_fun$ 0 )
(declare-sort E_a_fun_e_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_fun$ 0 )
(declare-sort A_llist_b_prod_e_llist_f_prod_fun$ 0 )
(declare-sort C_llist_d_prod_a_llist_b_prod_fun$ 0 )
(declare-sort C_llist_d_prod_c_llist_d_prod_fun$ 0 )
(declare-sort E_llist_f_prod_a_llist_b_prod_fun$ 0 )
(declare-sort E_llist_f_prod_e_llist_f_prod_fun$ 0 )
(declare-sort B_b_fun_a_llist_b_bool_fun_fun_fun$ 0 )
(declare-sort B_f_fun_a_llist_b_bool_fun_fun_fun$ 0 )
(declare-sort D_b_fun_c_llist_d_bool_fun_fun_fun$ 0 )
(declare-sort F_b_fun_e_llist_f_bool_fun_fun_fun$ 0 )
(declare-sort F_f_fun_e_llist_f_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_e_llist_f_prod_bool_fun_fun_fun$ 0 )
(declare-sort C_llist_d_a_llist_b_prod_bool_fun_fun_fun$ 0 )
(declare-sort C_llist_d_e_llist_f_prod_bool_fun_fun_fun$ 0 )
(declare-sort E_llist_f_a_llist_b_prod_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_e_llist_f_prod_bool_fun_fun$ 0 )
(declare-sort C_llist_d_prod_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort C_llist_d_prod_e_llist_f_prod_bool_fun_fun$ 0 )
(declare-sort E_llist_f_prod_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort C_llist_a_llist_fun_c_llist_a_llist_fun_fun$ 0 )
(declare-sort E_llist_a_llist_fun_e_llist_a_llist_fun_fun$ 0 )
(declare-sort D_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun$ 0 )
(declare-sort F_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun$ 0 )
(declare-sort C_a_fun_c_a_fun_fun_c_a_fun_c_llist_a_llist_fun_fun_fun$ 0 )
(declare-sort E_a_fun_e_a_fun_fun_e_a_fun_e_llist_a_llist_fun_fun_fun$ 0 )
(declare-sort C_a_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ 0 )
(declare-sort E_a_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ 0 )
(declare-sort C_a_fun_c_llist_a_llist_fun_fun_c_a_fun_c_llist_a_llist_fun_fun_fun$ 0 )
(declare-sort E_a_fun_e_llist_a_llist_fun_fun_e_a_fun_e_llist_a_llist_fun_fun_fun$ 0 )
(declare-sort C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ 0 )
(declare-sort E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ 0 )
(declare-sort D_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ 0 )
(declare-sort F_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_llist_b_prod$ 0)
(declare-fun fst$ (A_llist_b_prod$)A_llist$)
(declare-fun snd$ (A_llist_b_prod$)B$)
(declare-fun pair$ (A_llist$ B$ )A_llist_b_prod$)
(declare-sort C_llist$ 0)
(declare-fun lNil$a ()C_llist$)
(declare-fun lhd$a (C_llist$)C$)
(declare-fun ltl$a (C_llist$)C_llist$)
(declare-fun lCons$a (C$ C_llist$ )C_llist$)
(declare-sort C_llist_d_prod$ 0)
(declare-fun fst$a (C_llist_d_prod$)C_llist$)
(declare-fun snd$a (C_llist_d_prod$)D$)
(declare-fun pair$a (C_llist$ D$ )C_llist_d_prod$)
(declare-sort E_llist$ 0)
(declare-fun lNil$b ()E_llist$)
(declare-fun lhd$b (E_llist$)E$)
(declare-fun ltl$b (E_llist$)E_llist$)
(declare-fun lCons$b (E$ E_llist$ )E_llist$)
(declare-sort E_llist_f_prod$ 0)
(declare-fun fst$b (E_llist_f_prod$)E_llist$)
(declare-fun snd$b (E_llist_f_prod$)F$)
(declare-fun pair$b (E_llist$ F$ )E_llist_f_prod$)
(declare-fun fa$ ()C_a_fun$ )
(declare-fun ga$ ()D_b_fun$ )
(declare-fun uu$ (A_llist$ B$ )A_llist_b_bool_fun_fun$ )
(declare-fun f_a$ ()E_a_fun$ )
(declare-fun g_a$ ()F_b_fun$ )
(declare-fun uua$ ()A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uub$ ()C_e_bool_fun_fun$ )
(declare-fun uuc$ (C_llist$ D$ )E_llist_f_bool_fun_fun$ )
(declare-fun uud$ ()C_llist_d_e_llist_f_prod_bool_fun_fun_fun$ )
(declare-fun uue$ ()E_llist_e_llist_fun$ )
(declare-fun uuf$ ()F_f_fun$ )
(declare-fun uug$ ()C_llist_c_llist_fun$ )
(declare-fun uuh$ ()D_d_fun$ )
(declare-fun uui$ ()A_llist_a_llist_fun$ )
(declare-fun uuj$ ()B_b_fun$ )
(declare-fun uuk$ ()C_c_fun$ )
(declare-fun uul$ ()A_a_fun$ )
(declare-fun uum$ ()E_e_fun$ )
(declare-fun uun$ (Bool C_llist_d_bool_fun_fun$ )C_llist_d_bool_fun_fun$ )
(declare-fun uuo$ (Bool A_llist_b_bool_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uup$ (Bool E_llist_f_bool_fun_fun$ )E_llist_f_bool_fun_fun$ )
(declare-fun uuq$ (A_e_bool_fun_fun$ C_a_fun$ )C_e_bool_fun_fun$ )
(declare-fun uur$ (C_e_bool_fun_fun$ C_c_fun$ )C_e_bool_fun_fun$ )
(declare-fun uus$ (A_a_bool_fun_fun$ C_a_fun$ )C_a_bool_fun_fun$ )
(declare-fun uut$ (A_c_bool_fun_fun$ E_a_fun$ )E_c_bool_fun_fun$ )
(declare-fun uuu$ (A_c_bool_fun_fun$ C_a_fun$ )C_c_bool_fun_fun$ )
(declare-fun uuv$ (C_e_bool_fun_fun$ A_c_fun$ )A_e_bool_fun_fun$ )
(declare-fun uuw$ (C_e_bool_fun_fun$ E_c_fun$ )E_e_bool_fun_fun$ )
(declare-fun uux$ (A_e_bool_fun_fun$ A_a_fun$ )A_e_bool_fun_fun$ )
(declare-fun uuy$ (A_e_bool_fun_fun$ E_a_fun$ )E_e_bool_fun_fun$ )
(declare-fun uuz$ (C_a_bool_fun_fun$ A_c_fun$ )A_a_bool_fun_fun$ )
(declare-fun uva$ (C_a_bool_fun_fun$ E_a_fun$ )C_e_bool_fun_fun$ )
(declare-fun uvb$ (C_e_bool_fun_fun$ E_e_fun$ )C_e_bool_fun_fun$ )
(declare-fun uvc$ (A_a_bool_fun_fun$ E_a_fun$ )A_e_bool_fun_fun$ )
(declare-fun uvd$ (E_a_bool_fun_fun$ E_a_fun$ )E_e_bool_fun_fun$ )
(declare-fun uve$ (E_a_bool_fun_fun$ C_a_fun$ )E_c_bool_fun_fun$ )
(declare-fun uvf$ (C_e_bool_fun_fun$ A_e_fun$ )C_a_bool_fun_fun$ )
(declare-fun uvg$ (C_e_bool_fun_fun$ C_e_fun$ )C_c_bool_fun_fun$ )
(declare-fun uvh$ (A_e_bool_fun_fun$ E_e_fun$ )A_e_bool_fun_fun$ )
(declare-fun uvi$ (C_a_bool_fun_fun$ A_a_fun$ )C_a_bool_fun_fun$ )
(declare-fun uvj$ (C_a_bool_fun_fun$ C_a_fun$ )C_c_bool_fun_fun$ )
(declare-fun uvk$ (C_a_fun$ C_a_fun$ )C_c_bool_fun_fun$ )
(declare-fun uvl$ (E_a_fun$ C_a_fun$ )E_c_bool_fun_fun$ )
(declare-fun uvm$ (E_a_fun$ E_a_fun$ )E_e_bool_fun_fun$ )
(declare-fun uvn$ (C_a_fun$ E_a_fun$ )C_e_bool_fun_fun$ )
(declare-fun uvo$ (E_a_fun$ A_a_fun$ )E_a_bool_fun_fun$ )
(declare-fun uvp$ (A_c_fun$ C_c_fun$ )A_c_bool_fun_fun$ )
(declare-fun uvq$ (A_c_fun$ A_c_fun$ )A_a_bool_fun_fun$ )
(declare-fun uvr$ (A_a_fun$ C_a_fun$ )A_c_bool_fun_fun$ )
(declare-fun uvs$ (A_a_fun$ A_a_fun$ )A_a_bool_fun_fun$ )
(declare-fun uvt$ (C_e_fun$ E_e_fun$ )C_e_bool_fun_fun$ )
(declare-fun uvu$ (A_llist_b_bool_fun_fun$ C_llist_a_llist_fun$ )D_b_fun_c_llist_d_bool_fun_fun_fun$ )
(declare-fun uvv$ (A_llist_b_bool_fun_fun$ A_llist_a_llist_fun$ )B_b_fun_a_llist_b_bool_fun_fun_fun$ )
(declare-fun uvw$ (A_llist_b_bool_fun_fun$ E_llist_a_llist_fun$ )F_b_fun_e_llist_f_bool_fun_fun_fun$ )
(declare-fun uvx$ (E_llist_f_bool_fun_fun$ A_llist_e_llist_fun$ )B_f_fun_a_llist_b_bool_fun_fun_fun$ )
(declare-fun uvy$ (E_llist_f_bool_fun_fun$ E_llist_e_llist_fun$ )F_f_fun_e_llist_f_bool_fun_fun_fun$ )
(declare-fun uvz$ (A_llist_b_e_llist_f_prod_bool_fun_fun_fun$ C_llist_a_llist_fun$ D_b_fun$ )C_llist_d_e_llist_f_prod_bool_fun_fun_fun$ )
(declare-fun uwa$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ C_llist_a_llist_fun$ D_b_fun$ )C_llist_d_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uwb$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ E_llist_a_llist_fun$ F_b_fun$ )E_llist_f_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uwc$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist_a_llist_fun$ B_b_fun$ )A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uwd$ (C_llist_d_e_llist_f_prod_bool_fun_fun_fun$ C_llist_c_llist_fun$ D_d_fun$ )C_llist_d_e_llist_f_prod_bool_fun_fun_fun$ )
(declare-fun uwe$ (C_llist_d_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_prod$ )C_llist_d_bool_fun_fun$ )
(declare-fun uwf$ (A_llist_b_e_llist_f_prod_bool_fun_fun_fun$ E_llist_f_prod$ )A_llist_b_bool_fun_fun$ )
(declare-fun uwg$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_prod$ )A_llist_b_bool_fun_fun$ )
(declare-fun uwh$ (C_llist_d_e_llist_f_prod_bool_fun_fun_fun$ E_llist_f_prod$ )C_llist_d_bool_fun_fun$ )
(declare-fun xsa$ ()C_llist_d_prod$ )
(declare-fun ysa$ ()E_llist_f_prod$ )
(declare-fun comp$ (C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ C_a_fun_c_llist_a_llist_fun_fun$ )C_a_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )
(declare-fun lmap$ ()C_a_fun_c_llist_a_llist_fun_fun$ )
(declare-fun comp$a (E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ E_a_fun_e_llist_a_llist_fun_fun$ )E_a_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )
(declare-fun comp$b (D_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ C_a_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )C_a_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )
(declare-fun comp$c (E_a_fun_e_llist_a_llist_fun_fun$ )E_a_fun_e_a_fun_fun_e_a_fun_e_llist_a_llist_fun_fun_fun$ )
(declare-fun comp$d (E_a_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ E_a_fun_e_a_fun_fun$ )E_a_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )
(declare-fun comp$e (C_a_fun_c_llist_a_llist_fun_fun$ )C_a_fun_c_a_fun_fun_c_a_fun_c_llist_a_llist_fun_fun_fun$ )
(declare-fun comp$f (C_a_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ C_a_fun_c_a_fun_fun$ )C_a_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )
(declare-fun comp$g (A_llist_b_prod_e_llist_f_prod_bool_fun_fun$ C_llist_d_prod_a_llist_b_prod_fun$ )C_llist_d_prod_e_llist_f_prod_bool_fun_fun$ )
(declare-fun comp$h (A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ C_llist_d_prod_a_llist_b_prod_fun$ )C_llist_d_prod_a_llist_b_prod_bool_fun_fun$ )
(declare-fun comp$i (A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ E_llist_f_prod_a_llist_b_prod_fun$ )E_llist_f_prod_a_llist_b_prod_bool_fun_fun$ )
(declare-fun comp$j (A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ A_llist_b_prod_a_llist_b_prod_fun$ )A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ )
(declare-fun comp$k (A_llist_b_prod_bool_fun$ C_llist_d_prod_a_llist_b_prod_fun$ )C_llist_d_prod_bool_fun$ )
(declare-fun comp$l (A_llist_b_prod_bool_fun$ A_llist_b_prod_a_llist_b_prod_fun$ )A_llist_b_prod_bool_fun$ )
(declare-fun comp$m (A_llist_b_prod_bool_fun$ E_llist_f_prod_a_llist_b_prod_fun$ )E_llist_f_prod_bool_fun$ )
(declare-fun comp$n (C_llist_d_prod_e_llist_f_prod_bool_fun_fun$ C_llist_d_prod_c_llist_d_prod_fun$ )C_llist_d_prod_e_llist_f_prod_bool_fun_fun$ )
(declare-fun comp$o (E_llist_f_prod_bool_fun$ A_llist_b_prod_e_llist_f_prod_fun$ )A_llist_b_prod_bool_fun$ )
(declare-fun comp$p (E_llist_f_prod_bool_fun$ E_llist_f_prod_e_llist_f_prod_fun$ )E_llist_f_prod_bool_fun$ )
(declare-fun comp$q (D_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )
(declare-fun comp$r (F_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )
(declare-fun comp$s (F_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ E_a_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )E_a_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )
(declare-fun comp$t (C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ C_llist_a_llist_fun_c_llist_a_llist_fun_fun$ )C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )
(declare-fun comp$u (C_llist_a_llist_fun_c_llist_a_llist_fun_fun$ )C_a_fun_c_llist_a_llist_fun_fun_c_a_fun_c_llist_a_llist_fun_fun_fun$ )
(declare-fun comp$v (E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ E_llist_a_llist_fun_e_llist_a_llist_fun_fun$ )E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )
(declare-fun comp$w (E_llist_a_llist_fun_e_llist_a_llist_fun_fun$ )E_a_fun_e_llist_a_llist_fun_fun_e_a_fun_e_llist_a_llist_fun_fun_fun$ )
(declare-fun lmap$a ()E_a_fun_e_llist_a_llist_fun_fun$ )
(declare-fun lmap$b (E_c_fun$ E_llist$ )C_llist$ )
(declare-fun lmap$c (A_e_fun$ )A_llist_e_llist_fun$ )
(declare-fun lmap$d (C_e_fun$ C_llist$ )E_llist$ )
(declare-fun lmap$e (E_e_fun$ )E_llist_e_llist_fun$ )
(declare-fun lmap$f (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lmap$g (A_c_fun$ A_llist$ )C_llist$ )
(declare-fun lmap$h (C_c_fun$ )C_llist_c_llist_fun$ )
(declare-fun fun_app$ (E_bool_fun$ E$ )Bool )
(declare-fun lfinite$ (C_llist$ )Bool )
(declare-fun fun_app$a (C_e_bool_fun_fun$ C$ )E_bool_fun$ )
(declare-fun fun_app$b (C_a_fun$ C$ )A$ )
(declare-fun fun_app$c (E_a_fun$ E$ )A$ )
(declare-fun fun_app$d (D_e_llist_f_prod_bool_fun_fun$ D$ )E_llist_f_prod_bool_fun$ )
(declare-fun fun_app$e (C_llist_d_e_llist_f_prod_bool_fun_fun_fun$ C_llist$ )D_e_llist_f_prod_bool_fun_fun$ )
(declare-fun fun_app$f (B_a_llist_b_prod_bool_fun_fun$ B$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$g (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist$ )B_a_llist_b_prod_bool_fun_fun$ )
(declare-fun fun_app$h (E_e_bool_fun_fun$ E$ )E_bool_fun$ )
(declare-fun fun_app$i (E_c_fun$ E$ )C$ )
(declare-fun fun_app$j (C_c_fun$ C$ )C$ )
(declare-fun fun_app$k (A_e_bool_fun_fun$ A$ )E_bool_fun$ )
(declare-fun fun_app$l (A_c_fun$ A$ )C$ )
(declare-fun fun_app$m (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$n (C_a_bool_fun_fun$ C$ )A_bool_fun$ )
(declare-fun fun_app$o (A_a_fun$ A$ )A$ )
(declare-fun fun_app$p (E_c_bool_fun_fun$ E$ )C_bool_fun$ )
(declare-fun fun_app$q (A_c_bool_fun_fun$ A$ )C_bool_fun$ )
(declare-fun fun_app$r (C_c_bool_fun_fun$ C$ )C_bool_fun$ )
(declare-fun fun_app$s (D_bool_fun$ D$ )Bool )
(declare-fun fun_app$t (C_llist_d_bool_fun_fun$ C_llist$ )D_bool_fun$ )
(declare-fun fun_app$u (E_llist_f_prod_bool_fun$ E_llist_f_prod$ )Bool )
(declare-fun fun_app$v (A_llist_b_prod_bool_fun$ A_llist_b_prod$ )Bool )
(declare-fun fun_app$w (D_a_llist_b_prod_bool_fun_fun$ D$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$x (C_llist_d_a_llist_b_prod_bool_fun_fun_fun$ C_llist$ )D_a_llist_b_prod_bool_fun_fun$ )
(declare-fun fun_app$y (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$z (A_llist_b_bool_fun_fun$ A_llist$ )B_bool_fun$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun lfinite$b (E_llist$ )Bool )
(declare-fun map_prod$ ()C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )
(declare-fun case_prod$ (E_llist_f_bool_fun_fun$ )E_llist_f_prod_bool_fun$ )
(declare-fun fun_app$aa (B_e_llist_f_prod_bool_fun_fun$ B$ )E_llist_f_prod_bool_fun$ )
(declare-fun fun_app$ab (A_llist_b_e_llist_f_prod_bool_fun_fun_fun$ A_llist$ )B_e_llist_f_prod_bool_fun_fun$ )
(declare-fun fun_app$ac (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$ad (E_a_bool_fun_fun$ E$ )A_bool_fun$ )
(declare-fun fun_app$ae (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$af (E_e_fun$ E$ )E$ )
(declare-fun fun_app$ag (C_e_fun$ C$ )E$ )
(declare-fun fun_app$ah (A_e_fun$ A$ )E$ )
(declare-fun fun_app$ai (F_bool_fun$ F$ )Bool )
(declare-fun fun_app$aj (E_llist_f_bool_fun_fun$ E_llist$ )F_bool_fun$ )
(declare-fun fun_app$ak (D_b_fun$ D$ )B$ )
(declare-fun fun_app$al (F_b_fun$ F$ )B$ )
(declare-fun fun_app$am (F_f_fun_e_llist_f_bool_fun_fun_fun$ F_f_fun$ )E_llist_f_bool_fun_fun$ )
(declare-fun fun_app$an (E_llist_e_llist_fun$ E_llist$ )E_llist$ )
(declare-fun fun_app$ao (F_f_fun$ F$ )F$ )
(declare-fun fun_app$ap (B_f_fun_a_llist_b_bool_fun_fun_fun$ B_f_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun fun_app$aq (A_llist_e_llist_fun$ A_llist$ )E_llist$ )
(declare-fun fun_app$ar (B_f_fun$ B$ )F$ )
(declare-fun fun_app$as (C_llist_c_llist_fun$ C_llist$ )C_llist$ )
(declare-fun fun_app$at (D_d_fun$ D$ )D$ )
(declare-fun fun_app$au (F_b_fun_e_llist_f_bool_fun_fun_fun$ F_b_fun$ )E_llist_f_bool_fun_fun$ )
(declare-fun fun_app$av (E_llist_a_llist_fun$ E_llist$ )A_llist$ )
(declare-fun fun_app$aw (D_b_fun_c_llist_d_bool_fun_fun_fun$ D_b_fun$ )C_llist_d_bool_fun_fun$ )
(declare-fun fun_app$ax (C_llist_a_llist_fun$ C_llist$ )A_llist$ )
(declare-fun fun_app$ay (B_b_fun_a_llist_b_bool_fun_fun_fun$ B_b_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun fun_app$az (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$ba (B_b_fun$ B$ )B$ )
(declare-fun fun_app$bb (F_a_llist_b_prod_bool_fun_fun$ F$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$bc (E_llist_f_a_llist_b_prod_bool_fun_fun_fun$ E_llist$ )F_a_llist_b_prod_bool_fun_fun$ )
(declare-fun fun_app$bd (A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ A_llist_b_prod$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$be (C_llist_d_prod_a_llist_b_prod_fun$ C_llist_d_prod$ )A_llist_b_prod$ )
(declare-fun fun_app$bf (D_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun$ D_b_fun$ )C_llist_d_prod_a_llist_b_prod_fun$ )
(declare-fun fun_app$bg (C_a_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ C_a_fun$ )D_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun$ )
(declare-fun fun_app$bh (E_llist_f_prod_a_llist_b_prod_fun$ E_llist_f_prod$ )A_llist_b_prod$ )
(declare-fun fun_app$bi (F_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun$ F_b_fun$ )E_llist_f_prod_a_llist_b_prod_fun$ )
(declare-fun fun_app$bj (E_a_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ E_a_fun$ )F_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun$ )
(declare-fun fun_app$bk (C_llist_d_prod_e_llist_f_prod_bool_fun_fun$ C_llist_d_prod$ )E_llist_f_prod_bool_fun$ )
(declare-fun fun_app$bl (C_a_fun_c_llist_a_llist_fun_fun$ C_a_fun$ )C_llist_a_llist_fun$ )
(declare-fun fun_app$bm (E_a_fun_e_llist_a_llist_fun_fun$ E_a_fun$ )E_llist_a_llist_fun$ )
(declare-fun fun_app$bn (E_llist_f_prod_e_llist_f_prod_fun$ E_llist_f_prod$ )E_llist_f_prod$ )
(declare-fun fun_app$bo (C_llist_d_prod_c_llist_d_prod_fun$ C_llist_d_prod$ )C_llist_d_prod$ )
(declare-fun fun_app$bp (A_llist_b_prod_a_llist_b_prod_fun$ A_llist_b_prod$ )A_llist_b_prod$ )
(declare-fun fun_app$bq (C_llist_d_prod_bool_fun$ C_llist_d_prod$ )Bool )
(declare-fun fun_app$br (D_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ D_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun$ )D_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun$ )
(declare-fun fun_app$bs (E_a_fun_e_a_fun_fun_e_a_fun_e_llist_a_llist_fun_fun_fun$ E_a_fun_e_a_fun_fun$ )E_a_fun_e_llist_a_llist_fun_fun$ )
(declare-fun fun_app$bt (E_a_fun_e_a_fun_fun$ E_a_fun$ )E_a_fun$ )
(declare-fun fun_app$bu (C_a_fun_c_a_fun_fun_c_a_fun_c_llist_a_llist_fun_fun_fun$ C_a_fun_c_a_fun_fun$ )C_a_fun_c_llist_a_llist_fun_fun$ )
(declare-fun fun_app$bv (C_a_fun_c_a_fun_fun$ C_a_fun$ )C_a_fun$ )
(declare-fun fun_app$bw (C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ C_llist_a_llist_fun$ )D_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun$ )
(declare-fun fun_app$bx (E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ E_llist_a_llist_fun$ )F_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun$ )
(declare-fun fun_app$by (A_llist_b_prod_e_llist_f_prod_fun$ A_llist_b_prod$ )E_llist_f_prod$ )
(declare-fun fun_app$bz (A_llist_b_prod_e_llist_f_prod_bool_fun_fun$ A_llist_b_prod$ )E_llist_f_prod_bool_fun$ )
(declare-fun fun_app$ca (C_llist_d_prod_a_llist_b_prod_bool_fun_fun$ C_llist_d_prod$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$cb (E_llist_f_prod_a_llist_b_prod_bool_fun_fun$ E_llist_f_prod$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$cc (C_a_fun_c_llist_a_llist_fun_fun_c_a_fun_c_llist_a_llist_fun_fun_fun$ C_a_fun_c_llist_a_llist_fun_fun$ )C_a_fun_c_llist_a_llist_fun_fun$ )
(declare-fun fun_app$cd (E_a_fun_e_llist_a_llist_fun_fun_e_a_fun_e_llist_a_llist_fun_fun_fun$ E_a_fun_e_llist_a_llist_fun_fun$ )E_a_fun_e_llist_a_llist_fun_fun$ )
(declare-fun map_prod$a ()E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )
(declare-fun map_prod$b (E_llist_e_llist_fun$ F_f_fun$ )E_llist_f_prod_e_llist_f_prod_fun$ )
(declare-fun map_prod$c (C_llist_c_llist_fun$ D_d_fun$ )C_llist_d_prod_c_llist_d_prod_fun$ )
(declare-fun map_prod$d (A_llist_a_llist_fun$ B_b_fun$ )A_llist_b_prod_a_llist_b_prod_fun$ )
(declare-fun map_prod$e (A_llist_e_llist_fun$ B_f_fun$ )A_llist_b_prod_e_llist_f_prod_fun$ )
(declare-fun case_prod$a (A_llist_b_bool_fun_fun$ )A_llist_b_prod_bool_fun$ )
(declare-fun case_prod$b (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ )
(declare-fun case_prod$c (C_llist_d_e_llist_f_prod_bool_fun_fun_fun$ )C_llist_d_prod_e_llist_f_prod_bool_fun_fun$ )
(declare-fun case_prod$d (C_llist_d_bool_fun_fun$ )C_llist_d_prod_bool_fun$ )
(declare-fun case_prod$e (A_llist_b_e_llist_f_prod_bool_fun_fun_fun$ )A_llist_b_prod_e_llist_f_prod_bool_fun_fun$ )
(declare-fun case_prod$f (C_llist_d_a_llist_b_prod_bool_fun_fun_fun$ )C_llist_d_prod_a_llist_b_prod_bool_fun_fun$ )
(declare-fun case_prod$g (E_llist_f_a_llist_b_prod_bool_fun_fun_fun$ )E_llist_f_prod_a_llist_b_prod_bool_fun_fun$ )
(declare-fun llist_all2$ (C_e_bool_fun_fun$ C_llist$ E_llist$ )Bool )
(declare-fun llist_all2$a (A_e_bool_fun_fun$ A_llist$ E_llist$ )Bool )
(declare-fun llist_all2$b (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun llist_all2$c (C_a_bool_fun_fun$ C_llist$ A_llist$ )Bool )
(declare-fun llist_all2$d (A_c_bool_fun_fun$ A_llist$ C_llist$ )Bool )
(declare-fun llist_all2$e (E_c_bool_fun_fun$ E_llist$ C_llist$ )Bool )
(declare-fun llist_all2$f (C_c_bool_fun_fun$ C_llist$ C_llist$ )Bool )
(declare-fun llist_all2$g (E_e_bool_fun_fun$ E_llist$ E_llist$ )Bool )
(declare-fun llist_all2$h (E_a_bool_fun_fun$ E_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 C$ )(?v1 E$ ))(! (= (fun_app$ (fun_app$a uub$ ?v0 )?v1 )(= (fun_app$b fa$ ?v0 )(fun_app$c f_a$ ?v1 ))):pattern ((fun_app$ (fun_app$a uub$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 D$ ))(! (= (fun_app$d (fun_app$e uud$ ?v0 )?v1 )(case_prod$ (uuc$ ?v0 ?v1 ))):pattern ((fun_app$d (fun_app$e uud$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$f (fun_app$g uua$ ?v0 )?v1 )(case_prod$a (uu$ ?v0 ?v1 ))):pattern ((fun_app$f (fun_app$g uua$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 E_c_fun$ )(?v2 E$ ))(! (= (fun_app$h (uuw$ ?v0 ?v1 )?v2 )(fun_app$a ?v0 (fun_app$i ?v1 ?v2 ))):pattern ((fun_app$h (uuw$ ?v0 ?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_c_fun$ )(?v2 C$ ))(! (= (fun_app$a (uur$ ?v0 ?v1 )?v2 )(fun_app$a ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$a (uur$ ?v0 ?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A$ ))(! (= (fun_app$k (uuv$ ?v0 ?v1 )?v2 )(fun_app$a ?v0 (fun_app$l ?v1 ?v2 ))):pattern ((fun_app$k (uuv$ ?v0 ?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A$ ))(! (= (fun_app$m (uuz$ ?v0 ?v1 )?v2 )(fun_app$n ?v0 (fun_app$l ?v1 ?v2 ))):pattern ((fun_app$m (uuz$ ?v0 ?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_e_bool_fun_fun$ )(?v1 E_a_fun$ )(?v2 E$ ))(! (= (fun_app$h (uuy$ ?v0 ?v1 )?v2 )(fun_app$k ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$h (uuy$ ?v0 ?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_e_bool_fun_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$a (uuq$ ?v0 ?v1 )?v2 )(fun_app$k ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$a (uuq$ ?v0 ?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_e_bool_fun_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$k (uux$ ?v0 ?v1 )?v2 )(fun_app$k ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$k (uux$ ?v0 ?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_c_bool_fun_fun$ )(?v1 E_a_fun$ )(?v2 E$ ))(! (= (fun_app$p (uut$ ?v0 ?v1 )?v2 )(fun_app$q ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$p (uut$ ?v0 ?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_c_bool_fun_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$r (uuu$ ?v0 ?v1 )?v2 )(fun_app$q ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$r (uuu$ ?v0 ?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$n (uus$ ?v0 ?v1 )?v2 )(fun_app$m ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$n (uus$ ?v0 ?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 C_llist_d_e_llist_f_prod_bool_fun_fun_fun$ )(?v1 E_llist_f_prod$ )(?v2 C_llist$ )(?v3 D$ ))(! (= (fun_app$s (fun_app$t (uwh$ ?v0 ?v1 )?v2 )?v3 )(fun_app$u (fun_app$d (fun_app$e ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$s (fun_app$t (uwh$ ?v0 ?v1 )?v2 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 C_llist_d_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 C_llist$ )(?v3 D$ ))(! (= (fun_app$s (fun_app$t (uwe$ ?v0 ?v1 )?v2 )?v3 )(fun_app$v (fun_app$w (fun_app$x ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$s (fun_app$t (uwe$ ?v0 ?v1 )?v2 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_b_e_llist_f_prod_bool_fun_fun_fun$ )(?v1 E_llist_f_prod$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$y (fun_app$z (uwf$ ?v0 ?v1 )?v2 )?v3 )(fun_app$u (fun_app$aa (fun_app$ab ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$y (fun_app$z (uwf$ ?v0 ?v1 )?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$y (fun_app$z (uwg$ ?v0 ?v1 )?v2 )?v3 )(fun_app$v (fun_app$f (fun_app$g ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$y (fun_app$z (uwg$ ?v0 ?v1 )?v2 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 E_a_bool_fun_fun$ )(?v1 E_a_fun$ )(?v2 E$ )(?v3 E$ ))(! (= (fun_app$ (fun_app$h (uvd$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ac (fun_app$ad ?v0 ?v2 )(fun_app$c ?v1 ?v3 ))):pattern ((fun_app$ (fun_app$h (uvd$ ?v0 ?v1 )?v2 )?v3 )))):named a17 ))
(assert (! (forall ((?v0 E_a_bool_fun_fun$ )(?v1 C_a_fun$ )(?v2 E$ )(?v3 C$ ))(! (= (fun_app$ae (fun_app$p (uve$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ac (fun_app$ad ?v0 ?v2 )(fun_app$b ?v1 ?v3 ))):pattern ((fun_app$ae (fun_app$p (uve$ ?v0 ?v1 )?v2 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 E_e_fun$ )(?v2 C$ )(?v3 E$ ))(! (= (fun_app$ (fun_app$a (uvb$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ (fun_app$a ?v0 ?v2 )(fun_app$af ?v1 ?v3 ))):pattern ((fun_app$ (fun_app$a (uvb$ ?v0 ?v1 )?v2 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_e_fun$ )(?v2 C$ )(?v3 C$ ))(! (= (fun_app$ae (fun_app$r (uvg$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ (fun_app$a ?v0 ?v2 )(fun_app$ag ?v1 ?v3 ))):pattern ((fun_app$ae (fun_app$r (uvg$ ?v0 ?v1 )?v2 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 A_e_fun$ )(?v2 C$ )(?v3 A$ ))(! (= (fun_app$ac (fun_app$n (uvf$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ (fun_app$a ?v0 ?v2 )(fun_app$ah ?v1 ?v3 ))):pattern ((fun_app$ac (fun_app$n (uvf$ ?v0 ?v1 )?v2 )?v3 )))):named a21 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 E_a_fun$ )(?v2 C$ )(?v3 E$ ))(! (= (fun_app$ (fun_app$a (uva$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ac (fun_app$n ?v0 ?v2 )(fun_app$c ?v1 ?v3 ))):pattern ((fun_app$ (fun_app$a (uva$ ?v0 ?v1 )?v2 )?v3 )))):named a22 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 C_a_fun$ )(?v2 C$ )(?v3 C$ ))(! (= (fun_app$ae (fun_app$r (uvj$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ac (fun_app$n ?v0 ?v2 )(fun_app$b ?v1 ?v3 ))):pattern ((fun_app$ae (fun_app$r (uvj$ ?v0 ?v1 )?v2 )?v3 )))):named a23 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 A_a_fun$ )(?v2 C$ )(?v3 A$ ))(! (= (fun_app$ac (fun_app$n (uvi$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ac (fun_app$n ?v0 ?v2 )(fun_app$o ?v1 ?v3 ))):pattern ((fun_app$ac (fun_app$n (uvi$ ?v0 ?v1 )?v2 )?v3 )))):named a24 ))
(assert (! (forall ((?v0 A_e_bool_fun_fun$ )(?v1 E_e_fun$ )(?v2 A$ )(?v3 E$ ))(! (= (fun_app$ (fun_app$k (uvh$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ (fun_app$k ?v0 ?v2 )(fun_app$af ?v1 ?v3 ))):pattern ((fun_app$ (fun_app$k (uvh$ ?v0 ?v1 )?v2 )?v3 )))):named a25 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 E_a_fun$ )(?v2 A$ )(?v3 E$ ))(! (= (fun_app$ (fun_app$k (uvc$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ac (fun_app$m ?v0 ?v2 )(fun_app$c ?v1 ?v3 ))):pattern ((fun_app$ (fun_app$k (uvc$ ?v0 ?v1 )?v2 )?v3 )))):named a26 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 D$ )(?v2 E_llist$ )(?v3 F$ ))(! (= (fun_app$ai (fun_app$aj (uuc$ ?v0 ?v1 )?v2 )?v3 )(and (llist_all2$ uub$ ?v0 ?v2 )(=> (lfinite$ ?v0 )(= (fun_app$ak ga$ ?v1 )(fun_app$al g_a$ ?v3 ))))):pattern ((fun_app$ai (fun_app$aj (uuc$ ?v0 ?v1 )?v2 )?v3 )))):named a27 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$y (fun_app$z (uu$ ?v0 ?v1 )?v2 )?v3 )(and (= ?v0 ?v2 )(=> (lfinite$a ?v2 )(= ?v1 ?v3 )))):pattern ((fun_app$y (fun_app$z (uu$ ?v0 ?v1 )?v2 )?v3 )))):named a28 ))
(assert (! (forall ((?v0 E_a_fun$ )(?v1 E_a_fun$ )(?v2 E$ )(?v3 E$ ))(! (= (fun_app$ (fun_app$h (uvm$ ?v0 ?v1 )?v2 )?v3 )(= (fun_app$c ?v0 ?v2 )(fun_app$c ?v1 ?v3 ))):pattern ((fun_app$ (fun_app$h (uvm$ ?v0 ?v1 )?v2 )?v3 )))):named a29 ))
(assert (! (forall ((?v0 E_a_fun$ )(?v1 C_a_fun$ )(?v2 E$ )(?v3 C$ ))(! (= (fun_app$ae (fun_app$p (uvl$ ?v0 ?v1 )?v2 )?v3 )(= (fun_app$c ?v0 ?v2 )(fun_app$b ?v1 ?v3 ))):pattern ((fun_app$ae (fun_app$p (uvl$ ?v0 ?v1 )?v2 )?v3 )))):named a30 ))
(assert (! (forall ((?v0 E_a_fun$ )(?v1 A_a_fun$ )(?v2 E$ )(?v3 A$ ))(! (= (fun_app$ac (fun_app$ad (uvo$ ?v0 ?v1 )?v2 )?v3 )(= (fun_app$c ?v0 ?v2 )(fun_app$o ?v1 ?v3 ))):pattern ((fun_app$ac (fun_app$ad (uvo$ ?v0 ?v1 )?v2 )?v3 )))):named a31 ))
(assert (! (forall ((?v0 C_e_fun$ )(?v1 E_e_fun$ )(?v2 C$ )(?v3 E$ ))(! (= (fun_app$ (fun_app$a (uvt$ ?v0 ?v1 )?v2 )?v3 )(= (fun_app$ag ?v0 ?v2 )(fun_app$af ?v1 ?v3 ))):pattern ((fun_app$ (fun_app$a (uvt$ ?v0 ?v1 )?v2 )?v3 )))):named a32 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 E_a_fun$ )(?v2 C$ )(?v3 E$ ))(! (= (fun_app$ (fun_app$a (uvn$ ?v0 ?v1 )?v2 )?v3 )(= (fun_app$b ?v0 ?v2 )(fun_app$c ?v1 ?v3 ))):pattern ((fun_app$ (fun_app$a (uvn$ ?v0 ?v1 )?v2 )?v3 )))):named a33 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_a_fun$ )(?v2 C$ )(?v3 C$ ))(! (= (fun_app$ae (fun_app$r (uvk$ ?v0 ?v1 )?v2 )?v3 )(= (fun_app$b ?v0 ?v2 )(fun_app$b ?v1 ?v3 ))):pattern ((fun_app$ae (fun_app$r (uvk$ ?v0 ?v1 )?v2 )?v3 )))):named a34 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 C_c_fun$ )(?v2 A$ )(?v3 C$ ))(! (= (fun_app$ae (fun_app$q (uvp$ ?v0 ?v1 )?v2 )?v3 )(= (fun_app$l ?v0 ?v2 )(fun_app$j ?v1 ?v3 ))):pattern ((fun_app$ae (fun_app$q (uvp$ ?v0 ?v1 )?v2 )?v3 )))):named a35 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_c_fun$ )(?v2 A$ )(?v3 A$ ))(! (= (fun_app$ac (fun_app$m (uvq$ ?v0 ?v1 )?v2 )?v3 )(= (fun_app$l ?v0 ?v2 )(fun_app$l ?v1 ?v3 ))):pattern ((fun_app$ac (fun_app$m (uvq$ ?v0 ?v1 )?v2 )?v3 )))):named a36 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 A$ )(?v3 C$ ))(! (= (fun_app$ae (fun_app$q (uvr$ ?v0 ?v1 )?v2 )?v3 )(= (fun_app$o ?v0 ?v2 )(fun_app$b ?v1 ?v3 ))):pattern ((fun_app$ae (fun_app$q (uvr$ ?v0 ?v1 )?v2 )?v3 )))):named a37 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ )(?v3 A$ ))(! (= (fun_app$ac (fun_app$m (uvs$ ?v0 ?v1 )?v2 )?v3 )(= (fun_app$o ?v0 ?v2 )(fun_app$o ?v1 ?v3 ))):pattern ((fun_app$ac (fun_app$m (uvs$ ?v0 ?v1 )?v2 )?v3 )))):named a38 ))
(assert (! (forall ((?v0 Bool )(?v1 E_llist_f_bool_fun_fun$ )(?v2 E_llist$ )(?v3 F$ ))(! (= (fun_app$ai (fun_app$aj (uup$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$ai (fun_app$aj ?v1 ?v2 )?v3 ))):pattern ((fun_app$ai (fun_app$aj (uup$ ?v0 ?v1 )?v2 )?v3 )))):named a39 ))
(assert (! (forall ((?v0 Bool )(?v1 C_llist_d_bool_fun_fun$ )(?v2 C_llist$ )(?v3 D$ ))(! (= (fun_app$s (fun_app$t (uun$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$s (fun_app$t ?v1 ?v2 )?v3 ))):pattern ((fun_app$s (fun_app$t (uun$ ?v0 ?v1 )?v2 )?v3 )))):named a40 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$y (fun_app$z (uuo$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$y (fun_app$z ?v1 ?v2 )?v3 ))):pattern ((fun_app$y (fun_app$z (uuo$ ?v0 ?v1 )?v2 )?v3 )))):named a41 ))
(assert (! (forall ((?v0 E_llist_f_bool_fun_fun$ )(?v1 E_llist_e_llist_fun$ )(?v2 F_f_fun$ )(?v3 E_llist$ )(?v4 F$ ))(! (= (fun_app$ai (fun_app$aj (fun_app$am (uvy$ ?v0 ?v1 )?v2 )?v3 )?v4 )(fun_app$ai (fun_app$aj ?v0 (fun_app$an ?v1 ?v3 ))(fun_app$ao ?v2 ?v4 ))):pattern ((fun_app$ai (fun_app$aj (fun_app$am (uvy$ ?v0 ?v1 )?v2 )?v3 )?v4 )))):named a42 ))
(assert (! (forall ((?v0 E_llist_f_bool_fun_fun$ )(?v1 A_llist_e_llist_fun$ )(?v2 B_f_fun$ )(?v3 A_llist$ )(?v4 B$ ))(! (= (fun_app$y (fun_app$z (fun_app$ap (uvx$ ?v0 ?v1 )?v2 )?v3 )?v4 )(fun_app$ai (fun_app$aj ?v0 (fun_app$aq ?v1 ?v3 ))(fun_app$ar ?v2 ?v4 ))):pattern ((fun_app$y (fun_app$z (fun_app$ap (uvx$ ?v0 ?v1 )?v2 )?v3 )?v4 )))):named a43 ))
(assert (! (forall ((?v0 C_llist_d_e_llist_f_prod_bool_fun_fun_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 D_d_fun$ )(?v3 C_llist$ )(?v4 D$ ))(! (= (fun_app$d (fun_app$e (uwd$ ?v0 ?v1 ?v2 )?v3 )?v4 )(fun_app$d (fun_app$e ?v0 (fun_app$as ?v1 ?v3 ))(fun_app$at ?v2 ?v4 ))):pattern ((fun_app$d (fun_app$e (uwd$ ?v0 ?v1 ?v2 )?v3 )?v4 )))):named a44 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 E_llist_a_llist_fun$ )(?v2 F_b_fun$ )(?v3 E_llist$ )(?v4 F$ ))(! (= (fun_app$ai (fun_app$aj (fun_app$au (uvw$ ?v0 ?v1 )?v2 )?v3 )?v4 )(fun_app$y (fun_app$z ?v0 (fun_app$av ?v1 ?v3 ))(fun_app$al ?v2 ?v4 ))):pattern ((fun_app$ai (fun_app$aj (fun_app$au (uvw$ ?v0 ?v1 )?v2 )?v3 )?v4 )))):named a45 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 C_llist_a_llist_fun$ )(?v2 D_b_fun$ )(?v3 C_llist$ )(?v4 D$ ))(! (= (fun_app$s (fun_app$t (fun_app$aw (uvu$ ?v0 ?v1 )?v2 )?v3 )?v4 )(fun_app$y (fun_app$z ?v0 (fun_app$ax ?v1 ?v3 ))(fun_app$ak ?v2 ?v4 ))):pattern ((fun_app$s (fun_app$t (fun_app$aw (uvu$ ?v0 ?v1 )?v2 )?v3 )?v4 )))):named a46 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 B_b_fun$ )(?v3 A_llist$ )(?v4 B$ ))(! (= (fun_app$y (fun_app$z (fun_app$ay (uvv$ ?v0 ?v1 )?v2 )?v3 )?v4 )(fun_app$y (fun_app$z ?v0 (fun_app$az ?v1 ?v3 ))(fun_app$ba ?v2 ?v4 ))):pattern ((fun_app$y (fun_app$z (fun_app$ay (uvv$ ?v0 ?v1 )?v2 )?v3 )?v4 )))):named a47 ))
(assert (! (forall ((?v0 A_llist_b_e_llist_f_prod_bool_fun_fun_fun$ )(?v1 C_llist_a_llist_fun$ )(?v2 D_b_fun$ )(?v3 C_llist$ )(?v4 D$ ))(! (= (fun_app$d (fun_app$e (uvz$ ?v0 ?v1 ?v2 )?v3 )?v4 )(fun_app$aa (fun_app$ab ?v0 (fun_app$ax ?v1 ?v3 ))(fun_app$ak ?v2 ?v4 ))):pattern ((fun_app$d (fun_app$e (uvz$ ?v0 ?v1 ?v2 )?v3 )?v4 )))):named a48 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 E_llist_a_llist_fun$ )(?v2 F_b_fun$ )(?v3 E_llist$ )(?v4 F$ ))(! (= (fun_app$bb (fun_app$bc (uwb$ ?v0 ?v1 ?v2 )?v3 )?v4 )(fun_app$f (fun_app$g ?v0 (fun_app$av ?v1 ?v3 ))(fun_app$al ?v2 ?v4 ))):pattern ((fun_app$bb (fun_app$bc (uwb$ ?v0 ?v1 ?v2 )?v3 )?v4 )))):named a49 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 C_llist_a_llist_fun$ )(?v2 D_b_fun$ )(?v3 C_llist$ )(?v4 D$ ))(! (= (fun_app$w (fun_app$x (uwa$ ?v0 ?v1 ?v2 )?v3 )?v4 )(fun_app$f (fun_app$g ?v0 (fun_app$ax ?v1 ?v3 ))(fun_app$ak ?v2 ?v4 ))):pattern ((fun_app$w (fun_app$x (uwa$ ?v0 ?v1 ?v2 )?v3 )?v4 )))):named a50 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 B_b_fun$ )(?v3 A_llist$ )(?v4 B$ ))(! (= (fun_app$f (fun_app$g (uwc$ ?v0 ?v1 ?v2 )?v3 )?v4 )(fun_app$f (fun_app$g ?v0 (fun_app$az ?v1 ?v3 ))(fun_app$ba ?v2 ?v4 ))):pattern ((fun_app$f (fun_app$g (uwc$ ?v0 ?v1 ?v2 )?v3 )?v4 )))):named a51 ))
(assert (! (forall ((?v0 E_llist$ ))(! (= (fun_app$an uue$ ?v0 )?v0 ):pattern ((fun_app$an uue$ ?v0 )))):named a52 ))
(assert (! (forall ((?v0 C_llist$ ))(! (= (fun_app$as uug$ ?v0 )?v0 ):pattern ((fun_app$as uug$ ?v0 )))):named a53 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$az uui$ ?v0 )?v0 ):pattern ((fun_app$az uui$ ?v0 )))):named a54 ))
(assert (! (forall ((?v0 F$ ))(! (= (fun_app$ao uuf$ ?v0 )?v0 ):pattern ((fun_app$ao uuf$ ?v0 )))):named a55 ))
(assert (! (forall ((?v0 E$ ))(! (= (fun_app$af uum$ ?v0 )?v0 ):pattern ((fun_app$af uum$ ?v0 )))):named a56 ))
(assert (! (forall ((?v0 D$ ))(! (= (fun_app$at uuh$ ?v0 )?v0 ):pattern ((fun_app$at uuh$ ?v0 )))):named a57 ))
(assert (! (forall ((?v0 C$ ))(! (= (fun_app$j uuk$ ?v0 )?v0 ):pattern ((fun_app$j uuk$ ?v0 )))):named a58 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ba uuj$ ?v0 )?v0 ):pattern ((fun_app$ba uuj$ ?v0 )))):named a59 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$o uul$ ?v0 )?v0 ):pattern ((fun_app$o uul$ ?v0 )))):named a60 ))
(assert (! (not (= (fun_app$v (fun_app$bd (case_prod$b uua$ )(fun_app$be (fun_app$bf (fun_app$bg (comp$ map_prod$ lmap$ )fa$ )ga$ )xsa$ ))(fun_app$bh (fun_app$bi (fun_app$bj (comp$a map_prod$a lmap$a )f_a$ )g_a$ )ysa$ ))(fun_app$u (fun_app$bk (case_prod$c uud$ )xsa$ )ysa$ ))):named a61 ))
(assert (! (forall ((?v0 E_c_fun$ )(?v1 E_llist$ ))(= (lfinite$ (lmap$b ?v0 ?v1 ))(lfinite$b ?v1 ))):named a62 ))
(assert (! (forall ((?v0 A_e_fun$ )(?v1 A_llist$ ))(= (lfinite$b (fun_app$aq (lmap$c ?v0 )?v1 ))(lfinite$a ?v1 ))):named a63 ))
(assert (! (forall ((?v0 C_e_fun$ )(?v1 C_llist$ ))(= (lfinite$b (lmap$d ?v0 ?v1 ))(lfinite$ ?v1 ))):named a64 ))
(assert (! (forall ((?v0 E_e_fun$ )(?v1 E_llist$ ))(= (lfinite$b (fun_app$an (lmap$e ?v0 )?v1 ))(lfinite$b ?v1 ))):named a65 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$a (fun_app$az (lmap$f ?v0 )?v1 ))(lfinite$a ?v1 ))):named a66 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$g ?v0 ?v1 ))(lfinite$a ?v1 ))):named a67 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_llist$ ))(= (lfinite$ (fun_app$as (lmap$h ?v0 )?v1 ))(lfinite$ ?v1 ))):named a68 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_llist$ ))(= (lfinite$a (fun_app$ax (fun_app$bl lmap$ ?v0 )?v1 ))(lfinite$ ?v1 ))):named a69 ))
(assert (! (forall ((?v0 E_a_fun$ )(?v1 E_llist$ ))(= (lfinite$a (fun_app$av (fun_app$bm lmap$a ?v0 )?v1 ))(lfinite$b ?v1 ))):named a70 ))
(assert (! (forall ((?v0 E_llist_f_prod$ ))(= (fun_app$bn (map_prod$b uue$ uuf$ )?v0 )?v0 )):named a71 ))
(assert (! (forall ((?v0 C_llist_d_prod$ ))(= (fun_app$bo (map_prod$c uug$ uuh$ )?v0 )?v0 )):named a72 ))
(assert (! (forall ((?v0 A_llist_b_prod$ ))(= (fun_app$bp (map_prod$d uui$ uuj$ )?v0 )?v0 )):named a73 ))
(assert (! (forall ((?v0 C_llist$ ))(= (fun_app$as (lmap$h uuk$ )?v0 )?v0 )):named a74 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$az (lmap$f uul$ )?v0 )?v0 )):named a75 ))
(assert (! (forall ((?v0 E_llist$ ))(= (fun_app$an (lmap$e uum$ )?v0 )?v0 )):named a76 ))
(assert (! (forall ((?v0 Bool )(?v1 C_llist_d_bool_fun_fun$ )(?v2 C_llist_d_prod$ ))(= (fun_app$bq (case_prod$d (uun$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$bq (case_prod$d ?v1 )?v2 )))):named a77 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$v (case_prod$a (uuo$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$v (case_prod$a ?v1 )?v2 )))):named a78 ))
(assert (! (forall ((?v0 Bool )(?v1 E_llist_f_bool_fun_fun$ )(?v2 E_llist_f_prod$ ))(= (fun_app$u (case_prod$ (uup$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$u (case_prod$ ?v1 )?v2 )))):named a79 ))
(assert (! (forall ((?v0 A_e_bool_fun_fun$ )(?v1 C_a_fun$ )(?v2 C_llist$ )(?v3 E_llist$ ))(= (llist_all2$a ?v0 (fun_app$ax (fun_app$bl lmap$ ?v1 )?v2 )?v3 )(llist_all2$ (uuq$ ?v0 ?v1 )?v2 ?v3 ))):named a80 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_c_fun$ )(?v2 C_llist$ )(?v3 E_llist$ ))(= (llist_all2$ ?v0 (fun_app$as (lmap$h ?v1 )?v2 )?v3 )(llist_all2$ (uur$ ?v0 ?v1 )?v2 ?v3 ))):named a81 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 C_a_fun$ )(?v2 C_llist$ )(?v3 A_llist$ ))(= (llist_all2$b ?v0 (fun_app$ax (fun_app$bl lmap$ ?v1 )?v2 )?v3 )(llist_all2$c (uus$ ?v0 ?v1 )?v2 ?v3 ))):named a82 ))
(assert (! (forall ((?v0 A_c_bool_fun_fun$ )(?v1 E_a_fun$ )(?v2 E_llist$ )(?v3 C_llist$ ))(= (llist_all2$d ?v0 (fun_app$av (fun_app$bm lmap$a ?v1 )?v2 )?v3 )(llist_all2$e (uut$ ?v0 ?v1 )?v2 ?v3 ))):named a83 ))
(assert (! (forall ((?v0 A_c_bool_fun_fun$ )(?v1 C_a_fun$ )(?v2 C_llist$ )(?v3 C_llist$ ))(= (llist_all2$d ?v0 (fun_app$ax (fun_app$bl lmap$ ?v1 )?v2 )?v3 )(llist_all2$f (uuu$ ?v0 ?v1 )?v2 ?v3 ))):named a84 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A_llist$ )(?v3 E_llist$ ))(= (llist_all2$ ?v0 (lmap$g ?v1 ?v2 )?v3 )(llist_all2$a (uuv$ ?v0 ?v1 )?v2 ?v3 ))):named a85 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 E_c_fun$ )(?v2 E_llist$ )(?v3 E_llist$ ))(= (llist_all2$ ?v0 (lmap$b ?v1 ?v2 )?v3 )(llist_all2$g (uuw$ ?v0 ?v1 )?v2 ?v3 ))):named a86 ))
(assert (! (forall ((?v0 A_e_bool_fun_fun$ )(?v1 A_a_fun$ )(?v2 A_llist$ )(?v3 E_llist$ ))(= (llist_all2$a ?v0 (fun_app$az (lmap$f ?v1 )?v2 )?v3 )(llist_all2$a (uux$ ?v0 ?v1 )?v2 ?v3 ))):named a87 ))
(assert (! (forall ((?v0 A_e_bool_fun_fun$ )(?v1 E_a_fun$ )(?v2 E_llist$ )(?v3 E_llist$ ))(= (llist_all2$a ?v0 (fun_app$av (fun_app$bm lmap$a ?v1 )?v2 )?v3 )(llist_all2$g (uuy$ ?v0 ?v1 )?v2 ?v3 ))):named a88 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A_llist$ )(?v3 A_llist$ ))(= (llist_all2$c ?v0 (lmap$g ?v1 ?v2 )?v3 )(llist_all2$b (uuz$ ?v0 ?v1 )?v2 ?v3 ))):named a89 ))
(assert (! (forall ((?v0 A_e_bool_fun_fun$ )(?v1 C_a_fun$ )(?v2 C_llist$ )(?v3 E_llist$ ))(= (llist_all2$a ?v0 (fun_app$ax (fun_app$bl lmap$ ?v1 )?v2 )?v3 )(llist_all2$ (uuq$ ?v0 ?v1 )?v2 ?v3 ))):named a90 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_c_fun$ )(?v2 C_llist$ )(?v3 E_llist$ ))(= (llist_all2$ ?v0 (fun_app$as (lmap$h ?v1 )?v2 )?v3 )(llist_all2$ (uur$ ?v0 ?v1 )?v2 ?v3 ))):named a91 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 C_a_fun$ )(?v2 C_llist$ )(?v3 A_llist$ ))(= (llist_all2$b ?v0 (fun_app$ax (fun_app$bl lmap$ ?v1 )?v2 )?v3 )(llist_all2$c (uus$ ?v0 ?v1 )?v2 ?v3 ))):named a92 ))
(assert (! (forall ((?v0 A_c_bool_fun_fun$ )(?v1 E_a_fun$ )(?v2 E_llist$ )(?v3 C_llist$ ))(= (llist_all2$d ?v0 (fun_app$av (fun_app$bm lmap$a ?v1 )?v2 )?v3 )(llist_all2$e (uut$ ?v0 ?v1 )?v2 ?v3 ))):named a93 ))
(assert (! (forall ((?v0 A_c_bool_fun_fun$ )(?v1 C_a_fun$ )(?v2 C_llist$ )(?v3 C_llist$ ))(= (llist_all2$d ?v0 (fun_app$ax (fun_app$bl lmap$ ?v1 )?v2 )?v3 )(llist_all2$f (uuu$ ?v0 ?v1 )?v2 ?v3 ))):named a94 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A_llist$ )(?v3 E_llist$ ))(= (llist_all2$ ?v0 (lmap$g ?v1 ?v2 )?v3 )(llist_all2$a (uuv$ ?v0 ?v1 )?v2 ?v3 ))):named a95 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 E_c_fun$ )(?v2 E_llist$ )(?v3 E_llist$ ))(= (llist_all2$ ?v0 (lmap$b ?v1 ?v2 )?v3 )(llist_all2$g (uuw$ ?v0 ?v1 )?v2 ?v3 ))):named a96 ))
(assert (! (forall ((?v0 A_e_bool_fun_fun$ )(?v1 A_a_fun$ )(?v2 A_llist$ )(?v3 E_llist$ ))(= (llist_all2$a ?v0 (fun_app$az (lmap$f ?v1 )?v2 )?v3 )(llist_all2$a (uux$ ?v0 ?v1 )?v2 ?v3 ))):named a97 ))
(assert (! (forall ((?v0 A_e_bool_fun_fun$ )(?v1 E_a_fun$ )(?v2 E_llist$ )(?v3 E_llist$ ))(= (llist_all2$a ?v0 (fun_app$av (fun_app$bm lmap$a ?v1 )?v2 )?v3 )(llist_all2$g (uuy$ ?v0 ?v1 )?v2 ?v3 ))):named a98 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A_llist$ )(?v3 A_llist$ ))(= (llist_all2$c ?v0 (lmap$g ?v1 ?v2 )?v3 )(llist_all2$b (uuz$ ?v0 ?v1 )?v2 ?v3 ))):named a99 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 C_llist$ )(?v2 E_a_fun$ )(?v3 E_llist$ ))(= (llist_all2$c ?v0 ?v1 (fun_app$av (fun_app$bm lmap$a ?v2 )?v3 ))(llist_all2$ (uva$ ?v0 ?v2 )?v1 ?v3 ))):named a100 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_llist$ )(?v2 E_e_fun$ )(?v3 E_llist$ ))(= (llist_all2$ ?v0 ?v1 (fun_app$an (lmap$e ?v2 )?v3 ))(llist_all2$ (uvb$ ?v0 ?v2 )?v1 ?v3 ))):named a101 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 E_a_fun$ )(?v3 E_llist$ ))(= (llist_all2$b ?v0 ?v1 (fun_app$av (fun_app$bm lmap$a ?v2 )?v3 ))(llist_all2$a (uvc$ ?v0 ?v2 )?v1 ?v3 ))):named a102 ))
(assert (! (forall ((?v0 E_a_bool_fun_fun$ )(?v1 E_llist$ )(?v2 E_a_fun$ )(?v3 E_llist$ ))(= (llist_all2$h ?v0 ?v1 (fun_app$av (fun_app$bm lmap$a ?v2 )?v3 ))(llist_all2$g (uvd$ ?v0 ?v2 )?v1 ?v3 ))):named a103 ))
(assert (! (forall ((?v0 E_a_bool_fun_fun$ )(?v1 E_llist$ )(?v2 C_a_fun$ )(?v3 C_llist$ ))(= (llist_all2$h ?v0 ?v1 (fun_app$ax (fun_app$bl lmap$ ?v2 )?v3 ))(llist_all2$e (uve$ ?v0 ?v2 )?v1 ?v3 ))):named a104 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_llist$ )(?v2 A_e_fun$ )(?v3 A_llist$ ))(= (llist_all2$ ?v0 ?v1 (fun_app$aq (lmap$c ?v2 )?v3 ))(llist_all2$c (uvf$ ?v0 ?v2 )?v1 ?v3 ))):named a105 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_e_fun$ )(?v3 C_llist$ ))(= (llist_all2$ ?v0 ?v1 (lmap$d ?v2 ?v3 ))(llist_all2$f (uvg$ ?v0 ?v2 )?v1 ?v3 ))):named a106 ))
(assert (! (forall ((?v0 A_e_bool_fun_fun$ )(?v1 A_llist$ )(?v2 E_e_fun$ )(?v3 E_llist$ ))(= (llist_all2$a ?v0 ?v1 (fun_app$an (lmap$e ?v2 )?v3 ))(llist_all2$a (uvh$ ?v0 ?v2 )?v1 ?v3 ))):named a107 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 C_llist$ )(?v2 A_a_fun$ )(?v3 A_llist$ ))(= (llist_all2$c ?v0 ?v1 (fun_app$az (lmap$f ?v2 )?v3 ))(llist_all2$c (uvi$ ?v0 ?v2 )?v1 ?v3 ))):named a108 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_a_fun$ )(?v3 C_llist$ ))(= (llist_all2$c ?v0 ?v1 (fun_app$ax (fun_app$bl lmap$ ?v2 )?v3 ))(llist_all2$f (uvj$ ?v0 ?v2 )?v1 ?v3 ))):named a109 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 C_llist$ )(?v2 E_a_fun$ )(?v3 E_llist$ ))(= (llist_all2$c ?v0 ?v1 (fun_app$av (fun_app$bm lmap$a ?v2 )?v3 ))(llist_all2$ (uva$ ?v0 ?v2 )?v1 ?v3 ))):named a110 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_llist$ )(?v2 E_e_fun$ )(?v3 E_llist$ ))(= (llist_all2$ ?v0 ?v1 (fun_app$an (lmap$e ?v2 )?v3 ))(llist_all2$ (uvb$ ?v0 ?v2 )?v1 ?v3 ))):named a111 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 E_a_fun$ )(?v3 E_llist$ ))(= (llist_all2$b ?v0 ?v1 (fun_app$av (fun_app$bm lmap$a ?v2 )?v3 ))(llist_all2$a (uvc$ ?v0 ?v2 )?v1 ?v3 ))):named a112 ))
(assert (! (forall ((?v0 E_a_bool_fun_fun$ )(?v1 E_llist$ )(?v2 E_a_fun$ )(?v3 E_llist$ ))(= (llist_all2$h ?v0 ?v1 (fun_app$av (fun_app$bm lmap$a ?v2 )?v3 ))(llist_all2$g (uvd$ ?v0 ?v2 )?v1 ?v3 ))):named a113 ))
(assert (! (forall ((?v0 E_a_bool_fun_fun$ )(?v1 E_llist$ )(?v2 C_a_fun$ )(?v3 C_llist$ ))(= (llist_all2$h ?v0 ?v1 (fun_app$ax (fun_app$bl lmap$ ?v2 )?v3 ))(llist_all2$e (uve$ ?v0 ?v2 )?v1 ?v3 ))):named a114 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_llist$ )(?v2 A_e_fun$ )(?v3 A_llist$ ))(= (llist_all2$ ?v0 ?v1 (fun_app$aq (lmap$c ?v2 )?v3 ))(llist_all2$c (uvf$ ?v0 ?v2 )?v1 ?v3 ))):named a115 ))
(assert (! (forall ((?v0 C_e_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_e_fun$ )(?v3 C_llist$ ))(= (llist_all2$ ?v0 ?v1 (lmap$d ?v2 ?v3 ))(llist_all2$f (uvg$ ?v0 ?v2 )?v1 ?v3 ))):named a116 ))
(assert (! (forall ((?v0 A_e_bool_fun_fun$ )(?v1 A_llist$ )(?v2 E_e_fun$ )(?v3 E_llist$ ))(= (llist_all2$a ?v0 ?v1 (fun_app$an (lmap$e ?v2 )?v3 ))(llist_all2$a (uvh$ ?v0 ?v2 )?v1 ?v3 ))):named a117 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 C_llist$ )(?v2 A_a_fun$ )(?v3 A_llist$ ))(= (llist_all2$c ?v0 ?v1 (fun_app$az (lmap$f ?v2 )?v3 ))(llist_all2$c (uvi$ ?v0 ?v2 )?v1 ?v3 ))):named a118 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_a_fun$ )(?v3 C_llist$ ))(= (llist_all2$c ?v0 ?v1 (fun_app$ax (fun_app$bl lmap$ ?v2 )?v3 ))(llist_all2$f (uvj$ ?v0 ?v2 )?v1 ?v3 ))):named a119 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_llist$ )(?v2 C_a_fun$ )(?v3 C_llist$ ))(= (= (fun_app$ax (fun_app$bl lmap$ ?v0 )?v1 )(fun_app$ax (fun_app$bl lmap$ ?v2 )?v3 ))(llist_all2$f (uvk$ ?v0 ?v2 )?v1 ?v3 ))):named a120 ))
(assert (! (forall ((?v0 E_a_fun$ )(?v1 E_llist$ )(?v2 C_a_fun$ )(?v3 C_llist$ ))(= (= (fun_app$av (fun_app$bm lmap$a ?v0 )?v1 )(fun_app$ax (fun_app$bl lmap$ ?v2 )?v3 ))(llist_all2$e (uvl$ ?v0 ?v2 )?v1 ?v3 ))):named a121 ))
(assert (! (forall ((?v0 E_a_fun$ )(?v1 E_llist$ )(?v2 E_a_fun$ )(?v3 E_llist$ ))(= (= (fun_app$av (fun_app$bm lmap$a ?v0 )?v1 )(fun_app$av (fun_app$bm lmap$a ?v2 )?v3 ))(llist_all2$g (uvm$ ?v0 ?v2 )?v1 ?v3 ))):named a122 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_llist$ )(?v2 E_a_fun$ )(?v3 E_llist$ ))(= (= (fun_app$ax (fun_app$bl lmap$ ?v0 )?v1 )(fun_app$av (fun_app$bm lmap$a ?v2 )?v3 ))(llist_all2$ (uvn$ ?v0 ?v2 )?v1 ?v3 ))):named a123 ))
(assert (! (forall ((?v0 E_a_fun$ )(?v1 E_llist$ )(?v2 A_a_fun$ )(?v3 A_llist$ ))(= (= (fun_app$av (fun_app$bm lmap$a ?v0 )?v1 )(fun_app$az (lmap$f ?v2 )?v3 ))(llist_all2$h (uvo$ ?v0 ?v2 )?v1 ?v3 ))):named a124 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_llist$ )(?v2 C_c_fun$ )(?v3 C_llist$ ))(= (= (lmap$g ?v0 ?v1 )(fun_app$as (lmap$h ?v2 )?v3 ))(llist_all2$d (uvp$ ?v0 ?v2 )?v1 ?v3 ))):named a125 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_llist$ )(?v2 A_c_fun$ )(?v3 A_llist$ ))(= (= (lmap$g ?v0 ?v1 )(lmap$g ?v2 ?v3 ))(llist_all2$b (uvq$ ?v0 ?v2 )?v1 ?v3 ))):named a126 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ )(?v2 C_a_fun$ )(?v3 C_llist$ ))(= (= (fun_app$az (lmap$f ?v0 )?v1 )(fun_app$ax (fun_app$bl lmap$ ?v2 )?v3 ))(llist_all2$d (uvr$ ?v0 ?v2 )?v1 ?v3 ))):named a127 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ )(?v2 A_a_fun$ )(?v3 A_llist$ ))(= (= (fun_app$az (lmap$f ?v0 )?v1 )(fun_app$az (lmap$f ?v2 )?v3 ))(llist_all2$b (uvs$ ?v0 ?v2 )?v1 ?v3 ))):named a128 ))
(assert (! (forall ((?v0 C_e_fun$ )(?v1 C_llist$ )(?v2 E_e_fun$ )(?v3 E_llist$ ))(= (= (lmap$d ?v0 ?v1 )(fun_app$an (lmap$e ?v2 )?v3 ))(llist_all2$ (uvt$ ?v0 ?v2 )?v1 ?v3 ))):named a129 ))
(assert (! (forall ((?v0 D_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )(?v1 C_a_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )(?v2 C_a_fun$ ))(! (= (fun_app$bg (comp$b ?v0 ?v1 )?v2 )(fun_app$br ?v0 (fun_app$bg ?v1 ?v2 ))):pattern ((fun_app$bg (comp$b ?v0 ?v1 )?v2 )))):named a130 ))
(assert (! (forall ((?v0 E_a_fun_e_llist_a_llist_fun_fun$ )(?v1 E_a_fun_e_a_fun_fun$ )(?v2 E_a_fun$ ))(! (= (fun_app$bm (fun_app$bs (comp$c ?v0 )?v1 )?v2 )(fun_app$bm ?v0 (fun_app$bt ?v1 ?v2 ))):pattern ((fun_app$bm (fun_app$bs (comp$c ?v0 )?v1 )?v2 )))):named a131 ))
(assert (! (forall ((?v0 E_a_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )(?v1 E_a_fun_e_a_fun_fun$ )(?v2 E_a_fun$ ))(! (= (fun_app$bj (comp$d ?v0 ?v1 )?v2 )(fun_app$bj ?v0 (fun_app$bt ?v1 ?v2 ))):pattern ((fun_app$bj (comp$d ?v0 ?v1 )?v2 )))):named a132 ))
(assert (! (forall ((?v0 C_a_fun_c_llist_a_llist_fun_fun$ )(?v1 C_a_fun_c_a_fun_fun$ )(?v2 C_a_fun$ ))(! (= (fun_app$bl (fun_app$bu (comp$e ?v0 )?v1 )?v2 )(fun_app$bl ?v0 (fun_app$bv ?v1 ?v2 ))):pattern ((fun_app$bl (fun_app$bu (comp$e ?v0 )?v1 )?v2 )))):named a133 ))
(assert (! (forall ((?v0 C_a_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )(?v1 C_a_fun_c_a_fun_fun$ )(?v2 C_a_fun$ ))(! (= (fun_app$bg (comp$f ?v0 ?v1 )?v2 )(fun_app$bg ?v0 (fun_app$bv ?v1 ?v2 ))):pattern ((fun_app$bg (comp$f ?v0 ?v1 )?v2 )))):named a134 ))
(assert (! (forall ((?v0 C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )(?v1 C_a_fun_c_llist_a_llist_fun_fun$ )(?v2 C_a_fun$ ))(! (= (fun_app$bg (comp$ ?v0 ?v1 )?v2 )(fun_app$bw ?v0 (fun_app$bl ?v1 ?v2 ))):pattern ((fun_app$bg (comp$ ?v0 ?v1 )?v2 )))):named a135 ))
(assert (! (forall ((?v0 E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )(?v1 E_a_fun_e_llist_a_llist_fun_fun$ )(?v2 E_a_fun$ ))(! (= (fun_app$bj (comp$a ?v0 ?v1 )?v2 )(fun_app$bx ?v0 (fun_app$bm ?v1 ?v2 ))):pattern ((fun_app$bj (comp$a ?v0 ?v1 )?v2 )))):named a136 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 C_llist_a_llist_fun$ )(?v2 D_b_fun$ )(?v3 C_llist_d_prod$ ))(= (fun_app$v (case_prod$a ?v0 )(fun_app$be (fun_app$bf (fun_app$bw map_prod$ ?v1 )?v2 )?v3 ))(fun_app$bq (case_prod$d (fun_app$aw (uvu$ ?v0 ?v1 )?v2 ))?v3 ))):named a137 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 B_b_fun$ )(?v3 A_llist_b_prod$ ))(= (fun_app$v (case_prod$a ?v0 )(fun_app$bp (map_prod$d ?v1 ?v2 )?v3 ))(fun_app$v (case_prod$a (fun_app$ay (uvv$ ?v0 ?v1 )?v2 ))?v3 ))):named a138 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 E_llist_a_llist_fun$ )(?v2 F_b_fun$ )(?v3 E_llist_f_prod$ ))(= (fun_app$v (case_prod$a ?v0 )(fun_app$bh (fun_app$bi (fun_app$bx map_prod$a ?v1 )?v2 )?v3 ))(fun_app$u (case_prod$ (fun_app$au (uvw$ ?v0 ?v1 )?v2 ))?v3 ))):named a139 ))
(assert (! (forall ((?v0 E_llist_f_bool_fun_fun$ )(?v1 A_llist_e_llist_fun$ )(?v2 B_f_fun$ )(?v3 A_llist_b_prod$ ))(= (fun_app$u (case_prod$ ?v0 )(fun_app$by (map_prod$e ?v1 ?v2 )?v3 ))(fun_app$v (case_prod$a (fun_app$ap (uvx$ ?v0 ?v1 )?v2 ))?v3 ))):named a140 ))
(assert (! (forall ((?v0 E_llist_f_bool_fun_fun$ )(?v1 E_llist_e_llist_fun$ )(?v2 F_f_fun$ )(?v3 E_llist_f_prod$ ))(= (fun_app$u (case_prod$ ?v0 )(fun_app$bn (map_prod$b ?v1 ?v2 )?v3 ))(fun_app$u (case_prod$ (fun_app$am (uvy$ ?v0 ?v1 )?v2 ))?v3 ))):named a141 ))
(assert (! (forall ((?v0 A_llist_b_e_llist_f_prod_bool_fun_fun_fun$ )(?v1 C_llist_a_llist_fun$ )(?v2 D_b_fun$ )(?v3 C_llist_d_prod$ ))(= (fun_app$bz (case_prod$e ?v0 )(fun_app$be (fun_app$bf (fun_app$bw map_prod$ ?v1 )?v2 )?v3 ))(fun_app$bk (case_prod$c (uvz$ ?v0 ?v1 ?v2 ))?v3 ))):named a142 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 C_llist_a_llist_fun$ )(?v2 D_b_fun$ )(?v3 C_llist_d_prod$ ))(= (fun_app$bd (case_prod$b ?v0 )(fun_app$be (fun_app$bf (fun_app$bw map_prod$ ?v1 )?v2 )?v3 ))(fun_app$ca (case_prod$f (uwa$ ?v0 ?v1 ?v2 ))?v3 ))):named a143 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 E_llist_a_llist_fun$ )(?v2 F_b_fun$ )(?v3 E_llist_f_prod$ ))(= (fun_app$bd (case_prod$b ?v0 )(fun_app$bh (fun_app$bi (fun_app$bx map_prod$a ?v1 )?v2 )?v3 ))(fun_app$cb (case_prod$g (uwb$ ?v0 ?v1 ?v2 ))?v3 ))):named a144 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 B_b_fun$ )(?v3 A_llist_b_prod$ ))(= (fun_app$bd (case_prod$b ?v0 )(fun_app$bp (map_prod$d ?v1 ?v2 )?v3 ))(fun_app$bd (case_prod$b (uwc$ ?v0 ?v1 ?v2 ))?v3 ))):named a145 ))
(assert (! (forall ((?v0 C_llist_d_e_llist_f_prod_bool_fun_fun_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 D_d_fun$ )(?v3 C_llist_d_prod$ ))(= (fun_app$bk (case_prod$c ?v0 )(fun_app$bo (map_prod$c ?v1 ?v2 )?v3 ))(fun_app$bk (case_prod$c (uwd$ ?v0 ?v1 ?v2 ))?v3 ))):named a146 ))
(assert (! (forall ((?v0 C_llist_d_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 C_llist_d_prod$ )(?v2 A_llist_b_prod$ ))(= (fun_app$v (fun_app$ca (case_prod$f ?v0 )?v1 )?v2 )(fun_app$bq (case_prod$d (uwe$ ?v0 ?v2 ))?v1 ))):named a147 ))
(assert (! (forall ((?v0 A_llist_b_e_llist_f_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 E_llist_f_prod$ ))(= (fun_app$u (fun_app$bz (case_prod$e ?v0 )?v1 )?v2 )(fun_app$v (case_prod$a (uwf$ ?v0 ?v2 ))?v1 ))):named a148 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_prod$ ))(= (fun_app$v (fun_app$bd (case_prod$b ?v0 )?v1 )?v2 )(fun_app$v (case_prod$a (uwg$ ?v0 ?v2 ))?v1 ))):named a149 ))
(assert (! (forall ((?v0 C_llist_d_e_llist_f_prod_bool_fun_fun_fun$ )(?v1 C_llist_d_prod$ )(?v2 E_llist_f_prod$ ))(= (fun_app$u (fun_app$bk (case_prod$c ?v0 )?v1 )?v2 )(fun_app$bq (case_prod$d (uwh$ ?v0 ?v2 ))?v1 ))):named a150 ))
(assert (! (forall ((?v0 A_llist_b_e_llist_f_prod_bool_fun_fun_fun$ )(?v1 C_llist_a_llist_fun$ )(?v2 D_b_fun$ ))(= (comp$g (case_prod$e ?v0 )(fun_app$bf (fun_app$bw map_prod$ ?v1 )?v2 ))(case_prod$c (uvz$ ?v0 ?v1 ?v2 )))):named a151 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 C_llist_a_llist_fun$ )(?v2 D_b_fun$ ))(= (comp$h (case_prod$b ?v0 )(fun_app$bf (fun_app$bw map_prod$ ?v1 )?v2 ))(case_prod$f (uwa$ ?v0 ?v1 ?v2 )))):named a152 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 E_llist_a_llist_fun$ )(?v2 F_b_fun$ ))(= (comp$i (case_prod$b ?v0 )(fun_app$bi (fun_app$bx map_prod$a ?v1 )?v2 ))(case_prod$g (uwb$ ?v0 ?v1 ?v2 )))):named a153 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 B_b_fun$ ))(= (comp$j (case_prod$b ?v0 )(map_prod$d ?v1 ?v2 ))(case_prod$b (uwc$ ?v0 ?v1 ?v2 )))):named a154 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 C_llist_a_llist_fun$ )(?v2 D_b_fun$ ))(= (comp$k (case_prod$a ?v0 )(fun_app$bf (fun_app$bw map_prod$ ?v1 )?v2 ))(case_prod$d (fun_app$aw (uvu$ ?v0 ?v1 )?v2 )))):named a155 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 B_b_fun$ ))(= (comp$l (case_prod$a ?v0 )(map_prod$d ?v1 ?v2 ))(case_prod$a (fun_app$ay (uvv$ ?v0 ?v1 )?v2 )))):named a156 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 E_llist_a_llist_fun$ )(?v2 F_b_fun$ ))(= (comp$m (case_prod$a ?v0 )(fun_app$bi (fun_app$bx map_prod$a ?v1 )?v2 ))(case_prod$ (fun_app$au (uvw$ ?v0 ?v1 )?v2 )))):named a157 ))
(assert (! (forall ((?v0 C_llist_d_e_llist_f_prod_bool_fun_fun_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 D_d_fun$ ))(= (comp$n (case_prod$c ?v0 )(map_prod$c ?v1 ?v2 ))(case_prod$c (uwd$ ?v0 ?v1 ?v2 )))):named a158 ))
(assert (! (forall ((?v0 E_llist_f_bool_fun_fun$ )(?v1 A_llist_e_llist_fun$ )(?v2 B_f_fun$ ))(= (comp$o (case_prod$ ?v0 )(map_prod$e ?v1 ?v2 ))(case_prod$a (fun_app$ap (uvx$ ?v0 ?v1 )?v2 )))):named a159 ))
(assert (! (forall ((?v0 E_llist_f_bool_fun_fun$ )(?v1 E_llist_e_llist_fun$ )(?v2 F_f_fun$ ))(= (comp$p (case_prod$ ?v0 )(map_prod$b ?v1 ?v2 ))(case_prod$ (fun_app$am (uvy$ ?v0 ?v1 )?v2 )))):named a160 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$bd (case_prod$b ?v2 )?v0 )(fun_app$bd (case_prod$b ?v2 )?v1 )))):named a161 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_bool_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$v (case_prod$a ?v2 )?v0 )(fun_app$v (case_prod$a ?v2 )?v1 )))):named a162 ))
(assert (! (forall ((?v0 C_llist_d_prod$ )(?v1 C_llist_d_prod$ )(?v2 C_llist_d_e_llist_f_prod_bool_fun_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$bk (case_prod$c ?v2 )?v0 )(fun_app$bk (case_prod$c ?v2 )?v1 )))):named a163 ))
(assert (! (forall ((?v0 E_llist_f_prod$ )(?v1 E_llist_f_prod$ )(?v2 E_llist_f_bool_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$u (case_prod$ ?v2 )?v0 )(fun_app$u (case_prod$ ?v2 )?v1 )))):named a164 ))
(assert (! (forall ((?v0 C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )(?v1 C_a_fun_c_llist_a_llist_fun_fun$ )(?v2 C_a_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )(?v3 C_a_fun$ ))(=> (= (comp$ ?v0 ?v1 )?v2 )(= (fun_app$bw ?v0 (fun_app$bl ?v1 ?v3 ))(fun_app$bg ?v2 ?v3 )))):named a165 ))
(assert (! (forall ((?v0 E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )(?v1 E_a_fun_e_llist_a_llist_fun_fun$ )(?v2 E_a_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )(?v3 E_a_fun$ ))(=> (= (comp$a ?v0 ?v1 )?v2 )(= (fun_app$bx ?v0 (fun_app$bm ?v1 ?v3 ))(fun_app$bj ?v2 ?v3 )))):named a166 ))
(assert (! (forall ((?v0 D_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )(?v1 C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )(?v2 C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )(?v3 C_a_fun_c_llist_a_llist_fun_fun$ ))(=> (= (comp$q ?v0 ?v1 )?v2 )(= (comp$b ?v0 (comp$ ?v1 ?v3 ))(comp$ ?v2 ?v3 )))):named a167 ))
(assert (! (forall ((?v0 F_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )(?v1 E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )(?v2 E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )(?v3 E_a_fun_e_llist_a_llist_fun_fun$ ))(=> (= (comp$r ?v0 ?v1 )?v2 )(= (comp$s ?v0 (comp$a ?v1 ?v3 ))(comp$a ?v2 ?v3 )))):named a168 ))
(assert (! (forall ((?v0 C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )(?v1 C_llist_a_llist_fun_c_llist_a_llist_fun_fun$ )(?v2 C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )(?v3 C_a_fun_c_llist_a_llist_fun_fun$ ))(=> (= (comp$t ?v0 ?v1 )?v2 )(= (comp$ ?v0 (fun_app$cc (comp$u ?v1 )?v3 ))(comp$ ?v2 ?v3 )))):named a169 ))
(assert (! (forall ((?v0 E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )(?v1 E_llist_a_llist_fun_e_llist_a_llist_fun_fun$ )(?v2 E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )(?v3 E_a_fun_e_llist_a_llist_fun_fun$ ))(=> (= (comp$v ?v0 ?v1 )?v2 )(= (comp$a ?v0 (fun_app$cd (comp$w ?v1 )?v3 ))(comp$a ?v2 ?v3 )))):named a170 ))
(assert (! (forall ((?v0 C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )(?v1 C_a_fun_c_llist_a_llist_fun_fun$ )(?v2 C_a_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )(?v3 C_a_fun_c_a_fun_fun$ ))(=> (= (comp$ ?v0 ?v1 )?v2 )(= (comp$ ?v0 (fun_app$bu (comp$e ?v1 )?v3 ))(comp$f ?v2 ?v3 )))):named a171 ))
(assert (! (forall ((?v0 E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )(?v1 E_a_fun_e_llist_a_llist_fun_fun$ )(?v2 E_a_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )(?v3 E_a_fun_e_a_fun_fun$ ))(=> (= (comp$a ?v0 ?v1 )?v2 )(= (comp$a ?v0 (fun_app$bs (comp$c ?v1 )?v3 ))(comp$d ?v2 ?v3 )))):named a172 ))
(assert (! (forall ((?v0 C_a_fun_c_llist_a_llist_fun_fun$ )(?v1 C_a_fun_c_a_fun_fun$ )(?v2 C_a_fun_c_llist_a_llist_fun_fun$ )(?v3 C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ ))(=> (= (fun_app$bu (comp$e ?v0 )?v1 )?v2 )(= (comp$f (comp$ ?v3 ?v0 )?v1 )(comp$ ?v3 ?v2 )))):named a173 ))
(assert (! (forall ((?v0 E_a_fun_e_llist_a_llist_fun_fun$ )(?v1 E_a_fun_e_a_fun_fun$ )(?v2 E_a_fun_e_llist_a_llist_fun_fun$ )(?v3 E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ ))(=> (= (fun_app$bs (comp$c ?v0 )?v1 )?v2 )(= (comp$d (comp$a ?v3 ?v0 )?v1 )(comp$a ?v3 ?v2 )))):named a174 ))
(assert (! (forall ((?v0 C_llist_a_llist_fun_c_llist_a_llist_fun_fun$ )(?v1 C_a_fun_c_llist_a_llist_fun_fun$ )(?v2 C_a_fun_c_llist_a_llist_fun_fun$ )(?v3 C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ ))(=> (= (fun_app$cc (comp$u ?v0 )?v1 )?v2 )(= (comp$ (comp$t ?v3 ?v0 )?v1 )(comp$ ?v3 ?v2 )))):named a175 ))
(assert (! (forall ((?v0 E_llist_a_llist_fun_e_llist_a_llist_fun_fun$ )(?v1 E_a_fun_e_llist_a_llist_fun_fun$ )(?v2 E_a_fun_e_llist_a_llist_fun_fun$ )(?v3 E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ ))(=> (= (fun_app$cd (comp$w ?v0 )?v1 )?v2 )(= (comp$a (comp$v ?v3 ?v0 )?v1 )(comp$a ?v3 ?v2 )))):named a176 ))
(assert (! (forall ((?v0 C_llist_a_llist_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )(?v1 C_a_fun_c_llist_a_llist_fun_fun$ )(?v2 C_a_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ )(?v3 D_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_d_b_fun_c_llist_d_prod_a_llist_b_prod_fun_fun_fun$ ))(=> (= (comp$ ?v0 ?v1 )?v2 )(= (comp$ (comp$q ?v3 ?v0 )?v1 )(comp$b ?v3 ?v2 )))):named a177 ))
(assert (! (forall ((?v0 E_llist_a_llist_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )(?v1 E_a_fun_e_llist_a_llist_fun_fun$ )(?v2 E_a_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ )(?v3 F_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_f_b_fun_e_llist_f_prod_a_llist_b_prod_fun_fun_fun$ ))(=> (= (comp$a ?v0 ?v1 )?v2 )(= (comp$a (comp$r ?v3 ?v0 )?v1 )(comp$s ?v3 ?v2 )))):named a178 ))
(check-sat )
;(get-unsat-core )
