;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_b_tllist$ 0)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun tmap$ (A_a_fun$ B_b_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun tset$ (A_b_tllist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun is_TNil$ (A_b_tllist$ )Bool )
(declare-fun member$a (B$ B_set$ )Bool )
(declare-fun fun_app$a (B_b_fun$ B$ )B$ )
(declare-fun set2_tllist$ (A_b_tllist$ )B_set$ )
(assert (! (not (is_TNil$ (ttl$ xs$ ))):named a0 ))
(assert (! (is_TNil$ xs$ ):named a1 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (and (=> (is_TNil$ ?v0 )false )(=> (not (is_TNil$ ?v0 ))false ))false )):named a2 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A$ ))(=> (and (not (is_TNil$ ?v0 ))(member$ ?v1 (tset$ (ttl$ ?v0 ))))(member$ ?v1 (tset$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 B$ ))(=> (and (not (is_TNil$ ?v0 ))(member$a ?v1 (set2_tllist$ (ttl$ ?v0 ))))(member$a ?v1 (set2_tllist$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ ))(=> (not (is_TNil$ ?v0 ))(= (ttl$ (tmap$ ?v1 ?v2 ?v0 ))(tmap$ ?v1 ?v2 (ttl$ ?v0 ))))):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ ))(= (is_TNil$ (tmap$ ?v0 ?v1 ?v2 ))(is_TNil$ ?v2 ))):named a6 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_b_tllist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (and (forall ((?v6 A$ )(?v7 A$ ))(=> (and (member$ ?v6 (tset$ ?v0 ))(and (member$ ?v7 (tset$ ?v1 ))(= (fun_app$ ?v2 ?v6 )(fun_app$ ?v3 ?v7 ))))(= ?v6 ?v7 )))(and (forall ((?v6 B$ )(?v7 B$ ))(=> (and (member$a ?v6 (set2_tllist$ ?v0 ))(and (member$a ?v7 (set2_tllist$ ?v1 ))(= (fun_app$a ?v4 ?v6 )(fun_app$a ?v5 ?v7 ))))(= ?v6 ?v7 )))(= (tmap$ ?v2 ?v4 ?v0 )(tmap$ ?v3 ?v5 ?v1 ))))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ ))(=> (and (forall ((?v5 A$ ))(=> (member$ ?v5 (tset$ ?v0 ))(= (fun_app$ ?v1 ?v5 )(fun_app$ ?v2 ?v5 ))))(forall ((?v5 B$ ))(=> (member$a ?v5 (set2_tllist$ ?v0 ))(= (fun_app$a ?v3 ?v5 )(fun_app$a ?v4 ?v5 )))))(= (tmap$ ?v1 ?v3 ?v0 )(tmap$ ?v2 ?v4 ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_b_tllist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= ?v0 ?v1 )(and (forall ((?v6 A$ ))(=> (member$ ?v6 (tset$ ?v1 ))(= (fun_app$ ?v2 ?v6 )(fun_app$ ?v3 ?v6 ))))(forall ((?v6 B$ ))(=> (member$a ?v6 (set2_tllist$ ?v1 ))(= (fun_app$a ?v4 ?v6 )(fun_app$a ?v5 ?v6 ))))))(= (tmap$ ?v2 ?v4 ?v0 )(tmap$ ?v3 ?v5 ?v1 )))):named a9 ))
(check-sat )
;(get-unsat-core )
