;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort Nat_a_llist_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort Nat_a_llist_llist_fun$ 0 )
(declare-sort A_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_enat_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-sort A_b_tllist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort A_llist_llist_llist$ 0)
(declare-sort A_llist_llist_b_tllist$ 0)
(declare-sort A_llist_b_tllist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun terminal$a (A_llist_llist_b_tllist$)B$)
(declare-fun tNil$a (B$ )A_llist_llist_b_tllist$)
(declare-fun thd$a (A_llist_llist_b_tllist$)A_llist_llist$)
(declare-fun ttl$a (A_llist_llist_b_tllist$)A_llist_llist_b_tllist$)
(declare-fun tCons$a (A_llist_llist$ A_llist_llist_b_tllist$ )A_llist_llist_b_tllist$)
(declare-fun terminal$b (A_llist_b_tllist$)B$)
(declare-fun tNil$b (B$ )A_llist_b_tllist$)
(declare-fun thd$b (A_llist_b_tllist$)A_llist$)
(declare-fun ttl$b (A_llist_b_tllist$)A_llist_b_tllist$)
(declare-fun tCons$b (A_llist$ A_llist_b_tllist$ )A_llist_b_tllist$)
(declare-sort A_llist_llist_llist_b_prod$ 0)
(declare-sort A_llist_llist_b_prod$ 0)
(declare-sort A_llist_b_prod$ 0)
(declare-fun fst$ (A_llist_llist_llist_b_prod$)A_llist_llist_llist$)
(declare-fun snd$ (A_llist_llist_llist_b_prod$)B$)
(declare-fun pair$ (A_llist_llist_llist$ B$ )A_llist_llist_llist_b_prod$)
(declare-fun fst$a (A_llist_llist_b_prod$)A_llist_llist$)
(declare-fun snd$a (A_llist_llist_b_prod$)B$)
(declare-fun pair$a (A_llist_llist$ B$ )A_llist_llist_b_prod$)
(declare-fun fst$b (A_llist_b_prod$)A_llist$)
(declare-fun snd$b (A_llist_b_prod$)B$)
(declare-fun pair$b (A_llist$ B$ )A_llist_b_prod$)
(declare-sort A_llist_llist_llist_b_tllist$ 0)
(declare-sort A_llist_llist_llist_llist$ 0)
(declare-fun terminal$c (A_llist_llist_llist_b_tllist$)B$)
(declare-fun tNil$c (B$ )A_llist_llist_llist_b_tllist$)
(declare-fun thd$c (A_llist_llist_llist_b_tllist$)A_llist_llist_llist$)
(declare-fun ttl$c (A_llist_llist_llist_b_tllist$)A_llist_llist_llist_b_tllist$)
(declare-fun tCons$c (A_llist_llist_llist$ A_llist_llist_llist_b_tllist$ )A_llist_llist_llist_b_tllist$)
(declare-fun lNil$c ()A_llist_llist_llist_llist$)
(declare-fun lhd$c (A_llist_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun ltl$c (A_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun lCons$c (A_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$)
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun llcp$ (A_llist_llist$ )A_llist_llist_enat_fun$ )
(declare-fun lmap$ (A_llist_a_fun$ A_llist_llist$ )A_llist$ )
(declare-fun lnth$ (A_llist_llist_llist$ )Nat_a_llist_llist_fun$ )
(declare-fun lset$ (A_llist_llist_llist$ )A_llist_llist_set$ )
(declare-fun tnth$ (A_llist_llist_b_tllist$ )Nat_a_llist_llist_fun$ )
(declare-fun tset$ (A_llist_llist_b_tllist$ )A_llist_llist_set$ )
(declare-fun zero$ ()Enat$ )
(declare-fun llcp$a (A_llist$ )A_llist_enat_fun$ )
(declare-fun lmap$a (A_a_llist_fun$ A_llist$ )A_llist_llist$ )
(declare-fun lmap$b (A_llist_a_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lmap$c (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lnth$a (A_llist_llist$ )Nat_a_llist_fun$ )
(declare-fun lnth$b (A_llist$ )Nat_a_fun$ )
(declare-fun lset$a (A_llist_llist$ )A_llist_set$ )
(declare-fun lset$b (A_llist$ )A_set$ )
(declare-fun tnth$a (A_llist_b_tllist$ )Nat_a_llist_fun$ )
(declare-fun tnth$b (A_b_tllist$ )Nat_a_fun$ )
(declare-fun tset$a (A_llist_b_tllist$ )A_llist_set$ )
(declare-fun tset$b (A_b_tllist$ )A_set$ )
(declare-fun fun_app$ (A_llist_llist_enat_fun$ A_llist_llist$ )Enat$ )
(declare-fun lappend$ (A_llist_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$ (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lfilter$ (A_llist_llist_bool_fun$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun tconcat$ (B$ A_llist_llist_llist_b_tllist$ )A_llist_llist_b_tllist$ )
(declare-fun tfilter$ (B$ A_llist_llist_bool_fun$ A_llist_llist_b_tllist$ )A_llist_llist_b_tllist$ )
(declare-fun tlength$ (A_b_tllist$ )Enat$ )
(declare-fun fun_app$a (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$c (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$d (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$e (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$f (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun lappend$a (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lappend$b (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lappendt$ (A_llist_llist_llist$ A_llist_llist_b_tllist$ )A_llist_llist_b_tllist$ )
(declare-fun lconcat$a (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist$ )A_llist$ )
(declare-fun lfilter$a (A_llist_bool_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lfilter$b (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun llength$a (A_llist_llist_llist$ )Enat$ )
(declare-fun llength$b (A_llist_llist$ )Enat$ )
(declare-fun tconcat$a (B$ A_llist_llist_b_tllist$ )A_llist_b_tllist$ )
(declare-fun tconcat$b (B$ A_llist_b_tllist$ )A_b_tllist$ )
(declare-fun tfilter$a (B$ A_llist_bool_fun$ A_llist_b_tllist$ )A_llist_b_tllist$ )
(declare-fun tfilter$b (B$ A_bool_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun tlength$a (A_llist_b_tllist$ )Enat$ )
(declare-fun tlength$b (A_llist_llist_b_tllist$ )Enat$ )
(declare-fun lappendt$a (A_llist_llist$ A_llist_b_tllist$ )A_llist_b_tllist$ )
(declare-fun lappendt$b (A_llist$ A_b_tllist$ )A_b_tllist$ )
(declare-fun tllist_all2$ (A_a_llist_bool_fun_fun$ B_b_bool_fun_fun$ A_b_tllist$ A_llist_b_tllist$ )Bool )
(declare-fun tllist_all2$a (A_llist_a_bool_fun_fun$ B_b_bool_fun_fun$ A_llist_b_tllist$ A_b_tllist$ )Bool )
(declare-fun tllist_all2$b (A_llist_a_llist_bool_fun_fun$ B_b_bool_fun_fun$ A_llist_b_tllist$ A_llist_b_tllist$ )Bool )
(declare-fun tllist_all2$c (A_a_bool_fun_fun$ B_b_bool_fun_fun$ A_b_tllist$ A_b_tllist$ )Bool )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$ (B$ A_llist_llist_llist$ )A_llist_llist_b_tllist$ )
(declare-fun llist_of_tllist$a (A_llist_llist_b_tllist$ )A_llist_llist_llist$ )
(declare-fun llist_of_tllist$b (A_llist_b_tllist$ )A_llist_llist$ )
(declare-fun llist_of_tllist$c (A_llist_llist_llist_b_tllist$ )A_llist_llist_llist_llist$ )
(declare-fun tllist_of_llist$a (B$ A_llist_llist$ )A_llist_b_tllist$ )
(declare-fun tllist_of_llist$b (B$ A_llist$ )A_b_tllist$ )
(assert (! (not (= (llength$ (llist_of_tllist$ xs$ ))(tlength$ xs$ ))):named a0 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_llist_llist$ ))(= (llist_of_tllist$a (tllist_of_llist$ ?v0 ?v1 ))?v1 )):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_llist$ ))(= (llist_of_tllist$b (tllist_of_llist$a ?v0 ?v1 ))?v1 )):named a2 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (llist_of_tllist$ (tllist_of_llist$b ?v0 ?v1 ))?v1 )):named a3 ))
(assert (! (forall ((?v0 A_a_llist_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_b_tllist$ )(?v3 A_llist_b_tllist$ ))(=> (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(= (tlength$ ?v2 )(tlength$a ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_llist_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_llist_b_tllist$ )(?v3 A_b_tllist$ ))(=> (tllist_all2$a ?v0 ?v1 ?v2 ?v3 )(= (tlength$a ?v2 )(tlength$ ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_llist_b_tllist$ )(?v3 A_llist_b_tllist$ ))(=> (tllist_all2$b ?v0 ?v1 ?v2 ?v3 )(= (tlength$a ?v2 )(tlength$a ?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_b_tllist$ )(?v3 A_b_tllist$ ))(=> (tllist_all2$c ?v0 ?v1 ?v2 ?v3 )(= (tlength$ ?v2 )(tlength$ ?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_llist_b_tllist$ ))(! (= (tlength$b ?v0 )(llength$a (fst$ (pair$ (llist_of_tllist$a ?v0 )(terminal$a ?v0 ))))):pattern ((tlength$b ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist_b_tllist$ ))(! (= (tlength$a ?v0 )(llength$b (fst$a (pair$a (llist_of_tllist$b ?v0 )(terminal$b ?v0 ))))):pattern ((tlength$a ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (tlength$ ?v0 )(llength$ (fst$b (pair$b (llist_of_tllist$ ?v0 )(terminal$ ?v0 ))))):pattern ((tlength$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$ (llcp$ ?v0 )?v0 )(llength$b ?v0 )):pattern ((llcp$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (llcp$a ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$a ?v0 )))):named a12 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_llist_llist_b_tllist$ ))(= (llist_of_tllist$a (tconcat$ ?v0 ?v1 ))(lconcat$ (llist_of_tllist$c ?v1 )))):named a13 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_llist_b_tllist$ ))(= (llist_of_tllist$b (tconcat$a ?v0 ?v1 ))(lconcat$a (llist_of_tllist$a ?v1 )))):named a14 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_b_tllist$ ))(= (llist_of_tllist$ (tconcat$b ?v0 ?v1 ))(lconcat$b (llist_of_tllist$b ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_b_tllist$ ))(= (llist_of_tllist$a (lappendt$ ?v0 ?v1 ))(lappend$ ?v0 (llist_of_tllist$a ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_b_tllist$ ))(= (llist_of_tllist$b (lappendt$a ?v0 ?v1 ))(lappend$a ?v0 (llist_of_tllist$b ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_tllist$ ))(= (llist_of_tllist$ (lappendt$b ?v0 ?v1 ))(fun_app$b (lappend$b ?v0 )(llist_of_tllist$ ?v1 )))):named a18 ))
(assert (! (forall ((?v0 B$ ))(! (= (tlength$a (tNil$b ?v0 ))zero$ ):pattern ((tNil$b ?v0 )))):named a19 ))
(assert (! (forall ((?v0 B$ ))(! (= (tlength$ (tNil$ ?v0 ))zero$ ):pattern ((tNil$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_llist_bool_fun$ )(?v2 A_llist_llist_b_tllist$ ))(= (llist_of_tllist$a (tfilter$ ?v0 ?v1 ?v2 ))(lfilter$ ?v1 (llist_of_tllist$a ?v2 )))):named a21 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist_b_tllist$ ))(= (llist_of_tllist$b (tfilter$a ?v0 ?v1 ?v2 ))(lfilter$a ?v1 (llist_of_tllist$b ?v2 )))):named a22 ))
(assert (! (forall ((?v0 B$ )(?v1 A_bool_fun$ )(?v2 A_b_tllist$ ))(= (llist_of_tllist$ (tfilter$b ?v0 ?v1 ?v2 ))(fun_app$b (lfilter$b ?v1 )(llist_of_tllist$ ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_llist_llist_b_tllist$ ))(= (lnth$ (llist_of_tllist$a ?v0 ))(tnth$ ?v0 ))):named a24 ))
(assert (! (forall ((?v0 A_llist_b_tllist$ ))(= (lnth$a (llist_of_tllist$b ?v0 ))(tnth$a ?v0 ))):named a25 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (lnth$b (llist_of_tllist$ ?v0 ))(tnth$b ?v0 ))):named a26 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_tllist$ ))(! (= (tlength$a (tCons$b ?v0 ?v1 ))(eSuc$ (tlength$a ?v1 ))):pattern ((tCons$b ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (tlength$ (tCons$ ?v0 ?v1 ))(eSuc$ (tlength$ ?v1 ))):pattern ((tCons$ ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_llist_llist_b_tllist$ ))(= (lset$ (llist_of_tllist$a ?v0 ))(tset$ ?v0 ))):named a29 ))
(assert (! (forall ((?v0 A_llist_b_tllist$ ))(= (lset$a (llist_of_tllist$b ?v0 ))(tset$a ?v0 ))):named a30 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (lset$b (llist_of_tllist$ ?v0 ))(tset$b ?v0 ))):named a31 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$b ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (llength$b (lmap$a ?v0 ?v1 ))(llength$ ?v1 ))):named a33 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist$ ))(= (llength$b (lmap$b ?v0 ?v1 ))(llength$b ?v1 ))):named a34 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (fun_app$b (lmap$c ?v0 )?v1 ))(llength$ ?v1 ))):named a35 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (lfilter$a ?v0 (lfilter$a ?v0 ?v1 ))(lfilter$a ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$b (lfilter$b ?v0 )(fun_app$b (lfilter$b ?v0 )?v1 ))(fun_app$b (lfilter$b ?v0 )?v1 ))):named a37 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a38 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a39 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A$ )(?v3 A_b_tllist$ )(?v4 A$ )(?v5 A_b_tllist$ ))(! (= (tllist_all2$c ?v0 ?v1 (tCons$ ?v2 ?v3 )(tCons$ ?v4 ?v5 ))(and (fun_app$c (fun_app$d ?v0 ?v2 )?v4 )(tllist_all2$c ?v0 ?v1 ?v3 ?v5 ))):pattern ((tllist_all2$c ?v0 ?v1 (tCons$ ?v2 ?v3 )(tCons$ ?v4 ?v5 ))))):named a40 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B$ )(?v3 B$ ))(! (= (tllist_all2$c ?v0 ?v1 (tNil$ ?v2 )(tNil$ ?v3 ))(fun_app$e (fun_app$f ?v1 ?v2 )?v3 )):pattern ((tllist_all2$c ?v0 ?v1 (tNil$ ?v2 )(tNil$ ?v3 ))))):named a41 ))
(check-sat )
;(get-unsat-core )
