;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_tree_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun cost$ (A_tree$ )Nat$ )
(declare-fun freq$ (A_tree$ A$ )Nat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun depth$ (A_tree$ A$ )Nat$ )
(declare-fun times$ (Nat$ Nat$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_a_tree_fun$ A$ )A_tree$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun swapSyms$ (A_tree$ A$ )A_a_tree_fun$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun uniteTrees$ (A_tree$ A_tree$ )A_tree$ )
(assert (! (not (= (plus$ (plus$ (cost$ (fun_app$ (swapSyms$ t$ a$ )b$ ))(times$ (freq$ t$ a$ )(depth$ t$ a$ )))(times$ (freq$ t$ b$ )(depth$ t$ b$ )))(plus$ (plus$ (cost$ t$ )(times$ (freq$ t$ a$ )(depth$ t$ b$ )))(times$ (freq$ t$ b$ )(depth$ t$ a$ ))))):named a0 ))
(assert (! (consistent$ t$ ):named a1 ))
(assert (! (member$ a$ (alphabet$ t$ )):named a2 ))
(assert (! (member$ b$ (alphabet$ t$ )):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a5 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A$ ))(= (freq$ (uniteTrees$ ?v0 ?v1 )?v2 )(plus$ (freq$ ?v0 ?v2 )(freq$ ?v1 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (plus$ (times$ ?v0 ?v1 )(plus$ (times$ ?v2 ?v1 )?v3 ))(plus$ (times$ (plus$ ?v0 ?v2 )?v1 )?v3 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (times$ (plus$ ?v0 ?v1 )?v2 )(plus$ (times$ ?v0 ?v2 )(times$ ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (times$ ?v0 (plus$ ?v1 ?v2 ))(plus$ (times$ ?v0 ?v1 )(times$ ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (= (plus$ (times$ ?v0 ?v1 )(times$ ?v2 ?v3 ))(plus$ (times$ ?v0 ?v3 )(times$ ?v2 ?v1 )))(or (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (plus$ (times$ ?v0 ?v1 )(plus$ (times$ ?v2 ?v1 )?v3 ))(plus$ (times$ (plus$ ?v0 ?v2 )?v1 )?v3 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (times$ (plus$ ?v0 ?v1 )?v2 )(plus$ (times$ ?v0 ?v2 )(times$ ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (times$ (plus$ ?v0 ?v1 )?v2 )(plus$ (times$ ?v0 ?v2 )(times$ ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (times$ ?v0 ?v1 )(times$ ?v2 ?v1 ))(times$ (plus$ ?v0 ?v2 )?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (times$ (plus$ ?v0 ?v1 )?v2 )(plus$ (times$ ?v0 ?v2 )(times$ ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A$ ))(=> (and (member$ ?v0 (alphabet$ ?v1 ))(member$ ?v2 (alphabet$ ?v1 )))(= (alphabet$ (fun_app$ (swapSyms$ ?v1 ?v0 )?v2 ))(alphabet$ ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(! (=> (consistent$ ?v0 )(= (fun_app$ (swapSyms$ ?v0 ?v1 )?v1 )?v0 )):pattern ((swapSyms$ ?v0 ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
