;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Bool_nat_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort A_tree_list$ 0)
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun nil$ ()A_tree_list$)
(declare-fun hd$ (A_tree_list$)A_tree$)
(declare-fun tl$ (A_tree_list$)A_tree_list$)
(declare-fun cons$ (A_tree$ A_tree_list$ )A_tree_list$)
(declare-fun nibble0$ ()Nibble$)
(declare-fun nibble1$ ()Nibble$)
(declare-fun nibble2$ ()Nibble$)
(declare-fun nibble3$ ()Nibble$)
(declare-fun nibble4$ ()Nibble$)
(declare-fun nibble5$ ()Nibble$)
(declare-fun nibble6$ ()Nibble$)
(declare-fun nibble7$ ()Nibble$)
(declare-fun nibble8$ ()Nibble$)
(declare-fun nibble9$ ()Nibble$)
(declare-fun nibbleA$ ()Nibble$)
(declare-fun nibbleB$ ()Nibble$)
(declare-fun nibbleC$ ()Nibble$)
(declare-fun nibbleD$ ()Nibble$)
(declare-fun nibbleE$ ()Nibble$)
(declare-fun nibbleF$ ()Nibble$)
(declare-fun selecte$ (Char$)Nibble$)
(declare-fun selectf$ (Char$)Nibble$)
(declare-fun char$ (Nibble$ Nibble$ )Char$)
(declare-fun a$ ()A$ )
(declare-fun ts$ ()A_tree_list$ )
(declare-fun size$ (Char$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun freq_F$ (A_tree_list$ A$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun of_nat$ (Nat$ )Nat$ )
(declare-fun fun_app$ (Bool_nat_fun$ Bool )Nat$ )
(declare-fun height_F$ (A_tree_list$ )Nat$ )
(declare-fun rec_bool$ (Nat$ Nat$ )Bool_nat_fun$ )
(declare-fun size_bool$ ()Bool_nat_fun$ )
(declare-fun size_char$ (Char$ )Nat$ )
(declare-fun alphabet_F$ (A_tree_list$ )A_set$ )
(assert (! (not (= (freq_F$ ts$ a$ )zero$ )):named a0 ))
(assert (! (not (member$ a$ (alphabet_F$ ts$ ))):named a1 ))
(assert (! (= zero$ zero$ ):named a2 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a4 ))
(assert (! (forall ((?v0 A$ ))(! (= (freq_F$ nil$ ?v0 )zero$ ):pattern ((freq_F$ nil$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a6 ))
(assert (! (= (fun_app$ size_bool$ true )zero$ ):named a7 ))
(assert (! (= (fun_app$ size_bool$ false )zero$ ):named a8 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size$ ?v0 )zero$ ):pattern ((size$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(= (= (of_nat$ ?v0 )zero$ )(= ?v0 zero$ ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$ ?v0 )(of_nat$ ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (= (of_nat$ zero$ )zero$ ):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ (of_nat$ ?v0 ))(= zero$ ?v0 ))):named a13 ))
(assert (! (= (height_F$ nil$ )zero$ ):named a14 ))
(assert (! (= size_bool$ (rec_bool$ zero$ zero$ )):named a15 ))
(check-sat )
;(get-unsat-core )
