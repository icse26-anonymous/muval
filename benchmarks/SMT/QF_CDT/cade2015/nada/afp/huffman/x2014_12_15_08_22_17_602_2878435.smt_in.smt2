;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_tree_list_a_tree_list_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort A_tree_list$ 0)
(declare-sort A_tree_list_list$ 0)
(declare-sort A_tree_list_list_list$ 0)
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-sort A_tree_list_list_list_list$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun nil$ ()A_tree_list$)
(declare-fun hd$ (A_tree_list$)A_tree$)
(declare-fun tl$ (A_tree_list$)A_tree_list$)
(declare-fun cons$ (A_tree$ A_tree_list$ )A_tree_list$)
(declare-fun nil$a ()A_tree_list_list$)
(declare-fun hd$a (A_tree_list_list$)A_tree_list$)
(declare-fun tl$a (A_tree_list_list$)A_tree_list_list$)
(declare-fun cons$a (A_tree_list$ A_tree_list_list$ )A_tree_list_list$)
(declare-fun nil$b ()A_tree_list_list_list$)
(declare-fun hd$b (A_tree_list_list_list$)A_tree_list_list$)
(declare-fun tl$b (A_tree_list_list_list$)A_tree_list_list_list$)
(declare-fun cons$b (A_tree_list_list$ A_tree_list_list_list$ )A_tree_list_list_list$)
(declare-fun nibble0$ ()Nibble$)
(declare-fun nibble1$ ()Nibble$)
(declare-fun nibble2$ ()Nibble$)
(declare-fun nibble3$ ()Nibble$)
(declare-fun nibble4$ ()Nibble$)
(declare-fun nibble5$ ()Nibble$)
(declare-fun nibble6$ ()Nibble$)
(declare-fun nibble7$ ()Nibble$)
(declare-fun nibble8$ ()Nibble$)
(declare-fun nibble9$ ()Nibble$)
(declare-fun nibbleA$ ()Nibble$)
(declare-fun nibbleB$ ()Nibble$)
(declare-fun nibbleC$ ()Nibble$)
(declare-fun nibbleD$ ()Nibble$)
(declare-fun nibbleE$ ()Nibble$)
(declare-fun nibbleF$ ()Nibble$)
(declare-fun selecte$ (Char$)Nibble$)
(declare-fun selectf$ (Char$)Nibble$)
(declare-fun char$ (Nibble$ Nibble$ )Char$)
(declare-fun nil$c ()A_tree_list_list_list_list$)
(declare-fun hd$c (A_tree_list_list_list_list$)A_tree_list_list_list$)
(declare-fun tl$c (A_tree_list_list_list_list$)A_tree_list_list_list_list$)
(declare-fun cons$c (A_tree_list_list_list$ A_tree_list_list_list_list$ )A_tree_list_list_list_list$)
(declare-fun ts$ ()A_tree_list$ )
(declare-fun uu$ (A_tree$ )A_tree_list_a_tree_list_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun freq_F$ (A_tree_list$ A$ )Nat$ )
(declare-fun fun_app$ (A_tree_list_a_tree_list_fun$ A_tree_list$ )A_tree_list$ )
(declare-fun huffman$ (A_tree_list$ )A_tree$ )
(declare-fun optimum$ (A_tree$ )Bool )
(declare-fun height_F$ (A_tree_list$ )Nat$ )
(declare-fun size_char$ (Char$ )Nat$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun splitLeaf_F$ (A_tree_list$ Nat$ A$ Nat$ A$ )A_tree_list$ )
(declare-fun consistent_F$ (A_tree_list$ )Bool )
(declare-fun sortedByWeight$ (A_tree_list$ )Bool )
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(cons$ ?v0 ?v1 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (optimum$ (huffman$ ts$ ))):named a1 ))
(assert (! (consistent_F$ ts$ ):named a2 ))
(assert (! (= (height_F$ ts$ )zero$ ):named a3 ))
(assert (! (sortedByWeight$ ts$ ):named a4 ))
(assert (! (not (= ts$ nil$ )):named a5 ))
(assert (! (= (sortedByWeight$ nil$ )true ):named a6 ))
(assert (! (= (consistent_F$ nil$ )true ):named a7 ))
(assert (! (= (height_F$ nil$ )zero$ ):named a8 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (consistent_F$ ?v0 )(not (= ?v0 nil$ )))(consistent$ (huffman$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A$ ))(! (= (freq_F$ nil$ ?v0 )zero$ ):pattern ((freq_F$ nil$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_tree_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(=> (not (= ?v0 nil$b ))false ))false )):named a11 ))
(assert (! (forall ((?v0 A_tree_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(=> (not (= ?v0 nil$a ))false ))false )):named a12 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a13 ))
(assert (! (= zero$ zero$ ):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a15 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(! (= (splitLeaf_F$ nil$ ?v0 ?v1 ?v2 ?v3 )nil$ ):pattern ((splitLeaf_F$ nil$ ?v0 ?v1 ?v2 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (huffman$ (cons$ ?v0 nil$ ))?v0 ):pattern ((uu$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (sortedByWeight$ (cons$ ?v0 nil$ ))true ):pattern ((uu$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_tree_list_list$ )(?v1 A_tree_list_list_list$ )(?v2 A_tree_list_list$ )(?v3 A_tree_list_list_list$ ))(= (= (cons$b ?v0 ?v1 )(cons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 A_tree_list$ )(?v1 A_tree_list_list$ )(?v2 A_tree_list$ )(?v3 A_tree_list_list$ ))(= (= (cons$a ?v0 ?v1 )(cons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a23 ))
(assert (! (forall ((?v0 A_tree_list_list_list_list$ ))(=> (and (=> (= ?v0 nil$c )false )(and (forall ((?v1 A_tree_list_list_list_list$ ))(=> (= ?v0 (cons$c nil$b ?v1 ))false ))(forall ((?v1 A_tree_list_list$ )(?v2 A_tree_list_list_list$ )(?v3 A_tree_list_list_list_list$ ))(=> (= ?v0 (cons$c (cons$b ?v1 ?v2 )?v3 ))false ))))false )):named a24 ))
(assert (! (forall ((?v0 A_tree_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(and (forall ((?v1 A_tree_list_list_list$ ))(=> (= ?v0 (cons$b nil$a ?v1 ))false ))(forall ((?v1 A_tree_list$ )(?v2 A_tree_list_list$ )(?v3 A_tree_list_list_list$ ))(=> (= ?v0 (cons$b (cons$a ?v1 ?v2 )?v3 ))false ))))false )):named a25 ))
(assert (! (forall ((?v0 A_tree_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(and (forall ((?v1 A_tree_list_list$ ))(=> (= ?v0 (cons$a nil$ ?v1 ))false ))(forall ((?v1 A_tree$ )(?v2 A_tree_list$ )(?v3 A_tree_list_list$ ))(=> (= ?v0 (cons$a (cons$ ?v1 ?v2 )?v3 ))false ))))false )):named a26 ))
(check-sat )
;(get-unsat-core )
