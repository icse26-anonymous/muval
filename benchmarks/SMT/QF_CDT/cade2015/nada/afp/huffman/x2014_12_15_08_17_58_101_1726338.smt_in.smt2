;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_set_a_set_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun a$ ()A$ )
(declare-fun p$ (A_tree$ A$ )Bool )
(declare-fun t$ ()A_tree$ )
(declare-fun bot$ ()A_set$ )
(declare-fun inf$ (A_set$ )A_set_a_set_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_set_a_set_fun$ A_set$ )A_set$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(assert (! (not (p$ t$ a$ )):named a0 ))
(assert (! (consistent$ t$ ):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A$ ))(p$ (leaf$ ?v0 ?v1 )?v2 )):named a2 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A$ )(?v3 Nat$ ))(=> (and (consistent$ ?v0 )(and (consistent$ ?v1 )(and (= (fun_app$ (inf$ (alphabet$ ?v0 ))(alphabet$ ?v1 ))bot$ )(and (member$ ?v2 (alphabet$ ?v0 ))(and (not (member$ ?v2 (alphabet$ ?v1 )))(and (p$ ?v0 ?v2 )(p$ ?v1 ?v2 )))))))(p$ (innerNode$ ?v3 ?v0 ?v1 )?v2 ))):named a3 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A$ )(?v3 Nat$ ))(=> (and (consistent$ ?v0 )(and (consistent$ ?v1 )(and (= (fun_app$ (inf$ (alphabet$ ?v0 ))(alphabet$ ?v1 ))bot$ )(and (not (member$ ?v2 (alphabet$ ?v0 )))(and (member$ ?v2 (alphabet$ ?v1 ))(and (p$ ?v0 ?v2 )(p$ ?v1 ?v2 )))))))(p$ (innerNode$ ?v3 ?v0 ?v1 )?v2 ))):named a4 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A$ )(?v3 Nat$ ))(=> (and (consistent$ ?v0 )(and (consistent$ ?v1 )(and (= (fun_app$ (inf$ (alphabet$ ?v0 ))(alphabet$ ?v1 ))bot$ )(and (not (member$ ?v2 (alphabet$ ?v0 )))(and (not (member$ ?v2 (alphabet$ ?v1 )))(and (p$ ?v0 ?v2 )(p$ ?v1 ?v2 )))))))(p$ (innerNode$ ?v3 ?v0 ?v1 )?v2 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (consistent$ (innerNode$ ?v0 ?v1 ?v2 ))(and (consistent$ ?v1 )(and (consistent$ ?v2 )(= (fun_app$ (inf$ (alphabet$ ?v1 ))(alphabet$ ?v2 ))bot$ )))):pattern ((innerNode$ ?v0 ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (consistent$ (leaf$ ?v0 ?v1 ))true ):pattern ((leaf$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (forall ((?v1 Nat$ )(?v2 A$ ))(=> (= ?v0 (leaf$ ?v1 ?v2 ))false ))(forall ((?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v0 (innerNode$ ?v1 ?v2 ?v3 ))false )))false )):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A_tree$ )(?v4 A_tree$ ))(not (= (leaf$ ?v0 ?v1 )(innerNode$ ?v2 ?v3 ?v4 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_set$ ))(= (fun_app$ (inf$ ?v0 )bot$ )bot$ )):named a13 ))
(assert (! (forall ((?v0 A_set$ ))(= (fun_app$ (inf$ bot$ )?v0 )bot$ )):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (member$ ?v0 (fun_app$ (inf$ ?v1 )?v2 ))(and (member$ ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (and (member$ ?v0 ?v1 )(member$ ?v0 ?v2 ))(member$ ?v0 (fun_app$ (inf$ ?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$ (inf$ (fun_app$ (inf$ ?v0 )?v1 ))?v1 )(fun_app$ (inf$ ?v0 )?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$ (inf$ (fun_app$ (inf$ ?v0 )?v1 ))?v1 )(fun_app$ (inf$ ?v0 )?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$ (inf$ ?v0 )(fun_app$ (inf$ ?v0 )?v1 ))(fun_app$ (inf$ ?v0 )?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$ (inf$ ?v0 )(fun_app$ (inf$ ?v0 )?v1 ))(fun_app$ (inf$ ?v0 )?v1 ))):named a20 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$ (inf$ ?v0 )?v0 )?v0 ):pattern ((inf$ ?v0 )))):named a21 ))
(check-sat )
;(get-unsat-core )
