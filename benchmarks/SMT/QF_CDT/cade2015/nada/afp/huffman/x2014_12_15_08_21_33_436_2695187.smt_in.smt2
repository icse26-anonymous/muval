;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_tree$ 0)
(declare-sort A_tree_list$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun nil$ ()A_tree_list$)
(declare-fun hd$ (A_tree_list$)A_tree$)
(declare-fun tl$ (A_tree_list$)A_tree_list$)
(declare-fun cons$ (A_tree$ A_tree_list$ )A_tree_list$)
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_b$ ()Nat$ )
(declare-fun freq$ (A_tree$ A$ )Nat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun optimum$ (A_tree$ )Bool )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun splitLeaf$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun splitLeaf_F$ (A_tree_list$ Nat$ A$ Nat$ A$ )A_tree_list$ )
(assert (! (not (optimum$ (splitLeaf$ t$ w_a$ a$ w_b$ b$ ))):named a0 ))
(assert (! (optimum$ t$ ):named a1 ))
(assert (! (consistent$ t$ ):named a2 ))
(assert (! (less_eq$ w_a$ w_b$ ):named a3 ))
(assert (! (member$ a$ (alphabet$ t$ )):named a4 ))
(assert (! (not (member$ b$ (alphabet$ t$ ))):named a5 ))
(assert (! (= (freq$ t$ a$ )(plus$ w_a$ w_b$ )):named a6 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 (alphabet$ t$ ))(and (less_eq$ w_a$ (freq$ t$ ?v0 ))(less_eq$ w_b$ (freq$ t$ ?v0 ))))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 Nat$ )(?v4 A$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4 )?v1 )):pattern ((splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A$ )(?v5 Nat$ )(?v6 A$ ))(! (= (splitLeaf$ (innerNode$ ?v0 ?v1 ?v2 )?v3 ?v4 ?v5 ?v6 )(innerNode$ ?v0 (splitLeaf$ ?v1 ?v3 ?v4 ?v5 ?v6 )(splitLeaf$ ?v2 ?v3 ?v4 ?v5 ?v6 ))):pattern ((splitLeaf$ (innerNode$ ?v0 ?v1 ?v2 )?v3 ?v4 ?v5 ?v6 )))):named a9 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 Nat$ )(?v3 A$ )(?v4 Nat$ )(?v5 A$ ))(! (= (splitLeaf_F$ (cons$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )(cons$ (splitLeaf$ ?v0 ?v2 ?v3 ?v4 ?v5 )(splitLeaf_F$ ?v1 ?v2 ?v3 ?v4 ?v5 ))):pattern ((splitLeaf_F$ (cons$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ )(?v4 Nat$ )(?v5 A$ ))(! (= (splitLeaf$ (leaf$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )(ite (= ?v1 ?v3 )(innerNode$ ?v0 (leaf$ ?v2 ?v3 )(leaf$ ?v4 ?v5 ))(leaf$ ?v0 ?v1 ))):pattern ((splitLeaf$ (leaf$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ )(?v4 Nat$ ))(=> (and (consistent$ ?v0 )(not (member$ ?v1 (alphabet$ ?v0 ))))(consistent$ (splitLeaf$ ?v0 ?v2 ?v3 ?v4 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ ))(! (= (freq$ (innerNode$ ?v0 ?v1 ?v2 )?v3 )(plus$ (freq$ ?v1 ?v3 )(freq$ ?v2 ?v3 ))):pattern ((freq$ (innerNode$ ?v0 ?v1 ?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (consistent$ (leaf$ ?v0 ?v1 ))true ):pattern ((leaf$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (forall ((?v1 Nat$ )(?v2 A$ ))(=> (= ?v0 (leaf$ ?v1 ?v2 ))false ))(forall ((?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v0 (innerNode$ ?v1 ?v2 ?v3 ))false )))false )):named a17 ))
(check-sat )
;(get-unsat-core )
