;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun b$ ()A$ )
(declare-fun c$ ()A$ )
(declare-fun w$ ()Nat$ )
(declare-fun t_1$ ()A_tree$ )
(declare-fun t_2$ ()A_tree$ )
(declare-fun depth$ (A_tree$ A$ )Nat$ )
(declare-fun height$ (A_tree$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun pred_tree$ (A_bool_fun$ A_tree$ )Bool )
(declare-fun consistent$ (A_tree$ )Bool )
(assert (! (not (member$ (ite (less_eq$ (height$ t_2$ )(height$ t_1$ ))b$ c$ )(alphabet$ (innerNode$ w$ t_1$ t_2$ )))):named a0 ))
(assert (! (member$ b$ (alphabet$ t_1$ )):named a1 ))
(assert (! (member$ c$ (alphabet$ t_2$ )):named a2 ))
(assert (! (= (depth$ t_1$ b$ )(height$ t_1$ )):named a3 ))
(assert (! (= (depth$ t_2$ c$ )(height$ t_2$ )):named a4 ))
(assert (! (=> (consistent$ t_1$ )(exists ((?v0 A$ ))(and (member$ ?v0 (alphabet$ t_1$ ))(= (depth$ t_1$ ?v0 )(height$ t_1$ ))))):named a5 ))
(assert (! (=> (consistent$ t_2$ )(exists ((?v0 A$ ))(and (member$ ?v0 (alphabet$ t_2$ ))(= (depth$ t_2$ ?v0 )(height$ t_2$ ))))):named a6 ))
(assert (! (consistent$ (innerNode$ w$ t_1$ t_2$ )):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a8 ))
(assert (! (=> (forall ((?v0 A$ ))(=> (and (member$ ?v0 (alphabet$ t_2$ ))(= (depth$ t_2$ ?v0 )(height$ t_2$ )))false ))false ):named a9 ))
(assert (! (=> (forall ((?v0 A$ ))(=> (and (member$ ?v0 (alphabet$ t_1$ ))(= (depth$ t_1$ ?v0 )(height$ t_1$ )))false ))false ):named a10 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(less_eq$ (depth$ ?v0 ?v1 )(height$ ?v0 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$ ?v0 ?v0 )):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (pred_tree$ ?v0 (innerNode$ ?v1 ?v2 ?v3 ))(and (pred_tree$ ?v0 ?v2 )(pred_tree$ ?v0 ?v3 ))):pattern ((pred_tree$ ?v0 (innerNode$ ?v1 ?v2 ?v3 ))))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 ?v1 )(less_eq$ ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a16 ))
(check-sat )
;(get-unsat-core )
