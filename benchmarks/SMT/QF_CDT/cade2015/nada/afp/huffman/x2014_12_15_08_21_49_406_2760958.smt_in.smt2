;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun u$ ()A_tree$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_b$ ()Nat$ )
(declare-fun cost$ (A_tree$ )Nat$ )
(declare-fun freq$ (A_tree$ )A_nat_fun$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun height$ (A_tree$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_nat_fun$ A$ )Nat$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun optimum$ (A_tree$ )Bool )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun splitLeaf$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(declare-fun consistent$ (A_tree$ )Bool )
(assert (! (not (= (cost$ (splitLeaf$ t$ w_a$ a$ w_b$ b$ ))(plus$ (plus$ (cost$ t$ )w_a$ )w_b$ ))):named a0 ))
(assert (! (optimum$ t$ ):named a1 ))
(assert (! (consistent$ t$ ):named a2 ))
(assert (! (member$ a$ (alphabet$ t$ )):named a3 ))
(assert (! (not (member$ b$ (alphabet$ t$ ))):named a4 ))
(assert (! (less_eq$ w_a$ w_b$ ):named a5 ))
(assert (! (not (= a$ b$ )):named a6 ))
(assert (! (= (fun_app$ (freq$ t$ )a$ )(plus$ w_a$ w_b$ )):named a7 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 (alphabet$ t$ ))(and (less_eq$ w_a$ (fun_app$ (freq$ t$ )?v0 ))(less_eq$ w_b$ (fun_app$ (freq$ t$ )?v0 ))))):named a8 ))
(assert (! (= (freq$ (splitLeaf$ t$ w_a$ a$ w_b$ b$ ))(freq$ u$ )):named a9 ))
(assert (! (= (alphabet$ (splitLeaf$ t$ w_a$ a$ w_b$ b$ ))(alphabet$ u$ )):named a10 ))
(assert (! (not (= (height$ (splitLeaf$ t$ w_a$ a$ w_b$ b$ ))zero$ )):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 Nat$ )(?v4 A$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4 )?v1 )):pattern ((splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 Nat$ )(?v3 Nat$ )(?v4 A$ ))(=> (and (consistent$ ?v0 )(and (member$ ?v1 (alphabet$ ?v0 ))(= (fun_app$ (freq$ ?v0 )?v1 )(plus$ ?v2 ?v3 ))))(= (cost$ (splitLeaf$ ?v0 ?v2 ?v1 ?v3 ?v4 ))(plus$ (plus$ (cost$ ?v0 )?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a17 ))
(check-sat )
;(get-unsat-core )
