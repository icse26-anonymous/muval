;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_set_a_set_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun sup$ (A_set$ )A_set_a_set_fun$ )
(declare-fun t_1$ ()A_tree$ )
(declare-fun t_2$ ()A_tree$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_set_a_set_fun$ A_set$ )A_set$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun uniteTrees$ (A_tree$ A_tree$ )A_tree$ )
(assert (! (not (= (alphabet$ (uniteTrees$ t_1$ t_2$ ))(fun_app$ (sup$ (alphabet$ t_1$ ))(alphabet$ t_2$ )))):named a0 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (member$ ?v0 (fun_app$ (sup$ ?v1 )?v2 ))(or (member$ ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (=> (not (member$ ?v0 ?v1 ))(member$ ?v0 ?v2 ))(member$ ?v0 (fun_app$ (sup$ ?v2 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$ (sup$ (fun_app$ (sup$ ?v0 )?v1 ))?v1 )(fun_app$ (sup$ ?v0 )?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$ (sup$ ?v0 )(fun_app$ (sup$ ?v0 )?v1 ))(fun_app$ (sup$ ?v0 )?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$ (sup$ ?v0 )(fun_app$ (sup$ ?v0 )?v1 ))(fun_app$ (sup$ ?v0 )?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$ (sup$ ?v0 )?v0 )?v0 ):pattern ((sup$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$ (sup$ ?v0 )?v0 )?v0 ):pattern ((sup$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_bool_fun$ ))(= (exists ((?v3 A$ ))(and (member$ ?v3 (fun_app$ (sup$ ?v0 )?v1 ))(fun_app$a ?v2 ?v3 )))(or (exists ((?v3 A$ ))(and (member$ ?v3 ?v0 )(fun_app$a ?v2 ?v3 )))(exists ((?v3 A$ ))(and (member$ ?v3 ?v1 )(fun_app$a ?v2 ?v3 )))))):named a9 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_bool_fun$ ))(= (forall ((?v3 A$ ))(=> (member$ ?v3 (fun_app$ (sup$ ?v0 )?v1 ))(fun_app$a ?v2 ?v3 )))(and (forall ((?v3 A$ ))(=> (member$ ?v3 ?v0 )(fun_app$a ?v2 ?v3 )))(forall ((?v3 A$ ))(=> (member$ ?v3 ?v1 )(fun_app$a ?v2 ?v3 )))))):named a10 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_set$ ))(= (fun_app$ (sup$ (fun_app$ (sup$ ?v0 )?v1 ))?v2 )(fun_app$ (sup$ ?v0 )(fun_app$ (sup$ ?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_set$ ))(= (fun_app$ (sup$ ?v0 )(fun_app$ (sup$ ?v1 )?v2 ))(fun_app$ (sup$ ?v1 )(fun_app$ (sup$ ?v0 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$ (sup$ ?v0 )?v1 )(fun_app$ (sup$ ?v1 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$ (sup$ ?v0 )?v1 )(fun_app$ (sup$ ?v1 )?v0 ))):named a14 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$ (sup$ ?v0 )?v1 )(fun_app$ (sup$ ?v1 )?v0 ))):named a15 ))
(check-sat )
;(get-unsat-core )
