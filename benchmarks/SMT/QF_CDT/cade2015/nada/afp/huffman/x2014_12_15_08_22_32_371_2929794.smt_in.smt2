;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_tree_list_a_tree_list_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort A_tree_list$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun nil$ ()A_tree_list$)
(declare-fun hd$ (A_tree_list$)A_tree$)
(declare-fun tl$ (A_tree_list$)A_tree_list$)
(declare-fun cons$ (A_tree$ A_tree_list$ )A_tree_list$)
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun ts$ ()A_tree_list$ )
(declare-fun uu$ (A_tree$ )A_tree_list_a_tree_list_fun$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun t_a$ ()A_tree$ )
(declare-fun t_b$ ()A_tree$ )
(declare-fun ts$a ()A_tree_list$ )
(declare-fun tsa$ ()A_tree_list$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_b$ ()Nat$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun size$ (A_tree_list$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_tree_list_a_tree_list_fun$ A_tree_list$ )A_tree_list$ )
(declare-fun huffman$ (A_tree_list$ )A_tree$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun optimum$ (A_tree$ )Bool )
(declare-fun height_F$ (A_tree_list$ )Nat$ )
(declare-fun alphabet_F$ (A_tree_list$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun insortTree$ (A_tree$ )A_tree_list_a_tree_list_fun$ )
(declare-fun uniteTrees$ (A_tree$ A_tree$ )A_tree$ )
(declare-fun consistent_F$ (A_tree_list$ )Bool )
(declare-fun sortedByWeight$ (A_tree_list$ )Bool )
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(cons$ ?v0 ?v1 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (consistent$ (huffman$ (fun_app$ (insortTree$ (leaf$ (plus$ w_a$ w_b$ )a$ ))ts$ )))):named a1 ))
(assert (! (optimum$ (huffman$ (fun_app$ (insortTree$ (leaf$ (plus$ w_a$ w_b$ )a$ ))ts$ ))):named a2 ))
(assert (! (= t_a$ (leaf$ w_a$ a$ )):named a3 ))
(assert (! (= t_b$ (leaf$ w_b$ b$ )):named a4 ))
(assert (! (= ts$a (cons$ (leaf$ w_b$ b$ )ts$ )):named a5 ))
(assert (! (= tsa$ (cons$ (leaf$ w_a$ a$ )(cons$ (leaf$ w_b$ b$ )ts$ ))):named a6 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (less$ (size$ ?v0 )(suc$ (suc$ (size$ ts$ ))))(and (consistent_F$ ?v0 )(and (= (height_F$ ?v0 )zero$ )(and (sortedByWeight$ ?v0 )(not (= ?v0 nil$ ))))))(optimum$ (huffman$ ?v0 )))):named a7 ))
(assert (! (and (consistent_F$ ts$ )(and (not (member$ b$ (alphabet_F$ ts$ )))(and (not (= b$ a$ ))(not (member$ a$ (alphabet_F$ ts$ )))))):named a8 ))
(assert (! (= (height_F$ ts$ )zero$ ):named a9 ))
(assert (! (and (less_eq$ w_a$ w_b$ )(sortedByWeight$ (cons$ (leaf$ w_b$ b$ )ts$ ))):named a10 ))
(assert (! (not (= tsa$ nil$ )):named a11 ))
(assert (! (sortedByWeight$ tsa$ ):named a12 ))
(assert (! (consistent_F$ tsa$ ):named a13 ))
(assert (! (= (height_F$ tsa$ )zero$ ):named a14 ))
(assert (! (= t_a$ (leaf$ w_a$ a$ )):named a15 ))
(assert (! (= t_b$ (leaf$ w_b$ b$ )):named a16 ))
(assert (! (= tsa$ (cons$ t_a$ ts$a )):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a18 ))
(assert (! (= ts$a (cons$ t_b$ ts$ )):named a19 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (less$ (size$ ?v0 )(size$ tsa$ ))(and (consistent_F$ ?v0 )(and (= (height_F$ ?v0 )zero$ )(and (sortedByWeight$ ?v0 )(not (= ?v0 nil$ ))))))(optimum$ (huffman$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(= (consistent_F$ (fun_app$ (insortTree$ ?v0 )?v1 ))(consistent_F$ (cons$ ?v0 ?v1 )))):named a21 ))
(assert (! (optimum$ (huffman$ (fun_app$ (insortTree$ (leaf$ (plus$ w_a$ w_b$ )a$ ))ts$ ))):named a22 ))
(assert (! (= (huffman$ tsa$ )(huffman$ (fun_app$ (insortTree$ (uniteTrees$ t_a$ t_b$ ))ts$ ))):named a23 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (fun_app$ (insortTree$ ?v0 )nil$ )(cons$ ?v0 nil$ )):pattern ((insortTree$ ?v0 )))):named a24 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (huffman$ (cons$ ?v0 nil$ ))?v0 ):pattern ((uu$ ?v0 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (consistent$ (leaf$ ?v0 ?v1 ))true ):pattern ((leaf$ ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (sortedByWeight$ (cons$ ?v0 nil$ ))true ):pattern ((uu$ ?v0 )))):named a27 ))
(check-sat )
;(get-unsat-core )
