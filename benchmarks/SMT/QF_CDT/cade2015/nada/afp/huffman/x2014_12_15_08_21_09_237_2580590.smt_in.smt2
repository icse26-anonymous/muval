;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_tree_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun a$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun cost$ (A_tree$ )Nat$ )
(declare-fun freq$ (A_tree$ A$ )Nat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun depth$ (A_tree$ A$ )Nat$ )
(declare-fun fun_app$ (A_a_tree_fun$ A$ )A_tree$ )
(declare-fun sibling$ (A_tree$ A$ )A$ )
(declare-fun swapSyms$ (A_tree$ A$ )A_a_tree_fun$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(declare-fun uniteTrees$ (A_tree$ A_tree$ )A_tree$ )
(declare-fun mergeSibling$ (A_tree$ A$ )A_tree$ )
(declare-fun swapFourSyms$ (A_tree$ A$ A$ A$ A$ )A_tree$ )
(assert (! (not (= (plus$ (plus$ (cost$ (mergeSibling$ t$ a$ ))(freq$ t$ a$ ))(freq$ t$ (sibling$ t$ a$ )))(cost$ t$ ))):named a0 ))
(assert (! (consistent$ t$ ):named a1 ))
(assert (! (not (= (sibling$ t$ a$ )a$ )):named a2 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (sibling$ ?v0 (sibling$ ?v0 ?v1 ))?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ ))(=> (and (consistent$ ?v0 )(= (sibling$ ?v0 ?v1 )?v2 ))(= (sibling$ ?v0 ?v2 )?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(consistent$ (mergeSibling$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a7 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A$ ))(= (freq$ (uniteTrees$ ?v0 ?v1 )?v2 )(plus$ (freq$ ?v0 ?v2 )(freq$ ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ ))(=> (and (consistent$ ?v0 )(and (not (= (sibling$ ?v0 ?v1 )?v2 ))(and (not (= (sibling$ ?v0 ?v1 )?v1 ))(not (= ?v2 ?v1 )))))(= (sibling$ (fun_app$ (swapSyms$ ?v0 ?v2 )?v1 )(sibling$ ?v0 ?v1 ))?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ ))(=> (and (consistent$ ?v0 )(and (not (= (sibling$ ?v0 ?v1 )?v1 ))(not (= ?v2 ?v1 ))))(= (sibling$ (fun_app$ (swapSyms$ ?v0 ?v2 )(sibling$ ?v0 ?v1 ))?v2 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (swapLeaves$ ?v0 (freq$ ?v0 ?v1 )?v1 (freq$ ?v0 ?v1 )?v1 )?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ )(?v3 Nat$ )(?v4 Nat$ ))(=> (and (consistent$ ?v0 )(and (not (= (sibling$ ?v0 ?v1 )?v1 ))(not (= ?v2 ?v1 ))))(= (sibling$ (swapLeaves$ ?v0 ?v3 ?v2 ?v4 (sibling$ ?v0 ?v1 ))?v2 )?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (depth$ ?v0 (sibling$ ?v0 ?v1 ))(depth$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ )(?v3 A$ )(?v4 A$ ))(=> (consistent$ ?v0 )(consistent$ (swapFourSyms$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )(plus$ ?v2 ?v3 ))(plus$ (plus$ ?v0 ?v2 )(plus$ ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(! (=> (consistent$ ?v0 )(= (fun_app$ (swapSyms$ ?v0 ?v1 )?v1 )?v0 )):pattern ((swapSyms$ ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ )(?v3 A$ )(?v4 Nat$ )(?v5 Nat$ ))(=> (and (consistent$ ?v0 )(and (not (= ?v1 ?v2 ))(not (= ?v1 ?v3 ))))(= (depth$ (swapLeaves$ ?v0 ?v4 ?v2 ?v5 ?v3 )?v1 )(depth$ ?v0 ?v1 )))):named a19 ))
(check-sat )
;(get-unsat-core )
