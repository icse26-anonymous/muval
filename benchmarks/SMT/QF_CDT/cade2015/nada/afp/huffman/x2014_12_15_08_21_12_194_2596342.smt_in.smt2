;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun bot$ ()A_set$ )
(declare-fun sup$ (A_set$ A_set$ )A_set$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_b$ ()Nat$ )
(declare-fun insert$ (A$ A_set$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun splitLeaf$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(assert (! (not (= (alphabet$ (splitLeaf$ t$ w_a$ a$ w_b$ b$ ))(ite (member$ a$ (alphabet$ t$ ))(sup$ (alphabet$ t$ )(insert$ b$ bot$ ))(alphabet$ t$ )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 Nat$ )(?v4 A$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4 )?v1 )):pattern ((splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4 )))):named a1 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (sup$ (insert$ ?v0 ?v1 )?v2 )(insert$ ?v0 (sup$ ?v1 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ )(?v2 A_set$ ))(= (sup$ ?v0 (insert$ ?v1 ?v2 ))(insert$ ?v1 (sup$ ?v0 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (= (sup$ ?v0 ?v1 )bot$ )(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a5 ))
(assert (! (forall ((?v0 A$ ))(member$ ?v0 (insert$ ?v0 bot$ ))):named a6 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (= bot$ (sup$ ?v0 ?v1 ))(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a7 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (= (sup$ ?v0 ?v1 )bot$ )(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a8 ))
(assert (! (forall ((?v0 A_set$ ))(= (sup$ ?v0 bot$ )?v0 )):named a9 ))
(assert (! (forall ((?v0 A_set$ ))(= (sup$ bot$ ?v0 )?v0 )):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (= (insert$ ?v0 bot$ )(sup$ ?v1 ?v2 ))(or (and (= ?v1 bot$ )(= ?v2 (insert$ ?v0 bot$ )))(or (and (= ?v1 (insert$ ?v0 bot$ ))(= ?v2 bot$ ))(and (= ?v1 (insert$ ?v0 bot$ ))(= ?v2 (insert$ ?v0 bot$ ))))))):named a11 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A$ ))(= (= (sup$ ?v0 ?v1 )(insert$ ?v2 bot$ ))(or (and (= ?v0 bot$ )(= ?v1 (insert$ ?v2 bot$ )))(or (and (= ?v0 (insert$ ?v2 bot$ ))(= ?v1 bot$ ))(and (= ?v0 (insert$ ?v2 bot$ ))(= ?v1 (insert$ ?v2 bot$ ))))))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ ))(= (insert$ ?v0 ?v1 )(sup$ (insert$ ?v0 bot$ )?v1 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (member$ ?v0 (sup$ ?v1 ?v2 ))(or (member$ ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A$ ))(= (member$ ?v0 bot$ )false )):named a15 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= bot$ (collect$ ?v0 ))(forall ((?v1 A$ ))(not (fun_app$ ?v0 ?v1 ))))):named a16 ))
(assert (! (forall ((?v0 A_set$ ))(= (forall ((?v1 A$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$ ))):named a17 ))
(check-sat )
;(get-unsat-core )
