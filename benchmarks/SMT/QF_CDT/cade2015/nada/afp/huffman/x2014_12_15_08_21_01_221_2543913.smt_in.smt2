;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_tree_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun a$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun sup$ (A_set$ A_set$ )A_set$ )
(declare-fun freq$ (A_tree$ A$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun finite$ (A_set$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_a_tree_fun$ A$ )A_tree$ )
(declare-fun sibling$ (A_tree$ A$ )A$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun swapSyms$ (A_tree$ A$ A$ )A_tree$ )
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$ )A_a_tree_fun$ )
(declare-fun uniteTrees$ (A_tree$ A_tree$ )A_tree$ )
(declare-fun mergeSibling$ (A_tree$ A$ )A_tree$ )
(declare-fun swapFourSyms$ (A_tree$ A$ A$ A$ A$ )A_tree$ )
(assert (! (not (= (mergeSibling$ t$ a$ )t$ )):named a0 ))
(assert (! (not (member$ a$ (alphabet$ t$ ))):named a1 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A$ )(?v4 A$ ))(=> (and (member$ ?v0 (alphabet$ ?v1 ))(and (member$ ?v2 (alphabet$ ?v1 ))(and (member$ ?v3 (alphabet$ ?v1 ))(member$ ?v4 (alphabet$ ?v1 )))))(= (alphabet$ (swapFourSyms$ ?v1 ?v0 ?v2 ?v3 ?v4 ))(alphabet$ ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A$ ))(=> (and (member$ ?v0 (alphabet$ ?v1 ))(member$ ?v2 (alphabet$ ?v1 )))(= (alphabet$ (swapSyms$ ?v1 ?v0 ?v2 ))(alphabet$ ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 Nat$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (fun_app$ (swapLeaves$ ?v1 ?v2 ?v0 ?v3 )?v0 )?v1 )):pattern ((swapLeaves$ ?v1 ?v2 ?v0 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (sibling$ ?v1 ?v0 )?v0 )):pattern ((sibling$ ?v1 ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A$ ))(! (= (mergeSibling$ (leaf$ ?v0 ?v1 )?v2 )(leaf$ ?v0 ?v1 )):pattern ((mergeSibling$ (leaf$ ?v0 ?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ ))(! (= (mergeSibling$ (innerNode$ ?v0 (innerNode$ ?v1 ?v2 ?v3 )?v4 )?v5 )(innerNode$ ?v0 (mergeSibling$ (innerNode$ ?v1 ?v2 ?v3 )?v5 )(mergeSibling$ ?v4 ?v5 ))):pattern ((mergeSibling$ (innerNode$ ?v0 (innerNode$ ?v1 ?v2 ?v3 )?v4 )?v5 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 A_tree$ )(?v4 A_tree$ )(?v5 A$ ))(! (= (mergeSibling$ (innerNode$ ?v0 ?v1 (innerNode$ ?v2 ?v3 ?v4 ))?v5 )(innerNode$ ?v0 (mergeSibling$ ?v1 ?v5 )(mergeSibling$ (innerNode$ ?v2 ?v3 ?v4 )?v5 ))):pattern ((mergeSibling$ (innerNode$ ?v0 ?v1 (innerNode$ ?v2 ?v3 ?v4 ))?v5 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (member$ ?v0 (alphabet$ ?v1 ))(member$ (sibling$ ?v1 ?v0 )(alphabet$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (not (= (sibling$ ?v0 ?v1 )?v1 ))(member$ (sibling$ ?v0 ?v1 )(alphabet$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ ))(finite$ (alphabet$ ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (alphabet$ (uniteTrees$ ?v0 ?v1 ))(sup$ (alphabet$ ?v0 )(alphabet$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (freq$ ?v1 ?v0 )zero$ )):pattern ((freq$ ?v1 ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ )(?v3 A$ )(?v4 A$ ))(! (= (swapFourSyms$ ?v0 ?v1 ?v2 ?v3 ?v4 )(ite (= ?v1 ?v4 )(swapSyms$ ?v0 ?v2 ?v3 )(ite (= ?v2 ?v3 )(swapSyms$ ?v0 ?v1 ?v4 )(swapSyms$ (swapSyms$ ?v0 ?v1 ?v3 )?v2 ?v4 )))):pattern ((swapFourSyms$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ )(?v4 Nat$ )(?v5 A$ ))(! (= (fun_app$ (swapLeaves$ (leaf$ ?v0 ?v1 )?v2 ?v3 ?v4 )?v5 )(ite (= ?v1 ?v3 )(leaf$ ?v4 ?v5 )(ite (= ?v1 ?v5 )(leaf$ ?v2 ?v3 )(leaf$ ?v0 ?v1 )))):pattern ((fun_app$ (swapLeaves$ (leaf$ ?v0 ?v1 )?v2 ?v3 ?v4 )?v5 )))):named a18 ))
(check-sat )
;(get-unsat-core )
