;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort A_set_a_set_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun w$ ()Nat$ )
(declare-fun uu$ ()A_nat_fun$ )
(declare-fun sup$ (A_set$ )A_set_a_set_fun$ )
(declare-fun t_1$ ()A_tree$ )
(declare-fun t_2$ ()A_tree$ )
(declare-fun uua$ ()A_nat_fun$ )
(declare-fun uub$ ()A_nat_fun$ )
(declare-fun uuc$ ()A_nat_fun$ )
(declare-fun uud$ ()A_nat_fun$ )
(declare-fun cost$ (A_tree$ )Nat$ )
(declare-fun freq$ (A_tree$ A$ )Nat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun depth$ (A_tree$ A$ )Nat$ )
(declare-fun times$ (Nat$ Nat$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun setsum$ (A_nat_fun$ A_set$ )Nat$ )
(declare-fun fun_app$ (A_nat_fun$ A$ )Nat$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun fun_app$a (A_set_a_set_fun$ A_set$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(times$ (freq$ (innerNode$ w$ t_1$ t_2$ )?v0 )(depth$ (innerNode$ w$ t_1$ t_2$ )?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uud$ ?v0 )(times$ (freq$ t_2$ ?v0 )(depth$ (innerNode$ w$ t_1$ t_2$ )?v0 ))):pattern ((fun_app$ uud$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uuc$ ?v0 )(times$ (freq$ t_1$ ?v0 )(depth$ (innerNode$ w$ t_1$ t_2$ )?v0 ))):pattern ((fun_app$ uuc$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uub$ ?v0 )(times$ (freq$ t_2$ ?v0 )(depth$ t_2$ ?v0 ))):pattern ((fun_app$ uub$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uua$ ?v0 )(times$ (freq$ t_1$ ?v0 )(depth$ t_1$ ?v0 ))):pattern ((fun_app$ uua$ ?v0 )))):named a4 ))
(assert (! (not (= (setsum$ uu$ (fun_app$a (sup$ (alphabet$ t_1$ ))(alphabet$ t_2$ )))(setsum$ uu$ (alphabet$ (innerNode$ w$ t_1$ t_2$ ))))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a6 ))
(assert (! (consistent$ (innerNode$ w$ t_1$ t_2$ )):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (alphabet$ (innerNode$ ?v0 ?v1 ?v2 ))(fun_app$a (sup$ (alphabet$ ?v1 ))(alphabet$ ?v2 ))):pattern ((innerNode$ ?v0 ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a9 ))
(assert (! (= (cost$ (innerNode$ w$ t_1$ t_2$ ))(setsum$ uu$ (fun_app$a (sup$ (alphabet$ t_1$ ))(alphabet$ t_2$ )))):named a10 ))
(assert (! (=> (consistent$ t_1$ )(= (cost$ t_1$ )(setsum$ uua$ (alphabet$ t_1$ )))):named a11 ))
(assert (! (=> (consistent$ t_2$ )(= (cost$ t_2$ )(setsum$ uub$ (alphabet$ t_2$ )))):named a12 ))
(assert (! (= (plus$ (setsum$ uu$ (alphabet$ t_1$ ))(setsum$ uu$ (alphabet$ t_2$ )))(setsum$ uu$ (fun_app$a (sup$ (alphabet$ t_1$ ))(alphabet$ t_2$ )))):named a13 ))
(assert (! (= (plus$ (setsum$ uuc$ (alphabet$ t_1$ ))(setsum$ uud$ (alphabet$ t_2$ )))(plus$ (setsum$ uu$ (alphabet$ t_1$ ))(setsum$ uu$ (alphabet$ t_2$ )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (member$ ?v0 (fun_app$a (sup$ ?v1 )?v2 ))(or (member$ ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (=> (not (member$ ?v0 ?v1 ))(member$ ?v0 ?v2 ))(member$ ?v0 (fun_app$a (sup$ ?v2 )?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$a (sup$ (fun_app$a (sup$ ?v0 )?v1 ))?v1 )(fun_app$a (sup$ ?v0 )?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$a (sup$ ?v0 )(fun_app$a (sup$ ?v0 )?v1 ))(fun_app$a (sup$ ?v0 )?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$a (sup$ ?v0 )(fun_app$a (sup$ ?v0 )?v1 ))(fun_app$a (sup$ ?v0 )?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$a (sup$ ?v0 )?v0 )?v0 ):pattern ((sup$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$a (sup$ ?v0 )?v0 )?v0 ):pattern ((sup$ ?v0 )))):named a21 ))
(check-sat )
;(get-unsat-core )
