;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun c$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun u$ ()A_tree$ )
(declare-fun freq$ (A_tree$ )A_nat_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun optimum$ (A_tree$ )Bool )
(declare-fun sibling$ (A_tree$ A$ )A$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun mergeSibling$ (A_tree$ A$ )A_tree$ )
(declare-fun swapFourSyms$ (A_tree$ A$ A$ A$ A$ )A_tree$ )
(assert (! (not (consistent$ (mergeSibling$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$ ))a$ ))):named a0 ))
(assert (! (consistent$ u$ ):named a1 ))
(assert (! (consistent$ t$ ):named a2 ))
(assert (! (not (= a$ b$ )):named a3 ))
(assert (! (consistent$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$ ))):named a4 ))
(assert (! (optimum$ t$ ):named a5 ))
(assert (! (not (= (sibling$ u$ c$ )c$ )):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (sibling$ ?v0 (sibling$ ?v0 ?v1 ))?v1 ))):named a7 ))
(assert (! (= (sibling$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$ ))a$ )b$ ):named a8 ))
(assert (! (member$ c$ (alphabet$ u$ )):named a9 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ ))(=> (and (consistent$ ?v0 )(= (sibling$ ?v0 ?v1 )?v2 ))(= (sibling$ ?v0 ?v2 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ )(?v3 A$ )(?v4 A$ ))(=> (consistent$ ?v0 )(consistent$ (swapFourSyms$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(consistent$ (mergeSibling$ ?v0 ?v1 )))):named a12 ))
(assert (! (= (freq$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$ )))(freq$ u$ )):named a13 ))
(assert (! (= (alphabet$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$ )))(alphabet$ u$ )):named a14 ))
(assert (! (member$ (sibling$ u$ c$ )(alphabet$ u$ )):named a15 ))
(assert (! (member$ b$ (alphabet$ u$ )):named a16 ))
(assert (! (member$ a$ (alphabet$ u$ )):named a17 ))
(check-sat )
;(get-unsat-core )
