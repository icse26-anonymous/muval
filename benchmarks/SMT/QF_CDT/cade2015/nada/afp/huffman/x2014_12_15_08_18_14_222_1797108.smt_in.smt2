;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun b$ ()A$ )
(declare-fun c$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun u$ ()A_tree$ )
(declare-fun w$ ()Nat$ )
(declare-fun t_1$ ()A_tree$ )
(declare-fun t_2$ ()A_tree$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(declare-fun pred_tree$ (A_bool_fun$ A_tree$ )Bool )
(declare-fun consistent$ (A_tree$ )Bool )
(assert (! (not (not (= b$ c$ ))):named a0 ))
(assert (! (=> (forall ((?v0 A$ ))(=> (member$ ?v0 (alphabet$ t_2$ ))false ))false ):named a1 ))
(assert (! (=> (forall ((?v0 A$ ))(=> (member$ ?v0 (alphabet$ t_1$ ))false ))false ):named a2 ))
(assert (! (member$ b$ (alphabet$ t_1$ )):named a3 ))
(assert (! (member$ c$ (alphabet$ t_2$ )):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a5 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (pred_tree$ ?v0 (innerNode$ ?v1 ?v2 ?v3 ))(and (pred_tree$ ?v0 ?v2 )(pred_tree$ ?v0 ?v3 ))):pattern ((pred_tree$ ?v0 (innerNode$ ?v1 ?v2 ?v3 ))))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a8 ))
(assert (! (= (alphabet$ t$ )(alphabet$ u$ )):named a9 ))
(assert (! (= t$ (innerNode$ w$ t_1$ t_2$ )):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 Nat$ )(?v2 A$ ))(! (= (pred_tree$ ?v0 (leaf$ ?v1 ?v2 ))(fun_app$ ?v0 ?v2 )):pattern ((pred_tree$ ?v0 (leaf$ ?v1 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (forall ((?v1 Nat$ )(?v2 A$ ))(=> (= ?v0 (leaf$ ?v1 ?v2 ))false ))(forall ((?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v0 (innerNode$ ?v1 ?v2 ?v3 ))false )))false )):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A_tree$ )(?v4 A_tree$ ))(not (= (leaf$ ?v0 ?v1 )(innerNode$ ?v2 ?v3 ?v4 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (consistent$ (leaf$ ?v0 ?v1 ))true ):pattern ((leaf$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (and (member$ ?v0 (set_tree$ ?v1 ))(and (forall ((?v2 Nat$ ))(=> (= ?v1 (leaf$ ?v2 ?v0 ))false ))(and (forall ((?v2 Nat$ )(?v3 A_tree$ )(?v4 A_tree$ ))(=> (and (= ?v1 (innerNode$ ?v2 ?v3 ?v4 ))(member$ ?v0 (set_tree$ ?v3 )))false ))(forall ((?v2 Nat$ )(?v3 A_tree$ )(?v4 A_tree$ ))(=> (and (= ?v1 (innerNode$ ?v2 ?v3 ?v4 ))(member$ ?v0 (set_tree$ ?v4 )))false )))))false )):named a15 ))
(check-sat )
;(get-unsat-core )
