;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_tree_set$ 0 )
(declare-sort A_tree$ 0)
(declare-sort A_tree_list$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun nil$ ()A_tree_list$)
(declare-fun hd$ (A_tree_list$)A_tree$)
(declare-fun tl$ (A_tree_list$)A_tree_list$)
(declare-fun cons$ (A_tree$ A_tree_list$ )A_tree_list$)
(declare-fun ta$ ()A_tree$ )
(declare-fun set$ (A_tree_list$ )A_tree_set$ )
(declare-fun member$ (A_tree$ A_tree_set$ )Bool )
(declare-fun weight$ (A_tree$ )Nat$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun splitLeaf_F$ (A_tree_list$ Nat$ A$ Nat$ A$ )A_tree_list$ )
(declare-fun sortedByWeight$ (A_tree_list$ )Bool )
(assert (! (not (forall ((?v0 A_tree$ ))(=> (member$ ?v0 (set$ nil$ ))(less_eq$ (weight$ ta$ )(weight$ ?v0 ))))):named a0 ))
(assert (! (sortedByWeight$ (cons$ ta$ nil$ )):named a1 ))
(assert (! (= (sortedByWeight$ nil$ )true ):named a2 ))
(assert (! (forall ((?v0 A_tree_list$ )(?v1 Bool ))(=> (and (= (sortedByWeight$ ?v0 )?v1 )(and (=> (and (= ?v0 nil$ )?v1 )false )(and (forall ((?v2 A_tree$ ))(=> (and (= ?v0 (cons$ ?v2 nil$ ))?v1 )false ))(forall ((?v2 A_tree$ )(?v3 A_tree$ )(?v4 A_tree_list$ ))(=> (and (= ?v0 (cons$ ?v2 (cons$ ?v3 ?v4 )))(= ?v1 (and (less_eq$ (weight$ ?v2 )(weight$ ?v3 ))(sortedByWeight$ (cons$ ?v3 ?v4 )))))false )))))false )):named a3 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (sortedByWeight$ ?v0 )(and (=> (= ?v0 nil$ )false )(and (forall ((?v1 A_tree$ ))(=> (= ?v0 (cons$ ?v1 nil$ ))false ))(forall ((?v1 A_tree$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(=> (and (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3 )))(and (less_eq$ (weight$ ?v1 )(weight$ ?v2 ))(sortedByWeight$ (cons$ ?v2 ?v3 ))))false )))))false )):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$ ?v0 ?v0 )):named a5 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (=> (= ?v0 nil$ )false )(and (forall ((?v1 A_tree$ ))(=> (= ?v0 (cons$ ?v1 nil$ ))false ))(forall ((?v1 A_tree$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3 )))false ))))false )):named a6 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (forall ((?v1 A_tree$ ))(=> (= ?v0 (cons$ ?v1 nil$ ))false ))(and (forall ((?v1 A_tree$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3 )))false ))(=> (= ?v0 nil$ )false )))false )):named a7 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_tree_list$ ))(! (= (sortedByWeight$ (cons$ ?v0 (cons$ ?v1 ?v2 )))(and (less_eq$ (weight$ ?v0 )(weight$ ?v1 ))(sortedByWeight$ (cons$ ?v1 ?v2 )))):pattern ((cons$ ?v0 (cons$ ?v1 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (not (sortedByWeight$ ?v0 ))(forall ((?v1 A_tree$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(=> (and (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3 )))(not (and (less_eq$ (weight$ ?v1 )(weight$ ?v2 ))(sortedByWeight$ (cons$ ?v2 ?v3 )))))false )))false )):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(! (= (splitLeaf_F$ nil$ ?v0 ?v1 ?v2 ?v3 )nil$ ):pattern ((splitLeaf_F$ nil$ ?v0 ?v1 ?v2 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 ?v1 )(less_eq$ ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(less_eq$ ?v0 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(=> (sortedByWeight$ (cons$ ?v0 ?v1 ))(sortedByWeight$ ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$ ?v0 ?v0 )):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(or (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))):named a16 ))
(check-sat )
;(get-unsat-core )
