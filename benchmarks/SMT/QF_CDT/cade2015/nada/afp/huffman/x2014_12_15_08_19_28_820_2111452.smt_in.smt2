;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort A_a_tree_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun uu$ (A_tree$ A$ A$ Nat$ Nat$ )A_nat_fun$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_b$ ()Nat$ )
(declare-fun freq$ (A_tree$ )A_nat_fun$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun depth$ (A_tree$ A$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun weight$ (A_tree$ )Nat$ )
(declare-fun fun_app$ (A_nat_fun$ A$ )Nat$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun fun_app$a (A_a_tree_fun$ A$ )A_tree$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$ )A_a_tree_fun$ )
(declare-fun uniteTrees$ (A_tree$ A_tree$ )A_tree$ )
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ )(?v3 Nat$ )(?v4 Nat$ )(?v5 A$ ))(! (= (fun_app$ (uu$ ?v0 ?v1 ?v2 ?v3 ?v4 )?v5 )(ite (= ?v5 ?v1 )(ite (member$ ?v2 (alphabet$ ?v0 ))?v3 zero$ )(ite (= ?v5 ?v2 )(ite (member$ ?v1 (alphabet$ ?v0 ))?v4 zero$ )(fun_app$ (freq$ ?v0 )?v5 )))):pattern ((fun_app$ (uu$ ?v0 ?v1 ?v2 ?v3 ?v4 )?v5 )))):named a0 ))
(assert (! (not (ite (member$ a$ (alphabet$ t$ ))(ite (member$ b$ (alphabet$ t$ ))(= (plus$ (plus$ (weight$ (fun_app$a (swapLeaves$ t$ w_a$ a$ w_b$ )b$ ))(fun_app$ (freq$ t$ )a$ ))(fun_app$ (freq$ t$ )b$ ))(plus$ (plus$ (weight$ t$ )w_a$ )w_b$ ))(= (plus$ (weight$ (fun_app$a (swapLeaves$ t$ w_a$ a$ w_b$ )b$ ))(fun_app$ (freq$ t$ )a$ ))(plus$ (weight$ t$ )w_b$ )))(ite (member$ b$ (alphabet$ t$ ))(= (plus$ (weight$ (fun_app$a (swapLeaves$ t$ w_a$ a$ w_b$ )b$ ))(fun_app$ (freq$ t$ )b$ ))(plus$ (weight$ t$ )w_a$ ))(= (weight$ (fun_app$a (swapLeaves$ t$ w_a$ a$ w_b$ )b$ ))(weight$ t$ ))))):named a1 ))
(assert (! (consistent$ t$ ):named a2 ))
(assert (! (not (= a$ b$ )):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 Nat$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (fun_app$a (swapLeaves$ ?v1 ?v2 ?v0 ?v3 )?v0 )?v1 )):pattern ((swapLeaves$ ?v1 ?v2 ?v0 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (fun_app$a (swapLeaves$ ?v0 (fun_app$ (freq$ ?v0 )?v1 )?v1 (fun_app$ (freq$ ?v0 )?v1 ))?v1 )?v0 ))):named a5 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ )(?v4 A$ ))(=> (consistent$ ?v0 )(consistent$ (fun_app$a (swapLeaves$ ?v0 ?v1 ?v2 ?v3 )?v4 )))):named a6 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A$ ))(= (fun_app$ (freq$ (uniteTrees$ ?v0 ?v1 ))?v2 )(plus$ (fun_app$ (freq$ ?v0 )?v2 )(fun_app$ (freq$ ?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ )(?v3 Nat$ )(?v4 Nat$ ))(=> (and (consistent$ ?v0 )(not (= ?v1 ?v2 )))(= (freq$ (fun_app$a (swapLeaves$ ?v0 ?v3 ?v1 ?v4 )?v2 ))(uu$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ )(?v3 A$ )(?v4 Nat$ )(?v5 Nat$ ))(=> (and (consistent$ ?v0 )(and (not (= ?v1 ?v2 ))(not (= ?v1 ?v3 ))))(= (depth$ (fun_app$a (swapLeaves$ ?v0 ?v4 ?v2 ?v5 )?v3 )?v1 )(depth$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (fun_app$ (freq$ ?v1 )?v0 )zero$ )):pattern ((fun_app$ (freq$ ?v1 )?v0 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )(plus$ ?v2 ?v3 ))(plus$ (plus$ ?v0 ?v2 )(plus$ ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ (plus$ ?v0 ?v2 )?v1 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ ?v0 (plus$ ?v1 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ ?v0 (plus$ ?v1 ?v2 )))):named a19 ))
(check-sat )
;(get-unsat-core )
