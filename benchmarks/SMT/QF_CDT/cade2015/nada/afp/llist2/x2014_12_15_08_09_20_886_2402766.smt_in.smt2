;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort Nat_a_option_fun$ 0 )
(declare-sort A_option$ 0)
(declare-fun none$ ()A_option$)
(declare-fun the$ (A_option$)A$)
(declare-fun some$ (A$ )A_option$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun k$ ()Nat$ )
(declare-fun ta$ ()A_llist$ )
(declare-fun xa$ ()A$ )
(declare-fun ran$ (Nat_a_option_fun$ )A_set$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun ll2f$ (A_llist$ )Nat_a_option_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (Nat_a_option_fun$ Nat$ )A_option$ )
(declare-fun inflsts$ (A_set$ )A_llist_set$ )
(declare-fun is_none$ (A_option$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun pred_option$ (A_bool_fun$ A_option$ )Bool )
(assert (! (not (exists ((?v0 A$ ))(= (fun_app$ (ll2f$ ta$ )(suc$ k$ ))(some$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (= (fun_app$ (ll2f$ ?v0 )(suc$ k$ ))(some$ ?v1 ))(exists ((?v2 A$ ))(= (fun_app$ (ll2f$ ?v0 )k$ )(some$ ?v2 ))))):named a1 ))
(assert (! (= (fun_app$ (ll2f$ ta$ )(suc$ (suc$ k$ )))(some$ xa$ )):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (some$ ?v0 )(some$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 Nat$ ))(=> (and (member$ ?v0 (inflsts$ ?v1 ))(forall ((?v3 A$ ))(=> (= (fun_app$ (ll2f$ ?v0 )?v2 )(some$ ?v3 ))false )))false )):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 Nat$ ))(=> (member$ ?v0 (inflsts$ ?v1 ))(exists ((?v3 A$ ))(= (fun_app$ (ll2f$ ?v0 )?v2 )(some$ ?v3 ))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lset$ ?v0 )(ran$ (ll2f$ ?v0 ))):pattern ((lset$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ ))(! (= (pred_option$ ?v0 (some$ ?v1 ))(fun_app$a ?v0 ?v1 )):pattern ((pred_option$ ?v0 (some$ ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 A$ ))(! (= (is_none$ (some$ ?v0 ))false ):pattern ((some$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat_a_option_fun$ )(?v1 Nat$ )(?v2 A$ ))(=> (= (fun_app$ ?v0 ?v1 )(some$ ?v2 ))(member$a ?v2 (ran$ ?v0 )))):named a13 ))
(check-sat )
;(get-unsat-core )
