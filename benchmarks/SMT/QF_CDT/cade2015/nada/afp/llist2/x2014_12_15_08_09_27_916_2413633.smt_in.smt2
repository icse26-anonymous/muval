;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort Nat_a_option_fun$ 0 )
(declare-sort A_option$ 0)
(declare-fun none$ ()A_option$)
(declare-fun the$ (A_option$)A$)
(declare-fun some$ (A$ )A_option$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun k$ ()Nat$ )
(declare-fun ta$ ()A_llist$ )
(declare-fun ran$ (Nat_a_option_fun$ )A_set$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun ll2f$ (A_llist$ )Nat_a_option_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun finlsts$ (A_set$ )A_llist_set$ )
(declare-fun fun_app$ (Nat_a_option_fun$ Nat$ )A_option$ )
(declare-fun is_none$ (A_option$ )Bool )
(declare-fun llength$ (A_llist$ )Nat$ )
(assert (! (not (= (fun_app$ (ll2f$ ta$ )(suc$ (suc$ k$ )))none$ )):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (= (fun_app$ (ll2f$ ?v0 )k$ )none$ )(= (fun_app$ (ll2f$ ?v0 )(suc$ k$ ))none$ )):pattern ((ll2f$ ?v0 )))):named a1 ))
(assert (! (= (fun_app$ (ll2f$ ta$ )(suc$ k$ ))none$ ):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_option$ ))(=> (and (=> (= ?v0 none$ )false )(=> (not (= ?v0 none$ ))false ))false )):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ll2f$ lNil$ )?v0 )none$ ):pattern ((fun_app$ (ll2f$ lNil$ )?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ )(?v2 A$ ))(=> (and (= (fun_app$ (ll2f$ ?v0 )(suc$ ?v1 ))(some$ ?v2 ))(forall ((?v3 A$ ))(=> (= (fun_app$ (ll2f$ ?v0 )?v1 )(some$ ?v3 ))false )))false )):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ )(?v2 A$ ))(=> (= (fun_app$ (ll2f$ ?v0 )(suc$ ?v1 ))(some$ ?v2 ))(exists ((?v3 A$ ))(= (fun_app$ (ll2f$ ?v0 )?v1 )(some$ ?v3 ))))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lset$ ?v0 )(ran$ (ll2f$ ?v0 ))):pattern ((lset$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ ))(=> (member$ ?v0 (finlsts$ ?v1 ))(= (fun_app$ (ll2f$ ?v0 )(llength$ ?v0 ))none$ ))):named a12 ))
(assert (! (forall ((?v0 A_option$ ))(! (= (is_none$ ?v0 )(= ?v0 none$ )):pattern ((is_none$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (some$ ?v0 )(some$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_option$ ))(= (forall ((?v1 A$ ))(not (= ?v0 (some$ ?v1 ))))(= ?v0 none$ ))):named a15 ))
(assert (! (forall ((?v0 A_option$ ))(= (not (= ?v0 none$ ))(exists ((?v1 A$ ))(= ?v0 (some$ ?v1 ))))):named a16 ))
(check-sat )
;(get-unsat-core )
