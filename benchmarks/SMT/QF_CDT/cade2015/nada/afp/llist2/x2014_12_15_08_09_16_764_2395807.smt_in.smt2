;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_option_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_nat_option_fun$ 0 )
(declare-sort Nat_a_option_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort Nat_nat_option_fun$ 0 )
(declare-sort A_a_llist_option_fun$ 0 )
(declare-sort A_llist_a_option_fun$ 0 )
(declare-sort A_llist_nat_option_fun$ 0 )
(declare-sort Nat_a_llist_option_fun$ 0 )
(declare-sort A_set_a_a_option_fun_fun$ 0 )
(declare-sort A_llist_a_llist_option_fun$ 0 )
(declare-sort A_set_a_nat_option_fun_fun$ 0 )
(declare-sort Nat_set_nat_a_option_fun_fun$ 0 )
(declare-sort A_set_a_a_llist_option_fun_fun$ 0 )
(declare-sort Nat_set_nat_nat_option_fun_fun$ 0 )
(declare-sort Nat_set_nat_a_llist_option_fun_fun$ 0 )
(declare-sort A_llist_set_a_llist_a_option_fun_fun$ 0 )
(declare-sort A_llist_set_a_llist_nat_option_fun_fun$ 0 )
(declare-sort A_llist_set_a_llist_a_llist_option_fun_fun$ 0 )
(declare-sort A_option$ 0)
(declare-fun none$ ()A_option$)
(declare-fun the$ (A_option$)A$)
(declare-fun some$ (A$ )A_option$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_llist_option$ 0)
(declare-fun none$a ()A_llist_option$)
(declare-fun the$a (A_llist_option$)A_llist$)
(declare-fun some$a (A_llist$ )A_llist_option$)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-sort Nat_option$ 0)
(declare-fun none$b ()Nat_option$)
(declare-fun the$b (Nat_option$)Nat$)
(declare-fun some$b (Nat$ )Nat_option$)
(declare-fun i$ ()Nat$ )
(declare-fun t$ ()A_llist$ )
(declare-fun x$ ()A$ )
(declare-fun ran$ (Nat_a_option_fun$ )A_set$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun ll2f$ (A_llist$ )Nat_a_option_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun ran$a (A_llist_a_option_fun$ )A_set$ )
(declare-fun ran$b (A_llist_a_llist_option_fun$ )A_llist_set$ )
(declare-fun ran$c (A_llist_nat_option_fun$ )Nat_set$ )
(declare-fun ran$d (A_nat_option_fun$ )Nat_set$ )
(declare-fun ran$e (Nat_nat_option_fun$ )Nat_set$ )
(declare-fun ran$f (A_a_option_fun$ )A_set$ )
(declare-fun ran$g (A_a_llist_option_fun$ )A_llist_set$ )
(declare-fun ran$h (Nat_a_llist_option_fun$ )A_llist_set$ )
(declare-fun ll2f$a (A_llist_llist$ )Nat_a_llist_option_fun$ )
(declare-fun member$ (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun fun_app$ (Nat_a_option_fun$ Nat$ )A_option$ )
(declare-fun inflsts$ (A_llist_set$ )A_llist_llist_set$ )
(declare-fun is_none$ (A_llist_option$ )Bool )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun member$b (A$ A_set$ )Bool )
(declare-fun member$c (Nat$ Nat_set$ )Bool )
(declare-fun fun_app$a (Nat_a_llist_option_fun$ Nat$ )A_llist_option$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$d (A_llist_a_option_fun$ A_llist$ )A_option$ )
(declare-fun fun_app$e (A_llist_a_llist_option_fun$ A_llist$ )A_llist_option$ )
(declare-fun fun_app$f (A_llist_set_a_llist_nat_option_fun_fun$ A_llist_set$ )A_llist_nat_option_fun$ )
(declare-fun fun_app$g (A_llist_nat_option_fun$ A_llist$ )Nat_option$ )
(declare-fun fun_app$h (A_set_a_nat_option_fun_fun$ A_set$ )A_nat_option_fun$ )
(declare-fun fun_app$i (A_nat_option_fun$ A$ )Nat_option$ )
(declare-fun fun_app$j (Nat_set_nat_nat_option_fun_fun$ Nat_set$ )Nat_nat_option_fun$ )
(declare-fun fun_app$k (Nat_nat_option_fun$ Nat$ )Nat_option$ )
(declare-fun fun_app$l (A_set_a_a_option_fun_fun$ A_set$ )A_a_option_fun$ )
(declare-fun fun_app$m (A_a_option_fun$ A$ )A_option$ )
(declare-fun fun_app$n (A_set_a_a_llist_option_fun_fun$ A_set$ )A_a_llist_option_fun$ )
(declare-fun fun_app$o (A_a_llist_option_fun$ A$ )A_llist_option$ )
(declare-fun fun_app$p (Nat_set_nat_a_llist_option_fun_fun$ Nat_set$ )Nat_a_llist_option_fun$ )
(declare-fun fun_app$q (A_llist_set_a_llist_a_llist_option_fun_fun$ A_llist_set$ )A_llist_a_llist_option_fun$ )
(declare-fun fun_app$r (Nat_set_nat_a_option_fun_fun$ Nat_set$ )Nat_a_option_fun$ )
(declare-fun fun_app$s (A_llist_set_a_llist_a_option_fun_fun$ A_llist_set$ )A_llist_a_option_fun$ )
(declare-fun inflsts$a (A_set$ )A_llist_set$ )
(declare-fun is_none$a (A_option$ )Bool )
(declare-fun pred_option$ (A_llist_bool_fun$ A_llist_option$ )Bool )
(declare-fun pred_option$a (A_bool_fun$ A_option$ )Bool )
(declare-fun restrict_map$ (A_llist_nat_option_fun$ )A_llist_set_a_llist_nat_option_fun_fun$ )
(declare-fun restrict_map$a (A_nat_option_fun$ )A_set_a_nat_option_fun_fun$ )
(declare-fun restrict_map$b (Nat_nat_option_fun$ )Nat_set_nat_nat_option_fun_fun$ )
(declare-fun restrict_map$c (A_a_option_fun$ )A_set_a_a_option_fun_fun$ )
(declare-fun restrict_map$d (A_a_llist_option_fun$ )A_set_a_a_llist_option_fun_fun$ )
(declare-fun restrict_map$e (Nat_a_llist_option_fun$ )Nat_set_nat_a_llist_option_fun_fun$ )
(declare-fun restrict_map$f (A_llist_a_llist_option_fun$ )A_llist_set_a_llist_a_llist_option_fun_fun$ )
(declare-fun restrict_map$g (Nat_a_option_fun$ )Nat_set_nat_a_option_fun_fun$ )
(declare-fun restrict_map$h (A_llist_a_option_fun$ )A_llist_set_a_llist_a_option_fun_fun$ )
(assert (! (not (exists ((?v0 A$ ))(= (fun_app$ (ll2f$ t$ )i$ )(some$ ?v0 )))):named a0 ))
(assert (! (= (fun_app$ (ll2f$ t$ )(suc$ i$ ))(some$ x$ )):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (some$a ?v0 )(some$a ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (some$ ?v0 )(some$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_set$ )(?v2 Nat$ ))(=> (and (member$ ?v0 (inflsts$ ?v1 ))(forall ((?v3 A_llist$ ))(=> (= (fun_app$a (ll2f$a ?v0 )?v2 )(some$a ?v3 ))false )))false )):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 Nat$ ))(=> (and (member$a ?v0 (inflsts$a ?v1 ))(forall ((?v3 A$ ))(=> (= (fun_app$ (ll2f$ ?v0 )?v2 )(some$ ?v3 ))false )))false )):named a9 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_set$ )(?v2 Nat$ ))(=> (member$ ?v0 (inflsts$ ?v1 ))(exists ((?v3 A_llist$ ))(= (fun_app$a (ll2f$a ?v0 )?v2 )(some$a ?v3 ))))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 Nat$ ))(=> (member$a ?v0 (inflsts$a ?v1 ))(exists ((?v3 A$ ))(= (fun_app$ (ll2f$ ?v0 )?v2 )(some$ ?v3 ))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lset$ ?v0 )(ran$ (ll2f$ ?v0 ))):pattern ((lset$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(! (= (pred_option$ ?v0 (some$a ?v1 ))(fun_app$b ?v0 ?v1 )):pattern ((pred_option$ ?v0 (some$a ?v1 ))))):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ ))(! (= (pred_option$a ?v0 (some$ ?v1 ))(fun_app$c ?v0 ?v1 )):pattern ((pred_option$a ?v0 (some$ ?v1 ))))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (is_none$ (some$a ?v0 ))false ):pattern ((some$a ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A$ ))(! (= (is_none$a (some$ ?v0 ))false ):pattern ((some$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_a_option_fun$ )(?v1 A_llist$ )(?v2 A$ ))(=> (= (fun_app$d ?v0 ?v1 )(some$ ?v2 ))(member$b ?v2 (ran$a ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_llist_a_llist_option_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (= (fun_app$e ?v0 ?v1 )(some$a ?v2 ))(member$a ?v2 (ran$b ?v0 )))):named a18 ))
(assert (! (forall ((?v0 Nat_a_option_fun$ )(?v1 Nat$ )(?v2 A$ ))(=> (= (fun_app$ ?v0 ?v1 )(some$ ?v2 ))(member$b ?v2 (ran$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_nat_option_fun$ )(?v2 A_llist_set$ ))(=> (member$c ?v0 (ran$c (fun_app$f (restrict_map$ ?v1 )?v2 )))(exists ((?v3 A_llist$ ))(and (member$a ?v3 ?v2 )(= (fun_app$g ?v1 ?v3 )(some$b ?v0 )))))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_nat_option_fun$ )(?v2 A_set$ ))(=> (member$c ?v0 (ran$d (fun_app$h (restrict_map$a ?v1 )?v2 )))(exists ((?v3 A$ ))(and (member$b ?v3 ?v2 )(= (fun_app$i ?v1 ?v3 )(some$b ?v0 )))))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_option_fun$ )(?v2 Nat_set$ ))(=> (member$c ?v0 (ran$e (fun_app$j (restrict_map$b ?v1 )?v2 )))(exists ((?v3 Nat$ ))(and (member$c ?v3 ?v2 )(= (fun_app$k ?v1 ?v3 )(some$b ?v0 )))))):named a22 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_option_fun$ )(?v2 A_set$ ))(=> (member$b ?v0 (ran$f (fun_app$l (restrict_map$c ?v1 )?v2 )))(exists ((?v3 A$ ))(and (member$b ?v3 ?v2 )(= (fun_app$m ?v1 ?v3 )(some$ ?v0 )))))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_option_fun$ )(?v2 A_set$ ))(=> (member$a ?v0 (ran$g (fun_app$n (restrict_map$d ?v1 )?v2 )))(exists ((?v3 A$ ))(and (member$b ?v3 ?v2 )(= (fun_app$o ?v1 ?v3 )(some$a ?v0 )))))):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat_a_llist_option_fun$ )(?v2 Nat_set$ ))(=> (member$a ?v0 (ran$h (fun_app$p (restrict_map$e ?v1 )?v2 )))(exists ((?v3 Nat$ ))(and (member$c ?v3 ?v2 )(= (fun_app$a ?v1 ?v3 )(some$a ?v0 )))))):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_a_llist_option_fun$ )(?v2 A_llist_set$ ))(=> (member$a ?v0 (ran$b (fun_app$q (restrict_map$f ?v1 )?v2 )))(exists ((?v3 A_llist$ ))(and (member$a ?v3 ?v2 )(= (fun_app$e ?v1 ?v3 )(some$a ?v0 )))))):named a26 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat_a_option_fun$ )(?v2 Nat_set$ ))(=> (member$b ?v0 (ran$ (fun_app$r (restrict_map$g ?v1 )?v2 )))(exists ((?v3 Nat$ ))(and (member$c ?v3 ?v2 )(= (fun_app$ ?v1 ?v3 )(some$ ?v0 )))))):named a27 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist_a_option_fun$ )(?v2 A_llist_set$ ))(=> (member$b ?v0 (ran$a (fun_app$s (restrict_map$h ?v1 )?v2 )))(exists ((?v3 A_llist$ ))(and (member$a ?v3 ?v2 )(= (fun_app$d ?v1 ?v3 )(some$ ?v0 )))))):named a28 ))
(check-sat )
;(get-unsat-core )
