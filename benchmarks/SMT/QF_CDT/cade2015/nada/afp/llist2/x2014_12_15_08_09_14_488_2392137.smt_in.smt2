;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_bool_fun_nat_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_option$ 0)
(declare-fun none$ ()A_option$)
(declare-fun the$ (A_option$)A$)
(declare-fun some$ (A$ )A_option$)
(declare-fun a$ ()A$ )
(declare-fun l$ ()A_llist$ )
(declare-fun r$ ()A_llist$ )
(declare-fun a$a ()A_set$ )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun uua$ ()Nat_bool_fun$ )
(declare-fun uub$ (Nat_set$ )Nat_bool_fun_nat_bool_fun_fun$ )
(declare-fun uuc$ ()Nat_bool_fun$ )
(declare-fun ll2f$ (A_llist$ Nat$ )A_option$ )
(declare-fun zero$ ()Nat$ )
(declare-fun least$ (Nat_bool_fun$ )Nat$ )
(declare-fun bleast$ (Nat_set$ Nat_bool_fun$ )Nat$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun finlsts$ (A_set$ )A_llist_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun llength$ (A_llist$ )Nat$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun member$b (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$a (Nat_bool_fun_nat_bool_fun_fun$ Nat_bool_fun$ )Nat_bool_fun$ )
(declare-fun abort_Bleast$ (Nat_set$ Nat_bool_fun$ )Nat$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(= (ll2f$ (lCons$ a$ l$ )?v0 )none$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uua$ ?v0 )(= (ll2f$ l$ ?v0 )none$ )):pattern ((fun_app$ uua$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_bool_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$a (uub$ ?v0 )?v1 )?v2 )(and (member$ ?v2 ?v0 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uub$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uuc$ ?v0 )true ):pattern ((fun_app$ uuc$ ?v0 )))):named a3 ))
(assert (! (not (= (llength$ (lCons$ a$ l$ ))(least$ uu$ ))):named a4 ))
(assert (! (member$a a$ a$a ):named a5 ))
(assert (! (= (llength$ l$ )(least$ uua$ )):named a6 ))
(assert (! (= (least$ uu$ )(llength$ (lCons$ a$ l$ ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a8 ))
(assert (! (member$b l$ (finlsts$ a$a )):named a9 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 (least$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ ))(=> (member$b ?v0 (finlsts$ ?v1 ))(= (ll2f$ ?v0 (llength$ ?v0 ))none$ ))):named a11 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ ))(=> (and (exists ((?v2 Nat$ ))(fun_app$ ?v0 ?v2 ))(forall ((?v2 Nat$ ))(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))))(fun_app$ ?v1 (least$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat_bool_fun$ ))(=> (exists ((?v1 Nat$ ))(fun_app$ ?v0 ?v1 ))(fun_app$ ?v0 (least$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v3 Nat$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ ?v2 ?v3 ))))(fun_app$ ?v2 (least$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_option$ ))(=> (and (=> (= ?v0 none$ )false )(=> (not (= ?v0 none$ ))false ))false )):named a15 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (ll2f$ lNil$ ?v0 )none$ ):pattern ((ll2f$ lNil$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_bool_fun$ ))(= (bleast$ ?v0 ?v1 )(least$ (fun_app$a (uub$ ?v0 )?v1 )))):named a17 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_bool_fun$ ))(= (abort_Bleast$ ?v0 ?v1 )(least$ (fun_app$a (uub$ ?v0 )?v1 )))):named a18 ))
(assert (! (= (least$ uuc$ )zero$ ):named a19 ))
(assert (! (member$b r$ (finlsts$ a$a )):named a20 ))
(assert (! (= (llength$ lNil$ )zero$ ):named a21 ))
(check-sat )
;(get-unsat-core )
