;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_a_llist_fun$ 0 )
(declare-sort A_option$ 0)
(declare-fun none$ ()A_option$)
(declare-fun the$ (A_option$)A$)
(declare-fun some$ (A$ )A_option$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun j$ ()Nat$ )
(declare-fun ta$ ()A_llist$ )
(declare-fun ll2f$ (A_llist$ Nat$ )A_option$ )
(declare-fun plus$ (Nat$ )Nat_nat_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun ldrop$ (A_llist$ )Nat_a_llist_fun$ )
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$ )A_llist$ )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(assert (! (not (= (ll2f$ (fun_app$ (ldrop$ ta$ )zero$ )j$ )(ll2f$ ta$ (fun_app$a (plus$ zero$ )j$ )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (ldrop$ ?v0 )(fun_app$a (plus$ ?v1 )?v2 ))(fun_app$ (ldrop$ (fun_app$ (ldrop$ ?v0 )?v1 ))?v2 ))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (ldrop$ ?v0 )zero$ )?v0 ):pattern ((ldrop$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$a (plus$ ?v0 )?v1 )zero$ )(and (= ?v0 zero$ )(= ?v1 zero$ )))):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (plus$ ?v0 )zero$ )?v0 ):pattern ((plus$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (plus$ ?v0 )zero$ )?v0 )):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (plus$ ?v0 )zero$ )?v0 )):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (plus$ zero$ )?v0 )?v0 )):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (plus$ zero$ )?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$a (plus$ ?v0 )?v1 )(fun_app$a (plus$ ?v2 )?v1 ))(= ?v0 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$a (plus$ ?v0 )?v1 )(fun_app$a (plus$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (plus$ zero$ )?v0 )?v0 ):pattern ((fun_app$a (plus$ zero$ )?v0 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (= ?v0 ?v1 )(= ?v2 ?v3 ))(= (fun_app$a (plus$ ?v0 )?v2 )(fun_app$a (plus$ ?v1 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (= (fun_app$a (plus$ ?v0 )?v1 )(fun_app$a (plus$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a14 ))
(check-sat )
;(get-unsat-core )
