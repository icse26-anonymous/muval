;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun ja$ ()Nat$ )
(declare-fun ta$ ()A_llist$ )
(declare-fun lrev$ (A_llist$ )A_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun ldrop$ (A_llist$ )Nat_a_llist_fun$ )
(declare-fun ltake$ (A_llist$ )Nat_a_llist_fun$ )
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$ )A_llist$ )
(declare-fun less_eq$ (Nat$ )Nat_bool_fun$ )
(declare-fun llength$ (A_llist$ )Nat$ )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun lbutlast$ (A_llist$ )A_llist$ )
(assert (! (not (= (fun_app$ (ldrop$ ta$ )zero$ )lNil$ )):named a0 ))
(assert (! (fun_app$a (less_eq$ ja$ )zero$ ):named a1 ))
(assert (! (= (fun_app$ (ldrop$ ta$ )ja$ )lNil$ ):named a2 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ldrop$ lNil$ )?v0 )lNil$ ):pattern ((fun_app$ (ldrop$ lNil$ )?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (ldrop$ ?v0 )zero$ )?v0 ):pattern ((ldrop$ ?v0 )))):named a4 ))
(assert (! (= (lbutlast$ lNil$ )lNil$ ):named a5 ))
(assert (! (= (llength$ lNil$ )zero$ ):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (ltake$ ?v0 )zero$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a7 ))
(assert (! (= zero$ zero$ ):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ltake$ lNil$ )?v0 )lNil$ ):pattern ((fun_app$ (ltake$ lNil$ )?v0 )))):named a11 ))
(assert (! (= (lrev$ lNil$ )lNil$ ):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (less_eq$ ?v0 )zero$ )(= ?v0 zero$ )):pattern ((less_eq$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$a (less_eq$ zero$ )?v0 )):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 ?v1 )(fun_app$a (less_eq$ ?v0 )?v1 ))):named a15 ))
(check-sat )
;(get-unsat-core )
