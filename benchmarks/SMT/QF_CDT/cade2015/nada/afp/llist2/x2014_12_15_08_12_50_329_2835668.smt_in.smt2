;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun a$ ()A_set$ )
(declare-fun r$ ()A_llist$ )
(declare-fun s$ ()A_llist$ )
(declare-fun top$ ()A_set$ )
(declare-fun lrev$ (A_llist$ )A_llist$ )
(declare-fun ldrop$ (A_llist$ Nat$ )A_llist$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun alllsts$ (A_set$ )A_llist_set$ )
(declare-fun finlsts$ (A_set$ )A_llist_set$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (A_llist$ A_llist$ )Bool )
(assert (! (not (member$ r$ (finlsts$ a$ ))):named a0 ))
(assert (! (less_eq$ r$ s$ ):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (less_eq$ ?v0 s$ )(member$ ?v0 (finlsts$ a$ )))):named a2 ))
(assert (! (member$ s$ (finlsts$ a$ )):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(less_eq$ ?v0 ?v0 )):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ ))(=> (member$ ?v0 (finlsts$ ?v1 ))(member$ (lrev$ ?v0 )(finlsts$ ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 Nat$ ))(=> (member$ ?v0 (finlsts$ ?v1 ))(member$ (ldrop$ ?v0 ?v2 )(finlsts$ ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (and (member$ ?v0 (finlsts$ ?v1 ))(member$ ?v0 (alllsts$ ?v2 )))(member$ ?v0 (finlsts$ ?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ ))(=> (member$ ?v0 (finlsts$ ?v1 ))(member$ ?v0 (alllsts$ ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_set$ ))(= (member$ (lappend$ ?v0 ?v1 )(finlsts$ ?v2 ))(and (member$ ?v0 (finlsts$ ?v2 ))(member$ ?v1 (finlsts$ ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (member$ ?v0 (finlsts$ ?v1 ))(= (= (lappend$ ?v0 ?v2 )(lappend$ ?v0 ?v3 ))(= ?v2 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(less_eq$ ?v0 ?v2 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ ))(=> (and (member$ ?v0 (finlsts$ ?v1 ))(not (member$ ?v0 (finlsts$ top$ ))))false )):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ ))(=> (member$ ?v0 (finlsts$ ?v1 ))(member$ ?v0 (finlsts$ top$ )))):named a14 ))
(assert (! (forall ((?v0 A_set$ ))(member$ lNil$ (finlsts$ ?v0 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= lNil$ (lappend$ ?v0 ?v1 ))(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (lappend$ ?v0 ?v1 )lNil$ )(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a17 ))
(check-sat )
;(get-unsat-core )
