;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_list$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun xsa$ ()A_list$ )
(declare-fun take$ (Nat$ A_list$ )A_list$ )
(declare-fun zero$ ()Enat$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ltake$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun zero$a ()Nat$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun the_enat$ (Enat$ )Nat$ )
(assert (! (not (= (fun_app$ (ltake$ zero$ )(llist_of$ xsa$ ))(llist_of$ (take$ zero$a xsa$ )))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (forall ((?v2 Nat$ ))(= (take$ ?v2 ?v0 )(take$ ?v2 ?v1 )))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Enat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a3 ))
(assert (! (= zero$a zero$a ):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$a )false )(=> (not (= ?v0 zero$a ))false ))false )):named a5 ))
(assert (! (= (the_enat$ zero$ )zero$a ):named a6 ))
(assert (! (forall ((?v0 Enat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$a ?v0 )(= ?v0 zero$a ))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$ (ltake$ ?v0 )?v1 ))(or (= ?v1 lNil$ )(= ?v0 zero$ )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$ (ltake$ zero$ )?v0 )lNil$ )):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(=> (not (= ?v0 zero$ ))(= (lhd$ (fun_app$ (ltake$ ?v0 )?v1 ))(lhd$ ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (not (lnull$ (fun_app$ (ltake$ ?v0 )?v1 )))(and (not (= ?v0 zero$ ))(not (lnull$ ?v1 ))))):named a12 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ltake$ ?v0 )lNil$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (ltake$ ?v0 )?v1 ))(or (lnull$ ?v1 )(= ?v0 zero$ )))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (ltake$ ?v0 )?v1 ))(or (= ?v0 zero$ )(lnull$ ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lnull$ ?v0 )(= ?v0 lNil$ )):pattern ((lnull$ ?v0 )))):named a16 ))
(check-sat )
;(get-unsat-core )
