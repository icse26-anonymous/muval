;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort B_llist_set$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort Bool_bool_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun a$ ()A_b_bool_fun_fun$ )
(declare-fun p$ ()A_bool_fun$ )
(declare-fun q$ ()B_bool_fun$ )
(declare-fun uu$ ()Bool_bool_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun uua$ ()B_b_bool_fun_fun$ )
(declare-fun uub$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun uuc$ ()A_a_bool_fun_fun$ )
(declare-fun uud$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()B_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun member$a (B_llist$ B_llist_set$ )Bool )
(declare-fun rel_fun$ (A_b_bool_fun_fun$ Bool_bool_bool_fun_fun$ A_bool_fun$ B_bool_fun$ )Bool )
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (Bool_bool_fun$ Bool )Bool )
(declare-fun fun_app$e (Bool_bool_bool_fun_fun$ Bool )Bool_bool_fun$ )
(declare-fun fun_app$f (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$g (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$h (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$i (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$j (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$k (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun llist_all2$a (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun llist_all2$c (B_a_bool_fun_fun$ B_llist$ A_llist$ )Bool )
(declare-fun ltakeWhile$a (B_bool_fun$ B_llist$ )B_llist$ )
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uub$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c uud$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uud$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Bool )(?v1 Bool ))(! (= (fun_app$d (fun_app$e uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uu$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$f (fun_app$g uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uua$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$h (fun_app$i uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$h (fun_app$i uuc$ ?v0 )?v1 )))):named a4 ))
(assert (! (not (= (lnull$ (ltakeWhile$ p$ xsa$ ))(lnull$a (ltakeWhile$a q$ ysa$ )))):named a5 ))
(assert (! (llist_all2$ a$ xsa$ ysa$ ):named a6 ))
(assert (! (rel_fun$ a$ uu$ p$ q$ ):named a7 ))
(assert (! (llist_all2$ a$ xs$ ys$ ):named a8 ))
(assert (! (= (llist_all2$a uua$ )uub$ ):named a9 ))
(assert (! (= (llist_all2$b uuc$ )uud$ ):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a13 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a14 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a15 ))
(assert (! (forall ((?v0 B_llist_set$ ))(=> (and (=> (forall ((?v1 B_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$a ?v1 )))false )(=> (not (forall ((?v1 B_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$a ?v1 ))))false ))false )):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a17 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (=> (and (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (or (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a18 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a19 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (and (=> (lnull$a ?v0 )false )(=> (not (lnull$a ?v0 ))false ))false )):named a20 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 B$ ))(=> (fun_app$f (fun_app$g ?v0 ?v4 )?v5 )(fun_app$f (fun_app$g ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$a (llist_all2$a ?v3 )?v1 )?v2 ))):named a21 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (llist_all2$c ?v0 ?v1 ?v2 )(forall ((?v4 B$ )(?v5 A$ ))(=> (fun_app$h (fun_app$j ?v0 ?v4 )?v5 )(fun_app$h (fun_app$j ?v3 ?v4 )?v5 ))))(llist_all2$c ?v3 ?v1 ?v2 ))):named a22 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$b ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (fun_app$h (fun_app$i ?v0 ?v4 )?v5 )(fun_app$h (fun_app$i ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$c (llist_all2$b ?v3 )?v1 )?v2 ))):named a23 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(forall ((?v4 A$ )(?v5 B$ ))(=> (fun_app$f (fun_app$k ?v0 ?v4 )?v5 )(fun_app$f (fun_app$k ?v3 ?v4 )?v5 ))))(llist_all2$ ?v3 ?v1 ?v2 ))):named a24 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$b (fun_app$c (llist_all2$b ?v0 )?v1 )?v2 )(= (lnull$ ?v1 )(lnull$ ?v2 )))):named a25 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (llist_all2$c ?v0 ?v1 ?v2 )(= (lnull$a ?v1 )(lnull$ ?v2 )))):named a26 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (fun_app$ (fun_app$a (llist_all2$a ?v0 )?v1 )?v2 )(= (lnull$a ?v1 )(lnull$a ?v2 )))):named a27 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (llist_all2$ ?v0 ?v1 ?v2 )(= (lnull$ ?v1 )(lnull$a ?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (not (lnull$ (ltakeWhile$ ?v0 ?v1 )))(and (not (lnull$ ?v1 ))(fun_app$h ?v0 (lhd$ ?v1 ))))):named a29 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_llist$ ))(= (not (lnull$a (ltakeWhile$a ?v0 ?v1 )))(and (not (lnull$a ?v1 ))(fun_app$f ?v0 (lhd$a ?v1 ))))):named a30 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$ (ltakeWhile$ ?v0 ?v1 ))(or (lnull$ ?v1 )(not (fun_app$h ?v0 (lhd$ ?v1 )))))):named a31 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_llist$ ))(= (lnull$a (ltakeWhile$a ?v0 ?v1 ))(or (lnull$a ?v1 )(not (fun_app$f ?v0 (lhd$a ?v1 )))))):named a32 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$ (ltakeWhile$ ?v0 ?v1 ))(=> (not (lnull$ ?v1 ))(not (fun_app$h ?v0 (lhd$ ?v1 )))))):named a33 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_llist$ ))(= (lnull$a (ltakeWhile$a ?v0 ?v1 ))(=> (not (lnull$a ?v1 ))(not (fun_app$f ?v0 (lhd$a ?v1 )))))):named a34 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_bool_fun$ )(?v4 A_bool_fun$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$b ?v0 )?v1 )?v2 )(forall ((?v5 A$ )(?v6 A$ ))(=> (fun_app$h (fun_app$i ?v0 ?v5 )?v6 )(= (fun_app$h ?v3 ?v5 )(fun_app$h ?v4 ?v6 )))))(= (llength$ (ltakeWhile$ ?v3 ?v1 ))(llength$ (ltakeWhile$ ?v4 ?v2 ))))):named a35 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_bool_fun$ )(?v4 A_bool_fun$ ))(=> (and (llist_all2$c ?v0 ?v1 ?v2 )(forall ((?v5 B$ )(?v6 A$ ))(=> (fun_app$h (fun_app$j ?v0 ?v5 )?v6 )(= (fun_app$f ?v3 ?v5 )(fun_app$h ?v4 ?v6 )))))(= (llength$a (ltakeWhile$a ?v3 ?v1 ))(llength$ (ltakeWhile$ ?v4 ?v2 ))))):named a36 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_bool_fun$ )(?v4 B_bool_fun$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v5 B$ )(?v6 B$ ))(=> (fun_app$f (fun_app$g ?v0 ?v5 )?v6 )(= (fun_app$f ?v3 ?v5 )(fun_app$f ?v4 ?v6 )))))(= (llength$a (ltakeWhile$a ?v3 ?v1 ))(llength$a (ltakeWhile$a ?v4 ?v2 ))))):named a37 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_bool_fun$ )(?v4 B_bool_fun$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(forall ((?v5 A$ )(?v6 B$ ))(=> (fun_app$f (fun_app$k ?v0 ?v5 )?v6 )(= (fun_app$h ?v3 ?v5 )(fun_app$f ?v4 ?v6 )))))(= (llength$ (ltakeWhile$ ?v3 ?v1 ))(llength$a (ltakeWhile$a ?v4 ?v2 ))))):named a38 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (or (lnull$ ?v0 )(not (fun_app$h ?v1 (lhd$ ?v0 ))))(lnull$ (ltakeWhile$ ?v1 ?v0 )))):named a39 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_bool_fun$ ))(=> (or (lnull$a ?v0 )(not (fun_app$f ?v1 (lhd$a ?v0 ))))(lnull$a (ltakeWhile$a ?v1 ?v0 )))):named a40 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (not (lnull$ ?v0 ))(fun_app$h ?v1 (lhd$ ?v0 )))(= (lhd$ (ltakeWhile$ ?v1 ?v0 ))(lhd$ ?v0 )))):named a41 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_bool_fun$ ))(=> (and (not (lnull$a ?v0 ))(fun_app$f ?v1 (lhd$a ?v0 )))(= (lhd$a (ltakeWhile$a ?v1 ?v0 ))(lhd$a ?v0 )))):named a42 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (not (lnull$ ?v0 ))(fun_app$h ?v1 (lhd$ ?v0 )))(not (lnull$ (ltakeWhile$ ?v1 ?v0 ))))):named a43 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_bool_fun$ ))(=> (and (not (lnull$a ?v0 ))(fun_app$f ?v1 (lhd$a ?v0 )))(not (lnull$a (ltakeWhile$a ?v1 ?v0 ))))):named a44 ))
(check-sat )
;(get-unsat-core )
