;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun x$ ()A$ )
(declare-fun uu$ ()A_a_fun$ )
(declare-fun uua$ ()A_bool_fun$ )
(declare-fun uub$ ()A_bool_fun$ )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$d (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun gen_lset$ (A_set$ )A_llist_a_set_fun$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun ldistinct$ (A_llist$ )Bool )
(declare-fun ldropWhile$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun ltakeWhile$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun finite_lprefix$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )?v0 ):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a uub$ ?v0 )false ):pattern ((fun_app$a uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a uua$ ?v0 )true ):pattern ((fun_app$a uua$ ?v0 )))):named a2 ))
(assert (! (not (= (fun_app$b (ltakeWhile$ p$ )(iterates$ uu$ x$ ))(ite (fun_app$a p$ x$ )(iterates$ uu$ x$ )lNil$ ))):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$b (ltakeWhile$ uua$ )?v0 )?v0 )):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$b (ltakeWhile$ ?v0 )lNil$ )lNil$ ):pattern ((ltakeWhile$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$b (ltakeWhile$ uub$ )?v0 )lNil$ )):named a6 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$c (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$d (gen_lset$ ?v0 )lNil$ )?v0 ):pattern ((gen_lset$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (finite_lprefix$ ?v0 )lNil$ )(= ?v0 lNil$ )):pattern ((finite_lprefix$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (finite_lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$c (finite_lprefix$ lNil$ )?v0 )))):named a10 ))
(assert (! (= (lstrict_prefix$ lNil$ lNil$ )false ):named a11 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_llist$ ?v0 lNil$ )):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$b (ltakeWhile$ ?v0 )(lCons$ ?v1 ?v2 ))(ite (fun_app$a ?v0 ?v1 )(lCons$ ?v1 (fun_app$b (ltakeWhile$ ?v0 )?v2 ))lNil$ )):pattern ((fun_app$b (ltakeWhile$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$b (ldropWhile$ uua$ )?v0 )lNil$ )):named a14 ))
(assert (! (ldistinct$ lNil$ ):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$ ?v0 lNil$ ?v1 )):named a16 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (fun_app$b (ltakeWhile$ ?v0 )?v1 )lNil$ )(=> (not (= ?v1 lNil$ ))(not (fun_app$a ?v0 (lhd$ ?v1 )))))):named a17 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$b (ldropWhile$ ?v0 )lNil$ )lNil$ ):pattern ((ldropWhile$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a19 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$b (ldropWhile$ ?v0 )(lCons$ ?v1 ?v2 ))(ite (fun_app$a ?v0 ?v1 )(fun_app$b (ldropWhile$ ?v0 )?v2 )(lCons$ ?v1 ?v2 ))):pattern ((fun_app$b (ldropWhile$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a20 ))
(check-sat )
;(get-unsat-core )
