;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort B_a_llist_fun$ 0 )
(declare-sort B_b_llist_fun$ 0 )
(declare-sort B_llist_a_fun$ 0 )
(declare-sort B_llist_b_fun$ 0 )
(declare-sort C_a_llist_fun$ 0 )
(declare-sort C_b_llist_fun$ 0 )
(declare-sort C_c_llist_fun$ 0 )
(declare-sort B_a_a_prod_fun$ 0 )
(declare-sort C_a_a_prod_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun$ 0 )
(declare-sort A_c_fun_a_b_fun_fun$ 0 )
(declare-sort A_c_fun_b_b_fun_fun$ 0 )
(declare-sort A_c_fun_c_a_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_a_llist_llist_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_c_a_fun_fun$ 0 )
(declare-sort B_c_fun_b_a_fun_fun$ 0 )
(declare-sort B_c_fun_b_b_fun_fun$ 0 )
(declare-sort B_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort C_a_fun_c_a_fun_fun$ 0 )
(declare-sort C_a_fun_c_b_fun_fun$ 0 )
(declare-sort C_a_llist_llist_fun$ 0 )
(declare-sort C_b_fun_c_a_fun_fun$ 0 )
(declare-sort C_b_fun_c_b_fun_fun$ 0 )
(declare-sort C_b_llist_llist_fun$ 0 )
(declare-sort C_c_fun_c_a_fun_fun$ 0 )
(declare-sort C_c_fun_c_b_fun_fun$ 0 )
(declare-sort C_llist_a_llist_fun$ 0 )
(declare-sort C_llist_b_llist_fun$ 0 )
(declare-sort A_a_fun_a_a_llist_fun_fun$ 0 )
(declare-sort A_c_fun_b_b_llist_fun_fun$ 0 )
(declare-sort A_c_fun_c_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_c_fun_c_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_llist_fun_fun$ 0 )
(declare-sort B_a_llist_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_llist_fun_fun$ 0 )
(declare-sort B_llist_b_fun_c_a_fun_fun$ 0 )
(declare-sort B_llist_b_llist_llist_fun$ 0 )
(declare-sort C_a_fun_c_a_llist_fun_fun$ 0 )
(declare-sort C_a_llist_fun_c_a_fun_fun$ 0 )
(declare-sort C_b_fun_c_a_llist_fun_fun$ 0 )
(declare-sort C_b_fun_c_b_llist_fun_fun$ 0 )
(declare-sort C_b_llist_fun_c_a_fun_fun$ 0 )
(declare-sort C_b_llist_fun_c_b_fun_fun$ 0 )
(declare-sort C_c_fun_c_a_llist_fun_fun$ 0 )
(declare-sort C_c_fun_c_b_llist_fun_fun$ 0 )
(declare-sort C_c_fun_c_c_llist_fun_fun$ 0 )
(declare-sort C_a_llist_a_llist_prod_fun$ 0 )
(declare-sort A_llist_c_fun_b_llist_b_fun_fun$ 0 )
(declare-sort A_llist_c_fun_c_a_llist_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_c_a_fun_fun_fun$ 0 )
(declare-sort B_a_llist_fun_b_a_llist_fun_fun$ 0 )
(declare-sort B_b_llist_fun_b_a_llist_fun_fun$ 0 )
(declare-sort B_b_llist_fun_c_a_llist_fun_fun$ 0 )
(declare-sort B_llist_b_fun_b_llist_a_fun_fun$ 0 )
(declare-sort B_llist_llist_a_llist_llist_fun$ 0 )
(declare-sort C_a_fun_a_c_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_a_llist_fun_c_a_llist_fun_fun$ 0 )
(declare-sort C_a_llist_fun_c_b_llist_fun_fun$ 0 )
(declare-sort C_b_fun_a_c_fun_b_b_fun_fun_fun$ 0 )
(declare-sort C_b_llist_fun_c_a_llist_fun_fun$ 0 )
(declare-sort C_b_llist_fun_c_b_llist_fun_fun$ 0 )
(declare-sort C_c_fun_c_b_llist_llist_fun_fun$ 0 )
(declare-sort C_c_llist_fun_c_a_llist_fun_fun$ 0 )
(declare-sort C_c_llist_fun_c_b_llist_fun_fun$ 0 )
(declare-sort B_llist_a_llist_a_llist_prod_fun$ 0 )
(declare-sort A_llist_c_fun_b_llist_b_llist_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_b_a_llist_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_llist_b_fun_c_a_fun_fun_fun$ 0 )
(declare-sort B_llist_a_fun_b_llist_a_llist_fun_fun$ 0 )
(declare-sort B_llist_a_llist_fun_b_llist_a_fun_fun$ 0 )
(declare-sort B_llist_b_llist_fun_c_a_llist_fun_fun$ 0 )
(declare-sort C_a_fun_a_llist_c_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_c_c_fun_c_a_llist_fun_fun_fun$ 0 )
(declare-sort C_b_fun_c_c_fun_c_b_llist_fun_fun_fun$ 0 )
(declare-sort C_b_llist_fun_c_b_llist_llist_fun_fun$ 0 )
(declare-sort C_c_fun_c_c_fun_c_c_llist_fun_fun_fun$ 0 )
(declare-sort A_c_fun_b_b_fun_fun_a_c_fun_c_a_fun_fun_fun$ 0 )
(declare-sort B_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun$ 0 )
(declare-sort B_llist_a_llist_fun_b_llist_a_llist_fun_fun$ 0 )
(declare-sort B_llist_b_llist_fun_b_llist_a_llist_fun_fun$ 0 )
(declare-sort C_a_llist_fun_a_c_fun_c_a_llist_fun_fun_fun$ 0 )
(declare-sort C_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun$ 0 )
(declare-sort C_b_fun_a_llist_c_fun_b_llist_b_fun_fun_fun$ 0 )
(declare-sort C_b_llist_fun_a_c_fun_b_b_llist_fun_fun_fun$ 0 )
(declare-sort C_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun$ 0 )
(declare-sort C_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun$ 0 )
(declare-sort C_a_llist_fun_a_llist_c_fun_c_a_llist_fun_fun_fun$ 0 )
(declare-sort C_b_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun$ 0 )
(declare-sort A_c_fun_b_b_llist_fun_fun_a_c_fun_c_a_llist_fun_fun_fun$ 0 )
(declare-sort B_llist_a_llist_fun_b_b_llist_fun_c_a_llist_fun_fun_fun$ 0 )
(declare-sort C_b_llist_fun_a_llist_c_fun_b_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort C_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun$ 0 )
(declare-sort C_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun$ 0 )
(declare-sort C_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun$ 0 )
(declare-sort C_bool_fun_c_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun_fun$ 0 )
(declare-sort A_llist_c_fun_b_llist_b_fun_fun_a_llist_c_fun_c_a_fun_fun_fun$ 0 )
(declare-sort B_llist_a_llist_fun_b_llist_b_llist_fun_c_a_llist_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun_fun$ 0 )
(declare-sort C_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun$ 0 )
(declare-sort C_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun$ 0 )
(declare-sort C_bool_fun_c_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun_fun$ 0 )
(declare-sort C_c_fun_c_bool_fun_c_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_llist_c_fun_b_llist_b_llist_fun_fun_a_llist_c_fun_c_a_llist_fun_fun_fun$ 0 )
(declare-sort C_b_llist_fun_c_bool_fun_c_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-sort B_llist_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort C_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun lNil$b ()B_llist_llist$)
(declare-fun lhd$b (B_llist_llist$)B_llist$)
(declare-fun ltl$b (B_llist_llist$)B_llist_llist$)
(declare-fun lCons$b (B_llist$ B_llist_llist$ )B_llist_llist$)
(declare-fun lNil$c ()A_llist_llist$)
(declare-fun lhd$c (A_llist_llist$)A_llist$)
(declare-fun ltl$c (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$c (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun lNil$d ()C_llist$)
(declare-fun lhd$d (C_llist$)C$)
(declare-fun ltl$d (C_llist$)C_llist$)
(declare-fun lCons$d (C$ C_llist$ )C_llist$)
(declare-sort A_a_prod$ 0)
(declare-sort A_llist_a_llist_prod$ 0)
(declare-fun fst$ (A_a_prod$)A$)
(declare-fun snd$ (A_a_prod$)A$)
(declare-fun pair$ (A$ A$ )A_a_prod$)
(declare-fun fst$a (A_llist_a_llist_prod$)A_llist$)
(declare-fun snd$a (A_llist_a_llist_prod$)A_llist$)
(declare-fun pair$a (A_llist$ A_llist$ )A_llist_a_llist_prod$)
(declare-fun b$ ()C$ )
(declare-fun f$ ()B_a_fun$ )
(declare-fun comp$ (B_a_fun$ )C_b_fun_c_a_fun_fun$ )
(declare-fun lhd$e ()C_b_fun$ )
(declare-fun lmap$ (B_a_fun$ )B_llist_a_llist_fun$ )
(declare-fun comp$a (B_llist_a_llist_fun$ )C_b_llist_fun_c_a_llist_fun_fun$ )
(declare-fun comp$b (B_llist_b_llist_fun$ )C_b_llist_fun_c_b_llist_fun_fun$ )
(declare-fun comp$c (B_b_fun$ )C_b_fun_c_b_fun_fun$ )
(declare-fun comp$d (A_llist_b_llist_fun$ )C_a_llist_fun_c_b_llist_fun_fun$ )
(declare-fun comp$e (A_b_fun$ )C_a_fun_c_b_fun_fun$ )
(declare-fun comp$f (A_llist_a_llist_fun$ )C_a_llist_fun_c_a_llist_fun_fun$ )
(declare-fun comp$g (A_a_fun$ )C_a_fun_c_a_fun_fun$ )
(declare-fun comp$h (B_llist_llist_a_llist_llist_fun$ C_b_llist_llist_fun$ )C_a_llist_llist_fun$ )
(declare-fun comp$i (A_llist_a_llist_fun$ )B_a_llist_fun_b_a_llist_fun_fun$ )
(declare-fun comp$j (A_a_fun$ )B_a_fun_b_a_fun_fun$ )
(declare-fun comp$k (C_llist_b_llist_fun$ )C_c_llist_fun_c_b_llist_fun_fun$ )
(declare-fun comp$l (C_b_fun$ )C_c_fun_c_b_fun_fun$ )
(declare-fun comp$m (C_llist_a_llist_fun$ )C_c_llist_fun_c_a_llist_fun_fun$ )
(declare-fun comp$n (C_a_fun$ )C_c_fun_c_a_fun_fun$ )
(declare-fun comp$o (A_llist_a_llist_llist_fun$ B_a_llist_fun$ )B_a_llist_llist_fun$ )
(declare-fun comp$p (A_a_llist_fun$ )B_a_fun_b_a_llist_fun_fun$ )
(declare-fun comp$q (B_llist_b_llist_llist_fun$ )C_b_llist_fun_c_b_llist_llist_fun_fun$ )
(declare-fun comp$r (B_b_llist_fun$ )C_b_fun_c_b_llist_fun_fun$ )
(declare-fun comp$s (B_a_fun$ )B_b_fun_b_a_fun_fun$ )
(declare-fun comp$t (B_a_fun$ )A_b_fun_a_a_fun_fun$ )
(declare-fun comp$u (C_b_fun$ )B_c_fun_b_b_fun_fun$ )
(declare-fun comp$v (C_b_fun$ )A_c_fun_a_b_fun_fun$ )
(declare-fun comp$w (C_a_fun$ )B_c_fun_b_a_fun_fun$ )
(declare-fun comp$x (A_a_llist_fun$ )C_a_fun_c_a_llist_fun_fun$ )
(declare-fun comp$y (C_b_llist_fun$ )C_c_fun_c_b_llist_fun_fun$ )
(declare-fun comp$z (C_a_llist_fun$ )C_c_fun_c_a_llist_fun_fun$ )
(declare-fun lmap$a (B_b_fun$ )B_llist_b_llist_fun$ )
(declare-fun lmap$b (A_b_fun$ )A_llist_b_llist_fun$ )
(declare-fun lmap$c (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lmap$d (B_llist_a_llist_fun$ )B_llist_llist_a_llist_llist_fun$ )
(declare-fun lmap$e (C_b_fun$ )C_llist_b_llist_fun$ )
(declare-fun lmap$f (C_a_fun$ )C_llist_a_llist_fun$ )
(declare-fun lmap$g (A_a_llist_fun$ )A_llist_a_llist_llist_fun$ )
(declare-fun lmap$h (B_b_llist_fun$ )B_llist_b_llist_llist_fun$ )
(declare-fun lmap$i (C_b_llist_fun$ C_llist$ )B_llist_llist$ )
(declare-fun lmap$j (C_a_llist_fun$ C_llist$ )A_llist_llist$ )
(declare-fun lmap$k (C_c_fun$ C_llist$ )C_llist$ )
(declare-fun lmap$l (B_c_fun$ B_llist$ )C_llist$ )
(declare-fun lmap$m (A_c_fun$ A_llist$ )C_llist$ )
(declare-fun lnull$ (B_llist$ )Bool )
(declare-fun comp$aa (A_llist_a_llist_fun$ )B_llist_a_llist_fun_b_llist_a_llist_fun_fun$ )
(declare-fun comp$ab (B_llist_a_llist_fun$ )B_llist_b_llist_fun_b_llist_a_llist_fun_fun$ )
(declare-fun comp$ac (B_b_fun$ )A_b_fun_a_b_fun_fun$ )
(declare-fun comp$ad (A_b_fun$ )B_a_fun_b_b_fun_fun$ )
(declare-fun comp$ae (B_llist_a_fun$ )C_b_llist_fun_c_a_fun_fun$ )
(declare-fun comp$af (A_a_llist_fun$ )B_llist_a_fun_b_llist_a_llist_fun_fun$ )
(declare-fun comp$ag (B_a_llist_fun$ )C_b_fun_c_a_llist_fun_fun$ )
(declare-fun comp$ah (A_llist_a_fun$ )B_llist_a_llist_fun_b_llist_a_fun_fun$ )
(declare-fun comp$ai (A_llist_a_fun$ )B_a_llist_fun_b_a_fun_fun$ )
(declare-fun comp$aj (B_llist_a_llist_fun$ )B_b_llist_fun_b_a_llist_fun_fun$ )
(declare-fun comp$ak (B_a_fun$ )B_llist_b_fun_b_llist_a_fun_fun$ )
(declare-fun comp$al (B_llist_b_fun$ )C_b_llist_fun_c_b_fun_fun$ )
(declare-fun comp$am (A_llist_a_fun$ )C_a_llist_fun_c_a_fun_fun$ )
(declare-fun comp$an (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun comp$ao (A_a_llist_fun$ )A_a_fun_a_a_llist_fun_fun$ )
(declare-fun comp$ap (B_b_fun_c_a_fun_fun$ )A_c_fun_b_b_fun_fun_a_c_fun_c_a_fun_fun_fun$ )
(declare-fun comp$aq (B_b_llist_fun_c_a_llist_fun_fun$ )A_c_fun_b_b_llist_fun_fun_a_c_fun_c_a_llist_fun_fun_fun$ )
(declare-fun comp$ar (B_llist_b_fun_c_a_fun_fun$ )A_llist_c_fun_b_llist_b_fun_fun_a_llist_c_fun_c_a_fun_fun_fun$ )
(declare-fun comp$as (B_llist_b_llist_fun_c_a_llist_fun_fun$ )A_llist_c_fun_b_llist_b_llist_fun_fun_a_llist_c_fun_c_a_llist_fun_fun_fun$ )
(declare-fun comp$at (B_a_a_prod_fun$ C_b_fun$ )C_a_a_prod_fun$ )
(declare-fun comp$au (B_llist_a_llist_a_llist_prod_fun$ C_b_llist_fun$ )C_a_llist_a_llist_prod_fun$ )
(declare-fun convol$ (B_a_fun$ B_a_fun$ )B_a_a_prod_fun$ )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun convol$a (C_a_fun$ C_a_fun$ )C_a_a_prod_fun$ )
(declare-fun convol$b (B_llist_a_llist_fun$ B_llist_a_llist_fun$ )B_llist_a_llist_a_llist_prod_fun$ )
(declare-fun convol$c (C_a_llist_fun$ C_a_llist_fun$ )C_a_llist_a_llist_prod_fun$ )
(declare-fun fun_app$ (B_llist_a_llist_fun$ B_llist$ )A_llist$ )
(declare-fun iS_LNIL$ ()C_bool_fun$ )
(declare-fun map_fun$ (C_b_fun$ )B_a_fun_b_b_fun_c_a_fun_fun_fun$ )
(declare-fun tTL_end$ ()C_b_llist_fun$ )
(declare-fun fun_app$a (C_b_llist_fun$ C$ )B_llist$ )
(declare-fun fun_app$b (C_c_fun_c_b_llist_fun_fun$ C_c_fun$ )C_b_llist_fun$ )
(declare-fun fun_app$c (C_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun$ C_b_llist_fun$ )C_c_fun_c_b_llist_fun_fun$ )
(declare-fun fun_app$d (C_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun$ C_bool_fun$ )C_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun$ )
(declare-fun fun_app$e (C_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun$ C_b_fun$ )C_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun$ )
(declare-fun fun_app$f (C_a_llist_fun$ C$ )A_llist$ )
(declare-fun fun_app$g (C_c_fun_c_a_llist_fun_fun$ C_c_fun$ )C_a_llist_fun$ )
(declare-fun fun_app$h (C_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun$ C_a_llist_fun$ )C_c_fun_c_a_llist_fun_fun$ )
(declare-fun fun_app$i (C_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun$ C_bool_fun$ )C_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun$ )
(declare-fun fun_app$j (C_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun$ C_a_fun$ )C_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun$ )
(declare-fun fun_app$k (C_b_fun_c_a_fun_fun$ C_b_fun$ )C_a_fun$ )
(declare-fun fun_app$l (C_b_llist_fun_c_a_llist_fun_fun$ C_b_llist_fun$ )C_a_llist_fun$ )
(declare-fun fun_app$m (C_b_llist_fun_c_b_llist_fun_fun$ C_b_llist_fun$ )C_b_llist_fun$ )
(declare-fun fun_app$n (C_b_fun_c_b_fun_fun$ C_b_fun$ )C_b_fun$ )
(declare-fun fun_app$o (C_a_llist_fun_c_b_llist_fun_fun$ C_a_llist_fun$ )C_b_llist_fun$ )
(declare-fun fun_app$p (C_a_fun_c_b_fun_fun$ C_a_fun$ )C_b_fun$ )
(declare-fun fun_app$q (C_a_llist_fun_c_a_llist_fun_fun$ C_a_llist_fun$ )C_a_llist_fun$ )
(declare-fun fun_app$r (C_a_fun_c_a_fun_fun$ C_a_fun$ )C_a_fun$ )
(declare-fun fun_app$s (C_c_fun_c_b_llist_llist_fun_fun$ C_c_fun$ )C_b_llist_llist_fun$ )
(declare-fun fun_app$t (C_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun$ C_b_llist_llist_fun$ )C_c_fun_c_b_llist_llist_fun_fun$ )
(declare-fun fun_app$u (C_bool_fun_c_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun_fun$ C_bool_fun$ )C_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun$ )
(declare-fun fun_app$v (C_b_llist_fun_c_bool_fun_c_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun_fun_fun$ C_b_llist_fun$ )C_bool_fun_c_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun_fun$ )
(declare-fun fun_app$w (B_a_llist_fun_b_a_llist_fun_fun$ B_a_llist_fun$ )B_a_llist_fun$ )
(declare-fun fun_app$x (B_b_fun_b_a_llist_fun_fun$ B_b_fun$ )B_a_llist_fun$ )
(declare-fun fun_app$y (B_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun$ B_a_llist_fun$ )B_b_fun_b_a_llist_fun_fun$ )
(declare-fun fun_app$z (B_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun$ B_bool_fun$ )B_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun$ )
(declare-fun map_fun$a (B_a_fun$ )C_b_fun_a_c_fun_b_b_fun_fun_fun$ )
(declare-fun map_fun$b (C_a_fun$ )C_a_fun_a_c_fun_c_a_fun_fun_fun$ )
(declare-fun map_fun$c (C_b_fun$ )B_llist_a_llist_fun_b_b_llist_fun_c_a_llist_fun_fun_fun$ )
(declare-fun map_fun$d (B_a_fun$ )C_b_llist_fun_a_c_fun_b_b_llist_fun_fun_fun$ )
(declare-fun map_fun$e (C_a_fun$ )C_a_llist_fun_a_c_fun_c_a_llist_fun_fun_fun$ )
(declare-fun map_fun$f (C_b_llist_fun$ )B_a_fun_b_llist_b_fun_c_a_fun_fun_fun$ )
(declare-fun map_fun$g (B_llist_a_llist_fun$ )C_b_fun_a_llist_c_fun_b_llist_b_fun_fun_fun$ )
(declare-fun map_fun$h (C_a_llist_fun$ )C_a_fun_a_llist_c_fun_c_a_fun_fun_fun$ )
(declare-fun map_fun$i (C_b_llist_fun$ )B_llist_a_llist_fun_b_llist_b_llist_fun_c_a_llist_fun_fun_fun$ )
(declare-fun map_fun$j (B_llist_a_llist_fun$ )C_b_llist_fun_a_llist_c_fun_b_llist_b_llist_fun_fun_fun$ )
(declare-fun map_fun$k (C_a_llist_fun$ )C_a_llist_fun_a_llist_c_fun_c_a_llist_fun_fun_fun$ )
(declare-fun tTL_more$ ()C_c_fun$ )
(declare-fun endORmore$ ()C_bool_fun$ )
(declare-fun fun_app$aa (B_a_fun_b_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun_fun$ B_a_fun$ )B_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun$ )
(declare-fun fun_app$ab (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$ac (C_c_llist_fun_c_b_llist_fun_fun$ C_c_llist_fun$ )C_b_llist_fun$ )
(declare-fun fun_app$ad (C_c_fun_c_c_llist_fun_fun$ C_c_fun$ )C_c_llist_fun$ )
(declare-fun fun_app$ae (C_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun$ C_c_llist_fun$ )C_c_fun_c_c_llist_fun_fun$ )
(declare-fun fun_app$af (C_bool_fun_c_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun_fun$ C_bool_fun$ )C_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun$ )
(declare-fun fun_app$ag (C_c_fun_c_bool_fun_c_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun_fun_fun$ C_c_fun$ )C_bool_fun_c_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun_fun$ )
(declare-fun fun_app$ah (C_c_fun_c_b_fun_fun$ C_c_fun$ )C_b_fun$ )
(declare-fun fun_app$ai (C_c_llist_fun_c_a_llist_fun_fun$ C_c_llist_fun$ )C_a_llist_fun$ )
(declare-fun fun_app$aj (C_c_fun_c_a_fun_fun$ C_c_fun$ )C_a_fun$ )
(declare-fun fun_app$ak (B_a_fun_b_a_llist_fun_fun$ B_a_fun$ )B_a_llist_fun$ )
(declare-fun fun_app$al (C_b_llist_fun_c_b_llist_llist_fun_fun$ C_b_llist_fun$ )C_b_llist_llist_fun$ )
(declare-fun fun_app$am (C_b_fun_c_b_llist_fun_fun$ C_b_fun$ )C_b_llist_fun$ )
(declare-fun fun_app$an (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$ao (C_llist_b_llist_fun$ C_llist$ )B_llist$ )
(declare-fun fun_app$ap (C_llist_a_llist_fun$ C_llist$ )A_llist$ )
(declare-fun fun_app$aq (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$ar (B_b_fun_b_a_fun_fun$ B_b_fun$ )B_a_fun$ )
(declare-fun fun_app$as (B_llist_llist_a_llist_llist_fun$ B_llist_llist$ )A_llist_llist$ )
(declare-fun fun_app$at (A_llist_b_llist_fun$ A_llist$ )B_llist$ )
(declare-fun fun_app$au (A_b_fun_a_a_fun_fun$ A_b_fun$ )A_a_fun$ )
(declare-fun fun_app$av (B_c_fun_b_b_fun_fun$ B_c_fun$ )B_b_fun$ )
(declare-fun fun_app$aw (A_c_fun_a_b_fun_fun$ A_c_fun$ )A_b_fun$ )
(declare-fun fun_app$ax (B_c_fun_b_a_fun_fun$ B_c_fun$ )B_a_fun$ )
(declare-fun fun_app$ay (C_a_fun_c_a_llist_fun_fun$ C_a_fun$ )C_a_llist_fun$ )
(declare-fun fun_app$az (A_a_llist_fun$ A$ )A_llist$ )
(declare-fun fun_app$ba (C_a_fun$ C$ )A$ )
(declare-fun fun_app$bb (B_a_llist_fun$ B$ )A_llist$ )
(declare-fun fun_app$bc (B_a_fun$ B$ )A$ )
(declare-fun fun_app$bd (C_b_fun$ C$ )B$ )
(declare-fun fun_app$be (A_b_fun$ A$ )B$ )
(declare-fun fun_app$bf (A_a_fun$ A$ )A$ )
(declare-fun fun_app$bg (C_b_fun_c_c_fun_c_b_llist_fun_fun_fun$ C_b_fun$ )C_c_fun_c_b_llist_fun_fun$ )
(declare-fun fun_app$bh (C_a_fun_c_c_fun_c_a_llist_fun_fun_fun$ C_a_fun$ )C_c_fun_c_a_llist_fun_fun$ )
(declare-fun fun_app$bi (C_b_llist_llist_fun$ C$ )B_llist_llist$ )
(declare-fun fun_app$bj (C_b_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun$ C_b_llist_fun$ )C_c_fun_c_b_llist_llist_fun_fun$ )
(declare-fun fun_app$bk (B_a_fun_b_b_fun_b_a_llist_fun_fun_fun$ B_a_fun$ )B_b_fun_b_a_llist_fun_fun$ )
(declare-fun fun_app$bl (C_c_llist_fun$ C$ )C_llist$ )
(declare-fun fun_app$bm (C_c_fun_c_c_fun_c_c_llist_fun_fun_fun$ C_c_fun$ )C_c_fun_c_c_llist_fun_fun$ )
(declare-fun fun_app$bn (A_llist_a_llist_llist_fun$ A_llist$ )A_llist_llist$ )
(declare-fun fun_app$bo (B_llist_b_llist_llist_fun$ B_llist$ )B_llist_llist$ )
(declare-fun fun_app$bp (B_llist_a_llist_fun_b_llist_a_llist_fun_fun$ B_llist_a_llist_fun$ )B_llist_a_llist_fun$ )
(declare-fun fun_app$bq (B_llist_b_llist_fun_b_llist_a_llist_fun_fun$ B_llist_b_llist_fun$ )B_llist_a_llist_fun$ )
(declare-fun fun_app$br (A_b_fun_a_b_fun_fun$ A_b_fun$ )A_b_fun$ )
(declare-fun fun_app$bs (B_a_fun_b_b_fun_fun$ B_a_fun$ )B_b_fun$ )
(declare-fun fun_app$bt (C_b_llist_fun_c_a_fun_fun$ C_b_llist_fun$ )C_a_fun$ )
(declare-fun fun_app$bu (B_llist_a_fun_b_llist_a_llist_fun_fun$ B_llist_a_fun$ )B_llist_a_llist_fun$ )
(declare-fun fun_app$bv (C_b_fun_c_a_llist_fun_fun$ C_b_fun$ )C_a_llist_fun$ )
(declare-fun fun_app$bw (B_llist_a_llist_fun_b_llist_a_fun_fun$ B_llist_a_llist_fun$ )B_llist_a_fun$ )
(declare-fun fun_app$bx (B_a_llist_fun_b_a_fun_fun$ B_a_llist_fun$ )B_a_fun$ )
(declare-fun fun_app$by (B_b_llist_fun_b_a_llist_fun_fun$ B_b_llist_fun$ )B_a_llist_fun$ )
(declare-fun fun_app$bz (B_llist_b_fun_b_llist_a_fun_fun$ B_llist_b_fun$ )B_llist_a_fun$ )
(declare-fun fun_app$ca (C_b_llist_fun_c_b_fun_fun$ C_b_llist_fun$ )C_b_fun$ )
(declare-fun fun_app$cb (C_a_llist_fun_c_a_fun_fun$ C_a_llist_fun$ )C_a_fun$ )
(declare-fun fun_app$cc (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$cd (A_a_fun_a_a_llist_fun_fun$ A_a_fun$ )A_a_llist_fun$ )
(declare-fun fun_app$ce (C_c_fun$ C$ )C$ )
(declare-fun fun_app$cf (B_b_fun$ B$ )B$ )
(declare-fun fun_app$cg (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$ch (A_c_fun_b_b_fun_fun_a_c_fun_c_a_fun_fun_fun$ A_c_fun_b_b_fun_fun$ )A_c_fun_c_a_fun_fun$ )
(declare-fun fun_app$ci (B_a_fun_b_b_fun_c_a_fun_fun_fun$ B_a_fun$ )B_b_fun_c_a_fun_fun$ )
(declare-fun fun_app$cj (C_b_fun_a_c_fun_b_b_fun_fun_fun$ C_b_fun$ )A_c_fun_b_b_fun_fun$ )
(declare-fun fun_app$ck (C_a_fun_a_c_fun_c_a_fun_fun_fun$ C_a_fun$ )A_c_fun_c_a_fun_fun$ )
(declare-fun fun_app$cl (A_c_fun_b_b_llist_fun_fun_a_c_fun_c_a_llist_fun_fun_fun$ A_c_fun_b_b_llist_fun_fun$ )A_c_fun_c_a_llist_fun_fun$ )
(declare-fun fun_app$cm (B_llist_a_llist_fun_b_b_llist_fun_c_a_llist_fun_fun_fun$ B_llist_a_llist_fun$ )B_b_llist_fun_c_a_llist_fun_fun$ )
(declare-fun fun_app$cn (C_b_llist_fun_a_c_fun_b_b_llist_fun_fun_fun$ C_b_llist_fun$ )A_c_fun_b_b_llist_fun_fun$ )
(declare-fun fun_app$co (C_a_llist_fun_a_c_fun_c_a_llist_fun_fun_fun$ C_a_llist_fun$ )A_c_fun_c_a_llist_fun_fun$ )
(declare-fun fun_app$cp (A_llist_c_fun_b_llist_b_fun_fun_a_llist_c_fun_c_a_fun_fun_fun$ A_llist_c_fun_b_llist_b_fun_fun$ )A_llist_c_fun_c_a_fun_fun$ )
(declare-fun fun_app$cq (B_a_fun_b_llist_b_fun_c_a_fun_fun_fun$ B_a_fun$ )B_llist_b_fun_c_a_fun_fun$ )
(declare-fun fun_app$cr (C_b_fun_a_llist_c_fun_b_llist_b_fun_fun_fun$ C_b_fun$ )A_llist_c_fun_b_llist_b_fun_fun$ )
(declare-fun fun_app$cs (C_a_fun_a_llist_c_fun_c_a_fun_fun_fun$ C_a_fun$ )A_llist_c_fun_c_a_fun_fun$ )
(declare-fun fun_app$ct (A_llist_c_fun_b_llist_b_llist_fun_fun_a_llist_c_fun_c_a_llist_fun_fun_fun$ A_llist_c_fun_b_llist_b_llist_fun_fun$ )A_llist_c_fun_c_a_llist_fun_fun$ )
(declare-fun fun_app$cu (B_llist_a_llist_fun_b_llist_b_llist_fun_c_a_llist_fun_fun_fun$ B_llist_a_llist_fun$ )B_llist_b_llist_fun_c_a_llist_fun_fun$ )
(declare-fun fun_app$cv (C_b_llist_fun_a_llist_c_fun_b_llist_b_llist_fun_fun_fun$ C_b_llist_fun$ )A_llist_c_fun_b_llist_b_llist_fun_fun$ )
(declare-fun fun_app$cw (C_a_llist_fun_a_llist_c_fun_c_a_llist_fun_fun_fun$ C_a_llist_fun$ )A_llist_c_fun_c_a_llist_fun_fun$ )
(declare-fun corec_llist$ (C_bool_fun$ )C_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun$ )
(declare-fun corec_llist$a (C_bool_fun$ )C_a_fun_c_bool_fun_c_a_llist_fun_c_c_fun_c_a_llist_fun_fun_fun_fun_fun$ )
(declare-fun corec_llist$b (C_bool_fun$ )C_b_llist_fun_c_bool_fun_c_b_llist_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun_fun_fun$ )
(declare-fun corec_llist$c (C_bool_fun$ C_a_llist_fun$ C_bool_fun$ C_a_llist_llist_fun$ C_c_fun$ )C_a_llist_llist_fun$ )
(declare-fun corec_llist$d (B_bool_fun$ )B_a_fun_b_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun_fun$ )
(declare-fun corec_llist$e (C_bool_fun$ )C_c_fun_c_bool_fun_c_c_llist_fun_c_c_fun_c_c_llist_fun_fun_fun_fun_fun$ )
(declare-fun corec_llist$f (B_bool_fun$ B_a_llist_fun$ B_bool_fun$ B_a_llist_llist_fun$ B_b_fun$ )B_a_llist_llist_fun$ )
(declare-fun unfold_llist$ (C_bool_fun$ )C_b_fun_c_c_fun_c_b_llist_fun_fun_fun$ )
(declare-fun unfold_llist$a (C_bool_fun$ )C_a_fun_c_c_fun_c_a_llist_fun_fun_fun$ )
(declare-fun unfold_llist$b (C_bool_fun$ )C_b_llist_fun_c_c_fun_c_b_llist_llist_fun_fun_fun$ )
(declare-fun unfold_llist$c (C_bool_fun$ C_a_llist_fun$ C_c_fun$ C$ )A_llist_llist$ )
(declare-fun unfold_llist$d (B_bool_fun$ )B_a_fun_b_b_fun_b_a_llist_fun_fun_fun$ )
(declare-fun unfold_llist$e (C_bool_fun$ )C_c_fun_c_c_fun_c_c_llist_fun_fun_fun$ )
(declare-fun unfold_llist$f (B_bool_fun$ B_a_llist_fun$ B_b_fun$ B$ )A_llist_llist$ )
(assert (! (not (= (fun_app$ (lmap$ f$ )(fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ iS_LNIL$ )lhd$e )endORmore$ )tTL_end$ )tTL_more$ )b$ ))(fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_llist$a iS_LNIL$ )(fun_app$k (comp$ f$ )lhd$e ))endORmore$ )(fun_app$l (comp$a (lmap$ f$ ))tTL_end$ ))tTL_more$ )b$ ))):named a0 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_bool_fun$ )(?v2 C_b_fun$ )(?v3 C_bool_fun$ )(?v4 C_b_llist_fun$ )(?v5 C_c_fun$ ))(= (fun_app$m (comp$b (lmap$a ?v0 ))(fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v1 )?v2 )?v3 )?v4 )?v5 ))(fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v1 )(fun_app$n (comp$c ?v0 )?v2 ))?v3 )(fun_app$m (comp$b (lmap$a ?v0 ))?v4 ))?v5 ))):named a1 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_bool_fun$ )(?v2 C_b_fun$ )(?v3 C_bool_fun$ )(?v4 C_b_llist_fun$ )(?v5 C_c_fun$ ))(= (fun_app$l (comp$a (lmap$ ?v0 ))(fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v1 )?v2 )?v3 )?v4 )?v5 ))(fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_llist$a ?v1 )(fun_app$k (comp$ ?v0 )?v2 ))?v3 )(fun_app$l (comp$a (lmap$ ?v0 ))?v4 ))?v5 ))):named a2 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 C_bool_fun$ )(?v2 C_a_fun$ )(?v3 C_bool_fun$ )(?v4 C_a_llist_fun$ )(?v5 C_c_fun$ ))(= (fun_app$o (comp$d (lmap$b ?v0 ))(fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_llist$a ?v1 )?v2 )?v3 )?v4 )?v5 ))(fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v1 )(fun_app$p (comp$e ?v0 )?v2 ))?v3 )(fun_app$o (comp$d (lmap$b ?v0 ))?v4 ))?v5 ))):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_bool_fun$ )(?v2 C_a_fun$ )(?v3 C_bool_fun$ )(?v4 C_a_llist_fun$ )(?v5 C_c_fun$ ))(= (fun_app$q (comp$f (lmap$c ?v0 ))(fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_llist$a ?v1 )?v2 )?v3 )?v4 )?v5 ))(fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_llist$a ?v1 )(fun_app$r (comp$g ?v0 )?v2 ))?v3 )(fun_app$q (comp$f (lmap$c ?v0 ))?v4 ))?v5 ))):named a4 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_bool_fun$ )(?v2 C_b_llist_fun$ )(?v3 C_bool_fun$ )(?v4 C_b_llist_llist_fun$ )(?v5 C_c_fun$ ))(= (comp$h (lmap$d ?v0 )(fun_app$s (fun_app$t (fun_app$u (fun_app$v (corec_llist$b ?v1 )?v2 )?v3 )?v4 )?v5 ))(corec_llist$c ?v1 (fun_app$l (comp$a ?v0 )?v2 )?v3 (comp$h (lmap$d ?v0 )?v4 )?v5 ))):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_bool_fun$ )(?v2 B_a_fun$ )(?v3 B_bool_fun$ )(?v4 B_a_llist_fun$ )(?v5 B_b_fun$ ))(= (fun_app$w (comp$i (lmap$c ?v0 ))(fun_app$x (fun_app$y (fun_app$z (fun_app$aa (corec_llist$d ?v1 )?v2 )?v3 )?v4 )?v5 ))(fun_app$x (fun_app$y (fun_app$z (fun_app$aa (corec_llist$d ?v1 )(fun_app$ab (comp$j ?v0 )?v2 ))?v3 )(fun_app$w (comp$i (lmap$c ?v0 ))?v4 ))?v5 ))):named a6 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_bool_fun$ )(?v2 C_c_fun$ )(?v3 C_bool_fun$ )(?v4 C_c_llist_fun$ )(?v5 C_c_fun$ ))(= (fun_app$ac (comp$k (lmap$e ?v0 ))(fun_app$ad (fun_app$ae (fun_app$af (fun_app$ag (corec_llist$e ?v1 )?v2 )?v3 )?v4 )?v5 ))(fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v1 )(fun_app$ah (comp$l ?v0 )?v2 ))?v3 )(fun_app$ac (comp$k (lmap$e ?v0 ))?v4 ))?v5 ))):named a7 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_bool_fun$ )(?v2 C_c_fun$ )(?v3 C_bool_fun$ )(?v4 C_c_llist_fun$ )(?v5 C_c_fun$ ))(= (fun_app$ai (comp$m (lmap$f ?v0 ))(fun_app$ad (fun_app$ae (fun_app$af (fun_app$ag (corec_llist$e ?v1 )?v2 )?v3 )?v4 )?v5 ))(fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_llist$a ?v1 )(fun_app$aj (comp$n ?v0 )?v2 ))?v3 )(fun_app$ai (comp$m (lmap$f ?v0 ))?v4 ))?v5 ))):named a8 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 B_bool_fun$ )(?v2 B_a_fun$ )(?v3 B_bool_fun$ )(?v4 B_a_llist_fun$ )(?v5 B_b_fun$ ))(= (comp$o (lmap$g ?v0 )(fun_app$x (fun_app$y (fun_app$z (fun_app$aa (corec_llist$d ?v1 )?v2 )?v3 )?v4 )?v5 ))(corec_llist$f ?v1 (fun_app$ak (comp$p ?v0 )?v2 )?v3 (comp$o (lmap$g ?v0 )?v4 )?v5 ))):named a9 ))
(assert (! (forall ((?v0 B_b_llist_fun$ )(?v1 C_bool_fun$ )(?v2 C_b_fun$ )(?v3 C_bool_fun$ )(?v4 C_b_llist_fun$ )(?v5 C_c_fun$ ))(= (fun_app$al (comp$q (lmap$h ?v0 ))(fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v1 )?v2 )?v3 )?v4 )?v5 ))(fun_app$s (fun_app$t (fun_app$u (fun_app$v (corec_llist$b ?v1 )(fun_app$am (comp$r ?v0 )?v2 ))?v3 )(fun_app$al (comp$q (lmap$h ?v0 ))?v4 ))?v5 ))):named a10 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (fun_app$an (lmap$c ?v0 )(fun_app$ (lmap$ ?v1 )?v2 ))(fun_app$ (lmap$ (fun_app$ab (comp$j ?v0 )?v1 ))?v2 ))):named a11 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_llist$ ))(= (fun_app$ (lmap$ ?v0 )(fun_app$ao (lmap$e ?v1 )?v2 ))(fun_app$ap (lmap$f (fun_app$k (comp$ ?v0 )?v1 ))?v2 ))):named a12 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (fun_app$ (lmap$ ?v0 )(fun_app$aq (lmap$a ?v1 )?v2 ))(fun_app$ (lmap$ (fun_app$ar (comp$s ?v0 )?v1 ))?v2 ))):named a13 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 C_llist$ ))(= (fun_app$as (lmap$d ?v0 )(lmap$i ?v1 ?v2 ))(lmap$j (fun_app$l (comp$a ?v0 )?v1 )?v2 ))):named a14 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (fun_app$ (lmap$ ?v0 )(fun_app$at (lmap$b ?v1 )?v2 ))(fun_app$an (lmap$c (fun_app$au (comp$t ?v0 )?v1 ))?v2 ))):named a15 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 C_llist$ ))(= (fun_app$ao (lmap$e ?v0 )(lmap$k ?v1 ?v2 ))(fun_app$ao (lmap$e (fun_app$ah (comp$l ?v0 )?v1 ))?v2 ))):named a16 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 B_c_fun$ )(?v2 B_llist$ ))(= (fun_app$ao (lmap$e ?v0 )(lmap$l ?v1 ?v2 ))(fun_app$aq (lmap$a (fun_app$av (comp$u ?v0 )?v1 ))?v2 ))):named a17 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 A_c_fun$ )(?v2 A_llist$ ))(= (fun_app$ao (lmap$e ?v0 )(lmap$m ?v1 ?v2 ))(fun_app$at (lmap$b (fun_app$aw (comp$v ?v0 )?v1 ))?v2 ))):named a18 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_llist$ ))(= (fun_app$ap (lmap$f ?v0 )(lmap$l ?v1 ?v2 ))(fun_app$ (lmap$ (fun_app$ax (comp$w ?v0 )?v1 ))?v2 ))):named a19 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_llist$ ))(= (fun_app$ap (lmap$f ?v0 )(lmap$k ?v1 ?v2 ))(fun_app$ap (lmap$f (fun_app$aj (comp$n ?v0 )?v1 ))?v2 ))):named a20 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$f (fun_app$ay (comp$x ?v0 )?v1 )?v2 )(fun_app$az ?v0 (fun_app$ba ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$ay (comp$x ?v0 )?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$bb (fun_app$ak (comp$p ?v0 )?v1 )?v2 )(fun_app$az ?v0 (fun_app$bc ?v1 ?v2 ))):pattern ((fun_app$bb (fun_app$ak (comp$p ?v0 )?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$bd (fun_app$p (comp$e ?v0 )?v1 )?v2 )(fun_app$be ?v0 (fun_app$ba ?v1 ?v2 ))):pattern ((fun_app$bd (fun_app$p (comp$e ?v0 )?v1 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$ba (fun_app$r (comp$g ?v0 )?v1 )?v2 )(fun_app$bf ?v0 (fun_app$ba ?v1 ?v2 ))):pattern ((fun_app$ba (fun_app$r (comp$g ?v0 )?v1 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$bc (fun_app$ab (comp$j ?v0 )?v1 )?v2 )(fun_app$bf ?v0 (fun_app$bc ?v1 ?v2 ))):pattern ((fun_app$bc (fun_app$ab (comp$j ?v0 )?v1 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C$ ))(! (= (fun_app$ba (fun_app$k (comp$ ?v0 )?v1 )?v2 )(fun_app$bc ?v0 (fun_app$bd ?v1 ?v2 ))):pattern ((fun_app$ba (fun_app$k (comp$ ?v0 )?v1 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 C$ ))(! (= (fun_app$f (fun_app$l (comp$a ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$l (comp$a ?v0 )?v1 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_bool_fun$ )(?v2 C_b_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(= (fun_app$ (lmap$ ?v0 )(fun_app$a (fun_app$b (fun_app$bg (unfold_llist$ ?v1 )?v2 )?v3 )?v4 ))(fun_app$f (fun_app$g (fun_app$bh (unfold_llist$a ?v1 )(fun_app$k (comp$ ?v0 )?v2 ))?v3 )?v4 ))):named a28 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_bool_fun$ )(?v2 C_b_llist_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(= (fun_app$as (lmap$d ?v0 )(fun_app$bi (fun_app$s (fun_app$bj (unfold_llist$b ?v1 )?v2 )?v3 )?v4 ))(unfold_llist$c ?v1 (fun_app$l (comp$a ?v0 )?v2 )?v3 ?v4 ))):named a29 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_bool_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(= (fun_app$an (lmap$c ?v0 )(fun_app$bb (fun_app$x (fun_app$bk (unfold_llist$d ?v1 )?v2 )?v3 )?v4 ))(fun_app$bb (fun_app$x (fun_app$bk (unfold_llist$d ?v1 )(fun_app$ab (comp$j ?v0 )?v2 ))?v3 )?v4 ))):named a30 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_bool_fun$ )(?v2 C_c_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(= (fun_app$ao (lmap$e ?v0 )(fun_app$bl (fun_app$ad (fun_app$bm (unfold_llist$e ?v1 )?v2 )?v3 )?v4 ))(fun_app$a (fun_app$b (fun_app$bg (unfold_llist$ ?v1 )(fun_app$ah (comp$l ?v0 )?v2 ))?v3 )?v4 ))):named a31 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_bool_fun$ )(?v2 C_c_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(= (fun_app$ap (lmap$f ?v0 )(fun_app$bl (fun_app$ad (fun_app$bm (unfold_llist$e ?v1 )?v2 )?v3 )?v4 ))(fun_app$f (fun_app$g (fun_app$bh (unfold_llist$a ?v1 )(fun_app$aj (comp$n ?v0 )?v2 ))?v3 )?v4 ))):named a32 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_bool_fun$ )(?v2 C_b_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(= (fun_app$aq (lmap$a ?v0 )(fun_app$a (fun_app$b (fun_app$bg (unfold_llist$ ?v1 )?v2 )?v3 )?v4 ))(fun_app$a (fun_app$b (fun_app$bg (unfold_llist$ ?v1 )(fun_app$n (comp$c ?v0 )?v2 ))?v3 )?v4 ))):named a33 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 C_bool_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(= (fun_app$at (lmap$b ?v0 )(fun_app$f (fun_app$g (fun_app$bh (unfold_llist$a ?v1 )?v2 )?v3 )?v4 ))(fun_app$a (fun_app$b (fun_app$bg (unfold_llist$ ?v1 )(fun_app$p (comp$e ?v0 )?v2 ))?v3 )?v4 ))):named a34 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_bool_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(= (fun_app$an (lmap$c ?v0 )(fun_app$f (fun_app$g (fun_app$bh (unfold_llist$a ?v1 )?v2 )?v3 )?v4 ))(fun_app$f (fun_app$g (fun_app$bh (unfold_llist$a ?v1 )(fun_app$r (comp$g ?v0 )?v2 ))?v3 )?v4 ))):named a35 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 B_bool_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(= (fun_app$bn (lmap$g ?v0 )(fun_app$bb (fun_app$x (fun_app$bk (unfold_llist$d ?v1 )?v2 )?v3 )?v4 ))(unfold_llist$f ?v1 (fun_app$ak (comp$p ?v0 )?v2 )?v3 ?v4 ))):named a36 ))
(assert (! (forall ((?v0 B_b_llist_fun$ )(?v1 C_bool_fun$ )(?v2 C_b_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(= (fun_app$bo (lmap$h ?v0 )(fun_app$a (fun_app$b (fun_app$bg (unfold_llist$ ?v1 )?v2 )?v3 )?v4 ))(fun_app$bi (fun_app$s (fun_app$bj (unfold_llist$b ?v1 )(fun_app$am (comp$r ?v0 )?v2 ))?v3 )?v4 ))):named a37 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (fun_app$r (comp$g ?v0 )(fun_app$k (comp$ ?v1 )?v2 ))(fun_app$k (comp$ (fun_app$ab (comp$j ?v0 )?v1 ))?v2 ))):named a38 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_c_fun$ ))(= (fun_app$k (comp$ ?v0 )(fun_app$ah (comp$l ?v1 )?v2 ))(fun_app$aj (comp$n (fun_app$k (comp$ ?v0 )?v1 ))?v2 ))):named a39 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 C_b_fun$ ))(= (fun_app$k (comp$ ?v0 )(fun_app$n (comp$c ?v1 )?v2 ))(fun_app$k (comp$ (fun_app$ar (comp$s ?v0 )?v1 ))?v2 ))):named a40 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 C_c_fun$ ))(= (fun_app$l (comp$a ?v0 )(fun_app$b (comp$y ?v1 )?v2 ))(fun_app$g (comp$z (fun_app$l (comp$a ?v0 )?v1 ))?v2 ))):named a41 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 C_b_llist_fun$ ))(= (fun_app$q (comp$f ?v0 )(fun_app$l (comp$a ?v1 )?v2 ))(fun_app$l (comp$a (fun_app$bp (comp$aa ?v0 )?v1 ))?v2 ))):named a42 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 C_b_llist_fun$ ))(= (fun_app$l (comp$a ?v0 )(fun_app$m (comp$b ?v1 )?v2 ))(fun_app$l (comp$a (fun_app$bq (comp$ab ?v0 )?v1 ))?v2 ))):named a43 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 C_a_fun$ ))(= (fun_app$n (comp$c ?v0 )(fun_app$p (comp$e ?v1 )?v2 ))(fun_app$p (comp$e (fun_app$br (comp$ac ?v0 )?v1 ))?v2 ))):named a44 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 C_a_fun$ ))(= (fun_app$k (comp$ ?v0 )(fun_app$p (comp$e ?v1 )?v2 ))(fun_app$r (comp$g (fun_app$au (comp$t ?v0 )?v1 ))?v2 ))):named a45 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 C_a_fun$ )(?v2 C_c_fun$ ))(= (fun_app$p (comp$e ?v0 )(fun_app$aj (comp$n ?v1 )?v2 ))(fun_app$ah (comp$l (fun_app$p (comp$e ?v0 )?v1 ))?v2 ))):named a46 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (fun_app$p (comp$e ?v0 )(fun_app$k (comp$ ?v1 )?v2 ))(fun_app$n (comp$c (fun_app$bs (comp$ad ?v0 )?v1 ))?v2 ))):named a47 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_c_fun$ ))(= (fun_app$aj (comp$n (fun_app$k (comp$ ?v0 )?v1 ))?v2 )(fun_app$k (comp$ ?v0 )(fun_app$ah (comp$l ?v1 )?v2 )))):named a48 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (fun_app$k (comp$ (fun_app$ab (comp$j ?v0 )?v1 ))?v2 )(fun_app$r (comp$g ?v0 )(fun_app$k (comp$ ?v1 )?v2 )))):named a49 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 C_b_fun$ ))(= (fun_app$k (comp$ (fun_app$ar (comp$s ?v0 )?v1 ))?v2 )(fun_app$k (comp$ ?v0 )(fun_app$n (comp$c ?v1 )?v2 )))):named a50 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 C_c_fun$ ))(= (fun_app$g (comp$z (fun_app$l (comp$a ?v0 )?v1 ))?v2 )(fun_app$l (comp$a ?v0 )(fun_app$b (comp$y ?v1 )?v2 )))):named a51 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 C_b_llist_fun$ ))(= (fun_app$l (comp$a (fun_app$bp (comp$aa ?v0 )?v1 ))?v2 )(fun_app$q (comp$f ?v0 )(fun_app$l (comp$a ?v1 )?v2 )))):named a52 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 C_b_llist_fun$ ))(= (fun_app$l (comp$a (fun_app$bq (comp$ab ?v0 )?v1 ))?v2 )(fun_app$l (comp$a ?v0 )(fun_app$m (comp$b ?v1 )?v2 )))):named a53 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (fun_app$n (comp$c (fun_app$bs (comp$ad ?v0 )?v1 ))?v2 )(fun_app$p (comp$e ?v0 )(fun_app$k (comp$ ?v1 )?v2 )))):named a54 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 C_a_fun$ )(?v2 C_c_fun$ ))(= (fun_app$ah (comp$l (fun_app$p (comp$e ?v0 )?v1 ))?v2 )(fun_app$p (comp$e ?v0 )(fun_app$aj (comp$n ?v1 )?v2 )))):named a55 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_c_fun$ ))(= (fun_app$aj (comp$n (fun_app$r (comp$g ?v0 )?v1 ))?v2 )(fun_app$r (comp$g ?v0 )(fun_app$aj (comp$n ?v1 )?v2 )))):named a56 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 B_c_fun$ ))(= (fun_app$ax (comp$w (fun_app$r (comp$g ?v0 )?v1 ))?v2 )(fun_app$ab (comp$j ?v0 )(fun_app$ax (comp$w ?v1 )?v2 )))):named a57 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$f (fun_app$ay (comp$x ?v0 )?v1 )?v2 )(fun_app$az ?v0 (fun_app$ba ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$ay (comp$x ?v0 )?v1 )?v2 )))):named a58 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$bb (fun_app$ak (comp$p ?v0 )?v1 )?v2 )(fun_app$az ?v0 (fun_app$bc ?v1 ?v2 ))):pattern ((fun_app$bb (fun_app$ak (comp$p ?v0 )?v1 )?v2 )))):named a59 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$bd (fun_app$p (comp$e ?v0 )?v1 )?v2 )(fun_app$be ?v0 (fun_app$ba ?v1 ?v2 ))):pattern ((fun_app$bd (fun_app$p (comp$e ?v0 )?v1 )?v2 )))):named a60 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$ba (fun_app$r (comp$g ?v0 )?v1 )?v2 )(fun_app$bf ?v0 (fun_app$ba ?v1 ?v2 ))):pattern ((fun_app$ba (fun_app$r (comp$g ?v0 )?v1 )?v2 )))):named a61 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$bc (fun_app$ab (comp$j ?v0 )?v1 )?v2 )(fun_app$bf ?v0 (fun_app$bc ?v1 ?v2 ))):pattern ((fun_app$bc (fun_app$ab (comp$j ?v0 )?v1 )?v2 )))):named a62 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C$ ))(! (= (fun_app$ba (fun_app$k (comp$ ?v0 )?v1 )?v2 )(fun_app$bc ?v0 (fun_app$bd ?v1 ?v2 ))):pattern ((fun_app$ba (fun_app$k (comp$ ?v0 )?v1 )?v2 )))):named a63 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 C$ ))(! (= (fun_app$f (fun_app$l (comp$a ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$l (comp$a ?v0 )?v1 )?v2 )))):named a64 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ ))(=> (and (= (fun_app$k (comp$ ?v0 )?v1 )(fun_app$k (comp$ ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$bc ?v0 (fun_app$bd ?v1 ?v4 ))(fun_app$bc ?v2 (fun_app$bd ?v3 ?v4 ))))false ))false )):named a65 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 C_b_llist_fun$ ))(=> (and (= (fun_app$l (comp$a ?v0 )?v1 )(fun_app$l (comp$a ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$ ?v0 (fun_app$a ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$a ?v3 ?v4 ))))false ))false )):named a66 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (and (= (fun_app$k (comp$ ?v0 )?v1 )(fun_app$r (comp$g ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$bc ?v0 (fun_app$bd ?v1 ?v4 ))(fun_app$bf ?v2 (fun_app$ba ?v3 ?v4 ))))false ))false )):named a67 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 C_a_fun$ )(?v2 A_b_fun$ )(?v3 C_a_fun$ ))(=> (and (= (fun_app$p (comp$e ?v0 )?v1 )(fun_app$p (comp$e ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$be ?v0 (fun_app$ba ?v1 ?v4 ))(fun_app$be ?v2 (fun_app$ba ?v3 ?v4 ))))false ))false )):named a68 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ ))(=> (and (= (fun_app$r (comp$g ?v0 )?v1 )(fun_app$k (comp$ ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$bf ?v0 (fun_app$ba ?v1 ?v4 ))(fun_app$bc ?v2 (fun_app$bd ?v3 ?v4 ))))false ))false )):named a69 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (and (= (fun_app$r (comp$g ?v0 )?v1 )(fun_app$r (comp$g ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$bf ?v0 (fun_app$ba ?v1 ?v4 ))(fun_app$bf ?v2 (fun_app$ba ?v3 ?v4 ))))false ))false )):named a70 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (and (= (fun_app$ab (comp$j ?v0 )?v1 )(fun_app$ab (comp$j ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$bf ?v0 (fun_app$bc ?v1 ?v4 ))(fun_app$bf ?v2 (fun_app$bc ?v3 ?v4 ))))false ))false )):named a71 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 C_a_fun$ )(?v2 A_a_llist_fun$ )(?v3 C_a_fun$ ))(=> (and (= (fun_app$ay (comp$x ?v0 )?v1 )(fun_app$ay (comp$x ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$az ?v0 (fun_app$ba ?v1 ?v4 ))(fun_app$az ?v2 (fun_app$ba ?v3 ?v4 ))))false ))false )):named a72 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 B_a_fun$ )(?v2 A_a_llist_fun$ )(?v3 B_a_fun$ ))(=> (and (= (fun_app$ak (comp$p ?v0 )?v1 )(fun_app$ak (comp$p ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$az ?v0 (fun_app$bc ?v1 ?v4 ))(fun_app$az ?v2 (fun_app$bc ?v3 ?v4 ))))false ))false )):named a73 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 A_a_llist_fun$ )(?v3 C_a_fun$ ))(=> (and (= (fun_app$l (comp$a ?v0 )?v1 )(fun_app$ay (comp$x ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$ ?v0 (fun_app$a ?v1 ?v4 ))(fun_app$az ?v2 (fun_app$ba ?v3 ?v4 ))))false ))false )):named a74 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 B_b_fun$ )(?v3 C_b_fun$ )(?v4 B_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$ah (comp$l ?v0 )?v1 )(fun_app$n (comp$c ?v2 )?v3 ))(= (fun_app$ar (comp$s ?v4 )?v2 )?v5 ))(= (fun_app$aj (comp$n (fun_app$k (comp$ ?v4 )?v0 ))?v1 )(fun_app$k (comp$ ?v5 )?v3 )))):named a75 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C_b_fun$ )(?v3 C_c_fun$ )(?v4 B_a_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$n (comp$c ?v0 )?v1 )(fun_app$ah (comp$l ?v2 )?v3 ))(= (fun_app$k (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$k (comp$ (fun_app$ar (comp$s ?v4 )?v0 ))?v1 )(fun_app$aj (comp$n ?v5 )?v3 )))):named a76 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ )(?v4 A_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$k (comp$ ?v0 )?v1 )(fun_app$k (comp$ ?v2 )?v3 ))(= (fun_app$ab (comp$j ?v4 )?v2 )?v5 ))(= (fun_app$k (comp$ (fun_app$ab (comp$j ?v4 )?v0 ))?v1 )(fun_app$k (comp$ ?v5 )?v3 )))):named a77 ))
(assert (! (forall ((?v0 B_llist_a_fun$ )(?v1 C_b_llist_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ )(?v4 A_a_llist_fun$ )(?v5 B_a_llist_fun$ ))(=> (and (= (fun_app$bt (comp$ae ?v0 )?v1 )(fun_app$k (comp$ ?v2 )?v3 ))(= (fun_app$ak (comp$p ?v4 )?v2 )?v5 ))(= (fun_app$l (comp$a (fun_app$bu (comp$af ?v4 )?v0 ))?v1 )(fun_app$bv (comp$ag ?v5 )?v3 )))):named a78 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 C_b_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 C_b_llist_fun$ )(?v4 A_llist_a_fun$ )(?v5 B_llist_a_fun$ ))(=> (and (= (fun_app$bv (comp$ag ?v0 )?v1 )(fun_app$l (comp$a ?v2 )?v3 ))(= (fun_app$bw (comp$ah ?v4 )?v2 )?v5 ))(= (fun_app$k (comp$ (fun_app$bx (comp$ai ?v4 )?v0 ))?v1 )(fun_app$bt (comp$ae ?v5 )?v3 )))):named a79 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_llist_a_fun$ )(?v3 C_b_llist_fun$ )(?v4 A_a_llist_fun$ )(?v5 B_llist_a_llist_fun$ ))(=> (and (= (fun_app$k (comp$ ?v0 )?v1 )(fun_app$bt (comp$ae ?v2 )?v3 ))(= (fun_app$bu (comp$af ?v4 )?v2 )?v5 ))(= (fun_app$bv (comp$ag (fun_app$ak (comp$p ?v4 )?v0 ))?v1 )(fun_app$l (comp$a ?v5 )?v3 )))):named a80 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 B_a_llist_fun$ )(?v3 C_b_fun$ )(?v4 A_llist_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$l (comp$a ?v0 )?v1 )(fun_app$bv (comp$ag ?v2 )?v3 ))(= (fun_app$bx (comp$ai ?v4 )?v2 )?v5 ))(= (fun_app$bt (comp$ae (fun_app$bw (comp$ah ?v4 )?v0 ))?v1 )(fun_app$k (comp$ ?v5 )?v3 )))):named a81 ))
(assert (! (forall ((?v0 C_b_llist_fun$ )(?v1 C_c_fun$ )(?v2 B_llist_b_llist_fun$ )(?v3 C_b_llist_fun$ )(?v4 B_llist_a_llist_fun$ )(?v5 B_llist_a_llist_fun$ ))(=> (and (= (fun_app$b (comp$y ?v0 )?v1 )(fun_app$m (comp$b ?v2 )?v3 ))(= (fun_app$bq (comp$ab ?v4 )?v2 )?v5 ))(= (fun_app$g (comp$z (fun_app$l (comp$a ?v4 )?v0 ))?v1 )(fun_app$l (comp$a ?v5 )?v3 )))):named a82 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 C_b_llist_fun$ )(?v3 C_c_fun$ )(?v4 B_llist_a_llist_fun$ )(?v5 C_a_llist_fun$ ))(=> (and (= (fun_app$m (comp$b ?v0 )?v1 )(fun_app$b (comp$y ?v2 )?v3 ))(= (fun_app$l (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$l (comp$a (fun_app$bq (comp$ab ?v4 )?v0 ))?v1 )(fun_app$g (comp$z ?v5 )?v3 )))):named a83 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 C_b_llist_fun$ )(?v4 A_llist_a_llist_fun$ )(?v5 B_llist_a_llist_fun$ ))(=> (and (= (fun_app$l (comp$a ?v0 )?v1 )(fun_app$l (comp$a ?v2 )?v3 ))(= (fun_app$bp (comp$aa ?v4 )?v2 )?v5 ))(= (fun_app$l (comp$a (fun_app$bp (comp$aa ?v4 )?v0 ))?v1 )(fun_app$l (comp$a ?v5 )?v3 )))):named a84 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 C_b_fun$ )(?v5 C_b_fun$ ))(=> (and (= (fun_app$ab (comp$j ?v0 )?v1 )(fun_app$ar (comp$s ?v2 )?v3 ))(= (fun_app$n (comp$c ?v3 )?v4 )?v5 ))(= (fun_app$r (comp$g ?v0 )(fun_app$k (comp$ ?v1 )?v4 ))(fun_app$k (comp$ ?v2 )?v5 )))):named a85 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 C_b_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$ar (comp$s ?v0 )?v1 )(fun_app$ab (comp$j ?v2 )?v3 ))(= (fun_app$k (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$k (comp$ ?v0 )(fun_app$n (comp$c ?v1 )?v4 ))(fun_app$r (comp$g ?v2 )?v5 )))):named a86 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ )(?v4 C_c_fun$ )(?v5 C_b_fun$ ))(=> (and (= (fun_app$k (comp$ ?v0 )?v1 )(fun_app$k (comp$ ?v2 )?v3 ))(= (fun_app$ah (comp$l ?v3 )?v4 )?v5 ))(= (fun_app$k (comp$ ?v0 )(fun_app$ah (comp$l ?v1 )?v4 ))(fun_app$k (comp$ ?v2 )?v5 )))):named a87 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 B_a_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 B_b_llist_fun$ )(?v4 C_b_fun$ )(?v5 C_b_llist_fun$ ))(=> (and (= (fun_app$ak (comp$p ?v0 )?v1 )(fun_app$by (comp$aj ?v2 )?v3 ))(= (fun_app$am (comp$r ?v3 )?v4 )?v5 ))(= (fun_app$ay (comp$x ?v0 )(fun_app$k (comp$ ?v1 )?v4 ))(fun_app$l (comp$a ?v2 )?v5 )))):named a88 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_a_fun$ )(?v3 B_llist_b_fun$ )(?v4 C_b_llist_fun$ )(?v5 C_b_fun$ ))(=> (and (= (fun_app$bw (comp$ah ?v0 )?v1 )(fun_app$bz (comp$ak ?v2 )?v3 ))(= (fun_app$ca (comp$al ?v3 )?v4 )?v5 ))(= (fun_app$cb (comp$am ?v0 )(fun_app$l (comp$a ?v1 )?v4 ))(fun_app$k (comp$ ?v2 )?v5 )))):named a89 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_b_llist_fun$ )(?v2 A_a_llist_fun$ )(?v3 B_a_fun$ )(?v4 C_b_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$by (comp$aj ?v0 )?v1 )(fun_app$ak (comp$p ?v2 )?v3 ))(= (fun_app$k (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$l (comp$a ?v0 )(fun_app$am (comp$r ?v1 )?v4 ))(fun_app$ay (comp$x ?v2 )?v5 )))):named a90 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist_b_fun$ )(?v2 A_llist_a_fun$ )(?v3 B_llist_a_llist_fun$ )(?v4 C_b_llist_fun$ )(?v5 C_a_llist_fun$ ))(=> (and (= (fun_app$bz (comp$ak ?v0 )?v1 )(fun_app$bw (comp$ah ?v2 )?v3 ))(= (fun_app$l (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$k (comp$ ?v0 )(fun_app$ca (comp$al ?v1 )?v4 ))(fun_app$cb (comp$am ?v2 )?v5 )))):named a91 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 C_b_llist_fun$ )(?v4 C_c_fun$ )(?v5 C_b_llist_fun$ ))(=> (and (= (fun_app$l (comp$a ?v0 )?v1 )(fun_app$l (comp$a ?v2 )?v3 ))(= (fun_app$b (comp$y ?v3 )?v4 )?v5 ))(= (fun_app$l (comp$a ?v0 )(fun_app$b (comp$y ?v1 )?v4 ))(fun_app$l (comp$a ?v2 )?v5 )))):named a92 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 B_llist_b_llist_fun$ )(?v4 C_b_llist_fun$ )(?v5 C_b_llist_fun$ ))(=> (and (= (fun_app$bp (comp$aa ?v0 )?v1 )(fun_app$bq (comp$ab ?v2 )?v3 ))(= (fun_app$m (comp$b ?v3 )?v4 )?v5 ))(= (fun_app$q (comp$f ?v0 )(fun_app$l (comp$a ?v1 )?v4 ))(fun_app$l (comp$a ?v2 )?v5 )))):named a93 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 B_llist_a_llist_fun$ )(?v4 C_b_llist_fun$ )(?v5 C_a_llist_fun$ ))(=> (and (= (fun_app$bq (comp$ab ?v0 )?v1 )(fun_app$bp (comp$aa ?v2 )?v3 ))(= (fun_app$l (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$l (comp$a ?v0 )(fun_app$m (comp$b ?v1 )?v4 ))(fun_app$q (comp$f ?v2 )?v5 )))):named a94 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ )(?v4 C$ ))(=> (= (fun_app$k (comp$ ?v0 )?v1 )(fun_app$k (comp$ ?v2 )?v3 ))(= (fun_app$bc ?v0 (fun_app$bd ?v1 ?v4 ))(fun_app$bc ?v2 (fun_app$bd ?v3 ?v4 ))))):named a95 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 C_b_llist_fun$ )(?v4 C$ ))(=> (= (fun_app$l (comp$a ?v0 )?v1 )(fun_app$l (comp$a ?v2 )?v3 ))(= (fun_app$ ?v0 (fun_app$a ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$a ?v3 ?v4 ))))):named a96 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ )(?v4 C$ ))(=> (= (fun_app$k (comp$ ?v0 )?v1 )(fun_app$r (comp$g ?v2 )?v3 ))(= (fun_app$bc ?v0 (fun_app$bd ?v1 ?v4 ))(fun_app$bf ?v2 (fun_app$ba ?v3 ?v4 ))))):named a97 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 C_a_fun$ )(?v2 A_b_fun$ )(?v3 C_a_fun$ )(?v4 C$ ))(=> (= (fun_app$p (comp$e ?v0 )?v1 )(fun_app$p (comp$e ?v2 )?v3 ))(= (fun_app$be ?v0 (fun_app$ba ?v1 ?v4 ))(fun_app$be ?v2 (fun_app$ba ?v3 ?v4 ))))):named a98 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ )(?v4 C$ ))(=> (= (fun_app$r (comp$g ?v0 )?v1 )(fun_app$k (comp$ ?v2 )?v3 ))(= (fun_app$bf ?v0 (fun_app$ba ?v1 ?v4 ))(fun_app$bc ?v2 (fun_app$bd ?v3 ?v4 ))))):named a99 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ )(?v4 C$ ))(=> (= (fun_app$r (comp$g ?v0 )?v1 )(fun_app$r (comp$g ?v2 )?v3 ))(= (fun_app$bf ?v0 (fun_app$ba ?v1 ?v4 ))(fun_app$bf ?v2 (fun_app$ba ?v3 ?v4 ))))):named a100 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 B$ ))(=> (= (fun_app$ab (comp$j ?v0 )?v1 )(fun_app$ab (comp$j ?v2 )?v3 ))(= (fun_app$bf ?v0 (fun_app$bc ?v1 ?v4 ))(fun_app$bf ?v2 (fun_app$bc ?v3 ?v4 ))))):named a101 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 C_a_fun$ )(?v2 A_a_llist_fun$ )(?v3 C_a_fun$ )(?v4 C$ ))(=> (= (fun_app$ay (comp$x ?v0 )?v1 )(fun_app$ay (comp$x ?v2 )?v3 ))(= (fun_app$az ?v0 (fun_app$ba ?v1 ?v4 ))(fun_app$az ?v2 (fun_app$ba ?v3 ?v4 ))))):named a102 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 B_a_fun$ )(?v2 A_a_llist_fun$ )(?v3 B_a_fun$ )(?v4 B$ ))(=> (= (fun_app$ak (comp$p ?v0 )?v1 )(fun_app$ak (comp$p ?v2 )?v3 ))(= (fun_app$az ?v0 (fun_app$bc ?v1 ?v4 ))(fun_app$az ?v2 (fun_app$bc ?v3 ?v4 ))))):named a103 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 A_a_llist_fun$ )(?v3 C_a_fun$ )(?v4 C$ ))(=> (= (fun_app$l (comp$a ?v0 )?v1 )(fun_app$ay (comp$x ?v2 )?v3 ))(= (fun_app$ ?v0 (fun_app$a ?v1 ?v4 ))(fun_app$az ?v2 (fun_app$ba ?v3 ?v4 ))))):named a104 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$r (comp$g ?v0 )?v1 )?v2 )(= (fun_app$r (comp$g (fun_app$cc (comp$an ?v3 )?v0 ))?v1 )(fun_app$r (comp$g ?v3 )?v2 )))):named a105 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 A_a_llist_fun$ ))(=> (= (fun_app$ab (comp$j ?v0 )?v1 )?v2 )(= (fun_app$ak (comp$p (fun_app$cd (comp$ao ?v3 )?v0 ))?v1 )(fun_app$ak (comp$p ?v3 )?v2 )))):named a106 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$ab (comp$j ?v0 )?v1 )?v2 )(= (fun_app$ab (comp$j (fun_app$cc (comp$an ?v3 )?v0 ))?v1 )(fun_app$ab (comp$j ?v3 )?v2 )))):named a107 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 C_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$ah (comp$l ?v0 )?v1 )?v2 )(= (fun_app$aj (comp$n (fun_app$k (comp$ ?v3 )?v0 ))?v1 )(fun_app$k (comp$ ?v3 )?v2 )))):named a108 ))
(assert (! (forall ((?v0 C_b_llist_fun$ )(?v1 C_c_fun$ )(?v2 C_b_llist_fun$ )(?v3 B_llist_a_llist_fun$ ))(=> (= (fun_app$b (comp$y ?v0 )?v1 )?v2 )(= (fun_app$g (comp$z (fun_app$l (comp$a ?v3 )?v0 ))?v1 )(fun_app$l (comp$a ?v3 )?v2 )))):named a109 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$n (comp$c ?v0 )?v1 )?v2 )(= (fun_app$k (comp$ (fun_app$ar (comp$s ?v3 )?v0 ))?v1 )(fun_app$k (comp$ ?v3 )?v2 )))):named a110 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 C_b_llist_fun$ )(?v3 B_llist_a_llist_fun$ ))(=> (= (fun_app$m (comp$b ?v0 )?v1 )?v2 )(= (fun_app$l (comp$a (fun_app$bq (comp$ab ?v3 )?v0 ))?v1 )(fun_app$l (comp$a ?v3 )?v2 )))):named a111 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$k (comp$ ?v0 )?v1 )?v2 )(= (fun_app$k (comp$ (fun_app$ab (comp$j ?v3 )?v0 ))?v1 )(fun_app$r (comp$g ?v3 )?v2 )))):named a112 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 C_a_llist_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (= (fun_app$l (comp$a ?v0 )?v1 )?v2 )(= (fun_app$l (comp$a (fun_app$bp (comp$aa ?v3 )?v0 ))?v1 )(fun_app$q (comp$f ?v3 )?v2 )))):named a113 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ ))(=> (= (fun_app$ab (comp$j ?v0 )?v1 )?v2 )(= (fun_app$r (comp$g ?v0 )(fun_app$k (comp$ ?v1 )?v3 ))(fun_app$k (comp$ ?v2 )?v3 )))):named a114 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 C_b_llist_fun$ ))(=> (= (fun_app$bp (comp$aa ?v0 )?v1 )?v2 )(= (fun_app$q (comp$f ?v0 )(fun_app$l (comp$a ?v1 )?v3 ))(fun_app$l (comp$a ?v2 )?v3 )))):named a115 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ ))(=> (= (fun_app$ar (comp$s ?v0 )?v1 )?v2 )(= (fun_app$k (comp$ ?v0 )(fun_app$n (comp$c ?v1 )?v3 ))(fun_app$k (comp$ ?v2 )?v3 )))):named a116 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 C_b_llist_fun$ ))(=> (= (fun_app$bq (comp$ab ?v0 )?v1 )?v2 )(= (fun_app$l (comp$a ?v0 )(fun_app$m (comp$b ?v1 )?v3 ))(fun_app$l (comp$a ?v2 )?v3 )))):named a117 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ ))(=> (= (fun_app$k (comp$ ?v0 )?v1 )?v2 )(= (fun_app$k (comp$ ?v0 )(fun_app$ah (comp$l ?v1 )?v3 ))(fun_app$aj (comp$n ?v2 )?v3 )))):named a118 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 C_a_llist_fun$ )(?v3 C_c_fun$ ))(=> (= (fun_app$l (comp$a ?v0 )?v1 )?v2 )(= (fun_app$l (comp$a ?v0 )(fun_app$b (comp$y ?v1 )?v3 ))(fun_app$g (comp$z ?v2 )?v3 )))):named a119 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 C$ ))(=> (= (fun_app$k (comp$ ?v0 )?v1 )?v2 )(= (fun_app$bc ?v0 (fun_app$bd ?v1 ?v3 ))(fun_app$ba ?v2 ?v3 )))):named a120 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 C_a_llist_fun$ )(?v3 C$ ))(=> (= (fun_app$l (comp$a ?v0 )?v1 )?v2 )(= (fun_app$ ?v0 (fun_app$a ?v1 ?v3 ))(fun_app$f ?v2 ?v3 )))):named a121 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C$ )(?v3 B_a_fun$ )(?v4 C_b_fun$ )(?v5 C$ ))(=> (= (fun_app$bc ?v0 (fun_app$bd ?v1 ?v2 ))(fun_app$bc ?v3 (fun_app$bd ?v4 ?v5 )))(= (fun_app$ba (fun_app$k (comp$ ?v0 )?v1 )?v2 )(fun_app$ba (fun_app$k (comp$ ?v3 )?v4 )?v5 )))):named a122 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 C$ )(?v3 B_llist_a_llist_fun$ )(?v4 C_b_llist_fun$ )(?v5 C$ ))(=> (= (fun_app$ ?v0 (fun_app$a ?v1 ?v2 ))(fun_app$ ?v3 (fun_app$a ?v4 ?v5 )))(= (fun_app$f (fun_app$l (comp$a ?v0 )?v1 )?v2 )(fun_app$f (fun_app$l (comp$a ?v3 )?v4 )?v5 )))):named a123 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C$ )(?v3 B_a_fun$ )(?v4 C_b_fun$ ))(=> (= (fun_app$bc ?v0 (fun_app$bd ?v1 ?v2 ))(fun_app$bc ?v3 (fun_app$bd ?v4 ?v2 )))(= (fun_app$ba (fun_app$k (comp$ ?v0 )?v1 )?v2 )(fun_app$ba (fun_app$k (comp$ ?v3 )?v4 )?v2 )))):named a124 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 C$ )(?v3 B_llist_a_llist_fun$ )(?v4 C_b_llist_fun$ ))(=> (= (fun_app$ ?v0 (fun_app$a ?v1 ?v2 ))(fun_app$ ?v3 (fun_app$a ?v4 ?v2 )))(= (fun_app$f (fun_app$l (comp$a ?v0 )?v1 )?v2 )(fun_app$f (fun_app$l (comp$a ?v3 )?v4 )?v2 )))):named a125 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 C$ )(?v3 B_b_fun$ )(?v4 C_b_fun$ )(?v5 B_a_fun$ ))(=> (= (fun_app$bd ?v0 (fun_app$ce ?v1 ?v2 ))(fun_app$cf ?v3 (fun_app$bd ?v4 ?v2 )))(= (fun_app$ba (fun_app$aj (comp$n (fun_app$k (comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$ba (fun_app$k (comp$ (fun_app$ar (comp$s ?v5 )?v3 ))?v4 )?v2 )))):named a126 ))
(assert (! (forall ((?v0 C_b_llist_fun$ )(?v1 C_c_fun$ )(?v2 C$ )(?v3 B_llist_b_llist_fun$ )(?v4 C_b_llist_fun$ )(?v5 B_llist_a_llist_fun$ ))(=> (= (fun_app$a ?v0 (fun_app$ce ?v1 ?v2 ))(fun_app$aq ?v3 (fun_app$a ?v4 ?v2 )))(= (fun_app$f (fun_app$g (comp$z (fun_app$l (comp$a ?v5 )?v0 ))?v1 )?v2 )(fun_app$f (fun_app$l (comp$a (fun_app$bq (comp$ab ?v5 )?v3 ))?v4 )?v2 )))):named a127 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C$ )(?v3 C_b_fun$ )(?v4 C_c_fun$ )(?v5 B_a_fun$ ))(=> (= (fun_app$cf ?v0 (fun_app$bd ?v1 ?v2 ))(fun_app$bd ?v3 (fun_app$ce ?v4 ?v2 )))(= (fun_app$ba (fun_app$k (comp$ (fun_app$ar (comp$s ?v5 )?v0 ))?v1 )?v2 )(fun_app$ba (fun_app$aj (comp$n (fun_app$k (comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a128 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 C_b_llist_fun$ )(?v2 C$ )(?v3 C_b_llist_fun$ )(?v4 C_c_fun$ )(?v5 B_llist_a_llist_fun$ ))(=> (= (fun_app$aq ?v0 (fun_app$a ?v1 ?v2 ))(fun_app$a ?v3 (fun_app$ce ?v4 ?v2 )))(= (fun_app$f (fun_app$l (comp$a (fun_app$bq (comp$ab ?v5 )?v0 ))?v1 )?v2 )(fun_app$f (fun_app$g (comp$z (fun_app$l (comp$a ?v5 )?v3 ))?v4 )?v2 )))):named a129 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$ (fun_app$ (lmap$ ?v0 )?v1 ))(fun_app$ (lmap$ ?v0 )(ltl$a ?v1 )))):named a130 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_b_fun$ )(?v2 C_bool_fun$ )(?v3 C_b_llist_fun$ )(?v4 C_c_fun$ )(?v5 C$ ))(= (lnull$ (fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v1 )?v2 )?v3 )?v4 )?v5 ))(fun_app$cg ?v0 ?v5 ))):named a131 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_a_fun$ )(?v2 C_bool_fun$ )(?v3 C_a_llist_fun$ )(?v4 C_c_fun$ )(?v5 C$ ))(= (lnull$a (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_llist$a ?v0 )?v1 )?v2 )?v3 )?v4 )?v5 ))(fun_app$cg ?v0 ?v5 ))):named a132 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_b_fun$ )(?v2 C_bool_fun$ )(?v3 C_b_llist_fun$ )(?v4 C_c_fun$ )(?v5 C$ ))(= (not (lnull$ (fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v1 )?v2 )?v3 )?v4 )?v5 )))(not (fun_app$cg ?v0 ?v5 )))):named a133 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_a_fun$ )(?v2 C_bool_fun$ )(?v3 C_a_llist_fun$ )(?v4 C_c_fun$ )(?v5 C$ ))(= (not (lnull$a (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_llist$a ?v0 )?v1 )?v2 )?v3 )?v4 )?v5 )))(not (fun_app$cg ?v0 ?v5 )))):named a134 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_b_fun$ )(?v3 C_bool_fun$ )(?v4 C_b_llist_fun$ )(?v5 C_c_fun$ ))(=> (not (fun_app$cg ?v0 ?v1 ))(= (lhd$a (fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 ))(fun_app$bd ?v2 ?v1 )))):named a135 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_a_fun$ )(?v3 C_bool_fun$ )(?v4 C_a_llist_fun$ )(?v5 C_c_fun$ ))(=> (not (fun_app$cg ?v0 ?v1 ))(= (lhd$ (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_llist$a ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 ))(fun_app$ba ?v2 ?v1 )))):named a136 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$a (fun_app$ (lmap$ ?v0 )?v1 ))(lnull$ ?v1 ))):named a137 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_a_fun$ ))(=> (not (lnull$ ?v0 ))(= (lhd$ (fun_app$ (lmap$ ?v1 )?v0 ))(fun_app$bc ?v1 (lhd$a ?v0 ))))):named a138 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_a_fun$ ))(=> (not (lnull$ ?v0 ))(= (ltl$ (fun_app$ (lmap$ ?v1 )?v0 ))(fun_app$ (lmap$ ?v1 )(ltl$a ?v0 ))))):named a139 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_b_fun$ )(?v3 C_bool_fun$ )(?v4 C_b_llist_fun$ )(?v5 C_c_fun$ ))(=> (not (fun_app$cg ?v0 ?v1 ))(not (lnull$ (fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 ))))):named a140 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_a_fun$ )(?v3 C_bool_fun$ )(?v4 C_a_llist_fun$ )(?v5 C_c_fun$ ))(=> (not (fun_app$cg ?v0 ?v1 ))(not (lnull$a (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_llist$a ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 ))))):named a141 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_b_fun$ )(?v3 C_bool_fun$ )(?v4 C_b_llist_fun$ )(?v5 C_c_fun$ ))(=> (fun_app$cg ?v0 ?v1 )(lnull$ (fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 )))):named a142 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_a_fun$ )(?v3 C_bool_fun$ )(?v4 C_a_llist_fun$ )(?v5 C_c_fun$ ))(=> (fun_app$cg ?v0 ?v1 )(lnull$a (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_llist$a ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 )))):named a143 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_b_fun$ )(?v3 C_bool_fun$ )(?v4 C_b_llist_fun$ )(?v5 C_c_fun$ ))(=> (not (fun_app$cg ?v0 ?v1 ))(= (ltl$a (fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 ))(ite (fun_app$cg ?v3 ?v1 )(fun_app$a ?v4 ?v1 )(fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )(fun_app$ce ?v5 ?v1 )))))):named a144 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_a_fun$ )(?v3 C_bool_fun$ )(?v4 C_a_llist_fun$ )(?v5 C_c_fun$ ))(=> (not (fun_app$cg ?v0 ?v1 ))(= (ltl$ (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_llist$a ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 ))(ite (fun_app$cg ?v3 ?v1 )(fun_app$f ?v4 ?v1 )(fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_llist$a ?v0 )?v2 )?v3 )?v4 )?v5 )(fun_app$ce ?v5 ?v1 )))))):named a145 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ ))(= (fun_app$ch (comp$ap (fun_app$ci (map_fun$ ?v0 )?v1 ))(fun_app$cj (map_fun$a ?v2 )?v3 ))(fun_app$ck (map_fun$b (fun_app$k (comp$ ?v2 )?v0 ))(fun_app$k (comp$ ?v1 )?v3 )))):named a146 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_a_fun$ )(?v3 C_b_llist_fun$ ))(= (fun_app$cl (comp$aq (fun_app$cm (map_fun$c ?v0 )?v1 ))(fun_app$cn (map_fun$d ?v2 )?v3 ))(fun_app$co (map_fun$e (fun_app$k (comp$ ?v2 )?v0 ))(fun_app$l (comp$a ?v1 )?v3 )))):named a147 ))
(assert (! (forall ((?v0 C_b_llist_fun$ )(?v1 B_a_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 C_b_fun$ ))(= (fun_app$cp (comp$ar (fun_app$cq (map_fun$f ?v0 )?v1 ))(fun_app$cr (map_fun$g ?v2 )?v3 ))(fun_app$cs (map_fun$h (fun_app$l (comp$a ?v2 )?v0 ))(fun_app$k (comp$ ?v1 )?v3 )))):named a148 ))
(assert (! (forall ((?v0 C_b_llist_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 C_b_llist_fun$ ))(= (fun_app$ct (comp$as (fun_app$cu (map_fun$i ?v0 )?v1 ))(fun_app$cv (map_fun$j ?v2 )?v3 ))(fun_app$cw (map_fun$k (fun_app$l (comp$a ?v2 )?v0 ))(fun_app$l (comp$a ?v1 )?v3 )))):named a149 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (comp$at (convol$ ?v0 ?v1 )?v2 )(convol$a (fun_app$k (comp$ ?v0 )?v2 )(fun_app$k (comp$ ?v1 )?v2 )))):named a150 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 C_b_llist_fun$ ))(= (comp$au (convol$b ?v0 ?v1 )?v2 )(convol$c (fun_app$l (comp$a ?v0 )?v2 )(fun_app$l (comp$a ?v1 )?v2 )))):named a151 ))
(check-sat )
;(get-unsat-core )
