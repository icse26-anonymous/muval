;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Natural$ 0 )
(declare-sort Bool_nat_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort Nat_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-fun nibble0$ ()Nibble$)
(declare-fun nibble1$ ()Nibble$)
(declare-fun nibble2$ ()Nibble$)
(declare-fun nibble3$ ()Nibble$)
(declare-fun nibble4$ ()Nibble$)
(declare-fun nibble5$ ()Nibble$)
(declare-fun nibble6$ ()Nibble$)
(declare-fun nibble7$ ()Nibble$)
(declare-fun nibble8$ ()Nibble$)
(declare-fun nibble9$ ()Nibble$)
(declare-fun nibbleA$ ()Nibble$)
(declare-fun nibbleB$ ()Nibble$)
(declare-fun nibbleC$ ()Nibble$)
(declare-fun nibbleD$ ()Nibble$)
(declare-fun nibbleE$ ()Nibble$)
(declare-fun nibbleF$ ()Nibble$)
(declare-fun select$ (Char$)Nibble$)
(declare-fun selecta$ (Char$)Nibble$)
(declare-fun char$ (Nibble$ Nibble$ )Char$)
(declare-fun f$ ()A_a_fun$ )
(declare-fun xa$ ()A$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun zero$ ()Nat$ )
(declare-fun zero$a ()Natural$ )
(declare-fun compow$ ()Nat_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun funpow$ ()Nat_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun fun_app$a (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$b (Nat_a_a_fun_a_a_fun_fun_fun$ Nat$ )A_a_fun_a_a_fun_fun$ )
(declare-fun fun_app$c (Bool_nat_fun$ Bool )Nat$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun rec_bool$ (Nat$ Nat$ )Bool_nat_fun$ )
(declare-fun size_bool$ ()Bool_nat_fun$ )
(declare-fun size_char$ (Char$ )Nat$ )
(declare-fun size_natural$ (Natural$ )Nat$ )
(assert (! (not (= (lnth$ (iterates$ f$ xa$ )zero$ )(fun_app$ (fun_app$a (fun_app$b compow$ zero$ )f$ )xa$ ))):named a0 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 Nat$ )(?v2 A$ ))(= (fun_app$ ?v0 (fun_app$ (fun_app$a (fun_app$b compow$ ?v1 )?v0 )?v2 ))(fun_app$ (fun_app$a (fun_app$b compow$ ?v1 )?v0 )(fun_app$ ?v0 ?v2 )))):named a1 ))
(assert (! (= zero$ zero$ ):named a2 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a4 ))
(assert (! (forall ((?v0 Natural$ ))(= (= zero$a ?v0 )(= ?v0 zero$a ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (ldropn$ ?v0 (iterates$ ?v1 ?v2 ))(iterates$ ?v1 (fun_app$ (fun_app$a (fun_app$b compow$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lnth$ (lCons$ ?v0 ?v1 )zero$ )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a8 ))
(assert (! (= funpow$ compow$ ):named a9 ))
(assert (! (= (fun_app$c size_bool$ true )zero$ ):named a10 ))
(assert (! (= (fun_app$c size_bool$ false )zero$ ):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (ldropn$ zero$ ?v0 )?v0 ):pattern ((ldropn$ zero$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (iterates$ ?v0 ?v1 )(lCons$ ?v1 (iterates$ ?v0 (fun_app$ ?v0 ?v1 ))))):named a14 ))
(assert (! (= size_bool$ (rec_bool$ zero$ zero$ )):named a15 ))
(assert (! (= (size_natural$ zero$a )zero$ ):named a16 ))
(check-sat )
;(get-unsat-core )
