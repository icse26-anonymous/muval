;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_list_set$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun a$ ()A$ )
(declare-fun na$ ()Nat$ )
(declare-fun nth$ (A_list$ Nat$ )A$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_list$ )
(declare-fun drop$ (Nat$ A_list$ )A_list$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun zero$ ()Nat$ )
(declare-fun shift$ (A_list_set$ A$ )A_list_set$ )
(declare-fun member$ (A_list$ A$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun member$a (A_list$ A_list_set$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(assert (! (not (= (lnth$ (llist_of$ (cons$ a$ xsa$ ))na$ )(nth$ (cons$ a$ xsa$ )na$ ))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(= (lnth$ (llist_of$ xsa$ )?v0 )(nth$ xsa$ ?v0 ))):named a1 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(not (= (cons$ ?v0 ?v1 )?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a5 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ )(?v2 A_llist$ ))(= (= (llist_of$ ?v0 )(lCons$ ?v1 ?v2 ))(exists ((?v3 A_list$ ))(and (= ?v0 (cons$ ?v1 ?v3 ))(= ?v2 (llist_of$ ?v3 )))))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (llist_of$ (cons$ ?v0 ?v1 ))(lCons$ ?v0 (llist_of$ ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (nth$ (cons$ ?v0 ?v1 )zero$ )?v0 ):pattern ((cons$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 Nat$ ))(! (= (nth$ (cons$ ?v0 ?v1 )(suc$ ?v2 ))(nth$ ?v1 ?v2 )):pattern ((nth$ (cons$ ?v0 ?v1 )(suc$ ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(=> (= (drop$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(= (nth$ ?v1 ?v0 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ ))(! (= (member$ (cons$ ?v0 ?v1 )?v2 )(or (= ?v0 ?v2 )(member$ ?v1 ?v2 ))):pattern ((member$ (cons$ ?v0 ?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_set$ )(?v2 A$ ))(=> (member$a ?v0 (shift$ ?v1 ?v2 ))(member$a (cons$ ?v2 ?v0 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (drop$ zero$ ?v0 )?v0 ):pattern ((drop$ zero$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a16 ))
(check-sat )
;(get-unsat-core )
