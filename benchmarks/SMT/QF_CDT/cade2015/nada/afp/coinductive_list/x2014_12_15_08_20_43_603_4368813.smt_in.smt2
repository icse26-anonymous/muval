;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort B_llist$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun f$ ()A_b_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun wfP$ (B_llist_b_llist_bool_fun_fun$ )Bool )
(declare-fun lmap$ (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun wfP$a (A_llist_a_llist_bool_fun_fun$ )Bool )
(declare-fun ldrop$ (Enat$ B_llist$ )B_llist$ )
(declare-fun lmap$a (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$b (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$c (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lnull$ (B_llist$ )Bool )
(declare-fun ltake$ (Enat$ B_llist$ )B_llist$ )
(declare-fun ldrop$a (Enat$ A_llist$ )A_llist$ )
(declare-fun ldropn$ (Nat$ B_llist$ )B_llist$ )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun ltake$a (Enat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun ldropn$a (Nat$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (B_llist$ )Bool )
(declare-fun llength$ (B_llist$ )Enat$ )
(declare-fun lprefix$ (B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (A_a_fun$ A$ )A$ )
(declare-fun fun_app$e (B_b_fun$ B$ )B$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun llength$a (A_llist$ )Enat$ )
(declare-fun lprefix$a (A_llist$ )A_llist_bool_fun$ )
(declare-fun iterates$a (B_b_fun$ B$ )B_llist$ )
(declare-fun lstrict_prefix$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun lstrict_prefix$a ()A_llist_a_llist_bool_fun_fun$ )
(assert (! (not (fun_app$ (fun_app$a lstrict_prefix$ (lmap$ f$ xs$ ))(lmap$ f$ ys$ ))):named a0 ))
(assert (! (fun_app$b (fun_app$c lstrict_prefix$a xs$ )ys$ ):named a1 ))
(assert (! (forall ((?v0 B_llist_bool_fun$ )(?v1 B_llist$ ))(=> (forall ((?v2 B_llist$ ))(=> (forall ((?v3 B_llist$ ))(=> (fun_app$ (fun_app$a lstrict_prefix$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (forall ((?v2 A_llist$ ))(=> (forall ((?v3 A_llist$ ))(=> (fun_app$b (fun_app$c lstrict_prefix$a ?v3 )?v2 )(fun_app$b ?v0 ?v3 )))(fun_app$b ?v0 ?v2 )))(fun_app$b ?v0 ?v1 ))):named a3 ))
(assert (! (wfP$ lstrict_prefix$ ):named a4 ))
(assert (! (wfP$a lstrict_prefix$a ):named a5 ))
(assert (! (= (fun_app$ (fun_app$a lstrict_prefix$ lNil$ )lNil$ )false ):named a6 ))
(assert (! (= (fun_app$b (fun_app$c lstrict_prefix$a lNil$a )lNil$a )false ):named a7 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(! (= (fun_app$ (fun_app$a lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$ (fun_app$a lstrict_prefix$ ?v1 )?v3 ))):pattern ((fun_app$ (fun_app$a lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$b (fun_app$c lstrict_prefix$a (lCons$a ?v0 ?v1 ))(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$b (fun_app$c lstrict_prefix$a ?v1 )?v3 ))):pattern ((fun_app$b (fun_app$c lstrict_prefix$a (lCons$a ?v0 ?v1 ))(lCons$a ?v2 ?v3 ))))):named a9 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (lmap$a ?v0 (iterates$ ?v0 ?v1 ))(iterates$ ?v0 (fun_app$d ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (lmap$b ?v0 (iterates$a ?v0 ?v1 ))(iterates$a ?v0 (fun_app$e ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ldrop$ ?v0 (lmap$b ?v1 ?v2 ))(lmap$b ?v1 (ldrop$ ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ldrop$a ?v0 (lmap$c ?v1 ?v2 ))(lmap$c ?v1 (ldrop$ ?v0 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ldrop$a ?v0 (lmap$a ?v1 ?v2 ))(lmap$a ?v1 (ldrop$a ?v0 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ldrop$ ?v0 (lmap$ ?v1 ?v2 ))(lmap$ ?v1 (ldrop$a ?v0 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ldropn$ ?v0 (lmap$b ?v1 ?v2 ))(lmap$b ?v1 (ldropn$ ?v0 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ldropn$a ?v0 (lmap$c ?v1 ?v2 ))(lmap$c ?v1 (ldropn$ ?v0 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ldropn$a ?v0 (lmap$a ?v1 ?v2 ))(lmap$a ?v1 (ldropn$a ?v0 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ldropn$ ?v0 (lmap$ ?v1 ?v2 ))(lmap$ ?v1 (ldropn$a ?v0 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a lstrict_prefix$ ?v0 )?v1 )(and (fun_app$ (lprefix$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((fun_app$ (fun_app$a lstrict_prefix$ ?v0 )?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c lstrict_prefix$a ?v0 )?v1 )(and (fun_app$b (lprefix$a ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((fun_app$b (fun_app$c lstrict_prefix$a ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$ (lmap$b ?v0 ?v1 ))(lnull$ ?v1 ))):named a22 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$a (lmap$c ?v0 ?v1 ))(lnull$ ?v1 ))):named a23 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$a ?v0 ?v1 ))(lnull$a ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$ ?v0 ?v1 ))(lnull$a ?v1 ))):named a25 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$ (lmap$b ?v0 ?v1 ))(llength$ ?v1 ))):named a26 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$a (lmap$c ?v0 ?v1 ))(llength$ ?v1 ))):named a27 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$a ?v0 ?v1 ))(llength$a ?v1 ))):named a28 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$a ?v1 ))):named a29 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ltake$ ?v0 (lmap$b ?v1 ?v2 ))(lmap$b ?v1 (ltake$ ?v0 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ltake$a ?v0 (lmap$c ?v1 ?v2 ))(lmap$c ?v1 (ltake$ ?v0 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ltake$a ?v0 (lmap$a ?v1 ?v2 ))(lmap$a ?v1 (ltake$a ?v0 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ltake$ ?v0 (lmap$ ?v1 ?v2 ))(lmap$ ?v1 (ltake$a ?v0 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lfinite$ (lmap$b ?v0 ?v1 ))(lfinite$ ?v1 ))):named a34 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lfinite$a (lmap$c ?v0 ?v1 ))(lfinite$ ?v1 ))):named a35 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$a (lmap$a ?v0 ?v1 ))(lfinite$a ?v1 ))):named a36 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$ ?v0 ?v1 ))(lfinite$a ?v1 ))):named a37 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (fun_app$ (fun_app$a lstrict_prefix$ ?v0 )?v1 )(lfinite$ ?v0 ))):named a38 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (fun_app$b (fun_app$c lstrict_prefix$a ?v0 )?v1 )(lfinite$a ?v0 ))):named a39 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$b (lprefix$a ?v0 )?v0 )):named a40 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$ (lprefix$ ?v0 )?v0 )):named a41 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$b (lprefix$a ?v0 )?v0 )):named a42 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$ (lprefix$ ?v0 )?v0 )):named a43 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a44 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a45 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$b (lprefix$a (lCons$a ?v0 ?v1 ))(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$b (lprefix$a ?v1 )?v3 ))):pattern ((fun_app$b (lprefix$a (lCons$a ?v0 ?v1 ))(lCons$a ?v2 ?v3 ))))):named a46 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(! (= (fun_app$ (lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$ (lprefix$ ?v1 )?v3 ))):pattern ((fun_app$ (lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a47 ))
(check-sat )
;(get-unsat-core )
