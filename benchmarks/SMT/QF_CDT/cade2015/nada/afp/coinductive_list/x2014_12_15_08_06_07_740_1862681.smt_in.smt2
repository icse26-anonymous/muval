;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort C_a_llist_fun$ 0 )
(declare-sort C_b_llist_fun$ 0 )
(declare-sort B_a_a_prod_fun$ 0 )
(declare-sort C_a_a_prod_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort B_c_fun_b_a_fun_fun$ 0 )
(declare-sort B_c_fun_b_b_fun_fun$ 0 )
(declare-sort B_llist_a_llist_fun$ 0 )
(declare-sort C_a_fun_c_a_fun_fun$ 0 )
(declare-sort C_a_fun_c_b_fun_fun$ 0 )
(declare-sort C_b_fun_c_a_fun_fun$ 0 )
(declare-sort C_b_fun_c_b_fun_fun$ 0 )
(declare-sort C_c_fun_c_a_fun_fun$ 0 )
(declare-sort C_c_fun_c_b_fun_fun$ 0 )
(declare-sort C_c_fun_c_b_llist_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_a_prod_fun_fun$ 0 )
(declare-sort C_b_fun_c_c_fun_c_b_llist_fun_fun_fun$ 0 )
(declare-sort C_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun$ 0 )
(declare-sort C_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun$ 0 )
(declare-sort C_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-sort C_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun lNil$b ()C_llist$)
(declare-fun lhd$b (C_llist$)C$)
(declare-fun ltl$b (C_llist$)C_llist$)
(declare-fun lCons$b (C$ C_llist$ )C_llist$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$ (A_a_prod$)A$)
(declare-fun snd$ (A_a_prod$)A$)
(declare-fun pair$ (A$ A$ )A_a_prod$)
(declare-fun b$ ()C$ )
(declare-fun f$ ()B_a_fun$ )
(declare-fun comp$ (B_a_fun$ )C_b_fun_c_a_fun_fun$ )
(declare-fun lhd$c ()C_b_fun$ )
(declare-fun lmap$ (B_a_fun$ )B_llist_a_llist_fun$ )
(declare-fun ltl$c ()C_c_fun$ )
(declare-fun comp$a (A_a_fun$ )B_a_fun_b_a_fun_fun$ )
(declare-fun comp$b (B_a_fun$ )B_b_fun_b_a_fun_fun$ )
(declare-fun comp$c (A_b_fun$ )B_a_fun_b_b_fun_fun$ )
(declare-fun comp$d (A_b_fun$ )C_a_fun_c_b_fun_fun$ )
(declare-fun comp$e (B_a_fun$ )A_b_fun_a_a_fun_fun$ )
(declare-fun comp$f (B_b_fun$ )B_b_fun_b_b_fun_fun$ )
(declare-fun comp$g (B_b_fun$ )C_b_fun_c_b_fun_fun$ )
(declare-fun comp$h (C_b_fun$ )B_c_fun_b_b_fun_fun$ )
(declare-fun comp$i (C_b_fun$ )C_c_fun_c_b_fun_fun$ )
(declare-fun comp$j (B_a_a_prod_fun$ C_b_fun$ )C_a_a_prod_fun$ )
(declare-fun comp$k (A_a_fun$ )C_a_fun_c_a_fun_fun$ )
(declare-fun comp$l (C_a_fun$ )C_c_fun_c_a_fun_fun$ )
(declare-fun comp$m (C_a_fun$ )B_c_fun_b_a_fun_fun$ )
(declare-fun comp$n (A_b_fun$ )A_a_fun_a_b_fun_fun$ )
(declare-fun comp$o (B_b_fun$ )A_b_fun_a_b_fun_fun$ )
(declare-fun comp$p (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun comp$q (B_llist_a_llist_fun$ C_b_llist_fun$ )C_a_llist_fun$ )
(declare-fun lmap$a (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$b (C_b_fun$ C_llist$ )B_llist$ )
(declare-fun lmap$c (C_a_fun$ C_llist$ )A_llist$ )
(declare-fun lmap$d (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$e (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$f (B_c_fun$ B_llist$ )C_llist$ )
(declare-fun lmap$g (C_c_fun$ C_llist$ )C_llist$ )
(declare-fun lnull$ (B_llist$ )Bool )
(declare-fun convol$ (B_a_fun$ )B_a_fun_b_a_a_prod_fun_fun$ )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun convol$a (C_a_fun$ C_a_fun$ )C_a_a_prod_fun$ )
(declare-fun fun_app$ (B_llist_a_llist_fun$ B_llist$ )A_llist$ )
(declare-fun iS_LNIL$ ()C_bool_fun$ )
(declare-fun fun_app$a (C_b_llist_fun$ C$ )B_llist$ )
(declare-fun fun_app$b (C_c_fun_c_b_llist_fun_fun$ C_c_fun$ )C_b_llist_fun$ )
(declare-fun fun_app$c (C_b_fun_c_c_fun_c_b_llist_fun_fun_fun$ C_b_fun$ )C_c_fun_c_b_llist_fun_fun$ )
(declare-fun fun_app$d (C_b_fun_c_a_fun_fun$ C_b_fun$ )C_a_fun$ )
(declare-fun fun_app$e (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$f (B_b_fun_b_a_fun_fun$ B_b_fun$ )B_a_fun$ )
(declare-fun fun_app$g (B_a_fun_b_b_fun_fun$ B_a_fun$ )B_b_fun$ )
(declare-fun fun_app$h (C_a_fun_c_b_fun_fun$ C_a_fun$ )C_b_fun$ )
(declare-fun fun_app$i (A_b_fun_a_a_fun_fun$ A_b_fun$ )A_a_fun$ )
(declare-fun fun_app$j (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun$ )
(declare-fun fun_app$k (C_b_fun_c_b_fun_fun$ C_b_fun$ )C_b_fun$ )
(declare-fun fun_app$l (B_c_fun_b_b_fun_fun$ B_c_fun$ )B_b_fun$ )
(declare-fun fun_app$m (C_c_fun_c_b_fun_fun$ C_c_fun$ )C_b_fun$ )
(declare-fun fun_app$n (C_a_a_prod_fun$ C$ )A_a_prod$ )
(declare-fun fun_app$o (B_a_a_prod_fun$ B$ )A_a_prod$ )
(declare-fun fun_app$p (C_b_fun$ C$ )B$ )
(declare-fun fun_app$q (B_b_fun$ B$ )B$ )
(declare-fun fun_app$r (B_a_fun$ B$ )A$ )
(declare-fun fun_app$s (C_a_fun$ C$ )A$ )
(declare-fun fun_app$t (C_a_fun_c_a_fun_fun$ C_a_fun$ )C_a_fun$ )
(declare-fun fun_app$u (A_a_fun$ A$ )A$ )
(declare-fun fun_app$v (C_c_fun_c_a_fun_fun$ C_c_fun$ )C_a_fun$ )
(declare-fun fun_app$w (B_c_fun_b_a_fun_fun$ B_c_fun$ )B_a_fun$ )
(declare-fun fun_app$x (A_a_fun_a_b_fun_fun$ A_a_fun$ )A_b_fun$ )
(declare-fun fun_app$y (A_b_fun_a_b_fun_fun$ A_b_fun$ )A_b_fun$ )
(declare-fun fun_app$z (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$aa (C_c_fun$ C$ )C$ )
(declare-fun fun_app$ab (C_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun$ C_b_llist_fun$ )C_c_fun_c_b_llist_fun_fun$ )
(declare-fun fun_app$ac (C_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun$ C_bool_fun$ )C_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun$ )
(declare-fun fun_app$ad (C_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun$ C_b_fun$ )C_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun$ )
(declare-fun fun_app$ae (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$af (B_a_fun_b_a_a_prod_fun_fun$ B_a_fun$ )B_a_a_prod_fun$ )
(declare-fun corec_llist$ (C_bool_fun$ )C_b_fun_c_bool_fun_c_b_llist_fun_c_c_fun_c_b_llist_fun_fun_fun_fun_fun$ )
(declare-fun corec_llist$a (C_bool_fun$ C_a_fun$ C_bool_fun$ C_a_llist_fun$ C_c_fun$ )C_a_llist_fun$ )
(declare-fun unfold_llist$ (C_bool_fun$ )C_b_fun_c_c_fun_c_b_llist_fun_fun_fun$ )
(declare-fun unfold_llist$a (C_bool_fun$ C_a_fun$ C_c_fun$ C$ )A_llist$ )
(assert (! (not (= (fun_app$ (lmap$ f$ )(fun_app$a (fun_app$b (fun_app$c (unfold_llist$ iS_LNIL$ )lhd$c )ltl$c )b$ ))(unfold_llist$a iS_LNIL$ (fun_app$d (comp$ f$ )lhd$c )ltl$c b$ ))):named a0 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (lmap$a ?v0 (fun_app$ (lmap$ ?v1 )?v2 ))(fun_app$ (lmap$ (fun_app$e (comp$a ?v0 )?v1 ))?v2 ))):named a1 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_llist$ ))(= (fun_app$ (lmap$ ?v0 )(lmap$b ?v1 ?v2 ))(lmap$c (fun_app$d (comp$ ?v0 )?v1 )?v2 ))):named a2 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (fun_app$ (lmap$ ?v0 )(lmap$d ?v1 ?v2 ))(fun_app$ (lmap$ (fun_app$f (comp$b ?v0 )?v1 ))?v2 ))):named a3 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (lmap$e ?v0 (fun_app$ (lmap$ ?v1 )?v2 ))(lmap$d (fun_app$g (comp$c ?v0 )?v1 )?v2 ))):named a4 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 C_a_fun$ )(?v2 C_llist$ ))(= (lmap$e ?v0 (lmap$c ?v1 ?v2 ))(lmap$b (fun_app$h (comp$d ?v0 )?v1 )?v2 ))):named a5 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (fun_app$ (lmap$ ?v0 )(lmap$e ?v1 ?v2 ))(lmap$a (fun_app$i (comp$e ?v0 )?v1 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (lmap$d ?v0 (lmap$d ?v1 ?v2 ))(lmap$d (fun_app$j (comp$f ?v0 )?v1 )?v2 ))):named a7 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C_llist$ ))(= (lmap$d ?v0 (lmap$b ?v1 ?v2 ))(lmap$b (fun_app$k (comp$g ?v0 )?v1 )?v2 ))):named a8 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 B_c_fun$ )(?v2 B_llist$ ))(= (lmap$b ?v0 (lmap$f ?v1 ?v2 ))(lmap$d (fun_app$l (comp$h ?v0 )?v1 )?v2 ))):named a9 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 C_llist$ ))(= (lmap$b ?v0 (lmap$g ?v1 ?v2 ))(lmap$b (fun_app$m (comp$i ?v0 )?v1 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 C_b_fun$ )(?v2 C$ ))(! (= (fun_app$n (comp$j ?v0 ?v1 )?v2 )(fun_app$o ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$n (comp$j ?v0 ?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C$ ))(! (= (fun_app$p (fun_app$k (comp$g ?v0 )?v1 )?v2 )(fun_app$q ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$p (fun_app$k (comp$g ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$r (fun_app$f (comp$b ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$q ?v1 ?v2 ))):pattern ((fun_app$r (fun_app$f (comp$b ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$s (fun_app$t (comp$k ?v0 )?v1 )?v2 )(fun_app$u ?v0 (fun_app$s ?v1 ?v2 ))):pattern ((fun_app$s (fun_app$t (comp$k ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$r (fun_app$e (comp$a ?v0 )?v1 )?v2 )(fun_app$u ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$r (fun_app$e (comp$a ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C$ ))(! (= (fun_app$s (fun_app$d (comp$ ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$s (fun_app$d (comp$ ?v0 )?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (fun_app$t (comp$k ?v0 )(fun_app$d (comp$ ?v1 )?v2 ))(fun_app$d (comp$ (fun_app$e (comp$a ?v0 )?v1 ))?v2 ))):named a17 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_c_fun$ ))(= (fun_app$d (comp$ ?v0 )(fun_app$m (comp$i ?v1 )?v2 ))(fun_app$v (comp$l (fun_app$d (comp$ ?v0 )?v1 ))?v2 ))):named a18 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 C_b_fun$ ))(= (fun_app$d (comp$ ?v0 )(fun_app$k (comp$g ?v1 )?v2 ))(fun_app$d (comp$ (fun_app$f (comp$b ?v0 )?v1 ))?v2 ))):named a19 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (fun_app$h (comp$d ?v0 )(fun_app$d (comp$ ?v1 )?v2 ))(fun_app$k (comp$g (fun_app$g (comp$c ?v0 )?v1 ))?v2 ))):named a20 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 C_a_fun$ ))(= (fun_app$d (comp$ ?v0 )(fun_app$h (comp$d ?v1 )?v2 ))(fun_app$t (comp$k (fun_app$i (comp$e ?v0 )?v1 ))?v2 ))):named a21 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C_c_fun$ ))(= (fun_app$k (comp$g ?v0 )(fun_app$m (comp$i ?v1 )?v2 ))(fun_app$m (comp$i (fun_app$k (comp$g ?v0 )?v1 ))?v2 ))):named a22 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 C_b_fun$ ))(= (fun_app$k (comp$g ?v0 )(fun_app$k (comp$g ?v1 )?v2 ))(fun_app$k (comp$g (fun_app$j (comp$f ?v0 )?v1 ))?v2 ))):named a23 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_c_fun$ ))(= (fun_app$f (comp$b ?v0 )(fun_app$l (comp$h ?v1 )?v2 ))(fun_app$w (comp$m (fun_app$d (comp$ ?v0 )?v1 ))?v2 ))):named a24 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$f (comp$b ?v0 )(fun_app$j (comp$f ?v1 )?v2 ))(fun_app$f (comp$b (fun_app$f (comp$b ?v0 )?v1 ))?v2 ))):named a25 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 B_a_fun$ ))(= (fun_app$f (comp$b ?v0 )(fun_app$g (comp$c ?v1 )?v2 ))(fun_app$e (comp$a (fun_app$i (comp$e ?v0 )?v1 ))?v2 ))):named a26 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_c_fun$ ))(= (fun_app$v (comp$l (fun_app$d (comp$ ?v0 )?v1 ))?v2 )(fun_app$d (comp$ ?v0 )(fun_app$m (comp$i ?v1 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (fun_app$d (comp$ (fun_app$e (comp$a ?v0 )?v1 ))?v2 )(fun_app$t (comp$k ?v0 )(fun_app$d (comp$ ?v1 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 C_b_fun$ ))(= (fun_app$d (comp$ (fun_app$f (comp$b ?v0 )?v1 ))?v2 )(fun_app$d (comp$ ?v0 )(fun_app$k (comp$g ?v1 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_c_fun$ ))(= (fun_app$w (comp$m (fun_app$d (comp$ ?v0 )?v1 ))?v2 )(fun_app$f (comp$b ?v0 )(fun_app$l (comp$h ?v1 )?v2 )))):named a30 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C_c_fun$ ))(= (fun_app$m (comp$i (fun_app$k (comp$g ?v0 )?v1 ))?v2 )(fun_app$k (comp$g ?v0 )(fun_app$m (comp$i ?v1 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_c_fun$ ))(= (fun_app$v (comp$l (fun_app$t (comp$k ?v0 )?v1 ))?v2 )(fun_app$t (comp$k ?v0 )(fun_app$v (comp$l ?v1 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 B_c_fun$ ))(= (fun_app$w (comp$m (fun_app$t (comp$k ?v0 )?v1 ))?v2 )(fun_app$e (comp$a ?v0 )(fun_app$w (comp$m ?v1 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (fun_app$k (comp$g (fun_app$g (comp$c ?v0 )?v1 ))?v2 )(fun_app$h (comp$d ?v0 )(fun_app$d (comp$ ?v1 )?v2 )))):named a34 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 C_b_fun$ ))(= (fun_app$k (comp$g (fun_app$j (comp$f ?v0 )?v1 ))?v2 )(fun_app$k (comp$g ?v0 )(fun_app$k (comp$g ?v1 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$f (comp$b (fun_app$f (comp$b ?v0 )?v1 ))?v2 )(fun_app$f (comp$b ?v0 )(fun_app$j (comp$f ?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 C_b_fun$ )(?v2 C$ ))(! (= (fun_app$n (comp$j ?v0 ?v1 )?v2 )(fun_app$o ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$n (comp$j ?v0 ?v1 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C$ ))(! (= (fun_app$p (fun_app$k (comp$g ?v0 )?v1 )?v2 )(fun_app$q ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$p (fun_app$k (comp$g ?v0 )?v1 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$r (fun_app$f (comp$b ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$q ?v1 ?v2 ))):pattern ((fun_app$r (fun_app$f (comp$b ?v0 )?v1 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$s (fun_app$t (comp$k ?v0 )?v1 )?v2 )(fun_app$u ?v0 (fun_app$s ?v1 ?v2 ))):pattern ((fun_app$s (fun_app$t (comp$k ?v0 )?v1 )?v2 )))):named a40 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$r (fun_app$e (comp$a ?v0 )?v1 )?v2 )(fun_app$u ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$r (fun_app$e (comp$a ?v0 )?v1 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C$ ))(! (= (fun_app$s (fun_app$d (comp$ ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$s (fun_app$d (comp$ ?v0 )?v1 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (and (= (fun_app$d (comp$ ?v0 )?v1 )(fun_app$t (comp$k ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$r ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$u ?v2 (fun_app$s ?v3 ?v4 ))))false ))false )):named a43 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 C_b_fun$ )(?v2 B_a_a_prod_fun$ )(?v3 C_b_fun$ ))(=> (and (= (comp$j ?v0 ?v1 )(comp$j ?v2 ?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$o ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$o ?v2 (fun_app$p ?v3 ?v4 ))))false ))false )):named a44 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 B_b_fun$ )(?v3 C_b_fun$ ))(=> (and (= (fun_app$k (comp$g ?v0 )?v1 )(fun_app$k (comp$g ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$q ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$q ?v2 (fun_app$p ?v3 ?v4 ))))false ))false )):named a45 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$f (comp$b ?v0 )?v1 )(fun_app$f (comp$b ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$r ?v0 (fun_app$q ?v1 ?v4 ))(fun_app$r ?v2 (fun_app$q ?v3 ?v4 ))))false ))false )):named a46 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (and (= (fun_app$f (comp$b ?v0 )?v1 )(fun_app$e (comp$a ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$r ?v0 (fun_app$q ?v1 ?v4 ))(fun_app$u ?v2 (fun_app$r ?v3 ?v4 ))))false ))false )):named a47 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ ))(=> (and (= (fun_app$t (comp$k ?v0 )?v1 )(fun_app$d (comp$ ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$u ?v0 (fun_app$s ?v1 ?v4 ))(fun_app$r ?v2 (fun_app$p ?v3 ?v4 ))))false ))false )):named a48 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (and (= (fun_app$t (comp$k ?v0 )?v1 )(fun_app$t (comp$k ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$u ?v0 (fun_app$s ?v1 ?v4 ))(fun_app$u ?v2 (fun_app$s ?v3 ?v4 ))))false ))false )):named a49 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$e (comp$a ?v0 )?v1 )(fun_app$f (comp$b ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$u ?v0 (fun_app$r ?v1 ?v4 ))(fun_app$r ?v2 (fun_app$q ?v3 ?v4 ))))false ))false )):named a50 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (and (= (fun_app$e (comp$a ?v0 )?v1 )(fun_app$e (comp$a ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$u ?v0 (fun_app$r ?v1 ?v4 ))(fun_app$u ?v2 (fun_app$r ?v3 ?v4 ))))false ))false )):named a51 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ ))(=> (and (= (fun_app$d (comp$ ?v0 )?v1 )(fun_app$d (comp$ ?v2 )?v3 ))(=> (forall ((?v4 C$ ))(= (fun_app$r ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$r ?v2 (fun_app$p ?v3 ?v4 ))))false ))false )):named a52 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 B_b_fun$ )(?v3 C_b_fun$ )(?v4 B_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$m (comp$i ?v0 )?v1 )(fun_app$k (comp$g ?v2 )?v3 ))(= (fun_app$f (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$v (comp$l (fun_app$d (comp$ ?v4 )?v0 ))?v1 )(fun_app$d (comp$ ?v5 )?v3 )))):named a53 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C_b_fun$ )(?v3 C_c_fun$ )(?v4 B_a_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$k (comp$g ?v0 )?v1 )(fun_app$m (comp$i ?v2 )?v3 ))(= (fun_app$d (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$d (comp$ (fun_app$f (comp$b ?v4 )?v0 ))?v1 )(fun_app$v (comp$l ?v5 )?v3 )))):named a54 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ )(?v4 A_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$d (comp$ ?v0 )?v1 )(fun_app$d (comp$ ?v2 )?v3 ))(= (fun_app$e (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$d (comp$ (fun_app$e (comp$a ?v4 )?v0 ))?v1 )(fun_app$d (comp$ ?v5 )?v3 )))):named a55 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 A_b_fun$ )(?v3 C_a_fun$ )(?v4 B_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$m (comp$i ?v0 )?v1 )(fun_app$h (comp$d ?v2 )?v3 ))(= (fun_app$i (comp$e ?v4 )?v2 )?v5 ))(= (fun_app$v (comp$l (fun_app$d (comp$ ?v4 )?v0 ))?v1 )(fun_app$t (comp$k ?v5 )?v3 )))):named a56 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 B_c_fun$ )(?v2 A_b_fun$ )(?v3 B_a_fun$ )(?v4 B_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$l (comp$h ?v0 )?v1 )(fun_app$g (comp$c ?v2 )?v3 ))(= (fun_app$i (comp$e ?v4 )?v2 )?v5 ))(= (fun_app$w (comp$m (fun_app$d (comp$ ?v4 )?v0 ))?v1 )(fun_app$e (comp$a ?v5 )?v3 )))):named a57 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ )(?v3 B_a_fun$ )(?v4 B_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$j (comp$f ?v0 )?v1 )(fun_app$g (comp$c ?v2 )?v3 ))(= (fun_app$i (comp$e ?v4 )?v2 )?v5 ))(= (fun_app$f (comp$b (fun_app$f (comp$b ?v4 )?v0 ))?v1 )(fun_app$e (comp$a ?v5 )?v3 )))):named a58 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 C_b_fun$ )(?v3 B_c_fun$ )(?v4 B_a_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$j (comp$f ?v0 )?v1 )(fun_app$l (comp$h ?v2 )?v3 ))(= (fun_app$d (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$f (comp$b (fun_app$f (comp$b ?v4 )?v0 ))?v1 )(fun_app$w (comp$m ?v5 )?v3 )))):named a59 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 C_a_fun$ )(?v2 C_b_fun$ )(?v3 C_c_fun$ )(?v4 B_a_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$h (comp$d ?v0 )?v1 )(fun_app$m (comp$i ?v2 )?v3 ))(= (fun_app$d (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$t (comp$k (fun_app$i (comp$e ?v4 )?v0 ))?v1 )(fun_app$v (comp$l ?v5 )?v3 )))):named a60 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ )(?v3 B_c_fun$ )(?v4 B_a_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$g (comp$c ?v0 )?v1 )(fun_app$l (comp$h ?v2 )?v3 ))(= (fun_app$d (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$e (comp$a (fun_app$i (comp$e ?v4 )?v0 ))?v1 )(fun_app$w (comp$m ?v5 )?v3 )))):named a61 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 B_c_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$l (comp$h ?v0 )?v1 )(fun_app$j (comp$f ?v2 )?v3 ))(= (fun_app$f (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$w (comp$m (fun_app$d (comp$ ?v4 )?v0 ))?v1 )(fun_app$f (comp$b ?v5 )?v3 )))):named a62 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 C_b_fun$ )(?v5 C_b_fun$ ))(=> (and (= (fun_app$e (comp$a ?v0 )?v1 )(fun_app$f (comp$b ?v2 )?v3 ))(= (fun_app$k (comp$g ?v3 )?v4 )?v5 ))(= (fun_app$t (comp$k ?v0 )(fun_app$d (comp$ ?v1 )?v4 ))(fun_app$d (comp$ ?v2 )?v5 )))):named a63 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 C_b_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$f (comp$b ?v0 )?v1 )(fun_app$e (comp$a ?v2 )?v3 ))(= (fun_app$d (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$d (comp$ ?v0 )(fun_app$k (comp$g ?v1 )?v4 ))(fun_app$t (comp$k ?v2 )?v5 )))):named a64 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ )(?v4 C_c_fun$ )(?v5 C_b_fun$ ))(=> (and (= (fun_app$d (comp$ ?v0 )?v1 )(fun_app$d (comp$ ?v2 )?v3 ))(= (fun_app$m (comp$i ?v3 )?v4 )?v5 ))(= (fun_app$d (comp$ ?v0 )(fun_app$m (comp$i ?v1 )?v4 ))(fun_app$d (comp$ ?v2 )?v5 )))):named a65 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 C_a_fun$ )(?v5 C_b_fun$ ))(=> (and (= (fun_app$x (comp$n ?v0 )?v1 )(fun_app$y (comp$o ?v2 )?v3 ))(= (fun_app$h (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$h (comp$d ?v0 )(fun_app$t (comp$k ?v1 )?v4 ))(fun_app$k (comp$g ?v2 )?v5 )))):named a66 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 B_a_fun$ )(?v3 A_b_fun$ )(?v4 C_a_fun$ )(?v5 C_b_fun$ ))(=> (and (= (fun_app$z (comp$p ?v0 )?v1 )(fun_app$i (comp$e ?v2 )?v3 ))(= (fun_app$h (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$t (comp$k ?v0 )(fun_app$t (comp$k ?v1 )?v4 ))(fun_app$d (comp$ ?v2 )?v5 )))):named a67 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 B_a_fun$ )(?v3 A_b_fun$ )(?v4 B_a_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$z (comp$p ?v0 )?v1 )(fun_app$i (comp$e ?v2 )?v3 ))(= (fun_app$g (comp$c ?v3 )?v4 )?v5 ))(= (fun_app$e (comp$a ?v0 )(fun_app$e (comp$a ?v1 )?v4 ))(fun_app$f (comp$b ?v2 )?v5 )))):named a68 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ )(?v3 B_a_fun$ )(?v4 C_b_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$j (comp$f ?v0 )?v1 )(fun_app$g (comp$c ?v2 )?v3 ))(= (fun_app$d (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$k (comp$g ?v0 )(fun_app$k (comp$g ?v1 )?v4 ))(fun_app$h (comp$d ?v2 )?v5 )))):named a69 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 C_b_fun$ )(?v5 C_b_fun$ ))(=> (and (= (fun_app$g (comp$c ?v0 )?v1 )(fun_app$j (comp$f ?v2 )?v3 ))(= (fun_app$k (comp$g ?v3 )?v4 )?v5 ))(= (fun_app$h (comp$d ?v0 )(fun_app$d (comp$ ?v1 )?v4 ))(fun_app$k (comp$g ?v2 )?v5 )))):named a70 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 C_b_fun$ )(?v5 C_b_fun$ ))(=> (and (= (fun_app$j (comp$f ?v0 )?v1 )(fun_app$j (comp$f ?v2 )?v3 ))(= (fun_app$k (comp$g ?v3 )?v4 )?v5 ))(= (fun_app$k (comp$g ?v0 )(fun_app$k (comp$g ?v1 )?v4 ))(fun_app$k (comp$g ?v2 )?v5 )))):named a71 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 C_a_fun$ )(?v5 C_a_fun$ ))(=> (and (= (fun_app$i (comp$e ?v0 )?v1 )(fun_app$z (comp$p ?v2 )?v3 ))(= (fun_app$t (comp$k ?v3 )?v4 )?v5 ))(= (fun_app$d (comp$ ?v0 )(fun_app$h (comp$d ?v1 )?v4 ))(fun_app$t (comp$k ?v2 )?v5 )))):named a72 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ )(?v4 C$ ))(=> (= (fun_app$d (comp$ ?v0 )?v1 )(fun_app$t (comp$k ?v2 )?v3 ))(= (fun_app$r ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$u ?v2 (fun_app$s ?v3 ?v4 ))))):named a73 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 C_b_fun$ )(?v2 B_a_a_prod_fun$ )(?v3 C_b_fun$ )(?v4 C$ ))(=> (= (comp$j ?v0 ?v1 )(comp$j ?v2 ?v3 ))(= (fun_app$o ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$o ?v2 (fun_app$p ?v3 ?v4 ))))):named a74 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 B_b_fun$ )(?v3 C_b_fun$ )(?v4 C$ ))(=> (= (fun_app$k (comp$g ?v0 )?v1 )(fun_app$k (comp$g ?v2 )?v3 ))(= (fun_app$q ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$q ?v2 (fun_app$p ?v3 ?v4 ))))):named a75 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$f (comp$b ?v0 )?v1 )(fun_app$f (comp$b ?v2 )?v3 ))(= (fun_app$r ?v0 (fun_app$q ?v1 ?v4 ))(fun_app$r ?v2 (fun_app$q ?v3 ?v4 ))))):named a76 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 B$ ))(=> (= (fun_app$f (comp$b ?v0 )?v1 )(fun_app$e (comp$a ?v2 )?v3 ))(= (fun_app$r ?v0 (fun_app$q ?v1 ?v4 ))(fun_app$u ?v2 (fun_app$r ?v3 ?v4 ))))):named a77 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ )(?v4 C$ ))(=> (= (fun_app$t (comp$k ?v0 )?v1 )(fun_app$d (comp$ ?v2 )?v3 ))(= (fun_app$u ?v0 (fun_app$s ?v1 ?v4 ))(fun_app$r ?v2 (fun_app$p ?v3 ?v4 ))))):named a78 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ )(?v4 C$ ))(=> (= (fun_app$t (comp$k ?v0 )?v1 )(fun_app$t (comp$k ?v2 )?v3 ))(= (fun_app$u ?v0 (fun_app$s ?v1 ?v4 ))(fun_app$u ?v2 (fun_app$s ?v3 ?v4 ))))):named a79 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$e (comp$a ?v0 )?v1 )(fun_app$f (comp$b ?v2 )?v3 ))(= (fun_app$u ?v0 (fun_app$r ?v1 ?v4 ))(fun_app$r ?v2 (fun_app$q ?v3 ?v4 ))))):named a80 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 B$ ))(=> (= (fun_app$e (comp$a ?v0 )?v1 )(fun_app$e (comp$a ?v2 )?v3 ))(= (fun_app$u ?v0 (fun_app$r ?v1 ?v4 ))(fun_app$u ?v2 (fun_app$r ?v3 ?v4 ))))):named a81 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ )(?v4 C$ ))(=> (= (fun_app$d (comp$ ?v0 )?v1 )(fun_app$d (comp$ ?v2 )?v3 ))(= (fun_app$r ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$r ?v2 (fun_app$p ?v3 ?v4 ))))):named a82 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 C_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$m (comp$i ?v0 )?v1 )?v2 )(= (fun_app$v (comp$l (fun_app$d (comp$ ?v3 )?v0 ))?v1 )(fun_app$d (comp$ ?v3 )?v2 )))):named a83 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$k (comp$g ?v0 )?v1 )?v2 )(= (fun_app$d (comp$ (fun_app$f (comp$b ?v3 )?v0 ))?v1 )(fun_app$d (comp$ ?v3 )?v2 )))):named a84 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$d (comp$ ?v0 )?v1 )?v2 )(= (fun_app$d (comp$ (fun_app$e (comp$a ?v3 )?v0 ))?v1 )(fun_app$t (comp$k ?v3 )?v2 )))):named a85 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 B_c_fun$ )(?v2 B_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$l (comp$h ?v0 )?v1 )?v2 )(= (fun_app$w (comp$m (fun_app$d (comp$ ?v3 )?v0 ))?v1 )(fun_app$f (comp$b ?v3 )?v2 )))):named a86 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 C_b_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$m (comp$i ?v0 )?v1 )?v2 )(= (fun_app$m (comp$i (fun_app$k (comp$g ?v3 )?v0 ))?v1 )(fun_app$k (comp$g ?v3 )?v2 )))):named a87 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$v (comp$l ?v0 )?v1 )?v2 )(= (fun_app$v (comp$l (fun_app$t (comp$k ?v3 )?v0 ))?v1 )(fun_app$t (comp$k ?v3 )?v2 )))):named a88 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$w (comp$m ?v0 )?v1 )?v2 )(= (fun_app$w (comp$m (fun_app$t (comp$k ?v3 )?v0 ))?v1 )(fun_app$e (comp$a ?v3 )?v2 )))):named a89 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$j (comp$f ?v0 )?v1 )?v2 )(= (fun_app$f (comp$b (fun_app$f (comp$b ?v3 )?v0 ))?v1 )(fun_app$f (comp$b ?v3 )?v2 )))):named a90 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 C_a_fun$ )(?v2 C_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$h (comp$d ?v0 )?v1 )?v2 )(= (fun_app$t (comp$k (fun_app$i (comp$e ?v3 )?v0 ))?v1 )(fun_app$d (comp$ ?v3 )?v2 )))):named a91 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$g (comp$c ?v0 )?v1 )?v2 )(= (fun_app$e (comp$a (fun_app$i (comp$e ?v3 )?v0 ))?v1 )(fun_app$f (comp$b ?v3 )?v2 )))):named a92 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ ))(=> (= (fun_app$e (comp$a ?v0 )?v1 )?v2 )(= (fun_app$t (comp$k ?v0 )(fun_app$d (comp$ ?v1 )?v3 ))(fun_app$d (comp$ ?v2 )?v3 )))):named a93 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 C_b_fun$ ))(=> (= (fun_app$f (comp$b ?v0 )?v1 )?v2 )(= (fun_app$d (comp$ ?v0 )(fun_app$k (comp$g ?v1 )?v3 ))(fun_app$d (comp$ ?v2 )?v3 )))):named a94 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ ))(=> (= (fun_app$d (comp$ ?v0 )?v1 )?v2 )(= (fun_app$d (comp$ ?v0 )(fun_app$m (comp$i ?v1 )?v3 ))(fun_app$v (comp$l ?v2 )?v3 )))):named a95 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 C_b_fun$ ))(=> (= (fun_app$g (comp$c ?v0 )?v1 )?v2 )(= (fun_app$h (comp$d ?v0 )(fun_app$d (comp$ ?v1 )?v3 ))(fun_app$k (comp$g ?v2 )?v3 )))):named a96 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$i (comp$e ?v0 )?v1 )?v2 )(= (fun_app$d (comp$ ?v0 )(fun_app$h (comp$d ?v1 )?v3 ))(fun_app$t (comp$k ?v2 )?v3 )))):named a97 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 C_b_fun$ ))(=> (= (fun_app$j (comp$f ?v0 )?v1 )?v2 )(= (fun_app$k (comp$g ?v0 )(fun_app$k (comp$g ?v1 )?v3 ))(fun_app$k (comp$g ?v2 )?v3 )))):named a98 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$i (comp$e ?v0 )?v1 )?v2 )(= (fun_app$f (comp$b ?v0 )(fun_app$g (comp$c ?v1 )?v3 ))(fun_app$e (comp$a ?v2 )?v3 )))):named a99 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$z (comp$p ?v0 )?v1 )?v2 )(= (fun_app$t (comp$k ?v0 )(fun_app$t (comp$k ?v1 )?v3 ))(fun_app$t (comp$k ?v2 )?v3 )))):named a100 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$z (comp$p ?v0 )?v1 )?v2 )(= (fun_app$e (comp$a ?v0 )(fun_app$e (comp$a ?v1 )?v3 ))(fun_app$e (comp$a ?v2 )?v3 )))):named a101 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 B_c_fun$ ))(=> (= (fun_app$d (comp$ ?v0 )?v1 )?v2 )(= (fun_app$f (comp$b ?v0 )(fun_app$l (comp$h ?v1 )?v3 ))(fun_app$w (comp$m ?v2 )?v3 )))):named a102 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C_b_fun$ )(?v3 C$ ))(=> (= (fun_app$k (comp$g ?v0 )?v1 )?v2 )(= (fun_app$q ?v0 (fun_app$p ?v1 ?v3 ))(fun_app$p ?v2 ?v3 )))):named a103 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B$ ))(=> (= (fun_app$f (comp$b ?v0 )?v1 )?v2 )(= (fun_app$r ?v0 (fun_app$q ?v1 ?v3 ))(fun_app$r ?v2 ?v3 )))):named a104 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_a_fun$ )(?v3 C$ ))(=> (= (fun_app$t (comp$k ?v0 )?v1 )?v2 )(= (fun_app$u ?v0 (fun_app$s ?v1 ?v3 ))(fun_app$s ?v2 ?v3 )))):named a105 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B$ ))(=> (= (fun_app$e (comp$a ?v0 )?v1 )?v2 )(= (fun_app$u ?v0 (fun_app$r ?v1 ?v3 ))(fun_app$r ?v2 ?v3 )))):named a106 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 C$ ))(=> (= (fun_app$d (comp$ ?v0 )?v1 )?v2 )(= (fun_app$r ?v0 (fun_app$p ?v1 ?v3 ))(fun_app$s ?v2 ?v3 )))):named a107 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_c_fun$ )(?v2 C$ )(?v3 B_b_fun$ )(?v4 C_b_fun$ )(?v5 B_a_fun$ ))(=> (= (fun_app$p ?v0 (fun_app$aa ?v1 ?v2 ))(fun_app$q ?v3 (fun_app$p ?v4 ?v2 )))(= (fun_app$s (fun_app$v (comp$l (fun_app$d (comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$s (fun_app$d (comp$ (fun_app$f (comp$b ?v5 )?v3 ))?v4 )?v2 )))):named a108 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 C_b_fun$ )(?v2 C$ )(?v3 C_b_fun$ )(?v4 C_c_fun$ )(?v5 B_a_fun$ ))(=> (= (fun_app$q ?v0 (fun_app$p ?v1 ?v2 ))(fun_app$p ?v3 (fun_app$aa ?v4 ?v2 )))(= (fun_app$s (fun_app$d (comp$ (fun_app$f (comp$b ?v5 )?v0 ))?v1 )?v2 )(fun_app$s (fun_app$v (comp$l (fun_app$d (comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a109 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C$ )(?v3 B_a_fun$ )(?v4 C_b_fun$ )(?v5 C$ ))(=> (= (fun_app$r ?v0 (fun_app$p ?v1 ?v2 ))(fun_app$r ?v3 (fun_app$p ?v4 ?v5 )))(= (fun_app$s (fun_app$d (comp$ ?v0 )?v1 )?v2 )(fun_app$s (fun_app$d (comp$ ?v3 )?v4 )?v5 )))):named a110 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C$ )(?v3 B_a_fun$ )(?v4 C_b_fun$ ))(=> (= (fun_app$r ?v0 (fun_app$p ?v1 ?v2 ))(fun_app$r ?v3 (fun_app$p ?v4 ?v2 )))(= (fun_app$s (fun_app$d (comp$ ?v0 )?v1 )?v2 )(fun_app$s (fun_app$d (comp$ ?v3 )?v4 )?v2 )))):named a111 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_bool_fun$ )(?v2 C_b_fun$ )(?v3 C_bool_fun$ )(?v4 C_b_llist_fun$ )(?v5 C_c_fun$ ))(= (comp$q (lmap$ ?v0 )(fun_app$b (fun_app$ab (fun_app$ac (fun_app$ad (corec_llist$ ?v1 )?v2 )?v3 )?v4 )?v5 ))(corec_llist$a ?v1 (fun_app$d (comp$ ?v0 )?v2 )?v3 (comp$q (lmap$ ?v0 )?v4 )?v5 ))):named a112 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$ (fun_app$ (lmap$ ?v0 )?v1 ))(fun_app$ (lmap$ ?v0 )(ltl$a ?v1 )))):named a113 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_b_fun$ )(?v2 C_c_fun$ )(?v3 C$ ))(= (lnull$ (fun_app$a (fun_app$b (fun_app$c (unfold_llist$ ?v0 )?v1 )?v2 )?v3 ))(fun_app$ae ?v0 ?v3 ))):named a114 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_a_fun$ )(?v2 C_c_fun$ )(?v3 C$ ))(= (lnull$a (unfold_llist$a ?v0 ?v1 ?v2 ?v3 ))(fun_app$ae ?v0 ?v3 ))):named a115 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_b_fun$ )(?v2 C_c_fun$ )(?v3 C$ ))(= (not (lnull$ (fun_app$a (fun_app$b (fun_app$c (unfold_llist$ ?v0 )?v1 )?v2 )?v3 )))(not (fun_app$ae ?v0 ?v3 )))):named a116 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_a_fun$ )(?v2 C_c_fun$ )(?v3 C$ ))(= (not (lnull$a (unfold_llist$a ?v0 ?v1 ?v2 ?v3 )))(not (fun_app$ae ?v0 ?v3 )))):named a117 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_b_fun$ )(?v3 C_c_fun$ ))(=> (not (fun_app$ae ?v0 ?v1 ))(= (lhd$a (fun_app$a (fun_app$b (fun_app$c (unfold_llist$ ?v0 )?v2 )?v3 )?v1 ))(fun_app$p ?v2 ?v1 )))):named a118 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ ))(=> (not (fun_app$ae ?v0 ?v1 ))(= (lhd$ (unfold_llist$a ?v0 ?v2 ?v3 ?v1 ))(fun_app$s ?v2 ?v1 )))):named a119 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_b_fun$ )(?v3 C_c_fun$ ))(! (=> (fun_app$ae ?v0 ?v1 )(= (fun_app$a (fun_app$b (fun_app$c (unfold_llist$ ?v0 )?v2 )?v3 )?v1 )lNil$a )):pattern ((fun_app$a (fun_app$b (fun_app$c (unfold_llist$ ?v0 )?v2 )?v3 )?v1 )))):named a120 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ ))(! (=> (fun_app$ae ?v0 ?v1 )(= (unfold_llist$a ?v0 ?v2 ?v3 ?v1 )lNil$ )):pattern ((unfold_llist$a ?v0 ?v2 ?v3 ?v1 )))):named a121 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (comp$j (fun_app$af (convol$ ?v0 )?v1 )?v2 )(convol$a (fun_app$d (comp$ ?v0 )?v2 )(fun_app$d (comp$ ?v1 )?v2 )))):named a122 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_b_fun$ )(?v3 C_c_fun$ ))(=> (not (fun_app$ae ?v0 ?v1 ))(= (ltl$a (fun_app$a (fun_app$b (fun_app$c (unfold_llist$ ?v0 )?v2 )?v3 )?v1 ))(fun_app$a (fun_app$b (fun_app$c (unfold_llist$ ?v0 )?v2 )?v3 )(fun_app$aa ?v3 ?v1 ))))):named a123 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ ))(=> (not (fun_app$ae ?v0 ?v1 ))(= (ltl$ (unfold_llist$a ?v0 ?v2 ?v3 ?v1 ))(unfold_llist$a ?v0 ?v2 ?v3 (fun_app$aa ?v3 ?v1 ))))):named a124 ))
(check-sat )
;(get-unsat-core )
