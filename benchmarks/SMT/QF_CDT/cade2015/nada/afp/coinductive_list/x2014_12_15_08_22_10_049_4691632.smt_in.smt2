;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_llist_enat_fun$ 0 )
(declare-sort A_b_prod_llist_a_b_prod_llist_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$a ()A_b_prod_llist$)
(declare-fun lhd$a (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$a (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$a (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-fun us$ ()A_b_prod_llist$ )
(declare-fun vs$ ()A_b_prod_llist$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun lmap$ (A_b_prod_a_fun$ A_b_prod_llist$ )A_llist$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun llcp$a (A_b_prod_llist$ )A_b_prod_llist_enat_fun$ )
(declare-fun llcp$b (B_llist$ )B_llist_enat_fun$ )
(declare-fun lmap$a (A_b_prod_b_fun$ A_b_prod_llist$ )B_llist$ )
(declare-fun lmap$b (A_a_b_prod_fun$ A_llist$ )A_b_prod_llist$ )
(declare-fun lmap$c (B_a_b_prod_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun lmap$d (A_b_prod_a_b_prod_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lmap$e (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$f (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$g (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$h (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun ltake$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun ltake$a (Enat$ )B_llist_b_llist_fun$ )
(declare-fun ltake$b (Enat$ )A_b_prod_llist_a_b_prod_llist_fun$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_b_prod_llist$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$b (A_b_prod_llist_a_b_prod_llist_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun fun_app$c (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$d (A_b_prod_llist_enat_fun$ A_b_prod_llist$ )Enat$ )
(declare-fun fun_app$e (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun lappend$a (A_llist$ A_llist$ )A_llist$ )
(declare-fun lappend$b (B_llist$ B_llist$ )B_llist$ )
(declare-fun llength$a (A_b_prod_llist$ )Enat$ )
(declare-fun llength$b (B_llist$ )Enat$ )
(declare-fun lprefix$a (A_b_prod_llist$ A_b_prod_llist$ )Bool )
(declare-fun lprefix$b (B_llist$ B_llist$ )Bool )
(assert (! (not (= (llength$ (fun_app$ (ltake$ (llength$a us$ ))xs$ ))(llength$b (fun_app$a (ltake$a (llength$a us$ ))ys$ )))):named a0 ))
(assert (! (less_eq$ (llength$a us$ )(llength$ xs$ )):named a1 ))
(assert (! (less_eq$ (llength$a us$ )(llength$b ys$ )):named a2 ))
(assert (! (less_eq$ (llength$a us$ )(min$ (llength$ xs$ )(llength$b ys$ ))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$ ?v0 )?v1 )(= (fun_app$ (ltake$ ?v1 )?v0 )?v0 )):pattern ((fun_app$ (ltake$ ?v1 )?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$a ?v0 )?v1 )(= (fun_app$b (ltake$b ?v1 )?v0 )?v0 )):pattern ((fun_app$b (ltake$b ?v1 )?v0 )))):named a5 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$b ?v0 )?v1 )(= (fun_app$a (ltake$a ?v1 )?v0 )?v0 )):pattern ((fun_app$a (ltake$a ?v1 )?v0 )))):named a6 ))
(assert (! (= (lzip$ xs$ ys$ )(lappend$ us$ vs$ )):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ )(?v3 Enat$ ))(=> (and (= (fun_app$b (ltake$b ?v0 )?v1 )(fun_app$b (ltake$b ?v0 )?v2 ))(less_eq$ ?v3 ?v0 ))(= (fun_app$b (ltake$b ?v3 )?v1 )(fun_app$b (ltake$b ?v3 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Enat$ ))(=> (and (= (fun_app$ (ltake$ ?v0 )?v1 )(fun_app$ (ltake$ ?v0 )?v2 ))(less_eq$ ?v3 ?v0 ))(= (fun_app$ (ltake$ ?v3 )?v1 )(fun_app$ (ltake$ ?v3 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 Enat$ ))(=> (and (= (fun_app$a (ltake$a ?v0 )?v1 )(fun_app$a (ltake$a ?v0 )?v2 ))(less_eq$ ?v3 ?v0 ))(= (fun_app$a (ltake$a ?v3 )?v1 )(fun_app$a (ltake$a ?v3 )?v2 )))):named a10 ))
(assert (! (= (llength$a (lzip$ xs$ ys$ ))(llength$a (lappend$ us$ vs$ ))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (llength$ (fun_app$ (ltake$ ?v0 )?v1 ))(min$ ?v0 (llength$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ ))(= (llength$a (fun_app$b (ltake$b ?v0 )?v1 ))(min$ ?v0 (llength$a ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(= (llength$b (fun_app$a (ltake$a ?v0 )?v1 ))(min$ ?v0 (llength$b ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$d (llcp$a ?v0 )?v0 )(llength$a ?v0 )):pattern ((llcp$a ?v0 )))):named a16 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$e (llcp$b ?v0 )?v0 )(llength$b ?v0 )):pattern ((llcp$b ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 Enat$ ))(= (lprefix$ (fun_app$ (ltake$ ?v0 )?v1 )(fun_app$ (ltake$ ?v2 )?v1 ))(or (less_eq$ ?v0 ?v2 )(less_eq$ (llength$ ?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 Enat$ ))(= (lprefix$a (fun_app$b (ltake$b ?v0 )?v1 )(fun_app$b (ltake$b ?v2 )?v1 ))(or (less_eq$ ?v0 ?v2 )(less_eq$ (llength$a ?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 Enat$ ))(= (lprefix$b (fun_app$a (ltake$a ?v0 )?v1 )(fun_app$a (ltake$a ?v2 )?v1 ))(or (less_eq$ ?v0 ?v2 )(less_eq$ (llength$b ?v1 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (less_eq$ ?v0 (llength$ ?v1 ))(= (fun_app$ (ltake$ ?v0 )(lappend$a ?v1 ?v2 ))(fun_app$ (ltake$ ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(=> (less_eq$ ?v0 (llength$a ?v1 ))(= (fun_app$b (ltake$b ?v0 )(lappend$ ?v1 ?v2 ))(fun_app$b (ltake$b ?v0 )?v1 )))):named a22 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (less_eq$ ?v0 (llength$b ?v1 ))(= (fun_app$a (ltake$a ?v0 )(lappend$b ?v1 ?v2 ))(fun_app$a (ltake$a ?v0 )?v1 )))):named a23 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b (ltake$b ?v0 )lNil$a )lNil$a ):pattern ((ltake$b ?v0 )))):named a24 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ltake$ ?v0 )lNil$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a25 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$a (ltake$a ?v0 )lNil$b )lNil$b ):pattern ((ltake$a ?v0 )))):named a26 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ ))(lprefix$a (fun_app$b (ltake$b ?v0 )?v1 )?v1 )):named a27 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(lprefix$ (fun_app$ (ltake$ ?v0 )?v1 )?v1 )):named a28 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(lprefix$b (fun_app$a (ltake$a ?v0 )?v1 )?v1 )):named a29 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_a_fun$ )(?v2 A_b_prod_llist$ ))(= (fun_app$ (ltake$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$b (ltake$b ?v0 )?v2 )))):named a30 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_b_fun$ )(?v2 A_b_prod_llist$ ))(= (fun_app$a (ltake$a ?v0 )(lmap$a ?v1 ?v2 ))(lmap$a ?v1 (fun_app$b (ltake$b ?v0 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_b_prod_fun$ )(?v2 A_llist$ ))(= (fun_app$b (ltake$b ?v0 )(lmap$b ?v1 ?v2 ))(lmap$b ?v1 (fun_app$ (ltake$ ?v0 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_b_prod_fun$ )(?v2 B_llist$ ))(= (fun_app$b (ltake$b ?v0 )(lmap$c ?v1 ?v2 ))(lmap$c ?v1 (fun_app$a (ltake$a ?v0 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_a_b_prod_fun$ )(?v2 A_b_prod_llist$ ))(= (fun_app$b (ltake$b ?v0 )(lmap$d ?v1 ?v2 ))(lmap$d ?v1 (fun_app$b (ltake$b ?v0 )?v2 )))):named a34 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ltake$ ?v0 )(lmap$e ?v1 ?v2 ))(lmap$e ?v1 (fun_app$ (ltake$ ?v0 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (fun_app$ (ltake$ ?v0 )(lmap$f ?v1 ?v2 ))(lmap$f ?v1 (fun_app$a (ltake$a ?v0 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (fun_app$a (ltake$a ?v0 )(lmap$g ?v1 ?v2 ))(lmap$g ?v1 (fun_app$ (ltake$ ?v0 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (fun_app$a (ltake$a ?v0 )(lmap$h ?v1 ?v2 ))(lmap$h ?v1 (fun_app$a (ltake$a ?v0 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$b ?v0 ?v0 )):named a39 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(lprefix$a ?v0 ?v0 )):named a40 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a41 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$b ?v0 ?v0 )):named a42 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(lprefix$a ?v0 ?v0 )):named a43 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a44 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (lprefix$a lNil$a ?v0 )true ):pattern ((lprefix$a lNil$a ?v0 )))):named a45 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (lprefix$b lNil$b ?v0 )true ):pattern ((lprefix$b lNil$b ?v0 )))):named a46 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$ lNil$ ?v0 )true ):pattern ((lprefix$ lNil$ ?v0 )))):named a47 ))
(check-sat )
;(get-unsat-core )
