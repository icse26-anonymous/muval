;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Enat_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist_llist_llist$ 0)
(declare-sort A_llist_llist_llist_llist$ 0)
(declare-sort A_llist_llist_llist_llist_llist$ 0)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun lNil$c ()A_llist_llist_llist_llist$)
(declare-fun lhd$c (A_llist_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun ltl$c (A_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun lCons$c (A_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$)
(declare-fun lNil$d ()A_llist_llist_llist_llist_llist$)
(declare-fun lhd$d (A_llist_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun ltl$d (A_llist_llist_llist_llist_llist$)A_llist_llist_llist_llist_llist$)
(declare-fun lCons$d (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_llist$ )A_llist_llist_llist_llist_llist$)
(declare-fun n$ ()Nat$ )
(declare-fun uu$ ()Nat_enat_fun$ )
(declare-fun uua$ (A_llist_llist_llist_llist_llist$ )Nat_enat_fun$ )
(declare-fun uub$ (A_llist_llist_llist_llist_llist$ )Nat_bool_fun$ )
(declare-fun uuc$ (A_llist_llist_llist_llist$ )Nat_enat_fun$ )
(declare-fun uud$ (A_llist_llist_llist_llist$ )Nat_bool_fun$ )
(declare-fun uue$ (A_llist_llist$ )Nat_enat_fun$ )
(declare-fun uuf$ (A_llist_llist$ )Nat_bool_fun$ )
(declare-fun uug$ (A_llist_llist_llist$ )Nat_enat_fun$ )
(declare-fun uuh$ (A_llist_llist_llist$ )Nat_bool_fun$ )
(declare-fun uui$ (Enat$ )Enat_bool_fun$ )
(declare-fun uuj$ (Nat$ )Nat_bool_fun$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist_llist$ Nat$ )A_llist$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun lnth$a (A_llist_llist_llist_llist_llist$ Nat$ )A_llist_llist_llist_llist$ )
(declare-fun lnth$b (A_llist_llist_llist_llist$ Nat$ )A_llist_llist_llist$ )
(declare-fun lnth$c (A_llist_llist_llist$ Nat$ )A_llist_llist$ )
(declare-fun lnth$d (A_llist$ Nat$ )A$ )
(declare-fun plus$a (Nat$ Nat$ )Nat$ )
(declare-fun member$ (Enat$ Enat_set$ )Bool )
(declare-fun setsum$ (Nat_enat_fun$ Nat_set$ )Enat$ )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist_llist_llist_llist_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun member$a (Nat$ Nat_set$ )Bool )
(declare-fun collect$a (Enat_bool_fun$ )Enat_set$ )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$b (Enat_bool_fun$ Enat$ )Bool )
(declare-fun lconcat$a (A_llist_llist_llist_llist_llist$ )A_llist_llist_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$c (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lessThan$ (Nat$ )Nat_set$ )
(declare-fun lfinite$a (A_llist_llist_llist_llist$ )Bool )
(declare-fun lfinite$b (A_llist_llist$ )Bool )
(declare-fun lfinite$c (A_llist_llist_llist$ )Bool )
(declare-fun lfinite$d (A_llist$ )Bool )
(declare-fun llength$a (A_llist_llist_llist_llist_llist$ )Enat$ )
(declare-fun llength$b (A_llist_llist_llist_llist$ )Enat$ )
(declare-fun llength$c (A_llist_llist_llist$ )Enat$ )
(declare-fun llength$d (A_llist_llist$ )Enat$ )
(declare-fun lessThan$a (Enat$ )Enat_set$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(llength$ (lnth$ xss$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist_llist$ )(?v1 Nat$ ))(! (= (fun_app$a (uub$ ?v0 )?v1 )(less$ (enat$ ?v1 )(llength$a ?v0 ))):pattern ((fun_app$a (uub$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 Nat$ ))(! (= (fun_app$a (uud$ ?v0 )?v1 )(less$ (enat$ ?v1 )(llength$b ?v0 ))):pattern ((fun_app$a (uud$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 Nat$ ))(! (= (fun_app$a (uuh$ ?v0 )?v1 )(less$ (enat$ ?v1 )(llength$c ?v0 ))):pattern ((fun_app$a (uuh$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 Nat$ ))(! (= (fun_app$a (uuf$ ?v0 )?v1 )(less$ (enat$ ?v1 )(llength$d ?v0 ))):pattern ((fun_app$a (uuf$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (fun_app$b (uui$ ?v0 )?v1 )(less$ ?v1 ?v0 )):pattern ((fun_app$b (uui$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$a (uuj$ ?v0 )?v1 )(less$a ?v1 ?v0 )):pattern ((fun_app$a (uuj$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(llength$b (lnth$a ?v0 ?v1 ))):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )(llength$c (lnth$b ?v0 ?v1 ))):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uug$ ?v0 )?v1 )(llength$d (lnth$c ?v0 ?v1 ))):pattern ((fun_app$ (uug$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uue$ ?v0 )?v1 )(llength$ (lnth$ ?v0 ?v1 ))):pattern ((fun_app$ (uue$ ?v0 )?v1 )))):named a10 ))
(assert (! (not (exists ((?v0 Nat$ )(?v1 Nat$ ))(and (= (lnth$d (lconcat$ xss$ )n$ )(lnth$d (lnth$ xss$ ?v0 )?v1 ))(and (less$ (enat$ ?v1 )(llength$ (lnth$ xss$ ?v0 )))(and (less$ (enat$ ?v0 )(llength$d xss$ ))(= (enat$ n$ )(plus$ (setsum$ uu$ (lessThan$ ?v0 ))(enat$ ?v1 )))))))):named a11 ))
(assert (! (less$ (enat$ n$ )(llength$ (lconcat$ xss$ ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less$ (plus$ (enat$ ?v0 )?v1 )(plus$ (enat$ ?v0 )?v2 ))(less$ ?v1 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (= (plus$ (enat$ ?v0 )?v1 )(plus$ (enat$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ )(?v2 Enat$ ))(= (= (plus$ ?v0 (enat$ ?v1 ))(plus$ ?v2 (enat$ ?v1 )))(= ?v0 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (member$ ?v0 (lessThan$a ?v1 ))(less$ ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (member$a ?v0 (lessThan$ ?v1 ))(less$a ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a (plus$a ?v0 ?v1 )(plus$a ?v2 ?v1 ))(less$a ?v0 ?v2 ))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a (plus$a ?v0 ?v1 )(plus$a ?v0 ?v2 ))(less$a ?v1 ?v2 ))):named a19 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist_llist$ ))(=> (lfinite$ ?v0 )(= (llength$b (lconcat$a ?v0 ))(setsum$ (uua$ ?v0 )(collect$ (uub$ ?v0 )))))):named a20 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ ))(=> (lfinite$a ?v0 )(= (llength$c (lconcat$b ?v0 ))(setsum$ (uuc$ ?v0 )(collect$ (uud$ ?v0 )))))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (lfinite$b ?v0 )(= (llength$ (lconcat$ ?v0 ))(setsum$ (uue$ ?v0 )(collect$ (uuf$ ?v0 )))))):named a22 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(=> (lfinite$c ?v0 )(= (llength$d (lconcat$c ?v0 ))(setsum$ (uug$ ?v0 )(collect$ (uuh$ ?v0 )))))):named a23 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (lessThan$a ?v0 )(lessThan$a ?v1 ))(= ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (lessThan$ ?v0 )(lessThan$ ?v1 ))(= ?v0 ?v1 ))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a26 ))
(assert (! (forall ((?v0 Enat$ ))(= (lessThan$a ?v0 )(collect$a (uui$ ?v0 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ ))(= (lessThan$ ?v0 )(collect$ (uuj$ ?v0 )))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$a ?v0 ?v1 )(plus$a ?v2 ?v1 ))(= ?v0 ?v2 ))):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$a ?v0 ?v1 )(plus$a ?v0 ?v2 ))(= ?v1 ?v2 ))):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (less$ (enat$ ?v0 )(enat$ ?v1 ))(less$a ?v0 ?v1 )):pattern ((less$ (enat$ ?v0 )(enat$ ?v1 ))))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (plus$ (enat$ ?v0 )(enat$ ?v1 ))(enat$ (plus$a ?v0 ?v1 ))):pattern ((plus$ (enat$ ?v0 )(enat$ ?v1 ))))):named a32 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (and (less$ ?v0 (enat$ ?v1 ))(forall ((?v2 Nat$ ))(=> (and (= ?v0 (enat$ ?v2 ))(less$a ?v2 ?v1 ))false )))false )):named a33 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ ))(=> (lfinite$a ?v0 )(exists ((?v1 Nat$ ))(= (llength$b ?v0 )(enat$ ?v1 ))))):named a34 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(=> (lfinite$c ?v0 )(exists ((?v1 Nat$ ))(= (llength$c ?v0 )(enat$ ?v1 ))))):named a35 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$d ?v0 )(exists ((?v1 Nat$ ))(= (llength$ ?v0 )(enat$ ?v1 ))))):named a36 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (lfinite$b ?v0 )(exists ((?v1 Nat$ ))(= (llength$d ?v0 )(enat$ ?v1 ))))):named a37 ))
(check-sat )
;(get-unsat-core )
