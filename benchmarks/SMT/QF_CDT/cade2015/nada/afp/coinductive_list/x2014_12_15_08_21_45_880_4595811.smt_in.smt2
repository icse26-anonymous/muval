;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_b_prod_llist$)
(declare-fun lhd$ (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$ (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$ (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun na$ ()Nat$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()B_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_b_prod_llist$ Nat$ )A_b_prod$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun lnth$a (A_llist$ Nat$ )A$ )
(declare-fun lnth$b (B_llist$ Nat$ )B$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun llength$a (B_llist$ )Enat$ )
(assert (! (not (= (lnth$ (lzip$ xsa$ ysa$ )(suc$ na$ ))(pair$ (lnth$a xsa$ (suc$ na$ ))(lnth$b ysa$ (suc$ na$ ))))):named a0 ))
(assert (! (less$ (enat$ (suc$ na$ ))(llength$ xsa$ )):named a1 ))
(assert (! (less$ (enat$ (suc$ na$ ))(llength$a ysa$ )):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(=> (and (less$ (enat$ na$ )(llength$ ?v0 ))(less$ (enat$ na$ )(llength$a ?v1 )))(= (lnth$ (lzip$ ?v0 ?v1 )na$ )(pair$ (lnth$a ?v0 na$ )(lnth$b ?v1 na$ ))))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_b_prod$ ))(=> (forall ((?v1 A$ )(?v2 B$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a10 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(less$a (fun_app$ ?v0 ?v3 )(fun_app$ ?v0 (suc$ ?v3 ))))(= (less$a (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 ?v2 ))(less$a ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(less$ (fun_app$a ?v0 ?v3 )(fun_app$a ?v0 (suc$ ?v3 ))))(= (less$ (fun_app$a ?v0 ?v1 )(fun_app$a ?v0 ?v2 ))(less$a ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less$a (fun_app$ ?v0 ?v3 )(fun_app$ ?v0 (suc$ ?v3 ))))(less$a ?v1 ?v2 ))(less$a (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less$ (fun_app$a ?v0 ?v3 )(fun_app$a ?v0 (suc$ ?v3 ))))(less$a ?v1 ?v2 ))(less$ (fun_app$a ?v0 ?v1 )(fun_app$a ?v0 ?v2 )))):named a14 ))
(check-sat )
;(get-unsat-core )
