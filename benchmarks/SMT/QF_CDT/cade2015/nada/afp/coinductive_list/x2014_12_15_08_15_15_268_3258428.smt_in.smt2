;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun n$ ()Enat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun infinity$ ()Enat$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= n$ (enat$ ?v0 ))thesis$ )):named a1 ))
(assert (! (fun_app$ (less$ n$ )infinity$ ):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (or (lfinite$ xs$ )(fun_app$ (less$ n$ )infinity$ )):named a4 ))
(assert (! (forall ((?v0 Enat$ ))(= (not (= ?v0 infinity$ ))(exists ((?v1 Nat$ ))(= ?v0 (enat$ ?v1 ))))):named a5 ))
(assert (! (forall ((?v0 Enat$ ))(= (forall ((?v1 Nat$ ))(not (= ?v0 (enat$ ?v1 ))))(= ?v0 infinity$ ))):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )(enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 Enat$ ))(=> (and (forall ((?v1 Nat$ ))(=> (= ?v0 (enat$ ?v1 ))false ))(=> (= ?v0 infinity$ )false ))false )):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (forall ((?v2 Nat$ )(?v3 Nat$ ))(=> (and (= ?v0 (enat$ ?v2 ))(= ?v1 (enat$ ?v3 )))false ))(and (forall ((?v2 Nat$ ))(=> (and (= ?v0 (enat$ ?v2 ))(= ?v1 infinity$ ))false ))(and (forall ((?v2 Nat$ ))(=> (and (= ?v0 infinity$ )(= ?v1 (enat$ ?v2 )))false ))(=> (and (= ?v0 infinity$ )(= ?v1 infinity$ ))false ))))false )):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (forall ((?v3 Nat$ )(?v4 Nat$ )(?v5 Nat$ ))(=> (and (= ?v0 (enat$ ?v3 ))(and (= ?v1 (enat$ ?v4 ))(= ?v2 (enat$ ?v5 ))))false ))(and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (and (= ?v0 (enat$ ?v3 ))(and (= ?v1 (enat$ ?v4 ))(= ?v2 infinity$ )))false ))(and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (and (= ?v0 (enat$ ?v3 ))(and (= ?v1 infinity$ )(= ?v2 (enat$ ?v4 ))))false ))(and (forall ((?v3 Nat$ ))(=> (and (= ?v0 (enat$ ?v3 ))(and (= ?v1 infinity$ )(= ?v2 infinity$ )))false ))(and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (and (= ?v0 infinity$ )(and (= ?v1 (enat$ ?v3 ))(= ?v2 (enat$ ?v4 ))))false ))(and (forall ((?v3 Nat$ ))(=> (and (= ?v0 infinity$ )(and (= ?v1 (enat$ ?v3 ))(= ?v2 infinity$ )))false ))(and (forall ((?v3 Nat$ ))(=> (and (= ?v0 infinity$ )(and (= ?v1 infinity$ )(= ?v2 (enat$ ?v3 ))))false ))(=> (and (= ?v0 infinity$ )(and (= ?v1 infinity$ )(= ?v2 infinity$ )))false ))))))))false )):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(not (= (enat$ ?v0 )infinity$ ))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(not (= infinity$ (enat$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (less$ ?v0 )infinity$ )(not (= ?v0 infinity$ ))):pattern ((less$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (less$ infinity$ )?v0 )false ):pattern ((fun_app$ (less$ infinity$ )?v0 )))):named a14 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a15 ))
(check-sat )
;(get-unsat-core )
