;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun r$ ()A_a_bool_fun_fun$ )
(declare-fun x$ ()A$ )
(declare-fun y$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ys$a ()A_llist$ )
(declare-fun ysa$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(assert (! (not (and (not (lnull$ ysa$ ))(=> (not (lnull$ ysa$ ))(or (fun_app$ (fun_app$a r$ (lhd$ xsa$ ))(lhd$ ysa$ ))(and (= (lhd$ xsa$ )(lhd$ ysa$ ))(or (not (llexord$ r$ (ltl$ ysa$ )(ltl$ xsa$ )))(llexord$ r$ (ltl$ xsa$ )(ltl$ ysa$ )))))))):named a0 ))
(assert (! (or (fun_app$ (fun_app$a r$ x$ )y$ )(or (= x$ y$ )(fun_app$ (fun_app$a r$ y$ )x$ ))):named a1 ))
(assert (! (not (fun_app$ (fun_app$a r$ y$ )x$ )):named a2 ))
(assert (! (= ysa$ (lCons$ y$ ys$ )):named a3 ))
(assert (! (= xsa$ (lCons$ x$ xs$ )):named a4 ))
(assert (! (or (not (= y$ x$ ))(not (llexord$ r$ ys$ xs$ ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(or (fun_app$ (fun_app$a r$ ?v0 )?v1 )(or (= ?v0 ?v1 )(fun_app$ (fun_app$a r$ ?v1 )?v0 )))):named a6 ))
(assert (! (not (lnull$ xsa$ )):named a7 ))
(assert (! (not (llexord$ r$ ys$a xs$a )):named a8 ))
(assert (! (not (llexord$ r$ ysa$ xsa$ )):named a9 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$ ?v0 ?v1 ?v1 )):named a10 ))
(assert (! (not (llexord$ r$ ysa$ xsa$ )):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_llist$ ))(! (=> (lnull$ ?v0 )(= (llexord$ ?v1 ?v2 ?v0 )(lnull$ ?v2 ))):pattern ((llexord$ ?v1 ?v2 ?v0 )))):named a12 ))
(assert (! (=> (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (and (= ysa$ (lCons$ ?v0 ?v1 ))(and (not (fun_app$ (fun_app$a r$ ?v0 )x$ ))(or (not (= ?v0 x$ ))(not (llexord$ r$ ?v1 xs$ )))))false ))false ):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (=> (or (lnull$ ?v0 )(not (fun_app$ ?v1 (lhd$ ?v0 ))))false )(=> (and (not (lnull$ ?v0 ))(fun_app$ ?v1 (lhd$ ?v0 )))false ))false )):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a15 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a17 ))
(check-sat )
;(get-unsat-core )
