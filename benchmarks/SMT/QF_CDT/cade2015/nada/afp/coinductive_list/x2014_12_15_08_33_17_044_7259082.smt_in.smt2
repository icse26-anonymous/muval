;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun m$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun m$a ()Nat$ )
(declare-fun uu$ ()Nat_enat_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun uua$ ()Nat_nat_fun$ )
(declare-fun uub$ ()Nat_enat_fun$ )
(declare-fun uuc$ (Nat_nat_fun$ )Nat_nat_fun$ )
(declare-fun uud$ (Nat_enat_fun$ )Nat_enat_fun$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun lnth$ (A_llist_llist$ Nat$ )A_llist$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun zero$ ()Enat$ )
(declare-fun lnth$a (A_llist$ Nat$ )A$ )
(declare-fun plus$a (Nat$ )Nat_nat_fun$ )
(declare-fun zero$a ()Nat$ )
(declare-fun setsum$ (Nat_enat_fun$ Nat_set$ )Enat$ )
(declare-fun fun_app$ (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun setsum$a (Nat_nat_fun$ Nat_set$ )Nat$ )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun llength$a (A_llist_llist$ )Enat$ )
(declare-fun atLeastLessThan$ (Nat$ Nat$ )Nat_set$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(llength$ (lnth$ (lCons$a (lCons$ x$ xs$ )xss$ )?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ ))(! (= (fun_app$ (uud$ ?v0 )?v1 )(fun_app$ ?v0 (suc$ ?v1 ))):pattern ((fun_app$ (uud$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(! (= (fun_app$a (uuc$ ?v0 )?v1 )(fun_app$a ?v0 (suc$ ?v1 ))):pattern ((fun_app$a (uuc$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uub$ ?v0 )zero$ ):pattern ((fun_app$ uub$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a uua$ ?v0 )zero$a ):pattern ((fun_app$a uua$ ?v0 )))):named a4 ))
(assert (! (not (= (setsum$ uu$ (atLeastLessThan$ zero$a m$ ))(plus$ (eSuc$ (llength$ xs$ ))(setsum$ uu$ (atLeastLessThan$ (suc$ zero$a )m$ ))))):named a5 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= m$ (suc$ ?v0 ))false ))false ):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a8 ))
(assert (! (less$ zero$a m$ ):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lnth$ (lCons$a ?v0 ?v1 )zero$a )?v0 ):pattern ((lCons$a ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lnth$a (lCons$ ?v0 ?v1 )zero$a )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 Nat$ ))(! (= (lnth$ (lCons$a ?v0 ?v1 )(suc$ ?v2 ))(lnth$ ?v1 ?v2 )):pattern ((lnth$ (lCons$a ?v0 ?v1 )(suc$ ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 Nat$ ))(! (= (lnth$a (lCons$ ?v0 ?v1 )(suc$ ?v2 ))(lnth$a ?v1 ?v2 )):pattern ((lnth$a (lCons$ ?v0 ?v1 )(suc$ ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (llength$a (lCons$a ?v0 ?v1 ))(eSuc$ (llength$a ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (llength$ (lCons$ ?v0 ?v1 ))(eSuc$ (llength$ ?v1 ))):pattern ((lCons$ ?v0 ?v1 )))):named a15 ))
(assert (! (= m$ (suc$ m$a )):named a16 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (setsum$a uua$ ?v0 )zero$a )):named a17 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (setsum$ uub$ ?v0 )zero$ )):named a18 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(=> (= (fun_app$a ?v0 zero$a )zero$a )(= (setsum$a ?v0 (atLeastLessThan$ (suc$ zero$a )?v1 ))(setsum$a ?v0 (atLeastLessThan$ zero$a ?v1 ))))):named a19 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ ))(=> (= (fun_app$ ?v0 zero$a )zero$ )(= (setsum$ ?v0 (atLeastLessThan$ (suc$ zero$a )?v1 ))(setsum$ ?v0 (atLeastLessThan$ zero$a ?v1 ))))):named a20 ))
(assert (! (forall ((?v0 Enat$ ))(= (plus$ ?v0 zero$ )?v0 )):named a21 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (plus$a ?v0 )zero$a )?v0 )):named a22 ))
(assert (! (forall ((?v0 Enat$ ))(= (plus$ ?v0 zero$ )?v0 )):named a23 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (plus$a ?v0 )zero$a )?v0 )):named a24 ))
(assert (! (forall ((?v0 Enat$ ))(= (plus$ zero$ ?v0 )?v0 )):named a25 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (plus$a zero$a )?v0 )?v0 )):named a26 ))
(assert (! (forall ((?v0 Enat$ ))(= (plus$ zero$ ?v0 )?v0 )):named a27 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (plus$a zero$a )?v0 )?v0 )):named a28 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(= (setsum$a ?v0 (atLeastLessThan$ (suc$ ?v1 )(suc$ ?v2 )))(setsum$a (uuc$ ?v0 )(atLeastLessThan$ ?v1 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(= (setsum$ ?v0 (atLeastLessThan$ (suc$ ?v1 )(suc$ ?v2 )))(setsum$ (uud$ ?v0 )(atLeastLessThan$ ?v1 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (eSuc$ ?v0 )(eSuc$ ?v1 ))(= ?v0 ?v1 ))):named a31 ))
(check-sat )
;(get-unsat-core )
