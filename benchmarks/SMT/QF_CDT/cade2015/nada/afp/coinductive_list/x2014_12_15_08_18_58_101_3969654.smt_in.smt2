;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun ka$ ()Nat$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun zero$ ()Nat$ )
(declare-fun minus$ (Nat$ )Nat_nat_fun$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Nat$ )Nat_bool_fun$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(assert (! (not (= (lnth$ (lappend$ xsa$ ys$ )zero$ )(lnth$ ys$ (fun_app$ (minus$ zero$ )ka$ )))):named a0 ))
(assert (! (fun_app$a (less_eq$ ka$ )zero$ ):named a1 ))
(assert (! (= (llength$ xsa$ )(enat$ ka$ )):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (minus$ ?v0 )?v0 )zero$ ):pattern ((minus$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (minus$ zero$ )?v0 )zero$ ):pattern ((fun_app$ (minus$ zero$ )?v0 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (minus$ ?v0 )zero$ )?v0 )):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (minus$ ?v0 )zero$ )?v0 )):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (minus$ ?v0 )?v0 )zero$ ):pattern ((minus$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (minus$ zero$ )?v0 )zero$ )):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (minus$ ?v0 )zero$ )?v0 ):pattern ((minus$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (= (fun_app$ (minus$ ?v0 )?v1 )zero$ )(= (fun_app$ (minus$ ?v1 )?v0 )zero$ ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$a (less_eq$ zero$ )?v0 )):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (less_eq$ ?v0 )zero$ )(= ?v0 zero$ )):pattern ((less_eq$ ?v0 )))):named a13 ))
(check-sat )
;(get-unsat-core )
