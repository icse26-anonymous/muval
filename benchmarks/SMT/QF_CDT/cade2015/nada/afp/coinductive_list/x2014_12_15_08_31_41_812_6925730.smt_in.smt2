;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_b_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort A_llist_b_fun$ 0 )
(declare-sort B_a_llist_fun$ 0 )
(declare-sort B_b_llist_fun$ 0 )
(declare-sort B_llist_a_fun$ 0 )
(declare-sort B_llist_b_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun$ 0 )
(declare-sort B_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_b_llist_fun$ 0 )
(declare-sort B_llist_llist_a_llist_fun$ 0 )
(declare-sort B_llist_llist_b_llist_fun$ 0 )
(declare-sort B_llist_llist_a_llist_llist_fun$ 0 )
(declare-sort B_llist_llist_b_llist_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-sort B_llist_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun lNil$b ()B_llist_llist$)
(declare-fun lhd$b (B_llist_llist$)B_llist$)
(declare-fun ltl$b (B_llist_llist$)B_llist_llist$)
(declare-fun lCons$b (B_llist$ B_llist_llist$ )B_llist_llist$)
(declare-fun lNil$c ()A_llist_llist$)
(declare-fun lhd$c (A_llist_llist$)A_llist$)
(declare-fun ltl$c (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$c (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun f$ ()B_a_fun$ )
(declare-fun xss$ ()B_llist_llist$ )
(declare-fun lmap$ (B_a_fun$ )B_llist_a_llist_fun$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun lmap$a (B_llist_a_llist_fun$ )B_llist_llist_a_llist_llist_fun$ )
(declare-fun lmap$b (B_b_fun$ )B_llist_b_llist_fun$ )
(declare-fun lmap$c (A_b_fun$ )A_llist_b_llist_fun$ )
(declare-fun lmap$d (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lmap$e (B_llist_b_fun$ )B_llist_llist_b_llist_fun$ )
(declare-fun lmap$f (B_llist_a_fun$ )B_llist_llist_a_llist_fun$ )
(declare-fun lmap$g (A_llist_b_fun$ )A_llist_llist_b_llist_fun$ )
(declare-fun lmap$h (A_llist_a_fun$ )A_llist_llist_a_llist_fun$ )
(declare-fun lmap$i (B_b_llist_fun$ B_llist$ )B_llist_llist$ )
(declare-fun lmap$j (A_a_llist_fun$ )A_llist_a_llist_llist_fun$ )
(declare-fun lmap$k (B_a_llist_fun$ B_llist$ )A_llist_llist$ )
(declare-fun lmap$l (A_b_llist_fun$ A_llist$ )B_llist_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ltake$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun ldrop$a (Enat$ B_llist$ )B_llist$ )
(declare-fun ldrop$b (Enat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun ldrop$c (Enat$ B_llist_llist$ )B_llist_llist$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun lnull$b (A_llist_llist$ )Bool )
(declare-fun lnull$c (B_llist_llist$ )Bool )
(declare-fun ltake$a (Enat$ )B_llist_b_llist_fun$ )
(declare-fun ltake$b (Enat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun ltake$c (Enat$ )B_llist_llist_b_llist_llist_fun$ )
(declare-fun fun_app$ (B_llist_a_llist_fun$ B_llist$ )A_llist$ )
(declare-fun lconcat$ (B_llist_llist$ )B_llist$ )
(declare-fun ldropn$a (Nat$ B_llist$ )B_llist$ )
(declare-fun ldropn$b (Nat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun ldropn$c (Nat$ B_llist_llist$ )B_llist_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (B_llist_llist_a_llist_llist_fun$ B_llist_llist$ )A_llist_llist$ )
(declare-fun fun_app$b (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$c (A_llist_b_llist_fun$ A_llist$ )B_llist$ )
(declare-fun fun_app$d (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$e (B_llist_llist_b_llist_fun$ B_llist_llist$ )B_llist$ )
(declare-fun fun_app$f (B_llist_llist_a_llist_fun$ B_llist_llist$ )A_llist$ )
(declare-fun fun_app$g (A_llist_llist_b_llist_fun$ A_llist_llist$ )B_llist$ )
(declare-fun fun_app$h (A_llist_llist_a_llist_fun$ A_llist_llist$ )A_llist$ )
(declare-fun fun_app$i (A_llist_a_llist_llist_fun$ A_llist$ )A_llist_llist$ )
(declare-fun fun_app$j (B_llist_llist_b_llist_llist_fun$ B_llist_llist$ )B_llist_llist$ )
(declare-fun lconcat$a (A_llist_llist$ )A_llist$ )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun lfinite$b (A_llist_llist$ )Bool )
(declare-fun lfinite$c (B_llist_llist$ )Bool )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun llength$b (A_llist_llist$ )Enat$ )
(declare-fun llength$c (B_llist_llist$ )Enat$ )
(declare-fun lstrict_prefix$ (B_llist$ B_llist$ )Bool )
(declare-fun lstrict_prefix$a (A_llist$ A_llist$ )Bool )
(declare-fun lstrict_prefix$b (B_llist_llist$ B_llist_llist$ )Bool )
(declare-fun lstrict_prefix$c (A_llist_llist$ A_llist_llist$ )Bool )
(assert (! (not (= (fun_app$ (lmap$ f$ )(lconcat$ xss$ ))(lconcat$a (fun_app$a (lmap$a (lmap$ f$ ))xss$ )))):named a0 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_a_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$a (fun_app$ (lmap$ ?v2 )?v0 )(fun_app$ (lmap$ ?v2 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B_llist_llist$ )(?v1 B_llist_llist$ )(?v2 B_llist_a_llist_fun$ ))(=> (lstrict_prefix$b ?v0 ?v1 )(lstrict_prefix$c (fun_app$a (lmap$a ?v2 )?v0 )(fun_app$a (lmap$a ?v2 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$ (fun_app$b (lmap$b ?v2 )?v0 )(fun_app$b (lmap$b ?v2 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$ (fun_app$c (lmap$c ?v2 )?v0 )(fun_app$c (lmap$c ?v2 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$a (fun_app$d (lmap$d ?v2 )?v0 )(fun_app$d (lmap$d ?v2 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 B_llist_llist$ )(?v1 B_llist_llist$ )(?v2 B_llist_b_fun$ ))(=> (lstrict_prefix$b ?v0 ?v1 )(lstrict_prefix$ (fun_app$e (lmap$e ?v2 )?v0 )(fun_app$e (lmap$e ?v2 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 B_llist_llist$ )(?v1 B_llist_llist$ )(?v2 B_llist_a_fun$ ))(=> (lstrict_prefix$b ?v0 ?v1 )(lstrict_prefix$a (fun_app$f (lmap$f ?v2 )?v0 )(fun_app$f (lmap$f ?v2 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_b_fun$ ))(=> (lstrict_prefix$c ?v0 ?v1 )(lstrict_prefix$ (fun_app$g (lmap$g ?v2 )?v0 )(fun_app$g (lmap$g ?v2 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_fun$ ))(=> (lstrict_prefix$c ?v0 ?v1 )(lstrict_prefix$a (fun_app$h (lmap$h ?v2 )?v0 )(fun_app$h (lmap$h ?v2 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_llist_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$b (lmap$i ?v2 ?v0 )(lmap$i ?v2 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ldropn$ ?v0 (fun_app$ (lmap$ ?v1 )?v2 ))(fun_app$ (lmap$ ?v1 )(ldropn$a ?v0 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist_llist$ ))(= (ldropn$b ?v0 (fun_app$a (lmap$a ?v1 )?v2 ))(fun_app$a (lmap$a ?v1 )(ldropn$c ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ldropn$ ?v0 (fun_app$d (lmap$d ?v1 )?v2 ))(fun_app$d (lmap$d ?v1 )(ldropn$ ?v0 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ldropn$a ?v0 (fun_app$c (lmap$c ?v1 )?v2 ))(fun_app$c (lmap$c ?v1 )(ldropn$ ?v0 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ldropn$a ?v0 (fun_app$b (lmap$b ?v1 )?v2 ))(fun_app$b (lmap$b ?v1 )(ldropn$a ?v0 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_llist_fun$ )(?v2 A_llist$ ))(= (ldropn$b ?v0 (fun_app$i (lmap$j ?v1 )?v2 ))(fun_app$i (lmap$j ?v1 )(ldropn$ ?v0 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_llist_fun$ )(?v2 B_llist$ ))(= (ldropn$b ?v0 (lmap$k ?v1 ?v2 ))(lmap$k ?v1 (ldropn$a ?v0 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_llist_fun$ )(?v2 A_llist$ ))(= (ldropn$c ?v0 (lmap$l ?v1 ?v2 ))(lmap$l ?v1 (ldropn$ ?v0 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_llist_fun$ )(?v2 B_llist$ ))(= (ldropn$c ?v0 (lmap$i ?v1 ?v2 ))(lmap$i ?v1 (ldropn$a ?v0 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_a_fun$ )(?v2 A_llist_llist$ ))(= (ldropn$ ?v0 (fun_app$h (lmap$h ?v1 )?v2 ))(fun_app$h (lmap$h ?v1 )(ldropn$b ?v0 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ldrop$ ?v0 (fun_app$ (lmap$ ?v1 )?v2 ))(fun_app$ (lmap$ ?v1 )(ldrop$a ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist_llist$ ))(= (ldrop$b ?v0 (fun_app$a (lmap$a ?v1 )?v2 ))(fun_app$a (lmap$a ?v1 )(ldrop$c ?v0 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ldrop$ ?v0 (fun_app$d (lmap$d ?v1 )?v2 ))(fun_app$d (lmap$d ?v1 )(ldrop$ ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ldrop$a ?v0 (fun_app$c (lmap$c ?v1 )?v2 ))(fun_app$c (lmap$c ?v1 )(ldrop$ ?v0 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ldrop$a ?v0 (fun_app$b (lmap$b ?v1 )?v2 ))(fun_app$b (lmap$b ?v1 )(ldrop$a ?v0 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_llist_fun$ )(?v2 A_llist$ ))(= (ldrop$b ?v0 (fun_app$i (lmap$j ?v1 )?v2 ))(fun_app$i (lmap$j ?v1 )(ldrop$ ?v0 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_llist_fun$ )(?v2 B_llist$ ))(= (ldrop$b ?v0 (lmap$k ?v1 ?v2 ))(lmap$k ?v1 (ldrop$a ?v0 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_llist_fun$ )(?v2 A_llist$ ))(= (ldrop$c ?v0 (lmap$l ?v1 ?v2 ))(lmap$l ?v1 (ldrop$ ?v0 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_llist_fun$ )(?v2 B_llist$ ))(= (ldrop$c ?v0 (lmap$i ?v1 ?v2 ))(lmap$i ?v1 (ldrop$a ?v0 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_a_fun$ )(?v2 A_llist_llist$ ))(= (ldrop$ ?v0 (fun_app$h (lmap$h ?v1 )?v2 ))(fun_app$h (lmap$h ?v1 )(ldrop$b ?v0 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$ (fun_app$ (lmap$ ?v0 )?v1 ))(lnull$a ?v1 ))):named a31 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_llist$ ))(= (lnull$b (fun_app$a (lmap$a ?v0 )?v1 ))(lnull$c ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$d (lmap$d ?v0 )?v1 ))(lnull$ ?v1 ))):named a33 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$a (fun_app$c (lmap$c ?v0 )?v1 ))(lnull$ ?v1 ))):named a34 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$a (fun_app$b (lmap$b ?v0 )?v1 ))(lnull$a ?v1 ))):named a35 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (lnull$b (fun_app$i (lmap$j ?v0 )?v1 ))(lnull$ ?v1 ))):named a36 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_llist$ ))(= (lnull$b (lmap$k ?v0 ?v1 ))(lnull$a ?v1 ))):named a37 ))
(assert (! (forall ((?v0 A_b_llist_fun$ )(?v1 A_llist$ ))(= (lnull$c (lmap$l ?v0 ?v1 ))(lnull$ ?v1 ))):named a38 ))
(assert (! (forall ((?v0 B_b_llist_fun$ )(?v1 B_llist$ ))(= (lnull$c (lmap$i ?v0 ?v1 ))(lnull$a ?v1 ))):named a39 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (lnull$ (fun_app$h (lmap$h ?v0 )?v1 ))(lnull$b ?v1 ))):named a40 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$ (fun_app$ (lmap$ ?v0 )?v1 ))(llength$a ?v1 ))):named a41 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_llist$ ))(= (llength$b (fun_app$a (lmap$a ?v0 )?v1 ))(llength$c ?v1 ))):named a42 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (fun_app$d (lmap$d ?v0 )?v1 ))(llength$ ?v1 ))):named a43 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$a (fun_app$c (lmap$c ?v0 )?v1 ))(llength$ ?v1 ))):named a44 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$a (fun_app$b (lmap$b ?v0 )?v1 ))(llength$a ?v1 ))):named a45 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (llength$b (fun_app$i (lmap$j ?v0 )?v1 ))(llength$ ?v1 ))):named a46 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_llist$ ))(= (llength$b (lmap$k ?v0 ?v1 ))(llength$a ?v1 ))):named a47 ))
(assert (! (forall ((?v0 A_b_llist_fun$ )(?v1 A_llist$ ))(= (llength$c (lmap$l ?v0 ?v1 ))(llength$ ?v1 ))):named a48 ))
(assert (! (forall ((?v0 B_b_llist_fun$ )(?v1 B_llist$ ))(= (llength$c (lmap$i ?v0 ?v1 ))(llength$a ?v1 ))):named a49 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (llength$ (fun_app$h (lmap$h ?v0 )?v1 ))(llength$b ?v1 ))):named a50 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$ (fun_app$ (lmap$ ?v0 )?v1 ))(fun_app$ (lmap$ ?v0 )(ltl$a ?v1 )))):named a51 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_llist$ ))(= (ltl$c (fun_app$a (lmap$a ?v0 )?v1 ))(fun_app$a (lmap$a ?v0 )(ltl$b ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$ (fun_app$d (lmap$d ?v0 )?v1 ))(fun_app$d (lmap$d ?v0 )(ltl$ ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (ltl$a (fun_app$c (lmap$c ?v0 )?v1 ))(fun_app$c (lmap$c ?v0 )(ltl$ ?v1 )))):named a54 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (ltl$a (fun_app$b (lmap$b ?v0 )?v1 ))(fun_app$b (lmap$b ?v0 )(ltl$a ?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (ltl$c (fun_app$i (lmap$j ?v0 )?v1 ))(fun_app$i (lmap$j ?v0 )(ltl$ ?v1 )))):named a56 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_llist$ ))(= (ltl$c (lmap$k ?v0 ?v1 ))(lmap$k ?v0 (ltl$a ?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_b_llist_fun$ )(?v1 A_llist$ ))(= (ltl$b (lmap$l ?v0 ?v1 ))(lmap$l ?v0 (ltl$ ?v1 )))):named a58 ))
(assert (! (forall ((?v0 B_b_llist_fun$ )(?v1 B_llist$ ))(= (ltl$b (lmap$i ?v0 ?v1 ))(lmap$i ?v0 (ltl$a ?v1 )))):named a59 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (ltl$ (fun_app$h (lmap$h ?v0 )?v1 ))(fun_app$h (lmap$h ?v0 )(ltl$c ?v1 )))):named a60 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lfinite$ (fun_app$ (lmap$ ?v0 )?v1 ))(lfinite$a ?v1 ))):named a61 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_llist$ ))(= (lfinite$b (fun_app$a (lmap$a ?v0 )?v1 ))(lfinite$c ?v1 ))):named a62 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$d (lmap$d ?v0 )?v1 ))(lfinite$ ?v1 ))):named a63 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lfinite$a (fun_app$c (lmap$c ?v0 )?v1 ))(lfinite$ ?v1 ))):named a64 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lfinite$a (fun_app$b (lmap$b ?v0 )?v1 ))(lfinite$a ?v1 ))):named a65 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (lfinite$b (fun_app$i (lmap$j ?v0 )?v1 ))(lfinite$ ?v1 ))):named a66 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_llist$ ))(= (lfinite$b (lmap$k ?v0 ?v1 ))(lfinite$a ?v1 ))):named a67 ))
(assert (! (forall ((?v0 A_b_llist_fun$ )(?v1 A_llist$ ))(= (lfinite$c (lmap$l ?v0 ?v1 ))(lfinite$ ?v1 ))):named a68 ))
(assert (! (forall ((?v0 B_b_llist_fun$ )(?v1 B_llist$ ))(= (lfinite$c (lmap$i ?v0 ?v1 ))(lfinite$a ?v1 ))):named a69 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (lfinite$ (fun_app$h (lmap$h ?v0 )?v1 ))(lfinite$b ?v1 ))):named a70 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (fun_app$d (ltake$ ?v0 )(fun_app$ (lmap$ ?v1 )?v2 ))(fun_app$ (lmap$ ?v1 )(fun_app$b (ltake$a ?v0 )?v2 )))):named a71 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist_llist$ ))(= (ltake$b ?v0 (fun_app$a (lmap$a ?v1 )?v2 ))(fun_app$a (lmap$a ?v1 )(fun_app$j (ltake$c ?v0 )?v2 )))):named a72 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$d (ltake$ ?v0 )(fun_app$d (lmap$d ?v1 )?v2 ))(fun_app$d (lmap$d ?v1 )(fun_app$d (ltake$ ?v0 )?v2 )))):named a73 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (fun_app$b (ltake$a ?v0 )(fun_app$c (lmap$c ?v1 )?v2 ))(fun_app$c (lmap$c ?v1 )(fun_app$d (ltake$ ?v0 )?v2 )))):named a74 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (fun_app$b (ltake$a ?v0 )(fun_app$b (lmap$b ?v1 )?v2 ))(fun_app$b (lmap$b ?v1 )(fun_app$b (ltake$a ?v0 )?v2 )))):named a75 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_llist_fun$ )(?v2 A_llist$ ))(= (ltake$b ?v0 (fun_app$i (lmap$j ?v1 )?v2 ))(fun_app$i (lmap$j ?v1 )(fun_app$d (ltake$ ?v0 )?v2 )))):named a76 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_llist_fun$ )(?v2 B_llist$ ))(= (ltake$b ?v0 (lmap$k ?v1 ?v2 ))(lmap$k ?v1 (fun_app$b (ltake$a ?v0 )?v2 )))):named a77 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_llist_fun$ )(?v2 A_llist$ ))(= (fun_app$j (ltake$c ?v0 )(lmap$l ?v1 ?v2 ))(lmap$l ?v1 (fun_app$d (ltake$ ?v0 )?v2 )))):named a78 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_llist_fun$ )(?v2 B_llist$ ))(= (fun_app$j (ltake$c ?v0 )(lmap$i ?v1 ?v2 ))(lmap$i ?v1 (fun_app$b (ltake$a ?v0 )?v2 )))):named a79 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_a_fun$ )(?v2 A_llist_llist$ ))(= (fun_app$d (ltake$ ?v0 )(fun_app$h (lmap$h ?v1 )?v2 ))(fun_app$h (lmap$h ?v1 )(ltake$b ?v0 ?v2 )))):named a80 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= (fun_app$ (lmap$ ?v0 )?v1 )lNil$ )(= ?v1 lNil$a ))):named a81 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_llist$ ))(= (= (fun_app$a (lmap$a ?v0 )?v1 )lNil$c )(= ?v1 lNil$b ))):named a82 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= (fun_app$d (lmap$d ?v0 )?v1 )lNil$ )(= ?v1 lNil$ ))):named a83 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= (fun_app$c (lmap$c ?v0 )?v1 )lNil$a )(= ?v1 lNil$ ))):named a84 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= (fun_app$b (lmap$b ?v0 )?v1 )lNil$a )(= ?v1 lNil$a ))):named a85 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (= (fun_app$i (lmap$j ?v0 )?v1 )lNil$c )(= ?v1 lNil$ ))):named a86 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_llist$ ))(= (= (lmap$k ?v0 ?v1 )lNil$c )(= ?v1 lNil$a ))):named a87 ))
(assert (! (forall ((?v0 A_b_llist_fun$ )(?v1 A_llist$ ))(= (= (lmap$l ?v0 ?v1 )lNil$b )(= ?v1 lNil$ ))):named a88 ))
(assert (! (forall ((?v0 B_b_llist_fun$ )(?v1 B_llist$ ))(= (= (lmap$i ?v0 ?v1 )lNil$b )(= ?v1 lNil$a ))):named a89 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (= (fun_app$h (lmap$h ?v0 )?v1 )lNil$ )(= ?v1 lNil$c ))):named a90 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= lNil$ (fun_app$ (lmap$ ?v0 )?v1 ))(= ?v1 lNil$a ))):named a91 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_llist$ ))(= (= lNil$c (fun_app$a (lmap$a ?v0 )?v1 ))(= ?v1 lNil$b ))):named a92 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$d (lmap$d ?v0 )?v1 ))(= ?v1 lNil$ ))):named a93 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= lNil$a (fun_app$c (lmap$c ?v0 )?v1 ))(= ?v1 lNil$ ))):named a94 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= lNil$a (fun_app$b (lmap$b ?v0 )?v1 ))(= ?v1 lNil$a ))):named a95 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (= lNil$c (fun_app$i (lmap$j ?v0 )?v1 ))(= ?v1 lNil$ ))):named a96 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_llist$ ))(= (= lNil$c (lmap$k ?v0 ?v1 ))(= ?v1 lNil$a ))):named a97 ))
(assert (! (forall ((?v0 A_b_llist_fun$ )(?v1 A_llist$ ))(= (= lNil$b (lmap$l ?v0 ?v1 ))(= ?v1 lNil$ ))):named a98 ))
(assert (! (forall ((?v0 B_b_llist_fun$ )(?v1 B_llist$ ))(= (= lNil$b (lmap$i ?v0 ?v1 ))(= ?v1 lNil$a ))):named a99 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (= lNil$ (fun_app$h (lmap$h ?v0 )?v1 ))(= ?v1 lNil$c ))):named a100 ))
(assert (! (forall ((?v0 B_a_fun$ ))(! (= (fun_app$ (lmap$ ?v0 )lNil$a )lNil$ ):pattern ((lmap$ ?v0 )))):named a101 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ ))(! (= (fun_app$a (lmap$a ?v0 )lNil$b )lNil$c ):pattern ((lmap$a ?v0 )))):named a102 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$d (lmap$d ?v0 )lNil$ )lNil$ ):pattern ((lmap$d ?v0 )))):named a103 ))
(assert (! (forall ((?v0 A_b_fun$ ))(! (= (fun_app$c (lmap$c ?v0 )lNil$ )lNil$a ):pattern ((lmap$c ?v0 )))):named a104 ))
(assert (! (forall ((?v0 B_b_fun$ ))(! (= (fun_app$b (lmap$b ?v0 )lNil$a )lNil$a ):pattern ((lmap$b ?v0 )))):named a105 ))
(assert (! (forall ((?v0 A_llist_a_fun$ ))(! (= (fun_app$h (lmap$h ?v0 )lNil$c )lNil$ ):pattern ((lmap$h ?v0 )))):named a106 ))
(assert (! (forall ((?v0 A_llist_b_fun$ ))(! (= (fun_app$g (lmap$g ?v0 )lNil$c )lNil$a ):pattern ((lmap$g ?v0 )))):named a107 ))
(assert (! (forall ((?v0 B_llist_a_fun$ ))(! (= (fun_app$f (lmap$f ?v0 )lNil$b )lNil$ ):pattern ((lmap$f ?v0 )))):named a108 ))
(assert (! (forall ((?v0 B_llist_b_fun$ ))(! (= (fun_app$e (lmap$e ?v0 )lNil$b )lNil$a ):pattern ((lmap$e ?v0 )))):named a109 ))
(assert (! (forall ((?v0 A_a_llist_fun$ ))(! (= (fun_app$i (lmap$j ?v0 )lNil$ )lNil$c ):pattern ((lmap$j ?v0 )))):named a110 ))
(assert (! (= (lfinite$b lNil$c )true ):named a111 ))
(assert (! (= (lfinite$c lNil$b )true ):named a112 ))
(assert (! (= (lfinite$ lNil$ )true ):named a113 ))
(assert (! (= (lfinite$a lNil$a )true ):named a114 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$j (ltake$c ?v0 )lNil$b )lNil$b ):pattern ((ltake$c ?v0 )))):named a115 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$d (ltake$ ?v0 )lNil$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a116 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b (ltake$a ?v0 )lNil$a )lNil$a ):pattern ((ltake$a ?v0 )))):named a117 ))
(check-sat )
;(get-unsat-core )
