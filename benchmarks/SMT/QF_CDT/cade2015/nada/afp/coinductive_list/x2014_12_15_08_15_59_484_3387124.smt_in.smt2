;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-sort B_llist_b_set_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun p$ (A_llist$ B_llist$ )Bool )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ltake$ (Enat$ )B_llist_b_llist_fun$ )
(declare-fun ltake$a (Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llexord$ (B_b_bool_fun_fun$ B_llist$ B_llist$ )Bool )
(declare-fun lmember$ (B$ )B_llist_bool_fun$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (B_llist_b_set_fun$ B_llist$ )B_set$ )
(declare-fun fun_app$c (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun fun_app$d (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$e (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun gen_lset$ (B_set$ )B_llist_b_set_fun$ )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun llexord$a (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun lmember$a (A$ )A_llist_bool_fun$ )
(declare-fun gen_lset$a (A_set$ )A_llist_a_set_fun$ )
(declare-fun ldistinct$ (B_llist$ )Bool )
(declare-fun ldistinct$a (A_llist$ )Bool )
(declare-fun pred_llist$ (B_bool_fun$ B_llist$ )Bool )
(declare-fun pred_llist$a (A_bool_fun$ A_llist$ )Bool )
(assert (! (not (p$ xsa$ lNil$a )):named a0 ))
(assert (! (lfinite$ xsa$ ):named a1 ))
(assert (! (p$ lNil$ lNil$a ):named a2 ))
(assert (! (= (lfinite$a lNil$a )true ):named a3 ))
(assert (! (= (lfinite$ lNil$ )true ):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (and (lfinite$ ?v0 )(p$ ?v0 lNil$a ))(p$ (lCons$ ?v1 ?v0 )lNil$a ))):named a5 ))
(assert (! (lfinite$a lNil$a ):named a6 ))
(assert (! (lfinite$ lNil$ ):named a7 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ (lmember$ ?v0 )lNil$a )false ):pattern ((lmember$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a (lmember$a ?v0 )lNil$ )false ):pattern ((lmember$a ?v0 )))):named a9 ))
(assert (! (forall ((?v0 B_set$ ))(! (= (fun_app$b (gen_lset$ ?v0 )lNil$a )?v0 ):pattern ((gen_lset$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$c (gen_lset$a ?v0 )lNil$ )?v0 ):pattern ((gen_lset$a ?v0 )))):named a11 ))
(assert (! (forall ((?v0 B_bool_fun$ ))(pred_llist$ ?v0 lNil$a )):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_llist$a ?v0 lNil$ )):named a13 ))
(assert (! (ldistinct$ lNil$a ):named a14 ))
(assert (! (ldistinct$a lNil$ ):named a15 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(llexord$ ?v0 lNil$a ?v1 )):named a16 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$a ?v0 lNil$ ?v1 )):named a17 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$d (ltake$ ?v0 )lNil$a )lNil$a ):pattern ((ltake$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$e (ltake$a ?v0 )lNil$ )lNil$ ):pattern ((ltake$a ?v0 )))):named a19 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a25 ))
(check-sat )
;(get-unsat-core )
