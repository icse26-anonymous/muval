;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun i$ ()Nat$ )
(declare-fun j$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$b (Nat_enat_fun$ Nat$ )Enat$ )
(assert (! (not (fun_app$ (less$ (enat$ (suc$ i$ )))(llength$ xsa$ ))):named a0 ))
(assert (! (not (= i$ j$ )):named a1 ))
(assert (! (fun_app$ (less$ (enat$ j$ ))(llength$ xs$ )):named a2 ))
(assert (! (fun_app$ (less$ (enat$ i$ ))(llength$ xs$ )):named a3 ))
(assert (! (not (lnull$ xsa$ )):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$ (less$ (enat$ ?v0 ))(llength$ xsa$ ))(and (fun_app$ (less$ (enat$ ?v1 ))(llength$ xsa$ ))(not (= ?v0 ?v1 ))))(not (= (lnth$ xsa$ ?v0 )(lnth$ xsa$ ?v1 ))))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$ (less$ (enat$ ?v0 ))(llength$ xs$a ))(and (fun_app$ (less$ (enat$ ?v1 ))(llength$ xs$a ))(not (= ?v0 ?v1 ))))(not (= (lnth$ xs$a ?v0 )(lnth$ xs$a ?v1 ))))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )(enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less$a (fun_app$a ?v0 ?v3 )(fun_app$a ?v0 (suc$ ?v3 ))))(less$a ?v1 ?v2 ))(less$a (fun_app$a ?v0 ?v1 )(fun_app$a ?v0 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$ (less$ (fun_app$b ?v0 ?v3 ))(fun_app$b ?v0 (suc$ ?v3 ))))(less$a ?v1 ?v2 ))(fun_app$ (less$ (fun_app$b ?v0 ?v1 ))(fun_app$b ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(less$a (fun_app$a ?v0 ?v3 )(fun_app$a ?v0 (suc$ ?v3 ))))(= (less$a (fun_app$a ?v0 ?v1 )(fun_app$a ?v0 ?v2 ))(less$a ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(fun_app$ (less$ (fun_app$b ?v0 ?v3 ))(fun_app$b ?v0 (suc$ ?v3 ))))(= (fun_app$ (less$ (fun_app$b ?v0 ?v1 ))(fun_app$b ?v0 ?v2 ))(less$a ?v1 ?v2 )))):named a14 ))
(assert (! (= xsa$ (lCons$ x$ xs$ )):named a15 ))
(assert (! (=> (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (= xsa$ (lCons$ ?v0 ?v1 ))false ))false ):named a16 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a17 ))
(check-sat )
;(get-unsat-core )
