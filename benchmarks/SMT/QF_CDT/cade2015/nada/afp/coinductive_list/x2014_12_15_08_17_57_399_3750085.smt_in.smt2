;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Natural$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-sort Char_list$ 0)
(declare-sort Literal$ 0)
(declare-fun nibble0$ ()Nibble$)
(declare-fun nibble1$ ()Nibble$)
(declare-fun nibble2$ ()Nibble$)
(declare-fun nibble3$ ()Nibble$)
(declare-fun nibble4$ ()Nibble$)
(declare-fun nibble5$ ()Nibble$)
(declare-fun nibble6$ ()Nibble$)
(declare-fun nibble7$ ()Nibble$)
(declare-fun nibble8$ ()Nibble$)
(declare-fun nibble9$ ()Nibble$)
(declare-fun nibbleA$ ()Nibble$)
(declare-fun nibbleB$ ()Nibble$)
(declare-fun nibbleC$ ()Nibble$)
(declare-fun nibbleD$ ()Nibble$)
(declare-fun nibbleE$ ()Nibble$)
(declare-fun nibbleF$ ()Nibble$)
(declare-fun select$ (Char$)Nibble$)
(declare-fun selecta$ (Char$)Nibble$)
(declare-fun char$ (Nibble$ Nibble$ )Char$)
(declare-fun nil$ ()Char_list$)
(declare-fun hd$ (Char_list$)Char$)
(declare-fun tl$ (Char_list$)Char_list$)
(declare-fun cons$ (Char$ Char_list$ )Char_list$)
(declare-fun explode$ (Literal$)Char_list$)
(declare-fun str$ (Char_list$ )Literal$)
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun size$ (Char$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lsetp$ (A_llist$ )A_bool_fun$ )
(declare-fun size$a (Natural$ )Nat$ )
(declare-fun size$b (Literal$ )Nat$ )
(declare-fun zero$a ()Natural$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun size_char$ (Char$ )Nat$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun size_natural$ (Natural$ )Nat$ )
(assert (! (not (= (lnth$ (lCons$ x$ xs$ )zero$ )x$ )):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))(and (fun_app$ ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (lmember$ ?v0 (lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$ ?v0 ?v2 ))):pattern ((lmember$ ?v0 (lCons$ ?v1 ?v2 ))))):named a3 ))
(assert (! (= zero$ zero$ ):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a6 ))
(assert (! (forall ((?v0 Natural$ ))(= (= zero$a ?v0 )(= ?v0 zero$a ))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (iterates$ ?v0 ?v1 )(lCons$ ?v1 (iterates$ ?v0 (fun_app$a ?v0 ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(= (fun_app$ (lsetp$ ?v0 )?v1 )(or (exists ((?v2 A$ )(?v3 A_llist$ ))(and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$ (lsetp$ ?v2 )?v3 ))))))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (and (fun_app$ (lsetp$ ?v0 )?v1 )(and (forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(=> (and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$ (lsetp$ ?v2 )?v3 )))false ))))false )):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A$ ))(=> (fun_app$ (lsetp$ ?v0 )?v1 )(fun_app$ (lsetp$ (lCons$ ?v2 ?v0 ))?v1 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(fun_app$ (lsetp$ (lCons$ ?v0 ?v1 ))?v0 )):named a13 ))
(assert (! (= (size_natural$ zero$a )zero$ ):named a14 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size$ ?v0 )zero$ ):pattern ((size$ ?v0 )))):named a15 ))
(assert (! (= (size$a zero$a )zero$ ):named a16 ))
(assert (! (forall ((?v0 Literal$ ))(! (= (size$b ?v0 )zero$ ):pattern ((size$b ?v0 )))):named a17 ))
(check-sat )
;(get-unsat-core )
