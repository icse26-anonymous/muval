;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_llist_set$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_bool_fun_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_llist_a_llist_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_bool_fun_a_llist_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort A_llist_llist_llist$ 0)
(declare-sort A_llist_llist_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun lNil$c ()A_llist_llist_llist_llist$)
(declare-fun lhd$c (A_llist_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun ltl$c (A_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun lCons$c (A_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$)
(declare-fun uu$ ()A_llist_bool_fun$ )
(declare-fun uua$ ()A_bool_fun$ )
(declare-fun uub$ ()A_llist_llist_bool_fun$ )
(declare-fun uuc$ ()A_llist_bool_fun$ )
(declare-fun uud$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uue$ (A_llist_llist_bool_fun$ )A_llist_llist_bool_fun_a_llist_llist_bool_fun_fun$ )
(declare-fun uuf$ (A_llist_bool_fun$ )A_llist_bool_fun_a_llist_bool_fun_fun$ )
(declare-fun uug$ ()A_llist_llist_bool_fun$ )
(declare-fun uuh$ ()A_llist_bool_fun$ )
(declare-fun uui$ ()A_bool_fun$ )
(declare-fun uuj$ ()A_llist_llist_llist_bool_fun$ )
(declare-fun uuk$ ()A_llist_llist_bool_fun$ )
(declare-fun lset$ (A_llist_llist_llist$ )A_llist_llist_set$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun lnull$ (A_llist_llist_llist$ )Bool )
(declare-fun lset$a (A_llist_llist$ )A_llist_set$ )
(declare-fun lset$b (A_llist$ )A_set$ )
(declare-fun lnull$a (A_llist_llist$ )Bool )
(declare-fun lnull$b (A_llist$ )Bool )
(declare-fun member$ (A_llist_llist_llist$ A_llist_llist_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_llist_llist_bool_fun$ A_llist_llist_llist$ )Bool )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun lfilter$ (A_llist_bool_fun$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun member$a (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun member$b (A_llist$ A_llist_set$ )Bool )
(declare-fun member$c (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_llist_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_llist_bool_fun_a_llist_llist_bool_fun_fun$ A_llist_llist_bool_fun$ )A_llist_llist_bool_fun$ )
(declare-fun fun_app$d (A_llist_bool_fun_a_llist_bool_fun_fun$ A_llist_bool_fun$ )A_llist_bool_fun$ )
(declare-fun fun_app$e (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$f (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun fun_app$g (A_llist_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun fun_app$h (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$i (A_llist_llist_llist_a_llist_llist_llist_fun$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$a (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lfilter$a (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lfilter$b (A_llist_llist_bool_fun$ )A_llist_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun lfilter$c (A_llist_llist_llist_bool_fun$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$ )
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(! (= (fun_app$ uuj$ ?v0 )(not (lnull$ ?v0 ))):pattern ((fun_app$ uuj$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$a uuk$ ?v0 )(not (lnull$a ?v0 ))):pattern ((fun_app$a uuk$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b uu$ ?v0 )(not (lnull$b ?v0 ))):pattern ((fun_app$b uu$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$ )(?v1 A_llist_llist_bool_fun$ )(?v2 A_llist_llist$ ))(! (= (fun_app$a (fun_app$c (uue$ ?v0 )?v1 )?v2 )(and (fun_app$a ?v0 ?v2 )(fun_app$a ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$c (uue$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist$ ))(! (= (fun_app$b (fun_app$d (uuf$ ?v0 )?v1 )?v2 )(and (fun_app$b ?v0 ?v2 )(fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$d (uuf$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$e (fun_app$f (uud$ ?v0 )?v1 )?v2 )(and (fun_app$e ?v0 ?v2 )(fun_app$e ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$f (uud$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$a uug$ ?v0 )false ):pattern ((fun_app$a uug$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b uuh$ ?v0 )false ):pattern ((fun_app$b uuh$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$e uui$ ?v0 )false ):pattern ((fun_app$e uui$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$a uub$ ?v0 )true ):pattern ((fun_app$a uub$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b uuc$ ?v0 )true ):pattern ((fun_app$b uuc$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$e uua$ ?v0 )true ):pattern ((fun_app$e uua$ ?v0 )))):named a11 ))
(assert (! (not (lnull$a (fun_app$g (lfilter$ uu$ )xssa$ ))):named a12 ))
(assert (! (= (lconcat$ xssa$ )lNil$ ):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$h (lfilter$a ?v0 )(fun_app$h (lfilter$a ?v0 )?v1 ))(fun_app$h (lfilter$a ?v0 )?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$ )(?v1 A_llist_llist_llist$ ))(= (fun_app$i (lfilter$b ?v0 )(fun_app$i (lfilter$b ?v0 )?v1 ))(fun_app$i (lfilter$b ?v0 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (fun_app$g (lfilter$ ?v0 )(fun_app$g (lfilter$ ?v0 )?v1 ))(fun_app$g (lfilter$ ?v0 )?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$h (lfilter$a uua$ )?v0 )?v0 )):named a17 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(= (fun_app$i (lfilter$b uub$ )?v0 )?v0 )):named a18 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (fun_app$g (lfilter$ uuc$ )?v0 )?v0 )):named a19 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(= (fun_app$h (lfilter$a ?v0 )(fun_app$h (lfilter$a ?v1 )?v2 ))(fun_app$h (lfilter$a (fun_app$f (uud$ ?v0 )?v1 ))?v2 ))):named a20 ))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$ )(?v1 A_llist_llist_bool_fun$ )(?v2 A_llist_llist_llist$ ))(= (fun_app$i (lfilter$b ?v0 )(fun_app$i (lfilter$b ?v1 )?v2 ))(fun_app$i (lfilter$b (fun_app$c (uue$ ?v0 )?v1 ))?v2 ))):named a21 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist_llist$ ))(= (fun_app$g (lfilter$ ?v0 )(fun_app$g (lfilter$ ?v1 )?v2 ))(fun_app$g (lfilter$ (fun_app$d (uuf$ ?v0 )?v1 ))?v2 ))):named a22 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (or (lnull$b ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$b ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a24 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a25 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$b ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a26 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a27 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a28 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$b ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a29 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (lnull$b ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$b ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a30 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$b ?v0 )(lnull$b ?v1 ))false )(=> (and (not (lnull$b ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a31 ))
(assert (! (forall ((?v0 A_llist_llist_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist_llist_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist_llist_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a32 ))
(assert (! (forall ((?v0 A_llist_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$a ?v1 )))false )(=> (not (forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$a ?v1 ))))false ))false )):named a33 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$b ?v1 ?v0 )(lnull$b ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$b ?v1 ?v0 )(lnull$b ?v1 ))))false ))false )):named a34 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a35 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (and (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (or (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a36 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$b ?v0 )(lnull$b ?v1 ))false )(=> (or (not (lnull$b ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a37 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a38 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (and (=> (lnull$a ?v0 )false )(=> (not (lnull$a ?v0 ))false ))false )):named a39 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$b ?v0 )false )(=> (not (lnull$b ?v0 ))false ))false )):named a40 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(= (fun_app$i (lfilter$b uug$ )?v0 )lNil$b )):named a41 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (fun_app$g (lfilter$ uuh$ )?v0 )lNil$a )):named a42 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$h (lfilter$a uui$ )?v0 )lNil$ )):named a43 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ ))(= (lconcat$a (lfilter$c uuj$ ?v0 ))(lconcat$a ?v0 ))):named a44 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(= (lconcat$b (fun_app$i (lfilter$b uuk$ )?v0 ))(lconcat$b ?v0 ))):named a45 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (lconcat$ (fun_app$g (lfilter$ uu$ )?v0 ))(lconcat$ ?v0 ))):named a46 ))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$ ))(! (= (fun_app$i (lfilter$b ?v0 )lNil$b )lNil$b ):pattern ((lfilter$b ?v0 )))):named a47 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(! (= (fun_app$g (lfilter$ ?v0 )lNil$a )lNil$a ):pattern ((lfilter$ ?v0 )))):named a48 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$h (lfilter$a ?v0 )lNil$ )lNil$ ):pattern ((lfilter$a ?v0 )))):named a49 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(! (= (lnull$ ?v0 )(= ?v0 lNil$b )):pattern ((lnull$ ?v0 )))):named a50 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (lnull$a ?v0 )(= ?v0 lNil$a )):pattern ((lnull$a ?v0 )))):named a51 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lnull$b ?v0 )(= ?v0 lNil$ )):pattern ((lnull$b ?v0 )))):named a52 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(=> (= ?v0 lNil$b )(lnull$ ?v0 ))):named a53 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (= ?v0 lNil$a )(lnull$a ?v0 ))):named a54 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (= ?v0 lNil$ )(lnull$b ?v0 ))):named a55 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(=> (lnull$ ?v0 )(= ?v0 lNil$b ))):named a56 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (lnull$a ?v0 )(= ?v0 lNil$a ))):named a57 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lnull$b ?v0 )(= ?v0 lNil$ ))):named a58 ))
(assert (! (lnull$ lNil$b ):named a59 ))
(assert (! (lnull$a lNil$a ):named a60 ))
(assert (! (lnull$b lNil$ ):named a61 ))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$ )(?v1 A_llist_llist_llist$ ))(= (lnull$ (fun_app$i (lfilter$b ?v0 )?v1 ))(forall ((?v2 A_llist_llist$ ))(=> (member$a ?v2 (lset$ ?v1 ))(not (fun_app$a ?v0 ?v2 )))))):named a62 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (lnull$a (fun_app$g (lfilter$ ?v0 )?v1 ))(forall ((?v2 A_llist$ ))(=> (member$b ?v2 (lset$a ?v1 ))(not (fun_app$b ?v0 ?v2 )))))):named a63 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$b (fun_app$h (lfilter$a ?v0 )?v1 ))(forall ((?v2 A$ ))(=> (member$c ?v2 (lset$b ?v1 ))(not (fun_app$e ?v0 ?v2 )))))):named a64 ))
(check-sat )
;(get-unsat-core )
