;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_list_a_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun f$ (A_a_a_fun_fun$ A$ )A_list_a_fun$ )
(declare-fun xs$ ()A_list$ )
(declare-fun rev$ (A_list$ )A_list$ )
(declare-fun fold$ (A_a_a_fun_fun$ A_list$ )A_a_fun$ )
(declare-fun plus$ ()A_a_a_fun_fun$ )
(declare-fun zero$ ()A$ )
(declare-fun foldr$ (A_a_a_fun_fun$ A_list$ A$ )A$ )
(declare-fun append$ (A_list$ A_list$ )A_list$ )
(declare-fun fun_app$ (A_list_a_fun$ A_list$ )A$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun listsum$ (A_a_a_fun_fun$ A$ )A_list_a_fun$ )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun fun_app$b (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun llistsum$ (A_a_a_fun_fun$ A$ A_llist$ )A$ )
(assert (! (not (= (llistsum$ plus$ zero$ (llist_of$ xs$ ))(fun_app$ (listsum$ plus$ zero$ )xs$ ))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (fun_app$a (fun_app$b plus$ (fun_app$a (fun_app$b plus$ ?v0 )?v1 ))?v2 )(fun_app$a (fun_app$b plus$ ?v0 )(fun_app$a (fun_app$b plus$ ?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A$ ))(= (fun_app$a (fun_app$b plus$ ?v0 )zero$ )?v0 )):named a3 ))
(assert (! (forall ((?v0 A$ ))(= (fun_app$a (fun_app$b plus$ zero$ )?v0 )?v0 )):named a4 ))
(assert (! (= (listsum$ plus$ zero$ )(f$ plus$ zero$ )):named a5 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$ (listsum$ plus$ zero$ )?v0 )(foldr$ plus$ ?v0 zero$ )):pattern ((fun_app$ (listsum$ plus$ zero$ )?v0 )))):named a6 ))
(assert (! (= (fun_app$ (listsum$ plus$ zero$ )nil$ )zero$ ):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (fun_app$ (listsum$ plus$ zero$ )(cons$ ?v0 ?v1 ))(fun_app$a (fun_app$b plus$ ?v0 )(fun_app$ (listsum$ plus$ zero$ )?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (fun_app$ (listsum$ plus$ zero$ )(append$ ?v0 ?v1 ))(fun_app$a (fun_app$b plus$ (fun_app$ (listsum$ plus$ zero$ )?v0 ))(fun_app$ (listsum$ plus$ zero$ )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (llistsum$ plus$ zero$ ?v0 )(ite (lfinite$ ?v0 )(fun_app$ (listsum$ plus$ zero$ )(list_of$ ?v0 ))zero$ )):pattern ((llistsum$ plus$ zero$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fold$ plus$ ?v0 )(fun_app$b plus$ (fun_app$ (listsum$ plus$ zero$ )(rev$ ?v0 )))):pattern ((fold$ plus$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a12 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a13 ))
(check-sat )
;(get-unsat-core )
