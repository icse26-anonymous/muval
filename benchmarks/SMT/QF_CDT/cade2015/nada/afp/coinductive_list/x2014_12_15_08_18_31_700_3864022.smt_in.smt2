;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun m$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun na$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(assert (! (not (= (lnth$ (ldropn$ (suc$ na$ )xsa$ )m$ )(lnth$ xsa$ (plus$ m$ (suc$ na$ ))))):named a0 ))
(assert (! (= xsa$ (lCons$ x$ xs$ )):named a1 ))
(assert (! (= (lnth$ (ldropn$ na$ xs$ )m$ )(lnth$ xs$ (plus$ m$ na$ ))):named a2 ))
(assert (! (=> (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (= xsa$ (lCons$ ?v0 ?v1 ))false ))false ):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_llist$ ))(= (ldropn$ ?v0 (ldropn$ ?v1 ?v2 ))(ldropn$ (plus$ ?v0 ?v1 )?v2 ))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 Nat$ ))(! (= (lnth$ (lCons$ ?v0 ?v1 )(suc$ ?v2 ))(lnth$ ?v1 ?v2 )):pattern ((lnth$ (lCons$ ?v0 ?v1 )(suc$ ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (ldropn$ (suc$ ?v0 )(lCons$ ?v1 ?v2 ))(ldropn$ ?v0 ?v2 )):pattern ((ldropn$ (suc$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (plus$ ?v0 (suc$ ?v1 ))(suc$ (plus$ ?v0 ?v1 ))):pattern ((plus$ ?v0 (suc$ ?v1 ))))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (plus$ (suc$ ?v0 )?v1 )(plus$ ?v0 (suc$ ?v1 ))):pattern ((plus$ (suc$ ?v0 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (plus$ (suc$ ?v0 )?v1 )(suc$ (plus$ ?v0 ?v1 ))):pattern ((plus$ (suc$ ?v0 )?v1 )))):named a13 ))
(assert (! (less$ (enat$ (plus$ (suc$ na$ )m$ ))(llength$ xsa$ )):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (less$ (enat$ (plus$ na$ m$ ))(llength$ ?v0 ))(= (lnth$ (ldropn$ na$ ?v0 )m$ )(lnth$ ?v0 (plus$ m$ na$ ))))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a16 ))
(check-sat )
;(get-unsat-core )
