;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort B_llist$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun nibble0$ ()Nibble$)
(declare-fun nibble1$ ()Nibble$)
(declare-fun nibble2$ ()Nibble$)
(declare-fun nibble3$ ()Nibble$)
(declare-fun nibble4$ ()Nibble$)
(declare-fun nibble5$ ()Nibble$)
(declare-fun nibble6$ ()Nibble$)
(declare-fun nibble7$ ()Nibble$)
(declare-fun nibble8$ ()Nibble$)
(declare-fun nibble9$ ()Nibble$)
(declare-fun nibbleA$ ()Nibble$)
(declare-fun nibbleB$ ()Nibble$)
(declare-fun nibbleC$ ()Nibble$)
(declare-fun nibbleD$ ()Nibble$)
(declare-fun nibbleE$ ()Nibble$)
(declare-fun nibbleF$ ()Nibble$)
(declare-fun select$ (Char$)Nibble$)
(declare-fun selecta$ (Char$)Nibble$)
(declare-fun char$ (Nibble$ Nibble$ )Char$)
(declare-fun f$ ()A_b_fun$ )
(declare-fun uu$ ()B_b_fun$ )
(declare-fun uua$ ()A_a_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lmap$ (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lnth$ (B_llist$ Nat$ )B$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lmap$a (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$b (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$c (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lnth$a (A_llist$ Nat$ )A$ )
(declare-fun ldropn$ (Nat$ B_llist$ )B_llist$ )
(declare-fun fun_app$ (B_b_fun$ B$ )B$ )
(declare-fun ldropn$a (Nat$ A_llist$ )A_llist$ )
(declare-fun llength$ ()A_llist_enat_fun$ )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun fun_app$b (A_b_fun$ A$ )B$ )
(declare-fun fun_app$c (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$d (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun llength$a ()B_llist_enat_fun$ )
(declare-fun size_bool$ (Bool )Nat$ )
(declare-fun size_char$ (Char$ )Nat$ )
(declare-fun gen_llength$ (Nat$ )B_llist_enat_fun$ )
(declare-fun gen_llength$a (Nat$ )A_llist_enat_fun$ )
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ uu$ ?v0 )?v0 ):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a uua$ ?v0 )?v0 ):pattern ((fun_app$a uua$ ?v0 )))):named a1 ))
(assert (! (not (= (lnth$ (lmap$ f$ xsa$ )zero$ )(fun_app$b f$ (lnth$a xsa$ zero$ )))):named a2 ))
(assert (! (less$ (enat$ zero$ )(fun_app$c llength$ xsa$ )):named a3 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lmap$a uu$ ?v0 )?v0 )):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lmap$b uua$ ?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (fun_app$c llength$ (lmap$c ?v0 ?v1 ))(fun_app$d llength$a ?v1 ))):named a6 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (fun_app$d llength$a (lmap$a ?v0 ?v1 ))(fun_app$d llength$a ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (fun_app$c llength$ (lmap$b ?v0 ?v1 ))(fun_app$c llength$ ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (fun_app$d llength$a (lmap$ ?v0 ?v1 ))(fun_app$c llength$ ?v1 ))):named a9 ))
(assert (! (= zero$ zero$ ):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a12 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lnth$ (lCons$ ?v0 ?v1 )zero$ )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lnth$a (lCons$a ?v0 ?v1 )zero$ )?v0 ):pattern ((lCons$a ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a15 ))
(assert (! (= (size_bool$ true )zero$ ):named a16 ))
(assert (! (= (size_bool$ false )zero$ ):named a17 ))
(assert (! (= llength$a (gen_llength$ zero$ )):named a18 ))
(assert (! (= llength$ (gen_llength$a zero$ )):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ldropn$ ?v0 (lmap$a ?v1 ?v2 ))(lmap$a ?v1 (ldropn$ ?v0 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ldropn$a ?v0 (lmap$c ?v1 ?v2 ))(lmap$c ?v1 (ldropn$ ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ldropn$a ?v0 (lmap$b ?v1 ?v2 ))(lmap$b ?v1 (ldropn$a ?v0 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ldropn$ ?v0 (lmap$ ?v1 ?v2 ))(lmap$ ?v1 (ldropn$a ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (ldropn$ zero$ ?v0 )?v0 ):pattern ((ldropn$ zero$ ?v0 )))):named a26 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (ldropn$a zero$ ?v0 )?v0 ):pattern ((ldropn$a zero$ ?v0 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(=> (= (ldropn$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(less$ (enat$ ?v0 )(fun_app$d llength$a ?v1 )))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(=> (= (ldropn$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(less$ (enat$ ?v0 )(fun_app$c llength$ ?v1 )))):named a29 ))
(check-sat )
;(get-unsat-core )
