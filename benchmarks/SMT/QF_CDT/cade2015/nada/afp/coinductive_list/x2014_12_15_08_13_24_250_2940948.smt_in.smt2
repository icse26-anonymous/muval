;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun uu$ ()A_a_bool_fun_fun$ )
(declare-fun xs$ ()A_list$ )
(declare-fun set$ (A_list$ )A_set$ )
(declare-fun uua$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lsetp$ (A_llist$ )A_bool_fun$ )
(declare-fun insert$ (A$ A_list$ )A_list$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(declare-fun member$a (A_list$ )A_bool_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$d (A_a_fun$ A$ )A$ )
(declare-fun list_ex1$ (A_bool_fun$ A_list$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun can_select$ (A_bool_fun$ A_set$ )Bool )
(declare-fun llist_all2$ (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$ (fun_app$a uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$b (fun_app$c uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uu$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (= (lset$ (llist_of$ xs$ ))(set$ xs$ ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(lmember$ ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (member$ ?v0 (lset$ ?v1 ))(fun_app$b (lsetp$ ?v1 )?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (fun_app$b (lsetp$ ?v0 )?v1 )(member$ ?v1 (lset$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(= (member$ ?v0 (set$ ?v1 ))(fun_app$b (member$a ?v1 )?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$d ?v2 ?v4 )(fun_app$d ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (lmap$ ?v2 ?v0 )(lmap$ ?v3 ?v1 )))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$ ?v3 (lset$ ?v0 ))(= (fun_app$d ?v1 ?v3 )(fun_app$d ?v2 ?v3 ))))(= (lmap$ ?v1 ?v0 )(lmap$ ?v2 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$d ?v2 ?v4 )(fun_app$d ?v3 ?v4 )))))(= (lmap$ ?v2 ?v0 )(lmap$ ?v3 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$ ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (lset$ ?v1 ))(and (member$ ?v5 (lset$ ?v2 ))(fun_app$b (fun_app$c ?v0 ?v4 )?v5 )))(fun_app$b (fun_app$c ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$a (llist_all2$ ?v3 )?v1 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (=> (member$ ?v0 (set$ ?v1 ))(= (insert$ ?v0 ?v1 )?v1 )):pattern ((insert$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_list$ ))(= (list_ex1$ ?v0 ?v1 )(exists ((?v2 A$ ))(and (and (member$ ?v2 (set$ ?v1 ))(fun_app$b ?v0 ?v2 ))(forall ((?v3 A$ ))(=> (and (member$ ?v3 (set$ ?v1 ))(fun_app$b ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (member$ ?v0 (lset$ (ltl$ ?v1 )))(member$ ?v0 (lset$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$ (lmap$ ?v0 ?v1 ))(lmap$ ?v0 (ltl$ ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ (ltl$ ?v0 ))(lfinite$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a17 ))
(assert (! (= (llist_all2$ uu$ )uua$ ):named a18 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_list$ ))(= (can_select$ ?v0 (set$ ?v1 ))(list_ex1$ ?v0 ?v1 ))):named a19 ))
(check-sat )
;(get-unsat-core )
