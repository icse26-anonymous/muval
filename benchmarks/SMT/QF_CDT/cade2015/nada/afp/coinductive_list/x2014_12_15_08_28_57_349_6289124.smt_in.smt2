;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun r$ ()A_a_bool_fun_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$b (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$c (Enat_enat_bool_fun_fun$ Enat$ )Enat_bool_fun$ )
(assert (! (not (and (not (lnull$ ysa$ ))(=> (not (lnull$ ysa$ ))(or (fun_app$ (fun_app$a r$ (lhd$ xsa$ ))(lhd$ ysa$ ))(and (= (lhd$ xsa$ )(lhd$ ysa$ ))(or (and (less_eq$ (llength$ (ltl$ xsa$ ))(llength$ (ltl$ ysa$ )))(= (ltake$ (llength$ (ltl$ xsa$ ))(ltl$ ysa$ ))(ltl$ xsa$ )))(llexord$ r$ (ltl$ xsa$ )(ltl$ ysa$ )))))))):named a0 ))
(assert (! (not (lnull$ xsa$ )):named a1 ))
(assert (! (and (less_eq$ (llength$ xsa$ )(llength$ ysa$ ))(= (ltake$ (llength$ xsa$ )ysa$ )xsa$ )):named a2 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$ ?v0 ?v1 ?v1 )):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_llist$ ))(! (=> (lnull$ ?v0 )(= (llexord$ ?v1 ?v2 ?v0 )(lnull$ ?v2 ))):pattern ((llexord$ ?v1 ?v2 ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (=> (or (lnull$ ?v0 )(not (fun_app$ ?v1 (lhd$ ?v0 ))))false )(=> (and (not (lnull$ ?v0 ))(fun_app$ ?v1 (lhd$ ?v0 )))false ))false )):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a6 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a9 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (less_eq$ ?v3 ?v4 )(fun_app$b (fun_app$c ?v0 ?v3 )?v4 )))(=> (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(fun_app$b (fun_app$c ?v0 ?v2 )?v1 )))(fun_app$b (fun_app$c ?v0 ?v2 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (forall ((?v3 A$ )(?v4 A$ ))(or (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(or (= ?v3 ?v4 )(fun_app$ (fun_app$a ?v0 ?v4 )?v3 ))))(or (llexord$ ?v0 ?v1 ?v2 )(llexord$ ?v0 ?v2 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (llexord$ ?v0 ?v1 ?v2 )(and (llexord$ ?v0 ?v2 ?v3 )(forall ((?v4 A$ )(?v5 A$ )(?v6 A$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v4 )?v5 )(fun_app$ (fun_app$a ?v0 ?v5 )?v6 ))(fun_app$ (fun_app$a ?v0 ?v4 )?v6 )))))(llexord$ ?v0 ?v1 ?v3 ))):named a12 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (llexord$ ?v0 ?v1 ?v2 )(and (llexord$ ?v0 ?v2 ?v1 )(forall ((?v3 A$ )(?v4 A$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(fun_app$ (fun_app$a ?v0 ?v4 )?v3 ))false ))))(= ?v1 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Enat$ ))(=> (and (= (ltake$ ?v0 ?v1 )(ltake$ ?v0 ?v2 ))(less_eq$ ?v3 ?v0 ))(= (ltake$ ?v3 ?v1 )(ltake$ ?v3 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (= (lnull$ ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(= (ltl$ ?v0 )(ltl$ ?v1 )))))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$ ?v0 )?v1 )(= (ltake$ ?v1 ?v0 )?v0 )):pattern ((ltake$ ?v1 ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_llist$ ))(=> (lnull$ ?v0 )(llexord$ ?v1 ?v0 ?v2 ))):named a17 ))
(check-sat )
;(get-unsat-core )
