;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun m$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun na$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun plus$a (Enat$ Enat$ )Enat$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(assert (! (not (less$ (enat$ (plus$ na$ m$ ))(llength$ xs$ ))):named a0 ))
(assert (! (=> (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (= xsa$ (lCons$ ?v0 ?v1 ))false ))false ):named a1 ))
(assert (! (= xsa$ (lCons$ x$ xs$ )):named a2 ))
(assert (! (less$ (enat$ (plus$ (suc$ na$ )m$ ))(llength$ xsa$ )):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(less$a ?v0 ?v2 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(less$a ?v1 ?v2 ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (less$ (enat$ (plus$ na$ m$ ))(llength$ ?v0 ))(= (lnth$ (ldropn$ na$ ?v0 )m$ )(lnth$ ?v0 (plus$ m$ na$ ))))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (= ?v0 ?v1 )(less$a ?v2 ?v3 ))(less$a (plus$ ?v0 ?v2 )(plus$ ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (less$a ?v0 ?v1 )(= ?v2 ?v3 ))(less$a (plus$ ?v0 ?v2 )(plus$ ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (less$a ?v0 ?v1 )(less$a ?v2 ?v3 ))(less$a (plus$ ?v0 ?v2 )(plus$ ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (less$a (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(less$a ?v0 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (plus$a (enat$ ?v0 )(enat$ ?v1 ))(enat$ (plus$ ?v0 ?v1 ))):pattern ((plus$a (enat$ ?v0 )(enat$ ?v1 ))))):named a16 ))
(check-sat )
;(get-unsat-core )
