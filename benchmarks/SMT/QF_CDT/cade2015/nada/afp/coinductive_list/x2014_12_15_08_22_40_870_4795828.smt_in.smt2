;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_fun_set$ 0 )
(declare-sort A_llist_set_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_set_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun f$ ()A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun p$ ()A_bool_fun$ )
(declare-fun uu$ (A_llist$ )A_llist_a_llist_fun_a_llist_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun fixp$ (A_llist_a_llist_fun_set_a_llist_a_llist_fun_fun$ )A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun_fun$ )
(declare-fun lSup$ ()A_llist_set_a_llist_fun$ )
(declare-fun chain$ (A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ A_llist_a_llist_fun_set$ )Bool )
(declare-fun member$ (A_llist_a_llist_fun$ A_llist_a_llist_fun_set$ )Bool )
(declare-fun transp$ (A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun_a_llist_fun$ A_llist_a_llist_fun$ )A_llist$ )
(declare-fun fun_lub$ (A_llist_set_a_llist_fun$ )A_llist_a_llist_fun_set_a_llist_a_llist_fun_fun$ )
(declare-fun fun_ord$ (A_llist_a_llist_bool_fun_fun$ )A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$c (A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$d (A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun_fun$ A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ )A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ )
(declare-fun fun_app$e (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$f (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$g (A_llist_a_llist_fun_bool_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun fun_app$h (A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ A_llist_a_llist_fun$ )A_llist_a_llist_fun_bool_fun$ )
(declare-fun fun_app$i (A_llist_a_llist_fun_set_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun_set$ )A_llist_a_llist_fun$ )
(declare-fun monotone$ (A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun_a_llist_fun$ )Bool )
(declare-fun ltakeWhile$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lub_singleton$ (A_llist_a_llist_fun_set_a_llist_a_llist_fun_fun$ )Bool )
(declare-fun finite_lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun partial_function_definitions$ (A_llist_a_llist_bool_fun_fun$ A_llist_set_a_llist_fun$ )Bool )
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_a_llist_fun$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(fun_app$a (fun_app$b f$ ?v1 )?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (= (fun_app$a (ltakeWhile$ p$ )xs$ )(fun_app$a (fun_app$c (fun_app$d (fixp$ (fun_lub$ lSup$ ))(fun_ord$ lprefix$ ))f$ )xs$ ))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$e (fun_app$f lprefix$ ?v0 )?v0 )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$e (fun_app$f lprefix$ ?v0 )?v0 )):named a3 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_a_llist_fun$ ))(=> (and (fun_app$g (fun_app$h (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$g (fun_app$h (fun_ord$ lprefix$ )?v1 )?v2 ))(fun_app$g (fun_app$h (fun_ord$ lprefix$ )?v0 )?v2 ))):named a4 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_a_llist_fun$ ))(=> (and (fun_app$g (fun_app$h (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$g (fun_app$h (fun_ord$ lprefix$ )?v1 )?v0 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v2 )?v1 ))(or (fun_app$e (fun_app$f lprefix$ ?v0 )?v2 )(fun_app$e (fun_app$f lprefix$ ?v2 )?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v1 )?v2 ))(fun_app$e (fun_app$f lprefix$ ?v0 )?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v1 )?v2 ))(fun_app$e (fun_app$f lprefix$ ?v0 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ ))(fun_app$g (fun_app$h (fun_ord$ lprefix$ )?v0 )?v0 )):named a11 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun_set$ )(?v1 A_llist_a_llist_fun$ ))(=> (and (chain$ (fun_ord$ lprefix$ )?v0 )(forall ((?v2 A_llist_a_llist_fun$ ))(=> (member$ ?v2 ?v0 )(fun_app$g (fun_app$h (fun_ord$ lprefix$ )?v2 )?v1 ))))(fun_app$g (fun_app$h (fun_ord$ lprefix$ )(fun_app$i (fun_lub$ lSup$ )?v0 ))?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun_set$ )(?v1 A_llist_a_llist_fun$ ))(=> (and (chain$ (fun_ord$ lprefix$ )?v0 )(member$ ?v1 ?v0 ))(fun_app$g (fun_app$h (fun_ord$ lprefix$ )?v1 )(fun_app$i (fun_lub$ lSup$ )?v0 )))):named a13 ))
(assert (! (lub_singleton$ (fun_lub$ lSup$ )):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(monotone$ (fun_ord$ lprefix$ )lprefix$ (uu$ ?v0 ))):named a15 ))
(assert (! (= finite_lprefix$ lprefix$ ):named a16 ))
(assert (! (transp$ (fun_ord$ lprefix$ )):named a17 ))
(assert (! (partial_function_definitions$ lprefix$ lSup$ ):named a18 ))
(check-sat )
;(get-unsat-core )
