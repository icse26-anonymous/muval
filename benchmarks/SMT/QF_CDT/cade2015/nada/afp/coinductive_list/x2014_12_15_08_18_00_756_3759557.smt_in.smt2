;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun n$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun one$ ()Nat$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun zero$ ()Nat$ )
(declare-fun minus$ (Nat$ )Nat_nat_fun$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(assert (! (not (= (lnth$ (lCons$ x$ xs$ )n$ )(ite (= n$ zero$ )x$ (lnth$ xs$ (fun_app$ (minus$ n$ )one$ ))))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lnth$ (lCons$ ?v0 ?v1 )zero$ )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (minus$ ?v0 )?v0 )zero$ ):pattern ((minus$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (minus$ zero$ )?v0 )zero$ ):pattern ((fun_app$ (minus$ zero$ )?v0 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (minus$ ?v0 )zero$ )?v0 )):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (minus$ ?v0 )zero$ )?v0 )):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (minus$ ?v0 )?v0 )zero$ ):pattern ((minus$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (minus$ zero$ )?v0 )zero$ )):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a9 ))
(check-sat )
;(get-unsat-core )
