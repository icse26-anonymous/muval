;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_set_a_fun$ 0 )
(declare-sort A_b_llist_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort B_llist_set_b_llist_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort B_llist$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-sort A_list$ 0)
(declare-sort B_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun nil$a ()B_list$)
(declare-fun hd$a (B_list$)B$)
(declare-fun tl$a (B_list$)B_list$)
(declare-fun cons$a (B$ B_list$ )B_list$)
(declare-fun f$ ()A_b_llist_fun$ )
(declare-fun y$ ()A_set$ )
(declare-fun bot$ ()A_set$ )
(declare-fun lub$ ()A_set_a_fun$ )
(declare-fun ord$ ()A_a_bool_fun_fun$ )
(declare-fun lSup$ ()B_llist_set_b_llist_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun chain$ (A_a_bool_fun_fun$ A_set$ )Bool )
(declare-fun lset$a (B_llist$ )B_set$ )
(declare-fun mcont$ (A_set_a_fun$ A_a_bool_fun_fun$ B_llist_set_b_llist_fun$ B_llist_b_llist_bool_fun_fun$ A_b_llist_fun$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_b_llist_fun$ A$ )B_llist$ )
(declare-fun lprefix$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun member$a (B$ B_set$ )Bool )
(declare-fun distinct$ (A_list$ )Bool )
(declare-fun fun_app$a (A_set_a_fun$ A_set$ )A$ )
(declare-fun fun_app$b (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$c (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun lprefix$a (A_llist$ A_llist$ )Bool )
(declare-fun distinct$a (B_list$ )Bool )
(declare-fun ldistinct$ (B_llist$ )Bool )
(declare-fun llist_of$a (B_list$ )B_llist$ )
(declare-fun ldistinct$a (A_llist$ )Bool )
(assert (! (not (ldistinct$ (fun_app$ f$ (fun_app$a lub$ y$ )))):named a0 ))
(assert (! (not (= y$ bot$ )):named a1 ))
(assert (! (chain$ ord$ y$ ):named a2 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 y$ )(ldistinct$ (fun_app$ f$ ?v0 )))):named a3 ))
(assert (! (= (ldistinct$a lNil$a )true ):named a4 ))
(assert (! (= (ldistinct$ lNil$ )true ):named a5 ))
(assert (! (mcont$ lub$ ord$ lSup$ lprefix$ f$ ):named a6 ))
(assert (! (ldistinct$a lNil$a ):named a7 ))
(assert (! (ldistinct$ lNil$ ):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (ldistinct$a ?v0 )(ldistinct$a (ltl$a ?v0 )))):named a9 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (ltl$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_list$ ))(= (ldistinct$a (llist_of$ ?v0 ))(distinct$ ?v0 ))):named a11 ))
(assert (! (forall ((?v0 B_list$ ))(= (ldistinct$ (llist_of$a ?v0 ))(distinct$a ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (ldistinct$a (lCons$a ?v0 ?v1 ))(and (not (member$ ?v0 (lset$ ?v1 )))(ldistinct$a ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (ldistinct$ (lCons$ ?v0 ?v1 ))(and (not (member$a ?v0 (lset$a ?v1 )))(ldistinct$ ?v1 ))):pattern ((lCons$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (and (not (member$ ?v0 (lset$ ?v1 )))(ldistinct$a ?v1 ))(ldistinct$a (lCons$a ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(=> (and (not (member$a ?v0 (lset$a ?v1 )))(ldistinct$ ?v1 ))(ldistinct$ (lCons$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$a ?v0 ?v0 )):named a17 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v0 )):named a18 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$a ?v0 ?v0 )):named a19 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v0 )):named a20 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (lprefix$a (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(lprefix$a ?v1 ?v3 ))):pattern ((lprefix$a (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))))):named a25 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(! (= (fun_app$b (fun_app$c lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$b (fun_app$c lprefix$ ?v1 )?v3 ))):pattern ((fun_app$b (fun_app$c lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a26 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$a lNil$a ?v0 )true ):pattern ((lprefix$a lNil$a ?v0 )))):named a27 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$b (fun_app$c lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$b (fun_app$c lprefix$ lNil$ )?v0 )))):named a28 ))
(check-sat )
;(get-unsat-core )
