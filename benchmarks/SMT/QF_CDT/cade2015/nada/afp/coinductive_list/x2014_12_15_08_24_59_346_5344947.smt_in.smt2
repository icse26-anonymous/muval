;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort B_llist$ 0)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun n$ ()Nat$ )
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun lnth$a (B_llist$ Nat$ )B$ )
(declare-fun lnull$ (B_llist$ )Bool )
(declare-fun ltake$ (Enat$ B_llist$ )B_llist$ )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$b (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$c (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun iterates$ (B_b_fun$ B$ )B_llist$ )
(declare-fun lappend$a (B_llist$ )B_llist_b_llist_fun$ )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun iterates$a (A_a_fun$ A$ )A_llist$ )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(assert (! (not (= (lnth$ (fun_app$ (lappend$ xs$ )xs$a )n$ )(lnth$ xs$ n$ ))):named a0 ))
(assert (! (less$ (enat$ n$ )(llength$ xs$ )):named a1 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$a (lappend$a (fun_app$a (lappend$a ?v0 )?v1 ))?v2 )(fun_app$a (lappend$a ?v0 )(fun_app$a (lappend$a ?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0 )?v1 ))?v2 )(fun_app$ (lappend$ ?v0 )(fun_app$ (lappend$ ?v1 )?v2 )))):named a3 ))
(assert (! (less$ (enat$ n$ )(llength$ (fun_app$ (lappend$ xs$ )xs$a ))):named a4 ))
(assert (! (less_eq$ (llength$ xs$ )(llength$ (fun_app$ (lappend$ xs$ )xs$a ))):named a5 ))
(assert (! (fun_app$b (fun_app$c p$ (lnth$ (fun_app$ (lappend$ xs$ )xs$a )n$ ))(lnth$a ys$ n$ )):named a6 ))
(assert (! (llist_all2$ p$ (fun_app$ (lappend$ xs$ )xs$a )ys$ ):named a7 ))
(assert (! (fun_app$b (fun_app$c p$ (lnth$ (fun_app$ (lappend$ xs$ )xs$a )n$ ))(lnth$a (ltake$ (llength$ xs$ )ys$ )n$ )):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (lnth$ (fun_app$ (lappend$ ?v1 )?v2 )?v0 )(lnth$ ?v1 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (less$ (enat$ ?v0 )(llength$a ?v1 ))(= (lnth$a (fun_app$a (lappend$a ?v1 )?v2 )?v0 )(lnth$a ?v1 ?v0 )))):named a10 ))
(assert (! (= (plus$ (llength$ xs$ )(llength$ xs$a ))(llength$a ys$ )):named a11 ))
(assert (! (= (lnth$a ys$ n$ )(lnth$a (ltake$ (llength$ xs$ )ys$ )n$ )):named a12 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$a (lappend$a ?v0 )lNil$a )?v0 ):pattern ((lappend$a ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$a (lappend$a lNil$a )?v0 )?v0 ):pattern ((fun_app$a (lappend$a lNil$a )?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ lNil$ )?v0 )?v0 ):pattern ((fun_app$ (lappend$ lNil$ )?v0 )))):named a16 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_llist$ ))(= (fun_app$a (lappend$a (iterates$ ?v0 ?v1 ))?v2 )(iterates$ ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_llist$ ))(= (fun_app$ (lappend$ (iterates$a ?v0 ?v1 ))?v2 )(iterates$a ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$ (fun_app$a (lappend$a ?v0 )?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$a (fun_app$ (lappend$ ?v0 )?v1 )))(or (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a20 ))
(assert (! (less_eq$ (llength$ xs$ )(llength$a ys$ )):named a21 ))
(assert (! (less_eq$ (llength$ xs$a )(llength$a ys$ )):named a22 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$ (fun_app$a (lappend$a ?v0 )?v1 ))(and (lnull$ ?v0 )(lnull$ ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$a (fun_app$ (lappend$ ?v0 )?v1 ))(and (lnull$a ?v0 )(lnull$a ?v1 )))):named a24 ))
(check-sat )
;(get-unsat-core )
