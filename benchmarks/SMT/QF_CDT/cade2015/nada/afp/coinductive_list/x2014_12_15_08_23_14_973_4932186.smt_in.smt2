;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_llist_a_llist_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-sort A_llist_llist_llist$ 0)
(declare-sort A_llist_llist_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun lNil$c ()A_llist_llist_llist_llist$)
(declare-fun lhd$c (A_llist_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun ltl$c (A_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun lCons$c (A_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$)
(declare-fun id$ ()A_llist_a_llist_fun$ )
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun id$a ()A_llist_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun id$b ()A_llist_llist_a_llist_llist_fun$ )
(declare-fun id$c ()A_a_fun$ )
(declare-fun id$d ()A_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ )
(declare-fun uua$ ()A_llist_llist_a_llist_llist_fun$ )
(declare-fun uub$ ()A_llist_a_llist_fun$ )
(declare-fun uuc$ ()A_a_fun$ )
(declare-fun lmap$ (A_llist_llist_llist_a_llist_llist_llist_fun$ )A_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lmap$a (A_llist_llist_a_llist_llist_fun$ )A_llist_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun lmap$b (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lmap$c (A_llist_a_llist_fun$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun lmap$d (A_llist_a_fun$ A_llist_llist$ )A_llist$ )
(declare-fun lmap$e (A_a_llist_fun$ A_llist$ )A_llist_llist$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_llist_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$d (A_llist_llist_llist_a_llist_llist_llist_fun$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun fun_app$e (A_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$ )
(declare-fun ldropWhile$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun ldropWhile$a (A_llist_bool_fun$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun iso_tuple_surjective_proof_assist$ (A_llist_llist_llist$ A_llist_llist_llist$ A_llist_llist_llist_a_llist_llist_llist_fun$ )Bool )
(declare-fun iso_tuple_surjective_proof_assist$a (A_llist_llist$ A_llist_llist$ A_llist_llist_a_llist_llist_fun$ )Bool )
(declare-fun iso_tuple_surjective_proof_assist$b (A$ A$ A_a_fun$ )Bool )
(declare-fun iso_tuple_surjective_proof_assist$c (A_llist$ A_llist$ A_llist_a_llist_fun$ )Bool )
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$ uua$ ?v0 )?v0 ):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a uub$ ?v0 )?v0 ):pattern ((fun_app$a uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b uuc$ ?v0 )?v0 ):pattern ((fun_app$b uuc$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$c uu$ ?v0 )false ):pattern ((fun_app$c uu$ ?v0 )))):named a3 ))
(assert (! (not (= (ldropWhile$ uu$ )id$ )):named a4 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(! (= (fun_app$d id$a ?v0 )?v0 ):pattern ((fun_app$d id$a ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$ id$b ?v0 )?v0 ):pattern ((fun_app$ id$b ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b id$c ?v0 )?v0 ):pattern ((fun_app$b id$c ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a id$ ?v0 )?v0 ):pattern ((fun_app$a id$ ?v0 )))):named a8 ))
(assert (! (= (lmap$ id$a )id$d ):named a9 ))
(assert (! (= (lmap$a id$b )id$a ):named a10 ))
(assert (! (= (lmap$b id$c )id$ ):named a11 ))
(assert (! (= (lmap$c id$ )id$b ):named a12 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(! (= (fun_app$d id$a ?v0 )?v0 ):pattern ((fun_app$d id$a ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$ id$b ?v0 )?v0 ):pattern ((fun_app$ id$b ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b id$c ?v0 )?v0 ):pattern ((fun_app$b id$c ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a id$ ?v0 )?v0 ):pattern ((fun_app$a id$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(! (= (fun_app$ (ldropWhile$a ?v0 )lNil$a )lNil$a ):pattern ((ldropWhile$a ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$a (ldropWhile$ ?v0 )lNil$ )lNil$ ):pattern ((ldropWhile$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$a (ldropWhile$ ?v0 )(lCons$ ?v1 ?v2 ))(ite (fun_app$c ?v0 ?v1 )(fun_app$a (ldropWhile$ ?v0 )?v2 )(lCons$ ?v1 ?v2 ))):pattern ((fun_app$a (ldropWhile$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (fun_app$a (ldropWhile$ ?v1 )?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (iso_tuple_surjective_proof_assist$ ?v0 ?v1 id$a )(= ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (iso_tuple_surjective_proof_assist$a ?v0 ?v1 id$b )(= ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (iso_tuple_surjective_proof_assist$b ?v0 ?v1 id$c )(= ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (iso_tuple_surjective_proof_assist$c ?v0 ?v1 id$ )(= ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ ))(= (fun_app$e (lmap$ id$a )?v0 )?v0 )):named a25 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(= (fun_app$d (lmap$a id$b )?v0 )?v0 )):named a26 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$a (lmap$b id$c )?v0 )?v0 )):named a27 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (fun_app$ (lmap$c id$ )?v0 )?v0 )):named a28 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a29 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(= (fun_app$d (lmap$a uua$ )?v0 )?v0 )):named a30 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (fun_app$ (lmap$c uub$ )?v0 )?v0 )):named a31 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$a (lmap$b uuc$ )?v0 )?v0 )):named a32 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_a_fun$ ))(! (= (iso_tuple_surjective_proof_assist$b ?v0 ?v1 ?v2 )(= (fun_app$b ?v2 ?v0 )?v1 )):pattern ((iso_tuple_surjective_proof_assist$b ?v0 ?v1 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_a_llist_llist_fun$ ))(! (= (iso_tuple_surjective_proof_assist$a ?v0 ?v1 ?v2 )(= (fun_app$ ?v2 ?v0 )?v1 )):pattern ((iso_tuple_surjective_proof_assist$a ?v0 ?v1 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_a_llist_fun$ ))(! (= (iso_tuple_surjective_proof_assist$c ?v0 ?v1 ?v2 )(= (fun_app$a ?v2 ?v0 )?v1 )):pattern ((iso_tuple_surjective_proof_assist$c ?v0 ?v1 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (= (lmap$d ?v0 ?v1 )lNil$ )(= ?v1 lNil$a ))):named a36 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (= (lmap$e ?v0 ?v1 )lNil$a )(= ?v1 lNil$ ))):named a37 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_fun$ )(?v1 A_llist_llist_llist$ ))(= (= (fun_app$d (lmap$a ?v0 )?v1 )lNil$b )(= ?v1 lNil$b ))):named a38 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist$ ))(= (= (fun_app$ (lmap$c ?v0 )?v1 )lNil$a )(= ?v1 lNil$a ))):named a39 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= (fun_app$a (lmap$b ?v0 )?v1 )lNil$ )(= ?v1 lNil$ ))):named a40 ))
(check-sat )
;(get-unsat-core )
