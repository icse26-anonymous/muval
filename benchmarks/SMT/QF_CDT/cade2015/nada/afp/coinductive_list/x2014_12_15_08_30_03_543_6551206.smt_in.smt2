;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_bool_fun_fun$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_bool_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun q$ ()A_bool_fun$ )
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun uua$ ()A_bool_fun$ )
(declare-fun uub$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uuc$ (A_llist_a_llist_fun$ )A_bool_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uud$ ()A_bool_fun$ )
(declare-fun uue$ (A_bool_fun$ )A_llist_a_bool_fun_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lfilter$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_bool_fun_fun$ A_llist$ )A_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun fun_app$c (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$d (A_bool_fun_a_llist_a_llist_fun_fun$ A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$e (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$f (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun monotone$ (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun finite_lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(and (fun_app$ p$ ?v0 )(fun_app$ q$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$a (uue$ ?v0 )?v1 )?v2 )(and (member$ ?v2 (lset$ ?v1 ))(fun_app$ ?v0 ?v2 ))):pattern ((fun_app$ (fun_app$a (uue$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$b (uub$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uub$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(! (= (fun_app$c (fun_app$d (uuc$ ?v0 )?v1 )?v2 )(fun_app$c (lfilter$ ?v1 )(fun_app$c ?v0 ?v2 ))):pattern ((fun_app$c (fun_app$d (uuc$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uud$ ?v0 )false ):pattern ((fun_app$ uud$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uua$ ?v0 )true ):pattern ((fun_app$ uua$ ?v0 )))):named a5 ))
(assert (! (not (forall ((?v0 A_llist$ ))(fun_app$e (fun_app$f lprefix$ (fun_app$c (lfilter$ uu$ )?v0 ))(fun_app$c (lfilter$ p$ )(fun_app$c (lfilter$ q$ )?v0 ))))):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$e (fun_app$f lprefix$ ?v0 )?v0 )):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$e (fun_app$f lprefix$ ?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$c (lfilter$ uua$ )?v0 )?v0 )):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$e (fun_app$f lprefix$ (fun_app$c (lfilter$ p$ )(fun_app$c (lfilter$ q$ )?v0 )))(fun_app$c (lfilter$ uu$ )?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(= (fun_app$c (lfilter$ ?v0 )(fun_app$c (lfilter$ ?v1 )?v2 ))(fun_app$c (lfilter$ (fun_app$b (uub$ ?v0 )?v1 ))?v2 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v2 )?v1 ))(or (fun_app$e (fun_app$f lprefix$ ?v0 )?v2 )(fun_app$e (fun_app$f lprefix$ ?v2 )?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v1 )?v2 ))(fun_app$e (fun_app$f lprefix$ ?v0 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v1 )?v2 ))(fun_app$e (fun_app$f lprefix$ ?v0 )?v2 ))):named a16 ))
(assert (! (= finite_lprefix$ lprefix$ ):named a17 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_bool_fun$ ))(=> (monotone$ ?v0 lprefix$ ?v1 )(monotone$ ?v0 lprefix$ (fun_app$d (uuc$ ?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$c (lfilter$ uud$ )?v0 )lNil$ )):named a19 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(monotone$ lprefix$ lprefix$ (lfilter$ ?v0 ))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (lstrict_prefix$ ?v0 ?v1 )(and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((lstrict_prefix$ ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lset$ (fun_app$c (lfilter$ ?v0 )?v1 ))(collect$ (fun_app$a (uue$ ?v0 )?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$c (lfilter$ ?v0 )lNil$ )lNil$ ):pattern ((lfilter$ ?v0 )))):named a23 ))
(check-sat )
;(get-unsat-core )
