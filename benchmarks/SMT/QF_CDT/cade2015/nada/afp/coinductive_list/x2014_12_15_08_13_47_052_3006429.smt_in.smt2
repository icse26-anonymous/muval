;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-sort A_list_b_list_fun$ 0 )
(declare-sort B_list_a_list_fun$ 0 )
(declare-sort B_list_b_list_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun$ 0 )
(declare-sort B_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_a_fun_a_list_a_list_fun_fun$ 0 )
(declare-sort A_b_fun_a_list_b_list_fun_fun$ 0 )
(declare-sort B_a_fun_b_list_a_list_fun_fun$ 0 )
(declare-sort B_b_fun_b_list_b_list_fun_fun$ 0 )
(declare-sort B_list$ 0)
(declare-fun nil$ ()B_list$)
(declare-fun hd$ (B_list$)B$)
(declare-fun tl$ (B_list$)B_list$)
(declare-fun cons$ (B$ B_list$ )B_list$)
(declare-sort B_llist$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-sort A_list$ 0)
(declare-fun nil$a ()A_list$)
(declare-fun hd$a (A_list$)A$)
(declare-fun tl$a (A_list$)A_list$)
(declare-fun cons$a (A$ A_list$ )A_list$)
(declare-fun f$ ()A_b_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun map$ ()A_b_fun_a_list_b_list_fun_fun$ )
(declare-fun lmap$ (A_b_fun$ )A_llist_b_llist_fun$ )
(declare-fun lset$ (B_llist$ )B_set$ )
(declare-fun map$a ()B_a_fun_b_list_a_list_fun_fun$ )
(declare-fun map$b ()B_b_fun_b_list_b_list_fun_fun$ )
(declare-fun map$c ()A_a_fun_a_list_a_list_fun_fun$ )
(declare-fun lmap$a (B_a_fun$ )B_llist_a_llist_fun$ )
(declare-fun lmap$b (B_b_fun$ )B_llist_b_llist_fun$ )
(declare-fun lmap$c (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lnull$ (B_llist$ )Bool )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun member$ (B$ B_set$ )Bool )
(declare-fun fun_app$ (A_llist_b_llist_fun$ A_llist$ )B_llist$ )
(declare-fun lappend$ (B_llist$ )B_llist_b_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (B_llist$ )B_list$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_list_b_list_fun$ A_list$ )B_list$ )
(declare-fun fun_app$b (A_b_fun_a_list_b_list_fun_fun$ A_b_fun$ )A_list_b_list_fun$ )
(declare-fun fun_app$c (B_llist_a_llist_fun$ B_llist$ )A_llist$ )
(declare-fun fun_app$d (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$e (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$f (B_list_a_list_fun$ B_list$ )A_list$ )
(declare-fun fun_app$g (B_a_fun_b_list_a_list_fun_fun$ B_a_fun$ )B_list_a_list_fun$ )
(declare-fun fun_app$h (B_list_b_list_fun$ B_list$ )B_list$ )
(declare-fun fun_app$i (B_b_fun_b_list_b_list_fun_fun$ B_b_fun$ )B_list_b_list_fun$ )
(declare-fun fun_app$j (A_list_a_list_fun$ A_list$ )A_list$ )
(declare-fun fun_app$k (A_a_fun_a_list_a_list_fun_fun$ A_a_fun$ )A_list_a_list_fun$ )
(declare-fun fun_app$l (B_b_fun$ B$ )B$ )
(declare-fun fun_app$m (B_a_fun$ B$ )A$ )
(declare-fun fun_app$n (A_a_fun$ A$ )A$ )
(declare-fun fun_app$o (A_b_fun$ A$ )B$ )
(declare-fun lappend$a (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun list_of$a (A_llist$ )A_list$ )
(declare-fun llist_of$ (B_list$ )B_llist$ )
(declare-fun llist_of$a (A_list$ )A_llist$ )
(declare-fun map_tailrec$ ()A_a_fun_a_list_a_list_fun_fun$ )
(declare-fun map_tailrec$a ()B_b_fun_b_list_b_list_fun_fun$ )
(declare-fun map_tailrec$b ()B_a_fun_b_list_a_list_fun_fun$ )
(declare-fun map_tailrec$c ()A_b_fun_a_list_b_list_fun_fun$ )
(assert (! (not (= (list_of$ (fun_app$ (lmap$ f$ )xs$ ))(fun_app$a (fun_app$b map$ f$ )(list_of$a xs$ )))):named a0 ))
(assert (! (lfinite$ xs$ ):named a1 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lfinite$ (fun_app$c (lmap$a ?v0 )?v1 ))(lfinite$a ?v1 ))):named a2 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lfinite$a (fun_app$d (lmap$b ?v0 )?v1 ))(lfinite$a ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$e (lmap$c ?v0 )?v1 ))(lfinite$ ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lfinite$a (fun_app$ (lmap$ ?v0 )?v1 ))(lfinite$ ?v1 ))):named a5 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_list$ ))(= (fun_app$c (lmap$a ?v0 )(llist_of$ ?v1 ))(llist_of$a (fun_app$f (fun_app$g map$a ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_list$ ))(= (fun_app$d (lmap$b ?v0 )(llist_of$ ?v1 ))(llist_of$ (fun_app$h (fun_app$i map$b ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (fun_app$e (lmap$c ?v0 )(llist_of$a ?v1 ))(llist_of$a (fun_app$j (fun_app$k map$c ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_list$ ))(= (fun_app$ (lmap$ ?v0 )(llist_of$a ?v1 ))(llist_of$ (fun_app$a (fun_app$b map$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 B_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a10 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$a (llist_of$a ?v0 ))?v0 )):named a11 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (lfinite$a ?v0 )(= (llist_of$ (list_of$ ?v0 ))?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(= (llist_of$a (list_of$a ?v0 ))?v0 ))):named a13 ))
(assert (! (= map$c map_tailrec$ ):named a14 ))
(assert (! (= map$b map_tailrec$a ):named a15 ))
(assert (! (= map$a map_tailrec$b ):named a16 ))
(assert (! (= map$ map_tailrec$c ):named a17 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$ (fun_app$d (lmap$b ?v0 )?v1 ))(lnull$ ?v1 ))):named a18 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$a (fun_app$c (lmap$a ?v0 )?v1 ))(lnull$ ?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$a (fun_app$e (lmap$c ?v0 )?v1 ))(lnull$a ?v1 ))):named a20 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (lmap$ ?v0 )?v1 ))(lnull$a ?v1 ))):named a21 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (ltl$ (fun_app$d (lmap$b ?v0 )?v1 ))(fun_app$d (lmap$b ?v0 )(ltl$ ?v1 )))):named a22 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$a (fun_app$c (lmap$a ?v0 )?v1 ))(fun_app$c (lmap$a ?v0 )(ltl$ ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$a (fun_app$e (lmap$c ?v0 )?v1 ))(fun_app$e (lmap$c ?v0 )(ltl$a ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (ltl$ (fun_app$ (lmap$ ?v0 )?v1 ))(fun_app$ (lmap$ ?v0 )(ltl$a ?v1 )))):named a25 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$c (lmap$a ?v0 )(fun_app$d (lappend$ ?v1 )?v2 ))(fun_app$e (lappend$a (fun_app$c (lmap$a ?v0 )?v1 ))(fun_app$c (lmap$a ?v0 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$d (lmap$b ?v0 )(fun_app$d (lappend$ ?v1 )?v2 ))(fun_app$d (lappend$ (fun_app$d (lmap$b ?v0 )?v1 ))(fun_app$d (lmap$b ?v0 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$e (lmap$c ?v0 )(fun_app$e (lappend$a ?v1 )?v2 ))(fun_app$e (lappend$a (fun_app$e (lmap$c ?v0 )?v1 ))(fun_app$e (lmap$c ?v0 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ (lmap$ ?v0 )(fun_app$e (lappend$a ?v1 )?v2 ))(fun_app$d (lappend$ (fun_app$ (lmap$ ?v0 )?v1 ))(fun_app$ (lmap$ ?v0 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= (fun_app$d (lmap$b ?v0 )?v1 )lNil$ )(= ?v1 lNil$ ))):named a30 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= (fun_app$c (lmap$a ?v0 )?v1 )lNil$a )(= ?v1 lNil$ ))):named a31 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= (fun_app$e (lmap$c ?v0 )?v1 )lNil$a )(= ?v1 lNil$a ))):named a32 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= (fun_app$ (lmap$ ?v0 )?v1 )lNil$ )(= ?v1 lNil$a ))):named a33 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= lNil$ (fun_app$d (lmap$b ?v0 )?v1 ))(= ?v1 lNil$ ))):named a34 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= lNil$a (fun_app$c (lmap$a ?v0 )?v1 ))(= ?v1 lNil$ ))):named a35 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= lNil$a (fun_app$e (lmap$c ?v0 )?v1 ))(= ?v1 lNil$a ))):named a36 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$ (lmap$ ?v0 )?v1 ))(= ?v1 lNil$a ))):named a37 ))
(assert (! (forall ((?v0 B_b_fun$ ))(! (= (fun_app$d (lmap$b ?v0 )lNil$ )lNil$ ):pattern ((lmap$b ?v0 )))):named a38 ))
(assert (! (forall ((?v0 B_a_fun$ ))(! (= (fun_app$c (lmap$a ?v0 )lNil$ )lNil$a ):pattern ((lmap$a ?v0 )))):named a39 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$e (lmap$c ?v0 )lNil$a )lNil$a ):pattern ((lmap$c ?v0 )))):named a40 ))
(assert (! (forall ((?v0 A_b_fun$ ))(! (= (fun_app$ (lmap$ ?v0 )lNil$a )lNil$ ):pattern ((lmap$ ?v0 )))):named a41 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (and (forall ((?v4 B$ )(?v5 B$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$l ?v2 ?v4 )(fun_app$l ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$d (lmap$b ?v2 )?v0 )(fun_app$d (lmap$b ?v3 )?v1 )))(= ?v0 ?v1 ))):named a42 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_a_fun$ )(?v3 B_a_fun$ ))(=> (and (forall ((?v4 B$ )(?v5 B$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$m ?v2 ?v4 )(fun_app$m ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$c (lmap$a ?v2 )?v0 )(fun_app$c (lmap$a ?v3 )?v1 )))(= ?v0 ?v1 ))):named a43 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$a ?v4 (lset$a ?v0 ))(and (member$a ?v5 (lset$a ?v1 ))(= (fun_app$n ?v2 ?v4 )(fun_app$n ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$e (lmap$c ?v2 )?v0 )(fun_app$e (lmap$c ?v3 )?v1 )))(= ?v0 ?v1 ))):named a44 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ )(?v3 A_b_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$a ?v4 (lset$a ?v0 ))(and (member$a ?v5 (lset$a ?v1 ))(= (fun_app$o ?v2 ?v4 )(fun_app$o ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$ (lmap$ ?v2 )?v0 )(fun_app$ (lmap$ ?v3 )?v1 )))(= ?v0 ?v1 ))):named a45 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a46 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a47 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$ (fun_app$d (lappend$ ?v0 )?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a48 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$a (fun_app$e (lappend$a ?v0 )?v1 )))(or (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a49 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$ (fun_app$d (lappend$ ?v0 )?v1 ))(and (lnull$ ?v0 )(lnull$ ?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$a (fun_app$e (lappend$a ?v0 )?v1 ))(and (lnull$a ?v0 )(lnull$a ?v1 )))):named a51 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$d (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a52 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$e (lappend$a ?v0 )lNil$a )?v0 ):pattern ((lappend$a ?v0 )))):named a53 ))
(check-sat )
;(get-unsat-core )
