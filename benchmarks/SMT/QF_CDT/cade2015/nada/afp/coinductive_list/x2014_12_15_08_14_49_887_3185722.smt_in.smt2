;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Enat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun zero$ ()Enat$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ltake$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(assert (! (not (= (lhd$ (fun_app$ (ltake$ n$ )xs$ ))(lhd$ xs$ ))):named a0 ))
(assert (! (not (= n$ zero$ )):named a1 ))
(assert (! (forall ((?v0 Enat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a2 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(=> (and (not (= ?v0 zero$ ))(not (lnull$ ?v1 )))(= (lhd$ (fun_app$ (ltake$ ?v0 )?v1 ))(lhd$ ?v1 )))):named a3 ))
(assert (! (forall ((?v0 Enat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a4 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$ (ltake$ ?v0 )?v1 ))(or (= ?v1 lNil$ )(= ?v0 zero$ )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$ (ltake$ zero$ )?v0 )lNil$ )):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (lhd$ (iterates$ ?v0 ?v1 ))?v1 )):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (not (lnull$ (fun_app$ (ltake$ ?v0 )?v1 )))(and (not (= ?v0 zero$ ))(not (lnull$ ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (ltake$ ?v0 )?v1 ))(or (= ?v0 zero$ )(lnull$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (ltake$ ?v0 )?v1 ))(or (lnull$ ?v1 )(= ?v0 zero$ )))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (= (fun_app$ (ltake$ ?v0 )?v1 )lNil$ )(or (= ?v1 lNil$ )(= ?v0 zero$ )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(=> (or (= ?v0 zero$ )(lnull$ ?v1 ))(lnull$ (fun_app$ (ltake$ ?v0 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ltake$ ?v0 )lNil$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lnull$ ?v0 )(= ?v0 lNil$ )):pattern ((lnull$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a15 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a17 ))
(check-sat )
;(get-unsat-core )
