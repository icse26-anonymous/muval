;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(assert (! (not (= (lnull$ (ltakeWhile$ p$ xs$ ))(=> (not (lnull$ xs$ ))(not (fun_app$ p$ (lhd$ xs$ )))))):named a0 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (not (lnull$ (ltakeWhile$ ?v0 ?v1 )))(and (not (lnull$ ?v1 ))(fun_app$ ?v0 (lhd$ ?v1 ))))):named a1 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$ (ltakeWhile$ ?v0 ?v1 ))(or (lnull$ ?v1 )(not (fun_app$ ?v0 (lhd$ ?v1 )))))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (=> (or (lnull$ ?v0 )(not (fun_app$ ?v1 (lhd$ ?v0 ))))false )(=> (and (not (lnull$ ?v0 ))(fun_app$ ?v1 (lhd$ ?v0 )))false ))false )):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a4 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (or (lnull$ ?v0 )(not (fun_app$ ?v1 (lhd$ ?v0 ))))(lnull$ (ltakeWhile$ ?v1 ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (not (lnull$ ?v0 ))(fun_app$ ?v1 (lhd$ ?v0 )))(= (lhd$ (ltakeWhile$ ?v1 ?v0 ))(lhd$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (not (lnull$ ?v0 ))(fun_app$ ?v1 (lhd$ ?v0 )))(not (lnull$ (ltakeWhile$ ?v1 ?v0 ))))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(! (=> (or (lnull$ ?v0 )(not (fun_app$ ?v1 (lhd$ ?v0 ))))(= (ltakeWhile$ ?v1 ?v0 )lNil$ )):pattern ((ltakeWhile$ ?v1 ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (not (lnull$ ?v0 ))(fun_app$ ?v1 (lhd$ ?v0 )))(= (ltl$ (ltakeWhile$ ?v1 ?v0 ))(ltakeWhile$ ?v1 (ltl$ ?v0 ))))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_fun$ ))(=> (not (lnull$ ?v0 ))(= (lhd$ (lmap$ ?v1 ?v0 ))(fun_app$a ?v1 (lhd$ ?v0 ))))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lhd$ (lappend$ ?v0 ?v1 ))(ite (lnull$ ?v0 )(lhd$ ?v1 )(lhd$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(not (lnull$ ?v0 )))(= (lhd$ ?v0 )(lhd$ ?v1 )))):named a15 ))
(check-sat )
;(get-unsat-core )
