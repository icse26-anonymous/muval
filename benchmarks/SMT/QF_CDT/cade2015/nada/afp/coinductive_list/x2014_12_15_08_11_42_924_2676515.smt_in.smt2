;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort B_llist_set$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_b_llist_fun$ 0 )
(declare-sort B_llist_set_b_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun_bool_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_set_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun_a_llist_b_llist_fun_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort B_llist$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun f$ ()A_b_fun$ )
(declare-fun f$a ()A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun fixp$ (A_llist_b_llist_fun_set_a_llist_b_llist_fun_fun$ )A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun_a_llist_b_llist_fun_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun_fun$ )
(declare-fun lSup$ ()B_llist_set_b_llist_fun$ )
(declare-fun lmap$ (A_b_fun$ )A_llist_b_llist_fun$ )
(declare-fun lSup$a (A_llist_set$ )A_llist$ )
(declare-fun lmap$a (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$b (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lnull$ (B_llist$ )Bool )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_b_llist_fun$ A_llist$ )B_llist$ )
(declare-fun fun_lub$ (B_llist_set_b_llist_fun$ )A_llist_b_llist_fun_set_a_llist_b_llist_fun_fun$ )
(declare-fun fun_ord$ (B_llist_b_llist_bool_fun_fun$ )A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ )
(declare-fun lprefix$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun member$a (B_llist$ B_llist_set$ )Bool )
(declare-fun fun_app$a (A_llist_b_llist_fun_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun$ A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$b (A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun_a_llist_b_llist_fun_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun_fun$ A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ )A_llist_b_llist_fun_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun$ )
(declare-fun fun_app$c (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$d (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$e (B_llist_set_b_llist_fun$ B_llist_set$ )B_llist$ )
(declare-fun fun_app$f (B_a_fun$ B$ )A$ )
(declare-fun fun_app$g (A_a_fun$ A$ )A$ )
(declare-fun fun_app$h (A_b_fun$ A$ )B$ )
(declare-fun fun_app$i (B_b_fun$ B$ )B$ )
(declare-fun fun_app$j (A_llist_b_llist_fun_bool_fun$ A_llist_b_llist_fun$ )Bool )
(declare-fun fun_app$k (A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ A_llist_b_llist_fun$ )A_llist_b_llist_fun_bool_fun$ )
(declare-fun lprefix$a (A_llist$ A_llist$ )Bool )
(assert (! (not (and (= (lnull$ (fun_app$ (lmap$ f$ )xsa$ ))(lnull$ (fun_app$ (fun_app$a (fun_app$b (fixp$ (fun_lub$ lSup$ ))(fun_ord$ lprefix$ ))f$a )xsa$ )))(=> (and (not (lnull$ (fun_app$ (lmap$ f$ )xsa$ )))(not (lnull$ (fun_app$ (fun_app$a (fun_app$b (fixp$ (fun_lub$ lSup$ ))(fun_ord$ lprefix$ ))f$a )xsa$ ))))(and (= (lhd$ (fun_app$ (lmap$ f$ )xsa$ ))(lhd$ (fun_app$ (fun_app$a (fun_app$b (fixp$ (fun_lub$ lSup$ ))(fun_ord$ lprefix$ ))f$a )xsa$ )))(exists ((?v0 A_llist$ ))(and (= (ltl$ (fun_app$ (lmap$ f$ )xsa$ ))(fun_app$ (lmap$ f$ )?v0 ))(= (ltl$ (fun_app$ (fun_app$a (fun_app$b (fixp$ (fun_lub$ lSup$ ))(fun_ord$ lprefix$ ))f$a )xsa$ ))(fun_app$ (fun_app$a (fun_app$b (fixp$ (fun_lub$ lSup$ ))(fun_ord$ lprefix$ ))f$a )?v0 )))))))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$a ?v0 ?v0 )):named a1 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$c (fun_app$d lprefix$ ?v0 )?v0 )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$a ?v0 ?v0 )):named a3 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$c (fun_app$d lprefix$ ?v0 )?v0 )):named a4 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (lnull$a (lSup$a ?v0 ))(forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$a ?v1 ))))):named a5 ))
(assert (! (forall ((?v0 B_llist_set$ ))(= (lnull$ (fun_app$e lSup$ ?v0 ))(forall ((?v1 B_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 ))))):named a6 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$a (lmap$a ?v0 ?v1 ))(lnull$ ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$b ?v0 ?v1 ))(lnull$a ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (lmap$ ?v0 )?v1 ))(lnull$a ?v1 ))):named a9 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$ (lmap$c ?v0 ?v1 ))(lnull$ ?v1 ))):named a10 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$a (lmap$a ?v0 ?v1 ))(lmap$a ?v0 (ltl$ ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$a (lmap$b ?v0 ?v1 ))(lmap$b ?v0 (ltl$a ?v1 )))):named a12 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (ltl$ (lmap$c ?v0 ?v1 ))(lmap$c ?v0 (ltl$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (ltl$ (fun_app$ (lmap$ ?v0 )?v1 ))(fun_app$ (lmap$ ?v0 )(ltl$a ?v1 )))):named a14 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_a_fun$ ))(=> (not (lnull$ ?v0 ))(= (lhd$a (lmap$a ?v1 ?v0 ))(fun_app$f ?v1 (lhd$ ?v0 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_fun$ ))(=> (not (lnull$a ?v0 ))(= (lhd$a (lmap$b ?v1 ?v0 ))(fun_app$g ?v1 (lhd$a ?v0 ))))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_fun$ ))(=> (not (lnull$a ?v0 ))(= (lhd$ (fun_app$ (lmap$ ?v1 )?v0 ))(fun_app$h ?v1 (lhd$a ?v0 ))))):named a17 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_b_fun$ ))(=> (not (lnull$ ?v0 ))(= (lhd$ (lmap$c ?v1 ?v0 ))(fun_app$i ?v1 (lhd$ ?v0 ))))):named a18 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (not (lnull$a (lSup$a ?v0 )))(not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$a ?v1 )))))):named a19 ))
(assert (! (forall ((?v0 B_llist_set$ ))(= (not (lnull$ (fun_app$e lSup$ ?v0 )))(not (forall ((?v1 B_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 )))))):named a20 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$a ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$a ?v1 ))))false ))false )):named a21 ))
(assert (! (forall ((?v0 B_llist_set$ ))(=> (and (=> (forall ((?v1 B_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 B_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (=> (not (lnull$a ?v0 ))(and (not (lnull$a ?v1 ))(and (= (lhd$a ?v0 )(lhd$a ?v1 ))(lprefix$a (ltl$a ?v0 )(ltl$a ?v1 )))))(lprefix$a ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (=> (not (lnull$ ?v0 ))(and (not (lnull$ ?v1 ))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(fun_app$c (fun_app$d lprefix$ (ltl$ ?v0 ))(ltl$ ?v1 )))))(fun_app$c (fun_app$d lprefix$ ?v0 )?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (or (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a25 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a26 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$a ?v0 )false )(=> (not (lnull$a ?v0 ))false ))false )):named a27 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a28 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 A_llist_b_llist_fun$ ))(=> (and (fun_app$j (fun_app$k (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$j (fun_app$k (fun_ord$ lprefix$ )?v1 )?v2 ))(fun_app$j (fun_app$k (fun_ord$ lprefix$ )?v0 )?v2 ))):named a29 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 A_llist_b_llist_fun$ ))(=> (and (fun_app$j (fun_app$k (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$j (fun_app$k (fun_ord$ lprefix$ )?v1 )?v0 ))(= ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (= (lnull$a ?v0 )(lnull$a ?v1 ))(=> (and (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))(and (= (lhd$a ?v0 )(lhd$a ?v1 ))(= (ltl$a ?v0 )(ltl$a ?v1 )))))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (= (lnull$ ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(= (ltl$ ?v0 )(ltl$ ?v1 )))))(= ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$a ?v1 )))(lnull$a (lSup$a ?v0 )))):named a33 ))
(assert (! (forall ((?v0 B_llist_set$ ))(=> (forall ((?v1 B_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 )))(lnull$ (fun_app$e lSup$ ?v0 )))):named a34 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(lprefix$a ?v1 ?v0 ))(= ?v0 ?v1 ))):named a35 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$c (fun_app$d lprefix$ ?v0 )?v1 )(fun_app$c (fun_app$d lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(lprefix$a ?v1 ?v0 ))(= ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$c (fun_app$d lprefix$ ?v0 )?v1 )(fun_app$c (fun_app$d lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a38 ))
(check-sat )
;(get-unsat-core )
