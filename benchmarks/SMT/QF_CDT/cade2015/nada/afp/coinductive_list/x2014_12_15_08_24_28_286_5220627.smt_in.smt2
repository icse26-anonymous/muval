;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun x$ (A_llist$ B_llist$ )Bool )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun llcp$a (B_llist$ )B_llist_enat_fun$ )
(declare-fun lmap$a (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$b (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun zero$a ()Enat$ )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun llength$ ()A_llist_enat_fun$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun infinity$ ()Enat$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun llength$a ()B_llist_enat_fun$ )
(declare-fun lprefix$a (B_llist$ B_llist$ )Bool )
(declare-fun iterates$a (B_b_fun$ B$ )B_llist$ )
(declare-fun llist_all2$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun gen_llength$ (Nat$ )A_llist_enat_fun$ )
(declare-fun llist_all2$a (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(declare-fun llist_all2$b (B_a_bool_fun_fun$ B_llist$ A_llist$ )Bool )
(declare-fun llist_all2$c (B_b_bool_fun_fun$ B_llist$ B_llist$ )Bool )
(declare-fun ltakeWhile$a (B_bool_fun$ B_llist$ )B_llist$ )
(declare-fun gen_llength$a (Nat$ )B_llist_enat_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(declare-fun lstrict_prefix$a (B_llist$ B_llist$ )Bool )
(assert (! (not (= (fun_app$ llength$ xs$ )(fun_app$a llength$a ys$ ))):named a0 ))
(assert (! (x$ xs$ ys$ ):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (llcp$ ?v0 )?v0 )(fun_app$ llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$a (llcp$a ?v0 )?v0 )(fun_app$a llength$a ?v0 )):pattern ((llcp$a ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (fun_app$ llength$ (lmap$ ?v0 ?v1 ))(fun_app$ llength$ ?v1 ))):named a4 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (fun_app$ llength$ (lmap$a ?v0 ?v1 ))(fun_app$a llength$a ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (fun_app$a llength$a (lmap$b ?v0 ?v1 ))(fun_app$ llength$ ?v1 ))):named a6 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (fun_app$a llength$a (lmap$c ?v0 ?v1 ))(fun_app$a llength$a ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(= (fun_app$ llength$ ?v0 )(fun_app$ llength$ ?v1 )))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(= (fun_app$a llength$a ?v0 )(fun_app$a llength$a ?v1 )))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (fun_app$ llength$ (ltakeWhile$ ?v0 ?v1 ))(fun_app$ llength$ ?v1 ))(= (ltakeWhile$ ?v0 ?v1 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_llist$ ))(= (= (fun_app$a llength$a (ltakeWhile$a ?v0 ?v1 ))(fun_app$a llength$a ?v1 ))(= (ltakeWhile$a ?v0 ?v1 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (llist_all2$ ?v0 ?v1 ?v2 )(= (fun_app$ llength$ ?v1 )(fun_app$ llength$ ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (llist_all2$a ?v0 ?v1 ?v2 )(= (fun_app$ llength$ ?v1 )(fun_app$a llength$a ?v2 )))):named a13 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (llist_all2$b ?v0 ?v1 ?v2 )(= (fun_app$a llength$a ?v1 )(fun_app$ llength$ ?v2 )))):named a14 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (llist_all2$c ?v0 ?v1 ?v2 )(= (fun_app$a llength$a ?v1 )(fun_app$a llength$a ?v2 )))):named a15 ))
(assert (! (= llength$ (gen_llength$ zero$ )):named a16 ))
(assert (! (= llength$a (gen_llength$a zero$ )):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (lprefix$ ?v0 ?v1 )(= (fun_app$ (llcp$ ?v1 )?v0 )(fun_app$ llength$ ?v0 ))):pattern ((fun_app$ (llcp$ ?v1 )?v0 )))):named a18 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (=> (lprefix$a ?v0 ?v1 )(= (fun_app$a (llcp$a ?v1 )?v0 )(fun_app$a llength$a ?v0 ))):pattern ((fun_app$a (llcp$a ?v1 )?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (lprefix$ ?v0 ?v1 )(= (fun_app$ (llcp$ ?v0 )?v1 )(fun_app$ llength$ ?v0 ))):pattern ((fun_app$ (llcp$ ?v0 )?v1 )))):named a20 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (=> (lprefix$a ?v0 ?v1 )(= (fun_app$a (llcp$a ?v0 )?v1 )(fun_app$a llength$a ?v0 ))):pattern ((fun_app$a (llcp$a ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(less$ (fun_app$ llength$ ?v0 )(fun_app$ llength$ ?v1 )))):named a22 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(less$ (fun_app$a llength$a ?v0 )(fun_app$a llength$a ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$ llength$ (iterates$ ?v0 ?v1 ))infinity$ )):named a24 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (fun_app$a llength$a (iterates$a ?v0 ?v1 ))infinity$ )):named a25 ))
(assert (! (= (fun_app$ llength$ lNil$ )zero$a ):named a26 ))
(assert (! (= (fun_app$a llength$a lNil$a )zero$a ):named a27 ))
(assert (! (forall ((?v0 A_llist$ ))(= (= (fun_app$ llength$ ?v0 )zero$a )(lnull$ ?v0 ))):named a28 ))
(assert (! (forall ((?v0 B_llist$ ))(= (= (fun_app$a llength$a ?v0 )zero$a )(lnull$a ?v0 ))):named a29 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(=> (x$ ?v0 ?v1 )(= (lnull$ ?v0 )(lnull$a ?v1 )))):named a30 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a31 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a32 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a33 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a34 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (lprefix$a lNil$a ?v0 )true ):pattern ((lprefix$a lNil$a ?v0 )))):named a35 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$ lNil$ ?v0 )true ):pattern ((lprefix$ lNil$ ?v0 )))):named a36 ))
(check-sat )
;(get-unsat-core )
