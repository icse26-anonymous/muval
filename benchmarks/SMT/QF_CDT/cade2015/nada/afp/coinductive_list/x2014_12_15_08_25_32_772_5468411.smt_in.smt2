;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort B_c_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort C_llist_bool_fun$ 0 )
(declare-sort B_llist_c_llist_prod_set$ 0 )
(declare-sort A_b_llist_c_llist_prod_fun$ 0 )
(declare-sort B_llist_c_llist_prod_a_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort C_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_c_llist_prod_bool_fun$ 0 )
(declare-sort B_llist_c_llist_prod_b_llist_c_llist_prod_fun$ 0 )
(declare-sort B_llist_c_llist_prod_b_llist_c_llist_prod_bool_fun_fun$ 0 )
(declare-sort C_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()C_llist$)
(declare-fun lhd$ (C_llist$)C$)
(declare-fun ltl$ (C_llist$)C_llist$)
(declare-fun lCons$ (C$ C_llist$ )C_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-sort B_llist_c_llist_prod$ 0)
(declare-fun fst$ (B_llist_c_llist_prod$)B_llist$)
(declare-fun snd$ (B_llist_c_llist_prod$)C_llist$)
(declare-fun pair$ (B_llist$ C_llist$ )B_llist_c_llist_prod$)
(declare-fun f$ (A$ )B_llist$ )
(declare-fun g$ (A$ )C_llist$ )
(declare-fun p$ ()B_c_bool_fun_fun$ )
(declare-fun y$ ()A_set$ )
(declare-fun uu$ ()A_b_llist_c_llist_prod_fun$ )
(declare-fun bot$ ()A_set$ )
(declare-fun ord$ ()A_a_bool_fun_fun$ )
(declare-fun uua$ ()A_a_fun$ )
(declare-fun uub$ ()B_llist_c_llist_prod_b_llist_c_llist_prod_fun$ )
(declare-fun chain$ (B_llist_c_llist_prod_b_llist_c_llist_prod_bool_fun_fun$ B_llist_c_llist_prod_set$ )Bool )
(declare-fun image$ (A_b_llist_c_llist_prod_fun$ A_set$ )B_llist_c_llist_prod_set$ )
(declare-fun chain$a (A_a_bool_fun_fun$ A_set$ )Bool )
(declare-fun image$a (A_a_fun$ A_set$ )A_set$ )
(declare-fun image$b (B_llist_c_llist_prod_b_llist_c_llist_prod_fun$ B_llist_c_llist_prod_set$ )B_llist_c_llist_prod_set$ )
(declare-fun image$c (B_llist_c_llist_prod_a_fun$ B_llist_c_llist_prod_set$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_b_llist_c_llist_prod_fun$ A$ )B_llist_c_llist_prod$ )
(declare-fun lprefix$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun member$a (B_llist_c_llist_prod$ B_llist_c_llist_prod_set$ )Bool )
(declare-fun fun_app$a (B_llist_c_llist_prod_b_llist_c_llist_prod_fun$ B_llist_c_llist_prod$ )B_llist_c_llist_prod$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$d (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$e (C_llist_bool_fun$ C_llist$ )Bool )
(declare-fun fun_app$f (C_llist_c_llist_bool_fun_fun$ C_llist$ )C_llist_bool_fun$ )
(declare-fun fun_app$g (B_llist_c_llist_prod_bool_fun$ B_llist_c_llist_prod$ )Bool )
(declare-fun fun_app$h (B_llist_c_llist_prod_b_llist_c_llist_prod_bool_fun_fun$ B_llist_c_llist_prod$ )B_llist_c_llist_prod_bool_fun$ )
(declare-fun fun_app$i (B_llist_c_llist_prod_a_fun$ B_llist_c_llist_prod$ )A$ )
(declare-fun fun_app$j (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$k (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun lprefix$a ()C_llist_c_llist_bool_fun_fun$ )
(declare-fun rel_prod$ (B_llist_b_llist_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ )B_llist_c_llist_prod_b_llist_c_llist_prod_bool_fun_fun$ )
(declare-fun llist_all2$ (B_c_bool_fun_fun$ B_llist$ C_llist$ )Bool )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(pair$ (f$ ?v0 )(g$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 B_llist_c_llist_prod$ ))(! (= (fun_app$a uub$ ?v0 )?v0 ):pattern ((fun_app$a uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b uua$ ?v0 )?v0 ):pattern ((fun_app$b uua$ ?v0 )))):named a2 ))
(assert (! (not (chain$ (rel_prod$ lprefix$ lprefix$a )(image$ uu$ y$ ))):named a3 ))
(assert (! (chain$a ord$ y$ ):named a4 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$c (fun_app$d lprefix$ ?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 C_llist$ ))(fun_app$e (fun_app$f lprefix$a ?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$c (fun_app$d lprefix$ ?v0 )?v0 )):named a7 ))
(assert (! (forall ((?v0 C_llist$ ))(fun_app$e (fun_app$f lprefix$a ?v0 )?v0 )):named a8 ))
(assert (! (not (= y$ bot$ )):named a9 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$c (fun_app$d lprefix$ ?v0 )?v1 )(fun_app$c (fun_app$d lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$a ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$c (fun_app$d lprefix$ ?v0 )?v1 )(fun_app$c (fun_app$d lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$a ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$c (fun_app$d lprefix$ ?v0 )?v1 )(fun_app$c (fun_app$d lprefix$ ?v2 )?v1 ))(or (fun_app$c (fun_app$d lprefix$ ?v0 )?v2 )(fun_app$c (fun_app$d lprefix$ ?v2 )?v0 )))):named a14 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$a ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$a ?v2 )?v1 ))(or (fun_app$e (fun_app$f lprefix$a ?v0 )?v2 )(fun_app$e (fun_app$f lprefix$a ?v2 )?v0 )))):named a15 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$c (fun_app$d lprefix$ ?v0 )?v1 )(fun_app$c (fun_app$d lprefix$ ?v1 )?v2 ))(fun_app$c (fun_app$d lprefix$ ?v0 )?v2 ))):named a16 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$a ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$a ?v1 )?v2 ))(fun_app$e (fun_app$f lprefix$a ?v0 )?v2 ))):named a17 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$c (fun_app$d lprefix$ ?v0 )?v1 )(fun_app$c (fun_app$d lprefix$ ?v1 )?v2 ))(fun_app$c (fun_app$d lprefix$ ?v0 )?v2 ))):named a18 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$a ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$a ?v1 )?v2 ))(fun_app$e (fun_app$f lprefix$a ?v0 )?v2 ))):named a19 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 y$ )(llist_all2$ p$ (f$ ?v0 )(g$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 C_llist_c_llist_bool_fun_fun$ )(?v2 B_llist$ )(?v3 C_llist$ )(?v4 B_llist$ )(?v5 C_llist$ ))(! (= (fun_app$g (fun_app$h (rel_prod$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(pair$ ?v4 ?v5 ))(and (fun_app$c (fun_app$d ?v0 ?v2 )?v4 )(fun_app$e (fun_app$f ?v1 ?v3 )?v5 ))):pattern ((fun_app$g (fun_app$h (rel_prod$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(pair$ ?v4 ?v5 ))))):named a21 ))
(assert (! (forall ((?v0 A_set$ ))(= (image$a uua$ ?v0 )?v0 )):named a22 ))
(assert (! (forall ((?v0 B_llist_c_llist_prod_set$ ))(= (image$b uub$ ?v0 )?v0 )):named a23 ))
(assert (! (forall ((?v0 A$ )(?v1 B_llist_c_llist_prod_a_fun$ )(?v2 B_llist_c_llist_prod$ )(?v3 B_llist_c_llist_prod_set$ ))(=> (and (= ?v0 (fun_app$i ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$c ?v1 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 B_llist_c_llist_prod$ )(?v1 B_llist_c_llist_prod_b_llist_c_llist_prod_fun$ )(?v2 B_llist_c_llist_prod$ )(?v3 B_llist_c_llist_prod_set$ ))(=> (and (= ?v0 (fun_app$a ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (image$b ?v1 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 B_llist_c_llist_prod$ )(?v1 A_b_llist_c_llist_prod_fun$ )(?v2 A$ )(?v3 A_set$ ))(=> (and (= ?v0 (fun_app$ ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$ ?v1 ?v3 )))):named a26 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_fun$ )(?v2 A$ )(?v3 A_set$ ))(=> (and (= ?v0 (fun_app$b ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$a ?v1 ?v3 )))):named a27 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 C_llist$ )(?v2 B_llist$ )(?v3 C_llist$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a28 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 C_llist$ )(?v2 B_llist$ )(?v3 C_llist$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a29 ))
(assert (! (forall ((?v0 B_llist_c_llist_prod_b_llist_c_llist_prod_bool_fun_fun$ )(?v1 B_llist_c_llist_prod_set$ )(?v2 B_llist_c_llist_prod_b_llist_c_llist_prod_bool_fun_fun$ )(?v3 B_llist_c_llist_prod_b_llist_c_llist_prod_fun$ ))(=> (and (chain$ ?v0 ?v1 )(forall ((?v4 B_llist_c_llist_prod$ )(?v5 B_llist_c_llist_prod$ ))(=> (and (member$a ?v4 ?v1 )(and (member$a ?v5 ?v1 )(fun_app$g (fun_app$h ?v0 ?v4 )?v5 )))(fun_app$g (fun_app$h ?v2 (fun_app$a ?v3 ?v4 ))(fun_app$a ?v3 ?v5 )))))(chain$ ?v2 (image$b ?v3 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 B_llist_c_llist_prod_b_llist_c_llist_prod_bool_fun_fun$ )(?v1 B_llist_c_llist_prod_set$ )(?v2 A_a_bool_fun_fun$ )(?v3 B_llist_c_llist_prod_a_fun$ ))(=> (and (chain$ ?v0 ?v1 )(forall ((?v4 B_llist_c_llist_prod$ )(?v5 B_llist_c_llist_prod$ ))(=> (and (member$a ?v4 ?v1 )(and (member$a ?v5 ?v1 )(fun_app$g (fun_app$h ?v0 ?v4 )?v5 )))(fun_app$j (fun_app$k ?v2 (fun_app$i ?v3 ?v4 ))(fun_app$i ?v3 ?v5 )))))(chain$a ?v2 (image$c ?v3 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_set$ )(?v2 B_llist_c_llist_prod_b_llist_c_llist_prod_bool_fun_fun$ )(?v3 A_b_llist_c_llist_prod_fun$ ))(=> (and (chain$a ?v0 ?v1 )(forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 ?v1 )(and (member$ ?v5 ?v1 )(fun_app$j (fun_app$k ?v0 ?v4 )?v5 )))(fun_app$g (fun_app$h ?v2 (fun_app$ ?v3 ?v4 ))(fun_app$ ?v3 ?v5 )))))(chain$ ?v2 (image$ ?v3 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_set$ )(?v2 A_a_bool_fun_fun$ )(?v3 A_a_fun$ ))(=> (and (chain$a ?v0 ?v1 )(forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 ?v1 )(and (member$ ?v5 ?v1 )(fun_app$j (fun_app$k ?v0 ?v4 )?v5 )))(fun_app$j (fun_app$k ?v2 (fun_app$b ?v3 ?v4 ))(fun_app$b ?v3 ?v5 )))))(chain$a ?v2 (image$a ?v3 ?v1 )))):named a33 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 C_llist_c_llist_bool_fun_fun$ )(?v2 B_llist_c_llist_prod$ )(?v3 B_llist_c_llist_prod$ ))(= (fun_app$g (fun_app$h (rel_prod$ ?v0 ?v1 )?v2 )?v3 )(exists ((?v4 B_llist$ )(?v5 B_llist$ )(?v6 C_llist$ )(?v7 C_llist$ ))(and (= ?v2 (pair$ ?v4 ?v6 ))(and (= ?v3 (pair$ ?v5 ?v7 ))(and (fun_app$c (fun_app$d ?v0 ?v4 )?v5 )(fun_app$e (fun_app$f ?v1 ?v6 )?v7 ))))))):named a34 ))
(check-sat )
;(get-unsat-core )
