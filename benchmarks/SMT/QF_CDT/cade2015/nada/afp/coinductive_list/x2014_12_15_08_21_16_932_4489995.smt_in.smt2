;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort B_llist_set$ 0 )
(declare-sort A_a_prod_llist_set$ 0 )
(declare-sort A_b_prod_llist_set$ 0 )
(declare-sort B_a_prod_llist_set$ 0 )
(declare-sort B_b_prod_llist_set$ 0 )
(declare-sort A_a_b_prod_prod_llist_set$ 0 )
(declare-sort A_b_a_prod_prod_llist_set$ 0 )
(declare-sort A_b_b_prod_prod_llist_set$ 0 )
(declare-sort B_a_b_prod_prod_llist_set$ 0 )
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_b_prod_llist$)
(declare-fun lhd$ (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$ (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$ (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$a (A_a_prod$)A$)
(declare-fun snd$a (A_a_prod$)A$)
(declare-fun pair$a (A$ A$ )A_a_prod$)
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$c ()A_a_prod_llist$)
(declare-fun lhd$c (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$c (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$c (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-sort B_a_prod$ 0)
(declare-fun fst$b (B_a_prod$)B$)
(declare-fun snd$b (B_a_prod$)A$)
(declare-fun pair$b (B$ A$ )B_a_prod$)
(declare-sort B_a_prod_llist$ 0)
(declare-fun lNil$d ()B_a_prod_llist$)
(declare-fun lhd$d (B_a_prod_llist$)B_a_prod$)
(declare-fun ltl$d (B_a_prod_llist$)B_a_prod_llist$)
(declare-fun lCons$d (B_a_prod$ B_a_prod_llist$ )B_a_prod_llist$)
(declare-sort B_b_prod$ 0)
(declare-fun fst$c (B_b_prod$)B$)
(declare-fun snd$c (B_b_prod$)B$)
(declare-fun pair$c (B$ B$ )B_b_prod$)
(declare-sort B_b_prod_llist$ 0)
(declare-fun lNil$e ()B_b_prod_llist$)
(declare-fun lhd$e (B_b_prod_llist$)B_b_prod$)
(declare-fun ltl$e (B_b_prod_llist$)B_b_prod_llist$)
(declare-fun lCons$e (B_b_prod$ B_b_prod_llist$ )B_b_prod_llist$)
(declare-sort A_b_prod_a_prod$ 0)
(declare-fun fst$d (A_b_prod_a_prod$)A_b_prod$)
(declare-fun snd$d (A_b_prod_a_prod$)A$)
(declare-fun pair$d (A_b_prod$ A$ )A_b_prod_a_prod$)
(declare-sort A_b_prod_a_prod_llist$ 0)
(declare-fun lNil$f ()A_b_prod_a_prod_llist$)
(declare-fun lhd$f (A_b_prod_a_prod_llist$)A_b_prod_a_prod$)
(declare-fun ltl$f (A_b_prod_a_prod_llist$)A_b_prod_a_prod_llist$)
(declare-fun lCons$f (A_b_prod_a_prod$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$)
(declare-sort A_b_prod_b_prod$ 0)
(declare-fun fst$e (A_b_prod_b_prod$)A_b_prod$)
(declare-fun snd$e (A_b_prod_b_prod$)B$)
(declare-fun pair$e (A_b_prod$ B$ )A_b_prod_b_prod$)
(declare-sort A_b_prod_b_prod_llist$ 0)
(declare-fun lNil$g ()A_b_prod_b_prod_llist$)
(declare-fun lhd$g (A_b_prod_b_prod_llist$)A_b_prod_b_prod$)
(declare-fun ltl$g (A_b_prod_b_prod_llist$)A_b_prod_b_prod_llist$)
(declare-fun lCons$g (A_b_prod_b_prod$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$)
(declare-sort A_a_b_prod_prod$ 0)
(declare-fun fst$f (A_a_b_prod_prod$)A$)
(declare-fun snd$f (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$f (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-sort A_a_b_prod_prod_llist$ 0)
(declare-fun lNil$h ()A_a_b_prod_prod_llist$)
(declare-fun lhd$h (A_a_b_prod_prod_llist$)A_a_b_prod_prod$)
(declare-fun ltl$h (A_a_b_prod_prod_llist$)A_a_b_prod_prod_llist$)
(declare-fun lCons$h (A_a_b_prod_prod$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$)
(declare-sort B_a_b_prod_prod$ 0)
(declare-fun fst$g (B_a_b_prod_prod$)B$)
(declare-fun snd$g (B_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$g (B$ A_b_prod$ )B_a_b_prod_prod$)
(declare-sort B_a_b_prod_prod_llist$ 0)
(declare-fun lNil$i ()B_a_b_prod_prod_llist$)
(declare-fun lhd$i (B_a_b_prod_prod_llist$)B_a_b_prod_prod$)
(declare-fun ltl$i (B_a_b_prod_prod_llist$)B_a_b_prod_prod_llist$)
(declare-fun lCons$i (B_a_b_prod_prod$ B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist$)
(declare-sort A_b_prod_a_b_prod_prod$ 0)
(declare-fun fst$h (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun snd$h (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$h (A_b_prod$ A_b_prod$ )A_b_prod_a_b_prod_prod$)
(declare-sort A_b_prod_a_b_prod_prod_llist$ 0)
(declare-fun lNil$j ()A_b_prod_a_b_prod_prod_llist$)
(declare-fun lhd$j (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod$)
(declare-fun ltl$j (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod_llist$)
(declare-fun lCons$j (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$)
(declare-sort A_b_b_prod_prod$ 0)
(declare-fun fst$i (A_b_b_prod_prod$)A$)
(declare-fun snd$i (A_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$i (A$ B_b_prod$ )A_b_b_prod_prod$)
(declare-sort A_b_b_prod_prod_llist$ 0)
(declare-fun lNil$k ()A_b_b_prod_prod_llist$)
(declare-fun lhd$k (A_b_b_prod_prod_llist$)A_b_b_prod_prod$)
(declare-fun ltl$k (A_b_b_prod_prod_llist$)A_b_b_prod_prod_llist$)
(declare-fun lCons$k (A_b_b_prod_prod$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$)
(declare-sort A_b_a_prod_prod$ 0)
(declare-fun fst$j (A_b_a_prod_prod$)A$)
(declare-fun snd$j (A_b_a_prod_prod$)B_a_prod$)
(declare-fun pair$j (A$ B_a_prod$ )A_b_a_prod_prod$)
(declare-sort A_b_a_prod_prod_llist$ 0)
(declare-fun lNil$l ()A_b_a_prod_prod_llist$)
(declare-fun lhd$l (A_b_a_prod_prod_llist$)A_b_a_prod_prod$)
(declare-fun ltl$l (A_b_a_prod_prod_llist$)A_b_a_prod_prod_llist$)
(declare-fun lCons$l (A_b_a_prod_prod$ A_b_a_prod_prod_llist$ )A_b_a_prod_prod_llist$)
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun lnull$ (A_b_prod_llist$ )Bool )
(declare-fun lzip$a (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun lzip$b (B_llist$ A_llist$ )B_a_prod_llist$ )
(declare-fun lzip$c (B_llist$ B_llist$ )B_b_prod_llist$ )
(declare-fun lzip$d (A_b_prod_llist$ A_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun lzip$e (A_b_prod_llist$ B_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun lzip$f (A_llist$ A_b_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun lzip$g (B_llist$ A_b_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun lzip$h (A_b_prod_llist$ A_b_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun lzip$i (A_llist$ B_b_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun lnull$b (B_llist$ )Bool )
(declare-fun lnull$c (A_a_prod_llist$ )Bool )
(declare-fun lnull$d (B_a_prod_llist$ )Bool )
(declare-fun lnull$e (B_b_prod_llist$ )Bool )
(declare-fun lnull$f (A_b_prod_a_prod_llist$ )Bool )
(declare-fun lnull$g (A_b_prod_b_prod_llist$ )Bool )
(declare-fun lnull$h (A_a_b_prod_prod_llist$ )Bool )
(declare-fun lnull$i (B_a_b_prod_prod_llist$ )Bool )
(declare-fun lnull$j (A_b_prod_a_b_prod_prod_llist$ )Bool )
(declare-fun lnull$k (A_b_b_prod_prod_llist$ )Bool )
(declare-fun lnull$l (A_b_a_prod_prod_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun member$a (B_llist$ B_llist_set$ )Bool )
(declare-fun member$b (A_b_prod_llist$ A_b_prod_llist_set$ )Bool )
(declare-fun member$c (B_b_prod_llist$ B_b_prod_llist_set$ )Bool )
(declare-fun member$d (B_a_prod_llist$ B_a_prod_llist_set$ )Bool )
(declare-fun member$e (A_a_prod_llist$ A_a_prod_llist_set$ )Bool )
(declare-fun member$f (B_a_b_prod_prod_llist$ B_a_b_prod_prod_llist_set$ )Bool )
(declare-fun member$g (A_a_b_prod_prod_llist$ A_a_b_prod_prod_llist_set$ )Bool )
(declare-fun member$h (A_b_b_prod_prod_llist$ A_b_b_prod_prod_llist_set$ )Bool )
(declare-fun member$i (A_b_a_prod_prod_llist$ A_b_a_prod_prod_llist_set$ )Bool )
(assert (! (not (= (lnull$ (lzip$ xs$ ys$ ))(or (lnull$a xs$ )(lnull$b ys$ )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$c (lzip$a ?v0 ?v1 )))(and (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a1 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(= (not (lnull$d (lzip$b ?v0 ?v1 )))(and (not (lnull$b ?v0 ))(not (lnull$a ?v1 ))))):named a2 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$e (lzip$c ?v0 ?v1 )))(and (not (lnull$b ?v0 ))(not (lnull$b ?v1 ))))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(= (not (lnull$ (lzip$ ?v0 ?v1 )))(and (not (lnull$a ?v0 ))(not (lnull$b ?v1 ))))):named a4 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_llist$ ))(= (not (lnull$f (lzip$d ?v0 ?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$a ?v1 ))))):named a5 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 B_llist$ ))(= (not (lnull$g (lzip$e ?v0 ?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$b ?v1 ))))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ ))(= (not (lnull$h (lzip$f ?v0 ?v1 )))(and (not (lnull$a ?v0 ))(not (lnull$ ?v1 ))))):named a7 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ ))(= (not (lnull$i (lzip$g ?v0 ?v1 )))(and (not (lnull$b ?v0 ))(not (lnull$ ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (not (lnull$j (lzip$h ?v0 ?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_b_prod_llist$ ))(= (not (lnull$k (lzip$i ?v0 ?v1 )))(and (not (lnull$a ?v0 ))(not (lnull$e ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$c (lzip$a ?v0 ?v1 ))(or (lnull$a ?v0 )(lnull$a ?v1 )))):named a11 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(= (lnull$d (lzip$b ?v0 ?v1 ))(or (lnull$b ?v0 )(lnull$a ?v1 )))):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$e (lzip$c ?v0 ?v1 ))(or (lnull$b ?v0 )(lnull$b ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(= (lnull$ (lzip$ ?v0 ?v1 ))(or (lnull$a ?v0 )(lnull$b ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_llist$ ))(= (lnull$f (lzip$d ?v0 ?v1 ))(or (lnull$ ?v0 )(lnull$a ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 B_llist$ ))(= (lnull$g (lzip$e ?v0 ?v1 ))(or (lnull$ ?v0 )(lnull$b ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ ))(= (lnull$h (lzip$f ?v0 ?v1 ))(or (lnull$a ?v0 )(lnull$ ?v1 )))):named a17 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ ))(= (lnull$i (lzip$g ?v0 ?v1 ))(or (lnull$b ?v0 )(lnull$ ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (lnull$j (lzip$h ?v0 ?v1 ))(or (lnull$ ?v0 )(lnull$ ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_b_prod_llist$ ))(= (lnull$k (lzip$i ?v0 ?v1 ))(or (lnull$a ?v0 )(lnull$e ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a21 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$b ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a22 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$b ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$b ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a23 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (=> (or (lnull$b ?v0 )(lnull$b ?v1 ))false )(=> (and (not (lnull$b ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a24 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a25 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 B_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$b ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a26 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a27 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ ))(=> (and (=> (or (lnull$b ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$b ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a28 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a29 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_b_prod_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$e ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$e ?v1 )))false ))false )):named a30 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$a ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$a ?v1 ))))false ))false )):named a31 ))
(assert (! (forall ((?v0 B_llist_set$ ))(=> (and (=> (forall ((?v1 B_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$b ?v1 )))false )(=> (not (forall ((?v1 B_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$b ?v1 ))))false ))false )):named a32 ))
(assert (! (forall ((?v0 A_b_prod_llist_set$ ))(=> (and (=> (forall ((?v1 A_b_prod_llist$ ))(=> (member$b ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_b_prod_llist$ ))(=> (member$b ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a33 ))
(assert (! (forall ((?v0 B_b_prod_llist_set$ ))(=> (and (=> (forall ((?v1 B_b_prod_llist$ ))(=> (member$c ?v1 ?v0 )(lnull$e ?v1 )))false )(=> (not (forall ((?v1 B_b_prod_llist$ ))(=> (member$c ?v1 ?v0 )(lnull$e ?v1 ))))false ))false )):named a34 ))
(assert (! (forall ((?v0 B_a_prod_llist_set$ ))(=> (and (=> (forall ((?v1 B_a_prod_llist$ ))(=> (member$d ?v1 ?v0 )(lnull$d ?v1 )))false )(=> (not (forall ((?v1 B_a_prod_llist$ ))(=> (member$d ?v1 ?v0 )(lnull$d ?v1 ))))false ))false )):named a35 ))
(assert (! (forall ((?v0 A_a_prod_llist_set$ ))(=> (and (=> (forall ((?v1 A_a_prod_llist$ ))(=> (member$e ?v1 ?v0 )(lnull$c ?v1 )))false )(=> (not (forall ((?v1 A_a_prod_llist$ ))(=> (member$e ?v1 ?v0 )(lnull$c ?v1 ))))false ))false )):named a36 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist_set$ ))(=> (and (=> (forall ((?v1 B_a_b_prod_prod_llist$ ))(=> (member$f ?v1 ?v0 )(lnull$i ?v1 )))false )(=> (not (forall ((?v1 B_a_b_prod_prod_llist$ ))(=> (member$f ?v1 ?v0 )(lnull$i ?v1 ))))false ))false )):named a37 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist_set$ ))(=> (and (=> (forall ((?v1 A_a_b_prod_prod_llist$ ))(=> (member$g ?v1 ?v0 )(lnull$h ?v1 )))false )(=> (not (forall ((?v1 A_a_b_prod_prod_llist$ ))(=> (member$g ?v1 ?v0 )(lnull$h ?v1 ))))false ))false )):named a38 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist_set$ ))(=> (and (=> (forall ((?v1 A_b_b_prod_prod_llist$ ))(=> (member$h ?v1 ?v0 )(lnull$k ?v1 )))false )(=> (not (forall ((?v1 A_b_b_prod_prod_llist$ ))(=> (member$h ?v1 ?v0 )(lnull$k ?v1 ))))false ))false )):named a39 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist_set$ ))(=> (and (=> (forall ((?v1 A_b_a_prod_prod_llist$ ))(=> (member$i ?v1 ?v0 )(lnull$l ?v1 )))false )(=> (not (forall ((?v1 A_b_a_prod_prod_llist$ ))(=> (member$i ?v1 ?v0 )(lnull$l ?v1 ))))false ))false )):named a40 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (or (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a41 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (=> (and (lnull$b ?v0 )(lnull$b ?v1 ))false )(=> (or (not (lnull$b ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a42 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a43 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 B_b_prod_llist$ ))(=> (and (=> (and (lnull$e ?v0 )(lnull$e ?v1 ))false )(=> (or (not (lnull$e ?v0 ))(not (lnull$e ?v1 )))false ))false )):named a44 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ ))(=> (and (=> (and (lnull$d ?v0 )(lnull$d ?v1 ))false )(=> (or (not (lnull$d ?v0 ))(not (lnull$d ?v1 )))false ))false )):named a45 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(=> (and (=> (and (lnull$c ?v0 )(lnull$c ?v1 ))false )(=> (or (not (lnull$c ?v0 ))(not (lnull$c ?v1 )))false ))false )):named a46 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$ )(?v1 B_a_b_prod_prod_llist$ ))(=> (and (=> (and (lnull$i ?v0 )(lnull$i ?v1 ))false )(=> (or (not (lnull$i ?v0 ))(not (lnull$i ?v1 )))false ))false )):named a47 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 A_a_b_prod_prod_llist$ ))(=> (and (=> (and (lnull$h ?v0 )(lnull$h ?v1 ))false )(=> (or (not (lnull$h ?v0 ))(not (lnull$h ?v1 )))false ))false )):named a48 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$ )(?v1 A_b_b_prod_prod_llist$ ))(=> (and (=> (and (lnull$k ?v0 )(lnull$k ?v1 ))false )(=> (or (not (lnull$k ?v0 ))(not (lnull$k ?v1 )))false ))false )):named a49 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ )(?v1 A_b_a_prod_prod_llist$ ))(=> (and (=> (and (lnull$l ?v0 )(lnull$l ?v1 ))false )(=> (or (not (lnull$l ?v0 ))(not (lnull$l ?v1 )))false ))false )):named a50 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$a ?v0 )false )(=> (not (lnull$a ?v0 ))false ))false )):named a51 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (and (=> (lnull$b ?v0 )false )(=> (not (lnull$b ?v0 ))false ))false )):named a52 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a53 ))
(assert (! (forall ((?v0 B_b_prod_llist$ ))(=> (and (=> (lnull$e ?v0 )false )(=> (not (lnull$e ?v0 ))false ))false )):named a54 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(=> (and (=> (lnull$d ?v0 )false )(=> (not (lnull$d ?v0 ))false ))false )):named a55 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(=> (and (=> (lnull$c ?v0 )false )(=> (not (lnull$c ?v0 ))false ))false )):named a56 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$ ))(=> (and (=> (lnull$i ?v0 )false )(=> (not (lnull$i ?v0 ))false ))false )):named a57 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ ))(=> (and (=> (lnull$h ?v0 )false )(=> (not (lnull$h ?v0 ))false ))false )):named a58 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$ ))(=> (and (=> (lnull$k ?v0 )false )(=> (not (lnull$k ?v0 ))false ))false )):named a59 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ ))(=> (and (=> (lnull$l ?v0 )false )(=> (not (lnull$l ?v0 ))false ))false )):named a60 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (or (lnull$a ?v0 )(lnull$a ?v1 ))(lnull$c (lzip$a ?v0 ?v1 )))):named a61 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(=> (or (lnull$a ?v0 )(lnull$b ?v1 ))(lnull$ (lzip$ ?v0 ?v1 )))):named a62 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(=> (or (lnull$b ?v0 )(lnull$a ?v1 ))(lnull$d (lzip$b ?v0 ?v1 )))):named a63 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (or (lnull$b ?v0 )(lnull$b ?v1 ))(lnull$e (lzip$c ?v0 ?v1 )))):named a64 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_llist$ ))(=> (or (lnull$ ?v0 )(lnull$a ?v1 ))(lnull$f (lzip$d ?v0 ?v1 )))):named a65 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 B_llist$ ))(=> (or (lnull$ ?v0 )(lnull$b ?v1 ))(lnull$g (lzip$e ?v0 ?v1 )))):named a66 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ ))(=> (or (lnull$a ?v0 )(lnull$ ?v1 ))(lnull$h (lzip$f ?v0 ?v1 )))):named a67 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ ))(=> (or (lnull$b ?v0 )(lnull$ ?v1 ))(lnull$i (lzip$g ?v0 ?v1 )))):named a68 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(=> (or (lnull$ ?v0 )(lnull$ ?v1 ))(lnull$j (lzip$h ?v0 ?v1 )))):named a69 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_b_prod_llist$ ))(=> (or (lnull$a ?v0 )(lnull$e ?v1 ))(lnull$k (lzip$i ?v0 ?v1 )))):named a70 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))(not (lnull$c (lzip$a ?v0 ?v1 ))))):named a71 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(=> (and (not (lnull$a ?v0 ))(not (lnull$b ?v1 )))(not (lnull$ (lzip$ ?v0 ?v1 ))))):named a72 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(=> (and (not (lnull$b ?v0 ))(not (lnull$a ?v1 )))(not (lnull$d (lzip$b ?v0 ?v1 ))))):named a73 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (not (lnull$b ?v0 ))(not (lnull$b ?v1 )))(not (lnull$e (lzip$c ?v0 ?v1 ))))):named a74 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_llist$ ))(=> (and (not (lnull$ ?v0 ))(not (lnull$a ?v1 )))(not (lnull$f (lzip$d ?v0 ?v1 ))))):named a75 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 B_llist$ ))(=> (and (not (lnull$ ?v0 ))(not (lnull$b ?v1 )))(not (lnull$g (lzip$e ?v0 ?v1 ))))):named a76 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ ))(=> (and (not (lnull$a ?v0 ))(not (lnull$ ?v1 )))(not (lnull$h (lzip$f ?v0 ?v1 ))))):named a77 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ ))(=> (and (not (lnull$b ?v0 ))(not (lnull$ ?v1 )))(not (lnull$i (lzip$g ?v0 ?v1 ))))):named a78 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(not (lnull$j (lzip$h ?v0 ?v1 ))))):named a79 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_b_prod_llist$ ))(=> (and (not (lnull$a ?v0 ))(not (lnull$e ?v1 )))(not (lnull$k (lzip$i ?v0 ?v1 ))))):named a80 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (or (lnull$a ?v0 )(lnull$a ?v1 ))(= (lzip$a ?v0 ?v1 )lNil$c )):pattern ((lzip$a ?v0 ?v1 )))):named a81 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(! (=> (or (lnull$a ?v0 )(lnull$b ?v1 ))(= (lzip$ ?v0 ?v1 )lNil$ )):pattern ((lzip$ ?v0 ?v1 )))):named a82 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(! (=> (or (lnull$b ?v0 )(lnull$a ?v1 ))(= (lzip$b ?v0 ?v1 )lNil$d )):pattern ((lzip$b ?v0 ?v1 )))):named a83 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (=> (or (lnull$b ?v0 )(lnull$b ?v1 ))(= (lzip$c ?v0 ?v1 )lNil$e )):pattern ((lzip$c ?v0 ?v1 )))):named a84 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_llist$ ))(! (=> (or (lnull$ ?v0 )(lnull$a ?v1 ))(= (lzip$d ?v0 ?v1 )lNil$f )):pattern ((lzip$d ?v0 ?v1 )))):named a85 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 B_llist$ ))(! (=> (or (lnull$ ?v0 )(lnull$b ?v1 ))(= (lzip$e ?v0 ?v1 )lNil$g )):pattern ((lzip$e ?v0 ?v1 )))):named a86 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ ))(! (=> (or (lnull$a ?v0 )(lnull$ ?v1 ))(= (lzip$f ?v0 ?v1 )lNil$h )):pattern ((lzip$f ?v0 ?v1 )))):named a87 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ ))(! (=> (or (lnull$b ?v0 )(lnull$ ?v1 ))(= (lzip$g ?v0 ?v1 )lNil$i )):pattern ((lzip$g ?v0 ?v1 )))):named a88 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(! (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))(= (lzip$h ?v0 ?v1 )lNil$j )):pattern ((lzip$h ?v0 ?v1 )))):named a89 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_b_prod_llist$ ))(! (=> (or (lnull$a ?v0 )(lnull$e ?v1 ))(= (lzip$i ?v0 ?v1 )lNil$k )):pattern ((lzip$i ?v0 ?v1 )))):named a90 ))
(check-sat )
;(get-unsat-core )
