;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun j$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lstrict_prefix$ (A_llist$ )A_llist_bool_fun$ )
(assert (! (not false ):named a0 ))
(assert (! (less$ (enat$ zero$ )(llength$ xsa$ )):named a1 ))
(assert (! (less$ (enat$ (suc$ j$ ))(llength$ xsa$ )):named a2 ))
(assert (! (= (lnth$ xs$ j$ )x$ ):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (less$ (enat$ ?v0 )(llength$ xsa$ ))(and (less$ (enat$ ?v1 )(llength$ xsa$ ))(not (= ?v0 ?v1 ))))(not (= (lnth$ xsa$ ?v0 )(lnth$ xsa$ ?v1 ))))):named a4 ))
(assert (! (not (lnull$ xsa$ )):named a5 ))
(assert (! (less$ (enat$ j$ )(llength$ xs$ )):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (less$ (enat$ ?v0 )(llength$ xs$a ))(and (less$ (enat$ ?v1 )(llength$ xs$a ))(not (= ?v0 ?v1 ))))(not (= (lnth$ xs$a ?v0 )(lnth$ xs$a ?v1 ))))):named a7 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (forall ((?v2 A_llist$ ))(=> (forall ((?v3 A_llist$ ))(=> (fun_app$ (lstrict_prefix$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a8 ))
(assert (! (=> (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (= xsa$ (lCons$ ?v0 ?v1 ))false ))false ):named a9 ))
(assert (! (= (lnth$ xsa$ zero$ )x$ ):named a10 ))
(assert (! (= (lnth$ xsa$ (suc$ j$ ))x$ ):named a11 ))
(assert (! (= xsa$ (lCons$ x$ xs$ )):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$ (lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$ (lstrict_prefix$ ?v1 )?v3 ))):pattern ((fun_app$ (lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a14 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (and (less$ (enat$ ?v0 )(llength$ xs$ ))(= (lnth$ xs$ ?v0 )x$ ))false ))false ):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lnth$ (lCons$ ?v0 ?v1 )zero$ )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 Nat$ ))(! (= (lnth$ (lCons$ ?v0 ?v1 )(suc$ ?v2 ))(lnth$ ?v1 ?v2 )):pattern ((lnth$ (lCons$ ?v0 ?v1 )(suc$ ?v2 ))))):named a17 ))
(check-sat )
;(get-unsat-core )
