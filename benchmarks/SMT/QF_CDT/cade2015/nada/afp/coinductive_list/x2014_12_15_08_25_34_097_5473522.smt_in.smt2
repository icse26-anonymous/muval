;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort A_set_a_fun$ 0 )
(declare-sort B_llist_set$ 0 )
(declare-sort C_llist_set$ 0 )
(declare-sort A_b_llist_fun$ 0 )
(declare-sort A_c_llist_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_c_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort C_b_bool_fun_fun$ 0 )
(declare-sort C_c_bool_fun_fun$ 0 )
(declare-sort C_llist_bool_fun$ 0 )
(declare-sort B_llist_set_b_llist_fun$ 0 )
(declare-sort C_llist_set_c_llist_fun$ 0 )
(declare-sort B_llist_c_llist_prod_set$ 0 )
(declare-sort A_b_llist_c_llist_prod_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort C_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_c_llist_prod_b_llist_fun$ 0 )
(declare-sort B_llist_c_llist_prod_c_llist_fun$ 0 )
(declare-sort B_llist$ 0)
(declare-sort C_llist$ 0)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-fun lNil$a ()C_llist$)
(declare-fun lhd$a (C_llist$)C$)
(declare-fun ltl$a (C_llist$)C_llist$)
(declare-fun lCons$a (C$ C_llist$ )C_llist$)
(declare-sort B_llist_c_llist_prod$ 0)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun fst$ (B_llist_c_llist_prod$)B_llist$)
(declare-fun snd$ (B_llist_c_llist_prod$)C_llist$)
(declare-fun pair$ (B_llist$ C_llist$ )B_llist_c_llist_prod$)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun f$ ()A_b_llist_fun$ )
(declare-fun g$ ()A_c_llist_fun$ )
(declare-fun p$ ()B_c_bool_fun_fun$ )
(declare-fun y$ ()A_set$ )
(declare-fun uu$ ()B_b_bool_fun_fun$ )
(declare-fun bot$ ()A_set$ )
(declare-fun lub$ ()A_set_a_fun$ )
(declare-fun ord$ ()A_a_bool_fun_fun$ )
(declare-fun uua$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun uub$ ()C_c_bool_fun_fun$ )
(declare-fun uuc$ ()C_llist_c_llist_bool_fun_fun$ )
(declare-fun uud$ ()A_b_llist_c_llist_prod_fun$ )
(declare-fun uue$ ()B_llist_c_llist_prod_b_llist_fun$ )
(declare-fun uuf$ ()B_llist_c_llist_prod_c_llist_fun$ )
(declare-fun lSup$ ()B_llist_set_b_llist_fun$ )
(declare-fun chain$ (A_a_bool_fun_fun$ A_set$ )Bool )
(declare-fun image$ (A_b_llist_c_llist_prod_fun$ A_set$ )B_llist_c_llist_prod_set$ )
(declare-fun lSup$a ()C_llist_set_c_llist_fun$ )
(declare-fun ldrop$ (Enat$ B_llist$ )B_llist$ )
(declare-fun lnull$ (B_llist$ )Bool )
(declare-fun mcont$ (A_set_a_fun$ A_a_bool_fun_fun$ C_llist_set_c_llist_fun$ C_llist_c_llist_bool_fun_fun$ A_c_llist_fun$ )Bool )
(declare-fun image$a (B_llist_c_llist_prod_b_llist_fun$ B_llist_c_llist_prod_set$ )B_llist_set$ )
(declare-fun image$b (B_llist_c_llist_prod_c_llist_fun$ B_llist_c_llist_prod_set$ )C_llist_set$ )
(declare-fun ldrop$a (Enat$ C_llist$ )C_llist$ )
(declare-fun ldropn$ (Nat$ B_llist$ )B_llist$ )
(declare-fun lnull$a (C_llist$ )Bool )
(declare-fun mcont$a (A_set_a_fun$ A_a_bool_fun_fun$ B_llist_set_b_llist_fun$ B_llist_b_llist_bool_fun_fun$ A_b_llist_fun$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_b_llist_c_llist_prod_fun$ A$ )B_llist_c_llist_prod$ )
(declare-fun ldropn$a (Nat$ C_llist$ )C_llist$ )
(declare-fun lprefix$ ()C_llist_c_llist_bool_fun_fun$ )
(declare-fun member$a (B_llist_c_llist_prod$ B_llist_c_llist_prod_set$ )Bool )
(declare-fun fun_app$a (A_b_llist_fun$ A$ )B_llist$ )
(declare-fun fun_app$b (A_c_llist_fun$ A$ )C_llist$ )
(declare-fun fun_app$c (B_llist_c_llist_prod_c_llist_fun$ B_llist_c_llist_prod$ )C_llist$ )
(declare-fun fun_app$d (B_llist_c_llist_prod_b_llist_fun$ B_llist_c_llist_prod$ )B_llist$ )
(declare-fun fun_app$e (C_llist_bool_fun$ C_llist$ )Bool )
(declare-fun fun_app$f (C_llist_c_llist_bool_fun_fun$ C_llist$ )C_llist_bool_fun$ )
(declare-fun fun_app$g (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$h (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$i (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$j (C_c_bool_fun_fun$ C$ )C_bool_fun$ )
(declare-fun fun_app$k (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$l (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$m (B_llist_c_llist_bool_fun_fun$ B_llist$ )C_llist_bool_fun$ )
(declare-fun fun_app$n (A_set_a_fun$ A_set$ )A$ )
(declare-fun fun_app$o (C_b_bool_fun_fun$ C$ )B_bool_fun$ )
(declare-fun fun_app$p (B_c_bool_fun_fun$ B$ )C_bool_fun$ )
(declare-fun fun_app$q (B_llist_set_b_llist_fun$ B_llist_set$ )B_llist$ )
(declare-fun fun_app$r (C_llist_set_c_llist_fun$ C_llist_set$ )C_llist$ )
(declare-fun lprefix$a ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun case_prod$ (B_llist_c_llist_bool_fun_fun$ B_llist_c_llist_prod$ )Bool )
(declare-fun llist_all2$ (B_c_bool_fun_fun$ )B_llist_c_llist_bool_fun_fun$ )
(declare-fun llist_all2$a (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (C_c_bool_fun_fun$ )C_llist_c_llist_bool_fun_fun$ )
(declare-fun llist_all2$c (C_b_bool_fun_fun$ C_llist$ )B_llist_bool_fun$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uud$ ?v0 )(pair$ (fun_app$a f$ ?v0 )(fun_app$b g$ ?v0 ))):pattern ((fun_app$ uud$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 B_llist_c_llist_prod$ ))(! (= (fun_app$c uuf$ ?v0 )(snd$ ?v0 )):pattern ((fun_app$c uuf$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 B_llist_c_llist_prod$ ))(! (= (fun_app$d uue$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$d uue$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(! (= (fun_app$e (fun_app$f uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$e (fun_app$f uuc$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$g (fun_app$h uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$g (fun_app$h uua$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 C$ )(?v1 C$ ))(! (= (fun_app$i (fun_app$j uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$i (fun_app$j uub$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$k (fun_app$l uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$k (fun_app$l uu$ ?v0 )?v1 )))):named a6 ))
(assert (! (not (fun_app$e (fun_app$m (llist_all2$ p$ )(fun_app$a f$ (fun_app$n lub$ y$ )))(fun_app$b g$ (fun_app$n lub$ y$ )))):named a7 ))
(assert (! (not (= y$ bot$ )):named a8 ))
(assert (! (chain$ ord$ y$ ):named a9 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 y$ )(fun_app$e (fun_app$m (llist_all2$ p$ )(fun_app$a f$ ?v0 ))(fun_app$b g$ ?v0 )))):named a10 ))
(assert (! (= (llist_all2$a uu$ )uua$ ):named a11 ))
(assert (! (= (llist_all2$b uub$ )uuc$ ):named a12 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$g (fun_app$h (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 B$ ))(=> (fun_app$k (fun_app$l ?v0 ?v4 )?v5 )(fun_app$k (fun_app$l ?v3 ?v4 )?v5 ))))(fun_app$g (fun_app$h (llist_all2$a ?v3 )?v1 )?v2 ))):named a13 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_llist$ )(?v2 B_llist$ )(?v3 C_b_bool_fun_fun$ ))(=> (and (fun_app$g (llist_all2$c ?v0 ?v1 )?v2 )(forall ((?v4 C$ )(?v5 B$ ))(=> (fun_app$k (fun_app$o ?v0 ?v4 )?v5 )(fun_app$k (fun_app$o ?v3 ?v4 )?v5 ))))(fun_app$g (llist_all2$c ?v3 ?v1 )?v2 ))):named a14 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ )(?v3 C_c_bool_fun_fun$ ))(=> (and (fun_app$e (fun_app$f (llist_all2$b ?v0 )?v1 )?v2 )(forall ((?v4 C$ )(?v5 C$ ))(=> (fun_app$i (fun_app$j ?v0 ?v4 )?v5 )(fun_app$i (fun_app$j ?v3 ?v4 )?v5 ))))(fun_app$e (fun_app$f (llist_all2$b ?v3 )?v1 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B_llist$ )(?v2 C_llist$ )(?v3 B_c_bool_fun_fun$ ))(=> (and (fun_app$e (fun_app$m (llist_all2$ ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 C$ ))(=> (fun_app$i (fun_app$p ?v0 ?v4 )?v5 )(fun_app$i (fun_app$p ?v3 ?v4 )?v5 ))))(fun_app$e (fun_app$m (llist_all2$ ?v3 )?v1 )?v2 ))):named a16 ))
(assert (! (=> (forall ((?v0 B_llist_c_llist_prod$ ))(=> (member$a ?v0 (image$ uud$ y$ ))(case_prod$ (llist_all2$ p$ )?v0 )))(fun_app$e (fun_app$m (llist_all2$ p$ )(fun_app$q lSup$ (image$a uue$ (image$ uud$ y$ ))))(fun_app$r lSup$a (image$b uuf$ (image$ uud$ y$ ))))):named a17 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ ))(! (= (fun_app$e (fun_app$f (llist_all2$b ?v0 )?v1 )lNil$a )(= ?v1 lNil$a )):pattern ((fun_app$f (llist_all2$b ?v0 )?v1 )))):named a18 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_llist$ ))(! (= (fun_app$g (llist_all2$c ?v0 ?v1 )lNil$ )(= ?v1 lNil$a )):pattern ((llist_all2$c ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$g (fun_app$h (llist_all2$a ?v0 )?v1 )lNil$ )(= ?v1 lNil$ )):pattern ((fun_app$h (llist_all2$a ?v0 )?v1 )))):named a20 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$e (fun_app$m (llist_all2$ ?v0 )?v1 )lNil$a )(= ?v1 lNil$ )):pattern ((fun_app$m (llist_all2$ ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ ))(! (= (fun_app$e (fun_app$f (llist_all2$b ?v0 )lNil$a )?v1 )(= ?v1 lNil$a )):pattern ((fun_app$e (fun_app$f (llist_all2$b ?v0 )lNil$a )?v1 )))):named a22 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$g (llist_all2$c ?v0 lNil$a )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$g (llist_all2$c ?v0 lNil$a )?v1 )))):named a23 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$g (fun_app$h (llist_all2$a ?v0 )lNil$ )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$g (fun_app$h (llist_all2$a ?v0 )lNil$ )?v1 )))):named a24 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 C_llist$ ))(! (= (fun_app$e (fun_app$m (llist_all2$ ?v0 )lNil$ )?v1 )(= ?v1 lNil$a )):pattern ((fun_app$e (fun_app$m (llist_all2$ ?v0 )lNil$ )?v1 )))):named a25 ))
(assert (! (mcont$ lub$ ord$ lSup$a lprefix$ g$ ):named a26 ))
(assert (! (mcont$a lub$ ord$ lSup$ lprefix$a f$ ):named a27 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 B$ )(?v4 B_llist$ ))(! (= (fun_app$g (fun_app$h (llist_all2$a ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))(and (fun_app$k (fun_app$l ?v0 ?v1 )?v3 )(fun_app$g (fun_app$h (llist_all2$a ?v0 )?v2 )?v4 ))):pattern ((fun_app$g (fun_app$h (llist_all2$a ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))))):named a28 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C$ )(?v2 C_llist$ )(?v3 B$ )(?v4 B_llist$ ))(! (= (fun_app$g (llist_all2$c ?v0 (lCons$a ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))(and (fun_app$k (fun_app$o ?v0 ?v1 )?v3 )(fun_app$g (llist_all2$c ?v0 ?v2 )?v4 ))):pattern ((fun_app$g (llist_all2$c ?v0 (lCons$a ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))))):named a29 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C$ )(?v2 C_llist$ )(?v3 C$ )(?v4 C_llist$ ))(! (= (fun_app$e (fun_app$f (llist_all2$b ?v0 )(lCons$a ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))(and (fun_app$i (fun_app$j ?v0 ?v1 )?v3 )(fun_app$e (fun_app$f (llist_all2$b ?v0 )?v2 )?v4 ))):pattern ((fun_app$e (fun_app$f (llist_all2$b ?v0 )(lCons$a ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))))):named a30 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 C$ )(?v4 C_llist$ ))(! (= (fun_app$e (fun_app$m (llist_all2$ ?v0 )(lCons$ ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))(and (fun_app$i (fun_app$p ?v0 ?v1 )?v3 )(fun_app$e (fun_app$m (llist_all2$ ?v0 )?v2 )?v4 ))):pattern ((fun_app$e (fun_app$m (llist_all2$ ?v0 )(lCons$ ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))))):named a31 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 Nat$ ))(=> (fun_app$g (fun_app$h (llist_all2$a ?v0 )?v1 )?v2 )(fun_app$g (fun_app$h (llist_all2$a ?v0 )(ldropn$ ?v3 ?v1 ))(ldropn$ ?v3 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_llist$ )(?v2 B_llist$ )(?v3 Nat$ ))(=> (fun_app$g (llist_all2$c ?v0 ?v1 )?v2 )(fun_app$g (llist_all2$c ?v0 (ldropn$a ?v3 ?v1 ))(ldropn$ ?v3 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ )(?v3 Nat$ ))(=> (fun_app$e (fun_app$f (llist_all2$b ?v0 )?v1 )?v2 )(fun_app$e (fun_app$f (llist_all2$b ?v0 )(ldropn$a ?v3 ?v1 ))(ldropn$a ?v3 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B_llist$ )(?v2 C_llist$ )(?v3 Nat$ ))(=> (fun_app$e (fun_app$m (llist_all2$ ?v0 )?v1 )?v2 )(fun_app$e (fun_app$m (llist_all2$ ?v0 )(ldropn$ ?v3 ?v1 ))(ldropn$a ?v3 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 Enat$ ))(=> (fun_app$g (fun_app$h (llist_all2$a ?v0 )?v1 )?v2 )(fun_app$g (fun_app$h (llist_all2$a ?v0 )(ldrop$ ?v3 ?v1 ))(ldrop$ ?v3 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_llist$ )(?v2 B_llist$ )(?v3 Enat$ ))(=> (fun_app$g (llist_all2$c ?v0 ?v1 )?v2 )(fun_app$g (llist_all2$c ?v0 (ldrop$a ?v3 ?v1 ))(ldrop$ ?v3 ?v2 )))):named a37 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ )(?v3 Enat$ ))(=> (fun_app$e (fun_app$f (llist_all2$b ?v0 )?v1 )?v2 )(fun_app$e (fun_app$f (llist_all2$b ?v0 )(ldrop$a ?v3 ?v1 ))(ldrop$a ?v3 ?v2 )))):named a38 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B_llist$ )(?v2 C_llist$ )(?v3 Enat$ ))(=> (fun_app$e (fun_app$m (llist_all2$ ?v0 )?v1 )?v2 )(fun_app$e (fun_app$m (llist_all2$ ?v0 )(ldrop$ ?v3 ?v1 ))(ldrop$a ?v3 ?v2 )))):named a39 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ ))(fun_app$e (fun_app$f (llist_all2$b ?v0 )lNil$a )lNil$a )):named a40 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ ))(fun_app$g (llist_all2$c ?v0 lNil$a )lNil$ )):named a41 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ ))(fun_app$g (fun_app$h (llist_all2$a ?v0 )lNil$ )lNil$ )):named a42 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ ))(fun_app$e (fun_app$m (llist_all2$ ?v0 )lNil$ )lNil$a )):named a43 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (fun_app$g (fun_app$h (llist_all2$a ?v0 )?v1 )?v2 )(= (lnull$ ?v1 )(lnull$ ?v2 )))):named a44 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_llist$ )(?v2 B_llist$ ))(=> (fun_app$g (llist_all2$c ?v0 ?v1 )?v2 )(= (lnull$a ?v1 )(lnull$ ?v2 )))):named a45 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (fun_app$e (fun_app$f (llist_all2$b ?v0 )?v1 )?v2 )(= (lnull$a ?v1 )(lnull$a ?v2 )))):named a46 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B_llist$ )(?v2 C_llist$ ))(=> (fun_app$e (fun_app$m (llist_all2$ ?v0 )?v1 )?v2 )(= (lnull$ ?v1 )(lnull$a ?v2 )))):named a47 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 B_llist$ ))(= (fun_app$g (fun_app$h (llist_all2$a ?v0 )(lCons$ ?v1 ?v2 ))?v3 )(exists ((?v4 B$ )(?v5 B_llist$ ))(and (= ?v3 (lCons$ ?v4 ?v5 ))(and (fun_app$k (fun_app$l ?v0 ?v1 )?v4 )(fun_app$g (fun_app$h (llist_all2$a ?v0 )?v2 )?v5 )))))):named a48 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C$ )(?v2 C_llist$ )(?v3 B_llist$ ))(= (fun_app$g (llist_all2$c ?v0 (lCons$a ?v1 ?v2 ))?v3 )(exists ((?v4 B$ )(?v5 B_llist$ ))(and (= ?v3 (lCons$ ?v4 ?v5 ))(and (fun_app$k (fun_app$o ?v0 ?v1 )?v4 )(fun_app$g (llist_all2$c ?v0 ?v2 )?v5 )))))):named a49 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C$ )(?v2 C_llist$ )(?v3 C_llist$ ))(= (fun_app$e (fun_app$f (llist_all2$b ?v0 )(lCons$a ?v1 ?v2 ))?v3 )(exists ((?v4 C$ )(?v5 C_llist$ ))(and (= ?v3 (lCons$a ?v4 ?v5 ))(and (fun_app$i (fun_app$j ?v0 ?v1 )?v4 )(fun_app$e (fun_app$f (llist_all2$b ?v0 )?v2 )?v5 )))))):named a50 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 C_llist$ ))(= (fun_app$e (fun_app$m (llist_all2$ ?v0 )(lCons$ ?v1 ?v2 ))?v3 )(exists ((?v4 C$ )(?v5 C_llist$ ))(and (= ?v3 (lCons$a ?v4 ?v5 ))(and (fun_app$i (fun_app$p ?v0 ?v1 )?v4 )(fun_app$e (fun_app$m (llist_all2$ ?v0 )?v2 )?v5 )))))):named a51 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (fun_app$g (fun_app$h (llist_all2$a ?v0 )?v1 )(lCons$ ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_llist$ ))(and (= ?v1 (lCons$ ?v4 ?v5 ))(and (fun_app$k (fun_app$l ?v0 ?v4 )?v2 )(fun_app$g (fun_app$h (llist_all2$a ?v0 )?v5 )?v3 )))))):named a52 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (fun_app$g (llist_all2$c ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(exists ((?v4 C$ )(?v5 C_llist$ ))(and (= ?v1 (lCons$a ?v4 ?v5 ))(and (fun_app$k (fun_app$o ?v0 ?v4 )?v2 )(fun_app$g (llist_all2$c ?v0 ?v5 )?v3 )))))):named a53 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C$ )(?v3 C_llist$ ))(= (fun_app$e (fun_app$f (llist_all2$b ?v0 )?v1 )(lCons$a ?v2 ?v3 ))(exists ((?v4 C$ )(?v5 C_llist$ ))(and (= ?v1 (lCons$a ?v4 ?v5 ))(and (fun_app$i (fun_app$j ?v0 ?v4 )?v2 )(fun_app$e (fun_app$f (llist_all2$b ?v0 )?v5 )?v3 )))))):named a54 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B_llist$ )(?v2 C$ )(?v3 C_llist$ ))(= (fun_app$e (fun_app$m (llist_all2$ ?v0 )?v1 )(lCons$a ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_llist$ ))(and (= ?v1 (lCons$ ?v4 ?v5 ))(and (fun_app$i (fun_app$p ?v0 ?v4 )?v2 )(fun_app$e (fun_app$m (llist_all2$ ?v0 )?v5 )?v3 )))))):named a55 ))
(check-sat )
;(get-unsat-core )
