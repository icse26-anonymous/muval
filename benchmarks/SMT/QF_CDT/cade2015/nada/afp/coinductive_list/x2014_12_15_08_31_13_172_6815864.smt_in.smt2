;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun a$ ()A$ )
(declare-fun p$ (A$ )Bool )
(declare-fun ma$ ()Nat$ )
(declare-fun mb$ ()Nat$ )
(declare-fun na$ ()Nat$ )
(declare-fun nb$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun less_eq$ (Nat$ )Nat_bool_fun$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= mb$ (suc$ ?v0 ))thesis$ )):named a1 ))
(assert (! (fun_app$ (less_eq$ (suc$ nb$ ))mb$ ):named a2 ))
(assert (! (fun_app$ (less_eq$ na$ )ma$ ):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (less_eq$ (suc$ ?v0 ))(suc$ ?v1 ))(fun_app$ (less_eq$ ?v0 )?v1 )):pattern ((fun_app$ (less_eq$ (suc$ ?v0 ))(suc$ ?v1 ))))):named a8 ))
(assert (! (= (lnth$ xsa$ mb$ )a$ ):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (less_eq$ ?v0 )(suc$ ?v1 ))(or (fun_app$ (less_eq$ ?v0 )?v1 )(= ?v0 (suc$ ?v1 )))):pattern ((fun_app$ (less_eq$ ?v0 )(suc$ ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (fun_app$ (less_eq$ ?v0 )?v1 ))(fun_app$ (less_eq$ (suc$ ?v1 ))?v0 ))):named a11 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(=> (fun_app$ (less_eq$ (suc$ ?v3 ))?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$ (less_eq$ (suc$ ?v0 ))?v1 )(fun_app$ (less_eq$ ?v0 )?v1 ))):named a13 ))
(assert (! (p$ a$ ):named a14 ))
(assert (! (= (lnth$ xsa$ (suc$ nb$ ))a$ ):named a15 ))
(assert (! (= (lnth$ xs$ ma$ )a$ ):named a16 ))
(assert (! (= (lnth$ xs$ na$ )a$ ):named a17 ))
(check-sat )
;(get-unsat-core )
