;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun nibble0$ ()Nibble$)
(declare-fun nibble1$ ()Nibble$)
(declare-fun nibble2$ ()Nibble$)
(declare-fun nibble3$ ()Nibble$)
(declare-fun nibble4$ ()Nibble$)
(declare-fun nibble5$ ()Nibble$)
(declare-fun nibble6$ ()Nibble$)
(declare-fun nibble7$ ()Nibble$)
(declare-fun nibble8$ ()Nibble$)
(declare-fun nibble9$ ()Nibble$)
(declare-fun nibbleA$ ()Nibble$)
(declare-fun nibbleB$ ()Nibble$)
(declare-fun nibbleC$ ()Nibble$)
(declare-fun nibbleD$ ()Nibble$)
(declare-fun nibbleE$ ()Nibble$)
(declare-fun nibbleF$ ()Nibble$)
(declare-fun select$ (Char$)Nibble$)
(declare-fun selecta$ (Char$)Nibble$)
(declare-fun char$ (Nibble$ Nibble$ )Char$)
(declare-fun na$ ()Enat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun size$ (Char$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun less$a (Nat$ )Nat_bool_fun$ )
(declare-fun ltake$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun size_bool$ (Bool )Nat$ )
(declare-fun size_char$ (Char$ )Nat$ )
(assert (! (not (= (lnth$ (fun_app$ (ltake$ na$ )xsa$ )zero$ )(lnth$ xsa$ zero$ ))):named a0 ))
(assert (! (less$ (enat$ zero$ )na$ ):named a1 ))
(assert (! (= zero$ zero$ ):named a2 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lnth$ (lCons$ ?v0 ?v1 )zero$ )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a6 ))
(assert (! (= (size_bool$ true )zero$ ):named a7 ))
(assert (! (= (size_bool$ false )zero$ ):named a8 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size$ ?v0 )zero$ ):pattern ((size$ ?v0 )))):named a9 ))
(assert (! (not (fun_app$a (less$a zero$ )zero$ )):named a10 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ltake$ ?v0 )lNil$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (less$a ?v0 )zero$ )false ):pattern ((less$a ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (fun_app$a (less$a zero$ )?v0 ))(= ?v0 zero$ ))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (= ?v0 zero$ ))(fun_app$a (less$a zero$ )?v0 ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a15 ))
(check-sat )
;(get-unsat-core )
