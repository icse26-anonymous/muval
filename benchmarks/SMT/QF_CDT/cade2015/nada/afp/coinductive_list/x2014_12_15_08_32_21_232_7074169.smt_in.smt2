;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist_llist_llist$ 0)
(declare-sort A_llist_llist_llist_llist$ 0)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun lNil$c ()A_llist_llist_llist_llist$)
(declare-fun lhd$c (A_llist_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun ltl$c (A_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun lCons$c (A_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$)
(declare-fun na$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun ldrop$ (Enat$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun ltake$ (Enat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun ldrop$a (Enat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun ldrop$b (Enat$ A_llist$ )A_llist$ )
(declare-fun ldropn$ (Nat$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun ltake$a (Enat$ A_llist$ )A_llist$ )
(declare-fun ltake$b (Enat$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun ldropn$a (Nat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun ldropn$b (Nat$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist_llist_llist_llist$ )Bool )
(declare-fun lappend$a (A_llist_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lappend$b (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lappend$c (A_llist_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$ )
(declare-fun lconcat$a (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lfinite$a (A_llist_llist_llist$ )Bool )
(declare-fun lfinite$b (A_llist_llist$ )Bool )
(declare-fun lfinite$c (A_llist$ )Bool )
(assert (! (not (= (lconcat$ (ltake$ (enat$ (suc$ na$ ))xssa$ ))(lappend$ xs$ (lconcat$ (ltake$ (enat$ na$ )xss$ ))))):named a0 ))
(assert (! (= xssa$ (lCons$a xs$ xss$ )):named a1 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(= (lappend$a (lappend$a ?v0 ?v1 )?v2 )(lappend$a ?v0 (lappend$a ?v1 ?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(= (lappend$b (lappend$b ?v0 ?v1 )?v2 )(lappend$b ?v0 (lappend$b ?v1 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$a (enat$ ?v2 )?v0 )(ltake$a (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ ))(! (= (lconcat$a (lCons$c ?v0 ?v1 ))(lappend$a ?v0 (lconcat$a ?v1 ))):pattern ((lCons$c ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lconcat$b (lCons$b ?v0 ?v1 ))(lappend$b ?v0 (lconcat$b ?v1 ))):pattern ((lCons$b ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lconcat$ (lCons$a ?v0 ?v1 ))(lappend$ ?v0 (lconcat$ ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (lappend$a (lCons$b ?v0 ?v1 )?v2 )(lCons$b ?v0 (lappend$a ?v1 ?v2 ))):pattern ((lappend$a (lCons$b ?v0 ?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$ (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$ ?v0 ?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(! (= (lappend$b (lCons$a ?v0 ?v1 )?v2 )(lCons$a ?v0 (lappend$b ?v1 ?v2 ))):pattern ((lappend$b (lCons$a ?v0 ?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_llist_llist$ ))(= (lappend$a (ltake$b (enat$ ?v0 )?v1 )(ldropn$ ?v0 ?v1 ))?v1 )):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_llist$ ))(= (lappend$b (ltake$ (enat$ ?v0 )?v1 )(ldropn$a ?v0 ?v1 ))?v1 )):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lappend$ (ltake$a (enat$ ?v0 )?v1 )(ldropn$b ?v0 ?v1 ))?v1 )):named a18 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a23 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ ))(=> (lfinite$ ?v0 )(= (lconcat$a (lappend$c ?v0 ?v1 ))(lappend$a (lconcat$a ?v0 )(lconcat$a ?v1 ))))):named a24 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (lfinite$a ?v0 )(= (lconcat$b (lappend$a ?v0 ?v1 ))(lappend$b (lconcat$b ?v0 )(lconcat$b ?v1 ))))):named a25 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (lfinite$b ?v0 )(= (lconcat$ (lappend$b ?v0 ?v1 ))(lappend$ (lconcat$ ?v0 )(lconcat$ ?v1 ))))):named a26 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_llist_llist$ ))(= (lappend$a (ltake$b ?v0 ?v1 )(ldrop$ ?v0 ?v1 ))?v1 )):named a27 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_llist$ ))(= (lappend$b (ltake$ ?v0 ?v1 )(ldrop$a ?v0 ?v1 ))?v1 )):named a28 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (lappend$ (ltake$a ?v0 ?v1 )(ldrop$b ?v0 ?v1 ))?v1 )):named a29 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lfinite$a (lCons$b ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$c (lCons$ ?v0 ?v1 ))(lfinite$c ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lfinite$b (lCons$a ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lfinite$a (lCons$b ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a33 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$c (lCons$ ?v0 ?v1 ))(lfinite$c ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lfinite$b (lCons$a ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a35 ))
(check-sat )
;(get-unsat-core )
