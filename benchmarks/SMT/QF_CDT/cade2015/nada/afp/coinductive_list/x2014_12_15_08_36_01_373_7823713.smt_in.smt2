;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_a_fun_nat_a_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun f$ ()Nat_a_fun$ )
(declare-fun n$ ()Nat$ )
(declare-fun uu$ ()Nat_a_fun$ )
(declare-fun uua$ (Nat$ )Nat_a_fun_nat_a_fun_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun plus$a (Enat$ Enat$ )Enat$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$a (Nat_a_fun_nat_a_fun_fun$ Nat_a_fun$ )Nat_a_fun$ )
(declare-fun inf_llist$ (Nat_a_fun$ )A_llist$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$ f$ (plus$ ?v0 n$ ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )(fun_app$ ?v1 (plus$ ?v2 ?v0 ))):pattern ((fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (not (= (ldrop$ (enat$ n$ )(inf_llist$ f$ ))(inf_llist$ uu$ ))):named a2 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_a_fun$ ))(= (= (inf_llist$ ?v0 )(inf_llist$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_fun$ ))(= (ldropn$ ?v0 (inf_llist$ ?v1 ))(inf_llist$ (fun_app$a (uua$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )(plus$ ?v2 ?v3 ))(plus$ (plus$ ?v0 ?v2 )(plus$ ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ )(?v3 Enat$ ))(= (plus$a (plus$a ?v0 ?v1 )(plus$a ?v2 ?v3 ))(plus$a (plus$a ?v0 ?v2 )(plus$a ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ (plus$ ?v0 ?v2 )?v1 ))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (plus$a (plus$a ?v0 ?v1 )?v2 )(plus$a (plus$a ?v0 ?v2 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ ?v0 (plus$ ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (plus$a (plus$a ?v0 ?v1 )?v2 )(plus$a ?v0 (plus$a ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ ?v0 (plus$ ?v1 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (plus$a (plus$a ?v0 ?v1 )?v2 )(plus$a ?v0 (plus$a ?v1 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ ?v0 (plus$ ?v1 ?v2 ))(plus$ (plus$ ?v0 ?v1 )?v2 ))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (plus$a ?v0 (plus$a ?v1 ?v2 ))(plus$a (plus$a ?v0 ?v1 )?v2 ))):named a19 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (ldrop$ ?v0 (ldrop$ ?v1 ?v2 ))(ldrop$ (plus$a ?v0 ?v1 )?v2 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (plus$a (enat$ ?v0 )(enat$ ?v1 ))(enat$ (plus$ ?v0 ?v1 ))):pattern ((plus$a (enat$ ?v0 )(enat$ ?v1 ))))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_llist$ ))(= (ldropn$ ?v0 (ldropn$ ?v1 ?v2 ))(ldropn$ (plus$ ?v0 ?v1 )?v2 ))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(! (= (ldrop$ (enat$ ?v0 )?v1 )(ldropn$ ?v0 ?v1 )):pattern ((ldrop$ (enat$ ?v0 )?v1 )))):named a23 ))
(check-sat )
;(get-unsat-core )
