;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun less$a (Nat$ )Nat_bool_fun$ )
(declare-fun llast$ (A_llist$ )A$ )
(declare-fun minus$ (Enat$ Enat$ )Enat$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (Nat_bool_fun$ Nat$ )Bool )
(declare-fun lstrict_prefix$ (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (= (llast$ (ldropn$ n$ xs$ ))(llast$ xs$ ))):named a0 ))
(assert (! (fun_app$ (less$ (enat$ n$ ))(llength$ xs$ )):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )(enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(=> (= (ldropn$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(fun_app$ (less$ (enat$ ?v0 ))(llength$ ?v1 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (llength$ (ldropn$ ?v0 ?v1 ))(minus$ (llength$ ?v1 )(enat$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (fun_app$a (lstrict_prefix$ ?v0 )?v1 )(fun_app$ (less$ (llength$ ?v0 ))(llength$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$ (less$ ?v0 )?v1 )(fun_app$ (less$ ?v1 )?v0 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$b (less$a ?v0 )?v1 )(fun_app$b (less$a ?v1 )?v0 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (fun_app$ (less$ ?v0 )?v1 ))(or (fun_app$ (less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (fun_app$b (less$a ?v0 )?v1 ))(or (fun_app$b (less$a ?v1 )?v0 )(= ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (=> (fun_app$ (less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$ (less$ ?v1 )?v0 )false )))false )):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (=> (fun_app$b (less$a ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$b (less$a ?v1 )?v0 )false )))false )):named a13 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(=> (fun_app$b (less$a ?v3 )?v2 )(fun_app$b ?v0 ?v3 )))(fun_app$b ?v0 ?v2 )))(fun_app$b ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (less$ (enat$ ?v0 ))(enat$ ?v1 ))(fun_app$b (less$a ?v0 )?v1 )):pattern ((fun_app$ (less$ (enat$ ?v0 ))(enat$ ?v1 ))))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$a (lstrict_prefix$ ?v1 )?v3 ))):pattern ((fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (llast$ (lCons$ ?v0 (lCons$ ?v1 ?v2 )))(llast$ (lCons$ ?v1 ?v2 ))):pattern ((lCons$ ?v0 (lCons$ ?v1 ?v2 ))))):named a19 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (forall ((?v2 A_llist$ ))(=> (forall ((?v3 A_llist$ ))(=> (fun_app$a (lstrict_prefix$ ?v3 )?v2 )(fun_app$a ?v0 ?v3 )))(fun_app$a ?v0 ?v2 )))(fun_app$a ?v0 ?v1 ))):named a20 ))
(check-sat )
;(get-unsat-core )
