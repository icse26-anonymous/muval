;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ (A_llist$ )Bool )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun insert$ (A$ A_set$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_llist_bool_fun_fun$ A$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun pred_llist$ (A_bool_fun$ )A_llist_bool_fun$ )
(assert (! (not (p$ xs$ )):named a0 ))
(assert (! (member$ x$ (lset$ xs$ )):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(p$ (lCons$ x$ ?v0 ))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (and (member$ x$ (lset$ ?v0 ))(and (not (= x$ ?v1 ))(p$ ?v0 )))(p$ (lCons$ ?v1 ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_a_llist_bool_fun_fun$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v3 A$ )(?v4 A_llist$ ))(fun_app$ (fun_app$a ?v2 ?v3 )(lCons$ ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_llist$ )(?v5 A$ ))(=> (and (member$ ?v5 (lset$ ?v4 ))(fun_app$ (fun_app$a ?v2 ?v5 )?v4 ))(fun_app$ (fun_app$a ?v2 ?v5 )(lCons$ ?v3 ?v4 ))))))(fun_app$ (fun_app$a ?v2 ?v0 )?v1 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v2 A_llist$ ))(=> (= ?v1 (lCons$ ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v1 (lCons$ ?v2 ?v3 ))(member$ ?v0 (lset$ ?v3 )))false ))))false )):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist_bool_fun$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v3 A_llist$ ))(fun_app$ ?v2 (lCons$ ?v0 ?v3 )))(forall ((?v3 A$ )(?v4 A_llist$ ))(=> (and (member$ ?v0 (lset$ ?v4 ))(fun_app$ ?v2 ?v4 ))(fun_app$ ?v2 (lCons$ ?v3 ?v4 ))))))(fun_app$ ?v2 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v2 A_llist$ ))(=> (= ?v1 (lCons$ ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v1 (lCons$ ?v2 ?v3 ))(member$ ?v0 (lset$ ?v3 )))false ))))false )):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ ))(=> (member$ ?v0 (lset$ ?v1 ))(member$ ?v0 (lset$ (lCons$ ?v2 ?v1 ))))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ ))(=> (member$ ?v0 (lset$ ?v1 ))(member$ ?v0 (lset$ (lCons$ ?v2 ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(member$ ?v0 (lset$ (lCons$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(member$ ?v0 (lset$ (lCons$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$ (pred_llist$ ?v0 )(lCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(fun_app$ (pred_llist$ ?v0 )?v2 ))):pattern ((fun_app$ (pred_llist$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lset$ (lCons$ ?v0 ?v1 ))(insert$ ?v0 (lset$ ?v1 ))):pattern ((lCons$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lset$ (lCons$ ?v0 ?v1 ))(insert$ ?v0 (lset$ ?v1 ))):pattern ((lCons$ ?v0 ?v1 )))):named a15 ))
(check-sat )
;(get-unsat-core )
