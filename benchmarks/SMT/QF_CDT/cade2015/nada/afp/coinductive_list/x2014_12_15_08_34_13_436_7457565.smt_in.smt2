;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_nat_bool_fun_fun$ 0 )
(declare-sort Nat_a_bool_fun_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort Nat_llist$ 0)
(declare-fun lNil$a ()Nat_llist$)
(declare-fun lhd$a (Nat_llist$)Nat$)
(declare-fun ltl$a (Nat_llist$)Nat_llist$)
(declare-fun lCons$a (Nat$ Nat_llist$ )Nat_llist$)
(declare-fun i$ ()Nat_set$ )
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun uua$ (Nat_llist$ )Nat_bool_fun$ )
(declare-fun uub$ (A_llist$ )A_bool_fun$ )
(declare-fun uuc$ ()Nat_nat_fun$ )
(declare-fun uud$ ()A_a_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lmap$ (A_nat_fun$ A_llist$ )Nat_llist$ )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lmap$a (Nat_a_fun$ Nat_llist$ )A_llist$ )
(declare-fun lmap$b (Nat_nat_fun$ Nat_llist$ )Nat_llist$ )
(declare-fun lmap$c (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnth$a (Nat_llist$ )Nat_nat_fun$ )
(declare-fun lset$a (Nat_llist$ )Nat_set$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lappend$ (Nat_llist$ Nat_llist$ )Nat_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (Nat_llist$ Nat_llist$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun collect$a (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$a (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$b (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$c (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$d (A_a_fun$ A$ )A$ )
(declare-fun fun_app$e (A_nat_fun$ A$ )Nat$ )
(declare-fun fun_app$f (A_nat_bool_fun_fun$ A$ )Nat_bool_fun$ )
(declare-fun fun_app$g (Nat_a_bool_fun_fun$ Nat$ )A_bool_fun$ )
(declare-fun fun_app$h (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun fun_app$i (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun lappend$a (A_llist$ A_llist$ )A_llist$ )
(declare-fun llength$a (Nat_llist$ )Enat$ )
(declare-fun lprefix$a (A_llist$ A_llist$ )Bool )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun ldistinct$ (Nat_llist$ )Bool )
(declare-fun ldistinct$a (A_llist$ )Bool )
(declare-fun llist_all2$ (A_nat_bool_fun_fun$ A_llist$ Nat_llist$ )Bool )
(declare-fun ltakeWhile$ (Nat_bool_fun$ Nat_llist$ )Nat_llist$ )
(declare-fun llist_all2$a (Nat_a_bool_fun_fun$ Nat_llist$ A_llist$ )Bool )
(declare-fun llist_all2$b (Nat_nat_bool_fun_fun$ Nat_llist$ Nat_llist$ )Bool )
(declare-fun llist_all2$c (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun ltakeWhile$a (A_bool_fun$ A_llist$ )A_llist$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(exists ((?v1 Nat$ ))(and (= ?v0 (fun_app$a (lnth$ xs$ )?v1 ))(and (less$ (enat$ ?v1 )(llength$ xs$ ))(member$ ?v1 i$ ))))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat$ ))(! (= (fun_app$b (uua$ ?v0 )?v1 )(exists ((?v2 Nat$ ))(and (= ?v1 (fun_app$c (lnth$a ?v0 )?v2 ))(less$ (enat$ ?v2 )(llength$a ?v0 ))))):pattern ((fun_app$b (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(! (= (fun_app$ (uub$ ?v0 )?v1 )(exists ((?v2 Nat$ ))(and (= ?v1 (fun_app$a (lnth$ ?v0 )?v2 ))(less$ (enat$ ?v2 )(llength$ ?v0 ))))):pattern ((fun_app$ (uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$c uuc$ ?v0 )?v0 ):pattern ((fun_app$c uuc$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$d uud$ ?v0 )?v0 ):pattern ((fun_app$d uud$ ?v0 )))):named a4 ))
(assert (! (not (= (lset$ (lsublist$ xs$ i$ ))(collect$ uu$ ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ ))(= (member$ ?v0 (lset$a ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$a ?v1 ))(= (fun_app$c (lnth$a ?v1 )?v2 )?v0 ))))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$a ?v0 (lset$ ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$ ?v1 ))(= (fun_app$a (lnth$ ?v1 )?v2 )?v0 ))))):named a7 ))
(assert (! (forall ((?v0 Nat_llist$ ))(= (lset$a ?v0 )(collect$a (uua$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lset$ ?v0 )(collect$ (uub$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 Nat_llist$ ))(= (ldistinct$ ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$a ?v0 ))(and (less$ (enat$ ?v2 )(llength$a ?v0 ))(not (= ?v1 ?v2 ))))(not (= (fun_app$c (lnth$a ?v0 )?v1 )(fun_app$c (lnth$a ?v0 )?v2 ))))))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ldistinct$a ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$ ?v0 ))(and (less$ (enat$ ?v2 )(llength$ ?v0 ))(not (= ?v1 ?v2 ))))(not (= (fun_app$a (lnth$ ?v0 )?v1 )(fun_app$a (lnth$ ?v0 )?v2 ))))))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_nat_fun$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (fun_app$c (lnth$a (lmap$ ?v2 ?v1 ))?v0 )(fun_app$e ?v2 (fun_app$a (lnth$ ?v1 )?v0 ))))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat_a_fun$ ))(=> (less$ (enat$ ?v0 )(llength$a ?v1 ))(= (fun_app$a (lnth$ (lmap$a ?v2 ?v1 ))?v0 )(fun_app$a ?v2 (fun_app$c (lnth$a ?v1 )?v0 ))))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat_nat_fun$ ))(=> (less$ (enat$ ?v0 )(llength$a ?v1 ))(= (fun_app$c (lnth$a (lmap$b ?v2 ?v1 ))?v0 )(fun_app$c ?v2 (fun_app$c (lnth$a ?v1 )?v0 ))))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (fun_app$a (lnth$ (lmap$c ?v2 ?v1 ))?v0 )(fun_app$d ?v2 (fun_app$a (lnth$ ?v1 )?v0 ))))):named a17 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ )(?v2 Nat$ ))(=> (and (lprefix$ ?v0 ?v1 )(less$ (enat$ ?v2 )(llength$a ?v0 )))(= (fun_app$c (lnth$a ?v0 )?v2 )(fun_app$c (lnth$a ?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 Nat$ ))(=> (and (lprefix$a ?v0 ?v1 )(less$ (enat$ ?v2 )(llength$ ?v0 )))(= (fun_app$a (lnth$ ?v0 )?v2 )(fun_app$a (lnth$ ?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_bool_fun$ )(?v2 Nat_llist$ ))(=> (less$ (enat$ ?v0 )(llength$a (ltakeWhile$ ?v1 ?v2 )))(= (fun_app$c (lnth$a (ltakeWhile$ ?v1 ?v2 ))?v0 )(fun_app$c (lnth$a ?v2 )?v0 )))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )(llength$ (ltakeWhile$a ?v1 ?v2 )))(= (fun_app$a (lnth$ (ltakeWhile$a ?v1 ?v2 ))?v0 )(fun_app$a (lnth$ ?v2 )?v0 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ ))(=> (less$ (enat$ ?v0 )(llength$a ?v1 ))(= (fun_app$c (lnth$a (lappend$ ?v1 ?v2 ))?v0 )(fun_app$c (lnth$a ?v1 )?v0 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (fun_app$a (lnth$ (lappend$a ?v1 ?v2 ))?v0 )(fun_app$a (lnth$ ?v1 )?v0 )))):named a23 ))
(assert (! (forall ((?v0 A_nat_bool_fun_fun$ )(?v1 A_llist$ )(?v2 Nat_llist$ ))(= (llist_all2$ ?v0 ?v1 ?v2 )(and (= (llength$ ?v1 )(llength$a ?v2 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$a ?v2 ))(fun_app$b (fun_app$f ?v0 (fun_app$a (lnth$ ?v1 )?v3 ))(fun_app$c (lnth$a ?v2 )?v3 ))))))):named a24 ))
(assert (! (forall ((?v0 Nat_a_bool_fun_fun$ )(?v1 Nat_llist$ )(?v2 A_llist$ ))(= (llist_all2$a ?v0 ?v1 ?v2 )(and (= (llength$a ?v1 )(llength$ ?v2 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$ ?v2 ))(fun_app$ (fun_app$g ?v0 (fun_app$c (lnth$a ?v1 )?v3 ))(fun_app$a (lnth$ ?v2 )?v3 ))))))):named a25 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ ))(= (llist_all2$b ?v0 ?v1 ?v2 )(and (= (llength$a ?v1 )(llength$a ?v2 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$a ?v2 ))(fun_app$b (fun_app$h ?v0 (fun_app$c (lnth$a ?v1 )?v3 ))(fun_app$c (lnth$a ?v2 )?v3 ))))))):named a26 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (llist_all2$c ?v0 ?v1 ?v2 )(and (= (llength$ ?v1 )(llength$ ?v2 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$ ?v2 ))(fun_app$ (fun_app$i ?v0 (fun_app$a (lnth$ ?v1 )?v3 ))(fun_app$a (lnth$ ?v2 )?v3 ))))))):named a27 ))
(assert (! (forall ((?v0 Nat_a_bool_fun_fun$ )(?v1 Nat_llist$ )(?v2 A_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$a ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$ ?v2 )))(fun_app$ (fun_app$g ?v0 (fun_app$c (lnth$a ?v1 )?v3 ))(fun_app$a (lnth$ ?v2 )?v3 )))):named a28 ))
(assert (! (forall ((?v0 A_nat_bool_fun_fun$ )(?v1 A_llist$ )(?v2 Nat_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$a ?v2 )))(fun_app$b (fun_app$f ?v0 (fun_app$a (lnth$ ?v1 )?v3 ))(fun_app$c (lnth$a ?v2 )?v3 )))):named a29 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$b ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$a ?v2 )))(fun_app$b (fun_app$h ?v0 (fun_app$c (lnth$a ?v1 )?v3 ))(fun_app$c (lnth$a ?v2 )?v3 )))):named a30 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$c ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$ ?v2 )))(fun_app$ (fun_app$i ?v0 (fun_app$a (lnth$ ?v1 )?v3 ))(fun_app$a (lnth$ ?v2 )?v3 )))):named a31 ))
(assert (! (forall ((?v0 A_nat_bool_fun_fun$ )(?v1 A_llist$ )(?v2 Nat_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$ ?v1 )))(fun_app$b (fun_app$f ?v0 (fun_app$a (lnth$ ?v1 )?v3 ))(fun_app$c (lnth$a ?v2 )?v3 )))):named a32 ))
(assert (! (forall ((?v0 Nat_a_bool_fun_fun$ )(?v1 Nat_llist$ )(?v2 A_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$a ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$a ?v1 )))(fun_app$ (fun_app$g ?v0 (fun_app$c (lnth$a ?v1 )?v3 ))(fun_app$a (lnth$ ?v2 )?v3 )))):named a33 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$b ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$a ?v1 )))(fun_app$b (fun_app$h ?v0 (fun_app$c (lnth$a ?v1 )?v3 ))(fun_app$c (lnth$a ?v2 )?v3 )))):named a34 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$c ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$ ?v1 )))(fun_app$ (fun_app$i ?v0 (fun_app$a (lnth$ ?v1 )?v3 ))(fun_app$a (lnth$ ?v2 )?v3 )))):named a35 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat_llist$ )(?v2 A_nat_bool_fun_fun$ ))(=> (and (= (llength$ ?v0 )(llength$a ?v1 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$ ?v0 ))(fun_app$b (fun_app$f ?v2 (fun_app$a (lnth$ ?v0 )?v3 ))(fun_app$c (lnth$a ?v1 )?v3 )))))(llist_all2$ ?v2 ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 A_llist$ )(?v2 Nat_a_bool_fun_fun$ ))(=> (and (= (llength$a ?v0 )(llength$ ?v1 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$a ?v0 ))(fun_app$ (fun_app$g ?v2 (fun_app$c (lnth$a ?v0 )?v3 ))(fun_app$a (lnth$ ?v1 )?v3 )))))(llist_all2$a ?v2 ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ )(?v2 Nat_nat_bool_fun_fun$ ))(=> (and (= (llength$a ?v0 )(llength$a ?v1 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$a ?v0 ))(fun_app$b (fun_app$h ?v2 (fun_app$c (lnth$a ?v0 )?v3 ))(fun_app$c (lnth$a ?v1 )?v3 )))))(llist_all2$b ?v2 ?v0 ?v1 ))):named a38 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (and (= (llength$ ?v0 )(llength$ ?v1 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$ ?v0 ))(fun_app$ (fun_app$i ?v2 (fun_app$a (lnth$ ?v0 )?v3 ))(fun_app$a (lnth$ ?v1 )?v3 )))))(llist_all2$c ?v2 ?v0 ?v1 ))):named a39 ))
(assert (! (forall ((?v0 Nat_llist$ ))(lprefix$ ?v0 ?v0 )):named a40 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$a ?v0 ?v0 )):named a41 ))
(assert (! (forall ((?v0 Nat_llist$ ))(lprefix$ ?v0 ?v0 )):named a42 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$a ?v0 ?v0 )):named a43 ))
(assert (! (forall ((?v0 Nat_llist$ ))(= (lmap$b uuc$ ?v0 )?v0 )):named a44 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lmap$c uud$ ?v0 )?v0 )):named a45 ))
(check-sat )
;(get-unsat-core )
