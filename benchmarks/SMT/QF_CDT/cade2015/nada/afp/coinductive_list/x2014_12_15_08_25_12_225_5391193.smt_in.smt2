;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_prod_set$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort B_a_prod_set$ 0 )
(declare-sort B_b_prod_set$ 0 )
(declare-sort A_a_prod_a_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort B_a_prod_a_fun$ 0 )
(declare-sort B_a_prod_b_fun$ 0 )
(declare-sort B_b_prod_a_fun$ 0 )
(declare-sort B_b_prod_b_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_a_a_prod_prod_set$ 0 )
(declare-sort A_a_b_prod_prod_set$ 0 )
(declare-sort A_b_a_prod_prod_set$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_a_a_prod_bool_fun_fun$ 0 )
(declare-sort A_a_b_prod_bool_fun_fun$ 0 )
(declare-sort A_a_prod_a_bool_fun_fun$ 0 )
(declare-sort A_a_prod_b_bool_fun_fun$ 0 )
(declare-sort A_b_prod_a_bool_fun_fun$ 0 )
(declare-sort A_b_prod_b_bool_fun_fun$ 0 )
(declare-sort B_a_a_prod_bool_fun_fun$ 0 )
(declare-sort B_a_b_prod_bool_fun_fun$ 0 )
(declare-sort B_a_prod_b_bool_fun_fun$ 0 )
(declare-sort B_b_a_prod_bool_fun_fun$ 0 )
(declare-sort B_b_b_prod_bool_fun_fun$ 0 )
(declare-sort B_b_prod_b_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_b_prod_llist_a_b_prod_llist_fun$ 0 )
(declare-sort B_a_prod_llist_b_a_prod_llist_fun$ 0 )
(declare-sort B_b_prod_llist_b_b_prod_llist_fun$ 0 )
(declare-sort A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ 0 )
(declare-sort A_b_a_prod_prod_llist_a_b_a_prod_prod_llist_fun$ 0 )
(declare-sort A_b_b_prod_prod_llist_a_b_b_prod_prod_llist_fun$ 0 )
(declare-sort B_a_a_prod_prod_llist_b_a_a_prod_prod_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort B_b_prod$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun fst$ (B_b_prod$)B$)
(declare-fun snd$ (B_b_prod$)B$)
(declare-fun pair$ (B$ B$ )B_b_prod$)
(declare-sort B_b_prod_llist$ 0)
(declare-fun lNil$b ()B_b_prod_llist$)
(declare-fun lhd$b (B_b_prod_llist$)B_b_prod$)
(declare-fun ltl$b (B_b_prod_llist$)B_b_prod_llist$)
(declare-fun lCons$b (B_b_prod$ B_b_prod_llist$ )B_b_prod_llist$)
(declare-sort B_a_prod$ 0)
(declare-fun fst$a (B_a_prod$)B$)
(declare-fun snd$a (B_a_prod$)A$)
(declare-fun pair$a (B$ A$ )B_a_prod$)
(declare-sort B_a_prod_llist$ 0)
(declare-fun lNil$c ()B_a_prod_llist$)
(declare-fun lhd$c (B_a_prod_llist$)B_a_prod$)
(declare-fun ltl$c (B_a_prod_llist$)B_a_prod_llist$)
(declare-fun lCons$c (B_a_prod$ B_a_prod_llist$ )B_a_prod_llist$)
(declare-sort A_b_prod$ 0)
(declare-fun fst$b (A_b_prod$)A$)
(declare-fun snd$b (A_b_prod$)B$)
(declare-fun pair$b (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_llist$ 0)
(declare-fun lNil$d ()A_b_prod_llist$)
(declare-fun lhd$d (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$d (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$d (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$c (A_a_prod$)A$)
(declare-fun snd$c (A_a_prod$)A$)
(declare-fun pair$c (A$ A$ )A_a_prod$)
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$e ()A_a_prod_llist$)
(declare-fun lhd$e (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$e (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$e (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-sort B_a_a_prod_prod$ 0)
(declare-fun fst$d (B_a_a_prod_prod$)B$)
(declare-fun snd$d (B_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$d (B$ A_a_prod$ )B_a_a_prod_prod$)
(declare-sort B_a_a_prod_prod_llist$ 0)
(declare-fun lNil$f ()B_a_a_prod_prod_llist$)
(declare-fun lhd$f (B_a_a_prod_prod_llist$)B_a_a_prod_prod$)
(declare-fun ltl$f (B_a_a_prod_prod_llist$)B_a_a_prod_prod_llist$)
(declare-fun lCons$f (B_a_a_prod_prod$ B_a_a_prod_prod_llist$ )B_a_a_prod_prod_llist$)
(declare-sort A_b_b_prod_prod$ 0)
(declare-fun fst$e (A_b_b_prod_prod$)A$)
(declare-fun snd$e (A_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$e (A$ B_b_prod$ )A_b_b_prod_prod$)
(declare-sort A_b_b_prod_prod_llist$ 0)
(declare-fun lNil$g ()A_b_b_prod_prod_llist$)
(declare-fun lhd$g (A_b_b_prod_prod_llist$)A_b_b_prod_prod$)
(declare-fun ltl$g (A_b_b_prod_prod_llist$)A_b_b_prod_prod_llist$)
(declare-fun lCons$g (A_b_b_prod_prod$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$)
(declare-sort A_b_a_prod_prod$ 0)
(declare-fun fst$f (A_b_a_prod_prod$)A$)
(declare-fun snd$f (A_b_a_prod_prod$)B_a_prod$)
(declare-fun pair$f (A$ B_a_prod$ )A_b_a_prod_prod$)
(declare-sort A_b_a_prod_prod_llist$ 0)
(declare-fun lNil$h ()A_b_a_prod_prod_llist$)
(declare-fun lhd$h (A_b_a_prod_prod_llist$)A_b_a_prod_prod$)
(declare-fun ltl$h (A_b_a_prod_prod_llist$)A_b_a_prod_prod_llist$)
(declare-fun lCons$h (A_b_a_prod_prod$ A_b_a_prod_prod_llist$ )A_b_a_prod_prod_llist$)
(declare-sort A_a_b_prod_prod$ 0)
(declare-fun fst$g (A_a_b_prod_prod$)A$)
(declare-fun snd$g (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$g (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-sort A_a_b_prod_prod_llist$ 0)
(declare-fun lNil$i ()A_a_b_prod_prod_llist$)
(declare-fun lhd$i (A_a_b_prod_prod_llist$)A_a_b_prod_prod$)
(declare-fun ltl$i (A_a_b_prod_prod_llist$)A_a_b_prod_prod_llist$)
(declare-fun lCons$i (A_a_b_prod_prod$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$)
(declare-sort A_a_a_prod_prod$ 0)
(declare-fun fst$h (A_a_a_prod_prod$)A$)
(declare-fun snd$h (A_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$h (A$ A_a_prod$ )A_a_a_prod_prod$)
(declare-sort A_a_a_prod_prod_llist$ 0)
(declare-fun lNil$j ()A_a_a_prod_prod_llist$)
(declare-fun lhd$j (A_a_a_prod_prod_llist$)A_a_a_prod_prod$)
(declare-fun ltl$j (A_a_a_prod_prod_llist$)A_a_a_prod_prod_llist$)
(declare-fun lCons$j (A_a_a_prod_prod$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$)
(declare-sort B_b_b_prod_prod$ 0)
(declare-fun fst$i (B_b_b_prod_prod$)B$)
(declare-fun snd$i (B_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$i (B$ B_b_prod$ )B_b_b_prod_prod$)
(declare-sort B_b_b_prod_prod_llist$ 0)
(declare-fun lNil$k ()B_b_b_prod_prod_llist$)
(declare-fun lhd$k (B_b_b_prod_prod_llist$)B_b_b_prod_prod$)
(declare-fun ltl$k (B_b_b_prod_prod_llist$)B_b_b_prod_prod_llist$)
(declare-fun lCons$k (B_b_b_prod_prod$ B_b_b_prod_prod_llist$ )B_b_b_prod_prod_llist$)
(declare-sort B_b_a_prod_prod$ 0)
(declare-fun fst$j (B_b_a_prod_prod$)B$)
(declare-fun snd$j (B_b_a_prod_prod$)B_a_prod$)
(declare-fun pair$j (B$ B_a_prod$ )B_b_a_prod_prod$)
(declare-sort B_b_a_prod_prod_llist$ 0)
(declare-fun lNil$l ()B_b_a_prod_prod_llist$)
(declare-fun lhd$l (B_b_a_prod_prod_llist$)B_b_a_prod_prod$)
(declare-fun ltl$l (B_b_a_prod_prod_llist$)B_b_a_prod_prod_llist$)
(declare-fun lCons$l (B_b_a_prod_prod$ B_b_a_prod_prod_llist$ )B_b_a_prod_prod_llist$)
(declare-fun n$ ()Enat$ )
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun uu$ ()A_a_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun uua$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun uub$ ()B_b_bool_fun_fun$ )
(declare-fun uuc$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lset$ (A_b_a_prod_prod_llist$ )A_b_a_prod_prod_set$ )
(declare-fun lzip$ (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun zero$ ()Enat$ )
(declare-fun ldrop$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun lmap$a (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$b (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$d (B_b_prod_a_fun$ B_b_prod_llist$ )A_llist$ )
(declare-fun lmap$e (B_a_prod_a_fun$ B_a_prod_llist$ )A_llist$ )
(declare-fun lmap$f (A_b_prod_a_fun$ A_b_prod_llist$ )A_llist$ )
(declare-fun lmap$g (A_a_prod_a_fun$ A_a_prod_llist$ )A_llist$ )
(declare-fun lmap$h (B_b_prod_b_fun$ B_b_prod_llist$ )B_llist$ )
(declare-fun lmap$i (B_a_prod_b_fun$ B_a_prod_llist$ )B_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lset$a (A_a_b_prod_prod_llist$ )A_a_b_prod_prod_set$ )
(declare-fun lset$b (A_a_a_prod_prod_llist$ )A_a_a_prod_prod_set$ )
(declare-fun lset$c (B_b_prod_llist$ )B_b_prod_set$ )
(declare-fun lset$d (B_a_prod_llist$ )B_a_prod_set$ )
(declare-fun lset$e (A_b_prod_llist$ )A_b_prod_set$ )
(declare-fun lset$f (A_a_prod_llist$ )A_a_prod_set$ )
(declare-fun lset$g (A_llist$ )A_set$ )
(declare-fun lset$h (B_llist$ )B_set$ )
(declare-fun lzip$a (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun lzip$b (B_llist$ A_llist$ )B_a_prod_llist$ )
(declare-fun lzip$c (B_llist$ B_llist$ )B_b_prod_llist$ )
(declare-fun lzip$d (A_llist$ B_b_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun lzip$e (A_llist$ B_a_prod_llist$ )A_b_a_prod_prod_llist$ )
(declare-fun lzip$f (A_llist$ A_b_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun lzip$g (A_llist$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lzip$h (B_llist$ B_b_prod_llist$ )B_b_b_prod_prod_llist$ )
(declare-fun lzip$i (B_llist$ B_a_prod_llist$ )B_b_a_prod_prod_llist$ )
(declare-fun ldrop$a (Enat$ )B_llist_b_llist_fun$ )
(declare-fun ldrop$b (Enat$ )B_b_prod_llist_b_b_prod_llist_fun$ )
(declare-fun ldrop$c (Enat$ )B_a_prod_llist_b_a_prod_llist_fun$ )
(declare-fun ldrop$d (Enat$ )A_b_prod_llist_a_b_prod_llist_fun$ )
(declare-fun ldrop$e (Enat$ )A_a_prod_llist_a_a_prod_llist_fun$ )
(declare-fun ldrop$f (Enat$ )B_a_a_prod_prod_llist_b_a_a_prod_prod_llist_fun$ )
(declare-fun ldrop$g (Enat$ )A_b_b_prod_prod_llist_a_b_b_prod_prod_llist_fun$ )
(declare-fun ldrop$h (Enat$ )A_b_a_prod_prod_llist_a_b_a_prod_prod_llist_fun$ )
(declare-fun ldrop$i (Enat$ )A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ )
(declare-fun ldrop$j (Enat$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun ldrop$k (Enat$ B_b_b_prod_prod_llist$ )B_b_b_prod_prod_llist$ )
(declare-fun ldrop$l (Enat$ B_b_a_prod_prod_llist$ )B_b_a_prod_prod_llist$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun lnull$b (A_a_prod_llist$ )Bool )
(declare-fun lnull$c (A_b_prod_llist$ )Bool )
(declare-fun lnull$d (B_a_prod_llist$ )Bool )
(declare-fun lnull$e (B_b_prod_llist$ )Bool )
(declare-fun member$ (A_b_a_prod_prod$ A_b_a_prod_prod_set$ )Bool )
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun ldropn$a (Nat$ B_llist$ )B_llist$ )
(declare-fun member$a (A_a_b_prod_prod$ A_a_b_prod_prod_set$ )Bool )
(declare-fun member$b (A_a_a_prod_prod$ A_a_a_prod_prod_set$ )Bool )
(declare-fun member$c (B_b_prod$ B_b_prod_set$ )Bool )
(declare-fun member$d (B_a_prod$ B_a_prod_set$ )Bool )
(declare-fun member$e (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun member$f (A_a_prod$ A_a_prod_set$ )Bool )
(declare-fun member$g (A$ A_set$ )Bool )
(declare-fun member$h (B$ B_set$ )Bool )
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$f (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$h (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$i (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$j (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$k (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$l (B_b_prod_llist_b_b_prod_llist_fun$ B_b_prod_llist$ )B_b_prod_llist$ )
(declare-fun fun_app$m (B_a_prod_llist_b_a_prod_llist_fun$ B_a_prod_llist$ )B_a_prod_llist$ )
(declare-fun fun_app$n (A_b_prod_llist_a_b_prod_llist_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun fun_app$o (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun fun_app$p (B_a_a_prod_prod_llist_b_a_a_prod_prod_llist_fun$ B_a_a_prod_prod_llist$ )B_a_a_prod_prod_llist$ )
(declare-fun fun_app$q (A_b_b_prod_prod_llist_a_b_b_prod_prod_llist_fun$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun fun_app$r (A_b_a_prod_prod_llist_a_b_a_prod_prod_llist_fun$ A_b_a_prod_prod_llist$ )A_b_a_prod_prod_llist$ )
(declare-fun fun_app$s (A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun llist_all2$a (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun llist_all2$c (B_a_bool_fun_fun$ B_llist$ )A_llist_bool_fun$ )
(declare-fun llist_all2$d (A_a_prod_b_bool_fun_fun$ A_a_prod_llist$ )B_llist_bool_fun$ )
(declare-fun llist_all2$e (A_b_prod_b_bool_fun_fun$ A_b_prod_llist$ )B_llist_bool_fun$ )
(declare-fun llist_all2$f (B_a_prod_b_bool_fun_fun$ B_a_prod_llist$ )B_llist_bool_fun$ )
(declare-fun llist_all2$g (B_b_prod_b_bool_fun_fun$ B_b_prod_llist$ )B_llist_bool_fun$ )
(declare-fun llist_all2$h (A_a_prod_a_bool_fun_fun$ A_a_prod_llist$ )A_llist_bool_fun$ )
(declare-fun llist_all2$i (A_b_prod_a_bool_fun_fun$ A_b_prod_llist$ )A_llist_bool_fun$ )
(declare-fun llist_all2$j (B_a_a_prod_bool_fun_fun$ B_llist$ A_a_prod_llist$ )Bool )
(declare-fun llist_all2$k (B_a_b_prod_bool_fun_fun$ B_llist$ A_b_prod_llist$ )Bool )
(declare-fun llist_all2$l (B_b_a_prod_bool_fun_fun$ B_llist$ B_a_prod_llist$ )Bool )
(declare-fun llist_all2$m (B_b_b_prod_bool_fun_fun$ B_llist$ B_b_prod_llist$ )Bool )
(declare-fun llist_all2$n (A_a_a_prod_bool_fun_fun$ A_llist$ A_a_prod_llist$ )Bool )
(declare-fun llist_all2$o (A_a_b_prod_bool_fun_fun$ A_llist$ A_b_prod_llist$ )Bool )
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uuc$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$d (fun_app$e uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$f (fun_app$g uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uu$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (fun_app$ (llist_all2$ p$ (fun_app$h (ldrop$ n$ )xs$ ))(fun_app$i (ldrop$a n$ )ys$ ))):named a4 ))
(assert (! (fun_app$ (llist_all2$ p$ xs$ )ys$ ):named a5 ))
(assert (! (= (llist_all2$a uu$ )uua$ ):named a6 ))
(assert (! (= (llist_all2$b uub$ )uuc$ ):named a7 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (fun_app$f (fun_app$g ?v0 ?v4 )?v5 )(fun_app$f (fun_app$g ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$c (llist_all2$a ?v3 )?v1 )?v2 ))):named a8 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (fun_app$b (llist_all2$c ?v0 ?v1 )?v2 )(forall ((?v4 B$ )(?v5 A$ ))(=> (fun_app$f (fun_app$j ?v0 ?v4 )?v5 )(fun_app$f (fun_app$j ?v3 ?v4 )?v5 ))))(fun_app$b (llist_all2$c ?v3 ?v1 )?v2 ))):named a9 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 B$ ))(=> (fun_app$d (fun_app$e ?v0 ?v4 )?v5 )(fun_app$d (fun_app$e ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$a (llist_all2$b ?v3 )?v1 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$ (llist_all2$ ?v0 ?v1 )?v2 )(forall ((?v4 A$ )(?v5 B$ ))(=> (fun_app$d (fun_app$k ?v0 ?v4 )?v5 )(fun_app$d (fun_app$k ?v3 ?v4 )?v5 ))))(fun_app$ (llist_all2$ ?v3 ?v1 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$h (ldrop$ zero$ )?v0 )?v0 )):named a12 ))
(assert (! (forall ((?v0 B_llist$ ))(= (fun_app$i (ldrop$a zero$ )?v0 )?v0 )):named a13 ))
(assert (! (forall ((?v0 B_b_prod_llist$ ))(= (fun_app$l (ldrop$b zero$ )?v0 )?v0 )):named a14 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(= (fun_app$m (ldrop$c zero$ )?v0 )?v0 )):named a15 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(= (fun_app$n (ldrop$d zero$ )?v0 )?v0 )):named a16 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(= (fun_app$o (ldrop$e zero$ )?v0 )?v0 )):named a17 ))
(assert (! (forall ((?v0 B_a_a_prod_prod_llist$ ))(= (fun_app$p (ldrop$f zero$ )?v0 )?v0 )):named a18 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$ ))(= (fun_app$q (ldrop$g zero$ )?v0 )?v0 )):named a19 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ ))(= (fun_app$r (ldrop$h zero$ )?v0 )?v0 )):named a20 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ ))(= (fun_app$s (ldrop$i zero$ )?v0 )?v0 )):named a21 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (fun_app$h (ldrop$ ?v0 )(fun_app$h (ldrop$ ?v1 )?v2 ))(fun_app$h (ldrop$ (plus$ ?v0 ?v1 ))?v2 ))):named a22 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 B_llist$ ))(= (fun_app$i (ldrop$a ?v0 )(fun_app$i (ldrop$a ?v1 )?v2 ))(fun_app$i (ldrop$a (plus$ ?v0 ?v1 ))?v2 ))):named a23 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 B_b_prod_llist$ ))(= (fun_app$l (ldrop$b ?v0 )(fun_app$l (ldrop$b ?v1 )?v2 ))(fun_app$l (ldrop$b (plus$ ?v0 ?v1 ))?v2 ))):named a24 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 B_a_prod_llist$ ))(= (fun_app$m (ldrop$c ?v0 )(fun_app$m (ldrop$c ?v1 )?v2 ))(fun_app$m (ldrop$c (plus$ ?v0 ?v1 ))?v2 ))):named a25 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_b_prod_llist$ ))(= (fun_app$n (ldrop$d ?v0 )(fun_app$n (ldrop$d ?v1 )?v2 ))(fun_app$n (ldrop$d (plus$ ?v0 ?v1 ))?v2 ))):named a26 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_a_prod_llist$ ))(= (fun_app$o (ldrop$e ?v0 )(fun_app$o (ldrop$e ?v1 )?v2 ))(fun_app$o (ldrop$e (plus$ ?v0 ?v1 ))?v2 ))):named a27 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 B_a_a_prod_prod_llist$ ))(= (fun_app$p (ldrop$f ?v0 )(fun_app$p (ldrop$f ?v1 )?v2 ))(fun_app$p (ldrop$f (plus$ ?v0 ?v1 ))?v2 ))):named a28 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_b_b_prod_prod_llist$ ))(= (fun_app$q (ldrop$g ?v0 )(fun_app$q (ldrop$g ?v1 )?v2 ))(fun_app$q (ldrop$g (plus$ ?v0 ?v1 ))?v2 ))):named a29 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_b_a_prod_prod_llist$ ))(= (fun_app$r (ldrop$h ?v0 )(fun_app$r (ldrop$h ?v1 )?v2 ))(fun_app$r (ldrop$h (plus$ ?v0 ?v1 ))?v2 ))):named a30 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_a_b_prod_prod_llist$ ))(= (fun_app$s (ldrop$i ?v0 )(fun_app$s (ldrop$i ?v1 )?v2 ))(fun_app$s (ldrop$i (plus$ ?v0 ?v1 ))?v2 ))):named a31 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$h (ldrop$ ?v0 )lNil$ )lNil$ ):pattern ((ldrop$ ?v0 )))):named a32 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$i (ldrop$a ?v0 )lNil$a )lNil$a ):pattern ((ldrop$a ?v0 )))):named a33 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$l (ldrop$b ?v0 )lNil$b )lNil$b ):pattern ((ldrop$b ?v0 )))):named a34 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$m (ldrop$c ?v0 )lNil$c )lNil$c ):pattern ((ldrop$c ?v0 )))):named a35 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$n (ldrop$d ?v0 )lNil$d )lNil$d ):pattern ((ldrop$d ?v0 )))):named a36 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$o (ldrop$e ?v0 )lNil$e )lNil$e ):pattern ((ldrop$e ?v0 )))):named a37 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$p (ldrop$f ?v0 )lNil$f )lNil$f ):pattern ((ldrop$f ?v0 )))):named a38 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$q (ldrop$g ?v0 )lNil$g )lNil$g ):pattern ((ldrop$g ?v0 )))):named a39 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$r (ldrop$h ?v0 )lNil$h )lNil$h ):pattern ((ldrop$h ?v0 )))):named a40 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$s (ldrop$i ?v0 )lNil$i )lNil$i ):pattern ((ldrop$i ?v0 )))):named a41 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$o (ldrop$e ?v0 )(lzip$ ?v1 ?v2 ))(lzip$ (fun_app$h (ldrop$ ?v0 )?v1 )(fun_app$h (ldrop$ ?v0 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 B_llist$ ))(= (fun_app$n (ldrop$d ?v0 )(lzip$a ?v1 ?v2 ))(lzip$a (fun_app$h (ldrop$ ?v0 )?v1 )(fun_app$i (ldrop$a ?v0 )?v2 )))):named a43 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 A_llist$ ))(= (fun_app$m (ldrop$c ?v0 )(lzip$b ?v1 ?v2 ))(lzip$b (fun_app$i (ldrop$a ?v0 )?v1 )(fun_app$h (ldrop$ ?v0 )?v2 )))):named a44 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$l (ldrop$b ?v0 )(lzip$c ?v1 ?v2 ))(lzip$c (fun_app$i (ldrop$a ?v0 )?v1 )(fun_app$i (ldrop$a ?v0 )?v2 )))):named a45 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 B_b_prod_llist$ ))(= (fun_app$q (ldrop$g ?v0 )(lzip$d ?v1 ?v2 ))(lzip$d (fun_app$h (ldrop$ ?v0 )?v1 )(fun_app$l (ldrop$b ?v0 )?v2 )))):named a46 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 B_a_prod_llist$ ))(= (fun_app$r (ldrop$h ?v0 )(lzip$e ?v1 ?v2 ))(lzip$e (fun_app$h (ldrop$ ?v0 )?v1 )(fun_app$m (ldrop$c ?v0 )?v2 )))):named a47 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_b_prod_llist$ ))(= (fun_app$s (ldrop$i ?v0 )(lzip$f ?v1 ?v2 ))(lzip$f (fun_app$h (ldrop$ ?v0 )?v1 )(fun_app$n (ldrop$d ?v0 )?v2 )))):named a48 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_a_prod_llist$ ))(= (ldrop$j ?v0 (lzip$g ?v1 ?v2 ))(lzip$g (fun_app$h (ldrop$ ?v0 )?v1 )(fun_app$o (ldrop$e ?v0 )?v2 )))):named a49 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 B_b_prod_llist$ ))(= (ldrop$k ?v0 (lzip$h ?v1 ?v2 ))(lzip$h (fun_app$i (ldrop$a ?v0 )?v1 )(fun_app$l (ldrop$b ?v0 )?v2 )))):named a50 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 B_a_prod_llist$ ))(= (ldrop$l ?v0 (lzip$i ?v1 ?v2 ))(lzip$i (fun_app$i (ldrop$a ?v0 )?v1 )(fun_app$m (ldrop$c ?v0 )?v2 )))):named a51 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$ (llist_all2$ ?v0 ?v1 )lNil$a )(= ?v1 lNil$ )):pattern ((llist_all2$ ?v0 ?v1 )))):named a52 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )lNil$a )(= ?v1 lNil$a )):pattern ((fun_app$a (llist_all2$b ?v0 )?v1 )))):named a53 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$b (llist_all2$c ?v0 ?v1 )lNil$ )(= ?v1 lNil$a )):pattern ((llist_all2$c ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )lNil$ )(= ?v1 lNil$ )):pattern ((fun_app$c (llist_all2$a ?v0 )?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_a_prod_b_bool_fun_fun$ )(?v1 A_a_prod_llist$ ))(! (= (fun_app$ (llist_all2$d ?v0 ?v1 )lNil$a )(= ?v1 lNil$e )):pattern ((llist_all2$d ?v0 ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_b_prod_b_bool_fun_fun$ )(?v1 A_b_prod_llist$ ))(! (= (fun_app$ (llist_all2$e ?v0 ?v1 )lNil$a )(= ?v1 lNil$d )):pattern ((llist_all2$e ?v0 ?v1 )))):named a57 ))
(assert (! (forall ((?v0 B_a_prod_b_bool_fun_fun$ )(?v1 B_a_prod_llist$ ))(! (= (fun_app$ (llist_all2$f ?v0 ?v1 )lNil$a )(= ?v1 lNil$c )):pattern ((llist_all2$f ?v0 ?v1 )))):named a58 ))
(assert (! (forall ((?v0 B_b_prod_b_bool_fun_fun$ )(?v1 B_b_prod_llist$ ))(! (= (fun_app$ (llist_all2$g ?v0 ?v1 )lNil$a )(= ?v1 lNil$b )):pattern ((llist_all2$g ?v0 ?v1 )))):named a59 ))
(assert (! (forall ((?v0 A_a_prod_a_bool_fun_fun$ )(?v1 A_a_prod_llist$ ))(! (= (fun_app$b (llist_all2$h ?v0 ?v1 )lNil$ )(= ?v1 lNil$e )):pattern ((llist_all2$h ?v0 ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_b_prod_a_bool_fun_fun$ )(?v1 A_b_prod_llist$ ))(! (= (fun_app$b (llist_all2$i ?v0 ?v1 )lNil$ )(= ?v1 lNil$d )):pattern ((llist_all2$i ?v0 ?v1 )))):named a61 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$ (llist_all2$ ?v0 lNil$ )?v1 )(= ?v1 lNil$a )):pattern ((fun_app$ (llist_all2$ ?v0 lNil$ )?v1 )))):named a62 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a (llist_all2$b ?v0 )lNil$a )?v1 )(= ?v1 lNil$a )):pattern ((fun_app$ (fun_app$a (llist_all2$b ?v0 )lNil$a )?v1 )))):named a63 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$b (llist_all2$c ?v0 lNil$a )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$b (llist_all2$c ?v0 lNil$a )?v1 )))):named a64 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c (llist_all2$a ?v0 )lNil$ )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$b (fun_app$c (llist_all2$a ?v0 )lNil$ )?v1 )))):named a65 ))
(assert (! (forall ((?v0 B_a_a_prod_bool_fun_fun$ )(?v1 A_a_prod_llist$ ))(! (= (llist_all2$j ?v0 lNil$a ?v1 )(= ?v1 lNil$e )):pattern ((llist_all2$j ?v0 lNil$a ?v1 )))):named a66 ))
(assert (! (forall ((?v0 B_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod_llist$ ))(! (= (llist_all2$k ?v0 lNil$a ?v1 )(= ?v1 lNil$d )):pattern ((llist_all2$k ?v0 lNil$a ?v1 )))):named a67 ))
(assert (! (forall ((?v0 B_b_a_prod_bool_fun_fun$ )(?v1 B_a_prod_llist$ ))(! (= (llist_all2$l ?v0 lNil$a ?v1 )(= ?v1 lNil$c )):pattern ((llist_all2$l ?v0 lNil$a ?v1 )))):named a68 ))
(assert (! (forall ((?v0 B_b_b_prod_bool_fun_fun$ )(?v1 B_b_prod_llist$ ))(! (= (llist_all2$m ?v0 lNil$a ?v1 )(= ?v1 lNil$b )):pattern ((llist_all2$m ?v0 lNil$a ?v1 )))):named a69 ))
(assert (! (forall ((?v0 A_a_a_prod_bool_fun_fun$ )(?v1 A_a_prod_llist$ ))(! (= (llist_all2$n ?v0 lNil$ ?v1 )(= ?v1 lNil$e )):pattern ((llist_all2$n ?v0 lNil$ ?v1 )))):named a70 ))
(assert (! (forall ((?v0 A_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod_llist$ ))(! (= (llist_all2$o ?v0 lNil$ ?v1 )(= ?v1 lNil$d )):pattern ((llist_all2$o ?v0 lNil$ ?v1 )))):named a71 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (fun_app$b (fun_app$c (llist_all2$a ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))(and (fun_app$f (fun_app$g ?v0 ?v1 )?v3 )(fun_app$b (fun_app$c (llist_all2$a ?v0 )?v2 )?v4 ))):pattern ((fun_app$b (fun_app$c (llist_all2$a ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))))):named a72 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (fun_app$b (llist_all2$c ?v0 (lCons$a ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))(and (fun_app$f (fun_app$j ?v0 ?v1 )?v3 )(fun_app$b (llist_all2$c ?v0 ?v2 )?v4 ))):pattern ((fun_app$b (llist_all2$c ?v0 (lCons$a ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))))):named a73 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ )(?v3 B$ )(?v4 B_llist$ ))(! (= (fun_app$ (fun_app$a (llist_all2$b ?v0 )(lCons$a ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))(and (fun_app$d (fun_app$e ?v0 ?v1 )?v3 )(fun_app$ (fun_app$a (llist_all2$b ?v0 )?v2 )?v4 ))):pattern ((fun_app$ (fun_app$a (llist_all2$b ?v0 )(lCons$a ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))))):named a74 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 B$ )(?v4 B_llist$ ))(! (= (fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))(and (fun_app$d (fun_app$k ?v0 ?v1 )?v3 )(fun_app$ (llist_all2$ ?v0 ?v2 )?v4 ))):pattern ((fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2 ))(lCons$a ?v3 ?v4 ))))):named a75 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$h (ldrop$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$h (ldrop$ ?v0 )?v2 )))):named a76 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (fun_app$h (ldrop$ ?v0 )(lmap$a ?v1 ?v2 ))(lmap$a ?v1 (fun_app$i (ldrop$a ?v0 )?v2 )))):named a77 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (fun_app$i (ldrop$a ?v0 )(lmap$b ?v1 ?v2 ))(lmap$b ?v1 (fun_app$h (ldrop$ ?v0 )?v2 )))):named a78 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (fun_app$i (ldrop$a ?v0 )(lmap$c ?v1 ?v2 ))(lmap$c ?v1 (fun_app$i (ldrop$a ?v0 )?v2 )))):named a79 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_prod_a_fun$ )(?v2 B_b_prod_llist$ ))(= (fun_app$h (ldrop$ ?v0 )(lmap$d ?v1 ?v2 ))(lmap$d ?v1 (fun_app$l (ldrop$b ?v0 )?v2 )))):named a80 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_prod_a_fun$ )(?v2 B_a_prod_llist$ ))(= (fun_app$h (ldrop$ ?v0 )(lmap$e ?v1 ?v2 ))(lmap$e ?v1 (fun_app$m (ldrop$c ?v0 )?v2 )))):named a81 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_a_fun$ )(?v2 A_b_prod_llist$ ))(= (fun_app$h (ldrop$ ?v0 )(lmap$f ?v1 ?v2 ))(lmap$f ?v1 (fun_app$n (ldrop$d ?v0 )?v2 )))):named a82 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_fun$ )(?v2 A_a_prod_llist$ ))(= (fun_app$h (ldrop$ ?v0 )(lmap$g ?v1 ?v2 ))(lmap$g ?v1 (fun_app$o (ldrop$e ?v0 )?v2 )))):named a83 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_prod_b_fun$ )(?v2 B_b_prod_llist$ ))(= (fun_app$i (ldrop$a ?v0 )(lmap$h ?v1 ?v2 ))(lmap$h ?v1 (fun_app$l (ldrop$b ?v0 )?v2 )))):named a84 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_prod_b_fun$ )(?v2 B_a_prod_llist$ ))(= (fun_app$i (ldrop$a ?v0 )(lmap$i ?v1 ?v2 ))(lmap$i ?v1 (fun_app$m (ldrop$c ?v0 )?v2 )))):named a85 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Nat$ ))(=> (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(fun_app$b (fun_app$c (llist_all2$a ?v0 )(ldropn$ ?v3 ?v1 ))(ldropn$ ?v3 ?v2 )))):named a86 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 Nat$ ))(=> (fun_app$b (llist_all2$c ?v0 ?v1 )?v2 )(fun_app$b (llist_all2$c ?v0 (ldropn$a ?v3 ?v1 ))(ldropn$ ?v3 ?v2 )))):named a87 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 Nat$ ))(=> (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a (llist_all2$b ?v0 )(ldropn$a ?v3 ?v1 ))(ldropn$a ?v3 ?v2 )))):named a88 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 Nat$ ))(=> (fun_app$ (llist_all2$ ?v0 ?v1 )?v2 )(fun_app$ (llist_all2$ ?v0 (ldropn$ ?v3 ?v1 ))(ldropn$a ?v3 ?v2 )))):named a89 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ ))(fun_app$ (llist_all2$ ?v0 lNil$ )lNil$a )):named a90 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ ))(fun_app$ (fun_app$a (llist_all2$b ?v0 )lNil$a )lNil$a )):named a91 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ ))(fun_app$b (llist_all2$c ?v0 lNil$a )lNil$ )):named a92 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ ))(fun_app$b (fun_app$c (llist_all2$a ?v0 )lNil$ )lNil$ )):named a93 ))
(assert (! (forall ((?v0 B_a_a_prod_bool_fun_fun$ ))(llist_all2$j ?v0 lNil$a lNil$e )):named a94 ))
(assert (! (forall ((?v0 B_a_b_prod_bool_fun_fun$ ))(llist_all2$k ?v0 lNil$a lNil$d )):named a95 ))
(assert (! (forall ((?v0 B_b_a_prod_bool_fun_fun$ ))(llist_all2$l ?v0 lNil$a lNil$c )):named a96 ))
(assert (! (forall ((?v0 B_b_b_prod_bool_fun_fun$ ))(llist_all2$m ?v0 lNil$a lNil$b )):named a97 ))
(assert (! (forall ((?v0 A_a_a_prod_bool_fun_fun$ ))(llist_all2$n ?v0 lNil$ lNil$e )):named a98 ))
(assert (! (forall ((?v0 A_a_b_prod_bool_fun_fun$ ))(llist_all2$o ?v0 lNil$ lNil$d )):named a99 ))
(assert (! (forall ((?v0 A_b_a_prod_prod$ )(?v1 Enat$ )(?v2 A_b_a_prod_prod_llist$ ))(=> (member$ ?v0 (lset$ (fun_app$r (ldrop$h ?v1 )?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a100 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 Enat$ )(?v2 A_a_b_prod_prod_llist$ ))(=> (member$a ?v0 (lset$a (fun_app$s (ldrop$i ?v1 )?v2 )))(member$a ?v0 (lset$a ?v2 )))):named a101 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 Enat$ )(?v2 A_a_a_prod_prod_llist$ ))(=> (member$b ?v0 (lset$b (ldrop$j ?v1 ?v2 )))(member$b ?v0 (lset$b ?v2 )))):named a102 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 Enat$ )(?v2 B_b_prod_llist$ ))(=> (member$c ?v0 (lset$c (fun_app$l (ldrop$b ?v1 )?v2 )))(member$c ?v0 (lset$c ?v2 )))):named a103 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 Enat$ )(?v2 B_a_prod_llist$ ))(=> (member$d ?v0 (lset$d (fun_app$m (ldrop$c ?v1 )?v2 )))(member$d ?v0 (lset$d ?v2 )))):named a104 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 Enat$ )(?v2 A_b_prod_llist$ ))(=> (member$e ?v0 (lset$e (fun_app$n (ldrop$d ?v1 )?v2 )))(member$e ?v0 (lset$e ?v2 )))):named a105 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 Enat$ )(?v2 A_a_prod_llist$ ))(=> (member$f ?v0 (lset$f (fun_app$o (ldrop$e ?v1 )?v2 )))(member$f ?v0 (lset$f ?v2 )))):named a106 ))
(assert (! (forall ((?v0 A$ )(?v1 Enat$ )(?v2 A_llist$ ))(=> (member$g ?v0 (lset$g (fun_app$h (ldrop$ ?v1 )?v2 )))(member$g ?v0 (lset$g ?v2 )))):named a107 ))
(assert (! (forall ((?v0 B$ )(?v1 Enat$ )(?v2 B_llist$ ))(=> (member$h ?v0 (lset$h (fun_app$i (ldrop$a ?v1 )?v2 )))(member$h ?v0 (lset$h ?v2 )))):named a108 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(= (lnull$ ?v1 )(lnull$ ?v2 )))):named a109 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (fun_app$b (llist_all2$c ?v0 ?v1 )?v2 )(= (lnull$a ?v1 )(lnull$ ?v2 )))):named a110 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )?v2 )(= (lnull$a ?v1 )(lnull$a ?v2 )))):named a111 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (fun_app$ (llist_all2$ ?v0 ?v1 )?v2 )(= (lnull$ ?v1 )(lnull$a ?v2 )))):named a112 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a113 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a114 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$ ?v0 ?v1 ))(lnull$ ?v1 ))):named a115 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$ (lmap$a ?v0 ?v1 ))(lnull$a ?v1 ))):named a116 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$b ?v0 ?v1 ))(lnull$ ?v1 ))):named a117 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$a (lmap$c ?v0 ?v1 ))(lnull$a ?v1 ))):named a118 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$b (lzip$ ?v0 ?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a119 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(= (not (lnull$c (lzip$a ?v0 ?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$a ?v1 ))))):named a120 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(= (not (lnull$d (lzip$b ?v0 ?v1 )))(and (not (lnull$a ?v0 ))(not (lnull$ ?v1 ))))):named a121 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$e (lzip$c ?v0 ?v1 )))(and (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a122 ))
(check-sat )
;(get-unsat-core )
