;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Enat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_set_set$ 0 )
(declare-sort Enat_nat_fun$ 0 )
(declare-sort Enat_set_set$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-sort Nat_nat_set_fun$ 0 )
(declare-sort Nat_set_nat_fun$ 0 )
(declare-sort Enat_set_nat_fun$ 0 )
(declare-sort Nat_enat_set_fun$ 0 )
(declare-sort Nat_set_enat_fun$ 0 )
(declare-sort Enat_set_enat_fun$ 0 )
(declare-sort Nat_nat_nat_fun_fun$ 0 )
(declare-sort Enat_nat_nat_fun_fun$ 0 )
(declare-sort Nat_enat_nat_fun_fun$ 0 )
(declare-sort Nat_nat_enat_fun_fun$ 0 )
(declare-sort Enat_enat_nat_fun_fun$ 0 )
(declare-sort Enat_nat_enat_fun_fun$ 0 )
(declare-sort Nat_enat_enat_fun_fun$ 0 )
(declare-sort Enat_enat_enat_fun_fun$ 0 )
(declare-sort Nat_set_nat_nat_fun_fun$ 0 )
(declare-sort Enat_set_nat_nat_fun_fun$ 0 )
(declare-sort Nat_set_enat_nat_fun_fun$ 0 )
(declare-sort Nat_set_nat_enat_fun_fun$ 0 )
(declare-sort Enat_set_enat_nat_fun_fun$ 0 )
(declare-sort Enat_set_nat_enat_fun_fun$ 0 )
(declare-sort Nat_set_enat_enat_fun_fun$ 0 )
(declare-sort Enat_set_enat_enat_fun_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-sort A_llist_list$ 0)
(declare-fun nil$ ()A_llist_list$)
(declare-fun hd$ (A_llist_list$)A_llist$)
(declare-fun tl$ (A_llist_list$)A_llist_list$)
(declare-fun cons$ (A_llist$ A_llist_list$ )A_llist_list$)
(declare-fun x$ ()A$ )
(declare-fun uu$ ()Nat_enat_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun uua$ ()Nat_enat_fun$ )
(declare-fun uub$ ()Enat_nat_fun$ )
(declare-fun uuc$ ()Nat_nat_fun$ )
(declare-fun uud$ ()Enat_enat_fun$ )
(declare-fun uue$ (Nat_enat_enat_fun_fun$ )Enat_set_nat_enat_fun_fun$ )
(declare-fun uuf$ (Nat_enat_enat_fun_fun$ )Enat_nat_enat_fun_fun$ )
(declare-fun uug$ (Nat_enat_enat_fun_fun$ )Nat_set_enat_enat_fun_fun$ )
(declare-fun uuh$ (Enat_enat_nat_fun_fun$ )Enat_set_enat_nat_fun_fun$ )
(declare-fun uui$ (Enat_enat_nat_fun_fun$ )Enat_enat_nat_fun_fun$ )
(declare-fun uuj$ (Enat_enat_nat_fun_fun$ )Enat_set_enat_nat_fun_fun$ )
(declare-fun uuk$ (Enat_nat_nat_fun_fun$ )Nat_set_enat_nat_fun_fun$ )
(declare-fun uul$ (Enat_nat_nat_fun_fun$ )Nat_enat_nat_fun_fun$ )
(declare-fun uum$ (Enat_nat_nat_fun_fun$ )Enat_set_nat_nat_fun_fun$ )
(declare-fun uun$ (Nat_enat_nat_fun_fun$ )Enat_set_nat_nat_fun_fun$ )
(declare-fun uuo$ (Nat_enat_nat_fun_fun$ )Enat_nat_nat_fun_fun$ )
(declare-fun uup$ (Nat_enat_nat_fun_fun$ )Nat_set_enat_nat_fun_fun$ )
(declare-fun uuq$ (Nat_nat_nat_fun_fun$ )Nat_set_nat_nat_fun_fun$ )
(declare-fun uur$ (Nat_nat_nat_fun_fun$ )Nat_nat_nat_fun_fun$ )
(declare-fun uus$ (Nat_nat_nat_fun_fun$ )Nat_set_nat_nat_fun_fun$ )
(declare-fun uut$ (Enat_nat_enat_fun_fun$ )Nat_set_enat_enat_fun_fun$ )
(declare-fun uuu$ (Enat_nat_enat_fun_fun$ )Nat_enat_enat_fun_fun$ )
(declare-fun uuv$ (Enat_nat_enat_fun_fun$ )Enat_set_nat_enat_fun_fun$ )
(declare-fun uuw$ (Enat_enat_enat_fun_fun$ )Enat_set_enat_enat_fun_fun$ )
(declare-fun uux$ (Enat_enat_enat_fun_fun$ )Enat_enat_enat_fun_fun$ )
(declare-fun uuy$ (Enat_enat_enat_fun_fun$ )Enat_set_enat_enat_fun_fun$ )
(declare-fun uuz$ (Nat_nat_enat_fun_fun$ )Nat_set_nat_enat_fun_fun$ )
(declare-fun uva$ (Nat_nat_enat_fun_fun$ )Nat_nat_enat_fun_fun$ )
(declare-fun uvb$ (Nat_nat_enat_fun_fun$ )Nat_set_nat_enat_fun_fun$ )
(declare-fun xss$ ()A_llist_list$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist_llist$ Nat$ )A_llist$ )
(declare-fun size$ (A_llist_list$ )Nat$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun zero$ ()Enat$ )
(declare-fun less$a (Nat_set$ Nat_set$ )Bool )
(declare-fun less$b (Enat_set$ Enat_set$ )Bool )
(declare-fun less$c (Nat$ Nat$ )Bool )
(declare-fun lnth$a (A_llist$ Nat$ )A$ )
(declare-fun zero$a ()Nat$ )
(declare-fun member$ (Enat_set$ Enat_set_set$ )Bool )
(declare-fun setsum$ (Nat_enat_fun$ )Nat_set_enat_fun$ )
(declare-fun fun_app$ (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun member$a (Nat_set$ Nat_set_set$ )Bool )
(declare-fun member$b (Enat$ Enat_set$ )Bool )
(declare-fun member$c (Nat$ Nat_set$ )Bool )
(declare-fun setsum$a (Enat_enat_fun$ )Enat_set_enat_fun$ )
(declare-fun setsum$b (Nat_nat_fun$ )Nat_set_nat_fun$ )
(declare-fun setsum$c (Enat_nat_fun$ )Enat_set_nat_fun$ )
(declare-fun setsum$d (Enat_set_enat_fun$ Enat_set_set$ )Enat$ )
(declare-fun setsum$e (Nat_set_enat_fun$ Nat_set_set$ )Enat$ )
(declare-fun setsum$f (Enat_set_nat_fun$ Enat_set_set$ )Nat$ )
(declare-fun setsum$g (Nat_set_nat_fun$ Nat_set_set$ )Nat$ )
(declare-fun fun_app$a (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun fun_app$b (Enat_enat_enat_fun_fun$ Enat$ )Enat_enat_fun$ )
(declare-fun fun_app$c (Enat_nat_fun$ Enat$ )Nat$ )
(declare-fun fun_app$d (Enat_enat_nat_fun_fun$ Enat$ )Enat_nat_fun$ )
(declare-fun fun_app$e (Nat_enat_enat_fun_fun$ Nat$ )Enat_enat_fun$ )
(declare-fun fun_app$f (Enat_nat_enat_fun_fun$ Enat$ )Nat_enat_fun$ )
(declare-fun fun_app$g (Nat_enat_nat_fun_fun$ Nat$ )Enat_nat_fun$ )
(declare-fun fun_app$h (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$i (Enat_nat_nat_fun_fun$ Enat$ )Nat_nat_fun$ )
(declare-fun fun_app$j (Nat_nat_enat_fun_fun$ Nat$ )Nat_enat_fun$ )
(declare-fun fun_app$k (Nat_nat_nat_fun_fun$ Nat$ )Nat_nat_fun$ )
(declare-fun fun_app$l (Nat_set_nat_enat_fun_fun$ Nat_set$ )Nat_enat_fun$ )
(declare-fun fun_app$m (Nat_set_enat_fun$ Nat_set$ )Enat$ )
(declare-fun fun_app$n (Enat_set_enat_enat_fun_fun$ Enat_set$ )Enat_enat_fun$ )
(declare-fun fun_app$o (Enat_set_enat_fun$ Enat_set$ )Enat$ )
(declare-fun fun_app$p (Enat_set_nat_enat_fun_fun$ Enat_set$ )Nat_enat_fun$ )
(declare-fun fun_app$q (Nat_set_nat_nat_fun_fun$ Nat_set$ )Nat_nat_fun$ )
(declare-fun fun_app$r (Nat_set_nat_fun$ Nat_set$ )Nat$ )
(declare-fun fun_app$s (Nat_set_enat_nat_fun_fun$ Nat_set$ )Enat_nat_fun$ )
(declare-fun fun_app$t (Enat_set_nat_nat_fun_fun$ Enat_set$ )Nat_nat_fun$ )
(declare-fun fun_app$u (Enat_set_nat_fun$ Enat_set$ )Nat$ )
(declare-fun fun_app$v (Enat_set_enat_nat_fun_fun$ Enat_set$ )Enat_nat_fun$ )
(declare-fun fun_app$w (Nat_set_enat_enat_fun_fun$ Nat_set$ )Enat_enat_fun$ )
(declare-fun fun_app$x (Nat_enat_set_fun$ Nat$ )Enat_set$ )
(declare-fun fun_app$y (Nat_nat_set_fun$ Nat$ )Nat_set$ )
(declare-fun lessThan$ (Nat$ )Nat_set$ )
(declare-fun lessThan$a (Enat$ )Enat_set$ )
(declare-fun lessThan$b (Nat_set$ )Nat_set_set$ )
(declare-fun lessThan$c (Enat_set$ )Enat_set_set$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(llength$ (lnth$ xssa$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Enat_enat_enat_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(! (= (fun_app$a (fun_app$b (uux$ ?v0 )?v1 )?v2 )(fun_app$a (fun_app$b ?v0 ?v2 )?v1 )):pattern ((fun_app$a (fun_app$b (uux$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 Enat_enat_nat_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(! (= (fun_app$c (fun_app$d (uui$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$d ?v0 ?v2 )?v1 )):pattern ((fun_app$c (fun_app$d (uui$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 Enat_nat_enat_fun_fun$ )(?v1 Nat$ )(?v2 Enat$ ))(! (= (fun_app$a (fun_app$e (uuu$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$f ?v0 ?v2 )?v1 )):pattern ((fun_app$a (fun_app$e (uuu$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 Enat_nat_nat_fun_fun$ )(?v1 Nat$ )(?v2 Enat$ ))(! (= (fun_app$c (fun_app$g (uul$ ?v0 )?v1 )?v2 )(fun_app$h (fun_app$i ?v0 ?v2 )?v1 )):pattern ((fun_app$c (fun_app$g (uul$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 Nat_enat_enat_fun_fun$ )(?v1 Enat$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$f (uuf$ ?v0 )?v1 )?v2 )(fun_app$a (fun_app$e ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$f (uuf$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 Nat_enat_nat_fun_fun$ )(?v1 Enat$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$i (uuo$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$g ?v0 ?v2 )?v1 )):pattern ((fun_app$h (fun_app$i (uuo$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$j (uva$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$j ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$j (uva$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$k (uur$ ?v0 )?v1 )?v2 )(fun_app$h (fun_app$k ?v0 ?v2 )?v1 )):pattern ((fun_app$h (fun_app$k (uur$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$ )(?v1 Nat_set$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$l (uvb$ ?v0 )?v1 )?v2 )(fun_app$m (setsum$ (fun_app$j (uva$ ?v0 )?v2 ))?v1 )):pattern ((fun_app$ (fun_app$l (uvb$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 Enat_enat_enat_fun_fun$ )(?v1 Enat_set$ )(?v2 Enat$ ))(! (= (fun_app$a (fun_app$n (uuy$ ?v0 )?v1 )?v2 )(fun_app$o (setsum$a (fun_app$b (uux$ ?v0 )?v2 ))?v1 )):pattern ((fun_app$a (fun_app$n (uuy$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 Enat_nat_enat_fun_fun$ )(?v1 Enat_set$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$p (uuv$ ?v0 )?v1 )?v2 )(fun_app$o (setsum$a (fun_app$e (uuu$ ?v0 )?v2 ))?v1 )):pattern ((fun_app$ (fun_app$p (uuv$ ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat_set$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$q (uus$ ?v0 )?v1 )?v2 )(fun_app$r (setsum$b (fun_app$k (uur$ ?v0 )?v2 ))?v1 )):pattern ((fun_app$h (fun_app$q (uus$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat_enat_nat_fun_fun$ )(?v1 Nat_set$ )(?v2 Enat$ ))(! (= (fun_app$c (fun_app$s (uup$ ?v0 )?v1 )?v2 )(fun_app$r (setsum$b (fun_app$i (uuo$ ?v0 )?v2 ))?v1 )):pattern ((fun_app$c (fun_app$s (uup$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Enat_nat_nat_fun_fun$ )(?v1 Enat_set$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$t (uum$ ?v0 )?v1 )?v2 )(fun_app$u (setsum$c (fun_app$g (uul$ ?v0 )?v2 ))?v1 )):pattern ((fun_app$h (fun_app$t (uum$ ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 Enat_enat_nat_fun_fun$ )(?v1 Enat_set$ )(?v2 Enat$ ))(! (= (fun_app$c (fun_app$v (uuj$ ?v0 )?v1 )?v2 )(fun_app$u (setsum$c (fun_app$d (uui$ ?v0 )?v2 ))?v1 )):pattern ((fun_app$c (fun_app$v (uuj$ ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 Nat_enat_enat_fun_fun$ )(?v1 Nat_set$ )(?v2 Enat$ ))(! (= (fun_app$a (fun_app$w (uug$ ?v0 )?v1 )?v2 )(fun_app$m (setsum$ (fun_app$f (uuf$ ?v0 )?v2 ))?v1 )):pattern ((fun_app$a (fun_app$w (uug$ ?v0 )?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 Enat_enat_enat_fun_fun$ )(?v1 Enat_set$ )(?v2 Enat$ ))(! (= (fun_app$a (fun_app$n (uuw$ ?v0 )?v1 )?v2 )(fun_app$o (setsum$a (fun_app$b ?v0 ?v2 ))?v1 )):pattern ((fun_app$a (fun_app$n (uuw$ ?v0 )?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 Enat_enat_nat_fun_fun$ )(?v1 Enat_set$ )(?v2 Enat$ ))(! (= (fun_app$c (fun_app$v (uuh$ ?v0 )?v1 )?v2 )(fun_app$u (setsum$c (fun_app$d ?v0 ?v2 ))?v1 )):pattern ((fun_app$c (fun_app$v (uuh$ ?v0 )?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 Enat_nat_enat_fun_fun$ )(?v1 Nat_set$ )(?v2 Enat$ ))(! (= (fun_app$a (fun_app$w (uut$ ?v0 )?v1 )?v2 )(fun_app$m (setsum$ (fun_app$f ?v0 ?v2 ))?v1 )):pattern ((fun_app$a (fun_app$w (uut$ ?v0 )?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 Enat_nat_nat_fun_fun$ )(?v1 Nat_set$ )(?v2 Enat$ ))(! (= (fun_app$c (fun_app$s (uuk$ ?v0 )?v1 )?v2 )(fun_app$r (setsum$b (fun_app$i ?v0 ?v2 ))?v1 )):pattern ((fun_app$c (fun_app$s (uuk$ ?v0 )?v1 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 Nat_enat_enat_fun_fun$ )(?v1 Enat_set$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$p (uue$ ?v0 )?v1 )?v2 )(fun_app$o (setsum$a (fun_app$e ?v0 ?v2 ))?v1 )):pattern ((fun_app$ (fun_app$p (uue$ ?v0 )?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 Nat_enat_nat_fun_fun$ )(?v1 Enat_set$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$t (uun$ ?v0 )?v1 )?v2 )(fun_app$u (setsum$c (fun_app$g ?v0 ?v2 ))?v1 )):pattern ((fun_app$h (fun_app$t (uun$ ?v0 )?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$ )(?v1 Nat_set$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$l (uuz$ ?v0 )?v1 )?v2 )(fun_app$m (setsum$ (fun_app$j ?v0 ?v2 ))?v1 )):pattern ((fun_app$ (fun_app$l (uuz$ ?v0 )?v1 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat_set$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$q (uuq$ ?v0 )?v1 )?v2 )(fun_app$r (setsum$b (fun_app$k ?v0 ?v2 ))?v1 )):pattern ((fun_app$h (fun_app$q (uuq$ ?v0 )?v1 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$a uud$ ?v0 )zero$ ):pattern ((fun_app$a uud$ ?v0 )))):named a25 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$c uub$ ?v0 )zero$a ):pattern ((fun_app$c uub$ ?v0 )))):named a26 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uua$ ?v0 )zero$ ):pattern ((fun_app$ uua$ ?v0 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$h uuc$ ?v0 )zero$a ):pattern ((fun_app$h uuc$ ?v0 )))):named a28 ))
(assert (! (not (= (fun_app$m (setsum$ uu$ )(lessThan$ (size$ xss$ )))(fun_app$m (setsum$ uua$ )(lessThan$ (size$ xss$ ))))):named a29 ))
(assert (! (forall ((?v0 Enat_set$ ))(= (fun_app$u (setsum$c uub$ )?v0 )zero$a )):named a30 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (fun_app$r (setsum$b uuc$ )?v0 )zero$a )):named a31 ))
(assert (! (forall ((?v0 Enat_set$ ))(= (fun_app$o (setsum$a uud$ )?v0 )zero$ )):named a32 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (fun_app$m (setsum$ uua$ )?v0 )zero$ )):named a33 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (lessThan$a ?v0 )(lessThan$a ?v1 ))(= ?v0 ?v1 ))):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (lessThan$ ?v0 )(lessThan$ ?v1 ))(= ?v0 ?v1 ))):named a35 ))
(assert (! (forall ((?v0 Enat_set_set$ )(?v1 Enat_set_enat_fun$ ))(! (=> (forall ((?v2 Enat_set$ ))(=> (member$ ?v2 ?v0 )(= (fun_app$o ?v1 ?v2 )zero$ )))(= (setsum$d ?v1 ?v0 )zero$ )):pattern ((setsum$d ?v1 ?v0 )))):named a36 ))
(assert (! (forall ((?v0 Nat_set_set$ )(?v1 Nat_set_enat_fun$ ))(! (=> (forall ((?v2 Nat_set$ ))(=> (member$a ?v2 ?v0 )(= (fun_app$m ?v1 ?v2 )zero$ )))(= (setsum$e ?v1 ?v0 )zero$ )):pattern ((setsum$e ?v1 ?v0 )))):named a37 ))
(assert (! (forall ((?v0 Enat_set_set$ )(?v1 Enat_set_nat_fun$ ))(! (=> (forall ((?v2 Enat_set$ ))(=> (member$ ?v2 ?v0 )(= (fun_app$u ?v1 ?v2 )zero$a )))(= (setsum$f ?v1 ?v0 )zero$a )):pattern ((setsum$f ?v1 ?v0 )))):named a38 ))
(assert (! (forall ((?v0 Nat_set_set$ )(?v1 Nat_set_nat_fun$ ))(! (=> (forall ((?v2 Nat_set$ ))(=> (member$a ?v2 ?v0 )(= (fun_app$r ?v1 ?v2 )zero$a )))(= (setsum$g ?v1 ?v0 )zero$a )):pattern ((setsum$g ?v1 ?v0 )))):named a39 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_enat_fun$ ))(! (=> (forall ((?v2 Enat$ ))(=> (member$b ?v2 ?v0 )(= (fun_app$a ?v1 ?v2 )zero$ )))(= (fun_app$o (setsum$a ?v1 )?v0 )zero$ )):pattern ((fun_app$o (setsum$a ?v1 )?v0 )))):named a40 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_nat_fun$ ))(! (=> (forall ((?v2 Nat$ ))(=> (member$c ?v2 ?v0 )(= (fun_app$h ?v1 ?v2 )zero$a )))(= (fun_app$r (setsum$b ?v1 )?v0 )zero$a )):pattern ((fun_app$r (setsum$b ?v1 )?v0 )))):named a41 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_nat_fun$ ))(! (=> (forall ((?v2 Enat$ ))(=> (member$b ?v2 ?v0 )(= (fun_app$c ?v1 ?v2 )zero$a )))(= (fun_app$u (setsum$c ?v1 )?v0 )zero$a )):pattern ((fun_app$u (setsum$c ?v1 )?v0 )))):named a42 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_enat_fun$ ))(! (=> (forall ((?v2 Nat$ ))(=> (member$c ?v2 ?v0 )(= (fun_app$ ?v1 ?v2 )zero$ )))(= (fun_app$m (setsum$ ?v1 )?v0 )zero$ )):pattern ((fun_app$m (setsum$ ?v1 )?v0 )))):named a43 ))
(assert (! (forall ((?v0 Enat_set_enat_fun$ )(?v1 Enat_set_set$ ))(=> (and (not (= (setsum$d ?v0 ?v1 )zero$ ))(forall ((?v2 Enat_set$ ))(=> (and (member$ ?v2 ?v1 )(not (= (fun_app$o ?v0 ?v2 )zero$ )))false )))false )):named a44 ))
(assert (! (forall ((?v0 Nat_set_enat_fun$ )(?v1 Nat_set_set$ ))(=> (and (not (= (setsum$e ?v0 ?v1 )zero$ ))(forall ((?v2 Nat_set$ ))(=> (and (member$a ?v2 ?v1 )(not (= (fun_app$m ?v0 ?v2 )zero$ )))false )))false )):named a45 ))
(assert (! (forall ((?v0 Enat_set_nat_fun$ )(?v1 Enat_set_set$ ))(=> (and (not (= (setsum$f ?v0 ?v1 )zero$a ))(forall ((?v2 Enat_set$ ))(=> (and (member$ ?v2 ?v1 )(not (= (fun_app$u ?v0 ?v2 )zero$a )))false )))false )):named a46 ))
(assert (! (forall ((?v0 Nat_set_nat_fun$ )(?v1 Nat_set_set$ ))(=> (and (not (= (setsum$g ?v0 ?v1 )zero$a ))(forall ((?v2 Nat_set$ ))(=> (and (member$a ?v2 ?v1 )(not (= (fun_app$r ?v0 ?v2 )zero$a )))false )))false )):named a47 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_set$ ))(=> (and (not (= (fun_app$o (setsum$a ?v0 )?v1 )zero$ ))(forall ((?v2 Enat$ ))(=> (and (member$b ?v2 ?v1 )(not (= (fun_app$a ?v0 ?v2 )zero$ )))false )))false )):named a48 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_set$ ))(=> (and (not (= (fun_app$r (setsum$b ?v0 )?v1 )zero$a ))(forall ((?v2 Nat$ ))(=> (and (member$c ?v2 ?v1 )(not (= (fun_app$h ?v0 ?v2 )zero$a )))false )))false )):named a49 ))
(assert (! (forall ((?v0 Enat_nat_fun$ )(?v1 Enat_set$ ))(=> (and (not (= (fun_app$u (setsum$c ?v0 )?v1 )zero$a ))(forall ((?v2 Enat$ ))(=> (and (member$b ?v2 ?v1 )(not (= (fun_app$c ?v0 ?v2 )zero$a )))false )))false )):named a50 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat_set$ ))(=> (and (not (= (fun_app$m (setsum$ ?v0 )?v1 )zero$ ))(forall ((?v2 Nat$ ))(=> (and (member$c ?v2 ?v1 )(not (= (fun_app$ ?v0 ?v2 )zero$ )))false )))false )):named a51 ))
(assert (! (forall ((?v0 Nat_enat_enat_fun_fun$ )(?v1 Enat_set$ )(?v2 Nat_set$ ))(= (fun_app$m (setsum$ (fun_app$p (uue$ ?v0 )?v1 ))?v2 )(fun_app$o (setsum$a (fun_app$w (uug$ ?v0 )?v2 ))?v1 ))):named a52 ))
(assert (! (forall ((?v0 Enat_enat_nat_fun_fun$ )(?v1 Enat_set$ )(?v2 Enat_set$ ))(= (fun_app$u (setsum$c (fun_app$v (uuh$ ?v0 )?v1 ))?v2 )(fun_app$u (setsum$c (fun_app$v (uuj$ ?v0 )?v2 ))?v1 ))):named a53 ))
(assert (! (forall ((?v0 Enat_nat_nat_fun_fun$ )(?v1 Nat_set$ )(?v2 Enat_set$ ))(= (fun_app$u (setsum$c (fun_app$s (uuk$ ?v0 )?v1 ))?v2 )(fun_app$r (setsum$b (fun_app$t (uum$ ?v0 )?v2 ))?v1 ))):named a54 ))
(assert (! (forall ((?v0 Nat_enat_nat_fun_fun$ )(?v1 Enat_set$ )(?v2 Nat_set$ ))(= (fun_app$r (setsum$b (fun_app$t (uun$ ?v0 )?v1 ))?v2 )(fun_app$u (setsum$c (fun_app$s (uup$ ?v0 )?v2 ))?v1 ))):named a55 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat_set$ )(?v2 Nat_set$ ))(= (fun_app$r (setsum$b (fun_app$q (uuq$ ?v0 )?v1 ))?v2 )(fun_app$r (setsum$b (fun_app$q (uus$ ?v0 )?v2 ))?v1 ))):named a56 ))
(assert (! (forall ((?v0 Enat_nat_enat_fun_fun$ )(?v1 Nat_set$ )(?v2 Enat_set$ ))(= (fun_app$o (setsum$a (fun_app$w (uut$ ?v0 )?v1 ))?v2 )(fun_app$m (setsum$ (fun_app$p (uuv$ ?v0 )?v2 ))?v1 ))):named a57 ))
(assert (! (forall ((?v0 Enat_enat_enat_fun_fun$ )(?v1 Enat_set$ )(?v2 Enat_set$ ))(= (fun_app$o (setsum$a (fun_app$n (uuw$ ?v0 )?v1 ))?v2 )(fun_app$o (setsum$a (fun_app$n (uuy$ ?v0 )?v2 ))?v1 ))):named a58 ))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$ )(?v1 Nat_set$ )(?v2 Nat_set$ ))(= (fun_app$m (setsum$ (fun_app$l (uuz$ ?v0 )?v1 ))?v2 )(fun_app$m (setsum$ (fun_app$l (uvb$ ?v0 )?v2 ))?v1 ))):named a59 ))
(assert (! (= (lnth$ xssa$ (size$ xss$ ))(lCons$ x$ xs$ )):named a60 ))
(assert (! (less$ (enat$ zero$a )(llength$ (lnth$ xssa$ (size$ xss$ )))):named a61 ))
(assert (! (forall ((?v0 Enat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a62 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_nat_fun$ )(?v2 Nat_nat_fun$ )(?v3 Nat_set$ )(?v4 Nat_enat_fun$ )(?v5 Nat_enat_fun$ ))(=> (and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v0 )(= (fun_app$h ?v1 (fun_app$h ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v0 )(member$c (fun_app$h ?v2 ?v6 )?v3 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v3 )(= (fun_app$h ?v2 (fun_app$h ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v3 )(member$c (fun_app$h ?v1 ?v6 )?v0 )))(forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v0 )(= (fun_app$ ?v4 (fun_app$h ?v2 ?v6 ))(fun_app$ ?v5 ?v6 ))))))))(= (fun_app$m (setsum$ ?v5 )?v0 )(fun_app$m (setsum$ ?v4 )?v3 )))):named a63 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Nat_enat_fun$ )(?v2 Enat_nat_fun$ )(?v3 Nat_set$ )(?v4 Nat_enat_fun$ )(?v5 Enat_enat_fun$ ))(=> (and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v0 )(= (fun_app$ ?v1 (fun_app$c ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v0 )(member$c (fun_app$c ?v2 ?v6 )?v3 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v3 )(= (fun_app$c ?v2 (fun_app$ ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v3 )(member$b (fun_app$ ?v1 ?v6 )?v0 )))(forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v0 )(= (fun_app$ ?v4 (fun_app$c ?v2 ?v6 ))(fun_app$a ?v5 ?v6 ))))))))(= (fun_app$o (setsum$a ?v5 )?v0 )(fun_app$m (setsum$ ?v4 )?v3 )))):named a64 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Enat_nat_fun$ )(?v2 Nat_enat_fun$ )(?v3 Enat_set$ )(?v4 Enat_enat_fun$ )(?v5 Nat_enat_fun$ ))(=> (and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v0 )(= (fun_app$c ?v1 (fun_app$ ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v0 )(member$b (fun_app$ ?v2 ?v6 )?v3 )))(and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v3 )(= (fun_app$ ?v2 (fun_app$c ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v3 )(member$c (fun_app$c ?v1 ?v6 )?v0 )))(forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v0 )(= (fun_app$a ?v4 (fun_app$ ?v2 ?v6 ))(fun_app$ ?v5 ?v6 ))))))))(= (fun_app$m (setsum$ ?v5 )?v0 )(fun_app$o (setsum$a ?v4 )?v3 )))):named a65 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_enat_fun$ )(?v2 Enat_enat_fun$ )(?v3 Enat_set$ )(?v4 Enat_nat_fun$ )(?v5 Enat_nat_fun$ ))(=> (and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v0 )(= (fun_app$a ?v1 (fun_app$a ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v0 )(member$b (fun_app$a ?v2 ?v6 )?v3 )))(and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v3 )(= (fun_app$a ?v2 (fun_app$a ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v3 )(member$b (fun_app$a ?v1 ?v6 )?v0 )))(forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v0 )(= (fun_app$c ?v4 (fun_app$a ?v2 ?v6 ))(fun_app$c ?v5 ?v6 ))))))))(= (fun_app$u (setsum$c ?v5 )?v0 )(fun_app$u (setsum$c ?v4 )?v3 )))):named a66 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Nat_enat_fun$ )(?v2 Enat_nat_fun$ )(?v3 Nat_set$ )(?v4 Nat_nat_fun$ )(?v5 Enat_nat_fun$ ))(=> (and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v0 )(= (fun_app$ ?v1 (fun_app$c ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v0 )(member$c (fun_app$c ?v2 ?v6 )?v3 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v3 )(= (fun_app$c ?v2 (fun_app$ ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v3 )(member$b (fun_app$ ?v1 ?v6 )?v0 )))(forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v0 )(= (fun_app$h ?v4 (fun_app$c ?v2 ?v6 ))(fun_app$c ?v5 ?v6 ))))))))(= (fun_app$u (setsum$c ?v5 )?v0 )(fun_app$r (setsum$b ?v4 )?v3 )))):named a67 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Enat_nat_fun$ )(?v2 Nat_enat_fun$ )(?v3 Enat_set$ )(?v4 Enat_nat_fun$ )(?v5 Nat_nat_fun$ ))(=> (and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v0 )(= (fun_app$c ?v1 (fun_app$ ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v0 )(member$b (fun_app$ ?v2 ?v6 )?v3 )))(and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v3 )(= (fun_app$ ?v2 (fun_app$c ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v3 )(member$c (fun_app$c ?v1 ?v6 )?v0 )))(forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v0 )(= (fun_app$c ?v4 (fun_app$ ?v2 ?v6 ))(fun_app$h ?v5 ?v6 ))))))))(= (fun_app$r (setsum$b ?v5 )?v0 )(fun_app$u (setsum$c ?v4 )?v3 )))):named a68 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_nat_fun$ )(?v2 Nat_nat_fun$ )(?v3 Nat_set$ )(?v4 Nat_nat_fun$ )(?v5 Nat_nat_fun$ ))(=> (and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v0 )(= (fun_app$h ?v1 (fun_app$h ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v0 )(member$c (fun_app$h ?v2 ?v6 )?v3 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v3 )(= (fun_app$h ?v2 (fun_app$h ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v3 )(member$c (fun_app$h ?v1 ?v6 )?v0 )))(forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v0 )(= (fun_app$h ?v4 (fun_app$h ?v2 ?v6 ))(fun_app$h ?v5 ?v6 ))))))))(= (fun_app$r (setsum$b ?v5 )?v0 )(fun_app$r (setsum$b ?v4 )?v3 )))):named a69 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_enat_fun$ )(?v2 Enat_enat_fun$ )(?v3 Enat_set$ )(?v4 Enat_enat_fun$ )(?v5 Enat_enat_fun$ ))(=> (and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v0 )(= (fun_app$a ?v1 (fun_app$a ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v0 )(member$b (fun_app$a ?v2 ?v6 )?v3 )))(and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v3 )(= (fun_app$a ?v2 (fun_app$a ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v3 )(member$b (fun_app$a ?v1 ?v6 )?v0 )))(forall ((?v6 Enat$ ))(=> (member$b ?v6 ?v0 )(= (fun_app$a ?v4 (fun_app$a ?v2 ?v6 ))(fun_app$a ?v5 ?v6 ))))))))(= (fun_app$o (setsum$a ?v5 )?v0 )(fun_app$o (setsum$a ?v4 )?v3 )))):named a70 ))
(assert (! (forall ((?v0 Enat_set_set$ )(?v1 Nat_enat_set_fun$ )(?v2 Enat_set_nat_fun$ )(?v3 Nat_set$ )(?v4 Nat_enat_fun$ )(?v5 Enat_set_enat_fun$ ))(=> (and (forall ((?v6 Enat_set$ ))(=> (member$ ?v6 ?v0 )(= (fun_app$x ?v1 (fun_app$u ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Enat_set$ ))(=> (member$ ?v6 ?v0 )(member$c (fun_app$u ?v2 ?v6 )?v3 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v3 )(= (fun_app$u ?v2 (fun_app$x ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v3 )(member$ (fun_app$x ?v1 ?v6 )?v0 )))(forall ((?v6 Enat_set$ ))(=> (member$ ?v6 ?v0 )(= (fun_app$ ?v4 (fun_app$u ?v2 ?v6 ))(fun_app$o ?v5 ?v6 ))))))))(= (setsum$d ?v5 ?v0 )(fun_app$m (setsum$ ?v4 )?v3 )))):named a71 ))
(assert (! (forall ((?v0 Nat_set_set$ )(?v1 Nat_nat_set_fun$ )(?v2 Nat_set_nat_fun$ )(?v3 Nat_set$ )(?v4 Nat_enat_fun$ )(?v5 Nat_set_enat_fun$ ))(=> (and (forall ((?v6 Nat_set$ ))(=> (member$a ?v6 ?v0 )(= (fun_app$y ?v1 (fun_app$r ?v2 ?v6 ))?v6 )))(and (forall ((?v6 Nat_set$ ))(=> (member$a ?v6 ?v0 )(member$c (fun_app$r ?v2 ?v6 )?v3 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v3 )(= (fun_app$r ?v2 (fun_app$y ?v1 ?v6 ))?v6 )))(and (forall ((?v6 Nat$ ))(=> (member$c ?v6 ?v3 )(member$a (fun_app$y ?v1 ?v6 )?v0 )))(forall ((?v6 Nat_set$ ))(=> (member$a ?v6 ?v0 )(= (fun_app$ ?v4 (fun_app$r ?v2 ?v6 ))(fun_app$m ?v5 ?v6 ))))))))(= (setsum$e ?v5 ?v0 )(fun_app$m (setsum$ ?v4 )?v3 )))):named a72 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ )(?v2 Enat_nat_fun$ )(?v3 Enat_nat_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Enat$ ))(=> (member$b ?v4 ?v1 )(= (fun_app$c ?v2 ?v4 )(fun_app$c ?v3 ?v4 )))))(= (fun_app$u (setsum$c ?v2 )?v0 )(fun_app$u (setsum$c ?v3 )?v1 )))):named a73 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ )(?v2 Nat_nat_fun$ )(?v3 Nat_nat_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (member$c ?v4 ?v1 )(= (fun_app$h ?v2 ?v4 )(fun_app$h ?v3 ?v4 )))))(= (fun_app$r (setsum$b ?v2 )?v0 )(fun_app$r (setsum$b ?v3 )?v1 )))):named a74 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ )(?v2 Enat_enat_fun$ )(?v3 Enat_enat_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Enat$ ))(=> (member$b ?v4 ?v1 )(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (fun_app$o (setsum$a ?v2 )?v0 )(fun_app$o (setsum$a ?v3 )?v1 )))):named a75 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ )(?v2 Nat_enat_fun$ )(?v3 Nat_enat_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (member$c ?v4 ?v1 )(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (fun_app$m (setsum$ ?v2 )?v0 )(fun_app$m (setsum$ ?v3 )?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a77 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a78 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(= (member$a ?v0 (lessThan$b ?v1 ))(less$a ?v0 ?v1 ))):named a79 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ ))(= (member$ ?v0 (lessThan$c ?v1 ))(less$b ?v0 ?v1 ))):named a80 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (member$b ?v0 (lessThan$a ?v1 ))(less$ ?v0 ?v1 ))):named a81 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (member$c ?v0 (lessThan$ ?v1 ))(less$c ?v0 ?v1 ))):named a82 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lnth$ (lCons$a ?v0 ?v1 )zero$a )?v0 ):pattern ((lCons$a ?v0 ?v1 )))):named a83 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lnth$a (lCons$ ?v0 ?v1 )zero$a )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a84 ))
(assert (! (less$ (enat$ zero$a )(llength$ (lconcat$ xssa$ ))):named a85 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (less$b (lessThan$a ?v0 )(lessThan$a ?v1 ))(less$ ?v0 ?v1 ))):named a86 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (less$a (lessThan$ ?v0 )(lessThan$ ?v1 ))(less$c ?v0 ?v1 ))):named a87 ))
(check-sat )
;(get-unsat-core )
