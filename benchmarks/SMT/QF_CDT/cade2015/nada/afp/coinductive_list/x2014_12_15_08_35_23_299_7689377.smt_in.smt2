;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_nat_bool_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_nat_prod_a_nat_prod_fun$ 0 )
(declare-sort Nat_a_prod_nat_a_prod_fun$ 0 )
(declare-sort A_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_llist_nat_a_prod_llist_fun$ 0 )
(declare-sort Nat_nat_prod_nat_nat_prod_fun$ 0 )
(declare-sort Nat_llist_a_nat_prod_llist_fun$ 0 )
(declare-sort Nat_llist_nat_nat_prod_llist_fun$ 0 )
(declare-sort A_a_a_prod_prod_a_a_a_prod_prod_fun$ 0 )
(declare-sort A_a_nat_prod_prod_a_a_nat_prod_prod_fun$ 0 )
(declare-sort Nat_a_a_prod_prod_nat_a_a_prod_prod_fun$ 0 )
(declare-sort A_a_prod_llist_a_a_a_prod_prod_llist_fun$ 0 )
(declare-sort A_a_prod_llist_nat_a_a_prod_prod_llist_fun$ 0 )
(declare-sort A_nat_prod_llist_a_a_nat_prod_prod_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort Nat_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()Nat_llist$)
(declare-fun lhd$a (Nat_llist$)Nat$)
(declare-fun ltl$a (Nat_llist$)Nat_llist$)
(declare-fun lCons$a (Nat$ Nat_llist$ )Nat_llist$)
(declare-sort A_nat_prod$ 0)
(declare-fun fst$ (A_nat_prod$)A$)
(declare-fun snd$ (A_nat_prod$)Nat$)
(declare-fun pair$ (A$ Nat$ )A_nat_prod$)
(declare-sort A_nat_prod_llist$ 0)
(declare-fun lNil$b ()A_nat_prod_llist$)
(declare-fun lhd$b (A_nat_prod_llist$)A_nat_prod$)
(declare-fun ltl$b (A_nat_prod_llist$)A_nat_prod_llist$)
(declare-fun lCons$b (A_nat_prod$ A_nat_prod_llist$ )A_nat_prod_llist$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$a (A_a_prod$)A$)
(declare-fun snd$a (A_a_prod$)A$)
(declare-fun pair$a (A$ A$ )A_a_prod$)
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$c ()A_a_prod_llist$)
(declare-fun lhd$c (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$c (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$c (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-sort Nat_a_prod$ 0)
(declare-fun fst$b (Nat_a_prod$)Nat$)
(declare-fun snd$b (Nat_a_prod$)A$)
(declare-fun pair$b (Nat$ A$ )Nat_a_prod$)
(declare-sort Nat_a_prod_llist$ 0)
(declare-fun lNil$d ()Nat_a_prod_llist$)
(declare-fun lhd$d (Nat_a_prod_llist$)Nat_a_prod$)
(declare-fun ltl$d (Nat_a_prod_llist$)Nat_a_prod_llist$)
(declare-fun lCons$d (Nat_a_prod$ Nat_a_prod_llist$ )Nat_a_prod_llist$)
(declare-sort Nat_nat_prod$ 0)
(declare-fun fst$c (Nat_nat_prod$)Nat$)
(declare-fun snd$c (Nat_nat_prod$)Nat$)
(declare-fun pair$c (Nat$ Nat$ )Nat_nat_prod$)
(declare-sort Nat_nat_prod_llist$ 0)
(declare-fun lNil$e ()Nat_nat_prod_llist$)
(declare-fun lhd$e (Nat_nat_prod_llist$)Nat_nat_prod$)
(declare-fun ltl$e (Nat_nat_prod_llist$)Nat_nat_prod_llist$)
(declare-fun lCons$e (Nat_nat_prod$ Nat_nat_prod_llist$ )Nat_nat_prod_llist$)
(declare-sort A_a_a_prod_prod$ 0)
(declare-fun fst$d (A_a_a_prod_prod$)A$)
(declare-fun snd$d (A_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$d (A$ A_a_prod$ )A_a_a_prod_prod$)
(declare-sort A_a_a_prod_prod_llist$ 0)
(declare-fun lNil$f ()A_a_a_prod_prod_llist$)
(declare-fun lhd$f (A_a_a_prod_prod_llist$)A_a_a_prod_prod$)
(declare-fun ltl$f (A_a_a_prod_prod_llist$)A_a_a_prod_prod_llist$)
(declare-fun lCons$f (A_a_a_prod_prod$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$)
(declare-sort A_a_nat_prod_prod$ 0)
(declare-fun fst$e (A_a_nat_prod_prod$)A$)
(declare-fun snd$e (A_a_nat_prod_prod$)A_nat_prod$)
(declare-fun pair$e (A$ A_nat_prod$ )A_a_nat_prod_prod$)
(declare-sort A_a_nat_prod_prod_llist$ 0)
(declare-fun lNil$g ()A_a_nat_prod_prod_llist$)
(declare-fun lhd$g (A_a_nat_prod_prod_llist$)A_a_nat_prod_prod$)
(declare-fun ltl$g (A_a_nat_prod_prod_llist$)A_a_nat_prod_prod_llist$)
(declare-fun lCons$g (A_a_nat_prod_prod$ A_a_nat_prod_prod_llist$ )A_a_nat_prod_prod_llist$)
(declare-sort A_a_prod_a_prod$ 0)
(declare-fun fst$f (A_a_prod_a_prod$)A_a_prod$)
(declare-fun snd$f (A_a_prod_a_prod$)A$)
(declare-fun pair$f (A_a_prod$ A$ )A_a_prod_a_prod$)
(declare-sort A_a_prod_a_prod_llist$ 0)
(declare-fun lNil$h ()A_a_prod_a_prod_llist$)
(declare-fun lhd$h (A_a_prod_a_prod_llist$)A_a_prod_a_prod$)
(declare-fun ltl$h (A_a_prod_a_prod_llist$)A_a_prod_a_prod_llist$)
(declare-fun lCons$h (A_a_prod_a_prod$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$)
(declare-sort A_a_prod_nat_prod$ 0)
(declare-fun fst$g (A_a_prod_nat_prod$)A_a_prod$)
(declare-fun snd$g (A_a_prod_nat_prod$)Nat$)
(declare-fun pair$g (A_a_prod$ Nat$ )A_a_prod_nat_prod$)
(declare-sort A_a_prod_nat_prod_llist$ 0)
(declare-fun lNil$i ()A_a_prod_nat_prod_llist$)
(declare-fun lhd$i (A_a_prod_nat_prod_llist$)A_a_prod_nat_prod$)
(declare-fun ltl$i (A_a_prod_nat_prod_llist$)A_a_prod_nat_prod_llist$)
(declare-fun lCons$i (A_a_prod_nat_prod$ A_a_prod_nat_prod_llist$ )A_a_prod_nat_prod_llist$)
(declare-sort A_nat_prod_a_prod$ 0)
(declare-fun fst$h (A_nat_prod_a_prod$)A_nat_prod$)
(declare-fun snd$h (A_nat_prod_a_prod$)A$)
(declare-fun pair$h (A_nat_prod$ A$ )A_nat_prod_a_prod$)
(declare-sort A_nat_prod_a_prod_llist$ 0)
(declare-fun lNil$j ()A_nat_prod_a_prod_llist$)
(declare-fun lhd$j (A_nat_prod_a_prod_llist$)A_nat_prod_a_prod$)
(declare-fun ltl$j (A_nat_prod_a_prod_llist$)A_nat_prod_a_prod_llist$)
(declare-fun lCons$j (A_nat_prod_a_prod$ A_nat_prod_a_prod_llist$ )A_nat_prod_a_prod_llist$)
(declare-sort A_nat_prod_nat_prod$ 0)
(declare-fun fst$i (A_nat_prod_nat_prod$)A_nat_prod$)
(declare-fun snd$i (A_nat_prod_nat_prod$)Nat$)
(declare-fun pair$i (A_nat_prod$ Nat$ )A_nat_prod_nat_prod$)
(declare-sort A_nat_prod_nat_prod_llist$ 0)
(declare-fun lNil$k ()A_nat_prod_nat_prod_llist$)
(declare-fun lhd$k (A_nat_prod_nat_prod_llist$)A_nat_prod_nat_prod$)
(declare-fun ltl$k (A_nat_prod_nat_prod_llist$)A_nat_prod_nat_prod_llist$)
(declare-fun lCons$k (A_nat_prod_nat_prod$ A_nat_prod_nat_prod_llist$ )A_nat_prod_nat_prod_llist$)
(declare-sort Nat_a_a_prod_prod$ 0)
(declare-fun fst$j (Nat_a_a_prod_prod$)Nat$)
(declare-fun snd$j (Nat_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$j (Nat$ A_a_prod$ )Nat_a_a_prod_prod$)
(declare-sort Nat_a_a_prod_prod_llist$ 0)
(declare-fun lNil$l ()Nat_a_a_prod_prod_llist$)
(declare-fun lhd$l (Nat_a_a_prod_prod_llist$)Nat_a_a_prod_prod$)
(declare-fun ltl$l (Nat_a_a_prod_prod_llist$)Nat_a_a_prod_prod_llist$)
(declare-fun lCons$l (Nat_a_a_prod_prod$ Nat_a_a_prod_prod_llist$ )Nat_a_a_prod_prod_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun a$ ()Nat_set$ )
(declare-fun uu$ ()A_nat_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun uua$ ()Nat_bool_fun$ )
(declare-fun uub$ ()Nat_bool_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_nat_prod_llist$ Nat$ )A_nat_prod$ )
(declare-fun lzip$ (A_llist$ )Nat_llist_a_nat_prod_llist_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lzip$a (A_llist$ )A_llist_a_a_prod_llist_fun$ )
(declare-fun lzip$b (Nat_llist$ )A_llist_nat_a_prod_llist_fun$ )
(declare-fun lzip$c (Nat_llist$ )Nat_llist_nat_nat_prod_llist_fun$ )
(declare-fun lzip$d (A_llist$ )A_a_prod_llist_a_a_a_prod_prod_llist_fun$ )
(declare-fun lzip$e (A_llist$ )A_nat_prod_llist_a_a_nat_prod_prod_llist_fun$ )
(declare-fun lzip$f (A_a_prod_llist$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lzip$g (A_a_prod_llist$ Nat_llist$ )A_a_prod_nat_prod_llist$ )
(declare-fun lzip$h (A_nat_prod_llist$ A_llist$ )A_nat_prod_a_prod_llist$ )
(declare-fun lzip$i (A_nat_prod_llist$ Nat_llist$ )A_nat_prod_nat_prod_llist$ )
(declare-fun lzip$j (Nat_llist$ )A_a_prod_llist_nat_a_a_prod_prod_llist_fun$ )
(declare-fun finite$ (Nat_set$ )Bool )
(declare-fun ldropn$ (Nat$ Nat_a_a_prod_prod_llist$ )Nat_a_a_prod_prod_llist$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun ldropn$a (Nat$ Nat_nat_prod_llist$ )Nat_nat_prod_llist$ )
(declare-fun ldropn$b (Nat$ Nat_a_prod_llist$ )Nat_a_prod_llist$ )
(declare-fun ldropn$c (Nat$ A_a_nat_prod_prod_llist$ )A_a_nat_prod_prod_llist$ )
(declare-fun ldropn$d (Nat$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun ldropn$e (Nat$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun ldropn$f (Nat$ A_nat_prod_llist$ )A_nat_prod_llist$ )
(declare-fun ldropn$g (Nat$ Nat_llist$ )Nat_llist$ )
(declare-fun ldropn$h (Nat$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_llist_a_nat_prod_llist_fun$ Nat_llist$ )A_nat_prod_llist$ )
(declare-fun fun_app$b (A_nat_bool_fun_fun$ A$ )Nat_bool_fun$ )
(declare-fun fun_app$c (A_llist_a_a_prod_llist_fun$ A_llist$ )A_a_prod_llist$ )
(declare-fun fun_app$d (A_llist_nat_a_prod_llist_fun$ A_llist$ )Nat_a_prod_llist$ )
(declare-fun fun_app$e (Nat_llist_nat_nat_prod_llist_fun$ Nat_llist$ )Nat_nat_prod_llist$ )
(declare-fun fun_app$f (A_a_prod_llist_a_a_a_prod_prod_llist_fun$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun fun_app$g (A_nat_prod_llist_a_a_nat_prod_prod_llist_fun$ A_nat_prod_llist$ )A_a_nat_prod_prod_llist$ )
(declare-fun fun_app$h (A_a_prod_llist_nat_a_a_prod_prod_llist_fun$ A_a_prod_llist$ )Nat_a_a_prod_prod_llist$ )
(declare-fun iterates$ (Nat_nat_fun$ Nat$ )Nat_llist$ )
(declare-fun lfinite$a (A_nat_prod_llist$ )Bool )
(declare-fun lfinite$b (Nat_llist$ )Bool )
(declare-fun lfinite$c (A_a_prod_llist$ )Bool )
(declare-fun lfinite$d (Nat_a_prod_llist$ )Bool )
(declare-fun lfinite$e (Nat_nat_prod_llist$ )Bool )
(declare-fun lfinite$f (A_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$g (A_a_nat_prod_prod_llist$ )Bool )
(declare-fun lfinite$h (A_a_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$i (A_a_prod_nat_prod_llist$ )Bool )
(declare-fun lfinite$j (A_nat_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$k (A_nat_prod_nat_prod_llist$ )Bool )
(declare-fun lfinite$l (Nat_a_a_prod_prod_llist$ )Bool )
(declare-fun llength$a (Nat_a_a_prod_prod_llist$ )Enat$ )
(declare-fun llength$b (Nat_nat_prod_llist$ )Enat$ )
(declare-fun llength$c (Nat_a_prod_llist$ )Enat$ )
(declare-fun llength$d (A_a_nat_prod_prod_llist$ )Enat$ )
(declare-fun llength$e (A_a_a_prod_prod_llist$ )Enat$ )
(declare-fun llength$f (A_a_prod_llist$ )Enat$ )
(declare-fun llength$g (A_nat_prod_llist$ )Enat$ )
(declare-fun llength$h (Nat_llist$ )Enat$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun case_prod$ (A_nat_bool_fun_fun$ A_nat_prod$ )Bool )
(declare-fun iterates$a (Nat_a_a_prod_prod_nat_a_a_prod_prod_fun$ Nat_a_a_prod_prod$ )Nat_a_a_prod_prod_llist$ )
(declare-fun iterates$b (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod$ )Nat_nat_prod_llist$ )
(declare-fun iterates$c (Nat_a_prod_nat_a_prod_fun$ Nat_a_prod$ )Nat_a_prod_llist$ )
(declare-fun iterates$d (A_a_nat_prod_prod_a_a_nat_prod_prod_fun$ A_a_nat_prod_prod$ )A_a_nat_prod_prod_llist$ )
(declare-fun iterates$e (A_a_a_prod_prod_a_a_a_prod_prod_fun$ A_a_a_prod_prod$ )A_a_a_prod_prod_llist$ )
(declare-fun iterates$f (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod_llist$ )
(declare-fun iterates$g (A_nat_prod_a_nat_prod_fun$ A_nat_prod$ )A_nat_prod_llist$ )
(declare-fun iterates$h (A_a_fun$ A$ )A_llist$ )
(declare-fun lsublist$a (A_a_prod_llist$ Nat_set$ )A_a_prod_llist$ )
(declare-fun lsublist$b (A_nat_prod_llist$ Nat_set$ )A_nat_prod_llist$ )
(declare-fun lsublist$c (Nat_llist$ Nat_set$ )Nat_llist$ )
(declare-fun lstrict_prefix$ (Nat_a_a_prod_prod_llist$ Nat_a_a_prod_prod_llist$ )Bool )
(declare-fun lstrict_prefix$a (Nat_nat_prod_llist$ Nat_nat_prod_llist$ )Bool )
(declare-fun lstrict_prefix$b (Nat_a_prod_llist$ Nat_a_prod_llist$ )Bool )
(declare-fun lstrict_prefix$c (A_a_nat_prod_prod_llist$ A_a_nat_prod_prod_llist$ )Bool )
(declare-fun lstrict_prefix$d (A_a_a_prod_prod_llist$ A_a_a_prod_prod_llist$ )Bool )
(declare-fun lstrict_prefix$e (A_a_prod_llist$ A_a_prod_llist$ )Bool )
(declare-fun lstrict_prefix$f (A_nat_prod_llist$ A_nat_prod_llist$ )Bool )
(declare-fun lstrict_prefix$g (Nat_llist$ Nat_llist$ )Bool )
(declare-fun lstrict_prefix$h (A_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uub$ ?v0 )(and (less$ (enat$ ?v0 )(llength$ xs$ ))(member$ ?v0 a$ ))):pattern ((fun_app$ uub$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uua$ ?v0 )(and (less$ (enat$ ?v0 )(llength$ xs$ ))(case_prod$ uu$ (lnth$ (fun_app$a (lzip$ xs$ )(iterates$ suc$ zero$ ))?v0 )))):pattern ((fun_app$ uua$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ ))(! (= (fun_app$ (fun_app$b uu$ ?v0 )?v1 )(member$ ?v1 a$ )):pattern ((fun_app$ (fun_app$b uu$ ?v0 )?v1 )))):named a2 ))
(assert (! (not (lfinite$ (lsublist$ xs$ a$ ))):named a3 ))
(assert (! (or (lfinite$ xs$ )(finite$ a$ )):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat_llist$ ))(= (lfinite$a (fun_app$a (lzip$ ?v0 )?v1 ))(or (lfinite$ ?v0 )(lfinite$b ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$c (fun_app$c (lzip$a ?v0 )?v1 ))(or (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 A_llist$ ))(= (lfinite$d (fun_app$d (lzip$b ?v0 )?v1 ))(or (lfinite$b ?v0 )(lfinite$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(= (lfinite$e (fun_app$e (lzip$c ?v0 )?v1 ))(or (lfinite$b ?v0 )(lfinite$b ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$f (fun_app$f (lzip$d ?v0 )?v1 ))(or (lfinite$ ?v0 )(lfinite$c ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_nat_prod_llist$ ))(= (lfinite$g (fun_app$g (lzip$e ?v0 )?v1 ))(or (lfinite$ ?v0 )(lfinite$a ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_llist$ ))(= (lfinite$h (lzip$f ?v0 ?v1 ))(or (lfinite$c ?v0 )(lfinite$ ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 Nat_llist$ ))(= (lfinite$i (lzip$g ?v0 ?v1 ))(or (lfinite$c ?v0 )(lfinite$b ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 A_llist$ ))(= (lfinite$j (lzip$h ?v0 ?v1 ))(or (lfinite$a ?v0 )(lfinite$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 Nat_llist$ ))(= (lfinite$k (lzip$i ?v0 ?v1 ))(or (lfinite$a ?v0 )(lfinite$b ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod_nat_a_a_prod_prod_fun$ )(?v1 Nat_a_a_prod_prod$ ))(not (lfinite$l (iterates$a ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$ )(?v1 Nat_nat_prod$ ))(not (lfinite$e (iterates$b ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Nat_a_prod_nat_a_prod_fun$ )(?v1 Nat_a_prod$ ))(not (lfinite$d (iterates$c ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod_a_a_nat_prod_prod_fun$ )(?v1 A_a_nat_prod_prod$ ))(not (lfinite$g (iterates$d ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_a_a_a_prod_prod_fun$ )(?v1 A_a_a_prod_prod$ ))(not (lfinite$f (iterates$e ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod$ ))(not (lfinite$c (iterates$f ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_nat_prod_a_nat_prod_fun$ )(?v1 A_nat_prod$ ))(not (lfinite$a (iterates$g ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(not (lfinite$ (iterates$h ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(not (lfinite$b (iterates$ ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod_llist$ ))(= (lfinite$l ?v0 )(exists ((?v1 Nat$ ))(= (llength$a ?v0 )(enat$ ?v1 ))))):named a24 ))
(assert (! (forall ((?v0 Nat_nat_prod_llist$ ))(= (lfinite$e ?v0 )(exists ((?v1 Nat$ ))(= (llength$b ?v0 )(enat$ ?v1 ))))):named a25 ))
(assert (! (forall ((?v0 Nat_a_prod_llist$ ))(= (lfinite$d ?v0 )(exists ((?v1 Nat$ ))(= (llength$c ?v0 )(enat$ ?v1 ))))):named a26 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod_llist$ ))(= (lfinite$g ?v0 )(exists ((?v1 Nat$ ))(= (llength$d ?v0 )(enat$ ?v1 ))))):named a27 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(= (lfinite$f ?v0 )(exists ((?v1 Nat$ ))(= (llength$e ?v0 )(enat$ ?v1 ))))):named a28 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(= (lfinite$c ?v0 )(exists ((?v1 Nat$ ))(= (llength$f ?v0 )(enat$ ?v1 ))))):named a29 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ ))(= (lfinite$a ?v0 )(exists ((?v1 Nat$ ))(= (llength$g ?v0 )(enat$ ?v1 ))))):named a30 ))
(assert (! (forall ((?v0 Nat_llist$ ))(= (lfinite$b ?v0 )(exists ((?v1 Nat$ ))(= (llength$h ?v0 )(enat$ ?v1 ))))):named a31 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ ?v0 )(exists ((?v1 Nat$ ))(= (llength$ ?v0 )(enat$ ?v1 ))))):named a32 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod_llist$ )(?v1 Nat$ ))(=> (= (llength$a ?v0 )(enat$ ?v1 ))(lfinite$l ?v0 ))):named a33 ))
(assert (! (forall ((?v0 Nat_nat_prod_llist$ )(?v1 Nat$ ))(=> (= (llength$b ?v0 )(enat$ ?v1 ))(lfinite$e ?v0 ))):named a34 ))
(assert (! (forall ((?v0 Nat_a_prod_llist$ )(?v1 Nat$ ))(=> (= (llength$c ?v0 )(enat$ ?v1 ))(lfinite$d ?v0 ))):named a35 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod_llist$ )(?v1 Nat$ ))(=> (= (llength$d ?v0 )(enat$ ?v1 ))(lfinite$g ?v0 ))):named a36 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 Nat$ ))(=> (= (llength$e ?v0 )(enat$ ?v1 ))(lfinite$f ?v0 ))):named a37 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 Nat$ ))(=> (= (llength$f ?v0 )(enat$ ?v1 ))(lfinite$c ?v0 ))):named a38 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 Nat$ ))(=> (= (llength$g ?v0 )(enat$ ?v1 ))(lfinite$a ?v0 ))):named a39 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat$ ))(=> (= (llength$h ?v0 )(enat$ ?v1 ))(lfinite$b ?v0 ))):named a40 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (= (llength$ ?v0 )(enat$ ?v1 ))(lfinite$ ?v0 ))):named a41 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod_llist$ ))(=> (lfinite$l ?v0 )(exists ((?v1 Nat$ ))(= (llength$a ?v0 )(enat$ ?v1 ))))):named a42 ))
(assert (! (forall ((?v0 Nat_nat_prod_llist$ ))(=> (lfinite$e ?v0 )(exists ((?v1 Nat$ ))(= (llength$b ?v0 )(enat$ ?v1 ))))):named a43 ))
(assert (! (forall ((?v0 Nat_a_prod_llist$ ))(=> (lfinite$d ?v0 )(exists ((?v1 Nat$ ))(= (llength$c ?v0 )(enat$ ?v1 ))))):named a44 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod_llist$ ))(=> (lfinite$g ?v0 )(exists ((?v1 Nat$ ))(= (llength$d ?v0 )(enat$ ?v1 ))))):named a45 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(=> (lfinite$f ?v0 )(exists ((?v1 Nat$ ))(= (llength$e ?v0 )(enat$ ?v1 ))))):named a46 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(=> (lfinite$c ?v0 )(exists ((?v1 Nat$ ))(= (llength$f ?v0 )(enat$ ?v1 ))))):named a47 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ ))(=> (lfinite$a ?v0 )(exists ((?v1 Nat$ ))(= (llength$g ?v0 )(enat$ ?v1 ))))):named a48 ))
(assert (! (forall ((?v0 Nat_llist$ ))(=> (lfinite$b ?v0 )(exists ((?v1 Nat$ ))(= (llength$h ?v0 )(enat$ ?v1 ))))):named a49 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(exists ((?v1 Nat$ ))(= (llength$ ?v0 )(enat$ ?v1 ))))):named a50 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod_llist$ )(?v1 Nat_a_a_prod_prod_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lfinite$l ?v0 ))):named a51 ))
(assert (! (forall ((?v0 Nat_nat_prod_llist$ )(?v1 Nat_nat_prod_llist$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lfinite$e ?v0 ))):named a52 ))
(assert (! (forall ((?v0 Nat_a_prod_llist$ )(?v1 Nat_a_prod_llist$ ))(=> (lstrict_prefix$b ?v0 ?v1 )(lfinite$d ?v0 ))):named a53 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod_llist$ )(?v1 A_a_nat_prod_prod_llist$ ))(=> (lstrict_prefix$c ?v0 ?v1 )(lfinite$g ?v0 ))):named a54 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 A_a_a_prod_prod_llist$ ))(=> (lstrict_prefix$d ?v0 ?v1 )(lfinite$f ?v0 ))):named a55 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(=> (lstrict_prefix$e ?v0 ?v1 )(lfinite$c ?v0 ))):named a56 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 A_nat_prod_llist$ ))(=> (lstrict_prefix$f ?v0 ?v1 )(lfinite$a ?v0 ))):named a57 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (lstrict_prefix$g ?v0 ?v1 )(lfinite$b ?v0 ))):named a58 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$h ?v0 ?v1 )(lfinite$ ?v0 ))):named a59 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ )(?v2 Nat_set$ )(?v3 Nat_set$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (less$ (enat$ ?v4 )(llength$f ?v1 ))(= (member$ ?v4 ?v2 )(member$ ?v4 ?v3 )))))(= (lsublist$a ?v0 ?v2 )(lsublist$a ?v1 ?v3 )))):named a60 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 A_nat_prod_llist$ )(?v2 Nat_set$ )(?v3 Nat_set$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (less$ (enat$ ?v4 )(llength$g ?v1 ))(= (member$ ?v4 ?v2 )(member$ ?v4 ?v3 )))))(= (lsublist$b ?v0 ?v2 )(lsublist$b ?v1 ?v3 )))):named a61 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ )(?v2 Nat_set$ )(?v3 Nat_set$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (less$ (enat$ ?v4 )(llength$h ?v1 ))(= (member$ ?v4 ?v2 )(member$ ?v4 ?v3 )))))(= (lsublist$c ?v0 ?v2 )(lsublist$c ?v1 ?v3 )))):named a62 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 Nat_set$ )(?v3 Nat_set$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (less$ (enat$ ?v4 )(llength$ ?v1 ))(= (member$ ?v4 ?v2 )(member$ ?v4 ?v3 )))))(= (lsublist$ ?v0 ?v2 )(lsublist$ ?v1 ?v3 )))):named a63 ))
(assert (! (= (collect$ uua$ )(collect$ uub$ )):named a64 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$a lNil$c ?v0 )lNil$c ):pattern ((lsublist$a lNil$c ?v0 )))):named a65 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$c lNil$a ?v0 )lNil$a ):pattern ((lsublist$c lNil$a ?v0 )))):named a66 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$b lNil$b ?v0 )lNil$b ):pattern ((lsublist$b lNil$b ?v0 )))):named a67 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$ lNil$ ?v0 )lNil$ ):pattern ((lsublist$ lNil$ ?v0 )))):named a68 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_a_prod_prod_llist$ ))(= (lfinite$l (ldropn$ ?v0 ?v1 ))(lfinite$l ?v1 ))):named a69 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_prod_llist$ ))(= (lfinite$e (ldropn$a ?v0 ?v1 ))(lfinite$e ?v1 ))):named a70 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_prod_llist$ ))(= (lfinite$d (ldropn$b ?v0 ?v1 ))(lfinite$d ?v1 ))):named a71 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_nat_prod_prod_llist$ ))(= (lfinite$g (ldropn$c ?v0 ?v1 ))(lfinite$g ?v1 ))):named a72 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_prod_prod_llist$ ))(= (lfinite$f (ldropn$d ?v0 ?v1 ))(lfinite$f ?v1 ))):named a73 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ ))(= (lfinite$c (ldropn$e ?v0 ?v1 ))(lfinite$c ?v1 ))):named a74 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_nat_prod_llist$ ))(= (lfinite$a (ldropn$f ?v0 ?v1 ))(lfinite$a ?v1 ))):named a75 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ ))(= (lfinite$b (ldropn$g ?v0 ?v1 ))(lfinite$b ?v1 ))):named a76 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$ (ldropn$h ?v0 ?v1 ))(lfinite$ ?v1 ))):named a77 ))
(assert (! (= (lfinite$l lNil$l )true ):named a78 ))
(assert (! (= (lfinite$e lNil$e )true ):named a79 ))
(assert (! (= (lfinite$d lNil$d )true ):named a80 ))
(assert (! (= (lfinite$g lNil$g )true ):named a81 ))
(assert (! (= (lfinite$f lNil$f )true ):named a82 ))
(assert (! (= (lfinite$c lNil$c )true ):named a83 ))
(assert (! (= (lfinite$b lNil$a )true ):named a84 ))
(assert (! (= (lfinite$a lNil$b )true ):named a85 ))
(assert (! (= (lfinite$ lNil$ )true ):named a86 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod$ )(?v1 Nat_a_a_prod_prod_llist$ ))(! (= (lfinite$l (lCons$l ?v0 ?v1 ))(lfinite$l ?v1 )):pattern ((lCons$l ?v0 ?v1 )))):named a87 ))
(assert (! (forall ((?v0 Nat_nat_prod$ )(?v1 Nat_nat_prod_llist$ ))(! (= (lfinite$e (lCons$e ?v0 ?v1 ))(lfinite$e ?v1 )):pattern ((lCons$e ?v0 ?v1 )))):named a88 ))
(assert (! (forall ((?v0 Nat_a_prod$ )(?v1 Nat_a_prod_llist$ ))(! (= (lfinite$d (lCons$d ?v0 ?v1 ))(lfinite$d ?v1 )):pattern ((lCons$d ?v0 ?v1 )))):named a89 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod$ )(?v1 A_a_nat_prod_prod_llist$ ))(! (= (lfinite$g (lCons$g ?v0 ?v1 ))(lfinite$g ?v1 )):pattern ((lCons$g ?v0 ?v1 )))):named a90 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod_llist$ ))(! (= (lfinite$f (lCons$f ?v0 ?v1 ))(lfinite$f ?v1 )):pattern ((lCons$f ?v0 ?v1 )))):named a91 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ ))(! (= (lfinite$c (lCons$c ?v0 ?v1 ))(lfinite$c ?v1 )):pattern ((lCons$c ?v0 ?v1 )))):named a92 ))
(assert (! (forall ((?v0 A_nat_prod$ )(?v1 A_nat_prod_llist$ ))(! (= (lfinite$a (lCons$b ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a93 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ ))(! (= (lfinite$b (lCons$a ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a94 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a95 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat$ )(?v3 Nat_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a96 ))
(assert (! (forall ((?v0 A_nat_prod$ )(?v1 A_nat_prod_llist$ )(?v2 A_nat_prod$ )(?v3 A_nat_prod_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a97 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod$ )(?v3 A_a_prod_llist$ ))(= (= (lCons$c ?v0 ?v1 )(lCons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a98 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a99 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod$ )(?v1 Nat_a_a_prod_prod_llist$ ))(! (= (lfinite$l (lCons$l ?v0 ?v1 ))(lfinite$l ?v1 )):pattern ((lCons$l ?v0 ?v1 )))):named a100 ))
(assert (! (forall ((?v0 Nat_nat_prod$ )(?v1 Nat_nat_prod_llist$ ))(! (= (lfinite$e (lCons$e ?v0 ?v1 ))(lfinite$e ?v1 )):pattern ((lCons$e ?v0 ?v1 )))):named a101 ))
(assert (! (forall ((?v0 Nat_a_prod$ )(?v1 Nat_a_prod_llist$ ))(! (= (lfinite$d (lCons$d ?v0 ?v1 ))(lfinite$d ?v1 )):pattern ((lCons$d ?v0 ?v1 )))):named a102 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod$ )(?v1 A_a_nat_prod_prod_llist$ ))(! (= (lfinite$g (lCons$g ?v0 ?v1 ))(lfinite$g ?v1 )):pattern ((lCons$g ?v0 ?v1 )))):named a103 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod_llist$ ))(! (= (lfinite$f (lCons$f ?v0 ?v1 ))(lfinite$f ?v1 )):pattern ((lCons$f ?v0 ?v1 )))):named a104 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ ))(! (= (lfinite$c (lCons$c ?v0 ?v1 ))(lfinite$c ?v1 )):pattern ((lCons$c ?v0 ?v1 )))):named a105 ))
(assert (! (forall ((?v0 A_nat_prod$ )(?v1 A_nat_prod_llist$ ))(! (= (lfinite$a (lCons$b ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a106 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ ))(! (= (lfinite$b (lCons$a ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a107 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a108 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (ldropn$g zero$ ?v0 )?v0 ):pattern ((ldropn$g zero$ ?v0 )))):named a109 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ ))(! (= (ldropn$f zero$ ?v0 )?v0 ):pattern ((ldropn$f zero$ ?v0 )))):named a110 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (= (ldropn$e zero$ ?v0 )?v0 ):pattern ((ldropn$e zero$ ?v0 )))):named a111 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (ldropn$h zero$ ?v0 )?v0 ):pattern ((ldropn$h zero$ ?v0 )))):named a112 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$d (lzip$b ?v0 )lNil$ )lNil$d ):pattern ((lzip$b ?v0 )))):named a113 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$e (lzip$c ?v0 )lNil$a )lNil$e ):pattern ((lzip$c ?v0 )))):named a114 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$g (lzip$e ?v0 )lNil$b )lNil$g ):pattern ((lzip$e ?v0 )))):named a115 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$h (lzip$j ?v0 )lNil$c )lNil$l ):pattern ((lzip$j ?v0 )))):named a116 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$f (lzip$d ?v0 )lNil$c )lNil$f ):pattern ((lzip$d ?v0 )))):named a117 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (lzip$a ?v0 )lNil$ )lNil$c ):pattern ((lzip$a ?v0 )))):named a118 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (lzip$ ?v0 )lNil$a )lNil$b ):pattern ((lzip$ ?v0 )))):named a119 ))
(check-sat )
;(get-unsat-core )
