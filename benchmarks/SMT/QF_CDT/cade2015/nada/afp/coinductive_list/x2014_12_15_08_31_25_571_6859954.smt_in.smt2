;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun max$ (A_a_bool_fun_fun$ A$ A$ )A$ )
(declare-fun min$ (A_a_bool_fun_fun$ A$ A$ )A$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun transp$ (A_a_bool_fun_fun$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun less_eq$ ()A_a_bool_fun_fun$ )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun lsorted$ (A_a_bool_fun_fun$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun atLeastAtMost$ (A_a_bool_fun_fun$ A$ A$ )A_set$ )
(assert (! (not (lsorted$ less_eq$ (lfilter$ p$ xs$ ))):named a0 ))
(assert (! (lsorted$ less_eq$ xs$ ):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less_eq$ ?v1 )?v2 ))(fun_app$ (fun_app$a less_eq$ ?v0 )?v2 ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (= ?v0 ?v1 )(fun_app$ (fun_app$a less_eq$ ?v0 )?v1 ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less_eq$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less_eq$ ?v0 )?v2 ))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less_eq$ ?v0 )?v1 )(fun_app$ (fun_app$a less_eq$ ?v1 )?v2 ))(fun_app$ (fun_app$a less_eq$ ?v0 )?v2 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (max$ less_eq$ ?v0 ?v1 )(ite (fun_app$ (fun_app$a less_eq$ ?v0 )?v1 )?v1 ?v0 )):pattern ((max$ less_eq$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (min$ less_eq$ ?v0 ?v1 )(ite (fun_app$ (fun_app$a less_eq$ ?v0 )?v1 )?v0 ?v1 )):pattern ((min$ less_eq$ ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v0 ?v1 ))(lfilter$ ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A$ ))(fun_app$ (fun_app$a less_eq$ ?v0 )?v0 )):named a9 ))
(assert (! (transp$ less_eq$ ):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (member$ ?v0 (atLeastAtMost$ less_eq$ ?v1 ?v2 ))(and (fun_app$ (fun_app$a less_eq$ ?v1 )?v0 )(fun_app$ (fun_app$a less_eq$ ?v0 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (lsorted$ less_eq$ ?v0 )(lsorted$ less_eq$ (ldropn$ ?v1 ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(=> (lsorted$ less_eq$ ?v0 )(lsorted$ less_eq$ (ldrop$ ?v1 ?v0 )))):named a13 ))
(assert (! (lsorted$ less_eq$ lNil$ ):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lsorted$ less_eq$ ?v1 ))(lsorted$ less_eq$ ?v0 ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a less_eq$ ?v0 )?v1 )(lsorted$ less_eq$ (lCons$ ?v1 ?v2 )))(lsorted$ less_eq$ (lCons$ ?v0 (lCons$ ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lsorted$ less_eq$ ?v0 )(lsorted$ less_eq$ (ltl$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(=> (lsorted$ less_eq$ ?v0 )(lsorted$ less_eq$ (ltake$ ?v1 ?v0 )))):named a18 ))
(check-sat )
;(get-unsat-core )
