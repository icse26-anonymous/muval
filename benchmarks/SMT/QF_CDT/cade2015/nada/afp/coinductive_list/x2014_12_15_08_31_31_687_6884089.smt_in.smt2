;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_bool_fun_fun$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun x$ ()A$ )
(declare-fun uu$ ()A_a_fun$ )
(declare-fun uua$ ()A_bool_fun$ )
(declare-fun uub$ ()A_bool_fun$ )
(declare-fun uuc$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uud$ (A_bool_fun$ )A_llist_a_bool_fun_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lfilter$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_llist_a_bool_fun_fun$ A_llist$ )A_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun fun_app$c (A_a_fun$ A$ )A$ )
(declare-fun fun_app$d (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$e (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$f (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun gen_lset$ (A_set$ )A_llist_a_set_fun$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun finite_lprefix$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$a (uud$ ?v0 )?v1 )?v2 )(and (member$ ?v2 (lset$ ?v1 ))(fun_app$ ?v0 ?v2 ))):pattern ((fun_app$ (fun_app$a (uud$ ?v0 )?v1 )?v2 )))):named a0 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$b (uuc$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uuc$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$c uu$ ?v0 )?v0 ):pattern ((fun_app$c uu$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uub$ ?v0 )false ):pattern ((fun_app$ uub$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uua$ ?v0 )true ):pattern ((fun_app$ uua$ ?v0 )))):named a4 ))
(assert (! (not (= (fun_app$d (lfilter$ p$ )(iterates$ uu$ x$ ))(ite (fun_app$ p$ x$ )(iterates$ uu$ x$ )lNil$ ))):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$d (lfilter$ ?v0 )(fun_app$d (lfilter$ ?v0 )?v1 ))(fun_app$d (lfilter$ ?v0 )?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$d (lfilter$ uua$ )?v0 )?v0 )):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$d (lfilter$ ?v0 )lNil$ )lNil$ ):pattern ((lfilter$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$d (lfilter$ uub$ )?v0 )lNil$ )):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(= (fun_app$d (lfilter$ ?v0 )(fun_app$d (lfilter$ ?v1 )?v2 ))(fun_app$d (lfilter$ (fun_app$b (uuc$ ?v0 )?v1 ))?v2 ))):named a10 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$e (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$f (gen_lset$ ?v0 )lNil$ )?v0 ):pattern ((gen_lset$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ ))(= (ldropWhile$ ?v0 (iterates$ uu$ ?v1 ))(ite (fun_app$ ?v0 ?v1 )lNil$ (iterates$ uu$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$e (finite_lprefix$ ?v0 )lNil$ )(= ?v0 lNil$ )):pattern ((finite_lprefix$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$e (finite_lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$e (finite_lprefix$ lNil$ )?v0 )))):named a15 ))
(assert (! (= (lstrict_prefix$ lNil$ lNil$ )false ):named a16 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_llist$ ?v0 lNil$ )):named a17 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ ))(= (ltakeWhile$ ?v0 (iterates$ uu$ ?v1 ))(ite (fun_app$ ?v0 ?v1 )(iterates$ uu$ ?v1 )lNil$ ))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(! (=> (forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v0 ))(not (fun_app$ ?v1 ?v2 ))))(= (fun_app$d (lfilter$ ?v1 )?v0 )lNil$ )):pattern ((fun_app$d (lfilter$ ?v1 )?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (fun_app$d (lfilter$ ?v0 )?v1 )lNil$ )(forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v1 ))(not (fun_app$ ?v0 ?v2 )))))):named a20 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ldropWhile$ uua$ ?v0 )lNil$ )):named a21 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lset$ (fun_app$d (lfilter$ ?v0 )?v1 ))(collect$ (fun_app$a (uud$ ?v0 )?v1 )))):named a22 ))
(check-sat )
;(get-unsat-core )
