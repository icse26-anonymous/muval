;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort A_b_prod_llist_enat_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_b_prod$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$a ()A_b_prod_llist$)
(declare-fun lhd$a (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$a (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$a (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-fun us$ ()A_b_prod_llist$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun llcp$ (A_b_prod_llist$ )A_b_prod_llist_enat_fun$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun llcp$a (B_llist$ )B_llist_enat_fun$ )
(declare-fun llcp$b (A_llist$ )A_llist_enat_fun$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun ltake$a (Enat$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun ltake$b (Enat$ B_llist$ )B_llist$ )
(declare-fun fun_app$ (A_b_prod_llist_enat_fun$ A_b_prod_llist$ )Enat$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_b_prod_llist$ )Enat$ )
(declare-fun fun_app$a (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun fun_app$b (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun infinity$ ()Enat$ )
(declare-fun lfinite$a (A_b_prod_llist$ )Bool )
(declare-fun lfinite$b (B_llist$ )Bool )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun llength$b (A_llist$ )Enat$ )
(assert (! (not (not (lfinite$ (ltake$ (llength$ us$ )xs$ )))):named a0 ))
(assert (! (= (llength$ us$ )infinity$ ):named a1 ))
(assert (! (less_eq$ (llength$ us$ )(llength$a ys$ )):named a2 ))
(assert (! (less_eq$ (llength$ us$ )(llength$b xs$ )):named a3 ))
(assert (! (= xs$ (ltake$ (llength$ us$ )xs$ )):named a4 ))
(assert (! (= (llength$b xs$ )infinity$ ):named a5 ))
(assert (! (not (lfinite$a us$ )):named a6 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$ ?v0 )?v1 )(= (ltake$a ?v1 ?v0 )?v0 )):pattern ((ltake$a ?v1 ?v0 )))):named a7 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$a ?v0 )?v1 )(= (ltake$b ?v1 ?v0 )?v0 )):pattern ((ltake$b ?v1 ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$b ?v0 )?v1 )(= (ltake$ ?v1 ?v0 )?v0 )):pattern ((ltake$ ?v1 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(= (= (llength$ ?v0 )infinity$ )(not (lfinite$a ?v0 )))):named a10 ))
(assert (! (forall ((?v0 B_llist$ ))(= (= (llength$a ?v0 )infinity$ )(not (lfinite$b ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(= (= (llength$b ?v0 )infinity$ )(not (lfinite$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (=> (not (lfinite$a ?v0 ))(= (llength$ ?v0 )infinity$ )):pattern ((llength$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 B_llist$ ))(! (=> (not (lfinite$b ?v0 ))(= (llength$a ?v0 )infinity$ )):pattern ((llength$a ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (llength$b ?v0 )infinity$ )):pattern ((llength$b ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ )(?v3 Enat$ ))(=> (and (= (ltake$a ?v0 ?v1 )(ltake$a ?v0 ?v2 ))(less_eq$ ?v3 ?v0 ))(= (ltake$a ?v3 ?v1 )(ltake$a ?v3 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Enat$ ))(=> (and (= (ltake$ ?v0 ?v1 )(ltake$ ?v0 ?v2 ))(less_eq$ ?v3 ?v0 ))(= (ltake$ ?v3 ?v1 )(ltake$ ?v3 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 Enat$ ))(=> (and (= (ltake$b ?v0 ?v1 )(ltake$b ?v0 ?v2 ))(less_eq$ ?v3 ?v0 ))(= (ltake$b ?v3 ?v1 )(ltake$b ?v3 ?v2 )))):named a18 ))
(assert (! (= (llength$b (ltake$ (llength$ us$ )xs$ ))(llength$a (ltake$b (llength$ us$ )ys$ ))):named a19 ))
(assert (! (= xs$ (lappend$ (ltake$ (llength$ us$ )xs$ )(ldrop$ (llength$ us$ )xs$ ))):named a20 ))
(assert (! (= ys$ (ltake$b (llength$ us$ )ys$ )):named a21 ))
(assert (! (= us$ (lzip$ (ltake$ (llength$ us$ )xs$ )(ltake$b (llength$ us$ )ys$ ))):named a22 ))
(assert (! (less_eq$ (llength$ us$ )(min$ (llength$b xs$ )(llength$a ys$ ))):named a23 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ ))(= (llength$ (ltake$a ?v0 ?v1 ))(min$ ?v0 (llength$ ?v1 )))):named a24 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(= (llength$a (ltake$b ?v0 ?v1 ))(min$ ?v0 (llength$a ?v1 )))):named a25 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (llength$b (ltake$ ?v0 ?v1 ))(min$ ?v0 (llength$b ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$ (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a27 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$a (llcp$a ?v0 )?v0 )(llength$a ?v0 )):pattern ((llcp$a ?v0 )))):named a28 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (llcp$b ?v0 )?v0 )(llength$b ?v0 )):pattern ((llcp$b ?v0 )))):named a29 ))
(check-sat )
;(get-unsat-core )
