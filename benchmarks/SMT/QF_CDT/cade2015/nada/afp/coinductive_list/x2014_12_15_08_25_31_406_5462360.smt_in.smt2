;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort A_set_a_fun$ 0 )
(declare-sort A_b_llist_fun$ 0 )
(declare-sort A_c_llist_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_c_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort C_b_bool_fun_fun$ 0 )
(declare-sort C_c_bool_fun_fun$ 0 )
(declare-sort C_llist_bool_fun$ 0 )
(declare-sort B_llist_set_b_llist_fun$ 0 )
(declare-sort C_llist_set_c_llist_fun$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort C_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort A_a_bool_fun_fun_a_bool_fun_fun$ 0 )
(declare-sort B_llist$ 0)
(declare-sort C_llist$ 0)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-fun lNil$a ()C_llist$)
(declare-fun lhd$a (C_llist$)C$)
(declare-fun ltl$a (C_llist$)C_llist$)
(declare-fun lCons$a (C$ C_llist$ )C_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun f$ ()A_b_llist_fun$ )
(declare-fun g$ ()A_c_llist_fun$ )
(declare-fun p$ ()B_c_bool_fun_fun$ )
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun lub$ ()A_set_a_fun$ )
(declare-fun ord$ ()A_a_bool_fun_fun$ )
(declare-fun uua$ (C_c_bool_fun_fun$ C_c_bool_fun_fun$ )C_c_bool_fun_fun$ )
(declare-fun uub$ (C_b_bool_fun_fun$ C_b_bool_fun_fun$ )C_b_bool_fun_fun$ )
(declare-fun uuc$ (B_b_bool_fun_fun$ B_b_bool_fun_fun$ )B_b_bool_fun_fun$ )
(declare-fun uud$ (B_c_bool_fun_fun$ B_c_bool_fun_fun$ )B_c_bool_fun_fun$ )
(declare-fun uue$ ()C_c_bool_fun_fun$ )
(declare-fun uuf$ ()C_llist_c_llist_bool_fun_fun$ )
(declare-fun uug$ ()B_b_bool_fun_fun$ )
(declare-fun uuh$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun uui$ (Bool )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uuj$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uuk$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uul$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uum$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uun$ (Bool )A_bool_fun$ )
(declare-fun uuo$ ()A_bool_fun$ )
(declare-fun uup$ ()B_b_bool_fun_fun$ )
(declare-fun uuq$ ()C_b_bool_fun_fun$ )
(declare-fun uur$ ()C_c_bool_fun_fun$ )
(declare-fun uus$ ()B_c_bool_fun_fun$ )
(declare-fun uut$ (A_a_bool_fun_fun$ )A_a_bool_fun_fun$ )
(declare-fun uuu$ (A$ )A_bool_fun$ )
(declare-fun uuv$ (A$ )A_bool_fun$ )
(declare-fun lSup$ ()C_llist_set_c_llist_fun$ )
(declare-fun lSup$a ()B_llist_set_b_llist_fun$ )
(declare-fun mcont$ (A_set_a_fun$ A_a_bool_fun_fun$ C_llist_set_c_llist_fun$ C_llist_c_llist_bool_fun_fun$ A_c_llist_fun$ )Bool )
(declare-fun mcont$a (A_set_a_fun$ A_a_bool_fun_fun$ B_llist_set_b_llist_fun$ B_llist_b_llist_bool_fun_fun$ A_b_llist_fun$ )Bool )
(declare-fun compact$ (A_set_a_fun$ )A_a_bool_fun_fun_a_bool_fun_fun$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun llength$ (B_llist$ )Enat$ )
(declare-fun lprefix$ ()C_llist_c_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_b_llist_fun$ A$ )B_llist$ )
(declare-fun fun_app$b (A_c_llist_fun$ A$ )C_llist$ )
(declare-fun fun_app$c (C_llist_bool_fun$ C_llist$ )Bool )
(declare-fun fun_app$d (C_llist_c_llist_bool_fun_fun$ C_llist$ )C_llist_bool_fun$ )
(declare-fun fun_app$e (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$f (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$g (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$h (C_c_bool_fun_fun$ C$ )C_bool_fun$ )
(declare-fun fun_app$i (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$j (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$k (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun fun_app$l (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$m (C_b_bool_fun_fun$ C$ )B_bool_fun$ )
(declare-fun fun_app$n (B_c_bool_fun_fun$ B$ )C_bool_fun$ )
(declare-fun fun_app$o (A_a_bool_fun_fun_a_bool_fun_fun$ A_a_bool_fun_fun$ )A_bool_fun$ )
(declare-fun llength$a (C_llist$ )Enat$ )
(declare-fun lprefix$a ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun admissible$ (A_set_a_fun$ A_a_bool_fun_fun$ A_bool_fun$ )Bool )
(declare-fun llist_all2$ (B_c_bool_fun_fun$ B_llist$ C_llist$ )Bool )
(declare-fun llist_all2$a (C_c_bool_fun_fun$ )C_llist_c_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (C_b_bool_fun_fun$ C_llist$ B_llist$ )Bool )
(declare-fun llist_all2$c (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(llist_all2$ p$ (fun_app$a f$ ?v0 )(fun_app$b g$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(! (= (fun_app$c (fun_app$d uuf$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$c (fun_app$d uuf$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$e (fun_app$f uuh$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$e (fun_app$f uuh$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 C$ )(?v1 C$ ))(! (= (fun_app$g (fun_app$h uue$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$g (fun_app$h uue$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$i (fun_app$j uug$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$i (fun_app$j uug$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$ (uuu$ ?v0 )?v1 )(not (= ?v0 ?v1 ))):pattern ((fun_app$ (uuu$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$ (uuv$ ?v0 )?v1 )(not (= ?v1 ?v0 ))):pattern ((fun_app$ (uuv$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$k (uuj$ ?v0 )?v1 )?v2 )(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$k (uuj$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$k (uuk$ ?v0 )?v1 )?v2 )(=> (fun_app$ ?v1 ?v2 )(fun_app$ ?v0 ?v2 ))):pattern ((fun_app$ (fun_app$k (uuk$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$k (uum$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$k (uum$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$k (uul$ ?v0 )?v1 )?v2 )(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$k (uul$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 Bool )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$k (uui$ ?v0 )?v1 )?v2 )(=> ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$k (uui$ ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$l (uut$ ?v0 )?v1 )?v2 )(not (fun_app$ (fun_app$l ?v0 ?v1 )?v2 ))):pattern ((fun_app$ (fun_app$l (uut$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 C$ )(?v3 C$ ))(! (= (fun_app$g (fun_app$h (uua$ ?v0 ?v1 )?v2 )?v3 )(and (fun_app$g (fun_app$h ?v0 ?v2 )?v3 )(fun_app$g (fun_app$h ?v1 ?v2 )?v3 ))):pattern ((fun_app$g (fun_app$h (uua$ ?v0 ?v1 )?v2 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_b_bool_fun_fun$ )(?v2 C$ )(?v3 B$ ))(! (= (fun_app$i (fun_app$m (uub$ ?v0 ?v1 )?v2 )?v3 )(and (fun_app$i (fun_app$m ?v0 ?v2 )?v3 )(fun_app$i (fun_app$m ?v1 ?v2 )?v3 ))):pattern ((fun_app$i (fun_app$m (uub$ ?v0 ?v1 )?v2 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B_c_bool_fun_fun$ )(?v2 B$ )(?v3 C$ ))(! (= (fun_app$g (fun_app$n (uud$ ?v0 ?v1 )?v2 )?v3 )(and (fun_app$g (fun_app$n ?v0 ?v2 )?v3 )(fun_app$g (fun_app$n ?v1 ?v2 )?v3 ))):pattern ((fun_app$g (fun_app$n (uud$ ?v0 ?v1 )?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B$ )(?v3 B$ ))(! (= (fun_app$i (fun_app$j (uuc$ ?v0 ?v1 )?v2 )?v3 )(and (fun_app$i (fun_app$j ?v0 ?v2 )?v3 )(fun_app$i (fun_app$j ?v1 ?v2 )?v3 ))):pattern ((fun_app$i (fun_app$j (uuc$ ?v0 ?v1 )?v2 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 Bool )(?v1 A$ ))(! (= (fun_app$ (uun$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (uun$ ?v0 )?v1 )))):named a17 ))
(assert (! (forall ((?v0 C$ )(?v1 C$ ))(! (= (fun_app$g (fun_app$h uur$ ?v0 )?v1 )true ):pattern ((fun_app$g (fun_app$h uur$ ?v0 )?v1 )))):named a18 ))
(assert (! (forall ((?v0 C$ )(?v1 B$ ))(! (= (fun_app$i (fun_app$m uuq$ ?v0 )?v1 )true ):pattern ((fun_app$i (fun_app$m uuq$ ?v0 )?v1 )))):named a19 ))
(assert (! (forall ((?v0 B$ )(?v1 C$ ))(! (= (fun_app$g (fun_app$n uus$ ?v0 )?v1 )true ):pattern ((fun_app$g (fun_app$n uus$ ?v0 )?v1 )))):named a20 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$i (fun_app$j uup$ ?v0 )?v1 )true ):pattern ((fun_app$i (fun_app$j uup$ ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uuo$ ?v0 )true ):pattern ((fun_app$ uuo$ ?v0 )))):named a22 ))
(assert (! (not (admissible$ lub$ ord$ uu$ )):named a23 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_c_bool_fun_fun$ )(?v2 C_llist$ )(?v3 C_llist$ ))(= (fun_app$c (fun_app$d (llist_all2$a (uua$ ?v0 ?v1 ))?v2 )?v3 )(and (fun_app$c (fun_app$d (llist_all2$a ?v0 )?v2 )?v3 )(fun_app$c (fun_app$d (llist_all2$a ?v1 )?v2 )?v3 )))):named a24 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_b_bool_fun_fun$ )(?v2 C_llist$ )(?v3 B_llist$ ))(= (llist_all2$b (uub$ ?v0 ?v1 )?v2 ?v3 )(and (llist_all2$b ?v0 ?v2 ?v3 )(llist_all2$b ?v1 ?v2 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B_llist$ )(?v3 B_llist$ ))(= (fun_app$e (fun_app$f (llist_all2$c (uuc$ ?v0 ?v1 ))?v2 )?v3 )(and (fun_app$e (fun_app$f (llist_all2$c ?v0 )?v2 )?v3 )(fun_app$e (fun_app$f (llist_all2$c ?v1 )?v2 )?v3 )))):named a26 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B_c_bool_fun_fun$ )(?v2 B_llist$ )(?v3 C_llist$ ))(= (llist_all2$ (uud$ ?v0 ?v1 )?v2 ?v3 )(and (llist_all2$ ?v0 ?v2 ?v3 )(llist_all2$ ?v1 ?v2 ?v3 )))):named a27 ))
(assert (! (= (llist_all2$a uue$ )uuf$ ):named a28 ))
(assert (! (= (llist_all2$c uug$ )uuh$ ):named a29 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ )(?v3 C_c_bool_fun_fun$ ))(=> (and (fun_app$c (fun_app$d (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 C$ )(?v5 C$ ))(=> (fun_app$g (fun_app$h ?v0 ?v4 )?v5 )(fun_app$g (fun_app$h ?v3 ?v4 )?v5 ))))(fun_app$c (fun_app$d (llist_all2$a ?v3 )?v1 )?v2 ))):named a30 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 C_llist$ )(?v2 B_llist$ )(?v3 C_b_bool_fun_fun$ ))(=> (and (llist_all2$b ?v0 ?v1 ?v2 )(forall ((?v4 C$ )(?v5 B$ ))(=> (fun_app$i (fun_app$m ?v0 ?v4 )?v5 )(fun_app$i (fun_app$m ?v3 ?v4 )?v5 ))))(llist_all2$b ?v3 ?v1 ?v2 ))):named a31 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$e (fun_app$f (llist_all2$c ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 B$ ))(=> (fun_app$i (fun_app$j ?v0 ?v4 )?v5 )(fun_app$i (fun_app$j ?v3 ?v4 )?v5 ))))(fun_app$e (fun_app$f (llist_all2$c ?v3 )?v1 )?v2 ))):named a32 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B_llist$ )(?v2 C_llist$ )(?v3 B_c_bool_fun_fun$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(forall ((?v4 B$ )(?v5 C$ ))(=> (fun_app$g (fun_app$n ?v0 ?v4 )?v5 )(fun_app$g (fun_app$n ?v3 ?v4 )?v5 ))))(llist_all2$ ?v3 ?v1 ?v2 ))):named a33 ))
(assert (! (mcont$ lub$ ord$ lSup$ lprefix$ g$ ):named a34 ))
(assert (! (mcont$a lub$ ord$ lSup$a lprefix$a f$ ):named a35 ))
(assert (! (forall ((?v0 Bool )(?v1 A_set_a_fun$ )(?v2 A_a_bool_fun_fun$ )(?v3 A_bool_fun$ ))(=> (=> ?v0 (admissible$ ?v1 ?v2 ?v3 ))(admissible$ ?v1 ?v2 (fun_app$k (uui$ ?v0 )?v3 )))):named a36 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (admissible$ ?v0 ?v1 (fun_app$k (uuj$ ?v2 )?v3 ))(admissible$ ?v0 ?v1 (fun_app$k (uuk$ ?v2 )?v3 )))(admissible$ ?v0 ?v1 (fun_app$k (uul$ ?v2 )?v3 )))):named a37 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (admissible$ ?v0 ?v1 ?v2 )(admissible$ ?v0 ?v1 ?v3 ))(admissible$ ?v0 ?v1 (fun_app$k (uum$ ?v2 )?v3 )))):named a38 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 Bool ))(admissible$ ?v0 ?v1 (uun$ ?v2 ))):named a39 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ ))(admissible$ ?v0 ?v1 uuo$ )):named a40 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (fun_app$e (fun_app$f (llist_all2$c uup$ )?v0 )?v1 )(= (llength$ ?v0 )(llength$ ?v1 )))):named a41 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 B_llist$ ))(= (llist_all2$b uuq$ ?v0 ?v1 )(= (llength$a ?v0 )(llength$ ?v1 )))):named a42 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(= (fun_app$c (fun_app$d (llist_all2$a uur$ )?v0 )?v1 )(= (llength$a ?v0 )(llength$a ?v1 )))):named a43 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 C_llist$ ))(= (llist_all2$ uus$ ?v0 ?v1 )(= (llength$ ?v0 )(llength$a ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A$ ))(= (fun_app$ (fun_app$o (compact$ ?v0 )?v1 )?v2 )(and (admissible$ ?v0 ?v1 (fun_app$l (uut$ ?v1 )?v2 ))(admissible$ ?v0 ?v1 (uuu$ ?v2 ))))):named a45 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$o (compact$ ?v0 )?v1 )?v2 )(=> (and (admissible$ ?v0 ?v1 (fun_app$l (uut$ ?v1 )?v2 ))(admissible$ ?v0 ?v1 (uuu$ ?v2 )))false ))false )):named a46 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A$ ))(=> (fun_app$ (fun_app$o (compact$ ?v0 )?v1 )?v2 )(admissible$ ?v0 ?v1 (uuv$ ?v2 )))):named a47 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A$ ))(=> (fun_app$ (fun_app$o (compact$ ?v0 )?v1 )?v2 )(admissible$ ?v0 ?v1 (uuu$ ?v2 )))):named a48 ))
(assert (! (forall ((?v0 C_llist$ ))(fun_app$c (fun_app$d lprefix$ ?v0 )?v0 )):named a49 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$e (fun_app$f lprefix$a ?v0 )?v0 )):named a50 ))
(assert (! (forall ((?v0 C_llist$ ))(fun_app$c (fun_app$d lprefix$ ?v0 )?v0 )):named a51 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$e (fun_app$f lprefix$a ?v0 )?v0 )):named a52 ))
(check-sat )
;(get-unsat-core )
