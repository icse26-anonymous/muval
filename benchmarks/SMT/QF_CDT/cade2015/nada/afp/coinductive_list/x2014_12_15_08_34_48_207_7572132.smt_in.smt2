;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Nat_llist$ 0)
(declare-fun lNil$ ()Nat_llist$)
(declare-fun lhd$ (Nat_llist$)Nat$)
(declare-fun ltl$ (Nat_llist$)Nat_llist$)
(declare-fun lCons$ (Nat$ Nat_llist$ )Nat_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun k$ ()Nat$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun ldrop$ (Enat$ Nat_llist$ )Nat_llist$ )
(declare-fun zero$a ()Enat$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$b (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun iterates$ (Nat_nat_fun$ Nat$ )Nat_llist$ )
(assert (! (not (= (ldrop$ (enat$ k$ )(iterates$ suc$ zero$ ))(iterates$ suc$ k$ ))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ suc$ ?v0 )(fun_app$ suc$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ suc$ ?v0 )(fun_app$ suc$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$ suc$ ?v1 ))false )))false )):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$ suc$ ?v1 ))false )))false )):named a5 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$a (fun_app$b ?v0 ?v3 )zero$ ))(and (forall ((?v3 Nat$ ))(fun_app$a (fun_app$b ?v0 zero$ )(fun_app$ suc$ ?v3 )))(forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (fun_app$a (fun_app$b ?v0 ?v3 )?v4 )(fun_app$a (fun_app$b ?v0 (fun_app$ suc$ ?v3 ))(fun_app$ suc$ ?v4 ))))))(fun_app$a (fun_app$b ?v0 ?v1 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= (fun_app$ suc$ ?v0 )zero$ )false )):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 (fun_app$ suc$ ?v1 ))(not (= ?v0 zero$ )))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= zero$ (fun_app$ suc$ ?v0 ))false )):named a9 ))
(assert (! (forall ((?v0 Nat_llist$ ))(= (ldrop$ zero$a ?v0 )?v0 )):named a10 ))
(assert (! (= zero$a (enat$ zero$ )):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$a (enat$ ?v0 ))(= ?v0 zero$ ))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(= (= (enat$ ?v0 )zero$a )(= ?v0 zero$ ))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a14 ))
(assert (! (forall ((?v0 Enat$ ))(= (= zero$a ?v0 )(= ?v0 zero$a ))):named a15 ))
(check-sat )
;(get-unsat-core )
