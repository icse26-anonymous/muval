;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun lstrict_prefix$ (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (fun_app$ (less$ (llength$ (ltakeWhile$ p$ xs$ )))(llength$ xs$ ))):named a0 ))
(assert (! (not (= (ltakeWhile$ p$ xs$ )xs$ )):named a1 ))
(assert (! (exists ((?v0 A$ ))(and (member$ ?v0 (lset$ xs$ ))(not (fun_app$a p$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (llength$ (ltakeWhile$ ?v0 ?v1 ))(llength$ ?v1 ))(= (ltakeWhile$ ?v0 ?v1 )?v1 ))):named a3 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (fun_app$b (lstrict_prefix$ ?v0 )?v1 )(fun_app$ (less$ (llength$ ?v0 ))(llength$ ?v1 )))):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$ (less$ ?v0 )?v1 )(fun_app$ (less$ ?v1 )?v0 )))):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (fun_app$ (less$ ?v0 )?v1 ))(or (fun_app$ (less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (=> (fun_app$ (less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$ (less$ ?v1 )?v0 )false )))false )):named a8 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat_enat_fun$ )(?v2 Enat$ )(?v3 Enat$ ))(=> (and (= ?v0 (fun_app$c ?v1 ?v2 ))(and (fun_app$ (less$ ?v2 )?v3 )(forall ((?v4 Enat$ )(?v5 Enat$ ))(=> (fun_app$ (less$ ?v4 )?v5 )(fun_app$ (less$ (fun_app$c ?v1 ?v4 ))(fun_app$c ?v1 ?v5 ))))))(fun_app$ (less$ ?v0 )(fun_app$c ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (less$ ?v1 )?v2 ))(fun_app$ (less$ ?v0 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (fun_app$ (less$ ?v0 )?v1 )(=> (not false )(fun_app$ (less$ ?v1 )?v0 )))false )):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat_enat_fun$ )(?v3 Enat$ ))(=> (and (fun_app$ (less$ ?v0 )?v1 )(and (= (fun_app$c ?v2 ?v1 )?v3 )(forall ((?v4 Enat$ )(?v5 Enat$ ))(=> (fun_app$ (less$ ?v4 )?v5 )(fun_app$ (less$ (fun_app$c ?v2 ?v4 ))(fun_app$c ?v2 ?v5 ))))))(fun_app$ (less$ (fun_app$c ?v2 ?v0 ))?v3 ))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (fun_app$ (less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (less$ ?v0 )?v2 ))):named a14 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (forall ((?v2 A_llist$ ))(=> (forall ((?v3 A_llist$ ))(=> (fun_app$b (lstrict_prefix$ ?v3 )?v2 )(fun_app$b ?v0 ?v3 )))(fun_app$b ?v0 ?v2 )))(fun_app$b ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (ltakeWhile$ ?v1 ?v2 )))(and (member$ ?v0 (lset$ ?v2 ))(fun_app$a ?v1 ?v0 )))):named a16 ))
(check-sat )
;(get-unsat-core )
