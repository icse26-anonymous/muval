;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun y$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun zs$ ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()A_llist$ )
(declare-fun zsa$ ()A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (= xsa$ (lappend$ ?v0 (lCons$ y$ ?v1 )))(and (lfinite$ ?v0 )(and (fun_app$ p$ y$ )(and (forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v0 ))(not (fun_app$ p$ ?v2 ))))(= (lfilter$ p$ ?v1 )(lappend$ ysa$ zsa$ ))))))thesis$ )):named a1 ))
(assert (! (lfinite$ ys$ ):named a2 ))
(assert (! (lfinite$ ysa$ ):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v0 ?v1 ))(lfilter$ ?v0 ?v1 ))):named a5 ))
(assert (! (exists ((?v0 A_llist$ )(?v1 A_llist$ ))(and (= xsa$ (lappend$ ?v0 (lCons$ y$ ?v1 )))(and (lfinite$ ?v0 )(and (forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v0 ))(not (fun_app$ p$ ?v2 ))))(and (fun_app$ p$ y$ )(= (lappend$ ysa$ zsa$ )(lfilter$ p$ ?v1 ))))))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (= (lfilter$ p$ ?v0 )(lappend$ ysa$ ?v1 ))(exists ((?v2 A_llist$ )(?v3 A_llist$ ))(and (= ?v0 (lappend$ ?v2 ?v3 ))(and (lfinite$ ?v2 )(and (= ysa$ (lfilter$ p$ ?v2 ))(= ?v1 (lfilter$ p$ ?v3 )))))))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$ (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$ ?v0 ?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (lappend$ ?v0 ?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (lfilter$ ?v0 (lCons$ ?v1 ?v2 ))(ite (fun_app$ ?v0 ?v1 )(lCons$ ?v1 (lfilter$ ?v0 ?v2 ))(lfilter$ ?v0 ?v2 ))):pattern ((lfilter$ ?v0 (lCons$ ?v1 ?v2 ))))):named a12 ))
(assert (! (= (lfilter$ p$ xs$ )(lappend$ ys$ zs$ )):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (lfinite$ ?v0 )(= (lfilter$ ?v1 (lappend$ ?v0 ?v2 ))(lappend$ (lfilter$ ?v1 ?v0 )(lfilter$ ?v1 ?v2 ))))):named a14 ))
(assert (! (= (lfilter$ p$ xsa$ )(lappend$ (lCons$ y$ ysa$ )zsa$ )):named a15 ))
(assert (! (= (lfilter$ p$ xsa$ )(lCons$ y$ (lappend$ ysa$ zsa$ ))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (member$ ?v0 (lset$ (lappend$ ?v1 ?v2 )))(or (member$ ?v0 (lset$ ?v1 ))(and (lfinite$ ?v1 )(member$ ?v0 (lset$ ?v2 )))))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a18 ))
(check-sat )
;(get-unsat-core )
