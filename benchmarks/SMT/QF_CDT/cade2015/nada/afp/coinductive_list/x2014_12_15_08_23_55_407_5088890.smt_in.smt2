;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort A_a_prod_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_a_a_a_prod_prod_fun$ 0 )
(declare-sort A_a_a_prod_a_prod_fun$ 0 )
(declare-sort A_a_a_prod_prod_a_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_prod_a_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_prod_a_fun$ 0 )
(declare-sort A_a_prod_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$ 0 )
(declare-sort A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_a_prod$ 0)
(declare-sort A_a_prod_a_a_prod_prod$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun fst$ (A_a_prod$)A$)
(declare-fun snd$ (A_a_prod$)A$)
(declare-fun pair$ (A$ A$ )A_a_prod$)
(declare-fun fst$a (A_a_prod_a_a_prod_prod$)A_a_prod$)
(declare-fun snd$a (A_a_prod_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$a (A_a_prod$ A_a_prod$ )A_a_prod_a_a_prod_prod$)
(declare-sort A_a_prod_a_a_prod_prod_llist$ 0)
(declare-fun lNil$a ()A_a_prod_a_a_prod_prod_llist$)
(declare-fun lhd$a (A_a_prod_a_a_prod_prod_llist$)A_a_prod_a_a_prod_prod$)
(declare-fun ltl$a (A_a_prod_a_a_prod_prod_llist$)A_a_prod_a_a_prod_prod_llist$)
(declare-fun lCons$a (A_a_prod_a_a_prod_prod$ A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_llist$)
(declare-sort A_a_prod_a_prod$ 0)
(declare-fun fst$b (A_a_prod_a_prod$)A_a_prod$)
(declare-fun snd$b (A_a_prod_a_prod$)A$)
(declare-fun pair$b (A_a_prod$ A$ )A_a_prod_a_prod$)
(declare-sort A_a_prod_a_prod_llist$ 0)
(declare-fun lNil$b ()A_a_prod_a_prod_llist$)
(declare-fun lhd$b (A_a_prod_a_prod_llist$)A_a_prod_a_prod$)
(declare-fun ltl$b (A_a_prod_a_prod_llist$)A_a_prod_a_prod_llist$)
(declare-fun lCons$b (A_a_prod_a_prod$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$)
(declare-sort A_a_a_prod_prod$ 0)
(declare-fun fst$c (A_a_a_prod_prod$)A$)
(declare-fun snd$c (A_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$c (A$ A_a_prod$ )A_a_a_prod_prod$)
(declare-sort A_a_a_prod_prod_llist$ 0)
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$c ()A_a_a_prod_prod_llist$)
(declare-fun lhd$c (A_a_a_prod_prod_llist$)A_a_a_prod_prod$)
(declare-fun ltl$c (A_a_a_prod_prod_llist$)A_a_a_prod_prod_llist$)
(declare-fun lCons$c (A_a_a_prod_prod$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$)
(declare-fun lNil$d ()A_a_prod_llist$)
(declare-fun lhd$d (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$d (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$d (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-sort A_a_a_prod_a_prod_prod$ 0)
(declare-fun fst$d (A_a_a_prod_a_prod_prod$)A$)
(declare-fun snd$d (A_a_a_prod_a_prod_prod$)A_a_prod_a_prod$)
(declare-fun pair$d (A$ A_a_prod_a_prod$ )A_a_a_prod_a_prod_prod$)
(declare-sort A_a_a_prod_a_prod_prod_llist$ 0)
(declare-fun lNil$e ()A_a_a_prod_a_prod_prod_llist$)
(declare-fun lhd$e (A_a_a_prod_a_prod_prod_llist$)A_a_a_prod_a_prod_prod$)
(declare-fun ltl$e (A_a_a_prod_a_prod_prod_llist$)A_a_a_prod_a_prod_prod_llist$)
(declare-fun lCons$e (A_a_a_prod_a_prod_prod$ A_a_a_prod_a_prod_prod_llist$ )A_a_a_prod_a_prod_prod_llist$)
(declare-sort A_a_a_a_prod_prod_prod$ 0)
(declare-fun fst$e (A_a_a_a_prod_prod_prod$)A$)
(declare-fun snd$e (A_a_a_a_prod_prod_prod$)A_a_a_prod_prod$)
(declare-fun pair$e (A$ A_a_a_prod_prod$ )A_a_a_a_prod_prod_prod$)
(declare-sort A_a_a_a_prod_prod_prod_llist$ 0)
(declare-fun lNil$f ()A_a_a_a_prod_prod_prod_llist$)
(declare-fun lhd$f (A_a_a_a_prod_prod_prod_llist$)A_a_a_a_prod_prod_prod$)
(declare-fun ltl$f (A_a_a_a_prod_prod_prod_llist$)A_a_a_a_prod_prod_prod_llist$)
(declare-fun lCons$f (A_a_a_a_prod_prod_prod$ A_a_a_a_prod_prod_prod_llist$ )A_a_a_a_prod_prod_prod_llist$)
(declare-sort A_a_prod_a_prod_a_prod$ 0)
(declare-fun fst$f (A_a_prod_a_prod_a_prod$)A_a_prod_a_prod$)
(declare-fun snd$f (A_a_prod_a_prod_a_prod$)A$)
(declare-fun pair$f (A_a_prod_a_prod$ A$ )A_a_prod_a_prod_a_prod$)
(declare-sort A_a_prod_a_prod_a_prod_llist$ 0)
(declare-fun lNil$g ()A_a_prod_a_prod_a_prod_llist$)
(declare-fun lhd$g (A_a_prod_a_prod_a_prod_llist$)A_a_prod_a_prod_a_prod$)
(declare-fun ltl$g (A_a_prod_a_prod_a_prod_llist$)A_a_prod_a_prod_a_prod_llist$)
(declare-fun lCons$g (A_a_prod_a_prod_a_prod$ A_a_prod_a_prod_a_prod_llist$ )A_a_prod_a_prod_a_prod_llist$)
(declare-sort A_a_a_prod_prod_a_prod$ 0)
(declare-fun fst$g (A_a_a_prod_prod_a_prod$)A_a_a_prod_prod$)
(declare-fun snd$g (A_a_a_prod_prod_a_prod$)A$)
(declare-fun pair$g (A_a_a_prod_prod$ A$ )A_a_a_prod_prod_a_prod$)
(declare-sort A_a_a_prod_prod_a_prod_llist$ 0)
(declare-fun lNil$h ()A_a_a_prod_prod_a_prod_llist$)
(declare-fun lhd$h (A_a_a_prod_prod_a_prod_llist$)A_a_a_prod_prod_a_prod$)
(declare-fun ltl$h (A_a_a_prod_prod_a_prod_llist$)A_a_a_prod_prod_a_prod_llist$)
(declare-fun lCons$h (A_a_a_prod_prod_a_prod$ A_a_a_prod_prod_a_prod_llist$ )A_a_a_prod_prod_a_prod_llist$)
(declare-sort A_a_a_prod_a_a_prod_prod_prod$ 0)
(declare-fun fst$h (A_a_a_prod_a_a_prod_prod_prod$)A$)
(declare-fun snd$h (A_a_a_prod_a_a_prod_prod_prod$)A_a_prod_a_a_prod_prod$)
(declare-fun pair$h (A$ A_a_prod_a_a_prod_prod$ )A_a_a_prod_a_a_prod_prod_prod$)
(declare-sort A_a_a_prod_a_a_prod_prod_prod_llist$ 0)
(declare-fun lNil$i ()A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lhd$i (A_a_a_prod_a_a_prod_prod_prod_llist$)A_a_a_prod_a_a_prod_prod_prod$)
(declare-fun ltl$i (A_a_a_prod_a_a_prod_prod_prod_llist$)A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lCons$i (A_a_a_prod_a_a_prod_prod_prod$ A_a_a_prod_a_a_prod_prod_prod_llist$ )A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-sort A_a_prod_a_a_prod_a_prod_prod$ 0)
(declare-fun fst$i (A_a_prod_a_a_prod_a_prod_prod$)A_a_prod$)
(declare-fun snd$i (A_a_prod_a_a_prod_a_prod_prod$)A_a_prod_a_prod$)
(declare-fun pair$i (A_a_prod$ A_a_prod_a_prod$ )A_a_prod_a_a_prod_a_prod_prod$)
(declare-sort A_a_prod_a_a_prod_a_prod_prod_llist$ 0)
(declare-fun lNil$j ()A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun lhd$j (A_a_prod_a_a_prod_a_prod_prod_llist$)A_a_prod_a_a_prod_a_prod_prod$)
(declare-fun ltl$j (A_a_prod_a_a_prod_a_prod_prod_llist$)A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun lCons$j (A_a_prod_a_a_prod_a_prod_prod$ A_a_prod_a_a_prod_a_prod_prod_llist$ )A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lzip$ (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun zero$ ()Enat$ )
(declare-fun ldrop$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun lmap$a (A_a_prod_a_fun$ A_a_prod_llist$ )A_llist$ )
(declare-fun lmap$b (A_a_a_prod_fun$ A_llist$ )A_a_prod_llist$ )
(declare-fun lmap$c (A_a_prod_a_a_prod_fun$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun lmap$d (A_a_prod_a_prod_a_fun$ A_a_prod_a_prod_llist$ )A_llist$ )
(declare-fun lmap$e (A_a_a_prod_prod_a_fun$ A_a_a_prod_prod_llist$ )A_llist$ )
(declare-fun lmap$f (A_a_a_prod_a_prod_fun$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lmap$g (A_a_a_a_prod_prod_fun$ A_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lmap$h (A_a_prod_a_a_prod_prod_a_fun$ A_a_prod_a_a_prod_prod_llist$ )A_llist$ )
(declare-fun lmap$i (A_a_prod_a_prod_a_a_prod_fun$ A_a_prod_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun lzip$a (A_llist$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lzip$b (A_a_prod_llist$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lzip$c (A_a_prod_llist$ A_a_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun lzip$d (A_llist$ A_a_prod_a_prod_llist$ )A_a_a_prod_a_prod_prod_llist$ )
(declare-fun lzip$e (A_llist$ A_a_a_prod_prod_llist$ )A_a_a_a_prod_prod_prod_llist$ )
(declare-fun lzip$f (A_a_prod_a_prod_llist$ A_llist$ )A_a_prod_a_prod_a_prod_llist$ )
(declare-fun lzip$g (A_a_a_prod_prod_llist$ A_llist$ )A_a_a_prod_prod_a_prod_llist$ )
(declare-fun lzip$h (A_llist$ A_a_prod_a_a_prod_prod_llist$ )A_a_a_prod_a_a_prod_prod_prod_llist$ )
(declare-fun lzip$i (A_a_prod_llist$ A_a_prod_a_prod_llist$ )A_a_prod_a_a_prod_a_prod_prod_llist$ )
(declare-fun ldrop$a (Enat$ )A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ )
(declare-fun ldrop$b (Enat$ )A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$ )
(declare-fun ldrop$c (Enat$ )A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$ )
(declare-fun ldrop$d (Enat$ )A_a_prod_llist_a_a_prod_llist_fun$ )
(declare-fun ldrop$e (Enat$ A_a_a_prod_a_prod_prod_llist$ )A_a_a_prod_a_prod_prod_llist$ )
(declare-fun ldrop$f (Enat$ A_a_a_a_prod_prod_prod_llist$ )A_a_a_a_prod_prod_prod_llist$ )
(declare-fun ldrop$g (Enat$ A_a_prod_a_prod_a_prod_llist$ )A_a_prod_a_prod_a_prod_llist$ )
(declare-fun ldrop$h (Enat$ A_a_a_prod_prod_a_prod_llist$ )A_a_a_prod_prod_a_prod_llist$ )
(declare-fun ldrop$i (Enat$ A_a_a_prod_a_a_prod_prod_prod_llist$ )A_a_a_prod_a_a_prod_prod_prod_llist$ )
(declare-fun ldrop$j (Enat$ A_a_prod_a_a_prod_a_prod_prod_llist$ )A_a_prod_a_a_prod_a_prod_prod_llist$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$b (A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun fun_app$c (A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun fun_app$d (A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun fun_app$e (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun fun_app$f (A_bool_fun$ A$ )Bool )
(declare-fun lappend$a (A_a_prod_llist$ )A_a_prod_llist_a_a_prod_llist_fun$ )
(declare-fun llength$a (A_a_prod_llist$ )Enat$ )
(declare-fun ldropWhile$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun ltakeWhile$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun ldropWhile$a (A_a_prod_bool_fun$ )A_a_prod_llist_a_a_prod_llist_fun$ )
(declare-fun ltakeWhile$a (A_a_prod_bool_fun$ )A_a_prod_llist_a_a_prod_llist_fun$ )
(assert (! (not (= (fun_app$ (ldropWhile$ p$ )xs$ )(fun_app$ (ldrop$ (llength$ (fun_app$ (ltakeWhile$ p$ )xs$ )))xs$ ))):named a0 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (llength$ (fun_app$ (ltakeWhile$ ?v0 )?v1 ))(llength$ ?v1 ))(= (fun_app$ (ltakeWhile$ ?v0 )?v1 )?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$ (lappend$ (fun_app$ (ltakeWhile$ ?v0 )?v1 ))(fun_app$ (ldropWhile$ ?v0 )?v1 ))?v1 )):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(less_eq$ (llength$ (fun_app$ (ltakeWhile$ ?v0 )?v1 ))(llength$ ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$ ))(= (fun_app$b (ldrop$a zero$ )?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ ))(= (fun_app$c (ldrop$b zero$ )?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(= (fun_app$d (ldrop$c zero$ )?v0 )?v0 )):named a7 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(= (fun_app$e (ldrop$d zero$ )?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$ (ldrop$ zero$ )?v0 )?v0 )):named a9 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ ))(! (= (fun_app$e (ldropWhile$a ?v0 )lNil$d )lNil$d ):pattern ((ldropWhile$a ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$ (ldropWhile$ ?v0 )lNil$ )lNil$ ):pattern ((ldropWhile$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$e (ldrop$d ?v0 )(lzip$ ?v1 ?v2 ))(lzip$ (fun_app$ (ldrop$ ?v0 )?v1 )(fun_app$ (ldrop$ ?v0 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_a_prod_llist$ ))(= (fun_app$d (ldrop$c ?v0 )(lzip$a ?v1 ?v2 ))(lzip$a (fun_app$ (ldrop$ ?v0 )?v1 )(fun_app$e (ldrop$d ?v0 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_llist$ )(?v2 A_llist$ ))(= (fun_app$c (ldrop$b ?v0 )(lzip$b ?v1 ?v2 ))(lzip$b (fun_app$e (ldrop$d ?v0 )?v1 )(fun_app$ (ldrop$ ?v0 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_llist$ ))(= (fun_app$b (ldrop$a ?v0 )(lzip$c ?v1 ?v2 ))(lzip$c (fun_app$e (ldrop$d ?v0 )?v1 )(fun_app$e (ldrop$d ?v0 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_a_prod_a_prod_llist$ ))(= (ldrop$e ?v0 (lzip$d ?v1 ?v2 ))(lzip$d (fun_app$ (ldrop$ ?v0 )?v1 )(fun_app$c (ldrop$b ?v0 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_a_a_prod_prod_llist$ ))(= (ldrop$f ?v0 (lzip$e ?v1 ?v2 ))(lzip$e (fun_app$ (ldrop$ ?v0 )?v1 )(fun_app$d (ldrop$c ?v0 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_prod_llist$ )(?v2 A_llist$ ))(= (ldrop$g ?v0 (lzip$f ?v1 ?v2 ))(lzip$f (fun_app$c (ldrop$b ?v0 )?v1 )(fun_app$ (ldrop$ ?v0 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_a_prod_prod_llist$ )(?v2 A_llist$ ))(= (ldrop$h ?v0 (lzip$g ?v1 ?v2 ))(lzip$g (fun_app$d (ldrop$c ?v0 )?v1 )(fun_app$ (ldrop$ ?v0 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_a_prod_a_a_prod_prod_llist$ ))(= (ldrop$i ?v0 (lzip$h ?v1 ?v2 ))(lzip$h (fun_app$ (ldrop$ ?v0 )?v1 )(fun_app$b (ldrop$a ?v0 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_a_prod_llist$ ))(= (ldrop$j ?v0 (lzip$i ?v1 ?v2 ))(lzip$i (fun_app$e (ldrop$d ?v0 )?v1 )(fun_app$c (ldrop$b ?v0 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_a_prod_a_a_prod_prod_llist$ ))(= (fun_app$b (ldrop$a ?v0 )(fun_app$b (ldrop$a ?v1 )?v2 ))(fun_app$b (ldrop$a (plus$ ?v0 ?v1 ))?v2 ))):named a22 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_a_prod_a_prod_llist$ ))(= (fun_app$c (ldrop$b ?v0 )(fun_app$c (ldrop$b ?v1 )?v2 ))(fun_app$c (ldrop$b (plus$ ?v0 ?v1 ))?v2 ))):named a23 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_a_a_prod_prod_llist$ ))(= (fun_app$d (ldrop$c ?v0 )(fun_app$d (ldrop$c ?v1 )?v2 ))(fun_app$d (ldrop$c (plus$ ?v0 ?v1 ))?v2 ))):named a24 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_a_prod_llist$ ))(= (fun_app$e (ldrop$d ?v0 )(fun_app$e (ldrop$d ?v1 )?v2 ))(fun_app$e (ldrop$d (plus$ ?v0 ?v1 ))?v2 ))):named a25 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(fun_app$ (ldrop$ ?v1 )?v2 ))(fun_app$ (ldrop$ (plus$ ?v0 ?v1 ))?v2 ))):named a26 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$ (ldropWhile$ ?v0 )(lCons$ ?v1 ?v2 ))(ite (fun_app$f ?v0 ?v1 )(fun_app$ (ldropWhile$ ?v0 )?v2 )(lCons$ ?v1 ?v2 ))):pattern ((fun_app$ (ldropWhile$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a27 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b (ldrop$a ?v0 )lNil$a )lNil$a ):pattern ((ldrop$a ?v0 )))):named a28 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$c (ldrop$b ?v0 )lNil$b )lNil$b ):pattern ((ldrop$b ?v0 )))):named a29 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$d (ldrop$c ?v0 )lNil$c )lNil$c ):pattern ((ldrop$c ?v0 )))):named a30 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$e (ldrop$d ?v0 )lNil$d )lNil$d ):pattern ((ldrop$d ?v0 )))):named a31 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ldrop$ ?v0 )lNil$ )lNil$ ):pattern ((ldrop$ ?v0 )))):named a32 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ ))(! (= (fun_app$e (ltakeWhile$a ?v0 )lNil$d )lNil$d ):pattern ((ltakeWhile$a ?v0 )))):named a33 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$ (ltakeWhile$ ?v0 )lNil$ )lNil$ ):pattern ((ltakeWhile$ ?v0 )))):named a34 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$ (ldrop$ ?v0 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_fun$ )(?v2 A_a_prod_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(lmap$a ?v1 ?v2 ))(lmap$a ?v1 (fun_app$e (ldrop$d ?v0 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_a_prod_fun$ )(?v2 A_llist$ ))(= (fun_app$e (ldrop$d ?v0 )(lmap$b ?v1 ?v2 ))(lmap$b ?v1 (fun_app$ (ldrop$ ?v0 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_a_prod_fun$ )(?v2 A_a_prod_llist$ ))(= (fun_app$e (ldrop$d ?v0 )(lmap$c ?v1 ?v2 ))(lmap$c ?v1 (fun_app$e (ldrop$d ?v0 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_prod_a_fun$ )(?v2 A_a_prod_a_prod_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(lmap$d ?v1 ?v2 ))(lmap$d ?v1 (fun_app$c (ldrop$b ?v0 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_a_prod_prod_a_fun$ )(?v2 A_a_a_prod_prod_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(lmap$e ?v1 ?v2 ))(lmap$e ?v1 (fun_app$d (ldrop$c ?v0 )?v2 )))):named a40 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_a_prod_a_prod_fun$ )(?v2 A_llist$ ))(= (fun_app$c (ldrop$b ?v0 )(lmap$f ?v1 ?v2 ))(lmap$f ?v1 (fun_app$ (ldrop$ ?v0 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_a_a_prod_prod_fun$ )(?v2 A_llist$ ))(= (fun_app$d (ldrop$c ?v0 )(lmap$g ?v1 ?v2 ))(lmap$g ?v1 (fun_app$ (ldrop$ ?v0 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_a_prod_prod_a_fun$ )(?v2 A_a_prod_a_a_prod_prod_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(lmap$h ?v1 ?v2 ))(lmap$h ?v1 (fun_app$b (ldrop$a ?v0 )?v2 )))):named a43 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_prod_a_a_prod_fun$ )(?v2 A_a_prod_a_prod_llist$ ))(= (fun_app$e (ldrop$d ?v0 )(lmap$i ?v1 ?v2 ))(lmap$i ?v1 (fun_app$c (ldrop$b ?v0 )?v2 )))):named a44 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod_llist$ ))(= (llength$a (lmap$c ?v0 ?v1 ))(llength$a ?v1 ))):named a45 ))
(assert (! (forall ((?v0 A_a_a_prod_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$b ?v0 ?v1 ))(llength$ ?v1 ))):named a46 ))
(assert (! (forall ((?v0 A_a_prod_a_fun$ )(?v1 A_a_prod_llist$ ))(= (llength$ (lmap$a ?v0 ?v1 ))(llength$a ?v1 ))):named a47 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$ ?v1 ))):named a48 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a49 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )(lCons$ ?v0 (fun_app$ (lappend$ ?v1 )?v2 ))):pattern ((fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )))):named a50 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (= (fun_app$e (lappend$a ?v0 )lNil$d )?v0 ):pattern ((lappend$a ?v0 )))):named a51 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a52 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (= (fun_app$e (lappend$a lNil$d )?v0 )?v0 ):pattern ((fun_app$e (lappend$a lNil$d )?v0 )))):named a53 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ lNil$ )?v0 )?v0 ):pattern ((fun_app$ (lappend$ lNil$ )?v0 )))):named a54 ))
(check-sat )
;(get-unsat-core )
