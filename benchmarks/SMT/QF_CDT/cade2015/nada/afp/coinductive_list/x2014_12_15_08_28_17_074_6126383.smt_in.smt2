;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun r$ ()A_a_bool_fun_fun$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$c (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun fun_app$d (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun gen_lset$ (A_set$ )A_llist_a_set_fun$ )
(declare-fun ldistinct$ (A_llist$ )Bool )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun finite_lprefix$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (not (= (fun_app$ (llexord$ r$ lNil$ )ys$ )true )):named a0 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(fun_app$ (llexord$ ?v0 ?v1 )?v1 )):named a1 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (forall ((?v3 A$ )(?v4 A$ ))(or (fun_app$a (fun_app$b ?v0 ?v3 )?v4 )(or (= ?v3 ?v4 )(fun_app$a (fun_app$b ?v0 ?v4 )?v3 ))))(or (fun_app$ (llexord$ ?v0 ?v1 )?v2 )(fun_app$ (llexord$ ?v0 ?v2 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (fun_app$ (llexord$ ?v0 ?v1 )?v2 )(and (fun_app$ (llexord$ ?v0 ?v2 )?v3 )(forall ((?v4 A$ )(?v5 A$ )(?v6 A$ ))(=> (and (fun_app$a (fun_app$b ?v0 ?v4 )?v5 )(fun_app$a (fun_app$b ?v0 ?v5 )?v6 ))(fun_app$a (fun_app$b ?v0 ?v4 )?v6 )))))(fun_app$ (llexord$ ?v0 ?v1 )?v3 ))):named a3 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (llexord$ ?v0 ?v1 )?v2 )(and (fun_app$ (llexord$ ?v0 ?v2 )?v1 )(forall ((?v3 A$ )(?v4 A$ ))(=> (and (fun_app$a (fun_app$b ?v0 ?v3 )?v4 )(fun_app$a (fun_app$b ?v0 ?v4 )?v3 ))false ))))(= ?v1 ?v2 ))):named a4 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(fun_app$ (llexord$ ?v0 lNil$ )?v1 )):named a5 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$c (gen_lset$ ?v0 )lNil$ )?v0 ):pattern ((gen_lset$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (finite_lprefix$ ?v0 )lNil$ )(= ?v0 lNil$ )):pattern ((finite_lprefix$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (finite_lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$ (finite_lprefix$ lNil$ )?v0 )))):named a9 ))
(assert (! (= (lstrict_prefix$ lNil$ lNil$ )false ):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_llist$ ?v0 lNil$ )):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ (llexord$ ?v0 ?v1 )?v2 )(or (exists ((?v3 A_llist$ )(?v4 A_llist$ )(?v5 A$ ))(and (= ?v1 (lCons$ ?v5 ?v3 ))(and (= ?v2 (lCons$ ?v5 ?v4 ))(fun_app$ (llexord$ ?v0 ?v3 )?v4 ))))(or (exists ((?v3 A$ )(?v4 A$ )(?v5 A_llist$ )(?v6 A_llist$ ))(and (= ?v1 (lCons$ ?v3 ?v5 ))(and (= ?v2 (lCons$ ?v4 ?v6 ))(fun_app$a (fun_app$b ?v0 ?v3 )?v4 ))))(exists ((?v3 A_llist$ ))(and (= ?v1 lNil$ )(= ?v2 ?v3 ))))))):named a12 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (llexord$ ?v0 ?v1 )?v2 )(and (forall ((?v3 A_llist$ )(?v4 A_llist$ )(?v5 A$ ))(=> (and (= ?v1 (lCons$ ?v5 ?v3 ))(and (= ?v2 (lCons$ ?v5 ?v4 ))(fun_app$ (llexord$ ?v0 ?v3 )?v4 )))false ))(and (forall ((?v3 A$ )(?v4 A$ )(?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (= ?v1 (lCons$ ?v3 ?v5 ))(and (= ?v2 (lCons$ ?v4 ?v6 ))(fun_app$a (fun_app$b ?v0 ?v3 )?v4 )))false ))(forall ((?v3 A_llist$ ))(=> (and (= ?v1 lNil$ )(= ?v2 ?v3 ))false )))))false )):named a13 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$d ?v0 ?v1 )?v2 )(forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (fun_app$ (fun_app$d ?v0 ?v4 )?v5 )(or (exists ((?v6 A_llist$ )(?v7 A_llist$ )(?v8 A$ ))(and (= ?v4 (lCons$ ?v8 ?v6 ))(and (= ?v5 (lCons$ ?v8 ?v7 ))(or (fun_app$ (fun_app$d ?v0 ?v6 )?v7 )(fun_app$ (llexord$ ?v3 ?v6 )?v7 )))))(or (exists ((?v6 A$ )(?v7 A$ )(?v8 A_llist$ )(?v9 A_llist$ ))(and (= ?v4 (lCons$ ?v6 ?v8 ))(and (= ?v5 (lCons$ ?v7 ?v9 ))(fun_app$a (fun_app$b ?v3 ?v6 )?v7 ))))(exists ((?v6 A_llist$ ))(and (= ?v4 lNil$ )(= ?v5 ?v6 ))))))))(fun_app$ (llexord$ ?v3 ?v1 )?v2 ))):named a14 ))
(assert (! (= (ldistinct$ lNil$ )true ):named a15 ))
(check-sat )
;(get-unsat-core )
