;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Enat_set$ 0 )
(declare-sort Nat_set_set$ 0 )
(declare-sort Enat_set_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Nat_set_bool_fun$ 0 )
(declare-sort Enat_set_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ (A$ )Bool )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun uua$ (Enat_set$ )Enat_set_bool_fun$ )
(declare-fun uub$ (Nat_set$ )Nat_set_bool_fun$ )
(declare-fun uuc$ (Enat$ )Enat_bool_fun$ )
(declare-fun uud$ (Nat$ )Nat_bool_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun less$a (Enat_set$ Enat_set$ )Bool )
(declare-fun less$b (Nat_set$ Nat_set$ )Bool )
(declare-fun less$c (Nat$ Nat$ )Bool )
(declare-fun finite$ (Nat_set$ )Bool )
(declare-fun member$ (Enat_set$ Enat_set_set$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun less_eq$ (Nat_set$ Nat_set$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun member$a (Nat_set$ Nat_set_set$ )Bool )
(declare-fun member$b (Enat$ Enat_set$ )Bool )
(declare-fun member$c (Nat$ Nat_set$ )Bool )
(declare-fun collect$a (Enat_set_bool_fun$ )Enat_set_set$ )
(declare-fun collect$b (Nat_set_bool_fun$ )Nat_set_set$ )
(declare-fun collect$c (Enat_bool_fun$ )Enat_set$ )
(declare-fun fun_app$a (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$b (Enat_set_bool_fun$ Enat_set$ )Bool )
(declare-fun fun_app$c (Nat_set_bool_fun$ Nat_set$ )Bool )
(declare-fun fun_app$d (Enat_enat_bool_fun_fun$ Enat$ )Enat_bool_fun$ )
(declare-fun fun_app$e (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun infinity$ ()Enat$ )
(declare-fun lessThan$ (Nat$ )Nat_set$ )
(declare-fun less_eq$a (Enat$ Enat$ )Bool )
(declare-fun less_eq$b (Nat$ Nat$ )Bool )
(declare-fun less_eq$c (Enat_set$ Enat_set$ )Bool )
(declare-fun less_eq$d (Nat_set_set$ Nat_set_set$ )Bool )
(declare-fun lessThan$a (Enat$ )Enat_set$ )
(declare-fun lessThan$b (Enat_set$ )Enat_set_set$ )
(declare-fun lessThan$c (Nat_set$ )Nat_set_set$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(and (less$ (enat$ ?v0 )(llength$ xs$ ))(p$ (lnth$ xs$ ?v0 )))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (fun_app$a (uuc$ ?v0 )?v1 )(less$ ?v1 ?v0 )):pattern ((fun_app$a (uuc$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ ))(! (= (fun_app$b (uua$ ?v0 )?v1 )(less$a ?v1 ?v0 )):pattern ((fun_app$b (uua$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(! (= (fun_app$c (uub$ ?v0 )?v1 )(less$b ?v1 ?v0 )):pattern ((fun_app$c (uub$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (uud$ ?v0 )?v1 )(less$c ?v1 ?v0 )):pattern ((fun_app$ (uud$ ?v0 )?v1 )))):named a4 ))
(assert (! (not thesis$ ):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(=> (less_eq$ (collect$ uu$ )(lessThan$ ?v0 ))thesis$ )):named a6 ))
(assert (! (not (lfinite$ xs$ )):named a7 ))
(assert (! (finite$ (collect$ uu$ )):named a8 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (less_eq$a ?v3 ?v4 )(fun_app$a (fun_app$d ?v0 ?v3 )?v4 )))(=> (fun_app$a (fun_app$d ?v0 ?v1 )?v2 )(fun_app$a (fun_app$d ?v0 ?v2 )?v1 )))(fun_app$a (fun_app$d ?v0 ?v2 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (less_eq$b ?v3 ?v4 )(fun_app$ (fun_app$e ?v0 ?v3 )?v4 )))(=> (fun_app$ (fun_app$e ?v0 ?v1 )?v2 )(fun_app$ (fun_app$e ?v0 ?v2 )?v1 )))(fun_app$ (fun_app$e ?v0 ?v2 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (less_eq$c (lessThan$a ?v0 )(lessThan$a ?v1 ))(less_eq$a ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (less_eq$ (lessThan$ ?v0 )(lessThan$ ?v1 ))(less_eq$b ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ ))(= (member$ ?v0 (lessThan$b ?v1 ))(less$a ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(= (member$a ?v0 (lessThan$c ?v1 ))(less$b ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (member$b ?v0 (lessThan$a ?v1 ))(less$ ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (member$c ?v0 (lessThan$ ?v1 ))(less$c ?v0 ?v1 ))):named a16 ))
(assert (! (or (lfinite$ xs$ )(finite$ (collect$ uu$ ))):named a17 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (lessThan$a ?v0 )(lessThan$a ?v1 ))(= ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (lessThan$ ?v0 )(lessThan$ ?v1 ))(= ?v0 ?v1 ))):named a19 ))
(assert (! (= (llength$ xs$ )infinity$ ):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 Nat_set_set$ )(?v1 Nat_set_set$ ))(=> (forall ((?v2 Nat_set$ ))(=> (member$a ?v2 ?v0 )(member$a ?v2 ?v1 )))(less_eq$d ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ ))(=> (forall ((?v2 Enat$ ))(=> (member$b ?v2 ?v0 )(member$b ?v2 ?v1 )))(less_eq$c ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(=> (forall ((?v2 Nat$ ))(=> (member$c ?v2 ?v0 )(member$c ?v2 ?v1 )))(less_eq$ ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ ))(=> (and (less_eq$c ?v0 ?v1 )(less_eq$c ?v1 ?v0 ))(= ?v0 ?v1 ))):named a25 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a26 ))
(assert (! (forall ((?v0 Enat_set$ ))(= (lessThan$b ?v0 )(collect$a (uua$ ?v0 )))):named a27 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (lessThan$c ?v0 )(collect$b (uub$ ?v0 )))):named a28 ))
(assert (! (forall ((?v0 Enat$ ))(= (lessThan$a ?v0 )(collect$c (uuc$ ?v0 )))):named a29 ))
(assert (! (forall ((?v0 Nat$ ))(= (lessThan$ ?v0 )(collect$ (uud$ ?v0 )))):named a30 ))
(assert (! (forall ((?v0 Enat_set$ ))(less_eq$c ?v0 ?v0 )):named a31 ))
(assert (! (forall ((?v0 Nat_set$ ))(less_eq$ ?v0 ?v0 )):named a32 ))
(assert (! (forall ((?v0 Enat$ ))(less_eq$a ?v0 ?v0 )):named a33 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$b ?v0 ?v0 )):named a34 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a35 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ ))(=> (and (less_eq$c ?v0 ?v1 )(not (= ?v0 ?v1 )))(less$a ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(not (= ?v0 ?v1 )))(less$b ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (less_eq$a (enat$ ?v0 )(enat$ ?v1 ))(less_eq$b ?v0 ?v1 )):pattern ((less_eq$a (enat$ ?v0 )(enat$ ?v1 ))))):named a38 ))
(check-sat )
;(get-unsat-core )
