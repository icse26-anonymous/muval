;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort Enat_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort Enat_a_llist_a_llist_fun_fun$ 0 )
(declare-sort Enat_a_llist_prod_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort Enat_a_llist_prod$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun fst$ (Enat_a_llist_prod$)Enat$)
(declare-fun snd$ (Enat_a_llist_prod$)A_llist$)
(declare-fun pair$ (Enat$ A_llist$ )Enat_a_llist_prod$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun uu$ (Enat$ )A_a_llist_a_llist_fun_fun$ )
(declare-fun uua$ ()Enat_a_llist_fun$ )
(declare-fun uub$ ()A_bool_fun$ )
(declare-fun uuc$ ()A_bool_fun$ )
(declare-fun uud$ (A_bool_fun$ A_llist$ )A_a_llist_a_llist_fun_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ldrop$ ()Enat_a_llist_a_llist_fun_fun$ )
(declare-fun ldrop$a ()Enat_a_llist_a_llist_fun_fun$ )
(declare-fun fun_app$ (Enat_a_llist_fun$ Enat$ )A_llist$ )
(declare-fun fun_ord$ (A_llist_a_llist_bool_fun_fun$ Enat_a_llist_prod_a_llist_fun$ Enat_a_llist_prod_a_llist_fun$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_a_llist_a_llist_fun_fun$ A$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$c (Enat_a_llist_a_llist_fun_fun$ Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$d (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$e (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$f (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun case_enat$ (A_llist$ Enat_a_llist_fun$ Enat$ )A_llist$ )
(declare-fun case_prod$ (Enat_a_llist_a_llist_fun_fun$ )Enat_a_llist_prod_a_llist_fun$ )
(declare-fun case_llist$ (A_llist$ A_a_llist_a_llist_fun_fun$ )A_llist_a_llist_fun$ )
(declare-fun ldropWhile$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun ltakeWhile$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ uua$ ?v0 )(fun_app$a (case_llist$ lNil$ (uu$ ?v0 ))xsa$ )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A$ ))(! (= (fun_app$b (uu$ ?v0 )?v1 )(fun_app$c ldrop$ ?v0 )):pattern ((fun_app$b (uu$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$a (fun_app$b (uud$ ?v0 ?v1 )?v2 )?v3 )(ite (fun_app$d ?v0 ?v2 )(fun_app$a (ldropWhile$ ?v0 )?v3 )?v1 )):pattern ((fun_app$a (fun_app$b (uud$ ?v0 ?v1 )?v2 )?v3 )))):named a2 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$d uuc$ ?v0 )false ):pattern ((fun_app$d uuc$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$d uub$ ?v0 )true ):pattern ((fun_app$d uub$ ?v0 )))):named a4 ))
(assert (! (not (fun_app$e (fun_app$f lprefix$ (case_enat$ xsa$ uua$ (llength$ (fun_app$a (ltakeWhile$ p$ )xsa$ ))))(fun_app$a (ldropWhile$ p$ )xsa$ ))):named a5 ))
(assert (! (fun_ord$ lprefix$ (case_prod$ ldrop$ )(case_prod$ ldrop$a )):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$e (fun_app$f lprefix$ ?v0 )?v0 )):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$e (fun_app$f lprefix$ ?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$e (fun_app$f lprefix$ (fun_app$a (fun_app$c ldrop$ (llength$ (fun_app$a (ltakeWhile$ p$ )?v0 )))?v0 ))(fun_app$a (ldropWhile$ p$ )?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$a (ltakeWhile$ uub$ )?v0 )?v0 )):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$e (fun_app$f lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$e (fun_app$f lprefix$ lNil$ )?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$a (ltakeWhile$ ?v0 )lNil$ )lNil$ ):pattern ((ltakeWhile$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$a (ldropWhile$ ?v0 )lNil$ )lNil$ ):pattern ((ldropWhile$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$a (ltakeWhile$ uuc$ )?v0 )lNil$ )):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$a (ldropWhile$ uub$ )?v0 )lNil$ )):named a15 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (llength$ (fun_app$a (ltakeWhile$ ?v0 )?v1 ))(llength$ ?v1 ))(= (fun_app$a (ltakeWhile$ ?v0 )?v1 )?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$a (ldropWhile$ ?v0 )?v1 )(fun_app$a (case_llist$ lNil$ (uud$ ?v0 ?v1 ))?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_a_llist_fun_fun$ ))(! (= (fun_app$a (case_llist$ ?v0 ?v1 )lNil$ )?v0 ):pattern ((case_llist$ ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(= (llength$ ?v0 )(llength$ ?v1 )))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v2 )?v1 ))(or (fun_app$e (fun_app$f lprefix$ ?v0 )?v2 )(fun_app$e (fun_app$f lprefix$ ?v2 )?v0 )))):named a22 ))
(check-sat )
;(get-unsat-core )
