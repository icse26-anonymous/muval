;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun n$ ()Nat$ )
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun lnth$ (B_llist$ Nat$ )B$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun llcp$a (B_llist$ )B_llist_enat_fun$ )
(declare-fun lnth$a (A_llist$ Nat$ )A$ )
(declare-fun ltake$ (Enat$ B_llist$ )B_llist$ )
(declare-fun ltake$a (Enat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (B_bool_fun$ B$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$b (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$c (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun lappend$a (B_llist$ B_llist$ )B_llist$ )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(assert (! (not (= (lnth$ ys$ n$ )(lnth$ (ltake$ (llength$ xs$ )ys$ )n$ ))):named a0 ))
(assert (! (less$ (enat$ n$ )(llength$ xs$ )):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$a (enat$ ?v2 )?v0 )(ltake$a (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )?v1 )(= (lnth$a (ltake$a ?v1 ?v2 )?v0 )(lnth$a ?v2 ?v0 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 B_llist$ ))(=> (less$ (enat$ ?v0 )?v1 )(= (lnth$ (ltake$ ?v1 ?v2 )?v0 )(lnth$ ?v2 ?v0 )))):named a5 ))
(assert (! (less_eq$ (llength$ xs$ )(llength$a ys$ )):named a6 ))
(assert (! (fun_app$ (fun_app$a p$ (lnth$a (lappend$ xs$ xs$a )n$ ))(lnth$ ys$ n$ )):named a7 ))
(assert (! (less$ (enat$ n$ )(llength$ (lappend$ xs$ xs$a ))):named a8 ))
(assert (! (= (plus$ (llength$ xs$ )(llength$ xs$a ))(llength$a ys$ )):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (llength$ (ltake$a ?v0 ?v1 ))(min$ ?v0 (llength$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(= (llength$a (ltake$ ?v0 ?v1 ))(min$ ?v0 (llength$a ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$ ?v0 )?v1 )(= (ltake$a ?v1 ?v0 )?v0 )):pattern ((ltake$a ?v1 ?v0 )))):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$a ?v0 )?v1 )(= (ltake$ ?v1 ?v0 )?v0 )):pattern ((ltake$ ?v1 ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$c (llcp$a ?v0 )?v0 )(llength$a ?v0 )):pattern ((llcp$a ?v0 )))):named a15 ))
(assert (! (llist_all2$ p$ (lappend$ xs$ xs$a )ys$ ):named a16 ))
(assert (! (less_eq$ (llength$ xs$a )(llength$a ys$ )):named a17 ))
(assert (! (less_eq$ (llength$ xs$ )(llength$ (lappend$ xs$ xs$a ))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (ltake$a ?v0 (ltake$a ?v1 ?v2 ))(ltake$a (min$ ?v0 ?v1 )?v2 ))):named a19 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 B_llist$ ))(= (ltake$ ?v0 (ltake$ ?v1 ?v2 ))(ltake$ (min$ ?v0 ?v1 )?v2 ))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (llength$ (lappend$ ?v0 ?v1 ))(plus$ (llength$ ?v0 )(llength$ ?v1 )))):named a21 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (llength$a (lappend$a ?v0 ?v1 ))(plus$ (llength$a ?v0 )(llength$a ?v1 )))):named a22 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 Enat$ )(?v3 A_llist$ ))(= (fun_app$b (llcp$ (ltake$a ?v0 ?v1 ))(ltake$a ?v2 ?v3 ))(min$ (min$ ?v0 ?v2 )(fun_app$b (llcp$ ?v1 )?v3 )))):named a23 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 Enat$ )(?v3 B_llist$ ))(= (fun_app$c (llcp$a (ltake$ ?v0 ?v1 ))(ltake$ ?v2 ?v3 ))(min$ (min$ ?v0 ?v2 )(fun_app$c (llcp$a ?v1 )?v3 )))):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$b (llcp$ (lappend$ ?v0 ?v1 ))(lappend$ ?v0 ?v2 ))(plus$ (llength$ ?v0 )(fun_app$b (llcp$ ?v1 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$c (llcp$a (lappend$a ?v0 ?v1 ))(lappend$a ?v0 ?v2 ))(plus$ (llength$a ?v0 )(fun_app$c (llcp$a ?v1 )?v2 )))):named a26 ))
(check-sat )
;(get-unsat-core )
