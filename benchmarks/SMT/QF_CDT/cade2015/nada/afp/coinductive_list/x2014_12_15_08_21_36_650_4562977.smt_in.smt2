;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort B_b_prod_a_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_llist_b_a_prod_llist_fun$ 0 )
(declare-sort B_llist_a_b_prod_llist_fun$ 0 )
(declare-sort B_llist_b_b_prod_llist_fun$ 0 )
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_b_prod_llist_a_b_prod_llist_fun$ 0 )
(declare-sort B_a_prod_llist_b_a_prod_llist_fun$ 0 )
(declare-sort B_b_prod_llist_b_b_prod_llist_fun$ 0 )
(declare-sort A_b_prod_llist_a_a_b_prod_prod_llist_fun$ 0 )
(declare-sort A_b_prod_llist_b_a_b_prod_prod_llist_fun$ 0 )
(declare-sort A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ 0 )
(declare-sort B_a_b_prod_prod_llist_b_a_b_prod_prod_llist_fun$ 0 )
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_llist$ 0)
(declare-fun lNil$ ()A_b_prod_llist$)
(declare-fun lhd$ (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$ (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$ (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$a (A_a_prod$)A$)
(declare-fun snd$a (A_a_prod$)A$)
(declare-fun pair$a (A$ A$ )A_a_prod$)
(declare-sort A_a_prod_llist$ 0)
(declare-fun lNil$c ()A_a_prod_llist$)
(declare-fun lhd$c (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$c (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$c (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-sort B_a_prod$ 0)
(declare-fun fst$b (B_a_prod$)B$)
(declare-fun snd$b (B_a_prod$)A$)
(declare-fun pair$b (B$ A$ )B_a_prod$)
(declare-sort B_a_prod_llist$ 0)
(declare-fun lNil$d ()B_a_prod_llist$)
(declare-fun lhd$d (B_a_prod_llist$)B_a_prod$)
(declare-fun ltl$d (B_a_prod_llist$)B_a_prod_llist$)
(declare-fun lCons$d (B_a_prod$ B_a_prod_llist$ )B_a_prod_llist$)
(declare-sort B_b_prod$ 0)
(declare-fun fst$c (B_b_prod$)B$)
(declare-fun snd$c (B_b_prod$)B$)
(declare-fun pair$c (B$ B$ )B_b_prod$)
(declare-sort B_b_prod_llist$ 0)
(declare-fun lNil$e ()B_b_prod_llist$)
(declare-fun lhd$e (B_b_prod_llist$)B_b_prod$)
(declare-fun ltl$e (B_b_prod_llist$)B_b_prod_llist$)
(declare-fun lCons$e (B_b_prod$ B_b_prod_llist$ )B_b_prod_llist$)
(declare-sort A_b_prod_a_prod$ 0)
(declare-fun fst$d (A_b_prod_a_prod$)A_b_prod$)
(declare-fun snd$d (A_b_prod_a_prod$)A$)
(declare-fun pair$d (A_b_prod$ A$ )A_b_prod_a_prod$)
(declare-sort A_b_prod_a_prod_llist$ 0)
(declare-fun lNil$f ()A_b_prod_a_prod_llist$)
(declare-fun lhd$f (A_b_prod_a_prod_llist$)A_b_prod_a_prod$)
(declare-fun ltl$f (A_b_prod_a_prod_llist$)A_b_prod_a_prod_llist$)
(declare-fun lCons$f (A_b_prod_a_prod$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$)
(declare-sort A_b_prod_b_prod$ 0)
(declare-fun fst$e (A_b_prod_b_prod$)A_b_prod$)
(declare-fun snd$e (A_b_prod_b_prod$)B$)
(declare-fun pair$e (A_b_prod$ B$ )A_b_prod_b_prod$)
(declare-sort A_b_prod_b_prod_llist$ 0)
(declare-fun lNil$g ()A_b_prod_b_prod_llist$)
(declare-fun lhd$g (A_b_prod_b_prod_llist$)A_b_prod_b_prod$)
(declare-fun ltl$g (A_b_prod_b_prod_llist$)A_b_prod_b_prod_llist$)
(declare-fun lCons$g (A_b_prod_b_prod$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$)
(declare-sort A_a_b_prod_prod$ 0)
(declare-fun fst$f (A_a_b_prod_prod$)A$)
(declare-fun snd$f (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$f (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-sort A_a_b_prod_prod_llist$ 0)
(declare-fun lNil$h ()A_a_b_prod_prod_llist$)
(declare-fun lhd$h (A_a_b_prod_prod_llist$)A_a_b_prod_prod$)
(declare-fun ltl$h (A_a_b_prod_prod_llist$)A_a_b_prod_prod_llist$)
(declare-fun lCons$h (A_a_b_prod_prod$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$)
(declare-sort B_a_b_prod_prod$ 0)
(declare-fun fst$g (B_a_b_prod_prod$)B$)
(declare-fun snd$g (B_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$g (B$ A_b_prod$ )B_a_b_prod_prod$)
(declare-sort B_a_b_prod_prod_llist$ 0)
(declare-fun lNil$i ()B_a_b_prod_prod_llist$)
(declare-fun lhd$i (B_a_b_prod_prod_llist$)B_a_b_prod_prod$)
(declare-fun ltl$i (B_a_b_prod_prod_llist$)B_a_b_prod_prod_llist$)
(declare-fun lCons$i (B_a_b_prod_prod$ B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist$)
(declare-sort A_b_prod_a_b_prod_prod$ 0)
(declare-fun fst$h (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun snd$h (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$h (A_b_prod$ A_b_prod$ )A_b_prod_a_b_prod_prod$)
(declare-sort A_b_prod_a_b_prod_prod_llist$ 0)
(declare-fun lNil$j ()A_b_prod_a_b_prod_prod_llist$)
(declare-fun lhd$j (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod$)
(declare-fun ltl$j (A_b_prod_a_b_prod_prod_llist$)A_b_prod_a_b_prod_prod_llist$)
(declare-fun lCons$j (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$)
(declare-sort A_b_b_prod_prod$ 0)
(declare-fun fst$i (A_b_b_prod_prod$)A$)
(declare-fun snd$i (A_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$i (A$ B_b_prod$ )A_b_b_prod_prod$)
(declare-sort A_b_b_prod_prod_llist$ 0)
(declare-fun lNil$k ()A_b_b_prod_prod_llist$)
(declare-fun lhd$k (A_b_b_prod_prod_llist$)A_b_b_prod_prod$)
(declare-fun ltl$k (A_b_b_prod_prod_llist$)A_b_b_prod_prod_llist$)
(declare-fun lCons$k (A_b_b_prod_prod$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$)
(declare-fun n$ ()Enat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun lmap$ (A_b_prod_a_b_prod_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lset$ (A_b_prod_llist$ )A_b_prod_set$ )
(declare-fun lzip$ (A_llist$ )B_llist_a_b_prod_llist_fun$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun zero$ ()Enat$ )
(declare-fun ldrop$ (Enat$ )A_b_prod_llist_a_b_prod_llist_fun$ )
(declare-fun lmap$a (A_a_b_prod_fun$ A_llist$ )A_b_prod_llist$ )
(declare-fun lmap$b (B_a_b_prod_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun lmap$c (A_b_prod_a_fun$ A_b_prod_llist$ )A_llist$ )
(declare-fun lmap$d (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$e (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$f (A_b_prod_b_fun$ A_b_prod_llist$ )B_llist$ )
(declare-fun lmap$g (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$h (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$i (B_b_prod_a_fun$ B_b_prod_llist$ )A_llist$ )
(declare-fun lnull$ (A_b_prod_llist$ )Bool )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun lset$b (B_llist$ )B_set$ )
(declare-fun lzip$a (A_llist$ )A_llist_a_a_prod_llist_fun$ )
(declare-fun lzip$b (B_llist$ )A_llist_b_a_prod_llist_fun$ )
(declare-fun lzip$c (B_llist$ )B_llist_b_b_prod_llist_fun$ )
(declare-fun lzip$d (A_b_prod_llist$ A_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun lzip$e (A_b_prod_llist$ B_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun lzip$f (A_llist$ )A_b_prod_llist_a_a_b_prod_prod_llist_fun$ )
(declare-fun lzip$g (B_llist$ )A_b_prod_llist_b_a_b_prod_prod_llist_fun$ )
(declare-fun lzip$h (A_b_prod_llist$ A_b_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun lzip$i (A_llist$ B_b_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun ldrop$a (Enat$ )A_llist_a_llist_fun$ )
(declare-fun ldrop$b (Enat$ )B_llist_b_llist_fun$ )
(declare-fun ldropn$ (Nat$ )A_b_prod_llist_a_b_prod_llist_fun$ )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun lnull$b (B_llist$ )Bool )
(declare-fun lnull$c (A_a_prod_llist$ )Bool )
(declare-fun lnull$d (B_a_prod_llist$ )Bool )
(declare-fun lnull$e (B_b_prod_llist$ )Bool )
(declare-fun lnull$f (A_b_prod_a_prod_llist$ )Bool )
(declare-fun lnull$g (A_b_prod_b_prod_llist$ )Bool )
(declare-fun lnull$h (A_a_b_prod_prod_llist$ )Bool )
(declare-fun lnull$i (B_a_b_prod_prod_llist$ )Bool )
(declare-fun lnull$j (A_b_prod_a_b_prod_prod_llist$ )Bool )
(declare-fun lnull$k (A_b_b_prod_prod_llist$ )Bool )
(declare-fun member$ (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun fun_app$ (A_b_prod_llist_a_b_prod_llist_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun ldropn$a (Nat$ )A_llist_a_llist_fun$ )
(declare-fun ldropn$b (Nat$ )B_llist_b_llist_fun$ )
(declare-fun ldropn$c (Nat$ )A_a_prod_llist_a_a_prod_llist_fun$ )
(declare-fun ldropn$d (Nat$ )B_a_prod_llist_b_a_prod_llist_fun$ )
(declare-fun ldropn$e (Nat$ )B_b_prod_llist_b_b_prod_llist_fun$ )
(declare-fun ldropn$f (Nat$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun ldropn$g (Nat$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun ldropn$h (Nat$ )A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ )
(declare-fun ldropn$i (Nat$ )B_a_b_prod_prod_llist_b_a_b_prod_prod_llist_fun$ )
(declare-fun ldropn$j (Nat$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun ldropn$k (Nat$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun member$b (B$ B_set$ )Bool )
(declare-fun fun_app$a (B_llist_a_b_prod_llist_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$c (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$d (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun fun_app$e (A_llist_a_a_prod_llist_fun$ A_llist$ )A_a_prod_llist$ )
(declare-fun fun_app$f (B_a_prod_llist_b_a_prod_llist_fun$ B_a_prod_llist$ )B_a_prod_llist$ )
(declare-fun fun_app$g (A_llist_b_a_prod_llist_fun$ A_llist$ )B_a_prod_llist$ )
(declare-fun fun_app$h (B_b_prod_llist_b_b_prod_llist_fun$ B_b_prod_llist$ )B_b_prod_llist$ )
(declare-fun fun_app$i (B_llist_b_b_prod_llist_fun$ B_llist$ )B_b_prod_llist$ )
(declare-fun fun_app$j (A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun fun_app$k (A_b_prod_llist_a_a_b_prod_prod_llist_fun$ A_b_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun fun_app$l (B_a_b_prod_prod_llist_b_a_b_prod_prod_llist_fun$ B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun fun_app$m (A_b_prod_llist_b_a_b_prod_prod_llist_fun$ A_b_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun infinity$ ()Enat$ )
(assert (! (not (= (fun_app$ (ldrop$ n$ )(fun_app$a (lzip$ xs$ )ys$ ))(fun_app$a (lzip$ (fun_app$b (ldrop$a n$ )xs$ ))(fun_app$c (ldrop$b n$ )ys$ )))):named a0 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(= (fun_app$ (ldrop$ zero$ )?v0 )?v0 )):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$b (ldrop$a zero$ )?v0 )?v0 )):named a2 ))
(assert (! (forall ((?v0 B_llist$ ))(= (fun_app$c (ldrop$b zero$ )?v0 )?v0 )):named a3 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_b_prod_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(fun_app$ (ldrop$ ?v1 )?v2 ))(fun_app$ (ldrop$ (plus$ ?v0 ?v1 ))?v2 ))):named a4 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (fun_app$b (ldrop$a ?v0 )(fun_app$b (ldrop$a ?v1 )?v2 ))(fun_app$b (ldrop$a (plus$ ?v0 ?v1 ))?v2 ))):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 B_llist$ ))(= (fun_app$c (ldrop$b ?v0 )(fun_app$c (ldrop$b ?v1 )?v2 ))(fun_app$c (ldrop$b (plus$ ?v0 ?v1 ))?v2 ))):named a6 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ldrop$ ?v0 )lNil$ )lNil$ ):pattern ((ldrop$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b (ldrop$a ?v0 )lNil$a )lNil$a ):pattern ((ldrop$a ?v0 )))):named a8 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$c (ldrop$b ?v0 )lNil$b )lNil$b ):pattern ((ldrop$b ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_a_b_prod_fun$ )(?v2 A_b_prod_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$ (ldrop$ ?v0 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_b_prod_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(lmap$a ?v1 ?v2 ))(lmap$a ?v1 (fun_app$b (ldrop$a ?v0 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_b_prod_fun$ )(?v2 B_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(lmap$b ?v1 ?v2 ))(lmap$b ?v1 (fun_app$c (ldrop$b ?v0 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_a_fun$ )(?v2 A_b_prod_llist$ ))(= (fun_app$b (ldrop$a ?v0 )(lmap$c ?v1 ?v2 ))(lmap$c ?v1 (fun_app$ (ldrop$ ?v0 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$b (ldrop$a ?v0 )(lmap$d ?v1 ?v2 ))(lmap$d ?v1 (fun_app$b (ldrop$a ?v0 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (fun_app$b (ldrop$a ?v0 )(lmap$e ?v1 ?v2 ))(lmap$e ?v1 (fun_app$c (ldrop$b ?v0 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_b_fun$ )(?v2 A_b_prod_llist$ ))(= (fun_app$c (ldrop$b ?v0 )(lmap$f ?v1 ?v2 ))(lmap$f ?v1 (fun_app$ (ldrop$ ?v0 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (fun_app$c (ldrop$b ?v0 )(lmap$g ?v1 ?v2 ))(lmap$g ?v1 (fun_app$b (ldrop$a ?v0 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (fun_app$c (ldrop$b ?v0 )(lmap$h ?v1 ?v2 ))(lmap$h ?v1 (fun_app$c (ldrop$b ?v0 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ ))(= (ltl$ (fun_app$ (ldrop$ ?v0 )?v1 ))(fun_app$ (ldrop$ ?v0 )(ltl$ ?v1 )))):named a19 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (ltl$a (fun_app$b (ldrop$a ?v0 )?v1 ))(fun_app$b (ldrop$a ?v0 )(ltl$a ?v1 )))):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(= (ltl$b (fun_app$c (ldrop$b ?v0 )?v1 ))(fun_app$c (ldrop$b ?v0 )(ltl$b ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 Enat$ )(?v2 A_b_prod_llist$ ))(=> (member$ ?v0 (lset$ (fun_app$ (ldrop$ ?v1 )?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a22 ))
(assert (! (forall ((?v0 A$ )(?v1 Enat$ )(?v2 A_llist$ ))(=> (member$a ?v0 (lset$a (fun_app$b (ldrop$a ?v1 )?v2 )))(member$a ?v0 (lset$a ?v2 )))):named a23 ))
(assert (! (forall ((?v0 B$ )(?v1 Enat$ )(?v2 B_llist$ ))(=> (member$b ?v0 (lset$b (fun_app$c (ldrop$b ?v1 )?v2 )))(member$b ?v0 (lset$b ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 B_llist$ ))(= (fun_app$ (ldropn$ ?v0 )(fun_app$a (lzip$ ?v1 )?v2 ))(fun_app$a (lzip$ (fun_app$b (ldropn$a ?v0 )?v1 ))(fun_app$c (ldropn$b ?v0 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$d (ldropn$c ?v0 )(fun_app$e (lzip$a ?v1 )?v2 ))(fun_app$e (lzip$a (fun_app$b (ldropn$a ?v0 )?v1 ))(fun_app$b (ldropn$a ?v0 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 A_llist$ ))(= (fun_app$f (ldropn$d ?v0 )(fun_app$g (lzip$b ?v1 )?v2 ))(fun_app$g (lzip$b (fun_app$c (ldropn$b ?v0 )?v1 ))(fun_app$b (ldropn$a ?v0 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$h (ldropn$e ?v0 )(fun_app$i (lzip$c ?v1 )?v2 ))(fun_app$i (lzip$c (fun_app$c (ldropn$b ?v0 )?v1 ))(fun_app$c (ldropn$b ?v0 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_llist$ )(?v2 A_llist$ ))(= (ldropn$f ?v0 (lzip$d ?v1 ?v2 ))(lzip$d (fun_app$ (ldropn$ ?v0 )?v1 )(fun_app$b (ldropn$a ?v0 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_llist$ )(?v2 B_llist$ ))(= (ldropn$g ?v0 (lzip$e ?v1 ?v2 ))(lzip$e (fun_app$ (ldropn$ ?v0 )?v1 )(fun_app$c (ldropn$b ?v0 )?v2 )))):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_b_prod_llist$ ))(= (fun_app$j (ldropn$h ?v0 )(fun_app$k (lzip$f ?v1 )?v2 ))(fun_app$k (lzip$f (fun_app$b (ldropn$a ?v0 )?v1 ))(fun_app$ (ldropn$ ?v0 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 A_b_prod_llist$ ))(= (fun_app$l (ldropn$i ?v0 )(fun_app$m (lzip$g ?v1 )?v2 ))(fun_app$m (lzip$g (fun_app$c (ldropn$b ?v0 )?v1 ))(fun_app$ (ldropn$ ?v0 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(= (ldropn$j ?v0 (lzip$h ?v1 ?v2 ))(lzip$h (fun_app$ (ldropn$ ?v0 )?v1 )(fun_app$ (ldropn$ ?v0 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 B_b_prod_llist$ ))(= (ldropn$k ?v0 (lzip$i ?v1 ?v2 ))(lzip$i (fun_app$b (ldropn$a ?v0 )?v1 )(fun_app$h (ldropn$e ?v0 )?v2 )))):named a34 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$i (lzip$c ?v0 )lNil$b )lNil$e ):pattern ((lzip$c ?v0 )))):named a35 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$g (lzip$b ?v0 )lNil$a )lNil$d ):pattern ((lzip$b ?v0 )))):named a36 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$e (lzip$a ?v0 )lNil$a )lNil$c ):pattern ((lzip$a ?v0 )))):named a37 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$m (lzip$g ?v0 )lNil$ )lNil$i ):pattern ((lzip$g ?v0 )))):named a38 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$k (lzip$f ?v0 )lNil$ )lNil$h ):pattern ((lzip$f ?v0 )))):named a39 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (lzip$ ?v0 )lNil$b )lNil$ ):pattern ((lzip$ ?v0 )))):named a40 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$m (lzip$g lNil$b )?v0 )lNil$i ):pattern ((fun_app$m (lzip$g lNil$b )?v0 )))):named a41 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$i (lzip$c lNil$b )?v0 )lNil$e ):pattern ((fun_app$i (lzip$c lNil$b )?v0 )))):named a42 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$g (lzip$b lNil$b )?v0 )lNil$d ):pattern ((fun_app$g (lzip$b lNil$b )?v0 )))):named a43 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$k (lzip$f lNil$a )?v0 )lNil$h ):pattern ((fun_app$k (lzip$f lNil$a )?v0 )))):named a44 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$e (lzip$a lNil$a )?v0 )lNil$c ):pattern ((fun_app$e (lzip$a lNil$a )?v0 )))):named a45 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$a (lzip$ lNil$a )?v0 )lNil$ ):pattern ((fun_app$a (lzip$ lNil$a )?v0 )))):named a46 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$ (ldrop$ infinity$ )?v0 )lNil$ ):pattern ((fun_app$ (ldrop$ infinity$ )?v0 )))):named a47 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (ldrop$a infinity$ )?v0 )lNil$a ):pattern ((fun_app$b (ldrop$a infinity$ )?v0 )))):named a48 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$c (ldrop$b infinity$ )?v0 )lNil$b ):pattern ((fun_app$c (ldrop$b infinity$ )?v0 )))):named a49 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(= (not (lnull$ (fun_app$a (lzip$ ?v0 )?v1 )))(and (not (lnull$a ?v0 ))(not (lnull$b ?v1 ))))):named a50 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$c (fun_app$e (lzip$a ?v0 )?v1 )))(and (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a51 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(= (not (lnull$d (fun_app$g (lzip$b ?v0 )?v1 )))(and (not (lnull$b ?v0 ))(not (lnull$a ?v1 ))))):named a52 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$e (fun_app$i (lzip$c ?v0 )?v1 )))(and (not (lnull$b ?v0 ))(not (lnull$b ?v1 ))))):named a53 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_llist$ ))(= (not (lnull$f (lzip$d ?v0 ?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$a ?v1 ))))):named a54 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 B_llist$ ))(= (not (lnull$g (lzip$e ?v0 ?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$b ?v1 ))))):named a55 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ ))(= (not (lnull$h (fun_app$k (lzip$f ?v0 )?v1 )))(and (not (lnull$a ?v0 ))(not (lnull$ ?v1 ))))):named a56 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ ))(= (not (lnull$i (fun_app$m (lzip$g ?v0 )?v1 )))(and (not (lnull$b ?v0 ))(not (lnull$ ?v1 ))))):named a57 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (not (lnull$j (lzip$h ?v0 ?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a58 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_b_prod_llist$ ))(= (not (lnull$k (lzip$i ?v0 ?v1 )))(and (not (lnull$a ?v0 ))(not (lnull$e ?v1 ))))):named a59 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(= (lnull$ (fun_app$a (lzip$ ?v0 )?v1 ))(or (lnull$a ?v0 )(lnull$b ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$c (fun_app$e (lzip$a ?v0 )?v1 ))(or (lnull$a ?v0 )(lnull$a ?v1 )))):named a61 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(= (lnull$d (fun_app$g (lzip$b ?v0 )?v1 ))(or (lnull$b ?v0 )(lnull$a ?v1 )))):named a62 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$e (fun_app$i (lzip$c ?v0 )?v1 ))(or (lnull$b ?v0 )(lnull$b ?v1 )))):named a63 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_llist$ ))(= (lnull$f (lzip$d ?v0 ?v1 ))(or (lnull$ ?v0 )(lnull$a ?v1 )))):named a64 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 B_llist$ ))(= (lnull$g (lzip$e ?v0 ?v1 ))(or (lnull$ ?v0 )(lnull$b ?v1 )))):named a65 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ ))(= (lnull$h (fun_app$k (lzip$f ?v0 )?v1 ))(or (lnull$a ?v0 )(lnull$ ?v1 )))):named a66 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ ))(= (lnull$i (fun_app$m (lzip$g ?v0 )?v1 ))(or (lnull$b ?v0 )(lnull$ ?v1 )))):named a67 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (lnull$j (lzip$h ?v0 ?v1 ))(or (lnull$ ?v0 )(lnull$ ?v1 )))):named a68 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_b_prod_llist$ ))(= (lnull$k (lzip$i ?v0 ?v1 ))(or (lnull$a ?v0 )(lnull$e ?v1 )))):named a69 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$d ?v0 ?v1 ))(lnull$a ?v1 ))):named a70 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$a (lmap$e ?v0 ?v1 ))(lnull$b ?v1 ))):named a71 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$b (lmap$g ?v0 ?v1 ))(lnull$a ?v1 ))):named a72 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$b (lmap$h ?v0 ?v1 ))(lnull$b ?v1 ))):named a73 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$a ?v0 ?v1 ))(lnull$a ?v1 ))):named a74 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_llist$ ))(= (lnull$ (lmap$b ?v0 ?v1 ))(lnull$b ?v1 ))):named a75 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_llist$ ))(= (lnull$a (lmap$c ?v0 ?v1 ))(lnull$ ?v1 ))):named a76 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_llist$ ))(= (lnull$b (lmap$f ?v0 ?v1 ))(lnull$ ?v1 ))):named a77 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_llist$ ))(= (lnull$ (lmap$ ?v0 ?v1 ))(lnull$ ?v1 ))):named a78 ))
(assert (! (forall ((?v0 B_b_prod_a_fun$ )(?v1 B_b_prod_llist$ ))(= (lnull$a (lmap$i ?v0 ?v1 ))(lnull$e ?v1 ))):named a79 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$l (ldropn$i ?v0 )lNil$i )lNil$i ):pattern ((ldropn$i ?v0 )))):named a80 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$h (ldropn$e ?v0 )lNil$e )lNil$e ):pattern ((ldropn$e ?v0 )))):named a81 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$f (ldropn$d ?v0 )lNil$d )lNil$d ):pattern ((ldropn$d ?v0 )))):named a82 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$j (ldropn$h ?v0 )lNil$h )lNil$h ):pattern ((ldropn$h ?v0 )))):named a83 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$d (ldropn$c ?v0 )lNil$c )lNil$c ):pattern ((ldropn$c ?v0 )))):named a84 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$c (ldropn$b ?v0 )lNil$b )lNil$b ):pattern ((ldropn$b ?v0 )))):named a85 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$b (ldropn$a ?v0 )lNil$a )lNil$a ):pattern ((ldropn$a ?v0 )))):named a86 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ldropn$ ?v0 )lNil$ )lNil$ ):pattern ((ldropn$ ?v0 )))):named a87 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_llist$ ))(= (ltl$b (lmap$f ?v0 ?v1 ))(lmap$f ?v0 (ltl$ ?v1 )))):named a88 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_llist$ ))(= (ltl$a (lmap$c ?v0 ?v1 ))(lmap$c ?v0 (ltl$ ?v1 )))):named a89 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_llist$ ))(= (ltl$ (lmap$b ?v0 ?v1 ))(lmap$b ?v0 (ltl$b ?v1 )))):named a90 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_llist$ ))(= (ltl$ (lmap$ ?v0 ?v1 ))(lmap$ ?v0 (ltl$ ?v1 )))):named a91 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (ltl$b (lmap$h ?v0 ?v1 ))(lmap$h ?v0 (ltl$b ?v1 )))):named a92 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$a (lmap$e ?v0 ?v1 ))(lmap$e ?v0 (ltl$b ?v1 )))):named a93 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_llist$ ))(= (ltl$ (lmap$a ?v0 ?v1 ))(lmap$a ?v0 (ltl$a ?v1 )))):named a94 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (ltl$b (lmap$g ?v0 ?v1 ))(lmap$g ?v0 (ltl$a ?v1 )))):named a95 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$a (lmap$d ?v0 ?v1 ))(lmap$d ?v0 (ltl$a ?v1 )))):named a96 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (fun_app$c (ldropn$b ?v0 )(lmap$h ?v1 ?v2 ))(lmap$h ?v1 (fun_app$c (ldropn$b ?v0 )?v2 )))):named a97 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (fun_app$b (ldropn$a ?v0 )(lmap$e ?v1 ?v2 ))(lmap$e ?v1 (fun_app$c (ldropn$b ?v0 )?v2 )))):named a98 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (fun_app$c (ldropn$b ?v0 )(lmap$g ?v1 ?v2 ))(lmap$g ?v1 (fun_app$b (ldropn$a ?v0 )?v2 )))):named a99 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$b (ldropn$a ?v0 )(lmap$d ?v1 ?v2 ))(lmap$d ?v1 (fun_app$b (ldropn$a ?v0 )?v2 )))):named a100 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_b_prod_fun$ )(?v2 B_llist$ ))(= (fun_app$ (ldropn$ ?v0 )(lmap$b ?v1 ?v2 ))(lmap$b ?v1 (fun_app$c (ldropn$b ?v0 )?v2 )))):named a101 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_a_fun$ )(?v2 A_b_prod_llist$ ))(= (fun_app$b (ldropn$a ?v0 )(lmap$c ?v1 ?v2 ))(lmap$c ?v1 (fun_app$ (ldropn$ ?v0 )?v2 )))):named a102 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_b_fun$ )(?v2 A_b_prod_llist$ ))(= (fun_app$c (ldropn$b ?v0 )(lmap$f ?v1 ?v2 ))(lmap$f ?v1 (fun_app$ (ldropn$ ?v0 )?v2 )))):named a103 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_b_prod_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ldropn$ ?v0 )(lmap$a ?v1 ?v2 ))(lmap$a ?v1 (fun_app$b (ldropn$a ?v0 )?v2 )))):named a104 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_a_b_prod_fun$ )(?v2 A_b_prod_llist$ ))(= (fun_app$ (ldropn$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$ (ldropn$ ?v0 )?v2 )))):named a105 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_a_fun$ )(?v2 B_b_prod_llist$ ))(= (fun_app$b (ldropn$a ?v0 )(lmap$i ?v1 ?v2 ))(lmap$i ?v1 (fun_app$h (ldropn$e ?v0 )?v2 )))):named a106 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_llist$ ))(= (= (lmap$f ?v0 ?v1 )lNil$b )(= ?v1 lNil$ ))):named a107 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_llist$ ))(= (= (lmap$c ?v0 ?v1 )lNil$a )(= ?v1 lNil$ ))):named a108 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_llist$ ))(= (= (lmap$b ?v0 ?v1 )lNil$ )(= ?v1 lNil$b ))):named a109 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_llist$ ))(= (= (lmap$ ?v0 ?v1 )lNil$ )(= ?v1 lNil$ ))):named a110 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= (lmap$h ?v0 ?v1 )lNil$b )(= ?v1 lNil$b ))):named a111 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= (lmap$e ?v0 ?v1 )lNil$a )(= ?v1 lNil$b ))):named a112 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_llist$ ))(= (= (lmap$a ?v0 ?v1 )lNil$ )(= ?v1 lNil$a ))):named a113 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= (lmap$g ?v0 ?v1 )lNil$b )(= ?v1 lNil$a ))):named a114 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= (lmap$d ?v0 ?v1 )lNil$a )(= ?v1 lNil$a ))):named a115 ))
(check-sat )
;(get-unsat-core )
