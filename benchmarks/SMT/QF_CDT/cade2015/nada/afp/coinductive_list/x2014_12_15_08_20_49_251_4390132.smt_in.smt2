;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Enat_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort Enat_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun a$ ()A_llist_set$ )
(declare-fun n$ ()Nat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lSup$ (A_llist_set$ )A_llist$ )
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$ )Bool )
(declare-fun image$ (A_llist_enat_fun$ A_llist_set$ )Enat_set$ )
(declare-fun finite$ (Enat_set$ )Bool )
(declare-fun inj_on$ (A_llist_enat_fun$ A_llist_set$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ ()A_llist_enat_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (Enat_a_llist_fun$ Enat$ )A_llist$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(assert (! (not (inj_on$ llength$ a$ )):named a0 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_set$ ))(= (inj_on$ ?v0 ?v1 )(forall ((?v2 A_llist$ ))(=> (member$ ?v2 ?v1 )(forall ((?v3 A_llist$ ))(=> (and (member$ ?v3 ?v1 )(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v0 ?v3 )))(= ?v2 ?v3 ))))))):named a1 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist_enat_fun$ ))(=> (forall ((?v3 A_llist$ ))(=> (member$ ?v3 ?v0 )(= (fun_app$ ?v1 ?v3 )(fun_app$ ?v2 ?v3 ))))(= (inj_on$ ?v1 ?v0 )(inj_on$ ?v2 ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 Enat_a_llist_fun$ )(?v2 A_llist_enat_fun$ ))(=> (forall ((?v3 A_llist$ ))(=> (member$ ?v3 ?v0 )(= (fun_app$a ?v1 (fun_app$ ?v2 ?v3 ))?v3 )))(inj_on$ ?v2 ?v0 ))):named a3 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_enat_fun$ ))(=> (forall ((?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (member$ ?v2 ?v0 )(and (member$ ?v3 ?v0 )(= (fun_app$ ?v1 ?v2 )(fun_app$ ?v1 ?v3 ))))(= ?v2 ?v3 )))(inj_on$ ?v1 ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_set$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (inj_on$ ?v0 ?v1 )(and (= (fun_app$ ?v0 ?v2 )(fun_app$ ?v0 ?v3 ))(and (member$ ?v2 ?v1 )(member$ ?v3 ?v1 ))))(= ?v2 ?v3 ))):named a5 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_set$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (inj_on$ ?v0 ?v1 )(and (member$ ?v2 ?v1 )(member$ ?v3 ?v1 )))(= (= (fun_app$ ?v0 ?v2 )(fun_app$ ?v0 ?v3 ))(= ?v2 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_set$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (inj_on$ ?v0 ?v1 )(and (not (= ?v2 ?v3 ))(and (member$ ?v2 ?v1 )(member$ ?v3 ?v1 ))))(not (= (fun_app$ ?v0 ?v2 )(fun_app$ ?v0 ?v3 ))))):named a7 ))
(assert (! (= (fun_app$ llength$ (lSup$ a$ ))(enat$ n$ )):named a8 ))
(assert (! (finite$ (image$ llength$ a$ )):named a9 ))
(assert (! (chain$ lprefix$ a$ ):named a10 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= (fun_app$ llength$ (lSup$ a$ ))(enat$ ?v0 ))false ))false ):named a11 ))
(assert (! (lfinite$ (lSup$ a$ )):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v0 )):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v0 )):named a14 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist$ ))(=> (and (chain$ lprefix$ ?v0 )(forall ((?v2 A_llist$ ))(=> (member$ ?v2 ?v0 )(fun_app$b (fun_app$c lprefix$ ?v2 )?v1 ))))(fun_app$b (fun_app$c lprefix$ (lSup$ ?v0 ))?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist$ ))(=> (and (chain$ lprefix$ ?v0 )(forall ((?v2 A_llist$ ))(=> (member$ ?v2 ?v0 )(fun_app$b (fun_app$c lprefix$ ?v2 )?v1 ))))(fun_app$b (fun_app$c lprefix$ (lSup$ ?v0 ))?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist$ ))(=> (and (chain$ lprefix$ ?v0 )(member$ ?v1 ?v0 ))(fun_app$b (fun_app$c lprefix$ ?v1 )(lSup$ ?v0 )))):named a17 ))
(check-sat )
;(get-unsat-core )
