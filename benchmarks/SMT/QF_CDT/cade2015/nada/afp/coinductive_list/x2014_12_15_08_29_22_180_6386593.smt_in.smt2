;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_prod_set$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_a_prod_bool_fun$ 0 )
(declare-sort A_a_a_prod_set_fun$ 0 )
(declare-sort A_list_a_list_prod_set$ 0 )
(declare-sort A_list_a_a_prod_set_fun$ 0 )
(declare-sort A_a_a_a_prod_set_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_set_fun$ 0 )
(declare-sort A_list_a_list_bool_fun_fun$ 0 )
(declare-sort A_list_a_list_prod_bool_fun$ 0 )
(declare-sort A_a_list_a_list_prod_set_fun$ 0 )
(declare-sort A_list_a_list_a_list_prod_set_fun$ 0 )
(declare-sort A_a_a_list_a_list_prod_set_fun_fun$ 0 )
(declare-sort A_list_a_list_a_a_prod_set_fun_fun$ 0 )
(declare-sort A_a_prod_a_list_a_list_prod_set_fun$ 0 )
(declare-sort A_list_a_list_prod_a_a_prod_set_fun$ 0 )
(declare-sort A_list_a_list_a_list_a_list_prod_set_fun_fun$ 0 )
(declare-sort A_list_a_list_prod_a_list_a_list_prod_set_fun$ 0 )
(declare-sort A_list$ 0)
(declare-sort A_list_a_list_prod$ 0)
(declare-sort A_a_prod$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun fst$ (A_list_a_list_prod$)A_list$)
(declare-fun snd$ (A_list_a_list_prod$)A_list$)
(declare-fun pair$ (A_list$ A_list$ )A_list_a_list_prod$)
(declare-fun fst$a (A_a_prod$)A$)
(declare-fun snd$a (A_a_prod$)A$)
(declare-fun pair$a (A$ A$ )A_a_prod$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun r$ ()A_a_bool_fun_fun$ )
(declare-fun uu$ ()A_list_a_list_bool_fun_fun$ )
(declare-fun xs$ ()A_list$ )
(declare-fun ys$ ()A_list$ )
(declare-fun uua$ (Bool A_list_a_list_bool_fun_fun$ )A_list_a_list_bool_fun_fun$ )
(declare-fun uub$ (Bool A_a_bool_fun_fun$ )A_a_bool_fun_fun$ )
(declare-fun uuc$ (A_a_prod_a_a_prod_set_fun$ )A_a_a_a_prod_set_fun_fun$ )
(declare-fun uud$ (A_a_prod_a_list_a_list_prod_set_fun$ )A_a_a_list_a_list_prod_set_fun_fun$ )
(declare-fun uue$ (A_list_a_list_prod_a_a_prod_set_fun$ )A_list_a_list_a_a_prod_set_fun_fun$ )
(declare-fun uuf$ (A_list_a_list_prod_a_list_a_list_prod_set_fun$ )A_list_a_list_a_list_a_list_prod_set_fun_fun$ )
(declare-fun uug$ (A_list_a_list_prod_bool_fun$ )A_list_a_list_bool_fun_fun$ )
(declare-fun uuh$ (A_a_prod_bool_fun$ )A_a_bool_fun_fun$ )
(declare-fun append$ (A_list$ A_list$ )A_list$ )
(declare-fun member$ (A_a_prod$ A_a_prod_set$ )Bool )
(declare-fun collect$ (A_a_prod_bool_fun$ )A_a_prod_set$ )
(declare-fun fun_app$ (A_list_bool_fun$ A_list$ )Bool )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun member$a (A_list_a_list_prod$ A_list_a_list_prod_set$ )Bool )
(declare-fun collect$a (A_list_a_list_prod_bool_fun$ )A_list_a_list_prod_set$ )
(declare-fun fun_app$a (A_list_a_list_bool_fun_fun$ A_list$ )A_list_bool_fun$ )
(declare-fun fun_app$b (A_list_a_list_prod_bool_fun$ A_list_a_list_prod$ )Bool )
(declare-fun fun_app$c (A_list_a_list_a_list_prod_set_fun$ A_list$ )A_list_a_list_prod_set$ )
(declare-fun fun_app$d (A_list_a_list_a_list_a_list_prod_set_fun_fun$ A_list$ )A_list_a_list_a_list_prod_set_fun$ )
(declare-fun fun_app$e (A_list_a_list_prod_a_list_a_list_prod_set_fun$ A_list_a_list_prod$ )A_list_a_list_prod_set$ )
(declare-fun fun_app$f (A_list_a_a_prod_set_fun$ A_list$ )A_a_prod_set$ )
(declare-fun fun_app$g (A_list_a_list_a_a_prod_set_fun_fun$ A_list$ )A_list_a_a_prod_set_fun$ )
(declare-fun fun_app$h (A_list_a_list_prod_a_a_prod_set_fun$ A_list_a_list_prod$ )A_a_prod_set$ )
(declare-fun fun_app$i (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$j (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$k (A_a_prod_bool_fun$ A_a_prod$ )Bool )
(declare-fun fun_app$l (A_a_list_a_list_prod_set_fun$ A$ )A_list_a_list_prod_set$ )
(declare-fun fun_app$m (A_a_a_list_a_list_prod_set_fun_fun$ A$ )A_a_list_a_list_prod_set_fun$ )
(declare-fun fun_app$n (A_a_prod_a_list_a_list_prod_set_fun$ A_a_prod$ )A_list_a_list_prod_set$ )
(declare-fun fun_app$o (A_a_a_prod_set_fun$ A$ )A_a_prod_set$ )
(declare-fun fun_app$p (A_a_a_a_prod_set_fun_fun$ A$ )A_a_a_prod_set_fun$ )
(declare-fun fun_app$q (A_a_prod_a_a_prod_set_fun$ A_a_prod$ )A_a_prod_set$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun case_prod$ (A_a_bool_fun_fun$ )A_a_prod_bool_fun$ )
(declare-fun case_prod$a (A_list_a_list_bool_fun_fun$ )A_list_a_list_prod_bool_fun$ )
(declare-fun case_prod$b (A_a_a_a_prod_set_fun_fun$ )A_a_prod_a_a_prod_set_fun$ )
(declare-fun case_prod$c (A_a_a_list_a_list_prod_set_fun_fun$ )A_a_prod_a_list_a_list_prod_set_fun$ )
(declare-fun case_prod$d (A_list_a_list_a_a_prod_set_fun_fun$ )A_list_a_list_prod_a_a_prod_set_fun$ )
(declare-fun case_prod$e (A_list_a_list_a_list_a_list_prod_set_fun_fun$ )A_list_a_list_prod_a_list_a_list_prod_set_fun$ )
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(exists ((?v2 A$ )(?v3 A_list$ ))(or (= ?v1 (append$ ?v0 (cons$ ?v2 ?v3 )))(exists ((?v4 A_list$ )(?v5 A$ )(?v6 A$ )(?v7 A_list$ )(?v8 A_list$ ))(and (member$ (pair$a ?v5 ?v6 )(collect$ (case_prod$ r$ )))(and (= ?v0 (append$ ?v4 (cons$ ?v5 ?v7 )))(= ?v1 (append$ ?v4 (cons$ ?v6 ?v8 ))))))))):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_list_a_list_prod_bool_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(! (= (fun_app$ (fun_app$a (uug$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (pair$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uug$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A_list_a_list_prod_a_list_a_list_prod_set_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(! (= (fun_app$c (fun_app$d (uuf$ ?v0 )?v1 )?v2 )(fun_app$e ?v0 (pair$ ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$d (uuf$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_list_a_list_prod_a_a_prod_set_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(! (= (fun_app$f (fun_app$g (uue$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (pair$ ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$g (uue$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A$ )(?v2 A$ ))(! (= (fun_app$i (fun_app$j (uuh$ ?v0 )?v1 )?v2 )(fun_app$k ?v0 (pair$a ?v1 ?v2 ))):pattern ((fun_app$i (fun_app$j (uuh$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_a_prod_a_list_a_list_prod_set_fun$ )(?v1 A$ )(?v2 A$ ))(! (= (fun_app$l (fun_app$m (uud$ ?v0 )?v1 )?v2 )(fun_app$n ?v0 (pair$a ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$m (uud$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_set_fun$ )(?v1 A$ )(?v2 A$ ))(! (= (fun_app$o (fun_app$p (uuc$ ?v0 )?v1 )?v2 )(fun_app$q ?v0 (pair$a ?v1 ?v2 ))):pattern ((fun_app$o (fun_app$p (uuc$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 Bool )(?v1 A_list_a_list_bool_fun_fun$ )(?v2 A_list$ )(?v3 A_list$ ))(! (= (fun_app$ (fun_app$a (uua$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uua$ ?v0 ?v1 )?v2 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 Bool )(?v1 A_a_bool_fun_fun$ )(?v2 A$ )(?v3 A$ ))(! (= (fun_app$i (fun_app$j (uub$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$i (fun_app$j ?v1 ?v2 )?v3 ))):pattern ((fun_app$i (fun_app$j (uub$ ?v0 ?v1 )?v2 )?v3 )))):named a8 ))
(assert (! (not (or (= xs$ ys$ )(member$a (pair$ xs$ ys$ )(collect$a (case_prod$a uu$ ))))):named a9 ))
(assert (! (llexord$ r$ (llist_of$ xs$ )(llist_of$ ys$ )):named a10 ))
(assert (! (forall ((?v0 A_list_a_list_prod$ )(?v1 A_list_a_list_bool_fun_fun$ ))(=> (forall ((?v2 A_list$ )(?v3 A_list$ ))(=> (= ?v0 (pair$ ?v2 ?v3 ))(fun_app$ (fun_app$a ?v1 ?v2 )?v3 )))(fun_app$b (case_prod$a ?v1 )?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_bool_fun_fun$ ))(=> (forall ((?v2 A$ )(?v3 A$ ))(=> (= ?v0 (pair$a ?v2 ?v3 ))(fun_app$i (fun_app$j ?v1 ?v2 )?v3 )))(fun_app$k (case_prod$ ?v1 )?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(fun_app$b (case_prod$a ?v0 )(pair$ ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ ))(=> (fun_app$i (fun_app$j ?v0 ?v1 )?v2 )(fun_app$k (case_prod$ ?v0 )(pair$a ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(fun_app$b (case_prod$a ?v0 )(pair$ ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ ))(=> (fun_app$i (fun_app$j ?v0 ?v1 )?v2 )(fun_app$k (case_prod$ ?v0 )(pair$a ?v1 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 Bool )(?v1 A_list_a_list_bool_fun_fun$ )(?v2 A_list_a_list_prod$ ))(= (fun_app$b (case_prod$a (uua$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$b (case_prod$a ?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 Bool )(?v1 A_a_bool_fun_fun$ )(?v2 A_a_prod$ ))(= (fun_app$k (case_prod$ (uub$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$k (case_prod$ ?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a19 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a20 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (append$ (append$ ?v0 ?v1 )?v2 )(append$ ?v0 (append$ ?v1 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a23 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a26 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_set_fun$ ))(= (case_prod$b (uuc$ ?v0 ))?v0 )):named a27 ))
(assert (! (forall ((?v0 A_a_prod_a_list_a_list_prod_set_fun$ ))(= (case_prod$c (uud$ ?v0 ))?v0 )):named a28 ))
(assert (! (forall ((?v0 A_list_a_list_prod_a_a_prod_set_fun$ ))(= (case_prod$d (uue$ ?v0 ))?v0 )):named a29 ))
(assert (! (forall ((?v0 A_list_a_list_prod_a_list_a_list_prod_set_fun$ ))(= (case_prod$e (uuf$ ?v0 ))?v0 )):named a30 ))
(assert (! (forall ((?v0 A_list_a_list_prod_bool_fun$ ))(= (case_prod$a (uug$ ?v0 ))?v0 )):named a31 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ ))(= (case_prod$ (uuh$ ?v0 ))?v0 )):named a32 ))
(assert (! (forall ((?v0 A_list_a_list_prod$ )(?v1 A_list_a_list_a_list_a_list_prod_set_fun_fun$ )(?v2 A_list$ )(?v3 A_list$ ))(=> (member$a ?v0 (fun_app$c (fun_app$d ?v1 ?v2 )?v3 ))(member$a ?v0 (fun_app$e (case_prod$e ?v1 )(pair$ ?v2 ?v3 ))))):named a33 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_list_a_list_a_a_prod_set_fun_fun$ )(?v2 A_list$ )(?v3 A_list$ ))(=> (member$ ?v0 (fun_app$f (fun_app$g ?v1 ?v2 )?v3 ))(member$ ?v0 (fun_app$h (case_prod$d ?v1 )(pair$ ?v2 ?v3 ))))):named a34 ))
(assert (! (forall ((?v0 A_list_a_list_prod$ )(?v1 A_a_a_list_a_list_prod_set_fun_fun$ )(?v2 A$ )(?v3 A$ ))(=> (member$a ?v0 (fun_app$l (fun_app$m ?v1 ?v2 )?v3 ))(member$a ?v0 (fun_app$n (case_prod$c ?v1 )(pair$a ?v2 ?v3 ))))):named a35 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_a_a_prod_set_fun_fun$ )(?v2 A$ )(?v3 A$ ))(=> (member$ ?v0 (fun_app$o (fun_app$p ?v1 ?v2 )?v3 ))(member$ ?v0 (fun_app$q (case_prod$b ?v1 )(pair$a ?v2 ?v3 ))))):named a36 ))
(assert (! (forall ((?v0 A_list_a_list_prod$ )(?v1 A_list_a_list_prod$ )(?v2 A_list_a_list_a_list_a_list_prod_set_fun_fun$ ))(=> (forall ((?v3 A_list$ )(?v4 A_list$ ))(=> (= ?v0 (pair$ ?v3 ?v4 ))(member$a ?v1 (fun_app$c (fun_app$d ?v2 ?v3 )?v4 ))))(member$a ?v1 (fun_app$e (case_prod$e ?v2 )?v0 )))):named a37 ))
(assert (! (forall ((?v0 A_list_a_list_prod$ )(?v1 A_a_prod$ )(?v2 A_list_a_list_a_a_prod_set_fun_fun$ ))(=> (forall ((?v3 A_list$ )(?v4 A_list$ ))(=> (= ?v0 (pair$ ?v3 ?v4 ))(member$ ?v1 (fun_app$f (fun_app$g ?v2 ?v3 )?v4 ))))(member$ ?v1 (fun_app$h (case_prod$d ?v2 )?v0 )))):named a38 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_list_a_list_prod$ )(?v2 A_a_a_list_a_list_prod_set_fun_fun$ ))(=> (forall ((?v3 A$ )(?v4 A$ ))(=> (= ?v0 (pair$a ?v3 ?v4 ))(member$a ?v1 (fun_app$l (fun_app$m ?v2 ?v3 )?v4 ))))(member$a ?v1 (fun_app$n (case_prod$c ?v2 )?v0 )))):named a39 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod$ )(?v2 A_a_a_a_prod_set_fun_fun$ ))(=> (forall ((?v3 A$ )(?v4 A$ ))(=> (= ?v0 (pair$a ?v3 ?v4 ))(member$ ?v1 (fun_app$o (fun_app$p ?v2 ?v3 )?v4 ))))(member$ ?v1 (fun_app$q (case_prod$b ?v2 )?v0 )))):named a40 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a41 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$ ?v0 ?v1 ?v1 )):named a42 ))
(check-sat )
;(get-unsat-core )
