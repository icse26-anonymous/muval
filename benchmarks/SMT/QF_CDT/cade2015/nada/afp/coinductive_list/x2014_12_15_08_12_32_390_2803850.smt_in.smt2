;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_set_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lSup$ ()A_llist_set_a_llist_fun$ )
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun transp$ (A_llist_a_llist_bool_fun_fun$ )Bool )
(declare-fun compact$ (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_set_a_llist_fun$ A_llist_set$ )A_llist$ )
(declare-fun lub_singleton$ (A_llist_set_a_llist_fun$ )Bool )
(declare-fun partial_function_definitions$ (A_llist_a_llist_bool_fun_fun$ A_llist_set_a_llist_fun$ )Bool )
(assert (! (not (compact$ lSup$ lprefix$ xs$ )):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v0 )):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v0 )):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v2 )?v1 ))(or (fun_app$ (fun_app$a lprefix$ ?v0 )?v2 )(fun_app$ (fun_app$a lprefix$ ?v2 )?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v2 ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v2 ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v2 ))):named a7 ))
(assert (! (compact$ lSup$ lprefix$ (lCons$ x$ xs$ )):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (compact$ lSup$ lprefix$ ?v0 )(compact$ lSup$ lprefix$ (lCons$ ?v1 ?v0 )))):named a9 ))
(assert (! (partial_function_definitions$ lprefix$ lSup$ ):named a10 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist$ ))(=> (and (chain$ lprefix$ ?v0 )(forall ((?v2 A_llist$ ))(=> (member$ ?v2 ?v0 )(fun_app$ (fun_app$a lprefix$ ?v2 )?v1 ))))(fun_app$ (fun_app$a lprefix$ (fun_app$b lSup$ ?v0 ))?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist$ ))(=> (and (chain$ lprefix$ ?v0 )(forall ((?v2 A_llist$ ))(=> (member$ ?v2 ?v0 )(fun_app$ (fun_app$a lprefix$ ?v2 )?v1 ))))(fun_app$ (fun_app$a lprefix$ (fun_app$b lSup$ ?v0 ))?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist$ ))(=> (and (chain$ lprefix$ ?v0 )(member$ ?v1 ?v0 ))(fun_app$ (fun_app$a lprefix$ ?v1 )(fun_app$b lSup$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist$ ))(=> (and (chain$ lprefix$ ?v0 )(member$ ?v1 ?v0 ))(fun_app$ (fun_app$a lprefix$ ?v1 )(fun_app$b lSup$ ?v0 )))):named a14 ))
(assert (! (lub_singleton$ lSup$ ):named a15 ))
(assert (! (transp$ lprefix$ ):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (fun_app$a lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$ (fun_app$a lprefix$ lNil$ )?v0 )))):named a17 ))
(check-sat )
;(get-unsat-core )
