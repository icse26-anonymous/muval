;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_llist_set$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_b_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun_set$ 0 )
(declare-sort B_llist_set_b_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun_bool_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_b_llist_fun$ 0 )
(declare-sort B_llist_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_set_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_fun_b_llist_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun$ 0 )
(declare-sort B_llist_a_llist_b_llist_fun_fun_b_llist_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_b_llist_fun_a_llist_b_llist_fun_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun_a_llist_b_llist_fun_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort B_llist$ 0)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun f$ ()A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )
(declare-fun f$a ()A_b_fun$ )
(declare-fun uu$ (A_llist$ )A_llist_b_llist_fun_b_llist_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun uua$ ()A_a_fun$ )
(declare-fun uub$ ()B_b_fun$ )
(declare-fun uuc$ (B_llist_a_llist_b_llist_fun_fun$ )B_llist_b_llist_fun_b_llist_a_llist_b_llist_fun_fun_fun$ )
(declare-fun uud$ (A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )B_llist_a_llist_b_llist_fun_fun_b_llist_a_llist_b_llist_fun_fun_fun$ )
(declare-fun uue$ (A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )A_llist_b_llist_fun_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_a_llist_b_llist_fun_fun_fun$ )
(declare-fun uuf$ (B_llist_a_llist_b_llist_fun_fun$ )A_llist_b_llist_fun_b_llist_fun_a_llist_b_llist_fun_a_llist_b_llist_fun_fun_fun$ )
(declare-fun fixp$ (A_llist_b_llist_fun_set_a_llist_b_llist_fun_fun$ )A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun_a_llist_b_llist_fun_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun_fun$ )
(declare-fun lSup$ ()B_llist_set_b_llist_fun$ )
(declare-fun lmap$ (A_b_fun$ )A_llist_b_llist_fun$ )
(declare-fun chain$ (A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ A_llist_b_llist_fun_set$ )Bool )
(declare-fun lmap$a (B_b_fun$ )B_llist_b_llist_fun$ )
(declare-fun lmap$b (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$c (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun chain$a (B_llist_b_llist_bool_fun_fun$ B_llist_set$ )Bool )
(declare-fun member$ (A_llist_b_llist_fun$ A_llist_b_llist_fun_set$ )Bool )
(declare-fun transp$ (A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ )Bool )
(declare-fun fun_app$ (A_llist_b_llist_fun_b_llist_fun$ A_llist_b_llist_fun$ )B_llist$ )
(declare-fun fun_lub$ (B_llist_set_b_llist_fun$ )A_llist_b_llist_fun_set_a_llist_b_llist_fun_fun$ )
(declare-fun fun_ord$ (B_llist_b_llist_bool_fun_fun$ )A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ )
(declare-fun lfinite$ (B_llist$ )Bool )
(declare-fun lprefix$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun member$a (B_llist$ B_llist_set$ )Bool )
(declare-fun fun_app$a (A_llist_b_llist_fun$ A_llist$ )B_llist$ )
(declare-fun fun_app$b (A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ A_llist_b_llist_fun$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$c (B_llist_a_llist_b_llist_fun_fun$ B_llist$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$d (B_llist_b_llist_fun_b_llist_a_llist_b_llist_fun_fun_fun$ B_llist_b_llist_fun$ )B_llist_a_llist_b_llist_fun_fun$ )
(declare-fun fun_app$e (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$f (A_llist_b_llist_fun_b_llist_fun_a_llist_b_llist_fun_a_llist_b_llist_fun_fun_fun$ A_llist_b_llist_fun_b_llist_fun$ )A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )
(declare-fun fun_app$g (B_llist_a_llist_b_llist_fun_fun_b_llist_a_llist_b_llist_fun_fun_fun$ B_llist_a_llist_b_llist_fun_fun$ )B_llist_a_llist_b_llist_fun_fun$ )
(declare-fun fun_app$h (A_llist_b_llist_fun_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_a_llist_b_llist_fun_fun_fun$ A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )
(declare-fun fun_app$i (B_b_fun$ B$ )B$ )
(declare-fun fun_app$j (A_a_fun$ A$ )A$ )
(declare-fun fun_app$k (A_llist_b_llist_fun_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun$ A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$l (A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun_a_llist_b_llist_fun_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun_fun$ A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ )A_llist_b_llist_fun_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun$ )
(declare-fun fun_app$m (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$n (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$o (A_llist_b_llist_fun_bool_fun$ A_llist_b_llist_fun$ )Bool )
(declare-fun fun_app$p (A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ A_llist_b_llist_fun$ )A_llist_b_llist_fun_bool_fun$ )
(declare-fun fun_app$q (A_llist_b_llist_fun_set_a_llist_b_llist_fun_fun$ A_llist_b_llist_fun_set$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$r (B_llist_set_b_llist_fun$ B_llist_set$ )B_llist$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun monotone$ (A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ A_llist_b_llist_fun_b_llist_fun$ )Bool )
(declare-fun monotone$a (B_llist_b_llist_bool_fun_fun$ A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ B_llist_a_llist_b_llist_fun_fun$ )Bool )
(declare-fun monotone$b (B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_fun$ )Bool )
(declare-fun monotone$c (A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )Bool )
(declare-fun lub_singleton$ (A_llist_b_llist_fun_set_a_llist_b_llist_fun_fun$ )Bool )
(declare-fun lub_singleton$a (B_llist_set_b_llist_fun$ )Bool )
(declare-fun partial_function_definitions$ (B_llist_b_llist_bool_fun_fun$ B_llist_set_b_llist_fun$ )Bool )
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_llist_fun$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(fun_app$a (fun_app$b f$ ?v1 )?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 B_llist_a_llist_b_llist_fun_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$c (fun_app$d (uuc$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$d (uuc$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 B_llist_a_llist_b_llist_fun_fun$ )(?v1 A_llist_b_llist_fun_b_llist_fun$ )(?v2 A_llist_b_llist_fun$ ))(! (= (fun_app$b (fun_app$f (uuf$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$f (uuf$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )(?v1 B_llist_a_llist_b_llist_fun_fun$ )(?v2 B_llist$ ))(! (= (fun_app$c (fun_app$g (uud$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$g (uud$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )(?v1 A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )(?v2 A_llist_b_llist_fun$ ))(! (= (fun_app$b (fun_app$h (uue$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$h (uue$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$i uub$ ?v0 )?v0 ):pattern ((fun_app$i uub$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$j uua$ ?v0 )?v0 ):pattern ((fun_app$j uua$ ?v0 )))):named a6 ))
(assert (! (not (= (fun_app$a (lmap$ f$a )xs$ )(fun_app$a (fun_app$k (fun_app$l (fixp$ (fun_lub$ lSup$ ))(fun_ord$ lprefix$ ))f$ )xs$ ))):named a7 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$m (fun_app$n lprefix$ ?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$m (fun_app$n lprefix$ ?v0 )?v0 )):named a9 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 A_llist_b_llist_fun$ ))(=> (and (fun_app$o (fun_app$p (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$o (fun_app$p (fun_ord$ lprefix$ )?v1 )?v2 ))(fun_app$o (fun_app$p (fun_ord$ lprefix$ )?v0 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 A_llist_b_llist_fun$ ))(=> (and (fun_app$o (fun_app$p (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$o (fun_app$p (fun_ord$ lprefix$ )?v1 )?v0 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$m (fun_app$n lprefix$ ?v0 )?v1 )(fun_app$m (fun_app$n lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$m (fun_app$n lprefix$ ?v0 )?v1 )(fun_app$m (fun_app$n lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$m (fun_app$n lprefix$ ?v0 )?v1 )(fun_app$m (fun_app$n lprefix$ ?v2 )?v1 ))(or (fun_app$m (fun_app$n lprefix$ ?v0 )?v2 )(fun_app$m (fun_app$n lprefix$ ?v2 )?v0 )))):named a14 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$m (fun_app$n lprefix$ ?v0 )?v1 )(fun_app$m (fun_app$n lprefix$ ?v1 )?v2 ))(fun_app$m (fun_app$n lprefix$ ?v0 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$m (fun_app$n lprefix$ ?v0 )?v1 )(fun_app$m (fun_app$n lprefix$ ?v1 )?v2 ))(fun_app$m (fun_app$n lprefix$ ?v0 )?v2 ))):named a16 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ ))(fun_app$o (fun_app$p (fun_ord$ lprefix$ )?v0 )?v0 )):named a17 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun_set$ )(?v1 A_llist_b_llist_fun$ ))(=> (and (chain$ (fun_ord$ lprefix$ )?v0 )(forall ((?v2 A_llist_b_llist_fun$ ))(=> (member$ ?v2 ?v0 )(fun_app$o (fun_app$p (fun_ord$ lprefix$ )?v2 )?v1 ))))(fun_app$o (fun_app$p (fun_ord$ lprefix$ )(fun_app$q (fun_lub$ lSup$ )?v0 ))?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun_set$ )(?v1 A_llist_b_llist_fun$ ))(=> (and (chain$ (fun_ord$ lprefix$ )?v0 )(member$ ?v1 ?v0 ))(fun_app$o (fun_app$p (fun_ord$ lprefix$ )?v1 )(fun_app$q (fun_lub$ lSup$ )?v0 )))):named a19 ))
(assert (! (lub_singleton$ (fun_lub$ lSup$ )):named a20 ))
(assert (! (forall ((?v0 A_llist$ ))(monotone$ (fun_ord$ lprefix$ )lprefix$ (uu$ ?v0 ))):named a21 ))
(assert (! (transp$ (fun_ord$ lprefix$ )):named a22 ))
(assert (! (partial_function_definitions$ lprefix$ lSup$ ):named a23 ))
(assert (! (forall ((?v0 B_llist_set$ )(?v1 B_llist$ ))(=> (and (chain$a lprefix$ ?v0 )(forall ((?v2 B_llist$ ))(=> (member$a ?v2 ?v0 )(fun_app$m (fun_app$n lprefix$ ?v2 )?v1 ))))(fun_app$m (fun_app$n lprefix$ (fun_app$r lSup$ ?v0 ))?v1 ))):named a24 ))
(assert (! (forall ((?v0 B_llist_set$ )(?v1 B_llist$ ))(=> (and (chain$a lprefix$ ?v0 )(forall ((?v2 B_llist$ ))(=> (member$a ?v2 ?v0 )(fun_app$m (fun_app$n lprefix$ ?v2 )?v1 ))))(fun_app$m (fun_app$n lprefix$ (fun_app$r lSup$ ?v0 ))?v1 ))):named a25 ))
(assert (! (forall ((?v0 B_llist_set$ )(?v1 B_llist$ ))(=> (and (chain$a lprefix$ ?v0 )(member$a ?v1 ?v0 ))(fun_app$m (fun_app$n lprefix$ ?v1 )(fun_app$r lSup$ ?v0 )))):named a26 ))
(assert (! (forall ((?v0 B_llist_set$ )(?v1 B_llist$ ))(=> (and (chain$a lprefix$ ?v0 )(member$a ?v1 ?v0 ))(fun_app$m (fun_app$n lprefix$ ?v1 )(fun_app$r lSup$ ?v0 )))):named a27 ))
(assert (! (lub_singleton$a lSup$ ):named a28 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lfinite$ (fun_app$e (lmap$a ?v0 )?v1 ))(lfinite$ ?v1 ))):named a29 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lfinite$a (lmap$b ?v0 ?v1 ))(lfinite$ ?v1 ))):named a30 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$a (lmap$c ?v0 ?v1 ))(lfinite$a ?v1 ))):named a31 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$a (lmap$ ?v0 )?v1 ))(lfinite$a ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lmap$c uua$ ?v0 )?v0 )):named a33 ))
(assert (! (forall ((?v0 B_llist$ ))(= (fun_app$e (lmap$a uub$ )?v0 )?v0 )):named a34 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_a_llist_b_llist_fun_fun$ )(?v2 B_llist_b_llist_bool_fun_fun$ )(?v3 B_llist_b_llist_fun$ ))(=> (and (monotone$a ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$b ?v2 ?v0 ?v3 ))(monotone$a ?v2 (fun_ord$ lprefix$ )(fun_app$d (uuc$ ?v1 )?v3 )))):named a35 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ )(?v1 A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )(?v2 B_llist_b_llist_bool_fun_fun$ )(?v3 B_llist_a_llist_b_llist_fun_fun$ ))(=> (and (monotone$c ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$a ?v2 ?v0 ?v3 ))(monotone$a ?v2 (fun_ord$ lprefix$ )(fun_app$g (uud$ ?v1 )?v3 )))):named a36 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ )(?v1 A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )(?v2 A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ )(?v3 A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ ))(=> (and (monotone$c ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$c ?v2 ?v0 ?v3 ))(monotone$c ?v2 (fun_ord$ lprefix$ )(fun_app$h (uue$ ?v1 )?v3 )))):named a37 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_a_llist_b_llist_fun_fun$ )(?v2 A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ )(?v3 A_llist_b_llist_fun_b_llist_fun$ ))(=> (and (monotone$a ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$ ?v2 ?v0 ?v3 ))(monotone$c ?v2 (fun_ord$ lprefix$ )(fun_app$f (uuf$ ?v1 )?v3 )))):named a38 ))
(check-sat )
;(get-unsat-core )
