;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_list$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun a$ ()A$ )
(declare-fun m$ ()Nat$ )
(declare-fun p$ ()A_bool_fun$ )
(declare-fun x$ ()A$ )
(declare-fun ma$ ()Nat$ )
(declare-fun mb$ ()Nat$ )
(declare-fun na$ ()Nat$ )
(declare-fun nb$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun nth$ (A_list$ )Nat_a_fun$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun compow$ (Nat$ )A_a_fun_a_a_fun_fun$ )
(declare-fun fun_app$ (Nat_a_fun$ Nat$ )A$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun ldistinct$ (A_llist$ )Bool )
(assert (! (not (= (fun_app$ (lnth$ xs$ )nb$ )a$ )):named a0 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= mb$ (suc$ ?v0 ))false ))false ):named a1 ))
(assert (! (= (fun_app$ (lnth$ xsa$ )mb$ )a$ ):named a2 ))
(assert (! (= (fun_app$ (lnth$ xsa$ )(suc$ nb$ ))a$ ):named a3 ))
(assert (! (fun_app$a p$ a$ ):named a4 ))
(assert (! (= (fun_app$ (lnth$ xs$a )ma$ )a$ ):named a5 ))
(assert (! (= (fun_app$ (lnth$ xs$a )na$ )a$ ):named a6 ))
(assert (! (less_eq$ (suc$ nb$ )mb$ ):named a7 ))
(assert (! (less_eq$ nb$ m$ ):named a8 ))
(assert (! (= xsa$ (lCons$ x$ xs$ )):named a9 ))
(assert (! (less$ (enat$ nb$ )(llength$ xs$ )):named a10 ))
(assert (! (ldistinct$ (lfilter$ p$ xs$ )):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 Nat$ ))(! (= (fun_app$ (lnth$ (lCons$ ?v0 ?v1 ))(suc$ ?v2 ))(fun_app$ (lnth$ ?v1 )?v2 )):pattern ((fun_app$ (lnth$ (lCons$ ?v0 ?v1 ))(suc$ ?v2 ))))):named a12 ))
(assert (! (less$ (enat$ (suc$ nb$ ))(llength$ xsa$ )):named a13 ))
(assert (! (less$ (enat$ m$ )(llength$ xs$ )):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 Nat$ ))(= (fun_app$ (lnth$ (iterates$ ?v0 ?v1 ))?v2 )(fun_app$b (fun_app$c (compow$ ?v2 )?v0 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$ (lnth$ (lCons$ ?v0 ?v1 ))zero$ )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_list$ ))(= (lnth$ (llist_of$ ?v0 ))(nth$ ?v0 ))):named a17 ))
(check-sat )
;(get-unsat-core )
