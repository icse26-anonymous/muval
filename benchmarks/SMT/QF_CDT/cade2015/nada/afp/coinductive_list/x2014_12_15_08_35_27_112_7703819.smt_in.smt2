;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_list_a_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_list$ 0)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun f$ (A_a_a_fun_fun$ A$ )A_list_a_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun plus$ ()A_a_a_fun_fun$ )
(declare-fun zero$ ()A$ )
(declare-fun foldr$ (A_a_a_fun_fun$ A_list$ A$ )A$ )
(declare-fun append$ (A_list$ A_list$ )A_list$ )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun listsum$ (A_a_a_fun_fun$ A$ )A_list_a_fun$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$b (A_list_a_fun$ A_list$ )A$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun llistsum$ (A_a_a_fun_fun$ A$ A_llist$ )A$ )
(assert (! (not (= (llistsum$ plus$ zero$ (lappend$ xs$ ys$ ))(fun_app$ (fun_app$a plus$ (llistsum$ plus$ zero$ xs$ ))(llistsum$ plus$ zero$ ys$ )))):named a0 ))
(assert (! (lfinite$ xs$ ):named a1 ))
(assert (! (lfinite$ ys$ ):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (fun_app$ (fun_app$a plus$ (fun_app$ (fun_app$a plus$ ?v0 )?v1 ))?v2 )(fun_app$ (fun_app$a plus$ ?v0 )(fun_app$ (fun_app$a plus$ ?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (lappend$ ?v0 ?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ ))(= (fun_app$ (fun_app$a plus$ ?v0 )zero$ )?v0 )):named a5 ))
(assert (! (forall ((?v0 A$ ))(= (fun_app$ (fun_app$a plus$ zero$ )?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (lappend$ ?v0 ?v1 )?v0 )):pattern ((lappend$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (llistsum$ plus$ zero$ ?v0 )(ite (lfinite$ ?v0 )(fun_app$b (listsum$ plus$ zero$ )(list_of$ ?v0 ))zero$ )):pattern ((llistsum$ plus$ zero$ ?v0 )))):named a9 ))
(assert (! (= (listsum$ plus$ zero$ )(f$ plus$ zero$ )):named a10 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$b (listsum$ plus$ zero$ )?v0 )(foldr$ plus$ ?v0 zero$ )):pattern ((fun_app$b (listsum$ plus$ zero$ )?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_list$ ))(= (llistsum$ plus$ zero$ (llist_of$ ?v0 ))(fun_app$b (listsum$ plus$ zero$ )?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lprefix$ (lappend$ ?v0 ?v1 )(lappend$ ?v0 ?v2 ))(=> (lfinite$ ?v0 )(lprefix$ ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (lfinite$ ?v0 )(= (lfilter$ ?v1 (lappend$ ?v0 ?v2 ))(lappend$ (lfilter$ ?v1 ?v0 )(lfilter$ ?v1 ?v2 ))))):named a14 ))
(assert (! (= (fun_app$b (listsum$ plus$ zero$ )nil$ )zero$ ):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (fun_app$b (listsum$ plus$ zero$ )(cons$ ?v0 ?v1 ))(fun_app$ (fun_app$a plus$ ?v0 )(fun_app$b (listsum$ plus$ zero$ )?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (fun_app$b (listsum$ plus$ zero$ )(append$ ?v0 ?v1 ))(fun_app$ (fun_app$a plus$ (fun_app$b (listsum$ plus$ zero$ )?v0 ))(fun_app$b (listsum$ plus$ zero$ )?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (= (lfilter$ ?v0 ?v1 )(lappend$ ?v2 ?v3 ))(lfinite$ ?v2 ))(exists ((?v4 A_llist$ )(?v5 A_llist$ ))(and (= ?v1 (lappend$ ?v4 ?v5 ))(and (lfinite$ ?v4 )(and (= ?v2 (lfilter$ ?v0 ?v4 ))(= ?v3 (lfilter$ ?v0 ?v5 )))))))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (= (llength$ ?v0 )(llength$ ?v1 ))(= (= (lappend$ ?v0 ?v2 )(lappend$ ?v1 ?v3 ))(and (= ?v0 ?v1 )(=> (lfinite$ ?v0 )(= ?v2 ?v3 )))))):named a19 ))
(check-sat )
;(get-unsat-core )
