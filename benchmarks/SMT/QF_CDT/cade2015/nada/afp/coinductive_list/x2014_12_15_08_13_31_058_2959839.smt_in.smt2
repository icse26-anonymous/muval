;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_list_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun a$ ()A$ )
(declare-fun xs$ ()A_list$ )
(declare-fun ys$ ()A_list$ )
(declare-fun xsa$ ()A_list$ )
(declare-fun ysa$ ()A_list$ )
(declare-fun null$ (A_list$ )Bool )
(declare-fun shift$ (A_list_set$ A$ )A_list_set$ )
(declare-fun member$ (A_list$ )A_bool_fun$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun listMem$ (A$ A_list$ )Bool )
(declare-fun list_ex$ (A_bool_fun$ A_list$ )Bool )
(declare-fun member$a (A_list$ A_list_set$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun lexordp_eq$ (A_a_bool_fun_fun$ A_list$ A_list$ )Bool )
(assert (! (not (= (cons$ a$ xsa$ )ysa$ )):named a0 ))
(assert (! (= (llist_of$ xs$ )(llist_of$ ys$ )):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(=> (= (llist_of$ xsa$ )(llist_of$ ?v0 ))(= xsa$ ?v0 ))):named a2 ))
(assert (! (= (llist_of$ (cons$ a$ xsa$ ))(llist_of$ ysa$ )):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(not (= (cons$ ?v0 ?v1 )?v1 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ ))(! (= (fun_app$ (member$ (cons$ ?v0 ?v1 ))?v2 )(or (= ?v0 ?v2 )(fun_app$ (member$ ?v1 )?v2 ))):pattern ((fun_app$ (member$ (cons$ ?v0 ?v1 ))?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_set$ )(?v2 A$ ))(=> (member$a ?v0 (shift$ ?v1 ?v2 ))(member$a (cons$ ?v2 ?v0 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (null$ (cons$ ?v0 ?v1 ))false ):pattern ((cons$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_list$ ))(! (= (list_ex$ ?v0 (cons$ ?v1 ?v2 ))(or (fun_app$ ?v0 ?v1 )(list_ex$ ?v0 ?v2 ))):pattern ((list_ex$ ?v0 (cons$ ?v1 ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(= (listMem$ ?v0 ?v1 )(or (exists ((?v2 A$ )(?v3 A_list$ ))(and (= ?v0 ?v2 )(= ?v1 (cons$ ?v2 ?v3 ))))(exists ((?v2 A$ )(?v3 A_list$ )(?v4 A$ ))(and (= ?v0 ?v2 )(and (= ?v1 (cons$ ?v4 ?v3 ))(listMem$ ?v2 ?v3 ))))))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(=> (and (listMem$ ?v0 ?v1 )(and (forall ((?v2 A$ )(?v3 A_list$ ))(=> (and (= ?v0 ?v2 )(= ?v1 (cons$ ?v2 ?v3 )))false ))(forall ((?v2 A$ )(?v3 A_list$ )(?v4 A$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 (cons$ ?v4 ?v3 ))(listMem$ ?v2 ?v3 )))false ))))false )):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ ))(=> (listMem$ ?v0 ?v1 )(listMem$ ?v0 (cons$ ?v2 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(listMem$ ?v0 (cons$ ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_list$ )(?v3 A$ )(?v4 A_list$ ))(! (= (lexordp_eq$ ?v0 (cons$ ?v1 ?v2 )(cons$ ?v3 ?v4 ))(or (fun_app$ (fun_app$a ?v0 ?v1 )?v3 )(and (not (fun_app$ (fun_app$a ?v0 ?v3 )?v1 ))(lexordp_eq$ ?v0 ?v2 ?v4 )))):pattern ((lexordp_eq$ ?v0 (cons$ ?v1 ?v2 )(cons$ ?v3 ?v4 ))))):named a14 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ ))(lexordp_eq$ ?v0 ?v1 ?v1 )):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_list$ )(?v4 A_list$ ))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(lexordp_eq$ ?v0 (cons$ ?v1 ?v3 )(cons$ ?v2 ?v4 )))):named a16 ))
(check-sat )
;(get-unsat-core )
