;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Enat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Enat_nat_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_set_a_llist_fun$ 0 )
(declare-sort B_llist_set_b_llist_fun$ 0 )
(declare-sort A_llist_b_llist_prod_set$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_llist_prod_nat_fun$ 0 )
(declare-sort B_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort Nat_a_llist_b_llist_prod_fun$ 0 )
(declare-sort A_llist_b_llist_prod_bool_fun$ 0 )
(declare-sort A_llist_b_llist_prod_enat_fun$ 0 )
(declare-sort Enat_a_llist_b_llist_prod_fun$ 0 )
(declare-sort A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ 0 )
(declare-sort A_llist_b_llist_prod_set_a_llist_b_llist_prod_fun$ 0 )
(declare-sort A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-sort A_llist_b_llist_prod$ 0)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun fst$ (A_llist_b_llist_prod$)A_llist$)
(declare-fun snd$ (A_llist_b_llist_prod$)B_llist$)
(declare-fun pair$ (A_llist$ B_llist$ )A_llist_b_llist_prod$)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun p$ (A_llist$ )B_llist_bool_fun$ )
(declare-fun uu$ ()Enat_a_llist_b_llist_prod_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun top$ ()Nat_set$ )
(declare-fun uua$ ()A_llist_b_llist_prod_bool_fun$ )
(declare-fun uub$ ()Enat_enat_fun$ )
(declare-fun uuc$ ()Nat_nat_fun$ )
(declare-fun enat$ ()Nat_enat_fun$ )
(declare-fun lSup$ ()A_llist_set_a_llist_fun$ )
(declare-fun top$a ()Enat_set$ )
(declare-fun top$b ()A_llist_b_llist_prod_set$ )
(declare-fun chain$ (A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ A_llist_b_llist_prod_set$ )Bool )
(declare-fun image$ (Enat_a_llist_b_llist_prod_fun$ Enat_set$ )A_llist_b_llist_prod_set$ )
(declare-fun lSup$a ()B_llist_set_b_llist_fun$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun image$a (Nat_enat_fun$ Nat_set$ )Enat_set$ )
(declare-fun image$b (Enat_enat_fun$ Enat_set$ )Enat_set$ )
(declare-fun image$c (Nat_nat_fun$ Nat_set$ )Nat_set$ )
(declare-fun image$d (Nat_a_llist_b_llist_prod_fun$ Nat_set$ )A_llist_b_llist_prod_set$ )
(declare-fun image$e (Enat_nat_fun$ Enat_set$ )Nat_set$ )
(declare-fun image$f (A_llist_b_llist_prod_nat_fun$ A_llist_b_llist_prod_set$ )Nat_set$ )
(declare-fun image$g (A_llist_b_llist_prod_enat_fun$ A_llist_b_llist_prod_set$ )Enat_set$ )
(declare-fun image$h (A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ A_llist_b_llist_prod_set$ )A_llist_b_llist_prod_set$ )
(declare-fun ltake$a (Enat$ B_llist$ )B_llist$ )
(declare-fun member$ (Enat$ Enat_set$ )Bool )
(declare-fun fun_app$ (A_llist_b_llist_prod_bool_fun$ A_llist_b_llist_prod$ )Bool )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun member$a (A_llist_b_llist_prod$ A_llist_b_llist_prod_set$ )Bool )
(declare-fun member$b (Nat$ Nat_set$ )Bool )
(declare-fun fun_app$a (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$b (Enat_a_llist_b_llist_prod_fun$ Enat$ )A_llist_b_llist_prod$ )
(declare-fun fun_app$c (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun fun_app$d (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$e (A_llist_b_llist_prod_set_a_llist_b_llist_prod_fun$ A_llist_b_llist_prod_set$ )A_llist_b_llist_prod$ )
(declare-fun fun_app$f (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$g (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$h (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$i (A_llist_b_llist_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$j (B_llist_a_llist_bool_fun_fun$ B_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$k (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun fun_app$l (Nat_a_llist_b_llist_prod_fun$ Nat$ )A_llist_b_llist_prod$ )
(declare-fun fun_app$m (Enat_nat_fun$ Enat$ )Nat$ )
(declare-fun fun_app$n (A_llist_b_llist_prod_nat_fun$ A_llist_b_llist_prod$ )Nat$ )
(declare-fun fun_app$o (A_llist_b_llist_prod_enat_fun$ A_llist_b_llist_prod$ )Enat$ )
(declare-fun fun_app$p (A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ A_llist_b_llist_prod$ )A_llist_b_llist_prod$ )
(declare-fun lprefix$a ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun prod_lub$ (A_llist_set_a_llist_fun$ B_llist_set_b_llist_fun$ )A_llist_b_llist_prod_set_a_llist_b_llist_prod_fun$ )
(declare-fun rel_prod$ (A_llist_a_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ )A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ )
(declare-fun admissible$ (A_llist_b_llist_prod_set_a_llist_b_llist_prod_fun$ A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ A_llist_b_llist_prod_bool_fun$ )Bool )
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(! (= (fun_app$ uua$ ?v0 )(fun_app$a (p$ (fst$ ?v0 ))(snd$ ?v0 ))):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b uu$ ?v0 )(pair$ (ltake$ ?v0 xs$ )(ltake$a ?v0 ys$ ))):pattern ((fun_app$b uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$c uub$ ?v0 )?v0 ):pattern ((fun_app$c uub$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$d uuc$ ?v0 )?v0 ):pattern ((fun_app$d uuc$ ?v0 )))):named a3 ))
(assert (! (not (fun_app$a (p$ (fst$ (fun_app$e (prod_lub$ lSup$ lSup$a )(image$ uu$ (image$a enat$ top$ )))))(snd$ (fun_app$e (prod_lub$ lSup$ lSup$a )(image$ uu$ (image$a enat$ top$ )))))):named a4 ))
(assert (! (admissible$ (prod_lub$ lSup$ lSup$a )(rel_prod$ lprefix$ lprefix$a )uua$ ):named a5 ))
(assert (! (chain$ (rel_prod$ lprefix$ lprefix$a )(image$ uu$ (image$a enat$ top$ ))):named a6 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(= (pair$ (fst$ ?v0 )(snd$ ?v0 ))?v0 )):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(fun_app$f (fun_app$g lprefix$ (ltake$ ?v0 ?v1 ))?v1 )):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(fun_app$a (fun_app$h lprefix$a (ltake$a ?v0 ?v1 ))?v1 )):named a9 ))
(assert (! (forall ((?v0 Enat_set$ ))(= (image$b uub$ ?v0 )?v0 )):named a10 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (image$c uuc$ ?v0 )?v0 )):named a11 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(= ?v0 (pair$ (fst$ ?v0 )(snd$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(=> (=> (= ?v0 (pair$ (fst$ ?v0 )(snd$ ?v0 )))false )false )):named a13 ))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_llist_b_llist_prod$ ))(=> (and (fun_app$a (fun_app$i ?v0 ?v1 )?v2 )(= ?v3 (pair$ ?v1 ?v2 )))(fun_app$a (fun_app$i ?v0 (fst$ ?v3 ))(snd$ ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 B_llist_bool_fun$ )(?v3 B_llist$ ))(=> (and (fun_app$f ?v0 ?v1 )(fun_app$a ?v2 ?v3 ))(and (fun_app$f ?v0 (fst$ (pair$ ?v1 ?v3 )))(fun_app$a ?v2 (snd$ (pair$ ?v1 ?v3 )))))):named a15 ))
(assert (! (forall ((?v0 B_llist_a_llist_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (fun_app$f (fun_app$j ?v0 ?v1 )?v2 )(fun_app$f (fun_app$j ?v0 (snd$ (pair$ ?v2 ?v1 )))(fst$ (pair$ ?v2 ?v1 ))))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$k enat$ ?v0 )(fun_app$k enat$ ?v1 ))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 Enat$ ))(= (member$ ?v0 top$a )true )):named a18 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(= (member$a ?v0 top$b )true )):named a19 ))
(assert (! (forall ((?v0 Nat$ ))(= (member$b ?v0 top$ )true )):named a20 ))
(assert (! (forall ((?v0 Enat$ ))(member$ ?v0 top$a )):named a21 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(member$a ?v0 top$b )):named a22 ))
(assert (! (forall ((?v0 Nat$ ))(member$b ?v0 top$ )):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ )(?v3 Nat_set$ ))(=> (and (= ?v0 (fun_app$d ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$b ?v0 (image$c ?v1 ?v3 )))):named a26 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 Nat_a_llist_b_llist_prod_fun$ )(?v2 Nat$ )(?v3 Nat_set$ ))(=> (and (= ?v0 (fun_app$l ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$a ?v0 (image$d ?v1 ?v3 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat_nat_fun$ )(?v2 Enat$ )(?v3 Enat_set$ ))(=> (and (= ?v0 (fun_app$m ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$b ?v0 (image$e ?v1 ?v3 )))):named a28 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat_enat_fun$ )(?v2 Enat$ )(?v3 Enat_set$ ))(=> (and (= ?v0 (fun_app$c ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$b ?v1 ?v3 )))):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_b_llist_prod_nat_fun$ )(?v2 A_llist_b_llist_prod$ )(?v3 A_llist_b_llist_prod_set$ ))(=> (and (= ?v0 (fun_app$n ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$b ?v0 (image$f ?v1 ?v3 )))):named a30 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_b_llist_prod_enat_fun$ )(?v2 A_llist_b_llist_prod$ )(?v3 A_llist_b_llist_prod_set$ ))(=> (and (= ?v0 (fun_app$o ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$g ?v1 ?v3 )))):named a31 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ )(?v2 A_llist_b_llist_prod$ )(?v3 A_llist_b_llist_prod_set$ ))(=> (and (= ?v0 (fun_app$p ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (image$h ?v1 ?v3 )))):named a32 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 Enat_a_llist_b_llist_prod_fun$ )(?v2 Enat$ )(?v3 Enat_set$ ))(=> (and (= ?v0 (fun_app$b ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$ ?v1 ?v3 )))):named a33 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat_enat_fun$ )(?v2 Nat$ )(?v3 Nat_set$ ))(=> (and (= ?v0 (fun_app$k ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$ ?v0 (image$a ?v1 ?v3 )))):named a34 ))
(check-sat )
;(get-unsat-core )
