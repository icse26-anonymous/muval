;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-sort A_llist_list$ 0)
(declare-fun nil$ ()A_llist_list$)
(declare-fun hd$ (A_llist_list$)A_llist$)
(declare-fun tl$ (A_llist_list$)A_llist_list$)
(declare-fun cons$ (A_llist$ A_llist_list$ )A_llist_list$)
(declare-fun m$ ()Nat$ )
(declare-fun n$ ()Nat$ )
(declare-fun n$a ()Nat$ )
(declare-fun na$ ()Nat$ )
(declare-fun uu$ ()Nat_enat_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun one$ ()Enat$ )
(declare-fun uua$ ()Nat_enat_fun$ )
(declare-fun uub$ ()Nat_enat_fun$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist_llist$ Nat$ )A_llist$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun size$ (A_llist_list$ )Nat$ )
(declare-fun xss$a ()A_llist_list$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun zero$ ()Enat$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun lnth$a (A_llist$ Nat$ )A$ )
(declare-fun plus$a (Enat$ Enat$ )Enat$ )
(declare-fun zero$a ()Nat$ )
(declare-fun setsum$ (Nat_enat_fun$ Nat_set$ )Enat$ )
(declare-fun fun_app$ (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lessThan$ (Nat$ )Nat_set$ )
(declare-fun llength$a (A_llist_llist$ )Enat$ )
(declare-fun atLeastLessThan$ (Nat$ Nat$ )Nat_set$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(llength$ (lnth$ (lCons$a xs$ xss$ )?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uub$ ?v0 )(llength$ (lnth$ xssa$ (plus$ ?v0 (size$ xss$a ))))):pattern ((fun_app$ uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uua$ ?v0 )(llength$ (lnth$ xssa$ ?v0 ))):pattern ((fun_app$ uua$ ?v0 )))):named a2 ))
(assert (! (not (= (eSuc$ (plus$a (setsum$ uu$ (lessThan$ m$ ))(enat$ n$ )))(plus$a (setsum$ uua$ (lessThan$ (plus$ m$ (size$ xss$a ))))(enat$ n$ )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (= (setsum$ uu$ (lessThan$ m$ ))(enat$ n$a )):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (llength$ (lCons$ ?v0 ?v1 ))(eSuc$ (llength$ ?v1 ))):pattern ((lCons$ ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (llength$a (lCons$a ?v0 ?v1 ))(eSuc$ (llength$a ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a8 ))
(assert (! (= (setsum$ uua$ (lessThan$ (size$ xss$a )))zero$ ):named a9 ))
(assert (! (= (setsum$ uua$ (lessThan$ (plus$ m$ (size$ xss$a ))))(plus$a zero$ (plus$a one$ (setsum$ uu$ (atLeastLessThan$ zero$a m$ ))))):named a10 ))
(assert (! (= (setsum$ uua$ (lessThan$ (plus$ m$ (size$ xss$a ))))(plus$a (setsum$ uua$ (lessThan$ (size$ xss$a )))(setsum$ uua$ (atLeastLessThan$ (size$ xss$a )(plus$ m$ (size$ xss$a )))))):named a11 ))
(assert (! (= (atLeastLessThan$ (size$ xss$a )(plus$ m$ (size$ xss$a )))(atLeastLessThan$ (plus$ zero$a (size$ xss$a ))(plus$ m$ (size$ xss$a )))):named a12 ))
(assert (! (= (enat$ na$ )(plus$a (setsum$ uu$ (lessThan$ m$ ))(enat$ n$ ))):named a13 ))
(assert (! (less$ (enat$ n$ )(llength$ (lnth$ (lCons$a xs$ xss$ )m$ ))):named a14 ))
(assert (! (= (setsum$ uua$ (atLeastLessThan$ (plus$ zero$a (size$ xss$a ))(plus$ m$ (size$ xss$a ))))(setsum$ uub$ (atLeastLessThan$ zero$a m$ ))):named a15 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (and (= (setsum$ uu$ (lessThan$ m$ ))(enat$ ?v0 ))(= na$ (plus$ ?v0 n$ )))false ))false ):named a16 ))
(assert (! (less$a zero$a m$ ):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lnth$a (lCons$ ?v0 ?v1 )zero$a )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lnth$ (lCons$a ?v0 ?v1 )zero$a )?v0 ):pattern ((lCons$a ?v0 ?v1 )))):named a19 ))
(assert (! (less$ (enat$ n$ )(llength$ (lnth$ xssa$ (plus$ m$ (size$ xss$a ))))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (plus$a (enat$ ?v0 )(enat$ ?v1 ))(enat$ (plus$ ?v0 ?v1 ))):pattern ((plus$a (enat$ ?v0 )(enat$ ?v1 ))))):named a21 ))
(assert (! (= na$ (plus$ n$a n$ )):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (= (plus$a (enat$ ?v0 )?v1 )(plus$a (enat$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a23 ))
(check-sat )
;(get-unsat-core )
