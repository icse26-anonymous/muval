;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-sort Nat_bool_fun_nat_bool_fun_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun n$ ()Nat$ )
(declare-fun p$ ()A_bool_fun$ )
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun inf$ (Nat_set$ Nat_set$ )Nat_set$ )
(declare-fun uua$ ()Nat_bool_fun$ )
(declare-fun uub$ ()Nat_bool_fun$ )
(declare-fun uuc$ (A_llist$ )Nat_bool_fun$ )
(declare-fun uud$ (A_llist$ )Nat_bool_fun$ )
(declare-fun uue$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uuf$ (Nat_bool_fun$ )Nat_bool_fun_nat_bool_fun_fun$ )
(declare-fun uug$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uuh$ (Nat_bool_fun$ )Nat_bool_fun_nat_bool_fun_fun$ )
(declare-fun uui$ ()A_bool_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun inf$a (A_set$ A_set$ )A_set$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun finite$ (Nat_set$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun finite$a (A_set$ )Bool )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun member$a (Nat$ Nat_set$ )Bool )
(declare-fun collect$a (A_bool_fun$ )A_set$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (Nat_bool_fun_nat_bool_fun_fun$ Nat_bool_fun$ )Nat_bool_fun$ )
(declare-fun fun_app$c (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uua$ ?v0 )(less$ (enat$ ?v0 )(llength$ (ltl$ (ldropWhile$ uu$ xsa$ ))))):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uub$ ?v0 )(fun_app$a p$ (lnth$ (ltl$ (ldropWhile$ uu$ xsa$ ))?v0 ))):pattern ((fun_app$ uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a uu$ ?v0 )(not (fun_app$a p$ ?v0 ))):pattern ((fun_app$a uu$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )(and (less$ (enat$ ?v1 )(llength$ ?v0 ))(fun_app$a p$ (lnth$ ?v0 ?v1 )))):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(! (= (fun_app$ (uud$ ?v0 )?v1 )(less$ (enat$ ?v1 )(llength$ ?v0 ))):pattern ((fun_app$ (uud$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$b (uuf$ ?v0 )?v1 )?v2 )(or (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uuf$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$a (fun_app$c (uue$ ?v0 )?v1 )?v2 )(or (fun_app$a ?v0 ?v2 )(fun_app$a ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$c (uue$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$b (uuh$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uuh$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$a (fun_app$c (uug$ ?v0 )?v1 )?v2 )(and (fun_app$a ?v0 ?v2 )(fun_app$a ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$c (uug$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a uui$ ?v0 )true ):pattern ((fun_app$a uui$ ?v0 )))):named a9 ))
(assert (! (not (finite$ (inf$ (collect$ uua$ )(collect$ uub$ )))):named a10 ))
(assert (! (not (lfinite$ xs$ )):named a11 ))
(assert (! (not (lfinite$ xsa$ )):named a12 ))
(assert (! (not (lnull$ (lfilter$ p$ xsa$ ))):named a13 ))
(assert (! (lfinite$ (lfilter$ p$ xsa$ )):named a14 ))
(assert (! (lfinite$ (lfilter$ p$ xs$ )):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (= (ltl$ (lfilter$ p$ xsa$ ))(lfilter$ p$ ?v0 ))(not (lfinite$ ?v0 )))(finite$ (collect$ (uuc$ ?v0 ))))):named a16 ))
(assert (! (= (llength$ (ltakeWhile$ uu$ xsa$ ))(enat$ n$ )):named a17 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(finite$ (collect$ (uud$ ?v0 ))))):named a18 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(=> (or (finite$a ?v0 )(finite$a ?v1 ))(finite$a (inf$a ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(=> (or (finite$ ?v0 )(finite$ ?v1 ))(finite$ (inf$ ?v0 ?v1 )))):named a20 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= (llength$ (ltakeWhile$ uu$ xsa$ ))(enat$ ?v0 ))false ))false ):named a21 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ (ltl$ ?v0 ))(lfinite$ ?v0 ))):named a22 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ ))(= (finite$a (collect$a (fun_app$c (uue$ ?v0 )?v1 )))(and (finite$a (collect$a ?v0 ))(finite$a (collect$a ?v1 ))))):named a23 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ ))(= (finite$ (collect$ (fun_app$b (uuf$ ?v0 )?v1 )))(and (finite$ (collect$ ?v0 ))(finite$ (collect$ ?v1 ))))):named a24 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ ))(=> (or (finite$a (collect$a ?v0 ))(finite$a (collect$a ?v1 )))(finite$a (collect$a (fun_app$c (uug$ ?v0 )?v1 ))))):named a25 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ ))(=> (or (finite$ (collect$ ?v0 ))(finite$ (collect$ ?v1 )))(finite$ (collect$ (fun_app$b (uuh$ ?v0 )?v1 ))))):named a26 ))
(assert (! (exists ((?v0 A$ ))(and (member$ ?v0 (lset$ xsa$ ))(fun_app$a p$ ?v0 ))):named a27 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfilter$ uui$ ?v0 )?v0 )):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (member$ ?v0 (inf$a ?v1 ?v2 ))(and (member$ ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat_set$ ))(= (member$a ?v0 (inf$ ?v1 ?v2 ))(and (member$a ?v0 ?v1 )(member$a ?v0 ?v2 )))):named a31 ))
(check-sat )
;(get-unsat-core )
