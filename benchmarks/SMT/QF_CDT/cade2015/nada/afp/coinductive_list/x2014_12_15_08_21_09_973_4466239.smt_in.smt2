;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort Enat_enat_prod_set$ 0 )
(declare-sort Enat_enat_prod_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort Enat_enat_prod$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun fst$ (Enat_enat_prod$)Enat$)
(declare-fun snd$ (Enat_enat_prod$)Enat$)
(declare-fun pair$ (Enat$ Enat$ )Enat_enat_prod$)
(declare-fun m$ ()Enat$ )
(declare-fun n$ ()Enat$ )
(declare-fun ma$ ()Enat$ )
(declare-fun na$ ()Enat$ )
(declare-fun uu$ ()Enat_enat_prod_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun member$ (Enat_enat_prod$ Enat_enat_prod_set$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun collect$ (Enat_enat_prod_bool_fun$ )Enat_enat_prod_set$ )
(declare-fun fun_app$ (Enat_enat_prod_bool_fun$ Enat_enat_prod$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_enat_fun$ A_llist$ )Enat$ )
(assert (! (forall ((?v0 Enat_enat_prod$ ))(! (= (fun_app$ uu$ ?v0 )(exists ((?v1 A_llist$ )(?v2 A_llist$ ))(and (= ?v0 (pair$ (fun_app$a (llcp$ ?v1 )?v2 )(min$ (llength$ ?v1 )(llength$ ?v2 ))))true ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not thesis$ ):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (= ma$ (fun_app$a (llcp$ ?v0 )?v1 ))(= na$ (min$ (llength$ ?v0 )(llength$ ?v1 ))))thesis$ )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a3 ))
(assert (! (= m$ (fun_app$a (llcp$ xs$ )ys$ )):named a4 ))
(assert (! (= n$ (min$ (llength$ xs$ )(llength$ ys$ ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (fun_app$a (llcp$ ?v0 )?v1 )(fun_app$a (llcp$ ?v1 )?v0 ))):named a6 ))
(assert (! (member$ (pair$ ma$ na$ )(collect$ uu$ )):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ (min$ ?v0 ?v1 )?v1 )(min$ ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ ?v0 (min$ ?v0 ?v1 ))(min$ ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Enat$ ))(= (min$ ?v0 ?v0 )?v0 )):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (min$ (min$ ?v0 ?v1 )?v2 )(min$ ?v0 (min$ ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (min$ ?v0 (min$ ?v1 ?v2 ))(min$ ?v1 (min$ ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ ?v0 ?v1 )(min$ ?v1 ?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (lprefix$ ?v0 ?v1 )(= (fun_app$a (llcp$ ?v1 )?v0 )(llength$ ?v0 ))):pattern ((fun_app$a (llcp$ ?v1 )?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (lprefix$ ?v0 ?v1 )(= (fun_app$a (llcp$ ?v0 )?v1 )(llength$ ?v0 ))):pattern ((fun_app$a (llcp$ ?v0 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (llength$ (ltake$ ?v0 ?v1 ))(min$ ?v0 (llength$ ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (ltake$ ?v0 (ltake$ ?v1 ?v2 ))(ltake$ (min$ ?v0 ?v1 )?v2 ))):named a17 ))
(assert (! (member$ (pair$ m$ n$ )(collect$ uu$ )):named a18 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a19 ))
(check-sat )
;(get-unsat-core )
