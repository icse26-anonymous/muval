;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_nat_prod_a_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_nat_prod$ 0)
(declare-fun fst$ (A_nat_prod$)A$)
(declare-fun snd$ (A_nat_prod$)Nat$)
(declare-fun pair$ (A$ Nat$ )A_nat_prod$)
(declare-sort A_nat_prod_llist$ 0)
(declare-sort Nat_llist$ 0)
(declare-fun lNil$a ()A_nat_prod_llist$)
(declare-fun lhd$a (A_nat_prod_llist$)A_nat_prod$)
(declare-fun ltl$a (A_nat_prod_llist$)A_nat_prod_llist$)
(declare-fun lCons$a (A_nat_prod$ A_nat_prod_llist$ )A_nat_prod_llist$)
(declare-fun lNil$b ()Nat_llist$)
(declare-fun lhd$b (Nat_llist$)Nat$)
(declare-fun ltl$b (Nat_llist$)Nat_llist$)
(declare-fun lCons$b (Nat$ Nat_llist$ )Nat_llist$)
(declare-fun uu$ ()A_nat_prod_a_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun lmap$ (A_nat_prod_a_fun$ A_nat_prod_llist$ )A_llist$ )
(declare-fun lzip$ (A_llist$ Nat_llist$ )A_nat_prod_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lmap$a (Nat_nat_fun$ Nat_llist$ )Nat_llist$ )
(declare-fun fun_app$ (A_nat_prod_a_fun$ A_nat_prod$ )A$ )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$b (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$c (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun iterates$ (Nat_nat_fun$ Nat$ )Nat_llist$ )
(assert (! (forall ((?v0 A_nat_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (lmap$ uu$ (lzip$ xs$ (iterates$ suc$ zero$ )))xs$ )):named a1 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (lmap$a ?v0 (iterates$ ?v0 ?v1 ))(iterates$ ?v0 (fun_app$a ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$a suc$ ?v0 )(fun_app$a suc$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$a suc$ ?v0 )(fun_app$a suc$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$a suc$ ?v1 ))false )))false )):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$a suc$ ?v1 ))false )))false )):named a6 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$b (fun_app$c ?v0 ?v3 )zero$ ))(and (forall ((?v3 Nat$ ))(fun_app$b (fun_app$c ?v0 zero$ )(fun_app$a suc$ ?v3 )))(forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (fun_app$b (fun_app$c ?v0 ?v3 )?v4 )(fun_app$b (fun_app$c ?v0 (fun_app$a suc$ ?v3 ))(fun_app$a suc$ ?v4 ))))))(fun_app$b (fun_app$c ?v0 ?v1 )?v2 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= (fun_app$a suc$ ?v0 )zero$ )false )):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 (fun_app$a suc$ ?v1 ))(not (= ?v0 zero$ )))):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= zero$ (fun_app$a suc$ ?v0 ))false )):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(=> (not (= ?v0 zero$ ))(exists ((?v1 Nat$ ))(= ?v0 (fun_app$a suc$ ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (fun_app$a suc$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (fun_app$a suc$ ?v0 )(fun_app$a suc$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(check-sat )
;(get-unsat-core )
