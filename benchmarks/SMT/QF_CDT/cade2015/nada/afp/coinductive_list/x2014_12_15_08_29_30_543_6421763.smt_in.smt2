;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort A_b_llist_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort C_llist_bool_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort B_llist_c_llist_fun$ 0 )
(declare-sort C_llist_b_llist_fun$ 0 )
(declare-sort C_llist_c_llist_fun$ 0 )
(declare-sort A_b_llist_fun_bool_fun$ 0 )
(declare-sort A_b_llist_fun_b_llist_fun$ 0 )
(declare-sort A_b_llist_fun_c_llist_fun$ 0 )
(declare-sort B_llist_a_b_llist_fun_fun$ 0 )
(declare-sort C_llist_a_b_llist_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort C_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort A_a_b_llist_fun_b_llist_fun_fun$ 0 )
(declare-sort A_a_b_llist_fun_c_llist_fun_fun$ 0 )
(declare-sort A_b_llist_fun_a_b_llist_fun_fun$ 0 )
(declare-sort B_bool_fun_b_llist_b_llist_fun_fun$ 0 )
(declare-sort B_bool_fun_c_llist_b_llist_fun_fun$ 0 )
(declare-sort C_bool_fun_b_llist_c_llist_fun_fun$ 0 )
(declare-sort C_bool_fun_c_llist_c_llist_fun_fun$ 0 )
(declare-sort A_a_b_llist_fun_a_b_llist_fun_fun_fun$ 0 )
(declare-sort A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ 0 )
(declare-sort B_bool_fun_a_b_llist_fun_b_llist_fun_fun$ 0 )
(declare-sort C_bool_fun_a_b_llist_fun_c_llist_fun_fun$ 0 )
(declare-sort B_llist_b_llist_fun_b_llist_c_llist_fun_fun$ 0 )
(declare-sort B_llist_c_llist_fun_b_llist_b_llist_fun_fun$ 0 )
(declare-sort B_llist_c_llist_fun_b_llist_c_llist_fun_fun$ 0 )
(declare-sort C_llist_b_llist_fun_c_llist_b_llist_fun_fun$ 0 )
(declare-sort C_llist_b_llist_fun_c_llist_c_llist_fun_fun$ 0 )
(declare-sort C_llist_c_llist_fun_c_llist_b_llist_fun_fun$ 0 )
(declare-sort B_llist_b_llist_fun_b_llist_a_b_llist_fun_fun_fun$ 0 )
(declare-sort B_llist_c_llist_fun_b_llist_a_b_llist_fun_fun_fun$ 0 )
(declare-sort C_llist_b_llist_fun_c_llist_a_b_llist_fun_fun_fun$ 0 )
(declare-sort C_llist_c_llist_fun_c_llist_a_b_llist_fun_fun_fun$ 0 )
(declare-sort A_b_llist_fun_b_llist_fun_a_b_llist_fun_b_llist_fun_fun$ 0 )
(declare-sort A_b_llist_fun_c_llist_fun_a_b_llist_fun_b_llist_fun_fun$ 0 )
(declare-sort A_b_llist_fun_c_llist_fun_a_b_llist_fun_c_llist_fun_fun$ 0 )
(declare-sort B_llist_a_b_llist_fun_fun_b_llist_a_b_llist_fun_fun_fun$ 0 )
(declare-sort C_llist_a_b_llist_fun_fun_c_llist_a_b_llist_fun_fun_fun$ 0 )
(declare-sort A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_c_llist_fun_fun$ 0 )
(declare-sort A_b_llist_fun_b_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ 0 )
(declare-sort A_b_llist_fun_c_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ 0 )
(declare-sort A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ 0 )
(declare-sort B_llist$ 0)
(declare-sort C_llist$ 0)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-fun lNil$a ()C_llist$)
(declare-fun lhd$a (C_llist$)C$)
(declare-fun ltl$a (C_llist$)C_llist$)
(declare-fun lCons$a (C$ C_llist$ )C_llist$)
(declare-fun a$ ()A_b_llist_fun_c_llist_fun$ )
(declare-fun p$ ()C_bool_fun$ )
(declare-fun uu$ ()A_b_llist_fun_c_llist_fun$ )
(declare-fun uua$ (A_b_llist_fun_a_b_llist_fun_fun$ )B_llist_a_b_llist_fun_fun_b_llist_a_b_llist_fun_fun_fun$ )
(declare-fun uub$ (B_llist_a_b_llist_fun_fun$ )B_llist_b_llist_fun_b_llist_a_b_llist_fun_fun_fun$ )
(declare-fun uuc$ (B_llist_a_b_llist_fun_fun$ )C_llist_b_llist_fun_c_llist_a_b_llist_fun_fun_fun$ )
(declare-fun uud$ (B_llist_a_b_llist_fun_fun$ )A_b_llist_fun_b_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ )
(declare-fun uue$ (C_llist_a_b_llist_fun_fun$ )C_llist_c_llist_fun_c_llist_a_b_llist_fun_fun_fun$ )
(declare-fun uuf$ (C_llist_a_b_llist_fun_fun$ )B_llist_c_llist_fun_b_llist_a_b_llist_fun_fun_fun$ )
(declare-fun uug$ (A_b_llist_fun_a_b_llist_fun_fun$ )C_llist_a_b_llist_fun_fun_c_llist_a_b_llist_fun_fun_fun$ )
(declare-fun uuh$ (A_b_llist_fun_a_b_llist_fun_fun$ )A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ )
(declare-fun uui$ (C_llist_a_b_llist_fun_fun$ )A_b_llist_fun_c_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ )
(declare-fun uuj$ (C_llist_b_llist_fun$ )A_b_llist_fun_c_llist_fun_a_b_llist_fun_b_llist_fun_fun$ )
(declare-fun uuk$ (C_llist_c_llist_fun$ )A_b_llist_fun_c_llist_fun_a_b_llist_fun_c_llist_fun_fun$ )
(declare-fun uul$ (A_b_llist_fun_c_llist_fun$ )A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_c_llist_fun_fun$ )
(declare-fun uum$ (B_llist_b_llist_fun$ )C_llist_b_llist_fun_c_llist_b_llist_fun_fun$ )
(declare-fun uun$ (C_llist_b_llist_fun$ )C_llist_c_llist_fun_c_llist_b_llist_fun_fun$ )
(declare-fun uuo$ (C_llist_b_llist_fun$ )B_llist_c_llist_fun_b_llist_b_llist_fun_fun$ )
(declare-fun uup$ (C_llist_c_llist_fun$ )B_llist_c_llist_fun_b_llist_c_llist_fun_fun$ )
(declare-fun uuq$ (B_llist_c_llist_fun$ )B_llist_b_llist_fun_b_llist_c_llist_fun_fun$ )
(declare-fun uur$ (B_llist_c_llist_fun$ )C_llist_b_llist_fun_c_llist_c_llist_fun_fun$ )
(declare-fun uus$ (B_llist_b_llist_fun$ )A_b_llist_fun_b_llist_fun_a_b_llist_fun_b_llist_fun_fun$ )
(declare-fun uut$ (B_llist_b_llist_fun$ )B_bool_fun_b_llist_b_llist_fun_fun$ )
(declare-fun uuu$ (C_llist_c_llist_fun$ )C_bool_fun_c_llist_c_llist_fun_fun$ )
(declare-fun uuv$ (C_llist_b_llist_fun$ )B_bool_fun_c_llist_b_llist_fun_fun$ )
(declare-fun uuw$ (A_b_llist_fun_b_llist_fun$ )B_bool_fun_a_b_llist_fun_b_llist_fun_fun$ )
(declare-fun uux$ (B_llist_c_llist_fun$ )C_bool_fun_b_llist_c_llist_fun_fun$ )
(declare-fun uuy$ (A_b_llist_fun_c_llist_fun$ )C_bool_fun_a_b_llist_fun_c_llist_fun_fun$ )
(declare-fun uuz$ (B_llist$ )B_llist_b_llist_fun$ )
(declare-fun uva$ (C_llist$ )C_llist_c_llist_fun$ )
(declare-fun uvb$ (B_llist$ )C_llist_b_llist_fun$ )
(declare-fun uvc$ (B_llist$ )A_b_llist_fun_b_llist_fun$ )
(declare-fun uvd$ (C_llist$ )B_llist_c_llist_fun$ )
(declare-fun uve$ (C_llist$ )A_b_llist_fun_c_llist_fun$ )
(declare-fun uvf$ (B_llist_b_llist_fun$ )A_a_b_llist_fun_b_llist_fun_fun$ )
(declare-fun uvg$ (B_llist_a_b_llist_fun_fun$ )A_a_b_llist_fun_a_b_llist_fun_fun_fun$ )
(declare-fun uvh$ (B_llist_c_llist_fun$ )A_a_b_llist_fun_c_llist_fun_fun$ )
(declare-fun uvi$ (A$ )A_b_llist_fun_b_llist_fun$ )
(declare-fun fun_app$ (A_b_llist_fun_c_llist_fun$ A_b_llist_fun$ )C_llist$ )
(declare-fun fun_ord$ (B_llist_b_llist_bool_fun_fun$ )A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )
(declare-fun lfilter$ (C_bool_fun$ )C_llist_c_llist_fun$ )
(declare-fun lprefix$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun fun_app$a (C_llist_c_llist_fun$ C_llist$ )C_llist$ )
(declare-fun fun_app$b (A_b_llist_fun_b_llist_fun$ A_b_llist_fun$ )B_llist$ )
(declare-fun fun_app$c (A_b_llist_fun$ A$ )B_llist$ )
(declare-fun fun_app$d (C_bool_fun_c_llist_c_llist_fun_fun$ C_bool_fun$ )C_llist_c_llist_fun$ )
(declare-fun fun_app$e (C_llist_b_llist_fun$ C_llist$ )B_llist$ )
(declare-fun fun_app$f (B_bool_fun_c_llist_b_llist_fun_fun$ B_bool_fun$ )C_llist_b_llist_fun$ )
(declare-fun fun_app$g (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$h (B_llist_c_llist_fun$ B_llist$ )C_llist$ )
(declare-fun fun_app$i (C_bool_fun_b_llist_c_llist_fun_fun$ C_bool_fun$ )B_llist_c_llist_fun$ )
(declare-fun fun_app$j (B_bool_fun_b_llist_b_llist_fun_fun$ B_bool_fun$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$k (C_bool_fun_a_b_llist_fun_c_llist_fun_fun$ C_bool_fun$ )A_b_llist_fun_c_llist_fun$ )
(declare-fun fun_app$l (B_bool_fun_a_b_llist_fun_b_llist_fun_fun$ B_bool_fun$ )A_b_llist_fun_b_llist_fun$ )
(declare-fun fun_app$m (B_llist_c_llist_fun_b_llist_c_llist_fun_fun$ B_llist_c_llist_fun$ )B_llist_c_llist_fun$ )
(declare-fun fun_app$n (A_b_llist_fun_c_llist_fun_a_b_llist_fun_c_llist_fun_fun$ A_b_llist_fun_c_llist_fun$ )A_b_llist_fun_c_llist_fun$ )
(declare-fun fun_app$o (C_llist_c_llist_fun_c_llist_b_llist_fun_fun$ C_llist_c_llist_fun$ )C_llist_b_llist_fun$ )
(declare-fun fun_app$p (B_llist_c_llist_fun_b_llist_b_llist_fun_fun$ B_llist_c_llist_fun$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$q (A_b_llist_fun_c_llist_fun_a_b_llist_fun_b_llist_fun_fun$ A_b_llist_fun_c_llist_fun$ )A_b_llist_fun_b_llist_fun$ )
(declare-fun fun_app$r (C_llist_a_b_llist_fun_fun$ C_llist$ )A_b_llist_fun$ )
(declare-fun fun_app$s (C_llist_c_llist_fun_c_llist_a_b_llist_fun_fun_fun$ C_llist_c_llist_fun$ )C_llist_a_b_llist_fun_fun$ )
(declare-fun fun_app$t (B_llist_a_b_llist_fun_fun$ B_llist$ )A_b_llist_fun$ )
(declare-fun fun_app$u (B_llist_c_llist_fun_b_llist_a_b_llist_fun_fun_fun$ B_llist_c_llist_fun$ )B_llist_a_b_llist_fun_fun$ )
(declare-fun fun_app$v (A_b_llist_fun_a_b_llist_fun_fun$ A_b_llist_fun$ )A_b_llist_fun$ )
(declare-fun fun_app$w (A_b_llist_fun_c_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ A_b_llist_fun_c_llist_fun$ )A_b_llist_fun_a_b_llist_fun_fun$ )
(declare-fun fun_app$x (C_llist_b_llist_fun_c_llist_c_llist_fun_fun$ C_llist_b_llist_fun$ )C_llist_c_llist_fun$ )
(declare-fun fun_app$y (B_llist_b_llist_fun_b_llist_c_llist_fun_fun$ B_llist_b_llist_fun$ )B_llist_c_llist_fun$ )
(declare-fun fun_app$z (C_llist_b_llist_fun_c_llist_b_llist_fun_fun$ C_llist_b_llist_fun$ )C_llist_b_llist_fun$ )
(declare-fun lfilter$a (B_bool_fun$ )B_llist_b_llist_fun$ )
(declare-fun lprefix$a ()C_llist_c_llist_bool_fun_fun$ )
(declare-fun monotone$ (A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ A_b_llist_fun_c_llist_fun$ )Bool )
(declare-fun fun_app$aa (A_b_llist_fun_b_llist_fun_a_b_llist_fun_b_llist_fun_fun$ A_b_llist_fun_b_llist_fun$ )A_b_llist_fun_b_llist_fun$ )
(declare-fun fun_app$ab (C_llist_b_llist_fun_c_llist_a_b_llist_fun_fun_fun$ C_llist_b_llist_fun$ )C_llist_a_b_llist_fun_fun$ )
(declare-fun fun_app$ac (B_llist_b_llist_fun_b_llist_a_b_llist_fun_fun_fun$ B_llist_b_llist_fun$ )B_llist_a_b_llist_fun_fun$ )
(declare-fun fun_app$ad (A_b_llist_fun_b_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ A_b_llist_fun_b_llist_fun$ )A_b_llist_fun_a_b_llist_fun_fun$ )
(declare-fun fun_app$ae (A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_c_llist_fun_fun$ A_b_llist_fun_a_b_llist_fun_fun$ )A_b_llist_fun_c_llist_fun$ )
(declare-fun fun_app$af (C_llist_a_b_llist_fun_fun_c_llist_a_b_llist_fun_fun_fun$ C_llist_a_b_llist_fun_fun$ )C_llist_a_b_llist_fun_fun$ )
(declare-fun fun_app$ag (B_llist_a_b_llist_fun_fun_b_llist_a_b_llist_fun_fun_fun$ B_llist_a_b_llist_fun_fun$ )B_llist_a_b_llist_fun_fun$ )
(declare-fun fun_app$ah (A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ A_b_llist_fun_a_b_llist_fun_fun$ )A_b_llist_fun_a_b_llist_fun_fun$ )
(declare-fun fun_app$ai (A_a_b_llist_fun_c_llist_fun_fun$ A$ )A_b_llist_fun_c_llist_fun$ )
(declare-fun fun_app$aj (A_a_b_llist_fun_b_llist_fun_fun$ A$ )A_b_llist_fun_b_llist_fun$ )
(declare-fun fun_app$ak (A_a_b_llist_fun_a_b_llist_fun_fun_fun$ A$ )A_b_llist_fun_a_b_llist_fun_fun$ )
(declare-fun fun_app$al (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$am (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$an (C_llist_bool_fun$ C_llist$ )Bool )
(declare-fun fun_app$ao (C_llist_c_llist_bool_fun_fun$ C_llist$ )C_llist_bool_fun$ )
(declare-fun fun_app$ap (A_b_llist_fun_bool_fun$ A_b_llist_fun$ )Bool )
(declare-fun fun_app$aq (A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ A_b_llist_fun$ )A_b_llist_fun_bool_fun$ )
(declare-fun monotone$a (A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ A_b_llist_fun_b_llist_fun$ )Bool )
(declare-fun monotone$b (A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ A_b_llist_fun_a_b_llist_fun_fun$ )Bool )
(declare-fun monotone$c (B_llist_b_llist_bool_fun_fun$ A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ B_llist_a_b_llist_fun_fun$ )Bool )
(declare-fun monotone$d (B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_fun$ )Bool )
(declare-fun monotone$e (C_llist_c_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ C_llist_b_llist_fun$ )Bool )
(declare-fun monotone$f (C_llist_c_llist_bool_fun_fun$ A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ C_llist_a_b_llist_fun_fun$ )Bool )
(declare-fun monotone$g (C_llist_c_llist_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ C_llist_c_llist_fun$ )Bool )
(declare-fun monotone$h (B_llist_b_llist_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ B_llist_c_llist_fun$ )Bool )
(assert (! (forall ((?v0 A_b_llist_fun$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$a (lfilter$ p$ )(fun_app$ a$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_llist_fun$ ))(! (= (fun_app$b (uvi$ ?v0 )?v1 )(fun_app$c ?v1 ?v0 )):pattern ((fun_app$b (uvi$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 C_llist_c_llist_fun$ )(?v1 C_bool_fun$ )(?v2 C_llist$ ))(! (= (fun_app$a (fun_app$d (uuu$ ?v0 )?v1 )?v2 )(fun_app$a (lfilter$ ?v1 )(fun_app$a ?v0 ?v2 ))):pattern ((fun_app$a (fun_app$d (uuu$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 C_llist_b_llist_fun$ )(?v1 B_bool_fun$ )(?v2 C_llist$ ))(! (= (fun_app$e (fun_app$f (uuv$ ?v0 )?v1 )?v2 )(fun_app$g (lfilter$a ?v1 )(fun_app$e ?v0 ?v2 ))):pattern ((fun_app$e (fun_app$f (uuv$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 B_llist_c_llist_fun$ )(?v1 C_bool_fun$ )(?v2 B_llist$ ))(! (= (fun_app$h (fun_app$i (uux$ ?v0 )?v1 )?v2 )(fun_app$a (lfilter$ ?v1 )(fun_app$h ?v0 ?v2 ))):pattern ((fun_app$h (fun_app$i (uux$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B_bool_fun$ )(?v2 B_llist$ ))(! (= (fun_app$g (fun_app$j (uut$ ?v0 )?v1 )?v2 )(fun_app$g (lfilter$a ?v1 )(fun_app$g ?v0 ?v2 ))):pattern ((fun_app$g (fun_app$j (uut$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_b_llist_fun_c_llist_fun$ )(?v1 C_bool_fun$ )(?v2 A_b_llist_fun$ ))(! (= (fun_app$ (fun_app$k (uuy$ ?v0 )?v1 )?v2 )(fun_app$a (lfilter$ ?v1 )(fun_app$ ?v0 ?v2 ))):pattern ((fun_app$ (fun_app$k (uuy$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_b_llist_fun_b_llist_fun$ )(?v1 B_bool_fun$ )(?v2 A_b_llist_fun$ ))(! (= (fun_app$b (fun_app$l (uuw$ ?v0 )?v1 )?v2 )(fun_app$g (lfilter$a ?v1 )(fun_app$b ?v0 ?v2 ))):pattern ((fun_app$b (fun_app$l (uuw$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 C_llist_c_llist_fun$ )(?v1 B_llist_c_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$h (fun_app$m (uup$ ?v0 )?v1 )?v2 )(fun_app$a ?v0 (fun_app$h ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$m (uup$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 C_llist_c_llist_fun$ )(?v1 A_b_llist_fun_c_llist_fun$ )(?v2 A_b_llist_fun$ ))(! (= (fun_app$ (fun_app$n (uuk$ ?v0 )?v1 )?v2 )(fun_app$a ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$n (uuk$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 C_llist_b_llist_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 C_llist$ ))(! (= (fun_app$e (fun_app$o (uun$ ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$o (uun$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 C_llist_b_llist_fun$ )(?v1 B_llist_c_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$g (fun_app$p (uuo$ ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$h ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$p (uuo$ ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 C_llist_b_llist_fun$ )(?v1 A_b_llist_fun_c_llist_fun$ )(?v2 A_b_llist_fun$ ))(! (= (fun_app$b (fun_app$q (uuj$ ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$q (uuj$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 C_llist_a_b_llist_fun_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 C_llist$ ))(! (= (fun_app$r (fun_app$s (uue$ ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$r (fun_app$s (uue$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 C_llist_a_b_llist_fun_fun$ )(?v1 B_llist_c_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$t (fun_app$u (uuf$ ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$h ?v1 ?v2 ))):pattern ((fun_app$t (fun_app$u (uuf$ ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 C_llist_a_b_llist_fun_fun$ )(?v1 A_b_llist_fun_c_llist_fun$ )(?v2 A_b_llist_fun$ ))(! (= (fun_app$v (fun_app$w (uui$ ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$v (fun_app$w (uui$ ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 B_llist_c_llist_fun$ )(?v1 C_llist_b_llist_fun$ )(?v2 C_llist$ ))(! (= (fun_app$a (fun_app$x (uur$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$x (uur$ ?v0 )?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 B_llist_c_llist_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$h (fun_app$y (uuq$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$y (uuq$ ?v0 )?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 C_llist_b_llist_fun$ )(?v2 C_llist$ ))(! (= (fun_app$e (fun_app$z (uum$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$z (uum$ ?v0 )?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 A_b_llist_fun_b_llist_fun$ )(?v2 A_b_llist_fun$ ))(! (= (fun_app$b (fun_app$aa (uus$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$aa (uus$ ?v0 )?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 B_llist_a_b_llist_fun_fun$ )(?v1 C_llist_b_llist_fun$ )(?v2 C_llist$ ))(! (= (fun_app$r (fun_app$ab (uuc$ ?v0 )?v1 )?v2 )(fun_app$t ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$r (fun_app$ab (uuc$ ?v0 )?v1 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 B_llist_a_b_llist_fun_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$t (fun_app$ac (uub$ ?v0 )?v1 )?v2 )(fun_app$t ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$t (fun_app$ac (uub$ ?v0 )?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 B_llist_a_b_llist_fun_fun$ )(?v1 A_b_llist_fun_b_llist_fun$ )(?v2 A_b_llist_fun$ ))(! (= (fun_app$v (fun_app$ad (uud$ ?v0 )?v1 )?v2 )(fun_app$t ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$v (fun_app$ad (uud$ ?v0 )?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_b_llist_fun_c_llist_fun$ )(?v1 A_b_llist_fun_a_b_llist_fun_fun$ )(?v2 A_b_llist_fun$ ))(! (= (fun_app$ (fun_app$ae (uul$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$v ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$ae (uul$ ?v0 )?v1 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_fun$ )(?v1 C_llist_a_b_llist_fun_fun$ )(?v2 C_llist$ ))(! (= (fun_app$r (fun_app$af (uug$ ?v0 )?v1 )?v2 )(fun_app$v ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$r (fun_app$af (uug$ ?v0 )?v1 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_fun$ )(?v1 B_llist_a_b_llist_fun_fun$ )(?v2 B_llist$ ))(! (= (fun_app$t (fun_app$ag (uua$ ?v0 )?v1 )?v2 )(fun_app$v ?v0 (fun_app$t ?v1 ?v2 ))):pattern ((fun_app$t (fun_app$ag (uua$ ?v0 )?v1 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_fun$ )(?v1 A_b_llist_fun_a_b_llist_fun_fun$ )(?v2 A_b_llist_fun$ ))(! (= (fun_app$v (fun_app$ah (uuh$ ?v0 )?v1 )?v2 )(fun_app$v ?v0 (fun_app$v ?v1 ?v2 ))):pattern ((fun_app$v (fun_app$ah (uuh$ ?v0 )?v1 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 B_llist_c_llist_fun$ )(?v1 A$ )(?v2 A_b_llist_fun$ ))(! (= (fun_app$ (fun_app$ai (uvh$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$c ?v2 ?v1 ))):pattern ((fun_app$ (fun_app$ai (uvh$ ?v0 )?v1 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 A$ )(?v2 A_b_llist_fun$ ))(! (= (fun_app$b (fun_app$aj (uvf$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$c ?v2 ?v1 ))):pattern ((fun_app$b (fun_app$aj (uvf$ ?v0 )?v1 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 B_llist_a_b_llist_fun_fun$ )(?v1 A$ )(?v2 A_b_llist_fun$ ))(! (= (fun_app$v (fun_app$ak (uvg$ ?v0 )?v1 )?v2 )(fun_app$t ?v0 (fun_app$c ?v2 ?v1 ))):pattern ((fun_app$v (fun_app$ak (uvg$ ?v0 )?v1 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(! (= (fun_app$a (uva$ ?v0 )?v1 )?v0 ):pattern ((fun_app$a (uva$ ?v0 )?v1 )))):named a30 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 B_llist$ ))(! (= (fun_app$h (uvd$ ?v0 )?v1 )?v0 ):pattern ((fun_app$h (uvd$ ?v0 )?v1 )))):named a31 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 A_b_llist_fun$ ))(! (= (fun_app$ (uve$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (uve$ ?v0 )?v1 )))):named a32 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 C_llist$ ))(! (= (fun_app$e (uvb$ ?v0 )?v1 )?v0 ):pattern ((fun_app$e (uvb$ ?v0 )?v1 )))):named a33 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$g (uuz$ ?v0 )?v1 )?v0 ):pattern ((fun_app$g (uuz$ ?v0 )?v1 )))):named a34 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_llist_fun$ ))(! (= (fun_app$b (uvc$ ?v0 )?v1 )?v0 ):pattern ((fun_app$b (uvc$ ?v0 )?v1 )))):named a35 ))
(assert (! (not (monotone$ (fun_ord$ lprefix$ )lprefix$a uu$ )):named a36 ))
(assert (! (monotone$ (fun_ord$ lprefix$ )lprefix$a a$ ):named a37 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$al (fun_app$am lprefix$ ?v0 )?v0 )):named a38 ))
(assert (! (forall ((?v0 C_llist$ ))(fun_app$an (fun_app$ao lprefix$a ?v0 )?v0 )):named a39 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$al (fun_app$am lprefix$ ?v0 )?v0 )):named a40 ))
(assert (! (forall ((?v0 C_llist$ ))(fun_app$an (fun_app$ao lprefix$a ?v0 )?v0 )):named a41 ))
(assert (! (forall ((?v0 A_b_llist_fun_b_llist_fun$ )(?v1 A_b_llist_fun$ )(?v2 B_llist$ )(?v3 A_b_llist_fun_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_b_llist_fun$ ))(= (fun_app$b ?v0 ?v5 )(ite (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 )?v2 (fun_app$b ?v3 ?v5 ))))(and (forall ((?v5 A_b_llist_fun$ )(?v6 A_b_llist_fun$ ))(=> (and (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v6 )(not (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 )))(fun_app$al (fun_app$am ?v4 (fun_app$b ?v3 ?v5 ))(fun_app$b ?v3 ?v6 ))))(and (forall ((?v5 A_b_llist_fun$ ))(=> (not (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 ))(fun_app$al (fun_app$am ?v4 ?v2 )(fun_app$b ?v3 ?v5 ))))(fun_app$al (fun_app$am ?v4 ?v2 )?v2 ))))(monotone$a (fun_ord$ lprefix$ )?v4 ?v0 ))):named a42 ))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_fun$ )(?v1 A_b_llist_fun$ )(?v2 A_b_llist_fun$ )(?v3 A_b_llist_fun_a_b_llist_fun_fun$ )(?v4 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ ))(=> (and (forall ((?v5 A_b_llist_fun$ ))(= (fun_app$v ?v0 ?v5 )(ite (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 )?v2 (fun_app$v ?v3 ?v5 ))))(and (forall ((?v5 A_b_llist_fun$ )(?v6 A_b_llist_fun$ ))(=> (and (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v6 )(not (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 )))(fun_app$ap (fun_app$aq ?v4 (fun_app$v ?v3 ?v5 ))(fun_app$v ?v3 ?v6 ))))(and (forall ((?v5 A_b_llist_fun$ ))(=> (not (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 ))(fun_app$ap (fun_app$aq ?v4 ?v2 )(fun_app$v ?v3 ?v5 ))))(fun_app$ap (fun_app$aq ?v4 ?v2 )?v2 ))))(monotone$b (fun_ord$ lprefix$ )?v4 ?v0 ))):named a43 ))
(assert (! (forall ((?v0 A_b_llist_fun_c_llist_fun$ )(?v1 A_b_llist_fun$ )(?v2 C_llist$ )(?v3 A_b_llist_fun_c_llist_fun$ )(?v4 C_llist_c_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_b_llist_fun$ ))(= (fun_app$ ?v0 ?v5 )(ite (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 )?v2 (fun_app$ ?v3 ?v5 ))))(and (forall ((?v5 A_b_llist_fun$ )(?v6 A_b_llist_fun$ ))(=> (and (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v6 )(not (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 )))(fun_app$an (fun_app$ao ?v4 (fun_app$ ?v3 ?v5 ))(fun_app$ ?v3 ?v6 ))))(and (forall ((?v5 A_b_llist_fun$ ))(=> (not (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 ))(fun_app$an (fun_app$ao ?v4 ?v2 )(fun_app$ ?v3 ?v5 ))))(fun_app$an (fun_app$ao ?v4 ?v2 )?v2 ))))(monotone$ (fun_ord$ lprefix$ )?v4 ?v0 ))):named a44 ))
(assert (! (forall ((?v0 A_b_llist_fun$ )(?v1 A_b_llist_fun$ )(?v2 A_b_llist_fun$ ))(=> (and (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v1 )?v2 ))(fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v0 )?v2 ))):named a45 ))
(assert (! (forall ((?v0 A_b_llist_fun$ )(?v1 A_b_llist_fun$ ))(=> (and (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v1 )?v0 ))(= ?v0 ?v1 ))):named a46 ))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v1 A_b_llist_fun_a_b_llist_fun_fun$ )(?v2 B_llist_b_llist_bool_fun_fun$ )(?v3 B_llist_a_b_llist_fun_fun$ ))(=> (and (monotone$b ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$c ?v2 ?v0 ?v3 ))(monotone$c ?v2 (fun_ord$ lprefix$ )(fun_app$ag (uua$ ?v1 )?v3 )))):named a47 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_a_b_llist_fun_fun$ )(?v2 B_llist_b_llist_bool_fun_fun$ )(?v3 B_llist_b_llist_fun$ ))(=> (and (monotone$c ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$d ?v2 ?v0 ?v3 ))(monotone$c ?v2 (fun_ord$ lprefix$ )(fun_app$ac (uub$ ?v1 )?v3 )))):named a48 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_a_b_llist_fun_fun$ )(?v2 C_llist_c_llist_bool_fun_fun$ )(?v3 C_llist_b_llist_fun$ ))(=> (and (monotone$c ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$e ?v2 ?v0 ?v3 ))(monotone$f ?v2 (fun_ord$ lprefix$ )(fun_app$ab (uuc$ ?v1 )?v3 )))):named a49 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_a_b_llist_fun_fun$ )(?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v3 A_b_llist_fun_b_llist_fun$ ))(=> (and (monotone$c ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$a ?v2 ?v0 ?v3 ))(monotone$b ?v2 (fun_ord$ lprefix$ )(fun_app$ad (uud$ ?v1 )?v3 )))):named a50 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_a_b_llist_fun_fun$ )(?v2 C_llist_c_llist_bool_fun_fun$ )(?v3 C_llist_c_llist_fun$ ))(=> (and (monotone$f ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$g ?v2 ?v0 ?v3 ))(monotone$f ?v2 (fun_ord$ lprefix$ )(fun_app$s (uue$ ?v1 )?v3 )))):named a51 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_a_b_llist_fun_fun$ )(?v2 B_llist_b_llist_bool_fun_fun$ )(?v3 B_llist_c_llist_fun$ ))(=> (and (monotone$f ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$h ?v2 ?v0 ?v3 ))(monotone$c ?v2 (fun_ord$ lprefix$ )(fun_app$u (uuf$ ?v1 )?v3 )))):named a52 ))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v1 A_b_llist_fun_a_b_llist_fun_fun$ )(?v2 C_llist_c_llist_bool_fun_fun$ )(?v3 C_llist_a_b_llist_fun_fun$ ))(=> (and (monotone$b ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$f ?v2 ?v0 ?v3 ))(monotone$f ?v2 (fun_ord$ lprefix$ )(fun_app$af (uug$ ?v1 )?v3 )))):named a53 ))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v1 A_b_llist_fun_a_b_llist_fun_fun$ )(?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v3 A_b_llist_fun_a_b_llist_fun_fun$ ))(=> (and (monotone$b ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$b ?v2 ?v0 ?v3 ))(monotone$b ?v2 (fun_ord$ lprefix$ )(fun_app$ah (uuh$ ?v1 )?v3 )))):named a54 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_a_b_llist_fun_fun$ )(?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v3 A_b_llist_fun_c_llist_fun$ ))(=> (and (monotone$f ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$ ?v2 ?v0 ?v3 ))(monotone$b ?v2 (fun_ord$ lprefix$ )(fun_app$w (uui$ ?v1 )?v3 )))):named a55 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_b_llist_fun$ )(?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v3 A_b_llist_fun_c_llist_fun$ ))(=> (and (monotone$e ?v0 lprefix$ ?v1 )(monotone$ ?v2 ?v0 ?v3 ))(monotone$a ?v2 lprefix$ (fun_app$q (uuj$ ?v1 )?v3 )))):named a56 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v3 A_b_llist_fun_c_llist_fun$ ))(=> (and (monotone$g ?v0 lprefix$a ?v1 )(monotone$ ?v2 ?v0 ?v3 ))(monotone$ ?v2 lprefix$a (fun_app$n (uuk$ ?v1 )?v3 )))):named a57 ))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v1 A_b_llist_fun_c_llist_fun$ )(?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v3 A_b_llist_fun_a_b_llist_fun_fun$ ))(=> (and (monotone$ ?v0 lprefix$a ?v1 )(monotone$b ?v2 ?v0 ?v3 ))(monotone$ ?v2 lprefix$a (fun_app$ae (uul$ ?v1 )?v3 )))):named a58 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 C_llist_c_llist_bool_fun_fun$ )(?v3 C_llist_b_llist_fun$ ))(=> (and (monotone$d ?v0 lprefix$ ?v1 )(monotone$e ?v2 ?v0 ?v3 ))(monotone$e ?v2 lprefix$ (fun_app$z (uum$ ?v1 )?v3 )))):named a59 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_b_llist_fun$ )(?v2 C_llist_c_llist_bool_fun_fun$ )(?v3 C_llist_c_llist_fun$ ))(=> (and (monotone$e ?v0 lprefix$ ?v1 )(monotone$g ?v2 ?v0 ?v3 ))(monotone$e ?v2 lprefix$ (fun_app$o (uun$ ?v1 )?v3 )))):named a60 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_b_llist_fun$ )(?v2 B_llist_b_llist_bool_fun_fun$ )(?v3 B_llist_c_llist_fun$ ))(=> (and (monotone$e ?v0 lprefix$ ?v1 )(monotone$h ?v2 ?v0 ?v3 ))(monotone$d ?v2 lprefix$ (fun_app$p (uuo$ ?v1 )?v3 )))):named a61 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 B_llist_b_llist_bool_fun_fun$ )(?v3 B_llist_c_llist_fun$ ))(=> (and (monotone$g ?v0 lprefix$a ?v1 )(monotone$h ?v2 ?v0 ?v3 ))(monotone$h ?v2 lprefix$a (fun_app$m (uup$ ?v1 )?v3 )))):named a62 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_c_llist_fun$ )(?v2 B_llist_b_llist_bool_fun_fun$ )(?v3 B_llist_b_llist_fun$ ))(=> (and (monotone$h ?v0 lprefix$a ?v1 )(monotone$d ?v2 ?v0 ?v3 ))(monotone$h ?v2 lprefix$a (fun_app$y (uuq$ ?v1 )?v3 )))):named a63 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_c_llist_fun$ )(?v2 C_llist_c_llist_bool_fun_fun$ )(?v3 C_llist_b_llist_fun$ ))(=> (and (monotone$h ?v0 lprefix$a ?v1 )(monotone$e ?v2 ?v0 ?v3 ))(monotone$g ?v2 lprefix$a (fun_app$x (uur$ ?v1 )?v3 )))):named a64 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v3 A_b_llist_fun_b_llist_fun$ ))(=> (and (monotone$d ?v0 lprefix$ ?v1 )(monotone$a ?v2 ?v0 ?v3 ))(monotone$a ?v2 lprefix$ (fun_app$aa (uus$ ?v1 )?v3 )))):named a65 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 B_bool_fun$ ))(=> (monotone$d ?v0 lprefix$ ?v1 )(monotone$d ?v0 lprefix$ (fun_app$j (uut$ ?v1 )?v2 )))):named a66 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 C_bool_fun$ ))(=> (monotone$g ?v0 lprefix$a ?v1 )(monotone$g ?v0 lprefix$a (fun_app$d (uuu$ ?v1 )?v2 )))):named a67 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_b_llist_fun$ )(?v2 B_bool_fun$ ))(=> (monotone$e ?v0 lprefix$ ?v1 )(monotone$e ?v0 lprefix$ (fun_app$f (uuv$ ?v1 )?v2 )))):named a68 ))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v1 A_b_llist_fun_b_llist_fun$ )(?v2 B_bool_fun$ ))(=> (monotone$a ?v0 lprefix$ ?v1 )(monotone$a ?v0 lprefix$ (fun_app$l (uuw$ ?v1 )?v2 )))):named a69 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_c_llist_fun$ )(?v2 C_bool_fun$ ))(=> (monotone$h ?v0 lprefix$a ?v1 )(monotone$h ?v0 lprefix$a (fun_app$i (uux$ ?v1 )?v2 )))):named a70 ))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v1 A_b_llist_fun_c_llist_fun$ )(?v2 C_bool_fun$ ))(=> (monotone$ ?v0 lprefix$a ?v1 )(monotone$ ?v0 lprefix$a (fun_app$k (uuy$ ?v1 )?v2 )))):named a71 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$al (fun_app$am lprefix$ ?v0 )?v1 )(fun_app$al (fun_app$am lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a72 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(=> (and (fun_app$an (fun_app$ao lprefix$a ?v0 )?v1 )(fun_app$an (fun_app$ao lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a73 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$al (fun_app$am lprefix$ ?v0 )?v1 )(fun_app$al (fun_app$am lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a74 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(=> (and (fun_app$an (fun_app$ao lprefix$a ?v0 )?v1 )(fun_app$an (fun_app$ao lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a75 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$al (fun_app$am lprefix$ ?v0 )?v1 )(fun_app$al (fun_app$am lprefix$ ?v2 )?v1 ))(or (fun_app$al (fun_app$am lprefix$ ?v0 )?v2 )(fun_app$al (fun_app$am lprefix$ ?v2 )?v0 )))):named a76 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (and (fun_app$an (fun_app$ao lprefix$a ?v0 )?v1 )(fun_app$an (fun_app$ao lprefix$a ?v2 )?v1 ))(or (fun_app$an (fun_app$ao lprefix$a ?v0 )?v2 )(fun_app$an (fun_app$ao lprefix$a ?v2 )?v0 )))):named a77 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$al (fun_app$am lprefix$ ?v0 )?v1 )(fun_app$al (fun_app$am lprefix$ ?v1 )?v2 ))(fun_app$al (fun_app$am lprefix$ ?v0 )?v2 ))):named a78 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (and (fun_app$an (fun_app$ao lprefix$a ?v0 )?v1 )(fun_app$an (fun_app$ao lprefix$a ?v1 )?v2 ))(fun_app$an (fun_app$ao lprefix$a ?v0 )?v2 ))):named a79 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$al (fun_app$am lprefix$ ?v0 )?v1 )(fun_app$al (fun_app$am lprefix$ ?v1 )?v2 ))(fun_app$al (fun_app$am lprefix$ ?v0 )?v2 ))):named a80 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (and (fun_app$an (fun_app$ao lprefix$a ?v0 )?v1 )(fun_app$an (fun_app$ao lprefix$a ?v1 )?v2 ))(fun_app$an (fun_app$ao lprefix$a ?v0 )?v2 ))):named a81 ))
(assert (! (forall ((?v0 A_b_llist_fun$ ))(fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v0 )?v0 )):named a82 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist$ ))(monotone$d ?v0 lprefix$ (uuz$ ?v1 ))):named a83 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist$ ))(monotone$g ?v0 lprefix$a (uva$ ?v1 ))):named a84 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 B_llist$ ))(monotone$e ?v0 lprefix$ (uvb$ ?v1 ))):named a85 ))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v1 B_llist$ ))(monotone$a ?v0 lprefix$ (uvc$ ?v1 ))):named a86 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 C_llist$ ))(monotone$h ?v0 lprefix$a (uvd$ ?v1 ))):named a87 ))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v1 C_llist$ ))(monotone$ ?v0 lprefix$a (uve$ ?v1 ))):named a88 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_b_llist_fun$ )(?v3 A$ ))(=> (monotone$d ?v0 ?v1 ?v2 )(monotone$a (fun_ord$ ?v0 )?v1 (fun_app$aj (uvf$ ?v2 )?v3 )))):named a89 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ )(?v2 B_llist_a_b_llist_fun_fun$ )(?v3 A$ ))(=> (monotone$c ?v0 ?v1 ?v2 )(monotone$b (fun_ord$ ?v0 )?v1 (fun_app$ak (uvg$ ?v2 )?v3 )))):named a90 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 C_llist_c_llist_bool_fun_fun$ )(?v2 B_llist_c_llist_fun$ )(?v3 A$ ))(=> (monotone$h ?v0 ?v1 ?v2 )(monotone$ (fun_ord$ ?v0 )?v1 (fun_app$ai (uvh$ ?v2 )?v3 )))):named a91 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 A$ ))(monotone$a (fun_ord$ ?v0 )?v0 (uvi$ ?v1 ))):named a92 ))
(check-sat )
;(get-unsat-core )
