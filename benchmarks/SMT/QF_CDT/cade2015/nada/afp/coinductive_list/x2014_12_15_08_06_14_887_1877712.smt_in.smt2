;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun a$ ()B$ )
(declare-fun lhd$a ()B_a_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun ltl$a ()B_b_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (B_bool_fun$ B$ )Bool )
(declare-fun iS_LNIL$ ()B_bool_fun$ )
(declare-fun fun_app$a (B_b_fun$ B$ )B$ )
(declare-fun fun_app$b (B_a_fun$ B$ )A$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun unfold_llist$ (B_bool_fun$ B_a_fun$ B_b_fun$ B$ )A_llist$ )
(assert (! (not (= (ltl$ (unfold_llist$ iS_LNIL$ lhd$a ltl$a a$ ))(ite (fun_app$ iS_LNIL$ a$ )lNil$ (unfold_llist$ iS_LNIL$ lhd$a ltl$a (fun_app$a ltl$a a$ ))))):named a0 ))
(assert (! (= (ltl$ lNil$ )lNil$ ):named a1 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (ltl$ (unfold_llist$ ?v0 ?v2 ?v3 ?v1 ))(unfold_llist$ ?v0 ?v2 ?v3 (fun_app$a ?v3 ?v1 ))))):named a2 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(! (=> (fun_app$ ?v0 ?v1 )(= (unfold_llist$ ?v0 ?v2 ?v3 ?v1 )lNil$ )):pattern ((unfold_llist$ ?v0 ?v2 ?v3 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_llist$ ?v0 lNil$ )):named a4 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (unfold_llist$ ?v0 ?v1 ?v2 ?v3 )(ite (fun_app$ ?v0 ?v3 )lNil$ (lCons$ (fun_app$b ?v1 ?v3 )(unfold_llist$ ?v0 ?v1 ?v2 (fun_app$a ?v2 ?v3 )))))):named a5 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (not (lnull$ (unfold_llist$ ?v0 ?v1 ?v2 ?v3 )))(not (fun_app$ ?v0 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (lnull$ (unfold_llist$ ?v0 ?v1 ?v2 ?v3 ))(fun_app$ ?v0 ?v3 ))):named a7 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (lhd$ (unfold_llist$ ?v0 ?v2 ?v3 ?v1 ))(fun_app$b ?v2 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$ (lmap$ ?v0 ?v1 ))(lmap$ ?v0 (ltl$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (unfold_llist$ ?v0 ?v2 ?v3 ?v1 )(lCons$ (fun_app$b ?v2 ?v1 )(unfold_llist$ ?v0 ?v2 ?v3 (fun_app$a ?v3 ?v1 )))))):named a10 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(not (lnull$ (unfold_llist$ ?v0 ?v2 ?v3 ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (fun_app$ ?v0 ?v1 )(lnull$ (unfold_llist$ ?v0 ?v2 ?v3 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$ ?v0 ?v1 ))(lnull$ ?v1 ))):named a14 ))
(check-sat )
;(get-unsat-core )
