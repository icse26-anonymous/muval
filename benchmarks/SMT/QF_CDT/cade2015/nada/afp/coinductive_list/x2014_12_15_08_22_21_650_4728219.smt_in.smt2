;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_llist_enat_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$a ()A_b_prod_llist$)
(declare-fun lhd$a (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$a (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$a (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-fun us$ ()A_b_prod_llist$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun llcp$a (A_b_prod_llist$ )A_b_prod_llist_enat_fun$ )
(declare-fun llcp$b (B_llist$ )B_llist_enat_fun$ )
(declare-fun lmap$a (A_b_prod_a_fun$ A_b_prod_llist$ )A_llist$ )
(declare-fun lmap$b (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$c (A_a_b_prod_fun$ A_llist$ )A_b_prod_llist$ )
(declare-fun lmap$d (A_b_prod_a_b_prod_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lmap$e (B_a_b_prod_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun lmap$f (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$g (A_b_prod_b_fun$ A_b_prod_llist$ )B_llist$ )
(declare-fun lmap$h (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun less_eq$ (Enat$ )Enat_bool_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$b (A_b_prod_llist_enat_fun$ A_b_prod_llist$ )Enat$ )
(declare-fun fun_app$c (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun infinity$ ()Enat$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun lfinite$a (A_b_prod_llist$ )Bool )
(declare-fun lfinite$b (B_llist$ )Bool )
(declare-fun llength$a (A_b_prod_llist$ )Enat$ )
(declare-fun llength$b (B_llist$ )Enat$ )
(declare-fun iterates$a (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod_llist$ )
(declare-fun iterates$b (B_b_fun$ B$ )B_llist$ )
(assert (! (not (= (llength$ xs$ )infinity$ )):named a0 ))
(assert (! (fun_app$ (less_eq$ (llength$a us$ ))(llength$b ys$ )):named a1 ))
(assert (! (= (llength$a us$ )infinity$ ):named a2 ))
(assert (! (fun_app$ (less_eq$ (llength$a us$ ))(llength$ xs$ )):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (llength$ (iterates$ ?v0 ?v1 ))infinity$ )):named a4 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod$ ))(= (llength$a (iterates$a ?v0 ?v1 ))infinity$ )):named a5 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (llength$b (iterates$b ?v0 ?v1 ))infinity$ )):named a6 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (less_eq$ infinity$ )?v0 )(= ?v0 infinity$ )):pattern ((fun_app$ (less_eq$ infinity$ )?v0 )))):named a7 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (less_eq$ ?v0 )infinity$ )true ):pattern ((less_eq$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$b (llcp$a ?v0 )?v0 )(llength$a ?v0 )):pattern ((llcp$a ?v0 )))):named a10 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$c (llcp$b ?v0 )?v0 )(llength$b ?v0 )):pattern ((llcp$b ?v0 )))):named a11 ))
(assert (! (fun_app$ (less_eq$ (llength$a us$ ))(min$ (llength$ xs$ )(llength$b ys$ ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(= (= (llength$ ?v0 )infinity$ )(not (lfinite$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(= (= (llength$a ?v0 )infinity$ )(not (lfinite$a ?v0 )))):named a14 ))
(assert (! (forall ((?v0 B_llist$ ))(= (= (llength$b ?v0 )infinity$ )(not (lfinite$b ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (llength$ ?v0 )infinity$ )):pattern ((llength$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (=> (not (lfinite$a ?v0 ))(= (llength$a ?v0 )infinity$ )):pattern ((llength$a ?v0 )))):named a17 ))
(assert (! (forall ((?v0 B_llist$ ))(! (=> (not (lfinite$b ?v0 ))(= (llength$b ?v0 )infinity$ )):pattern ((llength$b ?v0 )))):named a18 ))
(assert (! (forall ((?v0 Enat$ ))(fun_app$ (less_eq$ ?v0 )infinity$ )):named a19 ))
(assert (! (not (lfinite$a us$ )):named a20 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$ ?v1 ))):named a21 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$ (lmap$a ?v0 ?v1 ))(llength$a ?v1 ))):named a22 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$ (lmap$b ?v0 ?v1 ))(llength$b ?v1 ))):named a23 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$c ?v0 ?v1 ))(llength$ ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$a (lmap$d ?v0 ?v1 ))(llength$a ?v1 ))):named a25 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_llist$ ))(= (llength$a (lmap$e ?v0 ?v1 ))(llength$b ?v1 ))):named a26 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$b (lmap$f ?v0 ?v1 ))(llength$ ?v1 ))):named a27 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$b (lmap$g ?v0 ?v1 ))(llength$a ?v1 ))):named a28 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$b (lmap$h ?v0 ?v1 ))(llength$b ?v1 ))):named a29 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_llist$ ))(= (lfinite$a (lmap$e ?v0 ?v1 ))(lfinite$b ?v1 ))):named a30 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_llist$ ))(= (lfinite$b (lmap$g ?v0 ?v1 ))(lfinite$a ?v1 ))):named a31 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_llist$ ))(= (lfinite$ (lmap$a ?v0 ?v1 ))(lfinite$a ?v1 ))):named a32 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lfinite$b (lmap$h ?v0 ?v1 ))(lfinite$b ?v1 ))):named a33 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lfinite$ (lmap$b ?v0 ?v1 ))(lfinite$b ?v1 ))):named a34 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_llist$ ))(= (lfinite$a (lmap$c ?v0 ?v1 ))(lfinite$ ?v1 ))):named a35 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lfinite$b (lmap$f ?v0 ?v1 ))(lfinite$ ?v1 ))):named a36 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a37 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_llist$ ))(= (lfinite$a (lmap$d ?v0 ?v1 ))(lfinite$a ?v1 ))):named a38 ))
(assert (! (forall ((?v0 Enat$ ))(= (min$ infinity$ ?v0 )?v0 )):named a39 ))
(check-sat )
;(get-unsat-core )
