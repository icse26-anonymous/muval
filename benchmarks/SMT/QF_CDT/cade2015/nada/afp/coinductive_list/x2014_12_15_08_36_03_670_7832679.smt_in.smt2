;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_b_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort Nat_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_b_prod_llist$)
(declare-fun lhd$ (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$ (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$ (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-fun f$ ()Nat_a_fun$ )
(declare-fun g$ ()Nat_b_fun$ )
(declare-fun uu$ ()Nat_a_b_prod_fun$ )
(declare-fun uua$ (A_b_prod_set$ )A_b_bool_fun_fun$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun member$ (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun fun_app$ (Nat_a_b_prod_fun$ Nat$ )A_b_prod$ )
(declare-fun fun_app$a (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$b (Nat_b_fun$ Nat$ )B$ )
(declare-fun fun_app$c (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$d (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$e (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun inf_llist$ (Nat_a_fun$ )A_llist$ )
(declare-fun inf_llist$a (Nat_b_fun$ )B_llist$ )
(declare-fun inf_llist$b (Nat_a_b_prod_fun$ )A_b_prod_llist$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(pair$ (fun_app$a f$ ?v0 )(fun_app$b g$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$c (fun_app$d (uua$ ?v0 )?v1 )?v2 )(member$ (pair$ ?v1 ?v2 )?v0 )):pattern ((fun_app$c (fun_app$d (uua$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (not (= (lzip$ (inf_llist$ f$ )(inf_llist$a g$ ))(inf_llist$b uu$ ))):named a2 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_a_fun$ ))(= (= (inf_llist$ ?v0 )(inf_llist$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat_b_fun$ )(?v1 Nat_b_fun$ ))(= (= (inf_llist$a ?v0 )(inf_llist$a ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat_a_b_prod_fun$ )(?v1 Nat_a_b_prod_fun$ ))(= (= (inf_llist$b ?v0 )(inf_llist$b ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_set$ ))(= (= (uua$ ?v0 )(uua$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_b_prod$ ))(=> (forall ((?v1 A$ )(?v2 B$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a9 ))
(assert (! (forall ((?v0 A_b_prod$ ))(exists ((?v1 A$ )(?v2 B$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a11 ))
(assert (! (forall ((?v0 A_b_prod$ ))(=> (forall ((?v1 A$ )(?v2 B$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a12 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod$ ))(=> (forall ((?v2 A$ )(?v3 B$ ))(fun_app$e ?v0 (pair$ ?v2 ?v3 )))(fun_app$e ?v0 ?v1 ))):named a13 ))
(check-sat )
;(get-unsat-core )
