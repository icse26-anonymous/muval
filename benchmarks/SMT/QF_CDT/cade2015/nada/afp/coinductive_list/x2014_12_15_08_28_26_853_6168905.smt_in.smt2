;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun r$ ()A_a_bool_fun_fun$ )
(declare-fun x$ ()A$ )
(declare-fun y$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ys$a ()A_llist$ )
(declare-fun ysa$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(assert (! (not (and (= (lnull$ xsa$ )(lnull$ ysa$ ))(=> (and (not (lnull$ xsa$ ))(not (lnull$ ysa$ )))(and (= (lhd$ xsa$ )(lhd$ ysa$ ))(exists ((?v0 A_llist$ )(?v1 A_llist$ ))(and (= (ltl$ xsa$ )?v0 )(and (= (ltl$ ysa$ )?v1 )(and (llexord$ r$ ?v0 ?v1 )(not (exists ((?v2 A_llist$ )(?v3 A_llist$ )(?v4 A$ )(?v5 A_llist$ ))(and (lfinite$ ?v2 )(and (= ?v0 (fun_app$ (lappend$ ?v2 )?v3 ))(and (= ?v1 (fun_app$ (lappend$ ?v2 )(lCons$ ?v4 ?v5 )))(or (= ?v3 lNil$ )(fun_app$a (fun_app$b r$ (lhd$ ?v3 ))?v4 ))))))))))))))):named a0 ))
(assert (! (fun_app$a (fun_app$b r$ x$ )y$ ):named a1 ))
(assert (! (= xsa$ (lCons$ x$ xs$ )):named a2 ))
(assert (! (= ysa$ (lCons$ y$ ys$ )):named a3 ))
(assert (! (llexord$ r$ xsa$ ysa$ ):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$ ?v0 ?v1 ?v1 )):named a6 ))
(assert (! (=> (and (lfinite$ lNil$ )(and (= xsa$ (fun_app$ (lappend$ lNil$ )xsa$ ))(= ysa$ (fun_app$ (lappend$ lNil$ )(lCons$ y$ ys$ )))))(and (not (= xsa$ lNil$ ))(not (fun_app$a (fun_app$b r$ (lhd$ xsa$ ))y$ )))):named a7 ))
(assert (! (llexord$ r$ xs$a ys$a ):named a8 ))
(assert (! (not (exists ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(and (lfinite$ ?v0 )(and (= xsa$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (= ysa$ (fun_app$ (lappend$ ?v0 )(lCons$ ?v2 ?v3 )))(or (= ?v1 lNil$ )(fun_app$a (fun_app$b r$ (lhd$ ?v1 ))?v2 ))))))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )(lCons$ ?v0 (fun_app$ (lappend$ ?v1 )?v2 ))):pattern ((fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (fun_app$ (lappend$ ?v0 )?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (lnull$ ?v0 )(lnull$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ lNil$ )?v0 )?v0 ):pattern ((fun_app$ (lappend$ lNil$ )?v0 )))):named a16 ))
(assert (! (= (lfinite$ lNil$ )true ):named a17 ))
(check-sat )
;(get-unsat-core )
