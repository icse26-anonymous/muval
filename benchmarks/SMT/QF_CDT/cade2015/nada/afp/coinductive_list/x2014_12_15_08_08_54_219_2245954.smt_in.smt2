;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lprefix$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(assert (! (not (= (lhd$ xs$ )(lhd$ ys$ ))):named a0 ))
(assert (! (fun_app$ (lprefix$ xs$ )ys$ ):named a1 ))
(assert (! (not (lnull$ xs$ )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (lprefix$ ?v0 )?v0 )):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (lnull$ ?v0 )(= (fun_app$ (lprefix$ ?v1 )?v0 )(lnull$ ?v1 ))):pattern ((fun_app$ (lprefix$ ?v1 )?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lnull$ ?v0 )(fun_app$ (lprefix$ ?v0 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(and (=> (lnull$ ?v4 )(lnull$ ?v3 ))(=> (and (not (lnull$ ?v3 ))(not (lnull$ ?v4 )))(and (= (lhd$ ?v3 )(lhd$ ?v4 ))(or (fun_app$ (fun_app$a ?v0 (ltl$ ?v3 ))(ltl$ ?v4 ))(fun_app$ (lprefix$ (ltl$ ?v3 ))(ltl$ ?v4 )))))))))(fun_app$ (lprefix$ ?v1 )?v2 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lhd$ (lappend$ ?v0 ?v1 ))(ite (lnull$ ?v0 )(lhd$ ?v1 )(lhd$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lprefix$ ?v0 )lNil$ )(lnull$ ?v0 )):pattern ((lprefix$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_fun$ ))(=> (not (lnull$ ?v0 ))(= (lhd$ (lmap$ ?v1 ?v0 ))(fun_app$b ?v1 (lhd$ ?v0 ))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (= (lnull$ ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(= (ltl$ ?v0 )(ltl$ ?v1 )))))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(and (= (lnull$ ?v3 )(lnull$ ?v4 ))(=> (and (not (lnull$ ?v3 ))(not (lnull$ ?v4 )))(and (= (lhd$ ?v3 )(lhd$ ?v4 ))(or (fun_app$ (fun_app$a ?v0 (ltl$ ?v3 ))(ltl$ ?v4 ))(= (ltl$ ?v3 )(ltl$ ?v4 )))))))))(= ?v1 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(and (= (lnull$ ?v3 )(lnull$ ?v4 ))(=> (and (not (lnull$ ?v3 ))(not (lnull$ ?v4 )))(and (= (lhd$ ?v3 )(lhd$ ?v4 ))(fun_app$ (fun_app$a ?v0 (ltl$ ?v3 ))(ltl$ ?v4 ))))))))(= ?v1 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lnull$ ?v0 ))(member$ (lhd$ ?v0 )(lset$ ?v0 )))):named a15 ))
(check-sat )
;(get-unsat-core )
