;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_b_llist_prod_set$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-sort A_llist_b_llist_prod$ 0)
(declare-fun fst$ (A_llist_b_llist_prod$)A_llist$)
(declare-fun snd$ (A_llist_b_llist_prod$)B_llist$)
(declare-fun pair$ (A_llist$ B_llist$ )A_llist_b_llist_prod$)
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun uu$ ()B_b_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ya$ ()A_llist_b_llist_prod_set$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun uua$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun uub$ ()A_a_bool_fun_fun$ )
(declare-fun uuc$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun member$ (A_llist_b_llist_prod$ A_llist_b_llist_prod_set$ )Bool )
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$f (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$h (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$i (A_llist_b_llist_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$j (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun case_prod$ (A_llist_b_llist_bool_fun_fun$ A_llist_b_llist_prod$ )Bool )
(declare-fun iterates$a (B_b_fun$ B$ )B_llist$ )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ )A_llist_b_llist_bool_fun_fun$ )
(declare-fun llist_all2$a (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun llist_all2$c (B_a_bool_fun_fun$ B_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uuc$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$d (fun_app$e uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uu$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$f (fun_app$g uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uub$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (fun_app$d (fun_app$h p$ (lhd$ xs$ ))(lhd$a ys$ ))):named a4 ))
(assert (! (fun_app$ (fun_app$i (llist_all2$ p$ )xs$ )ys$ ):named a5 ))
(assert (! (not (lnull$ xs$ )):named a6 ))
(assert (! (not (lnull$a ys$ )):named a7 ))
(assert (! (member$ (pair$ xs$ ys$ )ya$ ):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(=> (member$ (pair$ ?v0 ?v1 )ya$ )(fun_app$ (fun_app$i (llist_all2$ p$ )?v0 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (lhd$ (iterates$ ?v0 ?v1 ))?v1 )):named a10 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (lhd$a (iterates$a ?v0 ?v1 ))?v1 )):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (=> (or (lnull$ ?v0 )(not (fun_app$f ?v1 (lhd$ ?v0 ))))false )(=> (and (not (lnull$ ?v0 ))(fun_app$f ?v1 (lhd$ ?v0 )))false ))false )):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_bool_fun$ ))(=> (and (=> (or (lnull$a ?v0 )(not (fun_app$d ?v1 (lhd$a ?v0 ))))false )(=> (and (not (lnull$a ?v0 ))(fun_app$d ?v1 (lhd$a ?v0 )))false ))false )):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lhd$ (lCons$ ?v0 ?v1 ))?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lhd$a (lCons$a ?v0 ?v1 ))?v0 ):pattern ((lCons$a ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(=> (member$ ?v0 ya$ )(case_prod$ (llist_all2$ p$ )?v0 ))):named a16 ))
(assert (! (= (llist_all2$a uu$ )uua$ ):named a17 ))
(assert (! (= (llist_all2$b uub$ )uuc$ ):named a18 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 B$ ))(=> (fun_app$d (fun_app$e ?v0 ?v4 )?v5 )(fun_app$d (fun_app$e ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$a (llist_all2$a ?v3 )?v1 )?v2 ))):named a19 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (llist_all2$c ?v0 ?v1 ?v2 )(forall ((?v4 B$ )(?v5 A$ ))(=> (fun_app$f (fun_app$j ?v0 ?v4 )?v5 )(fun_app$f (fun_app$j ?v3 ?v4 )?v5 ))))(llist_all2$c ?v3 ?v1 ?v2 ))):named a20 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$b ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (fun_app$f (fun_app$g ?v0 ?v4 )?v5 )(fun_app$f (fun_app$g ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$c (llist_all2$b ?v3 )?v1 )?v2 ))):named a21 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$i (llist_all2$ ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 B$ ))(=> (fun_app$d (fun_app$h ?v0 ?v4 )?v5 )(fun_app$d (fun_app$h ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$i (llist_all2$ ?v3 )?v1 )?v2 ))):named a22 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$b ?v0 )?v1 )?v2 )(not (lnull$ ?v2 )))(fun_app$f (fun_app$g ?v0 (lhd$ ?v1 ))(lhd$ ?v2 )))):named a23 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (and (llist_all2$c ?v0 ?v1 ?v2 )(not (lnull$ ?v2 )))(fun_app$f (fun_app$j ?v0 (lhd$a ?v1 ))(lhd$ ?v2 )))):named a24 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$a ?v0 )?v1 )?v2 )(not (lnull$a ?v2 )))(fun_app$d (fun_app$e ?v0 (lhd$a ?v1 ))(lhd$a ?v2 )))):named a25 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$ (fun_app$i (llist_all2$ ?v0 )?v1 )?v2 )(not (lnull$a ?v2 )))(fun_app$d (fun_app$h ?v0 (lhd$ ?v1 ))(lhd$a ?v2 )))):named a26 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$b ?v0 )?v1 )?v2 )(not (lnull$ ?v1 )))(fun_app$f (fun_app$g ?v0 (lhd$ ?v1 ))(lhd$ ?v2 )))):named a27 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (and (llist_all2$c ?v0 ?v1 ?v2 )(not (lnull$a ?v1 )))(fun_app$f (fun_app$j ?v0 (lhd$a ?v1 ))(lhd$ ?v2 )))):named a28 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$a ?v0 )?v1 )?v2 )(not (lnull$a ?v1 )))(fun_app$d (fun_app$e ?v0 (lhd$a ?v1 ))(lhd$a ?v2 )))):named a29 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$ (fun_app$i (llist_all2$ ?v0 )?v1 )?v2 )(not (lnull$ ?v1 )))(fun_app$d (fun_app$h ?v0 (lhd$ ?v1 ))(lhd$a ?v2 )))):named a30 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a31 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a32 ))
(assert (! (=> (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(=> (and (member$ (pair$ ?v0 ?v1 )ya$ )(and (not (lnull$ ?v0 ))(not (lnull$a ?v1 ))))false ))false ):named a33 ))
(check-sat )
;(get-unsat-core )
