;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun zs$ ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun zsa$ ()A_llist$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lfilter$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun gen_lset$ (A_set$ )A_llist_a_set_fun$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun finite_lprefix$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (not (= xsa$ (fun_app$ (lappend$ lNil$ )xsa$ ))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ lNil$ )?v0 )?v0 ):pattern ((fun_app$ (lappend$ lNil$ )?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (fun_app$ (lappend$ ?v0 )?v1 )lNil$ )(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0 )?v1 ))?v2 )(fun_app$ (lappend$ ?v0 )(fun_app$ (lappend$ ?v1 )?v2 )))):named a5 ))
(assert (! (= (fun_app$ (lappend$ lNil$ )lNil$ )lNil$ ):named a6 ))
(assert (! (= (fun_app$ (lfilter$ p$ )xs$ )(fun_app$ (lappend$ ys$ )zs$ )):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$ (lfilter$ ?v0 )lNil$ )lNil$ ):pattern ((lfilter$ ?v0 )))):named a8 ))
(assert (! (= (fun_app$ (lfilter$ p$ )xsa$ )(fun_app$ (lappend$ lNil$ )zsa$ )):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$ (lfilter$ ?v0 )(fun_app$ (lfilter$ ?v0 )?v1 ))(fun_app$ (lfilter$ ?v0 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$b (gen_lset$ ?v0 )lNil$ )?v0 ):pattern ((gen_lset$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (finite_lprefix$ ?v0 )lNil$ )(= ?v0 lNil$ )):pattern ((finite_lprefix$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (finite_lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$a (finite_lprefix$ lNil$ )?v0 )))):named a14 ))
(assert (! (= (lstrict_prefix$ lNil$ lNil$ )false ):named a15 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_llist$ ?v0 lNil$ )):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0 )(lCons$ ?v1 lNil$ )))?v2 )(fun_app$ (lappend$ ?v0 )(lCons$ ?v1 ?v2 )))):named a17 ))
(check-sat )
;(get-unsat-core )
