;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Nat$ )
(declare-fun r$ (A$ A$ )Bool )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(assert (! (not (= ys$ (lappend$ (ltake$ (enat$ n$ )xs$ )(lCons$ (lnth$ ys$ n$ )(ldrop$ (enat$ (suc$ n$ ))ys$ ))))):named a0 ))
(assert (! (= (ltake$ (enat$ n$ )xs$ )(ltake$ (enat$ n$ )ys$ )):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (less$ (enat$ n$ )(min$ (llength$ xs$ )(llength$ ys$ ))):named a3 ))
(assert (! (r$ (lnth$ xs$ n$ )(lnth$ ys$ n$ )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$ (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$ ?v0 ?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 Nat$ ))(! (= (lnth$ (lCons$ ?v0 ?v1 )(suc$ ?v2 ))(lnth$ ?v1 ?v2 )):pattern ((lnth$ (lCons$ ?v0 ?v1 )(suc$ ?v2 ))))):named a6 ))
(assert (! (= xs$ (lappend$ (ltake$ (enat$ n$ )xs$ )(ldrop$ (enat$ n$ )xs$ ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (lappend$ (ltake$ ?v0 ?v1 )(ldrop$ ?v0 ?v1 ))?v1 )):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a10 ))
(assert (! (exists ((?v0 Nat$ ))(and (less$ (enat$ ?v0 )(min$ (llength$ xs$ )(llength$ ys$ )))(and (= (ltake$ (enat$ ?v0 )xs$ )(ltake$ (enat$ ?v0 )ys$ ))(r$ (lnth$ xs$ ?v0 )(lnth$ ys$ ?v0 ))))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )?v1 )(= (lnth$ (ltake$ ?v1 ?v2 )?v0 )(lnth$ ?v2 ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (ltake$ ?v0 (ltake$ ?v1 ?v2 ))(ltake$ (min$ ?v0 ?v1 )?v2 ))):named a13 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (and (less$ (enat$ ?v0 )(min$ (llength$ xs$ )(llength$ ys$ )))(and (= (ltake$ (enat$ ?v0 )xs$ )(ltake$ (enat$ ?v0 )ys$ ))(r$ (lnth$ xs$ ?v0 )(lnth$ ys$ ?v0 ))))false ))false ):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a17 ))
(check-sat )
;(get-unsat-core )
