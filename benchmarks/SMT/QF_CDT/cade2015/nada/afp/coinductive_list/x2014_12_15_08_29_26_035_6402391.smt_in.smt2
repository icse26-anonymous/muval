;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_prod_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_a_prod_bool_fun$ 0 )
(declare-sort A_list_a_list_prod_set$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_list$ 0)
(declare-sort A_list_a_list_prod$ 0)
(declare-sort A_a_prod$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun fst$ (A_list_a_list_prod$)A_list$)
(declare-fun snd$ (A_list_a_list_prod$)A_list$)
(declare-fun pair$ (A_list$ A_list$ )A_list_a_list_prod$)
(declare-fun fst$a (A_a_prod$)A$)
(declare-fun snd$a (A_a_prod$)A$)
(declare-fun pair$a (A$ A$ )A_a_prod$)
(declare-fun r$ ()A_a_bool_fun_fun$ )
(declare-fun xs$ ()A_list$ )
(declare-fun ys$ ()A_list$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lexord$ (A_a_prod_set$ )A_list_a_list_prod_set$ )
(declare-fun member$ (A_list_a_list_prod$ A_list_a_list_prod_set$ )Bool )
(declare-fun collect$ (A_a_prod_bool_fun$ )A_a_prod_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun case_prod$ (A_a_bool_fun_fun$ )A_a_prod_bool_fun$ )
(assert (! (not (llexord$ r$ (llist_of$ xs$ )(llist_of$ ys$ ))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$ ?v0 ?v1 ?v1 )):named a2 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (forall ((?v3 A$ )(?v4 A$ ))(or (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(or (= ?v3 ?v4 )(fun_app$ (fun_app$a ?v0 ?v4 )?v3 ))))(or (llexord$ ?v0 ?v1 ?v2 )(llexord$ ?v0 ?v2 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (llexord$ ?v0 ?v1 ?v2 )(and (llexord$ ?v0 ?v2 ?v3 )(forall ((?v4 A$ )(?v5 A$ )(?v6 A$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v4 )?v5 )(fun_app$ (fun_app$a ?v0 ?v5 )?v6 ))(fun_app$ (fun_app$a ?v0 ?v4 )?v6 )))))(llexord$ ?v0 ?v1 ?v3 ))):named a4 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (llexord$ ?v0 ?v1 ?v2 )(and (llexord$ ?v0 ?v2 ?v1 )(forall ((?v3 A$ )(?v4 A$ ))(=> (and (fun_app$ (fun_app$a ?v0 ?v3 )?v4 )(fun_app$ (fun_app$a ?v0 ?v4 )?v3 ))false ))))(= ?v1 ?v2 ))):named a5 ))
(assert (! (member$ (pair$ xs$ ys$ )(lexord$ (collect$ (case_prod$ r$ )))):named a6 ))
(assert (! (or (= xs$ ys$ )(member$ (pair$ xs$ ys$ )(lexord$ (collect$ (case_prod$ r$ ))))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a8 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (llexord$ ?v0 lNil$ ?v1 )true ):pattern ((llexord$ ?v0 lNil$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (llexord$ ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))(or (and (= ?v1 ?v3 )(llexord$ ?v0 ?v2 ?v4 ))(fun_app$ (fun_app$a ?v0 ?v1 )?v3 ))):pattern ((llexord$ ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_llist$ ))(! (=> (lnull$ ?v0 )(= (llexord$ ?v1 ?v2 ?v0 )(lnull$ ?v2 ))):pattern ((llexord$ ?v1 ?v2 ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$ ?v0 lNil$ ?v1 )):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (lprefix$ ?v0 ?v1 )(llexord$ ?v2 ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (llexord$ ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))(or (fun_app$ (fun_app$a ?v0 ?v1 )?v3 )(and (= ?v1 ?v3 )(llexord$ ?v0 ?v2 ?v4 )))):pattern ((llexord$ ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))))):named a14 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A_llist$ ))(= (llexord$ ?v0 (lCons$ ?v1 ?v2 )?v3 )(exists ((?v4 A$ )(?v5 A_llist$ ))(and (= ?v3 (lCons$ ?v4 ?v5 ))(or (and (= ?v1 ?v4 )(llexord$ ?v0 ?v2 ?v5 ))(fun_app$ (fun_app$a ?v0 ?v1 )?v4 )))))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A$ ))(=> (llexord$ ?v0 ?v1 ?v2 )(llexord$ ?v0 (lCons$ ?v3 ?v1 )(lCons$ ?v3 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(llexord$ ?v0 (lCons$ ?v1 ?v3 )(lCons$ ?v2 ?v4 )))):named a17 ))
(check-sat )
;(get-unsat-core )
