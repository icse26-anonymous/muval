;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lsetp$ (A_llist$ )A_bool_fun$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(assert (! (not (= (lfinite$ (lCons$ x$ xs$ ))(lfinite$ xs$ ))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (lfinite$ ?v0 )(lfinite$ (lCons$ ?v1 ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))(and (fun_app$ ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$a (lmember$ ?v0 )(lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(fun_app$a (lmember$ ?v0 )?v2 ))):pattern ((fun_app$a (lmember$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ ?v0 )(or (= ?v0 lNil$ )(exists ((?v1 A_llist$ )(?v2 A$ ))(and (= ?v0 (lCons$ ?v2 ?v1 ))(lfinite$ ?v1 )))))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (lfinite$ ?v0 )(and (=> (= ?v0 lNil$ )false )(forall ((?v1 A_llist$ )(?v2 A$ ))(=> (and (= ?v0 (lCons$ ?v2 ?v1 ))(lfinite$ ?v1 ))false ))))false )):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(= (fun_app$ (lsetp$ ?v0 )?v1 )(or (exists ((?v2 A$ )(?v3 A_llist$ ))(and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$ (lsetp$ ?v2 )?v3 ))))))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (and (fun_app$ (lsetp$ ?v0 )?v1 )(and (forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(=> (and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$ (lsetp$ ?v2 )?v3 )))false ))))false )):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A$ ))(=> (fun_app$ (lsetp$ ?v0 )?v1 )(fun_app$ (lsetp$ (lCons$ ?v2 ?v0 ))?v1 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(fun_app$ (lsetp$ (lCons$ ?v0 ?v1 ))?v0 )):named a10 ))
(assert (! (lfinite$ lNil$ ):named a11 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a12 ))
(check-sat )
;(get-unsat-core )
