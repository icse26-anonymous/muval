;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_list$ 0)
(declare-sort A_list_a_prod$ 0)
(declare-sort A_list_a_prod_list$ 0)
(declare-sort A_a_prod$ 0)
(declare-sort A_a_a_prod_prod$ 0)
(declare-sort A_a_a_prod_prod_list$ 0)
(declare-sort A_a_list_prod$ 0)
(declare-sort A_a_list_prod_list$ 0)
(declare-sort A_a_prod_list$ 0)
(declare-sort A_a_prod_list_list$ 0)
(declare-sort A_list_list$ 0)
(declare-sort A_list_list_list$ 0)
(declare-sort A_list_a_prod_list_list$ 0)
(declare-sort A_a_a_prod_prod_list_list$ 0)
(declare-sort A_a_list_prod_list_list$ 0)
(declare-sort A_a_prod_list_list_list$ 0)
(declare-sort A_list_list_list_list$ 0)
(declare-sort A_list_a_list_prod$ 0)
(declare-sort A_list_a_list_prod_list$ 0)
(declare-sort A_a_prod_a_prod$ 0)
(declare-sort A_a_prod_a_prod_list$ 0)
(declare-sort A_list_a_a_prod_prod$ 0)
(declare-sort A_list_a_a_prod_prod_list$ 0)
(declare-sort A_a_prod_a_list_prod$ 0)
(declare-sort A_a_prod_a_list_prod_list$ 0)
(declare-sort A_a_prod_a_a_prod_prod$ 0)
(declare-sort A_a_prod_a_a_prod_prod_list$ 0)
(declare-sort A_a_list_list_prod$ 0)
(declare-sort A_a_list_list_prod_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun fst$ (A_list_a_prod$)A_list$)
(declare-fun snd$ (A_list_a_prod$)A$)
(declare-fun pair$ (A_list$ A$ )A_list_a_prod$)
(declare-fun nil$a ()A_list_a_prod_list$)
(declare-fun hd$a (A_list_a_prod_list$)A_list_a_prod$)
(declare-fun tl$a (A_list_a_prod_list$)A_list_a_prod_list$)
(declare-fun cons$a (A_list_a_prod$ A_list_a_prod_list$ )A_list_a_prod_list$)
(declare-fun fst$a (A_a_prod$)A$)
(declare-fun snd$a (A_a_prod$)A$)
(declare-fun pair$a (A$ A$ )A_a_prod$)
(declare-fun fst$b (A_a_a_prod_prod$)A$)
(declare-fun snd$b (A_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$b (A$ A_a_prod$ )A_a_a_prod_prod$)
(declare-fun nil$b ()A_a_a_prod_prod_list$)
(declare-fun hd$b (A_a_a_prod_prod_list$)A_a_a_prod_prod$)
(declare-fun tl$b (A_a_a_prod_prod_list$)A_a_a_prod_prod_list$)
(declare-fun cons$b (A_a_a_prod_prod$ A_a_a_prod_prod_list$ )A_a_a_prod_prod_list$)
(declare-fun fst$c (A_a_list_prod$)A$)
(declare-fun snd$c (A_a_list_prod$)A_list$)
(declare-fun pair$c (A$ A_list$ )A_a_list_prod$)
(declare-fun nil$c ()A_a_list_prod_list$)
(declare-fun hd$c (A_a_list_prod_list$)A_a_list_prod$)
(declare-fun tl$c (A_a_list_prod_list$)A_a_list_prod_list$)
(declare-fun cons$c (A_a_list_prod$ A_a_list_prod_list$ )A_a_list_prod_list$)
(declare-fun nil$d ()A_a_prod_list$)
(declare-fun hd$d (A_a_prod_list$)A_a_prod$)
(declare-fun tl$d (A_a_prod_list$)A_a_prod_list$)
(declare-fun cons$d (A_a_prod$ A_a_prod_list$ )A_a_prod_list$)
(declare-fun nil$e ()A_a_prod_list_list$)
(declare-fun hd$e (A_a_prod_list_list$)A_a_prod_list$)
(declare-fun tl$e (A_a_prod_list_list$)A_a_prod_list_list$)
(declare-fun cons$e (A_a_prod_list$ A_a_prod_list_list$ )A_a_prod_list_list$)
(declare-fun nil$f ()A_list_list$)
(declare-fun hd$f (A_list_list$)A_list$)
(declare-fun tl$f (A_list_list$)A_list_list$)
(declare-fun cons$f (A_list$ A_list_list$ )A_list_list$)
(declare-fun nil$g ()A_list_list_list$)
(declare-fun hd$g (A_list_list_list$)A_list_list$)
(declare-fun tl$g (A_list_list_list$)A_list_list_list$)
(declare-fun cons$g (A_list_list$ A_list_list_list$ )A_list_list_list$)
(declare-fun nil$h ()A_list_a_prod_list_list$)
(declare-fun hd$h (A_list_a_prod_list_list$)A_list_a_prod_list$)
(declare-fun tl$h (A_list_a_prod_list_list$)A_list_a_prod_list_list$)
(declare-fun cons$h (A_list_a_prod_list$ A_list_a_prod_list_list$ )A_list_a_prod_list_list$)
(declare-fun nil$i ()A_a_a_prod_prod_list_list$)
(declare-fun hd$i (A_a_a_prod_prod_list_list$)A_a_a_prod_prod_list$)
(declare-fun tl$i (A_a_a_prod_prod_list_list$)A_a_a_prod_prod_list_list$)
(declare-fun cons$i (A_a_a_prod_prod_list$ A_a_a_prod_prod_list_list$ )A_a_a_prod_prod_list_list$)
(declare-fun nil$j ()A_a_list_prod_list_list$)
(declare-fun hd$j (A_a_list_prod_list_list$)A_a_list_prod_list$)
(declare-fun tl$j (A_a_list_prod_list_list$)A_a_list_prod_list_list$)
(declare-fun cons$j (A_a_list_prod_list$ A_a_list_prod_list_list$ )A_a_list_prod_list_list$)
(declare-fun nil$k ()A_a_prod_list_list_list$)
(declare-fun hd$k (A_a_prod_list_list_list$)A_a_prod_list_list$)
(declare-fun tl$k (A_a_prod_list_list_list$)A_a_prod_list_list_list$)
(declare-fun cons$k (A_a_prod_list_list$ A_a_prod_list_list_list$ )A_a_prod_list_list_list$)
(declare-fun nil$l ()A_list_list_list_list$)
(declare-fun hd$l (A_list_list_list_list$)A_list_list_list$)
(declare-fun tl$l (A_list_list_list_list$)A_list_list_list_list$)
(declare-fun cons$l (A_list_list_list$ A_list_list_list_list$ )A_list_list_list_list$)
(declare-fun fst$d (A_list_a_list_prod$)A_list$)
(declare-fun snd$d (A_list_a_list_prod$)A_list$)
(declare-fun pair$d (A_list$ A_list$ )A_list_a_list_prod$)
(declare-fun nil$m ()A_list_a_list_prod_list$)
(declare-fun hd$m (A_list_a_list_prod_list$)A_list_a_list_prod$)
(declare-fun tl$m (A_list_a_list_prod_list$)A_list_a_list_prod_list$)
(declare-fun cons$m (A_list_a_list_prod$ A_list_a_list_prod_list$ )A_list_a_list_prod_list$)
(declare-fun fst$e (A_a_prod_a_prod$)A_a_prod$)
(declare-fun snd$e (A_a_prod_a_prod$)A$)
(declare-fun pair$e (A_a_prod$ A$ )A_a_prod_a_prod$)
(declare-fun nil$n ()A_a_prod_a_prod_list$)
(declare-fun hd$n (A_a_prod_a_prod_list$)A_a_prod_a_prod$)
(declare-fun tl$n (A_a_prod_a_prod_list$)A_a_prod_a_prod_list$)
(declare-fun cons$n (A_a_prod_a_prod$ A_a_prod_a_prod_list$ )A_a_prod_a_prod_list$)
(declare-fun fst$f (A_list_a_a_prod_prod$)A_list$)
(declare-fun snd$f (A_list_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$f (A_list$ A_a_prod$ )A_list_a_a_prod_prod$)
(declare-fun nil$o ()A_list_a_a_prod_prod_list$)
(declare-fun hd$o (A_list_a_a_prod_prod_list$)A_list_a_a_prod_prod$)
(declare-fun tl$o (A_list_a_a_prod_prod_list$)A_list_a_a_prod_prod_list$)
(declare-fun cons$o (A_list_a_a_prod_prod$ A_list_a_a_prod_prod_list$ )A_list_a_a_prod_prod_list$)
(declare-fun fst$g (A_a_prod_a_list_prod$)A_a_prod$)
(declare-fun snd$g (A_a_prod_a_list_prod$)A_list$)
(declare-fun pair$g (A_a_prod$ A_list$ )A_a_prod_a_list_prod$)
(declare-fun nil$p ()A_a_prod_a_list_prod_list$)
(declare-fun hd$p (A_a_prod_a_list_prod_list$)A_a_prod_a_list_prod$)
(declare-fun tl$p (A_a_prod_a_list_prod_list$)A_a_prod_a_list_prod_list$)
(declare-fun cons$p (A_a_prod_a_list_prod$ A_a_prod_a_list_prod_list$ )A_a_prod_a_list_prod_list$)
(declare-fun fst$h (A_a_prod_a_a_prod_prod$)A_a_prod$)
(declare-fun snd$h (A_a_prod_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$h (A_a_prod$ A_a_prod$ )A_a_prod_a_a_prod_prod$)
(declare-fun nil$q ()A_a_prod_a_a_prod_prod_list$)
(declare-fun hd$q (A_a_prod_a_a_prod_prod_list$)A_a_prod_a_a_prod_prod$)
(declare-fun tl$q (A_a_prod_a_a_prod_prod_list$)A_a_prod_a_a_prod_prod_list$)
(declare-fun cons$q (A_a_prod_a_a_prod_prod$ A_a_prod_a_a_prod_prod_list$ )A_a_prod_a_a_prod_prod_list$)
(declare-fun fst$i (A_a_list_list_prod$)A$)
(declare-fun snd$i (A_a_list_list_prod$)A_list_list$)
(declare-fun pair$i (A$ A_list_list$ )A_a_list_list_prod$)
(declare-fun nil$r ()A_a_list_list_prod_list$)
(declare-fun hd$r (A_a_list_list_prod_list$)A_a_list_list_prod$)
(declare-fun tl$r (A_a_list_list_prod_list$)A_a_list_list_prod_list$)
(declare-fun cons$r (A_a_list_list_prod$ A_a_list_list_prod_list$ )A_a_list_list_prod_list$)
(declare-fun xs$ ()A_list$ )
(declare-fun union$ (A_list_a_prod_list$ A_list_a_prod_list$ )A_list_a_prod_list$ )
(declare-fun insert$ (A_list_a_prod$ A_list_a_prod_list$ )A_list_a_prod_list$ )
(declare-fun rotate$ (Nat$ A_list_a_prod_list$ )A_list_a_prod_list$ )
(declare-fun union$a (A_a_a_prod_prod_list$ A_a_a_prod_prod_list$ )A_a_a_prod_prod_list$ )
(declare-fun union$b (A_a_list_prod_list$ A_a_list_prod_list$ )A_a_list_prod_list$ )
(declare-fun union$c (A_a_prod_list_list$ A_a_prod_list_list$ )A_a_prod_list_list$ )
(declare-fun union$d (A_list_list_list$ A_list_list_list$ )A_list_list_list$ )
(declare-fun union$e (A_list_list$ A_list_list$ )A_list_list$ )
(declare-fun union$f (A_a_prod_list$ A_a_prod_list$ )A_a_prod_list$ )
(declare-fun union$g (A_list$ A_list$ )A_list$ )
(declare-fun insert$a (A_a_a_prod_prod$ A_a_a_prod_prod_list$ )A_a_a_prod_prod_list$ )
(declare-fun insert$b (A_a_list_prod$ A_a_list_prod_list$ )A_a_list_prod_list$ )
(declare-fun insert$c (A_a_prod_list$ A_a_prod_list_list$ )A_a_prod_list_list$ )
(declare-fun insert$d (A_list_list$ A_list_list_list$ )A_list_list_list$ )
(declare-fun insert$e (A_list$ A_list_list$ )A_list_list$ )
(declare-fun insert$f (A_a_prod$ A_a_prod_list$ )A_a_prod_list$ )
(declare-fun insert$g (A$ A_list$ )A_list$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun n_lists$ (Nat$ A_list_a_prod_list$ )A_list_a_prod_list_list$ )
(declare-fun product$ (A_list$ A_list$ )A_a_prod_list$ )
(declare-fun rotate$a (Nat$ A_a_a_prod_prod_list$ )A_a_a_prod_prod_list$ )
(declare-fun rotate$b (Nat$ A_a_list_prod_list$ )A_a_list_prod_list$ )
(declare-fun rotate$c (Nat$ A_a_prod_list_list$ )A_a_prod_list_list$ )
(declare-fun rotate$d (Nat$ A_list_list_list$ )A_list_list_list$ )
(declare-fun rotate$e (Nat$ A_list_list$ )A_list_list$ )
(declare-fun rotate$f (Nat$ A_a_prod_list$ )A_a_prod_list$ )
(declare-fun rotate$g (Nat$ A_list$ )A_list$ )
(declare-fun rotate1$ (A_list_a_prod_list$ )A_list_a_prod_list$ )
(declare-fun distinct$ (A_list$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun n_lists$a (Nat$ A_a_a_prod_prod_list$ )A_a_a_prod_prod_list_list$ )
(declare-fun n_lists$b (Nat$ A_a_list_prod_list$ )A_a_list_prod_list_list$ )
(declare-fun n_lists$c (Nat$ A_a_prod_list_list$ )A_a_prod_list_list_list$ )
(declare-fun n_lists$d (Nat$ A_list_list_list$ )A_list_list_list_list$ )
(declare-fun n_lists$e (Nat$ A_list_list$ )A_list_list_list$ )
(declare-fun n_lists$f (Nat$ A_a_prod_list$ )A_a_prod_list_list$ )
(declare-fun n_lists$g (Nat$ A_list$ )A_list_list$ )
(declare-fun product$a (A_list$ A_list_list$ )A_a_list_prod_list$ )
(declare-fun product$b (A_list_list$ A_list$ )A_list_a_prod_list$ )
(declare-fun product$c (A_list$ A_a_prod_list$ )A_a_a_prod_prod_list$ )
(declare-fun product$d (A_list_list$ A_list_list$ )A_list_a_list_prod_list$ )
(declare-fun product$e (A_a_prod_list$ A_list$ )A_a_prod_a_prod_list$ )
(declare-fun product$f (A_list_list$ A_a_prod_list$ )A_list_a_a_prod_prod_list$ )
(declare-fun product$g (A_a_prod_list$ A_list_list$ )A_a_prod_a_list_prod_list$ )
(declare-fun product$h (A_a_prod_list$ A_a_prod_list$ )A_a_prod_a_a_prod_prod_list$ )
(declare-fun product$i (A_list$ A_list_list_list$ )A_a_list_list_prod_list$ )
(declare-fun rotate1$a (A_a_a_prod_prod_list$ )A_a_a_prod_prod_list$ )
(declare-fun rotate1$b (A_a_list_prod_list$ )A_a_list_prod_list$ )
(declare-fun rotate1$c (A_a_prod_list_list$ )A_a_prod_list_list$ )
(declare-fun rotate1$d (A_list_list_list$ )A_list_list_list$ )
(declare-fun rotate1$e (A_list_list$ )A_list_list$ )
(declare-fun rotate1$f (A_a_prod_list$ )A_a_prod_list$ )
(declare-fun rotate1$g (A_list$ )A_list$ )
(declare-fun distinct$a (A_list_a_prod_list$ )Bool )
(declare-fun distinct$b (A_a_a_prod_prod_list$ )Bool )
(declare-fun distinct$c (A_a_list_prod_list$ )Bool )
(declare-fun distinct$d (A_a_prod_list_list$ )Bool )
(declare-fun distinct$e (A_list_list_list$ )Bool )
(declare-fun distinct$f (A_list_list$ )Bool )
(declare-fun distinct$g (A_a_prod_list$ )Bool )
(declare-fun distinct$h (A_list_a_prod_list_list$ )Bool )
(declare-fun distinct$i (A_a_a_prod_prod_list_list$ )Bool )
(declare-fun distinct$j (A_a_list_prod_list_list$ )Bool )
(declare-fun distinct$k (A_a_prod_list_list_list$ )Bool )
(declare-fun distinct$l (A_list_list_list_list$ )Bool )
(declare-fun distinct$m (A_list_a_list_prod_list$ )Bool )
(declare-fun distinct$n (A_a_prod_a_prod_list$ )Bool )
(declare-fun distinct$o (A_list_a_a_prod_prod_list$ )Bool )
(declare-fun distinct$p (A_a_prod_a_list_prod_list$ )Bool )
(declare-fun distinct$q (A_a_prod_a_a_prod_prod_list$ )Bool )
(declare-fun distinct$r (A_a_list_list_prod_list$ )Bool )
(declare-fun ldistinct$ (A_llist$ )Bool )
(assert (! (not (= (ldistinct$ (llist_of$ xs$ ))(distinct$ xs$ ))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_list_a_prod_list$ )(?v1 A_list_a_prod_list$ ))(= (distinct$a (union$ ?v0 ?v1 ))(distinct$a ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$ )(?v1 A_a_a_prod_prod_list$ ))(= (distinct$b (union$a ?v0 ?v1 ))(distinct$b ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_a_list_prod_list$ )(?v1 A_a_list_prod_list$ ))(= (distinct$c (union$b ?v0 ?v1 ))(distinct$c ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_a_prod_list_list$ )(?v1 A_a_prod_list_list$ ))(= (distinct$d (union$c ?v0 ?v1 ))(distinct$d ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list$ ))(= (distinct$e (union$d ?v0 ?v1 ))(distinct$e ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (distinct$f (union$e ?v0 ?v1 ))(distinct$f ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_a_prod_list$ ))(= (distinct$g (union$f ?v0 ?v1 ))(distinct$g ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (distinct$ (union$g ?v0 ?v1 ))(distinct$ ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a10 ))
(assert (! (= (ldistinct$ lNil$ )true ):named a11 ))
(assert (! (ldistinct$ lNil$ ):named a12 ))
(assert (! (forall ((?v0 A_list_a_prod$ )(?v1 A_list_a_prod_list$ ))(= (distinct$a (insert$ ?v0 ?v1 ))(distinct$a ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod_list$ ))(= (distinct$b (insert$a ?v0 ?v1 ))(distinct$b ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_a_list_prod$ )(?v1 A_a_list_prod_list$ ))(= (distinct$c (insert$b ?v0 ?v1 ))(distinct$c ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_a_prod_list_list$ ))(= (distinct$d (insert$c ?v0 ?v1 ))(distinct$d ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_list$ ))(= (distinct$e (insert$d ?v0 ?v1 ))(distinct$e ?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ ))(= (distinct$f (insert$e ?v0 ?v1 ))(distinct$f ?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_list$ ))(= (distinct$g (insert$f ?v0 ?v1 ))(distinct$g ?v1 ))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(= (distinct$ (insert$g ?v0 ?v1 ))(distinct$ ?v1 ))):named a20 ))
(assert (! (forall ((?v0 A_list_a_prod_list$ ))(= (distinct$a (rotate1$ ?v0 ))(distinct$a ?v0 ))):named a21 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$ ))(= (distinct$b (rotate1$a ?v0 ))(distinct$b ?v0 ))):named a22 ))
(assert (! (forall ((?v0 A_a_list_prod_list$ ))(= (distinct$c (rotate1$b ?v0 ))(distinct$c ?v0 ))):named a23 ))
(assert (! (forall ((?v0 A_a_prod_list_list$ ))(= (distinct$d (rotate1$c ?v0 ))(distinct$d ?v0 ))):named a24 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(= (distinct$e (rotate1$d ?v0 ))(distinct$e ?v0 ))):named a25 ))
(assert (! (forall ((?v0 A_list_list$ ))(= (distinct$f (rotate1$e ?v0 ))(distinct$f ?v0 ))):named a26 ))
(assert (! (forall ((?v0 A_a_prod_list$ ))(= (distinct$g (rotate1$f ?v0 ))(distinct$g ?v0 ))):named a27 ))
(assert (! (forall ((?v0 A_list$ ))(= (distinct$ (rotate1$g ?v0 ))(distinct$ ?v0 ))):named a28 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a29 ))
(assert (! (forall ((?v0 A_list_a_prod_list$ )(?v1 Nat$ ))(=> (distinct$a ?v0 )(distinct$h (n_lists$ ?v1 ?v0 )))):named a30 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$ )(?v1 Nat$ ))(=> (distinct$b ?v0 )(distinct$i (n_lists$a ?v1 ?v0 )))):named a31 ))
(assert (! (forall ((?v0 A_a_list_prod_list$ )(?v1 Nat$ ))(=> (distinct$c ?v0 )(distinct$j (n_lists$b ?v1 ?v0 )))):named a32 ))
(assert (! (forall ((?v0 A_a_prod_list_list$ )(?v1 Nat$ ))(=> (distinct$d ?v0 )(distinct$k (n_lists$c ?v1 ?v0 )))):named a33 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 Nat$ ))(=> (distinct$e ?v0 )(distinct$l (n_lists$d ?v1 ?v0 )))):named a34 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 Nat$ ))(=> (distinct$f ?v0 )(distinct$e (n_lists$e ?v1 ?v0 )))):named a35 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 Nat$ ))(=> (distinct$g ?v0 )(distinct$d (n_lists$f ?v1 ?v0 )))):named a36 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat$ ))(=> (distinct$ ?v0 )(distinct$f (n_lists$g ?v1 ?v0 )))):named a37 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (and (distinct$ ?v0 )(distinct$ ?v1 ))(distinct$g (product$ ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ ))(=> (and (distinct$ ?v0 )(distinct$f ?v1 ))(distinct$c (product$a ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list$ ))(=> (and (distinct$f ?v0 )(distinct$ ?v1 ))(distinct$a (product$b ?v0 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_a_prod_list$ ))(=> (and (distinct$ ?v0 )(distinct$g ?v1 ))(distinct$b (product$c ?v0 ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(=> (and (distinct$f ?v0 )(distinct$f ?v1 ))(distinct$m (product$d ?v0 ?v1 )))):named a42 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_list$ ))(=> (and (distinct$g ?v0 )(distinct$ ?v1 ))(distinct$n (product$e ?v0 ?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_a_prod_list$ ))(=> (and (distinct$f ?v0 )(distinct$g ?v1 ))(distinct$o (product$f ?v0 ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_list_list$ ))(=> (and (distinct$g ?v0 )(distinct$f ?v1 ))(distinct$p (product$g ?v0 ?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_a_prod_list$ ))(=> (and (distinct$g ?v0 )(distinct$g ?v1 ))(distinct$q (product$h ?v0 ?v1 )))):named a46 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list_list$ ))(=> (and (distinct$ ?v0 )(distinct$e ?v1 ))(distinct$r (product$i ?v0 ?v1 )))):named a47 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_a_prod_list$ ))(= (distinct$a (rotate$ ?v0 ?v1 ))(distinct$a ?v1 ))):named a48 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_prod_prod_list$ ))(= (distinct$b (rotate$a ?v0 ?v1 ))(distinct$b ?v1 ))):named a49 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_list_prod_list$ ))(= (distinct$c (rotate$b ?v0 ?v1 ))(distinct$c ?v1 ))):named a50 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_list_list$ ))(= (distinct$d (rotate$c ?v0 ?v1 ))(distinct$d ?v1 ))):named a51 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_list_list$ ))(= (distinct$e (rotate$d ?v0 ?v1 ))(distinct$e ?v1 ))):named a52 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_list$ ))(= (distinct$f (rotate$e ?v0 ?v1 ))(distinct$f ?v1 ))):named a53 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_list$ ))(= (distinct$g (rotate$f ?v0 ?v1 ))(distinct$g ?v1 ))):named a54 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (distinct$ (rotate$g ?v0 ?v1 ))(distinct$ ?v1 ))):named a55 ))
(assert (! (= (lfinite$ lNil$ )true ):named a56 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(= (llist_of$ (list_of$ ?v0 ))?v0 ))):named a57 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_list$ ))(= (rotate1$f (rotate$f ?v0 ?v1 ))(rotate$f ?v0 (rotate1$f ?v1 )))):named a58 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_list$ ))(= (rotate1$e (rotate$e ?v0 ?v1 ))(rotate$e ?v0 (rotate1$e ?v1 )))):named a59 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (rotate1$g (rotate$g ?v0 ?v1 ))(rotate$g ?v0 (rotate1$g ?v1 )))):named a60 ))
(assert (! (lfinite$ lNil$ ):named a61 ))
(check-sat )
;(get-unsat-core )
