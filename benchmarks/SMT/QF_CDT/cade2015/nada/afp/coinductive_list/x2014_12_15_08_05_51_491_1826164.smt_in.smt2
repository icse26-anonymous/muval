;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort B_a_llist_fun$ 0 )
(declare-sort B_b_fun_b_a_llist_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_b_a_llist_fun_fun_fun$ 0 )
(declare-sort B_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun x$ ()B$ )
(declare-fun uu$ ()B_bool_fun$ )
(declare-fun lhd$a ()B_a_fun$ )
(declare-fun ltl$a ()B_b_fun$ )
(declare-fun more$ ()B_a_llist_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (B_bool_fun$ B$ )Bool )
(declare-fun iS_LNIL$ ()B_bool_fun$ )
(declare-fun fun_app$a (B_a_llist_fun$ B$ )A_llist$ )
(declare-fun fun_app$b (B_b_fun_b_a_llist_fun_fun$ B_b_fun$ )B_a_llist_fun$ )
(declare-fun fun_app$c (B_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun$ B_a_llist_fun$ )B_b_fun_b_a_llist_fun_fun$ )
(declare-fun fun_app$d (B_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun$ B_bool_fun$ )B_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun$ )
(declare-fun fun_app$e (B_a_fun_b_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun_fun$ B_a_fun$ )B_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun$ )
(declare-fun fun_app$f (B_a_fun_b_b_fun_b_a_llist_fun_fun_fun$ B_a_fun$ )B_b_fun_b_a_llist_fun_fun$ )
(declare-fun fun_app$g (B_a_fun$ B$ )A$ )
(declare-fun fun_app$h (B_b_fun$ B$ )B$ )
(declare-fun corec_llist$ (B_bool_fun$ )B_a_fun_b_bool_fun_b_a_llist_fun_b_b_fun_b_a_llist_fun_fun_fun_fun_fun$ )
(declare-fun unfold_llist$ (B_bool_fun$ )B_a_fun_b_b_fun_b_a_llist_fun_fun_fun$ )
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ uu$ ?v0 )false ):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ iS_LNIL$ )lhd$a )uu$ )more$ )ltl$a )x$ )(fun_app$a (fun_app$b (fun_app$f (unfold_llist$ iS_LNIL$ )lhd$a )ltl$a )x$ ))):named a1 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(! (=> (fun_app$ ?v0 ?v1 )(= (fun_app$a (fun_app$b (fun_app$f (unfold_llist$ ?v0 )?v2 )?v3 )?v1 )lNil$ )):pattern ((fun_app$a (fun_app$b (fun_app$f (unfold_llist$ ?v0 )?v2 )?v3 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (not (lnull$ (fun_app$a (fun_app$b (fun_app$f (unfold_llist$ ?v0 )?v1 )?v2 )?v3 )))(not (fun_app$ ?v0 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (lnull$ (fun_app$a (fun_app$b (fun_app$f (unfold_llist$ ?v0 )?v1 )?v2 )?v3 ))(fun_app$ ?v0 ?v3 ))):named a4 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (lhd$ (fun_app$a (fun_app$b (fun_app$f (unfold_llist$ ?v0 )?v2 )?v3 )?v1 ))(fun_app$g ?v2 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_bool_fun$ )(?v4 B_a_llist_fun$ )(?v5 B_b_fun$ ))(! (=> (fun_app$ ?v0 ?v1 )(= (fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 )lNil$ )):pattern ((fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_a_fun$ )(?v2 B_bool_fun$ )(?v3 B_a_llist_fun$ )(?v4 B_b_fun$ )(?v5 B$ ))(= (not (lnull$ (fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v1 )?v2 )?v3 )?v4 )?v5 )))(not (fun_app$ ?v0 ?v5 )))):named a7 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_a_fun$ )(?v2 B_bool_fun$ )(?v3 B_a_llist_fun$ )(?v4 B_b_fun$ )(?v5 B$ ))(= (lnull$ (fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v1 )?v2 )?v3 )?v4 )?v5 ))(fun_app$ ?v0 ?v5 ))):named a8 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_bool_fun$ )(?v4 B_a_llist_fun$ )(?v5 B_b_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (lhd$ (fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 ))(fun_app$g ?v2 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (ltl$ (fun_app$a (fun_app$b (fun_app$f (unfold_llist$ ?v0 )?v2 )?v3 )?v1 ))(fun_app$a (fun_app$b (fun_app$f (unfold_llist$ ?v0 )?v2 )?v3 )(fun_app$h ?v3 ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_bool_fun$ )(?v4 B_a_llist_fun$ )(?v5 B_b_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (ltl$ (fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 ))(ite (fun_app$ ?v3 ?v1 )(fun_app$a ?v4 ?v1 )(fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )(fun_app$h ?v5 ?v1 )))))):named a11 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (fun_app$a (fun_app$b (fun_app$f (unfold_llist$ ?v0 )?v2 )?v3 )?v1 )(lCons$ (fun_app$g ?v2 ?v1 )(fun_app$a (fun_app$b (fun_app$f (unfold_llist$ ?v0 )?v2 )?v3 )(fun_app$h ?v3 ?v1 )))))):named a12 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_bool_fun$ )(?v4 B_a_llist_fun$ )(?v5 B_b_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 )(lCons$ (fun_app$g ?v2 ?v1 )(ite (fun_app$ ?v3 ?v1 )(fun_app$a ?v4 ?v1 )(fun_app$a (fun_app$b (fun_app$c (fun_app$d (fun_app$e (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )(fun_app$h ?v5 ?v1 ))))))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lnull$ ?v0 ))(= (lCons$ (lhd$ ?v0 )(ltl$ ?v0 ))?v0 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lnull$ ?v0 )(= ?v0 lNil$ )):pattern ((lnull$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lhd$ (lCons$ ?v0 ?v1 ))?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (ltl$ (lCons$ ?v0 ?v1 ))?v1 ):pattern ((lCons$ ?v0 ?v1 )))):named a18 ))
(check-sat )
;(get-unsat-core )
