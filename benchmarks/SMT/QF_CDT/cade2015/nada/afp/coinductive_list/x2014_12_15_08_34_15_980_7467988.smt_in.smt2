;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort A_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_fun$ 0 )
(declare-sort A_a_nat_prod_fun$ 0 )
(declare-sort A_a_prod_nat_fun$ 0 )
(declare-sort A_nat_prod_a_fun$ 0 )
(declare-sort Nat_a_a_prod_fun$ 0 )
(declare-sort A_nat_prod_nat_fun$ 0 )
(declare-sort Nat_a_nat_prod_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_nat_prod$ 0)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_a_prod$ 0)
(declare-sort Nat_a_a_prod_prod$ 0)
(declare-sort Nat_nat_prod$ 0)
(declare-sort Nat_a_prod$ 0)
(declare-sort A_a_nat_prod_prod$ 0)
(declare-sort A_a_a_prod_prod$ 0)
(declare-fun fst$ (A_nat_prod$)A$)
(declare-fun snd$ (A_nat_prod$)Nat$)
(declare-fun pair$ (A$ Nat$ )A_nat_prod$)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun fst$a (A_a_prod$)A$)
(declare-fun snd$a (A_a_prod$)A$)
(declare-fun pair$a (A$ A$ )A_a_prod$)
(declare-fun fst$b (Nat_a_a_prod_prod$)Nat$)
(declare-fun snd$b (Nat_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$b (Nat$ A_a_prod$ )Nat_a_a_prod_prod$)
(declare-fun fst$c (Nat_nat_prod$)Nat$)
(declare-fun snd$c (Nat_nat_prod$)Nat$)
(declare-fun pair$c (Nat$ Nat$ )Nat_nat_prod$)
(declare-fun fst$d (Nat_a_prod$)Nat$)
(declare-fun snd$d (Nat_a_prod$)A$)
(declare-fun pair$d (Nat$ A$ )Nat_a_prod$)
(declare-fun fst$e (A_a_nat_prod_prod$)A$)
(declare-fun snd$e (A_a_nat_prod_prod$)A_nat_prod$)
(declare-fun pair$e (A$ A_nat_prod$ )A_a_nat_prod_prod$)
(declare-fun fst$f (A_a_a_prod_prod$)A$)
(declare-fun snd$f (A_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$f (A$ A_a_prod$ )A_a_a_prod_prod$)
(declare-sort Nat_llist$ 0)
(declare-sort A_nat_prod_llist$ 0)
(declare-sort A_a_prod_llist$ 0)
(declare-sort Nat_a_prod_llist$ 0)
(declare-sort Nat_nat_prod_llist$ 0)
(declare-fun lNil$a ()Nat_llist$)
(declare-fun lhd$a (Nat_llist$)Nat$)
(declare-fun ltl$a (Nat_llist$)Nat_llist$)
(declare-fun lCons$a (Nat$ Nat_llist$ )Nat_llist$)
(declare-fun lNil$b ()A_nat_prod_llist$)
(declare-fun lhd$b (A_nat_prod_llist$)A_nat_prod$)
(declare-fun ltl$b (A_nat_prod_llist$)A_nat_prod_llist$)
(declare-fun lCons$b (A_nat_prod$ A_nat_prod_llist$ )A_nat_prod_llist$)
(declare-fun lNil$c ()A_a_prod_llist$)
(declare-fun lhd$c (A_a_prod_llist$)A_a_prod$)
(declare-fun ltl$c (A_a_prod_llist$)A_a_prod_llist$)
(declare-fun lCons$c (A_a_prod$ A_a_prod_llist$ )A_a_prod_llist$)
(declare-fun lNil$d ()Nat_a_prod_llist$)
(declare-fun lhd$d (Nat_a_prod_llist$)Nat_a_prod$)
(declare-fun ltl$d (Nat_a_prod_llist$)Nat_a_prod_llist$)
(declare-fun lCons$d (Nat_a_prod$ Nat_a_prod_llist$ )Nat_a_prod_llist$)
(declare-fun lNil$e ()Nat_nat_prod_llist$)
(declare-fun lhd$e (Nat_nat_prod_llist$)Nat_nat_prod$)
(declare-fun ltl$e (Nat_nat_prod_llist$)Nat_nat_prod_llist$)
(declare-fun lCons$e (Nat_nat_prod$ Nat_nat_prod_llist$ )Nat_nat_prod_llist$)
(declare-sort A_a_prod_a_prod$ 0)
(declare-fun fst$g (A_a_prod_a_prod$)A_a_prod$)
(declare-fun snd$g (A_a_prod_a_prod$)A$)
(declare-fun pair$g (A_a_prod$ A$ )A_a_prod_a_prod$)
(declare-sort A_a_prod_a_prod_llist$ 0)
(declare-fun lNil$f ()A_a_prod_a_prod_llist$)
(declare-fun lhd$f (A_a_prod_a_prod_llist$)A_a_prod_a_prod$)
(declare-fun ltl$f (A_a_prod_a_prod_llist$)A_a_prod_a_prod_llist$)
(declare-fun lCons$f (A_a_prod_a_prod$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$)
(declare-sort A_nat_prod_a_prod$ 0)
(declare-fun fst$h (A_nat_prod_a_prod$)A_nat_prod$)
(declare-fun snd$h (A_nat_prod_a_prod$)A$)
(declare-fun pair$h (A_nat_prod$ A$ )A_nat_prod_a_prod$)
(declare-sort A_nat_prod_a_prod_llist$ 0)
(declare-fun lNil$g ()A_nat_prod_a_prod_llist$)
(declare-fun lhd$g (A_nat_prod_a_prod_llist$)A_nat_prod_a_prod$)
(declare-fun ltl$g (A_nat_prod_a_prod_llist$)A_nat_prod_a_prod_llist$)
(declare-fun lCons$g (A_nat_prod_a_prod$ A_nat_prod_a_prod_llist$ )A_nat_prod_a_prod_llist$)
(declare-sort A_a_prod_nat_prod$ 0)
(declare-fun fst$i (A_a_prod_nat_prod$)A_a_prod$)
(declare-fun snd$i (A_a_prod_nat_prod$)Nat$)
(declare-fun pair$i (A_a_prod$ Nat$ )A_a_prod_nat_prod$)
(declare-sort A_a_prod_nat_prod_llist$ 0)
(declare-fun lNil$h ()A_a_prod_nat_prod_llist$)
(declare-fun lhd$h (A_a_prod_nat_prod_llist$)A_a_prod_nat_prod$)
(declare-fun ltl$h (A_a_prod_nat_prod_llist$)A_a_prod_nat_prod_llist$)
(declare-fun lCons$h (A_a_prod_nat_prod$ A_a_prod_nat_prod_llist$ )A_a_prod_nat_prod_llist$)
(declare-sort A_nat_prod_nat_prod$ 0)
(declare-fun fst$j (A_nat_prod_nat_prod$)A_nat_prod$)
(declare-fun snd$j (A_nat_prod_nat_prod$)Nat$)
(declare-fun pair$j (A_nat_prod$ Nat$ )A_nat_prod_nat_prod$)
(declare-sort A_nat_prod_nat_prod_llist$ 0)
(declare-sort A_a_a_prod_prod_llist$ 0)
(declare-sort A_a_nat_prod_prod_llist$ 0)
(declare-sort Nat_a_a_prod_prod_llist$ 0)
(declare-fun lNil$i ()A_nat_prod_nat_prod_llist$)
(declare-fun lhd$i (A_nat_prod_nat_prod_llist$)A_nat_prod_nat_prod$)
(declare-fun ltl$i (A_nat_prod_nat_prod_llist$)A_nat_prod_nat_prod_llist$)
(declare-fun lCons$i (A_nat_prod_nat_prod$ A_nat_prod_nat_prod_llist$ )A_nat_prod_nat_prod_llist$)
(declare-fun lNil$j ()A_a_a_prod_prod_llist$)
(declare-fun lhd$j (A_a_a_prod_prod_llist$)A_a_a_prod_prod$)
(declare-fun ltl$j (A_a_a_prod_prod_llist$)A_a_a_prod_prod_llist$)
(declare-fun lCons$j (A_a_a_prod_prod$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$)
(declare-fun lNil$k ()A_a_nat_prod_prod_llist$)
(declare-fun lhd$k (A_a_nat_prod_prod_llist$)A_a_nat_prod_prod$)
(declare-fun ltl$k (A_a_nat_prod_prod_llist$)A_a_nat_prod_prod_llist$)
(declare-fun lCons$k (A_a_nat_prod_prod$ A_a_nat_prod_prod_llist$ )A_a_nat_prod_prod_llist$)
(declare-fun lNil$l ()Nat_a_a_prod_prod_llist$)
(declare-fun lhd$l (Nat_a_a_prod_prod_llist$)Nat_a_a_prod_prod$)
(declare-fun ltl$l (Nat_a_a_prod_prod_llist$)Nat_a_a_prod_prod_llist$)
(declare-fun lCons$l (Nat_a_a_prod_prod$ Nat_a_a_prod_prod_llist$ )Nat_a_a_prod_prod_llist$)
(declare-fun i$ ()Nat$ )
(declare-fun i$a ()Nat_set$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun lzip$ (A_llist$ Nat_llist$ )A_nat_prod_llist$ )
(declare-fun lmap$a (A_nat_fun$ A_llist$ )Nat_llist$ )
(declare-fun lmap$b (Nat_a_fun$ Nat_llist$ )A_llist$ )
(declare-fun lmap$c (Nat_nat_fun$ Nat_llist$ )Nat_llist$ )
(declare-fun lmap$d (A_a_prod_a_fun$ A_a_prod_llist$ )A_llist$ )
(declare-fun lmap$e (A_nat_prod_a_fun$ A_nat_prod_llist$ )A_llist$ )
(declare-fun lmap$f (A_a_prod_nat_fun$ A_a_prod_llist$ )Nat_llist$ )
(declare-fun lmap$g (A_nat_prod_nat_fun$ A_nat_prod_llist$ )Nat_llist$ )
(declare-fun lmap$h (A_a_a_prod_fun$ A_llist$ )A_a_prod_llist$ )
(declare-fun lmap$i (A_a_nat_prod_fun$ A_llist$ )A_nat_prod_llist$ )
(declare-fun lmap$j (Nat_a_nat_prod_fun$ Nat_llist$ )A_nat_prod_llist$ )
(declare-fun lmap$k (Nat_a_a_prod_fun$ Nat_llist$ )A_a_prod_llist$ )
(declare-fun lnth$a (A_nat_prod_llist$ )Nat_a_nat_prod_fun$ )
(declare-fun lnth$b (Nat_llist$ )Nat_nat_fun$ )
(declare-fun lnth$c (A_a_prod_llist$ )Nat_a_a_prod_fun$ )
(declare-fun lnth$d (Nat_a_prod_llist$ Nat$ )Nat_a_prod$ )
(declare-fun lnth$e (Nat_nat_prod_llist$ Nat$ )Nat_nat_prod$ )
(declare-fun lnth$f (A_a_prod_a_prod_llist$ Nat$ )A_a_prod_a_prod$ )
(declare-fun lnth$g (A_nat_prod_a_prod_llist$ Nat$ )A_nat_prod_a_prod$ )
(declare-fun lnth$h (A_a_prod_nat_prod_llist$ Nat$ )A_a_prod_nat_prod$ )
(declare-fun lnth$i (A_nat_prod_nat_prod_llist$ Nat$ )A_nat_prod_nat_prod$ )
(declare-fun lnth$j (A_a_a_prod_prod_llist$ Nat$ )A_a_a_prod_prod$ )
(declare-fun lnth$k (A_a_nat_prod_prod_llist$ Nat$ )A_a_nat_prod_prod$ )
(declare-fun lnth$l (Nat_a_a_prod_prod_llist$ Nat$ )Nat_a_a_prod_prod$ )
(declare-fun lzip$a (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun lzip$b (Nat_llist$ A_llist$ )Nat_a_prod_llist$ )
(declare-fun lzip$c (Nat_llist$ Nat_llist$ )Nat_nat_prod_llist$ )
(declare-fun lzip$d (A_a_prod_llist$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lzip$e (A_nat_prod_llist$ A_llist$ )A_nat_prod_a_prod_llist$ )
(declare-fun lzip$f (A_a_prod_llist$ Nat_llist$ )A_a_prod_nat_prod_llist$ )
(declare-fun lzip$g (A_nat_prod_llist$ Nat_llist$ )A_nat_prod_nat_prod_llist$ )
(declare-fun lzip$h (A_llist$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lzip$i (A_llist$ A_nat_prod_llist$ )A_a_nat_prod_prod_llist$ )
(declare-fun lzip$j (Nat_llist$ A_a_prod_llist$ )Nat_a_a_prod_prod_llist$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun fun_app$ (Nat_a_fun$ Nat$ )A$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_a_nat_prod_fun$ Nat$ )A_nat_prod$ )
(declare-fun fun_app$b (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$c (Nat_a_a_prod_fun$ Nat$ )A_a_prod$ )
(declare-fun fun_app$d (A_a_fun$ A$ )A$ )
(declare-fun fun_app$e (A_nat_fun$ A$ )Nat$ )
(declare-fun fun_app$f (A_a_prod_a_fun$ A_a_prod$ )A$ )
(declare-fun fun_app$g (A_nat_prod_a_fun$ A_nat_prod$ )A$ )
(declare-fun fun_app$h (A_a_prod_nat_fun$ A_a_prod$ )Nat$ )
(declare-fun fun_app$i (A_nat_prod_nat_fun$ A_nat_prod$ )Nat$ )
(declare-fun fun_app$j (A_a_a_prod_fun$ A$ )A_a_prod$ )
(declare-fun fun_app$k (A_a_nat_prod_fun$ A$ )A_nat_prod$ )
(declare-fun llength$a (Nat_llist$ )Enat$ )
(declare-fun llength$b (A_a_prod_llist$ )Enat$ )
(declare-fun llength$c (A_nat_prod_llist$ )Enat$ )
(declare-fun llength$d (Nat_a_a_prod_prod_llist$ )Enat$ )
(declare-fun llength$e (Nat_nat_prod_llist$ )Enat$ )
(declare-fun llength$f (Nat_a_prod_llist$ )Enat$ )
(declare-fun llength$g (A_a_nat_prod_prod_llist$ )Enat$ )
(declare-fun llength$h (A_a_a_prod_prod_llist$ )Enat$ )
(declare-fun ldistinct$ (Nat_a_a_prod_prod_llist$ )Bool )
(declare-fun ldistinct$a (Nat_nat_prod_llist$ )Bool )
(declare-fun ldistinct$b (Nat_a_prod_llist$ )Bool )
(declare-fun ldistinct$c (A_a_nat_prod_prod_llist$ )Bool )
(declare-fun ldistinct$d (A_a_a_prod_prod_llist$ )Bool )
(declare-fun ldistinct$e (A_a_prod_llist$ )Bool )
(declare-fun ldistinct$f (A_nat_prod_llist$ )Bool )
(declare-fun ldistinct$g (Nat_llist$ )Bool )
(declare-fun ldistinct$h (A_llist$ )Bool )
(assert (! (not (= (fun_app$ (lnth$ xs$ )i$ )(fst$ (pair$ (fun_app$ (lnth$ xs$ )i$ )i$ )))):named a0 ))
(assert (! (less$ (enat$ i$ )(llength$ xs$ )):named a1 ))
(assert (! (member$ i$ i$a ):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod$ )(?v2 Nat$ )(?v3 A_a_prod$ ))(= (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (pair$d ?v0 ?v1 )(pair$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_nat_prod$ )(?v2 A$ )(?v3 A_nat_prod$ ))(= (= (pair$e ?v0 ?v1 )(pair$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_prod$ )(?v2 A$ )(?v3 A_a_prod$ ))(= (= (pair$f ?v0 ?v1 )(pair$f ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod$ )(?v2 Nat$ )(?v3 A_a_prod$ ))(= (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (pair$d ?v0 ?v1 )(pair$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_nat_prod$ )(?v2 A$ )(?v3 A_nat_prod$ ))(= (= (pair$e ?v0 ?v1 )(pair$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_prod$ )(?v2 A$ )(?v3 A_a_prod$ ))(= (= (pair$f ?v0 ?v1 )(pair$f ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_a_prod_prod$ ))(= (= ?v0 (fst$b ?v1 ))(exists ((?v2 A_a_prod$ ))(= ?v1 (pair$b ?v0 ?v2 ))))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_prod$ ))(= (= ?v0 (fst$c ?v1 ))(exists ((?v2 Nat$ ))(= ?v1 (pair$c ?v0 ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_prod$ ))(= (= ?v0 (fst$d ?v1 ))(exists ((?v2 A$ ))(= ?v1 (pair$d ?v0 ?v2 ))))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_nat_prod_prod$ ))(= (= ?v0 (fst$e ?v1 ))(exists ((?v2 A_nat_prod$ ))(= ?v1 (pair$e ?v0 ?v2 ))))):named a22 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_a_prod_prod$ ))(= (= ?v0 (fst$f ?v1 ))(exists ((?v2 A_a_prod$ ))(= ?v1 (pair$f ?v0 ?v2 ))))):named a23 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_prod$ ))(= (= ?v0 (fst$a ?v1 ))(exists ((?v2 A$ ))(= ?v1 (pair$a ?v0 ?v2 ))))):named a24 ))
(assert (! (forall ((?v0 A$ )(?v1 A_nat_prod$ ))(= (= ?v0 (fst$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v1 (pair$ ?v0 ?v2 ))))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod$ ))(! (= (fst$b (pair$b ?v0 ?v1 ))?v0 ):pattern ((pair$b ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fst$c (pair$c ?v0 ?v1 ))?v0 ):pattern ((pair$c ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (fst$d (pair$d ?v0 ?v1 ))?v0 ):pattern ((pair$d ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A$ )(?v1 A_nat_prod$ ))(! (= (fst$e (pair$e ?v0 ?v1 ))?v0 ):pattern ((pair$e ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_prod$ ))(! (= (fst$f (pair$f ?v0 ?v1 ))?v0 ):pattern ((pair$f ?v0 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fst$a (pair$a ?v0 ?v1 ))?v0 ):pattern ((pair$a ?v0 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ ))(! (= (fst$ (pair$ ?v0 ?v1 ))?v0 ):pattern ((pair$ ?v0 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod$ )(?v2 Nat$ ))(=> (= (fst$b (pair$b ?v0 ?v1 ))?v2 )(= ?v0 ?v2 ))):named a33 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (= (fst$c (pair$c ?v0 ?v1 ))?v2 )(= ?v0 ?v2 ))):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ ))(=> (= (fst$d (pair$d ?v0 ?v1 ))?v2 )(= ?v0 ?v2 ))):named a35 ))
(assert (! (forall ((?v0 A$ )(?v1 A_nat_prod$ )(?v2 A$ ))(=> (= (fst$e (pair$e ?v0 ?v1 ))?v2 )(= ?v0 ?v2 ))):named a36 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_prod$ )(?v2 A$ ))(=> (= (fst$f (pair$f ?v0 ?v1 ))?v2 )(= ?v0 ?v2 ))):named a37 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (= (fst$a (pair$a ?v0 ?v1 ))?v2 )(= ?v0 ?v2 ))):named a38 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ )(?v2 A$ ))(=> (= (fst$ (pair$ ?v0 ?v1 ))?v2 )(= ?v0 ?v2 ))):named a39 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod$ )(?v1 Nat$ )(?v2 A_a_prod$ ))(=> (= ?v0 (pair$b ?v1 ?v2 ))(= (fst$b ?v0 )?v1 ))):named a40 ))
(assert (! (forall ((?v0 Nat_nat_prod$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (= ?v0 (pair$c ?v1 ?v2 ))(= (fst$c ?v0 )?v1 ))):named a41 ))
(assert (! (forall ((?v0 Nat_a_prod$ )(?v1 Nat$ )(?v2 A$ ))(=> (= ?v0 (pair$d ?v1 ?v2 ))(= (fst$d ?v0 )?v1 ))):named a42 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod$ )(?v1 A$ )(?v2 A_nat_prod$ ))(=> (= ?v0 (pair$e ?v1 ?v2 ))(= (fst$e ?v0 )?v1 ))):named a43 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A$ )(?v2 A_a_prod$ ))(=> (= ?v0 (pair$f ?v1 ?v2 ))(= (fst$f ?v0 )?v1 ))):named a44 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A$ )(?v2 A$ ))(=> (= ?v0 (pair$a ?v1 ?v2 ))(= (fst$a ?v0 )?v1 ))):named a45 ))
(assert (! (forall ((?v0 A_nat_prod$ )(?v1 A$ )(?v2 Nat$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))(= (fst$ ?v0 )?v1 ))):named a46 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 Nat_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$a ?v2 )))(= (fun_app$a (lnth$a (lzip$ ?v1 ?v2 ))?v0 )(pair$ (fun_app$ (lnth$ ?v1 )?v0 )(fun_app$b (lnth$b ?v2 )?v0 ))))):named a47 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$ ?v2 )))(= (fun_app$c (lnth$c (lzip$a ?v1 ?v2 ))?v0 )(pair$a (fun_app$ (lnth$ ?v1 )?v0 )(fun_app$ (lnth$ ?v2 )?v0 ))))):named a48 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 A_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$a ?v1 ))(less$ (enat$ ?v0 )(llength$ ?v2 )))(= (lnth$d (lzip$b ?v1 ?v2 )?v0 )(pair$d (fun_app$b (lnth$b ?v1 )?v0 )(fun_app$ (lnth$ ?v2 )?v0 ))))):named a49 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$a ?v1 ))(less$ (enat$ ?v0 )(llength$a ?v2 )))(= (lnth$e (lzip$c ?v1 ?v2 )?v0 )(pair$c (fun_app$b (lnth$b ?v1 )?v0 )(fun_app$b (lnth$b ?v2 )?v0 ))))):named a50 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ )(?v2 A_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$b ?v1 ))(less$ (enat$ ?v0 )(llength$ ?v2 )))(= (lnth$f (lzip$d ?v1 ?v2 )?v0 )(pair$g (fun_app$c (lnth$c ?v1 )?v0 )(fun_app$ (lnth$ ?v2 )?v0 ))))):named a51 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_nat_prod_llist$ )(?v2 A_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$c ?v1 ))(less$ (enat$ ?v0 )(llength$ ?v2 )))(= (lnth$g (lzip$e ?v1 ?v2 )?v0 )(pair$h (fun_app$a (lnth$a ?v1 )?v0 )(fun_app$ (lnth$ ?v2 )?v0 ))))):named a52 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ )(?v2 Nat_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$b ?v1 ))(less$ (enat$ ?v0 )(llength$a ?v2 )))(= (lnth$h (lzip$f ?v1 ?v2 )?v0 )(pair$i (fun_app$c (lnth$c ?v1 )?v0 )(fun_app$b (lnth$b ?v2 )?v0 ))))):named a53 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_nat_prod_llist$ )(?v2 Nat_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$c ?v1 ))(less$ (enat$ ?v0 )(llength$a ?v2 )))(= (lnth$i (lzip$g ?v1 ?v2 )?v0 )(pair$j (fun_app$a (lnth$a ?v1 )?v0 )(fun_app$b (lnth$b ?v2 )?v0 ))))):named a54 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_prod_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$b ?v2 )))(= (lnth$j (lzip$h ?v1 ?v2 )?v0 )(pair$f (fun_app$ (lnth$ ?v1 )?v0 )(fun_app$c (lnth$c ?v2 )?v0 ))))):named a55 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_nat_prod_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$c ?v2 )))(= (lnth$k (lzip$i ?v1 ?v2 )?v0 )(pair$e (fun_app$ (lnth$ ?v1 )?v0 )(fun_app$a (lnth$a ?v2 )?v0 ))))):named a56 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod_llist$ ))(= (ldistinct$ ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$d ?v0 ))(and (less$ (enat$ ?v2 )(llength$d ?v0 ))(not (= ?v1 ?v2 ))))(not (= (lnth$l ?v0 ?v1 )(lnth$l ?v0 ?v2 ))))))):named a57 ))
(assert (! (forall ((?v0 Nat_nat_prod_llist$ ))(= (ldistinct$a ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$e ?v0 ))(and (less$ (enat$ ?v2 )(llength$e ?v0 ))(not (= ?v1 ?v2 ))))(not (= (lnth$e ?v0 ?v1 )(lnth$e ?v0 ?v2 ))))))):named a58 ))
(assert (! (forall ((?v0 Nat_a_prod_llist$ ))(= (ldistinct$b ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$f ?v0 ))(and (less$ (enat$ ?v2 )(llength$f ?v0 ))(not (= ?v1 ?v2 ))))(not (= (lnth$d ?v0 ?v1 )(lnth$d ?v0 ?v2 ))))))):named a59 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod_llist$ ))(= (ldistinct$c ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$g ?v0 ))(and (less$ (enat$ ?v2 )(llength$g ?v0 ))(not (= ?v1 ?v2 ))))(not (= (lnth$k ?v0 ?v1 )(lnth$k ?v0 ?v2 ))))))):named a60 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(= (ldistinct$d ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$h ?v0 ))(and (less$ (enat$ ?v2 )(llength$h ?v0 ))(not (= ?v1 ?v2 ))))(not (= (lnth$j ?v0 ?v1 )(lnth$j ?v0 ?v2 ))))))):named a61 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(= (ldistinct$e ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$b ?v0 ))(and (less$ (enat$ ?v2 )(llength$b ?v0 ))(not (= ?v1 ?v2 ))))(not (= (fun_app$c (lnth$c ?v0 )?v1 )(fun_app$c (lnth$c ?v0 )?v2 ))))))):named a62 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ ))(= (ldistinct$f ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$c ?v0 ))(and (less$ (enat$ ?v2 )(llength$c ?v0 ))(not (= ?v1 ?v2 ))))(not (= (fun_app$a (lnth$a ?v0 )?v1 )(fun_app$a (lnth$a ?v0 )?v2 ))))))):named a63 ))
(assert (! (forall ((?v0 Nat_llist$ ))(= (ldistinct$g ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$a ?v0 ))(and (less$ (enat$ ?v2 )(llength$a ?v0 ))(not (= ?v1 ?v2 ))))(not (= (fun_app$b (lnth$b ?v0 )?v1 )(fun_app$b (lnth$b ?v0 )?v2 ))))))):named a64 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ldistinct$h ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$ ?v0 ))(and (less$ (enat$ ?v2 )(llength$ ?v0 ))(not (= ?v1 ?v2 ))))(not (= (fun_app$ (lnth$ ?v0 )?v1 )(fun_app$ (lnth$ ?v0 )?v2 ))))))):named a65 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (fun_app$ (lnth$ (lmap$ ?v2 ?v1 ))?v0 )(fun_app$d ?v2 (fun_app$ (lnth$ ?v1 )?v0 ))))):named a66 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_nat_fun$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (fun_app$b (lnth$b (lmap$a ?v2 ?v1 ))?v0 )(fun_app$e ?v2 (fun_app$ (lnth$ ?v1 )?v0 ))))):named a67 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat_a_fun$ ))(=> (less$ (enat$ ?v0 )(llength$a ?v1 ))(= (fun_app$ (lnth$ (lmap$b ?v2 ?v1 ))?v0 )(fun_app$ ?v2 (fun_app$b (lnth$b ?v1 )?v0 ))))):named a68 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat_nat_fun$ ))(=> (less$ (enat$ ?v0 )(llength$a ?v1 ))(= (fun_app$b (lnth$b (lmap$c ?v2 ?v1 ))?v0 )(fun_app$b ?v2 (fun_app$b (lnth$b ?v1 )?v0 ))))):named a69 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_a_fun$ ))(=> (less$ (enat$ ?v0 )(llength$b ?v1 ))(= (fun_app$ (lnth$ (lmap$d ?v2 ?v1 ))?v0 )(fun_app$f ?v2 (fun_app$c (lnth$c ?v1 )?v0 ))))):named a70 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_nat_prod_llist$ )(?v2 A_nat_prod_a_fun$ ))(=> (less$ (enat$ ?v0 )(llength$c ?v1 ))(= (fun_app$ (lnth$ (lmap$e ?v2 ?v1 ))?v0 )(fun_app$g ?v2 (fun_app$a (lnth$a ?v1 )?v0 ))))):named a71 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_nat_fun$ ))(=> (less$ (enat$ ?v0 )(llength$b ?v1 ))(= (fun_app$b (lnth$b (lmap$f ?v2 ?v1 ))?v0 )(fun_app$h ?v2 (fun_app$c (lnth$c ?v1 )?v0 ))))):named a72 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_nat_prod_llist$ )(?v2 A_nat_prod_nat_fun$ ))(=> (less$ (enat$ ?v0 )(llength$c ?v1 ))(= (fun_app$b (lnth$b (lmap$g ?v2 ?v1 ))?v0 )(fun_app$i ?v2 (fun_app$a (lnth$a ?v1 )?v0 ))))):named a73 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_a_prod_fun$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (fun_app$c (lnth$c (lmap$h ?v2 ?v1 ))?v0 )(fun_app$j ?v2 (fun_app$ (lnth$ ?v1 )?v0 ))))):named a74 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_nat_prod_fun$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (fun_app$a (lnth$a (lmap$i ?v2 ?v1 ))?v0 )(fun_app$k ?v2 (fun_app$ (lnth$ ?v1 )?v0 ))))):named a75 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$ ?v1 ))):named a76 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_llist$ ))(= (llength$ (lmap$b ?v0 ?v1 ))(llength$a ?v1 ))):named a77 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$a ?v0 ?v1 ))(llength$ ?v1 ))):named a78 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_llist$ ))(= (llength$a (lmap$c ?v0 ?v1 ))(llength$a ?v1 ))):named a79 ))
(assert (! (forall ((?v0 A_nat_prod_a_fun$ )(?v1 A_nat_prod_llist$ ))(= (llength$ (lmap$e ?v0 ?v1 ))(llength$c ?v1 ))):named a80 ))
(assert (! (forall ((?v0 A_a_prod_a_fun$ )(?v1 A_a_prod_llist$ ))(= (llength$ (lmap$d ?v0 ?v1 ))(llength$b ?v1 ))):named a81 ))
(assert (! (forall ((?v0 A_nat_prod_nat_fun$ )(?v1 A_nat_prod_llist$ ))(= (llength$a (lmap$g ?v0 ?v1 ))(llength$c ?v1 ))):named a82 ))
(assert (! (forall ((?v0 A_a_prod_nat_fun$ )(?v1 A_a_prod_llist$ ))(= (llength$a (lmap$f ?v0 ?v1 ))(llength$b ?v1 ))):named a83 ))
(assert (! (forall ((?v0 Nat_a_nat_prod_fun$ )(?v1 Nat_llist$ ))(= (llength$c (lmap$j ?v0 ?v1 ))(llength$a ?v1 ))):named a84 ))
(assert (! (forall ((?v0 Nat_a_a_prod_fun$ )(?v1 Nat_llist$ ))(= (llength$b (lmap$k ?v0 ?v1 ))(llength$a ?v1 ))):named a85 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat_llist$ ))(=> (ldistinct$h ?v0 )(ldistinct$b (lzip$b ?v1 ?v0 )))):named a86 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (ldistinct$g ?v0 )(ldistinct$a (lzip$c ?v1 ?v0 )))):named a87 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 A_llist$ ))(=> (ldistinct$f ?v0 )(ldistinct$c (lzip$i ?v1 ?v0 )))):named a88 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 Nat_llist$ ))(=> (ldistinct$e ?v0 )(ldistinct$ (lzip$j ?v1 ?v0 )))):named a89 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_llist$ ))(=> (ldistinct$e ?v0 )(ldistinct$d (lzip$h ?v1 ?v0 )))):named a90 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 A_llist$ ))(=> (ldistinct$g ?v0 )(ldistinct$f (lzip$ ?v1 ?v0 )))):named a91 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (ldistinct$h ?v0 )(ldistinct$e (lzip$a ?v1 ?v0 )))):named a92 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_nat_prod_llist$ ))(=> (ldistinct$h ?v0 )(ldistinct$c (lzip$i ?v0 ?v1 )))):named a93 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_llist$ ))(=> (ldistinct$h ?v0 )(ldistinct$d (lzip$h ?v0 ?v1 )))):named a94 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 A_a_prod_llist$ ))(=> (ldistinct$g ?v0 )(ldistinct$ (lzip$j ?v0 ?v1 )))):named a95 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (ldistinct$g ?v0 )(ldistinct$a (lzip$c ?v0 ?v1 )))):named a96 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 A_llist$ ))(=> (ldistinct$g ?v0 )(ldistinct$b (lzip$b ?v0 ?v1 )))):named a97 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (ldistinct$h ?v0 )(ldistinct$e (lzip$a ?v0 ?v1 )))):named a98 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat_llist$ ))(=> (ldistinct$h ?v0 )(ldistinct$f (lzip$ ?v0 ?v1 )))):named a99 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod$ ))(exists ((?v1 Nat$ )(?v2 A_a_prod$ ))(= ?v0 (pair$b ?v1 ?v2 )))):named a100 ))
(assert (! (forall ((?v0 Nat_nat_prod$ ))(exists ((?v1 Nat$ )(?v2 Nat$ ))(= ?v0 (pair$c ?v1 ?v2 )))):named a101 ))
(assert (! (forall ((?v0 Nat_a_prod$ ))(exists ((?v1 Nat$ )(?v2 A$ ))(= ?v0 (pair$d ?v1 ?v2 )))):named a102 ))
(assert (! (forall ((?v0 A_a_nat_prod_prod$ ))(exists ((?v1 A$ )(?v2 A_nat_prod$ ))(= ?v0 (pair$e ?v1 ?v2 )))):named a103 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ ))(exists ((?v1 A$ )(?v2 A_a_prod$ ))(= ?v0 (pair$f ?v1 ?v2 )))):named a104 ))
(assert (! (forall ((?v0 A_a_prod$ ))(exists ((?v1 A$ )(?v2 A$ ))(= ?v0 (pair$a ?v1 ?v2 )))):named a105 ))
(assert (! (forall ((?v0 A_nat_prod$ ))(exists ((?v1 A$ )(?v2 Nat$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a106 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod$ )(?v2 Nat$ )(?v3 A_a_prod$ ))(=> (and (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a107 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a108 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(=> (and (= (pair$d ?v0 ?v1 )(pair$d ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a109 ))
(assert (! (forall ((?v0 A$ )(?v1 A_nat_prod$ )(?v2 A$ )(?v3 A_nat_prod$ ))(=> (and (= (pair$e ?v0 ?v1 )(pair$e ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a110 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_prod$ )(?v2 A$ )(?v3 A_a_prod$ ))(=> (and (= (pair$f ?v0 ?v1 )(pair$f ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a111 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(=> (and (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a112 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a113 ))
(check-sat )
;(get-unsat-core )
