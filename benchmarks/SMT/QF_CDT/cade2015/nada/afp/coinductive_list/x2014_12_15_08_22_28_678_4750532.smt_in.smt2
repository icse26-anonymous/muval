;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort D_b_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort D_bool_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort B_c_d_prod_fun$ 0 )
(declare-sort D_a_b_prod_fun$ 0 )
(declare-sort D_c_d_prod_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort C_d_bool_fun_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort Bool_a_b_prod_fun$ 0 )
(declare-sort C_d_prod_bool_fun$ 0 )
(declare-sort A_b_a_b_prod_fun_fun$ 0 )
(declare-sort A_b_c_d_prod_fun_fun$ 0 )
(declare-sort C_d_a_b_prod_fun_fun$ 0 )
(declare-sort C_d_c_d_prod_fun_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_c_d_prod_fun$ 0 )
(declare-sort C_d_prod_a_b_prod_fun$ 0 )
(declare-sort C_d_prod_c_d_prod_fun$ 0 )
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_llist$ 0)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-sort C_llist$ 0)
(declare-sort D_llist$ 0)
(declare-fun lNil$ ()A_b_prod_llist$)
(declare-fun lhd$ (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$ (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$ (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$a ()A_llist$)
(declare-fun lhd$a (A_llist$)A$)
(declare-fun ltl$a (A_llist$)A_llist$)
(declare-fun lCons$a (A$ A_llist$ )A_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-fun lNil$c ()C_llist$)
(declare-fun lhd$c (C_llist$)C$)
(declare-fun ltl$c (C_llist$)C_llist$)
(declare-fun lCons$c (C$ C_llist$ )C_llist$)
(declare-fun lNil$d ()D_llist$)
(declare-fun lhd$d (D_llist$)D$)
(declare-fun ltl$d (D_llist$)D_llist$)
(declare-fun lCons$d (D$ D_llist$ )D_llist$)
(declare-sort C_d_prod$ 0)
(declare-fun fst$a (C_d_prod$)C$)
(declare-fun snd$a (C_d_prod$)D$)
(declare-fun pair$a (C$ D$ )C_d_prod$)
(declare-sort C_d_prod_llist$ 0)
(declare-fun lNil$e ()C_d_prod_llist$)
(declare-fun lhd$e (C_d_prod_llist$)C_d_prod$)
(declare-fun ltl$e (C_d_prod_llist$)C_d_prod_llist$)
(declare-fun lCons$e (C_d_prod$ C_d_prod_llist$ )C_d_prod_llist$)
(declare-fun f$ ()C_a_fun$ )
(declare-fun g$ ()D_b_fun$ )
(declare-fun uu$ ()C_d_a_b_prod_fun_fun$ )
(declare-fun xs$ ()C_llist$ )
(declare-fun ys$ ()D_llist$ )
(declare-fun uua$ (A_b_a_b_prod_fun_fun$ C_d_a_b_prod_fun_fun$ )C_d_a_b_prod_fun_fun$ )
(declare-fun uub$ (C_d_a_b_prod_fun_fun$ C_d_c_d_prod_fun_fun$ )C_d_a_b_prod_fun_fun$ )
(declare-fun uuc$ (A_b_bool_fun_fun$ C_d_a_b_prod_fun_fun$ )C_d_bool_fun_fun$ )
(declare-fun uud$ (A_b_bool_fun_fun$ A_b_a_b_prod_fun_fun$ )A_b_bool_fun_fun$ )
(declare-fun uue$ (A_b_c_d_prod_fun_fun$ C_d_a_b_prod_fun_fun$ )C_d_c_d_prod_fun_fun$ )
(declare-fun uuf$ (C_d_a_b_prod_fun_fun$ A_b_c_d_prod_fun_fun$ )A_b_a_b_prod_fun_fun$ )
(declare-fun uug$ (C_d_c_d_prod_fun_fun$ C_d_c_d_prod_fun_fun$ )C_d_c_d_prod_fun_fun$ )
(declare-fun uuh$ (A_b_a_b_prod_fun_fun$ A_b_a_b_prod_fun_fun$ )A_b_a_b_prod_fun_fun$ )
(declare-fun uui$ (C_d_bool_fun_fun$ C_d_c_d_prod_fun_fun$ )C_d_bool_fun_fun$ )
(declare-fun uuj$ (C_d_bool_fun_fun$ A_b_c_d_prod_fun_fun$ )A_b_bool_fun_fun$ )
(declare-fun uuk$ ()C_d_c_d_prod_fun_fun$ )
(declare-fun uul$ ()A_b_a_b_prod_fun_fun$ )
(declare-fun uum$ (C_d_prod_bool_fun$ )C_d_bool_fun_fun$ )
(declare-fun uun$ (A_b_prod_c_d_prod_fun$ )A_b_c_d_prod_fun_fun$ )
(declare-fun uuo$ (C_d_prod_c_d_prod_fun$ )C_d_c_d_prod_fun_fun$ )
(declare-fun uup$ (A_b_prod_a_b_prod_fun$ )A_b_a_b_prod_fun_fun$ )
(declare-fun uuq$ (A_b_prod_bool_fun$ )A_b_bool_fun_fun$ )
(declare-fun uur$ (C_d_prod_a_b_prod_fun$ )C_d_a_b_prod_fun_fun$ )
(declare-fun uus$ (A_b_prod_a_b_prod_fun$ C_d_a_b_prod_fun_fun$ )C_d_a_b_prod_fun_fun$ )
(declare-fun uut$ (Bool_bool_fun$ A_b_bool_fun_fun$ )A_b_bool_fun_fun$ )
(declare-fun uuu$ (A_b_prod_bool_fun$ A_b_a_b_prod_fun_fun$ )A_b_bool_fun_fun$ )
(declare-fun uuv$ (Bool_a_b_prod_fun$ A_b_bool_fun_fun$ )A_b_a_b_prod_fun_fun$ )
(declare-fun uuw$ (A_b_prod_c_d_prod_fun$ C_d_a_b_prod_fun_fun$ )C_d_c_d_prod_fun_fun$ )
(declare-fun uux$ (C_d_prod_a_b_prod_fun$ C_d_c_d_prod_fun_fun$ )C_d_a_b_prod_fun_fun$ )
(declare-fun uuy$ (C_d_prod_c_d_prod_fun$ C_d_c_d_prod_fun_fun$ )C_d_c_d_prod_fun_fun$ )
(declare-fun uuz$ (A_b_prod_a_b_prod_fun$ A_b_a_b_prod_fun_fun$ )A_b_a_b_prod_fun_fun$ )
(declare-fun uva$ (Bool_bool_fun$ C_d_bool_fun_fun$ )C_d_bool_fun_fun$ )
(declare-fun uvb$ (A_b_prod_bool_fun$ C_d_a_b_prod_fun_fun$ )C_d_bool_fun_fun$ )
(declare-fun lmap$ (C_a_fun$ C_llist$ )A_llist$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun lmap$a (D_b_fun$ D_llist$ )B_llist$ )
(declare-fun lmap$b (C_d_prod_a_b_prod_fun$ C_d_prod_llist$ )A_b_prod_llist$ )
(declare-fun lzip$a (C_llist$ D_llist$ )C_d_prod_llist$ )
(declare-fun fun_app$ (D_a_b_prod_fun$ D$ )A_b_prod$ )
(declare-fun fun_app$a (C_d_a_b_prod_fun_fun$ C$ )D_a_b_prod_fun$ )
(declare-fun fun_app$b (C_a_fun$ C$ )A$ )
(declare-fun fun_app$c (D_b_fun$ D$ )B$ )
(declare-fun fun_app$d (D_c_d_prod_fun$ D$ )C_d_prod$ )
(declare-fun fun_app$e (C_d_c_d_prod_fun_fun$ C$ )D_c_d_prod_fun$ )
(declare-fun fun_app$f (B_a_b_prod_fun$ B$ )A_b_prod$ )
(declare-fun fun_app$g (A_b_a_b_prod_fun_fun$ A$ )B_a_b_prod_fun$ )
(declare-fun fun_app$h (C_d_prod_c_d_prod_fun$ C_d_prod$ )C_d_prod$ )
(declare-fun fun_app$i (C_d_prod_a_b_prod_fun$ C_d_prod$ )A_b_prod$ )
(declare-fun fun_app$j (D_bool_fun$ D$ )Bool )
(declare-fun fun_app$k (C_d_bool_fun_fun$ C$ )D_bool_fun$ )
(declare-fun fun_app$l (C_d_prod_bool_fun$ C_d_prod$ )Bool )
(declare-fun fun_app$m (B_c_d_prod_fun$ B$ )C_d_prod$ )
(declare-fun fun_app$n (A_b_c_d_prod_fun_fun$ A$ )B_c_d_prod_fun$ )
(declare-fun fun_app$o (A_b_prod_c_d_prod_fun$ A_b_prod$ )C_d_prod$ )
(declare-fun fun_app$p (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod$ )
(declare-fun fun_app$q (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$r (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$s (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun fun_app$t (Bool_a_b_prod_fun$ Bool )A_b_prod$ )
(declare-fun fun_app$u (Bool_bool_fun$ Bool )Bool )
(declare-fun case_prod$ (C_d_c_d_prod_fun_fun$ )C_d_prod_c_d_prod_fun$ )
(declare-fun case_prod$a (C_d_a_b_prod_fun_fun$ )C_d_prod_a_b_prod_fun$ )
(declare-fun case_prod$b (C_d_bool_fun_fun$ )C_d_prod_bool_fun$ )
(declare-fun case_prod$c (A_b_c_d_prod_fun_fun$ )A_b_prod_c_d_prod_fun$ )
(declare-fun case_prod$d (A_b_a_b_prod_fun_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun case_prod$e (A_b_bool_fun_fun$ )A_b_prod_bool_fun$ )
(assert (! (forall ((?v0 C$ )(?v1 D$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(pair$ (fun_app$b f$ ?v0 )(fun_app$c g$ ?v1 ))):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 C$ )(?v1 D$ ))(! (= (fun_app$d (fun_app$e uuk$ ?v0 )?v1 )(pair$a ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uuk$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ ))(! (= (fun_app$f (fun_app$g uul$ ?v0 )?v1 )(pair$ ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uul$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 C_d_prod_c_d_prod_fun$ )(?v1 C$ )(?v2 D$ ))(! (= (fun_app$d (fun_app$e (uuo$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (pair$a ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$e (uuo$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 C_d_prod_a_b_prod_fun$ )(?v1 C$ )(?v2 D$ ))(! (= (fun_app$ (fun_app$a (uur$ ?v0 )?v1 )?v2 )(fun_app$i ?v0 (pair$a ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uur$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 C_d_prod_bool_fun$ )(?v1 C$ )(?v2 D$ ))(! (= (fun_app$j (fun_app$k (uum$ ?v0 )?v1 )?v2 )(fun_app$l ?v0 (pair$a ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$k (uum$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$m (fun_app$n (uun$ ?v0 )?v1 )?v2 )(fun_app$o ?v0 (pair$ ?v1 ?v2 ))):pattern ((fun_app$m (fun_app$n (uun$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$f (fun_app$g (uup$ ?v0 )?v1 )?v2 )(fun_app$p ?v0 (pair$ ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$g (uup$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$q (fun_app$r (uuq$ ?v0 )?v1 )?v2 )(fun_app$s ?v0 (pair$ ?v1 ?v2 ))):pattern ((fun_app$q (fun_app$r (uuq$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 C_d_c_d_prod_fun_fun$ )(?v1 C_d_c_d_prod_fun_fun$ )(?v2 C$ )(?v3 D$ ))(! (= (fun_app$d (fun_app$e (uug$ ?v0 ?v1 )?v2 )?v3 )(fun_app$h (case_prod$ ?v0 )(fun_app$d (fun_app$e ?v1 ?v2 )?v3 ))):pattern ((fun_app$d (fun_app$e (uug$ ?v0 ?v1 )?v2 )?v3 )))):named a9 ))
(assert (! (forall ((?v0 C_d_a_b_prod_fun_fun$ )(?v1 C_d_c_d_prod_fun_fun$ )(?v2 C$ )(?v3 D$ ))(! (= (fun_app$ (fun_app$a (uub$ ?v0 ?v1 )?v2 )?v3 )(fun_app$i (case_prod$a ?v0 )(fun_app$d (fun_app$e ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uub$ ?v0 ?v1 )?v2 )?v3 )))):named a10 ))
(assert (! (forall ((?v0 C_d_a_b_prod_fun_fun$ )(?v1 A_b_c_d_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$f (fun_app$g (uuf$ ?v0 ?v1 )?v2 )?v3 )(fun_app$i (case_prod$a ?v0 )(fun_app$m (fun_app$n ?v1 ?v2 )?v3 ))):pattern ((fun_app$f (fun_app$g (uuf$ ?v0 ?v1 )?v2 )?v3 )))):named a11 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ )(?v1 C_d_c_d_prod_fun_fun$ )(?v2 C$ )(?v3 D$ ))(! (= (fun_app$j (fun_app$k (uui$ ?v0 ?v1 )?v2 )?v3 )(fun_app$l (case_prod$b ?v0 )(fun_app$d (fun_app$e ?v1 ?v2 )?v3 ))):pattern ((fun_app$j (fun_app$k (uui$ ?v0 ?v1 )?v2 )?v3 )))):named a12 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ )(?v1 A_b_c_d_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$q (fun_app$r (uuj$ ?v0 ?v1 )?v2 )?v3 )(fun_app$l (case_prod$b ?v0 )(fun_app$m (fun_app$n ?v1 ?v2 )?v3 ))):pattern ((fun_app$q (fun_app$r (uuj$ ?v0 ?v1 )?v2 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_b_c_d_prod_fun_fun$ )(?v1 C_d_a_b_prod_fun_fun$ )(?v2 C$ )(?v3 D$ ))(! (= (fun_app$d (fun_app$e (uue$ ?v0 ?v1 )?v2 )?v3 )(fun_app$o (case_prod$c ?v0 )(fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$d (fun_app$e (uue$ ?v0 ?v1 )?v2 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 C_d_a_b_prod_fun_fun$ )(?v2 C$ )(?v3 D$ ))(! (= (fun_app$ (fun_app$a (uua$ ?v0 ?v1 )?v2 )?v3 )(fun_app$p (case_prod$d ?v0 )(fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uua$ ?v0 ?v1 )?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$f (fun_app$g (uuh$ ?v0 ?v1 )?v2 )?v3 )(fun_app$p (case_prod$d ?v0 )(fun_app$f (fun_app$g ?v1 ?v2 )?v3 ))):pattern ((fun_app$f (fun_app$g (uuh$ ?v0 ?v1 )?v2 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 C_d_a_b_prod_fun_fun$ )(?v2 C$ )(?v3 D$ ))(! (= (fun_app$j (fun_app$k (uuc$ ?v0 ?v1 )?v2 )?v3 )(fun_app$s (case_prod$e ?v0 )(fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$j (fun_app$k (uuc$ ?v0 ?v1 )?v2 )?v3 )))):named a17 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$q (fun_app$r (uud$ ?v0 ?v1 )?v2 )?v3 )(fun_app$s (case_prod$e ?v0 )(fun_app$f (fun_app$g ?v1 ?v2 )?v3 ))):pattern ((fun_app$q (fun_app$r (uud$ ?v0 ?v1 )?v2 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 C_d_prod_c_d_prod_fun$ )(?v1 C_d_c_d_prod_fun_fun$ )(?v2 C$ )(?v3 D$ ))(! (= (fun_app$d (fun_app$e (uuy$ ?v0 ?v1 )?v2 )?v3 )(fun_app$h ?v0 (fun_app$d (fun_app$e ?v1 ?v2 )?v3 ))):pattern ((fun_app$d (fun_app$e (uuy$ ?v0 ?v1 )?v2 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 C_d_prod_a_b_prod_fun$ )(?v1 C_d_c_d_prod_fun_fun$ )(?v2 C$ )(?v3 D$ ))(! (= (fun_app$ (fun_app$a (uux$ ?v0 ?v1 )?v2 )?v3 )(fun_app$i ?v0 (fun_app$d (fun_app$e ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uux$ ?v0 ?v1 )?v2 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_fun$ )(?v1 C_d_a_b_prod_fun_fun$ )(?v2 C$ )(?v3 D$ ))(! (= (fun_app$d (fun_app$e (uuw$ ?v0 ?v1 )?v2 )?v3 )(fun_app$o ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$d (fun_app$e (uuw$ ?v0 ?v1 )?v2 )?v3 )))):named a21 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 C_d_a_b_prod_fun_fun$ )(?v2 C$ )(?v3 D$ ))(! (= (fun_app$ (fun_app$a (uus$ ?v0 ?v1 )?v2 )?v3 )(fun_app$p ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uus$ ?v0 ?v1 )?v2 )?v3 )))):named a22 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$f (fun_app$g (uuz$ ?v0 ?v1 )?v2 )?v3 )(fun_app$p ?v0 (fun_app$f (fun_app$g ?v1 ?v2 )?v3 ))):pattern ((fun_app$f (fun_app$g (uuz$ ?v0 ?v1 )?v2 )?v3 )))):named a23 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 C_d_a_b_prod_fun_fun$ )(?v2 C$ )(?v3 D$ ))(! (= (fun_app$j (fun_app$k (uvb$ ?v0 ?v1 )?v2 )?v3 )(fun_app$s ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$j (fun_app$k (uvb$ ?v0 ?v1 )?v2 )?v3 )))):named a24 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$q (fun_app$r (uuu$ ?v0 ?v1 )?v2 )?v3 )(fun_app$s ?v0 (fun_app$f (fun_app$g ?v1 ?v2 )?v3 ))):pattern ((fun_app$q (fun_app$r (uuu$ ?v0 ?v1 )?v2 )?v3 )))):named a25 ))
(assert (! (forall ((?v0 Bool_a_b_prod_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$f (fun_app$g (uuv$ ?v0 ?v1 )?v2 )?v3 )(fun_app$t ?v0 (fun_app$q (fun_app$r ?v1 ?v2 )?v3 ))):pattern ((fun_app$f (fun_app$g (uuv$ ?v0 ?v1 )?v2 )?v3 )))):named a26 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 C_d_bool_fun_fun$ )(?v2 C$ )(?v3 D$ ))(! (= (fun_app$j (fun_app$k (uva$ ?v0 ?v1 )?v2 )?v3 )(fun_app$u ?v0 (fun_app$j (fun_app$k ?v1 ?v2 )?v3 ))):pattern ((fun_app$j (fun_app$k (uva$ ?v0 ?v1 )?v2 )?v3 )))):named a27 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$q (fun_app$r (uut$ ?v0 ?v1 )?v2 )?v3 )(fun_app$u ?v0 (fun_app$q (fun_app$r ?v1 ?v2 )?v3 ))):pattern ((fun_app$q (fun_app$r (uut$ ?v0 ?v1 )?v2 )?v3 )))):named a28 ))
(assert (! (not (= (lzip$ (lmap$ f$ xs$ )(lmap$a g$ ys$ ))(lmap$b (case_prod$a uu$ )(lzip$a xs$ ys$ )))):named a29 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 C_d_a_b_prod_fun_fun$ )(?v2 C_d_prod$ ))(= (fun_app$p (case_prod$d ?v0 )(fun_app$i (case_prod$a ?v1 )?v2 ))(fun_app$i (case_prod$a (uua$ ?v0 ?v1 ))?v2 ))):named a30 ))
(assert (! (forall ((?v0 C_d_a_b_prod_fun_fun$ )(?v1 C_d_c_d_prod_fun_fun$ )(?v2 C_d_prod$ ))(= (fun_app$i (case_prod$a ?v0 )(fun_app$h (case_prod$ ?v1 )?v2 ))(fun_app$i (case_prod$a (uub$ ?v0 ?v1 ))?v2 ))):named a31 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 C_d_a_b_prod_fun_fun$ )(?v2 C_d_prod$ ))(= (fun_app$s (case_prod$e ?v0 )(fun_app$i (case_prod$a ?v1 )?v2 ))(fun_app$l (case_prod$b (uuc$ ?v0 ?v1 ))?v2 ))):named a32 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$s (case_prod$e ?v0 )(fun_app$p (case_prod$d ?v1 )?v2 ))(fun_app$s (case_prod$e (uud$ ?v0 ?v1 ))?v2 ))):named a33 ))
(assert (! (forall ((?v0 A_b_c_d_prod_fun_fun$ )(?v1 C_d_a_b_prod_fun_fun$ )(?v2 C_d_prod$ ))(= (fun_app$o (case_prod$c ?v0 )(fun_app$i (case_prod$a ?v1 )?v2 ))(fun_app$h (case_prod$ (uue$ ?v0 ?v1 ))?v2 ))):named a34 ))
(assert (! (forall ((?v0 C_d_a_b_prod_fun_fun$ )(?v1 A_b_c_d_prod_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$i (case_prod$a ?v0 )(fun_app$o (case_prod$c ?v1 )?v2 ))(fun_app$p (case_prod$d (uuf$ ?v0 ?v1 ))?v2 ))):named a35 ))
(assert (! (forall ((?v0 C_d_c_d_prod_fun_fun$ )(?v1 C_d_c_d_prod_fun_fun$ )(?v2 C_d_prod$ ))(= (fun_app$h (case_prod$ ?v0 )(fun_app$h (case_prod$ ?v1 )?v2 ))(fun_app$h (case_prod$ (uug$ ?v0 ?v1 ))?v2 ))):named a36 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$p (case_prod$d ?v0 )(fun_app$p (case_prod$d ?v1 )?v2 ))(fun_app$p (case_prod$d (uuh$ ?v0 ?v1 ))?v2 ))):named a37 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ )(?v1 C_d_c_d_prod_fun_fun$ )(?v2 C_d_prod$ ))(= (fun_app$l (case_prod$b ?v0 )(fun_app$h (case_prod$ ?v1 )?v2 ))(fun_app$l (case_prod$b (uui$ ?v0 ?v1 ))?v2 ))):named a38 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ )(?v1 A_b_c_d_prod_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$l (case_prod$b ?v0 )(fun_app$o (case_prod$c ?v1 )?v2 ))(fun_app$s (case_prod$e (uuj$ ?v0 ?v1 ))?v2 ))):named a39 ))
(assert (! (forall ((?v0 C_d_prod$ ))(! (= (fun_app$h (case_prod$ uuk$ )?v0 )?v0 ):pattern ((fun_app$h (case_prod$ uuk$ )?v0 )))):named a40 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$p (case_prod$d uul$ )?v0 )?v0 ):pattern ((fun_app$p (case_prod$d uul$ )?v0 )))):named a41 ))
(assert (! (forall ((?v0 C$ )(?v1 D$ )(?v2 C$ )(?v3 D$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a42 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a43 ))
(assert (! (forall ((?v0 C$ )(?v1 D$ )(?v2 C$ )(?v3 D$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a44 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a45 ))
(assert (! (forall ((?v0 C_d_prod_bool_fun$ ))(= (case_prod$b (uum$ ?v0 ))?v0 )):named a46 ))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_fun$ ))(= (case_prod$c (uun$ ?v0 ))?v0 )):named a47 ))
(assert (! (forall ((?v0 C_d_prod_c_d_prod_fun$ ))(= (case_prod$ (uuo$ ?v0 ))?v0 )):named a48 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ ))(= (case_prod$d (uup$ ?v0 ))?v0 )):named a49 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ ))(= (case_prod$e (uuq$ ?v0 ))?v0 )):named a50 ))
(assert (! (forall ((?v0 C_d_prod_a_b_prod_fun$ ))(= (case_prod$a (uur$ ?v0 ))?v0 )):named a51 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ )(?v1 C_d_prod_bool_fun$ ))(=> (forall ((?v2 C$ )(?v3 D$ ))(= (fun_app$j (fun_app$k ?v0 ?v2 )?v3 )(fun_app$l ?v1 (pair$a ?v2 ?v3 ))))(= (case_prod$b ?v0 )?v1 ))):named a52 ))
(assert (! (forall ((?v0 A_b_c_d_prod_fun_fun$ )(?v1 A_b_prod_c_d_prod_fun$ ))(=> (forall ((?v2 A$ )(?v3 B$ ))(= (fun_app$m (fun_app$n ?v0 ?v2 )?v3 )(fun_app$o ?v1 (pair$ ?v2 ?v3 ))))(= (case_prod$c ?v0 )?v1 ))):named a53 ))
(assert (! (forall ((?v0 C_d_c_d_prod_fun_fun$ )(?v1 C_d_prod_c_d_prod_fun$ ))(=> (forall ((?v2 C$ )(?v3 D$ ))(= (fun_app$d (fun_app$e ?v0 ?v2 )?v3 )(fun_app$h ?v1 (pair$a ?v2 ?v3 ))))(= (case_prod$ ?v0 )?v1 ))):named a54 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 A_b_prod_a_b_prod_fun$ ))(=> (forall ((?v2 A$ )(?v3 B$ ))(= (fun_app$f (fun_app$g ?v0 ?v2 )?v3 )(fun_app$p ?v1 (pair$ ?v2 ?v3 ))))(= (case_prod$d ?v0 )?v1 ))):named a55 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_prod_bool_fun$ ))(=> (forall ((?v2 A$ )(?v3 B$ ))(= (fun_app$q (fun_app$r ?v0 ?v2 )?v3 )(fun_app$s ?v1 (pair$ ?v2 ?v3 ))))(= (case_prod$e ?v0 )?v1 ))):named a56 ))
(assert (! (forall ((?v0 C_d_a_b_prod_fun_fun$ )(?v1 C_d_prod_a_b_prod_fun$ ))(=> (forall ((?v2 C$ )(?v3 D$ ))(= (fun_app$ (fun_app$a ?v0 ?v2 )?v3 )(fun_app$i ?v1 (pair$a ?v2 ?v3 ))))(= (case_prod$a ?v0 )?v1 ))):named a57 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ )(?v1 C$ )(?v2 D$ ))(! (= (fun_app$l (case_prod$b ?v0 )(pair$a ?v1 ?v2 ))(fun_app$j (fun_app$k ?v0 ?v1 )?v2 )):pattern ((fun_app$l (case_prod$b ?v0 )(pair$a ?v1 ?v2 ))))):named a58 ))
(assert (! (forall ((?v0 A_b_c_d_prod_fun_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$o (case_prod$c ?v0 )(pair$ ?v1 ?v2 ))(fun_app$m (fun_app$n ?v0 ?v1 )?v2 )):pattern ((fun_app$o (case_prod$c ?v0 )(pair$ ?v1 ?v2 ))))):named a59 ))
(assert (! (forall ((?v0 C_d_c_d_prod_fun_fun$ )(?v1 C$ )(?v2 D$ ))(! (= (fun_app$h (case_prod$ ?v0 )(pair$a ?v1 ?v2 ))(fun_app$d (fun_app$e ?v0 ?v1 )?v2 )):pattern ((fun_app$h (case_prod$ ?v0 )(pair$a ?v1 ?v2 ))))):named a60 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$p (case_prod$d ?v0 )(pair$ ?v1 ?v2 ))(fun_app$f (fun_app$g ?v0 ?v1 )?v2 )):pattern ((fun_app$p (case_prod$d ?v0 )(pair$ ?v1 ?v2 ))))):named a61 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$s (case_prod$e ?v0 )(pair$ ?v1 ?v2 ))(fun_app$q (fun_app$r ?v0 ?v1 )?v2 )):pattern ((fun_app$s (case_prod$e ?v0 )(pair$ ?v1 ?v2 ))))):named a62 ))
(assert (! (forall ((?v0 C_d_a_b_prod_fun_fun$ )(?v1 C$ )(?v2 D$ ))(! (= (fun_app$i (case_prod$a ?v0 )(pair$a ?v1 ?v2 ))(fun_app$ (fun_app$a ?v0 ?v1 )?v2 )):pattern ((fun_app$i (case_prod$a ?v0 )(pair$a ?v1 ?v2 ))))):named a63 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ )(?v1 C$ )(?v2 D$ ))(! (= (fun_app$l (case_prod$b ?v0 )(pair$a ?v1 ?v2 ))(fun_app$j (fun_app$k ?v0 ?v1 )?v2 )):pattern ((fun_app$l (case_prod$b ?v0 )(pair$a ?v1 ?v2 ))))):named a64 ))
(assert (! (forall ((?v0 A_b_c_d_prod_fun_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$o (case_prod$c ?v0 )(pair$ ?v1 ?v2 ))(fun_app$m (fun_app$n ?v0 ?v1 )?v2 )):pattern ((fun_app$o (case_prod$c ?v0 )(pair$ ?v1 ?v2 ))))):named a65 ))
(assert (! (forall ((?v0 C_d_c_d_prod_fun_fun$ )(?v1 C$ )(?v2 D$ ))(! (= (fun_app$h (case_prod$ ?v0 )(pair$a ?v1 ?v2 ))(fun_app$d (fun_app$e ?v0 ?v1 )?v2 )):pattern ((fun_app$h (case_prod$ ?v0 )(pair$a ?v1 ?v2 ))))):named a66 ))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$p (case_prod$d ?v0 )(pair$ ?v1 ?v2 ))(fun_app$f (fun_app$g ?v0 ?v1 )?v2 )):pattern ((fun_app$p (case_prod$d ?v0 )(pair$ ?v1 ?v2 ))))):named a67 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$s (case_prod$e ?v0 )(pair$ ?v1 ?v2 ))(fun_app$q (fun_app$r ?v0 ?v1 )?v2 )):pattern ((fun_app$s (case_prod$e ?v0 )(pair$ ?v1 ?v2 ))))):named a68 ))
(assert (! (forall ((?v0 C_d_a_b_prod_fun_fun$ )(?v1 C$ )(?v2 D$ ))(! (= (fun_app$i (case_prod$a ?v0 )(pair$a ?v1 ?v2 ))(fun_app$ (fun_app$a ?v0 ?v1 )?v2 )):pattern ((fun_app$i (case_prod$a ?v0 )(pair$a ?v1 ?v2 ))))):named a69 ))
(assert (! (forall ((?v0 C_d_prod$ )(?v1 C_d_bool_fun_fun$ )(?v2 C_d_bool_fun_fun$ )(?v3 C_d_prod$ ))(=> (and (forall ((?v4 C$ )(?v5 D$ ))(=> (= (pair$a ?v4 ?v5 )?v0 )(= (fun_app$j (fun_app$k ?v1 ?v4 )?v5 )(fun_app$j (fun_app$k ?v2 ?v4 )?v5 ))))(= ?v3 ?v0 ))(= (fun_app$l (case_prod$b ?v1 )?v3 )(fun_app$l (case_prod$b ?v2 )?v0 )))):named a70 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_c_d_prod_fun_fun$ )(?v2 A_b_c_d_prod_fun_fun$ )(?v3 A_b_prod$ ))(=> (and (forall ((?v4 A$ )(?v5 B$ ))(=> (= (pair$ ?v4 ?v5 )?v0 )(= (fun_app$m (fun_app$n ?v1 ?v4 )?v5 )(fun_app$m (fun_app$n ?v2 ?v4 )?v5 ))))(= ?v3 ?v0 ))(= (fun_app$o (case_prod$c ?v1 )?v3 )(fun_app$o (case_prod$c ?v2 )?v0 )))):named a71 ))
(assert (! (forall ((?v0 C_d_prod$ )(?v1 C_d_c_d_prod_fun_fun$ )(?v2 C_d_c_d_prod_fun_fun$ )(?v3 C_d_prod$ ))(=> (and (forall ((?v4 C$ )(?v5 D$ ))(=> (= (pair$a ?v4 ?v5 )?v0 )(= (fun_app$d (fun_app$e ?v1 ?v4 )?v5 )(fun_app$d (fun_app$e ?v2 ?v4 )?v5 ))))(= ?v3 ?v0 ))(= (fun_app$h (case_prod$ ?v1 )?v3 )(fun_app$h (case_prod$ ?v2 )?v0 )))):named a72 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_a_b_prod_fun_fun$ )(?v3 A_b_prod$ ))(=> (and (forall ((?v4 A$ )(?v5 B$ ))(=> (= (pair$ ?v4 ?v5 )?v0 )(= (fun_app$f (fun_app$g ?v1 ?v4 )?v5 )(fun_app$f (fun_app$g ?v2 ?v4 )?v5 ))))(= ?v3 ?v0 ))(= (fun_app$p (case_prod$d ?v1 )?v3 )(fun_app$p (case_prod$d ?v2 )?v0 )))):named a73 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_bool_fun_fun$ )(?v2 A_b_bool_fun_fun$ )(?v3 A_b_prod$ ))(=> (and (forall ((?v4 A$ )(?v5 B$ ))(=> (= (pair$ ?v4 ?v5 )?v0 )(= (fun_app$q (fun_app$r ?v1 ?v4 )?v5 )(fun_app$q (fun_app$r ?v2 ?v4 )?v5 ))))(= ?v3 ?v0 ))(= (fun_app$s (case_prod$e ?v1 )?v3 )(fun_app$s (case_prod$e ?v2 )?v0 )))):named a74 ))
(assert (! (forall ((?v0 C_d_prod$ )(?v1 C_d_a_b_prod_fun_fun$ )(?v2 C_d_a_b_prod_fun_fun$ )(?v3 C_d_prod$ ))(=> (and (forall ((?v4 C$ )(?v5 D$ ))(=> (= (pair$a ?v4 ?v5 )?v0 )(= (fun_app$ (fun_app$a ?v1 ?v4 )?v5 )(fun_app$ (fun_app$a ?v2 ?v4 )?v5 ))))(= ?v3 ?v0 ))(= (fun_app$i (case_prod$a ?v1 )?v3 )(fun_app$i (case_prod$a ?v2 )?v0 )))):named a75 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 C_d_bool_fun_fun$ )(?v2 C_d_prod$ ))(=> (and (fun_app$u ?v0 (fun_app$l (case_prod$b ?v1 )?v2 ))(forall ((?v3 C$ )(?v4 D$ ))(=> (and (= ?v2 (pair$a ?v3 ?v4 ))(fun_app$u ?v0 (fun_app$j (fun_app$k ?v1 ?v3 )?v4 )))false )))false )):named a76 ))
(assert (! (forall ((?v0 C_d_prod_bool_fun$ )(?v1 A_b_c_d_prod_fun_fun$ )(?v2 A_b_prod$ ))(=> (and (fun_app$l ?v0 (fun_app$o (case_prod$c ?v1 )?v2 ))(forall ((?v3 A$ )(?v4 B$ ))(=> (and (= ?v2 (pair$ ?v3 ?v4 ))(fun_app$l ?v0 (fun_app$m (fun_app$n ?v1 ?v3 )?v4 )))false )))false )):named a77 ))
(assert (! (forall ((?v0 C_d_prod_bool_fun$ )(?v1 C_d_c_d_prod_fun_fun$ )(?v2 C_d_prod$ ))(=> (and (fun_app$l ?v0 (fun_app$h (case_prod$ ?v1 )?v2 ))(forall ((?v3 C$ )(?v4 D$ ))(=> (and (= ?v2 (pair$a ?v3 ?v4 ))(fun_app$l ?v0 (fun_app$d (fun_app$e ?v1 ?v3 )?v4 )))false )))false )):named a78 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_prod$ ))(=> (and (fun_app$s ?v0 (fun_app$p (case_prod$d ?v1 )?v2 ))(forall ((?v3 A$ )(?v4 B$ ))(=> (and (= ?v2 (pair$ ?v3 ?v4 ))(fun_app$s ?v0 (fun_app$f (fun_app$g ?v1 ?v3 )?v4 )))false )))false )):named a79 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A_b_prod$ ))(=> (and (fun_app$u ?v0 (fun_app$s (case_prod$e ?v1 )?v2 ))(forall ((?v3 A$ )(?v4 B$ ))(=> (and (= ?v2 (pair$ ?v3 ?v4 ))(fun_app$u ?v0 (fun_app$q (fun_app$r ?v1 ?v3 )?v4 )))false )))false )):named a80 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 C_d_a_b_prod_fun_fun$ )(?v2 C_d_prod$ ))(=> (and (fun_app$s ?v0 (fun_app$i (case_prod$a ?v1 )?v2 ))(forall ((?v3 C$ )(?v4 D$ ))(=> (and (= ?v2 (pair$a ?v3 ?v4 ))(fun_app$s ?v0 (fun_app$ (fun_app$a ?v1 ?v3 )?v4 )))false )))false )):named a81 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 C_d_a_b_prod_fun_fun$ )(?v2 C_d_prod$ ))(= (fun_app$p ?v0 (fun_app$i (case_prod$a ?v1 )?v2 ))(fun_app$i (case_prod$a (uus$ ?v0 ?v1 ))?v2 ))):named a82 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$u ?v0 (fun_app$s (case_prod$e ?v1 )?v2 ))(fun_app$s (case_prod$e (uut$ ?v0 ?v1 ))?v2 ))):named a83 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$s ?v0 (fun_app$p (case_prod$d ?v1 )?v2 ))(fun_app$s (case_prod$e (uuu$ ?v0 ?v1 ))?v2 ))):named a84 ))
(assert (! (forall ((?v0 Bool_a_b_prod_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$t ?v0 (fun_app$s (case_prod$e ?v1 )?v2 ))(fun_app$p (case_prod$d (uuv$ ?v0 ?v1 ))?v2 ))):named a85 ))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_fun$ )(?v1 C_d_a_b_prod_fun_fun$ )(?v2 C_d_prod$ ))(= (fun_app$o ?v0 (fun_app$i (case_prod$a ?v1 )?v2 ))(fun_app$h (case_prod$ (uuw$ ?v0 ?v1 ))?v2 ))):named a86 ))
(assert (! (forall ((?v0 C_d_prod_a_b_prod_fun$ )(?v1 C_d_c_d_prod_fun_fun$ )(?v2 C_d_prod$ ))(= (fun_app$i ?v0 (fun_app$h (case_prod$ ?v1 )?v2 ))(fun_app$i (case_prod$a (uux$ ?v0 ?v1 ))?v2 ))):named a87 ))
(assert (! (forall ((?v0 C_d_prod_c_d_prod_fun$ )(?v1 C_d_c_d_prod_fun_fun$ )(?v2 C_d_prod$ ))(= (fun_app$h ?v0 (fun_app$h (case_prod$ ?v1 )?v2 ))(fun_app$h (case_prod$ (uuy$ ?v0 ?v1 ))?v2 ))):named a88 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_a_b_prod_fun_fun$ )(?v2 A_b_prod$ ))(= (fun_app$p ?v0 (fun_app$p (case_prod$d ?v1 )?v2 ))(fun_app$p (case_prod$d (uuz$ ?v0 ?v1 ))?v2 ))):named a89 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 C_d_bool_fun_fun$ )(?v2 C_d_prod$ ))(= (fun_app$u ?v0 (fun_app$l (case_prod$b ?v1 )?v2 ))(fun_app$l (case_prod$b (uva$ ?v0 ?v1 ))?v2 ))):named a90 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 C_d_a_b_prod_fun_fun$ )(?v2 C_d_prod$ ))(= (fun_app$s ?v0 (fun_app$i (case_prod$a ?v1 )?v2 ))(fun_app$l (case_prod$b (uvb$ ?v0 ?v1 ))?v2 ))):named a91 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ )(?v1 C$ )(?v2 D$ ))(=> (fun_app$j (fun_app$k ?v0 ?v1 )?v2 )(fun_app$l (case_prod$b ?v0 )(pair$a ?v1 ?v2 )))):named a92 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 B$ ))(=> (fun_app$q (fun_app$r ?v0 ?v1 )?v2 )(fun_app$s (case_prod$e ?v0 )(pair$ ?v1 ?v2 )))):named a93 ))
(check-sat )
;(get-unsat-core )
