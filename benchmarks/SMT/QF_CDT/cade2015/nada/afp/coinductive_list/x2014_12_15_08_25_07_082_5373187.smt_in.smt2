;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun q1$ ()A_bool_fun$ )
(declare-fun q2$ ()B_bool_fun$ )
(declare-fun uu$ ()B_b_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun uua$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun uub$ ()A_a_bool_fun_fun$ )
(declare-fun uuc$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun llcp$a (B_llist$ )B_llist_enat_fun$ )
(declare-fun lmap$a (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$b (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lset$a (B_llist$ )B_set$ )
(declare-fun ldrop$a (Enat$ B_llist$ )B_llist$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun member$a (B$ B_set$ )Bool )
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$f (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$h (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$i (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$j (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$k (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$l (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun lprefix$a (B_llist$ B_llist$ )Bool )
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(declare-fun ltakeWhile$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun ldropWhile$a (B_bool_fun$ B_llist$ )B_llist$ )
(declare-fun llist_all2$a (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (B_a_bool_fun_fun$ B_llist$ A_llist$ )Bool )
(declare-fun llist_all2$c (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun ltakeWhile$a (B_bool_fun$ )B_llist_b_llist_fun$ )
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uuc$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$d (fun_app$e uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uu$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$f (fun_app$g uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uub$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (= (llength$ (fun_app$h (ltakeWhile$ q1$ )xs$ ))(llength$a (fun_app$i (ltakeWhile$a q2$ )ys$ )))):named a4 ))
(assert (! (llist_all2$ p$ xs$ ys$ ):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ ))(=> (fun_app$d (fun_app$j p$ ?v0 )?v1 )(= (fun_app$f q1$ ?v0 )(fun_app$d q2$ ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (llength$ (fun_app$h (ltakeWhile$ ?v0 )?v1 ))(llength$ ?v1 ))(= (fun_app$h (ltakeWhile$ ?v0 )?v1 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_llist$ ))(= (= (llength$a (fun_app$i (ltakeWhile$a ?v0 )?v1 ))(llength$a ?v1 ))(= (fun_app$i (ltakeWhile$a ?v0 )?v1 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(= (llength$ ?v1 )(llength$ ?v2 )))):named a9 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (llist_all2$b ?v0 ?v1 ?v2 )(= (llength$a ?v1 )(llength$ ?v2 )))):named a10 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (fun_app$ (fun_app$a (llist_all2$c ?v0 )?v1 )?v2 )(= (llength$a ?v1 )(llength$a ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (llist_all2$ ?v0 ?v1 ?v2 )(= (llength$ ?v1 )(llength$a ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(less_eq$ (llength$ (fun_app$h (ltakeWhile$ ?v0 )?v1 ))(llength$ ?v1 ))):named a13 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_llist$ ))(less_eq$ (llength$a (fun_app$i (ltakeWhile$a ?v0 )?v1 ))(llength$a ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$k (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$l (llcp$a ?v0 )?v0 )(llength$a ?v0 )):pattern ((llcp$a ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$h (ltakeWhile$ ?v0 )lNil$ )lNil$ ):pattern ((ltakeWhile$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 B_bool_fun$ ))(! (= (fun_app$i (ltakeWhile$a ?v0 )lNil$a )lNil$a ):pattern ((ltakeWhile$a ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$ ?v1 ))):named a19 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$ (lmap$a ?v0 ?v1 ))(llength$a ?v1 ))):named a20 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$b ?v0 ?v1 ))(llength$ ?v1 ))):named a21 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$a (lmap$c ?v0 ?v1 ))(llength$a ?v1 ))):named a22 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(lprefix$ (fun_app$h (ltakeWhile$ ?v0 )?v1 )?v1 )):named a23 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_llist$ ))(lprefix$a (fun_app$i (ltakeWhile$a ?v0 )?v1 )?v1 )):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(= (llength$ ?v0 )(llength$ ?v1 )))(= ?v0 ?v1 ))):named a25 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(= (llength$a ?v0 )(llength$a ?v1 )))(= ?v0 ?v1 ))):named a26 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$f ?v2 ?v4 )(fun_app$f ?v3 ?v4 )))))(= (fun_app$h (ltakeWhile$ ?v2 )?v0 )(fun_app$h (ltakeWhile$ ?v3 )?v1 )))):named a27 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_bool_fun$ )(?v3 B_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 B$ ))(=> (member$a ?v4 (lset$a ?v1 ))(= (fun_app$d ?v2 ?v4 )(fun_app$d ?v3 ?v4 )))))(= (fun_app$i (ltakeWhile$a ?v2 )?v0 )(fun_app$i (ltakeWhile$a ?v3 )?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(! (=> (forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v0 ))(fun_app$f ?v1 ?v2 )))(= (fun_app$h (ltakeWhile$ ?v1 )?v0 )?v0 )):pattern ((fun_app$h (ltakeWhile$ ?v1 )?v0 )))):named a29 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_bool_fun$ ))(! (=> (forall ((?v2 B$ ))(=> (member$a ?v2 (lset$a ?v0 ))(fun_app$d ?v1 ?v2 )))(= (fun_app$i (ltakeWhile$a ?v1 )?v0 )?v0 )):pattern ((fun_app$i (ltakeWhile$a ?v1 )?v0 )))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (fun_app$h (ltakeWhile$ ?v1 )?v2 )))(and (member$ ?v0 (lset$ ?v2 ))(fun_app$f ?v1 ?v0 )))):named a31 ))
(assert (! (forall ((?v0 B$ )(?v1 B_bool_fun$ )(?v2 B_llist$ ))(=> (member$a ?v0 (lset$a (fun_app$i (ltakeWhile$a ?v1 )?v2 )))(and (member$a ?v0 (lset$a ?v2 ))(fun_app$d ?v1 ?v0 )))):named a32 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(! (= (ldropWhile$ ?v0 ?v1 )(ldrop$ (llength$ (fun_app$h (ltakeWhile$ ?v0 )?v1 ))?v1 )):pattern ((ldropWhile$ ?v0 ?v1 )))):named a33 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_llist$ ))(! (= (ldropWhile$a ?v0 ?v1 )(ldrop$a (llength$a (fun_app$i (ltakeWhile$a ?v0 )?v1 ))?v1 )):pattern ((ldropWhile$a ?v0 ?v1 )))):named a34 ))
(assert (! (= (llist_all2$c uu$ )uua$ ):named a35 ))
(assert (! (= (llist_all2$a uub$ )uuc$ ):named a36 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a37 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a38 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a39 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a40 ))
(check-sat )
;(get-unsat-core )
