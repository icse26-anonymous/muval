;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun y$ ()A_llist_set$ )
(declare-fun bot$ ()A_llist_set$ )
(declare-fun ord$ (B$ B$ )Bool )
(declare-fun bot$a ()B$ )
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (member$ (lCons$ ?v0 ?v1 )y$ )thesis$ )):named a1 ))
(assert (! (not (= y$ bot$ )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$ ?v0 y$ )(not (fun_app$ (fun_app$a lprefix$ ?v0 )lNil$ )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (chain$ lprefix$ y$ ):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$ (fun_app$a lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v3 ))):pattern ((fun_app$ (fun_app$a lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a6 ))
(assert (! (forall ((?v0 B$ ))(ord$ bot$a ?v0 )):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (= ?v0 lNil$ ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(forall ((?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))false )))false )):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(not (= lNil$ (lCons$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ (fun_app$a lprefix$ (lCons$ ?v0 ?v1 ))?v2 )(exists ((?v3 A_llist$ ))(and (= ?v2 (lCons$ ?v0 ?v3 ))(fun_app$ (fun_app$a lprefix$ ?v1 )?v3 ))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A$ ))(=> (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ (lCons$ ?v2 ?v0 ))(lCons$ ?v2 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v0 )):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v0 )):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (lmember$ ?v0 (lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$ ?v0 ?v2 ))):pattern ((lmember$ ?v0 (lCons$ ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (fun_app$a lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$ (fun_app$a lprefix$ lNil$ )?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_llist$ ?v0 lNil$ )):named a18 ))
(check-sat )
;(get-unsat-core )
