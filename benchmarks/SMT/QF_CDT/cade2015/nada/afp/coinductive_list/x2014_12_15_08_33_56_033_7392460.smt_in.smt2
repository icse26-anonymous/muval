;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_list_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_list_fun$ 0 )
(declare-sort A_list_a_fun$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-sort A_list_a_llist_fun$ 0 )
(declare-sort A_llist_a_list_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_list_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_list_llist_fun$ 0 )
(declare-sort A_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_fun$ 0 )
(declare-sort A_list_llist_a_list_llist_fun$ 0 )
(declare-sort A_list_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_a_list_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_llist_fun$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-sort A_list_list$ 0)
(declare-fun nil$a ()A_list_list$)
(declare-fun hd$a (A_list_list$)A_list$)
(declare-fun tl$a (A_list_list$)A_list_list$)
(declare-fun cons$a (A_list$ A_list_list$ )A_list_list$)
(declare-sort A_list_llist$ 0)
(declare-sort A_llist_llist_llist$ 0)
(declare-sort A_list_llist_llist$ 0)
(declare-sort A_llist_llist_llist_llist$ 0)
(declare-fun lNil$b ()A_list_llist$)
(declare-fun lhd$b (A_list_llist$)A_list$)
(declare-fun ltl$b (A_list_llist$)A_list_llist$)
(declare-fun lCons$b (A_list$ A_list_llist$ )A_list_llist$)
(declare-fun lNil$c ()A_llist_llist_llist$)
(declare-fun lhd$c (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$c (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$c (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-fun lNil$d ()A_list_llist_llist$)
(declare-fun lhd$d (A_list_llist_llist$)A_list_llist$)
(declare-fun ltl$d (A_list_llist_llist$)A_list_llist_llist$)
(declare-fun lCons$d (A_list_llist$ A_list_llist_llist$ )A_list_llist_llist$)
(declare-fun lNil$e ()A_llist_llist_llist_llist$)
(declare-fun lhd$e (A_llist_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun ltl$e (A_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun lCons$e (A_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$)
(declare-sort A_llist_list$ 0)
(declare-sort A_llist_llist_list$ 0)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun nil$b ()A_llist_list$)
(declare-fun hd$b (A_llist_list$)A_llist$)
(declare-fun tl$b (A_llist_list$)A_llist_list$)
(declare-fun cons$b (A_llist$ A_llist_list$ )A_llist_list$)
(declare-fun nil$c ()A_llist_llist_list$)
(declare-fun hd$c (A_llist_llist_list$)A_llist_llist$)
(declare-fun tl$c (A_llist_llist_list$)A_llist_llist_list$)
(declare-fun cons$c (A_llist_llist$ A_llist_llist_list$ )A_llist_llist_list$)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun map$ (A_a_fun$ )A_list_a_list_fun$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun lmap$ (A_llist_a_list_fun$ )A_llist_llist_a_list_llist_fun$ )
(declare-fun lset$ (A_llist_llist$ )A_llist_set$ )
(declare-fun map$a (A_llist_a_fun$ A_llist_list$ )A_list$ )
(declare-fun map$b (A_list_a_fun$ A_list_list$ )A_list$ )
(declare-fun map$c (A_a_list_fun$ A_list$ )A_list_list$ )
(declare-fun map$d (A_list_a_list_fun$ A_list_list$ )A_list_list$ )
(declare-fun map$e (A_llist_a_list_fun$ A_llist_list$ )A_list_list$ )
(declare-fun map$f (A_a_llist_fun$ A_list$ )A_llist_list$ )
(declare-fun map$g (A_list_a_llist_fun$ A_list_list$ )A_llist_list$ )
(declare-fun map$h (A_llist_a_llist_fun$ A_llist_list$ )A_llist_list$ )
(declare-fun map$i (A_llist_a_llist_llist_fun$ A_llist_list$ )A_llist_llist_list$ )
(declare-fun ldrop$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun lmap$a (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lmap$b (A_llist_a_llist_fun$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun lmap$c (A_llist_llist_a_list_llist_fun$ A_llist_llist_llist$ )A_list_llist_llist$ )
(declare-fun lmap$d (A_llist_a_fun$ )A_llist_llist_a_llist_fun$ )
(declare-fun lmap$e (A_llist_llist_a_llist_fun$ A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lmap$f (A_list_a_fun$ )A_list_llist_a_llist_fun$ )
(declare-fun lmap$g (A_list_llist_a_llist_fun$ A_list_llist_llist$ )A_llist_llist$ )
(declare-fun lmap$h (A_a_llist_fun$ )A_llist_a_llist_llist_fun$ )
(declare-fun lmap$i (A_llist_a_llist_llist_fun$ )A_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun lmap$j (A_a_list_fun$ )A_llist_a_list_llist_fun$ )
(declare-fun lmap$k (A_llist_a_list_llist_fun$ A_llist_llist$ )A_list_llist_llist$ )
(declare-fun lmap$l (A_llist_llist_a_llist_llist_fun$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lmap$m (A_list_a_llist_fun$ )A_list_llist_a_llist_llist_fun$ )
(declare-fun lmap$n (A_list_llist_a_llist_llist_fun$ A_list_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lmap$o (A_list_a_list_fun$ )A_list_llist_a_list_llist_fun$ )
(declare-fun lmap$p (A_list_llist_a_list_llist_fun$ A_list_llist_llist$ )A_list_llist_llist$ )
(declare-fun lmap$q (A_llist_llist_a_llist_llist_llist_fun$ A_llist_llist_llist$ )A_llist_llist_llist_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun lset$b (A_list_llist$ )A_list_set$ )
(declare-fun concat$ (A_list_list$ )A_list$ )
(declare-fun ldrop$a (Enat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun ldrop$b (Enat$ A_list_llist$ )A_list_llist$ )
(declare-fun ldropn$ (Nat$ A_list_llist$ )A_list_llist$ )
(declare-fun lnull$a (A_list_llist$ )Bool )
(declare-fun lnull$b (A_llist_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_a_list_fun$ A_llist$ )A_list$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun ldropn$a (Nat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun ldropn$b (Nat$ )A_llist_a_llist_fun$ )
(declare-fun ldropn$c (Nat$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lfinite$ (A_llist_llist$ )Bool )
(declare-fun list_of$ ()A_llist_a_list_fun$ )
(declare-fun llength$ (A_llist_llist$ )Enat$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun member$b (A_list$ A_list_set$ )Bool )
(declare-fun fun_app$a (A_llist_llist_a_list_llist_fun$ A_llist_llist$ )A_list_llist$ )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$c (A_llist_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun fun_app$d (A_llist_llist_a_llist_fun$ A_llist_llist$ )A_llist$ )
(declare-fun fun_app$e (A_list_llist_a_llist_fun$ A_list_llist$ )A_llist$ )
(declare-fun fun_app$f (A_llist_a_llist_llist_fun$ A_llist$ )A_llist_llist$ )
(declare-fun fun_app$g (A_llist_llist_a_llist_llist_llist_fun$ A_llist_llist$ )A_llist_llist_llist$ )
(declare-fun fun_app$h (A_llist_a_list_llist_fun$ A_llist$ )A_list_llist$ )
(declare-fun fun_app$i (A_list_llist_a_llist_llist_fun$ A_list_llist$ )A_llist_llist$ )
(declare-fun fun_app$j (A_list_llist_a_list_llist_fun$ A_list_llist$ )A_list_llist$ )
(declare-fun fun_app$k (A_a_fun$ A$ )A$ )
(declare-fun fun_app$l (A_list_a_fun$ A_list$ )A$ )
(declare-fun fun_app$m (A_a_llist_fun$ A$ )A_llist$ )
(declare-fun fun_app$n (A_a_list_fun$ A$ )A_list$ )
(declare-fun fun_app$o (A_list_a_list_fun$ A_list$ )A_list$ )
(declare-fun fun_app$p (A_llist_a_fun$ A_llist$ )A$ )
(declare-fun fun_app$q (A_list_a_llist_fun$ A_list$ )A_llist$ )
(declare-fun iterates$ (A_list_a_list_fun$ A_list$ )A_list_llist$ )
(declare-fun lconcat$a (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lconcat$b (A_list_llist_llist$ )A_list_llist$ )
(declare-fun lconcat$c (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun lfinite$b (A_list_llist$ )Bool )
(declare-fun lfinite$c (A_llist_llist_llist$ )Bool )
(declare-fun list_of$a (A_list_llist$ )A_list_list$ )
(declare-fun list_of$b (A_llist_llist$ )A_llist_list$ )
(declare-fun list_of$c (A_llist_llist_llist$ )A_llist_llist_list$ )
(declare-fun llength$a (A_list_llist$ )Enat$ )
(declare-fun llength$b (A_llist$ )Enat$ )
(declare-fun llist_of$ (A_llist_list$ )A_llist_llist$ )
(declare-fun iterates$a (A_a_fun$ )A_a_llist_fun$ )
(declare-fun llist_of$a (A_list$ )A_llist$ )
(declare-fun llist_of$b (A_list_list$ )A_list_llist$ )
(declare-fun lstrict_prefix$ (A_llist_llist$ A_llist_llist$ )Bool )
(declare-fun lstrict_prefix$a (A_list_llist$ A_list_llist$ )Bool )
(declare-fun lstrict_prefix$b (A_llist$ A_llist$ )Bool )
(declare-fun lstrict_prefix$c (A_llist_llist_llist$ A_llist_llist_llist$ )Bool )
(assert (! (not (= (fun_app$ list_of$ (lconcat$ xss$ ))(concat$ (list_of$a (fun_app$a (lmap$ list_of$ )xss$ ))))):named a0 ))
(assert (! (lfinite$ xss$ ):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$ ?v0 (lset$ xss$ ))(lfinite$a ?v0 ))):named a2 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist_llist$ ))(= (fun_app$b (lmap$a ?v0 )(lconcat$ ?v1 ))(lconcat$ (fun_app$c (lmap$b (lmap$a ?v0 ))?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_a_list_fun$ )(?v1 A_llist_llist_llist$ ))(= (fun_app$a (lmap$ ?v0 )(lconcat$a ?v1 ))(lconcat$b (lmap$c (lmap$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist_llist$ ))(= (fun_app$d (lmap$d ?v0 )(lconcat$a ?v1 ))(lconcat$ (lmap$e (lmap$d ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_list_a_fun$ )(?v1 A_list_llist_llist$ ))(= (fun_app$e (lmap$f ?v0 )(lconcat$b ?v1 ))(lconcat$ (lmap$g (lmap$f ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist_llist$ ))(= (fun_app$f (lmap$h ?v0 )(lconcat$ ?v1 ))(lconcat$a (fun_app$g (lmap$i (lmap$h ?v0 ))?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_a_list_fun$ )(?v1 A_llist_llist$ ))(= (fun_app$h (lmap$j ?v0 )(lconcat$ ?v1 ))(lconcat$b (lmap$k (lmap$j ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist_llist$ ))(= (fun_app$c (lmap$b ?v0 )(lconcat$a ?v1 ))(lconcat$a (lmap$l (lmap$b ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_list_a_llist_fun$ )(?v1 A_list_llist_llist$ ))(= (fun_app$i (lmap$m ?v0 )(lconcat$b ?v1 ))(lconcat$a (lmap$n (lmap$m ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_llist_llist$ ))(= (fun_app$j (lmap$o ?v0 )(lconcat$b ?v1 ))(lconcat$b (lmap$p (lmap$o ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_llist_a_llist_llist_fun$ )(?v1 A_llist_llist_llist$ ))(= (fun_app$g (lmap$i ?v0 )(lconcat$a ?v1 ))(lconcat$c (lmap$q (lmap$i ?v0 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$a (fun_app$b (lmap$a ?v0 )?v1 ))(lfinite$a ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$f (lmap$h ?v0 )?v1 ))(lfinite$a ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (lfinite$a (fun_app$d (lmap$d ?v0 )?v1 ))(lfinite$ ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist$ ))(= (lfinite$ (fun_app$c (lmap$b ?v0 )?v1 ))(lfinite$ ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_llist_a_list_fun$ )(?v1 A_llist_llist$ ))(= (lfinite$b (fun_app$a (lmap$ ?v0 )?v1 ))(lfinite$ ?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_list_a_fun$ )(?v1 A_list_llist$ ))(= (lfinite$a (fun_app$e (lmap$f ?v0 )?v1 ))(lfinite$b ?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_a_list_fun$ )(?v1 A_llist$ ))(= (lfinite$b (fun_app$h (lmap$j ?v0 )?v1 ))(lfinite$a ?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_list_a_llist_fun$ )(?v1 A_list_llist$ ))(= (lfinite$ (fun_app$i (lmap$m ?v0 )?v1 ))(lfinite$b ?v1 ))):named a20 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_llist$ ))(= (lfinite$b (fun_app$j (lmap$o ?v0 )?v1 ))(lfinite$b ?v1 ))):named a21 ))
(assert (! (forall ((?v0 A_llist_a_llist_llist_fun$ )(?v1 A_llist_llist$ ))(= (lfinite$c (fun_app$g (lmap$i ?v0 )?v1 ))(lfinite$ ?v1 ))):named a22 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_list_fun$ )(?v3 A_llist_a_list_fun$ ))(=> (and (forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$a (lmap$ ?v2 )?v0 )(fun_app$a (lmap$ ?v3 )?v1 )))(= ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$a ?v4 (lset$a ?v0 ))(and (member$a ?v5 (lset$a ?v1 ))(= (fun_app$k ?v2 ?v4 )(fun_app$k ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$b (lmap$a ?v2 )?v0 )(fun_app$b (lmap$a ?v3 )?v1 )))(= ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_list_llist$ )(?v1 A_list_llist$ )(?v2 A_list_a_fun$ )(?v3 A_list_a_fun$ ))(=> (and (forall ((?v4 A_list$ )(?v5 A_list$ ))(=> (and (member$b ?v4 (lset$b ?v0 ))(and (member$b ?v5 (lset$b ?v1 ))(= (fun_app$l ?v2 ?v4 )(fun_app$l ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$e (lmap$f ?v2 )?v0 )(fun_app$e (lmap$f ?v3 )?v1 )))(= ?v0 ?v1 ))):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_llist_fun$ )(?v3 A_a_llist_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$a ?v4 (lset$a ?v0 ))(and (member$a ?v5 (lset$a ?v1 ))(= (fun_app$m ?v2 ?v4 )(fun_app$m ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$f (lmap$h ?v2 )?v0 )(fun_app$f (lmap$h ?v3 )?v1 )))(= ?v0 ?v1 ))):named a26 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_list_fun$ )(?v3 A_a_list_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$a ?v4 (lset$a ?v0 ))(and (member$a ?v5 (lset$a ?v1 ))(= (fun_app$n ?v2 ?v4 )(fun_app$n ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$h (lmap$j ?v2 )?v0 )(fun_app$h (lmap$j ?v3 )?v1 )))(= ?v0 ?v1 ))):named a27 ))
(assert (! (forall ((?v0 A_list_llist$ )(?v1 A_list_llist$ )(?v2 A_list_a_list_fun$ )(?v3 A_list_a_list_fun$ ))(=> (and (forall ((?v4 A_list$ )(?v5 A_list$ ))(=> (and (member$b ?v4 (lset$b ?v0 ))(and (member$b ?v5 (lset$b ?v1 ))(= (fun_app$o ?v2 ?v4 )(fun_app$o ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$j (lmap$o ?v2 )?v0 )(fun_app$j (lmap$o ?v3 )?v1 )))(= ?v0 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_fun$ )(?v3 A_llist_a_fun$ ))(=> (and (forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$p ?v2 ?v4 )(fun_app$p ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$d (lmap$d ?v2 )?v0 )(fun_app$d (lmap$d ?v3 )?v1 )))(= ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$c (lmap$b ?v2 )?v0 )(fun_app$c (lmap$b ?v3 )?v1 )))(= ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 A_list_llist$ )(?v1 A_list_llist$ )(?v2 A_list_a_llist_fun$ )(?v3 A_list_a_llist_fun$ ))(=> (and (forall ((?v4 A_list$ )(?v5 A_list$ ))(=> (and (member$b ?v4 (lset$b ?v0 ))(and (member$b ?v5 (lset$b ?v1 ))(= (fun_app$q ?v2 ?v4 )(fun_app$q ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$i (lmap$m ?v2 )?v0 )(fun_app$i (lmap$m ?v3 )?v1 )))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_llist_fun$ )(?v3 A_llist_a_llist_llist_fun$ ))(=> (and (forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$f ?v2 ?v4 )(fun_app$f ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$g (lmap$i ?v2 )?v0 )(fun_app$g (lmap$i ?v3 )?v1 )))(= ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_a_list_fun$ )(?v2 A_llist_a_list_fun$ ))(=> (forall ((?v3 A_llist$ ))(=> (member$ ?v3 (lset$ ?v0 ))(= (fun_app$ ?v1 ?v3 )(fun_app$ ?v2 ?v3 ))))(= (fun_app$a (lmap$ ?v1 )?v0 )(fun_app$a (lmap$ ?v2 )?v0 )))):named a33 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$a ?v3 (lset$a ?v0 ))(= (fun_app$k ?v1 ?v3 )(fun_app$k ?v2 ?v3 ))))(= (fun_app$b (lmap$a ?v1 )?v0 )(fun_app$b (lmap$a ?v2 )?v0 )))):named a34 ))
(assert (! (forall ((?v0 A_list_llist$ )(?v1 A_list_a_fun$ )(?v2 A_list_a_fun$ ))(=> (forall ((?v3 A_list$ ))(=> (member$b ?v3 (lset$b ?v0 ))(= (fun_app$l ?v1 ?v3 )(fun_app$l ?v2 ?v3 ))))(= (fun_app$e (lmap$f ?v1 )?v0 )(fun_app$e (lmap$f ?v2 )?v0 )))):named a35 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_fun$ )(?v2 A_a_llist_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$a ?v3 (lset$a ?v0 ))(= (fun_app$m ?v1 ?v3 )(fun_app$m ?v2 ?v3 ))))(= (fun_app$f (lmap$h ?v1 )?v0 )(fun_app$f (lmap$h ?v2 )?v0 )))):named a36 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_list_fun$ )(?v2 A_a_list_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$a ?v3 (lset$a ?v0 ))(= (fun_app$n ?v1 ?v3 )(fun_app$n ?v2 ?v3 ))))(= (fun_app$h (lmap$j ?v1 )?v0 )(fun_app$h (lmap$j ?v2 )?v0 )))):named a37 ))
(assert (! (forall ((?v0 A_list_llist$ )(?v1 A_list_a_list_fun$ )(?v2 A_list_a_list_fun$ ))(=> (forall ((?v3 A_list$ ))(=> (member$b ?v3 (lset$b ?v0 ))(= (fun_app$o ?v1 ?v3 )(fun_app$o ?v2 ?v3 ))))(= (fun_app$j (lmap$o ?v1 )?v0 )(fun_app$j (lmap$o ?v2 )?v0 )))):named a38 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_a_fun$ )(?v2 A_llist_a_fun$ ))(=> (forall ((?v3 A_llist$ ))(=> (member$ ?v3 (lset$ ?v0 ))(= (fun_app$p ?v1 ?v3 )(fun_app$p ?v2 ?v3 ))))(= (fun_app$d (lmap$d ?v1 )?v0 )(fun_app$d (lmap$d ?v2 )?v0 )))):named a39 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_a_llist_fun$ ))(=> (forall ((?v3 A_llist$ ))(=> (member$ ?v3 (lset$ ?v0 ))(= (fun_app$b ?v1 ?v3 )(fun_app$b ?v2 ?v3 ))))(= (fun_app$c (lmap$b ?v1 )?v0 )(fun_app$c (lmap$b ?v2 )?v0 )))):named a40 ))
(assert (! (forall ((?v0 A_list_llist$ )(?v1 A_list_a_llist_fun$ )(?v2 A_list_a_llist_fun$ ))(=> (forall ((?v3 A_list$ ))(=> (member$b ?v3 (lset$b ?v0 ))(= (fun_app$q ?v1 ?v3 )(fun_app$q ?v2 ?v3 ))))(= (fun_app$i (lmap$m ?v1 )?v0 )(fun_app$i (lmap$m ?v2 )?v0 )))):named a41 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_a_llist_llist_fun$ )(?v2 A_llist_a_llist_llist_fun$ ))(=> (forall ((?v3 A_llist$ ))(=> (member$ ?v3 (lset$ ?v0 ))(= (fun_app$f ?v1 ?v3 )(fun_app$f ?v2 ?v3 ))))(= (fun_app$g (lmap$i ?v1 )?v0 )(fun_app$g (lmap$i ?v2 )?v0 )))):named a42 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_list_fun$ )(?v3 A_llist_a_list_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (fun_app$a (lmap$ ?v2 )?v0 )(fun_app$a (lmap$ ?v3 )?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$a ?v4 (lset$a ?v1 ))(= (fun_app$k ?v2 ?v4 )(fun_app$k ?v3 ?v4 )))))(= (fun_app$b (lmap$a ?v2 )?v0 )(fun_app$b (lmap$a ?v3 )?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_list_llist$ )(?v1 A_list_llist$ )(?v2 A_list_a_fun$ )(?v3 A_list_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_list$ ))(=> (member$b ?v4 (lset$b ?v1 ))(= (fun_app$l ?v2 ?v4 )(fun_app$l ?v3 ?v4 )))))(= (fun_app$e (lmap$f ?v2 )?v0 )(fun_app$e (lmap$f ?v3 )?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_llist_fun$ )(?v3 A_a_llist_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$a ?v4 (lset$a ?v1 ))(= (fun_app$m ?v2 ?v4 )(fun_app$m ?v3 ?v4 )))))(= (fun_app$f (lmap$h ?v2 )?v0 )(fun_app$f (lmap$h ?v3 )?v1 )))):named a46 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_list_fun$ )(?v3 A_a_list_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$a ?v4 (lset$a ?v1 ))(= (fun_app$n ?v2 ?v4 )(fun_app$n ?v3 ?v4 )))))(= (fun_app$h (lmap$j ?v2 )?v0 )(fun_app$h (lmap$j ?v3 )?v1 )))):named a47 ))
(assert (! (forall ((?v0 A_list_llist$ )(?v1 A_list_llist$ )(?v2 A_list_a_list_fun$ )(?v3 A_list_a_list_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_list$ ))(=> (member$b ?v4 (lset$b ?v1 ))(= (fun_app$o ?v2 ?v4 )(fun_app$o ?v3 ?v4 )))))(= (fun_app$j (lmap$o ?v2 )?v0 )(fun_app$j (lmap$o ?v3 )?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_fun$ )(?v3 A_llist_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$p ?v2 ?v4 )(fun_app$p ?v3 ?v4 )))))(= (fun_app$d (lmap$d ?v2 )?v0 )(fun_app$d (lmap$d ?v3 )?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v4 )))))(= (fun_app$c (lmap$b ?v2 )?v0 )(fun_app$c (lmap$b ?v3 )?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_list_llist$ )(?v1 A_list_llist$ )(?v2 A_list_a_llist_fun$ )(?v3 A_list_a_llist_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_list$ ))(=> (member$b ?v4 (lset$b ?v1 ))(= (fun_app$q ?v2 ?v4 )(fun_app$q ?v3 ?v4 )))))(= (fun_app$i (lmap$m ?v2 )?v0 )(fun_app$i (lmap$m ?v3 )?v1 )))):named a51 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_llist_fun$ )(?v3 A_llist_a_llist_llist_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$f ?v2 ?v4 )(fun_app$f ?v3 ?v4 )))))(= (fun_app$g (lmap$i ?v2 )?v0 )(fun_app$g (lmap$i ?v3 )?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_list_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$a (fun_app$a (lmap$ ?v2 )?v0 )(fun_app$a (lmap$ ?v2 )?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (lstrict_prefix$b ?v0 ?v1 )(lstrict_prefix$b (fun_app$b (lmap$a ?v2 )?v0 )(fun_app$b (lmap$a ?v2 )?v1 )))):named a54 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_llist_fun$ ))(=> (lstrict_prefix$b ?v0 ?v1 )(lstrict_prefix$ (fun_app$f (lmap$h ?v2 )?v0 )(fun_app$f (lmap$h ?v2 )?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_list_fun$ ))(=> (lstrict_prefix$b ?v0 ?v1 )(lstrict_prefix$a (fun_app$h (lmap$j ?v2 )?v0 )(fun_app$h (lmap$j ?v2 )?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_list_llist$ )(?v1 A_list_llist$ )(?v2 A_list_a_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$b (fun_app$e (lmap$f ?v2 )?v0 )(fun_app$e (lmap$f ?v2 )?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$ (fun_app$c (lmap$b ?v2 )?v0 )(fun_app$c (lmap$b ?v2 )?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_list_llist$ )(?v1 A_list_llist$ )(?v2 A_list_a_llist_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$ (fun_app$i (lmap$m ?v2 )?v0 )(fun_app$i (lmap$m ?v2 )?v1 )))):named a59 ))
(assert (! (forall ((?v0 A_list_llist$ )(?v1 A_list_llist$ )(?v2 A_list_a_list_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$a (fun_app$j (lmap$o ?v2 )?v0 )(fun_app$j (lmap$o ?v2 )?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$b (fun_app$d (lmap$d ?v2 )?v0 )(fun_app$d (lmap$d ?v2 )?v1 )))):named a61 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_llist_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$c (fun_app$g (lmap$i ?v2 )?v0 )(fun_app$g (lmap$i ?v2 )?v1 )))):named a62 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_fun$ ))(=> (lfinite$a ?v0 )(= (fun_app$ list_of$ (fun_app$b (lmap$a ?v1 )?v0 ))(fun_app$o (map$ ?v1 )(fun_app$ list_of$ ?v0 ))))):named a63 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_a_fun$ ))(=> (lfinite$ ?v0 )(= (fun_app$ list_of$ (fun_app$d (lmap$d ?v1 )?v0 ))(map$a ?v1 (list_of$b ?v0 ))))):named a64 ))
(assert (! (forall ((?v0 A_list_llist$ )(?v1 A_list_a_fun$ ))(=> (lfinite$b ?v0 )(= (fun_app$ list_of$ (fun_app$e (lmap$f ?v1 )?v0 ))(map$b ?v1 (list_of$a ?v0 ))))):named a65 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_list_fun$ ))(=> (lfinite$a ?v0 )(= (list_of$a (fun_app$h (lmap$j ?v1 )?v0 ))(map$c ?v1 (fun_app$ list_of$ ?v0 ))))):named a66 ))
(assert (! (forall ((?v0 A_list_llist$ )(?v1 A_list_a_list_fun$ ))(=> (lfinite$b ?v0 )(= (list_of$a (fun_app$j (lmap$o ?v1 )?v0 ))(map$d ?v1 (list_of$a ?v0 ))))):named a67 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_a_list_fun$ ))(=> (lfinite$ ?v0 )(= (list_of$a (fun_app$a (lmap$ ?v1 )?v0 ))(map$e ?v1 (list_of$b ?v0 ))))):named a68 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_fun$ ))(=> (lfinite$a ?v0 )(= (list_of$b (fun_app$f (lmap$h ?v1 )?v0 ))(map$f ?v1 (fun_app$ list_of$ ?v0 ))))):named a69 ))
(assert (! (forall ((?v0 A_list_llist$ )(?v1 A_list_a_llist_fun$ ))(=> (lfinite$b ?v0 )(= (list_of$b (fun_app$i (lmap$m ?v1 )?v0 ))(map$g ?v1 (list_of$a ?v0 ))))):named a70 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_a_llist_fun$ ))(=> (lfinite$ ?v0 )(= (list_of$b (fun_app$c (lmap$b ?v1 )?v0 ))(map$h ?v1 (list_of$b ?v0 ))))):named a71 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_a_llist_llist_fun$ ))(=> (lfinite$ ?v0 )(= (list_of$c (fun_app$g (lmap$i ?v1 )?v0 ))(map$i ?v1 (list_of$b ?v0 ))))):named a72 ))
(assert (! (forall ((?v0 A_llist_list$ ))(= (list_of$b (llist_of$ ?v0 ))?v0 )):named a73 ))
(assert (! (forall ((?v0 A_list$ ))(= (fun_app$ list_of$ (llist_of$a ?v0 ))?v0 )):named a74 ))
(assert (! (forall ((?v0 A_list_list$ ))(= (list_of$a (llist_of$b ?v0 ))?v0 )):named a75 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_a_list_fun$ )(?v2 A_llist_llist$ ))(= (ldropn$ ?v0 (fun_app$a (lmap$ ?v1 )?v2 ))(fun_app$a (lmap$ ?v1 )(ldropn$a ?v0 ?v2 )))):named a76 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$b (ldropn$b ?v0 )(fun_app$b (lmap$a ?v1 )?v2 ))(fun_app$b (lmap$a ?v1 )(fun_app$b (ldropn$b ?v0 )?v2 )))):named a77 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_a_fun$ )(?v2 A_llist_llist$ ))(= (fun_app$b (ldropn$b ?v0 )(fun_app$d (lmap$d ?v1 )?v2 ))(fun_app$d (lmap$d ?v1 )(ldropn$a ?v0 ?v2 )))):named a78 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_a_fun$ )(?v2 A_list_llist$ ))(= (fun_app$b (ldropn$b ?v0 )(fun_app$e (lmap$f ?v1 )?v2 ))(fun_app$e (lmap$f ?v1 )(ldropn$ ?v0 ?v2 )))):named a79 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_llist_fun$ )(?v2 A_llist$ ))(= (ldropn$a ?v0 (fun_app$f (lmap$h ?v1 )?v2 ))(fun_app$f (lmap$h ?v1 )(fun_app$b (ldropn$b ?v0 )?v2 )))):named a80 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_list_fun$ )(?v2 A_llist$ ))(= (ldropn$ ?v0 (fun_app$h (lmap$j ?v1 )?v2 ))(fun_app$h (lmap$j ?v1 )(fun_app$b (ldropn$b ?v0 )?v2 )))):named a81 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_a_llist_fun$ )(?v2 A_list_llist$ ))(= (ldropn$a ?v0 (fun_app$i (lmap$m ?v1 )?v2 ))(fun_app$i (lmap$m ?v1 )(ldropn$ ?v0 ?v2 )))):named a82 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_llist$ ))(= (ldropn$a ?v0 (fun_app$c (lmap$b ?v1 )?v2 ))(fun_app$c (lmap$b ?v1 )(ldropn$a ?v0 ?v2 )))):named a83 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_a_list_fun$ )(?v2 A_list_llist$ ))(= (ldropn$ ?v0 (fun_app$j (lmap$o ?v1 )?v2 ))(fun_app$j (lmap$o ?v1 )(ldropn$ ?v0 ?v2 )))):named a84 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_a_llist_llist_fun$ )(?v2 A_llist_llist$ ))(= (ldropn$c ?v0 (fun_app$g (lmap$i ?v1 )?v2 ))(fun_app$g (lmap$i ?v1 )(ldropn$a ?v0 ?v2 )))):named a85 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_a_fun$ )(?v2 A_llist_llist$ ))(= (fun_app$b (ldrop$ ?v0 )(fun_app$d (lmap$d ?v1 )?v2 ))(fun_app$d (lmap$d ?v1 )(ldrop$a ?v0 ?v2 )))):named a86 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_list_a_llist_fun$ )(?v2 A_list_llist$ ))(= (ldrop$a ?v0 (fun_app$i (lmap$m ?v1 )?v2 ))(fun_app$i (lmap$m ?v1 )(ldrop$b ?v0 ?v2 )))):named a87 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_llist$ ))(= (ldrop$a ?v0 (fun_app$c (lmap$b ?v1 )?v2 ))(fun_app$c (lmap$b ?v1 )(ldrop$a ?v0 ?v2 )))):named a88 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_list_a_list_fun$ )(?v2 A_list_llist$ ))(= (ldrop$b ?v0 (fun_app$j (lmap$o ?v1 )?v2 ))(fun_app$j (lmap$o ?v1 )(ldrop$b ?v0 ?v2 )))):named a89 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_list_a_fun$ )(?v2 A_list_llist$ ))(= (fun_app$b (ldrop$ ?v0 )(fun_app$e (lmap$f ?v1 )?v2 ))(fun_app$e (lmap$f ?v1 )(ldrop$b ?v0 ?v2 )))):named a90 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_llist_fun$ )(?v2 A_llist$ ))(= (ldrop$a ?v0 (fun_app$f (lmap$h ?v1 )?v2 ))(fun_app$f (lmap$h ?v1 )(fun_app$b (ldrop$ ?v0 )?v2 )))):named a91 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_list_fun$ )(?v2 A_llist$ ))(= (ldrop$b ?v0 (fun_app$h (lmap$j ?v1 )?v2 ))(fun_app$h (lmap$j ?v1 )(fun_app$b (ldrop$ ?v0 )?v2 )))):named a92 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$b (ldrop$ ?v0 )(fun_app$b (lmap$a ?v1 )?v2 ))(fun_app$b (lmap$a ?v1 )(fun_app$b (ldrop$ ?v0 )?v2 )))):named a93 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_a_list_fun$ )(?v2 A_llist_llist$ ))(= (ldrop$b ?v0 (fun_app$a (lmap$ ?v1 )?v2 ))(fun_app$a (lmap$ ?v1 )(ldrop$a ?v0 ?v2 )))):named a94 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list$ ))(= (fun_app$j (lmap$o ?v0 )(iterates$ ?v0 ?v1 ))(iterates$ ?v0 (fun_app$o ?v0 ?v1 )))):named a95 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$b (lmap$a ?v0 )(fun_app$m (iterates$a ?v0 )?v1 ))(fun_app$m (iterates$a ?v0 )(fun_app$k ?v0 ?v1 )))):named a96 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$b (lmap$a ?v0 )?v1 ))(lnull$ ?v1 ))):named a97 ))
(assert (! (forall ((?v0 A_list_a_fun$ )(?v1 A_list_llist$ ))(= (lnull$ (fun_app$e (lmap$f ?v0 )?v1 ))(lnull$a ?v1 ))):named a98 ))
(assert (! (forall ((?v0 A_a_list_fun$ )(?v1 A_llist$ ))(= (lnull$a (fun_app$h (lmap$j ?v0 )?v1 ))(lnull$ ?v1 ))):named a99 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_llist$ ))(= (lnull$a (fun_app$j (lmap$o ?v0 )?v1 ))(lnull$a ?v1 ))):named a100 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (lnull$b (fun_app$f (lmap$h ?v0 )?v1 ))(lnull$ ?v1 ))):named a101 ))
(assert (! (forall ((?v0 A_list_a_llist_fun$ )(?v1 A_list_llist$ ))(= (lnull$b (fun_app$i (lmap$m ?v0 )?v1 ))(lnull$a ?v1 ))):named a102 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist$ ))(= (lnull$b (fun_app$c (lmap$b ?v0 )?v1 ))(lnull$b ?v1 ))):named a103 ))
(assert (! (forall ((?v0 A_llist_a_list_fun$ )(?v1 A_llist_llist$ ))(= (lnull$a (fun_app$a (lmap$ ?v0 )?v1 ))(lnull$b ?v1 ))):named a104 ))
(assert (! (forall ((?v0 A_list_a_llist_fun$ )(?v1 A_list_llist$ ))(= (llength$ (fun_app$i (lmap$m ?v0 )?v1 ))(llength$a ?v1 ))):named a105 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist$ ))(= (llength$ (fun_app$c (lmap$b ?v0 )?v1 ))(llength$ ?v1 ))):named a106 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_llist$ ))(= (llength$a (fun_app$j (lmap$o ?v0 )?v1 ))(llength$a ?v1 ))):named a107 ))
(assert (! (forall ((?v0 A_list_a_fun$ )(?v1 A_list_llist$ ))(= (llength$b (fun_app$e (lmap$f ?v0 )?v1 ))(llength$a ?v1 ))):named a108 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (llength$ (fun_app$f (lmap$h ?v0 )?v1 ))(llength$b ?v1 ))):named a109 ))
(assert (! (forall ((?v0 A_a_list_fun$ )(?v1 A_llist$ ))(= (llength$a (fun_app$h (lmap$j ?v0 )?v1 ))(llength$b ?v1 ))):named a110 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$b (fun_app$b (lmap$a ?v0 )?v1 ))(llength$b ?v1 ))):named a111 ))
(assert (! (forall ((?v0 A_llist_a_list_fun$ )(?v1 A_llist_llist$ ))(= (llength$a (fun_app$a (lmap$ ?v0 )?v1 ))(llength$ ?v1 ))):named a112 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (= (llist_of$b ?v0 )(llist_of$b ?v1 ))(= ?v0 ?v1 ))):named a113 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a114 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_llist$ ))(= (lfinite$b (ldropn$ ?v0 ?v1 ))(lfinite$b ?v1 ))):named a115 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_llist$ ))(= (lfinite$ (ldropn$a ?v0 ?v1 ))(lfinite$ ?v1 ))):named a116 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$a (fun_app$b (ldropn$b ?v0 )?v1 ))(lfinite$a ?v1 ))):named a117 ))
(check-sat )
;(get-unsat-core )
