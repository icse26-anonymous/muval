;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun m$ ()Nat$ )
(declare-fun n$ ()Nat$ )
(declare-fun p$ (A$ )Bool )
(declare-fun ma$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lsorted$ (A_a_bool_fun_fun$ A_llist$ )Bool )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun ldistinct$ (A_llist$ )Bool )
(assert (! (not (not (p$ (lnth$ (ltl$ xsa$ )n$ )))):named a0 ))
(assert (! (not (p$ (lnth$ xsa$ (suc$ n$ )))):named a1 ))
(assert (! (less$ (enat$ n$ )(llength$ (ltl$ xsa$ ))):named a2 ))
(assert (! (less$ (enat$ (suc$ n$ ))(llength$ xsa$ )):named a3 ))
(assert (! (less_eq$ ma$ n$ ):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (less_eq$ (suc$ ma$ )?v0 )(less$ (enat$ ?v0 )(llength$ xsa$ )))(not (p$ (lnth$ xsa$ ?v0 ))))):named a5 ))
(assert (! (less_eq$ (suc$ ma$ )(suc$ n$ )):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (not (lnull$ ?v0 ))(= (lnth$ (ltl$ ?v0 )?v1 )(lnth$ ?v0 (suc$ ?v1 ))))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (ltl$ (iterates$ ?v0 ?v1 ))(iterates$ ?v0 (fun_app$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (ltl$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(=> (lsorted$ ?v0 ?v1 )(lsorted$ ?v0 (ltl$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (less_eq$ m$ ?v0 )(less$ (enat$ ?v0 )(llength$ xs$ )))(not (p$ (lnth$ xs$ ?v0 ))))):named a11 ))
(check-sat )
;(get-unsat-core )
