;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-sort A_llist_list$ 0)
(declare-fun nil$ ()A_llist_list$)
(declare-fun hd$ (A_llist_list$)A_llist$)
(declare-fun tl$ (A_llist_list$)A_llist_list$)
(declare-fun cons$ (A_llist$ A_llist_list$ )A_llist_list$)
(declare-sort A_llist_llist_llist$ 0)
(declare-fun lNil$b ()A_llist_llist_llist$)
(declare-fun lhd$b (A_llist_llist_llist$)A_llist_llist$)
(declare-fun ltl$b (A_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun lCons$b (A_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$)
(declare-sort A_list$ 0)
(declare-fun nil$a ()A_list$)
(declare-fun hd$a (A_list$)A$)
(declare-fun tl$a (A_list$)A_list$)
(declare-fun cons$a (A$ A_list$ )A_list$)
(declare-sort A_llist_llist_llist_llist$ 0)
(declare-fun lNil$c ()A_llist_llist_llist_llist$)
(declare-fun lhd$c (A_llist_llist_llist_llist$)A_llist_llist_llist$)
(declare-fun ltl$c (A_llist_llist_llist_llist$)A_llist_llist_llist_llist$)
(declare-fun lCons$c (A_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$)
(declare-fun m$ ()Nat$ )
(declare-fun n$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun n$a ()Nat$ )
(declare-fun n$b ()Nat$ )
(declare-fun na$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xss$ ()A_llist_list$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist_llist$ Nat$ )A_llist$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun size$ (A_llist_list$ )Nat$ )
(declare-fun xss$a ()A_llist_llist$ )
(declare-fun xss$b ()A_llist_llist$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun lnth$a (A_llist_llist_llist$ Nat$ )A_llist_llist$ )
(declare-fun lnth$b (A_llist$ Nat$ )A$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun size$a (A_list$ )Nat$ )
(declare-fun lappend$ (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lappend$a (A_llist_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lappend$b (A_llist$ A_llist$ )A_llist$ )
(declare-fun lconcat$a (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun llength$a (A_llist_llist$ )Enat$ )
(declare-fun llength$b (A_llist_llist_llist$ )Enat$ )
(declare-fun llist_of$ (A_llist_list$ )A_llist_llist$ )
(declare-fun llist_of$a (A_list$ )A_llist$ )
(assert (! (not (less$ (enat$ n$ )(llength$ (lnth$ (lappend$ (llist_of$ xss$ )(lCons$a (lCons$ x$ xs$ )xss$a ))(plus$ m$ (size$ xss$ )))))):named a0 ))
(assert (! (lnull$ (lconcat$ (llist_of$ xss$ ))):named a1 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (less$ (enat$ n$a )(llength$ (lconcat$ xss$b ))):named a5 ))
(assert (! (less$ (enat$ n$ )(llength$ (lnth$ (lCons$a xs$ xss$a )m$ ))):named a6 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (lappend$a (lCons$b ?v0 ?v1 )?v2 )(lCons$b ?v0 (lappend$a ?v1 ?v2 ))):pattern ((lappend$a (lCons$b ?v0 ?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(! (= (lappend$ (lCons$a ?v0 ?v1 )?v2 )(lCons$a ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$a ?v0 ?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$b (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$b ?v1 ?v2 ))):pattern ((lappend$b (lCons$ ?v0 ?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_list$ ))(= (llength$ (llist_of$a ?v0 ))(enat$ (size$a ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist_list$ ))(= (llength$a (llist_of$ ?v0 ))(enat$ (size$ ?v0 )))):named a13 ))
(assert (! (= xssa$ (lappend$ (llist_of$ xss$ )(lCons$a (lCons$ x$ xs$ )xss$a ))):named a14 ))
(assert (! (less$ (enat$ m$ )(llength$a (lCons$a xs$ xss$a ))):named a15 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(= (lappend$a (lappend$a ?v0 ?v1 )?v2 )(lappend$a ?v0 (lappend$a ?v1 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$b (lappend$b ?v0 ?v1 )?v2 )(lappend$b ?v0 (lappend$b ?v1 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(=> (less$ (enat$ ?v0 )(llength$b ?v1 ))(= (lnth$a (lappend$a ?v1 ?v2 )?v0 )(lnth$a ?v1 ?v0 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (lnth$b (lappend$b ?v1 ?v2 )?v0 )(lnth$b ?v1 ?v0 )))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (less$ (enat$ ?v0 )(llength$a ?v1 ))(= (lnth$ (lappend$ ?v1 ?v2 )?v0 )(lnth$ ?v1 ?v0 )))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ ))(! (= (lconcat$a (lCons$c ?v0 ?v1 ))(lappend$a ?v0 (lconcat$a ?v1 ))):pattern ((lCons$c ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lconcat$b (lCons$b ?v0 ?v1 ))(lappend$ ?v0 (lconcat$b ?v1 ))):pattern ((lCons$b ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lconcat$ (lCons$a ?v0 ?v1 ))(lappend$b ?v0 (lconcat$ ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a24 ))
(assert (! (= xs$a (lconcat$ (lCons$a xs$ xss$a ))):named a25 ))
(assert (! (= na$ (plus$ n$b n$ )):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(less$a ?v0 ?v2 ))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(less$a ?v1 ?v2 ))):named a28 ))
(assert (! (less$ (enat$ na$ )(llength$ (lconcat$ (lCons$a xs$ xss$a )))):named a29 ))
(check-sat )
;(get-unsat-core )
