;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-sort A_llist$ 0)
(declare-sort A_llist_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()A_llist_llist$)
(declare-fun lhd$a (A_llist_llist$)A_llist$)
(declare-fun ltl$a (A_llist_llist$)A_llist_llist$)
(declare-fun lCons$a (A_llist$ A_llist_llist$ )A_llist_llist$)
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun uua$ ()Nat_bool_fun$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun insert$ (Nat$ Nat_set$ )Nat_set$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun lfinite$ (A_llist_llist$ )Bool )
(declare-fun llength$ (A_llist_llist$ )Enat$ )
(declare-fun fun_app$a (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$b (Enat_enat_bool_fun_fun$ Enat$ )Enat_bool_fun$ )
(declare-fun fun_app$c (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun less_eq$a (Nat$ )Nat_bool_fun$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(less_eq$ (enat$ ?v0 )(llength$ xssa$ ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uua$ ?v0 )(exists ((?v1 Nat$ ))(and (= ?v0 (suc$ ?v1 ))(less$ (enat$ ?v1 )(llength$ xssa$ ))))):pattern ((fun_app$ uua$ ?v0 )))):named a1 ))
(assert (! (not (= (collect$ uu$ )(insert$ zero$ (collect$ uua$ )))):named a2 ))
(assert (! (lfinite$ xssa$ ):named a3 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (less_eq$ ?v3 ?v4 )(fun_app$a (fun_app$b ?v0 ?v3 )?v4 )))(=> (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )(fun_app$a (fun_app$b ?v0 ?v2 )?v1 )))(fun_app$a (fun_app$b ?v0 ?v2 )?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (fun_app$ (less_eq$a ?v3 )?v4 )(fun_app$ (fun_app$c ?v0 ?v3 )?v4 )))(=> (fun_app$ (fun_app$c ?v0 ?v1 )?v2 )(fun_app$ (fun_app$c ?v0 ?v2 )?v1 )))(fun_app$ (fun_app$c ?v0 ?v2 )?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ ))(! (= (less_eq$ (enat$ (suc$ ?v0 ))?v1 )(less$ (enat$ ?v0 )?v1 )):pattern ((less_eq$ (enat$ (suc$ ?v0 ))?v1 )))):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (forall ((?v2 Nat$ ))(=> (less$ ?v0 (enat$ ?v2 ))(less$ ?v1 (enat$ ?v2 ))))(less_eq$ ?v1 ?v0 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_set$ ))(= (member$ ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$ ?v2 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ ))(less_eq$ ?v0 ?v0 )):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$ (less_eq$a ?v0 )?v0 )):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a16 ))
(assert (! (lfinite$ xss$ ):named a17 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$ (less_eq$a zero$ )?v0 )):named a18 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (less_eq$a ?v0 )zero$ )(= ?v0 zero$ )):pattern ((less_eq$a ?v0 )))):named a19 ))
(check-sat )
;(get-unsat-core )
