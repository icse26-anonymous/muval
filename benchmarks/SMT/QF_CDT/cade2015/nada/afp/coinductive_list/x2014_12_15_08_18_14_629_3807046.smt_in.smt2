;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Enat$ )
(declare-fun n$a ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun size$ (Enat$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun zero$a ()Enat$ )
(declare-fun fun_app$ (Nat_a_fun$ Nat$ )A$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun the_enat$ (Enat$ )Nat$ )
(declare-fun size_enat$ (Enat$ )Nat$ )
(assert (! (not (= (lhd$ (ldrop$ (enat$ zero$ )xsa$ ))(fun_app$ (lnth$ xsa$ )(the_enat$ (enat$ zero$ ))))):named a0 ))
(assert (! (= n$ (enat$ n$a )):named a1 ))
(assert (! (less$ (enat$ zero$ )(llength$ xsa$ )):named a2 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= n$ (enat$ ?v0 ))false ))false ):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (the_enat$ (enat$ ?v0 ))?v0 ):pattern ((enat$ ?v0 )))):named a5 ))
(assert (! (less$ n$ (llength$ xs$ )):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (size_enat$ (enat$ ?v0 ))zero$ ):pattern ((enat$ ?v0 )))):named a7 ))
(assert (! (= zero$ zero$ ):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (size$ (enat$ ?v0 ))zero$ ):pattern ((enat$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (not (lnull$ ?v0 ))(= (fun_app$ (lnth$ ?v0 )zero$ )(lhd$ ?v0 ))):pattern ((lnth$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (not (lnull$ ?v0 ))(= (lhd$ ?v0 )(fun_app$ (lnth$ ?v0 )zero$ ))):pattern ((lhd$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a13 ))
(assert (! (forall ((?v0 Enat$ ))(= (= zero$a ?v0 )(= ?v0 zero$a ))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (lhd$ (iterates$ ?v0 ?v1 ))?v1 )):named a15 ))
(assert (! (forall ((?v0 Enat$ ))(= (less$ zero$a ?v0 )(not (= ?v0 zero$a )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ldrop$ zero$a ?v0 )?v0 )):named a17 ))
(check-sat )
;(get-unsat-core )
