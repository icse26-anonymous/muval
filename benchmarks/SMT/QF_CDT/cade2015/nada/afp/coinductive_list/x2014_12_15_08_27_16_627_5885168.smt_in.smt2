;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun max$ (A_a_bool_fun_fun$ A$ A$ )A$ )
(declare-fun min$ (A_a_bool_fun_fun$ A$ A$ )A$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun atMost$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun atLeast$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun less_eq$ ()A_a_bool_fun_fun$ )
(declare-fun lprefix$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun lsorted$ (A_a_bool_fun_fun$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun atLeastAtMost$ (A_a_bool_fun_fun$ A$ A$ )A_set$ )
(assert (! (not (fun_app$ (fun_app$a less_eq$ (lhd$ xsa$ ))(lhd$ (ltl$ xsa$ )))):named a0 ))
(assert (! (= (lhd$ xsa$ )(lhd$ ysa$ )):named a1 ))
(assert (! (fun_app$ (fun_app$a less_eq$ (lhd$ ysa$ ))(lhd$ (ltl$ ysa$ ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less_eq$ ?v1 )?v2 ))(fun_app$ (fun_app$a less_eq$ ?v0 )?v2 ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less_eq$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less_eq$ ?v0 )?v2 ))):named a4 ))
(assert (! (= (lhd$ (ltl$ xsa$ ))(lhd$ (ltl$ ysa$ ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (max$ less_eq$ ?v0 ?v1 )(ite (fun_app$ (fun_app$a less_eq$ ?v0 )?v1 )?v1 ?v0 )):pattern ((max$ less_eq$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (min$ less_eq$ ?v0 ?v1 )(ite (fun_app$ (fun_app$a less_eq$ ?v0 )?v1 )?v0 ?v1 )):pattern ((min$ less_eq$ ?v0 ?v1 )))):named a7 ))
(assert (! (not (lnull$ xsa$ )):named a8 ))
(assert (! (not (lnull$ (ltl$ xsa$ ))):named a9 ))
(assert (! (fun_app$b (lsorted$ less_eq$ )ysa$ ):named a10 ))
(assert (! (fun_app$b (lprefix$ xsa$ )ysa$ ):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (fun_app$b (lsorted$ less_eq$ )?v0 )(fun_app$b (lsorted$ less_eq$ )(ltl$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (member$ ?v0 (atLeastAtMost$ less_eq$ ?v1 ?v2 ))(and (fun_app$ (fun_app$a less_eq$ ?v1 )?v0 )(fun_app$ (fun_app$a less_eq$ ?v0 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (atMost$ less_eq$ ?v1 ))(fun_app$ (fun_app$a less_eq$ ?v0 )?v1 ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (atLeast$ less_eq$ ?v1 ))(fun_app$ (fun_app$a less_eq$ ?v1 )?v0 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (fun_app$b (lsorted$ less_eq$ )?v0 )(and (not (lnull$ ?v0 ))(not (lnull$ (ltl$ ?v0 )))))(fun_app$ (fun_app$a less_eq$ (lhd$ ?v0 ))(lhd$ (ltl$ ?v0 ))))):named a16 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (and (fun_app$b ?v0 ?v1 )(forall ((?v2 A_llist$ ))(=> (and (fun_app$b ?v0 ?v2 )(and (not (lnull$ ?v2 ))(not (lnull$ (ltl$ ?v2 )))))(and (fun_app$ (fun_app$a less_eq$ (lhd$ ?v2 ))(lhd$ (ltl$ ?v2 )))(or (fun_app$b ?v0 (ltl$ ?v2 ))(fun_app$b (lsorted$ less_eq$ )(ltl$ ?v2 )))))))(fun_app$b (lsorted$ less_eq$ )?v1 ))):named a17 ))
(check-sat )
;(get-unsat-core )
