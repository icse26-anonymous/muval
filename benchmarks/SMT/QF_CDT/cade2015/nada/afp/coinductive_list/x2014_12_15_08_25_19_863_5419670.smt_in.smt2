;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_b_llist_prod_set$ 0 )
(declare-sort A_llist_b_llist_prod_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-sort A_llist_b_llist_prod$ 0)
(declare-fun fst$ (A_llist_b_llist_prod$)A_llist$)
(declare-fun snd$ (A_llist_b_llist_prod$)B_llist$)
(declare-fun pair$ (A_llist$ B_llist$ )A_llist_b_llist_prod$)
(declare-fun uu$ ()A_llist_a_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ya$ ()A_llist_b_llist_prod_set$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun inf$ (A_llist_set$ A_llist_set$ )A_llist_set$ )
(declare-fun the$ (A_bool_fun$ )A$ )
(declare-fun uua$ ()A_llist_b_llist_prod_a_llist_fun$ )
(declare-fun uub$ ()A_llist_bool_fun$ )
(declare-fun uuc$ ()A_bool_fun$ )
(declare-fun uud$ (A$ )A_bool_fun$ )
(declare-fun uue$ (A$ )A_bool_fun$ )
(declare-fun inf$a (A_set$ A_set$ )A_set$ )
(declare-fun inf$b (A_llist_b_llist_prod_set$ A_llist_b_llist_prod_set$ )A_llist_b_llist_prod_set$ )
(declare-fun lSup$ (A_llist_set$ )A_llist$ )
(declare-fun image$ (A_llist_a_fun$ A_llist_set$ )A_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun image$a (A_llist_b_llist_prod_a_llist_fun$ A_llist_b_llist_prod_set$ )A_llist_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun member$b (A_llist_b_llist_prod$ A_llist_b_llist_prod_set$ )Bool )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_llist_a_fun$ A_llist$ )A$ )
(declare-fun fun_app$c (A_llist_b_llist_prod_a_llist_fun$ A_llist_b_llist_prod$ )A_llist$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uuc$ ?v0 )(member$ ?v0 (image$ uu$ (inf$ (image$a uua$ ya$ )(collect$ uub$ ))))):pattern ((fun_app$ uuc$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a uub$ ?v0 )(not (lnull$ ?v0 ))):pattern ((fun_app$a uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b uu$ ?v0 )(lhd$ ?v0 )):pattern ((fun_app$b uu$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(! (= (fun_app$c uua$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$c uua$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$ (uud$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (uud$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$ (uue$ ?v0 )?v1 )(= ?v1 ?v0 )):pattern ((fun_app$ (uue$ ?v0 )?v1 )))):named a5 ))
(assert (! (not (= (the$ uuc$ )(lhd$ xs$ ))):named a6 ))
(assert (! (not (lnull$ xs$ )):named a7 ))
(assert (! (member$ (lhd$ xs$ )(image$ uu$ (inf$ (image$a uua$ ya$ )(collect$ uub$ )))):named a8 ))
(assert (! (not (lnull$ (lSup$ (image$a uua$ ya$ )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (=> (or (lnull$ ?v0 )(not (fun_app$ ?v1 (lhd$ ?v0 ))))false )(=> (and (not (lnull$ ?v0 ))(fun_app$ ?v1 (lhd$ ?v0 )))false ))false )):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a11 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a14 ))
(assert (! (member$b (pair$ xs$ ys$ )ya$ ):named a15 ))
(assert (! (forall ((?v0 A$ ))(= (the$ (uud$ ?v0 ))?v0 )):named a16 ))
(assert (! (forall ((?v0 A$ ))(= (the$ (uue$ ?v0 ))?v0 )):named a17 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v2 A$ ))(=> (fun_app$ ?v0 ?v2 )(= ?v2 ?v1 ))))(= (the$ ?v0 )?v1 ))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (member$ ?v0 (inf$a ?v1 ?v2 ))(and (member$ ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_b_llist_prod_set$ )(?v2 A_llist_b_llist_prod_set$ ))(= (member$b ?v0 (inf$b ?v1 ?v2 ))(and (member$b ?v0 ?v1 )(member$b ?v0 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_set$ ))(= (member$a ?v0 (inf$ ?v1 ?v2 ))(and (member$a ?v0 ?v1 )(member$a ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (and (member$ ?v0 ?v1 )(member$ ?v0 ?v2 ))(member$ ?v0 (inf$a ?v1 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_b_llist_prod_set$ )(?v2 A_llist_b_llist_prod_set$ ))(=> (and (member$b ?v0 ?v1 )(member$b ?v0 ?v2 ))(member$b ?v0 (inf$b ?v1 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_set$ ))(=> (and (member$a ?v0 ?v1 )(member$a ?v0 ?v2 ))(member$a ?v0 (inf$ ?v1 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod_set$ )(?v1 A_llist_b_llist_prod_set$ ))(= (inf$b (inf$b ?v0 ?v1 )?v1 )(inf$b ?v0 ?v1 ))):named a25 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (inf$a (inf$a ?v0 ?v1 )?v1 )(inf$a ?v0 ?v1 ))):named a26 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_set$ ))(= (inf$ (inf$ ?v0 ?v1 )?v1 )(inf$ ?v0 ?v1 ))):named a27 ))
(check-sat )
;(get-unsat-core )
