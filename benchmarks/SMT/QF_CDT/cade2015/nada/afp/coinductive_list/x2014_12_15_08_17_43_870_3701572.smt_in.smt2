;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun n$ ()Nat$ )
(declare-fun xs$ ()A_list$ )
(declare-fun drop$ (Nat$ A_list$ )A_list$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun ldropn$ (Nat$ )A_llist_a_llist_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun suffixeq$ (A_list$ A_list$ )Bool )
(assert (! (not (= (fun_app$ (ldropn$ n$ )(llist_of$ xs$ ))(llist_of$ (drop$ n$ xs$ )))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (ldropn$ zero$ )?v0 )?v0 ):pattern ((fun_app$ (ldropn$ zero$ )?v0 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_llist$ ))(= (fun_app$ (ldropn$ ?v0 )(fun_app$ (ldropn$ ?v1 )?v2 ))(fun_app$ (ldropn$ (plus$ ?v0 ?v1 ))?v2 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ldropn$ ?v0 )lNil$ )lNil$ ):pattern ((ldropn$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ldropn$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$ (ldropn$ ?v0 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$ (ldropn$ ?v0 )?v1 ))(lfinite$ ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (fun_app$ (ldropn$ ?v1 )?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (ltl$ (fun_app$ (ldropn$ ?v0 )?v1 ))(fun_app$ (ldropn$ ?v0 )(ltl$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (drop$ zero$ ?v0 )?v0 ):pattern ((drop$ zero$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_list$ ))(= (drop$ ?v0 (drop$ ?v1 ?v2 ))(drop$ (plus$ ?v0 ?v1 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(suffixeq$ (drop$ ?v0 ?v1 )?v1 )):named a13 ))
(assert (! (forall ((?v0 A_list$ ))(suffixeq$ ?v0 ?v0 )):named a14 ))
(assert (! (= (lfinite$ lNil$ )true ):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ (ltl$ ?v0 ))(lfinite$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$ (lmap$ ?v0 ?v1 ))(lmap$ ?v0 (ltl$ ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
