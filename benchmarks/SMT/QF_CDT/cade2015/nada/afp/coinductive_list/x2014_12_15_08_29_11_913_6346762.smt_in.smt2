;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun r$ ()A_a_bool_fun_fun$ )
(declare-fun y$ ()A$ )
(declare-fun xs$ ()A_list$ )
(declare-fun ys$ ()A_list$ )
(declare-fun zs$ ()A_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xs$b ()A_list$ )
(declare-fun ys$a ()A_llist$ )
(declare-fun zs$a ()A_list$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (not (lfinite$ (llist_of$ ys$ ))):named a0 ))
(assert (! (lfinite$ zs$ ):named a1 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (lfinite$ (llist_of$ xs$ )):named a3 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a4 ))
(assert (! (=> (forall ((?v0 A_list$ ))(=> (= zs$ (llist_of$ ?v0 ))false ))false ):named a5 ))
(assert (! (lfinite$ xs$a ):named a6 ))
(assert (! (=> (forall ((?v0 A_list$ ))(=> (= xs$a (llist_of$ ?v0 ))false ))false ):named a7 ))
(assert (! (llexord$ r$ (llist_of$ xs$ )(llist_of$ ys$ )):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(= (llist_of$ (list_of$ ?v0 ))?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a10 ))
(assert (! (= (llist_of$ ys$ )(lappend$ zs$ (lCons$ y$ ys$a ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lfinite$ ?v0 ))):named a12 ))
(assert (! (= zs$ (llist_of$ zs$a )):named a13 ))
(assert (! (= xs$a (llist_of$ xs$b )):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$ (ldropn$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a15 ))
(assert (! (= (lfinite$ lNil$ )true ):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a17 ))
(check-sat )
;(get-unsat-core )
