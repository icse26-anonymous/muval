;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun xs$ ()A_list$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun remdups_adj$ (A_list$ )A_list$ )
(assert (! (not (= (lhd$ (llist_of$ xs$ ))(hd$ xs$ ))):named a0 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (lhd$ (iterates$ ?v0 ?v1 ))?v1 )):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (=> (or (lnull$ ?v0 )(not (fun_app$ ?v1 (lhd$ ?v0 ))))false )(=> (and (not (lnull$ ?v0 ))(fun_app$ ?v1 (lhd$ ?v0 )))false ))false )):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lhd$ (lCons$ ?v0 ?v1 ))?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_list$ ))(= (hd$ (remdups_adj$ ?v0 ))(hd$ ?v0 ))):named a4 ))
(assert (! (= (llist_of$ nil$ )lNil$ ):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (llist_of$ (cons$ ?v0 ?v1 ))(lCons$ ?v0 (llist_of$ ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (not (lnull$ (ltakeWhile$ ?v0 ?v1 )))(and (not (lnull$ ?v1 ))(fun_app$ ?v0 (lhd$ ?v1 ))))):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$ (ltakeWhile$ ?v0 ?v1 ))(or (lnull$ ?v1 )(not (fun_app$ ?v0 (lhd$ ?v1 )))))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (hd$ (cons$ ?v0 ?v1 ))?v0 ):pattern ((cons$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (or (lnull$ ?v0 )(not (fun_app$ ?v1 (lhd$ ?v0 ))))(lnull$ (ltakeWhile$ ?v1 ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (remdups_adj$ ?v0 )nil$ )(= ?v0 nil$ ))):named a13 ))
(check-sat )
;(get-unsat-core )
