;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort N_N_fun_N_N_fun_fun$ 0 )
(declare-sort N_N_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort T_N_sum$ 0)
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_N_sum$)T$)
(declare-fun inl$ (T$ )T_N_sum$)
(declare-fun projr$ (T_N_sum$)N$)
(declare-fun inr$ (N$ )T_N_sum$)
(declare-fun projl$a (T_dtree_sum$)T$)
(declare-fun inl$a (T$ )T_dtree_sum$)
(declare-fun projr$a (T_dtree_sum$)Dtree$)
(declare-fun inr$a (Dtree$ )T_dtree_sum$)
(declare-fun a$ ()T$ )
(declare-fun h$ (Dtree$ )N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun h_r$ (Dtree$ )N_N_fun$ )
(declare-fun id$a ()Dtree_dtree_fun$ )
(declare-fun id$b ()N_N_fun$ )
(declare-fun top$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun comp$ (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun pick$ (Dtree$ )N_dtree_fun$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun t_tr$ ()T_dtree_sum$ )
(declare-fun top$a ()T_dtree_sum_set$ )
(declare-fun comp$a (Dtree_N_fun$ )N_dtree_fun_N_N_fun_fun$ )
(declare-fun comp$b (Dtree_dtree_fun$ )Dtree_dtree_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$c (N_N_fun$ )N_N_fun_N_N_fun_fun$ )
(declare-fun comp$d (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun comp$e (N_dtree_fun$ )N_N_fun_N_dtree_fun_fun$ )
(declare-fun comp$f (Dtree_dtree_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun comp$g (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_fun$ )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$ (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun map_sum$ (T_T_fun$ Dtree_N_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun fun_app$a (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$b (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$c (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$d (N_N_fun$ N$ )N$ )
(declare-fun fun_app$e (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$f (N_N_fun_N_N_fun_fun$ N_N_fun$ )N_N_fun$ )
(declare-fun fun_app$g (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$h (N_N_fun_N_dtree_fun_fun$ N_N_fun$ )N_dtree_fun$ )
(declare-fun fun_app$i (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$ )N_dtree_fun$ )
(declare-fun fun_app$j (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$k (T_T_fun$ T$ )T$ )
(declare-fun fun_app$l (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(assert (! (not (= (map_sum$ id$ (fun_app$ (comp$ (fun_app$a (comp$a root$ )(h$ tr0$ )))root$ )t_tr$ )(map_sum$ id$ root$ t_tr$ ))):named a0 ))
(assert (! (inItr$ top$ tr0$ n$ ):named a1 ))
(assert (! (member$ t_tr$ (cont$ (fun_app$b (pick$ tr0$ )n$ ))):named a2 ))
(assert (! (= t_tr$ (inl$a a$ )):named a3 ))
(assert (! (inItr$ top$ tr0$ n$ ):named a4 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$c root$ (fun_app$b (h$ tr0$ )?v0 ))(fun_app$c root$ (fun_app$b (pick$ tr0$ )?v0 )))):named a5 ))
(assert (! (member$ t_tr$ (cont$ (fun_app$b (pick$ tr0$ )n$ ))):named a6 ))
(assert (! (forall ((?v0 N$ ))(=> (inItr$ top$ tr0$ ?v0 )(= (fun_app$c root$ (fun_app$b (pick$ tr0$ )?v0 ))?v0 ))):named a7 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$d (h_r$ tr0$ )?v0 )(fun_app$c root$ (fun_app$b (pick$ tr0$ )?v0 ))):pattern ((fun_app$d (h_r$ tr0$ )?v0 )))):named a8 ))
(assert (! (forall ((?v0 N$ ))(=> (inItr$ top$ tr0$ ?v0 )(= (fun_app$c root$ (fun_app$b (h$ tr0$ )?v0 ))?v0 ))):named a9 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(= (fun_app$c root$ (fun_app$b (h$ ?v0 )?v1 ))(fun_app$c root$ (fun_app$b (pick$ ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (inItr$ ?v0 ?v1 ?v2 )(member$a (fun_app$c root$ ?v1 )?v0 ))):named a11 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (inItr$ top$ ?v0 ?v1 )(= (fun_app$c root$ (fun_app$b (h$ ?v0 )?v1 ))?v1 ))):named a12 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (inItr$ top$ ?v0 ?v1 )(= (fun_app$c root$ (fun_app$b (pick$ ?v0 )?v1 ))?v1 ))):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$c root$ ?v0 )?v1 )(inItr$ ?v1 ?v0 (fun_app$c root$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 N$ ))(=> (and (wf$ tr0$ )(inItr$ top$ tr0$ ?v0 ))(wf$ (fun_app$b (pick$ tr0$ )?v0 )))):named a15 ))
(assert (! (forall ((?v0 N$ ))(=> (inItr$ top$ tr0$ ?v0 )(and (subtr$ top$ (fun_app$b (pick$ tr0$ )?v0 )tr0$ )(= (fun_app$c root$ (fun_app$b (pick$ tr0$ )?v0 ))?v0 )))):named a16 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ ))(= (fun_app$e (comp$b ?v0 )id$a )?v0 )):named a17 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (fun_app$f (comp$c ?v0 )id$b )?v0 )):named a18 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$g (comp$d ?v0 )id$a )?v0 )):named a19 ))
(assert (! (forall ((?v0 N_dtree_fun$ ))(= (fun_app$h (comp$e ?v0 )id$b )?v0 )):named a20 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ ))(= (fun_app$e (comp$b id$a )?v0 )?v0 )):named a21 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (fun_app$f (comp$c id$b )?v0 )?v0 )):named a22 ))
(assert (! (forall ((?v0 N_dtree_fun$ ))(= (fun_app$i (comp$f id$a )?v0 )?v0 )):named a23 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$ (comp$ id$b )?v0 )?v0 )):named a24 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ ))(= (fun_app$e (comp$b id$a )?v0 )?v0 )):named a25 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (fun_app$f (comp$c id$b )?v0 )?v0 )):named a26 ))
(assert (! (forall ((?v0 N_dtree_fun$ ))(= (fun_app$i (comp$f id$a )?v0 )?v0 )):named a27 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$ (comp$ id$b )?v0 )?v0 )):named a28 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (and (inItr$ top$ tr0$ ?v0 )(subtr$ top$ ?v1 (fun_app$b (h$ tr0$ )?v0 )))(exists ((?v2 N$ ))(and (inItr$ top$ tr0$ ?v2 )(= ?v1 (fun_app$b (h$ tr0$ )?v2 )))))):named a29 ))
(assert (! (forall ((?v0 N$ ))(=> (inItr$ top$ tr0$ ?v0 )(subtr$ top$ (fun_app$b (pick$ tr0$ )?v0 )tr0$ ))):named a30 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$a ?v0 )(inl$a ?v1 ))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$a ?v0 )(inl$a ?v1 ))(= ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$j id$a ?v0 )?v0 ):pattern ((fun_app$j id$a ?v0 )))):named a33 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$d id$b ?v0 )?v0 ):pattern ((fun_app$d id$b ?v0 )))):named a34 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$k id$ ?v0 )?v0 ):pattern ((fun_app$k id$ ?v0 )))):named a35 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$j (fun_app$e (comp$b ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$e (comp$b ?v0 )?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$d (fun_app$f (comp$c ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$f (comp$c ?v0 )?v1 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$c (fun_app$g (comp$d ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$g (comp$d ?v0 )?v1 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$b (fun_app$i (comp$f ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$i (comp$f ?v0 )?v1 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$j (fun_app$l (comp$g ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$l (comp$g ?v0 )?v1 )?v2 )))):named a40 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$b (fun_app$h (comp$e ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$h (comp$e ?v0 )?v1 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$c (fun_app$ (comp$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$ (comp$ ?v0 )?v1 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$d (fun_app$a (comp$a ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$a (comp$a ?v0 )?v1 )?v2 )))):named a43 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (member$ ?v0 top$a )true )):named a44 ))
(assert (! (forall ((?v0 N$ ))(= (member$a ?v0 top$ )true )):named a45 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(subtr$ ?v0 ?v2 ?v3 ))(subtr$ ?v0 ?v1 ?v3 ))):named a46 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(subtr$ ?v1 ?v2 ?v0 ))(wf$ ?v2 ))):named a47 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$c root$ ?v0 )?v1 )(subtr$ ?v1 ?v0 ?v0 ))):named a48 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr$ ?v0 ?v1 ?v2 )(member$a (fun_app$c root$ ?v1 )?v0 ))):named a49 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr$ ?v0 ?v1 ?v2 )(member$a (fun_app$c root$ ?v2 )?v0 ))):named a50 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 Dtree$ ))(=> (and (inItr$ ?v0 ?v1 ?v2 )(subtr$ ?v0 ?v1 ?v3 ))(inItr$ ?v0 ?v3 ?v2 ))):named a51 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (inItr$ ?v0 ?v1 ?v2 )(exists ((?v3 Dtree$ ))(and (subtr$ ?v0 ?v3 ?v1 )(= (fun_app$c root$ ?v3 )?v2 ))))):named a52 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$e (comp$b ?v0 )?v1 )?v2 )(= (fun_app$j ?v0 (fun_app$j ?v1 ?v3 ))(fun_app$j ?v2 ?v3 )))):named a53 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$f (comp$c ?v0 )?v1 )?v2 )(= (fun_app$d ?v0 (fun_app$d ?v1 ?v3 ))(fun_app$d ?v2 ?v3 )))):named a54 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$g (comp$d ?v0 )?v1 )?v2 )(= (fun_app$c ?v0 (fun_app$j ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a55 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N$ ))(=> (= (fun_app$i (comp$f ?v0 )?v1 )?v2 )(= (fun_app$j ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$b ?v2 ?v3 )))):named a56 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$l (comp$g ?v0 )?v1 )?v2 )(= (fun_app$b ?v0 (fun_app$c ?v1 ?v3 ))(fun_app$j ?v2 ?v3 )))):named a57 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N$ ))(=> (= (fun_app$h (comp$e ?v0 )?v1 )?v2 )(= (fun_app$b ?v0 (fun_app$d ?v1 ?v3 ))(fun_app$b ?v2 ?v3 )))):named a58 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$ (comp$ ?v0 )?v1 )?v2 )(= (fun_app$d ?v0 (fun_app$c ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a59 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$a (comp$a ?v0 )?v1 )?v2 )(= (fun_app$c ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$d ?v2 ?v3 )))):named a60 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$ (comp$ ?v0 )?v1 )(fun_app$ (comp$ ?v2 )?v3 ))(= (fun_app$d ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$c ?v3 ?v4 ))))):named a61 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$a (comp$a ?v0 )?v1 )(fun_app$a (comp$a ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$b ?v3 ?v4 ))))):named a62 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$ (comp$ ?v0 )?v1 )(fun_app$g (comp$d ?v2 )?v3 ))(= (fun_app$d ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$j ?v3 ?v4 ))))):named a63 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N$ ))(=> (= (fun_app$a (comp$a ?v0 )?v1 )(fun_app$f (comp$c ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$d ?v3 ?v4 ))))):named a64 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$f (comp$c ?v0 )?v1 )(fun_app$a (comp$a ?v2 )?v3 ))(= (fun_app$d ?v0 (fun_app$d ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$b ?v3 ?v4 ))))):named a65 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N$ ))(=> (= (fun_app$f (comp$c ?v0 )?v1 )(fun_app$f (comp$c ?v2 )?v3 ))(= (fun_app$d ?v0 (fun_app$d ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$d ?v3 ?v4 ))))):named a66 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$g (comp$d ?v0 )?v1 )(fun_app$ (comp$ ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$j ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$c ?v3 ?v4 ))))):named a67 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$g (comp$d ?v0 )?v1 )(fun_app$g (comp$d ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$j ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$j ?v3 ?v4 ))))):named a68 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$i (comp$f ?v0 )?v1 )(fun_app$i (comp$f ?v2 )?v3 ))(= (fun_app$j ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$j ?v2 (fun_app$b ?v3 ?v4 ))))):named a69 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ )(?v4 N$ ))(=> (= (fun_app$i (comp$f ?v0 )?v1 )(fun_app$h (comp$e ?v2 )?v3 ))(= (fun_app$j ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$d ?v3 ?v4 ))))):named a70 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (fun_app$ (comp$ ?v0 )?v1 )(fun_app$ (comp$ ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$d ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$c ?v3 ?v4 ))))false ))false )):named a71 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$a (comp$a ?v0 )?v1 )(fun_app$a (comp$a ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$c ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$b ?v3 ?v4 ))))false ))false )):named a72 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= (fun_app$ (comp$ ?v0 )?v1 )(fun_app$g (comp$d ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$d ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$j ?v3 ?v4 ))))false ))false )):named a73 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (and (= (fun_app$a (comp$a ?v0 )?v1 )(fun_app$f (comp$c ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$c ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$d ?v3 ?v4 ))))false ))false )):named a74 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$f (comp$c ?v0 )?v1 )(fun_app$a (comp$a ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$d ?v0 (fun_app$d ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$b ?v3 ?v4 ))))false ))false )):named a75 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (and (= (fun_app$f (comp$c ?v0 )?v1 )(fun_app$f (comp$c ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$d ?v0 (fun_app$d ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$d ?v3 ?v4 ))))false ))false )):named a76 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (fun_app$g (comp$d ?v0 )?v1 )(fun_app$ (comp$ ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$c ?v0 (fun_app$j ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$c ?v3 ?v4 ))))false ))false )):named a77 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= (fun_app$g (comp$d ?v0 )?v1 )(fun_app$g (comp$d ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$c ?v0 (fun_app$j ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$j ?v3 ?v4 ))))false ))false )):named a78 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$i (comp$f ?v0 )?v1 )(fun_app$i (comp$f ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$j ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$j ?v2 (fun_app$b ?v3 ?v4 ))))false ))false )):named a79 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ ))(=> (and (= (fun_app$i (comp$f ?v0 )?v1 )(fun_app$h (comp$e ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$j ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$b ?v2 (fun_app$d ?v3 ?v4 ))))false ))false )):named a80 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$j (fun_app$e (comp$b ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$e (comp$b ?v0 )?v1 )?v2 )))):named a81 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$d (fun_app$f (comp$c ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$f (comp$c ?v0 )?v1 )?v2 )))):named a82 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$c (fun_app$g (comp$d ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$g (comp$d ?v0 )?v1 )?v2 )))):named a83 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$b (fun_app$i (comp$f ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$i (comp$f ?v0 )?v1 )?v2 )))):named a84 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$j (fun_app$l (comp$g ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$l (comp$g ?v0 )?v1 )?v2 )))):named a85 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$b (fun_app$h (comp$e ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$h (comp$e ?v0 )?v1 )?v2 )))):named a86 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$c (fun_app$ (comp$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$ (comp$ ?v0 )?v1 )?v2 )))):named a87 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$d (fun_app$a (comp$a ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$a (comp$a ?v0 )?v1 )?v2 )))):named a88 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$g (comp$d (fun_app$ (comp$ ?v0 )?v1 ))?v2 )(fun_app$ (comp$ ?v0 )(fun_app$g (comp$d ?v1 )?v2 )))):named a89 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$f (comp$c (fun_app$a (comp$a ?v0 )?v1 ))?v2 )(fun_app$a (comp$a ?v0 )(fun_app$h (comp$e ?v1 )?v2 )))):named a90 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$ (comp$ (fun_app$f (comp$c ?v0 )?v1 ))?v2 )(fun_app$ (comp$ ?v0 )(fun_app$ (comp$ ?v1 )?v2 )))):named a91 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$ (comp$ (fun_app$a (comp$a ?v0 )?v1 ))?v2 )(fun_app$g (comp$d ?v0 )(fun_app$l (comp$g ?v1 )?v2 )))):named a92 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$a (comp$a (fun_app$g (comp$d ?v0 )?v1 ))?v2 )(fun_app$a (comp$a ?v0 )(fun_app$i (comp$f ?v1 )?v2 )))):named a93 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$a (comp$a (fun_app$ (comp$ ?v0 )?v1 ))?v2 )(fun_app$f (comp$c ?v0 )(fun_app$a (comp$a ?v1 )?v2 )))):named a94 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$e (comp$b (fun_app$l (comp$g ?v0 )?v1 ))?v2 )(fun_app$l (comp$g ?v0 )(fun_app$g (comp$d ?v1 )?v2 )))):named a95 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ ))(= (fun_app$f (comp$c (fun_app$f (comp$c ?v0 )?v1 ))?v2 )(fun_app$f (comp$c ?v0 )(fun_app$f (comp$c ?v1 )?v2 )))):named a96 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$g (comp$d (fun_app$g (comp$d ?v0 )?v1 ))?v2 )(fun_app$g (comp$d ?v0 )(fun_app$e (comp$b ?v1 )?v2 )))):named a97 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$i (comp$f (fun_app$e (comp$b ?v0 )?v1 ))?v2 )(fun_app$i (comp$f ?v0 )(fun_app$i (comp$f ?v1 )?v2 )))):named a98 ))
(check-sat )
;(get-unsat-core )
