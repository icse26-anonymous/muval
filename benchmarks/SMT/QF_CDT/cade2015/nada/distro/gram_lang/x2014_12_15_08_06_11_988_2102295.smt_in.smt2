;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun t$ ()T$ )
(declare-fun ns$ ()N_set$ )
(declare-fun ta$ ()T$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun nsa$ ()N_set$ )
(declare-fun tra$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun node$ (N$ T_dtree_sum_set$ )Dtree$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun inFr2$ (N_set$ Dtree$ T$ )Bool )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$ (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun fun_app$a (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$b (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(assert (! (not (exists ((?v0 Dtree$ ))(and (subtr$ nsa$ ?v0 tra$ )(member$ (inl$ ta$ )(cont$ ?v0 ))))):named a0 ))
(assert (! (member$a (root$ tra$ )nsa$ ):named a1 ))
(assert (! (member$ (inl$ ta$ )(cont$ tra$ )):named a2 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(subtr$ ?v0 ?v2 ?v3 ))(subtr$ ?v0 ?v1 ?v3 ))):named a3 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr$ ?v0 ?v1 ?v2 )(member$a (root$ ?v2 )?v0 ))):named a4 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr$ ?v0 ?v1 ?v2 )(member$a (root$ ?v1 )?v0 ))):named a5 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (root$ ?v0 )?v1 )(subtr$ ?v1 ?v0 ?v0 ))):named a6 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (member$a (root$ ?v0 )?v1 )(member$ (inl$ ?v2 )(cont$ ?v0 )))(inFr2$ ?v1 ?v0 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (member$a (root$ ?v0 )?v1 )(member$ (inl$ ?v2 )(cont$ ?v0 )))(inFr$ ?v1 ?v0 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(=> (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Dtree$ ))(= (node$ (root$ ?v0 )(cont$ ?v0 ))?v0 )):named a13 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (subtr$ ?v0 ?v1 ?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$a (root$ ?v3 )?v4 )(and (subtr$ ?v4 ?v5 ?v6 )(member$ (inr$ ?v6 )(cont$ ?v3 ))))))))))):named a14 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set_dtree_dtree_bool_fun_fun_fun$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(and (forall ((?v4 N_set$ )(?v5 Dtree$ ))(fun_app$ (fun_app$a (fun_app$b ?v3 ?v4 )?v5 )?v5 ))(forall ((?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ )(?v7 Dtree$ ))(=> (and (member$a (root$ ?v5 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v6 ))(and (subtr$ ?v4 ?v6 ?v7 )(fun_app$ (fun_app$a (fun_app$b ?v3 ?v4 )?v6 )?v7 ))))(fun_app$ (fun_app$a (fun_app$b ?v3 ?v4 )?v5 )?v7 )))))(fun_app$ (fun_app$a (fun_app$b ?v3 ?v0 )?v1 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$a (root$ ?v3 )?v4 )(and (subtr$ ?v4 ?v5 ?v6 )(member$ (inr$ ?v6 )(cont$ ?v3 )))))))false ))))false )):named a16 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$a (root$ ?v0 )?v1 )(and (subtr$ ?v1 ?v2 ?v3 )(member$ (inr$ ?v3 )(cont$ ?v0 ))))(subtr$ ?v1 ?v2 ?v0 ))):named a17 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$a (root$ ?v0 )?v1 )(and (member$ (inr$ ?v0 )(cont$ ?v2 ))(subtr$ ?v1 ?v2 ?v3 )))(subtr$ ?v1 ?v0 ?v3 ))):named a18 ))
(assert (! (inFr$ ns$ tr$ t$ ):named a19 ))
(check-sat )
;(get-unsat-core )
