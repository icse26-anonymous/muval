;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort N_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_N_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_dtree_fun$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun uu$ ()Dtree_T_dtree_sum_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun nsa$ ()N_set$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun tr2$ ()Dtree$ )
(declare-fun tr3$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun tr1a$ ()Dtree$ )
(declare-fun inFr2$ (N_set$ Dtree$ T$ )Bool )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun inj_on$ (Dtree_N_fun$ Dtree_set$ )Bool )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun vimage$ (Dtree_T_dtree_sum_fun$ T_dtree_sum_set$ )Dtree_set$ )
(declare-fun fun_app$ (Dtree_T_dtree_sum_fun$ Dtree$ )T_dtree_sum$ )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun member$b (Dtree$ Dtree_set$ )Bool )
(declare-fun vimage$a (N_dtree_fun$ Dtree_set$ )N_set$ )
(declare-fun vimage$b (T_dtree_sum_dtree_fun$ Dtree_set$ )T_dtree_sum_set$ )
(declare-fun vimage$c (Dtree_N_fun$ N_set$ )Dtree_set$ )
(declare-fun vimage$d (Dtree_dtree_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun vimage$e (N_N_fun$ N_set$ )N_set$ )
(declare-fun vimage$f (N_T_dtree_sum_fun$ T_dtree_sum_set$ )N_set$ )
(declare-fun vimage$g (T_dtree_sum_N_fun$ N_set$ )T_dtree_sum_set$ )
(declare-fun vimage$h (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun fun_app$a (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$b (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$c (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$d (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(declare-fun fun_app$e (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$f (T_dtree_sum_dtree_fun$ T_dtree_sum$ )Dtree$ )
(declare-fun fun_app$g (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$h (N_N_fun$ N$ )N$ )
(declare-fun fun_app$i (N_T_dtree_sum_fun$ N$ )T_dtree_sum$ )
(declare-fun fun_app$j (T_dtree_sum_N_fun$ T_dtree_sum$ )N$ )
(declare-fun fun_app$k (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$ uu$ ?v0 )(inr$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (inj_on$ root$ (vimage$ uu$ (cont$ tr1a$ )))):named a1 ))
(assert (! (member$ (fun_app$a root$ tr3$ )nsa$ ):named a2 ))
(assert (! (subtr$ nsa$ tr1a$ tr2$ ):named a3 ))
(assert (! (=> (wf$ tr2$ )(inj_on$ root$ (vimage$ uu$ (cont$ tr1a$ )))):named a4 ))
(assert (! (member$a (inr$ tr2$ )(cont$ tr3$ )):named a5 ))
(assert (! (wf$ tr3$ ):named a6 ))
(assert (! (wf$ tr1$ ):named a7 ))
(assert (! (subtr$ ns$ tr$ tr1$ ):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(and (member$a (inr$ ?v1 )(cont$ ?v0 ))(member$a (inr$ ?v2 )(cont$ ?v0 ))))(= (= (fun_app$a root$ ?v1 )(fun_app$a root$ ?v2 ))(= ?v1 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (subtr$ ?v0 ?v1 ?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$ (fun_app$a root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$ (fun_app$a root$ ?v3 )?v4 )(and (subtr$ ?v4 ?v5 ?v6 )(member$a (inr$ ?v6 )(cont$ ?v3 ))))))))))):named a10 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set_dtree_dtree_bool_fun_fun_fun$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(and (forall ((?v4 N_set$ )(?v5 Dtree$ ))(fun_app$b (fun_app$c (fun_app$d ?v3 ?v4 )?v5 )?v5 ))(forall ((?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ )(?v7 Dtree$ ))(=> (and (member$ (fun_app$a root$ ?v5 )?v4 )(and (member$a (inr$ ?v5 )(cont$ ?v6 ))(and (subtr$ ?v4 ?v6 ?v7 )(fun_app$b (fun_app$c (fun_app$d ?v3 ?v4 )?v6 )?v7 ))))(fun_app$b (fun_app$c (fun_app$d ?v3 ?v4 )?v5 )?v7 )))))(fun_app$b (fun_app$c (fun_app$d ?v3 ?v0 )?v1 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$ (fun_app$a root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$ (fun_app$a root$ ?v3 )?v4 )(and (subtr$ ?v4 ?v5 ?v6 )(member$a (inr$ ?v6 )(cont$ ?v3 )))))))false ))))false )):named a12 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(subtr$ ?v0 ?v2 ?v3 ))(subtr$ ?v0 ?v1 ?v3 ))):named a13 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr$ ?v0 ?v1 ?v2 )(member$ (fun_app$a root$ ?v2 )?v0 ))):named a14 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr$ ?v0 ?v1 ?v2 )(member$ (fun_app$a root$ ?v1 )?v0 ))):named a15 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$ (fun_app$a root$ ?v0 )?v1 )(and (subtr$ ?v1 ?v2 ?v3 )(member$a (inr$ ?v3 )(cont$ ?v0 ))))(subtr$ ?v1 ?v2 ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$ (fun_app$a root$ ?v0 )?v1 )(and (member$a (inr$ ?v0 )(cont$ ?v2 ))(subtr$ ?v1 ?v2 ?v3 )))(subtr$ ?v1 ?v0 ?v3 ))):named a17 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$ (fun_app$a root$ ?v0 )?v1 )(subtr$ ?v1 ?v0 ?v0 ))):named a18 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$a (inr$ ?v1 )(cont$ ?v0 )))(wf$ ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (wf$ ?v0 )(inj_on$ root$ (vimage$ uu$ (cont$ ?v0 ))))):named a20 ))
(assert (! (forall ((?v0 N$ )(?v1 N_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$ ?v0 (vimage$a ?v1 ?v2 ))(member$b (fun_app$e ?v1 ?v0 )?v2 ))):named a21 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$a ?v0 (vimage$b ?v1 ?v2 ))(member$b (fun_app$f ?v1 ?v0 )?v2 ))):named a22 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_N_fun$ )(?v2 N_set$ ))(= (member$b ?v0 (vimage$c ?v1 ?v2 ))(member$ (fun_app$a ?v1 ?v0 )?v2 ))):named a23 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (member$b ?v0 (vimage$d ?v1 ?v2 ))(member$b (fun_app$g ?v1 ?v0 )?v2 ))):named a24 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(= (member$ ?v0 (vimage$e ?v1 ?v2 ))(member$ (fun_app$h ?v1 ?v0 )?v2 ))):named a25 ))
(assert (! (forall ((?v0 N$ )(?v1 N_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ ?v0 (vimage$f ?v1 ?v2 ))(member$a (fun_app$i ?v1 ?v0 )?v2 ))):named a26 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_N_fun$ )(?v2 N_set$ ))(= (member$a ?v0 (vimage$g ?v1 ?v2 ))(member$ (fun_app$j ?v1 ?v0 )?v2 ))):named a27 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a ?v0 (vimage$h ?v1 ?v2 ))(member$a (fun_app$k ?v1 ?v0 )?v2 ))):named a28 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$b ?v0 (vimage$ ?v1 ?v2 ))(member$a (fun_app$ ?v1 ?v0 )?v2 ))):named a29 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= (fun_app$a ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$b ?v1 (vimage$c ?v0 ?v3 )))):named a30 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= (fun_app$e ?v0 ?v1 )?v2 )(member$b ?v2 ?v3 ))(member$ ?v1 (vimage$a ?v0 ?v3 )))):named a31 ))
(assert (! (forall ((?v0 T_dtree_sum_dtree_fun$ )(?v1 T_dtree_sum$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= (fun_app$f ?v0 ?v1 )?v2 )(member$b ?v2 ?v3 ))(member$a ?v1 (vimage$b ?v0 ?v3 )))):named a32 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree_set$ ))(=> (and (= (fun_app$g ?v0 ?v1 )?v2 )(member$b ?v2 ?v3 ))(member$b ?v1 (vimage$d ?v0 ?v3 )))):named a33 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= (fun_app$h ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$ ?v1 (vimage$e ?v0 ?v3 )))):named a34 ))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$ )(?v1 T_dtree_sum$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= (fun_app$j ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$a ?v1 (vimage$g ?v0 ?v3 )))):named a35 ))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$ )(?v1 N$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$i ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$ ?v1 (vimage$f ?v0 ?v3 )))):named a36 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$k ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$a ?v1 (vimage$h ?v0 ?v3 )))):named a37 ))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$ )(?v1 Dtree$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$ ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$b ?v1 (vimage$ ?v0 ?v3 )))):named a38 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a39 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a40 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$a root$ ?v0 )(fun_app$a root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a41 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (inFr2$ ?v0 ?v1 ?v2 )(and (member$ (fun_app$a root$ ?v3 )?v0 )(member$a (inr$ ?v1 )(cont$ ?v3 ))))(inFr2$ ?v0 ?v3 ?v2 ))):named a42 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(= (inItr$ ?v0 ?v1 ?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (fun_app$a root$ ?v3 ))(member$ (fun_app$a root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$ (fun_app$a root$ ?v3 )?v4 )(and (member$a (inr$ ?v5 )(cont$ ?v3 ))(inItr$ ?v4 ?v5 ?v6 )))))))))):named a43 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (and (inItr$ ?v0 ?v1 ?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (fun_app$a root$ ?v3 ))(member$ (fun_app$a root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$ (fun_app$a root$ ?v3 )?v4 )(and (member$a (inr$ ?v5 )(cont$ ?v3 ))(inItr$ ?v4 ?v5 ?v6 ))))))false ))))false )):named a44 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 N$ ))(=> (and (member$ (fun_app$a root$ ?v0 )?v1 )(and (member$a (inr$ ?v2 )(cont$ ?v0 ))(inItr$ ?v1 ?v2 ?v3 )))(inItr$ ?v1 ?v0 ?v3 ))):named a45 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 T$ ))(=> (and (member$ (fun_app$a root$ ?v0 )?v1 )(and (member$a (inr$ ?v2 )(cont$ ?v0 ))(inFr$ ?v1 ?v2 ?v3 )))(inFr$ ?v1 ?v0 ?v3 ))):named a46 ))
(check-sat )
;(get-unsat-core )
