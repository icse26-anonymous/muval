;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort N_T_N_sum_set_fun$ 0 )
(declare-sort N_N_fun_N_N_fun_fun$ 0 )
(declare-sort Dtree_N_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort N_N_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort T_N_sum$ 0)
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_N_sum$)T$)
(declare-fun inl$ (T$ )T_N_sum$)
(declare-fun projr$ (T_N_sum$)N$)
(declare-fun inr$ (N$ )T_N_sum$)
(declare-fun projl$a (T_dtree_sum$)T$)
(declare-fun inl$a (T$ )T_dtree_sum$)
(declare-fun projr$a (T_dtree_sum$)Dtree$)
(declare-fun inr$a (Dtree$ )T_dtree_sum$)
(declare-fun b$ ()Dtree$ )
(declare-fun h$ (Dtree$ )N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun uu$ (T_dtree_sum_set$ )T_dtree_sum_bool_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun h_c$ (Dtree$ )N_T_N_sum_set_fun$ )
(declare-fun h_r$ (Dtree$ )N_N_fun$ )
(declare-fun id$a ()Dtree_dtree_fun$ )
(declare-fun id$b ()N_N_fun$ )
(declare-fun top$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun uua$ (N_set$ )N_bool_fun$ )
(declare-fun comp$ (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun pick$ (Dtree$ )N_dtree_fun$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun t_tr$ ()T_dtree_sum$ )
(declare-fun comp$a (Dtree_N_fun$ )N_dtree_fun_N_N_fun_fun$ )
(declare-fun comp$b (Dtree_dtree_fun$ )Dtree_dtree_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$c (N_N_fun$ )N_N_fun_N_N_fun_fun$ )
(declare-fun comp$d (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun comp$e (N_dtree_fun$ )N_N_fun_N_dtree_fun_fun$ )
(declare-fun comp$f (Dtree_dtree_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun comp$g (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_fun$ )
(declare-fun inItr$ (N_set$ )Dtree_N_bool_fun_fun$ )
(declare-fun subtr$ (N_set$ Dtree$ )Dtree_bool_fun$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun unfold$ (N_N_fun$ )N_T_N_sum_set_fun_N_dtree_fun_fun$ )
(declare-fun collect$ (N_bool_fun$ )N_set$ )
(declare-fun fun_app$ (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun map_sum$ (T_T_fun$ Dtree_N_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun collect$a (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun fun_app$a (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$b (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$c (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$d (Dtree_N_bool_fun_fun$ Dtree$ )N_bool_fun$ )
(declare-fun fun_app$e (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$f (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$g (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$ )N_dtree_fun$ )
(declare-fun fun_app$h (N_N_fun$ N$ )N$ )
(declare-fun fun_app$i (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$j (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$k (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$l (N_N_fun_N_N_fun_fun$ N_N_fun$ )N_N_fun$ )
(declare-fun fun_app$m (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$n (N_N_fun_N_dtree_fun_fun$ N_N_fun$ )N_dtree_fun$ )
(declare-fun fun_app$o (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$ )N_dtree_fun$ )
(declare-fun fun_app$p (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$q (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(declare-fun fun_app$r (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$s (T_T_fun$ T$ )T$ )
(declare-fun map_sum$a (T_T_fun$ N_dtree_fun$ T_N_sum$ )T_dtree_sum$ )
(declare-fun map_sum$b (T_T_fun$ N_N_fun$ T_N_sum$ )T_N_sum$ )
(declare-fun map_sum$c (T_T_fun$ Dtree_dtree_fun$ T_dtree_sum$ )T_dtree_sum$ )
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(! (= (fun_app$a (uua$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$a (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (= (map_sum$ id$ (fun_app$b (comp$ (fun_app$c (comp$a root$ )(h$ tr0$ )))root$ )t_tr$ )(map_sum$ id$ root$ t_tr$ ))):named a2 ))
(assert (! (fun_app$a (fun_app$d (inItr$ top$ )tr0$ )n$ ):named a3 ))
(assert (! (member$ t_tr$ (cont$ (fun_app$e (pick$ tr0$ )n$ ))):named a4 ))
(assert (! (= t_tr$ (inr$a b$ )):named a5 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_T_N_sum_set_fun$ )(?v2 N$ ))(= (fun_app$f root$ (fun_app$e (fun_app$g (unfold$ ?v0 )?v1 )?v2 ))(fun_app$h ?v0 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 Dtree$ ))(=> (and (fun_app$a (fun_app$d (inItr$ ?v0 )?v1 )?v2 )(fun_app$i (subtr$ ?v0 ?v1 )?v3 ))(fun_app$a (fun_app$d (inItr$ ?v0 )?v3 )?v2 ))):named a7 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (map_sum$a ?v0 ?v1 (inr$ ?v2 ))(inr$a (fun_app$e ?v1 ?v2 ))):pattern ((map_sum$a ?v0 ?v1 (inr$ ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (map_sum$b ?v0 ?v1 (inr$ ?v2 ))(inr$ (fun_app$h ?v1 ?v2 ))):pattern ((map_sum$b ?v0 ?v1 (inr$ ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (map_sum$c ?v0 ?v1 (inr$a ?v2 ))(inr$a (fun_app$j ?v1 ?v2 ))):pattern ((map_sum$c ?v0 ?v1 (inr$a ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (map_sum$ ?v0 ?v1 (inr$a ?v2 ))(inr$ (fun_app$f ?v1 ?v2 ))):pattern ((map_sum$ ?v0 ?v1 (inr$a ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$f root$ ?v0 )?v1 )(fun_app$a (fun_app$d (inItr$ ?v1 )?v0 )(fun_app$f root$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$a (fun_app$f root$ ?v0 )?v1 )(and (member$ (inr$a ?v0 )(cont$ ?v2 ))(fun_app$i (subtr$ ?v1 ?v2 )?v3 )))(fun_app$i (subtr$ ?v1 ?v0 )?v3 ))):named a13 ))
(assert (! (= (h$ tr0$ )(fun_app$g (unfold$ (h_r$ tr0$ ))(h_c$ tr0$ ))):named a14 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$h (h_r$ tr0$ )?v0 )(fun_app$f root$ (fun_app$e (pick$ tr0$ )?v0 ))):pattern ((fun_app$h (h_r$ tr0$ )?v0 )))):named a15 ))
(assert (! (forall ((?v0 N$ ))(=> (fun_app$a (fun_app$d (inItr$ top$ )tr0$ )?v0 )(and (fun_app$i (subtr$ top$ (fun_app$e (pick$ tr0$ )?v0 ))tr0$ )(= (fun_app$f root$ (fun_app$e (pick$ tr0$ )?v0 ))?v0 )))):named a16 ))
(assert (! (fun_app$a (fun_app$d (inItr$ top$ )tr0$ )n$ ):named a17 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$f root$ (fun_app$e (h$ tr0$ )?v0 ))(fun_app$f root$ (fun_app$e (pick$ tr0$ )?v0 )))):named a18 ))
(assert (! (member$ t_tr$ (cont$ (fun_app$e (pick$ tr0$ )n$ ))):named a19 ))
(assert (! (forall ((?v0 N$ ))(=> (fun_app$a (fun_app$d (inItr$ top$ )tr0$ )?v0 )(= (fun_app$f root$ (fun_app$e (pick$ tr0$ )?v0 ))?v0 ))):named a20 ))
(assert (! (forall ((?v0 N$ ))(=> (fun_app$a (fun_app$d (inItr$ top$ )tr0$ )?v0 )(fun_app$i (subtr$ top$ (fun_app$e (pick$ tr0$ )?v0 ))tr0$ ))):named a21 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (and (fun_app$a (fun_app$d (inItr$ top$ )tr0$ )?v0 )(fun_app$i (subtr$ top$ ?v1 )(fun_app$e (h$ tr0$ )?v0 )))(exists ((?v2 N$ ))(and (fun_app$a (fun_app$d (inItr$ top$ )tr0$ )?v2 )(= ?v1 (fun_app$e (h$ tr0$ )?v2 )))))):named a22 ))
(assert (! (forall ((?v0 N$ ))(=> (fun_app$a (fun_app$d (inItr$ top$ )tr0$ )?v0 )(= (fun_app$f root$ (fun_app$e (h$ tr0$ )?v0 ))?v0 ))):named a23 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(= (fun_app$a (fun_app$d (inItr$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (fun_app$f root$ ?v3 ))(member$a (fun_app$f root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (fun_app$f root$ ?v3 )?v4 )(and (member$ (inr$a ?v5 )(cont$ ?v3 ))(fun_app$a (fun_app$d (inItr$ ?v4 )?v5 )?v6 )))))))))):named a24 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(= (fun_app$f root$ (fun_app$e (h$ ?v0 )?v1 ))(fun_app$f root$ (fun_app$e (pick$ ?v0 )?v1 )))):named a25 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (and (fun_app$a (fun_app$d (inItr$ ?v0 )?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (fun_app$f root$ ?v3 ))(member$a (fun_app$f root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (fun_app$f root$ ?v3 )?v4 )(and (member$ (inr$a ?v5 )(cont$ ?v3 ))(fun_app$a (fun_app$d (inItr$ ?v4 )?v5 )?v6 ))))))false ))))false )):named a26 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$a (fun_app$d (inItr$ ?v0 )?v1 )?v2 )(member$a (fun_app$f root$ ?v1 )?v0 ))):named a27 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (fun_app$a (fun_app$d (inItr$ top$ )?v0 )?v1 )(= (fun_app$f root$ (fun_app$e (h$ ?v0 )?v1 ))?v1 ))):named a28 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (fun_app$a (fun_app$d (inItr$ top$ )?v0 )?v1 )(= (fun_app$f root$ (fun_app$e (pick$ ?v0 )?v1 ))?v1 ))):named a29 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 N$ ))(=> (and (member$a (fun_app$f root$ ?v0 )?v1 )(and (member$ (inr$a ?v2 )(cont$ ?v0 ))(fun_app$a (fun_app$d (inItr$ ?v1 )?v2 )?v3 )))(fun_app$a (fun_app$d (inItr$ ?v1 )?v0 )?v3 ))):named a30 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(! (= (fun_app$h (h_r$ ?v0 )?v1 )(fun_app$f root$ (fun_app$e (pick$ ?v0 )?v1 ))):pattern ((fun_app$h (h_r$ ?v0 )?v1 )))):named a31 ))
(assert (! (forall ((?v0 N$ ))(=> (and (wf$ tr0$ )(fun_app$a (fun_app$d (inItr$ top$ )tr0$ )?v0 ))(wf$ (fun_app$e (pick$ tr0$ )?v0 )))):named a32 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (fun_app$a (fun_app$d (inItr$ top$ )?v0 )?v1 )(and (fun_app$i (subtr$ top$ (fun_app$e (pick$ ?v0 )?v1 ))?v0 )(= (fun_app$f root$ (fun_app$e (pick$ ?v0 )?v1 ))?v1 )))):named a33 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ ))(= (fun_app$k (comp$b ?v0 )id$a )?v0 )):named a34 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (fun_app$l (comp$c ?v0 )id$b )?v0 )):named a35 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$m (comp$d ?v0 )id$a )?v0 )):named a36 ))
(assert (! (forall ((?v0 N_dtree_fun$ ))(= (fun_app$n (comp$e ?v0 )id$b )?v0 )):named a37 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ ))(= (fun_app$k (comp$b id$a )?v0 )?v0 )):named a38 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (fun_app$l (comp$c id$b )?v0 )?v0 )):named a39 ))
(assert (! (forall ((?v0 N_dtree_fun$ ))(= (fun_app$o (comp$f id$a )?v0 )?v0 )):named a40 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$b (comp$ id$b )?v0 )?v0 )):named a41 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ ))(= (fun_app$k (comp$b id$a )?v0 )?v0 )):named a42 ))
(assert (! (forall ((?v0 N_N_fun$ ))(= (fun_app$l (comp$c id$b )?v0 )?v0 )):named a43 ))
(assert (! (forall ((?v0 N_dtree_fun$ ))(= (fun_app$o (comp$f id$a )?v0 )?v0 )):named a44 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$b (comp$ id$b )?v0 )?v0 )):named a45 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ )(?v2 Dtree$ ))(=> (and (fun_app$a (fun_app$d (inItr$ top$ )?v0 )?v1 )(fun_app$i (subtr$ top$ ?v2 )(fun_app$e (h$ ?v0 )?v1 )))(exists ((?v3 N$ ))(and (fun_app$a (fun_app$d (inItr$ top$ )?v0 )?v3 )(= ?v2 (fun_app$e (h$ ?v0 )?v3 )))))):named a46 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (fun_app$a (fun_app$d (inItr$ top$ )?v0 )?v1 )(fun_app$i (subtr$ top$ (fun_app$e (pick$ ?v0 )?v1 ))?v0 ))):named a47 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree_dtree_bool_fun_fun$ ))(=> (and (fun_app$i (subtr$ top$ ?v0 )?v1 )(and (forall ((?v3 Dtree$ ))(fun_app$i (fun_app$p ?v2 ?v3 )?v3 ))(forall ((?v3 Dtree$ )(?v4 Dtree$ )(?v5 Dtree$ ))(=> (and (member$ (inr$a ?v3 )(cont$ ?v4 ))(and (fun_app$i (subtr$ top$ ?v4 )?v5 )(fun_app$i (fun_app$p ?v2 ?v4 )?v5 )))(fun_app$i (fun_app$p ?v2 ?v3 )?v5 )))))(fun_app$i (fun_app$p ?v2 ?v0 )?v1 ))):named a48 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (fun_app$i (subtr$ ?v0 ?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (fun_app$f root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$a (fun_app$f root$ ?v3 )?v4 )(and (fun_app$i (subtr$ ?v4 ?v5 )?v6 )(member$ (inr$a ?v6 )(cont$ ?v3 ))))))))))):named a49 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set_dtree_dtree_bool_fun_fun_fun$ ))(=> (and (fun_app$i (subtr$ ?v0 ?v1 )?v2 )(and (forall ((?v4 N_set$ )(?v5 Dtree$ ))(fun_app$i (fun_app$p (fun_app$q ?v3 ?v4 )?v5 )?v5 ))(forall ((?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ )(?v7 Dtree$ ))(=> (and (member$a (fun_app$f root$ ?v5 )?v4 )(and (member$ (inr$a ?v5 )(cont$ ?v6 ))(and (fun_app$i (subtr$ ?v4 ?v6 )?v7 )(fun_app$i (fun_app$p (fun_app$q ?v3 ?v4 )?v6 )?v7 ))))(fun_app$i (fun_app$p (fun_app$q ?v3 ?v4 )?v5 )?v7 )))))(fun_app$i (fun_app$p (fun_app$q ?v3 ?v0 )?v1 )?v2 ))):named a50 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (fun_app$i (subtr$ ?v0 ?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (fun_app$f root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$a (fun_app$f root$ ?v3 )?v4 )(and (fun_app$i (subtr$ ?v4 ?v5 )?v6 )(member$ (inr$a ?v6 )(cont$ ?v3 )))))))false ))))false )):named a51 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$j (fun_app$k (comp$b ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$k (comp$b ?v0 )?v1 )?v2 )))):named a52 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$h (fun_app$l (comp$c ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$h ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$l (comp$c ?v0 )?v1 )?v2 )))):named a53 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$f (fun_app$m (comp$d ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$m (comp$d ?v0 )?v1 )?v2 )))):named a54 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$e (fun_app$o (comp$f ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$o (comp$f ?v0 )?v1 )?v2 )))):named a55 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$j (fun_app$r (comp$g ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$r (comp$g ?v0 )?v1 )?v2 )))):named a56 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$e (fun_app$n (comp$e ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$h ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$n (comp$e ?v0 )?v1 )?v2 )))):named a57 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$f (fun_app$b (comp$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$b (comp$ ?v0 )?v1 )?v2 )))):named a58 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$h (fun_app$c (comp$a ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$c (comp$a ?v0 )?v1 )?v2 )))):named a59 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$j id$a ?v0 )?v0 ):pattern ((fun_app$j id$a ?v0 )))):named a60 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$h id$b ?v0 )?v0 ):pattern ((fun_app$h id$b ?v0 )))):named a61 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$s id$ ?v0 )?v0 ):pattern ((fun_app$s id$ ?v0 )))):named a62 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a63 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$a ?v0 )(inr$a ?v1 ))(= ?v0 ?v1 ))):named a64 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a65 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$a ?v0 )(inr$a ?v1 ))(= ?v0 ?v1 ))):named a66 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(and (member$ (inr$a ?v1 )(cont$ ?v0 ))(member$ (inr$a ?v2 )(cont$ ?v0 ))))(= (= (fun_app$f root$ ?v1 )(fun_app$f root$ ?v2 ))(= ?v1 ?v2 )))):named a67 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(fun_app$i (subtr$ ?v1 ?v2 )?v0 ))(wf$ ?v2 ))):named a68 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$i (subtr$ ?v0 ?v1 )?v2 )(fun_app$i (subtr$ ?v0 ?v2 )?v3 ))(fun_app$i (subtr$ ?v0 ?v1 )?v3 ))):named a69 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$ (inr$a ?v1 )(cont$ ?v0 )))(wf$ ?v1 ))):named a70 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$k (comp$b ?v0 )?v1 )?v2 )(= (fun_app$j ?v0 (fun_app$j ?v1 ?v3 ))(fun_app$j ?v2 ?v3 )))):named a71 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$l (comp$c ?v0 )?v1 )?v2 )(= (fun_app$h ?v0 (fun_app$h ?v1 ?v3 ))(fun_app$h ?v2 ?v3 )))):named a72 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$m (comp$d ?v0 )?v1 )?v2 )(= (fun_app$f ?v0 (fun_app$j ?v1 ?v3 ))(fun_app$f ?v2 ?v3 )))):named a73 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N$ ))(=> (= (fun_app$o (comp$f ?v0 )?v1 )?v2 )(= (fun_app$j ?v0 (fun_app$e ?v1 ?v3 ))(fun_app$e ?v2 ?v3 )))):named a74 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$r (comp$g ?v0 )?v1 )?v2 )(= (fun_app$e ?v0 (fun_app$f ?v1 ?v3 ))(fun_app$j ?v2 ?v3 )))):named a75 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N_dtree_fun$ )(?v3 N$ ))(=> (= (fun_app$n (comp$e ?v0 )?v1 )?v2 )(= (fun_app$e ?v0 (fun_app$h ?v1 ?v3 ))(fun_app$e ?v2 ?v3 )))):named a76 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$b (comp$ ?v0 )?v1 )?v2 )(= (fun_app$h ?v0 (fun_app$f ?v1 ?v3 ))(fun_app$f ?v2 ?v3 )))):named a77 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N$ ))(=> (= (fun_app$c (comp$a ?v0 )?v1 )?v2 )(= (fun_app$f ?v0 (fun_app$e ?v1 ?v3 ))(fun_app$h ?v2 ?v3 )))):named a78 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$b (comp$ ?v0 )?v1 )(fun_app$b (comp$ ?v2 )?v3 ))(= (fun_app$h ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$f ?v3 ?v4 ))))):named a79 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$c (comp$a ?v0 )?v1 )(fun_app$c (comp$a ?v2 )?v3 ))(= (fun_app$f ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$e ?v3 ?v4 ))))):named a80 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$b (comp$ ?v0 )?v1 )(fun_app$m (comp$d ?v2 )?v3 ))(= (fun_app$h ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$j ?v3 ?v4 ))))):named a81 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N$ ))(=> (= (fun_app$c (comp$a ?v0 )?v1 )(fun_app$l (comp$c ?v2 )?v3 ))(= (fun_app$f ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$h ?v3 ?v4 ))))):named a82 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$l (comp$c ?v0 )?v1 )(fun_app$c (comp$a ?v2 )?v3 ))(= (fun_app$h ?v0 (fun_app$h ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$e ?v3 ?v4 ))))):named a83 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ )(?v4 N$ ))(=> (= (fun_app$l (comp$c ?v0 )?v1 )(fun_app$l (comp$c ?v2 )?v3 ))(= (fun_app$h ?v0 (fun_app$h ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$h ?v3 ?v4 ))))):named a84 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$m (comp$d ?v0 )?v1 )(fun_app$b (comp$ ?v2 )?v3 ))(= (fun_app$f ?v0 (fun_app$j ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$f ?v3 ?v4 ))))):named a85 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$m (comp$d ?v0 )?v1 )(fun_app$m (comp$d ?v2 )?v3 ))(= (fun_app$f ?v0 (fun_app$j ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$j ?v3 ?v4 ))))):named a86 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ )(?v4 N$ ))(=> (= (fun_app$o (comp$f ?v0 )?v1 )(fun_app$o (comp$f ?v2 )?v3 ))(= (fun_app$j ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$j ?v2 (fun_app$e ?v3 ?v4 ))))):named a87 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ )(?v4 N$ ))(=> (= (fun_app$o (comp$f ?v0 )?v1 )(fun_app$n (comp$e ?v2 )?v3 ))(= (fun_app$j ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$h ?v3 ?v4 ))))):named a88 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (fun_app$b (comp$ ?v0 )?v1 )(fun_app$b (comp$ ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$h ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$f ?v3 ?v4 ))))false ))false )):named a89 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$c (comp$a ?v0 )?v1 )(fun_app$c (comp$a ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$f ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$e ?v3 ?v4 ))))false ))false )):named a90 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= (fun_app$b (comp$ ?v0 )?v1 )(fun_app$m (comp$d ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$h ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$j ?v3 ?v4 ))))false ))false )):named a91 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (and (= (fun_app$c (comp$a ?v0 )?v1 )(fun_app$l (comp$c ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$f ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$h ?v3 ?v4 ))))false ))false )):named a92 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$l (comp$c ?v0 )?v1 )(fun_app$c (comp$a ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$h ?v0 (fun_app$h ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$e ?v3 ?v4 ))))false ))false )):named a93 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (and (= (fun_app$l (comp$c ?v0 )?v1 )(fun_app$l (comp$c ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$h ?v0 (fun_app$h ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$h ?v3 ?v4 ))))false ))false )):named a94 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (fun_app$m (comp$d ?v0 )?v1 )(fun_app$b (comp$ ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$f ?v0 (fun_app$j ?v1 ?v4 ))(fun_app$h ?v2 (fun_app$f ?v3 ?v4 ))))false ))false )):named a95 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= (fun_app$m (comp$d ?v0 )?v1 )(fun_app$m (comp$d ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$f ?v0 (fun_app$j ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$j ?v3 ?v4 ))))false ))false )):named a96 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 N_dtree_fun$ ))(=> (and (= (fun_app$o (comp$f ?v0 )?v1 )(fun_app$o (comp$f ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$j ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$j ?v2 (fun_app$e ?v3 ?v4 ))))false ))false )):named a97 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 N_N_fun$ ))(=> (and (= (fun_app$o (comp$f ?v0 )?v1 )(fun_app$n (comp$e ?v2 )?v3 ))(=> (forall ((?v4 N$ ))(= (fun_app$j ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$h ?v3 ?v4 ))))false ))false )):named a98 ))
(assert (! (forall ((?v0 N_bool_fun$ )(?v1 N_bool_fun$ ))(=> (forall ((?v2 N$ ))(= (fun_app$a ?v0 ?v2 )(fun_app$a ?v1 ?v2 )))(= (collect$ ?v0 )(collect$ ?v1 )))):named a99 ))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$ )(?v1 T_dtree_sum_bool_fun$ ))(=> (forall ((?v2 T_dtree_sum$ ))(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 )))(= (collect$a ?v0 )(collect$a ?v1 )))):named a100 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (collect$a (uu$ ?v0 ))?v0 )):named a101 ))
(assert (! (forall ((?v0 N_set$ ))(= (collect$ (uua$ ?v0 ))?v0 )):named a102 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_bool_fun$ ))(= (member$ ?v0 (collect$a ?v1 ))(fun_app$ ?v1 ?v0 ))):named a103 ))
(assert (! (forall ((?v0 N$ )(?v1 N_bool_fun$ ))(= (member$a ?v0 (collect$ ?v1 ))(fun_app$a ?v1 ?v0 ))):named a104 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$j (fun_app$k (comp$b ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$k (comp$b ?v0 )?v1 )?v2 )))):named a105 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$h (fun_app$l (comp$c ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$h ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$l (comp$c ?v0 )?v1 )?v2 )))):named a106 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$f (fun_app$m (comp$d ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$m (comp$d ?v0 )?v1 )?v2 )))):named a107 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$e (fun_app$o (comp$f ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$o (comp$f ?v0 )?v1 )?v2 )))):named a108 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$j (fun_app$r (comp$g ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$r (comp$g ?v0 )?v1 )?v2 )))):named a109 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$e (fun_app$n (comp$e ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$h ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$n (comp$e ?v0 )?v1 )?v2 )))):named a110 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$f (fun_app$b (comp$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$b (comp$ ?v0 )?v1 )?v2 )))):named a111 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$h (fun_app$c (comp$a ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$c (comp$a ?v0 )?v1 )?v2 )))):named a112 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$m (comp$d (fun_app$b (comp$ ?v0 )?v1 ))?v2 )(fun_app$b (comp$ ?v0 )(fun_app$m (comp$d ?v1 )?v2 )))):named a113 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$l (comp$c (fun_app$c (comp$a ?v0 )?v1 ))?v2 )(fun_app$c (comp$a ?v0 )(fun_app$n (comp$e ?v1 )?v2 )))):named a114 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$b (comp$ (fun_app$l (comp$c ?v0 )?v1 ))?v2 )(fun_app$b (comp$ ?v0 )(fun_app$b (comp$ ?v1 )?v2 )))):named a115 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$b (comp$ (fun_app$c (comp$a ?v0 )?v1 ))?v2 )(fun_app$m (comp$d ?v0 )(fun_app$r (comp$g ?v1 )?v2 )))):named a116 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$c (comp$a (fun_app$m (comp$d ?v0 )?v1 ))?v2 )(fun_app$c (comp$a ?v0 )(fun_app$o (comp$f ?v1 )?v2 )))):named a117 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$c (comp$a (fun_app$b (comp$ ?v0 )?v1 ))?v2 )(fun_app$l (comp$c ?v0 )(fun_app$c (comp$a ?v1 )?v2 )))):named a118 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$k (comp$b (fun_app$r (comp$g ?v0 )?v1 ))?v2 )(fun_app$r (comp$g ?v0 )(fun_app$m (comp$d ?v1 )?v2 )))):named a119 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ ))(= (fun_app$l (comp$c (fun_app$l (comp$c ?v0 )?v1 ))?v2 )(fun_app$l (comp$c ?v0 )(fun_app$l (comp$c ?v1 )?v2 )))):named a120 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$m (comp$d (fun_app$m (comp$d ?v0 )?v1 ))?v2 )(fun_app$m (comp$d ?v0 )(fun_app$k (comp$b ?v1 )?v2 )))):named a121 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$o (comp$f (fun_app$k (comp$b ?v0 )?v1 ))?v2 )(fun_app$o (comp$f ?v0 )(fun_app$o (comp$f ?v1 )?v2 )))):named a122 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$m (comp$d ?v0 )(fun_app$r (comp$g ?v1 )?v2 ))(fun_app$b (comp$ (fun_app$c (comp$a ?v0 )?v1 ))?v2 ))):named a123 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$l (comp$c ?v0 )(fun_app$c (comp$a ?v1 )?v2 ))(fun_app$c (comp$a (fun_app$b (comp$ ?v0 )?v1 ))?v2 ))):named a124 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$b (comp$ ?v0 )(fun_app$m (comp$d ?v1 )?v2 ))(fun_app$m (comp$d (fun_app$b (comp$ ?v0 )?v1 ))?v2 ))):named a125 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$b (comp$ ?v0 )(fun_app$b (comp$ ?v1 )?v2 ))(fun_app$b (comp$ (fun_app$l (comp$c ?v0 )?v1 ))?v2 ))):named a126 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 N_N_fun$ ))(= (fun_app$c (comp$a ?v0 )(fun_app$n (comp$e ?v1 )?v2 ))(fun_app$l (comp$c (fun_app$c (comp$a ?v0 )?v1 ))?v2 ))):named a127 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$c (comp$a ?v0 )(fun_app$o (comp$f ?v1 )?v2 ))(fun_app$c (comp$a (fun_app$m (comp$d ?v0 )?v1 ))?v2 ))):named a128 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$k (comp$b ?v0 )(fun_app$r (comp$g ?v1 )?v2 ))(fun_app$r (comp$g (fun_app$o (comp$f ?v0 )?v1 ))?v2 ))):named a129 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_N_fun$ )(?v2 N_N_fun$ ))(= (fun_app$l (comp$c ?v0 )(fun_app$l (comp$c ?v1 )?v2 ))(fun_app$l (comp$c (fun_app$l (comp$c ?v0 )?v1 ))?v2 ))):named a130 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$m (comp$d ?v0 )(fun_app$k (comp$b ?v1 )?v2 ))(fun_app$m (comp$d (fun_app$m (comp$d ?v0 )?v1 ))?v2 ))):named a131 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ ))(= (fun_app$o (comp$f ?v0 )(fun_app$o (comp$f ?v1 )?v2 ))(fun_app$o (comp$f (fun_app$k (comp$b ?v0 )?v1 ))?v2 ))):named a132 ))
(check-sat )
;(get-unsat-core )
