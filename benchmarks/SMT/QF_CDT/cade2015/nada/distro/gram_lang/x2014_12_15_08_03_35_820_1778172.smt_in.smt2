;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun t$ ()T$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun ns$a ()N_set$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun node$ (N$ T_dtree_sum_set$ )Dtree$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun inFr2$ (N_set$ Dtree$ T$ )Bool )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun less_eq$a (T_dtree_sum_set$ T_dtree_sum_set$ )Bool )
(assert (! (not (inFr2$ ns$ tr$ t$ )):named a0 ))
(assert (! (less_eq$ ns$a ns$ ):named a1 ))
(assert (! (inFr2$ ns$a tr$ t$ ):named a2 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (inFr2$ ?v0 ?v1 ?v2 )(member$ (root$ ?v1 )?v0 ))):named a3 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (member$ (root$ ?v0 )?v1 )(member$a (inl$ ?v2 )(cont$ ?v0 )))(inFr2$ ?v1 ?v0 ?v2 ))):named a4 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ ))(=> (forall ((?v2 T_dtree_sum$ ))(=> (member$a ?v2 ?v0 )(member$a ?v2 ?v1 )))(less_eq$a ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(=> (forall ((?v2 N$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 )))(less_eq$ ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ ))(=> (and (less_eq$a ?v0 ?v1 )(less_eq$a ?v1 ?v0 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(less_eq$a ?v0 ?v0 )):named a12 ))
(assert (! (forall ((?v0 N_set$ ))(less_eq$ ?v0 ?v0 )):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (member$ (root$ ?v0 )?v1 )(member$a (inl$ ?v2 )(cont$ ?v0 )))(inFr$ ?v1 ?v0 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 N_set$ ))(=> (and (inFr$ ?v0 ?v1 ?v2 )(less_eq$ ?v0 ?v3 ))(inFr$ ?v3 ?v1 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(=> (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Dtree$ ))(= (node$ (root$ ?v0 )(cont$ ?v0 ))?v0 )):named a17 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ ))(= (= ?v0 ?v1 )(and (less_eq$a ?v0 ?v1 )(less_eq$a ?v1 ?v0 )))):named a18 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(= (= ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 )))):named a19 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ ))(= (less_eq$a ?v0 ?v1 )(forall ((?v2 T_dtree_sum$ ))(=> (member$a ?v2 ?v0 )(member$a ?v2 ?v1 ))))):named a20 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ ))(= (less_eq$ ?v0 ?v1 )(forall ((?v2 N$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 ))))):named a21 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_set$ ))(= (root$ (node$ ?v0 ?v1 ))?v0 )):named a22 ))
(check-sat )
;(get-unsat-core )
