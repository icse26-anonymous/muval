;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort N_list$ 0)
(declare-sort N_option$ 0)
(declare-fun nil$ ()N_list$)
(declare-fun hd$ (N_list$)N$)
(declare-fun tl$ (N_list$)N_list$)
(declare-fun cons$ (N$ N_list$ )N_list$)
(declare-fun none$ ()N_option$)
(declare-fun the$ (N_option$)N$)
(declare-fun some$ (N$ )N_option$)
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun nl$ ()N_list$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun nl1$ ()N_list$ )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun find$ (N_bool_fun$ N_list$ )N_option$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun insert$ (N$ N_list$ )N_list$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun fun_app$ (N_dtree_fun$ N$ )Dtree$ )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(declare-fun listMem$ (N$ N_list$ )Bool )
(declare-fun member$a (N_list$ )N_bool_fun$ )
(declare-fun regular$ (Dtree$ )Bool )
(declare-fun rotate1$ (N_list$ )N_list$ )
(declare-fun fun_app$a (N_bool_fun$ N$ )Bool )
(declare-fun list_ex1$ (N_bool_fun$ N_list$ )Bool )
(declare-fun removeAll$ (N$ N_list$ )N_list$ )
(assert (! (not (not (member$ n$ (set$ nl1$ )))):named a0 ))
(assert (! (= nl$ (cons$ n$ nl1$ )):named a1 ))
(assert (! (regular$ tr$ ):named a2 ))
(assert (! (= (fun_app$ f$ n$ )tr$ ):named a3 ))
(assert (! (less_eq$ (set$ nl$ )ns$ ):named a4 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(= (member$ ?v0 (set$ ?v1 ))(fun_app$a (member$a ?v1 )?v0 ))):named a5 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(! (=> (member$ ?v0 (set$ ?v1 ))(= (insert$ ?v0 ?v1 )?v1 )):pattern ((insert$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 N_bool_fun$ )(?v1 N_list$ ))(= (list_ex1$ ?v0 ?v1 )(exists ((?v2 N$ ))(and (and (member$ ?v2 (set$ ?v1 ))(fun_app$a ?v0 ?v2 ))(forall ((?v3 N$ ))(=> (and (member$ ?v3 (set$ ?v1 ))(fun_app$a ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a7 ))
(assert (! (forall ((?v0 N_list$ ))(= (set$ (rotate1$ ?v0 ))(set$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(! (= (listMem$ ?v0 ?v1 )(member$ ?v0 (set$ ?v1 ))):pattern ((listMem$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(! (=> (not (member$ ?v0 (set$ ?v1 )))(= (removeAll$ ?v0 ?v1 )?v1 )):pattern ((removeAll$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list$ )(?v2 N_bool_fun$ )(?v3 N_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 N$ ))(=> (member$ ?v4 (set$ ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (find$ ?v2 ?v0 )(find$ ?v3 ?v1 )))):named a11 ))
(assert (! (=> (forall ((?v0 N$ )(?v1 N_list$ ))(=> (= nl$ (cons$ ?v0 ?v1 ))false ))false ):named a12 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N$ )(?v3 N_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (reg$ f$ tr$ ):named a14 ))
(assert (! (path$ f$ nl$ ):named a15 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(! (=> (not (member$ ?v0 (set$ ?v1 )))(= (insert$ ?v0 ?v1 )(cons$ ?v0 ?v1 ))):pattern ((insert$ ?v0 ?v1 )))):named a16 ))
(check-sat )
;(get-unsat-core )
