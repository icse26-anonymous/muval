;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun t$ ()T$ )
(declare-fun ns$ ()N_set$ )
(declare-fun uu$ ()T_T_dtree_sum_fun$ )
(declare-fun bot$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun inFrr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun minus$ (N_set$ N_set$ )N_set$ )
(declare-fun hsubst$ (Dtree$ Dtree$ )Dtree$ )
(declare-fun insert$ (N$ N_set$ )N_set$ )
(declare-fun member$ (T$ T_set$ )Bool )
(declare-fun vimage$ (T_T_dtree_sum_fun$ T_dtree_sum_set$ )T_set$ )
(declare-fun fun_app$ (T_T_dtree_sum_fun$ T$ )T_dtree_sum$ )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun member$b (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun hsubst_c$ (Dtree$ Dtree$ )T_dtree_sum_set$ )
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$ uu$ ?v0 )(inl$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (inFr$ ns$ (hsubst$ tr0$ tr0$ )t$ )):named a1 ))
(assert (! (or (member$ t$ (vimage$ uu$ (cont$ tr0$ )))(inFrr$ (minus$ ns$ (insert$ (root$ tr0$ )bot$ ))tr0$ t$ )):named a2 ))
(assert (! (member$a (root$ tr0$ )ns$ ):named a3 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (= (root$ ?v0 )(root$ tr0$ ))(= (hsubst$ tr0$ ?v0 )(hsubst$ tr0$ tr0$ )))):named a4 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (and (inFr$ ?v0 ?v1 ?v2 )(not (member$a (root$ tr0$ )?v0 )))(inFr$ ?v0 (hsubst$ tr0$ ?v1 )?v2 ))):named a5 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (inFr$ (minus$ ?v0 (insert$ (root$ tr0$ )bot$ ))?v1 ?v2 )(inFr$ ?v0 (hsubst$ tr0$ ?v1 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (inFr$ ?v0 (hsubst$ tr0$ ?v1 )?v2 )(or (member$ ?v2 (vimage$ uu$ (cont$ tr0$ )))(or (inFrr$ (minus$ ?v0 (insert$ (root$ tr0$ )bot$ ))tr0$ ?v2 )(inFr$ (minus$ ?v0 (insert$ (root$ tr0$ )bot$ ))?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 Dtree$ ))(= (root$ (hsubst$ tr0$ ?v0 ))(root$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst_c$ tr0$ ?v0 )(ite (= (root$ ?v0 )(root$ tr0$ ))(cont$ tr0$ )(cont$ ?v0 ))):pattern ((hsubst_c$ tr0$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (= (root$ ?v0 )(root$ tr0$ ))(= (vimage$ uu$ (cont$ (hsubst$ tr0$ ?v0 )))(vimage$ uu$ (cont$ tr0$ ))))):named a10 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (not (= (root$ ?v0 )(root$ tr0$ )))(= (vimage$ uu$ (cont$ (hsubst$ tr0$ ?v0 )))(vimage$ uu$ (cont$ ?v0 ))))):named a11 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (root$ (hsubst$ ?v0 ?v1 ))(root$ ?v1 ))):named a12 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 T$ ))(=> (inFr$ (minus$ ?v0 (insert$ (root$ ?v1 )bot$ ))?v2 ?v3 )(inFr$ ?v0 (hsubst$ ?v1 ?v2 )?v3 ))):named a13 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 T$ ))(=> (inFr$ ?v0 (hsubst$ ?v1 ?v2 )?v3 )(or (member$ ?v3 (vimage$ uu$ (cont$ ?v1 )))(or (inFrr$ (minus$ ?v0 (insert$ (root$ ?v1 )bot$ ))?v1 ?v3 )(inFr$ (minus$ ?v0 (insert$ (root$ ?v1 )bot$ ))?v2 ?v3 ))))):named a14 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (inFr$ ?v0 ?v1 ?v2 )(not (member$a (root$ ?v3 )?v0 )))(inFr$ ?v0 (hsubst$ ?v3 ?v1 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (inFr$ ?v0 ?v1 ?v2 )(member$a (root$ ?v1 )?v0 ))):named a16 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (root$ ?v0 )(root$ ?v1 ))(= (vimage$ uu$ (cont$ (hsubst$ ?v1 ?v0 )))(vimage$ uu$ (cont$ ?v1 ))))):named a17 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (root$ ?v0 )(root$ ?v1 ))(= (hsubst$ ?v1 ?v0 )(hsubst$ ?v1 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (member$a (root$ ?v0 )?v1 )(member$b (inl$ ?v2 )(cont$ ?v0 )))(inFr$ ?v1 ?v0 ?v2 ))):named a19 ))
(check-sat )
;(get-unsat-core )
