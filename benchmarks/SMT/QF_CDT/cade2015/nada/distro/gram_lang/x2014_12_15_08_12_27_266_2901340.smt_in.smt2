;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort N_list$ 0)
(declare-fun nil$ ()N_list$)
(declare-fun hd$ (N_list$)N$)
(declare-fun tl$ (N_list$)N_list$)
(declare-fun cons$ (N$ N_list$ )N_list$)
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun n1$ ()N$ )
(declare-fun nl$ ()N_list$ )
(declare-fun nla$ ()N_list$ )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun last$ (N_list$ )N$ )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun insert$ (N$ N_set$ )N_set$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun fun_app$ (N_dtree_fun$ N$ )Dtree$ )
(assert (! (not (subtr$ (insert$ n$ (insert$ n1$ (set$ nla$ )))(fun_app$ f$ (last$ (cons$ n1$ nla$ )))(fun_app$ f$ n$ ))):named a0 ))
(assert (! (forall ((?v0 N$ ))(= (root$ (fun_app$ f$ ?v0 ))?v0 )):named a1 ))
(assert (! (path$ f$ nl$ ):named a2 ))
(assert (! (= (last$ (cons$ n$ (cons$ n1$ nla$ )))(last$ (cons$ n1$ nla$ ))):named a3 ))
(assert (! (path$ f$ (cons$ n1$ nla$ )):named a4 ))
(assert (! (subtr$ (insert$ n1$ (set$ nla$ ))(fun_app$ f$ (last$ (cons$ n1$ nla$ )))(fun_app$ f$ n1$ )):named a5 ))
(assert (! (subtr$ (insert$ n$ (insert$ n1$ (set$ nla$ )))(fun_app$ f$ (last$ (cons$ n1$ nla$ )))(fun_app$ f$ n1$ )):named a6 ))
(assert (! (subtr$ (set$ (cons$ n1$ nla$ ))(fun_app$ f$ (last$ (cons$ n1$ nla$ )))(fun_app$ f$ (hd$ (cons$ n1$ nla$ )))):named a7 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(subtr$ ?v0 ?v2 ?v3 ))(subtr$ ?v0 ?v1 ?v3 ))):named a8 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(! (= (set$ (cons$ ?v0 ?v1 ))(insert$ ?v0 (set$ ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N_set$ ))(= (member$ ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$ ?v2 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N$ )(?v3 N_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N_list$ ))(=> (member$ ?v0 (set$ (cons$ ?v1 ?v2 )))(or (= ?v0 ?v1 )(member$ ?v0 (set$ ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(=> (and (member$ ?v0 (set$ ?v1 ))(and (forall ((?v2 N_list$ ))(=> (= ?v1 (cons$ ?v0 ?v2 ))false ))(forall ((?v2 N$ )(?v3 N_list$ ))(=> (and (= ?v1 (cons$ ?v2 ?v3 ))(member$ ?v0 (set$ ?v3 )))false ))))false )):named a15 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N$ ))(=> (member$ ?v0 (set$ ?v1 ))(member$ ?v0 (set$ (cons$ ?v2 ?v1 ))))):named a16 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(member$ ?v0 (set$ (cons$ ?v0 ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
