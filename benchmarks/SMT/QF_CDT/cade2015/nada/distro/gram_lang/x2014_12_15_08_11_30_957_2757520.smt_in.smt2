;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort N_list_bool_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort N_list_list_bool_fun$ 0 )
(declare-sort N_list_list_list_bool_fun$ 0 )
(declare-sort N_list_N_list_bool_fun_fun$ 0 )
(declare-sort N_list_N_list_list_bool_fun_fun$ 0 )
(declare-sort N_list_list_N_list_bool_fun_fun$ 0 )
(declare-sort N_list_N_list_list_list_bool_fun_fun$ 0 )
(declare-sort N_list_list_N_list_list_bool_fun_fun$ 0 )
(declare-sort N_list_list_list_N_list_bool_fun_fun$ 0 )
(declare-sort N_list_list_N_list_list_list_bool_fun_fun$ 0 )
(declare-sort N_list_list_list_N_list_list_bool_fun_fun$ 0 )
(declare-sort N_list_list_list_N_list_list_list_bool_fun_fun$ 0 )
(declare-sort N_list$ 0)
(declare-sort T_dtree_sum$ 0)
(declare-sort N_list_list$ 0)
(declare-sort N_list_list_list$ 0)
(declare-sort N_list_list_list_list$ 0)
(declare-fun nil$ ()N_list$)
(declare-fun hd$ (N_list$)N$)
(declare-fun tl$ (N_list$)N_list$)
(declare-fun cons$ (N$ N_list$ )N_list$)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun nil$a ()N_list_list$)
(declare-fun hd$a (N_list_list$)N_list$)
(declare-fun tl$a (N_list_list$)N_list_list$)
(declare-fun cons$a (N_list$ N_list_list$ )N_list_list$)
(declare-fun nil$b ()N_list_list_list$)
(declare-fun hd$b (N_list_list_list$)N_list_list$)
(declare-fun tl$b (N_list_list_list$)N_list_list_list$)
(declare-fun cons$b (N_list_list$ N_list_list_list$ )N_list_list_list$)
(declare-fun nil$c ()N_list_list_list_list$)
(declare-fun hd$c (N_list_list_list_list$)N_list_list_list$)
(declare-fun tl$c (N_list_list_list_list$)N_list_list_list_list$)
(declare-fun cons$c (N_list_list_list$ N_list_list_list_list$ )N_list_list_list_list$)
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun nl$ ()N_list$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun path$ (N_dtree_fun$ )N_list_bool_fun$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$ (N_list_bool_fun$ N_list$ )Bool )
(declare-fun fun_app$a (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$b (N_list_list_list_bool_fun$ N_list_list_list$ )Bool )
(declare-fun fun_app$c (N_list_list_bool_fun$ N_list_list$ )Bool )
(declare-fun fun_app$d (N_list_N_list_list_list_bool_fun_fun$ N_list$ )N_list_list_list_bool_fun$ )
(declare-fun fun_app$e (N_list_list_N_list_list_list_bool_fun_fun$ N_list_list$ )N_list_list_list_bool_fun$ )
(declare-fun fun_app$f (N_list_list_list_N_list_bool_fun_fun$ N_list_list_list$ )N_list_bool_fun$ )
(declare-fun fun_app$g (N_list_list_list_N_list_list_bool_fun_fun$ N_list_list_list$ )N_list_list_bool_fun$ )
(declare-fun fun_app$h (N_list_list_list_N_list_list_list_bool_fun_fun$ N_list_list_list$ )N_list_list_list_bool_fun$ )
(declare-fun fun_app$i (N_list_N_list_list_bool_fun_fun$ N_list$ )N_list_list_bool_fun$ )
(declare-fun fun_app$j (N_list_list_N_list_bool_fun_fun$ N_list_list$ )N_list_bool_fun$ )
(declare-fun fun_app$k (N_list_list_N_list_list_bool_fun_fun$ N_list_list$ )N_list_list_bool_fun$ )
(declare-fun fun_app$l (N_list_N_list_bool_fun_fun$ N_list$ )N_list_bool_fun$ )
(assert (! (not (fun_app$ (path$ f$ )nl$ )):named a0 ))
(assert (! (not (= nl$ nil$ )):named a1 ))
(assert (! (fun_app$ (path$ f$ )(cons$ n$ nl$ )):named a2 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ ))(=> (fun_app$ (path$ ?v0 )?v1 )(not (= ?v1 nil$ )))):named a3 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ ))(fun_app$ (path$ ?v0 )(cons$ ?v1 nil$ ))):named a4 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ )(?v2 N_list$ )(?v3 N$ ))(=> (and (fun_app$ (path$ ?v0 )(cons$ ?v1 ?v2 ))(member$ (inr$ (fun_app$a ?v0 ?v1 ))(cont$ (fun_app$a ?v0 ?v3 ))))(fun_app$ (path$ ?v0 )(cons$ ?v3 (cons$ ?v1 ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ ))(= (fun_app$ (path$ ?v0 )?v1 )(or (exists ((?v2 N$ ))(= ?v1 (cons$ ?v2 nil$ )))(exists ((?v2 N$ )(?v3 N_list$ )(?v4 N$ ))(and (= ?v1 (cons$ ?v4 (cons$ ?v2 ?v3 )))(and (fun_app$ (path$ ?v0 )(cons$ ?v2 ?v3 ))(member$ (inr$ (fun_app$a ?v0 ?v2 ))(cont$ (fun_app$a ?v0 ?v4 ))))))))):named a6 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_list$ ))(=> (and (fun_app$ (path$ ?v0 )?v1 )(and (forall ((?v2 N$ ))(=> (= ?v1 (cons$ ?v2 nil$ ))false ))(forall ((?v2 N$ )(?v3 N_list$ )(?v4 N$ ))(=> (and (= ?v1 (cons$ ?v4 (cons$ ?v2 ?v3 )))(and (fun_app$ (path$ ?v0 )(cons$ ?v2 ?v3 ))(member$ (inr$ (fun_app$a ?v0 ?v2 ))(cont$ (fun_app$a ?v0 ?v4 )))))false ))))false )):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 N_list_list$ )(?v1 N_list_list_list$ )(?v2 N_list_list$ )(?v3 N_list_list_list$ ))(= (= (cons$b ?v0 ?v1 )(cons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list_list$ )(?v2 N_list$ )(?v3 N_list_list$ ))(= (= (cons$a ?v0 ?v1 )(cons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N$ )(?v3 N_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 N_list_list_list$ ))(= (not (= ?v0 nil$b ))(exists ((?v1 N_list_list$ )(?v2 N_list_list_list$ ))(= ?v0 (cons$b ?v1 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 N_list_list$ ))(= (not (= ?v0 nil$a ))(exists ((?v1 N_list$ )(?v2 N_list_list$ ))(= ?v0 (cons$a ?v1 ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 N_list$ ))(= (not (= ?v0 nil$ ))(exists ((?v1 N$ )(?v2 N_list$ ))(= ?v0 (cons$ ?v1 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 N_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(and (forall ((?v1 N_list_list$ ))(=> (= ?v0 (cons$b ?v1 nil$b ))false ))(forall ((?v1 N_list_list$ )(?v2 N_list_list$ )(?v3 N_list_list_list$ ))(=> (= ?v0 (cons$b ?v1 (cons$b ?v2 ?v3 )))false ))))false )):named a16 ))
(assert (! (forall ((?v0 N_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(and (forall ((?v1 N_list$ ))(=> (= ?v0 (cons$a ?v1 nil$a ))false ))(forall ((?v1 N_list$ )(?v2 N_list$ )(?v3 N_list_list$ ))(=> (= ?v0 (cons$a ?v1 (cons$a ?v2 ?v3 )))false ))))false )):named a17 ))
(assert (! (forall ((?v0 N_list$ ))(=> (and (=> (= ?v0 nil$ )false )(and (forall ((?v1 N$ ))(=> (= ?v0 (cons$ ?v1 nil$ ))false ))(forall ((?v1 N$ )(?v2 N$ )(?v3 N_list$ ))(=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3 )))false ))))false )):named a18 ))
(assert (! (forall ((?v0 N_list_list_list_list$ ))(=> (and (=> (= ?v0 nil$c )false )(and (forall ((?v1 N_list_list_list_list$ ))(=> (= ?v0 (cons$c nil$b ?v1 ))false ))(forall ((?v1 N_list_list$ )(?v2 N_list_list_list$ )(?v3 N_list_list_list_list$ ))(=> (= ?v0 (cons$c (cons$b ?v1 ?v2 )?v3 ))false ))))false )):named a19 ))
(assert (! (forall ((?v0 N_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(and (forall ((?v1 N_list_list_list$ ))(=> (= ?v0 (cons$b nil$a ?v1 ))false ))(forall ((?v1 N_list$ )(?v2 N_list_list$ )(?v3 N_list_list_list$ ))(=> (= ?v0 (cons$b (cons$a ?v1 ?v2 )?v3 ))false ))))false )):named a20 ))
(assert (! (forall ((?v0 N_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(and (forall ((?v1 N_list_list$ ))(=> (= ?v0 (cons$a nil$ ?v1 ))false ))(forall ((?v1 N$ )(?v2 N_list$ )(?v3 N_list_list$ ))(=> (= ?v0 (cons$a (cons$ ?v1 ?v2 )?v3 ))false ))))false )):named a21 ))
(assert (! (forall ((?v0 N_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(forall ((?v1 N_list_list$ )(?v2 N_list_list_list$ ))(=> (= ?v0 (cons$b ?v1 ?v2 ))false )))false )):named a22 ))
(assert (! (forall ((?v0 N_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(forall ((?v1 N_list$ )(?v2 N_list_list$ ))(=> (= ?v0 (cons$a ?v1 ?v2 ))false )))false )):named a23 ))
(assert (! (forall ((?v0 N_list$ ))(=> (and (=> (= ?v0 nil$ )false )(forall ((?v1 N$ )(?v2 N_list$ ))(=> (= ?v0 (cons$ ?v1 ?v2 ))false )))false )):named a24 ))
(assert (! (forall ((?v0 N_list_list_list$ )(?v1 N_list_list$ )(?v2 N_list_list_list$ ))(=> (= ?v0 (cons$b ?v1 ?v2 ))(not (= ?v0 nil$b )))):named a25 ))
(assert (! (forall ((?v0 N_list_list$ )(?v1 N_list$ )(?v2 N_list_list$ ))(=> (= ?v0 (cons$a ?v1 ?v2 ))(not (= ?v0 nil$a )))):named a26 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N$ )(?v2 N_list$ ))(=> (= ?v0 (cons$ ?v1 ?v2 ))(not (= ?v0 nil$ )))):named a27 ))
(assert (! (forall ((?v0 N_list_list_list$ )(?v1 N_list_list_list_bool_fun$ ))(=> (and (not (= ?v0 nil$b ))(and (forall ((?v2 N_list_list$ ))(fun_app$b ?v1 (cons$b ?v2 nil$b )))(forall ((?v2 N_list_list$ )(?v3 N_list_list_list$ ))(=> (and (not (= ?v3 nil$b ))(fun_app$b ?v1 ?v3 ))(fun_app$b ?v1 (cons$b ?v2 ?v3 ))))))(fun_app$b ?v1 ?v0 ))):named a28 ))
(assert (! (forall ((?v0 N_list_list$ )(?v1 N_list_list_bool_fun$ ))(=> (and (not (= ?v0 nil$a ))(and (forall ((?v2 N_list$ ))(fun_app$c ?v1 (cons$a ?v2 nil$a )))(forall ((?v2 N_list$ )(?v3 N_list_list$ ))(=> (and (not (= ?v3 nil$a ))(fun_app$c ?v1 ?v3 ))(fun_app$c ?v1 (cons$a ?v2 ?v3 ))))))(fun_app$c ?v1 ?v0 ))):named a29 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list_bool_fun$ ))(=> (and (not (= ?v0 nil$ ))(and (forall ((?v2 N$ ))(fun_app$ ?v1 (cons$ ?v2 nil$ )))(forall ((?v2 N$ )(?v3 N_list$ ))(=> (and (not (= ?v3 nil$ ))(fun_app$ ?v1 ?v3 ))(fun_app$ ?v1 (cons$ ?v2 ?v3 ))))))(fun_app$ ?v1 ?v0 ))):named a30 ))
(assert (! (forall ((?v0 N_list_N_list_list_list_bool_fun_fun$ )(?v1 N_list$ )(?v2 N_list_list_list$ ))(=> (and (fun_app$b (fun_app$d ?v0 nil$ )nil$b )(and (forall ((?v3 N$ )(?v4 N_list$ ))(fun_app$b (fun_app$d ?v0 (cons$ ?v3 ?v4 ))nil$b ))(and (forall ((?v3 N_list_list$ )(?v4 N_list_list_list$ ))(fun_app$b (fun_app$d ?v0 nil$ )(cons$b ?v3 ?v4 )))(forall ((?v3 N$ )(?v4 N_list$ )(?v5 N_list_list$ )(?v6 N_list_list_list$ ))(=> (fun_app$b (fun_app$d ?v0 ?v4 )?v6 )(fun_app$b (fun_app$d ?v0 (cons$ ?v3 ?v4 ))(cons$b ?v5 ?v6 )))))))(fun_app$b (fun_app$d ?v0 ?v1 )?v2 ))):named a31 ))
(assert (! (forall ((?v0 N_list_list_N_list_list_list_bool_fun_fun$ )(?v1 N_list_list$ )(?v2 N_list_list_list$ ))(=> (and (fun_app$b (fun_app$e ?v0 nil$a )nil$b )(and (forall ((?v3 N_list$ )(?v4 N_list_list$ ))(fun_app$b (fun_app$e ?v0 (cons$a ?v3 ?v4 ))nil$b ))(and (forall ((?v3 N_list_list$ )(?v4 N_list_list_list$ ))(fun_app$b (fun_app$e ?v0 nil$a )(cons$b ?v3 ?v4 )))(forall ((?v3 N_list$ )(?v4 N_list_list$ )(?v5 N_list_list$ )(?v6 N_list_list_list$ ))(=> (fun_app$b (fun_app$e ?v0 ?v4 )?v6 )(fun_app$b (fun_app$e ?v0 (cons$a ?v3 ?v4 ))(cons$b ?v5 ?v6 )))))))(fun_app$b (fun_app$e ?v0 ?v1 )?v2 ))):named a32 ))
(assert (! (forall ((?v0 N_list_list_list_N_list_bool_fun_fun$ )(?v1 N_list_list_list$ )(?v2 N_list$ ))(=> (and (fun_app$ (fun_app$f ?v0 nil$b )nil$ )(and (forall ((?v3 N_list_list$ )(?v4 N_list_list_list$ ))(fun_app$ (fun_app$f ?v0 (cons$b ?v3 ?v4 ))nil$ ))(and (forall ((?v3 N$ )(?v4 N_list$ ))(fun_app$ (fun_app$f ?v0 nil$b )(cons$ ?v3 ?v4 )))(forall ((?v3 N_list_list$ )(?v4 N_list_list_list$ )(?v5 N$ )(?v6 N_list$ ))(=> (fun_app$ (fun_app$f ?v0 ?v4 )?v6 )(fun_app$ (fun_app$f ?v0 (cons$b ?v3 ?v4 ))(cons$ ?v5 ?v6 )))))))(fun_app$ (fun_app$f ?v0 ?v1 )?v2 ))):named a33 ))
(assert (! (forall ((?v0 N_list_list_list_N_list_list_bool_fun_fun$ )(?v1 N_list_list_list$ )(?v2 N_list_list$ ))(=> (and (fun_app$c (fun_app$g ?v0 nil$b )nil$a )(and (forall ((?v3 N_list_list$ )(?v4 N_list_list_list$ ))(fun_app$c (fun_app$g ?v0 (cons$b ?v3 ?v4 ))nil$a ))(and (forall ((?v3 N_list$ )(?v4 N_list_list$ ))(fun_app$c (fun_app$g ?v0 nil$b )(cons$a ?v3 ?v4 )))(forall ((?v3 N_list_list$ )(?v4 N_list_list_list$ )(?v5 N_list$ )(?v6 N_list_list$ ))(=> (fun_app$c (fun_app$g ?v0 ?v4 )?v6 )(fun_app$c (fun_app$g ?v0 (cons$b ?v3 ?v4 ))(cons$a ?v5 ?v6 )))))))(fun_app$c (fun_app$g ?v0 ?v1 )?v2 ))):named a34 ))
(assert (! (forall ((?v0 N_list_list_list_N_list_list_list_bool_fun_fun$ )(?v1 N_list_list_list$ )(?v2 N_list_list_list$ ))(=> (and (fun_app$b (fun_app$h ?v0 nil$b )nil$b )(and (forall ((?v3 N_list_list$ )(?v4 N_list_list_list$ ))(fun_app$b (fun_app$h ?v0 (cons$b ?v3 ?v4 ))nil$b ))(and (forall ((?v3 N_list_list$ )(?v4 N_list_list_list$ ))(fun_app$b (fun_app$h ?v0 nil$b )(cons$b ?v3 ?v4 )))(forall ((?v3 N_list_list$ )(?v4 N_list_list_list$ )(?v5 N_list_list$ )(?v6 N_list_list_list$ ))(=> (fun_app$b (fun_app$h ?v0 ?v4 )?v6 )(fun_app$b (fun_app$h ?v0 (cons$b ?v3 ?v4 ))(cons$b ?v5 ?v6 )))))))(fun_app$b (fun_app$h ?v0 ?v1 )?v2 ))):named a35 ))
(assert (! (forall ((?v0 N_list_N_list_list_bool_fun_fun$ )(?v1 N_list$ )(?v2 N_list_list$ ))(=> (and (fun_app$c (fun_app$i ?v0 nil$ )nil$a )(and (forall ((?v3 N$ )(?v4 N_list$ ))(fun_app$c (fun_app$i ?v0 (cons$ ?v3 ?v4 ))nil$a ))(and (forall ((?v3 N_list$ )(?v4 N_list_list$ ))(fun_app$c (fun_app$i ?v0 nil$ )(cons$a ?v3 ?v4 )))(forall ((?v3 N$ )(?v4 N_list$ )(?v5 N_list$ )(?v6 N_list_list$ ))(=> (fun_app$c (fun_app$i ?v0 ?v4 )?v6 )(fun_app$c (fun_app$i ?v0 (cons$ ?v3 ?v4 ))(cons$a ?v5 ?v6 )))))))(fun_app$c (fun_app$i ?v0 ?v1 )?v2 ))):named a36 ))
(assert (! (forall ((?v0 N_list_list_N_list_bool_fun_fun$ )(?v1 N_list_list$ )(?v2 N_list$ ))(=> (and (fun_app$ (fun_app$j ?v0 nil$a )nil$ )(and (forall ((?v3 N_list$ )(?v4 N_list_list$ ))(fun_app$ (fun_app$j ?v0 (cons$a ?v3 ?v4 ))nil$ ))(and (forall ((?v3 N$ )(?v4 N_list$ ))(fun_app$ (fun_app$j ?v0 nil$a )(cons$ ?v3 ?v4 )))(forall ((?v3 N_list$ )(?v4 N_list_list$ )(?v5 N$ )(?v6 N_list$ ))(=> (fun_app$ (fun_app$j ?v0 ?v4 )?v6 )(fun_app$ (fun_app$j ?v0 (cons$a ?v3 ?v4 ))(cons$ ?v5 ?v6 )))))))(fun_app$ (fun_app$j ?v0 ?v1 )?v2 ))):named a37 ))
(assert (! (forall ((?v0 N_list_list_N_list_list_bool_fun_fun$ )(?v1 N_list_list$ )(?v2 N_list_list$ ))(=> (and (fun_app$c (fun_app$k ?v0 nil$a )nil$a )(and (forall ((?v3 N_list$ )(?v4 N_list_list$ ))(fun_app$c (fun_app$k ?v0 (cons$a ?v3 ?v4 ))nil$a ))(and (forall ((?v3 N_list$ )(?v4 N_list_list$ ))(fun_app$c (fun_app$k ?v0 nil$a )(cons$a ?v3 ?v4 )))(forall ((?v3 N_list$ )(?v4 N_list_list$ )(?v5 N_list$ )(?v6 N_list_list$ ))(=> (fun_app$c (fun_app$k ?v0 ?v4 )?v6 )(fun_app$c (fun_app$k ?v0 (cons$a ?v3 ?v4 ))(cons$a ?v5 ?v6 )))))))(fun_app$c (fun_app$k ?v0 ?v1 )?v2 ))):named a38 ))
(assert (! (forall ((?v0 N_list_N_list_bool_fun_fun$ )(?v1 N_list$ )(?v2 N_list$ ))(=> (and (fun_app$ (fun_app$l ?v0 nil$ )nil$ )(and (forall ((?v3 N$ )(?v4 N_list$ ))(fun_app$ (fun_app$l ?v0 (cons$ ?v3 ?v4 ))nil$ ))(and (forall ((?v3 N$ )(?v4 N_list$ ))(fun_app$ (fun_app$l ?v0 nil$ )(cons$ ?v3 ?v4 )))(forall ((?v3 N$ )(?v4 N_list$ )(?v5 N$ )(?v6 N_list$ ))(=> (fun_app$ (fun_app$l ?v0 ?v4 )?v6 )(fun_app$ (fun_app$l ?v0 (cons$ ?v3 ?v4 ))(cons$ ?v5 ?v6 )))))))(fun_app$ (fun_app$l ?v0 ?v1 )?v2 ))):named a39 ))
(check-sat )
;(get-unsat-core )
