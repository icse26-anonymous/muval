;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun h$ (Dtree$ N$ )Dtree$ )
(declare-fun n$ ()N$ )
(declare-fun t$ ()T$ )
(declare-fun fr$ (N_set$ Dtree$ )T_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun uu$ ()T_T_dtree_sum_fun$ )
(declare-fun h_c$ (Dtree$ N$ )T_N_sum_set$ )
(declare-fun h_r$ (Dtree$ N$ )N$ )
(declare-fun top$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun pick$ (Dtree$ N$ )Dtree$ )
(declare-fun rcut$ (Dtree$ )Dtree$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun finite$ (T_N_sum_set$ )Bool )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun vimage$ (T_T_dtree_sum_fun$ T_dtree_sum_set$ )T_set$ )
(declare-fun fun_app$ (T_T_dtree_sum_fun$ T$ )T_dtree_sum$ )
(declare-fun member$a (T$ T_set$ )Bool )
(declare-fun regular$ (Dtree$ )Bool )
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$ uu$ ?v0 )(inl$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (member$ (inl$ t$ )(cont$ (pick$ tr0$ n$ )))):named a1 ))
(assert (! (member$ (inl$ t$ )(cont$ tr$ )):named a2 ))
(assert (! (= tr$ (h$ tr0$ n$ )):named a3 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (inItr$ top$ tr0$ n$ ):named a6 ))
(assert (! (member$a t$ (fr$ top$ (rcut$ tr0$ ))):named a7 ))
(assert (! (regular$ (rcut$ tr0$ )):named a8 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(=> (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 N$ ))(! (= (h_r$ tr0$ ?v0 )(root$ (pick$ tr0$ ?v0 ))):pattern ((h_r$ tr0$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 N$ ))(= (vimage$ uu$ (cont$ (h$ tr0$ ?v0 )))(vimage$ uu$ (cont$ (pick$ tr0$ ?v0 ))))):named a11 ))
(assert (! (forall ((?v0 N$ ))(= (root$ (h$ tr0$ ?v0 ))(root$ (pick$ tr0$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 N$ ))(finite$ (h_c$ tr0$ ?v0 ))):named a13 ))
(assert (! (= (rcut$ tr0$ )(h$ tr0$ (root$ tr0$ ))):named a14 ))
(assert (! (forall ((?v0 N$ ))(=> (inItr$ top$ tr0$ ?v0 )(= (root$ (pick$ tr0$ ?v0 ))?v0 ))):named a15 ))
(assert (! (=> (forall ((?v0 N$ ))(=> (and (inItr$ top$ tr0$ ?v0 )(= tr$ (h$ tr0$ ?v0 )))false ))false ):named a16 ))
(assert (! (forall ((?v0 N$ ))(=> (inItr$ top$ tr0$ ?v0 )(= (root$ (h$ tr0$ ?v0 ))?v0 ))):named a17 ))
(check-sat )
;(get-unsat-core )
