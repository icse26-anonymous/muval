;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort Nat$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort N_N_list_fun$ 0 )
(declare-sort N_N_option_fun$ 0 )
(declare-sort N_list_nat_fun$ 0 )
(declare-sort N_list_bool_fun$ 0 )
(declare-sort N_list_N_list_fun$ 0 )
(declare-sort N_list$ 0)
(declare-sort N_option$ 0)
(declare-fun nil$ ()N_list$)
(declare-fun hd$ (N_list$)N$)
(declare-fun tl$ (N_list$)N_list$)
(declare-fun cons$ (N$ N_list$ )N_list$)
(declare-fun none$ ()N_option$)
(declare-fun the$ (N_option$)N$)
(declare-fun some$ (N$ )N_option$)
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun nl$ ()N_list$ )
(declare-fun bind$ (N_list$ N_N_list_fun$ )N_list$ )
(declare-fun maps$ (N_N_list_fun$ )N_list_N_list_fun$ )
(declare-fun null$ (N_list$ )Bool )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun member$ (N_list$ )N_bool_fun$ )
(declare-fun splice$ (N_list$ )N_list_N_list_fun$ )
(declare-fun fun_app$ (N_list_bool_fun$ N_list$ )Bool )
(declare-fun rotate1$ (N_list$ )N_list$ )
(declare-fun fun_app$a (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$b (N_list_nat_fun$ N_list$ )Nat$ )
(declare-fun fun_app$c (N_list_N_list_fun$ N_list$ )N_list$ )
(declare-fun list_ex1$ (N_bool_fun$ )N_list_bool_fun$ )
(declare-fun gen_length$ (Nat$ )N_list_nat_fun$ )
(declare-fun map_filter$ (N_N_option_fun$ )N_list_N_list_fun$ )
(assert (! (not (not (= nl$ nil$ ))):named a0 ))
(assert (! (path$ f$ nl$ ):named a1 ))
(assert (! (forall ((?v0 N_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a2 ))
(assert (! (forall ((?v0 N_N_list_fun$ ))(! (= (bind$ nil$ ?v0 )nil$ ):pattern ((bind$ nil$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N$ ))(path$ ?v0 (cons$ ?v1 nil$ ))):named a4 ))
(assert (! (forall ((?v0 N_bool_fun$ ))(! (= (fun_app$ (list_ex1$ ?v0 )nil$ )false ):pattern ((list_ex1$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$a (member$ nil$ )?v0 )false ):pattern ((fun_app$a (member$ nil$ )?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$b (gen_length$ ?v0 )nil$ )?v0 ):pattern ((gen_length$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 N_list$ ))(! (= (fun_app$c (splice$ ?v0 )nil$ )?v0 ):pattern ((splice$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 N_N_list_fun$ ))(! (= (fun_app$c (maps$ ?v0 )nil$ )nil$ ):pattern ((maps$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 N_list$ ))(= (= ?v0 nil$ )(null$ ?v0 ))):named a10 ))
(assert (! (= (null$ nil$ )true ):named a11 ))
(assert (! (forall ((?v0 N_list$ ))(= (= (rotate1$ ?v0 )nil$ )(= ?v0 nil$ ))):named a12 ))
(assert (! (forall ((?v0 N_N_option_fun$ ))(! (= (fun_app$c (map_filter$ ?v0 )nil$ )nil$ ):pattern ((map_filter$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N$ )(?v3 N_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N$ ))(! (= (fun_app$a (member$ (cons$ ?v0 ?v1 ))?v2 )(or (= ?v0 ?v2 )(fun_app$a (member$ ?v1 )?v2 ))):pattern ((fun_app$a (member$ (cons$ ?v0 ?v1 ))?v2 )))):named a15 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N$ )(?v3 N_list$ ))(! (= (fun_app$c (splice$ (cons$ ?v0 ?v1 ))(cons$ ?v2 ?v3 ))(cons$ ?v0 (cons$ ?v2 (fun_app$c (splice$ ?v1 )?v3 )))):pattern ((fun_app$c (splice$ (cons$ ?v0 ?v1 ))(cons$ ?v2 ?v3 ))))):named a16 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(! (= (fun_app$c (splice$ (cons$ ?v0 ?v1 ))nil$ )(cons$ ?v0 ?v1 )):pattern ((cons$ ?v0 ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
