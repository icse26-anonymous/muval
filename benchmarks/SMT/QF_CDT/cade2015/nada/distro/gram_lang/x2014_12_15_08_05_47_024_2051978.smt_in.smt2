;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun tr$ ()Dtree$ )
(declare-fun phi$ (Dtree$ Dtree$ )Bool )
(declare-fun top$ ()N_set$ )
(declare-fun tr1$ ()Dtree$ )
(declare-fun tr2$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun top$a ()T_dtree_sum_set$ )
(declare-fun top$b ()T_dtree_sum_bool_fun$ )
(declare-fun top$c ()Bool )
(declare-fun top$d ()N_bool_fun$ )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun collect$ (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun fun_app$ (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun collect$a (N_bool_fun$ )N_set$ )
(declare-fun fun_app$a (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$b (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$c (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$d (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(assert (! (not (phi$ tr$ tr$ )):named a0 ))
(assert (! (forall ((?v0 Dtree$ ))(phi$ ?v0 ?v0 )):named a1 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (member$ (inr$ ?v0 )(cont$ ?v1 ))(and (subtr$ top$ ?v1 ?v2 )(phi$ ?v1 ?v2 )))(phi$ ?v0 ?v2 ))):named a2 ))
(assert (! (subtr$ top$ tr1$ tr2$ ):named a3 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(subtr$ ?v0 ?v2 ?v3 ))(subtr$ ?v0 ?v1 ?v3 ))):named a4 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (member$ ?v0 top$a )true )):named a7 ))
(assert (! (forall ((?v0 N$ ))(= (member$a ?v0 top$ )true )):named a8 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(member$ ?v0 top$a )):named a9 ))
(assert (! (forall ((?v0 N$ ))(member$a ?v0 top$ )):named a10 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(! (= (fun_app$ top$b ?v0 )top$c ):pattern ((fun_app$ top$b ?v0 )))):named a11 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$a top$d ?v0 )top$c ):pattern ((fun_app$a top$d ?v0 )))):named a12 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (subtr$ ?v0 ?v1 ?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$a (root$ ?v3 )?v4 )(and (subtr$ ?v4 ?v5 ?v6 )(member$ (inr$ ?v6 )(cont$ ?v3 ))))))))))):named a13 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set_dtree_dtree_bool_fun_fun_fun$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(and (forall ((?v4 N_set$ )(?v5 Dtree$ ))(fun_app$b (fun_app$c (fun_app$d ?v3 ?v4 )?v5 )?v5 ))(forall ((?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ )(?v7 Dtree$ ))(=> (and (member$a (root$ ?v5 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v6 ))(and (subtr$ ?v4 ?v6 ?v7 )(fun_app$b (fun_app$c (fun_app$d ?v3 ?v4 )?v6 )?v7 ))))(fun_app$b (fun_app$c (fun_app$d ?v3 ?v4 )?v5 )?v7 )))))(fun_app$b (fun_app$c (fun_app$d ?v3 ?v0 )?v1 )?v2 ))):named a14 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$a (root$ ?v3 )?v4 )(and (subtr$ ?v4 ?v5 ?v6 )(member$ (inr$ ?v6 )(cont$ ?v3 )))))))false ))))false )):named a15 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$a (root$ ?v0 )?v1 )(and (subtr$ ?v1 ?v2 ?v3 )(member$ (inr$ ?v3 )(cont$ ?v0 ))))(subtr$ ?v1 ?v2 ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$a (root$ ?v0 )?v1 )(and (member$ (inr$ ?v0 )(cont$ ?v2 ))(subtr$ ?v1 ?v2 ?v3 )))(subtr$ ?v1 ?v0 ?v3 ))):named a17 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (not (= ?v0 ?v1 ))(not (= (inr$ ?v0 )(inr$ ?v1 ))))):named a19 ))
(assert (! (= top$a (collect$ top$b )):named a20 ))
(assert (! (= top$ (collect$a top$d )):named a21 ))
(check-sat )
;(get-unsat-core )
