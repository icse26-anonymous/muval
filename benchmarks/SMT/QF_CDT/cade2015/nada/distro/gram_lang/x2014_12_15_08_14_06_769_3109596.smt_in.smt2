;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort N_T_N_sum_set_fun$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun h$ (Dtree$ )N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun na$ ()N$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun h_c$ (Dtree$ )N_T_N_sum_set_fun$ )
(declare-fun h_r$ (Dtree$ )N_N_fun$ )
(declare-fun top$ ()N_set$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun tra$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun pick$ (Dtree$ N$ )Dtree$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun top$a ()T_dtree_sum_set$ )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun subtr$ (N_set$ Dtree$ )Dtree_bool_fun$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun unfold$ (N_N_fun$ N_T_N_sum_set_fun$ )N_dtree_fun$ )
(declare-fun fun_app$ (N_dtree_fun$ N$ )Dtree$ )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun fun_app$a (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$b (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(assert (! (not (exists ((?v0 N$ ))(and (inItr$ top$ tr0$ ?v0 )(= tr$ (fun_app$ (h$ tr0$ )?v0 ))))):named a0 ))
(assert (! (member$ (inr$ tr$ )(cont$ (fun_app$ (h$ tr0$ )na$ ))):named a1 ))
(assert (! (inItr$ top$ tr0$ n$ ):named a2 ))
(assert (! (inItr$ top$ tr0$ na$ ):named a3 ))
(assert (! (wf$ tr0$ ):named a4 ))
(assert (! (exists ((?v0 N$ ))(and (inItr$ top$ tr0$ ?v0 )(= tra$ (fun_app$ (h$ tr0$ )?v0 )))):named a5 ))
(assert (! (= tra$ (fun_app$ (h$ tr0$ )na$ )):named a6 ))
(assert (! (=> (forall ((?v0 N$ ))(=> (and (inItr$ top$ tr0$ ?v0 )(= tra$ (fun_app$ (h$ tr0$ )?v0 )))false ))false ):named a7 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (and (inItr$ top$ tr0$ ?v0 )(fun_app$a (subtr$ top$ ?v1 )(fun_app$ (h$ tr0$ )?v0 )))(exists ((?v2 N$ ))(and (inItr$ top$ tr0$ ?v2 )(= ?v1 (fun_app$ (h$ tr0$ )?v2 )))))):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (member$ ?v0 top$a )true )):named a11 ))
(assert (! (forall ((?v0 N$ ))(= (member$a ?v0 top$ )true )):named a12 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(member$ ?v0 top$a )):named a13 ))
(assert (! (forall ((?v0 N$ ))(member$a ?v0 top$ )):named a14 ))
(assert (! (forall ((?v0 N$ ))(=> (inItr$ top$ tr0$ ?v0 )(= (root$ (fun_app$ (h$ tr0$ )?v0 ))?v0 ))):named a15 ))
(assert (! (forall ((?v0 N$ ))(=> (and (wf$ tr0$ )(inItr$ top$ tr0$ ?v0 ))(wf$ (pick$ tr0$ ?v0 )))):named a16 ))
(assert (! (= (h$ tr0$ )(unfold$ (h_r$ tr0$ )(h_c$ tr0$ ))):named a17 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ )(?v2 Dtree$ ))(=> (and (inItr$ top$ ?v0 ?v1 )(fun_app$a (subtr$ top$ ?v2 )(fun_app$ (h$ ?v0 )?v1 )))(exists ((?v3 N$ ))(and (inItr$ top$ ?v0 ?v3 )(= ?v2 (fun_app$ (h$ ?v0 )?v3 )))))):named a18 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree_dtree_bool_fun_fun$ ))(=> (and (fun_app$a (subtr$ top$ ?v0 )?v1 )(and (forall ((?v3 Dtree$ ))(fun_app$a (fun_app$b ?v2 ?v3 )?v3 ))(forall ((?v3 Dtree$ )(?v4 Dtree$ )(?v5 Dtree$ ))(=> (and (member$ (inr$ ?v3 )(cont$ ?v4 ))(and (fun_app$a (subtr$ top$ ?v4 )?v5 )(fun_app$a (fun_app$b ?v2 ?v4 )?v5 )))(fun_app$a (fun_app$b ?v2 ?v3 )?v5 )))))(fun_app$a (fun_app$b ?v2 ?v0 )?v1 ))):named a19 ))
(check-sat )
;(get-unsat-core )
