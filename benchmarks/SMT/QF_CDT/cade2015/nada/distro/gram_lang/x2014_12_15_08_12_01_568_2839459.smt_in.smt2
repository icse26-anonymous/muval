;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_list_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort N_list$ 0)
(declare-fun nil$ ()N_list$)
(declare-fun hd$ (N_list$)N$)
(declare-fun tl$ (N_list$)N_list$)
(declare-fun cons$ (N$ N_list$ )N_list$)
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun n1$ ()N$ )
(declare-fun nl$ ()N_list$ )
(declare-fun nl1$ ()N_list$ )
(declare-fun nl2$ ()N_list$ )
(declare-fun nla$ ()N_list$ )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun last$ (N_list$ )N$ )
(declare-fun nl1$a ()N_list$ )
(declare-fun null$ (N_list$ )Bool )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun shift$ (N_list_set$ N$ )N_list_set$ )
(declare-fun member$ (N_list$ N$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun less_eq$ (N_set$ N_set$ )Bool )
(declare-fun member$a (N_list$ N_list_set$ )Bool )
(declare-fun member$b (N$ N_set$ )Bool )
(declare-fun distinct$ (N_list$ )Bool )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 N_list$ ))(=> (= nl1$ (cons$ n1$ ?v0 ))thesis$ )):named a1 ))
(assert (! (distinct$ nl1$ ):named a2 ))
(assert (! (= nl1$a (cons$ n1$ nl2$ )):named a3 ))
(assert (! (=> (forall ((?v0 N$ )(?v1 N_list$ ))(=> (= nla$ (cons$ ?v0 ?v1 ))false ))false ):named a4 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N$ )(?v3 N_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (path$ f$ nl1$ ):named a6 ))
(assert (! (= (last$ nl1$ )(last$ nl1$a )):named a7 ))
(assert (! (= (hd$ nl1$ )(hd$ nl1$a )):named a8 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(not (= (cons$ ?v0 ?v1 )?v1 ))):named a9 ))
(assert (! (= nla$ (cons$ n$ nl1$a )):named a10 ))
(assert (! (less_eq$ (set$ nl1$ )(set$ nl1$a )):named a11 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ )(?v2 N$ ))(! (= (member$ (cons$ ?v0 ?v1 )?v2 )(or (= ?v0 ?v2 )(member$ ?v1 ?v2 ))):pattern ((member$ (cons$ ?v0 ?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 N_list$ )(?v1 N_list_set$ )(?v2 N$ ))(=> (member$a ?v0 (shift$ ?v1 ?v2 ))(member$a (cons$ ?v2 ?v0 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 N$ )(?v1 N_list$ ))(! (= (null$ (cons$ ?v0 ?v1 ))false ):pattern ((cons$ ?v0 ?v1 )))):named a14 ))
(assert (! (path$ f$ nl$ ):named a15 ))
(assert (! (not (member$b n$ (set$ nl1$a ))):named a16 ))
(assert (! (path$ f$ nl1$a ):named a17 ))
(check-sat )
;(get-unsat-core )
