;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort T_N_sum$ 0)
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_N_sum$)T$)
(declare-fun inl$ (T$ )T_N_sum$)
(declare-fun projr$ (T_N_sum$)N$)
(declare-fun inr$ (N$ )T_N_sum$)
(declare-fun projl$a (T_dtree_sum$)T$)
(declare-fun inl$a (T$ )T_dtree_sum$)
(declare-fun projr$a (T_dtree_sum$)Dtree$)
(declare-fun inr$a (Dtree$ )T_dtree_sum$)
(declare-fun h$ (Dtree$ N$ )Dtree$ )
(declare-fun n$ ()N$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun top$ ()N_set$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun pick$ (Dtree$ N$ )Dtree$ )
(declare-fun rcut$ (Dtree$ )Dtree$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun deftr$ (N$ )Dtree$ )
(declare-fun image$ (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun hsubst$ (Dtree$ Dtree$ )Dtree$ )
(declare-fun member$ (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun fun_app$ (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun map_sum$ (T_T_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun member$b (N$ N_set$ )Bool )
(declare-fun subtrOf$ (Dtree$ N$ )Dtree$ )
(assert (! (not (wf$ (subtrOf$ tr$ n$ ))):named a0 ))
(assert (! (wf$ tr$ ):named a1 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (wf$ ?v0 )(wf$ (rcut$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 N$ ))(wf$ (deftr$ ?v0 ))):named a3 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(wf$ ?v1 ))(wf$ (hsubst$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(subtr$ ?v1 ?v2 ?v0 ))(wf$ ?v2 ))):named a5 ))
(assert (! (member$ (inr$ n$ )(image$ (map_sum$ id$ root$ )(cont$ tr$ ))):named a6 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$a (inr$a ?v1 )(cont$ ?v0 )))(= (subtrOf$ ?v0 (fun_app$ root$ ?v1 ))?v1 ))):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$a (inr$a ?v1 )(cont$ ?v0 )))(wf$ ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (and (wf$ ?v0 )(inItr$ top$ ?v0 ?v1 ))(wf$ (pick$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (and (wf$ ?v0 )(inItr$ top$ ?v0 ?v1 ))(wf$ (h$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (fun_app$ root$ (hsubst$ ?v0 ?v1 ))(fun_app$ root$ ?v1 ))):named a11 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$ root$ (deftr$ ?v0 ))?v0 )):named a12 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$ root$ (rcut$ ?v0 ))(fun_app$ root$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(and (member$a (inr$a ?v1 )(cont$ ?v0 ))(member$a (inr$a ?v2 )(cont$ ?v0 ))))(= (= (fun_app$ root$ ?v1 )(fun_app$ root$ ?v2 ))(= ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (inItr$ top$ ?v0 ?v1 )(= (fun_app$ root$ (h$ ?v0 ?v1 ))?v1 ))):named a15 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$ (inr$ ?v0 )(image$ (map_sum$ id$ root$ )(cont$ ?v1 )))(= (fun_app$ root$ (subtrOf$ ?v1 ?v0 ))?v0 ))):named a16 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(= (inItr$ ?v0 ?v1 ?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (fun_app$ root$ ?v3 ))(member$b (fun_app$ root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$b (fun_app$ root$ ?v3 )?v4 )(and (member$a (inr$a ?v5 )(cont$ ?v3 ))(inItr$ ?v4 ?v5 ?v6 )))))))))):named a17 ))
(check-sat )
;(get-unsat-core )
