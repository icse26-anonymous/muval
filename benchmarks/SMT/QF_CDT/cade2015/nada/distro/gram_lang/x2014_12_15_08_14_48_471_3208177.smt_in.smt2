;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort N_list$ 0)
(declare-fun nil$ ()N_list$)
(declare-fun hd$ (N_list$)N$)
(declare-fun tl$ (N_list$)N_list$)
(declare-fun cons$ (N$ N_list$ )N_list$)
(declare-fun f$ ()N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun t$ ()T$ )
(declare-fun n1$ ()N$ )
(declare-fun nl$ ()N_list$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun nl1$ ()N_list$ )
(declare-fun nl2$ ()N_list$ )
(declare-fun reg$ (N_dtree_fun$ Dtree$ )Bool )
(declare-fun set$ (N_list$ )N_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun path$ (N_dtree_fun$ N_list$ )Bool )
(declare-fun rcut$ (Dtree$ )Dtree$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun deftr$ (N$ )Dtree$ )
(declare-fun inFr2$ (N_set$ Dtree$ T$ )Bool )
(declare-fun hsubst$ (Dtree$ Dtree$ )Dtree$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun fun_app$ (N_dtree_fun$ N$ )Dtree$ )
(declare-fun regular$ (Dtree$ )Bool )
(declare-fun hsubst_r$ (Dtree$ )N$ )
(assert (! (not (= (root$ tr$ )n$ )):named a0 ))
(assert (! (regular$ tr$ ):named a1 ))
(assert (! (member$ (root$ tr$ )ns$ ):named a2 ))
(assert (! (=> (forall ((?v0 N_dtree_fun$ ))(=> (and (reg$ ?v0 tr$ )(forall ((?v1 N$ ))(= (root$ (fun_app$ ?v0 ?v1 ))?v1 )))false ))false ):named a3 ))
(assert (! (= (fun_app$ f$ n$ )tr$ ):named a4 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst_r$ ?v0 )(root$ ?v0 )):pattern ((hsubst_r$ ?v0 )))):named a5 ))
(assert (! (reg$ f$ tr$ ):named a6 ))
(assert (! (forall ((?v0 Dtree$ ))(= (root$ (rcut$ ?v0 ))(root$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 N$ ))(= (root$ (fun_app$ f$ ?v0 ))?v0 )):named a8 ))
(assert (! (forall ((?v0 N$ ))(= (root$ (deftr$ ?v0 ))?v0 )):named a9 ))
(assert (! (inFr$ ns$ tr$ t$ ):named a10 ))
(assert (! (not (member$ n$ (set$ nl1$ ))):named a11 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (root$ (hsubst$ ?v0 ?v1 ))(root$ ?v1 ))):named a12 ))
(assert (! (= nl$ (cons$ n$ nl1$ )):named a13 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (inFr2$ ?v0 ?v1 ?v2 )(member$ (root$ ?v1 )?v0 ))):named a14 ))
(assert (! (=> (forall ((?v0 N$ )(?v1 N_list$ ))(=> (= nl$ (cons$ ?v0 ?v1 ))false ))false ):named a15 ))
(assert (! (= nl1$ (cons$ n1$ nl2$ )):named a16 ))
(assert (! (path$ f$ nl$ ):named a17 ))
(check-sat )
;(get-unsat-core )
