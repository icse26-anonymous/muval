;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort T_set_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort T_set_bool_fun$ 0 )
(declare-sort N_set_N_set_fun$ 0 )
(declare-sort T_N_sum_bool_fun$ 0 )
(declare-sort T_set_set_T_set_set_fun$ 0 )
(declare-sort T_N_sum_set_T_N_sum_set_fun$ 0 )
(declare-sort T_N_sum$ 0)
(declare-fun projl$ (T_N_sum$)T$)
(declare-fun inl$ (T$ )T_N_sum$)
(declare-fun projr$ (T_N_sum$)N$)
(declare-fun inr$ (N$ )T_N_sum$)
(declare-fun k$ (N$ )T_set$ )
(declare-fun n$ ()N$ )
(declare-fun fr$ (N_set$ Dtree$ )T_set$ )
(declare-fun ns$ ()N_set$ )
(declare-fun uu$ ()T_set_bool_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun bot$ ()N_set$ )
(declare-fun ftr$ (N$ )Dtree$ )
(declare-fun tns$ ()T_N_sum_set$ )
(declare-fun uua$ ()T_set_bool_fun$ )
(declare-fun uub$ (T_N_sum$ )T_N_sum_bool_fun$ )
(declare-fun uuc$ (T_set$ )T_set_bool_fun$ )
(declare-fun uud$ (N$ )N_bool_fun$ )
(declare-fun uue$ (T_N_sum$ )T_N_sum_bool_fun$ )
(declare-fun uuf$ (T_set$ )T_set_bool_fun$ )
(declare-fun uug$ (N$ )N_bool_fun$ )
(declare-fun bot$a ()T_set_set$ )
(declare-fun bot$b ()T_N_sum_set$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun minus$ (N_set$ )N_set_N_set_fun$ )
(declare-fun insert$ (N$ N_set$ )N_set$ )
(declare-fun member$ (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun minus$a (T_set_set$ )T_set_set_T_set_set_fun$ )
(declare-fun minus$b (T_N_sum_set$ )T_N_sum_set_T_N_sum_set_fun$ )
(declare-fun collect$ (T_set_bool_fun$ )T_set_set$ )
(declare-fun fun_app$ (T_set_bool_fun$ T_set$ )Bool )
(declare-fun insert$a (T_set$ T_set_set$ )T_set_set$ )
(declare-fun insert$b (T_N_sum$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun member$b (T_set$ T_set_set$ )Bool )
(declare-fun collect$a (T_N_sum_bool_fun$ )T_N_sum_set$ )
(declare-fun collect$b (N_bool_fun$ )N_set$ )
(declare-fun fun_app$a (N_set_N_set_fun$ N_set$ )N_set$ )
(declare-fun fun_app$b (T_N_sum_bool_fun$ T_N_sum$ )Bool )
(declare-fun fun_app$c (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$d (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$e (T_set_set_T_set_set_fun$ T_set_set$ )T_set_set$ )
(declare-fun fun_app$f (T_N_sum_set_T_N_sum_set_fun$ T_N_sum_set$ )T_N_sum_set$ )
(assert (! (forall ((?v0 T_set$ ))(! (= (fun_app$ uua$ ?v0 )(exists ((?v1 N$ ))(and (= ?v0 (fr$ (fun_app$a (minus$ ns$ )(insert$ n$ bot$ ))(ftr$ ?v1 )))(member$ (inr$ ?v1 )tns$ )))):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 T_set$ ))(! (= (fun_app$ uu$ ?v0 )(exists ((?v1 N$ ))(and (= ?v0 (k$ ?v1 ))(member$ (inr$ ?v1 )tns$ )))):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum$ ))(! (= (fun_app$b (uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 T_set$ )(?v1 T_set$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(! (= (fun_app$c (uud$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$c (uud$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum$ ))(! (= (fun_app$b (uue$ ?v0 )?v1 )(= ?v1 ?v0 )):pattern ((fun_app$b (uue$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 T_set$ )(?v1 T_set$ ))(! (= (fun_app$ (uuf$ ?v0 )?v1 )(= ?v1 ?v0 )):pattern ((fun_app$ (uuf$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(! (= (fun_app$c (uug$ ?v0 )?v1 )(= ?v1 ?v0 )):pattern ((fun_app$c (uug$ ?v0 )?v1 )))):named a7 ))
(assert (! (not (= (collect$ uu$ )(collect$ uua$ ))):named a8 ))
(assert (! (member$a n$ ns$ ):named a9 ))
(assert (! (forall ((?v0 N$ ))(=> (member$ (inr$ ?v0 )tns$ )(and (= (k$ ?v0 )(fr$ (fun_app$a (minus$ ns$ )(insert$ n$ bot$ ))(ftr$ ?v0 )))(and (wf$ (ftr$ ?v0 ))(= (root$ (ftr$ ?v0 ))?v0 ))))):named a10 ))
(assert (! (=> (forall ((?v0 N_dtree_fun$ ))(=> (forall ((?v1 N$ ))(=> (member$ (inr$ ?v1 )tns$ )(and (= (k$ ?v1 )(fr$ (fun_app$a (minus$ ns$ )(insert$ n$ bot$ ))(fun_app$d ?v0 ?v1 )))(and (wf$ (fun_app$d ?v0 ?v1 ))(= (root$ (fun_app$d ?v0 ?v1 ))?v1 )))))false ))false ):named a11 ))
(assert (! (forall ((?v0 N$ ))(=> (member$ (inr$ ?v0 )tns$ )(exists ((?v1 Dtree$ ))(and (= (k$ ?v0 )(fr$ (fun_app$a (minus$ ns$ )(insert$ n$ bot$ ))?v1 ))(and (wf$ ?v1 )(= (root$ ?v1 )?v0 )))))):named a12 ))
(assert (! (forall ((?v0 T_set$ )(?v1 T_set_set$ ))(= (insert$a ?v0 (fun_app$e (minus$a ?v1 )(insert$a ?v0 bot$a )))(insert$a ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ ))(= (insert$b ?v0 (fun_app$f (minus$b ?v1 )(insert$b ?v0 bot$b )))(insert$b ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ ))(= (insert$ ?v0 (fun_app$a (minus$ ?v1 )(insert$ ?v0 bot$ )))(insert$ ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 T_N_sum$ ))(= (collect$a (uub$ ?v0 ))(insert$b ?v0 bot$b ))):named a16 ))
(assert (! (forall ((?v0 T_set$ ))(= (collect$ (uuc$ ?v0 ))(insert$a ?v0 bot$a ))):named a17 ))
(assert (! (forall ((?v0 N$ ))(= (collect$b (uud$ ?v0 ))(insert$ ?v0 bot$ ))):named a18 ))
(assert (! (forall ((?v0 T_N_sum$ ))(= (collect$a (uue$ ?v0 ))(insert$b ?v0 bot$b ))):named a19 ))
(assert (! (forall ((?v0 T_set$ ))(= (collect$ (uuf$ ?v0 ))(insert$a ?v0 bot$a ))):named a20 ))
(assert (! (forall ((?v0 N$ ))(= (collect$b (uug$ ?v0 ))(insert$ ?v0 bot$ ))):named a21 ))
(assert (! (forall ((?v0 T_set$ )(?v1 T_set_set$ )(?v2 T_set_set$ ))(=> (member$b ?v0 ?v1 )(= (fun_app$e (minus$a (insert$a ?v0 ?v2 ))?v1 )(fun_app$e (minus$a ?v2 )?v1 )))):named a22 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_set$ ))(=> (member$ ?v0 ?v1 )(= (fun_app$f (minus$b (insert$b ?v0 ?v2 ))?v1 )(fun_app$f (minus$b ?v2 )?v1 )))):named a23 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_set$ ))(=> (member$a ?v0 ?v1 )(= (fun_app$a (minus$ (insert$ ?v0 ?v2 ))?v1 )(fun_app$a (minus$ ?v2 )?v1 )))):named a24 ))
(assert (! (forall ((?v0 T_set$ )(?v1 T_set_set$ )(?v2 T_set_set$ ))(=> (not (member$b ?v0 ?v1 ))(= (fun_app$e (minus$a ?v1 )(insert$a ?v0 ?v2 ))(fun_app$e (minus$a ?v1 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_set$ ))(=> (not (member$ ?v0 ?v1 ))(= (fun_app$f (minus$b ?v1 )(insert$b ?v0 ?v2 ))(fun_app$f (minus$b ?v1 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_set$ ))(=> (not (member$a ?v0 ?v1 ))(= (fun_app$a (minus$ ?v1 )(insert$ ?v0 ?v2 ))(fun_app$a (minus$ ?v1 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 T_set_set$ ))(= (fun_app$e (minus$a ?v0 )bot$a )?v0 )):named a28 ))
(assert (! (forall ((?v0 T_N_sum_set$ ))(= (fun_app$f (minus$b ?v0 )bot$b )?v0 )):named a29 ))
(assert (! (forall ((?v0 N_set$ ))(= (fun_app$a (minus$ ?v0 )bot$ )?v0 )):named a30 ))
(assert (! (forall ((?v0 T_set_set$ ))(! (= (fun_app$e (minus$a ?v0 )?v0 )bot$a ):pattern ((minus$a ?v0 )))):named a31 ))
(assert (! (forall ((?v0 T_N_sum_set$ ))(! (= (fun_app$f (minus$b ?v0 )?v0 )bot$b ):pattern ((minus$b ?v0 )))):named a32 ))
(assert (! (forall ((?v0 N_set$ ))(! (= (fun_app$a (minus$ ?v0 )?v0 )bot$ ):pattern ((minus$ ?v0 )))):named a33 ))
(assert (! (forall ((?v0 T_set_set$ ))(= (fun_app$e (minus$a bot$a )?v0 )bot$a )):named a34 ))
(assert (! (forall ((?v0 T_N_sum_set$ ))(= (fun_app$f (minus$b bot$b )?v0 )bot$b )):named a35 ))
(assert (! (forall ((?v0 N_set$ ))(= (fun_app$a (minus$ bot$ )?v0 )bot$ )):named a36 ))
(assert (! (forall ((?v0 T_set$ ))(member$b ?v0 (insert$a ?v0 bot$a ))):named a37 ))
(assert (! (forall ((?v0 T_N_sum$ ))(member$ ?v0 (insert$b ?v0 bot$b ))):named a38 ))
(assert (! (forall ((?v0 N$ ))(member$a ?v0 (insert$ ?v0 bot$ ))):named a39 ))
(assert (! (forall ((?v0 T_set_set$ )(?v1 T_set$ )(?v2 T_set_set$ ))(= (fun_app$e (minus$a ?v0 )(insert$a ?v1 ?v2 ))(fun_app$e (minus$a (fun_app$e (minus$a ?v0 )(insert$a ?v1 bot$a )))?v2 ))):named a40 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum$ )(?v2 T_N_sum_set$ ))(= (fun_app$f (minus$b ?v0 )(insert$b ?v1 ?v2 ))(fun_app$f (minus$b (fun_app$f (minus$b ?v0 )(insert$b ?v1 bot$b )))?v2 ))):named a41 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ )(?v2 N_set$ ))(= (fun_app$a (minus$ ?v0 )(insert$ ?v1 ?v2 ))(fun_app$a (minus$ (fun_app$a (minus$ ?v0 )(insert$ ?v1 bot$ )))?v2 ))):named a42 ))
(assert (! (forall ((?v0 T_set_set$ )(?v1 T_set$ )(?v2 T_set_set$ ))(= (fun_app$e (minus$a ?v0 )(insert$a ?v1 ?v2 ))(fun_app$e (minus$a (fun_app$e (minus$a ?v0 )?v2 ))(insert$a ?v1 bot$a )))):named a43 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum$ )(?v2 T_N_sum_set$ ))(= (fun_app$f (minus$b ?v0 )(insert$b ?v1 ?v2 ))(fun_app$f (minus$b (fun_app$f (minus$b ?v0 )?v2 ))(insert$b ?v1 bot$b )))):named a44 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ )(?v2 N_set$ ))(= (fun_app$a (minus$ ?v0 )(insert$ ?v1 ?v2 ))(fun_app$a (minus$ (fun_app$a (minus$ ?v0 )?v2 ))(insert$ ?v1 bot$ )))):named a45 ))
(assert (! (forall ((?v0 T_set$ )(?v1 T_set_set$ ))(=> (member$b ?v0 ?v1 )(= (insert$a ?v0 (fun_app$e (minus$a ?v1 )(insert$a ?v0 bot$a )))?v1 ))):named a46 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ ))(=> (member$ ?v0 ?v1 )(= (insert$b ?v0 (fun_app$f (minus$b ?v1 )(insert$b ?v0 bot$b )))?v1 ))):named a47 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ ))(=> (member$a ?v0 ?v1 )(= (insert$ ?v0 (fun_app$a (minus$ ?v1 )(insert$ ?v0 bot$ )))?v1 ))):named a48 ))
(assert (! (forall ((?v0 T_set$ ))(= (member$b ?v0 bot$a )false )):named a49 ))
(assert (! (forall ((?v0 T_N_sum$ ))(= (member$ ?v0 bot$b )false )):named a50 ))
(assert (! (forall ((?v0 N$ ))(= (member$a ?v0 bot$ )false )):named a51 ))
(check-sat )
;(get-unsat-core )
