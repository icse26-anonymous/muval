;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort Dtree_T_dtree_sum_set_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun n$ ()N$ )
(declare-fun ns$ ()N_set$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun top$ ()N_set$ )
(declare-fun tr$a ()Dtree$ )
(declare-fun comp$ (Dtree_N_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ Dtree$ T$ )Bool )
(declare-fun pick$ (Dtree$ N$ )Dtree$ )
(declare-fun rcut$ (Dtree$ )Dtree$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun deftr$ (N$ )Dtree$ )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun member$ (N$ N_set$ )Bool )
(declare-fun unfold$ (Dtree_N_fun$ Dtree_T_dtree_sum_set_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$ (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$a (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun hsubst_c$ (Dtree$ )Dtree_T_dtree_sum_set_fun$ )
(declare-fun hsubst_r$ ()Dtree_N_fun$ )
(assert (! (not (wf$ (fun_app$ (hsubst$ tr$ )tr$ ))):named a0 ))
(assert (! (wf$ tr$ ):named a1 ))
(assert (! (= tr$a (fun_app$ (hsubst$ tr$ )tr$ )):named a2 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(wf$ ?v1 ))(wf$ (fun_app$ (hsubst$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 Dtree$ ))(=> (wf$ ?v0 )(wf$ (rcut$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 N$ ))(wf$ (deftr$ ?v0 ))):named a5 ))
(assert (! (= (fun_app$a root$ tr$ )n$ ):named a6 ))
(assert (! (member$ n$ ns$ ):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (fun_app$a root$ (fun_app$ (hsubst$ ?v0 )?v1 ))(fun_app$a root$ ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(subtr$ ?v1 ?v2 ?v0 ))(wf$ ?v2 ))):named a9 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (hsubst$ ?v0 )(unfold$ hsubst_r$ (hsubst_c$ ?v0 ))):pattern ((hsubst$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$a root$ ?v0 )(fun_app$a root$ ?v1 ))(= (fun_app$ (hsubst$ ?v1 )?v0 )(fun_app$ (hsubst$ ?v1 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (inFr$ ?v0 ?v1 ?v2 )(not (member$ (fun_app$a root$ ?v3 )?v0 )))(inFr$ ?v0 (fun_app$ (hsubst$ ?v3 )?v1 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 Dtree$ ))(= (comp$ root$ (hsubst$ ?v0 ))root$ )):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$a (inr$ ?v1 )(cont$ ?v0 )))(wf$ ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(=> (and (wf$ ?v0 )(inItr$ top$ ?v0 ?v1 ))(wf$ (pick$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$a root$ (deftr$ ?v0 ))?v0 )):named a16 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$a root$ (rcut$ ?v0 ))(fun_app$a root$ ?v0 ))):named a17 ))
(check-sat )
;(get-unsat-core )
