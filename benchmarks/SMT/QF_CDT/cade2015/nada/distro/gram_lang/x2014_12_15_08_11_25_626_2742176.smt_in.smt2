;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_bool_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort Dtree_T_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun k$ (Dtree$ )A_set$ )
(declare-fun n$ ()N$ )
(declare-fun x$ ()A$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun reg$ (N_dtree_fun$ )Dtree_bool_fun$ )
(declare-fun ttr$ ()T_dtree_sum$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ (N_set$ )Dtree_T_bool_fun_fun$ )
(declare-fun root$ (Dtree$ )N$ )
(declare-fun inFrr$ (N_set$ )Dtree_T_bool_fun_fun$ )
(declare-fun setrp$ (T_dtree_sum$ )Dtree_bool_fun$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun fun_app$ (N_dtree_fun$ N$ )Dtree$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun member$b (N$ N_set$ )Bool )
(declare-fun subtrOf$ (Dtree$ )N_dtree_fun$ )
(declare-fun fun_app$a (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$b (T_bool_fun$ T$ )Bool )
(declare-fun fun_app$c (Dtree_T_bool_fun_fun$ Dtree$ )T_bool_fun$ )
(declare-fun pred_sum$ (T_bool_fun$ Dtree_bool_fun$ T_dtree_sum$ )Bool )
(assert (! (not (and (= (k$ (fun_app$ (subtrOf$ tr$ )n$ ))(k$ (fun_app$ (subtrOf$ tr$ )n$ )))(member$ (inr$ (fun_app$ (subtrOf$ tr$ )n$ ))(cont$ tr$ )))):named a0 ))
(assert (! (member$ ttr$ (cont$ tr$ )):named a1 ))
(assert (! (wf$ tr$ ):named a2 ))
(assert (! (member$a x$ (k$ (fun_app$ (subtrOf$ tr$ )n$ ))):named a3 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (fun_app$a (reg$ ?v0 )?v1 )(member$ (inr$ ?v2 )(cont$ ?v1 )))(fun_app$a (reg$ ?v0 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (not (= ?v0 ?v1 ))(not (= (inr$ ?v0 )(inr$ ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$ (inr$ ?v1 )(cont$ ?v0 )))(wf$ ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$ (inr$ ?v1 )(cont$ ?v0 )))(= (fun_app$ (subtrOf$ ?v0 )(root$ ?v1 ))?v1 ))):named a10 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(= (fun_app$b (fun_app$c (inFrr$ ?v0 )?v1 )?v2 )(exists ((?v3 Dtree$ ))(and (member$ (inr$ ?v3 )(cont$ ?v1 ))(fun_app$b (fun_app$c (inFr$ ?v0 )?v3 )?v2 ))))):named a11 ))
(assert (! (forall ((?v0 T_bool_fun$ )(?v1 Dtree_bool_fun$ )(?v2 Dtree$ ))(! (= (pred_sum$ ?v0 ?v1 (inr$ ?v2 ))(fun_app$a ?v1 ?v2 )):pattern ((pred_sum$ ?v0 ?v1 (inr$ ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 Dtree$ ))(= (fun_app$a (setrp$ ?v0 )?v1 )(exists ((?v2 Dtree$ ))(and (= ?v1 ?v2 )(= ?v0 (inr$ ?v2 )))))):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(and (member$ (inr$ ?v1 )(cont$ ?v0 ))(member$ (inr$ ?v2 )(cont$ ?v0 ))))(= (= (root$ ?v1 )(root$ ?v2 ))(= ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$b (fun_app$c (inFr$ ?v0 )?v1 )?v2 )(member$b (root$ ?v1 )?v0 ))):named a15 ))
(check-sat )
;(get-unsat-core )
