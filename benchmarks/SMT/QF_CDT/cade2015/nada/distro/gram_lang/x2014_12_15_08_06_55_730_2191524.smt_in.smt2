;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort T_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort Dtree_T_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-sort T_N_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun projl$a (T_N_sum$)T$)
(declare-fun inl$a (T$ )T_N_sum$)
(declare-fun projr$a (T_N_sum$)N$)
(declare-fun inr$a (N$ )T_N_sum$)
(declare-fun n$ ()N$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun node$ (N$ T_dtree_sum_set$ )Dtree$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun image$ (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun inFr2$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun inItr$ (N_set$ Dtree$ N$ )Bool )
(declare-fun subtr$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun insert$ (N$ N_set$ )N_set$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun subtr2$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun fun_app$ (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun map_sum$ (T_T_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun member$a (N$ N_set$ )Bool )
(declare-fun member$b (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun subtrOf$ (Dtree$ N$ )Dtree$ )
(declare-fun fun_app$a (T_bool_fun$ T$ )Bool )
(declare-fun fun_app$b (Dtree_T_bool_fun_fun$ Dtree$ )T_bool_fun$ )
(declare-fun fun_app$c (N_set_dtree_T_bool_fun_fun_fun$ N_set$ )Dtree_T_bool_fun_fun$ )
(declare-fun fun_app$d (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$e (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$f (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(assert (! (not (and (member$ (inr$ (subtrOf$ tr$ n$ ))(cont$ tr$ ))(= (fun_app$ root$ (subtrOf$ tr$ n$ ))n$ ))):named a0 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$a ?v0 )(inr$a ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$a ?v0 )(inr$a ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$ root$ ?v0 )(fun_app$ root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$a (fun_app$b (fun_app$c inFr2$ ?v0 )?v1 )?v2 )(and (member$a (fun_app$ root$ ?v3 )?v0 )(member$ (inr$ ?v1 )(cont$ ?v3 ))))(fun_app$a (fun_app$b (fun_app$c inFr2$ ?v0 )?v3 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(= (inItr$ ?v0 ?v1 ?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (fun_app$ root$ ?v3 ))(member$a (fun_app$ root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (fun_app$ root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(inItr$ ?v4 ?v5 ?v6 )))))))))):named a7 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (and (inItr$ ?v0 ?v1 ?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (fun_app$ root$ ?v3 ))(member$a (fun_app$ root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (fun_app$ root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(inItr$ ?v4 ?v5 ?v6 ))))))false ))))false )):named a8 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 N$ ))(=> (and (member$a (fun_app$ root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(inItr$ ?v1 ?v2 ?v3 )))(inItr$ ?v1 ?v0 ?v3 ))):named a9 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 T$ ))(=> (and (member$a (fun_app$ root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(fun_app$a (fun_app$b (fun_app$c inFr$ ?v1 )?v2 )?v3 )))(fun_app$a (fun_app$b (fun_app$c inFr$ ?v1 )?v0 )?v3 ))):named a10 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (subtr2$ ?v0 ?v1 ?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (fun_app$ root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (fun_app$ root$ ?v3 )?v4 )(and (member$ (inr$ ?v3 )(cont$ ?v5 ))(subtr2$ ?v4 ?v5 ?v6 )))))))))):named a11 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (subtr2$ ?v0 ?v1 ?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (fun_app$ root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (fun_app$ root$ ?v3 )?v4 )(and (member$ (inr$ ?v3 )(cont$ ?v5 ))(subtr2$ ?v4 ?v5 ?v6 ))))))false ))))false )):named a12 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$a (fun_app$ root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(subtr2$ ?v1 ?v3 ?v2 )))(subtr2$ ?v1 ?v3 ?v0 ))):named a13 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$a (fun_app$ root$ ?v0 )?v1 )(and (member$ (inr$ ?v0 )(cont$ ?v2 ))(subtr2$ ?v1 ?v2 ?v3 )))(subtr2$ ?v1 ?v0 ?v3 ))):named a14 ))
(assert (! (= inFr$ inFr2$ ):named a15 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (subtr2$ ?v0 ?v1 ?v2 )(subtr2$ ?v0 ?v2 ?v3 ))(subtr2$ ?v0 ?v1 ?v3 ))):named a16 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$ root$ ?v0 )?v1 )(subtr2$ ?v1 ?v0 ?v0 ))):named a17 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr2$ ?v0 ?v1 ?v2 )(member$a (fun_app$ root$ ?v1 )?v0 ))):named a18 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr2$ ?v0 ?v1 ?v2 )(member$a (fun_app$ root$ ?v2 )?v0 ))):named a19 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$a (fun_app$ root$ ?v0 )?v1 ))(not (fun_app$a (fun_app$b (fun_app$c inFr$ ?v1 )?v0 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$a (fun_app$b (fun_app$c inFr$ ?v0 )?v1 )?v2 )(member$a (fun_app$ root$ ?v1 )?v0 ))):named a21 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$a (fun_app$ root$ ?v0 )?v1 )(inItr$ ?v1 ?v0 (fun_app$ root$ ?v0 )))):named a22 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (inItr$ ?v0 ?v1 ?v2 )(member$a (fun_app$ root$ ?v1 )?v0 ))):named a23 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$a (fun_app$b (fun_app$c inFr2$ ?v0 )?v1 )?v2 )(member$a (fun_app$ root$ ?v1 )?v0 ))):named a24 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a25 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(=> (= (inr$a ?v0 )(inr$a ?v1 ))(= ?v0 ?v1 ))):named a26 ))
(assert (! (forall ((?v0 Dtree$ ))(= (node$ (fun_app$ root$ ?v0 )(cont$ ?v0 ))?v0 )):named a27 ))
(assert (! (member$b (inr$a n$ )(image$ (map_sum$ id$ root$ )(cont$ tr$ ))):named a28 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 N_set$ )(?v3 T$ ))(=> (and (member$ (inr$ ?v0 )(cont$ ?v1 ))(fun_app$a (fun_app$b (fun_app$c inFr2$ ?v2 )?v0 )?v3 ))(fun_app$a (fun_app$b (fun_app$c inFr2$ (insert$ (fun_app$ root$ ?v1 )?v2 ))?v1 )?v3 ))):named a29 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$a (fun_app$b (fun_app$c inFr$ ?v0 )?v1 )?v2 )(member$ (inr$ ?v1 )(cont$ ?v3 )))(fun_app$a (fun_app$b (fun_app$c inFr$ (insert$ (fun_app$ root$ ?v3 )?v0 ))?v3 )?v2 ))):named a30 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (and (fun_app$a (fun_app$b (fun_app$c inFr$ ?v0 )?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 T$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v5 )(and (member$a (fun_app$ root$ ?v3 )?v4 )(member$ (inl$ ?v5 )(cont$ ?v3 ))))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 T$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (fun_app$ root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(fun_app$a (fun_app$b (fun_app$c inFr$ ?v4 )?v5 )?v6 ))))))false ))))false )):named a31 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(= (fun_app$a (fun_app$b (fun_app$c inFr$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 T$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v5 )(and (member$a (fun_app$ root$ ?v3 )?v4 )(member$ (inl$ ?v5 )(cont$ ?v3 )))))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 T$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$a (fun_app$ root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(fun_app$a (fun_app$b (fun_app$c inFr$ ?v4 )?v5 )?v6 )))))))))):named a32 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$a (fun_app$ root$ ?v0 )?v1 )(and (member$ (inr$ ?v0 )(cont$ ?v2 ))(subtr$ ?v1 ?v2 ?v3 )))(subtr$ ?v1 ?v0 ?v3 ))):named a33 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$a (fun_app$ root$ ?v0 )?v1 )(and (subtr$ ?v1 ?v2 ?v3 )(member$ (inr$ ?v3 )(cont$ ?v0 ))))(subtr$ ?v1 ?v2 ?v0 ))):named a34 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$a (fun_app$ root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$a (fun_app$ root$ ?v3 )?v4 )(and (subtr$ ?v4 ?v5 ?v6 )(member$ (inr$ ?v6 )(cont$ ?v3 )))))))false ))))false )):named a35 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set_dtree_dtree_bool_fun_fun_fun$ ))(=> (and (subtr$ ?v0 ?v1 ?v2 )(and (forall ((?v4 N_set$ )(?v5 Dtree$ ))(fun_app$d (fun_app$e (fun_app$f ?v3 ?v4 )?v5 )?v5 ))(forall ((?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ )(?v7 Dtree$ ))(=> (and (member$a (fun_app$ root$ ?v5 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v6 ))(and (subtr$ ?v4 ?v6 ?v7 )(fun_app$d (fun_app$e (fun_app$f ?v3 ?v4 )?v6 )?v7 ))))(fun_app$d (fun_app$e (fun_app$f ?v3 ?v4 )?v5 )?v7 )))))(fun_app$d (fun_app$e (fun_app$f ?v3 ?v0 )?v1 )?v2 ))):named a36 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a37 ))
(check-sat )
;(get-unsat-core )
