;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_prod_bool_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort B_a_prod_bool_fun$ 0 )
(declare-sort B_b_prod_bool_fun$ 0 )
(declare-sort A_b_prod_list_bool_fun$ 0 )
(declare-sort A_a_b_prod_prod_bool_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_prod_bool_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_prod_list_bool_fun$ 0 )
(declare-sort A_a_b_prod_a_b_prod_prod_prod_bool_fun$ 0 )
(declare-sort A_b_prod$ 0)
(declare-sort A_b_prod_list$ 0)
(declare-sort B_b_prod$ 0)
(declare-sort B_b_prod_list$ 0)
(declare-sort B_a_prod$ 0)
(declare-sort B_a_prod_list$ 0)
(declare-sort A_b_prod_a_b_prod_prod$ 0)
(declare-sort A_a_b_prod_a_b_prod_prod_prod$ 0)
(declare-sort A_a_b_prod_a_b_prod_prod_prod_list$ 0)
(declare-sort A_a_b_prod_prod$ 0)
(declare-sort A_a_b_prod_prod_list$ 0)
(declare-sort A_a_prod$ 0)
(declare-sort A_a_prod_list$ 0)
(declare-sort A_b_prod_a_b_prod_prod_list$ 0)
(declare-sort A_list$ 0)
(declare-sort B_list$ 0)
(declare-sort A_b_prod_a_prod$ 0)
(declare-sort A_b_prod_a_prod_list$ 0)
(declare-sort A_b_prod_b_prod$ 0)
(declare-sort A_b_prod_b_prod_list$ 0)
(declare-sort B_a_b_prod_prod$ 0)
(declare-sort B_a_b_prod_prod_list$ 0)
(declare-sort A_b_prod_a_b_prod_prod_a_prod$ 0)
(declare-sort A_b_prod_a_b_prod_prod_a_prod_list$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-fun nil$ ()A_b_prod_list$)
(declare-fun hd$ (A_b_prod_list$)A_b_prod$)
(declare-fun tl$ (A_b_prod_list$)A_b_prod_list$)
(declare-fun cons$ (A_b_prod$ A_b_prod_list$ )A_b_prod_list$)
(declare-fun fst$a (B_b_prod$)B$)
(declare-fun snd$a (B_b_prod$)B$)
(declare-fun pair$a (B$ B$ )B_b_prod$)
(declare-fun nil$a ()B_b_prod_list$)
(declare-fun hd$a (B_b_prod_list$)B_b_prod$)
(declare-fun tl$a (B_b_prod_list$)B_b_prod_list$)
(declare-fun cons$a (B_b_prod$ B_b_prod_list$ )B_b_prod_list$)
(declare-fun fst$b (B_a_prod$)B$)
(declare-fun snd$b (B_a_prod$)A$)
(declare-fun pair$b (B$ A$ )B_a_prod$)
(declare-fun nil$b ()B_a_prod_list$)
(declare-fun hd$b (B_a_prod_list$)B_a_prod$)
(declare-fun tl$b (B_a_prod_list$)B_a_prod_list$)
(declare-fun cons$b (B_a_prod$ B_a_prod_list$ )B_a_prod_list$)
(declare-fun fst$c (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun snd$c (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$c (A_b_prod$ A_b_prod$ )A_b_prod_a_b_prod_prod$)
(declare-fun fst$d (A_a_b_prod_a_b_prod_prod_prod$)A$)
(declare-fun snd$d (A_a_b_prod_a_b_prod_prod_prod$)A_b_prod_a_b_prod_prod$)
(declare-fun pair$d (A$ A_b_prod_a_b_prod_prod$ )A_a_b_prod_a_b_prod_prod_prod$)
(declare-fun nil$c ()A_a_b_prod_a_b_prod_prod_prod_list$)
(declare-fun hd$c (A_a_b_prod_a_b_prod_prod_prod_list$)A_a_b_prod_a_b_prod_prod_prod$)
(declare-fun tl$c (A_a_b_prod_a_b_prod_prod_prod_list$)A_a_b_prod_a_b_prod_prod_prod_list$)
(declare-fun cons$c (A_a_b_prod_a_b_prod_prod_prod$ A_a_b_prod_a_b_prod_prod_prod_list$ )A_a_b_prod_a_b_prod_prod_prod_list$)
(declare-fun fst$e (A_a_b_prod_prod$)A$)
(declare-fun snd$e (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$e (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-fun nil$d ()A_a_b_prod_prod_list$)
(declare-fun hd$d (A_a_b_prod_prod_list$)A_a_b_prod_prod$)
(declare-fun tl$d (A_a_b_prod_prod_list$)A_a_b_prod_prod_list$)
(declare-fun cons$d (A_a_b_prod_prod$ A_a_b_prod_prod_list$ )A_a_b_prod_prod_list$)
(declare-fun fst$f (A_a_prod$)A$)
(declare-fun snd$f (A_a_prod$)A$)
(declare-fun pair$f (A$ A$ )A_a_prod$)
(declare-fun nil$e ()A_a_prod_list$)
(declare-fun hd$e (A_a_prod_list$)A_a_prod$)
(declare-fun tl$e (A_a_prod_list$)A_a_prod_list$)
(declare-fun cons$e (A_a_prod$ A_a_prod_list$ )A_a_prod_list$)
(declare-fun nil$f ()A_b_prod_a_b_prod_prod_list$)
(declare-fun hd$f (A_b_prod_a_b_prod_prod_list$)A_b_prod_a_b_prod_prod$)
(declare-fun tl$f (A_b_prod_a_b_prod_prod_list$)A_b_prod_a_b_prod_prod_list$)
(declare-fun cons$f (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_list$)
(declare-fun nil$g ()A_list$)
(declare-fun hd$g (A_list$)A$)
(declare-fun tl$g (A_list$)A_list$)
(declare-fun cons$g (A$ A_list$ )A_list$)
(declare-fun nil$h ()B_list$)
(declare-fun hd$h (B_list$)B$)
(declare-fun tl$h (B_list$)B_list$)
(declare-fun cons$h (B$ B_list$ )B_list$)
(declare-fun fst$g (A_b_prod_a_prod$)A_b_prod$)
(declare-fun snd$g (A_b_prod_a_prod$)A$)
(declare-fun pair$g (A_b_prod$ A$ )A_b_prod_a_prod$)
(declare-fun nil$i ()A_b_prod_a_prod_list$)
(declare-fun hd$i (A_b_prod_a_prod_list$)A_b_prod_a_prod$)
(declare-fun tl$i (A_b_prod_a_prod_list$)A_b_prod_a_prod_list$)
(declare-fun cons$i (A_b_prod_a_prod$ A_b_prod_a_prod_list$ )A_b_prod_a_prod_list$)
(declare-fun fst$h (A_b_prod_b_prod$)A_b_prod$)
(declare-fun snd$h (A_b_prod_b_prod$)B$)
(declare-fun pair$h (A_b_prod$ B$ )A_b_prod_b_prod$)
(declare-fun nil$j ()A_b_prod_b_prod_list$)
(declare-fun hd$j (A_b_prod_b_prod_list$)A_b_prod_b_prod$)
(declare-fun tl$j (A_b_prod_b_prod_list$)A_b_prod_b_prod_list$)
(declare-fun cons$j (A_b_prod_b_prod$ A_b_prod_b_prod_list$ )A_b_prod_b_prod_list$)
(declare-fun fst$i (B_a_b_prod_prod$)B$)
(declare-fun snd$i (B_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$i (B$ A_b_prod$ )B_a_b_prod_prod$)
(declare-fun nil$k ()B_a_b_prod_prod_list$)
(declare-fun hd$k (B_a_b_prod_prod_list$)B_a_b_prod_prod$)
(declare-fun tl$k (B_a_b_prod_prod_list$)B_a_b_prod_prod_list$)
(declare-fun cons$k (B_a_b_prod_prod$ B_a_b_prod_prod_list$ )B_a_b_prod_prod_list$)
(declare-fun fst$j (A_b_prod_a_b_prod_prod_a_prod$)A_b_prod_a_b_prod_prod$)
(declare-fun snd$j (A_b_prod_a_b_prod_prod_a_prod$)A$)
(declare-fun pair$j (A_b_prod_a_b_prod_prod$ A$ )A_b_prod_a_b_prod_prod_a_prod$)
(declare-fun nil$l ()A_b_prod_a_b_prod_prod_a_prod_list$)
(declare-fun hd$l (A_b_prod_a_b_prod_prod_a_prod_list$)A_b_prod_a_b_prod_prod_a_prod$)
(declare-fun tl$l (A_b_prod_a_b_prod_prod_a_prod_list$)A_b_prod_a_b_prod_prod_a_prod_list$)
(declare-fun cons$l (A_b_prod_a_b_prod_prod_a_prod$ A_b_prod_a_b_prod_prod_a_prod_list$ )A_b_prod_a_b_prod_prod_a_prod_list$)
(declare-fun xs$ ()A_b_prod_list$ )
(declare-fun rev$ (A_b_prod_list$ )A_b_prod_list$ )
(declare-fun zip$ (A_list$ B_list$ )A_b_prod_list$ )
(declare-fun rev$a (B_b_prod_list$ )B_b_prod_list$ )
(declare-fun rev$b (B_a_prod_list$ )B_a_prod_list$ )
(declare-fun rev$c (A_a_b_prod_a_b_prod_prod_prod_list$ )A_a_b_prod_a_b_prod_prod_prod_list$ )
(declare-fun rev$d (A_a_b_prod_prod_list$ )A_a_b_prod_prod_list$ )
(declare-fun rev$e (A_a_prod_list$ )A_a_prod_list$ )
(declare-fun rev$f (A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun rev$g (A_list$ )A_list$ )
(declare-fun rev$h (B_list$ )B_list$ )
(declare-fun rev$i (A_b_prod_a_prod_list$ )A_b_prod_a_prod_list$ )
(declare-fun rev$j (A_b_prod_b_prod_list$ )A_b_prod_b_prod_list$ )
(declare-fun rev$k (B_a_b_prod_prod_list$ )B_a_b_prod_prod_list$ )
(declare-fun rev$l (A_b_prod_a_b_prod_prod_a_prod_list$ )A_b_prod_a_b_prod_prod_a_prod_list$ )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun zip$a (A_b_prod_list$ A_b_prod_list$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun zip$b (A_list$ A_list$ )A_a_prod_list$ )
(declare-fun zip$c (B_list$ A_list$ )B_a_prod_list$ )
(declare-fun zip$d (B_list$ B_list$ )B_b_prod_list$ )
(declare-fun zip$e (A_b_prod_list$ A_list$ )A_b_prod_a_prod_list$ )
(declare-fun zip$f (A_b_prod_list$ B_list$ )A_b_prod_b_prod_list$ )
(declare-fun zip$g (A_list$ A_b_prod_list$ )A_a_b_prod_prod_list$ )
(declare-fun zip$h (B_list$ A_b_prod_list$ )B_a_b_prod_prod_list$ )
(declare-fun zip$i (A_b_prod_a_b_prod_prod_list$ A_list$ )A_b_prod_a_b_prod_prod_a_prod_list$ )
(declare-fun zip$j (A_list$ A_b_prod_a_b_prod_prod_list$ )A_a_b_prod_a_b_prod_prod_prod_list$ )
(declare-fun size$a (B_list$ )Nat$ )
(declare-fun size$b (A_b_prod_list$ )Nat$ )
(declare-fun size$c (A_b_prod_a_b_prod_prod_list$ )Nat$ )
(declare-fun size$d (B_b_prod_list$ )Nat$ )
(declare-fun size$e (B_a_prod_list$ )Nat$ )
(declare-fun size$f (A_a_b_prod_a_b_prod_prod_prod_list$ )Nat$ )
(declare-fun size$g (A_a_b_prod_prod_list$ )Nat$ )
(declare-fun size$h (A_a_prod_list$ )Nat$ )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (A_b_prod_a_b_prod_prod_list_bool_fun$ A_b_prod_a_b_prod_prod_list$ )Bool )
(declare-fun list_ex$ (B_b_prod_bool_fun$ B_b_prod_list$ )Bool )
(declare-fun fun_app$a (A_b_prod_list_bool_fun$ A_b_prod_list$ )Bool )
(declare-fun list_ex$a (B_a_prod_bool_fun$ B_a_prod_list$ )Bool )
(declare-fun list_ex$b (A_a_b_prod_a_b_prod_prod_prod_bool_fun$ A_a_b_prod_a_b_prod_prod_prod_list$ )Bool )
(declare-fun list_ex$c (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod_list$ )Bool )
(declare-fun list_ex$d (A_a_prod_bool_fun$ A_a_prod_list$ )Bool )
(declare-fun list_ex$e (A_b_prod_a_b_prod_prod_bool_fun$ A_b_prod_a_b_prod_prod_list$ )Bool )
(declare-fun list_ex$f (A_bool_fun$ A_list$ )Bool )
(declare-fun list_ex$g (B_bool_fun$ B_list$ )Bool )
(declare-fun list_ex$h (A_b_prod_bool_fun$ A_b_prod_list$ )Bool )
(declare-fun pred_list$ (B_b_prod_bool_fun$ B_b_prod_list$ )Bool )
(declare-fun replicate$ (Nat$ B_b_prod$ )B_b_prod_list$ )
(declare-fun pred_list$a (B_a_prod_bool_fun$ B_a_prod_list$ )Bool )
(declare-fun pred_list$b (A_a_b_prod_a_b_prod_prod_prod_bool_fun$ A_a_b_prod_a_b_prod_prod_prod_list$ )Bool )
(declare-fun pred_list$c (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod_list$ )Bool )
(declare-fun pred_list$d (A_a_prod_bool_fun$ A_a_prod_list$ )Bool )
(declare-fun pred_list$e (A_b_prod_a_b_prod_prod_bool_fun$ )A_b_prod_a_b_prod_prod_list_bool_fun$ )
(declare-fun pred_list$f (A_bool_fun$ A_list$ )Bool )
(declare-fun pred_list$g (B_bool_fun$ B_list$ )Bool )
(declare-fun pred_list$h (A_b_prod_bool_fun$ )A_b_prod_list_bool_fun$ )
(declare-fun replicate$a (Nat$ B_a_prod$ )B_a_prod_list$ )
(declare-fun replicate$b (Nat$ A_a_b_prod_a_b_prod_prod_prod$ )A_a_b_prod_a_b_prod_prod_prod_list$ )
(declare-fun replicate$c (Nat$ A_a_b_prod_prod$ )A_a_b_prod_prod_list$ )
(declare-fun replicate$d (Nat$ A_a_prod$ )A_a_prod_list$ )
(declare-fun replicate$e (Nat$ A_b_prod_a_b_prod_prod$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun replicate$f (Nat$ A$ )A_list$ )
(declare-fun replicate$g (Nat$ B$ )B_list$ )
(declare-fun replicate$h (Nat$ A_b_prod$ )A_b_prod_list$ )
(declare-fun remdups_adj$ (B_b_prod_list$ )B_b_prod_list$ )
(declare-fun remdups_adj$a (B_a_prod_list$ )B_a_prod_list$ )
(declare-fun remdups_adj$b (A_a_b_prod_a_b_prod_prod_prod_list$ )A_a_b_prod_a_b_prod_prod_prod_list$ )
(declare-fun remdups_adj$c (A_a_b_prod_prod_list$ )A_a_b_prod_prod_list$ )
(declare-fun remdups_adj$d (A_a_prod_list$ )A_a_prod_list$ )
(declare-fun remdups_adj$e (A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun remdups_adj$f (A_list$ )A_list$ )
(declare-fun remdups_adj$g (B_list$ )B_list$ )
(declare-fun remdups_adj$h (A_b_prod_list$ )A_b_prod_list$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(=> (= ?v0 (rev$ xs$ ))thesis$ )):named a1 ))
(assert (! (forall ((?v0 B_b_prod_list$ )(?v1 B_b_prod_list$ ))(= (= (rev$a ?v0 )(rev$a ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 B_a_prod_list$ )(?v1 B_a_prod_list$ ))(= (= (rev$b ?v0 )(rev$b ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_list$ )(?v1 A_a_b_prod_a_b_prod_prod_prod_list$ ))(= (= (rev$c ?v0 )(rev$c ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_list$ )(?v1 A_a_b_prod_prod_list$ ))(= (= (rev$d ?v0 )(rev$d ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_a_prod_list$ ))(= (= (rev$e ?v0 )(rev$e ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ )(?v1 A_b_prod_a_b_prod_prod_list$ ))(= (= (rev$f ?v0 )(rev$f ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (rev$g ?v0 )(rev$g ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(= (= (rev$h ?v0 )(rev$h ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(= (= (rev$ ?v0 )(rev$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 B_b_prod_list$ ))(= (rev$a (rev$a ?v0 ))?v0 )):named a11 ))
(assert (! (forall ((?v0 B_a_prod_list$ ))(= (rev$b (rev$b ?v0 ))?v0 )):named a12 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_list$ ))(= (rev$c (rev$c ?v0 ))?v0 )):named a13 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_list$ ))(= (rev$d (rev$d ?v0 ))?v0 )):named a14 ))
(assert (! (forall ((?v0 A_a_prod_list$ ))(= (rev$e (rev$e ?v0 ))?v0 )):named a15 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ ))(= (rev$f (rev$f ?v0 ))?v0 )):named a16 ))
(assert (! (forall ((?v0 A_list$ ))(= (rev$g (rev$g ?v0 ))?v0 )):named a17 ))
(assert (! (forall ((?v0 B_list$ ))(= (rev$h (rev$h ?v0 ))?v0 )):named a18 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (rev$ (rev$ ?v0 ))?v0 )):named a19 ))
(assert (! (forall ((?v0 B_b_prod_list$ )(?v1 B_b_prod_list$ ))(= (= (rev$a ?v0 )?v1 )(= ?v0 (rev$a ?v1 )))):named a20 ))
(assert (! (forall ((?v0 B_a_prod_list$ )(?v1 B_a_prod_list$ ))(= (= (rev$b ?v0 )?v1 )(= ?v0 (rev$b ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_list$ )(?v1 A_a_b_prod_a_b_prod_prod_prod_list$ ))(= (= (rev$c ?v0 )?v1 )(= ?v0 (rev$c ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_list$ )(?v1 A_a_b_prod_prod_list$ ))(= (= (rev$d ?v0 )?v1 )(= ?v0 (rev$d ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_a_prod_list$ ))(= (= (rev$e ?v0 )?v1 )(= ?v0 (rev$e ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ )(?v1 A_b_prod_a_b_prod_prod_list$ ))(= (= (rev$f ?v0 )?v1 )(= ?v0 (rev$f ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (rev$g ?v0 )?v1 )(= ?v0 (rev$g ?v1 )))):named a26 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(= (= (rev$h ?v0 )?v1 )(= ?v0 (rev$h ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(= (= (rev$ ?v0 )?v1 )(= ?v0 (rev$ ?v1 )))):named a28 ))
(assert (! (forall ((?v0 B_b_prod_bool_fun$ )(?v1 B_b_prod_list$ ))(= (list_ex$ ?v0 (rev$a ?v1 ))(list_ex$ ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 B_a_prod_bool_fun$ )(?v1 B_a_prod_list$ ))(= (list_ex$a ?v0 (rev$b ?v1 ))(list_ex$a ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_bool_fun$ )(?v1 A_a_b_prod_a_b_prod_prod_prod_list$ ))(= (list_ex$b ?v0 (rev$c ?v1 ))(list_ex$b ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$ )(?v1 A_a_b_prod_prod_list$ ))(= (list_ex$c ?v0 (rev$d ?v1 ))(list_ex$c ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod_list$ ))(= (list_ex$d ?v0 (rev$e ?v1 ))(list_ex$d ?v0 ?v1 ))):named a33 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_bool_fun$ )(?v1 A_b_prod_a_b_prod_prod_list$ ))(= (list_ex$e ?v0 (rev$f ?v1 ))(list_ex$e ?v0 ?v1 ))):named a34 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_list$ ))(= (list_ex$f ?v0 (rev$g ?v1 ))(list_ex$f ?v0 ?v1 ))):named a35 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_list$ ))(= (list_ex$g ?v0 (rev$h ?v1 ))(list_ex$g ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod_list$ ))(= (list_ex$h ?v0 (rev$ ?v1 ))(list_ex$h ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 A_list$ )(?v1 B_list$ ))(=> (= (size$ ?v0 )(size$a ?v1 ))(= (zip$ (rev$g ?v0 )(rev$h ?v1 ))(rev$ (zip$ ?v0 ?v1 ))))):named a38 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(=> (= (size$b ?v0 )(size$b ?v1 ))(= (zip$a (rev$ ?v0 )(rev$ ?v1 ))(rev$f (zip$a ?v0 ?v1 ))))):named a39 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (= (size$ ?v0 )(size$ ?v1 ))(= (zip$b (rev$g ?v0 )(rev$g ?v1 ))(rev$e (zip$b ?v0 ?v1 ))))):named a40 ))
(assert (! (forall ((?v0 B_list$ )(?v1 A_list$ ))(=> (= (size$a ?v0 )(size$ ?v1 ))(= (zip$c (rev$h ?v0 )(rev$g ?v1 ))(rev$b (zip$c ?v0 ?v1 ))))):named a41 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(=> (= (size$a ?v0 )(size$a ?v1 ))(= (zip$d (rev$h ?v0 )(rev$h ?v1 ))(rev$a (zip$d ?v0 ?v1 ))))):named a42 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_list$ ))(=> (= (size$b ?v0 )(size$ ?v1 ))(= (zip$e (rev$ ?v0 )(rev$g ?v1 ))(rev$i (zip$e ?v0 ?v1 ))))):named a43 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 B_list$ ))(=> (= (size$b ?v0 )(size$a ?v1 ))(= (zip$f (rev$ ?v0 )(rev$h ?v1 ))(rev$j (zip$f ?v0 ?v1 ))))):named a44 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_b_prod_list$ ))(=> (= (size$ ?v0 )(size$b ?v1 ))(= (zip$g (rev$g ?v0 )(rev$ ?v1 ))(rev$d (zip$g ?v0 ?v1 ))))):named a45 ))
(assert (! (forall ((?v0 B_list$ )(?v1 A_b_prod_list$ ))(=> (= (size$a ?v0 )(size$b ?v1 ))(= (zip$h (rev$h ?v0 )(rev$ ?v1 ))(rev$k (zip$h ?v0 ?v1 ))))):named a46 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ )(?v1 A_list$ ))(=> (= (size$c ?v0 )(size$ ?v1 ))(= (zip$i (rev$f ?v0 )(rev$g ?v1 ))(rev$l (zip$i ?v0 ?v1 ))))):named a47 ))
(assert (! (forall ((?v0 B_b_prod_bool_fun$ )(?v1 B_b_prod_list$ ))(= (pred_list$ ?v0 (rev$a ?v1 ))(pred_list$ ?v0 ?v1 ))):named a48 ))
(assert (! (forall ((?v0 B_a_prod_bool_fun$ )(?v1 B_a_prod_list$ ))(= (pred_list$a ?v0 (rev$b ?v1 ))(pred_list$a ?v0 ?v1 ))):named a49 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_bool_fun$ )(?v1 A_a_b_prod_a_b_prod_prod_prod_list$ ))(= (pred_list$b ?v0 (rev$c ?v1 ))(pred_list$b ?v0 ?v1 ))):named a50 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$ )(?v1 A_a_b_prod_prod_list$ ))(= (pred_list$c ?v0 (rev$d ?v1 ))(pred_list$c ?v0 ?v1 ))):named a51 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod_list$ ))(= (pred_list$d ?v0 (rev$e ?v1 ))(pred_list$d ?v0 ?v1 ))):named a52 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_bool_fun$ )(?v1 A_b_prod_a_b_prod_prod_list$ ))(= (fun_app$ (pred_list$e ?v0 )(rev$f ?v1 ))(fun_app$ (pred_list$e ?v0 )?v1 ))):named a53 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_list$ ))(= (pred_list$f ?v0 (rev$g ?v1 ))(pred_list$f ?v0 ?v1 ))):named a54 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_list$ ))(= (pred_list$g ?v0 (rev$h ?v1 ))(pred_list$g ?v0 ?v1 ))):named a55 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod_list$ ))(= (fun_app$a (pred_list$h ?v0 )(rev$ ?v1 ))(fun_app$a (pred_list$h ?v0 )?v1 ))):named a56 ))
(assert (! (forall ((?v0 B_b_prod_list$ ))(= (remdups_adj$ (rev$a ?v0 ))(rev$a (remdups_adj$ ?v0 )))):named a57 ))
(assert (! (forall ((?v0 B_a_prod_list$ ))(= (remdups_adj$a (rev$b ?v0 ))(rev$b (remdups_adj$a ?v0 )))):named a58 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_list$ ))(= (remdups_adj$b (rev$c ?v0 ))(rev$c (remdups_adj$b ?v0 )))):named a59 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_list$ ))(= (remdups_adj$c (rev$d ?v0 ))(rev$d (remdups_adj$c ?v0 )))):named a60 ))
(assert (! (forall ((?v0 A_a_prod_list$ ))(= (remdups_adj$d (rev$e ?v0 ))(rev$e (remdups_adj$d ?v0 )))):named a61 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ ))(= (remdups_adj$e (rev$f ?v0 ))(rev$f (remdups_adj$e ?v0 )))):named a62 ))
(assert (! (forall ((?v0 A_list$ ))(= (remdups_adj$f (rev$g ?v0 ))(rev$g (remdups_adj$f ?v0 )))):named a63 ))
(assert (! (forall ((?v0 B_list$ ))(= (remdups_adj$g (rev$h ?v0 ))(rev$h (remdups_adj$g ?v0 )))):named a64 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (remdups_adj$h (rev$ ?v0 ))(rev$ (remdups_adj$h ?v0 )))):named a65 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod$ ))(= (rev$a (replicate$ ?v0 ?v1 ))(replicate$ ?v0 ?v1 ))):named a66 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod$ ))(= (rev$b (replicate$a ?v0 ?v1 ))(replicate$a ?v0 ?v1 ))):named a67 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_b_prod_a_b_prod_prod_prod$ ))(= (rev$c (replicate$b ?v0 ?v1 ))(replicate$b ?v0 ?v1 ))):named a68 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_b_prod_prod$ ))(= (rev$d (replicate$c ?v0 ?v1 ))(replicate$c ?v0 ?v1 ))):named a69 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod$ ))(= (rev$e (replicate$d ?v0 ?v1 ))(replicate$d ?v0 ?v1 ))):named a70 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_a_b_prod_prod$ ))(= (rev$f (replicate$e ?v0 ?v1 ))(replicate$e ?v0 ?v1 ))):named a71 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(= (rev$g (replicate$f ?v0 ?v1 ))(replicate$f ?v0 ?v1 ))):named a72 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B$ ))(= (rev$h (replicate$g ?v0 ?v1 ))(replicate$g ?v0 ?v1 ))):named a73 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod$ ))(= (rev$ (replicate$h ?v0 ?v1 ))(replicate$h ?v0 ?v1 ))):named a74 ))
(assert (! (forall ((?v0 B_b_prod_list$ ))(= (= (rev$a ?v0 )nil$a )(= ?v0 nil$a ))):named a75 ))
(assert (! (forall ((?v0 B_a_prod_list$ ))(= (= (rev$b ?v0 )nil$b )(= ?v0 nil$b ))):named a76 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_list$ ))(= (= (rev$c ?v0 )nil$c )(= ?v0 nil$c ))):named a77 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_list$ ))(= (= (rev$d ?v0 )nil$d )(= ?v0 nil$d ))):named a78 ))
(assert (! (forall ((?v0 A_a_prod_list$ ))(= (= (rev$e ?v0 )nil$e )(= ?v0 nil$e ))):named a79 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ ))(= (= (rev$f ?v0 )nil$f )(= ?v0 nil$f ))):named a80 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (rev$g ?v0 )nil$g )(= ?v0 nil$g ))):named a81 ))
(assert (! (forall ((?v0 B_list$ ))(= (= (rev$h ?v0 )nil$h )(= ?v0 nil$h ))):named a82 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (= (rev$ ?v0 )nil$ )(= ?v0 nil$ ))):named a83 ))
(assert (! (forall ((?v0 B_b_prod_list$ ))(= (= nil$a (rev$a ?v0 ))(= ?v0 nil$a ))):named a84 ))
(assert (! (forall ((?v0 B_a_prod_list$ ))(= (= nil$b (rev$b ?v0 ))(= ?v0 nil$b ))):named a85 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_list$ ))(= (= nil$c (rev$c ?v0 ))(= ?v0 nil$c ))):named a86 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_list$ ))(= (= nil$d (rev$d ?v0 ))(= ?v0 nil$d ))):named a87 ))
(assert (! (forall ((?v0 A_a_prod_list$ ))(= (= nil$e (rev$e ?v0 ))(= ?v0 nil$e ))):named a88 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ ))(= (= nil$f (rev$f ?v0 ))(= ?v0 nil$f ))):named a89 ))
(assert (! (forall ((?v0 A_list$ ))(= (= nil$g (rev$g ?v0 ))(= ?v0 nil$g ))):named a90 ))
(assert (! (forall ((?v0 B_list$ ))(= (= nil$h (rev$h ?v0 ))(= ?v0 nil$h ))):named a91 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (= nil$ (rev$ ?v0 ))(= ?v0 nil$ ))):named a92 ))
(assert (! (forall ((?v0 B_list$ ))(! (= (zip$d nil$h ?v0 )nil$a ):pattern ((zip$d nil$h ?v0 )))):named a93 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (zip$c nil$h ?v0 )nil$b ):pattern ((zip$c nil$h ?v0 )))):named a94 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ ))(! (= (zip$j nil$g ?v0 )nil$c ):pattern ((zip$j nil$g ?v0 )))):named a95 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(! (= (zip$g nil$g ?v0 )nil$d ):pattern ((zip$g nil$g ?v0 )))):named a96 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (zip$b nil$g ?v0 )nil$e ):pattern ((zip$b nil$g ?v0 )))):named a97 ))
(assert (! (forall ((?v0 B_list$ ))(! (= (zip$ nil$g ?v0 )nil$ ):pattern ((zip$ nil$g ?v0 )))):named a98 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(! (= (zip$a nil$ ?v0 )nil$f ):pattern ((zip$a nil$ ?v0 )))):named a99 ))
(assert (! (forall ((?v0 B_b_prod_list$ ))(= (size$d (rev$a ?v0 ))(size$d ?v0 ))):named a100 ))
(assert (! (forall ((?v0 B_a_prod_list$ ))(= (size$e (rev$b ?v0 ))(size$e ?v0 ))):named a101 ))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_list$ ))(= (size$f (rev$c ?v0 ))(size$f ?v0 ))):named a102 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_list$ ))(= (size$g (rev$d ?v0 ))(size$g ?v0 ))):named a103 ))
(assert (! (forall ((?v0 A_a_prod_list$ ))(= (size$h (rev$e ?v0 ))(size$h ?v0 ))):named a104 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ ))(= (size$c (rev$f ?v0 ))(size$c ?v0 ))):named a105 ))
(assert (! (forall ((?v0 A_list$ ))(= (size$ (rev$g ?v0 ))(size$ ?v0 ))):named a106 ))
(assert (! (forall ((?v0 B_list$ ))(= (size$a (rev$h ?v0 ))(size$a ?v0 ))):named a107 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (size$b (rev$ ?v0 ))(size$b ?v0 ))):named a108 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_a_b_prod_prod$ ))(= (size$c (replicate$e ?v0 ?v1 ))?v0 )):named a109 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod$ ))(= (size$b (replicate$h ?v0 ?v1 ))?v0 )):named a110 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(= (size$ (replicate$f ?v0 ?v1 ))?v0 )):named a111 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B$ ))(= (size$a (replicate$g ?v0 ?v1 ))?v0 )):named a112 ))
(assert (! (forall ((?v0 B_list$ ))(= (= (remdups_adj$g ?v0 )nil$h )(= ?v0 nil$h ))):named a113 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (remdups_adj$f ?v0 )nil$g )(= ?v0 nil$g ))):named a114 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ ))(= (= (remdups_adj$e ?v0 )nil$f )(= ?v0 nil$f ))):named a115 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (= (remdups_adj$h ?v0 )nil$ )(= ?v0 nil$ ))):named a116 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_bool_fun$ ))(! (= (fun_app$ (pred_list$e ?v0 )nil$f )true ):pattern ((pred_list$e ?v0 )))):named a117 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ ))(! (= (fun_app$a (pred_list$h ?v0 )nil$ )true ):pattern ((pred_list$h ?v0 )))):named a118 ))
(check-sat )
;(get-unsat-core )
