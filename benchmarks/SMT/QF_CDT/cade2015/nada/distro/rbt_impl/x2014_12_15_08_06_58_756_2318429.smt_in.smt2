;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_list_fun$ 0 )
(declare-sort A_b_prod$ 0)
(declare-sort A_b_prod_list$ 0)
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-fun nil$ ()A_b_prod_list$)
(declare-fun hd$ (A_b_prod_list$)A_b_prod$)
(declare-fun tl$ (A_b_prod_list$)A_b_prod_list$)
(declare-fun cons$ (A_b_prod$ A_b_prod_list$ )A_b_prod_list$)
(declare-fun r$ ()Color$)
(declare-fun b$ ()Color$)
(declare-fun empty$ ()A_b_rbt$)
(declare-fun select$ (A_b_rbt$)Color$)
(declare-fun selecta$ (A_b_rbt$)A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$)A$)
(declare-fun selectc$ (A_b_rbt$)B$)
(declare-fun selectd$ (A_b_rbt$)A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$)
(declare-fun k$ ()A$ )
(declare-fun l$ ()A_b_rbt$ )
(declare-fun v$ ()B$ )
(declare-fun r$a ()A_b_rbt$ )
(declare-fun bind$ (A_b_prod_list$ A_b_prod_a_b_prod_list_fun$ )A_b_prod_list$ )
(declare-fun append$ (A_b_prod_list$ A_b_prod_list$ )A_b_prod_list$ )
(declare-fun balance$ (A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$ )
(declare-fun entries$ (A_b_rbt$ )A_b_prod_list$ )
(declare-fun fun_app$ (A_b_prod_a_b_prod_list_fun$ A_b_prod$ )A_b_prod_list$ )
(declare-fun fun_app$a (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(assert (! (not (= (entries$ (balance$ l$ k$ v$ r$a ))(append$ (entries$ l$ )(cons$ (pair$ k$ v$ )(entries$ r$a ))))):named a0 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a1 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a2 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ ))(= (append$ (append$ ?v0 ?v1 )?v2 )(append$ ?v0 (append$ ?v1 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod$ )(?v3 A_b_prod_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ ))(! (= (append$ (cons$ ?v0 ?v1 )?v2 )(cons$ ?v0 (append$ ?v1 ?v2 ))):pattern ((append$ (cons$ ?v0 ?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ )(?v3 A_b_prod_list$ )(?v4 A_b_prod_list$ ))(=> (and (= (cons$ ?v0 ?v1 )?v2 )(= ?v3 (append$ ?v1 ?v4 )))(= (cons$ ?v0 ?v3 )(append$ ?v2 ?v4 )))):named a8 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(! (= (entries$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(append$ (entries$ ?v1 )(cons$ (pair$ ?v2 ?v3 )(entries$ ?v4 )))):pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a9 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_a_b_prod_list_fun$ ))(! (= (bind$ (cons$ ?v0 ?v1 )?v2 )(append$ (fun_app$ ?v2 ?v0 )(bind$ ?v1 ?v2 ))):pattern ((bind$ (cons$ ?v0 ?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ )(?v3 A_b_prod_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v2 ?v3 ))(exists ((?v4 A_b_prod_list$ ))(or (and (= ?v0 (append$ ?v2 ?v4 ))(= (append$ ?v4 ?v1 )?v3 ))(and (= (append$ ?v0 ?v4 )?v2 )(= ?v1 (append$ ?v4 ?v3 ))))))):named a11 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ )(?v3 A_b_prod_list$ )(?v4 A_b_prod_list$ ))(=> (and (= (append$ ?v0 ?v1 )?v2 )(= ?v3 (append$ ?v1 ?v4 )))(= (append$ ?v0 ?v3 )(append$ ?v2 ?v4 )))):named a12 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ )(?v5 Color$ )(?v6 A_b_rbt$ )(?v7 A$ )(?v8 B$ )(?v9 A_b_rbt$ ))(= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )(branch$ ?v5 ?v6 ?v7 ?v8 ?v9 ))(and (= ?v0 ?v5 )(and (= ?v1 ?v6 )(and (= ?v2 ?v7 )(and (= ?v3 ?v8 )(= ?v4 ?v9 ))))))):named a13 ))
(assert (! (forall ((?v0 A_b_prod$ ))(exists ((?v1 A$ )(?v2 B$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a15 ))
(assert (! (forall ((?v0 A_b_prod$ ))(=> (forall ((?v1 A$ )(?v2 B$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a16 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod$ ))(=> (forall ((?v2 A$ )(?v3 B$ ))(fun_app$a ?v0 (pair$ ?v2 ?v3 )))(fun_app$a ?v0 ?v1 ))):named a17 ))
(check-sat )
;(get-unsat-core )
