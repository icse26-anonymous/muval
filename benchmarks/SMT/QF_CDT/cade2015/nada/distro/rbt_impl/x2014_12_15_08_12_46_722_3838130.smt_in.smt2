;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort A_b_b_fun_fun$ 0 )
(declare-sort A_b_c_fun_fun$ 0 )
(declare-sort A_c_b_fun_fun$ 0 )
(declare-sort A_c_c_fun_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_rbt_a_b_rbt_fun$ 0 )
(declare-sort A_b_rbt_a_c_rbt_fun$ 0 )
(declare-sort A_c_rbt_a_b_rbt_fun$ 0 )
(declare-sort A_c_rbt_a_c_rbt_fun$ 0 )
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-sort A_c_rbt$ 0)
(declare-sort A_list$ 0)
(declare-fun r$ ()Color$)
(declare-fun b$ ()Color$)
(declare-fun empty$ ()A_b_rbt$)
(declare-fun select$ (A_b_rbt$)Color$)
(declare-fun selecta$ (A_b_rbt$)A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$)A$)
(declare-fun selectc$ (A_b_rbt$)B$)
(declare-fun selectd$ (A_b_rbt$)A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$)
(declare-fun empty$a ()A_c_rbt$)
(declare-fun selecte$ (A_c_rbt$)Color$)
(declare-fun selectf$ (A_c_rbt$)A_c_rbt$)
(declare-fun selectg$ (A_c_rbt$)A$)
(declare-fun selecth$ (A_c_rbt$)C$)
(declare-fun selecti$ (A_c_rbt$)A_c_rbt$)
(declare-fun branch$a (Color$ A_c_rbt$ A$ C$ A_c_rbt$ )A_c_rbt$)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun f$ ()A_c_b_fun_fun$ )
(declare-fun t$ ()A_c_rbt$ )
(declare-fun map$ (A_c_b_fun_fun$ )A_c_rbt_a_b_rbt_fun$ )
(declare-fun inv1$ (A_b_rbt$ )Bool )
(declare-fun keys$ (A_b_rbt$ )A_list$ )
(declare-fun map$a (A_b_b_fun_fun$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun map$b (A_b_c_fun_fun$ )A_b_rbt_a_c_rbt_fun$ )
(declare-fun map$c (A_c_c_fun_fun$ )A_c_rbt_a_c_rbt_fun$ )
(declare-fun inv1$a (A_c_rbt$ )Bool )
(declare-fun inv1l$ (A_c_rbt$ )Bool )
(declare-fun keys$a (A_c_rbt$ )A_list$ )
(declare-fun paint$ (Color$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun inv1l$a (A_b_rbt$ )Bool )
(declare-fun is_rbt$ (A_a_bool_fun_fun$ A_c_rbt$ )Bool )
(declare-fun paint$a (Color$ )A_c_rbt_a_c_rbt_fun$ )
(declare-fun combine$ (A_b_rbt$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$ (A_c_rbt_a_b_rbt_fun$ A_c_rbt$ )A_b_rbt$ )
(declare-fun is_rbt$a (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(declare-fun color_of$ (A_b_rbt$ )Color$ )
(declare-fun combine$a (A_c_rbt$ A_c_rbt$ )A_c_rbt$ )
(declare-fun fun_app$a (A_b_rbt_a_b_rbt_fun$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$b (A_b_rbt_a_c_rbt_fun$ A_b_rbt$ )A_c_rbt$ )
(declare-fun fun_app$c (A_c_rbt_a_c_rbt_fun$ A_c_rbt$ )A_c_rbt$ )
(declare-fun fun_app$d (C_c_fun$ C$ )C$ )
(declare-fun fun_app$e (A_c_c_fun_fun$ A$ )C_c_fun$ )
(declare-fun fun_app$f (B_c_fun$ B$ )C$ )
(declare-fun fun_app$g (A_b_c_fun_fun$ A$ )B_c_fun$ )
(declare-fun fun_app$h (B_b_fun$ B$ )B$ )
(declare-fun fun_app$i (A_b_b_fun_fun$ A$ )B_b_fun$ )
(declare-fun fun_app$j (C_b_fun$ C$ )B$ )
(declare-fun fun_app$k (A_c_b_fun_fun$ A$ )C_b_fun$ )
(declare-fun fun_app$l (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$m (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$n (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$o (B_bool_fun$ B$ )Bool )
(declare-fun pred_rbt$ (A_bool_fun$ C_bool_fun$ A_c_rbt$ )Bool )
(declare-fun color_of$a (A_c_rbt$ )Color$ )
(declare-fun pred_rbt$a (A_bool_fun$ B_bool_fun$ A_b_rbt$ )Bool )
(declare-fun balance_left$ (A_c_rbt$ A$ C$ )A_c_rbt_a_c_rbt_fun$ )
(declare-fun balance_left$a (A_b_rbt$ A$ B$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun balance_right$ (A_c_rbt$ A$ C$ )A_c_rbt_a_c_rbt_fun$ )
(declare-fun rbt_map_entry$ (A_a_bool_fun_fun$ A$ B_b_fun$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun balance_right$a (A_b_rbt$ A$ B$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun rbt_map_entry$a (A_a_bool_fun_fun$ A$ C_c_fun$ )A_c_rbt_a_c_rbt_fun$ )
(assert (! (not (= (color_of$ (fun_app$ (map$ f$ )t$ ))(color_of$a t$ ))):named a0 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_b_rbt$ ))(= (keys$ (fun_app$a (map$a ?v0 )?v1 ))(keys$ ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_b_c_fun_fun$ )(?v1 A_b_rbt$ ))(= (keys$a (fun_app$b (map$b ?v0 )?v1 ))(keys$ ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_c_c_fun_fun$ )(?v1 A_c_rbt$ ))(= (keys$a (fun_app$c (map$c ?v0 )?v1 ))(keys$a ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_c_b_fun_fun$ )(?v1 A_c_rbt$ ))(= (keys$ (fun_app$ (map$ ?v0 )?v1 ))(keys$a ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 B_b_fun$ )(?v3 A_b_rbt$ ))(= (color_of$ (fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2 )?v3 ))(color_of$ ?v3 ))):named a5 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 C_c_fun$ )(?v3 A_c_rbt$ ))(= (color_of$a (fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2 )?v3 ))(color_of$a ?v3 ))):named a6 ))
(assert (! (forall ((?v0 A_c_c_fun_fun$ ))(! (= (fun_app$c (map$c ?v0 )empty$a )empty$a ):pattern ((map$c ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_b_c_fun_fun$ ))(! (= (fun_app$b (map$b ?v0 )empty$ )empty$a ):pattern ((map$b ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ ))(! (= (fun_app$a (map$a ?v0 )empty$ )empty$ ):pattern ((map$a ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_c_b_fun_fun$ ))(! (= (fun_app$ (map$ ?v0 )empty$a )empty$ ):pattern ((map$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_c_c_fun_fun$ )(?v1 Color$ )(?v2 A_c_rbt$ )(?v3 A$ )(?v4 C$ )(?v5 A_c_rbt$ ))(! (= (fun_app$c (map$c ?v0 )(branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))(branch$a ?v1 (fun_app$c (map$c ?v0 )?v2 )?v3 (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(fun_app$c (map$c ?v0 )?v5 ))):pattern ((fun_app$c (map$c ?v0 )(branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a11 ))
(assert (! (forall ((?v0 A_b_c_fun_fun$ )(?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(! (= (fun_app$b (map$b ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))(branch$a ?v1 (fun_app$b (map$b ?v0 )?v2 )?v3 (fun_app$f (fun_app$g ?v0 ?v3 )?v4 )(fun_app$b (map$b ?v0 )?v5 ))):pattern ((fun_app$b (map$b ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a12 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(! (= (fun_app$a (map$a ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))(branch$ ?v1 (fun_app$a (map$a ?v0 )?v2 )?v3 (fun_app$h (fun_app$i ?v0 ?v3 )?v4 )(fun_app$a (map$a ?v0 )?v5 ))):pattern ((fun_app$a (map$a ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a13 ))
(assert (! (forall ((?v0 A_c_b_fun_fun$ )(?v1 Color$ )(?v2 A_c_rbt$ )(?v3 A$ )(?v4 C$ )(?v5 A_c_rbt$ ))(! (= (fun_app$ (map$ ?v0 )(branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))(branch$ ?v1 (fun_app$ (map$ ?v0 )?v2 )?v3 (fun_app$j (fun_app$k ?v0 ?v3 )?v4 )(fun_app$ (map$ ?v0 )?v5 ))):pattern ((fun_app$ (map$ ?v0 )(branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a14 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(! (= (color_of$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 ))?v0 ):pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a15 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_c_rbt$ )(?v2 A$ )(?v3 C$ )(?v4 A_c_rbt$ ))(! (= (color_of$a (branch$a ?v0 ?v1 ?v2 ?v3 ?v4 ))?v0 ):pattern ((branch$a ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a16 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(= (color_of$ (fun_app$a (paint$ b$ )?v0 ))b$ )):named a17 ))
(assert (! (forall ((?v0 A_c_rbt$ ))(= (color_of$a (fun_app$c (paint$a b$ )?v0 ))b$ )):named a18 ))
(assert (! (= (color_of$ empty$ )b$ ):named a19 ))
(assert (! (= (color_of$a empty$a )b$ ):named a20 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_rbt$ ))(=> (and (inv1$ ?v0 )(and (inv1$ ?v1 )(and (= (color_of$ ?v0 )b$ )(= (color_of$ ?v1 )b$ ))))(inv1$ (combine$ ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 A_c_rbt$ ))(=> (and (inv1$a ?v0 )(and (inv1$a ?v1 )(and (= (color_of$a ?v0 )b$ )(= (color_of$a ?v1 )b$ ))))(inv1$a (combine$a ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_c_rbt$ )(?v2 A$ )(?v3 C$ )(?v4 A_c_rbt$ )(?v5 Color$ )(?v6 A_c_rbt$ )(?v7 A$ )(?v8 C$ )(?v9 A_c_rbt$ ))(= (= (branch$a ?v0 ?v1 ?v2 ?v3 ?v4 )(branch$a ?v5 ?v6 ?v7 ?v8 ?v9 ))(and (= ?v0 ?v5 )(and (= ?v1 ?v6 )(and (= ?v2 ?v7 )(and (= ?v3 ?v8 )(= ?v4 ?v9 ))))))):named a23 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ )(?v5 Color$ )(?v6 A_b_rbt$ )(?v7 A$ )(?v8 B$ )(?v9 A_b_rbt$ ))(= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )(branch$ ?v5 ?v6 ?v7 ?v8 ?v9 ))(and (= ?v0 ?v5 )(and (= ?v1 ?v6 )(and (= ?v2 ?v7 )(and (= ?v3 ?v8 )(= ?v4 ?v9 ))))))):named a24 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 C_c_fun$ )(?v3 Color$ )(?v4 A_c_rbt$ )(?v5 A$ )(?v6 C$ )(?v7 A_c_rbt$ ))(! (= (fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2 )(branch$a ?v3 ?v4 ?v5 ?v6 ?v7 ))(ite (fun_app$l (fun_app$m ?v0 ?v1 )?v5 )(branch$a ?v3 (fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2 )?v4 )?v5 ?v6 ?v7 )(ite (fun_app$l (fun_app$m ?v0 ?v5 )?v1 )(branch$a ?v3 ?v4 ?v5 ?v6 (fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2 )?v7 ))(branch$a ?v3 ?v4 ?v5 (fun_app$d ?v2 ?v6 )?v7 )))):pattern ((fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2 )(branch$a ?v3 ?v4 ?v5 ?v6 ?v7 ))))):named a25 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 B_b_fun$ )(?v3 Color$ )(?v4 A_b_rbt$ )(?v5 A$ )(?v6 B$ )(?v7 A_b_rbt$ ))(! (= (fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2 )(branch$ ?v3 ?v4 ?v5 ?v6 ?v7 ))(ite (fun_app$l (fun_app$m ?v0 ?v1 )?v5 )(branch$ ?v3 (fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2 )?v4 )?v5 ?v6 ?v7 )(ite (fun_app$l (fun_app$m ?v0 ?v5 )?v1 )(branch$ ?v3 ?v4 ?v5 ?v6 (fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2 )?v7 ))(branch$ ?v3 ?v4 ?v5 (fun_app$h ?v2 ?v6 )?v7 )))):pattern ((fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2 )(branch$ ?v3 ?v4 ?v5 ?v6 ?v7 ))))):named a26 ))
(assert (! (forall ((?v0 Color$ )(?v1 Color$ )(?v2 A_c_rbt$ )(?v3 A$ )(?v4 C$ )(?v5 A_c_rbt$ ))(! (= (fun_app$c (paint$a ?v0 )(branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))(branch$a ?v0 ?v2 ?v3 ?v4 ?v5 )):pattern ((fun_app$c (paint$a ?v0 )(branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a27 ))
(assert (! (forall ((?v0 Color$ )(?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(! (= (fun_app$a (paint$ ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))(branch$ ?v0 ?v2 ?v3 ?v4 ?v5 )):pattern ((fun_app$a (paint$ ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a28 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_c_rbt$ )(?v2 A$ )(?v3 C$ )(?v4 A_c_rbt$ ))(! (= (combine$a (branch$a ?v0 ?v1 ?v2 ?v3 ?v4 )empty$a )(branch$a ?v0 ?v1 ?v2 ?v3 ?v4 )):pattern ((branch$a ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a29 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(! (= (combine$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )empty$ )(branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )):pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a30 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(! (= (inv1$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(and (inv1$ ?v1 )(and (inv1$ ?v4 )(or (= ?v0 b$ )(and (= (color_of$ ?v1 )b$ )(= (color_of$ ?v4 )b$ )))))):pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a31 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_c_rbt$ )(?v2 A$ )(?v3 C$ )(?v4 A_c_rbt$ ))(! (= (inv1$a (branch$a ?v0 ?v1 ?v2 ?v3 ?v4 ))(and (inv1$a ?v1 )(and (inv1$a ?v4 )(or (= ?v0 b$ )(and (= (color_of$a ?v1 )b$ )(= (color_of$a ?v4 )b$ )))))):pattern ((branch$a ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a32 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 C_c_fun$ )(?v3 A_c_rbt$ ))(= (inv1$a (fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2 )?v3 ))(inv1$a ?v3 ))):named a33 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 B_b_fun$ )(?v3 A_b_rbt$ ))(= (inv1$ (fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2 )?v3 ))(inv1$ ?v3 ))):named a34 ))
(assert (! (forall ((?v0 A_c_rbt$ ))(! (= (combine$a empty$a ?v0 )?v0 ):pattern ((combine$a empty$a ?v0 )))):named a35 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(! (= (combine$ empty$ ?v0 )?v0 ):pattern ((combine$ empty$ ?v0 )))):named a36 ))
(assert (! (= (inv1$a empty$a )true ):named a37 ))
(assert (! (= (inv1$ empty$ )true ):named a38 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 C_c_fun$ ))(! (= (fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2 )empty$a )empty$a ):pattern ((rbt_map_entry$a ?v0 ?v1 ?v2 )))):named a39 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 B_b_fun$ ))(! (= (fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2 )empty$ )empty$ ):pattern ((rbt_map_entry$ ?v0 ?v1 ?v2 )))):named a40 ))
(assert (! (forall ((?v0 Color$ ))(! (= (fun_app$c (paint$a ?v0 )empty$a )empty$a ):pattern ((paint$a ?v0 )))):named a41 ))
(assert (! (forall ((?v0 Color$ ))(! (= (fun_app$a (paint$ ?v0 )empty$ )empty$ ):pattern ((paint$ ?v0 )))):named a42 ))
(assert (! (forall ((?v0 A_c_rbt$ ))(=> (and (=> (= ?v0 empty$a )false )(forall ((?v1 Color$ )(?v2 A_c_rbt$ )(?v3 A$ )(?v4 C$ )(?v5 A_c_rbt$ ))(=> (= ?v0 (branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))false )))false )):named a43 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (and (=> (= ?v0 empty$ )false )(forall ((?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(=> (= ?v0 (branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))false )))false )):named a44 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_c_rbt$ )(?v2 A$ )(?v3 C$ )(?v4 A_c_rbt$ ))(not (= empty$a (branch$a ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a45 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(not (= empty$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a46 ))
(assert (! (forall ((?v0 A_c_rbt$ ))(=> (inv1l$ ?v0 )(inv1$a (fun_app$c (paint$a b$ )?v0 )))):named a47 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (inv1l$a ?v0 )(inv1$ (fun_app$a (paint$ b$ )?v0 )))):named a48 ))
(assert (! (forall ((?v0 A$ )(?v1 C$ )(?v2 A_c_rbt$ )(?v3 A$ )(?v4 C$ )(?v5 A_c_rbt$ ))(! (= (fun_app$c (balance_right$ empty$a ?v0 ?v1 )(branch$a b$ ?v2 ?v3 ?v4 ?v5 ))empty$a ):pattern ((fun_app$c (balance_right$ empty$a ?v0 ?v1 )(branch$a b$ ?v2 ?v3 ?v4 ?v5 ))))):named a49 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(! (= (fun_app$a (balance_right$a empty$ ?v0 ?v1 )(branch$ b$ ?v2 ?v3 ?v4 ?v5 ))empty$ ):pattern ((fun_app$a (balance_right$a empty$ ?v0 ?v1 )(branch$ b$ ?v2 ?v3 ?v4 ?v5 ))))):named a50 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 A$ )(?v2 C$ )(?v3 A_c_rbt$ )(?v4 A$ )(?v5 C$ ))(! (= (fun_app$c (balance_left$ (branch$a b$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 )empty$a )empty$a ):pattern ((balance_left$ (branch$a b$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 )))):named a51 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A$ )(?v2 B$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ ))(! (= (fun_app$a (balance_left$a (branch$ b$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 )empty$ )empty$ ):pattern ((balance_left$a (branch$ b$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 )))):named a52 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 C_bool_fun$ )(?v2 Color$ )(?v3 A_c_rbt$ )(?v4 A$ )(?v5 C$ )(?v6 A_c_rbt$ ))(! (= (pred_rbt$ ?v0 ?v1 (branch$a ?v2 ?v3 ?v4 ?v5 ?v6 ))(and (pred_rbt$ ?v0 ?v1 ?v3 )(and (fun_app$l ?v0 ?v4 )(and (fun_app$n ?v1 ?v5 )(pred_rbt$ ?v0 ?v1 ?v6 ))))):pattern ((pred_rbt$ ?v0 ?v1 (branch$a ?v2 ?v3 ?v4 ?v5 ?v6 ))))):named a53 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(! (= (pred_rbt$a ?v0 ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))(and (pred_rbt$a ?v0 ?v1 ?v3 )(and (fun_app$l ?v0 ?v4 )(and (fun_app$o ?v1 ?v5 )(pred_rbt$a ?v0 ?v1 ?v6 ))))):pattern ((pred_rbt$a ?v0 ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))))):named a54 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 A_c_rbt$ ))(=> (and (inv1$a ?v0 )(inv1$a ?v1 ))(inv1l$ (combine$a ?v0 ?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_rbt$ ))(=> (and (inv1$ ?v0 )(inv1$ ?v1 ))(inv1l$a (combine$ ?v0 ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 C_c_fun$ )(?v3 A_c_rbt$ ))(= (is_rbt$ ?v0 (fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2 )?v3 ))(is_rbt$ ?v0 ?v3 ))):named a57 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 B_b_fun$ )(?v3 A_b_rbt$ ))(= (is_rbt$a ?v0 (fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2 )?v3 ))(is_rbt$a ?v0 ?v3 ))):named a58 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 A$ )(?v2 C$ )(?v3 A_c_rbt$ )(?v4 A_c_rbt$ )(?v5 A$ )(?v6 C$ )(?v7 A_c_rbt$ ))(! (= (combine$a (branch$a b$ ?v0 ?v1 ?v2 ?v3 )(branch$a r$ ?v4 ?v5 ?v6 ?v7 ))(branch$a r$ (combine$a (branch$a b$ ?v0 ?v1 ?v2 ?v3 )?v4 )?v5 ?v6 ?v7 )):pattern ((combine$a (branch$a b$ ?v0 ?v1 ?v2 ?v3 )(branch$a r$ ?v4 ?v5 ?v6 ?v7 ))))):named a59 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A$ )(?v2 B$ )(?v3 A_b_rbt$ )(?v4 A_b_rbt$ )(?v5 A$ )(?v6 B$ )(?v7 A_b_rbt$ ))(! (= (combine$ (branch$ b$ ?v0 ?v1 ?v2 ?v3 )(branch$ r$ ?v4 ?v5 ?v6 ?v7 ))(branch$ r$ (combine$ (branch$ b$ ?v0 ?v1 ?v2 ?v3 )?v4 )?v5 ?v6 ?v7 )):pattern ((combine$ (branch$ b$ ?v0 ?v1 ?v2 ?v3 )(branch$ r$ ?v4 ?v5 ?v6 ?v7 ))))):named a60 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 A$ )(?v2 C$ )(?v3 A_c_rbt$ )(?v4 A_c_rbt$ )(?v5 A$ )(?v6 C$ )(?v7 A_c_rbt$ ))(! (= (combine$a (branch$a r$ ?v0 ?v1 ?v2 ?v3 )(branch$a b$ ?v4 ?v5 ?v6 ?v7 ))(branch$a r$ ?v0 ?v1 ?v2 (combine$a ?v3 (branch$a b$ ?v4 ?v5 ?v6 ?v7 )))):pattern ((combine$a (branch$a r$ ?v0 ?v1 ?v2 ?v3 )(branch$a b$ ?v4 ?v5 ?v6 ?v7 ))))):named a61 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A$ )(?v2 B$ )(?v3 A_b_rbt$ )(?v4 A_b_rbt$ )(?v5 A$ )(?v6 B$ )(?v7 A_b_rbt$ ))(! (= (combine$ (branch$ r$ ?v0 ?v1 ?v2 ?v3 )(branch$ b$ ?v4 ?v5 ?v6 ?v7 ))(branch$ r$ ?v0 ?v1 ?v2 (combine$ ?v3 (branch$ b$ ?v4 ?v5 ?v6 ?v7 )))):pattern ((combine$ (branch$ r$ ?v0 ?v1 ?v2 ?v3 )(branch$ b$ ?v4 ?v5 ?v6 ?v7 ))))):named a62 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_c_rbt$ )(?v2 A$ )(?v3 C$ )(?v4 A_c_rbt$ ))(! (= (inv1l$ (branch$a ?v0 ?v1 ?v2 ?v3 ?v4 ))(and (inv1$a ?v1 )(inv1$a ?v4 ))):pattern ((branch$a ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a63 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(! (= (inv1l$a (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(and (inv1$ ?v1 )(inv1$ ?v4 ))):pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a64 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 A_c_rbt$ )(?v2 A$ )(?v3 C$ ))(=> (and (inv1l$ ?v0 )(inv1$a ?v1 ))(inv1l$ (fun_app$c (balance_left$ ?v0 ?v2 ?v3 )?v1 )))):named a65 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ ))(=> (and (inv1l$a ?v0 )(inv1$ ?v1 ))(inv1l$a (fun_app$a (balance_left$a ?v0 ?v2 ?v3 )?v1 )))):named a66 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 A_c_rbt$ )(?v2 A$ )(?v3 C$ ))(=> (and (inv1$a ?v0 )(inv1l$ ?v1 ))(inv1l$ (fun_app$c (balance_right$ ?v0 ?v2 ?v3 )?v1 )))):named a67 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ ))(=> (and (inv1$ ?v0 )(inv1l$a ?v1 ))(inv1l$a (fun_app$a (balance_right$a ?v0 ?v2 ?v3 )?v1 )))):named a68 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 A$ )(?v2 C$ )(?v3 A_c_rbt$ )(?v4 A$ )(?v5 C$ )(?v6 A_c_rbt$ ))(! (= (fun_app$c (balance_left$ (branch$a r$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 )?v6 )(branch$a r$ (branch$a b$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 ?v6 )):pattern ((fun_app$c (balance_left$ (branch$a r$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 )?v6 )))):named a69 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A$ )(?v2 B$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(! (= (fun_app$a (balance_left$a (branch$ r$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 )?v6 )(branch$ r$ (branch$ b$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 ?v6 )):pattern ((fun_app$a (balance_left$a (branch$ r$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 )?v6 )))):named a70 ))
(assert (! (forall ((?v0 A$ )(?v1 C$ )(?v2 A$ )(?v3 C$ )(?v4 A_c_rbt$ ))(! (= (fun_app$c (balance_left$ empty$a ?v0 ?v1 )(branch$a r$ empty$a ?v2 ?v3 ?v4 ))empty$a ):pattern ((fun_app$c (balance_left$ empty$a ?v0 ?v1 )(branch$a r$ empty$a ?v2 ?v3 ?v4 ))))):named a71 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(! (= (fun_app$a (balance_left$a empty$ ?v0 ?v1 )(branch$ r$ empty$ ?v2 ?v3 ?v4 ))empty$ ):pattern ((fun_app$a (balance_left$a empty$ ?v0 ?v1 )(branch$ r$ empty$ ?v2 ?v3 ?v4 ))))):named a72 ))
(assert (! (forall ((?v0 A$ )(?v1 C$ )(?v2 A_c_rbt$ )(?v3 A$ )(?v4 C$ )(?v5 A_c_rbt$ )(?v6 A$ )(?v7 C$ )(?v8 A_c_rbt$ ))(! (= (fun_app$c (balance_left$ empty$a ?v0 ?v1 )(branch$a r$ (branch$a r$ ?v2 ?v3 ?v4 ?v5 )?v6 ?v7 ?v8 ))empty$a ):pattern ((fun_app$c (balance_left$ empty$a ?v0 ?v1 )(branch$a r$ (branch$a r$ ?v2 ?v3 ?v4 ?v5 )?v6 ?v7 ?v8 ))))):named a73 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ )(?v6 A$ )(?v7 B$ )(?v8 A_b_rbt$ ))(! (= (fun_app$a (balance_left$a empty$ ?v0 ?v1 )(branch$ r$ (branch$ r$ ?v2 ?v3 ?v4 ?v5 )?v6 ?v7 ?v8 ))empty$ ):pattern ((fun_app$a (balance_left$a empty$ ?v0 ?v1 )(branch$ r$ (branch$ r$ ?v2 ?v3 ?v4 ?v5 )?v6 ?v7 ?v8 ))))):named a74 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 A$ )(?v2 C$ )(?v3 A_c_rbt$ )(?v4 A$ )(?v5 C$ )(?v6 A_c_rbt$ ))(! (= (fun_app$c (balance_right$ ?v0 ?v1 ?v2 )(branch$a r$ ?v3 ?v4 ?v5 ?v6 ))(branch$a r$ ?v0 ?v1 ?v2 (branch$a b$ ?v3 ?v4 ?v5 ?v6 ))):pattern ((fun_app$c (balance_right$ ?v0 ?v1 ?v2 )(branch$a r$ ?v3 ?v4 ?v5 ?v6 ))))):named a75 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A$ )(?v2 B$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(! (= (fun_app$a (balance_right$a ?v0 ?v1 ?v2 )(branch$ r$ ?v3 ?v4 ?v5 ?v6 ))(branch$ r$ ?v0 ?v1 ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6 ))):pattern ((fun_app$a (balance_right$a ?v0 ?v1 ?v2 )(branch$ r$ ?v3 ?v4 ?v5 ?v6 ))))):named a76 ))
(assert (! (not (= r$ b$ )):named a77 ))
(assert (! (forall ((?v0 Color$ ))(=> (and (=> (= ?v0 r$ )false )(=> (= ?v0 b$ )false ))false )):named a78 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 A$ )(?v2 C$ )(?v3 A$ )(?v4 C$ ))(! (= (fun_app$c (balance_right$ (branch$a r$ ?v0 ?v1 ?v2 empty$a )?v3 ?v4 )empty$a )empty$a ):pattern ((balance_right$ (branch$a r$ ?v0 ?v1 ?v2 empty$a )?v3 ?v4 )))):named a79 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A$ )(?v2 B$ )(?v3 A$ )(?v4 B$ ))(! (= (fun_app$a (balance_right$a (branch$ r$ ?v0 ?v1 ?v2 empty$ )?v3 ?v4 )empty$ )empty$ ):pattern ((balance_right$a (branch$ r$ ?v0 ?v1 ?v2 empty$ )?v3 ?v4 )))):named a80 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 A$ )(?v2 C$ )(?v3 A_c_rbt$ )(?v4 A$ )(?v5 C$ )(?v6 A_c_rbt$ )(?v7 A$ )(?v8 C$ ))(! (= (fun_app$c (balance_right$ (branch$a r$ ?v0 ?v1 ?v2 (branch$a r$ ?v3 ?v4 ?v5 ?v6 ))?v7 ?v8 )empty$a )empty$a ):pattern ((balance_right$ (branch$a r$ ?v0 ?v1 ?v2 (branch$a r$ ?v3 ?v4 ?v5 ?v6 ))?v7 ?v8 )))):named a81 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A$ )(?v2 B$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ )(?v7 A$ )(?v8 B$ ))(! (= (fun_app$a (balance_right$a (branch$ r$ ?v0 ?v1 ?v2 (branch$ r$ ?v3 ?v4 ?v5 ?v6 ))?v7 ?v8 )empty$ )empty$ ):pattern ((balance_right$a (branch$ r$ ?v0 ?v1 ?v2 (branch$ r$ ?v3 ?v4 ?v5 ?v6 ))?v7 ?v8 )))):named a82 ))
(assert (! (forall ((?v0 A$ )(?v1 C$ ))(! (= (fun_app$c (balance_left$ empty$a ?v0 ?v1 )empty$a )empty$a ):pattern ((balance_left$ empty$a ?v0 ?v1 )))):named a83 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ ))(! (= (fun_app$a (balance_left$a empty$ ?v0 ?v1 )empty$ )empty$ ):pattern ((balance_left$a empty$ ?v0 ?v1 )))):named a84 ))
(assert (! (forall ((?v0 A_c_rbt$ )(?v1 A$ )(?v2 C$ )(?v3 A_c_rbt$ )(?v4 A$ )(?v5 C$ )(?v6 A$ )(?v7 C$ )(?v8 A_c_rbt$ ))(! (= (fun_app$c (balance_left$ (branch$a b$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 )(branch$a r$ empty$a ?v6 ?v7 ?v8 ))empty$a ):pattern ((fun_app$c (balance_left$ (branch$a b$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 )(branch$a r$ empty$a ?v6 ?v7 ?v8 ))))):named a85 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A$ )(?v2 B$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A$ )(?v7 B$ )(?v8 A_b_rbt$ ))(! (= (fun_app$a (balance_left$a (branch$ b$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 )(branch$ r$ empty$ ?v6 ?v7 ?v8 ))empty$ ):pattern ((fun_app$a (balance_left$a (branch$ b$ ?v0 ?v1 ?v2 ?v3 )?v4 ?v5 )(branch$ r$ empty$ ?v6 ?v7 ?v8 ))))):named a86 ))
(check-sat )
;(get-unsat-core )
