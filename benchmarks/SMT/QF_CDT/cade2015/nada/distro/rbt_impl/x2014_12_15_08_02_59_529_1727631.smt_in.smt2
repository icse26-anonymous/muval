;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_list_set$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_list_fun$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort A_list_a_fun$ 0 )
(declare-sort A_a_option_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_list_nat_fun$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort A_list_list_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_rbt_bool_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort A_a_list_list_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort A_b_prod_list_set$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-sort A_a_b_prod_list_fun$ 0 )
(declare-sort A_a_list_option_fun$ 0 )
(declare-sort A_b_prod_a_list_fun$ 0 )
(declare-sort A_b_rbt_a_b_rbt_fun$ 0 )
(declare-sort A_list_a_option_fun$ 0 )
(declare-sort A_list_list_nat_fun$ 0 )
(declare-sort A_list_list_bool_fun$ 0 )
(declare-sort Nat_a_a_list_fun_fun$ 0 )
(declare-sort A_a_b_prod_option_fun$ 0 )
(declare-sort A_a_list_bool_fun_fun$ 0 )
(declare-sort A_b_prod_a_option_fun$ 0 )
(declare-sort A_b_prod_list_nat_fun$ 0 )
(declare-sort A_list_a_bool_fun_fun$ 0 )
(declare-sort A_b_prod_list_bool_fun$ 0 )
(declare-sort A_list_a_list_list_fun$ 0 )
(declare-sort A_list_list_a_list_fun$ 0 )
(declare-sort A_a_b_prod_bool_fun_fun$ 0 )
(declare-sort A_a_list_a_list_fun_fun$ 0 )
(declare-sort A_b_prod_a_bool_fun_fun$ 0 )
(declare-sort A_b_prod_a_list_list_fun$ 0 )
(declare-sort A_b_prod_list_a_list_fun$ 0 )
(declare-sort A_list_a_b_prod_list_fun$ 0 )
(declare-sort A_list_a_list_option_fun$ 0 )
(declare-sort B_list_a_b_prod_list_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_list_fun$ 0 )
(declare-sort A_b_prod_a_list_option_fun$ 0 )
(declare-sort A_list_a_b_prod_option_fun$ 0 )
(declare-sort A_list_a_list_bool_fun_fun$ 0 )
(declare-sort A_list_list_a_list_list_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_option_fun$ 0 )
(declare-sort A_b_prod_a_list_bool_fun_fun$ 0 )
(declare-sort A_b_rbt_a_b_rbt_bool_fun_fun$ 0 )
(declare-sort A_list_a_b_prod_bool_fun_fun$ 0 )
(declare-sort A_list_a_list_a_list_fun_fun$ 0 )
(declare-sort A_b_prod_list_a_list_list_fun$ 0 )
(declare-sort A_list_list_a_b_prod_list_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_bool_fun_fun$ 0 )
(declare-sort A_b_prod_list_a_b_prod_list_fun$ 0 )
(declare-sort A_list_a_list_list_bool_fun_fun$ 0 )
(declare-sort A_list_list_a_list_bool_fun_fun$ 0 )
(declare-sort A_b_prod_list_a_list_bool_fun_fun$ 0 )
(declare-sort A_list_a_b_prod_list_bool_fun_fun$ 0 )
(declare-sort A_list_list_a_list_a_list_fun_fun$ 0 )
(declare-sort A_b_prod_list_a_list_a_list_fun_fun$ 0 )
(declare-sort A_list_list_a_list_list_bool_fun_fun$ 0 )
(declare-sort A_list_a_list_a_list_bool_fun_fun_fun$ 0 )
(declare-sort A_b_prod_list_a_list_list_bool_fun_fun$ 0 )
(declare-sort A_list_list_a_b_prod_list_bool_fun_fun$ 0 )
(declare-sort A_b_prod_list_a_b_prod_list_bool_fun_fun$ 0 )
(declare-sort A_list$ 0)
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-sort A_b_prod$ 0)
(declare-sort A_b_prod_list$ 0)
(declare-sort A_list_list$ 0)
(declare-sort A_b_prod_option$ 0)
(declare-sort A_list_option$ 0)
(declare-sort A_option$ 0)
(declare-sort B_list$ 0)
(declare-sort A_b_prod_list_list$ 0)
(declare-sort A_list_list_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun r$ ()Color$)
(declare-fun b$ ()Color$)
(declare-fun empty$ ()A_b_rbt$)
(declare-fun select$ (A_b_rbt$)Color$)
(declare-fun selecta$ (A_b_rbt$)A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$)A$)
(declare-fun selectc$ (A_b_rbt$)B$)
(declare-fun selectd$ (A_b_rbt$)A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-fun nil$a ()A_b_prod_list$)
(declare-fun hd$a (A_b_prod_list$)A_b_prod$)
(declare-fun tl$a (A_b_prod_list$)A_b_prod_list$)
(declare-fun cons$a (A_b_prod$ A_b_prod_list$ )A_b_prod_list$)
(declare-fun nil$b ()A_list_list$)
(declare-fun hd$b (A_list_list$)A_list$)
(declare-fun tl$b (A_list_list$)A_list_list$)
(declare-fun cons$b (A_list$ A_list_list$ )A_list_list$)
(declare-fun none$ ()A_b_prod_option$)
(declare-fun the$ (A_b_prod_option$)A_b_prod$)
(declare-fun some$ (A_b_prod$ )A_b_prod_option$)
(declare-fun none$a ()A_list_option$)
(declare-fun the$a (A_list_option$)A_list$)
(declare-fun some$a (A_list$ )A_list_option$)
(declare-fun none$b ()A_option$)
(declare-fun the$b (A_option$)A$)
(declare-fun some$b (A$ )A_option$)
(declare-fun nil$c ()B_list$)
(declare-fun hd$c (B_list$)B$)
(declare-fun tl$c (B_list$)B_list$)
(declare-fun cons$c (B$ B_list$ )B_list$)
(declare-fun nil$d ()A_b_prod_list_list$)
(declare-fun hd$d (A_b_prod_list_list$)A_b_prod_list$)
(declare-fun tl$d (A_b_prod_list_list$)A_b_prod_list_list$)
(declare-fun cons$d (A_b_prod_list$ A_b_prod_list_list$ )A_b_prod_list_list$)
(declare-fun nil$e ()A_list_list_list$)
(declare-fun hd$e (A_list_list_list$)A_list_list$)
(declare-fun tl$e (A_list_list_list$)A_list_list_list$)
(declare-fun cons$e (A_list_list$ A_list_list_list$ )A_list_list_list$)
(declare-fun uu$ ()A_a_bool_fun_fun$ )
(declare-fun rev$ (A_list$ )A_list$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun uua$ ()B_b_bool_fun_fun$ )
(declare-fun uub$ ()A_b_rbt_a_b_rbt_bool_fun_fun$ )
(declare-fun uuc$ (A_set$ )A_bool_fun$ )
(declare-fun uud$ (A_list_set$ )A_list_bool_fun$ )
(declare-fun uue$ ()A_a_list_a_list_fun_fun$ )
(declare-fun zip$ (A_list$ )B_list_a_b_prod_list_fun$ )
(declare-fun bind$ (A_list$ A_a_b_prod_list_fun$ )A_b_prod_list$ )
(declare-fun fold$ (A_a_list_a_list_fun_fun$ )A_list_a_list_a_list_fun_fun$ )
(declare-fun keys$ (A_b_rbt$ )A_list$ )
(declare-fun last$ (A_b_prod_list$ )A_b_prod$ )
(declare-fun maps$ (A_a_b_prod_list_fun$ )A_list_a_b_prod_list_fun$ )
(declare-fun null$ (A_b_prod_list$ )Bool )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun succ$ (A_b_prod_list_set$ A_b_prod_list$ )A_b_prod_set$ )
(declare-fun bind$a (A_list$ A_a_list_list_fun$ )A_list_list$ )
(declare-fun bind$b (A_b_prod_list$ A_b_prod_a_list_fun$ )A_list$ )
(declare-fun bind$c (A_b_prod_list$ A_b_prod_a_b_prod_list_fun$ )A_b_prod_list$ )
(declare-fun bind$d (A_b_prod_list$ A_b_prod_a_list_list_fun$ )A_list_list$ )
(declare-fun bind$e (A_list_list$ A_list_a_list_fun$ )A_list$ )
(declare-fun bind$f (A_list_list$ A_list_a_b_prod_list_fun$ )A_b_prod_list$ )
(declare-fun bind$g (A_list_list$ A_list_a_list_list_fun$ )A_list_list$ )
(declare-fun bind$h (A_list$ A_a_list_fun$ )A_list$ )
(declare-fun last$a (A_list_list$ )A_list$ )
(declare-fun last$b (A_list$ )A$ )
(declare-fun maps$a (A_a_list_list_fun$ )A_list_a_list_list_fun$ )
(declare-fun maps$b (A_b_prod_a_list_fun$ )A_b_prod_list_a_list_fun$ )
(declare-fun maps$c (A_b_prod_a_b_prod_list_fun$ )A_b_prod_list_a_b_prod_list_fun$ )
(declare-fun maps$d (A_b_prod_a_list_list_fun$ )A_b_prod_list_a_list_list_fun$ )
(declare-fun maps$e (A_list_a_list_fun$ )A_list_list_a_list_fun$ )
(declare-fun maps$f (A_list_a_b_prod_list_fun$ )A_list_list_a_b_prod_list_fun$ )
(declare-fun maps$g (A_list_a_list_list_fun$ )A_list_list_a_list_list_fun$ )
(declare-fun maps$h (A_a_list_fun$ )A_list_a_list_fun$ )
(declare-fun null$a (A_list_list$ )Bool )
(declare-fun null$b (A_list$ )Bool )
(declare-fun shift$ (A_list_set$ A$ )A_list_set$ )
(declare-fun succ$a (A_list_list_set$ A_list_list$ )A_list_set$ )
(declare-fun succ$b (A_list_set$ A_list$ )A_set$ )
(declare-fun append$ (A_b_prod_list$ )A_b_prod_list_a_b_prod_list_fun$ )
(declare-fun insert$ (A_b_prod$ )A_b_prod_list_a_b_prod_list_fun$ )
(declare-fun member$ (A_list$ A_list_set$ )Bool )
(declare-fun splice$ (A_b_prod_list$ )A_b_prod_list_a_b_prod_list_fun$ )
(declare-fun append$a (A_list_list$ )A_list_list_a_list_list_fun$ )
(declare-fun append$b (A_list$ )A_list_a_list_fun$ )
(declare-fun butlast$ (A_b_prod_list$ )A_b_prod_list$ )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun entries$ (A_b_rbt$ )A_b_prod_list$ )
(declare-fun fun_app$ (A_list_a_list_fun$ A_list$ )A_list$ )
(declare-fun insert$a (A_list$ )A_list_list_a_list_list_fun$ )
(declare-fun insert$b (A$ )A_list_a_list_fun$ )
(declare-fun lexordp$ (A_b_prod_a_b_prod_bool_fun_fun$ )A_b_prod_list_a_b_prod_list_bool_fun_fun$ )
(declare-fun list_ex$ (A_b_prod_bool_fun$ )A_b_prod_list_bool_fun$ )
(declare-fun map_rbt$ (A_a_fun$ B_b_fun$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun member$b (A_b_prod_list$ )A_b_prod_bool_fun$ )
(declare-fun member$c (A_list_list$ )A_list_bool_fun$ )
(declare-fun member$d (A_list$ )A_bool_fun$ )
(declare-fun member$e (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun member$f (A_b_prod_list$ A_b_prod_list_set$ )Bool )
(declare-fun member$g (A_list_list$ A_list_list_set$ )Bool )
(declare-fun product$ (A_list$ B_list$ )A_b_prod_list$ )
(declare-fun rel_rbt$ (A_a_bool_fun_fun$ B_b_bool_fun_fun$ )A_b_rbt_a_b_rbt_bool_fun_fun$ )
(declare-fun rotate1$ (A_b_prod_list$ )A_b_prod_list$ )
(declare-fun splice$a (A_list_list$ )A_list_list_a_list_list_fun$ )
(declare-fun splice$b (A_list$ )A_list_a_list_fun$ )
(declare-fun butlast$a (A_list_list$ )A_list_list$ )
(declare-fun butlast$b (A_list$ )A_list$ )
(declare-fun collect$a (A_list_bool_fun$ )A_list_set$ )
(declare-fun fun_app$a (A_a_list_a_list_fun_fun$ A$ )A_list_a_list_fun$ )
(declare-fun fun_app$b (A_list_bool_fun$ A_list$ )Bool )
(declare-fun fun_app$c (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$d (A_b_rbt_bool_fun$ A_b_rbt$ )Bool )
(declare-fun fun_app$e (A_b_rbt_a_b_rbt_bool_fun_fun$ A_b_rbt$ )A_b_rbt_bool_fun$ )
(declare-fun fun_app$f (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$g (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$h (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$i (A_b_rbt_a_b_rbt_fun$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$j (A_b_prod_list_bool_fun$ A_b_prod_list$ )Bool )
(declare-fun fun_app$k (A_list_list_bool_fun$ A_list_list$ )Bool )
(declare-fun fun_app$l (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun fun_app$m (A_b_prod_list_nat_fun$ A_b_prod_list$ )Nat$ )
(declare-fun fun_app$n (A_list_list_nat_fun$ A_list_list$ )Nat$ )
(declare-fun fun_app$o (A_list_nat_fun$ A_list$ )Nat$ )
(declare-fun fun_app$p (A_a_fun$ A$ )A$ )
(declare-fun fun_app$q (B_b_fun$ B$ )B$ )
(declare-fun fun_app$r (A_b_prod_list_a_b_prod_list_fun$ A_b_prod_list$ )A_b_prod_list$ )
(declare-fun fun_app$s (A_list_list_a_list_list_fun$ A_list_list$ )A_list_list$ )
(declare-fun fun_app$t (A_list_a_b_prod_list_fun$ A_list$ )A_b_prod_list$ )
(declare-fun fun_app$u (A_list_a_list_list_fun$ A_list$ )A_list_list$ )
(declare-fun fun_app$v (A_b_prod_list_a_list_fun$ A_b_prod_list$ )A_list$ )
(declare-fun fun_app$w (A_b_prod_list_a_list_list_fun$ A_b_prod_list$ )A_list_list$ )
(declare-fun fun_app$x (A_list_list_a_list_fun$ A_list_list$ )A_list$ )
(declare-fun fun_app$y (A_list_list_a_b_prod_list_fun$ A_list_list$ )A_b_prod_list$ )
(declare-fun fun_app$z (A_b_prod_list_a_b_prod_list_bool_fun_fun$ A_b_prod_list$ )A_b_prod_list_bool_fun$ )
(declare-fun lexordp$a (A_list_a_list_bool_fun_fun$ )A_list_list_a_list_list_bool_fun_fun$ )
(declare-fun lexordp$b (A_a_bool_fun_fun$ )A_list_a_list_bool_fun_fun$ )
(declare-fun list_ex$a (A_list_bool_fun$ )A_list_list_bool_fun$ )
(declare-fun list_ex$b (A_bool_fun$ )A_list_bool_fun$ )
(declare-fun list_ex1$ (A_b_prod_bool_fun$ )A_b_prod_list_bool_fun$ )
(declare-fun listrelp$ (A_b_prod_a_b_prod_bool_fun_fun$ )A_b_prod_list_a_b_prod_list_bool_fun_fun$ )
(declare-fun pred_rbt$ (A_bool_fun$ B_bool_fun$ A_b_rbt$ )Bool )
(declare-fun rotate1$a (A_list_list$ )A_list_list$ )
(declare-fun rotate1$b (A_list$ )A_list$ )
(declare-fun sublists$ (A_b_prod_list$ )A_b_prod_list_list$ )
(declare-fun fun_app$aa (A_list_list_a_list_list_bool_fun_fun$ A_list_list$ )A_list_list_bool_fun$ )
(declare-fun fun_app$ab (A_list_a_list_bool_fun_fun$ A_list$ )A_list_bool_fun$ )
(declare-fun fun_app$ac (B_list_a_b_prod_list_fun$ B_list$ )A_b_prod_list$ )
(declare-fun fun_app$ad (A_b_prod_list_a_list_bool_fun_fun$ A_b_prod_list$ )A_list_bool_fun$ )
(declare-fun fun_app$ae (A_b_prod_list_a_list_list_bool_fun_fun$ A_b_prod_list$ )A_list_list_bool_fun$ )
(declare-fun fun_app$af (A_list_a_b_prod_list_bool_fun_fun$ A_list$ )A_b_prod_list_bool_fun$ )
(declare-fun fun_app$ag (A_list_a_list_list_bool_fun_fun$ A_list$ )A_list_list_bool_fun$ )
(declare-fun fun_app$ah (A_list_list_a_b_prod_list_bool_fun_fun$ A_list_list$ )A_b_prod_list_bool_fun$ )
(declare-fun fun_app$ai (A_list_list_a_list_bool_fun_fun$ A_list_list$ )A_list_bool_fun$ )
(declare-fun fun_app$aj (A_b_prod_a_b_prod_bool_fun_fun$ A_b_prod$ )A_b_prod_bool_fun$ )
(declare-fun fun_app$ak (A_b_prod_a_bool_fun_fun$ A_b_prod$ )A_bool_fun$ )
(declare-fun fun_app$al (A_b_prod_a_list_bool_fun_fun$ A_b_prod$ )A_list_bool_fun$ )
(declare-fun fun_app$am (A_a_b_prod_bool_fun_fun$ A$ )A_b_prod_bool_fun$ )
(declare-fun fun_app$an (A_a_list_bool_fun_fun$ A$ )A_list_bool_fun$ )
(declare-fun fun_app$ao (A_list_a_b_prod_bool_fun_fun$ A_list$ )A_b_prod_bool_fun$ )
(declare-fun fun_app$ap (A_list_a_bool_fun_fun$ A_list$ )A_bool_fun$ )
(declare-fun fun_app$aq (A_b_prod_list_a_list_a_list_fun_fun$ A_b_prod_list$ )A_list_a_list_fun$ )
(declare-fun fun_app$ar (A_b_prod_a_fun$ A_b_prod$ )A$ )
(declare-fun fun_app$as (A_b_prod_a_list_fun$ A_b_prod$ )A_list$ )
(declare-fun fun_app$at (A_list_a_list_a_list_fun_fun$ A_list$ )A_list_a_list_fun$ )
(declare-fun fun_app$au (A_a_list_fun$ A$ )A_list$ )
(declare-fun fun_app$av (A_list_list_a_list_a_list_fun_fun$ A_list_list$ )A_list_a_list_fun$ )
(declare-fun fun_app$aw (A_list_a_fun$ A_list$ )A$ )
(declare-fun fun_app$ax (A_list_a_list_a_list_bool_fun_fun_fun$ A_list$ )A_list_a_list_bool_fun_fun$ )
(declare-fun fun_app$ay (Nat_a_a_list_fun_fun$ Nat$ )A_a_list_fun$ )
(declare-fun list_ex1$a (A_list_bool_fun$ )A_list_list_bool_fun$ )
(declare-fun list_ex1$b (A_bool_fun$ )A_list_bool_fun$ )
(declare-fun listrelp$a (A_b_prod_a_bool_fun_fun$ )A_b_prod_list_a_list_bool_fun_fun$ )
(declare-fun listrelp$b (A_b_prod_a_list_bool_fun_fun$ )A_b_prod_list_a_list_list_bool_fun_fun$ )
(declare-fun listrelp$c (A_a_b_prod_bool_fun_fun$ )A_list_a_b_prod_list_bool_fun_fun$ )
(declare-fun listrelp$d (A_a_list_bool_fun_fun$ )A_list_a_list_list_bool_fun_fun$ )
(declare-fun listrelp$e (A_list_a_b_prod_bool_fun_fun$ )A_list_list_a_b_prod_list_bool_fun_fun$ )
(declare-fun listrelp$f (A_list_a_bool_fun_fun$ )A_list_list_a_list_bool_fun_fun$ )
(declare-fun listrelp$g (A_list_a_list_bool_fun_fun$ )A_list_list_a_list_list_bool_fun_fun$ )
(declare-fun listrelp$h (A_a_bool_fun_fun$ )A_list_a_list_bool_fun_fun$ )
(declare-fun replicate$ (Nat$ )A_a_list_fun$ )
(declare-fun sublists$a (A_list_list$ )A_list_list_list$ )
(declare-fun sublists$b (A_list$ )A_list_list$ )
(declare-fun gen_length$ (Nat$ )A_b_prod_list_nat_fun$ )
(declare-fun lexordp_eq$ (A_b_prod_a_b_prod_bool_fun_fun$ )A_b_prod_list_a_b_prod_list_bool_fun_fun$ )
(declare-fun map_filter$ (A_a_b_prod_option_fun$ )A_list_a_b_prod_list_fun$ )
(declare-fun gen_length$a (Nat$ )A_list_list_nat_fun$ )
(declare-fun gen_length$b (Nat$ )A_list_nat_fun$ )
(declare-fun lexordp_eq$a (A_list_a_list_bool_fun_fun$ )A_list_list_a_list_list_bool_fun_fun$ )
(declare-fun lexordp_eq$b (A_a_bool_fun_fun$ )A_list_a_list_bool_fun_fun$ )
(declare-fun list_update$ (A_list$ )Nat_a_a_list_fun_fun$ )
(declare-fun map_filter$a (A_a_list_option_fun$ )A_list_a_list_list_fun$ )
(declare-fun map_filter$b (A_b_prod_a_option_fun$ )A_b_prod_list_a_list_fun$ )
(declare-fun map_filter$c (A_b_prod_a_b_prod_option_fun$ )A_b_prod_list_a_b_prod_list_fun$ )
(declare-fun map_filter$d (A_b_prod_a_list_option_fun$ )A_b_prod_list_a_list_list_fun$ )
(declare-fun map_filter$e (A_list_a_option_fun$ )A_list_list_a_list_fun$ )
(declare-fun map_filter$f (A_list_a_b_prod_option_fun$ )A_list_list_a_b_prod_list_fun$ )
(declare-fun map_filter$g (A_list_a_list_option_fun$ )A_list_list_a_list_list_fun$ )
(declare-fun map_filter$h (A_a_option_fun$ )A_list_a_list_fun$ )
(declare-fun remdups_adj$ (A_list$ )A_list$ )
(declare-fun product_lists$ (A_b_prod_list_list$ )A_b_prod_list_list$ )
(declare-fun product_lists$a (A_list_list_list$ )A_list_list_list$ )
(declare-fun product_lists$b (A_list_list$ )A_list_list$ )
(declare-fun map_tailrec_rev$ (A_b_prod_a_fun$ )A_b_prod_list_a_list_a_list_fun_fun$ )
(declare-fun map_tailrec_rev$a (A_b_prod_a_list_fun$ A_b_prod_list$ A_list_list$ )A_list_list$ )
(declare-fun map_tailrec_rev$b (A_a_fun$ )A_list_a_list_a_list_fun_fun$ )
(declare-fun map_tailrec_rev$c (A_a_list_fun$ A_list$ A_list_list$ )A_list_list$ )
(declare-fun map_tailrec_rev$d (A_list_a_fun$ )A_list_list_a_list_a_list_fun_fun$ )
(declare-fun map_tailrec_rev$e (A_list_a_list_fun$ A_list_list$ A_list_list$ )A_list_list$ )
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (fun_app$ (fun_app$a uue$ ?v0 )?v1 )(cons$ ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uue$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list$ ))(! (= (fun_app$b (uud$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$b (uud$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ ))(! (= (fun_app$c (uuc$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$c (uuc$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A_b_rbt$ ))(! (= (fun_app$d (fun_app$e uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uub$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$f (fun_app$g uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uua$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$c (fun_app$h uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$c (fun_app$h uu$ ?v0 )?v1 )))):named a5 ))
(assert (! (not (= (keys$ empty$ )nil$ )):named a6 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(=> (and (=> (= ?v0 nil$a )false )(=> (not (= ?v0 nil$a ))false ))false )):named a7 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(=> (not (= ?v0 nil$b ))false ))false )):named a8 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ ))(pred_rbt$ ?v0 ?v1 empty$ )):named a10 ))
(assert (! (forall ((?v0 A_a_b_prod_list_fun$ ))(! (= (bind$ nil$ ?v0 )nil$a ):pattern ((bind$ nil$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_a_list_list_fun$ ))(! (= (bind$a nil$ ?v0 )nil$b ):pattern ((bind$a nil$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_b_prod_a_list_fun$ ))(! (= (bind$b nil$a ?v0 )nil$ ):pattern ((bind$b nil$a ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_list_fun$ ))(! (= (bind$c nil$a ?v0 )nil$a ):pattern ((bind$c nil$a ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_b_prod_a_list_list_fun$ ))(! (= (bind$d nil$a ?v0 )nil$b ):pattern ((bind$d nil$a ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ ))(! (= (bind$e nil$b ?v0 )nil$ ):pattern ((bind$e nil$b ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_list_a_b_prod_list_fun$ ))(! (= (bind$f nil$b ?v0 )nil$a ):pattern ((bind$f nil$b ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_list_a_list_list_fun$ ))(! (= (bind$g nil$b ?v0 )nil$b ):pattern ((bind$g nil$b ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_a_list_fun$ ))(! (= (bind$h nil$ ?v0 )nil$ ):pattern ((bind$h nil$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ ))(! (= (fun_app$i (map_rbt$ ?v0 ?v1 )empty$ )empty$ ):pattern ((map_rbt$ ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (and (=> (= ?v0 empty$ )false )(forall ((?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(=> (= ?v0 (branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))false )))false )):named a21 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(not (= empty$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a22 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ ))(! (= (fun_app$j (list_ex1$ ?v0 )nil$a )false ):pattern ((list_ex1$ ?v0 )))):named a23 ))
(assert (! (forall ((?v0 A_list_bool_fun$ ))(! (= (fun_app$k (list_ex1$a ?v0 )nil$b )false ):pattern ((list_ex1$a ?v0 )))):named a24 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$b (list_ex1$b ?v0 )nil$ )false ):pattern ((list_ex1$b ?v0 )))):named a25 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ ))(fun_app$d (fun_app$e (rel_rbt$ ?v0 ?v1 )empty$ )empty$ )):named a26 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$l (member$b nil$a )?v0 )false ):pattern ((fun_app$l (member$b nil$a )?v0 )))):named a27 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$b (member$c nil$b )?v0 )false ):pattern ((fun_app$b (member$c nil$b )?v0 )))):named a28 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$c (member$d nil$ )?v0 )false ):pattern ((fun_app$c (member$d nil$ )?v0 )))):named a29 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$m (gen_length$ ?v0 )nil$a )?v0 ):pattern ((gen_length$ ?v0 )))):named a30 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$n (gen_length$a ?v0 )nil$b )?v0 ):pattern ((gen_length$a ?v0 )))):named a31 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$o (gen_length$b ?v0 )nil$ )?v0 ):pattern ((gen_length$b ?v0 )))):named a32 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ )(?v5 Color$ )(?v6 A_b_rbt$ )(?v7 A$ )(?v8 B$ )(?v9 A_b_rbt$ ))(= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )(branch$ ?v5 ?v6 ?v7 ?v8 ?v9 ))(and (= ?v0 ?v5 )(and (= ?v1 ?v6 )(and (= ?v2 ?v7 )(and (= ?v3 ?v8 )(= ?v4 ?v9 ))))))):named a33 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(! (= (pred_rbt$ ?v0 ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))(and (pred_rbt$ ?v0 ?v1 ?v3 )(and (fun_app$c ?v0 ?v4 )(and (fun_app$f ?v1 ?v5 )(pred_rbt$ ?v0 ?v1 ?v6 ))))):pattern ((pred_rbt$ ?v0 ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))))):named a34 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(! (= (fun_app$i (map_rbt$ ?v0 ?v1 )(branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))(branch$ ?v2 (fun_app$i (map_rbt$ ?v0 ?v1 )?v3 )(fun_app$p ?v0 ?v4 )(fun_app$q ?v1 ?v5 )(fun_app$i (map_rbt$ ?v0 ?v1 )?v6 ))):pattern ((fun_app$i (map_rbt$ ?v0 ?v1 )(branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))))):named a35 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ )(?v7 Color$ )(?v8 A_b_rbt$ )(?v9 A$ )(?v10 B$ )(?v11 A_b_rbt$ ))(! (= (fun_app$d (fun_app$e (rel_rbt$ ?v0 ?v1 )(branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))(branch$ ?v7 ?v8 ?v9 ?v10 ?v11 ))(and (= ?v2 ?v7 )(and (fun_app$d (fun_app$e (rel_rbt$ ?v0 ?v1 )?v3 )?v8 )(and (fun_app$c (fun_app$h ?v0 ?v4 )?v9 )(and (fun_app$f (fun_app$g ?v1 ?v5 )?v10 )(fun_app$d (fun_app$e (rel_rbt$ ?v0 ?v1 )?v6 )?v11 )))))):pattern ((fun_app$d (fun_app$e (rel_rbt$ ?v0 ?v1 )(branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))(branch$ ?v7 ?v8 ?v9 ?v10 ?v11 ))))):named a36 ))
(assert (! (= (rel_rbt$ uu$ uua$ )uub$ ):named a37 ))
(assert (! (forall ((?v0 Color$ )(?v1 Color$ )(?v2 A_a_bool_fun_fun$ )(?v3 B_b_bool_fun_fun$ )(?v4 A_b_rbt$ )(?v5 A_b_rbt$ )(?v6 A$ )(?v7 A$ )(?v8 B$ )(?v9 B$ )(?v10 A_b_rbt$ )(?v11 A_b_rbt$ ))(=> (and (= ?v0 ?v1 )(and (fun_app$d (fun_app$e (rel_rbt$ ?v2 ?v3 )?v4 )?v5 )(and (fun_app$c (fun_app$h ?v2 ?v6 )?v7 )(and (fun_app$f (fun_app$g ?v3 ?v8 )?v9 )(fun_app$d (fun_app$e (rel_rbt$ ?v2 ?v3 )?v10 )?v11 )))))(fun_app$d (fun_app$e (rel_rbt$ ?v2 ?v3 )(branch$ ?v0 ?v4 ?v6 ?v8 ?v10 ))(branch$ ?v1 ?v5 ?v7 ?v9 ?v11 )))):named a38 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(not (fun_app$d (fun_app$e (rel_rbt$ ?v0 ?v1 )empty$ )(branch$ ?v2 ?v3 ?v4 ?v5 ?v6 )))):named a39 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(not (fun_app$d (fun_app$e (rel_rbt$ ?v0 ?v1 )(branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))empty$ ))):named a40 ))
(assert (! (= (entries$ empty$ )nil$a ):named a41 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(! (= (fun_app$r (splice$ ?v0 )nil$a )?v0 ):pattern ((splice$ ?v0 )))):named a42 ))
(assert (! (forall ((?v0 A_list_list$ ))(! (= (fun_app$s (splice$a ?v0 )nil$b )?v0 ):pattern ((splice$a ?v0 )))):named a43 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$ (splice$b ?v0 )nil$ )?v0 ):pattern ((splice$b ?v0 )))):named a44 ))
(assert (! (forall ((?v0 A_a_b_prod_list_fun$ ))(! (= (fun_app$t (maps$ ?v0 )nil$ )nil$a ):pattern ((maps$ ?v0 )))):named a45 ))
(assert (! (forall ((?v0 A_a_list_list_fun$ ))(! (= (fun_app$u (maps$a ?v0 )nil$ )nil$b ):pattern ((maps$a ?v0 )))):named a46 ))
(assert (! (forall ((?v0 A_b_prod_a_list_fun$ ))(! (= (fun_app$v (maps$b ?v0 )nil$a )nil$ ):pattern ((maps$b ?v0 )))):named a47 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_list_fun$ ))(! (= (fun_app$r (maps$c ?v0 )nil$a )nil$a ):pattern ((maps$c ?v0 )))):named a48 ))
(assert (! (forall ((?v0 A_b_prod_a_list_list_fun$ ))(! (= (fun_app$w (maps$d ?v0 )nil$a )nil$b ):pattern ((maps$d ?v0 )))):named a49 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ ))(! (= (fun_app$x (maps$e ?v0 )nil$b )nil$ ):pattern ((maps$e ?v0 )))):named a50 ))
(assert (! (forall ((?v0 A_list_a_b_prod_list_fun$ ))(! (= (fun_app$y (maps$f ?v0 )nil$b )nil$a ):pattern ((maps$f ?v0 )))):named a51 ))
(assert (! (forall ((?v0 A_list_a_list_list_fun$ ))(! (= (fun_app$s (maps$g ?v0 )nil$b )nil$b ):pattern ((maps$g ?v0 )))):named a52 ))
(assert (! (forall ((?v0 A_a_list_fun$ ))(! (= (fun_app$ (maps$h ?v0 )nil$ )nil$ ):pattern ((maps$h ?v0 )))):named a53 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (and (=> (= ?v0 empty$ )false )(and (forall ((?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(=> (= ?v0 (branch$ r$ ?v1 ?v2 ?v3 ?v4 ))false ))(forall ((?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(=> (= ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4 ))false ))))false )):named a54 ))
(assert (! (= (null$ nil$a )true ):named a55 ))
(assert (! (= (null$a nil$b )true ):named a56 ))
(assert (! (= (null$b nil$ )true ):named a57 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (= ?v0 nil$a )(null$ ?v0 ))):named a58 ))
(assert (! (forall ((?v0 A_list_list$ ))(= (= ?v0 nil$b )(null$a ?v0 ))):named a59 ))
(assert (! (forall ((?v0 A_list$ ))(= (= ?v0 nil$ )(null$b ?v0 ))):named a60 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (= (rotate1$ ?v0 )nil$a )(= ?v0 nil$a ))):named a61 ))
(assert (! (forall ((?v0 A_list_list$ ))(= (= (rotate1$a ?v0 )nil$b )(= ?v0 nil$b ))):named a62 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (rotate1$b ?v0 )nil$ )(= ?v0 nil$ ))):named a63 ))
(assert (! (forall ((?v0 A_a_b_prod_option_fun$ ))(! (= (fun_app$t (map_filter$ ?v0 )nil$ )nil$a ):pattern ((map_filter$ ?v0 )))):named a64 ))
(assert (! (forall ((?v0 A_a_list_option_fun$ ))(! (= (fun_app$u (map_filter$a ?v0 )nil$ )nil$b ):pattern ((map_filter$a ?v0 )))):named a65 ))
(assert (! (forall ((?v0 A_b_prod_a_option_fun$ ))(! (= (fun_app$v (map_filter$b ?v0 )nil$a )nil$ ):pattern ((map_filter$b ?v0 )))):named a66 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_option_fun$ ))(! (= (fun_app$r (map_filter$c ?v0 )nil$a )nil$a ):pattern ((map_filter$c ?v0 )))):named a67 ))
(assert (! (forall ((?v0 A_b_prod_a_list_option_fun$ ))(! (= (fun_app$w (map_filter$d ?v0 )nil$a )nil$b ):pattern ((map_filter$d ?v0 )))):named a68 ))
(assert (! (forall ((?v0 A_list_a_option_fun$ ))(! (= (fun_app$x (map_filter$e ?v0 )nil$b )nil$ ):pattern ((map_filter$e ?v0 )))):named a69 ))
(assert (! (forall ((?v0 A_list_a_b_prod_option_fun$ ))(! (= (fun_app$y (map_filter$f ?v0 )nil$b )nil$a ):pattern ((map_filter$f ?v0 )))):named a70 ))
(assert (! (forall ((?v0 A_list_a_list_option_fun$ ))(! (= (fun_app$s (map_filter$g ?v0 )nil$b )nil$b ):pattern ((map_filter$g ?v0 )))):named a71 ))
(assert (! (forall ((?v0 A_a_option_fun$ ))(! (= (fun_app$ (map_filter$h ?v0 )nil$ )nil$ ):pattern ((map_filter$h ?v0 )))):named a72 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ ))(! (= (fun_app$j (list_ex$ ?v0 )nil$a )false ):pattern ((list_ex$ ?v0 )))):named a73 ))
(assert (! (forall ((?v0 A_list_bool_fun$ ))(! (= (fun_app$k (list_ex$a ?v0 )nil$b )false ):pattern ((list_ex$a ?v0 )))):named a74 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$b (list_ex$b ?v0 )nil$ )false ):pattern ((list_ex$b ?v0 )))):named a75 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod_list$ ))(! (= (fun_app$j (fun_app$z (lexordp_eq$ ?v0 )nil$a )?v1 )true ):pattern ((fun_app$j (fun_app$z (lexordp_eq$ ?v0 )nil$a )?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list_list$ ))(! (= (fun_app$k (fun_app$aa (lexordp_eq$a ?v0 )nil$b )?v1 )true ):pattern ((fun_app$k (fun_app$aa (lexordp_eq$a ?v0 )nil$b )?v1 )))):named a77 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ ))(! (= (fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )nil$ )?v1 )true ):pattern ((fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )nil$ )?v1 )))):named a78 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod_list$ ))(! (= (fun_app$j (fun_app$z (lexordp_eq$ ?v0 )?v1 )nil$a )(= ?v1 nil$a )):pattern ((fun_app$z (lexordp_eq$ ?v0 )?v1 )))):named a79 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list_list$ ))(! (= (fun_app$k (fun_app$aa (lexordp_eq$a ?v0 )?v1 )nil$b )(= ?v1 nil$b )):pattern ((fun_app$aa (lexordp_eq$a ?v0 )?v1 )))):named a80 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ ))(! (= (fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )?v1 )nil$ )(= ?v1 nil$ )):pattern ((fun_app$ab (lexordp_eq$b ?v0 )?v1 )))):named a81 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ ))(fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )?v1 )?v1 )):named a82 ))
(assert (! (not (= r$ b$ )):named a83 ))
(assert (! (forall ((?v0 Color$ ))(=> (and (=> (= ?v0 r$ )false )(=> (= ?v0 b$ )false ))false )):named a84 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod_list$ ))(fun_app$j (fun_app$z (lexordp_eq$ ?v0 )nil$a )?v1 )):named a85 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list_list$ ))(fun_app$k (fun_app$aa (lexordp_eq$a ?v0 )nil$b )?v1 )):named a86 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ ))(fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )nil$ )?v1 )):named a87 ))
(assert (! (= (rotate1$ nil$a )nil$a ):named a88 ))
(assert (! (= (rotate1$a nil$b )nil$b ):named a89 ))
(assert (! (= (rotate1$b nil$ )nil$ ):named a90 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(! (= (fun_app$r (splice$ nil$a )?v0 )?v0 ):pattern ((fun_app$r (splice$ nil$a )?v0 )))):named a91 ))
(assert (! (forall ((?v0 A_list_list$ ))(! (= (fun_app$s (splice$a nil$b )?v0 )?v0 ):pattern ((fun_app$s (splice$a nil$b )?v0 )))):named a92 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$ (splice$b nil$ )?v0 )?v0 ):pattern ((fun_app$ (splice$b nil$ )?v0 )))):named a93 ))
(assert (! (forall ((?v0 B_list$ ))(! (= (product$ nil$ ?v0 )nil$a ):pattern ((product$ nil$ ?v0 )))):named a94 ))
(assert (! (forall ((?v0 B_list$ ))(! (= (fun_app$ac (zip$ nil$ )?v0 )nil$a ):pattern ((fun_app$ac (zip$ nil$ )?v0 )))):named a95 ))
(assert (! (forall ((?v0 A_set$ ))(= (collect$ (uuc$ ?v0 ))?v0 )):named a96 ))
(assert (! (forall ((?v0 A_list_set$ ))(= (collect$a (uud$ ?v0 ))?v0 )):named a97 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ ))(= (member$a ?v0 (collect$ ?v1 ))(fun_app$c ?v1 ?v0 ))):named a98 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_bool_fun$ ))(= (member$ ?v0 (collect$a ?v1 ))(fun_app$b ?v1 ?v0 ))):named a99 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod$ )(?v2 A_b_prod_list$ ))(! (= (fun_app$j (fun_app$z (lexordp_eq$ ?v0 )(cons$a ?v1 ?v2 ))nil$a )false ):pattern ((fun_app$z (lexordp_eq$ ?v0 )(cons$a ?v1 ?v2 ))))):named a100 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list_list$ ))(! (= (fun_app$k (fun_app$aa (lexordp_eq$a ?v0 )(cons$b ?v1 ?v2 ))nil$b )false ):pattern ((fun_app$aa (lexordp_eq$a ?v0 )(cons$b ?v1 ?v2 ))))):named a101 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_list$ ))(! (= (fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )(cons$ ?v1 ?v2 ))nil$ )false ):pattern ((fun_app$ab (lexordp_eq$b ?v0 )(cons$ ?v1 ?v2 ))))):named a102 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ ))(=> (and (= (fun_app$r (splice$ ?v0 )?v1 )?v2 )(and (forall ((?v3 A_b_prod_list$ ))(=> (and (= ?v0 nil$a )(and (= ?v1 ?v3 )(= ?v2 ?v3 )))false ))(and (forall ((?v3 A_b_prod$ )(?v4 A_b_prod_list$ ))(=> (and (= ?v0 (cons$a ?v3 ?v4 ))(and (= ?v1 nil$a )(= ?v2 (cons$a ?v3 ?v4 ))))false ))(forall ((?v3 A_b_prod$ )(?v4 A_b_prod_list$ )(?v5 A_b_prod$ )(?v6 A_b_prod_list$ ))(=> (and (= ?v0 (cons$a ?v3 ?v4 ))(and (= ?v1 (cons$a ?v5 ?v6 ))(= ?v2 (cons$a ?v3 (cons$a ?v5 (fun_app$r (splice$ ?v4 )?v6 ))))))false )))))false )):named a103 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ )(?v2 A_list_list$ ))(=> (and (= (fun_app$s (splice$a ?v0 )?v1 )?v2 )(and (forall ((?v3 A_list_list$ ))(=> (and (= ?v0 nil$b )(and (= ?v1 ?v3 )(= ?v2 ?v3 )))false ))(and (forall ((?v3 A_list$ )(?v4 A_list_list$ ))(=> (and (= ?v0 (cons$b ?v3 ?v4 ))(and (= ?v1 nil$b )(= ?v2 (cons$b ?v3 ?v4 ))))false ))(forall ((?v3 A_list$ )(?v4 A_list_list$ )(?v5 A_list$ )(?v6 A_list_list$ ))(=> (and (= ?v0 (cons$b ?v3 ?v4 ))(and (= ?v1 (cons$b ?v5 ?v6 ))(= ?v2 (cons$b ?v3 (cons$b ?v5 (fun_app$s (splice$a ?v4 )?v6 ))))))false )))))false )):named a104 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(=> (and (= (fun_app$ (splice$b ?v0 )?v1 )?v2 )(and (forall ((?v3 A_list$ ))(=> (and (= ?v0 nil$ )(and (= ?v1 ?v3 )(= ?v2 ?v3 )))false ))(and (forall ((?v3 A$ )(?v4 A_list$ ))(=> (and (= ?v0 (cons$ ?v3 ?v4 ))(and (= ?v1 nil$ )(= ?v2 (cons$ ?v3 ?v4 ))))false ))(forall ((?v3 A$ )(?v4 A_list$ )(?v5 A$ )(?v6 A_list$ ))(=> (and (= ?v0 (cons$ ?v3 ?v4 ))(and (= ?v1 (cons$ ?v5 ?v6 ))(= ?v2 (cons$ ?v3 (cons$ ?v5 (fun_app$ (splice$b ?v4 )?v6 ))))))false )))))false )):named a105 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(! (= (fun_app$r (splice$ (cons$a ?v0 ?v1 ))nil$a )(cons$a ?v0 ?v1 )):pattern ((cons$a ?v0 ?v1 )))):named a106 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ ))(! (= (fun_app$s (splice$a (cons$b ?v0 ?v1 ))nil$b )(cons$b ?v0 ?v1 )):pattern ((cons$b ?v0 ?v1 )))):named a107 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (fun_app$ (splice$b (cons$ ?v0 ?v1 ))nil$ )(cons$ ?v0 ?v1 )):pattern ((cons$ ?v0 ?v1 )))):named a108 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a109 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list$ )(?v3 A_list_list$ ))(= (= (cons$b ?v0 ?v1 )(cons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a110 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list_list$ )(?v3 A_list$ )(?v4 A_list_list$ ))(! (= (fun_app$k (fun_app$aa (lexordp_eq$a ?v0 )(cons$b ?v1 ?v2 ))(cons$b ?v3 ?v4 ))(or (fun_app$b (fun_app$ab ?v0 ?v1 )?v3 )(and (not (fun_app$b (fun_app$ab ?v0 ?v3 )?v1 ))(fun_app$k (fun_app$aa (lexordp_eq$a ?v0 )?v2 )?v4 )))):pattern ((fun_app$k (fun_app$aa (lexordp_eq$a ?v0 )(cons$b ?v1 ?v2 ))(cons$b ?v3 ?v4 ))))):named a111 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_list$ )(?v3 A$ )(?v4 A_list$ ))(! (= (fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )(cons$ ?v1 ?v2 ))(cons$ ?v3 ?v4 ))(or (fun_app$c (fun_app$h ?v0 ?v1 )?v3 )(and (not (fun_app$c (fun_app$h ?v0 ?v3 )?v1 ))(fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )?v2 )?v4 )))):pattern ((fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )(cons$ ?v1 ?v2 ))(cons$ ?v3 ?v4 ))))):named a112 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_list$ ))(! (= (fun_app$b (list_ex$b ?v0 )(cons$ ?v1 ?v2 ))(or (fun_app$c ?v0 ?v1 )(fun_app$b (list_ex$b ?v0 )?v2 ))):pattern ((fun_app$b (list_ex$b ?v0 )(cons$ ?v1 ?v2 ))))):named a113 ))
(assert (! (forall ((?v0 A_list_bool_fun$ )(?v1 A_list$ )(?v2 A_list_list$ ))(! (= (fun_app$k (list_ex$a ?v0 )(cons$b ?v1 ?v2 ))(or (fun_app$b ?v0 ?v1 )(fun_app$k (list_ex$a ?v0 )?v2 ))):pattern ((fun_app$k (list_ex$a ?v0 )(cons$b ?v1 ?v2 ))))):named a114 ))
(assert (! (forall ((?v0 A_b_prod_list_list$ ))(=> (and (=> (= ?v0 nil$d )false )(and (forall ((?v1 A_b_prod_list_list$ ))(=> (= ?v0 (cons$d nil$a ?v1 ))false ))(forall ((?v1 A_b_prod$ )(?v2 A_b_prod_list$ )(?v3 A_b_prod_list_list$ ))(=> (= ?v0 (cons$d (cons$a ?v1 ?v2 )?v3 ))false ))))false )):named a115 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(=> (and (=> (= ?v0 nil$e )false )(and (forall ((?v1 A_list_list_list$ ))(=> (= ?v0 (cons$e nil$b ?v1 ))false ))(forall ((?v1 A_list$ )(?v2 A_list_list$ )(?v3 A_list_list_list$ ))(=> (= ?v0 (cons$e (cons$b ?v1 ?v2 )?v3 ))false ))))false )):named a116 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(and (forall ((?v1 A_list_list$ ))(=> (= ?v0 (cons$b nil$ ?v1 ))false ))(forall ((?v1 A$ )(?v2 A_list$ )(?v3 A_list_list$ ))(=> (= ?v0 (cons$b (cons$ ?v1 ?v2 )?v3 ))false ))))false )):named a117 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(not (= (cons$ ?v0 ?v1 )?v1 ))):named a118 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ ))(not (= (cons$b ?v0 ?v1 )?v1 ))):named a119 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(not (= nil$a (cons$a ?v0 ?v1 )))):named a120 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ ))(not (= nil$b (cons$b ?v0 ?v1 )))):named a121 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(not (= nil$ (cons$ ?v0 ?v1 )))):named a122 ))
(assert (! (forall ((?v0 A_b_prod_list_a_b_prod_list_bool_fun_fun$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ ))(=> (and (fun_app$j (fun_app$z ?v0 nil$a )nil$a )(and (forall ((?v3 A_b_prod$ )(?v4 A_b_prod_list$ ))(fun_app$j (fun_app$z ?v0 (cons$a ?v3 ?v4 ))nil$a ))(and (forall ((?v3 A_b_prod$ )(?v4 A_b_prod_list$ ))(fun_app$j (fun_app$z ?v0 nil$a )(cons$a ?v3 ?v4 )))(forall ((?v3 A_b_prod$ )(?v4 A_b_prod_list$ )(?v5 A_b_prod$ )(?v6 A_b_prod_list$ ))(=> (fun_app$j (fun_app$z ?v0 ?v4 )?v6 )(fun_app$j (fun_app$z ?v0 (cons$a ?v3 ?v4 ))(cons$a ?v5 ?v6 )))))))(fun_app$j (fun_app$z ?v0 ?v1 )?v2 ))):named a123 ))
(assert (! (forall ((?v0 A_b_prod_list_a_list_bool_fun_fun$ )(?v1 A_b_prod_list$ )(?v2 A_list$ ))(=> (and (fun_app$b (fun_app$ad ?v0 nil$a )nil$ )(and (forall ((?v3 A_b_prod$ )(?v4 A_b_prod_list$ ))(fun_app$b (fun_app$ad ?v0 (cons$a ?v3 ?v4 ))nil$ ))(and (forall ((?v3 A$ )(?v4 A_list$ ))(fun_app$b (fun_app$ad ?v0 nil$a )(cons$ ?v3 ?v4 )))(forall ((?v3 A_b_prod$ )(?v4 A_b_prod_list$ )(?v5 A$ )(?v6 A_list$ ))(=> (fun_app$b (fun_app$ad ?v0 ?v4 )?v6 )(fun_app$b (fun_app$ad ?v0 (cons$a ?v3 ?v4 ))(cons$ ?v5 ?v6 )))))))(fun_app$b (fun_app$ad ?v0 ?v1 )?v2 ))):named a124 ))
(assert (! (forall ((?v0 A_b_prod_list_a_list_list_bool_fun_fun$ )(?v1 A_b_prod_list$ )(?v2 A_list_list$ ))(=> (and (fun_app$k (fun_app$ae ?v0 nil$a )nil$b )(and (forall ((?v3 A_b_prod$ )(?v4 A_b_prod_list$ ))(fun_app$k (fun_app$ae ?v0 (cons$a ?v3 ?v4 ))nil$b ))(and (forall ((?v3 A_list$ )(?v4 A_list_list$ ))(fun_app$k (fun_app$ae ?v0 nil$a )(cons$b ?v3 ?v4 )))(forall ((?v3 A_b_prod$ )(?v4 A_b_prod_list$ )(?v5 A_list$ )(?v6 A_list_list$ ))(=> (fun_app$k (fun_app$ae ?v0 ?v4 )?v6 )(fun_app$k (fun_app$ae ?v0 (cons$a ?v3 ?v4 ))(cons$b ?v5 ?v6 )))))))(fun_app$k (fun_app$ae ?v0 ?v1 )?v2 ))):named a125 ))
(assert (! (forall ((?v0 A_list_a_b_prod_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_b_prod_list$ ))(=> (and (fun_app$j (fun_app$af ?v0 nil$ )nil$a )(and (forall ((?v3 A$ )(?v4 A_list$ ))(fun_app$j (fun_app$af ?v0 (cons$ ?v3 ?v4 ))nil$a ))(and (forall ((?v3 A_b_prod$ )(?v4 A_b_prod_list$ ))(fun_app$j (fun_app$af ?v0 nil$ )(cons$a ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_list$ )(?v5 A_b_prod$ )(?v6 A_b_prod_list$ ))(=> (fun_app$j (fun_app$af ?v0 ?v4 )?v6 )(fun_app$j (fun_app$af ?v0 (cons$ ?v3 ?v4 ))(cons$a ?v5 ?v6 )))))))(fun_app$j (fun_app$af ?v0 ?v1 )?v2 ))):named a126 ))
(assert (! (forall ((?v0 A_list_a_list_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list_list$ ))(=> (and (fun_app$k (fun_app$ag ?v0 nil$ )nil$b )(and (forall ((?v3 A$ )(?v4 A_list$ ))(fun_app$k (fun_app$ag ?v0 (cons$ ?v3 ?v4 ))nil$b ))(and (forall ((?v3 A_list$ )(?v4 A_list_list$ ))(fun_app$k (fun_app$ag ?v0 nil$ )(cons$b ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_list$ )(?v5 A_list$ )(?v6 A_list_list$ ))(=> (fun_app$k (fun_app$ag ?v0 ?v4 )?v6 )(fun_app$k (fun_app$ag ?v0 (cons$ ?v3 ?v4 ))(cons$b ?v5 ?v6 )))))))(fun_app$k (fun_app$ag ?v0 ?v1 )?v2 ))):named a127 ))
(assert (! (forall ((?v0 A_list_list_a_b_prod_list_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_b_prod_list$ ))(=> (and (fun_app$j (fun_app$ah ?v0 nil$b )nil$a )(and (forall ((?v3 A_list$ )(?v4 A_list_list$ ))(fun_app$j (fun_app$ah ?v0 (cons$b ?v3 ?v4 ))nil$a ))(and (forall ((?v3 A_b_prod$ )(?v4 A_b_prod_list$ ))(fun_app$j (fun_app$ah ?v0 nil$b )(cons$a ?v3 ?v4 )))(forall ((?v3 A_list$ )(?v4 A_list_list$ )(?v5 A_b_prod$ )(?v6 A_b_prod_list$ ))(=> (fun_app$j (fun_app$ah ?v0 ?v4 )?v6 )(fun_app$j (fun_app$ah ?v0 (cons$b ?v3 ?v4 ))(cons$a ?v5 ?v6 )))))))(fun_app$j (fun_app$ah ?v0 ?v1 )?v2 ))):named a128 ))
(assert (! (forall ((?v0 A_list_list_a_list_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_list$ ))(=> (and (fun_app$b (fun_app$ai ?v0 nil$b )nil$ )(and (forall ((?v3 A_list$ )(?v4 A_list_list$ ))(fun_app$b (fun_app$ai ?v0 (cons$b ?v3 ?v4 ))nil$ ))(and (forall ((?v3 A$ )(?v4 A_list$ ))(fun_app$b (fun_app$ai ?v0 nil$b )(cons$ ?v3 ?v4 )))(forall ((?v3 A_list$ )(?v4 A_list_list$ )(?v5 A$ )(?v6 A_list$ ))(=> (fun_app$b (fun_app$ai ?v0 ?v4 )?v6 )(fun_app$b (fun_app$ai ?v0 (cons$b ?v3 ?v4 ))(cons$ ?v5 ?v6 )))))))(fun_app$b (fun_app$ai ?v0 ?v1 )?v2 ))):named a129 ))
(assert (! (forall ((?v0 A_list_list_a_list_list_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_list_list$ ))(=> (and (fun_app$k (fun_app$aa ?v0 nil$b )nil$b )(and (forall ((?v3 A_list$ )(?v4 A_list_list$ ))(fun_app$k (fun_app$aa ?v0 (cons$b ?v3 ?v4 ))nil$b ))(and (forall ((?v3 A_list$ )(?v4 A_list_list$ ))(fun_app$k (fun_app$aa ?v0 nil$b )(cons$b ?v3 ?v4 )))(forall ((?v3 A_list$ )(?v4 A_list_list$ )(?v5 A_list$ )(?v6 A_list_list$ ))(=> (fun_app$k (fun_app$aa ?v0 ?v4 )?v6 )(fun_app$k (fun_app$aa ?v0 (cons$b ?v3 ?v4 ))(cons$b ?v5 ?v6 )))))))(fun_app$k (fun_app$aa ?v0 ?v1 )?v2 ))):named a130 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(=> (and (fun_app$b (fun_app$ab ?v0 nil$ )nil$ )(and (forall ((?v3 A$ )(?v4 A_list$ ))(fun_app$b (fun_app$ab ?v0 (cons$ ?v3 ?v4 ))nil$ ))(and (forall ((?v3 A$ )(?v4 A_list$ ))(fun_app$b (fun_app$ab ?v0 nil$ )(cons$ ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_list$ )(?v5 A$ )(?v6 A_list$ ))(=> (fun_app$b (fun_app$ab ?v0 ?v4 )?v6 )(fun_app$b (fun_app$ab ?v0 (cons$ ?v3 ?v4 ))(cons$ ?v5 ?v6 )))))))(fun_app$b (fun_app$ab ?v0 ?v1 )?v2 ))):named a131 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list_bool_fun$ ))(=> (and (not (= ?v0 nil$a ))(and (forall ((?v2 A_b_prod$ ))(fun_app$j ?v1 (cons$a ?v2 nil$a )))(forall ((?v2 A_b_prod$ )(?v3 A_b_prod_list$ ))(=> (and (not (= ?v3 nil$a ))(fun_app$j ?v1 ?v3 ))(fun_app$j ?v1 (cons$a ?v2 ?v3 ))))))(fun_app$j ?v1 ?v0 ))):named a132 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_bool_fun$ ))(=> (and (not (= ?v0 nil$b ))(and (forall ((?v2 A_list$ ))(fun_app$k ?v1 (cons$b ?v2 nil$b )))(forall ((?v2 A_list$ )(?v3 A_list_list$ ))(=> (and (not (= ?v3 nil$b ))(fun_app$k ?v1 ?v3 ))(fun_app$k ?v1 (cons$b ?v2 ?v3 ))))))(fun_app$k ?v1 ?v0 ))):named a133 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_bool_fun$ ))(=> (and (not (= ?v0 nil$ ))(and (forall ((?v2 A$ ))(fun_app$b ?v1 (cons$ ?v2 nil$ )))(forall ((?v2 A$ )(?v3 A_list$ ))(=> (and (not (= ?v3 nil$ ))(fun_app$b ?v1 ?v3 ))(fun_app$b ?v1 (cons$ ?v2 ?v3 ))))))(fun_app$b ?v1 ?v0 ))):named a134 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod$ )(?v2 A_b_prod_list$ ))(=> (= ?v0 (cons$a ?v1 ?v2 ))(not (= ?v0 nil$a )))):named a135 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list$ )(?v2 A_list_list$ ))(=> (= ?v0 (cons$b ?v1 ?v2 ))(not (= ?v0 nil$b )))):named a136 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ )(?v2 A_list$ ))(=> (= ?v0 (cons$ ?v1 ?v2 ))(not (= ?v0 nil$ )))):named a137 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(=> (and (=> (= ?v0 nil$a )false )(forall ((?v1 A_b_prod$ )(?v2 A_b_prod_list$ ))(=> (= ?v0 (cons$a ?v1 ?v2 ))false )))false )):named a138 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(forall ((?v1 A_list$ )(?v2 A_list_list$ ))(=> (= ?v0 (cons$b ?v1 ?v2 ))false )))false )):named a139 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(forall ((?v1 A$ )(?v2 A_list$ ))(=> (= ?v0 (cons$ ?v1 ?v2 ))false )))false )):named a140 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(=> (and (=> (= ?v0 nil$a )false )(and (forall ((?v1 A_b_prod$ ))(=> (= ?v0 (cons$a ?v1 nil$a ))false ))(forall ((?v1 A_b_prod$ )(?v2 A_b_prod$ )(?v3 A_b_prod_list$ ))(=> (= ?v0 (cons$a ?v1 (cons$a ?v2 ?v3 )))false ))))false )):named a141 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(and (forall ((?v1 A_list$ ))(=> (= ?v0 (cons$b ?v1 nil$b ))false ))(forall ((?v1 A_list$ )(?v2 A_list$ )(?v3 A_list_list$ ))(=> (= ?v0 (cons$b ?v1 (cons$b ?v2 ?v3 )))false ))))false )):named a142 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(and (forall ((?v1 A$ ))(=> (= ?v0 (cons$ ?v1 nil$ ))false ))(forall ((?v1 A$ )(?v2 A$ )(?v3 A_list$ ))(=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3 )))false ))))false )):named a143 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (not (= ?v0 nil$a ))(exists ((?v1 A_b_prod$ )(?v2 A_b_prod_list$ ))(= ?v0 (cons$a ?v1 ?v2 ))))):named a144 ))
(assert (! (forall ((?v0 A_list_list$ ))(= (not (= ?v0 nil$b ))(exists ((?v1 A_list$ )(?v2 A_list_list$ ))(= ?v0 (cons$b ?v1 ?v2 ))))):named a145 ))
(assert (! (forall ((?v0 A_list$ ))(= (not (= ?v0 nil$ ))(exists ((?v1 A$ )(?v2 A_list$ ))(= ?v0 (cons$ ?v1 ?v2 ))))):named a146 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list_list$ )(?v4 A_list_list$ ))(=> (fun_app$b (fun_app$ab ?v0 ?v1 )?v2 )(fun_app$k (fun_app$aa (lexordp_eq$a ?v0 )(cons$b ?v1 ?v3 ))(cons$b ?v2 ?v4 )))):named a147 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_list$ )(?v4 A_list$ ))(=> (fun_app$c (fun_app$h ?v0 ?v1 )?v2 )(fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )(cons$ ?v1 ?v3 ))(cons$ ?v2 ?v4 )))):named a148 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list_list$ )(?v4 A_list_list$ ))(=> (and (not (fun_app$b (fun_app$ab ?v0 ?v1 )?v2 ))(and (not (fun_app$b (fun_app$ab ?v0 ?v2 )?v1 ))(fun_app$k (fun_app$aa (lexordp_eq$a ?v0 )?v3 )?v4 )))(fun_app$k (fun_app$aa (lexordp_eq$a ?v0 )(cons$b ?v1 ?v3 ))(cons$b ?v2 ?v4 )))):named a149 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_list$ )(?v4 A_list$ ))(=> (and (not (fun_app$c (fun_app$h ?v0 ?v1 )?v2 ))(and (not (fun_app$c (fun_app$h ?v0 ?v2 )?v1 ))(fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )?v3 )?v4 )))(fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )(cons$ ?v1 ?v3 ))(cons$ ?v2 ?v4 )))):named a150 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(! (= (fun_app$ (splice$b (cons$ ?v0 ?v1 ))(cons$ ?v2 ?v3 ))(cons$ ?v0 (cons$ ?v2 (fun_app$ (splice$b ?v1 )?v3 )))):pattern ((fun_app$ (splice$b (cons$ ?v0 ?v1 ))(cons$ ?v2 ?v3 ))))):named a151 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list$ )(?v3 A_list_list$ ))(! (= (fun_app$s (splice$a (cons$b ?v0 ?v1 ))(cons$b ?v2 ?v3 ))(cons$b ?v0 (cons$b ?v2 (fun_app$s (splice$a ?v1 )?v3 )))):pattern ((fun_app$s (splice$a (cons$b ?v0 ?v1 ))(cons$b ?v2 ?v3 ))))):named a152 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (null$b (cons$ ?v0 ?v1 ))false ):pattern ((cons$ ?v0 ?v1 )))):named a153 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ ))(! (= (null$a (cons$b ?v0 ?v1 ))false ):pattern ((cons$b ?v0 ?v1 )))):named a154 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ ))(! (= (fun_app$c (member$d (cons$ ?v0 ?v1 ))?v2 )(or (= ?v0 ?v2 )(fun_app$c (member$d ?v1 )?v2 ))):pattern ((fun_app$c (member$d (cons$ ?v0 ?v1 ))?v2 )))):named a155 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list$ ))(! (= (fun_app$b (member$c (cons$b ?v0 ?v1 ))?v2 )(or (= ?v0 ?v2 )(fun_app$b (member$c ?v1 )?v2 ))):pattern ((fun_app$b (member$c (cons$b ?v0 ?v1 ))?v2 )))):named a156 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ ))(= (fun_app$j (fun_app$z (lexordp_eq$ ?v0 )?v1 )?v2 )(or (exists ((?v3 A_b_prod_list$ ))(and (= ?v1 nil$a )(= ?v2 ?v3 )))(or (exists ((?v3 A_b_prod$ )(?v4 A_b_prod$ )(?v5 A_b_prod_list$ )(?v6 A_b_prod_list$ ))(and (= ?v1 (cons$a ?v3 ?v5 ))(and (= ?v2 (cons$a ?v4 ?v6 ))(fun_app$l (fun_app$aj ?v0 ?v3 )?v4 ))))(exists ((?v3 A_b_prod$ )(?v4 A_b_prod$ )(?v5 A_b_prod_list$ )(?v6 A_b_prod_list$ ))(and (= ?v1 (cons$a ?v3 ?v5 ))(and (= ?v2 (cons$a ?v4 ?v6 ))(and (not (fun_app$l (fun_app$aj ?v0 ?v3 )?v4 ))(and (not (fun_app$l (fun_app$aj ?v0 ?v4 )?v3 ))(fun_app$j (fun_app$z (lexordp_eq$ ?v0 )?v5 )?v6 )))))))))):named a157 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_list_list$ ))(= (fun_app$k (fun_app$aa (lexordp_eq$a ?v0 )?v1 )?v2 )(or (exists ((?v3 A_list_list$ ))(and (= ?v1 nil$b )(= ?v2 ?v3 )))(or (exists ((?v3 A_list$ )(?v4 A_list$ )(?v5 A_list_list$ )(?v6 A_list_list$ ))(and (= ?v1 (cons$b ?v3 ?v5 ))(and (= ?v2 (cons$b ?v4 ?v6 ))(fun_app$b (fun_app$ab ?v0 ?v3 )?v4 ))))(exists ((?v3 A_list$ )(?v4 A_list$ )(?v5 A_list_list$ )(?v6 A_list_list$ ))(and (= ?v1 (cons$b ?v3 ?v5 ))(and (= ?v2 (cons$b ?v4 ?v6 ))(and (not (fun_app$b (fun_app$ab ?v0 ?v3 )?v4 ))(and (not (fun_app$b (fun_app$ab ?v0 ?v4 )?v3 ))(fun_app$k (fun_app$aa (lexordp_eq$a ?v0 )?v5 )?v6 )))))))))):named a158 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(= (fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )?v1 )?v2 )(or (exists ((?v3 A_list$ ))(and (= ?v1 nil$ )(= ?v2 ?v3 )))(or (exists ((?v3 A$ )(?v4 A$ )(?v5 A_list$ )(?v6 A_list$ ))(and (= ?v1 (cons$ ?v3 ?v5 ))(and (= ?v2 (cons$ ?v4 ?v6 ))(fun_app$c (fun_app$h ?v0 ?v3 )?v4 ))))(exists ((?v3 A$ )(?v4 A$ )(?v5 A_list$ )(?v6 A_list$ ))(and (= ?v1 (cons$ ?v3 ?v5 ))(and (= ?v2 (cons$ ?v4 ?v6 ))(and (not (fun_app$c (fun_app$h ?v0 ?v3 )?v4 ))(and (not (fun_app$c (fun_app$h ?v0 ?v4 )?v3 ))(fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )?v5 )?v6 )))))))))):named a159 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ ))(=> (and (fun_app$j (fun_app$z (lexordp_eq$ ?v0 )?v1 )?v2 )(and (forall ((?v3 A_b_prod_list$ ))(=> (and (= ?v1 nil$a )(= ?v2 ?v3 ))false ))(and (forall ((?v3 A_b_prod$ )(?v4 A_b_prod$ )(?v5 A_b_prod_list$ )(?v6 A_b_prod_list$ ))(=> (and (= ?v1 (cons$a ?v3 ?v5 ))(and (= ?v2 (cons$a ?v4 ?v6 ))(fun_app$l (fun_app$aj ?v0 ?v3 )?v4 )))false ))(forall ((?v3 A_b_prod$ )(?v4 A_b_prod$ )(?v5 A_b_prod_list$ )(?v6 A_b_prod_list$ ))(=> (and (= ?v1 (cons$a ?v3 ?v5 ))(and (= ?v2 (cons$a ?v4 ?v6 ))(and (not (fun_app$l (fun_app$aj ?v0 ?v3 )?v4 ))(and (not (fun_app$l (fun_app$aj ?v0 ?v4 )?v3 ))(fun_app$j (fun_app$z (lexordp_eq$ ?v0 )?v5 )?v6 )))))false )))))false )):named a160 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_list_list$ ))(=> (and (fun_app$k (fun_app$aa (lexordp_eq$a ?v0 )?v1 )?v2 )(and (forall ((?v3 A_list_list$ ))(=> (and (= ?v1 nil$b )(= ?v2 ?v3 ))false ))(and (forall ((?v3 A_list$ )(?v4 A_list$ )(?v5 A_list_list$ )(?v6 A_list_list$ ))(=> (and (= ?v1 (cons$b ?v3 ?v5 ))(and (= ?v2 (cons$b ?v4 ?v6 ))(fun_app$b (fun_app$ab ?v0 ?v3 )?v4 )))false ))(forall ((?v3 A_list$ )(?v4 A_list$ )(?v5 A_list_list$ )(?v6 A_list_list$ ))(=> (and (= ?v1 (cons$b ?v3 ?v5 ))(and (= ?v2 (cons$b ?v4 ?v6 ))(and (not (fun_app$b (fun_app$ab ?v0 ?v3 )?v4 ))(and (not (fun_app$b (fun_app$ab ?v0 ?v4 )?v3 ))(fun_app$k (fun_app$aa (lexordp_eq$a ?v0 )?v5 )?v6 )))))false )))))false )):named a161 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(=> (and (fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )?v1 )?v2 )(and (forall ((?v3 A_list$ ))(=> (and (= ?v1 nil$ )(= ?v2 ?v3 ))false ))(and (forall ((?v3 A$ )(?v4 A$ )(?v5 A_list$ )(?v6 A_list$ ))(=> (and (= ?v1 (cons$ ?v3 ?v5 ))(and (= ?v2 (cons$ ?v4 ?v6 ))(fun_app$c (fun_app$h ?v0 ?v3 )?v4 )))false ))(forall ((?v3 A$ )(?v4 A$ )(?v5 A_list$ )(?v6 A_list$ ))(=> (and (= ?v1 (cons$ ?v3 ?v5 ))(and (= ?v2 (cons$ ?v4 ?v6 ))(and (not (fun_app$c (fun_app$h ?v0 ?v3 )?v4 ))(and (not (fun_app$c (fun_app$h ?v0 ?v4 )?v3 ))(fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )?v5 )?v6 )))))false )))))false )):named a162 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$ac (zip$ ?v0 )nil$c )nil$a ):pattern ((zip$ ?v0 )))):named a163 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$r (insert$ ?v0 )nil$a )(cons$a ?v0 nil$a )):pattern ((insert$ ?v0 )))):named a164 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$s (insert$a ?v0 )nil$b )(cons$b ?v0 nil$b )):pattern ((insert$a ?v0 )))):named a165 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ (insert$b ?v0 )nil$ )(cons$ ?v0 nil$ )):pattern ((insert$b ?v0 )))):named a166 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ ))(= (fun_app$j (fun_app$z (listrelp$ ?v0 )?v1 )?v2 )(or (and (= ?v1 nil$a )(= ?v2 nil$a ))(exists ((?v3 A_b_prod$ )(?v4 A_b_prod$ )(?v5 A_b_prod_list$ )(?v6 A_b_prod_list$ ))(and (= ?v1 (cons$a ?v3 ?v5 ))(and (= ?v2 (cons$a ?v4 ?v6 ))(and (fun_app$l (fun_app$aj ?v0 ?v3 )?v4 )(fun_app$j (fun_app$z (listrelp$ ?v0 )?v5 )?v6 )))))))):named a167 ))
(assert (! (forall ((?v0 A_b_prod_a_bool_fun_fun$ )(?v1 A_b_prod_list$ )(?v2 A_list$ ))(= (fun_app$b (fun_app$ad (listrelp$a ?v0 )?v1 )?v2 )(or (and (= ?v1 nil$a )(= ?v2 nil$ ))(exists ((?v3 A_b_prod$ )(?v4 A$ )(?v5 A_b_prod_list$ )(?v6 A_list$ ))(and (= ?v1 (cons$a ?v3 ?v5 ))(and (= ?v2 (cons$ ?v4 ?v6 ))(and (fun_app$c (fun_app$ak ?v0 ?v3 )?v4 )(fun_app$b (fun_app$ad (listrelp$a ?v0 )?v5 )?v6 )))))))):named a168 ))
(assert (! (forall ((?v0 A_b_prod_a_list_bool_fun_fun$ )(?v1 A_b_prod_list$ )(?v2 A_list_list$ ))(= (fun_app$k (fun_app$ae (listrelp$b ?v0 )?v1 )?v2 )(or (and (= ?v1 nil$a )(= ?v2 nil$b ))(exists ((?v3 A_b_prod$ )(?v4 A_list$ )(?v5 A_b_prod_list$ )(?v6 A_list_list$ ))(and (= ?v1 (cons$a ?v3 ?v5 ))(and (= ?v2 (cons$b ?v4 ?v6 ))(and (fun_app$b (fun_app$al ?v0 ?v3 )?v4 )(fun_app$k (fun_app$ae (listrelp$b ?v0 )?v5 )?v6 )))))))):named a169 ))
(assert (! (forall ((?v0 A_a_b_prod_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_b_prod_list$ ))(= (fun_app$j (fun_app$af (listrelp$c ?v0 )?v1 )?v2 )(or (and (= ?v1 nil$ )(= ?v2 nil$a ))(exists ((?v3 A$ )(?v4 A_b_prod$ )(?v5 A_list$ )(?v6 A_b_prod_list$ ))(and (= ?v1 (cons$ ?v3 ?v5 ))(and (= ?v2 (cons$a ?v4 ?v6 ))(and (fun_app$l (fun_app$am ?v0 ?v3 )?v4 )(fun_app$j (fun_app$af (listrelp$c ?v0 )?v5 )?v6 )))))))):named a170 ))
(assert (! (forall ((?v0 A_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list_list$ ))(= (fun_app$k (fun_app$ag (listrelp$d ?v0 )?v1 )?v2 )(or (and (= ?v1 nil$ )(= ?v2 nil$b ))(exists ((?v3 A$ )(?v4 A_list$ )(?v5 A_list$ )(?v6 A_list_list$ ))(and (= ?v1 (cons$ ?v3 ?v5 ))(and (= ?v2 (cons$b ?v4 ?v6 ))(and (fun_app$b (fun_app$an ?v0 ?v3 )?v4 )(fun_app$k (fun_app$ag (listrelp$d ?v0 )?v5 )?v6 )))))))):named a171 ))
(assert (! (forall ((?v0 A_list_a_b_prod_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_b_prod_list$ ))(= (fun_app$j (fun_app$ah (listrelp$e ?v0 )?v1 )?v2 )(or (and (= ?v1 nil$b )(= ?v2 nil$a ))(exists ((?v3 A_list$ )(?v4 A_b_prod$ )(?v5 A_list_list$ )(?v6 A_b_prod_list$ ))(and (= ?v1 (cons$b ?v3 ?v5 ))(and (= ?v2 (cons$a ?v4 ?v6 ))(and (fun_app$l (fun_app$ao ?v0 ?v3 )?v4 )(fun_app$j (fun_app$ah (listrelp$e ?v0 )?v5 )?v6 )))))))):named a172 ))
(assert (! (forall ((?v0 A_list_a_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_list$ ))(= (fun_app$b (fun_app$ai (listrelp$f ?v0 )?v1 )?v2 )(or (and (= ?v1 nil$b )(= ?v2 nil$ ))(exists ((?v3 A_list$ )(?v4 A$ )(?v5 A_list_list$ )(?v6 A_list$ ))(and (= ?v1 (cons$b ?v3 ?v5 ))(and (= ?v2 (cons$ ?v4 ?v6 ))(and (fun_app$c (fun_app$ap ?v0 ?v3 )?v4 )(fun_app$b (fun_app$ai (listrelp$f ?v0 )?v5 )?v6 )))))))):named a173 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_list_list$ ))(= (fun_app$k (fun_app$aa (listrelp$g ?v0 )?v1 )?v2 )(or (and (= ?v1 nil$b )(= ?v2 nil$b ))(exists ((?v3 A_list$ )(?v4 A_list$ )(?v5 A_list_list$ )(?v6 A_list_list$ ))(and (= ?v1 (cons$b ?v3 ?v5 ))(and (= ?v2 (cons$b ?v4 ?v6 ))(and (fun_app$b (fun_app$ab ?v0 ?v3 )?v4 )(fun_app$k (fun_app$aa (listrelp$g ?v0 )?v5 )?v6 )))))))):named a174 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(= (fun_app$b (fun_app$ab (listrelp$h ?v0 )?v1 )?v2 )(or (and (= ?v1 nil$ )(= ?v2 nil$ ))(exists ((?v3 A$ )(?v4 A$ )(?v5 A_list$ )(?v6 A_list$ ))(and (= ?v1 (cons$ ?v3 ?v5 ))(and (= ?v2 (cons$ ?v4 ?v6 ))(and (fun_app$c (fun_app$h ?v0 ?v3 )?v4 )(fun_app$b (fun_app$ab (listrelp$h ?v0 )?v5 )?v6 )))))))):named a175 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ ))(=> (and (fun_app$j (fun_app$z (listrelp$ ?v0 )?v1 )?v2 )(and (=> (and (= ?v1 nil$a )(= ?v2 nil$a ))false )(forall ((?v3 A_b_prod$ )(?v4 A_b_prod$ )(?v5 A_b_prod_list$ )(?v6 A_b_prod_list$ ))(=> (and (= ?v1 (cons$a ?v3 ?v5 ))(and (= ?v2 (cons$a ?v4 ?v6 ))(and (fun_app$l (fun_app$aj ?v0 ?v3 )?v4 )(fun_app$j (fun_app$z (listrelp$ ?v0 )?v5 )?v6 ))))false ))))false )):named a176 ))
(assert (! (forall ((?v0 A_b_prod_a_bool_fun_fun$ )(?v1 A_b_prod_list$ )(?v2 A_list$ ))(=> (and (fun_app$b (fun_app$ad (listrelp$a ?v0 )?v1 )?v2 )(and (=> (and (= ?v1 nil$a )(= ?v2 nil$ ))false )(forall ((?v3 A_b_prod$ )(?v4 A$ )(?v5 A_b_prod_list$ )(?v6 A_list$ ))(=> (and (= ?v1 (cons$a ?v3 ?v5 ))(and (= ?v2 (cons$ ?v4 ?v6 ))(and (fun_app$c (fun_app$ak ?v0 ?v3 )?v4 )(fun_app$b (fun_app$ad (listrelp$a ?v0 )?v5 )?v6 ))))false ))))false )):named a177 ))
(assert (! (forall ((?v0 A_b_prod_a_list_bool_fun_fun$ )(?v1 A_b_prod_list$ )(?v2 A_list_list$ ))(=> (and (fun_app$k (fun_app$ae (listrelp$b ?v0 )?v1 )?v2 )(and (=> (and (= ?v1 nil$a )(= ?v2 nil$b ))false )(forall ((?v3 A_b_prod$ )(?v4 A_list$ )(?v5 A_b_prod_list$ )(?v6 A_list_list$ ))(=> (and (= ?v1 (cons$a ?v3 ?v5 ))(and (= ?v2 (cons$b ?v4 ?v6 ))(and (fun_app$b (fun_app$al ?v0 ?v3 )?v4 )(fun_app$k (fun_app$ae (listrelp$b ?v0 )?v5 )?v6 ))))false ))))false )):named a178 ))
(assert (! (forall ((?v0 A_a_b_prod_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_b_prod_list$ ))(=> (and (fun_app$j (fun_app$af (listrelp$c ?v0 )?v1 )?v2 )(and (=> (and (= ?v1 nil$ )(= ?v2 nil$a ))false )(forall ((?v3 A$ )(?v4 A_b_prod$ )(?v5 A_list$ )(?v6 A_b_prod_list$ ))(=> (and (= ?v1 (cons$ ?v3 ?v5 ))(and (= ?v2 (cons$a ?v4 ?v6 ))(and (fun_app$l (fun_app$am ?v0 ?v3 )?v4 )(fun_app$j (fun_app$af (listrelp$c ?v0 )?v5 )?v6 ))))false ))))false )):named a179 ))
(assert (! (forall ((?v0 A_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list_list$ ))(=> (and (fun_app$k (fun_app$ag (listrelp$d ?v0 )?v1 )?v2 )(and (=> (and (= ?v1 nil$ )(= ?v2 nil$b ))false )(forall ((?v3 A$ )(?v4 A_list$ )(?v5 A_list$ )(?v6 A_list_list$ ))(=> (and (= ?v1 (cons$ ?v3 ?v5 ))(and (= ?v2 (cons$b ?v4 ?v6 ))(and (fun_app$b (fun_app$an ?v0 ?v3 )?v4 )(fun_app$k (fun_app$ag (listrelp$d ?v0 )?v5 )?v6 ))))false ))))false )):named a180 ))
(assert (! (forall ((?v0 A_list_a_b_prod_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_b_prod_list$ ))(=> (and (fun_app$j (fun_app$ah (listrelp$e ?v0 )?v1 )?v2 )(and (=> (and (= ?v1 nil$b )(= ?v2 nil$a ))false )(forall ((?v3 A_list$ )(?v4 A_b_prod$ )(?v5 A_list_list$ )(?v6 A_b_prod_list$ ))(=> (and (= ?v1 (cons$b ?v3 ?v5 ))(and (= ?v2 (cons$a ?v4 ?v6 ))(and (fun_app$l (fun_app$ao ?v0 ?v3 )?v4 )(fun_app$j (fun_app$ah (listrelp$e ?v0 )?v5 )?v6 ))))false ))))false )):named a181 ))
(assert (! (forall ((?v0 A_list_a_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_list$ ))(=> (and (fun_app$b (fun_app$ai (listrelp$f ?v0 )?v1 )?v2 )(and (=> (and (= ?v1 nil$b )(= ?v2 nil$ ))false )(forall ((?v3 A_list$ )(?v4 A$ )(?v5 A_list_list$ )(?v6 A_list$ ))(=> (and (= ?v1 (cons$b ?v3 ?v5 ))(and (= ?v2 (cons$ ?v4 ?v6 ))(and (fun_app$c (fun_app$ap ?v0 ?v3 )?v4 )(fun_app$b (fun_app$ai (listrelp$f ?v0 )?v5 )?v6 ))))false ))))false )):named a182 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_list_list$ ))(=> (and (fun_app$k (fun_app$aa (listrelp$g ?v0 )?v1 )?v2 )(and (=> (and (= ?v1 nil$b )(= ?v2 nil$b ))false )(forall ((?v3 A_list$ )(?v4 A_list$ )(?v5 A_list_list$ )(?v6 A_list_list$ ))(=> (and (= ?v1 (cons$b ?v3 ?v5 ))(and (= ?v2 (cons$b ?v4 ?v6 ))(and (fun_app$b (fun_app$ab ?v0 ?v3 )?v4 )(fun_app$k (fun_app$aa (listrelp$g ?v0 )?v5 )?v6 ))))false ))))false )):named a183 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(=> (and (fun_app$b (fun_app$ab (listrelp$h ?v0 )?v1 )?v2 )(and (=> (and (= ?v1 nil$ )(= ?v2 nil$ ))false )(forall ((?v3 A$ )(?v4 A$ )(?v5 A_list$ )(?v6 A_list$ ))(=> (and (= ?v1 (cons$ ?v3 ?v5 ))(and (= ?v2 (cons$ ?v4 ?v6 ))(and (fun_app$c (fun_app$h ?v0 ?v3 )?v4 )(fun_app$b (fun_app$ab (listrelp$h ?v0 )?v5 )?v6 ))))false ))))false )):named a184 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_list$ )(?v2 A_list$ )(?v3 A_list$ ))(=> (and (= (fun_app$ (fun_app$aq (map_tailrec_rev$ ?v0 )?v1 )?v2 )?v3 )(and (forall ((?v4 A_b_prod_a_fun$ )(?v5 A_list$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 nil$a )(and (= ?v2 ?v5 )(= ?v3 ?v5 ))))false ))(forall ((?v4 A_b_prod_a_fun$ )(?v5 A_b_prod$ )(?v6 A_b_prod_list$ )(?v7 A_list$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 (cons$a ?v5 ?v6 ))(and (= ?v2 ?v7 )(= ?v3 (fun_app$ (fun_app$aq (map_tailrec_rev$ ?v4 )?v6 )(cons$ (fun_app$ar ?v4 ?v5 )?v7 ))))))false ))))false )):named a185 ))
(assert (! (forall ((?v0 A_b_prod_a_list_fun$ )(?v1 A_b_prod_list$ )(?v2 A_list_list$ )(?v3 A_list_list$ ))(=> (and (= (map_tailrec_rev$a ?v0 ?v1 ?v2 )?v3 )(and (forall ((?v4 A_b_prod_a_list_fun$ )(?v5 A_list_list$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 nil$a )(and (= ?v2 ?v5 )(= ?v3 ?v5 ))))false ))(forall ((?v4 A_b_prod_a_list_fun$ )(?v5 A_b_prod$ )(?v6 A_b_prod_list$ )(?v7 A_list_list$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 (cons$a ?v5 ?v6 ))(and (= ?v2 ?v7 )(= ?v3 (map_tailrec_rev$a ?v4 ?v6 (cons$b (fun_app$as ?v4 ?v5 )?v7 ))))))false ))))false )):named a186 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ ))(=> (and (= (fun_app$ (fun_app$at (map_tailrec_rev$b ?v0 )?v1 )?v2 )?v3 )(and (forall ((?v4 A_a_fun$ )(?v5 A_list$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 nil$ )(and (= ?v2 ?v5 )(= ?v3 ?v5 ))))false ))(forall ((?v4 A_a_fun$ )(?v5 A$ )(?v6 A_list$ )(?v7 A_list$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 (cons$ ?v5 ?v6 ))(and (= ?v2 ?v7 )(= ?v3 (fun_app$ (fun_app$at (map_tailrec_rev$b ?v4 )?v6 )(cons$ (fun_app$p ?v4 ?v5 )?v7 ))))))false ))))false )):named a187 ))
(assert (! (forall ((?v0 A_a_list_fun$ )(?v1 A_list$ )(?v2 A_list_list$ )(?v3 A_list_list$ ))(=> (and (= (map_tailrec_rev$c ?v0 ?v1 ?v2 )?v3 )(and (forall ((?v4 A_a_list_fun$ )(?v5 A_list_list$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 nil$ )(and (= ?v2 ?v5 )(= ?v3 ?v5 ))))false ))(forall ((?v4 A_a_list_fun$ )(?v5 A$ )(?v6 A_list$ )(?v7 A_list_list$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 (cons$ ?v5 ?v6 ))(and (= ?v2 ?v7 )(= ?v3 (map_tailrec_rev$c ?v4 ?v6 (cons$b (fun_app$au ?v4 ?v5 )?v7 ))))))false ))))false )):named a188 ))
(assert (! (forall ((?v0 A_list_a_fun$ )(?v1 A_list_list$ )(?v2 A_list$ )(?v3 A_list$ ))(=> (and (= (fun_app$ (fun_app$av (map_tailrec_rev$d ?v0 )?v1 )?v2 )?v3 )(and (forall ((?v4 A_list_a_fun$ )(?v5 A_list$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 nil$b )(and (= ?v2 ?v5 )(= ?v3 ?v5 ))))false ))(forall ((?v4 A_list_a_fun$ )(?v5 A_list$ )(?v6 A_list_list$ )(?v7 A_list$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 (cons$b ?v5 ?v6 ))(and (= ?v2 ?v7 )(= ?v3 (fun_app$ (fun_app$av (map_tailrec_rev$d ?v4 )?v6 )(cons$ (fun_app$aw ?v4 ?v5 )?v7 ))))))false ))))false )):named a189 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_list$ )(?v2 A_list_list$ )(?v3 A_list_list$ ))(=> (and (= (map_tailrec_rev$e ?v0 ?v1 ?v2 )?v3 )(and (forall ((?v4 A_list_a_list_fun$ )(?v5 A_list_list$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 nil$b )(and (= ?v2 ?v5 )(= ?v3 ?v5 ))))false ))(forall ((?v4 A_list_a_list_fun$ )(?v5 A_list$ )(?v6 A_list_list$ )(?v7 A_list_list$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 (cons$b ?v5 ?v6 ))(and (= ?v2 ?v7 )(= ?v3 (map_tailrec_rev$e ?v4 ?v6 (cons$b (fun_app$ ?v4 ?v5 )?v7 ))))))false ))))false )):named a190 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(= (rotate1$ (cons$a ?v0 ?v1 ))(fun_app$r (append$ ?v1 )(cons$a ?v0 nil$a )))):named a191 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ ))(= (rotate1$a (cons$b ?v0 ?v1 ))(fun_app$s (append$a ?v1 )(cons$b ?v0 nil$b )))):named a192 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(= (rotate1$b (cons$ ?v0 ?v1 ))(fun_app$ (append$b ?v1 )(cons$ ?v0 nil$ )))):named a193 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A_a_list_fun$ ))(! (= (bind$h (cons$ ?v0 ?v1 )?v2 )(fun_app$ (append$b (fun_app$au ?v2 ?v0 ))(bind$h ?v1 ?v2 ))):pattern ((bind$h (cons$ ?v0 ?v1 )?v2 )))):named a194 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list_a_list_fun$ ))(! (= (bind$e (cons$b ?v0 ?v1 )?v2 )(fun_app$ (append$b (fun_app$ ?v2 ?v0 ))(bind$e ?v1 ?v2 ))):pattern ((bind$e (cons$b ?v0 ?v1 )?v2 )))):named a195 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod$ )(?v2 A_b_prod_list$ ))(fun_app$j (fun_app$z (lexordp$ ?v0 )nil$a )(cons$a ?v1 ?v2 ))):named a196 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list_list$ ))(fun_app$k (fun_app$aa (lexordp$a ?v0 )nil$b )(cons$b ?v1 ?v2 ))):named a197 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_list$ ))(fun_app$b (fun_app$ab (lexordp$b ?v0 )nil$ )(cons$ ?v1 ?v2 ))):named a198 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (fun_app$ (append$b ?v0 )?v1 )(fun_app$ (append$b ?v0 )?v2 ))(= ?v1 ?v2 ))):named a199 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (fun_app$ (append$b ?v0 )?v1 )(fun_app$ (append$b ?v2 )?v1 ))(= ?v0 ?v2 ))):named a200 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (fun_app$ (append$b (fun_app$ (append$b ?v0 )?v1 ))?v2 )(fun_app$ (append$b ?v0 )(fun_app$ (append$b ?v1 )?v2 )))):named a201 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(= (= (fun_app$r (append$ ?v0 )?v1 )?v1 )(= ?v0 nil$a ))):named a202 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (= (fun_app$s (append$a ?v0 )?v1 )?v1 )(= ?v0 nil$b ))):named a203 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$ (append$b ?v0 )?v1 )?v1 )(= ?v0 nil$ ))):named a204 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(= (= (fun_app$r (append$ ?v0 )?v1 )?v0 )(= ?v1 nil$a ))):named a205 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (= (fun_app$s (append$a ?v0 )?v1 )?v0 )(= ?v1 nil$b ))):named a206 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$ (append$b ?v0 )?v1 )?v0 )(= ?v1 nil$ ))):named a207 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(= (= ?v0 (fun_app$r (append$ ?v1 )?v0 ))(= ?v1 nil$a ))):named a208 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (= ?v0 (fun_app$s (append$a ?v1 )?v0 ))(= ?v1 nil$b ))):named a209 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= ?v0 (fun_app$ (append$b ?v1 )?v0 ))(= ?v1 nil$ ))):named a210 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(= (= ?v0 (fun_app$r (append$ ?v0 )?v1 ))(= ?v1 nil$a ))):named a211 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (= ?v0 (fun_app$s (append$a ?v0 )?v1 ))(= ?v1 nil$b ))):named a212 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= ?v0 (fun_app$ (append$b ?v0 )?v1 ))(= ?v1 nil$ ))):named a213 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(= (= nil$a (fun_app$r (append$ ?v0 )?v1 ))(and (= ?v0 nil$a )(= ?v1 nil$a )))):named a214 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (= nil$b (fun_app$s (append$a ?v0 )?v1 ))(and (= ?v0 nil$b )(= ?v1 nil$b )))):named a215 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= nil$ (fun_app$ (append$b ?v0 )?v1 ))(and (= ?v0 nil$ )(= ?v1 nil$ )))):named a216 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(= (= (fun_app$r (append$ ?v0 )?v1 )nil$a )(and (= ?v0 nil$a )(= ?v1 nil$a )))):named a217 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(= (= (fun_app$s (append$a ?v0 )?v1 )nil$b )(and (= ?v0 nil$b )(= ?v1 nil$b )))):named a218 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$ (append$b ?v0 )?v1 )nil$ )(and (= ?v0 nil$ )(= ?v1 nil$ )))):named a219 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(! (= (fun_app$r (append$ ?v0 )nil$a )?v0 ):pattern ((append$ ?v0 )))):named a220 ))
(assert (! (forall ((?v0 A_list_list$ ))(! (= (fun_app$s (append$a ?v0 )nil$b )?v0 ):pattern ((append$a ?v0 )))):named a221 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$ (append$b ?v0 )nil$ )?v0 ):pattern ((append$b ?v0 )))):named a222 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list_list$ )(?v3 A_list$ )(?v4 A_list_list$ ))(! (= (fun_app$k (fun_app$aa (lexordp$a ?v0 )(cons$b ?v1 ?v2 ))(cons$b ?v3 ?v4 ))(or (fun_app$b (fun_app$ab ?v0 ?v1 )?v3 )(and (not (fun_app$b (fun_app$ab ?v0 ?v3 )?v1 ))(fun_app$k (fun_app$aa (lexordp$a ?v0 )?v2 )?v4 )))):pattern ((fun_app$k (fun_app$aa (lexordp$a ?v0 )(cons$b ?v1 ?v2 ))(cons$b ?v3 ?v4 ))))):named a223 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_list$ )(?v3 A$ )(?v4 A_list$ ))(! (= (fun_app$b (fun_app$ab (lexordp$b ?v0 )(cons$ ?v1 ?v2 ))(cons$ ?v3 ?v4 ))(or (fun_app$c (fun_app$h ?v0 ?v1 )?v3 )(and (not (fun_app$c (fun_app$h ?v0 ?v3 )?v1 ))(fun_app$b (fun_app$ab (lexordp$b ?v0 )?v2 )?v4 )))):pattern ((fun_app$b (fun_app$ab (lexordp$b ?v0 )(cons$ ?v1 ?v2 ))(cons$ ?v3 ?v4 ))))):named a224 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod_list$ ))(! (= (fun_app$j (fun_app$z (lexordp$ ?v0 )nil$a )?v1 )(not (= ?v1 nil$a ))):pattern ((fun_app$j (fun_app$z (lexordp$ ?v0 )nil$a )?v1 )))):named a225 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list_list$ ))(! (= (fun_app$k (fun_app$aa (lexordp$a ?v0 )nil$b )?v1 )(not (= ?v1 nil$b ))):pattern ((fun_app$k (fun_app$aa (lexordp$a ?v0 )nil$b )?v1 )))):named a226 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ ))(! (= (fun_app$b (fun_app$ab (lexordp$b ?v0 )nil$ )?v1 )(not (= ?v1 nil$ ))):pattern ((fun_app$b (fun_app$ab (lexordp$b ?v0 )nil$ )?v1 )))):named a227 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod_list$ ))(! (= (fun_app$j (fun_app$z (lexordp$ ?v0 )?v1 )nil$a )false ):pattern ((fun_app$z (lexordp$ ?v0 )?v1 )))):named a228 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list_list$ ))(! (= (fun_app$k (fun_app$aa (lexordp$a ?v0 )?v1 )nil$b )false ):pattern ((fun_app$aa (lexordp$a ?v0 )?v1 )))):named a229 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ ))(! (= (fun_app$b (fun_app$ab (lexordp$b ?v0 )?v1 )nil$ )false ):pattern ((fun_app$ab (lexordp$b ?v0 )?v1 )))):named a230 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(= (fun_app$b (list_ex$b ?v0 )(fun_app$ (append$b ?v1 )?v2 ))(or (fun_app$b (list_ex$b ?v0 )?v1 )(fun_app$b (list_ex$b ?v0 )?v2 )))):named a231 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod$ )(?v2 A_b_prod_list$ )(?v3 A_b_prod$ ))(= (= (fun_app$r (append$ ?v0 )(cons$a ?v1 nil$a ))(fun_app$r (append$ ?v2 )(cons$a ?v3 nil$a )))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a232 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list$ )(?v2 A_list_list$ )(?v3 A_list$ ))(= (= (fun_app$s (append$a ?v0 )(cons$b ?v1 nil$b ))(fun_app$s (append$a ?v2 )(cons$b ?v3 nil$b )))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a233 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ )(?v2 A_list$ )(?v3 A$ ))(= (= (fun_app$ (append$b ?v0 )(cons$ ?v1 nil$ ))(fun_app$ (append$b ?v2 )(cons$ ?v3 nil$ )))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a234 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list_list$ )(?v4 A_list_list$ )(?v5 A_list_list$ ))(=> (fun_app$b (fun_app$ab ?v0 ?v1 )?v2 )(fun_app$k (fun_app$aa (lexordp$a ?v0 )(fun_app$s (append$a ?v3 )(cons$b ?v1 ?v4 )))(fun_app$s (append$a ?v3 )(cons$b ?v2 ?v5 ))))):named a235 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_list$ )(?v4 A_list$ )(?v5 A_list$ ))(=> (fun_app$c (fun_app$h ?v0 ?v1 )?v2 )(fun_app$b (fun_app$ab (lexordp$b ?v0 )(fun_app$ (append$b ?v3 )(cons$ ?v1 ?v4 )))(fun_app$ (append$b ?v3 )(cons$ ?v2 ?v5 ))))):named a236 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ ))(= (= (fun_app$ (append$b ?v0 )?v1 )(fun_app$ (append$b ?v2 )?v3 ))(exists ((?v4 A_list$ ))(or (and (= ?v0 (fun_app$ (append$b ?v2 )?v4 ))(= (fun_app$ (append$b ?v4 )?v1 )?v3 ))(and (= (fun_app$ (append$b ?v0 )?v4 )?v2 )(= ?v1 (fun_app$ (append$b ?v4 )?v3 ))))))):named a237 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ ))(=> (and (fun_app$b (fun_app$ab (lexordp$b ?v0 )(fun_app$ (append$b ?v1 )?v2 ))(fun_app$ (append$b ?v1 )?v3 ))(forall ((?v4 A$ ))(not (fun_app$c (fun_app$h ?v0 ?v4 )?v4 ))))(fun_app$b (fun_app$ab (lexordp$b ?v0 )?v2 )?v3 ))):named a238 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ ))(=> (fun_app$b (fun_app$ab (lexordp$b ?v0 )?v1 )?v2 )(fun_app$b (fun_app$ab (lexordp$b ?v0 )(fun_app$ (append$b ?v3 )?v1 ))(fun_app$ (append$b ?v3 )?v2 )))):named a239 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ )(?v4 A_list$ ))(=> (and (= (fun_app$ (append$b ?v0 )?v1 )?v2 )(= ?v3 (fun_app$ (append$b ?v1 )?v4 )))(= (fun_app$ (append$b ?v0 )?v3 )(fun_app$ (append$b ?v2 )?v4 )))):named a240 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ ))(=> (forall ((?v2 A$ ))(not (fun_app$c (fun_app$h ?v0 ?v2 )?v2 )))(not (fun_app$b (fun_app$ab (lexordp$b ?v0 )?v1 )?v1 )))):named a241 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_a_b_prod_bool_fun_fun$ )(?v2 A_b_prod_list$ ))(=> (not (= ?v0 nil$a ))(fun_app$j (fun_app$z (lexordp$ ?v1 )?v2 )(fun_app$r (append$ ?v2 )?v0 )))):named a242 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_a_list_bool_fun_fun$ )(?v2 A_list_list$ ))(=> (not (= ?v0 nil$b ))(fun_app$k (fun_app$aa (lexordp$a ?v1 )?v2 )(fun_app$s (append$a ?v2 )?v0 )))):named a243 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_list$ ))(=> (not (= ?v0 nil$ ))(fun_app$b (fun_app$ab (lexordp$b ?v1 )?v2 )(fun_app$ (append$b ?v2 )?v0 )))):named a244 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A_list$ ))(! (= (fun_app$ (append$b (cons$ ?v0 ?v1 ))?v2 )(cons$ ?v0 (fun_app$ (append$b ?v1 )?v2 ))):pattern ((fun_app$ (append$b (cons$ ?v0 ?v1 ))?v2 )))):named a245 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list_list$ ))(! (= (fun_app$s (append$a (cons$b ?v0 ?v1 ))?v2 )(cons$b ?v0 (fun_app$s (append$a ?v1 )?v2 ))):pattern ((fun_app$s (append$a (cons$b ?v0 ?v1 ))?v2 )))):named a246 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ )(?v4 A_list$ ))(=> (and (= (cons$ ?v0 ?v1 )?v2 )(= ?v3 (fun_app$ (append$b ?v1 )?v4 )))(= (cons$ ?v0 ?v3 )(fun_app$ (append$b ?v2 )?v4 )))):named a247 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list_list$ )(?v3 A_list_list$ )(?v4 A_list_list$ ))(=> (and (= (cons$b ?v0 ?v1 )?v2 )(= ?v3 (fun_app$s (append$a ?v1 )?v4 )))(= (cons$b ?v0 ?v3 )(fun_app$s (append$a ?v2 )?v4 )))):named a248 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(! (= (fun_app$r (append$ nil$a )?v0 )?v0 ):pattern ((fun_app$r (append$ nil$a )?v0 )))):named a249 ))
(assert (! (forall ((?v0 A_list_list$ ))(! (= (fun_app$s (append$a nil$b )?v0 )?v0 ):pattern ((fun_app$s (append$a nil$b )?v0 )))):named a250 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$ (append$b nil$ )?v0 )?v0 ):pattern ((fun_app$ (append$b nil$ )?v0 )))):named a251 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(=> (= ?v0 ?v1 )(= ?v0 (fun_app$r (append$ nil$a )?v1 )))):named a252 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ ))(=> (= ?v0 ?v1 )(= ?v0 (fun_app$s (append$a nil$b )?v1 )))):named a253 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (= ?v0 ?v1 )(= ?v0 (fun_app$ (append$b nil$ )?v1 )))):named a254 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list_list$ )(?v4 A_list_list$ ))(=> (and (not (fun_app$b (fun_app$ab ?v0 ?v1 )?v2 ))(and (not (fun_app$b (fun_app$ab ?v0 ?v2 )?v1 ))(fun_app$k (fun_app$aa (lexordp$a ?v0 )?v3 )?v4 )))(fun_app$k (fun_app$aa (lexordp$a ?v0 )(cons$b ?v1 ?v3 ))(cons$b ?v2 ?v4 )))):named a255 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_list$ )(?v4 A_list$ ))(=> (and (not (fun_app$c (fun_app$h ?v0 ?v1 )?v2 ))(and (not (fun_app$c (fun_app$h ?v0 ?v2 )?v1 ))(fun_app$b (fun_app$ab (lexordp$b ?v0 )?v3 )?v4 )))(fun_app$b (fun_app$ab (lexordp$b ?v0 )(cons$ ?v1 ?v3 ))(cons$ ?v2 ?v4 )))):named a256 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list_list$ )(?v4 A_list_list$ ))(=> (fun_app$b (fun_app$ab ?v0 ?v1 )?v2 )(fun_app$k (fun_app$aa (lexordp$a ?v0 )(cons$b ?v1 ?v3 ))(cons$b ?v2 ?v4 )))):named a257 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_list$ )(?v4 A_list$ ))(=> (fun_app$c (fun_app$h ?v0 ?v1 )?v2 )(fun_app$b (fun_app$ab (lexordp$b ?v0 )(cons$ ?v1 ?v3 ))(cons$ ?v2 ?v4 )))):named a258 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(=> (fun_app$b (fun_app$ab (lexordp$b ?v0 )?v1 )?v2 )(fun_app$b (fun_app$ab (lexordp_eq$b ?v0 )?v1 )?v2 ))):named a259 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod$ )(?v3 A_b_prod_list$ ))(= (= (fun_app$r (append$ ?v0 )?v1 )(cons$a ?v2 ?v3 ))(or (and (= ?v0 nil$a )(= ?v1 (cons$a ?v2 ?v3 )))(exists ((?v4 A_b_prod_list$ ))(and (= ?v0 (cons$a ?v2 ?v4 ))(= (fun_app$r (append$ ?v4 )?v1 )?v3 )))))):named a260 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list$ )(?v2 A_list$ )(?v3 A_list_list$ ))(= (= (fun_app$s (append$a ?v0 )?v1 )(cons$b ?v2 ?v3 ))(or (and (= ?v0 nil$b )(= ?v1 (cons$b ?v2 ?v3 )))(exists ((?v4 A_list_list$ ))(and (= ?v0 (cons$b ?v2 ?v4 ))(= (fun_app$s (append$a ?v4 )?v1 )?v3 )))))):named a261 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (fun_app$ (append$b ?v0 )?v1 )(cons$ ?v2 ?v3 ))(or (and (= ?v0 nil$ )(= ?v1 (cons$ ?v2 ?v3 )))(exists ((?v4 A_list$ ))(and (= ?v0 (cons$ ?v2 ?v4 ))(= (fun_app$ (append$b ?v4 )?v1 )?v3 )))))):named a262 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ )(?v3 A_b_prod_list$ ))(= (= (cons$a ?v0 ?v1 )(fun_app$r (append$ ?v2 )?v3 ))(or (and (= ?v2 nil$a )(= (cons$a ?v0 ?v1 )?v3 ))(exists ((?v4 A_b_prod_list$ ))(and (= (cons$a ?v0 ?v4 )?v2 )(= ?v1 (fun_app$r (append$ ?v4 )?v3 ))))))):named a263 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list_list$ )(?v3 A_list_list$ ))(= (= (cons$b ?v0 ?v1 )(fun_app$s (append$a ?v2 )?v3 ))(or (and (= ?v2 nil$b )(= (cons$b ?v0 ?v1 )?v3 ))(exists ((?v4 A_list_list$ ))(and (= (cons$b ?v0 ?v4 )?v2 )(= ?v1 (fun_app$s (append$a ?v4 )?v3 ))))))):named a264 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(fun_app$ (append$b ?v2 )?v3 ))(or (and (= ?v2 nil$ )(= (cons$ ?v0 ?v1 )?v3 ))(exists ((?v4 A_list$ ))(and (= (cons$ ?v0 ?v4 )?v2 )(= ?v1 (fun_app$ (append$b ?v4 )?v3 ))))))):named a265 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(=> (and (=> (= ?v0 nil$a )false )(forall ((?v1 A_b_prod_list$ )(?v2 A_b_prod$ ))(=> (= ?v0 (fun_app$r (append$ ?v1 )(cons$a ?v2 nil$a )))false )))false )):named a266 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(forall ((?v1 A_list_list$ )(?v2 A_list$ ))(=> (= ?v0 (fun_app$s (append$a ?v1 )(cons$b ?v2 nil$b )))false )))false )):named a267 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(forall ((?v1 A_list$ )(?v2 A$ ))(=> (= ?v0 (fun_app$ (append$b ?v1 )(cons$ ?v2 nil$ )))false )))false )):named a268 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list_bool_fun$ ))(=> (and (not (= ?v0 nil$a ))(and (forall ((?v2 A_b_prod$ ))(fun_app$j ?v1 (cons$a ?v2 nil$a )))(forall ((?v2 A_b_prod$ )(?v3 A_b_prod_list$ ))(=> (and (not (= ?v3 nil$a ))(fun_app$j ?v1 ?v3 ))(fun_app$j ?v1 (fun_app$r (append$ ?v3 )(cons$a ?v2 nil$a )))))))(fun_app$j ?v1 ?v0 ))):named a269 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_bool_fun$ ))(=> (and (not (= ?v0 nil$b ))(and (forall ((?v2 A_list$ ))(fun_app$k ?v1 (cons$b ?v2 nil$b )))(forall ((?v2 A_list$ )(?v3 A_list_list$ ))(=> (and (not (= ?v3 nil$b ))(fun_app$k ?v1 ?v3 ))(fun_app$k ?v1 (fun_app$s (append$a ?v3 )(cons$b ?v2 nil$b )))))))(fun_app$k ?v1 ?v0 ))):named a270 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_bool_fun$ ))(=> (and (not (= ?v0 nil$ ))(and (forall ((?v2 A$ ))(fun_app$b ?v1 (cons$ ?v2 nil$ )))(forall ((?v2 A$ )(?v3 A_list$ ))(=> (and (not (= ?v3 nil$ ))(fun_app$b ?v1 ?v3 ))(fun_app$b ?v1 (fun_app$ (append$b ?v3 )(cons$ ?v2 nil$ )))))))(fun_app$b ?v1 ?v0 ))):named a271 ))
(assert (! (forall ((?v0 A_b_prod_list_bool_fun$ )(?v1 A_b_prod_list$ ))(=> (and (fun_app$j ?v0 nil$a )(forall ((?v2 A_b_prod$ )(?v3 A_b_prod_list$ ))(=> (fun_app$j ?v0 ?v3 )(fun_app$j ?v0 (fun_app$r (append$ ?v3 )(cons$a ?v2 nil$a ))))))(fun_app$j ?v0 ?v1 ))):named a272 ))
(assert (! (forall ((?v0 A_list_list_bool_fun$ )(?v1 A_list_list$ ))(=> (and (fun_app$k ?v0 nil$b )(forall ((?v2 A_list$ )(?v3 A_list_list$ ))(=> (fun_app$k ?v0 ?v3 )(fun_app$k ?v0 (fun_app$s (append$a ?v3 )(cons$b ?v2 nil$b ))))))(fun_app$k ?v0 ?v1 ))):named a273 ))
(assert (! (forall ((?v0 A_list_bool_fun$ )(?v1 A_list$ ))(=> (and (fun_app$b ?v0 nil$ )(forall ((?v2 A$ )(?v3 A_list$ ))(=> (fun_app$b ?v0 ?v3 )(fun_app$b ?v0 (fun_app$ (append$b ?v3 )(cons$ ?v2 nil$ ))))))(fun_app$b ?v0 ?v1 ))):named a274 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_list$ )(?v3 A_list$ ))(! (= (fun_app$ (fun_app$at (map_tailrec_rev$b ?v0 )(cons$ ?v1 ?v2 ))?v3 )(fun_app$ (fun_app$at (map_tailrec_rev$b ?v0 )?v2 )(cons$ (fun_app$p ?v0 ?v1 )?v3 ))):pattern ((fun_app$ (fun_app$at (map_tailrec_rev$b ?v0 )(cons$ ?v1 ?v2 ))?v3 )))):named a275 ))
(assert (! (forall ((?v0 A_a_list_fun$ )(?v1 A$ )(?v2 A_list$ )(?v3 A_list_list$ ))(! (= (map_tailrec_rev$c ?v0 (cons$ ?v1 ?v2 )?v3 )(map_tailrec_rev$c ?v0 ?v2 (cons$b (fun_app$au ?v0 ?v1 )?v3 ))):pattern ((map_tailrec_rev$c ?v0 (cons$ ?v1 ?v2 )?v3 )))):named a276 ))
(assert (! (forall ((?v0 A_list_a_fun$ )(?v1 A_list$ )(?v2 A_list_list$ )(?v3 A_list$ ))(! (= (fun_app$ (fun_app$av (map_tailrec_rev$d ?v0 )(cons$b ?v1 ?v2 ))?v3 )(fun_app$ (fun_app$av (map_tailrec_rev$d ?v0 )?v2 )(cons$ (fun_app$aw ?v0 ?v1 )?v3 ))):pattern ((fun_app$ (fun_app$av (map_tailrec_rev$d ?v0 )(cons$b ?v1 ?v2 ))?v3 )))):named a277 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list$ )(?v2 A_list_list$ )(?v3 A_list_list$ ))(! (= (map_tailrec_rev$e ?v0 (cons$b ?v1 ?v2 )?v3 )(map_tailrec_rev$e ?v0 ?v2 (cons$b (fun_app$ ?v0 ?v1 )?v3 ))):pattern ((map_tailrec_rev$e ?v0 (cons$b ?v1 ?v2 )?v3 )))):named a278 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_list$ )(?v4 A_list$ ))(=> (and (fun_app$c (fun_app$h ?v0 ?v1 )?v2 )(fun_app$b (fun_app$ab (listrelp$h ?v0 )?v3 )?v4 ))(fun_app$b (fun_app$ab (listrelp$h ?v0 )(cons$ ?v1 ?v3 ))(cons$ ?v2 ?v4 )))):named a279 ))
(assert (! (forall ((?v0 A_a_list_bool_fun_fun$ )(?v1 A$ )(?v2 A_list$ )(?v3 A_list$ )(?v4 A_list_list$ ))(=> (and (fun_app$b (fun_app$an ?v0 ?v1 )?v2 )(fun_app$k (fun_app$ag (listrelp$d ?v0 )?v3 )?v4 ))(fun_app$k (fun_app$ag (listrelp$d ?v0 )(cons$ ?v1 ?v3 ))(cons$b ?v2 ?v4 )))):named a280 ))
(assert (! (forall ((?v0 A_list_a_bool_fun_fun$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list_list$ )(?v4 A_list$ ))(=> (and (fun_app$c (fun_app$ap ?v0 ?v1 )?v2 )(fun_app$b (fun_app$ai (listrelp$f ?v0 )?v3 )?v4 ))(fun_app$b (fun_app$ai (listrelp$f ?v0 )(cons$b ?v1 ?v3 ))(cons$ ?v2 ?v4 )))):named a281 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list_list$ )(?v4 A_list_list$ ))(=> (and (fun_app$b (fun_app$ab ?v0 ?v1 )?v2 )(fun_app$k (fun_app$aa (listrelp$g ?v0 )?v3 )?v4 ))(fun_app$k (fun_app$aa (listrelp$g ?v0 )(cons$b ?v1 ?v3 ))(cons$b ?v2 ?v4 )))):named a282 ))
(assert (! (forall ((?v0 A_a_b_prod_bool_fun_fun$ ))(fun_app$j (fun_app$af (listrelp$c ?v0 )nil$ )nil$a )):named a283 ))
(assert (! (forall ((?v0 A_a_list_bool_fun_fun$ ))(fun_app$k (fun_app$ag (listrelp$d ?v0 )nil$ )nil$b )):named a284 ))
(assert (! (forall ((?v0 A_b_prod_a_bool_fun_fun$ ))(fun_app$b (fun_app$ad (listrelp$a ?v0 )nil$a )nil$ )):named a285 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$ ))(fun_app$j (fun_app$z (listrelp$ ?v0 )nil$a )nil$a )):named a286 ))
(assert (! (forall ((?v0 A_b_prod_a_list_bool_fun_fun$ ))(fun_app$k (fun_app$ae (listrelp$b ?v0 )nil$a )nil$b )):named a287 ))
(assert (! (forall ((?v0 A_list_a_bool_fun_fun$ ))(fun_app$b (fun_app$ai (listrelp$f ?v0 )nil$b )nil$ )):named a288 ))
(assert (! (forall ((?v0 A_list_a_b_prod_bool_fun_fun$ ))(fun_app$j (fun_app$ah (listrelp$e ?v0 )nil$b )nil$a )):named a289 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ ))(fun_app$k (fun_app$aa (listrelp$g ?v0 )nil$b )nil$b )):named a290 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ ))(fun_app$b (fun_app$ab (listrelp$h ?v0 )nil$ )nil$ )):named a291 ))
(assert (! (forall ((?v0 A_a_list_fun$ )(?v1 A$ )(?v2 A_list$ ))(! (= (fun_app$ (maps$h ?v0 )(cons$ ?v1 ?v2 ))(fun_app$ (append$b (fun_app$au ?v0 ?v1 ))(fun_app$ (maps$h ?v0 )?v2 ))):pattern ((fun_app$ (maps$h ?v0 )(cons$ ?v1 ?v2 ))))):named a292 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list$ )(?v2 A_list_list$ ))(! (= (fun_app$x (maps$e ?v0 )(cons$b ?v1 ?v2 ))(fun_app$ (append$b (fun_app$ ?v0 ?v1 ))(fun_app$x (maps$e ?v0 )?v2 ))):pattern ((fun_app$x (maps$e ?v0 )(cons$b ?v1 ?v2 ))))):named a293 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ ))(= (fun_app$j (fun_app$z (lexordp$ ?v0 )?v1 )?v2 )(or (exists ((?v3 A_b_prod$ )(?v4 A_b_prod_list$ ))(and (= ?v1 nil$a )(= ?v2 (cons$a ?v3 ?v4 ))))(or (exists ((?v3 A_b_prod$ )(?v4 A_b_prod$ )(?v5 A_b_prod_list$ )(?v6 A_b_prod_list$ ))(and (= ?v1 (cons$a ?v3 ?v5 ))(and (= ?v2 (cons$a ?v4 ?v6 ))(fun_app$l (fun_app$aj ?v0 ?v3 )?v4 ))))(exists ((?v3 A_b_prod$ )(?v4 A_b_prod$ )(?v5 A_b_prod_list$ )(?v6 A_b_prod_list$ ))(and (= ?v1 (cons$a ?v3 ?v5 ))(and (= ?v2 (cons$a ?v4 ?v6 ))(and (not (fun_app$l (fun_app$aj ?v0 ?v3 )?v4 ))(and (not (fun_app$l (fun_app$aj ?v0 ?v4 )?v3 ))(fun_app$j (fun_app$z (lexordp$ ?v0 )?v5 )?v6 )))))))))):named a294 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_list_list$ ))(= (fun_app$k (fun_app$aa (lexordp$a ?v0 )?v1 )?v2 )(or (exists ((?v3 A_list$ )(?v4 A_list_list$ ))(and (= ?v1 nil$b )(= ?v2 (cons$b ?v3 ?v4 ))))(or (exists ((?v3 A_list$ )(?v4 A_list$ )(?v5 A_list_list$ )(?v6 A_list_list$ ))(and (= ?v1 (cons$b ?v3 ?v5 ))(and (= ?v2 (cons$b ?v4 ?v6 ))(fun_app$b (fun_app$ab ?v0 ?v3 )?v4 ))))(exists ((?v3 A_list$ )(?v4 A_list$ )(?v5 A_list_list$ )(?v6 A_list_list$ ))(and (= ?v1 (cons$b ?v3 ?v5 ))(and (= ?v2 (cons$b ?v4 ?v6 ))(and (not (fun_app$b (fun_app$ab ?v0 ?v3 )?v4 ))(and (not (fun_app$b (fun_app$ab ?v0 ?v4 )?v3 ))(fun_app$k (fun_app$aa (lexordp$a ?v0 )?v5 )?v6 )))))))))):named a295 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(= (fun_app$b (fun_app$ab (lexordp$b ?v0 )?v1 )?v2 )(or (exists ((?v3 A$ )(?v4 A_list$ ))(and (= ?v1 nil$ )(= ?v2 (cons$ ?v3 ?v4 ))))(or (exists ((?v3 A$ )(?v4 A$ )(?v5 A_list$ )(?v6 A_list$ ))(and (= ?v1 (cons$ ?v3 ?v5 ))(and (= ?v2 (cons$ ?v4 ?v6 ))(fun_app$c (fun_app$h ?v0 ?v3 )?v4 ))))(exists ((?v3 A$ )(?v4 A$ )(?v5 A_list$ )(?v6 A_list$ ))(and (= ?v1 (cons$ ?v3 ?v5 ))(and (= ?v2 (cons$ ?v4 ?v6 ))(and (not (fun_app$c (fun_app$h ?v0 ?v3 )?v4 ))(and (not (fun_app$c (fun_app$h ?v0 ?v4 )?v3 ))(fun_app$b (fun_app$ab (lexordp$b ?v0 )?v5 )?v6 )))))))))):named a296 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_list$ ))(=> (and (fun_app$j (fun_app$z (lexordp$ ?v0 )?v1 )?v2 )(and (forall ((?v3 A_b_prod$ )(?v4 A_b_prod_list$ ))(=> (and (= ?v1 nil$a )(= ?v2 (cons$a ?v3 ?v4 )))false ))(and (forall ((?v3 A_b_prod$ )(?v4 A_b_prod$ )(?v5 A_b_prod_list$ )(?v6 A_b_prod_list$ ))(=> (and (= ?v1 (cons$a ?v3 ?v5 ))(and (= ?v2 (cons$a ?v4 ?v6 ))(fun_app$l (fun_app$aj ?v0 ?v3 )?v4 )))false ))(forall ((?v3 A_b_prod$ )(?v4 A_b_prod$ )(?v5 A_b_prod_list$ )(?v6 A_b_prod_list$ ))(=> (and (= ?v1 (cons$a ?v3 ?v5 ))(and (= ?v2 (cons$a ?v4 ?v6 ))(and (not (fun_app$l (fun_app$aj ?v0 ?v3 )?v4 ))(and (not (fun_app$l (fun_app$aj ?v0 ?v4 )?v3 ))(fun_app$j (fun_app$z (lexordp$ ?v0 )?v5 )?v6 )))))false )))))false )):named a297 ))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list_list$ )(?v2 A_list_list$ ))(=> (and (fun_app$k (fun_app$aa (lexordp$a ?v0 )?v1 )?v2 )(and (forall ((?v3 A_list$ )(?v4 A_list_list$ ))(=> (and (= ?v1 nil$b )(= ?v2 (cons$b ?v3 ?v4 )))false ))(and (forall ((?v3 A_list$ )(?v4 A_list$ )(?v5 A_list_list$ )(?v6 A_list_list$ ))(=> (and (= ?v1 (cons$b ?v3 ?v5 ))(and (= ?v2 (cons$b ?v4 ?v6 ))(fun_app$b (fun_app$ab ?v0 ?v3 )?v4 )))false ))(forall ((?v3 A_list$ )(?v4 A_list$ )(?v5 A_list_list$ )(?v6 A_list_list$ ))(=> (and (= ?v1 (cons$b ?v3 ?v5 ))(and (= ?v2 (cons$b ?v4 ?v6 ))(and (not (fun_app$b (fun_app$ab ?v0 ?v3 )?v4 ))(and (not (fun_app$b (fun_app$ab ?v0 ?v4 )?v3 ))(fun_app$k (fun_app$aa (lexordp$a ?v0 )?v5 )?v6 )))))false )))))false )):named a298 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(=> (and (fun_app$b (fun_app$ab (lexordp$b ?v0 )?v1 )?v2 )(and (forall ((?v3 A$ )(?v4 A_list$ ))(=> (and (= ?v1 nil$ )(= ?v2 (cons$ ?v3 ?v4 )))false ))(and (forall ((?v3 A$ )(?v4 A$ )(?v5 A_list$ )(?v6 A_list$ ))(=> (and (= ?v1 (cons$ ?v3 ?v5 ))(and (= ?v2 (cons$ ?v4 ?v6 ))(fun_app$c (fun_app$h ?v0 ?v3 )?v4 )))false ))(forall ((?v3 A$ )(?v4 A$ )(?v5 A_list$ )(?v6 A_list$ ))(=> (and (= ?v1 (cons$ ?v3 ?v5 ))(and (= ?v2 (cons$ ?v4 ?v6 ))(and (not (fun_app$c (fun_app$h ?v0 ?v3 )?v4 ))(and (not (fun_app$c (fun_app$h ?v0 ?v4 )?v3 ))(fun_app$b (fun_app$ab (lexordp$b ?v0 )?v5 )?v6 )))))false )))))false )):named a299 ))
(assert (! (= (sublists$ nil$a )(cons$d nil$a nil$d )):named a300 ))
(assert (! (= (sublists$a nil$b )(cons$e nil$b nil$e )):named a301 ))
(assert (! (= (sublists$b nil$ )(cons$b nil$ nil$b )):named a302 ))
(assert (! (= (product_lists$ nil$d )(cons$d nil$a nil$d )):named a303 ))
(assert (! (= (product_lists$a nil$e )(cons$e nil$b nil$e )):named a304 ))
(assert (! (= (product_lists$b nil$b )(cons$b nil$ nil$b )):named a305 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod$ ))(= (last$ (fun_app$r (append$ ?v0 )(cons$a ?v1 nil$a )))?v1 )):named a306 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list$ ))(= (last$a (fun_app$s (append$a ?v0 )(cons$b ?v1 nil$b )))?v1 )):named a307 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ ))(= (last$b (fun_app$ (append$b ?v0 )(cons$ ?v1 nil$ )))?v1 )):named a308 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod$ ))(= (butlast$ (fun_app$r (append$ ?v0 )(cons$a ?v1 nil$a )))?v0 )):named a309 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list$ ))(= (butlast$a (fun_app$s (append$a ?v0 )(cons$b ?v1 nil$b )))?v0 )):named a310 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ ))(= (butlast$b (fun_app$ (append$b ?v0 )(cons$ ?v1 nil$ )))?v0 )):named a311 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list_set$ )(?v2 A_b_prod_list$ ))(=> (member$e ?v0 (succ$ ?v1 ?v2 ))(member$f (fun_app$r (append$ ?v2 )(cons$a ?v0 nil$a ))?v1 ))):named a312 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list_set$ )(?v2 A_list_list$ ))(=> (member$ ?v0 (succ$a ?v1 ?v2 ))(member$g (fun_app$s (append$a ?v2 )(cons$b ?v0 nil$b ))?v1 ))):named a313 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list_set$ )(?v2 A_list$ ))(=> (member$a ?v0 (succ$b ?v1 ?v2 ))(member$ (fun_app$ (append$b ?v2 )(cons$ ?v0 nil$ ))?v1 ))):named a314 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ )(?v2 A_list_set$ ))(=> (member$ (fun_app$ (append$b ?v0 )(cons$ ?v1 nil$ ))?v2 )(member$a ?v1 (succ$b ?v2 ?v0 )))):named a315 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= ?v0 nil$ ))(= (last$b (fun_app$ (append$b ?v1 )?v0 ))(last$b ?v0 )))):named a316 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (= ?v0 nil$ )(= (last$b (fun_app$ (append$b ?v1 )?v0 ))(last$b ?v1 )))):named a317 ))
(assert (! (forall ((?v0 A_list$ ))(=> (not (= ?v0 nil$ ))(= (fun_app$ (append$b (butlast$b ?v0 ))(cons$ (last$b ?v0 )nil$ ))?v0 ))):named a318 ))
(assert (! (= (butlast$b nil$ )nil$ ):named a319 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ )(?v2 A_list$ ))(= (= (fun_app$ (append$b ?v0 )(cons$ ?v1 nil$ ))?v2 )(and (not (= ?v2 nil$ ))(and (= (butlast$b ?v2 )?v0 )(= (last$b ?v2 )?v1 ))))):named a320 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(= (butlast$b (cons$ ?v0 ?v1 ))(ite (= ?v1 nil$ )nil$ (cons$ ?v0 (butlast$b ?v1 ))))):named a321 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (butlast$b (fun_app$ (append$b ?v0 )?v1 ))(ite (= ?v1 nil$ )(butlast$b ?v0 )(fun_app$ (append$b ?v0 )(butlast$b ?v1 ))))):named a322 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ ))(! (=> (not (= ?v0 nil$ ))(= (last$b (cons$ ?v1 ?v0 ))(last$b ?v0 ))):pattern ((cons$ ?v1 ?v0 )))):named a323 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ ))(! (=> (= ?v0 nil$ )(= (last$b (cons$ ?v1 ?v0 ))?v1 )):pattern ((cons$ ?v1 ?v0 )))):named a324 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (last$b (cons$ ?v0 ?v1 ))(ite (= ?v1 nil$ )?v0 (last$b ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a325 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (last$b (fun_app$ (append$b ?v0 )?v1 ))(ite (= ?v1 nil$ )(last$b ?v0 )(last$b ?v1 )))):named a326 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A$ ))(=> (and (member$ nil$ ?v0 )(member$a ?v1 (succ$b ?v0 nil$ )))(member$ nil$ (shift$ ?v0 ?v1 )))):named a327 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ )(?v2 A_list$ ))(= (= (rev$ ?v0 )(cons$ ?v1 ?v2 ))(= ?v0 (fun_app$ (append$b (rev$ ?v2 ))(cons$ ?v1 nil$ ))))):named a328 ))
(assert (! (forall ((?v0 A_list$ ))(= (= nil$ (rev$ ?v0 ))(= ?v0 nil$ ))):named a329 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (rev$ ?v0 )nil$ )(= ?v0 nil$ ))):named a330 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(= (= (cons$ ?v0 nil$ )(rev$ ?v1 ))(= ?v1 (cons$ ?v0 nil$ )))):named a331 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ ))(= (= (rev$ ?v0 )(cons$ ?v1 nil$ ))(= ?v0 (cons$ ?v1 nil$ )))):named a332 ))
(assert (! (= (rev$ nil$ )nil$ ):named a333 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(= (rev$ (cons$ ?v0 ?v1 ))(fun_app$ (append$b (rev$ ?v1 ))(cons$ ?v0 nil$ )))):named a334 ))
(assert (! (forall ((?v0 A_list$ ))(=> (not (= ?v0 nil$ ))(= (hd$ (rev$ ?v0 ))(last$b ?v0 )))):named a335 ))
(assert (! (forall ((?v0 A_list$ ))(=> (not (= ?v0 nil$ ))(= (last$b (rev$ ?v0 ))(hd$ ?v0 )))):named a336 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= ?v0 nil$ ))(= (hd$ (fun_app$ (append$b ?v0 )?v1 ))(hd$ ?v0 )))):named a337 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (hd$ (fun_app$ (append$b ?v0 )?v1 ))(ite (= ?v0 nil$ )(hd$ ?v1 )(hd$ ?v0 )))):named a338 ))
(assert (! (forall ((?v0 A_list$ ))(! (=> (not (= ?v0 nil$ ))(= (rotate1$b ?v0 )(fun_app$ (append$b (tl$ ?v0 ))(cons$ (hd$ ?v0 )nil$ )))):pattern ((rotate1$b ?v0 )))):named a339 ))
(assert (! (forall ((?v0 A_list$ ))(=> (not (= ?v0 nil$ ))(= (cons$ (hd$ ?v0 )(tl$ ?v0 ))?v0 ))):named a340 ))
(assert (! (forall ((?v0 A_list$ ))(=> (not (= ?v0 nil$ ))(= (cons$ (hd$ ?v0 )(tl$ ?v0 ))?v0 ))):named a341 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= ?v0 nil$ ))(= (tl$ (fun_app$ (append$b ?v0 )?v1 ))(fun_app$ (append$b (tl$ ?v0 ))?v1 )))):named a342 ))
(assert (! (= (tl$ nil$ )nil$ ):named a343 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (tl$ ?v0 )nil$ )(or (= ?v0 nil$ )(exists ((?v1 A$ ))(= ?v0 (cons$ ?v1 nil$ )))))):named a344 ))
(assert (! (forall ((?v0 A_list$ ))(= (= nil$ (tl$ ?v0 ))(or (= ?v0 nil$ )(exists ((?v1 A$ ))(= ?v0 (cons$ ?v1 nil$ )))))):named a345 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (and (= (= ?v0 nil$ )(= ?v1 nil$ ))(=> (and (not (= ?v0 nil$ ))(not (= ?v1 nil$ )))(and (= (hd$ ?v0 )(hd$ ?v1 ))(= (tl$ ?v0 )(tl$ ?v1 )))))(= ?v0 ?v1 ))):named a346 ))
(assert (! (forall ((?v0 A_list$ ))(=> (or (= ?v0 nil$ )(not (= (tl$ ?v0 )nil$ )))(= (last$b (tl$ ?v0 ))(last$b ?v0 )))):named a347 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (= ?v0 (cons$ (hd$ ?v0 )(tl$ ?v0 )))false ))false )):named a348 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ )(?v2 A_list$ ))(= (remdups_adj$ (fun_app$ (append$b ?v0 )(cons$ ?v1 ?v2 )))(fun_app$ (append$b (remdups_adj$ (fun_app$ (append$b ?v0 )(cons$ ?v1 nil$ ))))(tl$ (remdups_adj$ (cons$ ?v1 ?v2 )))))):named a349 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ )(?v2 A$ ))(= (remdups_adj$ (fun_app$ (append$b ?v0 )(cons$ ?v1 (cons$ ?v2 nil$ ))))(fun_app$ (append$b (remdups_adj$ (fun_app$ (append$b ?v0 )(cons$ ?v1 nil$ ))))(ite (= ?v1 ?v2 )nil$ (cons$ ?v2 nil$ ))))):named a350 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (remdups_adj$ ?v0 )nil$ )(= ?v0 nil$ ))):named a351 ))
(assert (! (= (remdups_adj$ nil$ )nil$ ):named a352 ))
(assert (! (forall ((?v0 A$ ))(! (= (remdups_adj$ (cons$ ?v0 nil$ ))(cons$ ?v0 nil$ )):pattern ((fun_app$a uue$ ?v0 )))):named a353 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (and (= (remdups_adj$ ?v0 )?v1 )(and (=> (and (= ?v0 nil$ )(= ?v1 nil$ ))false )(and (forall ((?v2 A$ ))(=> (and (= ?v0 (cons$ ?v2 nil$ ))(= ?v1 (cons$ ?v2 nil$ )))false ))(forall ((?v2 A$ )(?v3 A$ )(?v4 A_list$ ))(=> (and (= ?v0 (cons$ ?v2 (cons$ ?v3 ?v4 )))(= ?v1 (ite (= ?v2 ?v3 )(remdups_adj$ (cons$ ?v2 ?v4 ))(cons$ ?v2 (remdups_adj$ (cons$ ?v3 ?v4 ))))))false )))))false )):named a354 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (rev$ ?v0 )(fun_app$ (fun_app$at (fold$ uue$ )?v0 )nil$ )):pattern ((rev$ ?v0 )))):named a355 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(= (fun_app$ (append$b (fun_app$au (replicate$ ?v0 )?v1 ))(cons$ ?v1 nil$ ))(cons$ ?v1 (fun_app$au (replicate$ ?v0 )?v1 )))):named a356 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ ))(=> (= (remdups_adj$ ?v0 )(cons$ ?v1 nil$ ))(= ?v0 (fun_app$au (replicate$ (size$ ?v0 ))?v1 )))):named a357 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list_a_list_bool_fun_fun$ ))(=> (and (= (size$ ?v0 )(size$ ?v1 ))(and (fun_app$b (fun_app$ab ?v2 nil$ )nil$ )(forall ((?v3 A$ )(?v4 A_list$ )(?v5 A$ )(?v6 A_list$ ))(=> (and (= (size$ ?v4 )(size$ ?v6 ))(fun_app$b (fun_app$ab ?v2 ?v4 )?v6 ))(fun_app$b (fun_app$ab ?v2 (cons$ ?v3 ?v4 ))(cons$ ?v5 ?v6 ))))))(fun_app$b (fun_app$ab ?v2 ?v0 )?v1 ))):named a358 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list_a_list_a_list_bool_fun_fun_fun$ ))(=> (and (= (size$ ?v0 )(size$ ?v1 ))(and (= (size$ ?v1 )(size$ ?v2 ))(and (fun_app$b (fun_app$ab (fun_app$ax ?v3 nil$ )nil$ )nil$ )(forall ((?v4 A$ )(?v5 A_list$ )(?v6 A$ )(?v7 A_list$ )(?v8 A$ )(?v9 A_list$ ))(=> (and (= (size$ ?v5 )(size$ ?v7 ))(and (= (size$ ?v7 )(size$ ?v9 ))(fun_app$b (fun_app$ab (fun_app$ax ?v3 ?v5 )?v7 )?v9 )))(fun_app$b (fun_app$ab (fun_app$ax ?v3 (cons$ ?v4 ?v5 ))(cons$ ?v6 ?v7 ))(cons$ ?v8 ?v9 )))))))(fun_app$b (fun_app$ab (fun_app$ax ?v3 ?v0 )?v1 )?v2 ))):named a359 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ ))(= (size$ (fun_app$ (append$b ?v0 )(cons$ ?v1 nil$ )))(suc$ (size$ ?v0 )))):named a360 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat$ )(?v2 A$ ))(= (= (fun_app$au (fun_app$ay (list_update$ ?v0 )?v1 )?v2 )nil$ )(= ?v0 nil$ ))):named a361 ))
(check-sat )
;(get-unsat-core )
