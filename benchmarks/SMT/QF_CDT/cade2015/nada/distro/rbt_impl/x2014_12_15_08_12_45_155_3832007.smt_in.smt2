;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_b_b_fun_fun$ 0 )
(declare-sort A_b_c_fun_fun$ 0 )
(declare-sort A_c_b_fun_fun$ 0 )
(declare-sort A_c_c_fun_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_rbt_bool_fun$ 0 )
(declare-sort A_c_rbt_bool_fun$ 0 )
(declare-sort A_b_rbt_a_b_rbt_fun$ 0 )
(declare-sort A_b_rbt_a_c_rbt_fun$ 0 )
(declare-sort A_c_rbt_a_b_rbt_fun$ 0 )
(declare-sort A_c_rbt_a_c_rbt_fun$ 0 )
(declare-sort A_list$ 0)
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-sort A_c_rbt$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun r$ ()Color$)
(declare-fun b$ ()Color$)
(declare-fun empty$ ()A_b_rbt$)
(declare-fun select$ (A_b_rbt$)Color$)
(declare-fun selecta$ (A_b_rbt$)A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$)A$)
(declare-fun selectc$ (A_b_rbt$)B$)
(declare-fun selectd$ (A_b_rbt$)A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$)
(declare-fun empty$a ()A_c_rbt$)
(declare-fun selecte$ (A_c_rbt$)Color$)
(declare-fun selectf$ (A_c_rbt$)A_c_rbt$)
(declare-fun selectg$ (A_c_rbt$)A$)
(declare-fun selecth$ (A_c_rbt$)C$)
(declare-fun selecti$ (A_c_rbt$)A_c_rbt$)
(declare-fun branch$a (Color$ A_c_rbt$ A$ C$ A_c_rbt$ )A_c_rbt$)
(declare-fun f$ ()A_c_b_fun_fun$ )
(declare-fun t$ ()A_c_rbt$ )
(declare-fun map$ (A_c_b_fun_fun$ )A_c_rbt_a_b_rbt_fun$ )
(declare-fun set$ (A_list$ )A_set$ )
(declare-fun keys$ (A_b_rbt$ )A_list$ )
(declare-fun map$a (A_c_c_fun_fun$ )A_c_rbt_a_c_rbt_fun$ )
(declare-fun map$b (A_b_c_fun_fun$ )A_b_rbt_a_c_rbt_fun$ )
(declare-fun map$c (A_b_b_fun_fun$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun keys$a (A_c_rbt$ )A_list$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_c_rbt_a_b_rbt_fun$ A_c_rbt$ )A_b_rbt$ )
(declare-fun distinct$ (A_list$ )Bool )
(declare-fun fun_app$a (A_c_rbt_a_c_rbt_fun$ A_c_rbt$ )A_c_rbt$ )
(declare-fun fun_app$b (A_b_rbt_a_c_rbt_fun$ A_b_rbt$ )A_c_rbt$ )
(declare-fun fun_app$c (A_b_rbt_a_b_rbt_fun$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$d (C_c_fun$ C$ )C$ )
(declare-fun fun_app$e (A_c_c_fun_fun$ A$ )C_c_fun$ )
(declare-fun fun_app$f (B_c_fun$ B$ )C$ )
(declare-fun fun_app$g (A_b_c_fun_fun$ A$ )B_c_fun$ )
(declare-fun fun_app$h (B_b_fun$ B$ )B$ )
(declare-fun fun_app$i (A_b_b_fun_fun$ A$ )B_b_fun$ )
(declare-fun fun_app$j (C_b_fun$ C$ )B$ )
(declare-fun fun_app$k (A_c_b_fun_fun$ A$ )C_b_fun$ )
(declare-fun fun_app$l (A_b_rbt_bool_fun$ A_b_rbt$ )Bool )
(declare-fun fun_app$m (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$n (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$o (A_c_rbt_bool_fun$ A_c_rbt$ )Bool )
(declare-fun rbt_less$ (A_a_bool_fun_fun$ A$ )A_b_rbt_bool_fun$ )
(declare-fun rbt_less$a (A_a_bool_fun_fun$ A$ )A_c_rbt_bool_fun$ )
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$ A_c_rbt$ )Bool )
(declare-fun rbt_greater$ (A_a_bool_fun_fun$ A$ )A_b_rbt_bool_fun$ )
(declare-fun rbt_sorted$a (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(declare-fun rbt_greater$a (A_a_bool_fun_fun$ A$ )A_c_rbt_bool_fun$ )
(assert (! (not (= (keys$ (fun_app$ (map$ f$ )t$ ))(keys$a t$ ))):named a0 ))
(assert (! (forall ((?v0 A_c_c_fun_fun$ ))(! (= (fun_app$a (map$a ?v0 )empty$a )empty$a ):pattern ((map$a ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_b_c_fun_fun$ ))(! (= (fun_app$b (map$b ?v0 )empty$ )empty$a ):pattern ((map$b ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ ))(! (= (fun_app$c (map$c ?v0 )empty$ )empty$ ):pattern ((map$c ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_c_b_fun_fun$ ))(! (= (fun_app$ (map$ ?v0 )empty$a )empty$ ):pattern ((map$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_c_c_fun_fun$ )(?v1 Color$ )(?v2 A_c_rbt$ )(?v3 A$ )(?v4 C$ )(?v5 A_c_rbt$ ))(! (= (fun_app$a (map$a ?v0 )(branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))(branch$a ?v1 (fun_app$a (map$a ?v0 )?v2 )?v3 (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(fun_app$a (map$a ?v0 )?v5 ))):pattern ((fun_app$a (map$a ?v0 )(branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a5 ))
(assert (! (forall ((?v0 A_b_c_fun_fun$ )(?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(! (= (fun_app$b (map$b ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))(branch$a ?v1 (fun_app$b (map$b ?v0 )?v2 )?v3 (fun_app$f (fun_app$g ?v0 ?v3 )?v4 )(fun_app$b (map$b ?v0 )?v5 ))):pattern ((fun_app$b (map$b ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a6 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(! (= (fun_app$c (map$c ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))(branch$ ?v1 (fun_app$c (map$c ?v0 )?v2 )?v3 (fun_app$h (fun_app$i ?v0 ?v3 )?v4 )(fun_app$c (map$c ?v0 )?v5 ))):pattern ((fun_app$c (map$c ?v0 )(branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a7 ))
(assert (! (forall ((?v0 A_c_b_fun_fun$ )(?v1 Color$ )(?v2 A_c_rbt$ )(?v3 A$ )(?v4 C$ )(?v5 A_c_rbt$ ))(! (= (fun_app$ (map$ ?v0 )(branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))(branch$ ?v1 (fun_app$ (map$ ?v0 )?v2 )?v3 (fun_app$j (fun_app$k ?v0 ?v3 )?v4 )(fun_app$ (map$ ?v0 )?v5 ))):pattern ((fun_app$ (map$ ?v0 )(branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a8 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_b_rbt$ ))(= (fun_app$l (rbt_less$ ?v0 ?v1 )?v2 )(forall ((?v3 A$ ))(=> (member$ ?v3 (set$ (keys$ ?v2 )))(fun_app$m (fun_app$n ?v0 ?v3 )?v1 ))))):named a9 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_c_rbt$ ))(= (fun_app$o (rbt_less$a ?v0 ?v1 )?v2 )(forall ((?v3 A$ ))(=> (member$ ?v3 (set$ (keys$a ?v2 )))(fun_app$m (fun_app$n ?v0 ?v3 )?v1 ))))):named a10 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_b_rbt$ ))(= (fun_app$l (rbt_greater$ ?v0 ?v1 )?v2 )(forall ((?v3 A$ ))(=> (member$ ?v3 (set$ (keys$ ?v2 )))(fun_app$m (fun_app$n ?v0 ?v1 )?v3 ))))):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_c_rbt$ ))(= (fun_app$o (rbt_greater$a ?v0 ?v1 )?v2 )(forall ((?v3 A$ ))(=> (member$ ?v3 (set$ (keys$a ?v2 )))(fun_app$m (fun_app$n ?v0 ?v1 )?v3 ))))):named a12 ))
(assert (! (= (keys$ empty$ )nil$ ):named a13 ))
(assert (! (= (keys$a empty$a )nil$ ):named a14 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (not (= ?v0 empty$ ))(not (= (keys$ ?v0 )nil$ )))):named a15 ))
(assert (! (forall ((?v0 A_c_rbt$ ))(=> (not (= ?v0 empty$a ))(not (= (keys$a ?v0 )nil$ )))):named a16 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_c_rbt$ )(?v2 A$ )(?v3 C$ )(?v4 A_c_rbt$ )(?v5 Color$ )(?v6 A_c_rbt$ )(?v7 A$ )(?v8 C$ )(?v9 A_c_rbt$ ))(= (= (branch$a ?v0 ?v1 ?v2 ?v3 ?v4 )(branch$a ?v5 ?v6 ?v7 ?v8 ?v9 ))(and (= ?v0 ?v5 )(and (= ?v1 ?v6 )(and (= ?v2 ?v7 )(and (= ?v3 ?v8 )(= ?v4 ?v9 ))))))):named a17 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ )(?v5 Color$ )(?v6 A_b_rbt$ )(?v7 A$ )(?v8 B$ )(?v9 A_b_rbt$ ))(= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )(branch$ ?v5 ?v6 ?v7 ?v8 ?v9 ))(and (= ?v0 ?v5 )(and (= ?v1 ?v6 )(and (= ?v2 ?v7 )(and (= ?v3 ?v8 )(= ?v4 ?v9 ))))))):named a18 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 Color$ )(?v3 A_c_rbt$ )(?v4 A$ )(?v5 C$ )(?v6 A_c_rbt$ ))(! (= (fun_app$o (rbt_less$a ?v0 ?v1 )(branch$a ?v2 ?v3 ?v4 ?v5 ?v6 ))(and (fun_app$m (fun_app$n ?v0 ?v4 )?v1 )(and (fun_app$o (rbt_less$a ?v0 ?v1 )?v3 )(fun_app$o (rbt_less$a ?v0 ?v1 )?v6 )))):pattern ((fun_app$o (rbt_less$a ?v0 ?v1 )(branch$a ?v2 ?v3 ?v4 ?v5 ?v6 ))))):named a19 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(! (= (fun_app$l (rbt_less$ ?v0 ?v1 )(branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))(and (fun_app$m (fun_app$n ?v0 ?v4 )?v1 )(and (fun_app$l (rbt_less$ ?v0 ?v1 )?v3 )(fun_app$l (rbt_less$ ?v0 ?v1 )?v6 )))):pattern ((fun_app$l (rbt_less$ ?v0 ?v1 )(branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))))):named a20 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 Color$ )(?v3 A_c_rbt$ )(?v4 A$ )(?v5 C$ )(?v6 A_c_rbt$ ))(! (= (fun_app$o (rbt_greater$a ?v0 ?v1 )(branch$a ?v2 ?v3 ?v4 ?v5 ?v6 ))(and (fun_app$m (fun_app$n ?v0 ?v1 )?v4 )(and (fun_app$o (rbt_greater$a ?v0 ?v1 )?v3 )(fun_app$o (rbt_greater$a ?v0 ?v1 )?v6 )))):pattern ((fun_app$o (rbt_greater$a ?v0 ?v1 )(branch$a ?v2 ?v3 ?v4 ?v5 ?v6 ))))):named a21 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(! (= (fun_app$l (rbt_greater$ ?v0 ?v1 )(branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))(and (fun_app$m (fun_app$n ?v0 ?v1 )?v4 )(and (fun_app$l (rbt_greater$ ?v0 ?v1 )?v3 )(fun_app$l (rbt_greater$ ?v0 ?v1 )?v6 )))):pattern ((fun_app$l (rbt_greater$ ?v0 ?v1 )(branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))))):named a22 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ ))(! (= (fun_app$o (rbt_less$a ?v0 ?v1 )empty$a )true ):pattern ((rbt_less$a ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ ))(! (= (fun_app$l (rbt_less$ ?v0 ?v1 )empty$ )true ):pattern ((rbt_less$ ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ ))(! (= (fun_app$o (rbt_greater$a ?v0 ?v1 )empty$a )true ):pattern ((rbt_greater$a ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ ))(! (= (fun_app$l (rbt_greater$ ?v0 ?v1 )empty$ )true ):pattern ((rbt_greater$ ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_c_rbt$ ))(=> (and (=> (= ?v0 empty$a )false )(forall ((?v1 Color$ )(?v2 A_c_rbt$ )(?v3 A$ )(?v4 C$ )(?v5 A_c_rbt$ ))(=> (= ?v0 (branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))false )))false )):named a27 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (and (=> (= ?v0 empty$ )false )(forall ((?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(=> (= ?v0 (branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))false )))false )):named a28 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_c_rbt$ )(?v2 A$ )(?v3 C$ )(?v4 A_c_rbt$ ))(not (= empty$a (branch$a ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a29 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(not (= empty$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a30 ))
(assert (! (= (distinct$ nil$ )true ):named a31 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 Color$ )(?v2 A_c_rbt$ )(?v3 A$ )(?v4 C$ )(?v5 A_c_rbt$ ))(! (= (rbt_sorted$ ?v0 (branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))(and (fun_app$o (rbt_less$a ?v0 ?v3 )?v2 )(and (fun_app$o (rbt_greater$a ?v0 ?v3 )?v5 )(and (rbt_sorted$ ?v0 ?v2 )(rbt_sorted$ ?v0 ?v5 ))))):pattern ((rbt_sorted$ ?v0 (branch$a ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a32 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(! (= (rbt_sorted$a ?v0 (branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))(and (fun_app$l (rbt_less$ ?v0 ?v3 )?v2 )(and (fun_app$l (rbt_greater$ ?v0 ?v3 )?v5 )(and (rbt_sorted$a ?v0 ?v2 )(rbt_sorted$a ?v0 ?v5 ))))):pattern ((rbt_sorted$a ?v0 (branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))))):named a33 ))
(check-sat )
;(get-unsat-core )
