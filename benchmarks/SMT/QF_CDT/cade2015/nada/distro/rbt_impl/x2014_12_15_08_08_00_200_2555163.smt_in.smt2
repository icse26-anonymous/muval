;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-fun r$ ()Color$)
(declare-fun b$ ()Color$)
(declare-fun empty$ ()A_b_rbt$)
(declare-fun select$ (A_b_rbt$)Color$)
(declare-fun selecta$ (A_b_rbt$)A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$)A$)
(declare-fun selectc$ (A_b_rbt$)B$)
(declare-fun selectd$ (A_b_rbt$)A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$)
(declare-fun t$ ()A_b_rbt$ )
(declare-fun one$ ()Nat$ )
(declare-fun inv1l$ (A_b_rbt$ )Bool )
(declare-fun minus$ (Nat$ Nat$ )Nat$ )
(declare-fun paint$ (Color$ A_b_rbt$ )A_b_rbt$ )
(declare-fun bheight$ (A_b_rbt$ )Nat$ )
(declare-fun color_of$ (A_b_rbt$ )Color$ )
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$ A_b_rbt$ )Bool )
(assert (! (not (= (bheight$ (paint$ r$ t$ ))(minus$ (bheight$ t$ )one$ ))):named a0 ))
(assert (! (= (color_of$ t$ )b$ ):named a1 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(= (color_of$ (paint$ b$ ?v0 ))b$ )):named a2 ))
(assert (! (forall ((?v0 Color$ ))(=> (and (=> (= ?v0 r$ )false )(=> (= ?v0 b$ )false ))false )):named a3 ))
(assert (! (not (= r$ b$ )):named a4 ))
(assert (! (= one$ one$ ):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (minus$ (minus$ ?v0 ?v1 )?v2 )(minus$ (minus$ ?v0 ?v2 )?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(= (= one$ ?v0 )(= ?v0 one$ ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (minus$ (minus$ ?v0 ?v1 )?v2 )(minus$ (minus$ ?v0 ?v2 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 Color$ ))(=> (inv1l$ ?v0 )(inv1l$ (paint$ ?v1 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_b_rbt$ )(?v2 Color$ ))(=> (rbt_sorted$ ?v0 ?v1 )(rbt_sorted$ ?v0 (paint$ ?v2 ?v1 )))):named a10 ))
(check-sat )
;(get-unsat-core )
