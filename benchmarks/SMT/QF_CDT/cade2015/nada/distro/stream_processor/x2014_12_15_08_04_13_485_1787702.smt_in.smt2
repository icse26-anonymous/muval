;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort B_set$ 0 )
(declare-sort C_set$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_b_sp_nu$ 0 )
(declare-sort A_c_sp_nu$ 0 )
(declare-sort C_b_sp_nu$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort B_b_prod_set$ 0 )
(declare-sort B_stream_set$ 0 )
(declare-sort C_stream_set$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort B_b_c_fun_fun$ 0 )
(declare-sort B_c_b_fun_fun$ 0 )
(declare-sort B_c_c_fun_fun$ 0 )
(declare-sort C_b_b_fun_fun$ 0 )
(declare-sort C_b_c_fun_fun$ 0 )
(declare-sort C_c_b_fun_fun$ 0 )
(declare-sort C_c_c_fun_fun$ 0 )
(declare-sort B_b_b_prod_fun$ 0 )
(declare-sort B_b_prod_b_fun$ 0 )
(declare-sort B_b_prod_c_fun$ 0 )
(declare-sort B_b_stream_fun$ 0 )
(declare-sort B_stream_b_fun$ 0 )
(declare-sort C_b_b_prod_fun$ 0 )
(declare-sort B_b_prod_bool_fun$ 0 )
(declare-sort B_stream_bool_fun$ 0 )
(declare-sort C_stream_bool_fun$ 0 )
(declare-sort A_c_sp_nu_bool_fun$ 0 )
(declare-sort C_b_sp_nu_bool_fun$ 0 )
(declare-sort A_c_a_c_sp_nu_sp_mu$ 0 )
(declare-sort B_b_prod_stream_set$ 0 )
(declare-sort B_stream_stream_set$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu$ 0 )
(declare-sort B_b_b_b_prod_fun_fun$ 0 )
(declare-sort B_b_b_prod_b_fun_fun$ 0 )
(declare-sort B_b_prod_b_b_fun_fun$ 0 )
(declare-sort B_b_prod_c_b_fun_fun$ 0 )
(declare-sort B_b_stream_b_fun_fun$ 0 )
(declare-sort B_c_b_b_prod_fun_fun$ 0 )
(declare-sort C_b_b_prod_b_fun_fun$ 0 )
(declare-sort B_b_prod_b_b_prod_fun$ 0 )
(declare-sort B_stream_b_stream_fun$ 0 )
(declare-sort B_b_prod_stream_bool_fun$ 0 )
(declare-sort B_stream_stream_bool_fun$ 0 )
(declare-sort A_a_c_a_c_sp_nu_sp_mu_fun$ 0 )
(declare-sort C_c_b_c_b_sp_nu_sp_mu_fun$ 0 )
(declare-sort B_b_prod_b_b_prod_b_fun_fun$ 0 )
(declare-sort B_b_stream_b_stream_fun_fun$ 0 )
(declare-sort A_c_a_c_sp_nu_sp_mu_bool_fun$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_bool_fun$ 0 )
(declare-sort B_stream_b_stream_bool_fun_fun$ 0 )
(declare-sort C_stream_c_stream_bool_fun_fun$ 0 )
(declare-sort C_b_sp_nu_a_c_sp_nu_prod_bool_fun$ 0 )
(declare-sort A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ 0 )
(declare-sort B_b_prod_b_b_prod_b_b_prod_fun_fun$ 0 )
(declare-sort B_stream_b_stream_b_stream_fun_fun$ 0 )
(declare-sort C_stream_b_stream_b_stream_fun_fun$ 0 )
(declare-sort B_bool_fun_b_stream_b_stream_fun_fun$ 0 )
(declare-sort A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ 0 )
(declare-sort B_b_prod_stream_b_stream_b_stream_fun_fun$ 0 )
(declare-sort A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_fun$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_fun$ 0 )
(declare-sort B_b_prod_stream_b_b_prod_stream_bool_fun_fun$ 0 )
(declare-sort B_bool_fun_b_stream_prod_b_stream_bool_fun_fun$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ 0 )
(declare-sort B_c_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_fun$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_b_fun$ 0 )
(declare-sort A_c_sp_nu_bool_fun_a_c_a_c_sp_nu_sp_mu_bool_fun_fun$ 0 )
(declare-sort C_b_sp_nu_bool_fun_c_b_c_b_sp_nu_sp_mu_bool_fun_fun$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_bool_fun_fun$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_bool_fun$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream_set$ 0 )
(declare-sort B_stream_c_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_fun$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_b_stream_fun$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream_bool_fun$ 0 )
(declare-sort A_a_c_a_c_sp_nu_sp_mu_fun_a_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun_fun$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_c_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_fun$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod_c_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod_bool_fun_fun$ 0 )
(declare-sort B_stream$ 0)
(declare-sort A_stream$ 0)
(declare-sort C_stream$ 0)
(declare-fun shd$ (B_stream$)B$)
(declare-fun stl$ (B_stream$)B_stream$)
(declare-fun sCons$ (B$ B_stream$ )B_stream$)
(declare-fun shd$a (A_stream$)A$)
(declare-fun stl$a (A_stream$)A_stream$)
(declare-fun sCons$a (A$ A_stream$ )A_stream$)
(declare-fun shd$b (C_stream$)C$)
(declare-fun stl$b (C_stream$)C_stream$)
(declare-fun sCons$b (C$ C_stream$ )C_stream$)
(declare-sort B_b_prod$ 0)
(declare-fun fst$ (B_b_prod$)B$)
(declare-fun snd$ (B_b_prod$)B$)
(declare-fun pair$ (B$ B$ )B_b_prod$)
(declare-sort B_b_prod_stream$ 0)
(declare-sort B_stream_stream$ 0)
(declare-fun shd$c (B_b_prod_stream$)B_b_prod$)
(declare-fun stl$c (B_b_prod_stream$)B_b_prod_stream$)
(declare-fun sCons$c (B_b_prod$ B_b_prod_stream$ )B_b_prod_stream$)
(declare-fun shd$d (B_stream_stream$)B_stream$)
(declare-fun stl$d (B_stream_stream$)B_stream_stream$)
(declare-fun sCons$d (B_stream$ B_stream_stream$ )B_stream_stream$)
(declare-sort C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ 0)
(declare-fun fst$a (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$)C_b_c_b_sp_nu_sp_mu$)
(declare-fun snd$a (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$)C_b_c_b_sp_nu_sp_mu$)
(declare-fun pair$a (C_b_c_b_sp_nu_sp_mu$ C_b_c_b_sp_nu_sp_mu$ )C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$)
(declare-sort C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ 0)
(declare-fun shd$e (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$)C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$)
(declare-fun stl$e (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$)C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$)
(declare-fun sCons$e (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$)
(declare-sort C_b_sp_nu_a_c_sp_nu_prod$ 0)
(declare-sort C_a_c_sp_nu_prod$ 0)
(declare-sort C_a_c_sp_nu_prod_a_stream_prod$ 0)
(declare-sort B_c_b_sp_nu_a_c_sp_nu_prod_prod$ 0)
(declare-sort B_c_b_sp_nu_a_c_sp_nu_prod_prod_a_stream_prod$ 0)
(declare-sort B_c_b_sp_nu_prod$ 0)
(declare-sort B_c_b_sp_nu_prod_c_stream_prod$ 0)
(declare-sort C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$ 0)
(declare-sort B_bool_fun_b_stream_prod$ 0)
(declare-fun fst$b (C_b_sp_nu_a_c_sp_nu_prod$)C_b_sp_nu$)
(declare-fun snd$b (C_b_sp_nu_a_c_sp_nu_prod$)A_c_sp_nu$)
(declare-fun pair$b (C_b_sp_nu$ A_c_sp_nu$ )C_b_sp_nu_a_c_sp_nu_prod$)
(declare-fun fst$c (C_a_c_sp_nu_prod$)C$)
(declare-fun snd$c (C_a_c_sp_nu_prod$)A_c_sp_nu$)
(declare-fun pair$c (C$ A_c_sp_nu$ )C_a_c_sp_nu_prod$)
(declare-fun fst$d (C_a_c_sp_nu_prod_a_stream_prod$)C_a_c_sp_nu_prod$)
(declare-fun snd$d (C_a_c_sp_nu_prod_a_stream_prod$)A_stream$)
(declare-fun pair$d (C_a_c_sp_nu_prod$ A_stream$ )C_a_c_sp_nu_prod_a_stream_prod$)
(declare-fun fst$e (B_c_b_sp_nu_a_c_sp_nu_prod_prod$)B$)
(declare-fun snd$e (B_c_b_sp_nu_a_c_sp_nu_prod_prod$)C_b_sp_nu_a_c_sp_nu_prod$)
(declare-fun pair$e (B$ C_b_sp_nu_a_c_sp_nu_prod$ )B_c_b_sp_nu_a_c_sp_nu_prod_prod$)
(declare-fun fst$f (B_c_b_sp_nu_a_c_sp_nu_prod_prod_a_stream_prod$)B_c_b_sp_nu_a_c_sp_nu_prod_prod$)
(declare-fun snd$f (B_c_b_sp_nu_a_c_sp_nu_prod_prod_a_stream_prod$)A_stream$)
(declare-fun pair$f (B_c_b_sp_nu_a_c_sp_nu_prod_prod$ A_stream$ )B_c_b_sp_nu_a_c_sp_nu_prod_prod_a_stream_prod$)
(declare-fun fst$g (B_c_b_sp_nu_prod$)B$)
(declare-fun snd$g (B_c_b_sp_nu_prod$)C_b_sp_nu$)
(declare-fun pair$g (B$ C_b_sp_nu$ )B_c_b_sp_nu_prod$)
(declare-fun fst$h (B_c_b_sp_nu_prod_c_stream_prod$)B_c_b_sp_nu_prod$)
(declare-fun snd$h (B_c_b_sp_nu_prod_c_stream_prod$)C_stream$)
(declare-fun pair$h (B_c_b_sp_nu_prod$ C_stream$ )B_c_b_sp_nu_prod_c_stream_prod$)
(declare-fun fst$i (C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$)C_b_c_b_sp_nu_sp_mu$)
(declare-fun snd$i (C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$)A_c_a_c_sp_nu_sp_mu$)
(declare-fun pair$i (C_b_c_b_sp_nu_sp_mu$ A_c_a_c_sp_nu_sp_mu$ )C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$)
(declare-fun select$ (B_bool_fun_b_stream_prod$)B_bool_fun$)
(declare-fun selecta$ (B_bool_fun_b_stream_prod$)B_stream$)
(declare-fun pair$j (B_bool_fun$ B_stream$ )B_bool_fun_b_stream_prod$)
(declare-fun b$ ()C$ )
(declare-fun f$ ()C_c_b_c_b_sp_nu_sp_mu_fun$ )
(declare-fun in$ (C_b_c_b_sp_nu_sp_mu$ )C_b_sp_nu$ )
(declare-fun sb$ ()A_stream$ )
(declare-fun sp$ ()A_c_sp_nu$ )
(declare-fun uu$ (B_stream_set$ )B_stream_bool_fun$ )
(declare-fun get$ (C_c_b_c_b_sp_nu_sp_mu_fun$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun in$a (A_c_a_c_sp_nu_sp_mu$ )A_c_sp_nu$ )
(declare-fun out$ (C_b_sp_nu$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun put$ (C$ A_c_sp_nu$ )A_c_a_c_sp_nu_sp_mu$ )
(declare-fun spb$ ()C_b_sp_nu$ )
(declare-fun sub$ ()C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ )
(declare-fun uua$ (B_set$ )B_bool_fun$ )
(declare-fun uub$ (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ )C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_bool_fun$ )
(declare-fun uuc$ (C_c_b_c_b_sp_nu_sp_mu_fun$ )A_a_c_a_c_sp_nu_sp_mu_fun_a_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun_fun$ )
(declare-fun uud$ ()B_b_stream_b_stream_fun_fun$ )
(declare-fun uue$ ()C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_fun$ )
(declare-fun uuf$ ()A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_fun$ )
(declare-fun uug$ ()B_b_stream_b_fun_fun$ )
(declare-fun accp$ (C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod_c_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod_bool_fun_fun$ C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$ )Bool )
(declare-fun get$a (A_a_c_a_c_sp_nu_sp_mu_fun$ )A_c_a_c_sp_nu_sp_mu$ )
(declare-fun get$b (A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ )A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ )
(declare-fun out$a (A_c_sp_nu$ )A_c_a_c_sp_nu_sp_mu$ )
(declare-fun put$a (B$ C_b_sp_nu$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun put$b (B$ C_b_sp_nu_a_c_sp_nu_prod$ )A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ )
(declare-fun smap$ (C_b_fun$ C_stream$ )B_stream$ )
(declare-fun sp_b$ ()A_c_sp_nu$ )
(declare-fun szip$ (B_stream$ B_stream$ )B_b_prod_stream$ )
(declare-fun smap$a (B_b_prod_b_fun$ B_b_prod_stream$ )B_stream$ )
(declare-fun smap$b (B_b_fun$ )B_stream_b_stream_fun$ )
(declare-fun smap$c (B_b_b_prod_fun$ B_stream$ )B_b_prod_stream$ )
(declare-fun smap$d (C_b_b_prod_fun$ C_stream$ )B_b_prod_stream$ )
(declare-fun smap$e (B_b_prod_b_b_prod_fun$ B_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun smap$f (B_c_fun$ B_stream$ )C_stream$ )
(declare-fun smap$g (C_c_fun$ C_stream$ )C_stream$ )
(declare-fun smap$h (B_b_prod_c_fun$ B_b_prod_stream$ )C_stream$ )
(declare-fun smap$i (B_stream_b_stream_fun$ B_stream_stream$ )B_stream_stream$ )
(declare-fun smap$j (B_stream_c_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_fun$ B_stream_stream$ )C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )
(declare-fun smap$k (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_b_stream_fun$ C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )B_stream_stream$ )
(declare-fun smap$l (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_c_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_fun$ C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )
(declare-fun smap$m (B_stream_b_fun$ B_stream_stream$ )B_stream$ )
(declare-fun smap$n (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_b_fun$ C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )B_stream$ )
(declare-fun smap$o (B_b_stream_fun$ B_stream$ )B_stream_stream$ )
(declare-fun smap$p (B_c_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_fun$ B_stream$ )C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )
(declare-fun smap2$ (B_b_b_fun_fun$ )B_stream_b_stream_b_stream_fun_fun$ )
(declare-fun member$ (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ )Bool )
(declare-fun run_mu$ (A_c_a_c_sp_nu_sp_mu$ A_stream$ )C_a_c_sp_nu_prod_a_stream_prod$ )
(declare-fun run_nu$ (A_b_sp_nu$ A_stream$ )B_stream$ )
(declare-fun smap2$a (B_c_b_fun_fun$ B_stream$ C_stream$ )B_stream$ )
(declare-fun smap2$b (C_b_b_fun_fun$ )C_stream_b_stream_b_stream_fun_fun$ )
(declare-fun smap2$c (C_c_b_fun_fun$ C_stream$ C_stream$ )B_stream$ )
(declare-fun smap2$d (B_b_b_prod_b_fun_fun$ B_stream$ B_b_prod_stream$ )B_stream$ )
(declare-fun smap2$e (C_b_b_prod_b_fun_fun$ C_stream$ B_b_prod_stream$ )B_stream$ )
(declare-fun smap2$f (B_b_prod_b_b_fun_fun$ )B_b_prod_stream_b_stream_b_stream_fun_fun$ )
(declare-fun smap2$g (B_b_prod_c_b_fun_fun$ B_b_prod_stream$ C_stream$ )B_stream$ )
(declare-fun smap2$h (B_b_b_b_prod_fun_fun$ B_stream$ B_stream$ )B_b_prod_stream$ )
(declare-fun smap2$i (B_c_b_b_prod_fun_fun$ B_stream$ C_stream$ )B_b_prod_stream$ )
(declare-fun smap2$j (B_b_c_fun_fun$ B_stream$ B_stream$ )C_stream$ )
(declare-fun smap2$k (B_c_c_fun_fun$ B_stream$ C_stream$ )C_stream$ )
(declare-fun smap2$l (C_b_c_fun_fun$ C_stream$ B_stream$ )C_stream$ )
(declare-fun smap2$m (C_c_c_fun_fun$ C_stream$ C_stream$ )C_stream$ )
(declare-fun smap2$n (B_b_prod_b_b_prod_b_fun_fun$ B_b_prod_stream$ B_b_prod_stream$ )B_stream$ )
(declare-fun smap2$o (B_b_prod_b_b_prod_b_b_prod_fun_fun$ B_b_prod_stream$ B_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun collect$ (B_stream_bool_fun$ )B_stream_set$ )
(declare-fun fun_app$ (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_bool_fun$ C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ )Bool )
(declare-fun member$a (B_stream$ B_stream_set$ )Bool )
(declare-fun member$b (B$ B_set$ )Bool )
(declare-fun member$c (B_stream_stream$ B_stream_stream_set$ )Bool )
(declare-fun member$d (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream_set$ )Bool )
(declare-fun member$e (C_stream$ C_stream_set$ )Bool )
(declare-fun member$f (C$ C_set$ )Bool )
(declare-fun member$g (B_b_prod_stream$ B_b_prod_stream_set$ )Bool )
(declare-fun member$h (B_b_prod$ B_b_prod_set$ )Bool )
(declare-fun run_mu$a (A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ A_stream$ )B_c_b_sp_nu_a_c_sp_nu_prod_prod_a_stream_prod$ )
(declare-fun run_mu$b (C_b_c_b_sp_nu_sp_mu$ C_stream$ )B_c_b_sp_nu_prod_c_stream_prod$ )
(declare-fun run_nu$a (C_b_sp_nu$ C_stream$ )B_stream$ )
(declare-fun run_nu$b (A_c_sp_nu$ A_stream$ )C_stream$ )
(declare-fun smember$ (B$ )B_stream_bool_fun$ )
(declare-fun streams$ (B_stream_set$ )B_stream_stream_set$ )
(declare-fun collect$a (B_bool_fun$ )B_set$ )
(declare-fun collect$b (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_bool_fun$ )C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ )
(declare-fun fun_app$a (B_stream_bool_fun$ B_stream$ )Bool )
(declare-fun fun_app$b (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$c (A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ A$ )A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ )
(declare-fun fun_app$d (A_a_c_a_c_sp_nu_sp_mu_fun_a_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun_fun$ A_a_c_a_c_sp_nu_sp_mu_fun$ )A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ )
(declare-fun fun_app$e (A_a_c_a_c_sp_nu_sp_mu_fun$ A$ )A_c_a_c_sp_nu_sp_mu$ )
(declare-fun fun_app$f (B_stream_b_fun$ B_stream$ )B$ )
(declare-fun fun_app$g (B_b_stream_b_fun_fun$ B$ )B_stream_b_fun$ )
(declare-fun fun_app$h (B_stream_b_stream_fun$ B_stream$ )B_stream$ )
(declare-fun fun_app$i (B_b_stream_b_stream_fun_fun$ B$ )B_stream_b_stream_fun$ )
(declare-fun fun_app$j (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_fun$ C_b_c_b_sp_nu_sp_mu$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun fun_app$k (A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_fun$ A_c_a_c_sp_nu_sp_mu$ )A_c_a_c_sp_nu_sp_mu$ )
(declare-fun fun_app$l (C_c_b_c_b_sp_nu_sp_mu_fun$ C$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun fun_app$m (C_stream_bool_fun$ C_stream$ )Bool )
(declare-fun fun_app$n (C_stream_c_stream_bool_fun_fun$ C_stream$ )C_stream_bool_fun$ )
(declare-fun fun_app$o (B_b_prod_stream_bool_fun$ B_b_prod_stream$ )Bool )
(declare-fun fun_app$p (B_b_prod_stream_b_b_prod_stream_bool_fun_fun$ B_b_prod_stream$ )B_b_prod_stream_bool_fun$ )
(declare-fun fun_app$q (B_stream_b_stream_bool_fun_fun$ B_stream$ )B_stream_bool_fun$ )
(declare-fun fun_app$r (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$s (B_b_prod_bool_fun$ B_b_prod$ )Bool )
(declare-fun fun_app$t (B_stream_stream_bool_fun$ B_stream_stream$ )Bool )
(declare-fun fun_app$u (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream_bool_fun$ C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )Bool )
(declare-fun fun_app$v (A_c_a_c_sp_nu_sp_mu_bool_fun$ A_c_a_c_sp_nu_sp_mu$ )Bool )
(declare-fun fun_app$w (C_b_c_b_sp_nu_sp_mu_bool_fun$ C_b_c_b_sp_nu_sp_mu$ )Bool )
(declare-fun fun_app$x (B_stream_b_stream_b_stream_fun_fun$ B_stream$ )B_stream_b_stream_fun$ )
(declare-fun fun_app$y (B_b_fun$ B$ )B$ )
(declare-fun fun_app$z (B_b_b_fun_fun$ B$ )B_b_fun$ )
(declare-fun pred_fun$ (C_b_c_b_sp_nu_sp_mu_bool_fun$ C_c_b_c_b_sp_nu_sp_mu_fun$ )Bool )
(declare-fun smember$a (B_b_prod$ )B_b_prod_stream_bool_fun$ )
(declare-fun streams$a (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ )C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream_set$ )
(declare-fun streams$b (C_set$ )C_stream_set$ )
(declare-fun streams$c (B_b_prod_set$ )B_b_prod_stream_set$ )
(declare-fun streams$d (B_set$ )B_stream_set$ )
(declare-fun fun_app$aa (C_b_fun$ C$ )B$ )
(declare-fun fun_app$ab (B_c_b_fun_fun$ B$ )C_b_fun$ )
(declare-fun fun_app$ac (C_stream_b_stream_b_stream_fun_fun$ C_stream$ )B_stream_b_stream_fun$ )
(declare-fun fun_app$ad (C_b_b_fun_fun$ C$ )B_b_fun$ )
(declare-fun fun_app$ae (C_c_b_fun_fun$ C$ )C_b_fun$ )
(declare-fun fun_app$af (B_b_prod_b_fun$ B_b_prod$ )B$ )
(declare-fun fun_app$ag (B_b_b_prod_b_fun_fun$ B$ )B_b_prod_b_fun$ )
(declare-fun fun_app$ah (C_b_b_prod_b_fun_fun$ C$ )B_b_prod_b_fun$ )
(declare-fun fun_app$ai (B_b_prod_stream_b_stream_b_stream_fun_fun$ B_b_prod_stream$ )B_stream_b_stream_fun$ )
(declare-fun fun_app$aj (B_b_prod_b_b_fun_fun$ B_b_prod$ )B_b_fun$ )
(declare-fun fun_app$ak (B_b_prod_c_b_fun_fun$ B_b_prod$ )C_b_fun$ )
(declare-fun fun_app$al (B_b_b_prod_fun$ B$ )B_b_prod$ )
(declare-fun fun_app$am (B_b_b_b_prod_fun_fun$ B$ )B_b_b_prod_fun$ )
(declare-fun fun_app$an (C_b_b_prod_fun$ C$ )B_b_prod$ )
(declare-fun fun_app$ao (B_c_b_b_prod_fun_fun$ B$ )C_b_b_prod_fun$ )
(declare-fun fun_app$ap (C_b_sp_nu_a_c_sp_nu_prod_bool_fun$ C_b_sp_nu_a_c_sp_nu_prod$ )Bool )
(declare-fun fun_app$aq (C_b_sp_nu_bool_fun_c_b_c_b_sp_nu_sp_mu_bool_fun_fun$ C_b_sp_nu_bool_fun$ )C_b_c_b_sp_nu_sp_mu_bool_fun$ )
(declare-fun fun_app$ar (C_b_sp_nu_bool_fun$ C_b_sp_nu$ )Bool )
(declare-fun fun_app$as (A_c_sp_nu_bool_fun_a_c_a_c_sp_nu_sp_mu_bool_fun_fun$ A_c_sp_nu_bool_fun$ )A_c_a_c_sp_nu_sp_mu_bool_fun$ )
(declare-fun fun_app$at (A_c_sp_nu_bool_fun$ A_c_sp_nu$ )Bool )
(declare-fun fun_app$au (B_b_prod_b_b_prod_fun$ B_b_prod$ )B_b_prod$ )
(declare-fun fun_app$av (B_c_fun$ B$ )C$ )
(declare-fun fun_app$aw (C_c_fun$ C$ )C$ )
(declare-fun fun_app$ax (B_b_prod_c_fun$ B_b_prod$ )C$ )
(declare-fun fun_app$ay (B_stream_c_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_fun$ B_stream$ )C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ )
(declare-fun fun_app$az (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_b_stream_fun$ C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ )B_stream$ )
(declare-fun fun_app$ba (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_c_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_fun$ C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ )C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ )
(declare-fun fun_app$bb (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_b_fun$ C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ )B$ )
(declare-fun fun_app$bc (B_b_stream_fun$ B$ )B_stream$ )
(declare-fun fun_app$bd (B_c_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_fun$ B$ )C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ )
(declare-fun fun_app$be (B_b_c_fun_fun$ B$ )B_c_fun$ )
(declare-fun fun_app$bf (B_c_c_fun_fun$ B$ )C_c_fun$ )
(declare-fun fun_app$bg (C_b_c_fun_fun$ C$ )B_c_fun$ )
(declare-fun fun_app$bh (C_c_c_fun_fun$ C$ )C_c_fun$ )
(declare-fun fun_app$bi (B_b_prod_b_b_prod_b_fun_fun$ B_b_prod$ )B_b_prod_b_fun$ )
(declare-fun fun_app$bj (B_b_prod_b_b_prod_b_b_prod_fun_fun$ B_b_prod$ )B_b_prod_b_b_prod_fun$ )
(declare-fun fun_app$bk (C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_bool_fun_fun$ C_b_c_b_sp_nu_sp_mu$ )A_c_a_c_sp_nu_sp_mu_bool_fun$ )
(declare-fun fun_app$bl (B_bool_fun_b_stream_b_stream_fun_fun$ B_bool_fun$ )B_stream_b_stream_fun$ )
(declare-fun fun_app$bm (B_bool_fun_b_stream_prod_b_stream_bool_fun_fun$ B_bool_fun_b_stream_prod$ )B_stream_bool_fun$ )
(declare-fun undefined$ ()B_stream$ )
(declare-fun case_sp_nu$ (A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_fun$ A_c_sp_nu$ )A_c_a_c_sp_nu_sp_mu$ )
(declare-fun pred_sp_mu$ (B_bool_fun$ C_b_sp_nu_a_c_sp_nu_prod_bool_fun$ A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ )Bool )
(declare-fun pred_sp_nu$ (B_bool_fun$ )C_b_sp_nu_bool_fun$ )
(declare-fun sp_mu_comp$ (C_b_c_b_sp_nu_sp_mu$ A_c_a_c_sp_nu_sp_mu$ )A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ )
(declare-fun sp_nu_comp$ (C_b_sp_nu$ A_c_sp_nu$ )A_b_sp_nu$ )
(declare-fun case_sp_nu$a (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_fun$ C_b_sp_nu$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun case_stream$ (B_b_stream_b_stream_fun_fun$ )B_stream_b_stream_fun$ )
(declare-fun pred_sp_mu$a (B_bool_fun$ )C_b_sp_nu_bool_fun_c_b_c_b_sp_nu_sp_mu_bool_fun_fun$ )
(declare-fun pred_sp_mu$b (C_bool_fun$ )A_c_sp_nu_bool_fun_a_c_a_c_sp_nu_sp_mu_bool_fun_fun$ )
(declare-fun pred_stream$ (B_bool_fun$ )B_stream_bool_fun$ )
(declare-fun sdrop_while$ (C_bool_fun$ C_stream$ )C_stream$ )
(declare-fun sinterleave$ (C_stream$ C_stream$ )C_stream$ )
(declare-fun case_stream$a (B_b_stream_b_fun_fun$ )B_stream_b_fun$ )
(declare-fun pred_stream$a (B_b_prod_bool_fun$ )B_b_prod_stream_bool_fun$ )
(declare-fun sdrop_while$a (B_b_prod_bool_fun$ B_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun sdrop_while$b (B_bool_fun$ )B_stream_b_stream_fun$ )
(declare-fun sinterleave$a (B_b_prod_stream$ B_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun sinterleave$b (B_stream$ )B_stream_b_stream_fun$ )
(declare-fun sp_mu_comp_rel$ ()C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod_c_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod_bool_fun_fun$ )
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ ))(! (= (fun_app$ (uub$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uub$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 B_stream_set$ )(?v1 B_stream$ ))(! (= (fun_app$a (uu$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$a (uu$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B$ ))(! (= (fun_app$b (uua$ ?v0 )?v1 )(member$b ?v1 ?v0 )):pattern ((fun_app$b (uua$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 A_a_c_a_c_sp_nu_sp_mu_fun$ )(?v2 A$ ))(! (= (fun_app$c (fun_app$d (uuc$ ?v0 )?v1 )?v2 )(sp_mu_comp$ (get$ ?v0 )(fun_app$e ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$d (uuc$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(! (= (fun_app$f (fun_app$g uug$ ?v0 )?v1 )?v0 ):pattern ((fun_app$f (fun_app$g uug$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(! (= (fun_app$h (fun_app$i uud$ ?v0 )?v1 )?v1 ):pattern ((fun_app$h (fun_app$i uud$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu$ ))(! (= (fun_app$j uue$ ?v0 )?v0 ):pattern ((fun_app$j uue$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_c_a_c_sp_nu_sp_mu$ ))(! (= (fun_app$k uuf$ ?v0 )?v0 ):pattern ((fun_app$k uuf$ ?v0 )))):named a7 ))
(assert (! (not (and (= (shd$ (run_nu$ (sp_nu_comp$ spb$ sp_b$ )sb$ ))(shd$ (run_nu$a spb$ (run_nu$b sp_b$ sb$ ))))(exists ((?v0 C_b_sp_nu$ )(?v1 A_c_sp_nu$ )(?v2 A_stream$ ))(and (= (stl$ (run_nu$ (sp_nu_comp$ spb$ sp_b$ )sb$ ))(run_nu$ (sp_nu_comp$ ?v0 ?v1 )?v2 ))(= (stl$ (run_nu$a spb$ (run_nu$b sp_b$ sb$ )))(run_nu$a ?v0 (run_nu$b ?v1 ?v2 ))))))):named a8 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (and (= (fun_app$l f$ b$ )(out$ (in$ (fun_app$l f$ b$ ))))(= (out$a sp$ )(out$a sp$ )))(and (= (shd$ (run_nu$ (sp_nu_comp$ (in$ (fun_app$l f$ b$ ))sp$ )?v0 ))(shd$ (run_nu$a (in$ (fun_app$l f$ b$ ))(run_nu$b sp$ ?v0 ))))(exists ((?v1 C_b_sp_nu$ )(?v2 A_c_sp_nu$ )(?v3 A_stream$ ))(and (= (stl$ (run_nu$ (sp_nu_comp$ (in$ (fun_app$l f$ b$ ))sp$ )?v0 ))(run_nu$ (sp_nu_comp$ ?v1 ?v2 )?v3 ))(= (stl$ (run_nu$a (in$ (fun_app$l f$ b$ ))(run_nu$b sp$ ?v0 )))(run_nu$a ?v1 (run_nu$b ?v2 ?v3 )))))))):named a9 ))
(assert (! (forall ((?v0 C_b_sp_nu$ )(?v1 A_c_sp_nu$ )(?v2 A_stream$ ))(=> (and (= (fun_app$l f$ b$ )(out$ ?v0 ))(= (out$a sp$ )(out$a ?v1 )))(and (= (shd$ (run_nu$ (sp_nu_comp$ ?v0 ?v1 )?v2 ))(shd$ (run_nu$a ?v0 (run_nu$b ?v1 ?v2 ))))(exists ((?v3 C_b_sp_nu$ )(?v4 A_c_sp_nu$ )(?v5 A_stream$ ))(and (= (stl$ (run_nu$ (sp_nu_comp$ ?v0 ?v1 )?v2 ))(run_nu$ (sp_nu_comp$ ?v3 ?v4 )?v5 ))(= (stl$ (run_nu$a ?v0 (run_nu$b ?v1 ?v2 )))(run_nu$a ?v3 (run_nu$b ?v4 ?v5 )))))))):named a10 ))
(assert (! (= (get$ f$ )(out$ spb$ )):named a11 ))
(assert (! (= (put$ b$ sp$ )(out$a sp_b$ )):named a12 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_stream$ ))(=> (and (= (shd$b ?v0 )(shd$b ?v1 ))(= (stl$b ?v0 )(stl$b ?v1 )))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_stream$ ))(=> (and (= (shd$c ?v0 )(shd$c ?v1 ))(= (stl$c ?v0 )(stl$c ?v1 )))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 C_stream_c_stream_bool_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(=> (and (fun_app$m (fun_app$n ?v0 ?v1 )?v2 )(forall ((?v3 C_stream$ )(?v4 C_stream$ ))(=> (fun_app$m (fun_app$n ?v0 ?v3 )?v4 )(and (= (shd$b ?v3 )(shd$b ?v4 ))(or (fun_app$m (fun_app$n ?v0 (stl$b ?v3 ))(stl$b ?v4 ))(= (stl$b ?v3 )(stl$b ?v4 )))))))(= ?v1 ?v2 ))):named a16 ))
(assert (! (forall ((?v0 B_b_prod_stream_b_b_prod_stream_bool_fun_fun$ )(?v1 B_b_prod_stream$ )(?v2 B_b_prod_stream$ ))(=> (and (fun_app$o (fun_app$p ?v0 ?v1 )?v2 )(forall ((?v3 B_b_prod_stream$ )(?v4 B_b_prod_stream$ ))(=> (fun_app$o (fun_app$p ?v0 ?v3 )?v4 )(and (= (shd$c ?v3 )(shd$c ?v4 ))(or (fun_app$o (fun_app$p ?v0 (stl$c ?v3 ))(stl$c ?v4 ))(= (stl$c ?v3 )(stl$c ?v4 )))))))(= ?v1 ?v2 ))):named a17 ))
(assert (! (forall ((?v0 B_stream_b_stream_bool_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(=> (and (fun_app$a (fun_app$q ?v0 ?v1 )?v2 )(forall ((?v3 B_stream$ )(?v4 B_stream$ ))(=> (fun_app$a (fun_app$q ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$a (fun_app$q ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a18 ))
(assert (! (forall ((?v0 C_stream_c_stream_bool_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(=> (and (fun_app$m (fun_app$n ?v0 ?v1 )?v2 )(forall ((?v3 C_stream$ )(?v4 C_stream$ ))(=> (fun_app$m (fun_app$n ?v0 ?v3 )?v4 )(and (= (shd$b ?v3 )(shd$b ?v4 ))(fun_app$m (fun_app$n ?v0 (stl$b ?v3 ))(stl$b ?v4 ))))))(= ?v1 ?v2 ))):named a19 ))
(assert (! (forall ((?v0 B_b_prod_stream_b_b_prod_stream_bool_fun_fun$ )(?v1 B_b_prod_stream$ )(?v2 B_b_prod_stream$ ))(=> (and (fun_app$o (fun_app$p ?v0 ?v1 )?v2 )(forall ((?v3 B_b_prod_stream$ )(?v4 B_b_prod_stream$ ))(=> (fun_app$o (fun_app$p ?v0 ?v3 )?v4 )(and (= (shd$c ?v3 )(shd$c ?v4 ))(fun_app$o (fun_app$p ?v0 (stl$c ?v3 ))(stl$c ?v4 ))))))(= ?v1 ?v2 ))):named a20 ))
(assert (! (forall ((?v0 B_stream_b_stream_bool_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(=> (and (fun_app$a (fun_app$q ?v0 ?v1 )?v2 )(forall ((?v3 B_stream$ )(?v4 B_stream$ ))(=> (fun_app$a (fun_app$q ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(fun_app$a (fun_app$q ?v0 (stl$ ?v3 ))(stl$ ?v4 ))))))(= ?v1 ?v2 ))):named a21 ))
(assert (! (forall ((?v0 A_c_a_c_sp_nu_sp_mu$ )(?v1 A_c_a_c_sp_nu_sp_mu$ ))(= (= (in$a ?v0 )(in$a ?v1 ))(= ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu$ )(?v1 C_b_c_b_sp_nu_sp_mu$ ))(= (= (in$ ?v0 )(in$ ?v1 ))(= ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 B_b_stream_b_stream_fun_fun$ )(?v1 B_stream$ ))(! (= (fun_app$h (case_stream$ ?v0 )?v1 )(fun_app$h (fun_app$i ?v0 (shd$ ?v1 ))(stl$ ?v1 ))):pattern ((fun_app$h (case_stream$ ?v0 )?v1 )))):named a24 ))
(assert (! (forall ((?v0 B_b_stream_b_fun_fun$ )(?v1 B_stream$ ))(! (= (fun_app$f (case_stream$a ?v0 )?v1 )(fun_app$f (fun_app$g ?v0 (shd$ ?v1 ))(stl$ ?v1 ))):pattern ((fun_app$f (case_stream$a ?v0 )?v1 )))):named a25 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_stream$ ))(= (sdrop_while$ ?v0 ?v1 )(ite (fun_app$r ?v0 (shd$b ?v1 ))(sdrop_while$ ?v0 (stl$b ?v1 ))?v1 ))):named a26 ))
(assert (! (forall ((?v0 B_b_prod_bool_fun$ )(?v1 B_b_prod_stream$ ))(= (sdrop_while$a ?v0 ?v1 )(ite (fun_app$s ?v0 (shd$c ?v1 ))(sdrop_while$a ?v0 (stl$c ?v1 ))?v1 ))):named a27 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_stream$ ))(= (fun_app$h (sdrop_while$b ?v0 )?v1 )(ite (fun_app$b ?v0 (shd$ ?v1 ))(fun_app$h (sdrop_while$b ?v0 )(stl$ ?v1 ))?v1 ))):named a28 ))
(assert (! (forall ((?v0 C_stream$ ))(= (sCons$b (shd$b ?v0 )(stl$b ?v0 ))?v0 )):named a29 ))
(assert (! (forall ((?v0 B_b_prod_stream$ ))(= (sCons$c (shd$c ?v0 )(stl$c ?v0 ))?v0 )):named a30 ))
(assert (! (forall ((?v0 B_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a31 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(=> (and (member$c (stl$d ?v0 )(streams$ ?v1 ))(member$a (shd$d ?v0 )?v1 ))(member$c ?v0 (streams$ ?v1 )))):named a32 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ ))(=> (and (member$d (stl$e ?v0 )(streams$a ?v1 ))(member$ (shd$e ?v0 )?v1 ))(member$d ?v0 (streams$a ?v1 )))):named a33 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(=> (and (member$e (stl$b ?v0 )(streams$b ?v1 ))(member$f (shd$b ?v0 )?v1 ))(member$e ?v0 (streams$b ?v1 )))):named a34 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_set$ ))(=> (and (member$g (stl$c ?v0 )(streams$c ?v1 ))(member$h (shd$c ?v0 )?v1 ))(member$g ?v0 (streams$c ?v1 )))):named a35 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(=> (and (member$a (stl$ ?v0 )(streams$d ?v1 ))(member$b (shd$ ?v0 )?v1 ))(member$a ?v0 (streams$d ?v1 )))):named a36 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a37 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod_stream$ )(?v2 B_b_prod$ )(?v3 B_b_prod_stream$ ))(= (= (sCons$c ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a38 ))
(assert (! (forall ((?v0 A_a_c_a_c_sp_nu_sp_mu_fun$ )(?v1 A_a_c_a_c_sp_nu_sp_mu_fun$ ))(= (= (get$a ?v0 )(get$a ?v1 ))(= ?v0 ?v1 ))):named a39 ))
(assert (! (forall ((?v0 A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ )(?v1 A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ ))(= (= (get$b ?v0 )(get$b ?v1 ))(= ?v0 ?v1 ))):named a40 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 C_c_b_c_b_sp_nu_sp_mu_fun$ ))(= (= (get$ ?v0 )(get$ ?v1 ))(= ?v0 ?v1 ))):named a41 ))
(assert (! (forall ((?v0 B$ )(?v1 C_b_sp_nu$ )(?v2 B$ )(?v3 C_b_sp_nu$ ))(= (= (put$a ?v0 ?v1 )(put$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a42 ))
(assert (! (forall ((?v0 B$ )(?v1 C_b_sp_nu_a_c_sp_nu_prod$ )(?v2 B$ )(?v3 C_b_sp_nu_a_c_sp_nu_prod$ ))(= (= (put$b ?v0 ?v1 )(put$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a43 ))
(assert (! (forall ((?v0 C$ )(?v1 A_c_sp_nu$ )(?v2 C$ )(?v3 A_c_sp_nu$ ))(= (= (put$ ?v0 ?v1 )(put$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a44 ))
(assert (! (forall ((?v0 C_b_sp_nu$ ))(= (in$ (out$ ?v0 ))?v0 )):named a45 ))
(assert (! (forall ((?v0 A_c_sp_nu$ ))(= (in$a (out$a ?v0 ))?v0 )):named a46 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_stream$ )(?v2 B_stream_set$ ))(= (member$c (sCons$d ?v0 ?v1 )(streams$ ?v2 ))(and (member$a ?v0 ?v2 )(member$c ?v1 (streams$ ?v2 ))))):named a47 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )(?v2 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ ))(= (member$d (sCons$e ?v0 ?v1 )(streams$a ?v2 ))(and (member$ ?v0 ?v2 )(member$d ?v1 (streams$a ?v2 ))))):named a48 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B_set$ ))(= (member$a (sCons$ ?v0 ?v1 )(streams$d ?v2 ))(and (member$b ?v0 ?v2 )(member$a ?v1 (streams$d ?v2 ))))):named a49 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod_stream$ )(?v2 B_b_prod_set$ ))(= (member$g (sCons$c ?v0 ?v1 )(streams$c ?v2 ))(and (member$h ?v0 ?v2 )(member$g ?v1 (streams$c ?v2 ))))):named a50 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (fun_app$h (sdrop_while$b ?v0 )(sCons$ ?v1 ?v2 ))(ite (fun_app$b ?v0 ?v1 )(fun_app$h (sdrop_while$b ?v0 )?v2 )(sCons$ ?v1 ?v2 ))):pattern ((fun_app$h (sdrop_while$b ?v0 )(sCons$ ?v1 ?v2 ))))):named a51 ))
(assert (! (forall ((?v0 B_b_prod_bool_fun$ )(?v1 B_b_prod$ )(?v2 B_b_prod_stream$ ))(! (= (sdrop_while$a ?v0 (sCons$c ?v1 ?v2 ))(ite (fun_app$s ?v0 ?v1 )(sdrop_while$a ?v0 ?v2 )(sCons$c ?v1 ?v2 ))):pattern ((sdrop_while$a ?v0 (sCons$c ?v1 ?v2 ))))):named a52 ))
(assert (! (forall ((?v0 B_b_stream_b_stream_fun_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (fun_app$h (case_stream$ ?v0 )(sCons$ ?v1 ?v2 ))(fun_app$h (fun_app$i ?v0 ?v1 )?v2 )):pattern ((fun_app$h (case_stream$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a53 ))
(assert (! (forall ((?v0 B_b_stream_b_fun_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (fun_app$f (case_stream$a ?v0 )(sCons$ ?v1 ?v2 ))(fun_app$f (fun_app$g ?v0 ?v1 )?v2 )):pattern ((fun_app$f (case_stream$a ?v0 )(sCons$ ?v1 ?v2 ))))):named a54 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(= (member$c ?v0 (streams$ ?v1 ))(exists ((?v2 B_stream$ )(?v3 B_stream_stream$ ))(and (= ?v0 (sCons$d ?v2 ?v3 ))(and (member$a ?v2 ?v1 )(member$c ?v3 (streams$ ?v1 ))))))):named a55 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ ))(= (member$d ?v0 (streams$a ?v1 ))(exists ((?v2 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ )(?v3 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ ))(and (= ?v0 (sCons$e ?v2 ?v3 ))(and (member$ ?v2 ?v1 )(member$d ?v3 (streams$a ?v1 ))))))):named a56 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(= (member$a ?v0 (streams$d ?v1 ))(exists ((?v2 B$ )(?v3 B_stream$ ))(and (= ?v0 (sCons$ ?v2 ?v3 ))(and (member$b ?v2 ?v1 )(member$a ?v3 (streams$d ?v1 ))))))):named a57 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_set$ ))(= (member$g ?v0 (streams$c ?v1 ))(exists ((?v2 B_b_prod$ )(?v3 B_b_prod_stream$ ))(and (= ?v0 (sCons$c ?v2 ?v3 ))(and (member$h ?v2 ?v1 )(member$g ?v3 (streams$c ?v1 ))))))):named a58 ))
(assert (! (forall ((?v0 A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ ))(=> (and (forall ((?v1 A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ ))(=> (= ?v0 (get$b ?v1 ))false ))(forall ((?v1 B$ )(?v2 C_b_sp_nu_a_c_sp_nu_prod$ ))(=> (= ?v0 (put$b ?v1 ?v2 ))false )))false )):named a59 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu$ ))(=> (and (forall ((?v1 C_c_b_c_b_sp_nu_sp_mu_fun$ ))(=> (= ?v0 (get$ ?v1 ))false ))(forall ((?v1 B$ )(?v2 C_b_sp_nu$ ))(=> (= ?v0 (put$a ?v1 ?v2 ))false )))false )):named a60 ))
(assert (! (forall ((?v0 A_c_a_c_sp_nu_sp_mu$ ))(=> (and (forall ((?v1 A_a_c_a_c_sp_nu_sp_mu_fun$ ))(=> (= ?v0 (get$a ?v1 ))false ))(forall ((?v1 C$ )(?v2 A_c_sp_nu$ ))(=> (= ?v0 (put$ ?v1 ?v2 ))false )))false )):named a61 ))
(assert (! (forall ((?v0 B_stream$ ))(=> (forall ((?v1 B$ )(?v2 B_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a62 ))
(assert (! (forall ((?v0 B_b_prod_stream$ ))(=> (forall ((?v1 B_b_prod$ )(?v2 B_b_prod_stream$ ))(=> (= ?v0 (sCons$c ?v1 ?v2 ))false ))false )):named a63 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(=> (and (member$c ?v0 (streams$ ?v1 ))(forall ((?v2 B_stream$ )(?v3 B_stream_stream$ ))(=> (and (= ?v0 (sCons$d ?v2 ?v3 ))(and (member$a ?v2 ?v1 )(member$c ?v3 (streams$ ?v1 ))))false )))false )):named a64 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ ))(=> (and (member$d ?v0 (streams$a ?v1 ))(forall ((?v2 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ )(?v3 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ ))(=> (and (= ?v0 (sCons$e ?v2 ?v3 ))(and (member$ ?v2 ?v1 )(member$d ?v3 (streams$a ?v1 ))))false )))false )):named a65 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(=> (and (member$a ?v0 (streams$d ?v1 ))(forall ((?v2 B$ )(?v3 B_stream$ ))(=> (and (= ?v0 (sCons$ ?v2 ?v3 ))(and (member$b ?v2 ?v1 )(member$a ?v3 (streams$d ?v1 ))))false )))false )):named a66 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_set$ ))(=> (and (member$g ?v0 (streams$c ?v1 ))(forall ((?v2 B_b_prod$ )(?v3 B_b_prod_stream$ ))(=> (and (= ?v0 (sCons$c ?v2 ?v3 ))(and (member$h ?v2 ?v1 )(member$g ?v3 (streams$c ?v1 ))))false )))false )):named a67 ))
(assert (! (forall ((?v0 B_stream_stream_bool_fun$ )(?v1 B_stream_stream$ )(?v2 B_stream_set$ ))(=> (and (fun_app$t ?v0 ?v1 )(forall ((?v3 B_stream_stream$ ))(=> (fun_app$t ?v0 ?v3 )(exists ((?v4 B_stream$ )(?v5 B_stream_stream$ ))(and (= ?v3 (sCons$d ?v4 ?v5 ))(and (member$a ?v4 ?v2 )(or (fun_app$t ?v0 ?v5 )(member$c ?v5 (streams$ ?v2 )))))))))(member$c ?v1 (streams$ ?v2 )))):named a68 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream_bool_fun$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )(?v2 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ ))(=> (and (fun_app$u ?v0 ?v1 )(forall ((?v3 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ ))(=> (fun_app$u ?v0 ?v3 )(exists ((?v4 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ )(?v5 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ ))(and (= ?v3 (sCons$e ?v4 ?v5 ))(and (member$ ?v4 ?v2 )(or (fun_app$u ?v0 ?v5 )(member$d ?v5 (streams$a ?v2 )))))))))(member$d ?v1 (streams$a ?v2 )))):named a69 ))
(assert (! (forall ((?v0 B_stream_bool_fun$ )(?v1 B_stream$ )(?v2 B_set$ ))(=> (and (fun_app$a ?v0 ?v1 )(forall ((?v3 B_stream$ ))(=> (fun_app$a ?v0 ?v3 )(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v3 (sCons$ ?v4 ?v5 ))(and (member$b ?v4 ?v2 )(or (fun_app$a ?v0 ?v5 )(member$a ?v5 (streams$d ?v2 )))))))))(member$a ?v1 (streams$d ?v2 )))):named a70 ))
(assert (! (forall ((?v0 B_b_prod_stream_bool_fun$ )(?v1 B_b_prod_stream$ )(?v2 B_b_prod_set$ ))(=> (and (fun_app$o ?v0 ?v1 )(forall ((?v3 B_b_prod_stream$ ))(=> (fun_app$o ?v0 ?v3 )(exists ((?v4 B_b_prod$ )(?v5 B_b_prod_stream$ ))(and (= ?v3 (sCons$c ?v4 ?v5 ))(and (member$h ?v4 ?v2 )(or (fun_app$o ?v0 ?v5 )(member$g ?v5 (streams$c ?v2 )))))))))(member$g ?v1 (streams$c ?v2 )))):named a71 ))
(assert (! (forall ((?v0 A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ )(?v1 B$ )(?v2 C_b_sp_nu_a_c_sp_nu_prod$ ))(not (= (get$b ?v0 )(put$b ?v1 ?v2 )))):named a72 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 B$ )(?v2 C_b_sp_nu$ ))(not (= (get$ ?v0 )(put$a ?v1 ?v2 )))):named a73 ))
(assert (! (forall ((?v0 A_a_c_a_c_sp_nu_sp_mu_fun$ )(?v1 C$ )(?v2 A_c_sp_nu$ ))(not (= (get$a ?v0 )(put$ ?v1 ?v2 )))):named a74 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ ))(! (= (stl$b (sCons$b ?v0 ?v1 ))?v1 ):pattern ((sCons$b ?v0 ?v1 )))):named a75 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod_stream$ ))(! (= (stl$c (sCons$c ?v0 ?v1 ))?v1 ):pattern ((sCons$c ?v0 ?v1 )))):named a76 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(! (= (stl$ (sCons$ ?v0 ?v1 ))?v1 ):pattern ((sCons$ ?v0 ?v1 )))):named a77 ))
(assert (! (forall ((?v0 C_b_sp_nu$ ))(=> (=> (= ?v0 (in$ (out$ ?v0 )))false )false )):named a78 ))
(assert (! (forall ((?v0 A_c_sp_nu$ ))(=> (=> (= ?v0 (in$a (out$a ?v0 )))false )false )):named a79 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu$ ))(! (= (out$ (in$ ?v0 ))?v0 ):pattern ((in$ ?v0 )))):named a80 ))
(assert (! (forall ((?v0 A_c_a_c_sp_nu_sp_mu$ ))(! (= (out$a (in$a ?v0 ))?v0 ):pattern ((in$a ?v0 )))):named a81 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ ))(! (= (shd$b (sCons$b ?v0 ?v1 ))?v0 ):pattern ((sCons$b ?v0 ?v1 )))):named a82 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod_stream$ ))(! (= (shd$c (sCons$c ?v0 ?v1 ))?v0 ):pattern ((sCons$c ?v0 ?v1 )))):named a83 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(! (= (shd$ (sCons$ ?v0 ?v1 ))?v0 ):pattern ((sCons$ ?v0 ?v1 )))):named a84 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(=> (member$e ?v0 (streams$b ?v1 ))(member$e (stl$b ?v0 )(streams$b ?v1 )))):named a85 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_set$ ))(=> (member$g ?v0 (streams$c ?v1 ))(member$g (stl$c ?v0 )(streams$c ?v1 )))):named a86 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(=> (member$a ?v0 (streams$d ?v1 ))(member$a (stl$ ?v0 )(streams$d ?v1 )))):named a87 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(=> (member$c ?v0 (streams$ ?v1 ))(member$a (shd$d ?v0 )?v1 ))):named a88 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ ))(=> (member$d ?v0 (streams$a ?v1 ))(member$ (shd$e ?v0 )?v1 ))):named a89 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(=> (member$e ?v0 (streams$b ?v1 ))(member$f (shd$b ?v0 )?v1 ))):named a90 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_set$ ))(=> (member$g ?v0 (streams$c ?v1 ))(member$h (shd$c ?v0 )?v1 ))):named a91 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(=> (member$a ?v0 (streams$d ?v1 ))(member$b (shd$ ?v0 )?v1 ))):named a92 ))
(assert (! (forall ((?v0 B_stream_bool_fun$ )(?v1 B_b_stream_b_stream_fun_fun$ )(?v2 B_stream$ ))(= (fun_app$a ?v0 (fun_app$h (case_stream$ ?v1 )?v2 ))(=> (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(fun_app$a ?v0 (fun_app$h (fun_app$i ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))):named a93 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_b_stream_b_fun_fun$ )(?v2 B_stream$ ))(= (fun_app$b ?v0 (fun_app$f (case_stream$a ?v1 )?v2 ))(=> (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(fun_app$b ?v0 (fun_app$f (fun_app$g ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))):named a94 ))
(assert (! (forall ((?v0 B_stream_bool_fun$ )(?v1 B_b_stream_b_stream_fun_fun$ )(?v2 B_stream$ ))(= (fun_app$a ?v0 (fun_app$h (case_stream$ ?v1 )?v2 ))(not (and (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(not (fun_app$a ?v0 (fun_app$h (fun_app$i ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))))):named a95 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_b_stream_b_fun_fun$ )(?v2 B_stream$ ))(= (fun_app$b ?v0 (fun_app$f (case_stream$a ?v1 )?v2 ))(not (and (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(not (fun_app$b ?v0 (fun_app$f (fun_app$g ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))))):named a96 ))
(assert (! (forall ((?v0 C_b_sp_nu$ )(?v1 C_b_sp_nu$ ))(=> (= (out$ ?v0 )(out$ ?v1 ))(= ?v0 ?v1 ))):named a97 ))
(assert (! (forall ((?v0 A_c_sp_nu$ )(?v1 A_c_sp_nu$ ))(=> (= (out$a ?v0 )(out$a ?v1 ))(= ?v0 ?v1 ))):named a98 ))
(assert (! (forall ((?v0 C_stream$ ))(=> (=> (= ?v0 (sCons$b (shd$b ?v0 )(stl$b ?v0 )))false )false )):named a99 ))
(assert (! (forall ((?v0 B_b_prod_stream$ ))(=> (=> (= ?v0 (sCons$c (shd$c ?v0 )(stl$c ?v0 )))false )false )):named a100 ))
(assert (! (forall ((?v0 B_stream$ ))(=> (=> (= ?v0 (sCons$ (shd$ ?v0 )(stl$ ?v0 )))false )false )):named a101 ))
(assert (! (forall ((?v0 A_c_sp_nu$ ))(=> (forall ((?v1 A_c_a_c_sp_nu_sp_mu$ ))(=> (= ?v0 (in$a ?v1 ))false ))false )):named a102 ))
(assert (! (forall ((?v0 C_b_sp_nu$ ))(=> (forall ((?v1 C_b_c_b_sp_nu_sp_mu$ ))(=> (= ?v0 (in$ ?v1 ))false ))false )):named a103 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(=> (and (member$c ?v0 (streams$ ?v1 ))(=> (and (member$a (shd$d ?v0 )?v1 )(member$c (stl$d ?v0 )(streams$ ?v1 )))false ))false )):named a104 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ ))(=> (and (member$d ?v0 (streams$a ?v1 ))(=> (and (member$ (shd$e ?v0 )?v1 )(member$d (stl$e ?v0 )(streams$a ?v1 )))false ))false )):named a105 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(=> (and (member$e ?v0 (streams$b ?v1 ))(=> (and (member$f (shd$b ?v0 )?v1 )(member$e (stl$b ?v0 )(streams$b ?v1 )))false ))false )):named a106 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_set$ ))(=> (and (member$g ?v0 (streams$c ?v1 ))(=> (and (member$h (shd$c ?v0 )?v1 )(member$g (stl$c ?v0 )(streams$c ?v1 )))false ))false )):named a107 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(=> (and (member$a ?v0 (streams$d ?v1 ))(=> (and (member$b (shd$ ?v0 )?v1 )(member$a (stl$ ?v0 )(streams$d ?v1 )))false ))false )):named a108 ))
(assert (! (forall ((?v0 A_a_c_a_c_sp_nu_sp_mu_fun$ )(?v1 A_stream$ ))(! (= (run_mu$ (get$a ?v0 )?v1 )(run_mu$ (fun_app$e ?v0 (shd$a ?v1 ))(stl$a ?v1 ))):pattern ((run_mu$ (get$a ?v0 )?v1 )))):named a109 ))
(assert (! (forall ((?v0 A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ )(?v1 A_stream$ ))(! (= (run_mu$a (get$b ?v0 )?v1 )(run_mu$a (fun_app$c ?v0 (shd$a ?v1 ))(stl$a ?v1 ))):pattern ((run_mu$a (get$b ?v0 )?v1 )))):named a110 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 C_stream$ ))(! (= (run_mu$b (get$ ?v0 )?v1 )(run_mu$b (fun_app$l ?v0 (shd$b ?v1 ))(stl$b ?v1 ))):pattern ((run_mu$b (get$ ?v0 )?v1 )))):named a111 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (fun_app$a (smember$ ?v0 )(sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$a (smember$ ?v0 )?v2 ))):pattern ((fun_app$a (smember$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a112 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod$ )(?v2 B_b_prod_stream$ ))(! (= (fun_app$o (smember$a ?v0 )(sCons$c ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$o (smember$a ?v0 )?v2 ))):pattern ((fun_app$o (smember$a ?v0 )(sCons$c ?v1 ?v2 ))))):named a113 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_stream$ ))(= (sinterleave$ ?v0 ?v1 )(sCons$b (shd$b ?v0 )(sinterleave$ ?v1 (stl$b ?v0 ))))):named a114 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_stream$ ))(= (sinterleave$a ?v0 ?v1 )(sCons$c (shd$c ?v0 )(sinterleave$a ?v1 (stl$c ?v0 ))))):named a115 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (fun_app$h (sinterleave$b ?v0 )?v1 )(sCons$ (shd$ ?v0 )(fun_app$h (sinterleave$b ?v1 )(stl$ ?v0 ))))):named a116 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 C$ )(?v2 A_c_sp_nu$ ))(! (= (sp_mu_comp$ (get$ ?v0 )(put$ ?v1 ?v2 ))(sp_mu_comp$ (fun_app$l ?v0 ?v1 )(out$a ?v2 ))):pattern ((sp_mu_comp$ (get$ ?v0 )(put$ ?v1 ?v2 ))))):named a117 ))
(assert (! (forall ((?v0 A_c_a_c_sp_nu_sp_mu_bool_fun$ )(?v1 A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_fun$ )(?v2 A_c_sp_nu$ ))(= (fun_app$v ?v0 (case_sp_nu$ ?v1 ?v2 ))(not (and (= ?v2 (in$a (out$a ?v2 )))(not (fun_app$v ?v0 (fun_app$k ?v1 (out$a ?v2 )))))))):named a118 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_bool_fun$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_fun$ )(?v2 C_b_sp_nu$ ))(= (fun_app$w ?v0 (case_sp_nu$a ?v1 ?v2 ))(not (and (= ?v2 (in$ (out$ ?v2 )))(not (fun_app$w ?v0 (fun_app$j ?v1 (out$ ?v2 )))))))):named a119 ))
(assert (! (forall ((?v0 A_c_a_c_sp_nu_sp_mu_bool_fun$ )(?v1 A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_fun$ )(?v2 A_c_sp_nu$ ))(= (fun_app$v ?v0 (case_sp_nu$ ?v1 ?v2 ))(=> (= ?v2 (in$a (out$a ?v2 )))(fun_app$v ?v0 (fun_app$k ?v1 (out$a ?v2 )))))):named a120 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_bool_fun$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_fun$ )(?v2 C_b_sp_nu$ ))(= (fun_app$w ?v0 (case_sp_nu$a ?v1 ?v2 ))(=> (= ?v2 (in$ (out$ ?v2 )))(fun_app$w ?v0 (fun_app$j ?v1 (out$ ?v2 )))))):named a121 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$ ))(=> (and (forall ((?v1 B$ )(?v2 C_b_sp_nu$ )(?v3 A_c_a_c_sp_nu_sp_mu$ ))(=> (= ?v0 (pair$i (put$a ?v1 ?v2 )?v3 ))false ))(and (forall ((?v1 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v2 C$ )(?v3 A_c_sp_nu$ ))(=> (= ?v0 (pair$i (get$ ?v1 )(put$ ?v2 ?v3 )))false ))(forall ((?v1 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v2 A_a_c_a_c_sp_nu_sp_mu_fun$ ))(=> (= ?v0 (pair$i (get$ ?v1 )(get$a ?v2 )))false ))))false )):named a122 ))
(assert (! (forall ((?v0 B_stream_set$ ))(= (collect$ (uu$ ?v0 ))?v0 )):named a123 ))
(assert (! (forall ((?v0 B_set$ ))(= (collect$a (uua$ ?v0 ))?v0 )):named a124 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ ))(= (collect$b (uub$ ?v0 ))?v0 )):named a125 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_bool_fun$ ))(= (member$a ?v0 (collect$ ?v1 ))(fun_app$a ?v1 ?v0 ))):named a126 ))
(assert (! (forall ((?v0 B$ )(?v1 B_bool_fun$ ))(= (member$b ?v0 (collect$a ?v1 ))(fun_app$b ?v1 ?v0 ))):named a127 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_bool_fun$ ))(= (member$ ?v0 (collect$b ?v1 ))(fun_app$ ?v1 ?v0 ))):named a128 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (fun_app$h (fun_app$x (smap2$ ?v0 )?v1 )?v2 )(sCons$ (fun_app$y (fun_app$z ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(fun_app$h (fun_app$x (smap2$ ?v0 )(stl$ ?v1 ))(stl$ ?v2 ))))):named a129 ))
(assert (! (forall ((?v0 B_c_b_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (smap2$a ?v0 ?v1 ?v2 )(sCons$ (fun_app$aa (fun_app$ab ?v0 (shd$ ?v1 ))(shd$b ?v2 ))(smap2$a ?v0 (stl$ ?v1 )(stl$b ?v2 ))))):named a130 ))
(assert (! (forall ((?v0 C_b_b_fun_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (fun_app$h (fun_app$ac (smap2$b ?v0 )?v1 )?v2 )(sCons$ (fun_app$y (fun_app$ad ?v0 (shd$b ?v1 ))(shd$ ?v2 ))(fun_app$h (fun_app$ac (smap2$b ?v0 )(stl$b ?v1 ))(stl$ ?v2 ))))):named a131 ))
(assert (! (forall ((?v0 C_c_b_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (smap2$c ?v0 ?v1 ?v2 )(sCons$ (fun_app$aa (fun_app$ae ?v0 (shd$b ?v1 ))(shd$b ?v2 ))(smap2$c ?v0 (stl$b ?v1 )(stl$b ?v2 ))))):named a132 ))
(assert (! (forall ((?v0 B_b_b_prod_b_fun_fun$ )(?v1 B_stream$ )(?v2 B_b_prod_stream$ ))(= (smap2$d ?v0 ?v1 ?v2 )(sCons$ (fun_app$af (fun_app$ag ?v0 (shd$ ?v1 ))(shd$c ?v2 ))(smap2$d ?v0 (stl$ ?v1 )(stl$c ?v2 ))))):named a133 ))
(assert (! (forall ((?v0 C_b_b_prod_b_fun_fun$ )(?v1 C_stream$ )(?v2 B_b_prod_stream$ ))(= (smap2$e ?v0 ?v1 ?v2 )(sCons$ (fun_app$af (fun_app$ah ?v0 (shd$b ?v1 ))(shd$c ?v2 ))(smap2$e ?v0 (stl$b ?v1 )(stl$c ?v2 ))))):named a134 ))
(assert (! (forall ((?v0 B_b_prod_b_b_fun_fun$ )(?v1 B_b_prod_stream$ )(?v2 B_stream$ ))(= (fun_app$h (fun_app$ai (smap2$f ?v0 )?v1 )?v2 )(sCons$ (fun_app$y (fun_app$aj ?v0 (shd$c ?v1 ))(shd$ ?v2 ))(fun_app$h (fun_app$ai (smap2$f ?v0 )(stl$c ?v1 ))(stl$ ?v2 ))))):named a135 ))
(assert (! (forall ((?v0 B_b_prod_c_b_fun_fun$ )(?v1 B_b_prod_stream$ )(?v2 C_stream$ ))(= (smap2$g ?v0 ?v1 ?v2 )(sCons$ (fun_app$aa (fun_app$ak ?v0 (shd$c ?v1 ))(shd$b ?v2 ))(smap2$g ?v0 (stl$c ?v1 )(stl$b ?v2 ))))):named a136 ))
(assert (! (forall ((?v0 B_b_b_b_prod_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (smap2$h ?v0 ?v1 ?v2 )(sCons$c (fun_app$al (fun_app$am ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(smap2$h ?v0 (stl$ ?v1 )(stl$ ?v2 ))))):named a137 ))
(assert (! (forall ((?v0 B_c_b_b_prod_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (smap2$i ?v0 ?v1 ?v2 )(sCons$c (fun_app$an (fun_app$ao ?v0 (shd$ ?v1 ))(shd$b ?v2 ))(smap2$i ?v0 (stl$ ?v1 )(stl$b ?v2 ))))):named a138 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (fun_app$a (pred_stream$ ?v0 )(sCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(fun_app$a (pred_stream$ ?v0 )?v2 ))):pattern ((fun_app$a (pred_stream$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a139 ))
(assert (! (forall ((?v0 B_b_prod_bool_fun$ )(?v1 B_b_prod$ )(?v2 B_b_prod_stream$ ))(! (= (fun_app$o (pred_stream$a ?v0 )(sCons$c ?v1 ?v2 ))(and (fun_app$s ?v0 ?v1 )(fun_app$o (pred_stream$a ?v0 )?v2 ))):pattern ((fun_app$o (pred_stream$a ?v0 )(sCons$c ?v1 ?v2 ))))):named a140 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 C_b_sp_nu_a_c_sp_nu_prod_bool_fun$ )(?v2 B$ )(?v3 C_b_sp_nu_a_c_sp_nu_prod$ ))(! (= (pred_sp_mu$ ?v0 ?v1 (put$b ?v2 ?v3 ))(and (fun_app$b ?v0 ?v2 )(fun_app$ap ?v1 ?v3 ))):pattern ((pred_sp_mu$ ?v0 ?v1 (put$b ?v2 ?v3 ))))):named a141 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 C_b_sp_nu_bool_fun$ )(?v2 B$ )(?v3 C_b_sp_nu$ ))(! (= (fun_app$w (fun_app$aq (pred_sp_mu$a ?v0 )?v1 )(put$a ?v2 ?v3 ))(and (fun_app$b ?v0 ?v2 )(fun_app$ar ?v1 ?v3 ))):pattern ((fun_app$w (fun_app$aq (pred_sp_mu$a ?v0 )?v1 )(put$a ?v2 ?v3 ))))):named a142 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 A_c_sp_nu_bool_fun$ )(?v2 C$ )(?v3 A_c_sp_nu$ ))(! (= (fun_app$v (fun_app$as (pred_sp_mu$b ?v0 )?v1 )(put$ ?v2 ?v3 ))(and (fun_app$r ?v0 ?v2 )(fun_app$at ?v1 ?v3 ))):pattern ((fun_app$v (fun_app$as (pred_sp_mu$b ?v0 )?v1 )(put$ ?v2 ?v3 ))))):named a143 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$aa ?v0 (shd$b ?v1 ))?v2 )(= (smap$ ?v0 (stl$b ?v1 ))?v3 )))):named a144 ))
(assert (! (forall ((?v0 B_b_prod_b_fun$ )(?v1 B_b_prod_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (smap$a ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$af ?v0 (shd$c ?v1 ))?v2 )(= (smap$a ?v0 (stl$c ?v1 ))?v3 )))):named a145 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (fun_app$h (smap$b ?v0 )?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$y ?v0 (shd$ ?v1 ))?v2 )(= (fun_app$h (smap$b ?v0 )(stl$ ?v1 ))?v3 )))):named a146 ))
(assert (! (forall ((?v0 B_b_b_prod_fun$ )(?v1 B_stream$ )(?v2 B_b_prod$ )(?v3 B_b_prod_stream$ ))(= (= (smap$c ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(and (= (fun_app$al ?v0 (shd$ ?v1 ))?v2 )(= (smap$c ?v0 (stl$ ?v1 ))?v3 )))):named a147 ))
(assert (! (forall ((?v0 C_b_b_prod_fun$ )(?v1 C_stream$ )(?v2 B_b_prod$ )(?v3 B_b_prod_stream$ ))(= (= (smap$d ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(and (= (fun_app$an ?v0 (shd$b ?v1 ))?v2 )(= (smap$d ?v0 (stl$b ?v1 ))?v3 )))):named a148 ))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_fun$ )(?v1 B_b_prod_stream$ )(?v2 B_b_prod$ )(?v3 B_b_prod_stream$ ))(= (= (smap$e ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(and (= (fun_app$au ?v0 (shd$c ?v1 ))?v2 )(= (smap$e ?v0 (stl$c ?v1 ))?v3 )))):named a149 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$b ?v1 )))):named a150 ))
(assert (! (forall ((?v0 B_b_prod_b_fun$ )(?v1 B_b_prod_stream$ ))(= (stl$ (smap$a ?v0 ?v1 ))(smap$a ?v0 (stl$c ?v1 )))):named a151 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_stream$ ))(= (stl$b (smap$f ?v0 ?v1 ))(smap$f ?v0 (stl$ ?v1 )))):named a152 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_stream$ ))(= (stl$b (smap$g ?v0 ?v1 ))(smap$g ?v0 (stl$b ?v1 )))):named a153 ))
(assert (! (forall ((?v0 B_b_prod_c_fun$ )(?v1 B_b_prod_stream$ ))(= (stl$b (smap$h ?v0 ?v1 ))(smap$h ?v0 (stl$c ?v1 )))):named a154 ))
(assert (! (forall ((?v0 B_b_b_prod_fun$ )(?v1 B_stream$ ))(= (stl$c (smap$c ?v0 ?v1 ))(smap$c ?v0 (stl$ ?v1 )))):named a155 ))
(assert (! (forall ((?v0 C_b_b_prod_fun$ )(?v1 C_stream$ ))(= (stl$c (smap$d ?v0 ?v1 ))(smap$d ?v0 (stl$b ?v1 )))):named a156 ))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_fun$ )(?v1 B_b_prod_stream$ ))(= (stl$c (smap$e ?v0 ?v1 ))(smap$e ?v0 (stl$c ?v1 )))):named a157 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (stl$ (fun_app$h (smap$b ?v0 )?v1 ))(fun_app$h (smap$b ?v0 )(stl$ ?v1 )))):named a158 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$aa ?v0 (shd$b ?v1 )))):named a159 ))
(assert (! (forall ((?v0 B_b_prod_b_fun$ )(?v1 B_b_prod_stream$ ))(= (shd$ (smap$a ?v0 ?v1 ))(fun_app$af ?v0 (shd$c ?v1 )))):named a160 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_stream$ ))(= (shd$b (smap$f ?v0 ?v1 ))(fun_app$av ?v0 (shd$ ?v1 )))):named a161 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_stream$ ))(= (shd$b (smap$g ?v0 ?v1 ))(fun_app$aw ?v0 (shd$b ?v1 )))):named a162 ))
(assert (! (forall ((?v0 B_b_prod_c_fun$ )(?v1 B_b_prod_stream$ ))(= (shd$b (smap$h ?v0 ?v1 ))(fun_app$ax ?v0 (shd$c ?v1 )))):named a163 ))
(assert (! (forall ((?v0 B_b_b_prod_fun$ )(?v1 B_stream$ ))(= (shd$c (smap$c ?v0 ?v1 ))(fun_app$al ?v0 (shd$ ?v1 )))):named a164 ))
(assert (! (forall ((?v0 C_b_b_prod_fun$ )(?v1 C_stream$ ))(= (shd$c (smap$d ?v0 ?v1 ))(fun_app$an ?v0 (shd$b ?v1 )))):named a165 ))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_fun$ )(?v1 B_b_prod_stream$ ))(= (shd$c (smap$e ?v0 ?v1 ))(fun_app$au ?v0 (shd$c ?v1 )))):named a166 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (shd$ (fun_app$h (smap$b ?v0 )?v1 ))(fun_app$y ?v0 (shd$ ?v1 )))):named a167 ))
(assert (! (forall ((?v0 B$ )(?v1 C_b_sp_nu$ )(?v2 C_stream$ ))(! (= (run_mu$b (put$a ?v0 ?v1 )?v2 )(pair$h (pair$g ?v0 ?v1 )?v2 )):pattern ((run_mu$b (put$a ?v0 ?v1 )?v2 )))):named a168 ))
(assert (! (forall ((?v0 B$ )(?v1 C_b_sp_nu_a_c_sp_nu_prod$ )(?v2 A_stream$ ))(! (= (run_mu$a (put$b ?v0 ?v1 )?v2 )(pair$f (pair$e ?v0 ?v1 )?v2 )):pattern ((run_mu$a (put$b ?v0 ?v1 )?v2 )))):named a169 ))
(assert (! (forall ((?v0 C$ )(?v1 A_c_sp_nu$ )(?v2 A_stream$ ))(! (= (run_mu$ (put$ ?v0 ?v1 )?v2 )(pair$d (pair$c ?v0 ?v1 )?v2 )):pattern ((run_mu$ (put$ ?v0 ?v1 )?v2 )))):named a170 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (fun_app$h (smap$b ?v0 )(sCons$ ?v1 ?v2 ))(sCons$ (fun_app$y ?v0 ?v1 )(fun_app$h (smap$b ?v0 )?v2 ))):pattern ((fun_app$h (smap$b ?v0 )(sCons$ ?v1 ?v2 ))))):named a171 ))
(assert (! (forall ((?v0 B_b_b_prod_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (smap$c ?v0 (sCons$ ?v1 ?v2 ))(sCons$c (fun_app$al ?v0 ?v1 )(smap$c ?v0 ?v2 ))):pattern ((smap$c ?v0 (sCons$ ?v1 ?v2 ))))):named a172 ))
(assert (! (forall ((?v0 B_b_prod_b_fun$ )(?v1 B_b_prod$ )(?v2 B_b_prod_stream$ ))(! (= (smap$a ?v0 (sCons$c ?v1 ?v2 ))(sCons$ (fun_app$af ?v0 ?v1 )(smap$a ?v0 ?v2 ))):pattern ((smap$a ?v0 (sCons$c ?v1 ?v2 ))))):named a173 ))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_fun$ )(?v1 B_b_prod$ )(?v2 B_b_prod_stream$ ))(! (= (smap$e ?v0 (sCons$c ?v1 ?v2 ))(sCons$c (fun_app$au ?v0 ?v1 )(smap$e ?v0 ?v2 ))):pattern ((smap$e ?v0 (sCons$c ?v1 ?v2 ))))):named a174 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ )(?v2 B_stream_b_stream_fun$ )(?v3 B_stream_set$ ))(=> (and (member$c ?v0 (streams$ ?v1 ))(forall ((?v4 B_stream$ ))(=> (member$a ?v4 ?v1 )(member$a (fun_app$h ?v2 ?v4 )?v3 ))))(member$c (smap$i ?v2 ?v0 )(streams$ ?v3 )))):named a175 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ )(?v2 B_stream_c_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_fun$ )(?v3 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ ))(=> (and (member$c ?v0 (streams$ ?v1 ))(forall ((?v4 B_stream$ ))(=> (member$a ?v4 ?v1 )(member$ (fun_app$ay ?v2 ?v4 )?v3 ))))(member$d (smap$j ?v2 ?v0 )(streams$a ?v3 )))):named a176 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ )(?v2 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_b_stream_fun$ )(?v3 B_stream_set$ ))(=> (and (member$d ?v0 (streams$a ?v1 ))(forall ((?v4 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ ))(=> (member$ ?v4 ?v1 )(member$a (fun_app$az ?v2 ?v4 )?v3 ))))(member$c (smap$k ?v2 ?v0 )(streams$ ?v3 )))):named a177 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ )(?v2 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_c_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_fun$ )(?v3 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ ))(=> (and (member$d ?v0 (streams$a ?v1 ))(forall ((?v4 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ ))(=> (member$ ?v4 ?v1 )(member$ (fun_app$ba ?v2 ?v4 )?v3 ))))(member$d (smap$l ?v2 ?v0 )(streams$a ?v3 )))):named a178 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ )(?v2 B_stream_b_fun$ )(?v3 B_set$ ))(=> (and (member$c ?v0 (streams$ ?v1 ))(forall ((?v4 B_stream$ ))(=> (member$a ?v4 ?v1 )(member$b (fun_app$f ?v2 ?v4 )?v3 ))))(member$a (smap$m ?v2 ?v0 )(streams$d ?v3 )))):named a179 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_stream$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ )(?v2 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_b_fun$ )(?v3 B_set$ ))(=> (and (member$d ?v0 (streams$a ?v1 ))(forall ((?v4 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ ))(=> (member$ ?v4 ?v1 )(member$b (fun_app$bb ?v2 ?v4 )?v3 ))))(member$a (smap$n ?v2 ?v0 )(streams$d ?v3 )))):named a180 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ )(?v2 B_b_stream_fun$ )(?v3 B_stream_set$ ))(=> (and (member$a ?v0 (streams$d ?v1 ))(forall ((?v4 B$ ))(=> (member$b ?v4 ?v1 )(member$a (fun_app$bc ?v2 ?v4 )?v3 ))))(member$c (smap$o ?v2 ?v0 )(streams$ ?v3 )))):named a181 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ )(?v2 B_c_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_fun$ )(?v3 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ ))(=> (and (member$a ?v0 (streams$d ?v1 ))(forall ((?v4 B$ ))(=> (member$b ?v4 ?v1 )(member$ (fun_app$bd ?v2 ?v4 )?v3 ))))(member$d (smap$p ?v2 ?v0 )(streams$a ?v3 )))):named a182 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ )(?v2 B_b_fun$ )(?v3 B_set$ ))(=> (and (member$a ?v0 (streams$d ?v1 ))(forall ((?v4 B$ ))(=> (member$b ?v4 ?v1 )(member$b (fun_app$y ?v2 ?v4 )?v3 ))))(member$a (fun_app$h (smap$b ?v2 )?v0 )(streams$d ?v3 )))):named a183 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (stl$ (fun_app$h (fun_app$x (smap2$ ?v0 )?v1 )?v2 ))(fun_app$h (fun_app$x (smap2$ ?v0 )(stl$ ?v1 ))(stl$ ?v2 )))):named a184 ))
(assert (! (forall ((?v0 B_c_b_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (stl$ (smap2$a ?v0 ?v1 ?v2 ))(smap2$a ?v0 (stl$ ?v1 )(stl$b ?v2 )))):named a185 ))
(assert (! (forall ((?v0 C_b_b_fun_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (stl$ (fun_app$h (fun_app$ac (smap2$b ?v0 )?v1 )?v2 ))(fun_app$h (fun_app$ac (smap2$b ?v0 )(stl$b ?v1 ))(stl$ ?v2 )))):named a186 ))
(assert (! (forall ((?v0 C_c_b_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (stl$ (smap2$c ?v0 ?v1 ?v2 ))(smap2$c ?v0 (stl$b ?v1 )(stl$b ?v2 )))):named a187 ))
(assert (! (forall ((?v0 B_b_c_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (stl$b (smap2$j ?v0 ?v1 ?v2 ))(smap2$j ?v0 (stl$ ?v1 )(stl$ ?v2 )))):named a188 ))
(assert (! (forall ((?v0 B_c_c_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (stl$b (smap2$k ?v0 ?v1 ?v2 ))(smap2$k ?v0 (stl$ ?v1 )(stl$b ?v2 )))):named a189 ))
(assert (! (forall ((?v0 C_b_c_fun_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (stl$b (smap2$l ?v0 ?v1 ?v2 ))(smap2$l ?v0 (stl$b ?v1 )(stl$ ?v2 )))):named a190 ))
(assert (! (forall ((?v0 C_c_c_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (stl$b (smap2$m ?v0 ?v1 ?v2 ))(smap2$m ?v0 (stl$b ?v1 )(stl$b ?v2 )))):named a191 ))
(assert (! (forall ((?v0 B_b_b_prod_b_fun_fun$ )(?v1 B_stream$ )(?v2 B_b_prod_stream$ ))(= (stl$ (smap2$d ?v0 ?v1 ?v2 ))(smap2$d ?v0 (stl$ ?v1 )(stl$c ?v2 )))):named a192 ))
(assert (! (forall ((?v0 C_b_b_prod_b_fun_fun$ )(?v1 C_stream$ )(?v2 B_b_prod_stream$ ))(= (stl$ (smap2$e ?v0 ?v1 ?v2 ))(smap2$e ?v0 (stl$b ?v1 )(stl$c ?v2 )))):named a193 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (shd$ (fun_app$h (fun_app$x (smap2$ ?v0 )?v1 )?v2 ))(fun_app$y (fun_app$z ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a194 ))
(assert (! (forall ((?v0 B_c_b_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (shd$ (smap2$a ?v0 ?v1 ?v2 ))(fun_app$aa (fun_app$ab ?v0 (shd$ ?v1 ))(shd$b ?v2 )))):named a195 ))
(assert (! (forall ((?v0 C_b_b_fun_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (shd$ (fun_app$h (fun_app$ac (smap2$b ?v0 )?v1 )?v2 ))(fun_app$y (fun_app$ad ?v0 (shd$b ?v1 ))(shd$ ?v2 )))):named a196 ))
(assert (! (forall ((?v0 C_c_b_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (shd$ (smap2$c ?v0 ?v1 ?v2 ))(fun_app$aa (fun_app$ae ?v0 (shd$b ?v1 ))(shd$b ?v2 )))):named a197 ))
(assert (! (forall ((?v0 B_b_c_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (shd$b (smap2$j ?v0 ?v1 ?v2 ))(fun_app$av (fun_app$be ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a198 ))
(assert (! (forall ((?v0 B_c_c_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (shd$b (smap2$k ?v0 ?v1 ?v2 ))(fun_app$aw (fun_app$bf ?v0 (shd$ ?v1 ))(shd$b ?v2 )))):named a199 ))
(assert (! (forall ((?v0 C_b_c_fun_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (shd$b (smap2$l ?v0 ?v1 ?v2 ))(fun_app$av (fun_app$bg ?v0 (shd$b ?v1 ))(shd$ ?v2 )))):named a200 ))
(assert (! (forall ((?v0 C_c_c_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (shd$b (smap2$m ?v0 ?v1 ?v2 ))(fun_app$aw (fun_app$bh ?v0 (shd$b ?v1 ))(shd$b ?v2 )))):named a201 ))
(assert (! (forall ((?v0 B_b_b_prod_b_fun_fun$ )(?v1 B_stream$ )(?v2 B_b_prod_stream$ ))(= (shd$ (smap2$d ?v0 ?v1 ?v2 ))(fun_app$af (fun_app$ag ?v0 (shd$ ?v1 ))(shd$c ?v2 )))):named a202 ))
(assert (! (forall ((?v0 C_b_b_prod_b_fun_fun$ )(?v1 C_stream$ )(?v2 B_b_prod_stream$ ))(= (shd$ (smap2$e ?v0 ?v1 ?v2 ))(fun_app$af (fun_app$ah ?v0 (shd$b ?v1 ))(shd$c ?v2 )))):named a203 ))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_b_fun_fun$ )(?v1 B_b_prod$ )(?v2 B_b_prod_stream$ )(?v3 B_b_prod$ )(?v4 B_b_prod_stream$ ))(! (= (smap2$n ?v0 (sCons$c ?v1 ?v2 )(sCons$c ?v3 ?v4 ))(sCons$ (fun_app$af (fun_app$bi ?v0 ?v1 )?v3 )(smap2$n ?v0 ?v2 ?v4 ))):pattern ((smap2$n ?v0 (sCons$c ?v1 ?v2 )(sCons$c ?v3 ?v4 ))))):named a204 ))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_b_b_prod_fun_fun$ )(?v1 B_b_prod$ )(?v2 B_b_prod_stream$ )(?v3 B_b_prod$ )(?v4 B_b_prod_stream$ ))(! (= (smap2$o ?v0 (sCons$c ?v1 ?v2 )(sCons$c ?v3 ?v4 ))(sCons$c (fun_app$au (fun_app$bj ?v0 ?v1 )?v3 )(smap2$o ?v0 ?v2 ?v4 ))):pattern ((smap2$o ?v0 (sCons$c ?v1 ?v2 )(sCons$c ?v3 ?v4 ))))):named a205 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (stl$ (fun_app$h (sinterleave$b ?v0 )?v1 ))(fun_app$h (sinterleave$b ?v1 )(stl$ ?v0 )))):named a206 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (shd$ (fun_app$h (sinterleave$b ?v0 )?v1 ))(shd$ ?v0 ))):named a207 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 C$ ))(member$ (pair$a (fun_app$l ?v0 ?v1 )(get$ ?v0 ))sub$ )):named a208 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 C_b_sp_nu_bool_fun$ )(?v2 C_c_b_c_b_sp_nu_sp_mu_fun$ ))(! (= (fun_app$w (fun_app$aq (pred_sp_mu$a ?v0 )?v1 )(get$ ?v2 ))(pred_fun$ (fun_app$aq (pred_sp_mu$a ?v0 )?v1 )?v2 )):pattern ((fun_app$w (fun_app$aq (pred_sp_mu$a ?v0 )?v1 )(get$ ?v2 ))))):named a209 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (szip$ ?v0 ?v1 )(sCons$c (pair$ (shd$ ?v0 )(shd$ ?v1 ))(szip$ (stl$ ?v0 )(stl$ ?v1 ))))):named a210 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 C_b_c_b_sp_nu_sp_mu$ ))(! (= (fun_app$ar (pred_sp_nu$ ?v0 )(in$ ?v1 ))(fun_app$w (fun_app$aq (pred_sp_mu$a ?v0 )(pred_sp_nu$ ?v0 ))?v1 )):pattern ((fun_app$ar (pred_sp_nu$ ?v0 )(in$ ?v1 ))))):named a211 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu$ )(?v1 A_c_a_c_sp_nu_sp_mu$ )(?v2 C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_bool_fun_fun$ ))(=> (and (accp$ sp_mu_comp_rel$ (pair$i ?v0 ?v1 ))(and (forall ((?v3 B$ )(?v4 C_b_sp_nu$ )(?v5 A_c_a_c_sp_nu_sp_mu$ ))(=> (accp$ sp_mu_comp_rel$ (pair$i (put$a ?v3 ?v4 )?v5 ))(fun_app$v (fun_app$bk ?v2 (put$a ?v3 ?v4 ))?v5 )))(and (forall ((?v3 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v4 C$ )(?v5 A_c_sp_nu$ ))(=> (and (accp$ sp_mu_comp_rel$ (pair$i (get$ ?v3 )(put$ ?v4 ?v5 )))(fun_app$v (fun_app$bk ?v2 (fun_app$l ?v3 ?v4 ))(out$a ?v5 )))(fun_app$v (fun_app$bk ?v2 (get$ ?v3 ))(put$ ?v4 ?v5 ))))(forall ((?v3 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v4 A_a_c_a_c_sp_nu_sp_mu_fun$ ))(=> (and (accp$ sp_mu_comp_rel$ (pair$i (get$ ?v3 )(get$a ?v4 )))(forall ((?v5 A$ ))(fun_app$v (fun_app$bk ?v2 (get$ ?v3 ))(fun_app$e ?v4 ?v5 ))))(fun_app$v (fun_app$bk ?v2 (get$ ?v3 ))(get$a ?v4 )))))))(fun_app$v (fun_app$bk ?v2 ?v0 )?v1 ))):named a212 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 C$ )(?v2 A_c_sp_nu$ ))(! (=> (accp$ sp_mu_comp_rel$ (pair$i (get$ ?v0 )(put$ ?v1 ?v2 )))(= (sp_mu_comp$ (get$ ?v0 )(put$ ?v1 ?v2 ))(sp_mu_comp$ (fun_app$l ?v0 ?v1 )(out$a ?v2 )))):pattern ((sp_mu_comp$ (get$ ?v0 )(put$ ?v1 ?v2 ))))):named a213 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (stl$c (szip$ ?v0 ?v1 ))(szip$ (stl$ ?v0 )(stl$ ?v1 )))):named a214 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (shd$c (szip$ ?v0 ?v1 ))(pair$ (shd$ ?v0 )(shd$ ?v1 )))):named a215 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu$ )(?v1 A_c_a_c_sp_nu_sp_mu$ )(?v2 A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ ))(=> (and (= (sp_mu_comp$ ?v0 ?v1 )?v2 )(and (accp$ sp_mu_comp_rel$ (pair$i ?v0 ?v1 ))(and (forall ((?v3 B$ )(?v4 C_b_sp_nu$ )(?v5 A_c_a_c_sp_nu_sp_mu$ ))(=> (and (= ?v0 (put$a ?v3 ?v4 ))(and (= ?v1 ?v5 )(and (= ?v2 (put$b ?v3 (pair$b ?v4 (in$a ?v5 ))))(accp$ sp_mu_comp_rel$ (pair$i (put$a ?v3 ?v4 )?v5 )))))false ))(and (forall ((?v3 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v4 C$ )(?v5 A_c_sp_nu$ ))(=> (and (= ?v0 (get$ ?v3 ))(and (= ?v1 (put$ ?v4 ?v5 ))(and (= ?v2 (sp_mu_comp$ (fun_app$l ?v3 ?v4 )(out$a ?v5 )))(accp$ sp_mu_comp_rel$ (pair$i (get$ ?v3 )(put$ ?v4 ?v5 ))))))false ))(forall ((?v3 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v4 A_a_c_a_c_sp_nu_sp_mu_fun$ ))(=> (and (= ?v0 (get$ ?v3 ))(and (= ?v1 (get$a ?v4 ))(and (= ?v2 (get$b (fun_app$d (uuc$ ?v3 )?v4 )))(accp$ sp_mu_comp_rel$ (pair$i (get$ ?v3 )(get$a ?v4 ))))))false ))))))false )):named a216 ))
(assert (! (forall ((?v0 B_bool_fun_b_stream_prod_b_stream_bool_fun_fun$ )(?v1 B_bool_fun$ )(?v2 B_stream$ )(?v3 B_stream$ ))(=> (and (forall ((?v4 B_bool_fun_b_stream_b_stream_fun_fun$ )(?v5 B_bool_fun$ )(?v6 B_stream$ )(?v7 B_stream$ ))(=> (and (forall ((?v8 B_bool_fun$ )(?v9 B_stream$ )(?v10 B_stream$ ))(=> (and (= (fun_app$h (fun_app$bl ?v4 ?v8 )?v9 )?v10 )(not (= ?v10 undefined$ )))(fun_app$a (fun_app$bm ?v0 (pair$j ?v8 ?v9 ))?v10 )))(and (= (ite (fun_app$b ?v5 (shd$ ?v6 ))(fun_app$h (fun_app$bl ?v4 ?v5 )(stl$ ?v6 ))?v6 )?v7 )(not (= ?v7 undefined$ ))))(fun_app$a (fun_app$bm ?v0 (pair$j ?v5 ?v6 ))?v7 )))(and (= (fun_app$h (sdrop_while$b ?v1 )?v2 )?v3 )(not (= ?v3 undefined$ ))))(fun_app$a (fun_app$bm ?v0 (pair$j ?v1 ?v2 ))?v3 ))):named a217 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu$ )(?v1 A_c_a_c_sp_nu_sp_mu$ )(?v2 A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ ))(=> (and (= (sp_mu_comp$ ?v0 ?v1 )?v2 )(and (forall ((?v3 B$ )(?v4 C_b_sp_nu$ )(?v5 A_c_a_c_sp_nu_sp_mu$ ))(=> (and (= ?v0 (put$a ?v3 ?v4 ))(and (= ?v1 ?v5 )(= ?v2 (put$b ?v3 (pair$b ?v4 (in$a ?v5 ))))))false ))(and (forall ((?v3 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v4 C$ )(?v5 A_c_sp_nu$ ))(=> (and (= ?v0 (get$ ?v3 ))(and (= ?v1 (put$ ?v4 ?v5 ))(= ?v2 (sp_mu_comp$ (fun_app$l ?v3 ?v4 )(out$a ?v5 )))))false ))(forall ((?v3 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v4 A_a_c_a_c_sp_nu_sp_mu_fun$ ))(=> (and (= ?v0 (get$ ?v3 ))(and (= ?v1 (get$a ?v4 ))(= ?v2 (get$b (fun_app$d (uuc$ ?v3 )?v4 )))))false )))))false )):named a218 ))
(assert (! (forall ((?v0 B_stream$ ))(= (stl$ ?v0 )(fun_app$h (case_stream$ uud$ )?v0 ))):named a219 ))
(assert (! (forall ((?v0 C_b_sp_nu$ ))(= (out$ ?v0 )(case_sp_nu$a uue$ ?v0 ))):named a220 ))
(assert (! (forall ((?v0 A_c_sp_nu$ ))(= (out$a ?v0 )(case_sp_nu$ uuf$ ?v0 ))):named a221 ))
(assert (! (forall ((?v0 B_stream$ ))(= (shd$ ?v0 )(fun_app$f (case_stream$a uug$ )?v0 ))):named a222 ))
(check-sat )
;(get-unsat-core )
