;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_list_set$ 0 )
(declare-sort A_a_list_fun$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-sort A_list_stream_set$ 0 )
(declare-sort A_list_stream_bool_fun$ 0 )
(declare-sort A_list_a_list_stream_fun$ 0 )
(declare-sort A_list_stream_a_list_fun$ 0 )
(declare-sort A_list_stream_stream_set$ 0 )
(declare-sort A_list_stream_stream_bool_fun$ 0 )
(declare-sort A_list_stream_a_list_stream_fun$ 0 )
(declare-sort A_list_a_list_stream_bool_fun_fun$ 0 )
(declare-sort A_list_stream_a_list_stream_stream_bool_fun_fun$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-sort A_list_stream$ 0)
(declare-sort A_list_stream_stream$ 0)
(declare-fun shd$ (A_list_stream$)A_list$)
(declare-fun stl$ (A_list_stream$)A_list_stream$)
(declare-fun sCons$ (A_list$ A_list_stream$ )A_list_stream$)
(declare-fun shd$a (A_list_stream_stream$)A_list_stream$)
(declare-fun stl$a (A_list_stream_stream$)A_list_stream_stream$)
(declare-fun sCons$a (A_list_stream$ A_list_stream_stream$ )A_list_stream_stream$)
(declare-fun s$ ()A_list_stream$ )
(declare-fun sa$ ()A_list_stream$ )
(declare-fun bind$ (A_list$ A_a_list_fun$ )A_list$ )
(declare-fun smap$ (A_list_stream_a_list_fun$ A_list_stream_stream$ )A_list_stream$ )
(declare-fun snth$ (A_list_stream_stream$ Nat$ )A_list_stream$ )
(declare-fun sset$ (A_list_stream$ )A_list_set$ )
(declare-fun sdrop$ (Nat$ A_list_stream_stream$ )A_list_stream_stream$ )
(declare-fun smap$a (A_list_a_list_stream_fun$ A_list_stream$ )A_list_stream_stream$ )
(declare-fun smap$b (A_list_stream_a_list_stream_fun$ A_list_stream_stream$ )A_list_stream_stream$ )
(declare-fun smap$c (A_list_a_list_fun$ )A_list_stream_a_list_stream_fun$ )
(declare-fun snth$a (A_list_stream$ Nat$ )A_list$ )
(declare-fun sset$a (A_list_stream_stream$ )A_list_stream_set$ )
(declare-fun member$ (A_list$ A_list_set$ )Bool )
(declare-fun sdrop$a (Nat$ )A_list_stream_a_list_stream_fun$ )
(declare-fun fun_app$ (A_list_stream_stream_bool_fun$ A_list_stream_stream$ )Bool )
(declare-fun member$a (A_list_stream$ A_list_stream_set$ )Bool )
(declare-fun member$b (A_list_stream_stream$ A_list_stream_stream_set$ )Bool )
(declare-fun smember$ (A_list_stream$ A_list_stream_stream$ )Bool )
(declare-fun streams$ (A_list_stream_set$ )A_list_stream_stream_set$ )
(declare-fun fun_app$a (A_list_stream_a_list_stream_stream_bool_fun_fun$ A_list_stream$ )A_list_stream_stream_bool_fun$ )
(declare-fun fun_app$b (A_list_stream_bool_fun$ A_list_stream$ )Bool )
(declare-fun fun_app$c (A_list_a_list_stream_bool_fun_fun$ A_list$ )A_list_stream_bool_fun$ )
(declare-fun fun_app$d (A_list_stream_a_list_stream_fun$ A_list_stream$ )A_list_stream$ )
(declare-fun fun_app$e (A_list_a_list_stream_fun$ A_list$ )A_list_stream$ )
(declare-fun fun_app$f (A_list_a_list_fun$ A_list$ )A_list$ )
(declare-fun fun_app$g (A_list_bool_fun$ A_list$ )Bool )
(declare-fun fun_app$h (A_list_stream_a_list_fun$ A_list_stream$ )A_list$ )
(declare-fun list_ex1$ (A_bool_fun$ )A_list_bool_fun$ )
(declare-fun siterate$ (A_list_stream_a_list_stream_fun$ A_list_stream$ )A_list_stream_stream$ )
(declare-fun smember$a (A_list$ A_list_stream$ )Bool )
(declare-fun streams$a (A_list_set$ )A_list_stream_set$ )
(declare-fun siterate$a (A_list_a_list_fun$ )A_list_a_list_stream_fun$ )
(assert (! (not (forall ((?v0 A_list$ ))(=> (member$ ?v0 (sset$ (stl$ sa$ )))(not (= ?v0 nil$ ))))):named a0 ))
(assert (! (forall ((?v0 A_list$ ))(=> (member$ ?v0 (sset$ sa$ ))(not (= ?v0 nil$ )))):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(=> (member$ ?v0 (sset$ s$ ))(not (= ?v0 nil$ )))):named a2 ))
(assert (! (forall ((?v0 A_list_stream$ )(?v1 A_list_stream_stream$ ))(=> (member$a ?v0 (sset$a (stl$a ?v1 )))(member$a ?v0 (sset$a ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ ))(=> (member$ ?v0 (sset$ (stl$ ?v1 )))(member$ ?v0 (sset$ ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_list_stream$ )(?v1 A_list_stream_stream$ ))(! (= (smember$ ?v0 ?v1 )(member$a ?v0 (sset$a ?v1 ))):pattern ((smember$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ ))(! (= (smember$a ?v0 ?v1 )(member$ ?v0 (sset$ ?v1 ))):pattern ((smember$a ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a7 ))
(assert (! (forall ((?v0 A_list_stream$ )(?v1 A_list_stream_stream$ )(?v2 A_list_stream_a_list_stream_stream_bool_fun_fun$ ))(=> (and (member$a ?v0 (sset$a ?v1 ))(and (forall ((?v3 A_list_stream_stream$ ))(fun_app$ (fun_app$a ?v2 (shd$a ?v3 ))?v3 ))(forall ((?v3 A_list_stream_stream$ )(?v4 A_list_stream$ ))(=> (and (member$a ?v4 (sset$a (stl$a ?v3 )))(fun_app$ (fun_app$a ?v2 ?v4 )(stl$a ?v3 )))(fun_app$ (fun_app$a ?v2 ?v4 )?v3 )))))(fun_app$ (fun_app$a ?v2 ?v0 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ )(?v2 A_list_a_list_stream_bool_fun_fun$ ))(=> (and (member$ ?v0 (sset$ ?v1 ))(and (forall ((?v3 A_list_stream$ ))(fun_app$b (fun_app$c ?v2 (shd$ ?v3 ))?v3 ))(forall ((?v3 A_list_stream$ )(?v4 A_list$ ))(=> (and (member$ ?v4 (sset$ (stl$ ?v3 )))(fun_app$b (fun_app$c ?v2 ?v4 )(stl$ ?v3 )))(fun_app$b (fun_app$c ?v2 ?v4 )?v3 )))))(fun_app$b (fun_app$c ?v2 ?v0 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_list_stream_a_list_stream_fun$ )(?v1 A_list_stream$ ))(= (stl$a (siterate$ ?v0 ?v1 ))(siterate$ ?v0 (fun_app$d ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list$ ))(= (stl$ (fun_app$e (siterate$a ?v0 )?v1 ))(fun_app$e (siterate$a ?v0 )(fun_app$f ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_list_stream_a_list_fun$ )(?v1 A_list_stream_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$a ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_list_a_list_stream_fun$ )(?v1 A_list_stream$ ))(= (stl$a (smap$a ?v0 ?v1 ))(smap$a ?v0 (stl$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_list_stream_a_list_stream_fun$ )(?v1 A_list_stream_stream$ ))(= (stl$a (smap$b ?v0 ?v1 ))(smap$b ?v0 (stl$a ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_stream$ ))(= (stl$ (fun_app$d (smap$c ?v0 )?v1 ))(fun_app$d (smap$c ?v0 )(stl$ ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_a_list_fun$ ))(! (= (bind$ nil$ ?v0 )nil$ ):pattern ((bind$ nil$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_stream_stream$ ))(= (sdrop$ ?v0 (stl$a ?v1 ))(stl$a (sdrop$ ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_stream$ ))(= (fun_app$d (sdrop$a ?v0 )(stl$ ?v1 ))(stl$ (fun_app$d (sdrop$a ?v0 )?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_list_stream_stream$ )(?v1 Nat$ ))(member$a (snth$ ?v0 ?v1 )(sset$a ?v0 ))):named a19 ))
(assert (! (forall ((?v0 A_list_stream$ )(?v1 Nat$ ))(member$ (snth$a ?v0 ?v1 )(sset$ ?v0 ))):named a20 ))
(assert (! (forall ((?v0 A_list_stream_stream$ )(?v1 A_list_stream_set$ ))(=> (member$b ?v0 (streams$ ?v1 ))(member$b (stl$a ?v0 )(streams$ ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_list_stream$ )(?v1 A_list_set$ ))(=> (member$a ?v0 (streams$a ?v1 ))(member$a (stl$ ?v0 )(streams$a ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$g (list_ex1$ ?v0 )nil$ )false ):pattern ((list_ex1$ ?v0 )))):named a23 ))
(assert (! (forall ((?v0 A_list_stream_stream$ ))(member$a (shd$a ?v0 )(sset$a ?v0 ))):named a24 ))
(assert (! (forall ((?v0 A_list_stream$ ))(member$ (shd$ ?v0 )(sset$ ?v0 ))):named a25 ))
(assert (! (forall ((?v0 A_list_stream_a_list_fun$ )(?v1 A_list_stream_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$h ?v0 (shd$a ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_list_a_list_stream_fun$ )(?v1 A_list_stream$ ))(= (shd$a (smap$a ?v0 ?v1 ))(fun_app$e ?v0 (shd$ ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_list_stream_a_list_stream_fun$ )(?v1 A_list_stream_stream$ ))(= (shd$a (smap$b ?v0 ?v1 ))(fun_app$d ?v0 (shd$a ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_stream$ ))(= (shd$ (fun_app$d (smap$c ?v0 )?v1 ))(fun_app$f ?v0 (shd$ ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_list_stream_a_list_fun$ )(?v1 A_list_stream_stream$ )(?v2 Nat$ ))(= (snth$a (smap$ ?v0 ?v1 )?v2 )(fun_app$h ?v0 (snth$ ?v1 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 A_list_a_list_stream_fun$ )(?v1 A_list_stream$ )(?v2 Nat$ ))(= (snth$ (smap$a ?v0 ?v1 )?v2 )(fun_app$e ?v0 (snth$a ?v1 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 A_list_stream_a_list_stream_fun$ )(?v1 A_list_stream_stream$ )(?v2 Nat$ ))(= (snth$ (smap$b ?v0 ?v1 )?v2 )(fun_app$d ?v0 (snth$ ?v1 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_stream$ )(?v2 Nat$ ))(= (snth$a (fun_app$d (smap$c ?v0 )?v1 )?v2 )(fun_app$f ?v0 (snth$a ?v1 ?v2 )))):named a33 ))
(check-sat )
;(get-unsat-core )
