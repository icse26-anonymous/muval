;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort B_stream_bool_fun$ 0 )
(declare-sort A_stream_a_stream_bool_fun_fun$ 0 )
(declare-sort B_stream_b_stream_bool_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-sort B_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun shd$a (B_stream$)B$)
(declare-fun stl$a (B_stream$)B_stream$)
(declare-fun sCons$a (B$ B_stream$ )B_stream$)
(declare-fun f$ ()B_a_fun$ )
(declare-fun s$ ()B_stream$ )
(declare-fun x$ ()A$ )
(declare-fun s$a ()A_stream$ )
(declare-fun smap$ (B_a_fun$ B_stream$ )A_stream$ )
(declare-fun smap$a (A_b_fun$ A_stream$ )B_stream$ )
(declare-fun smap$b (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun smap$c (B_b_fun$ B_stream$ )B_stream$ )
(declare-fun fun_app$ (B_a_fun$ B$ )A$ )
(declare-fun smember$ (B$ B_stream$ )Bool )
(declare-fun fun_app$a (A_b_fun$ A$ )B$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (B_b_fun$ B$ )B$ )
(declare-fun fun_app$d (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$e (A_stream_a_stream_bool_fun_fun$ A_stream$ )A_stream_bool_fun$ )
(declare-fun fun_app$f (B_stream_bool_fun$ B_stream$ )Bool )
(declare-fun fun_app$g (B_stream_b_stream_bool_fun_fun$ B_stream$ )B_stream_bool_fun$ )
(declare-fun fun_app$h (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$i (A_bool_fun$ A$ )Bool )
(declare-fun smember$a (A$ A_stream$ )Bool )
(declare-fun pred_stream$ (B_bool_fun$ B_stream$ )Bool )
(declare-fun pred_stream$a (A_bool_fun$ A_stream$ )Bool )
(assert (! (not (= (= (smap$ f$ s$ )(sCons$ x$ s$a ))(and (= (fun_app$ f$ (shd$a s$ ))x$ )(= (smap$ f$ (stl$a s$ ))s$a )))):named a0 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ ))(= (stl$a (smap$a ?v0 ?v1 ))(smap$a ?v0 (stl$ ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$ (smap$b ?v0 ?v1 ))(smap$b ?v0 (stl$ ?v1 )))):named a4 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (stl$a (smap$c ?v0 ?v1 ))(smap$c ?v0 (stl$a ?v1 )))):named a5 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$a ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ ))(= (shd$a (smap$a ?v0 ?v1 ))(fun_app$a ?v0 (shd$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (smap$b ?v0 ?v1 ))(fun_app$b ?v0 (shd$ ?v1 )))):named a8 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (shd$a (smap$c ?v0 ?v1 ))(fun_app$c ?v0 (shd$a ?v1 )))):named a9 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$ ?v0 (shd$a ?v1 )))):named a10 ))
(assert (! (forall ((?v0 B_stream$ ))(= (sCons$a (shd$a ?v0 )(stl$a ?v0 ))?v0 )):named a11 ))
(assert (! (forall ((?v0 A_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a12 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smap$a ?v0 (sCons$ ?v1 ?v2 ))(sCons$a (fun_app$a ?v0 ?v1 )(smap$a ?v0 ?v2 ))):pattern ((smap$a ?v0 (sCons$ ?v1 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (smap$c ?v0 (sCons$a ?v1 ?v2 ))(sCons$a (fun_app$c ?v0 ?v1 )(smap$c ?v0 ?v2 ))):pattern ((smap$c ?v0 (sCons$a ?v1 ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (smap$ ?v0 (sCons$a ?v1 ?v2 ))(sCons$ (fun_app$ ?v0 ?v1 )(smap$ ?v0 ?v2 ))):pattern ((smap$ ?v0 (sCons$a ?v1 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smap$b ?v0 (sCons$ ?v1 ?v2 ))(sCons$ (fun_app$b ?v0 ?v1 )(smap$b ?v0 ?v2 ))):pattern ((smap$b ?v0 (sCons$ ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(! (= (shd$a (sCons$a ?v0 ?v1 ))?v0 ):pattern ((sCons$a ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (shd$ (sCons$ ?v0 ?v1 ))?v0 ):pattern ((sCons$ ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(! (= (stl$a (sCons$a ?v0 ?v1 ))?v1 ):pattern ((sCons$a ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (stl$ (sCons$ ?v0 ?v1 ))?v1 ):pattern ((sCons$ ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 B_stream$ ))(=> (=> (= ?v0 (sCons$a (shd$a ?v0 )(stl$a ?v0 )))false )false )):named a21 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (=> (= ?v0 (sCons$ (shd$ ?v0 )(stl$ ?v0 )))false )false )):named a22 ))
(assert (! (forall ((?v0 B_stream$ ))(=> (forall ((?v1 B$ )(?v2 B_stream$ ))(=> (= ?v0 (sCons$a ?v1 ?v2 ))false ))false )):named a23 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a24 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a25 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(=> (and (= (shd$a ?v0 )(shd$a ?v1 ))(= (stl$a ?v0 )(stl$a ?v1 )))(= ?v0 ?v1 ))):named a26 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$d (fun_app$e ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a27 ))
(assert (! (forall ((?v0 B_stream_b_stream_bool_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(=> (and (fun_app$f (fun_app$g ?v0 ?v1 )?v2 )(forall ((?v3 B_stream$ )(?v4 B_stream$ ))(=> (fun_app$f (fun_app$g ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(or (fun_app$f (fun_app$g ?v0 (stl$a ?v3 ))(stl$a ?v4 ))(= (stl$a ?v3 )(stl$a ?v4 )))))))(= ?v1 ?v2 ))):named a28 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(fun_app$d (fun_app$e ?v0 (stl$ ?v3 ))(stl$ ?v4 ))))))(= ?v1 ?v2 ))):named a29 ))
(assert (! (forall ((?v0 B_stream_b_stream_bool_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(=> (and (fun_app$f (fun_app$g ?v0 ?v1 )?v2 )(forall ((?v3 B_stream$ )(?v4 B_stream$ ))(=> (fun_app$f (fun_app$g ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(fun_app$f (fun_app$g ?v0 (stl$a ?v3 ))(stl$a ?v4 ))))))(= ?v1 ?v2 ))):named a30 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (smember$ ?v0 (sCons$a ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (smember$ ?v0 ?v2 ))):pattern ((smember$ ?v0 (sCons$a ?v1 ?v2 ))))):named a31 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smember$a ?v0 (sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (smember$a ?v0 ?v2 ))):pattern ((smember$a ?v0 (sCons$ ?v1 ?v2 ))))):named a32 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (pred_stream$ ?v0 (sCons$a ?v1 ?v2 ))(and (fun_app$h ?v0 ?v1 )(pred_stream$ ?v0 ?v2 ))):pattern ((pred_stream$ ?v0 (sCons$a ?v1 ?v2 ))))):named a33 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (pred_stream$a ?v0 (sCons$ ?v1 ?v2 ))(and (fun_app$i ?v0 ?v1 )(pred_stream$a ?v0 ?v2 ))):pattern ((pred_stream$a ?v0 (sCons$ ?v1 ?v2 ))))):named a34 ))
(check-sat )
;(get-unsat-core )
