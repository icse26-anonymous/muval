;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun s$ ()A_stream$ )
(declare-fun xs$ ()A_list$ )
(declare-fun ys$ ()A_list$ )
(declare-fun map$ (A_a_fun$ A_list$ )A_list$ )
(declare-fun smap$ (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun shift$ (A_list$ A_stream$ )A_stream$ )
(declare-fun append$ (A_list$ )A_list_a_list_fun$ )
(declare-fun fun_app$ (A_list_a_list_fun$ A_list$ )A_list$ )
(declare-fun list_ex$ (A_bool_fun$ A_list$ )Bool )
(declare-fun pred_list$ (A_bool_fun$ A_list$ )Bool )
(declare-fun removeAll$ (A$ A_list$ )A_list$ )
(assert (! (not (= (shift$ (fun_app$ (append$ xs$ )ys$ )s$ )(shift$ xs$ (shift$ ys$ s$ )))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )(fun_app$ (append$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a1 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )(fun_app$ (append$ ?v2 )?v1 ))(= ?v0 ?v2 ))):named a2 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (fun_app$ (append$ (fun_app$ (append$ ?v0 )?v1 ))?v2 )(fun_app$ (append$ ?v0 )(fun_app$ (append$ ?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )(fun_app$ (append$ ?v2 )?v3 ))(exists ((?v4 A_list$ ))(or (and (= ?v0 (fun_app$ (append$ ?v2 )?v4 ))(= (fun_app$ (append$ ?v4 )?v1 )?v3 ))(and (= (fun_app$ (append$ ?v0 )?v4 )?v2 )(= ?v1 (fun_app$ (append$ ?v4 )?v3 ))))))):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ )(?v4 A_list$ ))(=> (and (= (fun_app$ (append$ ?v0 )?v1 )?v2 )(= ?v3 (fun_app$ (append$ ?v1 )?v4 )))(= (fun_app$ (append$ ?v0 )?v3 )(fun_app$ (append$ ?v2 )?v4 )))):named a5 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (shift$ nil$ ?v0 )?v0 ):pattern ((shift$ nil$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(= (list_ex$ ?v0 (fun_app$ (append$ ?v1 )?v2 ))(or (list_ex$ ?v0 ?v1 )(list_ex$ ?v0 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A_list$ ))(= (removeAll$ ?v0 (fun_app$ (append$ ?v1 )?v2 ))(fun_app$ (append$ (removeAll$ ?v0 ?v1 ))(removeAll$ ?v0 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(= (pred_list$ ?v0 (fun_app$ (append$ ?v1 )?v2 ))(and (pred_list$ ?v0 ?v1 )(pred_list$ ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ )(?v2 A_stream$ ))(= (smap$ ?v0 (shift$ ?v1 ?v2 ))(shift$ (map$ ?v0 ?v1 )(smap$ ?v0 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (= (map$ ?v0 ?v1 )nil$ )(= ?v1 nil$ ))):named a11 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (= (map$ ?v0 ?v1 )nil$ )(= ?v1 nil$ ))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (= nil$ (map$ ?v0 ?v1 ))(= ?v1 nil$ ))):named a13 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$ (append$ ?v0 )nil$ )?v0 ):pattern ((append$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$ (append$ ?v0 )?v1 )nil$ )(and (= ?v0 nil$ )(= ?v1 nil$ )))):named a15 ))
(check-sat )
;(get-unsat-core )
