;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_b_fun_fun$ 0 )
(declare-sort A_a_c_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort A_b_b_fun_fun$ 0 )
(declare-sort A_b_c_fun_fun$ 0 )
(declare-sort A_c_a_fun_fun$ 0 )
(declare-sort A_c_b_fun_fun$ 0 )
(declare-sort A_c_c_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun$ 0 )
(declare-sort B_a_c_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort B_b_c_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun$ 0 )
(declare-sort B_c_b_fun_fun$ 0 )
(declare-sort B_c_c_fun_fun$ 0 )
(declare-sort C_a_a_fun_fun$ 0 )
(declare-sort C_b_a_fun_fun$ 0 )
(declare-sort C_b_b_fun_fun$ 0 )
(declare-sort C_c_a_fun_fun$ 0 )
(declare-sort B_b_prod_a_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort C_c_fun_c_c_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort A_c_prod_a_c_prod_fun$ 0 )
(declare-sort B_a_prod_b_a_prod_fun$ 0 )
(declare-sort B_b_prod_b_b_prod_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun_a_a_prod_a_a_prod_fun_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun_a_b_prod_a_b_prod_fun_fun$ 0 )
(declare-sort A_c_prod_a_c_prod_fun_a_c_prod_a_c_prod_fun_fun$ 0 )
(declare-sort B_a_prod_b_a_prod_fun_b_a_prod_b_a_prod_fun_fun$ 0 )
(declare-sort B_b_prod_b_b_prod_fun_b_b_prod_b_b_prod_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-sort B_stream$ 0)
(declare-sort C_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun shd$a (B_stream$)B$)
(declare-fun stl$a (B_stream$)B_stream$)
(declare-fun sCons$a (B$ B_stream$ )B_stream$)
(declare-fun shd$b (C_stream$)C$)
(declare-fun stl$b (C_stream$)C_stream$)
(declare-fun sCons$b (C$ C_stream$ )C_stream$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$ (A_a_prod$)A$)
(declare-fun snd$ (A_a_prod$)A$)
(declare-fun pair$ (A$ A$ )A_a_prod$)
(declare-sort A_a_prod_stream$ 0)
(declare-fun shd$c (A_a_prod_stream$)A_a_prod$)
(declare-fun stl$c (A_a_prod_stream$)A_a_prod_stream$)
(declare-fun sCons$c (A_a_prod$ A_a_prod_stream$ )A_a_prod_stream$)
(declare-sort A_b_prod$ 0)
(declare-fun fst$a (A_b_prod$)A$)
(declare-fun snd$a (A_b_prod$)B$)
(declare-fun pair$a (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_stream$ 0)
(declare-fun shd$d (A_b_prod_stream$)A_b_prod$)
(declare-fun stl$d (A_b_prod_stream$)A_b_prod_stream$)
(declare-fun sCons$d (A_b_prod$ A_b_prod_stream$ )A_b_prod_stream$)
(declare-sort A_c_prod$ 0)
(declare-fun fst$b (A_c_prod$)A$)
(declare-fun snd$b (A_c_prod$)C$)
(declare-fun pair$b (A$ C$ )A_c_prod$)
(declare-sort A_c_prod_stream$ 0)
(declare-fun shd$e (A_c_prod_stream$)A_c_prod$)
(declare-fun stl$e (A_c_prod_stream$)A_c_prod_stream$)
(declare-fun sCons$e (A_c_prod$ A_c_prod_stream$ )A_c_prod_stream$)
(declare-sort B_a_prod$ 0)
(declare-fun fst$c (B_a_prod$)B$)
(declare-fun snd$c (B_a_prod$)A$)
(declare-fun pair$c (B$ A$ )B_a_prod$)
(declare-sort B_a_prod_stream$ 0)
(declare-fun shd$f (B_a_prod_stream$)B_a_prod$)
(declare-fun stl$f (B_a_prod_stream$)B_a_prod_stream$)
(declare-fun sCons$f (B_a_prod$ B_a_prod_stream$ )B_a_prod_stream$)
(declare-sort B_b_prod$ 0)
(declare-fun fst$d (B_b_prod$)B$)
(declare-fun snd$d (B_b_prod$)B$)
(declare-fun pair$d (B$ B$ )B_b_prod$)
(declare-sort B_b_prod_stream$ 0)
(declare-fun shd$g (B_b_prod_stream$)B_b_prod$)
(declare-fun stl$g (B_b_prod_stream$)B_b_prod_stream$)
(declare-fun sCons$g (B_b_prod$ B_b_prod_stream$ )B_b_prod_stream$)
(declare-sort B_c_prod$ 0)
(declare-fun fst$e (B_c_prod$)B$)
(declare-fun snd$e (B_c_prod$)C$)
(declare-fun pair$e (B$ C$ )B_c_prod$)
(declare-sort B_c_prod_stream$ 0)
(declare-fun shd$h (B_c_prod_stream$)B_c_prod$)
(declare-fun stl$h (B_c_prod_stream$)B_c_prod_stream$)
(declare-fun sCons$h (B_c_prod$ B_c_prod_stream$ )B_c_prod_stream$)
(declare-sort C_a_prod$ 0)
(declare-fun fst$f (C_a_prod$)C$)
(declare-fun snd$f (C_a_prod$)A$)
(declare-fun pair$f (C$ A$ )C_a_prod$)
(declare-sort C_a_prod_stream$ 0)
(declare-fun shd$i (C_a_prod_stream$)C_a_prod$)
(declare-fun stl$i (C_a_prod_stream$)C_a_prod_stream$)
(declare-fun sCons$i (C_a_prod$ C_a_prod_stream$ )C_a_prod_stream$)
(declare-sort C_b_prod$ 0)
(declare-fun fst$g (C_b_prod$)C$)
(declare-fun snd$g (C_b_prod$)B$)
(declare-fun pair$g (C$ B$ )C_b_prod$)
(declare-sort C_b_prod_stream$ 0)
(declare-fun shd$j (C_b_prod_stream$)C_b_prod$)
(declare-fun stl$j (C_b_prod_stream$)C_b_prod_stream$)
(declare-fun sCons$j (C_b_prod$ C_b_prod_stream$ )C_b_prod_stream$)
(declare-sort C_c_prod$ 0)
(declare-fun fst$h (C_c_prod$)C$)
(declare-fun snd$h (C_c_prod$)C$)
(declare-fun pair$h (C$ C$ )C_c_prod$)
(declare-sort C_c_prod_stream$ 0)
(declare-fun shd$k (C_c_prod_stream$)C_c_prod$)
(declare-fun stl$k (C_c_prod_stream$)C_c_prod_stream$)
(declare-fun sCons$k (C_c_prod$ C_c_prod_stream$ )C_c_prod_stream$)
(declare-sort A_b_b_prod_prod$ 0)
(declare-fun fst$i (A_b_b_prod_prod$)A$)
(declare-fun snd$i (A_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$i (A$ B_b_prod$ )A_b_b_prod_prod$)
(declare-sort A_b_b_prod_prod_stream$ 0)
(declare-fun shd$l (A_b_b_prod_prod_stream$)A_b_b_prod_prod$)
(declare-fun stl$l (A_b_b_prod_prod_stream$)A_b_b_prod_prod_stream$)
(declare-fun sCons$l (A_b_b_prod_prod$ A_b_b_prod_prod_stream$ )A_b_b_prod_prod_stream$)
(declare-sort B_b_prod_list$ 0)
(declare-sort B_a_prod_list$ 0)
(declare-sort A_c_prod_list$ 0)
(declare-sort A_b_prod_list$ 0)
(declare-sort A_a_prod_list$ 0)
(declare-sort A_list$ 0)
(declare-sort B_list$ 0)
(declare-sort C_list$ 0)
(declare-fun nil$ ()B_b_prod_list$)
(declare-fun hd$ (B_b_prod_list$)B_b_prod$)
(declare-fun tl$ (B_b_prod_list$)B_b_prod_list$)
(declare-fun cons$ (B_b_prod$ B_b_prod_list$ )B_b_prod_list$)
(declare-fun nil$a ()B_a_prod_list$)
(declare-fun hd$a (B_a_prod_list$)B_a_prod$)
(declare-fun tl$a (B_a_prod_list$)B_a_prod_list$)
(declare-fun cons$a (B_a_prod$ B_a_prod_list$ )B_a_prod_list$)
(declare-fun nil$b ()A_c_prod_list$)
(declare-fun hd$b (A_c_prod_list$)A_c_prod$)
(declare-fun tl$b (A_c_prod_list$)A_c_prod_list$)
(declare-fun cons$b (A_c_prod$ A_c_prod_list$ )A_c_prod_list$)
(declare-fun nil$c ()A_b_prod_list$)
(declare-fun hd$c (A_b_prod_list$)A_b_prod$)
(declare-fun tl$c (A_b_prod_list$)A_b_prod_list$)
(declare-fun cons$c (A_b_prod$ A_b_prod_list$ )A_b_prod_list$)
(declare-fun nil$d ()A_a_prod_list$)
(declare-fun hd$d (A_a_prod_list$)A_a_prod$)
(declare-fun tl$d (A_a_prod_list$)A_a_prod_list$)
(declare-fun cons$d (A_a_prod$ A_a_prod_list$ )A_a_prod_list$)
(declare-fun nil$e ()A_list$)
(declare-fun hd$e (A_list$)A$)
(declare-fun tl$e (A_list$)A_list$)
(declare-fun cons$e (A$ A_list$ )A_list$)
(declare-fun nil$f ()B_list$)
(declare-fun hd$f (B_list$)B$)
(declare-fun tl$f (B_list$)B_list$)
(declare-fun cons$f (B$ B_list$ )B_list$)
(declare-fun nil$g ()C_list$)
(declare-fun hd$g (C_list$)C$)
(declare-fun tl$g (C_list$)C_list$)
(declare-fun cons$g (C$ C_list$ )C_list$)
(declare-fun f$ ()B_c_a_fun_fun$ )
(declare-fun n$ ()Nat$ )
(declare-fun s1$ ()B_stream$ )
(declare-fun s2$ ()C_stream$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun smap$ (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun szip$ (A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun zero$ ()Nat$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun shift$ (B_b_prod_list$ B_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun smap$a (B_a_fun$ B_stream$ )A_stream$ )
(declare-fun smap$b (C_a_fun$ C_stream$ )A_stream$ )
(declare-fun smap$c (A_b_fun$ A_stream$ )B_stream$ )
(declare-fun smap$d (B_b_fun$ B_stream$ )B_stream$ )
(declare-fun smap$e (C_b_fun$ C_stream$ )B_stream$ )
(declare-fun smap$f (A_c_fun$ A_stream$ )C_stream$ )
(declare-fun smap$g (B_c_fun$ B_stream$ )C_stream$ )
(declare-fun smap$h (C_c_fun$ C_stream$ )C_stream$ )
(declare-fun smap$i (B_b_prod_a_fun$ B_b_prod_stream$ )A_stream$ )
(declare-fun smap2$ (B_c_a_fun_fun$ B_stream$ C_stream$ )A_stream$ )
(declare-fun snth$a (B_stream$ Nat$ )B$ )
(declare-fun snth$b (C_stream$ Nat$ )C$ )
(declare-fun stake$ (Nat$ B_b_prod_stream$ )B_b_prod_list$ )
(declare-fun szip$a (A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun szip$b (A_stream$ C_stream$ )A_c_prod_stream$ )
(declare-fun szip$c (B_stream$ A_stream$ )B_a_prod_stream$ )
(declare-fun szip$d (B_stream$ B_stream$ )B_b_prod_stream$ )
(declare-fun szip$e (B_stream$ C_stream$ )B_c_prod_stream$ )
(declare-fun szip$f (C_stream$ A_stream$ )C_a_prod_stream$ )
(declare-fun szip$g (C_stream$ B_stream$ )C_b_prod_stream$ )
(declare-fun szip$h (C_stream$ C_stream$ )C_c_prod_stream$ )
(declare-fun szip$i (A_stream$ B_b_prod_stream$ )A_b_b_prod_prod_stream$ )
(declare-fun compow$ (Nat$ )B_b_prod_b_b_prod_fun_b_b_prod_b_b_prod_fun_fun$ )
(declare-fun sdrop$a (Nat$ B_stream$ )B_stream$ )
(declare-fun sdrop$b (Nat$ C_stream$ )C_stream$ )
(declare-fun sdrop$c (Nat$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun sdrop$d (Nat$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun sdrop$e (Nat$ A_c_prod_stream$ )A_c_prod_stream$ )
(declare-fun sdrop$f (Nat$ B_a_prod_stream$ )B_a_prod_stream$ )
(declare-fun sdrop$g (Nat$ B_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun sdrop$h (Nat$ B_c_prod_stream$ )B_c_prod_stream$ )
(declare-fun sdrop$i (Nat$ C_a_prod_stream$ )C_a_prod_stream$ )
(declare-fun sdrop$j (Nat$ C_b_prod_stream$ )C_b_prod_stream$ )
(declare-fun sdrop$k (Nat$ C_c_prod_stream$ )C_c_prod_stream$ )
(declare-fun sdrop$l (Nat$ A_b_b_prod_prod_stream$ )A_b_b_prod_prod_stream$ )
(declare-fun shift$a (B_a_prod_list$ B_a_prod_stream$ )B_a_prod_stream$ )
(declare-fun shift$b (A_c_prod_list$ A_c_prod_stream$ )A_c_prod_stream$ )
(declare-fun shift$c (A_b_prod_list$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun shift$d (A_a_prod_list$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun shift$e (A_list$ A_stream$ )A_stream$ )
(declare-fun shift$f (B_list$ B_stream$ )B_stream$ )
(declare-fun shift$g (C_list$ C_stream$ )C_stream$ )
(declare-fun smap2$a (A_a_a_fun_fun$ A_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$b (A_b_a_fun_fun$ A_stream$ B_stream$ )A_stream$ )
(declare-fun smap2$c (A_c_a_fun_fun$ A_stream$ C_stream$ )A_stream$ )
(declare-fun smap2$d (B_a_a_fun_fun$ B_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$e (B_b_a_fun_fun$ B_stream$ B_stream$ )A_stream$ )
(declare-fun smap2$f (C_a_a_fun_fun$ C_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$g (C_b_a_fun_fun$ C_stream$ B_stream$ )A_stream$ )
(declare-fun smap2$h (C_c_a_fun_fun$ C_stream$ C_stream$ )A_stream$ )
(declare-fun smap2$i (A_a_b_fun_fun$ A_stream$ A_stream$ )B_stream$ )
(declare-fun smap2$j (A_a_c_fun_fun$ A_stream$ A_stream$ )C_stream$ )
(declare-fun smap2$k (A_b_b_fun_fun$ A_stream$ B_stream$ )B_stream$ )
(declare-fun smap2$l (A_b_c_fun_fun$ A_stream$ B_stream$ )C_stream$ )
(declare-fun smap2$m (A_c_b_fun_fun$ A_stream$ C_stream$ )B_stream$ )
(declare-fun smap2$n (A_c_c_fun_fun$ A_stream$ C_stream$ )C_stream$ )
(declare-fun smap2$o (B_b_b_fun_fun$ B_stream$ B_stream$ )B_stream$ )
(declare-fun smap2$p (B_b_c_fun_fun$ B_stream$ B_stream$ )C_stream$ )
(declare-fun smap2$q (B_c_b_fun_fun$ B_stream$ C_stream$ )B_stream$ )
(declare-fun smap2$r (B_c_c_fun_fun$ B_stream$ C_stream$ )C_stream$ )
(declare-fun smap2$s (B_a_b_fun_fun$ B_stream$ A_stream$ )B_stream$ )
(declare-fun smap2$t (B_a_c_fun_fun$ B_stream$ A_stream$ )C_stream$ )
(declare-fun smap2$u (C_b_b_fun_fun$ C_stream$ B_stream$ )B_stream$ )
(declare-fun stake$a (Nat$ B_a_prod_stream$ )B_a_prod_list$ )
(declare-fun stake$b (Nat$ A_c_prod_stream$ )A_c_prod_list$ )
(declare-fun stake$c (Nat$ A_b_prod_stream$ )A_b_prod_list$ )
(declare-fun stake$d (Nat$ A_a_prod_stream$ )A_a_prod_list$ )
(declare-fun stake$e (Nat$ A_stream$ )A_list$ )
(declare-fun stake$f (Nat$ B_stream$ )B_list$ )
(declare-fun stake$g (Nat$ C_stream$ )C_list$ )
(declare-fun compow$a (Nat$ )B_a_prod_b_a_prod_fun_b_a_prod_b_a_prod_fun_fun$ )
(declare-fun compow$b (Nat$ )A_c_prod_a_c_prod_fun_a_c_prod_a_c_prod_fun_fun$ )
(declare-fun compow$c (Nat$ )A_b_prod_a_b_prod_fun_a_b_prod_a_b_prod_fun_fun$ )
(declare-fun compow$d (Nat$ )A_a_prod_a_a_prod_fun_a_a_prod_a_a_prod_fun_fun$ )
(declare-fun compow$e (Nat$ )A_a_fun_a_a_fun_fun$ )
(declare-fun compow$f (Nat$ )B_b_fun_b_b_fun_fun$ )
(declare-fun compow$g (Nat$ )C_c_fun_c_c_fun_fun$ )
(declare-fun fun_app$ (C_a_fun$ C$ )A$ )
(declare-fun fun_app$a (B_c_a_fun_fun$ B$ )C_a_fun$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$d (B_a_fun$ B$ )A$ )
(declare-fun fun_app$e (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$f (A_c_a_fun_fun$ A$ )C_a_fun$ )
(declare-fun fun_app$g (B_a_a_fun_fun$ B$ )A_a_fun$ )
(declare-fun fun_app$h (B_b_a_fun_fun$ B$ )B_a_fun$ )
(declare-fun fun_app$i (C_a_a_fun_fun$ C$ )A_a_fun$ )
(declare-fun fun_app$j (C_b_a_fun_fun$ C$ )B_a_fun$ )
(declare-fun fun_app$k (C_c_a_fun_fun$ C$ )C_a_fun$ )
(declare-fun fun_app$l (A_b_fun$ A$ )B$ )
(declare-fun fun_app$m (A_a_b_fun_fun$ A$ )A_b_fun$ )
(declare-fun fun_app$n (A_c_fun$ A$ )C$ )
(declare-fun fun_app$o (A_a_c_fun_fun$ A$ )A_c_fun$ )
(declare-fun fun_app$p (B_b_fun$ B$ )B$ )
(declare-fun fun_app$q (A_b_b_fun_fun$ A$ )B_b_fun$ )
(declare-fun fun_app$r (B_c_fun$ B$ )C$ )
(declare-fun fun_app$s (A_b_c_fun_fun$ A$ )B_c_fun$ )
(declare-fun fun_app$t (C_b_fun$ C$ )B$ )
(declare-fun fun_app$u (A_c_b_fun_fun$ A$ )C_b_fun$ )
(declare-fun fun_app$v (C_c_fun$ C$ )C$ )
(declare-fun fun_app$w (A_c_c_fun_fun$ A$ )C_c_fun$ )
(declare-fun fun_app$x (B_b_b_fun_fun$ B$ )B_b_fun$ )
(declare-fun fun_app$y (B_b_c_fun_fun$ B$ )B_c_fun$ )
(declare-fun fun_app$z (B_c_b_fun_fun$ B$ )C_b_fun$ )
(declare-fun siterate$ (B_b_prod_b_b_prod_fun$ B_b_prod$ )B_b_prod_stream$ )
(declare-fun fun_app$aa (B_c_c_fun_fun$ B$ )C_c_fun$ )
(declare-fun fun_app$ab (B_a_b_fun_fun$ B$ )A_b_fun$ )
(declare-fun fun_app$ac (B_a_c_fun_fun$ B$ )A_c_fun$ )
(declare-fun fun_app$ad (C_b_b_fun_fun$ C$ )B_b_fun$ )
(declare-fun fun_app$ae (B_b_prod_b_b_prod_fun$ B_b_prod$ )B_b_prod$ )
(declare-fun fun_app$af (B_b_prod_b_b_prod_fun_b_b_prod_b_b_prod_fun_fun$ B_b_prod_b_b_prod_fun$ )B_b_prod_b_b_prod_fun$ )
(declare-fun fun_app$ag (B_a_prod_b_a_prod_fun$ B_a_prod$ )B_a_prod$ )
(declare-fun fun_app$ah (B_a_prod_b_a_prod_fun_b_a_prod_b_a_prod_fun_fun$ B_a_prod_b_a_prod_fun$ )B_a_prod_b_a_prod_fun$ )
(declare-fun fun_app$ai (A_c_prod_a_c_prod_fun$ A_c_prod$ )A_c_prod$ )
(declare-fun fun_app$aj (A_c_prod_a_c_prod_fun_a_c_prod_a_c_prod_fun_fun$ A_c_prod_a_c_prod_fun$ )A_c_prod_a_c_prod_fun$ )
(declare-fun fun_app$ak (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod$ )
(declare-fun fun_app$al (A_b_prod_a_b_prod_fun_a_b_prod_a_b_prod_fun_fun$ A_b_prod_a_b_prod_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun fun_app$am (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod$ )
(declare-fun fun_app$an (A_a_prod_a_a_prod_fun_a_a_prod_a_a_prod_fun_fun$ A_a_prod_a_a_prod_fun$ )A_a_prod_a_a_prod_fun$ )
(declare-fun fun_app$ao (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$ap (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun$ )
(declare-fun fun_app$aq (C_c_fun_c_c_fun_fun$ C_c_fun$ )C_c_fun$ )
(declare-fun siterate$a (B_a_prod_b_a_prod_fun$ B_a_prod$ )B_a_prod_stream$ )
(declare-fun siterate$b (A_c_prod_a_c_prod_fun$ A_c_prod$ )A_c_prod_stream$ )
(declare-fun siterate$c (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod_stream$ )
(declare-fun siterate$d (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod_stream$ )
(declare-fun siterate$e (A_a_fun$ A$ )A_stream$ )
(declare-fun siterate$f (B_b_fun$ B$ )B_stream$ )
(declare-fun siterate$g (C_c_fun$ C$ )C_stream$ )
(assert (! (not (= (sdrop$ n$ (smap2$ f$ s1$ s2$ ))(smap2$ f$ (sdrop$a n$ s1$ )(sdrop$b n$ s2$ )))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (sdrop$c ?v0 (szip$ ?v1 ?v2 ))(szip$ (sdrop$ ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (sdrop$d ?v0 (szip$a ?v1 ?v2 ))(szip$a (sdrop$ ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (sdrop$e ?v0 (szip$b ?v1 ?v2 ))(szip$b (sdrop$ ?v0 ?v1 )(sdrop$b ?v0 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (sdrop$f ?v0 (szip$c ?v1 ?v2 ))(szip$c (sdrop$a ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (sdrop$g ?v0 (szip$d ?v1 ?v2 ))(szip$d (sdrop$a ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (sdrop$h ?v0 (szip$e ?v1 ?v2 ))(szip$e (sdrop$a ?v0 ?v1 )(sdrop$b ?v0 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_stream$ )(?v2 A_stream$ ))(= (sdrop$i ?v0 (szip$f ?v1 ?v2 ))(szip$f (sdrop$b ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (sdrop$j ?v0 (szip$g ?v1 ?v2 ))(szip$g (sdrop$b ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (sdrop$k ?v0 (szip$h ?v1 ?v2 ))(szip$h (sdrop$b ?v0 ?v1 )(sdrop$b ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 B_b_prod_stream$ ))(= (sdrop$l ?v0 (szip$i ?v1 ?v2 ))(szip$i (sdrop$ ?v0 ?v1 )(sdrop$g ?v0 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$ ?v0 ?v1 ?v2 )?v3 )(fun_app$ (fun_app$a ?v0 (snth$a ?v1 ?v3 ))(snth$b ?v2 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$a ?v0 ?v1 ?v2 )?v3 )(fun_app$b (fun_app$c ?v0 (snth$ ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$b ?v0 ?v1 ?v2 )?v3 )(fun_app$d (fun_app$e ?v0 (snth$ ?v1 ?v3 ))(snth$a ?v2 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_c_a_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$c ?v0 ?v1 ?v2 )?v3 )(fun_app$ (fun_app$f ?v0 (snth$ ?v1 ?v3 ))(snth$b ?v2 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B_stream$ )(?v2 A_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$d ?v0 ?v1 ?v2 )?v3 )(fun_app$b (fun_app$g ?v0 (snth$a ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$e ?v0 ?v1 ?v2 )?v3 )(fun_app$d (fun_app$h ?v0 (snth$a ?v1 ?v3 ))(snth$a ?v2 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 C_a_a_fun_fun$ )(?v1 C_stream$ )(?v2 A_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$f ?v0 ?v1 ?v2 )?v3 )(fun_app$b (fun_app$i ?v0 (snth$b ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 C_b_a_fun_fun$ )(?v1 C_stream$ )(?v2 B_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$g ?v0 ?v1 ?v2 )?v3 )(fun_app$d (fun_app$j ?v0 (snth$b ?v1 ?v3 ))(snth$a ?v2 ?v3 )))):named a18 ))
(assert (! (forall ((?v0 C_c_a_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ )(?v3 Nat$ ))(= (snth$ (smap2$h ?v0 ?v1 ?v2 )?v3 )(fun_app$ (fun_app$k ?v0 (snth$b ?v1 ?v3 ))(snth$b ?v2 ?v3 )))):named a19 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 Nat$ ))(= (snth$a (smap2$i ?v0 ?v1 ?v2 )?v3 )(fun_app$l (fun_app$m ?v0 (snth$ ?v1 ?v3 ))(snth$ ?v2 ?v3 )))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (sdrop$ ?v0 (smap$ ?v1 ?v2 ))(smap$ ?v1 (sdrop$ ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_fun$ )(?v2 B_stream$ ))(= (sdrop$ ?v0 (smap$a ?v1 ?v2 ))(smap$a ?v1 (sdrop$a ?v0 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_a_fun$ )(?v2 C_stream$ ))(= (sdrop$ ?v0 (smap$b ?v1 ?v2 ))(smap$b ?v1 (sdrop$b ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_fun$ )(?v2 A_stream$ ))(= (sdrop$a ?v0 (smap$c ?v1 ?v2 ))(smap$c ?v1 (sdrop$ ?v0 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_stream$ ))(= (sdrop$a ?v0 (smap$d ?v1 ?v2 ))(smap$d ?v1 (sdrop$a ?v0 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_b_fun$ )(?v2 C_stream$ ))(= (sdrop$a ?v0 (smap$e ?v1 ?v2 ))(smap$e ?v1 (sdrop$b ?v0 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_c_fun$ )(?v2 A_stream$ ))(= (sdrop$b ?v0 (smap$f ?v1 ?v2 ))(smap$f ?v1 (sdrop$ ?v0 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_c_fun$ )(?v2 B_stream$ ))(= (sdrop$b ?v0 (smap$g ?v1 ?v2 ))(smap$g ?v1 (sdrop$a ?v0 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_c_fun$ )(?v2 C_stream$ ))(= (sdrop$b ?v0 (smap$h ?v1 ?v2 ))(smap$h ?v1 (sdrop$b ?v0 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_a_fun$ )(?v2 B_b_prod_stream$ ))(= (sdrop$ ?v0 (smap$i ?v1 ?v2 ))(smap$i ?v1 (sdrop$g ?v0 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 B_b_prod_stream$ ))(= (sdrop$g ?v0 (sdrop$g ?v1 ?v2 ))(sdrop$g (plus$ ?v1 ?v0 )?v2 ))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 B_a_prod_stream$ ))(= (sdrop$f ?v0 (sdrop$f ?v1 ?v2 ))(sdrop$f (plus$ ?v1 ?v0 )?v2 ))):named a32 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_c_prod_stream$ ))(= (sdrop$e ?v0 (sdrop$e ?v1 ?v2 ))(sdrop$e (plus$ ?v1 ?v0 )?v2 ))):named a33 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_b_prod_stream$ ))(= (sdrop$d ?v0 (sdrop$d ?v1 ?v2 ))(sdrop$d (plus$ ?v1 ?v0 )?v2 ))):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_a_prod_stream$ ))(= (sdrop$c ?v0 (sdrop$c ?v1 ?v2 ))(sdrop$c (plus$ ?v1 ?v0 )?v2 ))):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_stream$ ))(= (sdrop$ ?v0 (sdrop$ ?v1 ?v2 ))(sdrop$ (plus$ ?v1 ?v0 )?v2 ))):named a36 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 B_stream$ ))(= (sdrop$a ?v0 (sdrop$a ?v1 ?v2 ))(sdrop$a (plus$ ?v1 ?v0 )?v2 ))):named a37 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 C_stream$ ))(= (sdrop$b ?v0 (sdrop$b ?v1 ?v2 ))(sdrop$b (plus$ ?v1 ?v0 )?v2 ))):named a38 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ )(?v3 A_stream$ ))(= (= (smap2$ ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$ (fun_app$a ?v0 (snth$a ?v1 ?v4 ))(snth$b ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a39 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (= (smap2$a ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$b (fun_app$c ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a40 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 B_stream$ ))(= (= (smap2$i ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$l (fun_app$m ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$a ?v3 ?v4 ))))):named a41 ))
(assert (! (forall ((?v0 A_a_c_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 C_stream$ ))(= (= (smap2$j ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$n (fun_app$o ?v0 (snth$ ?v1 ?v4 ))(snth$ ?v2 ?v4 ))(snth$b ?v3 ?v4 ))))):named a42 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ )(?v3 A_stream$ ))(= (= (smap2$b ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$d (fun_app$e ?v0 (snth$ ?v1 ?v4 ))(snth$a ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a43 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ )(?v3 B_stream$ ))(= (= (smap2$k ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$p (fun_app$q ?v0 (snth$ ?v1 ?v4 ))(snth$a ?v2 ?v4 ))(snth$a ?v3 ?v4 ))))):named a44 ))
(assert (! (forall ((?v0 A_b_c_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ )(?v3 C_stream$ ))(= (= (smap2$l ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$r (fun_app$s ?v0 (snth$ ?v1 ?v4 ))(snth$a ?v2 ?v4 ))(snth$b ?v3 ?v4 ))))):named a45 ))
(assert (! (forall ((?v0 A_c_a_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ )(?v3 A_stream$ ))(= (= (smap2$c ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$ (fun_app$f ?v0 (snth$ ?v1 ?v4 ))(snth$b ?v2 ?v4 ))(snth$ ?v3 ?v4 ))))):named a46 ))
(assert (! (forall ((?v0 A_c_b_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ )(?v3 B_stream$ ))(= (= (smap2$m ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$t (fun_app$u ?v0 (snth$ ?v1 ?v4 ))(snth$b ?v2 ?v4 ))(snth$a ?v3 ?v4 ))))):named a47 ))
(assert (! (forall ((?v0 A_c_c_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ )(?v3 C_stream$ ))(= (= (smap2$n ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$v (fun_app$w ?v0 (snth$ ?v1 ?v4 ))(snth$b ?v2 ?v4 ))(snth$b ?v3 ?v4 ))))):named a48 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (shd$ (smap2$ ?v0 ?v1 ?v2 ))(fun_app$ (fun_app$a ?v0 (shd$a ?v1 ))(shd$b ?v2 )))):named a49 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (shd$ (smap2$a ?v0 ?v1 ?v2 ))(fun_app$b (fun_app$c ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a50 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (shd$ (smap2$b ?v0 ?v1 ?v2 ))(fun_app$d (fun_app$e ?v0 (shd$ ?v1 ))(shd$a ?v2 )))):named a51 ))
(assert (! (forall ((?v0 A_c_a_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (shd$ (smap2$c ?v0 ?v1 ?v2 ))(fun_app$ (fun_app$f ?v0 (shd$ ?v1 ))(shd$b ?v2 )))):named a52 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (shd$ (smap2$d ?v0 ?v1 ?v2 ))(fun_app$b (fun_app$g ?v0 (shd$a ?v1 ))(shd$ ?v2 )))):named a53 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (shd$ (smap2$e ?v0 ?v1 ?v2 ))(fun_app$d (fun_app$h ?v0 (shd$a ?v1 ))(shd$a ?v2 )))):named a54 ))
(assert (! (forall ((?v0 C_a_a_fun_fun$ )(?v1 C_stream$ )(?v2 A_stream$ ))(= (shd$ (smap2$f ?v0 ?v1 ?v2 ))(fun_app$b (fun_app$i ?v0 (shd$b ?v1 ))(shd$ ?v2 )))):named a55 ))
(assert (! (forall ((?v0 C_b_a_fun_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (shd$ (smap2$g ?v0 ?v1 ?v2 ))(fun_app$d (fun_app$j ?v0 (shd$b ?v1 ))(shd$a ?v2 )))):named a56 ))
(assert (! (forall ((?v0 C_c_a_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (shd$ (smap2$h ?v0 ?v1 ?v2 ))(fun_app$ (fun_app$k ?v0 (shd$b ?v1 ))(shd$b ?v2 )))):named a57 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (shd$a (smap2$i ?v0 ?v1 ?v2 ))(fun_app$l (fun_app$m ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a58 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 C$ )(?v4 C_stream$ ))(! (= (smap2$ ?v0 (sCons$a ?v1 ?v2 )(sCons$b ?v3 ?v4 ))(sCons$ (fun_app$ (fun_app$a ?v0 ?v1 )?v3 )(smap2$ ?v0 ?v2 ?v4 ))):pattern ((smap2$ ?v0 (sCons$a ?v1 ?v2 )(sCons$b ?v3 ?v4 ))))):named a59 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 B$ )(?v4 B_stream$ ))(! (= (smap2$o ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$a (fun_app$p (fun_app$x ?v0 ?v1 )?v3 )(smap2$o ?v0 ?v2 ?v4 ))):pattern ((smap2$o ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a60 ))
(assert (! (forall ((?v0 B_b_c_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 B$ )(?v4 B_stream$ ))(! (= (smap2$p ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$b (fun_app$r (fun_app$y ?v0 ?v1 )?v3 )(smap2$p ?v0 ?v2 ?v4 ))):pattern ((smap2$p ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a61 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 B$ )(?v4 B_stream$ ))(! (= (smap2$e ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$ (fun_app$d (fun_app$h ?v0 ?v1 )?v3 )(smap2$e ?v0 ?v2 ?v4 ))):pattern ((smap2$e ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a62 ))
(assert (! (forall ((?v0 B_c_b_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 C$ )(?v4 C_stream$ ))(! (= (smap2$q ?v0 (sCons$a ?v1 ?v2 )(sCons$b ?v3 ?v4 ))(sCons$a (fun_app$t (fun_app$z ?v0 ?v1 )?v3 )(smap2$q ?v0 ?v2 ?v4 ))):pattern ((smap2$q ?v0 (sCons$a ?v1 ?v2 )(sCons$b ?v3 ?v4 ))))):named a63 ))
(assert (! (forall ((?v0 B_c_c_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 C$ )(?v4 C_stream$ ))(! (= (smap2$r ?v0 (sCons$a ?v1 ?v2 )(sCons$b ?v3 ?v4 ))(sCons$b (fun_app$v (fun_app$aa ?v0 ?v1 )?v3 )(smap2$r ?v0 ?v2 ?v4 ))):pattern ((smap2$r ?v0 (sCons$a ?v1 ?v2 )(sCons$b ?v3 ?v4 ))))):named a64 ))
(assert (! (forall ((?v0 B_a_b_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$s ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$a (fun_app$l (fun_app$ab ?v0 ?v1 )?v3 )(smap2$s ?v0 ?v2 ?v4 ))):pattern ((smap2$s ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a65 ))
(assert (! (forall ((?v0 B_a_c_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$t ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$b (fun_app$n (fun_app$ac ?v0 ?v1 )?v3 )(smap2$t ?v0 ?v2 ?v4 ))):pattern ((smap2$t ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a66 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B$ )(?v2 B_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$d ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$ (fun_app$b (fun_app$g ?v0 ?v1 )?v3 )(smap2$d ?v0 ?v2 ?v4 ))):pattern ((smap2$d ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a67 ))
(assert (! (forall ((?v0 C_b_b_fun_fun$ )(?v1 C$ )(?v2 C_stream$ )(?v3 B$ )(?v4 B_stream$ ))(! (= (smap2$u ?v0 (sCons$b ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$a (fun_app$p (fun_app$ad ?v0 ?v1 )?v3 )(smap2$u ?v0 ?v2 ?v4 ))):pattern ((smap2$u ?v0 (sCons$b ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a68 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (stl$ (smap2$ ?v0 ?v1 ?v2 ))(smap2$ ?v0 (stl$a ?v1 )(stl$b ?v2 )))):named a69 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stl$ (smap2$a ?v0 ?v1 ?v2 ))(smap2$a ?v0 (stl$ ?v1 )(stl$ ?v2 )))):named a70 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (stl$ (smap2$b ?v0 ?v1 ?v2 ))(smap2$b ?v0 (stl$ ?v1 )(stl$a ?v2 )))):named a71 ))
(assert (! (forall ((?v0 A_c_a_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (stl$ (smap2$c ?v0 ?v1 ?v2 ))(smap2$c ?v0 (stl$ ?v1 )(stl$b ?v2 )))):named a72 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (stl$ (smap2$d ?v0 ?v1 ?v2 ))(smap2$d ?v0 (stl$a ?v1 )(stl$ ?v2 )))):named a73 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (stl$ (smap2$e ?v0 ?v1 ?v2 ))(smap2$e ?v0 (stl$a ?v1 )(stl$a ?v2 )))):named a74 ))
(assert (! (forall ((?v0 C_a_a_fun_fun$ )(?v1 C_stream$ )(?v2 A_stream$ ))(= (stl$ (smap2$f ?v0 ?v1 ?v2 ))(smap2$f ?v0 (stl$b ?v1 )(stl$ ?v2 )))):named a75 ))
(assert (! (forall ((?v0 C_b_a_fun_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (stl$ (smap2$g ?v0 ?v1 ?v2 ))(smap2$g ?v0 (stl$b ?v1 )(stl$a ?v2 )))):named a76 ))
(assert (! (forall ((?v0 C_c_a_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (stl$ (smap2$h ?v0 ?v1 ?v2 ))(smap2$h ?v0 (stl$b ?v1 )(stl$b ?v2 )))):named a77 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stl$a (smap2$i ?v0 ?v1 ?v2 ))(smap2$i ?v0 (stl$ ?v1 )(stl$ ?v2 )))):named a78 ))
(assert (! (forall ((?v0 B_b_prod_stream$ ))(! (= (sdrop$g zero$ ?v0 )?v0 ):pattern ((sdrop$g zero$ ?v0 )))):named a79 ))
(assert (! (forall ((?v0 B_a_prod_stream$ ))(! (= (sdrop$f zero$ ?v0 )?v0 ):pattern ((sdrop$f zero$ ?v0 )))):named a80 ))
(assert (! (forall ((?v0 A_c_prod_stream$ ))(! (= (sdrop$e zero$ ?v0 )?v0 ):pattern ((sdrop$e zero$ ?v0 )))):named a81 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(! (= (sdrop$d zero$ ?v0 )?v0 ):pattern ((sdrop$d zero$ ?v0 )))):named a82 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(! (= (sdrop$c zero$ ?v0 )?v0 ):pattern ((sdrop$c zero$ ?v0 )))):named a83 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (sdrop$ zero$ ?v0 )?v0 ):pattern ((sdrop$ zero$ ?v0 )))):named a84 ))
(assert (! (forall ((?v0 B_stream$ ))(! (= (sdrop$a zero$ ?v0 )?v0 ):pattern ((sdrop$a zero$ ?v0 )))):named a85 ))
(assert (! (forall ((?v0 C_stream$ ))(! (= (sdrop$b zero$ ?v0 )?v0 ):pattern ((sdrop$b zero$ ?v0 )))):named a86 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_stream$ ))(= (sdrop$g ?v0 (stl$g ?v1 ))(stl$g (sdrop$g ?v0 ?v1 )))):named a87 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_stream$ ))(= (sdrop$f ?v0 (stl$f ?v1 ))(stl$f (sdrop$f ?v0 ?v1 )))):named a88 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_c_prod_stream$ ))(= (sdrop$e ?v0 (stl$e ?v1 ))(stl$e (sdrop$e ?v0 ?v1 )))):named a89 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ ))(= (sdrop$d ?v0 (stl$d ?v1 ))(stl$d (sdrop$d ?v0 ?v1 )))):named a90 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_stream$ ))(= (sdrop$c ?v0 (stl$c ?v1 ))(stl$c (sdrop$c ?v0 ?v1 )))):named a91 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (sdrop$ ?v0 (stl$ ?v1 ))(stl$ (sdrop$ ?v0 ?v1 )))):named a92 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(= (sdrop$a ?v0 (stl$a ?v1 ))(stl$a (sdrop$a ?v0 ?v1 )))):named a93 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_stream$ ))(= (sdrop$b ?v0 (stl$b ?v1 ))(stl$b (sdrop$b ?v0 ?v1 )))):named a94 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_b_b_prod_fun$ )(?v2 B_b_prod$ ))(= (sdrop$g ?v0 (siterate$ ?v1 ?v2 ))(siterate$ ?v1 (fun_app$ae (fun_app$af (compow$ ?v0 )?v1 )?v2 )))):named a95 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_b_a_prod_fun$ )(?v2 B_a_prod$ ))(= (sdrop$f ?v0 (siterate$a ?v1 ?v2 ))(siterate$a ?v1 (fun_app$ag (fun_app$ah (compow$a ?v0 )?v1 )?v2 )))):named a96 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_c_prod_a_c_prod_fun$ )(?v2 A_c_prod$ ))(= (sdrop$e ?v0 (siterate$b ?v1 ?v2 ))(siterate$b ?v1 (fun_app$ai (fun_app$aj (compow$b ?v0 )?v1 )?v2 )))):named a97 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_a_b_prod_fun$ )(?v2 A_b_prod$ ))(= (sdrop$d ?v0 (siterate$c ?v1 ?v2 ))(siterate$c ?v1 (fun_app$ak (fun_app$al (compow$c ?v0 )?v1 )?v2 )))):named a98 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_a_prod_fun$ )(?v2 A_a_prod$ ))(= (sdrop$c ?v0 (siterate$d ?v1 ?v2 ))(siterate$d ?v1 (fun_app$am (fun_app$an (compow$d ?v0 )?v1 )?v2 )))):named a99 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (sdrop$ ?v0 (siterate$e ?v1 ?v2 ))(siterate$e ?v1 (fun_app$b (fun_app$ao (compow$e ?v0 )?v1 )?v2 )))):named a100 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (sdrop$a ?v0 (siterate$f ?v1 ?v2 ))(siterate$f ?v1 (fun_app$p (fun_app$ap (compow$f ?v0 )?v1 )?v2 )))):named a101 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_c_fun$ )(?v2 C$ ))(= (sdrop$b ?v0 (siterate$g ?v1 ?v2 ))(siterate$g ?v1 (fun_app$v (fun_app$aq (compow$g ?v0 )?v1 )?v2 )))):named a102 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_stream$ ))(= (shift$ (stake$ ?v0 ?v1 )(sdrop$g ?v0 ?v1 ))?v1 )):named a103 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_stream$ ))(= (shift$a (stake$a ?v0 ?v1 )(sdrop$f ?v0 ?v1 ))?v1 )):named a104 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_c_prod_stream$ ))(= (shift$b (stake$b ?v0 ?v1 )(sdrop$e ?v0 ?v1 ))?v1 )):named a105 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_stream$ ))(= (shift$c (stake$c ?v0 ?v1 )(sdrop$d ?v0 ?v1 ))?v1 )):named a106 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_stream$ ))(= (shift$d (stake$d ?v0 ?v1 )(sdrop$c ?v0 ?v1 ))?v1 )):named a107 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shift$e (stake$e ?v0 ?v1 )(sdrop$ ?v0 ?v1 ))?v1 )):named a108 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(= (shift$f (stake$f ?v0 ?v1 )(sdrop$a ?v0 ?v1 ))?v1 )):named a109 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_stream$ ))(= (shift$g (stake$g ?v0 ?v1 )(sdrop$b ?v0 ?v1 ))?v1 )):named a110 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a111 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ )(?v2 C$ )(?v3 C_stream$ ))(= (= (sCons$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a112 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a113 ))
(assert (! (forall ((?v0 C_list$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (= (shift$g ?v0 ?v1 )(shift$g ?v0 ?v2 ))(= ?v1 ?v2 ))):named a114 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (= (shift$f ?v0 ?v1 )(shift$f ?v0 ?v2 ))(= ?v1 ?v2 ))):named a115 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (shift$e ?v0 ?v1 )(shift$e ?v0 ?v2 ))(= ?v1 ?v2 ))):named a116 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$ ?v1 )))):named a117 ))
(check-sat )
;(get-unsat-core )
