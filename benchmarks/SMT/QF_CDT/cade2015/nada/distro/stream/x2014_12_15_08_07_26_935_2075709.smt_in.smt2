;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-sort A_list_list$ 0)
(declare-fun nil$a ()A_list_list$)
(declare-fun hd$a (A_list_list$)A_list$)
(declare-fun tl$a (A_list_list$)A_list_list$)
(declare-fun cons$a (A_list$ A_list_list$ )A_list_list$)
(declare-sort A_list_stream$ 0)
(declare-fun shd$a (A_list_stream$)A_list$)
(declare-fun stl$a (A_list_stream$)A_list_stream$)
(declare-fun sCons$a (A_list$ A_list_stream$ )A_list_stream$)
(declare-sort A_list_list_list$ 0)
(declare-fun nil$b ()A_list_list_list$)
(declare-fun hd$b (A_list_list_list$)A_list_list$)
(declare-fun tl$b (A_list_list_list$)A_list_list_list$)
(declare-fun cons$b (A_list_list$ A_list_list_list$ )A_list_list_list$)
(declare-fun n$ ()Nat$ )
(declare-fun u$ ()A_list$ )
(declare-fun div$ (Nat$ Nat$ )Nat$ )
(declare-fun mod$ (Nat$ )Nat_nat_fun$ )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun cycle$ (A_list$ )A_stream$ )
(declare-fun size$a (A_list_list$ )Nat$ )
(declare-fun size$b (A_list_list_list$ )Nat$ )
(declare-fun stake$ (Nat$ A_stream$ )A_list$ )
(declare-fun concat$ (A_list_list$ )A_list$ )
(declare-fun cycle$a (A_list_list$ )A_list_stream$ )
(declare-fun stake$a (Nat$ A_list_stream$ )A_list_list$ )
(declare-fun concat$a (A_list_list_list$ )A_list_list$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun replicate$ (Nat$ A_list$ )A_list_list$ )
(declare-fun replicate$a (Nat$ A_list_list$ )A_list_list_list$ )
(declare-fun replicate$b (Nat$ A$ )A_list$ )
(assert (! (not (= (stake$ n$ (cycle$ u$ ))(concat$ (replicate$ (div$ n$ (size$ u$ ))u$ )))):named a0 ))
(assert (! (not (= u$ nil$ )):named a1 ))
(assert (! (= (fun_app$ (mod$ n$ )(size$ u$ ))zero$ ):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_stream$ ))(= (size$a (stake$a ?v0 ?v1 ))?v0 )):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (size$ (stake$ ?v0 ?v1 ))?v0 )):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_stream$ ))(= (= (stake$a ?v0 ?v1 )nil$a )(= ?v0 zero$ ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (= (stake$ ?v0 ?v1 )nil$ )(= ?v0 zero$ ))):named a6 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (not (= ?v0 nil$a ))(= (stake$a (size$a ?v0 )(cycle$a ?v0 ))?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(=> (not (= ?v0 nil$ ))(= (stake$ (size$ ?v0 )(cycle$ ?v0 ))?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_list_stream$ ))(! (= (stake$a zero$ ?v0 )nil$a ):pattern ((stake$a zero$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (stake$ zero$ ?v0 )nil$ ):pattern ((stake$ zero$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(= (concat$a (replicate$a ?v0 nil$a ))nil$a )):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(= (concat$ (replicate$ ?v0 nil$ ))nil$ )):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_list$ ))(= (= (replicate$a ?v0 ?v1 )nil$b )(= ?v0 zero$ ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(= (= (replicate$b ?v0 ?v1 )nil$ )(= ?v0 zero$ ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (= (replicate$ ?v0 ?v1 )nil$a )(= ?v0 zero$ ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_list$ ))(= (= nil$b (replicate$a ?v0 ?v1 ))(= ?v0 zero$ ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(= (= nil$ (replicate$b ?v0 ?v1 ))(= ?v0 zero$ ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (= nil$a (replicate$ ?v0 ?v1 ))(= ?v0 zero$ ))):named a18 ))
(assert (! (forall ((?v0 A_list_list$ ))(= (= (size$a ?v0 )zero$ )(= ?v0 nil$a ))):named a19 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (size$ ?v0 )zero$ )(= ?v0 nil$ ))):named a20 ))
(assert (! (= (size$a nil$a )zero$ ):named a21 ))
(assert (! (= (size$ nil$ )zero$ ):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (div$ (fun_app$ (mod$ ?v0 )?v1 )?v1 )zero$ )):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_list$ ))(= (size$b (replicate$a ?v0 ?v1 ))?v0 )):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (size$a (replicate$ ?v0 ?v1 ))?v0 )):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(= (size$ (replicate$b ?v0 ?v1 ))?v0 )):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_list$ )(?v2 Nat$ )(?v3 A_list_list$ ))(= (= (replicate$a ?v0 ?v1 )(replicate$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(=> (not (= ?v0 zero$ ))(= ?v1 ?v3 ))))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (replicate$b ?v0 ?v1 )(replicate$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(=> (not (= ?v0 zero$ ))(= ?v1 ?v3 ))))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ )(?v2 Nat$ )(?v3 A_list$ ))(= (= (replicate$ ?v0 ?v1 )(replicate$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(=> (not (= ?v0 zero$ ))(= ?v1 ?v3 ))))):named a29 ))
(assert (! (forall ((?v0 Nat$ ))(= (div$ ?v0 zero$ )zero$ )):named a30 ))
(assert (! (forall ((?v0 Nat$ ))(= (div$ zero$ ?v0 )zero$ )):named a31 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (mod$ ?v0 )zero$ )?v0 )):named a32 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (mod$ ?v0 )?v0 )zero$ ):pattern ((mod$ ?v0 )))):named a33 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$ (mod$ (fun_app$ (mod$ ?v0 )?v1 ))?v1 )(fun_app$ (mod$ ?v0 )?v1 ))):named a34 ))
(check-sat )
;(get-unsat-core )
