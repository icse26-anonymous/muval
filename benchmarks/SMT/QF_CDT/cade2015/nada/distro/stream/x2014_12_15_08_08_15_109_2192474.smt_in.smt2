;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_list_set$ 0 )
(declare-sort A_a_set_fun$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort A_list_list_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_a_list_set_fun$ 0 )
(declare-sort A_list_a_set_fun$ 0 )
(declare-sort A_a_a_set_fun_fun$ 0 )
(declare-sort A_list_list_list_set$ 0 )
(declare-sort A_a_list_bool_fun_fun$ 0 )
(declare-sort A_a_list_list_set_fun$ 0 )
(declare-sort A_list_a_bool_fun_fun$ 0 )
(declare-sort A_list_a_list_set_fun$ 0 )
(declare-sort A_list_list_a_set_fun$ 0 )
(declare-sort A_a_a_bool_fun_fun_fun$ 0 )
(declare-sort A_a_a_list_set_fun_fun$ 0 )
(declare-sort A_a_list_a_set_fun_fun$ 0 )
(declare-sort A_list_a_a_set_fun_fun$ 0 )
(declare-sort A_list_a_list_bool_fun_fun$ 0 )
(declare-sort A_list_list_a_list_set_fun$ 0 )
(declare-sort A_a_list_a_list_set_fun_fun$ 0 )
(declare-sort A_a_set_fun_a_a_set_fun_fun$ 0 )
(declare-sort A_list_a_a_list_set_fun_fun$ 0 )
(declare-sort A_list_a_list_a_set_fun_fun$ 0 )
(declare-sort A_a_bool_fun_fun_a_bool_fun_fun$ 0 )
(declare-sort A_list_list_a_list_bool_fun_fun$ 0 )
(declare-sort A_a_set_fun_a_list_a_set_fun_fun$ 0 )
(declare-sort A_list_a_list_a_bool_fun_fun_fun$ 0 )
(declare-sort A_list_a_list_a_list_set_fun_fun$ 0 )
(declare-sort A_list_a_set_fun_a_a_set_fun_fun$ 0 )
(declare-sort A_a_a_set_fun_fun_a_a_set_fun_fun$ 0 )
(declare-sort A_list_a_bool_fun_fun_a_bool_fun_fun$ 0 )
(declare-sort A_list_list_list_a_list_list_set_fun$ 0 )
(declare-sort A_a_list_set_fun_a_a_list_set_fun_fun$ 0 )
(declare-sort A_list_a_set_fun_a_list_a_set_fun_fun$ 0 )
(declare-sort A_a_list_a_set_fun_fun_a_a_set_fun_fun$ 0 )
(declare-sort A_list_a_a_set_fun_fun_a_a_set_fun_fun$ 0 )
(declare-sort A_a_list_bool_fun_fun_a_list_bool_fun_fun$ 0 )
(declare-sort A_a_list_set_fun_a_list_a_list_set_fun_fun$ 0 )
(declare-sort A_list_a_list_set_fun_a_a_list_set_fun_fun$ 0 )
(declare-sort A_list_a_set_fun_a_list_list_a_set_fun_fun$ 0 )
(declare-sort A_a_a_bool_fun_fun_fun_a_a_bool_fun_fun_fun$ 0 )
(declare-sort A_a_a_list_set_fun_fun_a_a_list_set_fun_fun$ 0 )
(declare-sort A_a_list_a_set_fun_fun_a_list_a_set_fun_fun$ 0 )
(declare-sort A_list_a_a_set_fun_fun_a_list_a_set_fun_fun$ 0 )
(declare-sort A_list_a_list_bool_fun_fun_a_list_bool_fun_fun$ 0 )
(declare-sort A_a_list_set_fun_a_list_list_a_list_set_fun_fun$ 0 )
(declare-sort A_list_a_list_set_fun_a_list_a_list_set_fun_fun$ 0 )
(declare-sort A_list_list_a_list_set_fun_a_a_list_set_fun_fun$ 0 )
(declare-sort A_list_a_a_list_set_fun_fun_a_a_list_set_fun_fun$ 0 )
(declare-sort A_list_a_list_a_set_fun_fun_a_list_a_set_fun_fun$ 0 )
(declare-sort A_list_list_a_list_bool_fun_fun_a_list_bool_fun_fun$ 0 )
(declare-sort A_list_a_a_list_set_fun_fun_a_list_a_list_set_fun_fun$ 0 )
(declare-sort A_list_a_list_a_bool_fun_fun_fun_a_list_a_bool_fun_fun_fun$ 0 )
(declare-sort A_list_a_list_a_list_set_fun_fun_a_list_a_list_set_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-sort A_list_stream$ 0)
(declare-fun shd$a (A_list_stream$)A_list$)
(declare-fun stl$a (A_list_stream$)A_list_stream$)
(declare-fun sCons$a (A_list$ A_list_stream$ )A_list_stream$)
(declare-sort A_list_list$ 0)
(declare-sort A_list_list_list$ 0)
(declare-sort A_list_list_list_list$ 0)
(declare-fun nil$a ()A_list_list$)
(declare-fun hd$a (A_list_list$)A_list$)
(declare-fun tl$a (A_list_list$)A_list_list$)
(declare-fun cons$a (A_list$ A_list_list$ )A_list_list$)
(declare-fun nil$b ()A_list_list_list$)
(declare-fun hd$b (A_list_list_list$)A_list_list$)
(declare-fun tl$b (A_list_list_list$)A_list_list_list$)
(declare-fun cons$b (A_list_list$ A_list_list_list$ )A_list_list_list$)
(declare-fun nil$c ()A_list_list_list_list$)
(declare-fun hd$c (A_list_list_list_list$)A_list_list_list$)
(declare-fun tl$c (A_list_list_list_list$)A_list_list_list_list$)
(declare-fun cons$c (A_list_list_list$ A_list_list_list_list$ )A_list_list_list_list$)
(declare-fun s$ ()A_list_stream$ )
(declare-fun uu$ (A_a_bool_fun_fun$ )A_a_bool_fun_fun$ )
(declare-fun set$ ()A_list_a_set_fun$ )
(declare-fun uua$ (A_list_a_list_bool_fun_fun$ )A_list_a_list_bool_fun_fun$ )
(declare-fun uub$ (A_list_a_bool_fun_fun$ )A_a_list_bool_fun_fun$ )
(declare-fun uuc$ (A_list_a_set_fun$ )A_a_set_fun_a_list_a_set_fun_fun$ )
(declare-fun uud$ (A_list_a_list_set_fun$ )A_list_a_set_fun_a_list_a_set_fun_fun$ )
(declare-fun uue$ (A_a_set_fun$ )A_a_set_fun_a_a_set_fun_fun$ )
(declare-fun uuf$ (A_a_list_set_fun$ )A_list_a_set_fun_a_a_set_fun_fun$ )
(declare-fun uug$ (A_list_a_set_fun$ )A_a_list_set_fun_a_list_a_list_set_fun_fun$ )
(declare-fun uuh$ (A_list_a_list_set_fun$ )A_list_a_list_set_fun_a_list_a_list_set_fun_fun$ )
(declare-fun uui$ (A_a_set_fun$ )A_a_list_set_fun_a_a_list_set_fun_fun$ )
(declare-fun uuj$ (A_a_list_set_fun$ )A_list_a_list_set_fun_a_a_list_set_fun_fun$ )
(declare-fun uuk$ (A_list_list_a_list_set_fun$ )A_list_a_set_fun_a_list_list_a_set_fun_fun$ )
(declare-fun uul$ (A_list_list_a_set_fun$ )A_a_list_set_fun_a_list_list_a_list_set_fun_fun$ )
(declare-fun uum$ (A_a_list_list_set_fun$ )A_list_list_a_list_set_fun_a_a_list_set_fun_fun$ )
(declare-fun uun$ (A_list_set$ )A_list_a_list_a_set_fun_fun_a_list_a_set_fun_fun$ )
(declare-fun uuo$ (A_list_a_list_a_set_fun_fun$ )A_list_a_list_a_set_fun_fun$ )
(declare-fun uup$ (A_list_set$ )A_list_a_list_a_set_fun_fun_a_list_a_set_fun_fun$ )
(declare-fun uuq$ (A_set$ )A_a_a_set_fun_fun_a_a_set_fun_fun$ )
(declare-fun uur$ (A_a_a_set_fun_fun$ )A_a_a_set_fun_fun$ )
(declare-fun uus$ (A_set$ )A_a_a_set_fun_fun_a_a_set_fun_fun$ )
(declare-fun uut$ (A_set$ )A_list_a_a_set_fun_fun_a_list_a_set_fun_fun$ )
(declare-fun uuu$ (A_list_a_a_set_fun_fun$ )A_a_list_a_set_fun_fun$ )
(declare-fun uuv$ (A_list_set$ )A_list_a_a_set_fun_fun_a_a_set_fun_fun$ )
(declare-fun uuw$ (A_list_set$ )A_a_list_a_set_fun_fun_a_a_set_fun_fun$ )
(declare-fun uux$ (A_a_list_a_set_fun_fun$ )A_list_a_a_set_fun_fun$ )
(declare-fun uuy$ (A_set$ )A_a_list_a_set_fun_fun_a_list_a_set_fun_fun$ )
(declare-fun uuz$ (A_list_set$ )A_list_a_list_a_list_set_fun_fun_a_list_a_list_set_fun_fun$ )
(declare-fun uva$ (A_list_a_list_a_list_set_fun_fun$ )A_list_a_list_a_list_set_fun_fun$ )
(declare-fun uvb$ (A_list_set$ )A_list_a_list_a_list_set_fun_fun_a_list_a_list_set_fun_fun$ )
(declare-fun uvc$ (A_list_set$ )A_list_a_list_a_bool_fun_fun_fun_a_list_a_bool_fun_fun_fun$ )
(declare-fun uvd$ (A_list_a_list_a_bool_fun_fun_fun$ )A_list_a_list_a_bool_fun_fun_fun$ )
(declare-fun uve$ (A_list_set$ )A_list_a_list_a_bool_fun_fun_fun_a_list_a_bool_fun_fun_fun$ )
(declare-fun uvf$ (A_set$ )A_a_a_list_set_fun_fun_a_a_list_set_fun_fun$ )
(declare-fun uvg$ (A_a_a_list_set_fun_fun$ )A_a_a_list_set_fun_fun$ )
(declare-fun uvh$ (A_set$ )A_a_a_list_set_fun_fun_a_a_list_set_fun_fun$ )
(declare-fun uvi$ (A_list_set$ )A_list_a_list_bool_fun_fun_a_list_bool_fun_fun$ )
(declare-fun uvj$ (A_list_set$ )A_list_a_list_bool_fun_fun_a_list_bool_fun_fun$ )
(declare-fun uvk$ (A_set$ )A_a_a_bool_fun_fun_fun_a_a_bool_fun_fun_fun$ )
(declare-fun uvl$ (A_a_a_bool_fun_fun_fun$ )A_a_a_bool_fun_fun_fun$ )
(declare-fun uvm$ (A_set$ )A_a_a_bool_fun_fun_fun_a_a_bool_fun_fun_fun$ )
(declare-fun uvn$ (A_set$ )A_list_a_a_list_set_fun_fun_a_list_a_list_set_fun_fun$ )
(declare-fun uvo$ (A_list_a_a_list_set_fun_fun$ )A_a_list_a_list_set_fun_fun$ )
(declare-fun uvp$ (A_list_set$ )A_list_a_a_list_set_fun_fun_a_a_list_set_fun_fun$ )
(declare-fun uvq$ (A_a_list_set_fun$ )A_a_list_bool_fun_fun$ )
(declare-fun uvr$ (A_list_list_a_list_set_fun$ )A_list_list_a_list_bool_fun_fun$ )
(declare-fun uvs$ (A_list_a_list_set_fun$ )A_list_a_list_bool_fun_fun$ )
(declare-fun uvt$ (A_a_set_fun$ )A_a_bool_fun_fun$ )
(declare-fun uvu$ (A_list_a_set_fun$ )A_list_a_bool_fun_fun$ )
(declare-fun flat$ (A_list_stream$ )A_stream$ )
(declare-fun set$a ()A_list_list_list_a_list_list_set_fun$ )
(declare-fun set$b (A_list_list_list_list$ )A_list_list_list_set$ )
(declare-fun set$c ()A_list_list_a_list_set_fun$ )
(declare-fun sset$ (A_stream$ )A_set$ )
(declare-fun sset$a (A_list_stream$ )A_list_set$ )
(declare-fun concat$ (A_list_list_list_list$ )A_list_list_list$ )
(declare-fun member$ (A_list$ A_list_set$ )Bool )
(declare-fun concat$a (A_list_list_list$ )A_list_list$ )
(declare-fun concat$b (A_list_list$ )A_list$ )
(declare-fun fun_app$ (A_list_bool_fun$ A_list$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun member$b (A_list_list$ A_list_list_set$ )Bool )
(declare-fun smember$ (A$ A_stream$ )Bool )
(declare-fun fun_app$a (A_list_a_list_bool_fun_fun$ A_list$ )A_list_bool_fun$ )
(declare-fun fun_app$b (A_list_a_list_set_fun$ A_list$ )A_list_set$ )
(declare-fun fun_app$c (A_list_a_list_a_list_set_fun_fun$ A_list$ )A_list_a_list_set_fun$ )
(declare-fun fun_app$d (A_list_a_set_fun$ A_list$ )A_set$ )
(declare-fun fun_app$e (A_list_a_list_a_set_fun_fun$ A_list$ )A_list_a_set_fun$ )
(declare-fun fun_app$f (A_list_a_bool_fun_fun$ A_list$ )A_bool_fun$ )
(declare-fun fun_app$g (A_list_a_list_a_bool_fun_fun_fun$ A_list$ )A_list_a_bool_fun_fun$ )
(declare-fun fun_app$h (A_a_list_bool_fun_fun$ A$ )A_list_bool_fun$ )
(declare-fun fun_app$i (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$j (A_a_list_a_list_set_fun_fun$ A$ )A_list_a_list_set_fun$ )
(declare-fun fun_app$k (A_a_list_set_fun$ A$ )A_list_set$ )
(declare-fun fun_app$l (A_list_a_a_list_set_fun_fun$ A_list$ )A_a_list_set_fun$ )
(declare-fun fun_app$m (A_a_list_a_set_fun_fun$ A$ )A_list_a_set_fun$ )
(declare-fun fun_app$n (A_a_set_fun$ A$ )A_set$ )
(declare-fun fun_app$o (A_list_a_a_set_fun_fun$ A_list$ )A_a_set_fun$ )
(declare-fun fun_app$p (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$q (A_a_a_list_set_fun_fun$ A$ )A_a_list_set_fun$ )
(declare-fun fun_app$r (A_a_a_set_fun_fun$ A$ )A_a_set_fun$ )
(declare-fun fun_app$s (A_a_a_bool_fun_fun_fun$ A$ )A_a_bool_fun_fun$ )
(declare-fun fun_app$t (A_list_list_a_set_fun$ A_list_list$ )A_set$ )
(declare-fun fun_app$u (A_list_a_set_fun_a_list_list_a_set_fun_fun$ A_list_a_set_fun$ )A_list_list_a_set_fun$ )
(declare-fun fun_app$v (A_list_list_a_list_set_fun$ A_list_list$ )A_list_set$ )
(declare-fun fun_app$w (A_a_list_set_fun_a_list_list_a_list_set_fun_fun$ A_a_list_set_fun$ )A_list_list_a_list_set_fun$ )
(declare-fun fun_app$x (A_list_a_list_set_fun_a_list_a_list_set_fun_fun$ A_list_a_list_set_fun$ )A_list_a_list_set_fun$ )
(declare-fun fun_app$y (A_list_a_set_fun_a_list_a_set_fun_fun$ A_list_a_set_fun$ )A_list_a_set_fun$ )
(declare-fun fun_app$z (A_a_list_set_fun_a_list_a_list_set_fun_fun$ A_a_list_set_fun$ )A_list_a_list_set_fun$ )
(declare-fun smember$a (A_list$ A_list_stream$ )Bool )
(declare-fun supremum$ (A_list_set$ A_list_a_set_fun$ )A_set$ )
(declare-fun fun_app$aa (A_a_set_fun_a_list_a_set_fun_fun$ A_a_set_fun$ )A_list_a_set_fun$ )
(declare-fun fun_app$ab (A_list_list_a_list_set_fun_a_a_list_set_fun_fun$ A_list_list_a_list_set_fun$ )A_a_list_set_fun$ )
(declare-fun fun_app$ac (A_a_list_list_set_fun$ A$ )A_list_list_set$ )
(declare-fun fun_app$ad (A_list_a_list_set_fun_a_a_list_set_fun_fun$ A_list_a_list_set_fun$ )A_a_list_set_fun$ )
(declare-fun fun_app$ae (A_list_a_set_fun_a_a_set_fun_fun$ A_list_a_set_fun$ )A_a_set_fun$ )
(declare-fun fun_app$af (A_a_list_set_fun_a_a_list_set_fun_fun$ A_a_list_set_fun$ )A_a_list_set_fun$ )
(declare-fun fun_app$ag (A_a_set_fun_a_a_set_fun_fun$ A_a_set_fun$ )A_a_set_fun$ )
(declare-fun fun_app$ah (A_list_a_a_list_set_fun_fun_a_a_list_set_fun_fun$ A_list_a_a_list_set_fun_fun$ )A_a_list_set_fun$ )
(declare-fun fun_app$ai (A_a_a_bool_fun_fun_fun_a_a_bool_fun_fun_fun$ A_a_a_bool_fun_fun_fun$ )A_a_bool_fun_fun$ )
(declare-fun fun_app$aj (A_a_bool_fun_fun_a_bool_fun_fun$ A_a_bool_fun_fun$ )A_bool_fun$ )
(declare-fun fun_app$ak (A_a_a_list_set_fun_fun_a_a_list_set_fun_fun$ A_a_a_list_set_fun_fun$ )A_a_list_set_fun$ )
(declare-fun fun_app$al (A_list_a_list_a_bool_fun_fun_fun_a_list_a_bool_fun_fun_fun$ A_list_a_list_a_bool_fun_fun_fun$ )A_list_a_bool_fun_fun$ )
(declare-fun fun_app$am (A_list_a_bool_fun_fun_a_bool_fun_fun$ A_list_a_bool_fun_fun$ )A_bool_fun$ )
(declare-fun fun_app$an (A_list_a_list_a_list_set_fun_fun_a_list_a_list_set_fun_fun$ A_list_a_list_a_list_set_fun_fun$ )A_list_a_list_set_fun$ )
(declare-fun fun_app$ao (A_a_list_a_set_fun_fun_a_list_a_set_fun_fun$ A_a_list_a_set_fun_fun$ )A_list_a_set_fun$ )
(declare-fun fun_app$ap (A_list_a_a_set_fun_fun_a_a_set_fun_fun$ A_list_a_a_set_fun_fun$ )A_a_set_fun$ )
(declare-fun fun_app$aq (A_a_a_set_fun_fun_a_a_set_fun_fun$ A_a_a_set_fun_fun$ )A_a_set_fun$ )
(declare-fun fun_app$ar (A_list_a_list_a_set_fun_fun_a_list_a_set_fun_fun$ A_list_a_list_a_set_fun_fun$ )A_list_a_set_fun$ )
(declare-fun fun_app$as (A_list_a_list_bool_fun_fun_a_list_bool_fun_fun$ A_list_a_list_bool_fun_fun$ )A_list_bool_fun$ )
(declare-fun fun_app$at (A_a_list_a_set_fun_fun_a_a_set_fun_fun$ A_a_list_a_set_fun_fun$ )A_a_set_fun$ )
(declare-fun fun_app$au (A_list_a_a_list_set_fun_fun_a_list_a_list_set_fun_fun$ A_list_a_a_list_set_fun_fun$ )A_list_a_list_set_fun$ )
(declare-fun fun_app$av (A_list_a_a_set_fun_fun_a_list_a_set_fun_fun$ A_list_a_a_set_fun_fun$ )A_list_a_set_fun$ )
(declare-fun fun_app$aw (A_list_list_a_list_bool_fun_fun$ A_list_list$ )A_list_bool_fun$ )
(declare-fun fun_app$ax (A_a_list_bool_fun_fun_a_list_bool_fun_fun$ A_a_list_bool_fun_fun$ )A_list_bool_fun$ )
(declare-fun fun_app$ay (A_list_list_a_list_bool_fun_fun_a_list_bool_fun_fun$ A_list_list_a_list_bool_fun_fun$ )A_list_bool_fun$ )
(declare-fun fun_app$az (A_list_list_list_a_list_list_set_fun$ A_list_list_list$ )A_list_list_set$ )
(declare-fun supremum$a (A_set$ A_a_list_set_fun$ )A_list_set$ )
(declare-fun supremum$b (A_list_set$ A_list_a_list_set_fun$ )A_list_set$ )
(declare-fun supremum$c (A_set$ A_a_set_fun$ )A_set$ )
(declare-fun supremum$d (A_list_list_set$ A_list_list_a_list_set_fun$ )A_list_set$ )
(declare-fun supremum$e (A_set$ )A_a_bool_fun_fun_a_bool_fun_fun$ )
(declare-fun supremum$f (A_list_set$ )A_list_a_bool_fun_fun_a_bool_fun_fun$ )
(declare-fun supremum$g (A_list_set$ A_list_bool_fun$ )Bool )
(declare-fun supremum$h (A_set$ A_bool_fun$ )Bool )
(declare-fun supremum$i (A_list_set$ )A_list_a_list_bool_fun_fun_a_list_bool_fun_fun$ )
(declare-fun supremum$j (A_list_list_set$ A_list_list_a_set_fun$ )A_set$ )
(declare-fun supremum$k (A_set$ A_a_list_list_set_fun$ )A_list_list_set$ )
(declare-fun supremum$l (A_set$ )A_a_list_bool_fun_fun_a_list_bool_fun_fun$ )
(declare-fun supremum$m (A_list_list_set$ )A_list_list_a_list_bool_fun_fun_a_list_bool_fun_fun$ )
(declare-fun supremum$n (A_list_list_list_set$ A_list_list_list_a_list_list_set_fun$ )A_list_list_set$ )
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(! (= (fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )))):named a0 ))
(assert (! (forall ((?v0 A_list_a_list_a_list_set_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(! (= (fun_app$b (fun_app$c (uva$ ?v0 )?v1 )?v2 )(fun_app$b (fun_app$c ?v0 ?v2 )?v1 )):pattern ((fun_app$b (fun_app$c (uva$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A_list_a_list_a_set_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(! (= (fun_app$d (fun_app$e (uuo$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$e ?v0 ?v2 )?v1 )):pattern ((fun_app$d (fun_app$e (uuo$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_list_a_list_a_bool_fun_fun_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(! (= (fun_app$f (fun_app$g (uvd$ ?v0 )?v1 )?v2 )(fun_app$f (fun_app$g ?v0 ?v2 )?v1 )):pattern ((fun_app$f (fun_app$g (uvd$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_list_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_list$ ))(! (= (fun_app$ (fun_app$h (uub$ ?v0 )?v1 )?v2 )(fun_app$i (fun_app$f ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$h (uub$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_list_a_a_list_set_fun_fun$ )(?v1 A$ )(?v2 A_list$ ))(! (= (fun_app$b (fun_app$j (uvo$ ?v0 )?v1 )?v2 )(fun_app$k (fun_app$l ?v0 ?v2 )?v1 )):pattern ((fun_app$b (fun_app$j (uvo$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_list_a_a_set_fun_fun$ )(?v1 A$ )(?v2 A_list$ ))(! (= (fun_app$d (fun_app$m (uuu$ ?v0 )?v1 )?v2 )(fun_app$n (fun_app$o ?v0 ?v2 )?v1 )):pattern ((fun_app$d (fun_app$m (uuu$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_a_list_a_set_fun_fun$ )(?v1 A_list$ )(?v2 A$ ))(! (= (fun_app$n (fun_app$o (uux$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$m ?v0 ?v2 )?v1 )):pattern ((fun_app$n (fun_app$o (uux$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ ))(! (= (fun_app$i (fun_app$p (uu$ ?v0 )?v1 )?v2 )(fun_app$i (fun_app$p ?v0 ?v2 )?v1 )):pattern ((fun_app$i (fun_app$p (uu$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_a_a_list_set_fun_fun$ )(?v1 A$ )(?v2 A$ ))(! (= (fun_app$k (fun_app$q (uvg$ ?v0 )?v1 )?v2 )(fun_app$k (fun_app$q ?v0 ?v2 )?v1 )):pattern ((fun_app$k (fun_app$q (uvg$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_a_a_set_fun_fun$ )(?v1 A$ )(?v2 A$ ))(! (= (fun_app$n (fun_app$r (uur$ ?v0 )?v1 )?v2 )(fun_app$n (fun_app$r ?v0 ?v2 )?v1 )):pattern ((fun_app$n (fun_app$r (uur$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_a_a_bool_fun_fun_fun$ )(?v1 A$ )(?v2 A$ ))(! (= (fun_app$p (fun_app$s (uvl$ ?v0 )?v1 )?v2 )(fun_app$p (fun_app$s ?v0 ?v2 )?v1 )):pattern ((fun_app$p (fun_app$s (uvl$ ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_list_list_a_list_set_fun$ )(?v1 A_list_a_set_fun$ )(?v2 A_list_list$ ))(! (= (fun_app$t (fun_app$u (uuk$ ?v0 )?v1 )?v2 )(supremum$ (fun_app$v ?v0 ?v2 )?v1 )):pattern ((fun_app$t (fun_app$u (uuk$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_list_list_a_set_fun$ )(?v1 A_a_list_set_fun$ )(?v2 A_list_list$ ))(! (= (fun_app$v (fun_app$w (uul$ ?v0 )?v1 )?v2 )(supremum$a (fun_app$t ?v0 ?v2 )?v1 )):pattern ((fun_app$v (fun_app$w (uul$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_list_a_list_set_fun$ )(?v1 A_list_a_list_set_fun$ )(?v2 A_list$ ))(! (= (fun_app$b (fun_app$x (uuh$ ?v0 )?v1 )?v2 )(supremum$b (fun_app$b ?v0 ?v2 )?v1 )):pattern ((fun_app$b (fun_app$x (uuh$ ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_list_a_list_set_fun$ )(?v1 A_list_a_set_fun$ )(?v2 A_list$ ))(! (= (fun_app$d (fun_app$y (uud$ ?v0 )?v1 )?v2 )(supremum$ (fun_app$b ?v0 ?v2 )?v1 )):pattern ((fun_app$d (fun_app$y (uud$ ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_list_a_set_fun$ )(?v1 A_a_list_set_fun$ )(?v2 A_list$ ))(! (= (fun_app$b (fun_app$z (uug$ ?v0 )?v1 )?v2 )(supremum$a (fun_app$d ?v0 ?v2 )?v1 )):pattern ((fun_app$b (fun_app$z (uug$ ?v0 )?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_list_a_set_fun$ )(?v1 A_a_set_fun$ )(?v2 A_list$ ))(! (= (fun_app$d (fun_app$aa (uuc$ ?v0 )?v1 )?v2 )(supremum$c (fun_app$d ?v0 ?v2 )?v1 )):pattern ((fun_app$d (fun_app$aa (uuc$ ?v0 )?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_a_list_list_set_fun$ )(?v1 A_list_list_a_list_set_fun$ )(?v2 A$ ))(! (= (fun_app$k (fun_app$ab (uum$ ?v0 )?v1 )?v2 )(supremum$d (fun_app$ac ?v0 ?v2 )?v1 )):pattern ((fun_app$k (fun_app$ab (uum$ ?v0 )?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_a_list_set_fun$ )(?v1 A_list_a_list_set_fun$ )(?v2 A$ ))(! (= (fun_app$k (fun_app$ad (uuj$ ?v0 )?v1 )?v2 )(supremum$b (fun_app$k ?v0 ?v2 )?v1 )):pattern ((fun_app$k (fun_app$ad (uuj$ ?v0 )?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_a_list_set_fun$ )(?v1 A_list_a_set_fun$ )(?v2 A$ ))(! (= (fun_app$n (fun_app$ae (uuf$ ?v0 )?v1 )?v2 )(supremum$ (fun_app$k ?v0 ?v2 )?v1 )):pattern ((fun_app$n (fun_app$ae (uuf$ ?v0 )?v1 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_a_set_fun$ )(?v1 A_a_list_set_fun$ )(?v2 A$ ))(! (= (fun_app$k (fun_app$af (uui$ ?v0 )?v1 )?v2 )(supremum$a (fun_app$n ?v0 ?v2 )?v1 )):pattern ((fun_app$k (fun_app$af (uui$ ?v0 )?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_a_set_fun$ )(?v1 A_a_set_fun$ )(?v2 A$ ))(! (= (fun_app$n (fun_app$ag (uue$ ?v0 )?v1 )?v2 )(supremum$c (fun_app$n ?v0 ?v2 )?v1 )):pattern ((fun_app$n (fun_app$ag (uue$ ?v0 )?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_a_list_set_fun_fun$ )(?v2 A$ ))(! (= (fun_app$k (fun_app$ah (uvp$ ?v0 )?v1 )?v2 )(supremum$b ?v0 (fun_app$j (uvo$ ?v1 )?v2 ))):pattern ((fun_app$k (fun_app$ah (uvp$ ?v0 )?v1 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_a_bool_fun_fun_fun$ )(?v2 A$ ))(! (= (fun_app$p (fun_app$ai (uvm$ ?v0 )?v1 )?v2 )(fun_app$aj (supremum$e ?v0 )(fun_app$s (uvl$ ?v1 )?v2 ))):pattern ((fun_app$p (fun_app$ai (uvm$ ?v0 )?v1 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_a_list_set_fun_fun$ )(?v2 A$ ))(! (= (fun_app$k (fun_app$ak (uvh$ ?v0 )?v1 )?v2 )(supremum$a ?v0 (fun_app$q (uvg$ ?v1 )?v2 ))):pattern ((fun_app$k (fun_app$ak (uvh$ ?v0 )?v1 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_a_bool_fun_fun_fun$ )(?v2 A_list$ ))(! (= (fun_app$f (fun_app$al (uve$ ?v0 )?v1 )?v2 )(fun_app$am (supremum$f ?v0 )(fun_app$g (uvd$ ?v1 )?v2 ))):pattern ((fun_app$f (fun_app$al (uve$ ?v0 )?v1 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_a_list_set_fun_fun$ )(?v2 A_list$ ))(! (= (fun_app$b (fun_app$an (uvb$ ?v0 )?v1 )?v2 )(supremum$b ?v0 (fun_app$c (uva$ ?v1 )?v2 ))):pattern ((fun_app$b (fun_app$an (uvb$ ?v0 )?v1 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_list_a_set_fun_fun$ )(?v2 A_list$ ))(! (= (fun_app$d (fun_app$ao (uuy$ ?v0 )?v1 )?v2 )(supremum$c ?v0 (fun_app$o (uux$ ?v1 )?v2 ))):pattern ((fun_app$d (fun_app$ao (uuy$ ?v0 )?v1 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_a_set_fun_fun$ )(?v2 A$ ))(! (= (fun_app$n (fun_app$ap (uuv$ ?v0 )?v1 )?v2 )(supremum$ ?v0 (fun_app$m (uuu$ ?v1 )?v2 ))):pattern ((fun_app$n (fun_app$ap (uuv$ ?v0 )?v1 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_a_set_fun_fun$ )(?v2 A$ ))(! (= (fun_app$n (fun_app$aq (uus$ ?v0 )?v1 )?v2 )(supremum$c ?v0 (fun_app$r (uur$ ?v1 )?v2 ))):pattern ((fun_app$n (fun_app$aq (uus$ ?v0 )?v1 )?v2 )))):named a30 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_a_set_fun_fun$ )(?v2 A_list$ ))(! (= (fun_app$d (fun_app$ar (uup$ ?v0 )?v1 )?v2 )(supremum$ ?v0 (fun_app$e (uuo$ ?v1 )?v2 ))):pattern ((fun_app$d (fun_app$ar (uup$ ?v0 )?v1 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_bool_fun_fun$ )(?v2 A_list$ ))(! (= (fun_app$ (fun_app$as (uvj$ ?v0 )?v1 )?v2 )(supremum$g ?v0 (fun_app$a (uua$ ?v1 )?v2 ))):pattern ((fun_app$ (fun_app$as (uvj$ ?v0 )?v1 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_bool_fun_fun$ )(?v2 A_list$ ))(! (= (fun_app$ (fun_app$as (uvi$ ?v0 )?v1 )?v2 )(supremum$g ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$as (uvi$ ?v0 )?v1 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_a_list_set_fun_fun$ )(?v2 A_list$ ))(! (= (fun_app$b (fun_app$an (uuz$ ?v0 )?v1 )?v2 )(supremum$b ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$an (uuz$ ?v0 )?v1 )?v2 )))):named a34 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_a_set_fun_fun$ )(?v2 A_list$ ))(! (= (fun_app$d (fun_app$ar (uun$ ?v0 )?v1 )?v2 )(supremum$ ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$ar (uun$ ?v0 )?v1 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_a_bool_fun_fun_fun$ )(?v2 A_list$ ))(! (= (fun_app$f (fun_app$al (uvc$ ?v0 )?v1 )?v2 )(fun_app$am (supremum$f ?v0 )(fun_app$g ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$al (uvc$ ?v0 )?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_a_list_a_set_fun_fun$ )(?v2 A$ ))(! (= (fun_app$n (fun_app$at (uuw$ ?v0 )?v1 )?v2 )(supremum$ ?v0 (fun_app$m ?v1 ?v2 ))):pattern ((fun_app$n (fun_app$at (uuw$ ?v0 )?v1 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_list_a_a_list_set_fun_fun$ )(?v2 A_list$ ))(! (= (fun_app$b (fun_app$au (uvn$ ?v0 )?v1 )?v2 )(supremum$a ?v0 (fun_app$l ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$au (uvn$ ?v0 )?v1 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_list_a_a_set_fun_fun$ )(?v2 A_list$ ))(! (= (fun_app$d (fun_app$av (uut$ ?v0 )?v1 )?v2 )(supremum$c ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$av (uut$ ?v0 )?v1 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_a_list_set_fun_fun$ )(?v2 A$ ))(! (= (fun_app$k (fun_app$ak (uvf$ ?v0 )?v1 )?v2 )(supremum$a ?v0 (fun_app$q ?v1 ?v2 ))):pattern ((fun_app$k (fun_app$ak (uvf$ ?v0 )?v1 )?v2 )))):named a40 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_a_set_fun_fun$ )(?v2 A$ ))(! (= (fun_app$n (fun_app$aq (uuq$ ?v0 )?v1 )?v2 )(supremum$c ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$n (fun_app$aq (uuq$ ?v0 )?v1 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_a_bool_fun_fun_fun$ )(?v2 A$ ))(! (= (fun_app$p (fun_app$ai (uvk$ ?v0 )?v1 )?v2 )(fun_app$aj (supremum$e ?v0 )(fun_app$s ?v1 ?v2 ))):pattern ((fun_app$p (fun_app$ai (uvk$ ?v0 )?v1 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 A_list_list_a_list_set_fun$ )(?v1 A_list_list$ )(?v2 A_list$ ))(! (= (fun_app$ (fun_app$aw (uvr$ ?v0 )?v1 )?v2 )(member$ ?v2 (fun_app$v ?v0 ?v1 ))):pattern ((fun_app$ (fun_app$aw (uvr$ ?v0 )?v1 )?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_list_a_list_set_fun$ )(?v1 A_list$ )(?v2 A_list$ ))(! (= (fun_app$ (fun_app$a (uvs$ ?v0 )?v1 )?v2 )(member$ ?v2 (fun_app$b ?v0 ?v1 ))):pattern ((fun_app$ (fun_app$a (uvs$ ?v0 )?v1 )?v2 )))):named a44 ))
(assert (! (forall ((?v0 A_list_a_set_fun$ )(?v1 A_list$ )(?v2 A$ ))(! (= (fun_app$i (fun_app$f (uvu$ ?v0 )?v1 )?v2 )(member$a ?v2 (fun_app$d ?v0 ?v1 ))):pattern ((fun_app$i (fun_app$f (uvu$ ?v0 )?v1 )?v2 )))):named a45 ))
(assert (! (forall ((?v0 A_a_list_set_fun$ )(?v1 A$ )(?v2 A_list$ ))(! (= (fun_app$ (fun_app$h (uvq$ ?v0 )?v1 )?v2 )(member$ ?v2 (fun_app$k ?v0 ?v1 ))):pattern ((fun_app$ (fun_app$h (uvq$ ?v0 )?v1 )?v2 )))):named a46 ))
(assert (! (forall ((?v0 A_a_set_fun$ )(?v1 A$ )(?v2 A$ ))(! (= (fun_app$i (fun_app$p (uvt$ ?v0 )?v1 )?v2 )(member$a ?v2 (fun_app$n ?v0 ?v1 ))):pattern ((fun_app$i (fun_app$p (uvt$ ?v0 )?v1 )?v2 )))):named a47 ))
(assert (! (not (= (sset$ (flat$ s$ ))(supremum$ (sset$a s$ )set$ ))):named a48 ))
(assert (! (forall ((?v0 A_list$ ))(=> (member$ ?v0 (sset$a s$ ))(not (= ?v0 nil$ )))):named a49 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list_set$ )(?v2 A_list_list_a_list_set_fun$ ))(= (member$ ?v0 (supremum$d ?v1 ?v2 ))(exists ((?v3 A_list_list$ ))(and (member$b ?v3 ?v1 )(member$ ?v0 (fun_app$v ?v2 ?v3 )))))):named a50 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_set$ )(?v2 A_a_list_set_fun$ ))(= (member$ ?v0 (supremum$a ?v1 ?v2 ))(exists ((?v3 A$ ))(and (member$a ?v3 ?v1 )(member$ ?v0 (fun_app$k ?v2 ?v3 )))))):named a51 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_a_set_fun$ ))(= (member$a ?v0 (supremum$c ?v1 ?v2 ))(exists ((?v3 A$ ))(and (member$a ?v3 ?v1 )(member$a ?v0 (fun_app$n ?v2 ?v3 )))))):named a52 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_set$ )(?v2 A_list_a_list_set_fun$ ))(= (member$ ?v0 (supremum$b ?v1 ?v2 ))(exists ((?v3 A_list$ ))(and (member$ ?v3 ?v1 )(member$ ?v0 (fun_app$b ?v2 ?v3 )))))):named a53 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list_set$ )(?v2 A_list_a_set_fun$ ))(= (member$a ?v0 (supremum$ ?v1 ?v2 ))(exists ((?v3 A_list$ ))(and (member$ ?v3 ?v1 )(member$a ?v0 (fun_app$d ?v2 ?v3 )))))):named a54 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_set$ )(?v2 A_list$ )(?v3 A_list_list_a_list_set_fun$ ))(=> (and (member$b ?v0 ?v1 )(member$ ?v2 (fun_app$v ?v3 ?v0 )))(member$ ?v2 (supremum$d ?v1 ?v3 )))):named a55 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_list$ )(?v3 A_a_list_set_fun$ ))(=> (and (member$a ?v0 ?v1 )(member$ ?v2 (fun_app$k ?v3 ?v0 )))(member$ ?v2 (supremum$a ?v1 ?v3 )))):named a56 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A$ )(?v3 A_a_set_fun$ ))(=> (and (member$a ?v0 ?v1 )(member$a ?v2 (fun_app$n ?v3 ?v0 )))(member$a ?v2 (supremum$c ?v1 ?v3 )))):named a57 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_set$ )(?v2 A_list$ )(?v3 A_list_a_list_set_fun$ ))(=> (and (member$ ?v0 ?v1 )(member$ ?v2 (fun_app$b ?v3 ?v0 )))(member$ ?v2 (supremum$b ?v1 ?v3 )))):named a58 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_set$ )(?v2 A$ )(?v3 A_list_a_set_fun$ ))(=> (and (member$ ?v0 ?v1 )(member$a ?v2 (fun_app$d ?v3 ?v0 )))(member$a ?v2 (supremum$ ?v1 ?v3 )))):named a59 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_bool_fun_fun$ )(?v2 A$ ))(= (fun_app$i (fun_app$aj (supremum$e ?v0 )?v1 )?v2 )(supremum$h ?v0 (fun_app$p (uu$ ?v1 )?v2 )))):named a60 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_bool_fun_fun$ )(?v2 A_list$ ))(= (fun_app$ (fun_app$as (supremum$i ?v0 )?v1 )?v2 )(supremum$g ?v0 (fun_app$a (uua$ ?v1 )?v2 )))):named a61 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_bool_fun_fun$ )(?v2 A$ ))(= (fun_app$i (fun_app$am (supremum$f ?v0 )?v1 )?v2 )(supremum$g ?v0 (fun_app$h (uub$ ?v1 )?v2 )))):named a62 ))
(assert (! (forall ((?v0 A_list_list_set$ )(?v1 A_list_list_a_list_set_fun$ )(?v2 A_list_bool_fun$ ))(= (exists ((?v3 A_list$ ))(and (member$ ?v3 (supremum$d ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 A_list_list$ ))(and (member$b ?v3 ?v0 )(exists ((?v4 A_list$ ))(and (member$ ?v4 (fun_app$v ?v1 ?v3 ))(fun_app$ ?v2 ?v4 ))))))):named a63 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_list_set_fun$ )(?v2 A_list_bool_fun$ ))(= (exists ((?v3 A_list$ ))(and (member$ ?v3 (supremum$a ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 A$ ))(and (member$a ?v3 ?v0 )(exists ((?v4 A_list$ ))(and (member$ ?v4 (fun_app$k ?v1 ?v3 ))(fun_app$ ?v2 ?v4 ))))))):named a64 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_set_fun$ )(?v2 A_bool_fun$ ))(= (exists ((?v3 A$ ))(and (member$a ?v3 (supremum$c ?v0 ?v1 ))(fun_app$i ?v2 ?v3 )))(exists ((?v3 A$ ))(and (member$a ?v3 ?v0 )(exists ((?v4 A$ ))(and (member$a ?v4 (fun_app$n ?v1 ?v3 ))(fun_app$i ?v2 ?v4 ))))))):named a65 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_set_fun$ )(?v2 A_list_bool_fun$ ))(= (exists ((?v3 A_list$ ))(and (member$ ?v3 (supremum$b ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 A_list$ ))(and (member$ ?v3 ?v0 )(exists ((?v4 A_list$ ))(and (member$ ?v4 (fun_app$b ?v1 ?v3 ))(fun_app$ ?v2 ?v4 ))))))):named a66 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_set_fun$ )(?v2 A_bool_fun$ ))(= (exists ((?v3 A$ ))(and (member$a ?v3 (supremum$ ?v0 ?v1 ))(fun_app$i ?v2 ?v3 )))(exists ((?v3 A_list$ ))(and (member$ ?v3 ?v0 )(exists ((?v4 A$ ))(and (member$a ?v4 (fun_app$d ?v1 ?v3 ))(fun_app$i ?v2 ?v4 ))))))):named a67 ))
(assert (! (forall ((?v0 A_list_list_set$ )(?v1 A_list_list_a_list_set_fun$ )(?v2 A_list_bool_fun$ ))(= (exists ((?v3 A_list$ ))(and (member$ ?v3 (supremum$d ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 A_list_list$ ))(and (member$b ?v3 ?v0 )(exists ((?v4 A_list$ ))(and (member$ ?v4 (fun_app$v ?v1 ?v3 ))(fun_app$ ?v2 ?v4 ))))))):named a68 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_list_set_fun$ )(?v2 A_list_bool_fun$ ))(= (exists ((?v3 A_list$ ))(and (member$ ?v3 (supremum$a ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 A$ ))(and (member$a ?v3 ?v0 )(exists ((?v4 A_list$ ))(and (member$ ?v4 (fun_app$k ?v1 ?v3 ))(fun_app$ ?v2 ?v4 ))))))):named a69 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_set_fun$ )(?v2 A_bool_fun$ ))(= (exists ((?v3 A$ ))(and (member$a ?v3 (supremum$c ?v0 ?v1 ))(fun_app$i ?v2 ?v3 )))(exists ((?v3 A$ ))(and (member$a ?v3 ?v0 )(exists ((?v4 A$ ))(and (member$a ?v4 (fun_app$n ?v1 ?v3 ))(fun_app$i ?v2 ?v4 ))))))):named a70 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_set_fun$ )(?v2 A_list_bool_fun$ ))(= (exists ((?v3 A_list$ ))(and (member$ ?v3 (supremum$b ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 A_list$ ))(and (member$ ?v3 ?v0 )(exists ((?v4 A_list$ ))(and (member$ ?v4 (fun_app$b ?v1 ?v3 ))(fun_app$ ?v2 ?v4 ))))))):named a71 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_set_fun$ )(?v2 A_bool_fun$ ))(= (exists ((?v3 A$ ))(and (member$a ?v3 (supremum$ ?v0 ?v1 ))(fun_app$i ?v2 ?v3 )))(exists ((?v3 A_list$ ))(and (member$ ?v3 ?v0 )(exists ((?v4 A$ ))(and (member$a ?v4 (fun_app$d ?v1 ?v3 ))(fun_app$i ?v2 ?v4 ))))))):named a72 ))
(assert (! (forall ((?v0 A_list_list_set$ )(?v1 A_list_list_a_list_set_fun$ )(?v2 A_list_bool_fun$ ))(= (forall ((?v3 A_list$ ))(=> (member$ ?v3 (supremum$d ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 A_list_list$ ))(=> (member$b ?v3 ?v0 )(forall ((?v4 A_list$ ))(=> (member$ ?v4 (fun_app$v ?v1 ?v3 ))(fun_app$ ?v2 ?v4 ))))))):named a73 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_list_set_fun$ )(?v2 A_list_bool_fun$ ))(= (forall ((?v3 A_list$ ))(=> (member$ ?v3 (supremum$a ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 A$ ))(=> (member$a ?v3 ?v0 )(forall ((?v4 A_list$ ))(=> (member$ ?v4 (fun_app$k ?v1 ?v3 ))(fun_app$ ?v2 ?v4 ))))))):named a74 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_set_fun$ )(?v2 A_bool_fun$ ))(= (forall ((?v3 A$ ))(=> (member$a ?v3 (supremum$c ?v0 ?v1 ))(fun_app$i ?v2 ?v3 )))(forall ((?v3 A$ ))(=> (member$a ?v3 ?v0 )(forall ((?v4 A$ ))(=> (member$a ?v4 (fun_app$n ?v1 ?v3 ))(fun_app$i ?v2 ?v4 ))))))):named a75 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_set_fun$ )(?v2 A_list_bool_fun$ ))(= (forall ((?v3 A_list$ ))(=> (member$ ?v3 (supremum$b ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 A_list$ ))(=> (member$ ?v3 ?v0 )(forall ((?v4 A_list$ ))(=> (member$ ?v4 (fun_app$b ?v1 ?v3 ))(fun_app$ ?v2 ?v4 ))))))):named a76 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_set_fun$ )(?v2 A_bool_fun$ ))(= (forall ((?v3 A$ ))(=> (member$a ?v3 (supremum$ ?v0 ?v1 ))(fun_app$i ?v2 ?v3 )))(forall ((?v3 A_list$ ))(=> (member$ ?v3 ?v0 )(forall ((?v4 A$ ))(=> (member$a ?v4 (fun_app$d ?v1 ?v3 ))(fun_app$i ?v2 ?v4 ))))))):named a77 ))
(assert (! (forall ((?v0 A_list_list_set$ )(?v1 A_list_list_a_list_set_fun$ )(?v2 A_list_bool_fun$ ))(= (forall ((?v3 A_list$ ))(=> (member$ ?v3 (supremum$d ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 A_list_list$ ))(=> (member$b ?v3 ?v0 )(forall ((?v4 A_list$ ))(=> (member$ ?v4 (fun_app$v ?v1 ?v3 ))(fun_app$ ?v2 ?v4 ))))))):named a78 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_list_set_fun$ )(?v2 A_list_bool_fun$ ))(= (forall ((?v3 A_list$ ))(=> (member$ ?v3 (supremum$a ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 A$ ))(=> (member$a ?v3 ?v0 )(forall ((?v4 A_list$ ))(=> (member$ ?v4 (fun_app$k ?v1 ?v3 ))(fun_app$ ?v2 ?v4 ))))))):named a79 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_set_fun$ )(?v2 A_bool_fun$ ))(= (forall ((?v3 A$ ))(=> (member$a ?v3 (supremum$c ?v0 ?v1 ))(fun_app$i ?v2 ?v3 )))(forall ((?v3 A$ ))(=> (member$a ?v3 ?v0 )(forall ((?v4 A$ ))(=> (member$a ?v4 (fun_app$n ?v1 ?v3 ))(fun_app$i ?v2 ?v4 ))))))):named a80 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_set_fun$ )(?v2 A_list_bool_fun$ ))(= (forall ((?v3 A_list$ ))(=> (member$ ?v3 (supremum$b ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 A_list$ ))(=> (member$ ?v3 ?v0 )(forall ((?v4 A_list$ ))(=> (member$ ?v4 (fun_app$b ?v1 ?v3 ))(fun_app$ ?v2 ?v4 ))))))):named a81 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_set_fun$ )(?v2 A_bool_fun$ ))(= (forall ((?v3 A$ ))(=> (member$a ?v3 (supremum$ ?v0 ?v1 ))(fun_app$i ?v2 ?v3 )))(forall ((?v3 A_list$ ))(=> (member$ ?v3 ?v0 )(forall ((?v4 A$ ))(=> (member$a ?v4 (fun_app$d ?v1 ?v3 ))(fun_app$i ?v2 ?v4 ))))))):named a82 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_set_fun$ )(?v2 A_a_set_fun$ ))(= (supremum$c (supremum$ ?v0 ?v1 )?v2 )(supremum$ ?v0 (fun_app$aa (uuc$ ?v1 )?v2 )))):named a83 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_set_fun$ )(?v2 A_list_a_set_fun$ ))(= (supremum$ (supremum$b ?v0 ?v1 )?v2 )(supremum$ ?v0 (fun_app$y (uud$ ?v1 )?v2 )))):named a84 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_set_fun$ )(?v2 A_a_set_fun$ ))(= (supremum$c (supremum$c ?v0 ?v1 )?v2 )(supremum$c ?v0 (fun_app$ag (uue$ ?v1 )?v2 )))):named a85 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_list_set_fun$ )(?v2 A_list_a_set_fun$ ))(= (supremum$ (supremum$a ?v0 ?v1 )?v2 )(supremum$c ?v0 (fun_app$ae (uuf$ ?v1 )?v2 )))):named a86 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_set_fun$ )(?v2 A_a_list_set_fun$ ))(= (supremum$a (supremum$ ?v0 ?v1 )?v2 )(supremum$b ?v0 (fun_app$z (uug$ ?v1 )?v2 )))):named a87 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_set_fun$ )(?v2 A_list_a_list_set_fun$ ))(= (supremum$b (supremum$b ?v0 ?v1 )?v2 )(supremum$b ?v0 (fun_app$x (uuh$ ?v1 )?v2 )))):named a88 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_set_fun$ )(?v2 A_a_list_set_fun$ ))(= (supremum$a (supremum$c ?v0 ?v1 )?v2 )(supremum$a ?v0 (fun_app$af (uui$ ?v1 )?v2 )))):named a89 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_list_set_fun$ )(?v2 A_list_a_list_set_fun$ ))(= (supremum$b (supremum$a ?v0 ?v1 )?v2 )(supremum$a ?v0 (fun_app$ad (uuj$ ?v1 )?v2 )))):named a90 ))
(assert (! (forall ((?v0 A_list_list_set$ )(?v1 A_list_list_a_list_set_fun$ )(?v2 A_list_a_set_fun$ ))(= (supremum$ (supremum$d ?v0 ?v1 )?v2 )(supremum$j ?v0 (fun_app$u (uuk$ ?v1 )?v2 )))):named a91 ))
(assert (! (forall ((?v0 A_list_list_set$ )(?v1 A_list_list_a_set_fun$ )(?v2 A_a_list_set_fun$ ))(= (supremum$a (supremum$j ?v0 ?v1 )?v2 )(supremum$d ?v0 (fun_app$w (uul$ ?v1 )?v2 )))):named a92 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_set_fun$ )(?v2 A_a_set_fun$ ))(= (supremum$ ?v0 (fun_app$aa (uuc$ ?v1 )?v2 ))(supremum$c (supremum$ ?v0 ?v1 )?v2 ))):named a93 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_set_fun$ )(?v2 A_list_a_set_fun$ ))(= (supremum$ ?v0 (fun_app$y (uud$ ?v1 )?v2 ))(supremum$ (supremum$b ?v0 ?v1 )?v2 ))):named a94 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_set_fun$ )(?v2 A_a_set_fun$ ))(= (supremum$c ?v0 (fun_app$ag (uue$ ?v1 )?v2 ))(supremum$c (supremum$c ?v0 ?v1 )?v2 ))):named a95 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_list_set_fun$ )(?v2 A_list_a_set_fun$ ))(= (supremum$c ?v0 (fun_app$ae (uuf$ ?v1 )?v2 ))(supremum$ (supremum$a ?v0 ?v1 )?v2 ))):named a96 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_set_fun$ )(?v2 A_a_list_set_fun$ ))(= (supremum$b ?v0 (fun_app$z (uug$ ?v1 )?v2 ))(supremum$a (supremum$ ?v0 ?v1 )?v2 ))):named a97 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_set_fun$ )(?v2 A_list_a_list_set_fun$ ))(= (supremum$b ?v0 (fun_app$x (uuh$ ?v1 )?v2 ))(supremum$b (supremum$b ?v0 ?v1 )?v2 ))):named a98 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_set_fun$ )(?v2 A_a_list_set_fun$ ))(= (supremum$a ?v0 (fun_app$af (uui$ ?v1 )?v2 ))(supremum$a (supremum$c ?v0 ?v1 )?v2 ))):named a99 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_list_set_fun$ )(?v2 A_list_a_list_set_fun$ ))(= (supremum$a ?v0 (fun_app$ad (uuj$ ?v1 )?v2 ))(supremum$b (supremum$a ?v0 ?v1 )?v2 ))):named a100 ))
(assert (! (forall ((?v0 A_list_list_set$ )(?v1 A_list_list_a_list_set_fun$ )(?v2 A_list_a_set_fun$ ))(= (supremum$j ?v0 (fun_app$u (uuk$ ?v1 )?v2 ))(supremum$ (supremum$d ?v0 ?v1 )?v2 ))):named a101 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_list_list_set_fun$ )(?v2 A_list_list_a_list_set_fun$ ))(= (supremum$a ?v0 (fun_app$ab (uum$ ?v1 )?v2 ))(supremum$d (supremum$k ?v0 ?v1 )?v2 ))):named a102 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list_set$ )(?v2 A_list_list_a_list_set_fun$ ))(=> (and (member$ ?v0 (supremum$d ?v1 ?v2 ))(forall ((?v3 A_list_list$ ))(=> (and (member$b ?v3 ?v1 )(member$ ?v0 (fun_app$v ?v2 ?v3 )))false )))false )):named a103 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_set$ )(?v2 A_a_list_set_fun$ ))(=> (and (member$ ?v0 (supremum$a ?v1 ?v2 ))(forall ((?v3 A$ ))(=> (and (member$a ?v3 ?v1 )(member$ ?v0 (fun_app$k ?v2 ?v3 )))false )))false )):named a104 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_a_set_fun$ ))(=> (and (member$a ?v0 (supremum$c ?v1 ?v2 ))(forall ((?v3 A$ ))(=> (and (member$a ?v3 ?v1 )(member$a ?v0 (fun_app$n ?v2 ?v3 )))false )))false )):named a105 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_set$ )(?v2 A_list_a_list_set_fun$ ))(=> (and (member$ ?v0 (supremum$b ?v1 ?v2 ))(forall ((?v3 A_list$ ))(=> (and (member$ ?v3 ?v1 )(member$ ?v0 (fun_app$b ?v2 ?v3 )))false )))false )):named a106 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list_set$ )(?v2 A_list_a_set_fun$ ))(=> (and (member$a ?v0 (supremum$ ?v1 ?v2 ))(forall ((?v3 A_list$ ))(=> (and (member$ ?v3 ?v1 )(member$a ?v0 (fun_app$d ?v2 ?v3 )))false )))false )):named a107 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_a_list_set_fun$ )(?v3 A_list_set$ ))(=> (and (member$a ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$k ?v2 ?v4 )?v3 ))))(= (supremum$a ?v1 ?v2 )?v3 ))):named a108 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_set$ )(?v2 A_list_list_a_list_set_fun$ )(?v3 A_list_set$ ))(=> (and (member$b ?v0 ?v1 )(forall ((?v4 A_list_list$ ))(=> (member$b ?v4 ?v1 )(= (fun_app$v ?v2 ?v4 )?v3 ))))(= (supremum$d ?v1 ?v2 )?v3 ))):named a109 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_set$ )(?v2 A_list_a_list_set_fun$ )(?v3 A_list_set$ ))(=> (and (member$ ?v0 ?v1 )(forall ((?v4 A_list$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$b ?v2 ?v4 )?v3 ))))(= (supremum$b ?v1 ?v2 )?v3 ))):named a110 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_a_set_fun$ )(?v3 A_set$ ))(=> (and (member$a ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$n ?v2 ?v4 )?v3 ))))(= (supremum$c ?v1 ?v2 )?v3 ))):named a111 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_set$ )(?v2 A_list_a_set_fun$ )(?v3 A_set$ ))(=> (and (member$ ?v0 ?v1 )(forall ((?v4 A_list$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$d ?v2 ?v4 )?v3 ))))(= (supremum$ ?v1 ?v2 )?v3 ))):named a112 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_set$ )(?v2 A_list_a_list_a_set_fun_fun$ ))(= (supremum$ ?v0 (fun_app$ar (uun$ ?v1 )?v2 ))(supremum$ ?v1 (fun_app$ar (uup$ ?v0 )?v2 )))):named a113 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_a_a_set_fun_fun$ ))(= (supremum$c ?v0 (fun_app$aq (uuq$ ?v1 )?v2 ))(supremum$c ?v1 (fun_app$aq (uus$ ?v0 )?v2 )))):named a114 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_set$ )(?v2 A_list_a_a_set_fun_fun$ ))(= (supremum$ ?v0 (fun_app$av (uut$ ?v1 )?v2 ))(supremum$c ?v1 (fun_app$ap (uuv$ ?v0 )?v2 )))):named a115 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_list_set$ )(?v2 A_a_list_a_set_fun_fun$ ))(= (supremum$c ?v0 (fun_app$at (uuw$ ?v1 )?v2 ))(supremum$ ?v1 (fun_app$ao (uuy$ ?v0 )?v2 )))):named a116 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_set$ )(?v2 A_list_a_list_a_list_set_fun_fun$ ))(= (supremum$b ?v0 (fun_app$an (uuz$ ?v1 )?v2 ))(supremum$b ?v1 (fun_app$an (uvb$ ?v0 )?v2 )))):named a117 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_set$ )(?v2 A_list_a_list_a_bool_fun_fun_fun$ ))(= (fun_app$am (supremum$f ?v0 )(fun_app$al (uvc$ ?v1 )?v2 ))(fun_app$am (supremum$f ?v1 )(fun_app$al (uve$ ?v0 )?v2 )))):named a118 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_a_a_list_set_fun_fun$ ))(= (supremum$a ?v0 (fun_app$ak (uvf$ ?v1 )?v2 ))(supremum$a ?v1 (fun_app$ak (uvh$ ?v0 )?v2 )))):named a119 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_set$ )(?v2 A_list_a_list_bool_fun_fun$ ))(= (supremum$g ?v0 (fun_app$as (uvi$ ?v1 )?v2 ))(supremum$g ?v1 (fun_app$as (uvj$ ?v0 )?v2 )))):named a120 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_a_a_bool_fun_fun_fun$ ))(= (fun_app$aj (supremum$e ?v0 )(fun_app$ai (uvk$ ?v1 )?v2 ))(fun_app$aj (supremum$e ?v1 )(fun_app$ai (uvm$ ?v0 )?v2 )))):named a121 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_set$ )(?v2 A_list_a_a_list_set_fun_fun$ ))(= (supremum$b ?v0 (fun_app$au (uvn$ ?v1 )?v2 ))(supremum$a ?v1 (fun_app$ah (uvp$ ?v0 )?v2 )))):named a122 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_a_list_set_fun$ )(?v3 A_a_list_set_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$k ?v2 ?v4 )(fun_app$k ?v3 ?v4 )))))(= (supremum$a ?v0 ?v2 )(supremum$a ?v1 ?v3 )))):named a123 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_set$ )(?v2 A_list_bool_fun$ )(?v3 A_list_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_list$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (supremum$g ?v0 ?v2 )(supremum$g ?v1 ?v3 )))):named a124 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_a_bool_fun_fun$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$p ?v2 ?v4 )(fun_app$p ?v3 ?v4 )))))(= (fun_app$aj (supremum$e ?v0 )?v2 )(fun_app$aj (supremum$e ?v1 )?v3 )))):named a125 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_set$ )(?v2 A_list_a_list_bool_fun_fun$ )(?v3 A_list_a_list_bool_fun_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_list$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (fun_app$as (supremum$i ?v0 )?v2 )(fun_app$as (supremum$i ?v1 )?v3 )))):named a126 ))
(assert (! (forall ((?v0 A_list_list_set$ )(?v1 A_list_list_set$ )(?v2 A_list_list_a_list_set_fun$ )(?v3 A_list_list_a_list_set_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_list_list$ ))(=> (member$b ?v4 ?v1 )(= (fun_app$v ?v2 ?v4 )(fun_app$v ?v3 ?v4 )))))(= (supremum$d ?v0 ?v2 )(supremum$d ?v1 ?v3 )))):named a127 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_set$ )(?v2 A_list_a_list_set_fun$ )(?v3 A_list_a_list_set_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_list$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v4 )))))(= (supremum$b ?v0 ?v2 )(supremum$b ?v1 ?v3 )))):named a128 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_a_set_fun$ )(?v3 A_a_set_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$n ?v2 ?v4 )(fun_app$n ?v3 ?v4 )))))(= (supremum$c ?v0 ?v2 )(supremum$c ?v1 ?v3 )))):named a129 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_set$ )(?v2 A_list_a_bool_fun_fun$ )(?v3 A_list_a_bool_fun_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_list$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$f ?v2 ?v4 )(fun_app$f ?v3 ?v4 )))))(= (fun_app$am (supremum$f ?v0 )?v2 )(fun_app$am (supremum$f ?v1 )?v3 )))):named a130 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_set$ )(?v2 A_list_a_set_fun$ )(?v3 A_list_a_set_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_list$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$d ?v2 ?v4 )(fun_app$d ?v3 ?v4 )))))(= (supremum$ ?v0 ?v2 )(supremum$ ?v1 ?v3 )))):named a131 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_list_set_fun$ )(?v2 A_list$ ))(= (fun_app$ (fun_app$ax (supremum$l ?v0 )(uvq$ ?v1 ))?v2 )(member$ ?v2 (supremum$a ?v0 ?v1 )))):named a132 ))
(assert (! (forall ((?v0 A_list_list_set$ )(?v1 A_list_list_a_list_set_fun$ )(?v2 A_list$ ))(= (fun_app$ (fun_app$ay (supremum$m ?v0 )(uvr$ ?v1 ))?v2 )(member$ ?v2 (supremum$d ?v0 ?v1 )))):named a133 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_list_set_fun$ )(?v2 A_list$ ))(= (fun_app$ (fun_app$as (supremum$i ?v0 )(uvs$ ?v1 ))?v2 )(member$ ?v2 (supremum$b ?v0 ?v1 )))):named a134 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_a_set_fun$ )(?v2 A$ ))(= (fun_app$i (fun_app$aj (supremum$e ?v0 )(uvt$ ?v1 ))?v2 )(member$a ?v2 (supremum$c ?v0 ?v1 )))):named a135 ))
(assert (! (forall ((?v0 A_list_set$ )(?v1 A_list_a_set_fun$ )(?v2 A$ ))(= (fun_app$i (fun_app$am (supremum$f ?v0 )(uvu$ ?v1 ))?v2 )(member$a ?v2 (supremum$ ?v0 ?v1 )))):named a136 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (smember$ ?v0 ?v1 )(member$a ?v0 (sset$ ?v1 ))):pattern ((smember$ ?v0 ?v1 )))):named a137 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ ))(! (= (smember$a ?v0 ?v1 )(member$ ?v0 (sset$a ?v1 ))):pattern ((smember$a ?v0 ?v1 )))):named a138 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a139 ))
(assert (! (forall ((?v0 A_list_list_list_list$ ))(= (fun_app$az set$a (concat$ ?v0 ))(supremum$n (set$b ?v0 )set$a ))):named a140 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(= (fun_app$v set$c (concat$a ?v0 ))(supremum$d (fun_app$az set$a ?v0 )set$c ))):named a141 ))
(assert (! (forall ((?v0 A_list_list$ ))(= (fun_app$d set$ (concat$b ?v0 ))(supremum$ (fun_app$v set$c ?v0 )set$ ))):named a142 ))
(check-sat )
;(get-unsat-core )
