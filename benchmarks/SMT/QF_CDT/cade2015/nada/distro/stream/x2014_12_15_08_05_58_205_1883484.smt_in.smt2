;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_nat_fun_fun$ 0 )
(declare-sort A_nat_fun_a_a_fun_fun$ 0 )
(declare-sort A_nat_fun_a_nat_fun_fun$ 0 )
(declare-sort Nat_a_fun_nat_a_fun_fun$ 0 )
(declare-sort Nat_a_fun_nat_nat_fun_fun$ 0 )
(declare-sort Nat_nat_fun_nat_a_fun_fun$ 0 )
(declare-sort Nat_nat_fun_nat_nat_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun n$ ()Nat$ )
(declare-fun s$ ()A_stream$ )
(declare-fun x$ ()A$ )
(declare-fun sa$ ()A_stream$ )
(declare-fun uu$ ()A_a_fun$ )
(declare-fun xa$ ()A$ )
(declare-fun top$ ()Nat_set$ )
(declare-fun uua$ ()Nat_nat_fun$ )
(declare-fun uub$ (A_nat_fun$ )A_a_fun_a_nat_fun_fun$ )
(declare-fun uuc$ (A_nat_fun$ )Nat_a_fun_nat_nat_fun_fun$ )
(declare-fun uud$ (Nat_nat_fun$ )Nat_nat_fun_nat_nat_fun_fun$ )
(declare-fun uue$ (Nat_nat_fun$ )A_nat_fun_a_nat_fun_fun$ )
(declare-fun uuf$ (Nat_a_fun$ )A_nat_fun_a_a_fun_fun$ )
(declare-fun uug$ (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun uuh$ (A_a_fun$ )Nat_a_fun_nat_a_fun_fun$ )
(declare-fun uui$ (Nat_a_fun$ )Nat_nat_fun_nat_a_fun_fun$ )
(declare-fun snth$ (A_stream$ )Nat_a_fun$ )
(declare-fun sset$ (A_stream$ )A_set$ )
(declare-fun top$a ()A_set$ )
(declare-fun image$ (Nat_a_fun$ Nat_set$ )A_set$ )
(declare-fun image$a (A_a_fun$ A_set$ )A_set$ )
(declare-fun image$b (Nat_nat_fun$ Nat_set$ )Nat_set$ )
(declare-fun image$c (A_nat_fun$ A_set$ )Nat_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun member$a (Nat$ Nat_set$ )Bool )
(declare-fun fun_app$a (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun$ )Nat_nat_fun$ )
(declare-fun fun_app$b (A_nat_fun$ A$ )Nat$ )
(declare-fun fun_app$c (A_nat_fun_a_nat_fun_fun$ A_nat_fun$ )A_nat_fun$ )
(declare-fun fun_app$d (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$e (Nat_nat_fun_nat_a_fun_fun$ Nat_nat_fun$ )Nat_a_fun$ )
(declare-fun fun_app$f (A_a_fun$ A$ )A$ )
(declare-fun fun_app$g (A_nat_fun_a_a_fun_fun$ A_nat_fun$ )A_a_fun$ )
(declare-fun fun_app$h (Nat_a_fun_nat_nat_fun_fun$ Nat_a_fun$ )Nat_nat_fun$ )
(declare-fun fun_app$i (A_a_fun_a_nat_fun_fun$ A_a_fun$ )A_nat_fun$ )
(declare-fun fun_app$j (Nat_a_fun_nat_a_fun_fun$ Nat_a_fun$ )Nat_a_fun$ )
(declare-fun fun_app$k (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$a (uud$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uud$ ?v0 )?v1 )?v2 )))):named a0 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 A_nat_fun$ )(?v2 A$ ))(! (= (fun_app$b (fun_app$c (uue$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$c (uue$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ ))(! (= (fun_app$d (fun_app$e (uui$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$e (uui$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A_nat_fun$ )(?v2 A$ ))(! (= (fun_app$f (fun_app$g (uuf$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$g (uuf$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 Nat_a_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$h (uuc$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$h (uuc$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$b (fun_app$i (uub$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$i (uub$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 Nat_a_fun$ )(?v2 Nat$ ))(! (= (fun_app$d (fun_app$j (uuh$ ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$j (uuh$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$f (fun_app$k (uug$ ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$k (uug$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uua$ ?v0 )?v0 ):pattern ((fun_app$ uua$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$f uu$ ?v0 )?v0 ):pattern ((fun_app$f uu$ ?v0 )))):named a9 ))
(assert (! (not (member$ xa$ (image$ (snth$ sa$ )top$ ))):named a10 ))
(assert (! (= xa$ (fun_app$d (snth$ (stl$ sa$ ))n$ )):named a11 ))
(assert (! (member$ xa$ (image$ (snth$ (stl$ sa$ ))top$ )):named a12 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= xa$ (fun_app$d (snth$ (stl$ sa$ ))?v0 ))false ))false ):named a13 ))
(assert (! (member$ xa$ (sset$ (stl$ sa$ ))):named a14 ))
(assert (! (forall ((?v0 A_set$ ))(= (image$a uu$ ?v0 )?v0 )):named a15 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (image$b uua$ ?v0 )?v0 )):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_nat_fun$ )(?v2 A$ )(?v3 A_set$ ))(=> (and (= ?v0 (fun_app$b ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$c ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ )(?v3 Nat_set$ ))(=> (and (= ?v0 (fun_app$ ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (image$b ?v1 ?v3 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat_a_fun$ )(?v2 Nat$ )(?v3 Nat_set$ ))(=> (and (= ?v0 (fun_app$d ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$ ?v1 ?v3 )))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_fun$ )(?v2 A$ )(?v3 A_set$ ))(=> (and (= ?v0 (fun_app$f ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$a ?v1 ?v3 )))):named a20 ))
(assert (! (forall ((?v0 A$ ))(= (member$ ?v0 top$a )true )):named a21 ))
(assert (! (forall ((?v0 Nat$ ))(= (member$a ?v0 top$ )true )):named a22 ))
(assert (! (forall ((?v0 A$ ))(member$ ?v0 top$a )):named a23 ))
(assert (! (forall ((?v0 Nat$ ))(member$a ?v0 top$ )):named a24 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 A_a_fun$ ))(= (image$c (fun_app$i (uub$ ?v0 )?v1 )top$a )(image$c ?v0 (image$a ?v1 top$a )))):named a25 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 Nat_a_fun$ ))(= (image$b (fun_app$h (uuc$ ?v0 )?v1 )top$ )(image$c ?v0 (image$ ?v1 top$ )))):named a26 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ ))(= (image$b (fun_app$a (uud$ ?v0 )?v1 )top$ )(image$b ?v0 (image$b ?v1 top$ )))):named a27 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 A_nat_fun$ ))(= (image$c (fun_app$c (uue$ ?v0 )?v1 )top$a )(image$b ?v0 (image$c ?v1 top$a )))):named a28 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A_nat_fun$ ))(= (image$a (fun_app$g (uuf$ ?v0 )?v1 )top$a )(image$ ?v0 (image$c ?v1 top$a )))):named a29 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ ))(= (image$a (fun_app$k (uug$ ?v0 )?v1 )top$a )(image$a ?v0 (image$a ?v1 top$a )))):named a30 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 Nat_a_fun$ ))(= (image$ (fun_app$j (uuh$ ?v0 )?v1 )top$ )(image$a ?v0 (image$ ?v1 top$ )))):named a31 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_nat_fun$ ))(= (image$ (fun_app$e (uui$ ?v0 )?v1 )top$ )(image$ ?v0 (image$b ?v1 top$ )))):named a32 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ ))(=> (and (member$a ?v0 (image$b ?v1 top$ ))(forall ((?v2 Nat$ ))(=> (= ?v0 (fun_app$ ?v1 ?v2 ))false )))false )):named a33 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_fun$ ))(=> (and (member$ ?v0 (image$a ?v1 top$a ))(forall ((?v2 A$ ))(=> (= ?v0 (fun_app$f ?v1 ?v2 ))false )))false )):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_nat_fun$ ))(=> (and (member$a ?v0 (image$c ?v1 top$a ))(forall ((?v2 A$ ))(=> (= ?v0 (fun_app$b ?v1 ?v2 ))false )))false )):named a35 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat_a_fun$ ))(=> (and (member$ ?v0 (image$ ?v1 top$ ))(forall ((?v2 Nat$ ))(=> (= ?v0 (fun_app$d ?v1 ?v2 ))false )))false )):named a36 ))
(assert (! (forall ((?v0 A_nat_fun$ ))(= (= (image$c ?v0 top$a )top$ )(forall ((?v1 Nat$ ))(exists ((?v2 A$ ))(= ?v1 (fun_app$b ?v0 ?v2 )))))):named a37 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (= (image$a ?v0 top$a )top$a )(forall ((?v1 A$ ))(exists ((?v2 A$ ))(= ?v1 (fun_app$f ?v0 ?v2 )))))):named a38 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(= (= (image$ ?v0 top$ )top$a )(forall ((?v1 A$ ))(exists ((?v2 Nat$ ))(= ?v1 (fun_app$d ?v0 ?v2 )))))):named a39 ))
(assert (! (forall ((?v0 Nat_nat_fun$ ))(= (= (image$b ?v0 top$ )top$ )(forall ((?v1 Nat$ ))(exists ((?v2 Nat$ ))(= ?v1 (fun_app$ ?v0 ?v2 )))))):named a40 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 Nat_a_fun$ ))(=> (forall ((?v2 Nat$ ))(= (fun_app$b ?v0 (fun_app$d ?v1 ?v2 ))?v2 ))(= (image$c ?v0 top$a )top$ ))):named a41 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ ))(=> (forall ((?v2 A$ ))(= (fun_app$f ?v0 (fun_app$f ?v1 ?v2 ))?v2 ))(= (image$a ?v0 top$a )top$a ))):named a42 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A_nat_fun$ ))(=> (forall ((?v2 A$ ))(= (fun_app$d ?v0 (fun_app$b ?v1 ?v2 ))?v2 ))(= (image$ ?v0 top$ )top$a ))):named a43 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ ))(=> (forall ((?v2 Nat$ ))(= (fun_app$ ?v0 (fun_app$ ?v1 ?v2 ))?v2 ))(= (image$b ?v0 top$ )top$ ))):named a44 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 Nat$ ))(=> (and (= (image$c ?v0 top$a )top$ )(forall ((?v2 A$ ))(=> (= ?v1 (fun_app$b ?v0 ?v2 ))false )))false )):named a45 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(=> (and (= (image$a ?v0 top$a )top$a )(forall ((?v2 A$ ))(=> (= ?v1 (fun_app$f ?v0 ?v2 ))false )))false )):named a46 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A$ ))(=> (and (= (image$ ?v0 top$ )top$a )(forall ((?v2 Nat$ ))(=> (= ?v1 (fun_app$d ?v0 ?v2 ))false )))false )):named a47 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(=> (and (= (image$b ?v0 top$ )top$ )(forall ((?v2 Nat$ ))(=> (= ?v1 (fun_app$ ?v0 ?v2 ))false )))false )):named a48 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 Nat$ ))(=> (= (image$c ?v0 top$a )top$ )(exists ((?v2 A$ ))(= ?v1 (fun_app$b ?v0 ?v2 ))))):named a49 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(=> (= (image$a ?v0 top$a )top$a )(exists ((?v2 A$ ))(= ?v1 (fun_app$f ?v0 ?v2 ))))):named a50 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A$ ))(=> (= (image$ ?v0 top$ )top$a )(exists ((?v2 Nat$ ))(= ?v1 (fun_app$d ?v0 ?v2 ))))):named a51 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(=> (= (image$b ?v0 top$ )top$ )(exists ((?v2 Nat$ ))(= ?v1 (fun_app$ ?v0 ?v2 ))))):named a52 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ ))(=> (= ?v0 (fun_app$ ?v1 ?v2 ))(member$a ?v0 (image$b ?v1 top$ )))):named a53 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_fun$ )(?v2 A$ ))(=> (= ?v0 (fun_app$f ?v1 ?v2 ))(member$ ?v0 (image$a ?v1 top$a )))):named a54 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_nat_fun$ )(?v2 A$ ))(=> (= ?v0 (fun_app$b ?v1 ?v2 ))(member$a ?v0 (image$c ?v1 top$a )))):named a55 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat_a_fun$ )(?v2 Nat$ ))(=> (= ?v0 (fun_app$d ?v1 ?v2 ))(member$ ?v0 (image$ ?v1 top$ )))):named a56 ))
(assert (! (member$ x$ (sset$ s$ )):named a57 ))
(check-sat )
;(get-unsat-core )
