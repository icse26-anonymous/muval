;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort B_c_prod_set$ 0 )
(declare-sort B_stream_set$ 0 )
(declare-sort A_b_c_prod_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort A_stream_b_fun$ 0 )
(declare-sort B_b_c_prod_fun$ 0 )
(declare-sort B_b_stream_fun$ 0 )
(declare-sort B_c_prod_a_fun$ 0 )
(declare-sort B_c_prod_b_fun$ 0 )
(declare-sort B_stream_a_fun$ 0 )
(declare-sort B_stream_b_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_c_bool_fun_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_c_bool_fun_fun$ 0 )
(declare-sort C_a_bool_fun_fun$ 0 )
(declare-sort C_b_bool_fun_fun$ 0 )
(declare-sort B_c_prod_bool_fun$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort B_c_prod_stream_set$ 0 )
(declare-sort B_stream_stream_set$ 0 )
(declare-sort B_c_prod_b_c_prod_fun$ 0 )
(declare-sort A_b_c_prod_bool_fun_fun$ 0 )
(declare-sort B_b_c_prod_bool_fun_fun$ 0 )
(declare-sort B_c_prod_a_bool_fun_fun$ 0 )
(declare-sort B_c_prod_b_bool_fun_fun$ 0 )
(declare-sort B_c_prod_b_c_prod_bool_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-sort B_c_prod$ 0)
(declare-fun fst$ (B_c_prod$)B$)
(declare-fun snd$ (B_c_prod$)C$)
(declare-fun pair$ (B$ C$ )B_c_prod$)
(declare-sort B_c_prod_stream$ 0)
(declare-sort B_stream$ 0)
(declare-sort C_stream$ 0)
(declare-sort B_stream_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-fun shd$a (B_c_prod_stream$)B_c_prod$)
(declare-fun stl$a (B_c_prod_stream$)B_c_prod_stream$)
(declare-fun sCons$a (B_c_prod$ B_c_prod_stream$ )B_c_prod_stream$)
(declare-fun shd$b (B_stream$)B$)
(declare-fun stl$b (B_stream$)B_stream$)
(declare-fun sCons$b (B$ B_stream$ )B_stream$)
(declare-fun shd$c (C_stream$)C$)
(declare-fun stl$c (C_stream$)C_stream$)
(declare-fun sCons$c (C$ C_stream$ )C_stream$)
(declare-fun shd$d (B_stream_stream$)B_stream$)
(declare-fun stl$d (B_stream_stream$)B_stream_stream$)
(declare-fun sCons$d (B_stream$ B_stream_stream$ )B_stream_stream$)
(declare-fun shd$e (A_stream_stream$)A_stream$)
(declare-fun stl$e (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$e (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$a (A_a_prod$)A$)
(declare-fun snd$a (A_a_prod$)A$)
(declare-fun pair$a (A$ A$ )A_a_prod$)
(declare-sort A_a_prod_stream$ 0)
(declare-fun shd$f (A_a_prod_stream$)A_a_prod$)
(declare-fun stl$f (A_a_prod_stream$)A_a_prod_stream$)
(declare-fun sCons$f (A_a_prod$ A_a_prod_stream$ )A_a_prod_stream$)
(declare-sort A_b_prod$ 0)
(declare-fun fst$b (A_b_prod$)A$)
(declare-fun snd$b (A_b_prod$)B$)
(declare-fun pair$b (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_stream$ 0)
(declare-fun shd$g (A_b_prod_stream$)A_b_prod$)
(declare-fun stl$g (A_b_prod_stream$)A_b_prod_stream$)
(declare-fun sCons$g (A_b_prod$ A_b_prod_stream$ )A_b_prod_stream$)
(declare-sort A_c_prod$ 0)
(declare-fun fst$c (A_c_prod$)A$)
(declare-fun snd$c (A_c_prod$)C$)
(declare-fun pair$c (A$ C$ )A_c_prod$)
(declare-sort A_c_prod_stream$ 0)
(declare-fun shd$h (A_c_prod_stream$)A_c_prod$)
(declare-fun stl$h (A_c_prod_stream$)A_c_prod_stream$)
(declare-fun sCons$h (A_c_prod$ A_c_prod_stream$ )A_c_prod_stream$)
(declare-sort B_a_prod$ 0)
(declare-fun fst$d (B_a_prod$)B$)
(declare-fun snd$d (B_a_prod$)A$)
(declare-fun pair$d (B$ A$ )B_a_prod$)
(declare-sort B_a_prod_stream$ 0)
(declare-fun shd$i (B_a_prod_stream$)B_a_prod$)
(declare-fun stl$i (B_a_prod_stream$)B_a_prod_stream$)
(declare-fun sCons$i (B_a_prod$ B_a_prod_stream$ )B_a_prod_stream$)
(declare-sort B_b_prod$ 0)
(declare-fun fst$e (B_b_prod$)B$)
(declare-fun snd$e (B_b_prod$)B$)
(declare-fun pair$e (B$ B$ )B_b_prod$)
(declare-sort B_b_prod_stream$ 0)
(declare-fun shd$j (B_b_prod_stream$)B_b_prod$)
(declare-fun stl$j (B_b_prod_stream$)B_b_prod_stream$)
(declare-fun sCons$j (B_b_prod$ B_b_prod_stream$ )B_b_prod_stream$)
(declare-sort C_a_prod$ 0)
(declare-fun fst$f (C_a_prod$)C$)
(declare-fun snd$f (C_a_prod$)A$)
(declare-fun pair$f (C$ A$ )C_a_prod$)
(declare-sort C_a_prod_stream$ 0)
(declare-fun shd$k (C_a_prod_stream$)C_a_prod$)
(declare-fun stl$k (C_a_prod_stream$)C_a_prod_stream$)
(declare-fun sCons$k (C_a_prod$ C_a_prod_stream$ )C_a_prod_stream$)
(declare-sort C_b_prod$ 0)
(declare-fun fst$g (C_b_prod$)C$)
(declare-fun snd$g (C_b_prod$)B$)
(declare-fun pair$g (C$ B$ )C_b_prod$)
(declare-sort C_b_prod_stream$ 0)
(declare-fun shd$l (C_b_prod_stream$)C_b_prod$)
(declare-fun stl$l (C_b_prod_stream$)C_b_prod_stream$)
(declare-fun sCons$l (C_b_prod$ C_b_prod_stream$ )C_b_prod_stream$)
(declare-sort C_c_prod$ 0)
(declare-fun fst$h (C_c_prod$)C$)
(declare-fun snd$h (C_c_prod$)C$)
(declare-fun pair$h (C$ C$ )C_c_prod$)
(declare-sort C_c_prod_stream$ 0)
(declare-fun shd$m (C_c_prod_stream$)C_c_prod$)
(declare-fun stl$m (C_c_prod_stream$)C_c_prod_stream$)
(declare-fun sCons$m (C_c_prod$ C_c_prod_stream$ )C_c_prod_stream$)
(declare-sort A_b_c_prod_prod$ 0)
(declare-fun fst$i (A_b_c_prod_prod$)A$)
(declare-fun snd$i (A_b_c_prod_prod$)B_c_prod$)
(declare-fun pair$i (A$ B_c_prod$ )A_b_c_prod_prod$)
(declare-sort A_b_c_prod_prod_stream$ 0)
(declare-fun shd$n (A_b_c_prod_prod_stream$)A_b_c_prod_prod$)
(declare-fun stl$n (A_b_c_prod_prod_stream$)A_b_c_prod_prod_stream$)
(declare-fun sCons$n (A_b_c_prod_prod$ A_b_c_prod_prod_stream$ )A_b_c_prod_prod_stream$)
(declare-fun f$ ()B_a_fun$ )
(declare-fun s1$ ()B_stream$ )
(declare-fun s2$ ()C_stream$ )
(declare-fun uu$ ()B_c_prod_a_fun$ )
(declare-fun uua$ ()A_a_fun$ )
(declare-fun uub$ (C_b_bool_fun_fun$ A_c_fun$ )A_b_bool_fun_fun$ )
(declare-fun uuc$ (C_a_bool_fun_fun$ A_c_fun$ )A_a_bool_fun_fun$ )
(declare-fun uud$ (B_b_bool_fun_fun$ B_b_fun$ )B_b_bool_fun_fun$ )
(declare-fun uue$ (B_b_bool_fun_fun$ A_b_fun$ )A_b_bool_fun_fun$ )
(declare-fun uuf$ (B_a_bool_fun_fun$ B_b_fun$ )B_a_bool_fun_fun$ )
(declare-fun uug$ (B_a_bool_fun_fun$ A_b_fun$ )A_a_bool_fun_fun$ )
(declare-fun uuh$ (A_b_bool_fun_fun$ B_a_fun$ )B_b_bool_fun_fun$ )
(declare-fun uui$ (A_b_bool_fun_fun$ A_a_fun$ )A_b_bool_fun_fun$ )
(declare-fun uuj$ (A_a_bool_fun_fun$ B_a_fun$ )B_a_bool_fun_fun$ )
(declare-fun uuk$ (A_a_bool_fun_fun$ A_a_fun$ )A_a_bool_fun_fun$ )
(declare-fun uul$ (B_c_bool_fun_fun$ A_c_fun$ )B_a_bool_fun_fun$ )
(declare-fun uum$ (A_c_bool_fun_fun$ A_c_fun$ )A_a_bool_fun_fun$ )
(declare-fun uun$ (B_b_bool_fun_fun$ B_b_fun$ )B_b_bool_fun_fun$ )
(declare-fun uuo$ (B_b_bool_fun_fun$ A_b_fun$ )B_a_bool_fun_fun$ )
(declare-fun uup$ (B_a_bool_fun_fun$ B_a_fun$ )B_b_bool_fun_fun$ )
(declare-fun uuq$ (B_a_bool_fun_fun$ A_a_fun$ )B_a_bool_fun_fun$ )
(declare-fun uur$ (A_b_bool_fun_fun$ B_b_fun$ )A_b_bool_fun_fun$ )
(declare-fun uus$ (A_b_bool_fun_fun$ A_b_fun$ )A_a_bool_fun_fun$ )
(declare-fun uut$ (A_a_bool_fun_fun$ B_a_fun$ )A_b_bool_fun_fun$ )
(declare-fun uuu$ (A_a_bool_fun_fun$ A_a_fun$ )A_a_bool_fun_fun$ )
(declare-fun smap$ (B_c_prod_a_fun$ B_c_prod_stream$ )A_stream$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun sset$ (A_stream$ )A_set$ )
(declare-fun szip$ (B_stream$ C_stream$ )B_c_prod_stream$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun smap$a (B_a_fun$ B_stream$ )A_stream$ )
(declare-fun smap$b (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun smap$c (C_a_fun$ C_stream$ )A_stream$ )
(declare-fun smap$d (A_b_fun$ A_stream$ )B_stream$ )
(declare-fun smap$e (B_b_fun$ B_stream$ )B_stream$ )
(declare-fun smap$f (C_b_fun$ C_stream$ )B_stream$ )
(declare-fun smap$g (A_c_fun$ A_stream$ )C_stream$ )
(declare-fun smap$h (B_c_fun$ B_stream$ )C_stream$ )
(declare-fun smap$i (C_c_fun$ C_stream$ )C_stream$ )
(declare-fun smap$j (B_c_prod_b_fun$ B_c_prod_stream$ )B_stream$ )
(declare-fun smap$k (A_b_c_prod_fun$ A_stream$ )B_c_prod_stream$ )
(declare-fun smap$l (B_b_c_prod_fun$ B_stream$ )B_c_prod_stream$ )
(declare-fun smap$m (B_c_prod_b_c_prod_fun$ B_c_prod_stream$ )B_c_prod_stream$ )
(declare-fun smap$n (B_stream_b_fun$ B_stream_stream$ )B_stream$ )
(declare-fun smap$o (A_stream_b_fun$ A_stream_stream$ )B_stream$ )
(declare-fun smap$p (B_stream_a_fun$ B_stream_stream$ )A_stream$ )
(declare-fun smap$q (A_stream_a_fun$ A_stream_stream$ )A_stream$ )
(declare-fun smap$r (B_b_stream_fun$ B_stream$ )B_stream_stream$ )
(declare-fun snth$a (B_stream$ Nat$ )B$ )
(declare-fun snth$b (B_c_prod_stream$ Nat$ )B_c_prod$ )
(declare-fun snth$c (C_stream$ Nat$ )C$ )
(declare-fun snth$d (B_stream_stream$ Nat$ )B_stream$ )
(declare-fun snth$e (A_stream_stream$ Nat$ )A_stream$ )
(declare-fun sset$a (B_c_prod_stream$ )B_c_prod_set$ )
(declare-fun sset$b (B_stream$ )B_set$ )
(declare-fun szip$a (A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun szip$b (A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun szip$c (A_stream$ C_stream$ )A_c_prod_stream$ )
(declare-fun szip$d (B_stream$ A_stream$ )B_a_prod_stream$ )
(declare-fun szip$e (B_stream$ B_stream$ )B_b_prod_stream$ )
(declare-fun szip$f (C_stream$ A_stream$ )C_a_prod_stream$ )
(declare-fun szip$g (C_stream$ B_stream$ )C_b_prod_stream$ )
(declare-fun szip$h (C_stream$ C_stream$ )C_c_prod_stream$ )
(declare-fun szip$i (A_stream$ B_c_prod_stream$ )A_b_c_prod_prod_stream$ )
(declare-fun member$ (B_stream$ B_stream_set$ )Bool )
(declare-fun sdrop$a (Nat$ B_stream$ )B_stream$ )
(declare-fun sdrop$b (Nat$ B_c_prod_stream$ )B_c_prod_stream$ )
(declare-fun sdrop$c (Nat$ C_stream$ )C_stream$ )
(declare-fun sdrop$d (Nat$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun sdrop$e (Nat$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun sdrop$f (Nat$ A_c_prod_stream$ )A_c_prod_stream$ )
(declare-fun sdrop$g (Nat$ B_a_prod_stream$ )B_a_prod_stream$ )
(declare-fun sdrop$h (Nat$ B_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun sdrop$i (Nat$ C_a_prod_stream$ )C_a_prod_stream$ )
(declare-fun sdrop$j (Nat$ C_b_prod_stream$ )C_b_prod_stream$ )
(declare-fun sdrop$k (Nat$ C_c_prod_stream$ )C_c_prod_stream$ )
(declare-fun sdrop$l (Nat$ A_b_c_prod_prod_stream$ )A_b_c_prod_prod_stream$ )
(declare-fun fun_app$ (B_c_prod_a_fun$ B_c_prod$ )A$ )
(declare-fun member$a (B$ B_set$ )Bool )
(declare-fun member$b (A$ A_set$ )Bool )
(declare-fun member$c (A_stream$ A_stream_set$ )Bool )
(declare-fun member$d (B_c_prod_stream$ B_c_prod_stream_set$ )Bool )
(declare-fun member$e (B_c_prod$ B_c_prod_set$ )Bool )
(declare-fun member$f (B_stream_stream$ B_stream_stream_set$ )Bool )
(declare-fun member$g (A_stream_stream$ A_stream_stream_set$ )Bool )
(declare-fun streams$ (B_set$ )B_stream_set$ )
(declare-fun fun_app$a (B_a_fun$ B$ )A$ )
(declare-fun fun_app$b (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$c (C_b_bool_fun_fun$ C$ )B_bool_fun$ )
(declare-fun fun_app$d (A_c_fun$ A$ )C$ )
(declare-fun fun_app$e (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$f (C_a_bool_fun_fun$ C$ )A_bool_fun$ )
(declare-fun fun_app$g (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$h (B_b_fun$ B$ )B$ )
(declare-fun fun_app$i (A_b_fun$ A$ )B$ )
(declare-fun fun_app$j (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$k (A_a_fun$ A$ )A$ )
(declare-fun fun_app$l (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$m (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$n (B_c_bool_fun_fun$ B$ )C_bool_fun$ )
(declare-fun fun_app$o (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$p (A_c_bool_fun_fun$ A$ )C_bool_fun$ )
(declare-fun fun_app$q (B_c_prod_b_fun$ B_c_prod$ )B$ )
(declare-fun fun_app$r (A_b_c_prod_fun$ A$ )B_c_prod$ )
(declare-fun fun_app$s (B_b_c_prod_fun$ B$ )B_c_prod$ )
(declare-fun fun_app$t (B_c_prod_b_c_prod_fun$ B_c_prod$ )B_c_prod$ )
(declare-fun fun_app$u (C_a_fun$ C$ )A$ )
(declare-fun fun_app$v (B_stream_b_fun$ B_stream$ )B$ )
(declare-fun fun_app$w (A_stream_b_fun$ A_stream$ )B$ )
(declare-fun fun_app$x (B_stream_a_fun$ B_stream$ )A$ )
(declare-fun fun_app$y (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$z (B_b_stream_fun$ B$ )B_stream$ )
(declare-fun siterate$ (A_a_fun$ A$ )A_stream$ )
(declare-fun streams$a (A_set$ )A_stream_set$ )
(declare-fun streams$b (B_c_prod_set$ )B_c_prod_stream_set$ )
(declare-fun streams$c (B_stream_set$ )B_stream_stream_set$ )
(declare-fun streams$d (A_stream_set$ )A_stream_stream_set$ )
(declare-fun fun_app$aa (B_c_fun$ B$ )C$ )
(declare-fun fun_app$ab (B_c_prod_bool_fun$ B_c_prod$ )Bool )
(declare-fun fun_app$ac (A_b_c_prod_bool_fun_fun$ A$ )B_c_prod_bool_fun$ )
(declare-fun fun_app$ad (B_b_c_prod_bool_fun_fun$ B$ )B_c_prod_bool_fun$ )
(declare-fun fun_app$ae (B_c_prod_a_bool_fun_fun$ B_c_prod$ )A_bool_fun$ )
(declare-fun fun_app$af (B_c_prod_b_bool_fun_fun$ B_c_prod$ )B_bool_fun$ )
(declare-fun fun_app$ag (B_c_prod_b_c_prod_bool_fun_fun$ B_c_prod$ )B_c_prod_bool_fun$ )
(declare-fun stream_all2$ (C_b_bool_fun_fun$ C_stream$ B_stream$ )Bool )
(declare-fun stream_all2$a (A_b_bool_fun_fun$ A_stream$ B_stream$ )Bool )
(declare-fun stream_all2$b (C_a_bool_fun_fun$ C_stream$ A_stream$ )Bool )
(declare-fun stream_all2$c (A_a_bool_fun_fun$ A_stream$ A_stream$ )Bool )
(declare-fun stream_all2$d (B_b_bool_fun_fun$ B_stream$ B_stream$ )Bool )
(declare-fun stream_all2$e (B_a_bool_fun_fun$ B_stream$ A_stream$ )Bool )
(declare-fun stream_all2$f (B_c_bool_fun_fun$ B_stream$ C_stream$ )Bool )
(declare-fun stream_all2$g (A_c_bool_fun_fun$ A_stream$ C_stream$ )Bool )
(declare-fun stream_all2$h (A_b_c_prod_bool_fun_fun$ A_stream$ B_c_prod_stream$ )Bool )
(declare-fun stream_all2$i (B_b_c_prod_bool_fun_fun$ B_stream$ B_c_prod_stream$ )Bool )
(declare-fun stream_all2$j (B_c_prod_a_bool_fun_fun$ B_c_prod_stream$ A_stream$ )Bool )
(declare-fun stream_all2$k (B_c_prod_b_bool_fun_fun$ B_c_prod_stream$ B_stream$ )Bool )
(declare-fun stream_all2$l (B_c_prod_b_c_prod_bool_fun_fun$ B_c_prod_stream$ B_c_prod_stream$ )Bool )
(assert (! (forall ((?v0 B_c_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$a f$ (fst$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A$ ))(! (= (fun_app$b (uub$ ?v0 ?v1 )?v2 )(fun_app$c ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$b (uub$ ?v0 ?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A$ ))(! (= (fun_app$e (uuc$ ?v0 ?v1 )?v2 )(fun_app$f ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$e (uuc$ ?v0 ?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$g (uud$ ?v0 ?v1 )?v2 )(fun_app$g ?v0 (fun_app$h ?v1 ?v2 ))):pattern ((fun_app$g (uud$ ?v0 ?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$b (uue$ ?v0 ?v1 )?v2 )(fun_app$g ?v0 (fun_app$i ?v1 ?v2 ))):pattern ((fun_app$b (uue$ ?v0 ?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$j (uuf$ ?v0 ?v1 )?v2 )(fun_app$j ?v0 (fun_app$h ?v1 ?v2 ))):pattern ((fun_app$j (uuf$ ?v0 ?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$e (uug$ ?v0 ?v1 )?v2 )(fun_app$j ?v0 (fun_app$i ?v1 ?v2 ))):pattern ((fun_app$e (uug$ ?v0 ?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$g (uuh$ ?v0 ?v1 )?v2 )(fun_app$b ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$g (uuh$ ?v0 ?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$b (uui$ ?v0 ?v1 )?v2 )(fun_app$b ?v0 (fun_app$k ?v1 ?v2 ))):pattern ((fun_app$b (uui$ ?v0 ?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$j (uuj$ ?v0 ?v1 )?v2 )(fun_app$e ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$j (uuj$ ?v0 ?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$e (uuk$ ?v0 ?v1 )?v2 )(fun_app$e ?v0 (fun_app$k ?v1 ?v2 ))):pattern ((fun_app$e (uuk$ ?v0 ?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 B$ )(?v3 A$ ))(! (= (fun_app$l (fun_app$j (uul$ ?v0 ?v1 )?v2 )?v3 )(fun_app$m (fun_app$n ?v0 ?v2 )(fun_app$d ?v1 ?v3 ))):pattern ((fun_app$l (fun_app$j (uul$ ?v0 ?v1 )?v2 )?v3 )))):named a11 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B$ ))(! (= (fun_app$o (fun_app$g (uun$ ?v0 ?v1 )?v2 )?v3 )(fun_app$o (fun_app$g ?v0 ?v2 )(fun_app$h ?v1 ?v3 ))):pattern ((fun_app$o (fun_app$g (uun$ ?v0 ?v1 )?v2 )?v3 )))):named a12 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 A_b_fun$ )(?v2 B$ )(?v3 A$ ))(! (= (fun_app$l (fun_app$j (uuo$ ?v0 ?v1 )?v2 )?v3 )(fun_app$o (fun_app$g ?v0 ?v2 )(fun_app$i ?v1 ?v3 ))):pattern ((fun_app$l (fun_app$j (uuo$ ?v0 ?v1 )?v2 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_a_fun$ )(?v2 B$ )(?v3 B$ ))(! (= (fun_app$o (fun_app$g (uup$ ?v0 ?v1 )?v2 )?v3 )(fun_app$l (fun_app$j ?v0 ?v2 )(fun_app$a ?v1 ?v3 ))):pattern ((fun_app$o (fun_app$g (uup$ ?v0 ?v1 )?v2 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 A_a_fun$ )(?v2 B$ )(?v3 A$ ))(! (= (fun_app$l (fun_app$j (uuq$ ?v0 ?v1 )?v2 )?v3 )(fun_app$l (fun_app$j ?v0 ?v2 )(fun_app$k ?v1 ?v3 ))):pattern ((fun_app$l (fun_app$j (uuq$ ?v0 ?v1 )?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_c_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A$ )(?v3 A$ ))(! (= (fun_app$l (fun_app$e (uum$ ?v0 ?v1 )?v2 )?v3 )(fun_app$m (fun_app$p ?v0 ?v2 )(fun_app$d ?v1 ?v3 ))):pattern ((fun_app$l (fun_app$e (uum$ ?v0 ?v1 )?v2 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 B_b_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$o (fun_app$b (uur$ ?v0 ?v1 )?v2 )?v3 )(fun_app$o (fun_app$b ?v0 ?v2 )(fun_app$h ?v1 ?v3 ))):pattern ((fun_app$o (fun_app$b (uur$ ?v0 ?v1 )?v2 )?v3 )))):named a17 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_fun$ )(?v2 A$ )(?v3 A$ ))(! (= (fun_app$l (fun_app$e (uus$ ?v0 ?v1 )?v2 )?v3 )(fun_app$o (fun_app$b ?v0 ?v2 )(fun_app$i ?v1 ?v3 ))):pattern ((fun_app$l (fun_app$e (uus$ ?v0 ?v1 )?v2 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_a_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$o (fun_app$b (uut$ ?v0 ?v1 )?v2 )?v3 )(fun_app$l (fun_app$e ?v0 ?v2 )(fun_app$a ?v1 ?v3 ))):pattern ((fun_app$o (fun_app$b (uut$ ?v0 ?v1 )?v2 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_fun$ )(?v2 A$ )(?v3 A$ ))(! (= (fun_app$l (fun_app$e (uuu$ ?v0 ?v1 )?v2 )?v3 )(fun_app$l (fun_app$e ?v0 ?v2 )(fun_app$k ?v1 ?v3 ))):pattern ((fun_app$l (fun_app$e (uuu$ ?v0 ?v1 )?v2 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$k uua$ ?v0 )?v0 ):pattern ((fun_app$k uua$ ?v0 )))):named a21 ))
(assert (! (not (= (smap$ uu$ (szip$ s1$ s2$ ))(smap$a f$ s1$ ))):named a22 ))
(assert (! (forall ((?v0 A_stream$ ))(= (smap$b uua$ ?v0 )?v0 )):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_fun$ )(?v2 B_stream$ ))(= (sdrop$ ?v0 (smap$a ?v1 ?v2 ))(smap$a ?v1 (sdrop$a ?v0 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_c_prod_a_fun$ )(?v2 B_c_prod_stream$ ))(= (sdrop$ ?v0 (smap$ ?v1 ?v2 ))(smap$ ?v1 (sdrop$b ?v0 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (sdrop$ ?v0 (smap$b ?v1 ?v2 ))(smap$b ?v1 (sdrop$ ?v0 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_a_fun$ )(?v2 C_stream$ ))(= (sdrop$ ?v0 (smap$c ?v1 ?v2 ))(smap$c ?v1 (sdrop$c ?v0 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_fun$ )(?v2 A_stream$ ))(= (sdrop$a ?v0 (smap$d ?v1 ?v2 ))(smap$d ?v1 (sdrop$ ?v0 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_stream$ ))(= (sdrop$a ?v0 (smap$e ?v1 ?v2 ))(smap$e ?v1 (sdrop$a ?v0 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_b_fun$ )(?v2 C_stream$ ))(= (sdrop$a ?v0 (smap$f ?v1 ?v2 ))(smap$f ?v1 (sdrop$c ?v0 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_c_fun$ )(?v2 A_stream$ ))(= (sdrop$c ?v0 (smap$g ?v1 ?v2 ))(smap$g ?v1 (sdrop$ ?v0 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_c_fun$ )(?v2 B_stream$ ))(= (sdrop$c ?v0 (smap$h ?v1 ?v2 ))(smap$h ?v1 (sdrop$a ?v0 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_c_fun$ )(?v2 C_stream$ ))(= (sdrop$c ?v0 (smap$i ?v1 ?v2 ))(smap$i ?v1 (sdrop$c ?v0 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$ (smap$a ?v0 ?v1 )?v2 )(fun_app$a ?v0 (snth$a ?v1 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 B_c_prod_a_fun$ )(?v1 B_c_prod_stream$ )(?v2 Nat$ ))(= (snth$ (smap$ ?v0 ?v1 )?v2 )(fun_app$ ?v0 (snth$b ?v1 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$ (smap$b ?v0 ?v1 )?v2 )(fun_app$k ?v0 (snth$ ?v1 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$a (smap$d ?v0 ?v1 )?v2 )(fun_app$i ?v0 (snth$ ?v1 ?v2 )))):named a37 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$a (smap$e ?v0 ?v1 )?v2 )(fun_app$h ?v0 (snth$a ?v1 ?v2 )))):named a38 ))
(assert (! (forall ((?v0 B_c_prod_b_fun$ )(?v1 B_c_prod_stream$ )(?v2 Nat$ ))(= (snth$a (smap$j ?v0 ?v1 )?v2 )(fun_app$q ?v0 (snth$b ?v1 ?v2 )))):named a39 ))
(assert (! (forall ((?v0 A_b_c_prod_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$b (smap$k ?v0 ?v1 )?v2 )(fun_app$r ?v0 (snth$ ?v1 ?v2 )))):named a40 ))
(assert (! (forall ((?v0 B_b_c_prod_fun$ )(?v1 B_stream$ )(?v2 Nat$ ))(= (snth$b (smap$l ?v0 ?v1 )?v2 )(fun_app$s ?v0 (snth$a ?v1 ?v2 )))):named a41 ))
(assert (! (forall ((?v0 B_c_prod_b_c_prod_fun$ )(?v1 B_c_prod_stream$ )(?v2 Nat$ ))(= (snth$b (smap$m ?v0 ?v1 )?v2 )(fun_app$t ?v0 (snth$b ?v1 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_stream$ )(?v2 Nat$ ))(= (snth$ (smap$c ?v0 ?v1 )?v2 )(fun_app$u ?v0 (snth$c ?v1 ?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (smap$b ?v0 (siterate$ ?v0 ?v1 ))(siterate$ ?v0 (fun_app$k ?v0 ?v1 )))):named a44 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ ))(= (shd$ (smap$a ?v0 ?v1 ))(fun_app$a ?v0 (shd$b ?v1 )))):named a45 ))
(assert (! (forall ((?v0 B_c_prod_a_fun$ )(?v1 B_c_prod_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$ ?v0 (shd$a ?v1 )))):named a46 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (smap$b ?v0 ?v1 ))(fun_app$k ?v0 (shd$ ?v1 )))):named a47 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ ))(= (shd$b (smap$d ?v0 ?v1 ))(fun_app$i ?v0 (shd$ ?v1 )))):named a48 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (shd$b (smap$e ?v0 ?v1 ))(fun_app$h ?v0 (shd$b ?v1 )))):named a49 ))
(assert (! (forall ((?v0 B_c_prod_b_fun$ )(?v1 B_c_prod_stream$ ))(= (shd$b (smap$j ?v0 ?v1 ))(fun_app$q ?v0 (shd$a ?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_b_c_prod_fun$ )(?v1 A_stream$ ))(= (shd$a (smap$k ?v0 ?v1 ))(fun_app$r ?v0 (shd$ ?v1 )))):named a51 ))
(assert (! (forall ((?v0 B_b_c_prod_fun$ )(?v1 B_stream$ ))(= (shd$a (smap$l ?v0 ?v1 ))(fun_app$s ?v0 (shd$b ?v1 )))):named a52 ))
(assert (! (forall ((?v0 B_c_prod_b_c_prod_fun$ )(?v1 B_c_prod_stream$ ))(= (shd$a (smap$m ?v0 ?v1 ))(fun_app$t ?v0 (shd$a ?v1 )))):named a53 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_stream$ ))(= (shd$ (smap$c ?v0 ?v1 ))(fun_app$u ?v0 (shd$c ?v1 )))):named a54 ))
(assert (! (forall ((?v0 C_b_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A_stream$ )(?v3 B_stream$ ))(= (stream_all2$ ?v0 (smap$g ?v1 ?v2 )?v3 )(stream_all2$a (uub$ ?v0 ?v1 )?v2 ?v3 ))):named a55 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 A_c_fun$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (stream_all2$b ?v0 (smap$g ?v1 ?v2 )?v3 )(stream_all2$c (uuc$ ?v0 ?v1 )?v2 ?v3 ))):named a56 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_fun$ )(?v2 B_stream$ )(?v3 B_stream$ ))(= (stream_all2$d ?v0 (smap$e ?v1 ?v2 )?v3 )(stream_all2$d (uud$ ?v0 ?v1 )?v2 ?v3 ))):named a57 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 A_b_fun$ )(?v2 A_stream$ )(?v3 B_stream$ ))(= (stream_all2$d ?v0 (smap$d ?v1 ?v2 )?v3 )(stream_all2$a (uue$ ?v0 ?v1 )?v2 ?v3 ))):named a58 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_b_fun$ )(?v2 B_stream$ )(?v3 A_stream$ ))(= (stream_all2$e ?v0 (smap$e ?v1 ?v2 )?v3 )(stream_all2$e (uuf$ ?v0 ?v1 )?v2 ?v3 ))):named a59 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 A_b_fun$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (stream_all2$e ?v0 (smap$d ?v1 ?v2 )?v3 )(stream_all2$c (uug$ ?v0 ?v1 )?v2 ?v3 ))):named a60 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 B_a_fun$ )(?v2 B_stream$ )(?v3 B_stream$ ))(= (stream_all2$a ?v0 (smap$a ?v1 ?v2 )?v3 )(stream_all2$d (uuh$ ?v0 ?v1 )?v2 ?v3 ))):named a61 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_a_fun$ )(?v2 A_stream$ )(?v3 B_stream$ ))(= (stream_all2$a ?v0 (smap$b ?v1 ?v2 )?v3 )(stream_all2$a (uui$ ?v0 ?v1 )?v2 ?v3 ))):named a62 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_a_fun$ )(?v2 B_stream$ )(?v3 A_stream$ ))(= (stream_all2$c ?v0 (smap$a ?v1 ?v2 )?v3 )(stream_all2$e (uuj$ ?v0 ?v1 )?v2 ?v3 ))):named a63 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_fun$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (stream_all2$c ?v0 (smap$b ?v1 ?v2 )?v3 )(stream_all2$c (uuk$ ?v0 ?v1 )?v2 ?v3 ))):named a64 ))
(assert (! (forall ((?v0 B_c_bool_fun_fun$ )(?v1 B_stream$ )(?v2 A_c_fun$ )(?v3 A_stream$ ))(= (stream_all2$f ?v0 ?v1 (smap$g ?v2 ?v3 ))(stream_all2$e (uul$ ?v0 ?v2 )?v1 ?v3 ))):named a65 ))
(assert (! (forall ((?v0 A_c_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_c_fun$ )(?v3 A_stream$ ))(= (stream_all2$g ?v0 ?v1 (smap$g ?v2 ?v3 ))(stream_all2$c (uum$ ?v0 ?v2 )?v1 ?v3 ))):named a66 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_stream$ )(?v2 B_b_fun$ )(?v3 B_stream$ ))(= (stream_all2$d ?v0 ?v1 (smap$e ?v2 ?v3 ))(stream_all2$d (uun$ ?v0 ?v2 )?v1 ?v3 ))):named a67 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_stream$ )(?v2 A_b_fun$ )(?v3 A_stream$ ))(= (stream_all2$d ?v0 ?v1 (smap$d ?v2 ?v3 ))(stream_all2$e (uuo$ ?v0 ?v2 )?v1 ?v3 ))):named a68 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_stream$ )(?v2 B_a_fun$ )(?v3 B_stream$ ))(= (stream_all2$e ?v0 ?v1 (smap$a ?v2 ?v3 ))(stream_all2$d (uup$ ?v0 ?v2 )?v1 ?v3 ))):named a69 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_stream$ )(?v2 A_a_fun$ )(?v3 A_stream$ ))(= (stream_all2$e ?v0 ?v1 (smap$b ?v2 ?v3 ))(stream_all2$e (uuq$ ?v0 ?v2 )?v1 ?v3 ))):named a70 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_stream$ )(?v2 B_b_fun$ )(?v3 B_stream$ ))(= (stream_all2$a ?v0 ?v1 (smap$e ?v2 ?v3 ))(stream_all2$a (uur$ ?v0 ?v2 )?v1 ?v3 ))):named a71 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_b_fun$ )(?v3 A_stream$ ))(= (stream_all2$a ?v0 ?v1 (smap$d ?v2 ?v3 ))(stream_all2$c (uus$ ?v0 ?v2 )?v1 ?v3 ))):named a72 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_stream$ )(?v2 B_a_fun$ )(?v3 B_stream$ ))(= (stream_all2$c ?v0 ?v1 (smap$a ?v2 ?v3 ))(stream_all2$a (uut$ ?v0 ?v2 )?v1 ?v3 ))):named a73 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_a_fun$ )(?v3 A_stream$ ))(= (stream_all2$c ?v0 ?v1 (smap$b ?v2 ?v3 ))(stream_all2$c (uuu$ ?v0 ?v2 )?v1 ?v3 ))):named a74 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ ))(= (stl$ (smap$a ?v0 ?v1 ))(smap$a ?v0 (stl$b ?v1 )))):named a75 ))
(assert (! (forall ((?v0 B_c_prod_a_fun$ )(?v1 B_c_prod_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$a ?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$ (smap$b ?v0 ?v1 ))(smap$b ?v0 (stl$ ?v1 )))):named a77 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ ))(= (stl$b (smap$d ?v0 ?v1 ))(smap$d ?v0 (stl$ ?v1 )))):named a78 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (stl$b (smap$e ?v0 ?v1 ))(smap$e ?v0 (stl$b ?v1 )))):named a79 ))
(assert (! (forall ((?v0 B_c_prod_b_fun$ )(?v1 B_c_prod_stream$ ))(= (stl$b (smap$j ?v0 ?v1 ))(smap$j ?v0 (stl$a ?v1 )))):named a80 ))
(assert (! (forall ((?v0 A_b_c_prod_fun$ )(?v1 A_stream$ ))(= (stl$a (smap$k ?v0 ?v1 ))(smap$k ?v0 (stl$ ?v1 )))):named a81 ))
(assert (! (forall ((?v0 B_b_c_prod_fun$ )(?v1 B_stream$ ))(= (stl$a (smap$l ?v0 ?v1 ))(smap$l ?v0 (stl$b ?v1 )))):named a82 ))
(assert (! (forall ((?v0 B_c_prod_b_c_prod_fun$ )(?v1 B_c_prod_stream$ ))(= (stl$a (smap$m ?v0 ?v1 ))(smap$m ?v0 (stl$a ?v1 )))):named a83 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_stream$ ))(= (stl$c (smap$g ?v0 ?v1 ))(smap$g ?v0 (stl$ ?v1 )))):named a84 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ )(?v2 B_a_fun$ )(?v3 A_set$ ))(=> (and (member$ ?v0 (streams$ ?v1 ))(forall ((?v4 B$ ))(=> (member$a ?v4 ?v1 )(member$b (fun_app$a ?v2 ?v4 )?v3 ))))(member$c (smap$a ?v2 ?v0 )(streams$a ?v3 )))):named a85 ))
(assert (! (forall ((?v0 B_c_prod_stream$ )(?v1 B_c_prod_set$ )(?v2 B_c_prod_a_fun$ )(?v3 A_set$ ))(=> (and (member$d ?v0 (streams$b ?v1 ))(forall ((?v4 B_c_prod$ ))(=> (member$e ?v4 ?v1 )(member$b (fun_app$ ?v2 ?v4 )?v3 ))))(member$c (smap$ ?v2 ?v0 )(streams$a ?v3 )))):named a86 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ )(?v2 B_b_fun$ )(?v3 B_set$ ))(=> (and (member$ ?v0 (streams$ ?v1 ))(forall ((?v4 B$ ))(=> (member$a ?v4 ?v1 )(member$a (fun_app$h ?v2 ?v4 )?v3 ))))(member$ (smap$e ?v2 ?v0 )(streams$ ?v3 )))):named a87 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ )(?v2 A_b_fun$ )(?v3 B_set$ ))(=> (and (member$c ?v0 (streams$a ?v1 ))(forall ((?v4 A$ ))(=> (member$b ?v4 ?v1 )(member$a (fun_app$i ?v2 ?v4 )?v3 ))))(member$ (smap$d ?v2 ?v0 )(streams$ ?v3 )))):named a88 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ )(?v2 A_a_fun$ )(?v3 A_set$ ))(=> (and (member$c ?v0 (streams$a ?v1 ))(forall ((?v4 A$ ))(=> (member$b ?v4 ?v1 )(member$b (fun_app$k ?v2 ?v4 )?v3 ))))(member$c (smap$b ?v2 ?v0 )(streams$a ?v3 )))):named a89 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ )(?v2 B_stream_b_fun$ )(?v3 B_set$ ))(=> (and (member$f ?v0 (streams$c ?v1 ))(forall ((?v4 B_stream$ ))(=> (member$ ?v4 ?v1 )(member$a (fun_app$v ?v2 ?v4 )?v3 ))))(member$ (smap$n ?v2 ?v0 )(streams$ ?v3 )))):named a90 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ )(?v2 A_stream_b_fun$ )(?v3 B_set$ ))(=> (and (member$g ?v0 (streams$d ?v1 ))(forall ((?v4 A_stream$ ))(=> (member$c ?v4 ?v1 )(member$a (fun_app$w ?v2 ?v4 )?v3 ))))(member$ (smap$o ?v2 ?v0 )(streams$ ?v3 )))):named a91 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ )(?v2 B_stream_a_fun$ )(?v3 A_set$ ))(=> (and (member$f ?v0 (streams$c ?v1 ))(forall ((?v4 B_stream$ ))(=> (member$ ?v4 ?v1 )(member$b (fun_app$x ?v2 ?v4 )?v3 ))))(member$c (smap$p ?v2 ?v0 )(streams$a ?v3 )))):named a92 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ )(?v2 A_stream_a_fun$ )(?v3 A_set$ ))(=> (and (member$g ?v0 (streams$d ?v1 ))(forall ((?v4 A_stream$ ))(=> (member$c ?v4 ?v1 )(member$b (fun_app$y ?v2 ?v4 )?v3 ))))(member$c (smap$q ?v2 ?v0 )(streams$a ?v3 )))):named a93 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ )(?v2 B_b_stream_fun$ )(?v3 B_stream_set$ ))(=> (and (member$ ?v0 (streams$ ?v1 ))(forall ((?v4 B$ ))(=> (member$a ?v4 ?v1 )(member$ (fun_app$z ?v2 ?v4 )?v3 ))))(member$f (smap$r ?v2 ?v0 )(streams$c ?v3 )))):named a94 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (= (smap$a ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$a ?v0 (snth$a ?v1 ?v3 ))(snth$ ?v2 ?v3 ))))):named a95 ))
(assert (! (forall ((?v0 B_c_prod_a_fun$ )(?v1 B_c_prod_stream$ )(?v2 A_stream$ ))(= (= (smap$ ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$ ?v0 (snth$b ?v1 ?v3 ))(snth$ ?v2 ?v3 ))))):named a96 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (smap$b ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$k ?v0 (snth$ ?v1 ?v3 ))(snth$ ?v2 ?v3 ))))):named a97 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (= (smap$d ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$i ?v0 (snth$ ?v1 ?v3 ))(snth$a ?v2 ?v3 ))))):named a98 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (= (smap$e ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$h ?v0 (snth$a ?v1 ?v3 ))(snth$a ?v2 ?v3 ))))):named a99 ))
(assert (! (forall ((?v0 A_b_c_prod_fun$ )(?v1 A_stream$ )(?v2 B_c_prod_stream$ ))(= (= (smap$k ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$r ?v0 (snth$ ?v1 ?v3 ))(snth$b ?v2 ?v3 ))))):named a100 ))
(assert (! (forall ((?v0 B_b_c_prod_fun$ )(?v1 B_stream$ )(?v2 B_c_prod_stream$ ))(= (= (smap$l ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$s ?v0 (snth$a ?v1 ?v3 ))(snth$b ?v2 ?v3 ))))):named a101 ))
(assert (! (forall ((?v0 B_c_prod_b_fun$ )(?v1 B_c_prod_stream$ )(?v2 B_stream$ ))(= (= (smap$j ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$q ?v0 (snth$b ?v1 ?v3 ))(snth$a ?v2 ?v3 ))))):named a102 ))
(assert (! (forall ((?v0 B_c_prod_b_c_prod_fun$ )(?v1 B_c_prod_stream$ )(?v2 B_c_prod_stream$ ))(= (= (smap$m ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$t ?v0 (snth$b ?v1 ?v3 ))(snth$b ?v2 ?v3 ))))):named a103 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (= (smap$h ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$aa ?v0 (snth$a ?v1 ?v3 ))(snth$c ?v2 ?v3 ))))):named a104 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$b ?v4 (sset$ ?v0 ))(and (member$b ?v5 (sset$ ?v1 ))(= (fun_app$k ?v2 ?v4 )(fun_app$k ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$b ?v2 ?v0 )(smap$b ?v3 ?v1 )))(= ?v0 ?v1 ))):named a105 ))
(assert (! (forall ((?v0 B_c_prod_stream$ )(?v1 B_c_prod_stream$ )(?v2 B_c_prod_a_fun$ )(?v3 B_c_prod_a_fun$ ))(=> (and (forall ((?v4 B_c_prod$ )(?v5 B_c_prod$ ))(=> (and (member$e ?v4 (sset$a ?v0 ))(and (member$e ?v5 (sset$a ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$ ?v2 ?v0 )(smap$ ?v3 ?v1 )))(= ?v0 ?v1 ))):named a106 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ )(?v2 B_a_fun$ )(?v3 B_a_fun$ ))(=> (and (forall ((?v4 B$ )(?v5 B$ ))(=> (and (member$a ?v4 (sset$b ?v0 ))(and (member$a ?v5 (sset$b ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$a ?v2 ?v0 )(smap$a ?v3 ?v1 )))(= ?v0 ?v1 ))):named a107 ))
(assert (! (forall ((?v0 B_c_prod_stream$ )(?v1 B_c_prod_a_fun$ )(?v2 B_c_prod_a_fun$ ))(=> (forall ((?v3 B_c_prod$ ))(=> (member$e ?v3 (sset$a ?v0 ))(= (fun_app$ ?v1 ?v3 )(fun_app$ ?v2 ?v3 ))))(= (smap$ ?v1 ?v0 )(smap$ ?v2 ?v0 )))):named a108 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ ))(=> (forall ((?v3 B$ ))(=> (member$a ?v3 (sset$b ?v0 ))(= (fun_app$a ?v1 ?v3 )(fun_app$a ?v2 ?v3 ))))(= (smap$a ?v1 ?v0 )(smap$a ?v2 ?v0 )))):named a109 ))
(assert (! (forall ((?v0 B_c_prod_stream$ )(?v1 B_c_prod_stream$ )(?v2 B_c_prod_a_fun$ )(?v3 B_c_prod_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 B_c_prod$ ))(=> (member$e ?v4 (sset$a ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (smap$ ?v2 ?v0 )(smap$ ?v3 ?v1 )))):named a110 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ )(?v2 B_a_fun$ )(?v3 B_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 B$ ))(=> (member$a ?v4 (sset$b ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (smap$a ?v2 ?v0 )(smap$a ?v3 ?v1 )))):named a111 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (sdrop$b ?v0 (szip$ ?v1 ?v2 ))(szip$ (sdrop$a ?v0 ?v1 )(sdrop$c ?v0 ?v2 )))):named a112 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (sdrop$d ?v0 (szip$a ?v1 ?v2 ))(szip$a (sdrop$ ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a113 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (sdrop$e ?v0 (szip$b ?v1 ?v2 ))(szip$b (sdrop$ ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a114 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (sdrop$f ?v0 (szip$c ?v1 ?v2 ))(szip$c (sdrop$ ?v0 ?v1 )(sdrop$c ?v0 ?v2 )))):named a115 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (sdrop$g ?v0 (szip$d ?v1 ?v2 ))(szip$d (sdrop$a ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a116 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (sdrop$h ?v0 (szip$e ?v1 ?v2 ))(szip$e (sdrop$a ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a117 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_stream$ )(?v2 A_stream$ ))(= (sdrop$i ?v0 (szip$f ?v1 ?v2 ))(szip$f (sdrop$c ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a118 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (sdrop$j ?v0 (szip$g ?v1 ?v2 ))(szip$g (sdrop$c ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a119 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (sdrop$k ?v0 (szip$h ?v1 ?v2 ))(szip$h (sdrop$c ?v0 ?v1 )(sdrop$c ?v0 ?v2 )))):named a120 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 B_c_prod_stream$ ))(= (sdrop$l ?v0 (szip$i ?v1 ?v2 ))(szip$i (sdrop$ ?v0 ?v1 )(sdrop$b ?v0 ?v2 )))):named a121 ))
(assert (! (forall ((?v0 Nat$ )(?v1 C_stream$ ))(= (shd$c (sdrop$c ?v0 ?v1 ))(snth$c ?v1 ?v0 ))):named a122 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shd$ (sdrop$ ?v0 ?v1 ))(snth$ ?v1 ?v0 ))):named a123 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(= (shd$b (sdrop$a ?v0 ?v1 ))(snth$a ?v1 ?v0 ))):named a124 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_c_prod_stream$ ))(= (shd$a (sdrop$b ?v0 ?v1 ))(snth$b ?v1 ?v0 ))):named a125 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stream_all2$c ?v0 ?v1 ?v2 )(and (fun_app$l (fun_app$e ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(stream_all2$c ?v0 (stl$ ?v1 )(stl$ ?v2 ))))):named a126 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (stream_all2$a ?v0 ?v1 ?v2 )(and (fun_app$o (fun_app$b ?v0 (shd$ ?v1 ))(shd$b ?v2 ))(stream_all2$a ?v0 (stl$ ?v1 )(stl$b ?v2 ))))):named a127 ))
(assert (! (forall ((?v0 A_b_c_prod_bool_fun_fun$ )(?v1 A_stream$ )(?v2 B_c_prod_stream$ ))(= (stream_all2$h ?v0 ?v1 ?v2 )(and (fun_app$ab (fun_app$ac ?v0 (shd$ ?v1 ))(shd$a ?v2 ))(stream_all2$h ?v0 (stl$ ?v1 )(stl$a ?v2 ))))):named a128 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (stream_all2$e ?v0 ?v1 ?v2 )(and (fun_app$l (fun_app$j ?v0 (shd$b ?v1 ))(shd$ ?v2 ))(stream_all2$e ?v0 (stl$b ?v1 )(stl$ ?v2 ))))):named a129 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (stream_all2$d ?v0 ?v1 ?v2 )(and (fun_app$o (fun_app$g ?v0 (shd$b ?v1 ))(shd$b ?v2 ))(stream_all2$d ?v0 (stl$b ?v1 )(stl$b ?v2 ))))):named a130 ))
(assert (! (forall ((?v0 B_b_c_prod_bool_fun_fun$ )(?v1 B_stream$ )(?v2 B_c_prod_stream$ ))(= (stream_all2$i ?v0 ?v1 ?v2 )(and (fun_app$ab (fun_app$ad ?v0 (shd$b ?v1 ))(shd$a ?v2 ))(stream_all2$i ?v0 (stl$b ?v1 )(stl$a ?v2 ))))):named a131 ))
(assert (! (forall ((?v0 B_c_prod_a_bool_fun_fun$ )(?v1 B_c_prod_stream$ )(?v2 A_stream$ ))(= (stream_all2$j ?v0 ?v1 ?v2 )(and (fun_app$l (fun_app$ae ?v0 (shd$a ?v1 ))(shd$ ?v2 ))(stream_all2$j ?v0 (stl$a ?v1 )(stl$ ?v2 ))))):named a132 ))
(assert (! (forall ((?v0 B_c_prod_b_bool_fun_fun$ )(?v1 B_c_prod_stream$ )(?v2 B_stream$ ))(= (stream_all2$k ?v0 ?v1 ?v2 )(and (fun_app$o (fun_app$af ?v0 (shd$a ?v1 ))(shd$b ?v2 ))(stream_all2$k ?v0 (stl$a ?v1 )(stl$b ?v2 ))))):named a133 ))
(assert (! (forall ((?v0 B_c_prod_b_c_prod_bool_fun_fun$ )(?v1 B_c_prod_stream$ )(?v2 B_c_prod_stream$ ))(= (stream_all2$l ?v0 ?v1 ?v2 )(and (fun_app$ab (fun_app$ag ?v0 (shd$a ?v1 ))(shd$a ?v2 ))(stream_all2$l ?v0 (stl$a ?v1 )(stl$a ?v2 ))))):named a134 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(= (member$f ?v0 (streams$c ?v1 ))(forall ((?v2 Nat$ ))(member$ (snth$d ?v0 ?v2 )?v1 )))):named a135 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(= (member$g ?v0 (streams$d ?v1 ))(forall ((?v2 Nat$ ))(member$c (snth$e ?v0 ?v2 )?v1 )))):named a136 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(= (member$ ?v0 (streams$ ?v1 ))(forall ((?v2 Nat$ ))(member$a (snth$a ?v0 ?v2 )?v1 )))):named a137 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(= (member$c ?v0 (streams$a ?v1 ))(forall ((?v2 Nat$ ))(member$b (snth$ ?v0 ?v2 )?v1 )))):named a138 ))
(assert (! (forall ((?v0 B_c_prod_stream$ )(?v1 B_c_prod_set$ ))(= (member$d ?v0 (streams$b ?v1 ))(forall ((?v2 Nat$ ))(member$e (snth$b ?v0 ?v2 )?v1 )))):named a139 ))
(check-sat )
;(get-unsat-core )
