;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_a_stream_bool_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun s$ ()A_stream$ )
(declare-fun x$ ()A$ )
(declare-fun sa$ ()A_stream$ )
(declare-fun bot$ ()A_set$ )
(declare-fun sset$ (A_stream$ )A_set$ )
(declare-fun insert$ (A$ A_set$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun less_eq$ (A_set$ A_set$ )Bool )
(declare-fun fun_app$a (A_a_stream_bool_fun_fun$ A$ )A_stream_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(assert (! (not (= (sset$ (stl$ sa$ ))(insert$ x$ bot$ ))):named a0 ))
(assert (! (= (shd$ sa$ )x$ ):named a1 ))
(assert (! (= (sset$ s$ )(insert$ x$ bot$ )):named a2 ))
(assert (! (= (sset$ sa$ )(insert$ x$ bot$ )):named a3 ))
(assert (! (less_eq$ (sset$ (stl$ sa$ ))(insert$ x$ bot$ )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(=> (member$ ?v0 (sset$ (stl$ ?v1 )))(member$ ?v0 (sset$ ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A$ ))(member$ ?v0 (insert$ ?v0 bot$ ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_a_stream_bool_fun_fun$ ))(=> (and (member$ ?v0 (sset$ ?v1 ))(and (forall ((?v3 A_stream$ ))(fun_app$ (fun_app$a ?v2 (shd$ ?v3 ))?v3 ))(forall ((?v3 A_stream$ )(?v4 A$ ))(=> (and (member$ ?v4 (sset$ (stl$ ?v3 )))(fun_app$ (fun_app$a ?v2 ?v4 )(stl$ ?v3 )))(fun_app$ (fun_app$a ?v2 ?v4 )?v3 )))))(fun_app$ (fun_app$a ?v2 ?v0 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_set$ ))(= (member$ ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$ ?v2 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= (collect$ ?v0 )bot$ )(forall ((?v1 A$ ))(not (fun_app$b ?v0 ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 A_set$ ))(= (forall ((?v1 A$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$ ))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= bot$ (collect$ ?v0 ))(forall ((?v1 A$ ))(not (fun_app$b ?v0 ?v1 ))))):named a13 ))
(assert (! (forall ((?v0 A$ ))(= (member$ ?v0 bot$ )false )):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (insert$ ?v0 (insert$ ?v1 bot$ ))(insert$ ?v2 (insert$ ?v3 bot$ )))(or (and (= ?v0 ?v2 )(= ?v1 ?v3 ))(and (= ?v0 ?v3 )(= ?v1 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (insert$ ?v1 bot$ ))(= ?v0 ?v1 ))):named a16 ))
(check-sat )
;(get-unsat-core )
