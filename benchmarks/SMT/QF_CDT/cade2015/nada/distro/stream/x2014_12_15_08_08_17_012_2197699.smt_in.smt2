;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_list_set$ 0 )
(declare-sort A_a_list_fun$ 0 )
(declare-sort A_list_a_fun$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort A_a_stream_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort Nat_a_list_fun$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort Nat_a_stream_fun$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-sort A_list_stream_set$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_list_stream_fun$ 0 )
(declare-sort A_list_a_stream_fun$ 0 )
(declare-sort A_list_stream_a_fun$ 0 )
(declare-sort A_stream_a_list_fun$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort Nat_a_list_stream_fun$ 0 )
(declare-sort A_list_stream_bool_fun$ 0 )
(declare-sort A_list_stream_stream_set$ 0 )
(declare-sort A_stream_stream_stream_set$ 0 )
(declare-sort A_list_stream_a_list_stream_fun$ 0 )
(declare-sort A_list_stream_stream_stream_set$ 0 )
(declare-sort A_list_a_list_fun_a_list_a_list_fun_fun$ 0 )
(declare-sort A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ 0 )
(declare-sort A_list_stream_a_list_stream_fun_a_list_stream_a_list_stream_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-sort A_list_stream$ 0)
(declare-sort A_list_stream_stream$ 0)
(declare-sort A_list_stream_stream_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-sort A_stream_stream_stream$ 0)
(declare-fun shd$a (A_list_stream$)A_list$)
(declare-fun stl$a (A_list_stream$)A_list_stream$)
(declare-fun sCons$a (A_list$ A_list_stream$ )A_list_stream$)
(declare-fun shd$b (A_list_stream_stream$)A_list_stream$)
(declare-fun stl$b (A_list_stream_stream$)A_list_stream_stream$)
(declare-fun sCons$b (A_list_stream$ A_list_stream_stream$ )A_list_stream_stream$)
(declare-fun shd$c (A_list_stream_stream_stream$)A_list_stream_stream$)
(declare-fun stl$c (A_list_stream_stream_stream$)A_list_stream_stream_stream$)
(declare-fun sCons$c (A_list_stream_stream$ A_list_stream_stream_stream$ )A_list_stream_stream_stream$)
(declare-fun shd$d (A_stream_stream$)A_stream$)
(declare-fun stl$d (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$d (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-fun shd$e (A_stream_stream_stream$)A_stream_stream$)
(declare-fun stl$e (A_stream_stream_stream$)A_stream_stream_stream$)
(declare-fun sCons$e (A_stream_stream$ A_stream_stream_stream$ )A_stream_stream_stream$)
(declare-fun s$ ()A_list_stream$ )
(declare-fun x$ ()A$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun flat$ (A_list_stream$ )A_stream$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun smap$ (A_a_fun$ )A_stream_a_stream_fun$ )
(declare-fun snth$ (A_stream$ )Nat_a_fun$ )
(declare-fun sset$ (A_list_stream$ )A_list_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun sdrop$ (Nat$ A_list_stream_stream$ )A_list_stream_stream$ )
(declare-fun shift$ (A_list$ )A_stream_a_stream_fun$ )
(declare-fun smap$a (A_list_a_fun$ A_list_stream$ )A_stream$ )
(declare-fun smap$b (A_a_list_fun$ A_stream$ )A_list_stream$ )
(declare-fun smap$c (A_list_a_list_fun$ )A_list_stream_a_list_stream_fun$ )
(declare-fun smap$d (A_stream_a_fun$ A_stream_stream$ )A_stream$ )
(declare-fun smap$e (A_a_stream_fun$ A_stream$ )A_stream_stream$ )
(declare-fun smap$f (A_list_stream_a_fun$ A_list_stream_stream$ )A_stream$ )
(declare-fun smap$g (A_stream_a_list_fun$ A_stream_stream$ )A_list_stream$ )
(declare-fun smap$h (A_a_list_stream_fun$ A_stream$ )A_list_stream_stream$ )
(declare-fun smap$i (A_list_a_stream_fun$ A_list_stream$ )A_stream_stream$ )
(declare-fun snth$a (A_list_stream_stream_stream$ Nat$ )A_list_stream_stream$ )
(declare-fun snth$b (A_stream_stream_stream$ Nat$ )A_stream_stream$ )
(declare-fun snth$c (A_stream_stream$ )Nat_a_stream_fun$ )
(declare-fun snth$d (A_list_stream_stream$ )Nat_a_list_stream_fun$ )
(declare-fun snth$e (A_list_stream$ )Nat_a_list_fun$ )
(declare-fun sset$a (A_stream$ )A_set$ )
(declare-fun sset$b (A_list_stream_stream_stream$ )A_list_stream_stream_set$ )
(declare-fun sset$c (A_stream_stream_stream$ )A_stream_stream_set$ )
(declare-fun sset$d (A_stream_stream$ )A_stream_set$ )
(declare-fun sset$e (A_list_stream_stream$ )A_list_stream_set$ )
(declare-fun compow$ (Nat$ )A_list_stream_a_list_stream_fun_a_list_stream_a_list_stream_fun_fun$ )
(declare-fun member$ (A_list$ A_list_set$ )Bool )
(declare-fun sdrop$a (Nat$ A_stream_stream$ )A_stream_stream$ )
(declare-fun sdrop$b (Nat$ )A_list_stream_a_list_stream_fun$ )
(declare-fun sdrop$c (Nat$ )A_stream_a_stream_fun$ )
(declare-fun thesis$ ()Bool )
(declare-fun compow$a (Nat$ )A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ )
(declare-fun compow$b (Nat$ )A_list_a_list_fun_a_list_a_list_fun_fun$ )
(declare-fun compow$c (Nat$ )A_a_fun_a_a_fun_fun$ )
(declare-fun fun_app$ (Nat_a_fun$ Nat$ )A$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun member$b (A_list_stream_stream$ A_list_stream_stream_set$ )Bool )
(declare-fun member$c (A_stream_stream$ A_stream_stream_set$ )Bool )
(declare-fun member$d (A_stream$ A_stream_set$ )Bool )
(declare-fun member$e (A_list_stream$ A_list_stream_set$ )Bool )
(declare-fun member$f (A_list_stream_stream_stream$ A_list_stream_stream_stream_set$ )Bool )
(declare-fun member$g (A_stream_stream_stream$ A_stream_stream_stream_set$ )Bool )
(declare-fun streams$ (A_list_stream_stream_set$ )A_list_stream_stream_stream_set$ )
(declare-fun fun_app$a (Nat_a_stream_fun$ Nat$ )A_stream$ )
(declare-fun fun_app$b (Nat_a_list_stream_fun$ Nat$ )A_list_stream$ )
(declare-fun fun_app$c (Nat_a_list_fun$ Nat$ )A_list$ )
(declare-fun fun_app$d (A_list_stream_bool_fun$ A_list_stream$ )Bool )
(declare-fun fun_app$e (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$f (A_list_bool_fun$ A_list$ )Bool )
(declare-fun fun_app$g (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$h (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun fun_app$i (A_a_fun$ A$ )A$ )
(declare-fun fun_app$j (A_list_a_fun$ A_list$ )A$ )
(declare-fun fun_app$k (A_a_list_fun$ A$ )A_list$ )
(declare-fun fun_app$l (A_list_stream_a_list_stream_fun$ A_list_stream$ )A_list_stream$ )
(declare-fun fun_app$m (A_list_a_list_fun$ A_list$ )A_list$ )
(declare-fun fun_app$n (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$o (A_a_stream_fun$ A$ )A_stream$ )
(declare-fun fun_app$p (A_list_stream_a_fun$ A_list_stream$ )A$ )
(declare-fun fun_app$q (A_stream_a_list_fun$ A_stream$ )A_list$ )
(declare-fun fun_app$r (A_a_list_stream_fun$ A$ )A_list_stream$ )
(declare-fun fun_app$s (A_list_a_stream_fun$ A_list$ )A_stream$ )
(declare-fun fun_app$t (A_list_stream_a_list_stream_fun_a_list_stream_a_list_stream_fun_fun$ A_list_stream_a_list_stream_fun$ )A_list_stream_a_list_stream_fun$ )
(declare-fun fun_app$u (A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ A_stream_a_stream_fun$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$v (A_list_a_list_fun_a_list_a_list_fun_fun$ A_list_a_list_fun$ )A_list_a_list_fun$ )
(declare-fun fun_app$w (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun siterate$ (A_list_stream_a_list_stream_fun$ A_list_stream$ )A_list_stream_stream$ )
(declare-fun streams$a (A_stream_stream_set$ )A_stream_stream_stream_set$ )
(declare-fun streams$b (A_stream_set$ )A_stream_stream_set$ )
(declare-fun streams$c (A_list_stream_set$ )A_list_stream_stream_set$ )
(declare-fun streams$d (A_list_set$ )A_list_stream_set$ )
(declare-fun streams$e (A_set$ )A_stream_set$ )
(declare-fun siterate$a (A_stream_a_stream_fun$ A_stream$ )A_stream_stream$ )
(declare-fun siterate$b (A_list_a_list_fun$ A_list$ )A_list_stream$ )
(declare-fun siterate$c (A_a_fun$ )A_a_stream_fun$ )
(declare-fun stream_all$ (A_list_stream_bool_fun$ A_list_stream_stream$ )Bool )
(declare-fun stream_all$a (A_stream_bool_fun$ A_stream_stream$ )Bool )
(declare-fun stream_all$b (A_list_bool_fun$ )A_list_stream_bool_fun$ )
(declare-fun stream_all$c (A_bool_fun$ )A_stream_bool_fun$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= x$ (fun_app$ (snth$ (flat$ s$ ))?v0 ))thesis$ )):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(=> (member$ ?v0 (sset$ s$ ))(not (= ?v0 nil$ )))):named a2 ))
(assert (! (member$a x$ (sset$a (flat$ s$ ))):named a3 ))
(assert (! (forall ((?v0 A_list_stream_stream_stream$ )(?v1 Nat$ ))(member$b (snth$a ?v0 ?v1 )(sset$b ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 Nat$ ))(member$c (snth$b ?v0 ?v1 )(sset$c ?v0 ))):named a5 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 Nat$ ))(member$d (fun_app$a (snth$c ?v0 )?v1 )(sset$d ?v0 ))):named a6 ))
(assert (! (forall ((?v0 A_list_stream_stream$ )(?v1 Nat$ ))(member$e (fun_app$b (snth$d ?v0 )?v1 )(sset$e ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_list_stream$ )(?v1 Nat$ ))(member$ (fun_app$c (snth$e ?v0 )?v1 )(sset$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 Nat$ ))(member$a (fun_app$ (snth$ ?v0 )?v1 )(sset$a ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_list_stream_bool_fun$ )(?v1 A_list_stream_stream$ ))(= (stream_all$ ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$d ?v0 (fun_app$b (snth$d ?v1 )?v2 ))))):named a10 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_stream$ ))(= (stream_all$a ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$e ?v0 (fun_app$a (snth$c ?v1 )?v2 ))))):named a11 ))
(assert (! (forall ((?v0 A_list_bool_fun$ )(?v1 A_list_stream$ ))(= (fun_app$d (stream_all$b ?v0 )?v1 )(forall ((?v2 Nat$ ))(fun_app$f ?v0 (fun_app$c (snth$e ?v1 )?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (fun_app$e (stream_all$c ?v0 )?v1 )(forall ((?v2 Nat$ ))(fun_app$g ?v0 (fun_app$ (snth$ ?v1 )?v2 ))))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$ (snth$ (fun_app$h (smap$ ?v0 )?v1 ))?v2 )(fun_app$i ?v0 (fun_app$ (snth$ ?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_list_a_fun$ )(?v1 A_list_stream$ )(?v2 Nat$ ))(= (fun_app$ (snth$ (smap$a ?v0 ?v1 ))?v2 )(fun_app$j ?v0 (fun_app$c (snth$e ?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_a_list_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$c (snth$e (smap$b ?v0 ?v1 ))?v2 )(fun_app$k ?v0 (fun_app$ (snth$ ?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_stream$ )(?v2 Nat$ ))(= (fun_app$c (snth$e (fun_app$l (smap$c ?v0 )?v1 ))?v2 )(fun_app$m ?v0 (fun_app$c (snth$e ?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ )(?v2 Nat$ ))(= (fun_app$ (snth$ (smap$d ?v0 ?v1 ))?v2 )(fun_app$n ?v0 (fun_app$a (snth$c ?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$a (snth$c (smap$e ?v0 ?v1 ))?v2 )(fun_app$o ?v0 (fun_app$ (snth$ ?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_list_stream_a_fun$ )(?v1 A_list_stream_stream$ )(?v2 Nat$ ))(= (fun_app$ (snth$ (smap$f ?v0 ?v1 ))?v2 )(fun_app$p ?v0 (fun_app$b (snth$d ?v1 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_stream_a_list_fun$ )(?v1 A_stream_stream$ )(?v2 Nat$ ))(= (fun_app$c (snth$e (smap$g ?v0 ?v1 ))?v2 )(fun_app$q ?v0 (fun_app$a (snth$c ?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_a_list_stream_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$b (snth$d (smap$h ?v0 ?v1 ))?v2 )(fun_app$r ?v0 (fun_app$ (snth$ ?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_list_a_stream_fun$ )(?v1 A_list_stream$ )(?v2 Nat$ ))(= (fun_app$a (snth$c (smap$i ?v0 ?v1 ))?v2 )(fun_app$s ?v0 (fun_app$c (snth$e ?v1 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_list_stream_stream_stream$ )(?v1 A_list_stream_stream_set$ ))(= (member$f ?v0 (streams$ ?v1 ))(forall ((?v2 Nat$ ))(member$b (snth$a ?v0 ?v2 )?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_set$ ))(= (member$g ?v0 (streams$a ?v1 ))(forall ((?v2 Nat$ ))(member$c (snth$b ?v0 ?v2 )?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(= (member$c ?v0 (streams$b ?v1 ))(forall ((?v2 Nat$ ))(member$d (fun_app$a (snth$c ?v0 )?v2 )?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_list_stream_stream$ )(?v1 A_list_stream_set$ ))(= (member$b ?v0 (streams$c ?v1 ))(forall ((?v2 Nat$ ))(member$e (fun_app$b (snth$d ?v0 )?v2 )?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_list_stream$ )(?v1 A_list_set$ ))(= (member$e ?v0 (streams$d ?v1 ))(forall ((?v2 Nat$ ))(member$ (fun_app$c (snth$e ?v0 )?v2 )?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(= (member$d ?v0 (streams$e ?v1 ))(forall ((?v2 Nat$ ))(member$a (fun_app$ (snth$ ?v0 )?v2 )?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_list_stream_stream_stream$ )(?v1 A_list_stream_stream_set$ )(?v2 Nat$ ))(=> (member$f ?v0 (streams$ ?v1 ))(member$b (snth$a ?v0 ?v2 )?v1 ))):named a30 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_set$ )(?v2 Nat$ ))(=> (member$g ?v0 (streams$a ?v1 ))(member$c (snth$b ?v0 ?v2 )?v1 ))):named a31 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ )(?v2 Nat$ ))(=> (member$c ?v0 (streams$b ?v1 ))(member$d (fun_app$a (snth$c ?v0 )?v2 )?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_list_stream_stream$ )(?v1 A_list_stream_set$ )(?v2 Nat$ ))(=> (member$b ?v0 (streams$c ?v1 ))(member$e (fun_app$b (snth$d ?v0 )?v2 )?v1 ))):named a33 ))
(assert (! (forall ((?v0 A_list_stream$ )(?v1 A_list_set$ )(?v2 Nat$ ))(=> (member$e ?v0 (streams$d ?v1 ))(member$ (fun_app$c (snth$e ?v0 )?v2 )?v1 ))):named a34 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ )(?v2 Nat$ ))(=> (member$d ?v0 (streams$e ?v1 ))(member$a (fun_app$ (snth$ ?v0 )?v2 )?v1 ))):named a35 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (fun_app$h (smap$ ?v0 )?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$i ?v0 (fun_app$ (snth$ ?v1 )?v3 ))(fun_app$ (snth$ ?v2 )?v3 ))))):named a36 ))
(assert (! (forall ((?v0 A_a_list_fun$ )(?v1 A_stream$ )(?v2 A_list_stream$ ))(= (= (smap$b ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$k ?v0 (fun_app$ (snth$ ?v1 )?v3 ))(fun_app$c (snth$e ?v2 )?v3 ))))):named a37 ))
(assert (! (forall ((?v0 A_list_a_fun$ )(?v1 A_list_stream$ )(?v2 A_stream$ ))(= (= (smap$a ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$j ?v0 (fun_app$c (snth$e ?v1 )?v3 ))(fun_app$ (snth$ ?v2 )?v3 ))))):named a38 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list_stream$ )(?v2 A_list_stream$ ))(= (= (fun_app$l (smap$c ?v0 )?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$m ?v0 (fun_app$c (snth$e ?v1 )?v3 ))(fun_app$c (snth$e ?v2 )?v3 ))))):named a39 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ )(?v2 A_stream_stream$ ))(= (= (smap$e ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$o ?v0 (fun_app$ (snth$ ?v1 )?v3 ))(fun_app$a (snth$c ?v2 )?v3 ))))):named a40 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream$ ))(= (= (smap$d ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$n ?v0 (fun_app$a (snth$c ?v1 )?v3 ))(fun_app$ (snth$ ?v2 )?v3 ))))):named a41 ))
(assert (! (forall ((?v0 A_a_list_stream_fun$ )(?v1 A_stream$ )(?v2 A_list_stream_stream$ ))(= (= (smap$h ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$r ?v0 (fun_app$ (snth$ ?v1 )?v3 ))(fun_app$b (snth$d ?v2 )?v3 ))))):named a42 ))
(assert (! (forall ((?v0 A_list_a_stream_fun$ )(?v1 A_list_stream$ )(?v2 A_stream_stream$ ))(= (= (smap$i ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$s ?v0 (fun_app$c (snth$e ?v1 )?v3 ))(fun_app$a (snth$c ?v2 )?v3 ))))):named a43 ))
(assert (! (forall ((?v0 A_list_stream_a_fun$ )(?v1 A_list_stream_stream$ )(?v2 A_stream$ ))(= (= (smap$f ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$p ?v0 (fun_app$b (snth$d ?v1 )?v3 ))(fun_app$ (snth$ ?v2 )?v3 ))))):named a44 ))
(assert (! (forall ((?v0 A_stream_a_list_fun$ )(?v1 A_stream_stream$ )(?v2 A_list_stream$ ))(= (= (smap$g ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$q ?v0 (fun_app$a (snth$c ?v1 )?v3 ))(fun_app$c (snth$e ?v2 )?v3 ))))):named a45 ))
(assert (! (forall ((?v0 A_list_stream_a_list_stream_fun$ )(?v1 A_list_stream$ )(?v2 Nat$ ))(= (fun_app$b (snth$d (siterate$ ?v0 ?v1 ))?v2 )(fun_app$l (fun_app$t (compow$ ?v2 )?v0 )?v1 ))):named a46 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$a (snth$c (siterate$a ?v0 ?v1 ))?v2 )(fun_app$h (fun_app$u (compow$a ?v2 )?v0 )?v1 ))):named a47 ))
(assert (! (forall ((?v0 A_list_a_list_fun$ )(?v1 A_list$ )(?v2 Nat$ ))(= (fun_app$c (snth$e (siterate$b ?v0 ?v1 ))?v2 )(fun_app$m (fun_app$v (compow$b ?v2 )?v0 )?v1 ))):named a48 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 Nat$ ))(= (fun_app$ (snth$ (fun_app$o (siterate$c ?v0 )?v1 ))?v2 )(fun_app$i (fun_app$w (compow$c ?v2 )?v0 )?v1 ))):named a49 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_stream_stream$ ))(= (shd$b (sdrop$ ?v0 ?v1 ))(fun_app$b (snth$d ?v1 )?v0 ))):named a50 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_stream$ ))(= (shd$d (sdrop$a ?v0 ?v1 ))(fun_app$a (snth$c ?v1 )?v0 ))):named a51 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_stream$ ))(= (shd$a (fun_app$l (sdrop$b ?v0 )?v1 ))(fun_app$c (snth$e ?v1 )?v0 ))):named a52 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shd$ (fun_app$h (sdrop$c ?v0 )?v1 ))(fun_app$ (snth$ ?v1 )?v0 ))):named a53 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ ))(! (=> (not (= ?v0 nil$ ))(= (flat$ (sCons$a ?v0 ?v1 ))(fun_app$h (shift$ ?v0 )(flat$ ?v1 )))):pattern ((sCons$a ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_stream_stream$ )(?v2 Nat$ ))(= (fun_app$b (snth$d (sdrop$ ?v0 ?v1 ))?v2 )(fun_app$b (snth$d ?v1 )(plus$ ?v0 ?v2 )))):named a55 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_stream$ )(?v2 Nat$ ))(= (fun_app$a (snth$c (sdrop$a ?v0 ?v1 ))?v2 )(fun_app$a (snth$c ?v1 )(plus$ ?v0 ?v2 )))):named a56 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list_stream$ )(?v2 Nat$ ))(= (fun_app$c (snth$e (fun_app$l (sdrop$b ?v0 )?v1 ))?v2 )(fun_app$c (snth$e ?v1 )(plus$ ?v0 ?v2 )))):named a57 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$ (snth$ (fun_app$h (sdrop$c ?v0 )?v1 ))?v2 )(fun_app$ (snth$ ?v1 )(plus$ ?v0 ?v2 )))):named a58 ))
(assert (! (forall ((?v0 A_list_stream_stream$ ))(! (= (fun_app$b (snth$d ?v0 )zero$ )(shd$b ?v0 )):pattern ((snth$d ?v0 )))):named a59 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(! (= (fun_app$a (snth$c ?v0 )zero$ )(shd$d ?v0 )):pattern ((snth$c ?v0 )))):named a60 ))
(assert (! (forall ((?v0 A_list_stream$ ))(! (= (fun_app$c (snth$e ?v0 )zero$ )(shd$a ?v0 )):pattern ((snth$e ?v0 )))):named a61 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$ (snth$ ?v0 )zero$ )(shd$ ?v0 )):pattern ((snth$ ?v0 )))):named a62 ))
(assert (! (forall ((?v0 A_list_stream_stream$ )(?v1 Nat$ ))(! (= (fun_app$b (snth$d ?v0 )(suc$ ?v1 ))(fun_app$b (snth$d (stl$b ?v0 ))?v1 )):pattern ((fun_app$b (snth$d ?v0 )(suc$ ?v1 ))))):named a63 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 Nat$ ))(! (= (fun_app$a (snth$c ?v0 )(suc$ ?v1 ))(fun_app$a (snth$c (stl$d ?v0 ))?v1 )):pattern ((fun_app$a (snth$c ?v0 )(suc$ ?v1 ))))):named a64 ))
(assert (! (forall ((?v0 A_list_stream$ )(?v1 Nat$ ))(! (= (fun_app$c (snth$e ?v0 )(suc$ ?v1 ))(fun_app$c (snth$e (stl$a ?v0 ))?v1 )):pattern ((fun_app$c (snth$e ?v0 )(suc$ ?v1 ))))):named a65 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 Nat$ ))(! (= (fun_app$ (snth$ ?v0 )(suc$ ?v1 ))(fun_app$ (snth$ (stl$ ?v0 ))?v1 )):pattern ((fun_app$ (snth$ ?v0 )(suc$ ?v1 ))))):named a66 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_stream$ )(?v2 A_list$ )(?v3 A_list_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a67 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (fun_app$h (shift$ ?v0 )?v1 )(fun_app$h (shift$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a68 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_list_stream$ ))(= (fun_app$l (sdrop$b ?v0 )(fun_app$l (sdrop$b ?v1 )?v2 ))(fun_app$l (sdrop$b (plus$ ?v1 ?v0 ))?v2 ))):named a69 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_stream$ ))(= (fun_app$h (sdrop$c ?v0 )(fun_app$h (sdrop$c ?v1 )?v2 ))(fun_app$h (sdrop$c (plus$ ?v1 ?v0 ))?v2 ))):named a70 ))
(check-sat )
;(get-unsat-core )
