;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort Nat_a_bool_fun_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun p$ ()Nat$ )
(declare-fun s$ ()A_stream$ )
(declare-fun xs$ ()A_list$ )
(declare-fun nth$ (A_list$ Nat$ )A$ )
(declare-fun less$ (Nat$ )Nat_bool_fun$ )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun shift$ (A_list$ A_stream$ )A_stream$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (Nat_a_bool_fun_fun$ Nat$ )A_bool_fun$ )
(declare-fun fun_app$c (A_list_bool_fun$ A_list$ )Bool )
(declare-fun fun_app$d (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(assert (! (not (= (snth$ (shift$ xs$ s$ )p$ )(nth$ xs$ p$ ))):named a0 ))
(assert (! (fun_app$ (less$ p$ )(size$ xs$ )):named a1 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (shift$ ?v0 ?v1 )(shift$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a2 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= ?v0 ?v1 )(and (= (size$ ?v0 )(size$ ?v1 ))(forall ((?v2 Nat$ ))(=> (fun_app$ (less$ ?v2 )(size$ ?v0 ))(= (nth$ ?v0 ?v2 )(nth$ ?v1 ?v2 ))))))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_bool_fun_fun$ ))(= (forall ((?v2 Nat$ ))(=> (fun_app$ (less$ ?v2 )?v0 )(exists ((?v3 A$ ))(fun_app$a (fun_app$b ?v1 ?v2 )?v3 ))))(exists ((?v2 A_list$ ))(and (= (size$ ?v2 )?v0 )(forall ((?v3 Nat$ ))(=> (fun_app$ (less$ ?v3 )?v0 )(fun_app$a (fun_app$b ?v1 ?v3 )(nth$ ?v2 ?v3 )))))))):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (and (= (size$ ?v0 )(size$ ?v1 ))(forall ((?v2 Nat$ ))(=> (fun_app$ (less$ ?v2 )(size$ ?v0 ))(= (nth$ ?v0 ?v2 )(nth$ ?v1 ?v2 )))))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_list_bool_fun$ )(?v1 A_list$ ))(=> (forall ((?v2 A_list$ ))(=> (forall ((?v3 A_list$ ))(=> (fun_app$ (less$ (size$ ?v3 ))(size$ ?v2 ))(fun_app$c ?v0 ?v3 )))(fun_app$c ?v0 ?v2 )))(fun_app$c ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(= (= ?v0 ?v1 )false ))):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_list$ ))(= (size$ ?v1 )?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(not (= ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$ (less$ ?v0 )?v1 )(fun_app$ (less$ ?v1 )?v0 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_nat_bool_fun_fun$ ))(=> (and (=> (fun_app$ (less$ ?v0 )?v1 )(fun_app$ (fun_app$d ?v2 ?v1 )?v0 ))(and (=> (= ?v0 ?v1 )(fun_app$ (fun_app$d ?v2 ?v1 )?v0 ))(=> (fun_app$ (less$ ?v1 )?v0 )(fun_app$ (fun_app$d ?v2 ?v1 )?v0 ))))(fun_app$ (fun_app$d ?v2 ?v1 )?v0 ))):named a11 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (not (fun_app$ ?v0 ?v2 ))(exists ((?v3 Nat$ ))(and (fun_app$ (less$ ?v3 )?v2 )(not (fun_app$ ?v0 ?v3 ))))))(fun_app$ ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$ (less$ ?v0 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (not (= ?v0 ?v1 ))(and (=> (fun_app$ (less$ ?v0 )?v1 )false )(=> (fun_app$ (less$ ?v1 )?v0 )false )))false )):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(=> (fun_app$ (less$ ?v0 )?v0 )false )):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )?v1 )(not (= ?v1 ?v0 )))):named a16 ))
(check-sat )
;(get-unsat-core )
