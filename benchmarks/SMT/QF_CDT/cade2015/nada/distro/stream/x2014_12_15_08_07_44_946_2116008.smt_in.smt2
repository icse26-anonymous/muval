;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort A_stream_stream_a_stream_stream_fun$ 0 )
(declare-sort A_stream_stream_stream_a_stream_stream_stream_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-sort A_stream_stream$ 0)
(declare-sort A_stream_stream_stream$ 0)
(declare-fun shd$a (A_stream_stream$)A_stream$)
(declare-fun stl$a (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$a (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-fun shd$b (A_stream_stream_stream$)A_stream_stream$)
(declare-fun stl$b (A_stream_stream_stream$)A_stream_stream_stream$)
(declare-fun sCons$b (A_stream_stream$ A_stream_stream_stream$ )A_stream_stream_stream$)
(declare-fun n$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun id$ ()A_a_fun$ )
(declare-fun id$a ()A_stream_stream_a_stream_stream_fun$ )
(declare-fun id$b ()A_stream_a_stream_fun$ )
(declare-fun id$c ()A_stream_stream_stream_a_stream_stream_stream_fun$ )
(declare-fun smap$ (A_stream_a_stream_fun$ )A_stream_stream_a_stream_stream_fun$ )
(declare-fun shift$ (A_list$ )A_stream_a_stream_fun$ )
(declare-fun smap$a (A_a_fun$ )A_stream_a_stream_fun$ )
(declare-fun smap$b (A_stream_stream_a_stream_stream_fun$ )A_stream_stream_stream_a_stream_stream_stream_fun$ )
(declare-fun append$ (A_list$ A_list$ )A_list$ )
(declare-fun fun_app$ (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun fun_app$a (A_stream_stream_a_stream_stream_fun$ A_stream_stream$ )A_stream_stream$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (A_stream_stream_stream_a_stream_stream_stream_fun$ A_stream_stream_stream$ )A_stream_stream_stream$ )
(declare-fun siterate$ (A_a_fun$ A$ )A_stream$ )
(declare-fun replicate$ (Nat$ A$ )A_list$ )
(declare-fun siterate$a (A_stream_a_stream_fun$ A_stream$ )A_stream_stream$ )
(assert (! (not (= (fun_app$ (shift$ (replicate$ n$ x$ ))(siterate$ id$ x$ ))(siterate$ id$ x$ ))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (fun_app$ (shift$ ?v0 )?v1 )(fun_app$ (shift$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a1 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(! (= (fun_app$a id$a ?v0 )?v0 ):pattern ((fun_app$a id$a ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$ id$b ?v0 )?v0 ):pattern ((fun_app$ id$b ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b id$ ?v0 )?v0 ):pattern ((fun_app$b id$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(! (= (fun_app$a id$a ?v0 )?v0 ):pattern ((fun_app$a id$a ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$ id$b ?v0 )?v0 ):pattern ((fun_app$ id$b ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b id$ ?v0 )?v0 ):pattern ((fun_app$b id$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (shd$ (siterate$ ?v0 ?v1 ))?v1 )):named a8 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream$ ))(= (fun_app$a (smap$ ?v0 )(siterate$a ?v0 ?v1 ))(siterate$a ?v0 (fun_app$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$ (smap$a ?v0 )(siterate$ ?v0 ?v1 ))(siterate$ ?v0 (fun_app$b ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (stl$ (siterate$ ?v0 ?v1 ))(siterate$ ?v0 (fun_app$b ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (siterate$ ?v0 ?v1 )(sCons$ ?v1 (siterate$ ?v0 (fun_app$b ?v0 ?v1 ))))):named a12 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_stream$ ))(= (fun_app$ (shift$ (append$ ?v0 ?v1 ))?v2 )(fun_app$ (shift$ ?v0 )(fun_app$ (shift$ ?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$ (shift$ nil$ )?v0 )?v0 ):pattern ((fun_app$ (shift$ nil$ )?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ ))(= (fun_app$c (smap$b id$a )?v0 )?v0 )):named a15 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(= (fun_app$a (smap$ id$b )?v0 )?v0 )):named a16 ))
(assert (! (forall ((?v0 A_stream$ ))(= (fun_app$ (smap$a id$ )?v0 )?v0 )):named a17 ))
(assert (! (= (smap$b id$a )id$c ):named a18 ))
(assert (! (= (smap$ id$b )id$a ):named a19 ))
(assert (! (= (smap$a id$ )id$b ):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ ))(= (stl$a (fun_app$a (smap$ ?v0 )?v1 ))(fun_app$a (smap$ ?v0 )(stl$a ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$ (fun_app$ (smap$a ?v0 )?v1 ))(fun_app$ (smap$a ?v0 )(stl$ ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ ))(= (shd$a (fun_app$a (smap$ ?v0 )?v1 ))(fun_app$ ?v0 (shd$a ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (fun_app$ (smap$a ?v0 )?v1 ))(fun_app$b ?v0 (shd$ ?v1 )))):named a25 ))
(check-sat )
;(get-unsat-core )
