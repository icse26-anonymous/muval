;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_list_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-sort A_list_stream$ 0)
(declare-fun shd$ (A_list_stream$)A_list$)
(declare-fun stl$ (A_list_stream$)A_list_stream$)
(declare-fun sCons$ (A_list$ A_list_stream$ )A_list_stream$)
(declare-fun s$ ()A_list_stream$ )
(declare-fun y$ ()Nat$ )
(declare-fun sa$ ()A_list_stream$ )
(declare-fun less$ (Nat$ )Nat_bool_fun$ )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun sset$ (A_list_stream$ )A_list_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun member$ (A_list$ A_list_set$ )Bool )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$a (A_list_bool_fun$ A_list$ )Bool )
(assert (! (not (fun_app$ (less$ zero$ )(size$ (shd$ sa$ )))):named a0 ))
(assert (! (forall ((?v0 A_list$ ))(=> (member$ ?v0 (sset$ sa$ ))(not (= ?v0 nil$ )))):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(=> (member$ ?v0 (sset$ s$ ))(not (= ?v0 nil$ )))):named a2 ))
(assert (! (not (fun_app$ (less$ y$ )(size$ (shd$ sa$ )))):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (= ?v0 zero$ ))(fun_app$ (less$ zero$ )?v0 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (fun_app$ (less$ zero$ )?v0 ))(= ?v0 zero$ ))):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (less$ ?v0 )zero$ )false ):pattern ((less$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_list$ ))(= (fun_app$ (less$ zero$ )(size$ ?v0 ))(not (= ?v0 nil$ )))):named a7 ))
(assert (! (forall ((?v0 A_list_bool_fun$ )(?v1 A_list$ ))(=> (forall ((?v2 A_list$ ))(=> (forall ((?v3 A_list$ ))(=> (fun_app$ (less$ (size$ ?v3 ))(size$ ?v2 ))(fun_app$a ?v0 ?v3 )))(fun_app$a ?v0 ?v2 )))(fun_app$a ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(=> (=> (= ?v0 zero$ )false )(fun_app$ (less$ zero$ )?v0 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )?v1 )(not (= ?v1 zero$ )))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(=> (fun_app$ (less$ ?v0 )zero$ )false )):named a11 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (and (fun_app$ ?v0 zero$ )(forall ((?v2 Nat$ ))(=> (and (fun_app$ (less$ zero$ )?v2 )(not (fun_app$ ?v0 ?v2 )))(exists ((?v3 Nat$ ))(and (fun_app$ (less$ ?v3 )?v2 )(not (fun_app$ ?v0 ?v3 )))))))(fun_app$ ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$ (less$ ?v0 )zero$ ))):named a13 ))
(assert (! (= (size$ nil$ )zero$ ):named a14 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (size$ ?v0 )zero$ )(= ?v0 nil$ ))):named a15 ))
(check-sat )
;(get-unsat-core )
