;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_treeFI$ 0 )
(declare-sort A_treeFI_set$ 0 )
(declare-sort A_treeFI_list$ 0)
(declare-fun nil$ ()A_treeFI_list$)
(declare-fun hd$ (A_treeFI_list$)A_treeFI$)
(declare-fun tl$ (A_treeFI_list$)A_treeFI_list$)
(declare-fun cons$ (A_treeFI$ A_treeFI_list$ )A_treeFI_list$)
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-fun as$ ()A_stream$ )
(declare-fun tr$ ()A_treeFI$ )
(declare-fun phi$ (A_stream$ A_treeFI$ )Bool )
(declare-fun set$ (A_treeFI_list$ )A_treeFI_set$ )
(declare-fun sub$ (A_treeFI$ )A_treeFI_list$ )
(declare-fun member$ (A_treeFI$ A_treeFI_set$ )Bool )
(declare-fun properPath$ (A_stream$ A_treeFI$ )Bool )
(assert (! (not (exists ((?v0 A_treeFI$ ))(and (member$ ?v0 (set$ (sub$ tr$ )))(or (phi$ (stl$ as$ )?v0 )(properPath$ (stl$ as$ )?v0 ))))):named a0 ))
(assert (! (properPath$ as$ tr$ ):named a1 ))
(check-sat )
;(get-unsat-core )
