;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A_treeFI$ 0 )
(declare-sort A_treeFI_set$ 0 )
(declare-sort A_treeFI_list$ 0)
(declare-fun nil$ ()A_treeFI_list$)
(declare-fun hd$ (A_treeFI_list$)A_treeFI$)
(declare-fun tl$ (A_treeFI_list$)A_treeFI_list$)
(declare-fun cons$ (A_treeFI$ A_treeFI_list$ )A_treeFI_list$)
(declare-fun set$ (A_treeFI_list$ )A_treeFI_set$ )
(declare-fun sub$ (A_treeFI$ )A_treeFI_list$ )
(declare-fun tra$ ()A_treeFI$ )
(declare-fun member$ (A_treeFI$ A_treeFI_set$ )Bool )
(declare-fun infiniteTr$ (A_treeFI$ )Bool )
(assert (! (not (exists ((?v0 A_treeFI$ ))(and (member$ ?v0 (set$ (sub$ tra$ )))(infiniteTr$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_treeFI$ ))(=> (and (infiniteTr$ ?v0 )(forall ((?v1 A_treeFI$ )(?v2 A_treeFI$ ))(=> (and (= ?v0 ?v2 )(and (member$ ?v1 (set$ (sub$ ?v2 )))(infiniteTr$ ?v1 )))false )))false )):named a1 ))
(check-sat )
;(get-unsat-core )
