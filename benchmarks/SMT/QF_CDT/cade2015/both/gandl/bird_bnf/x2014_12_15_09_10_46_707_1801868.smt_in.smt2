; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 461
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun$ 0)
(declare-sort A_b_a_fun_fun$ 0)
(declare-sort B_a_a_fun_fun$ 0)
(declare-sort B_a_b_fun_fun$ 0)
(declare-sort B_a_fun_a_fun$ 0)
(declare-sort B_a_fun_b_fun$ 0)
(declare-sort B_b_a_fun_fun$ 0)
(declare-sort B_b_b_fun_fun$ 0)
(declare-sort A_a_b_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_b_a_fun_a_fun_fun$ 0)
(declare-sort A_b_b_a_fun_fun_fun$ 0)
(declare-sort A_b_fun_a_a_fun_fun$ 0)
(declare-sort B_a_a_fun_a_fun_fun$ 0)
(declare-sort B_a_b_a_fun_fun_fun$ 0)
(declare-sort B_a_fun_b_a_fun_fun$ 0)
(declare-sort B_a_fun_b_b_fun_fun$ 0)
(declare-sort B_b_a_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_a_fun_fun$ 0)
(declare-sort B_b_b_a_fun_fun_fun$ 0)
(declare-sort B_b_fun_b_a_fun_fun$ 0)
(declare-sort B_b_fun_b_b_fun_fun$ 0)
(declare-sort A_a_fun_b_a_a_fun_fun_fun$ 0)
(declare-sort B_a_a_fun_fun_b_a_fun_fun$ 0)
(declare-sort B_a_fun_a_b_a_fun_fun_fun$ 0)
(declare-sort B_a_fun_b_b_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_a_fun_fun$ 0)
(declare-sort B_b_fun_b_b_a_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0)
(declare-sort A_b_a_fun_fun_b_a_a_fun_fun_fun$ 0)
(declare-sort B_a_a_fun_fun_a_b_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_b_a_fun_fun_fun$ 0)
(declare-sort B_b_b_fun_fun_b_b_b_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$ 0)
(declare-sort B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$ 0)
(declare-sort A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$ 0)
(declare-sort A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$ 0)
(declare-sort B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$ 0)
(declare-codatatypes () ((A_tree$ (node$ (root$ A$) (left$ A_tree$) (right$ A_tree$)))
  (B_a_fun_tree$ (node$a (select$ B_a_fun$) (selecta$ B_a_fun_tree$) (selectb$ B_a_fun_tree$)))
  (B_tree$ (node$b (root$a B$) (left$a B_tree$) (right$a B_tree$)))
  (B_b_fun_tree$ (node$c (selectc$ B_b_fun$) (selectd$ B_b_fun_tree$) (selecte$ B_b_fun_tree$)))
  (A_a_fun_tree$ (node$d (selectf$ A_a_fun$) (selectg$ A_a_fun_tree$) (selecth$ A_a_fun_tree$)))
  (B_b_a_fun_fun_tree$ (node$e (selecti$ B_b_a_fun_fun$) (selectj$ B_b_a_fun_fun_tree$) (selectk$ B_b_a_fun_fun_tree$)))
  (B_a_a_fun_fun_tree$ (node$f (selectl$ B_a_a_fun_fun$) (selectm$ B_a_a_fun_fun_tree$) (selectn$ B_a_a_fun_fun_tree$)))
  (A_b_a_fun_fun_tree$ (node$g (selecto$ A_b_a_fun_fun$) (selectp$ A_b_a_fun_fun_tree$) (selectq$ A_b_a_fun_fun_tree$)))
  (A_b_fun_tree$ (node$h (selectr$ A_b_fun$) (selects$ A_b_fun_tree$) (selectt$ A_b_fun_tree$)))
  (A_a_a_fun_fun_tree$ (node$i (selectu$ A_a_a_fun_fun$) (selectv$ A_a_a_fun_fun_tree$) (selectw$ A_a_a_fun_fun_tree$)))
  (A_b_a_fun_a_fun_fun_tree$ (node$j (selectx$ A_b_a_fun_a_fun_fun$) (selecty$ A_b_a_fun_a_fun_fun_tree$) (selectz$ A_b_a_fun_a_fun_fun_tree$)))
  (B_a_fun_a_fun_tree$ (node$k (selecua$ B_a_fun_a_fun$) (selecub$ B_a_fun_a_fun_tree$) (selecuc$ B_a_fun_a_fun_tree$)))
  (A_b_b_a_fun_fun_fun_tree$ (node$l (selecud$ A_b_b_a_fun_fun_fun$) (selecue$ A_b_b_a_fun_fun_fun_tree$) (selecuf$ A_b_b_a_fun_fun_fun_tree$)))
  (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ (node$m (selecug$ B_a_a_fun_fun_a_b_a_fun_fun_fun$) (selecuh$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$) (selecui$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)))
  (B_b_b_a_fun_fun_fun_tree$ (node$n (selecuj$ B_b_b_a_fun_fun_fun$) (selecuk$ B_b_b_a_fun_fun_fun_tree$) (selecul$ B_b_b_a_fun_fun_fun_tree$)))
  (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ (node$o (selecum$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$) (selecun$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$) (selecuo$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)))
  (B_a_b_a_fun_fun_fun_tree$ (node$p (selecup$ B_a_b_a_fun_fun_fun$) (selecuq$ B_a_b_a_fun_fun_fun_tree$) (selecur$ B_a_b_a_fun_fun_fun_tree$)))
  (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ (node$q (selecus$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$) (selecut$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$) (selecuu$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)))
  (B_b_a_a_fun_fun_fun_tree$ (node$r (selecuv$ B_b_a_a_fun_fun_fun$) (selecuw$ B_b_a_a_fun_fun_fun_tree$) (selecux$ B_b_a_a_fun_fun_fun_tree$)))
  (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ (node$s (selecuy$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$) (selecuz$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$) (selecva$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)))
  (B_b_b_fun_fun_tree$ (node$t (selecvb$ B_b_b_fun_fun$) (selecvc$ B_b_b_fun_fun_tree$) (selecvd$ B_b_b_fun_fun_tree$)))
  (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ (node$u (selecve$ B_b_b_fun_fun_b_b_b_fun_fun_fun$) (selecvf$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$) (selecvg$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)))
  (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ (node$v (selecvh$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$) (selecvi$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$) (selecvj$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)))
  (A_a_b_a_fun_fun_fun_tree$ (node$w (selecvk$ A_a_b_a_fun_fun_fun$) (selecvl$ A_a_b_a_fun_fun_fun_tree$) (selecvm$ A_a_b_a_fun_fun_fun_tree$)))
  (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ (node$x (selecvn$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$) (selecvo$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$) (selecvp$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)))
  (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ (node$y (selecvq$ A_a_a_fun_fun_a_a_a_fun_fun_fun$) (selecvr$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) (selecvs$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)))
  (A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ (node$z (selecvt$ A_b_a_fun_fun_b_a_a_fun_fun_fun$) (selecvu$ A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$) (selecvv$ A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)))
  (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ (node$aa (selecvw$ B_b_a_fun_fun_b_b_a_fun_fun_fun$) (selecvx$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$) (selecvy$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)))
  (B_a_fun_b_a_fun_fun_tree$ (node$ab (selecvz$ B_a_fun_b_a_fun_fun$) (selecwa$ B_a_fun_b_a_fun_fun_tree$) (selecwb$ B_a_fun_b_a_fun_fun_tree$)))
  (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ (node$ac (selecwc$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$) (selecwd$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$) (selecwe$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)))
  (B_b_fun_b_a_fun_fun_tree$ (node$ad (selecwf$ B_b_fun_b_a_fun_fun$) (selecwg$ B_b_fun_b_a_fun_fun_tree$) (selecwh$ B_b_fun_b_a_fun_fun_tree$)))
  (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ (node$ae (selecwi$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$) (selecwj$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$) (selecwk$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)))
  (B_a_b_fun_fun_tree$ (node$af (selecwl$ B_a_b_fun_fun$) (selecwm$ B_a_b_fun_fun_tree$) (selecwn$ B_a_b_fun_fun_tree$)))
  (B_a_fun_b_b_fun_fun_tree$ (node$ag (selecwo$ B_a_fun_b_b_fun_fun$) (selecwp$ B_a_fun_b_b_fun_fun_tree$) (selecwq$ B_a_fun_b_b_fun_fun_tree$)))
  (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ (node$ah (selecwr$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$) (selecws$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$) (selecwt$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)))
  (B_b_fun_b_b_fun_fun_tree$ (node$ai (selecwu$ B_b_fun_b_b_fun_fun$) (selecwv$ B_b_fun_b_b_fun_fun_tree$) (selecww$ B_b_fun_b_b_fun_fun_tree$)))
  (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ (node$aj (selecwx$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$) (selecwy$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$) (selecwz$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)))
  (A_b_fun_a_a_fun_fun_tree$ (node$ak (selecxa$ A_b_fun_a_a_fun_fun$) (selecxb$ A_b_fun_a_a_fun_fun_tree$) (selecxc$ A_b_fun_a_a_fun_fun_tree$)))
  (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ (node$al (selecxd$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$) (selecxe$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$) (selecxf$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)))
  (A_a_fun_a_a_fun_fun_tree$ (node$am (selecxg$ A_a_fun_a_a_fun_fun$) (selecxh$ A_a_fun_a_a_fun_fun_tree$) (selecxi$ A_a_fun_a_a_fun_fun_tree$)))
  (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ (node$an (selecxj$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (selecxk$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$) (selecxl$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)))
  (B_b_a_fun_a_fun_fun_tree$ (node$ao (selecxm$ B_b_a_fun_a_fun_fun$) (selecxn$ B_b_a_fun_a_fun_fun_tree$) (selecxo$ B_b_a_fun_a_fun_fun_tree$)))
  (B_b_a_fun_fun_b_a_fun_fun_tree$ (node$ap (selecxp$ B_b_a_fun_fun_b_a_fun_fun$) (selecxq$ B_b_a_fun_fun_b_a_fun_fun_tree$) (selecxr$ B_b_a_fun_fun_b_a_fun_fun_tree$)))
  (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ (node$aq (selecxs$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$) (selecxt$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$) (selecxu$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)))
  (B_a_a_fun_a_fun_fun_tree$ (node$ar (selecxv$ B_a_a_fun_a_fun_fun$) (selecxw$ B_a_a_fun_a_fun_fun_tree$) (selecxx$ B_a_a_fun_a_fun_fun_tree$)))
  (B_a_a_fun_fun_b_a_fun_fun_tree$ (node$as (selecxy$ B_a_a_fun_fun_b_a_fun_fun$) (selecxz$ B_a_a_fun_fun_b_a_fun_fun_tree$) (selecya$ B_a_a_fun_fun_b_a_fun_fun_tree$)))
  (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ (node$at (selecyb$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$) (selecyc$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$) (selecyd$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)))
  (A_a_fun_a_fun_tree$ (node$au (selecye$ A_a_fun_a_fun$) (selecyf$ A_a_fun_a_fun_tree$) (selecyg$ A_a_fun_a_fun_tree$)))
  (B_b_fun_b_b_a_fun_fun_fun_tree$ (node$av (selecyh$ B_b_fun_b_b_a_fun_fun_fun$) (selecyi$ B_b_fun_b_b_a_fun_fun_fun_tree$) (selecyj$ B_b_fun_b_b_a_fun_fun_fun_tree$)))
  (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ (node$aw (selecyk$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$) (selecyl$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$) (selecym$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)))
  (B_a_fun_b_b_a_fun_fun_fun_tree$ (node$ax (selecyn$ B_a_fun_b_b_a_fun_fun_fun$) (selecyo$ B_a_fun_b_b_a_fun_fun_fun_tree$) (selecyp$ B_a_fun_b_b_a_fun_fun_fun_tree$)))
  (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ (node$ay (selecyq$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$) (selecyr$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$) (selecys$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)))
  (A_a_fun_b_a_a_fun_fun_fun_tree$ (node$az (selecyt$ A_a_fun_b_a_a_fun_fun_fun$) (selecyu$ A_a_fun_b_a_a_fun_fun_fun_tree$) (selecyv$ A_a_fun_b_a_a_fun_fun_fun_tree$)))
  (B_a_fun_a_b_a_fun_fun_fun_tree$ (node$ba (selecyw$ B_a_fun_a_b_a_fun_fun_fun$) (selecyx$ B_a_fun_a_b_a_fun_fun_fun_tree$) (selecyy$ B_a_fun_a_b_a_fun_fun_fun_tree$)))))
(declare-datatypes () ((Dir$ (l$) (r$))
  (Dir_list$ (nil$) (cons$ (hd$ Dir$) (tl$ Dir_list$)))))
(declare-codatatypes () ((B_a_fun_b_fun_tree$ (node$bb (selecyz$ B_a_fun_b_fun$) (selecza$ B_a_fun_b_fun_tree$) (seleczb$ B_a_fun_b_fun_tree$)))))
(declare-fun f$ () B_a_fun_tree$)
(declare-fun x$ () B_tree$)
(declare-fun left$b (B_a_fun_tree$) B_a_fun_tree$)
(declare-fun root$b (B_a_fun_tree$) B_a_fun$)
(declare-fun mirror$ (A_tree$) A_tree$)
(declare-fun right$b (B_a_fun_tree$) B_a_fun_tree$)
(declare-fun tree_C$ () B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun tree_K$ () B_a_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_S$ () B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun fun_app$ (B_a_a_fun_fun$ B$) A_a_fun$)
(declare-fun mirror$a (B_a_fun_tree$) B_a_fun_tree$)
(declare-fun mirror$b (B_tree$) B_tree$)
(declare-fun mirror$c (B_b_fun_tree$) B_b_fun_tree$)
(declare-fun mirror$d (A_b_a_fun_fun_tree$) A_b_a_fun_fun_tree$)
(declare-fun mirror$e (A_b_fun_tree$) A_b_fun_tree$)
(declare-fun mirror$f (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun tree_C$a () B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$b () B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$c () B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$d () B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)
(declare-fun tree_C$e () A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$f () A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$g () A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun tree_C$h () A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun tree_C$i () B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_K$a () A_a_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun tree_K$b () B_b_b_fun_fun_tree$)
(declare-fun tree_K$c () B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun tree_K$d () A_a_a_fun_fun_tree$)
(declare-fun tree_K$e () A_b_a_fun_fun_tree$)
(declare-fun tree_S$a () B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_S$b () B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun tree_S$c () B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun tree_S$d () A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_S$e () A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_S$f () B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_S$g () B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_S$h () B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_S$i () B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$) A_tree$)
(declare-fun fun_app$a (B_b_fun$ B$) B$)
(declare-fun fun_app$b (B_b_a_fun_fun$ B$) B_a_fun$)
(declare-fun fun_app$c (B_a_fun_b_fun$ B_a_fun$) B$)
(declare-fun fun_app$d (B_a_fun_b_a_fun_fun$ B_a_fun$) B_a_fun$)
(declare-fun fun_app$e (B_a_fun_a_fun$ B_a_fun$) A$)
(declare-fun fun_app$f (A_b_fun$ A$) B$)
(declare-fun fun_app$g (A_b_a_fun_fun$ A$) B_a_fun$)
(declare-fun fun_app$h (A_a_fun$ A$) A$)
(declare-fun fun_app$i (B_a_fun$ B$) A$)
(declare-fun tree_ap$a (B_b_fun_tree$ B_tree$) B_tree$)
(declare-fun tree_ap$b (A_a_fun_tree$ A_tree$) A_tree$)
(declare-fun tree_ap$c (B_b_a_fun_fun_tree$ B_tree$) B_a_fun_tree$)
(declare-fun tree_ap$d (B_a_a_fun_fun_tree$ B_tree$) A_a_fun_tree$)
(declare-fun tree_ap$e (A_b_a_fun_fun_tree$ A_tree$) B_a_fun_tree$)
(declare-fun tree_ap$f (A_b_fun_tree$ A_tree$) B_tree$)
(declare-fun tree_ap$g (A_a_a_fun_fun_tree$ A_tree$) A_a_fun_tree$)
(declare-fun tree_ap$h (A_b_a_fun_a_fun_fun_tree$ A_tree$) B_a_fun_a_fun_tree$)
(declare-fun tree_ap$i (A_b_b_a_fun_fun_fun_tree$ A_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_ap$j (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$) A_b_a_fun_fun_tree$)
(declare-fun tree_ap$k (B_b_b_a_fun_fun_fun_tree$ B_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_ap$l (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$) B_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$m (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$) A_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$n (B_a_b_a_fun_fun_fun_tree$ B_tree$) A_b_a_fun_fun_tree$)
(declare-fun tree_ap$o (B_b_a_a_fun_fun_fun_tree$ B_tree$) B_a_a_fun_fun_tree$)
(declare-fun tree_ap$p (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ B_b_a_a_fun_fun_fun_tree$) B_b_a_a_fun_fun_fun_tree$)
(declare-fun tree_ap$q (B_b_b_fun_fun_tree$ B_tree$) B_b_fun_tree$)
(declare-fun tree_ap$r (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$) B_b_b_fun_fun_tree$)
(declare-fun tree_ap$s (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ A_b_b_a_fun_fun_fun_tree$) B_a_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$t (A_a_b_a_fun_fun_fun_tree$ A_tree$) A_b_a_fun_fun_tree$)
(declare-fun tree_ap$u (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ A_a_b_a_fun_fun_fun_tree$) A_a_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$v (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun tree_ap$w (A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$) B_a_a_fun_fun_tree$)
(declare-fun tree_ap$x (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_ap$y (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$z (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$) B_a_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$aa (B_b_fun_b_a_fun_fun_tree$ B_b_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$ab (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$) B_b_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$ac (B_a_fun_b_b_fun_fun_tree$ B_a_fun_tree$) B_b_fun_tree$)
(declare-fun tree_ap$ad (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ B_a_b_fun_fun_tree$) B_a_fun_b_b_fun_fun_tree$)
(declare-fun tree_ap$ae (B_a_b_fun_fun_tree$ B_tree$) A_b_fun_tree$)
(declare-fun tree_ap$af (B_b_fun_b_b_fun_fun_tree$ B_b_fun_tree$) B_b_fun_tree$)
(declare-fun tree_ap$ag (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$) B_b_fun_b_b_fun_fun_tree$)
(declare-fun tree_ap$ah (A_b_fun_a_a_fun_fun_tree$ A_b_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$ai (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$) A_b_fun_a_a_fun_fun_tree$)
(declare-fun tree_ap$aj (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$ak (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_ap$al (B_b_a_fun_fun_b_a_fun_fun_tree$ B_b_a_fun_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$am (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_a_fun_fun_tree$) B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$an (B_a_fun_a_fun_tree$ B_a_fun_tree$) A_tree$)
(declare-fun tree_ap$ao (B_b_a_fun_a_fun_fun_tree$ B_tree$) B_a_fun_a_fun_tree$)
(declare-fun tree_ap$ap (B_a_a_fun_fun_b_a_fun_fun_tree$ B_a_a_fun_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$aq (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_a_fun_fun_tree$) B_a_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$ar (A_a_fun_a_fun_tree$ A_a_fun_tree$) A_tree$)
(declare-fun tree_ap$as (B_a_a_fun_a_fun_fun_tree$ B_tree$) A_a_fun_a_fun_tree$)
(declare-fun tree_ap$at (B_b_fun_b_b_a_fun_fun_fun_tree$ B_b_fun_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_ap$au (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$) B_b_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$av (B_a_fun_b_b_a_fun_fun_fun_tree$ B_a_fun_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_ap$aw (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$) B_a_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$ax (A_a_fun_b_a_a_fun_fun_fun_tree$ A_a_fun_tree$) B_a_a_fun_fun_tree$)
(declare-fun tree_ap$ay (B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_tree$) A_b_a_fun_fun_tree$)
(declare-fun tree_ap$az (B_a_fun_b_fun_tree$ B_a_fun_tree$) B_tree$)
(declare-fun tree_chop$ (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun tree_pure$ (B_b_fun$) B_b_fun_tree$)
(declare-fun tree_chop$a (B_a_a_fun_fun_tree$) B_a_a_fun_fun_tree$)
(declare-fun tree_chop$b (B_tree$) B_tree$)
(declare-fun tree_chop$c (A_tree$) A_tree$)
(declare-fun tree_chop$d (B_a_fun_a_fun_tree$) B_a_fun_a_fun_tree$)
(declare-fun tree_chop$e (B_a_fun_tree$) B_a_fun_tree$)
(declare-fun tree_chop$f (A_b_a_fun_fun_tree$) A_b_a_fun_fun_tree$)
(declare-fun tree_chop$g (B_a_fun_b_a_fun_fun_tree$) B_a_fun_b_a_fun_fun_tree$)
(declare-fun tree_chop$h (B_b_a_fun_fun_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_chop$i (A_b_fun_tree$) A_b_fun_tree$)
(declare-fun tree_chop$j (B_a_fun_b_fun_tree$) B_a_fun_b_fun_tree$)
(declare-fun tree_chop$k (B_b_fun_tree$) B_b_fun_tree$)
(declare-fun tree_pure$a (A_b_a_fun_fun$) A_b_a_fun_fun_tree$)
(declare-fun tree_pure$b (A_b_fun$) A_b_fun_tree$)
(declare-fun tree_pure$c (A_a_fun$) A_a_fun_tree$)
(declare-fun tree_pure$d (A$) A_tree$)
(declare-fun tree_pure$e (B_a_fun$) B_a_fun_tree$)
(declare-fun tree_pure$f (B$) B_tree$)
(declare-fun tree_pure$g (B_a_a_fun_fun$) B_a_a_fun_fun_tree$)
(declare-fun tree_pure$h (B_b_a_fun_fun$) B_b_a_fun_fun_tree$)
(declare-fun tree_pure$i (B_a_fun_b_fun$) B_a_fun_b_fun_tree$)
(declare-fun tree_pure$j (B_a_fun_b_a_fun_fun$) B_a_fun_b_a_fun_fun_tree$)
(declare-fun tree_pure$k (B_a_fun_a_fun$) B_a_fun_a_fun_tree$)
(declare-fun traverse_tree$ (Dir_list$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun traverse_tree$a (Dir_list$ B_a_a_fun_fun_tree$) B_a_a_fun_fun_tree$)
(declare-fun traverse_tree$b (Dir_list$ B_tree$) B_tree$)
(declare-fun traverse_tree$c (Dir_list$ A_tree$) A_tree$)
(declare-fun traverse_tree$d (Dir_list$ B_a_fun_a_fun_tree$) B_a_fun_a_fun_tree$)
(declare-fun traverse_tree$e (Dir_list$ B_a_fun_tree$) B_a_fun_tree$)
(declare-fun traverse_tree$f (Dir_list$ A_b_a_fun_fun_tree$) A_b_a_fun_fun_tree$)
(declare-fun traverse_tree$g (Dir_list$ B_a_fun_b_a_fun_fun_tree$) B_a_fun_b_a_fun_fun_tree$)
(declare-fun traverse_tree$h (Dir_list$ B_b_a_fun_fun_tree$) B_b_a_fun_fun_tree$)
(declare-fun traverse_tree$i (Dir_list$ A_b_fun_tree$) A_b_fun_tree$)
(declare-fun traverse_tree$j (Dir_list$ B_a_fun_b_fun_tree$) B_a_fun_b_fun_tree$)
(declare-fun traverse_tree$k (Dir_list$ B_b_fun_tree$) B_b_fun_tree$)
(assert (! (not (= (mirror$ (tree_ap$ f$ x$)) (tree_ap$ (mirror$a f$) (mirror$b x$)))) :named a0))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_a_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$ ?v0 ?v2) (tree_ap$ ?v1 ?v2))) (= ?v0 ?v1))) :named a1))
(assert (! (forall ((?v0 B_b_fun_tree$) (?v1 B_b_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$a ?v0 ?v2) (tree_ap$a ?v1 ?v2))) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$b ?v0 ?v2) (tree_ap$b ?v1 ?v2))) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B_b_a_fun_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$c ?v0 ?v2) (tree_ap$c ?v1 ?v2))) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 B_a_a_fun_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$d ?v0 ?v2) (tree_ap$d ?v1 ?v2))) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 A_b_a_fun_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$e ?v0 ?v2) (tree_ap$e ?v1 ?v2))) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 A_b_fun_tree$) (?v1 A_b_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$f ?v0 ?v2) (tree_ap$f ?v1 ?v2))) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_a_a_fun_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$g ?v0 ?v2) (tree_ap$g ?v1 ?v2))) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 A_b_a_fun_a_fun_fun_tree$) (?v1 A_b_a_fun_a_fun_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$h ?v0 ?v2) (tree_ap$h ?v1 ?v2))) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 A_b_b_a_fun_fun_fun_tree$) (?v1 A_b_b_a_fun_fun_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$i ?v0 ?v2) (tree_ap$i ?v1 ?v2))) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 B_b_fun$)) (= (mirror$c (tree_pure$ ?v0)) (tree_pure$ ?v0))) :named a11))
(assert (! (forall ((?v0 A_b_a_fun_fun$)) (= (mirror$d (tree_pure$a ?v0)) (tree_pure$a ?v0))) :named a12))
(assert (! (forall ((?v0 A_b_fun$)) (= (mirror$e (tree_pure$b ?v0)) (tree_pure$b ?v0))) :named a13))
(assert (! (forall ((?v0 A_a_fun$)) (= (mirror$f (tree_pure$c ?v0)) (tree_pure$c ?v0))) :named a14))
(assert (! (forall ((?v0 A$)) (= (mirror$ (tree_pure$d ?v0)) (tree_pure$d ?v0))) :named a15))
(assert (! (forall ((?v0 B_a_fun$)) (= (mirror$a (tree_pure$e ?v0)) (tree_pure$e ?v0))) :named a16))
(assert (! (forall ((?v0 B$)) (= (mirror$b (tree_pure$f ?v0)) (tree_pure$f ?v0))) :named a17))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 A_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$e (tree_ap$j tree_C$ ?v0) ?v1) ?v2) (tree_ap$b (tree_ap$d ?v0 ?v2) ?v1))) :named a18))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$) (?v1 B_tree$) (?v2 B_tree$)) (= (tree_ap$c (tree_ap$k (tree_ap$l tree_C$a ?v0) ?v1) ?v2) (tree_ap$c (tree_ap$k ?v0 ?v2) ?v1))) :named a19))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$) (?v1 A_tree$) (?v2 B_tree$)) (= (tree_ap$c (tree_ap$i (tree_ap$m tree_C$b ?v0) ?v1) ?v2) (tree_ap$e (tree_ap$n ?v0 ?v2) ?v1))) :named a20))
(assert (! (forall ((?v0 B_b_a_a_fun_fun_fun_tree$) (?v1 B_tree$) (?v2 B_tree$)) (= (tree_ap$d (tree_ap$o (tree_ap$p tree_C$c ?v0) ?v1) ?v2) (tree_ap$d (tree_ap$o ?v0 ?v2) ?v1))) :named a21))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$) (?v1 B_tree$) (?v2 B_tree$)) (= (tree_ap$a (tree_ap$q (tree_ap$r tree_C$d ?v0) ?v1) ?v2) (tree_ap$a (tree_ap$q ?v0 ?v2) ?v1))) :named a22))
(assert (! (forall ((?v0 A_b_b_a_fun_fun_fun_tree$) (?v1 B_tree$) (?v2 A_tree$)) (= (tree_ap$e (tree_ap$n (tree_ap$s tree_C$e ?v0) ?v1) ?v2) (tree_ap$c (tree_ap$i ?v0 ?v2) ?v1))) :named a23))
(assert (! (forall ((?v0 A_a_b_a_fun_fun_fun_tree$) (?v1 A_tree$) (?v2 A_tree$)) (= (tree_ap$e (tree_ap$t (tree_ap$u tree_C$f ?v0) ?v1) ?v2) (tree_ap$e (tree_ap$t ?v0 ?v2) ?v1))) :named a24))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_tree$) (?v2 A_tree$)) (= (tree_ap$b (tree_ap$g (tree_ap$v tree_C$g ?v0) ?v1) ?v2) (tree_ap$b (tree_ap$g ?v0 ?v2) ?v1))) :named a25))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 B_tree$) (?v2 A_tree$)) (= (tree_ap$b (tree_ap$d (tree_ap$w tree_C$h ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$e ?v0 ?v2) ?v1))) :named a26))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$c (tree_ap$x tree_C$i ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$c ?v0 ?v2) ?v1))) :named a27))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (= (mirror$ (node$ ?v0 ?v1 ?v2)) (node$ ?v0 (mirror$ ?v2) (mirror$ ?v1)))) :named a28))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_a_fun_tree$) (?v2 B_a_fun_tree$)) (= (mirror$a (node$a ?v0 ?v1 ?v2)) (node$a ?v0 (mirror$a ?v2) (mirror$a ?v1)))) :named a29))
(assert (! (forall ((?v0 B$) (?v1 B_tree$) (?v2 B_tree$)) (= (mirror$b (node$b ?v0 ?v1 ?v2)) (node$b ?v0 (mirror$b ?v2) (mirror$b ?v1)))) :named a30))
(assert (! (forall ((?v0 A_tree$)) (= (root$ (mirror$ ?v0)) (root$ ?v0))) :named a31))
(assert (! (forall ((?v0 B_a_fun_tree$)) (= (root$b (mirror$a ?v0)) (root$b ?v0))) :named a32))
(assert (! (forall ((?v0 B_tree$)) (= (root$a (mirror$b ?v0)) (root$a ?v0))) :named a33))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 B_a_fun_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$y (tree_ap$z tree_S$ ?v0) ?v1) ?v2) (tree_ap$b (tree_ap$d ?v0 ?v2) (tree_ap$ ?v1 ?v2)))) :named a34))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B_b_fun_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$aa (tree_ap$ab tree_S$a ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$c ?v0 ?v2) (tree_ap$a ?v1 ?v2)))) :named a35))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$) (?v1 B_a_fun_tree$) (?v2 B_tree$)) (= (tree_ap$a (tree_ap$ac (tree_ap$ad tree_S$b ?v0) ?v1) ?v2) (tree_ap$f (tree_ap$ae ?v0 ?v2) (tree_ap$ ?v1 ?v2)))) :named a36))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$) (?v1 B_b_fun_tree$) (?v2 B_tree$)) (= (tree_ap$a (tree_ap$af (tree_ap$ag tree_S$c ?v0) ?v1) ?v2) (tree_ap$a (tree_ap$q ?v0 ?v2) (tree_ap$a ?v1 ?v2)))) :named a37))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 A_b_fun_tree$) (?v2 A_tree$)) (= (tree_ap$b (tree_ap$ah (tree_ap$ai tree_S$d ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$e ?v0 ?v2) (tree_ap$f ?v1 ?v2)))) :named a38))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_a_fun_tree$) (?v2 A_tree$)) (= (tree_ap$b (tree_ap$aj (tree_ap$ak tree_S$e ?v0) ?v1) ?v2) (tree_ap$b (tree_ap$g ?v0 ?v2) (tree_ap$b ?v1 ?v2)))) :named a39))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun_tree$) (?v1 B_b_a_fun_fun_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$al (tree_ap$am tree_S$f ?v0) ?v1) ?v2) (tree_ap$an (tree_ap$ao ?v0 ?v2) (tree_ap$c ?v1 ?v2)))) :named a40))
(assert (! (forall ((?v0 B_a_a_fun_a_fun_fun_tree$) (?v1 B_a_a_fun_fun_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$ap (tree_ap$aq tree_S$g ?v0) ?v1) ?v2) (tree_ap$ar (tree_ap$as ?v0 ?v2) (tree_ap$d ?v1 ?v2)))) :named a41))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$) (?v1 B_b_fun_tree$) (?v2 B_tree$)) (= (tree_ap$c (tree_ap$at (tree_ap$au tree_S$h ?v0) ?v1) ?v2) (tree_ap$c (tree_ap$k ?v0 ?v2) (tree_ap$a ?v1 ?v2)))) :named a42))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$) (?v1 B_a_fun_tree$) (?v2 B_tree$)) (= (tree_ap$c (tree_ap$av (tree_ap$aw tree_S$i ?v0) ?v1) ?v2) (tree_ap$e (tree_ap$n ?v0 ?v2) (tree_ap$ ?v1 ?v2)))) :named a43))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_tree$)) (= (tree_ap$c (tree_ap$av tree_K$ ?v0) ?v1) ?v0)) :named a44))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 B_tree$)) (= (tree_ap$d (tree_ap$ax tree_K$a ?v0) ?v1) ?v0)) :named a45))
(assert (! (forall ((?v0 B_tree$) (?v1 B_tree$)) (= (tree_ap$a (tree_ap$q tree_K$b ?v0) ?v1) ?v0)) :named a46))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 A_tree$)) (= (tree_ap$e (tree_ap$ay tree_K$c ?v0) ?v1) ?v0)) :named a47))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (= (tree_ap$b (tree_ap$g tree_K$d ?v0) ?v1) ?v0)) :named a48))
(assert (! (forall ((?v0 A_tree$) (?v1 B_tree$)) (= (tree_ap$ (tree_ap$e tree_K$e ?v0) ?v1) ?v0)) :named a49))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B_b_a_fun_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$c ?v0 (tree_pure$f ?v2)) (tree_ap$c ?v1 (tree_pure$f ?v2)))) (= ?v0 ?v1))) :named a50))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 B_a_a_fun_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$d ?v0 (tree_pure$f ?v2)) (tree_ap$d ?v1 (tree_pure$f ?v2)))) (= ?v0 ?v1))) :named a51))
(assert (! (forall ((?v0 B_b_fun_tree$) (?v1 B_b_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$a ?v0 (tree_pure$f ?v2)) (tree_ap$a ?v1 (tree_pure$f ?v2)))) (= ?v0 ?v1))) :named a52))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 A_b_a_fun_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$e ?v0 (tree_pure$d ?v2)) (tree_ap$e ?v1 (tree_pure$d ?v2)))) (= ?v0 ?v1))) :named a53))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$b ?v0 (tree_pure$d ?v2)) (tree_ap$b ?v1 (tree_pure$d ?v2)))) (= ?v0 ?v1))) :named a54))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_a_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$ ?v0 (tree_pure$f ?v2)) (tree_ap$ ?v1 (tree_pure$f ?v2)))) (= ?v0 ?v1))) :named a55))
(assert (! (forall ((?v0 A_tree$)) (= (left$ (mirror$ ?v0)) (mirror$ (right$ ?v0)))) :named a56))
(assert (! (forall ((?v0 B_a_fun_tree$)) (= (left$b (mirror$a ?v0)) (mirror$a (right$b ?v0)))) :named a57))
(assert (! (forall ((?v0 B_tree$)) (= (left$a (mirror$b ?v0)) (mirror$b (right$a ?v0)))) :named a58))
(assert (! (forall ((?v0 A_tree$)) (= (right$ (mirror$ ?v0)) (mirror$ (left$ ?v0)))) :named a59))
(assert (! (forall ((?v0 B_a_fun_tree$)) (= (right$b (mirror$a ?v0)) (mirror$a (left$b ?v0)))) :named a60))
(assert (! (forall ((?v0 B_tree$)) (= (right$a (mirror$b ?v0)) (mirror$b (left$a ?v0)))) :named a61))
(assert (! (forall ((?v0 Dir_list$) (?v1 B_a_a_fun_fun_tree$) (?v2 B_tree$)) (= (traverse_tree$ ?v0 (tree_ap$d ?v1 ?v2)) (tree_ap$d (traverse_tree$a ?v0 ?v1) (traverse_tree$b ?v0 ?v2)))) :named a62))
(assert (! (forall ((?v0 Dir_list$) (?v1 A_a_fun_tree$) (?v2 A_tree$)) (= (traverse_tree$c ?v0 (tree_ap$b ?v1 ?v2)) (tree_ap$b (traverse_tree$ ?v0 ?v1) (traverse_tree$c ?v0 ?v2)))) :named a63))
(assert (! (forall ((?v0 Dir_list$) (?v1 B_a_fun_a_fun_tree$) (?v2 B_a_fun_tree$)) (= (traverse_tree$c ?v0 (tree_ap$an ?v1 ?v2)) (tree_ap$an (traverse_tree$d ?v0 ?v1) (traverse_tree$e ?v0 ?v2)))) :named a64))
(assert (! (forall ((?v0 Dir_list$) (?v1 A_b_a_fun_fun_tree$) (?v2 A_tree$)) (= (traverse_tree$e ?v0 (tree_ap$e ?v1 ?v2)) (tree_ap$e (traverse_tree$f ?v0 ?v1) (traverse_tree$c ?v0 ?v2)))) :named a65))
(assert (! (forall ((?v0 Dir_list$) (?v1 B_a_fun_b_a_fun_fun_tree$) (?v2 B_a_fun_tree$)) (= (traverse_tree$e ?v0 (tree_ap$y ?v1 ?v2)) (tree_ap$y (traverse_tree$g ?v0 ?v1) (traverse_tree$e ?v0 ?v2)))) :named a66))
(assert (! (forall ((?v0 Dir_list$) (?v1 B_b_a_fun_fun_tree$) (?v2 B_tree$)) (= (traverse_tree$e ?v0 (tree_ap$c ?v1 ?v2)) (tree_ap$c (traverse_tree$h ?v0 ?v1) (traverse_tree$b ?v0 ?v2)))) :named a67))
(assert (! (forall ((?v0 Dir_list$) (?v1 A_b_fun_tree$) (?v2 A_tree$)) (= (traverse_tree$b ?v0 (tree_ap$f ?v1 ?v2)) (tree_ap$f (traverse_tree$i ?v0 ?v1) (traverse_tree$c ?v0 ?v2)))) :named a68))
(assert (! (forall ((?v0 Dir_list$) (?v1 B_a_fun_b_fun_tree$) (?v2 B_a_fun_tree$)) (= (traverse_tree$b ?v0 (tree_ap$az ?v1 ?v2)) (tree_ap$az (traverse_tree$j ?v0 ?v1) (traverse_tree$e ?v0 ?v2)))) :named a69))
(assert (! (forall ((?v0 Dir_list$) (?v1 B_b_fun_tree$) (?v2 B_tree$)) (= (traverse_tree$b ?v0 (tree_ap$a ?v1 ?v2)) (tree_ap$a (traverse_tree$k ?v0 ?v1) (traverse_tree$b ?v0 ?v2)))) :named a70))
(assert (! (forall ((?v0 Dir_list$) (?v1 B_a_fun_tree$) (?v2 B_tree$)) (= (traverse_tree$c ?v0 (tree_ap$ ?v1 ?v2)) (tree_ap$ (traverse_tree$e ?v0 ?v1) (traverse_tree$b ?v0 ?v2)))) :named a71))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 B_tree$)) (= (tree_chop$ (tree_ap$d ?v0 ?v1)) (tree_ap$d (tree_chop$a ?v0) (tree_chop$b ?v1)))) :named a72))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (tree_chop$c (tree_ap$b ?v0 ?v1)) (tree_ap$b (tree_chop$ ?v0) (tree_chop$c ?v1)))) :named a73))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$) (?v1 B_a_fun_tree$)) (= (tree_chop$c (tree_ap$an ?v0 ?v1)) (tree_ap$an (tree_chop$d ?v0) (tree_chop$e ?v1)))) :named a74))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 A_tree$)) (= (tree_chop$e (tree_ap$e ?v0 ?v1)) (tree_ap$e (tree_chop$f ?v0) (tree_chop$c ?v1)))) :named a75))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun_tree$) (?v1 B_a_fun_tree$)) (= (tree_chop$e (tree_ap$y ?v0 ?v1)) (tree_ap$y (tree_chop$g ?v0) (tree_chop$e ?v1)))) :named a76))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B_tree$)) (= (tree_chop$e (tree_ap$c ?v0 ?v1)) (tree_ap$c (tree_chop$h ?v0) (tree_chop$b ?v1)))) :named a77))
(assert (! (forall ((?v0 A_b_fun_tree$) (?v1 A_tree$)) (= (tree_chop$b (tree_ap$f ?v0 ?v1)) (tree_ap$f (tree_chop$i ?v0) (tree_chop$c ?v1)))) :named a78))
(assert (! (forall ((?v0 B_a_fun_b_fun_tree$) (?v1 B_a_fun_tree$)) (= (tree_chop$b (tree_ap$az ?v0 ?v1)) (tree_ap$az (tree_chop$j ?v0) (tree_chop$e ?v1)))) :named a79))
(assert (! (forall ((?v0 B_b_fun_tree$) (?v1 B_tree$)) (= (tree_chop$b (tree_ap$a ?v0 ?v1)) (tree_ap$a (tree_chop$k ?v0) (tree_chop$b ?v1)))) :named a80))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_tree$)) (= (tree_chop$c (tree_ap$ ?v0 ?v1)) (tree_ap$ (tree_chop$e ?v0) (tree_chop$b ?v1)))) :named a81))
(assert (! (forall ((?v0 B$) (?v1 B_tree$) (?v2 B_tree$) (?v3 B$) (?v4 B_tree$) (?v5 B_tree$)) (= (= (node$b ?v0 ?v1 ?v2) (node$b ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a82))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_a_fun_tree$) (?v2 B_a_fun_tree$) (?v3 B_a_fun$) (?v4 B_a_fun_tree$) (?v5 B_a_fun_tree$)) (= (= (node$a ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a83))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$) (?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a84))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B$)) (= (tree_ap$d (tree_pure$g ?v0) (tree_pure$f ?v1)) (tree_pure$c (fun_app$ ?v0 ?v1)))) :named a85))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (= (tree_ap$a (tree_pure$ ?v0) (tree_pure$f ?v1)) (tree_pure$f (fun_app$a ?v0 ?v1)))) :named a86))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B$)) (= (tree_ap$c (tree_pure$h ?v0) (tree_pure$f ?v1)) (tree_pure$e (fun_app$b ?v0 ?v1)))) :named a87))
(assert (! (forall ((?v0 B_a_fun_b_fun$) (?v1 B_a_fun$)) (= (tree_ap$az (tree_pure$i ?v0) (tree_pure$e ?v1)) (tree_pure$f (fun_app$c ?v0 ?v1)))) :named a88))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$) (?v1 B_a_fun$)) (= (tree_ap$y (tree_pure$j ?v0) (tree_pure$e ?v1)) (tree_pure$e (fun_app$d ?v0 ?v1)))) :named a89))
(assert (! (forall ((?v0 B_a_fun_a_fun$) (?v1 B_a_fun$)) (= (tree_ap$an (tree_pure$k ?v0) (tree_pure$e ?v1)) (tree_pure$d (fun_app$e ?v0 ?v1)))) :named a90))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A$)) (= (tree_ap$f (tree_pure$b ?v0) (tree_pure$d ?v1)) (tree_pure$f (fun_app$f ?v0 ?v1)))) :named a91))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 A$)) (= (tree_ap$e (tree_pure$a ?v0) (tree_pure$d ?v1)) (tree_pure$e (fun_app$g ?v0 ?v1)))) :named a92))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (tree_ap$b (tree_pure$c ?v0) (tree_pure$d ?v1)) (tree_pure$d (fun_app$h ?v0 ?v1)))) :named a93))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B$)) (= (tree_ap$ (tree_pure$e ?v0) (tree_pure$f ?v1)) (tree_pure$d (fun_app$i ?v0 ?v1)))) :named a94))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B_a_a_fun_fun_tree$) (?v2 B_a_a_fun_fun_tree$) (?v3 B$) (?v4 B_tree$) (?v5 B_tree$)) (! (= (tree_ap$d (node$f ?v0 ?v1 ?v2) (node$b ?v3 ?v4 ?v5)) (node$d (fun_app$ ?v0 ?v3) (tree_ap$d ?v1 ?v4) (tree_ap$d ?v2 ?v5))) :pattern ((tree_ap$d (node$f ?v0 ?v1 ?v2) (node$b ?v3 ?v4 ?v5))))) :named a95))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun_tree$) (?v2 B_b_fun_tree$) (?v3 B$) (?v4 B_tree$) (?v5 B_tree$)) (! (= (tree_ap$a (node$c ?v0 ?v1 ?v2) (node$b ?v3 ?v4 ?v5)) (node$b (fun_app$a ?v0 ?v3) (tree_ap$a ?v1 ?v4) (tree_ap$a ?v2 ?v5))) :pattern ((tree_ap$a (node$c ?v0 ?v1 ?v2) (node$b ?v3 ?v4 ?v5))))) :named a96))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B_b_a_fun_fun_tree$) (?v2 B_b_a_fun_fun_tree$) (?v3 B$) (?v4 B_tree$) (?v5 B_tree$)) (! (= (tree_ap$c (node$e ?v0 ?v1 ?v2) (node$b ?v3 ?v4 ?v5)) (node$a (fun_app$b ?v0 ?v3) (tree_ap$c ?v1 ?v4) (tree_ap$c ?v2 ?v5))) :pattern ((tree_ap$c (node$e ?v0 ?v1 ?v2) (node$b ?v3 ?v4 ?v5))))) :named a97))
(assert (! (forall ((?v0 B_a_fun_b_fun$) (?v1 B_a_fun_b_fun_tree$) (?v2 B_a_fun_b_fun_tree$) (?v3 B_a_fun$) (?v4 B_a_fun_tree$) (?v5 B_a_fun_tree$)) (! (= (tree_ap$az (node$bb ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (node$b (fun_app$c ?v0 ?v3) (tree_ap$az ?v1 ?v4) (tree_ap$az ?v2 ?v5))) :pattern ((tree_ap$az (node$bb ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5))))) :named a98))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$) (?v1 B_a_fun_b_a_fun_fun_tree$) (?v2 B_a_fun_b_a_fun_fun_tree$) (?v3 B_a_fun$) (?v4 B_a_fun_tree$) (?v5 B_a_fun_tree$)) (! (= (tree_ap$y (node$ab ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (node$a (fun_app$d ?v0 ?v3) (tree_ap$y ?v1 ?v4) (tree_ap$y ?v2 ?v5))) :pattern ((tree_ap$y (node$ab ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5))))) :named a99))
(assert (! (forall ((?v0 B_a_fun_a_fun$) (?v1 B_a_fun_a_fun_tree$) (?v2 B_a_fun_a_fun_tree$) (?v3 B_a_fun$) (?v4 B_a_fun_tree$) (?v5 B_a_fun_tree$)) (! (= (tree_ap$an (node$k ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (node$ (fun_app$e ?v0 ?v3) (tree_ap$an ?v1 ?v4) (tree_ap$an ?v2 ?v5))) :pattern ((tree_ap$an (node$k ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5))))) :named a100))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_b_fun_tree$) (?v2 A_b_fun_tree$) (?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (! (= (tree_ap$f (node$h ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (node$b (fun_app$f ?v0 ?v3) (tree_ap$f ?v1 ?v4) (tree_ap$f ?v2 ?v5))) :pattern ((tree_ap$f (node$h ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5))))) :named a101))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 A_b_a_fun_fun_tree$) (?v2 A_b_a_fun_fun_tree$) (?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (! (= (tree_ap$e (node$g ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (node$a (fun_app$g ?v0 ?v3) (tree_ap$e ?v1 ?v4) (tree_ap$e ?v2 ?v5))) :pattern ((tree_ap$e (node$g ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5))))) :named a102))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$) (?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (! (= (tree_ap$b (node$d ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (node$ (fun_app$h ?v0 ?v3) (tree_ap$b ?v1 ?v4) (tree_ap$b ?v2 ?v5))) :pattern ((tree_ap$b (node$d ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5))))) :named a103))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_a_fun_tree$) (?v2 B_a_fun_tree$) (?v3 B$) (?v4 B_tree$) (?v5 B_tree$)) (! (= (tree_ap$ (node$a ?v0 ?v1 ?v2) (node$b ?v3 ?v4 ?v5)) (node$ (fun_app$i ?v0 ?v3) (tree_ap$ ?v1 ?v4) (tree_ap$ ?v2 ?v5))) :pattern ((tree_ap$ (node$a ?v0 ?v1 ?v2) (node$b ?v3 ?v4 ?v5))))) :named a104))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$)) (= (tree_ap$d (tree_pure$g ?v0) (node$b ?v1 ?v2 ?v3)) (node$d (fun_app$ ?v0 ?v1) (tree_ap$d (tree_pure$g ?v0) ?v2) (tree_ap$d (tree_pure$g ?v0) ?v3)))) :named a105))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$)) (= (tree_ap$a (tree_pure$ ?v0) (node$b ?v1 ?v2 ?v3)) (node$b (fun_app$a ?v0 ?v1) (tree_ap$a (tree_pure$ ?v0) ?v2) (tree_ap$a (tree_pure$ ?v0) ?v3)))) :named a106))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$)) (= (tree_ap$c (tree_pure$h ?v0) (node$b ?v1 ?v2 ?v3)) (node$a (fun_app$b ?v0 ?v1) (tree_ap$c (tree_pure$h ?v0) ?v2) (tree_ap$c (tree_pure$h ?v0) ?v3)))) :named a107))
(assert (! (forall ((?v0 B_a_fun_b_fun$) (?v1 B_a_fun$) (?v2 B_a_fun_tree$) (?v3 B_a_fun_tree$)) (= (tree_ap$az (tree_pure$i ?v0) (node$a ?v1 ?v2 ?v3)) (node$b (fun_app$c ?v0 ?v1) (tree_ap$az (tree_pure$i ?v0) ?v2) (tree_ap$az (tree_pure$i ?v0) ?v3)))) :named a108))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$) (?v1 B_a_fun$) (?v2 B_a_fun_tree$) (?v3 B_a_fun_tree$)) (= (tree_ap$y (tree_pure$j ?v0) (node$a ?v1 ?v2 ?v3)) (node$a (fun_app$d ?v0 ?v1) (tree_ap$y (tree_pure$j ?v0) ?v2) (tree_ap$y (tree_pure$j ?v0) ?v3)))) :named a109))
(assert (! (forall ((?v0 B_a_fun_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun_tree$) (?v3 B_a_fun_tree$)) (= (tree_ap$an (tree_pure$k ?v0) (node$a ?v1 ?v2 ?v3)) (node$ (fun_app$e ?v0 ?v1) (tree_ap$an (tree_pure$k ?v0) ?v2) (tree_ap$an (tree_pure$k ?v0) ?v3)))) :named a110))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (tree_ap$f (tree_pure$b ?v0) (node$ ?v1 ?v2 ?v3)) (node$b (fun_app$f ?v0 ?v1) (tree_ap$f (tree_pure$b ?v0) ?v2) (tree_ap$f (tree_pure$b ?v0) ?v3)))) :named a111))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (tree_ap$e (tree_pure$a ?v0) (node$ ?v1 ?v2 ?v3)) (node$a (fun_app$g ?v0 ?v1) (tree_ap$e (tree_pure$a ?v0) ?v2) (tree_ap$e (tree_pure$a ?v0) ?v3)))) :named a112))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (tree_ap$b (tree_pure$c ?v0) (node$ ?v1 ?v2 ?v3)) (node$ (fun_app$h ?v0 ?v1) (tree_ap$b (tree_pure$c ?v0) ?v2) (tree_ap$b (tree_pure$c ?v0) ?v3)))) :named a113))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$)) (= (tree_ap$ (tree_pure$e ?v0) (node$b ?v1 ?v2 ?v3)) (node$ (fun_app$i ?v0 ?v1) (tree_ap$ (tree_pure$e ?v0) ?v2) (tree_ap$ (tree_pure$e ?v0) ?v3)))) :named a114))
(assert (! (forall ((?v0 Dir_list$) (?v1 A$)) (= (traverse_tree$c ?v0 (tree_pure$d ?v1)) (tree_pure$d ?v1))) :named a115))
(assert (! (forall ((?v0 Dir_list$) (?v1 B_a_fun$)) (= (traverse_tree$e ?v0 (tree_pure$e ?v1)) (tree_pure$e ?v1))) :named a116))
(assert (! (forall ((?v0 Dir_list$) (?v1 B$)) (= (traverse_tree$b ?v0 (tree_pure$f ?v1)) (tree_pure$f ?v1))) :named a117))
(check-sat)
;(get-unsat-core)
