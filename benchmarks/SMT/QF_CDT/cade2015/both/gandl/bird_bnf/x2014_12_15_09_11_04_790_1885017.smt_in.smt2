; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 529
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Dir_dir_fun$ 0)
(declare-datatypes () ((Dir$ (l$) (r$))
  (Dir_list$ (nil$) (cons$ (hd$ Dir$) (tl$ Dir_list$)))
  (Dir_list_list$ (nil$a) (cons$a (hd$a Dir_list$) (tl$a Dir_list_list$)))
  (Dir_list_list_list$ (nil$b) (cons$b (hd$b Dir_list_list$) (tl$b Dir_list_list_list$)))
  (Dir_list_list_list_list$ (nil$c) (cons$c (hd$c Dir_list_list_list$) (tl$c Dir_list_list_list_list$)))))
(declare-fun path$ () Dir_list$)
(declare-fun fun_app$ (Dir_dir_fun$ Dir$) Dir$)
(declare-fun case_dir$ (Dir$ Dir$) Dir_dir_fun$)
(declare-fun odd_mirror_path$ (Dir_list$) Dir_list$)
(declare-fun even_mirror_path$ (Dir_list$) Dir_list$)
(assert (! (not (= (even_mirror_path$ (even_mirror_path$ path$)) path$)) :named a0))
(assert (! (= (even_mirror_path$ nil$) nil$) :named a1))
(assert (! (forall ((?v0 Dir$) (?v1 Dir_list$)) (= (odd_mirror_path$ (cons$ ?v0 ?v1)) (cons$ ?v0 (even_mirror_path$ ?v1)))) :named a2))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (=> (and (= (odd_mirror_path$ ?v0) ?v1) (and (=> (and (= ?v0 nil$) (= ?v1 nil$)) false) (forall ((?v2 Dir$) (?v3 Dir_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v3)) (= ?v1 (cons$ ?v2 (even_mirror_path$ ?v3)))) false)))) false)) :named a3))
(assert (! (forall ((?v0 Dir$) (?v1 Dir_list$)) (= (even_mirror_path$ (cons$ ?v0 ?v1)) (cons$ (fun_app$ (case_dir$ r$ l$) ?v0) (odd_mirror_path$ ?v1)))) :named a4))
(assert (! (= (odd_mirror_path$ nil$) nil$) :named a5))
(assert (! (forall ((?v0 Dir_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 Dir$) (?v2 Dir_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) false))) false)) :named a6))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (=> (and (= (even_mirror_path$ ?v0) ?v1) (and (=> (and (= ?v0 nil$) (= ?v1 nil$)) false) (forall ((?v2 Dir$) (?v3 Dir_list$)) (=> (and (= ?v0 (cons$ ?v2 ?v3)) (= ?v1 (cons$ (fun_app$ (case_dir$ r$ l$) ?v2) (odd_mirror_path$ ?v3)))) false)))) false)) :named a7))
(assert (! (forall ((?v0 Dir$) (?v1 Dir$)) (! (= (fun_app$ (case_dir$ ?v0 ?v1) l$) ?v0) :pattern ((case_dir$ ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 Dir$) (?v1 Dir$)) (! (= (fun_app$ (case_dir$ ?v0 ?v1) r$) ?v1) :pattern ((case_dir$ ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 Dir$)) (=> (and (=> (= ?v0 l$) false) (=> (= ?v0 r$) false)) false)) :named a10))
(assert (! (not (= l$ r$)) :named a11))
(assert (! (forall ((?v0 Dir_list_list$) (?v1 Dir_list_list_list$) (?v2 Dir_list_list$) (?v3 Dir_list_list_list$)) (= (= (cons$b ?v0 ?v1) (cons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list_list$) (?v2 Dir_list$) (?v3 Dir_list_list$)) (= (= (cons$a ?v0 ?v1) (cons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 Dir$) (?v1 Dir_list$) (?v2 Dir$) (?v3 Dir_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 Dir_list_list_list$)) (= (not (= ?v0 nil$b)) (exists ((?v1 Dir_list_list$) (?v2 Dir_list_list_list$)) (= ?v0 (cons$b ?v1 ?v2))))) :named a15))
(assert (! (forall ((?v0 Dir_list_list$)) (= (not (= ?v0 nil$a)) (exists ((?v1 Dir_list$) (?v2 Dir_list_list$)) (= ?v0 (cons$a ?v1 ?v2))))) :named a16))
(assert (! (forall ((?v0 Dir_list$)) (= (not (= ?v0 nil$)) (exists ((?v1 Dir$) (?v2 Dir_list$)) (= ?v0 (cons$ ?v1 ?v2))))) :named a17))
(assert (! (forall ((?v0 Dir_list_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (and (forall ((?v1 Dir_list_list$)) (=> (= ?v0 (cons$b ?v1 nil$b)) false)) (forall ((?v1 Dir_list_list$) (?v2 Dir_list_list$) (?v3 Dir_list_list_list$)) (=> (= ?v0 (cons$b ?v1 (cons$b ?v2 ?v3))) false)))) false)) :named a18))
(assert (! (forall ((?v0 Dir_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (and (forall ((?v1 Dir_list$)) (=> (= ?v0 (cons$a ?v1 nil$a)) false)) (forall ((?v1 Dir_list$) (?v2 Dir_list$) (?v3 Dir_list_list$)) (=> (= ?v0 (cons$a ?v1 (cons$a ?v2 ?v3))) false)))) false)) :named a19))
(assert (! (forall ((?v0 Dir_list$)) (=> (and (=> (= ?v0 nil$) false) (and (forall ((?v1 Dir$)) (=> (= ?v0 (cons$ ?v1 nil$)) false)) (forall ((?v1 Dir$) (?v2 Dir$) (?v3 Dir_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false)))) false)) :named a20))
(assert (! (forall ((?v0 Dir_list_list_list_list$)) (=> (and (=> (= ?v0 nil$c) false) (and (forall ((?v1 Dir_list_list_list_list$)) (=> (= ?v0 (cons$c nil$b ?v1)) false)) (forall ((?v1 Dir_list_list$) (?v2 Dir_list_list_list$) (?v3 Dir_list_list_list_list$)) (=> (= ?v0 (cons$c (cons$b ?v1 ?v2) ?v3)) false)))) false)) :named a21))
(assert (! (forall ((?v0 Dir_list_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (and (forall ((?v1 Dir_list_list_list$)) (=> (= ?v0 (cons$b nil$a ?v1)) false)) (forall ((?v1 Dir_list$) (?v2 Dir_list_list$) (?v3 Dir_list_list_list$)) (=> (= ?v0 (cons$b (cons$a ?v1 ?v2) ?v3)) false)))) false)) :named a22))
(assert (! (forall ((?v0 Dir_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (and (forall ((?v1 Dir_list_list$)) (=> (= ?v0 (cons$a nil$ ?v1)) false)) (forall ((?v1 Dir$) (?v2 Dir_list$) (?v3 Dir_list_list$)) (=> (= ?v0 (cons$a (cons$ ?v1 ?v2) ?v3)) false)))) false)) :named a23))
(check-sat)
;(get-unsat-core)
