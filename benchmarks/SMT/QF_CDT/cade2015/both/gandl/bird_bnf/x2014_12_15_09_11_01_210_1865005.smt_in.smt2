; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 506
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun$ 0)
(declare-sort A_b_a_fun_fun$ 0)
(declare-sort B_a_a_fun_fun$ 0)
(declare-sort B_a_b_fun_fun$ 0)
(declare-sort B_a_fun_a_fun$ 0)
(declare-sort B_a_fun_b_fun$ 0)
(declare-sort B_b_a_fun_fun$ 0)
(declare-sort B_b_b_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun$ 0)
(declare-sort B_tree_b_tree_fun$ 0)
(declare-sort A_a_b_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_b_a_fun_a_fun_fun$ 0)
(declare-sort A_b_b_a_fun_fun_fun$ 0)
(declare-sort A_b_fun_a_a_fun_fun$ 0)
(declare-sort B_a_a_fun_a_fun_fun$ 0)
(declare-sort B_a_b_a_fun_fun_fun$ 0)
(declare-sort B_a_fun_b_a_fun_fun$ 0)
(declare-sort B_a_fun_b_b_fun_fun$ 0)
(declare-sort B_b_a_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_a_fun_fun$ 0)
(declare-sort B_b_b_a_fun_fun_fun$ 0)
(declare-sort B_b_fun_b_a_fun_fun$ 0)
(declare-sort B_b_fun_b_b_fun_fun$ 0)
(declare-sort A_a_fun_b_a_a_fun_fun_fun$ 0)
(declare-sort B_a_a_fun_fun_b_a_fun_fun$ 0)
(declare-sort B_a_fun_a_b_a_fun_fun_fun$ 0)
(declare-sort B_a_fun_b_b_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_a_fun_fun$ 0)
(declare-sort B_b_fun_b_b_a_fun_fun_fun$ 0)
(declare-sort B_a_fun_tree_b_a_fun_tree_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0)
(declare-sort A_b_a_fun_fun_b_a_a_fun_fun_fun$ 0)
(declare-sort B_a_a_fun_fun_a_b_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_b_a_fun_fun_fun$ 0)
(declare-sort B_b_b_fun_fun_b_b_b_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$ 0)
(declare-sort B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$ 0)
(declare-sort A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$ 0)
(declare-sort A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$ 0)
(declare-sort B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$ 0)
(declare-codatatypes () ((A_tree$ (node$ (root$ A$) (left$ A_tree$) (right$ A_tree$)))
  (B_a_fun_tree$ (node$a (select$ B_a_fun$) (selecta$ B_a_fun_tree$) (selectb$ B_a_fun_tree$)))
  (B_tree$ (node$b (root$a B$) (left$a B_tree$) (right$a B_tree$)))
  (B_b_fun_tree$ (node$c (selectc$ B_b_fun$) (selectd$ B_b_fun_tree$) (selecte$ B_b_fun_tree$)))
  (A_a_fun_tree$ (node$d (selectf$ A_a_fun$) (selectg$ A_a_fun_tree$) (selecth$ A_a_fun_tree$)))
  (B_b_a_fun_fun_tree$ (node$e (selecti$ B_b_a_fun_fun$) (selectj$ B_b_a_fun_fun_tree$) (selectk$ B_b_a_fun_fun_tree$)))
  (B_a_a_fun_fun_tree$ (node$f (selectl$ B_a_a_fun_fun$) (selectm$ B_a_a_fun_fun_tree$) (selectn$ B_a_a_fun_fun_tree$)))
  (A_b_a_fun_fun_tree$ (node$g (selecto$ A_b_a_fun_fun$) (selectp$ A_b_a_fun_fun_tree$) (selectq$ A_b_a_fun_fun_tree$)))
  (A_b_fun_tree$ (node$h (selectr$ A_b_fun$) (selects$ A_b_fun_tree$) (selectt$ A_b_fun_tree$)))
  (A_a_a_fun_fun_tree$ (node$i (selectu$ A_a_a_fun_fun$) (selectv$ A_a_a_fun_fun_tree$) (selectw$ A_a_a_fun_fun_tree$)))
  (A_b_a_fun_a_fun_fun_tree$ (node$j (selectx$ A_b_a_fun_a_fun_fun$) (selecty$ A_b_a_fun_a_fun_fun_tree$) (selectz$ A_b_a_fun_a_fun_fun_tree$)))
  (B_a_fun_a_fun_tree$ (node$k (selecua$ B_a_fun_a_fun$) (selecub$ B_a_fun_a_fun_tree$) (selecuc$ B_a_fun_a_fun_tree$)))
  (A_b_b_a_fun_fun_fun_tree$ (node$l (selecud$ A_b_b_a_fun_fun_fun$) (selecue$ A_b_b_a_fun_fun_fun_tree$) (selecuf$ A_b_b_a_fun_fun_fun_tree$)))
  (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ (node$m (selecug$ B_b_a_fun_fun_b_b_a_fun_fun_fun$) (selecuh$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$) (selecui$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)))
  (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ (node$n (selecuj$ B_a_a_fun_fun_a_b_a_fun_fun_fun$) (selecuk$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$) (selecul$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)))
  (B_b_b_fun_fun_tree$ (node$o (selecum$ B_b_b_fun_fun$) (selecun$ B_b_b_fun_fun_tree$) (selecuo$ B_b_b_fun_fun_tree$)))
  (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ (node$p (selecup$ B_b_b_fun_fun_b_b_b_fun_fun_fun$) (selecuq$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$) (selecur$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)))
  (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ (node$q (selecus$ A_a_a_fun_fun_a_a_a_fun_fun_fun$) (selecut$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) (selecuu$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)))
  (A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ (node$r (selecuv$ A_b_a_fun_fun_b_a_a_fun_fun_fun$) (selecuw$ A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$) (selecux$ A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)))
  (B_b_b_a_fun_fun_fun_tree$ (node$s (selecuy$ B_b_b_a_fun_fun_fun$) (selecuz$ B_b_b_a_fun_fun_fun_tree$) (selecva$ B_b_b_a_fun_fun_fun_tree$)))
  (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ (node$t (selecvb$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$) (selecvc$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$) (selecvd$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)))
  (B_a_b_a_fun_fun_fun_tree$ (node$u (selecve$ B_a_b_a_fun_fun_fun$) (selecvf$ B_a_b_a_fun_fun_fun_tree$) (selecvg$ B_a_b_a_fun_fun_fun_tree$)))
  (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ (node$v (selecvh$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$) (selecvi$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$) (selecvj$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)))
  (B_b_a_a_fun_fun_fun_tree$ (node$w (selecvk$ B_b_a_a_fun_fun_fun$) (selecvl$ B_b_a_a_fun_fun_fun_tree$) (selecvm$ B_b_a_a_fun_fun_fun_tree$)))
  (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ (node$x (selecvn$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$) (selecvo$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$) (selecvp$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)))
  (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ (node$y (selecvq$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$) (selecvr$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$) (selecvs$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)))
  (A_a_b_a_fun_fun_fun_tree$ (node$z (selecvt$ A_a_b_a_fun_fun_fun$) (selecvu$ A_a_b_a_fun_fun_fun_tree$) (selecvv$ A_a_b_a_fun_fun_fun_tree$)))
  (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ (node$aa (selecvw$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$) (selecvx$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$) (selecvy$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)))
  (B_a_fun_b_a_fun_fun_tree$ (node$ab (selecvz$ B_a_fun_b_a_fun_fun$) (selecwa$ B_a_fun_b_a_fun_fun_tree$) (selecwb$ B_a_fun_b_a_fun_fun_tree$)))
  (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ (node$ac (selecwc$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$) (selecwd$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$) (selecwe$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)))
  (B_b_fun_b_a_fun_fun_tree$ (node$ad (selecwf$ B_b_fun_b_a_fun_fun$) (selecwg$ B_b_fun_b_a_fun_fun_tree$) (selecwh$ B_b_fun_b_a_fun_fun_tree$)))
  (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ (node$ae (selecwi$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$) (selecwj$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$) (selecwk$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)))
  (B_a_b_fun_fun_tree$ (node$af (selecwl$ B_a_b_fun_fun$) (selecwm$ B_a_b_fun_fun_tree$) (selecwn$ B_a_b_fun_fun_tree$)))
  (B_a_fun_b_b_fun_fun_tree$ (node$ag (selecwo$ B_a_fun_b_b_fun_fun$) (selecwp$ B_a_fun_b_b_fun_fun_tree$) (selecwq$ B_a_fun_b_b_fun_fun_tree$)))
  (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ (node$ah (selecwr$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$) (selecws$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$) (selecwt$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)))
  (B_b_fun_b_b_fun_fun_tree$ (node$ai (selecwu$ B_b_fun_b_b_fun_fun$) (selecwv$ B_b_fun_b_b_fun_fun_tree$) (selecww$ B_b_fun_b_b_fun_fun_tree$)))
  (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ (node$aj (selecwx$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$) (selecwy$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$) (selecwz$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)))
  (A_b_fun_a_a_fun_fun_tree$ (node$ak (selecxa$ A_b_fun_a_a_fun_fun$) (selecxb$ A_b_fun_a_a_fun_fun_tree$) (selecxc$ A_b_fun_a_a_fun_fun_tree$)))
  (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ (node$al (selecxd$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$) (selecxe$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$) (selecxf$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)))
  (A_a_fun_a_a_fun_fun_tree$ (node$am (selecxg$ A_a_fun_a_a_fun_fun$) (selecxh$ A_a_fun_a_a_fun_fun_tree$) (selecxi$ A_a_fun_a_a_fun_fun_tree$)))
  (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ (node$an (selecxj$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (selecxk$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$) (selecxl$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)))
  (B_b_a_fun_a_fun_fun_tree$ (node$ao (selecxm$ B_b_a_fun_a_fun_fun$) (selecxn$ B_b_a_fun_a_fun_fun_tree$) (selecxo$ B_b_a_fun_a_fun_fun_tree$)))
  (B_b_a_fun_fun_b_a_fun_fun_tree$ (node$ap (selecxp$ B_b_a_fun_fun_b_a_fun_fun$) (selecxq$ B_b_a_fun_fun_b_a_fun_fun_tree$) (selecxr$ B_b_a_fun_fun_b_a_fun_fun_tree$)))
  (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ (node$aq (selecxs$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$) (selecxt$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$) (selecxu$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)))
  (B_a_a_fun_a_fun_fun_tree$ (node$ar (selecxv$ B_a_a_fun_a_fun_fun$) (selecxw$ B_a_a_fun_a_fun_fun_tree$) (selecxx$ B_a_a_fun_a_fun_fun_tree$)))
  (B_a_a_fun_fun_b_a_fun_fun_tree$ (node$as (selecxy$ B_a_a_fun_fun_b_a_fun_fun$) (selecxz$ B_a_a_fun_fun_b_a_fun_fun_tree$) (selecya$ B_a_a_fun_fun_b_a_fun_fun_tree$)))
  (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ (node$at (selecyb$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$) (selecyc$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$) (selecyd$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)))
  (A_a_fun_a_fun_tree$ (node$au (selecye$ A_a_fun_a_fun$) (selecyf$ A_a_fun_a_fun_tree$) (selecyg$ A_a_fun_a_fun_tree$)))
  (B_b_fun_b_b_a_fun_fun_fun_tree$ (node$av (selecyh$ B_b_fun_b_b_a_fun_fun_fun$) (selecyi$ B_b_fun_b_b_a_fun_fun_fun_tree$) (selecyj$ B_b_fun_b_b_a_fun_fun_fun_tree$)))
  (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ (node$aw (selecyk$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$) (selecyl$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$) (selecym$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)))
  (B_a_fun_b_b_a_fun_fun_fun_tree$ (node$ax (selecyn$ B_a_fun_b_b_a_fun_fun_fun$) (selecyo$ B_a_fun_b_b_a_fun_fun_fun_tree$) (selecyp$ B_a_fun_b_b_a_fun_fun_fun_tree$)))
  (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ (node$ay (selecyq$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$) (selecyr$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$) (selecys$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)))
  (A_a_fun_b_a_a_fun_fun_fun_tree$ (node$az (selecyt$ A_a_fun_b_a_a_fun_fun_fun$) (selecyu$ A_a_fun_b_a_a_fun_fun_fun_tree$) (selecyv$ A_a_fun_b_a_a_fun_fun_fun_tree$)))
  (B_a_fun_a_b_a_fun_fun_fun_tree$ (node$ba (selecyw$ B_a_fun_a_b_a_fun_fun_fun$) (selecyx$ B_a_fun_a_b_a_fun_fun_fun_tree$) (selecyy$ B_a_fun_a_b_a_fun_fun_fun_tree$)))
  (B_a_fun_b_fun_tree$ (node$bb (selecyz$ B_a_fun_b_fun$) (selecza$ B_a_fun_b_fun_tree$) (seleczb$ B_a_fun_b_fun_tree$)))))
(declare-fun f$ () B_a_fun_tree$)
(declare-fun x$ () B_tree$)
(declare-fun even$ () Bool)
(declare-fun left$b (B_a_fun_tree$) B_a_fun_tree$)
(declare-fun root$b (B_a_fun_tree$) B_a_fun$)
(declare-fun mirror$ (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun right$b (B_a_fun_tree$) B_a_fun_tree$)
(declare-fun tree_C$ () B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_K$ () B_a_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_S$ () B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun fun_app$ (A_tree_a_tree_fun$ A_tree$) A_tree$)
(declare-fun mirror$a (B_a_a_fun_fun_tree$) B_a_a_fun_fun_tree$)
(declare-fun mirror$b (B_tree$) B_tree$)
(declare-fun mirror$c (A_tree$) A_tree$)
(declare-fun mirror$d (B_a_fun_a_fun_tree$) B_a_fun_a_fun_tree$)
(declare-fun mirror$e (B_a_fun_tree$) B_a_fun_tree$)
(declare-fun mirror$f (A_b_a_fun_fun_tree$) A_b_a_fun_fun_tree$)
(declare-fun mirror$g (B_a_fun_b_a_fun_fun_tree$) B_a_fun_b_a_fun_fun_tree$)
(declare-fun mirror$h (B_b_a_fun_fun_tree$) B_b_a_fun_fun_tree$)
(declare-fun mirror$i (A_b_fun_tree$) A_b_fun_tree$)
(declare-fun mirror$j (B_a_fun_b_fun_tree$) B_a_fun_b_fun_tree$)
(declare-fun mirror$k (B_b_fun_tree$) B_b_fun_tree$)
(declare-fun tree_C$a () B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun tree_C$b () B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)
(declare-fun tree_C$c () A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun tree_C$d () A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun tree_C$e () B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$f () B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$g () B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$h () A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$i () A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_K$a () A_a_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun tree_K$b () B_b_b_fun_fun_tree$)
(declare-fun tree_K$c () B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun tree_K$d () A_a_a_fun_fun_tree$)
(declare-fun tree_K$e () A_b_a_fun_fun_tree$)
(declare-fun tree_S$a () B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_S$b () B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun tree_S$c () B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun tree_S$d () A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_S$e () A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_S$f () B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_S$g () B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_S$h () B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_S$i () B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$) A_tree$)
(declare-fun fun_app$a (B_a_fun_tree_b_a_fun_tree_fun$ B_a_fun_tree$) B_a_fun_tree$)
(declare-fun fun_app$b (B_tree_b_tree_fun$ B_tree$) B_tree$)
(declare-fun fun_app$c (B_a_a_fun_fun$ B$) A_a_fun$)
(declare-fun fun_app$d (B_b_fun$ B$) B$)
(declare-fun fun_app$e (B_b_a_fun_fun$ B$) B_a_fun$)
(declare-fun fun_app$f (B_a_fun_b_fun$ B_a_fun$) B$)
(declare-fun fun_app$g (B_a_fun_b_a_fun_fun$ B_a_fun$) B_a_fun$)
(declare-fun fun_app$h (B_a_fun_a_fun$ B_a_fun$) A$)
(declare-fun fun_app$i (A_b_fun$ A$) B$)
(declare-fun fun_app$j (A_b_a_fun_fun$ A$) B_a_fun$)
(declare-fun fun_app$k (A_a_fun$ A$) A$)
(declare-fun fun_app$l (B_a_fun$ B$) A$)
(declare-fun map_tree$ (A_a_fun$ A_tree$) A_tree$)
(declare-fun tree_ap$a (B_b_fun_tree$ B_tree$) B_tree$)
(declare-fun tree_ap$b (A_a_fun_tree$ A_tree$) A_tree$)
(declare-fun tree_ap$c (B_b_a_fun_fun_tree$ B_tree$) B_a_fun_tree$)
(declare-fun tree_ap$d (B_a_a_fun_fun_tree$ B_tree$) A_a_fun_tree$)
(declare-fun tree_ap$e (A_b_a_fun_fun_tree$ A_tree$) B_a_fun_tree$)
(declare-fun tree_ap$f (A_b_fun_tree$ A_tree$) B_tree$)
(declare-fun tree_ap$g (A_a_a_fun_fun_tree$ A_tree$) A_a_fun_tree$)
(declare-fun tree_ap$h (A_b_a_fun_a_fun_fun_tree$ A_tree$) B_a_fun_a_fun_tree$)
(declare-fun tree_ap$i (A_b_b_a_fun_fun_fun_tree$ A_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_ap$j (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_ap$k (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$) A_b_a_fun_fun_tree$)
(declare-fun tree_ap$l (B_b_b_fun_fun_tree$ B_tree$) B_b_fun_tree$)
(declare-fun tree_ap$m (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$) B_b_b_fun_fun_tree$)
(declare-fun tree_ap$n (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun tree_ap$o (A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$) B_a_a_fun_fun_tree$)
(declare-fun tree_ap$p (B_b_b_a_fun_fun_fun_tree$ B_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_ap$q (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$) B_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$r (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$) A_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$s (B_a_b_a_fun_fun_fun_tree$ B_tree$) A_b_a_fun_fun_tree$)
(declare-fun tree_ap$t (B_b_a_a_fun_fun_fun_tree$ B_tree$) B_a_a_fun_fun_tree$)
(declare-fun tree_ap$u (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ B_b_a_a_fun_fun_fun_tree$) B_b_a_a_fun_fun_fun_tree$)
(declare-fun tree_ap$v (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ A_b_b_a_fun_fun_fun_tree$) B_a_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$w (A_a_b_a_fun_fun_fun_tree$ A_tree$) A_b_a_fun_fun_tree$)
(declare-fun tree_ap$x (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ A_a_b_a_fun_fun_fun_tree$) A_a_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$y (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$z (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$) B_a_fun_b_a_fun_fun_tree$)
(declare-fun map_tree$a (A_b_a_fun_fun$ A_tree$) B_a_fun_tree$)
(declare-fun map_tree$b (A_b_fun$ A_tree$) B_tree$)
(declare-fun map_tree$c (B_a_fun_a_fun$ B_a_fun_tree$) A_tree$)
(declare-fun map_tree$d (B_a_fun_b_a_fun_fun$ B_a_fun_tree$) B_a_fun_tree$)
(declare-fun map_tree$e (B_a_fun_b_fun$ B_a_fun_tree$) B_tree$)
(declare-fun map_tree$f (B_a_fun$ B_tree$) A_tree$)
(declare-fun map_tree$g (B_b_a_fun_fun$ B_tree$) B_a_fun_tree$)
(declare-fun map_tree$h (B_b_fun$ B_tree$) B_tree$)
(declare-fun tree_ap$aa (B_b_fun_b_a_fun_fun_tree$ B_b_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$ab (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$) B_b_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$ac (B_a_fun_b_b_fun_fun_tree$ B_a_fun_tree$) B_b_fun_tree$)
(declare-fun tree_ap$ad (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ B_a_b_fun_fun_tree$) B_a_fun_b_b_fun_fun_tree$)
(declare-fun tree_ap$ae (B_a_b_fun_fun_tree$ B_tree$) A_b_fun_tree$)
(declare-fun tree_ap$af (B_b_fun_b_b_fun_fun_tree$ B_b_fun_tree$) B_b_fun_tree$)
(declare-fun tree_ap$ag (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$) B_b_fun_b_b_fun_fun_tree$)
(declare-fun tree_ap$ah (A_b_fun_a_a_fun_fun_tree$ A_b_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$ai (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$) A_b_fun_a_a_fun_fun_tree$)
(declare-fun tree_ap$aj (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$ak (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_ap$al (B_b_a_fun_fun_b_a_fun_fun_tree$ B_b_a_fun_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$am (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_a_fun_fun_tree$) B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$an (B_a_fun_a_fun_tree$ B_a_fun_tree$) A_tree$)
(declare-fun tree_ap$ao (B_b_a_fun_a_fun_fun_tree$ B_tree$) B_a_fun_a_fun_tree$)
(declare-fun tree_ap$ap (B_a_a_fun_fun_b_a_fun_fun_tree$ B_a_a_fun_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$aq (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_a_fun_fun_tree$) B_a_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$ar (A_a_fun_a_fun_tree$ A_a_fun_tree$) A_tree$)
(declare-fun tree_ap$as (B_a_a_fun_a_fun_fun_tree$ B_tree$) A_a_fun_a_fun_tree$)
(declare-fun tree_ap$at (B_b_fun_b_b_a_fun_fun_fun_tree$ B_b_fun_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_ap$au (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$) B_b_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$av (B_a_fun_b_b_a_fun_fun_fun_tree$ B_a_fun_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_ap$aw (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$) B_a_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$ax (A_a_fun_b_a_a_fun_fun_fun_tree$ A_a_fun_tree$) B_a_a_fun_fun_tree$)
(declare-fun tree_ap$ay (B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_tree$) A_b_a_fun_fun_tree$)
(declare-fun tree_ap$az (B_a_fun_b_fun_tree$ B_a_fun_tree$) B_tree$)
(declare-fun tree_pure$ (A_b_a_fun_fun$) A_b_a_fun_fun_tree$)
(declare-fun odd_mirror$ () A_tree_a_tree_fun$)
(declare-fun tree_pure$a (A_b_fun$) A_b_fun_tree$)
(declare-fun tree_pure$b (A_a_fun$) A_a_fun_tree$)
(declare-fun tree_pure$c (A$) A_tree$)
(declare-fun tree_pure$d (B_a_fun$) B_a_fun_tree$)
(declare-fun tree_pure$e (B$) B_tree$)
(declare-fun tree_pure$f (B_a_a_fun_fun$) B_a_a_fun_fun_tree$)
(declare-fun tree_pure$g (B_b_fun$) B_b_fun_tree$)
(declare-fun tree_pure$h (B_b_a_fun_fun$) B_b_a_fun_fun_tree$)
(declare-fun tree_pure$i (B_a_fun_b_fun$) B_a_fun_b_fun_tree$)
(declare-fun tree_pure$j (B_a_fun_b_a_fun_fun$) B_a_fun_b_a_fun_fun_tree$)
(declare-fun tree_pure$k (B_a_fun_a_fun$) B_a_fun_a_fun_tree$)
(declare-fun even_mirror$ () A_tree_a_tree_fun$)
(declare-fun odd_mirror$a () B_a_fun_tree_b_a_fun_tree_fun$)
(declare-fun odd_mirror$b () B_tree_b_tree_fun$)
(declare-fun even_mirror$a () B_a_fun_tree_b_a_fun_tree_fun$)
(declare-fun even_mirror$b () B_tree_b_tree_fun$)
(declare-fun even_odd_mirror$ (Bool) A_tree_a_tree_fun$)
(declare-fun even_odd_mirror$a (Bool) B_a_fun_tree_b_a_fun_tree_fun$)
(declare-fun even_odd_mirror$b (Bool) B_tree_b_tree_fun$)
(declare-fun even_odd_mirror$c (Bool A_b_a_fun_fun_tree$) A_b_a_fun_fun_tree$)
(declare-fun even_odd_mirror$d (Bool A_b_fun_tree$) A_b_fun_tree$)
(declare-fun even_odd_mirror$e (Bool A_a_fun_tree$) A_a_fun_tree$)
(assert (! (not (= (fun_app$ (even_odd_mirror$ even$) (tree_ap$ f$ x$)) (tree_ap$ (fun_app$a (even_odd_mirror$a even$) f$) (fun_app$b (even_odd_mirror$b even$) x$)))) :named a0))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_a_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$ ?v0 ?v2) (tree_ap$ ?v1 ?v2))) (= ?v0 ?v1))) :named a1))
(assert (! (forall ((?v0 B_b_fun_tree$) (?v1 B_b_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$a ?v0 ?v2) (tree_ap$a ?v1 ?v2))) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$b ?v0 ?v2) (tree_ap$b ?v1 ?v2))) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B_b_a_fun_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$c ?v0 ?v2) (tree_ap$c ?v1 ?v2))) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 B_a_a_fun_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$d ?v0 ?v2) (tree_ap$d ?v1 ?v2))) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 A_b_a_fun_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$e ?v0 ?v2) (tree_ap$e ?v1 ?v2))) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 A_b_fun_tree$) (?v1 A_b_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$f ?v0 ?v2) (tree_ap$f ?v1 ?v2))) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_a_a_fun_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$g ?v0 ?v2) (tree_ap$g ?v1 ?v2))) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 A_b_a_fun_a_fun_fun_tree$) (?v1 A_b_a_fun_a_fun_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$h ?v0 ?v2) (tree_ap$h ?v1 ?v2))) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 A_b_b_a_fun_fun_fun_tree$) (?v1 A_b_b_a_fun_fun_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$i ?v0 ?v2) (tree_ap$i ?v1 ?v2))) (= ?v0 ?v1))) :named a10))
(assert (! (= odd_mirror$ (even_odd_mirror$ false)) :named a11))
(assert (! (= odd_mirror$a (even_odd_mirror$a false)) :named a12))
(assert (! (= odd_mirror$b (even_odd_mirror$b false)) :named a13))
(assert (! (= even_mirror$ (even_odd_mirror$ true)) :named a14))
(assert (! (= even_mirror$a (even_odd_mirror$a true)) :named a15))
(assert (! (= even_mirror$b (even_odd_mirror$b true)) :named a16))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$c (tree_ap$j tree_C$ ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$c ?v0 ?v2) ?v1))) :named a17))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 A_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$e (tree_ap$k tree_C$a ?v0) ?v1) ?v2) (tree_ap$b (tree_ap$d ?v0 ?v2) ?v1))) :named a18))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$) (?v1 B_tree$) (?v2 B_tree$)) (= (tree_ap$a (tree_ap$l (tree_ap$m tree_C$b ?v0) ?v1) ?v2) (tree_ap$a (tree_ap$l ?v0 ?v2) ?v1))) :named a19))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_tree$) (?v2 A_tree$)) (= (tree_ap$b (tree_ap$g (tree_ap$n tree_C$c ?v0) ?v1) ?v2) (tree_ap$b (tree_ap$g ?v0 ?v2) ?v1))) :named a20))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 B_tree$) (?v2 A_tree$)) (= (tree_ap$b (tree_ap$d (tree_ap$o tree_C$d ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$e ?v0 ?v2) ?v1))) :named a21))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$) (?v1 B_tree$) (?v2 B_tree$)) (= (tree_ap$c (tree_ap$p (tree_ap$q tree_C$e ?v0) ?v1) ?v2) (tree_ap$c (tree_ap$p ?v0 ?v2) ?v1))) :named a22))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$) (?v1 A_tree$) (?v2 B_tree$)) (= (tree_ap$c (tree_ap$i (tree_ap$r tree_C$f ?v0) ?v1) ?v2) (tree_ap$e (tree_ap$s ?v0 ?v2) ?v1))) :named a23))
(assert (! (forall ((?v0 B_b_a_a_fun_fun_fun_tree$) (?v1 B_tree$) (?v2 B_tree$)) (= (tree_ap$d (tree_ap$t (tree_ap$u tree_C$g ?v0) ?v1) ?v2) (tree_ap$d (tree_ap$t ?v0 ?v2) ?v1))) :named a24))
(assert (! (forall ((?v0 A_b_b_a_fun_fun_fun_tree$) (?v1 B_tree$) (?v2 A_tree$)) (= (tree_ap$e (tree_ap$s (tree_ap$v tree_C$h ?v0) ?v1) ?v2) (tree_ap$c (tree_ap$i ?v0 ?v2) ?v1))) :named a25))
(assert (! (forall ((?v0 A_a_b_a_fun_fun_fun_tree$) (?v1 A_tree$) (?v2 A_tree$)) (= (tree_ap$e (tree_ap$w (tree_ap$x tree_C$i ?v0) ?v1) ?v2) (tree_ap$e (tree_ap$w ?v0 ?v2) ?v1))) :named a26))
(assert (! (forall ((?v0 Bool) (?v1 A_b_a_fun_fun$)) (= (even_odd_mirror$c ?v0 (tree_pure$ ?v1)) (tree_pure$ ?v1))) :named a27))
(assert (! (forall ((?v0 Bool) (?v1 A_b_fun$)) (= (even_odd_mirror$d ?v0 (tree_pure$a ?v1)) (tree_pure$a ?v1))) :named a28))
(assert (! (forall ((?v0 Bool) (?v1 A_a_fun$)) (= (even_odd_mirror$e ?v0 (tree_pure$b ?v1)) (tree_pure$b ?v1))) :named a29))
(assert (! (forall ((?v0 Bool) (?v1 A$)) (= (fun_app$ (even_odd_mirror$ ?v0) (tree_pure$c ?v1)) (tree_pure$c ?v1))) :named a30))
(assert (! (forall ((?v0 Bool) (?v1 B_a_fun$)) (= (fun_app$a (even_odd_mirror$a ?v0) (tree_pure$d ?v1)) (tree_pure$d ?v1))) :named a31))
(assert (! (forall ((?v0 Bool) (?v1 B$)) (= (fun_app$b (even_odd_mirror$b ?v0) (tree_pure$e ?v1)) (tree_pure$e ?v1))) :named a32))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 B_a_fun_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$y (tree_ap$z tree_S$ ?v0) ?v1) ?v2) (tree_ap$b (tree_ap$d ?v0 ?v2) (tree_ap$ ?v1 ?v2)))) :named a33))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B_b_fun_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$aa (tree_ap$ab tree_S$a ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$c ?v0 ?v2) (tree_ap$a ?v1 ?v2)))) :named a34))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$) (?v1 B_a_fun_tree$) (?v2 B_tree$)) (= (tree_ap$a (tree_ap$ac (tree_ap$ad tree_S$b ?v0) ?v1) ?v2) (tree_ap$f (tree_ap$ae ?v0 ?v2) (tree_ap$ ?v1 ?v2)))) :named a35))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$) (?v1 B_b_fun_tree$) (?v2 B_tree$)) (= (tree_ap$a (tree_ap$af (tree_ap$ag tree_S$c ?v0) ?v1) ?v2) (tree_ap$a (tree_ap$l ?v0 ?v2) (tree_ap$a ?v1 ?v2)))) :named a36))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 A_b_fun_tree$) (?v2 A_tree$)) (= (tree_ap$b (tree_ap$ah (tree_ap$ai tree_S$d ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$e ?v0 ?v2) (tree_ap$f ?v1 ?v2)))) :named a37))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_a_fun_tree$) (?v2 A_tree$)) (= (tree_ap$b (tree_ap$aj (tree_ap$ak tree_S$e ?v0) ?v1) ?v2) (tree_ap$b (tree_ap$g ?v0 ?v2) (tree_ap$b ?v1 ?v2)))) :named a38))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun_tree$) (?v1 B_b_a_fun_fun_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$al (tree_ap$am tree_S$f ?v0) ?v1) ?v2) (tree_ap$an (tree_ap$ao ?v0 ?v2) (tree_ap$c ?v1 ?v2)))) :named a39))
(assert (! (forall ((?v0 B_a_a_fun_a_fun_fun_tree$) (?v1 B_a_a_fun_fun_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$ap (tree_ap$aq tree_S$g ?v0) ?v1) ?v2) (tree_ap$ar (tree_ap$as ?v0 ?v2) (tree_ap$d ?v1 ?v2)))) :named a40))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$) (?v1 B_b_fun_tree$) (?v2 B_tree$)) (= (tree_ap$c (tree_ap$at (tree_ap$au tree_S$h ?v0) ?v1) ?v2) (tree_ap$c (tree_ap$p ?v0 ?v2) (tree_ap$a ?v1 ?v2)))) :named a41))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$) (?v1 B_a_fun_tree$) (?v2 B_tree$)) (= (tree_ap$c (tree_ap$av (tree_ap$aw tree_S$i ?v0) ?v1) ?v2) (tree_ap$e (tree_ap$s ?v0 ?v2) (tree_ap$ ?v1 ?v2)))) :named a42))
(assert (! (forall ((?v0 Bool) (?v1 A_tree$)) (= (root$ (fun_app$ (even_odd_mirror$ ?v0) ?v1)) (root$ ?v1))) :named a43))
(assert (! (forall ((?v0 Bool) (?v1 B_a_fun_tree$)) (= (root$b (fun_app$a (even_odd_mirror$a ?v0) ?v1)) (root$b ?v1))) :named a44))
(assert (! (forall ((?v0 Bool) (?v1 B_tree$)) (= (root$a (fun_app$b (even_odd_mirror$b ?v0) ?v1)) (root$a ?v1))) :named a45))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_tree$)) (= (tree_ap$c (tree_ap$av tree_K$ ?v0) ?v1) ?v0)) :named a46))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 B_tree$)) (= (tree_ap$d (tree_ap$ax tree_K$a ?v0) ?v1) ?v0)) :named a47))
(assert (! (forall ((?v0 B_tree$) (?v1 B_tree$)) (= (tree_ap$a (tree_ap$l tree_K$b ?v0) ?v1) ?v0)) :named a48))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 A_tree$)) (= (tree_ap$e (tree_ap$ay tree_K$c ?v0) ?v1) ?v0)) :named a49))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (= (tree_ap$b (tree_ap$g tree_K$d ?v0) ?v1) ?v0)) :named a50))
(assert (! (forall ((?v0 A_tree$) (?v1 B_tree$)) (= (tree_ap$ (tree_ap$e tree_K$e ?v0) ?v1) ?v0)) :named a51))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Bool) (?v2 A_tree$)) (= (map_tree$ ?v0 (fun_app$ (even_odd_mirror$ ?v1) ?v2)) (fun_app$ (even_odd_mirror$ ?v1) (map_tree$ ?v0 ?v2)))) :named a52))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 Bool) (?v2 A_tree$)) (= (map_tree$a ?v0 (fun_app$ (even_odd_mirror$ ?v1) ?v2)) (fun_app$a (even_odd_mirror$a ?v1) (map_tree$a ?v0 ?v2)))) :named a53))
(assert (! (forall ((?v0 A_b_fun$) (?v1 Bool) (?v2 A_tree$)) (= (map_tree$b ?v0 (fun_app$ (even_odd_mirror$ ?v1) ?v2)) (fun_app$b (even_odd_mirror$b ?v1) (map_tree$b ?v0 ?v2)))) :named a54))
(assert (! (forall ((?v0 B_a_fun_a_fun$) (?v1 Bool) (?v2 B_a_fun_tree$)) (= (map_tree$c ?v0 (fun_app$a (even_odd_mirror$a ?v1) ?v2)) (fun_app$ (even_odd_mirror$ ?v1) (map_tree$c ?v0 ?v2)))) :named a55))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$) (?v1 Bool) (?v2 B_a_fun_tree$)) (= (map_tree$d ?v0 (fun_app$a (even_odd_mirror$a ?v1) ?v2)) (fun_app$a (even_odd_mirror$a ?v1) (map_tree$d ?v0 ?v2)))) :named a56))
(assert (! (forall ((?v0 B_a_fun_b_fun$) (?v1 Bool) (?v2 B_a_fun_tree$)) (= (map_tree$e ?v0 (fun_app$a (even_odd_mirror$a ?v1) ?v2)) (fun_app$b (even_odd_mirror$b ?v1) (map_tree$e ?v0 ?v2)))) :named a57))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Bool) (?v2 B_tree$)) (= (map_tree$f ?v0 (fun_app$b (even_odd_mirror$b ?v1) ?v2)) (fun_app$ (even_odd_mirror$ ?v1) (map_tree$f ?v0 ?v2)))) :named a58))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 Bool) (?v2 B_tree$)) (= (map_tree$g ?v0 (fun_app$b (even_odd_mirror$b ?v1) ?v2)) (fun_app$a (even_odd_mirror$a ?v1) (map_tree$g ?v0 ?v2)))) :named a59))
(assert (! (forall ((?v0 B_b_fun$) (?v1 Bool) (?v2 B_tree$)) (= (map_tree$h ?v0 (fun_app$b (even_odd_mirror$b ?v1) ?v2)) (fun_app$b (even_odd_mirror$b ?v1) (map_tree$h ?v0 ?v2)))) :named a60))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 B_tree$)) (= (mirror$ (tree_ap$d ?v0 ?v1)) (tree_ap$d (mirror$a ?v0) (mirror$b ?v1)))) :named a61))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (mirror$c (tree_ap$b ?v0 ?v1)) (tree_ap$b (mirror$ ?v0) (mirror$c ?v1)))) :named a62))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$) (?v1 B_a_fun_tree$)) (= (mirror$c (tree_ap$an ?v0 ?v1)) (tree_ap$an (mirror$d ?v0) (mirror$e ?v1)))) :named a63))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 A_tree$)) (= (mirror$e (tree_ap$e ?v0 ?v1)) (tree_ap$e (mirror$f ?v0) (mirror$c ?v1)))) :named a64))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun_tree$) (?v1 B_a_fun_tree$)) (= (mirror$e (tree_ap$y ?v0 ?v1)) (tree_ap$y (mirror$g ?v0) (mirror$e ?v1)))) :named a65))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B_tree$)) (= (mirror$e (tree_ap$c ?v0 ?v1)) (tree_ap$c (mirror$h ?v0) (mirror$b ?v1)))) :named a66))
(assert (! (forall ((?v0 A_b_fun_tree$) (?v1 A_tree$)) (= (mirror$b (tree_ap$f ?v0 ?v1)) (tree_ap$f (mirror$i ?v0) (mirror$c ?v1)))) :named a67))
(assert (! (forall ((?v0 B_a_fun_b_fun_tree$) (?v1 B_a_fun_tree$)) (= (mirror$b (tree_ap$az ?v0 ?v1)) (tree_ap$az (mirror$j ?v0) (mirror$e ?v1)))) :named a68))
(assert (! (forall ((?v0 B_b_fun_tree$) (?v1 B_tree$)) (= (mirror$b (tree_ap$a ?v0 ?v1)) (tree_ap$a (mirror$k ?v0) (mirror$b ?v1)))) :named a69))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_tree$)) (= (mirror$c (tree_ap$ ?v0 ?v1)) (tree_ap$ (mirror$e ?v0) (mirror$b ?v1)))) :named a70))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B_b_a_fun_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$c ?v0 (tree_pure$e ?v2)) (tree_ap$c ?v1 (tree_pure$e ?v2)))) (= ?v0 ?v1))) :named a71))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 B_a_a_fun_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$d ?v0 (tree_pure$e ?v2)) (tree_ap$d ?v1 (tree_pure$e ?v2)))) (= ?v0 ?v1))) :named a72))
(assert (! (forall ((?v0 B_b_fun_tree$) (?v1 B_b_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$a ?v0 (tree_pure$e ?v2)) (tree_ap$a ?v1 (tree_pure$e ?v2)))) (= ?v0 ?v1))) :named a73))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 A_b_a_fun_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$e ?v0 (tree_pure$c ?v2)) (tree_ap$e ?v1 (tree_pure$c ?v2)))) (= ?v0 ?v1))) :named a74))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$b ?v0 (tree_pure$c ?v2)) (tree_ap$b ?v1 (tree_pure$c ?v2)))) (= ?v0 ?v1))) :named a75))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_a_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$ ?v0 (tree_pure$e ?v2)) (tree_ap$ ?v1 (tree_pure$e ?v2)))) (= ?v0 ?v1))) :named a76))
(assert (! (forall ((?v0 Bool) (?v1 A_tree$)) (= (left$ (fun_app$ (even_odd_mirror$ ?v0) ?v1)) (fun_app$ (even_odd_mirror$ (ite (not ?v0) true false)) (ite ?v0 (right$ ?v1) (left$ ?v1))))) :named a77))
(assert (! (forall ((?v0 Bool) (?v1 B_a_fun_tree$)) (= (left$b (fun_app$a (even_odd_mirror$a ?v0) ?v1)) (fun_app$a (even_odd_mirror$a (ite (not ?v0) true false)) (ite ?v0 (right$b ?v1) (left$b ?v1))))) :named a78))
(assert (! (forall ((?v0 Bool) (?v1 B_tree$)) (= (left$a (fun_app$b (even_odd_mirror$b ?v0) ?v1)) (fun_app$b (even_odd_mirror$b (ite (not ?v0) true false)) (ite ?v0 (right$a ?v1) (left$a ?v1))))) :named a79))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B$)) (= (tree_ap$d (tree_pure$f ?v0) (tree_pure$e ?v1)) (tree_pure$b (fun_app$c ?v0 ?v1)))) :named a80))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (= (tree_ap$a (tree_pure$g ?v0) (tree_pure$e ?v1)) (tree_pure$e (fun_app$d ?v0 ?v1)))) :named a81))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B$)) (= (tree_ap$c (tree_pure$h ?v0) (tree_pure$e ?v1)) (tree_pure$d (fun_app$e ?v0 ?v1)))) :named a82))
(assert (! (forall ((?v0 B_a_fun_b_fun$) (?v1 B_a_fun$)) (= (tree_ap$az (tree_pure$i ?v0) (tree_pure$d ?v1)) (tree_pure$e (fun_app$f ?v0 ?v1)))) :named a83))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$) (?v1 B_a_fun$)) (= (tree_ap$y (tree_pure$j ?v0) (tree_pure$d ?v1)) (tree_pure$d (fun_app$g ?v0 ?v1)))) :named a84))
(assert (! (forall ((?v0 B_a_fun_a_fun$) (?v1 B_a_fun$)) (= (tree_ap$an (tree_pure$k ?v0) (tree_pure$d ?v1)) (tree_pure$c (fun_app$h ?v0 ?v1)))) :named a85))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A$)) (= (tree_ap$f (tree_pure$a ?v0) (tree_pure$c ?v1)) (tree_pure$e (fun_app$i ?v0 ?v1)))) :named a86))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 A$)) (= (tree_ap$e (tree_pure$ ?v0) (tree_pure$c ?v1)) (tree_pure$d (fun_app$j ?v0 ?v1)))) :named a87))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (tree_ap$b (tree_pure$b ?v0) (tree_pure$c ?v1)) (tree_pure$c (fun_app$k ?v0 ?v1)))) :named a88))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B$)) (= (tree_ap$ (tree_pure$d ?v0) (tree_pure$e ?v1)) (tree_pure$c (fun_app$l ?v0 ?v1)))) :named a89))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B$)) (= (map_tree$g ?v0 (tree_pure$e ?v1)) (tree_pure$d (fun_app$e ?v0 ?v1)))) :named a90))
(assert (! (forall ((?v0 B_a_fun_b_fun$) (?v1 B_a_fun$)) (= (map_tree$e ?v0 (tree_pure$d ?v1)) (tree_pure$e (fun_app$f ?v0 ?v1)))) :named a91))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$) (?v1 B_a_fun$)) (= (map_tree$d ?v0 (tree_pure$d ?v1)) (tree_pure$d (fun_app$g ?v0 ?v1)))) :named a92))
(assert (! (forall ((?v0 B_a_fun_a_fun$) (?v1 B_a_fun$)) (= (map_tree$c ?v0 (tree_pure$d ?v1)) (tree_pure$c (fun_app$h ?v0 ?v1)))) :named a93))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (= (map_tree$h ?v0 (tree_pure$e ?v1)) (tree_pure$e (fun_app$d ?v0 ?v1)))) :named a94))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B$)) (= (map_tree$f ?v0 (tree_pure$e ?v1)) (tree_pure$c (fun_app$l ?v0 ?v1)))) :named a95))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 A$)) (= (map_tree$a ?v0 (tree_pure$c ?v1)) (tree_pure$d (fun_app$j ?v0 ?v1)))) :named a96))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A$)) (= (map_tree$b ?v0 (tree_pure$c ?v1)) (tree_pure$e (fun_app$i ?v0 ?v1)))) :named a97))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (map_tree$ ?v0 (tree_pure$c ?v1)) (tree_pure$c (fun_app$k ?v0 ?v1)))) :named a98))
(assert (! (forall ((?v0 B_a_fun_b_fun$) (?v1 B_a_fun_tree$)) (= (root$a (map_tree$e ?v0 ?v1)) (fun_app$f ?v0 (root$b ?v1)))) :named a99))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B_tree$)) (= (root$b (map_tree$g ?v0 ?v1)) (fun_app$e ?v0 (root$a ?v1)))) :named a100))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$) (?v1 B_a_fun_tree$)) (= (root$b (map_tree$d ?v0 ?v1)) (fun_app$g ?v0 (root$b ?v1)))) :named a101))
(assert (! (forall ((?v0 B_a_fun_a_fun$) (?v1 B_a_fun_tree$)) (= (root$ (map_tree$c ?v0 ?v1)) (fun_app$h ?v0 (root$b ?v1)))) :named a102))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_tree$)) (= (root$a (map_tree$h ?v0 ?v1)) (fun_app$d ?v0 (root$a ?v1)))) :named a103))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_tree$)) (= (root$ (map_tree$f ?v0 ?v1)) (fun_app$l ?v0 (root$a ?v1)))) :named a104))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 A_tree$)) (= (root$b (map_tree$a ?v0 ?v1)) (fun_app$j ?v0 (root$ ?v1)))) :named a105))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_tree$)) (= (root$a (map_tree$b ?v0 ?v1)) (fun_app$i ?v0 (root$ ?v1)))) :named a106))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (root$ (map_tree$ ?v0 ?v1)) (fun_app$k ?v0 (root$ ?v1)))) :named a107))
(assert (! (forall ((?v0 B_a_fun_b_fun$) (?v1 B_a_fun_tree$)) (= (root$a (map_tree$e ?v0 ?v1)) (fun_app$f ?v0 (root$b ?v1)))) :named a108))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B_tree$)) (= (root$b (map_tree$g ?v0 ?v1)) (fun_app$e ?v0 (root$a ?v1)))) :named a109))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$) (?v1 B_a_fun_tree$)) (= (root$b (map_tree$d ?v0 ?v1)) (fun_app$g ?v0 (root$b ?v1)))) :named a110))
(assert (! (forall ((?v0 B_a_fun_a_fun$) (?v1 B_a_fun_tree$)) (= (root$ (map_tree$c ?v0 ?v1)) (fun_app$h ?v0 (root$b ?v1)))) :named a111))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_tree$)) (= (root$a (map_tree$h ?v0 ?v1)) (fun_app$d ?v0 (root$a ?v1)))) :named a112))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_tree$)) (= (root$ (map_tree$f ?v0 ?v1)) (fun_app$l ?v0 (root$a ?v1)))) :named a113))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 A_tree$)) (= (root$b (map_tree$a ?v0 ?v1)) (fun_app$j ?v0 (root$ ?v1)))) :named a114))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_tree$)) (= (root$a (map_tree$b ?v0 ?v1)) (fun_app$i ?v0 (root$ ?v1)))) :named a115))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (root$ (map_tree$ ?v0 ?v1)) (fun_app$k ?v0 (root$ ?v1)))) :named a116))
(check-sat)
;(get-unsat-core)
