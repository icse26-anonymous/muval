; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 462
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun$ 0)
(declare-sort A_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_a_fun$ 0)
(declare-sort A_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_fun_a_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_a_fun_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_a_a_fun_fun_fun_fun$ 0)
(declare-codatatypes () ((A_a_fun_tree$ (node$ (select$ A_a_fun$) (selecta$ A_a_fun_tree$) (selectb$ A_a_fun_tree$)))
  (A_a_fun_a_a_fun_fun_tree$ (node$a (selectc$ A_a_fun_a_a_fun_fun$) (selectd$ A_a_fun_a_a_fun_fun_tree$) (selecte$ A_a_fun_a_a_fun_fun_tree$)))
  (A_tree$ (node$b (root$ A$) (left$ A_tree$) (right$ A_tree$)))
  (A_a_fun_a_fun_tree$ (node$c (selectf$ A_a_fun_a_fun$) (selectg$ A_a_fun_a_fun_tree$) (selecth$ A_a_fun_a_fun_tree$)))
  (A_a_a_fun_fun_tree$ (node$d (selecti$ A_a_a_fun_fun$) (selectj$ A_a_a_fun_fun_tree$) (selectk$ A_a_a_fun_fun_tree$)))
  (A_a_a_fun_a_a_fun_fun_fun_tree$ (node$e (selectl$ A_a_a_fun_a_a_fun_fun_fun$) (selectm$ A_a_a_fun_a_a_fun_fun_fun_tree$) (selectn$ A_a_a_fun_a_a_fun_fun_fun_tree$)))
  (A_a_fun_a_a_fun_fun_a_fun_tree$ (node$f (selecto$ A_a_fun_a_a_fun_fun_a_fun$) (selectp$ A_a_fun_a_a_fun_fun_a_fun_tree$) (selectq$ A_a_fun_a_a_fun_fun_a_fun_tree$)))
  (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ (node$g (selectr$ A_a_fun_a_a_fun_a_a_fun_fun_fun$) (selects$ A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) (selectt$ A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)))
  (A_a_fun_a_a_fun_fun_a_a_fun_fun_tree$ (node$h (selectu$ A_a_fun_a_a_fun_fun_a_a_fun_fun$) (selectv$ A_a_fun_a_a_fun_fun_a_a_fun_fun_tree$) (selectw$ A_a_fun_a_a_fun_fun_a_a_fun_fun_tree$)))
  (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ (node$i (selectx$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (selecty$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$) (selectz$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)))
  (A_a_a_fun_a_fun_fun_tree$ (node$j (selecua$ A_a_a_fun_a_fun_fun$) (selecub$ A_a_a_fun_a_fun_fun_tree$) (selecuc$ A_a_a_fun_a_fun_fun_tree$)))
  (A_a_a_fun_fun_a_a_fun_fun_tree$ (node$k (selecud$ A_a_a_fun_fun_a_a_fun_fun$) (selecue$ A_a_a_fun_fun_a_a_fun_fun_tree$) (selecuf$ A_a_a_fun_fun_a_a_fun_fun_tree$)))
  (A_a_fun_a_a_a_fun_fun_a_a_fun_fun_fun_tree$ (node$l (selecug$ A_a_fun_a_a_a_fun_fun_a_a_fun_fun_fun$) (selecuh$ A_a_fun_a_a_a_fun_fun_a_a_fun_fun_fun_tree$) (selecui$ A_a_fun_a_a_a_fun_fun_a_a_fun_fun_fun_tree$)))
  (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_a_a_fun_fun_fun_fun_tree$ (node$m (selecuj$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_a_a_fun_fun_fun_fun$) (selecuk$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_a_a_fun_fun_fun_fun_tree$) (selecul$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_a_a_fun_fun_fun_fun_tree$)))
  (A_a_fun_a_a_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun_tree$ (node$n (selecum$ A_a_fun_a_a_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun$) (selecun$ A_a_fun_a_a_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun_tree$) (selecuo$ A_a_fun_a_a_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun_tree$)))
  (A_a_fun_a_a_a_fun_fun_fun_tree$ (node$o (selecup$ A_a_fun_a_a_a_fun_fun_fun$) (selecuq$ A_a_fun_a_a_a_fun_fun_fun_tree$) (selecur$ A_a_fun_a_a_a_fun_fun_fun_tree$)))
  (A_a_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ (node$p (selecus$ A_a_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun$) (selecut$ A_a_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$) (selecuu$ A_a_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)))
  (A_a_fun_a_fun_a_fun_tree$ (node$q (selecuv$ A_a_fun_a_fun_a_fun$) (selecuw$ A_a_fun_a_fun_a_fun_tree$) (selecux$ A_a_fun_a_fun_a_fun_tree$)))
  (A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ (node$r (selecuy$ A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun$) (selecuz$ A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$) (selecva$ A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)))
  (A_a_fun_a_a_fun_fun_a_fun_a_fun_tree$ (node$s (selecvb$ A_a_fun_a_a_fun_fun_a_fun_a_fun$) (selecvc$ A_a_fun_a_a_fun_fun_a_fun_a_fun_tree$) (selecvd$ A_a_fun_a_a_fun_fun_a_fun_a_fun_tree$)))
  (A_a_a_fun_fun_a_a_fun_fun_a_a_fun_fun_tree$ (node$t (selecve$ A_a_a_fun_fun_a_a_fun_fun_a_a_fun_fun$) (selecvf$ A_a_a_fun_fun_a_a_fun_fun_a_a_fun_fun_tree$) (selecvg$ A_a_a_fun_fun_a_a_fun_fun_a_a_fun_fun_tree$)))))
(declare-fun id$ () A_a_fun_a_a_fun_fun$)
(declare-fun uu$ () A_a_fun$)
(declare-fun id$a () A_a_fun$)
(declare-fun uua$ (A_a_fun$) A_a_a_fun_fun_a_a_fun_fun$)
(declare-fun uub$ (A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun uuc$ (A$) A_a_fun_a_fun$)
(declare-fun uud$ (A_a_fun_a_a_fun_fun$) A_a_a_fun_a_a_fun_fun_fun$)
(declare-fun uue$ (A_a_fun$) A_a_a_fun_fun$)
(declare-fun uuf$ (A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun uug$ (A$) A_a_fun$)
(declare-fun uuh$ (A_a_fun$) A_a_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun uui$ (A_a_fun$) A_a_fun_a_fun_a_fun$)
(declare-fun uuj$ (A$) A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun uuk$ (A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_a_fun_a_fun$)
(declare-fun uul$ (A_a_a_fun_fun$) A_a_a_fun_fun_a_a_fun_fun_a_a_fun_fun$)
(declare-fun uum$ (A_a_fun$) A_a_fun_a_a_fun_fun_a_a_fun_fun$)
(declare-fun uun$ (A$) A_a_fun_a_fun$)
(declare-fun uuo$ (A$) A_a_a_fun_fun_a_a_fun_fun$)
(declare-fun left$a (A_a_a_fun_fun_a_a_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun left$b (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun left$c (A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun left$d (A_a_a_fun_a_a_fun_fun_fun_tree$) A_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun left$e (A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun left$f (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun left$g (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun root$a (A_a_a_fun_fun_a_a_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_fun$)
(declare-fun root$b (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun root$c (A_a_fun_a_fun_tree$) A_a_fun_a_fun$)
(declare-fun root$d (A_a_a_fun_a_a_fun_fun_fun_tree$) A_a_a_fun_a_a_fun_fun_fun$)
(declare-fun root$e (A_a_a_fun_fun_tree$) A_a_a_fun_fun$)
(declare-fun root$f (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun$)
(declare-fun root$g (A_a_fun_tree$) A_a_fun$)
(declare-fun right$a (A_a_a_fun_fun_a_a_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun right$b (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun right$c (A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun right$d (A_a_a_fun_a_a_fun_fun_fun_tree$) A_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun right$e (A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun right$f (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun right$g (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun tree_I$ () A_a_fun_tree$)
(declare-fun tree_K$ () A_a_fun_a_a_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun fun_app$ (A_a_fun_a_a_fun_fun_a_fun_a_fun$ A_a_fun_a_a_fun_fun_a_fun$) A$)
(declare-fun tree_I$a () A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_K$a () A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_a_a_fun_fun_fun_fun_tree$)
(declare-fun tree_K$b () A_a_a_fun_a_fun_fun_tree$)
(declare-fun tree_K$c () A_a_fun_a_a_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun_tree$)
(declare-fun tree_K$d () A_a_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun tree_K$e () A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_K$f () A_a_a_fun_fun_tree$)
(declare-fun tree_ap$ (A_a_fun_tree$ A_tree$) A_tree$)
(declare-fun fun_app$a (A_a_fun_a_a_fun_fun_a_fun$ A_a_fun_a_a_fun_fun$) A$)
(declare-fun fun_app$b (A_a_a_fun_fun_a_a_fun_fun_a_a_fun_fun$ A_a_a_fun_fun_a_a_fun_fun$) A_a_fun$)
(declare-fun fun_app$c (A_a_a_fun_fun_a_a_fun_fun$ A_a_a_fun_fun$) A_a_fun$)
(declare-fun fun_app$d (A_a_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$e (A_a_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$f (A_a_fun_a_a_fun_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun$)
(declare-fun fun_app$g (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$h (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun$) A$)
(declare-fun fun_app$i (A_a_fun_a_fun$ A_a_fun$) A$)
(declare-fun fun_app$j (A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$k (A_a_a_fun_a_a_fun_fun_fun$ A$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$l (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$m (A_a_fun$ A$) A$)
(declare-fun fun_app$n (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$o (A_a_a_fun_a_fun_fun$ A$) A_a_fun_a_fun$)
(declare-fun map_tree$ (A_a_fun_a_a_fun_fun$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$a (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$b (A_a_fun_a_fun_tree$ A_a_fun_tree$) A_tree$)
(declare-fun tree_ap$c (A_a_a_fun_fun_tree$ A_tree$) A_a_fun_tree$)
(declare-fun tree_ap$d (A_a_a_fun_a_a_fun_fun_fun_tree$ A_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_ap$e (A_a_fun_a_a_fun_fun_a_fun_tree$ A_a_fun_a_a_fun_fun_tree$) A_tree$)
(declare-fun tree_ap$f (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_ap$g (A_a_fun_a_a_fun_fun_a_a_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$h (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_ap$i (A_a_a_fun_a_fun_fun_tree$ A_tree$) A_a_fun_a_fun_tree$)
(declare-fun tree_ap$j (A_a_fun_a_a_a_fun_fun_a_a_fun_fun_fun_tree$ A_a_fun_tree$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun tree_ap$k (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_a_a_fun_fun_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_ap$l (A_a_fun_a_a_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$) A_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_ap$m (A_a_fun_a_a_a_fun_fun_fun_tree$ A_a_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun tree_ap$n (A_a_a_fun_fun_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$o (A_a_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_ap$p (A_a_fun_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$) A_tree$)
(declare-fun tree_ap$q (A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_ap$r (A_a_fun_a_a_fun_fun_a_fun_a_fun_tree$ A_a_fun_a_a_fun_fun_a_fun_tree$) A_tree$)
(declare-fun tree_ap$s (A_a_a_fun_fun_a_a_fun_fun_a_a_fun_fun_tree$ A_a_a_fun_fun_a_a_fun_fun_tree$) A_a_fun_tree$)
(declare-fun map_tree$a (A_a_fun$ A_tree$) A_tree$)
(declare-fun map_tree$b (A_a_fun_a_fun$ A_a_fun_tree$) A_tree$)
(declare-fun map_tree$c (A_a_a_fun_fun$ A_tree$) A_a_fun_tree$)
(declare-fun map_tree$d (A_a_a_fun_a_a_fun_fun_fun$ A_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun map_tree$e (A_a_fun_a_a_fun_fun_a_fun$ A_a_fun_a_a_fun_fun_tree$) A_tree$)
(declare-fun map_tree$f (A_a_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun map_tree$g (A_a_fun_a_a_fun_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_tree$) A_a_fun_tree$)
(declare-fun map_tree$h (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun map_tree$i (A_a_a_fun_a_fun_fun$ A_tree$) A_a_fun_a_fun_tree$)
(declare-fun tree_pure$ (A_a_fun$) A_a_fun_tree$)
(declare-fun tree_pure$a (A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_pure$b (A$) A_tree$)
(declare-fun tree_pure$c (A_a_fun_a_fun$) A_a_fun_a_fun_tree$)
(declare-fun tree_pure$d (A_a_a_fun_fun$) A_a_a_fun_fun_tree$)
(declare-fun tree_pure$e (A_a_a_fun_a_a_fun_fun_fun$) A_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_pure$f (A_a_fun_a_a_fun_fun_a_fun$) A_a_fun_a_a_fun_fun_a_fun_tree$)
(declare-fun tree_pure$g (A_a_fun_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_pure$h (A_a_fun_a_a_fun_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun tree_pure$i (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_pure$j (A_a_a_fun_a_fun_fun$) A_a_a_fun_a_fun_fun_tree$)
(declare-fun tree_pure$k (A_a_a_fun_fun_a_a_fun_fun$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun tree_pure$l (A_a_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_pure$m (A_a_fun_a_fun_a_fun$) A_a_fun_a_fun_a_fun_tree$)
(declare-fun tree_pure$n (A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun$) A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_pure$o (A_a_fun_a_a_fun_fun_a_fun_a_fun$) A_a_fun_a_a_fun_fun_a_fun_a_fun_tree$)
(declare-fun tree_pure$p (A_a_a_fun_fun_a_a_fun_fun_a_a_fun_fun$) A_a_a_fun_fun_a_a_fun_fun_a_a_fun_fun_tree$)
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_a_fun$)) (! (= (fun_app$ (uuk$ ?v0) ?v1) (fun_app$a ?v1 ?v0)) :pattern ((fun_app$ (uuk$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun_a_a_fun_fun$)) (! (= (fun_app$b (uul$ ?v0) ?v1) (fun_app$c ?v1 ?v0)) :pattern ((fun_app$b (uul$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_a_a_fun_a_a_fun_fun_fun$)) (! (= (fun_app$d (uuh$ ?v0) ?v1) (fun_app$e ?v1 ?v0)) :pattern ((fun_app$d (uuh$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (! (= (fun_app$f (uum$ ?v0) ?v1) (fun_app$g ?v1 ?v0)) :pattern ((fun_app$f (uum$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_a_fun$)) (! (= (fun_app$h (uui$ ?v0) ?v1) (fun_app$i ?v1 ?v0)) :pattern ((fun_app$h (uui$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_a_a_fun_a_a_fun_fun_fun$)) (! (= (fun_app$j (uuj$ ?v0) ?v1) (fun_app$k ?v1 ?v0)) :pattern ((fun_app$j (uuj$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_a_a_fun_fun$)) (! (= (fun_app$c (uuo$ ?v0) ?v1) (fun_app$l ?v1 ?v0)) :pattern ((fun_app$c (uuo$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$)) (! (= (fun_app$i (uun$ ?v0) ?v1) (fun_app$m ?v1 ?v0)) :pattern ((fun_app$i (uun$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (! (= (fun_app$e (uub$ ?v0) ?v1) ?v0) :pattern ((fun_app$e (uub$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A$)) (! (= (fun_app$k (uud$ ?v0) ?v1) ?v0) :pattern ((fun_app$k (uud$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_a_fun_fun$)) (! (= (fun_app$c (uua$ ?v0) ?v1) ?v0) :pattern ((fun_app$c (uua$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (! (= (fun_app$g (uuf$ ?v0) ?v1) ?v0) :pattern ((fun_app$g (uuf$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (! (= (fun_app$l (uue$ ?v0) ?v1) ?v0) :pattern ((fun_app$l (uue$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$)) (! (= (fun_app$i (uuc$ ?v0) ?v1) ?v0) :pattern ((fun_app$i (uuc$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$m (uug$ ?v0) ?v1) ?v0) :pattern ((fun_app$m (uug$ ?v0) ?v1)))) :named a14))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$m uu$ ?v0) ?v0) :pattern ((fun_app$m uu$ ?v0)))) :named a15))
(assert (! (not (= (tree_pure$ uu$) tree_I$)) :named a16))
(assert (! (= tree_I$a (tree_pure$a id$)) :named a17))
(assert (! (= tree_I$ (tree_pure$ id$a)) :named a18))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (tree_ap$ (tree_pure$ ?v0) (tree_pure$b ?v1)) (tree_pure$b (fun_app$m ?v0 ?v1)))) :named a19))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (= (tree_ap$a (tree_pure$a ?v0) (tree_pure$ ?v1)) (tree_pure$ (fun_app$g ?v0 ?v1)))) :named a20))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$)) (= (tree_ap$b (tree_pure$c ?v0) (tree_pure$ ?v1)) (tree_pure$b (fun_app$i ?v0 ?v1)))) :named a21))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (= (tree_ap$c (tree_pure$d ?v0) (tree_pure$b ?v1)) (tree_pure$ (fun_app$l ?v0 ?v1)))) :named a22))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun$) (?v1 A$)) (= (tree_ap$d (tree_pure$e ?v0) (tree_pure$b ?v1)) (tree_pure$a (fun_app$k ?v0 ?v1)))) :named a23))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (= (tree_ap$e (tree_pure$f ?v0) (tree_pure$a ?v1)) (tree_pure$b (fun_app$a ?v0 ?v1)))) :named a24))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun$)) (= (tree_ap$f (tree_pure$g ?v0) (tree_pure$ ?v1)) (tree_pure$a (fun_app$e ?v0 ?v1)))) :named a25))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (= (tree_ap$g (tree_pure$h ?v0) (tree_pure$a ?v1)) (tree_pure$ (fun_app$f ?v0 ?v1)))) :named a26))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (= (tree_ap$h (tree_pure$i ?v0) (tree_pure$a ?v1)) (tree_pure$a (fun_app$n ?v0 ?v1)))) :named a27))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A$)) (= (tree_ap$i (tree_pure$j ?v0) (tree_pure$b ?v1)) (tree_pure$c (fun_app$o ?v0 ?v1)))) :named a28))
(assert (! (forall ((?v0 A_a_fun$)) (= (tree_pure$k (uua$ ?v0)) (tree_ap$j tree_K$ (tree_pure$ ?v0)))) :named a29))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (= (tree_pure$g (uub$ ?v0)) (tree_ap$k tree_K$a (tree_pure$a ?v0)))) :named a30))
(assert (! (forall ((?v0 A$)) (= (tree_pure$c (uuc$ ?v0)) (tree_ap$i tree_K$b (tree_pure$b ?v0)))) :named a31))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (= (tree_pure$e (uud$ ?v0)) (tree_ap$l tree_K$c (tree_pure$a ?v0)))) :named a32))
(assert (! (forall ((?v0 A_a_fun$)) (= (tree_pure$d (uue$ ?v0)) (tree_ap$m tree_K$d (tree_pure$ ?v0)))) :named a33))
(assert (! (forall ((?v0 A_a_fun$)) (= (tree_pure$a (uuf$ ?v0)) (tree_ap$f tree_K$e (tree_pure$ ?v0)))) :named a34))
(assert (! (forall ((?v0 A$)) (= (tree_pure$ (uug$ ?v0)) (tree_ap$c tree_K$f (tree_pure$b ?v0)))) :named a35))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (= (map_tree$ ?v0 (tree_pure$ ?v1)) (tree_pure$ (fun_app$g ?v0 ?v1)))) :named a36))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (map_tree$a ?v0 (tree_pure$b ?v1)) (tree_pure$b (fun_app$m ?v0 ?v1)))) :named a37))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$)) (= (map_tree$b ?v0 (tree_pure$ ?v1)) (tree_pure$b (fun_app$i ?v0 ?v1)))) :named a38))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (= (map_tree$c ?v0 (tree_pure$b ?v1)) (tree_pure$ (fun_app$l ?v0 ?v1)))) :named a39))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun$) (?v1 A$)) (= (map_tree$d ?v0 (tree_pure$b ?v1)) (tree_pure$a (fun_app$k ?v0 ?v1)))) :named a40))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (= (map_tree$e ?v0 (tree_pure$a ?v1)) (tree_pure$b (fun_app$a ?v0 ?v1)))) :named a41))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun$)) (= (map_tree$f ?v0 (tree_pure$ ?v1)) (tree_pure$a (fun_app$e ?v0 ?v1)))) :named a42))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (= (map_tree$g ?v0 (tree_pure$a ?v1)) (tree_pure$ (fun_app$f ?v0 ?v1)))) :named a43))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (= (map_tree$h ?v0 (tree_pure$a ?v1)) (tree_pure$a (fun_app$n ?v0 ?v1)))) :named a44))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A$)) (= (map_tree$i ?v0 (tree_pure$b ?v1)) (tree_pure$c (fun_app$o ?v0 ?v1)))) :named a45))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) (?v1 A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)) (=> (forall ((?v2 A_a_fun$)) (= (tree_ap$f ?v0 (tree_pure$ ?v2)) (tree_ap$f ?v1 (tree_pure$ ?v2)))) (= ?v0 ?v1))) :named a46))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$) (?v1 A_a_fun_a_fun_tree$)) (=> (forall ((?v2 A_a_fun$)) (= (tree_ap$b ?v0 (tree_pure$ ?v2)) (tree_ap$b ?v1 (tree_pure$ ?v2)))) (= ?v0 ?v1))) :named a47))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun_tree$) (?v1 A_a_a_fun_a_a_fun_fun_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$d ?v0 (tree_pure$b ?v2)) (tree_ap$d ?v1 (tree_pure$b ?v2)))) (= ?v0 ?v1))) :named a48))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun_tree$) (?v1 A_a_fun_a_a_fun_fun_a_fun_tree$)) (=> (forall ((?v2 A_a_fun_a_a_fun_fun$)) (= (tree_ap$e ?v0 (tree_pure$a ?v2)) (tree_ap$e ?v1 (tree_pure$a ?v2)))) (= ?v0 ?v1))) :named a49))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun_tree$) (?v1 A_a_a_fun_fun_a_a_fun_fun_tree$)) (=> (forall ((?v2 A_a_a_fun_fun$)) (= (tree_ap$n ?v0 (tree_pure$d ?v2)) (tree_ap$n ?v1 (tree_pure$d ?v2)))) (= ?v0 ?v1))) :named a50))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (=> (forall ((?v2 A_a_fun$)) (= (tree_ap$a ?v0 (tree_pure$ ?v2)) (tree_ap$a ?v1 (tree_pure$ ?v2)))) (= ?v0 ?v1))) :named a51))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$ ?v0 (tree_pure$b ?v2)) (tree_ap$ ?v1 (tree_pure$b ?v2)))) (= ?v0 ?v1))) :named a52))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_a_a_fun_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$c ?v0 (tree_pure$b ?v2)) (tree_ap$c ?v1 (tree_pure$b ?v2)))) (= ?v0 ?v1))) :named a53))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$)) (= (root$a (tree_pure$k ?v0)) ?v0)) :named a54))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$)) (= (root$b (tree_pure$g ?v0)) ?v0)) :named a55))
(assert (! (forall ((?v0 A_a_fun_a_fun$)) (= (root$c (tree_pure$c ?v0)) ?v0)) :named a56))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun$)) (= (root$d (tree_pure$e ?v0)) ?v0)) :named a57))
(assert (! (forall ((?v0 A_a_a_fun_fun$)) (= (root$e (tree_pure$d ?v0)) ?v0)) :named a58))
(assert (! (forall ((?v0 A$)) (= (root$ (tree_pure$b ?v0)) ?v0)) :named a59))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (= (root$f (tree_pure$a ?v0)) ?v0)) :named a60))
(assert (! (forall ((?v0 A_a_fun$)) (= (root$g (tree_pure$ ?v0)) ?v0)) :named a61))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$)) (= (left$a (tree_pure$k ?v0)) (tree_pure$k ?v0))) :named a62))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$)) (= (left$b (tree_pure$g ?v0)) (tree_pure$g ?v0))) :named a63))
(assert (! (forall ((?v0 A_a_fun_a_fun$)) (= (left$c (tree_pure$c ?v0)) (tree_pure$c ?v0))) :named a64))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun$)) (= (left$d (tree_pure$e ?v0)) (tree_pure$e ?v0))) :named a65))
(assert (! (forall ((?v0 A_a_a_fun_fun$)) (= (left$e (tree_pure$d ?v0)) (tree_pure$d ?v0))) :named a66))
(assert (! (forall ((?v0 A$)) (= (left$ (tree_pure$b ?v0)) (tree_pure$b ?v0))) :named a67))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (= (left$f (tree_pure$a ?v0)) (tree_pure$a ?v0))) :named a68))
(assert (! (forall ((?v0 A_a_fun$)) (= (left$g (tree_pure$ ?v0)) (tree_pure$ ?v0))) :named a69))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$)) (= (right$a (tree_pure$k ?v0)) (tree_pure$k ?v0))) :named a70))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$)) (= (right$b (tree_pure$g ?v0)) (tree_pure$g ?v0))) :named a71))
(assert (! (forall ((?v0 A_a_fun_a_fun$)) (= (right$c (tree_pure$c ?v0)) (tree_pure$c ?v0))) :named a72))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun$)) (= (right$d (tree_pure$e ?v0)) (tree_pure$e ?v0))) :named a73))
(assert (! (forall ((?v0 A_a_a_fun_fun$)) (= (right$e (tree_pure$d ?v0)) (tree_pure$d ?v0))) :named a74))
(assert (! (forall ((?v0 A$)) (= (right$ (tree_pure$b ?v0)) (tree_pure$b ?v0))) :named a75))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (= (right$f (tree_pure$a ?v0)) (tree_pure$a ?v0))) :named a76))
(assert (! (forall ((?v0 A_a_fun$)) (= (right$g (tree_pure$ ?v0)) (tree_pure$ ?v0))) :named a77))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$)) (! (= (tree_pure$k ?v0) (node$k ?v0 (tree_pure$k ?v0) (tree_pure$k ?v0))) :pattern ((tree_pure$k ?v0)))) :named a78))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$)) (! (= (tree_pure$g ?v0) (node$g ?v0 (tree_pure$g ?v0) (tree_pure$g ?v0))) :pattern ((tree_pure$g ?v0)))) :named a79))
(assert (! (forall ((?v0 A_a_fun_a_fun$)) (! (= (tree_pure$c ?v0) (node$c ?v0 (tree_pure$c ?v0) (tree_pure$c ?v0))) :pattern ((tree_pure$c ?v0)))) :named a80))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun$)) (! (= (tree_pure$e ?v0) (node$e ?v0 (tree_pure$e ?v0) (tree_pure$e ?v0))) :pattern ((tree_pure$e ?v0)))) :named a81))
(assert (! (forall ((?v0 A_a_a_fun_fun$)) (! (= (tree_pure$d ?v0) (node$d ?v0 (tree_pure$d ?v0) (tree_pure$d ?v0))) :pattern ((tree_pure$d ?v0)))) :named a82))
(assert (! (forall ((?v0 A$)) (! (= (tree_pure$b ?v0) (node$b ?v0 (tree_pure$b ?v0) (tree_pure$b ?v0))) :pattern ((tree_pure$b ?v0)))) :named a83))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (! (= (tree_pure$a ?v0) (node$a ?v0 (tree_pure$a ?v0) (tree_pure$a ?v0))) :pattern ((tree_pure$a ?v0)))) :named a84))
(assert (! (forall ((?v0 A_a_fun$)) (! (= (tree_pure$ ?v0) (node$ ?v0 (tree_pure$ ?v0) (tree_pure$ ?v0))) :pattern ((tree_pure$ ?v0)))) :named a85))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) (?v1 A_a_fun$)) (= (tree_ap$f ?v0 (tree_pure$ ?v1)) (tree_ap$o (tree_pure$l (uuh$ ?v1)) ?v0))) :named a86))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$) (?v1 A_a_fun$)) (= (tree_ap$b ?v0 (tree_pure$ ?v1)) (tree_ap$p (tree_pure$m (uui$ ?v1)) ?v0))) :named a87))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun_tree$) (?v1 A$)) (= (tree_ap$d ?v0 (tree_pure$b ?v1)) (tree_ap$q (tree_pure$n (uuj$ ?v1)) ?v0))) :named a88))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun_tree$) (?v1 A_a_fun_a_a_fun_fun$)) (= (tree_ap$e ?v0 (tree_pure$a ?v1)) (tree_ap$r (tree_pure$o (uuk$ ?v1)) ?v0))) :named a89))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun_tree$) (?v1 A_a_a_fun_fun$)) (= (tree_ap$n ?v0 (tree_pure$d ?v1)) (tree_ap$s (tree_pure$p (uul$ ?v1)) ?v0))) :named a90))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$) (?v1 A_a_fun$)) (= (tree_ap$a ?v0 (tree_pure$ ?v1)) (tree_ap$g (tree_pure$h (uum$ ?v1)) ?v0))) :named a91))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A$)) (= (tree_ap$ ?v0 (tree_pure$b ?v1)) (tree_ap$b (tree_pure$c (uun$ ?v1)) ?v0))) :named a92))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A$)) (= (tree_ap$c ?v0 (tree_pure$b ?v1)) (tree_ap$n (tree_pure$k (uuo$ ?v1)) ?v0))) :named a93))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_a_a_fun_fun_tree$) (?v3 A_a_fun_a_a_fun_fun_tree$)) (= (tree_ap$g (tree_pure$h ?v0) (node$a ?v1 ?v2 ?v3)) (node$ (fun_app$f ?v0 ?v1) (tree_ap$g (tree_pure$h ?v0) ?v2) (tree_ap$g (tree_pure$h ?v0) ?v3)))) :named a94))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_a_a_fun_fun_tree$) (?v3 A_a_fun_a_a_fun_fun_tree$)) (= (tree_ap$e (tree_pure$f ?v0) (node$a ?v1 ?v2 ?v3)) (node$b (fun_app$a ?v0 ?v1) (tree_ap$e (tree_pure$f ?v0) ?v2) (tree_ap$e (tree_pure$f ?v0) ?v3)))) :named a95))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_a_a_fun_fun_tree$) (?v3 A_a_fun_a_a_fun_fun_tree$)) (= (tree_ap$h (tree_pure$i ?v0) (node$a ?v1 ?v2 ?v3)) (node$a (fun_app$n ?v0 ?v1) (tree_ap$h (tree_pure$i ?v0) ?v2) (tree_ap$h (tree_pure$i ?v0) ?v3)))) :named a96))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$) (?v1 A_a_a_fun_fun$) (?v2 A_a_a_fun_fun_tree$) (?v3 A_a_a_fun_fun_tree$)) (= (tree_ap$n (tree_pure$k ?v0) (node$d ?v1 ?v2 ?v3)) (node$ (fun_app$c ?v0 ?v1) (tree_ap$n (tree_pure$k ?v0) ?v2) (tree_ap$n (tree_pure$k ?v0) ?v3)))) :named a97))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (= (tree_ap$f (tree_pure$g ?v0) (node$ ?v1 ?v2 ?v3)) (node$a (fun_app$e ?v0 ?v1) (tree_ap$f (tree_pure$g ?v0) ?v2) (tree_ap$f (tree_pure$g ?v0) ?v3)))) :named a98))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (tree_ap$d (tree_pure$e ?v0) (node$b ?v1 ?v2 ?v3)) (node$a (fun_app$k ?v0 ?v1) (tree_ap$d (tree_pure$e ?v0) ?v2) (tree_ap$d (tree_pure$e ?v0) ?v3)))) :named a99))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (= (tree_ap$b (tree_pure$c ?v0) (node$ ?v1 ?v2 ?v3)) (node$b (fun_app$i ?v0 ?v1) (tree_ap$b (tree_pure$c ?v0) ?v2) (tree_ap$b (tree_pure$c ?v0) ?v3)))) :named a100))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (tree_ap$c (tree_pure$d ?v0) (node$b ?v1 ?v2 ?v3)) (node$ (fun_app$l ?v0 ?v1) (tree_ap$c (tree_pure$d ?v0) ?v2) (tree_ap$c (tree_pure$d ?v0) ?v3)))) :named a101))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (= (tree_ap$a (tree_pure$a ?v0) (node$ ?v1 ?v2 ?v3)) (node$ (fun_app$g ?v0 ?v1) (tree_ap$a (tree_pure$a ?v0) ?v2) (tree_ap$a (tree_pure$a ?v0) ?v3)))) :named a102))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (tree_ap$ (tree_pure$ ?v0) (node$b ?v1 ?v2 ?v3)) (node$b (fun_app$m ?v0 ?v1) (tree_ap$ (tree_pure$ ?v0) ?v2) (tree_ap$ (tree_pure$ ?v0) ?v3)))) :named a103))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$) (?v2 A_a_fun_a_a_fun_fun_tree$) (?v3 A_a_fun_a_a_fun_fun$) (?v4 A_a_fun_a_a_fun_fun_tree$) (?v5 A_a_fun_a_a_fun_fun_tree$)) (= (= (node$a ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a104))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$) (?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a105))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$) (?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (= (= (node$b ?v0 ?v1 ?v2) (node$b ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a106))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (left$g (map_tree$g ?v0 ?v1)) (map_tree$g ?v0 (left$f ?v1)))) :named a107))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (left$f (map_tree$h ?v0 ?v1)) (map_tree$h ?v0 (left$f ?v1)))) :named a108))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (left$ (map_tree$e ?v0 ?v1)) (map_tree$e ?v0 (left$f ?v1)))) :named a109))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_tree$)) (= (left$f (map_tree$f ?v0 ?v1)) (map_tree$f ?v0 (left$g ?v1)))) :named a110))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (left$ (map_tree$b ?v0 ?v1)) (map_tree$b ?v0 (left$g ?v1)))) :named a111))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun$) (?v1 A_tree$)) (= (left$f (map_tree$d ?v0 ?v1)) (map_tree$d ?v0 (left$ ?v1)))) :named a112))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (left$g (map_tree$c ?v0 ?v1)) (map_tree$c ?v0 (left$ ?v1)))) :named a113))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (left$ (map_tree$a ?v0 ?v1)) (map_tree$a ?v0 (left$ ?v1)))) :named a114))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (left$g (map_tree$ ?v0 ?v1)) (map_tree$ ?v0 (left$g ?v1)))) :named a115))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (left$g (map_tree$g ?v0 ?v1)) (map_tree$g ?v0 (left$f ?v1)))) :named a116))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (left$f (map_tree$h ?v0 ?v1)) (map_tree$h ?v0 (left$f ?v1)))) :named a117))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (left$ (map_tree$e ?v0 ?v1)) (map_tree$e ?v0 (left$f ?v1)))) :named a118))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_tree$)) (= (left$f (map_tree$f ?v0 ?v1)) (map_tree$f ?v0 (left$g ?v1)))) :named a119))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (left$ (map_tree$b ?v0 ?v1)) (map_tree$b ?v0 (left$g ?v1)))) :named a120))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun$) (?v1 A_tree$)) (= (left$f (map_tree$d ?v0 ?v1)) (map_tree$d ?v0 (left$ ?v1)))) :named a121))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (left$g (map_tree$c ?v0 ?v1)) (map_tree$c ?v0 (left$ ?v1)))) :named a122))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (left$ (map_tree$a ?v0 ?v1)) (map_tree$a ?v0 (left$ ?v1)))) :named a123))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (left$g (map_tree$ ?v0 ?v1)) (map_tree$ ?v0 (left$g ?v1)))) :named a124))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (right$f (map_tree$h ?v0 ?v1)) (map_tree$h ?v0 (right$f ?v1)))) :named a125))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (right$ (map_tree$e ?v0 ?v1)) (map_tree$e ?v0 (right$f ?v1)))) :named a126))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_tree$)) (= (right$f (map_tree$f ?v0 ?v1)) (map_tree$f ?v0 (right$g ?v1)))) :named a127))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (right$ (map_tree$b ?v0 ?v1)) (map_tree$b ?v0 (right$g ?v1)))) :named a128))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun$) (?v1 A_tree$)) (= (right$f (map_tree$d ?v0 ?v1)) (map_tree$d ?v0 (right$ ?v1)))) :named a129))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (right$g (map_tree$c ?v0 ?v1)) (map_tree$c ?v0 (right$ ?v1)))) :named a130))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (right$ (map_tree$a ?v0 ?v1)) (map_tree$a ?v0 (right$ ?v1)))) :named a131))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (right$g (map_tree$ ?v0 ?v1)) (map_tree$ ?v0 (right$g ?v1)))) :named a132))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (right$g (map_tree$ ?v0 ?v1)) (map_tree$ ?v0 (right$g ?v1)))) :named a133))
(check-sat)
;(get-unsat-core)
