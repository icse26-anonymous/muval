; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 666
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Dir_nat_nat_prod_nat_nat_prod_prod_fun$ 0)
(declare-datatypes () ((Nat_nat_prod$ (pair$ (fst$ Nat$) (snd$ Nat$)))
  (Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$) (snd$a Nat_nat_prod$)))
  (Dir$ (l$) (r$))))
(declare-fun d$ () Dir$)
(declare-fun m$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun m$a () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun m$b () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun det$ (Nat_nat_prod_nat_nat_prod_prod$) Nat$)
(declare-fun one$ () Nat$)
(declare-fun imat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun size$ (Dir$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun lLmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun uRmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun fun_app$ (Dir_nat_nat_prod_nat_nat_prod_prod_fun$ Dir$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun case_dir$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$) Dir_nat_nat_prod_nat_nat_prod_prod_fun$)
(declare-fun size_dir$ (Dir$) Nat$)
(assert (! (not false) :named a0))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$)) (! (= (fun_app$ (case_dir$ ?v0 ?v1) l$) ?v0) :pattern ((case_dir$ ?v0 ?v1)))) :named a1))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$)) (! (= (fun_app$ (case_dir$ ?v0 ?v1) r$) ?v1) :pattern ((case_dir$ ?v0 ?v1)))) :named a2))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ (mulmat$ ?v0 ?v1) ?v2) (mulmat$ ?v0 (mulmat$ ?v1 ?v2)))) :named a3))
(assert (! (forall ((?v0 Dir$)) (=> (and (=> (= ?v0 l$) false) (=> (= ?v0 r$) false)) false)) :named a4))
(assert (! (not (= l$ r$)) :named a5))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ ?v0 imat$) ?v0)) :named a6))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ imat$ ?v0) ?v0)) :named a7))
(assert (! (= (mulmat$ (fun_app$ (case_dir$ (mulmat$ m$ lLmat$) (mulmat$ m$ uRmat$)) d$) m$a) m$b) :named a8))
(assert (! (= (size_dir$ l$) zero$) :named a9))
(assert (! (= (size_dir$ r$) zero$) :named a10))
(assert (! (= (size$ l$) zero$) :named a11))
(assert (! (= (size$ r$) zero$) :named a12))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (= (det$ ?v0) one$) (= (det$ (mulmat$ ?v0 lLmat$)) one$))) :named a13))
(check-sat)
;(get-unsat-core)
