; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 588
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Nat_nat_prod_bool_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun$ 0)
(declare-datatypes () ((Nat_nat_prod$ (pair$ (fst$ Nat$) (snd$ Nat$)))))
(declare-codatatypes () ((Nat_nat_prod_tree$ (node$ (root$ Nat_nat_prod$) (left$ Nat_nat_prod_tree$) (right$ Nat_nat_prod_tree$)))))
(declare-datatypes () ((Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$) (snd$a Nat_nat_prod$)))))
(declare-fun det$ (Nat_nat_prod_nat_nat_prod_prod$) Nat$)
(declare-fun one$ () Nat$)
(declare-fun lLmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun uRmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun mulvec$ (Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_fun$)
(declare-fun fun_app$ (Nat_nat_prod_bool_fun$ Nat_nat_prod$) Bool)
(declare-fun stern_brocot$ () Nat_nat_prod_tree$)
(declare-fun tree_recurse$ (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod$) Nat_nat_prod_tree$)
(declare-fun stern_brocot_iterate$ () Nat_nat_prod_tree$)
(assert (! (not (= (tree_recurse$ (mulvec$ lLmat$) (mulvec$ uRmat$) (pair$ one$ one$)) stern_brocot$)) :named a0))
(assert (! (= stern_brocot_iterate$ (tree_recurse$ (mulvec$ lLmat$) (mulvec$ uRmat$) (pair$ one$ one$))) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a3))
(assert (! (= (det$ lLmat$) one$) :named a4))
(assert (! (= (det$ uRmat$) one$) :named a5))
(assert (! (= (root$ stern_brocot$) (pair$ one$ one$)) :named a6))
(assert (! (forall ((?v0 Nat_nat_prod$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a7))
(assert (! (= one$ one$) :named a8))
(assert (! (forall ((?v0 Nat$)) (= (= one$ ?v0) (= ?v0 one$))) :named a9))
(assert (! (forall ((?v0 Nat_nat_prod$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a10))
(assert (! (forall ((?v0 Nat_nat_prod$)) (exists ((?v1 Nat$) (?v2 Nat$)) (= ?v0 (pair$ ?v1 ?v2)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a12))
(assert (! (forall ((?v0 Nat_nat_prod$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a13))
(assert (! (forall ((?v0 Nat_nat_prod_bool_fun$) (?v1 Nat_nat_prod$)) (=> (forall ((?v2 Nat$) (?v3 Nat$)) (fun_app$ ?v0 (pair$ ?v2 ?v3))) (fun_app$ ?v0 ?v1))) :named a14))
(check-sat)
;(get-unsat-core)
