; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 467
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_tree_set$ 0)
(declare-sort A_a_fun_set$ 0)
(declare-sort A_a_tree_fun$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort A_tree_a_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun$ 0)
(declare-sort A_a_stream_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort A_a_tree_fun_set$ 0)
(declare-sort A_a_a_fun_fun_set$ 0)
(declare-sort A_a_fun_a_fun_set$ 0)
(declare-sort A_tree_a_tree_fun$ 0)
(declare-sort A_tree_stream_set$ 0)
(declare-sort A_a_a_tree_fun_fun$ 0)
(declare-sort A_a_fun_a_tree_fun$ 0)
(declare-sort A_a_fun_stream_set$ 0)
(declare-sort A_tree_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_stream_tree_fun$ 0)
(declare-sort A_stream_a_tree_fun$ 0)
(declare-sort A_stream_stream_set$ 0)
(declare-sort A_stream_tree_a_fun$ 0)
(declare-sort A_tree_a_stream_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_a_tree_fun_stream_set$ 0)
(declare-sort A_a_a_fun_fun_stream_set$ 0)
(declare-sort A_a_fun_a_fun_stream_set$ 0)
(declare-sort A_tree_stream_stream_set$ 0)
(declare-sort A_a_fun_stream_stream_set$ 0)
(declare-sort A_stream_stream_stream_set$ 0)
(declare-sort A_tree_tree_a_tree_tree_fun$ 0)
(declare-sort A_a_fun_tree_a_a_fun_tree_fun$ 0)
(declare-sort A_a_tree_fun_a_a_tree_fun_fun$ 0)
(declare-sort A_tree_a_fun_a_tree_a_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_a_a_fun_a_fun_fun$ 0)
(declare-sort A_stream_tree_a_stream_tree_fun$ 0)
(declare-sort A_tree_stream_a_tree_stream_fun$ 0)
(declare-sort A_a_fun_stream_a_a_fun_stream_fun$ 0)
(declare-sort A_stream_stream_a_stream_stream_fun$ 0)
(declare-sort A_a_tree_fun_tree_a_a_tree_fun_tree_fun$ 0)
(declare-sort A_tree_a_tree_fun_a_tree_a_tree_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_tree_a_a_a_fun_fun_tree_fun$ 0)
(declare-sort A_a_a_tree_fun_fun_a_a_a_tree_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_tree_a_a_fun_a_fun_tree_fun$ 0)
(declare-sort A_a_fun_a_tree_fun_a_a_fun_a_tree_fun_fun$ 0)
(declare-sort A_tree_a_a_fun_fun_a_tree_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_tree_fun_tree_a_a_fun_a_tree_fun_tree_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_tree_a_a_fun_a_a_fun_fun_tree_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (A_tree$ (node$ (root$ A$) (left$ A_tree$) (right$ A_tree$)))
  (A_a_fun_a_tree_fun_stream$ (sCons$a (select$ A_a_fun_a_tree_fun$) (selecta$ A_a_fun_a_tree_fun_stream$)))
  (A_a_fun_a_a_fun_fun_stream$ (sCons$b (selectb$ A_a_fun_a_a_fun_fun$) (selectc$ A_a_fun_a_a_fun_fun_stream$)))
  (A_a_fun_a_fun_stream$ (sCons$c (selectd$ A_a_fun_a_fun$) (selecte$ A_a_fun_a_fun_stream$)))
  (A_a_tree_fun_stream$ (sCons$d (selectf$ A_a_tree_fun$) (selectg$ A_a_tree_fun_stream$)))
  (A_a_a_fun_fun_stream$ (sCons$e (selecth$ A_a_a_fun_fun$) (selecti$ A_a_a_fun_fun_stream$)))
  (A_tree_stream$ (sCons$f (shd$a A_tree$) (stl$a A_tree_stream$)))
  (A_a_fun_stream$ (sCons$g (selectj$ A_a_fun$) (selectk$ A_a_fun_stream$)))
  (A_tree_a_fun_stream$ (sCons$h (selectl$ A_tree_a_fun$) (selectm$ A_tree_a_fun_stream$)))
  (A_tree_a_tree_fun_stream$ (sCons$i (selectn$ A_tree_a_tree_fun$) (selecto$ A_tree_a_tree_fun_stream$)))
  (A_tree_a_a_fun_fun_stream$ (sCons$j (selectp$ A_tree_a_a_fun_fun$) (selectq$ A_tree_a_a_fun_fun_stream$)))
  (A_a_a_tree_fun_fun_stream$ (sCons$k (selectr$ A_a_a_tree_fun_fun$) (selects$ A_a_a_tree_fun_fun_stream$)))
  (A_stream_stream$ (sCons$l (shd$b A_stream$) (stl$b A_stream_stream$)))
  (A_stream_stream_stream$ (sCons$m (shd$c A_stream_stream$) (stl$c A_stream_stream_stream$)))
  (A_tree_stream_stream$ (sCons$n (shd$d A_tree_stream$) (stl$d A_tree_stream_stream$)))
  (A_a_fun_stream_stream$ (sCons$o (shd$e A_a_fun_stream$) (stl$e A_a_fun_stream_stream$)))
  (A_stream_tree$ (node$a (root$a A_stream$) (left$a A_stream_tree$) (right$a A_stream_tree$)))
  (A_stream_tree_tree$ (node$b (root$b A_stream_tree$) (left$b A_stream_tree_tree$) (right$b A_stream_tree_tree$)))
  (A_stream_tree_tree_tree$ (node$c (root$c A_stream_tree_tree$) (left$c A_stream_tree_tree_tree$) (right$c A_stream_tree_tree_tree$)))
  (A_tree_tree$ (node$d (root$d A_tree$) (left$d A_tree_tree$) (right$d A_tree_tree$)))
  (A_tree_tree_tree$ (node$e (root$e A_tree_tree$) (left$e A_tree_tree_tree$) (right$e A_tree_tree_tree$)))
  (A_a_fun_a_tree_fun_tree$ (node$f (selectt$ A_a_fun_a_tree_fun$) (selectu$ A_a_fun_a_tree_fun_tree$) (selectv$ A_a_fun_a_tree_fun_tree$)))
  (A_a_fun_a_a_fun_fun_tree$ (node$g (selectw$ A_a_fun_a_a_fun_fun$) (selectx$ A_a_fun_a_a_fun_fun_tree$) (selecty$ A_a_fun_a_a_fun_fun_tree$)))
  (A_a_fun_a_fun_tree$ (node$h (selectz$ A_a_fun_a_fun$) (selecua$ A_a_fun_a_fun_tree$) (selecub$ A_a_fun_a_fun_tree$)))
  (A_a_tree_fun_tree$ (node$i (selecuc$ A_a_tree_fun$) (selecud$ A_a_tree_fun_tree$) (selecue$ A_a_tree_fun_tree$)))
  (A_a_a_fun_fun_tree$ (node$j (selecuf$ A_a_a_fun_fun$) (selecug$ A_a_a_fun_fun_tree$) (selecuh$ A_a_a_fun_fun_tree$)))
  (A_a_fun_tree$ (node$k (selecui$ A_a_fun$) (selecuj$ A_a_fun_tree$) (selecuk$ A_a_fun_tree$)))))
(declare-fun n$ () Nat$)
(declare-fun id$ () A_a_fun$)
(declare-fun id$a () A_a_fun_a_tree_fun_a_a_fun_a_tree_fun_fun$)
(declare-fun id$b () A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun id$c () A_a_fun_a_fun_a_a_fun_a_fun_fun$)
(declare-fun id$d () A_a_tree_fun_a_a_tree_fun_fun$)
(declare-fun id$e () A_a_a_fun_fun_a_a_a_fun_fun_fun$)
(declare-fun id$f () A_tree_a_tree_fun$)
(declare-fun id$g () A_a_fun_a_a_fun_fun$)
(declare-fun id$h () A_tree_a_fun_a_tree_a_fun_fun$)
(declare-fun id$i () A_tree_a_tree_fun_a_tree_a_tree_fun_fun$)
(declare-fun id$j () A_tree_a_a_fun_fun_a_tree_a_a_fun_fun_fun$)
(declare-fun id$k () A_a_a_tree_fun_fun_a_a_a_tree_fun_fun_fun$)
(declare-fun id$l () A_stream_a_stream_fun$)
(declare-fun id$m () A_stream_stream_a_stream_stream_fun$)
(declare-fun id$n () A_tree_stream_a_tree_stream_fun$)
(declare-fun id$o () A_a_fun_stream_a_a_fun_stream_fun$)
(declare-fun id$p () A_a_fun_a_tree_fun_tree_a_a_fun_a_tree_fun_tree_fun$)
(declare-fun id$q () A_a_fun_a_a_fun_fun_tree_a_a_fun_a_a_fun_fun_tree_fun$)
(declare-fun id$r () A_a_fun_a_fun_tree_a_a_fun_a_fun_tree_fun$)
(declare-fun id$s () A_a_tree_fun_tree_a_a_tree_fun_tree_fun$)
(declare-fun id$t () A_a_a_fun_fun_tree_a_a_a_fun_fun_tree_fun$)
(declare-fun id$u () A_stream_tree_a_stream_tree_fun$)
(declare-fun id$v () A_a_fun_tree_a_a_fun_tree_fun$)
(declare-fun id$w () A_tree_tree_a_tree_tree_fun$)
(declare-fun smap$ (A_a_fun$) A_stream_a_stream_fun$)
(declare-fun smap$a (A_tree_a_fun$ A_tree_stream$) A_stream$)
(declare-fun smap$b (A_a_tree_fun$ A_stream$) A_tree_stream$)
(declare-fun smap$c (A_tree_a_tree_fun$ A_tree_stream$) A_tree_stream$)
(declare-fun smap$d (A_a_a_fun_fun$ A_stream$) A_a_fun_stream$)
(declare-fun smap$e (A_a_fun_a_fun$ A_a_fun_stream$) A_stream$)
(declare-fun smap$f (A_tree_a_a_fun_fun$ A_tree_stream$) A_a_fun_stream$)
(declare-fun smap$g (A_a_fun_a_tree_fun$ A_a_fun_stream$) A_tree_stream$)
(declare-fun smap$h (A_a_fun_a_a_fun_fun$ A_a_fun_stream$) A_a_fun_stream$)
(declare-fun smap$i (A_a_a_tree_fun_fun$ A_stream$) A_a_tree_fun_stream$)
(declare-fun smap$j (A_a_fun_a_tree_fun_a_a_fun_a_tree_fun_fun$ A_a_fun_a_tree_fun_stream$) A_a_fun_a_tree_fun_stream$)
(declare-fun smap$k (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun_stream$) A_a_fun_a_a_fun_fun_stream$)
(declare-fun smap$l (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun_stream$) A_a_fun_a_fun_stream$)
(declare-fun smap$m (A_a_tree_fun_a_a_tree_fun_fun$ A_a_tree_fun_stream$) A_a_tree_fun_stream$)
(declare-fun smap$n (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun_stream$) A_a_a_fun_fun_stream$)
(declare-fun st_ap$ (A_a_fun_stream$) A_stream_a_stream_fun$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun of_nat$ (Nat$) A_stream$)
(declare-fun st_ap$a (A_tree_a_fun_stream$ A_tree_stream$) A_stream$)
(declare-fun st_ap$b (A_a_tree_fun_stream$ A_stream$) A_tree_stream$)
(declare-fun st_ap$c (A_tree_a_tree_fun_stream$ A_tree_stream$) A_tree_stream$)
(declare-fun st_ap$d (A_a_a_fun_fun_stream$ A_stream$) A_a_fun_stream$)
(declare-fun st_ap$e (A_a_fun_a_fun_stream$ A_a_fun_stream$) A_stream$)
(declare-fun st_ap$f (A_tree_a_a_fun_fun_stream$ A_tree_stream$) A_a_fun_stream$)
(declare-fun st_ap$g (A_a_fun_a_tree_fun_stream$ A_a_fun_stream$) A_tree_stream$)
(declare-fun st_ap$h (A_a_fun_a_a_fun_fun_stream$ A_a_fun_stream$) A_a_fun_stream$)
(declare-fun st_ap$i (A_a_a_tree_fun_fun_stream$ A_stream$) A_a_tree_fun_stream$)
(declare-fun fun_app$ (A_a_stream_fun$ A$) A_stream$)
(declare-fun member$a (A_stream$ A_stream_set$) Bool)
(declare-fun member$b (A_tree$ A_tree_set$) Bool)
(declare-fun member$c (A_tree_stream$ A_tree_stream_set$) Bool)
(declare-fun member$d (A_stream_stream$ A_stream_stream_set$) Bool)
(declare-fun member$e (A_a_fun$ A_a_fun_set$) Bool)
(declare-fun member$f (A_a_fun_stream$ A_a_fun_stream_set$) Bool)
(declare-fun member$g (A_stream_stream_stream$ A_stream_stream_stream_set$) Bool)
(declare-fun member$h (A_tree_stream_stream$ A_tree_stream_stream_set$) Bool)
(declare-fun member$i (A_a_fun_stream_stream$ A_a_fun_stream_stream_set$) Bool)
(declare-fun member$j (A_a_tree_fun$ A_a_tree_fun_set$) Bool)
(declare-fun member$k (A_a_tree_fun_stream$ A_a_tree_fun_stream_set$) Bool)
(declare-fun member$l (A_a_fun_a_fun$ A_a_fun_a_fun_set$) Bool)
(declare-fun member$m (A_a_fun_a_fun_stream$ A_a_fun_a_fun_stream_set$) Bool)
(declare-fun member$n (A_a_a_fun_fun$ A_a_a_fun_fun_set$) Bool)
(declare-fun member$o (A_a_a_fun_fun_stream$ A_a_a_fun_fun_stream_set$) Bool)
(declare-fun of_nat$a (Nat$) A$)
(declare-fun of_nat$b (Nat$) A_stream_tree_tree_tree$)
(declare-fun of_nat$c (Nat$) A_stream_tree_tree$)
(declare-fun of_nat$d (Nat$) A_tree_tree_tree$)
(declare-fun of_nat$e (Nat$) A_tree_tree$)
(declare-fun of_nat$f (Nat$) A_tree$)
(declare-fun of_nat$g (Nat$) A_stream_tree$)
(declare-fun streams$ (A_set$) A_stream_set$)
(declare-fun fun_app$a (A_a_fun_a_tree_fun_a_a_fun_a_tree_fun_fun$ A_a_fun_a_tree_fun$) A_a_fun_a_tree_fun$)
(declare-fun fun_app$b (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$c (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$) A_a_fun_a_fun$)
(declare-fun fun_app$d (A_a_tree_fun_a_a_tree_fun_fun$ A_a_tree_fun$) A_a_tree_fun$)
(declare-fun fun_app$e (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$) A_a_a_fun_fun$)
(declare-fun fun_app$f (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$g (A_tree_a_tree_fun$ A_tree$) A_tree$)
(declare-fun fun_app$h (A_a_fun$ A$) A$)
(declare-fun fun_app$i (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$j (A_tree_a_fun$ A_tree$) A$)
(declare-fun fun_app$k (A_a_tree_fun$ A$) A_tree$)
(declare-fun fun_app$l (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$m (A_a_fun_a_fun$ A_a_fun$) A$)
(declare-fun fun_app$n (A_tree_a_a_fun_fun$ A_tree$) A_a_fun$)
(declare-fun fun_app$o (A_a_fun_a_tree_fun$ A_a_fun$) A_tree$)
(declare-fun fun_app$p (A_a_a_tree_fun_fun$ A$) A_a_tree_fun$)
(declare-fun fun_app$q (A_a_fun_a_tree_fun_tree_a_a_fun_a_tree_fun_tree_fun$ A_a_fun_a_tree_fun_tree$) A_a_fun_a_tree_fun_tree$)
(declare-fun fun_app$r (A_a_fun_a_a_fun_fun_tree_a_a_fun_a_a_fun_fun_tree_fun$ A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun fun_app$s (A_a_fun_a_fun_tree_a_a_fun_a_fun_tree_fun$ A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun fun_app$t (A_a_tree_fun_tree_a_a_tree_fun_tree_fun$ A_a_tree_fun_tree$) A_a_tree_fun_tree$)
(declare-fun fun_app$u (A_a_a_fun_fun_tree_a_a_a_fun_fun_tree_fun$ A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun fun_app$v (A_stream_tree_a_stream_tree_fun$ A_stream_tree$) A_stream_tree$)
(declare-fun fun_app$w (A_a_fun_tree_a_a_fun_tree_fun$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun fun_app$x (A_tree_tree_a_tree_tree_fun$ A_tree_tree$) A_tree_tree$)
(declare-fun fun_app$y (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$z (A_a_stream_tree_fun$ A$) A_stream_tree$)
(declare-fun map_tree$ (A_a_fun_a_tree_fun_a_a_fun_a_tree_fun_fun$) A_a_fun_a_tree_fun_tree_a_a_fun_a_tree_fun_tree_fun$)
(declare-fun siterate$ (A_a_fun$) A_a_stream_fun$)
(declare-fun streams$a (A_tree_set$) A_tree_stream_set$)
(declare-fun streams$b (A_stream_set$) A_stream_stream_set$)
(declare-fun streams$c (A_a_fun_set$) A_a_fun_stream_set$)
(declare-fun streams$d (A_stream_stream_set$) A_stream_stream_stream_set$)
(declare-fun streams$e (A_tree_stream_set$) A_tree_stream_stream_set$)
(declare-fun streams$f (A_a_fun_stream_set$) A_a_fun_stream_stream_set$)
(declare-fun streams$g (A_a_tree_fun_set$) A_a_tree_fun_stream_set$)
(declare-fun streams$h (A_a_fun_a_fun_set$) A_a_fun_a_fun_stream_set$)
(declare-fun streams$i (A_a_a_fun_fun_set$) A_a_a_fun_fun_stream_set$)
(declare-fun fun_app$aa (A_stream_a_tree_fun$ A_stream$) A_tree$)
(declare-fun fun_app$ab (A_stream_tree_a_fun$ A_stream_tree$) A$)
(declare-fun fun_app$ac (A_tree_a_stream_fun$ A_tree$) A_stream$)
(declare-fun map_tree$a (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_fun_tree_a_a_fun_a_a_fun_fun_tree_fun$)
(declare-fun map_tree$b (A_a_fun_a_fun_a_a_fun_a_fun_fun$) A_a_fun_a_fun_tree_a_a_fun_a_fun_tree_fun$)
(declare-fun map_tree$c (A_a_tree_fun_a_a_tree_fun_fun$) A_a_tree_fun_tree_a_a_tree_fun_tree_fun$)
(declare-fun map_tree$d (A_a_a_fun_fun_a_a_a_fun_fun_fun$) A_a_a_fun_fun_tree_a_a_a_fun_fun_tree_fun$)
(declare-fun map_tree$e (A_stream_a_stream_fun$) A_stream_tree_a_stream_tree_fun$)
(declare-fun map_tree$f (A_a_fun_a_a_fun_fun$) A_a_fun_tree_a_a_fun_tree_fun$)
(declare-fun map_tree$g (A_tree_a_tree_fun$) A_tree_tree_a_tree_tree_fun$)
(declare-fun map_tree$h (A_a_fun$) A_tree_a_tree_fun$)
(declare-fun map_tree$i (A_a_stream_fun$ A_tree$) A_stream_tree$)
(declare-fun map_tree$j (A_stream_a_fun$ A_stream_tree$) A_tree$)
(declare-fun map_tree$k (A_a_tree_fun$ A_tree$) A_tree_tree$)
(declare-fun map_tree$l (A_tree_a_fun$ A_tree_tree$) A_tree$)
(declare-fun map_tree$m (A_a_stream_tree_fun$ A_tree$) A_stream_tree_tree$)
(declare-fun map_tree$n (A_stream_a_tree_fun$ A_stream_tree$) A_tree_tree$)
(declare-fun map_tree$o (A_stream_tree_a_fun$ A_stream_tree_tree$) A_tree$)
(declare-fun map_tree$p (A_tree_a_stream_fun$ A_tree_tree$) A_stream_tree$)
(declare-fun siterate$a (A_a_fun_a_tree_fun_a_a_fun_a_tree_fun_fun$ A_a_fun_a_tree_fun$) A_a_fun_a_tree_fun_stream$)
(declare-fun siterate$b (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_stream$)
(declare-fun siterate$c (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$) A_a_fun_a_fun_stream$)
(declare-fun siterate$d (A_a_tree_fun_a_a_tree_fun_fun$ A_a_tree_fun$) A_a_tree_fun_stream$)
(declare-fun siterate$e (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$) A_a_a_fun_fun_stream$)
(declare-fun siterate$f (A_tree_a_tree_fun$ A_tree$) A_tree_stream$)
(declare-fun siterate$g (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun_stream$)
(declare-fun siterate$h (A_tree_a_fun_a_tree_a_fun_fun$ A_tree_a_fun$) A_tree_a_fun_stream$)
(declare-fun siterate$i (A_tree_a_tree_fun_a_tree_a_tree_fun_fun$ A_tree_a_tree_fun$) A_tree_a_tree_fun_stream$)
(declare-fun siterate$j (A_tree_a_a_fun_fun_a_tree_a_a_fun_fun_fun$ A_tree_a_a_fun_fun$) A_tree_a_a_fun_fun_stream$)
(declare-fun siterate$k (A_a_a_tree_fun_fun_a_a_a_tree_fun_fun_fun$ A_a_a_tree_fun_fun$) A_a_a_tree_fun_fun_stream$)
(declare-fun siterate$l (A_stream_a_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun siterate$m (A_stream_stream_a_stream_stream_fun$ A_stream_stream$) A_stream_stream_stream$)
(declare-fun siterate$n (A_tree_stream_a_tree_stream_fun$ A_tree_stream$) A_tree_stream_stream$)
(declare-fun siterate$o (A_a_fun_stream_a_a_fun_stream_fun$ A_a_fun_stream$) A_a_fun_stream_stream$)
(declare-fun tree_pure$ (A_stream_tree_tree$) A_stream_tree_tree_tree$)
(declare-fun tree_pure$a (A_tree_tree$) A_tree_tree_tree$)
(declare-fun tree_pure$b (A_tree$) A_tree_tree$)
(declare-fun tree_pure$c (A_stream_tree$) A_stream_tree_tree$)
(declare-fun tree_pure$d (A_stream$) A_stream_tree$)
(declare-fun tree_pure$e (A$) A_tree$)
(assert (! (not (= (of_nat$ n$) (fun_app$ (siterate$ id$) (of_nat$a n$)))) :named a0))
(assert (! (forall ((?v0 A_a_fun_a_tree_fun$) (?v1 A_a_fun_a_tree_fun$)) (= (= (siterate$a id$a ?v0) (siterate$a id$a ?v1)) (= ?v0 ?v1))) :named a1))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (= (= (siterate$b id$b ?v0) (siterate$b id$b ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun$)) (= (= (siterate$c id$c ?v0) (siterate$c id$c ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 A_a_tree_fun$) (?v1 A_a_tree_fun$)) (= (= (siterate$d id$d ?v0) (siterate$d id$d ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun$)) (= (= (siterate$e id$e ?v0) (siterate$e id$e ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (= (= (siterate$f id$f ?v0) (siterate$f id$f ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (= (= (siterate$g id$g ?v0) (siterate$g id$g ?v1)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (fun_app$ (siterate$ id$) ?v0) (fun_app$ (siterate$ id$) ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 A_a_fun_a_tree_fun$)) (! (= (fun_app$a id$a ?v0) ?v0) :pattern ((fun_app$a id$a ?v0)))) :named a9))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (! (= (fun_app$b id$b ?v0) ?v0) :pattern ((fun_app$b id$b ?v0)))) :named a10))
(assert (! (forall ((?v0 A_a_fun_a_fun$)) (! (= (fun_app$c id$c ?v0) ?v0) :pattern ((fun_app$c id$c ?v0)))) :named a11))
(assert (! (forall ((?v0 A_a_tree_fun$)) (! (= (fun_app$d id$d ?v0) ?v0) :pattern ((fun_app$d id$d ?v0)))) :named a12))
(assert (! (forall ((?v0 A_a_a_fun_fun$)) (! (= (fun_app$e id$e ?v0) ?v0) :pattern ((fun_app$e id$e ?v0)))) :named a13))
(assert (! (forall ((?v0 A_a_fun$)) (! (= (fun_app$f id$g ?v0) ?v0) :pattern ((fun_app$f id$g ?v0)))) :named a14))
(assert (! (forall ((?v0 A_tree$)) (! (= (fun_app$g id$f ?v0) ?v0) :pattern ((fun_app$g id$f ?v0)))) :named a15))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$h id$ ?v0) ?v0) :pattern ((fun_app$h id$ ?v0)))) :named a16))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$i (st_ap$ (siterate$g id$g ?v0)) (fun_app$ (siterate$ id$) ?v1)) (fun_app$ (siterate$ id$) (fun_app$h ?v0 ?v1)))) :named a17))
(assert (! (forall ((?v0 A_tree_a_fun$) (?v1 A_tree$)) (= (st_ap$a (siterate$h id$h ?v0) (siterate$f id$f ?v1)) (fun_app$ (siterate$ id$) (fun_app$j ?v0 ?v1)))) :named a18))
(assert (! (forall ((?v0 A_a_tree_fun$) (?v1 A$)) (= (st_ap$b (siterate$d id$d ?v0) (fun_app$ (siterate$ id$) ?v1)) (siterate$f id$f (fun_app$k ?v0 ?v1)))) :named a19))
(assert (! (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree$)) (= (st_ap$c (siterate$i id$i ?v0) (siterate$f id$f ?v1)) (siterate$f id$f (fun_app$g ?v0 ?v1)))) :named a20))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (= (st_ap$d (siterate$e id$e ?v0) (fun_app$ (siterate$ id$) ?v1)) (siterate$g id$g (fun_app$l ?v0 ?v1)))) :named a21))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$)) (= (st_ap$e (siterate$c id$c ?v0) (siterate$g id$g ?v1)) (fun_app$ (siterate$ id$) (fun_app$m ?v0 ?v1)))) :named a22))
(assert (! (forall ((?v0 A_tree_a_a_fun_fun$) (?v1 A_tree$)) (= (st_ap$f (siterate$j id$j ?v0) (siterate$f id$f ?v1)) (siterate$g id$g (fun_app$n ?v0 ?v1)))) :named a23))
(assert (! (forall ((?v0 A_a_fun_a_tree_fun$) (?v1 A_a_fun$)) (= (st_ap$g (siterate$a id$a ?v0) (siterate$g id$g ?v1)) (siterate$f id$f (fun_app$o ?v0 ?v1)))) :named a24))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (= (st_ap$h (siterate$b id$b ?v0) (siterate$g id$g ?v1)) (siterate$g id$g (fun_app$f ?v0 ?v1)))) :named a25))
(assert (! (forall ((?v0 A_a_a_tree_fun_fun$) (?v1 A$)) (= (st_ap$i (siterate$k id$k ?v0) (fun_app$ (siterate$ id$) ?v1)) (siterate$d id$d (fun_app$p ?v0 ?v1)))) :named a26))
(assert (! (forall ((?v0 A_a_fun_a_tree_fun$)) (! (= (fun_app$a id$a ?v0) ?v0) :pattern ((fun_app$a id$a ?v0)))) :named a27))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (! (= (fun_app$b id$b ?v0) ?v0) :pattern ((fun_app$b id$b ?v0)))) :named a28))
(assert (! (forall ((?v0 A_a_fun_a_fun$)) (! (= (fun_app$c id$c ?v0) ?v0) :pattern ((fun_app$c id$c ?v0)))) :named a29))
(assert (! (forall ((?v0 A_a_tree_fun$)) (! (= (fun_app$d id$d ?v0) ?v0) :pattern ((fun_app$d id$d ?v0)))) :named a30))
(assert (! (forall ((?v0 A_a_a_fun_fun$)) (! (= (fun_app$e id$e ?v0) ?v0) :pattern ((fun_app$e id$e ?v0)))) :named a31))
(assert (! (forall ((?v0 A_a_fun$)) (! (= (fun_app$f id$g ?v0) ?v0) :pattern ((fun_app$f id$g ?v0)))) :named a32))
(assert (! (forall ((?v0 A_tree$)) (! (= (fun_app$g id$f ?v0) ?v0) :pattern ((fun_app$g id$f ?v0)))) :named a33))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$h id$ ?v0) ?v0) :pattern ((fun_app$h id$ ?v0)))) :named a34))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (=> (member$ ?v0 ?v1) (member$a (fun_app$ (siterate$ id$) ?v0) (streams$ ?v1)))) :named a35))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_set$)) (=> (member$b ?v0 ?v1) (member$c (siterate$f id$f ?v0) (streams$a ?v1)))) :named a36))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_set$)) (=> (member$a ?v0 ?v1) (member$d (siterate$l id$l ?v0) (streams$b ?v1)))) :named a37))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_set$)) (=> (member$e ?v0 ?v1) (member$f (siterate$g id$g ?v0) (streams$c ?v1)))) :named a38))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_set$)) (=> (member$d ?v0 ?v1) (member$g (siterate$m id$m ?v0) (streams$d ?v1)))) :named a39))
(assert (! (forall ((?v0 A_tree_stream$) (?v1 A_tree_stream_set$)) (=> (member$c ?v0 ?v1) (member$h (siterate$n id$n ?v0) (streams$e ?v1)))) :named a40))
(assert (! (forall ((?v0 A_a_fun_stream$) (?v1 A_a_fun_stream_set$)) (=> (member$f ?v0 ?v1) (member$i (siterate$o id$o ?v0) (streams$f ?v1)))) :named a41))
(assert (! (forall ((?v0 A_a_tree_fun$) (?v1 A_a_tree_fun_set$)) (=> (member$j ?v0 ?v1) (member$k (siterate$d id$d ?v0) (streams$g ?v1)))) :named a42))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_set$)) (=> (member$l ?v0 ?v1) (member$m (siterate$c id$c ?v0) (streams$h ?v1)))) :named a43))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun_set$)) (=> (member$n ?v0 ?v1) (member$o (siterate$e id$e ?v0) (streams$i ?v1)))) :named a44))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$i (smap$ ?v0) (fun_app$ (siterate$ id$) ?v1)) (fun_app$ (siterate$ id$) (fun_app$h ?v0 ?v1)))) :named a45))
(assert (! (forall ((?v0 A_tree_a_fun$) (?v1 A_tree$)) (= (smap$a ?v0 (siterate$f id$f ?v1)) (fun_app$ (siterate$ id$) (fun_app$j ?v0 ?v1)))) :named a46))
(assert (! (forall ((?v0 A_a_tree_fun$) (?v1 A$)) (= (smap$b ?v0 (fun_app$ (siterate$ id$) ?v1)) (siterate$f id$f (fun_app$k ?v0 ?v1)))) :named a47))
(assert (! (forall ((?v0 A_tree_a_tree_fun$) (?v1 A_tree$)) (= (smap$c ?v0 (siterate$f id$f ?v1)) (siterate$f id$f (fun_app$g ?v0 ?v1)))) :named a48))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (= (smap$d ?v0 (fun_app$ (siterate$ id$) ?v1)) (siterate$g id$g (fun_app$l ?v0 ?v1)))) :named a49))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$)) (= (smap$e ?v0 (siterate$g id$g ?v1)) (fun_app$ (siterate$ id$) (fun_app$m ?v0 ?v1)))) :named a50))
(assert (! (forall ((?v0 A_tree_a_a_fun_fun$) (?v1 A_tree$)) (= (smap$f ?v0 (siterate$f id$f ?v1)) (siterate$g id$g (fun_app$n ?v0 ?v1)))) :named a51))
(assert (! (forall ((?v0 A_a_fun_a_tree_fun$) (?v1 A_a_fun$)) (= (smap$g ?v0 (siterate$g id$g ?v1)) (siterate$f id$f (fun_app$o ?v0 ?v1)))) :named a52))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (= (smap$h ?v0 (siterate$g id$g ?v1)) (siterate$g id$g (fun_app$f ?v0 ?v1)))) :named a53))
(assert (! (forall ((?v0 A_a_a_tree_fun_fun$) (?v1 A$)) (= (smap$i ?v0 (fun_app$ (siterate$ id$) ?v1)) (siterate$d id$d (fun_app$p ?v0 ?v1)))) :named a54))
(assert (! (forall ((?v0 Nat$)) (! (= (of_nat$b ?v0) (tree_pure$ (of_nat$c ?v0))) :pattern ((of_nat$b ?v0)))) :named a55))
(assert (! (forall ((?v0 Nat$)) (! (= (of_nat$d ?v0) (tree_pure$a (of_nat$e ?v0))) :pattern ((of_nat$d ?v0)))) :named a56))
(assert (! (forall ((?v0 Nat$)) (! (= (of_nat$e ?v0) (tree_pure$b (of_nat$f ?v0))) :pattern ((of_nat$e ?v0)))) :named a57))
(assert (! (forall ((?v0 Nat$)) (! (= (of_nat$c ?v0) (tree_pure$c (of_nat$g ?v0))) :pattern ((of_nat$c ?v0)))) :named a58))
(assert (! (forall ((?v0 Nat$)) (! (= (of_nat$g ?v0) (tree_pure$d (of_nat$ ?v0))) :pattern ((of_nat$g ?v0)))) :named a59))
(assert (! (forall ((?v0 Nat$)) (! (= (of_nat$f ?v0) (tree_pure$e (of_nat$a ?v0))) :pattern ((of_nat$f ?v0)))) :named a60))
(assert (! (forall ((?v0 A_a_fun_a_tree_fun_a_a_fun_a_tree_fun_fun$) (?v1 A_a_fun_a_tree_fun$)) (= (smap$j ?v0 (siterate$a ?v0 ?v1)) (siterate$a ?v0 (fun_app$a ?v0 ?v1)))) :named a61))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (= (smap$k ?v0 (siterate$b ?v0 ?v1)) (siterate$b ?v0 (fun_app$b ?v0 ?v1)))) :named a62))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_a_fun_a_fun_fun$) (?v1 A_a_fun_a_fun$)) (= (smap$l ?v0 (siterate$c ?v0 ?v1)) (siterate$c ?v0 (fun_app$c ?v0 ?v1)))) :named a63))
(assert (! (forall ((?v0 A_a_tree_fun_a_a_tree_fun_fun$) (?v1 A_a_tree_fun$)) (= (smap$m ?v0 (siterate$d ?v0 ?v1)) (siterate$d ?v0 (fun_app$d ?v0 ?v1)))) :named a64))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_a_fun_fun_fun$) (?v1 A_a_a_fun_fun$)) (= (smap$n ?v0 (siterate$e ?v0 ?v1)) (siterate$e ?v0 (fun_app$e ?v0 ?v1)))) :named a65))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (= (smap$h ?v0 (siterate$g ?v0 ?v1)) (siterate$g ?v0 (fun_app$f ?v0 ?v1)))) :named a66))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$i (smap$ ?v0) (fun_app$ (siterate$ ?v0) ?v1)) (fun_app$ (siterate$ ?v0) (fun_app$h ?v0 ?v1)))) :named a67))
(assert (! (forall ((?v0 A_a_fun_a_tree_fun_tree$)) (= (fun_app$q (map_tree$ id$a) ?v0) ?v0)) :named a68))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$)) (= (fun_app$r (map_tree$a id$b) ?v0) ?v0)) :named a69))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$)) (= (fun_app$s (map_tree$b id$c) ?v0) ?v0)) :named a70))
(assert (! (forall ((?v0 A_a_tree_fun_tree$)) (= (fun_app$t (map_tree$c id$d) ?v0) ?v0)) :named a71))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$)) (= (fun_app$u (map_tree$d id$e) ?v0) ?v0)) :named a72))
(assert (! (forall ((?v0 A_stream_tree$)) (= (fun_app$v (map_tree$e id$l) ?v0) ?v0)) :named a73))
(assert (! (forall ((?v0 A_a_fun_tree$)) (= (fun_app$w (map_tree$f id$g) ?v0) ?v0)) :named a74))
(assert (! (forall ((?v0 A_tree_tree$)) (= (fun_app$x (map_tree$g id$f) ?v0) ?v0)) :named a75))
(assert (! (forall ((?v0 A_tree$)) (= (fun_app$g (map_tree$h id$) ?v0) ?v0)) :named a76))
(assert (! (= (map_tree$ id$a) id$p) :named a77))
(assert (! (= (map_tree$a id$b) id$q) :named a78))
(assert (! (= (map_tree$b id$c) id$r) :named a79))
(assert (! (= (map_tree$c id$d) id$s) :named a80))
(assert (! (= (map_tree$d id$e) id$t) :named a81))
(assert (! (= (map_tree$e id$l) id$u) :named a82))
(assert (! (= (map_tree$f id$g) id$v) :named a83))
(assert (! (= (map_tree$g id$f) id$w) :named a84))
(assert (! (= (map_tree$h id$) id$f) :named a85))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$g (map_tree$h ?v0) (tree_pure$e ?v1)) (tree_pure$e (fun_app$h ?v0 ?v1)))) :named a86))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A$)) (= (map_tree$i ?v0 (tree_pure$e ?v1)) (tree_pure$d (fun_app$ ?v0 ?v1)))) :named a87))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream$)) (= (map_tree$j ?v0 (tree_pure$d ?v1)) (tree_pure$e (fun_app$y ?v0 ?v1)))) :named a88))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream$)) (= (fun_app$v (map_tree$e ?v0) (tree_pure$d ?v1)) (tree_pure$d (fun_app$i ?v0 ?v1)))) :named a89))
(assert (! (forall ((?v0 A_a_tree_fun$) (?v1 A$)) (= (map_tree$k ?v0 (tree_pure$e ?v1)) (tree_pure$b (fun_app$k ?v0 ?v1)))) :named a90))
(assert (! (forall ((?v0 A_tree_a_fun$) (?v1 A_tree$)) (= (map_tree$l ?v0 (tree_pure$b ?v1)) (tree_pure$e (fun_app$j ?v0 ?v1)))) :named a91))
(assert (! (forall ((?v0 A_a_stream_tree_fun$) (?v1 A$)) (= (map_tree$m ?v0 (tree_pure$e ?v1)) (tree_pure$c (fun_app$z ?v0 ?v1)))) :named a92))
(assert (! (forall ((?v0 A_stream_a_tree_fun$) (?v1 A_stream$)) (= (map_tree$n ?v0 (tree_pure$d ?v1)) (tree_pure$b (fun_app$aa ?v0 ?v1)))) :named a93))
(assert (! (forall ((?v0 A_stream_tree_a_fun$) (?v1 A_stream_tree$)) (= (map_tree$o ?v0 (tree_pure$c ?v1)) (tree_pure$e (fun_app$ab ?v0 ?v1)))) :named a94))
(assert (! (forall ((?v0 A_tree_a_stream_fun$) (?v1 A_tree$)) (= (map_tree$p ?v0 (tree_pure$b ?v1)) (tree_pure$d (fun_app$ac ?v0 ?v1)))) :named a95))
(assert (! (forall ((?v0 A_stream_tree$) (?v1 A_stream_tree$)) (= (= (tree_pure$c ?v0) (tree_pure$c ?v1)) (= ?v0 ?v1))) :named a96))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (= (= (tree_pure$b ?v0) (tree_pure$b ?v1)) (= ?v0 ?v1))) :named a97))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (tree_pure$e ?v0) (tree_pure$e ?v1)) (= ?v0 ?v1))) :named a98))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$)) (= (= (tree_pure$d ?v0) (tree_pure$d ?v1)) (= ?v0 ?v1))) :named a99))
(check-sat)
;(get-unsat-core)
