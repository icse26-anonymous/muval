; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 500
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_b_fun$ 0)
(declare-codatatypes () ((B_tree$ (node$ (root$ B$) (left$ B_tree$) (right$ B_tree$)))
  (A_tree$ (node$a (root$a A$) (left$a A_tree$) (right$a A_tree$)))
  (A_tree_tree$ (node$b (root$b A_tree$) (left$b A_tree_tree$) (right$b A_tree_tree$)))
  (A_tree_tree_tree$ (node$c (root$c A_tree_tree$) (left$c A_tree_tree_tree$) (right$c A_tree_tree_tree$)))
  (A_tree_tree_tree_tree$ (node$d (root$d A_tree_tree_tree$) (left$d A_tree_tree_tree_tree$) (right$d A_tree_tree_tree_tree$)))
  (B_tree_tree$ (node$e (root$e B_tree$) (left$e B_tree_tree$) (right$e B_tree_tree$)))
  (B_tree_tree_tree$ (node$f (root$f B_tree_tree$) (left$f B_tree_tree_tree$) (right$f B_tree_tree_tree$)))
  (B_tree_tree_tree_tree$ (node$g (root$g B_tree_tree_tree$) (left$g B_tree_tree_tree_tree$) (right$g B_tree_tree_tree_tree$)))))
(declare-fun f$ () A_b_fun$)
(declare-fun t$ () A_tree$)
(declare-fun t$a () A_tree$)
(declare-fun times$ (A_tree$ A_tree$) A_tree$)
(declare-fun times$a (B_tree$ B_tree$) B_tree$)
(declare-fun times$b (A$ A$) A$)
(declare-fun times$c (B$ B$) B$)
(declare-fun times$d (A_tree_tree_tree_tree$ A_tree_tree_tree_tree$) A_tree_tree_tree_tree$)
(declare-fun times$e (A_tree_tree_tree$ A_tree_tree_tree$) A_tree_tree_tree$)
(declare-fun times$f (B_tree_tree_tree_tree$ B_tree_tree_tree_tree$) B_tree_tree_tree_tree$)
(declare-fun times$g (B_tree_tree_tree$ B_tree_tree_tree$) B_tree_tree_tree$)
(declare-fun times$h (B_tree_tree$ B_tree_tree$) B_tree_tree$)
(declare-fun times$i (A_tree_tree$ A_tree_tree$) A_tree_tree$)
(declare-fun fun_app$ (A_b_fun$ A$) B$)
(declare-fun map_tree$ (A_b_fun$ A_tree$) B_tree$)
(assert (! (not (= (map_tree$ f$ (times$ t$ t$a)) (times$a (map_tree$ f$ t$) (map_tree$ f$ t$a)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (fun_app$ f$ (times$b ?v0 ?v1)) (times$c (fun_app$ f$ ?v0) (fun_app$ f$ ?v1)))) :named a1))
(assert (! (forall ((?v0 A_tree_tree_tree_tree$) (?v1 A_tree_tree_tree_tree$)) (= (root$d (times$d ?v0 ?v1)) (times$e (root$d ?v0) (root$d ?v1)))) :named a2))
(assert (! (forall ((?v0 B_tree_tree_tree_tree$) (?v1 B_tree_tree_tree_tree$)) (= (root$g (times$f ?v0 ?v1)) (times$g (root$g ?v0) (root$g ?v1)))) :named a3))
(assert (! (forall ((?v0 B_tree_tree_tree$) (?v1 B_tree_tree_tree$)) (= (root$f (times$g ?v0 ?v1)) (times$h (root$f ?v0) (root$f ?v1)))) :named a4))
(assert (! (forall ((?v0 A_tree_tree_tree$) (?v1 A_tree_tree_tree$)) (= (root$c (times$e ?v0 ?v1)) (times$i (root$c ?v0) (root$c ?v1)))) :named a5))
(assert (! (forall ((?v0 A_tree_tree$) (?v1 A_tree_tree$)) (= (root$b (times$i ?v0 ?v1)) (times$ (root$b ?v0) (root$b ?v1)))) :named a6))
(assert (! (forall ((?v0 B_tree_tree$) (?v1 B_tree_tree$)) (= (root$e (times$h ?v0 ?v1)) (times$a (root$e ?v0) (root$e ?v1)))) :named a7))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (= (root$a (times$ ?v0 ?v1)) (times$b (root$a ?v0) (root$a ?v1)))) :named a8))
(assert (! (forall ((?v0 B_tree$) (?v1 B_tree$)) (= (root$ (times$a ?v0 ?v1)) (times$c (root$ ?v0) (root$ ?v1)))) :named a9))
(check-sat)
;(get-unsat-core)
