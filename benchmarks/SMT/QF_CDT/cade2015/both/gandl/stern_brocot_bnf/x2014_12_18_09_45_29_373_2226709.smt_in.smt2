; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 352
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_fun_set$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_a_fun_bool_fun$ 0)
(declare-sort A_a_a_fun_fun_set$ 0)
(declare-sort A_a_fun_a_fun_set$ 0)
(declare-sort A_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_a_fun$ 0)
(declare-sort A_a_a_fun_bool_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_bool_fun$ 0)
(declare-sort A_a_fun_a_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_bool_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_set$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_fun$ 0)
(declare-sort A_a_a_a_fun_fun_bool_fun_fun$ 0)
(declare-sort A_a_a_fun_a_fun_bool_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_bool_fun$ 0)
(declare-sort A_a_fun_a_fun_a_bool_fun_fun$ 0)
(declare-sort A_a_a_fun_a_a_fun_fun_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_a_a_fun_fun_bool_fun_fun$ 0)
(declare-codatatypes () ((A_tree$ (node$ (root$ A$) (left$ A_tree$) (right$ A_tree$)))))
(declare-datatypes () ((Num$ (one$) (bit0$ (select$ Num$)) (bit1$ (selecta$ Num$)))))
(declare-codatatypes () ((A_a_fun_tree$ (node$a (selectb$ A_a_fun$) (selectc$ A_a_fun_tree$) (selectd$ A_a_fun_tree$)))
  (A_a_a_fun_fun_tree$ (node$b (selecte$ A_a_a_fun_fun$) (selectf$ A_a_a_fun_fun_tree$) (selectg$ A_a_a_fun_fun_tree$)))
  (A_a_fun_a_fun_tree$ (node$c (selecth$ A_a_fun_a_fun$) (selecti$ A_a_fun_a_fun_tree$) (selectj$ A_a_fun_a_fun_tree$)))
  (A_a_fun_a_a_fun_fun_tree$ (node$d (selectk$ A_a_fun_a_a_fun_fun$) (selectl$ A_a_fun_a_a_fun_fun_tree$) (selectm$ A_a_fun_a_a_fun_fun_tree$)))
  (A_a_a_fun_fun_a_fun_tree$ (node$e (selectn$ A_a_a_fun_fun_a_fun$) (selecto$ A_a_a_fun_fun_a_fun_tree$) (selectp$ A_a_a_fun_fun_a_fun_tree$)))
  (A_a_fun_a_fun_a_fun_tree$ (node$f (selectq$ A_a_fun_a_fun_a_fun$) (selectr$ A_a_fun_a_fun_a_fun_tree$) (selects$ A_a_fun_a_fun_a_fun_tree$)))
  (A_a_a_a_fun_fun_fun_tree$ (node$g (selectt$ A_a_a_a_fun_fun_fun$) (selectu$ A_a_a_a_fun_fun_fun_tree$) (selectv$ A_a_a_a_fun_fun_fun_tree$)))
  (A_a_a_fun_a_fun_fun_tree$ (node$h (selectw$ A_a_a_fun_a_fun_fun$) (selectx$ A_a_a_fun_a_fun_fun_tree$) (selecty$ A_a_a_fun_a_fun_fun_tree$)))
  (A_a_fun_a_a_fun_fun_a_fun_tree$ (node$i (selectz$ A_a_fun_a_a_fun_fun_a_fun$) (selecua$ A_a_fun_a_a_fun_fun_a_fun_tree$) (selecub$ A_a_fun_a_a_fun_fun_a_fun_tree$)))
  (A_a_a_fun_fun_a_a_fun_fun_tree$ (node$j (selecuc$ A_a_a_fun_fun_a_a_fun_fun$) (selecud$ A_a_a_fun_fun_a_a_fun_fun_tree$) (selecue$ A_a_a_fun_fun_a_a_fun_fun_tree$)))))
(declare-fun n$ () Num$)
(declare-fun root$a (A_a_fun_tree$) A_a_fun$)
(declare-fun root$b (A_a_a_fun_fun_tree$) A_a_a_fun_fun$)
(declare-fun root$c (A_a_fun_a_fun_tree$) A_a_fun_a_fun$)
(declare-fun root$d (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun$)
(declare-fun root$e (A_a_a_fun_fun_a_fun_tree$) A_a_a_fun_fun_a_fun$)
(declare-fun root$f (A_a_fun_a_fun_a_fun_tree$) A_a_fun_a_fun_a_fun$)
(declare-fun root$g (A_a_a_a_fun_fun_fun_tree$) A_a_a_a_fun_fun_fun$)
(declare-fun root$h (A_a_a_fun_a_fun_fun_tree$) A_a_a_fun_a_fun_fun$)
(declare-fun root$i (A_a_fun_a_a_fun_fun_a_fun_tree$) A_a_fun_a_a_fun_fun_a_fun$)
(declare-fun root$j (A_a_a_fun_fun_a_a_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_fun$)
(declare-fun member$ (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_set$) Bool)
(declare-fun fun_app$ (A_a_fun$ A$) A$)
(declare-fun member$a (A_a_a_fun_fun$ A_a_a_fun_fun_set$) Bool)
(declare-fun member$b (A_a_fun_a_fun$ A_a_fun_a_fun_set$) Bool)
(declare-fun member$c (A_a_fun$ A_a_fun_set$) Bool)
(declare-fun member$d (A$ A_set$) Bool)
(declare-fun numeral$ (Num$) A_tree$)
(declare-fun tree_ap$ (A_a_fun_tree$ A_tree$) A_tree$)
(declare-fun fun_app$a (A_a_fun_a_fun$ A_a_fun$) A$)
(declare-fun fun_app$b (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$c (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$d (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun$) A$)
(declare-fun fun_app$e (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun$) A$)
(declare-fun fun_app$f (A_a_a_a_fun_fun_fun$ A$) A_a_a_fun_fun$)
(declare-fun fun_app$g (A_a_a_fun_a_fun_fun$ A$) A_a_fun_a_fun$)
(declare-fun fun_app$h (A_a_fun_a_a_fun_fun_a_fun$ A_a_fun_a_a_fun_fun$) A$)
(declare-fun fun_app$i (A_a_a_fun_fun_a_a_fun_fun$ A_a_a_fun_fun$) A_a_fun$)
(declare-fun fun_app$j (A_bool_fun$ A$) Bool)
(declare-fun fun_app$k (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$l (A_a_fun_bool_fun$ A_a_fun$) Bool)
(declare-fun fun_app$m (A_a_a_fun_bool_fun_fun$ A$) A_a_fun_bool_fun$)
(declare-fun fun_app$n (A_a_fun_a_bool_fun_fun$ A_a_fun$) A_bool_fun$)
(declare-fun fun_app$o (A_a_fun_a_a_fun_bool_fun_fun$ A_a_fun$) A_a_fun_bool_fun$)
(declare-fun fun_app$p (A_a_a_fun_fun_bool_fun$ A_a_a_fun_fun$) Bool)
(declare-fun fun_app$q (A_a_a_a_fun_fun_bool_fun_fun$ A$) A_a_a_fun_fun_bool_fun$)
(declare-fun fun_app$r (A_a_fun_a_fun_bool_fun$ A_a_fun_a_fun$) Bool)
(declare-fun fun_app$s (A_a_a_fun_a_fun_bool_fun_fun$ A$) A_a_fun_a_fun_bool_fun$)
(declare-fun fun_app$t (A_a_a_fun_fun_a_bool_fun_fun$ A_a_a_fun_fun$) A_bool_fun$)
(declare-fun fun_app$u (A_a_fun_a_fun_a_bool_fun_fun$ A_a_fun_a_fun$) A_bool_fun$)
(declare-fun fun_app$v (A_a_fun_a_a_fun_fun_bool_fun$ A_a_fun_a_a_fun_fun$) Bool)
(declare-fun fun_app$w (A_a_a_fun_a_a_fun_fun_bool_fun_fun$ A$) A_a_fun_a_a_fun_fun_bool_fun$)
(declare-fun fun_app$x (A_a_fun_a_a_a_fun_fun_bool_fun_fun$ A_a_fun$) A_a_a_fun_fun_bool_fun$)
(declare-fun map_tree$ (A_a_fun$ A_tree$) A_tree$)
(declare-fun numeral$a (Num$) A$)
(declare-fun rel_tree$ (A_a_bool_fun_fun$ A_tree$ A_tree$) Bool)
(declare-fun set_tree$ (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_set$)
(declare-fun tree_ap$a (A_a_fun_a_fun_tree$ A_a_fun_tree$) A_tree$)
(declare-fun tree_ap$b (A_a_a_fun_fun_tree$ A_tree$) A_a_fun_tree$)
(declare-fun tree_ap$c (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$d (A_a_a_fun_fun_a_fun_tree$ A_a_a_fun_fun_tree$) A_tree$)
(declare-fun tree_ap$e (A_a_fun_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$) A_tree$)
(declare-fun tree_ap$f (A_a_a_a_fun_fun_fun_tree$ A_tree$) A_a_a_fun_fun_tree$)
(declare-fun tree_ap$g (A_a_a_fun_a_fun_fun_tree$ A_tree$) A_a_fun_a_fun_tree$)
(declare-fun tree_ap$h (A_a_fun_a_a_fun_fun_a_fun_tree$ A_a_fun_a_a_fun_fun_tree$) A_tree$)
(declare-fun tree_ap$i (A_a_a_fun_fun_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_fun_tree$)
(declare-fun map_tree$a (A_a_fun_a_fun$ A_a_fun_tree$) A_tree$)
(declare-fun map_tree$b (A_a_a_fun_fun$ A_tree$) A_a_fun_tree$)
(declare-fun map_tree$c (A_a_fun_a_a_fun_fun$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun map_tree$d (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun_tree$) A_tree$)
(declare-fun map_tree$e (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun_tree$) A_tree$)
(declare-fun map_tree$f (A_a_a_a_fun_fun_fun$ A_tree$) A_a_a_fun_fun_tree$)
(declare-fun map_tree$g (A_a_a_fun_a_fun_fun$ A_tree$) A_a_fun_a_fun_tree$)
(declare-fun map_tree$h (A_a_fun_a_a_fun_fun_a_fun$ A_a_fun_a_a_fun_fun_tree$) A_tree$)
(declare-fun map_tree$i (A_a_a_fun_fun_a_a_fun_fun$ A_a_a_fun_fun_tree$) A_a_fun_tree$)
(declare-fun rel_tree$a (A_a_a_fun_bool_fun_fun$ A_tree$ A_a_fun_tree$) Bool)
(declare-fun rel_tree$b (A_a_fun_a_bool_fun_fun$ A_a_fun_tree$ A_tree$) Bool)
(declare-fun rel_tree$c (A_a_fun_a_a_fun_bool_fun_fun$ A_a_fun_tree$ A_a_fun_tree$) Bool)
(declare-fun rel_tree$d (A_a_a_a_fun_fun_bool_fun_fun$ A_tree$ A_a_a_fun_fun_tree$) Bool)
(declare-fun rel_tree$e (A_a_a_fun_a_fun_bool_fun_fun$ A_tree$ A_a_fun_a_fun_tree$) Bool)
(declare-fun rel_tree$f (A_a_a_fun_fun_a_bool_fun_fun$ A_a_a_fun_fun_tree$ A_tree$) Bool)
(declare-fun rel_tree$g (A_a_fun_a_fun_a_bool_fun_fun$ A_a_fun_a_fun_tree$ A_tree$) Bool)
(declare-fun rel_tree$h (A_a_a_fun_a_a_fun_fun_bool_fun_fun$ A_tree$ A_a_fun_a_a_fun_fun_tree$) Bool)
(declare-fun rel_tree$i (A_a_fun_a_a_a_fun_fun_bool_fun_fun$ A_a_fun_tree$ A_a_a_fun_fun_tree$) Bool)
(declare-fun set_tree$a (A_a_a_fun_fun_tree$) A_a_a_fun_fun_set$)
(declare-fun set_tree$b (A_a_fun_a_fun_tree$) A_a_fun_a_fun_set$)
(declare-fun set_tree$c (A_a_fun_tree$) A_a_fun_set$)
(declare-fun set_tree$d (A_tree$) A_set$)
(declare-fun tree_pure$ (A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_pure$a (A_a_a_fun_fun$) A_a_a_fun_fun_tree$)
(declare-fun tree_pure$b (A_a_fun_a_fun$) A_a_fun_a_fun_tree$)
(declare-fun tree_pure$c (A_a_fun$) A_a_fun_tree$)
(declare-fun tree_pure$d (A$) A_tree$)
(assert (! (not (= (root$ (numeral$ n$)) (numeral$a n$))) :named a0))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (root$ (map_tree$ ?v0 ?v1)) (fun_app$ ?v0 (root$ ?v1)))) :named a1))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (root$ (map_tree$a ?v0 ?v1)) (fun_app$a ?v0 (root$a ?v1)))) :named a2))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (root$a (map_tree$b ?v0 ?v1)) (fun_app$b ?v0 (root$ ?v1)))) :named a3))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (root$a (map_tree$c ?v0 ?v1)) (fun_app$c ?v0 (root$a ?v1)))) :named a4))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun$) (?v1 A_a_a_fun_fun_tree$)) (= (root$ (map_tree$d ?v0 ?v1)) (fun_app$d ?v0 (root$b ?v1)))) :named a5))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$)) (= (root$ (map_tree$e ?v0 ?v1)) (fun_app$e ?v0 (root$c ?v1)))) :named a6))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun$) (?v1 A_tree$)) (= (root$b (map_tree$f ?v0 ?v1)) (fun_app$f ?v0 (root$ ?v1)))) :named a7))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A_tree$)) (= (root$c (map_tree$g ?v0 ?v1)) (fun_app$g ?v0 (root$ ?v1)))) :named a8))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (root$ (map_tree$h ?v0 ?v1)) (fun_app$h ?v0 (root$d ?v1)))) :named a9))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$) (?v1 A_a_a_fun_fun_tree$)) (= (root$a (map_tree$i ?v0 ?v1)) (fun_app$i ?v0 (root$b ?v1)))) :named a10))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (root$ (map_tree$ ?v0 ?v1)) (fun_app$ ?v0 (root$ ?v1)))) :named a11))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (root$ (map_tree$a ?v0 ?v1)) (fun_app$a ?v0 (root$a ?v1)))) :named a12))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (root$a (map_tree$b ?v0 ?v1)) (fun_app$b ?v0 (root$ ?v1)))) :named a13))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (root$a (map_tree$c ?v0 ?v1)) (fun_app$c ?v0 (root$a ?v1)))) :named a14))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun$) (?v1 A_a_a_fun_fun_tree$)) (= (root$ (map_tree$d ?v0 ?v1)) (fun_app$d ?v0 (root$b ?v1)))) :named a15))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$)) (= (root$ (map_tree$e ?v0 ?v1)) (fun_app$e ?v0 (root$c ?v1)))) :named a16))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun$) (?v1 A_tree$)) (= (root$b (map_tree$f ?v0 ?v1)) (fun_app$f ?v0 (root$ ?v1)))) :named a17))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A_tree$)) (= (root$c (map_tree$g ?v0 ?v1)) (fun_app$g ?v0 (root$ ?v1)))) :named a18))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (root$ (map_tree$h ?v0 ?v1)) (fun_app$h ?v0 (root$d ?v1)))) :named a19))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$) (?v1 A_a_a_fun_fun_tree$)) (= (root$a (map_tree$i ?v0 ?v1)) (fun_app$i ?v0 (root$b ?v1)))) :named a20))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (= (root$d (tree_pure$ ?v0)) ?v0)) :named a21))
(assert (! (forall ((?v0 A_a_a_fun_fun$)) (= (root$b (tree_pure$a ?v0)) ?v0)) :named a22))
(assert (! (forall ((?v0 A_a_fun_a_fun$)) (= (root$c (tree_pure$b ?v0)) ?v0)) :named a23))
(assert (! (forall ((?v0 A_a_fun$)) (= (root$a (tree_pure$c ?v0)) ?v0)) :named a24))
(assert (! (forall ((?v0 A$)) (= (root$ (tree_pure$d ?v0)) ?v0)) :named a25))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$)) (member$ (root$d ?v0) (set_tree$ ?v0))) :named a26))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$)) (member$a (root$b ?v0) (set_tree$a ?v0))) :named a27))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$)) (member$b (root$c ?v0) (set_tree$b ?v0))) :named a28))
(assert (! (forall ((?v0 A_a_fun_tree$)) (member$c (root$a ?v0) (set_tree$c ?v0))) :named a29))
(assert (! (forall ((?v0 A_tree$)) (member$d (root$ ?v0) (set_tree$d ?v0))) :named a30))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$)) (member$ (root$d ?v0) (set_tree$ ?v0))) :named a31))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$)) (member$a (root$b ?v0) (set_tree$a ?v0))) :named a32))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$)) (member$b (root$c ?v0) (set_tree$b ?v0))) :named a33))
(assert (! (forall ((?v0 A_a_fun_tree$)) (member$c (root$a ?v0) (set_tree$c ?v0))) :named a34))
(assert (! (forall ((?v0 A_tree$)) (member$d (root$ ?v0) (set_tree$d ?v0))) :named a35))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$) (?v2 A_a_fun_a_a_fun_fun_tree$)) (! (= (root$d (node$d ?v0 ?v1 ?v2)) ?v0) :pattern ((node$d ?v0 ?v1 ?v2)))) :named a36))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun_tree$) (?v2 A_a_a_fun_fun_tree$)) (! (= (root$b (node$b ?v0 ?v1 ?v2)) ?v0) :pattern ((node$b ?v0 ?v1 ?v2)))) :named a37))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$) (?v2 A_a_fun_a_fun_tree$)) (! (= (root$c (node$c ?v0 ?v1 ?v2)) ?v0) :pattern ((node$c ?v0 ?v1 ?v2)))) :named a38))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (! (= (root$a (node$a ?v0 ?v1 ?v2)) ?v0) :pattern ((node$a ?v0 ?v1 ?v2)))) :named a39))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (root$ (node$ ?v0 ?v1 ?v2)) ?v0) :pattern ((node$ ?v0 ?v1 ?v2)))) :named a40))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (root$ (tree_ap$ ?v0 ?v1)) (fun_app$ (root$a ?v0) (root$ ?v1)))) :named a41))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$) (?v1 A_a_fun_tree$)) (= (root$ (tree_ap$a ?v0 ?v1)) (fun_app$a (root$c ?v0) (root$a ?v1)))) :named a42))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_tree$)) (= (root$a (tree_ap$b ?v0 ?v1)) (fun_app$b (root$b ?v0) (root$ ?v1)))) :named a43))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$) (?v1 A_a_fun_tree$)) (= (root$a (tree_ap$c ?v0 ?v1)) (fun_app$c (root$d ?v0) (root$a ?v1)))) :named a44))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun_tree$) (?v1 A_a_a_fun_fun_tree$)) (= (root$ (tree_ap$d ?v0 ?v1)) (fun_app$d (root$e ?v0) (root$b ?v1)))) :named a45))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun_tree$) (?v1 A_a_fun_a_fun_tree$)) (= (root$ (tree_ap$e ?v0 ?v1)) (fun_app$e (root$f ?v0) (root$c ?v1)))) :named a46))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun_tree$) (?v1 A_tree$)) (= (root$b (tree_ap$f ?v0 ?v1)) (fun_app$f (root$g ?v0) (root$ ?v1)))) :named a47))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun_tree$) (?v1 A_tree$)) (= (root$c (tree_ap$g ?v0 ?v1)) (fun_app$g (root$h ?v0) (root$ ?v1)))) :named a48))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun_tree$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (root$ (tree_ap$h ?v0 ?v1)) (fun_app$h (root$i ?v0) (root$d ?v1)))) :named a49))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun_tree$) (?v1 A_a_a_fun_fun_tree$)) (= (root$a (tree_ap$i ?v0 ?v1)) (fun_app$i (root$j ?v0) (root$b ?v1)))) :named a50))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_tree$) (?v2 A_tree$)) (=> (rel_tree$ ?v0 ?v1 ?v2) (fun_app$j (fun_app$k ?v0 (root$ ?v1)) (root$ ?v2)))) :named a51))
(assert (! (forall ((?v0 A_a_a_fun_bool_fun_fun$) (?v1 A_tree$) (?v2 A_a_fun_tree$)) (=> (rel_tree$a ?v0 ?v1 ?v2) (fun_app$l (fun_app$m ?v0 (root$ ?v1)) (root$a ?v2)))) :named a52))
(assert (! (forall ((?v0 A_a_fun_a_bool_fun_fun$) (?v1 A_a_fun_tree$) (?v2 A_tree$)) (=> (rel_tree$b ?v0 ?v1 ?v2) (fun_app$j (fun_app$n ?v0 (root$a ?v1)) (root$ ?v2)))) :named a53))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_bool_fun_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (=> (rel_tree$c ?v0 ?v1 ?v2) (fun_app$l (fun_app$o ?v0 (root$a ?v1)) (root$a ?v2)))) :named a54))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_bool_fun_fun$) (?v1 A_tree$) (?v2 A_a_a_fun_fun_tree$)) (=> (rel_tree$d ?v0 ?v1 ?v2) (fun_app$p (fun_app$q ?v0 (root$ ?v1)) (root$b ?v2)))) :named a55))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_bool_fun_fun$) (?v1 A_tree$) (?v2 A_a_fun_a_fun_tree$)) (=> (rel_tree$e ?v0 ?v1 ?v2) (fun_app$r (fun_app$s ?v0 (root$ ?v1)) (root$c ?v2)))) :named a56))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_bool_fun_fun$) (?v1 A_a_a_fun_fun_tree$) (?v2 A_tree$)) (=> (rel_tree$f ?v0 ?v1 ?v2) (fun_app$j (fun_app$t ?v0 (root$b ?v1)) (root$ ?v2)))) :named a57))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_bool_fun_fun$) (?v1 A_a_fun_a_fun_tree$) (?v2 A_tree$)) (=> (rel_tree$g ?v0 ?v1 ?v2) (fun_app$j (fun_app$u ?v0 (root$c ?v1)) (root$ ?v2)))) :named a58))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_bool_fun_fun$) (?v1 A_tree$) (?v2 A_a_fun_a_a_fun_fun_tree$)) (=> (rel_tree$h ?v0 ?v1 ?v2) (fun_app$v (fun_app$w ?v0 (root$ ?v1)) (root$d ?v2)))) :named a59))
(assert (! (forall ((?v0 A_a_fun_a_a_a_fun_fun_bool_fun_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_a_fun_fun_tree$)) (=> (rel_tree$i ?v0 ?v1 ?v2) (fun_app$p (fun_app$x ?v0 (root$a ?v1)) (root$b ?v2)))) :named a60))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$) (?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$)) (= (= (node$a ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a61))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$) (?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a62))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (= (tree_ap$b (tree_pure$a ?v0) (tree_pure$d ?v1)) (tree_pure$c (fun_app$b ?v0 ?v1)))) :named a63))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$)) (= (tree_ap$a (tree_pure$b ?v0) (tree_pure$c ?v1)) (tree_pure$d (fun_app$a ?v0 ?v1)))) :named a64))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (= (tree_ap$c (tree_pure$ ?v0) (tree_pure$c ?v1)) (tree_pure$c (fun_app$c ?v0 ?v1)))) :named a65))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (tree_ap$ (tree_pure$c ?v0) (tree_pure$d ?v1)) (tree_pure$d (fun_app$ ?v0 ?v1)))) :named a66))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$) (?v4 A_a_fun$) (?v5 A_a_fun_tree$) (?v6 A_a_fun_tree$)) (! (= (rel_tree$c ?v0 (node$a ?v1 ?v2 ?v3) (node$a ?v4 ?v5 ?v6)) (and (fun_app$l (fun_app$o ?v0 ?v1) ?v4) (and (rel_tree$c ?v0 ?v2 ?v5) (rel_tree$c ?v0 ?v3 ?v6)))) :pattern ((rel_tree$c ?v0 (node$a ?v1 ?v2 ?v3) (node$a ?v4 ?v5 ?v6))))) :named a67))
(assert (! (forall ((?v0 A_a_fun_a_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$) (?v4 A$) (?v5 A_tree$) (?v6 A_tree$)) (! (= (rel_tree$b ?v0 (node$a ?v1 ?v2 ?v3) (node$ ?v4 ?v5 ?v6)) (and (fun_app$j (fun_app$n ?v0 ?v1) ?v4) (and (rel_tree$b ?v0 ?v2 ?v5) (rel_tree$b ?v0 ?v3 ?v6)))) :pattern ((rel_tree$b ?v0 (node$a ?v1 ?v2 ?v3) (node$ ?v4 ?v5 ?v6))))) :named a68))
(assert (! (forall ((?v0 A_a_a_fun_bool_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$) (?v4 A_a_fun$) (?v5 A_a_fun_tree$) (?v6 A_a_fun_tree$)) (! (= (rel_tree$a ?v0 (node$ ?v1 ?v2 ?v3) (node$a ?v4 ?v5 ?v6)) (and (fun_app$l (fun_app$m ?v0 ?v1) ?v4) (and (rel_tree$a ?v0 ?v2 ?v5) (rel_tree$a ?v0 ?v3 ?v6)))) :pattern ((rel_tree$a ?v0 (node$ ?v1 ?v2 ?v3) (node$a ?v4 ?v5 ?v6))))) :named a69))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$) (?v4 A$) (?v5 A_tree$) (?v6 A_tree$)) (! (= (rel_tree$ ?v0 (node$ ?v1 ?v2 ?v3) (node$ ?v4 ?v5 ?v6)) (and (fun_app$j (fun_app$k ?v0 ?v1) ?v4) (and (rel_tree$ ?v0 ?v2 ?v5) (rel_tree$ ?v0 ?v3 ?v6)))) :pattern ((rel_tree$ ?v0 (node$ ?v1 ?v2 ?v3) (node$ ?v4 ?v5 ?v6))))) :named a70))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun_tree$) (?v2 A_a_a_fun_fun_tree$) (?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (! (= (tree_ap$b (node$b ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (node$a (fun_app$b ?v0 ?v3) (tree_ap$b ?v1 ?v4) (tree_ap$b ?v2 ?v5))) :pattern ((tree_ap$b (node$b ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5))))) :named a71))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$) (?v2 A_a_fun_a_fun_tree$) (?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$)) (! (= (tree_ap$a (node$c ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (node$ (fun_app$a ?v0 ?v3) (tree_ap$a ?v1 ?v4) (tree_ap$a ?v2 ?v5))) :pattern ((tree_ap$a (node$c ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5))))) :named a72))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$) (?v2 A_a_fun_a_a_fun_fun_tree$) (?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$)) (! (= (tree_ap$c (node$d ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (node$a (fun_app$c ?v0 ?v3) (tree_ap$c ?v1 ?v4) (tree_ap$c ?v2 ?v5))) :pattern ((tree_ap$c (node$d ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5))))) :named a73))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$) (?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (! (= (tree_ap$ (node$a ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (node$ (fun_app$ ?v0 ?v3) (tree_ap$ ?v1 ?v4) (tree_ap$ ?v2 ?v5))) :pattern ((tree_ap$ (node$a ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5))))) :named a74))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (tree_ap$b (tree_pure$a ?v0) (node$ ?v1 ?v2 ?v3)) (node$a (fun_app$b ?v0 ?v1) (tree_ap$b (tree_pure$a ?v0) ?v2) (tree_ap$b (tree_pure$a ?v0) ?v3)))) :named a75))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (= (tree_ap$a (tree_pure$b ?v0) (node$a ?v1 ?v2 ?v3)) (node$ (fun_app$a ?v0 ?v1) (tree_ap$a (tree_pure$b ?v0) ?v2) (tree_ap$a (tree_pure$b ?v0) ?v3)))) :named a76))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$) (?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (= (tree_ap$c (tree_pure$ ?v0) (node$a ?v1 ?v2 ?v3)) (node$a (fun_app$c ?v0 ?v1) (tree_ap$c (tree_pure$ ?v0) ?v2) (tree_ap$c (tree_pure$ ?v0) ?v3)))) :named a77))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (tree_ap$ (tree_pure$c ?v0) (node$ ?v1 ?v2 ?v3)) (node$ (fun_app$ ?v0 ?v1) (tree_ap$ (tree_pure$c ?v0) ?v2) (tree_ap$ (tree_pure$c ?v0) ?v3)))) :named a78))
(check-sat)
;(get-unsat-core)
