; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 496
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Dir_bool_fun$ 0)
(declare-sort Dir_dir_list_fun$ 0)
(declare-sort Dir_list_bool_fun$ 0)
(declare-datatypes () ((Nat_nat_prod$ (pair$ (fst$ Nat$) (snd$ Nat$)))
  (Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$) (snd$a Nat_nat_prod$)))))
(declare-codatatypes () ((Nat_nat_prod_nat_nat_prod_prod_tree$ (node$ (root$ Nat_nat_prod_nat_nat_prod_prod$) (left$ Nat_nat_prod_nat_nat_prod_prod_tree$) (right$ Nat_nat_prod_nat_nat_prod_prod_tree$)))))
(declare-datatypes () ((Dir$ (l$) (r$))
  (Dir_list$ (nil$) (cons$ (hd$ Dir$) (tl$ Dir_list$)))))
(declare-fun ma$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun det$ (Nat_nat_prod_nat_nat_prod_prod$) Nat$)
(declare-fun one$ () Nat$)
(declare-fun bind$ (Dir_list$ Dir_dir_list_fun$) Dir_list$)
(declare-fun imat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun lLmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun uRmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun member$ (Dir_list$) Dir_bool_fun$)
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun fun_app$ (Dir_list_bool_fun$ Dir_list$) Bool)
(declare-fun fun_app$a (Dir_bool_fun$ Dir$) Bool)
(declare-fun list_ex1$ (Dir_bool_fun$) Dir_list_bool_fun$)
(declare-fun traverse_tree$ (Dir_list$ Nat_nat_prod_nat_nat_prod_prod_tree$) Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun stern_brocot_iterate_aux$ (Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod_tree$)
(assert (! (not (exists ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (and (= (mulmat$ ma$ ?v0) (root$ (traverse_tree$ nil$ (stern_brocot_iterate_aux$ ma$)))) (= (det$ ?v0) one$)))) :named a0))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ (mulmat$ ?v0 ?v1) ?v2) (mulmat$ ?v0 (mulmat$ ?v1 ?v2)))) :named a1))
(assert (! (= (det$ imat$) one$) :named a2))
(assert (! (= (det$ lLmat$) one$) :named a3))
(assert (! (= (det$ uRmat$) one$) :named a4))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (= (det$ ?v0) one$) (= (det$ (mulmat$ ?v0 lLmat$)) one$))) :named a5))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (= (det$ ?v0) one$) (= (det$ (mulmat$ ?v0 uRmat$)) one$))) :named a6))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (= (det$ ?v0) one$) (= (det$ (mulmat$ lLmat$ ?v0)) one$))) :named a7))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (= (det$ ?v0) one$) (= (det$ (mulmat$ uRmat$ ?v0)) one$))) :named a8))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ ?v0 imat$) ?v0)) :named a9))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ imat$ ?v0) ?v0)) :named a10))
(assert (! (= one$ one$) :named a11))
(assert (! (forall ((?v0 Dir_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false)) :named a12))
(assert (! (forall ((?v0 Nat$)) (= (= one$ ?v0) (= ?v0 one$))) :named a13))
(assert (! (forall ((?v0 Dir_dir_list_fun$)) (! (= (bind$ nil$ ?v0) nil$) :pattern ((bind$ nil$ ?v0)))) :named a14))
(assert (! (forall ((?v0 Dir_bool_fun$)) (! (= (fun_app$ (list_ex1$ ?v0) nil$) false) :pattern ((list_ex1$ ?v0)))) :named a15))
(assert (! (forall ((?v0 Dir$)) (! (= (fun_app$a (member$ nil$) ?v0) false) :pattern ((fun_app$a (member$ nil$) ?v0)))) :named a16))
(check-sat)
;(get-unsat-core)
