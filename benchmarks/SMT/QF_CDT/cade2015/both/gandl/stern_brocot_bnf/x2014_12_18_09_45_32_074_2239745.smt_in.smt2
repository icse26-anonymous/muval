; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 460
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun$ 0)
(declare-sort A_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_a_fun$ 0)
(declare-sort A_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_a_a_fun_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_a_a_fun_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_a_fun_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_a_fun_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_a_fun_fun_fun$ 0)
(declare-sort A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_a_a_fun_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_fun$ 0)
(declare-codatatypes () ((A_tree$ (node$ (root$ A$) (left$ A_tree$) (right$ A_tree$)))
  (A_a_fun_tree$ (node$a (select$ A_a_fun$) (selecta$ A_a_fun_tree$) (selectb$ A_a_fun_tree$)))
  (A_a_a_fun_fun_tree$ (node$b (selectc$ A_a_a_fun_fun$) (selectd$ A_a_a_fun_fun_tree$) (selecte$ A_a_a_fun_fun_tree$)))
  (A_a_fun_a_fun_tree$ (node$c (selectf$ A_a_fun_a_fun$) (selectg$ A_a_fun_a_fun_tree$) (selecth$ A_a_fun_a_fun_tree$)))
  (A_a_a_fun_a_fun_fun_tree$ (node$d (selecti$ A_a_a_fun_a_fun_fun$) (selectj$ A_a_a_fun_a_fun_fun_tree$) (selectk$ A_a_a_fun_a_fun_fun_tree$)))
  (A_a_fun_a_a_fun_fun_tree$ (node$e (selectl$ A_a_fun_a_a_fun_fun$) (selectm$ A_a_fun_a_a_fun_fun_tree$) (selectn$ A_a_fun_a_a_fun_fun_tree$)))
  (A_a_fun_a_fun_a_fun_tree$ (node$f (selecto$ A_a_fun_a_fun_a_fun$) (selectp$ A_a_fun_a_fun_a_fun_tree$) (selectq$ A_a_fun_a_fun_a_fun_tree$)))
  (A_a_fun_a_a_fun_a_fun_fun_tree$ (node$g (selectr$ A_a_fun_a_a_fun_a_fun_fun$) (selects$ A_a_fun_a_a_fun_a_fun_fun_tree$) (selectt$ A_a_fun_a_a_fun_a_fun_fun_tree$)))
  (A_a_fun_a_fun_a_a_fun_fun_tree$ (node$h (selectu$ A_a_fun_a_fun_a_a_fun_fun$) (selectv$ A_a_fun_a_fun_a_a_fun_fun_tree$) (selectw$ A_a_fun_a_fun_a_a_fun_fun_tree$)))
  (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ (node$i (selectx$ A_a_a_fun_fun_a_a_a_fun_fun_fun$) (selecty$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) (selectz$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)))
  (A_a_fun_a_fun_a_a_fun_a_fun_fun_tree$ (node$j (selecua$ A_a_fun_a_fun_a_a_fun_a_fun_fun$) (selecub$ A_a_fun_a_fun_a_a_fun_a_fun_fun_tree$) (selecuc$ A_a_fun_a_fun_a_a_fun_a_fun_fun_tree$)))
  (A_a_a_fun_fun_a_a_fun_fun_tree$ (node$k (selecud$ A_a_a_fun_fun_a_a_fun_fun$) (selecue$ A_a_a_fun_fun_a_a_fun_fun_tree$) (selecuf$ A_a_a_fun_fun_a_a_fun_fun_tree$)))
  (A_a_a_a_fun_fun_a_a_fun_fun_fun_tree$ (node$l (selecug$ A_a_a_a_fun_fun_a_a_fun_fun_fun$) (selecuh$ A_a_a_a_fun_fun_a_a_fun_fun_fun_tree$) (selecui$ A_a_a_a_fun_fun_a_a_fun_fun_fun_tree$)))
  (A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_fun_fun_fun_tree$ (node$m (selecuj$ A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_fun_fun_fun$) (selecuk$ A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_fun_fun_fun_tree$) (selecul$ A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_fun_fun_fun_tree$)))
  (A_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun_tree$ (node$n (selecum$ A_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun$) (selecun$ A_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun_tree$) (selecuo$ A_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun_tree$)))
  (A_a_a_a_fun_fun_fun_tree$ (node$o (selecup$ A_a_a_a_fun_fun_fun$) (selecuq$ A_a_a_a_fun_fun_fun_tree$) (selecur$ A_a_a_a_fun_fun_fun_tree$)))
  (A_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun_tree$ (node$p (selecus$ A_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun$) (selecut$ A_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun_tree$) (selecuu$ A_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun_tree$)))
  (A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun_tree$ (node$q (selecuv$ A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun$) (selecuw$ A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun_tree$) (selecux$ A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun_tree$)))
  (A_a_fun_a_a_fun_fun_a_a_fun_fun_tree$ (node$r (selecuy$ A_a_fun_a_a_fun_fun_a_a_fun_fun$) (selecuz$ A_a_fun_a_a_fun_fun_a_a_fun_fun_tree$) (selecva$ A_a_fun_a_a_fun_fun_a_a_fun_fun_tree$)))
  (A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun_tree$ (node$s (selecvb$ A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun$) (selecvc$ A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun_tree$) (selecvd$ A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun_tree$)))
  (A_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ (node$t (selecve$ A_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (selecvf$ A_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$) (selecvg$ A_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)))
  (A_a_fun_a_a_fun_fun_a_a_a_fun_a_fun_fun_fun_tree$ (node$u (selecvh$ A_a_fun_a_a_fun_fun_a_a_a_fun_a_fun_fun_fun$) (selecvi$ A_a_fun_a_a_fun_fun_a_a_a_fun_a_fun_fun_fun_tree$) (selecvj$ A_a_fun_a_a_fun_fun_a_a_a_fun_a_fun_fun_fun_tree$)))
  (A_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_fun_fun_tree$ (node$v (selecvk$ A_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_fun_fun$) (selecvl$ A_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_fun_fun_tree$) (selecvm$ A_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_fun_fun_tree$)))
  (A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_a_fun_fun_fun_tree$ (node$w (selecvn$ A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_a_fun_fun_fun$) (selecvo$ A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_a_fun_fun_fun_tree$) (selecvp$ A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_a_fun_fun_fun_tree$)))
  (A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_a_a_fun_fun_fun_fun_tree$ (node$x (selecvq$ A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_a_a_fun_fun_fun_fun$) (selecvr$ A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_a_a_fun_fun_fun_fun_tree$) (selecvs$ A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_a_a_fun_fun_fun_fun_tree$)))
  (A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_tree$ (node$y (selecvt$ A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun$) (selecvu$ A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_tree$) (selecvv$ A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_tree$)))
  (A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_tree$ (node$z (selecvw$ A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun$) (selecvx$ A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_tree$) (selecvy$ A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_tree$)))
  (A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_fun_tree$ (node$aa (selecvz$ A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_fun$) (selecwa$ A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_fun_tree$) (selecwb$ A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_fun_tree$)))
  (A_a_a_fun_a_a_fun_fun_fun_tree$ (node$ab (selecwc$ A_a_a_fun_a_a_fun_fun_fun$) (selecwd$ A_a_a_fun_a_a_fun_fun_fun_tree$) (selecwe$ A_a_a_fun_a_a_fun_fun_fun_tree$)))
  (A_a_fun_a_a_a_fun_fun_fun_tree$ (node$ac (selecwf$ A_a_fun_a_a_a_fun_fun_fun$) (selecwg$ A_a_fun_a_a_a_fun_fun_fun_tree$) (selecwh$ A_a_fun_a_a_a_fun_fun_fun_tree$)))
  (A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_a_fun_fun_fun_fun_tree$ (node$ad (selecwi$ A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_a_fun_fun_fun_fun$) (selecwj$ A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_a_fun_fun_fun_fun_tree$) (selecwk$ A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_a_fun_fun_fun_fun_tree$)))
  (A_a_fun_a_a_a_fun_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun_tree$ (node$ae (selecwl$ A_a_fun_a_a_a_fun_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun$) (selecwm$ A_a_fun_a_a_a_fun_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun_tree$) (selecwn$ A_a_fun_a_a_a_fun_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun_tree$)))))
(declare-fun l$ () A_a_fun$)
(declare-fun r$ () A_a_fun$)
(declare-fun x$ () A$)
(declare-fun id$ () A_a_fun_a_a_fun_fun$)
(declare-fun uu$ () A_a_fun_a_a_fun_fun$)
(declare-fun id$a () A_a_fun$)
(declare-fun id$b () A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun uua$ () A_a_fun_a_a_fun_fun$)
(declare-fun uub$ (A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun uuc$ (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_fun$)
(declare-fun uud$ (A_a_fun$) A_a_fun_a_a_fun_fun_a_a_fun_fun$)
(declare-fun uue$ (A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun uuf$ (A$) A_a_fun_a_fun$)
(declare-fun uug$ (A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun uuh$ (A$) A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_fun_fun_fun$)
(declare-fun uui$ (A$) A_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun$)
(declare-fun uuj$ (A$) A_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun$)
(declare-fun uuk$ (A_a_fun$) A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun$)
(declare-fun uul$ (A_a_a_fun_fun$) A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun$)
(declare-fun uum$ (A$) A_a_a_fun_fun_a_a_fun_fun$)
(declare-fun uun$ (A_a_fun$) A_a_fun_a_fun_a_fun$)
(declare-fun uuo$ (A_a_a_fun_fun_a_a_fun_fun$) A_a_a_a_fun_fun_a_a_fun_fun_fun$)
(declare-fun uup$ (A_a_a_fun_fun$) A_a_a_a_fun_fun_fun$)
(declare-fun uuq$ (A_a_fun$) A_a_a_fun_fun_a_a_fun_fun$)
(declare-fun uur$ (A_a_fun_a_fun$) A_a_fun_a_a_fun_a_fun_fun$)
(declare-fun uus$ (A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun uut$ (A_a_fun_a_fun$) A_a_a_fun_a_fun_fun$)
(declare-fun uuu$ (A_a_a_fun_fun$) A_a_a_fun_fun_a_a_a_fun_fun_fun$)
(declare-fun uuv$ (A_a_fun$) A_a_a_fun_fun$)
(declare-fun uuw$ (A$) A_a_fun_a_fun$)
(declare-fun uux$ (A$) A_a_fun$)
(declare-fun uuy$ () A_a_fun_a_a_fun_fun$)
(declare-fun uuz$ () A_a_fun$)
(declare-fun comp$ (A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun comp$a (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_fun$)
(declare-fun comp$b (A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun tree_C$ () A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun fun_app$ (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun tree_C$a () A_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_C$b () A_a_fun_a_a_fun_fun_a_a_a_fun_a_fun_fun_fun_tree$)
(declare-fun tree_C$c () A_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$d () A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_a_fun_fun_fun_tree$)
(declare-fun tree_C$e () A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_a_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$f () A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$g () A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_fun_tree$)
(declare-fun tree_C$h () A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$i () A_a_fun_a_a_a_fun_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun_tree$)
(declare-fun tree_ap$ (A_a_fun_tree$ A_tree$) A_tree$)
(declare-fun fun_app$a (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_fun$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun fun_app$b (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$c (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$d (A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun_a_a_a_fun_fun_fun$) A_a_a_fun_fun$)
(declare-fun fun_app$e (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$) A_a_a_fun_fun$)
(declare-fun fun_app$f (A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun$ A_a_fun_a_a_fun_a_fun_fun$) A_a_fun_a_fun$)
(declare-fun fun_app$g (A_a_fun_a_a_fun_a_fun_fun$ A_a_fun$) A_a_fun_a_fun$)
(declare-fun fun_app$h (A_a_fun_a_a_fun_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun$)
(declare-fun fun_app$i (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun$) A$)
(declare-fun fun_app$j (A_a_fun_a_fun$ A_a_fun$) A$)
(declare-fun fun_app$k (A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_fun_fun_fun$ A_a_a_a_fun_fun_a_a_fun_fun_fun$) A_a_a_fun_fun_a_a_fun_fun$)
(declare-fun fun_app$l (A_a_a_a_fun_fun_a_a_fun_fun_fun$ A$) A_a_a_fun_fun_a_a_fun_fun$)
(declare-fun fun_app$m (A_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun$ A_a_a_fun_a_fun_fun$) A_a_fun_a_fun$)
(declare-fun fun_app$n (A_a_a_fun_a_fun_fun$ A$) A_a_fun_a_fun$)
(declare-fun fun_app$o (A_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun$ A_a_a_a_fun_fun_fun$) A_a_a_fun_fun$)
(declare-fun fun_app$p (A_a_a_a_fun_fun_fun$ A$) A_a_a_fun_fun$)
(declare-fun fun_app$q (A_a_a_fun_fun_a_a_fun_fun$ A_a_a_fun_fun$) A_a_fun$)
(declare-fun fun_app$r (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$s (A_a_fun$ A$) A$)
(declare-fun fun_app$t (A_a_fun_a_fun_a_a_fun_fun$ A_a_fun_a_fun$) A_a_fun$)
(declare-fun fun_app$u (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$) A_a_fun_a_fun$)
(declare-fun tree_ap$a (A_a_a_fun_fun_tree$ A_tree$) A_a_fun_tree$)
(declare-fun tree_ap$b (A_a_fun_a_fun_tree$ A_a_fun_tree$) A_tree$)
(declare-fun tree_ap$c (A_a_a_fun_a_fun_fun_tree$ A_tree$) A_a_fun_a_fun_tree$)
(declare-fun tree_ap$d (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$e (A_a_fun_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$) A_tree$)
(declare-fun tree_ap$f (A_a_fun_a_a_fun_a_fun_fun_tree$ A_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun tree_ap$g (A_a_fun_a_fun_a_a_fun_fun_tree$ A_a_fun_a_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$h (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun tree_ap$i (A_a_fun_a_fun_a_a_fun_a_fun_fun_tree$ A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun tree_ap$j (A_a_a_a_fun_fun_a_a_fun_fun_fun_tree$ A_tree$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun tree_ap$k (A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_fun_fun_fun_tree$ A_a_a_a_fun_fun_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun tree_ap$l (A_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun_tree$ A_a_a_fun_a_fun_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun tree_ap$m (A_a_a_a_fun_fun_fun_tree$ A_tree$) A_a_a_fun_fun_tree$)
(declare-fun tree_ap$n (A_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun tree_ap$o (A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun_tree$ A_a_fun_a_a_fun_a_fun_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun tree_ap$p (A_a_fun_a_a_fun_fun_a_a_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$q (A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun tree_ap$r (A_a_a_fun_fun_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$s (A_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_a_fun_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_ap$t (A_a_fun_a_a_fun_fun_a_a_a_fun_a_fun_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$) A_a_a_fun_a_fun_fun_tree$)
(declare-fun tree_ap$u (A_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_fun_fun_tree$ A_a_a_a_fun_fun_fun_tree$) A_a_a_a_fun_fun_fun_tree$)
(declare-fun tree_ap$v (A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_a_fun_fun_fun_tree$ A_a_fun_a_a_fun_a_fun_fun_tree$) A_a_fun_a_a_fun_a_fun_fun_tree$)
(declare-fun tree_ap$w (A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_a_a_fun_fun_fun_fun_tree$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) A_a_a_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_ap$x (A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_tree$ A_a_a_a_fun_fun_a_a_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun tree_ap$y (A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun tree_ap$z (A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_fun_tree$ A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_tree$) A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_tree$)
(declare-fun tree_ap$aa (A_a_fun_a_a_a_fun_fun_fun_tree$ A_a_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun tree_ap$ab (A_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_a_fun_fun_fun_fun_tree$ A_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun tree_ap$ac (A_a_a_fun_a_a_fun_fun_fun_tree$ A_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_ap$ad (A_a_fun_a_a_a_fun_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun_tree$ A_a_fun_a_a_a_fun_fun_fun_tree$) A_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_pure$ (A$) A_tree$)
(declare-fun tree_pure$a (A_a_fun$) A_a_fun_tree$)
(declare-fun tree_pure$b (A_a_a_fun_fun$) A_a_a_fun_fun_tree$)
(declare-fun tree_pure$c (A_a_fun_a_fun$) A_a_fun_a_fun_tree$)
(declare-fun tree_pure$d (A_a_a_fun_a_fun_fun$) A_a_a_fun_a_fun_fun_tree$)
(declare-fun tree_pure$e (A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_pure$f (A_a_fun_a_fun_a_fun$) A_a_fun_a_fun_a_fun_tree$)
(declare-fun tree_pure$g (A_a_fun_a_a_fun_a_fun_fun$) A_a_fun_a_a_fun_a_fun_fun_tree$)
(declare-fun tree_pure$h (A_a_fun_a_fun_a_a_fun_fun$) A_a_fun_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_pure$i (A_a_a_fun_fun_a_a_a_fun_fun_fun$) A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun tree_pure$j (A_a_fun_a_fun_a_a_fun_a_fun_fun$) A_a_fun_a_fun_a_a_fun_a_fun_fun_tree$)
(declare-fun tree_pure$k (A_a_a_fun_fun_a_a_fun_fun$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun tree_pure$l (A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_fun_fun_fun$) A_a_a_a_fun_fun_a_a_fun_fun_fun_a_a_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_pure$m (A_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun$) A_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun_tree$)
(declare-fun tree_pure$n (A_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun$) A_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun tree_pure$o (A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun$) A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_fun_fun_tree$)
(declare-fun tree_pure$p (A_a_fun_a_a_fun_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun tree_pure$q (A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun$) A_a_a_fun_fun_a_a_a_fun_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun tree_pure$r (A_a_a_a_fun_fun_a_a_fun_fun_fun$) A_a_a_a_fun_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_pure$s (A_a_a_a_fun_fun_fun$) A_a_a_a_fun_fun_fun_tree$)
(declare-fun unfold_tree$ (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun_tree$)
(declare-fun tree_recurse$ (A_a_fun$ A_a_fun$ A$) A_tree$)
(declare-fun unfold_tree$a (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_fun$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_fun$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun unfold_tree$b (A_a_fun_a_a_fun_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_tree$)
(declare-fun unfold_tree$c (A_a_fun_a_fun$ A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ A_a_fun$) A_tree$)
(declare-fun tree_recurse$a (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_recurse$b (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun_tree$)
(assert (! (forall ((?v0 A_a_fun$)) (! (= (fun_app$ uua$ ?v0) (fun_app$ (comp$ ?v0) r$)) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_a_fun$)) (! (= (fun_app$ uu$ ?v0) (fun_app$ (comp$ ?v0) l$)) :pattern ((fun_app$ uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$)) (! (= (fun_app$a (uuc$ ?v0) ?v1) (fun_app$a (comp$a ?v1) ?v0)) :pattern ((fun_app$a (uuc$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (! (= (fun_app$b (uue$ ?v0) ?v1) (fun_app$b (comp$b ?v1) ?v0)) :pattern ((fun_app$b (uue$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (! (= (fun_app$ (uug$ ?v0) ?v1) (fun_app$ (comp$ ?v1) ?v0)) :pattern ((fun_app$ (uug$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$)) (! (= (fun_app$c (uub$ ?v0) ?v1) (fun_app$b ?v1 ?v0)) :pattern ((fun_app$c (uub$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun_a_a_a_fun_fun_fun$)) (! (= (fun_app$d (uul$ ?v0) ?v1) (fun_app$e ?v1 ?v0)) :pattern ((fun_app$d (uul$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_a_a_fun_a_fun_fun$)) (! (= (fun_app$f (uuk$ ?v0) ?v1) (fun_app$g ?v1 ?v0)) :pattern ((fun_app$f (uuk$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (! (= (fun_app$h (uud$ ?v0) ?v1) (fun_app$ ?v1 ?v0)) :pattern ((fun_app$h (uud$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_a_fun$)) (! (= (fun_app$i (uun$ ?v0) ?v1) (fun_app$j ?v1 ?v0)) :pattern ((fun_app$i (uun$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_a_a_a_fun_fun_a_a_fun_fun_fun$)) (! (= (fun_app$k (uuh$ ?v0) ?v1) (fun_app$l ?v1 ?v0)) :pattern ((fun_app$k (uuh$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_a_a_fun_a_fun_fun$)) (! (= (fun_app$m (uui$ ?v0) ?v1) (fun_app$n ?v1 ?v0)) :pattern ((fun_app$m (uui$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_a_a_a_fun_fun_fun$)) (! (= (fun_app$o (uuj$ ?v0) ?v1) (fun_app$p ?v1 ?v0)) :pattern ((fun_app$o (uuj$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_a_a_fun_fun$)) (! (= (fun_app$q (uum$ ?v0) ?v1) (fun_app$r ?v1 ?v0)) :pattern ((fun_app$q (uum$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$)) (! (= (fun_app$j (uuf$ ?v0) ?v1) (fun_app$s ?v1 ?v0)) :pattern ((fun_app$j (uuf$ ?v0) ?v1)))) :named a14))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$) (?v1 A$)) (! (= (fun_app$l (uuo$ ?v0) ?v1) ?v0) :pattern ((fun_app$l (uuo$ ?v0) ?v1)))) :named a15))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$)) (! (= (fun_app$g (uur$ ?v0) ?v1) ?v0) :pattern ((fun_app$g (uur$ ?v0) ?v1)))) :named a16))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A$)) (! (= (fun_app$n (uut$ ?v0) ?v1) ?v0) :pattern ((fun_app$n (uut$ ?v0) ?v1)))) :named a17))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun$)) (! (= (fun_app$e (uuu$ ?v0) ?v1) ?v0) :pattern ((fun_app$e (uuu$ ?v0) ?v1)))) :named a18))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (! (= (fun_app$p (uup$ ?v0) ?v1) ?v0) :pattern ((fun_app$p (uup$ ?v0) ?v1)))) :named a19))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_a_fun_fun$)) (! (= (fun_app$q (uuq$ ?v0) ?v1) ?v0) :pattern ((fun_app$q (uuq$ ?v0) ?v1)))) :named a20))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (! (= (fun_app$ (uus$ ?v0) ?v1) ?v0) :pattern ((fun_app$ (uus$ ?v0) ?v1)))) :named a21))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (! (= (fun_app$r (uuv$ ?v0) ?v1) ?v0) :pattern ((fun_app$r (uuv$ ?v0) ?v1)))) :named a22))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$)) (! (= (fun_app$j (uuw$ ?v0) ?v1) ?v0) :pattern ((fun_app$j (uuw$ ?v0) ?v1)))) :named a23))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$s (uux$ ?v0) ?v1) ?v0) :pattern ((fun_app$s (uux$ ?v0) ?v1)))) :named a24))
(assert (! (forall ((?v0 A_a_fun$)) (! (= (fun_app$ uuy$ ?v0) ?v0) :pattern ((fun_app$ uuy$ ?v0)))) :named a25))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$s uuz$ ?v0) ?v0) :pattern ((fun_app$s uuz$ ?v0)))) :named a26))
(assert (! (not (= (tree_recurse$ l$ r$ x$) (tree_ap$ (unfold_tree$ id$ uu$ uua$ id$a) (tree_pure$ x$)))) :named a27))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (tree_ap$ (tree_pure$a ?v0) (tree_pure$ ?v1)) (tree_pure$ (fun_app$s ?v0 ?v1)))) :named a28))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (= (tree_ap$a (tree_pure$b ?v0) (tree_pure$ ?v1)) (tree_pure$a (fun_app$r ?v0 ?v1)))) :named a29))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$)) (= (tree_ap$b (tree_pure$c ?v0) (tree_pure$a ?v1)) (tree_pure$ (fun_app$j ?v0 ?v1)))) :named a30))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A$)) (= (tree_ap$c (tree_pure$d ?v0) (tree_pure$ ?v1)) (tree_pure$c (fun_app$n ?v0 ?v1)))) :named a31))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (= (tree_ap$d (tree_pure$e ?v0) (tree_pure$a ?v1)) (tree_pure$a (fun_app$ ?v0 ?v1)))) :named a32))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun$) (?v1 A_a_fun_a_fun$)) (= (tree_ap$e (tree_pure$f ?v0) (tree_pure$c ?v1)) (tree_pure$ (fun_app$i ?v0 ?v1)))) :named a33))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_fun_fun$) (?v1 A_a_fun$)) (= (tree_ap$f (tree_pure$g ?v0) (tree_pure$a ?v1)) (tree_pure$c (fun_app$g ?v0 ?v1)))) :named a34))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_fun$)) (= (tree_ap$g (tree_pure$h ?v0) (tree_pure$c ?v1)) (tree_pure$a (fun_app$t ?v0 ?v1)))) :named a35))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_a_fun_fun_fun$) (?v1 A_a_a_fun_fun$)) (= (tree_ap$h (tree_pure$i ?v0) (tree_pure$b ?v1)) (tree_pure$b (fun_app$e ?v0 ?v1)))) :named a36))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_a_fun_a_fun_fun$) (?v1 A_a_fun_a_fun$)) (= (tree_ap$i (tree_pure$j ?v0) (tree_pure$c ?v1)) (tree_pure$c (fun_app$u ?v0 ?v1)))) :named a37))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (?v2 A_a_fun_a_a_fun_fun$)) (= (tree_recurse$a ?v0 ?v1 ?v2) (unfold_tree$a (uub$ ?v2) (uuc$ ?v0) (uuc$ ?v1) id$b))) :named a38))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (= (tree_recurse$b ?v0 ?v1 ?v2) (unfold_tree$b (uud$ ?v2) (uue$ ?v0) (uue$ ?v1) id$))) :named a39))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (= (tree_recurse$ ?v0 ?v1 ?v2) (unfold_tree$c (uuf$ ?v2) (uug$ ?v0) (uug$ ?v1) id$a))) :named a40))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$) (?v1 A_a_a_fun_fun_a_a_fun_fun$)) (= (= (tree_pure$k ?v0) (tree_pure$k ?v1)) (= ?v0 ?v1))) :named a41))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_fun_fun$) (?v1 A_a_fun_a_a_fun_a_fun_fun$)) (= (= (tree_pure$g ?v0) (tree_pure$g ?v1)) (= ?v0 ?v1))) :named a42))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (= (= (tree_pure$e ?v0) (tree_pure$e ?v1)) (= ?v0 ?v1))) :named a43))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A_a_a_fun_a_fun_fun$)) (= (= (tree_pure$d ?v0) (tree_pure$d ?v1)) (= ?v0 ?v1))) :named a44))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun$)) (= (= (tree_pure$b ?v0) (tree_pure$b ?v1)) (= ?v0 ?v1))) :named a45))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (= (= (tree_pure$a ?v0) (tree_pure$a ?v1)) (= ?v0 ?v1))) :named a46))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun$)) (= (= (tree_pure$c ?v0) (tree_pure$c ?v1)) (= ?v0 ?v1))) :named a47))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (tree_pure$ ?v0) (tree_pure$ ?v1)) (= ?v0 ?v1))) :named a48))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_a_a_fun_fun_fun_tree$) (?v1 A$)) (= (tree_ap$j ?v0 (tree_pure$ ?v1)) (tree_ap$k (tree_pure$l (uuh$ ?v1)) ?v0))) :named a49))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun_tree$) (?v1 A$)) (= (tree_ap$c ?v0 (tree_pure$ ?v1)) (tree_ap$l (tree_pure$m (uui$ ?v1)) ?v0))) :named a50))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun_tree$) (?v1 A$)) (= (tree_ap$m ?v0 (tree_pure$ ?v1)) (tree_ap$n (tree_pure$n (uuj$ ?v1)) ?v0))) :named a51))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_fun_fun_tree$) (?v1 A_a_fun$)) (= (tree_ap$f ?v0 (tree_pure$a ?v1)) (tree_ap$o (tree_pure$o (uuk$ ?v1)) ?v0))) :named a52))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$) (?v1 A_a_fun$)) (= (tree_ap$d ?v0 (tree_pure$a ?v1)) (tree_ap$p (tree_pure$p (uud$ ?v1)) ?v0))) :named a53))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) (?v1 A_a_a_fun_fun$)) (= (tree_ap$h ?v0 (tree_pure$b ?v1)) (tree_ap$q (tree_pure$q (uul$ ?v1)) ?v0))) :named a54))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A$)) (= (tree_ap$a ?v0 (tree_pure$ ?v1)) (tree_ap$r (tree_pure$k (uum$ ?v1)) ?v0))) :named a55))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$) (?v1 A_a_fun$)) (= (tree_ap$b ?v0 (tree_pure$a ?v1)) (tree_ap$e (tree_pure$f (uun$ ?v1)) ?v0))) :named a56))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A$)) (= (tree_ap$ ?v0 (tree_pure$ ?v1)) (tree_ap$b (tree_pure$c (uuf$ ?v1)) ?v0))) :named a57))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$) (?v1 A_tree$)) (= (tree_ap$j (tree_pure$r (uuo$ ?v0)) ?v1) (tree_pure$k ?v0))) :named a58))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (tree_ap$m (tree_pure$s (uup$ ?v0)) ?v1) (tree_pure$b ?v0))) :named a59))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_a_fun_fun_tree$)) (= (tree_ap$r (tree_pure$k (uuq$ ?v0)) ?v1) (tree_pure$a ?v0))) :named a60))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (tree_ap$f (tree_pure$g (uur$ ?v0)) ?v1) (tree_pure$c ?v0))) :named a61))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$)) (= (tree_ap$d (tree_pure$e (uus$ ?v0)) ?v1) (tree_pure$a ?v0))) :named a62))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_tree$)) (= (tree_ap$c (tree_pure$d (uut$ ?v0)) ?v1) (tree_pure$c ?v0))) :named a63))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun_tree$)) (= (tree_ap$h (tree_pure$i (uuu$ ?v0)) ?v1) (tree_pure$b ?v0))) :named a64))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (tree_ap$a (tree_pure$b (uuv$ ?v0)) ?v1) (tree_pure$a ?v0))) :named a65))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun_tree$)) (= (tree_ap$b (tree_pure$c (uuw$ ?v0)) ?v1) (tree_pure$ ?v0))) :named a66))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (= (tree_ap$ (tree_pure$a (uux$ ?v0)) ?v1) (tree_pure$ ?v0))) :named a67))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_a_a_fun_fun_fun_tree$) (?v1 A_a_a_a_fun_fun_a_a_fun_fun_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$j ?v0 (tree_pure$ ?v2)) (tree_ap$j ?v1 (tree_pure$ ?v2)))) (= ?v0 ?v1))) :named a68))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun_tree$) (?v1 A_a_a_fun_a_fun_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$c ?v0 (tree_pure$ ?v2)) (tree_ap$c ?v1 (tree_pure$ ?v2)))) (= ?v0 ?v1))) :named a69))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun_tree$) (?v1 A_a_a_a_fun_fun_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$m ?v0 (tree_pure$ ?v2)) (tree_ap$m ?v1 (tree_pure$ ?v2)))) (= ?v0 ?v1))) :named a70))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_fun_fun_tree$) (?v1 A_a_fun_a_a_fun_a_fun_fun_tree$)) (=> (forall ((?v2 A_a_fun$)) (= (tree_ap$f ?v0 (tree_pure$a ?v2)) (tree_ap$f ?v1 (tree_pure$a ?v2)))) (= ?v0 ?v1))) :named a71))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (=> (forall ((?v2 A_a_fun$)) (= (tree_ap$d ?v0 (tree_pure$a ?v2)) (tree_ap$d ?v1 (tree_pure$a ?v2)))) (= ?v0 ?v1))) :named a72))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) (?v1 A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)) (=> (forall ((?v2 A_a_a_fun_fun$)) (= (tree_ap$h ?v0 (tree_pure$b ?v2)) (tree_ap$h ?v1 (tree_pure$b ?v2)))) (= ?v0 ?v1))) :named a73))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_a_a_fun_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$a ?v0 (tree_pure$ ?v2)) (tree_ap$a ?v1 (tree_pure$ ?v2)))) (= ?v0 ?v1))) :named a74))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$) (?v1 A_a_fun_a_fun_tree$)) (=> (forall ((?v2 A_a_fun$)) (= (tree_ap$b ?v0 (tree_pure$a ?v2)) (tree_ap$b ?v1 (tree_pure$a ?v2)))) (= ?v0 ?v1))) :named a75))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$ ?v0 (tree_pure$ ?v2)) (tree_ap$ ?v1 (tree_pure$ ?v2)))) (= ?v0 ?v1))) :named a76))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_fun_fun_tree$) (?v1 A_a_fun_a_a_fun_a_fun_fun_tree$)) (=> (forall ((?v2 A_a_fun_tree$)) (= (tree_ap$f ?v0 ?v2) (tree_ap$f ?v1 ?v2))) (= ?v0 ?v1))) :named a77))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (=> (forall ((?v2 A_a_fun_tree$)) (= (tree_ap$d ?v0 ?v2) (tree_ap$d ?v1 ?v2))) (= ?v0 ?v1))) :named a78))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_a_a_fun_fun_fun_tree$) (?v1 A_a_a_a_fun_fun_a_a_fun_fun_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$j ?v0 ?v2) (tree_ap$j ?v1 ?v2))) (= ?v0 ?v1))) :named a79))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun_tree$) (?v1 A_a_a_fun_a_fun_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$c ?v0 ?v2) (tree_ap$c ?v1 ?v2))) (= ?v0 ?v1))) :named a80))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun_tree$) (?v1 A_a_a_a_fun_fun_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$m ?v0 ?v2) (tree_ap$m ?v1 ?v2))) (= ?v0 ?v1))) :named a81))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$) (?v1 A_a_fun_a_fun_tree$)) (=> (forall ((?v2 A_a_fun_tree$)) (= (tree_ap$b ?v0 ?v2) (tree_ap$b ?v1 ?v2))) (= ?v0 ?v1))) :named a82))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_a_a_fun_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$a ?v0 ?v2) (tree_ap$a ?v1 ?v2))) (= ?v0 ?v1))) :named a83))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) (?v1 A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)) (=> (forall ((?v2 A_a_a_fun_fun_tree$)) (= (tree_ap$h ?v0 ?v2) (tree_ap$h ?v1 ?v2))) (= ?v0 ?v1))) :named a84))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$ ?v0 ?v2) (tree_ap$ ?v1 ?v2))) (= ?v0 ?v1))) :named a85))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (= (fun_app$b (comp$b ?v0) id$) ?v0)) :named a86))
(assert (! (forall ((?v0 A_a_fun$)) (= (fun_app$ (comp$ ?v0) id$a) ?v0)) :named a87))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (= (fun_app$b (comp$b id$) ?v0) ?v0)) :named a88))
(assert (! (forall ((?v0 A_a_fun$)) (= (fun_app$ (comp$ id$a) ?v0) ?v0)) :named a89))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (= (fun_app$b (comp$b id$) ?v0) ?v0)) :named a90))
(assert (! (forall ((?v0 A_a_fun$)) (= (fun_app$ (comp$ id$a) ?v0) ?v0)) :named a91))
(assert (! (= (comp$b id$) id$b) :named a92))
(assert (! (= (comp$ id$a) id$) :named a93))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (! (= (fun_app$b id$b ?v0) ?v0) :pattern ((fun_app$b id$b ?v0)))) :named a94))
(assert (! (forall ((?v0 A_a_fun$)) (! (= (fun_app$ id$ ?v0) ?v0) :pattern ((fun_app$ id$ ?v0)))) :named a95))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$s id$a ?v0) ?v0) :pattern ((fun_app$s id$a ?v0)))) :named a96))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (! (= (fun_app$ (fun_app$b (comp$b ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$b (comp$b ?v0) ?v1) ?v2)))) :named a97))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$s (fun_app$ (comp$ ?v0) ?v1) ?v2) (fun_app$s ?v0 (fun_app$s ?v1 ?v2))) :pattern ((fun_app$s (fun_app$ (comp$ ?v0) ?v1) ?v2)))) :named a98))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun_a_a_fun_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$b (comp$b ?v0) ?v1) (fun_app$b (comp$b id$) ?v2)) (= (fun_app$ ?v0 (fun_app$ ?v1 ?v3)) (fun_app$ ?v2 ?v3)))) :named a99))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A$)) (=> (= (fun_app$ (comp$ ?v0) ?v1) (fun_app$ (comp$ id$a) ?v2)) (= (fun_app$s ?v0 (fun_app$s ?v1 ?v3)) (fun_app$s ?v2 ?v3)))) :named a100))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$) (?v2 A_a_fun$)) (=> (= (fun_app$b (comp$b ?v0) ?v1) id$) (= (fun_app$ ?v0 (fun_app$ ?v1 ?v2)) ?v2))) :named a101))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (=> (= (fun_app$ (comp$ ?v0) ?v1) id$a) (= (fun_app$s ?v0 (fun_app$s ?v1 ?v2)) ?v2))) :named a102))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_tree$) (?v2 A_tree$)) (= (tree_ap$ (tree_ap$a (tree_ap$h tree_C$ ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$a ?v0 ?v2) ?v1))) :named a103))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun_tree$) (?v1 A_a_fun_tree$) (?v2 A_tree$)) (= (tree_ap$ (tree_ap$d (tree_ap$s tree_C$a ?v0) ?v1) ?v2) (tree_ap$b (tree_ap$c ?v0 ?v2) ?v1))) :named a104))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$) (?v1 A_tree$) (?v2 A_a_fun_tree$)) (= (tree_ap$b (tree_ap$c (tree_ap$t tree_C$b ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$d ?v0 ?v2) ?v1))) :named a105))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun_tree$) (?v1 A_tree$) (?v2 A_tree$)) (= (tree_ap$a (tree_ap$m (tree_ap$u tree_C$c ?v0) ?v1) ?v2) (tree_ap$a (tree_ap$m ?v0 ?v2) ?v1))) :named a106))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_fun_fun_tree$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (= (tree_ap$b (tree_ap$f (tree_ap$v tree_C$d ?v0) ?v1) ?v2) (tree_ap$b (tree_ap$f ?v0 ?v2) ?v1))) :named a107))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) (?v1 A_tree$) (?v2 A_a_a_fun_fun_tree$)) (= (tree_ap$r (tree_ap$j (tree_ap$w tree_C$e ?v0) ?v1) ?v2) (tree_ap$a (tree_ap$h ?v0 ?v2) ?v1))) :named a108))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_a_a_fun_fun_fun_tree$) (?v1 A_a_a_fun_fun_tree$) (?v2 A_tree$)) (= (tree_ap$a (tree_ap$h (tree_ap$x tree_C$f ?v0) ?v1) ?v2) (tree_ap$r (tree_ap$j ?v0 ?v2) ?v1))) :named a109))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_a_fun_fun_a_a_a_fun_fun_fun_fun_tree$) (?v1 A_a_a_fun_fun_tree$) (?v2 A_a_a_fun_fun_tree$)) (= (tree_ap$h (tree_ap$y (tree_ap$z tree_C$g ?v0) ?v1) ?v2) (tree_ap$h (tree_ap$y ?v0 ?v2) ?v1))) :named a110))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun_tree$) (?v1 A_a_fun_tree$) (?v2 A_tree$)) (= (tree_ap$a (tree_ap$aa (tree_ap$ab tree_C$h ?v0) ?v1) ?v2) (tree_ap$d (tree_ap$ac ?v0 ?v2) ?v1))) :named a111))
(assert (! (forall ((?v0 A_a_fun_a_a_a_fun_fun_fun_tree$) (?v1 A_tree$) (?v2 A_a_fun_tree$)) (= (tree_ap$d (tree_ap$ac (tree_ap$ad tree_C$i ?v0) ?v1) ?v2) (tree_ap$a (tree_ap$aa ?v0 ?v2) ?v1))) :named a112))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (= (fun_app$b (comp$b uuy$) ?v0) ?v0)) :named a113))
(assert (! (forall ((?v0 A_a_fun$)) (= (fun_app$ (comp$ uuz$) ?v0) ?v0)) :named a114))
(check-sat)
;(get-unsat-core)
