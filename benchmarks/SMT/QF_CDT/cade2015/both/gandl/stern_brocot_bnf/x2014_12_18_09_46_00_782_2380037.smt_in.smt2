; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 628
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-datatypes () ((Nat_nat_prod$ (pair$ (fst$ Nat$) (snd$ Nat$)))))
(declare-fun p$ () Bool)
(declare-fun x$ () Nat_nat_prod$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun zero$ () Nat$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$a (Nat_nat_fun$ Nat$) Nat$)
(assert (! (not p$) :named a0))
(assert (! (forall ((?v0 Nat$)) (=> (= x$ (pair$ zero$ ?v0)) p$)) :named a1))
(assert (! (forall ((?v0 Nat$)) (=> (= x$ (pair$ ?v0 zero$)) p$)) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (= ?v0 ?v1) (= x$ (pair$ (suc$ ?v0) (suc$ ?v1)))) p$)) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (= x$ (pair$ (suc$ ?v0) (suc$ ?v1)))) p$)) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$ (less$ ?v0) ?v1) (= x$ (pair$ (suc$ ?v1) (suc$ ?v0)))) p$)) :named a5))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (less$ ?v0) (suc$ zero$)) (= ?v0 zero$)) :pattern ((less$ ?v0)))) :named a6))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (less$ zero$) (suc$ ?v0))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (less$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$ (less$ ?v0) ?v1)) :pattern ((fun_app$ (less$ (suc$ ?v0)) (suc$ ?v1))))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ (suc$ ?v0)) (suc$ ?v1)))) :named a9))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (less$ ?v0) (suc$ ?v0))) :named a10))
(assert (! (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$ (less$ zero$) ?v0))) :named a11))
(assert (! (forall ((?v0 Nat$)) (= (not (fun_app$ (less$ zero$) ?v0)) (= ?v0 zero$))) :named a12))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (less$ ?v0) zero$) false) :pattern ((less$ ?v0)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (less$ ?v0) (suc$ ?v1)) (or (= ?v0 zero$) (exists ((?v2 Nat$)) (and (= ?v0 (suc$ ?v2)) (fun_app$ (less$ ?v2) ?v1)))))) :named a14))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (less$ zero$) ?v0) (exists ((?v1 Nat$)) (= ?v0 (suc$ ?v1))))) :named a15))
(assert (! (forall ((?v0 Nat$)) (=> (fun_app$ (less$ zero$) ?v0) (exists ((?v1 Nat$)) (= ?v0 (suc$ ?v1))))) :named a16))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (less$ (fun_app$a ?v0 ?v3)) (fun_app$a ?v0 (suc$ ?v3)))) (fun_app$ (less$ ?v1) ?v2)) (fun_app$ (less$ (fun_app$a ?v0 ?v1)) (fun_app$a ?v0 ?v2)))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a19))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a20))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a21))
(check-sat)
;(get-unsat-core)
