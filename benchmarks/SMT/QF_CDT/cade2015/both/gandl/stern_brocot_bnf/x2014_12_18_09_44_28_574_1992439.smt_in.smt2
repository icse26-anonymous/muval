; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 402
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun$ 0)
(declare-sort A_b_a_fun_fun$ 0)
(declare-sort A_b_fun_b_fun$ 0)
(declare-sort B_a_a_fun_fun$ 0)
(declare-sort B_a_fun_a_fun$ 0)
(declare-sort B_a_fun_b_fun$ 0)
(declare-sort B_b_a_fun_fun$ 0)
(declare-sort B_b_b_fun_fun$ 0)
(declare-sort B_b_fun_b_fun$ 0)
(declare-sort A_b_a_fun_a_fun_fun$ 0)
(declare-sort B_a_b_a_fun_fun_fun$ 0)
(declare-sort B_a_fun_a_fun_a_fun$ 0)
(declare-sort B_a_fun_b_a_fun_fun$ 0)
(declare-sort B_b_a_fun_a_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_a_fun$ 0)
(declare-sort B_b_a_fun_fun_b_fun$ 0)
(declare-sort B_b_b_a_fun_fun_fun$ 0)
(declare-sort B_b_fun_b_a_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_b_a_a_fun_fun_fun$ 0)
(declare-sort A_b_a_fun_fun_b_a_fun_fun$ 0)
(declare-sort B_a_a_fun_fun_a_a_fun_fun$ 0)
(declare-sort B_a_b_a_fun_a_fun_fun_fun$ 0)
(declare-sort B_a_fun_a_b_a_fun_fun_fun$ 0)
(declare-sort B_a_fun_b_b_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_a_fun_a_fun_fun$ 0)
(declare-sort B_b_a_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_a_fun_fun$ 0)
(declare-sort B_b_b_a_fun_fun_a_fun_fun$ 0)
(declare-sort B_b_fun_b_b_a_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0)
(declare-sort B_a_a_fun_fun_a_b_a_fun_fun_fun$ 0)
(declare-sort B_a_fun_b_b_a_fun_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_a_fun_fun_b_a_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_b_a_fun_fun_fun$ 0)
(declare-sort B_b_b_a_fun_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_b_b_fun_fun_b_b_b_fun_fun_fun$ 0)
(declare-sort A_b_a_fun_fun_b_a_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_a_b_a_fun_fun_fun_a_b_a_fun_fun_fun$ 0)
(declare-sort B_a_fun_a_fun_b_b_a_fun_a_fun_fun_fun$ 0)
(declare-sort B_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_a_fun_fun_b_a_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_b_b_a_fun_fun_fun_b_b_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_fun_b_b_a_fun_fun_a_fun_fun$ 0)
(declare-sort B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_a_fun_fun_b_b_b_a_fun_fun_a_fun_fun_fun$ 0)
(declare-sort B_b_b_a_fun_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_a_b_a_fun_a_fun_fun_fun_b_a_fun_b_b_a_fun_a_fun_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_a_fun_a_fun_fun_b_b_a_fun_a_fun_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_fun_b_b_a_fun_fun_a_fun_fun_fun$ 0)
(declare-sort B_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_b_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_b_a_fun_fun_fun_b_b_a_fun_fun_b_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun$ 0)
(declare-codatatypes () ((A_tree$ (node$ (root$ A$) (left$ A_tree$) (right$ A_tree$)))
  (B_a_fun_tree$ (node$a (select$ B_a_fun$) (selecta$ B_a_fun_tree$) (selectb$ B_a_fun_tree$)))
  (B_tree$ (node$b (root$a B$) (left$a B_tree$) (right$a B_tree$)))
  (B_b_a_fun_fun_tree$ (node$c (selectc$ B_b_a_fun_fun$) (selectd$ B_b_a_fun_fun_tree$) (selecte$ B_b_a_fun_fun_tree$)))
  (B_b_a_fun_fun_b_a_fun_fun_tree$ (node$d (selectf$ B_b_a_fun_fun_b_a_fun_fun$) (selectg$ B_b_a_fun_fun_b_a_fun_fun_tree$) (selecth$ B_b_a_fun_fun_b_a_fun_fun_tree$)))
  (B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ (node$e (selecti$ B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$) (selectj$ B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$) (selectk$ B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)))
  (B_b_fun_tree$ (node$f (selectl$ B_b_fun$) (selectm$ B_b_fun_tree$) (selectn$ B_b_fun_tree$)))
  (A_b_fun_tree$ (node$g (selecto$ A_b_fun$) (selectp$ A_b_fun_tree$) (selectq$ A_b_fun_tree$)))
  (A_a_fun_tree$ (node$h (selectr$ A_a_fun$) (selects$ A_a_fun_tree$) (selectt$ A_a_fun_tree$)))
  (B_a_fun_b_fun_tree$ (node$i (selectu$ B_a_fun_b_fun$) (selectv$ B_a_fun_b_fun_tree$) (selectw$ B_a_fun_b_fun_tree$)))
  (B_a_fun_a_fun_tree$ (node$j (selectx$ B_a_fun_a_fun$) (selecty$ B_a_fun_a_fun_tree$) (selectz$ B_a_fun_a_fun_tree$)))
  (B_a_a_fun_fun_tree$ (node$k (selecua$ B_a_a_fun_fun$) (selecub$ B_a_a_fun_fun_tree$) (selecuc$ B_a_a_fun_fun_tree$)))
  (B_b_a_fun_fun_b_a_fun_fun_b_a_fun_fun_tree$ (node$l (selecud$ B_b_a_fun_fun_b_a_fun_fun_b_a_fun_fun$) (selecue$ B_b_a_fun_fun_b_a_fun_fun_b_a_fun_fun_tree$) (selecuf$ B_b_a_fun_fun_b_a_fun_fun_b_a_fun_fun_tree$)))
  (B_b_fun_b_fun_tree$ (node$m (selecug$ B_b_fun_b_fun$) (selecuh$ B_b_fun_b_fun_tree$) (selecui$ B_b_fun_b_fun_tree$)))
  (A_a_fun_a_fun_tree$ (node$n (selecuj$ A_a_fun_a_fun$) (selecuk$ A_a_fun_a_fun_tree$) (selecul$ A_a_fun_a_fun_tree$)))
  (B_a_a_fun_fun_a_a_fun_fun_tree$ (node$o (selecum$ B_a_a_fun_fun_a_a_fun_fun$) (selecun$ B_a_a_fun_fun_a_a_fun_fun_tree$) (selecuo$ B_a_a_fun_fun_a_a_fun_fun_tree$)))
  (A_b_a_fun_fun_tree$ (node$p (selecup$ A_b_a_fun_fun$) (selecuq$ A_b_a_fun_fun_tree$) (selecur$ A_b_a_fun_fun_tree$)))
  (A_b_a_fun_fun_b_a_fun_fun_tree$ (node$q (selecus$ A_b_a_fun_fun_b_a_fun_fun$) (selecut$ A_b_a_fun_fun_b_a_fun_fun_tree$) (selecuu$ A_b_a_fun_fun_b_a_fun_fun_tree$)))
  (B_a_b_a_fun_fun_fun_tree$ (node$r (selecuv$ B_a_b_a_fun_fun_fun$) (selecuw$ B_a_b_a_fun_fun_fun_tree$) (selecux$ B_a_b_a_fun_fun_fun_tree$)))
  (B_a_b_a_fun_fun_fun_a_b_a_fun_fun_fun_tree$ (node$s (selecuy$ B_a_b_a_fun_fun_fun_a_b_a_fun_fun_fun$) (selecuz$ B_a_b_a_fun_fun_fun_a_b_a_fun_fun_fun_tree$) (selecva$ B_a_b_a_fun_fun_fun_a_b_a_fun_fun_fun_tree$)))
  (A_b_fun_b_fun_tree$ (node$t (selecvb$ A_b_fun_b_fun$) (selecvc$ A_b_fun_b_fun_tree$) (selecvd$ A_b_fun_b_fun_tree$)))
  (A_a_a_fun_fun_tree$ (node$u (selecve$ A_a_a_fun_fun$) (selecvf$ A_a_a_fun_fun_tree$) (selecvg$ A_a_a_fun_fun_tree$)))
  (A_a_a_fun_fun_a_a_fun_fun_tree$ (node$v (selecvh$ A_a_a_fun_fun_a_a_fun_fun$) (selecvi$ A_a_a_fun_fun_a_a_fun_fun_tree$) (selecvj$ A_a_a_fun_fun_a_a_fun_fun_tree$)))
  (B_b_a_fun_a_fun_fun_tree$ (node$w (selecvk$ B_b_a_fun_a_fun_fun$) (selecvl$ B_b_a_fun_a_fun_fun_tree$) (selecvm$ B_b_a_fun_a_fun_fun_tree$)))
  (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ (node$x (selecvn$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$) (selecvo$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$) (selecvp$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)))
  (B_b_a_fun_fun_a_fun_tree$ (node$y (selecvq$ B_b_a_fun_fun_a_fun$) (selecvr$ B_b_a_fun_fun_a_fun_tree$) (selecvs$ B_b_a_fun_fun_a_fun_tree$)))
  (B_b_a_fun_fun_b_fun_b_b_a_fun_fun_a_fun_fun_tree$ (node$z (selecvt$ B_b_a_fun_fun_b_fun_b_b_a_fun_fun_a_fun_fun$) (selecvu$ B_b_a_fun_fun_b_fun_b_b_a_fun_fun_a_fun_fun_tree$) (selecvv$ B_b_a_fun_fun_b_fun_b_b_a_fun_fun_a_fun_fun_tree$)))
  (B_b_a_fun_fun_b_fun_tree$ (node$aa (selecvw$ B_b_a_fun_fun_b_fun$) (selecvx$ B_b_a_fun_fun_b_fun_tree$) (selecvy$ B_b_a_fun_fun_b_fun_tree$)))
  (B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_fun_b_b_a_fun_fun_a_fun_fun_fun_tree$ (node$ab (selecvz$ B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_fun_b_b_a_fun_fun_a_fun_fun_fun$) (selecwa$ B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_fun_b_b_a_fun_fun_a_fun_fun_fun_tree$) (selecwb$ B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_fun_b_b_a_fun_fun_a_fun_fun_fun_tree$)))
  (B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$ (node$ac (selecwc$ B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun$) (selecwd$ B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$) (selecwe$ B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$)))
  (B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ (node$ad (selecwf$ B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun$) (selecwg$ B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$) (selecwh$ B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)))
  (B_a_fun_b_a_fun_fun_tree$ (node$ae (selecwi$ B_a_fun_b_a_fun_fun$) (selecwj$ B_a_fun_b_a_fun_fun_tree$) (selecwk$ B_a_fun_b_a_fun_fun_tree$)))
  (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ (node$af (selecwl$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$) (selecwm$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$) (selecwn$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)))
  (B_b_fun_b_a_fun_fun_tree$ (node$ag (selecwo$ B_b_fun_b_a_fun_fun$) (selecwp$ B_b_fun_b_a_fun_fun_tree$) (selecwq$ B_b_fun_b_a_fun_fun_tree$)))
  (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ (node$ah (selecwr$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$) (selecws$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$) (selecwt$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)))
  (B_b_fun_b_b_a_fun_fun_fun_tree$ (node$ai (selecwu$ B_b_fun_b_b_a_fun_fun_fun$) (selecwv$ B_b_fun_b_b_a_fun_fun_fun_tree$) (selecww$ B_b_fun_b_b_a_fun_fun_fun_tree$)))
  (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ (node$aj (selecwx$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$) (selecwy$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$) (selecwz$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)))
  (B_b_b_a_fun_fun_fun_tree$ (node$ak (selecxa$ B_b_b_a_fun_fun_fun$) (selecxb$ B_b_b_a_fun_fun_fun_tree$) (selecxc$ B_b_b_a_fun_fun_fun_tree$)))
  (B_a_fun_b_b_a_fun_fun_fun_tree$ (node$al (selecxd$ B_a_fun_b_b_a_fun_fun_fun$) (selecxe$ B_a_fun_b_b_a_fun_fun_fun_tree$) (selecxf$ B_a_fun_b_b_a_fun_fun_fun_tree$)))
  (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ (node$am (selecxg$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$) (selecxh$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$) (selecxi$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)))
  (B_a_fun_b_b_a_fun_a_fun_fun_fun_tree$ (node$an (selecxj$ B_a_fun_b_b_a_fun_a_fun_fun_fun$) (selecxk$ B_a_fun_b_b_a_fun_a_fun_fun_fun_tree$) (selecxl$ B_a_fun_b_b_a_fun_a_fun_fun_fun_tree$)))
  (B_a_b_a_fun_a_fun_fun_fun_b_a_fun_b_b_a_fun_a_fun_fun_fun_fun_tree$ (node$ao (selecxm$ B_a_b_a_fun_a_fun_fun_fun_b_a_fun_b_b_a_fun_a_fun_fun_fun_fun$) (selecxn$ B_a_b_a_fun_a_fun_fun_fun_b_a_fun_b_b_a_fun_a_fun_fun_fun_fun_tree$) (selecxo$ B_a_b_a_fun_a_fun_fun_fun_b_a_fun_b_b_a_fun_a_fun_fun_fun_fun_tree$)))
  (B_a_b_a_fun_a_fun_fun_fun_tree$ (node$ap (selecxp$ B_a_b_a_fun_a_fun_fun_fun$) (selecxq$ B_a_b_a_fun_a_fun_fun_fun_tree$) (selecxr$ B_a_b_a_fun_a_fun_fun_fun_tree$)))
  (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ (node$aq (selecxs$ B_b_a_fun_fun_b_b_a_fun_fun_fun$) (selecxt$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$) (selecxu$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)))
  (B_b_a_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_fun_fun_tree$ (node$ar (selecxv$ B_b_a_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_fun_fun$) (selecxw$ B_b_a_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_fun_fun_tree$) (selecxx$ B_b_a_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_fun_fun_tree$)))
  (B_b_a_fun_b_a_fun_fun_fun_tree$ (node$as (selecxy$ B_b_a_fun_b_a_fun_fun_fun$) (selecxz$ B_b_a_fun_b_a_fun_fun_fun_tree$) (selecya$ B_b_a_fun_b_a_fun_fun_fun_tree$)))
  (B_b_a_fun_a_fun_fun_b_a_fun_fun_tree$ (node$at (selecyb$ B_b_a_fun_a_fun_fun_b_a_fun_fun$) (selecyc$ B_b_a_fun_a_fun_fun_b_a_fun_fun_tree$) (selecyd$ B_b_a_fun_a_fun_fun_b_a_fun_fun_tree$)))
  (B_b_a_fun_a_fun_a_fun_fun_b_b_a_fun_a_fun_fun_b_a_fun_fun_fun_tree$ (node$au (selecye$ B_b_a_fun_a_fun_a_fun_fun_b_b_a_fun_a_fun_fun_b_a_fun_fun_fun$) (selecyf$ B_b_a_fun_a_fun_a_fun_fun_b_b_a_fun_a_fun_fun_b_a_fun_fun_fun_tree$) (selecyg$ B_b_a_fun_a_fun_a_fun_fun_b_b_a_fun_a_fun_fun_b_a_fun_fun_fun_tree$)))
  (B_b_a_fun_a_fun_a_fun_fun_tree$ (node$av (selecyh$ B_b_a_fun_a_fun_a_fun_fun$) (selecyi$ B_b_a_fun_a_fun_a_fun_fun_tree$) (selecyj$ B_b_a_fun_a_fun_a_fun_fun_tree$)))
  (B_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ (node$aw (selecyk$ B_b_b_a_fun_fun_b_a_fun_fun_fun$) (selecyl$ B_b_b_a_fun_fun_b_a_fun_fun_fun_tree$) (selecym$ B_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)))
  (B_b_b_a_fun_fun_fun_b_b_a_fun_fun_fun_tree$ (node$ax (selecyn$ B_b_b_a_fun_fun_fun_b_b_a_fun_fun_fun$) (selecyo$ B_b_b_a_fun_fun_fun_b_b_a_fun_fun_fun_tree$) (selecyp$ B_b_b_a_fun_fun_fun_b_b_a_fun_fun_fun_tree$)))
  (B_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_b_b_a_fun_fun_fun_fun_tree$ (node$ay (selecyq$ B_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_b_b_a_fun_fun_fun_fun$) (selecyr$ B_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_b_b_a_fun_fun_fun_fun_tree$) (selecys$ B_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_b_b_a_fun_fun_fun_fun_tree$)))
  (B_b_a_fun_fun_b_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ (node$az (selecyt$ B_b_a_fun_fun_b_fun_b_b_a_fun_fun_b_a_fun_fun_fun$) (selecyu$ B_b_a_fun_fun_b_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$) (selecyv$ B_b_a_fun_fun_b_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)))
  (B_b_a_fun_fun_b_b_a_fun_fun_fun_b_b_a_fun_fun_b_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$ (node$ba (selecyw$ B_b_a_fun_fun_b_b_a_fun_fun_fun_b_b_a_fun_fun_b_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun$) (selecyx$ B_b_a_fun_fun_b_b_a_fun_fun_fun_b_b_a_fun_fun_b_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$) (selecyy$ B_b_a_fun_fun_b_b_a_fun_fun_fun_b_b_a_fun_fun_b_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$)))
  (B_a_fun_a_fun_b_b_a_fun_a_fun_fun_fun_tree$ (node$bb (selecyz$ B_a_fun_a_fun_b_b_a_fun_a_fun_fun_fun$) (selecza$ B_a_fun_a_fun_b_b_a_fun_a_fun_fun_fun_tree$) (seleczb$ B_a_fun_a_fun_b_b_a_fun_a_fun_fun_fun_tree$)))
  (B_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ (node$bc (seleczc$ B_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun$) (seleczd$ B_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$) (selecze$ B_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)))
  (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ (node$bd (seleczf$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$) (seleczg$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$) (seleczh$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)))
  (B_b_b_a_fun_fun_a_fun_fun_tree$ (node$be (seleczi$ B_b_b_a_fun_fun_a_fun_fun$) (seleczj$ B_b_b_a_fun_fun_a_fun_fun_tree$) (seleczk$ B_b_b_a_fun_fun_a_fun_fun_tree$)))
  (B_b_a_fun_fun_b_a_fun_fun_b_b_b_a_fun_fun_a_fun_fun_fun_tree$ (node$bf (seleczl$ B_b_a_fun_fun_b_a_fun_fun_b_b_b_a_fun_fun_a_fun_fun_fun$) (seleczm$ B_b_a_fun_fun_b_a_fun_fun_b_b_b_a_fun_fun_a_fun_fun_fun_tree$) (seleczn$ B_b_a_fun_fun_b_a_fun_fun_b_b_b_a_fun_fun_a_fun_fun_fun_tree$)))
  (B_b_b_a_fun_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ (node$bg (seleczo$ B_b_b_a_fun_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$) (seleczp$ B_b_b_a_fun_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$) (seleczq$ B_b_b_a_fun_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)))
  (B_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_fun_fun_tree$ (node$bh (seleczr$ B_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_fun_fun$) (seleczs$ B_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_fun_fun_tree$) (seleczt$ B_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_fun_fun_tree$)))
  (B_b_a_fun_fun_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$ (node$bi (seleczu$ B_b_a_fun_fun_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_b_a_fun_fun_fun_fun$) (seleczv$ B_b_a_fun_fun_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$) (seleczw$ B_b_a_fun_fun_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$)))
  (B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ (node$bj (seleczx$ B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$) (seleczy$ B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$) (seleczz$ B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)))
  (B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$ (node$bk (seledaa$ B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun$) (seledab$ B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$) (seledac$ B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$)))
  (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ (node$bl (seledad$ B_a_a_fun_fun_a_b_a_fun_fun_fun$) (seledae$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$) (seledaf$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)))
  (B_b_b_fun_fun_tree$ (node$bm (seledag$ B_b_b_fun_fun$) (seledah$ B_b_b_fun_fun_tree$) (seledai$ B_b_b_fun_fun_tree$)))
  (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ (node$bn (seledaj$ B_b_b_fun_fun_b_b_b_fun_fun_fun$) (seledak$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$) (seledal$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)))
  (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ (node$bo (seledam$ A_a_a_fun_fun_a_a_a_fun_fun_fun$) (seledan$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$) (seledao$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)))
  (A_b_a_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ (node$bp (seledap$ A_b_a_fun_fun_b_a_b_a_fun_fun_fun_fun$) (seledaq$ A_b_a_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$) (seledar$ A_b_a_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)))
  (A_a_fun_b_a_a_fun_fun_fun_tree$ (node$bq (seledas$ A_a_fun_b_a_a_fun_fun_fun$) (seledat$ A_a_fun_b_a_a_fun_fun_fun_tree$) (seledau$ A_a_fun_b_a_a_fun_fun_fun_tree$)))
  (B_a_fun_a_b_a_fun_fun_fun_tree$ (node$br (seledav$ B_a_fun_a_b_a_fun_fun_fun$) (seledaw$ B_a_fun_a_b_a_fun_fun_fun_tree$) (seledax$ B_a_fun_a_b_a_fun_fun_fun_tree$)))))
(declare-fun f$ () B_b_a_fun_fun_tree$)
(declare-fun x$ () B_tree$)
(declare-fun id$ () B_b_fun$)
(declare-fun uu$ () B_b_a_fun_fun_b_a_fun_fun$)
(declare-fun id$a () A_a_fun$)
(declare-fun uua$ (B$) B_a_fun_a_fun$)
(declare-fun uub$ (B$) B_b_a_fun_fun_b_a_fun_fun$)
(declare-fun uuc$ (B_b_a_fun_fun$) B_b_a_fun_fun_b_a_fun_fun_b_a_fun_fun$)
(declare-fun uud$ (B$) B_b_fun_b_fun$)
(declare-fun uue$ (A$) A_a_fun_a_fun$)
(declare-fun uuf$ (B$) B_a_a_fun_fun_a_a_fun_fun$)
(declare-fun uug$ (A$) A_b_a_fun_fun_b_a_fun_fun$)
(declare-fun uuh$ (B$) B_a_b_a_fun_fun_fun_a_b_a_fun_fun_fun$)
(declare-fun uui$ (A$) A_b_fun_b_fun$)
(declare-fun uuj$ (A$) A_a_a_fun_fun_a_a_fun_fun$)
(declare-fun uuk$ () A_b_a_fun_fun$)
(declare-fun uul$ () B_a_fun_b_b_a_fun_fun_fun$)
(declare-fun uum$ () B_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun$)
(declare-fun uun$ (B$) B_b_fun$)
(declare-fun uuo$ (A$) A_a_fun$)
(declare-fun uup$ (A_a_fun$) B_a_a_fun_fun$)
(declare-fun uuq$ (B_a_fun$) A_b_a_fun_fun$)
(declare-fun uur$ (A_b_a_fun_fun$) B_a_b_a_fun_fun_fun$)
(declare-fun uus$ (B_a_fun_a_fun$) B_b_a_fun_a_fun_fun$)
(declare-fun uut$ (B$) A_b_fun$)
(declare-fun uuu$ (B_b_a_fun_a_fun_fun$) B_b_a_fun_fun_b_a_fun_fun$)
(declare-fun uuv$ (B_b_a_fun_fun_b_a_fun_fun$ B_b_a_fun_fun_b_fun$) B_b_a_fun_fun_a_fun$)
(declare-fun uuw$ (B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun$) B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$)
(declare-fun uux$ (B_a_a_fun_fun$) B_a_fun_b_a_fun_fun$)
(declare-fun uuy$ (B_b_a_fun_fun$) B_b_fun_b_a_fun_fun$)
(declare-fun uuz$ (B_b_b_a_fun_fun_fun$) B_b_fun_b_b_a_fun_fun_fun$)
(declare-fun uva$ (B_a_b_a_fun_fun_fun$) B_a_fun_b_b_a_fun_fun_fun$)
(declare-fun uvb$ (B_a_b_a_fun_a_fun_fun_fun$) B_a_fun_b_b_a_fun_a_fun_fun_fun$)
(declare-fun uvc$ (B_b_a_fun_b_a_fun_fun_fun$) B_b_a_fun_fun_b_b_a_fun_fun_fun$)
(declare-fun uvd$ (B_b_a_fun_a_fun_a_fun_fun$) B_b_a_fun_a_fun_fun_b_a_fun_fun$)
(declare-fun tree_C$ () B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_K$ () A_a_a_fun_fun_tree$)
(declare-fun tree_S$ () B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun fun_app$ (B_a_fun$ B$) A$)
(declare-fun tree_C$a () B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$b () B_b_a_fun_fun_b_a_fun_fun_b_b_b_a_fun_fun_a_fun_fun_fun_tree$)
(declare-fun tree_C$c () B_b_b_a_fun_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_C$d () B_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$e () B_b_a_fun_fun_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$f () B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_C$g () B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun tree_C$h () B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$)
(declare-fun tree_C$i () A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$)
(declare-fun tree_K$a () B_a_fun_a_fun_b_b_a_fun_a_fun_fun_fun_tree$)
(declare-fun tree_K$b () B_a_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_K$c () A_b_a_fun_fun_tree$)
(declare-fun tree_K$d () B_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_K$e () A_b_a_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_K$f () A_a_fun_b_a_a_fun_fun_fun_tree$)
(declare-fun tree_K$g () B_b_b_fun_fun_tree$)
(declare-fun tree_K$h () B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun tree_S$a () B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_fun_b_b_a_fun_fun_a_fun_fun_fun_tree$)
(declare-fun tree_S$b () B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_S$c () B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_S$d () B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_S$e () B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_S$f () B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_S$g () B_a_b_a_fun_a_fun_fun_fun_b_a_fun_b_b_a_fun_a_fun_fun_fun_fun_tree$)
(declare-fun tree_S$h () B_b_a_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_S$i () B_b_a_fun_a_fun_a_fun_fun_b_b_a_fun_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_S$j () B_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_b_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_S$k () B_b_a_fun_fun_b_b_a_fun_fun_fun_b_b_a_fun_fun_b_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$)
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$) A_tree$)
(declare-fun fun_app$a (B_b_a_fun_fun_b_a_fun_fun$ B_b_a_fun_fun$) B_a_fun$)
(declare-fun fun_app$b (B_b_a_fun_fun$ B$) B_a_fun$)
(declare-fun fun_app$c (B_b_a_fun_fun_b_a_fun_fun_b_a_fun_fun$ B_b_a_fun_fun_b_a_fun_fun$) B_a_fun$)
(declare-fun fun_app$d (B_a_b_a_fun_fun_fun_a_b_a_fun_fun_fun$ B_a_b_a_fun_fun_fun$) A_b_a_fun_fun$)
(declare-fun fun_app$e (B_a_b_a_fun_fun_fun$ B$) A_b_a_fun_fun$)
(declare-fun fun_app$f (B_a_a_fun_fun_a_a_fun_fun$ B_a_a_fun_fun$) A_a_fun$)
(declare-fun fun_app$g (B_a_a_fun_fun$ B$) A_a_fun$)
(declare-fun fun_app$h (B_b_fun_b_fun$ B_b_fun$) B$)
(declare-fun fun_app$i (B_b_fun$ B$) B$)
(declare-fun fun_app$j (B_a_fun_a_fun$ B_a_fun$) A$)
(declare-fun fun_app$k (A_b_a_fun_fun_b_a_fun_fun$ A_b_a_fun_fun$) B_a_fun$)
(declare-fun fun_app$l (A_b_a_fun_fun$ A$) B_a_fun$)
(declare-fun fun_app$m (A_a_a_fun_fun_a_a_fun_fun$ A_a_a_fun_fun$) A_a_fun$)
(declare-fun fun_app$n (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$o (A_b_fun_b_fun$ A_b_fun$) B$)
(declare-fun fun_app$p (A_b_fun$ A$) B$)
(declare-fun fun_app$q (A_a_fun_a_fun$ A_a_fun$) A$)
(declare-fun fun_app$r (A_a_fun$ A$) A$)
(declare-fun fun_app$s (B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ B_b_a_fun_fun_b_a_fun_fun$) B_b_a_fun_fun_b_a_fun_fun$)
(declare-fun fun_app$t (B_a_fun_b_a_fun_fun$ B_a_fun$) B_a_fun$)
(declare-fun fun_app$u (B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ B_b_a_fun_fun$) B_a_fun_b_a_fun_fun$)
(declare-fun fun_app$v (B_b_a_fun_fun_a_fun$ B_b_a_fun_fun$) A$)
(declare-fun fun_app$w (B_b_a_fun_fun_b_fun$ B_b_a_fun_fun$) B$)
(declare-fun fun_app$x (B_b_a_fun_a_fun_fun_b_a_fun_fun$ B_b_a_fun_a_fun_fun$) B_a_fun$)
(declare-fun fun_app$y (B_a_fun_a_fun_a_fun$ B_a_fun_a_fun$) A$)
(declare-fun fun_app$z (B_b_a_fun_a_fun_a_fun_fun$ B$) B_a_fun_a_fun_a_fun$)
(declare-fun map_tree$ (B_a_b_a_fun_fun_fun$ B_tree$) A_b_a_fun_fun_tree$)
(declare-fun tree_ap$a (B_b_a_fun_fun_tree$ B_tree$) B_a_fun_tree$)
(declare-fun tree_ap$b (B_b_a_fun_fun_b_a_fun_fun_tree$ B_b_a_fun_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$c (B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_b_a_fun_fun_tree$) B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$d (B_b_fun_tree$ B_tree$) B_tree$)
(declare-fun tree_ap$e (A_b_fun_tree$ A_tree$) B_tree$)
(declare-fun tree_ap$f (A_a_fun_tree$ A_tree$) A_tree$)
(declare-fun tree_ap$g (B_a_fun_b_fun_tree$ B_a_fun_tree$) B_tree$)
(declare-fun tree_ap$h (B_a_fun_a_fun_tree$ B_a_fun_tree$) A_tree$)
(declare-fun tree_ap$i (B_a_a_fun_fun_tree$ B_tree$) A_a_fun_tree$)
(declare-fun tree_ap$j (B_b_a_fun_fun_b_a_fun_fun_b_a_fun_fun_tree$ B_b_a_fun_fun_b_a_fun_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$k (B_b_fun_b_fun_tree$ B_b_fun_tree$) B_tree$)
(declare-fun tree_ap$l (A_a_fun_a_fun_tree$ A_a_fun_tree$) A_tree$)
(declare-fun tree_ap$m (B_a_a_fun_fun_a_a_fun_fun_tree$ B_a_a_fun_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$n (A_b_a_fun_fun_tree$ A_tree$) B_a_fun_tree$)
(declare-fun tree_ap$o (A_b_a_fun_fun_b_a_fun_fun_tree$ A_b_a_fun_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$p (B_a_b_a_fun_fun_fun_tree$ B_tree$) A_b_a_fun_fun_tree$)
(declare-fun tree_ap$q (B_a_b_a_fun_fun_fun_a_b_a_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$) A_b_a_fun_fun_tree$)
(declare-fun tree_ap$r (A_b_fun_b_fun_tree$ A_b_fun_tree$) B_tree$)
(declare-fun tree_ap$s (A_a_a_fun_fun_tree$ A_tree$) A_a_fun_tree$)
(declare-fun tree_ap$t (A_a_a_fun_fun_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$u (B_b_a_fun_a_fun_fun_tree$ B_tree$) B_a_fun_a_fun_tree$)
(declare-fun tree_ap$v (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_a_fun_fun_tree$) B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$w (B_b_a_fun_fun_b_fun_b_b_a_fun_fun_a_fun_fun_tree$ B_b_a_fun_fun_b_fun_tree$) B_b_a_fun_fun_a_fun_tree$)
(declare-fun tree_ap$x (B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_fun_b_b_a_fun_fun_a_fun_fun_fun_tree$ B_b_a_fun_fun_b_a_fun_fun_tree$) B_b_a_fun_fun_b_fun_b_b_a_fun_fun_a_fun_fun_tree$)
(declare-fun tree_ap$y (B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$ B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$) B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$z (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$) B_a_fun_tree$)
(declare-fun fun_app$aa (B_b_a_fun_a_fun_fun$ B$) B_a_fun_a_fun$)
(declare-fun fun_app$ab (B_b_a_fun_fun_b_b_a_fun_fun_fun$ B_b_a_fun_fun$) B_b_a_fun_fun$)
(declare-fun fun_app$ac (B_b_a_fun_b_a_fun_fun_fun$ B$) B_a_fun_b_a_fun_fun$)
(declare-fun fun_app$ad (B_b_fun_b_b_a_fun_fun_fun$ B_b_fun$) B_b_a_fun_fun$)
(declare-fun fun_app$ae (B_b_b_a_fun_fun_fun$ B$) B_b_a_fun_fun$)
(declare-fun fun_app$af (B_b_fun_b_a_fun_fun$ B_b_fun$) B_a_fun$)
(declare-fun fun_app$ag (B_a_fun_b_b_a_fun_a_fun_fun_fun$ B_a_fun$) B_b_a_fun_a_fun_fun$)
(declare-fun fun_app$ah (A_b_a_fun_a_fun_fun$ A$) B_a_fun_a_fun$)
(declare-fun fun_app$ai (B_a_b_a_fun_a_fun_fun_fun$ B$) A_b_a_fun_a_fun_fun$)
(declare-fun fun_app$aj (B_a_fun_b_b_a_fun_fun_fun$ B_a_fun$) B_b_a_fun_fun$)
(declare-fun fun_app$ak (B_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ B_a_fun$) B_b_a_fun_fun_b_a_fun_fun$)
(declare-fun fun_app$al (B_a_fun_b_fun$ B_a_fun$) B$)
(declare-fun map_tree$a (B_a_a_fun_fun$ B_tree$) A_a_fun_tree$)
(declare-fun map_tree$b (B_b_fun$ B_tree$) B_tree$)
(declare-fun map_tree$c (A_b_a_fun_fun$ A_tree$) B_a_fun_tree$)
(declare-fun map_tree$d (A_a_fun$ A_tree$) A_tree$)
(declare-fun map_tree$e (B_b_a_fun_a_fun_fun$ B_tree$) B_a_fun_a_fun_tree$)
(declare-fun map_tree$f (B_a_fun$ B_tree$) A_tree$)
(declare-fun map_tree$g (B_b_a_fun_fun$ B_tree$) B_a_fun_tree$)
(declare-fun map_tree$h (B_b_a_fun_fun_b_a_fun_fun$ B_b_a_fun_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$aa (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$) B_a_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$ab (B_b_fun_b_a_fun_fun_tree$ B_b_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$ac (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$) B_b_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$ad (B_b_fun_b_b_a_fun_fun_fun_tree$ B_b_fun_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_ap$ae (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$) B_b_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$af (B_a_fun_b_b_a_fun_fun_fun_tree$ B_a_fun_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_ap$ag (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$) B_a_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$ah (B_a_fun_b_b_a_fun_a_fun_fun_fun_tree$ B_a_fun_tree$) B_b_a_fun_a_fun_fun_tree$)
(declare-fun tree_ap$ai (B_a_b_a_fun_a_fun_fun_fun_b_a_fun_b_b_a_fun_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_a_fun_fun_fun_tree$) B_a_fun_b_b_a_fun_a_fun_fun_fun_tree$)
(declare-fun tree_ap$aj (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_ap$ak (B_b_a_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_fun_fun_tree$ B_b_a_fun_b_a_fun_fun_fun_tree$) B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$al (B_b_a_fun_a_fun_fun_b_a_fun_fun_tree$ B_b_a_fun_a_fun_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$am (B_b_a_fun_a_fun_a_fun_fun_b_b_a_fun_a_fun_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_a_fun_a_fun_fun_tree$) B_b_a_fun_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$an (B_b_b_a_fun_fun_fun_tree$ B_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_ap$ao (B_b_a_fun_fun_a_fun_tree$ B_b_a_fun_fun_tree$) A_tree$)
(declare-fun tree_ap$ap (B_b_a_fun_fun_b_fun_tree$ B_b_a_fun_fun_tree$) B_tree$)
(declare-fun tree_ap$aq (B_b_a_fun_b_a_fun_fun_fun_tree$ B_tree$) B_a_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$ar (B_b_b_a_fun_fun_fun_b_b_a_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$) B_b_a_fun_fun_tree$)
(declare-fun tree_ap$as (B_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_b_a_fun_fun_fun_tree$) B_b_b_a_fun_fun_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$at (B_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_tree$) B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$au (B_b_a_fun_fun_b_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_b_fun_tree$) B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$av (B_b_a_fun_fun_b_b_a_fun_fun_fun_b_b_a_fun_fun_b_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$) B_b_a_fun_fun_b_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$aw (B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$) B_a_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$ax (B_a_fun_a_fun_b_b_a_fun_a_fun_fun_fun_tree$ B_a_fun_a_fun_tree$) B_b_a_fun_a_fun_fun_tree$)
(declare-fun tree_ap$ay (B_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_a_fun_tree$) B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$az (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$) B_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$ba (B_b_b_a_fun_fun_a_fun_fun_tree$ B_tree$) B_b_a_fun_fun_a_fun_tree$)
(declare-fun tree_ap$bb (B_b_a_fun_fun_b_a_fun_fun_b_b_b_a_fun_fun_a_fun_fun_fun_tree$ B_b_a_fun_fun_b_a_fun_fun_tree$) B_b_b_a_fun_fun_a_fun_fun_tree$)
(declare-fun tree_ap$bc (B_b_b_a_fun_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_b_b_a_fun_fun_a_fun_fun_tree$) B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$bd (B_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_b_a_fun_fun_fun_tree$) B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$be (B_b_a_fun_fun_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$) B_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$bf (B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$) B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$bg (B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_b_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_fun_tree$ B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$) B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$bh (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$) A_b_a_fun_fun_tree$)
(declare-fun tree_ap$bi (B_b_b_fun_fun_tree$ B_tree$) B_b_fun_tree$)
(declare-fun tree_ap$bj (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$) B_b_b_fun_fun_tree$)
(declare-fun tree_ap$bk (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun tree_ap$bl (A_b_a_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ A_b_a_fun_fun_tree$) B_a_b_a_fun_fun_fun_tree$)
(declare-fun tree_ap$bm (A_a_fun_b_a_a_fun_fun_fun_tree$ A_a_fun_tree$) B_a_a_fun_fun_tree$)
(declare-fun tree_ap$bn (B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_tree$) A_b_a_fun_fun_tree$)
(declare-fun tree_pure$ (B_b_a_fun_fun_b_a_fun_fun$) B_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_pure$a (B_a_fun$) B_a_fun_tree$)
(declare-fun tree_pure$b (B$) B_tree$)
(declare-fun tree_pure$c (A$) A_tree$)
(declare-fun tree_pure$d (B_b_a_fun_fun$) B_b_a_fun_fun_tree$)
(declare-fun tree_pure$e (B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$) B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_pure$f (B_b_fun$) B_b_fun_tree$)
(declare-fun tree_pure$g (A_b_fun$) A_b_fun_tree$)
(declare-fun tree_pure$h (A_a_fun$) A_a_fun_tree$)
(declare-fun tree_pure$i (B_a_fun_b_fun$) B_a_fun_b_fun_tree$)
(declare-fun tree_pure$j (B_a_fun_a_fun$) B_a_fun_a_fun_tree$)
(declare-fun tree_pure$k (B_a_a_fun_fun$) B_a_a_fun_fun_tree$)
(declare-fun tree_pure$l (B_b_a_fun_fun_b_a_fun_fun_b_a_fun_fun$) B_b_a_fun_fun_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_pure$m (B_b_fun_b_fun$) B_b_fun_b_fun_tree$)
(declare-fun tree_pure$n (A_a_fun_a_fun$) A_a_fun_a_fun_tree$)
(declare-fun tree_pure$o (B_a_a_fun_fun_a_a_fun_fun$) B_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun tree_pure$p (A_b_a_fun_fun_b_a_fun_fun$) A_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_pure$q (B_a_b_a_fun_fun_fun_a_b_a_fun_fun_fun$) B_a_b_a_fun_fun_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun tree_pure$r (A_b_fun_b_fun$) A_b_fun_b_fun_tree$)
(declare-fun tree_pure$s (A_a_a_fun_fun_a_a_fun_fun$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun tree_pure$t (A_b_a_fun_fun$) A_b_a_fun_fun_tree$)
(declare-fun tree_pure$u (B_a_b_a_fun_fun_fun$) B_a_b_a_fun_fun_fun_tree$)
(declare-fun tree_pure$v (B_b_a_fun_a_fun_fun$) B_b_a_fun_a_fun_fun_tree$)
(declare-fun tree_pure$w (B_b_a_fun_fun_a_fun$) B_b_a_fun_fun_a_fun_tree$)
(declare-fun tree_pure$x (B_b_a_fun_fun_b_fun$) B_b_a_fun_fun_b_fun_tree$)
(declare-fun tree_pure$y (B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun$) B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_pure$z (B_b_b_a_fun_fun_fun$) B_b_b_a_fun_fun_fun_tree$)
(declare-fun tree_pure$aa (B_a_b_a_fun_a_fun_fun_fun$) B_a_b_a_fun_a_fun_fun_fun_tree$)
(declare-fun tree_pure$ab (B_b_a_fun_b_a_fun_fun_fun$) B_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_pure$ac (B_b_a_fun_a_fun_a_fun_fun$) B_b_a_fun_a_fun_a_fun_fun_tree$)
(declare-fun tree_pure$ad (B_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun$) B_a_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_pure$ae (B_a_fun_b_b_a_fun_fun_fun$) B_a_fun_b_b_a_fun_fun_fun_tree$)
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B$)) (! (= (fun_app$ (fun_app$a uu$ ?v0) ?v1) (fun_app$ (fun_app$b ?v0 ?v1) ?v1)) :pattern ((fun_app$ (fun_app$a uu$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B_b_a_fun_fun_b_a_fun_fun$)) (! (= (fun_app$c (uuc$ ?v0) ?v1) (fun_app$a ?v1 ?v0)) :pattern ((fun_app$c (uuc$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 B$) (?v1 B_b_a_fun_fun$)) (! (= (fun_app$a (uub$ ?v0) ?v1) (fun_app$b ?v1 ?v0)) :pattern ((fun_app$a (uub$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 B$) (?v1 B_a_b_a_fun_fun_fun$)) (! (= (fun_app$d (uuh$ ?v0) ?v1) (fun_app$e ?v1 ?v0)) :pattern ((fun_app$d (uuh$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 B$) (?v1 B_a_a_fun_fun$)) (! (= (fun_app$f (uuf$ ?v0) ?v1) (fun_app$g ?v1 ?v0)) :pattern ((fun_app$f (uuf$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 B$) (?v1 B_b_fun$)) (! (= (fun_app$h (uud$ ?v0) ?v1) (fun_app$i ?v1 ?v0)) :pattern ((fun_app$h (uud$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 B$) (?v1 B_a_fun$)) (! (= (fun_app$j (uua$ ?v0) ?v1) (fun_app$ ?v1 ?v0)) :pattern ((fun_app$j (uua$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_b_a_fun_fun$)) (! (= (fun_app$k (uug$ ?v0) ?v1) (fun_app$l ?v1 ?v0)) :pattern ((fun_app$k (uug$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_a_a_fun_fun$)) (! (= (fun_app$m (uuj$ ?v0) ?v1) (fun_app$n ?v1 ?v0)) :pattern ((fun_app$m (uuj$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_b_fun$)) (! (= (fun_app$o (uui$ ?v0) ?v1) (fun_app$p ?v1 ?v0)) :pattern ((fun_app$o (uui$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$)) (! (= (fun_app$q (uue$ ?v0) ?v1) (fun_app$r ?v1 ?v0)) :pattern ((fun_app$q (uue$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun$) (?v1 B_b_a_fun_fun_b_a_fun_fun$) (?v2 B_b_a_fun_fun$)) (! (= (fun_app$a (fun_app$s (uuw$ ?v0) ?v1) ?v2) (fun_app$t (fun_app$u ?v0 ?v2) (fun_app$a ?v1 ?v2))) :pattern ((fun_app$a (fun_app$s (uuw$ ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_a_fun_fun$) (?v1 B_b_a_fun_fun_b_fun$) (?v2 B_b_a_fun_fun$)) (! (= (fun_app$v (uuv$ ?v0 ?v1) ?v2) (fun_app$ (fun_app$a ?v0 ?v2) (fun_app$w ?v1 ?v2))) :pattern ((fun_app$v (uuv$ ?v0 ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_a_fun_fun$) (?v1 B_b_a_fun_a_fun_fun$) (?v2 B$)) (! (= (fun_app$ (fun_app$x (uvd$ ?v0) ?v1) ?v2) (fun_app$y (fun_app$z ?v0 ?v2) (fun_app$aa ?v1 ?v2))) :pattern ((fun_app$ (fun_app$x (uvd$ ?v0) ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 B_b_a_fun_b_a_fun_fun_fun$) (?v1 B_b_a_fun_fun$) (?v2 B$)) (! (= (fun_app$b (fun_app$ab (uvc$ ?v0) ?v1) ?v2) (fun_app$t (fun_app$ac ?v0 ?v2) (fun_app$b ?v1 ?v2))) :pattern ((fun_app$b (fun_app$ab (uvc$ ?v0) ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun$) (?v1 B_b_a_fun_fun$) (?v2 B$)) (! (= (fun_app$ (fun_app$a (uuu$ ?v0) ?v1) ?v2) (fun_app$j (fun_app$aa ?v0 ?v2) (fun_app$b ?v1 ?v2))) :pattern ((fun_app$ (fun_app$a (uuu$ ?v0) ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$b (fun_app$ad (uuz$ ?v0) ?v1) ?v2) (fun_app$b (fun_app$ae ?v0 ?v2) (fun_app$i ?v1 ?v2))) :pattern ((fun_app$b (fun_app$ad (uuz$ ?v0) ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$ (fun_app$af (uuy$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$b ?v0 ?v2) (fun_app$i ?v1 ?v2))) :pattern ((fun_app$ (fun_app$af (uuy$ ?v0) ?v1) ?v2)))) :named a17))
(assert (! (forall ((?v0 B_a_b_a_fun_a_fun_fun_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$aa (fun_app$ag (uvb$ ?v0) ?v1) ?v2) (fun_app$ah (fun_app$ai ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$aa (fun_app$ag (uvb$ ?v0) ?v1) ?v2)))) :named a18))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$b (fun_app$aj (uva$ ?v0) ?v1) ?v2) (fun_app$l (fun_app$e ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$b (fun_app$aj (uva$ ?v0) ?v1) ?v2)))) :named a19))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$ (fun_app$t (uux$ ?v0) ?v1) ?v2) (fun_app$r (fun_app$g ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$t (uux$ ?v0) ?v1) ?v2)))) :named a20))
(assert (! (forall ((?v0 B_a_fun_a_fun$) (?v1 B$)) (! (= (fun_app$aa (uus$ ?v0) ?v1) ?v0) :pattern ((fun_app$aa (uus$ ?v0) ?v1)))) :named a21))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_a_fun_fun$)) (! (= (fun_app$a (fun_app$ak uum$ ?v0) ?v1) ?v0) :pattern ((fun_app$a (fun_app$ak uum$ ?v0) ?v1)))) :named a22))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B$)) (! (= (fun_app$b (fun_app$aj uul$ ?v0) ?v1) ?v0) :pattern ((fun_app$b (fun_app$aj uul$ ?v0) ?v1)))) :named a23))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A$)) (! (= (fun_app$l (uuq$ ?v0) ?v1) ?v0) :pattern ((fun_app$l (uuq$ ?v0) ?v1)))) :named a24))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 B$)) (! (= (fun_app$e (uur$ ?v0) ?v1) ?v0) :pattern ((fun_app$e (uur$ ?v0) ?v1)))) :named a25))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B$)) (! (= (fun_app$g (uup$ ?v0) ?v1) ?v0) :pattern ((fun_app$g (uup$ ?v0) ?v1)))) :named a26))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$i (uun$ ?v0) ?v1) ?v0) :pattern ((fun_app$i (uun$ ?v0) ?v1)))) :named a27))
(assert (! (forall ((?v0 B$) (?v1 A$)) (! (= (fun_app$p (uut$ ?v0) ?v1) ?v0) :pattern ((fun_app$p (uut$ ?v0) ?v1)))) :named a28))
(assert (! (forall ((?v0 A$) (?v1 B$)) (! (= (fun_app$ (fun_app$l uuk$ ?v0) ?v1) ?v0) :pattern ((fun_app$ (fun_app$l uuk$ ?v0) ?v1)))) :named a29))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$r (uuo$ ?v0) ?v1) ?v0) :pattern ((fun_app$r (uuo$ ?v0) ?v1)))) :named a30))
(assert (! (not (= (tree_ap$ (tree_ap$a f$ x$) x$) (tree_ap$ (tree_ap$b (tree_pure$ uu$) f$) x$))) :named a31))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B$)) (= (tree_ap$ (tree_pure$a ?v0) (tree_pure$b ?v1)) (tree_pure$c (fun_app$ ?v0 ?v1)))) :named a32))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B$)) (= (tree_ap$a (tree_pure$d ?v0) (tree_pure$b ?v1)) (tree_pure$a (fun_app$b ?v0 ?v1)))) :named a33))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_a_fun_fun$) (?v1 B_b_a_fun_fun$)) (= (tree_ap$b (tree_pure$ ?v0) (tree_pure$d ?v1)) (tree_pure$a (fun_app$a ?v0 ?v1)))) :named a34))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$) (?v1 B_b_a_fun_fun_b_a_fun_fun$)) (= (tree_ap$c (tree_pure$e ?v0) (tree_pure$ ?v1)) (tree_pure$ (fun_app$s ?v0 ?v1)))) :named a35))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (= (tree_ap$d (tree_pure$f ?v0) (tree_pure$b ?v1)) (tree_pure$b (fun_app$i ?v0 ?v1)))) :named a36))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A$)) (= (tree_ap$e (tree_pure$g ?v0) (tree_pure$c ?v1)) (tree_pure$b (fun_app$p ?v0 ?v1)))) :named a37))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (tree_ap$f (tree_pure$h ?v0) (tree_pure$c ?v1)) (tree_pure$c (fun_app$r ?v0 ?v1)))) :named a38))
(assert (! (forall ((?v0 B_a_fun_b_fun$) (?v1 B_a_fun$)) (= (tree_ap$g (tree_pure$i ?v0) (tree_pure$a ?v1)) (tree_pure$b (fun_app$al ?v0 ?v1)))) :named a39))
(assert (! (forall ((?v0 B_a_fun_a_fun$) (?v1 B_a_fun$)) (= (tree_ap$h (tree_pure$j ?v0) (tree_pure$a ?v1)) (tree_pure$c (fun_app$j ?v0 ?v1)))) :named a40))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B$)) (= (tree_ap$i (tree_pure$k ?v0) (tree_pure$b ?v1)) (tree_pure$h (fun_app$g ?v0 ?v1)))) :named a41))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B$)) (= (tree_ap$ ?v0 (tree_pure$b ?v1)) (tree_ap$h (tree_pure$j (uua$ ?v1)) ?v0))) :named a42))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B$)) (= (tree_ap$a ?v0 (tree_pure$b ?v1)) (tree_ap$b (tree_pure$ (uub$ ?v1)) ?v0))) :named a43))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_a_fun_fun_tree$) (?v1 B_b_a_fun_fun$)) (= (tree_ap$b ?v0 (tree_pure$d ?v1)) (tree_ap$j (tree_pure$l (uuc$ ?v1)) ?v0))) :named a44))
(assert (! (forall ((?v0 B_b_fun_tree$) (?v1 B$)) (= (tree_ap$d ?v0 (tree_pure$b ?v1)) (tree_ap$k (tree_pure$m (uud$ ?v1)) ?v0))) :named a45))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A$)) (= (tree_ap$f ?v0 (tree_pure$c ?v1)) (tree_ap$l (tree_pure$n (uue$ ?v1)) ?v0))) :named a46))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 B$)) (= (tree_ap$i ?v0 (tree_pure$b ?v1)) (tree_ap$m (tree_pure$o (uuf$ ?v1)) ?v0))) :named a47))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 A$)) (= (tree_ap$n ?v0 (tree_pure$c ?v1)) (tree_ap$o (tree_pure$p (uug$ ?v1)) ?v0))) :named a48))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$) (?v1 B$)) (= (tree_ap$p ?v0 (tree_pure$b ?v1)) (tree_ap$q (tree_pure$q (uuh$ ?v1)) ?v0))) :named a49))
(assert (! (forall ((?v0 A_b_fun_tree$) (?v1 A$)) (= (tree_ap$e ?v0 (tree_pure$c ?v1)) (tree_ap$r (tree_pure$r (uui$ ?v1)) ?v0))) :named a50))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A$)) (= (tree_ap$s ?v0 (tree_pure$c ?v1)) (tree_ap$t (tree_pure$s (uuj$ ?v1)) ?v0))) :named a51))
(assert (! (forall ((?v0 A$) (?v1 B_tree$)) (= (tree_ap$ (tree_pure$a (fun_app$l uuk$ ?v0)) ?v1) (tree_pure$c ?v0))) :named a52))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_tree$)) (= (tree_ap$a (tree_pure$d (fun_app$aj uul$ ?v0)) ?v1) (tree_pure$a ?v0))) :named a53))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_a_fun_fun_tree$)) (= (tree_ap$b (tree_pure$ (fun_app$ak uum$ ?v0)) ?v1) (tree_pure$a ?v0))) :named a54))
(assert (! (forall ((?v0 B$) (?v1 B_tree$)) (= (tree_ap$d (tree_pure$f (uun$ ?v0)) ?v1) (tree_pure$b ?v0))) :named a55))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (= (tree_ap$f (tree_pure$h (uuo$ ?v0)) ?v1) (tree_pure$c ?v0))) :named a56))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_tree$)) (= (tree_ap$i (tree_pure$k (uup$ ?v0)) ?v1) (tree_pure$h ?v0))) :named a57))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_tree$)) (= (tree_ap$n (tree_pure$t (uuq$ ?v0)) ?v1) (tree_pure$a ?v0))) :named a58))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 B_tree$)) (= (tree_ap$p (tree_pure$u (uur$ ?v0)) ?v1) (tree_pure$t ?v0))) :named a59))
(assert (! (forall ((?v0 B_a_fun_a_fun$) (?v1 B_tree$)) (= (tree_ap$u (tree_pure$v (uus$ ?v0)) ?v1) (tree_pure$j ?v0))) :named a60))
(assert (! (forall ((?v0 B$) (?v1 A_tree$)) (= (tree_ap$e (tree_pure$g (uut$ ?v0)) ?v1) (tree_pure$b ?v0))) :named a61))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_a_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$ ?v0 (tree_pure$b ?v2)) (tree_ap$ ?v1 (tree_pure$b ?v2)))) (= ?v0 ?v1))) :named a62))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B_b_a_fun_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$a ?v0 (tree_pure$b ?v2)) (tree_ap$a ?v1 (tree_pure$b ?v2)))) (= ?v0 ?v1))) :named a63))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_a_fun_fun_tree$) (?v1 B_b_a_fun_fun_b_a_fun_fun_tree$)) (=> (forall ((?v2 B_b_a_fun_fun$)) (= (tree_ap$b ?v0 (tree_pure$d ?v2)) (tree_ap$b ?v1 (tree_pure$d ?v2)))) (= ?v0 ?v1))) :named a64))
(assert (! (forall ((?v0 B_b_fun_tree$) (?v1 B_b_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$d ?v0 (tree_pure$b ?v2)) (tree_ap$d ?v1 (tree_pure$b ?v2)))) (= ?v0 ?v1))) :named a65))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$f ?v0 (tree_pure$c ?v2)) (tree_ap$f ?v1 (tree_pure$c ?v2)))) (= ?v0 ?v1))) :named a66))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 B_a_a_fun_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$i ?v0 (tree_pure$b ?v2)) (tree_ap$i ?v1 (tree_pure$b ?v2)))) (= ?v0 ?v1))) :named a67))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 A_b_a_fun_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$n ?v0 (tree_pure$c ?v2)) (tree_ap$n ?v1 (tree_pure$c ?v2)))) (= ?v0 ?v1))) :named a68))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$) (?v1 B_a_b_a_fun_fun_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$p ?v0 (tree_pure$b ?v2)) (tree_ap$p ?v1 (tree_pure$b ?v2)))) (= ?v0 ?v1))) :named a69))
(assert (! (forall ((?v0 A_b_fun_tree$) (?v1 A_b_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$e ?v0 (tree_pure$c ?v2)) (tree_ap$e ?v1 (tree_pure$c ?v2)))) (= ?v0 ?v1))) :named a70))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_a_a_fun_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$s ?v0 (tree_pure$c ?v2)) (tree_ap$s ?v1 (tree_pure$c ?v2)))) (= ?v0 ?v1))) :named a71))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_a_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$ ?v0 ?v2) (tree_ap$ ?v1 ?v2))) (= ?v0 ?v1))) :named a72))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B_b_a_fun_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$a ?v0 ?v2) (tree_ap$a ?v1 ?v2))) (= ?v0 ?v1))) :named a73))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_a_fun_fun_tree$) (?v1 B_b_a_fun_fun_b_a_fun_fun_tree$)) (=> (forall ((?v2 B_b_a_fun_fun_tree$)) (= (tree_ap$b ?v0 ?v2) (tree_ap$b ?v1 ?v2))) (= ?v0 ?v1))) :named a74))
(assert (! (forall ((?v0 B_b_fun_tree$) (?v1 B_b_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$d ?v0 ?v2) (tree_ap$d ?v1 ?v2))) (= ?v0 ?v1))) :named a75))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$f ?v0 ?v2) (tree_ap$f ?v1 ?v2))) (= ?v0 ?v1))) :named a76))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 B_a_a_fun_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$i ?v0 ?v2) (tree_ap$i ?v1 ?v2))) (= ?v0 ?v1))) :named a77))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 A_b_a_fun_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$n ?v0 ?v2) (tree_ap$n ?v1 ?v2))) (= ?v0 ?v1))) :named a78))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$) (?v1 B_a_b_a_fun_fun_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$p ?v0 ?v2) (tree_ap$p ?v1 ?v2))) (= ?v0 ?v1))) :named a79))
(assert (! (forall ((?v0 A_b_fun_tree$) (?v1 A_b_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$e ?v0 ?v2) (tree_ap$e ?v1 ?v2))) (= ?v0 ?v1))) :named a80))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_a_a_fun_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$s ?v0 ?v2) (tree_ap$s ?v1 ?v2))) (= ?v0 ?v1))) :named a81))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun$) (?v1 B_b_a_fun_fun$)) (= (tree_pure$a (fun_app$a (uuu$ ?v0) ?v1)) (tree_ap$b (tree_ap$v tree_S$ (tree_pure$v ?v0)) (tree_pure$d ?v1)))) :named a82))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_a_fun_fun$) (?v1 B_b_a_fun_fun_b_fun$)) (= (tree_pure$w (uuv$ ?v0 ?v1)) (tree_ap$w (tree_ap$x tree_S$a (tree_pure$ ?v0)) (tree_pure$x ?v1)))) :named a83))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun$) (?v1 B_b_a_fun_fun_b_a_fun_fun$)) (= (tree_pure$ (fun_app$s (uuw$ ?v0) ?v1)) (tree_ap$c (tree_ap$y tree_S$b (tree_pure$y ?v0)) (tree_pure$ ?v1)))) :named a84))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B_a_fun$)) (= (tree_pure$a (fun_app$t (uux$ ?v0) ?v1)) (tree_ap$z (tree_ap$aa tree_S$c (tree_pure$k ?v0)) (tree_pure$a ?v1)))) :named a85))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B_b_fun$)) (= (tree_pure$a (fun_app$af (uuy$ ?v0) ?v1)) (tree_ap$ab (tree_ap$ac tree_S$d (tree_pure$d ?v0)) (tree_pure$f ?v1)))) :named a86))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun$) (?v1 B_b_fun$)) (= (tree_pure$d (fun_app$ad (uuz$ ?v0) ?v1)) (tree_ap$ad (tree_ap$ae tree_S$e (tree_pure$z ?v0)) (tree_pure$f ?v1)))) :named a87))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun$) (?v1 B_a_fun$)) (= (tree_pure$d (fun_app$aj (uva$ ?v0) ?v1)) (tree_ap$af (tree_ap$ag tree_S$f (tree_pure$u ?v0)) (tree_pure$a ?v1)))) :named a88))
(assert (! (forall ((?v0 B_a_b_a_fun_a_fun_fun_fun$) (?v1 B_a_fun$)) (= (tree_pure$v (fun_app$ag (uvb$ ?v0) ?v1)) (tree_ap$ah (tree_ap$ai tree_S$g (tree_pure$aa ?v0)) (tree_pure$a ?v1)))) :named a89))
(assert (! (forall ((?v0 B_b_a_fun_b_a_fun_fun_fun$) (?v1 B_b_a_fun_fun$)) (= (tree_pure$d (fun_app$ab (uvc$ ?v0) ?v1)) (tree_ap$aj (tree_ap$ak tree_S$h (tree_pure$ab ?v0)) (tree_pure$d ?v1)))) :named a90))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_a_fun_fun$) (?v1 B_b_a_fun_a_fun_fun$)) (= (tree_pure$a (fun_app$x (uvd$ ?v0) ?v1)) (tree_ap$al (tree_ap$am tree_S$i (tree_pure$ac ?v0)) (tree_pure$v ?v1)))) :named a91))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 B_a_fun_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$z (tree_ap$aa tree_S$c ?v0) ?v1) ?v2) (tree_ap$f (tree_ap$i ?v0 ?v2) (tree_ap$ ?v1 ?v2)))) :named a92))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B_b_fun_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$ab (tree_ap$ac tree_S$d ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$a ?v0 ?v2) (tree_ap$d ?v1 ?v2)))) :named a93))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun_tree$) (?v1 B_b_a_fun_fun_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$b (tree_ap$v tree_S$ ?v0) ?v1) ?v2) (tree_ap$h (tree_ap$u ?v0 ?v2) (tree_ap$a ?v1 ?v2)))) :named a94))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$) (?v1 B_a_fun_tree$) (?v2 B_tree$)) (= (tree_ap$a (tree_ap$af (tree_ap$ag tree_S$f ?v0) ?v1) ?v2) (tree_ap$n (tree_ap$p ?v0 ?v2) (tree_ap$ ?v1 ?v2)))) :named a95))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$) (?v1 B_b_fun_tree$) (?v2 B_tree$)) (= (tree_ap$a (tree_ap$ad (tree_ap$ae tree_S$e ?v0) ?v1) ?v2) (tree_ap$a (tree_ap$an ?v0 ?v2) (tree_ap$d ?v1 ?v2)))) :named a96))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_a_fun_fun_tree$) (?v1 B_b_a_fun_fun_b_fun_tree$) (?v2 B_b_a_fun_fun_tree$)) (= (tree_ap$ao (tree_ap$w (tree_ap$x tree_S$a ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$b ?v0 ?v2) (tree_ap$ap ?v1 ?v2)))) :named a97))
(assert (! (forall ((?v0 B_b_a_fun_b_a_fun_fun_fun_tree$) (?v1 B_b_a_fun_fun_tree$) (?v2 B_tree$)) (= (tree_ap$a (tree_ap$aj (tree_ap$ak tree_S$h ?v0) ?v1) ?v2) (tree_ap$z (tree_ap$aq ?v0 ?v2) (tree_ap$a ?v1 ?v2)))) :named a98))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_b_a_fun_fun_fun_tree$) (?v1 B_b_b_a_fun_fun_fun_tree$) (?v2 B_tree$)) (= (tree_ap$a (tree_ap$ar (tree_ap$as tree_S$j ?v0) ?v1) ?v2) (tree_ap$b (tree_ap$at ?v0 ?v2) (tree_ap$an ?v1 ?v2)))) :named a99))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$) (?v1 B_b_a_fun_fun_b_fun_tree$) (?v2 B_b_a_fun_fun_tree$)) (= (tree_ap$b (tree_ap$au (tree_ap$av tree_S$k ?v0) ?v1) ?v2) (tree_ap$a (tree_ap$aj ?v0 ?v2) (tree_ap$ap ?v1 ?v2)))) :named a100))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$) (?v1 B_b_a_fun_fun_b_a_fun_fun_tree$) (?v2 B_b_a_fun_fun_tree$)) (= (tree_ap$b (tree_ap$c (tree_ap$y tree_S$b ?v0) ?v1) ?v2) (tree_ap$z (tree_ap$aw ?v0 ?v2) (tree_ap$b ?v1 ?v2)))) :named a101))
(assert (! (forall ((?v0 A$)) (= (tree_pure$h (uuo$ ?v0)) (tree_ap$s tree_K$ (tree_pure$c ?v0)))) :named a102))
(assert (! (forall ((?v0 B_a_fun_a_fun$)) (= (tree_pure$v (uus$ ?v0)) (tree_ap$ax tree_K$a (tree_pure$j ?v0)))) :named a103))
(assert (! (forall ((?v0 B_a_fun$)) (= (tree_pure$d (fun_app$aj uul$ ?v0)) (tree_ap$af tree_K$b (tree_pure$a ?v0)))) :named a104))
(assert (! (forall ((?v0 A$)) (= (tree_pure$a (fun_app$l uuk$ ?v0)) (tree_ap$n tree_K$c (tree_pure$c ?v0)))) :named a105))
(assert (! (forall ((?v0 B_a_fun$)) (= (tree_pure$ (fun_app$ak uum$ ?v0)) (tree_ap$ay tree_K$d (tree_pure$a ?v0)))) :named a106))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$a (tree_ap$aj tree_C$ ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$a ?v0 ?v2) ?v1))) :named a107))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$) (?v1 B_tree$) (?v2 B_tree$)) (= (tree_ap$a (tree_ap$an (tree_ap$az tree_C$a ?v0) ?v1) ?v2) (tree_ap$a (tree_ap$an ?v0 ?v2) ?v1))) :named a108))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_a_fun_fun_tree$) (?v1 B_tree$) (?v2 B_b_a_fun_fun_tree$)) (= (tree_ap$ao (tree_ap$ba (tree_ap$bb tree_C$b ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$b ?v0 ?v2) ?v1))) :named a109))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_a_fun_fun_tree$) (?v1 B_b_a_fun_fun_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$b (tree_ap$bc tree_C$c ?v0) ?v1) ?v2) (tree_ap$ao (tree_ap$ba ?v0 ?v2) ?v1))) :named a110))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_b_a_fun_fun_fun_tree$) (?v1 B_b_a_fun_fun_tree$) (?v2 B_tree$)) (= (tree_ap$a (tree_ap$aj (tree_ap$bd tree_C$d ?v0) ?v1) ?v2) (tree_ap$b (tree_ap$at ?v0 ?v2) ?v1))) :named a111))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$) (?v1 B_tree$) (?v2 B_b_a_fun_fun_tree$)) (= (tree_ap$b (tree_ap$at (tree_ap$be tree_C$e ?v0) ?v1) ?v2) (tree_ap$a (tree_ap$aj ?v0 ?v2) ?v1))) :named a112))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$) (?v1 B_b_a_fun_fun_tree$) (?v2 B_b_a_fun_fun_tree$)) (= (tree_ap$b (tree_ap$bf (tree_ap$bg tree_C$f ?v0) ?v1) ?v2) (tree_ap$b (tree_ap$bf ?v0 ?v2) ?v1))) :named a113))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 A_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$n (tree_ap$bh tree_C$g ?v0) ?v1) ?v2) (tree_ap$f (tree_ap$i ?v0 ?v2) ?v1))) :named a114))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$) (?v1 B_tree$) (?v2 B_tree$)) (= (tree_ap$d (tree_ap$bi (tree_ap$bj tree_C$h ?v0) ?v1) ?v2) (tree_ap$d (tree_ap$bi ?v0 ?v2) ?v1))) :named a115))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_tree$) (?v2 A_tree$)) (= (tree_ap$f (tree_ap$s (tree_ap$bk tree_C$i ?v0) ?v1) ?v2) (tree_ap$f (tree_ap$s ?v0 ?v2) ?v1))) :named a116))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 B_tree$)) (= (tree_ap$p (tree_ap$bl tree_K$e ?v0) ?v1) ?v0)) :named a117))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 B_tree$)) (= (tree_ap$i (tree_ap$bm tree_K$f ?v0) ?v1) ?v0)) :named a118))
(assert (! (forall ((?v0 B_tree$) (?v1 B_tree$)) (= (tree_ap$d (tree_ap$bi tree_K$g ?v0) ?v1) ?v0)) :named a119))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 A_tree$)) (= (tree_ap$n (tree_ap$bn tree_K$h ?v0) ?v1) ?v0)) :named a120))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (= (tree_ap$f (tree_ap$s tree_K$ ?v0) ?v1) ?v0)) :named a121))
(assert (! (forall ((?v0 A_tree$) (?v1 B_tree$)) (= (tree_ap$ (tree_ap$n tree_K$c ?v0) ?v1) ?v0)) :named a122))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_tree$)) (= (tree_ap$a (tree_ap$af tree_K$b ?v0) ?v1) ?v0)) :named a123))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_b_a_fun_fun_tree$)) (= (tree_ap$b (tree_ap$ay tree_K$d ?v0) ?v1) ?v0)) :named a124))
(assert (! (= tree_K$d (tree_pure$ad uum$)) :named a125))
(assert (! (= tree_K$b (tree_pure$ae uul$)) :named a126))
(assert (! (= tree_K$c (tree_pure$t uuk$)) :named a127))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$)) (= (tree_ap$ (tree_pure$a ?v0) (node$b ?v1 ?v2 ?v3)) (node$ (fun_app$ ?v0 ?v1) (tree_ap$ (tree_pure$a ?v0) ?v2) (tree_ap$ (tree_pure$a ?v0) ?v3)))) :named a128))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$)) (= (tree_ap$a (tree_pure$d ?v0) (node$b ?v1 ?v2 ?v3)) (node$a (fun_app$b ?v0 ?v1) (tree_ap$a (tree_pure$d ?v0) ?v2) (tree_ap$a (tree_pure$d ?v0) ?v3)))) :named a129))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_a_fun_fun$) (?v1 B_b_a_fun_fun$) (?v2 B_b_a_fun_fun_tree$) (?v3 B_b_a_fun_fun_tree$)) (= (tree_ap$b (tree_pure$ ?v0) (node$c ?v1 ?v2 ?v3)) (node$a (fun_app$a ?v0 ?v1) (tree_ap$b (tree_pure$ ?v0) ?v2) (tree_ap$b (tree_pure$ ?v0) ?v3)))) :named a130))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$)) (= (tree_ap$d (tree_pure$f ?v0) (node$b ?v1 ?v2 ?v3)) (node$b (fun_app$i ?v0 ?v1) (tree_ap$d (tree_pure$f ?v0) ?v2) (tree_ap$d (tree_pure$f ?v0) ?v3)))) :named a131))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (tree_ap$e (tree_pure$g ?v0) (node$ ?v1 ?v2 ?v3)) (node$b (fun_app$p ?v0 ?v1) (tree_ap$e (tree_pure$g ?v0) ?v2) (tree_ap$e (tree_pure$g ?v0) ?v3)))) :named a132))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (tree_ap$f (tree_pure$h ?v0) (node$ ?v1 ?v2 ?v3)) (node$ (fun_app$r ?v0 ?v1) (tree_ap$f (tree_pure$h ?v0) ?v2) (tree_ap$f (tree_pure$h ?v0) ?v3)))) :named a133))
(assert (! (forall ((?v0 B_a_fun_b_fun$) (?v1 B_a_fun$) (?v2 B_a_fun_tree$) (?v3 B_a_fun_tree$)) (= (tree_ap$g (tree_pure$i ?v0) (node$a ?v1 ?v2 ?v3)) (node$b (fun_app$al ?v0 ?v1) (tree_ap$g (tree_pure$i ?v0) ?v2) (tree_ap$g (tree_pure$i ?v0) ?v3)))) :named a134))
(assert (! (forall ((?v0 B_a_fun_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun_tree$) (?v3 B_a_fun_tree$)) (= (tree_ap$h (tree_pure$j ?v0) (node$a ?v1 ?v2 ?v3)) (node$ (fun_app$j ?v0 ?v1) (tree_ap$h (tree_pure$j ?v0) ?v2) (tree_ap$h (tree_pure$j ?v0) ?v3)))) :named a135))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$)) (= (tree_ap$i (tree_pure$k ?v0) (node$b ?v1 ?v2 ?v3)) (node$h (fun_app$g ?v0 ?v1) (tree_ap$i (tree_pure$k ?v0) ?v2) (tree_ap$i (tree_pure$k ?v0) ?v3)))) :named a136))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (tree_ap$n (tree_pure$t ?v0) (node$ ?v1 ?v2 ?v3)) (node$a (fun_app$l ?v0 ?v1) (tree_ap$n (tree_pure$t ?v0) ?v2) (tree_ap$n (tree_pure$t ?v0) ?v3)))) :named a137))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun$) (?v1 B_tree$)) (= (tree_ap$p (tree_pure$u ?v0) ?v1) (map_tree$ ?v0 ?v1))) :named a138))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B_tree$)) (= (tree_ap$i (tree_pure$k ?v0) ?v1) (map_tree$a ?v0 ?v1))) :named a139))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_tree$)) (= (tree_ap$d (tree_pure$f ?v0) ?v1) (map_tree$b ?v0 ?v1))) :named a140))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 A_tree$)) (= (tree_ap$n (tree_pure$t ?v0) ?v1) (map_tree$c ?v0 ?v1))) :named a141))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (tree_ap$f (tree_pure$h ?v0) ?v1) (map_tree$d ?v0 ?v1))) :named a142))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun$) (?v1 B_tree$)) (= (tree_ap$u (tree_pure$v ?v0) ?v1) (map_tree$e ?v0 ?v1))) :named a143))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_tree$)) (= (tree_ap$ (tree_pure$a ?v0) ?v1) (map_tree$f ?v0 ?v1))) :named a144))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B_tree$)) (= (tree_ap$a (tree_pure$d ?v0) ?v1) (map_tree$g ?v0 ?v1))) :named a145))
(assert (! (forall ((?v0 B_b_a_fun_fun_b_a_fun_fun$) (?v1 B_b_a_fun_fun_tree$)) (= (tree_ap$b (tree_pure$ ?v0) ?v1) (map_tree$h ?v0 ?v1))) :named a146))
(assert (! (forall ((?v0 B_tree$)) (= (tree_ap$d (tree_pure$f id$) ?v0) ?v0)) :named a147))
(assert (! (forall ((?v0 A_tree$)) (= (tree_ap$f (tree_pure$h id$a) ?v0) ?v0)) :named a148))
(check-sat)
;(get-unsat-core)
