; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 408
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun_nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun_nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$ 0)
(declare-datatypes () ((Nat_nat_prod$ (pair$ (fst$ Nat$) (snd$ Nat$)))))
(declare-codatatypes () ((Nat_nat_prod_tree$ (node$ (root$ Nat_nat_prod$) (left$ Nat_nat_prod_tree$) (right$ Nat_nat_prod_tree$)))))
(declare-datatypes () ((Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$) (snd$a Nat_nat_prod$)))))
(declare-codatatypes () ((Nat_nat_prod_nat_nat_prod_prod_tree$ (node$a (root$a Nat_nat_prod_nat_nat_prod_prod$) (left$a Nat_nat_prod_nat_nat_prod_prod_tree$) (right$a Nat_nat_prod_nat_nat_prod_prod_tree$)))))
(declare-datatypes () ((Dir$ (l$) (r$))
  (Dir_list$ (nil$) (cons$ (hd$ Dir$) (tl$ Dir_list$)))))
(declare-fun det$ (Nat_nat_prod_nat_nat_prod_prod$) Nat$)
(declare-fun one$ () Nat$)
(declare-fun comp$ (Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$)
(declare-fun imat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun comp$a (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$)
(declare-fun comp$b (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$)
(declare-fun comp$c (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun_nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$)
(declare-fun comp$d (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun_nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun_fun$)
(declare-fun comp$e (Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun_fun$)
(declare-fun lLmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun uRmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$)
(declare-fun fun_app$ (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun mediant$ () Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$)
(declare-fun fun_app$a (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$)
(declare-fun fun_app$b (Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$) Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$)
(declare-fun fun_app$c (Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun fun_app$d (Nat_nat_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_fun$)
(declare-fun fun_app$e (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod$) Nat_nat_prod$)
(declare-fun fun_app$f (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun_nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$)
(declare-fun fun_app$g (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun_nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$)
(declare-fun fun_app$h (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun_nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun_fun$ Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$) Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$)
(declare-fun fun_app$i (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod$)
(declare-fun map_tree$ (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$ Nat_nat_prod_nat_nat_prod_prod_tree$) Nat_nat_prod_tree$)
(declare-fun map_tree$a (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod_tree$) Nat_nat_prod_tree$)
(declare-fun map_tree$b (Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod_tree$) Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun map_tree$c (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod_nat_nat_prod_prod_tree$) Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun tree_pure$ (Nat_nat_prod$) Nat_nat_prod_tree$)
(declare-fun tree_pure$a (Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun tree_recurse$ (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun traverse_tree$ (Dir_list$ Nat_nat_prod_tree$) Nat_nat_prod_tree$)
(declare-fun tree_recurse$a (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod$) Nat_nat_prod_tree$)
(declare-fun traverse_tree$a (Dir_list$ Nat_nat_prod_nat_nat_prod_prod_tree$) Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun stern_brocot_iterate$ () Nat_nat_prod_tree$)
(declare-fun stern_brocot_iterate_aux$ (Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod_tree$)
(assert (! (not (= stern_brocot_iterate$ (map_tree$ mediant$ (tree_recurse$ (mulmat$ lLmat$) (mulmat$ uRmat$) imat$)))) :named a0))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$ (mulmat$ (fun_app$ (mulmat$ ?v0) ?v1)) ?v2) (fun_app$ (mulmat$ ?v0) (fun_app$ (mulmat$ ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$ (mulmat$ ?v0) imat$) ?v0)) :named a2))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$ (mulmat$ imat$) ?v0) ?v0)) :named a3))
(assert (! (= stern_brocot_iterate$ (map_tree$ mediant$ (stern_brocot_iterate_aux$ imat$))) :named a4))
(assert (! (forall ((?v0 Dir_list$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_tree$)) (= (traverse_tree$ ?v0 (map_tree$a ?v1 ?v2)) (map_tree$a ?v1 (traverse_tree$ ?v0 ?v2)))) :named a5))
(assert (! (forall ((?v0 Dir_list$) (?v1 Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v2 Nat_nat_prod_tree$)) (= (traverse_tree$a ?v0 (map_tree$b ?v1 ?v2)) (map_tree$b ?v1 (traverse_tree$ ?v0 ?v2)))) :named a6))
(assert (! (forall ((?v0 Dir_list$) (?v1 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod_tree$)) (= (traverse_tree$a ?v0 (map_tree$c ?v1 ?v2)) (map_tree$c ?v1 (traverse_tree$a ?v0 ?v2)))) :named a7))
(assert (! (forall ((?v0 Dir_list$) (?v1 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod_tree$)) (= (traverse_tree$ ?v0 (map_tree$ ?v1 ?v2)) (map_tree$ ?v1 (traverse_tree$a ?v0 ?v2)))) :named a8))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod$)) (! (= (tree_recurse$a ?v0 ?v1 ?v2) (node$ ?v2 (map_tree$a ?v0 (tree_recurse$a ?v0 ?v1 ?v2)) (map_tree$a ?v1 (tree_recurse$a ?v0 ?v1 ?v2)))) :pattern ((tree_recurse$a ?v0 ?v1 ?v2)))) :named a9))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (! (= (tree_recurse$ ?v0 ?v1 ?v2) (node$a ?v2 (map_tree$c ?v0 (tree_recurse$ ?v0 ?v1 ?v2)) (map_tree$c ?v1 (tree_recurse$ ?v0 ?v1 ?v2)))) :pattern ((tree_recurse$ ?v0 ?v1 ?v2)))) :named a10))
(assert (! (forall ((?v0 Nat_nat_prod_tree$) (?v1 Nat_nat_prod$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$)) (=> (= ?v0 (node$ ?v1 (map_tree$a ?v2 ?v0) (map_tree$a ?v3 ?v0))) (= ?v0 (tree_recurse$a ?v2 ?v3 ?v1)))) :named a11))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_tree$) (?v1 Nat_nat_prod_nat_nat_prod_prod$) (?v2 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$)) (=> (= ?v0 (node$a ?v1 (map_tree$c ?v2 ?v0) (map_tree$c ?v3 ?v0))) (= ?v0 (tree_recurse$ ?v2 ?v3 ?v1)))) :named a12))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v5 Nat_nat_prod$)) (=> (and (= (fun_app$a (comp$ ?v0) ?v1) (fun_app$b (comp$a ?v2) ?v0)) (= (fun_app$a (comp$ ?v0) ?v3) (fun_app$b (comp$a ?v4) ?v0))) (= (map_tree$b ?v0 (tree_recurse$a ?v1 ?v3 ?v5)) (tree_recurse$ ?v2 ?v4 (fun_app$c ?v0 ?v5))))) :named a13))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod$)) (=> (and (= (fun_app$d (comp$b ?v0) ?v1) (fun_app$d (comp$b ?v2) ?v0)) (= (fun_app$d (comp$b ?v0) ?v3) (fun_app$d (comp$b ?v4) ?v0))) (= (map_tree$a ?v0 (tree_recurse$a ?v1 ?v3 ?v5)) (tree_recurse$a ?v2 ?v4 (fun_app$e ?v0 ?v5))))) :named a14))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v5 Nat_nat_prod_nat_nat_prod_prod$)) (=> (and (= (fun_app$f (comp$c ?v0) ?v1) (fun_app$f (comp$c ?v2) ?v0)) (= (fun_app$f (comp$c ?v0) ?v3) (fun_app$f (comp$c ?v4) ?v0))) (= (map_tree$c ?v0 (tree_recurse$ ?v1 ?v3 ?v5)) (tree_recurse$ ?v2 ?v4 (fun_app$ ?v0 ?v5))))) :named a15))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_fun$) (?v3 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v4 Nat_nat_prod_nat_nat_prod_fun$) (?v5 Nat_nat_prod_nat_nat_prod_prod$)) (=> (and (= (fun_app$g (comp$d ?v0) ?v1) (fun_app$h (comp$e ?v2) ?v0)) (= (fun_app$g (comp$d ?v0) ?v3) (fun_app$h (comp$e ?v4) ?v0))) (= (map_tree$ ?v0 (tree_recurse$ ?v1 ?v3 ?v5)) (tree_recurse$a ?v2 ?v4 (fun_app$i ?v0 ?v5))))) :named a16))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat_nat_prod$)) (= (map_tree$b ?v0 (tree_pure$ ?v1)) (tree_pure$a (fun_app$c ?v0 ?v1)))) :named a17))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod$)) (= (map_tree$a ?v0 (tree_pure$ ?v1)) (tree_pure$ (fun_app$e ?v0 ?v1)))) :named a18))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod$)) (= (map_tree$c ?v0 (tree_pure$a ?v1)) (tree_pure$a (fun_app$ ?v0 ?v1)))) :named a19))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod$)) (= (map_tree$ ?v0 (tree_pure$a ?v1)) (tree_pure$ (fun_app$i ?v0 ?v1)))) :named a20))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (= (det$ ?v0) one$) (= (det$ (fun_app$ (mulmat$ ?v0) lLmat$)) one$))) :named a21))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (= (det$ ?v0) one$) (= (det$ (fun_app$ (mulmat$ ?v0) uRmat$)) one$))) :named a22))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (= (det$ ?v0) one$) (= (det$ (fun_app$ (mulmat$ lLmat$) ?v0)) one$))) :named a23))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (= (det$ ?v0) one$) (= (det$ (fun_app$ (mulmat$ uRmat$) ?v0)) one$))) :named a24))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_tree$)) (= (root$ (map_tree$a ?v0 ?v1)) (fun_app$e ?v0 (root$ ?v1)))) :named a25))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat_nat_prod_tree$)) (= (root$a (map_tree$b ?v0 ?v1)) (fun_app$c ?v0 (root$ ?v1)))) :named a26))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_tree$)) (= (root$a (map_tree$c ?v0 ?v1)) (fun_app$ ?v0 (root$a ?v1)))) :named a27))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_tree$)) (= (root$ (map_tree$ ?v0 ?v1)) (fun_app$i ?v0 (root$a ?v1)))) :named a28))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_tree$)) (= (root$ (map_tree$a ?v0 ?v1)) (fun_app$e ?v0 (root$ ?v1)))) :named a29))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat_nat_prod_tree$)) (= (root$a (map_tree$b ?v0 ?v1)) (fun_app$c ?v0 (root$ ?v1)))) :named a30))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_tree$)) (= (root$a (map_tree$c ?v0 ?v1)) (fun_app$ ?v0 (root$a ?v1)))) :named a31))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_tree$)) (= (root$ (map_tree$ ?v0 ?v1)) (fun_app$i ?v0 (root$a ?v1)))) :named a32))
(assert (! (forall ((?v0 Nat_nat_prod$) (?v1 Nat_nat_prod_tree$) (?v2 Nat_nat_prod_tree$) (?v3 Nat_nat_prod$) (?v4 Nat_nat_prod_tree$) (?v5 Nat_nat_prod_tree$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a33))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod_tree$) (?v2 Nat_nat_prod_nat_nat_prod_prod_tree$) (?v3 Nat_nat_prod_nat_nat_prod_prod$) (?v4 Nat_nat_prod_nat_nat_prod_prod_tree$) (?v5 Nat_nat_prod_nat_nat_prod_prod_tree$)) (= (= (node$a ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a34))
(assert (! (forall ((?v0 Dir_list$) (?v1 Nat_nat_prod$)) (= (traverse_tree$ ?v0 (tree_pure$ ?v1)) (tree_pure$ ?v1))) :named a35))
(assert (! (forall ((?v0 Dir_list$) (?v1 Nat_nat_prod_nat_nat_prod_prod$)) (= (traverse_tree$a ?v0 (tree_pure$a ?v1)) (tree_pure$a ?v1))) :named a36))
(check-sat)
;(get-unsat-core)
