; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 545
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Dir_bool_fun$ 0)
(declare-sort Dir_a_a_fun_fun$ 0)
(declare-sort Dir_dir_list_fun$ 0)
(declare-sort Dir_list_nat_fun$ 0)
(declare-sort A_tree_a_tree_fun$ 0)
(declare-sort Dir_list_bool_fun$ 0)
(declare-sort Dir_list_a_a_fun_fun$ 0)
(declare-sort Dir_a_tree_a_tree_fun_fun$ 0)
(declare-sort A_tree_tree_a_tree_tree_fun$ 0)
(declare-sort Dir_list_a_tree_a_tree_fun_fun$ 0)
(declare-sort Dir_a_tree_tree_a_tree_tree_fun_fun$ 0)
(declare-sort A_tree_tree_tree_a_tree_tree_tree_fun$ 0)
(declare-sort Dir_list_a_tree_tree_a_tree_tree_fun_fun$ 0)
(declare-sort Dir_a_tree_tree_tree_a_tree_tree_tree_fun_fun$ 0)
(declare-sort A_tree_tree_tree_tree_a_tree_tree_tree_tree_fun$ 0)
(declare-sort Dir_list_a_tree_tree_tree_a_tree_tree_tree_fun_fun$ 0)
(declare-codatatypes () ((A_tree$ (node$ (root$ A$) (left$ A_tree$) (right$ A_tree$)))))
(declare-datatypes () ((Dir$ (l$) (r$))
  (Dir_list$ (nil$) (cons$ (hd$ Dir$) (tl$ Dir_list$)))))
(declare-codatatypes () ((A_tree_tree$ (node$a (root$a A_tree$) (left$a A_tree_tree$) (right$a A_tree_tree$)))
  (A_tree_tree_tree$ (node$b (root$b A_tree_tree$) (left$b A_tree_tree_tree$) (right$b A_tree_tree_tree$)))
  (A_tree_tree_tree_tree$ (node$c (root$c A_tree_tree_tree$) (left$c A_tree_tree_tree_tree$) (right$c A_tree_tree_tree_tree$)))))
(declare-fun id$ () A_tree_a_tree_fun$)
(declare-fun id$a () A_tree_tree_tree_a_tree_tree_tree_fun$)
(declare-fun id$b () A_tree_tree_a_tree_tree_fun$)
(declare-fun id$c () A_a_fun$)
(declare-fun id$d () A_tree_tree_tree_tree_a_tree_tree_tree_tree_fun$)
(declare-fun bind$ (Dir_list$ Dir_dir_list_fun$) Dir_list$)
(declare-fun fold$ (Dir_a_tree_tree_tree_a_tree_tree_tree_fun_fun$) Dir_list_a_tree_tree_tree_a_tree_tree_tree_fun_fun$)
(declare-fun fold$a (Dir_a_tree_tree_a_tree_tree_fun_fun$) Dir_list_a_tree_tree_a_tree_tree_fun_fun$)
(declare-fun fold$b (Dir_a_a_fun_fun$) Dir_list_a_a_fun_fun$)
(declare-fun fold$c (Dir_a_tree_a_tree_fun_fun$) Dir_list_a_tree_a_tree_fun_fun$)
(declare-fun foldr$ (Dir_a_tree_tree_tree_a_tree_tree_tree_fun_fun$) Dir_list_a_tree_tree_tree_a_tree_tree_tree_fun_fun$)
(declare-fun foldr$a (Dir_a_tree_tree_a_tree_tree_fun_fun$) Dir_list_a_tree_tree_a_tree_tree_fun_fun$)
(declare-fun foldr$b (Dir_a_a_fun_fun$) Dir_list_a_a_fun_fun$)
(declare-fun foldr$c (Dir_a_tree_a_tree_fun_fun$) Dir_list_a_tree_a_tree_fun_fun$)
(declare-fun member$ (Dir_list$) Dir_bool_fun$)
(declare-fun fun_app$ (A_tree_tree_tree_a_tree_tree_tree_fun$ A_tree_tree_tree$) A_tree_tree_tree$)
(declare-fun fun_app$a (A_tree_tree_a_tree_tree_fun$ A_tree_tree$) A_tree_tree$)
(declare-fun fun_app$b (A_a_fun$ A$) A$)
(declare-fun fun_app$c (A_tree_a_tree_fun$ A_tree$) A_tree$)
(declare-fun fun_app$d (Dir_list_a_tree_tree_tree_a_tree_tree_tree_fun_fun$ Dir_list$) A_tree_tree_tree_a_tree_tree_tree_fun$)
(declare-fun fun_app$e (Dir_list_a_tree_tree_a_tree_tree_fun_fun$ Dir_list$) A_tree_tree_a_tree_tree_fun$)
(declare-fun fun_app$f (Dir_list_a_a_fun_fun$ Dir_list$) A_a_fun$)
(declare-fun fun_app$g (Dir_list_a_tree_a_tree_fun_fun$ Dir_list$) A_tree_a_tree_fun$)
(declare-fun fun_app$h (Dir_list_bool_fun$ Dir_list$) Bool)
(declare-fun fun_app$i (Dir_bool_fun$ Dir$) Bool)
(declare-fun fun_app$j (A_tree_tree_tree_tree_a_tree_tree_tree_tree_fun$ A_tree_tree_tree_tree$) A_tree_tree_tree_tree$)
(declare-fun fun_app$k (Dir_list_nat_fun$ Dir_list$) Nat$)
(declare-fun list_ex1$ (Dir_bool_fun$) Dir_list_bool_fun$)
(declare-fun map_tree$ (A_tree_tree_tree_a_tree_tree_tree_fun$) A_tree_tree_tree_tree_a_tree_tree_tree_tree_fun$)
(declare-fun map_tree$a (A_tree_tree_a_tree_tree_fun$) A_tree_tree_tree_a_tree_tree_tree_fun$)
(declare-fun map_tree$b (A_a_fun$) A_tree_a_tree_fun$)
(declare-fun map_tree$c (A_tree_a_tree_fun$) A_tree_tree_a_tree_tree_fun$)
(declare-fun gen_length$ (Nat$) Dir_list_nat_fun$)
(declare-fun traverse_tree$ (Dir_list$) A_tree_a_tree_fun$)
(assert (! (not (= (traverse_tree$ nil$) id$)) :named a0))
(assert (! (forall ((?v0 A_tree_tree_tree$)) (! (= (fun_app$ id$a ?v0) ?v0) :pattern ((fun_app$ id$a ?v0)))) :named a1))
(assert (! (forall ((?v0 A_tree_tree$)) (! (= (fun_app$a id$b ?v0) ?v0) :pattern ((fun_app$a id$b ?v0)))) :named a2))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$b id$c ?v0) ?v0) :pattern ((fun_app$b id$c ?v0)))) :named a3))
(assert (! (forall ((?v0 A_tree$)) (! (= (fun_app$c id$ ?v0) ?v0) :pattern ((fun_app$c id$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_tree_tree_tree$)) (! (= (fun_app$ id$a ?v0) ?v0) :pattern ((fun_app$ id$a ?v0)))) :named a5))
(assert (! (forall ((?v0 A_tree_tree$)) (! (= (fun_app$a id$b ?v0) ?v0) :pattern ((fun_app$a id$b ?v0)))) :named a6))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$b id$c ?v0) ?v0) :pattern ((fun_app$b id$c ?v0)))) :named a7))
(assert (! (forall ((?v0 A_tree$)) (! (= (fun_app$c id$ ?v0) ?v0) :pattern ((fun_app$c id$ ?v0)))) :named a8))
(assert (! (= (map_tree$ id$a) id$d) :named a9))
(assert (! (= (map_tree$a id$b) id$a) :named a10))
(assert (! (= (map_tree$b id$c) id$) :named a11))
(assert (! (= (map_tree$c id$) id$b) :named a12))
(assert (! (forall ((?v0 Dir_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false)) :named a13))
(assert (! (forall ((?v0 Dir_dir_list_fun$)) (! (= (bind$ nil$ ?v0) nil$) :pattern ((bind$ nil$ ?v0)))) :named a14))
(assert (! (forall ((?v0 Dir_a_tree_tree_tree_a_tree_tree_tree_fun_fun$)) (! (= (fun_app$d (foldr$ ?v0) nil$) id$a) :pattern ((foldr$ ?v0)))) :named a15))
(assert (! (forall ((?v0 Dir_a_tree_tree_a_tree_tree_fun_fun$)) (! (= (fun_app$e (foldr$a ?v0) nil$) id$b) :pattern ((foldr$a ?v0)))) :named a16))
(assert (! (forall ((?v0 Dir_a_a_fun_fun$)) (! (= (fun_app$f (foldr$b ?v0) nil$) id$c) :pattern ((foldr$b ?v0)))) :named a17))
(assert (! (forall ((?v0 Dir_a_tree_a_tree_fun_fun$)) (! (= (fun_app$g (foldr$c ?v0) nil$) id$) :pattern ((foldr$c ?v0)))) :named a18))
(assert (! (forall ((?v0 Dir_bool_fun$)) (! (= (fun_app$h (list_ex1$ ?v0) nil$) false) :pattern ((list_ex1$ ?v0)))) :named a19))
(assert (! (forall ((?v0 Dir_a_tree_tree_tree_a_tree_tree_tree_fun_fun$)) (! (= (fun_app$d (fold$ ?v0) nil$) id$a) :pattern ((fold$ ?v0)))) :named a20))
(assert (! (forall ((?v0 Dir_a_tree_tree_a_tree_tree_fun_fun$)) (! (= (fun_app$e (fold$a ?v0) nil$) id$b) :pattern ((fold$a ?v0)))) :named a21))
(assert (! (forall ((?v0 Dir_a_a_fun_fun$)) (! (= (fun_app$f (fold$b ?v0) nil$) id$c) :pattern ((fold$b ?v0)))) :named a22))
(assert (! (forall ((?v0 Dir_a_tree_a_tree_fun_fun$)) (! (= (fun_app$g (fold$c ?v0) nil$) id$) :pattern ((fold$c ?v0)))) :named a23))
(assert (! (forall ((?v0 Dir$)) (! (= (fun_app$i (member$ nil$) ?v0) false) :pattern ((fun_app$i (member$ nil$) ?v0)))) :named a24))
(assert (! (forall ((?v0 A_tree_tree_tree_tree$)) (= (fun_app$j (map_tree$ id$a) ?v0) ?v0)) :named a25))
(assert (! (forall ((?v0 A_tree_tree_tree$)) (= (fun_app$ (map_tree$a id$b) ?v0) ?v0)) :named a26))
(assert (! (forall ((?v0 A_tree$)) (= (fun_app$c (map_tree$b id$c) ?v0) ?v0)) :named a27))
(assert (! (forall ((?v0 A_tree_tree$)) (= (fun_app$a (map_tree$c id$) ?v0) ?v0)) :named a28))
(assert (! (forall ((?v0 Dir_a_a_fun_fun$) (?v1 A$)) (! (= (fun_app$b (fun_app$f (fold$b ?v0) nil$) ?v1) ?v1) :pattern ((fun_app$b (fun_app$f (fold$b ?v0) nil$) ?v1)))) :named a29))
(assert (! (forall ((?v0 Dir_a_tree_tree_a_tree_tree_fun_fun$) (?v1 A_tree_tree$)) (! (= (fun_app$a (fun_app$e (fold$a ?v0) nil$) ?v1) ?v1) :pattern ((fun_app$a (fun_app$e (fold$a ?v0) nil$) ?v1)))) :named a30))
(assert (! (forall ((?v0 Dir_a_tree_a_tree_fun_fun$) (?v1 A_tree$)) (! (= (fun_app$c (fun_app$g (fold$c ?v0) nil$) ?v1) ?v1) :pattern ((fun_app$c (fun_app$g (fold$c ?v0) nil$) ?v1)))) :named a31))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$k (gen_length$ ?v0) nil$) ?v0) :pattern ((gen_length$ ?v0)))) :named a32))
(check-sat)
;(get-unsat-core)
