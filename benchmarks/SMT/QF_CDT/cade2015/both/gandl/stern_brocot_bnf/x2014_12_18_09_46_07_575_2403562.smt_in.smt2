; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 588
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_nat_nat_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_fun$ 0)
(declare-sort Nat_nat_nat_prod_nat_fun_fun$ 0)
(declare-sort Nat_nat_nat_nat_prod_nat_fun_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_nat_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod_nat_fun$ 0)
(declare-datatypes () ((Nat_nat_prod$ (pair$ (fst$ Nat$) (snd$ Nat$)))
  (Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$) (snd$a Nat_nat_prod$)))))
(declare-fun uu$ (Nat$ Nat$) Nat_nat_nat_fun_fun$)
(declare-fun det$ () Nat_nat_prod_nat_nat_prod_prod_nat_fun$)
(declare-fun one$ () Nat$)
(declare-fun uua$ () Nat_nat_nat_nat_prod_nat_fun_fun_fun$)
(declare-fun fmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun imat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun zero$ () Nat$)
(declare-fun lLmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun minus$ (Nat$ Nat$) Nat$)
(declare-fun times$ (Nat$ Nat$) Nat$)
(declare-fun uRmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun fun_app$ (Nat_nat_nat_prod_nat_fun_fun$ Nat$) Nat_nat_prod_nat_fun$)
(declare-fun fun_app$a (Nat_nat_nat_nat_prod_nat_fun_fun_fun$ Nat$) Nat_nat_nat_prod_nat_fun_fun$)
(declare-fun fun_app$b (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$c (Nat_nat_nat_fun_fun$ Nat$) Nat_nat_fun$)
(declare-fun fun_app$d (Nat_nat_prod_nat_nat_prod_prod_nat_fun$ Nat_nat_prod_nat_nat_prod_prod$) Nat$)
(declare-fun case_prod$ (Nat_nat_nat_fun_fun$) Nat_nat_prod_nat_fun$)
(declare-fun case_prod$a (Nat_nat_prod_nat_nat_prod_nat_fun_fun$) Nat_nat_prod_nat_nat_prod_prod_nat_fun$)
(declare-fun case_prod$b (Nat_nat_nat_nat_prod_nat_fun_fun_fun$) Nat_nat_prod_nat_nat_prod_nat_fun_fun$)
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (fun_app$a uua$ ?v0) ?v1) (case_prod$ (uu$ ?v0 ?v1))) :pattern ((fun_app$ (fun_app$a uua$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$b (fun_app$c (uu$ ?v0 ?v1) ?v2) ?v3) (minus$ (times$ ?v0 ?v3) (times$ ?v2 ?v1))) :pattern ((fun_app$b (fun_app$c (uu$ ?v0 ?v1) ?v2) ?v3)))) :named a1))
(assert (! (not (= (fun_app$d (case_prod$a (case_prod$b uua$)) (pair$a (pair$ one$ zero$) (pair$ zero$ one$))) one$)) :named a2))
(assert (! (= det$ (case_prod$a (case_prod$b uua$))) :named a3))
(assert (! (= fmat$ (pair$a (pair$ zero$ one$) (pair$ one$ zero$))) :named a4))
(assert (! (= imat$ (pair$a (pair$ one$ zero$) (pair$ zero$ one$))) :named a5))
(assert (! (= lLmat$ (pair$a (pair$ one$ one$) (pair$ zero$ one$))) :named a6))
(assert (! (= uRmat$ (pair$a (pair$ one$ zero$) (pair$ one$ one$))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= one$ (times$ ?v0 ?v1)) (and (= ?v0 one$) (= ?v1 one$)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (times$ ?v0 ?v1) one$) (and (= ?v0 one$) (= ?v1 one$)))) :named a9))
(assert (! (forall ((?v0 Nat$)) (= (times$ zero$ ?v0) zero$)) :named a10))
(assert (! (forall ((?v0 Nat$)) (= (times$ ?v0 zero$) zero$)) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (times$ ?v0 ?v1) zero$) (or (= ?v0 zero$) (= ?v1 zero$)))) :named a12))
(check-sat)
;(get-unsat-core)
