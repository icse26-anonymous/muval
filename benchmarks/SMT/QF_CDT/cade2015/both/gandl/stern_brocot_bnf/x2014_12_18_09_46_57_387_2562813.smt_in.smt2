; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 573
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-datatypes () ((Dir$ (l$) (r$))
  (Nat_nat_prod$ (pair$ (fst$ Nat$) (snd$ Nat$)))
  (Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$) (snd$a Nat_nat_prod$)))
  (Dir_list$ (nil$) (cons$ (hd$ Dir$) (tl$ Dir_list$)))))
(declare-fun d$ () Dir$)
(declare-fun d$a () Dir$)
(declare-fun ds$ () Dir_list$)
(declare-fun det$ (Nat_nat_prod_nat_nat_prod_prod$) Nat$)
(declare-fun ds$a () Dir_list$)
(declare-fun one$ () Nat$)
(declare-fun imat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun path$ () Dir_list$)
(declare-fun pref$ () Dir_list$)
(declare-fun lLmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun path$a () Dir_list$)
(declare-fun uRmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun append$ (Dir_list$ Dir_list$) Dir_list$)
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod$)
(assert (! (not false) :named a0))
(assert (! (not (= d$ d$a)) :named a1))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ (mulmat$ ?v0 ?v1) ?v2) (mulmat$ ?v0 (mulmat$ ?v1 ?v2)))) :named a2))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ ?v0 imat$) ?v0)) :named a3))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ imat$ ?v0) ?v0)) :named a4))
(assert (! (= path$ (append$ pref$ (cons$ d$ ds$))) :named a5))
(assert (! (= path$a (append$ pref$ (cons$ d$a ds$a))) :named a6))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (= (det$ ?v0) one$) (= (det$ (mulmat$ ?v0 lLmat$)) one$))) :named a7))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (= (det$ ?v0) one$) (= (det$ (mulmat$ ?v0 uRmat$)) one$))) :named a8))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (= (det$ ?v0) one$) (= (det$ (mulmat$ lLmat$ ?v0)) one$))) :named a9))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (= (det$ ?v0) one$) (= (det$ (mulmat$ uRmat$ ?v0)) one$))) :named a10))
(assert (! (= (det$ uRmat$) one$) :named a11))
(assert (! (= (det$ lLmat$) one$) :named a12))
(assert (! (= (det$ imat$) one$) :named a13))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$) (?v2 Dir_list$)) (= (append$ (append$ ?v0 ?v1) ?v2) (append$ ?v0 (append$ ?v1 ?v2)))) :named a14))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$) (?v2 Dir_list$)) (= (= (append$ ?v0 ?v1) (append$ ?v2 ?v1)) (= ?v0 ?v2))) :named a15))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$) (?v2 Dir_list$)) (= (= (append$ ?v0 ?v1) (append$ ?v0 ?v2)) (= ?v1 ?v2))) :named a16))
(assert (! (forall ((?v0 Dir$) (?v1 Dir_list$) (?v2 Dir$) (?v3 Dir_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a17))
(check-sat)
;(get-unsat-core)
