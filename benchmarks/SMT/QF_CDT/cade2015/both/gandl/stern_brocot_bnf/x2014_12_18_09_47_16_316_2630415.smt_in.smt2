; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 498
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-fun f$ () A_a_fun$)
(declare-fun x$ () A$)
(declare-fun xa$ () A$)
(declare-fun xs$ () A_stream$)
(declare-fun xsa$ () A_stream$)
(declare-fun smap$ (A_a_fun$ A_stream$) A_stream$)
(declare-fun fun_app$ (A_a_fun$ A$) A$)
(declare-fun sfilter$ (A_bool_fun$ A_stream$) A_stream$)
(declare-fun smember$ (A$) A_stream_bool_fun$)
(declare-fun fun_app$a (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun siterate$ (A_a_fun$ A$) A_stream$)
(declare-fun streamsp$ (A_bool_fun$) A_stream_bool_fun$)
(declare-fun stream_all$ (A_bool_fun$) A_stream_bool_fun$)
(declare-fun pred_stream$ (A_bool_fun$) A_stream_bool_fun$)
(declare-fun sinterleave$ (A_stream$ A_stream$) A_stream$)
(assert (! (not (= (smap$ f$ xsa$) (sCons$ (fun_app$ f$ xa$) (smap$ f$ (smap$ f$ xsa$))))) :named a0))
(assert (! (= xsa$ (sCons$ xa$ (smap$ f$ xsa$))) :named a1))
(assert (! (= xs$ (sCons$ x$ (smap$ f$ xs$))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a3))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (smap$ ?v0 (sCons$ ?v1 ?v2)) (sCons$ (fun_app$ ?v0 ?v1) (smap$ ?v0 ?v2))) :pattern ((smap$ ?v0 (sCons$ ?v1 ?v2))))) :named a4))
(assert (! (forall ((?v0 A_stream$)) (=> (forall ((?v1 A$) (?v2 A_stream$)) (=> (= ?v0 (sCons$ ?v1 ?v2)) false)) false)) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$a (smember$ ?v0) (sCons$ ?v1 ?v2)) (ite (= ?v0 ?v1) true (fun_app$a (smember$ ?v0) ?v2))) :pattern ((fun_app$a (smember$ ?v0) (sCons$ ?v1 ?v2))))) :named a6))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$a (pred_stream$ ?v0) (sCons$ ?v1 ?v2)) (and (fun_app$b ?v0 ?v1) (fun_app$a (pred_stream$ ?v0) ?v2))) :pattern ((fun_app$a (pred_stream$ ?v0) (sCons$ ?v1 ?v2))))) :named a7))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (smap$ ?v0 (siterate$ ?v0 ?v1)) (siterate$ ?v0 (fun_app$ ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$a (stream_all$ ?v0) (sCons$ ?v1 ?v2)) (and (fun_app$b ?v0 ?v1) (fun_app$a (stream_all$ ?v0) ?v2))) :pattern ((fun_app$a (stream_all$ ?v0) (sCons$ ?v1 ?v2))))) :named a9))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (= (fun_app$a (streamsp$ ?v0) ?v1) (exists ((?v2 A$) (?v3 A_stream$)) (and (= ?v1 (sCons$ ?v2 ?v3)) (and (fun_app$b ?v0 ?v2) (fun_app$a (streamsp$ ?v0) ?v3)))))) :named a10))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (=> (and (fun_app$a (streamsp$ ?v0) ?v1) (forall ((?v2 A$) (?v3 A_stream$)) (=> (and (= ?v1 (sCons$ ?v2 ?v3)) (and (fun_app$b ?v0 ?v2) (fun_app$a (streamsp$ ?v0) ?v3))) false))) false)) :named a11))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$) (?v2 A_bool_fun$)) (=> (and (fun_app$a ?v0 ?v1) (forall ((?v3 A_stream$)) (=> (fun_app$a ?v0 ?v3) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v3 (sCons$ ?v4 ?v5)) (and (fun_app$b ?v2 ?v4) (or (fun_app$a ?v0 ?v5) (fun_app$a (streamsp$ ?v2) ?v5)))))))) (fun_app$a (streamsp$ ?v2) ?v1))) :named a12))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (sfilter$ ?v0 (sCons$ ?v1 ?v2)) (ite (fun_app$b ?v0 ?v1) (sCons$ ?v1 (sfilter$ ?v0 ?v2)) (sfilter$ ?v0 ?v2))) :pattern ((sfilter$ ?v0 (sCons$ ?v1 ?v2))))) :named a13))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (siterate$ ?v0 ?v1) (sCons$ ?v1 (siterate$ ?v0 (fun_app$ ?v0 ?v1))))) :named a14))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (smap$ ?v0 (siterate$ ?v0 ?v1)) (siterate$ ?v0 (fun_app$ ?v0 ?v1)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A_stream$)) (! (= (sinterleave$ (sCons$ ?v0 ?v1) ?v2) (sCons$ ?v0 (sinterleave$ ?v2 ?v1))) :pattern ((sinterleave$ (sCons$ ?v0 ?v1) ?v2)))) :named a16))
(check-sat)
;(get-unsat-core)
