; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 565
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-codatatypes () ((Nat_tree$ (node$ (root$ Nat$) (left$ Nat_tree$) (right$ Nat_tree$)))
  (Nat_tree_tree$ (node$a (root$a Nat_tree$) (left$a Nat_tree_tree$) (right$a Nat_tree_tree$)))
  (Nat_tree_tree_tree$ (node$b (root$b Nat_tree_tree$) (left$b Nat_tree_tree_tree$) (right$b Nat_tree_tree_tree$)))
  (Nat_tree_tree_tree_tree$ (node$c (root$c Nat_tree_tree_tree$) (left$c Nat_tree_tree_tree_tree$) (right$c Nat_tree_tree_tree_tree$)))))
(declare-fun den$ () Nat_tree$)
(declare-fun mod$ (Nat_tree$ Nat_tree$) Nat_tree$)
(declare-fun num$ () Nat_tree$)
(declare-fun mod$a (Nat$) Nat_nat_fun$)
(declare-fun mod$b (Nat_tree_tree_tree_tree$ Nat_tree_tree_tree_tree$) Nat_tree_tree_tree_tree$)
(declare-fun mod$c (Nat_tree_tree_tree$ Nat_tree_tree_tree$) Nat_tree_tree_tree$)
(declare-fun mod$d (Nat_tree_tree$ Nat_tree_tree$) Nat_tree_tree$)
(declare-fun plus$ (Nat_tree$ Nat_tree$) Nat_tree$)
(declare-fun zero$ () Nat$)
(declare-fun plus$a (Nat$ Nat$) Nat$)
(declare-fun fIXME_x$ () Nat_tree$)
(declare-fun fun_app$ (Nat_nat_fun$ Nat$) Nat$)
(declare-fun tree_chop$ (Nat_tree$) Nat_tree$)
(assert (! (not (= (mod$ num$ den$) fIXME_x$)) :named a0))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (mod$a (fun_app$ (mod$a ?v0) ?v1)) ?v1) (fun_app$ (mod$a ?v0) ?v1))) :named a1))
(assert (! (= den$ (tree_chop$ num$)) :named a2))
(assert (! (forall ((?v0 Nat_tree_tree_tree_tree$) (?v1 Nat_tree_tree_tree_tree$)) (= (root$c (mod$b ?v0 ?v1)) (mod$c (root$c ?v0) (root$c ?v1)))) :named a3))
(assert (! (forall ((?v0 Nat_tree_tree_tree$) (?v1 Nat_tree_tree_tree$)) (= (root$b (mod$c ?v0 ?v1)) (mod$d (root$b ?v0) (root$b ?v1)))) :named a4))
(assert (! (forall ((?v0 Nat_tree_tree$) (?v1 Nat_tree_tree$)) (= (root$a (mod$d ?v0 ?v1)) (mod$ (root$a ?v0) (root$a ?v1)))) :named a5))
(assert (! (forall ((?v0 Nat_tree$) (?v1 Nat_tree$)) (= (root$ (mod$ ?v0 ?v1)) (fun_app$ (mod$a (root$ ?v0)) (root$ ?v1)))) :named a6))
(assert (! (= (left$ fIXME_x$) num$) :named a7))
(assert (! (forall ((?v0 Nat_tree_tree_tree$) (?v1 Nat_tree_tree_tree$)) (= (right$b (mod$c ?v0 ?v1)) (mod$c (right$b ?v0) (right$b ?v1)))) :named a8))
(assert (! (forall ((?v0 Nat_tree_tree$) (?v1 Nat_tree_tree$)) (= (right$a (mod$d ?v0 ?v1)) (mod$d (right$a ?v0) (right$a ?v1)))) :named a9))
(assert (! (forall ((?v0 Nat_tree$) (?v1 Nat_tree$)) (= (right$ (mod$ ?v0 ?v1)) (mod$ (right$ ?v0) (right$ ?v1)))) :named a10))
(assert (! (forall ((?v0 Nat_tree_tree_tree$) (?v1 Nat_tree_tree_tree$)) (= (left$b (mod$c ?v0 ?v1)) (mod$c (left$b ?v0) (left$b ?v1)))) :named a11))
(assert (! (forall ((?v0 Nat_tree_tree$) (?v1 Nat_tree_tree$)) (= (left$a (mod$d ?v0 ?v1)) (mod$d (left$a ?v0) (left$a ?v1)))) :named a12))
(assert (! (forall ((?v0 Nat_tree$) (?v1 Nat_tree$)) (= (left$ (mod$ ?v0 ?v1)) (mod$ (left$ ?v0) (left$ ?v1)))) :named a13))
(assert (! (= (right$ den$) den$) :named a14))
(assert (! (= (left$ num$) num$) :named a15))
(assert (! (= (right$ fIXME_x$) fIXME_x$) :named a16))
(assert (! (forall ((?v0 Nat_tree$) (?v1 Nat_tree$)) (= (mod$ (plus$ ?v0 ?v1) ?v1) (mod$ ?v0 ?v1))) :named a17))
(assert (! (= fIXME_x$ (node$ zero$ num$ fIXME_x$)) :named a18))
(assert (! (forall ((?v0 Nat_tree$)) (=> (= ?v0 (node$ zero$ num$ ?v0)) (= ?v0 fIXME_x$))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_tree$) (?v2 Nat_tree$) (?v3 Nat$) (?v4 Nat_tree$) (?v5 Nat_tree$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a20))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (mod$a zero$) ?v0) zero$)) :named a21))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (mod$a ?v0) ?v0) zero$) :pattern ((mod$a ?v0)))) :named a22))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (mod$a ?v0) zero$) ?v0)) :named a23))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (mod$a (plus$a ?v0 ?v1)) ?v0) (fun_app$ (mod$a ?v1) ?v0))) :named a24))
(check-sat)
;(get-unsat-core)
