; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 513
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_a_fun_set$ 0)
(declare-sort A_b_fun_set$ 0)
(declare-sort B_a_fun_set$ 0)
(declare-sort B_b_fun_set$ 0)
(declare-sort A_a_b_fun_fun$ 0)
(declare-sort A_b_fun_a_fun$ 0)
(declare-sort A_b_fun_b_fun$ 0)
(declare-sort B_a_b_fun_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_b_fun_bool_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort A_a_b_fun_fun_set$ 0)
(declare-sort A_b_fun_a_b_fun_fun$ 0)
(declare-sort A_a_b_fun_bool_fun_fun$ 0)
(declare-sort A_b_fun_a_bool_fun_fun$ 0)
(declare-sort A_b_fun_b_bool_fun_fun$ 0)
(declare-sort B_a_b_fun_bool_fun_fun$ 0)
(declare-sort A_b_fun_a_b_fun_fun_set$ 0)
(declare-sort A_a_b_fun_a_b_fun_fun_fun$ 0)
(declare-sort A_b_fun_a_b_fun_fun_a_fun$ 0)
(declare-sort B_a_b_fun_a_b_fun_fun_fun$ 0)
(declare-sort A_b_fun_a_b_fun_bool_fun_fun$ 0)
(declare-sort A_b_fun_a_b_fun_fun_bool_fun$ 0)
(declare-sort A_a_b_fun_a_b_fun_fun_fun_set$ 0)
(declare-sort A_b_fun_a_b_fun_fun_b_bool_fun_fun$ 0)
(declare-sort B_a_b_fun_a_b_fun_fun_bool_fun_fun$ 0)
(declare-codatatypes () ((A_b_fun_tree$ (node$ (select$ A_b_fun$) (selecta$ A_b_fun_tree$) (selectb$ A_b_fun_tree$)))
  (B_tree$ (node$a (root$ B$) (left$ B_tree$) (right$ B_tree$)))
  (A_tree$ (node$b (root$a A$) (left$a A_tree$) (right$a A_tree$)))
  (A_b_fun_a_b_fun_fun_tree$ (node$c (selectc$ A_b_fun_a_b_fun_fun$) (selectd$ A_b_fun_a_b_fun_fun_tree$) (selecte$ A_b_fun_a_b_fun_fun_tree$)))
  (B_b_fun_tree$ (node$d (selectf$ B_b_fun$) (selectg$ B_b_fun_tree$) (selecth$ B_b_fun_tree$)))
  (B_a_fun_tree$ (node$e (selecti$ B_a_fun$) (selectj$ B_a_fun_tree$) (selectk$ B_a_fun_tree$)))
  (A_a_fun_tree$ (node$f (selectl$ A_a_fun$) (selectm$ A_a_fun_tree$) (selectn$ A_a_fun_tree$)))
  (B_a_b_fun_fun_tree$ (node$g (selecto$ B_a_b_fun_fun$) (selectp$ B_a_b_fun_fun_tree$) (selectq$ B_a_b_fun_fun_tree$)))
  (A_a_b_fun_fun_tree$ (node$h (selectr$ A_a_b_fun_fun$) (selects$ A_a_b_fun_fun_tree$) (selectt$ A_a_b_fun_fun_tree$)))
  (A_b_fun_b_fun_tree$ (node$i (selectu$ A_b_fun_b_fun$) (selectv$ A_b_fun_b_fun_tree$) (selectw$ A_b_fun_b_fun_tree$)))
  (A_b_fun_a_fun_tree$ (node$j (selectx$ A_b_fun_a_fun$) (selecty$ A_b_fun_a_fun_tree$) (selectz$ A_b_fun_a_fun_tree$)))
  (B_a_b_fun_a_b_fun_fun_fun_tree$ (node$k (selecua$ B_a_b_fun_a_b_fun_fun_fun$) (selecub$ B_a_b_fun_a_b_fun_fun_fun_tree$) (selecuc$ B_a_b_fun_a_b_fun_fun_fun_tree$)))
  (A_a_b_fun_a_b_fun_fun_fun_tree$ (node$l (selecud$ A_a_b_fun_a_b_fun_fun_fun$) (selecue$ A_a_b_fun_a_b_fun_fun_fun_tree$) (selecuf$ A_a_b_fun_a_b_fun_fun_fun_tree$)))))
(declare-fun fa$ () A_b_fun_tree$)
(declare-fun ga$ () A_b_fun_tree$)
(declare-fun left$b (B_b_fun_tree$) B_b_fun_tree$)
(declare-fun left$c (B_a_fun_tree$) B_a_fun_tree$)
(declare-fun left$d (A_a_b_fun_a_b_fun_fun_fun_tree$) A_a_b_fun_a_b_fun_fun_fun_tree$)
(declare-fun left$e (A_a_b_fun_fun_tree$) A_a_b_fun_fun_tree$)
(declare-fun left$f (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun left$g (A_b_fun_a_b_fun_fun_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun left$h (A_b_fun_tree$) A_b_fun_tree$)
(declare-fun root$b (A_b_fun_tree$) A_b_fun$)
(declare-fun root$c (A_b_fun_a_b_fun_fun_tree$) A_b_fun_a_b_fun_fun$)
(declare-fun root$d (B_b_fun_tree$) B_b_fun$)
(declare-fun root$e (B_a_fun_tree$) B_a_fun$)
(declare-fun root$f (A_a_fun_tree$) A_a_fun$)
(declare-fun root$g (B_a_b_fun_fun_tree$) B_a_b_fun_fun$)
(declare-fun root$h (A_a_b_fun_fun_tree$) A_a_b_fun_fun$)
(declare-fun root$i (A_b_fun_b_fun_tree$) A_b_fun_b_fun$)
(declare-fun root$j (A_b_fun_a_fun_tree$) A_b_fun_a_fun$)
(declare-fun root$k (B_a_b_fun_a_b_fun_fun_fun_tree$) B_a_b_fun_a_b_fun_fun_fun$)
(declare-fun root$l (A_a_b_fun_a_b_fun_fun_fun_tree$) A_a_b_fun_a_b_fun_fun_fun$)
(declare-fun member$ (B_b_fun$ B_b_fun_set$) Bool)
(declare-fun right$b (B_b_fun_tree$) B_b_fun_tree$)
(declare-fun right$c (B_a_fun_tree$) B_a_fun_tree$)
(declare-fun right$d (A_a_b_fun_a_b_fun_fun_fun_tree$) A_a_b_fun_a_b_fun_fun_fun_tree$)
(declare-fun right$e (A_a_b_fun_fun_tree$) A_a_b_fun_fun_tree$)
(declare-fun right$f (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun right$g (A_b_fun_a_b_fun_fun_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun right$h (A_b_fun_tree$) A_b_fun_tree$)
(declare-fun fun_app$ (A_b_fun$ A$) B$)
(declare-fun member$a (B_a_fun$ B_a_fun_set$) Bool)
(declare-fun member$b (A_a_b_fun_a_b_fun_fun_fun$ A_a_b_fun_a_b_fun_fun_fun_set$) Bool)
(declare-fun member$c (A_a_b_fun_fun$ A_a_b_fun_fun_set$) Bool)
(declare-fun member$d (A_a_fun$ A_a_fun_set$) Bool)
(declare-fun member$e (A_b_fun_a_b_fun_fun$ A_b_fun_a_b_fun_fun_set$) Bool)
(declare-fun member$f (B$ B_set$) Bool)
(declare-fun member$g (A$ A_set$) Bool)
(declare-fun member$h (A_b_fun$ A_b_fun_set$) Bool)
(declare-fun tree_ap$ (A_b_fun_tree$ A_tree$) B_tree$)
(declare-fun fun_app$a (A_b_fun_a_b_fun_fun$ A_b_fun$) A_b_fun$)
(declare-fun fun_app$b (B_b_fun$ B$) B$)
(declare-fun fun_app$c (B_a_fun$ B$) A$)
(declare-fun fun_app$d (A_a_fun$ A$) A$)
(declare-fun fun_app$e (B_a_b_fun_fun$ B$) A_b_fun$)
(declare-fun fun_app$f (A_a_b_fun_fun$ A$) A_b_fun$)
(declare-fun fun_app$g (A_b_fun_b_fun$ A_b_fun$) B$)
(declare-fun fun_app$h (A_b_fun_a_fun$ A_b_fun$) A$)
(declare-fun fun_app$i (B_a_b_fun_a_b_fun_fun_fun$ B$) A_b_fun_a_b_fun_fun$)
(declare-fun fun_app$j (A_b_fun_bool_fun$ A_b_fun$) Bool)
(declare-fun fun_app$k (A_b_fun_a_b_fun_bool_fun_fun$ A_b_fun$) A_b_fun_bool_fun$)
(declare-fun fun_app$l (B_bool_fun$ B$) Bool)
(declare-fun fun_app$m (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$n (A_bool_fun$ A$) Bool)
(declare-fun fun_app$o (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$p (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$q (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$r (A_b_fun_b_bool_fun_fun$ A_b_fun$) B_bool_fun$)
(declare-fun fun_app$s (A_b_fun_a_bool_fun_fun$ A_b_fun$) A_bool_fun$)
(declare-fun fun_app$t (B_a_b_fun_bool_fun_fun$ B$) A_b_fun_bool_fun$)
(declare-fun fun_app$u (A_a_b_fun_bool_fun_fun$ A$) A_b_fun_bool_fun$)
(declare-fun fun_app$v (A_b_fun_a_b_fun_fun_b_bool_fun_fun$ A_b_fun_a_b_fun_fun$) B_bool_fun$)
(declare-fun fun_app$w (A_b_fun_a_b_fun_fun_bool_fun$ A_b_fun_a_b_fun_fun$) Bool)
(declare-fun fun_app$x (B_a_b_fun_a_b_fun_fun_bool_fun_fun$ B$) A_b_fun_a_b_fun_fun_bool_fun$)
(declare-fun map_tree$ (A_b_fun_a_b_fun_fun$ A_b_fun_tree$) A_b_fun_tree$)
(declare-fun rel_tree$ (A_b_fun_a_b_fun_bool_fun_fun$ A_b_fun_tree$ A_b_fun_tree$) Bool)
(declare-fun set_tree$ (B_b_fun_tree$) B_b_fun_set$)
(declare-fun tree_ap$a (A_b_fun_a_b_fun_fun_tree$ A_b_fun_tree$) A_b_fun_tree$)
(declare-fun tree_ap$b (B_b_fun_tree$ B_tree$) B_tree$)
(declare-fun tree_ap$c (B_a_fun_tree$ B_tree$) A_tree$)
(declare-fun tree_ap$d (A_a_fun_tree$ A_tree$) A_tree$)
(declare-fun tree_ap$e (B_a_b_fun_fun_tree$ B_tree$) A_b_fun_tree$)
(declare-fun tree_ap$f (A_a_b_fun_fun_tree$ A_tree$) A_b_fun_tree$)
(declare-fun tree_ap$g (A_b_fun_b_fun_tree$ A_b_fun_tree$) B_tree$)
(declare-fun tree_ap$h (A_b_fun_a_fun_tree$ A_b_fun_tree$) A_tree$)
(declare-fun tree_ap$i (B_a_b_fun_a_b_fun_fun_fun_tree$ B_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun map_tree$a (B_b_fun$ B_tree$) B_tree$)
(declare-fun map_tree$b (A_b_fun$ A_tree$) B_tree$)
(declare-fun map_tree$c (B_a_fun$ B_tree$) A_tree$)
(declare-fun map_tree$d (A_a_fun$ A_tree$) A_tree$)
(declare-fun map_tree$e (B_a_b_fun_fun$ B_tree$) A_b_fun_tree$)
(declare-fun map_tree$f (A_a_b_fun_fun$ A_tree$) A_b_fun_tree$)
(declare-fun map_tree$g (A_b_fun_b_fun$ A_b_fun_tree$) B_tree$)
(declare-fun map_tree$h (A_b_fun_a_fun$ A_b_fun_tree$) A_tree$)
(declare-fun map_tree$i (B_a_b_fun_a_b_fun_fun_fun$ B_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun map_tree$j (A_b_fun_a_b_fun_fun_a_fun$ A_b_fun_a_b_fun_fun_tree$) A_tree$)
(declare-fun map_tree$k (A_a_b_fun_a_b_fun_fun_fun$ A_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun rel_tree$a (B_b_bool_fun_fun$ B_tree$ B_tree$) Bool)
(declare-fun rel_tree$b (B_a_bool_fun_fun$ B_tree$ A_tree$) Bool)
(declare-fun rel_tree$c (A_b_bool_fun_fun$ A_tree$ B_tree$) Bool)
(declare-fun rel_tree$d (A_a_bool_fun_fun$ A_tree$ A_tree$) Bool)
(declare-fun rel_tree$e (A_b_fun_b_bool_fun_fun$ A_b_fun_tree$ B_tree$) Bool)
(declare-fun rel_tree$f (A_b_fun_a_bool_fun_fun$ A_b_fun_tree$ A_tree$) Bool)
(declare-fun rel_tree$g (B_a_b_fun_bool_fun_fun$ B_tree$ A_b_fun_tree$) Bool)
(declare-fun rel_tree$h (A_a_b_fun_bool_fun_fun$ A_tree$ A_b_fun_tree$) Bool)
(declare-fun rel_tree$i (A_b_fun_a_b_fun_fun_b_bool_fun_fun$ A_b_fun_a_b_fun_fun_tree$ B_tree$) Bool)
(declare-fun rel_tree$j (B_a_b_fun_a_b_fun_fun_bool_fun_fun$ B_tree$ A_b_fun_a_b_fun_fun_tree$) Bool)
(declare-fun set_tree$a (B_a_fun_tree$) B_a_fun_set$)
(declare-fun set_tree$b (A_a_b_fun_a_b_fun_fun_fun_tree$) A_a_b_fun_a_b_fun_fun_fun_set$)
(declare-fun set_tree$c (A_a_b_fun_fun_tree$) A_a_b_fun_fun_set$)
(declare-fun set_tree$d (A_a_fun_tree$) A_a_fun_set$)
(declare-fun set_tree$e (A_b_fun_a_b_fun_fun_tree$) A_b_fun_a_b_fun_fun_set$)
(declare-fun set_tree$f (B_tree$) B_set$)
(declare-fun set_tree$g (A_tree$) A_set$)
(declare-fun set_tree$h (A_b_fun_tree$) A_b_fun_set$)
(declare-fun tree_pure$ (A$) A_tree$)
(declare-fun tree_pure$a (B_b_fun$) B_b_fun_tree$)
(declare-fun tree_pure$b (B_a_fun$) B_a_fun_tree$)
(declare-fun tree_pure$c (A_a_b_fun_a_b_fun_fun_fun$) A_a_b_fun_a_b_fun_fun_fun_tree$)
(declare-fun tree_pure$d (A_a_b_fun_fun$) A_a_b_fun_fun_tree$)
(declare-fun tree_pure$e (A_a_fun$) A_a_fun_tree$)
(declare-fun tree_pure$f (A_b_fun_a_b_fun_fun$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun tree_pure$g (B$) B_tree$)
(declare-fun tree_pure$h (A_b_fun$) A_b_fun_tree$)
(assert (! (not (= (root$b fa$) (root$b ga$))) :named a0))
(assert (! (forall ((?v0 A$)) (= (tree_ap$ fa$ (tree_pure$ ?v0)) (tree_ap$ ga$ (tree_pure$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_b_fun_tree$) (?v1 A_tree$)) (= (root$ (tree_ap$ ?v0 ?v1)) (fun_app$ (root$b ?v0) (root$a ?v1)))) :named a2))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$) (?v1 A_b_fun_tree$)) (= (root$b (tree_ap$a ?v0 ?v1)) (fun_app$a (root$c ?v0) (root$b ?v1)))) :named a3))
(assert (! (forall ((?v0 B_b_fun_tree$) (?v1 B_tree$)) (= (root$ (tree_ap$b ?v0 ?v1)) (fun_app$b (root$d ?v0) (root$ ?v1)))) :named a4))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_tree$)) (= (root$a (tree_ap$c ?v0 ?v1)) (fun_app$c (root$e ?v0) (root$ ?v1)))) :named a5))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (root$a (tree_ap$d ?v0 ?v1)) (fun_app$d (root$f ?v0) (root$a ?v1)))) :named a6))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$) (?v1 B_tree$)) (= (root$b (tree_ap$e ?v0 ?v1)) (fun_app$e (root$g ?v0) (root$ ?v1)))) :named a7))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree$) (?v1 A_tree$)) (= (root$b (tree_ap$f ?v0 ?v1)) (fun_app$f (root$h ?v0) (root$a ?v1)))) :named a8))
(assert (! (forall ((?v0 A_b_fun_b_fun_tree$) (?v1 A_b_fun_tree$)) (= (root$ (tree_ap$g ?v0 ?v1)) (fun_app$g (root$i ?v0) (root$b ?v1)))) :named a9))
(assert (! (forall ((?v0 A_b_fun_a_fun_tree$) (?v1 A_b_fun_tree$)) (= (root$a (tree_ap$h ?v0 ?v1)) (fun_app$h (root$j ?v0) (root$b ?v1)))) :named a10))
(assert (! (forall ((?v0 B_a_b_fun_a_b_fun_fun_fun_tree$) (?v1 B_tree$)) (= (root$c (tree_ap$i ?v0 ?v1)) (fun_app$i (root$k ?v0) (root$ ?v1)))) :named a11))
(assert (! (forall ((?v0 B_b_fun$)) (= (root$d (tree_pure$a ?v0)) ?v0)) :named a12))
(assert (! (forall ((?v0 B_a_fun$)) (= (root$e (tree_pure$b ?v0)) ?v0)) :named a13))
(assert (! (forall ((?v0 A_a_b_fun_a_b_fun_fun_fun$)) (= (root$l (tree_pure$c ?v0)) ?v0)) :named a14))
(assert (! (forall ((?v0 A_a_b_fun_fun$)) (= (root$h (tree_pure$d ?v0)) ?v0)) :named a15))
(assert (! (forall ((?v0 A_a_fun$)) (= (root$f (tree_pure$e ?v0)) ?v0)) :named a16))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$)) (= (root$c (tree_pure$f ?v0)) ?v0)) :named a17))
(assert (! (forall ((?v0 B$)) (= (root$ (tree_pure$g ?v0)) ?v0)) :named a18))
(assert (! (forall ((?v0 A_b_fun$)) (= (root$b (tree_pure$h ?v0)) ?v0)) :named a19))
(assert (! (forall ((?v0 A$)) (= (root$a (tree_pure$ ?v0)) ?v0)) :named a20))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$) (?v1 A_b_fun_tree$)) (= (root$b (map_tree$ ?v0 ?v1)) (fun_app$a ?v0 (root$b ?v1)))) :named a21))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_tree$)) (= (root$ (map_tree$a ?v0 ?v1)) (fun_app$b ?v0 (root$ ?v1)))) :named a22))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_tree$)) (= (root$ (map_tree$b ?v0 ?v1)) (fun_app$ ?v0 (root$a ?v1)))) :named a23))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_tree$)) (= (root$a (map_tree$c ?v0 ?v1)) (fun_app$c ?v0 (root$ ?v1)))) :named a24))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (root$a (map_tree$d ?v0 ?v1)) (fun_app$d ?v0 (root$a ?v1)))) :named a25))
(assert (! (forall ((?v0 B_a_b_fun_fun$) (?v1 B_tree$)) (= (root$b (map_tree$e ?v0 ?v1)) (fun_app$e ?v0 (root$ ?v1)))) :named a26))
(assert (! (forall ((?v0 A_a_b_fun_fun$) (?v1 A_tree$)) (= (root$b (map_tree$f ?v0 ?v1)) (fun_app$f ?v0 (root$a ?v1)))) :named a27))
(assert (! (forall ((?v0 A_b_fun_b_fun$) (?v1 A_b_fun_tree$)) (= (root$ (map_tree$g ?v0 ?v1)) (fun_app$g ?v0 (root$b ?v1)))) :named a28))
(assert (! (forall ((?v0 A_b_fun_a_fun$) (?v1 A_b_fun_tree$)) (= (root$a (map_tree$h ?v0 ?v1)) (fun_app$h ?v0 (root$b ?v1)))) :named a29))
(assert (! (forall ((?v0 B_a_b_fun_a_b_fun_fun_fun$) (?v1 B_tree$)) (= (root$c (map_tree$i ?v0 ?v1)) (fun_app$i ?v0 (root$ ?v1)))) :named a30))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$) (?v1 A_b_fun_tree$)) (= (root$b (map_tree$ ?v0 ?v1)) (fun_app$a ?v0 (root$b ?v1)))) :named a31))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_tree$)) (= (root$ (map_tree$a ?v0 ?v1)) (fun_app$b ?v0 (root$ ?v1)))) :named a32))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_tree$)) (= (root$ (map_tree$b ?v0 ?v1)) (fun_app$ ?v0 (root$a ?v1)))) :named a33))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_tree$)) (= (root$a (map_tree$c ?v0 ?v1)) (fun_app$c ?v0 (root$ ?v1)))) :named a34))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (root$a (map_tree$d ?v0 ?v1)) (fun_app$d ?v0 (root$a ?v1)))) :named a35))
(assert (! (forall ((?v0 B_a_b_fun_fun$) (?v1 B_tree$)) (= (root$b (map_tree$e ?v0 ?v1)) (fun_app$e ?v0 (root$ ?v1)))) :named a36))
(assert (! (forall ((?v0 A_a_b_fun_fun$) (?v1 A_tree$)) (= (root$b (map_tree$f ?v0 ?v1)) (fun_app$f ?v0 (root$a ?v1)))) :named a37))
(assert (! (forall ((?v0 A_b_fun_b_fun$) (?v1 A_b_fun_tree$)) (= (root$ (map_tree$g ?v0 ?v1)) (fun_app$g ?v0 (root$b ?v1)))) :named a38))
(assert (! (forall ((?v0 A_b_fun_a_fun$) (?v1 A_b_fun_tree$)) (= (root$a (map_tree$h ?v0 ?v1)) (fun_app$h ?v0 (root$b ?v1)))) :named a39))
(assert (! (forall ((?v0 B_a_b_fun_a_b_fun_fun_fun$) (?v1 B_tree$)) (= (root$c (map_tree$i ?v0 ?v1)) (fun_app$i ?v0 (root$ ?v1)))) :named a40))
(assert (! (forall ((?v0 B_b_fun_tree$)) (member$ (root$d ?v0) (set_tree$ ?v0))) :named a41))
(assert (! (forall ((?v0 B_a_fun_tree$)) (member$a (root$e ?v0) (set_tree$a ?v0))) :named a42))
(assert (! (forall ((?v0 A_a_b_fun_a_b_fun_fun_fun_tree$)) (member$b (root$l ?v0) (set_tree$b ?v0))) :named a43))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree$)) (member$c (root$h ?v0) (set_tree$c ?v0))) :named a44))
(assert (! (forall ((?v0 A_a_fun_tree$)) (member$d (root$f ?v0) (set_tree$d ?v0))) :named a45))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$)) (member$e (root$c ?v0) (set_tree$e ?v0))) :named a46))
(assert (! (forall ((?v0 B_tree$)) (member$f (root$ ?v0) (set_tree$f ?v0))) :named a47))
(assert (! (forall ((?v0 A_tree$)) (member$g (root$a ?v0) (set_tree$g ?v0))) :named a48))
(assert (! (forall ((?v0 A_b_fun_tree$)) (member$h (root$b ?v0) (set_tree$h ?v0))) :named a49))
(assert (! (forall ((?v0 B_b_fun_tree$)) (member$ (root$d ?v0) (set_tree$ ?v0))) :named a50))
(assert (! (forall ((?v0 B_a_fun_tree$)) (member$a (root$e ?v0) (set_tree$a ?v0))) :named a51))
(assert (! (forall ((?v0 A_a_b_fun_a_b_fun_fun_fun_tree$)) (member$b (root$l ?v0) (set_tree$b ?v0))) :named a52))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree$)) (member$c (root$h ?v0) (set_tree$c ?v0))) :named a53))
(assert (! (forall ((?v0 A_a_fun_tree$)) (member$d (root$f ?v0) (set_tree$d ?v0))) :named a54))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$)) (member$e (root$c ?v0) (set_tree$e ?v0))) :named a55))
(assert (! (forall ((?v0 B_tree$)) (member$f (root$ ?v0) (set_tree$f ?v0))) :named a56))
(assert (! (forall ((?v0 A_tree$)) (member$g (root$a ?v0) (set_tree$g ?v0))) :named a57))
(assert (! (forall ((?v0 A_b_fun_tree$)) (member$h (root$b ?v0) (set_tree$h ?v0))) :named a58))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun_tree$) (?v2 B_b_fun_tree$)) (! (= (root$d (node$d ?v0 ?v1 ?v2)) ?v0) :pattern ((node$d ?v0 ?v1 ?v2)))) :named a59))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_a_fun_tree$) (?v2 B_a_fun_tree$)) (! (= (root$e (node$e ?v0 ?v1 ?v2)) ?v0) :pattern ((node$e ?v0 ?v1 ?v2)))) :named a60))
(assert (! (forall ((?v0 A_a_b_fun_a_b_fun_fun_fun$) (?v1 A_a_b_fun_a_b_fun_fun_fun_tree$) (?v2 A_a_b_fun_a_b_fun_fun_fun_tree$)) (! (= (root$l (node$l ?v0 ?v1 ?v2)) ?v0) :pattern ((node$l ?v0 ?v1 ?v2)))) :named a61))
(assert (! (forall ((?v0 A_a_b_fun_fun$) (?v1 A_a_b_fun_fun_tree$) (?v2 A_a_b_fun_fun_tree$)) (! (= (root$h (node$h ?v0 ?v1 ?v2)) ?v0) :pattern ((node$h ?v0 ?v1 ?v2)))) :named a62))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (! (= (root$f (node$f ?v0 ?v1 ?v2)) ?v0) :pattern ((node$f ?v0 ?v1 ?v2)))) :named a63))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$) (?v1 A_b_fun_a_b_fun_fun_tree$) (?v2 A_b_fun_a_b_fun_fun_tree$)) (! (= (root$c (node$c ?v0 ?v1 ?v2)) ?v0) :pattern ((node$c ?v0 ?v1 ?v2)))) :named a64))
(assert (! (forall ((?v0 B$) (?v1 B_tree$) (?v2 B_tree$)) (! (= (root$ (node$a ?v0 ?v1 ?v2)) ?v0) :pattern ((node$a ?v0 ?v1 ?v2)))) :named a65))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (root$a (node$b ?v0 ?v1 ?v2)) ?v0) :pattern ((node$b ?v0 ?v1 ?v2)))) :named a66))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_b_fun_tree$) (?v2 A_b_fun_tree$)) (! (= (root$b (node$ ?v0 ?v1 ?v2)) ?v0) :pattern ((node$ ?v0 ?v1 ?v2)))) :named a67))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_bool_fun_fun$) (?v1 A_b_fun_tree$) (?v2 A_b_fun_tree$)) (=> (rel_tree$ ?v0 ?v1 ?v2) (fun_app$j (fun_app$k ?v0 (root$b ?v1)) (root$b ?v2)))) :named a68))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_tree$) (?v2 B_tree$)) (=> (rel_tree$a ?v0 ?v1 ?v2) (fun_app$l (fun_app$m ?v0 (root$ ?v1)) (root$ ?v2)))) :named a69))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_tree$) (?v2 A_tree$)) (=> (rel_tree$b ?v0 ?v1 ?v2) (fun_app$n (fun_app$o ?v0 (root$ ?v1)) (root$a ?v2)))) :named a70))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_tree$) (?v2 B_tree$)) (=> (rel_tree$c ?v0 ?v1 ?v2) (fun_app$l (fun_app$p ?v0 (root$a ?v1)) (root$ ?v2)))) :named a71))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_tree$) (?v2 A_tree$)) (=> (rel_tree$d ?v0 ?v1 ?v2) (fun_app$n (fun_app$q ?v0 (root$a ?v1)) (root$a ?v2)))) :named a72))
(assert (! (forall ((?v0 A_b_fun_b_bool_fun_fun$) (?v1 A_b_fun_tree$) (?v2 B_tree$)) (=> (rel_tree$e ?v0 ?v1 ?v2) (fun_app$l (fun_app$r ?v0 (root$b ?v1)) (root$ ?v2)))) :named a73))
(assert (! (forall ((?v0 A_b_fun_a_bool_fun_fun$) (?v1 A_b_fun_tree$) (?v2 A_tree$)) (=> (rel_tree$f ?v0 ?v1 ?v2) (fun_app$n (fun_app$s ?v0 (root$b ?v1)) (root$a ?v2)))) :named a74))
(assert (! (forall ((?v0 B_a_b_fun_bool_fun_fun$) (?v1 B_tree$) (?v2 A_b_fun_tree$)) (=> (rel_tree$g ?v0 ?v1 ?v2) (fun_app$j (fun_app$t ?v0 (root$ ?v1)) (root$b ?v2)))) :named a75))
(assert (! (forall ((?v0 A_a_b_fun_bool_fun_fun$) (?v1 A_tree$) (?v2 A_b_fun_tree$)) (=> (rel_tree$h ?v0 ?v1 ?v2) (fun_app$j (fun_app$u ?v0 (root$a ?v1)) (root$b ?v2)))) :named a76))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_b_bool_fun_fun$) (?v1 A_b_fun_a_b_fun_fun_tree$) (?v2 B_tree$)) (=> (rel_tree$i ?v0 ?v1 ?v2) (fun_app$l (fun_app$v ?v0 (root$c ?v1)) (root$ ?v2)))) :named a77))
(assert (! (forall ((?v0 B_b_fun_tree$) (?v1 B_b_fun_tree$)) (=> (and (= (root$d ?v0) (root$d ?v1)) (and (= (left$b ?v0) (left$b ?v1)) (= (right$b ?v0) (right$b ?v1)))) (= ?v0 ?v1))) :named a78))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_a_fun_tree$)) (=> (and (= (root$e ?v0) (root$e ?v1)) (and (= (left$c ?v0) (left$c ?v1)) (= (right$c ?v0) (right$c ?v1)))) (= ?v0 ?v1))) :named a79))
(assert (! (forall ((?v0 A_a_b_fun_a_b_fun_fun_fun_tree$) (?v1 A_a_b_fun_a_b_fun_fun_fun_tree$)) (=> (and (= (root$l ?v0) (root$l ?v1)) (and (= (left$d ?v0) (left$d ?v1)) (= (right$d ?v0) (right$d ?v1)))) (= ?v0 ?v1))) :named a80))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree$) (?v1 A_a_b_fun_fun_tree$)) (=> (and (= (root$h ?v0) (root$h ?v1)) (and (= (left$e ?v0) (left$e ?v1)) (= (right$e ?v0) (right$e ?v1)))) (= ?v0 ?v1))) :named a81))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A_a_fun_tree$)) (=> (and (= (root$f ?v0) (root$f ?v1)) (and (= (left$f ?v0) (left$f ?v1)) (= (right$f ?v0) (right$f ?v1)))) (= ?v0 ?v1))) :named a82))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$) (?v1 A_b_fun_a_b_fun_fun_tree$)) (=> (and (= (root$c ?v0) (root$c ?v1)) (and (= (left$g ?v0) (left$g ?v1)) (= (right$g ?v0) (right$g ?v1)))) (= ?v0 ?v1))) :named a83))
(assert (! (forall ((?v0 B_tree$) (?v1 B_tree$)) (=> (and (= (root$ ?v0) (root$ ?v1)) (and (= (left$ ?v0) (left$ ?v1)) (= (right$ ?v0) (right$ ?v1)))) (= ?v0 ?v1))) :named a84))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (=> (and (= (root$a ?v0) (root$a ?v1)) (and (= (left$a ?v0) (left$a ?v1)) (= (right$a ?v0) (right$a ?v1)))) (= ?v0 ?v1))) :named a85))
(assert (! (forall ((?v0 A_b_fun_tree$) (?v1 A_b_fun_tree$)) (=> (and (= (root$b ?v0) (root$b ?v1)) (and (= (left$h ?v0) (left$h ?v1)) (= (right$h ?v0) (right$h ?v1)))) (= ?v0 ?v1))) :named a86))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$) (?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (= (= (node$b ?v0 ?v1 ?v2) (node$b ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a87))
(assert (! (forall ((?v0 B$) (?v1 B_tree$) (?v2 B_tree$) (?v3 B$) (?v4 B_tree$) (?v5 B_tree$)) (= (= (node$a ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a88))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$) (?v1 A_b_fun_a_b_fun_fun_tree$) (?v2 A_b_fun_a_b_fun_fun_tree$) (?v3 A_b_fun_a_b_fun_fun$) (?v4 A_b_fun_a_b_fun_fun_tree$) (?v5 A_b_fun_a_b_fun_fun_tree$)) (= (= (node$c ?v0 ?v1 ?v2) (node$c ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a89))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_b_fun_tree$) (?v2 A_b_fun_tree$) (?v3 A_b_fun$) (?v4 A_b_fun_tree$) (?v5 A_b_fun_tree$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a90))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A_b_fun_tree$) (?v3 A_b_fun_tree$) (?v4 A_b_fun$) (?v5 A_b_fun_tree$) (?v6 A_b_fun_tree$)) (! (= (rel_tree$ ?v0 (node$ ?v1 ?v2 ?v3) (node$ ?v4 ?v5 ?v6)) (and (fun_app$j (fun_app$k ?v0 ?v1) ?v4) (and (rel_tree$ ?v0 ?v2 ?v5) (rel_tree$ ?v0 ?v3 ?v6)))) :pattern ((rel_tree$ ?v0 (node$ ?v1 ?v2 ?v3) (node$ ?v4 ?v5 ?v6))))) :named a91))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$) (?v4 B$) (?v5 B_tree$) (?v6 B_tree$)) (! (= (rel_tree$a ?v0 (node$a ?v1 ?v2 ?v3) (node$a ?v4 ?v5 ?v6)) (and (fun_app$l (fun_app$m ?v0 ?v1) ?v4) (and (rel_tree$a ?v0 ?v2 ?v5) (rel_tree$a ?v0 ?v3 ?v6)))) :pattern ((rel_tree$a ?v0 (node$a ?v1 ?v2 ?v3) (node$a ?v4 ?v5 ?v6))))) :named a92))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$) (?v4 A$) (?v5 A_tree$) (?v6 A_tree$)) (! (= (rel_tree$b ?v0 (node$a ?v1 ?v2 ?v3) (node$b ?v4 ?v5 ?v6)) (and (fun_app$n (fun_app$o ?v0 ?v1) ?v4) (and (rel_tree$b ?v0 ?v2 ?v5) (rel_tree$b ?v0 ?v3 ?v6)))) :pattern ((rel_tree$b ?v0 (node$a ?v1 ?v2 ?v3) (node$b ?v4 ?v5 ?v6))))) :named a93))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$) (?v4 B$) (?v5 B_tree$) (?v6 B_tree$)) (! (= (rel_tree$c ?v0 (node$b ?v1 ?v2 ?v3) (node$a ?v4 ?v5 ?v6)) (and (fun_app$l (fun_app$p ?v0 ?v1) ?v4) (and (rel_tree$c ?v0 ?v2 ?v5) (rel_tree$c ?v0 ?v3 ?v6)))) :pattern ((rel_tree$c ?v0 (node$b ?v1 ?v2 ?v3) (node$a ?v4 ?v5 ?v6))))) :named a94))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$) (?v4 A$) (?v5 A_tree$) (?v6 A_tree$)) (! (= (rel_tree$d ?v0 (node$b ?v1 ?v2 ?v3) (node$b ?v4 ?v5 ?v6)) (and (fun_app$n (fun_app$q ?v0 ?v1) ?v4) (and (rel_tree$d ?v0 ?v2 ?v5) (rel_tree$d ?v0 ?v3 ?v6)))) :pattern ((rel_tree$d ?v0 (node$b ?v1 ?v2 ?v3) (node$b ?v4 ?v5 ?v6))))) :named a95))
(assert (! (forall ((?v0 A_b_fun_a_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A_b_fun_tree$) (?v3 A_b_fun_tree$) (?v4 A$) (?v5 A_tree$) (?v6 A_tree$)) (! (= (rel_tree$f ?v0 (node$ ?v1 ?v2 ?v3) (node$b ?v4 ?v5 ?v6)) (and (fun_app$n (fun_app$s ?v0 ?v1) ?v4) (and (rel_tree$f ?v0 ?v2 ?v5) (rel_tree$f ?v0 ?v3 ?v6)))) :pattern ((rel_tree$f ?v0 (node$ ?v1 ?v2 ?v3) (node$b ?v4 ?v5 ?v6))))) :named a96))
(assert (! (forall ((?v0 A_b_fun_b_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A_b_fun_tree$) (?v3 A_b_fun_tree$) (?v4 B$) (?v5 B_tree$) (?v6 B_tree$)) (! (= (rel_tree$e ?v0 (node$ ?v1 ?v2 ?v3) (node$a ?v4 ?v5 ?v6)) (and (fun_app$l (fun_app$r ?v0 ?v1) ?v4) (and (rel_tree$e ?v0 ?v2 ?v5) (rel_tree$e ?v0 ?v3 ?v6)))) :pattern ((rel_tree$e ?v0 (node$ ?v1 ?v2 ?v3) (node$a ?v4 ?v5 ?v6))))) :named a97))
(assert (! (forall ((?v0 B_a_b_fun_bool_fun_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$) (?v4 A_b_fun$) (?v5 A_b_fun_tree$) (?v6 A_b_fun_tree$)) (! (= (rel_tree$g ?v0 (node$a ?v1 ?v2 ?v3) (node$ ?v4 ?v5 ?v6)) (and (fun_app$j (fun_app$t ?v0 ?v1) ?v4) (and (rel_tree$g ?v0 ?v2 ?v5) (rel_tree$g ?v0 ?v3 ?v6)))) :pattern ((rel_tree$g ?v0 (node$a ?v1 ?v2 ?v3) (node$ ?v4 ?v5 ?v6))))) :named a98))
(assert (! (forall ((?v0 A_a_b_fun_bool_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$) (?v4 A_b_fun$) (?v5 A_b_fun_tree$) (?v6 A_b_fun_tree$)) (! (= (rel_tree$h ?v0 (node$b ?v1 ?v2 ?v3) (node$ ?v4 ?v5 ?v6)) (and (fun_app$j (fun_app$u ?v0 ?v1) ?v4) (and (rel_tree$h ?v0 ?v2 ?v5) (rel_tree$h ?v0 ?v3 ?v6)))) :pattern ((rel_tree$h ?v0 (node$b ?v1 ?v2 ?v3) (node$ ?v4 ?v5 ?v6))))) :named a99))
(assert (! (forall ((?v0 B_a_b_fun_a_b_fun_fun_bool_fun_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$) (?v4 A_b_fun_a_b_fun_fun$) (?v5 A_b_fun_a_b_fun_fun_tree$) (?v6 A_b_fun_a_b_fun_fun_tree$)) (! (= (rel_tree$j ?v0 (node$a ?v1 ?v2 ?v3) (node$c ?v4 ?v5 ?v6)) (and (fun_app$w (fun_app$x ?v0 ?v1) ?v4) (and (rel_tree$j ?v0 ?v2 ?v5) (rel_tree$j ?v0 ?v3 ?v6)))) :pattern ((rel_tree$j ?v0 (node$a ?v1 ?v2 ?v3) (node$c ?v4 ?v5 ?v6))))) :named a100))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$) (?v1 A_b_fun_tree$)) (= (left$h (map_tree$ ?v0 ?v1)) (map_tree$ ?v0 (left$h ?v1)))) :named a101))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_tree$)) (= (left$ (map_tree$a ?v0 ?v1)) (map_tree$a ?v0 (left$ ?v1)))) :named a102))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_tree$)) (= (left$a (map_tree$c ?v0 ?v1)) (map_tree$c ?v0 (left$ ?v1)))) :named a103))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_tree$)) (= (left$ (map_tree$b ?v0 ?v1)) (map_tree$b ?v0 (left$a ?v1)))) :named a104))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (left$a (map_tree$d ?v0 ?v1)) (map_tree$d ?v0 (left$a ?v1)))) :named a105))
(assert (! (forall ((?v0 B_a_b_fun_fun$) (?v1 B_tree$)) (= (left$h (map_tree$e ?v0 ?v1)) (map_tree$e ?v0 (left$ ?v1)))) :named a106))
(assert (! (forall ((?v0 A_b_fun_a_fun$) (?v1 A_b_fun_tree$)) (= (left$a (map_tree$h ?v0 ?v1)) (map_tree$h ?v0 (left$h ?v1)))) :named a107))
(assert (! (forall ((?v0 A_b_fun_b_fun$) (?v1 A_b_fun_tree$)) (= (left$ (map_tree$g ?v0 ?v1)) (map_tree$g ?v0 (left$h ?v1)))) :named a108))
(assert (! (forall ((?v0 A_a_b_fun_fun$) (?v1 A_tree$)) (= (left$h (map_tree$f ?v0 ?v1)) (map_tree$f ?v0 (left$a ?v1)))) :named a109))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_a_fun$) (?v1 A_b_fun_a_b_fun_fun_tree$)) (= (left$a (map_tree$j ?v0 ?v1)) (map_tree$j ?v0 (left$g ?v1)))) :named a110))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_tree$)) (= (left$a (map_tree$c ?v0 ?v1)) (map_tree$c ?v0 (left$ ?v1)))) :named a111))
(assert (! (forall ((?v0 A_a_b_fun_a_b_fun_fun_fun$) (?v1 A_tree$)) (= (left$g (map_tree$k ?v0 ?v1)) (map_tree$k ?v0 (left$a ?v1)))) :named a112))
(assert (! (forall ((?v0 A_a_b_fun_fun$) (?v1 A_tree$)) (= (left$h (map_tree$f ?v0 ?v1)) (map_tree$f ?v0 (left$a ?v1)))) :named a113))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_tree$)) (= (left$ (map_tree$b ?v0 ?v1)) (map_tree$b ?v0 (left$a ?v1)))) :named a114))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (left$a (map_tree$d ?v0 ?v1)) (map_tree$d ?v0 (left$a ?v1)))) :named a115))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$) (?v1 A_b_fun_tree$)) (= (left$h (map_tree$ ?v0 ?v1)) (map_tree$ ?v0 (left$h ?v1)))) :named a116))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$) (?v1 A_b_fun_tree$)) (= (right$h (map_tree$ ?v0 ?v1)) (map_tree$ ?v0 (right$h ?v1)))) :named a117))
(check-sat)
;(get-unsat-core)
