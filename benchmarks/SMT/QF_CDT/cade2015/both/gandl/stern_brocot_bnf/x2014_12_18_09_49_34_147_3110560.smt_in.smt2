; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 511
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_a_fun_set$ 0)
(declare-sort A_a_tree_fun$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort A_tree_a_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun$ 0)
(declare-sort A_a_stream_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort A_a_a_fun_fun_set$ 0)
(declare-sort A_a_fun_a_fun_set$ 0)
(declare-sort A_a_fun_stream_set$ 0)
(declare-sort A_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_stream_tree_fun$ 0)
(declare-sort A_stream_stream_set$ 0)
(declare-sort A_stream_tree_a_fun$ 0)
(declare-sort A_tree_a_stream_fun$ 0)
(declare-sort A_a_fun_a_stream_fun$ 0)
(declare-sort A_stream_a_a_fun_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_stream_stream_a_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_set$ 0)
(declare-sort A_a_a_fun_fun_stream_set$ 0)
(declare-sort A_a_fun_a_fun_stream_set$ 0)
(declare-sort A_a_fun_stream_stream_set$ 0)
(declare-sort A_stream_stream_stream_set$ 0)
(declare-sort A_a_fun_a_a_fun_fun_stream_set$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_fun_stream_a_a_fun_stream_fun$ 0)
(declare-sort A_a_stream_fun_a_a_stream_fun_fun$ 0)
(declare-sort A_stream_a_fun_a_stream_a_fun_fun$ 0)
(declare-sort A_stream_stream_a_stream_stream_fun$ 0)
(declare-sort A_a_a_fun_a_fun_fun_a_a_a_fun_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_stream_fun_a_a_fun_a_stream_fun_fun$ 0)
(declare-sort A_stream_a_a_fun_fun_a_stream_a_a_fun_fun_fun$ 0)
(declare-sort A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-datatypes () ((Num$ (one$) (bit0$ (select$ Num$)) (bit1$ (selecta$ Num$)))))
(declare-codatatypes () ((A_a_fun_a_a_fun_fun_stream$ (sCons$a (selectb$ A_a_fun_a_a_fun_fun$) (selectc$ A_a_fun_a_a_fun_fun_stream$)))
  (A_a_fun_a_fun_stream$ (sCons$b (selectd$ A_a_fun_a_fun$) (selecte$ A_a_fun_a_fun_stream$)))
  (A_a_a_fun_fun_stream$ (sCons$c (selectf$ A_a_a_fun_fun$) (selectg$ A_a_a_fun_fun_stream$)))
  (A_stream_stream$ (sCons$d (shd$a A_stream$) (stl$a A_stream_stream$)))
  (A_a_fun_stream$ (sCons$e (selecth$ A_a_fun$) (selecti$ A_a_fun_stream$)))
  (A_a_stream_fun_stream$ (sCons$f (selectj$ A_a_stream_fun$) (selectk$ A_a_stream_fun_stream$)))
  (A_stream_a_fun_stream$ (sCons$g (selectl$ A_stream_a_fun$) (selectm$ A_stream_a_fun_stream$)))
  (A_stream_a_stream_fun_stream$ (sCons$h (selectn$ A_stream_a_stream_fun$) (selecto$ A_stream_a_stream_fun_stream$)))
  (A_a_fun_a_stream_fun_stream$ (sCons$i (selectp$ A_a_fun_a_stream_fun$) (selectq$ A_a_fun_a_stream_fun_stream$)))
  (A_stream_a_a_fun_fun_stream$ (sCons$j (selectr$ A_stream_a_a_fun_fun$) (selects$ A_stream_a_a_fun_fun_stream$)))
  (A_a_a_fun_a_fun_fun_stream$ (sCons$k (selectt$ A_a_a_fun_a_fun_fun$) (selectu$ A_a_a_fun_a_fun_fun_stream$)))
  (A_tree$ (node$ (root$ A$) (left$ A_tree$) (right$ A_tree$)))
  (A_tree_tree$ (node$a (root$a A_tree$) (left$a A_tree_tree$) (right$a A_tree_tree$)))
  (A_tree_tree_stream$ (sCons$l (shd$b A_tree_tree$) (stl$b A_tree_tree_stream$)))
  (A_stream_stream_tree$ (node$b (root$b A_stream_stream$) (left$b A_stream_stream_tree$) (right$b A_stream_stream_tree$)))
  (A_stream_stream_tree_stream$ (sCons$m (shd$c A_stream_stream_tree$) (stl$c A_stream_stream_tree_stream$)))
  (A_stream_tree$ (node$c (root$c A_stream$) (left$c A_stream_tree$) (right$c A_stream_tree$)))
  (A_stream_tree_stream$ (sCons$n (shd$d A_stream_tree$) (stl$d A_stream_tree_stream$)))
  (A_stream_tree_stream_stream$ (sCons$o (shd$e A_stream_tree_stream$) (stl$e A_stream_tree_stream_stream$)))
  (A_tree_stream$ (sCons$p (shd$f A_tree$) (stl$f A_tree_stream$)))
  (A_tree_stream_stream$ (sCons$q (shd$g A_tree_stream$) (stl$g A_tree_stream_stream$)))
  (A_stream_stream_stream$ (sCons$r (shd$h A_stream_stream$) (stl$h A_stream_stream_stream$)))
  (A_stream_stream_stream_stream$ (sCons$s (shd$i A_stream_stream_stream$) (stl$i A_stream_stream_stream_stream$)))
  (A_a_fun_stream_stream$ (sCons$t (shd$j A_a_fun_stream$) (stl$j A_a_fun_stream_stream$)))
  (A_a_fun_a_a_fun_fun_tree$ (node$d (selectv$ A_a_fun_a_a_fun_fun$) (selectw$ A_a_fun_a_a_fun_fun_tree$) (selectx$ A_a_fun_a_a_fun_fun_tree$)))
  (A_a_fun_a_fun_tree$ (node$e (selecty$ A_a_fun_a_fun$) (selectz$ A_a_fun_a_fun_tree$) (selecua$ A_a_fun_a_fun_tree$)))
  (A_a_a_fun_fun_tree$ (node$f (selecub$ A_a_a_fun_fun$) (selecuc$ A_a_a_fun_fun_tree$) (selecud$ A_a_a_fun_fun_tree$)))
  (A_a_fun_tree$ (node$g (selecue$ A_a_fun$) (selecuf$ A_a_fun_tree$) (selecug$ A_a_fun_tree$)))
  (A_tree_tree_tree$ (node$h (root$d A_tree_tree$) (left$d A_tree_tree_tree$) (right$d A_tree_tree_tree$)))
  (A_stream_stream_tree_tree$ (node$i (root$e A_stream_stream_tree$) (left$e A_stream_stream_tree_tree$) (right$e A_stream_stream_tree_tree$)))
  (A_stream_tree_stream_tree$ (node$j (root$f A_stream_tree_stream$) (left$f A_stream_tree_stream_tree$) (right$f A_stream_tree_stream_tree$)))
  (A_tree_stream_tree$ (node$k (root$g A_tree_stream$) (left$g A_tree_stream_tree$) (right$g A_tree_stream_tree$)))
  (A_stream_stream_stream_tree$ (node$l (root$h A_stream_stream_stream$) (left$h A_stream_stream_stream_tree$) (right$h A_stream_stream_stream_tree$)))
  (A_stream_tree_tree$ (node$m (root$i A_stream_tree$) (left$i A_stream_tree_tree$) (right$i A_stream_tree_tree$)))))
(declare-fun n$ () Num$)
(declare-fun id$ () A_a_fun$)
(declare-fun id$a () A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun id$b () A_a_fun_a_fun_a_a_fun_a_fun_fun$)
(declare-fun id$c () A_a_a_fun_fun_a_a_a_fun_fun_fun$)
(declare-fun id$d () A_stream_a_stream_fun$)
(declare-fun id$e () A_a_fun_a_a_fun_fun$)
(declare-fun id$f () A_a_stream_fun_a_a_stream_fun_fun$)
(declare-fun id$g () A_stream_a_fun_a_stream_a_fun_fun$)
(declare-fun id$h () A_stream_a_stream_fun_a_stream_a_stream_fun_fun$)
(declare-fun id$i () A_a_fun_a_stream_fun_a_a_fun_a_stream_fun_fun$)
(declare-fun id$j () A_stream_a_a_fun_fun_a_stream_a_a_fun_fun_fun$)
(declare-fun id$k () A_a_a_fun_a_fun_fun_a_a_a_fun_a_fun_fun_fun$)
(declare-fun id$l () A_a_fun_stream_a_a_fun_stream_fun$)
(declare-fun id$m () A_stream_stream_a_stream_stream_fun$)
(declare-fun smap$ (A_a_fun$) A_stream_a_stream_fun$)
(declare-fun stl$k (A_a_fun_stream$) A_a_fun_stream$)
(declare-fun smap$a (A_a_a_fun_fun$ A_stream$) A_a_fun_stream$)
(declare-fun smap$b (A_a_fun_a_fun$ A_a_fun_stream$) A_stream$)
(declare-fun smap$c (A_a_fun_a_a_fun_fun$ A_a_fun_stream$) A_a_fun_stream$)
(declare-fun smap$d (A_stream_a_fun$ A_stream_stream$) A_stream$)
(declare-fun smap$e (A_a_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun smap$f (A_stream_a_stream_fun$ A_stream_stream$) A_stream_stream$)
(declare-fun smap$g (A_a_fun_a_stream_fun$ A_a_fun_stream$) A_stream_stream$)
(declare-fun smap$h (A_stream_a_a_fun_fun$ A_stream_stream$) A_a_fun_stream$)
(declare-fun smap$i (A_a_a_fun_a_fun_fun$ A_stream$) A_a_fun_a_fun_stream$)
(declare-fun smap$j (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun_stream$) A_a_fun_a_a_fun_fun_stream$)
(declare-fun smap$k (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun_stream$) A_a_fun_a_fun_stream$)
(declare-fun smap$l (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun_stream$) A_a_a_fun_fun_stream$)
(declare-fun smap$m (A_tree_a_fun$ A_tree_stream$) A_stream$)
(declare-fun smap$n (A_a_tree_fun$ A_stream$) A_tree_stream$)
(declare-fun smap$o (A_stream_tree_a_fun$ A_stream_tree_stream$) A_stream$)
(declare-fun smap$p (A_stream_stream_a_fun$ A_stream_stream_stream$) A_stream$)
(declare-fun smap$q (A_tree_a_stream_fun$ A_tree_stream$) A_stream_stream$)
(declare-fun smap$r (A_a_stream_tree_fun$ A_stream$) A_stream_tree_stream$)
(declare-fun st_ap$ (A_a_fun_stream$) A_stream_a_stream_fun$)
(declare-fun member$ (A_a_fun_stream$ A_a_fun_stream_set$) Bool)
(declare-fun st_ap$a (A_a_a_fun_fun_stream$ A_stream$) A_a_fun_stream$)
(declare-fun st_ap$b (A_a_fun_a_fun_stream$ A_a_fun_stream$) A_stream$)
(declare-fun st_ap$c (A_a_fun_a_a_fun_fun_stream$ A_a_fun_stream$) A_a_fun_stream$)
(declare-fun st_ap$d (A_a_stream_fun_stream$ A_stream$) A_stream_stream$)
(declare-fun st_ap$e (A_stream_a_fun_stream$ A_stream_stream$) A_stream$)
(declare-fun st_ap$f (A_stream_a_stream_fun_stream$ A_stream_stream$) A_stream_stream$)
(declare-fun st_ap$g (A_a_fun_a_stream_fun_stream$ A_a_fun_stream$) A_stream_stream$)
(declare-fun st_ap$h (A_stream_a_a_fun_fun_stream$ A_stream_stream$) A_a_fun_stream$)
(declare-fun st_ap$i (A_a_a_fun_a_fun_fun_stream$ A_stream$) A_a_fun_a_fun_stream$)
(declare-fun stream$ (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_stream$)
(declare-fun fun_app$ (A_a_stream_fun$ A$) A_stream$)
(declare-fun member$a (A_a_fun_stream_stream$ A_a_fun_stream_stream_set$) Bool)
(declare-fun member$b (A_stream_stream$ A_stream_stream_set$) Bool)
(declare-fun member$c (A_stream_stream_stream$ A_stream_stream_stream_set$) Bool)
(declare-fun member$d (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_set$) Bool)
(declare-fun member$e (A_a_fun_a_a_fun_fun_stream$ A_a_fun_a_a_fun_fun_stream_set$) Bool)
(declare-fun member$f (A_a_fun_a_fun$ A_a_fun_a_fun_set$) Bool)
(declare-fun member$g (A_a_fun_a_fun_stream$ A_a_fun_a_fun_stream_set$) Bool)
(declare-fun member$h (A_a_a_fun_fun$ A_a_a_fun_fun_set$) Bool)
(declare-fun member$i (A_a_a_fun_fun_stream$ A_a_a_fun_fun_stream_set$) Bool)
(declare-fun member$j (A_stream$ A_stream_set$) Bool)
(declare-fun member$k (A_a_fun$ A_a_fun_set$) Bool)
(declare-fun member$l (A$ A_set$) Bool)
(declare-fun numeral$ (Num$) A_stream$)
(declare-fun stream$a (A_a_fun_a_fun_tree$) A_a_fun_a_fun_stream$)
(declare-fun stream$b (A_a_a_fun_fun_tree$) A_a_a_fun_fun_stream$)
(declare-fun stream$c (A_stream_tree$) A_stream_stream$)
(declare-fun stream$d (A_a_fun_tree$) A_a_fun_stream$)
(declare-fun stream$e (A_tree$) A_stream$)
(declare-fun stream$f (A_stream_tree_tree$) A_stream_tree_stream$)
(declare-fun stream$g (A_tree_tree$) A_tree_stream$)
(declare-fun stream$h (A_stream_stream_tree$) A_stream_stream_stream$)
(declare-fun streams$ (A_a_fun_stream_set$) A_a_fun_stream_stream_set$)
(declare-fun fun_app$a (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$b (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$) A_a_fun_a_fun$)
(declare-fun fun_app$c (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$) A_a_a_fun_fun$)
(declare-fun fun_app$d (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$e (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$f (A_a_fun$ A$) A$)
(declare-fun fun_app$g (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$h (A_a_fun_a_fun$ A_a_fun$) A$)
(declare-fun fun_app$i (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$j (A_a_fun_a_stream_fun$ A_a_fun$) A_stream$)
(declare-fun fun_app$k (A_stream_a_a_fun_fun$ A_stream$) A_a_fun$)
(declare-fun fun_app$l (A_a_a_fun_a_fun_fun$ A$) A_a_fun_a_fun$)
(declare-fun fun_app$m (A_tree_a_fun$ A_tree$) A$)
(declare-fun fun_app$n (A_a_tree_fun$ A$) A_tree$)
(declare-fun fun_app$o (A_stream_tree_a_fun$ A_stream_tree$) A$)
(declare-fun fun_app$p (A_stream_stream_a_fun$ A_stream_stream$) A$)
(declare-fun fun_app$q (A_tree_a_stream_fun$ A_tree$) A_stream$)
(declare-fun fun_app$r (A_a_stream_tree_fun$ A$) A_stream_tree$)
(declare-fun numeral$a (Num$) A$)
(declare-fun numeral$b (Num$) A_tree_tree_stream$)
(declare-fun numeral$c (Num$) A_tree_tree$)
(declare-fun numeral$d (Num$) A_stream_stream_tree_stream$)
(declare-fun numeral$e (Num$) A_stream_stream_tree$)
(declare-fun numeral$f (Num$) A_stream_tree_stream_stream$)
(declare-fun numeral$g (Num$) A_stream_tree_stream$)
(declare-fun numeral$h (Num$) A_tree_stream_stream$)
(declare-fun numeral$i (Num$) A_tree_stream$)
(declare-fun numeral$j (Num$) A_stream_stream_stream_stream$)
(declare-fun numeral$k (Num$) A_stream_stream_stream$)
(declare-fun numeral$l (Num$) A_stream_stream$)
(declare-fun numeral$m (Num$) A_tree$)
(declare-fun numeral$n (Num$) A_stream_tree$)
(declare-fun numeral$o (Num$) A_tree_tree_tree$)
(declare-fun numeral$p (Num$) A_stream_stream_tree_tree$)
(declare-fun numeral$q (Num$) A_stream_tree_stream_tree$)
(declare-fun numeral$r (Num$) A_tree_stream_tree$)
(declare-fun numeral$s (Num$) A_stream_stream_stream_tree$)
(declare-fun numeral$t (Num$) A_stream_tree_tree$)
(declare-fun siterate$ (A_a_fun$) A_a_stream_fun$)
(declare-fun streams$a (A_stream_stream_set$) A_stream_stream_stream_set$)
(declare-fun streams$b (A_a_fun_a_a_fun_fun_set$) A_a_fun_a_a_fun_fun_stream_set$)
(declare-fun streams$c (A_a_fun_a_fun_set$) A_a_fun_a_fun_stream_set$)
(declare-fun streams$d (A_a_a_fun_fun_set$) A_a_a_fun_fun_stream_set$)
(declare-fun streams$e (A_stream_set$) A_stream_stream_set$)
(declare-fun streams$f (A_a_fun_set$) A_a_fun_stream_set$)
(declare-fun streams$g (A_set$) A_stream_set$)
(declare-fun siterate$a (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_stream$)
(declare-fun siterate$b (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$) A_a_fun_a_fun_stream$)
(declare-fun siterate$c (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$) A_a_a_fun_fun_stream$)
(declare-fun siterate$d (A_stream_a_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun siterate$e (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun_stream$)
(declare-fun siterate$f (A_a_stream_fun_a_a_stream_fun_fun$ A_a_stream_fun$) A_a_stream_fun_stream$)
(declare-fun siterate$g (A_stream_a_fun_a_stream_a_fun_fun$ A_stream_a_fun$) A_stream_a_fun_stream$)
(declare-fun siterate$h (A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ A_stream_a_stream_fun$) A_stream_a_stream_fun_stream$)
(declare-fun siterate$i (A_a_fun_a_stream_fun_a_a_fun_a_stream_fun_fun$ A_a_fun_a_stream_fun$) A_a_fun_a_stream_fun_stream$)
(declare-fun siterate$j (A_stream_a_a_fun_fun_a_stream_a_a_fun_fun_fun$ A_stream_a_a_fun_fun$) A_stream_a_a_fun_fun_stream$)
(declare-fun siterate$k (A_a_a_fun_a_fun_fun_a_a_a_fun_a_fun_fun_fun$ A_a_a_fun_a_fun_fun$) A_a_a_fun_a_fun_fun_stream$)
(declare-fun siterate$l (A_a_fun_stream_a_a_fun_stream_fun$ A_a_fun_stream$) A_a_fun_stream_stream$)
(declare-fun siterate$m (A_stream_stream_a_stream_stream_fun$ A_stream_stream$) A_stream_stream_stream$)
(declare-fun tree_pure$ (A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_pure$a (A_a_fun_a_fun$) A_a_fun_a_fun_tree$)
(declare-fun tree_pure$b (A_a_a_fun_fun$) A_a_a_fun_fun_tree$)
(declare-fun tree_pure$c (A_stream$) A_stream_tree$)
(declare-fun tree_pure$d (A_a_fun$) A_a_fun_tree$)
(declare-fun tree_pure$e (A$) A_tree$)
(assert (! (not (= (numeral$ n$) (fun_app$ (siterate$ id$) (numeral$a n$)))) :named a0))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (= (= (siterate$a id$a ?v0) (siterate$a id$a ?v1)) (= ?v0 ?v1))) :named a1))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun$)) (= (= (siterate$b id$b ?v0) (siterate$b id$b ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun$)) (= (= (siterate$c id$c ?v0) (siterate$c id$c ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$)) (= (= (siterate$d id$d ?v0) (siterate$d id$d ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (= (= (siterate$e id$e ?v0) (siterate$e id$e ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (fun_app$ (siterate$ id$) ?v0) (fun_app$ (siterate$ id$) ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (! (= (fun_app$a id$a ?v0) ?v0) :pattern ((fun_app$a id$a ?v0)))) :named a7))
(assert (! (forall ((?v0 A_a_fun_a_fun$)) (! (= (fun_app$b id$b ?v0) ?v0) :pattern ((fun_app$b id$b ?v0)))) :named a8))
(assert (! (forall ((?v0 A_a_a_fun_fun$)) (! (= (fun_app$c id$c ?v0) ?v0) :pattern ((fun_app$c id$c ?v0)))) :named a9))
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$d id$d ?v0) ?v0) :pattern ((fun_app$d id$d ?v0)))) :named a10))
(assert (! (forall ((?v0 A_a_fun$)) (! (= (fun_app$e id$e ?v0) ?v0) :pattern ((fun_app$e id$e ?v0)))) :named a11))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$f id$ ?v0) ?v0) :pattern ((fun_app$f id$ ?v0)))) :named a12))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (! (= (fun_app$a id$a ?v0) ?v0) :pattern ((fun_app$a id$a ?v0)))) :named a13))
(assert (! (forall ((?v0 A_a_fun_a_fun$)) (! (= (fun_app$b id$b ?v0) ?v0) :pattern ((fun_app$b id$b ?v0)))) :named a14))
(assert (! (forall ((?v0 A_a_a_fun_fun$)) (! (= (fun_app$c id$c ?v0) ?v0) :pattern ((fun_app$c id$c ?v0)))) :named a15))
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$d id$d ?v0) ?v0) :pattern ((fun_app$d id$d ?v0)))) :named a16))
(assert (! (forall ((?v0 A_a_fun$)) (! (= (fun_app$e id$e ?v0) ?v0) :pattern ((fun_app$e id$e ?v0)))) :named a17))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$f id$ ?v0) ?v0) :pattern ((fun_app$f id$ ?v0)))) :named a18))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$d (st_ap$ (siterate$e id$e ?v0)) (fun_app$ (siterate$ id$) ?v1)) (fun_app$ (siterate$ id$) (fun_app$f ?v0 ?v1)))) :named a19))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (= (st_ap$a (siterate$c id$c ?v0) (fun_app$ (siterate$ id$) ?v1)) (siterate$e id$e (fun_app$g ?v0 ?v1)))) :named a20))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$)) (= (st_ap$b (siterate$b id$b ?v0) (siterate$e id$e ?v1)) (fun_app$ (siterate$ id$) (fun_app$h ?v0 ?v1)))) :named a21))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (= (st_ap$c (siterate$a id$a ?v0) (siterate$e id$e ?v1)) (siterate$e id$e (fun_app$e ?v0 ?v1)))) :named a22))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A$)) (= (st_ap$d (siterate$f id$f ?v0) (fun_app$ (siterate$ id$) ?v1)) (siterate$d id$d (fun_app$ ?v0 ?v1)))) :named a23))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream$)) (= (st_ap$e (siterate$g id$g ?v0) (siterate$d id$d ?v1)) (fun_app$ (siterate$ id$) (fun_app$i ?v0 ?v1)))) :named a24))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream$)) (= (st_ap$f (siterate$h id$h ?v0) (siterate$d id$d ?v1)) (siterate$d id$d (fun_app$d ?v0 ?v1)))) :named a25))
(assert (! (forall ((?v0 A_a_fun_a_stream_fun$) (?v1 A_a_fun$)) (= (st_ap$g (siterate$i id$i ?v0) (siterate$e id$e ?v1)) (siterate$d id$d (fun_app$j ?v0 ?v1)))) :named a26))
(assert (! (forall ((?v0 A_stream_a_a_fun_fun$) (?v1 A_stream$)) (= (st_ap$h (siterate$j id$j ?v0) (siterate$d id$d ?v1)) (siterate$e id$e (fun_app$k ?v0 ?v1)))) :named a27))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A$)) (= (st_ap$i (siterate$k id$k ?v0) (fun_app$ (siterate$ id$) ?v1)) (siterate$b id$b (fun_app$l ?v0 ?v1)))) :named a28))
(assert (! (forall ((?v0 Num$)) (= (shd$b (numeral$b ?v0)) (numeral$c ?v0))) :named a29))
(assert (! (forall ((?v0 Num$)) (= (shd$c (numeral$d ?v0)) (numeral$e ?v0))) :named a30))
(assert (! (forall ((?v0 Num$)) (= (shd$e (numeral$f ?v0)) (numeral$g ?v0))) :named a31))
(assert (! (forall ((?v0 Num$)) (= (shd$g (numeral$h ?v0)) (numeral$i ?v0))) :named a32))
(assert (! (forall ((?v0 Num$)) (= (shd$i (numeral$j ?v0)) (numeral$k ?v0))) :named a33))
(assert (! (forall ((?v0 Num$)) (= (shd$h (numeral$k ?v0)) (numeral$l ?v0))) :named a34))
(assert (! (forall ((?v0 Num$)) (= (shd$f (numeral$i ?v0)) (numeral$m ?v0))) :named a35))
(assert (! (forall ((?v0 Num$)) (= (shd$d (numeral$g ?v0)) (numeral$n ?v0))) :named a36))
(assert (! (forall ((?v0 Num$)) (= (shd$a (numeral$l ?v0)) (numeral$ ?v0))) :named a37))
(assert (! (forall ((?v0 Num$)) (= (shd$ (numeral$ ?v0)) (numeral$a ?v0))) :named a38))
(assert (! (forall ((?v0 Num$)) (= (stl$d (numeral$g ?v0)) (numeral$g ?v0))) :named a39))
(assert (! (forall ((?v0 Num$)) (= (stl$f (numeral$i ?v0)) (numeral$i ?v0))) :named a40))
(assert (! (forall ((?v0 Num$)) (= (stl$h (numeral$k ?v0)) (numeral$k ?v0))) :named a41))
(assert (! (forall ((?v0 Num$)) (= (stl$a (numeral$l ?v0)) (numeral$l ?v0))) :named a42))
(assert (! (forall ((?v0 Num$)) (= (stl$ (numeral$ ?v0)) (numeral$ ?v0))) :named a43))
(assert (! (forall ((?v0 A_a_fun_stream$) (?v1 A_a_fun_stream_set$)) (=> (member$ ?v0 ?v1) (member$a (siterate$l id$l ?v0) (streams$ ?v1)))) :named a44))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_set$)) (=> (member$b ?v0 ?v1) (member$c (siterate$m id$m ?v0) (streams$a ?v1)))) :named a45))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_set$)) (=> (member$d ?v0 ?v1) (member$e (siterate$a id$a ?v0) (streams$b ?v1)))) :named a46))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_set$)) (=> (member$f ?v0 ?v1) (member$g (siterate$b id$b ?v0) (streams$c ?v1)))) :named a47))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun_set$)) (=> (member$h ?v0 ?v1) (member$i (siterate$c id$c ?v0) (streams$d ?v1)))) :named a48))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_set$)) (=> (member$j ?v0 ?v1) (member$b (siterate$d id$d ?v0) (streams$e ?v1)))) :named a49))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_set$)) (=> (member$k ?v0 ?v1) (member$ (siterate$e id$e ?v0) (streams$f ?v1)))) :named a50))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (=> (member$l ?v0 ?v1) (member$j (fun_app$ (siterate$ id$) ?v0) (streams$g ?v1)))) :named a51))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (= (stream$ (tree_pure$ ?v0)) (siterate$a id$a ?v0))) :named a52))
(assert (! (forall ((?v0 A_a_fun_a_fun$)) (= (stream$a (tree_pure$a ?v0)) (siterate$b id$b ?v0))) :named a53))
(assert (! (forall ((?v0 A_a_a_fun_fun$)) (= (stream$b (tree_pure$b ?v0)) (siterate$c id$c ?v0))) :named a54))
(assert (! (forall ((?v0 A_stream$)) (= (stream$c (tree_pure$c ?v0)) (siterate$d id$d ?v0))) :named a55))
(assert (! (forall ((?v0 A_a_fun$)) (= (stream$d (tree_pure$d ?v0)) (siterate$e id$e ?v0))) :named a56))
(assert (! (forall ((?v0 A$)) (= (stream$e (tree_pure$e ?v0)) (fun_app$ (siterate$ id$) ?v0))) :named a57))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$d (smap$ ?v0) (fun_app$ (siterate$ id$) ?v1)) (fun_app$ (siterate$ id$) (fun_app$f ?v0 ?v1)))) :named a58))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (= (smap$a ?v0 (fun_app$ (siterate$ id$) ?v1)) (siterate$e id$e (fun_app$g ?v0 ?v1)))) :named a59))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$)) (= (smap$b ?v0 (siterate$e id$e ?v1)) (fun_app$ (siterate$ id$) (fun_app$h ?v0 ?v1)))) :named a60))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (= (smap$c ?v0 (siterate$e id$e ?v1)) (siterate$e id$e (fun_app$e ?v0 ?v1)))) :named a61))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream$)) (= (smap$d ?v0 (siterate$d id$d ?v1)) (fun_app$ (siterate$ id$) (fun_app$i ?v0 ?v1)))) :named a62))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A$)) (= (smap$e ?v0 (fun_app$ (siterate$ id$) ?v1)) (siterate$d id$d (fun_app$ ?v0 ?v1)))) :named a63))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream$)) (= (smap$f ?v0 (siterate$d id$d ?v1)) (siterate$d id$d (fun_app$d ?v0 ?v1)))) :named a64))
(assert (! (forall ((?v0 A_a_fun_a_stream_fun$) (?v1 A_a_fun$)) (= (smap$g ?v0 (siterate$e id$e ?v1)) (siterate$d id$d (fun_app$j ?v0 ?v1)))) :named a65))
(assert (! (forall ((?v0 A_stream_a_a_fun_fun$) (?v1 A_stream$)) (= (smap$h ?v0 (siterate$d id$d ?v1)) (siterate$e id$e (fun_app$k ?v0 ?v1)))) :named a66))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A$)) (= (smap$i ?v0 (fun_app$ (siterate$ id$) ?v1)) (siterate$b id$b (fun_app$l ?v0 ?v1)))) :named a67))
(assert (! (forall ((?v0 Num$)) (= (root$d (numeral$o ?v0)) (numeral$c ?v0))) :named a68))
(assert (! (forall ((?v0 Num$)) (= (root$e (numeral$p ?v0)) (numeral$e ?v0))) :named a69))
(assert (! (forall ((?v0 Num$)) (= (root$f (numeral$q ?v0)) (numeral$g ?v0))) :named a70))
(assert (! (forall ((?v0 Num$)) (= (root$g (numeral$r ?v0)) (numeral$i ?v0))) :named a71))
(assert (! (forall ((?v0 Num$)) (= (root$h (numeral$s ?v0)) (numeral$k ?v0))) :named a72))
(assert (! (forall ((?v0 Num$)) (= (root$b (numeral$e ?v0)) (numeral$l ?v0))) :named a73))
(assert (! (forall ((?v0 Num$)) (= (root$a (numeral$c ?v0)) (numeral$m ?v0))) :named a74))
(assert (! (forall ((?v0 Num$)) (= (root$i (numeral$t ?v0)) (numeral$n ?v0))) :named a75))
(assert (! (forall ((?v0 Num$)) (= (root$c (numeral$n ?v0)) (numeral$ ?v0))) :named a76))
(assert (! (forall ((?v0 Num$)) (= (root$ (numeral$m ?v0)) (numeral$a ?v0))) :named a77))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (= (smap$j ?v0 (siterate$a ?v0 ?v1)) (siterate$a ?v0 (fun_app$a ?v0 ?v1)))) :named a78))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_a_fun_a_fun_fun$) (?v1 A_a_fun_a_fun$)) (= (smap$k ?v0 (siterate$b ?v0 ?v1)) (siterate$b ?v0 (fun_app$b ?v0 ?v1)))) :named a79))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_a_fun_fun_fun$) (?v1 A_a_a_fun_fun$)) (= (smap$l ?v0 (siterate$c ?v0 ?v1)) (siterate$c ?v0 (fun_app$c ?v0 ?v1)))) :named a80))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream$)) (= (smap$f ?v0 (siterate$d ?v0 ?v1)) (siterate$d ?v0 (fun_app$d ?v0 ?v1)))) :named a81))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (= (smap$c ?v0 (siterate$e ?v0 ?v1)) (siterate$e ?v0 (fun_app$e ?v0 ?v1)))) :named a82))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$d (smap$ ?v0) (fun_app$ (siterate$ ?v0) ?v1)) (fun_app$ (siterate$ ?v0) (fun_app$f ?v0 ?v1)))) :named a83))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$)) (= (stl$a (smap$f ?v0 ?v1)) (smap$f ?v0 (stl$a ?v1)))) :named a84))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$)) (= (stl$ (smap$d ?v0 ?v1)) (smap$d ?v0 (stl$a ?v1)))) :named a85))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_stream$)) (= (stl$k (smap$c ?v0 ?v1)) (smap$c ?v0 (stl$k ?v1)))) :named a86))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_stream$)) (= (stl$ (smap$b ?v0 ?v1)) (smap$b ?v0 (stl$k ?v1)))) :named a87))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$)) (= (stl$a (smap$e ?v0 ?v1)) (smap$e ?v0 (stl$ ?v1)))) :named a88))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_stream$)) (= (stl$k (smap$a ?v0 ?v1)) (smap$a ?v0 (stl$ ?v1)))) :named a89))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (stl$ (fun_app$d (smap$ ?v0) ?v1)) (fun_app$d (smap$ ?v0) (stl$ ?v1)))) :named a90))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (shd$ (fun_app$d (smap$ ?v0) ?v1)) (fun_app$f ?v0 (shd$ ?v1)))) :named a91))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$)) (= (shd$ (smap$d ?v0 ?v1)) (fun_app$i ?v0 (shd$a ?v1)))) :named a92))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$)) (= (shd$a (smap$e ?v0 ?v1)) (fun_app$ ?v0 (shd$ ?v1)))) :named a93))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$)) (= (shd$a (smap$f ?v0 ?v1)) (fun_app$d ?v0 (shd$a ?v1)))) :named a94))
(assert (! (forall ((?v0 A_tree_a_fun$) (?v1 A_tree_stream$)) (= (shd$ (smap$m ?v0 ?v1)) (fun_app$m ?v0 (shd$f ?v1)))) :named a95))
(assert (! (forall ((?v0 A_a_tree_fun$) (?v1 A_stream$)) (= (shd$f (smap$n ?v0 ?v1)) (fun_app$n ?v0 (shd$ ?v1)))) :named a96))
(assert (! (forall ((?v0 A_stream_tree_a_fun$) (?v1 A_stream_tree_stream$)) (= (shd$ (smap$o ?v0 ?v1)) (fun_app$o ?v0 (shd$d ?v1)))) :named a97))
(assert (! (forall ((?v0 A_stream_stream_a_fun$) (?v1 A_stream_stream_stream$)) (= (shd$ (smap$p ?v0 ?v1)) (fun_app$p ?v0 (shd$h ?v1)))) :named a98))
(assert (! (forall ((?v0 A_tree_a_stream_fun$) (?v1 A_tree_stream$)) (= (shd$a (smap$q ?v0 ?v1)) (fun_app$q ?v0 (shd$f ?v1)))) :named a99))
(assert (! (forall ((?v0 A_a_stream_tree_fun$) (?v1 A_stream$)) (= (shd$d (smap$r ?v0 ?v1)) (fun_app$r ?v0 (shd$ ?v1)))) :named a100))
(assert (! (forall ((?v0 Num$)) (= (stream$f (numeral$t ?v0)) (numeral$g ?v0))) :named a101))
(assert (! (forall ((?v0 Num$)) (= (stream$g (numeral$c ?v0)) (numeral$i ?v0))) :named a102))
(assert (! (forall ((?v0 Num$)) (= (stream$h (numeral$e ?v0)) (numeral$k ?v0))) :named a103))
(assert (! (forall ((?v0 Num$)) (= (stream$c (numeral$n ?v0)) (numeral$l ?v0))) :named a104))
(assert (! (forall ((?v0 Num$)) (= (stream$e (numeral$m ?v0)) (numeral$ ?v0))) :named a105))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (= (= (tree_pure$d ?v0) (tree_pure$d ?v1)) (= ?v0 ?v1))) :named a106))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (tree_pure$e ?v0) (tree_pure$e ?v1)) (= ?v0 ?v1))) :named a107))
(check-sat)
;(get-unsat-core)
