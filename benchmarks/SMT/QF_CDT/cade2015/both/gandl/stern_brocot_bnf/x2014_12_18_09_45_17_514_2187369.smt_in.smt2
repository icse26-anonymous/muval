; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 499
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-codatatypes () ((A_tree$ (node$ (root$ A$) (left$ A_tree$) (right$ A_tree$)))
  (A_tree_tree$ (node$a (root$a A_tree$) (left$a A_tree_tree$) (right$a A_tree_tree$)))
  (A_tree_tree_tree$ (node$b (root$b A_tree_tree$) (left$b A_tree_tree_tree$) (right$b A_tree_tree_tree$)))
  (A_tree_tree_tree_tree$ (node$c (root$c A_tree_tree_tree$) (left$c A_tree_tree_tree_tree$) (right$c A_tree_tree_tree_tree$)))))
(declare-fun a$ () A_tree$)
(declare-fun b$ () A_tree$)
(declare-fun c$ () A_tree$)
(declare-fun plus$ (A_tree$ A_tree$) A_tree$)
(declare-fun plus$a (A$ A$) A$)
(declare-fun plus$b (A_tree_tree_tree_tree$ A_tree_tree_tree_tree$) A_tree_tree_tree_tree$)
(declare-fun plus$c (A_tree_tree_tree$ A_tree_tree_tree$) A_tree_tree_tree$)
(declare-fun plus$d (A_tree_tree$ A_tree_tree$) A_tree_tree$)
(assert (! (not (= b$ c$)) :named a0))
(assert (! (= (plus$ b$ a$) (plus$ c$ a$)) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (= (= (plus$a ?v0 ?v1) (plus$a ?v2 ?v1)) (= ?v0 ?v2))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (= (= (plus$a ?v0 ?v1) (plus$a ?v0 ?v2)) (= ?v1 ?v2))) :named a3))
(assert (! (forall ((?v0 A_tree_tree_tree_tree$) (?v1 A_tree_tree_tree_tree$)) (= (root$c (plus$b ?v0 ?v1)) (plus$c (root$c ?v0) (root$c ?v1)))) :named a4))
(assert (! (forall ((?v0 A_tree_tree_tree$) (?v1 A_tree_tree_tree$)) (= (root$b (plus$c ?v0 ?v1)) (plus$d (root$b ?v0) (root$b ?v1)))) :named a5))
(assert (! (forall ((?v0 A_tree_tree$) (?v1 A_tree_tree$)) (= (root$a (plus$d ?v0 ?v1)) (plus$ (root$a ?v0) (root$a ?v1)))) :named a6))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (= (root$ (plus$ ?v0 ?v1)) (plus$a (root$ ?v0) (root$ ?v1)))) :named a7))
(assert (! (forall ((?v0 A_tree_tree_tree$) (?v1 A_tree_tree_tree$) (?v2 A_tree_tree_tree$)) (= (plus$c (plus$c ?v0 ?v1) ?v2) (plus$c ?v0 (plus$c ?v1 ?v2)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (= (plus$a (plus$a ?v0 ?v1) ?v2) (plus$a ?v0 (plus$a ?v1 ?v2)))) :named a9))
(assert (! (forall ((?v0 A_tree_tree$) (?v1 A_tree_tree$) (?v2 A_tree_tree$)) (= (plus$d (plus$d ?v0 ?v1) ?v2) (plus$d ?v0 (plus$d ?v1 ?v2)))) :named a10))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 A_tree$)) (= (plus$ (plus$ ?v0 ?v1) ?v2) (plus$ ?v0 (plus$ ?v1 ?v2)))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (= (plus$a ?v0 ?v1) (plus$a ?v0 ?v2)) (= ?v1 ?v2))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (= (plus$a ?v0 ?v1) (plus$a ?v2 ?v1)) (= ?v0 ?v2))) :named a13))
(check-sat)
;(get-unsat-core)
