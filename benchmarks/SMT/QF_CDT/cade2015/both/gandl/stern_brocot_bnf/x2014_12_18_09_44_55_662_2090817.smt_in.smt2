; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 456
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_tree_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_a_tree_bool_fun_fun$ 0)
(declare-sort A_tree_a_tree_bool_fun_fun$ 0)
(declare-codatatypes () ((A_tree$ (node$ (root$ A$) (left$ A_tree$) (right$ A_tree$)))))
(declare-fun t$ () A_tree$)
(declare-fun x$ () A$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_tree_bool_fun$ A_tree$) Bool)
(declare-fun fun_app$a (A_tree_a_tree_bool_fun_fun$ A_tree$) A_tree_bool_fun$)
(declare-fun fun_app$b (A_a_tree_bool_fun_fun$ A$) A_tree_bool_fun$)
(declare-fun fun_app$c (A_bool_fun$ A$) Bool)
(declare-fun fun_app$d (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun rel_tree$ (A_a_bool_fun_fun$ A_tree$) A_tree_bool_fun$)
(declare-fun set_tree$ (A_tree$) A_set$)
(declare-fun tree_pure$ (A$) A_tree$)
(assert (! (not (and (= (root$ t$) x$) (and (= (left$ t$) (tree_pure$ x$)) (= (right$ t$) (tree_pure$ x$))))) :named a0))
(assert (! (= t$ (tree_pure$ x$)) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (tree_pure$ ?v0) (tree_pure$ ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A$)) (= (left$ (tree_pure$ ?v0)) (tree_pure$ ?v0))) :named a3))
(assert (! (forall ((?v0 A$)) (= (right$ (tree_pure$ ?v0)) (tree_pure$ ?v0))) :named a4))
(assert (! (forall ((?v0 A$)) (= (root$ (tree_pure$ ?v0)) ?v0)) :named a5))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (=> (and (= (root$ ?v0) (root$ ?v1)) (and (= (left$ ?v0) (left$ ?v1)) (= (right$ ?v0) (right$ ?v1)))) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 A_tree_a_tree_bool_fun_fun$) (?v1 A_tree$) (?v2 A_tree$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (forall ((?v3 A_tree$) (?v4 A_tree$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (and (= (root$ ?v3) (root$ ?v4)) (and (or (fun_app$ (fun_app$a ?v0 (left$ ?v3)) (left$ ?v4)) (= (left$ ?v3) (left$ ?v4))) (or (fun_app$ (fun_app$a ?v0 (right$ ?v3)) (right$ ?v4)) (= (right$ ?v3) (right$ ?v4)))))))) (= ?v1 ?v2))) :named a7))
(assert (! (forall ((?v0 A_tree_a_tree_bool_fun_fun$) (?v1 A_tree$) (?v2 A_tree$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (forall ((?v3 A_tree$) (?v4 A_tree$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (and (= (root$ ?v3) (root$ ?v4)) (and (fun_app$ (fun_app$a ?v0 (left$ ?v3)) (left$ ?v4)) (fun_app$ (fun_app$a ?v0 (right$ ?v3)) (right$ ?v4))))))) (= ?v1 ?v2))) :named a8))
(assert (! (forall ((?v0 A_tree$)) (= (node$ (root$ ?v0) (left$ ?v0) (right$ ?v0)) ?v0)) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_a_tree_bool_fun_fun$)) (=> (and (member$ ?v0 (set_tree$ ?v1)) (and (forall ((?v3 A_tree$)) (fun_app$ (fun_app$b ?v2 (root$ ?v3)) ?v3)) (and (forall ((?v3 A$) (?v4 A_tree$)) (=> (and (member$ ?v3 (set_tree$ (left$ ?v4))) (fun_app$ (fun_app$b ?v2 ?v3) (left$ ?v4))) (fun_app$ (fun_app$b ?v2 ?v3) ?v4))) (forall ((?v3 A$) (?v4 A_tree$)) (=> (and (member$ ?v3 (set_tree$ (right$ ?v4))) (fun_app$ (fun_app$b ?v2 ?v3) (right$ ?v4))) (fun_app$ (fun_app$b ?v2 ?v3) ?v4)))))) (fun_app$ (fun_app$b ?v2 ?v0) ?v1))) :named a10))
(assert (! (forall ((?v0 A_tree$)) (=> (=> (= ?v0 (node$ (root$ ?v0) (left$ ?v0) (right$ ?v0))) false) false)) :named a11))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_tree$) (?v2 A_tree$)) (= (fun_app$ (rel_tree$ ?v0 ?v1) ?v2) (and (fun_app$c (fun_app$d ?v0 (root$ ?v1)) (root$ ?v2)) (and (fun_app$ (rel_tree$ ?v0 (left$ ?v1)) (left$ ?v2)) (fun_app$ (rel_tree$ ?v0 (right$ ?v1)) (right$ ?v2)))))) :named a12))
(assert (! (forall ((?v0 A_tree_a_tree_bool_fun_fun$) (?v1 A_tree$) (?v2 A_tree$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (forall ((?v4 A_tree$) (?v5 A_tree$)) (=> (fun_app$ (fun_app$a ?v0 ?v4) ?v5) (and (fun_app$c (fun_app$d ?v3 (root$ ?v4)) (root$ ?v5)) (and (fun_app$ (fun_app$a ?v0 (left$ ?v4)) (left$ ?v5)) (fun_app$ (fun_app$a ?v0 (right$ ?v4)) (right$ ?v5))))))) (fun_app$ (rel_tree$ ?v3 ?v1) ?v2))) :named a13))
(check-sat)
;(get-unsat-core)
