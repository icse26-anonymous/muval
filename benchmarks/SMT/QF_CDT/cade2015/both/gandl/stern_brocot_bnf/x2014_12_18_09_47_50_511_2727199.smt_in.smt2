; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 492
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-datatypes () ((Nat_nat_prod$ (pair$ (fst$ Nat$) (snd$ Nat$)))
  (Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$) (snd$a Nat_nat_prod$)))))
(declare-fun a$ () A_stream$)
(declare-fun b$ () A_stream$)
(declare-fun c$ () A_stream$)
(declare-fun imat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun plus$ (A_stream$ A_stream$) A_stream$)
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod$)
(assert (! (not (= b$ c$)) :named a0))
(assert (! (= (plus$ a$ b$) (plus$ a$ c$)) :named a1))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ (mulmat$ ?v0 ?v1) ?v2) (mulmat$ ?v0 (mulmat$ ?v1 ?v2)))) :named a2))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ ?v0 imat$) ?v0)) :named a3))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ imat$ ?v0) ?v0)) :named a4))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_stream$)) (= (plus$ (plus$ ?v0 ?v1) ?v2) (plus$ ?v0 (plus$ ?v1 ?v2)))) :named a5))
(check-sat)
;(get-unsat-core)
