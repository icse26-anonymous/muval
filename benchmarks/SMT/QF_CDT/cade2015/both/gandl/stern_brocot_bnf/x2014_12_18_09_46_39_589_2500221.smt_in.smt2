; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 659
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-datatypes () ((Nat_nat_prod$ (pair$ (fst$ Nat$) (snd$ Nat$)))
  (Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$) (snd$a Nat_nat_prod$)))))
(declare-fun a$ () Nat$)
(declare-fun b$ () Nat$)
(declare-fun c$ () Nat$)
(declare-fun x$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun y$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun aa$ () Nat$)
(declare-fun ba$ () Nat$)
(declare-fun bb$ () Nat$)
(declare-fun ca$ () Nat$)
(declare-fun baa$ () Nat$)
(declare-fun det$ (Nat_nat_prod_nat_nat_prod_prod$) Nat$)
(declare-fun one$ () Nat$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun zero$ () Nat$)
(declare-fun times$ (Nat$ Nat$) Nat$)
(declare-fun uRmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun mediant$ (Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod$)
(assert (! (not (fun_app$ (less$ (times$ (fst$ (mediant$ (pair$a (pair$ a$ b$) (pair$ ba$ c$)))) (snd$ (mediant$ (mulmat$ (pair$a (pair$ a$ b$) (pair$ ba$ c$)) (mulmat$ uRmat$ (pair$a (pair$ aa$ bb$) (pair$ baa$ ca$)))))))) (times$ (fst$ (mediant$ (mulmat$ (pair$a (pair$ a$ b$) (pair$ ba$ c$)) (mulmat$ uRmat$ (pair$a (pair$ aa$ bb$) (pair$ baa$ ca$)))))) (snd$ (mediant$ (pair$a (pair$ a$ b$) (pair$ ba$ c$))))))) :named a0))
(assert (! (fun_app$ (less$ zero$) (snd$ (mediant$ (mulmat$ (pair$a (pair$ a$ b$) (pair$ ba$ c$)) (mulmat$ uRmat$ (pair$a (pair$ aa$ bb$) (pair$ baa$ ca$))))))) :named a1))
(assert (! (= (det$ (pair$a (pair$ a$ b$) (pair$ ba$ c$))) (suc$ zero$)) :named a2))
(assert (! (= (det$ (pair$a (pair$ aa$ bb$) (pair$ baa$ ca$))) (suc$ zero$)) :named a3))
(assert (! (fun_app$ (less$ zero$) (snd$ (mediant$ (pair$a (pair$ a$ b$) (pair$ ba$ c$))))) :named a4))
(assert (! (= x$ (pair$a (pair$ a$ b$) (pair$ ba$ c$))) :named a5))
(assert (! (= y$ (pair$a (pair$ aa$ bb$) (pair$ baa$ ca$))) :named a6))
(assert (! (fun_app$ (less$ zero$) (snd$ (mediant$ x$))) :named a7))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ (mulmat$ ?v0 ?v1) ?v2) (mulmat$ ?v0 (mulmat$ ?v1 ?v2)))) :named a8))
(assert (! (= (det$ x$) one$) :named a9))
(assert (! (fun_app$ (less$ zero$) (snd$ (mediant$ (mulmat$ (mulmat$ x$ uRmat$) y$)))) :named a10))
(assert (! (= (det$ y$) one$) :named a11))
(assert (! (forall ((?v0 Nat_nat_prod$)) (=> (and (forall ((?v1 Nat$)) (=> (= ?v0 (pair$ zero$ ?v1)) false)) (and (forall ((?v1 Nat$)) (=> (= ?v0 (pair$ ?v1 zero$)) false)) (and (forall ((?v1 Nat$) (?v2 Nat$)) (=> (and (= ?v1 ?v2) (= ?v0 (pair$ (suc$ ?v1) (suc$ ?v2)))) false)) (and (forall ((?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less$ ?v1) ?v2) (= ?v0 (pair$ (suc$ ?v1) (suc$ ?v2)))) false)) (forall ((?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ (less$ ?v2) ?v1) (= ?v0 (pair$ (suc$ ?v1) (suc$ ?v2)))) false)))))) false)) :named a12))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (=> (fun_app$ (less$ zero$) (snd$ (mediant$ ?v0))) (fun_app$ (less$ zero$) (snd$ (mediant$ (mulmat$ ?v0 uRmat$)))))) :named a13))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (pair$a (fst$a ?v0) (snd$a ?v0)) ?v0)) :named a14))
(assert (! (forall ((?v0 Nat_nat_prod$)) (= (pair$ (fst$ ?v0) (snd$ ?v0)) ?v0)) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (less$ (times$ ?v0 ?v1)) (times$ ?v0 ?v2)) (and (fun_app$ (less$ zero$) ?v0) (fun_app$ (less$ ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (less$ (times$ ?v0 ?v1)) (times$ ?v2 ?v1)) (and (fun_app$ (less$ zero$) ?v1) (fun_app$ (less$ ?v0) ?v2)))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (less$ zero$) (times$ ?v0 ?v1)) (and (fun_app$ (less$ zero$) ?v0) (fun_app$ (less$ zero$) ?v1)))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (times$ ?v0 ?v1) (suc$ zero$)) (and (= ?v0 (suc$ zero$)) (= ?v1 (suc$ zero$))))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ zero$) (times$ ?v0 ?v1)) (and (= ?v0 (suc$ zero$)) (= ?v1 (suc$ zero$))))) :named a20))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (less$ ?v0) (suc$ zero$)) (= ?v0 zero$)) :pattern ((less$ ?v0)))) :named a21))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (less$ zero$) (suc$ ?v0))) :named a22))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (times$ ?v0 ?v1) (times$ ?v2 ?v1)) (or (= ?v0 ?v2) (= ?v1 zero$)))) :named a23))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (times$ ?v0 ?v1) (times$ ?v0 ?v2)) (or (= ?v1 ?v2) (= ?v0 zero$)))) :named a24))
(check-sat)
;(get-unsat-core)
