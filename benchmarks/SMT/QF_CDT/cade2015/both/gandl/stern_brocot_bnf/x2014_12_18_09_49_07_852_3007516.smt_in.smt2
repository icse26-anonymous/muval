; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 576
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-codatatypes () ((Int_tree$ (node$ (root$ Int) (left$ Int_tree$) (right$ Int_tree$)))))
(declare-datatypes () ((Num$ (one$) (bit0$ (select$ Num$)) (bit1$ (selecta$ Num$)))))
(declare-fun den$ () Int_tree$)
(declare-fun num$ () Int_tree$)
(declare-fun plus$ (Int_tree$ Int_tree$) Int_tree$)
(declare-fun minus$ (Int_tree$ Int_tree$) Int_tree$)
(declare-fun times$ (Int_tree$ Int_tree$) Int_tree$)
(declare-fun fIXME_x$ () Int_tree$)
(declare-fun numeral$ (Num$) Int_tree$)
(declare-fun tree_chop$ (Int_tree$) Int_tree$)
(assert (! (not (= (minus$ (plus$ num$ den$) (tree_chop$ den$)) (node$ 0 (times$ (numeral$ (bit0$ one$)) num$) (minus$ (plus$ num$ den$) (tree_chop$ den$))))) :named a0))
(assert (! (forall ((?v0 Int) (?v1 Int_tree$) (?v2 Int_tree$) (?v3 Int) (?v4 Int_tree$) (?v5 Int_tree$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a1))
(assert (! (forall ((?v0 Int_tree$) (?v1 Int_tree$)) (= (tree_chop$ (plus$ ?v0 ?v1)) (plus$ (tree_chop$ ?v0) (tree_chop$ ?v1)))) :named a2))
(assert (! (= den$ (tree_chop$ num$)) :named a3))
(assert (! (forall ((?v0 Int_tree$)) (=> (forall ((?v1 Int) (?v2 Int_tree$) (?v3 Int_tree$)) (=> (= ?v0 (node$ ?v1 ?v2 ?v3)) false)) false)) :named a4))
(assert (! (forall ((?v0 Int_tree$)) (=> (= ?v0 (node$ 0 (times$ (numeral$ (bit0$ one$)) num$) ?v0)) (= ?v0 (times$ (numeral$ (bit0$ one$)) fIXME_x$)))) :named a5))
(assert (! (forall ((?v0 Int_tree$) (?v1 Int_tree$) (?v2 Num$)) (= (times$ (minus$ ?v0 ?v1) (numeral$ ?v2)) (minus$ (times$ ?v0 (numeral$ ?v2)) (times$ ?v1 (numeral$ ?v2))))) :named a6))
(assert (! (forall ((?v0 Num$) (?v1 Int_tree$) (?v2 Int_tree$)) (= (times$ (numeral$ ?v0) (minus$ ?v1 ?v2)) (minus$ (times$ (numeral$ ?v0) ?v1) (times$ (numeral$ ?v0) ?v2)))) :named a7))
(assert (! (forall ((?v0 Int_tree$) (?v1 Int_tree$) (?v2 Num$)) (= (times$ (plus$ ?v0 ?v1) (numeral$ ?v2)) (plus$ (times$ ?v0 (numeral$ ?v2)) (times$ ?v1 (numeral$ ?v2))))) :named a8))
(assert (! (forall ((?v0 Num$) (?v1 Int_tree$) (?v2 Int_tree$)) (= (times$ (numeral$ ?v0) (plus$ ?v1 ?v2)) (plus$ (times$ (numeral$ ?v0) ?v1) (times$ (numeral$ ?v0) ?v2)))) :named a9))
(assert (! (forall ((?v0 Num$)) (= (= (bit0$ ?v0) one$) false)) :named a10))
(assert (! (forall ((?v0 Num$)) (= (= one$ (bit0$ ?v0)) false)) :named a11))
(assert (! (forall ((?v0 Int_tree$)) (= (times$ (numeral$ (bit0$ one$)) ?v0) (plus$ ?v0 ?v0))) :named a12))
(assert (! (forall ((?v0 Int_tree$)) (= (times$ ?v0 (numeral$ (bit0$ one$))) (plus$ ?v0 ?v0))) :named a13))
(check-sat)
;(get-unsat-core)
