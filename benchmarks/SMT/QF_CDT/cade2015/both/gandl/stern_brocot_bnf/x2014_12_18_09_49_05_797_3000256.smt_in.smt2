; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 599
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-codatatypes () ((Int_tree$ (node$ (root$ Int) (left$ Int_tree$) (right$ Int_tree$)))))
(declare-datatypes () ((Num$ (one$) (bit0$ (select$ Num$)) (bit1$ (selecta$ Num$)))))
(declare-codatatypes () ((Int_tree_tree$ (node$a (root$a Int_tree$) (left$a Int_tree_tree$) (right$a Int_tree_tree$)))
  (Int_tree_tree_tree$ (node$b (root$b Int_tree_tree$) (left$b Int_tree_tree_tree$) (right$b Int_tree_tree_tree$)))
  (Int_tree_tree_tree_tree$ (node$c (root$c Int_tree_tree_tree$) (left$c Int_tree_tree_tree_tree$) (right$c Int_tree_tree_tree_tree$)))))
(declare-fun xa$ () Int_tree$)
(declare-fun num$ () Int_tree$)
(declare-fun times$ (Int_tree$ Int_tree$) Int_tree$)
(declare-fun times$a (Int_tree_tree_tree$ Int_tree_tree_tree$) Int_tree_tree_tree$)
(declare-fun times$b (Int_tree_tree$ Int_tree_tree$) Int_tree_tree$)
(declare-fun times$c (Int_tree_tree_tree_tree$ Int_tree_tree_tree_tree$) Int_tree_tree_tree_tree$)
(declare-fun times$d (Int Int) Int)
(declare-fun fIXME_x$ () Int_tree$)
(declare-fun numeral$ (Num$) Int_tree$)
(declare-fun numeral$a (Num$) Int_tree_tree_tree$)
(declare-fun numeral$b (Num$) Int_tree_tree$)
(declare-fun numeral$c (Num$) Int_tree_tree_tree_tree$)
(declare-fun numeral$d (Num$) Int)
(assert (! (not (and (= (root$ xa$) (root$ (times$ (numeral$ (bit0$ one$)) fIXME_x$))) (and (or (exists ((?v0 Int_tree$)) (and (= (left$ xa$) ?v0) (and (= (left$ (times$ (numeral$ (bit0$ one$)) fIXME_x$)) (times$ (numeral$ (bit0$ one$)) fIXME_x$)) (= ?v0 (node$ 0 (times$ (numeral$ (bit0$ one$)) num$) ?v0))))) (= (left$ xa$) (left$ (times$ (numeral$ (bit0$ one$)) fIXME_x$)))) (or (exists ((?v0 Int_tree$)) (and (= (right$ xa$) ?v0) (and (= (right$ (times$ (numeral$ (bit0$ one$)) fIXME_x$)) (times$ (numeral$ (bit0$ one$)) fIXME_x$)) (= ?v0 (node$ 0 (times$ (numeral$ (bit0$ one$)) num$) ?v0))))) (= (right$ xa$) (right$ (times$ (numeral$ (bit0$ one$)) fIXME_x$))))))) :named a0))
(assert (! (forall ((?v0 Int_tree$) (?v1 Int_tree_tree$) (?v2 Int_tree_tree$) (?v3 Int_tree$) (?v4 Int_tree_tree$) (?v5 Int_tree_tree$)) (= (= (node$a ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a1))
(assert (! (forall ((?v0 Int) (?v1 Int_tree$) (?v2 Int_tree$) (?v3 Int) (?v4 Int_tree$) (?v5 Int_tree$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a2))
(assert (! (= xa$ (node$ 0 (times$ (numeral$ (bit0$ one$)) num$) xa$)) :named a3))
(assert (! (forall ((?v0 Int_tree_tree_tree$) (?v1 Int_tree_tree_tree$)) (= (left$b (times$a ?v0 ?v1)) (times$a (left$b ?v0) (left$b ?v1)))) :named a4))
(assert (! (forall ((?v0 Int_tree_tree$) (?v1 Int_tree_tree$)) (= (left$a (times$b ?v0 ?v1)) (times$b (left$a ?v0) (left$a ?v1)))) :named a5))
(assert (! (forall ((?v0 Int_tree$) (?v1 Int_tree$)) (= (left$ (times$ ?v0 ?v1)) (times$ (left$ ?v0) (left$ ?v1)))) :named a6))
(assert (! (forall ((?v0 Int_tree_tree_tree$) (?v1 Int_tree_tree_tree$)) (= (right$b (times$a ?v0 ?v1)) (times$a (right$b ?v0) (right$b ?v1)))) :named a7))
(assert (! (forall ((?v0 Int_tree_tree$) (?v1 Int_tree_tree$)) (= (right$a (times$b ?v0 ?v1)) (times$b (right$a ?v0) (right$a ?v1)))) :named a8))
(assert (! (forall ((?v0 Int_tree$) (?v1 Int_tree$)) (= (right$ (times$ ?v0 ?v1)) (times$ (right$ ?v0) (right$ ?v1)))) :named a9))
(assert (! (forall ((?v0 Num$)) (= (left$b (numeral$a ?v0)) (numeral$a ?v0))) :named a10))
(assert (! (forall ((?v0 Num$)) (= (left$a (numeral$b ?v0)) (numeral$b ?v0))) :named a11))
(assert (! (forall ((?v0 Num$)) (= (left$ (numeral$ ?v0)) (numeral$ ?v0))) :named a12))
(assert (! (forall ((?v0 Num$)) (= (right$b (numeral$a ?v0)) (numeral$a ?v0))) :named a13))
(assert (! (forall ((?v0 Num$)) (= (right$a (numeral$b ?v0)) (numeral$b ?v0))) :named a14))
(assert (! (forall ((?v0 Num$)) (= (right$ (numeral$ ?v0)) (numeral$ ?v0))) :named a15))
(assert (! (forall ((?v0 Int_tree_tree_tree_tree$) (?v1 Int_tree_tree_tree_tree$)) (= (root$c (times$c ?v0 ?v1)) (times$a (root$c ?v0) (root$c ?v1)))) :named a16))
(assert (! (forall ((?v0 Int_tree_tree_tree$) (?v1 Int_tree_tree_tree$)) (= (root$b (times$a ?v0 ?v1)) (times$b (root$b ?v0) (root$b ?v1)))) :named a17))
(assert (! (forall ((?v0 Int_tree_tree$) (?v1 Int_tree_tree$)) (= (root$a (times$b ?v0 ?v1)) (times$ (root$a ?v0) (root$a ?v1)))) :named a18))
(assert (! (forall ((?v0 Int_tree$) (?v1 Int_tree$)) (= (root$ (times$ ?v0 ?v1)) (times$d (root$ ?v0) (root$ ?v1)))) :named a19))
(assert (! (= (left$ num$) num$) :named a20))
(assert (! (forall ((?v0 Num$)) (= (root$c (numeral$c ?v0)) (numeral$a ?v0))) :named a21))
(assert (! (forall ((?v0 Num$)) (= (root$b (numeral$a ?v0)) (numeral$b ?v0))) :named a22))
(assert (! (forall ((?v0 Num$)) (= (root$a (numeral$b ?v0)) (numeral$ ?v0))) :named a23))
(assert (! (forall ((?v0 Num$)) (= (root$ (numeral$ ?v0)) (numeral$d ?v0))) :named a24))
(assert (! (= (right$ fIXME_x$) fIXME_x$) :named a25))
(assert (! (forall ((?v0 Int_tree_tree_tree$)) (= (node$b (root$b ?v0) (left$b ?v0) (right$b ?v0)) ?v0)) :named a26))
(assert (! (forall ((?v0 Int_tree_tree$)) (= (node$a (root$a ?v0) (left$a ?v0) (right$a ?v0)) ?v0)) :named a27))
(assert (! (forall ((?v0 Int_tree$)) (= (node$ (root$ ?v0) (left$ ?v0) (right$ ?v0)) ?v0)) :named a28))
(assert (! (= (root$ fIXME_x$) 0) :named a29))
(assert (! (= (left$ fIXME_x$) num$) :named a30))
(assert (! (forall ((?v0 Int_tree$) (?v1 Int_tree_tree$) (?v2 Int_tree_tree$)) (! (= (left$a (node$a ?v0 ?v1 ?v2)) ?v1) :pattern ((node$a ?v0 ?v1 ?v2)))) :named a31))
(assert (! (forall ((?v0 Int) (?v1 Int_tree$) (?v2 Int_tree$)) (! (= (left$ (node$ ?v0 ?v1 ?v2)) ?v1) :pattern ((node$ ?v0 ?v1 ?v2)))) :named a32))
(assert (! (forall ((?v0 Int_tree_tree$) (?v1 Int_tree_tree_tree$) (?v2 Int_tree_tree_tree$)) (! (= (root$b (node$b ?v0 ?v1 ?v2)) ?v0) :pattern ((node$b ?v0 ?v1 ?v2)))) :named a33))
(assert (! (forall ((?v0 Int_tree$) (?v1 Int_tree_tree$) (?v2 Int_tree_tree$)) (! (= (root$a (node$a ?v0 ?v1 ?v2)) ?v0) :pattern ((node$a ?v0 ?v1 ?v2)))) :named a34))
(assert (! (forall ((?v0 Int) (?v1 Int_tree$) (?v2 Int_tree$)) (! (= (root$ (node$ ?v0 ?v1 ?v2)) ?v0) :pattern ((node$ ?v0 ?v1 ?v2)))) :named a35))
(assert (! (forall ((?v0 Int_tree$) (?v1 Int_tree_tree$) (?v2 Int_tree_tree$)) (! (= (right$a (node$a ?v0 ?v1 ?v2)) ?v2) :pattern ((node$a ?v0 ?v1 ?v2)))) :named a36))
(assert (! (forall ((?v0 Int) (?v1 Int_tree$) (?v2 Int_tree$)) (! (= (right$ (node$ ?v0 ?v1 ?v2)) ?v2) :pattern ((node$ ?v0 ?v1 ?v2)))) :named a37))
(assert (! (forall ((?v0 Int_tree_tree_tree$)) (=> (=> (= ?v0 (node$b (root$b ?v0) (left$b ?v0) (right$b ?v0))) false) false)) :named a38))
(assert (! (forall ((?v0 Int_tree_tree$)) (=> (=> (= ?v0 (node$a (root$a ?v0) (left$a ?v0) (right$a ?v0))) false) false)) :named a39))
(assert (! (forall ((?v0 Int_tree$)) (=> (=> (= ?v0 (node$ (root$ ?v0) (left$ ?v0) (right$ ?v0))) false) false)) :named a40))
(check-sat)
;(get-unsat-core)
