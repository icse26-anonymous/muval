; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 474
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_a_fun_set$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun$ 0)
(declare-sort A_a_stream_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort A_a_a_fun_fun_set$ 0)
(declare-sort A_a_fun_a_fun_set$ 0)
(declare-sort A_a_fun_stream_set$ 0)
(declare-sort A_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_stream_stream_set$ 0)
(declare-sort A_a_fun_a_stream_fun$ 0)
(declare-sort A_stream_a_a_fun_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_set$ 0)
(declare-sort A_a_a_fun_fun_stream_set$ 0)
(declare-sort A_a_fun_a_fun_stream_set$ 0)
(declare-sort A_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_fun_stream_stream_set$ 0)
(declare-sort A_stream_stream_stream_set$ 0)
(declare-sort A_a_fun_a_a_fun_fun_stream_set$ 0)
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_fun_stream_a_a_fun_stream_fun$ 0)
(declare-sort A_a_stream_fun_a_a_stream_fun_fun$ 0)
(declare-sort A_stream_a_fun_a_stream_a_fun_fun$ 0)
(declare-sort A_stream_stream_a_stream_stream_fun$ 0)
(declare-sort A_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_a_fun_fun_a_a_a_fun_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_stream_fun_a_a_fun_a_stream_fun_fun$ 0)
(declare-sort A_stream_a_a_fun_fun_a_stream_a_a_fun_fun_fun$ 0)
(declare-sort A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ 0)
(declare-sort A_a_a_fun_a_a_fun_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_a_fun_fun_fun_a_a_fun_a_a_a_fun_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_a_a_fun_fun_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (A_a_fun_a_a_fun_fun_stream$ (sCons$a (select$ A_a_fun_a_a_fun_fun$) (selecta$ A_a_fun_a_a_fun_fun_stream$)))
  (A_a_fun_a_fun_stream$ (sCons$b (selectb$ A_a_fun_a_fun$) (selectc$ A_a_fun_a_fun_stream$)))
  (A_a_a_fun_fun_stream$ (sCons$c (selectd$ A_a_a_fun_fun$) (selecte$ A_a_a_fun_fun_stream$)))
  (A_stream_stream$ (sCons$d (shd$a A_stream$) (stl$a A_stream_stream$)))
  (A_a_fun_stream$ (sCons$e (selectf$ A_a_fun$) (selectg$ A_a_fun_stream$)))
  (A_a_stream_fun_stream$ (sCons$f (selecth$ A_a_stream_fun$) (selecti$ A_a_stream_fun_stream$)))
  (A_stream_a_fun_stream$ (sCons$g (selectj$ A_stream_a_fun$) (selectk$ A_stream_a_fun_stream$)))
  (A_stream_a_stream_fun_stream$ (sCons$h (selectl$ A_stream_a_stream_fun$) (selectm$ A_stream_a_stream_fun_stream$)))
  (A_a_fun_a_stream_fun_stream$ (sCons$i (selectn$ A_a_fun_a_stream_fun$) (selecto$ A_a_fun_a_stream_fun_stream$)))
  (A_stream_a_a_fun_fun_stream$ (sCons$j (selectp$ A_stream_a_a_fun_fun$) (selectq$ A_stream_a_a_fun_fun_stream$)))
  (A_a_a_fun_a_fun_fun_stream$ (sCons$k (selectr$ A_a_a_fun_a_fun_fun$) (selects$ A_a_a_fun_a_fun_fun_stream$)))
  (A_a_fun_stream_stream$ (sCons$l (shd$b A_a_fun_stream$) (stl$b A_a_fun_stream_stream$)))
  (A_stream_stream_stream$ (sCons$m (shd$c A_stream_stream$) (stl$c A_stream_stream_stream$)))
  (A_a_fun_a_a_fun_a_a_fun_fun_fun_stream$ (sCons$n (selectt$ A_a_fun_a_a_fun_a_a_fun_fun_fun$) (selectu$ A_a_fun_a_a_fun_a_a_fun_fun_fun_stream$)))
  (A_a_fun_a_a_fun_a_fun_fun_stream$ (sCons$o (selectv$ A_a_fun_a_a_fun_a_fun_fun$) (selectw$ A_a_fun_a_a_fun_a_fun_fun_stream$)))
  (A_a_a_a_fun_fun_fun_stream$ (sCons$p (selectx$ A_a_a_a_fun_fun_fun$) (selecty$ A_a_a_a_fun_fun_fun_stream$)))
  (A_a_a_fun_a_a_fun_fun_fun_stream$ (sCons$q (selectz$ A_a_a_fun_a_a_fun_fun_fun$) (selecua$ A_a_a_fun_a_a_fun_fun_fun_stream$)))
  (A_a_fun_a_a_a_fun_fun_fun_stream$ (sCons$r (selecub$ A_a_fun_a_a_a_fun_fun_fun$) (selecuc$ A_a_fun_a_a_a_fun_fun_fun_stream$)))))
(declare-fun id$ () A_a_fun$)
(declare-fun na$ () Nat$)
(declare-fun uu$ (A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun id$a () A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun id$b () A_a_fun_a_fun_a_a_fun_a_fun_fun$)
(declare-fun id$c () A_a_a_fun_fun_a_a_a_fun_fun_fun$)
(declare-fun id$d () A_stream_a_stream_fun$)
(declare-fun id$e () A_a_fun_a_a_fun_fun$)
(declare-fun id$f () A_a_stream_fun_a_a_stream_fun_fun$)
(declare-fun id$g () A_stream_a_fun_a_stream_a_fun_fun$)
(declare-fun id$h () A_stream_a_stream_fun_a_stream_a_stream_fun_fun$)
(declare-fun id$i () A_a_fun_a_stream_fun_a_a_fun_a_stream_fun_fun$)
(declare-fun id$j () A_stream_a_a_fun_fun_a_stream_a_a_fun_fun_fun$)
(declare-fun id$k () A_a_a_fun_a_fun_fun_a_a_a_fun_a_fun_fun_fun$)
(declare-fun id$l () A_a_fun_stream_a_a_fun_stream_fun$)
(declare-fun id$m () A_stream_stream_a_stream_stream_fun$)
(declare-fun id$n () A_a_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_a_a_fun_fun_fun_fun$)
(declare-fun id$o () A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_a_fun_fun_fun$)
(declare-fun id$p () A_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_fun_fun$)
(declare-fun id$q () A_a_a_fun_a_a_fun_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun$)
(declare-fun id$r () A_a_fun_a_a_a_fun_fun_fun_a_a_fun_a_a_a_fun_fun_fun_fun$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun uua$ (A$) A_a_fun_a_fun$)
(declare-fun uub$ (A_a_fun$) A_a_a_fun_fun$)
(declare-fun uuc$ (A$) A_a_fun$)
(declare-fun uud$ (A_a_fun_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun uue$ (A_a_fun_a_a_fun_a_fun_fun$) A_a_fun_a_fun$)
(declare-fun uuf$ (A_a_a_a_fun_fun_fun$) A_a_a_fun_fun$)
(declare-fun uug$ (A_a_a_fun_fun$) A_a_fun$)
(declare-fun uuh$ () A_a_fun_a_a_fun_fun$)
(declare-fun uui$ () A_a_fun$)
(declare-fun uuj$ (A_a_fun_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun uuk$ (A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun uul$ (A_a_a_fun_fun$) A_a_a_fun_a_a_fun_fun_fun$)
(declare-fun uum$ (A_a_fun$) A_a_a_fun_a_fun_fun$)
(declare-fun uun$ (A_a_fun_a_fun$) A_a_fun_a_a_fun_a_fun_fun$)
(declare-fun uuo$ (A_a_fun_a_a_fun_fun$) A_a_fun_a_a_a_fun_fun_fun$)
(declare-fun uup$ (A_a_a_fun_fun$) A_a_a_a_fun_fun_fun$)
(declare-fun uuq$ (A_a_fun$) A_a_a_fun_fun$)
(declare-fun smap$ (A_a_fun$) A_stream_a_stream_fun$)
(declare-fun smap$a (A_a_a_fun_fun$ A_stream$) A_a_fun_stream$)
(declare-fun smap$b (A_a_fun_a_fun$ A_a_fun_stream$) A_stream$)
(declare-fun smap$c (A_a_fun_a_a_fun_fun$ A_a_fun_stream$) A_a_fun_stream$)
(declare-fun smap$d (A_a_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun smap$e (A_stream_a_fun$ A_stream_stream$) A_stream$)
(declare-fun smap$f (A_stream_a_stream_fun$ A_stream_stream$) A_stream_stream$)
(declare-fun smap$g (A_a_fun_a_stream_fun$ A_a_fun_stream$) A_stream_stream$)
(declare-fun smap$h (A_stream_a_a_fun_fun$ A_stream_stream$) A_a_fun_stream$)
(declare-fun smap$i (A_a_a_fun_a_fun_fun$ A_stream$) A_a_fun_a_fun_stream$)
(declare-fun st_ap$ (A_a_fun_a_a_fun_fun_stream$ A_a_fun_stream$) A_a_fun_stream$)
(declare-fun member$ (A_a_fun_stream$ A_a_fun_stream_set$) Bool)
(declare-fun of_nat$ (Nat$) A_stream$)
(declare-fun st_ap$a (A_a_fun_a_fun_stream$ A_a_fun_stream$) A_stream$)
(declare-fun st_ap$b (A_a_a_fun_fun_stream$ A_stream$) A_a_fun_stream$)
(declare-fun st_ap$c (A_a_fun_stream$) A_stream_a_stream_fun$)
(declare-fun st_ap$d (A_a_stream_fun_stream$ A_stream$) A_stream_stream$)
(declare-fun st_ap$e (A_stream_a_fun_stream$ A_stream_stream$) A_stream$)
(declare-fun st_ap$f (A_stream_a_stream_fun_stream$ A_stream_stream$) A_stream_stream$)
(declare-fun st_ap$g (A_a_fun_a_stream_fun_stream$ A_a_fun_stream$) A_stream_stream$)
(declare-fun st_ap$h (A_stream_a_a_fun_fun_stream$ A_stream_stream$) A_a_fun_stream$)
(declare-fun st_ap$i (A_a_a_fun_a_fun_fun_stream$ A_stream$) A_a_fun_a_fun_stream$)
(declare-fun st_ap$j (A_a_fun_a_a_fun_a_a_fun_fun_fun_stream$ A_a_fun_stream$) A_a_fun_a_a_fun_fun_stream$)
(declare-fun st_ap$k (A_a_fun_a_a_fun_a_fun_fun_stream$ A_a_fun_stream$) A_a_fun_a_fun_stream$)
(declare-fun st_ap$l (A_a_a_a_fun_fun_fun_stream$ A_stream$) A_a_a_fun_fun_stream$)
(declare-fun st_ap$m (A_a_a_fun_a_a_fun_fun_fun_stream$ A_stream$) A_a_fun_a_a_fun_fun_stream$)
(declare-fun st_ap$n (A_a_fun_a_a_a_fun_fun_fun_stream$ A_a_fun_stream$) A_a_a_fun_fun_stream$)
(declare-fun fun_app$ (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun member$a (A_a_fun_stream_stream$ A_a_fun_stream_stream_set$) Bool)
(declare-fun member$b (A_stream_stream$ A_stream_stream_set$) Bool)
(declare-fun member$c (A_stream_stream_stream$ A_stream_stream_stream_set$) Bool)
(declare-fun member$d (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_set$) Bool)
(declare-fun member$e (A_a_fun_a_a_fun_fun_stream$ A_a_fun_a_a_fun_fun_stream_set$) Bool)
(declare-fun member$f (A_a_fun_a_fun$ A_a_fun_a_fun_set$) Bool)
(declare-fun member$g (A_a_fun_a_fun_stream$ A_a_fun_a_fun_stream_set$) Bool)
(declare-fun member$h (A_a_a_fun_fun$ A_a_a_fun_fun_set$) Bool)
(declare-fun member$i (A_a_a_fun_fun_stream$ A_a_a_fun_fun_stream_set$) Bool)
(declare-fun member$j (A_stream$ A_stream_set$) Bool)
(declare-fun member$k (A_a_fun$ A_a_fun_set$) Bool)
(declare-fun member$l (A$ A_set$) Bool)
(declare-fun of_nat$a (Nat$) A$)
(declare-fun streams$ (A_a_fun_stream_set$) A_a_fun_stream_stream_set$)
(declare-fun fun_app$a (A_a_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$b (A_a_fun_a_fun$ A_a_fun$) A$)
(declare-fun fun_app$c (A_a_fun_a_a_fun_a_fun_fun$ A_a_fun$) A_a_fun_a_fun$)
(declare-fun fun_app$d (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$e (A_a_a_a_fun_fun_fun$ A$) A_a_a_fun_fun$)
(declare-fun fun_app$f (A_a_fun$ A$) A$)
(declare-fun fun_app$g (A_a_fun_a_a_a_fun_fun_fun$ A_a_fun$) A_a_a_fun_fun$)
(declare-fun fun_app$h (A_a_a_fun_a_a_fun_fun_fun$ A$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$i (A_a_a_fun_a_fun_fun$ A$) A_a_fun_a_fun$)
(declare-fun fun_app$j (A_a_stream_fun$ A$) A_stream$)
(declare-fun fun_app$k (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$l (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$) A_a_fun_a_fun$)
(declare-fun fun_app$m (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$) A_a_a_fun_fun$)
(declare-fun fun_app$n (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$o (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$p (A_a_fun_a_stream_fun$ A_a_fun$) A_stream$)
(declare-fun fun_app$q (A_stream_a_a_fun_fun$ A_stream$) A_a_fun$)
(declare-fun siterate$ (A_a_fun$) A_a_stream_fun$)
(declare-fun streams$a (A_stream_stream_set$) A_stream_stream_stream_set$)
(declare-fun streams$b (A_a_fun_a_a_fun_fun_set$) A_a_fun_a_a_fun_fun_stream_set$)
(declare-fun streams$c (A_a_fun_a_fun_set$) A_a_fun_a_fun_stream_set$)
(declare-fun streams$d (A_a_a_fun_fun_set$) A_a_a_fun_fun_stream_set$)
(declare-fun streams$e (A_stream_set$) A_stream_stream_set$)
(declare-fun streams$f (A_a_fun_set$) A_a_fun_stream_set$)
(declare-fun streams$g (A_set$) A_stream_set$)
(declare-fun siterate$a (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_stream$)
(declare-fun siterate$b (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$) A_a_fun_a_fun_stream$)
(declare-fun siterate$c (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$) A_a_a_fun_fun_stream$)
(declare-fun siterate$d (A_stream_a_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun siterate$e (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun_stream$)
(declare-fun siterate$f (A_a_stream_fun_a_a_stream_fun_fun$ A_a_stream_fun$) A_a_stream_fun_stream$)
(declare-fun siterate$g (A_stream_a_fun_a_stream_a_fun_fun$ A_stream_a_fun$) A_stream_a_fun_stream$)
(declare-fun siterate$h (A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ A_stream_a_stream_fun$) A_stream_a_stream_fun_stream$)
(declare-fun siterate$i (A_a_fun_a_stream_fun_a_a_fun_a_stream_fun_fun$ A_a_fun_a_stream_fun$) A_a_fun_a_stream_fun_stream$)
(declare-fun siterate$j (A_stream_a_a_fun_fun_a_stream_a_a_fun_fun_fun$ A_stream_a_a_fun_fun$) A_stream_a_a_fun_fun_stream$)
(declare-fun siterate$k (A_a_a_fun_a_fun_fun_a_a_a_fun_a_fun_fun_fun$ A_a_a_fun_a_fun_fun$) A_a_a_fun_a_fun_fun_stream$)
(declare-fun siterate$l (A_a_fun_stream_a_a_fun_stream_fun$ A_a_fun_stream$) A_a_fun_stream_stream$)
(declare-fun siterate$m (A_stream_stream_a_stream_stream_fun$ A_stream_stream$) A_stream_stream_stream$)
(declare-fun siterate$n (A_a_fun_a_a_fun_a_a_fun_fun_fun_a_a_fun_a_a_fun_a_a_fun_fun_fun_fun$ A_a_fun_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_a_a_fun_fun_fun_stream$)
(declare-fun siterate$o (A_a_fun_a_a_fun_a_fun_fun_a_a_fun_a_a_fun_a_fun_fun_fun$ A_a_fun_a_a_fun_a_fun_fun$) A_a_fun_a_a_fun_a_fun_fun_stream$)
(declare-fun siterate$p (A_a_a_a_fun_fun_fun_a_a_a_a_fun_fun_fun_fun$ A_a_a_a_fun_fun_fun$) A_a_a_a_fun_fun_fun_stream$)
(declare-fun siterate$q (A_a_a_fun_a_a_fun_fun_fun_a_a_a_fun_a_a_fun_fun_fun_fun$ A_a_a_fun_a_a_fun_fun_fun$) A_a_a_fun_a_a_fun_fun_fun_stream$)
(declare-fun siterate$r (A_a_fun_a_a_a_fun_fun_fun_a_a_fun_a_a_a_fun_fun_fun_fun$ A_a_fun_a_a_a_fun_fun_fun$) A_a_fun_a_a_a_fun_fun_fun_stream$)
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun$)) (! (= (fun_app$ (uud$ ?v0) ?v1) (fun_app$ (fun_app$a ?v0 ?v1) ?v1)) :pattern ((fun_app$ (uud$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_fun_fun$) (?v1 A_a_fun$)) (! (= (fun_app$b (uue$ ?v0) ?v1) (fun_app$b (fun_app$c ?v0 ?v1) ?v1)) :pattern ((fun_app$b (uue$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun$) (?v1 A$)) (! (= (fun_app$d (uuf$ ?v0) ?v1) (fun_app$d (fun_app$e ?v0 ?v1) ?v1)) :pattern ((fun_app$d (uuf$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (! (= (fun_app$f (uug$ ?v0) ?v1) (fun_app$f (fun_app$d ?v0 ?v1) ?v1)) :pattern ((fun_app$f (uug$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (! (= (fun_app$ (fun_app$a (uuk$ ?v0) ?v1) ?v2) (fun_app$ ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a (uuk$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$d (fun_app$g (uuo$ ?v0) ?v1) ?v2) (fun_app$ ?v0 ?v1)) :pattern ((fun_app$d (fun_app$g (uuo$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (! (= (fun_app$b (fun_app$c (uun$ ?v0) ?v1) ?v2) (fun_app$b ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c (uun$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$f (fun_app$ (uuj$ ?v0) ?v1) ?v2) (fun_app$b ?v0 ?v1)) :pattern ((fun_app$f (fun_app$ (uuj$ ?v0) ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$) (?v2 A_a_fun$)) (! (= (fun_app$ (fun_app$h (uul$ ?v0) ?v1) ?v2) (fun_app$d ?v0 ?v1)) :pattern ((fun_app$ (fun_app$h (uul$ ?v0) ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$d (fun_app$e (uup$ ?v0) ?v1) ?v2) (fun_app$d ?v0 ?v1)) :pattern ((fun_app$d (fun_app$e (uup$ ?v0) ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_a_fun$)) (! (= (fun_app$b (fun_app$i (uum$ ?v0) ?v1) ?v2) (fun_app$f ?v0 ?v1)) :pattern ((fun_app$b (fun_app$i (uum$ ?v0) ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$f (fun_app$d (uuq$ ?v0) ?v1) ?v2) (fun_app$f ?v0 ?v1)) :pattern ((fun_app$f (fun_app$d (uuq$ ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (! (= (fun_app$ (uu$ ?v0) ?v1) ?v0) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (! (= (fun_app$d (uub$ ?v0) ?v1) ?v0) :pattern ((fun_app$d (uub$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$)) (! (= (fun_app$b (uua$ ?v0) ?v1) ?v0) :pattern ((fun_app$b (uua$ ?v0) ?v1)))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$f (uuc$ ?v0) ?v1) ?v0) :pattern ((fun_app$f (uuc$ ?v0) ?v1)))) :named a15))
(assert (! (forall ((?v0 A_a_fun$)) (! (= (fun_app$ uuh$ ?v0) ?v0) :pattern ((fun_app$ uuh$ ?v0)))) :named a16))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$f uui$ ?v0) ?v0) :pattern ((fun_app$f uui$ ?v0)))) :named a17))
(assert (! (not (= (of_nat$ (suc$ na$)) (fun_app$j (siterate$ id$) (of_nat$a (suc$ na$))))) :named a18))
(assert (! (= (of_nat$ na$) (fun_app$j (siterate$ id$) (of_nat$a na$))) :named a19))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun$)) (= (= (siterate$a id$a ?v0) (siterate$a id$a ?v1)) (= ?v0 ?v1))) :named a20))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun$)) (= (= (siterate$b id$b ?v0) (siterate$b id$b ?v1)) (= ?v0 ?v1))) :named a21))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun$)) (= (= (siterate$c id$c ?v0) (siterate$c id$c ?v1)) (= ?v0 ?v1))) :named a22))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$)) (= (= (siterate$d id$d ?v0) (siterate$d id$d ?v1)) (= ?v0 ?v1))) :named a23))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (= (= (siterate$e id$e ?v0) (siterate$e id$e ?v1)) (= ?v0 ?v1))) :named a24))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (fun_app$j (siterate$ id$) ?v0) (fun_app$j (siterate$ id$) ?v1)) (= ?v0 ?v1))) :named a25))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (! (= (fun_app$k id$a ?v0) ?v0) :pattern ((fun_app$k id$a ?v0)))) :named a26))
(assert (! (forall ((?v0 A_a_fun_a_fun$)) (! (= (fun_app$l id$b ?v0) ?v0) :pattern ((fun_app$l id$b ?v0)))) :named a27))
(assert (! (forall ((?v0 A_a_a_fun_fun$)) (! (= (fun_app$m id$c ?v0) ?v0) :pattern ((fun_app$m id$c ?v0)))) :named a28))
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$n id$d ?v0) ?v0) :pattern ((fun_app$n id$d ?v0)))) :named a29))
(assert (! (forall ((?v0 A_a_fun$)) (! (= (fun_app$ id$e ?v0) ?v0) :pattern ((fun_app$ id$e ?v0)))) :named a30))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$f id$ ?v0) ?v0) :pattern ((fun_app$f id$ ?v0)))) :named a31))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a32))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a33))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_stream$)) (= (st_ap$ (siterate$a id$a (uu$ ?v0)) ?v1) (siterate$e id$e ?v0))) :named a34))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun_stream$)) (= (st_ap$a (siterate$b id$b (uua$ ?v0)) ?v1) (fun_app$j (siterate$ id$) ?v0))) :named a35))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (st_ap$b (siterate$c id$c (uub$ ?v0)) ?v1) (siterate$e id$e ?v0))) :named a36))
(assert (! (forall ((?v0 A$) (?v1 A_stream$)) (= (fun_app$n (st_ap$c (siterate$e id$e (uuc$ ?v0))) ?v1) (fun_app$j (siterate$ id$) ?v0))) :named a37))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$n (st_ap$c (siterate$e id$e ?v0)) (fun_app$j (siterate$ id$) ?v1)) (fun_app$j (siterate$ id$) (fun_app$f ?v0 ?v1)))) :named a38))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (= (st_ap$b (siterate$c id$c ?v0) (fun_app$j (siterate$ id$) ?v1)) (siterate$e id$e (fun_app$d ?v0 ?v1)))) :named a39))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$)) (= (st_ap$a (siterate$b id$b ?v0) (siterate$e id$e ?v1)) (fun_app$j (siterate$ id$) (fun_app$b ?v0 ?v1)))) :named a40))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (= (st_ap$ (siterate$a id$a ?v0) (siterate$e id$e ?v1)) (siterate$e id$e (fun_app$ ?v0 ?v1)))) :named a41))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A$)) (= (st_ap$d (siterate$f id$f ?v0) (fun_app$j (siterate$ id$) ?v1)) (siterate$d id$d (fun_app$j ?v0 ?v1)))) :named a42))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream$)) (= (st_ap$e (siterate$g id$g ?v0) (siterate$d id$d ?v1)) (fun_app$j (siterate$ id$) (fun_app$o ?v0 ?v1)))) :named a43))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream$)) (= (st_ap$f (siterate$h id$h ?v0) (siterate$d id$d ?v1)) (siterate$d id$d (fun_app$n ?v0 ?v1)))) :named a44))
(assert (! (forall ((?v0 A_a_fun_a_stream_fun$) (?v1 A_a_fun$)) (= (st_ap$g (siterate$i id$i ?v0) (siterate$e id$e ?v1)) (siterate$d id$d (fun_app$p ?v0 ?v1)))) :named a45))
(assert (! (forall ((?v0 A_stream_a_a_fun_fun$) (?v1 A_stream$)) (= (st_ap$h (siterate$j id$j ?v0) (siterate$d id$d ?v1)) (siterate$e id$e (fun_app$q ?v0 ?v1)))) :named a46))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A$)) (= (st_ap$i (siterate$k id$k ?v0) (fun_app$j (siterate$ id$) ?v1)) (siterate$b id$b (fun_app$i ?v0 ?v1)))) :named a47))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (! (= (fun_app$k id$a ?v0) ?v0) :pattern ((fun_app$k id$a ?v0)))) :named a48))
(assert (! (forall ((?v0 A_a_fun_a_fun$)) (! (= (fun_app$l id$b ?v0) ?v0) :pattern ((fun_app$l id$b ?v0)))) :named a49))
(assert (! (forall ((?v0 A_a_a_fun_fun$)) (! (= (fun_app$m id$c ?v0) ?v0) :pattern ((fun_app$m id$c ?v0)))) :named a50))
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$n id$d ?v0) ?v0) :pattern ((fun_app$n id$d ?v0)))) :named a51))
(assert (! (forall ((?v0 A_a_fun$)) (! (= (fun_app$ id$e ?v0) ?v0) :pattern ((fun_app$ id$e ?v0)))) :named a52))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$f id$ ?v0) ?v0) :pattern ((fun_app$f id$ ?v0)))) :named a53))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a54))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a55))
(assert (! (forall ((?v0 A_a_fun_stream$) (?v1 A_a_fun_stream_set$)) (=> (member$ ?v0 ?v1) (member$a (siterate$l id$l ?v0) (streams$ ?v1)))) :named a56))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_set$)) (=> (member$b ?v0 ?v1) (member$c (siterate$m id$m ?v0) (streams$a ?v1)))) :named a57))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_set$)) (=> (member$d ?v0 ?v1) (member$e (siterate$a id$a ?v0) (streams$b ?v1)))) :named a58))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_set$)) (=> (member$f ?v0 ?v1) (member$g (siterate$b id$b ?v0) (streams$c ?v1)))) :named a59))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun_set$)) (=> (member$h ?v0 ?v1) (member$i (siterate$c id$c ?v0) (streams$d ?v1)))) :named a60))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_set$)) (=> (member$j ?v0 ?v1) (member$b (siterate$d id$d ?v0) (streams$e ?v1)))) :named a61))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_set$)) (=> (member$k ?v0 ?v1) (member$ (siterate$e id$e ?v0) (streams$f ?v1)))) :named a62))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (=> (member$l ?v0 ?v1) (member$j (fun_app$j (siterate$ id$) ?v0) (streams$g ?v1)))) :named a63))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$n (smap$ ?v0) (fun_app$j (siterate$ id$) ?v1)) (fun_app$j (siterate$ id$) (fun_app$f ?v0 ?v1)))) :named a64))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (= (smap$a ?v0 (fun_app$j (siterate$ id$) ?v1)) (siterate$e id$e (fun_app$d ?v0 ?v1)))) :named a65))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$)) (= (smap$b ?v0 (siterate$e id$e ?v1)) (fun_app$j (siterate$ id$) (fun_app$b ?v0 ?v1)))) :named a66))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (= (smap$c ?v0 (siterate$e id$e ?v1)) (siterate$e id$e (fun_app$ ?v0 ?v1)))) :named a67))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A$)) (= (smap$d ?v0 (fun_app$j (siterate$ id$) ?v1)) (siterate$d id$d (fun_app$j ?v0 ?v1)))) :named a68))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream$)) (= (smap$e ?v0 (siterate$d id$d ?v1)) (fun_app$j (siterate$ id$) (fun_app$o ?v0 ?v1)))) :named a69))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream$)) (= (smap$f ?v0 (siterate$d id$d ?v1)) (siterate$d id$d (fun_app$n ?v0 ?v1)))) :named a70))
(assert (! (forall ((?v0 A_a_fun_a_stream_fun$) (?v1 A_a_fun$)) (= (smap$g ?v0 (siterate$e id$e ?v1)) (siterate$d id$d (fun_app$p ?v0 ?v1)))) :named a71))
(assert (! (forall ((?v0 A_stream_a_a_fun_fun$) (?v1 A_stream$)) (= (smap$h ?v0 (siterate$d id$d ?v1)) (siterate$e id$e (fun_app$q ?v0 ?v1)))) :named a72))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A$)) (= (smap$i ?v0 (fun_app$j (siterate$ id$) ?v1)) (siterate$b id$b (fun_app$i ?v0 ?v1)))) :named a73))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_a_fun_fun_fun$) (?v1 A_a_fun_stream$)) (= (st_ap$ (st_ap$j (siterate$n id$n ?v0) ?v1) ?v1) (st_ap$ (siterate$a id$a (uud$ ?v0)) ?v1))) :named a74))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_fun_fun$) (?v1 A_a_fun_stream$)) (= (st_ap$a (st_ap$k (siterate$o id$o ?v0) ?v1) ?v1) (st_ap$a (siterate$b id$b (uue$ ?v0)) ?v1))) :named a75))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun$) (?v1 A_stream$)) (= (st_ap$b (st_ap$l (siterate$p id$p ?v0) ?v1) ?v1) (st_ap$b (siterate$c id$c (uuf$ ?v0)) ?v1))) :named a76))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_stream$)) (= (fun_app$n (st_ap$c (st_ap$b (siterate$c id$c ?v0) ?v1)) ?v1) (fun_app$n (st_ap$c (siterate$e id$e (uug$ ?v0))) ?v1))) :named a77))
(assert (! (forall ((?v0 A_a_fun_stream$)) (= (st_ap$ (siterate$a id$a uuh$) ?v0) ?v0)) :named a78))
(assert (! (forall ((?v0 A_stream$)) (= (fun_app$n (st_ap$c (siterate$e id$e uui$)) ?v0) ?v0)) :named a79))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_stream$) (?v2 A_stream$)) (= (fun_app$n (st_ap$c (st_ap$ (siterate$a id$a (uuj$ ?v0)) ?v1)) ?v2) (st_ap$a (siterate$b id$b ?v0) ?v1))) :named a80))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_stream$) (?v2 A_a_fun_stream$)) (= (st_ap$ (st_ap$j (siterate$n id$n (uuk$ ?v0)) ?v1) ?v2) (st_ap$ (siterate$a id$a ?v0) ?v1))) :named a81))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_stream$) (?v2 A_a_fun_stream$)) (= (st_ap$ (st_ap$m (siterate$q id$q (uul$ ?v0)) ?v1) ?v2) (st_ap$b (siterate$c id$c ?v0) ?v1))) :named a82))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A_a_fun_stream$)) (= (st_ap$a (st_ap$i (siterate$k id$k (uum$ ?v0)) ?v1) ?v2) (fun_app$n (st_ap$c (siterate$e id$e ?v0)) ?v1))) :named a83))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_stream$) (?v2 A_a_fun_stream$)) (= (st_ap$a (st_ap$k (siterate$o id$o (uun$ ?v0)) ?v1) ?v2) (st_ap$a (siterate$b id$b ?v0) ?v1))) :named a84))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_stream$) (?v2 A_stream$)) (= (st_ap$b (st_ap$n (siterate$r id$r (uuo$ ?v0)) ?v1) ?v2) (st_ap$ (siterate$a id$a ?v0) ?v1))) :named a85))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (st_ap$b (st_ap$l (siterate$p id$p (uup$ ?v0)) ?v1) ?v2) (st_ap$b (siterate$c id$c ?v0) ?v1))) :named a86))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (fun_app$n (st_ap$c (st_ap$b (siterate$c id$c (uuq$ ?v0)) ?v1)) ?v2) (fun_app$n (st_ap$c (siterate$e id$e ?v0)) ?v1))) :named a87))
(assert (! (forall ((?v0 A_a_fun_stream$)) (= (smap$c uuh$ ?v0) ?v0)) :named a88))
(assert (! (forall ((?v0 A_stream$)) (= (fun_app$n (smap$ uui$) ?v0) ?v0)) :named a89))
(check-sat)
;(get-unsat-core)
