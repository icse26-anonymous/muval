; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 687
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-codatatypes () ((Nat_tree$ (node$ (root$ Nat$) (left$ Nat_tree$) (right$ Nat_tree$)))))
(declare-fun x$ () Nat_tree$)
(declare-fun y$ () Nat_tree$)
(declare-fun mod$ (Nat_tree$ Nat_tree$) Nat_tree$)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun mod$a (Nat$ Nat$) Nat$)
(declare-fun plus$ (Nat_tree$ Nat_tree$) Nat_tree$)
(declare-fun zero$ () Nat$)
(declare-fun plus$a (Nat$) Nat_nat_fun$)
(declare-fun member$ (Nat$ Nat_set$) Bool)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$a (Nat_nat_fun$ Nat$) Nat$)
(declare-fun set_tree$ (Nat_tree$) Nat_set$)
(assert (! (not (= (mod$ x$ (plus$ x$ y$)) x$)) :named a0))
(assert (! (forall ((?v0 Nat$)) (=> (member$ ?v0 (set_tree$ y$)) (fun_app$ (less$ zero$) ?v0))) :named a1))
(assert (! (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$ (less$ zero$) ?v0))) :named a2))
(assert (! (forall ((?v0 Nat$)) (= (not (fun_app$ (less$ zero$) ?v0)) (= ?v0 zero$))) :named a3))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (less$ ?v0) zero$) false) :pattern ((less$ ?v0)))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (mod$a (fun_app$a (plus$a ?v0) ?v1) ?v1) (mod$a ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (mod$a (fun_app$a (plus$a ?v0) ?v1) ?v0) (mod$a ?v1 ?v0))) :named a6))
(assert (! (forall ((?v0 Nat$)) (= (mod$a ?v0 zero$) ?v0)) :named a7))
(assert (! (forall ((?v0 Nat_tree$) (?v1 Nat_tree$) (?v2 Nat_tree$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$a (plus$a ?v0) ?v1) (fun_app$a (plus$a ?v0) ?v2)) (= ?v1 ?v2))) :named a9))
(assert (! (forall ((?v0 Nat_tree$) (?v1 Nat_tree$) (?v2 Nat_tree$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$a (plus$a ?v0) ?v1) (fun_app$a (plus$a ?v2) ?v1)) (= ?v0 ?v2))) :named a11))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a (plus$a ?v0) zero$) ?v0) :pattern ((plus$a ?v0)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a (plus$a ?v0) ?v1) zero$) (and (= ?v0 zero$) (= ?v1 zero$)))) :named a13))
(check-sat)
;(get-unsat-core)
