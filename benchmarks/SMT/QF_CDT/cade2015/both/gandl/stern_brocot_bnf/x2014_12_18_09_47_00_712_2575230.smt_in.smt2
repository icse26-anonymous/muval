; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 575
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Dir_nat_nat_prod_nat_nat_prod_prod_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ 0)
(declare-datatypes () ((Nat_nat_prod$ (pair$ (fst$ Nat$) (snd$ Nat$)))
  (Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$) (snd$a Nat_nat_prod$)))))
(declare-codatatypes () ((Nat_nat_prod_nat_nat_prod_prod_tree$ (node$ (root$ Nat_nat_prod_nat_nat_prod_prod$) (left$ Nat_nat_prod_nat_nat_prod_prod_tree$) (right$ Nat_nat_prod_nat_nat_prod_prod_tree$)))))
(declare-datatypes () ((Dir$ (l$) (r$))
  (Dir_list$ (nil$) (cons$ (hd$ Dir$) (tl$ Dir_list$)))))
(declare-fun d$ () Dir$)
(declare-fun m$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun d$a () Dir$)
(declare-fun ds$ () Dir_list$)
(declare-fun pm$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun det$ (Nat_nat_prod_nat_nat_prod_prod$) Nat$)
(declare-fun one$ () Nat$)
(declare-fun imat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun path$ () Dir_list$)
(declare-fun pref$ () Dir_list$)
(declare-fun lLmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun uRmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun append$ (Dir_list$ Dir_list$) Dir_list$)
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$)
(declare-fun fun_app$ (Dir_nat_nat_prod_nat_nat_prod_prod_fun$ Dir$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun case_dir$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$) Dir_nat_nat_prod_nat_nat_prod_prod_fun$)
(declare-fun fun_app$a (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun tree_pure$ (Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun tree_iterate$ (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun traverse_tree$ (Dir_list$ Nat_nat_prod_nat_nat_prod_prod_tree$) Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun stern_brocot_iterate_aux$ (Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod_tree$)
(assert (! (not (= (root$ (traverse_tree$ ds$ (stern_brocot_iterate_aux$ (fun_app$ (case_dir$ (fun_app$a (mulmat$ m$) lLmat$) (fun_app$a (mulmat$ m$) uRmat$)) d$)))) pm$)) :named a0))
(assert (! (not (= d$ d$a)) :named a1))
(assert (! (= path$ (append$ pref$ (cons$ d$ ds$))) :named a2))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$a (mulmat$ (fun_app$a (mulmat$ ?v0) ?v1)) ?v2) (fun_app$a (mulmat$ ?v0) (fun_app$a (mulmat$ ?v1) ?v2)))) :named a3))
(assert (! (= m$ (root$ (traverse_tree$ pref$ (stern_brocot_iterate_aux$ imat$)))) :named a4))
(assert (! (= pm$ (root$ (traverse_tree$ path$ (stern_brocot_iterate_aux$ imat$)))) :named a5))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$) (?v2 Nat_nat_prod_nat_nat_prod_prod_tree$)) (= (traverse_tree$ (append$ ?v0 ?v1) ?v2) (traverse_tree$ ?v1 (traverse_tree$ ?v0 ?v2)))) :named a6))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$a (mulmat$ ?v0) imat$) ?v0)) :named a7))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$a (mulmat$ imat$) ?v0) ?v0)) :named a8))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$)) (! (= (fun_app$ (case_dir$ ?v0 ?v1) l$) ?v0) :pattern ((case_dir$ ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$)) (! (= (fun_app$ (case_dir$ ?v0 ?v1) r$) ?v1) :pattern ((case_dir$ ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Dir_list$)) (exists ((?v2 Nat_nat_prod_nat_nat_prod_prod$)) (and (= (fun_app$a (mulmat$ ?v0) ?v2) (root$ (traverse_tree$ ?v1 (stern_brocot_iterate_aux$ ?v0)))) (= (det$ ?v2) one$)))) :named a11))
(assert (! (= (det$ pm$) one$) :named a12))
(assert (! (= (det$ m$) one$) :named a13))
(assert (! (forall ((?v0 Dir_list$) (?v1 Nat_nat_prod_nat_nat_prod_prod$)) (= (traverse_tree$ ?v0 (tree_pure$ ?v1)) (tree_pure$ ?v1))) :named a14))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (root$ (tree_iterate$ ?v0 ?v1 ?v2)) ?v2)) :named a15))
(check-sat)
;(get-unsat-core)
