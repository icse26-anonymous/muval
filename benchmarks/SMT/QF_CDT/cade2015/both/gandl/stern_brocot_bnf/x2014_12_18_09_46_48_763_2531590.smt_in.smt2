; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 466
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-datatypes () ((Nat_nat_prod$ (pair$ (fst$ Nat$) (snd$ Nat$)))
  (Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$) (snd$a Nat_nat_prod$)))
  (Dir$ (l$) (r$))
  (Dir_list$ (nil$) (cons$ (hd$ Dir$) (tl$ Dir_list$)))))
(declare-codatatypes () ((Nat_nat_prod_tree$ (node$ (root$ Nat_nat_prod$) (left$ Nat_nat_prod_tree$) (right$ Nat_nat_prod_tree$)))))
(declare-fun imat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun path$ () Dir_list$)
(declare-fun path$a () Dir_list$)
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun prefix$ (Dir_list$ Dir_list$) Bool)
(declare-fun traverse_tree$ (Dir_list$ Nat_nat_prod_tree$) Nat_nat_prod_tree$)
(declare-fun stern_brocot_iterate$ () Nat_nat_prod_tree$)
(assert (! (not false) :named a0))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ (mulmat$ ?v0 ?v1) ?v2) (mulmat$ ?v0 (mulmat$ ?v1 ?v2)))) :named a1))
(assert (! (prefix$ path$ path$a) :named a2))
(assert (! (= (root$ (traverse_tree$ path$ stern_brocot_iterate$)) (root$ (traverse_tree$ path$a stern_brocot_iterate$))) :named a3))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ ?v0 imat$) ?v0)) :named a4))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (mulmat$ imat$ ?v0) ?v0)) :named a5))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$) (?v2 Dir_list$)) (=> (and (= ?v0 ?v1) (prefix$ ?v1 ?v2)) (prefix$ ?v0 ?v2))) :named a6))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (=> (and (prefix$ ?v0 ?v1) (=> (not false) (prefix$ ?v1 ?v0))) false)) :named a7))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$) (?v2 Dir_list$)) (=> (and (prefix$ ?v0 ?v1) (= ?v1 ?v2)) (prefix$ ?v0 ?v2))) :named a8))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$) (?v2 Dir_list$)) (=> (and (prefix$ ?v0 ?v1) (prefix$ ?v2 ?v0)) (prefix$ ?v2 ?v1))) :named a9))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$) (?v2 Dir_list$)) (=> (and (prefix$ ?v0 ?v1) (prefix$ ?v1 ?v2)) (prefix$ ?v0 ?v2))) :named a10))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$) (?v2 Dir_list$)) (=> (and (prefix$ ?v0 ?v1) (prefix$ ?v1 ?v2)) (prefix$ ?v0 ?v2))) :named a11))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (=> (and (prefix$ ?v0 ?v1) (prefix$ ?v1 ?v0)) false)) :named a12))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (=> (and (prefix$ ?v0 ?v1) (prefix$ ?v1 ?v0)) false)) :named a13))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (=> (and (prefix$ ?v0 ?v1) (prefix$ ?v1 ?v0)) false)) :named a14))
(assert (! (forall ((?v0 Dir_list$)) (not (prefix$ ?v0 ?v0))) :named a15))
(assert (! (forall ((?v0 Dir_list$)) (not (prefix$ ?v0 ?v0))) :named a16))
(assert (! (forall ((?v0 Dir_list$) (?v1 Dir_list$)) (=> (prefix$ ?v0 ?v1) (not (prefix$ ?v1 ?v0)))) :named a17))
(check-sat)
;(get-unsat-core)
