; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 462
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_a_b_fun_fun$ 0)
(declare-sort A_a_fun_a_fun$ 0)
(declare-sort A_b_a_fun_fun$ 0)
(declare-sort A_b_b_fun_fun$ 0)
(declare-sort A_b_fun_a_fun$ 0)
(declare-sort A_b_fun_b_fun$ 0)
(declare-sort B_a_a_fun_fun$ 0)
(declare-sort B_a_b_fun_fun$ 0)
(declare-sort B_a_fun_a_fun$ 0)
(declare-sort B_b_a_fun_fun$ 0)
(declare-sort B_b_b_fun_fun$ 0)
(declare-sort B_b_fun_b_fun$ 0)
(declare-sort A_a_fun_a_b_fun_fun$ 0)
(declare-sort A_b_a_b_fun_fun_fun$ 0)
(declare-sort A_b_fun_a_a_fun_fun$ 0)
(declare-sort A_b_fun_a_b_fun_fun$ 0)
(declare-sort B_a_fun_b_a_fun_fun$ 0)
(declare-sort B_a_fun_b_b_fun_fun$ 0)
(declare-sort B_b_a_b_fun_fun_fun$ 0)
(declare-sort B_b_fun_b_a_fun_fun$ 0)
(declare-sort B_b_fun_b_b_fun_fun$ 0)
(declare-sort A_a_b_fun_fun_a_b_fun_fun$ 0)
(declare-sort A_b_a_fun_fun_b_a_fun_fun$ 0)
(declare-sort A_b_b_fun_fun_b_b_fun_fun$ 0)
(declare-sort A_b_fun_a_a_b_fun_fun_fun$ 0)
(declare-sort A_b_fun_b_a_b_fun_fun_fun$ 0)
(declare-sort B_a_b_fun_a_b_fun_fun_fun$ 0)
(declare-sort B_a_b_fun_fun_a_b_fun_fun$ 0)
(declare-sort B_a_fun_a_b_a_fun_fun_fun$ 0)
(declare-sort B_b_fun_a_b_b_fun_fun_fun$ 0)
(declare-sort B_b_fun_b_a_b_fun_fun_fun$ 0)
(declare-sort B_a_b_fun_fun_b_a_b_fun_fun_fun$ 0)
(declare-sort A_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun$ 0)
(declare-sort A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_b_b_fun_fun_a_b_fun_a_b_fun_fun_fun$ 0)
(declare-sort B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$ 0)
(declare-sort B_a_b_fun_fun_b_b_a_b_fun_fun_fun_fun$ 0)
(declare-sort B_b_a_b_fun_fun_fun_b_a_b_fun_fun_fun$ 0)
(declare-sort B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ 0)
(declare-sort B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$ 0)
(declare-sort A_b_a_b_fun_fun_fun_a_b_fun_a_a_b_fun_fun_fun_fun$ 0)
(declare-sort A_b_fun_a_b_fun_fun_b_a_b_fun_a_b_fun_fun_fun_fun$ 0)
(declare-sort B_a_b_fun_a_b_fun_fun_fun_a_b_fun_a_b_fun_fun_fun$ 0)
(declare-sort B_b_a_b_fun_fun_fun_b_b_fun_b_a_b_fun_fun_fun_fun$ 0)
(declare-sort B_a_b_fun_a_b_fun_fun_fun_b_a_b_fun_fun_b_a_b_fun_fun_fun_fun$ 0)
(declare-codatatypes () ((A_b_fun_tree$ (node$ (select$ A_b_fun$) (selecta$ A_b_fun_tree$) (selectb$ A_b_fun_tree$)))
  (B_a_b_fun_fun_tree$ (node$a (selectc$ B_a_b_fun_fun$) (selectd$ B_a_b_fun_fun_tree$) (selecte$ B_a_b_fun_fun_tree$)))
  (B_tree$ (node$b (root$ B$) (left$ B_tree$) (right$ B_tree$)))
  (B_a_b_fun_fun_a_b_fun_fun_tree$ (node$c (selectf$ B_a_b_fun_fun_a_b_fun_fun$) (selectg$ B_a_b_fun_fun_a_b_fun_fun_tree$) (selecth$ B_a_b_fun_fun_a_b_fun_fun_tree$)))
  (B_b_fun_tree$ (node$d (selecti$ B_b_fun$) (selectj$ B_b_fun_tree$) (selectk$ B_b_fun_tree$)))
  (B_b_fun_b_fun_tree$ (node$e (selectl$ B_b_fun_b_fun$) (selectm$ B_b_fun_b_fun_tree$) (selectn$ B_b_fun_b_fun_tree$)))
  (B_a_fun_tree$ (node$f (selecto$ B_a_fun$) (selectp$ B_a_fun_tree$) (selectq$ B_a_fun_tree$)))
  (A_tree$ (node$g (root$a A$) (left$a A_tree$) (right$a A_tree$)))
  (B_a_fun_a_fun_tree$ (node$h (selectr$ B_a_fun_a_fun$) (selects$ B_a_fun_a_fun_tree$) (selectt$ B_a_fun_a_fun_tree$)))
  (A_b_fun_b_fun_tree$ (node$i (selectu$ A_b_fun_b_fun$) (selectv$ A_b_fun_b_fun_tree$) (selectw$ A_b_fun_b_fun_tree$)))
  (B_b_a_b_fun_fun_fun_tree$ (node$j (selectx$ B_b_a_b_fun_fun_fun$) (selecty$ B_b_a_b_fun_fun_fun_tree$) (selectz$ B_b_a_b_fun_fun_fun_tree$)))
  (B_b_a_b_fun_fun_fun_b_a_b_fun_fun_fun_tree$ (node$k (selecua$ B_b_a_b_fun_fun_fun_b_a_b_fun_fun_fun$) (selecub$ B_b_a_b_fun_fun_fun_b_a_b_fun_fun_fun_tree$) (selecuc$ B_b_a_b_fun_fun_fun_b_a_b_fun_fun_fun_tree$)))
  (B_a_b_fun_a_b_fun_fun_fun_tree$ (node$l (selecud$ B_a_b_fun_a_b_fun_fun_fun$) (selecue$ B_a_b_fun_a_b_fun_fun_fun_tree$) (selecuf$ B_a_b_fun_a_b_fun_fun_fun_tree$)))
  (A_b_fun_a_b_fun_fun_tree$ (node$m (selecug$ A_b_fun_a_b_fun_fun$) (selecuh$ A_b_fun_a_b_fun_fun_tree$) (selecui$ A_b_fun_a_b_fun_fun_tree$)))
  (B_a_b_fun_a_b_fun_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$ (node$n (selecuj$ B_a_b_fun_a_b_fun_fun_fun_a_b_fun_a_b_fun_fun_fun$) (selecuk$ B_a_b_fun_a_b_fun_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$) (selecul$ B_a_b_fun_a_b_fun_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$)))
  (A_a_fun_tree$ (node$o (selecum$ A_a_fun$) (selecun$ A_a_fun_tree$) (selecuo$ A_a_fun_tree$)))
  (A_a_fun_a_fun_tree$ (node$p (selecup$ A_a_fun_a_fun$) (selecuq$ A_a_fun_a_fun_tree$) (selecur$ A_a_fun_a_fun_tree$)))
  (A_b_b_fun_fun_tree$ (node$q (selecus$ A_b_b_fun_fun$) (selecut$ A_b_b_fun_fun_tree$) (selecuu$ A_b_b_fun_fun_tree$)))
  (A_b_b_fun_fun_b_b_fun_fun_tree$ (node$r (selecuv$ A_b_b_fun_fun_b_b_fun_fun$) (selecuw$ A_b_b_fun_fun_b_b_fun_fun_tree$) (selecux$ A_b_b_fun_fun_b_b_fun_fun_tree$)))
  (A_b_a_fun_fun_tree$ (node$s (selecuy$ A_b_a_fun_fun$) (selecuz$ A_b_a_fun_fun_tree$) (selecva$ A_b_a_fun_fun_tree$)))
  (A_b_a_fun_fun_b_a_fun_fun_tree$ (node$t (selecvb$ A_b_a_fun_fun_b_a_fun_fun$) (selecvc$ A_b_a_fun_fun_b_a_fun_fun_tree$) (selecvd$ A_b_a_fun_fun_b_a_fun_fun_tree$)))
  (A_a_b_fun_fun_tree$ (node$u (selecve$ A_a_b_fun_fun$) (selecvf$ A_a_b_fun_fun_tree$) (selecvg$ A_a_b_fun_fun_tree$)))
  (A_a_b_fun_fun_a_b_fun_fun_tree$ (node$v (selecvh$ A_a_b_fun_fun_a_b_fun_fun$) (selecvi$ A_a_b_fun_fun_a_b_fun_fun_tree$) (selecvj$ A_a_b_fun_fun_a_b_fun_fun_tree$)))
  (A_b_fun_a_fun_tree$ (node$w (selecvk$ A_b_fun_a_fun$) (selecvl$ A_b_fun_a_fun_tree$) (selecvm$ A_b_fun_a_fun_tree$)))
  (B_b_b_fun_fun_tree$ (node$x (selecvn$ B_b_b_fun_fun$) (selecvo$ B_b_b_fun_fun_tree$) (selecvp$ B_b_b_fun_fun_tree$)))
  (B_b_fun_a_b_b_fun_fun_fun_tree$ (node$y (selecvq$ B_b_fun_a_b_b_fun_fun_fun$) (selecvr$ B_b_fun_a_b_b_fun_fun_fun_tree$) (selecvs$ B_b_fun_a_b_b_fun_fun_fun_tree$)))
  (B_a_fun_a_b_a_fun_fun_fun_tree$ (node$z (selecvt$ B_a_fun_a_b_a_fun_fun_fun$) (selecvu$ B_a_fun_a_b_a_fun_fun_fun_tree$) (selecvv$ B_a_fun_a_b_a_fun_fun_fun_tree$)))
  (A_b_fun_a_a_b_fun_fun_fun_tree$ (node$aa (selecvw$ A_b_fun_a_a_b_fun_fun_fun$) (selecvx$ A_b_fun_a_a_b_fun_fun_fun_tree$) (selecvy$ A_b_fun_a_a_b_fun_fun_fun_tree$)))
  (A_a_a_fun_fun_tree$ (node$ab (selecvz$ A_a_a_fun_fun$) (selecwa$ A_a_a_fun_fun_tree$) (selecwb$ A_a_a_fun_fun_tree$)))
  (A_b_fun_a_b_fun_fun_b_a_b_fun_a_b_fun_fun_fun_fun_tree$ (node$ac (selecwc$ A_b_fun_a_b_fun_fun_b_a_b_fun_a_b_fun_fun_fun_fun$) (selecwd$ A_b_fun_a_b_fun_fun_b_a_b_fun_a_b_fun_fun_fun_fun_tree$) (selecwe$ A_b_fun_a_b_fun_fun_b_a_b_fun_a_b_fun_fun_fun_fun_tree$)))
  (B_a_b_fun_fun_b_b_a_b_fun_fun_fun_fun_tree$ (node$ad (selecwf$ B_a_b_fun_fun_b_b_a_b_fun_fun_fun_fun$) (selecwg$ B_a_b_fun_fun_b_b_a_b_fun_fun_fun_fun_tree$) (selecwh$ B_a_b_fun_fun_b_b_a_b_fun_fun_fun_fun_tree$)))
  (A_b_fun_b_a_b_fun_fun_fun_tree$ (node$ae (selecwi$ A_b_fun_b_a_b_fun_fun_fun$) (selecwj$ A_b_fun_b_a_b_fun_fun_fun_tree$) (selecwk$ A_b_fun_b_a_b_fun_fun_fun_tree$)))
  (B_a_fun_b_b_fun_fun_tree$ (node$af (selecwl$ B_a_fun_b_b_fun_fun$) (selecwm$ B_a_fun_b_b_fun_fun_tree$) (selecwn$ B_a_fun_b_b_fun_fun_tree$)))
  (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ (node$ag (selecwo$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$) (selecwp$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$) (selecwq$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)))
  (B_b_fun_b_a_b_fun_fun_fun_tree$ (node$ah (selecwr$ B_b_fun_b_a_b_fun_fun_fun$) (selecws$ B_b_fun_b_a_b_fun_fun_fun_tree$) (selecwt$ B_b_fun_b_a_b_fun_fun_fun_tree$)))
  (B_b_a_b_fun_fun_fun_b_b_fun_b_a_b_fun_fun_fun_fun_tree$ (node$ai (selecwu$ B_b_a_b_fun_fun_fun_b_b_fun_b_a_b_fun_fun_fun_fun$) (selecwv$ B_b_a_b_fun_fun_fun_b_b_fun_b_a_b_fun_fun_fun_fun_tree$) (selecww$ B_b_a_b_fun_fun_fun_b_b_fun_b_a_b_fun_fun_fun_fun_tree$)))
  (B_a_b_fun_fun_b_a_b_fun_fun_fun_tree$ (node$aj (selecwx$ B_a_b_fun_fun_b_a_b_fun_fun_fun$) (selecwy$ B_a_b_fun_fun_b_a_b_fun_fun_fun_tree$) (selecwz$ B_a_b_fun_fun_b_a_b_fun_fun_fun_tree$)))
  (B_a_b_fun_a_b_fun_fun_fun_b_a_b_fun_fun_b_a_b_fun_fun_fun_fun_tree$ (node$ak (selecxa$ B_a_b_fun_a_b_fun_fun_fun_b_a_b_fun_fun_b_a_b_fun_fun_fun_fun$) (selecxb$ B_a_b_fun_a_b_fun_fun_fun_b_a_b_fun_fun_b_a_b_fun_fun_fun_fun_tree$) (selecxc$ B_a_b_fun_a_b_fun_fun_fun_b_a_b_fun_fun_b_a_b_fun_fun_fun_fun_tree$)))
  (A_b_fun_a_a_fun_fun_tree$ (node$al (selecxd$ A_b_fun_a_a_fun_fun$) (selecxe$ A_b_fun_a_a_fun_fun_tree$) (selecxf$ A_b_fun_a_a_fun_fun_tree$)))
  (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ (node$am (selecxg$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$) (selecxh$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$) (selecxi$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)))
  (B_b_fun_b_b_fun_fun_tree$ (node$an (selecxj$ B_b_fun_b_b_fun_fun$) (selecxk$ B_b_fun_b_b_fun_fun_tree$) (selecxl$ B_b_fun_b_b_fun_fun_tree$)))
  (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ (node$ao (selecxm$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$) (selecxn$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$) (selecxo$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)))
  (B_a_a_fun_fun_tree$ (node$ap (selecxp$ B_a_a_fun_fun$) (selecxq$ B_a_a_fun_fun_tree$) (selecxr$ B_a_a_fun_fun_tree$)))
  (B_a_fun_b_a_fun_fun_tree$ (node$aq (selecxs$ B_a_fun_b_a_fun_fun$) (selecxt$ B_a_fun_b_a_fun_fun_tree$) (selecxu$ B_a_fun_b_a_fun_fun_tree$)))
  (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ (node$ar (selecxv$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$) (selecxw$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$) (selecxx$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)))
  (B_b_a_fun_fun_tree$ (node$as (selecxy$ B_b_a_fun_fun$) (selecxz$ B_b_a_fun_fun_tree$) (selecya$ B_b_a_fun_fun_tree$)))
  (B_b_fun_b_a_fun_fun_tree$ (node$at (selecyb$ B_b_fun_b_a_fun_fun$) (selecyc$ B_b_fun_b_a_fun_fun_tree$) (selecyd$ B_b_fun_b_a_fun_fun_tree$)))
  (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ (node$au (selecye$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$) (selecyf$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$) (selecyg$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)))
  (A_b_b_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$ (node$av (selecyh$ A_b_b_fun_fun_a_b_fun_a_b_fun_fun_fun$) (selecyi$ A_b_b_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$) (selecyj$ A_b_b_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$)))
  (A_a_fun_a_b_fun_fun_tree$ (node$aw (selecyk$ A_a_fun_a_b_fun_fun$) (selecyl$ A_a_fun_a_b_fun_fun_tree$) (selecym$ A_a_fun_a_b_fun_fun_tree$)))
  (A_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_tree$ (node$ax (selecyn$ A_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun$) (selecyo$ A_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_tree$) (selecyp$ A_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_tree$)))
  (A_b_a_b_fun_fun_fun_tree$ (node$ay (selecyq$ A_b_a_b_fun_fun_fun$) (selecyr$ A_b_a_b_fun_fun_fun_tree$) (selecys$ A_b_a_b_fun_fun_fun_tree$)))
  (A_b_a_b_fun_fun_fun_a_b_fun_a_a_b_fun_fun_fun_fun_tree$ (node$az (selecyt$ A_b_a_b_fun_fun_fun_a_b_fun_a_a_b_fun_fun_fun_fun$) (selecyu$ A_b_a_b_fun_fun_fun_a_b_fun_a_a_b_fun_fun_fun_fun_tree$) (selecyv$ A_b_a_b_fun_fun_fun_a_b_fun_a_a_b_fun_fun_fun_fun_tree$)))))
(declare-fun c$ () B$)
(declare-fun id$ () A_b_fun_a_b_fun_fun$)
(declare-fun uu$ () A_b_fun$)
(declare-fun id$a () B_b_fun$)
(declare-fun uua$ (B$) B_a_b_fun_fun_a_b_fun_fun$)
(declare-fun uub$ (B$) B_b_fun_b_fun$)
(declare-fun uuc$ (B$) B_a_fun_a_fun$)
(declare-fun uud$ (A$) A_b_fun_b_fun$)
(declare-fun uue$ (B$) B_b_a_b_fun_fun_fun_b_a_b_fun_fun_fun$)
(declare-fun uuf$ (B$) B_a_b_fun_a_b_fun_fun_fun_a_b_fun_a_b_fun_fun_fun$)
(declare-fun uug$ (A$) A_a_fun_a_fun$)
(declare-fun uuh$ (A$) A_b_b_fun_fun_b_b_fun_fun$)
(declare-fun uui$ (A$) A_b_a_fun_fun_b_a_fun_fun$)
(declare-fun uuj$ (A$) A_a_b_fun_fun_a_b_fun_fun$)
(declare-fun uuk$ () A_b_fun_b_a_b_fun_fun_fun$)
(declare-fun uul$ () B_a_b_fun_fun$)
(declare-fun uum$ () B_b_a_b_fun_fun_fun_b_b_fun_b_a_b_fun_fun_fun_fun$)
(declare-fun uun$ () B_a_b_fun_a_b_fun_fun_fun_b_a_b_fun_fun_b_a_b_fun_fun_fun_fun$)
(declare-fun uuo$ () B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$)
(declare-fun left$b (A_b_fun_a_b_fun_fun_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun left$c (A_b_fun_b_fun_tree$) A_b_fun_b_fun_tree$)
(declare-fun left$d (B_a_b_fun_fun_tree$) B_a_b_fun_fun_tree$)
(declare-fun left$e (B_b_fun_tree$) B_b_fun_tree$)
(declare-fun left$f (A_b_fun_tree$) A_b_fun_tree$)
(declare-fun root$b (A_b_fun_a_b_fun_fun_tree$) A_b_fun_a_b_fun_fun$)
(declare-fun root$c (A_b_fun_b_fun_tree$) A_b_fun_b_fun$)
(declare-fun root$d (B_a_b_fun_fun_tree$) B_a_b_fun_fun$)
(declare-fun root$e (B_b_fun_tree$) B_b_fun$)
(declare-fun root$f (A_b_fun_tree$) A_b_fun$)
(declare-fun right$b (A_b_fun_a_b_fun_fun_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun right$c (A_b_fun_b_fun_tree$) A_b_fun_b_fun_tree$)
(declare-fun right$d (B_a_b_fun_fun_tree$) B_a_b_fun_fun_tree$)
(declare-fun right$e (B_b_fun_tree$) B_b_fun_tree$)
(declare-fun right$f (A_b_fun_tree$) A_b_fun_tree$)
(declare-fun tree_I$ () A_b_fun_a_b_fun_fun_tree$)
(declare-fun tree_K$ () B_a_b_fun_fun_tree$)
(declare-fun tree_S$ () B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun fun_app$ (B_a_b_fun_a_b_fun_fun_fun_a_b_fun_a_b_fun_fun_fun$ B_a_b_fun_a_b_fun_fun_fun$) A_b_fun_a_b_fun_fun$)
(declare-fun tree_I$a () B_b_fun_tree$)
(declare-fun tree_K$a () B_b_fun_a_b_b_fun_fun_fun_tree$)
(declare-fun tree_K$b () B_a_fun_a_b_a_fun_fun_fun_tree$)
(declare-fun tree_K$c () A_b_fun_a_a_b_fun_fun_fun_tree$)
(declare-fun tree_K$d () A_a_a_fun_fun_tree$)
(declare-fun tree_K$e () A_b_fun_a_b_fun_fun_b_a_b_fun_a_b_fun_fun_fun_fun_tree$)
(declare-fun tree_K$f () B_a_b_fun_fun_b_b_a_b_fun_fun_fun_fun_tree$)
(declare-fun tree_K$g () B_b_b_fun_fun_tree$)
(declare-fun tree_K$h () A_b_a_fun_fun_tree$)
(declare-fun tree_K$i () A_b_fun_b_a_b_fun_fun_fun_tree$)
(declare-fun tree_S$a () B_b_a_b_fun_fun_fun_b_b_fun_b_a_b_fun_fun_fun_fun_tree$)
(declare-fun tree_S$b () B_a_b_fun_a_b_fun_fun_fun_b_a_b_fun_fun_b_a_b_fun_fun_fun_fun_tree$)
(declare-fun tree_S$c () A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun tree_S$d () B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun tree_S$e () B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_S$f () B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$)
(declare-fun tree_S$g () A_b_b_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$)
(declare-fun tree_S$h () A_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_tree$)
(declare-fun tree_S$i () A_b_a_b_fun_fun_fun_a_b_fun_a_a_b_fun_fun_fun_fun_tree$)
(declare-fun tree_ap$ (B_a_b_fun_fun_tree$ B_tree$) A_b_fun_tree$)
(declare-fun fun_app$a (B_a_b_fun_a_b_fun_fun_fun$ B$) A_b_fun_a_b_fun_fun$)
(declare-fun fun_app$b (B_b_a_b_fun_fun_fun_b_a_b_fun_fun_fun$ B_b_a_b_fun_fun_fun$) B_a_b_fun_fun$)
(declare-fun fun_app$c (B_b_a_b_fun_fun_fun$ B$) B_a_b_fun_fun$)
(declare-fun fun_app$d (B_a_b_fun_fun_a_b_fun_fun$ B_a_b_fun_fun$) A_b_fun$)
(declare-fun fun_app$e (B_a_b_fun_fun$ B$) A_b_fun$)
(declare-fun fun_app$f (B_b_fun_b_fun$ B_b_fun$) B$)
(declare-fun fun_app$g (B_b_fun$ B$) B$)
(declare-fun fun_app$h (B_a_fun_a_fun$ B_a_fun$) A$)
(declare-fun fun_app$i (B_a_fun$ B$) A$)
(declare-fun fun_app$j (A_b_b_fun_fun_b_b_fun_fun$ A_b_b_fun_fun$) B_b_fun$)
(declare-fun fun_app$k (A_b_b_fun_fun$ A$) B_b_fun$)
(declare-fun fun_app$l (A_b_a_fun_fun_b_a_fun_fun$ A_b_a_fun_fun$) B_a_fun$)
(declare-fun fun_app$m (A_b_a_fun_fun$ A$) B_a_fun$)
(declare-fun fun_app$n (A_a_b_fun_fun_a_b_fun_fun$ A_a_b_fun_fun$) A_b_fun$)
(declare-fun fun_app$o (A_a_b_fun_fun$ A$) A_b_fun$)
(declare-fun fun_app$p (A_b_fun_b_fun$ A_b_fun$) B$)
(declare-fun fun_app$q (A_b_fun$ A$) B$)
(declare-fun fun_app$r (A_a_fun_a_fun$ A_a_fun$) A$)
(declare-fun fun_app$s (A_a_fun$ A$) A$)
(declare-fun fun_app$t (B_a_b_fun_fun_b_a_b_fun_fun_fun$ B_a_b_fun_fun$) B_a_b_fun_fun$)
(declare-fun fun_app$u (B_a_b_fun_a_b_fun_fun_fun_b_a_b_fun_fun_b_a_b_fun_fun_fun_fun$ B_a_b_fun_a_b_fun_fun_fun$) B_a_b_fun_fun_b_a_b_fun_fun_fun$)
(declare-fun fun_app$v (A_b_fun_a_b_fun_fun$ A_b_fun$) A_b_fun$)
(declare-fun fun_app$w (B_b_fun_b_a_b_fun_fun_fun$ B_b_fun$) B_a_b_fun_fun$)
(declare-fun fun_app$x (B_b_a_b_fun_fun_fun_b_b_fun_b_a_b_fun_fun_fun_fun$ B_b_a_b_fun_fun_fun$) B_b_fun_b_a_b_fun_fun_fun$)
(declare-fun fun_app$y (B_a_fun_b_b_fun_fun$ B_a_fun$) B_b_fun$)
(declare-fun fun_app$z (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$ B_a_b_fun_fun$) B_a_fun_b_b_fun_fun$)
(declare-fun map_tree$ (B_a_b_fun_a_b_fun_fun_fun$ B_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun tree_ap$a (B_a_b_fun_fun_a_b_fun_fun_tree$ B_a_b_fun_fun_tree$) A_b_fun_tree$)
(declare-fun tree_ap$b (B_b_fun_tree$ B_tree$) B_tree$)
(declare-fun tree_ap$c (B_b_fun_b_fun_tree$ B_b_fun_tree$) B_tree$)
(declare-fun tree_ap$d (B_a_fun_tree$ B_tree$) A_tree$)
(declare-fun tree_ap$e (B_a_fun_a_fun_tree$ B_a_fun_tree$) A_tree$)
(declare-fun tree_ap$f (A_b_fun_tree$ A_tree$) B_tree$)
(declare-fun tree_ap$g (A_b_fun_b_fun_tree$ A_b_fun_tree$) B_tree$)
(declare-fun tree_ap$h (B_b_a_b_fun_fun_fun_tree$ B_tree$) B_a_b_fun_fun_tree$)
(declare-fun tree_ap$i (B_b_a_b_fun_fun_fun_b_a_b_fun_fun_fun_tree$ B_b_a_b_fun_fun_fun_tree$) B_a_b_fun_fun_tree$)
(declare-fun tree_ap$j (B_a_b_fun_a_b_fun_fun_fun_tree$ B_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun tree_ap$k (B_a_b_fun_a_b_fun_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$ B_a_b_fun_a_b_fun_fun_fun_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun tree_ap$l (A_a_fun_tree$ A_tree$) A_tree$)
(declare-fun tree_ap$m (A_a_fun_a_fun_tree$ A_a_fun_tree$) A_tree$)
(declare-fun tree_ap$n (A_b_b_fun_fun_tree$ A_tree$) B_b_fun_tree$)
(declare-fun tree_ap$o (A_b_b_fun_fun_b_b_fun_fun_tree$ A_b_b_fun_fun_tree$) B_b_fun_tree$)
(declare-fun tree_ap$p (A_b_a_fun_fun_tree$ A_tree$) B_a_fun_tree$)
(declare-fun tree_ap$q (A_b_a_fun_fun_b_a_fun_fun_tree$ A_b_a_fun_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$r (A_a_b_fun_fun_tree$ A_tree$) A_b_fun_tree$)
(declare-fun tree_ap$s (A_a_b_fun_fun_a_b_fun_fun_tree$ A_a_b_fun_fun_tree$) A_b_fun_tree$)
(declare-fun tree_ap$t (A_b_fun_a_b_fun_fun_tree$ A_b_fun_tree$) A_b_fun_tree$)
(declare-fun tree_ap$u (A_b_fun_a_fun_tree$ A_b_fun_tree$) A_tree$)
(declare-fun tree_ap$v (B_b_b_fun_fun_tree$ B_tree$) B_b_fun_tree$)
(declare-fun tree_ap$w (B_b_fun_a_b_b_fun_fun_fun_tree$ B_b_fun_tree$) A_b_b_fun_fun_tree$)
(declare-fun tree_ap$x (B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_tree$) A_b_a_fun_fun_tree$)
(declare-fun tree_ap$y (A_b_fun_a_a_b_fun_fun_fun_tree$ A_b_fun_tree$) A_a_b_fun_fun_tree$)
(declare-fun tree_ap$z (A_a_a_fun_fun_tree$ A_tree$) A_a_fun_tree$)
(declare-fun fun_app$aa (A_b_fun_b_a_b_fun_fun_fun$ A_b_fun$) B_a_b_fun_fun$)
(declare-fun fun_app$ab (A_b_fun_a_fun$ A_b_fun$) A$)
(declare-fun fun_app$ac (B_b_b_fun_fun$ B$) B_b_fun$)
(declare-fun map_tree$a (B_b_a_b_fun_fun_fun$ B_tree$) B_a_b_fun_fun_tree$)
(declare-fun map_tree$b (B_a_fun$ B_tree$) A_tree$)
(declare-fun map_tree$c (B_b_fun$ B_tree$) B_tree$)
(declare-fun map_tree$d (A_b_fun_b_fun$ A_b_fun_tree$) B_tree$)
(declare-fun map_tree$e (A_b_fun_a_b_fun_fun$ A_b_fun_tree$) A_b_fun_tree$)
(declare-fun map_tree$f (B_a_b_fun_fun$ B_tree$) A_b_fun_tree$)
(declare-fun map_tree$g (A_b_fun$ A_tree$) B_tree$)
(declare-fun map_tree$h (A_a_fun$ A_tree$) A_tree$)
(declare-fun map_tree$i (A_b_fun_a_fun$ A_b_fun_tree$) A_tree$)
(declare-fun map_tree$j (B_b_b_fun_fun$ B_tree$) B_b_fun_tree$)
(declare-fun map_tree$k (B_b_fun_b_fun$ B_b_fun_tree$) B_tree$)
(declare-fun tree_ap$aa (A_b_fun_a_b_fun_fun_b_a_b_fun_a_b_fun_fun_fun_fun_tree$ A_b_fun_a_b_fun_fun_tree$) B_a_b_fun_a_b_fun_fun_fun_tree$)
(declare-fun tree_ap$ab (B_a_b_fun_fun_b_b_a_b_fun_fun_fun_fun_tree$ B_a_b_fun_fun_tree$) B_b_a_b_fun_fun_fun_tree$)
(declare-fun tree_ap$ac (A_b_fun_b_a_b_fun_fun_fun_tree$ A_b_fun_tree$) B_a_b_fun_fun_tree$)
(declare-fun tree_ap$ad (B_a_fun_b_b_fun_fun_tree$ B_a_fun_tree$) B_b_fun_tree$)
(declare-fun tree_ap$ae (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ B_a_b_fun_fun_tree$) B_a_fun_b_b_fun_fun_tree$)
(declare-fun tree_ap$af (B_b_fun_b_a_b_fun_fun_fun_tree$ B_b_fun_tree$) B_a_b_fun_fun_tree$)
(declare-fun tree_ap$ag (B_b_a_b_fun_fun_fun_b_b_fun_b_a_b_fun_fun_fun_fun_tree$ B_b_a_b_fun_fun_fun_tree$) B_b_fun_b_a_b_fun_fun_fun_tree$)
(declare-fun tree_ap$ah (B_a_b_fun_fun_b_a_b_fun_fun_fun_tree$ B_a_b_fun_fun_tree$) B_a_b_fun_fun_tree$)
(declare-fun tree_ap$ai (B_a_b_fun_a_b_fun_fun_fun_b_a_b_fun_fun_b_a_b_fun_fun_fun_fun_tree$ B_a_b_fun_a_b_fun_fun_fun_tree$) B_a_b_fun_fun_b_a_b_fun_fun_fun_tree$)
(declare-fun tree_ap$aj (A_b_fun_a_a_fun_fun_tree$ A_b_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$ak (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$) A_b_fun_a_a_fun_fun_tree$)
(declare-fun tree_ap$al (B_b_fun_b_b_fun_fun_tree$ B_b_fun_tree$) B_b_fun_tree$)
(declare-fun tree_ap$am (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$) B_b_fun_b_b_fun_fun_tree$)
(declare-fun tree_ap$an (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$ao (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$) B_a_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$ap (B_a_a_fun_fun_tree$ B_tree$) A_a_fun_tree$)
(declare-fun tree_ap$aq (B_b_fun_b_a_fun_fun_tree$ B_b_fun_tree$) B_a_fun_tree$)
(declare-fun tree_ap$ar (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$) B_b_fun_b_a_fun_fun_tree$)
(declare-fun tree_ap$as (B_b_a_fun_fun_tree$ B_tree$) B_a_fun_tree$)
(declare-fun tree_ap$at (A_b_b_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$ A_b_b_fun_fun_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun tree_ap$au (A_a_fun_a_b_fun_fun_tree$ A_a_fun_tree$) A_b_fun_tree$)
(declare-fun tree_ap$av (A_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_tree$ A_a_b_fun_fun_tree$) A_a_fun_a_b_fun_fun_tree$)
(declare-fun tree_ap$aw (A_b_a_b_fun_fun_fun_a_b_fun_a_a_b_fun_fun_fun_fun_tree$ A_b_a_b_fun_fun_fun_tree$) A_b_fun_a_a_b_fun_fun_fun_tree$)
(declare-fun tree_ap$ax (A_b_a_b_fun_fun_fun_tree$ A_tree$) B_a_b_fun_fun_tree$)
(declare-fun tree_pure$ (A_b_fun$) A_b_fun_tree$)
(declare-fun tree_pure$a (B$) B_tree$)
(declare-fun tree_pure$b (B_a_b_fun_fun_a_b_fun_fun$) B_a_b_fun_fun_a_b_fun_fun_tree$)
(declare-fun tree_pure$c (B_b_fun_b_fun$) B_b_fun_b_fun_tree$)
(declare-fun tree_pure$d (B_a_fun_a_fun$) B_a_fun_a_fun_tree$)
(declare-fun tree_pure$e (A$) A_tree$)
(declare-fun tree_pure$f (A_b_fun_b_fun$) A_b_fun_b_fun_tree$)
(declare-fun tree_pure$g (B_b_a_b_fun_fun_fun_b_a_b_fun_fun_fun$) B_b_a_b_fun_fun_fun_b_a_b_fun_fun_fun_tree$)
(declare-fun tree_pure$h (B_a_b_fun_a_b_fun_fun_fun_a_b_fun_a_b_fun_fun_fun$) B_a_b_fun_a_b_fun_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$)
(declare-fun tree_pure$i (A_a_fun_a_fun$) A_a_fun_a_fun_tree$)
(declare-fun tree_pure$j (A_b_b_fun_fun_b_b_fun_fun$) A_b_b_fun_fun_b_b_fun_fun_tree$)
(declare-fun tree_pure$k (A_b_a_fun_fun_b_a_fun_fun$) A_b_a_fun_fun_b_a_fun_fun_tree$)
(declare-fun tree_pure$l (A_a_b_fun_fun_a_b_fun_fun$) A_a_b_fun_fun_a_b_fun_fun_tree$)
(declare-fun tree_pure$m (B_b_fun$) B_b_fun_tree$)
(declare-fun tree_pure$n (B_a_b_fun_fun$) B_a_b_fun_fun_tree$)
(declare-fun tree_pure$o (A_b_fun_a_b_fun_fun$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun tree_pure$p (B_a_fun$) B_a_fun_tree$)
(declare-fun tree_pure$q (A_a_fun$) A_a_fun_tree$)
(declare-fun tree_pure$r (A_b_fun_a_fun$) A_b_fun_a_fun_tree$)
(declare-fun tree_pure$s (B_b_b_fun_fun$) B_b_b_fun_fun_tree$)
(declare-fun tree_pure$t (A_a_b_fun_fun$) A_a_b_fun_fun_tree$)
(declare-fun tree_pure$u (B_b_a_b_fun_fun_fun$) B_b_a_b_fun_fun_fun_tree$)
(declare-fun tree_pure$v (B_a_b_fun_a_b_fun_fun_fun$) B_a_b_fun_a_b_fun_fun_fun_tree$)
(declare-fun tree_pure$w (A_b_fun_b_a_b_fun_fun_fun$) A_b_fun_b_a_b_fun_fun_fun_tree$)
(declare-fun tree_pure$x (B_b_a_b_fun_fun_fun_b_b_fun_b_a_b_fun_fun_fun_fun$) B_b_a_b_fun_fun_fun_b_b_fun_b_a_b_fun_fun_fun_fun_tree$)
(declare-fun tree_pure$y (B_a_b_fun_a_b_fun_fun_fun_b_a_b_fun_fun_b_a_b_fun_fun_fun_fun$) B_a_b_fun_a_b_fun_fun_fun_b_a_b_fun_fun_b_a_b_fun_fun_fun_fun_tree$)
(declare-fun tree_pure$z (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$) B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(assert (! (forall ((?v0 B$) (?v1 B_a_b_fun_a_b_fun_fun_fun$)) (! (= (fun_app$ (uuf$ ?v0) ?v1) (fun_app$a ?v1 ?v0)) :pattern ((fun_app$ (uuf$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 B$) (?v1 B_b_a_b_fun_fun_fun$)) (! (= (fun_app$b (uue$ ?v0) ?v1) (fun_app$c ?v1 ?v0)) :pattern ((fun_app$b (uue$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 B$) (?v1 B_a_b_fun_fun$)) (! (= (fun_app$d (uua$ ?v0) ?v1) (fun_app$e ?v1 ?v0)) :pattern ((fun_app$d (uua$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 B$) (?v1 B_b_fun$)) (! (= (fun_app$f (uub$ ?v0) ?v1) (fun_app$g ?v1 ?v0)) :pattern ((fun_app$f (uub$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 B$) (?v1 B_a_fun$)) (! (= (fun_app$h (uuc$ ?v0) ?v1) (fun_app$i ?v1 ?v0)) :pattern ((fun_app$h (uuc$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_b_b_fun_fun$)) (! (= (fun_app$j (uuh$ ?v0) ?v1) (fun_app$k ?v1 ?v0)) :pattern ((fun_app$j (uuh$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_b_a_fun_fun$)) (! (= (fun_app$l (uui$ ?v0) ?v1) (fun_app$m ?v1 ?v0)) :pattern ((fun_app$l (uui$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_a_b_fun_fun$)) (! (= (fun_app$n (uuj$ ?v0) ?v1) (fun_app$o ?v1 ?v0)) :pattern ((fun_app$n (uuj$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_b_fun$)) (! (= (fun_app$p (uud$ ?v0) ?v1) (fun_app$q ?v1 ?v0)) :pattern ((fun_app$p (uud$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$)) (! (= (fun_app$r (uug$ ?v0) ?v1) (fun_app$s ?v1 ?v0)) :pattern ((fun_app$r (uug$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 B_a_b_fun_a_b_fun_fun_fun$) (?v1 B_a_b_fun_fun$) (?v2 B$)) (! (= (fun_app$e (fun_app$t (fun_app$u uun$ ?v0) ?v1) ?v2) (fun_app$v (fun_app$a ?v0 ?v2) (fun_app$e ?v1 ?v2))) :pattern ((fun_app$e (fun_app$t (fun_app$u uun$ ?v0) ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 B_b_a_b_fun_fun_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$e (fun_app$w (fun_app$x uum$ ?v0) ?v1) ?v2) (fun_app$e (fun_app$c ?v0 ?v2) (fun_app$g ?v1 ?v2))) :pattern ((fun_app$e (fun_app$w (fun_app$x uum$ ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 B_a_b_fun_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$g (fun_app$y (fun_app$z uuo$ ?v0) ?v1) ?v2) (fun_app$q (fun_app$e ?v0 ?v2) (fun_app$i ?v1 ?v2))) :pattern ((fun_app$g (fun_app$y (fun_app$z uuo$ ?v0) ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B$)) (! (= (fun_app$e (fun_app$aa uuk$ ?v0) ?v1) ?v0) :pattern ((fun_app$e (fun_app$aa uuk$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 B$) (?v1 A$)) (! (= (fun_app$q (fun_app$e uul$ ?v0) ?v1) ?v0) :pattern ((fun_app$q (fun_app$e uul$ ?v0) ?v1)))) :named a14))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$q uu$ ?v0) c$) :pattern ((fun_app$q uu$ ?v0)))) :named a15))
(assert (! (not (= (tree_pure$ uu$) (tree_ap$ tree_K$ (tree_pure$a c$)))) :named a16))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$) (?v1 B$)) (= (tree_ap$ ?v0 (tree_pure$a ?v1)) (tree_ap$a (tree_pure$b (uua$ ?v1)) ?v0))) :named a17))
(assert (! (forall ((?v0 B_b_fun_tree$) (?v1 B$)) (= (tree_ap$b ?v0 (tree_pure$a ?v1)) (tree_ap$c (tree_pure$c (uub$ ?v1)) ?v0))) :named a18))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B$)) (= (tree_ap$d ?v0 (tree_pure$a ?v1)) (tree_ap$e (tree_pure$d (uuc$ ?v1)) ?v0))) :named a19))
(assert (! (forall ((?v0 A_b_fun_tree$) (?v1 A$)) (= (tree_ap$f ?v0 (tree_pure$e ?v1)) (tree_ap$g (tree_pure$f (uud$ ?v1)) ?v0))) :named a20))
(assert (! (forall ((?v0 B_b_a_b_fun_fun_fun_tree$) (?v1 B$)) (= (tree_ap$h ?v0 (tree_pure$a ?v1)) (tree_ap$i (tree_pure$g (uue$ ?v1)) ?v0))) :named a21))
(assert (! (forall ((?v0 B_a_b_fun_a_b_fun_fun_fun_tree$) (?v1 B$)) (= (tree_ap$j ?v0 (tree_pure$a ?v1)) (tree_ap$k (tree_pure$h (uuf$ ?v1)) ?v0))) :named a22))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A$)) (= (tree_ap$l ?v0 (tree_pure$e ?v1)) (tree_ap$m (tree_pure$i (uug$ ?v1)) ?v0))) :named a23))
(assert (! (forall ((?v0 A_b_b_fun_fun_tree$) (?v1 A$)) (= (tree_ap$n ?v0 (tree_pure$e ?v1)) (tree_ap$o (tree_pure$j (uuh$ ?v1)) ?v0))) :named a24))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 A$)) (= (tree_ap$p ?v0 (tree_pure$e ?v1)) (tree_ap$q (tree_pure$k (uui$ ?v1)) ?v0))) :named a25))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree$) (?v1 A$)) (= (tree_ap$r ?v0 (tree_pure$e ?v1)) (tree_ap$s (tree_pure$l (uuj$ ?v1)) ?v0))) :named a26))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (= (tree_ap$b (tree_pure$m ?v0) (tree_pure$a ?v1)) (tree_pure$a (fun_app$g ?v0 ?v1)))) :named a27))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A$)) (= (tree_ap$f (tree_pure$ ?v0) (tree_pure$e ?v1)) (tree_pure$a (fun_app$q ?v0 ?v1)))) :named a28))
(assert (! (forall ((?v0 A_b_fun_b_fun$) (?v1 A_b_fun$)) (= (tree_ap$g (tree_pure$f ?v0) (tree_pure$ ?v1)) (tree_pure$a (fun_app$p ?v0 ?v1)))) :named a29))
(assert (! (forall ((?v0 B_a_b_fun_fun$) (?v1 B$)) (= (tree_ap$ (tree_pure$n ?v0) (tree_pure$a ?v1)) (tree_pure$ (fun_app$e ?v0 ?v1)))) :named a30))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$) (?v1 A_b_fun$)) (= (tree_ap$t (tree_pure$o ?v0) (tree_pure$ ?v1)) (tree_pure$ (fun_app$v ?v0 ?v1)))) :named a31))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B$)) (= (tree_ap$d (tree_pure$p ?v0) (tree_pure$a ?v1)) (tree_pure$e (fun_app$i ?v0 ?v1)))) :named a32))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (tree_ap$l (tree_pure$q ?v0) (tree_pure$e ?v1)) (tree_pure$e (fun_app$s ?v0 ?v1)))) :named a33))
(assert (! (forall ((?v0 A_b_fun_a_fun$) (?v1 A_b_fun$)) (= (tree_ap$u (tree_pure$r ?v0) (tree_pure$ ?v1)) (tree_pure$e (fun_app$ab ?v0 ?v1)))) :named a34))
(assert (! (forall ((?v0 B_b_b_fun_fun$) (?v1 B$)) (= (tree_ap$v (tree_pure$s ?v0) (tree_pure$a ?v1)) (tree_pure$m (fun_app$ac ?v0 ?v1)))) :named a35))
(assert (! (forall ((?v0 B_b_fun_b_fun$) (?v1 B_b_fun$)) (= (tree_ap$c (tree_pure$c ?v0) (tree_pure$m ?v1)) (tree_pure$a (fun_app$f ?v0 ?v1)))) :named a36))
(assert (! (forall ((?v0 B_b_fun_tree$) (?v1 A_tree$)) (= (tree_ap$n (tree_ap$w tree_K$a ?v0) ?v1) ?v0)) :named a37))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 A_tree$)) (= (tree_ap$p (tree_ap$x tree_K$b ?v0) ?v1) ?v0)) :named a38))
(assert (! (forall ((?v0 A_b_fun_tree$) (?v1 A_tree$)) (= (tree_ap$r (tree_ap$y tree_K$c ?v0) ?v1) ?v0)) :named a39))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (= (tree_ap$l (tree_ap$z tree_K$d ?v0) ?v1) ?v0)) :named a40))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$) (?v1 B_tree$)) (= (tree_ap$j (tree_ap$aa tree_K$e ?v0) ?v1) ?v0)) :named a41))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$) (?v1 B_tree$)) (= (tree_ap$h (tree_ap$ab tree_K$f ?v0) ?v1) ?v0)) :named a42))
(assert (! (forall ((?v0 B_tree$) (?v1 B_tree$)) (= (tree_ap$b (tree_ap$v tree_K$g ?v0) ?v1) ?v0)) :named a43))
(assert (! (forall ((?v0 A_tree$) (?v1 B_tree$)) (= (tree_ap$d (tree_ap$p tree_K$h ?v0) ?v1) ?v0)) :named a44))
(assert (! (forall ((?v0 B_tree$) (?v1 A_tree$)) (= (tree_ap$f (tree_ap$ tree_K$ ?v0) ?v1) ?v0)) :named a45))
(assert (! (forall ((?v0 A_b_fun_tree$) (?v1 B_tree$)) (= (tree_ap$ (tree_ap$ac tree_K$i ?v0) ?v1) ?v0)) :named a46))
(assert (! (forall ((?v0 B_a_b_fun_a_b_fun_fun_fun_tree$) (?v1 B_a_b_fun_a_b_fun_fun_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$j ?v0 (tree_pure$a ?v2)) (tree_ap$j ?v1 (tree_pure$a ?v2)))) (= ?v0 ?v1))) :named a47))
(assert (! (forall ((?v0 B_b_a_b_fun_fun_fun_tree$) (?v1 B_b_a_b_fun_fun_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$h ?v0 (tree_pure$a ?v2)) (tree_ap$h ?v1 (tree_pure$a ?v2)))) (= ?v0 ?v1))) :named a48))
(assert (! (forall ((?v0 B_b_fun_tree$) (?v1 B_b_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$b ?v0 (tree_pure$a ?v2)) (tree_ap$b ?v1 (tree_pure$a ?v2)))) (= ?v0 ?v1))) :named a49))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_a_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$d ?v0 (tree_pure$a ?v2)) (tree_ap$d ?v1 (tree_pure$a ?v2)))) (= ?v0 ?v1))) :named a50))
(assert (! (forall ((?v0 A_b_fun_tree$) (?v1 A_b_fun_tree$)) (=> (forall ((?v2 A$)) (= (tree_ap$f ?v0 (tree_pure$e ?v2)) (tree_ap$f ?v1 (tree_pure$e ?v2)))) (= ?v0 ?v1))) :named a51))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$) (?v1 B_a_b_fun_fun_tree$)) (=> (forall ((?v2 B$)) (= (tree_ap$ ?v0 (tree_pure$a ?v2)) (tree_ap$ ?v1 (tree_pure$a ?v2)))) (= ?v0 ?v1))) :named a52))
(assert (! (forall ((?v0 B_a_b_fun_a_b_fun_fun_fun_tree$) (?v1 B_a_b_fun_a_b_fun_fun_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$j ?v0 ?v2) (tree_ap$j ?v1 ?v2))) (= ?v0 ?v1))) :named a53))
(assert (! (forall ((?v0 B_b_a_b_fun_fun_fun_tree$) (?v1 B_b_a_b_fun_fun_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$h ?v0 ?v2) (tree_ap$h ?v1 ?v2))) (= ?v0 ?v1))) :named a54))
(assert (! (forall ((?v0 B_b_fun_tree$) (?v1 B_b_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$b ?v0 ?v2) (tree_ap$b ?v1 ?v2))) (= ?v0 ?v1))) :named a55))
(assert (! (forall ((?v0 B_a_fun_tree$) (?v1 B_a_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$d ?v0 ?v2) (tree_ap$d ?v1 ?v2))) (= ?v0 ?v1))) :named a56))
(assert (! (forall ((?v0 A_b_fun_tree$) (?v1 A_b_fun_tree$)) (=> (forall ((?v2 A_tree$)) (= (tree_ap$f ?v0 ?v2) (tree_ap$f ?v1 ?v2))) (= ?v0 ?v1))) :named a57))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$) (?v1 B_a_b_fun_fun_tree$)) (=> (forall ((?v2 B_tree$)) (= (tree_ap$ ?v0 ?v2) (tree_ap$ ?v1 ?v2))) (= ?v0 ?v1))) :named a58))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$) (?v1 B_a_fun_tree$) (?v2 B_tree$)) (= (tree_ap$b (tree_ap$ad (tree_ap$ae tree_S$ ?v0) ?v1) ?v2) (tree_ap$f (tree_ap$ ?v0 ?v2) (tree_ap$d ?v1 ?v2)))) :named a59))
(assert (! (forall ((?v0 B_b_a_b_fun_fun_fun_tree$) (?v1 B_b_fun_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$af (tree_ap$ag tree_S$a ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$h ?v0 ?v2) (tree_ap$b ?v1 ?v2)))) :named a60))
(assert (! (forall ((?v0 B_a_b_fun_a_b_fun_fun_fun_tree$) (?v1 B_a_b_fun_fun_tree$) (?v2 B_tree$)) (= (tree_ap$ (tree_ap$ah (tree_ap$ai tree_S$b ?v0) ?v1) ?v2) (tree_ap$t (tree_ap$j ?v0 ?v2) (tree_ap$ ?v1 ?v2)))) :named a61))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$) (?v1 A_b_fun_tree$) (?v2 A_tree$)) (= (tree_ap$l (tree_ap$aj (tree_ap$ak tree_S$c ?v0) ?v1) ?v2) (tree_ap$d (tree_ap$p ?v0 ?v2) (tree_ap$f ?v1 ?v2)))) :named a62))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$) (?v1 B_b_fun_tree$) (?v2 B_tree$)) (= (tree_ap$b (tree_ap$al (tree_ap$am tree_S$d ?v0) ?v1) ?v2) (tree_ap$b (tree_ap$v ?v0 ?v2) (tree_ap$b ?v1 ?v2)))) :named a63))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$) (?v1 B_a_fun_tree$) (?v2 B_tree$)) (= (tree_ap$d (tree_ap$an (tree_ap$ao tree_S$e ?v0) ?v1) ?v2) (tree_ap$l (tree_ap$ap ?v0 ?v2) (tree_ap$d ?v1 ?v2)))) :named a64))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$) (?v1 B_b_fun_tree$) (?v2 B_tree$)) (= (tree_ap$d (tree_ap$aq (tree_ap$ar tree_S$f ?v0) ?v1) ?v2) (tree_ap$d (tree_ap$as ?v0 ?v2) (tree_ap$b ?v1 ?v2)))) :named a65))
(assert (! (forall ((?v0 A_b_b_fun_fun_tree$) (?v1 A_b_fun_tree$) (?v2 A_tree$)) (= (tree_ap$f (tree_ap$t (tree_ap$at tree_S$g ?v0) ?v1) ?v2) (tree_ap$b (tree_ap$n ?v0 ?v2) (tree_ap$f ?v1 ?v2)))) :named a66))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree$) (?v1 A_a_fun_tree$) (?v2 A_tree$)) (= (tree_ap$f (tree_ap$au (tree_ap$av tree_S$h ?v0) ?v1) ?v2) (tree_ap$f (tree_ap$r ?v0 ?v2) (tree_ap$l ?v1 ?v2)))) :named a67))
(assert (! (forall ((?v0 A_b_a_b_fun_fun_fun_tree$) (?v1 A_b_fun_tree$) (?v2 A_tree$)) (= (tree_ap$r (tree_ap$y (tree_ap$aw tree_S$i ?v0) ?v1) ?v2) (tree_ap$ (tree_ap$ax ?v0 ?v2) (tree_ap$f ?v1 ?v2)))) :named a68))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (tree_ap$f (tree_pure$ ?v0) (node$g ?v1 ?v2 ?v3)) (node$b (fun_app$q ?v0 ?v1) (tree_ap$f (tree_pure$ ?v0) ?v2) (tree_ap$f (tree_pure$ ?v0) ?v3)))) :named a69))
(assert (! (forall ((?v0 B_a_b_fun_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$)) (= (tree_ap$ (tree_pure$n ?v0) (node$b ?v1 ?v2 ?v3)) (node$ (fun_app$e ?v0 ?v1) (tree_ap$ (tree_pure$n ?v0) ?v2) (tree_ap$ (tree_pure$n ?v0) ?v3)))) :named a70))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (tree_ap$l (tree_pure$q ?v0) (node$g ?v1 ?v2 ?v3)) (node$g (fun_app$s ?v0 ?v1) (tree_ap$l (tree_pure$q ?v0) ?v2) (tree_ap$l (tree_pure$q ?v0) ?v3)))) :named a71))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$)) (= (tree_ap$d (tree_pure$p ?v0) (node$b ?v1 ?v2 ?v3)) (node$g (fun_app$i ?v0 ?v1) (tree_ap$d (tree_pure$p ?v0) ?v2) (tree_ap$d (tree_pure$p ?v0) ?v3)))) :named a72))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$)) (= (tree_ap$b (tree_pure$m ?v0) (node$b ?v1 ?v2 ?v3)) (node$b (fun_app$g ?v0 ?v1) (tree_ap$b (tree_pure$m ?v0) ?v2) (tree_ap$b (tree_pure$m ?v0) ?v3)))) :named a73))
(assert (! (forall ((?v0 A_a_b_fun_fun$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (= (tree_ap$r (tree_pure$t ?v0) (node$g ?v1 ?v2 ?v3)) (node$ (fun_app$o ?v0 ?v1) (tree_ap$r (tree_pure$t ?v0) ?v2) (tree_ap$r (tree_pure$t ?v0) ?v3)))) :named a74))
(assert (! (forall ((?v0 A_b_fun_a_fun$) (?v1 A_b_fun$) (?v2 A_b_fun_tree$) (?v3 A_b_fun_tree$)) (= (tree_ap$u (tree_pure$r ?v0) (node$ ?v1 ?v2 ?v3)) (node$g (fun_app$ab ?v0 ?v1) (tree_ap$u (tree_pure$r ?v0) ?v2) (tree_ap$u (tree_pure$r ?v0) ?v3)))) :named a75))
(assert (! (forall ((?v0 A_b_fun_b_fun$) (?v1 A_b_fun$) (?v2 A_b_fun_tree$) (?v3 A_b_fun_tree$)) (= (tree_ap$g (tree_pure$f ?v0) (node$ ?v1 ?v2 ?v3)) (node$b (fun_app$p ?v0 ?v1) (tree_ap$g (tree_pure$f ?v0) ?v2) (tree_ap$g (tree_pure$f ?v0) ?v3)))) :named a76))
(assert (! (forall ((?v0 B_b_a_b_fun_fun_fun$) (?v1 B$) (?v2 B_tree$) (?v3 B_tree$)) (= (tree_ap$h (tree_pure$u ?v0) (node$b ?v1 ?v2 ?v3)) (node$a (fun_app$c ?v0 ?v1) (tree_ap$h (tree_pure$u ?v0) ?v2) (tree_ap$h (tree_pure$u ?v0) ?v3)))) :named a77))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$) (?v1 A_b_fun$) (?v2 A_b_fun_tree$) (?v3 A_b_fun_tree$)) (= (tree_ap$t (tree_pure$o ?v0) (node$ ?v1 ?v2 ?v3)) (node$ (fun_app$v ?v0 ?v1) (tree_ap$t (tree_pure$o ?v0) ?v2) (tree_ap$t (tree_pure$o ?v0) ?v3)))) :named a78))
(assert (! (forall ((?v0 B_a_b_fun_a_b_fun_fun_fun$) (?v1 B_tree$)) (= (tree_ap$j (tree_pure$v ?v0) ?v1) (map_tree$ ?v0 ?v1))) :named a79))
(assert (! (forall ((?v0 B_b_a_b_fun_fun_fun$) (?v1 B_tree$)) (= (tree_ap$h (tree_pure$u ?v0) ?v1) (map_tree$a ?v0 ?v1))) :named a80))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_tree$)) (= (tree_ap$d (tree_pure$p ?v0) ?v1) (map_tree$b ?v0 ?v1))) :named a81))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_tree$)) (= (tree_ap$b (tree_pure$m ?v0) ?v1) (map_tree$c ?v0 ?v1))) :named a82))
(assert (! (forall ((?v0 A_b_fun_b_fun$) (?v1 A_b_fun_tree$)) (= (tree_ap$g (tree_pure$f ?v0) ?v1) (map_tree$d ?v0 ?v1))) :named a83))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$) (?v1 A_b_fun_tree$)) (= (tree_ap$t (tree_pure$o ?v0) ?v1) (map_tree$e ?v0 ?v1))) :named a84))
(assert (! (forall ((?v0 B_a_b_fun_fun$) (?v1 B_tree$)) (= (tree_ap$ (tree_pure$n ?v0) ?v1) (map_tree$f ?v0 ?v1))) :named a85))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_tree$)) (= (tree_ap$f (tree_pure$ ?v0) ?v1) (map_tree$g ?v0 ?v1))) :named a86))
(assert (! (= tree_K$i (tree_pure$w uuk$)) :named a87))
(assert (! (= tree_K$ (tree_pure$n uul$)) :named a88))
(assert (! (forall ((?v0 A_b_fun_tree$)) (= (tree_ap$t (tree_pure$o id$) ?v0) ?v0)) :named a89))
(assert (! (forall ((?v0 B_tree$)) (= (tree_ap$b (tree_pure$m id$a) ?v0) ?v0)) :named a90))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (= (map_tree$c ?v0 (tree_pure$a ?v1)) (tree_pure$a (fun_app$g ?v0 ?v1)))) :named a91))
(assert (! (forall ((?v0 A_b_fun_b_fun$) (?v1 A_b_fun$)) (= (map_tree$d ?v0 (tree_pure$ ?v1)) (tree_pure$a (fun_app$p ?v0 ?v1)))) :named a92))
(assert (! (forall ((?v0 B_a_b_fun_fun$) (?v1 B$)) (= (map_tree$f ?v0 (tree_pure$a ?v1)) (tree_pure$ (fun_app$e ?v0 ?v1)))) :named a93))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$) (?v1 A_b_fun$)) (= (map_tree$e ?v0 (tree_pure$ ?v1)) (tree_pure$ (fun_app$v ?v0 ?v1)))) :named a94))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B$)) (= (map_tree$b ?v0 (tree_pure$a ?v1)) (tree_pure$e (fun_app$i ?v0 ?v1)))) :named a95))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (map_tree$h ?v0 (tree_pure$e ?v1)) (tree_pure$e (fun_app$s ?v0 ?v1)))) :named a96))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A$)) (= (map_tree$g ?v0 (tree_pure$e ?v1)) (tree_pure$a (fun_app$q ?v0 ?v1)))) :named a97))
(assert (! (forall ((?v0 A_b_fun_a_fun$) (?v1 A_b_fun$)) (= (map_tree$i ?v0 (tree_pure$ ?v1)) (tree_pure$e (fun_app$ab ?v0 ?v1)))) :named a98))
(assert (! (forall ((?v0 B_b_b_fun_fun$) (?v1 B$)) (= (map_tree$j ?v0 (tree_pure$a ?v1)) (tree_pure$m (fun_app$ac ?v0 ?v1)))) :named a99))
(assert (! (forall ((?v0 B_b_fun_b_fun$) (?v1 B_b_fun$)) (= (map_tree$k ?v0 (tree_pure$m ?v1)) (tree_pure$a (fun_app$f ?v0 ?v1)))) :named a100))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$)) (= (root$b (tree_pure$o ?v0)) ?v0)) :named a101))
(assert (! (forall ((?v0 A_b_fun_b_fun$)) (= (root$c (tree_pure$f ?v0)) ?v0)) :named a102))
(assert (! (forall ((?v0 B_a_b_fun_fun$)) (= (root$d (tree_pure$n ?v0)) ?v0)) :named a103))
(assert (! (forall ((?v0 B_b_fun$)) (= (root$e (tree_pure$m ?v0)) ?v0)) :named a104))
(assert (! (forall ((?v0 A$)) (= (root$a (tree_pure$e ?v0)) ?v0)) :named a105))
(assert (! (forall ((?v0 A_b_fun$)) (= (root$f (tree_pure$ ?v0)) ?v0)) :named a106))
(assert (! (forall ((?v0 B$)) (= (root$ (tree_pure$a ?v0)) ?v0)) :named a107))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$)) (= (left$b (tree_pure$o ?v0)) (tree_pure$o ?v0))) :named a108))
(assert (! (forall ((?v0 A_b_fun_b_fun$)) (= (left$c (tree_pure$f ?v0)) (tree_pure$f ?v0))) :named a109))
(assert (! (forall ((?v0 B_a_b_fun_fun$)) (= (left$d (tree_pure$n ?v0)) (tree_pure$n ?v0))) :named a110))
(assert (! (forall ((?v0 B_b_fun$)) (= (left$e (tree_pure$m ?v0)) (tree_pure$m ?v0))) :named a111))
(assert (! (forall ((?v0 A$)) (= (left$a (tree_pure$e ?v0)) (tree_pure$e ?v0))) :named a112))
(assert (! (forall ((?v0 A_b_fun$)) (= (left$f (tree_pure$ ?v0)) (tree_pure$ ?v0))) :named a113))
(assert (! (forall ((?v0 B$)) (= (left$ (tree_pure$a ?v0)) (tree_pure$a ?v0))) :named a114))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$)) (= (right$b (tree_pure$o ?v0)) (tree_pure$o ?v0))) :named a115))
(assert (! (forall ((?v0 A_b_fun_b_fun$)) (= (right$c (tree_pure$f ?v0)) (tree_pure$f ?v0))) :named a116))
(assert (! (forall ((?v0 B_a_b_fun_fun$)) (= (right$d (tree_pure$n ?v0)) (tree_pure$n ?v0))) :named a117))
(assert (! (forall ((?v0 B_b_fun$)) (= (right$e (tree_pure$m ?v0)) (tree_pure$m ?v0))) :named a118))
(assert (! (forall ((?v0 A$)) (= (right$a (tree_pure$e ?v0)) (tree_pure$e ?v0))) :named a119))
(assert (! (forall ((?v0 A_b_fun$)) (= (right$f (tree_pure$ ?v0)) (tree_pure$ ?v0))) :named a120))
(assert (! (forall ((?v0 B$)) (= (right$ (tree_pure$a ?v0)) (tree_pure$a ?v0))) :named a121))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$)) (! (= (tree_pure$o ?v0) (node$m ?v0 (tree_pure$o ?v0) (tree_pure$o ?v0))) :pattern ((tree_pure$o ?v0)))) :named a122))
(assert (! (forall ((?v0 A_b_fun_b_fun$)) (! (= (tree_pure$f ?v0) (node$i ?v0 (tree_pure$f ?v0) (tree_pure$f ?v0))) :pattern ((tree_pure$f ?v0)))) :named a123))
(assert (! (forall ((?v0 B_a_b_fun_fun$)) (! (= (tree_pure$n ?v0) (node$a ?v0 (tree_pure$n ?v0) (tree_pure$n ?v0))) :pattern ((tree_pure$n ?v0)))) :named a124))
(assert (! (forall ((?v0 B_b_fun$)) (! (= (tree_pure$m ?v0) (node$d ?v0 (tree_pure$m ?v0) (tree_pure$m ?v0))) :pattern ((tree_pure$m ?v0)))) :named a125))
(assert (! (forall ((?v0 A$)) (! (= (tree_pure$e ?v0) (node$g ?v0 (tree_pure$e ?v0) (tree_pure$e ?v0))) :pattern ((tree_pure$e ?v0)))) :named a126))
(assert (! (forall ((?v0 A_b_fun$)) (! (= (tree_pure$ ?v0) (node$ ?v0 (tree_pure$ ?v0) (tree_pure$ ?v0))) :pattern ((tree_pure$ ?v0)))) :named a127))
(assert (! (forall ((?v0 B$)) (! (= (tree_pure$a ?v0) (node$b ?v0 (tree_pure$a ?v0) (tree_pure$a ?v0))) :pattern ((tree_pure$a ?v0)))) :named a128))
(assert (! (= tree_I$ (tree_pure$o id$)) :named a129))
(assert (! (= tree_I$a (tree_pure$m id$a)) :named a130))
(assert (! (= tree_S$a (tree_pure$x uum$)) :named a131))
(assert (! (= tree_S$b (tree_pure$y uun$)) :named a132))
(assert (! (= tree_S$ (tree_pure$z uuo$)) :named a133))
(check-sat)
;(get-unsat-core)
