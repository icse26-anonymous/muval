; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 501
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ 0)
(declare-datatypes () ((Nat_nat_prod$ (pair$ (fst$ Nat$) (snd$ Nat$)))))
(declare-codatatypes () ((Nat_nat_prod_tree$ (node$ (root$ Nat_nat_prod$) (left$ Nat_nat_prod_tree$) (right$ Nat_nat_prod_tree$)))))
(declare-datatypes () ((Nat_nat_prod_nat_nat_prod_prod$ (pair$a (fst$a Nat_nat_prod$) (snd$a Nat_nat_prod$)))))
(declare-codatatypes () ((Nat_nat_prod_nat_nat_prod_prod_tree$ (node$a (root$a Nat_nat_prod_nat_nat_prod_prod$) (left$a Nat_nat_prod_nat_nat_prod_prod_tree$) (right$a Nat_nat_prod_nat_nat_prod_prod_tree$)))))
(declare-fun det$ (Nat_nat_prod_nat_nat_prod_prod$) Nat$)
(declare-fun one$ () Nat$)
(declare-fun fmat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun imat$ () Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$)
(declare-fun fun_app$ (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun mediant$ () Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$)
(declare-fun fun_app$a (Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod$) Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun fun_app$b (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod$) Nat_nat_prod$)
(declare-fun fun_app$c (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$ Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod$)
(declare-fun map_tree$ (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$ Nat_nat_prod_nat_nat_prod_prod_tree$) Nat_nat_prod_tree$)
(declare-fun map_tree$a (Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod_tree$) Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun map_tree$b (Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$ Nat_nat_prod_nat_nat_prod_prod_tree$) Nat_nat_prod_nat_nat_prod_prod_tree$)
(declare-fun map_tree$c (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod_tree$) Nat_nat_prod_tree$)
(declare-fun stern_brocot$ () Nat_nat_prod_tree$)
(declare-fun stern_brocot_iterate$ () Nat_nat_prod_tree$)
(declare-fun stern_brocot_iterate_aux$ (Nat_nat_prod_nat_nat_prod_prod$) Nat_nat_prod_nat_nat_prod_prod_tree$)
(assert (! (not (= stern_brocot$ stern_brocot_iterate$)) :named a0))
(assert (! (= stern_brocot_iterate$ (map_tree$ mediant$ (stern_brocot_iterate_aux$ imat$))) :named a1))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$) (?v1 Nat_nat_prod_nat_nat_prod_prod$) (?v2 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$ (mulmat$ (fun_app$ (mulmat$ ?v0) ?v1)) ?v2) (fun_app$ (mulmat$ ?v0) (fun_app$ (mulmat$ ?v1) ?v2)))) :named a2))
(assert (! (= (root$ stern_brocot$) (pair$ one$ one$)) :named a3))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat_nat_prod_tree$)) (= (root$a (map_tree$a ?v0 ?v1)) (fun_app$a ?v0 (root$ ?v1)))) :named a4))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_tree$)) (= (root$a (map_tree$b ?v0 ?v1)) (fun_app$ ?v0 (root$a ?v1)))) :named a5))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_tree$)) (= (root$ (map_tree$c ?v0 ?v1)) (fun_app$b ?v0 (root$ ?v1)))) :named a6))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_tree$)) (= (root$ (map_tree$ ?v0 ?v1)) (fun_app$c ?v0 (root$a ?v1)))) :named a7))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat_nat_prod_tree$)) (= (root$a (map_tree$a ?v0 ?v1)) (fun_app$a ?v0 (root$ ?v1)))) :named a8))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_nat_nat_prod_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_tree$)) (= (root$a (map_tree$b ?v0 ?v1)) (fun_app$ ?v0 (root$a ?v1)))) :named a9))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_tree$)) (= (root$ (map_tree$c ?v0 ?v1)) (fun_app$b ?v0 (root$ ?v1)))) :named a10))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod_nat_nat_prod_fun$) (?v1 Nat_nat_prod_nat_nat_prod_prod_tree$)) (= (root$ (map_tree$ ?v0 ?v1)) (fun_app$c ?v0 (root$a ?v1)))) :named a11))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$ (mulmat$ ?v0) imat$) ?v0)) :named a12))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$)) (= (fun_app$ (mulmat$ imat$) ?v0) ?v0)) :named a13))
(assert (! (= (fun_app$c mediant$ imat$) (pair$ one$ one$)) :named a14))
(assert (! (= (fun_app$c mediant$ fmat$) (pair$ one$ one$)) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a17))
(assert (! (= (det$ imat$) one$) :named a18))
(assert (! (forall ((?v0 Nat_nat_prod$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a19))
(assert (! (= one$ one$) :named a20))
(assert (! (forall ((?v0 Nat$)) (= (= one$ ?v0) (= ?v0 one$))) :named a21))
(assert (! (forall ((?v0 Nat_nat_prod$)) (=> (forall ((?v1 Nat$) (?v2 Nat$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a22))
(check-sat)
;(get-unsat-core)
