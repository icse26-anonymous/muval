; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 472
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_a_fun_set$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun$ 0)
(declare-sort A_tree_bool_fun$ 0)
(declare-sort A_a_a_fun_fun_set$ 0)
(declare-sort A_a_fun_a_fun_set$ 0)
(declare-sort A_a_a_a_fun_fun_fun$ 0)
(declare-sort A_a_a_fun_a_fun_fun$ 0)
(declare-sort A_a_a_fun_fun_a_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_fun_a_fun$ 0)
(declare-sort A_a_fun_tree_bool_fun$ 0)
(declare-sort A_a_tree_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_set$ 0)
(declare-sort A_a_a_fun_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun_a_fun$ 0)
(declare-sort A_a_fun_a_a_fun_tree_bool_fun_fun$ 0)
(declare-codatatypes () ((A_tree$ (node$ (root$ A$) (left$ A_tree$) (right$ A_tree$)))
  (A_a_fun_a_a_fun_fun_tree$ (node$a (select$ A_a_fun_a_a_fun_fun$) (selecta$ A_a_fun_a_a_fun_fun_tree$) (selectb$ A_a_fun_a_a_fun_fun_tree$)))
  (A_a_a_fun_fun_tree$ (node$b (selectc$ A_a_a_fun_fun$) (selectd$ A_a_a_fun_fun_tree$) (selecte$ A_a_a_fun_fun_tree$)))
  (A_a_fun_a_fun_tree$ (node$c (selectf$ A_a_fun_a_fun$) (selectg$ A_a_fun_a_fun_tree$) (selecth$ A_a_fun_a_fun_tree$)))
  (A_a_fun_tree$ (node$d (selecti$ A_a_fun$) (selectj$ A_a_fun_tree$) (selectk$ A_a_fun_tree$)))
  (A_a_a_fun_fun_a_fun_tree$ (node$e (selectl$ A_a_a_fun_fun_a_fun$) (selectm$ A_a_a_fun_fun_a_fun_tree$) (selectn$ A_a_a_fun_fun_a_fun_tree$)))
  (A_a_fun_a_fun_a_fun_tree$ (node$f (selecto$ A_a_fun_a_fun_a_fun$) (selectp$ A_a_fun_a_fun_a_fun_tree$) (selectq$ A_a_fun_a_fun_a_fun_tree$)))
  (A_a_a_a_fun_fun_fun_tree$ (node$g (selectr$ A_a_a_a_fun_fun_fun$) (selects$ A_a_a_a_fun_fun_fun_tree$) (selectt$ A_a_a_a_fun_fun_fun_tree$)))
  (A_a_a_fun_a_fun_fun_tree$ (node$h (selectu$ A_a_a_fun_a_fun_fun$) (selectv$ A_a_a_fun_a_fun_fun_tree$) (selectw$ A_a_a_fun_a_fun_fun_tree$)))
  (A_a_fun_a_a_fun_fun_a_fun_tree$ (node$i (selectx$ A_a_fun_a_a_fun_fun_a_fun$) (selecty$ A_a_fun_a_a_fun_fun_a_fun_tree$) (selectz$ A_a_fun_a_a_fun_fun_a_fun_tree$)))
  (A_a_a_fun_fun_a_a_fun_fun_tree$ (node$j (selecua$ A_a_a_fun_fun_a_a_fun_fun$) (selecub$ A_a_a_fun_fun_a_a_fun_fun_tree$) (selecuc$ A_a_a_fun_fun_a_a_fun_fun_tree$)))))
(declare-fun x$ () A$)
(declare-fun y$ () A_tree$)
(declare-fun root$a (A_a_fun_tree$) A_a_fun$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun right$a (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun right$b (A_a_a_fun_fun_tree$) A_a_a_fun_fun_tree$)
(declare-fun right$c (A_a_fun_a_fun_tree$) A_a_fun_a_fun_tree$)
(declare-fun right$d (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun right$e (A_a_a_fun_fun_a_fun_tree$) A_a_a_fun_fun_a_fun_tree$)
(declare-fun right$f (A_a_fun_a_fun_a_fun_tree$) A_a_fun_a_fun_a_fun_tree$)
(declare-fun right$g (A_a_a_a_fun_fun_fun_tree$) A_a_a_a_fun_fun_fun_tree$)
(declare-fun right$h (A_a_a_fun_a_fun_fun_tree$) A_a_a_fun_a_fun_fun_tree$)
(declare-fun right$i (A_a_fun_a_a_fun_fun_a_fun_tree$) A_a_fun_a_a_fun_fun_a_fun_tree$)
(declare-fun right$j (A_a_a_fun_fun_a_a_fun_fun_tree$) A_a_a_fun_fun_a_a_fun_fun_tree$)
(declare-fun fun_app$ (A_a_fun_tree_bool_fun$ A_a_fun_tree$) Bool)
(declare-fun member$a (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_set$) Bool)
(declare-fun member$b (A_a_a_fun_fun$ A_a_a_fun_fun_set$) Bool)
(declare-fun member$c (A_a_fun_a_fun$ A_a_fun_a_fun_set$) Bool)
(declare-fun member$d (A_a_fun$ A_a_fun_set$) Bool)
(declare-fun tree_ap$ (A_a_fun_tree$ A_tree$) A_tree$)
(declare-fun fun_app$a (A_a_fun_a_a_fun_tree_bool_fun_fun$ A_a_fun$) A_a_fun_tree_bool_fun$)
(declare-fun fun_app$b (A_tree_bool_fun$ A_tree$) Bool)
(declare-fun fun_app$c (A_a_tree_bool_fun_fun$ A$) A_tree_bool_fun$)
(declare-fun fun_app$d (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$e (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$f (A_a_fun_a_fun$ A_a_fun$) A$)
(declare-fun fun_app$g (A_a_fun$ A$) A$)
(declare-fun map_tree$ (A_a_fun$ A_tree$) A_tree$)
(declare-fun set_tree$ (A_tree$) A_set$)
(declare-fun tree_ap$a (A_a_fun_a_fun_tree$ A_a_fun_tree$) A_tree$)
(declare-fun tree_ap$b (A_a_a_fun_fun_tree$ A_tree$) A_a_fun_tree$)
(declare-fun tree_ap$c (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun tree_ap$d (A_a_a_fun_fun_a_fun_tree$ A_a_a_fun_fun_tree$) A_tree$)
(declare-fun tree_ap$e (A_a_fun_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$) A_tree$)
(declare-fun tree_ap$f (A_a_a_a_fun_fun_fun_tree$ A_tree$) A_a_a_fun_fun_tree$)
(declare-fun tree_ap$g (A_a_a_fun_a_fun_fun_tree$ A_tree$) A_a_fun_a_fun_tree$)
(declare-fun tree_ap$h (A_a_fun_a_a_fun_fun_a_fun_tree$ A_a_fun_a_a_fun_fun_tree$) A_tree$)
(declare-fun tree_ap$i (A_a_a_fun_fun_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$) A_a_fun_tree$)
(declare-fun map_tree$a (A_a_fun_a_fun$ A_a_fun_tree$) A_tree$)
(declare-fun map_tree$b (A_a_a_fun_fun$ A_tree$) A_a_fun_tree$)
(declare-fun map_tree$c (A_a_fun_a_a_fun_fun$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun map_tree$d (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun_tree$) A_tree$)
(declare-fun map_tree$e (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun_tree$) A_tree$)
(declare-fun map_tree$f (A_a_a_a_fun_fun_fun$ A_tree$) A_a_a_fun_fun_tree$)
(declare-fun map_tree$g (A_a_a_fun_a_fun_fun$ A_tree$) A_a_fun_a_fun_tree$)
(declare-fun map_tree$h (A_a_fun_a_a_fun_fun_a_fun$ A_a_fun_a_a_fun_fun_tree$) A_tree$)
(declare-fun map_tree$i (A_a_a_fun_fun_a_a_fun_fun$ A_a_a_fun_fun_tree$) A_a_fun_tree$)
(declare-fun set_tree$a (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_set$)
(declare-fun set_tree$b (A_a_a_fun_fun_tree$) A_a_a_fun_fun_set$)
(declare-fun set_tree$c (A_a_fun_a_fun_tree$) A_a_fun_a_fun_set$)
(declare-fun set_tree$d (A_a_fun_tree$) A_a_fun_set$)
(declare-fun tree_pure$ (A_a_fun_a_a_fun_fun$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun tree_pure$a (A_a_a_fun_fun$) A_a_a_fun_fun_tree$)
(declare-fun tree_pure$b (A_a_fun_a_fun$) A_a_fun_a_fun_tree$)
(declare-fun tree_pure$c (A_a_fun$) A_a_fun_tree$)
(declare-fun tree_pure$d (A$) A_tree$)
(assert (! (not (member$ x$ (set_tree$ y$))) :named a0))
(assert (! (member$ x$ (set_tree$ (right$ y$))) :named a1))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (=> (member$a ?v0 (set_tree$a (right$a ?v1))) (member$a ?v0 (set_tree$a ?v1)))) :named a2))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun_tree$)) (=> (member$b ?v0 (set_tree$b (right$b ?v1))) (member$b ?v0 (set_tree$b ?v1)))) :named a3))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$)) (=> (member$c ?v0 (set_tree$c (right$c ?v1))) (member$c ?v0 (set_tree$c ?v1)))) :named a4))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$)) (=> (member$d ?v0 (set_tree$d (right$d ?v1))) (member$d ?v0 (set_tree$d ?v1)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (=> (member$ ?v0 (set_tree$ (right$ ?v1))) (member$ ?v0 (set_tree$ ?v1)))) :named a6))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$)) (= (right$a (tree_pure$ ?v0)) (tree_pure$ ?v0))) :named a7))
(assert (! (forall ((?v0 A_a_a_fun_fun$)) (= (right$b (tree_pure$a ?v0)) (tree_pure$a ?v0))) :named a8))
(assert (! (forall ((?v0 A_a_fun_a_fun$)) (= (right$c (tree_pure$b ?v0)) (tree_pure$b ?v0))) :named a9))
(assert (! (forall ((?v0 A_a_fun$)) (= (right$d (tree_pure$c ?v0)) (tree_pure$c ?v0))) :named a10))
(assert (! (forall ((?v0 A$)) (= (right$ (tree_pure$d ?v0)) (tree_pure$d ?v0))) :named a11))
(assert (! (forall ((?v0 A_a_fun_tree$) (?v1 A_tree$)) (= (right$ (tree_ap$ ?v0 ?v1)) (tree_ap$ (right$d ?v0) (right$ ?v1)))) :named a12))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$) (?v1 A_a_fun_tree$)) (= (right$ (tree_ap$a ?v0 ?v1)) (tree_ap$a (right$c ?v0) (right$d ?v1)))) :named a13))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$) (?v1 A_tree$)) (= (right$d (tree_ap$b ?v0 ?v1)) (tree_ap$b (right$b ?v0) (right$ ?v1)))) :named a14))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$) (?v1 A_a_fun_tree$)) (= (right$d (tree_ap$c ?v0 ?v1)) (tree_ap$c (right$a ?v0) (right$d ?v1)))) :named a15))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun_tree$) (?v1 A_a_a_fun_fun_tree$)) (= (right$ (tree_ap$d ?v0 ?v1)) (tree_ap$d (right$e ?v0) (right$b ?v1)))) :named a16))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun_tree$) (?v1 A_a_fun_a_fun_tree$)) (= (right$ (tree_ap$e ?v0 ?v1)) (tree_ap$e (right$f ?v0) (right$c ?v1)))) :named a17))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun_tree$) (?v1 A_tree$)) (= (right$b (tree_ap$f ?v0 ?v1)) (tree_ap$f (right$g ?v0) (right$ ?v1)))) :named a18))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun_tree$) (?v1 A_tree$)) (= (right$c (tree_ap$g ?v0 ?v1)) (tree_ap$g (right$h ?v0) (right$ ?v1)))) :named a19))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun_tree$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (right$ (tree_ap$h ?v0 ?v1)) (tree_ap$h (right$i ?v0) (right$a ?v1)))) :named a20))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun_tree$) (?v1 A_a_a_fun_fun_tree$)) (= (right$d (tree_ap$i ?v0 ?v1)) (tree_ap$i (right$j ?v0) (right$b ?v1)))) :named a21))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (right$ (map_tree$ ?v0 ?v1)) (map_tree$ ?v0 (right$ ?v1)))) :named a22))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (right$ (map_tree$a ?v0 ?v1)) (map_tree$a ?v0 (right$d ?v1)))) :named a23))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (right$d (map_tree$b ?v0 ?v1)) (map_tree$b ?v0 (right$ ?v1)))) :named a24))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (right$d (map_tree$c ?v0 ?v1)) (map_tree$c ?v0 (right$d ?v1)))) :named a25))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun$) (?v1 A_a_a_fun_fun_tree$)) (= (right$ (map_tree$d ?v0 ?v1)) (map_tree$d ?v0 (right$b ?v1)))) :named a26))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$)) (= (right$ (map_tree$e ?v0 ?v1)) (map_tree$e ?v0 (right$c ?v1)))) :named a27))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun$) (?v1 A_tree$)) (= (right$b (map_tree$f ?v0 ?v1)) (map_tree$f ?v0 (right$ ?v1)))) :named a28))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A_tree$)) (= (right$c (map_tree$g ?v0 ?v1)) (map_tree$g ?v0 (right$ ?v1)))) :named a29))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (right$ (map_tree$h ?v0 ?v1)) (map_tree$h ?v0 (right$a ?v1)))) :named a30))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$) (?v1 A_a_a_fun_fun_tree$)) (= (right$d (map_tree$i ?v0 ?v1)) (map_tree$i ?v0 (right$b ?v1)))) :named a31))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (right$ (map_tree$ ?v0 ?v1)) (map_tree$ ?v0 (right$ ?v1)))) :named a32))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (right$ (map_tree$a ?v0 ?v1)) (map_tree$a ?v0 (right$d ?v1)))) :named a33))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (right$d (map_tree$b ?v0 ?v1)) (map_tree$b ?v0 (right$ ?v1)))) :named a34))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (right$d (map_tree$c ?v0 ?v1)) (map_tree$c ?v0 (right$d ?v1)))) :named a35))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun$) (?v1 A_a_a_fun_fun_tree$)) (= (right$ (map_tree$d ?v0 ?v1)) (map_tree$d ?v0 (right$b ?v1)))) :named a36))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$)) (= (right$ (map_tree$e ?v0 ?v1)) (map_tree$e ?v0 (right$c ?v1)))) :named a37))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun$) (?v1 A_tree$)) (= (right$b (map_tree$f ?v0 ?v1)) (map_tree$f ?v0 (right$ ?v1)))) :named a38))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$) (?v1 A_tree$)) (= (right$c (map_tree$g ?v0 ?v1)) (map_tree$g ?v0 (right$ ?v1)))) :named a39))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$)) (= (right$ (map_tree$h ?v0 ?v1)) (map_tree$h ?v0 (right$a ?v1)))) :named a40))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$) (?v1 A_a_a_fun_fun_tree$)) (= (right$d (map_tree$i ?v0 ?v1)) (map_tree$i ?v0 (right$b ?v1)))) :named a41))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_a_a_fun_fun_tree$) (?v2 A_a_fun_a_a_fun_fun_tree$)) (! (= (right$a (node$a ?v0 ?v1 ?v2)) ?v2) :pattern ((node$a ?v0 ?v1 ?v2)))) :named a42))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_a_a_fun_fun_tree$) (?v2 A_a_a_fun_fun_tree$)) (! (= (right$b (node$b ?v0 ?v1 ?v2)) ?v2) :pattern ((node$b ?v0 ?v1 ?v2)))) :named a43))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_a_fun_tree$) (?v2 A_a_fun_a_fun_tree$)) (! (= (right$c (node$c ?v0 ?v1 ?v2)) ?v2) :pattern ((node$c ?v0 ?v1 ?v2)))) :named a44))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$)) (! (= (right$d (node$d ?v0 ?v1 ?v2)) ?v2) :pattern ((node$d ?v0 ?v1 ?v2)))) :named a45))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (right$ (node$ ?v0 ?v1 ?v2)) ?v2) :pattern ((node$ ?v0 ?v1 ?v2)))) :named a46))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_a_a_fun_tree_bool_fun_fun$)) (=> (and (member$d ?v0 (set_tree$d ?v1)) (and (forall ((?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$)) (fun_app$ (fun_app$a ?v2 ?v3) (node$d ?v3 ?v4 ?v5))) (and (forall ((?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$) (?v6 A_a_fun$)) (=> (and (member$d ?v6 (set_tree$d ?v4)) (fun_app$ (fun_app$a ?v2 ?v6) ?v4)) (fun_app$ (fun_app$a ?v2 ?v6) (node$d ?v3 ?v4 ?v5)))) (forall ((?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$) (?v6 A_a_fun$)) (=> (and (member$d ?v6 (set_tree$d ?v5)) (fun_app$ (fun_app$a ?v2 ?v6) ?v5)) (fun_app$ (fun_app$a ?v2 ?v6) (node$d ?v3 ?v4 ?v5))))))) (fun_app$ (fun_app$a ?v2 ?v0) ?v1))) :named a47))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_a_tree_bool_fun_fun$)) (=> (and (member$ ?v0 (set_tree$ ?v1)) (and (forall ((?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (fun_app$b (fun_app$c ?v2 ?v3) (node$ ?v3 ?v4 ?v5))) (and (forall ((?v3 A$) (?v4 A_tree$) (?v5 A_tree$) (?v6 A$)) (=> (and (member$ ?v6 (set_tree$ ?v4)) (fun_app$b (fun_app$c ?v2 ?v6) ?v4)) (fun_app$b (fun_app$c ?v2 ?v6) (node$ ?v3 ?v4 ?v5)))) (forall ((?v3 A$) (?v4 A_tree$) (?v5 A_tree$) (?v6 A$)) (=> (and (member$ ?v6 (set_tree$ ?v5)) (fun_app$b (fun_app$c ?v2 ?v6) ?v5)) (fun_app$b (fun_app$c ?v2 ?v6) (node$ ?v3 ?v4 ?v5))))))) (fun_app$b (fun_app$c ?v2 ?v0) ?v1))) :named a48))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$)) (=> (and (member$d ?v0 (set_tree$d ?v1)) (and (forall ((?v2 A_a_fun_tree$) (?v3 A_a_fun_tree$)) (=> (= ?v1 (node$d ?v0 ?v2 ?v3)) false)) (and (forall ((?v2 A_a_fun$) (?v3 A_a_fun_tree$) (?v4 A_a_fun_tree$)) (=> (and (= ?v1 (node$d ?v2 ?v3 ?v4)) (member$d ?v0 (set_tree$d ?v3))) false)) (forall ((?v2 A_a_fun$) (?v3 A_a_fun_tree$) (?v4 A_a_fun_tree$)) (=> (and (= ?v1 (node$d ?v2 ?v3 ?v4)) (member$d ?v0 (set_tree$d ?v4))) false))))) false)) :named a49))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (=> (and (member$ ?v0 (set_tree$ ?v1)) (and (forall ((?v2 A_tree$) (?v3 A_tree$)) (=> (= ?v1 (node$ ?v0 ?v2 ?v3)) false)) (and (forall ((?v2 A$) (?v3 A_tree$) (?v4 A_tree$)) (=> (and (= ?v1 (node$ ?v2 ?v3 ?v4)) (member$ ?v0 (set_tree$ ?v3))) false)) (forall ((?v2 A$) (?v3 A_tree$) (?v4 A_tree$)) (=> (and (= ?v1 (node$ ?v2 ?v3 ?v4)) (member$ ?v0 (set_tree$ ?v4))) false))))) false)) :named a50))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun$) (?v3 A_a_fun_tree$)) (=> (member$d ?v0 (set_tree$d ?v1)) (member$d ?v0 (set_tree$d (node$d ?v2 ?v1 ?v3))))) :named a51))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A$) (?v3 A_tree$)) (=> (member$ ?v0 (set_tree$ ?v1)) (member$ ?v0 (set_tree$ (node$ ?v2 ?v1 ?v3))))) :named a52))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun$) (?v3 A_a_fun_tree$)) (=> (member$d ?v0 (set_tree$d ?v1)) (member$d ?v0 (set_tree$d (node$d ?v2 ?v3 ?v1))))) :named a53))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A$) (?v3 A_tree$)) (=> (member$ ?v0 (set_tree$ ?v1)) (member$ ?v0 (set_tree$ (node$ ?v2 ?v3 ?v1))))) :named a54))
(assert (! (forall ((?v0 A_a_fun_tree$)) (member$d (root$a ?v0) (set_tree$d ?v0))) :named a55))
(assert (! (forall ((?v0 A_tree$)) (member$ (root$ ?v0) (set_tree$ ?v0))) :named a56))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun_tree$) (?v2 A_a_fun_tree$) (?v3 A_a_fun$) (?v4 A_a_fun_tree$) (?v5 A_a_fun_tree$)) (= (= (node$d ?v0 ?v1 ?v2) (node$d ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a57))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$) (?v3 A$) (?v4 A_tree$) (?v5 A_tree$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a58))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (root$a (map_tree$c ?v0 ?v1)) (fun_app$d ?v0 (root$a ?v1)))) :named a59))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (root$a (map_tree$b ?v0 ?v1)) (fun_app$e ?v0 (root$ ?v1)))) :named a60))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (root$ (map_tree$a ?v0 ?v1)) (fun_app$f ?v0 (root$a ?v1)))) :named a61))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (root$ (map_tree$ ?v0 ?v1)) (fun_app$g ?v0 (root$ ?v1)))) :named a62))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun_tree$)) (= (root$a (map_tree$c ?v0 ?v1)) (fun_app$d ?v0 (root$a ?v1)))) :named a63))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_tree$)) (= (root$a (map_tree$b ?v0 ?v1)) (fun_app$e ?v0 (root$ ?v1)))) :named a64))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun_tree$)) (= (root$ (map_tree$a ?v0 ?v1)) (fun_app$f ?v0 (root$a ?v1)))) :named a65))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_tree$)) (= (root$ (map_tree$ ?v0 ?v1)) (fun_app$g ?v0 (root$ ?v1)))) :named a66))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$) (?v1 A_a_fun$)) (= (map_tree$c ?v0 (tree_pure$c ?v1)) (tree_pure$c (fun_app$d ?v0 ?v1)))) :named a67))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$)) (= (map_tree$b ?v0 (tree_pure$d ?v1)) (tree_pure$c (fun_app$e ?v0 ?v1)))) :named a68))
(assert (! (forall ((?v0 A_a_fun_a_fun$) (?v1 A_a_fun$)) (= (map_tree$a ?v0 (tree_pure$c ?v1)) (tree_pure$d (fun_app$f ?v0 ?v1)))) :named a69))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (map_tree$ ?v0 (tree_pure$d ?v1)) (tree_pure$d (fun_app$g ?v0 ?v1)))) :named a70))
(check-sat)
;(get-unsat-core)
