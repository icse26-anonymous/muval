; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 673
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-codatatypes () ((Int_tree$ (node$ (root$ Int) (left$ Int_tree$) (right$ Int_tree$)))))
(declare-datatypes () ((Num$ (one$) (bit0$ (select$ Num$)) (bit1$ (selecta$ Num$)))))
(declare-fun x$ () Int_tree$)
(declare-fun num$ () Int_tree$)
(declare-fun zero$ () Int_tree$)
(declare-fun times$ (Int_tree$ Int_tree$) Int_tree$)
(declare-fun times$a (Int Int) Int)
(declare-fun times$b (Num$ Num$) Num$)
(declare-fun fIXME_x$ () Int_tree$)
(declare-fun numeral$ (Num$) Int_tree$)
(declare-fun numeral$a (Num$) Int)
(assert (! (not (= x$ (times$ (numeral$ (bit0$ one$)) fIXME_x$))) :named a0))
(assert (! (= x$ (node$ 0 (times$ (numeral$ (bit0$ one$)) num$) x$)) :named a1))
(assert (! (forall ((?v0 Int) (?v1 Int_tree$) (?v2 Int_tree$) (?v3 Int) (?v4 Int_tree$) (?v5 Int_tree$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a2))
(assert (! (forall ((?v0 Int_tree$)) (=> (forall ((?v1 Int) (?v2 Int_tree$) (?v3 Int_tree$)) (=> (= ?v0 (node$ ?v1 ?v2 ?v3)) false)) false)) :named a3))
(assert (! (forall ((?v0 Num$)) (= (= (bit0$ ?v0) one$) false)) :named a4))
(assert (! (forall ((?v0 Num$)) (= (= one$ (bit0$ ?v0)) false)) :named a5))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Int)) (= (times$a (numeral$a ?v0) (times$a (numeral$a ?v1) ?v2)) (times$a (numeral$a (times$b ?v0 ?v1)) ?v2))) :named a6))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Int_tree$)) (= (times$ (numeral$ ?v0) (times$ (numeral$ ?v1) ?v2)) (times$ (numeral$ (times$b ?v0 ?v1)) ?v2))) :named a7))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (times$a (numeral$a ?v0) (numeral$a ?v1)) (numeral$a (times$b ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (times$ (numeral$ ?v0) (numeral$ ?v1)) (numeral$ (times$b ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int)) (= (= (times$a ?v0 ?v1) (times$a ?v2 ?v1)) (or (= ?v1 0) (= ?v0 ?v2)))) :named a10))
(assert (! (forall ((?v0 Int) (?v1 Int) (?v2 Int)) (= (= (times$a ?v0 ?v1) (times$a ?v0 ?v2)) (or (= ?v0 0) (= ?v1 ?v2)))) :named a11))
(assert (! (forall ((?v0 Int) (?v1 Int)) (= (= (times$a ?v0 ?v1) 0) (or (= ?v0 0) (= ?v1 0)))) :named a12))
(assert (! (forall ((?v0 Int)) (= (* ?v0 0) 0)) :named a13))
(assert (! (forall ((?v0 Int_tree$)) (= (times$ ?v0 zero$) zero$)) :named a14))
(assert (! (forall ((?v0 Int)) (= (* 0 ?v0) 0)) :named a15))
(assert (! (forall ((?v0 Int_tree$)) (= (times$ zero$ ?v0) zero$)) :named a16))
(assert (! (not (= 0 2)) :named a17))
(assert (! (forall ((?v0 Int)) (= (* 1 ?v0) ?v0)) :named a18))
(assert (! (forall ((?v0 Int_tree$)) (= (times$ (numeral$ one$) ?v0) ?v0)) :named a19))
(assert (! (forall ((?v0 Int)) (= (* ?v0 1) ?v0)) :named a20))
(assert (! (forall ((?v0 Int_tree$)) (= (times$ ?v0 (numeral$ one$)) ?v0)) :named a21))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (numeral$a ?v0) (numeral$a ?v1)) (= ?v0 ?v1))) :named a22))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (numeral$ ?v0) (numeral$ ?v1)) (= ?v0 ?v1))) :named a23))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (bit0$ ?v0) (bit0$ ?v1)) (= ?v0 ?v1))) :named a24))
(check-sat)
;(get-unsat-core)
