; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 585
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun zs$ () A_llist$)
(declare-fun less$ (A_llist$ A_llist$) Bool)
(declare-fun less_eq$ (A_llist$ A_llist$) Bool)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun lstrict_prefix$ (A_llist$ A_llist$) Bool)
(assert (! (not (= xs$ ys$)) :named a0))
(assert (! (lprefix$ xs$ ys$) :named a1))
(assert (! (lprefix$ ys$ xs$) :named a2))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a3))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (less_eq$ ?v0 ?v1) (lprefix$ ?v0 ?v1)) :pattern ((less_eq$ ?v0 ?v1)))) :named a5))
(assert (! (less_eq$ xs$ xs$) :named a6))
(assert (! (=> (and (less_eq$ xs$ ys$) (less_eq$ ys$ zs$)) (less_eq$ xs$ zs$)) :named a7))
(assert (! (= (less$ xs$ ys$) (and (less_eq$ xs$ ys$) (not (less_eq$ ys$ xs$)))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v0)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v0)) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v2 ?v1)) (or (lprefix$ ?v0 ?v2) (lprefix$ ?v2 ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v2)) (lprefix$ ?v0 ?v2))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v2)) (lprefix$ ?v0 ?v2))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (less_eq$ ?v0 ?v1) (lprefix$ ?v0 ?v1)) :pattern ((less_eq$ ?v0 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (less$ ?v0 ?v1) (lstrict_prefix$ ?v0 ?v1)) :pattern ((less$ ?v0 ?v1)))) :named a15))
(check-sat)
;(get-unsat-core)
