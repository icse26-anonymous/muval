; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 352
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun less_eq$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(assert (! (not (= less_eq$ lprefix$)) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v0) ?v1)) :pattern ((fun_app$ (fun_app$a less_eq$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v0)) :named a2))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v0)) :named a3))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v0)) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v2) ?v1)) (or (fun_app$ (fun_app$a lprefix$ ?v0) ?v2) (fun_app$ (fun_app$a lprefix$ ?v2) ?v0)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v2)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v2))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v2)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v2))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= ?v0 ?v1) (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0)))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v0)) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) (= ?v1 ?v0))) :pattern ((fun_app$ (fun_app$a less_eq$ ?v1) ?v0)))) :named a12))
(check-sat)
;(get-unsat-core)
