; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 522
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Rule$ 0)
(declare-sort Rule_set$ 0)
(declare-sort Rule_bool_fun$ 0)
(declare-sort Rule_rule_fun$ 0)
(declare-sort Rule_stream_set$ 0)
(declare-sort Rule_rule_stream_fun$ 0)
(declare-sort Rule_stream_bool_fun$ 0)
(declare-sort Rule_stream_rule_fun$ 0)
(declare-sort Rule_rule_rule_fun_fun$ 0)
(declare-sort Rule_stream_stream_set$ 0)
(declare-sort Rule_stream_rule_stream_fun$ 0)
(declare-sort Rule_rule_rule_stream_fun_fun$ 0)
(declare-sort Rule_rule_stream_rule_fun_fun$ 0)
(declare-sort Rule_stream_rule_rule_fun_fun$ 0)
(declare-sort Rule_stream_stream_stream_set$ 0)
(declare-sort Rule_rule_stream_rule_stream_fun_fun$ 0)
(declare-sort Rule_stream_rule_rule_stream_fun_fun$ 0)
(declare-sort Rule_stream_rule_stream_rule_fun_fun$ 0)
(declare-sort Rule_stream_rule_stream_rule_stream_fun_fun$ 0)
(declare-sort Rule_stream_stream_rule_stream_rule_stream_fun_fun$ 0)
(declare-codatatypes () ((Rule_stream$ (sCons$ (shd$ Rule$) (stl$ Rule_stream$)))
  (Rule_stream_stream$ (sCons$a (shd$a Rule_stream$) (stl$a Rule_stream_stream$)))
  (Rule_stream_stream_stream$ (sCons$b (shd$b Rule_stream_stream$) (stl$b Rule_stream_stream_stream$)))))
(declare-fun r$ () Rule$)
(declare-fun bot$ () Rule_set$)
(declare-fun fair$ (Rule_stream$) Rule_stream_bool_fun$)
(declare-fun smap$ (Rule_stream_rule_fun$ Rule_stream_stream$) Rule_stream$)
(declare-fun snth$ (Rule_stream$ Nat$) Rule$)
(declare-fun sset$ (Rule_stream$) Rule_set$)
(declare-fun fenum$ (Rule_stream$) Rule_stream$)
(declare-fun rules$ () Rule_stream$)
(declare-fun sdrop$ (Nat$) Rule_stream_rule_stream_fun$)
(declare-fun smap$a (Rule_rule_stream_fun$ Rule_stream$) Rule_stream_stream$)
(declare-fun smap$b (Rule_stream_rule_stream_fun$ Rule_stream_stream$) Rule_stream_stream$)
(declare-fun smap$c (Rule_rule_fun$) Rule_stream_rule_stream_fun$)
(declare-fun smap2$ (Rule_rule_stream_rule_fun_fun$ Rule_stream$ Rule_stream_stream$) Rule_stream$)
(declare-fun snth$a (Rule_stream_stream$ Nat$) Rule_stream$)
(declare-fun snth$b (Rule_stream_stream_stream$ Nat$) Rule_stream_stream$)
(declare-fun member$ (Rule$ Rule_set$) Bool)
(declare-fun smap2$a (Rule_stream_rule_rule_fun_fun$) Rule_stream_stream_rule_stream_rule_stream_fun_fun$)
(declare-fun smap2$b (Rule_stream_rule_stream_rule_fun_fun$ Rule_stream_stream$ Rule_stream_stream$) Rule_stream$)
(declare-fun smap2$c (Rule_rule_rule_stream_fun_fun$ Rule_stream$ Rule_stream$) Rule_stream_stream$)
(declare-fun smap2$d (Rule_rule_stream_rule_stream_fun_fun$ Rule_stream$ Rule_stream_stream$) Rule_stream_stream$)
(declare-fun smap2$e (Rule_stream_rule_rule_stream_fun_fun$ Rule_stream_stream$ Rule_stream$) Rule_stream_stream$)
(declare-fun smap2$f (Rule_stream_rule_stream_rule_stream_fun_fun$ Rule_stream_stream$ Rule_stream_stream$) Rule_stream_stream$)
(declare-fun smap2$g (Rule_rule_rule_fun_fun$) Rule_stream_rule_stream_rule_stream_fun_fun$)
(declare-fun thesis$ () Bool)
(declare-fun fun_app$ (Rule_stream_bool_fun$ Rule_stream$) Bool)
(declare-fun member$a (Rule_stream_stream_stream$ Rule_stream_stream_stream_set$) Bool)
(declare-fun member$b (Rule_stream_stream$ Rule_stream_stream_set$) Bool)
(declare-fun member$c (Rule_stream$ Rule_stream_set$) Bool)
(declare-fun streams$ (Rule_stream_stream_set$) Rule_stream_stream_stream_set$)
(declare-fun fun_app$a (Rule_stream_rule_stream_fun$ Rule_stream$) Rule_stream$)
(declare-fun fun_app$b (Rule_bool_fun$ Rule$) Bool)
(declare-fun fun_app$c (Rule_stream_rule_fun$ Rule_stream$) Rule$)
(declare-fun fun_app$d (Rule_rule_stream_rule_fun_fun$ Rule$) Rule_stream_rule_fun$)
(declare-fun fun_app$e (Rule_stream_stream_rule_stream_rule_stream_fun_fun$ Rule_stream_stream$) Rule_stream_rule_stream_fun$)
(declare-fun fun_app$f (Rule_rule_fun$ Rule$) Rule$)
(declare-fun fun_app$g (Rule_stream_rule_rule_fun_fun$ Rule_stream$) Rule_rule_fun$)
(declare-fun fun_app$h (Rule_stream_rule_stream_rule_fun_fun$ Rule_stream$) Rule_stream_rule_fun$)
(declare-fun fun_app$i (Rule_rule_stream_fun$ Rule$) Rule_stream$)
(declare-fun fun_app$j (Rule_rule_rule_stream_fun_fun$ Rule$) Rule_rule_stream_fun$)
(declare-fun fun_app$k (Rule_rule_stream_rule_stream_fun_fun$ Rule$) Rule_stream_rule_stream_fun$)
(declare-fun fun_app$l (Rule_stream_rule_rule_stream_fun_fun$ Rule_stream$) Rule_rule_stream_fun$)
(declare-fun fun_app$m (Rule_stream_rule_stream_rule_stream_fun_fun$ Rule_stream$) Rule_stream_rule_stream_fun$)
(declare-fun fun_app$n (Rule_rule_rule_fun_fun$ Rule$) Rule_rule_fun$)
(declare-fun streams$a (Rule_stream_set$) Rule_stream_stream_set$)
(declare-fun streams$b (Rule_set$) Rule_stream_set$)
(declare-fun countable$ (Rule_set$) Bool)
(declare-fun stream_all$ (Rule_stream_bool_fun$ Rule_stream_stream$) Bool)
(declare-fun stream_all$a (Rule_bool_fun$) Rule_stream_bool_fun$)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 Nat$)) (=> (= r$ (snth$ rules$ ?v0)) thesis$)) :named a1))
(assert (! (member$ r$ (sset$ rules$)) :named a2))
(assert (! (= (sset$ (fenum$ rules$)) (sset$ rules$)) :named a3))
(assert (! (forall ((?v0 Rule_stream$) (?v1 Nat$)) (=> (fun_app$ (fair$ rules$) ?v0) (fun_app$ (fair$ rules$) (fun_app$a (sdrop$ ?v1) ?v0)))) :named a4))
(assert (! (forall ((?v0 Rule_stream$)) (=> (fun_app$ (fair$ rules$) ?v0) (fun_app$ (fair$ rules$) (stl$ ?v0)))) :named a5))
(assert (! (not (= (sset$ rules$) bot$)) :named a6))
(assert (! (forall ((?v0 Rule_stream_bool_fun$) (?v1 Rule_stream_stream$)) (= (stream_all$ ?v0 ?v1) (forall ((?v2 Nat$)) (fun_app$ ?v0 (snth$a ?v1 ?v2))))) :named a7))
(assert (! (forall ((?v0 Rule_bool_fun$) (?v1 Rule_stream$)) (= (fun_app$ (stream_all$a ?v0) ?v1) (forall ((?v2 Nat$)) (fun_app$b ?v0 (snth$ ?v1 ?v2))))) :named a8))
(assert (! (forall ((?v0 Rule_rule_stream_rule_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_stream_stream$) (?v3 Nat$)) (= (snth$ (smap2$ ?v0 ?v1 ?v2) ?v3) (fun_app$c (fun_app$d ?v0 (snth$ ?v1 ?v3)) (snth$a ?v2 ?v3)))) :named a9))
(assert (! (forall ((?v0 Rule_stream_rule_rule_fun_fun$) (?v1 Rule_stream_stream$) (?v2 Rule_stream$) (?v3 Nat$)) (= (snth$ (fun_app$a (fun_app$e (smap2$a ?v0) ?v1) ?v2) ?v3) (fun_app$f (fun_app$g ?v0 (snth$a ?v1 ?v3)) (snth$ ?v2 ?v3)))) :named a10))
(assert (! (forall ((?v0 Rule_stream_rule_stream_rule_fun_fun$) (?v1 Rule_stream_stream$) (?v2 Rule_stream_stream$) (?v3 Nat$)) (= (snth$ (smap2$b ?v0 ?v1 ?v2) ?v3) (fun_app$c (fun_app$h ?v0 (snth$a ?v1 ?v3)) (snth$a ?v2 ?v3)))) :named a11))
(assert (! (forall ((?v0 Rule_rule_rule_stream_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_stream$) (?v3 Nat$)) (= (snth$a (smap2$c ?v0 ?v1 ?v2) ?v3) (fun_app$i (fun_app$j ?v0 (snth$ ?v1 ?v3)) (snth$ ?v2 ?v3)))) :named a12))
(assert (! (forall ((?v0 Rule_rule_stream_rule_stream_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_stream_stream$) (?v3 Nat$)) (= (snth$a (smap2$d ?v0 ?v1 ?v2) ?v3) (fun_app$a (fun_app$k ?v0 (snth$ ?v1 ?v3)) (snth$a ?v2 ?v3)))) :named a13))
(assert (! (forall ((?v0 Rule_stream_rule_rule_stream_fun_fun$) (?v1 Rule_stream_stream$) (?v2 Rule_stream$) (?v3 Nat$)) (= (snth$a (smap2$e ?v0 ?v1 ?v2) ?v3) (fun_app$i (fun_app$l ?v0 (snth$a ?v1 ?v3)) (snth$ ?v2 ?v3)))) :named a14))
(assert (! (forall ((?v0 Rule_stream_rule_stream_rule_stream_fun_fun$) (?v1 Rule_stream_stream$) (?v2 Rule_stream_stream$) (?v3 Nat$)) (= (snth$a (smap2$f ?v0 ?v1 ?v2) ?v3) (fun_app$a (fun_app$m ?v0 (snth$a ?v1 ?v3)) (snth$a ?v2 ?v3)))) :named a15))
(assert (! (forall ((?v0 Rule_rule_rule_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_stream$) (?v3 Nat$)) (= (snth$ (fun_app$a (fun_app$m (smap2$g ?v0) ?v1) ?v2) ?v3) (fun_app$f (fun_app$n ?v0 (snth$ ?v1 ?v3)) (snth$ ?v2 ?v3)))) :named a16))
(assert (! (countable$ (sset$ rules$)) :named a17))
(assert (! (forall ((?v0 Rule_rule_rule_stream_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_stream$) (?v3 Rule_stream_stream$)) (= (= (smap2$c ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$i (fun_app$j ?v0 (snth$ ?v1 ?v4)) (snth$ ?v2 ?v4)) (snth$a ?v3 ?v4))))) :named a18))
(assert (! (forall ((?v0 Rule_rule_stream_rule_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_stream_stream$) (?v3 Rule_stream$)) (= (= (smap2$ ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$c (fun_app$d ?v0 (snth$ ?v1 ?v4)) (snth$a ?v2 ?v4)) (snth$ ?v3 ?v4))))) :named a19))
(assert (! (forall ((?v0 Rule_rule_stream_rule_stream_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_stream_stream$) (?v3 Rule_stream_stream$)) (= (= (smap2$d ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$a (fun_app$k ?v0 (snth$ ?v1 ?v4)) (snth$a ?v2 ?v4)) (snth$a ?v3 ?v4))))) :named a20))
(assert (! (forall ((?v0 Rule_stream_rule_rule_fun_fun$) (?v1 Rule_stream_stream$) (?v2 Rule_stream$) (?v3 Rule_stream$)) (= (= (fun_app$a (fun_app$e (smap2$a ?v0) ?v1) ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$f (fun_app$g ?v0 (snth$a ?v1 ?v4)) (snth$ ?v2 ?v4)) (snth$ ?v3 ?v4))))) :named a21))
(assert (! (forall ((?v0 Rule_stream_rule_rule_stream_fun_fun$) (?v1 Rule_stream_stream$) (?v2 Rule_stream$) (?v3 Rule_stream_stream$)) (= (= (smap2$e ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$i (fun_app$l ?v0 (snth$a ?v1 ?v4)) (snth$ ?v2 ?v4)) (snth$a ?v3 ?v4))))) :named a22))
(assert (! (forall ((?v0 Rule_stream_rule_stream_rule_fun_fun$) (?v1 Rule_stream_stream$) (?v2 Rule_stream_stream$) (?v3 Rule_stream$)) (= (= (smap2$b ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$c (fun_app$h ?v0 (snth$a ?v1 ?v4)) (snth$a ?v2 ?v4)) (snth$ ?v3 ?v4))))) :named a23))
(assert (! (forall ((?v0 Rule_stream_rule_stream_rule_stream_fun_fun$) (?v1 Rule_stream_stream$) (?v2 Rule_stream_stream$) (?v3 Rule_stream_stream$)) (= (= (smap2$f ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$a (fun_app$m ?v0 (snth$a ?v1 ?v4)) (snth$a ?v2 ?v4)) (snth$a ?v3 ?v4))))) :named a24))
(assert (! (forall ((?v0 Rule_rule_rule_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_stream$) (?v3 Rule_stream$)) (= (= (fun_app$a (fun_app$m (smap2$g ?v0) ?v1) ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$f (fun_app$n ?v0 (snth$ ?v1 ?v4)) (snth$ ?v2 ?v4)) (snth$ ?v3 ?v4))))) :named a25))
(assert (! (forall ((?v0 Rule_stream_rule_fun$) (?v1 Rule_stream_stream$) (?v2 Nat$)) (= (snth$ (smap$ ?v0 ?v1) ?v2) (fun_app$c ?v0 (snth$a ?v1 ?v2)))) :named a26))
(assert (! (forall ((?v0 Rule_rule_stream_fun$) (?v1 Rule_stream$) (?v2 Nat$)) (= (snth$a (smap$a ?v0 ?v1) ?v2) (fun_app$i ?v0 (snth$ ?v1 ?v2)))) :named a27))
(assert (! (forall ((?v0 Rule_stream_rule_stream_fun$) (?v1 Rule_stream_stream$) (?v2 Nat$)) (= (snth$a (smap$b ?v0 ?v1) ?v2) (fun_app$a ?v0 (snth$a ?v1 ?v2)))) :named a28))
(assert (! (forall ((?v0 Rule_rule_fun$) (?v1 Rule_stream$) (?v2 Nat$)) (= (snth$ (fun_app$a (smap$c ?v0) ?v1) ?v2) (fun_app$f ?v0 (snth$ ?v1 ?v2)))) :named a29))
(assert (! (forall ((?v0 Rule_stream_stream_stream$) (?v1 Rule_stream_stream_set$)) (= (member$a ?v0 (streams$ ?v1)) (forall ((?v2 Nat$)) (member$b (snth$b ?v0 ?v2) ?v1)))) :named a30))
(assert (! (forall ((?v0 Rule_stream_stream$) (?v1 Rule_stream_set$)) (= (member$b ?v0 (streams$a ?v1)) (forall ((?v2 Nat$)) (member$c (snth$a ?v0 ?v2) ?v1)))) :named a31))
(assert (! (forall ((?v0 Rule_stream$) (?v1 Rule_set$)) (= (member$c ?v0 (streams$b ?v1)) (forall ((?v2 Nat$)) (member$ (snth$ ?v0 ?v2) ?v1)))) :named a32))
(assert (! (forall ((?v0 Rule_stream_stream_stream$) (?v1 Rule_stream_stream_set$) (?v2 Nat$)) (=> (member$a ?v0 (streams$ ?v1)) (member$b (snth$b ?v0 ?v2) ?v1))) :named a33))
(assert (! (forall ((?v0 Rule_stream_stream$) (?v1 Rule_stream_set$) (?v2 Nat$)) (=> (member$b ?v0 (streams$a ?v1)) (member$c (snth$a ?v0 ?v2) ?v1))) :named a34))
(assert (! (forall ((?v0 Rule_stream$) (?v1 Rule_set$) (?v2 Nat$)) (=> (member$c ?v0 (streams$b ?v1)) (member$ (snth$ ?v0 ?v2) ?v1))) :named a35))
(assert (! (forall ((?v0 Rule_rule_fun$) (?v1 Rule_stream$)) (= (stl$ (fun_app$a (smap$c ?v0) ?v1)) (fun_app$a (smap$c ?v0) (stl$ ?v1)))) :named a36))
(assert (! (forall ((?v0 Nat$) (?v1 Rule_rule_fun$) (?v2 Rule_stream$)) (= (fun_app$a (sdrop$ ?v0) (fun_app$a (smap$c ?v1) ?v2)) (fun_app$a (smap$c ?v1) (fun_app$a (sdrop$ ?v0) ?v2)))) :named a37))
(assert (! (forall ((?v0 Nat$) (?v1 Rule_rule_rule_fun_fun$) (?v2 Rule_stream$) (?v3 Rule_stream$)) (= (fun_app$a (sdrop$ ?v0) (fun_app$a (fun_app$m (smap2$g ?v1) ?v2) ?v3)) (fun_app$a (fun_app$m (smap2$g ?v1) (fun_app$a (sdrop$ ?v0) ?v2)) (fun_app$a (sdrop$ ?v0) ?v3)))) :named a38))
(assert (! (forall ((?v0 Rule_rule_rule_fun_fun$) (?v1 Rule_stream$) (?v2 Rule_stream$)) (= (stl$ (fun_app$a (fun_app$m (smap2$g ?v0) ?v1) ?v2)) (fun_app$a (fun_app$m (smap2$g ?v0) (stl$ ?v1)) (stl$ ?v2)))) :named a39))
(check-sat)
;(get-unsat-core)
