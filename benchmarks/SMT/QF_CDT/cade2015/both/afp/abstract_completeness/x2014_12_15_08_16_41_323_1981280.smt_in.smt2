; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 409
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Rule$ 0)
(declare-sort State$ 0)
(declare-sort State_set$ 0)
(declare-sort State_fset$ 0)
(declare-sort State_fset_bool_fun$ 0)
(declare-sort State_rule_prod_tree$ 0)
(declare-sort State_rule_prod_tree_fset$ 0)
(declare-sort State_state_fset_bool_fun_fun$ 0)
(declare-sort State_rule_prod_stream_bool_fun$ 0)
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0)
(declare-sort State_rule_prod_tree_state_rule_prod_stream_bool_fun_fun$ 0)
(declare-datatypes () ((State_rule_prod$ (pair$ (fst$ State$) (snd$ Rule$)))))
(declare-codatatypes () ((Rule_stream$ (sCons$ (shd$ Rule$) (stl$ Rule_stream$)))
  (State_rule_prod_stream$ (sCons$a (shd$a State_rule_prod$) (stl$a State_rule_prod_stream$)))))
(declare-fun n$ () Nat$)
(declare-fun s$ () State$)
(declare-fun ma$ () Nat$)
(declare-fun rs$ () Rule_stream$)
(declare-fun s$a () State_set$)
(declare-fun s$b () State$)
(declare-fun eff$ () Rule_state_state_fset_bool_fun_fun_fun$)
(declare-fun rsa$ () Rule_stream$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun cont$ (State_rule_prod_tree$) State_rule_prod_tree_fset$)
(declare-fun root$ (State_rule_prod_tree$) State_rule_prod$)
(declare-fun ipath$ (State_rule_prod_tree$ State_rule_prod_stream$) Bool)
(declare-fun konig$ (State_rule_prod_tree$) State_rule_prod_stream$)
(declare-fun sdrop$ (Nat$ Rule_stream$) Rule_stream$)
(declare-fun steps$ () State_rule_prod_stream$)
(declare-fun member$ (State$ State_set$) Bool)
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$) State_rule_prod_tree$)
(declare-fun sdrop$a (Nat$ State_rule_prod_stream$) State_rule_prod_stream$)
(declare-fun stepsa$ () State_rule_prod_stream$)
(declare-fun thesis$ () Bool)
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$) Bool)
(declare-fun fmember$ (State_rule_prod_tree$ State_rule_prod_tree_fset$) Bool)
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$) Bool)
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$) State_fset$)
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$) State_fset_bool_fun$)
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$) State_state_fset_bool_fun_fun$)
(declare-fun fun_app$c (State_rule_prod_stream_bool_fun$ State_rule_prod_stream$) Bool)
(declare-fun fun_app$d (State_rule_prod_tree_state_rule_prod_stream_bool_fun_fun$ State_rule_prod_tree$) State_rule_prod_stream_bool_fun$)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 State_rule_prod_tree$)) (=> (and (= (root$ (mkTree$ eff$ (sdrop$ n$ rsa$) s$)) (shd$a (sdrop$a ma$ stepsa$))) (and (fmember$ ?v0 (cont$ (mkTree$ eff$ (sdrop$ n$ rsa$) s$))) (ipath$ ?v0 (sdrop$a (suc$ ma$) stepsa$)))) thesis$)) :named a1))
(assert (! (ipath$ (mkTree$ eff$ (sdrop$ n$ rsa$) s$) (sdrop$a ma$ stepsa$)) :named a2))
(assert (! (member$ s$ s$a) :named a3))
(assert (! (forall ((?v0 State_rule_prod_tree$) (?v1 State_rule_prod_tree$)) (=> (and (= (root$ ?v0) (root$ ?v1)) (= (cont$ ?v0) (cont$ ?v1))) (= ?v0 ?v1))) :named a4))
(assert (! (ipath$ (mkTree$ eff$ rs$ s$b) steps$) :named a5))
(assert (! (=> (forall ((?v0 Nat$) (?v1 State$)) (=> (and (member$ ?v1 s$a) (ipath$ (mkTree$ eff$ (sdrop$ ?v0 rsa$) ?v1) (sdrop$a ma$ stepsa$))) false)) false) :named a6))
(assert (! (forall ((?v0 Rule$) (?v1 State$)) (! (= (enabled$ eff$ ?v0 ?v1) (exists ((?v2 State_fset$)) (fun_app$ (fun_app$a (fun_app$b eff$ ?v0) ?v1) ?v2))) :pattern ((enabled$ eff$ ?v0 ?v1)))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a9))
(assert (! (ipath$ (mkTree$ eff$ rsa$ s$b) stepsa$) :named a10))
(assert (! (forall ((?v0 State_rule_prod_tree$) (?v1 State_rule_prod_stream$)) (= (ipath$ ?v0 ?v1) (exists ((?v2 State_rule_prod_tree$) (?v3 State_rule_prod_stream$) (?v4 State_rule_prod_tree$)) (and (= ?v0 ?v2) (and (= ?v1 ?v3) (and (= (root$ ?v2) (shd$a ?v3)) (and (fmember$ ?v4 (cont$ ?v2)) (ipath$ ?v4 (stl$a ?v3))))))))) :named a11))
(assert (! (forall ((?v0 State_rule_prod_tree$) (?v1 State_rule_prod_stream$) (?v2 State_rule_prod_tree$)) (=> (and (= (root$ ?v0) (shd$a ?v1)) (and (fmember$ ?v2 (cont$ ?v0)) (ipath$ ?v2 (stl$a ?v1)))) (ipath$ ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 State_rule_prod_tree$) (?v1 State_rule_prod_stream$)) (=> (and (ipath$ ?v0 ?v1) (forall ((?v2 State_rule_prod_tree$) (?v3 State_rule_prod_stream$) (?v4 State_rule_prod_tree$)) (=> (and (= ?v0 ?v2) (and (= ?v1 ?v3) (and (= (root$ ?v2) (shd$a ?v3)) (and (fmember$ ?v4 (cont$ ?v2)) (ipath$ ?v4 (stl$a ?v3)))))) false))) false)) :named a13))
(assert (! (forall ((?v0 State_rule_prod_tree_state_rule_prod_stream_bool_fun_fun$) (?v1 State_rule_prod_tree$) (?v2 State_rule_prod_stream$)) (=> (and (fun_app$c (fun_app$d ?v0 ?v1) ?v2) (forall ((?v3 State_rule_prod_tree$) (?v4 State_rule_prod_stream$)) (=> (fun_app$c (fun_app$d ?v0 ?v3) ?v4) (exists ((?v5 State_rule_prod_tree$) (?v6 State_rule_prod_stream$) (?v7 State_rule_prod_tree$)) (and (= ?v3 ?v5) (and (= ?v4 ?v6) (and (= (root$ ?v5) (shd$a ?v6)) (and (fmember$ ?v7 (cont$ ?v5)) (or (fun_app$c (fun_app$d ?v0 ?v7) (stl$a ?v6)) (ipath$ ?v7 (stl$a ?v6))))))))))) (ipath$ ?v1 ?v2))) :named a14))
(assert (! (forall ((?v0 State_rule_prod_tree$)) (= (shd$a (konig$ ?v0)) (root$ ?v0))) :named a15))
(assert (! (member$ s$b s$a) :named a16))
(assert (! (forall ((?v0 Rule$) (?v1 State$)) (=> (enabled$ eff$ ?v0 ?v1) (fun_app$ (fun_app$a (fun_app$b eff$ ?v0) ?v1) (pickEff$ eff$ ?v0 ?v1)))) :named a17))
(check-sat)
;(get-unsat-core)
