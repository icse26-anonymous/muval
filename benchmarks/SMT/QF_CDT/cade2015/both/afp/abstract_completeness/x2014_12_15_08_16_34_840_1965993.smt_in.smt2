; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 450
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Rule$ 0)
(declare-sort State$ 0)
(declare-sort Rule_set$ 0)
(declare-sort State_set$ 0)
(declare-sort State_fset$ 0)
(declare-sort State_fset_bool_fun$ 0)
(declare-sort State_rule_prod_tree$ 0)
(declare-sort State_state_fset_bool_fun_fun$ 0)
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0)
(declare-codatatypes () ((Rule_stream$ (sCons$ (shd$ Rule$) (stl$ Rule_stream$)))))
(declare-fun s$ () State$)
(declare-fun t$ () State_rule_prod_tree$)
(declare-fun rs$ () Rule_stream$)
(declare-fun s$a () State_set$)
(declare-fun s$b () State$)
(declare-fun sl$ () State_fset$)
(declare-fun eff$ () Rule_state_state_fset_bool_fun_fun_fun$)
(declare-fun fair$ (Rule_stream$ Rule_stream$) Bool)
(declare-fun sset$ (Rule_stream$) Rule_set$)
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$) Rule_stream$)
(declare-fun fenum$ (Rule_stream$) Rule_stream$)
(declare-fun rules$ () Rule_stream$)
(declare-fun sdrop$ (Nat$ Rule_stream$) Rule_stream$)
(declare-fun member$ (State$ State_set$) Bool)
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$) State_rule_prod_tree$)
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$) Bool)
(declare-fun fmember$ (State$ State_fset$) Bool)
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$) Bool)
(declare-fun member$a (Rule$ Rule_set$) Bool)
(declare-fun minWait$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$) Nat$)
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$) State_fset$)
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$) State_fset_bool_fun$)
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$) State_state_fset_bool_fun_fun$)
(assert (! (not (member$ s$ s$a)) :named a0))
(assert (! (member$ s$b s$a) :named a1))
(assert (! (enabled$ eff$ (shd$ (trim$ eff$ rs$ s$b)) s$b) :named a2))
(assert (! (forall ((?v0 State$) (?v1 Rule$) (?v2 State_fset$) (?v3 State$)) (=> (and (member$ ?v0 s$a) (and (member$a ?v1 (sset$ rules$)) (and (fun_app$ (fun_app$a (fun_app$b eff$ ?v1) ?v0) ?v2) (fmember$ ?v3 ?v2)))) (member$ ?v3 s$a))) :named a3))
(assert (! (fmember$ s$ sl$) :named a4))
(assert (! (forall ((?v0 Rule$) (?v1 State$)) (! (= (enabled$ eff$ ?v0 ?v1) (exists ((?v2 State_fset$)) (fun_app$ (fun_app$a (fun_app$b eff$ ?v0) ?v1) ?v2))) :pattern ((enabled$ eff$ ?v0 ?v1)))) :named a5))
(assert (! (fmember$ s$ (pickEff$ eff$ (shd$ (trim$ eff$ rs$ s$b)) s$b)) :named a6))
(assert (! (forall ((?v0 State$) (?v1 Rule_stream$)) (=> (and (member$ ?v0 s$a) (fair$ rules$ ?v1)) (member$a (shd$ (trim$ eff$ ?v1 ?v0)) (sset$ rules$)))) :named a7))
(assert (! (forall ((?v0 State$)) (=> (member$ ?v0 s$a) (exists ((?v1 Rule$)) (and (member$a ?v1 (sset$ rules$)) (exists ((?v2 State_fset$)) (fun_app$ (fun_app$a (fun_app$b eff$ ?v1) ?v0) ?v2)))))) :named a8))
(assert (! (forall ((?v0 State$) (?v1 Rule_stream$)) (=> (and (member$ ?v0 s$a) (fair$ rules$ ?v1)) (fair$ rules$ (trim$ eff$ ?v1 ?v0)))) :named a9))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule$) (?v2 State$)) (! (= (enabled$ ?v0 ?v1 ?v2) (exists ((?v3 State_fset$)) (fun_app$ (fun_app$a (fun_app$b ?v0 ?v1) ?v2) ?v3))) :pattern ((enabled$ ?v0 ?v1 ?v2)))) :named a10))
(assert (! (forall ((?v0 State$) (?v1 Rule_stream$)) (=> (and (member$ ?v0 s$a) (fair$ rules$ ?v1)) (enabled$ eff$ (shd$ (trim$ eff$ ?v1 ?v0)) ?v0))) :named a11))
(assert (! (= t$ (mkTree$ eff$ (stl$ (trim$ eff$ rs$ s$b)) s$)) :named a12))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule$) (?v2 State$)) (=> (enabled$ ?v0 ?v1 ?v2) (fun_app$ (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (pickEff$ ?v0 ?v1 ?v2)))) :named a13))
(assert (! (forall ((?v0 State$) (?v1 Rule_stream$)) (=> (and (member$ ?v0 s$a) (fair$ rules$ ?v1)) (exists ((?v2 Nat$)) (enabled$ eff$ (shd$ (sdrop$ ?v2 ?v1)) ?v0)))) :named a14))
(assert (! (forall ((?v0 State$) (?v1 Rule_stream$)) (! (=> (and (member$ ?v0 s$a) (fair$ rules$ ?v1)) (= (trim$ eff$ ?v1 ?v0) (sdrop$ (minWait$ eff$ ?v1 ?v0) ?v1))) :pattern ((trim$ eff$ ?v1 ?v0)))) :named a15))
(assert (! (fair$ rules$ (fenum$ rules$)) :named a16))
(assert (! (= (sset$ (fenum$ rules$)) (sset$ rules$)) :named a17))
(check-sat)
;(get-unsat-core)
