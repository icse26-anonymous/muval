; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 684
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Rule$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-codatatypes () ((Rule_stream$ (sCons$ (shd$ Rule$) (stl$ Rule_stream$)))))
(declare-fun r$ () Rule$)
(declare-fun rs$ () Rule_stream$)
(declare-fun pos$ (Rule_stream$ Rule$) Nat$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun minus$ (Nat$) Nat_nat_fun$)
(declare-fun sdrop$ (Nat$ Rule_stream$) Rule_stream$)
(declare-fun fun_app$ (Nat_nat_fun$ Nat$) Nat$)
(assert (! (not (= (shd$ (stl$ (sdrop$ (fun_app$ (minus$ (pos$ rs$ r$)) (suc$ zero$)) rs$))) (shd$ (sdrop$ (pos$ rs$ r$) rs$)))) :named a0))
(assert (! (forall ((?v0 Nat$) (?v1 Rule_stream$)) (= (stl$ (sdrop$ ?v0 ?v1)) (sdrop$ (suc$ ?v0) ?v1))) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (minus$ (fun_app$ (minus$ (suc$ ?v0)) ?v1)) (suc$ ?v2)) (fun_app$ (minus$ (fun_app$ (minus$ ?v0) ?v1)) ?v2))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (minus$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$ (minus$ ?v0) ?v1)) :pattern ((fun_app$ (minus$ (suc$ ?v0)) (suc$ ?v1))))) :named a3))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (minus$ ?v0) ?v0) zero$) :pattern ((minus$ ?v0)))) :named a4))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (minus$ zero$) ?v0) zero$) :pattern ((fun_app$ (minus$ zero$) ?v0)))) :named a5))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (minus$ ?v0) zero$) ?v0)) :named a6))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (minus$ ?v0) zero$) ?v0)) :named a7))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (minus$ ?v0) ?v0) zero$) :pattern ((minus$ ?v0)))) :named a8))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (minus$ zero$) ?v0) zero$)) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Rule_stream$)) (! (= (sdrop$ (suc$ ?v0) ?v1) (sdrop$ ?v0 (stl$ ?v1))) :pattern ((sdrop$ (suc$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a13))
(check-sat)
;(get-unsat-core)
