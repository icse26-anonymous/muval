; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 479
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Rule$ 0)
(declare-sort State$ 0)
(declare-sort Rule_set$ 0)
(declare-sort State_set$ 0)
(declare-sort State_fset$ 0)
(declare-sort State_fset_bool_fun$ 0)
(declare-sort State_rule_prod_bool_fun$ 0)
(declare-sort State_state_fset_bool_fun_fun$ 0)
(declare-sort State_rule_prod_stream_bool_fun$ 0)
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0)
(declare-sort Rule_state_rule_prod_stream_bool_fun_fun$ 0)
(declare-sort Rule_stream_state_rule_prod_stream_bool_fun_fun$ 0)
(declare-sort State_rule_prod_stream_state_rule_prod_stream_fun$ 0)
(declare-sort State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$ 0)
(declare-datatypes () ((State_rule_prod$ (pair$ (fst$ State$) (snd$ Rule$)))))
(declare-codatatypes () ((State_rule_prod_stream$ (sCons$ (shd$ State_rule_prod$) (stl$ State_rule_prod_stream$)))
  (Rule_stream$ (sCons$a (shd$a Rule$) (stl$a Rule_stream$)))))
(declare-fun r$ () Rule$)
(declare-fun s$ () State_set$)
(declare-fun ev$ (State_rule_prod_stream_bool_fun$) State_rule_prod_stream_bool_fun$)
(declare-fun uu$ () State_rule_prod_bool_fun$)
(declare-fun alw$ (State_rule_prod_stream_bool_fun$) State_rule_prod_stream_bool_fun$)
(declare-fun eff$ () Rule_state_state_fset_bool_fun_fun_fun$)
(declare-fun nxt$ (State_rule_prod_stream_bool_fun$) State_rule_prod_stream_bool_fun$)
(declare-fun per$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_set$ Rule$) Bool)
(declare-fun uua$ () State_rule_prod_bool_fun$)
(declare-fun uub$ () State_rule_prod_stream_bool_fun$)
(declare-fun uuc$ (Rule$) State_rule_prod_bool_fun$)
(declare-fun uud$ (Rule$) State_rule_prod_bool_fun$)
(declare-fun uue$ (Rule$) State_rule_prod_stream_bool_fun$)
(declare-fun uuf$ (State_rule_prod_stream_bool_fun$) State_rule_prod_stream_bool_fun$)
(declare-fun uug$ (State_rule_prod_stream_state_rule_prod_stream_fun$) State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$)
(declare-fun sset$ (Rule_stream$) Rule_set$)
(declare-fun epath$ (Rule_state_state_fset_bool_fun_fun_fun$) Rule_stream_state_rule_prod_stream_bool_fun_fun$)
(declare-fun holds$ (State_rule_prod_bool_fun$) State_rule_prod_stream_bool_fun$)
(declare-fun rules$ () Rule_stream$)
(declare-fun steps$ () State_rule_prod_stream$)
(declare-fun member$ (State$ State_set$) Bool)
(declare-fun stepsa$ () State_rule_prod_stream$)
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$) Bool)
(declare-fun fun_app$ (State_rule_prod_bool_fun$ State_rule_prod$) Bool)
(declare-fun member$a (Rule$ Rule_set$) Bool)
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$) State_fset$)
(declare-fun fun_app$a (State_rule_prod_stream_bool_fun$ State_rule_prod_stream$) Bool)
(declare-fun fun_app$b (State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$ State_rule_prod_stream_bool_fun$) State_rule_prod_stream_bool_fun$)
(declare-fun fun_app$c (State_rule_prod_stream_state_rule_prod_stream_fun$ State_rule_prod_stream$) State_rule_prod_stream$)
(declare-fun fun_app$d (Rule_stream_state_rule_prod_stream_bool_fun_fun$ Rule_stream$) State_rule_prod_stream_bool_fun$)
(declare-fun fun_app$e (State_fset_bool_fun$ State_fset$) Bool)
(declare-fun fun_app$f (State_state_fset_bool_fun_fun$ State$) State_fset_bool_fun$)
(declare-fun fun_app$g (Rule_state_state_fset_bool_fun_fun_fun$ Rule$) State_state_fset_bool_fun_fun$)
(declare-fun fun_app$h (Rule_state_rule_prod_stream_bool_fun_fun$ Rule$) State_rule_prod_stream_bool_fun$)
(declare-fun saturated$ (Rule_state_state_fset_bool_fun_fun_fun$) Rule_state_rule_prod_stream_bool_fun_fun$)
(assert (! (forall ((?v0 State_rule_prod$)) (! (= (fun_app$ uu$ ?v0) (enabled$ eff$ r$ (fst$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 State_rule_prod_stream$)) (! (= (fun_app$a uub$ ?v0) (=> (fun_app$a (holds$ uu$) ?v0) (or (fun_app$a (holds$ uua$) ?v0) (fun_app$a (nxt$ (holds$ uu$)) ?v0)))) :pattern ((fun_app$a uub$ ?v0)))) :named a1))
(assert (! (forall ((?v0 State_rule_prod$)) (! (= (fun_app$ uua$ ?v0) (= (snd$ ?v0) r$)) :pattern ((fun_app$ uua$ ?v0)))) :named a2))
(assert (! (forall ((?v0 Rule$) (?v1 State_rule_prod$)) (! (= (fun_app$ (uuc$ ?v0) ?v1) (enabled$ eff$ ?v0 (fst$ ?v1))) :pattern ((fun_app$ (uuc$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 Rule$) (?v1 State_rule_prod_stream$)) (! (= (fun_app$a (uue$ ?v0) ?v1) (=> (fun_app$a (holds$ (uuc$ ?v0)) ?v1) (fun_app$a (ev$ (holds$ (uud$ ?v0))) ?v1))) :pattern ((fun_app$a (uue$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$) (?v1 State_rule_prod_stream$)) (! (= (fun_app$a (uuf$ ?v0) ?v1) (=> (fun_app$a ?v0 ?v1) (fun_app$a (nxt$ ?v0) ?v1))) :pattern ((fun_app$a (uuf$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 Rule$) (?v1 State_rule_prod$)) (! (= (fun_app$ (uud$ ?v0) ?v1) (= (snd$ ?v1) ?v0)) :pattern ((fun_app$ (uud$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 State_rule_prod_stream_state_rule_prod_stream_fun$) (?v1 State_rule_prod_stream_bool_fun$) (?v2 State_rule_prod_stream$)) (! (= (fun_app$a (fun_app$b (uug$ ?v0) ?v1) ?v2) (fun_app$a ?v1 (fun_app$c ?v0 ?v2))) :pattern ((fun_app$a (fun_app$b (uug$ ?v0) ?v1) ?v2)))) :named a7))
(assert (! (not (exists ((?v0 State_rule_prod_stream$)) (and (= stepsa$ ?v0) (and (=> (fun_app$a (holds$ uu$) ?v0) (or (fun_app$a (holds$ uua$) ?v0) (fun_app$a (nxt$ (holds$ uu$)) ?v0))) (or (and (fun_app$a (fun_app$d (epath$ eff$) rules$) (stl$ ?v0)) (member$ (fst$ (shd$ (stl$ ?v0))) s$)) (fun_app$a (alw$ uub$) (stl$ ?v0))))))) :named a8))
(assert (! (forall ((?v0 Rule$) (?v1 State$)) (! (= (enabled$ eff$ ?v0 ?v1) (exists ((?v2 State_fset$)) (fun_app$e (fun_app$f (fun_app$g eff$ ?v0) ?v1) ?v2))) :pattern ((enabled$ eff$ ?v0 ?v1)))) :named a9))
(assert (! (and (fun_app$a (fun_app$d (epath$ eff$) rules$) stepsa$) (member$ (fst$ (shd$ stepsa$)) s$)) :named a10))
(assert (! (=> (and (member$ (fst$ (shd$ stepsa$)) s$) (and (enabled$ eff$ r$ (fst$ (shd$ stepsa$))) (not (= (snd$ (shd$ stepsa$)) r$)))) (enabled$ eff$ r$ (fst$ (shd$ (stl$ stepsa$))))) :named a11))
(assert (! (per$ eff$ rules$ s$ r$) :named a12))
(assert (! (and (fun_app$a (fun_app$d (epath$ eff$) rules$) steps$) (member$ (fst$ (shd$ steps$)) s$)) :named a13))
(assert (! (forall ((?v0 Rule$) (?v1 State$)) (=> (enabled$ eff$ ?v0 ?v1) (fun_app$e (fun_app$f (fun_app$g eff$ ?v0) ?v1) (pickEff$ eff$ ?v0 ?v1)))) :named a14))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule$) (?v2 State$)) (! (= (enabled$ ?v0 ?v1 ?v2) (exists ((?v3 State_fset$)) (fun_app$e (fun_app$f (fun_app$g ?v0 ?v1) ?v2) ?v3))) :pattern ((enabled$ ?v0 ?v1 ?v2)))) :named a15))
(assert (! (forall ((?v0 State$)) (=> (member$ ?v0 s$) (exists ((?v1 Rule$)) (and (member$a ?v1 (sset$ rules$)) (exists ((?v2 State_fset$)) (fun_app$e (fun_app$f (fun_app$g eff$ ?v1) ?v0) ?v2)))))) :named a16))
(assert (! (forall ((?v0 Rule$)) (= (fun_app$h (saturated$ eff$) ?v0) (alw$ (uue$ ?v0)))) :named a17))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$) (?v1 State_rule_prod_stream$)) (=> (and (fun_app$a ?v0 ?v1) (fun_app$a (alw$ (uuf$ ?v0)) ?v1)) (fun_app$a (alw$ ?v0) ?v1))) :named a18))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$)) (= (alw$ (alw$ ?v0)) (alw$ ?v0))) :named a19))
(assert (! (forall ((?v0 State_rule_prod_stream_state_rule_prod_stream_fun$) (?v1 State_rule_prod_stream_bool_fun$) (?v2 State_rule_prod_stream$)) (=> (forall ((?v3 State_rule_prod_stream$)) (= (fun_app$c ?v0 (stl$ ?v3)) (stl$ (fun_app$c ?v0 ?v3)))) (= (fun_app$a (alw$ ?v1) (fun_app$c ?v0 ?v2)) (fun_app$a (alw$ (fun_app$b (uug$ ?v0) ?v1)) ?v2)))) :named a20))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$) (?v1 State_rule_prod_stream$)) (! (= (fun_app$a (alw$ ?v0) ?v1) (and (fun_app$a ?v0 ?v1) (fun_app$a (nxt$ (alw$ ?v0)) ?v1))) :pattern ((fun_app$a (alw$ ?v0) ?v1)))) :named a21))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$) (?v1 State_rule_prod_stream$)) (! (= (fun_app$a (nxt$ ?v0) ?v1) (fun_app$a ?v0 (stl$ ?v1))) :pattern ((fun_app$a (nxt$ ?v0) ?v1)))) :named a22))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$) (?v1 State_rule_prod_stream$) (?v2 Bool)) (=> (and (= (fun_app$a (nxt$ ?v0) ?v1) ?v2) (forall ((?v3 State_rule_prod_stream_bool_fun$) (?v4 State_rule_prod_stream$)) (=> (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 (fun_app$a ?v3 (stl$ ?v4))))) false))) false)) :named a23))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$) (?v1 State_rule_prod_stream$)) (! (= (fun_app$a (holds$ ?v0) ?v1) (fun_app$ ?v0 (shd$ ?v1))) :pattern ((fun_app$a (holds$ ?v0) ?v1)))) :named a24))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$) (?v1 State_rule_prod_stream$) (?v2 Bool)) (=> (and (= (fun_app$a (holds$ ?v0) ?v1) ?v2) (forall ((?v3 State_rule_prod_bool_fun$) (?v4 State_rule_prod_stream$)) (=> (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 (fun_app$ ?v3 (shd$ ?v4))))) false))) false)) :named a25))
(check-sat)
;(get-unsat-core)
