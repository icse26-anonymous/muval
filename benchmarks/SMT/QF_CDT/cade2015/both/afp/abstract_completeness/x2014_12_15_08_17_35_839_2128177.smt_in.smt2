; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 441
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Rule$ 0)
(declare-sort State$ 0)
(declare-sort State_fset$ 0)
(declare-sort State_fset_bool_fun$ 0)
(declare-sort State_rule_prod_bool_fun$ 0)
(declare-sort State_state_fset_bool_fun_fun$ 0)
(declare-sort State_rule_prod_stream_bool_fun$ 0)
(declare-sort Rule_state_rule_prod_bool_fun_fun$ 0)
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0)
(declare-sort Rule_state_rule_prod_stream_bool_fun_fun$ 0)
(declare-sort State_rule_prod_bool_fun_state_rule_prod_bool_fun_fun$ 0)
(declare-sort State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$ 0)
(declare-datatypes () ((State_rule_prod$ (pair$ (fst$ State$) (snd$ Rule$)))))
(declare-codatatypes () ((State_rule_prod_stream$ (sCons$ (shd$ State_rule_prod$) (stl$ State_rule_prod_stream$)))))
(declare-fun r$ () Rule$)
(declare-fun ev$ (State_rule_prod_stream_bool_fun$) State_rule_prod_stream_bool_fun$)
(declare-fun uu$ () State_rule_prod_bool_fun$)
(declare-fun alw$ (State_rule_prod_stream_bool_fun$) State_rule_prod_stream_bool_fun$)
(declare-fun eff$ () Rule_state_state_fset_bool_fun_fun_fun$)
(declare-fun uua$ () State_rule_prod_bool_fun$)
(declare-fun uub$ (State_rule_prod_bool_fun$) State_rule_prod_bool_fun_state_rule_prod_bool_fun_fun$)
(declare-fun uuc$ (Rule$) State_rule_prod_bool_fun$)
(declare-fun uud$ (Rule$) State_rule_prod_bool_fun$)
(declare-fun uue$ (Rule$) State_rule_prod_stream_bool_fun$)
(declare-fun uuf$ (State_rule_prod_stream_bool_fun$) State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$)
(declare-fun uug$ () State_rule_prod_stream_bool_fun$)
(declare-fun uuh$ (Rule_state_state_fset_bool_fun_fun_fun$) Rule_state_rule_prod_bool_fun_fun$)
(declare-fun uui$ (Rule_state_state_fset_bool_fun_fun_fun$) Rule_state_rule_prod_stream_bool_fun_fun$)
(declare-fun uuj$ (State_rule_prod_stream_bool_fun$) State_rule_prod_stream_bool_fun$)
(declare-fun uuk$ (State_rule_prod_stream_bool_fun$) State_rule_prod_stream_bool_fun$)
(declare-fun uul$ (State_rule_prod_stream_bool_fun$) State_rule_prod_stream_bool_fun$)
(declare-fun holds$ (State_rule_prod_bool_fun$) State_rule_prod_stream_bool_fun$)
(declare-fun stepsa$ () State_rule_prod_stream$)
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$) Bool)
(declare-fun fun_app$ (State_rule_prod_bool_fun$ State_rule_prod$) Bool)
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$) State_fset$)
(declare-fun fun_app$a (State_rule_prod_stream_bool_fun$ State_rule_prod_stream$) Bool)
(declare-fun fun_app$b (Rule_state_rule_prod_bool_fun_fun$ Rule$) State_rule_prod_bool_fun$)
(declare-fun fun_app$c (Rule_state_rule_prod_stream_bool_fun_fun$ Rule$) State_rule_prod_stream_bool_fun$)
(declare-fun fun_app$d (State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$ State_rule_prod_stream_bool_fun$) State_rule_prod_stream_bool_fun$)
(declare-fun fun_app$e (State_rule_prod_bool_fun_state_rule_prod_bool_fun_fun$ State_rule_prod_bool_fun$) State_rule_prod_bool_fun$)
(declare-fun fun_app$f (State_fset_bool_fun$ State_fset$) Bool)
(declare-fun fun_app$g (State_state_fset_bool_fun_fun$ State$) State_fset_bool_fun$)
(declare-fun fun_app$h (Rule_state_state_fset_bool_fun_fun_fun$ Rule$) State_state_fset_bool_fun_fun$)
(declare-fun saturated$ (Rule_state_state_fset_bool_fun_fun_fun$) Rule_state_rule_prod_stream_bool_fun_fun$)
(assert (! (forall ((?v0 State_rule_prod$)) (! (= (fun_app$ uua$ ?v0) (enabled$ eff$ r$ (fst$ ?v0))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 State_rule_prod$)) (! (= (fun_app$ uu$ ?v0) (= (snd$ ?v0) r$)) :pattern ((fun_app$ uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 Rule$) (?v1 State_rule_prod$)) (! (= (fun_app$ (uuc$ ?v0) ?v1) (enabled$ eff$ ?v0 (fst$ ?v1))) :pattern ((fun_app$ (uuc$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 Rule$) (?v1 State_rule_prod_stream$)) (! (= (fun_app$a (uue$ ?v0) ?v1) (=> (fun_app$a (holds$ (uuc$ ?v0)) ?v1) (fun_app$a (ev$ (holds$ (uud$ ?v0))) ?v1))) :pattern ((fun_app$a (uue$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 Rule$) (?v1 State_rule_prod$)) (! (= (fun_app$ (uud$ ?v0) ?v1) (= (snd$ ?v1) ?v0)) :pattern ((fun_app$ (uud$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$) (?v1 State_rule_prod_stream$)) (! (= (fun_app$a (uuk$ ?v0) ?v1) (not (fun_app$a (alw$ (uuj$ ?v0)) ?v1))) :pattern ((fun_app$a (uuk$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$) (?v1 State_rule_prod_stream$)) (! (= (fun_app$a (uul$ ?v0) ?v1) (not (fun_app$a (ev$ (uuj$ ?v0)) ?v1))) :pattern ((fun_app$a (uul$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$) (?v1 State_rule_prod_stream$)) (! (= (fun_app$a (uuj$ ?v0) ?v1) (not (fun_app$a ?v0 ?v1))) :pattern ((fun_app$a (uuj$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule$) (?v2 State_rule_prod$)) (! (= (fun_app$ (fun_app$b (uuh$ ?v0) ?v1) ?v2) (enabled$ ?v0 ?v1 (fst$ ?v2))) :pattern ((fun_app$ (fun_app$b (uuh$ ?v0) ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule$) (?v2 State_rule_prod_stream$)) (! (= (fun_app$a (fun_app$c (uui$ ?v0) ?v1) ?v2) (=> (fun_app$a (holds$ (fun_app$b (uuh$ ?v0) ?v1)) ?v2) (fun_app$a (ev$ (holds$ (uud$ ?v1))) ?v2))) :pattern ((fun_app$a (fun_app$c (uui$ ?v0) ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$) (?v1 State_rule_prod_stream_bool_fun$) (?v2 State_rule_prod_stream$)) (! (= (fun_app$a (fun_app$d (uuf$ ?v0) ?v1) ?v2) (or (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2))) :pattern ((fun_app$a (fun_app$d (uuf$ ?v0) ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$) (?v1 State_rule_prod_bool_fun$) (?v2 State_rule_prod$)) (! (= (fun_app$ (fun_app$e (uub$ ?v0) ?v1) ?v2) (and (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$e (uub$ ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 State_rule_prod_stream$)) (! (= (fun_app$a uug$ ?v0) false) :pattern ((fun_app$a uug$ ?v0)))) :named a12))
(assert (! (not (fun_app$a (ev$ (holds$ uu$)) stepsa$)) :named a13))
(assert (! (or (fun_app$a (alw$ (holds$ uua$)) stepsa$) (fun_app$a (ev$ (holds$ uu$)) stepsa$)) :named a14))
(assert (! (fun_app$a (holds$ uua$) stepsa$) :named a15))
(assert (! (forall ((?v0 Rule$) (?v1 State$)) (! (= (enabled$ eff$ ?v0 ?v1) (exists ((?v2 State_fset$)) (fun_app$f (fun_app$g (fun_app$h eff$ ?v0) ?v1) ?v2))) :pattern ((enabled$ eff$ ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$)) (= (ev$ (ev$ ?v0)) (ev$ ?v0))) :named a17))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$) (?v1 State_rule_prod_stream$) (?v2 State_rule_prod_bool_fun$)) (= (and (fun_app$a (holds$ ?v0) ?v1) (fun_app$a (holds$ ?v2) ?v1)) (fun_app$a (holds$ (fun_app$e (uub$ ?v0) ?v2)) ?v1))) :named a18))
(assert (! (forall ((?v0 Rule$)) (= (fun_app$c (saturated$ eff$) ?v0) (alw$ (uue$ ?v0)))) :named a19))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$) (?v1 State_rule_prod_stream_bool_fun$) (?v2 State_rule_prod_stream$)) (= (fun_app$a (ev$ (fun_app$d (uuf$ ?v0) ?v1)) ?v2) (or (fun_app$a (ev$ ?v0) ?v2) (fun_app$a (ev$ ?v1) ?v2)))) :named a20))
(assert (! (forall ((?v0 State_rule_prod_stream$)) (= (fun_app$a (ev$ uug$) ?v0) false)) :named a21))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule$)) (= (fun_app$c (saturated$ ?v0) ?v1) (alw$ (fun_app$c (uui$ ?v0) ?v1)))) :named a22))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$) (?v1 State_rule_prod_stream$) (?v2 State_rule_prod_bool_fun$)) (=> (and (fun_app$a (holds$ ?v0) ?v1) (forall ((?v3 State_rule_prod$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ ?v2 ?v3)))) (fun_app$a (holds$ ?v2) ?v1))) :named a23))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$) (?v1 State_rule_prod_stream$) (?v2 State_rule_prod_stream_bool_fun$)) (=> (and (fun_app$a (ev$ ?v0) ?v1) (forall ((?v3 State_rule_prod_stream$)) (=> (fun_app$a ?v0 ?v3) (fun_app$a ?v2 ?v3)))) (fun_app$a (ev$ ?v2) ?v1))) :named a24))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$) (?v1 State_rule_prod_stream$)) (=> (fun_app$a ?v0 ?v1) (fun_app$a (ev$ ?v0) ?v1))) :named a25))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$)) (= (uuk$ ?v0) (ev$ ?v0))) :named a26))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$)) (= (uul$ ?v0) (alw$ ?v0))) :named a27))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$)) (= (alw$ (alw$ ?v0)) (alw$ ?v0))) :named a28))
(assert (! (forall ((?v0 Rule$) (?v1 State$)) (=> (enabled$ eff$ ?v0 ?v1) (fun_app$f (fun_app$g (fun_app$h eff$ ?v0) ?v1) (pickEff$ eff$ ?v0 ?v1)))) :named a29))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$) (?v1 State_rule_prod_stream$)) (=> (forall ((?v2 State_rule_prod_stream$)) (fun_app$a ?v0 ?v2)) (fun_app$a (alw$ ?v0) ?v1))) :named a30))
(check-sat)
;(get-unsat-core)
