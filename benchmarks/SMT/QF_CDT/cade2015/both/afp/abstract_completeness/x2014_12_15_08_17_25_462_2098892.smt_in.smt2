; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 584
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Rule$ 0)
(declare-sort State$ 0)
(declare-sort Rule_set$ 0)
(declare-sort State_set$ 0)
(declare-sort State_fset$ 0)
(declare-sort State_fset_bool_fun$ 0)
(declare-sort State_rule_prod_set$ 0)
(declare-sort State_state_fset_bool_fun_fun$ 0)
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0)
(declare-datatypes () ((State_rule_prod$ (pair$ (fst$ State$) (snd$ Rule$)))))
(declare-codatatypes () ((State_rule_prod_stream$ (sCons$ (shd$ State_rule_prod$) (stl$ State_rule_prod_stream$)))
  (Rule_stream$ (sCons$a (shd$a Rule$) (stl$a Rule_stream$)))
  (State_stream$ (sCons$b (shd$b State$) (stl$b State_stream$)))))
(declare-fun r$ () Rule$)
(declare-fun s$ () State_set$)
(declare-fun bot$ () Rule_set$)
(declare-fun eff$ () Rule_state_state_fset_bool_fun_fun_fun$)
(declare-fun per$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_set$ Rule$) Bool)
(declare-fun sset$ (Rule_stream$) Rule_set$)
(declare-fun epath$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_stream$) Bool)
(declare-fun fenum$ (Rule_stream$) Rule_stream$)
(declare-fun rules$ () Rule_stream$)
(declare-fun sset$a (State_stream$) State_set$)
(declare-fun sset$b (State_rule_prod_stream$) State_rule_prod_set$)
(declare-fun steps$ () State_rule_prod_stream$)
(declare-fun fenum$a (State_rule_prod_stream$) State_rule_prod_stream$)
(declare-fun fenum$b (State_stream$) State_stream$)
(declare-fun member$ (Rule$ Rule_set$) Bool)
(declare-fun stepsa$ () State_rule_prod_stream$)
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$) Bool)
(declare-fun fmember$ (State$ State_fset$) Bool)
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$) Bool)
(declare-fun member$a (State$ State_set$) Bool)
(declare-fun member$b (State_rule_prod$ State_rule_prod_set$) Bool)
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$) State_fset$)
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$) State_fset_bool_fun$)
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$) State_state_fset_bool_fun_fun$)
(declare-fun countable$ (Rule_set$) Bool)
(declare-fun saturated$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_stream$) Bool)
(declare-fun saturated$a (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State_rule_prod_stream$) Bool)
(assert (! (not (member$ (snd$ (shd$ stepsa$)) (sset$ rules$))) :named a0))
(assert (! (member$a (fst$ (shd$ stepsa$)) s$) :named a1))
(assert (! (not (= (snd$ (shd$ stepsa$)) r$)) :named a2))
(assert (! (= (sset$ (fenum$ rules$)) (sset$ rules$)) :named a3))
(assert (! (forall ((?v0 State$)) (=> (member$a ?v0 s$) (exists ((?v1 Rule$)) (and (member$ ?v1 (sset$ rules$)) (exists ((?v2 State_fset$)) (fun_app$ (fun_app$a (fun_app$b eff$ ?v1) ?v0) ?v2)))))) :named a4))
(assert (! (not (= (sset$ rules$) bot$)) :named a5))
(assert (! (and (epath$ eff$ rules$ steps$) (member$a (fst$ (shd$ steps$)) s$)) :named a6))
(assert (! (forall ((?v0 State_stream$)) (member$a (shd$b ?v0) (sset$a ?v0))) :named a7))
(assert (! (forall ((?v0 State_rule_prod_stream$)) (member$b (shd$ ?v0) (sset$b ?v0))) :named a8))
(assert (! (forall ((?v0 Rule_stream$)) (member$ (shd$a ?v0) (sset$ ?v0))) :named a9))
(assert (! (countable$ (sset$ rules$)) :named a10))
(assert (! (forall ((?v0 State_rule_prod_stream$)) (= (saturated$ eff$ rules$ ?v0) (forall ((?v1 Rule$)) (=> (member$ ?v1 (sset$ rules$)) (saturated$a eff$ ?v1 ?v0))))) :named a11))
(assert (! (per$ eff$ rules$ s$ r$) :named a12))
(assert (! (enabled$ eff$ r$ (fst$ (shd$ stepsa$))) :named a13))
(assert (! (forall ((?v0 State_rule_prod_stream$)) (= (sset$b (fenum$a ?v0)) (sset$b ?v0))) :named a14))
(assert (! (forall ((?v0 State_stream$)) (= (sset$a (fenum$b ?v0)) (sset$a ?v0))) :named a15))
(assert (! (forall ((?v0 Rule_stream$)) (= (sset$ (fenum$ ?v0)) (sset$ ?v0))) :named a16))
(assert (! (and (epath$ eff$ rules$ stepsa$) (member$a (fst$ (shd$ stepsa$)) s$)) :named a17))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State_rule_prod_stream$)) (= (saturated$ ?v0 ?v1 ?v2) (forall ((?v3 Rule$)) (=> (member$ ?v3 (sset$ ?v1)) (saturated$a ?v0 ?v3 ?v2))))) :named a18))
(assert (! (forall ((?v0 State$) (?v1 Rule$) (?v2 State_fset$) (?v3 State$)) (=> (and (member$a ?v0 s$) (and (member$ ?v1 (sset$ rules$)) (and (fun_app$ (fun_app$a (fun_app$b eff$ ?v1) ?v0) ?v2) (fmember$ ?v3 ?v2)))) (member$a ?v3 s$))) :named a19))
(assert (! (forall ((?v0 Rule$) (?v1 State$)) (! (= (enabled$ eff$ ?v0 ?v1) (exists ((?v2 State_fset$)) (fun_app$ (fun_app$a (fun_app$b eff$ ?v0) ?v1) ?v2))) :pattern ((enabled$ eff$ ?v0 ?v1)))) :named a20))
(assert (! (forall ((?v0 Rule$) (?v1 State$)) (=> (enabled$ eff$ ?v0 ?v1) (fun_app$ (fun_app$a (fun_app$b eff$ ?v0) ?v1) (pickEff$ eff$ ?v0 ?v1)))) :named a21))
(check-sat)
;(get-unsat-core)
