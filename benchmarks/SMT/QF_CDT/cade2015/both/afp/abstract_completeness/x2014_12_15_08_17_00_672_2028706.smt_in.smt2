; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 652
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Rule$ 0)
(declare-sort State$ 0)
(declare-sort State_set$ 0)
(declare-sort State_fset$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort State_fset_bool_fun$ 0)
(declare-sort State_state_fset_bool_fun_fun$ 0)
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0)
(declare-codatatypes () ((Rule_stream$ (sCons$ (shd$ Rule$) (stl$ Rule_stream$)))))
(declare-fun r$ () Rule$)
(declare-fun s$ () State$)
(declare-fun rs$ () Rule_stream$)
(declare-fun s$a () State_set$)
(declare-fun eff$ () Rule_state_state_fset_bool_fun_fun_fun$)
(declare-fun pos$ (Rule_stream$ Rule$) Nat$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$) Rule_stream$)
(declare-fun minus$ (Nat$ Nat$) Nat$)
(declare-fun member$ (State$ State_set$) Bool)
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$) Bool)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun minWait$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$) Nat$)
(declare-fun fun_app$a (State_fset_bool_fun$ State_fset$) Bool)
(declare-fun fun_app$b (State_state_fset_bool_fun_fun$ State$) State_fset_bool_fun$)
(declare-fun fun_app$c (Rule_state_state_fset_bool_fun_fun_fun$ Rule$) State_state_fset_bool_fun_fun$)
(assert (! (not (= (pos$ (stl$ (trim$ eff$ rs$ s$)) r$) (minus$ (pos$ rs$ r$) (suc$ (minWait$ eff$ rs$ s$))))) :named a0))
(assert (! (member$ s$ s$a) :named a1))
(assert (! (fun_app$ (less$ (minWait$ eff$ rs$ s$)) (pos$ rs$ r$)) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$ (minus$ (suc$ ?v0) ?v1) (suc$ ?v2)) (minus$ (minus$ ?v0 ?v1) ?v2))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (minus$ (suc$ ?v0) (suc$ ?v1)) (minus$ ?v0 ?v1)) :pattern ((minus$ (suc$ ?v0) (suc$ ?v1))))) :named a4))
(assert (! (forall ((?v0 Rule$) (?v1 State$)) (! (= (enabled$ eff$ ?v0 ?v1) (exists ((?v2 State_fset$)) (fun_app$a (fun_app$b (fun_app$c eff$ ?v0) ?v1) ?v2))) :pattern ((enabled$ eff$ ?v0 ?v1)))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 Nat$)) (=> (fun_app$ ?v0 (suc$ ?v3)) (fun_app$ ?v0 ?v3)))) (fun_app$ ?v0 (minus$ ?v1 ?v2)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$ (minus$ ?v0 ?v1) ?v2) (minus$ (minus$ ?v0 ?v2) ?v1))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$ (minus$ ?v0 ?v1) ?v2) (minus$ (minus$ ?v0 ?v2) ?v1))) :named a12))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (less$ ?v0) (suc$ ?v0))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ (suc$ ?v0)) (suc$ ?v1)))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (less$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$ (less$ ?v0) ?v1)) :pattern ((fun_app$ (less$ (suc$ ?v0)) (suc$ ?v1))))) :named a15))
(check-sat)
;(get-unsat-core)
