; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 238
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Rule$ 0)
(declare-sort State$ 0)
(declare-sort Rule_set$ 0)
(declare-sort Rule_tree$ 0)
(declare-sort State_fset$ 0)
(declare-sort State_fset_bool_fun$ 0)
(declare-sort State_rule_prod_set$ 0)
(declare-sort Rule_stream_bool_fun$ 0)
(declare-sort State_rule_prod_tree$ 0)
(declare-sort Rule_rule_stream_bool_fun_fun$ 0)
(declare-sort State_state_fset_bool_fun_fun$ 0)
(declare-sort State_state_rule_prod_prod_set$ 0)
(declare-sort State_rule_prod_stream_bool_fun$ 0)
(declare-sort State_state_rule_prod_prod_tree$ 0)
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0)
(declare-sort Rule_state_rule_prod_stream_bool_fun_fun$ 0)
(declare-sort State_state_rule_prod_prod_stream_bool_fun$ 0)
(declare-sort Rule_stream_state_rule_prod_stream_bool_fun_fun$ 0)
(declare-sort State_rule_prod_state_state_fset_bool_fun_fun_fun$ 0)
(declare-sort State_rule_prod_state_rule_prod_stream_bool_fun_fun$ 0)
(declare-sort State_rule_prod_stream_state_state_rule_prod_prod_stream_bool_fun_fun$ 0)
(declare-sort State_state_rule_prod_prod_state_state_rule_prod_prod_stream_bool_fun_fun$ 0)
(declare-datatypes () ((State_rule_prod$ (pair$ (fst$ State$) (snd$ Rule$)))))
(declare-codatatypes () ((State_rule_prod_stream$ (sCons$ (shd$ State_rule_prod$) (stl$ State_rule_prod_stream$)))
  (Rule_stream$ (sCons$a (shd$a Rule$) (stl$a Rule_stream$)))))
(declare-datatypes () ((State_state_rule_prod_prod$ (pair$a (fst$a State$) (snd$a State_rule_prod$)))))
(declare-codatatypes () ((State_state_rule_prod_prod_stream$ (sCons$b (shd$b State_state_rule_prod_prod$) (stl$b State_state_rule_prod_prod_stream$)))))
(declare-fun t$ () State_rule_prod_tree$)
(declare-fun ta$ () State_rule_prod_tree$)
(declare-fun wf$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_tree$) Bool)
(declare-fun bot$ () Rule_set$)
(declare-fun eff$ () Rule_state_state_fset_bool_fun_fun_fun$)
(declare-fun root$ (State_state_rule_prod_prod_tree$) State_state_rule_prod_prod$)
(declare-fun sset$ (Rule_stream$) Rule_set$)
(declare-fun epath$ (Rule_state_state_fset_bool_fun_fun_fun$) Rule_stream_state_rule_prod_stream_bool_fun_fun$)
(declare-fun ipath$ (State_rule_prod_tree$) State_rule_prod_stream_bool_fun$)
(declare-fun root$a (Rule_tree$) Rule$)
(declare-fun root$b (State_rule_prod_tree$) State_rule_prod$)
(declare-fun rules$ () Rule_stream$)
(declare-fun sset$a (State_rule_prod_stream$) State_rule_prod_set$)
(declare-fun sset$b (State_state_rule_prod_prod_stream$) State_state_rule_prod_prod_set$)
(declare-fun steps$ () State_rule_prod_stream$)
(declare-fun epath$a (State_rule_prod_state_state_fset_bool_fun_fun_fun$) State_rule_prod_stream_state_state_rule_prod_prod_stream_bool_fun_fun$)
(declare-fun ipath$a (State_state_rule_prod_prod_tree$) State_state_rule_prod_prod_stream_bool_fun$)
(declare-fun ipath$b (Rule_tree$ Rule_stream$) Bool)
(declare-fun member$ (Rule$ Rule_set$) Bool)
(declare-fun stepsa$ () State_rule_prod_stream$)
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$) Bool)
(declare-fun fmember$ (State$ State_fset$) Bool)
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$) Bool)
(declare-fun member$a (State_rule_prod$ State_rule_prod_set$) Bool)
(declare-fun member$b (State_state_rule_prod_prod$ State_state_rule_prod_prod_set$) Bool)
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$) State_fset_bool_fun$)
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$) State_state_fset_bool_fun_fun$)
(declare-fun fun_app$c (State_rule_prod_stream_bool_fun$ State_rule_prod_stream$) Bool)
(declare-fun fun_app$d (Rule_stream_state_rule_prod_stream_bool_fun_fun$ Rule_stream$) State_rule_prod_stream_bool_fun$)
(declare-fun fun_app$e (State_state_rule_prod_prod_stream_bool_fun$ State_state_rule_prod_prod_stream$) Bool)
(declare-fun fun_app$f (State_rule_prod_stream_state_state_rule_prod_prod_stream_bool_fun_fun$ State_rule_prod_stream$) State_state_rule_prod_prod_stream_bool_fun$)
(declare-fun fun_app$g (State_rule_prod_state_state_fset_bool_fun_fun_fun$ State_rule_prod$) State_state_fset_bool_fun_fun$)
(declare-fun fun_app$h (Rule_state_rule_prod_stream_bool_fun_fun$ Rule$) State_rule_prod_stream_bool_fun$)
(declare-fun fun_app$i (State_state_rule_prod_prod_state_state_rule_prod_prod_stream_bool_fun_fun$ State_state_rule_prod_prod$) State_state_rule_prod_prod_stream_bool_fun$)
(declare-fun fun_app$j (State_rule_prod_state_rule_prod_stream_bool_fun_fun$ State_rule_prod$) State_rule_prod_stream_bool_fun$)
(declare-fun fun_app$k (Rule_stream_bool_fun$ Rule_stream$) Bool)
(declare-fun fun_app$l (Rule_rule_stream_bool_fun_fun$ Rule$) Rule_stream_bool_fun$)
(declare-fun saturated$ (Rule_state_state_fset_bool_fun_fun_fun$) Rule_stream_state_rule_prod_stream_bool_fun_fun$)
(declare-fun saturated$a (Rule_state_state_fset_bool_fun_fun_fun$) Rule_state_rule_prod_stream_bool_fun_fun$)
(assert (! (not (exists ((?v0 State_rule_prod_stream$) (?v1 State_fset$)) (and (= stepsa$ ?v0) (and (member$ (snd$ (shd$ ?v0)) (sset$ rules$)) (and (fmember$ (fst$ (shd$ (stl$ ?v0))) ?v1) (and (fun_app$ (fun_app$a (fun_app$b eff$ (snd$ (shd$ ?v0))) (fst$ (shd$ ?v0))) ?v1) (or (exists ((?v2 State_rule_prod_tree$) (?v3 State_rule_prod_stream$)) (and (= (stl$ ?v0) ?v3) (and (wf$ eff$ rules$ ?v2) (fun_app$c (ipath$ ?v2) ?v3)))) (fun_app$c (fun_app$d (epath$ eff$) rules$) (stl$ ?v0))))))))) :named a0))
(assert (! (wf$ eff$ rules$ ta$) :named a1))
(assert (! (fun_app$c (ipath$ ta$) stepsa$) :named a2))
(assert (! (fun_app$c (ipath$ t$) steps$) :named a3))
(assert (! (wf$ eff$ rules$ t$) :named a4))
(assert (! (forall ((?v0 State_rule_prod_stream$)) (= (fun_app$c (fun_app$d (epath$ eff$) rules$) ?v0) (exists ((?v1 State_rule_prod_stream$) (?v2 State_fset$)) (and (= ?v0 ?v1) (and (member$ (snd$ (shd$ ?v1)) (sset$ rules$)) (and (fmember$ (fst$ (shd$ (stl$ ?v1))) ?v2) (and (fun_app$ (fun_app$a (fun_app$b eff$ (snd$ (shd$ ?v1))) (fst$ (shd$ ?v1))) ?v2) (fun_app$c (fun_app$d (epath$ eff$) rules$) (stl$ ?v1))))))))) :named a5))
(assert (! (forall ((?v0 State_rule_prod_stream$)) (=> (and (fun_app$c (fun_app$d (epath$ eff$) rules$) ?v0) (forall ((?v1 State_rule_prod_stream$) (?v2 State_fset$)) (=> (and (= ?v0 ?v1) (and (member$ (snd$ (shd$ ?v1)) (sset$ rules$)) (and (fmember$ (fst$ (shd$ (stl$ ?v1))) ?v2) (and (fun_app$ (fun_app$a (fun_app$b eff$ (snd$ (shd$ ?v1))) (fst$ (shd$ ?v1))) ?v2) (fun_app$c (fun_app$d (epath$ eff$) rules$) (stl$ ?v1)))))) false))) false)) :named a6))
(assert (! (forall ((?v0 State_rule_prod_stream$) (?v1 State_fset$)) (=> (and (member$ (snd$ (shd$ ?v0)) (sset$ rules$)) (and (fmember$ (fst$ (shd$ (stl$ ?v0))) ?v1) (and (fun_app$ (fun_app$a (fun_app$b eff$ (snd$ (shd$ ?v0))) (fst$ (shd$ ?v0))) ?v1) (fun_app$c (fun_app$d (epath$ eff$) rules$) (stl$ ?v0))))) (fun_app$c (fun_app$d (epath$ eff$) rules$) ?v0))) :named a7))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$) (?v1 State_rule_prod_stream$)) (=> (and (fun_app$c ?v0 ?v1) (forall ((?v2 State_rule_prod_stream$)) (=> (fun_app$c ?v0 ?v2) (exists ((?v3 State_rule_prod_stream$) (?v4 State_fset$)) (and (= ?v2 ?v3) (and (member$ (snd$ (shd$ ?v3)) (sset$ rules$)) (and (fmember$ (fst$ (shd$ (stl$ ?v3))) ?v4) (and (fun_app$ (fun_app$a (fun_app$b eff$ (snd$ (shd$ ?v3))) (fst$ (shd$ ?v3))) ?v4) (or (fun_app$c ?v0 (stl$ ?v3)) (fun_app$c (fun_app$d (epath$ eff$) rules$) (stl$ ?v3))))))))))) (fun_app$c (fun_app$d (epath$ eff$) rules$) ?v1))) :named a8))
(assert (! (forall ((?v0 Rule$) (?v1 State$)) (! (= (enabled$ eff$ ?v0 ?v1) (exists ((?v2 State_fset$)) (fun_app$ (fun_app$a (fun_app$b eff$ ?v0) ?v1) ?v2))) :pattern ((enabled$ eff$ ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 State_rule_prod_state_state_fset_bool_fun_fun_fun$) (?v1 State_rule_prod_stream$) (?v2 State_state_rule_prod_prod_stream$)) (= (fun_app$e (fun_app$f (epath$a ?v0) ?v1) ?v2) (exists ((?v3 State_state_rule_prod_prod_stream$) (?v4 State_fset$)) (and (= ?v2 ?v3) (and (member$a (snd$a (shd$b ?v3)) (sset$a ?v1)) (and (fmember$ (fst$a (shd$b (stl$b ?v3))) ?v4) (and (fun_app$ (fun_app$a (fun_app$g ?v0 (snd$a (shd$b ?v3))) (fst$a (shd$b ?v3))) ?v4) (fun_app$e (fun_app$f (epath$a ?v0) ?v1) (stl$b ?v3))))))))) :named a10))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State_rule_prod_stream$)) (= (fun_app$c (fun_app$d (epath$ ?v0) ?v1) ?v2) (exists ((?v3 State_rule_prod_stream$) (?v4 State_fset$)) (and (= ?v2 ?v3) (and (member$ (snd$ (shd$ ?v3)) (sset$ ?v1)) (and (fmember$ (fst$ (shd$ (stl$ ?v3))) ?v4) (and (fun_app$ (fun_app$a (fun_app$b ?v0 (snd$ (shd$ ?v3))) (fst$ (shd$ ?v3))) ?v4) (fun_app$c (fun_app$d (epath$ ?v0) ?v1) (stl$ ?v3))))))))) :named a11))
(assert (! (forall ((?v0 State_rule_prod_state_state_fset_bool_fun_fun_fun$) (?v1 State_rule_prod_stream$) (?v2 State_state_rule_prod_prod_stream$)) (=> (and (fun_app$e (fun_app$f (epath$a ?v0) ?v1) ?v2) (forall ((?v3 State_state_rule_prod_prod_stream$) (?v4 State_fset$)) (=> (and (= ?v2 ?v3) (and (member$a (snd$a (shd$b ?v3)) (sset$a ?v1)) (and (fmember$ (fst$a (shd$b (stl$b ?v3))) ?v4) (and (fun_app$ (fun_app$a (fun_app$g ?v0 (snd$a (shd$b ?v3))) (fst$a (shd$b ?v3))) ?v4) (fun_app$e (fun_app$f (epath$a ?v0) ?v1) (stl$b ?v3)))))) false))) false)) :named a12))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$) (?v1 Rule_stream$) (?v2 State_rule_prod_stream$)) (=> (and (fun_app$c (fun_app$d (epath$ ?v0) ?v1) ?v2) (forall ((?v3 State_rule_prod_stream$) (?v4 State_fset$)) (=> (and (= ?v2 ?v3) (and (member$ (snd$ (shd$ ?v3)) (sset$ ?v1)) (and (fmember$ (fst$ (shd$ (stl$ ?v3))) ?v4) (and (fun_app$ (fun_app$a (fun_app$b ?v0 (snd$ (shd$ ?v3))) (fst$ (shd$ ?v3))) ?v4) (fun_app$c (fun_app$d (epath$ ?v0) ?v1) (stl$ ?v3)))))) false))) false)) :named a13))
(assert (! (forall ((?v0 State_state_rule_prod_prod_stream$) (?v1 State_rule_prod_stream$) (?v2 State_fset$) (?v3 State_rule_prod_state_state_fset_bool_fun_fun_fun$)) (=> (and (member$a (snd$a (shd$b ?v0)) (sset$a ?v1)) (and (fmember$ (fst$a (shd$b (stl$b ?v0))) ?v2) (and (fun_app$ (fun_app$a (fun_app$g ?v3 (snd$a (shd$b ?v0))) (fst$a (shd$b ?v0))) ?v2) (fun_app$e (fun_app$f (epath$a ?v3) ?v1) (stl$b ?v0))))) (fun_app$e (fun_app$f (epath$a ?v3) ?v1) ?v0))) :named a14))
(assert (! (forall ((?v0 State_rule_prod_stream$) (?v1 Rule_stream$) (?v2 State_fset$) (?v3 Rule_state_state_fset_bool_fun_fun_fun$)) (=> (and (member$ (snd$ (shd$ ?v0)) (sset$ ?v1)) (and (fmember$ (fst$ (shd$ (stl$ ?v0))) ?v2) (and (fun_app$ (fun_app$a (fun_app$b ?v3 (snd$ (shd$ ?v0))) (fst$ (shd$ ?v0))) ?v2) (fun_app$c (fun_app$d (epath$ ?v3) ?v1) (stl$ ?v0))))) (fun_app$c (fun_app$d (epath$ ?v3) ?v1) ?v0))) :named a15))
(assert (! (forall ((?v0 State_state_rule_prod_prod_stream_bool_fun$) (?v1 State_state_rule_prod_prod_stream$) (?v2 State_rule_prod_stream$) (?v3 State_rule_prod_state_state_fset_bool_fun_fun_fun$)) (=> (and (fun_app$e ?v0 ?v1) (forall ((?v4 State_state_rule_prod_prod_stream$)) (=> (fun_app$e ?v0 ?v4) (exists ((?v5 State_state_rule_prod_prod_stream$) (?v6 State_fset$)) (and (= ?v4 ?v5) (and (member$a (snd$a (shd$b ?v5)) (sset$a ?v2)) (and (fmember$ (fst$a (shd$b (stl$b ?v5))) ?v6) (and (fun_app$ (fun_app$a (fun_app$g ?v3 (snd$a (shd$b ?v5))) (fst$a (shd$b ?v5))) ?v6) (or (fun_app$e ?v0 (stl$b ?v5)) (fun_app$e (fun_app$f (epath$a ?v3) ?v2) (stl$b ?v5))))))))))) (fun_app$e (fun_app$f (epath$a ?v3) ?v2) ?v1))) :named a16))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$) (?v1 State_rule_prod_stream$) (?v2 Rule_stream$) (?v3 Rule_state_state_fset_bool_fun_fun_fun$)) (=> (and (fun_app$c ?v0 ?v1) (forall ((?v4 State_rule_prod_stream$)) (=> (fun_app$c ?v0 ?v4) (exists ((?v5 State_rule_prod_stream$) (?v6 State_fset$)) (and (= ?v4 ?v5) (and (member$ (snd$ (shd$ ?v5)) (sset$ ?v2)) (and (fmember$ (fst$ (shd$ (stl$ ?v5))) ?v6) (and (fun_app$ (fun_app$a (fun_app$b ?v3 (snd$ (shd$ ?v5))) (fst$ (shd$ ?v5))) ?v6) (or (fun_app$c ?v0 (stl$ ?v5)) (fun_app$c (fun_app$d (epath$ ?v3) ?v2) (stl$ ?v5))))))))))) (fun_app$c (fun_app$d (epath$ ?v3) ?v2) ?v1))) :named a17))
(assert (! (forall ((?v0 State_rule_prod_stream$)) (= (fun_app$c (fun_app$d (saturated$ eff$) rules$) ?v0) (forall ((?v1 Rule$)) (=> (member$ ?v1 (sset$ rules$)) (fun_app$c (fun_app$h (saturated$a eff$) ?v1) ?v0))))) :named a18))
(assert (! (forall ((?v0 State_state_rule_prod_prod_tree$) (?v1 State_state_rule_prod_prod_stream$)) (=> (fun_app$e (ipath$a ?v0) ?v1) (= (root$ ?v0) (shd$b ?v1)))) :named a19))
(assert (! (forall ((?v0 Rule_tree$) (?v1 Rule_stream$)) (=> (ipath$b ?v0 ?v1) (= (root$a ?v0) (shd$a ?v1)))) :named a20))
(assert (! (forall ((?v0 State_rule_prod_tree$) (?v1 State_rule_prod_stream$)) (=> (fun_app$c (ipath$ ?v0) ?v1) (= (root$b ?v0) (shd$ ?v1)))) :named a21))
(assert (! (forall ((?v0 State_state_rule_prod_prod$) (?v1 State_state_rule_prod_prod_stream$) (?v2 State_state_rule_prod_prod_state_state_rule_prod_prod_stream_bool_fun_fun$)) (=> (and (member$b ?v0 (sset$b ?v1)) (and (forall ((?v3 State_state_rule_prod_prod_stream$)) (fun_app$e (fun_app$i ?v2 (shd$b ?v3)) ?v3)) (forall ((?v3 State_state_rule_prod_prod_stream$) (?v4 State_state_rule_prod_prod$)) (=> (and (member$b ?v4 (sset$b (stl$b ?v3))) (fun_app$e (fun_app$i ?v2 ?v4) (stl$b ?v3))) (fun_app$e (fun_app$i ?v2 ?v4) ?v3))))) (fun_app$e (fun_app$i ?v2 ?v0) ?v1))) :named a22))
(assert (! (forall ((?v0 State_rule_prod$) (?v1 State_rule_prod_stream$) (?v2 State_rule_prod_state_rule_prod_stream_bool_fun_fun$)) (=> (and (member$a ?v0 (sset$a ?v1)) (and (forall ((?v3 State_rule_prod_stream$)) (fun_app$c (fun_app$j ?v2 (shd$ ?v3)) ?v3)) (forall ((?v3 State_rule_prod_stream$) (?v4 State_rule_prod$)) (=> (and (member$a ?v4 (sset$a (stl$ ?v3))) (fun_app$c (fun_app$j ?v2 ?v4) (stl$ ?v3))) (fun_app$c (fun_app$j ?v2 ?v4) ?v3))))) (fun_app$c (fun_app$j ?v2 ?v0) ?v1))) :named a23))
(assert (! (forall ((?v0 Rule$) (?v1 Rule_stream$) (?v2 Rule_rule_stream_bool_fun_fun$)) (=> (and (member$ ?v0 (sset$ ?v1)) (and (forall ((?v3 Rule_stream$)) (fun_app$k (fun_app$l ?v2 (shd$a ?v3)) ?v3)) (forall ((?v3 Rule_stream$) (?v4 Rule$)) (=> (and (member$ ?v4 (sset$ (stl$a ?v3))) (fun_app$k (fun_app$l ?v2 ?v4) (stl$a ?v3))) (fun_app$k (fun_app$l ?v2 ?v4) ?v3))))) (fun_app$k (fun_app$l ?v2 ?v0) ?v1))) :named a24))
(assert (! (not (= (sset$ rules$) bot$)) :named a25))
(check-sat)
;(get-unsat-core)
