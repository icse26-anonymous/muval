; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 530
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Rule$ 0)
(declare-sort Rule_set$ 0)
(declare-sort Nat_rule_fun$ 0)
(declare-sort Rule_bool_fun$ 0)
(declare-sort Rule_list_set$ 0)
(declare-sort Nat_rule_list_fun$ 0)
(declare-sort Rule_rule_sum_set$ 0)
(declare-sort Rule_list_bool_fun$ 0)
(declare-sort Rule_list_list_set$ 0)
(declare-sort Nat_rule_rule_sum_fun$ 0)
(declare-sort Nat_rule_list_list_fun$ 0)
(declare-sort Rule_list_rule_sum_set$ 0)
(declare-sort Rule_rule_list_sum_set$ 0)
(declare-sort Rule_rule_sum_bool_fun$ 0)
(declare-sort Rule_rule_sum_list_set$ 0)
(declare-sort Rule_list_list_bool_fun$ 0)
(declare-sort Rule_list_list_list_set$ 0)
(declare-sort Nat_rule_list_rule_sum_fun$ 0)
(declare-sort Nat_rule_rule_list_sum_fun$ 0)
(declare-sort Nat_rule_rule_sum_list_fun$ 0)
(declare-sort Rule_rule_rule_sum_sum_set$ 0)
(declare-sort Rule_rule_sum_rule_sum_set$ 0)
(declare-sort Rule_list_rule_list_sum_set$ 0)
(declare-sort Rule_list_rule_sum_bool_fun$ 0)
(declare-sort Rule_list_rule_sum_list_set$ 0)
(declare-sort Rule_rule_list_list_sum_set$ 0)
(declare-sort Rule_rule_list_sum_bool_fun$ 0)
(declare-sort Rule_rule_list_sum_list_set$ 0)
(declare-sort Rule_rule_sum_list_bool_fun$ 0)
(declare-sort Rule_rule_sum_list_list_set$ 0)
(declare-sort Nat_rule_rule_rule_sum_sum_fun$ 0)
(declare-sort Rule_list_rule_rule_sum_sum_set$ 0)
(declare-sort Rule_rule_rule_sum_sum_bool_fun$ 0)
(declare-sort Rule_rule_rule_sum_sum_list_set$ 0)
(declare-sort Rule_rule_sum_rule_list_sum_set$ 0)
(declare-sort Rule_rule_sum_rule_rule_sum_sum_set$ 0)
(declare-codatatypes () ((Rule_stream$ (sCons$ (shd$ Rule$) (stl$ Rule_stream$)))))
(declare-datatypes () ((Rule_rule_sum$ (inl$ (projl$ Rule$)) (inr$ (projr$ Rule$)))))
(declare-codatatypes () ((Rule_rule_sum_stream$ (sCons$a (shd$a Rule_rule_sum$) (stl$a Rule_rule_sum_stream$)))))
(declare-datatypes () ((Rule_list$ (nil$) (cons$ (hd$ Rule$) (tl$ Rule_list$)))))
(declare-codatatypes () ((Rule_list_stream$ (sCons$b (shd$b Rule_list$) (stl$b Rule_list_stream$)))))
(declare-datatypes () ((Rule_list_rule_sum$ (inl$a (projl$a Rule_list$)) (inr$a (projr$a Rule$)))
  (Rule_rule_rule_sum_sum$ (inl$b (projl$b Rule$)) (inr$b (projr$b Rule_rule_sum$)))
  (Rule_rule_list_sum$ (inl$c (projl$c Rule$)) (inr$c (projr$c Rule_list$)))
  (Rule_rule_sum_list$ (nil$a) (cons$a (hd$a Rule_rule_sum$) (tl$a Rule_rule_sum_list$)))
  (Rule_list_list$ (nil$b) (cons$b (hd$b Rule_list$) (tl$b Rule_list_list$)))))
(declare-fun bot$ () Rule_list_rule_sum_set$)
(declare-fun inf$ (Rule_list_rule_sum_set$ Rule_list_rule_sum_set$) Rule_list_rule_sum_set$)
(declare-fun bot$a () Rule_rule_rule_sum_sum_set$)
(declare-fun bot$b () Rule_rule_list_sum_set$)
(declare-fun bot$c () Rule_rule_sum_list_set$)
(declare-fun bot$d () Rule_list_list_set$)
(declare-fun bot$e () Rule_list_set$)
(declare-fun bot$f () Rule_rule_sum_set$)
(declare-fun bot$g () Rule_set$)
(declare-fun inf$a (Rule_rule_rule_sum_sum_set$ Rule_rule_rule_sum_sum_set$) Rule_rule_rule_sum_sum_set$)
(declare-fun inf$b (Rule_rule_list_sum_set$ Rule_rule_list_sum_set$) Rule_rule_list_sum_set$)
(declare-fun inf$c (Rule_rule_sum_list_set$ Rule_rule_sum_list_set$) Rule_rule_sum_list_set$)
(declare-fun inf$d (Rule_list_list_set$ Rule_list_list_set$) Rule_list_list_set$)
(declare-fun inf$e (Rule_list_set$ Rule_list_set$) Rule_list_set$)
(declare-fun inf$f (Rule_rule_sum_set$ Rule_rule_sum_set$) Rule_rule_sum_set$)
(declare-fun inf$g (Rule_set$ Rule_set$) Rule_set$)
(declare-fun plus$ (Rule_set$ Rule_set$) Rule_rule_sum_set$)
(declare-fun sset$ (Rule_stream$) Rule_set$)
(declare-fun lists$ (Rule_list_rule_sum_set$) Rule_list_rule_sum_list_set$)
(declare-fun minus$ (Rule_list_rule_sum_set$ Rule_list_rule_sum_set$) Rule_list_rule_sum_set$)
(declare-fun plus$a (Rule_set$ Rule_list_set$) Rule_rule_list_sum_set$)
(declare-fun plus$b (Rule_list_set$ Rule_set$) Rule_list_rule_sum_set$)
(declare-fun plus$c (Rule_set$ Rule_rule_sum_set$) Rule_rule_rule_sum_sum_set$)
(declare-fun plus$d (Rule_list_set$ Rule_list_set$) Rule_list_rule_list_sum_set$)
(declare-fun plus$e (Rule_rule_sum_set$ Rule_set$) Rule_rule_sum_rule_sum_set$)
(declare-fun plus$f (Rule_list_set$ Rule_rule_sum_set$) Rule_list_rule_rule_sum_sum_set$)
(declare-fun plus$g (Rule_rule_sum_set$ Rule_list_set$) Rule_rule_sum_rule_list_sum_set$)
(declare-fun plus$h (Rule_rule_sum_set$ Rule_rule_sum_set$) Rule_rule_sum_rule_rule_sum_sum_set$)
(declare-fun plus$i (Rule_set$ Rule_list_list_set$) Rule_rule_list_list_sum_set$)
(declare-fun rules$ () Rule_stream$)
(declare-fun sset$a (Rule_rule_sum_stream$) Rule_rule_sum_set$)
(declare-fun sset$b (Rule_list_stream$) Rule_list_set$)
(declare-fun lists$a (Rule_rule_rule_sum_sum_set$) Rule_rule_rule_sum_sum_list_set$)
(declare-fun lists$b (Rule_rule_list_sum_set$) Rule_rule_list_sum_list_set$)
(declare-fun lists$c (Rule_rule_sum_list_set$) Rule_rule_sum_list_list_set$)
(declare-fun lists$d (Rule_list_list_set$) Rule_list_list_list_set$)
(declare-fun lists$e (Rule_list_set$) Rule_list_list_set$)
(declare-fun lists$f (Rule_rule_sum_set$) Rule_rule_sum_list_set$)
(declare-fun lists$g (Rule_set$) Rule_list_set$)
(declare-fun member$ (Rule_rule_sum$ Rule_rule_sum_set$) Bool)
(declare-fun minus$a (Rule_rule_rule_sum_sum_set$ Rule_rule_rule_sum_sum_set$) Rule_rule_rule_sum_sum_set$)
(declare-fun minus$b (Rule_rule_list_sum_set$ Rule_rule_list_sum_set$) Rule_rule_list_sum_set$)
(declare-fun minus$c (Rule_rule_sum_list_set$ Rule_rule_sum_list_set$) Rule_rule_sum_list_set$)
(declare-fun minus$d (Rule_list_list_set$ Rule_list_list_set$) Rule_list_list_set$)
(declare-fun minus$e (Rule_list_set$ Rule_list_set$) Rule_list_set$)
(declare-fun minus$f (Rule_rule_sum_set$ Rule_rule_sum_set$) Rule_rule_sum_set$)
(declare-fun minus$g (Rule_set$ Rule_set$) Rule_set$)
(declare-fun fun_app$ (Nat_rule_list_rule_sum_fun$ Nat$) Rule_list_rule_sum$)
(declare-fun member$a (Rule_list$ Rule_list_set$) Bool)
(declare-fun member$b (Rule$ Rule_set$) Bool)
(declare-fun member$c (Rule_list_rule_sum$ Rule_list_rule_sum_set$) Bool)
(declare-fun member$d (Rule_rule_rule_sum_sum$ Rule_rule_rule_sum_sum_set$) Bool)
(declare-fun member$e (Rule_rule_list_sum$ Rule_rule_list_sum_set$) Bool)
(declare-fun member$f (Rule_rule_sum_list$ Rule_rule_sum_list_set$) Bool)
(declare-fun member$g (Rule_list_list$ Rule_list_list_set$) Bool)
(declare-fun smember$ (Rule_rule_sum$ Rule_rule_sum_stream$) Bool)
(declare-fun fun_app$a (Nat_rule_rule_rule_sum_sum_fun$ Nat$) Rule_rule_rule_sum_sum$)
(declare-fun fun_app$b (Nat_rule_rule_list_sum_fun$ Nat$) Rule_rule_list_sum$)
(declare-fun fun_app$c (Nat_rule_rule_sum_list_fun$ Nat$) Rule_rule_sum_list$)
(declare-fun fun_app$d (Nat_rule_list_list_fun$ Nat$) Rule_list_list$)
(declare-fun fun_app$e (Nat_rule_list_fun$ Nat$) Rule_list$)
(declare-fun fun_app$f (Nat_rule_rule_sum_fun$ Nat$) Rule_rule_sum$)
(declare-fun fun_app$g (Nat_rule_fun$ Nat$) Rule$)
(declare-fun fun_app$h (Rule_list_rule_sum_bool_fun$ Rule_list_rule_sum$) Bool)
(declare-fun fun_app$i (Rule_rule_rule_sum_sum_bool_fun$ Rule_rule_rule_sum_sum$) Bool)
(declare-fun fun_app$j (Rule_rule_list_sum_bool_fun$ Rule_rule_list_sum$) Bool)
(declare-fun fun_app$k (Rule_rule_sum_list_bool_fun$ Rule_rule_sum_list$) Bool)
(declare-fun fun_app$l (Rule_list_list_bool_fun$ Rule_list_list$) Bool)
(declare-fun fun_app$m (Rule_list_bool_fun$ Rule_list$) Bool)
(declare-fun fun_app$n (Rule_rule_sum_bool_fun$ Rule_rule_sum$) Bool)
(declare-fun fun_app$o (Rule_bool_fun$ Rule$) Bool)
(declare-fun smember$a (Rule_list$ Rule_list_stream$) Bool)
(declare-fun smember$b (Rule$ Rule_stream$) Bool)
(declare-fun countable$ (Rule_set$) Bool)
(declare-fun to_nat_on$ (Rule_list_rule_sum_set$ Rule_list_rule_sum$) Nat$)
(declare-fun countable$a (Rule_list_rule_sum_set$) Bool)
(declare-fun countable$b (Rule_rule_rule_sum_sum_set$) Bool)
(declare-fun countable$c (Rule_rule_list_sum_set$) Bool)
(declare-fun countable$d (Rule_rule_sum_list_set$) Bool)
(declare-fun countable$e (Rule_list_list_set$) Bool)
(declare-fun countable$f (Rule_list_set$) Bool)
(declare-fun countable$g (Rule_rule_sum_set$) Bool)
(declare-fun countable$h (Rule_list_rule_sum_list_set$) Bool)
(declare-fun countable$i (Rule_rule_rule_sum_sum_list_set$) Bool)
(declare-fun countable$j (Rule_rule_list_sum_list_set$) Bool)
(declare-fun countable$k (Rule_rule_sum_list_list_set$) Bool)
(declare-fun countable$l (Rule_list_list_list_set$) Bool)
(declare-fun countable$m (Rule_list_rule_list_sum_set$) Bool)
(declare-fun countable$n (Rule_rule_sum_rule_sum_set$) Bool)
(declare-fun countable$o (Rule_list_rule_rule_sum_sum_set$) Bool)
(declare-fun countable$p (Rule_rule_sum_rule_list_sum_set$) Bool)
(declare-fun countable$q (Rule_rule_sum_rule_rule_sum_sum_set$) Bool)
(declare-fun countable$r (Rule_rule_list_list_sum_set$) Bool)
(declare-fun to_nat_on$a (Rule_rule_rule_sum_sum_set$ Rule_rule_rule_sum_sum$) Nat$)
(declare-fun to_nat_on$b (Rule_rule_list_sum_set$ Rule_rule_list_sum$) Nat$)
(declare-fun to_nat_on$c (Rule_rule_sum_list_set$ Rule_rule_sum_list$) Nat$)
(declare-fun to_nat_on$d (Rule_list_list_set$ Rule_list_list$) Nat$)
(declare-fun to_nat_on$e (Rule_list_set$ Rule_list$) Nat$)
(declare-fun to_nat_on$f (Rule_rule_sum_set$ Rule_rule_sum$) Nat$)
(declare-fun to_nat_on$g (Rule_set$ Rule$) Nat$)
(declare-fun from_nat_into$ (Rule_list_rule_sum_set$) Nat_rule_list_rule_sum_fun$)
(declare-fun from_nat_into$a (Rule_rule_rule_sum_sum_set$) Nat_rule_rule_rule_sum_sum_fun$)
(declare-fun from_nat_into$b (Rule_rule_list_sum_set$) Nat_rule_rule_list_sum_fun$)
(declare-fun from_nat_into$c (Rule_rule_sum_list_set$) Nat_rule_rule_sum_list_fun$)
(declare-fun from_nat_into$d (Rule_list_list_set$) Nat_rule_list_list_fun$)
(declare-fun from_nat_into$e (Rule_list_set$) Nat_rule_list_fun$)
(declare-fun from_nat_into$f (Rule_rule_sum_set$) Nat_rule_rule_sum_fun$)
(declare-fun from_nat_into$g (Rule_set$) Nat_rule_fun$)
(assert (! (not (countable$ (sset$ rules$))) :named a0))
(assert (! (forall ((?v0 Rule_rule_sum$) (?v1 Rule_rule_sum_stream$)) (! (= (smember$ ?v0 ?v1) (member$ ?v0 (sset$a ?v1))) :pattern ((smember$ ?v0 ?v1)))) :named a1))
(assert (! (forall ((?v0 Rule_list$) (?v1 Rule_list_stream$)) (! (= (smember$a ?v0 ?v1) (member$a ?v0 (sset$b ?v1))) :pattern ((smember$a ?v0 ?v1)))) :named a2))
(assert (! (forall ((?v0 Rule$) (?v1 Rule_stream$)) (! (= (smember$b ?v0 ?v1) (member$b ?v0 (sset$ ?v1))) :pattern ((smember$b ?v0 ?v1)))) :named a3))
(assert (! (forall ((?v0 Rule_list_rule_sum_set$) (?v1 Rule_list_rule_sum$) (?v2 Rule_list_rule_sum$)) (=> (and (countable$a ?v0) (and (member$c ?v1 ?v0) (member$c ?v2 ?v0))) (= (= (to_nat_on$ ?v0 ?v1) (to_nat_on$ ?v0 ?v2)) (= ?v1 ?v2)))) :named a4))
(assert (! (forall ((?v0 Rule_rule_rule_sum_sum_set$) (?v1 Rule_rule_rule_sum_sum$) (?v2 Rule_rule_rule_sum_sum$)) (=> (and (countable$b ?v0) (and (member$d ?v1 ?v0) (member$d ?v2 ?v0))) (= (= (to_nat_on$a ?v0 ?v1) (to_nat_on$a ?v0 ?v2)) (= ?v1 ?v2)))) :named a5))
(assert (! (forall ((?v0 Rule_rule_list_sum_set$) (?v1 Rule_rule_list_sum$) (?v2 Rule_rule_list_sum$)) (=> (and (countable$c ?v0) (and (member$e ?v1 ?v0) (member$e ?v2 ?v0))) (= (= (to_nat_on$b ?v0 ?v1) (to_nat_on$b ?v0 ?v2)) (= ?v1 ?v2)))) :named a6))
(assert (! (forall ((?v0 Rule_rule_sum_list_set$) (?v1 Rule_rule_sum_list$) (?v2 Rule_rule_sum_list$)) (=> (and (countable$d ?v0) (and (member$f ?v1 ?v0) (member$f ?v2 ?v0))) (= (= (to_nat_on$c ?v0 ?v1) (to_nat_on$c ?v0 ?v2)) (= ?v1 ?v2)))) :named a7))
(assert (! (forall ((?v0 Rule_list_list_set$) (?v1 Rule_list_list$) (?v2 Rule_list_list$)) (=> (and (countable$e ?v0) (and (member$g ?v1 ?v0) (member$g ?v2 ?v0))) (= (= (to_nat_on$d ?v0 ?v1) (to_nat_on$d ?v0 ?v2)) (= ?v1 ?v2)))) :named a8))
(assert (! (forall ((?v0 Rule_list_set$) (?v1 Rule_list$) (?v2 Rule_list$)) (=> (and (countable$f ?v0) (and (member$a ?v1 ?v0) (member$a ?v2 ?v0))) (= (= (to_nat_on$e ?v0 ?v1) (to_nat_on$e ?v0 ?v2)) (= ?v1 ?v2)))) :named a9))
(assert (! (forall ((?v0 Rule_rule_sum_set$) (?v1 Rule_rule_sum$) (?v2 Rule_rule_sum$)) (=> (and (countable$g ?v0) (and (member$ ?v1 ?v0) (member$ ?v2 ?v0))) (= (= (to_nat_on$f ?v0 ?v1) (to_nat_on$f ?v0 ?v2)) (= ?v1 ?v2)))) :named a10))
(assert (! (forall ((?v0 Rule_set$) (?v1 Rule$) (?v2 Rule$)) (=> (and (countable$ ?v0) (and (member$b ?v1 ?v0) (member$b ?v2 ?v0))) (= (= (to_nat_on$g ?v0 ?v1) (to_nat_on$g ?v0 ?v2)) (= ?v1 ?v2)))) :named a11))
(assert (! (forall ((?v0 Rule_list_rule_sum_set$) (?v1 Rule_list_rule_sum$)) (=> (and (countable$a ?v0) (member$c ?v1 ?v0)) (exists ((?v2 Nat$)) (= (fun_app$ (from_nat_into$ ?v0) ?v2) ?v1)))) :named a12))
(assert (! (forall ((?v0 Rule_rule_rule_sum_sum_set$) (?v1 Rule_rule_rule_sum_sum$)) (=> (and (countable$b ?v0) (member$d ?v1 ?v0)) (exists ((?v2 Nat$)) (= (fun_app$a (from_nat_into$a ?v0) ?v2) ?v1)))) :named a13))
(assert (! (forall ((?v0 Rule_rule_list_sum_set$) (?v1 Rule_rule_list_sum$)) (=> (and (countable$c ?v0) (member$e ?v1 ?v0)) (exists ((?v2 Nat$)) (= (fun_app$b (from_nat_into$b ?v0) ?v2) ?v1)))) :named a14))
(assert (! (forall ((?v0 Rule_rule_sum_list_set$) (?v1 Rule_rule_sum_list$)) (=> (and (countable$d ?v0) (member$f ?v1 ?v0)) (exists ((?v2 Nat$)) (= (fun_app$c (from_nat_into$c ?v0) ?v2) ?v1)))) :named a15))
(assert (! (forall ((?v0 Rule_list_list_set$) (?v1 Rule_list_list$)) (=> (and (countable$e ?v0) (member$g ?v1 ?v0)) (exists ((?v2 Nat$)) (= (fun_app$d (from_nat_into$d ?v0) ?v2) ?v1)))) :named a16))
(assert (! (forall ((?v0 Rule_list_set$) (?v1 Rule_list$)) (=> (and (countable$f ?v0) (member$a ?v1 ?v0)) (exists ((?v2 Nat$)) (= (fun_app$e (from_nat_into$e ?v0) ?v2) ?v1)))) :named a17))
(assert (! (forall ((?v0 Rule_rule_sum_set$) (?v1 Rule_rule_sum$)) (=> (and (countable$g ?v0) (member$ ?v1 ?v0)) (exists ((?v2 Nat$)) (= (fun_app$f (from_nat_into$f ?v0) ?v2) ?v1)))) :named a18))
(assert (! (forall ((?v0 Rule_set$) (?v1 Rule$)) (=> (and (countable$ ?v0) (member$b ?v1 ?v0)) (exists ((?v2 Nat$)) (= (fun_app$g (from_nat_into$g ?v0) ?v2) ?v1)))) :named a19))
(assert (! (forall ((?v0 Rule_list_rule_sum_set$) (?v1 Rule_list_rule_sum_bool_fun$)) (=> (countable$a ?v0) (= (forall ((?v2 Rule_list_rule_sum$)) (=> (member$c ?v2 ?v0) (fun_app$h ?v1 ?v2))) (forall ((?v2 Nat$)) (=> (member$c (fun_app$ (from_nat_into$ ?v0) ?v2) ?v0) (fun_app$h ?v1 (fun_app$ (from_nat_into$ ?v0) ?v2))))))) :named a20))
(assert (! (forall ((?v0 Rule_rule_rule_sum_sum_set$) (?v1 Rule_rule_rule_sum_sum_bool_fun$)) (=> (countable$b ?v0) (= (forall ((?v2 Rule_rule_rule_sum_sum$)) (=> (member$d ?v2 ?v0) (fun_app$i ?v1 ?v2))) (forall ((?v2 Nat$)) (=> (member$d (fun_app$a (from_nat_into$a ?v0) ?v2) ?v0) (fun_app$i ?v1 (fun_app$a (from_nat_into$a ?v0) ?v2))))))) :named a21))
(assert (! (forall ((?v0 Rule_rule_list_sum_set$) (?v1 Rule_rule_list_sum_bool_fun$)) (=> (countable$c ?v0) (= (forall ((?v2 Rule_rule_list_sum$)) (=> (member$e ?v2 ?v0) (fun_app$j ?v1 ?v2))) (forall ((?v2 Nat$)) (=> (member$e (fun_app$b (from_nat_into$b ?v0) ?v2) ?v0) (fun_app$j ?v1 (fun_app$b (from_nat_into$b ?v0) ?v2))))))) :named a22))
(assert (! (forall ((?v0 Rule_rule_sum_list_set$) (?v1 Rule_rule_sum_list_bool_fun$)) (=> (countable$d ?v0) (= (forall ((?v2 Rule_rule_sum_list$)) (=> (member$f ?v2 ?v0) (fun_app$k ?v1 ?v2))) (forall ((?v2 Nat$)) (=> (member$f (fun_app$c (from_nat_into$c ?v0) ?v2) ?v0) (fun_app$k ?v1 (fun_app$c (from_nat_into$c ?v0) ?v2))))))) :named a23))
(assert (! (forall ((?v0 Rule_list_list_set$) (?v1 Rule_list_list_bool_fun$)) (=> (countable$e ?v0) (= (forall ((?v2 Rule_list_list$)) (=> (member$g ?v2 ?v0) (fun_app$l ?v1 ?v2))) (forall ((?v2 Nat$)) (=> (member$g (fun_app$d (from_nat_into$d ?v0) ?v2) ?v0) (fun_app$l ?v1 (fun_app$d (from_nat_into$d ?v0) ?v2))))))) :named a24))
(assert (! (forall ((?v0 Rule_list_set$) (?v1 Rule_list_bool_fun$)) (=> (countable$f ?v0) (= (forall ((?v2 Rule_list$)) (=> (member$a ?v2 ?v0) (fun_app$m ?v1 ?v2))) (forall ((?v2 Nat$)) (=> (member$a (fun_app$e (from_nat_into$e ?v0) ?v2) ?v0) (fun_app$m ?v1 (fun_app$e (from_nat_into$e ?v0) ?v2))))))) :named a25))
(assert (! (forall ((?v0 Rule_rule_sum_set$) (?v1 Rule_rule_sum_bool_fun$)) (=> (countable$g ?v0) (= (forall ((?v2 Rule_rule_sum$)) (=> (member$ ?v2 ?v0) (fun_app$n ?v1 ?v2))) (forall ((?v2 Nat$)) (=> (member$ (fun_app$f (from_nat_into$f ?v0) ?v2) ?v0) (fun_app$n ?v1 (fun_app$f (from_nat_into$f ?v0) ?v2))))))) :named a26))
(assert (! (forall ((?v0 Rule_set$) (?v1 Rule_bool_fun$)) (=> (countable$ ?v0) (= (forall ((?v2 Rule$)) (=> (member$b ?v2 ?v0) (fun_app$o ?v1 ?v2))) (forall ((?v2 Nat$)) (=> (member$b (fun_app$g (from_nat_into$g ?v0) ?v2) ?v0) (fun_app$o ?v1 (fun_app$g (from_nat_into$g ?v0) ?v2))))))) :named a27))
(assert (! (forall ((?v0 Rule_list_rule_sum_set$)) (=> (countable$a ?v0) (countable$h (lists$ ?v0)))) :named a28))
(assert (! (forall ((?v0 Rule_rule_rule_sum_sum_set$)) (=> (countable$b ?v0) (countable$i (lists$a ?v0)))) :named a29))
(assert (! (forall ((?v0 Rule_rule_list_sum_set$)) (=> (countable$c ?v0) (countable$j (lists$b ?v0)))) :named a30))
(assert (! (forall ((?v0 Rule_rule_sum_list_set$)) (=> (countable$d ?v0) (countable$k (lists$c ?v0)))) :named a31))
(assert (! (forall ((?v0 Rule_list_list_set$)) (=> (countable$e ?v0) (countable$l (lists$d ?v0)))) :named a32))
(assert (! (forall ((?v0 Rule_list_set$)) (=> (countable$f ?v0) (countable$e (lists$e ?v0)))) :named a33))
(assert (! (forall ((?v0 Rule_rule_sum_set$)) (=> (countable$g ?v0) (countable$d (lists$f ?v0)))) :named a34))
(assert (! (forall ((?v0 Rule_set$)) (=> (countable$ ?v0) (countable$f (lists$g ?v0)))) :named a35))
(assert (! (countable$a bot$) :named a36))
(assert (! (countable$b bot$a) :named a37))
(assert (! (countable$c bot$b) :named a38))
(assert (! (countable$d bot$c) :named a39))
(assert (! (countable$e bot$d) :named a40))
(assert (! (countable$f bot$e) :named a41))
(assert (! (countable$g bot$f) :named a42))
(assert (! (countable$ bot$g) :named a43))
(assert (! (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (=> (and (countable$ ?v0) (countable$ ?v1)) (countable$g (plus$ ?v0 ?v1)))) :named a44))
(assert (! (forall ((?v0 Rule_set$) (?v1 Rule_list_set$)) (=> (and (countable$ ?v0) (countable$f ?v1)) (countable$c (plus$a ?v0 ?v1)))) :named a45))
(assert (! (forall ((?v0 Rule_list_set$) (?v1 Rule_set$)) (=> (and (countable$f ?v0) (countable$ ?v1)) (countable$a (plus$b ?v0 ?v1)))) :named a46))
(assert (! (forall ((?v0 Rule_set$) (?v1 Rule_rule_sum_set$)) (=> (and (countable$ ?v0) (countable$g ?v1)) (countable$b (plus$c ?v0 ?v1)))) :named a47))
(assert (! (forall ((?v0 Rule_list_set$) (?v1 Rule_list_set$)) (=> (and (countable$f ?v0) (countable$f ?v1)) (countable$m (plus$d ?v0 ?v1)))) :named a48))
(assert (! (forall ((?v0 Rule_rule_sum_set$) (?v1 Rule_set$)) (=> (and (countable$g ?v0) (countable$ ?v1)) (countable$n (plus$e ?v0 ?v1)))) :named a49))
(assert (! (forall ((?v0 Rule_list_set$) (?v1 Rule_rule_sum_set$)) (=> (and (countable$f ?v0) (countable$g ?v1)) (countable$o (plus$f ?v0 ?v1)))) :named a50))
(assert (! (forall ((?v0 Rule_rule_sum_set$) (?v1 Rule_list_set$)) (=> (and (countable$g ?v0) (countable$f ?v1)) (countable$p (plus$g ?v0 ?v1)))) :named a51))
(assert (! (forall ((?v0 Rule_rule_sum_set$) (?v1 Rule_rule_sum_set$)) (=> (and (countable$g ?v0) (countable$g ?v1)) (countable$q (plus$h ?v0 ?v1)))) :named a52))
(assert (! (forall ((?v0 Rule_set$) (?v1 Rule_list_list_set$)) (=> (and (countable$ ?v0) (countable$e ?v1)) (countable$r (plus$i ?v0 ?v1)))) :named a53))
(assert (! (forall ((?v0 Rule_list_rule_sum_set$) (?v1 Rule_list_rule_sum_set$)) (=> (countable$a ?v0) (countable$a (minus$ ?v0 ?v1)))) :named a54))
(assert (! (forall ((?v0 Rule_rule_rule_sum_sum_set$) (?v1 Rule_rule_rule_sum_sum_set$)) (=> (countable$b ?v0) (countable$b (minus$a ?v0 ?v1)))) :named a55))
(assert (! (forall ((?v0 Rule_rule_list_sum_set$) (?v1 Rule_rule_list_sum_set$)) (=> (countable$c ?v0) (countable$c (minus$b ?v0 ?v1)))) :named a56))
(assert (! (forall ((?v0 Rule_rule_sum_list_set$) (?v1 Rule_rule_sum_list_set$)) (=> (countable$d ?v0) (countable$d (minus$c ?v0 ?v1)))) :named a57))
(assert (! (forall ((?v0 Rule_list_list_set$) (?v1 Rule_list_list_set$)) (=> (countable$e ?v0) (countable$e (minus$d ?v0 ?v1)))) :named a58))
(assert (! (forall ((?v0 Rule_list_set$) (?v1 Rule_list_set$)) (=> (countable$f ?v0) (countable$f (minus$e ?v0 ?v1)))) :named a59))
(assert (! (forall ((?v0 Rule_rule_sum_set$) (?v1 Rule_rule_sum_set$)) (=> (countable$g ?v0) (countable$g (minus$f ?v0 ?v1)))) :named a60))
(assert (! (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (=> (countable$ ?v0) (countable$ (minus$g ?v0 ?v1)))) :named a61))
(assert (! (forall ((?v0 Rule_list_rule_sum_set$) (?v1 Rule_list_rule_sum_set$)) (=> (countable$a ?v0) (countable$a (inf$ ?v1 ?v0)))) :named a62))
(assert (! (forall ((?v0 Rule_rule_rule_sum_sum_set$) (?v1 Rule_rule_rule_sum_sum_set$)) (=> (countable$b ?v0) (countable$b (inf$a ?v1 ?v0)))) :named a63))
(assert (! (forall ((?v0 Rule_rule_list_sum_set$) (?v1 Rule_rule_list_sum_set$)) (=> (countable$c ?v0) (countable$c (inf$b ?v1 ?v0)))) :named a64))
(assert (! (forall ((?v0 Rule_rule_sum_list_set$) (?v1 Rule_rule_sum_list_set$)) (=> (countable$d ?v0) (countable$d (inf$c ?v1 ?v0)))) :named a65))
(assert (! (forall ((?v0 Rule_list_list_set$) (?v1 Rule_list_list_set$)) (=> (countable$e ?v0) (countable$e (inf$d ?v1 ?v0)))) :named a66))
(assert (! (forall ((?v0 Rule_list_set$) (?v1 Rule_list_set$)) (=> (countable$f ?v0) (countable$f (inf$e ?v1 ?v0)))) :named a67))
(assert (! (forall ((?v0 Rule_rule_sum_set$) (?v1 Rule_rule_sum_set$)) (=> (countable$g ?v0) (countable$g (inf$f ?v1 ?v0)))) :named a68))
(assert (! (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (=> (countable$ ?v0) (countable$ (inf$g ?v1 ?v0)))) :named a69))
(assert (! (forall ((?v0 Rule_list_rule_sum_set$) (?v1 Rule_list_rule_sum_set$)) (=> (countable$a ?v0) (countable$a (inf$ ?v0 ?v1)))) :named a70))
(assert (! (forall ((?v0 Rule_rule_rule_sum_sum_set$) (?v1 Rule_rule_rule_sum_sum_set$)) (=> (countable$b ?v0) (countable$b (inf$a ?v0 ?v1)))) :named a71))
(assert (! (forall ((?v0 Rule_rule_list_sum_set$) (?v1 Rule_rule_list_sum_set$)) (=> (countable$c ?v0) (countable$c (inf$b ?v0 ?v1)))) :named a72))
(assert (! (forall ((?v0 Rule_rule_sum_list_set$) (?v1 Rule_rule_sum_list_set$)) (=> (countable$d ?v0) (countable$d (inf$c ?v0 ?v1)))) :named a73))
(assert (! (forall ((?v0 Rule_list_list_set$) (?v1 Rule_list_list_set$)) (=> (countable$e ?v0) (countable$e (inf$d ?v0 ?v1)))) :named a74))
(assert (! (forall ((?v0 Rule_list_set$) (?v1 Rule_list_set$)) (=> (countable$f ?v0) (countable$f (inf$e ?v0 ?v1)))) :named a75))
(assert (! (forall ((?v0 Rule_rule_sum_set$) (?v1 Rule_rule_sum_set$)) (=> (countable$g ?v0) (countable$g (inf$f ?v0 ?v1)))) :named a76))
(assert (! (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (=> (countable$ ?v0) (countable$ (inf$g ?v0 ?v1)))) :named a77))
(assert (! (forall ((?v0 Rule_list_rule_sum_set$) (?v1 Rule_list_rule_sum_set$)) (=> (and (not (= ?v0 bot$)) (and (countable$a ?v0) (and (not (= ?v1 bot$)) (countable$a ?v1)))) (= (= (from_nat_into$ ?v0) (from_nat_into$ ?v1)) (= ?v0 ?v1)))) :named a78))
(assert (! (forall ((?v0 Rule_rule_rule_sum_sum_set$) (?v1 Rule_rule_rule_sum_sum_set$)) (=> (and (not (= ?v0 bot$a)) (and (countable$b ?v0) (and (not (= ?v1 bot$a)) (countable$b ?v1)))) (= (= (from_nat_into$a ?v0) (from_nat_into$a ?v1)) (= ?v0 ?v1)))) :named a79))
(assert (! (forall ((?v0 Rule_rule_list_sum_set$) (?v1 Rule_rule_list_sum_set$)) (=> (and (not (= ?v0 bot$b)) (and (countable$c ?v0) (and (not (= ?v1 bot$b)) (countable$c ?v1)))) (= (= (from_nat_into$b ?v0) (from_nat_into$b ?v1)) (= ?v0 ?v1)))) :named a80))
(assert (! (forall ((?v0 Rule_rule_sum_list_set$) (?v1 Rule_rule_sum_list_set$)) (=> (and (not (= ?v0 bot$c)) (and (countable$d ?v0) (and (not (= ?v1 bot$c)) (countable$d ?v1)))) (= (= (from_nat_into$c ?v0) (from_nat_into$c ?v1)) (= ?v0 ?v1)))) :named a81))
(assert (! (forall ((?v0 Rule_list_list_set$) (?v1 Rule_list_list_set$)) (=> (and (not (= ?v0 bot$d)) (and (countable$e ?v0) (and (not (= ?v1 bot$d)) (countable$e ?v1)))) (= (= (from_nat_into$d ?v0) (from_nat_into$d ?v1)) (= ?v0 ?v1)))) :named a82))
(assert (! (forall ((?v0 Rule_list_set$) (?v1 Rule_list_set$)) (=> (and (not (= ?v0 bot$e)) (and (countable$f ?v0) (and (not (= ?v1 bot$e)) (countable$f ?v1)))) (= (= (from_nat_into$e ?v0) (from_nat_into$e ?v1)) (= ?v0 ?v1)))) :named a83))
(assert (! (forall ((?v0 Rule_rule_sum_set$) (?v1 Rule_rule_sum_set$)) (=> (and (not (= ?v0 bot$f)) (and (countable$g ?v0) (and (not (= ?v1 bot$f)) (countable$g ?v1)))) (= (= (from_nat_into$f ?v0) (from_nat_into$f ?v1)) (= ?v0 ?v1)))) :named a84))
(assert (! (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (=> (and (not (= ?v0 bot$g)) (and (countable$ ?v0) (and (not (= ?v1 bot$g)) (countable$ ?v1)))) (= (= (from_nat_into$g ?v0) (from_nat_into$g ?v1)) (= ?v0 ?v1)))) :named a85))
(assert (! (forall ((?v0 Rule_list_rule_sum_set$) (?v1 Rule_list_rule_sum$)) (=> (and (countable$a ?v0) (member$c ?v1 ?v0)) (= (fun_app$ (from_nat_into$ ?v0) (to_nat_on$ ?v0 ?v1)) ?v1))) :named a86))
(assert (! (forall ((?v0 Rule_rule_rule_sum_sum_set$) (?v1 Rule_rule_rule_sum_sum$)) (=> (and (countable$b ?v0) (member$d ?v1 ?v0)) (= (fun_app$a (from_nat_into$a ?v0) (to_nat_on$a ?v0 ?v1)) ?v1))) :named a87))
(assert (! (forall ((?v0 Rule_rule_list_sum_set$) (?v1 Rule_rule_list_sum$)) (=> (and (countable$c ?v0) (member$e ?v1 ?v0)) (= (fun_app$b (from_nat_into$b ?v0) (to_nat_on$b ?v0 ?v1)) ?v1))) :named a88))
(assert (! (forall ((?v0 Rule_rule_sum_list_set$) (?v1 Rule_rule_sum_list$)) (=> (and (countable$d ?v0) (member$f ?v1 ?v0)) (= (fun_app$c (from_nat_into$c ?v0) (to_nat_on$c ?v0 ?v1)) ?v1))) :named a89))
(assert (! (forall ((?v0 Rule_list_list_set$) (?v1 Rule_list_list$)) (=> (and (countable$e ?v0) (member$g ?v1 ?v0)) (= (fun_app$d (from_nat_into$d ?v0) (to_nat_on$d ?v0 ?v1)) ?v1))) :named a90))
(assert (! (forall ((?v0 Rule_list_set$) (?v1 Rule_list$)) (=> (and (countable$f ?v0) (member$a ?v1 ?v0)) (= (fun_app$e (from_nat_into$e ?v0) (to_nat_on$e ?v0 ?v1)) ?v1))) :named a91))
(assert (! (forall ((?v0 Rule_rule_sum_set$) (?v1 Rule_rule_sum$)) (=> (and (countable$g ?v0) (member$ ?v1 ?v0)) (= (fun_app$f (from_nat_into$f ?v0) (to_nat_on$f ?v0 ?v1)) ?v1))) :named a92))
(assert (! (forall ((?v0 Rule_set$) (?v1 Rule$)) (=> (and (countable$ ?v0) (member$b ?v1 ?v0)) (= (fun_app$g (from_nat_into$g ?v0) (to_nat_on$g ?v0 ?v1)) ?v1))) :named a93))
(assert (! (forall ((?v0 Rule_rule_sum_set$) (?v1 Nat$)) (=> (not (= ?v0 bot$f)) (member$ (fun_app$f (from_nat_into$f ?v0) ?v1) ?v0))) :named a94))
(assert (! (forall ((?v0 Rule_list_set$) (?v1 Nat$)) (=> (not (= ?v0 bot$e)) (member$a (fun_app$e (from_nat_into$e ?v0) ?v1) ?v0))) :named a95))
(assert (! (forall ((?v0 Rule_set$) (?v1 Nat$)) (=> (not (= ?v0 bot$g)) (member$b (fun_app$g (from_nat_into$g ?v0) ?v1) ?v0))) :named a96))
(assert (! (forall ((?v0 Rule_list_rule_sum_set$) (?v1 Rule_list_rule_sum_set$)) (=> (and (not (countable$a ?v0)) (countable$a ?v1)) (not (countable$a (minus$ ?v0 ?v1))))) :named a97))
(assert (! (forall ((?v0 Rule_rule_rule_sum_sum_set$) (?v1 Rule_rule_rule_sum_sum_set$)) (=> (and (not (countable$b ?v0)) (countable$b ?v1)) (not (countable$b (minus$a ?v0 ?v1))))) :named a98))
(assert (! (forall ((?v0 Rule_rule_list_sum_set$) (?v1 Rule_rule_list_sum_set$)) (=> (and (not (countable$c ?v0)) (countable$c ?v1)) (not (countable$c (minus$b ?v0 ?v1))))) :named a99))
(assert (! (forall ((?v0 Rule_rule_sum_list_set$) (?v1 Rule_rule_sum_list_set$)) (=> (and (not (countable$d ?v0)) (countable$d ?v1)) (not (countable$d (minus$c ?v0 ?v1))))) :named a100))
(assert (! (forall ((?v0 Rule_list_list_set$) (?v1 Rule_list_list_set$)) (=> (and (not (countable$e ?v0)) (countable$e ?v1)) (not (countable$e (minus$d ?v0 ?v1))))) :named a101))
(assert (! (forall ((?v0 Rule_list_set$) (?v1 Rule_list_set$)) (=> (and (not (countable$f ?v0)) (countable$f ?v1)) (not (countable$f (minus$e ?v0 ?v1))))) :named a102))
(assert (! (forall ((?v0 Rule_rule_sum_set$) (?v1 Rule_rule_sum_set$)) (=> (and (not (countable$g ?v0)) (countable$g ?v1)) (not (countable$g (minus$f ?v0 ?v1))))) :named a103))
(assert (! (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (=> (and (not (countable$ ?v0)) (countable$ ?v1)) (not (countable$ (minus$g ?v0 ?v1))))) :named a104))
(assert (! (forall ((?v0 Rule_rule_sum_set$) (?v1 Rule_rule_sum_set$)) (= (inf$f ?v0 (minus$f ?v1 ?v0)) bot$f)) :named a105))
(assert (! (forall ((?v0 Rule_list_set$) (?v1 Rule_list_set$)) (= (inf$e ?v0 (minus$e ?v1 ?v0)) bot$e)) :named a106))
(assert (! (forall ((?v0 Rule_set$) (?v1 Rule_set$)) (= (inf$g ?v0 (minus$g ?v1 ?v0)) bot$g)) :named a107))
(check-sat)
;(get-unsat-core)
