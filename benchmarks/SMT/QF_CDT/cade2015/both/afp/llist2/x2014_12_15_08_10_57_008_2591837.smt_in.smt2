; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 438
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Nat_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun i$ () Nat$)
(declare-fun t$ () A_llist$)
(declare-fun lrev$ (A_llist$) A_llist$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun ldrop$ (A_llist$) Nat_a_llist_fun$)
(declare-fun ltake$ (A_llist$) Nat_a_llist_fun$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun alllsts$ (A_set$) A_llist_set$)
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$) A_llist$)
(declare-fun inflsts$ (A_set$) A_llist_set$)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun alllstsp$ (A_bool_fun$ A_llist$) Bool)
(declare-fun finlstsp$ (A_bool_fun$ A_llist$) Bool)
(declare-fun lbutlast$ (A_llist$) A_llist$)
(assert (! (not (not (= t$ lNil$))) :named a0))
(assert (! (not (= (fun_app$ (ldrop$ t$) i$) lNil$)) :named a1))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (ldrop$ lNil$) ?v0) lNil$) :pattern ((fun_app$ (ldrop$ lNil$) ?v0)))) :named a2))
(assert (! (= (lbutlast$ lNil$) lNil$) :named a3))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (ltake$ lNil$) ?v0) lNil$) :pattern ((fun_app$ (ltake$ lNil$) ?v0)))) :named a4))
(assert (! (= (lrev$ lNil$) lNil$) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_llist$)) (=> (and (less_eq$ ?v0 ?v1) (= (fun_app$ (ldrop$ ?v2) ?v0) lNil$)) (= (fun_app$ (ldrop$ ?v2) ?v1) lNil$))) :named a6))
(assert (! (forall ((?v0 A_bool_fun$)) (finlstsp$ ?v0 lNil$)) :named a7))
(assert (! (forall ((?v0 A_bool_fun$)) (alllstsp$ ?v0 lNil$)) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 Nat$)) (=> (member$ ?v0 (alllsts$ ?v1)) (member$ (fun_app$ (ldrop$ ?v0) ?v2) (alllsts$ ?v1)))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 Nat$)) (=> (member$ ?v0 (inflsts$ ?v1)) (member$ (fun_app$ (ldrop$ ?v0) ?v2) (inflsts$ ?v1)))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (ldrop$ ?v0) zero$) ?v0) :pattern ((ldrop$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (ldrop$ ?v0) (plus$ ?v1 ?v2)) (fun_app$ (ldrop$ (fun_app$ (ldrop$ ?v0) ?v1)) ?v2))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (member$ ?v0 (inflsts$ ?v1)) (member$ ?v0 (alllsts$ ?v1)))) :named a13))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (ltake$ ?v0) zero$) lNil$) :pattern ((ltake$ ?v0)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (ltake$ (fun_app$ (ldrop$ ?v0) ?v1)) ?v2) (fun_app$ (ldrop$ (fun_app$ (ltake$ ?v0) (plus$ ?v2 ?v1))) ?v1))) :named a15))
(assert (! (forall ((?v0 A_set$)) (member$ lNil$ (alllsts$ ?v0))) :named a16))
(check-sat)
;(get-unsat-core)
