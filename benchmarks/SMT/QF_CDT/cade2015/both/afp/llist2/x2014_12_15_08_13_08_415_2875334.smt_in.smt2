; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 534
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort A_llist_nat_fun$ 0)
(declare-sort Nat_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun ta$ () A_llist$)
(declare-fun top$ () A_set$)
(declare-fun less$ (A_llist$ A_llist$) Bool)
(declare-fun zero$ () Nat$)
(declare-fun less$a (Nat$) Nat_bool_fun$)
(declare-fun ltake$ (A_llist$) Nat_a_llist_fun$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$) A_llist$)
(declare-fun inflsts$ (A_set$) A_llist_set$)
(declare-fun fun_app$a (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$c (A_llist_nat_fun$ A_llist$) Nat$)
(declare-fun fun_app$d (Nat_nat_fun$ Nat$) Nat$)
(assert (! (not (less$ (fun_app$ (ltake$ ta$) zero$) ta$)) :named a0))
(assert (! (member$ ta$ (inflsts$ top$)) :named a1))
(assert (! (not (fun_app$a (less$a zero$) zero$)) :named a2))
(assert (! (= zero$ zero$) :named a3))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (= ?v0 ?v1)) (or (fun_app$a (less$a ?v0) ?v1) (fun_app$a (less$a ?v1) ?v0)))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$a (less$a ?v0) ?v1)) (or (fun_app$a (less$a ?v1) ?v0) (= ?v0 ?v1)))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (=> (fun_app$a (less$a ?v0) ?v1) false) (and (=> (= ?v0 ?v1) false) (=> (fun_app$a (less$a ?v1) ?v0) false))) false)) :named a7))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (forall ((?v3 Nat$)) (=> (fun_app$a (less$a ?v3) ?v2) (fun_app$a ?v0 ?v3))) (fun_app$a ?v0 ?v2))) (fun_app$a ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (= ?v0 (fun_app$b ?v1 ?v2)) (and (less$ ?v2 ?v3) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (less$ ?v4 ?v5) (less$ (fun_app$b ?v1 ?v4) (fun_app$b ?v1 ?v5)))))) (less$ ?v0 (fun_app$b ?v1 ?v3)))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist_nat_fun$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v2)) (and (less$ ?v2 ?v3) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (less$ ?v4 ?v5) (fun_app$a (less$a (fun_app$c ?v1 ?v4)) (fun_app$c ?v1 ?v5)))))) (fun_app$a (less$a ?v0) (fun_app$c ?v1 ?v3)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$ ?v1 ?v2)) (and (fun_app$a (less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$a (less$a ?v4) ?v5) (less$ (fun_app$ ?v1 ?v4) (fun_app$ ?v1 ?v5)))))) (less$ ?v0 (fun_app$ ?v1 ?v3)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v2)) (and (fun_app$a (less$a ?v2) ?v3) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$a (less$a ?v4) ?v5) (fun_app$a (less$a (fun_app$d ?v1 ?v4)) (fun_app$d ?v1 ?v5)))))) (fun_app$a (less$a ?v0) (fun_app$d ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (= ?v0 ?v1) (less$ ?v1 ?v2)) (less$ ?v0 ?v2))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (= ?v0 ?v1) (fun_app$a (less$a ?v1) ?v2)) (fun_app$a (less$a ?v0) ?v2))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (less$ ?v0 ?v1) (=> (not false) (less$ ?v1 ?v0))) false)) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$a (less$a ?v0) ?v1) (=> (not false) (fun_app$a (less$a ?v1) ?v0))) false)) :named a16))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a (less$a ?v0) zero$) false) :pattern ((less$a ?v0)))) :named a17))
(assert (! (forall ((?v0 Nat$)) (= (not (fun_app$a (less$a zero$) ?v0)) (= ?v0 zero$))) :named a18))
(assert (! (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$a (less$a zero$) ?v0))) :named a19))
(check-sat)
;(get-unsat-core)
