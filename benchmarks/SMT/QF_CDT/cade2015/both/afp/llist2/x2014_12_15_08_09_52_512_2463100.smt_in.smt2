; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 369
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun a$ () A_set$)
(declare-fun j$ () Nat$)
(declare-fun ta$ () A_llist$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun lrev$ (A_llist$) A_llist$)
(declare-fun ltake$ (A_llist$ Nat$) A_llist$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun alllsts$ (A_set$) A_llist_set$)
(declare-fun finlsts$ (A_set$) A_llist_set$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun llength$ (A_llist$) Nat$)
(assert (! (not (member$ (ltake$ ta$ (suc$ j$)) (finlsts$ a$))) :named a0))
(assert (! (member$ ta$ (alllsts$ a$)) :named a1))
(assert (! (forall ((?v0 A_llist$)) (=> (member$ ?v0 (alllsts$ a$)) (member$ (ltake$ ?v0 j$) (finlsts$ a$)))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 (finlsts$ ?v1)) (member$ ?v0 (alllsts$ ?v2))) (member$ ?v0 (finlsts$ ?v2)))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (member$ ?v0 (finlsts$ ?v1)) (member$ ?v0 (alllsts$ ?v1)))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (member$ ?v0 (finlsts$ ?v1)) (member$ (lrev$ ?v0) (finlsts$ ?v1)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 Nat$)) (! (= (ltake$ (lCons$ ?v0 ?v1) (suc$ ?v2)) (lCons$ ?v0 (ltake$ ?v1 ?v2))) :pattern ((ltake$ (lCons$ ?v0 ?v1) (suc$ ?v2))))) :named a10))
(assert (! (forall ((?v0 Nat$)) (! (= (ltake$ lNil$ ?v0) lNil$) :pattern ((ltake$ lNil$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A$)) (=> (member$ ?v0 (finlsts$ ?v1)) (= (llength$ (lCons$ ?v2 ?v0)) (suc$ (llength$ ?v0))))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_set$)) (= (member$ (lappend$ ?v0 ?v1) (finlsts$ ?v2)) (and (member$ ?v0 (finlsts$ ?v2)) (member$ ?v1 (finlsts$ ?v2))))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= lNil$ (lappend$ ?v0 ?v1)) (and (= ?v0 lNil$) (= ?v1 lNil$)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (lappend$ ?v0 ?v1) lNil$) (and (= ?v0 lNil$) (= ?v1 lNil$)))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_llist$) (?v3 A_llist$)) (=> (member$ ?v0 (finlsts$ ?v1)) (= (= (lappend$ ?v0 ?v2) (lappend$ ?v0 ?v3)) (= ?v2 ?v3)))) :named a16))
(check-sat)
;(get-unsat-core)
