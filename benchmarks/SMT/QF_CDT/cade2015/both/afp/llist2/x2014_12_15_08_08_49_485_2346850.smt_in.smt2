; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 174
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Nat_a_option_fun$ 0)
(declare-datatypes () ((A_option$ (none$) (some$ (the$ A$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun x$ () Nat$)
(declare-fun ran$ (Nat_a_option_fun$) A_set$)
(declare-fun ll2f$ (A_llist$) Nat_a_option_fun$)
(declare-fun lrev$ (A_llist$) A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun alllsts$ (A_set$) A_llist_set$)
(declare-fun fun_app$ (Nat_a_option_fun$ Nat$) A_option$)
(declare-fun is_none$ (A_option$) Bool)
(declare-fun poslsts$ (A_set$) A_llist_set$)
(declare-fun alllstsp$ (A_bool_fun$ A_llist$) Bool)
(declare-fun finlstsp$ (A_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun lbutlast$ (A_llist$) A_llist$)
(declare-fun pred_option$ (A_bool_fun$ A_option$) Bool)
(assert (! (not (= (fun_app$ (ll2f$ lNil$) x$) none$)) :named a0))
(assert (! (= (lbutlast$ lNil$) lNil$) :named a1))
(assert (! (forall ((?v0 A_option$)) (=> (and (=> (= ?v0 none$) false) (=> (not (= ?v0 none$)) false)) false)) :named a2))
(assert (! (= (lrev$ lNil$) lNil$) :named a3))
(assert (! (forall ((?v0 A_llist$)) (! (= (lset$ ?v0) (ran$ (ll2f$ ?v0))) :pattern ((lset$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_bool_fun$)) (finlstsp$ ?v0 lNil$)) :named a5))
(assert (! (forall ((?v0 A_bool_fun$)) (alllstsp$ ?v0 lNil$)) :named a6))
(assert (! (forall ((?v0 A_option$)) (! (= (is_none$ ?v0) (= ?v0 none$)) :pattern ((is_none$ ?v0)))) :named a7))
(assert (! (= (is_none$ none$) true) :named a8))
(assert (! (forall ((?v0 A_set$)) (member$ lNil$ (alllsts$ ?v0))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (= (member$ ?v0 (poslsts$ ?v1)) (and (member$ ?v0 (alllsts$ ?v1)) (not (= ?v0 lNil$))))) :named a10))
(assert (! (forall ((?v0 A_bool_fun$)) (pred_option$ ?v0 none$)) :named a11))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (=> (and (finlstsp$ ?v0 ?v1) (and (=> (= ?v1 lNil$) false) (forall ((?v2 A_llist$) (?v3 A$)) (=> (and (= ?v1 (lCons$ ?v3 ?v2)) (and (finlstsp$ ?v0 ?v2) (fun_app$a ?v0 ?v3))) false)))) false)) :named a12))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (finlstsp$ ?v0 ?v1) (or (= ?v1 lNil$) (exists ((?v2 A_llist$) (?v3 A$)) (and (= ?v1 (lCons$ ?v3 ?v2)) (and (finlstsp$ ?v0 ?v2) (fun_app$a ?v0 ?v3))))))) :named a13))
(check-sat)
;(get-unsat-core)
