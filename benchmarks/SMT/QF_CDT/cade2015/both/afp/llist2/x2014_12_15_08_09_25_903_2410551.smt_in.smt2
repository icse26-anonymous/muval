; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 461
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-datatypes () ((A_option$ (none$) (some$ (the$ A$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun ta$ () A_llist$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun ll2f$ (A_llist$ Nat$) A_option$)
(declare-fun zero$ () Nat$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$a (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(assert (! (not (= (ll2f$ ta$ (suc$ zero$)) none$)) :named a0))
(assert (! (= (ll2f$ ta$ zero$) none$) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Nat$)) (=> (= ?v0 (suc$ ?v1)) false))) false)) :named a4))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Nat$)) (=> (= ?v0 (suc$ ?v1)) false))) false)) :named a5))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$a ?v0 ?v3) zero$)) (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$a ?v0 zero$) (suc$ ?v3))) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (fun_app$ (fun_app$a ?v0 (suc$ ?v3)) (suc$ ?v4)))))) (fun_app$ (fun_app$a ?v0 ?v1) ?v2))) :named a6))
(assert (! (forall ((?v0 Nat$)) (=> (= (suc$ ?v0) zero$) false)) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 (suc$ ?v1)) (not (= ?v0 zero$)))) :named a8))
(assert (! (forall ((?v0 Nat$)) (=> (= zero$ (suc$ ?v0)) false)) :named a9))
(assert (! (forall ((?v0 Nat$)) (=> (not (= ?v0 zero$)) (exists ((?v1 Nat$)) (= ?v0 (suc$ ?v1))))) :named a10))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a11))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a12))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a14))
(check-sat)
;(get-unsat-core)
