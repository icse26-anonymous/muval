; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 382
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Nat_a_llist_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_llist_llist_set$ 0)
(declare-sort A_llist_llist_llist_llist_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nibble$ (nibble0$) (nibble1$) (nibble2$) (nibble3$) (nibble4$) (nibble5$) (nibble6$) (nibble7$) (nibble8$) (nibble9$) (nibbleA$) (nibbleB$) (nibbleC$) (nibbleD$) (nibbleE$) (nibbleF$))
  (Char$ (char$ (select$ Nibble$) (selecta$ Nibble$)))))
(declare-codatatypes () ((A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))
  (A_llist_llist_llist_llist$ (lNil$c) (lCons$c (lhd$c A_llist_llist_llist$) (ltl$c A_llist_llist_llist_llist$)))))
(declare-fun a$ () A_set$)
(declare-fun ta$ () A_llist$)
(declare-fun top$ () A_llist_llist_set$)
(declare-fun size$ (Char$) Nat$)
(declare-fun top$a () A_llist_set$)
(declare-fun top$b () A_set$)
(declare-fun zero$ () Nat$)
(declare-fun ldrop$ (A_llist$) Nat_a_llist_fun$)
(declare-fun ldrop$a (A_llist_llist$ Nat$) A_llist_llist$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun alllsts$ (A_set$) A_llist_set$)
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$) A_llist$)
(declare-fun inflsts$ (A_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun member$a (A_llist_llist_llist$ A_llist_llist_llist_set$) Bool)
(declare-fun member$b (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun member$c (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_set$) Bool)
(declare-fun member$d (A$ A_set$) Bool)
(declare-fun alllsts$a (A_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun alllsts$b (A_llist_set$) A_llist_llist_set$)
(declare-fun alllsts$c (A_llist_llist_llist_set$) A_llist_llist_llist_llist_set$)
(declare-fun inflsts$a (A_llist_set$) A_llist_llist_set$)
(declare-fun inflsts$b (A_set$) A_llist_set$)
(declare-fun inflsts$c (A_llist_llist_llist_set$) A_llist_llist_llist_llist_set$)
(declare-fun size_bool$ (Bool) Nat$)
(declare-fun size_char$ (Char$) Nat$)
(assert (! (not (member$ (fun_app$ (ldrop$ ta$) zero$) (alllsts$ a$))) :named a0))
(assert (! (member$ ta$ (alllsts$ a$)) :named a1))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (ldrop$ ?v0) zero$) ?v0) :pattern ((ldrop$ ?v0)))) :named a2))
(assert (! (= zero$ zero$) :named a3))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a4))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a5))
(assert (! (forall ((?v0 Char$)) (! (= (size_char$ ?v0) zero$) :pattern ((size_char$ ?v0)))) :named a6))
(assert (! (= (size_bool$ true) zero$) :named a7))
(assert (! (= (size_bool$ false) zero$) :named a8))
(assert (! (forall ((?v0 Nat$)) (! (= (ldrop$a lNil$a ?v0) lNil$a) :pattern ((ldrop$a lNil$a ?v0)))) :named a9))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (ldrop$ lNil$) ?v0) lNil$) :pattern ((fun_app$ (ldrop$ lNil$) ?v0)))) :named a10))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (member$a ?v0 (alllsts$a top$))) :named a11))
(assert (! (forall ((?v0 A_llist_llist$)) (member$b ?v0 (alllsts$b top$a))) :named a12))
(assert (! (forall ((?v0 A_llist$)) (member$ ?v0 (alllsts$ top$b))) :named a13))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$)) (=> (member$a ?v0 (inflsts$ ?v1)) (member$a ?v0 (alllsts$a ?v1)))) :named a14))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$)) (=> (member$b ?v0 (inflsts$a ?v1)) (member$b ?v0 (alllsts$b ?v1)))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (member$ ?v0 (inflsts$b ?v1)) (member$ ?v0 (alllsts$ ?v1)))) :named a16))
(assert (! (forall ((?v0 Char$)) (! (= (size$ ?v0) zero$) :pattern ((size$ ?v0)))) :named a17))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist_llist$) (?v2 A_llist_llist_llist_set$)) (= (member$c (lCons$c ?v0 ?v1) (alllsts$c ?v2)) (and (member$a ?v0 ?v2) (member$c ?v1 (alllsts$c ?v2))))) :named a18))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_set$)) (= (member$a (lCons$b ?v0 ?v1) (alllsts$a ?v2)) (and (member$b ?v0 ?v2) (member$a ?v1 (alllsts$a ?v2))))) :named a19))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_set$)) (= (member$b (lCons$a ?v0 ?v1) (alllsts$b ?v2)) (and (member$ ?v0 ?v2) (member$b ?v1 (alllsts$b ?v2))))) :named a20))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_set$)) (= (member$ (lCons$ ?v0 ?v1) (alllsts$ ?v2)) (and (member$d ?v0 ?v2) (member$ ?v1 (alllsts$ ?v2))))) :named a21))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (=> (and (=> (= ?v0 lNil$b) false) (forall ((?v1 A_llist_llist$) (?v2 A_llist_llist_llist$)) (=> (= ?v0 (lCons$b ?v1 ?v2)) false))) false)) :named a22))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false))) false)) :named a23))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (and (=> (= ?v0 lNil$a) false) (forall ((?v1 A_llist$) (?v2 A_llist_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) false))) false)) :named a24))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$) (?v1 A_llist_llist_llist_set$)) (=> (and (member$c ?v0 (inflsts$c ?v1)) (forall ((?v2 A_llist_llist_llist$) (?v3 A_llist_llist_llist_llist$)) (=> (and (member$c ?v3 (inflsts$c ?v1)) (and (member$a ?v2 ?v1) (= ?v0 (lCons$c ?v2 ?v3)))) false))) false)) :named a25))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$)) (=> (and (member$a ?v0 (inflsts$ ?v1)) (forall ((?v2 A_llist_llist$) (?v3 A_llist_llist_llist$)) (=> (and (member$a ?v3 (inflsts$ ?v1)) (and (member$b ?v2 ?v1) (= ?v0 (lCons$b ?v2 ?v3)))) false))) false)) :named a26))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$)) (=> (and (member$b ?v0 (inflsts$a ?v1)) (forall ((?v2 A_llist$) (?v3 A_llist_llist$)) (=> (and (member$b ?v3 (inflsts$a ?v1)) (and (member$ ?v2 ?v1) (= ?v0 (lCons$a ?v2 ?v3)))) false))) false)) :named a27))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (and (member$ ?v0 (inflsts$b ?v1)) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (member$ ?v3 (inflsts$b ?v1)) (and (member$d ?v2 ?v1) (= ?v0 (lCons$ ?v2 ?v3)))) false))) false)) :named a28))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$)) (=> (member$a ?v0 (inflsts$ ?v1)) (member$a ?v0 (inflsts$ top$)))) :named a29))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$)) (=> (member$b ?v0 (inflsts$a ?v1)) (member$b ?v0 (inflsts$a top$a)))) :named a30))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (member$ ?v0 (inflsts$b ?v1)) (member$ ?v0 (inflsts$b top$b)))) :named a31))
(check-sat)
;(get-unsat-core)
