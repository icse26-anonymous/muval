; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 215
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_b_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_llist_llist_set$ 0)
(declare-sort A_a_llist_b_b_fun_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))))
(declare-fun c$ () B$)
(declare-fun d$ () A_a_llist_b_b_fun_fun_fun$)
(declare-fun f$ () A_llist_b_fun$)
(declare-fun member$ (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun alllsts$ (A_llist_set$) A_llist_llist_set$)
(declare-fun finlsts$ (A_llist_set$) A_llist_llist_set$)
(declare-fun fun_app$ (A_llist_b_fun$ A_llist$) B$)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun member$b (A_llist_llist_llist$ A_llist_llist_llist_set$) Bool)
(declare-fun member$c (A$ A_set$) Bool)
(declare-fun poslsts$ (A_llist_set$) A_llist_llist_set$)
(declare-fun alllsts$a (A_set$) A_llist_set$)
(declare-fun alllsts$b (A_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun alllstsp$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun finlsts$a (A_set$) A_llist_set$)
(declare-fun finlstsp$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$b (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun fun_app$c (A_bool_fun$ A$) Bool)
(declare-fun gen_lset$ (A_set$) A_llist_a_set_fun$)
(declare-fun poslsts$a (A_set$) A_llist_set$)
(declare-fun pred_llist$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun finlsts_rec$ (B$ A_a_llist_b_b_fun_fun_fun$) A_llist_b_fun$)
(declare-fun pred_llist$a (A_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun finite_lprefix$ (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$ (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$a (A_llist_llist$ A_llist_llist$) Bool)
(assert (! (not (= (fun_app$ f$ lNil$) c$)) :named a0))
(assert (! (= f$ (finlsts_rec$ c$ d$)) :named a1))
(assert (! (forall ((?v0 B$) (?v1 A_a_llist_b_b_fun_fun_fun$)) (! (= (fun_app$ (finlsts_rec$ ?v0 ?v1) lNil$) ?v0) :pattern ((finlsts_rec$ ?v0 ?v1)))) :named a2))
(assert (! (forall ((?v0 A_bool_fun$)) (fun_app$a (finlstsp$ ?v0) lNil$)) :named a3))
(assert (! (forall ((?v0 A_bool_fun$)) (fun_app$a (alllstsp$ ?v0) lNil$)) :named a4))
(assert (! (forall ((?v0 A_llist_set$)) (member$ lNil$a (alllsts$ ?v0))) :named a5))
(assert (! (forall ((?v0 A_set$)) (member$a lNil$ (alllsts$a ?v0))) :named a6))
(assert (! (forall ((?v0 A_llist_set$)) (member$ lNil$a (finlsts$ ?v0))) :named a7))
(assert (! (forall ((?v0 A_set$)) (member$a lNil$ (finlsts$a ?v0))) :named a8))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$a (lmember$ ?v0) lNil$) false) :pattern ((lmember$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$b (gen_lset$ ?v0) lNil$) ?v0) :pattern ((gen_lset$ ?v0)))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a (finite_lprefix$ ?v0) lNil$) (= ?v0 lNil$)) :pattern ((finite_lprefix$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a (finite_lprefix$ lNil$) ?v0) true) :pattern ((fun_app$a (finite_lprefix$ lNil$) ?v0)))) :named a12))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (and (=> (= ?v0 lNil$a) false) (forall ((?v1 A_llist$) (?v2 A_llist_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) false))) false)) :named a13))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false))) false)) :named a14))
(assert (! (= (fun_app$a (lstrict_prefix$ lNil$) lNil$) false) :named a15))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$)) (= (member$ ?v0 (poslsts$ ?v1)) (and (member$ ?v0 (alllsts$ ?v1)) (not (= ?v0 lNil$a))))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (= (member$a ?v0 (poslsts$a ?v1)) (and (member$a ?v0 (alllsts$a ?v1)) (not (= ?v0 lNil$))))) :named a17))
(assert (! (forall ((?v0 A_bool_fun$)) (fun_app$a (pred_llist$ ?v0) lNil$)) :named a18))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a19))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a20))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_set$)) (= (member$b (lCons$b ?v0 ?v1) (alllsts$b ?v2)) (and (member$ ?v0 ?v2) (member$b ?v1 (alllsts$b ?v2))))) :named a21))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_set$)) (= (member$ (lCons$a ?v0 ?v1) (alllsts$ ?v2)) (and (member$a ?v0 ?v2) (member$ ?v1 (alllsts$ ?v2))))) :named a22))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_set$)) (= (member$a (lCons$ ?v0 ?v1) (alllsts$a ?v2)) (and (member$c ?v0 ?v2) (member$a ?v1 (alllsts$a ?v2))))) :named a23))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (! (= (lstrict_prefix$a (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (lstrict_prefix$a ?v1 ?v3))) :pattern ((lstrict_prefix$a (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3))))) :named a24))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$a (lstrict_prefix$ ?v1) ?v3))) :pattern ((fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))) :named a25))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_llist$)) (! (= (pred_llist$a ?v0 (lCons$a ?v1 ?v2)) (and (fun_app$a ?v0 ?v1) (pred_llist$a ?v0 ?v2))) :pattern ((pred_llist$a ?v0 (lCons$a ?v1 ?v2))))) :named a26))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$a (pred_llist$ ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$c ?v0 ?v1) (fun_app$a (pred_llist$ ?v0) ?v2))) :pattern ((fun_app$a (pred_llist$ ?v0) (lCons$ ?v1 ?v2))))) :named a27))
(check-sat)
;(get-unsat-core)
