; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 23
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_llist_set$ 0)
(declare-sort A_llist_a_llist_prod_set$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_bool_fun$ 0)
(declare-sort A_llist_llist_llist_llist_set$ 0)
(declare-sort A_llist_a_llist_prod_llist_set$ 0)
(declare-sort A_llist_a_llist_prod_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_prod_llist_llist_set$ 0)
(declare-sort A_llist_llist_a_llist_llist_prod_set$ 0)
(declare-sort A_llist_a_llist_prod_llist_llist_llist_set$ 0)
(declare-sort A_llist_llist_a_llist_llist_prod_llist_set$ 0)
(declare-sort A_llist_llist_llist_a_llist_llist_llist_prod_set$ 0)
(declare-sort A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_set$ 0)
(declare-sort A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_llist_set$ 0)
(declare-sort A_llist_a_llist_prod_llist_llist_a_llist_a_llist_prod_llist_llist_prod_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))))
(declare-datatypes () ((A_llist_a_llist_prod$ (pair$ (fst$ A_llist$) (snd$ A_llist$)))))
(declare-codatatypes () ((A_llist_a_llist_prod_llist$ (lNil$c) (lCons$c (lhd$c A_llist_a_llist_prod$) (ltl$c A_llist_a_llist_prod_llist$)))
  (A_llist_a_llist_prod_llist_llist$ (lNil$d) (lCons$d (lhd$d A_llist_a_llist_prod_llist$) (ltl$d A_llist_a_llist_prod_llist_llist$)))
  (A_llist_llist_llist_llist$ (lNil$e) (lCons$e (lhd$e A_llist_llist_llist$) (ltl$e A_llist_llist_llist_llist$)))
  (A_llist_a_llist_prod_llist_llist_llist$ (lNil$f) (lCons$f (lhd$f A_llist_a_llist_prod_llist_llist$) (ltl$f A_llist_a_llist_prod_llist_llist_llist$)))))
(declare-datatypes () ((A_llist_llist_a_llist_llist_prod$ (pair$a (fst$a A_llist_llist$) (snd$a A_llist_llist$)))))
(declare-codatatypes () ((A_llist_llist_a_llist_llist_prod_llist$ (lNil$g) (lCons$g (lhd$g A_llist_llist_a_llist_llist_prod$) (ltl$g A_llist_llist_a_llist_llist_prod_llist$)))))
(declare-datatypes () ((A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod$ (pair$b (fst$b A_llist_a_llist_prod_llist$) (snd$b A_llist_a_llist_prod_llist$)))))
(declare-codatatypes () ((A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_llist$ (lNil$h) (lCons$h (lhd$h A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod$) (ltl$h A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_llist$)))))
(declare-datatypes () ((A_llist_llist_llist_a_llist_llist_llist_prod$ (pair$c (fst$c A_llist_llist_llist$) (snd$c A_llist_llist_llist$)))
  (A_llist_a_llist_prod_llist_llist_a_llist_a_llist_prod_llist_llist_prod$ (pair$d (fst$d A_llist_a_llist_prod_llist_llist$) (snd$d A_llist_a_llist_prod_llist_llist$)))))
(declare-fun a$ () A$)
(declare-fun l$ () A_llist$)
(declare-fun p$ (A_llist$) Bool)
(declare-fun x$ () A_llist$)
(declare-fun uu$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun top$ () A_set$)
(declare-fun top$a () A_llist_llist_set$)
(declare-fun top$b () A_llist_a_llist_prod_llist_set$)
(declare-fun top$c () A_llist_a_llist_prod_set$)
(declare-fun top$d () A_llist_set$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun alllsts$ (A_llist_llist_llist_set$) A_llist_llist_llist_llist_set$)
(declare-fun collect$ (A_llist_a_llist_prod_bool_fun$) A_llist_a_llist_prod_set$)
(declare-fun finlsts$ (A_set$) A_llist_set$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lmember$ (A_llist_llist$ A_llist_llist_llist$) Bool)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_set$) Bool)
(declare-fun member$c (A_llist_llist_llist$ A_llist_llist_llist_set$) Bool)
(declare-fun member$d (A_llist_a_llist_prod_llist_llist_llist$ A_llist_a_llist_prod_llist_llist_llist_set$) Bool)
(declare-fun member$e (A_llist_a_llist_prod_llist_llist$ A_llist_a_llist_prod_llist_llist_set$) Bool)
(declare-fun member$f (A_llist_llist_a_llist_llist_prod_llist$ A_llist_llist_a_llist_llist_prod_llist_set$) Bool)
(declare-fun member$g (A_llist_llist_a_llist_llist_prod$ A_llist_llist_a_llist_llist_prod_set$) Bool)
(declare-fun member$h (A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_llist$ A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_llist_set$) Bool)
(declare-fun member$i (A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod$ A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_set$) Bool)
(declare-fun member$j (A_llist_a_llist_prod_llist$ A_llist_a_llist_prod_llist_set$) Bool)
(declare-fun member$k (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun member$l (A_llist_a_llist_prod$ A_llist_a_llist_prod_set$) Bool)
(declare-fun member$m (A_llist_llist_llist_a_llist_llist_llist_prod$ A_llist_llist_llist_a_llist_llist_llist_prod_set$) Bool)
(declare-fun member$n (A_llist_a_llist_prod_llist_llist_a_llist_a_llist_prod_llist_llist_prod$ A_llist_a_llist_prod_llist_llist_a_llist_a_llist_prod_llist_llist_prod_set$) Bool)
(declare-fun alllsts$a (A_llist_a_llist_prod_llist_llist_set$) A_llist_a_llist_prod_llist_llist_llist_set$)
(declare-fun alllsts$b (A_llist_llist_a_llist_llist_prod_set$) A_llist_llist_a_llist_llist_prod_llist_set$)
(declare-fun alllsts$c (A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_set$) A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_llist_set$)
(declare-fun alllsts$d (A_llist_a_llist_prod_llist_set$) A_llist_a_llist_prod_llist_llist_set$)
(declare-fun alllsts$e (A_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun alllsts$f (A_llist_set$) A_llist_llist_set$)
(declare-fun alllsts$g (A_llist_a_llist_prod_set$) A_llist_a_llist_prod_llist_set$)
(declare-fun alllsts$h (A_set$) A_llist_set$)
(declare-fun alllstsp$ (A_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun finlsts$a (A_llist_llist_llist_set$) A_llist_llist_llist_llist_set$)
(declare-fun finlsts$b (A_llist_a_llist_prod_llist_llist_set$) A_llist_a_llist_prod_llist_llist_llist_set$)
(declare-fun finlsts$c (A_llist_llist_a_llist_llist_prod_set$) A_llist_llist_a_llist_llist_prod_llist_set$)
(declare-fun finlsts$d (A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_set$) A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_llist_set$)
(declare-fun finlsts$e (A_llist_a_llist_prod_llist_set$) A_llist_a_llist_prod_llist_llist_set$)
(declare-fun finlsts$f (A_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun finlsts$g (A_llist_set$) A_llist_llist_set$)
(declare-fun finlsts$h (A_llist_a_llist_prod_set$) A_llist_a_llist_prod_llist_set$)
(declare-fun finlstsp$ (A_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_prod_llist_bool_fun$ A_llist_a_llist_prod_llist$) Bool)
(declare-fun fun_app$d (A_llist_a_llist_prod_bool_fun$ A_llist_a_llist_prod$) Bool)
(declare-fun fun_app$e (A_bool_fun$ A$) Bool)
(declare-fun lmember$a (A_llist_a_llist_prod_llist$ A_llist_a_llist_prod_llist_llist$) Bool)
(declare-fun lmember$b (A_llist_a_llist_prod$) A_llist_a_llist_prod_llist_bool_fun$)
(declare-fun lmember$c (A_llist$) A_llist_llist_bool_fun$)
(declare-fun lmember$d (A$) A_llist_bool_fun$)
(declare-fun alllstsp$a (A_llist_a_llist_prod_llist_bool_fun$ A_llist_a_llist_prod_llist_llist$) Bool)
(declare-fun alllstsp$b (A_llist_a_llist_prod_bool_fun$) A_llist_a_llist_prod_llist_bool_fun$)
(declare-fun alllstsp$c (A_llist_bool_fun$) A_llist_llist_bool_fun$)
(declare-fun alllstsp$d (A_bool_fun$) A_llist_bool_fun$)
(declare-fun case_prod$ (A_llist_a_llist_bool_fun_fun$) A_llist_a_llist_prod_bool_fun$)
(declare-fun finlstsp$a (A_llist_a_llist_prod_llist_bool_fun$ A_llist_a_llist_prod_llist_llist$) Bool)
(declare-fun finlstsp$b (A_llist_a_llist_prod_bool_fun$) A_llist_a_llist_prod_llist_bool_fun$)
(declare-fun finlstsp$c (A_llist_bool_fun$) A_llist_llist_bool_fun$)
(declare-fun finlstsp$d (A_bool_fun$) A_llist_bool_fun$)
(declare-fun pred_llist$ (A_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun pred_llist$a (A_llist_a_llist_prod_llist_bool_fun$ A_llist_a_llist_prod_llist_llist$) Bool)
(declare-fun pred_llist$b (A_llist_a_llist_prod_bool_fun$) A_llist_a_llist_prod_llist_bool_fun$)
(declare-fun pred_llist$c (A_llist_bool_fun$) A_llist_llist_bool_fun$)
(declare-fun pred_llist$d (A_bool_fun$) A_llist_bool_fun$)
(declare-fun finlsts_pred$ () A_llist_llist_llist_a_llist_llist_llist_prod_set$)
(declare-fun finlsts_pred$a () A_llist_a_llist_prod_llist_llist_a_llist_a_llist_prod_llist_llist_prod_set$)
(declare-fun finlsts_pred$b () A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_set$)
(declare-fun finlsts_pred$c () A_llist_llist_a_llist_llist_prod_set$)
(declare-fun finlsts_pred$d () A_llist_a_llist_prod_set$)
(declare-fun lstrict_prefix$ (A_llist_llist_llist$ A_llist_llist_llist$) Bool)
(declare-fun lstrict_prefix$a (A_llist_a_llist_prod_llist_llist$ A_llist_a_llist_prod_llist_llist$) Bool)
(declare-fun lstrict_prefix$b (A_llist_a_llist_prod_llist$) A_llist_a_llist_prod_llist_bool_fun$)
(declare-fun lstrict_prefix$c (A_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun lstrict_prefix$d (A_llist$) A_llist_bool_fun$)
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$ (fun_app$a uu$ ?v0) ?v1) (and (member$ ?v0 (finlsts$ top$)) (exists ((?v2 A$)) (= (lCons$ ?v2 ?v0) ?v1)))) :pattern ((fun_app$ (fun_app$a uu$ ?v0) ?v1)))) :named a0))
(assert (! (not (p$ (lCons$ a$ l$))) :named a1))
(assert (! (member$ x$ (finlsts$ top$)) :named a2))
(assert (! (member$ l$ (finlsts$ top$)) :named a3))
(assert (! (member$a a$ top$) :named a4))
(assert (! (p$ l$) :named a5))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_llist_llist$)) (= (= (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a6))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist_llist$) (?v2 A_llist_a_llist_prod_llist$) (?v3 A_llist_a_llist_prod_llist_llist$)) (= (= (lCons$d ?v0 ?v1) (lCons$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a7))
(assert (! (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod$) (?v3 A_llist_a_llist_prod_llist$)) (= (= (lCons$c ?v0 ?v1) (lCons$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a10))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$) (?v1 A_llist_llist_llist_set$) (?v2 A_llist_llist_llist$)) (=> (and (member$b ?v0 (finlsts$a ?v1)) (member$c ?v2 ?v1)) (member$b (lCons$e ?v2 ?v0) (finlsts$a ?v1)))) :named a11))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_llist_llist$) (?v1 A_llist_a_llist_prod_llist_llist_set$) (?v2 A_llist_a_llist_prod_llist_llist$)) (=> (and (member$d ?v0 (finlsts$b ?v1)) (member$e ?v2 ?v1)) (member$d (lCons$f ?v2 ?v0) (finlsts$b ?v1)))) :named a12))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_prod_llist$) (?v1 A_llist_llist_a_llist_llist_prod_set$) (?v2 A_llist_llist_a_llist_llist_prod$)) (=> (and (member$f ?v0 (finlsts$c ?v1)) (member$g ?v2 ?v1)) (member$f (lCons$g ?v2 ?v0) (finlsts$c ?v1)))) :named a13))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_set$) (?v2 A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod$)) (=> (and (member$h ?v0 (finlsts$d ?v1)) (member$i ?v2 ?v1)) (member$h (lCons$h ?v2 ?v0) (finlsts$d ?v1)))) :named a14))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_llist$) (?v1 A_llist_a_llist_prod_llist_set$) (?v2 A_llist_a_llist_prod_llist$)) (=> (and (member$e ?v0 (finlsts$e ?v1)) (member$j ?v2 ?v1)) (member$e (lCons$d ?v2 ?v0) (finlsts$e ?v1)))) :named a15))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist$)) (=> (and (member$c ?v0 (finlsts$f ?v1)) (member$k ?v2 ?v1)) (member$c (lCons$b ?v2 ?v0) (finlsts$f ?v1)))) :named a16))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$) (?v2 A_llist$)) (=> (and (member$k ?v0 (finlsts$g ?v1)) (member$ ?v2 ?v1)) (member$k (lCons$a ?v2 ?v0) (finlsts$g ?v1)))) :named a17))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_set$) (?v2 A_llist_a_llist_prod$)) (=> (and (member$j ?v0 (finlsts$h ?v1)) (member$l ?v2 ?v1)) (member$j (lCons$c ?v2 ?v0) (finlsts$h ?v1)))) :named a18))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A$)) (=> (and (member$ ?v0 (finlsts$ ?v1)) (member$a ?v2 ?v1)) (member$ (lCons$ ?v2 ?v0) (finlsts$ ?v1)))) :named a19))
(assert (! (forall ((?v0 A_llist$)) (=> (forall ((?v1 A_llist$)) (=> (member$l (pair$ ?v1 ?v0) (collect$ (case_prod$ uu$))) (p$ ?v1))) (p$ ?v0))) :named a20))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist_llist$) (?v2 A_llist_llist_llist_set$)) (= (member$b (lCons$e ?v0 ?v1) (alllsts$ ?v2)) (and (member$c ?v0 ?v2) (member$b ?v1 (alllsts$ ?v2))))) :named a21))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_llist$) (?v1 A_llist_a_llist_prod_llist_llist_llist$) (?v2 A_llist_a_llist_prod_llist_llist_set$)) (= (member$d (lCons$f ?v0 ?v1) (alllsts$a ?v2)) (and (member$e ?v0 ?v2) (member$d ?v1 (alllsts$a ?v2))))) :named a22))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_prod$) (?v1 A_llist_llist_a_llist_llist_prod_llist$) (?v2 A_llist_llist_a_llist_llist_prod_set$)) (= (member$f (lCons$g ?v0 ?v1) (alllsts$b ?v2)) (and (member$g ?v0 ?v2) (member$f ?v1 (alllsts$b ?v2))))) :named a23))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod$) (?v1 A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_llist$) (?v2 A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_set$)) (= (member$h (lCons$h ?v0 ?v1) (alllsts$c ?v2)) (and (member$i ?v0 ?v2) (member$h ?v1 (alllsts$c ?v2))))) :named a24))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist_llist$) (?v2 A_llist_a_llist_prod_llist_set$)) (= (member$e (lCons$d ?v0 ?v1) (alllsts$d ?v2)) (and (member$j ?v0 ?v2) (member$e ?v1 (alllsts$d ?v2))))) :named a25))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_set$)) (= (member$c (lCons$b ?v0 ?v1) (alllsts$e ?v2)) (and (member$k ?v0 ?v2) (member$c ?v1 (alllsts$e ?v2))))) :named a26))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_set$)) (= (member$k (lCons$a ?v0 ?v1) (alllsts$f ?v2)) (and (member$ ?v0 ?v2) (member$k ?v1 (alllsts$f ?v2))))) :named a27))
(assert (! (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_set$)) (= (member$j (lCons$c ?v0 ?v1) (alllsts$g ?v2)) (and (member$l ?v0 ?v2) (member$j ?v1 (alllsts$g ?v2))))) :named a28))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_set$)) (= (member$ (lCons$ ?v0 ?v1) (alllsts$h ?v2)) (and (member$a ?v0 ?v2) (member$ ?v1 (alllsts$h ?v2))))) :named a29))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist$)) (=> (and (finlstsp$ ?v0 ?v1) (fun_app$b ?v0 ?v2)) (finlstsp$ ?v0 (lCons$b ?v2 ?v1)))) :named a30))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_bool_fun$) (?v1 A_llist_a_llist_prod_llist_llist$) (?v2 A_llist_a_llist_prod_llist$)) (=> (and (finlstsp$a ?v0 ?v1) (fun_app$c ?v0 ?v2)) (finlstsp$a ?v0 (lCons$d ?v2 ?v1)))) :named a31))
(assert (! (forall ((?v0 A_llist_a_llist_prod_bool_fun$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod$)) (=> (and (fun_app$c (finlstsp$b ?v0) ?v1) (fun_app$d ?v0 ?v2)) (fun_app$c (finlstsp$b ?v0) (lCons$c ?v2 ?v1)))) :named a32))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (finlstsp$c ?v0) ?v1) (fun_app$ ?v0 ?v2)) (fun_app$b (finlstsp$c ?v0) (lCons$a ?v2 ?v1)))) :named a33))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$)) (=> (and (fun_app$ (finlstsp$d ?v0) ?v1) (fun_app$e ?v0 ?v2)) (fun_app$ (finlstsp$d ?v0) (lCons$ ?v2 ?v1)))) :named a34))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist$)) (=> (and (alllstsp$ ?v0 ?v1) (fun_app$b ?v0 ?v2)) (alllstsp$ ?v0 (lCons$b ?v2 ?v1)))) :named a35))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_bool_fun$) (?v1 A_llist_a_llist_prod_llist_llist$) (?v2 A_llist_a_llist_prod_llist$)) (=> (and (alllstsp$a ?v0 ?v1) (fun_app$c ?v0 ?v2)) (alllstsp$a ?v0 (lCons$d ?v2 ?v1)))) :named a36))
(assert (! (forall ((?v0 A_llist_a_llist_prod_bool_fun$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod$)) (=> (and (fun_app$c (alllstsp$b ?v0) ?v1) (fun_app$d ?v0 ?v2)) (fun_app$c (alllstsp$b ?v0) (lCons$c ?v2 ?v1)))) :named a37))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (alllstsp$c ?v0) ?v1) (fun_app$ ?v0 ?v2)) (fun_app$b (alllstsp$c ?v0) (lCons$a ?v2 ?v1)))) :named a38))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$)) (=> (and (fun_app$ (alllstsp$d ?v0) ?v1) (fun_app$e ?v0 ?v2)) (fun_app$ (alllstsp$d ?v0) (lCons$ ?v2 ?v1)))) :named a39))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$) (?v1 A_llist_llist_llist_set$) (?v2 A_llist_llist_llist$)) (=> (and (member$b ?v0 (alllsts$ ?v1)) (member$c ?v2 ?v1)) (member$b (lCons$e ?v2 ?v0) (alllsts$ ?v1)))) :named a40))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_llist_llist$) (?v1 A_llist_a_llist_prod_llist_llist_set$) (?v2 A_llist_a_llist_prod_llist_llist$)) (=> (and (member$d ?v0 (alllsts$a ?v1)) (member$e ?v2 ?v1)) (member$d (lCons$f ?v2 ?v0) (alllsts$a ?v1)))) :named a41))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_prod_llist$) (?v1 A_llist_llist_a_llist_llist_prod_set$) (?v2 A_llist_llist_a_llist_llist_prod$)) (=> (and (member$f ?v0 (alllsts$b ?v1)) (member$g ?v2 ?v1)) (member$f (lCons$g ?v2 ?v0) (alllsts$b ?v1)))) :named a42))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod_set$) (?v2 A_llist_a_llist_prod_llist_a_llist_a_llist_prod_llist_prod$)) (=> (and (member$h ?v0 (alllsts$c ?v1)) (member$i ?v2 ?v1)) (member$h (lCons$h ?v2 ?v0) (alllsts$c ?v1)))) :named a43))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_llist$) (?v1 A_llist_a_llist_prod_llist_set$) (?v2 A_llist_a_llist_prod_llist$)) (=> (and (member$e ?v0 (alllsts$d ?v1)) (member$j ?v2 ?v1)) (member$e (lCons$d ?v2 ?v0) (alllsts$d ?v1)))) :named a44))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist$)) (=> (and (member$c ?v0 (alllsts$e ?v1)) (member$k ?v2 ?v1)) (member$c (lCons$b ?v2 ?v0) (alllsts$e ?v1)))) :named a45))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$) (?v2 A_llist$)) (=> (and (member$k ?v0 (alllsts$f ?v1)) (member$ ?v2 ?v1)) (member$k (lCons$a ?v2 ?v0) (alllsts$f ?v1)))) :named a46))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_set$) (?v2 A_llist_a_llist_prod$)) (=> (and (member$j ?v0 (alllsts$g ?v1)) (member$l ?v2 ?v1)) (member$j (lCons$c ?v2 ?v0) (alllsts$g ?v1)))) :named a47))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A$)) (=> (and (member$ ?v0 (alllsts$h ?v1)) (member$a ?v2 ?v1)) (member$ (lCons$ ?v2 ?v0) (alllsts$h ?v1)))) :named a48))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist$)) (=> (member$c ?v0 (finlsts$f ?v1)) (member$m (pair$c ?v0 (lCons$b ?v2 ?v0)) finlsts_pred$))) :named a49))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_llist$) (?v1 A_llist_a_llist_prod_llist_set$) (?v2 A_llist_a_llist_prod_llist$)) (=> (member$e ?v0 (finlsts$e ?v1)) (member$n (pair$d ?v0 (lCons$d ?v2 ?v0)) finlsts_pred$a))) :named a50))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_set$) (?v2 A_llist_a_llist_prod$)) (=> (member$j ?v0 (finlsts$h ?v1)) (member$i (pair$b ?v0 (lCons$c ?v2 ?v0)) finlsts_pred$b))) :named a51))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$) (?v2 A_llist$)) (=> (member$k ?v0 (finlsts$g ?v1)) (member$g (pair$a ?v0 (lCons$a ?v2 ?v0)) finlsts_pred$c))) :named a52))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A$)) (=> (member$ ?v0 (finlsts$ ?v1)) (member$l (pair$ ?v0 (lCons$ ?v2 ?v0)) finlsts_pred$d))) :named a53))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist_llist$)) (! (= (lmember$ ?v0 (lCons$b ?v1 ?v2)) (or (= ?v0 ?v1) (lmember$ ?v0 ?v2))) :pattern ((lmember$ ?v0 (lCons$b ?v1 ?v2))))) :named a54))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_llist_llist$)) (! (= (lmember$a ?v0 (lCons$d ?v1 ?v2)) (or (= ?v0 ?v1) (lmember$a ?v0 ?v2))) :pattern ((lmember$a ?v0 (lCons$d ?v1 ?v2))))) :named a55))
(assert (! (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod$) (?v2 A_llist_a_llist_prod_llist$)) (! (= (fun_app$c (lmember$b ?v0) (lCons$c ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$c (lmember$b ?v0) ?v2))) :pattern ((fun_app$c (lmember$b ?v0) (lCons$c ?v1 ?v2))))) :named a56))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist_llist$)) (! (= (fun_app$b (lmember$c ?v0) (lCons$a ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$b (lmember$c ?v0) ?v2))) :pattern ((fun_app$b (lmember$c ?v0) (lCons$a ?v1 ?v2))))) :named a57))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (lmember$d ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$ (lmember$d ?v0) ?v2))) :pattern ((fun_app$ (lmember$d ?v0) (lCons$ ?v1 ?v2))))) :named a58))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist_llist$)) (! (= (pred_llist$ ?v0 (lCons$b ?v1 ?v2)) (and (fun_app$b ?v0 ?v1) (pred_llist$ ?v0 ?v2))) :pattern ((pred_llist$ ?v0 (lCons$b ?v1 ?v2))))) :named a59))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_bool_fun$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_llist_llist$)) (! (= (pred_llist$a ?v0 (lCons$d ?v1 ?v2)) (and (fun_app$c ?v0 ?v1) (pred_llist$a ?v0 ?v2))) :pattern ((pred_llist$a ?v0 (lCons$d ?v1 ?v2))))) :named a60))
(assert (! (forall ((?v0 A_llist_a_llist_prod_bool_fun$) (?v1 A_llist_a_llist_prod$) (?v2 A_llist_a_llist_prod_llist$)) (! (= (fun_app$c (pred_llist$b ?v0) (lCons$c ?v1 ?v2)) (and (fun_app$d ?v0 ?v1) (fun_app$c (pred_llist$b ?v0) ?v2))) :pattern ((fun_app$c (pred_llist$b ?v0) (lCons$c ?v1 ?v2))))) :named a61))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_llist$)) (! (= (fun_app$b (pred_llist$c ?v0) (lCons$a ?v1 ?v2)) (and (fun_app$ ?v0 ?v1) (fun_app$b (pred_llist$c ?v0) ?v2))) :pattern ((fun_app$b (pred_llist$c ?v0) (lCons$a ?v1 ?v2))))) :named a62))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (pred_llist$d ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$e ?v0 ?v1) (fun_app$ (pred_llist$d ?v0) ?v2))) :pattern ((fun_app$ (pred_llist$d ?v0) (lCons$ ?v1 ?v2))))) :named a63))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (=> (and (=> (= ?v0 lNil$b) false) (forall ((?v1 A_llist_llist$) (?v2 A_llist_llist_llist$)) (=> (= ?v0 (lCons$b ?v1 ?v2)) false))) false)) :named a64))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_llist$)) (=> (and (=> (= ?v0 lNil$d) false) (forall ((?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod_llist_llist$)) (=> (= ?v0 (lCons$d ?v1 ?v2)) false))) false)) :named a65))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist$)) (=> (and (=> (= ?v0 lNil$c) false) (forall ((?v1 A_llist_a_llist_prod$) (?v2 A_llist_a_llist_prod_llist$)) (=> (= ?v0 (lCons$c ?v1 ?v2)) false))) false)) :named a66))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (and (=> (= ?v0 lNil$a) false) (forall ((?v1 A_llist$) (?v2 A_llist_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) false))) false)) :named a67))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false))) false)) :named a68))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_llist_llist$)) (! (= (lstrict_prefix$ (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (lstrict_prefix$ ?v1 ?v3))) :pattern ((lstrict_prefix$ (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3))))) :named a69))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist_llist$) (?v2 A_llist_a_llist_prod_llist$) (?v3 A_llist_a_llist_prod_llist_llist$)) (! (= (lstrict_prefix$a (lCons$d ?v0 ?v1) (lCons$d ?v2 ?v3)) (and (= ?v0 ?v2) (lstrict_prefix$a ?v1 ?v3))) :pattern ((lstrict_prefix$a (lCons$d ?v0 ?v1) (lCons$d ?v2 ?v3))))) :named a70))
(assert (! (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod$) (?v3 A_llist_a_llist_prod_llist$)) (! (= (fun_app$c (lstrict_prefix$b (lCons$c ?v0 ?v1)) (lCons$c ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$c (lstrict_prefix$b ?v1) ?v3))) :pattern ((fun_app$c (lstrict_prefix$b (lCons$c ?v0 ?v1)) (lCons$c ?v2 ?v3))))) :named a71))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (! (= (fun_app$b (lstrict_prefix$c (lCons$a ?v0 ?v1)) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$b (lstrict_prefix$c ?v1) ?v3))) :pattern ((fun_app$b (lstrict_prefix$c (lCons$a ?v0 ?v1)) (lCons$a ?v2 ?v3))))) :named a72))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$ (lstrict_prefix$d (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$ (lstrict_prefix$d ?v1) ?v3))) :pattern ((fun_app$ (lstrict_prefix$d (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))) :named a73))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (member$c ?v0 (alllsts$e top$a))) :named a74))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_llist$)) (member$e ?v0 (alllsts$d top$b))) :named a75))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist$)) (member$j ?v0 (alllsts$g top$c))) :named a76))
(assert (! (forall ((?v0 A_llist_llist$)) (member$k ?v0 (alllsts$f top$d))) :named a77))
(assert (! (forall ((?v0 A_llist$)) (member$ ?v0 (alllsts$h top$))) :named a78))
(check-sat)
;(get-unsat-core)
