; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 281
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Nat_a_option_fun$ 0)
(declare-datatypes () ((A_option$ (none$) (some$ (the$ A$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun k$ () Nat$)
(declare-fun ja$ () Nat$)
(declare-fun ta$ () A_llist$)
(declare-fun ran$ (Nat_a_option_fun$) A_set$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun ll2f$ (A_llist$) Nat_a_option_fun$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun finlsts$ (A_set$) A_llist_set$)
(declare-fun fun_app$ (Nat_a_option_fun$ Nat$) A_option$)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun llength$ (A_llist$) Nat$)
(assert (! (not (= (fun_app$ (ll2f$ ta$) (suc$ k$)) none$)) :named a0))
(assert (! (less_eq$ ja$ (suc$ k$)) :named a1))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (and (= (fun_app$ (ll2f$ ?v0) ?v1) none$) (less_eq$ ?v1 k$)) (= (fun_app$ (ll2f$ ?v0) k$) none$))) :named a2))
(assert (! (= (fun_app$ (ll2f$ ta$) ja$) none$) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (! (=> (= (fun_app$ (ll2f$ ?v0) ?v1) none$) (= (fun_app$ (ll2f$ ?v0) (suc$ ?v1)) none$)) :pattern ((fun_app$ (ll2f$ ?v0) (suc$ ?v1))))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 A_option$)) (=> (and (=> (= ?v0 none$) false) (=> (not (= ?v0 none$)) false)) false)) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a9))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (ll2f$ lNil$) ?v0) none$) :pattern ((fun_app$ (ll2f$ lNil$) ?v0)))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less_eq$ (suc$ ?v0) (suc$ ?v1)) (less_eq$ ?v0 ?v1)) :pattern ((less_eq$ (suc$ ?v0) (suc$ ?v1))))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$) (?v2 A$)) (=> (and (= (fun_app$ (ll2f$ ?v0) (suc$ ?v1)) (some$ ?v2)) (forall ((?v3 A$)) (=> (= (fun_app$ (ll2f$ ?v0) ?v1) (some$ ?v3)) false))) false)) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$) (?v2 A$)) (=> (= (fun_app$ (ll2f$ ?v0) (suc$ ?v1)) (some$ ?v2)) (exists ((?v3 A$)) (= (fun_app$ (ll2f$ ?v0) ?v1) (some$ ?v3))))) :named a13))
(assert (! (forall ((?v0 A_llist$)) (! (= (lset$ ?v0) (ran$ (ll2f$ ?v0))) :pattern ((lset$ ?v0)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (member$ ?v0 (finlsts$ ?v1)) (= (fun_app$ (ll2f$ ?v0) (llength$ ?v0)) none$))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (some$ ?v0) (some$ ?v1)) (= ?v0 ?v1))) :named a16))
(check-sat)
;(get-unsat-core)
