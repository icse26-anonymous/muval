; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 384
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_set_a_set_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_llist_set$ 0)
(declare-sort A_bool_fun_a_bool_fun_fun$ 0)
(declare-sort A_llist_set_a_llist_set_fun$ 0)
(declare-sort A_llist_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_llist_llist_set$ 0)
(declare-sort A_llist_bool_fun_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_set_a_llist_llist_set_fun$ 0)
(declare-sort A_llist_llist_bool_fun_a_llist_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))))
(declare-fun a$ () A_set$)
(declare-fun bot$ () A_llist_set$)
(declare-fun inf$ (A_llist_set$) A_llist_set_a_llist_set_fun$)
(declare-fun bot$a () A_llist_llist_llist_set$)
(declare-fun bot$b () A_llist_llist_llist_llist_set$)
(declare-fun bot$c () A_llist_llist_set$)
(declare-fun bot$d () A_set$)
(declare-fun bot$e () A_llist_llist_bool_fun$)
(declare-fun bot$f () A_bool_fun$)
(declare-fun bot$g () A_llist_bool_fun$)
(declare-fun bot$h () A_llist_llist_llist_bool_fun$)
(declare-fun inf$a (A_llist_llist_llist_set$ A_llist_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun inf$b (A_llist_llist_bool_fun$) A_llist_llist_bool_fun_a_llist_llist_bool_fun_fun$)
(declare-fun inf$c (A_bool_fun$) A_bool_fun_a_bool_fun_fun$)
(declare-fun inf$d (A_set$) A_set_a_set_fun$)
(declare-fun inf$e (A_llist_llist_set$) A_llist_llist_set_a_llist_llist_set_fun$)
(declare-fun inf$f (A_llist_bool_fun$) A_llist_bool_fun_a_llist_bool_fun_fun$)
(declare-fun inf$g (Bool Bool) Bool)
(declare-fun member$ (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun collect$ (A_llist_llist_llist_bool_fun$) A_llist_llist_llist_set$)
(declare-fun finlsts$ (A_set$) A_llist_set$)
(declare-fun fun_app$ (A_llist_set_a_llist_set_fun$ A_llist_set$) A_llist_set$)
(declare-fun inflsts$ (A_set$) A_llist_set$)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (A_llist$ A_llist_set$) Bool)
(declare-fun member$c (A_llist_llist_llist$ A_llist_llist_llist_set$) Bool)
(declare-fun collect$a (A_bool_fun$) A_set$)
(declare-fun collect$b (A_llist_llist_bool_fun$) A_llist_llist_set$)
(declare-fun collect$c (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$a (A_llist_llist_bool_fun_a_llist_llist_bool_fun_fun$ A_llist_llist_bool_fun$) A_llist_llist_bool_fun$)
(declare-fun fun_app$b (A_bool_fun_a_bool_fun_fun$ A_bool_fun$) A_bool_fun$)
(declare-fun fun_app$c (A_set_a_set_fun$ A_set$) A_set$)
(declare-fun fun_app$d (A_llist_llist_set_a_llist_llist_set_fun$ A_llist_llist_set$) A_llist_llist_set$)
(declare-fun fun_app$e (A_llist_bool_fun_a_llist_bool_fun_fun$ A_llist_bool_fun$) A_llist_bool_fun$)
(declare-fun fun_app$f (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$g (A_llist_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun fun_app$h (A_bool_fun$ A$) Bool)
(declare-fun fun_app$i (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun inflsts$a (A_llist_llist_llist_set$) A_llist_llist_llist_llist_set$)
(declare-fun inflsts$b (A_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun inflsts$c (A_llist_set$) A_llist_llist_set$)
(assert (! (not (= (fun_app$ (inf$ (finlsts$ a$)) (inflsts$ a$)) bot$)) :named a0))
(assert (! (= (inflsts$a bot$a) bot$b) :named a1))
(assert (! (= (inflsts$b bot$c) bot$a) :named a2))
(assert (! (= (inflsts$c bot$) bot$c) :named a3))
(assert (! (= (inflsts$ bot$d) bot$) :named a4))
(assert (! (forall ((?v0 A_llist_llist_llist_set$)) (= (inf$a ?v0 bot$a) bot$a)) :named a5))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$)) (= (fun_app$a (inf$b ?v0) bot$e) bot$e)) :named a6))
(assert (! (forall ((?v0 A_bool_fun$)) (= (fun_app$b (inf$c ?v0) bot$f) bot$f)) :named a7))
(assert (! (forall ((?v0 A_set$)) (= (fun_app$c (inf$d ?v0) bot$d) bot$d)) :named a8))
(assert (! (forall ((?v0 A_llist_llist_set$)) (= (fun_app$d (inf$e ?v0) bot$c) bot$c)) :named a9))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (= (fun_app$e (inf$f ?v0) bot$g) bot$g)) :named a10))
(assert (! (forall ((?v0 A_llist_set$)) (= (fun_app$ (inf$ ?v0) bot$) bot$)) :named a11))
(assert (! (forall ((?v0 A_llist_llist_llist_set$)) (= (inf$a bot$a ?v0) bot$a)) :named a12))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$)) (= (fun_app$a (inf$b bot$e) ?v0) bot$e)) :named a13))
(assert (! (forall ((?v0 A_bool_fun$)) (= (fun_app$b (inf$c bot$f) ?v0) bot$f)) :named a14))
(assert (! (forall ((?v0 A_set$)) (= (fun_app$c (inf$d bot$d) ?v0) bot$d)) :named a15))
(assert (! (forall ((?v0 A_llist_llist_set$)) (= (fun_app$d (inf$e bot$c) ?v0) bot$c)) :named a16))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (= (fun_app$e (inf$f bot$g) ?v0) bot$g)) :named a17))
(assert (! (forall ((?v0 A_llist_set$)) (= (fun_app$ (inf$ bot$) ?v0) bot$)) :named a18))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist_set$)) (= (member$ ?v0 (fun_app$d (inf$e ?v1) ?v2)) (and (member$ ?v0 ?v1) (member$ ?v0 ?v2)))) :named a19))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (member$a ?v0 (fun_app$c (inf$d ?v1) ?v2)) (and (member$a ?v0 ?v1) (member$a ?v0 ?v2)))) :named a20))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_set$)) (= (member$b ?v0 (fun_app$ (inf$ ?v1) ?v2)) (and (member$b ?v0 ?v1) (member$b ?v0 ?v2)))) :named a21))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist_set$)) (=> (and (member$ ?v0 ?v1) (member$ ?v0 ?v2)) (member$ ?v0 (fun_app$d (inf$e ?v1) ?v2)))) :named a22))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$a ?v0 ?v1) (member$a ?v0 ?v2)) (member$a ?v0 (fun_app$c (inf$d ?v1) ?v2)))) :named a23))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_set$)) (=> (and (member$b ?v0 ?v1) (member$b ?v0 ?v2)) (member$b ?v0 (fun_app$ (inf$ ?v1) ?v2)))) :named a24))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$) (?v2 A_llist$)) (! (= (fun_app$f (fun_app$e (inf$f ?v0) ?v1) ?v2) (inf$g (fun_app$f ?v0 ?v2) (fun_app$f ?v1 ?v2))) :pattern ((fun_app$f (fun_app$e (inf$f ?v0) ?v1) ?v2)))) :named a25))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$)) (= (fun_app$e (inf$f (fun_app$e (inf$f ?v0) ?v1)) ?v1) (fun_app$e (inf$f ?v0) ?v1))) :named a26))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist_set$)) (= (fun_app$d (inf$e (fun_app$d (inf$e ?v0) ?v1)) ?v1) (fun_app$d (inf$e ?v0) ?v1))) :named a27))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$c (inf$d (fun_app$c (inf$d ?v0) ?v1)) ?v1) (fun_app$c (inf$d ?v0) ?v1))) :named a28))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (fun_app$ (inf$ (fun_app$ (inf$ ?v0) ?v1)) ?v1) (fun_app$ (inf$ ?v0) ?v1))) :named a29))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$)) (= (fun_app$e (inf$f (fun_app$e (inf$f ?v0) ?v1)) ?v1) (fun_app$e (inf$f ?v0) ?v1))) :named a30))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist_set$)) (= (fun_app$d (inf$e (fun_app$d (inf$e ?v0) ?v1)) ?v1) (fun_app$d (inf$e ?v0) ?v1))) :named a31))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$c (inf$d (fun_app$c (inf$d ?v0) ?v1)) ?v1) (fun_app$c (inf$d ?v0) ?v1))) :named a32))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (fun_app$ (inf$ (fun_app$ (inf$ ?v0) ?v1)) ?v1) (fun_app$ (inf$ ?v0) ?v1))) :named a33))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$)) (= (fun_app$e (inf$f ?v0) (fun_app$e (inf$f ?v0) ?v1)) (fun_app$e (inf$f ?v0) ?v1))) :named a34))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist_set$)) (= (fun_app$d (inf$e ?v0) (fun_app$d (inf$e ?v0) ?v1)) (fun_app$d (inf$e ?v0) ?v1))) :named a35))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$c (inf$d ?v0) (fun_app$c (inf$d ?v0) ?v1)) (fun_app$c (inf$d ?v0) ?v1))) :named a36))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (fun_app$ (inf$ ?v0) (fun_app$ (inf$ ?v0) ?v1)) (fun_app$ (inf$ ?v0) ?v1))) :named a37))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$)) (= (fun_app$e (inf$f ?v0) (fun_app$e (inf$f ?v0) ?v1)) (fun_app$e (inf$f ?v0) ?v1))) :named a38))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist_set$)) (= (fun_app$d (inf$e ?v0) (fun_app$d (inf$e ?v0) ?v1)) (fun_app$d (inf$e ?v0) ?v1))) :named a39))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$c (inf$d ?v0) (fun_app$c (inf$d ?v0) ?v1)) (fun_app$c (inf$d ?v0) ?v1))) :named a40))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (fun_app$ (inf$ ?v0) (fun_app$ (inf$ ?v0) ?v1)) (fun_app$ (inf$ ?v0) ?v1))) :named a41))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (! (= (fun_app$e (inf$f ?v0) ?v0) ?v0) :pattern ((inf$f ?v0)))) :named a42))
(assert (! (forall ((?v0 A_llist_llist_set$)) (! (= (fun_app$d (inf$e ?v0) ?v0) ?v0) :pattern ((inf$e ?v0)))) :named a43))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$c (inf$d ?v0) ?v0) ?v0) :pattern ((inf$d ?v0)))) :named a44))
(assert (! (forall ((?v0 A_llist_set$)) (! (= (fun_app$ (inf$ ?v0) ?v0) ?v0) :pattern ((inf$ ?v0)))) :named a45))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (! (= (fun_app$e (inf$f ?v0) ?v0) ?v0) :pattern ((inf$f ?v0)))) :named a46))
(assert (! (forall ((?v0 A_llist_llist_set$)) (! (= (fun_app$d (inf$e ?v0) ?v0) ?v0) :pattern ((inf$e ?v0)))) :named a47))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$c (inf$d ?v0) ?v0) ?v0) :pattern ((inf$d ?v0)))) :named a48))
(assert (! (forall ((?v0 A_llist_set$)) (! (= (fun_app$ (inf$ ?v0) ?v0) ?v0) :pattern ((inf$ ?v0)))) :named a49))
(assert (! (forall ((?v0 A_llist_llist_llist_bool_fun$)) (= (= (collect$ ?v0) bot$a) (forall ((?v1 A_llist_llist_llist$)) (not (fun_app$g ?v0 ?v1))))) :named a50))
(assert (! (forall ((?v0 A_bool_fun$)) (= (= (collect$a ?v0) bot$d) (forall ((?v1 A$)) (not (fun_app$h ?v0 ?v1))))) :named a51))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$)) (= (= (collect$b ?v0) bot$c) (forall ((?v1 A_llist_llist$)) (not (fun_app$i ?v0 ?v1))))) :named a52))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (= (= (collect$c ?v0) bot$) (forall ((?v1 A_llist$)) (not (fun_app$f ?v0 ?v1))))) :named a53))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (= (member$c ?v0 bot$a) false)) :named a54))
(assert (! (forall ((?v0 A$)) (= (member$a ?v0 bot$d) false)) :named a55))
(assert (! (forall ((?v0 A_llist_llist$)) (= (member$ ?v0 bot$c) false)) :named a56))
(assert (! (forall ((?v0 A_llist$)) (= (member$b ?v0 bot$) false)) :named a57))
(assert (! (forall ((?v0 A_llist_llist_llist_bool_fun$)) (= (= bot$a (collect$ ?v0)) (forall ((?v1 A_llist_llist_llist$)) (not (fun_app$g ?v0 ?v1))))) :named a58))
(assert (! (forall ((?v0 A_bool_fun$)) (= (= bot$d (collect$a ?v0)) (forall ((?v1 A$)) (not (fun_app$h ?v0 ?v1))))) :named a59))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$)) (= (= bot$c (collect$b ?v0)) (forall ((?v1 A_llist_llist$)) (not (fun_app$i ?v0 ?v1))))) :named a60))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (= (= bot$ (collect$c ?v0)) (forall ((?v1 A_llist$)) (not (fun_app$f ?v0 ?v1))))) :named a61))
(assert (! (forall ((?v0 A_llist_llist_llist_set$)) (= (forall ((?v1 A_llist_llist_llist$)) (not (member$c ?v1 ?v0))) (= ?v0 bot$a))) :named a62))
(assert (! (forall ((?v0 A_set$)) (= (forall ((?v1 A$)) (not (member$a ?v1 ?v0))) (= ?v0 bot$d))) :named a63))
(assert (! (forall ((?v0 A_llist_llist_set$)) (= (forall ((?v1 A_llist_llist$)) (not (member$ ?v1 ?v0))) (= ?v0 bot$c))) :named a64))
(assert (! (forall ((?v0 A_llist_set$)) (= (forall ((?v1 A_llist$)) (not (member$b ?v1 ?v0))) (= ?v0 bot$))) :named a65))
(assert (! (= bot$a (collect$ bot$h)) :named a66))
(assert (! (= bot$d (collect$a bot$f)) :named a67))
(assert (! (= bot$c (collect$b bot$e)) :named a68))
(assert (! (= bot$ (collect$c bot$g)) :named a69))
(check-sat)
;(get-unsat-core)
