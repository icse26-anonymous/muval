; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 160
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_set_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_a_llist_set_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_a_llist_llist_set_fun$ 0)
(declare-sort A_llist_a_llist_set_fun$ 0)
(declare-sort A_llist_llist_a_set_fun$ 0)
(declare-sort A_llist_llist_llist_set$ 0)
(declare-sort A_llist_llist_llist_bool_fun$ 0)
(declare-sort A_a_llist_llist_llist_set_fun$ 0)
(declare-sort A_llist_a_llist_llist_set_fun$ 0)
(declare-sort A_llist_llist_a_llist_set_fun$ 0)
(declare-sort A_llist_llist_llist_llist_set$ 0)
(declare-sort A_llist_llist_a_llist_llist_set_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))))
(declare-fun bot$ () A_set$)
(declare-fun bind$ (A_set$ A_a_set_fun$) A_set$)
(declare-fun bot$a () A_llist_set$)
(declare-fun bot$b () A_llist_llist_llist_set$)
(declare-fun bot$c () A_llist_llist_set$)
(declare-fun bot$d () A_llist_llist_bool_fun$)
(declare-fun bot$e () Bool)
(declare-fun bot$f () A_llist_bool_fun$)
(declare-fun bot$g () A_bool_fun$)
(declare-fun bot$h () A_llist_llist_llist_llist_set$)
(declare-fun bot$i () A_llist_llist_llist_bool_fun$)
(declare-fun bind$a (A_set$ A_a_llist_set_fun$) A_llist_set$)
(declare-fun bind$b (A_llist_set$ A_llist_a_set_fun$) A_set$)
(declare-fun bind$c (A_llist_set$ A_llist_a_llist_set_fun$) A_llist_set$)
(declare-fun bind$d (A_set$ A_a_llist_llist_set_fun$) A_llist_llist_set$)
(declare-fun bind$e (A_llist_llist_set$ A_llist_llist_a_set_fun$) A_set$)
(declare-fun bind$f (A_llist_set$ A_llist_a_llist_llist_set_fun$) A_llist_llist_set$)
(declare-fun bind$g (A_llist_llist_set$ A_llist_llist_a_llist_set_fun$) A_llist_set$)
(declare-fun bind$h (A_llist_llist_set$ A_llist_llist_a_llist_llist_set_fun$) A_llist_llist_set$)
(declare-fun bind$i (A_set$ A_a_llist_llist_llist_set_fun$) A_llist_llist_llist_set$)
(declare-fun member$ (A_llist_llist_llist$ A_llist_llist_llist_set$) Bool)
(declare-fun collect$ (A_llist_llist_llist_bool_fun$) A_llist_llist_llist_set$)
(declare-fun fpslsts$ (A_llist_llist_llist_set$) A_llist_llist_llist_llist_set$)
(declare-fun fun_app$ (A_llist_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun inflsts$ (A_set$) A_llist_set$)
(declare-fun member$a (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun member$b (A$ A_set$) Bool)
(declare-fun member$c (A_llist$ A_llist_set$) Bool)
(declare-fun poslsts$ (A_llist_llist_llist_set$) A_llist_llist_llist_llist_set$)
(declare-fun collect$a (A_llist_llist_bool_fun$) A_llist_llist_set$)
(declare-fun collect$b (A_bool_fun$) A_set$)
(declare-fun collect$c (A_llist_bool_fun$) A_llist_set$)
(declare-fun fpslsts$a (A_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun fpslsts$b (A_set$) A_llist_set$)
(declare-fun fpslsts$c (A_llist_set$) A_llist_llist_set$)
(declare-fun fun_app$a (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun is_empty$ (A_llist_llist_llist_set$) Bool)
(declare-fun poslsts$a (A_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun poslsts$b (A_set$) A_llist_set$)
(declare-fun poslsts$c (A_llist_set$) A_llist_llist_set$)
(declare-fun is_empty$a (A_llist_llist_set$) Bool)
(declare-fun is_empty$b (A_set$) Bool)
(declare-fun is_empty$c (A_llist_set$) Bool)
(assert (! (not (= (inflsts$ bot$) bot$a)) :named a0))
(assert (! (forall ((?v0 A_llist_llist_llist_bool_fun$)) (= (= (collect$ ?v0) bot$b) (forall ((?v1 A_llist_llist_llist$)) (not (fun_app$ ?v0 ?v1))))) :named a1))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$)) (= (= (collect$a ?v0) bot$c) (forall ((?v1 A_llist_llist$)) (not (fun_app$a ?v0 ?v1))))) :named a2))
(assert (! (forall ((?v0 A_bool_fun$)) (= (= (collect$b ?v0) bot$) (forall ((?v1 A$)) (not (fun_app$b ?v0 ?v1))))) :named a3))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (= (= (collect$c ?v0) bot$a) (forall ((?v1 A_llist$)) (not (fun_app$c ?v0 ?v1))))) :named a4))
(assert (! (forall ((?v0 A_llist_llist_llist_set$)) (= (forall ((?v1 A_llist_llist_llist$)) (not (member$ ?v1 ?v0))) (= ?v0 bot$b))) :named a5))
(assert (! (forall ((?v0 A_llist_llist_set$)) (= (forall ((?v1 A_llist_llist$)) (not (member$a ?v1 ?v0))) (= ?v0 bot$c))) :named a6))
(assert (! (forall ((?v0 A_set$)) (= (forall ((?v1 A$)) (not (member$b ?v1 ?v0))) (= ?v0 bot$))) :named a7))
(assert (! (forall ((?v0 A_llist_set$)) (= (forall ((?v1 A_llist$)) (not (member$c ?v1 ?v0))) (= ?v0 bot$a))) :named a8))
(assert (! (forall ((?v0 A_llist_llist_llist_bool_fun$)) (= (= bot$b (collect$ ?v0)) (forall ((?v1 A_llist_llist_llist$)) (not (fun_app$ ?v0 ?v1))))) :named a9))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$)) (= (= bot$c (collect$a ?v0)) (forall ((?v1 A_llist_llist$)) (not (fun_app$a ?v0 ?v1))))) :named a10))
(assert (! (forall ((?v0 A_bool_fun$)) (= (= bot$ (collect$b ?v0)) (forall ((?v1 A$)) (not (fun_app$b ?v0 ?v1))))) :named a11))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (= (= bot$a (collect$c ?v0)) (forall ((?v1 A_llist$)) (not (fun_app$c ?v0 ?v1))))) :named a12))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (= (member$ ?v0 bot$b) false)) :named a13))
(assert (! (forall ((?v0 A_llist_llist$)) (= (member$a ?v0 bot$c) false)) :named a14))
(assert (! (forall ((?v0 A$)) (= (member$b ?v0 bot$) false)) :named a15))
(assert (! (forall ((?v0 A_llist$)) (= (member$c ?v0 bot$a) false)) :named a16))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$a bot$d ?v0) bot$e) :pattern ((fun_app$a bot$d ?v0)))) :named a17))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$c bot$f ?v0) bot$e) :pattern ((fun_app$c bot$f ?v0)))) :named a18))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$b bot$g ?v0) bot$e) :pattern ((fun_app$b bot$g ?v0)))) :named a19))
(assert (! (= (fpslsts$ bot$b) bot$h) :named a20))
(assert (! (= (fpslsts$a bot$c) bot$b) :named a21))
(assert (! (= (fpslsts$b bot$) bot$a) :named a22))
(assert (! (= (fpslsts$c bot$a) bot$c) :named a23))
(assert (! (= (poslsts$ bot$b) bot$h) :named a24))
(assert (! (= (poslsts$a bot$c) bot$b) :named a25))
(assert (! (= (poslsts$b bot$) bot$a) :named a26))
(assert (! (= (poslsts$c bot$a) bot$c) :named a27))
(assert (! (forall ((?v0 A_llist_llist_llist_set$)) (= (exists ((?v1 A_llist_llist_llist$)) (member$ ?v1 ?v0)) (not (= ?v0 bot$b)))) :named a28))
(assert (! (forall ((?v0 A_llist_llist_set$)) (= (exists ((?v1 A_llist_llist$)) (member$a ?v1 ?v0)) (not (= ?v0 bot$c)))) :named a29))
(assert (! (forall ((?v0 A_set$)) (= (exists ((?v1 A$)) (member$b ?v1 ?v0)) (not (= ?v0 bot$)))) :named a30))
(assert (! (forall ((?v0 A_llist_set$)) (= (exists ((?v1 A_llist$)) (member$c ?v1 ?v0)) (not (= ?v0 bot$a)))) :named a31))
(assert (! (forall ((?v0 A_llist_llist_llist_set$)) (=> (forall ((?v1 A_llist_llist_llist$)) (=> (member$ ?v1 ?v0) false)) (= ?v0 bot$b))) :named a32))
(assert (! (forall ((?v0 A_llist_llist_set$)) (=> (forall ((?v1 A_llist_llist$)) (=> (member$a ?v1 ?v0) false)) (= ?v0 bot$c))) :named a33))
(assert (! (forall ((?v0 A_set$)) (=> (forall ((?v1 A$)) (=> (member$b ?v1 ?v0) false)) (= ?v0 bot$))) :named a34))
(assert (! (forall ((?v0 A_llist_set$)) (=> (forall ((?v1 A_llist$)) (=> (member$c ?v1 ?v0) false)) (= ?v0 bot$a))) :named a35))
(assert (! (forall ((?v0 A_llist_llist_llist_set$) (?v1 A_llist_llist_llist$)) (=> (= ?v0 bot$b) (not (member$ ?v1 ?v0)))) :named a36))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist$)) (=> (= ?v0 bot$c) (not (member$a ?v1 ?v0)))) :named a37))
(assert (! (forall ((?v0 A_set$) (?v1 A$)) (=> (= ?v0 bot$) (not (member$b ?v1 ?v0)))) :named a38))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (= ?v0 bot$a) (not (member$c ?v1 ?v0)))) :named a39))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (=> (member$ ?v0 bot$b) false)) :named a40))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (member$a ?v0 bot$c) false)) :named a41))
(assert (! (forall ((?v0 A$)) (=> (member$b ?v0 bot$) false)) :named a42))
(assert (! (forall ((?v0 A_llist$)) (=> (member$c ?v0 bot$a) false)) :named a43))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$a bot$d ?v0) bot$e) :pattern ((fun_app$a bot$d ?v0)))) :named a44))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$c bot$f ?v0) bot$e) :pattern ((fun_app$c bot$f ?v0)))) :named a45))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$b bot$g ?v0) bot$e) :pattern ((fun_app$b bot$g ?v0)))) :named a46))
(assert (! (= bot$b (collect$ bot$i)) :named a47))
(assert (! (= bot$c (collect$a bot$d)) :named a48))
(assert (! (= bot$ (collect$b bot$g)) :named a49))
(assert (! (= bot$a (collect$c bot$f)) :named a50))
(assert (! (forall ((?v0 A_llist_llist_llist_set$)) (! (= (is_empty$ ?v0) (= ?v0 bot$b)) :pattern ((is_empty$ ?v0)))) :named a51))
(assert (! (forall ((?v0 A_llist_llist_set$)) (! (= (is_empty$a ?v0) (= ?v0 bot$c)) :pattern ((is_empty$a ?v0)))) :named a52))
(assert (! (forall ((?v0 A_set$)) (! (= (is_empty$b ?v0) (= ?v0 bot$)) :pattern ((is_empty$b ?v0)))) :named a53))
(assert (! (forall ((?v0 A_llist_set$)) (! (= (is_empty$c ?v0) (= ?v0 bot$a)) :pattern ((is_empty$c ?v0)))) :named a54))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (! (= (fun_app$ bot$i ?v0) (member$ ?v0 bot$b)) :pattern ((fun_app$ bot$i ?v0)))) :named a55))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$a bot$d ?v0) (member$a ?v0 bot$c)) :pattern ((fun_app$a bot$d ?v0)))) :named a56))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$b bot$g ?v0) (member$b ?v0 bot$)) :pattern ((fun_app$b bot$g ?v0)))) :named a57))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$c bot$f ?v0) (member$c ?v0 bot$a)) :pattern ((fun_app$c bot$f ?v0)))) :named a58))
(assert (! (forall ((?v0 A_a_set_fun$)) (= (bind$ bot$ ?v0) bot$)) :named a59))
(assert (! (forall ((?v0 A_a_llist_set_fun$)) (= (bind$a bot$ ?v0) bot$a)) :named a60))
(assert (! (forall ((?v0 A_llist_a_set_fun$)) (= (bind$b bot$a ?v0) bot$)) :named a61))
(assert (! (forall ((?v0 A_llist_a_llist_set_fun$)) (= (bind$c bot$a ?v0) bot$a)) :named a62))
(assert (! (forall ((?v0 A_a_llist_llist_set_fun$)) (= (bind$d bot$ ?v0) bot$c)) :named a63))
(assert (! (forall ((?v0 A_llist_llist_a_set_fun$)) (= (bind$e bot$c ?v0) bot$)) :named a64))
(assert (! (forall ((?v0 A_llist_a_llist_llist_set_fun$)) (= (bind$f bot$a ?v0) bot$c)) :named a65))
(assert (! (forall ((?v0 A_llist_llist_a_llist_set_fun$)) (= (bind$g bot$c ?v0) bot$a)) :named a66))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_set_fun$)) (= (bind$h bot$c ?v0) bot$c)) :named a67))
(assert (! (forall ((?v0 A_a_llist_llist_llist_set_fun$)) (= (bind$i bot$ ?v0) bot$b)) :named a68))
(check-sat)
;(get-unsat-core)
