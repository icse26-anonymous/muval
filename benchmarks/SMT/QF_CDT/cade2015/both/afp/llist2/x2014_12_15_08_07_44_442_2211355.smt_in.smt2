; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 400
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun a$ () A_set$)
(declare-fun s$ () A_llist$)
(declare-fun t$ () A_llist$)
(declare-fun top$ () A_set$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun alllsts$ (A_set$) A_llist_set$)
(declare-fun finlsts$ (A_set$) A_llist_set$)
(declare-fun inflsts$ (A_set$) A_llist_set$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(assert (! (not (member$ (lappend$ s$ t$) (inflsts$ a$))) :named a0))
(assert (! (member$ s$ (finlsts$ a$)) :named a1))
(assert (! (member$ t$ (inflsts$ a$)) :named a2))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_set$)) (= (member$ (lappend$ ?v0 ?v1) (finlsts$ ?v2)) (and (member$ ?v0 (finlsts$ ?v2)) (member$ ?v1 (finlsts$ ?v2))))) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_llist$) (?v3 A_llist$)) (=> (member$ ?v0 (finlsts$ ?v1)) (= (= (lappend$ ?v0 ?v2) (lappend$ ?v0 ?v3)) (= ?v2 ?v3)))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_llist$)) (=> (member$ ?v0 (inflsts$ ?v1)) (= (lappend$ ?v0 ?v2) ?v0))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_set$)) (=> (member$ (lappend$ ?v0 ?v1) (finlsts$ ?v2)) (member$ ?v0 (finlsts$ ?v2)))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_llist$)) (=> (and (member$ ?v0 (finlsts$ ?v1)) (member$ ?v2 (finlsts$ ?v1))) (member$ (lappend$ ?v0 ?v2) (finlsts$ ?v1)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a8))
(assert (! (forall ((?v0 A_llist$)) (= (not (member$ ?v0 (finlsts$ top$))) (member$ ?v0 (inflsts$ top$)))) :named a9))
(assert (! (forall ((?v0 A_llist$)) (= (not (member$ ?v0 (inflsts$ top$))) (member$ ?v0 (finlsts$ top$)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (and (member$ ?v0 (alllsts$ ?v1)) (and (=> (member$ ?v0 (finlsts$ ?v1)) false) (=> (member$ ?v0 (inflsts$ ?v1)) false))) false)) :named a11))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (member$ ?v0 (finlsts$ top$)) false) (=> (member$ ?v0 (inflsts$ top$)) false)) false)) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (member$ ?v0 (inflsts$ ?v1)) (member$ ?v0 (alllsts$ ?v1)))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 (finlsts$ ?v1)) (member$ ?v0 (alllsts$ ?v2))) (member$ ?v0 (finlsts$ ?v2)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (member$ ?v0 (finlsts$ ?v1)) (member$ ?v0 (alllsts$ ?v1)))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= lNil$ (lappend$ ?v0 ?v1)) (and (= ?v0 lNil$) (= ?v1 lNil$)))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (lappend$ ?v0 ?v1) lNil$) (and (= ?v0 lNil$) (= ?v1 lNil$)))) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_set$)) (=> (member$ (lappend$ ?v0 ?v1) (alllsts$ ?v2)) (member$ ?v0 (alllsts$ ?v2)))) :named a18))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_llist$)) (=> (and (member$ ?v0 (alllsts$ ?v1)) (member$ ?v2 (alllsts$ ?v1))) (member$ (lappend$ ?v0 ?v2) (alllsts$ ?v1)))) :named a19))
(check-sat)
;(get-unsat-core)
