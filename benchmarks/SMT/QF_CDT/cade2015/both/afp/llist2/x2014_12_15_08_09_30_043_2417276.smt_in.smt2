; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 358
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-datatypes () ((A_option$ (none$) (some$ (the$ A$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun i$ () Nat$)
(declare-fun j$ () Nat$)
(declare-fun t$ () A_llist$)
(declare-fun ll2f$ (A_llist$ Nat$) A_option$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun fun_app$a (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(assert (! (not (= (ll2f$ t$ i$) none$)) :named a0))
(assert (! (= (ll2f$ t$ j$) none$) :named a1))
(assert (! (less_eq$ j$ i$) :named a2))
(assert (! (forall ((?v0 Nat$)) (less_eq$ ?v0 ?v0)) :named a3))
(assert (! (forall ((?v0 A_option$)) (=> (and (=> (= ?v0 none$) false) (=> (not (= ?v0 none$)) false)) false)) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (less_eq$ ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (or (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0))) :named a8))
(assert (! (forall ((?v0 Nat$)) (less_eq$ ?v0 ?v0)) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (=> (less_eq$ ?v0 ?v1) false) (=> (less_eq$ ?v1 ?v0) false)) false)) :named a11))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (less_eq$ ?v3 ?v4) (fun_app$ (fun_app$a ?v0 ?v3) ?v4))) (=> (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (fun_app$ (fun_app$a ?v0 ?v2) ?v1))) (fun_app$ (fun_app$a ?v0 ?v2) ?v1))) :named a12))
(assert (! (forall ((?v0 Nat$)) (less_eq$ ?v0 ?v0)) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (or (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (=> (less_eq$ ?v0 ?v1) (= (less_eq$ ?v1 ?v0) (= ?v1 ?v0))) :pattern ((less_eq$ ?v1 ?v0)))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2))) :named a16))
(check-sat)
;(get-unsat-core)
