; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 85
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_set_fun$ 0)
(declare-sort A_llist_a_llist_set_fun_a_llist_a_llist_set_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun a$ () A_set$)
(declare-fun s$ () A_llist$)
(declare-fun t$ () A_llist$)
(declare-fun uu$ (A_llist$) A_llist_a_llist_set_fun$)
(declare-fun bot$ () A_llist_set$)
(declare-fun uua$ () A_llist_a_llist_set_fun$)
(declare-fun uub$ (A_llist$) A_llist_a_llist_set_fun_a_llist_a_llist_set_fun_fun$)
(declare-fun uuc$ () A_llist_a_llist_set_fun$)
(declare-fun uud$ (A_llist_set$) A_llist_a_llist_set_fun$)
(declare-fun uue$ () A_llist_a_llist_set_fun$)
(declare-fun uuf$ (A_llist$) A_llist_bool_fun$)
(declare-fun uug$ (A_llist$) A_llist_bool_fun$)
(declare-fun insert$ (A_llist$ A_llist_set$) A_llist_set$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun alllsts$ (A_set$) A_llist_set$)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$ (A_llist_a_llist_set_fun$ A_llist$) A_llist_set$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$b (A_llist_a_llist_set_fun_a_llist_a_llist_set_fun_fun$ A_llist_a_llist_set_fun$) A_llist_a_llist_set_fun$)
(declare-fun supremum$ (A_llist_set$ A_llist_a_llist_set_fun$) A_llist_set$)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uua$ ?v0) (supremum$ (alllsts$ a$) (uu$ ?v0))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uuc$ ?v0) (insert$ ?v0 bot$)) :pattern ((fun_app$ uuc$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (insert$ (lappend$ ?v0 ?v1) bot$)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$a (uuf$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$a (uuf$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$a (uug$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$a (uug$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_set_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$b (uub$ ?v0) ?v1) ?v2) (insert$ ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$b (uub$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (! (= (fun_app$ (uud$ ?v0) ?v1) ?v0) :pattern ((fun_app$ (uud$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uue$ ?v0) bot$) :pattern ((fun_app$ uue$ ?v0)))) :named a7))
(assert (! (not (member$ (lappend$ s$ t$) (supremum$ (alllsts$ a$) uua$))) :named a8))
(assert (! (member$ s$ (alllsts$ a$)) :named a9))
(assert (! (member$ t$ (alllsts$ a$)) :named a10))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$) (?v2 A_llist_a_llist_set_fun$)) (= (supremum$ ?v0 (fun_app$b (uub$ ?v1) ?v2)) (ite (= ?v0 bot$) bot$ (insert$ ?v1 (supremum$ ?v0 ?v2))))) :named a11))
(assert (! (forall ((?v0 A_llist_set$)) (= (supremum$ ?v0 uuc$) ?v0)) :named a12))
(assert (! (forall ((?v0 A_llist_a_llist_set_fun$)) (= (supremum$ bot$ ?v0) bot$)) :named a13))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (supremum$ ?v0 (uud$ ?v1)) (ite (= ?v0 bot$) bot$ ?v1))) :named a14))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (=> (not (= ?v0 bot$)) (= (supremum$ ?v0 (uud$ ?v1)) ?v1))) :named a15))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_set_fun$)) (= (= bot$ (supremum$ ?v0 ?v1)) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (= (fun_app$ ?v1 ?v2) bot$))))) :named a16))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_set_fun$)) (= (= (supremum$ ?v0 ?v1) bot$) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (= (fun_app$ ?v1 ?v2) bot$))))) :named a17))
(assert (! (forall ((?v0 A_llist_set$)) (= (supremum$ ?v0 uue$) bot$)) :named a18))
(assert (! (forall ((?v0 A_llist$)) (= (collect$ (uuf$ ?v0)) (insert$ ?v0 bot$))) :named a19))
(assert (! (forall ((?v0 A_llist$)) (= (collect$ (uug$ ?v0)) (insert$ ?v0 bot$))) :named a20))
(assert (! (forall ((?v0 A_llist$)) (member$ ?v0 (insert$ ?v0 bot$))) :named a21))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_set_fun$)) (= (member$ ?v0 (supremum$ ?v1 ?v2)) (exists ((?v3 A_llist$)) (and (member$ ?v3 ?v1) (member$ ?v0 (fun_app$ ?v2 ?v3)))))) :named a22))
(assert (! (forall ((?v0 A_llist$)) (= (member$ ?v0 bot$) false)) :named a23))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (= (= bot$ (collect$ ?v0)) (forall ((?v1 A_llist$)) (not (fun_app$a ?v0 ?v1))))) :named a24))
(assert (! (forall ((?v0 A_llist_set$)) (= (forall ((?v1 A_llist$)) (not (member$ ?v1 ?v0))) (= ?v0 bot$))) :named a25))
(check-sat)
;(get-unsat-core)
