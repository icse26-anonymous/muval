; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 568
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun c$ () A$)
(declare-fun l$ () A_llist$)
(declare-fun s$ () A_llist$)
(declare-fun t$ () A_llist$)
(declare-fun x$ () A_llist$)
(declare-fun ta$ () A_llist$)
(declare-fun ts$ () A_llist$)
(declare-fun xa$ () A_llist$)
(declare-fun xs$ () A_llist$)
(declare-fun top$ () A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun less_eq$ (A_llist$ A_llist$) Bool)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun prefix_closed$ (A_llist_set$) Bool)
(declare-fun suffix_closed$ (A_llist_set$) Bool)
(assert (! (not (= b$ c$)) :named a0))
(assert (! (less_eq$ t$ x$) :named a1))
(assert (! (= xa$ (lCons$ c$ xs$)) :named a2))
(assert (! (= ta$ (lCons$ b$ ts$)) :named a3))
(assert (! (less_eq$ s$ x$) :named a4))
(assert (! (= a$ c$) :named a5))
(assert (! (forall ((?v0 A_llist$)) (less_eq$ ?v0 ?v0)) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (less_eq$ (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (less_eq$ ?v1 ?v3))) :pattern ((less_eq$ (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3))))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (less_eq$ l$ ?v0) (less_eq$ ?v1 ?v0)) (or (less_eq$ l$ ?v1) (less_eq$ ?v1 l$)))) :named a10))
(assert (! (member$ a$ top$) :named a11))
(assert (! (forall ((?v0 A_llist_set$)) (= (prefix_closed$ ?v0) (forall ((?v1 A_llist$)) (=> (member$a ?v1 ?v0) (forall ((?v2 A_llist$)) (=> (less_eq$ ?v2 ?v1) (member$a ?v2 ?v0))))))) :named a12))
(assert (! (forall ((?v0 A_llist_set$)) (= (suffix_closed$ ?v0) (forall ((?v1 A_llist$)) (=> (member$a ?v1 ?v0) (forall ((?v2 A_llist$)) (=> (less_eq$ ?v1 ?v2) (member$a ?v2 ?v0))))))) :named a13))
(assert (! (less_eq$ l$ xs$) :named a14))
(assert (! (less_eq$ ta$ xa$) :named a15))
(assert (! (less_eq$ (lCons$ a$ l$) xa$) :named a16))
(assert (! (not (less_eq$ ta$ (lCons$ a$ l$))) :named a17))
(check-sat)
;(get-unsat-core)
