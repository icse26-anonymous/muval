; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 459
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-datatypes () ((A_option$ (none$) (some$ (the$ A$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun a$ () A$)
(declare-fun l$ () A_llist$)
(declare-fun t$ () A_llist$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun top$ () A_set$)
(declare-fun ll2f$ (A_llist$ Nat$) A_option$)
(declare-fun zero$ () Nat$)
(declare-fun llast$ (A_llist$) A$)
(declare-fun minus$ (Nat$) Nat_nat_fun$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun finlsts$ (A_set$) A_llist_set$)
(declare-fun fun_app$ (Nat_nat_fun$ Nat$) Nat$)
(declare-fun llength$ (A_llist$) Nat$)
(declare-fun member$a (A$ A_set$) Bool)
(assert (! (not (= (ll2f$ (lCons$ a$ l$) (fun_app$ (minus$ (llength$ (lCons$ a$ l$))) (suc$ zero$))) (some$ (llast$ (lCons$ a$ l$))))) :named a0))
(assert (! (member$ t$ (finlsts$ top$)) :named a1))
(assert (! (= l$ lNil$) :named a2))
(assert (! (member$ l$ (finlsts$ top$)) :named a3))
(assert (! (member$a a$ top$) :named a4))
(assert (! (not (= (lCons$ a$ l$) lNil$)) :named a5))
(assert (! (=> (not (= l$ lNil$)) (= (ll2f$ l$ (fun_app$ (minus$ (llength$ l$)) (suc$ zero$))) (some$ (llast$ l$)))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$) (?v2 A$)) (=> (and (= (ll2f$ ?v0 (suc$ ?v1)) (some$ ?v2)) (forall ((?v3 A$)) (=> (= (ll2f$ ?v0 ?v1) (some$ ?v3)) false))) false)) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$) (?v2 A$)) (=> (= (ll2f$ ?v0 (suc$ ?v1)) (some$ ?v2)) (exists ((?v3 A$)) (= (ll2f$ ?v0 ?v1) (some$ ?v3))))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A$)) (=> (member$ ?v0 (finlsts$ ?v1)) (= (llength$ (lCons$ ?v2 ?v0)) (suc$ (llength$ ?v0))))) :named a9))
(assert (! (= (llength$ lNil$) zero$) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (minus$ (fun_app$ (minus$ (suc$ ?v0)) ?v1)) (suc$ ?v2)) (fun_app$ (minus$ (fun_app$ (minus$ ?v0) ?v1)) ?v2))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (minus$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$ (minus$ ?v0) ?v1)) :pattern ((fun_app$ (minus$ (suc$ ?v0)) (suc$ ?v1))))) :named a12))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (minus$ ?v0) ?v0) zero$) :pattern ((minus$ ?v0)))) :named a13))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (minus$ zero$) ?v0) zero$) :pattern ((fun_app$ (minus$ zero$) ?v0)))) :named a14))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (minus$ ?v0) zero$) ?v0)) :named a15))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (minus$ ?v0) zero$) ?v0)) :named a16))
(check-sat)
;(get-unsat-core)
