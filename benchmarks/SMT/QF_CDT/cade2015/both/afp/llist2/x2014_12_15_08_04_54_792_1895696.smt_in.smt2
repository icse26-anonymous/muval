; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 351
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun a$ () A_set$)
(declare-fun b$ () A_set$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun alllsts$ (A_set$) A_llist_set$)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun less_eq$ (A_llist_set$ A_llist_set$) Bool)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun collect$a (A_bool_fun$) A_set$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun less_eq$a (A_set$ A_set$) Bool)
(assert (! (not (less_eq$ (alllsts$ a$) (alllsts$ b$))) :named a0))
(assert (! (less_eq$a a$ b$) :named a1))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (=> (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))) (less_eq$ ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (forall ((?v2 A$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1))) (less_eq$a ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_llist_set$)) (less_eq$ ?v0 ?v0)) :named a6))
(assert (! (forall ((?v0 A_set$)) (less_eq$a ?v0 ?v0)) :named a7))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (= ?v0 ?v1) (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)))) :named a8))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (= ?v0 ?v1) (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)))) :named a9))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (less_eq$ ?v0 ?v1) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))))) :named a10))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (less_eq$a ?v0 ?v1) (forall ((?v2 A$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1))))) :named a11))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (less_eq$ ?v0 ?v1) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))))) :named a12))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (less_eq$a ?v0 ?v1) (forall ((?v2 A$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1))))) :named a13))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$)) (=> (forall ((?v2 A_llist$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) (less_eq$ (collect$ ?v0) (collect$ ?v1)))) :named a14))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (=> (forall ((?v2 A$)) (=> (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2))) (less_eq$a (collect$a ?v0) (collect$a ?v1)))) :named a15))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (=> (and (= ?v0 ?v1) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) false)) false)) :named a16))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (= ?v0 ?v1) (=> (and (less_eq$a ?v0 ?v1) (less_eq$a ?v1 ?v0)) false)) false)) :named a17))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (=> (= ?v0 ?v1) (less_eq$ ?v1 ?v0))) :named a18))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (= ?v0 ?v1) (less_eq$a ?v1 ?v0))) :named a19))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (=> (= ?v0 ?v1) (less_eq$ ?v0 ?v1))) :named a20))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (= ?v0 ?v1) (less_eq$a ?v0 ?v1))) :named a21))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_set$)) (=> (and (member$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (member$ ?v0 ?v2))) :named a22))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$a ?v0 ?v1) (less_eq$a ?v1 ?v2)) (member$a ?v0 ?v2))) :named a23))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_set$)) (=> (and (member$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (member$ ?v0 ?v2))) :named a24))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$a ?v0 ?v1) (less_eq$a ?v1 ?v2)) (member$a ?v0 ?v2))) :named a25))
(assert (! (forall ((?v0 A_llist_set$)) (less_eq$ ?v0 ?v0)) :named a26))
(assert (! (forall ((?v0 A_set$)) (less_eq$a ?v0 ?v0)) :named a27))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (less_eq$ ?v1 ?v0) (= ?v1 ?v0))) :pattern ((less_eq$ ?v1 ?v0)))) :named a28))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (less_eq$a ?v0 ?v1) (= (less_eq$a ?v1 ?v0) (= ?v1 ?v0))) :pattern ((less_eq$a ?v1 ?v0)))) :named a29))
(check-sat)
;(get-unsat-core)
