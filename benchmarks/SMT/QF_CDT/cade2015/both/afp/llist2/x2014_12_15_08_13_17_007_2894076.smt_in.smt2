; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 501
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun i$ () Nat$)
(declare-fun r$ () A_llist$)
(declare-fun s$ () A_llist$)
(declare-fun ra$ () A_llist$)
(declare-fun top$ () A_set$)
(declare-fun less$ (A_llist$ A_llist$) Bool)
(declare-fun zero$ () Nat$)
(declare-fun ldrop$ (A_llist$ Nat$) A_llist$)
(declare-fun less$a (Nat$ Nat$) Bool)
(declare-fun ltake$ (A_llist$ Nat$) A_llist$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun finlsts$ (A_set$) A_llist_set$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun llength$ (A_llist$) Nat$)
(assert (! (not (less$ (ltake$ (lappend$ ra$ s$) zero$) ra$)) :named a0))
(assert (! (member$ r$ (finlsts$ top$)) :named a1))
(assert (! (less$a i$ (llength$ r$)) :named a2))
(assert (! (member$ ra$ (finlsts$ top$)) :named a3))
(assert (! (less$a zero$ (llength$ ra$)) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_set$)) (=> (and (less$ ?v0 ?v1) (member$ ?v1 (finlsts$ ?v2))) (member$ ?v0 (finlsts$ ?v2)))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_set$)) (= (member$ (lappend$ ?v0 ?v1) (finlsts$ ?v2)) (and (member$ ?v0 (finlsts$ ?v2)) (member$ ?v1 (finlsts$ ?v2))))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_llist$) (?v3 A_llist$)) (=> (member$ ?v0 (finlsts$ ?v1)) (= (= (lappend$ ?v0 ?v2) (lappend$ ?v0 ?v3)) (= ?v2 ?v3)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_llist$)) (=> (member$ ?v0 (finlsts$ ?v1)) (= (ltake$ (lappend$ ?v0 ?v2) (llength$ ?v0)) ?v0))) :named a8))
(assert (! (not (less$a zero$ zero$)) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_set$)) (=> (member$ (lappend$ ?v0 ?v1) (finlsts$ ?v2)) (member$ ?v0 (finlsts$ ?v2)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_llist$)) (=> (and (member$ ?v0 (finlsts$ ?v1)) (member$ ?v2 (finlsts$ ?v1))) (member$ (lappend$ ?v0 ?v2) (finlsts$ ?v1)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (member$ (ltake$ ?v0 ?v1) (finlsts$ top$))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (= (lappend$ (ltake$ ?v0 ?v1) (ldrop$ ?v0 ?v1)) ?v0)) :named a14))
(assert (! (= zero$ zero$) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (= (member$ (ldrop$ ?v0 ?v1) (finlsts$ top$)) (member$ ?v0 (finlsts$ top$)))) :named a16))
(check-sat)
;(get-unsat-core)
