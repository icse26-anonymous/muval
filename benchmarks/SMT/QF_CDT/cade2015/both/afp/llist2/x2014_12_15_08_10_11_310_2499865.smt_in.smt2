; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 480
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun l$ () Nat$)
(declare-fun n$ () Nat$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun xsa$ () A_llist$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun ldrop$ (A_llist$ Nat$) A_llist$)
(declare-fun ltake$ (A_llist$ Nat$) A_llist$)
(assert (! (not (= (ltake$ (ldrop$ xsa$ (suc$ l$)) n$) (ldrop$ (ltake$ xsa$ (plus$ n$ (suc$ l$))) (suc$ l$)))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (= (ltake$ (ldrop$ ?v0 l$) n$) (ldrop$ (ltake$ ?v0 (plus$ n$ l$)) l$))) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (plus$ ?v0 (suc$ ?v1)) (suc$ (plus$ ?v0 ?v1))) :pattern ((plus$ ?v0 (suc$ ?v1))))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (plus$ (suc$ ?v0) ?v1) (plus$ ?v0 (suc$ ?v1))) :pattern ((plus$ (suc$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (plus$ (suc$ ?v0) ?v1) (suc$ (plus$ ?v0 ?v1))) :pattern ((plus$ (suc$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (plus$ ?v0 ?v2) (plus$ ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a16))
(check-sat)
;(get-unsat-core)
