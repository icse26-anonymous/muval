; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 460
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-fun i$ () Nat$)
(declare-fun t$ () A_llist$)
(declare-fun top$ () A_set$)
(declare-fun lrev$ (A_llist_llist$) A_llist_llist$)
(declare-fun top$a () A_llist_set$)
(declare-fun top$b () A_llist_llist_set$)
(declare-fun top$c () A_llist_bool_fun$)
(declare-fun top$d () Bool)
(declare-fun top$e () A_bool_fun$)
(declare-fun ldrop$ (A_llist$ Nat$) A_llist$)
(declare-fun lrev$a (A_llist$) A_llist$)
(declare-fun ltake$ (A_llist_llist$ Nat$) A_llist_llist$)
(declare-fun ldrop$a (A_llist_llist$ Nat$) A_llist_llist$)
(declare-fun ltake$a (A_llist$ Nat$) A_llist$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun finlsts$ (A_set$) A_llist_set$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun inflsts$ (A_llist_set$) A_llist_llist_set$)
(declare-fun member$a (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun member$b (A$ A_set$) Bool)
(declare-fun collect$a (A_bool_fun$) A_set$)
(declare-fun finlsts$a (A_llist_set$) A_llist_llist_set$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun inflsts$a (A_set$) A_llist_set$)
(assert (! (not (= (member$ (ldrop$ t$ i$) (finlsts$ top$)) (member$ t$ (finlsts$ top$)))) :named a0))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$)) (=> (and (member$a ?v0 (finlsts$a ?v1)) (not (member$a ?v0 (finlsts$a top$a)))) false)) :named a1))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (and (member$ ?v0 (finlsts$ ?v1)) (not (member$ ?v0 (finlsts$ top$)))) false)) :named a2))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$) (?v2 Nat$)) (=> (member$a ?v0 (finlsts$a ?v1)) (member$a (ldrop$a ?v0 ?v2) (finlsts$a ?v1)))) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 Nat$)) (=> (member$ ?v0 (finlsts$ ?v1)) (member$ (ldrop$ ?v0 ?v2) (finlsts$ ?v1)))) :named a4))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$)) (=> (member$a ?v0 (finlsts$a ?v1)) (member$a ?v0 (finlsts$a top$a)))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (member$ ?v0 (finlsts$ ?v1)) (member$ ?v0 (finlsts$ top$)))) :named a6))
(assert (! (forall ((?v0 A_llist_llist$)) (= (member$a ?v0 top$b) true)) :named a7))
(assert (! (forall ((?v0 A_llist$)) (= (member$ ?v0 top$a) true)) :named a8))
(assert (! (forall ((?v0 A$)) (= (member$b ?v0 top$) true)) :named a9))
(assert (! (forall ((?v0 A_llist_llist$)) (member$a ?v0 top$b)) :named a10))
(assert (! (forall ((?v0 A_llist$)) (member$ ?v0 top$a)) :named a11))
(assert (! (forall ((?v0 A$)) (member$b ?v0 top$)) :named a12))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ top$c ?v0) top$d) :pattern ((fun_app$ top$c ?v0)))) :named a13))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$a top$e ?v0) top$d) :pattern ((fun_app$a top$e ?v0)))) :named a14))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (member$a (ltake$ ?v0 ?v1) (finlsts$a top$a))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (member$ (ltake$a ?v0 ?v1) (finlsts$ top$))) :named a16))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (member$a ?v0 (finlsts$a top$a)) (member$a ?v1 (finlsts$a top$a))) (= (= (lrev$ ?v0) (lrev$ ?v1)) (= ?v0 ?v1)))) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (member$ ?v0 (finlsts$ top$)) (member$ ?v1 (finlsts$ top$))) (= (= (lrev$a ?v0) (lrev$a ?v1)) (= ?v0 ?v1)))) :named a18))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (member$a ?v0 (finlsts$a top$a)) (= (lrev$ (lrev$ ?v0)) ?v0))) :named a19))
(assert (! (forall ((?v0 A_llist$)) (=> (member$ ?v0 (finlsts$ top$)) (= (lrev$a (lrev$a ?v0)) ?v0))) :named a20))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (= (member$a (ldrop$a ?v0 ?v1) (inflsts$ top$a)) (member$a ?v0 (inflsts$ top$a)))) :named a21))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (= (member$ (ldrop$ ?v0 ?v1) (inflsts$a top$)) (member$ ?v0 (inflsts$a top$)))) :named a22))
(assert (! (forall ((?v0 A_llist_llist_set$)) (=> (forall ((?v1 A_llist_llist$)) (member$a ?v1 ?v0)) (= top$b ?v0))) :named a23))
(assert (! (forall ((?v0 A_llist_set$)) (=> (forall ((?v1 A_llist$)) (member$ ?v1 ?v0)) (= top$a ?v0))) :named a24))
(assert (! (forall ((?v0 A_set$)) (=> (forall ((?v1 A$)) (member$b ?v1 ?v0)) (= top$ ?v0))) :named a25))
(assert (! (exists ((?v0 A_llist_llist$)) (member$a ?v0 top$b)) :named a26))
(assert (! (exists ((?v0 A_llist$)) (member$ ?v0 top$a)) :named a27))
(assert (! (exists ((?v0 A$)) (member$b ?v0 top$)) :named a28))
(assert (! (forall ((?v0 A_llist_llist$)) (= (not (member$a ?v0 (finlsts$a top$a))) (member$a ?v0 (inflsts$ top$a)))) :named a29))
(assert (! (forall ((?v0 A_llist$)) (= (not (member$ ?v0 (finlsts$ top$))) (member$ ?v0 (inflsts$a top$)))) :named a30))
(assert (! (forall ((?v0 A_llist_llist$)) (= (not (member$a ?v0 (inflsts$ top$a))) (member$a ?v0 (finlsts$a top$a)))) :named a31))
(assert (! (forall ((?v0 A_llist$)) (= (not (member$ ?v0 (inflsts$a top$))) (member$ ?v0 (finlsts$ top$)))) :named a32))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$)) (=> (member$a ?v0 (finlsts$a ?v1)) (member$a (lrev$ ?v0) (finlsts$a ?v1)))) :named a33))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (member$ ?v0 (finlsts$ ?v1)) (member$ (lrev$a ?v0) (finlsts$ ?v1)))) :named a34))
(assert (! (= top$a (collect$ top$c)) :named a35))
(assert (! (= top$ (collect$a top$e)) :named a36))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$)) (=> (member$a ?v0 (inflsts$ ?v1)) (member$a ?v0 (inflsts$ top$a)))) :named a37))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (member$ ?v0 (inflsts$a ?v1)) (member$ ?v0 (inflsts$a top$)))) :named a38))
(check-sat)
;(get-unsat-core)
