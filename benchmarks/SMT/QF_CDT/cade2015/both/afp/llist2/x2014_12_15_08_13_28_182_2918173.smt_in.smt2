; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 443
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_llist_set$ 0)
(declare-sort A_llist_llist_llist_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))))
(declare-fun a$ () A_set$)
(declare-fun lrev$ (A_llist_llist$) A_llist_llist$)
(declare-fun suff$ (A_set$ A_llist$) A_llist_set$)
(declare-fun ldrop$ (A_llist_llist$ Nat$) A_llist_llist$)
(declare-fun lrev$a (A_llist$) A_llist$)
(declare-fun ltake$ (A_llist_llist$ Nat$) A_llist_llist$)
(declare-fun lconst$ (A_llist$) A_llist_llist$)
(declare-fun ldrop$a (A_llist$ Nat$) A_llist$)
(declare-fun ltake$a (A_llist$ Nat$) A_llist$)
(declare-fun member$ (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun alllsts$ (A_set$) A_llist_set$)
(declare-fun fun_app$ (A_llist_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun lconst$a (A$) A_llist$)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun member$b (A_llist_llist_llist$ A_llist_llist_llist_set$) Bool)
(declare-fun member$c (A$ A_set$) Bool)
(declare-fun poslsts$ (A_llist_set$) A_llist_llist_set$)
(declare-fun alllsts$a (A_llist_set$) A_llist_llist_set$)
(declare-fun alllsts$b (A_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun finlstsp$ (A_llist_bool_fun$) A_llist_llist_bool_fun$)
(declare-fun fun_app$a (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_bool_fun$ A$) Bool)
(declare-fun lbutlast$ (A_llist_llist$) A_llist_llist$)
(declare-fun poslsts$a (A_set$) A_llist_set$)
(declare-fun finlstsp$a (A_bool_fun$) A_llist_bool_fun$)
(declare-fun lbutlast$a (A_llist$) A_llist$)
(assert (! (not (= (suff$ a$ lNil$) (alllsts$ a$))) :named a0))
(assert (! (forall ((?v0 A_llist_set$)) (member$ lNil$a (alllsts$a ?v0))) :named a1))
(assert (! (forall ((?v0 A_set$)) (member$a lNil$ (alllsts$ ?v0))) :named a2))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$)) (= (member$ ?v0 (poslsts$ ?v1)) (and (member$ ?v0 (alllsts$a ?v1)) (not (= ?v0 lNil$a))))) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (= (member$a ?v0 (poslsts$a ?v1)) (and (member$a ?v0 (alllsts$ ?v1)) (not (= ?v0 lNil$))))) :named a4))
(assert (! (= (lbutlast$ lNil$a) lNil$a) :named a5))
(assert (! (= (lbutlast$a lNil$) lNil$) :named a6))
(assert (! (forall ((?v0 A_llist$)) (not (= (lconst$ ?v0) lNil$a))) :named a7))
(assert (! (forall ((?v0 A$)) (not (= (lconst$a ?v0) lNil$))) :named a8))
(assert (! (= (lrev$ lNil$a) lNil$a) :named a9))
(assert (! (= (lrev$a lNil$) lNil$) :named a10))
(assert (! (forall ((?v0 Nat$)) (! (= (ltake$ lNil$a ?v0) lNil$a) :pattern ((ltake$ lNil$a ?v0)))) :named a11))
(assert (! (forall ((?v0 Nat$)) (! (= (ltake$a lNil$ ?v0) lNil$) :pattern ((ltake$a lNil$ ?v0)))) :named a12))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$)) (= (member$b ?v0 (alllsts$b ?v1)) (or (= ?v0 lNil$b) (exists ((?v2 A_llist_llist_llist$) (?v3 A_llist_llist$)) (and (= ?v0 (lCons$b ?v3 ?v2)) (and (member$b ?v2 (alllsts$b ?v1)) (member$ ?v3 ?v1))))))) :named a13))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$)) (= (member$ ?v0 (alllsts$a ?v1)) (or (= ?v0 lNil$a) (exists ((?v2 A_llist_llist$) (?v3 A_llist$)) (and (= ?v0 (lCons$a ?v3 ?v2)) (and (member$ ?v2 (alllsts$a ?v1)) (member$a ?v3 ?v1))))))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (= (member$a ?v0 (alllsts$ ?v1)) (or (= ?v0 lNil$) (exists ((?v2 A_llist$) (?v3 A$)) (and (= ?v0 (lCons$ ?v3 ?v2)) (and (member$a ?v2 (alllsts$ ?v1)) (member$c ?v3 ?v1))))))) :named a15))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$)) (=> (and (member$b ?v0 (alllsts$b ?v1)) (and (=> (= ?v0 lNil$b) false) (forall ((?v2 A_llist_llist_llist$) (?v3 A_llist_llist$)) (=> (and (= ?v0 (lCons$b ?v3 ?v2)) (and (member$b ?v2 (alllsts$b ?v1)) (member$ ?v3 ?v1))) false)))) false)) :named a16))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$)) (=> (and (member$ ?v0 (alllsts$a ?v1)) (and (=> (= ?v0 lNil$a) false) (forall ((?v2 A_llist_llist$) (?v3 A_llist$)) (=> (and (= ?v0 (lCons$a ?v3 ?v2)) (and (member$ ?v2 (alllsts$a ?v1)) (member$a ?v3 ?v1))) false)))) false)) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (and (member$a ?v0 (alllsts$ ?v1)) (and (=> (= ?v0 lNil$) false) (forall ((?v2 A_llist$) (?v3 A$)) (=> (and (= ?v0 (lCons$ ?v3 ?v2)) (and (member$a ?v2 (alllsts$ ?v1)) (member$c ?v3 ?v1))) false)))) false)) :named a18))
(assert (! (forall ((?v0 A_llist_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_set$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 A_llist_llist_llist$)) (=> (fun_app$ ?v0 ?v3) (or (= ?v3 lNil$b) (exists ((?v4 A_llist_llist_llist$) (?v5 A_llist_llist$)) (and (= ?v3 (lCons$b ?v5 ?v4)) (and (or (fun_app$ ?v0 ?v4) (member$b ?v4 (alllsts$b ?v2))) (member$ ?v5 ?v2)))))))) (member$b ?v1 (alllsts$b ?v2)))) :named a19))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist$) (?v2 A_llist_set$)) (=> (and (fun_app$a ?v0 ?v1) (forall ((?v3 A_llist_llist$)) (=> (fun_app$a ?v0 ?v3) (or (= ?v3 lNil$a) (exists ((?v4 A_llist_llist$) (?v5 A_llist$)) (and (= ?v3 (lCons$a ?v5 ?v4)) (and (or (fun_app$a ?v0 ?v4) (member$ ?v4 (alllsts$a ?v2))) (member$a ?v5 ?v2)))))))) (member$ ?v1 (alllsts$a ?v2)))) :named a20))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_set$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v3 A_llist$)) (=> (fun_app$b ?v0 ?v3) (or (= ?v3 lNil$) (exists ((?v4 A_llist$) (?v5 A$)) (and (= ?v3 (lCons$ ?v5 ?v4)) (and (or (fun_app$b ?v0 ?v4) (member$a ?v4 (alllsts$ ?v2))) (member$c ?v5 ?v2)))))))) (member$a ?v1 (alllsts$ ?v2)))) :named a21))
(assert (! (forall ((?v0 Nat$)) (! (= (ldrop$ lNil$a ?v0) lNil$a) :pattern ((ldrop$ lNil$a ?v0)))) :named a22))
(assert (! (forall ((?v0 Nat$)) (! (= (ldrop$a lNil$ ?v0) lNil$) :pattern ((ldrop$a lNil$ ?v0)))) :named a23))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (fun_app$a (finlstsp$ ?v0) lNil$a)) :named a24))
(assert (! (forall ((?v0 A_bool_fun$)) (fun_app$b (finlstsp$a ?v0) lNil$)) :named a25))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_set$)) (= (member$b (lCons$b ?v0 ?v1) (alllsts$b ?v2)) (and (member$ ?v0 ?v2) (member$b ?v1 (alllsts$b ?v2))))) :named a26))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_set$)) (= (member$ (lCons$a ?v0 ?v1) (alllsts$a ?v2)) (and (member$a ?v0 ?v2) (member$ ?v1 (alllsts$a ?v2))))) :named a27))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_set$)) (= (member$a (lCons$ ?v0 ?v1) (alllsts$ ?v2)) (and (member$c ?v0 ?v2) (member$a ?v1 (alllsts$ ?v2))))) :named a28))
(assert (! (forall ((?v0 A_llist$)) (! (= (lconst$ ?v0) (lCons$a ?v0 (lconst$ ?v0))) :pattern ((lconst$ ?v0)))) :named a29))
(assert (! (forall ((?v0 A$)) (! (= (lconst$a ?v0) (lCons$ ?v0 (lconst$a ?v0))) :pattern ((lconst$a ?v0)))) :named a30))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$) (?v2 A_llist$)) (=> (and (fun_app$a (finlstsp$ ?v0) ?v1) (fun_app$b ?v0 ?v2)) (fun_app$a (finlstsp$ ?v0) (lCons$a ?v2 ?v1)))) :named a31))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$)) (=> (and (fun_app$b (finlstsp$a ?v0) ?v1) (fun_app$c ?v0 ?v2)) (fun_app$b (finlstsp$a ?v0) (lCons$ ?v2 ?v1)))) :named a32))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (=> (and (fun_app$a (finlstsp$ ?v0) ?v1) (and (=> (= ?v1 lNil$a) false) (forall ((?v2 A_llist_llist$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$a ?v3 ?v2)) (and (fun_app$a (finlstsp$ ?v0) ?v2) (fun_app$b ?v0 ?v3))) false)))) false)) :named a33))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (=> (and (fun_app$b (finlstsp$a ?v0) ?v1) (and (=> (= ?v1 lNil$) false) (forall ((?v2 A_llist$) (?v3 A$)) (=> (and (= ?v1 (lCons$ ?v3 ?v2)) (and (fun_app$b (finlstsp$a ?v0) ?v2) (fun_app$c ?v0 ?v3))) false)))) false)) :named a34))
(check-sat)
;(get-unsat-core)
