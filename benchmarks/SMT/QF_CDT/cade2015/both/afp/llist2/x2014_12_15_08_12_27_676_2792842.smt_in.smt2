; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 405
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun s$ () A_llist$)
(declare-fun t$ () A_llist$)
(declare-fun less$ (A_llist$ A_llist$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun inflsts$ (A_set$) A_llist_set$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun less_eq$ (A_llist$) A_llist_bool_fun$)
(declare-fun lbutlast$ (A_llist$) A_llist$)
(assert (! (not (forall ((?v0 A_llist$)) (=> (and (fun_app$ (less_eq$ lNil$) ?v0) (fun_app$ (less_eq$ ?v0) lNil$)) (= lNil$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v0) ?v2))) :named a1))
(assert (! (fun_app$ (less_eq$ s$) t$) :named a2))
(assert (! (fun_app$ (less_eq$ t$) s$) :named a3))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (less_eq$ ?v0) ?v0)) :named a4))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (less_eq$ ?v0) lNil$) (= ?v0 lNil$)) :pattern ((less_eq$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (less_eq$ lNil$) ?v0)) :named a6))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (less_eq$ ?v0) lNil$) (= ?v0 lNil$)) :pattern ((less_eq$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v0) ?v2))) :named a8))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (less_eq$ ?v0) ?v0)) :named a9))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (less_eq$ lNil$) ?v0)) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (not (fun_app$ (less_eq$ (lCons$ ?v0 ?v1)) lNil$))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_llist$)) (=> (member$ ?v0 (inflsts$ ?v1)) (= (fun_app$ (less_eq$ ?v0) ?v2) (= ?v0 ?v2)))) :named a12))
(assert (! (= (lbutlast$ lNil$) lNil$) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (less$ ?v0 ?v1) (and (fun_app$ (less_eq$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((less$ ?v0 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$ (less_eq$ ?v0) ?v1) (exists ((?v2 A_llist$)) (= ?v1 (lappend$ ?v0 ?v2))))) :named a15))
(check-sat)
;(get-unsat-core)
