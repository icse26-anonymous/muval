; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 455
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Nat_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nibble$ (nibble0$) (nibble1$) (nibble2$) (nibble3$) (nibble4$) (nibble5$) (nibble6$) (nibble7$) (nibble8$) (nibble9$) (nibbleA$) (nibbleB$) (nibbleC$) (nibbleD$) (nibbleE$) (nibbleF$))
  (Char$ (char$ (select$ Nibble$) (selecta$ Nibble$)))))
(declare-fun a$ () A_set$)
(declare-fun ta$ () A_llist$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun size$ (Char$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun ldrop$ (A_llist$) Nat_a_llist_fun$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun alllsts$ (A_set$) A_llist_set$)
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$) A_llist$)
(declare-fun inflsts$ (A_set$) A_llist_set$)
(declare-fun size_bool$ (Bool) Nat$)
(declare-fun size_char$ (Char$) Nat$)
(assert (! (not (member$ (fun_app$ (ldrop$ ta$) zero$) (inflsts$ a$))) :named a0))
(assert (! (member$ ta$ (inflsts$ a$)) :named a1))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (ldrop$ ?v0) zero$) ?v0) :pattern ((ldrop$ ?v0)))) :named a2))
(assert (! (= zero$ zero$) :named a3))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a4))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a5))
(assert (! (forall ((?v0 Char$)) (! (= (size_char$ ?v0) zero$) :pattern ((size_char$ ?v0)))) :named a6))
(assert (! (= (size_bool$ true) zero$) :named a7))
(assert (! (= (size_bool$ false) zero$) :named a8))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (ldrop$ lNil$) ?v0) lNil$) :pattern ((fun_app$ (ldrop$ lNil$) ?v0)))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 Nat$)) (=> (member$ ?v0 (alllsts$ ?v1)) (member$ (fun_app$ (ldrop$ ?v0) ?v2) (alllsts$ ?v1)))) :named a10))
(assert (! (forall ((?v0 Char$)) (! (= (size$ ?v0) zero$) :pattern ((size$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (member$ ?v0 (inflsts$ ?v1)) (member$ ?v0 (alllsts$ ?v1)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$ (ldrop$ ?v0) (plus$ ?v1 ?v2)) (fun_app$ (ldrop$ (fun_app$ (ldrop$ ?v0) ?v1)) ?v2))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a15))
(assert (! (forall ((?v0 Nat$)) (= (plus$ zero$ ?v0) ?v0)) :named a16))
(check-sat)
;(get-unsat-core)
