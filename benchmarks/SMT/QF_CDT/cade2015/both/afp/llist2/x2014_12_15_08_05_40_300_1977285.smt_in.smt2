; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 144
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_llist_llist_set$ 0)
(declare-sort A_llist_a_llist_prod_set$ 0)
(declare-sort A_llist_a_llist_prod_bool_fun$ 0)
(declare-sort A_llist_llist_llist_llist_set$ 0)
(declare-sort A_llist_a_llist_prod_llist_set$ 0)
(declare-sort A_llist_a_llist_prod_llist_llist_set$ 0)
(declare-sort A_llist_a_llist_prod_llist_llist_llist_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_llist_a_llist_prod$ (pair$ (fst$ A_llist$) (snd$ A_llist$)))))
(declare-codatatypes () ((A_llist_a_llist_prod_llist$ (lNil$a) (lCons$a (lhd$a A_llist_a_llist_prod$) (ltl$a A_llist_a_llist_prod_llist$)))
  (A_llist_a_llist_prod_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_a_llist_prod_llist$) (ltl$b A_llist_a_llist_prod_llist_llist$)))
  (A_llist_a_llist_prod_llist_llist_llist$ (lNil$c) (lCons$c (lhd$c A_llist_a_llist_prod_llist_llist$) (ltl$c A_llist_a_llist_prod_llist_llist_llist$)))
  (A_llist_llist$ (lNil$d) (lCons$d (lhd$d A_llist$) (ltl$d A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$e) (lCons$e (lhd$e A_llist_llist$) (ltl$e A_llist_llist_llist$)))
  (A_llist_llist_llist_llist$ (lNil$f) (lCons$f (lhd$f A_llist_llist_llist$) (ltl$f A_llist_llist_llist_llist$)))))
(declare-fun a$ () A$)
(declare-fun r$ () A_llist$)
(declare-fun a$a () A_set$)
(declare-fun member$ (A_llist_a_llist_prod$ A_llist_a_llist_prod_set$) Bool)
(declare-fun finlsts$ (A_set$) A_llist_set$)
(declare-fun fun_app$ (A_llist_a_llist_prod_bool_fun$ A_llist_a_llist_prod$) Bool)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun member$b (A_llist_a_llist_prod_llist_llist_llist$ A_llist_a_llist_prod_llist_llist_llist_set$) Bool)
(declare-fun member$c (A_llist_a_llist_prod_llist_llist$ A_llist_a_llist_prod_llist_llist_set$) Bool)
(declare-fun member$d (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_set$) Bool)
(declare-fun member$e (A_llist_llist_llist$ A_llist_llist_llist_set$) Bool)
(declare-fun member$f (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun member$g (A_llist_a_llist_prod_llist$ A_llist_a_llist_prod_llist_set$) Bool)
(declare-fun member$h (A$ A_set$) Bool)
(declare-fun finlsts$a (A_llist_a_llist_prod_llist_llist_set$) A_llist_a_llist_prod_llist_llist_llist_set$)
(declare-fun finlsts$b (A_llist_llist_llist_set$) A_llist_llist_llist_llist_set$)
(declare-fun finlsts$c (A_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun finlsts$d (A_llist_a_llist_prod_llist_set$) A_llist_a_llist_prod_llist_llist_set$)
(declare-fun finlsts$e (A_llist_a_llist_prod_set$) A_llist_a_llist_prod_llist_set$)
(declare-fun finlsts$f (A_llist_set$) A_llist_llist_set$)
(declare-fun finlsts_pred$ () A_llist_a_llist_prod_set$)
(assert (! (not (member$ (pair$ r$ (lCons$ a$ r$)) finlsts_pred$)) :named a0))
(assert (! (member$a r$ (finlsts$ a$a)) :named a1))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_llist_llist$) (?v1 A_llist_a_llist_prod_llist_llist_set$) (?v2 A_llist_a_llist_prod_llist_llist$)) (=> (and (member$b ?v0 (finlsts$a ?v1)) (member$c ?v2 ?v1)) (member$b (lCons$c ?v2 ?v0) (finlsts$a ?v1)))) :named a2))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$) (?v1 A_llist_llist_llist_set$) (?v2 A_llist_llist_llist$)) (=> (and (member$d ?v0 (finlsts$b ?v1)) (member$e ?v2 ?v1)) (member$d (lCons$f ?v2 ?v0) (finlsts$b ?v1)))) :named a3))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist$)) (=> (and (member$e ?v0 (finlsts$c ?v1)) (member$f ?v2 ?v1)) (member$e (lCons$e ?v2 ?v0) (finlsts$c ?v1)))) :named a4))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist_llist$) (?v1 A_llist_a_llist_prod_llist_set$) (?v2 A_llist_a_llist_prod_llist$)) (=> (and (member$c ?v0 (finlsts$d ?v1)) (member$g ?v2 ?v1)) (member$c (lCons$b ?v2 ?v0) (finlsts$d ?v1)))) :named a5))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_set$) (?v2 A_llist_a_llist_prod$)) (=> (and (member$g ?v0 (finlsts$e ?v1)) (member$ ?v2 ?v1)) (member$g (lCons$a ?v2 ?v0) (finlsts$e ?v1)))) :named a6))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$) (?v2 A_llist$)) (=> (and (member$f ?v0 (finlsts$f ?v1)) (member$a ?v2 ?v1)) (member$f (lCons$d ?v2 ?v0) (finlsts$f ?v1)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A$)) (=> (and (member$a ?v0 (finlsts$ ?v1)) (member$h ?v2 ?v1)) (member$a (lCons$ ?v2 ?v0) (finlsts$ ?v1)))) :named a8))
(assert (! (forall ((?v0 A_llist_a_llist_prod_llist$) (?v1 A_llist_a_llist_prod_llist_llist$) (?v2 A_llist_a_llist_prod_llist$) (?v3 A_llist_a_llist_prod_llist_llist$)) (= (= (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a9))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_llist_llist$)) (= (= (lCons$e ?v0 ?v1) (lCons$e ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$d ?v0 ?v1) (lCons$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a11))
(assert (! (forall ((?v0 A_llist_a_llist_prod$) (?v1 A_llist_a_llist_prod_llist$) (?v2 A_llist_a_llist_prod$) (?v3 A_llist_a_llist_prod_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 A_llist_a_llist_prod$)) (=> (forall ((?v1 A_llist$) (?v2 A_llist$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a16))
(assert (! (forall ((?v0 A_llist_a_llist_prod$)) (exists ((?v1 A_llist$) (?v2 A_llist$)) (= ?v0 (pair$ ?v1 ?v2)))) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a18))
(assert (! (forall ((?v0 A_llist_a_llist_prod$)) (=> (forall ((?v1 A_llist$) (?v2 A_llist$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a19))
(assert (! (forall ((?v0 A_llist_a_llist_prod_bool_fun$) (?v1 A_llist_a_llist_prod$)) (=> (forall ((?v2 A_llist$) (?v3 A_llist$)) (fun_app$ ?v0 (pair$ ?v2 ?v3))) (fun_app$ ?v0 ?v1))) :named a20))
(check-sat)
;(get-unsat-core)
