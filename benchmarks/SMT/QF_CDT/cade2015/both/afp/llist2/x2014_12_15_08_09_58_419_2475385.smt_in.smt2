; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 534
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort Natural$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Bool_nat_fun$ 0)
(declare-sort Nat_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nibble$ (nibble0$) (nibble1$) (nibble2$) (nibble3$) (nibble4$) (nibble5$) (nibble6$) (nibble7$) (nibble8$) (nibble9$) (nibbleA$) (nibbleB$) (nibbleC$) (nibbleD$) (nibbleE$) (nibbleF$))
  (Char$ (char$ (select$ Nibble$) (selecta$ Nibble$)))))
(declare-fun a$ () A_set$)
(declare-fun ta$ () A_llist$)
(declare-fun size$ (Char$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun ltake$ (A_llist$) Nat_a_llist_fun$)
(declare-fun size$a (Natural$) Nat$)
(declare-fun zero$a () Natural$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$) A_llist$)
(declare-fun inflsts$ (A_set$) A_llist_set$)
(declare-fun llength$ (A_llist$) Nat$)
(declare-fun fun_app$a (Bool_nat_fun$ Bool) Nat$)
(declare-fun lbutlast$ (A_llist$) A_llist$)
(declare-fun rec_bool$ (Nat$ Nat$) Bool_nat_fun$)
(declare-fun size_bool$ () Bool_nat_fun$)
(declare-fun size_char$ (Char$) Nat$)
(declare-fun size_natural$ (Natural$) Nat$)
(assert (! (not (= (llength$ (fun_app$ (ltake$ ta$) zero$)) zero$)) :named a0))
(assert (! (member$ ta$ (inflsts$ a$)) :named a1))
(assert (! (= zero$ zero$) :named a2))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a3))
(assert (! (= (llength$ lNil$) zero$) :named a4))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a5))
(assert (! (forall ((?v0 Natural$)) (= (= zero$a ?v0) (= ?v0 zero$a))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (ltake$ ?v0) zero$) lNil$) :pattern ((ltake$ ?v0)))) :named a7))
(assert (! (forall ((?v0 Char$)) (! (= (size_char$ ?v0) zero$) :pattern ((size_char$ ?v0)))) :named a8))
(assert (! (= (fun_app$a size_bool$ true) zero$) :named a9))
(assert (! (= (fun_app$a size_bool$ false) zero$) :named a10))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (ltake$ lNil$) ?v0) lNil$) :pattern ((fun_app$ (ltake$ lNil$) ?v0)))) :named a11))
(assert (! (forall ((?v0 Char$)) (! (= (size$ ?v0) zero$) :pattern ((size$ ?v0)))) :named a12))
(assert (! (= size_bool$ (rec_bool$ zero$ zero$)) :named a13))
(assert (! (= (lbutlast$ lNil$) lNil$) :named a14))
(assert (! (= (size_natural$ zero$a) zero$) :named a15))
(assert (! (= (size$a zero$a) zero$) :named a16))
(check-sat)
;(get-unsat-core)
