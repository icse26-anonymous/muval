; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 493
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_option_bool_fun$ 0)
(declare-datatypes () ((A_option$ (none$) (some$ (the$ A$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun i$ () Nat$)
(declare-fun j$ () Nat$)
(declare-fun q$ () Bool)
(declare-fun t$ () A_llist$)
(declare-fun x$ () A$)
(declare-fun ll2f$ (A_llist$ Nat$) A_option$)
(declare-fun fun_app$ (A_option_bool_fun$ A_option$) Bool)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(assert (! (not false) :named a0))
(assert (! (not (exists ((?v0 A$)) (= (ll2f$ t$ j$) (some$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A$)) (=> (= (ll2f$ t$ j$) (some$ ?v0)) q$)) :named a2))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$) (?v2 Nat$)) (=> (and (= (ll2f$ ?v0 ?v1) none$) (less_eq$ ?v1 ?v2)) (= (ll2f$ ?v0 ?v2) none$))) :named a3))
(assert (! (less_eq$ j$ i$) :named a4))
(assert (! (= (ll2f$ t$ i$) (some$ x$)) :named a5))
(assert (! (= (ll2f$ t$ j$) none$) :named a6))
(assert (! (forall ((?v0 A_option$)) (= (not (= ?v0 none$)) (exists ((?v1 A$)) (= ?v0 (some$ ?v1))))) :named a7))
(assert (! (forall ((?v0 A_option$)) (= (forall ((?v1 A$)) (not (= ?v0 (some$ ?v1)))) (= ?v0 none$))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (some$ ?v0) (some$ ?v1)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 Nat$)) (less_eq$ ?v0 ?v0)) :named a10))
(assert (! (forall ((?v0 A_option_bool_fun$)) (= (exists ((?v1 A_option$)) (fun_app$ ?v0 ?v1)) (or (fun_app$ ?v0 none$) (exists ((?v1 A$)) (fun_app$ ?v0 (some$ ?v1)))))) :named a11))
(assert (! (forall ((?v0 A_option_bool_fun$)) (= (forall ((?v1 A_option$)) (fun_app$ ?v0 ?v1)) (and (fun_app$ ?v0 none$) (forall ((?v1 A$)) (fun_app$ ?v0 (some$ ?v1)))))) :named a12))
(assert (! (forall ((?v0 A_option$)) (=> (and (=> (= ?v0 none$) false) (forall ((?v1 A$)) (=> (= ?v0 (some$ ?v1)) false))) false)) :named a13))
(assert (! (forall ((?v0 A_option$) (?v1 A$)) (=> (= ?v0 (some$ ?v1)) (not (= ?v0 none$)))) :named a14))
(assert (! (forall ((?v0 A$)) (not (= none$ (some$ ?v0)))) :named a15))
(assert (! (forall ((?v0 A_option$)) (=> (and (=> (= ?v0 none$) false) (=> (not (= ?v0 none$)) false)) false)) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (less_eq$ ?v0 ?v1))) :named a17))
(check-sat)
;(get-unsat-core)
