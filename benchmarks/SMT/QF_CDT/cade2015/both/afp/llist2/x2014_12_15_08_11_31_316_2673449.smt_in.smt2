; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 337
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_llist_set$ 0)
(declare-sort A_llist_llist_llist_llist_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))
  (A_llist_llist_llist_llist$ (lNil$c) (lCons$c (lhd$c A_llist_llist_llist$) (ltl$c A_llist_llist_llist_llist$)))))
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun l$ () A_llist$)
(declare-fun y$ () A_llist$)
(declare-fun top$ () A_set$)
(declare-fun llast$ (A_llist$) A$)
(declare-fun llast$a (A_llist_llist_llist$) A_llist_llist$)
(declare-fun llast$b (A_llist_llist$) A_llist$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun finlsts$ (A_set$) A_llist_set$)
(declare-fun fun_app$ (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (A_llist_llist_llist$ A_llist_llist_llist_set$) Bool)
(declare-fun member$c (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun member$d (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_set$) Bool)
(declare-fun alllstsp$ (A_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun finlsts$a (A_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun finlsts$b (A_llist_set$) A_llist_llist_set$)
(declare-fun finlsts$c (A_llist_llist_llist_set$) A_llist_llist_llist_llist_set$)
(declare-fun finlstsp$ (A_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun lappend$a (A_llist_llist_llist$ A_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun lappend$b (A_llist_llist$ A_llist_llist$) A_llist_llist$)
(declare-fun alllstsp$a (A_llist_bool_fun$) A_llist_llist_bool_fun$)
(declare-fun alllstsp$b (A_bool_fun$) A_llist_bool_fun$)
(declare-fun finlstsp$a (A_llist_bool_fun$) A_llist_llist_bool_fun$)
(declare-fun finlstsp$b (A_bool_fun$) A_llist_bool_fun$)
(assert (! (not (= (llast$ (lappend$ (lCons$ b$ l$) (lCons$ a$ y$))) (llast$ (lCons$ a$ y$)))) :named a0))
(assert (! (member$ y$ (finlsts$ top$)) :named a1))
(assert (! (member$ l$ (finlsts$ top$)) :named a2))
(assert (! (member$a b$ top$) :named a3))
(assert (! (member$ (lappend$ l$ (lCons$ a$ y$)) (finlsts$ top$)) :named a4))
(assert (! (=> (member$ y$ (finlsts$ top$)) (= (llast$ (lappend$ l$ (lCons$ a$ y$))) (llast$ (lCons$ a$ y$)))) :named a5))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_llist$)) (! (= (lappend$a (lCons$b ?v0 ?v1) ?v2) (lCons$b ?v0 (lappend$a ?v1 ?v2))) :pattern ((lappend$a (lCons$b ?v0 ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (! (= (lappend$b (lCons$a ?v0 ?v1) ?v2) (lCons$a ?v0 (lappend$b ?v1 ?v2))) :pattern ((lappend$b (lCons$a ?v0 ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (lappend$ (lCons$ ?v0 ?v1) ?v2) (lCons$ ?v0 (lappend$ ?v1 ?v2))) :pattern ((lappend$ (lCons$ ?v0 ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_set$)) (= (member$b (lappend$a ?v0 ?v1) (finlsts$a ?v2)) (and (member$b ?v0 (finlsts$a ?v2)) (member$b ?v1 (finlsts$a ?v2))))) :named a9))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$) (?v2 A_llist_set$)) (= (member$c (lappend$b ?v0 ?v1) (finlsts$b ?v2)) (and (member$c ?v0 (finlsts$b ?v2)) (member$c ?v1 (finlsts$b ?v2))))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_set$)) (= (member$ (lappend$ ?v0 ?v1) (finlsts$ ?v2)) (and (member$ ?v0 (finlsts$ ?v2)) (member$ ?v1 (finlsts$ ?v2))))) :named a11))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist_llist$) (?v3 A_llist_llist_llist$)) (=> (member$b ?v0 (finlsts$a ?v1)) (= (= (lappend$a ?v0 ?v2) (lappend$a ?v0 ?v3)) (= ?v2 ?v3)))) :named a12))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$) (?v2 A_llist_llist$) (?v3 A_llist_llist$)) (=> (member$c ?v0 (finlsts$b ?v1)) (= (= (lappend$b ?v0 ?v2) (lappend$b ?v0 ?v3)) (= ?v2 ?v3)))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_llist$) (?v3 A_llist$)) (=> (member$ ?v0 (finlsts$ ?v1)) (= (= (lappend$ ?v0 ?v2) (lappend$ ?v0 ?v3)) (= ?v2 ?v3)))) :named a14))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_llist_llist$)) (= (= (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a17))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_set$)) (=> (member$b (lappend$a ?v0 ?v1) (finlsts$a ?v2)) (member$b ?v0 (finlsts$a ?v2)))) :named a18))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$) (?v2 A_llist_set$)) (=> (member$c (lappend$b ?v0 ?v1) (finlsts$b ?v2)) (member$c ?v0 (finlsts$b ?v2)))) :named a19))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_set$)) (=> (member$ (lappend$ ?v0 ?v1) (finlsts$ ?v2)) (member$ ?v0 (finlsts$ ?v2)))) :named a20))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist_llist$)) (=> (and (member$b ?v0 (finlsts$a ?v1)) (member$b ?v2 (finlsts$a ?v1))) (member$b (lappend$a ?v0 ?v2) (finlsts$a ?v1)))) :named a21))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$) (?v2 A_llist_llist$)) (=> (and (member$c ?v0 (finlsts$b ?v1)) (member$c ?v2 (finlsts$b ?v1))) (member$c (lappend$b ?v0 ?v2) (finlsts$b ?v1)))) :named a22))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_llist$)) (=> (and (member$ ?v0 (finlsts$ ?v1)) (member$ ?v2 (finlsts$ ?v1))) (member$ (lappend$ ?v0 ?v2) (finlsts$ ?v1)))) :named a23))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$) (?v1 A_llist_llist_llist_set$) (?v2 A_llist_llist_llist$)) (=> (and (member$d ?v0 (finlsts$c ?v1)) (member$b ?v2 ?v1)) (member$d (lCons$c ?v2 ?v0) (finlsts$c ?v1)))) :named a24))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist$)) (=> (and (member$b ?v0 (finlsts$a ?v1)) (member$c ?v2 ?v1)) (member$b (lCons$b ?v2 ?v0) (finlsts$a ?v1)))) :named a25))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$) (?v2 A_llist$)) (=> (and (member$c ?v0 (finlsts$b ?v1)) (member$ ?v2 ?v1)) (member$c (lCons$a ?v2 ?v0) (finlsts$b ?v1)))) :named a26))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A$)) (=> (and (member$ ?v0 (finlsts$ ?v1)) (member$a ?v2 ?v1)) (member$ (lCons$ ?v2 ?v0) (finlsts$ ?v1)))) :named a27))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (= (lappend$b (lappend$b ?v0 ?v1) ?v2) (lappend$b ?v0 (lappend$b ?v1 ?v2)))) :named a28))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a29))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist$)) (=> (member$b ?v0 (finlsts$a ?v1)) (= (llast$a (lappend$a ?v0 (lCons$b ?v2 lNil$b))) ?v2))) :named a30))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$) (?v2 A_llist$)) (=> (member$c ?v0 (finlsts$b ?v1)) (= (llast$b (lappend$b ?v0 (lCons$a ?v2 lNil$a))) ?v2))) :named a31))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A$)) (=> (member$ ?v0 (finlsts$ ?v1)) (= (llast$ (lappend$ ?v0 (lCons$ ?v2 lNil$))) ?v2))) :named a32))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist$)) (=> (member$b ?v0 (finlsts$a ?v1)) (= (llast$a (lCons$b ?v2 ?v0)) (ite (= ?v0 lNil$b) ?v2 (llast$a ?v0))))) :named a33))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$) (?v2 A_llist$)) (=> (member$c ?v0 (finlsts$b ?v1)) (= (llast$b (lCons$a ?v2 ?v0)) (ite (= ?v0 lNil$a) ?v2 (llast$b ?v0))))) :named a34))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A$)) (=> (member$ ?v0 (finlsts$ ?v1)) (= (llast$ (lCons$ ?v2 ?v0)) (ite (= ?v0 lNil$) ?v2 (llast$ ?v0))))) :named a35))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist$)) (=> (and (finlstsp$ ?v0 ?v1) (fun_app$ ?v0 ?v2)) (finlstsp$ ?v0 (lCons$b ?v2 ?v1)))) :named a36))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (finlstsp$a ?v0) ?v1) (fun_app$a ?v0 ?v2)) (fun_app$ (finlstsp$a ?v0) (lCons$a ?v2 ?v1)))) :named a37))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$)) (=> (and (fun_app$a (finlstsp$b ?v0) ?v1) (fun_app$b ?v0 ?v2)) (fun_app$a (finlstsp$b ?v0) (lCons$ ?v2 ?v1)))) :named a38))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist$)) (=> (and (alllstsp$ ?v0 ?v1) (fun_app$ ?v0 ?v2)) (alllstsp$ ?v0 (lCons$b ?v2 ?v1)))) :named a39))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (alllstsp$a ?v0) ?v1) (fun_app$a ?v0 ?v2)) (fun_app$ (alllstsp$a ?v0) (lCons$a ?v2 ?v1)))) :named a40))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$)) (=> (and (fun_app$a (alllstsp$b ?v0) ?v1) (fun_app$b ?v0 ?v2)) (fun_app$a (alllstsp$b ?v0) (lCons$ ?v2 ?v1)))) :named a41))
(check-sat)
;(get-unsat-core)
