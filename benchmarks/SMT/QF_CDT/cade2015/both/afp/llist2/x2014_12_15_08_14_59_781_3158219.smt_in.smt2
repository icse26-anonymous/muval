; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 536
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ () A_llist_set$)
(declare-fun s$ () A_llist$)
(declare-fun t$ () A_llist$)
(declare-fun top$ () A_set$)
(declare-fun top$a () A_llist_set$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun less_eq$ (A_llist$) A_llist_bool_fun$)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun less_eq$a (A_llist_set$ A_llist_set$) Bool)
(declare-fun less_eq$b (A_set$ A_set$) Bool)
(declare-fun possafety$ (A_set$ A_llist_set$) Bool)
(declare-fun suffix_closed$ (A_llist_set$) Bool)
(declare-fun pprefix_closed$ (A_llist_set$) Bool)
(assert (! (not (member$ s$ p$)) :named a0))
(assert (! (possafety$ top$ p$) :named a1))
(assert (! (member$ t$ p$) :named a2))
(assert (! (not (= s$ lNil$)) :named a3))
(assert (! (fun_app$ (less_eq$ s$) t$) :named a4))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (less_eq$ ?v0) ?v0)) :named a5))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (less_eq$ ?v0) lNil$) (= ?v0 lNil$)) :pattern ((less_eq$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (less_eq$ lNil$) ?v0)) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v0)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v2) ?v1)) (or (fun_app$ (less_eq$ ?v0) ?v2) (fun_app$ (less_eq$ ?v2) ?v0)))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (less_eq$ ?v0) ?v1) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ ?v0) ?v2))) :named a10))
(assert (! (forall ((?v0 A_llist_set$)) (= (pprefix_closed$ ?v0) (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (forall ((?v2 A_llist$)) (=> (and (fun_app$ (less_eq$ ?v2) ?v1) (not (= ?v2 lNil$))) (member$ ?v2 ?v0))))))) :named a11))
(assert (! (forall ((?v0 A_llist_set$)) (= (suffix_closed$ ?v0) (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (forall ((?v2 A_llist$)) (=> (fun_app$ (less_eq$ ?v1) ?v2) (member$ ?v2 ?v0))))))) :named a12))
(assert (! (forall ((?v0 A_llist$)) (= (member$ ?v0 top$a) true)) :named a13))
(assert (! (forall ((?v0 A$)) (= (member$a ?v0 top$) true)) :named a14))
(assert (! (forall ((?v0 A_llist$)) (member$ ?v0 top$a)) :named a15))
(assert (! (forall ((?v0 A$)) (member$a ?v0 top$)) :named a16))
(assert (! (forall ((?v0 A_llist_set$)) (less_eq$a ?v0 ?v0)) :named a17))
(assert (! (forall ((?v0 A_set$)) (less_eq$b ?v0 ?v0)) :named a18))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (less_eq$ ?v0) ?v0)) :named a19))
(assert (! (forall ((?v0 A_llist_set$)) (= (less_eq$a top$a ?v0) (= ?v0 top$a))) :named a20))
(assert (! (forall ((?v0 A_set$)) (= (less_eq$b top$ ?v0) (= ?v0 top$))) :named a21))
(check-sat)
;(get-unsat-core)
