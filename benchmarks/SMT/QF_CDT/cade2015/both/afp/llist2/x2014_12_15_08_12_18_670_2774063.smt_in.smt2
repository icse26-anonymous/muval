; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 444
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun r$ () A_llist$)
(declare-fun s$ () A_llist$)
(declare-fun t$ () A_llist$)
(declare-fun less$ (A_llist$ A_llist$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun inflsts$ (A_set$) A_llist_set$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun less_eq$ (A_llist$ A_llist$) Bool)
(assert (! (not (less_eq$ r$ t$)) :named a0))
(assert (! (less_eq$ r$ s$) :named a1))
(assert (! (less_eq$ s$ t$) :named a2))
(assert (! (forall ((?v0 A_llist$)) (less_eq$ ?v0 ?v0)) :named a3))
(assert (! (forall ((?v0 A_llist$)) (less_eq$ ?v0 ?v0)) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_llist$)) (=> (member$ ?v0 (inflsts$ ?v1)) (= (less_eq$ ?v0 ?v2) (= ?v0 ?v2)))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (less$ ?v0 ?v1) (and (less_eq$ ?v0 ?v1) (not (= ?v0 ?v1)))) :pattern ((less$ ?v0 ?v1)))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (less_eq$ ?v0 ?v1) (exists ((?v2 A_llist$)) (= ?v1 (lappend$ ?v0 ?v2))))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_llist$)) (=> (member$ ?v0 (inflsts$ ?v1)) (= (lappend$ ?v0 ?v2) ?v0))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a9))
(check-sat)
;(get-unsat-core)
