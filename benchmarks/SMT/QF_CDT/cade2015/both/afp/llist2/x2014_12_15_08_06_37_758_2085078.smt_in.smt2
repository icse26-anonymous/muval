; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 230
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_llist_set$ 0)
(declare-sort A_llist_llist_llist_llist_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))
  (A_llist_llist_llist_llist$ (lNil$c) (lCons$c (lhd$c A_llist_llist_llist$) (ltl$c A_llist_llist_llist_llist$)))))
(declare-fun a$ () A$)
(declare-fun t$ () A_llist$)
(declare-fun a$a () A_set$)
(declare-fun lsetp$ (A_llist_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun lsetp$a (A_llist_llist$) A_llist_bool_fun$)
(declare-fun lsetp$b (A_llist$) A_bool_fun$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun alllsts$ (A_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun finlsts$ (A_llist_llist_llist_set$) A_llist_llist_llist_llist_set$)
(declare-fun fun_app$ (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun inflsts$ (A_set$) A_llist_set$)
(declare-fun lmember$ (A_llist_llist$ A_llist_llist_llist$) Bool)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_set$) Bool)
(declare-fun member$c (A_llist_llist_llist$ A_llist_llist_llist_set$) Bool)
(declare-fun member$d (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun alllsts$a (A_llist_set$) A_llist_llist_set$)
(declare-fun alllsts$b (A_set$) A_llist_set$)
(declare-fun alllsts$c (A_llist_llist_llist_set$) A_llist_llist_llist_llist_set$)
(declare-fun alllstsp$ (A_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun finlsts$a (A_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun finlsts$b (A_llist_set$) A_llist_llist_set$)
(declare-fun finlsts$c (A_set$) A_llist_set$)
(declare-fun finlstsp$ (A_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun inflsts$a (A_llist_llist_llist_set$) A_llist_llist_llist_llist_set$)
(declare-fun inflsts$b (A_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun inflsts$c (A_llist_set$) A_llist_llist_set$)
(declare-fun lmember$a (A_llist$) A_llist_llist_bool_fun$)
(declare-fun lmember$b (A$) A_llist_bool_fun$)
(declare-fun alllstsp$a (A_llist_bool_fun$) A_llist_llist_bool_fun$)
(declare-fun alllstsp$b (A_bool_fun$) A_llist_bool_fun$)
(declare-fun finlstsp$a (A_llist_bool_fun$) A_llist_llist_bool_fun$)
(declare-fun finlstsp$b (A_bool_fun$) A_llist_bool_fun$)
(declare-fun pred_llist$ (A_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun pred_llist$a (A_llist_bool_fun$) A_llist_llist_bool_fun$)
(declare-fun pred_llist$b (A_bool_fun$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$ (A_llist_llist_llist$ A_llist_llist_llist$) Bool)
(declare-fun lstrict_prefix$a (A_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun lstrict_prefix$b (A_llist$) A_llist_bool_fun$)
(assert (! (not (member$ (lCons$ a$ t$) (inflsts$ a$a))) :named a0))
(assert (! (member$a a$ a$a) :named a1))
(assert (! (member$ t$ (inflsts$ a$a)) :named a2))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$) (?v1 A_llist_llist_llist_set$)) (=> (and (member$b ?v0 (inflsts$a ?v1)) (forall ((?v2 A_llist_llist_llist$) (?v3 A_llist_llist_llist_llist$)) (=> (and (member$b ?v3 (inflsts$a ?v1)) (and (member$c ?v2 ?v1) (= ?v0 (lCons$c ?v2 ?v3)))) false))) false)) :named a3))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$)) (=> (and (member$c ?v0 (inflsts$b ?v1)) (forall ((?v2 A_llist_llist$) (?v3 A_llist_llist_llist$)) (=> (and (member$c ?v3 (inflsts$b ?v1)) (and (member$d ?v2 ?v1) (= ?v0 (lCons$b ?v2 ?v3)))) false))) false)) :named a4))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$)) (=> (and (member$d ?v0 (inflsts$c ?v1)) (forall ((?v2 A_llist$) (?v3 A_llist_llist$)) (=> (and (member$d ?v3 (inflsts$c ?v1)) (and (member$ ?v2 ?v1) (= ?v0 (lCons$a ?v2 ?v3)))) false))) false)) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (and (member$ ?v0 (inflsts$ ?v1)) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (member$ ?v3 (inflsts$ ?v1)) (and (member$a ?v2 ?v1) (= ?v0 (lCons$ ?v2 ?v3)))) false))) false)) :named a6))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_llist_llist$)) (= (= (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a9))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$)) (=> (member$c ?v0 (inflsts$b ?v1)) (member$c ?v0 (alllsts$ ?v1)))) :named a10))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$)) (=> (member$d ?v0 (inflsts$c ?v1)) (member$d ?v0 (alllsts$a ?v1)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$)) (=> (member$ ?v0 (inflsts$ ?v1)) (member$ ?v0 (alllsts$b ?v1)))) :named a12))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist$)) (=> (and (finlstsp$ ?v0 ?v1) (fun_app$ ?v0 ?v2)) (finlstsp$ ?v0 (lCons$b ?v2 ?v1)))) :named a13))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (finlstsp$a ?v0) ?v1) (fun_app$a ?v0 ?v2)) (fun_app$ (finlstsp$a ?v0) (lCons$a ?v2 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$)) (=> (and (fun_app$a (finlstsp$b ?v0) ?v1) (fun_app$b ?v0 ?v2)) (fun_app$a (finlstsp$b ?v0) (lCons$ ?v2 ?v1)))) :named a15))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist_llist$) (?v2 A_llist_llist_llist_set$)) (= (member$b (lCons$c ?v0 ?v1) (alllsts$c ?v2)) (and (member$c ?v0 ?v2) (member$b ?v1 (alllsts$c ?v2))))) :named a16))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_set$)) (= (member$c (lCons$b ?v0 ?v1) (alllsts$ ?v2)) (and (member$d ?v0 ?v2) (member$c ?v1 (alllsts$ ?v2))))) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_set$)) (= (member$d (lCons$a ?v0 ?v1) (alllsts$a ?v2)) (and (member$ ?v0 ?v2) (member$d ?v1 (alllsts$a ?v2))))) :named a18))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_set$)) (= (member$ (lCons$ ?v0 ?v1) (alllsts$b ?v2)) (and (member$a ?v0 ?v2) (member$ ?v1 (alllsts$b ?v2))))) :named a19))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist$)) (=> (and (alllstsp$ ?v0 ?v1) (fun_app$ ?v0 ?v2)) (alllstsp$ ?v0 (lCons$b ?v2 ?v1)))) :named a20))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (alllstsp$a ?v0) ?v1) (fun_app$a ?v0 ?v2)) (fun_app$ (alllstsp$a ?v0) (lCons$a ?v2 ?v1)))) :named a21))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$)) (=> (and (fun_app$a (alllstsp$b ?v0) ?v1) (fun_app$b ?v0 ?v2)) (fun_app$a (alllstsp$b ?v0) (lCons$ ?v2 ?v1)))) :named a22))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$) (?v1 A_llist_llist_llist_set$) (?v2 A_llist_llist_llist$)) (=> (and (member$b ?v0 (alllsts$c ?v1)) (member$c ?v2 ?v1)) (member$b (lCons$c ?v2 ?v0) (alllsts$c ?v1)))) :named a23))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist$)) (=> (and (member$c ?v0 (alllsts$ ?v1)) (member$d ?v2 ?v1)) (member$c (lCons$b ?v2 ?v0) (alllsts$ ?v1)))) :named a24))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$) (?v2 A_llist$)) (=> (and (member$d ?v0 (alllsts$a ?v1)) (member$ ?v2 ?v1)) (member$d (lCons$a ?v2 ?v0) (alllsts$a ?v1)))) :named a25))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A$)) (=> (and (member$ ?v0 (alllsts$b ?v1)) (member$a ?v2 ?v1)) (member$ (lCons$ ?v2 ?v0) (alllsts$b ?v1)))) :named a26))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$) (?v1 A_llist_llist_llist_set$) (?v2 A_llist_llist_llist$)) (=> (and (member$b ?v0 (finlsts$ ?v1)) (member$c ?v2 ?v1)) (member$b (lCons$c ?v2 ?v0) (finlsts$ ?v1)))) :named a27))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist$)) (=> (and (member$c ?v0 (finlsts$a ?v1)) (member$d ?v2 ?v1)) (member$c (lCons$b ?v2 ?v0) (finlsts$a ?v1)))) :named a28))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_set$) (?v2 A_llist$)) (=> (and (member$d ?v0 (finlsts$b ?v1)) (member$ ?v2 ?v1)) (member$d (lCons$a ?v2 ?v0) (finlsts$b ?v1)))) :named a29))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A$)) (=> (and (member$ ?v0 (finlsts$c ?v1)) (member$a ?v2 ?v1)) (member$ (lCons$ ?v2 ?v0) (finlsts$c ?v1)))) :named a30))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist_llist$)) (! (= (lmember$ ?v0 (lCons$b ?v1 ?v2)) (or (= ?v0 ?v1) (lmember$ ?v0 ?v2))) :pattern ((lmember$ ?v0 (lCons$b ?v1 ?v2))))) :named a31))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist_llist$)) (! (= (fun_app$ (lmember$a ?v0) (lCons$a ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$ (lmember$a ?v0) ?v2))) :pattern ((fun_app$ (lmember$a ?v0) (lCons$a ?v1 ?v2))))) :named a32))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$a (lmember$b ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$a (lmember$b ?v0) ?v2))) :pattern ((fun_app$a (lmember$b ?v0) (lCons$ ?v1 ?v2))))) :named a33))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist_llist$)) (! (= (pred_llist$ ?v0 (lCons$b ?v1 ?v2)) (and (fun_app$ ?v0 ?v1) (pred_llist$ ?v0 ?v2))) :pattern ((pred_llist$ ?v0 (lCons$b ?v1 ?v2))))) :named a34))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_llist$)) (! (= (fun_app$ (pred_llist$a ?v0) (lCons$a ?v1 ?v2)) (and (fun_app$a ?v0 ?v1) (fun_app$ (pred_llist$a ?v0) ?v2))) :pattern ((fun_app$ (pred_llist$a ?v0) (lCons$a ?v1 ?v2))))) :named a35))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$a (pred_llist$b ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$b ?v0 ?v1) (fun_app$a (pred_llist$b ?v0) ?v2))) :pattern ((fun_app$a (pred_llist$b ?v0) (lCons$ ?v1 ?v2))))) :named a36))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (=> (and (=> (= ?v0 lNil$b) false) (forall ((?v1 A_llist_llist$) (?v2 A_llist_llist_llist$)) (=> (= ?v0 (lCons$b ?v1 ?v2)) false))) false)) :named a37))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (and (=> (= ?v0 lNil$a) false) (forall ((?v1 A_llist$) (?v2 A_llist_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) false))) false)) :named a38))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false))) false)) :named a39))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_llist_llist$)) (! (= (lstrict_prefix$ (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (lstrict_prefix$ ?v1 ?v3))) :pattern ((lstrict_prefix$ (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3))))) :named a40))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (! (= (fun_app$ (lstrict_prefix$a (lCons$a ?v0 ?v1)) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$ (lstrict_prefix$a ?v1) ?v3))) :pattern ((fun_app$ (lstrict_prefix$a (lCons$a ?v0 ?v1)) (lCons$a ?v2 ?v3))))) :named a41))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$a (lstrict_prefix$b (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$a (lstrict_prefix$b ?v1) ?v3))) :pattern ((fun_app$a (lstrict_prefix$b (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))) :named a42))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist$)) (= (fun_app$ (lsetp$ ?v0) ?v1) (or (exists ((?v2 A_llist_llist$) (?v3 A_llist_llist_llist$)) (and (= ?v0 (lCons$b ?v2 ?v3)) (= ?v1 ?v2))) (exists ((?v2 A_llist_llist_llist$) (?v3 A_llist_llist$) (?v4 A_llist_llist$)) (and (= ?v0 (lCons$b ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$ (lsetp$ ?v2) ?v3))))))) :named a43))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (= (fun_app$a (lsetp$a ?v0) ?v1) (or (exists ((?v2 A_llist$) (?v3 A_llist_llist$)) (and (= ?v0 (lCons$a ?v2 ?v3)) (= ?v1 ?v2))) (exists ((?v2 A_llist_llist$) (?v3 A_llist$) (?v4 A_llist$)) (and (= ?v0 (lCons$a ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$a (lsetp$a ?v2) ?v3))))))) :named a44))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (= (fun_app$b (lsetp$b ?v0) ?v1) (or (exists ((?v2 A$) (?v3 A_llist$)) (and (= ?v0 (lCons$ ?v2 ?v3)) (= ?v1 ?v2))) (exists ((?v2 A_llist$) (?v3 A$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$b (lsetp$b ?v2) ?v3))))))) :named a45))
(assert (! (= (fun_app$ (lstrict_prefix$a lNil$a) lNil$a) false) :named a46))
(assert (! (= (fun_app$a (lstrict_prefix$b lNil$) lNil$) false) :named a47))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$)) (! (= (lstrict_prefix$ (lCons$b ?v0 ?v1) lNil$b) false) :pattern ((lCons$b ?v0 ?v1)))) :named a48))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (fun_app$ (lstrict_prefix$a (lCons$a ?v0 ?v1)) lNil$a) false) :pattern ((lCons$a ?v0 ?v1)))) :named a49))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$a (lstrict_prefix$b (lCons$ ?v0 ?v1)) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))) :named a50))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$)) (! (= (lstrict_prefix$ lNil$b (lCons$b ?v0 ?v1)) true) :pattern ((lCons$b ?v0 ?v1)))) :named a51))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (fun_app$ (lstrict_prefix$a lNil$a) (lCons$a ?v0 ?v1)) true) :pattern ((lCons$a ?v0 ?v1)))) :named a52))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$a (lstrict_prefix$b lNil$) (lCons$ ?v0 ?v1)) true) :pattern ((lCons$ ?v0 ?v1)))) :named a53))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (lmember$a ?v0) lNil$a) false) :pattern ((lmember$a ?v0)))) :named a54))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$a (lmember$b ?v0) lNil$) false) :pattern ((lmember$b ?v0)))) :named a55))
(check-sat)
;(get-unsat-core)
