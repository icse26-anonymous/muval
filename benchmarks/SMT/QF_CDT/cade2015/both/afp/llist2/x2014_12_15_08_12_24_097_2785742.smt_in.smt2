; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 443
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-fun s$ () A_llist$)
(declare-fun t$ () A_llist$)
(declare-fun top$ () A_set$)
(declare-fun less$ (A_llist$ A_llist$) Bool)
(declare-fun top$a () A_llist_set$)
(declare-fun top$b () A_llist_llist_set$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun alllsts$ (A_set$) A_llist_set$)
(declare-fun inflsts$ (A_set$) A_llist_set$)
(declare-fun less_eq$ (A_llist$ A_llist$) Bool)
(declare-fun member$a (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun member$b (A$ A_set$) Bool)
(declare-fun alllsts$a (A_llist_set$) A_llist_llist_set$)
(declare-fun less_eq$a (A_llist_set$ A_llist_set$) Bool)
(declare-fun less_eq$b (A_set$ A_set$) Bool)
(assert (! (not (= s$ t$)) :named a0))
(assert (! (member$ s$ (alllsts$ top$)) :named a1))
(assert (! (less_eq$ s$ t$) :named a2))
(assert (! (less_eq$ t$ s$) :named a3))
(assert (! (forall ((?v0 A_llist_llist$)) (member$a ?v0 (alllsts$a top$a))) :named a4))
(assert (! (forall ((?v0 A_llist$)) (member$ ?v0 (alllsts$ top$))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (less_eq$ ?v0 ?v0)) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2))) :named a8))
(assert (! (forall ((?v0 A_llist$)) (less_eq$ ?v0 ?v0)) :named a9))
(assert (! (forall ((?v0 A_llist_llist$)) (= (member$a ?v0 top$b) true)) :named a10))
(assert (! (forall ((?v0 A_llist$)) (= (member$ ?v0 top$a) true)) :named a11))
(assert (! (forall ((?v0 A$)) (= (member$b ?v0 top$) true)) :named a12))
(assert (! (forall ((?v0 A_llist_llist$)) (member$a ?v0 top$b)) :named a13))
(assert (! (forall ((?v0 A_llist$)) (member$ ?v0 top$a)) :named a14))
(assert (! (forall ((?v0 A$)) (member$b ?v0 top$)) :named a15))
(assert (! (forall ((?v0 A_llist_set$)) (less_eq$a ?v0 ?v0)) :named a16))
(assert (! (forall ((?v0 A_set$)) (less_eq$b ?v0 ?v0)) :named a17))
(assert (! (forall ((?v0 A_llist_set$)) (= (less_eq$a top$a ?v0) (= ?v0 top$a))) :named a18))
(assert (! (forall ((?v0 A_set$)) (= (less_eq$b top$ ?v0) (= ?v0 top$))) :named a19))
(assert (! (forall ((?v0 A_llist_set$)) (=> (less_eq$a top$a ?v0) (= ?v0 top$a))) :named a20))
(assert (! (forall ((?v0 A_set$)) (=> (less_eq$b top$ ?v0) (= ?v0 top$))) :named a21))
(assert (! (forall ((?v0 A_llist_set$)) (less_eq$a ?v0 top$a)) :named a22))
(assert (! (forall ((?v0 A_set$)) (less_eq$b ?v0 top$)) :named a23))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_llist$)) (=> (member$ ?v0 (inflsts$ ?v1)) (= (less_eq$ ?v0 ?v2) (= ?v0 ?v2)))) :named a24))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (less$ ?v0 ?v1) (and (less_eq$ ?v0 ?v1) (not (= ?v0 ?v1)))) :pattern ((less$ ?v0 ?v1)))) :named a25))
(check-sat)
;(get-unsat-core)
