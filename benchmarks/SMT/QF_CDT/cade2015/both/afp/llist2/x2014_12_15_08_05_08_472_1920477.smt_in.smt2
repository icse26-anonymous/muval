; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 270
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun bot$ () A_set$)
(declare-fun bot$a () A_llist_set$)
(declare-fun bot$b () A_llist_bool_fun$)
(declare-fun bot$c () Bool)
(declare-fun bot$d () A_bool_fun$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun poslsts$ (A_set$) A_llist_set$)
(declare-fun collect$a (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun is_empty$ (A_set$) Bool)
(declare-fun is_empty$a (A_llist_set$) Bool)
(assert (! (not (= (poslsts$ bot$) bot$a)) :named a0))
(assert (! (forall ((?v0 A_bool_fun$)) (= (= (collect$ ?v0) bot$) (forall ((?v1 A$)) (not (fun_app$ ?v0 ?v1))))) :named a1))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (= (= (collect$a ?v0) bot$a) (forall ((?v1 A_llist$)) (not (fun_app$a ?v0 ?v1))))) :named a2))
(assert (! (forall ((?v0 A_set$)) (= (forall ((?v1 A$)) (not (member$ ?v1 ?v0))) (= ?v0 bot$))) :named a3))
(assert (! (forall ((?v0 A_llist_set$)) (= (forall ((?v1 A_llist$)) (not (member$a ?v1 ?v0))) (= ?v0 bot$a))) :named a4))
(assert (! (forall ((?v0 A_bool_fun$)) (= (= bot$ (collect$ ?v0)) (forall ((?v1 A$)) (not (fun_app$ ?v0 ?v1))))) :named a5))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (= (= bot$a (collect$a ?v0)) (forall ((?v1 A_llist$)) (not (fun_app$a ?v0 ?v1))))) :named a6))
(assert (! (forall ((?v0 A$)) (= (member$ ?v0 bot$) false)) :named a7))
(assert (! (forall ((?v0 A_llist$)) (= (member$a ?v0 bot$a) false)) :named a8))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a bot$b ?v0) bot$c) :pattern ((fun_app$a bot$b ?v0)))) :named a9))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ bot$d ?v0) bot$c) :pattern ((fun_app$ bot$d ?v0)))) :named a10))
(assert (! (forall ((?v0 A_set$)) (= (exists ((?v1 A$)) (member$ ?v1 ?v0)) (not (= ?v0 bot$)))) :named a11))
(assert (! (forall ((?v0 A_llist_set$)) (= (exists ((?v1 A_llist$)) (member$a ?v1 ?v0)) (not (= ?v0 bot$a)))) :named a12))
(assert (! (forall ((?v0 A_set$)) (=> (forall ((?v1 A$)) (=> (member$ ?v1 ?v0) false)) (= ?v0 bot$))) :named a13))
(assert (! (forall ((?v0 A_llist_set$)) (=> (forall ((?v1 A_llist$)) (=> (member$a ?v1 ?v0) false)) (= ?v0 bot$a))) :named a14))
(assert (! (forall ((?v0 A_set$) (?v1 A$)) (=> (= ?v0 bot$) (not (member$ ?v1 ?v0)))) :named a15))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (= ?v0 bot$a) (not (member$a ?v1 ?v0)))) :named a16))
(assert (! (forall ((?v0 A$)) (=> (member$ ?v0 bot$) false)) :named a17))
(assert (! (forall ((?v0 A_llist$)) (=> (member$a ?v0 bot$a) false)) :named a18))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a bot$b ?v0) bot$c) :pattern ((fun_app$a bot$b ?v0)))) :named a19))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ bot$d ?v0) bot$c) :pattern ((fun_app$ bot$d ?v0)))) :named a20))
(assert (! (forall ((?v0 A_set$)) (! (= (is_empty$ ?v0) (= ?v0 bot$)) :pattern ((is_empty$ ?v0)))) :named a21))
(assert (! (forall ((?v0 A_llist_set$)) (! (= (is_empty$a ?v0) (= ?v0 bot$a)) :pattern ((is_empty$a ?v0)))) :named a22))
(assert (! (= bot$ (collect$ bot$d)) :named a23))
(assert (! (= bot$a (collect$a bot$b)) :named a24))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ bot$d ?v0) (member$ ?v0 bot$)) :pattern ((fun_app$ bot$d ?v0)))) :named a25))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a bot$b ?v0) (member$a ?v0 bot$a)) :pattern ((fun_app$a bot$b ?v0)))) :named a26))
(check-sat)
;(get-unsat-core)
