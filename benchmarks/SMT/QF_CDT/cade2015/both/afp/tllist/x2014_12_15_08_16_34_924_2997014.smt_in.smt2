; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 141
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort D$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort C_bool_fun$ 0)
(declare-sort D_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort C_c_bool_fun_fun$ 0)
(declare-sort C_d_bool_fun_fun$ 0)
(declare-sort D_c_bool_fun_fun$ 0)
(declare-sort D_d_bool_fun_fun$ 0)
(declare-sort A_c_tllist_bool_fun$ 0)
(declare-sort B_d_tllist_bool_fun$ 0)
(declare-sort A_c_tllist_a_c_tllist_bool_fun_fun$ 0)
(declare-sort B_d_tllist_b_d_tllist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_c_tllist$ (tNil$ (terminal$ C$)) (tCons$ (thd$ A$) (ttl$ A_c_tllist$)))
  (B_d_tllist$ (tNil$a (terminal$a D$)) (tCons$a (thd$a B$) (ttl$a B_d_tllist$)))))
(declare-fun s$ () C_c_bool_fun_fun$)
(declare-fun t$ () B_b_bool_fun_fun$)
(declare-fun r1$ () A_b_bool_fun_fun$)
(declare-fun r2$ () C_d_bool_fun_fun$)
(declare-fun s$a () A_a_bool_fun_fun$)
(declare-fun t$a () D_d_bool_fun_fun$)
(declare-fun uu$ () B_b_bool_fun_fun$)
(declare-fun xs$ () A_c_tllist$)
(declare-fun ys$ () B_d_tllist$)
(declare-fun uua$ () D_d_bool_fun_fun$)
(declare-fun uub$ () B_d_tllist_b_d_tllist_bool_fun_fun$)
(declare-fun uuc$ () A_a_bool_fun_fun$)
(declare-fun uud$ () C_c_bool_fun_fun$)
(declare-fun uue$ () A_c_tllist_a_c_tllist_bool_fun_fun$)
(declare-fun xs$a () A_c_tllist$)
(declare-fun xsa$ () A_c_tllist$)
(declare-fun ys$a () B_d_tllist$)
(declare-fun ysa$ () B_d_tllist$)
(declare-fun xs_a$ () A_c_tllist$)
(declare-fun ys_a$ () B_d_tllist$)
(declare-fun fun_app$ (B_d_tllist_bool_fun$ B_d_tllist$) Bool)
(declare-fun is_TNil$ (A_c_tllist$) Bool)
(declare-fun fun_app$a (B_d_tllist_b_d_tllist_bool_fun_fun$ B_d_tllist$) B_d_tllist_bool_fun$)
(declare-fun fun_app$b (A_c_tllist_bool_fun$ A_c_tllist$) Bool)
(declare-fun fun_app$c (A_c_tllist_a_c_tllist_bool_fun_fun$ A_c_tllist$) A_c_tllist_bool_fun$)
(declare-fun fun_app$d (D_bool_fun$ D$) Bool)
(declare-fun fun_app$e (D_d_bool_fun_fun$ D$) D_bool_fun$)
(declare-fun fun_app$f (C_bool_fun$ C$) Bool)
(declare-fun fun_app$g (C_c_bool_fun_fun$ C$) C_bool_fun$)
(declare-fun fun_app$h (B_bool_fun$ B$) Bool)
(declare-fun fun_app$i (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$j (A_bool_fun$ A$) Bool)
(declare-fun fun_app$k (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$l (C_d_bool_fun_fun$ C$) D_bool_fun$)
(declare-fun fun_app$m (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$n (D_c_bool_fun_fun$ D$) C_bool_fun$)
(declare-fun fun_app$o (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun is_TNil$a (B_d_tllist$) Bool)
(declare-fun tllist_all2$ (A_b_bool_fun_fun$ C_d_bool_fun_fun$ A_c_tllist$ B_d_tllist$) Bool)
(declare-fun tllist_all2$a (B_b_bool_fun_fun$ D_d_bool_fun_fun$) B_d_tllist_b_d_tllist_bool_fun_fun$)
(declare-fun tllist_all2$b (A_a_bool_fun_fun$ C_c_bool_fun_fun$) A_c_tllist_a_c_tllist_bool_fun_fun$)
(declare-fun tllist_all2$c (B_a_bool_fun_fun$ D_c_bool_fun_fun$ B_d_tllist$ A_c_tllist$) Bool)
(assert (! (forall ((?v0 B_d_tllist$) (?v1 B_d_tllist$)) (! (= (fun_app$ (fun_app$a uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uub$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_c_tllist$) (?v1 A_c_tllist$)) (! (= (fun_app$b (fun_app$c uue$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c uue$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 D$) (?v1 D$)) (! (= (fun_app$d (fun_app$e uua$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (fun_app$e uua$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 C$) (?v1 C$)) (! (= (fun_app$f (fun_app$g uud$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$f (fun_app$g uud$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$h (fun_app$i uu$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$h (fun_app$i uu$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$j (fun_app$k uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$j (fun_app$k uuc$ ?v0) ?v1)))) :named a5))
(assert (! (not (and (= (is_TNil$ xsa$) (is_TNil$ xs_a$)) (and (=> (and (is_TNil$ xsa$) (is_TNil$ xs_a$)) (fun_app$f (fun_app$g s$ (terminal$ xsa$)) (terminal$ xs_a$))) (=> (and (not (is_TNil$ xsa$)) (not (is_TNil$ xs_a$))) (and (fun_app$j (fun_app$k s$a (thd$ xsa$)) (thd$ xs_a$)) (or (exists ((?v0 A_c_tllist$) (?v1 A_c_tllist$) (?v2 B_d_tllist$) (?v3 B_d_tllist$)) (and (= (ttl$ xsa$) ?v0) (and (= (ttl$ xs_a$) ?v1) (and (tllist_all2$ r1$ r2$ ?v0 ?v2) (and (tllist_all2$ r1$ r2$ ?v1 ?v3) (fun_app$ (fun_app$a (tllist_all2$a t$ t$a) ?v2) ?v3)))))) (fun_app$b (fun_app$c (tllist_all2$b s$a s$) (ttl$ xsa$)) (ttl$ xs_a$)))))))) :named a6))
(assert (! (fun_app$ (fun_app$a (tllist_all2$a t$ t$a) ysa$) ys_a$) :named a7))
(assert (! (tllist_all2$ r1$ r2$ xsa$ ysa$) :named a8))
(assert (! (tllist_all2$ r1$ r2$ xs_a$ ys_a$) :named a9))
(assert (! (forall ((?v0 C$) (?v1 D$)) (=> (fun_app$d (fun_app$l r2$ ?v0) ?v1) (forall ((?v2 C$) (?v3 D$)) (=> (fun_app$d (fun_app$l r2$ ?v2) ?v3) (= (fun_app$f (fun_app$g s$ ?v0) ?v2) (fun_app$d (fun_app$e t$a ?v1) ?v3)))))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 B$)) (=> (fun_app$h (fun_app$m r1$ ?v0) ?v1) (forall ((?v2 A$) (?v3 B$)) (=> (fun_app$h (fun_app$m r1$ ?v2) ?v3) (= (fun_app$j (fun_app$k s$a ?v0) ?v2) (fun_app$h (fun_app$i t$ ?v1) ?v3)))))) :named a11))
(assert (! (tllist_all2$ r1$ r2$ xs$ ys$) :named a12))
(assert (! (tllist_all2$ r1$ r2$ xs$a ys$a) :named a13))
(assert (! (forall ((?v0 B_d_tllist$)) (= (terminal$a (ttl$a ?v0)) (terminal$a ?v0))) :named a14))
(assert (! (forall ((?v0 A_c_tllist$)) (= (terminal$ (ttl$ ?v0)) (terminal$ ?v0))) :named a15))
(assert (! (fun_app$ (fun_app$a (tllist_all2$a t$ t$a) ys$) ys$a) :named a16))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 A_c_tllist$)) (= (tllist_all2$c ?v0 ?v1 ?v2 ?v3) (and (= (is_TNil$a ?v2) (is_TNil$ ?v3)) (and (=> (and (is_TNil$a ?v2) (is_TNil$ ?v3)) (fun_app$f (fun_app$n ?v1 (terminal$a ?v2)) (terminal$ ?v3))) (=> (and (not (is_TNil$a ?v2)) (not (is_TNil$ ?v3))) (and (fun_app$j (fun_app$o ?v0 (thd$a ?v2)) (thd$ ?v3)) (tllist_all2$c ?v0 ?v1 (ttl$a ?v2) (ttl$ ?v3)))))))) :named a17))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 B_d_tllist$)) (= (tllist_all2$ ?v0 ?v1 ?v2 ?v3) (and (= (is_TNil$ ?v2) (is_TNil$a ?v3)) (and (=> (and (is_TNil$ ?v2) (is_TNil$a ?v3)) (fun_app$d (fun_app$l ?v1 (terminal$ ?v2)) (terminal$a ?v3))) (=> (and (not (is_TNil$ ?v2)) (not (is_TNil$a ?v3))) (and (fun_app$h (fun_app$m ?v0 (thd$ ?v2)) (thd$a ?v3)) (tllist_all2$ ?v0 ?v1 (ttl$ ?v2) (ttl$a ?v3)))))))) :named a18))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 B_d_tllist$)) (= (fun_app$ (fun_app$a (tllist_all2$a ?v0 ?v1) ?v2) ?v3) (and (= (is_TNil$a ?v2) (is_TNil$a ?v3)) (and (=> (and (is_TNil$a ?v2) (is_TNil$a ?v3)) (fun_app$d (fun_app$e ?v1 (terminal$a ?v2)) (terminal$a ?v3))) (=> (and (not (is_TNil$a ?v2)) (not (is_TNil$a ?v3))) (and (fun_app$h (fun_app$i ?v0 (thd$a ?v2)) (thd$a ?v3)) (fun_app$ (fun_app$a (tllist_all2$a ?v0 ?v1) (ttl$a ?v2)) (ttl$a ?v3)))))))) :named a19))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 A_c_tllist$)) (= (fun_app$b (fun_app$c (tllist_all2$b ?v0 ?v1) ?v2) ?v3) (and (= (is_TNil$ ?v2) (is_TNil$ ?v3)) (and (=> (and (is_TNil$ ?v2) (is_TNil$ ?v3)) (fun_app$f (fun_app$g ?v1 (terminal$ ?v2)) (terminal$ ?v3))) (=> (and (not (is_TNil$ ?v2)) (not (is_TNil$ ?v3))) (and (fun_app$j (fun_app$k ?v0 (thd$ ?v2)) (thd$ ?v3)) (fun_app$b (fun_app$c (tllist_all2$b ?v0 ?v1) (ttl$ ?v2)) (ttl$ ?v3)))))))) :named a20))
(assert (! (= (tllist_all2$a uu$ uua$) uub$) :named a21))
(assert (! (= (tllist_all2$b uuc$ uud$) uue$) :named a22))
(assert (! (forall ((?v0 B_d_tllist$)) (=> (and (=> (is_TNil$a ?v0) false) (=> (not (is_TNil$a ?v0)) false)) false)) :named a23))
(assert (! (forall ((?v0 A_c_tllist$)) (=> (and (=> (is_TNil$ ?v0) false) (=> (not (is_TNil$ ?v0)) false)) false)) :named a24))
(assert (! (forall ((?v0 B_d_tllist$)) (=> (and (=> (is_TNil$a ?v0) false) (=> (not (is_TNil$a ?v0)) false)) false)) :named a25))
(assert (! (forall ((?v0 A_c_tllist$)) (=> (and (=> (is_TNil$ ?v0) false) (=> (not (is_TNil$ ?v0)) false)) false)) :named a26))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 A_c_tllist$) (?v4 B_a_bool_fun_fun$) (?v5 D_c_bool_fun_fun$)) (=> (and (tllist_all2$c ?v0 ?v1 ?v2 ?v3) (and (forall ((?v6 B$) (?v7 A$)) (=> (fun_app$j (fun_app$o ?v0 ?v6) ?v7) (fun_app$j (fun_app$o ?v4 ?v6) ?v7))) (forall ((?v6 D$) (?v7 C$)) (=> (fun_app$f (fun_app$n ?v1 ?v6) ?v7) (fun_app$f (fun_app$n ?v5 ?v6) ?v7))))) (tllist_all2$c ?v4 ?v5 ?v2 ?v3))) :named a27))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 B_d_tllist$) (?v4 A_b_bool_fun_fun$) (?v5 C_d_bool_fun_fun$)) (=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3) (and (forall ((?v6 A$) (?v7 B$)) (=> (fun_app$h (fun_app$m ?v0 ?v6) ?v7) (fun_app$h (fun_app$m ?v4 ?v6) ?v7))) (forall ((?v6 C$) (?v7 D$)) (=> (fun_app$d (fun_app$l ?v1 ?v6) ?v7) (fun_app$d (fun_app$l ?v5 ?v6) ?v7))))) (tllist_all2$ ?v4 ?v5 ?v2 ?v3))) :named a28))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 B_d_tllist$) (?v4 B_b_bool_fun_fun$) (?v5 D_d_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$a (tllist_all2$a ?v0 ?v1) ?v2) ?v3) (and (forall ((?v6 B$) (?v7 B$)) (=> (fun_app$h (fun_app$i ?v0 ?v6) ?v7) (fun_app$h (fun_app$i ?v4 ?v6) ?v7))) (forall ((?v6 D$) (?v7 D$)) (=> (fun_app$d (fun_app$e ?v1 ?v6) ?v7) (fun_app$d (fun_app$e ?v5 ?v6) ?v7))))) (fun_app$ (fun_app$a (tllist_all2$a ?v4 ?v5) ?v2) ?v3))) :named a29))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 A_c_tllist$) (?v4 A_a_bool_fun_fun$) (?v5 C_c_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$c (tllist_all2$b ?v0 ?v1) ?v2) ?v3) (and (forall ((?v6 A$) (?v7 A$)) (=> (fun_app$j (fun_app$k ?v0 ?v6) ?v7) (fun_app$j (fun_app$k ?v4 ?v6) ?v7))) (forall ((?v6 C$) (?v7 C$)) (=> (fun_app$f (fun_app$g ?v1 ?v6) ?v7) (fun_app$f (fun_app$g ?v5 ?v6) ?v7))))) (fun_app$b (fun_app$c (tllist_all2$b ?v4 ?v5) ?v2) ?v3))) :named a30))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 A_c_tllist$)) (=> (and (tllist_all2$c ?v0 ?v1 ?v2 ?v3) (or (not (is_TNil$a ?v2)) (not (is_TNil$ ?v3)))) (tllist_all2$c ?v0 ?v1 (ttl$a ?v2) (ttl$ ?v3)))) :named a31))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 B_d_tllist$)) (=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3) (or (not (is_TNil$ ?v2)) (not (is_TNil$a ?v3)))) (tllist_all2$ ?v0 ?v1 (ttl$ ?v2) (ttl$a ?v3)))) :named a32))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 B_d_tllist$)) (=> (and (fun_app$ (fun_app$a (tllist_all2$a ?v0 ?v1) ?v2) ?v3) (or (not (is_TNil$a ?v2)) (not (is_TNil$a ?v3)))) (fun_app$ (fun_app$a (tllist_all2$a ?v0 ?v1) (ttl$a ?v2)) (ttl$a ?v3)))) :named a33))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 A_c_tllist$)) (=> (and (fun_app$b (fun_app$c (tllist_all2$b ?v0 ?v1) ?v2) ?v3) (or (not (is_TNil$ ?v2)) (not (is_TNil$ ?v3)))) (fun_app$b (fun_app$c (tllist_all2$b ?v0 ?v1) (ttl$ ?v2)) (ttl$ ?v3)))) :named a34))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 A_c_tllist$)) (=> (and (tllist_all2$c ?v0 ?v1 ?v2 ?v3) (or (not (is_TNil$a ?v2)) (not (is_TNil$ ?v3)))) (fun_app$j (fun_app$o ?v0 (thd$a ?v2)) (thd$ ?v3)))) :named a35))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 B_d_tllist$)) (=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3) (or (not (is_TNil$ ?v2)) (not (is_TNil$a ?v3)))) (fun_app$h (fun_app$m ?v0 (thd$ ?v2)) (thd$a ?v3)))) :named a36))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 B_d_tllist$)) (=> (and (fun_app$ (fun_app$a (tllist_all2$a ?v0 ?v1) ?v2) ?v3) (or (not (is_TNil$a ?v2)) (not (is_TNil$a ?v3)))) (fun_app$h (fun_app$i ?v0 (thd$a ?v2)) (thd$a ?v3)))) :named a37))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 A_c_tllist$)) (=> (and (fun_app$b (fun_app$c (tllist_all2$b ?v0 ?v1) ?v2) ?v3) (or (not (is_TNil$ ?v2)) (not (is_TNil$ ?v3)))) (fun_app$j (fun_app$k ?v0 (thd$ ?v2)) (thd$ ?v3)))) :named a38))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 A_c_tllist$)) (=> (tllist_all2$c ?v0 ?v1 ?v2 ?v3) (= (is_TNil$a ?v2) (is_TNil$ ?v3)))) :named a39))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 B_d_tllist$)) (=> (tllist_all2$ ?v0 ?v1 ?v2 ?v3) (= (is_TNil$ ?v2) (is_TNil$a ?v3)))) :named a40))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 B_d_tllist$)) (=> (fun_app$ (fun_app$a (tllist_all2$a ?v0 ?v1) ?v2) ?v3) (= (is_TNil$a ?v2) (is_TNil$a ?v3)))) :named a41))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 A_c_tllist$)) (=> (fun_app$b (fun_app$c (tllist_all2$b ?v0 ?v1) ?v2) ?v3) (= (is_TNil$ ?v2) (is_TNil$ ?v3)))) :named a42))
(check-sat)
;(get-unsat-core)
