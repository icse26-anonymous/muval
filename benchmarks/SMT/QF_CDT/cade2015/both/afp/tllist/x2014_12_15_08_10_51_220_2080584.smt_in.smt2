; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 297
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_llist_a_b_tllist_fun$ 0)
(declare-codatatypes () ((A_b_tllist$ (tNil$ (terminal$ B$)) (tCons$ (thd$ A$) (ttl$ A_b_tllist$)))
  (A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun b$ () B$)
(declare-fun c$ () B$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun fun_app$ (A_llist_a_b_tllist_fun$ A_llist$) A_b_tllist$)
(declare-fun is_TNil$ (A_b_tllist$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llist_of_tllist$ (A_b_tllist$) A_llist$)
(declare-fun tllist_of_llist$ (B$) A_llist_a_b_tllist_fun$)
(assert (! (not (= (fun_app$ (tllist_of_llist$ b$) xs$) (fun_app$ (tllist_of_llist$ c$) ys$))) :named a0))
(assert (! (and (= xs$ ys$) (=> (lfinite$ ys$) (= b$ c$))) :named a1))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 B$) (?v3 B$)) (=> (and (= ?v0 ?v1) (=> (lfinite$ ?v1) (= ?v2 ?v3))) (= (fun_app$ (tllist_of_llist$ ?v2) ?v0) (fun_app$ (tllist_of_llist$ ?v3) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_b_tllist$)) (= (fun_app$ (tllist_of_llist$ (terminal$ ?v0)) (llist_of_tllist$ ?v0)) ?v0)) :named a3))
(assert (! (forall ((?v0 B$) (?v1 A_llist$)) (= (thd$ (fun_app$ (tllist_of_llist$ ?v0) ?v1)) (lhd$ ?v1))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 B$)) (=> (lnull$ ?v0) (= (terminal$ (fun_app$ (tllist_of_llist$ ?v1) ?v0)) ?v1))) :named a5))
(assert (! (forall ((?v0 B$) (?v1 A_llist$) (?v2 B$)) (= (= (fun_app$ (tllist_of_llist$ ?v0) ?v1) (tNil$ ?v2)) (and (= ?v2 ?v0) (= ?v1 lNil$)))) :named a6))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 A_llist$)) (= (= (tNil$ ?v0) (fun_app$ (tllist_of_llist$ ?v1) ?v2)) (and (= ?v0 ?v1) (= ?v2 lNil$)))) :named a7))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$ (tllist_of_llist$ ?v0) lNil$) (tNil$ ?v0)) :pattern ((tllist_of_llist$ ?v0)))) :named a8))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (tllist_of_llist$ ?v0) (lCons$ ?v1 ?v2)) (tCons$ ?v1 (fun_app$ (tllist_of_llist$ ?v0) ?v2))) :pattern ((fun_app$ (tllist_of_llist$ ?v0) (lCons$ ?v1 ?v2))))) :named a9))
(assert (! (forall ((?v0 B$) (?v1 A_llist$)) (= (ttl$ (fun_app$ (tllist_of_llist$ ?v0) ?v1)) (fun_app$ (tllist_of_llist$ ?v0) (ltl$ ?v1)))) :named a10))
(assert (! (forall ((?v0 B$) (?v1 A_llist$)) (= (not (is_TNil$ (fun_app$ (tllist_of_llist$ ?v0) ?v1))) (not (lnull$ ?v1)))) :named a11))
(assert (! (forall ((?v0 B$) (?v1 A_llist$)) (= (is_TNil$ (fun_app$ (tllist_of_llist$ ?v0) ?v1)) (lnull$ ?v1))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 B$)) (=> (not (lnull$ ?v0)) (not (is_TNil$ (fun_app$ (tllist_of_llist$ ?v1) ?v0))))) :named a13))
(assert (! (forall ((?v0 B$) (?v1 B$)) (= (= (tNil$ ?v0) (tNil$ ?v1)) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 A$) (?v3 A_b_tllist$)) (= (= (tCons$ ?v0 ?v1) (tCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (! (= (terminal$ (tCons$ ?v0 ?v1)) (terminal$ ?v1)) :pattern ((tCons$ ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 A_b_tllist$)) (= (terminal$ (ttl$ ?v0)) (terminal$ ?v0))) :named a17))
(check-sat)
;(get-unsat-core)
