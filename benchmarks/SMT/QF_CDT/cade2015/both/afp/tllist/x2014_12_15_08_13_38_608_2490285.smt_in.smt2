; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 321
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Unit$ 0)
(declare-sort Unit_a_fun$ 0)
(declare-sort B_llist_a_tllist_b_a_tllist_fun$ 0)
(declare-sort A_b_llist_a_tllist_b_a_tllist_fun_fun$ 0)
(declare-sort B_llist_llist_a_tllist_b_llist_a_tllist_fun$ 0)
(declare-codatatypes () ((B_a_tllist$ (tNil$ (terminal$ A$)) (tCons$ (thd$ B$) (ttl$ B_a_tllist$)))
  (B_llist$ (lNil$) (lCons$ (lhd$ B$) (ltl$ B_llist$)))
  (B_llist_a_tllist$ (tNil$a (terminal$a A$)) (tCons$a (thd$a B_llist$) (ttl$a B_llist_a_tllist$)))
  (B_llist_llist$ (lNil$a) (lCons$a (lhd$a B_llist$) (ltl$a B_llist_llist$)))
  (B_llist_llist_a_tllist$ (tNil$b (terminal$b A$)) (tCons$b (thd$b B_llist_llist$) (ttl$b B_llist_llist_a_tllist$)))
  (B_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b B_llist_llist$) (ltl$b B_llist_llist_llist$)))
  (B_llist_llist_llist_a_tllist$ (tNil$c (terminal$c A$)) (tCons$c (thd$c B_llist_llist_llist$) (ttl$c B_llist_llist_llist_a_tllist$)))))
(declare-fun uu$ (A$) Unit_a_fun$)
(declare-fun uua$ () A_b_llist_a_tllist_b_a_tllist_fun_fun$)
(declare-fun unity$ () Unit$)
(declare-fun fun_app$ (A_b_llist_a_tllist_b_a_tllist_fun_fun$ A$) B_llist_a_tllist_b_a_tllist_fun$)
(declare-fun tconcat$ (Unit_a_fun$) B_llist_a_tllist_b_a_tllist_fun$)
(declare-fun fun_app$a (Unit_a_fun$ Unit$) A$)
(declare-fun fun_app$b (B_llist_llist_a_tllist_b_llist_a_tllist_fun$ B_llist_llist_a_tllist$) B_llist_a_tllist$)
(declare-fun fun_app$c (B_llist_a_tllist_b_a_tllist_fun$ B_llist_a_tllist$) B_a_tllist$)
(declare-fun lappendt$ (B_llist_llist$ B_llist_a_tllist$) B_llist_a_tllist$)
(declare-fun tconcat$a () A_b_llist_a_tllist_b_a_tllist_fun_fun$)
(declare-fun tconcat$b (Unit_a_fun$) B_llist_llist_a_tllist_b_llist_a_tllist_fun$)
(declare-fun tconcat$c (A$) B_llist_llist_a_tllist_b_llist_a_tllist_fun$)
(declare-fun tconcat$d (A$ B_llist_llist_llist_a_tllist$) B_llist_llist_a_tllist$)
(declare-fun lappendt$a (B_llist$ B_a_tllist$) B_a_tllist$)
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uua$ ?v0) (tconcat$ (uu$ ?v0))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 Unit$)) (! (= (fun_app$a (uu$ ?v0) ?v1) ?v0) :pattern ((fun_app$a (uu$ ?v0) ?v1)))) :named a1))
(assert (! (not (= tconcat$a uua$)) :named a2))
(assert (! (forall ((?v0 Unit_a_fun$)) (! (= (tconcat$b ?v0) (tconcat$c (fun_app$a ?v0 unity$))) :pattern ((tconcat$b ?v0)))) :named a3))
(assert (! (forall ((?v0 Unit_a_fun$)) (! (= (tconcat$ ?v0) (fun_app$ tconcat$a (fun_app$a ?v0 unity$))) :pattern ((tconcat$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 B_llist_llist$) (?v2 B_llist_llist_a_tllist$)) (! (= (fun_app$b (tconcat$c ?v0) (tCons$b ?v1 ?v2)) (lappendt$ ?v1 (fun_app$b (tconcat$c ?v0) ?v2))) :pattern ((fun_app$b (tconcat$c ?v0) (tCons$b ?v1 ?v2))))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 B_llist$) (?v2 B_llist_a_tllist$)) (! (= (fun_app$c (fun_app$ tconcat$a ?v0) (tCons$a ?v1 ?v2)) (lappendt$a ?v1 (fun_app$c (fun_app$ tconcat$a ?v0) ?v2))) :pattern ((fun_app$c (fun_app$ tconcat$a ?v0) (tCons$a ?v1 ?v2))))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (tconcat$d ?v0 (tNil$c ?v1)) (tNil$b ?v1)) :pattern ((tconcat$d ?v0 (tNil$c ?v1))))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$b (tconcat$c ?v0) (tNil$b ?v1)) (tNil$a ?v1)) :pattern ((fun_app$b (tconcat$c ?v0) (tNil$b ?v1))))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$c (fun_app$ tconcat$a ?v0) (tNil$a ?v1)) (tNil$ ?v1)) :pattern ((fun_app$c (fun_app$ tconcat$a ?v0) (tNil$a ?v1))))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (tNil$b ?v0) (tNil$b ?v1)) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (tNil$a ?v0) (tNil$a ?v1)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (tNil$ ?v0) (tNil$ ?v1)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist_a_tllist$) (?v2 B_llist$) (?v3 B_llist_a_tllist$)) (= (= (tCons$a ?v0 ?v1) (tCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a13))
(check-sat)
;(get-unsat-core)
