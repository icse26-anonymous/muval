; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 316
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_b_tllist_b_fun$ 0)
(declare-sort B_a_b_tllist_fun$ 0)
(declare-codatatypes () ((A_b_tllist$ (tNil$ (terminal$ B$)) (tCons$ (thd$ A$) (ttl$ A_b_tllist$)))
  (A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun uu$ () A_b_tllist_b_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_b_tllist$)
(declare-fun tmap$ (A_a_fun$ B_b_fun$ A_b_tllist$) A_b_tllist$)
(declare-fun fun_app$ (A_b_tllist_b_fun$ A_b_tllist$) B$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun tappend$ (A_b_tllist$ B_a_b_tllist_fun$) A_b_tllist$)
(declare-fun fun_app$a (B_a_b_tllist_fun$ B$) A_b_tllist$)
(declare-fun fun_app$b (B_b_fun$ B$) B$)
(declare-fun lappendt$ (A_llist$ A_b_tllist$) A_b_tllist$)
(declare-fun terminal0$ () A_b_tllist_b_fun$)
(declare-fun llist_of_tllist$ (A_b_tllist$) A_llist$)
(declare-fun tllist_of_llist$ (B$ A_llist$) A_b_tllist$)
(assert (! (forall ((?v0 A_b_tllist$)) (! (= (fun_app$ uu$ ?v0) (terminal$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (= (terminal$ (lappendt$ xs$ ys$)) (terminal$ ys$))) :named a1))
(assert (! (lfinite$ xs$) :named a2))
(assert (! (= terminal0$ uu$) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 B$)) (=> (lfinite$ ?v0) (= (terminal$ (tllist_of_llist$ ?v1 ?v0)) ?v1))) :named a4))
(assert (! (forall ((?v0 A_b_tllist$)) (! (= (lappendt$ lNil$ ?v0) ?v0) :pattern ((lappendt$ lNil$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_b_tllist$)) (= (terminal$ (ttl$ ?v0)) (terminal$ ?v0))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (! (= (terminal$ (tCons$ ?v0 ?v1)) (terminal$ ?v1)) :pattern ((tCons$ ?v0 ?v1)))) :named a7))
(assert (! (forall ((?v0 B$) (?v1 A_llist$) (?v2 B$) (?v3 A_llist$)) (= (= (tllist_of_llist$ ?v0 ?v1) (tllist_of_llist$ ?v2 ?v3)) (and (= ?v1 ?v3) (=> (lfinite$ ?v3) (= ?v0 ?v2))))) :named a8))
(assert (! (forall ((?v0 A_b_tllist$) (?v1 B_a_b_tllist_fun$)) (= (lfinite$ (llist_of_tllist$ (tappend$ ?v0 ?v1))) (and (lfinite$ (llist_of_tllist$ ?v0)) (lfinite$ (llist_of_tllist$ (fun_app$a ?v1 (terminal$ ?v0))))))) :named a9))
(assert (! (forall ((?v0 A_b_tllist$) (?v1 B_a_b_tllist_fun$)) (= (terminal$ (tappend$ ?v0 ?v1)) (ite (lfinite$ (llist_of_tllist$ ?v0)) (terminal$ (fun_app$a ?v1 (terminal$ ?v0))) (terminal$ ?v0)))) :named a10))
(assert (! (forall ((?v0 B$)) (! (= (terminal$ (tNil$ ?v0)) ?v0) :pattern ((tNil$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_b_tllist$) (?v1 A_a_fun$) (?v2 B_b_fun$)) (=> (lfinite$ (llist_of_tllist$ ?v0)) (= (terminal$ (tmap$ ?v1 ?v2 ?v0)) (fun_app$b ?v2 (terminal$ ?v0))))) :named a12))
(assert (! (forall ((?v0 B$) (?v1 B$)) (= (= (tNil$ ?v0) (tNil$ ?v1)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 A$) (?v3 A_b_tllist$)) (= (= (tCons$ ?v0 ?v1) (tCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 B$) (?v1 A_llist$)) (= (llist_of_tllist$ (tllist_of_llist$ ?v0 ?v1)) ?v1)) :named a15))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 A_b_tllist$)) (= (ttl$ (tmap$ ?v0 ?v1 ?v2)) (tmap$ ?v0 ?v1 (ttl$ ?v2)))) :named a16))
(check-sat)
;(get-unsat-core)
