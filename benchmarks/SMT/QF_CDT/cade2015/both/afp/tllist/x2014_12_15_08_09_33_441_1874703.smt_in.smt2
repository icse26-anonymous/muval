; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 280
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_b_prod_bool_fun$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-fun p$ () A_b_prod$)
(declare-fun r$ (A$) Bool)
(declare-fun fun_app$ (A_b_prod_bool_fun$ A_b_prod$) Bool)
(assert (! (not (= (r$ (fst$ p$)) (forall ((?v0 A$) (?v1 B$)) (=> (= p$ (pair$ ?v0 ?v1)) (r$ ?v0))))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a1))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$)) (= (= ?v0 (fst$ ?v1)) (exists ((?v2 B$)) (= ?v1 (pair$ ?v0 ?v2))))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 B$)) (! (= (fst$ (pair$ ?v0 ?v1)) ?v0) :pattern ((pair$ ?v0 ?v1)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$)) (=> (= (fst$ (pair$ ?v0 ?v1)) ?v2) (= ?v0 ?v2))) :named a5))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$) (?v2 B$)) (=> (= ?v0 (pair$ ?v1 ?v2)) (= (fst$ ?v0) ?v1))) :named a6))
(assert (! (forall ((?v0 A_b_prod$)) (=> (forall ((?v1 A$) (?v2 B$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a7))
(assert (! (forall ((?v0 A_b_prod$)) (exists ((?v1 A$) (?v2 B$)) (= ?v0 (pair$ ?v1 ?v2)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (=> (and (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a9))
(assert (! (forall ((?v0 A_b_prod$)) (=> (forall ((?v1 A$) (?v2 B$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a10))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A_b_prod$)) (=> (forall ((?v2 A$) (?v3 B$)) (fun_app$ ?v0 (pair$ ?v2 ?v3))) (fun_app$ ?v0 ?v1))) :named a11))
(check-sat)
;(get-unsat-core)
