; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 297
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_b_a_tllist_fun$ 0)
(declare-sort B_a_tllist_a_fun$ 0)
(declare-sort A_b_a_tllist_fun_b_a_tllist_fun$ 0)
(declare-codatatypes () ((B_a_tllist$ (tNil$ (terminal$ A$)) (tCons$ (thd$ B$) (ttl$ B_a_tllist$)))
  (B_llist$ (lNil$) (lCons$ (lhd$ B$) (ltl$ B_llist$)))))
(declare-fun f$ () A_b_a_tllist_fun$)
(declare-fun uu$ () B_a_tllist_a_fun$)
(declare-fun xs$ () B_a_tllist$)
(declare-fun uua$ () A_b_a_tllist_fun$)
(declare-fun tmap$ (B_b_fun$ A_a_fun$ B_a_tllist$) B_a_tllist$)
(declare-fun fun_app$ (B_a_tllist_a_fun$ B_a_tllist$) A$)
(declare-fun is_TNil$ (B_a_tllist$) Bool)
(declare-fun lfinite$ (B_llist$) Bool)
(declare-fun tappend$ (B_a_tllist$) A_b_a_tllist_fun_b_a_tllist_fun$)
(declare-fun fun_app$a (A_b_a_tllist_fun$ A$) B_a_tllist$)
(declare-fun fun_app$b (A_b_a_tllist_fun_b_a_tllist_fun$ A_b_a_tllist_fun$) B_a_tllist$)
(declare-fun fun_app$c (A_a_fun$ A$) A$)
(declare-fun terminal0$ () B_a_tllist_a_fun$)
(declare-fun undefined$ () A$)
(declare-fun llist_of_tllist$ (B_a_tllist$) B_llist$)
(declare-fun tllist_of_llist$ (A$ B_llist$) B_a_tllist$)
(assert (! (forall ((?v0 B_a_tllist$)) (! (= (fun_app$ uu$ ?v0) (terminal$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$a uua$ ?v0) (tNil$ ?v0)) :pattern ((fun_app$a uua$ ?v0)))) :named a1))
(assert (! (not (= (terminal$ (fun_app$b (tappend$ xs$) f$)) (ite (lfinite$ (llist_of_tllist$ xs$)) (terminal$ (fun_app$a f$ (terminal$ xs$))) (terminal$ xs$)))) :named a2))
(assert (! (forall ((?v0 B_a_tllist$) (?v1 B_b_fun$) (?v2 A_a_fun$)) (=> (lfinite$ (llist_of_tllist$ ?v0)) (= (terminal$ (tmap$ ?v1 ?v2 ?v0)) (fun_app$c ?v2 (terminal$ ?v0))))) :named a3))
(assert (! (= terminal0$ uu$) :named a4))
(assert (! (forall ((?v0 B_a_tllist$)) (! (=> (not (lfinite$ (llist_of_tllist$ ?v0))) (= (terminal$ ?v0) undefined$)) :pattern ((terminal$ ?v0)))) :named a5))
(assert (! (forall ((?v0 B_a_tllist$)) (= (tllist_of_llist$ (terminal$ ?v0) (llist_of_tllist$ ?v0)) ?v0)) :named a6))
(assert (! (forall ((?v0 B_llist$) (?v1 A$)) (=> (lfinite$ ?v0) (= (terminal$ (tllist_of_llist$ ?v1 ?v0)) ?v1))) :named a7))
(assert (! (forall ((?v0 B_a_tllist$)) (=> (is_TNil$ ?v0) (lfinite$ (llist_of_tllist$ ?v0)))) :named a8))
(assert (! (forall ((?v0 B$) (?v1 B_a_tllist$) (?v2 A_b_a_tllist_fun$)) (! (= (fun_app$b (tappend$ (tCons$ ?v0 ?v1)) ?v2) (tCons$ ?v0 (fun_app$b (tappend$ ?v1) ?v2))) :pattern ((fun_app$b (tappend$ (tCons$ ?v0 ?v1)) ?v2)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_b_a_tllist_fun$)) (! (= (fun_app$b (tappend$ (tNil$ ?v0)) ?v1) (fun_app$a ?v1 ?v0)) :pattern ((fun_app$b (tappend$ (tNil$ ?v0)) ?v1)))) :named a10))
(assert (! (forall ((?v0 B_a_tllist$)) (! (= (fun_app$b (tappend$ ?v0) uua$) ?v0) :pattern ((tappend$ ?v0)))) :named a11))
(assert (! (forall ((?v0 B_a_tllist$)) (= (terminal$ (ttl$ ?v0)) (terminal$ ?v0))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (tNil$ ?v0) (tNil$ ?v1)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 B$) (?v1 B_a_tllist$) (?v2 B$) (?v3 B_a_tllist$)) (= (= (tCons$ ?v0 ?v1) (tCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 B_llist$) (?v2 A$) (?v3 B_llist$)) (= (= (tllist_of_llist$ ?v0 ?v1) (tllist_of_llist$ ?v2 ?v3)) (and (= ?v1 ?v3) (=> (lfinite$ ?v3) (= ?v0 ?v2))))) :named a15))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_a_fun$) (?v2 B_a_tllist$)) (= (is_TNil$ (tmap$ ?v0 ?v1 ?v2)) (is_TNil$ ?v2))) :named a16))
(assert (! (forall ((?v0 B$) (?v1 B_a_tllist$)) (! (= (terminal$ (tCons$ ?v0 ?v1)) (terminal$ ?v1)) :pattern ((tCons$ ?v0 ?v1)))) :named a17))
(check-sat)
;(get-unsat-core)
