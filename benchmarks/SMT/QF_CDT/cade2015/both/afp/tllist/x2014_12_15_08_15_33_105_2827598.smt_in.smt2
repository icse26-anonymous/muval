; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 597
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-codatatypes () ((A_b_tllist$ (tNil$ (terminal$ B$)) (tCons$ (thd$ A$) (ttl$ A_b_tllist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun m$ () Nat$)
(declare-fun n$ () Nat$)
(declare-fun xs$ () A_b_tllist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun tnth$ (A_b_tllist$ Nat$) A$)
(declare-fun less$a (Nat$ Nat$) Bool)
(declare-fun plus$a (Enat$ Enat$) Enat$)
(declare-fun tdropn$ (Nat$ A_b_tllist$) A_b_tllist$)
(declare-fun tlength$ (A_b_tllist$) Enat$)
(assert (! (not (= (tnth$ (tdropn$ n$ xs$) m$) (tnth$ xs$ (plus$ m$ n$)))) :named a0))
(assert (! (less$ (enat$ (plus$ n$ m$)) (tlength$ xs$)) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (less$a (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (less$a ?v0 ?v2))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (less$a (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (less$a ?v1 ?v2))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a6))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (less$ ?v0 (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 ?v1) (less$a ?v2 ?v3)) (less$a (plus$ ?v0 ?v2) (plus$ ?v1 ?v3)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (less$a ?v0 ?v1) (= ?v2 ?v3)) (less$a (plus$ ?v0 ?v2) (plus$ ?v1 ?v3)))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (less$a ?v0 ?v1) (less$a ?v2 ?v3)) (less$a (plus$ ?v0 ?v2) (plus$ ?v1 ?v3)))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (less$a (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (less$a ?v0 ?v2))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (less$a (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (less$a ?v1 ?v2))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (plus$a (enat$ ?v0) (enat$ ?v1)) (enat$ (plus$ ?v0 ?v1))) :pattern ((plus$a (enat$ ?v0) (enat$ ?v1))))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less$ (enat$ ?v0) (enat$ ?v1)) (less$a ?v0 ?v1)) :pattern ((less$ (enat$ ?v0) (enat$ ?v1))))) :named a14))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (and (less$ ?v0 (enat$ ?v1)) (forall ((?v2 Nat$)) (=> (and (= ?v0 (enat$ ?v2)) (less$a ?v2 ?v1)) false))) false)) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (plus$ ?v0 ?v2) (plus$ ?v1 ?v3)))) :named a16))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (plus$a ?v0 ?v2) (plus$a ?v1 ?v3)))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a18))
(check-sat)
;(get-unsat-core)
