; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 227
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort D$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_d_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort C_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort D_a_fun$ 0)
(declare-sort D_d_fun$ 0)
(declare-sort A_b_tllist_b_fun$ 0)
(declare-sort A_c_tllist_c_fun$ 0)
(declare-sort D_b_tllist_b_fun$ 0)
(declare-sort D_c_tllist_c_fun$ 0)
(declare-codatatypes () ((D_c_tllist$ (tNil$ (terminal$ C$)) (tCons$ (thd$ D$) (ttl$ D_c_tllist$)))
  (A_b_tllist$ (tNil$a (terminal$a B$)) (tCons$a (thd$a A$) (ttl$a A_b_tllist$)))
  (A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (D_b_tllist$ (tNil$b (terminal$b B$)) (tCons$b (thd$b D$) (ttl$b D_b_tllist$)))
  (A_c_tllist$ (tNil$c (terminal$c C$)) (tCons$c (thd$c A$) (ttl$c A_c_tllist$)))
  (D_llist$ (lNil$a) (lCons$a (lhd$a D$) (ltl$a D_llist$)))))
(declare-fun f$ () A_d_fun$)
(declare-fun g$ () B_c_fun$)
(declare-fun uu$ () D_b_tllist_b_fun$)
(declare-fun xs$ () A_b_tllist$)
(declare-fun uua$ () A_c_tllist_c_fun$)
(declare-fun uub$ () D_c_tllist_c_fun$)
(declare-fun uuc$ () A_b_tllist_b_fun$)
(declare-fun tmap$ (A_d_fun$ B_c_fun$ A_b_tllist$) D_c_tllist$)
(declare-fun tmap$a (D_d_fun$ C_c_fun$ D_c_tllist$) D_c_tllist$)
(declare-fun tmap$b (D_a_fun$ C_b_fun$ D_c_tllist$) A_b_tllist$)
(declare-fun tmap$c (A_a_fun$ B_b_fun$ A_b_tllist$) A_b_tllist$)
(declare-fun tmap$d (D_d_fun$ B_c_fun$ D_b_tllist$) D_c_tllist$)
(declare-fun tmap$e (A_d_fun$ C_c_fun$ A_c_tllist$) D_c_tllist$)
(declare-fun tmap$f (D_a_fun$ B_b_fun$ D_b_tllist$) A_b_tllist$)
(declare-fun tmap$g (A_a_fun$ C_b_fun$ A_c_tllist$) A_b_tllist$)
(declare-fun tmap$h (D_d_fun$ C_b_fun$ D_c_tllist$) D_b_tllist$)
(declare-fun tmap$i (A_d_fun$ B_b_fun$ A_b_tllist$) D_b_tllist$)
(declare-fun fun_app$ (D_c_tllist_c_fun$ D_c_tllist$) C$)
(declare-fun is_TNil$ (D_c_tllist$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun fun_app$a (D_b_tllist_b_fun$ D_b_tllist$) B$)
(declare-fun fun_app$b (A_c_tllist_c_fun$ A_c_tllist$) C$)
(declare-fun fun_app$c (A_b_tllist_b_fun$ A_b_tllist$) B$)
(declare-fun fun_app$d (B_c_fun$ B$) C$)
(declare-fun fun_app$e (C_c_fun$ C$) C$)
(declare-fun fun_app$f (C_b_fun$ C$) B$)
(declare-fun fun_app$g (B_b_fun$ B$) B$)
(declare-fun is_TNil$a (A_b_tllist$) Bool)
(declare-fun is_TNil$b (D_b_tllist$) Bool)
(declare-fun is_TNil$c (A_c_tllist$) Bool)
(declare-fun lfinite$a (D_llist$) Bool)
(declare-fun terminal0$ () D_b_tllist_b_fun$)
(declare-fun undefined$ () C$)
(declare-fun terminal0$a () A_c_tllist_c_fun$)
(declare-fun terminal0$b () D_c_tllist_c_fun$)
(declare-fun terminal0$c () A_b_tllist_b_fun$)
(declare-fun undefined$a () B$)
(declare-fun llist_of_tllist$ (A_b_tllist$) A_llist$)
(declare-fun tllist_of_llist$ (B$ D_llist$) D_b_tllist$)
(declare-fun llist_of_tllist$a (A_c_tllist$) A_llist$)
(declare-fun llist_of_tllist$b (D_b_tllist$) D_llist$)
(declare-fun llist_of_tllist$c (D_c_tllist$) D_llist$)
(declare-fun tllist_of_llist$a (C$ A_llist$) A_c_tllist$)
(declare-fun tllist_of_llist$b (C$ D_llist$) D_c_tllist$)
(declare-fun tllist_of_llist$c (B$ A_llist$) A_b_tllist$)
(assert (! (forall ((?v0 D_c_tllist$)) (! (= (fun_app$ uub$ ?v0) (terminal$ ?v0)) :pattern ((fun_app$ uub$ ?v0)))) :named a0))
(assert (! (forall ((?v0 D_b_tllist$)) (! (= (fun_app$a uu$ ?v0) (terminal$b ?v0)) :pattern ((fun_app$a uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_c_tllist$)) (! (= (fun_app$b uua$ ?v0) (terminal$c ?v0)) :pattern ((fun_app$b uua$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A_b_tllist$)) (! (= (fun_app$c uuc$ ?v0) (terminal$a ?v0)) :pattern ((fun_app$c uuc$ ?v0)))) :named a3))
(assert (! (not (= (terminal$ (tmap$ f$ g$ xs$)) (fun_app$d g$ (terminal$a xs$)))) :named a4))
(assert (! (lfinite$ (llist_of_tllist$ xs$)) :named a5))
(assert (! (= terminal0$ uu$) :named a6))
(assert (! (= terminal0$a uua$) :named a7))
(assert (! (= terminal0$b uub$) :named a8))
(assert (! (= terminal0$c uuc$) :named a9))
(assert (! (forall ((?v0 A_c_tllist$)) (! (=> (not (lfinite$ (llist_of_tllist$a ?v0))) (= (terminal$c ?v0) undefined$)) :pattern ((terminal$c ?v0)))) :named a10))
(assert (! (forall ((?v0 D_b_tllist$)) (! (=> (not (lfinite$a (llist_of_tllist$b ?v0))) (= (terminal$b ?v0) undefined$a)) :pattern ((terminal$b ?v0)))) :named a11))
(assert (! (forall ((?v0 D_c_tllist$)) (! (=> (not (lfinite$a (llist_of_tllist$c ?v0))) (= (terminal$ ?v0) undefined$)) :pattern ((terminal$ ?v0)))) :named a12))
(assert (! (forall ((?v0 A_b_tllist$)) (! (=> (not (lfinite$ (llist_of_tllist$ ?v0))) (= (terminal$a ?v0) undefined$a)) :pattern ((terminal$a ?v0)))) :named a13))
(assert (! (forall ((?v0 D_b_tllist$)) (= (tllist_of_llist$ (terminal$b ?v0) (llist_of_tllist$b ?v0)) ?v0)) :named a14))
(assert (! (forall ((?v0 A_c_tllist$)) (= (tllist_of_llist$a (terminal$c ?v0) (llist_of_tllist$a ?v0)) ?v0)) :named a15))
(assert (! (forall ((?v0 D_c_tllist$)) (= (tllist_of_llist$b (terminal$ ?v0) (llist_of_tllist$c ?v0)) ?v0)) :named a16))
(assert (! (forall ((?v0 A_b_tllist$)) (= (tllist_of_llist$c (terminal$a ?v0) (llist_of_tllist$ ?v0)) ?v0)) :named a17))
(assert (! (forall ((?v0 D_llist$) (?v1 B$)) (=> (lfinite$a ?v0) (= (terminal$b (tllist_of_llist$ ?v1 ?v0)) ?v1))) :named a18))
(assert (! (forall ((?v0 A_llist$) (?v1 C$)) (=> (lfinite$ ?v0) (= (terminal$c (tllist_of_llist$a ?v1 ?v0)) ?v1))) :named a19))
(assert (! (forall ((?v0 D_llist$) (?v1 C$)) (=> (lfinite$a ?v0) (= (terminal$ (tllist_of_llist$b ?v1 ?v0)) ?v1))) :named a20))
(assert (! (forall ((?v0 A_llist$) (?v1 B$)) (=> (lfinite$ ?v0) (= (terminal$a (tllist_of_llist$c ?v1 ?v0)) ?v1))) :named a21))
(assert (! (forall ((?v0 D_c_tllist$) (?v1 D_d_fun$) (?v2 C_c_fun$)) (=> (is_TNil$ ?v0) (= (terminal$ (tmap$a ?v1 ?v2 ?v0)) (fun_app$e ?v2 (terminal$ ?v0))))) :named a22))
(assert (! (forall ((?v0 A_b_tllist$) (?v1 A_d_fun$) (?v2 B_c_fun$)) (=> (is_TNil$a ?v0) (= (terminal$ (tmap$ ?v1 ?v2 ?v0)) (fun_app$d ?v2 (terminal$a ?v0))))) :named a23))
(assert (! (forall ((?v0 D_c_tllist$) (?v1 D_a_fun$) (?v2 C_b_fun$)) (=> (is_TNil$ ?v0) (= (terminal$a (tmap$b ?v1 ?v2 ?v0)) (fun_app$f ?v2 (terminal$ ?v0))))) :named a24))
(assert (! (forall ((?v0 A_b_tllist$) (?v1 A_a_fun$) (?v2 B_b_fun$)) (=> (is_TNil$a ?v0) (= (terminal$a (tmap$c ?v1 ?v2 ?v0)) (fun_app$g ?v2 (terminal$a ?v0))))) :named a25))
(assert (! (forall ((?v0 D_b_tllist$) (?v1 D_d_fun$) (?v2 B_c_fun$)) (=> (is_TNil$b ?v0) (= (terminal$ (tmap$d ?v1 ?v2 ?v0)) (fun_app$d ?v2 (terminal$b ?v0))))) :named a26))
(assert (! (forall ((?v0 A_c_tllist$) (?v1 A_d_fun$) (?v2 C_c_fun$)) (=> (is_TNil$c ?v0) (= (terminal$ (tmap$e ?v1 ?v2 ?v0)) (fun_app$e ?v2 (terminal$c ?v0))))) :named a27))
(assert (! (forall ((?v0 D_b_tllist$) (?v1 D_a_fun$) (?v2 B_b_fun$)) (=> (is_TNil$b ?v0) (= (terminal$a (tmap$f ?v1 ?v2 ?v0)) (fun_app$g ?v2 (terminal$b ?v0))))) :named a28))
(assert (! (forall ((?v0 A_c_tllist$) (?v1 A_a_fun$) (?v2 C_b_fun$)) (=> (is_TNil$c ?v0) (= (terminal$a (tmap$g ?v1 ?v2 ?v0)) (fun_app$f ?v2 (terminal$c ?v0))))) :named a29))
(assert (! (forall ((?v0 D_c_tllist$) (?v1 D_d_fun$) (?v2 C_b_fun$)) (=> (is_TNil$ ?v0) (= (terminal$b (tmap$h ?v1 ?v2 ?v0)) (fun_app$f ?v2 (terminal$ ?v0))))) :named a30))
(assert (! (forall ((?v0 A_b_tllist$) (?v1 A_d_fun$) (?v2 B_b_fun$)) (=> (is_TNil$a ?v0) (= (terminal$b (tmap$i ?v1 ?v2 ?v0)) (fun_app$g ?v2 (terminal$a ?v0))))) :named a31))
(assert (! (forall ((?v0 D_b_tllist$)) (=> (is_TNil$b ?v0) (lfinite$a (llist_of_tllist$b ?v0)))) :named a32))
(assert (! (forall ((?v0 A_c_tllist$)) (=> (is_TNil$c ?v0) (lfinite$ (llist_of_tllist$a ?v0)))) :named a33))
(assert (! (forall ((?v0 D_c_tllist$)) (=> (is_TNil$ ?v0) (lfinite$a (llist_of_tllist$c ?v0)))) :named a34))
(assert (! (forall ((?v0 A_b_tllist$)) (=> (is_TNil$a ?v0) (lfinite$ (llist_of_tllist$ ?v0)))) :named a35))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 A_b_tllist$)) (= (ttl$a (tmap$c ?v0 ?v1 ?v2)) (tmap$c ?v0 ?v1 (ttl$a ?v2)))) :named a36))
(assert (! (forall ((?v0 D_a_fun$) (?v1 C_b_fun$) (?v2 D_c_tllist$)) (= (ttl$a (tmap$b ?v0 ?v1 ?v2)) (tmap$b ?v0 ?v1 (ttl$ ?v2)))) :named a37))
(assert (! (forall ((?v0 D_d_fun$) (?v1 C_c_fun$) (?v2 D_c_tllist$)) (= (ttl$ (tmap$a ?v0 ?v1 ?v2)) (tmap$a ?v0 ?v1 (ttl$ ?v2)))) :named a38))
(assert (! (forall ((?v0 A_d_fun$) (?v1 B_c_fun$) (?v2 A_b_tllist$)) (= (ttl$ (tmap$ ?v0 ?v1 ?v2)) (tmap$ ?v0 ?v1 (ttl$a ?v2)))) :named a39))
(assert (! (forall ((?v0 D_b_tllist$)) (= (terminal$b (ttl$b ?v0)) (terminal$b ?v0))) :named a40))
(assert (! (forall ((?v0 A_c_tllist$)) (= (terminal$c (ttl$c ?v0)) (terminal$c ?v0))) :named a41))
(assert (! (forall ((?v0 D_c_tllist$)) (= (terminal$ (ttl$ ?v0)) (terminal$ ?v0))) :named a42))
(assert (! (forall ((?v0 A_b_tllist$)) (= (terminal$a (ttl$a ?v0)) (terminal$a ?v0))) :named a43))
(assert (! (forall ((?v0 D$) (?v1 D_b_tllist$)) (! (= (terminal$b (tCons$b ?v0 ?v1)) (terminal$b ?v1)) :pattern ((tCons$b ?v0 ?v1)))) :named a44))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$)) (! (= (terminal$c (tCons$c ?v0 ?v1)) (terminal$c ?v1)) :pattern ((tCons$c ?v0 ?v1)))) :named a45))
(assert (! (forall ((?v0 D$) (?v1 D_c_tllist$)) (! (= (terminal$ (tCons$ ?v0 ?v1)) (terminal$ ?v1)) :pattern ((tCons$ ?v0 ?v1)))) :named a46))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (! (= (terminal$a (tCons$a ?v0 ?v1)) (terminal$a ?v1)) :pattern ((tCons$a ?v0 ?v1)))) :named a47))
(assert (! (forall ((?v0 B$) (?v1 D_llist$)) (= (llist_of_tllist$b (tllist_of_llist$ ?v0 ?v1)) ?v1)) :named a48))
(assert (! (forall ((?v0 C$) (?v1 A_llist$)) (= (llist_of_tllist$a (tllist_of_llist$a ?v0 ?v1)) ?v1)) :named a49))
(assert (! (forall ((?v0 C$) (?v1 D_llist$)) (= (llist_of_tllist$c (tllist_of_llist$b ?v0 ?v1)) ?v1)) :named a50))
(assert (! (forall ((?v0 B$) (?v1 A_llist$)) (= (llist_of_tllist$ (tllist_of_llist$c ?v0 ?v1)) ?v1)) :named a51))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 A$) (?v3 A_b_tllist$)) (= (= (tCons$a ?v0 ?v1) (tCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a52))
(assert (! (forall ((?v0 D$) (?v1 D_c_tllist$) (?v2 D$) (?v3 D_c_tllist$)) (= (= (tCons$ ?v0 ?v1) (tCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a53))
(assert (! (forall ((?v0 B$) (?v1 A_llist$) (?v2 B$) (?v3 A_llist$)) (= (= (tllist_of_llist$c ?v0 ?v1) (tllist_of_llist$c ?v2 ?v3)) (and (= ?v1 ?v3) (=> (lfinite$ ?v3) (= ?v0 ?v2))))) :named a54))
(assert (! (forall ((?v0 C$) (?v1 D_llist$) (?v2 C$) (?v3 D_llist$)) (= (= (tllist_of_llist$b ?v0 ?v1) (tllist_of_llist$b ?v2 ?v3)) (and (= ?v1 ?v3) (=> (lfinite$a ?v3) (= ?v0 ?v2))))) :named a55))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 A_b_tllist$)) (= (is_TNil$a (tmap$c ?v0 ?v1 ?v2)) (is_TNil$a ?v2))) :named a56))
(assert (! (forall ((?v0 D_a_fun$) (?v1 C_b_fun$) (?v2 D_c_tllist$)) (= (is_TNil$a (tmap$b ?v0 ?v1 ?v2)) (is_TNil$ ?v2))) :named a57))
(assert (! (forall ((?v0 D_d_fun$) (?v1 C_c_fun$) (?v2 D_c_tllist$)) (= (is_TNil$ (tmap$a ?v0 ?v1 ?v2)) (is_TNil$ ?v2))) :named a58))
(assert (! (forall ((?v0 A_d_fun$) (?v1 B_c_fun$) (?v2 A_b_tllist$)) (= (is_TNil$ (tmap$ ?v0 ?v1 ?v2)) (is_TNil$a ?v2))) :named a59))
(check-sat)
;(get-unsat-core)
