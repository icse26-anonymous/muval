; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 68
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort D$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort C_set$ 0)
(declare-sort D_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort B_d_fun$ 0)
(declare-sort C_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort C_d_fun$ 0)
(declare-sort D_b_fun$ 0)
(declare-sort D_c_fun$ 0)
(declare-sort D_d_fun$ 0)
(declare-sort Natural$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort C_bool_fun$ 0)
(declare-sort D_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort B_a_b_tllist_fun$ 0)
(declare-sort B_a_c_tllist_fun$ 0)
(declare-sort B_a_d_tllist_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort B_c_bool_fun_fun$ 0)
(declare-sort B_d_bool_fun_fun$ 0)
(declare-sort C_a_b_tllist_fun$ 0)
(declare-sort C_a_c_tllist_fun$ 0)
(declare-sort C_a_d_tllist_fun$ 0)
(declare-sort C_b_bool_fun_fun$ 0)
(declare-sort C_c_bool_fun_fun$ 0)
(declare-sort C_d_bool_fun_fun$ 0)
(declare-sort D_a_b_tllist_fun$ 0)
(declare-sort D_a_c_tllist_fun$ 0)
(declare-sort D_a_d_tllist_fun$ 0)
(declare-sort D_b_bool_fun_fun$ 0)
(declare-sort D_c_bool_fun_fun$ 0)
(declare-sort D_d_bool_fun_fun$ 0)
(declare-sort Natural_bool_fun$ 0)
(declare-sort A_b_tllist_bool_fun$ 0)
(declare-sort A_c_tllist_bool_fun$ 0)
(declare-sort A_d_tllist_bool_fun$ 0)
(declare-sort Natural_natural_prod_set$ 0)
(declare-sort A_a_b_tllist_bool_fun_fun$ 0)
(declare-sort A_a_c_tllist_bool_fun_fun$ 0)
(declare-sort A_a_d_tllist_bool_fun_fun$ 0)
(declare-sort A_c_tllist_a_c_tllist_fun$ 0)
(declare-sort A_d_tllist_a_d_tllist_fun$ 0)
(declare-sort B_a_b_tllist_bool_fun_fun$ 0)
(declare-sort C_a_c_tllist_bool_fun_fun$ 0)
(declare-sort D_a_d_tllist_bool_fun_fun$ 0)
(declare-sort Natural_natural_bool_fun_fun$ 0)
(declare-sort Natural_natural_prod_bool_fun$ 0)
(declare-sort A_a_c_tllist_a_c_tllist_fun_fun$ 0)
(declare-sort A_a_d_tllist_a_d_tllist_fun_fun$ 0)
(declare-sort B_a_b_tllist_fun_a_b_tllist_fun$ 0)
(declare-sort C_a_c_tllist_fun_a_c_tllist_fun$ 0)
(declare-sort D_a_d_tllist_fun_a_d_tllist_fun$ 0)
(declare-sort Natural_natural_prod_natural_natural_prod_bool_fun_fun$ 0)
(declare-codatatypes () ((A_b_tllist$ (tNil$ (terminal$ B$)) (tCons$ (thd$ A$) (ttl$ A_b_tllist$)))
  (A_c_tllist$ (tNil$a (terminal$a C$)) (tCons$a (thd$a A$) (ttl$a A_c_tllist$)))
  (A_d_tllist$ (tNil$b (terminal$b D$)) (tCons$b (thd$b A$) (ttl$b A_d_tllist$)))))
(declare-datatypes () ((Natural_natural_prod$ (pair$ (fst$ Natural$) (snd$ Natural$)))))
(declare-codatatypes () ((Natural_natural_prod_natural_natural_prod_tllist$ (tNil$c (terminal$c Natural_natural_prod$)) (tCons$c (thd$c Natural_natural_prod$) (ttl$c Natural_natural_prod_natural_natural_prod_tllist$)))))
(declare-fun f$ () D_a_c_tllist_fun$)
(declare-fun g$ () C_a_b_tllist_fun$)
(declare-fun uu$ () D_a_b_tllist_fun$)
(declare-fun xs$ () A_d_tllist$)
(declare-fun bot$ () A_set$)
(declare-fun suc$ (Natural$) Natural$)
(declare-fun uua$ () B_a_b_tllist_fun$)
(declare-fun uub$ () D_a_d_tllist_fun$)
(declare-fun uuc$ () C_a_c_tllist_fun$)
(declare-fun uud$ () A_a_fun$)
(declare-fun uue$ () C_c_fun$)
(declare-fun uuf$ () B_b_fun$)
(declare-fun uug$ (Natural_natural_prod_set$) Natural_natural_prod_bool_fun$)
(declare-fun uuh$ () A_a_d_tllist_a_d_tllist_fun_fun$)
(declare-fun uui$ () A_a_c_tllist_a_c_tllist_fun_fun$)
(declare-fun uuj$ (Natural_natural_prod_set$) Natural_natural_bool_fun_fun$)
(declare-fun bot$a () D_set$)
(declare-fun bot$b () C_set$)
(declare-fun bot$c () Natural_natural_prod_set$)
(declare-fun size$ (Natural$) Nat$)
(declare-fun tmap$ (A_a_fun$ C_c_fun$ A_c_tllist$) A_c_tllist$)
(declare-fun tset$ (Natural_natural_prod_natural_natural_prod_tllist$) Natural_natural_prod_set$)
(declare-fun zero$ () Natural$)
(declare-fun tmap$a (A_a_fun$ B_b_fun$ A_b_tllist$) A_b_tllist$)
(declare-fun tmap$b (A_a_fun$ D_d_fun$ A_d_tllist$) A_d_tllist$)
(declare-fun tmap$c (A_a_fun$ D_b_fun$ A_d_tllist$) A_b_tllist$)
(declare-fun tmap$d (A_a_fun$ D_c_fun$ A_d_tllist$) A_c_tllist$)
(declare-fun tmap$e (A_a_fun$ B_d_fun$ A_b_tllist$) A_d_tllist$)
(declare-fun tmap$f (A_a_fun$ B_c_fun$ A_b_tllist$) A_c_tllist$)
(declare-fun tmap$g (A_a_fun$ C_d_fun$ A_c_tllist$) A_d_tllist$)
(declare-fun tmap$h (A_a_fun$ C_b_fun$ A_c_tllist$) A_b_tllist$)
(declare-fun tset$a (A_d_tllist$) A_set$)
(declare-fun tset$b (A_b_tllist$) A_set$)
(declare-fun tset$c (A_c_tllist$) A_set$)
(declare-fun zero$a () Nat$)
(declare-fun insert$ (A$ A_set$) A_set$)
(declare-fun member$ (Natural_natural_prod$ Natural_natural_prod_set$) Bool)
(declare-fun collect$ (Natural_natural_prod_bool_fun$) Natural_natural_prod_set$)
(declare-fun fun_app$ (D_a_b_tllist_fun$ D$) A_b_tllist$)
(declare-fun insert$a (D$ D_set$) D_set$)
(declare-fun insert$b (C$ C_set$) C_set$)
(declare-fun insert$c (Natural_natural_prod$ Natural_natural_prod_set$) Natural_natural_prod_set$)
(declare-fun member$a (D$ D_set$) Bool)
(declare-fun member$b (B$ B_set$) Bool)
(declare-fun member$c (C$ C_set$) Bool)
(declare-fun member$d (A$ A_set$) Bool)
(declare-fun tappend$ (A_c_tllist$ C_a_b_tllist_fun$) A_b_tllist$)
(declare-fun fun_app$a (D_a_c_tllist_fun$ D$) A_c_tllist$)
(declare-fun fun_app$b (D_a_d_tllist_fun$ D$) A_d_tllist$)
(declare-fun fun_app$c (C_a_c_tllist_fun$ C$) A_c_tllist$)
(declare-fun fun_app$d (B_a_b_tllist_fun$ B$) A_b_tllist$)
(declare-fun fun_app$e (Natural_natural_prod_bool_fun$ Natural_natural_prod$) Bool)
(declare-fun fun_app$f (Natural_bool_fun$ Natural$) Bool)
(declare-fun fun_app$g (Natural_natural_bool_fun_fun$ Natural$) Natural_bool_fun$)
(declare-fun fun_app$h (A_d_tllist_a_d_tllist_fun$ A_d_tllist$) A_d_tllist$)
(declare-fun fun_app$i (A_a_d_tllist_a_d_tllist_fun_fun$ A$) A_d_tllist_a_d_tllist_fun$)
(declare-fun fun_app$j (A_c_tllist_a_c_tllist_fun$ A_c_tllist$) A_c_tllist$)
(declare-fun fun_app$k (A_a_c_tllist_a_c_tllist_fun_fun$ A$) A_c_tllist_a_c_tllist_fun$)
(declare-fun fun_app$l (C_c_fun$ C$) C$)
(declare-fun fun_app$m (B_b_fun$ B$) B$)
(declare-fun fun_app$n (A_a_fun$ A$) A$)
(declare-fun fun_app$o (D_a_d_tllist_fun_a_d_tllist_fun$ D_a_d_tllist_fun$) A_d_tllist$)
(declare-fun fun_app$p (B_a_b_tllist_fun_a_b_tllist_fun$ B_a_b_tllist_fun$) A_b_tllist$)
(declare-fun fun_app$q (C_a_c_tllist_fun_a_c_tllist_fun$ C_a_c_tllist_fun$) A_c_tllist$)
(declare-fun fun_app$r (C_a_d_tllist_fun$ C$) A_d_tllist$)
(declare-fun fun_app$s (B_a_d_tllist_fun$ B$) A_d_tllist$)
(declare-fun fun_app$t (B_a_c_tllist_fun$ B$) A_c_tllist$)
(declare-fun fun_app$u (C_a_b_tllist_fun$ C$) A_b_tllist$)
(declare-fun fun_app$v (D_b_fun$ D$) B$)
(declare-fun fun_app$w (C_b_fun$ C$) B$)
(declare-fun fun_app$x (B_d_fun$ B$) D$)
(declare-fun fun_app$y (B_c_fun$ B$) C$)
(declare-fun fun_app$z (D_d_fun$ D$) D$)
(declare-fun tappend$a (A_d_tllist$ D_a_c_tllist_fun$) A_c_tllist$)
(declare-fun tappend$b (A_d_tllist$ D_a_b_tllist_fun$) A_b_tllist$)
(declare-fun tappend$c (A_d_tllist$) D_a_d_tllist_fun_a_d_tllist_fun$)
(declare-fun tappend$d (A_b_tllist$ B_a_d_tllist_fun$) A_d_tllist$)
(declare-fun tappend$e (A_b_tllist$) B_a_b_tllist_fun_a_b_tllist_fun$)
(declare-fun tappend$f (A_b_tllist$ B_a_c_tllist_fun$) A_c_tllist$)
(declare-fun tappend$g (A_c_tllist$ C_a_d_tllist_fun$) A_d_tllist$)
(declare-fun tappend$h (A_c_tllist$) C_a_c_tllist_fun_a_c_tllist_fun$)
(declare-fun fun_app$aa (C_d_fun$ C$) D$)
(declare-fun fun_app$ab (D_c_fun$ D$) C$)
(declare-fun fun_app$ac (A_bool_fun$ A$) Bool)
(declare-fun fun_app$ad (B_bool_fun$ B$) Bool)
(declare-fun fun_app$ae (D_bool_fun$ D$) Bool)
(declare-fun fun_app$af (C_bool_fun$ C$) Bool)
(declare-fun fun_app$ag (A_d_tllist_bool_fun$ A_d_tllist$) Bool)
(declare-fun fun_app$ah (D_a_d_tllist_bool_fun_fun$ D$) A_d_tllist_bool_fun$)
(declare-fun fun_app$ai (A_b_tllist_bool_fun$ A_b_tllist$) Bool)
(declare-fun fun_app$aj (B_a_b_tllist_bool_fun_fun$ B$) A_b_tllist_bool_fun$)
(declare-fun fun_app$ak (A_c_tllist_bool_fun$ A_c_tllist$) Bool)
(declare-fun fun_app$al (C_a_c_tllist_bool_fun_fun$ C$) A_c_tllist_bool_fun$)
(declare-fun fun_app$am (D_d_bool_fun_fun$ D$) D_bool_fun$)
(declare-fun fun_app$an (D_c_bool_fun_fun$ D$) C_bool_fun$)
(declare-fun fun_app$ao (C_d_bool_fun_fun$ C$) D_bool_fun$)
(declare-fun fun_app$ap (C_c_bool_fun_fun$ C$) C_bool_fun$)
(declare-fun fun_app$aq (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$ar (Natural_natural_prod_natural_natural_prod_bool_fun_fun$ Natural_natural_prod$) Natural_natural_prod_bool_fun$)
(declare-fun fun_app$as (A_a_d_tllist_bool_fun_fun$ A$) A_d_tllist_bool_fun$)
(declare-fun fun_app$at (A_a_b_tllist_bool_fun_fun$ A$) A_b_tllist_bool_fun$)
(declare-fun fun_app$au (A_a_c_tllist_bool_fun_fun$ A$) A_c_tllist_bool_fun$)
(declare-fun fun_app$av (D_b_bool_fun_fun$ D$) B_bool_fun$)
(declare-fun fun_app$aw (B_d_bool_fun_fun$ B$) D_bool_fun$)
(declare-fun fun_app$ax (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$ay (B_c_bool_fun_fun$ B$) C_bool_fun$)
(declare-fun fun_app$az (C_b_bool_fun_fun$ C$) B_bool_fun$)
(declare-fun case_tllist$ (D_a_d_tllist_fun$ A_a_d_tllist_a_d_tllist_fun_fun$ A_d_tllist$) A_d_tllist$)
(declare-fun pred_tllist$ (Natural_natural_prod_bool_fun$ Natural_natural_prod_bool_fun$ Natural_natural_prod_natural_natural_prod_tllist$) Bool)
(declare-fun set2_tllist$ (Natural_natural_prod_natural_natural_prod_tllist$) Natural_natural_prod_set$)
(declare-fun tllist_all2$ (A_a_bool_fun_fun$ D_d_bool_fun_fun$ A_d_tllist$ A_d_tllist$) Bool)
(declare-fun case_tllist$a (C_a_c_tllist_fun$ A_a_c_tllist_a_c_tllist_fun_fun$ A_c_tllist$) A_c_tllist$)
(declare-fun pred_tllist$a (A_bool_fun$ D_bool_fun$ A_d_tllist$) Bool)
(declare-fun pred_tllist$b (A_bool_fun$ B_bool_fun$ A_b_tllist$) Bool)
(declare-fun pred_tllist$c (A_bool_fun$ C_bool_fun$ A_c_tllist$) Bool)
(declare-fun set2_tllist$a (A_d_tllist$) D_set$)
(declare-fun set2_tllist$b (A_b_tllist$) B_set$)
(declare-fun set2_tllist$c (A_c_tllist$) C_set$)
(declare-fun size_natural$ (Natural$) Nat$)
(declare-fun tllist_all2$a (A_a_bool_fun_fun$ C_d_bool_fun_fun$ A_c_tllist$ A_d_tllist$) Bool)
(declare-fun tllist_all2$b (A_a_bool_fun_fun$ D_b_bool_fun_fun$ A_d_tllist$ A_b_tllist$) Bool)
(declare-fun tllist_all2$c (A_a_bool_fun_fun$ C_b_bool_fun_fun$ A_c_tllist$ A_b_tllist$) Bool)
(declare-fun tllist_all2$d (A_a_bool_fun_fun$ D_c_bool_fun_fun$ A_d_tllist$ A_c_tllist$) Bool)
(declare-fun tllist_all2$e (A_a_bool_fun_fun$ C_c_bool_fun_fun$ A_c_tllist$ A_c_tllist$) Bool)
(declare-fun tllist_all2$f (A_a_bool_fun_fun$ B_d_bool_fun_fun$ A_b_tllist$ A_d_tllist$) Bool)
(declare-fun tllist_all2$g (A_a_bool_fun_fun$ B_b_bool_fun_fun$ A_b_tllist$ A_b_tllist$) Bool)
(declare-fun tllist_all2$h (A_a_bool_fun_fun$ B_c_bool_fun_fun$ A_b_tllist$ A_c_tllist$) Bool)
(declare-fun tllist_all2$i (Natural_natural_prod_natural_natural_prod_bool_fun_fun$ Natural_natural_prod_natural_natural_prod_bool_fun_fun$ Natural_natural_prod_natural_natural_prod_tllist$ Natural_natural_prod_natural_natural_prod_tllist$) Bool)
(assert (! (forall ((?v0 D$)) (! (= (fun_app$ uu$ ?v0) (tappend$ (fun_app$a f$ ?v0) g$)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 D$)) (! (= (fun_app$b uub$ ?v0) (tNil$b ?v0)) :pattern ((fun_app$b uub$ ?v0)))) :named a1))
(assert (! (forall ((?v0 C$)) (! (= (fun_app$c uuc$ ?v0) (tNil$a ?v0)) :pattern ((fun_app$c uuc$ ?v0)))) :named a2))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$d uua$ ?v0) (tNil$ ?v0)) :pattern ((fun_app$d uua$ ?v0)))) :named a3))
(assert (! (forall ((?v0 Natural_natural_prod_set$) (?v1 Natural_natural_prod$)) (! (= (fun_app$e (uug$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$e (uug$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 Natural_natural_prod_set$) (?v1 Natural$) (?v2 Natural$)) (! (= (fun_app$f (fun_app$g (uuj$ ?v0) ?v1) ?v2) (member$ (pair$ ?v1 ?v2) ?v0)) :pattern ((fun_app$f (fun_app$g (uuj$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_d_tllist$)) (! (= (fun_app$h (fun_app$i uuh$ ?v0) ?v1) ?v1) :pattern ((fun_app$h (fun_app$i uuh$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$)) (! (= (fun_app$j (fun_app$k uui$ ?v0) ?v1) ?v1) :pattern ((fun_app$j (fun_app$k uui$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 C$)) (! (= (fun_app$l uue$ ?v0) ?v0) :pattern ((fun_app$l uue$ ?v0)))) :named a8))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$m uuf$ ?v0) ?v0) :pattern ((fun_app$m uuf$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$n uud$ ?v0) ?v0) :pattern ((fun_app$n uud$ ?v0)))) :named a10))
(assert (! (not (= (tappend$ (tappend$a xs$ f$) g$) (tappend$b xs$ uu$))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_d_tllist$) (?v2 D_a_d_tllist_fun$)) (! (= (fun_app$o (tappend$c (tCons$b ?v0 ?v1)) ?v2) (tCons$b ?v0 (fun_app$o (tappend$c ?v1) ?v2))) :pattern ((fun_app$o (tappend$c (tCons$b ?v0 ?v1)) ?v2)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 B_a_d_tllist_fun$)) (! (= (tappend$d (tCons$ ?v0 ?v1) ?v2) (tCons$b ?v0 (tappend$d ?v1 ?v2))) :pattern ((tappend$d (tCons$ ?v0 ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 B_a_b_tllist_fun$)) (! (= (fun_app$p (tappend$e (tCons$ ?v0 ?v1)) ?v2) (tCons$ ?v0 (fun_app$p (tappend$e ?v1) ?v2))) :pattern ((fun_app$p (tappend$e (tCons$ ?v0 ?v1)) ?v2)))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 B_a_c_tllist_fun$)) (! (= (tappend$f (tCons$ ?v0 ?v1) ?v2) (tCons$a ?v0 (tappend$f ?v1 ?v2))) :pattern ((tappend$f (tCons$ ?v0 ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$) (?v2 C_a_d_tllist_fun$)) (! (= (tappend$g (tCons$a ?v0 ?v1) ?v2) (tCons$b ?v0 (tappend$g ?v1 ?v2))) :pattern ((tappend$g (tCons$a ?v0 ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$) (?v2 C_a_c_tllist_fun$)) (! (= (fun_app$q (tappend$h (tCons$a ?v0 ?v1)) ?v2) (tCons$a ?v0 (fun_app$q (tappend$h ?v1) ?v2))) :pattern ((fun_app$q (tappend$h (tCons$a ?v0 ?v1)) ?v2)))) :named a17))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$) (?v2 C_a_b_tllist_fun$)) (! (= (tappend$ (tCons$a ?v0 ?v1) ?v2) (tCons$ ?v0 (tappend$ ?v1 ?v2))) :pattern ((tappend$ (tCons$a ?v0 ?v1) ?v2)))) :named a18))
(assert (! (forall ((?v0 A$) (?v1 A_d_tllist$) (?v2 D_a_c_tllist_fun$)) (! (= (tappend$a (tCons$b ?v0 ?v1) ?v2) (tCons$a ?v0 (tappend$a ?v1 ?v2))) :pattern ((tappend$a (tCons$b ?v0 ?v1) ?v2)))) :named a19))
(assert (! (forall ((?v0 A$) (?v1 A_d_tllist$) (?v2 D_a_b_tllist_fun$)) (! (= (tappend$b (tCons$b ?v0 ?v1) ?v2) (tCons$ ?v0 (tappend$b ?v1 ?v2))) :pattern ((tappend$b (tCons$b ?v0 ?v1) ?v2)))) :named a20))
(assert (! (forall ((?v0 C$) (?v1 C_a_d_tllist_fun$)) (! (= (tappend$g (tNil$a ?v0) ?v1) (fun_app$r ?v1 ?v0)) :pattern ((tappend$g (tNil$a ?v0) ?v1)))) :named a21))
(assert (! (forall ((?v0 C$) (?v1 C_a_c_tllist_fun$)) (! (= (fun_app$q (tappend$h (tNil$a ?v0)) ?v1) (fun_app$c ?v1 ?v0)) :pattern ((fun_app$q (tappend$h (tNil$a ?v0)) ?v1)))) :named a22))
(assert (! (forall ((?v0 B$) (?v1 B_a_d_tllist_fun$)) (! (= (tappend$d (tNil$ ?v0) ?v1) (fun_app$s ?v1 ?v0)) :pattern ((tappend$d (tNil$ ?v0) ?v1)))) :named a23))
(assert (! (forall ((?v0 B$) (?v1 B_a_c_tllist_fun$)) (! (= (tappend$f (tNil$ ?v0) ?v1) (fun_app$t ?v1 ?v0)) :pattern ((tappend$f (tNil$ ?v0) ?v1)))) :named a24))
(assert (! (forall ((?v0 B$) (?v1 B_a_b_tllist_fun$)) (! (= (fun_app$p (tappend$e (tNil$ ?v0)) ?v1) (fun_app$d ?v1 ?v0)) :pattern ((fun_app$p (tappend$e (tNil$ ?v0)) ?v1)))) :named a25))
(assert (! (forall ((?v0 C$) (?v1 C_a_b_tllist_fun$)) (! (= (tappend$ (tNil$a ?v0) ?v1) (fun_app$u ?v1 ?v0)) :pattern ((tappend$ (tNil$a ?v0) ?v1)))) :named a26))
(assert (! (forall ((?v0 D$) (?v1 D_a_c_tllist_fun$)) (! (= (tappend$a (tNil$b ?v0) ?v1) (fun_app$a ?v1 ?v0)) :pattern ((tappend$a (tNil$b ?v0) ?v1)))) :named a27))
(assert (! (forall ((?v0 D$) (?v1 D_a_b_tllist_fun$)) (! (= (tappend$b (tNil$b ?v0) ?v1) (fun_app$ ?v1 ?v0)) :pattern ((tappend$b (tNil$b ?v0) ?v1)))) :named a28))
(assert (! (forall ((?v0 A_b_tllist$)) (! (= (fun_app$p (tappend$e ?v0) uua$) ?v0) :pattern ((tappend$e ?v0)))) :named a29))
(assert (! (forall ((?v0 A_d_tllist$)) (! (= (fun_app$o (tappend$c ?v0) uub$) ?v0) :pattern ((tappend$c ?v0)))) :named a30))
(assert (! (forall ((?v0 A_c_tllist$)) (! (= (fun_app$q (tappend$h ?v0) uuc$) ?v0) :pattern ((tappend$h ?v0)))) :named a31))
(assert (! (forall ((?v0 A_c_tllist$)) (= (tmap$ uud$ uue$ ?v0) ?v0)) :named a32))
(assert (! (forall ((?v0 A_b_tllist$)) (= (tmap$a uud$ uuf$ ?v0) ?v0)) :named a33))
(assert (! (forall ((?v0 B$) (?v1 B$)) (= (= (tNil$ ?v0) (tNil$ ?v1)) (= ?v0 ?v1))) :named a34))
(assert (! (forall ((?v0 D$) (?v1 D$)) (= (= (tNil$b ?v0) (tNil$b ?v1)) (= ?v0 ?v1))) :named a35))
(assert (! (forall ((?v0 C$) (?v1 C$)) (= (= (tNil$a ?v0) (tNil$a ?v1)) (= ?v0 ?v1))) :named a36))
(assert (! (forall ((?v0 A$) (?v1 A_d_tllist$) (?v2 A$) (?v3 A_d_tllist$)) (= (= (tCons$b ?v0 ?v1) (tCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a37))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 A$) (?v3 A_b_tllist$)) (= (= (tCons$ ?v0 ?v1) (tCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a38))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$) (?v2 A$) (?v3 A_c_tllist$)) (= (= (tCons$a ?v0 ?v1) (tCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a39))
(assert (! (forall ((?v0 A_a_fun$) (?v1 D_d_fun$) (?v2 A$) (?v3 A_d_tllist$)) (! (= (tmap$b ?v0 ?v1 (tCons$b ?v2 ?v3)) (tCons$b (fun_app$n ?v0 ?v2) (tmap$b ?v0 ?v1 ?v3))) :pattern ((tmap$b ?v0 ?v1 (tCons$b ?v2 ?v3))))) :named a40))
(assert (! (forall ((?v0 A_a_fun$) (?v1 D_b_fun$) (?v2 A$) (?v3 A_d_tllist$)) (! (= (tmap$c ?v0 ?v1 (tCons$b ?v2 ?v3)) (tCons$ (fun_app$n ?v0 ?v2) (tmap$c ?v0 ?v1 ?v3))) :pattern ((tmap$c ?v0 ?v1 (tCons$b ?v2 ?v3))))) :named a41))
(assert (! (forall ((?v0 A_a_fun$) (?v1 D_c_fun$) (?v2 A$) (?v3 A_d_tllist$)) (! (= (tmap$d ?v0 ?v1 (tCons$b ?v2 ?v3)) (tCons$a (fun_app$n ?v0 ?v2) (tmap$d ?v0 ?v1 ?v3))) :pattern ((tmap$d ?v0 ?v1 (tCons$b ?v2 ?v3))))) :named a42))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_d_fun$) (?v2 A$) (?v3 A_b_tllist$)) (! (= (tmap$e ?v0 ?v1 (tCons$ ?v2 ?v3)) (tCons$b (fun_app$n ?v0 ?v2) (tmap$e ?v0 ?v1 ?v3))) :pattern ((tmap$e ?v0 ?v1 (tCons$ ?v2 ?v3))))) :named a43))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 A$) (?v3 A_b_tllist$)) (! (= (tmap$a ?v0 ?v1 (tCons$ ?v2 ?v3)) (tCons$ (fun_app$n ?v0 ?v2) (tmap$a ?v0 ?v1 ?v3))) :pattern ((tmap$a ?v0 ?v1 (tCons$ ?v2 ?v3))))) :named a44))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_c_fun$) (?v2 A$) (?v3 A_b_tllist$)) (! (= (tmap$f ?v0 ?v1 (tCons$ ?v2 ?v3)) (tCons$a (fun_app$n ?v0 ?v2) (tmap$f ?v0 ?v1 ?v3))) :pattern ((tmap$f ?v0 ?v1 (tCons$ ?v2 ?v3))))) :named a45))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_d_fun$) (?v2 A$) (?v3 A_c_tllist$)) (! (= (tmap$g ?v0 ?v1 (tCons$a ?v2 ?v3)) (tCons$b (fun_app$n ?v0 ?v2) (tmap$g ?v0 ?v1 ?v3))) :pattern ((tmap$g ?v0 ?v1 (tCons$a ?v2 ?v3))))) :named a46))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_b_fun$) (?v2 A$) (?v3 A_c_tllist$)) (! (= (tmap$h ?v0 ?v1 (tCons$a ?v2 ?v3)) (tCons$ (fun_app$n ?v0 ?v2) (tmap$h ?v0 ?v1 ?v3))) :pattern ((tmap$h ?v0 ?v1 (tCons$a ?v2 ?v3))))) :named a47))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_c_fun$) (?v2 A$) (?v3 A_c_tllist$)) (! (= (tmap$ ?v0 ?v1 (tCons$a ?v2 ?v3)) (tCons$a (fun_app$n ?v0 ?v2) (tmap$ ?v0 ?v1 ?v3))) :pattern ((tmap$ ?v0 ?v1 (tCons$a ?v2 ?v3))))) :named a48))
(assert (! (forall ((?v0 A_a_fun$) (?v1 D_d_fun$) (?v2 A_d_tllist$) (?v3 A$) (?v4 A_d_tllist$)) (= (= (tmap$b ?v0 ?v1 ?v2) (tCons$b ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_d_tllist$)) (and (= ?v2 (tCons$b ?v5 ?v6)) (and (= (fun_app$n ?v0 ?v5) ?v3) (= (tmap$b ?v0 ?v1 ?v6) ?v4)))))) :named a49))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_d_fun$) (?v2 A_b_tllist$) (?v3 A$) (?v4 A_d_tllist$)) (= (= (tmap$e ?v0 ?v1 ?v2) (tCons$b ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_b_tllist$)) (and (= ?v2 (tCons$ ?v5 ?v6)) (and (= (fun_app$n ?v0 ?v5) ?v3) (= (tmap$e ?v0 ?v1 ?v6) ?v4)))))) :named a50))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_d_fun$) (?v2 A_c_tllist$) (?v3 A$) (?v4 A_d_tllist$)) (= (= (tmap$g ?v0 ?v1 ?v2) (tCons$b ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_c_tllist$)) (and (= ?v2 (tCons$a ?v5 ?v6)) (and (= (fun_app$n ?v0 ?v5) ?v3) (= (tmap$g ?v0 ?v1 ?v6) ?v4)))))) :named a51))
(assert (! (forall ((?v0 A_a_fun$) (?v1 D_b_fun$) (?v2 A_d_tllist$) (?v3 A$) (?v4 A_b_tllist$)) (= (= (tmap$c ?v0 ?v1 ?v2) (tCons$ ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_d_tllist$)) (and (= ?v2 (tCons$b ?v5 ?v6)) (and (= (fun_app$n ?v0 ?v5) ?v3) (= (tmap$c ?v0 ?v1 ?v6) ?v4)))))) :named a52))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 A_b_tllist$) (?v3 A$) (?v4 A_b_tllist$)) (= (= (tmap$a ?v0 ?v1 ?v2) (tCons$ ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_b_tllist$)) (and (= ?v2 (tCons$ ?v5 ?v6)) (and (= (fun_app$n ?v0 ?v5) ?v3) (= (tmap$a ?v0 ?v1 ?v6) ?v4)))))) :named a53))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_b_fun$) (?v2 A_c_tllist$) (?v3 A$) (?v4 A_b_tllist$)) (= (= (tmap$h ?v0 ?v1 ?v2) (tCons$ ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_c_tllist$)) (and (= ?v2 (tCons$a ?v5 ?v6)) (and (= (fun_app$n ?v0 ?v5) ?v3) (= (tmap$h ?v0 ?v1 ?v6) ?v4)))))) :named a54))
(assert (! (forall ((?v0 A_a_fun$) (?v1 D_c_fun$) (?v2 A_d_tllist$) (?v3 A$) (?v4 A_c_tllist$)) (= (= (tmap$d ?v0 ?v1 ?v2) (tCons$a ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_d_tllist$)) (and (= ?v2 (tCons$b ?v5 ?v6)) (and (= (fun_app$n ?v0 ?v5) ?v3) (= (tmap$d ?v0 ?v1 ?v6) ?v4)))))) :named a55))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_c_fun$) (?v2 A_b_tllist$) (?v3 A$) (?v4 A_c_tllist$)) (= (= (tmap$f ?v0 ?v1 ?v2) (tCons$a ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_b_tllist$)) (and (= ?v2 (tCons$ ?v5 ?v6)) (and (= (fun_app$n ?v0 ?v5) ?v3) (= (tmap$f ?v0 ?v1 ?v6) ?v4)))))) :named a56))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_c_fun$) (?v2 A_c_tllist$) (?v3 A$) (?v4 A_c_tllist$)) (= (= (tmap$ ?v0 ?v1 ?v2) (tCons$a ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_c_tllist$)) (and (= ?v2 (tCons$a ?v5 ?v6)) (and (= (fun_app$n ?v0 ?v5) ?v3) (= (tmap$ ?v0 ?v1 ?v6) ?v4)))))) :named a57))
(assert (! (forall ((?v0 A_a_fun$) (?v1 D_b_fun$) (?v2 A_d_tllist$) (?v3 B$)) (= (= (tmap$c ?v0 ?v1 ?v2) (tNil$ ?v3)) (exists ((?v4 D$)) (and (= ?v2 (tNil$b ?v4)) (= (fun_app$v ?v1 ?v4) ?v3))))) :named a58))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_b_fun$) (?v2 A_c_tllist$) (?v3 B$)) (= (= (tmap$h ?v0 ?v1 ?v2) (tNil$ ?v3)) (exists ((?v4 C$)) (and (= ?v2 (tNil$a ?v4)) (= (fun_app$w ?v1 ?v4) ?v3))))) :named a59))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_d_fun$) (?v2 A_b_tllist$) (?v3 D$)) (= (= (tmap$e ?v0 ?v1 ?v2) (tNil$b ?v3)) (exists ((?v4 B$)) (and (= ?v2 (tNil$ ?v4)) (= (fun_app$x ?v1 ?v4) ?v3))))) :named a60))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_c_fun$) (?v2 A_b_tllist$) (?v3 C$)) (= (= (tmap$f ?v0 ?v1 ?v2) (tNil$a ?v3)) (exists ((?v4 B$)) (and (= ?v2 (tNil$ ?v4)) (= (fun_app$y ?v1 ?v4) ?v3))))) :named a61))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 A_b_tllist$) (?v3 B$)) (= (= (tmap$a ?v0 ?v1 ?v2) (tNil$ ?v3)) (exists ((?v4 B$)) (and (= ?v2 (tNil$ ?v4)) (= (fun_app$m ?v1 ?v4) ?v3))))) :named a62))
(assert (! (forall ((?v0 A_a_fun$) (?v1 D_d_fun$) (?v2 A_d_tllist$) (?v3 D$)) (= (= (tmap$b ?v0 ?v1 ?v2) (tNil$b ?v3)) (exists ((?v4 D$)) (and (= ?v2 (tNil$b ?v4)) (= (fun_app$z ?v1 ?v4) ?v3))))) :named a63))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_d_fun$) (?v2 A_c_tllist$) (?v3 D$)) (= (= (tmap$g ?v0 ?v1 ?v2) (tNil$b ?v3)) (exists ((?v4 C$)) (and (= ?v2 (tNil$a ?v4)) (= (fun_app$aa ?v1 ?v4) ?v3))))) :named a64))
(assert (! (forall ((?v0 A_a_fun$) (?v1 D_c_fun$) (?v2 A_d_tllist$) (?v3 C$)) (= (= (tmap$d ?v0 ?v1 ?v2) (tNil$a ?v3)) (exists ((?v4 D$)) (and (= ?v2 (tNil$b ?v4)) (= (fun_app$ab ?v1 ?v4) ?v3))))) :named a65))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_c_fun$) (?v2 A_c_tllist$) (?v3 C$)) (= (= (tmap$ ?v0 ?v1 ?v2) (tNil$a ?v3)) (exists ((?v4 C$)) (and (= ?v2 (tNil$a ?v4)) (= (fun_app$l ?v1 ?v4) ?v3))))) :named a66))
(assert (! (forall ((?v0 A$) (?v1 A_d_tllist$) (?v2 A_a_fun$) (?v3 D_d_fun$) (?v4 A_d_tllist$)) (= (= (tCons$b ?v0 ?v1) (tmap$b ?v2 ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_d_tllist$)) (and (= ?v4 (tCons$b ?v5 ?v6)) (and (= (fun_app$n ?v2 ?v5) ?v0) (= (tmap$b ?v2 ?v3 ?v6) ?v1)))))) :named a67))
(assert (! (forall ((?v0 A$) (?v1 A_d_tllist$) (?v2 A_a_fun$) (?v3 B_d_fun$) (?v4 A_b_tllist$)) (= (= (tCons$b ?v0 ?v1) (tmap$e ?v2 ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_b_tllist$)) (and (= ?v4 (tCons$ ?v5 ?v6)) (and (= (fun_app$n ?v2 ?v5) ?v0) (= (tmap$e ?v2 ?v3 ?v6) ?v1)))))) :named a68))
(assert (! (forall ((?v0 A$) (?v1 A_d_tllist$) (?v2 A_a_fun$) (?v3 C_d_fun$) (?v4 A_c_tllist$)) (= (= (tCons$b ?v0 ?v1) (tmap$g ?v2 ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_c_tllist$)) (and (= ?v4 (tCons$a ?v5 ?v6)) (and (= (fun_app$n ?v2 ?v5) ?v0) (= (tmap$g ?v2 ?v3 ?v6) ?v1)))))) :named a69))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 A_a_fun$) (?v3 D_b_fun$) (?v4 A_d_tllist$)) (= (= (tCons$ ?v0 ?v1) (tmap$c ?v2 ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_d_tllist$)) (and (= ?v4 (tCons$b ?v5 ?v6)) (and (= (fun_app$n ?v2 ?v5) ?v0) (= (tmap$c ?v2 ?v3 ?v6) ?v1)))))) :named a70))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 A_a_fun$) (?v3 B_b_fun$) (?v4 A_b_tllist$)) (= (= (tCons$ ?v0 ?v1) (tmap$a ?v2 ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_b_tllist$)) (and (= ?v4 (tCons$ ?v5 ?v6)) (and (= (fun_app$n ?v2 ?v5) ?v0) (= (tmap$a ?v2 ?v3 ?v6) ?v1)))))) :named a71))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 A_a_fun$) (?v3 C_b_fun$) (?v4 A_c_tllist$)) (= (= (tCons$ ?v0 ?v1) (tmap$h ?v2 ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_c_tllist$)) (and (= ?v4 (tCons$a ?v5 ?v6)) (and (= (fun_app$n ?v2 ?v5) ?v0) (= (tmap$h ?v2 ?v3 ?v6) ?v1)))))) :named a72))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$) (?v2 A_a_fun$) (?v3 D_c_fun$) (?v4 A_d_tllist$)) (= (= (tCons$a ?v0 ?v1) (tmap$d ?v2 ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_d_tllist$)) (and (= ?v4 (tCons$b ?v5 ?v6)) (and (= (fun_app$n ?v2 ?v5) ?v0) (= (tmap$d ?v2 ?v3 ?v6) ?v1)))))) :named a73))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$) (?v2 A_a_fun$) (?v3 B_c_fun$) (?v4 A_b_tllist$)) (= (= (tCons$a ?v0 ?v1) (tmap$f ?v2 ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_b_tllist$)) (and (= ?v4 (tCons$ ?v5 ?v6)) (and (= (fun_app$n ?v2 ?v5) ?v0) (= (tmap$f ?v2 ?v3 ?v6) ?v1)))))) :named a74))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$) (?v2 A_a_fun$) (?v3 C_c_fun$) (?v4 A_c_tllist$)) (= (= (tCons$a ?v0 ?v1) (tmap$ ?v2 ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_c_tllist$)) (and (= ?v4 (tCons$a ?v5 ?v6)) (and (= (fun_app$n ?v2 ?v5) ?v0) (= (tmap$ ?v2 ?v3 ?v6) ?v1)))))) :named a75))
(assert (! (forall ((?v0 B$) (?v1 A_a_fun$) (?v2 D_b_fun$) (?v3 A_d_tllist$)) (= (= (tNil$ ?v0) (tmap$c ?v1 ?v2 ?v3)) (exists ((?v4 D$)) (and (= ?v3 (tNil$b ?v4)) (= (fun_app$v ?v2 ?v4) ?v0))))) :named a76))
(assert (! (forall ((?v0 B$) (?v1 A_a_fun$) (?v2 C_b_fun$) (?v3 A_c_tllist$)) (= (= (tNil$ ?v0) (tmap$h ?v1 ?v2 ?v3)) (exists ((?v4 C$)) (and (= ?v3 (tNil$a ?v4)) (= (fun_app$w ?v2 ?v4) ?v0))))) :named a77))
(assert (! (forall ((?v0 D$) (?v1 A_a_fun$) (?v2 B_d_fun$) (?v3 A_b_tllist$)) (= (= (tNil$b ?v0) (tmap$e ?v1 ?v2 ?v3)) (exists ((?v4 B$)) (and (= ?v3 (tNil$ ?v4)) (= (fun_app$x ?v2 ?v4) ?v0))))) :named a78))
(assert (! (forall ((?v0 C$) (?v1 A_a_fun$) (?v2 B_c_fun$) (?v3 A_b_tllist$)) (= (= (tNil$a ?v0) (tmap$f ?v1 ?v2 ?v3)) (exists ((?v4 B$)) (and (= ?v3 (tNil$ ?v4)) (= (fun_app$y ?v2 ?v4) ?v0))))) :named a79))
(assert (! (forall ((?v0 B$) (?v1 A_a_fun$) (?v2 B_b_fun$) (?v3 A_b_tllist$)) (= (= (tNil$ ?v0) (tmap$a ?v1 ?v2 ?v3)) (exists ((?v4 B$)) (and (= ?v3 (tNil$ ?v4)) (= (fun_app$m ?v2 ?v4) ?v0))))) :named a80))
(assert (! (forall ((?v0 D$) (?v1 A_a_fun$) (?v2 D_d_fun$) (?v3 A_d_tllist$)) (= (= (tNil$b ?v0) (tmap$b ?v1 ?v2 ?v3)) (exists ((?v4 D$)) (and (= ?v3 (tNil$b ?v4)) (= (fun_app$z ?v2 ?v4) ?v0))))) :named a81))
(assert (! (forall ((?v0 D$) (?v1 A_a_fun$) (?v2 C_d_fun$) (?v3 A_c_tllist$)) (= (= (tNil$b ?v0) (tmap$g ?v1 ?v2 ?v3)) (exists ((?v4 C$)) (and (= ?v3 (tNil$a ?v4)) (= (fun_app$aa ?v2 ?v4) ?v0))))) :named a82))
(assert (! (forall ((?v0 C$) (?v1 A_a_fun$) (?v2 D_c_fun$) (?v3 A_d_tllist$)) (= (= (tNil$a ?v0) (tmap$d ?v1 ?v2 ?v3)) (exists ((?v4 D$)) (and (= ?v3 (tNil$b ?v4)) (= (fun_app$ab ?v2 ?v4) ?v0))))) :named a83))
(assert (! (forall ((?v0 C$) (?v1 A_a_fun$) (?v2 C_c_fun$) (?v3 A_c_tllist$)) (= (= (tNil$a ?v0) (tmap$ ?v1 ?v2 ?v3)) (exists ((?v4 C$)) (and (= ?v3 (tNil$a ?v4)) (= (fun_app$l ?v2 ?v4) ?v0))))) :named a84))
(assert (! (forall ((?v0 A_a_fun$) (?v1 D_b_fun$) (?v2 D$)) (! (= (tmap$c ?v0 ?v1 (tNil$b ?v2)) (tNil$ (fun_app$v ?v1 ?v2))) :pattern ((tmap$c ?v0 ?v1 (tNil$b ?v2))))) :named a85))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_b_fun$) (?v2 C$)) (! (= (tmap$h ?v0 ?v1 (tNil$a ?v2)) (tNil$ (fun_app$w ?v1 ?v2))) :pattern ((tmap$h ?v0 ?v1 (tNil$a ?v2))))) :named a86))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_d_fun$) (?v2 B$)) (! (= (tmap$e ?v0 ?v1 (tNil$ ?v2)) (tNil$b (fun_app$x ?v1 ?v2))) :pattern ((tmap$e ?v0 ?v1 (tNil$ ?v2))))) :named a87))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_c_fun$) (?v2 B$)) (! (= (tmap$f ?v0 ?v1 (tNil$ ?v2)) (tNil$a (fun_app$y ?v1 ?v2))) :pattern ((tmap$f ?v0 ?v1 (tNil$ ?v2))))) :named a88))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (tmap$a ?v0 ?v1 (tNil$ ?v2)) (tNil$ (fun_app$m ?v1 ?v2))) :pattern ((tmap$a ?v0 ?v1 (tNil$ ?v2))))) :named a89))
(assert (! (forall ((?v0 A_a_fun$) (?v1 D_d_fun$) (?v2 D$)) (! (= (tmap$b ?v0 ?v1 (tNil$b ?v2)) (tNil$b (fun_app$z ?v1 ?v2))) :pattern ((tmap$b ?v0 ?v1 (tNil$b ?v2))))) :named a90))
(assert (! (forall ((?v0 A_a_fun$) (?v1 D_c_fun$) (?v2 D$)) (! (= (tmap$d ?v0 ?v1 (tNil$b ?v2)) (tNil$a (fun_app$ab ?v1 ?v2))) :pattern ((tmap$d ?v0 ?v1 (tNil$b ?v2))))) :named a91))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_d_fun$) (?v2 C$)) (! (= (tmap$g ?v0 ?v1 (tNil$a ?v2)) (tNil$b (fun_app$aa ?v1 ?v2))) :pattern ((tmap$g ?v0 ?v1 (tNil$a ?v2))))) :named a92))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_c_fun$) (?v2 C$)) (! (= (tmap$ ?v0 ?v1 (tNil$a ?v2)) (tNil$a (fun_app$l ?v1 ?v2))) :pattern ((tmap$ ?v0 ?v1 (tNil$a ?v2))))) :named a93))
(assert (! (forall ((?v0 A_d_tllist$)) (=> (and (forall ((?v1 D$)) (=> (= ?v0 (tNil$b ?v1)) false)) (forall ((?v1 A$) (?v2 A_d_tllist$)) (=> (= ?v0 (tCons$b ?v1 ?v2)) false))) false)) :named a94))
(assert (! (forall ((?v0 A_b_tllist$)) (=> (and (forall ((?v1 B$)) (=> (= ?v0 (tNil$ ?v1)) false)) (forall ((?v1 A$) (?v2 A_b_tllist$)) (=> (= ?v0 (tCons$ ?v1 ?v2)) false))) false)) :named a95))
(assert (! (forall ((?v0 A_c_tllist$)) (=> (and (forall ((?v1 C$)) (=> (= ?v0 (tNil$a ?v1)) false)) (forall ((?v1 A$) (?v2 A_c_tllist$)) (=> (= ?v0 (tCons$a ?v1 ?v2)) false))) false)) :named a96))
(assert (! (forall ((?v0 D$) (?v1 A$) (?v2 A_d_tllist$)) (not (= (tNil$b ?v0) (tCons$b ?v1 ?v2)))) :named a97))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 A_b_tllist$)) (not (= (tNil$ ?v0) (tCons$ ?v1 ?v2)))) :named a98))
(assert (! (forall ((?v0 C$) (?v1 A$) (?v2 A_c_tllist$)) (not (= (tNil$a ?v0) (tCons$a ?v1 ?v2)))) :named a99))
(assert (! (forall ((?v0 Natural_natural_prod_bool_fun$) (?v1 Natural_natural_prod_bool_fun$) (?v2 Natural_natural_prod$) (?v3 Natural_natural_prod_natural_natural_prod_tllist$)) (! (= (pred_tllist$ ?v0 ?v1 (tCons$c ?v2 ?v3)) (and (fun_app$e ?v0 ?v2) (pred_tllist$ ?v0 ?v1 ?v3))) :pattern ((pred_tllist$ ?v0 ?v1 (tCons$c ?v2 ?v3))))) :named a100))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 D_bool_fun$) (?v2 A$) (?v3 A_d_tllist$)) (! (= (pred_tllist$a ?v0 ?v1 (tCons$b ?v2 ?v3)) (and (fun_app$ac ?v0 ?v2) (pred_tllist$a ?v0 ?v1 ?v3))) :pattern ((pred_tllist$a ?v0 ?v1 (tCons$b ?v2 ?v3))))) :named a101))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 B_bool_fun$) (?v2 A$) (?v3 A_b_tllist$)) (! (= (pred_tllist$b ?v0 ?v1 (tCons$ ?v2 ?v3)) (and (fun_app$ac ?v0 ?v2) (pred_tllist$b ?v0 ?v1 ?v3))) :pattern ((pred_tllist$b ?v0 ?v1 (tCons$ ?v2 ?v3))))) :named a102))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 C_bool_fun$) (?v2 A$) (?v3 A_c_tllist$)) (! (= (pred_tllist$c ?v0 ?v1 (tCons$a ?v2 ?v3)) (and (fun_app$ac ?v0 ?v2) (pred_tllist$c ?v0 ?v1 ?v3))) :pattern ((pred_tllist$c ?v0 ?v1 (tCons$a ?v2 ?v3))))) :named a103))
(assert (! (forall ((?v0 Natural_natural_prod_bool_fun$) (?v1 Natural_natural_prod_bool_fun$) (?v2 Natural_natural_prod$)) (! (= (pred_tllist$ ?v0 ?v1 (tNil$c ?v2)) (fun_app$e ?v1 ?v2)) :pattern ((pred_tllist$ ?v0 ?v1 (tNil$c ?v2))))) :named a104))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 B_bool_fun$) (?v2 B$)) (! (= (pred_tllist$b ?v0 ?v1 (tNil$ ?v2)) (fun_app$ad ?v1 ?v2)) :pattern ((pred_tllist$b ?v0 ?v1 (tNil$ ?v2))))) :named a105))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 D_bool_fun$) (?v2 D$)) (! (= (pred_tllist$a ?v0 ?v1 (tNil$b ?v2)) (fun_app$ae ?v1 ?v2)) :pattern ((pred_tllist$a ?v0 ?v1 (tNil$b ?v2))))) :named a106))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 C_bool_fun$) (?v2 C$)) (! (= (pred_tllist$c ?v0 ?v1 (tNil$a ?v2)) (fun_app$af ?v1 ?v2)) :pattern ((pred_tllist$c ?v0 ?v1 (tNil$a ?v2))))) :named a107))
(assert (! (forall ((?v0 Natural_natural_prod$) (?v1 Natural_natural_prod_natural_natural_prod_tllist$)) (=> (and (member$ ?v0 (set2_tllist$ ?v1)) (and (=> (= ?v1 (tNil$c ?v0)) false) (forall ((?v2 Natural_natural_prod$) (?v3 Natural_natural_prod_natural_natural_prod_tllist$)) (=> (and (= ?v1 (tCons$c ?v2 ?v3)) (member$ ?v0 (set2_tllist$ ?v3))) false)))) false)) :named a108))
(assert (! (forall ((?v0 D$) (?v1 A_d_tllist$)) (=> (and (member$a ?v0 (set2_tllist$a ?v1)) (and (=> (= ?v1 (tNil$b ?v0)) false) (forall ((?v2 A$) (?v3 A_d_tllist$)) (=> (and (= ?v1 (tCons$b ?v2 ?v3)) (member$a ?v0 (set2_tllist$a ?v3))) false)))) false)) :named a109))
(assert (! (forall ((?v0 B$) (?v1 A_b_tllist$)) (=> (and (member$b ?v0 (set2_tllist$b ?v1)) (and (=> (= ?v1 (tNil$ ?v0)) false) (forall ((?v2 A$) (?v3 A_b_tllist$)) (=> (and (= ?v1 (tCons$ ?v2 ?v3)) (member$b ?v0 (set2_tllist$b ?v3))) false)))) false)) :named a110))
(assert (! (forall ((?v0 C$) (?v1 A_c_tllist$)) (=> (and (member$c ?v0 (set2_tllist$c ?v1)) (and (=> (= ?v1 (tNil$a ?v0)) false) (forall ((?v2 A$) (?v3 A_c_tllist$)) (=> (and (= ?v1 (tCons$a ?v2 ?v3)) (member$c ?v0 (set2_tllist$c ?v3))) false)))) false)) :named a111))
(assert (! (forall ((?v0 D$) (?v1 A_d_tllist$) (?v2 D_a_d_tllist_bool_fun_fun$)) (=> (and (member$a ?v0 (set2_tllist$a ?v1)) (and (forall ((?v3 D$)) (fun_app$ag (fun_app$ah ?v2 ?v3) (tNil$b ?v3))) (forall ((?v3 A$) (?v4 A_d_tllist$) (?v5 D$)) (=> (and (member$a ?v5 (set2_tllist$a ?v4)) (fun_app$ag (fun_app$ah ?v2 ?v5) ?v4)) (fun_app$ag (fun_app$ah ?v2 ?v5) (tCons$b ?v3 ?v4)))))) (fun_app$ag (fun_app$ah ?v2 ?v0) ?v1))) :named a112))
(assert (! (forall ((?v0 B$) (?v1 A_b_tllist$) (?v2 B_a_b_tllist_bool_fun_fun$)) (=> (and (member$b ?v0 (set2_tllist$b ?v1)) (and (forall ((?v3 B$)) (fun_app$ai (fun_app$aj ?v2 ?v3) (tNil$ ?v3))) (forall ((?v3 A$) (?v4 A_b_tllist$) (?v5 B$)) (=> (and (member$b ?v5 (set2_tllist$b ?v4)) (fun_app$ai (fun_app$aj ?v2 ?v5) ?v4)) (fun_app$ai (fun_app$aj ?v2 ?v5) (tCons$ ?v3 ?v4)))))) (fun_app$ai (fun_app$aj ?v2 ?v0) ?v1))) :named a113))
(assert (! (forall ((?v0 C$) (?v1 A_c_tllist$) (?v2 C_a_c_tllist_bool_fun_fun$)) (=> (and (member$c ?v0 (set2_tllist$c ?v1)) (and (forall ((?v3 C$)) (fun_app$ak (fun_app$al ?v2 ?v3) (tNil$a ?v3))) (forall ((?v3 A$) (?v4 A_c_tllist$) (?v5 C$)) (=> (and (member$c ?v5 (set2_tllist$c ?v4)) (fun_app$ak (fun_app$al ?v2 ?v5) ?v4)) (fun_app$ak (fun_app$al ?v2 ?v5) (tCons$a ?v3 ?v4)))))) (fun_app$ak (fun_app$al ?v2 ?v0) ?v1))) :named a114))
(assert (! (forall ((?v0 Natural$) (?v1 Natural$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a115))
(assert (! (forall ((?v0 Natural$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Natural$)) (=> (= ?v0 (suc$ ?v1)) false))) false)) :named a116))
(assert (! (forall ((?v0 Natural$)) (not (= zero$ (suc$ ?v0)))) :named a117))
(assert (! (forall ((?v0 Natural$)) (not (= (suc$ ?v0) zero$))) :named a118))
(assert (! (forall ((?v0 D$)) (member$a ?v0 (set2_tllist$a (tNil$b ?v0)))) :named a119))
(assert (! (forall ((?v0 C$)) (member$c ?v0 (set2_tllist$c (tNil$a ?v0)))) :named a120))
(assert (! (forall ((?v0 D$) (?v1 A_d_tllist$) (?v2 A$)) (=> (member$a ?v0 (set2_tllist$a ?v1)) (member$a ?v0 (set2_tllist$a (tCons$b ?v2 ?v1))))) :named a121))
(assert (! (forall ((?v0 B$) (?v1 A_b_tllist$) (?v2 A$)) (=> (member$b ?v0 (set2_tllist$b ?v1)) (member$b ?v0 (set2_tllist$b (tCons$ ?v2 ?v1))))) :named a122))
(assert (! (forall ((?v0 C$) (?v1 A_c_tllist$) (?v2 A$)) (=> (member$c ?v0 (set2_tllist$c ?v1)) (member$c ?v0 (set2_tllist$c (tCons$a ?v2 ?v1))))) :named a123))
(assert (! (forall ((?v0 A$) (?v1 A_d_tllist$)) (! (= (set2_tllist$a (tCons$b ?v0 ?v1)) (set2_tllist$a ?v1)) :pattern ((tCons$b ?v0 ?v1)))) :named a124))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (! (= (set2_tllist$b (tCons$ ?v0 ?v1)) (set2_tllist$b ?v1)) :pattern ((tCons$ ?v0 ?v1)))) :named a125))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$)) (! (= (set2_tllist$c (tCons$a ?v0 ?v1)) (set2_tllist$c ?v1)) :pattern ((tCons$a ?v0 ?v1)))) :named a126))
(assert (! (forall ((?v0 Natural_natural_prod_set$)) (= (collect$ (uug$ ?v0)) ?v0)) :named a127))
(assert (! (forall ((?v0 Natural_natural_prod$) (?v1 Natural_natural_prod_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$e ?v1 ?v0))) :named a128))
(assert (! (forall ((?v0 Natural$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a129))
(assert (! (forall ((?v0 Nat$)) (= (= zero$a ?v0) (= ?v0 zero$a))) :named a130))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 D$) (?v3 A$) (?v4 A_d_tllist$)) (not (tllist_all2$ ?v0 ?v1 (tNil$b ?v2) (tCons$b ?v3 ?v4)))) :named a131))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 C$) (?v3 A$) (?v4 A_d_tllist$)) (not (tllist_all2$a ?v0 ?v1 (tNil$a ?v2) (tCons$b ?v3 ?v4)))) :named a132))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 D_b_bool_fun_fun$) (?v2 D$) (?v3 A$) (?v4 A_b_tllist$)) (not (tllist_all2$b ?v0 ?v1 (tNil$b ?v2) (tCons$ ?v3 ?v4)))) :named a133))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_b_bool_fun_fun$) (?v2 C$) (?v3 A$) (?v4 A_b_tllist$)) (not (tllist_all2$c ?v0 ?v1 (tNil$a ?v2) (tCons$ ?v3 ?v4)))) :named a134))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 D$) (?v3 A$) (?v4 A_c_tllist$)) (not (tllist_all2$d ?v0 ?v1 (tNil$b ?v2) (tCons$a ?v3 ?v4)))) :named a135))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 C$) (?v3 A$) (?v4 A_c_tllist$)) (not (tllist_all2$e ?v0 ?v1 (tNil$a ?v2) (tCons$a ?v3 ?v4)))) :named a136))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 D$) (?v3 D$)) (! (= (tllist_all2$ ?v0 ?v1 (tNil$b ?v2) (tNil$b ?v3)) (fun_app$ae (fun_app$am ?v1 ?v2) ?v3)) :pattern ((tllist_all2$ ?v0 ?v1 (tNil$b ?v2) (tNil$b ?v3))))) :named a137))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 D$) (?v3 C$)) (! (= (tllist_all2$d ?v0 ?v1 (tNil$b ?v2) (tNil$a ?v3)) (fun_app$af (fun_app$an ?v1 ?v2) ?v3)) :pattern ((tllist_all2$d ?v0 ?v1 (tNil$b ?v2) (tNil$a ?v3))))) :named a138))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 C$) (?v3 D$)) (! (= (tllist_all2$a ?v0 ?v1 (tNil$a ?v2) (tNil$b ?v3)) (fun_app$ae (fun_app$ao ?v1 ?v2) ?v3)) :pattern ((tllist_all2$a ?v0 ?v1 (tNil$a ?v2) (tNil$b ?v3))))) :named a139))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 C$) (?v3 C$)) (! (= (tllist_all2$e ?v0 ?v1 (tNil$a ?v2) (tNil$a ?v3)) (fun_app$af (fun_app$ap ?v1 ?v2) ?v3)) :pattern ((tllist_all2$e ?v0 ?v1 (tNil$a ?v2) (tNil$a ?v3))))) :named a140))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 A$) (?v3 A_d_tllist$) (?v4 A$) (?v5 A_d_tllist$)) (! (= (tllist_all2$ ?v0 ?v1 (tCons$b ?v2 ?v3) (tCons$b ?v4 ?v5)) (and (fun_app$ac (fun_app$aq ?v0 ?v2) ?v4) (tllist_all2$ ?v0 ?v1 ?v3 ?v5))) :pattern ((tllist_all2$ ?v0 ?v1 (tCons$b ?v2 ?v3) (tCons$b ?v4 ?v5))))) :named a141))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 D_b_bool_fun_fun$) (?v2 A$) (?v3 A_d_tllist$) (?v4 A$) (?v5 A_b_tllist$)) (! (= (tllist_all2$b ?v0 ?v1 (tCons$b ?v2 ?v3) (tCons$ ?v4 ?v5)) (and (fun_app$ac (fun_app$aq ?v0 ?v2) ?v4) (tllist_all2$b ?v0 ?v1 ?v3 ?v5))) :pattern ((tllist_all2$b ?v0 ?v1 (tCons$b ?v2 ?v3) (tCons$ ?v4 ?v5))))) :named a142))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 A$) (?v3 A_d_tllist$) (?v4 A$) (?v5 A_c_tllist$)) (! (= (tllist_all2$d ?v0 ?v1 (tCons$b ?v2 ?v3) (tCons$a ?v4 ?v5)) (and (fun_app$ac (fun_app$aq ?v0 ?v2) ?v4) (tllist_all2$d ?v0 ?v1 ?v3 ?v5))) :pattern ((tllist_all2$d ?v0 ?v1 (tCons$b ?v2 ?v3) (tCons$a ?v4 ?v5))))) :named a143))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_d_bool_fun_fun$) (?v2 A$) (?v3 A_b_tllist$) (?v4 A$) (?v5 A_d_tllist$)) (! (= (tllist_all2$f ?v0 ?v1 (tCons$ ?v2 ?v3) (tCons$b ?v4 ?v5)) (and (fun_app$ac (fun_app$aq ?v0 ?v2) ?v4) (tllist_all2$f ?v0 ?v1 ?v3 ?v5))) :pattern ((tllist_all2$f ?v0 ?v1 (tCons$ ?v2 ?v3) (tCons$b ?v4 ?v5))))) :named a144))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_b_bool_fun_fun$) (?v2 A$) (?v3 A_b_tllist$) (?v4 A$) (?v5 A_b_tllist$)) (! (= (tllist_all2$g ?v0 ?v1 (tCons$ ?v2 ?v3) (tCons$ ?v4 ?v5)) (and (fun_app$ac (fun_app$aq ?v0 ?v2) ?v4) (tllist_all2$g ?v0 ?v1 ?v3 ?v5))) :pattern ((tllist_all2$g ?v0 ?v1 (tCons$ ?v2 ?v3) (tCons$ ?v4 ?v5))))) :named a145))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_c_bool_fun_fun$) (?v2 A$) (?v3 A_b_tllist$) (?v4 A$) (?v5 A_c_tllist$)) (! (= (tllist_all2$h ?v0 ?v1 (tCons$ ?v2 ?v3) (tCons$a ?v4 ?v5)) (and (fun_app$ac (fun_app$aq ?v0 ?v2) ?v4) (tllist_all2$h ?v0 ?v1 ?v3 ?v5))) :pattern ((tllist_all2$h ?v0 ?v1 (tCons$ ?v2 ?v3) (tCons$a ?v4 ?v5))))) :named a146))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A$) (?v3 A_c_tllist$) (?v4 A$) (?v5 A_d_tllist$)) (! (= (tllist_all2$a ?v0 ?v1 (tCons$a ?v2 ?v3) (tCons$b ?v4 ?v5)) (and (fun_app$ac (fun_app$aq ?v0 ?v2) ?v4) (tllist_all2$a ?v0 ?v1 ?v3 ?v5))) :pattern ((tllist_all2$a ?v0 ?v1 (tCons$a ?v2 ?v3) (tCons$b ?v4 ?v5))))) :named a147))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_b_bool_fun_fun$) (?v2 A$) (?v3 A_c_tllist$) (?v4 A$) (?v5 A_b_tllist$)) (! (= (tllist_all2$c ?v0 ?v1 (tCons$a ?v2 ?v3) (tCons$ ?v4 ?v5)) (and (fun_app$ac (fun_app$aq ?v0 ?v2) ?v4) (tllist_all2$c ?v0 ?v1 ?v3 ?v5))) :pattern ((tllist_all2$c ?v0 ?v1 (tCons$a ?v2 ?v3) (tCons$ ?v4 ?v5))))) :named a148))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A$) (?v3 A_c_tllist$) (?v4 A$) (?v5 A_c_tllist$)) (! (= (tllist_all2$e ?v0 ?v1 (tCons$a ?v2 ?v3) (tCons$a ?v4 ?v5)) (and (fun_app$ac (fun_app$aq ?v0 ?v2) ?v4) (tllist_all2$e ?v0 ?v1 ?v3 ?v5))) :pattern ((tllist_all2$e ?v0 ?v1 (tCons$a ?v2 ?v3) (tCons$a ?v4 ?v5))))) :named a149))
(assert (! (forall ((?v0 Natural_natural_prod_natural_natural_prod_bool_fun_fun$) (?v1 Natural_natural_prod_natural_natural_prod_bool_fun_fun$) (?v2 Natural_natural_prod_natural_natural_prod_tllist$) (?v3 Natural_natural_prod_natural_natural_prod_tllist$) (?v4 Natural_natural_prod_natural_natural_prod_bool_fun_fun$) (?v5 Natural_natural_prod_natural_natural_prod_bool_fun_fun$)) (=> (and (tllist_all2$i ?v0 ?v1 ?v2 ?v3) (and (forall ((?v6 Natural_natural_prod$) (?v7 Natural_natural_prod$)) (=> (and (member$ ?v6 (tset$ ?v2)) (and (member$ ?v7 (tset$ ?v3)) (fun_app$e (fun_app$ar ?v0 ?v6) ?v7))) (fun_app$e (fun_app$ar ?v4 ?v6) ?v7))) (forall ((?v6 Natural_natural_prod$) (?v7 Natural_natural_prod$)) (=> (and (member$ ?v6 (set2_tllist$ ?v2)) (and (member$ ?v7 (set2_tllist$ ?v3)) (fun_app$e (fun_app$ar ?v1 ?v6) ?v7))) (fun_app$e (fun_app$ar ?v5 ?v6) ?v7))))) (tllist_all2$i ?v4 ?v5 ?v2 ?v3))) :named a150))
(assert (! (forall ((?v0 D_d_bool_fun_fun$) (?v1 D$) (?v2 D$) (?v3 A_a_bool_fun_fun$)) (=> (fun_app$ae (fun_app$am ?v0 ?v1) ?v2) (tllist_all2$ ?v3 ?v0 (tNil$b ?v1) (tNil$b ?v2)))) :named a151))
(assert (! (forall ((?v0 D_c_bool_fun_fun$) (?v1 D$) (?v2 C$) (?v3 A_a_bool_fun_fun$)) (=> (fun_app$af (fun_app$an ?v0 ?v1) ?v2) (tllist_all2$d ?v3 ?v0 (tNil$b ?v1) (tNil$a ?v2)))) :named a152))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 C$) (?v2 D$) (?v3 A_a_bool_fun_fun$)) (=> (fun_app$ae (fun_app$ao ?v0 ?v1) ?v2) (tllist_all2$a ?v3 ?v0 (tNil$a ?v1) (tNil$b ?v2)))) :named a153))
(assert (! (forall ((?v0 C_c_bool_fun_fun$) (?v1 C$) (?v2 C$) (?v3 A_a_bool_fun_fun$)) (=> (fun_app$af (fun_app$ap ?v0 ?v1) ?v2) (tllist_all2$e ?v3 ?v0 (tNil$a ?v1) (tNil$a ?v2)))) :named a154))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 D_d_bool_fun_fun$) (?v4 A_d_tllist$) (?v5 A_d_tllist$)) (=> (and (fun_app$ac (fun_app$aq ?v0 ?v1) ?v2) (tllist_all2$ ?v0 ?v3 ?v4 ?v5)) (tllist_all2$ ?v0 ?v3 (tCons$b ?v1 ?v4) (tCons$b ?v2 ?v5)))) :named a155))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 D_b_bool_fun_fun$) (?v4 A_d_tllist$) (?v5 A_b_tllist$)) (=> (and (fun_app$ac (fun_app$aq ?v0 ?v1) ?v2) (tllist_all2$b ?v0 ?v3 ?v4 ?v5)) (tllist_all2$b ?v0 ?v3 (tCons$b ?v1 ?v4) (tCons$ ?v2 ?v5)))) :named a156))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 D_c_bool_fun_fun$) (?v4 A_d_tllist$) (?v5 A_c_tllist$)) (=> (and (fun_app$ac (fun_app$aq ?v0 ?v1) ?v2) (tllist_all2$d ?v0 ?v3 ?v4 ?v5)) (tllist_all2$d ?v0 ?v3 (tCons$b ?v1 ?v4) (tCons$a ?v2 ?v5)))) :named a157))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 B_d_bool_fun_fun$) (?v4 A_b_tllist$) (?v5 A_d_tllist$)) (=> (and (fun_app$ac (fun_app$aq ?v0 ?v1) ?v2) (tllist_all2$f ?v0 ?v3 ?v4 ?v5)) (tllist_all2$f ?v0 ?v3 (tCons$ ?v1 ?v4) (tCons$b ?v2 ?v5)))) :named a158))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 B_b_bool_fun_fun$) (?v4 A_b_tllist$) (?v5 A_b_tllist$)) (=> (and (fun_app$ac (fun_app$aq ?v0 ?v1) ?v2) (tllist_all2$g ?v0 ?v3 ?v4 ?v5)) (tllist_all2$g ?v0 ?v3 (tCons$ ?v1 ?v4) (tCons$ ?v2 ?v5)))) :named a159))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 B_c_bool_fun_fun$) (?v4 A_b_tllist$) (?v5 A_c_tllist$)) (=> (and (fun_app$ac (fun_app$aq ?v0 ?v1) ?v2) (tllist_all2$h ?v0 ?v3 ?v4 ?v5)) (tllist_all2$h ?v0 ?v3 (tCons$ ?v1 ?v4) (tCons$a ?v2 ?v5)))) :named a160))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 C_d_bool_fun_fun$) (?v4 A_c_tllist$) (?v5 A_d_tllist$)) (=> (and (fun_app$ac (fun_app$aq ?v0 ?v1) ?v2) (tllist_all2$a ?v0 ?v3 ?v4 ?v5)) (tllist_all2$a ?v0 ?v3 (tCons$a ?v1 ?v4) (tCons$b ?v2 ?v5)))) :named a161))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 C_b_bool_fun_fun$) (?v4 A_c_tllist$) (?v5 A_b_tllist$)) (=> (and (fun_app$ac (fun_app$aq ?v0 ?v1) ?v2) (tllist_all2$c ?v0 ?v3 ?v4 ?v5)) (tllist_all2$c ?v0 ?v3 (tCons$a ?v1 ?v4) (tCons$ ?v2 ?v5)))) :named a162))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 C_c_bool_fun_fun$) (?v4 A_c_tllist$) (?v5 A_c_tllist$)) (=> (and (fun_app$ac (fun_app$aq ?v0 ?v1) ?v2) (tllist_all2$e ?v0 ?v3 ?v4 ?v5)) (tllist_all2$e ?v0 ?v3 (tCons$a ?v1 ?v4) (tCons$a ?v2 ?v5)))) :named a163))
(assert (! (forall ((?v0 D$)) (! (= (ttl$b (tNil$b ?v0)) (tNil$b ?v0)) :pattern ((tNil$b ?v0)))) :named a164))
(assert (! (forall ((?v0 C$)) (! (= (ttl$a (tNil$a ?v0)) (tNil$a ?v0)) :pattern ((tNil$a ?v0)))) :named a165))
(assert (! (forall ((?v0 A$) (?v1 A_d_tllist$)) (! (= (ttl$b (tCons$b ?v0 ?v1)) ?v1) :pattern ((tCons$b ?v0 ?v1)))) :named a166))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (! (= (ttl$ (tCons$ ?v0 ?v1)) ?v1) :pattern ((tCons$ ?v0 ?v1)))) :named a167))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$)) (! (= (ttl$a (tCons$a ?v0 ?v1)) ?v1) :pattern ((tCons$a ?v0 ?v1)))) :named a168))
(assert (! (forall ((?v0 A$) (?v1 A_d_tllist$) (?v2 A_a_d_tllist_bool_fun_fun$)) (=> (and (member$d ?v0 (tset$a ?v1)) (and (forall ((?v3 A$) (?v4 A_d_tllist$)) (fun_app$ag (fun_app$as ?v2 ?v3) (tCons$b ?v3 ?v4))) (forall ((?v3 A$) (?v4 A_d_tllist$) (?v5 A$)) (=> (and (member$d ?v5 (tset$a ?v4)) (fun_app$ag (fun_app$as ?v2 ?v5) ?v4)) (fun_app$ag (fun_app$as ?v2 ?v5) (tCons$b ?v3 ?v4)))))) (fun_app$ag (fun_app$as ?v2 ?v0) ?v1))) :named a169))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 A_a_b_tllist_bool_fun_fun$)) (=> (and (member$d ?v0 (tset$b ?v1)) (and (forall ((?v3 A$) (?v4 A_b_tllist$)) (fun_app$ai (fun_app$at ?v2 ?v3) (tCons$ ?v3 ?v4))) (forall ((?v3 A$) (?v4 A_b_tllist$) (?v5 A$)) (=> (and (member$d ?v5 (tset$b ?v4)) (fun_app$ai (fun_app$at ?v2 ?v5) ?v4)) (fun_app$ai (fun_app$at ?v2 ?v5) (tCons$ ?v3 ?v4)))))) (fun_app$ai (fun_app$at ?v2 ?v0) ?v1))) :named a170))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$) (?v2 A_a_c_tllist_bool_fun_fun$)) (=> (and (member$d ?v0 (tset$c ?v1)) (and (forall ((?v3 A$) (?v4 A_c_tllist$)) (fun_app$ak (fun_app$au ?v2 ?v3) (tCons$a ?v3 ?v4))) (forall ((?v3 A$) (?v4 A_c_tllist$) (?v5 A$)) (=> (and (member$d ?v5 (tset$c ?v4)) (fun_app$ak (fun_app$au ?v2 ?v5) ?v4)) (fun_app$ak (fun_app$au ?v2 ?v5) (tCons$a ?v3 ?v4)))))) (fun_app$ak (fun_app$au ?v2 ?v0) ?v1))) :named a171))
(assert (! (forall ((?v0 A$) (?v1 A_d_tllist$)) (=> (and (member$d ?v0 (tset$a ?v1)) (and (forall ((?v2 A_d_tllist$)) (=> (= ?v1 (tCons$b ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_d_tllist$)) (=> (and (= ?v1 (tCons$b ?v2 ?v3)) (member$d ?v0 (tset$a ?v3))) false)))) false)) :named a172))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (=> (and (member$d ?v0 (tset$b ?v1)) (and (forall ((?v2 A_b_tllist$)) (=> (= ?v1 (tCons$ ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_b_tllist$)) (=> (and (= ?v1 (tCons$ ?v2 ?v3)) (member$d ?v0 (tset$b ?v3))) false)))) false)) :named a173))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$)) (=> (and (member$d ?v0 (tset$c ?v1)) (and (forall ((?v2 A_c_tllist$)) (=> (= ?v1 (tCons$a ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_c_tllist$)) (=> (and (= ?v1 (tCons$a ?v2 ?v3)) (member$d ?v0 (tset$c ?v3))) false)))) false)) :named a174))
(assert (! (forall ((?v0 A$) (?v1 A_d_tllist$) (?v2 A$)) (=> (member$d ?v0 (tset$a ?v1)) (member$d ?v0 (tset$a (tCons$b ?v2 ?v1))))) :named a175))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 A$)) (=> (member$d ?v0 (tset$b ?v1)) (member$d ?v0 (tset$b (tCons$ ?v2 ?v1))))) :named a176))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$) (?v2 A$)) (=> (member$d ?v0 (tset$c ?v1)) (member$d ?v0 (tset$c (tCons$a ?v2 ?v1))))) :named a177))
(assert (! (forall ((?v0 A$) (?v1 A_d_tllist$)) (member$d ?v0 (tset$a (tCons$b ?v0 ?v1)))) :named a178))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (member$d ?v0 (tset$b (tCons$ ?v0 ?v1)))) :named a179))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$)) (member$d ?v0 (tset$c (tCons$a ?v0 ?v1)))) :named a180))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 A_d_tllist$) (?v3 A_d_tllist$)) (=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3) (and (forall ((?v4 D$) (?v5 D$)) (=> (and (= ?v2 (tNil$b ?v4)) (and (= ?v3 (tNil$b ?v5)) (fun_app$ae (fun_app$am ?v1 ?v4) ?v5))) false)) (forall ((?v4 A$) (?v5 A_d_tllist$) (?v6 A$) (?v7 A_d_tllist$)) (=> (and (= ?v2 (tCons$b ?v4 ?v5)) (and (= ?v3 (tCons$b ?v6 ?v7)) (and (fun_app$ac (fun_app$aq ?v0 ?v4) ?v6) (tllist_all2$ ?v0 ?v1 ?v5 ?v7)))) false)))) false)) :named a181))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 D_b_bool_fun_fun$) (?v2 A_d_tllist$) (?v3 A_b_tllist$)) (=> (and (tllist_all2$b ?v0 ?v1 ?v2 ?v3) (and (forall ((?v4 D$) (?v5 B$)) (=> (and (= ?v2 (tNil$b ?v4)) (and (= ?v3 (tNil$ ?v5)) (fun_app$ad (fun_app$av ?v1 ?v4) ?v5))) false)) (forall ((?v4 A$) (?v5 A_d_tllist$) (?v6 A$) (?v7 A_b_tllist$)) (=> (and (= ?v2 (tCons$b ?v4 ?v5)) (and (= ?v3 (tCons$ ?v6 ?v7)) (and (fun_app$ac (fun_app$aq ?v0 ?v4) ?v6) (tllist_all2$b ?v0 ?v1 ?v5 ?v7)))) false)))) false)) :named a182))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 A_d_tllist$) (?v3 A_c_tllist$)) (=> (and (tllist_all2$d ?v0 ?v1 ?v2 ?v3) (and (forall ((?v4 D$) (?v5 C$)) (=> (and (= ?v2 (tNil$b ?v4)) (and (= ?v3 (tNil$a ?v5)) (fun_app$af (fun_app$an ?v1 ?v4) ?v5))) false)) (forall ((?v4 A$) (?v5 A_d_tllist$) (?v6 A$) (?v7 A_c_tllist$)) (=> (and (= ?v2 (tCons$b ?v4 ?v5)) (and (= ?v3 (tCons$a ?v6 ?v7)) (and (fun_app$ac (fun_app$aq ?v0 ?v4) ?v6) (tllist_all2$d ?v0 ?v1 ?v5 ?v7)))) false)))) false)) :named a183))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_d_bool_fun_fun$) (?v2 A_b_tllist$) (?v3 A_d_tllist$)) (=> (and (tllist_all2$f ?v0 ?v1 ?v2 ?v3) (and (forall ((?v4 B$) (?v5 D$)) (=> (and (= ?v2 (tNil$ ?v4)) (and (= ?v3 (tNil$b ?v5)) (fun_app$ae (fun_app$aw ?v1 ?v4) ?v5))) false)) (forall ((?v4 A$) (?v5 A_b_tllist$) (?v6 A$) (?v7 A_d_tllist$)) (=> (and (= ?v2 (tCons$ ?v4 ?v5)) (and (= ?v3 (tCons$b ?v6 ?v7)) (and (fun_app$ac (fun_app$aq ?v0 ?v4) ?v6) (tllist_all2$f ?v0 ?v1 ?v5 ?v7)))) false)))) false)) :named a184))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_b_bool_fun_fun$) (?v2 A_b_tllist$) (?v3 A_b_tllist$)) (=> (and (tllist_all2$g ?v0 ?v1 ?v2 ?v3) (and (forall ((?v4 B$) (?v5 B$)) (=> (and (= ?v2 (tNil$ ?v4)) (and (= ?v3 (tNil$ ?v5)) (fun_app$ad (fun_app$ax ?v1 ?v4) ?v5))) false)) (forall ((?v4 A$) (?v5 A_b_tllist$) (?v6 A$) (?v7 A_b_tllist$)) (=> (and (= ?v2 (tCons$ ?v4 ?v5)) (and (= ?v3 (tCons$ ?v6 ?v7)) (and (fun_app$ac (fun_app$aq ?v0 ?v4) ?v6) (tllist_all2$g ?v0 ?v1 ?v5 ?v7)))) false)))) false)) :named a185))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_c_bool_fun_fun$) (?v2 A_b_tllist$) (?v3 A_c_tllist$)) (=> (and (tllist_all2$h ?v0 ?v1 ?v2 ?v3) (and (forall ((?v4 B$) (?v5 C$)) (=> (and (= ?v2 (tNil$ ?v4)) (and (= ?v3 (tNil$a ?v5)) (fun_app$af (fun_app$ay ?v1 ?v4) ?v5))) false)) (forall ((?v4 A$) (?v5 A_b_tllist$) (?v6 A$) (?v7 A_c_tllist$)) (=> (and (= ?v2 (tCons$ ?v4 ?v5)) (and (= ?v3 (tCons$a ?v6 ?v7)) (and (fun_app$ac (fun_app$aq ?v0 ?v4) ?v6) (tllist_all2$h ?v0 ?v1 ?v5 ?v7)))) false)))) false)) :named a186))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 A_d_tllist$)) (=> (and (tllist_all2$a ?v0 ?v1 ?v2 ?v3) (and (forall ((?v4 C$) (?v5 D$)) (=> (and (= ?v2 (tNil$a ?v4)) (and (= ?v3 (tNil$b ?v5)) (fun_app$ae (fun_app$ao ?v1 ?v4) ?v5))) false)) (forall ((?v4 A$) (?v5 A_c_tllist$) (?v6 A$) (?v7 A_d_tllist$)) (=> (and (= ?v2 (tCons$a ?v4 ?v5)) (and (= ?v3 (tCons$b ?v6 ?v7)) (and (fun_app$ac (fun_app$aq ?v0 ?v4) ?v6) (tllist_all2$a ?v0 ?v1 ?v5 ?v7)))) false)))) false)) :named a187))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_b_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 A_b_tllist$)) (=> (and (tllist_all2$c ?v0 ?v1 ?v2 ?v3) (and (forall ((?v4 C$) (?v5 B$)) (=> (and (= ?v2 (tNil$a ?v4)) (and (= ?v3 (tNil$ ?v5)) (fun_app$ad (fun_app$az ?v1 ?v4) ?v5))) false)) (forall ((?v4 A$) (?v5 A_c_tllist$) (?v6 A$) (?v7 A_b_tllist$)) (=> (and (= ?v2 (tCons$a ?v4 ?v5)) (and (= ?v3 (tCons$ ?v6 ?v7)) (and (fun_app$ac (fun_app$aq ?v0 ?v4) ?v6) (tllist_all2$c ?v0 ?v1 ?v5 ?v7)))) false)))) false)) :named a188))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 A_c_tllist$)) (=> (and (tllist_all2$e ?v0 ?v1 ?v2 ?v3) (and (forall ((?v4 C$) (?v5 C$)) (=> (and (= ?v2 (tNil$a ?v4)) (and (= ?v3 (tNil$a ?v5)) (fun_app$af (fun_app$ap ?v1 ?v4) ?v5))) false)) (forall ((?v4 A$) (?v5 A_c_tllist$) (?v6 A$) (?v7 A_c_tllist$)) (=> (and (= ?v2 (tCons$a ?v4 ?v5)) (and (= ?v3 (tCons$a ?v6 ?v7)) (and (fun_app$ac (fun_app$aq ?v0 ?v4) ?v6) (tllist_all2$e ?v0 ?v1 ?v5 ?v7)))) false)))) false)) :named a189))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 A$) (?v3 A_d_tllist$) (?v4 D$)) (not (tllist_all2$ ?v0 ?v1 (tCons$b ?v2 ?v3) (tNil$b ?v4)))) :named a190))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 A$) (?v3 A_d_tllist$) (?v4 C$)) (not (tllist_all2$d ?v0 ?v1 (tCons$b ?v2 ?v3) (tNil$a ?v4)))) :named a191))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_d_bool_fun_fun$) (?v2 A$) (?v3 A_b_tllist$) (?v4 D$)) (not (tllist_all2$f ?v0 ?v1 (tCons$ ?v2 ?v3) (tNil$b ?v4)))) :named a192))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_c_bool_fun_fun$) (?v2 A$) (?v3 A_b_tllist$) (?v4 C$)) (not (tllist_all2$h ?v0 ?v1 (tCons$ ?v2 ?v3) (tNil$a ?v4)))) :named a193))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A$) (?v3 A_c_tllist$) (?v4 D$)) (not (tllist_all2$a ?v0 ?v1 (tCons$a ?v2 ?v3) (tNil$b ?v4)))) :named a194))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A$) (?v3 A_c_tllist$) (?v4 C$)) (not (tllist_all2$e ?v0 ?v1 (tCons$a ?v2 ?v3) (tNil$a ?v4)))) :named a195))
(assert (! (= (size_natural$ zero$) zero$a) :named a196))
(assert (! (= (size$ zero$) zero$a) :named a197))
(assert (! (forall ((?v0 A_d_tllist$)) (= (ttl$b ?v0) (case_tllist$ uub$ uuh$ ?v0))) :named a198))
(assert (! (forall ((?v0 A_c_tllist$)) (= (ttl$a ?v0) (case_tllist$a uuc$ uui$ ?v0))) :named a199))
(assert (! (forall ((?v0 Natural_natural_prod_bool_fun$) (?v1 Natural_natural_prod_bool_fun$) (?v2 Natural_natural_prod_natural_natural_prod_tllist$)) (= (pred_tllist$ ?v0 ?v1 ?v2) (and (forall ((?v3 Natural_natural_prod$)) (=> (member$ ?v3 (tset$ ?v2)) (fun_app$e ?v0 ?v3))) (forall ((?v3 Natural_natural_prod$)) (=> (member$ ?v3 (set2_tllist$ ?v2)) (fun_app$e ?v1 ?v3)))))) :named a200))
(assert (! (forall ((?v0 A$) (?v1 A_d_tllist$)) (! (= (tset$a (tCons$b ?v0 ?v1)) (insert$ ?v0 (tset$a ?v1))) :pattern ((tCons$b ?v0 ?v1)))) :named a201))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (! (= (tset$b (tCons$ ?v0 ?v1)) (insert$ ?v0 (tset$b ?v1))) :pattern ((tCons$ ?v0 ?v1)))) :named a202))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$)) (! (= (tset$c (tCons$a ?v0 ?v1)) (insert$ ?v0 (tset$c ?v1))) :pattern ((tCons$a ?v0 ?v1)))) :named a203))
(assert (! (forall ((?v0 Natural_natural_prod$)) (=> (and (forall ((?v1 Natural$)) (=> (= ?v0 (pair$ zero$ ?v1)) false)) (forall ((?v1 Natural$) (?v2 Natural$)) (=> (= ?v0 (pair$ (suc$ ?v1) ?v2)) false))) false)) :named a204))
(assert (! (forall ((?v0 D$)) (! (= (tset$a (tNil$b ?v0)) bot$) :pattern ((tNil$b ?v0)))) :named a205))
(assert (! (forall ((?v0 C$)) (! (= (tset$c (tNil$a ?v0)) bot$) :pattern ((tNil$a ?v0)))) :named a206))
(assert (! (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a207))
(assert (! (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a208))
(assert (! (= zero$a zero$a) :named a209))
(assert (! (forall ((?v0 Natural_natural_prod$)) (=> (forall ((?v1 Natural$) (?v2 Natural$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a210))
(assert (! (forall ((?v0 Natural_natural_prod_bool_fun$) (?v1 Natural_natural_prod$)) (=> (forall ((?v2 Natural$) (?v3 Natural$)) (fun_app$e ?v0 (pair$ ?v2 ?v3))) (fun_app$e ?v0 ?v1))) :named a211))
(assert (! (forall ((?v0 Natural_natural_prod$)) (=> (forall ((?v1 Natural$) (?v2 Natural$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a212))
(assert (! (forall ((?v0 Natural$) (?v1 Natural$) (?v2 Natural$) (?v3 Natural$)) (=> (and (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a213))
(assert (! (forall ((?v0 Natural_natural_prod$)) (exists ((?v1 Natural$) (?v2 Natural$)) (= ?v0 (pair$ ?v1 ?v2)))) :named a214))
(assert (! (forall ((?v0 Natural_natural_prod_set$) (?v1 Natural_natural_prod_set$)) (= (= (uuj$ ?v0) (uuj$ ?v1)) (= ?v0 ?v1))) :named a215))
(assert (! (forall ((?v0 D$)) (! (= (set2_tllist$a (tNil$b ?v0)) (insert$a ?v0 bot$a)) :pattern ((tNil$b ?v0)))) :named a216))
(assert (! (forall ((?v0 C$)) (! (= (set2_tllist$c (tNil$a ?v0)) (insert$b ?v0 bot$b)) :pattern ((tNil$a ?v0)))) :named a217))
(assert (! (forall ((?v0 Natural_natural_prod_bool_fun$)) (= (forall ((?v1 Natural_natural_prod$)) (=> (member$ ?v1 bot$c) (fun_app$e ?v0 ?v1))) true)) :named a218))
(assert (! (forall ((?v0 Natural_natural_prod$)) (member$ ?v0 (insert$c ?v0 bot$c))) :named a219))
(check-sat)
;(get-unsat-core)
