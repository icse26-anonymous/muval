; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 456
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Unit_b_fun$ 0)
(declare-sort B_a_b_tllist_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_b_tllist$ (tNil$ (terminal$ B$)) (tCons$ (thd$ A$) (ttl$ A_b_tllist$)))
  (A_llist_b_tllist$ (tNil$a (terminal$a B$)) (tCons$a (thd$a A_llist$) (ttl$a A_llist_b_tllist$)))))
(declare-fun tr$ () A_b_tllist$)
(declare-fun xs$ () A_llist$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lappend$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun tappend$ (A_b_tllist$ B_a_b_tllist_fun$) A_b_tllist$)
(declare-fun tconcat$ (B$ A_llist_b_tllist$) A_b_tllist$)
(declare-fun fun_app$a (B_a_b_tllist_fun$ B$) A_b_tllist$)
(declare-fun lappendt$ (A_llist$ A_b_tllist$) A_b_tllist$)
(declare-fun tconcat$a (Unit_b_fun$ A_llist_b_tllist$) A_b_tllist$)
(declare-fun inf_llist$ (Nat_a_fun$) A_llist$)
(declare-fun llist_of_tllist$ (A_b_tllist$) A_llist$)
(declare-fun tllist_of_llist$ (B$ A_llist$) A_b_tllist$)
(assert (! (not (= (llist_of_tllist$ (lappendt$ xs$ tr$)) (fun_app$ (lappend$ xs$) (llist_of_tllist$ tr$)))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0) ?v1)) ?v2) (fun_app$ (lappend$ ?v0) (fun_app$ (lappend$ ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 A_b_tllist$)) (! (= (lappendt$ lNil$ ?v0) ?v0) :pattern ((lappendt$ lNil$ ?v0)))) :named a2))
(assert (! (forall ((?v0 B$) (?v1 A_llist$)) (= (llist_of_tllist$ (tllist_of_llist$ ?v0 ?v1)) ?v1)) :named a3))
(assert (! (forall ((?v0 A_b_tllist$) (?v1 B_a_b_tllist_fun$)) (= (llist_of_tllist$ (tappend$ ?v0 ?v1)) (fun_app$ (lappend$ (llist_of_tllist$ ?v0)) (llist_of_tllist$ (fun_app$a ?v1 (terminal$ ?v0)))))) :named a4))
(assert (! (forall ((?v0 B$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_b_tllist$)) (= (= (tllist_of_llist$ ?v0 ?v1) (lappendt$ ?v2 ?v3)) (exists ((?v4 A_llist$) (?v5 B$)) (and (= ?v1 (fun_app$ (lappend$ ?v2) ?v4)) (and (= ?v3 (tllist_of_llist$ ?v5 ?v4)) (=> (lfinite$ ?v2) (= ?v0 ?v5))))))) :named a5))
(assert (! (forall ((?v0 B$) (?v1 A_llist$) (?v2 A_llist_b_tllist$)) (! (= (tconcat$ ?v0 (tCons$a ?v1 ?v2)) (lappendt$ ?v1 (tconcat$ ?v0 ?v2))) :pattern ((tconcat$ ?v0 (tCons$a ?v1 ?v2))))) :named a6))
(assert (! (forall ((?v0 Unit_b_fun$) (?v1 A_llist$) (?v2 A_llist_b_tllist$)) (! (= (tconcat$a ?v0 (tCons$a ?v1 ?v2)) (lappendt$ ?v1 (tconcat$a ?v0 ?v2))) :pattern ((tconcat$a ?v0 (tCons$a ?v1 ?v2))))) :named a7))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 A_llist$)) (= (fun_app$ (lappend$ (inf_llist$ ?v0)) ?v1) (inf_llist$ ?v0))) :named a8))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (lappend$ ?v0) lNil$) ?v0) :pattern ((lappend$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (lappend$ lNil$) ?v0) ?v0) :pattern ((fun_app$ (lappend$ lNil$) ?v0)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1)) ?v2) (lCons$ ?v0 (fun_app$ (lappend$ ?v1) ?v2))) :pattern ((fun_app$ (lappend$ (lCons$ ?v0 ?v1)) ?v2)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$ (fun_app$ (lappend$ ?v0) ?v1))) (or (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_b_tllist$) (?v2 A_llist$) (?v3 A_llist_b_tllist$)) (= (= (tCons$a ?v0 ?v1) (tCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_a_fun$)) (= (= (inf_llist$ ?v0) (inf_llist$ ?v1)) (= ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a17))
(check-sat)
;(get-unsat-core)
