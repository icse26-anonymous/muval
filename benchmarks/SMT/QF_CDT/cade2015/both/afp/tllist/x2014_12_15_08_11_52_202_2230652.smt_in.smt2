; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 47
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort D$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort C_set$ 0)
(declare-sort D_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort C_d_fun$ 0)
(declare-sort D_c_fun$ 0)
(declare-sort D_d_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort C_bool_fun$ 0)
(declare-sort D_bool_fun$ 0)
(declare-sort A_b_prod_set$ 0)
(declare-sort C_d_prod_set$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort A_a_b_prod_fun$ 0)
(declare-sort A_b_prod_a_fun$ 0)
(declare-sort A_b_prod_b_fun$ 0)
(declare-sort B_a_b_prod_fun$ 0)
(declare-sort C_c_d_prod_fun$ 0)
(declare-sort C_d_prod_c_fun$ 0)
(declare-sort C_d_prod_d_fun$ 0)
(declare-sort D_c_d_prod_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort C_a_c_tllist_fun$ 0)
(declare-sort C_d_bool_fun_fun$ 0)
(declare-sort D_b_d_tllist_fun$ 0)
(declare-sort D_c_bool_fun_fun$ 0)
(declare-sort A_b_prod_bool_fun$ 0)
(declare-sort C_d_prod_bool_fun$ 0)
(declare-sort A_b_prod_llist_set$ 0)
(declare-sort A_llist_c_prod_set$ 0)
(declare-sort B_llist_d_prod_set$ 0)
(declare-sort A_c_tllist_bool_fun$ 0)
(declare-sort B_d_tllist_bool_fun$ 0)
(declare-sort A_llist_c_prod_c_fun$ 0)
(declare-sort B_llist_d_prod_d_fun$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-sort C_d_prod_c_d_prod_fun$ 0)
(declare-sort A_llist_c_bool_fun_fun$ 0)
(declare-sort B_llist_d_bool_fun_fun$ 0)
(declare-sort C_a_llist_bool_fun_fun$ 0)
(declare-sort A_a_b_prod_bool_fun_fun$ 0)
(declare-sort A_b_prod_a_bool_fun_fun$ 0)
(declare-sort A_b_prod_b_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_bool_fun$ 0)
(declare-sort A_llist_c_prod_bool_fun$ 0)
(declare-sort B_llist_d_prod_bool_fun$ 0)
(declare-sort C_c_d_prod_bool_fun_fun$ 0)
(declare-sort C_d_prod_c_bool_fun_fun$ 0)
(declare-sort C_d_prod_d_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_a_llist_fun$ 0)
(declare-sort A_b_prod_llist_b_llist_fun$ 0)
(declare-sort A_llist_c_prod_a_llist_fun$ 0)
(declare-sort B_llist_d_prod_b_llist_fun$ 0)
(declare-sort A_b_prod_a_b_prod_tllist_set$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_set$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_llist_bool_fun_fun$ 0)
(declare-sort A_llist_c_a_c_tllist_fun_fun$ 0)
(declare-sort B_llist_a_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-sort B_llist_d_b_d_tllist_fun_fun$ 0)
(declare-sort C_d_prod_a_b_prod_tllist_set$ 0)
(declare-sort C_d_prod_c_d_prod_tllist_set$ 0)
(declare-sort C_a_llist_c_prod_bool_fun_fun$ 0)
(declare-sort D_b_llist_d_prod_bool_fun_fun$ 0)
(declare-sort A_b_prod_a_b_prod_bool_fun_fun$ 0)
(declare-sort C_d_prod_c_d_prod_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_a_llist_prod_set$ 0)
(declare-sort A_b_prod_llist_b_llist_prod_set$ 0)
(declare-sort A_llist_a_llist_tllist_bool_fun$ 0)
(declare-sort A_llist_c_prod_bool_fun_bool_fun$ 0)
(declare-sort A_b_prod_a_b_prod_tllist_bool_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_bool_fun$ 0)
(declare-sort C_d_prod_a_b_prod_tllist_bool_fun$ 0)
(declare-sort C_d_prod_c_d_prod_tllist_bool_fun$ 0)
(declare-sort A_a_tllist_b_b_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_a_llist_c_prod_tllist_set$ 0)
(declare-sort A_b_prod_b_llist_d_prod_tllist_set$ 0)
(declare-sort A_c_tllist_a_c_tllist_bool_fun_fun$ 0)
(declare-sort A_c_tllist_a_llist_tllist_bool_fun$ 0)
(declare-sort A_c_tllist_b_d_tllist_bool_fun_fun$ 0)
(declare-sort A_llist_a_c_tllist_tllist_bool_fun$ 0)
(declare-sort B_d_tllist_a_c_tllist_bool_fun_fun$ 0)
(declare-sort B_d_tllist_b_d_tllist_bool_fun_fun$ 0)
(declare-sort B_llist_d_prod_a_b_prod_tllist_set$ 0)
(declare-sort B_llist_d_prod_c_d_prod_tllist_set$ 0)
(declare-sort C_a_tllist_d_b_tllist_bool_fun_fun$ 0)
(declare-sort C_c_tllist_d_d_tllist_bool_fun_fun$ 0)
(declare-sort C_d_prod_a_llist_c_prod_tllist_set$ 0)
(declare-sort C_d_prod_b_llist_d_prod_tllist_set$ 0)
(declare-sort A_b_prod_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_b_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_b_prod_llist_bool_fun_fun$ 0)
(declare-sort B_llist_a_b_prod_llist_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_a_llist_prod_bool_fun$ 0)
(declare-sort A_b_prod_llist_b_llist_prod_bool_fun$ 0)
(declare-sort A_c_tllist_a_c_tllist_tllist_bool_fun$ 0)
(declare-sort A_b_prod_a_b_prod_tllist_a_a_tllist_fun$ 0)
(declare-sort A_b_prod_a_b_prod_tllist_b_b_tllist_fun$ 0)
(declare-sort A_b_prod_a_llist_c_prod_tllist_bool_fun$ 0)
(declare-sort A_b_prod_b_llist_d_prod_tllist_bool_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_a_c_tllist_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_b_d_tllist_fun$ 0)
(declare-sort B_llist_d_prod_a_b_prod_tllist_bool_fun$ 0)
(declare-sort B_llist_d_prod_c_d_prod_tllist_bool_fun$ 0)
(declare-sort C_d_prod_a_b_prod_tllist_c_a_tllist_fun$ 0)
(declare-sort C_d_prod_a_b_prod_tllist_d_b_tllist_fun$ 0)
(declare-sort C_d_prod_a_llist_c_prod_tllist_bool_fun$ 0)
(declare-sort C_d_prod_b_llist_d_prod_tllist_bool_fun$ 0)
(declare-sort C_d_prod_c_d_prod_tllist_c_c_tllist_fun$ 0)
(declare-sort C_d_prod_c_d_prod_tllist_d_d_tllist_fun$ 0)
(declare-sort A_a_llist_tllist_b_c_tllist_bool_fun_fun$ 0)
(declare-sort A_b_llist_tllist_b_d_tllist_bool_fun_fun$ 0)
(declare-sort B_llist_a_tllist_d_b_tllist_bool_fun_fun$ 0)
(declare-sort B_llist_c_tllist_d_d_tllist_bool_fun_fun$ 0)
(declare-sort C_a_llist_tllist_d_c_tllist_bool_fun_fun$ 0)
(declare-sort C_b_llist_tllist_d_d_tllist_bool_fun_fun$ 0)
(declare-sort A_llist_c_a_llist_c_prod_bool_fun_fun_fun$ 0)
(declare-sort B_llist_d_b_llist_d_prod_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_a_c_tllist_prod_set$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_b_d_tllist_prod_set$ 0)
(declare-sort A_b_prod_a_llist_c_prod_tllist_b_c_tllist_fun$ 0)
(declare-sort A_b_prod_b_llist_d_prod_tllist_b_d_tllist_fun$ 0)
(declare-sort A_b_prod_llist_a_b_prod_llist_tllist_bool_fun$ 0)
(declare-sort B_llist_d_prod_a_b_prod_tllist_d_b_tllist_fun$ 0)
(declare-sort B_llist_d_prod_c_d_prod_tllist_d_d_tllist_fun$ 0)
(declare-sort C_d_prod_a_llist_c_prod_tllist_d_c_tllist_fun$ 0)
(declare-sort C_d_prod_b_llist_d_prod_tllist_d_d_tllist_fun$ 0)
(declare-sort A_a_tllist_a_b_prod_a_b_prod_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_a_b_prod_tllist_a_a_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_a_b_prod_tllist_b_b_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun$ 0)
(declare-sort A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$ 0)
(declare-sort B_d_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$ 0)
(declare-sort C_a_tllist_c_d_prod_a_b_prod_tllist_bool_fun_fun$ 0)
(declare-sort C_c_tllist_c_d_prod_c_d_prod_tllist_bool_fun_fun$ 0)
(declare-sort C_d_prod_a_b_prod_tllist_c_a_tllist_bool_fun_fun$ 0)
(declare-sort C_d_prod_a_b_prod_tllist_d_b_tllist_bool_fun_fun$ 0)
(declare-sort C_d_prod_c_d_prod_tllist_c_c_tllist_bool_fun_fun$ 0)
(declare-sort C_d_prod_c_d_prod_tllist_d_d_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_a_c_tllist_prod_bool_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_b_d_tllist_prod_bool_fun$ 0)
(declare-sort A_b_prod_a_llist_c_prod_tllist_a_a_llist_tllist_fun$ 0)
(declare-sort A_b_prod_b_llist_d_prod_tllist_a_b_llist_tllist_fun$ 0)
(declare-sort B_llist_d_prod_a_b_prod_tllist_b_llist_a_tllist_fun$ 0)
(declare-sort B_llist_d_prod_c_d_prod_tllist_b_llist_c_tllist_fun$ 0)
(declare-sort C_d_prod_a_llist_c_prod_tllist_c_a_llist_tllist_fun$ 0)
(declare-sort C_d_prod_b_llist_d_prod_tllist_c_b_llist_tllist_fun$ 0)
(declare-sort A_b_prod_a_llist_c_prod_tllist_b_c_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_b_llist_d_prod_tllist_b_d_tllist_bool_fun_fun$ 0)
(declare-sort B_llist_d_prod_a_b_prod_tllist_d_b_tllist_bool_fun_fun$ 0)
(declare-sort B_llist_d_prod_c_d_prod_tllist_d_d_tllist_bool_fun_fun$ 0)
(declare-sort C_d_prod_a_llist_c_prod_tllist_d_c_tllist_bool_fun_fun$ 0)
(declare-sort C_d_prod_b_llist_d_prod_tllist_d_d_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist_bool_fun$ 0)
(declare-sort A_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist_bool_fun$ 0)
(declare-sort C_d_bool_fun_fun_a_c_tllist_b_d_tllist_bool_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_tllist_b_llist_b_llist_tllist_bool_fun_fun$ 0)
(declare-sort C_d_prod_c_fun_a_b_prod_c_d_prod_tllist_a_c_tllist_fun_fun$ 0)
(declare-sort C_d_prod_d_fun_a_b_prod_c_d_prod_tllist_b_d_tllist_fun_fun$ 0)
(declare-sort A_a_llist_tllist_a_b_prod_a_llist_c_prod_tllist_bool_fun_fun$ 0)
(declare-sort A_b_llist_tllist_a_b_prod_b_llist_d_prod_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_a_llist_c_prod_tllist_a_a_llist_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_b_llist_d_prod_tllist_a_b_llist_tllist_bool_fun_fun$ 0)
(declare-sort B_llist_a_tllist_b_llist_d_prod_a_b_prod_tllist_bool_fun_fun$ 0)
(declare-sort B_llist_c_tllist_b_llist_d_prod_c_d_prod_tllist_bool_fun_fun$ 0)
(declare-sort B_llist_d_prod_a_b_prod_tllist_b_llist_a_tllist_bool_fun_fun$ 0)
(declare-sort B_llist_d_prod_c_d_prod_tllist_b_llist_c_tllist_bool_fun_fun$ 0)
(declare-sort C_a_llist_tllist_c_d_prod_a_llist_c_prod_tllist_bool_fun_fun$ 0)
(declare-sort C_b_llist_tllist_c_d_prod_b_llist_d_prod_tllist_bool_fun_fun$ 0)
(declare-sort C_d_prod_a_llist_c_prod_tllist_c_a_llist_tllist_bool_fun_fun$ 0)
(declare-sort C_d_prod_b_llist_d_prod_tllist_c_b_llist_tllist_bool_fun_fun$ 0)
(declare-sort A_c_tllist_a_llist_tllist_b_d_tllist_b_llist_tllist_bool_fun_fun$ 0)
(declare-sort A_llist_a_c_tllist_tllist_b_llist_b_d_tllist_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist_bool_fun$ 0)
(declare-sort B_llist_d_bool_fun_fun_a_b_llist_tllist_b_d_tllist_bool_fun_fun_fun$ 0)
(declare-sort A_c_tllist_a_c_tllist_tllist_b_d_tllist_b_d_tllist_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_a_b_prod_llist_tllist_a_llist_a_llist_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_a_b_prod_llist_tllist_b_llist_b_llist_tllist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_tllist_a_b_prod_llist_a_b_prod_llist_tllist_bool_fun_fun$ 0)
(declare-sort C_d_prod_c_bool_fun_fun_a_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun_fun$ 0)
(declare-sort C_d_prod_d_bool_fun_fun_a_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist_a_c_tllist_a_llist_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist_b_d_tllist_b_llist_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist_a_llist_a_c_tllist_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist_b_llist_b_d_tllist_tllist_bool_fun_fun$ 0)
(declare-sort A_c_tllist_a_llist_tllist_a_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist_bool_fun_fun$ 0)
(declare-sort A_llist_a_c_tllist_tllist_a_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun_a_c_tllist_a_c_tllist_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun_b_d_tllist_a_c_tllist_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun_a_c_tllist_b_d_tllist_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun_b_d_tllist_b_d_tllist_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_a_c_tllist_fun_a_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_b_d_tllist_fun_a_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist_a_c_tllist_a_c_tllist_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist_b_d_tllist_b_d_tllist_tllist_bool_fun_fun$ 0)
(declare-sort A_c_tllist_a_c_tllist_tllist_a_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist_bool_fun_fun$ 0)
(declare-sort A_b_prod_b_llist_d_prod_tllist_b_d_tllist_bool_fun_fun_a_b_llist_tllist_b_d_tllist_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_b_llist_d_prod_tllist_b_d_tllist_fun_a_b_prod_b_llist_d_prod_tllist_b_d_tllist_bool_fun_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$a) (lCons$a (lhd$a A_b_prod$) (ltl$a A_b_prod_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))
  (A_c_tllist$ (tNil$ (terminal$ C$)) (tCons$ (thd$ A$) (ttl$ A_c_tllist$)))))
(declare-datatypes () ((C_d_prod$ (pair$a (fst$a C$) (snd$a D$)))))
(declare-codatatypes () ((A_b_prod_c_d_prod_tllist$ (tNil$a (terminal$a C_d_prod$)) (tCons$a (thd$a A_b_prod$) (ttl$a A_b_prod_c_d_prod_tllist$)))
  (B_d_tllist$ (tNil$b (terminal$b D$)) (tCons$b (thd$b B$) (ttl$b B_d_tllist$)))
  (C_d_prod_llist$ (lNil$c) (lCons$c (lhd$c C_d_prod$) (ltl$c C_d_prod_llist$)))
  (C_d_prod_c_d_prod_tllist$ (tNil$c (terminal$c C_d_prod$)) (tCons$c (thd$c C_d_prod$) (ttl$c C_d_prod_c_d_prod_tllist$)))
  (C_d_prod_a_b_prod_tllist$ (tNil$d (terminal$d A_b_prod$)) (tCons$d (thd$d C_d_prod$) (ttl$d C_d_prod_a_b_prod_tllist$)))
  (A_b_prod_a_b_prod_tllist$ (tNil$e (terminal$e A_b_prod$)) (tCons$e (thd$e A_b_prod$) (ttl$e A_b_prod_a_b_prod_tllist$)))
  (A_a_tllist$ (tNil$f (terminal$f A$)) (tCons$f (thd$f A$) (ttl$f A_a_tllist$)))
  (B_b_tllist$ (tNil$g (terminal$g B$)) (tCons$g (thd$g B$) (ttl$g B_b_tllist$)))
  (C_a_tllist$ (tNil$h (terminal$h A$)) (tCons$h (thd$h C$) (ttl$h C_a_tllist$)))
  (D_b_tllist$ (tNil$i (terminal$i B$)) (tCons$i (thd$i D$) (ttl$i D_b_tllist$)))
  (C_c_tllist$ (tNil$j (terminal$j C$)) (tCons$j (thd$j C$) (ttl$j C_c_tllist$)))
  (D_d_tllist$ (tNil$k (terminal$k D$)) (tCons$k (thd$k D$) (ttl$k D_d_tllist$)))
  (A_b_llist_tllist$ (tNil$l (terminal$l B_llist$)) (tCons$l (thd$l A$) (ttl$l A_b_llist_tllist$)))))
(declare-datatypes () ((B_llist_d_prod$ (pair$b (fst$b B_llist$) (snd$b D$)))))
(declare-codatatypes () ((A_b_prod_b_llist_d_prod_tllist$ (tNil$m (terminal$m B_llist_d_prod$)) (tCons$m (thd$m A_b_prod$) (ttl$m A_b_prod_b_llist_d_prod_tllist$)))
  (A_a_llist_tllist$ (tNil$n (terminal$n A_llist$)) (tCons$n (thd$n A$) (ttl$n A_a_llist_tllist$)))
  (B_c_tllist$ (tNil$o (terminal$o C$)) (tCons$o (thd$o B$) (ttl$o B_c_tllist$)))))
(declare-datatypes () ((A_llist_c_prod$ (pair$c (fst$c A_llist$) (snd$c C$)))))
(declare-codatatypes () ((A_b_prod_a_llist_c_prod_tllist$ (tNil$p (terminal$p A_llist_c_prod$)) (tCons$p (thd$p A_b_prod$) (ttl$p A_b_prod_a_llist_c_prod_tllist$)))
  (C_b_llist_tllist$ (tNil$q (terminal$q B_llist$)) (tCons$q (thd$q C$) (ttl$q C_b_llist_tllist$)))
  (C_d_prod_b_llist_d_prod_tllist$ (tNil$r (terminal$r B_llist_d_prod$)) (tCons$r (thd$r C_d_prod$) (ttl$r C_d_prod_b_llist_d_prod_tllist$)))
  (C_a_llist_tllist$ (tNil$s (terminal$s A_llist$)) (tCons$s (thd$s C$) (ttl$s C_a_llist_tllist$)))
  (D_c_tllist$ (tNil$t (terminal$t C$)) (tCons$t (thd$t D$) (ttl$t D_c_tllist$)))
  (C_d_prod_a_llist_c_prod_tllist$ (tNil$u (terminal$u A_llist_c_prod$)) (tCons$u (thd$u C_d_prod$) (ttl$u C_d_prod_a_llist_c_prod_tllist$)))
  (B_llist_a_tllist$ (tNil$v (terminal$v A$)) (tCons$v (thd$v B_llist$) (ttl$v B_llist_a_tllist$)))
  (B_llist_d_prod_a_b_prod_tllist$ (tNil$w (terminal$w A_b_prod$)) (tCons$w (thd$w B_llist_d_prod$) (ttl$w B_llist_d_prod_a_b_prod_tllist$)))
  (B_llist_c_tllist$ (tNil$x (terminal$x C$)) (tCons$x (thd$x B_llist$) (ttl$x B_llist_c_tllist$)))
  (B_llist_d_prod_c_d_prod_tllist$ (tNil$y (terminal$y C_d_prod$)) (tCons$y (thd$y B_llist_d_prod$) (ttl$y B_llist_d_prod_c_d_prod_tllist$)))))
(declare-datatypes () ((A_b_prod_llist_a_llist_prod$ (pair$d (fst$d A_b_prod_llist$) (snd$d A_llist$)))
  (A_b_prod_llist_b_llist_prod$ (pair$e (fst$e A_b_prod_llist$) (snd$e B_llist$)))
  (A_b_prod_c_d_prod_tllist_a_c_tllist_prod$ (pair$f (fst$f A_b_prod_c_d_prod_tllist$) (snd$f A_c_tllist$)))
  (A_b_prod_c_d_prod_tllist_b_d_tllist_prod$ (pair$g (fst$g A_b_prod_c_d_prod_tllist$) (snd$g B_d_tllist$)))))
(declare-codatatypes () ((A_llist_a_llist_tllist$ (tNil$z (terminal$z A_llist$)) (tCons$z (thd$z A_llist$) (ttl$z A_llist_a_llist_tllist$)))
  (A_b_prod_llist_a_b_prod_llist_tllist$ (tNil$aa (terminal$aa A_b_prod_llist$)) (tCons$aa (thd$aa A_b_prod_llist$) (ttl$aa A_b_prod_llist_a_b_prod_llist_tllist$)))
  (A_llist_a_c_tllist_tllist$ (tNil$ab (terminal$ab A_c_tllist$)) (tCons$ab (thd$ab A_llist$) (ttl$ab A_llist_a_c_tllist_tllist$)))
  (A_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist$ (tNil$ac (terminal$ac A_b_prod_c_d_prod_tllist$)) (tCons$ac (thd$ac A_b_prod_llist$) (ttl$ac A_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist$)))
  (A_c_tllist_a_llist_tllist$ (tNil$ad (terminal$ad A_llist$)) (tCons$ad (thd$ad A_c_tllist$) (ttl$ad A_c_tllist_a_llist_tllist$)))
  (A_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist$ (tNil$ae (terminal$ae A_b_prod_llist$)) (tCons$ae (thd$ae A_b_prod_c_d_prod_tllist$) (ttl$ae A_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist$)))
  (A_c_tllist_a_c_tllist_tllist$ (tNil$af (terminal$af A_c_tllist$)) (tCons$af (thd$af A_c_tllist$) (ttl$af A_c_tllist_a_c_tllist_tllist$)))
  (A_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist$ (tNil$ag (terminal$ag A_b_prod_c_d_prod_tllist$)) (tCons$ag (thd$ag A_b_prod_c_d_prod_tllist$) (ttl$ag A_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist$)))
  (B_llist_b_llist_tllist$ (tNil$ah (terminal$ah B_llist$)) (tCons$ah (thd$ah B_llist$) (ttl$ah B_llist_b_llist_tllist$)))
  (B_llist_b_d_tllist_tllist$ (tNil$ai (terminal$ai B_d_tllist$)) (tCons$ai (thd$ai B_llist$) (ttl$ai B_llist_b_d_tllist_tllist$)))
  (B_d_tllist_b_llist_tllist$ (tNil$aj (terminal$aj B_llist$)) (tCons$aj (thd$aj B_d_tllist$) (ttl$aj B_d_tllist_b_llist_tllist$)))
  (B_d_tllist_b_d_tllist_tllist$ (tNil$ak (terminal$ak B_d_tllist$)) (tCons$ak (thd$ak B_d_tllist$) (ttl$ak B_d_tllist_b_d_tllist_tllist$)))))
(declare-fun a$ () A_llist$)
(declare-fun b$ () C$)
(declare-fun y$ () A_b_bool_fun_fun$)
(declare-fun aa$ () B_llist$)
(declare-fun ba$ () D$)
(declare-fun uu$ () A_b_prod_llist_bool_fun$)
(declare-fun ya$ () C_d_bool_fun_fun$)
(declare-fun grp$ (A_b_prod_llist_set$ A_b_prod_llist_a_llist_fun$) A_b_prod_llist_a_llist_bool_fun_fun$)
(declare-fun uua$ () A_b_prod_a_fun$)
(declare-fun uub$ () A_b_prod_b_fun$)
(declare-fun uuc$ () A_b_prod_c_d_prod_tllist_bool_fun$)
(declare-fun uud$ () C_d_prod_c_fun$)
(declare-fun uue$ () C_d_prod_d_fun$)
(declare-fun uuf$ () B_b_fun$)
(declare-fun uug$ () D_d_fun$)
(declare-fun uuh$ () A_a_fun$)
(declare-fun uui$ () C_c_fun$)
(declare-fun uuj$ (A_b_bool_fun_fun$ A_b_bool_fun_fun$) A_b_prod_a_b_prod_tllist_bool_fun$)
(declare-fun uuk$ (C_d_bool_fun_fun$ A_b_bool_fun_fun$) C_d_prod_a_b_prod_tllist_bool_fun$)
(declare-fun uul$ (C_d_bool_fun_fun$ C_d_bool_fun_fun$) C_d_prod_c_d_prod_tllist_bool_fun$)
(declare-fun uum$ (A_b_bool_fun_fun$ C_d_bool_fun_fun$) A_b_prod_c_d_prod_tllist_bool_fun$)
(declare-fun uun$ (A_b_bool_fun_fun$ B_llist_d_bool_fun_fun$) A_b_prod_b_llist_d_prod_tllist_bool_fun$)
(declare-fun uuo$ () B_llist_d_prod_b_llist_fun$)
(declare-fun uup$ () B_llist_d_prod_d_fun$)
(declare-fun uuq$ (A_b_bool_fun_fun$ A_llist_c_bool_fun_fun$) A_b_prod_a_llist_c_prod_tllist_bool_fun$)
(declare-fun uur$ () A_llist_c_prod_a_llist_fun$)
(declare-fun uus$ () A_llist_c_prod_c_fun$)
(declare-fun uut$ (C_d_bool_fun_fun$ B_llist_d_bool_fun_fun$) C_d_prod_b_llist_d_prod_tllist_bool_fun$)
(declare-fun uuu$ (C_d_bool_fun_fun$ A_llist_c_bool_fun_fun$) C_d_prod_a_llist_c_prod_tllist_bool_fun$)
(declare-fun uuv$ (B_llist_d_bool_fun_fun$ A_b_bool_fun_fun$) B_llist_d_prod_a_b_prod_tllist_bool_fun$)
(declare-fun uuw$ (B_llist_d_bool_fun_fun$ C_d_bool_fun_fun$) B_llist_d_prod_c_d_prod_tllist_bool_fun$)
(declare-fun uux$ (Bool B_llist_d_bool_fun_fun$) B_llist_d_bool_fun_fun$)
(declare-fun uuy$ (Bool A_llist_c_bool_fun_fun$) A_llist_c_bool_fun_fun$)
(declare-fun uuz$ (Bool A_b_bool_fun_fun$) A_b_bool_fun_fun$)
(declare-fun uva$ (Bool C_d_bool_fun_fun$) C_d_bool_fun_fun$)
(declare-fun uvb$ () A_llist_c_a_c_tllist_fun_fun$)
(declare-fun uvc$ (A_llist$ C$) A_llist_c_bool_fun_fun$)
(declare-fun uvd$ () A_llist_c_a_llist_c_prod_bool_fun_fun_fun$)
(declare-fun uve$ () B_llist_d_b_d_tllist_fun_fun$)
(declare-fun uvf$ (B_llist$ D$) B_llist_d_bool_fun_fun$)
(declare-fun uvg$ () B_llist_d_b_llist_d_prod_bool_fun_fun_fun$)
(declare-fun grp$a (A_b_prod_llist_set$ A_b_prod_llist_b_llist_fun$) A_b_prod_llist_b_llist_bool_fun_fun$)
(declare-fun grp$b (A_b_prod_c_d_prod_tllist_set$) A_b_prod_c_d_prod_tllist_a_c_tllist_fun_a_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun_fun$)
(declare-fun grp$c (A_b_prod_c_d_prod_tllist_set$) A_b_prod_c_d_prod_tllist_b_d_tllist_fun_a_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun_fun$)
(declare-fun grp$d (A_b_prod_a_b_prod_tllist_set$ A_b_prod_a_b_prod_tllist_a_a_tllist_fun$) A_b_prod_a_b_prod_tllist_a_a_tllist_bool_fun_fun$)
(declare-fun grp$e (A_b_prod_a_b_prod_tllist_set$ A_b_prod_a_b_prod_tllist_b_b_tllist_fun$) A_b_prod_a_b_prod_tllist_b_b_tllist_bool_fun_fun$)
(declare-fun grp$f (C_d_prod_a_b_prod_tllist_set$ C_d_prod_a_b_prod_tllist_c_a_tllist_fun$) C_d_prod_a_b_prod_tllist_c_a_tllist_bool_fun_fun$)
(declare-fun grp$g (C_d_prod_a_b_prod_tllist_set$ C_d_prod_a_b_prod_tllist_d_b_tllist_fun$) C_d_prod_a_b_prod_tllist_d_b_tllist_bool_fun_fun$)
(declare-fun grp$h (C_d_prod_c_d_prod_tllist_set$ C_d_prod_c_d_prod_tllist_c_c_tllist_fun$) C_d_prod_c_d_prod_tllist_c_c_tllist_bool_fun_fun$)
(declare-fun grp$i (C_d_prod_c_d_prod_tllist_set$ C_d_prod_c_d_prod_tllist_d_d_tllist_fun$) C_d_prod_c_d_prod_tllist_d_d_tllist_bool_fun_fun$)
(declare-fun grp$j (A_b_prod_b_llist_d_prod_tllist_set$ A_b_prod_b_llist_d_prod_tllist_a_b_llist_tllist_fun$) A_b_prod_b_llist_d_prod_tllist_a_b_llist_tllist_bool_fun_fun$)
(declare-fun grp$k (A_b_prod_b_llist_d_prod_tllist_set$) A_b_prod_b_llist_d_prod_tllist_b_d_tllist_fun_a_b_prod_b_llist_d_prod_tllist_b_d_tllist_bool_fun_fun_fun$)
(declare-fun grp$l (A_b_prod_a_llist_c_prod_tllist_set$ A_b_prod_a_llist_c_prod_tllist_a_a_llist_tllist_fun$) A_b_prod_a_llist_c_prod_tllist_a_a_llist_tllist_bool_fun_fun$)
(declare-fun grp$m (A_b_prod_a_llist_c_prod_tllist_set$ A_b_prod_a_llist_c_prod_tllist_b_c_tllist_fun$) A_b_prod_a_llist_c_prod_tllist_b_c_tllist_bool_fun_fun$)
(declare-fun grp$n (C_d_prod_b_llist_d_prod_tllist_set$ C_d_prod_b_llist_d_prod_tllist_c_b_llist_tllist_fun$) C_d_prod_b_llist_d_prod_tllist_c_b_llist_tllist_bool_fun_fun$)
(declare-fun grp$o (C_d_prod_b_llist_d_prod_tllist_set$ C_d_prod_b_llist_d_prod_tllist_d_d_tllist_fun$) C_d_prod_b_llist_d_prod_tllist_d_d_tllist_bool_fun_fun$)
(declare-fun grp$p (C_d_prod_a_llist_c_prod_tllist_set$ C_d_prod_a_llist_c_prod_tllist_c_a_llist_tllist_fun$) C_d_prod_a_llist_c_prod_tllist_c_a_llist_tllist_bool_fun_fun$)
(declare-fun grp$q (C_d_prod_a_llist_c_prod_tllist_set$ C_d_prod_a_llist_c_prod_tllist_d_c_tllist_fun$) C_d_prod_a_llist_c_prod_tllist_d_c_tllist_bool_fun_fun$)
(declare-fun grp$r (B_llist_d_prod_a_b_prod_tllist_set$ B_llist_d_prod_a_b_prod_tllist_b_llist_a_tllist_fun$) B_llist_d_prod_a_b_prod_tllist_b_llist_a_tllist_bool_fun_fun$)
(declare-fun grp$s (B_llist_d_prod_a_b_prod_tllist_set$ B_llist_d_prod_a_b_prod_tllist_d_b_tllist_fun$) B_llist_d_prod_a_b_prod_tllist_d_b_tllist_bool_fun_fun$)
(declare-fun grp$t (B_llist_d_prod_c_d_prod_tllist_set$ B_llist_d_prod_c_d_prod_tllist_b_llist_c_tllist_fun$) B_llist_d_prod_c_d_prod_tllist_b_llist_c_tllist_bool_fun_fun$)
(declare-fun grp$u (B_llist_d_prod_c_d_prod_tllist_set$ B_llist_d_prod_c_d_prod_tllist_d_d_tllist_fun$) B_llist_d_prod_c_d_prod_tllist_d_d_tllist_bool_fun_fun$)
(declare-fun grp$v (A_set$ A_b_fun$) A_b_bool_fun_fun$)
(declare-fun grp$w (C_set$ C_d_fun$) C_d_bool_fun_fun$)
(declare-fun grp$x (A_b_prod_set$ A_b_prod_a_fun$) A_b_prod_a_bool_fun_fun$)
(declare-fun grp$y (A_b_prod_set$ A_b_prod_b_fun$) A_b_prod_b_bool_fun_fun$)
(declare-fun grp$z (C_d_prod_set$ C_d_prod_c_fun$) C_d_prod_c_bool_fun_fun$)
(declare-fun lmap$ (A_b_prod_a_fun$) A_b_prod_llist_a_llist_fun$)
(declare-fun lset$ (A_b_prod_llist$) A_b_prod_set$)
(declare-fun tmap$ (A_b_prod_a_fun$) C_d_prod_c_fun_a_b_prod_c_d_prod_tllist_a_c_tllist_fun_fun$)
(declare-fun tset$ (A_b_prod_c_d_prod_tllist$) A_b_prod_set$)
(declare-fun grp$aa (C_d_prod_set$ C_d_prod_d_fun$) C_d_prod_d_bool_fun_fun$)
(declare-fun lmap$a (A_b_prod_b_fun$) A_b_prod_llist_b_llist_fun$)
(declare-fun lmap$b (A_a_b_prod_fun$ A_llist$) A_b_prod_llist$)
(declare-fun lmap$c (B_a_b_prod_fun$ B_llist$) A_b_prod_llist$)
(declare-fun lmap$d (A_b_prod_a_b_prod_fun$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun lmap$e (A_a_fun$ A_llist$) A_llist$)
(declare-fun lmap$f (A_b_fun$ A_llist$) B_llist$)
(declare-fun lmap$g (B_a_fun$ B_llist$) A_llist$)
(declare-fun lmap$h (B_b_fun$ B_llist$) B_llist$)
(declare-fun lset$a (C_d_prod_llist$) C_d_prod_set$)
(declare-fun lset$b (A_llist$) A_set$)
(declare-fun lset$c (B_llist$) B_set$)
(declare-fun tmap$a (A_b_prod_b_fun$) C_d_prod_d_fun_a_b_prod_c_d_prod_tllist_b_d_tllist_fun_fun$)
(declare-fun tmap$b (A_b_prod_a_fun$ A_b_prod_a_fun$) A_b_prod_a_b_prod_tllist_a_a_tllist_fun$)
(declare-fun tmap$c (A_a_b_prod_fun$ C_c_d_prod_fun$ A_c_tllist$) A_b_prod_c_d_prod_tllist$)
(declare-fun tmap$d (B_a_b_prod_fun$ D_c_d_prod_fun$ B_d_tllist$) A_b_prod_c_d_prod_tllist$)
(declare-fun tmap$e (A_b_prod_a_b_prod_fun$ C_d_prod_c_d_prod_fun$ A_b_prod_c_d_prod_tllist$) A_b_prod_c_d_prod_tllist$)
(declare-fun tmap$f (A_a_fun$ C_c_fun$ A_c_tllist$) A_c_tllist$)
(declare-fun tmap$g (A_b_fun$ C_d_fun$ A_c_tllist$) B_d_tllist$)
(declare-fun tmap$h (B_a_fun$ D_c_fun$ B_d_tllist$) A_c_tllist$)
(declare-fun tmap$i (B_b_fun$ D_d_fun$ B_d_tllist$) B_d_tllist$)
(declare-fun tmap$j (A_b_prod_b_fun$ A_b_prod_b_fun$) A_b_prod_a_b_prod_tllist_b_b_tllist_fun$)
(declare-fun tmap$k (C_d_prod_c_fun$ A_b_prod_a_fun$) C_d_prod_a_b_prod_tllist_c_a_tllist_fun$)
(declare-fun tmap$l (C_d_prod_d_fun$ A_b_prod_b_fun$) C_d_prod_a_b_prod_tllist_d_b_tllist_fun$)
(declare-fun tmap$m (C_d_prod_c_fun$ C_d_prod_c_fun$) C_d_prod_c_d_prod_tllist_c_c_tllist_fun$)
(declare-fun tmap$n (C_d_prod_d_fun$ C_d_prod_d_fun$) C_d_prod_c_d_prod_tllist_d_d_tllist_fun$)
(declare-fun tmap$o (A_b_prod_a_fun$ B_llist_d_prod_b_llist_fun$) A_b_prod_b_llist_d_prod_tllist_a_b_llist_tllist_fun$)
(declare-fun tmap$p (A_b_prod_b_fun$ B_llist_d_prod_d_fun$) A_b_prod_b_llist_d_prod_tllist_b_d_tllist_fun$)
(declare-fun tmap$q (A_b_prod_a_fun$ A_llist_c_prod_a_llist_fun$) A_b_prod_a_llist_c_prod_tllist_a_a_llist_tllist_fun$)
(declare-fun tmap$r (A_b_prod_b_fun$ A_llist_c_prod_c_fun$) A_b_prod_a_llist_c_prod_tllist_b_c_tllist_fun$)
(declare-fun tmap$s (C_d_prod_c_fun$ B_llist_d_prod_b_llist_fun$) C_d_prod_b_llist_d_prod_tllist_c_b_llist_tllist_fun$)
(declare-fun tmap$t (C_d_prod_d_fun$ B_llist_d_prod_d_fun$) C_d_prod_b_llist_d_prod_tllist_d_d_tllist_fun$)
(declare-fun tmap$u (C_d_prod_c_fun$ A_llist_c_prod_a_llist_fun$) C_d_prod_a_llist_c_prod_tllist_c_a_llist_tllist_fun$)
(declare-fun tmap$v (C_d_prod_d_fun$ A_llist_c_prod_c_fun$) C_d_prod_a_llist_c_prod_tllist_d_c_tllist_fun$)
(declare-fun tmap$w (B_llist_d_prod_b_llist_fun$ A_b_prod_a_fun$) B_llist_d_prod_a_b_prod_tllist_b_llist_a_tllist_fun$)
(declare-fun tmap$x (B_llist_d_prod_d_fun$ A_b_prod_b_fun$) B_llist_d_prod_a_b_prod_tllist_d_b_tllist_fun$)
(declare-fun tmap$y (B_llist_d_prod_b_llist_fun$ C_d_prod_c_fun$) B_llist_d_prod_c_d_prod_tllist_b_llist_c_tllist_fun$)
(declare-fun tmap$z (B_llist_d_prod_d_fun$ C_d_prod_d_fun$) B_llist_d_prod_c_d_prod_tllist_d_d_tllist_fun$)
(declare-fun tset$a (B_llist_d_prod_c_d_prod_tllist$) B_llist_d_prod_set$)
(declare-fun tset$b (B_llist_d_prod_a_b_prod_tllist$) B_llist_d_prod_set$)
(declare-fun tset$c (C_d_prod_b_llist_d_prod_tllist$) C_d_prod_set$)
(declare-fun tset$d (C_d_prod_a_llist_c_prod_tllist$) C_d_prod_set$)
(declare-fun tset$e (C_d_prod_c_d_prod_tllist$) C_d_prod_set$)
(declare-fun tset$f (C_d_prod_a_b_prod_tllist$) C_d_prod_set$)
(declare-fun tset$g (A_b_prod_b_llist_d_prod_tllist$) A_b_prod_set$)
(declare-fun tset$h (A_b_prod_a_llist_c_prod_tllist$) A_b_prod_set$)
(declare-fun tset$i (A_b_prod_a_b_prod_tllist$) A_b_prod_set$)
(declare-fun tset$j (A_c_tllist$) A_set$)
(declare-fun tset$k (B_d_tllist$) B_set$)
(declare-fun member$ (B$ B_set$) Bool)
(declare-fun collect$ (A_b_prod_bool_fun$) A_b_prod_set$)
(declare-fun fun_app$ (A_b_prod_c_d_prod_tllist_bool_fun$ A_b_prod_c_d_prod_tllist$) Bool)
(declare-fun less_eq$ (A_b_prod_set$ A_b_prod_set$) Bool)
(declare-fun lfinite$ (B_llist$) Bool)
(declare-fun member$a (D$ D_set$) Bool)
(declare-fun member$b (A$ A_set$) Bool)
(declare-fun member$c (C$ C_set$) Bool)
(declare-fun member$d (A_b_prod$ A_b_prod_set$) Bool)
(declare-fun member$e (C_d_prod$ C_d_prod_set$) Bool)
(declare-fun member$f (A_b_prod_llist_a_llist_prod$ A_b_prod_llist_a_llist_prod_set$) Bool)
(declare-fun member$g (A_b_prod_llist$ A_b_prod_llist_set$) Bool)
(declare-fun member$h (A_b_prod_llist_b_llist_prod$ A_b_prod_llist_b_llist_prod_set$) Bool)
(declare-fun member$i (A_b_prod_c_d_prod_tllist_a_c_tllist_prod$ A_b_prod_c_d_prod_tllist_a_c_tllist_prod_set$) Bool)
(declare-fun member$j (A_b_prod_c_d_prod_tllist$ A_b_prod_c_d_prod_tllist_set$) Bool)
(declare-fun member$k (A_b_prod_c_d_prod_tllist_b_d_tllist_prod$ A_b_prod_c_d_prod_tllist_b_d_tllist_prod_set$) Bool)
(declare-fun collect$a (C_d_prod_bool_fun$) C_d_prod_set$)
(declare-fun collect$b (B_llist_d_prod_bool_fun$) B_llist_d_prod_set$)
(declare-fun collect$c (A_llist_c_prod_bool_fun$) A_llist_c_prod_set$)
(declare-fun collect$d (A_b_prod_llist_bool_fun$) A_b_prod_llist_set$)
(declare-fun collect$e (A_b_prod_c_d_prod_tllist_bool_fun$) A_b_prod_c_d_prod_tllist_set$)
(declare-fun collect$f (A_b_prod_a_b_prod_tllist_bool_fun$) A_b_prod_a_b_prod_tllist_set$)
(declare-fun collect$g (C_d_prod_a_b_prod_tllist_bool_fun$) C_d_prod_a_b_prod_tllist_set$)
(declare-fun collect$h (C_d_prod_c_d_prod_tllist_bool_fun$) C_d_prod_c_d_prod_tllist_set$)
(declare-fun collect$i (A_b_prod_b_llist_d_prod_tllist_bool_fun$) A_b_prod_b_llist_d_prod_tllist_set$)
(declare-fun collect$j (A_b_prod_a_llist_c_prod_tllist_bool_fun$) A_b_prod_a_llist_c_prod_tllist_set$)
(declare-fun collect$k (C_d_prod_b_llist_d_prod_tllist_bool_fun$) C_d_prod_b_llist_d_prod_tllist_set$)
(declare-fun collect$l (C_d_prod_a_llist_c_prod_tllist_bool_fun$) C_d_prod_a_llist_c_prod_tllist_set$)
(declare-fun collect$m (B_llist_d_prod_a_b_prod_tllist_bool_fun$) B_llist_d_prod_a_b_prod_tllist_set$)
(declare-fun collect$n (B_llist_d_prod_c_d_prod_tllist_bool_fun$) B_llist_d_prod_c_d_prod_tllist_set$)
(declare-fun collect$o (A_b_prod_llist_a_llist_prod_bool_fun$) A_b_prod_llist_a_llist_prod_set$)
(declare-fun collect$p (A_b_prod_llist_b_llist_prod_bool_fun$) A_b_prod_llist_b_llist_prod_set$)
(declare-fun collect$q (A_b_prod_c_d_prod_tllist_a_c_tllist_prod_bool_fun$) A_b_prod_c_d_prod_tllist_a_c_tllist_prod_set$)
(declare-fun collect$r (A_b_prod_c_d_prod_tllist_b_d_tllist_prod_bool_fun$) A_b_prod_c_d_prod_tllist_b_d_tllist_prod_set$)
(declare-fun fun_app$a (A_b_prod_llist_bool_fun$ A_b_prod_llist$) Bool)
(declare-fun fun_app$b (B_llist_d_prod_d_fun$ B_llist_d_prod$) D$)
(declare-fun fun_app$c (A_llist_c_prod_c_fun$ A_llist_c_prod$) C$)
(declare-fun fun_app$d (C_d_prod_d_fun$ C_d_prod$) D$)
(declare-fun fun_app$e (A_b_prod_b_fun$ A_b_prod$) B$)
(declare-fun fun_app$f (B_llist_d_prod_b_llist_fun$ B_llist_d_prod$) B_llist$)
(declare-fun fun_app$g (A_llist_c_prod_a_llist_fun$ A_llist_c_prod$) A_llist$)
(declare-fun fun_app$h (C_d_prod_c_fun$ C_d_prod$) C$)
(declare-fun fun_app$i (A_b_prod_a_fun$ A_b_prod$) A$)
(declare-fun fun_app$j (D_b_d_tllist_fun$ D$) B_d_tllist$)
(declare-fun fun_app$k (B_llist_d_b_d_tllist_fun_fun$ B_llist$) D_b_d_tllist_fun$)
(declare-fun fun_app$l (C_a_c_tllist_fun$ C$) A_c_tllist$)
(declare-fun fun_app$m (A_llist_c_a_c_tllist_fun_fun$ A_llist$) C_a_c_tllist_fun$)
(declare-fun fun_app$n (D_b_llist_d_prod_bool_fun_fun$ D$) B_llist_d_prod_bool_fun$)
(declare-fun fun_app$o (B_llist_d_b_llist_d_prod_bool_fun_fun_fun$ B_llist$) D_b_llist_d_prod_bool_fun_fun$)
(declare-fun fun_app$p (C_a_llist_c_prod_bool_fun_fun$ C$) A_llist_c_prod_bool_fun$)
(declare-fun fun_app$q (A_llist_c_a_llist_c_prod_bool_fun_fun_fun$ A_llist$) C_a_llist_c_prod_bool_fun_fun$)
(declare-fun fun_app$r (B_llist_d_prod_c_d_prod_tllist_bool_fun$ B_llist_d_prod_c_d_prod_tllist$) Bool)
(declare-fun fun_app$s (B_llist_d_prod_a_b_prod_tllist_bool_fun$ B_llist_d_prod_a_b_prod_tllist$) Bool)
(declare-fun fun_app$t (C_d_prod_b_llist_d_prod_tllist_bool_fun$ C_d_prod_b_llist_d_prod_tllist$) Bool)
(declare-fun fun_app$u (C_d_prod_a_llist_c_prod_tllist_bool_fun$ C_d_prod_a_llist_c_prod_tllist$) Bool)
(declare-fun fun_app$v (C_d_prod_c_d_prod_tllist_bool_fun$ C_d_prod_c_d_prod_tllist$) Bool)
(declare-fun fun_app$w (C_d_prod_a_b_prod_tllist_bool_fun$ C_d_prod_a_b_prod_tllist$) Bool)
(declare-fun fun_app$x (A_b_prod_b_llist_d_prod_tllist_bool_fun$ A_b_prod_b_llist_d_prod_tllist$) Bool)
(declare-fun fun_app$y (A_b_prod_a_llist_c_prod_tllist_bool_fun$ A_b_prod_a_llist_c_prod_tllist$) Bool)
(declare-fun fun_app$z (A_b_prod_a_b_prod_tllist_bool_fun$ A_b_prod_a_b_prod_tllist$) Bool)
(declare-fun less_eq$a (C_d_prod_set$ C_d_prod_set$) Bool)
(declare-fun less_eq$b (B_llist_d_prod_set$ B_llist_d_prod_set$) Bool)
(declare-fun less_eq$c (A_llist_c_prod_set$ A_llist_c_prod_set$) Bool)
(declare-fun lfinite$a (A_llist$) Bool)
(declare-fun lfinite$b (A_b_prod_llist$) Bool)
(declare-fun relcompp$ (A_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist_b_llist_bool_fun_fun$) A_llist_b_llist_bool_fun_fun$)
(declare-fun case_prod$ (A_b_bool_fun_fun$) A_b_prod_bool_fun$)
(declare-fun conversep$ (A_b_prod_llist_a_llist_bool_fun_fun$) A_llist_a_b_prod_llist_bool_fun_fun$)
(declare-fun fun_app$aa (D_bool_fun$ D$) Bool)
(declare-fun fun_app$ab (B_llist_d_bool_fun_fun$ B_llist$) D_bool_fun$)
(declare-fun fun_app$ac (C_bool_fun$ C$) Bool)
(declare-fun fun_app$ad (A_llist_c_bool_fun_fun$ A_llist$) C_bool_fun$)
(declare-fun fun_app$ae (C_d_bool_fun_fun$ C$) D_bool_fun$)
(declare-fun fun_app$af (B_bool_fun$ B$) Bool)
(declare-fun fun_app$ag (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$ah (D_d_fun$ D$) D$)
(declare-fun fun_app$ai (C_c_fun$ C$) C$)
(declare-fun fun_app$aj (B_b_fun$ B$) B$)
(declare-fun fun_app$ak (A_a_fun$ A$) A$)
(declare-fun fun_app$al (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun fun_app$am (A_llist_b_llist_bool_fun_fun$ A_llist$) B_llist_bool_fun$)
(declare-fun fun_app$an (B_d_tllist_bool_fun$ B_d_tllist$) Bool)
(declare-fun fun_app$ao (A_c_tllist_b_d_tllist_bool_fun_fun$ A_c_tllist$) B_d_tllist_bool_fun$)
(declare-fun fun_app$ap (A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun_a_c_tllist_b_d_tllist_bool_fun_fun_fun$ A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun$) A_c_tllist_b_d_tllist_bool_fun_fun$)
(declare-fun fun_app$aq (A_b_prod_c_d_prod_tllist_a_c_tllist_fun_a_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun_fun$ A_b_prod_c_d_prod_tllist_a_c_tllist_fun$) A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$)
(declare-fun fun_app$ar (C_d_prod_c_fun_a_b_prod_c_d_prod_tllist_a_c_tllist_fun_fun$ C_d_prod_c_fun$) A_b_prod_c_d_prod_tllist_a_c_tllist_fun$)
(declare-fun fun_app$as (A_b_prod_c_d_prod_tllist_b_d_tllist_fun_a_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun_fun$ A_b_prod_c_d_prod_tllist_b_d_tllist_fun$) A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun$)
(declare-fun fun_app$at (C_d_prod_d_fun_a_b_prod_c_d_prod_tllist_b_d_tllist_fun_fun$ C_d_prod_d_fun$) A_b_prod_c_d_prod_tllist_b_d_tllist_fun$)
(declare-fun fun_app$au (A_b_prod_a_b_prod_tllist_a_a_tllist_fun$ A_b_prod_a_b_prod_tllist$) A_a_tllist$)
(declare-fun fun_app$av (A_b_prod_llist_a_llist_fun$ A_b_prod_llist$) A_llist$)
(declare-fun fun_app$aw (C_c_d_prod_fun$ C$) C_d_prod$)
(declare-fun fun_app$ax (D_c_d_prod_fun$ D$) C_d_prod$)
(declare-fun fun_app$ay (C_d_prod_c_d_prod_fun$ C_d_prod$) C_d_prod$)
(declare-fun fun_app$az (A_b_prod_c_d_prod_tllist_a_c_tllist_fun$ A_b_prod_c_d_prod_tllist$) A_c_tllist$)
(declare-fun fun_app$ba (A_b_prod_c_d_prod_tllist_b_d_tllist_fun$ A_b_prod_c_d_prod_tllist$) B_d_tllist$)
(declare-fun fun_app$bb (A_b_prod_llist_b_llist_fun$ A_b_prod_llist$) B_llist$)
(declare-fun fun_app$bc (C_d_fun$ C$) D$)
(declare-fun fun_app$bd (D_c_fun$ D$) C$)
(declare-fun fun_app$be (B_a_fun$ B$) A$)
(declare-fun fun_app$bf (A_b_fun$ A$) B$)
(declare-fun fun_app$bg (C_d_bool_fun_fun_a_c_tllist_b_d_tllist_bool_fun_fun_fun$ C_d_bool_fun_fun$) A_c_tllist_b_d_tllist_bool_fun_fun$)
(declare-fun fun_app$bh (B_llist_d_bool_fun_fun_a_b_llist_tllist_b_d_tllist_bool_fun_fun_fun$ B_llist_d_bool_fun_fun$) A_b_llist_tllist_b_d_tllist_bool_fun_fun$)
(declare-fun fun_app$bi (A_b_prod_b_llist_d_prod_tllist_b_d_tllist_bool_fun_fun_a_b_llist_tllist_b_d_tllist_bool_fun_fun_fun$ A_b_prod_b_llist_d_prod_tllist_b_d_tllist_bool_fun_fun$) A_b_llist_tllist_b_d_tllist_bool_fun_fun$)
(declare-fun fun_app$bj (A_b_prod_b_llist_d_prod_tllist_b_d_tllist_fun_a_b_prod_b_llist_d_prod_tllist_b_d_tllist_bool_fun_fun_fun$ A_b_prod_b_llist_d_prod_tllist_b_d_tllist_fun$) A_b_prod_b_llist_d_prod_tllist_b_d_tllist_bool_fun_fun$)
(declare-fun fun_app$bk (B_llist_d_prod_bool_fun$ B_llist_d_prod$) Bool)
(declare-fun fun_app$bl (A_llist_c_prod_bool_fun$ A_llist_c_prod$) Bool)
(declare-fun fun_app$bm (A_b_prod_bool_fun$ A_b_prod$) Bool)
(declare-fun fun_app$bn (C_d_prod_bool_fun$ C_d_prod$) Bool)
(declare-fun fun_app$bo (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$bp (C_a_llist_bool_fun_fun$ C$) A_llist_bool_fun$)
(declare-fun fun_app$bq (A_c_tllist_bool_fun$ A_c_tllist$) Bool)
(declare-fun fun_app$br (Bool_bool_fun$ Bool) Bool)
(declare-fun fun_app$bs (A_llist_c_prod_bool_fun_bool_fun$ A_llist_c_prod_bool_fun$) Bool)
(declare-fun fun_app$bt (A_bool_fun$ A$) Bool)
(declare-fun fun_app$bu (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$bv (D_c_bool_fun_fun$ D$) C_bool_fun$)
(declare-fun fun_app$bw (A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun_b_d_tllist_a_c_tllist_bool_fun_fun_fun$ A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$) B_d_tllist_a_c_tllist_bool_fun_fun$)
(declare-fun fun_app$bx (A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun_b_d_tllist_b_d_tllist_bool_fun_fun_fun$ A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun$) B_d_tllist_b_d_tllist_bool_fun_fun$)
(declare-fun fun_app$by (A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun_a_c_tllist_a_c_tllist_bool_fun_fun_fun$ A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$) A_c_tllist_a_c_tllist_bool_fun_fun$)
(declare-fun fun_app$bz (A_llist_a_b_prod_llist_bool_fun_fun$ A_llist$) A_b_prod_llist_bool_fun$)
(declare-fun fun_app$ca (A_b_prod_llist_a_llist_bool_fun_fun$ A_b_prod_llist$) A_llist_bool_fun$)
(declare-fun fun_app$cb (A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$ A_c_tllist$) A_b_prod_c_d_prod_tllist_bool_fun$)
(declare-fun fun_app$cc (A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$ A_b_prod_c_d_prod_tllist$) A_c_tllist_bool_fun$)
(declare-fun fun_app$cd (A_b_prod_llist_a_b_prod_llist_tllist_bool_fun$ A_b_prod_llist_a_b_prod_llist_tllist$) Bool)
(declare-fun fun_app$ce (A_llist_a_llist_tllist_a_b_prod_llist_a_b_prod_llist_tllist_bool_fun_fun$ A_llist_a_llist_tllist$) A_b_prod_llist_a_b_prod_llist_tllist_bool_fun$)
(declare-fun fun_app$cf (A_llist_a_llist_tllist_bool_fun$ A_llist_a_llist_tllist$) Bool)
(declare-fun fun_app$cg (A_b_prod_llist_a_b_prod_llist_tllist_a_llist_a_llist_tllist_bool_fun_fun$ A_b_prod_llist_a_b_prod_llist_tllist$) A_llist_a_llist_tllist_bool_fun$)
(declare-fun fun_app$ch (A_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist_bool_fun$ A_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist$) Bool)
(declare-fun fun_app$ci (A_llist_a_c_tllist_tllist_a_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist_bool_fun_fun$ A_llist_a_c_tllist_tllist$) A_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist_bool_fun$)
(declare-fun fun_app$cj (A_llist_a_c_tllist_tllist_bool_fun$ A_llist_a_c_tllist_tllist$) Bool)
(declare-fun fun_app$ck (A_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist_a_llist_a_c_tllist_tllist_bool_fun_fun$ A_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist$) A_llist_a_c_tllist_tllist_bool_fun$)
(declare-fun fun_app$cl (A_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist_bool_fun$ A_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist$) Bool)
(declare-fun fun_app$cm (A_c_tllist_a_llist_tllist_a_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist_bool_fun_fun$ A_c_tllist_a_llist_tllist$) A_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist_bool_fun$)
(declare-fun fun_app$cn (A_c_tllist_a_llist_tllist_bool_fun$ A_c_tllist_a_llist_tllist$) Bool)
(declare-fun fun_app$co (A_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist_a_c_tllist_a_llist_tllist_bool_fun_fun$ A_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist$) A_c_tllist_a_llist_tllist_bool_fun$)
(declare-fun fun_app$cp (A_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist_bool_fun$ A_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist$) Bool)
(declare-fun fun_app$cq (A_c_tllist_a_c_tllist_tllist_a_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist_bool_fun_fun$ A_c_tllist_a_c_tllist_tllist$) A_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist_bool_fun$)
(declare-fun fun_app$cr (A_c_tllist_a_c_tllist_tllist_bool_fun$ A_c_tllist_a_c_tllist_tllist$) Bool)
(declare-fun fun_app$cs (A_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist_a_c_tllist_a_c_tllist_tllist_bool_fun_fun$ A_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist$) A_c_tllist_a_c_tllist_tllist_bool_fun$)
(declare-fun fun_app$ct (A_b_prod_a_b_prod_bool_fun_fun$ A_b_prod$) A_b_prod_bool_fun$)
(declare-fun fun_app$cu (C_d_prod_c_d_prod_bool_fun_fun$ C_d_prod$) C_d_prod_bool_fun$)
(declare-fun fun_app$cv (C_d_prod_d_bool_fun_fun_a_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun_fun$ C_d_prod_d_bool_fun_fun$) A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun$)
(declare-fun fun_app$cw (C_d_prod_c_bool_fun_fun_a_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun_fun$ C_d_prod_c_bool_fun_fun$) A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$)
(declare-fun relcompp$a (A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$) A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun_a_c_tllist_b_d_tllist_bool_fun_fun_fun$)
(declare-fun relcompp$b (A_a_tllist_a_b_prod_a_b_prod_tllist_bool_fun_fun$ A_b_prod_a_b_prod_tllist_b_b_tllist_bool_fun_fun$) A_a_tllist_b_b_tllist_bool_fun_fun$)
(declare-fun relcompp$c (C_a_tllist_c_d_prod_a_b_prod_tllist_bool_fun_fun$ C_d_prod_a_b_prod_tllist_d_b_tllist_bool_fun_fun$) C_a_tllist_d_b_tllist_bool_fun_fun$)
(declare-fun relcompp$d (C_c_tllist_c_d_prod_c_d_prod_tllist_bool_fun_fun$ C_d_prod_c_d_prod_tllist_d_d_tllist_bool_fun_fun$) C_c_tllist_d_d_tllist_bool_fun_fun$)
(declare-fun relcompp$e (A_b_llist_tllist_a_b_prod_b_llist_d_prod_tllist_bool_fun_fun$) A_b_prod_b_llist_d_prod_tllist_b_d_tllist_bool_fun_fun_a_b_llist_tllist_b_d_tllist_bool_fun_fun_fun$)
(declare-fun relcompp$f (A_a_llist_tllist_a_b_prod_a_llist_c_prod_tllist_bool_fun_fun$ A_b_prod_a_llist_c_prod_tllist_b_c_tllist_bool_fun_fun$) A_a_llist_tllist_b_c_tllist_bool_fun_fun$)
(declare-fun relcompp$g (C_b_llist_tllist_c_d_prod_b_llist_d_prod_tllist_bool_fun_fun$ C_d_prod_b_llist_d_prod_tllist_d_d_tllist_bool_fun_fun$) C_b_llist_tllist_d_d_tllist_bool_fun_fun$)
(declare-fun relcompp$h (C_a_llist_tllist_c_d_prod_a_llist_c_prod_tllist_bool_fun_fun$ C_d_prod_a_llist_c_prod_tllist_d_c_tllist_bool_fun_fun$) C_a_llist_tllist_d_c_tllist_bool_fun_fun$)
(declare-fun relcompp$i (B_llist_a_tllist_b_llist_d_prod_a_b_prod_tllist_bool_fun_fun$ B_llist_d_prod_a_b_prod_tllist_d_b_tllist_bool_fun_fun$) B_llist_a_tllist_d_b_tllist_bool_fun_fun$)
(declare-fun relcompp$j (B_llist_c_tllist_b_llist_d_prod_c_d_prod_tllist_bool_fun_fun$ B_llist_d_prod_c_d_prod_tllist_d_d_tllist_bool_fun_fun$) B_llist_c_tllist_d_d_tllist_bool_fun_fun$)
(declare-fun relcompp$k (B_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist_a_llist_bool_fun_fun$) B_llist_a_llist_bool_fun_fun$)
(declare-fun relcompp$l (B_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist_b_llist_bool_fun_fun$) B_llist_b_llist_bool_fun_fun$)
(declare-fun relcompp$m (B_d_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$) A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun_b_d_tllist_a_c_tllist_bool_fun_fun_fun$)
(declare-fun relcompp$n (B_d_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$) A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun_b_d_tllist_b_d_tllist_bool_fun_fun_fun$)
(declare-fun relcompp$o (A_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist_a_llist_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun relcompp$p (A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$) A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun_a_c_tllist_a_c_tllist_bool_fun_fun_fun$)
(declare-fun relcompp$q (A_a_b_prod_bool_fun_fun$ A_b_prod_b_bool_fun_fun$) A_b_bool_fun_fun$)
(declare-fun relcompp$r (C_c_d_prod_bool_fun_fun$ C_d_prod_d_bool_fun_fun$) C_d_bool_fun_fun$)
(declare-fun relcompp$s (A_llist_a_llist_tllist_a_b_prod_llist_a_b_prod_llist_tllist_bool_fun_fun$ A_b_prod_llist_a_b_prod_llist_tllist_b_llist_b_llist_tllist_bool_fun_fun$) A_llist_a_llist_tllist_b_llist_b_llist_tllist_bool_fun_fun$)
(declare-fun relcompp$t (A_llist_a_c_tllist_tllist_a_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist_bool_fun_fun$ A_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist_b_llist_b_d_tllist_tllist_bool_fun_fun$) A_llist_a_c_tllist_tllist_b_llist_b_d_tllist_tllist_bool_fun_fun$)
(declare-fun relcompp$u (A_c_tllist_a_llist_tllist_a_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist_bool_fun_fun$ A_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist_b_d_tllist_b_llist_tllist_bool_fun_fun$) A_c_tllist_a_llist_tllist_b_d_tllist_b_llist_tllist_bool_fun_fun$)
(declare-fun relcompp$v (A_c_tllist_a_c_tllist_tllist_a_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist_bool_fun_fun$ A_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist_b_d_tllist_b_d_tllist_tllist_bool_fun_fun$) A_c_tllist_a_c_tllist_tllist_b_d_tllist_b_d_tllist_tllist_bool_fun_fun$)
(declare-fun case_prod$a (C_d_bool_fun_fun$) C_d_prod_bool_fun$)
(declare-fun case_prod$b (B_llist_d_bool_fun_fun$) B_llist_d_prod_bool_fun$)
(declare-fun case_prod$c (A_llist_c_bool_fun_fun$) A_llist_c_prod_bool_fun$)
(declare-fun case_prod$d (B_llist_d_b_llist_d_prod_bool_fun_fun_fun$ B_llist_d_prod$) B_llist_d_prod_bool_fun$)
(declare-fun case_prod$e (A_llist_c_a_c_tllist_fun_fun$ A_llist_c_prod$) A_c_tllist$)
(declare-fun case_prod$f (A_llist_c_a_llist_c_prod_bool_fun_fun_fun$ A_llist_c_prod$) A_llist_c_prod_bool_fun$)
(declare-fun case_prod$g (A_b_prod_llist_a_llist_bool_fun_fun$) A_b_prod_llist_a_llist_prod_bool_fun$)
(declare-fun case_prod$h (A_b_prod_llist_b_llist_bool_fun_fun$) A_b_prod_llist_b_llist_prod_bool_fun$)
(declare-fun case_prod$i (A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$) A_b_prod_c_d_prod_tllist_a_c_tllist_prod_bool_fun$)
(declare-fun case_prod$j (A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun$) A_b_prod_c_d_prod_tllist_b_d_tllist_prod_bool_fun$)
(declare-fun case_prod$k (B_llist_d_b_d_tllist_fun_fun$ B_llist_d_prod$) B_d_tllist$)
(declare-fun conversep$a (A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$) A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$)
(declare-fun conversep$b (A_b_prod_a_b_prod_tllist_a_a_tllist_bool_fun_fun$) A_a_tllist_a_b_prod_a_b_prod_tllist_bool_fun_fun$)
(declare-fun conversep$c (C_d_prod_a_b_prod_tllist_c_a_tllist_bool_fun_fun$) C_a_tllist_c_d_prod_a_b_prod_tllist_bool_fun_fun$)
(declare-fun conversep$d (C_d_prod_c_d_prod_tllist_c_c_tllist_bool_fun_fun$) C_c_tllist_c_d_prod_c_d_prod_tllist_bool_fun_fun$)
(declare-fun conversep$e (A_b_prod_b_llist_d_prod_tllist_a_b_llist_tllist_bool_fun_fun$) A_b_llist_tllist_a_b_prod_b_llist_d_prod_tllist_bool_fun_fun$)
(declare-fun conversep$f (A_b_prod_a_llist_c_prod_tllist_a_a_llist_tllist_bool_fun_fun$) A_a_llist_tllist_a_b_prod_a_llist_c_prod_tllist_bool_fun_fun$)
(declare-fun conversep$g (C_d_prod_b_llist_d_prod_tllist_c_b_llist_tllist_bool_fun_fun$) C_b_llist_tllist_c_d_prod_b_llist_d_prod_tllist_bool_fun_fun$)
(declare-fun conversep$h (C_d_prod_a_llist_c_prod_tllist_c_a_llist_tllist_bool_fun_fun$) C_a_llist_tllist_c_d_prod_a_llist_c_prod_tllist_bool_fun_fun$)
(declare-fun conversep$i (B_llist_d_prod_a_b_prod_tllist_b_llist_a_tllist_bool_fun_fun$) B_llist_a_tllist_b_llist_d_prod_a_b_prod_tllist_bool_fun_fun$)
(declare-fun conversep$j (B_llist_d_prod_c_d_prod_tllist_b_llist_c_tllist_bool_fun_fun$) B_llist_c_tllist_b_llist_d_prod_c_d_prod_tllist_bool_fun_fun$)
(declare-fun conversep$k (A_b_prod_llist_b_llist_bool_fun_fun$) B_llist_a_b_prod_llist_bool_fun_fun$)
(declare-fun conversep$l (A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun$) B_d_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$)
(declare-fun conversep$m (A_llist_a_b_prod_llist_bool_fun_fun$) A_b_prod_llist_a_llist_bool_fun_fun$)
(declare-fun conversep$n (A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$) A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$)
(declare-fun conversep$o (A_b_prod_a_bool_fun_fun$) A_a_b_prod_bool_fun_fun$)
(declare-fun conversep$p (C_d_prod_c_bool_fun_fun$) C_c_d_prod_bool_fun_fun$)
(declare-fun conversep$q (A_b_prod_llist_a_b_prod_llist_tllist_a_llist_a_llist_tllist_bool_fun_fun$) A_llist_a_llist_tllist_a_b_prod_llist_a_b_prod_llist_tllist_bool_fun_fun$)
(declare-fun conversep$r (A_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist_a_llist_a_c_tllist_tllist_bool_fun_fun$) A_llist_a_c_tllist_tllist_a_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist_bool_fun_fun$)
(declare-fun conversep$s (A_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist_a_c_tllist_a_llist_tllist_bool_fun_fun$) A_c_tllist_a_llist_tllist_a_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist_bool_fun_fun$)
(declare-fun conversep$t (A_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist_a_c_tllist_a_c_tllist_tllist_bool_fun_fun$) A_c_tllist_a_c_tllist_tllist_a_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist_bool_fun_fun$)
(declare-fun set2_tllist$ (A_b_prod_c_d_prod_tllist$) C_d_prod_set$)
(declare-fun tllist_all2$ (A_b_bool_fun_fun$ A_b_bool_fun_fun$) A_a_tllist_b_b_tllist_bool_fun_fun$)
(declare-fun set2_tllist$a (B_llist_d_prod_c_d_prod_tllist$) C_d_prod_set$)
(declare-fun set2_tllist$b (B_llist_d_prod_a_b_prod_tllist$) A_b_prod_set$)
(declare-fun set2_tllist$c (C_d_prod_b_llist_d_prod_tllist$) B_llist_d_prod_set$)
(declare-fun set2_tllist$d (C_d_prod_a_llist_c_prod_tllist$) A_llist_c_prod_set$)
(declare-fun set2_tllist$e (C_d_prod_c_d_prod_tllist$) C_d_prod_set$)
(declare-fun set2_tllist$f (C_d_prod_a_b_prod_tllist$) A_b_prod_set$)
(declare-fun set2_tllist$g (A_b_prod_b_llist_d_prod_tllist$) B_llist_d_prod_set$)
(declare-fun set2_tllist$h (A_b_prod_a_llist_c_prod_tllist$) A_llist_c_prod_set$)
(declare-fun set2_tllist$i (A_b_prod_a_b_prod_tllist$) A_b_prod_set$)
(declare-fun set2_tllist$j (B_d_tllist$) D_set$)
(declare-fun set2_tllist$k (A_c_tllist$) C_set$)
(declare-fun tllist_all2$a (C_d_bool_fun_fun$ A_b_bool_fun_fun$) C_a_tllist_d_b_tllist_bool_fun_fun$)
(declare-fun tllist_all2$b (C_d_bool_fun_fun$ C_d_bool_fun_fun$) C_c_tllist_d_d_tllist_bool_fun_fun$)
(declare-fun tllist_all2$c (A_b_bool_fun_fun$) C_d_bool_fun_fun_a_c_tllist_b_d_tllist_bool_fun_fun_fun$)
(declare-fun tllist_all2$d (A_b_bool_fun_fun$) B_llist_d_bool_fun_fun_a_b_llist_tllist_b_d_tllist_bool_fun_fun_fun$)
(declare-fun tllist_all2$e (A_b_bool_fun_fun$ A_llist_c_bool_fun_fun$) A_a_llist_tllist_b_c_tllist_bool_fun_fun$)
(declare-fun tllist_all2$f (C_d_bool_fun_fun$ B_llist_d_bool_fun_fun$) C_b_llist_tllist_d_d_tllist_bool_fun_fun$)
(declare-fun tllist_all2$g (C_d_bool_fun_fun$ A_llist_c_bool_fun_fun$) C_a_llist_tllist_d_c_tllist_bool_fun_fun$)
(declare-fun tllist_all2$h (B_llist_d_bool_fun_fun$ A_b_bool_fun_fun$) B_llist_a_tllist_d_b_tllist_bool_fun_fun$)
(declare-fun tllist_all2$i (B_llist_d_bool_fun_fun$ C_d_bool_fun_fun$) B_llist_c_tllist_d_d_tllist_bool_fun_fun$)
(declare-fun tllist_all2$j (A_llist_a_b_prod_llist_bool_fun_fun$ A_llist_a_b_prod_llist_bool_fun_fun$) A_llist_a_llist_tllist_a_b_prod_llist_a_b_prod_llist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$k (A_b_prod_llist_a_llist_bool_fun_fun$ A_b_prod_llist_a_llist_bool_fun_fun$) A_b_prod_llist_a_b_prod_llist_tllist_a_llist_a_llist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$l (A_llist_a_b_prod_llist_bool_fun_fun$ A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$) A_llist_a_c_tllist_tllist_a_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$m (A_b_prod_llist_a_llist_bool_fun_fun$ A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$) A_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist_a_llist_a_c_tllist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$n (A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$ A_llist_a_b_prod_llist_bool_fun_fun$) A_c_tllist_a_llist_tllist_a_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$o (A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$ A_b_prod_llist_a_llist_bool_fun_fun$) A_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist_a_c_tllist_a_llist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$p (A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$ A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$) A_c_tllist_a_c_tllist_tllist_a_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$q (A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$ A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$) A_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist_a_c_tllist_a_c_tllist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$r (A_b_prod_a_b_prod_bool_fun_fun$ C_d_prod_c_d_prod_bool_fun_fun$ A_b_prod_c_d_prod_tllist$ A_b_prod_c_d_prod_tllist$) Bool)
(declare-fun tllist_all2$s (A_a_b_prod_bool_fun_fun$ C_c_d_prod_bool_fun_fun$) A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$)
(declare-fun tllist_all2$t (A_b_prod_b_bool_fun_fun$) C_d_prod_d_bool_fun_fun_a_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun_fun$)
(declare-fun tllist_all2$u (A_llist_b_llist_bool_fun_fun$ A_llist_b_llist_bool_fun_fun$) A_llist_a_llist_tllist_b_llist_b_llist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$v (A_b_prod_llist_b_llist_bool_fun_fun$ A_b_prod_llist_b_llist_bool_fun_fun$) A_b_prod_llist_a_b_prod_llist_tllist_b_llist_b_llist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$w (A_llist_b_llist_bool_fun_fun$ A_c_tllist_b_d_tllist_bool_fun_fun$) A_llist_a_c_tllist_tllist_b_llist_b_d_tllist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$x (A_b_prod_llist_b_llist_bool_fun_fun$ A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun$) A_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist_b_llist_b_d_tllist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$y (A_c_tllist_b_d_tllist_bool_fun_fun$ A_llist_b_llist_bool_fun_fun$) A_c_tllist_a_llist_tllist_b_d_tllist_b_llist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$z (A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun$ A_b_prod_llist_b_llist_bool_fun_fun$) A_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist_b_d_tllist_b_llist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$aa (A_c_tllist_b_d_tllist_bool_fun_fun$ A_c_tllist_b_d_tllist_bool_fun_fun$) A_c_tllist_a_c_tllist_tllist_b_d_tllist_b_d_tllist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$ab (A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun$ A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun$) A_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist_b_d_tllist_b_d_tllist_tllist_bool_fun_fun$)
(declare-fun tllist_all2$ac (A_b_prod_a_bool_fun_fun$) C_d_prod_c_bool_fun_fun_a_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun_fun$)
(declare-fun tllist_of_llist$ (D$ B_llist$) B_d_tllist$)
(declare-fun tllist_of_llist$a (C$ A_llist$) A_c_tllist$)
(declare-fun tllist_of_llist$b (C_d_prod$ A_b_prod_llist$) A_b_prod_c_d_prod_tllist$)
(declare-fun tllist_of_llist$c (C_d_prod$ C_d_prod_llist$) C_d_prod_c_d_prod_tllist$)
(declare-fun tllist_of_llist$d (A_b_prod$ C_d_prod_llist$) C_d_prod_a_b_prod_tllist$)
(declare-fun tllist_of_llist$e (A_b_prod$ A_b_prod_llist$) A_b_prod_a_b_prod_tllist$)
(declare-fun tllist_of_llist$f (A$ A_llist$) A_a_tllist$)
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$)) (! (= (fun_app$ uuc$ ?v0) (and (less_eq$ (tset$ ?v0) (collect$ (case_prod$ y$))) (less_eq$a (set2_tllist$ ?v0) (collect$a (case_prod$a ya$))))) :pattern ((fun_app$ uuc$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_b_prod_llist$)) (! (= (fun_app$a uu$ ?v0) (less_eq$ (lset$ ?v0) (collect$ (case_prod$ y$)))) :pattern ((fun_app$a uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 B_llist_d_prod$)) (! (= (fun_app$b uup$ ?v0) (snd$b ?v0)) :pattern ((fun_app$b uup$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A_llist_c_prod$)) (! (= (fun_app$c uus$ ?v0) (snd$c ?v0)) :pattern ((fun_app$c uus$ ?v0)))) :named a3))
(assert (! (forall ((?v0 C_d_prod$)) (! (= (fun_app$d uue$ ?v0) (snd$a ?v0)) :pattern ((fun_app$d uue$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$e uub$ ?v0) (snd$ ?v0)) :pattern ((fun_app$e uub$ ?v0)))) :named a5))
(assert (! (forall ((?v0 B_llist_d_prod$)) (! (= (fun_app$f uuo$ ?v0) (fst$b ?v0)) :pattern ((fun_app$f uuo$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_llist_c_prod$)) (! (= (fun_app$g uur$ ?v0) (fst$c ?v0)) :pattern ((fun_app$g uur$ ?v0)))) :named a7))
(assert (! (forall ((?v0 C_d_prod$)) (! (= (fun_app$h uud$ ?v0) (fst$a ?v0)) :pattern ((fun_app$h uud$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$i uua$ ?v0) (fst$ ?v0)) :pattern ((fun_app$i uua$ ?v0)))) :named a9))
(assert (! (forall ((?v0 B_llist$) (?v1 D$)) (! (= (fun_app$j (fun_app$k uve$ ?v0) ?v1) (tllist_of_llist$ ?v1 ?v0)) :pattern ((fun_app$j (fun_app$k uve$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 C$)) (! (= (fun_app$l (fun_app$m uvb$ ?v0) ?v1) (tllist_of_llist$a ?v1 ?v0)) :pattern ((fun_app$l (fun_app$m uvb$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 B_llist$) (?v1 D$)) (! (= (fun_app$n (fun_app$o uvg$ ?v0) ?v1) (case_prod$b (uvf$ ?v0 ?v1))) :pattern ((fun_app$n (fun_app$o uvg$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 C$)) (! (= (fun_app$p (fun_app$q uvd$ ?v0) ?v1) (case_prod$c (uvc$ ?v0 ?v1))) :pattern ((fun_app$p (fun_app$q uvd$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 B_llist_d_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 B_llist_d_prod_c_d_prod_tllist$)) (! (= (fun_app$r (uuw$ ?v0 ?v1) ?v2) (and (less_eq$b (tset$a ?v2) (collect$b (case_prod$b ?v0))) (less_eq$a (set2_tllist$a ?v2) (collect$a (case_prod$a ?v1))))) :pattern ((fun_app$r (uuw$ ?v0 ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 B_llist_d_bool_fun_fun$) (?v1 A_b_bool_fun_fun$) (?v2 B_llist_d_prod_a_b_prod_tllist$)) (! (= (fun_app$s (uuv$ ?v0 ?v1) ?v2) (and (less_eq$b (tset$b ?v2) (collect$b (case_prod$b ?v0))) (less_eq$ (set2_tllist$b ?v2) (collect$ (case_prod$ ?v1))))) :pattern ((fun_app$s (uuv$ ?v0 ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 B_llist_d_bool_fun_fun$) (?v2 C_d_prod_b_llist_d_prod_tllist$)) (! (= (fun_app$t (uut$ ?v0 ?v1) ?v2) (and (less_eq$a (tset$c ?v2) (collect$a (case_prod$a ?v0))) (less_eq$b (set2_tllist$c ?v2) (collect$b (case_prod$b ?v1))))) :pattern ((fun_app$t (uut$ ?v0 ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 A_llist_c_bool_fun_fun$) (?v2 C_d_prod_a_llist_c_prod_tllist$)) (! (= (fun_app$u (uuu$ ?v0 ?v1) ?v2) (and (less_eq$a (tset$d ?v2) (collect$a (case_prod$a ?v0))) (less_eq$c (set2_tllist$d ?v2) (collect$c (case_prod$c ?v1))))) :pattern ((fun_app$u (uuu$ ?v0 ?v1) ?v2)))) :named a17))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 C_d_prod_c_d_prod_tllist$)) (! (= (fun_app$v (uul$ ?v0 ?v1) ?v2) (and (less_eq$a (tset$e ?v2) (collect$a (case_prod$a ?v0))) (less_eq$a (set2_tllist$e ?v2) (collect$a (case_prod$a ?v1))))) :pattern ((fun_app$v (uul$ ?v0 ?v1) ?v2)))) :named a18))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 A_b_bool_fun_fun$) (?v2 C_d_prod_a_b_prod_tllist$)) (! (= (fun_app$w (uuk$ ?v0 ?v1) ?v2) (and (less_eq$a (tset$f ?v2) (collect$a (case_prod$a ?v0))) (less_eq$ (set2_tllist$f ?v2) (collect$ (case_prod$ ?v1))))) :pattern ((fun_app$w (uuk$ ?v0 ?v1) ?v2)))) :named a19))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_llist_d_bool_fun_fun$) (?v2 A_b_prod_b_llist_d_prod_tllist$)) (! (= (fun_app$x (uun$ ?v0 ?v1) ?v2) (and (less_eq$ (tset$g ?v2) (collect$ (case_prod$ ?v0))) (less_eq$b (set2_tllist$g ?v2) (collect$b (case_prod$b ?v1))))) :pattern ((fun_app$x (uun$ ?v0 ?v1) ?v2)))) :named a20))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist_c_bool_fun_fun$) (?v2 A_b_prod_a_llist_c_prod_tllist$)) (! (= (fun_app$y (uuq$ ?v0 ?v1) ?v2) (and (less_eq$ (tset$h ?v2) (collect$ (case_prod$ ?v0))) (less_eq$c (set2_tllist$h ?v2) (collect$c (case_prod$c ?v1))))) :pattern ((fun_app$y (uuq$ ?v0 ?v1) ?v2)))) :named a21))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A_b_prod_c_d_prod_tllist$)) (! (= (fun_app$ (uum$ ?v0 ?v1) ?v2) (and (less_eq$ (tset$ ?v2) (collect$ (case_prod$ ?v0))) (less_eq$a (set2_tllist$ ?v2) (collect$a (case_prod$a ?v1))))) :pattern ((fun_app$ (uum$ ?v0 ?v1) ?v2)))) :named a22))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_bool_fun_fun$) (?v2 A_b_prod_a_b_prod_tllist$)) (! (= (fun_app$z (uuj$ ?v0 ?v1) ?v2) (and (less_eq$ (tset$i ?v2) (collect$ (case_prod$ ?v0))) (less_eq$ (set2_tllist$i ?v2) (collect$ (case_prod$ ?v1))))) :pattern ((fun_app$z (uuj$ ?v0 ?v1) ?v2)))) :named a23))
(assert (! (forall ((?v0 B_llist$) (?v1 D$) (?v2 B_llist$) (?v3 D$)) (! (= (fun_app$aa (fun_app$ab (uvf$ ?v0 ?v1) ?v2) ?v3) (and (= ?v0 ?v2) (=> (lfinite$ ?v2) (= ?v1 ?v3)))) :pattern ((fun_app$aa (fun_app$ab (uvf$ ?v0 ?v1) ?v2) ?v3)))) :named a24))
(assert (! (forall ((?v0 A_llist$) (?v1 C$) (?v2 A_llist$) (?v3 C$)) (! (= (fun_app$ac (fun_app$ad (uvc$ ?v0 ?v1) ?v2) ?v3) (and (= ?v0 ?v2) (=> (lfinite$a ?v2) (= ?v1 ?v3)))) :pattern ((fun_app$ac (fun_app$ad (uvc$ ?v0 ?v1) ?v2) ?v3)))) :named a25))
(assert (! (forall ((?v0 Bool) (?v1 B_llist_d_bool_fun_fun$) (?v2 B_llist$) (?v3 D$)) (! (= (fun_app$aa (fun_app$ab (uux$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$aa (fun_app$ab ?v1 ?v2) ?v3))) :pattern ((fun_app$aa (fun_app$ab (uux$ ?v0 ?v1) ?v2) ?v3)))) :named a26))
(assert (! (forall ((?v0 Bool) (?v1 A_llist_c_bool_fun_fun$) (?v2 A_llist$) (?v3 C$)) (! (= (fun_app$ac (fun_app$ad (uuy$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$ac (fun_app$ad ?v1 ?v2) ?v3))) :pattern ((fun_app$ac (fun_app$ad (uuy$ ?v0 ?v1) ?v2) ?v3)))) :named a27))
(assert (! (forall ((?v0 Bool) (?v1 C_d_bool_fun_fun$) (?v2 C$) (?v3 D$)) (! (= (fun_app$aa (fun_app$ae (uva$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$aa (fun_app$ae ?v1 ?v2) ?v3))) :pattern ((fun_app$aa (fun_app$ae (uva$ ?v0 ?v1) ?v2) ?v3)))) :named a28))
(assert (! (forall ((?v0 Bool) (?v1 A_b_bool_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$af (fun_app$ag (uuz$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$af (fun_app$ag ?v1 ?v2) ?v3))) :pattern ((fun_app$af (fun_app$ag (uuz$ ?v0 ?v1) ?v2) ?v3)))) :named a29))
(assert (! (forall ((?v0 D$)) (! (= (fun_app$ah uug$ ?v0) ?v0) :pattern ((fun_app$ah uug$ ?v0)))) :named a30))
(assert (! (forall ((?v0 C$)) (! (= (fun_app$ai uui$ ?v0) ?v0) :pattern ((fun_app$ai uui$ ?v0)))) :named a31))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$aj uuf$ ?v0) ?v0) :pattern ((fun_app$aj uuf$ ?v0)))) :named a32))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ak uuh$ ?v0) ?v0) :pattern ((fun_app$ak uuh$ ?v0)))) :named a33))
(assert (! (not (= (and (fun_app$al (fun_app$am (relcompp$ (conversep$ (grp$ (collect$d uu$) (lmap$ uua$))) (grp$a (collect$d uu$) (lmap$a uub$))) a$) aa$) (=> (lfinite$a a$) (fun_app$aa (fun_app$ae ya$ b$) ba$))) (fun_app$an (fun_app$ao (fun_app$ap (relcompp$a (conversep$a (fun_app$aq (grp$b (collect$e uuc$)) (fun_app$ar (tmap$ uua$) uud$)))) (fun_app$as (grp$c (collect$e uuc$)) (fun_app$at (tmap$a uub$) uue$))) (tllist_of_llist$a b$ a$)) (tllist_of_llist$ ba$ aa$)))) :named a34))
(assert (! (forall ((?v0 C_d_prod$) (?v1 A_b_prod_llist$) (?v2 C_d_prod$) (?v3 A_b_prod_llist$)) (= (= (tllist_of_llist$b ?v0 ?v1) (tllist_of_llist$b ?v2 ?v3)) (and (= ?v1 ?v3) (=> (lfinite$b ?v3) (= ?v0 ?v2))))) :named a35))
(assert (! (forall ((?v0 C$) (?v1 A_llist$) (?v2 C$) (?v3 A_llist$)) (= (= (tllist_of_llist$a ?v0 ?v1) (tllist_of_llist$a ?v2 ?v3)) (and (= ?v1 ?v3) (=> (lfinite$a ?v3) (= ?v0 ?v2))))) :named a36))
(assert (! (forall ((?v0 D$) (?v1 B_llist$) (?v2 D$) (?v3 B_llist$)) (= (= (tllist_of_llist$ ?v0 ?v1) (tllist_of_llist$ ?v2 ?v3)) (and (= ?v1 ?v3) (=> (lfinite$ ?v3) (= ?v0 ?v2))))) :named a37))
(assert (! (forall ((?v0 C_d_prod$) (?v1 C_d_prod_llist$)) (= (tset$e (tllist_of_llist$c ?v0 ?v1)) (lset$a ?v1))) :named a38))
(assert (! (forall ((?v0 A_b_prod$) (?v1 C_d_prod_llist$)) (= (tset$f (tllist_of_llist$d ?v0 ?v1)) (lset$a ?v1))) :named a39))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$)) (= (tset$i (tllist_of_llist$e ?v0 ?v1)) (lset$ ?v1))) :named a40))
(assert (! (forall ((?v0 C_d_prod$) (?v1 A_b_prod_llist$)) (= (tset$ (tllist_of_llist$b ?v0 ?v1)) (lset$ ?v1))) :named a41))
(assert (! (forall ((?v0 C$) (?v1 A_llist$)) (= (tset$j (tllist_of_llist$a ?v0 ?v1)) (lset$b ?v1))) :named a42))
(assert (! (forall ((?v0 D$) (?v1 B_llist$)) (= (tset$k (tllist_of_llist$ ?v0 ?v1)) (lset$c ?v1))) :named a43))
(assert (! (forall ((?v0 A_b_prod_a_fun$) (?v1 A_b_prod_a_fun$) (?v2 A_b_prod$) (?v3 A_b_prod_llist$)) (= (fun_app$au (tmap$b ?v0 ?v1) (tllist_of_llist$e ?v2 ?v3)) (tllist_of_llist$f (fun_app$i ?v1 ?v2) (fun_app$av (lmap$ ?v0) ?v3)))) :named a44))
(assert (! (forall ((?v0 A_a_b_prod_fun$) (?v1 C_c_d_prod_fun$) (?v2 C$) (?v3 A_llist$)) (= (tmap$c ?v0 ?v1 (tllist_of_llist$a ?v2 ?v3)) (tllist_of_llist$b (fun_app$aw ?v1 ?v2) (lmap$b ?v0 ?v3)))) :named a45))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 D_c_d_prod_fun$) (?v2 D$) (?v3 B_llist$)) (= (tmap$d ?v0 ?v1 (tllist_of_llist$ ?v2 ?v3)) (tllist_of_llist$b (fun_app$ax ?v1 ?v2) (lmap$c ?v0 ?v3)))) :named a46))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 C_d_prod_c_d_prod_fun$) (?v2 C_d_prod$) (?v3 A_b_prod_llist$)) (= (tmap$e ?v0 ?v1 (tllist_of_llist$b ?v2 ?v3)) (tllist_of_llist$b (fun_app$ay ?v1 ?v2) (lmap$d ?v0 ?v3)))) :named a47))
(assert (! (forall ((?v0 A_b_prod_a_fun$) (?v1 C_d_prod_c_fun$) (?v2 C_d_prod$) (?v3 A_b_prod_llist$)) (= (fun_app$az (fun_app$ar (tmap$ ?v0) ?v1) (tllist_of_llist$b ?v2 ?v3)) (tllist_of_llist$a (fun_app$h ?v1 ?v2) (fun_app$av (lmap$ ?v0) ?v3)))) :named a48))
(assert (! (forall ((?v0 A_b_prod_b_fun$) (?v1 C_d_prod_d_fun$) (?v2 C_d_prod$) (?v3 A_b_prod_llist$)) (= (fun_app$ba (fun_app$at (tmap$a ?v0) ?v1) (tllist_of_llist$b ?v2 ?v3)) (tllist_of_llist$ (fun_app$d ?v1 ?v2) (fun_app$bb (lmap$a ?v0) ?v3)))) :named a49))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_c_fun$) (?v2 C$) (?v3 A_llist$)) (= (tmap$f ?v0 ?v1 (tllist_of_llist$a ?v2 ?v3)) (tllist_of_llist$a (fun_app$ai ?v1 ?v2) (lmap$e ?v0 ?v3)))) :named a50))
(assert (! (forall ((?v0 A_b_fun$) (?v1 C_d_fun$) (?v2 C$) (?v3 A_llist$)) (= (tmap$g ?v0 ?v1 (tllist_of_llist$a ?v2 ?v3)) (tllist_of_llist$ (fun_app$bc ?v1 ?v2) (lmap$f ?v0 ?v3)))) :named a51))
(assert (! (forall ((?v0 B_a_fun$) (?v1 D_c_fun$) (?v2 D$) (?v3 B_llist$)) (= (tmap$h ?v0 ?v1 (tllist_of_llist$ ?v2 ?v3)) (tllist_of_llist$a (fun_app$bd ?v1 ?v2) (lmap$g ?v0 ?v3)))) :named a52))
(assert (! (forall ((?v0 B_b_fun$) (?v1 D_d_fun$) (?v2 D$) (?v3 B_llist$)) (= (tmap$i ?v0 ?v1 (tllist_of_llist$ ?v2 ?v3)) (tllist_of_llist$ (fun_app$ah ?v1 ?v2) (lmap$h ?v0 ?v3)))) :named a53))
(assert (! (forall ((?v0 B_d_tllist$)) (= (tmap$i uuf$ uug$ ?v0) ?v0)) :named a54))
(assert (! (forall ((?v0 A_c_tllist$)) (= (tmap$f uuh$ uui$ ?v0) ?v0)) :named a55))
(assert (! (forall ((?v0 B_d_tllist$) (?v1 B_d_tllist$) (?v2 B_b_fun$) (?v3 B_b_fun$) (?v4 D_d_fun$) (?v5 D_d_fun$)) (=> (and (forall ((?v6 B$) (?v7 B$)) (=> (and (member$ ?v6 (tset$k ?v0)) (and (member$ ?v7 (tset$k ?v1)) (= (fun_app$aj ?v2 ?v6) (fun_app$aj ?v3 ?v7)))) (= ?v6 ?v7))) (and (forall ((?v6 D$) (?v7 D$)) (=> (and (member$a ?v6 (set2_tllist$j ?v0)) (and (member$a ?v7 (set2_tllist$j ?v1)) (= (fun_app$ah ?v4 ?v6) (fun_app$ah ?v5 ?v7)))) (= ?v6 ?v7))) (= (tmap$i ?v2 ?v4 ?v0) (tmap$i ?v3 ?v5 ?v1)))) (= ?v0 ?v1))) :named a56))
(assert (! (forall ((?v0 B_d_tllist$) (?v1 B_d_tllist$) (?v2 B_a_fun$) (?v3 B_a_fun$) (?v4 D_c_fun$) (?v5 D_c_fun$)) (=> (and (forall ((?v6 B$) (?v7 B$)) (=> (and (member$ ?v6 (tset$k ?v0)) (and (member$ ?v7 (tset$k ?v1)) (= (fun_app$be ?v2 ?v6) (fun_app$be ?v3 ?v7)))) (= ?v6 ?v7))) (and (forall ((?v6 D$) (?v7 D$)) (=> (and (member$a ?v6 (set2_tllist$j ?v0)) (and (member$a ?v7 (set2_tllist$j ?v1)) (= (fun_app$bd ?v4 ?v6) (fun_app$bd ?v5 ?v7)))) (= ?v6 ?v7))) (= (tmap$h ?v2 ?v4 ?v0) (tmap$h ?v3 ?v5 ?v1)))) (= ?v0 ?v1))) :named a57))
(assert (! (forall ((?v0 A_c_tllist$) (?v1 A_c_tllist$) (?v2 A_b_fun$) (?v3 A_b_fun$) (?v4 C_d_fun$) (?v5 C_d_fun$)) (=> (and (forall ((?v6 A$) (?v7 A$)) (=> (and (member$b ?v6 (tset$j ?v0)) (and (member$b ?v7 (tset$j ?v1)) (= (fun_app$bf ?v2 ?v6) (fun_app$bf ?v3 ?v7)))) (= ?v6 ?v7))) (and (forall ((?v6 C$) (?v7 C$)) (=> (and (member$c ?v6 (set2_tllist$k ?v0)) (and (member$c ?v7 (set2_tllist$k ?v1)) (= (fun_app$bc ?v4 ?v6) (fun_app$bc ?v5 ?v7)))) (= ?v6 ?v7))) (= (tmap$g ?v2 ?v4 ?v0) (tmap$g ?v3 ?v5 ?v1)))) (= ?v0 ?v1))) :named a58))
(assert (! (forall ((?v0 A_c_tllist$) (?v1 A_c_tllist$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 C_c_fun$) (?v5 C_c_fun$)) (=> (and (forall ((?v6 A$) (?v7 A$)) (=> (and (member$b ?v6 (tset$j ?v0)) (and (member$b ?v7 (tset$j ?v1)) (= (fun_app$ak ?v2 ?v6) (fun_app$ak ?v3 ?v7)))) (= ?v6 ?v7))) (and (forall ((?v6 C$) (?v7 C$)) (=> (and (member$c ?v6 (set2_tllist$k ?v0)) (and (member$c ?v7 (set2_tllist$k ?v1)) (= (fun_app$ai ?v4 ?v6) (fun_app$ai ?v5 ?v7)))) (= ?v6 ?v7))) (= (tmap$f ?v2 ?v4 ?v0) (tmap$f ?v3 ?v5 ?v1)))) (= ?v0 ?v1))) :named a59))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_tllist$) (?v1 A_b_prod_a_b_prod_tllist$) (?v2 A_b_prod_a_fun$) (?v3 A_b_prod_a_fun$) (?v4 A_b_prod_a_fun$) (?v5 A_b_prod_a_fun$)) (=> (and (forall ((?v6 A_b_prod$) (?v7 A_b_prod$)) (=> (and (member$d ?v6 (tset$i ?v0)) (and (member$d ?v7 (tset$i ?v1)) (= (fun_app$i ?v2 ?v6) (fun_app$i ?v3 ?v7)))) (= ?v6 ?v7))) (and (forall ((?v6 A_b_prod$) (?v7 A_b_prod$)) (=> (and (member$d ?v6 (set2_tllist$i ?v0)) (and (member$d ?v7 (set2_tllist$i ?v1)) (= (fun_app$i ?v4 ?v6) (fun_app$i ?v5 ?v7)))) (= ?v6 ?v7))) (= (fun_app$au (tmap$b ?v2 ?v4) ?v0) (fun_app$au (tmap$b ?v3 ?v5) ?v1)))) (= ?v0 ?v1))) :named a60))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$) (?v1 A_b_prod_c_d_prod_tllist$) (?v2 A_b_prod_a_fun$) (?v3 A_b_prod_a_fun$) (?v4 C_d_prod_c_fun$) (?v5 C_d_prod_c_fun$)) (=> (and (forall ((?v6 A_b_prod$) (?v7 A_b_prod$)) (=> (and (member$d ?v6 (tset$ ?v0)) (and (member$d ?v7 (tset$ ?v1)) (= (fun_app$i ?v2 ?v6) (fun_app$i ?v3 ?v7)))) (= ?v6 ?v7))) (and (forall ((?v6 C_d_prod$) (?v7 C_d_prod$)) (=> (and (member$e ?v6 (set2_tllist$ ?v0)) (and (member$e ?v7 (set2_tllist$ ?v1)) (= (fun_app$h ?v4 ?v6) (fun_app$h ?v5 ?v7)))) (= ?v6 ?v7))) (= (fun_app$az (fun_app$ar (tmap$ ?v2) ?v4) ?v0) (fun_app$az (fun_app$ar (tmap$ ?v3) ?v5) ?v1)))) (= ?v0 ?v1))) :named a61))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$) (?v1 A_b_prod_c_d_prod_tllist$) (?v2 A_b_prod_b_fun$) (?v3 A_b_prod_b_fun$) (?v4 C_d_prod_d_fun$) (?v5 C_d_prod_d_fun$)) (=> (and (forall ((?v6 A_b_prod$) (?v7 A_b_prod$)) (=> (and (member$d ?v6 (tset$ ?v0)) (and (member$d ?v7 (tset$ ?v1)) (= (fun_app$e ?v2 ?v6) (fun_app$e ?v3 ?v7)))) (= ?v6 ?v7))) (and (forall ((?v6 C_d_prod$) (?v7 C_d_prod$)) (=> (and (member$e ?v6 (set2_tllist$ ?v0)) (and (member$e ?v7 (set2_tllist$ ?v1)) (= (fun_app$d ?v4 ?v6) (fun_app$d ?v5 ?v7)))) (= ?v6 ?v7))) (= (fun_app$ba (fun_app$at (tmap$a ?v2) ?v4) ?v0) (fun_app$ba (fun_app$at (tmap$a ?v3) ?v5) ?v1)))) (= ?v0 ?v1))) :named a62))
(assert (! (forall ((?v0 B_d_tllist$) (?v1 B_b_fun$) (?v2 B_b_fun$) (?v3 D_d_fun$) (?v4 D_d_fun$)) (=> (and (forall ((?v5 B$)) (=> (member$ ?v5 (tset$k ?v0)) (= (fun_app$aj ?v1 ?v5) (fun_app$aj ?v2 ?v5)))) (forall ((?v5 D$)) (=> (member$a ?v5 (set2_tllist$j ?v0)) (= (fun_app$ah ?v3 ?v5) (fun_app$ah ?v4 ?v5))))) (= (tmap$i ?v1 ?v3 ?v0) (tmap$i ?v2 ?v4 ?v0)))) :named a63))
(assert (! (forall ((?v0 B_d_tllist$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 D_c_fun$) (?v4 D_c_fun$)) (=> (and (forall ((?v5 B$)) (=> (member$ ?v5 (tset$k ?v0)) (= (fun_app$be ?v1 ?v5) (fun_app$be ?v2 ?v5)))) (forall ((?v5 D$)) (=> (member$a ?v5 (set2_tllist$j ?v0)) (= (fun_app$bd ?v3 ?v5) (fun_app$bd ?v4 ?v5))))) (= (tmap$h ?v1 ?v3 ?v0) (tmap$h ?v2 ?v4 ?v0)))) :named a64))
(assert (! (forall ((?v0 A_c_tllist$) (?v1 A_b_fun$) (?v2 A_b_fun$) (?v3 C_d_fun$) (?v4 C_d_fun$)) (=> (and (forall ((?v5 A$)) (=> (member$b ?v5 (tset$j ?v0)) (= (fun_app$bf ?v1 ?v5) (fun_app$bf ?v2 ?v5)))) (forall ((?v5 C$)) (=> (member$c ?v5 (set2_tllist$k ?v0)) (= (fun_app$bc ?v3 ?v5) (fun_app$bc ?v4 ?v5))))) (= (tmap$g ?v1 ?v3 ?v0) (tmap$g ?v2 ?v4 ?v0)))) :named a65))
(assert (! (forall ((?v0 A_c_tllist$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 C_c_fun$) (?v4 C_c_fun$)) (=> (and (forall ((?v5 A$)) (=> (member$b ?v5 (tset$j ?v0)) (= (fun_app$ak ?v1 ?v5) (fun_app$ak ?v2 ?v5)))) (forall ((?v5 C$)) (=> (member$c ?v5 (set2_tllist$k ?v0)) (= (fun_app$ai ?v3 ?v5) (fun_app$ai ?v4 ?v5))))) (= (tmap$f ?v1 ?v3 ?v0) (tmap$f ?v2 ?v4 ?v0)))) :named a66))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_tllist$) (?v1 A_b_prod_a_fun$) (?v2 A_b_prod_a_fun$) (?v3 A_b_prod_a_fun$) (?v4 A_b_prod_a_fun$)) (=> (and (forall ((?v5 A_b_prod$)) (=> (member$d ?v5 (tset$i ?v0)) (= (fun_app$i ?v1 ?v5) (fun_app$i ?v2 ?v5)))) (forall ((?v5 A_b_prod$)) (=> (member$d ?v5 (set2_tllist$i ?v0)) (= (fun_app$i ?v3 ?v5) (fun_app$i ?v4 ?v5))))) (= (fun_app$au (tmap$b ?v1 ?v3) ?v0) (fun_app$au (tmap$b ?v2 ?v4) ?v0)))) :named a67))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$) (?v1 A_b_prod_a_fun$) (?v2 A_b_prod_a_fun$) (?v3 C_d_prod_c_fun$) (?v4 C_d_prod_c_fun$)) (=> (and (forall ((?v5 A_b_prod$)) (=> (member$d ?v5 (tset$ ?v0)) (= (fun_app$i ?v1 ?v5) (fun_app$i ?v2 ?v5)))) (forall ((?v5 C_d_prod$)) (=> (member$e ?v5 (set2_tllist$ ?v0)) (= (fun_app$h ?v3 ?v5) (fun_app$h ?v4 ?v5))))) (= (fun_app$az (fun_app$ar (tmap$ ?v1) ?v3) ?v0) (fun_app$az (fun_app$ar (tmap$ ?v2) ?v4) ?v0)))) :named a68))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$) (?v1 A_b_prod_b_fun$) (?v2 A_b_prod_b_fun$) (?v3 C_d_prod_d_fun$) (?v4 C_d_prod_d_fun$)) (=> (and (forall ((?v5 A_b_prod$)) (=> (member$d ?v5 (tset$ ?v0)) (= (fun_app$e ?v1 ?v5) (fun_app$e ?v2 ?v5)))) (forall ((?v5 C_d_prod$)) (=> (member$e ?v5 (set2_tllist$ ?v0)) (= (fun_app$d ?v3 ?v5) (fun_app$d ?v4 ?v5))))) (= (fun_app$ba (fun_app$at (tmap$a ?v1) ?v3) ?v0) (fun_app$ba (fun_app$at (tmap$a ?v2) ?v4) ?v0)))) :named a69))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 C_d_prod$) (?v3 C_d_prod$)) (=> (and (= ?v0 ?v1) (=> (lfinite$b ?v1) (= ?v2 ?v3))) (= (tllist_of_llist$b ?v2 ?v0) (tllist_of_llist$b ?v3 ?v1)))) :named a70))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 C$) (?v3 C$)) (=> (and (= ?v0 ?v1) (=> (lfinite$a ?v1) (= ?v2 ?v3))) (= (tllist_of_llist$a ?v2 ?v0) (tllist_of_llist$a ?v3 ?v1)))) :named a71))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 D$) (?v3 D$)) (=> (and (= ?v0 ?v1) (=> (lfinite$ ?v1) (= ?v2 ?v3))) (= (tllist_of_llist$ ?v2 ?v0) (tllist_of_llist$ ?v3 ?v1)))) :named a72))
(assert (! (forall ((?v0 B_d_tllist$) (?v1 B_d_tllist$) (?v2 B_b_fun$) (?v3 B_b_fun$) (?v4 D_d_fun$) (?v5 D_d_fun$)) (=> (and (= ?v0 ?v1) (and (forall ((?v6 B$)) (=> (member$ ?v6 (tset$k ?v1)) (= (fun_app$aj ?v2 ?v6) (fun_app$aj ?v3 ?v6)))) (forall ((?v6 D$)) (=> (member$a ?v6 (set2_tllist$j ?v1)) (= (fun_app$ah ?v4 ?v6) (fun_app$ah ?v5 ?v6)))))) (= (tmap$i ?v2 ?v4 ?v0) (tmap$i ?v3 ?v5 ?v1)))) :named a73))
(assert (! (forall ((?v0 B_d_tllist$) (?v1 B_d_tllist$) (?v2 B_a_fun$) (?v3 B_a_fun$) (?v4 D_c_fun$) (?v5 D_c_fun$)) (=> (and (= ?v0 ?v1) (and (forall ((?v6 B$)) (=> (member$ ?v6 (tset$k ?v1)) (= (fun_app$be ?v2 ?v6) (fun_app$be ?v3 ?v6)))) (forall ((?v6 D$)) (=> (member$a ?v6 (set2_tllist$j ?v1)) (= (fun_app$bd ?v4 ?v6) (fun_app$bd ?v5 ?v6)))))) (= (tmap$h ?v2 ?v4 ?v0) (tmap$h ?v3 ?v5 ?v1)))) :named a74))
(assert (! (forall ((?v0 A_c_tllist$) (?v1 A_c_tllist$) (?v2 A_b_fun$) (?v3 A_b_fun$) (?v4 C_d_fun$) (?v5 C_d_fun$)) (=> (and (= ?v0 ?v1) (and (forall ((?v6 A$)) (=> (member$b ?v6 (tset$j ?v1)) (= (fun_app$bf ?v2 ?v6) (fun_app$bf ?v3 ?v6)))) (forall ((?v6 C$)) (=> (member$c ?v6 (set2_tllist$k ?v1)) (= (fun_app$bc ?v4 ?v6) (fun_app$bc ?v5 ?v6)))))) (= (tmap$g ?v2 ?v4 ?v0) (tmap$g ?v3 ?v5 ?v1)))) :named a75))
(assert (! (forall ((?v0 A_c_tllist$) (?v1 A_c_tllist$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 C_c_fun$) (?v5 C_c_fun$)) (=> (and (= ?v0 ?v1) (and (forall ((?v6 A$)) (=> (member$b ?v6 (tset$j ?v1)) (= (fun_app$ak ?v2 ?v6) (fun_app$ak ?v3 ?v6)))) (forall ((?v6 C$)) (=> (member$c ?v6 (set2_tllist$k ?v1)) (= (fun_app$ai ?v4 ?v6) (fun_app$ai ?v5 ?v6)))))) (= (tmap$f ?v2 ?v4 ?v0) (tmap$f ?v3 ?v5 ?v1)))) :named a76))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_tllist$) (?v1 A_b_prod_a_b_prod_tllist$) (?v2 A_b_prod_a_fun$) (?v3 A_b_prod_a_fun$) (?v4 A_b_prod_a_fun$) (?v5 A_b_prod_a_fun$)) (=> (and (= ?v0 ?v1) (and (forall ((?v6 A_b_prod$)) (=> (member$d ?v6 (tset$i ?v1)) (= (fun_app$i ?v2 ?v6) (fun_app$i ?v3 ?v6)))) (forall ((?v6 A_b_prod$)) (=> (member$d ?v6 (set2_tllist$i ?v1)) (= (fun_app$i ?v4 ?v6) (fun_app$i ?v5 ?v6)))))) (= (fun_app$au (tmap$b ?v2 ?v4) ?v0) (fun_app$au (tmap$b ?v3 ?v5) ?v1)))) :named a77))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$) (?v1 A_b_prod_c_d_prod_tllist$) (?v2 A_b_prod_a_fun$) (?v3 A_b_prod_a_fun$) (?v4 C_d_prod_c_fun$) (?v5 C_d_prod_c_fun$)) (=> (and (= ?v0 ?v1) (and (forall ((?v6 A_b_prod$)) (=> (member$d ?v6 (tset$ ?v1)) (= (fun_app$i ?v2 ?v6) (fun_app$i ?v3 ?v6)))) (forall ((?v6 C_d_prod$)) (=> (member$e ?v6 (set2_tllist$ ?v1)) (= (fun_app$h ?v4 ?v6) (fun_app$h ?v5 ?v6)))))) (= (fun_app$az (fun_app$ar (tmap$ ?v2) ?v4) ?v0) (fun_app$az (fun_app$ar (tmap$ ?v3) ?v5) ?v1)))) :named a78))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist$) (?v1 A_b_prod_c_d_prod_tllist$) (?v2 A_b_prod_b_fun$) (?v3 A_b_prod_b_fun$) (?v4 C_d_prod_d_fun$) (?v5 C_d_prod_d_fun$)) (=> (and (= ?v0 ?v1) (and (forall ((?v6 A_b_prod$)) (=> (member$d ?v6 (tset$ ?v1)) (= (fun_app$e ?v2 ?v6) (fun_app$e ?v3 ?v6)))) (forall ((?v6 C_d_prod$)) (=> (member$e ?v6 (set2_tllist$ ?v1)) (= (fun_app$d ?v4 ?v6) (fun_app$d ?v5 ?v6)))))) (= (fun_app$ba (fun_app$at (tmap$a ?v2) ?v4) ?v0) (fun_app$ba (fun_app$at (tmap$a ?v3) ?v5) ?v1)))) :named a79))
(assert (! (forall ((?v0 A_a_b_prod_fun$) (?v1 A_llist$)) (= (lfinite$b (lmap$b ?v0 ?v1)) (lfinite$a ?v1))) :named a80))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 B_llist$)) (= (lfinite$b (lmap$c ?v0 ?v1)) (lfinite$ ?v1))) :named a81))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod_llist$)) (= (lfinite$b (lmap$d ?v0 ?v1)) (lfinite$b ?v1))) :named a82))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (lfinite$ (lmap$h ?v0 ?v1)) (lfinite$ ?v1))) :named a83))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (lfinite$a (lmap$g ?v0 ?v1)) (lfinite$ ?v1))) :named a84))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (lfinite$ (lmap$f ?v0 ?v1)) (lfinite$a ?v1))) :named a85))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lfinite$a (lmap$e ?v0 ?v1)) (lfinite$a ?v1))) :named a86))
(assert (! (forall ((?v0 A_b_prod_a_fun$) (?v1 A_b_prod_llist$)) (= (lfinite$a (fun_app$av (lmap$ ?v0) ?v1)) (lfinite$b ?v1))) :named a87))
(assert (! (forall ((?v0 A_b_prod_b_fun$) (?v1 A_b_prod_llist$)) (= (lfinite$ (fun_app$bb (lmap$a ?v0) ?v1)) (lfinite$b ?v1))) :named a88))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_bool_fun_fun$)) (= (tllist_all2$ ?v0 ?v1) (relcompp$b (conversep$b (grp$d (collect$f (uuj$ ?v0 ?v1)) (tmap$b uua$ uua$))) (grp$e (collect$f (uuj$ ?v0 ?v1)) (tmap$j uub$ uub$))))) :named a89))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 A_b_bool_fun_fun$)) (= (tllist_all2$a ?v0 ?v1) (relcompp$c (conversep$c (grp$f (collect$g (uuk$ ?v0 ?v1)) (tmap$k uud$ uua$))) (grp$g (collect$g (uuk$ ?v0 ?v1)) (tmap$l uue$ uub$))))) :named a90))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 C_d_bool_fun_fun$)) (= (tllist_all2$b ?v0 ?v1) (relcompp$d (conversep$d (grp$h (collect$h (uul$ ?v0 ?v1)) (tmap$m uud$ uud$))) (grp$i (collect$h (uul$ ?v0 ?v1)) (tmap$n uue$ uue$))))) :named a91))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_d_bool_fun_fun$)) (= (fun_app$bg (tllist_all2$c ?v0) ?v1) (fun_app$ap (relcompp$a (conversep$a (fun_app$aq (grp$b (collect$e (uum$ ?v0 ?v1))) (fun_app$ar (tmap$ uua$) uud$)))) (fun_app$as (grp$c (collect$e (uum$ ?v0 ?v1))) (fun_app$at (tmap$a uub$) uue$))))) :named a92))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_llist_d_bool_fun_fun$)) (= (fun_app$bh (tllist_all2$d ?v0) ?v1) (fun_app$bi (relcompp$e (conversep$e (grp$j (collect$i (uun$ ?v0 ?v1)) (tmap$o uua$ uuo$)))) (fun_app$bj (grp$k (collect$i (uun$ ?v0 ?v1))) (tmap$p uub$ uup$))))) :named a93))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist_c_bool_fun_fun$)) (= (tllist_all2$e ?v0 ?v1) (relcompp$f (conversep$f (grp$l (collect$j (uuq$ ?v0 ?v1)) (tmap$q uua$ uur$))) (grp$m (collect$j (uuq$ ?v0 ?v1)) (tmap$r uub$ uus$))))) :named a94))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 B_llist_d_bool_fun_fun$)) (= (tllist_all2$f ?v0 ?v1) (relcompp$g (conversep$g (grp$n (collect$k (uut$ ?v0 ?v1)) (tmap$s uud$ uuo$))) (grp$o (collect$k (uut$ ?v0 ?v1)) (tmap$t uue$ uup$))))) :named a95))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 A_llist_c_bool_fun_fun$)) (= (tllist_all2$g ?v0 ?v1) (relcompp$h (conversep$h (grp$p (collect$l (uuu$ ?v0 ?v1)) (tmap$u uud$ uur$))) (grp$q (collect$l (uuu$ ?v0 ?v1)) (tmap$v uue$ uus$))))) :named a96))
(assert (! (forall ((?v0 B_llist_d_bool_fun_fun$) (?v1 A_b_bool_fun_fun$)) (= (tllist_all2$h ?v0 ?v1) (relcompp$i (conversep$i (grp$r (collect$m (uuv$ ?v0 ?v1)) (tmap$w uuo$ uua$))) (grp$s (collect$m (uuv$ ?v0 ?v1)) (tmap$x uup$ uub$))))) :named a97))
(assert (! (forall ((?v0 B_llist_d_bool_fun_fun$) (?v1 C_d_bool_fun_fun$)) (= (tllist_all2$i ?v0 ?v1) (relcompp$j (conversep$j (grp$t (collect$n (uuw$ ?v0 ?v1)) (tmap$y uuo$ uud$))) (grp$u (collect$n (uuw$ ?v0 ?v1)) (tmap$z uup$ uue$))))) :named a98))
(assert (! (forall ((?v0 B_llist$)) (= (lmap$h uuf$ ?v0) ?v0)) :named a99))
(assert (! (forall ((?v0 A_llist$)) (= (lmap$e uuh$ ?v0) ?v0)) :named a100))
(assert (! (forall ((?v0 Bool) (?v1 B_llist_d_bool_fun_fun$) (?v2 B_llist_d_prod$)) (= (fun_app$bk (case_prod$b (uux$ ?v0 ?v1)) ?v2) (and ?v0 (fun_app$bk (case_prod$b ?v1) ?v2)))) :named a101))
(assert (! (forall ((?v0 Bool) (?v1 A_llist_c_bool_fun_fun$) (?v2 A_llist_c_prod$)) (= (fun_app$bl (case_prod$c (uuy$ ?v0 ?v1)) ?v2) (and ?v0 (fun_app$bl (case_prod$c ?v1) ?v2)))) :named a102))
(assert (! (forall ((?v0 Bool) (?v1 A_b_bool_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$bm (case_prod$ (uuz$ ?v0 ?v1)) ?v2) (and ?v0 (fun_app$bm (case_prod$ ?v1) ?v2)))) :named a103))
(assert (! (forall ((?v0 Bool) (?v1 C_d_bool_fun_fun$) (?v2 C_d_prod$)) (= (fun_app$bn (case_prod$a (uva$ ?v0 ?v1)) ?v2) (and ?v0 (fun_app$bn (case_prod$a ?v1) ?v2)))) :named a104))
(assert (! (forall ((?v0 B_llist_d_bool_fun_fun$) (?v1 B_llist_d_prod$)) (! (= (fun_app$bk (case_prod$b ?v0) ?v1) (fun_app$aa (fun_app$ab ?v0 (fst$b ?v1)) (snd$b ?v1))) :pattern ((fun_app$bk (case_prod$b ?v0) ?v1)))) :named a105))
(assert (! (forall ((?v0 B_llist_d_b_llist_d_prod_bool_fun_fun_fun$) (?v1 B_llist_d_prod$)) (! (= (case_prod$d ?v0 ?v1) (fun_app$n (fun_app$o ?v0 (fst$b ?v1)) (snd$b ?v1))) :pattern ((case_prod$d ?v0 ?v1)))) :named a106))
(assert (! (forall ((?v0 A_llist_c_a_c_tllist_fun_fun$) (?v1 A_llist_c_prod$)) (! (= (case_prod$e ?v0 ?v1) (fun_app$l (fun_app$m ?v0 (fst$c ?v1)) (snd$c ?v1))) :pattern ((case_prod$e ?v0 ?v1)))) :named a107))
(assert (! (forall ((?v0 A_llist_c_bool_fun_fun$) (?v1 A_llist_c_prod$)) (! (= (fun_app$bl (case_prod$c ?v0) ?v1) (fun_app$ac (fun_app$ad ?v0 (fst$c ?v1)) (snd$c ?v1))) :pattern ((fun_app$bl (case_prod$c ?v0) ?v1)))) :named a108))
(assert (! (forall ((?v0 A_llist_c_a_llist_c_prod_bool_fun_fun_fun$) (?v1 A_llist_c_prod$)) (! (= (case_prod$f ?v0 ?v1) (fun_app$p (fun_app$q ?v0 (fst$c ?v1)) (snd$c ?v1))) :pattern ((case_prod$f ?v0 ?v1)))) :named a109))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_prod$)) (! (= (fun_app$bm (case_prod$ ?v0) ?v1) (fun_app$af (fun_app$ag ?v0 (fst$ ?v1)) (snd$ ?v1))) :pattern ((fun_app$bm (case_prod$ ?v0) ?v1)))) :named a110))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 C_d_prod$)) (! (= (fun_app$bn (case_prod$a ?v0) ?v1) (fun_app$aa (fun_app$ae ?v0 (fst$a ?v1)) (snd$a ?v1))) :pattern ((fun_app$bn (case_prod$a ?v0) ?v1)))) :named a111))
(assert (! (forall ((?v0 B_llist_d_bool_fun_fun$) (?v1 B_llist_d_prod$)) (! (= (fun_app$bk (case_prod$b ?v0) ?v1) (fun_app$aa (fun_app$ab ?v0 (fst$b ?v1)) (snd$b ?v1))) :pattern ((fun_app$bk (case_prod$b ?v0) ?v1)))) :named a112))
(assert (! (forall ((?v0 B_llist_d_b_llist_d_prod_bool_fun_fun_fun$) (?v1 B_llist_d_prod$)) (! (= (case_prod$d ?v0 ?v1) (fun_app$n (fun_app$o ?v0 (fst$b ?v1)) (snd$b ?v1))) :pattern ((case_prod$d ?v0 ?v1)))) :named a113))
(assert (! (forall ((?v0 A_llist_c_a_c_tllist_fun_fun$) (?v1 A_llist_c_prod$)) (! (= (case_prod$e ?v0 ?v1) (fun_app$l (fun_app$m ?v0 (fst$c ?v1)) (snd$c ?v1))) :pattern ((case_prod$e ?v0 ?v1)))) :named a114))
(assert (! (forall ((?v0 A_llist_c_bool_fun_fun$) (?v1 A_llist_c_prod$)) (! (= (fun_app$bl (case_prod$c ?v0) ?v1) (fun_app$ac (fun_app$ad ?v0 (fst$c ?v1)) (snd$c ?v1))) :pattern ((fun_app$bl (case_prod$c ?v0) ?v1)))) :named a115))
(assert (! (forall ((?v0 A_llist_c_a_llist_c_prod_bool_fun_fun_fun$) (?v1 A_llist_c_prod$)) (! (= (case_prod$f ?v0 ?v1) (fun_app$p (fun_app$q ?v0 (fst$c ?v1)) (snd$c ?v1))) :pattern ((case_prod$f ?v0 ?v1)))) :named a116))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_prod$)) (! (= (fun_app$bm (case_prod$ ?v0) ?v1) (fun_app$af (fun_app$ag ?v0 (fst$ ?v1)) (snd$ ?v1))) :pattern ((fun_app$bm (case_prod$ ?v0) ?v1)))) :named a117))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 C_d_prod$)) (! (= (fun_app$bn (case_prod$a ?v0) ?v1) (fun_app$aa (fun_app$ae ?v0 (fst$a ?v1)) (snd$a ?v1))) :pattern ((fun_app$bn (case_prod$a ?v0) ?v1)))) :named a118))
(assert (! (forall ((?v0 C_a_llist_bool_fun_fun$) (?v1 A_llist_c_prod$) (?v2 A_c_tllist_bool_fun$) (?v3 A_llist_c_a_c_tllist_fun_fun$)) (=> (and (fun_app$bo (fun_app$bp ?v0 (snd$c ?v1)) (fst$c ?v1)) (forall ((?v4 A_llist$) (?v5 C$)) (=> (fun_app$bo (fun_app$bp ?v0 ?v5) ?v4) (fun_app$bq ?v2 (fun_app$l (fun_app$m ?v3 ?v4) ?v5))))) (fun_app$bq ?v2 (case_prod$e ?v3 ?v1)))) :named a119))
(assert (! (forall ((?v0 C_a_llist_bool_fun_fun$) (?v1 A_llist_c_prod$) (?v2 Bool_bool_fun$) (?v3 A_llist_c_bool_fun_fun$)) (=> (and (fun_app$bo (fun_app$bp ?v0 (snd$c ?v1)) (fst$c ?v1)) (forall ((?v4 A_llist$) (?v5 C$)) (=> (fun_app$bo (fun_app$bp ?v0 ?v5) ?v4) (fun_app$br ?v2 (fun_app$ac (fun_app$ad ?v3 ?v4) ?v5))))) (fun_app$br ?v2 (fun_app$bl (case_prod$c ?v3) ?v1)))) :named a120))
(assert (! (forall ((?v0 C_a_llist_bool_fun_fun$) (?v1 A_llist_c_prod$) (?v2 A_llist_c_prod_bool_fun_bool_fun$) (?v3 A_llist_c_a_llist_c_prod_bool_fun_fun_fun$)) (=> (and (fun_app$bo (fun_app$bp ?v0 (snd$c ?v1)) (fst$c ?v1)) (forall ((?v4 A_llist$) (?v5 C$)) (=> (fun_app$bo (fun_app$bp ?v0 ?v5) ?v4) (fun_app$bs ?v2 (fun_app$p (fun_app$q ?v3 ?v4) ?v5))))) (fun_app$bs ?v2 (case_prod$f ?v3 ?v1)))) :named a121))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_b_prod$) (?v2 Bool_bool_fun$) (?v3 A_b_bool_fun_fun$)) (=> (and (fun_app$bt (fun_app$bu ?v0 (snd$ ?v1)) (fst$ ?v1)) (forall ((?v4 A$) (?v5 B$)) (=> (fun_app$bt (fun_app$bu ?v0 ?v5) ?v4) (fun_app$br ?v2 (fun_app$af (fun_app$ag ?v3 ?v4) ?v5))))) (fun_app$br ?v2 (fun_app$bm (case_prod$ ?v3) ?v1)))) :named a122))
(assert (! (forall ((?v0 D_c_bool_fun_fun$) (?v1 C_d_prod$) (?v2 Bool_bool_fun$) (?v3 C_d_bool_fun_fun$)) (=> (and (fun_app$ac (fun_app$bv ?v0 (snd$a ?v1)) (fst$a ?v1)) (forall ((?v4 C$) (?v5 D$)) (=> (fun_app$ac (fun_app$bv ?v0 ?v5) ?v4) (fun_app$br ?v2 (fun_app$aa (fun_app$ae ?v3 ?v4) ?v5))))) (fun_app$br ?v2 (fun_app$bn (case_prod$a ?v3) ?v1)))) :named a123))
(assert (! (forall ((?v0 A_b_prod_llist_set$) (?v1 A_b_prod_llist_set$) (?v2 A_b_prod_llist_b_llist_fun$) (?v3 A_b_prod_llist_a_llist_fun$)) (=> (= ?v0 ?v1) (= (relcompp$k (conversep$k (grp$a ?v0 ?v2)) (grp$ ?v0 ?v3)) (relcompp$k (conversep$k (grp$a ?v1 ?v2)) (grp$ ?v1 ?v3))))) :named a124))
(assert (! (forall ((?v0 A_b_prod_llist_set$) (?v1 A_b_prod_llist_set$) (?v2 A_b_prod_llist_b_llist_fun$) (?v3 A_b_prod_llist_b_llist_fun$)) (=> (= ?v0 ?v1) (= (relcompp$l (conversep$k (grp$a ?v0 ?v2)) (grp$a ?v0 ?v3)) (relcompp$l (conversep$k (grp$a ?v1 ?v2)) (grp$a ?v1 ?v3))))) :named a125))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist_set$) (?v1 A_b_prod_c_d_prod_tllist_set$) (?v2 A_b_prod_c_d_prod_tllist_b_d_tllist_fun$) (?v3 A_b_prod_c_d_prod_tllist_a_c_tllist_fun$)) (=> (= ?v0 ?v1) (= (fun_app$bw (relcompp$m (conversep$l (fun_app$as (grp$c ?v0) ?v2))) (fun_app$aq (grp$b ?v0) ?v3)) (fun_app$bw (relcompp$m (conversep$l (fun_app$as (grp$c ?v1) ?v2))) (fun_app$aq (grp$b ?v1) ?v3))))) :named a126))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist_set$) (?v1 A_b_prod_c_d_prod_tllist_set$) (?v2 A_b_prod_c_d_prod_tllist_b_d_tllist_fun$) (?v3 A_b_prod_c_d_prod_tllist_b_d_tllist_fun$)) (=> (= ?v0 ?v1) (= (fun_app$bx (relcompp$n (conversep$l (fun_app$as (grp$c ?v0) ?v2))) (fun_app$as (grp$c ?v0) ?v3)) (fun_app$bx (relcompp$n (conversep$l (fun_app$as (grp$c ?v1) ?v2))) (fun_app$as (grp$c ?v1) ?v3))))) :named a127))
(assert (! (forall ((?v0 A_b_prod_llist_set$) (?v1 A_b_prod_llist_set$) (?v2 A_b_prod_llist_a_llist_fun$) (?v3 A_b_prod_llist_a_llist_fun$)) (=> (= ?v0 ?v1) (= (relcompp$o (conversep$ (grp$ ?v0 ?v2)) (grp$ ?v0 ?v3)) (relcompp$o (conversep$ (grp$ ?v1 ?v2)) (grp$ ?v1 ?v3))))) :named a128))
(assert (! (forall ((?v0 A_b_prod_llist_set$) (?v1 A_b_prod_llist_set$) (?v2 A_b_prod_llist_a_llist_fun$) (?v3 A_b_prod_llist_b_llist_fun$)) (=> (= ?v0 ?v1) (= (relcompp$ (conversep$ (grp$ ?v0 ?v2)) (grp$a ?v0 ?v3)) (relcompp$ (conversep$ (grp$ ?v1 ?v2)) (grp$a ?v1 ?v3))))) :named a129))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist_set$) (?v1 A_b_prod_c_d_prod_tllist_set$) (?v2 A_b_prod_c_d_prod_tllist_a_c_tllist_fun$) (?v3 A_b_prod_c_d_prod_tllist_a_c_tllist_fun$)) (=> (= ?v0 ?v1) (= (fun_app$by (relcompp$p (conversep$a (fun_app$aq (grp$b ?v0) ?v2))) (fun_app$aq (grp$b ?v0) ?v3)) (fun_app$by (relcompp$p (conversep$a (fun_app$aq (grp$b ?v1) ?v2))) (fun_app$aq (grp$b ?v1) ?v3))))) :named a130))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist_set$) (?v1 A_b_prod_c_d_prod_tllist_set$) (?v2 A_b_prod_c_d_prod_tllist_a_c_tllist_fun$) (?v3 A_b_prod_c_d_prod_tllist_b_d_tllist_fun$)) (=> (= ?v0 ?v1) (= (fun_app$ap (relcompp$a (conversep$a (fun_app$aq (grp$b ?v0) ?v2))) (fun_app$as (grp$c ?v0) ?v3)) (fun_app$ap (relcompp$a (conversep$a (fun_app$aq (grp$b ?v1) ?v2))) (fun_app$as (grp$c ?v1) ?v3))))) :named a131))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_prod$) (?v1 A_b_prod_llist_set$) (?v2 A_b_prod_llist_a_llist_fun$)) (=> (member$f ?v0 (collect$o (case_prod$g (grp$ ?v1 ?v2)))) (member$g (fst$d ?v0) ?v1))) :named a132))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_prod$) (?v1 A_b_prod_llist_set$) (?v2 A_b_prod_llist_b_llist_fun$)) (=> (member$h ?v0 (collect$p (case_prod$h (grp$a ?v1 ?v2)))) (member$g (fst$e ?v0) ?v1))) :named a133))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist_a_c_tllist_prod$) (?v1 A_b_prod_c_d_prod_tllist_set$) (?v2 A_b_prod_c_d_prod_tllist_a_c_tllist_fun$)) (=> (member$i ?v0 (collect$q (case_prod$i (fun_app$aq (grp$b ?v1) ?v2)))) (member$j (fst$f ?v0) ?v1))) :named a134))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist_b_d_tllist_prod$) (?v1 A_b_prod_c_d_prod_tllist_set$) (?v2 A_b_prod_c_d_prod_tllist_b_d_tllist_fun$)) (=> (member$k ?v0 (collect$r (case_prod$j (fun_app$as (grp$c ?v1) ?v2)))) (member$j (fst$g ?v0) ?v1))) :named a135))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_set$) (?v2 A_b_fun$)) (=> (member$d ?v0 (collect$ (case_prod$ (grp$v ?v1 ?v2)))) (member$b (fst$ ?v0) ?v1))) :named a136))
(assert (! (forall ((?v0 C_d_prod$) (?v1 C_set$) (?v2 C_d_fun$)) (=> (member$e ?v0 (collect$a (case_prod$a (grp$w ?v1 ?v2)))) (member$c (fst$a ?v0) ?v1))) :named a137))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_bool_fun_fun$)) (=> (member$d ?v0 (collect$ (case_prod$ ?v1))) (fun_app$af (fun_app$ag ?v1 (fst$ ?v0)) (snd$ ?v0)))) :named a138))
(assert (! (forall ((?v0 C_d_prod$) (?v1 C_d_bool_fun_fun$)) (=> (member$e ?v0 (collect$a (case_prod$a ?v1))) (fun_app$aa (fun_app$ae ?v1 (fst$a ?v0)) (snd$a ?v0)))) :named a139))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_bool_fun_fun$)) (= (conversep$m (conversep$ ?v0)) ?v0)) :named a140))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$)) (= (conversep$n (conversep$a ?v0)) ?v0)) :named a141))
(assert (! (forall ((?v0 A_llist_a_b_prod_llist_bool_fun_fun$)) (= (conversep$ (conversep$m ?v0)) ?v0)) :named a142))
(assert (! (forall ((?v0 A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$)) (= (conversep$a (conversep$n ?v0)) ?v0)) :named a143))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_b_prod_llist$)) (! (= (fun_app$a (fun_app$bz (conversep$ ?v0) ?v1) ?v2) (fun_app$bo (fun_app$ca ?v0 ?v2) ?v1)) :pattern ((fun_app$a (fun_app$bz (conversep$ ?v0) ?v1) ?v2)))) :named a144))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$) (?v1 A_c_tllist$) (?v2 A_b_prod_c_d_prod_tllist$)) (! (= (fun_app$ (fun_app$cb (conversep$a ?v0) ?v1) ?v2) (fun_app$bq (fun_app$cc ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$cb (conversep$a ?v0) ?v1) ?v2)))) :named a145))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_bool_fun_fun$) (?v1 A_b_prod_llist_a_llist_bool_fun_fun$)) (= (= (conversep$ ?v0) (conversep$ ?v1)) (= ?v0 ?v1))) :named a146))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$) (?v1 A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$)) (= (= (conversep$a ?v0) (conversep$a ?v1)) (= ?v0 ?v1))) :named a147))
(assert (! (forall ((?v0 A_llist_c_prod$) (?v1 A_llist_c_prod$)) (= (= (case_prod$e uvb$ ?v0) (case_prod$e uvb$ ?v1)) (fun_app$bl (case_prod$f uvd$ ?v0) ?v1))) :named a148))
(assert (! (forall ((?v0 B_llist_d_prod$) (?v1 B_llist_d_prod$)) (= (= (case_prod$k uve$ ?v0) (case_prod$k uve$ ?v1)) (fun_app$bk (case_prod$d uvg$ ?v0) ?v1))) :named a149))
(assert (! (forall ((?v0 A_b_bool_fun_fun$)) (= (relcompp$q (conversep$o (grp$x (collect$ (case_prod$ ?v0)) uua$)) (grp$y (collect$ (case_prod$ ?v0)) uub$)) ?v0)) :named a150))
(assert (! (forall ((?v0 C_d_bool_fun_fun$)) (= (relcompp$r (conversep$p (grp$z (collect$a (case_prod$a ?v0)) uud$)) (grp$aa (collect$a (case_prod$a ?v0)) uue$)) ?v0)) :named a151))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_bool_fun_fun$) (?v1 A_b_prod_llist_a_llist_bool_fun_fun$) (?v2 A_llist_a_llist_tllist$) (?v3 A_b_prod_llist_a_b_prod_llist_tllist$)) (= (fun_app$cd (fun_app$ce (tllist_all2$j (conversep$ ?v0) (conversep$ ?v1)) ?v2) ?v3) (fun_app$cf (fun_app$cg (tllist_all2$k ?v0 ?v1) ?v3) ?v2))) :named a152))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_bool_fun_fun$) (?v1 A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$) (?v2 A_llist_a_c_tllist_tllist$) (?v3 A_b_prod_llist_a_b_prod_c_d_prod_tllist_tllist$)) (= (fun_app$ch (fun_app$ci (tllist_all2$l (conversep$ ?v0) (conversep$a ?v1)) ?v2) ?v3) (fun_app$cj (fun_app$ck (tllist_all2$m ?v0 ?v1) ?v3) ?v2))) :named a153))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$) (?v1 A_b_prod_llist_a_llist_bool_fun_fun$) (?v2 A_c_tllist_a_llist_tllist$) (?v3 A_b_prod_c_d_prod_tllist_a_b_prod_llist_tllist$)) (= (fun_app$cl (fun_app$cm (tllist_all2$n (conversep$a ?v0) (conversep$ ?v1)) ?v2) ?v3) (fun_app$cn (fun_app$co (tllist_all2$o ?v0 ?v1) ?v3) ?v2))) :named a154))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$) (?v1 A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$) (?v2 A_c_tllist_a_c_tllist_tllist$) (?v3 A_b_prod_c_d_prod_tllist_a_b_prod_c_d_prod_tllist_tllist$)) (= (fun_app$cp (fun_app$cq (tllist_all2$p (conversep$a ?v0) (conversep$a ?v1)) ?v2) ?v3) (fun_app$cr (fun_app$cs (tllist_all2$q ?v0 ?v1) ?v3) ?v2))) :named a155))
(assert (! (forall ((?v0 A_c_tllist_bool_fun$) (?v1 A_c_tllist$)) (=> (forall ((?v2 A_llist_c_prod$)) (fun_app$bq ?v0 (case_prod$e uvb$ ?v2))) (fun_app$bq ?v0 ?v1))) :named a156))
(assert (! (forall ((?v0 B_d_tllist_bool_fun$) (?v1 B_d_tllist$)) (=> (forall ((?v2 B_llist_d_prod$)) (fun_app$an ?v0 (case_prod$k uve$ ?v2))) (fun_app$an ?v0 ?v1))) :named a157))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$) (?v1 C_d_prod_c_d_prod_bool_fun_fun$) (?v2 A_b_prod_c_d_prod_tllist$) (?v3 A_b_prod_c_d_prod_tllist$) (?v4 A_b_prod_a_b_prod_bool_fun_fun$) (?v5 C_d_prod_c_d_prod_bool_fun_fun$)) (=> (and (tllist_all2$r ?v0 ?v1 ?v2 ?v3) (and (forall ((?v6 A_b_prod$) (?v7 A_b_prod$)) (=> (and (member$d ?v6 (tset$ ?v2)) (and (member$d ?v7 (tset$ ?v3)) (fun_app$bm (fun_app$ct ?v0 ?v6) ?v7))) (fun_app$bm (fun_app$ct ?v4 ?v6) ?v7))) (forall ((?v6 C_d_prod$) (?v7 C_d_prod$)) (=> (and (member$e ?v6 (set2_tllist$ ?v2)) (and (member$e ?v7 (set2_tllist$ ?v3)) (fun_app$bn (fun_app$cu ?v1 ?v6) ?v7))) (fun_app$bn (fun_app$cu ?v5 ?v6) ?v7))))) (tllist_all2$r ?v4 ?v5 ?v2 ?v3))) :named a158))
(assert (! (forall ((?v0 A_a_b_prod_bool_fun_fun$) (?v1 A_b_prod_b_bool_fun_fun$) (?v2 C_c_d_prod_bool_fun_fun$) (?v3 C_d_prod_d_bool_fun_fun$)) (= (fun_app$bg (tllist_all2$c (relcompp$q ?v0 ?v1)) (relcompp$r ?v2 ?v3)) (fun_app$ap (relcompp$a (tllist_all2$s ?v0 ?v2)) (fun_app$cv (tllist_all2$t ?v1) ?v3)))) :named a159))
(assert (! (forall ((?v0 A_llist_a_b_prod_llist_bool_fun_fun$) (?v1 A_b_prod_llist_b_llist_bool_fun_fun$) (?v2 A_llist_a_b_prod_llist_bool_fun_fun$) (?v3 A_b_prod_llist_b_llist_bool_fun_fun$)) (= (tllist_all2$u (relcompp$ ?v0 ?v1) (relcompp$ ?v2 ?v3)) (relcompp$s (tllist_all2$j ?v0 ?v2) (tllist_all2$v ?v1 ?v3)))) :named a160))
(assert (! (forall ((?v0 A_llist_a_b_prod_llist_bool_fun_fun$) (?v1 A_b_prod_llist_b_llist_bool_fun_fun$) (?v2 A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$) (?v3 A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun$)) (= (tllist_all2$w (relcompp$ ?v0 ?v1) (fun_app$ap (relcompp$a ?v2) ?v3)) (relcompp$t (tllist_all2$l ?v0 ?v2) (tllist_all2$x ?v1 ?v3)))) :named a161))
(assert (! (forall ((?v0 A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$) (?v1 A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun$) (?v2 A_llist_a_b_prod_llist_bool_fun_fun$) (?v3 A_b_prod_llist_b_llist_bool_fun_fun$)) (= (tllist_all2$y (fun_app$ap (relcompp$a ?v0) ?v1) (relcompp$ ?v2 ?v3)) (relcompp$u (tllist_all2$n ?v0 ?v2) (tllist_all2$z ?v1 ?v3)))) :named a162))
(assert (! (forall ((?v0 A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$) (?v1 A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun$) (?v2 A_c_tllist_a_b_prod_c_d_prod_tllist_bool_fun_fun$) (?v3 A_b_prod_c_d_prod_tllist_b_d_tllist_bool_fun_fun$)) (= (tllist_all2$aa (fun_app$ap (relcompp$a ?v0) ?v1) (fun_app$ap (relcompp$a ?v2) ?v3)) (relcompp$v (tllist_all2$p ?v0 ?v2) (tllist_all2$ab ?v1 ?v3)))) :named a163))
(assert (! (forall ((?v0 A_b_prod_a_bool_fun_fun$) (?v1 C_d_prod_c_bool_fun_fun$)) (= (tllist_all2$s (conversep$o ?v0) (conversep$p ?v1)) (conversep$a (fun_app$cw (tllist_all2$ac ?v0) ?v1)))) :named a164))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_bool_fun_fun$) (?v1 A_b_prod_llist_a_llist_bool_fun_fun$)) (= (tllist_all2$j (conversep$ ?v0) (conversep$ ?v1)) (conversep$q (tllist_all2$k ?v0 ?v1)))) :named a165))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_bool_fun_fun$) (?v1 A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$)) (= (tllist_all2$l (conversep$ ?v0) (conversep$a ?v1)) (conversep$r (tllist_all2$m ?v0 ?v1)))) :named a166))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$) (?v1 A_b_prod_llist_a_llist_bool_fun_fun$)) (= (tllist_all2$n (conversep$a ?v0) (conversep$ ?v1)) (conversep$s (tllist_all2$o ?v0 ?v1)))) :named a167))
(assert (! (forall ((?v0 A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$) (?v1 A_b_prod_c_d_prod_tllist_a_c_tllist_bool_fun_fun$)) (= (tllist_all2$p (conversep$a ?v0) (conversep$a ?v1)) (conversep$t (tllist_all2$q ?v0 ?v1)))) :named a168))
(check-sat)
;(get-unsat-core)
