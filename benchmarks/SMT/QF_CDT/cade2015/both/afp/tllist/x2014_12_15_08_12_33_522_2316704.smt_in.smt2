; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 111
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort B_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_b_tllist_bool_fun$ 0)
(declare-sort B_a_b_tllist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_b_tllist$ (tNil$ (terminal$ B$)) (tCons$ (thd$ A$) (ttl$ A_b_tllist$)))
  (A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ (A_b_tllist$) Bool)
(declare-fun xs$ () A_b_tllist$)
(declare-fun member$ (B$ B_set$) Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun fun_app$a (B_bool_fun$ B$) Bool)
(declare-fun fun_app$b (A_b_tllist_bool_fun$ A_b_tllist$) Bool)
(declare-fun fun_app$c (B_a_b_tllist_bool_fun_fun$ B$) A_b_tllist_bool_fun$)
(declare-fun pred_tllist$ (A_bool_fun$ B_bool_fun$ A_b_tllist$) Bool)
(declare-fun set2_tllist$ (A_b_tllist$) B_set$)
(declare-fun llist_of_tllist$ (A_b_tllist$) A_llist$)
(assert (! (not (p$ xs$)) :named a0))
(assert (! (forall ((?v0 B$)) (p$ (tNil$ ?v0))) :named a1))
(assert (! (forall ((?v0 A_b_tllist$) (?v1 A$)) (=> (and (lfinite$ (llist_of_tllist$ ?v0)) (p$ ?v0)) (p$ (tCons$ ?v1 ?v0)))) :named a2))
(assert (! (lfinite$ (llist_of_tllist$ xs$)) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 A$) (?v3 A_b_tllist$)) (= (= (tCons$ ?v0 ?v1) (tCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a4))
(assert (! (forall ((?v0 B$) (?v1 B$)) (= (= (tNil$ ?v0) (tNil$ ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_b_tllist$)) (=> (and (forall ((?v1 B$)) (=> (= ?v0 (tNil$ ?v1)) false)) (forall ((?v1 A$) (?v2 A_b_tllist$)) (=> (= ?v0 (tCons$ ?v1 ?v2)) false))) false)) :named a6))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 A_b_tllist$)) (not (= (tNil$ ?v0) (tCons$ ?v1 ?v2)))) :named a7))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 B_bool_fun$) (?v2 A$) (?v3 A_b_tllist$)) (! (= (pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3)) (and (fun_app$ ?v0 ?v2) (pred_tllist$ ?v0 ?v1 ?v3))) :pattern ((pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3))))) :named a8))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 B_bool_fun$) (?v2 B$)) (! (= (pred_tllist$ ?v0 ?v1 (tNil$ ?v2)) (fun_app$a ?v1 ?v2)) :pattern ((pred_tllist$ ?v0 ?v1 (tNil$ ?v2))))) :named a9))
(assert (! (forall ((?v0 B$) (?v1 A_b_tllist$)) (=> (and (member$ ?v0 (set2_tllist$ ?v1)) (and (=> (= ?v1 (tNil$ ?v0)) false) (forall ((?v2 A$) (?v3 A_b_tllist$)) (=> (and (= ?v1 (tCons$ ?v2 ?v3)) (member$ ?v0 (set2_tllist$ ?v3))) false)))) false)) :named a10))
(assert (! (forall ((?v0 B$) (?v1 A_b_tllist$) (?v2 B_a_b_tllist_bool_fun_fun$)) (=> (and (member$ ?v0 (set2_tllist$ ?v1)) (and (forall ((?v3 B$)) (fun_app$b (fun_app$c ?v2 ?v3) (tNil$ ?v3))) (forall ((?v3 A$) (?v4 A_b_tllist$) (?v5 B$)) (=> (and (member$ ?v5 (set2_tllist$ ?v4)) (fun_app$b (fun_app$c ?v2 ?v5) ?v4)) (fun_app$b (fun_app$c ?v2 ?v5) (tCons$ ?v3 ?v4)))))) (fun_app$b (fun_app$c ?v2 ?v0) ?v1))) :named a11))
(assert (! (forall ((?v0 B$)) (! (= (llist_of_tllist$ (tNil$ ?v0)) lNil$) :pattern ((tNil$ ?v0)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (! (= (llist_of_tllist$ (tCons$ ?v0 ?v1)) (lCons$ ?v0 (llist_of_tllist$ ?v1))) :pattern ((tCons$ ?v0 ?v1)))) :named a13))
(check-sat)
;(get-unsat-core)
