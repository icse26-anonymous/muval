; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 232
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_a_prod_a_a_prod_fun$ 0)
(declare-sort A_a_a_prod_prod_a_a_a_prod_prod_fun$ 0)
(declare-sort A_a_prod_a_prod_a_a_prod_a_prod_fun$ 0)
(declare-sort A_a_prod_a_a_prod_prod_a_a_prod_a_a_prod_prod_fun$ 0)
(declare-codatatypes () ((A_b_tllist$ (tNil$ (terminal$ B$)) (tCons$ (thd$ A$) (ttl$ A_b_tllist$)))
  (A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_a_prod$ (pair$ (fst$ A$) (snd$ A$)))
  (A_a_prod_a_a_prod_prod$ (pair$a (fst$a A_a_prod$) (snd$a A_a_prod$)))))
(declare-codatatypes () ((A_a_prod_a_a_prod_prod_llist$ (lNil$a) (lCons$a (lhd$a A_a_prod_a_a_prod_prod$) (ltl$a A_a_prod_a_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_prod$ (pair$b (fst$b A_a_prod$) (snd$b A$)))))
(declare-codatatypes () ((A_a_prod_a_prod_llist$ (lNil$b) (lCons$b (lhd$b A_a_prod_a_prod$) (ltl$b A_a_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod$ (pair$c (fst$c A$) (snd$c A_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_prod_llist$ (lNil$c) (lCons$c (lhd$c A_a_a_prod_prod$) (ltl$c A_a_a_prod_prod_llist$)))
  (A_a_prod_llist$ (lNil$d) (lCons$d (lhd$d A_a_prod$) (ltl$d A_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_a_prod_prod$ (pair$d (fst$d A$) (snd$d A_a_prod_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_a_prod_prod_llist$ (lNil$e) (lCons$e (lhd$e A_a_a_prod_a_prod_prod$) (ltl$e A_a_a_prod_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_a_a_prod_prod_prod$ (pair$e (fst$e A$) (snd$e A_a_a_prod_prod$)))))
(declare-codatatypes () ((A_a_a_a_prod_prod_prod_llist$ (lNil$f) (lCons$f (lhd$f A_a_a_a_prod_prod_prod$) (ltl$f A_a_a_a_prod_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_prod_a_prod$ (pair$f (fst$f A_a_prod_a_prod$) (snd$f A$)))))
(declare-codatatypes () ((A_a_prod_a_prod_a_prod_llist$ (lNil$g) (lCons$g (lhd$g A_a_prod_a_prod_a_prod$) (ltl$g A_a_prod_a_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod_a_prod$ (pair$g (fst$g A_a_a_prod_prod$) (snd$g A$)))))
(declare-codatatypes () ((A_a_a_prod_prod_a_prod_llist$ (lNil$h) (lCons$h (lhd$h A_a_a_prod_prod_a_prod$) (ltl$h A_a_a_prod_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_a_a_prod_prod_prod$ (pair$h (fst$h A$) (snd$h A_a_prod_a_a_prod_prod$)))))
(declare-codatatypes () ((A_a_a_prod_a_a_prod_prod_prod_llist$ (lNil$i) (lCons$i (lhd$i A_a_a_prod_a_a_prod_prod_prod$) (ltl$i A_a_a_prod_a_a_prod_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_a_prod_a_prod_prod$ (pair$i (fst$i A_a_prod$) (snd$i A_a_prod_a_prod$)))))
(declare-codatatypes () ((A_a_prod_a_a_prod_a_prod_prod_llist$ (lNil$j) (lCons$j (lhd$j A_a_prod_a_a_prod_a_prod_prod$) (ltl$j A_a_prod_a_a_prod_a_prod_prod_llist$)))))
(declare-fun b$ () B$)
(declare-fun c$ () B$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun lzip$ (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lzip$a (A_llist$ A_a_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun lzip$b (A_a_prod_llist$ A_llist$) A_a_prod_a_prod_llist$)
(declare-fun lzip$c (A_a_prod_llist$ A_a_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lzip$d (A_llist$ A_a_prod_a_prod_llist$) A_a_a_prod_a_prod_prod_llist$)
(declare-fun lzip$e (A_llist$ A_a_a_prod_prod_llist$) A_a_a_a_prod_prod_prod_llist$)
(declare-fun lzip$f (A_a_prod_a_prod_llist$ A_llist$) A_a_prod_a_prod_a_prod_llist$)
(declare-fun lzip$g (A_a_a_prod_prod_llist$ A_llist$) A_a_a_prod_prod_a_prod_llist$)
(declare-fun lzip$h (A_llist$ A_a_prod_a_a_prod_prod_llist$) A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lzip$i (A_a_prod_llist$ A_a_prod_a_prod_llist$) A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun ldropn$ (Nat$ A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lnull$a (A_a_a_prod_prod_llist$) Bool)
(declare-fun lnull$b (A_a_prod_llist$) Bool)
(declare-fun lnull$c (A_a_prod_a_prod_llist$) Bool)
(declare-fun lnull$d (A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun ldropn$a (Nat$ A_a_prod_a_prod_llist$) A_a_prod_a_prod_llist$)
(declare-fun ldropn$b (Nat$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun ldropn$c (Nat$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun ldropn$d (Nat$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun iterates$ (A_a_prod_a_a_prod_prod_a_a_prod_a_a_prod_prod_fun$ A_a_prod_a_a_prod_prod$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lfinite$a (A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun lfinite$b (A_a_prod_a_prod_llist$) Bool)
(declare-fun lfinite$c (A_a_a_prod_prod_llist$) Bool)
(declare-fun lfinite$d (A_a_prod_llist$) Bool)
(declare-fun lfinite$e (A_a_a_prod_a_prod_prod_llist$) Bool)
(declare-fun lfinite$f (A_a_a_a_prod_prod_prod_llist$) Bool)
(declare-fun lfinite$g (A_a_prod_a_prod_a_prod_llist$) Bool)
(declare-fun lfinite$h (A_a_a_prod_prod_a_prod_llist$) Bool)
(declare-fun lfinite$i (A_a_a_prod_a_a_prod_prod_prod_llist$) Bool)
(declare-fun lfinite$j (A_a_prod_a_a_prod_a_prod_prod_llist$) Bool)
(declare-fun iterates$a (A_a_prod_a_prod_a_a_prod_a_prod_fun$ A_a_prod_a_prod$) A_a_prod_a_prod_llist$)
(declare-fun iterates$b (A_a_a_prod_prod_a_a_a_prod_prod_fun$ A_a_a_prod_prod$) A_a_a_prod_prod_llist$)
(declare-fun iterates$c (A_a_prod_a_a_prod_fun$ A_a_prod$) A_a_prod_llist$)
(declare-fun iterates$d (A_a_fun$ A$) A_llist$)
(declare-fun lstrict_prefix$ (A_a_prod_a_a_prod_prod_llist$ A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun llist_of_tllist$ (A_b_tllist$) A_llist$)
(declare-fun lstrict_prefix$a (A_a_prod_a_prod_llist$ A_a_prod_a_prod_llist$) Bool)
(declare-fun lstrict_prefix$b (A_a_a_prod_prod_llist$ A_a_a_prod_prod_llist$) Bool)
(declare-fun lstrict_prefix$c (A_a_prod_llist$ A_a_prod_llist$) Bool)
(declare-fun lstrict_prefix$d (A_llist$ A_llist$) Bool)
(declare-fun tllist_of_llist$ (B$ A_llist$) A_b_tllist$)
(assert (! (not (= (= (tllist_of_llist$ b$ xs$) (tllist_of_llist$ c$ ys$)) (and (= xs$ ys$) (=> (lfinite$ ys$) (= b$ c$))))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 B$) (?v3 B$)) (=> (and (= ?v0 ?v1) (=> (lfinite$ ?v1) (= ?v2 ?v3))) (= (tllist_of_llist$ ?v2 ?v0) (tllist_of_llist$ ?v3 ?v1)))) :named a1))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (=> (lstrict_prefix$ ?v0 ?v1) (lfinite$a ?v0))) :named a2))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_a_prod_a_prod_llist$)) (=> (lstrict_prefix$a ?v0 ?v1) (lfinite$b ?v0))) :named a3))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_a_a_prod_prod_llist$)) (=> (lstrict_prefix$b ?v0 ?v1) (lfinite$c ?v0))) :named a4))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (lstrict_prefix$c ?v0 ?v1) (lfinite$d ?v0))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (lstrict_prefix$d ?v0 ?v1) (lfinite$ ?v0))) :named a6))
(assert (! (forall ((?v0 A_b_tllist$)) (= (tllist_of_llist$ (terminal$ ?v0) (llist_of_tllist$ ?v0)) ?v0)) :named a7))
(assert (! (= (lfinite$a lNil$a) true) :named a8))
(assert (! (= (lfinite$b lNil$b) true) :named a9))
(assert (! (= (lfinite$c lNil$c) true) :named a10))
(assert (! (= (lfinite$d lNil$d) true) :named a11))
(assert (! (= (lfinite$ lNil$) true) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (= (lfinite$a (ldropn$ ?v0 ?v1)) (lfinite$a ?v1))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_a_prod_llist$)) (= (lfinite$b (ldropn$a ?v0 ?v1)) (lfinite$b ?v1))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_a_prod_prod_llist$)) (= (lfinite$c (ldropn$b ?v0 ?v1)) (lfinite$c ?v1))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_llist$)) (= (lfinite$d (ldropn$c ?v0 ?v1)) (lfinite$d ?v1))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (= (lfinite$ (ldropn$d ?v0 ?v1)) (lfinite$ ?v1))) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$d (lzip$ ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$ ?v1)))) :named a18))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (lfinite$c (lzip$a ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$d ?v1)))) :named a19))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (lfinite$b (lzip$b ?v0 ?v1)) (or (lfinite$d ?v0) (lfinite$ ?v1)))) :named a20))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lfinite$a (lzip$c ?v0 ?v1)) (or (lfinite$d ?v0) (lfinite$d ?v1)))) :named a21))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_prod_llist$)) (= (lfinite$e (lzip$d ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$b ?v1)))) :named a22))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_a_prod_prod_llist$)) (= (lfinite$f (lzip$e ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$c ?v1)))) :named a23))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_llist$)) (= (lfinite$g (lzip$f ?v0 ?v1)) (or (lfinite$b ?v0) (lfinite$ ?v1)))) :named a24))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_llist$)) (= (lfinite$h (lzip$g ?v0 ?v1)) (or (lfinite$c ?v0) (lfinite$ ?v1)))) :named a25))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (= (lfinite$i (lzip$h ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$a ?v1)))) :named a26))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_a_prod_llist$)) (= (lfinite$j (lzip$i ?v0 ?v1)) (or (lfinite$d ?v0) (lfinite$b ?v1)))) :named a27))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a28))
(assert (! (forall ((?v0 A_a_prod_a_prod$) (?v1 A_a_prod_a_prod_llist$)) (! (= (lfinite$b (lCons$b ?v0 ?v1)) (lfinite$b ?v1)) :pattern ((lCons$b ?v0 ?v1)))) :named a29))
(assert (! (forall ((?v0 A_a_a_prod_prod$) (?v1 A_a_a_prod_prod_llist$)) (! (= (lfinite$c (lCons$c ?v0 ?v1)) (lfinite$c ?v1)) :pattern ((lCons$c ?v0 ?v1)))) :named a30))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (lfinite$d (lCons$d ?v0 ?v1)) (lfinite$d ?v1)) :pattern ((lCons$d ?v0 ?v1)))) :named a31))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a32))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a33))
(assert (! (forall ((?v0 A_a_prod_a_prod$) (?v1 A_a_prod_a_prod_llist$)) (! (= (lfinite$b (lCons$b ?v0 ?v1)) (lfinite$b ?v1)) :pattern ((lCons$b ?v0 ?v1)))) :named a34))
(assert (! (forall ((?v0 A_a_a_prod_prod$) (?v1 A_a_a_prod_prod_llist$)) (! (= (lfinite$c (lCons$c ?v0 ?v1)) (lfinite$c ?v1)) :pattern ((lCons$c ?v0 ?v1)))) :named a35))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (lfinite$d (lCons$d ?v0 ?v1)) (lfinite$d ?v1)) :pattern ((lCons$d ?v0 ?v1)))) :named a36))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a37))
(assert (! (forall ((?v0 B$) (?v1 A_llist$)) (= (thd$ (tllist_of_llist$ ?v0 ?v1)) (lhd$ ?v1))) :named a38))
(assert (! (forall ((?v0 A_llist$) (?v1 B$)) (=> (lnull$ ?v0) (= (terminal$ (tllist_of_llist$ ?v1 ?v0)) ?v1))) :named a39))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_a_a_prod_a_a_prod_prod_fun$) (?v1 A_a_prod_a_a_prod_prod$)) (not (lfinite$a (iterates$ ?v0 ?v1)))) :named a40))
(assert (! (forall ((?v0 A_a_prod_a_prod_a_a_prod_a_prod_fun$) (?v1 A_a_prod_a_prod$)) (not (lfinite$b (iterates$a ?v0 ?v1)))) :named a41))
(assert (! (forall ((?v0 A_a_a_prod_prod_a_a_a_prod_prod_fun$) (?v1 A_a_a_prod_prod$)) (not (lfinite$c (iterates$b ?v0 ?v1)))) :named a42))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 A_a_prod$)) (not (lfinite$d (iterates$c ?v0 ?v1)))) :named a43))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (not (lfinite$ (iterates$d ?v0 ?v1)))) :named a44))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (= (lfinite$a (ltl$a ?v0)) (lfinite$a ?v0))) :named a45))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (= (lfinite$b (ltl$b ?v0)) (lfinite$b ?v0))) :named a46))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (= (lfinite$c (ltl$c ?v0)) (lfinite$c ?v0))) :named a47))
(assert (! (forall ((?v0 A_a_prod_llist$)) (= (lfinite$d (ltl$d ?v0)) (lfinite$d ?v0))) :named a48))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$ (ltl$ ?v0)) (lfinite$ ?v0))) :named a49))
(assert (! (forall ((?v0 B$) (?v1 A_llist$) (?v2 B$)) (= (= (tllist_of_llist$ ?v0 ?v1) (tNil$ ?v2)) (and (= ?v2 ?v0) (= ?v1 lNil$)))) :named a50))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod$) (?v3 A_a_prod_llist$)) (= (= (lCons$d ?v0 ?v1) (lCons$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a51))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a52))
(assert (! (forall ((?v0 B$) (?v1 B$)) (= (= (tNil$ ?v0) (tNil$ ?v1)) (= ?v0 ?v1))) :named a53))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$a (lzip$a ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$b ?v1))))) :named a54))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (not (lnull$c (lzip$b ?v0 ?v1))) (and (not (lnull$b ?v0)) (not (lnull$ ?v1))))) :named a55))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$d (lzip$c ?v0 ?v1))) (and (not (lnull$b ?v0)) (not (lnull$b ?v1))))) :named a56))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$b (lzip$ ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a57))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (lnull$a (lzip$a ?v0 ?v1)) (or (lnull$ ?v0) (lnull$b ?v1)))) :named a58))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (lnull$c (lzip$b ?v0 ?v1)) (or (lnull$b ?v0) (lnull$ ?v1)))) :named a59))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lnull$d (lzip$c ?v0 ?v1)) (or (lnull$b ?v0) (lnull$b ?v1)))) :named a60))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$b (lzip$ ?v0 ?v1)) (or (lnull$ ?v0) (lnull$ ?v1)))) :named a61))
(check-sat)
;(get-unsat-core)
