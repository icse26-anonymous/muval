; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 140
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort B_a_tllist_a_fun$ 0)
(declare-sort B_a_tllist_bool_fun$ 0)
(declare-sort B_a_tllist_b_a_tllist_bool_fun_fun$ 0)
(declare-codatatypes () ((B_a_tllist$ (tNil$ (terminal$ A$)) (tCons$ (thd$ B$) (ttl$ B_a_tllist$)))))
(declare-fun uu$ () B_a_tllist_a_fun$)
(declare-fun xs$ () B_a_tllist$)
(declare-fun fun_app$ (B_a_tllist_a_fun$ B_a_tllist$) A$)
(declare-fun is_TNil$ (B_a_tllist$) Bool)
(declare-fun fun_app$a (B_a_tllist_bool_fun$ B_a_tllist$) Bool)
(declare-fun fun_app$b (B_a_tllist_b_a_tllist_bool_fun_fun$ B_a_tllist$) B_a_tllist_bool_fun$)
(declare-fun terminal0$ () B_a_tllist_a_fun$)
(assert (! (forall ((?v0 B_a_tllist$)) (! (= (fun_app$ uu$ ?v0) (terminal$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (= (terminal$ (ttl$ xs$)) (terminal$ xs$))) :named a1))
(assert (! (= terminal0$ uu$) :named a2))
(assert (! (forall ((?v0 B$) (?v1 B_a_tllist$)) (! (= (terminal$ (tCons$ ?v0 ?v1)) (terminal$ ?v1)) :pattern ((tCons$ ?v0 ?v1)))) :named a3))
(assert (! (forall ((?v0 A$)) (! (= (terminal$ (tNil$ ?v0)) ?v0) :pattern ((tNil$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A$)) (! (= (ttl$ (tNil$ ?v0)) (tNil$ ?v0)) :pattern ((tNil$ ?v0)))) :named a5))
(assert (! (forall ((?v0 B$) (?v1 B_a_tllist$)) (! (= (ttl$ (tCons$ ?v0 ?v1)) ?v1) :pattern ((tCons$ ?v0 ?v1)))) :named a6))
(assert (! (forall ((?v0 B_a_tllist$) (?v1 B_a_tllist$)) (=> (and (= (is_TNil$ ?v0) (is_TNil$ ?v1)) (and (=> (and (is_TNil$ ?v0) (is_TNil$ ?v1)) (= (terminal$ ?v0) (terminal$ ?v1))) (=> (and (not (is_TNil$ ?v0)) (not (is_TNil$ ?v1))) (and (= (thd$ ?v0) (thd$ ?v1)) (= (ttl$ ?v0) (ttl$ ?v1)))))) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 B_a_tllist_b_a_tllist_bool_fun_fun$) (?v1 B_a_tllist$) (?v2 B_a_tllist$)) (=> (and (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (forall ((?v3 B_a_tllist$) (?v4 B_a_tllist$)) (=> (fun_app$a (fun_app$b ?v0 ?v3) ?v4) (and (= (is_TNil$ ?v3) (is_TNil$ ?v4)) (and (=> (and (is_TNil$ ?v3) (is_TNil$ ?v4)) (= (terminal$ ?v3) (terminal$ ?v4))) (=> (and (not (is_TNil$ ?v3)) (not (is_TNil$ ?v4))) (and (= (thd$ ?v3) (thd$ ?v4)) (or (fun_app$a (fun_app$b ?v0 (ttl$ ?v3)) (ttl$ ?v4)) (= (ttl$ ?v3) (ttl$ ?v4)))))))))) (= ?v1 ?v2))) :named a8))
(assert (! (forall ((?v0 B_a_tllist_b_a_tllist_bool_fun_fun$) (?v1 B_a_tllist$) (?v2 B_a_tllist$)) (=> (and (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (forall ((?v3 B_a_tllist$) (?v4 B_a_tllist$)) (=> (fun_app$a (fun_app$b ?v0 ?v3) ?v4) (and (= (is_TNil$ ?v3) (is_TNil$ ?v4)) (and (=> (and (is_TNil$ ?v3) (is_TNil$ ?v4)) (= (terminal$ ?v3) (terminal$ ?v4))) (=> (and (not (is_TNil$ ?v3)) (not (is_TNil$ ?v4))) (and (= (thd$ ?v3) (thd$ ?v4)) (fun_app$a (fun_app$b ?v0 (ttl$ ?v3)) (ttl$ ?v4))))))))) (= ?v1 ?v2))) :named a9))
(assert (! (forall ((?v0 B$) (?v1 B_a_tllist$) (?v2 B$) (?v3 B_a_tllist$)) (= (= (tCons$ ?v0 ?v1) (tCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (tNil$ ?v0) (tNil$ ?v1)) (= ?v0 ?v1))) :named a11))
(check-sat)
;(get-unsat-core)
