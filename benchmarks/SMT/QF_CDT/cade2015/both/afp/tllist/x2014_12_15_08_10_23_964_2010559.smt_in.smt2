; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 261
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun llast$ (A_llist$) A$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun gen_lset$ (A_set$) A_llist_a_set_fun$)
(declare-fun lsublist$ (A_llist$ Nat_set$) A_llist$)
(declare-fun ldistinct$ (A_llist$) Bool)
(declare-fun undefined$ () A$)
(declare-fun ltakeWhile$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun pred_llist$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun finite_lprefix$ (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$ (A_llist$) A_llist_bool_fun$)
(assert (! (not (= (lhd$ lNil$) undefined$)) :named a0))
(assert (! (= (llast$ lNil$) undefined$) :named a1))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (= (fun_app$ (ltakeWhile$ ?v0) ?v1) lNil$) (=> (not (= ?v1 lNil$)) (not (fun_app$a ?v0 (lhd$ ?v1)))))) :named a2))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$b (lmember$ ?v0) lNil$) false) :pattern ((lmember$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$c (gen_lset$ ?v0) lNil$) ?v0) :pattern ((gen_lset$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$b (finite_lprefix$ ?v0) lNil$) (= ?v0 lNil$)) :pattern ((finite_lprefix$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$b (finite_lprefix$ lNil$) ?v0) true) :pattern ((fun_app$b (finite_lprefix$ lNil$) ?v0)))) :named a6))
(assert (! (= (fun_app$b (lstrict_prefix$ lNil$) lNil$) false) :named a7))
(assert (! (forall ((?v0 A_bool_fun$)) (fun_app$b (pred_llist$ ?v0) lNil$)) :named a8))
(assert (! (forall ((?v0 Nat_set$)) (! (= (lsublist$ lNil$ ?v0) lNil$) :pattern ((lsublist$ lNil$ ?v0)))) :named a9))
(assert (! (= (ldistinct$ lNil$) true) :named a10))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$ (ltakeWhile$ ?v0) lNil$) lNil$) :pattern ((ltakeWhile$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (forall ((?v2 A_llist$)) (=> (forall ((?v3 A_llist$)) (=> (fun_app$b (lstrict_prefix$ ?v3) ?v2) (fun_app$b ?v0 ?v3))) (fun_app$b ?v0 ?v2))) (fun_app$b ?v0 ?v1))) :named a12))
(assert (! (ldistinct$ lNil$) :named a13))
(check-sat)
;(get-unsat-core)
