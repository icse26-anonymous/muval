; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 96
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort B_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort A_b_tllist_bool_fun$ 0)
(declare-sort A_llist_a_b_tllist_fun$ 0)
(declare-sort A_b_tllist_a_b_tllist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_b_tllist$ (tNil$ (terminal$ B$)) (tCons$ (thd$ A$) (ttl$ A_b_tllist$)))
  (A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun b$ () B$)
(declare-fun b$a () B$)
(declare-fun uu$ () A_a_bool_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun uua$ () B_b_bool_fun_fun$)
(declare-fun uub$ () A_b_tllist_a_b_tllist_bool_fun_fun$)
(declare-fun tmap$ (A_a_fun$ B_b_fun$ A_b_tllist$) A_b_tllist$)
(declare-fun member$ (B$ B_set$) Bool)
(declare-fun fun_app$ (A_b_tllist_bool_fun$ A_b_tllist$) Bool)
(declare-fun fun_app$a (A_b_tllist_a_b_tllist_bool_fun_fun$ A_b_tllist$) A_b_tllist_bool_fun$)
(declare-fun fun_app$b (B_bool_fun$ B$) Bool)
(declare-fun fun_app$c (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$d (A_bool_fun$ A$) Bool)
(declare-fun fun_app$e (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$f (A_llist_a_b_tllist_fun$ A_llist$) A_b_tllist$)
(declare-fun fun_app$g (B_b_fun$ B$) B$)
(declare-fun pred_tllist$ (A_bool_fun$ B_bool_fun$ A_b_tllist$) Bool)
(declare-fun set2_tllist$ (A_b_tllist$) B_set$)
(declare-fun tllist_all2$ (A_a_bool_fun_fun$ B_b_bool_fun_fun$) A_b_tllist_a_b_tllist_bool_fun_fun$)
(declare-fun llist_of_tllist$ (A_b_tllist$) A_llist$)
(declare-fun tllist_of_llist$ (B$) A_llist_a_b_tllist_fun$)
(assert (! (forall ((?v0 A_b_tllist$) (?v1 A_b_tllist$)) (! (= (fun_app$ (fun_app$a uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uub$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$b (fun_app$c uua$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c uua$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$d (fun_app$e uu$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (fun_app$e uu$ ?v0) ?v1)))) :named a2))
(assert (! (not (= (= (fun_app$f (tllist_of_llist$ b$) xs$) (tNil$ b$a)) (and (= b$a b$) (= xs$ lNil$)))) :named a3))
(assert (! (forall ((?v0 B$) (?v1 B$)) (= (= (tNil$ ?v0) (tNil$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$f (tllist_of_llist$ ?v0) lNil$) (tNil$ ?v0)) :pattern ((tllist_of_llist$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 B_bool_fun$) (?v2 B$)) (! (= (pred_tllist$ ?v0 ?v1 (tNil$ ?v2)) (fun_app$b ?v1 ?v2)) :pattern ((pred_tllist$ ?v0 ?v1 (tNil$ ?v2))))) :named a6))
(assert (! (forall ((?v0 B$)) (! (= (llist_of_tllist$ (tNil$ ?v0)) lNil$) :pattern ((tNil$ ?v0)))) :named a7))
(assert (! (forall ((?v0 B$)) (member$ ?v0 (set2_tllist$ (tNil$ ?v0)))) :named a8))
(assert (! (forall ((?v0 B$)) (! (= (terminal$ (tNil$ ?v0)) ?v0) :pattern ((tNil$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_b_bool_fun_fun$) (?v2 B$) (?v3 B$)) (! (= (fun_app$ (fun_app$a (tllist_all2$ ?v0 ?v1) (tNil$ ?v2)) (tNil$ ?v3)) (fun_app$b (fun_app$c ?v1 ?v2) ?v3)) :pattern ((fun_app$ (fun_app$a (tllist_all2$ ?v0 ?v1) (tNil$ ?v2)) (tNil$ ?v3))))) :named a10))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 A_b_tllist$) (?v3 B$)) (= (= (tmap$ ?v0 ?v1 ?v2) (tNil$ ?v3)) (exists ((?v4 B$)) (and (= ?v2 (tNil$ ?v4)) (= (fun_app$g ?v1 ?v4) ?v3))))) :named a11))
(assert (! (forall ((?v0 B$) (?v1 A_a_fun$) (?v2 B_b_fun$) (?v3 A_b_tllist$)) (= (= (tNil$ ?v0) (tmap$ ?v1 ?v2 ?v3)) (exists ((?v4 B$)) (and (= ?v3 (tNil$ ?v4)) (= (fun_app$g ?v2 ?v4) ?v0))))) :named a12))
(assert (! (forall ((?v0 A_b_tllist$)) (= (fun_app$f (tllist_of_llist$ (terminal$ ?v0)) (llist_of_tllist$ ?v0)) ?v0)) :named a13))
(assert (! (= (tllist_all2$ uu$ uua$) uub$) :named a14))
(check-sat)
;(get-unsat-core)
