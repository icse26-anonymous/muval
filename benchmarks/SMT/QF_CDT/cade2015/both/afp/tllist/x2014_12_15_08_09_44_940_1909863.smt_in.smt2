; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 245
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_b_tllist_b_fun$ 0)
(declare-sort A_b_tllist_bool_fun$ 0)
(declare-sort A_a_b_tllist_b_fun_fun$ 0)
(declare-sort A_b_tllist_b_bool_fun_fun$ 0)
(declare-sort A_b_tllist_a_b_tllist_bool_fun_fun$ 0)
(declare-sort A_a_b_tllist_b_fun_fun_a_b_tllist_b_fun_fun$ 0)
(declare-codatatypes () ((A_b_tllist$ (tNil$ (terminal$ B$)) (tCons$ (thd$ A$) (ttl$ A_b_tllist$)))))
(declare-fun x$ () A_b_tllist$)
(declare-fun id$ () B_b_fun$)
(declare-fun x1$ () B$)
(declare-fun fun_app$ (A_b_tllist_b_fun$ A_b_tllist$) B$)
(declare-fun is_TNil$ (A_b_tllist$) Bool)
(declare-fun fun_app$a (A_a_b_tllist_b_fun_fun_a_b_tllist_b_fun_fun$ A_a_b_tllist_b_fun_fun$) A_b_tllist_b_fun$)
(declare-fun fun_app$b (B_b_fun$ B$) B$)
(declare-fun fun_app$c (B_bool_fun$ B$) Bool)
(declare-fun fun_app$d (A_b_tllist_b_bool_fun_fun$ A_b_tllist$) B_bool_fun$)
(declare-fun fun_app$e (A_a_b_tllist_b_fun_fun$ A$) A_b_tllist_b_fun$)
(declare-fun fun_app$f (A_b_tllist_bool_fun$ A_b_tllist$) Bool)
(declare-fun fun_app$g (A_b_tllist_a_b_tllist_bool_fun_fun$ A_b_tllist$) A_b_tllist_bool_fun$)
(declare-fun terminal0$ (A_b_tllist$) B$)
(declare-fun undefined$ () A_a_b_tllist_b_fun_fun$)
(declare-fun undefined$a () B$)
(declare-fun case_tllist$ (B_b_fun$) A_a_b_tllist_b_fun_fun_a_b_tllist_b_fun_fun$)
(declare-fun pred_tllist$ (A_bool_fun$ B_bool_fun$ A_b_tllist$) Bool)
(assert (! (not (= (ite (is_TNil$ x$) (fun_app$ (fun_app$a (case_tllist$ id$) undefined$) x$) (terminal0$ (ttl$ x$))) (terminal$ x$))) :named a0))
(assert (! (= x$ (tNil$ x1$)) :named a1))
(assert (! (forall ((?v0 B$) (?v1 B$)) (= (= (tNil$ ?v0) (tNil$ ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A_b_tllist$)) (=> (is_TNil$ ?v0) (= (tNil$ (terminal$ ?v0)) ?v0))) :named a3))
(assert (! (forall ((?v0 A_b_tllist$)) (= (terminal0$ ?v0) (ite (is_TNil$ ?v0) (fun_app$ (fun_app$a (case_tllist$ id$) undefined$) ?v0) (terminal0$ (ttl$ ?v0))))) :named a4))
(assert (! (forall ((?v0 B$)) (! (= (ttl$ (tNil$ ?v0)) (tNil$ ?v0)) :pattern ((tNil$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_b_tllist$)) (= (is_TNil$ ?v0) (exists ((?v1 B$)) (= ?v0 (tNil$ ?v1))))) :named a6))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_a_b_tllist_b_fun_fun$) (?v2 B$)) (! (= (fun_app$ (fun_app$a (case_tllist$ ?v0) ?v1) (tNil$ ?v2)) (fun_app$b ?v0 ?v2)) :pattern ((fun_app$ (fun_app$a (case_tllist$ ?v0) ?v1) (tNil$ ?v2))))) :named a7))
(assert (! (forall ((?v0 B$)) (! (= (terminal$ (tNil$ ?v0)) ?v0) :pattern ((tNil$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_b_tllist$)) (=> (and (=> (is_TNil$ ?v0) false) (=> (not (is_TNil$ ?v0)) false)) false)) :named a9))
(assert (! (forall ((?v0 A_b_tllist_b_bool_fun_fun$) (?v1 A_b_tllist$) (?v2 B$)) (=> (and (forall ((?v3 A_b_tllist_b_fun$) (?v4 A_b_tllist$) (?v5 B$)) (=> (and (forall ((?v6 A_b_tllist$) (?v7 B$)) (=> (and (= (fun_app$ ?v3 ?v6) ?v7) (not (= ?v7 undefined$a))) (fun_app$c (fun_app$d ?v0 ?v6) ?v7))) (and (= (ite (is_TNil$ ?v4) (fun_app$ (fun_app$a (case_tllist$ id$) undefined$) ?v4) (fun_app$ ?v3 (ttl$ ?v4))) ?v5) (not (= ?v5 undefined$a)))) (fun_app$c (fun_app$d ?v0 ?v4) ?v5))) (and (= (terminal0$ ?v1) ?v2) (not (= ?v2 undefined$a)))) (fun_app$c (fun_app$d ?v0 ?v1) ?v2))) :named a10))
(assert (! (forall ((?v0 A_b_tllist$) (?v1 B$)) (=> (= ?v0 (tNil$ ?v1)) (is_TNil$ ?v0))) :named a11))
(assert (! (forall ((?v0 B$)) (is_TNil$ (tNil$ ?v0))) :named a12))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$b id$ ?v0) ?v0) :pattern ((fun_app$b id$ ?v0)))) :named a13))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_a_b_tllist_b_fun_fun$) (?v2 A_b_tllist$)) (! (= (fun_app$ (fun_app$a (case_tllist$ ?v0) ?v1) ?v2) (ite (is_TNil$ ?v2) (fun_app$b ?v0 (terminal$ ?v2)) (fun_app$ (fun_app$e ?v1 (thd$ ?v2)) (ttl$ ?v2)))) :pattern ((fun_app$ (fun_app$a (case_tllist$ ?v0) ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 A_b_tllist$) (?v1 A_b_tllist$)) (=> (and (= (is_TNil$ ?v0) (is_TNil$ ?v1)) (and (=> (and (is_TNil$ ?v0) (is_TNil$ ?v1)) (= (terminal$ ?v0) (terminal$ ?v1))) (=> (and (not (is_TNil$ ?v0)) (not (is_TNil$ ?v1))) (and (= (thd$ ?v0) (thd$ ?v1)) (= (ttl$ ?v0) (ttl$ ?v1)))))) (= ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 A_b_tllist_a_b_tllist_bool_fun_fun$) (?v1 A_b_tllist$) (?v2 A_b_tllist$)) (=> (and (fun_app$f (fun_app$g ?v0 ?v1) ?v2) (forall ((?v3 A_b_tllist$) (?v4 A_b_tllist$)) (=> (fun_app$f (fun_app$g ?v0 ?v3) ?v4) (and (= (is_TNil$ ?v3) (is_TNil$ ?v4)) (and (=> (and (is_TNil$ ?v3) (is_TNil$ ?v4)) (= (terminal$ ?v3) (terminal$ ?v4))) (=> (and (not (is_TNil$ ?v3)) (not (is_TNil$ ?v4))) (and (= (thd$ ?v3) (thd$ ?v4)) (or (fun_app$f (fun_app$g ?v0 (ttl$ ?v3)) (ttl$ ?v4)) (= (ttl$ ?v3) (ttl$ ?v4)))))))))) (= ?v1 ?v2))) :named a16))
(assert (! (forall ((?v0 A_b_tllist_a_b_tllist_bool_fun_fun$) (?v1 A_b_tllist$) (?v2 A_b_tllist$)) (=> (and (fun_app$f (fun_app$g ?v0 ?v1) ?v2) (forall ((?v3 A_b_tllist$) (?v4 A_b_tllist$)) (=> (fun_app$f (fun_app$g ?v0 ?v3) ?v4) (and (= (is_TNil$ ?v3) (is_TNil$ ?v4)) (and (=> (and (is_TNil$ ?v3) (is_TNil$ ?v4)) (= (terminal$ ?v3) (terminal$ ?v4))) (=> (and (not (is_TNil$ ?v3)) (not (is_TNil$ ?v4))) (and (= (thd$ ?v3) (thd$ ?v4)) (fun_app$f (fun_app$g ?v0 (ttl$ ?v3)) (ttl$ ?v4))))))))) (= ?v1 ?v2))) :named a17))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 B_bool_fun$) (?v2 B$)) (! (= (pred_tllist$ ?v0 ?v1 (tNil$ ?v2)) (fun_app$c ?v1 ?v2)) :pattern ((pred_tllist$ ?v0 ?v1 (tNil$ ?v2))))) :named a18))
(check-sat)
;(get-unsat-core)
