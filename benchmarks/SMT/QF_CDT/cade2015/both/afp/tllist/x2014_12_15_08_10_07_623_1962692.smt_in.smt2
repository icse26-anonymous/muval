; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 49
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort D$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_d_fun$ 0)
(declare-sort C_a_fun$ 0)
(declare-sort C_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort C_d_fun$ 0)
(declare-sort D_a_fun$ 0)
(declare-sort D_b_fun$ 0)
(declare-sort D_c_fun$ 0)
(declare-sort D_d_fun$ 0)
(declare-sort C_bool_fun$ 0)
(declare-sort D_bool_fun$ 0)
(declare-sort C_a_a_tllist_fun$ 0)
(declare-sort C_a_b_tllist_fun$ 0)
(declare-sort C_a_c_tllist_fun$ 0)
(declare-sort C_c_a_tllist_fun$ 0)
(declare-sort C_c_c_tllist_fun$ 0)
(declare-sort C_c_d_tllist_fun$ 0)
(declare-sort D_a_b_tllist_fun$ 0)
(declare-sort D_b_b_tllist_fun$ 0)
(declare-sort D_b_d_tllist_fun$ 0)
(declare-sort D_c_d_tllist_fun$ 0)
(declare-sort D_d_b_tllist_fun$ 0)
(declare-sort D_d_d_tllist_fun$ 0)
(declare-sort C_a_fun_c_a_fun_fun$ 0)
(declare-sort C_c_fun_c_a_fun_fun$ 0)
(declare-sort C_d_fun_c_b_fun_fun$ 0)
(declare-sort D_b_fun_d_b_fun_fun$ 0)
(declare-sort D_d_fun_d_b_fun_fun$ 0)
(declare-sort A_a_tllist_a_a_tllist_fun$ 0)
(declare-sort A_c_tllist_a_a_tllist_fun$ 0)
(declare-sort B_b_tllist_b_b_tllist_fun$ 0)
(declare-sort B_d_tllist_b_b_tllist_fun$ 0)
(declare-sort C_a_tllist_a_a_tllist_fun$ 0)
(declare-sort C_c_tllist_a_a_tllist_fun$ 0)
(declare-sort C_d_tllist_a_b_tllist_fun$ 0)
(declare-sort D_b_tllist_b_b_tllist_fun$ 0)
(declare-sort D_d_tllist_b_b_tllist_fun$ 0)
(declare-sort C_c_fun_c_a_a_tllist_fun_fun$ 0)
(declare-sort C_c_fun_c_a_b_tllist_fun_fun$ 0)
(declare-sort C_c_fun_c_a_c_tllist_fun_fun$ 0)
(declare-sort C_c_fun_c_c_a_tllist_fun_fun$ 0)
(declare-sort C_c_fun_c_c_c_tllist_fun_fun$ 0)
(declare-sort C_c_fun_c_c_d_tllist_fun_fun$ 0)
(declare-sort D_d_fun_d_b_b_tllist_fun_fun$ 0)
(declare-sort D_d_fun_d_b_d_tllist_fun_fun$ 0)
(declare-sort D_d_fun_d_c_d_tllist_fun_fun$ 0)
(declare-sort D_d_fun_d_d_b_tllist_fun_fun$ 0)
(declare-sort D_d_fun_d_d_d_tllist_fun_fun$ 0)
(declare-sort C_a_a_tllist_fun_c_a_a_tllist_fun_fun$ 0)
(declare-sort C_a_c_tllist_fun_c_a_a_tllist_fun_fun$ 0)
(declare-sort C_c_a_tllist_fun_c_a_a_tllist_fun_fun$ 0)
(declare-sort C_c_c_tllist_fun_c_a_a_tllist_fun_fun$ 0)
(declare-sort C_c_d_tllist_fun_c_a_b_tllist_fun_fun$ 0)
(declare-sort D_b_b_tllist_fun_d_b_b_tllist_fun_fun$ 0)
(declare-sort D_b_d_tllist_fun_d_b_b_tllist_fun_fun$ 0)
(declare-sort D_d_b_tllist_fun_d_b_b_tllist_fun_fun$ 0)
(declare-sort D_d_d_tllist_fun_d_b_b_tllist_fun_fun$ 0)
(declare-sort C_a_a_tllist_fun_c_c_fun_c_a_a_tllist_fun_fun_fun$ 0)
(declare-sort C_a_b_tllist_fun_c_c_fun_c_a_b_tllist_fun_fun_fun$ 0)
(declare-sort C_a_c_tllist_fun_c_c_fun_c_a_c_tllist_fun_fun_fun$ 0)
(declare-sort C_c_a_tllist_fun_c_c_fun_c_c_a_tllist_fun_fun_fun$ 0)
(declare-sort C_c_c_tllist_fun_c_c_fun_c_c_c_tllist_fun_fun_fun$ 0)
(declare-sort C_c_d_tllist_fun_c_c_fun_c_c_d_tllist_fun_fun_fun$ 0)
(declare-sort D_b_b_tllist_fun_d_d_fun_d_b_b_tllist_fun_fun_fun$ 0)
(declare-sort D_b_d_tllist_fun_d_d_fun_d_b_d_tllist_fun_fun_fun$ 0)
(declare-sort D_c_d_tllist_fun_d_d_fun_d_c_d_tllist_fun_fun_fun$ 0)
(declare-sort D_d_b_tllist_fun_d_d_fun_d_d_b_tllist_fun_fun_fun$ 0)
(declare-sort D_d_d_tllist_fun_d_d_fun_d_d_d_tllist_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_a_a_tllist_fun_c_c_fun_c_a_a_tllist_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_a_b_tllist_fun_c_c_fun_c_a_b_tllist_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_a_c_tllist_fun_c_c_fun_c_a_c_tllist_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_c_a_tllist_fun_c_c_fun_c_c_a_tllist_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_c_c_tllist_fun_c_c_fun_c_c_c_tllist_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_c_d_tllist_fun_c_c_fun_c_c_d_tllist_fun_fun_fun_fun$ 0)
(declare-sort D_bool_fun_d_b_b_tllist_fun_d_d_fun_d_b_b_tllist_fun_fun_fun_fun$ 0)
(declare-sort D_bool_fun_d_b_d_tllist_fun_d_d_fun_d_b_d_tllist_fun_fun_fun_fun$ 0)
(declare-sort D_bool_fun_d_c_d_tllist_fun_d_d_fun_d_c_d_tllist_fun_fun_fun_fun$ 0)
(declare-sort D_bool_fun_d_d_b_tllist_fun_d_d_fun_d_d_b_tllist_fun_fun_fun_fun$ 0)
(declare-sort D_bool_fun_d_d_d_tllist_fun_d_d_fun_d_d_d_tllist_fun_fun_fun_fun$ 0)
(declare-sort C_a_fun_c_bool_fun_c_a_a_tllist_fun_c_c_fun_c_a_a_tllist_fun_fun_fun_fun_fun$ 0)
(declare-sort C_a_fun_c_bool_fun_c_a_b_tllist_fun_c_c_fun_c_a_b_tllist_fun_fun_fun_fun_fun$ 0)
(declare-sort C_a_fun_c_bool_fun_c_a_c_tllist_fun_c_c_fun_c_a_c_tllist_fun_fun_fun_fun_fun$ 0)
(declare-sort C_c_fun_c_bool_fun_c_c_a_tllist_fun_c_c_fun_c_c_a_tllist_fun_fun_fun_fun_fun$ 0)
(declare-sort C_c_fun_c_bool_fun_c_c_c_tllist_fun_c_c_fun_c_c_c_tllist_fun_fun_fun_fun_fun$ 0)
(declare-sort C_c_fun_c_bool_fun_c_c_d_tllist_fun_c_c_fun_c_c_d_tllist_fun_fun_fun_fun_fun$ 0)
(declare-sort D_b_fun_d_bool_fun_d_b_b_tllist_fun_d_d_fun_d_b_b_tllist_fun_fun_fun_fun_fun$ 0)
(declare-sort D_b_fun_d_bool_fun_d_b_d_tllist_fun_d_d_fun_d_b_d_tllist_fun_fun_fun_fun_fun$ 0)
(declare-sort D_c_fun_d_bool_fun_d_c_d_tllist_fun_d_d_fun_d_c_d_tllist_fun_fun_fun_fun_fun$ 0)
(declare-sort D_d_fun_d_bool_fun_d_d_b_tllist_fun_d_d_fun_d_d_b_tllist_fun_fun_fun_fun_fun$ 0)
(declare-sort D_d_fun_d_bool_fun_d_d_d_tllist_fun_d_d_fun_d_d_d_tllist_fun_fun_fun_fun_fun$ 0)
(declare-sort C_a_fun_c_a_fun_c_bool_fun_c_a_a_tllist_fun_c_c_fun_c_a_a_tllist_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort C_a_fun_c_c_fun_c_bool_fun_c_c_a_tllist_fun_c_c_fun_c_c_a_tllist_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort C_b_fun_c_a_fun_c_bool_fun_c_a_b_tllist_fun_c_c_fun_c_a_b_tllist_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort C_c_fun_c_a_fun_c_bool_fun_c_a_c_tllist_fun_c_c_fun_c_a_c_tllist_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort C_c_fun_c_c_fun_c_bool_fun_c_c_c_tllist_fun_c_c_fun_c_c_c_tllist_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort C_d_fun_c_c_fun_c_bool_fun_c_c_d_tllist_fun_c_c_fun_c_c_d_tllist_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort D_b_fun_d_b_fun_d_bool_fun_d_b_b_tllist_fun_d_d_fun_d_b_b_tllist_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort D_b_fun_d_d_fun_d_bool_fun_d_d_b_tllist_fun_d_d_fun_d_d_b_tllist_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort D_d_fun_d_b_fun_d_bool_fun_d_b_d_tllist_fun_d_d_fun_d_b_d_tllist_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort D_d_fun_d_c_fun_d_bool_fun_d_c_d_tllist_fun_d_d_fun_d_c_d_tllist_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort D_d_fun_d_d_fun_d_bool_fun_d_d_d_tllist_fun_d_d_fun_d_d_d_tllist_fun_fun_fun_fun_fun_fun$ 0)
(declare-codatatypes () ((A_b_tllist$ (tNil$ (terminal$ B$)) (tCons$ (thd$ A$) (ttl$ A_b_tllist$)))
  (C_d_tllist$ (tNil$a (terminal$a D$)) (tCons$a (thd$a C$) (ttl$a C_d_tllist$)))
  (B_b_tllist$ (tNil$b (terminal$b B$)) (tCons$b (thd$b B$) (ttl$b B_b_tllist$)))
  (B_a_tllist$ (tNil$c (terminal$c A$)) (tCons$c (thd$c B$) (ttl$c B_a_tllist$)))
  (A_d_tllist$ (tNil$d (terminal$d D$)) (tCons$d (thd$d A$) (ttl$d A_d_tllist$)))
  (A_c_tllist$ (tNil$e (terminal$e C$)) (tCons$e (thd$e A$) (ttl$e A_c_tllist$)))
  (A_a_tllist$ (tNil$f (terminal$f A$)) (tCons$f (thd$f A$) (ttl$f A_a_tllist$)))
  (C_c_tllist$ (tNil$g (terminal$g C$)) (tCons$g (thd$g C$) (ttl$g C_c_tllist$)))
  (C_a_tllist$ (tNil$h (terminal$h A$)) (tCons$h (thd$h C$) (ttl$h C_a_tllist$)))
  (B_c_tllist$ (tNil$i (terminal$i C$)) (tCons$i (thd$i B$) (ttl$i B_c_tllist$)))
  (B_d_tllist$ (tNil$j (terminal$j D$)) (tCons$j (thd$j B$) (ttl$j B_d_tllist$)))
  (C_b_tllist$ (tNil$k (terminal$k B$)) (tCons$k (thd$k C$) (ttl$k C_b_tllist$)))
  (D_a_tllist$ (tNil$l (terminal$l A$)) (tCons$l (thd$l D$) (ttl$l D_a_tllist$)))
  (D_c_tllist$ (tNil$m (terminal$m C$)) (tCons$m (thd$m D$) (ttl$m D_c_tllist$)))
  (D_d_tllist$ (tNil$n (terminal$n D$)) (tCons$n (thd$n D$) (ttl$n D_d_tllist$)))
  (D_b_tllist$ (tNil$o (terminal$o B$)) (tCons$o (thd$o D$) (ttl$o D_b_tllist$)))))
(declare-fun f$ () C_a_fun$)
(declare-fun g$ () D_b_fun$)
(declare-fun id$ () C_c_fun$)
(declare-fun xs$ () C_d_tllist$)
(declare-fun id$a () D_d_fun$)
(declare-fun id$b () A_a_fun$)
(declare-fun id$c () B_b_fun$)
(declare-fun comp$ (A_a_fun$) C_a_fun_c_a_fun_fun$)
(declare-fun tmap$ (C_a_fun$ D_b_fun$) C_d_tllist_a_b_tllist_fun$)
(declare-fun comp$a (B_b_fun$) D_b_fun_d_b_fun_fun$)
(declare-fun comp$b (C_a_fun$) C_c_fun_c_a_fun_fun$)
(declare-fun comp$c (D_b_fun$) D_d_fun_d_b_fun_fun$)
(declare-fun comp$d (C_c_tllist_a_a_tllist_fun$) C_c_c_tllist_fun_c_a_a_tllist_fun_fun$)
(declare-fun comp$e (A_c_tllist_a_a_tllist_fun$) C_a_c_tllist_fun_c_a_a_tllist_fun_fun$)
(declare-fun comp$f (D_d_tllist_b_b_tllist_fun$) D_d_d_tllist_fun_d_b_b_tllist_fun_fun$)
(declare-fun comp$g (B_d_tllist_b_b_tllist_fun$) D_b_d_tllist_fun_d_b_b_tllist_fun_fun$)
(declare-fun comp$h (C_a_tllist_a_a_tllist_fun$) C_c_a_tllist_fun_c_a_a_tllist_fun_fun$)
(declare-fun comp$i (A_a_tllist_a_a_tllist_fun$) C_a_a_tllist_fun_c_a_a_tllist_fun_fun$)
(declare-fun comp$j (D_b_tllist_b_b_tllist_fun$) D_d_b_tllist_fun_d_b_b_tllist_fun_fun$)
(declare-fun comp$k (B_b_tllist_b_b_tllist_fun$) D_b_b_tllist_fun_d_b_b_tllist_fun_fun$)
(declare-fun comp$l (C_d_tllist_a_b_tllist_fun$) C_c_d_tllist_fun_c_a_b_tllist_fun_fun$)
(declare-fun comp$m (D_b_fun$) C_d_fun_c_b_fun_fun$)
(declare-fun comp$n (C_d_tllist_a_b_tllist_fun$ D_c_d_tllist_fun$) D_a_b_tllist_fun$)
(declare-fun comp$o (C_a_fun$ D_c_fun$) D_a_fun$)
(declare-fun tmap$a (B_b_fun$ B_b_fun$) B_b_tllist_b_b_tllist_fun$)
(declare-fun tmap$b (B_b_fun$ A_a_fun$ B_a_tllist$) B_a_tllist$)
(declare-fun tmap$c (A_a_fun$ D_b_fun$ A_d_tllist$) A_b_tllist$)
(declare-fun tmap$d (A_a_fun$ C_a_fun$) A_c_tllist_a_a_tllist_fun$)
(declare-fun tmap$e (A_a_fun$ A_a_fun$) A_a_tllist_a_a_tllist_fun$)
(declare-fun tmap$f (A_a_fun$ B_b_fun$ A_b_tllist$) A_b_tllist$)
(declare-fun tmap$g (A_c_fun$ B_d_fun$ A_b_tllist$) C_d_tllist$)
(declare-fun tmap$h (C_c_fun$ D_d_fun$ C_d_tllist$) C_d_tllist$)
(declare-fun tmap$i (A_a_fun$ C_c_fun$ A_c_tllist$) A_c_tllist$)
(declare-fun tmap$j (A_a_fun$ D_d_fun$ A_d_tllist$) A_d_tllist$)
(declare-fun tmap$k (B_b_fun$ C_c_fun$ B_c_tllist$) B_c_tllist$)
(declare-fun tmap$l (B_b_fun$ D_d_fun$ B_d_tllist$) B_d_tllist$)
(declare-fun tmap$m (C_c_fun$ A_a_fun$ C_a_tllist$) C_a_tllist$)
(declare-fun tmap$n (C_c_fun$ B_b_fun$ C_b_tllist$) C_b_tllist$)
(declare-fun tmap$o (C_c_fun$ C_c_fun$ C_c_tllist$) C_c_tllist$)
(declare-fun tmap$p (D_d_fun$ A_a_fun$ D_a_tllist$) D_a_tllist$)
(declare-fun tmap$q (C_a_fun$ C_a_fun$) C_c_tllist_a_a_tllist_fun$)
(declare-fun tmap$r (C_a_fun$ A_a_fun$) C_a_tllist_a_a_tllist_fun$)
(declare-fun tmap$s (C_c_fun$ C_a_fun$ C_c_tllist$) C_a_tllist$)
(declare-fun tmap$t (D_b_fun$ C_a_fun$ D_c_tllist$) B_a_tllist$)
(declare-fun tmap$u (D_d_fun$ C_c_fun$ D_c_tllist$) D_c_tllist$)
(declare-fun tmap$v (D_b_fun$ D_b_fun$) D_d_tllist_b_b_tllist_fun$)
(declare-fun tmap$w (D_d_fun$ D_d_fun$ D_d_tllist$) D_d_tllist$)
(declare-fun tmap$x (D_b_fun$ A_a_fun$ D_a_tllist$) B_a_tllist$)
(declare-fun tmap$y (D_d_fun$ C_a_fun$ D_c_tllist$) D_a_tllist$)
(declare-fun tmap$z (D_b_fun$ B_b_fun$) D_b_tllist_b_b_tllist_fun$)
(declare-fun tmap$aa (D_d_fun$ D_b_fun$ D_d_tllist$) D_b_tllist$)
(declare-fun tmap$ab (C_a_fun$ C_c_fun$ C_c_tllist$) A_c_tllist$)
(declare-fun tmap$ac (B_b_fun$ D_b_fun$) B_d_tllist_b_b_tllist_fun$)
(declare-fun fun_app$ (C_d_tllist_a_b_tllist_fun$ C_d_tllist$) A_b_tllist$)
(declare-fun is_TNil$ (B_b_tllist$) Bool)
(declare-fun fun_app$a (B_b_tllist_b_b_tllist_fun$ B_b_tllist$) B_b_tllist$)
(declare-fun fun_app$b (A_c_tllist_a_a_tllist_fun$ A_c_tllist$) A_a_tllist$)
(declare-fun fun_app$c (A_a_tllist_a_a_tllist_fun$ A_a_tllist$) A_a_tllist$)
(declare-fun fun_app$d (C_bool_fun$ C$) Bool)
(declare-fun fun_app$e (C_c_c_tllist_fun$ C$) C_c_tllist$)
(declare-fun fun_app$f (C_c_fun_c_c_c_tllist_fun_fun$ C_c_fun$) C_c_c_tllist_fun$)
(declare-fun fun_app$g (C_c_c_tllist_fun_c_c_fun_c_c_c_tllist_fun_fun_fun$ C_c_c_tllist_fun$) C_c_fun_c_c_c_tllist_fun_fun$)
(declare-fun fun_app$h (C_bool_fun_c_c_c_tllist_fun_c_c_fun_c_c_c_tllist_fun_fun_fun_fun$ C_bool_fun$) C_c_c_tllist_fun_c_c_fun_c_c_c_tllist_fun_fun_fun$)
(declare-fun fun_app$i (C_c_fun_c_bool_fun_c_c_c_tllist_fun_c_c_fun_c_c_c_tllist_fun_fun_fun_fun_fun$ C_c_fun$) C_bool_fun_c_c_c_tllist_fun_c_c_fun_c_c_c_tllist_fun_fun_fun_fun$)
(declare-fun fun_app$j (C_c_fun_c_c_fun_c_bool_fun_c_c_c_tllist_fun_c_c_fun_c_c_c_tllist_fun_fun_fun_fun_fun_fun$ C_c_fun$) C_c_fun_c_bool_fun_c_c_c_tllist_fun_c_c_fun_c_c_c_tllist_fun_fun_fun_fun_fun$)
(declare-fun fun_app$k (C_c_fun$ C$) C$)
(declare-fun fun_app$l (C_a_c_tllist_fun$ C$) A_c_tllist$)
(declare-fun fun_app$m (C_c_fun_c_a_c_tllist_fun_fun$ C_c_fun$) C_a_c_tllist_fun$)
(declare-fun fun_app$n (C_a_c_tllist_fun_c_c_fun_c_a_c_tllist_fun_fun_fun$ C_a_c_tllist_fun$) C_c_fun_c_a_c_tllist_fun_fun$)
(declare-fun fun_app$o (C_bool_fun_c_a_c_tllist_fun_c_c_fun_c_a_c_tllist_fun_fun_fun_fun$ C_bool_fun$) C_a_c_tllist_fun_c_c_fun_c_a_c_tllist_fun_fun_fun$)
(declare-fun fun_app$p (C_a_fun_c_bool_fun_c_a_c_tllist_fun_c_c_fun_c_a_c_tllist_fun_fun_fun_fun_fun$ C_a_fun$) C_bool_fun_c_a_c_tllist_fun_c_c_fun_c_a_c_tllist_fun_fun_fun_fun$)
(declare-fun fun_app$q (C_c_fun_c_a_fun_c_bool_fun_c_a_c_tllist_fun_c_c_fun_c_a_c_tllist_fun_fun_fun_fun_fun_fun$ C_c_fun$) C_a_fun_c_bool_fun_c_a_c_tllist_fun_c_c_fun_c_a_c_tllist_fun_fun_fun_fun_fun$)
(declare-fun fun_app$r (C_a_b_tllist_fun$ C$) A_b_tllist$)
(declare-fun fun_app$s (C_c_fun_c_a_b_tllist_fun_fun$ C_c_fun$) C_a_b_tllist_fun$)
(declare-fun fun_app$t (C_a_b_tllist_fun_c_c_fun_c_a_b_tllist_fun_fun_fun$ C_a_b_tllist_fun$) C_c_fun_c_a_b_tllist_fun_fun$)
(declare-fun fun_app$u (C_bool_fun_c_a_b_tllist_fun_c_c_fun_c_a_b_tllist_fun_fun_fun_fun$ C_bool_fun$) C_a_b_tllist_fun_c_c_fun_c_a_b_tllist_fun_fun_fun$)
(declare-fun fun_app$v (C_a_fun_c_bool_fun_c_a_b_tllist_fun_c_c_fun_c_a_b_tllist_fun_fun_fun_fun_fun$ C_a_fun$) C_bool_fun_c_a_b_tllist_fun_c_c_fun_c_a_b_tllist_fun_fun_fun_fun$)
(declare-fun fun_app$w (C_b_fun_c_a_fun_c_bool_fun_c_a_b_tllist_fun_c_c_fun_c_a_b_tllist_fun_fun_fun_fun_fun_fun$ C_b_fun$) C_a_fun_c_bool_fun_c_a_b_tllist_fun_c_c_fun_c_a_b_tllist_fun_fun_fun_fun_fun$)
(declare-fun fun_app$x (C_c_a_tllist_fun$ C$) C_a_tllist$)
(declare-fun fun_app$y (C_c_fun_c_c_a_tllist_fun_fun$ C_c_fun$) C_c_a_tllist_fun$)
(declare-fun fun_app$z (C_c_a_tllist_fun_c_c_fun_c_c_a_tllist_fun_fun_fun$ C_c_a_tllist_fun$) C_c_fun_c_c_a_tllist_fun_fun$)
(declare-fun is_TNil$a (B_a_tllist$) Bool)
(declare-fun is_TNil$b (A_d_tllist$) Bool)
(declare-fun is_TNil$c (A_c_tllist$) Bool)
(declare-fun is_TNil$d (A_a_tllist$) Bool)
(declare-fun is_TNil$e (A_b_tllist$) Bool)
(declare-fun is_TNil$f (C_d_tllist$) Bool)
(declare-fun is_TNil$g (C_c_tllist$) Bool)
(declare-fun is_TNil$h (C_a_tllist$) Bool)
(declare-fun fun_app$aa (C_bool_fun_c_c_a_tllist_fun_c_c_fun_c_c_a_tllist_fun_fun_fun_fun$ C_bool_fun$) C_c_a_tllist_fun_c_c_fun_c_c_a_tllist_fun_fun_fun$)
(declare-fun fun_app$ab (C_c_fun_c_bool_fun_c_c_a_tllist_fun_c_c_fun_c_c_a_tllist_fun_fun_fun_fun_fun$ C_c_fun$) C_bool_fun_c_c_a_tllist_fun_c_c_fun_c_c_a_tllist_fun_fun_fun_fun$)
(declare-fun fun_app$ac (C_a_fun_c_c_fun_c_bool_fun_c_c_a_tllist_fun_c_c_fun_c_c_a_tllist_fun_fun_fun_fun_fun_fun$ C_a_fun$) C_c_fun_c_bool_fun_c_c_a_tllist_fun_c_c_fun_c_c_a_tllist_fun_fun_fun_fun_fun$)
(declare-fun fun_app$ad (C_a_a_tllist_fun$ C$) A_a_tllist$)
(declare-fun fun_app$ae (C_c_fun_c_a_a_tllist_fun_fun$ C_c_fun$) C_a_a_tllist_fun$)
(declare-fun fun_app$af (C_a_a_tllist_fun_c_c_fun_c_a_a_tllist_fun_fun_fun$ C_a_a_tllist_fun$) C_c_fun_c_a_a_tllist_fun_fun$)
(declare-fun fun_app$ag (C_bool_fun_c_a_a_tllist_fun_c_c_fun_c_a_a_tllist_fun_fun_fun_fun$ C_bool_fun$) C_a_a_tllist_fun_c_c_fun_c_a_a_tllist_fun_fun_fun$)
(declare-fun fun_app$ah (C_a_fun_c_bool_fun_c_a_a_tllist_fun_c_c_fun_c_a_a_tllist_fun_fun_fun_fun_fun$ C_a_fun$) C_bool_fun_c_a_a_tllist_fun_c_c_fun_c_a_a_tllist_fun_fun_fun_fun$)
(declare-fun fun_app$ai (C_a_fun_c_a_fun_c_bool_fun_c_a_a_tllist_fun_c_c_fun_c_a_a_tllist_fun_fun_fun_fun_fun_fun$ C_a_fun$) C_a_fun_c_bool_fun_c_a_a_tllist_fun_c_c_fun_c_a_a_tllist_fun_fun_fun_fun_fun$)
(declare-fun fun_app$aj (B_b_fun$ B$) B$)
(declare-fun fun_app$ak (A_a_fun$ A$) A$)
(declare-fun fun_app$al (D_b_fun$ D$) B$)
(declare-fun fun_app$am (C_a_fun$ C$) A$)
(declare-fun fun_app$an (D_d_fun$ D$) D$)
(declare-fun fun_app$ao (B_d_fun$ B$) D$)
(declare-fun fun_app$ap (A_c_fun$ A$) C$)
(declare-fun fun_app$aq (C_a_fun_c_a_fun_fun$ C_a_fun$) C_a_fun$)
(declare-fun fun_app$ar (D_b_fun_d_b_fun_fun$ D_b_fun$) D_b_fun$)
(declare-fun fun_app$as (C_c_fun_c_a_fun_fun$ C_c_fun$) C_a_fun$)
(declare-fun fun_app$at (D_d_fun_d_b_fun_fun$ D_d_fun$) D_b_fun$)
(declare-fun fun_app$au (C_c_tllist_a_a_tllist_fun$ C_c_tllist$) A_a_tllist$)
(declare-fun fun_app$av (C_a_tllist_a_a_tllist_fun$ C_a_tllist$) A_a_tllist$)
(declare-fun fun_app$aw (D_d_tllist_b_b_tllist_fun$ D_d_tllist$) B_b_tllist$)
(declare-fun fun_app$ax (D_b_tllist_b_b_tllist_fun$ D_b_tllist$) B_b_tllist$)
(declare-fun fun_app$ay (C_b_fun$ C$) B$)
(declare-fun fun_app$az (C_c_c_tllist_fun_c_a_a_tllist_fun_fun$ C_c_c_tllist_fun$) C_a_a_tllist_fun$)
(declare-fun fun_app$ba (C_a_c_tllist_fun_c_a_a_tllist_fun_fun$ C_a_c_tllist_fun$) C_a_a_tllist_fun$)
(declare-fun fun_app$bb (D_d_d_tllist_fun_d_b_b_tllist_fun_fun$ D_d_d_tllist_fun$) D_b_b_tllist_fun$)
(declare-fun fun_app$bc (D_d_fun_d_d_d_tllist_fun_fun$ D_d_fun$) D_d_d_tllist_fun$)
(declare-fun fun_app$bd (D_d_d_tllist_fun_d_d_fun_d_d_d_tllist_fun_fun_fun$ D_d_d_tllist_fun$) D_d_fun_d_d_d_tllist_fun_fun$)
(declare-fun fun_app$be (D_bool_fun_d_d_d_tllist_fun_d_d_fun_d_d_d_tllist_fun_fun_fun_fun$ D_bool_fun$) D_d_d_tllist_fun_d_d_fun_d_d_d_tllist_fun_fun_fun$)
(declare-fun fun_app$bf (D_d_fun_d_bool_fun_d_d_d_tllist_fun_d_d_fun_d_d_d_tllist_fun_fun_fun_fun_fun$ D_d_fun$) D_bool_fun_d_d_d_tllist_fun_d_d_fun_d_d_d_tllist_fun_fun_fun_fun$)
(declare-fun fun_app$bg (D_d_fun_d_d_fun_d_bool_fun_d_d_d_tllist_fun_d_d_fun_d_d_d_tllist_fun_fun_fun_fun_fun_fun$ D_d_fun$) D_d_fun_d_bool_fun_d_d_d_tllist_fun_d_d_fun_d_d_d_tllist_fun_fun_fun_fun_fun$)
(declare-fun fun_app$bh (D_d_fun_d_b_b_tllist_fun_fun$ D_d_fun$) D_b_b_tllist_fun$)
(declare-fun fun_app$bi (D_b_b_tllist_fun_d_d_fun_d_b_b_tllist_fun_fun_fun$ D_b_b_tllist_fun$) D_d_fun_d_b_b_tllist_fun_fun$)
(declare-fun fun_app$bj (D_bool_fun_d_b_b_tllist_fun_d_d_fun_d_b_b_tllist_fun_fun_fun_fun$ D_bool_fun$) D_b_b_tllist_fun_d_d_fun_d_b_b_tllist_fun_fun_fun$)
(declare-fun fun_app$bk (D_b_fun_d_bool_fun_d_b_b_tllist_fun_d_d_fun_d_b_b_tllist_fun_fun_fun_fun_fun$ D_b_fun$) D_bool_fun_d_b_b_tllist_fun_d_d_fun_d_b_b_tllist_fun_fun_fun_fun$)
(declare-fun fun_app$bl (D_b_fun_d_b_fun_d_bool_fun_d_b_b_tllist_fun_d_d_fun_d_b_b_tllist_fun_fun_fun_fun_fun_fun$ D_b_fun$) D_b_fun_d_bool_fun_d_b_b_tllist_fun_d_d_fun_d_b_b_tllist_fun_fun_fun_fun_fun$)
(declare-fun fun_app$bm (D_b_d_tllist_fun_d_b_b_tllist_fun_fun$ D_b_d_tllist_fun$) D_b_b_tllist_fun$)
(declare-fun fun_app$bn (D_d_fun_d_b_d_tllist_fun_fun$ D_d_fun$) D_b_d_tllist_fun$)
(declare-fun fun_app$bo (D_b_d_tllist_fun_d_d_fun_d_b_d_tllist_fun_fun_fun$ D_b_d_tllist_fun$) D_d_fun_d_b_d_tllist_fun_fun$)
(declare-fun fun_app$bp (D_bool_fun_d_b_d_tllist_fun_d_d_fun_d_b_d_tllist_fun_fun_fun_fun$ D_bool_fun$) D_b_d_tllist_fun_d_d_fun_d_b_d_tllist_fun_fun_fun$)
(declare-fun fun_app$bq (D_b_fun_d_bool_fun_d_b_d_tllist_fun_d_d_fun_d_b_d_tllist_fun_fun_fun_fun_fun$ D_b_fun$) D_bool_fun_d_b_d_tllist_fun_d_d_fun_d_b_d_tllist_fun_fun_fun_fun$)
(declare-fun fun_app$br (D_d_fun_d_b_fun_d_bool_fun_d_b_d_tllist_fun_d_d_fun_d_b_d_tllist_fun_fun_fun_fun_fun_fun$ D_d_fun$) D_b_fun_d_bool_fun_d_b_d_tllist_fun_d_d_fun_d_b_d_tllist_fun_fun_fun_fun_fun$)
(declare-fun fun_app$bs (C_c_a_tllist_fun_c_a_a_tllist_fun_fun$ C_c_a_tllist_fun$) C_a_a_tllist_fun$)
(declare-fun fun_app$bt (C_a_a_tllist_fun_c_a_a_tllist_fun_fun$ C_a_a_tllist_fun$) C_a_a_tllist_fun$)
(declare-fun fun_app$bu (D_d_b_tllist_fun_d_b_b_tllist_fun_fun$ D_d_b_tllist_fun$) D_b_b_tllist_fun$)
(declare-fun fun_app$bv (D_d_fun_d_d_b_tllist_fun_fun$ D_d_fun$) D_d_b_tllist_fun$)
(declare-fun fun_app$bw (D_d_b_tllist_fun_d_d_fun_d_d_b_tllist_fun_fun_fun$ D_d_b_tllist_fun$) D_d_fun_d_d_b_tllist_fun_fun$)
(declare-fun fun_app$bx (D_bool_fun_d_d_b_tllist_fun_d_d_fun_d_d_b_tllist_fun_fun_fun_fun$ D_bool_fun$) D_d_b_tllist_fun_d_d_fun_d_d_b_tllist_fun_fun_fun$)
(declare-fun fun_app$by (D_d_fun_d_bool_fun_d_d_b_tllist_fun_d_d_fun_d_d_b_tllist_fun_fun_fun_fun_fun$ D_d_fun$) D_bool_fun_d_d_b_tllist_fun_d_d_fun_d_d_b_tllist_fun_fun_fun_fun$)
(declare-fun fun_app$bz (D_b_fun_d_d_fun_d_bool_fun_d_d_b_tllist_fun_d_d_fun_d_d_b_tllist_fun_fun_fun_fun_fun_fun$ D_b_fun$) D_d_fun_d_bool_fun_d_d_b_tllist_fun_d_d_fun_d_d_b_tllist_fun_fun_fun_fun_fun$)
(declare-fun fun_app$ca (D_b_b_tllist_fun_d_b_b_tllist_fun_fun$ D_b_b_tllist_fun$) D_b_b_tllist_fun$)
(declare-fun fun_app$cb (C_c_d_tllist_fun_c_a_b_tllist_fun_fun$ C_c_d_tllist_fun$) C_a_b_tllist_fun$)
(declare-fun fun_app$cc (C_c_fun_c_c_d_tllist_fun_fun$ C_c_fun$) C_c_d_tllist_fun$)
(declare-fun fun_app$cd (C_c_d_tllist_fun_c_c_fun_c_c_d_tllist_fun_fun_fun$ C_c_d_tllist_fun$) C_c_fun_c_c_d_tllist_fun_fun$)
(declare-fun fun_app$ce (C_bool_fun_c_c_d_tllist_fun_c_c_fun_c_c_d_tllist_fun_fun_fun_fun$ C_bool_fun$) C_c_d_tllist_fun_c_c_fun_c_c_d_tllist_fun_fun_fun$)
(declare-fun fun_app$cf (C_c_fun_c_bool_fun_c_c_d_tllist_fun_c_c_fun_c_c_d_tllist_fun_fun_fun_fun_fun$ C_c_fun$) C_bool_fun_c_c_d_tllist_fun_c_c_fun_c_c_d_tllist_fun_fun_fun_fun$)
(declare-fun fun_app$cg (C_d_fun_c_c_fun_c_bool_fun_c_c_d_tllist_fun_c_c_fun_c_c_d_tllist_fun_fun_fun_fun_fun_fun$ C_d_fun$) C_c_fun_c_bool_fun_c_c_d_tllist_fun_c_c_fun_c_c_d_tllist_fun_fun_fun_fun_fun$)
(declare-fun fun_app$ch (C_d_fun_c_b_fun_fun$ C_d_fun$) C_b_fun$)
(declare-fun fun_app$ci (D_d_fun_d_c_d_tllist_fun_fun$ D_d_fun$) D_c_d_tllist_fun$)
(declare-fun fun_app$cj (D_c_d_tllist_fun_d_d_fun_d_c_d_tllist_fun_fun_fun$ D_c_d_tllist_fun$) D_d_fun_d_c_d_tllist_fun_fun$)
(declare-fun fun_app$ck (D_bool_fun_d_c_d_tllist_fun_d_d_fun_d_c_d_tllist_fun_fun_fun_fun$ D_bool_fun$) D_c_d_tllist_fun_d_d_fun_d_c_d_tllist_fun_fun_fun$)
(declare-fun fun_app$cl (D_c_fun_d_bool_fun_d_c_d_tllist_fun_d_d_fun_d_c_d_tllist_fun_fun_fun_fun_fun$ D_c_fun$) D_bool_fun_d_c_d_tllist_fun_d_d_fun_d_c_d_tllist_fun_fun_fun_fun$)
(declare-fun fun_app$cm (D_d_fun_d_c_fun_d_bool_fun_d_c_d_tllist_fun_d_d_fun_d_c_d_tllist_fun_fun_fun_fun_fun_fun$ D_d_fun$) D_c_fun_d_bool_fun_d_c_d_tllist_fun_d_d_fun_d_c_d_tllist_fun_fun_fun_fun_fun$)
(declare-fun corec_tllist$ (C_bool_fun$) C_c_fun_c_c_fun_c_bool_fun_c_c_c_tllist_fun_c_c_fun_c_c_c_tllist_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_tllist$a (C_bool_fun$) C_c_fun_c_a_fun_c_bool_fun_c_a_c_tllist_fun_c_c_fun_c_a_c_tllist_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_tllist$b (C_bool_fun$) C_b_fun_c_a_fun_c_bool_fun_c_a_b_tllist_fun_c_c_fun_c_a_b_tllist_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_tllist$c (C_bool_fun$) C_a_fun_c_c_fun_c_bool_fun_c_c_a_tllist_fun_c_c_fun_c_c_a_tllist_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_tllist$d (C_bool_fun$) C_a_fun_c_a_fun_c_bool_fun_c_a_a_tllist_fun_c_c_fun_c_a_a_tllist_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_tllist$e (D_bool_fun$) D_d_fun_d_d_fun_d_bool_fun_d_d_d_tllist_fun_d_d_fun_d_d_d_tllist_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_tllist$f (D_bool_fun$) D_b_fun_d_b_fun_d_bool_fun_d_b_b_tllist_fun_d_d_fun_d_b_b_tllist_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_tllist$g (D_bool_fun$) D_d_fun_d_b_fun_d_bool_fun_d_b_d_tllist_fun_d_d_fun_d_b_d_tllist_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_tllist$h (D_bool_fun$) D_b_fun_d_d_fun_d_bool_fun_d_d_b_tllist_fun_d_d_fun_d_d_b_tllist_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_tllist$i (C_bool_fun$) C_d_fun_c_c_fun_c_bool_fun_c_c_d_tllist_fun_c_c_fun_c_c_d_tllist_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_tllist$j (D_bool_fun$) D_d_fun_d_c_fun_d_bool_fun_d_c_d_tllist_fun_d_d_fun_d_c_d_tllist_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_tllist$k (D_bool_fun$ D_b_fun$ D_a_fun$ D_bool_fun$ D_a_b_tllist_fun$ D_d_fun$) D_a_b_tllist_fun$)
(assert (! (not (= (ttl$ (fun_app$ (tmap$ f$ g$) xs$)) (fun_app$ (tmap$ f$ g$) (ttl$a xs$)))) :named a0))
(assert (! (forall ((?v0 B_b_tllist$) (?v1 B_b_fun$) (?v2 B_b_fun$)) (=> (not (is_TNil$ ?v0)) (= (ttl$b (fun_app$a (tmap$a ?v1 ?v2) ?v0)) (fun_app$a (tmap$a ?v1 ?v2) (ttl$b ?v0))))) :named a1))
(assert (! (forall ((?v0 B_a_tllist$) (?v1 B_b_fun$) (?v2 A_a_fun$)) (=> (not (is_TNil$a ?v0)) (= (ttl$c (tmap$b ?v1 ?v2 ?v0)) (tmap$b ?v1 ?v2 (ttl$c ?v0))))) :named a2))
(assert (! (forall ((?v0 A_d_tllist$) (?v1 A_a_fun$) (?v2 D_b_fun$)) (=> (not (is_TNil$b ?v0)) (= (ttl$ (tmap$c ?v1 ?v2 ?v0)) (tmap$c ?v1 ?v2 (ttl$d ?v0))))) :named a3))
(assert (! (forall ((?v0 A_c_tllist$) (?v1 A_a_fun$) (?v2 C_a_fun$)) (=> (not (is_TNil$c ?v0)) (= (ttl$f (fun_app$b (tmap$d ?v1 ?v2) ?v0)) (fun_app$b (tmap$d ?v1 ?v2) (ttl$e ?v0))))) :named a4))
(assert (! (forall ((?v0 A_a_tllist$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (=> (not (is_TNil$d ?v0)) (= (ttl$f (fun_app$c (tmap$e ?v1 ?v2) ?v0)) (fun_app$c (tmap$e ?v1 ?v2) (ttl$f ?v0))))) :named a5))
(assert (! (forall ((?v0 A_b_tllist$) (?v1 A_a_fun$) (?v2 B_b_fun$)) (=> (not (is_TNil$e ?v0)) (= (ttl$ (tmap$f ?v1 ?v2 ?v0)) (tmap$f ?v1 ?v2 (ttl$ ?v0))))) :named a6))
(assert (! (forall ((?v0 A_b_tllist$) (?v1 A_c_fun$) (?v2 B_d_fun$)) (=> (not (is_TNil$e ?v0)) (= (ttl$a (tmap$g ?v1 ?v2 ?v0)) (tmap$g ?v1 ?v2 (ttl$ ?v0))))) :named a7))
(assert (! (forall ((?v0 C_d_tllist$) (?v1 C_c_fun$) (?v2 D_d_fun$)) (=> (not (is_TNil$f ?v0)) (= (ttl$a (tmap$h ?v1 ?v2 ?v0)) (tmap$h ?v1 ?v2 (ttl$a ?v0))))) :named a8))
(assert (! (forall ((?v0 C_d_tllist$) (?v1 C_a_fun$) (?v2 D_b_fun$)) (=> (not (is_TNil$f ?v0)) (= (ttl$ (fun_app$ (tmap$ ?v1 ?v2) ?v0)) (fun_app$ (tmap$ ?v1 ?v2) (ttl$a ?v0))))) :named a9))
(assert (! (forall ((?v0 A_b_tllist$)) (= (terminal$ (ttl$ ?v0)) (terminal$ ?v0))) :named a10))
(assert (! (forall ((?v0 C_d_tllist$)) (= (terminal$a (ttl$a ?v0)) (terminal$a ?v0))) :named a11))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_c_fun$) (?v3 C_c_fun$) (?v4 C_bool_fun$) (?v5 C_c_c_tllist_fun$) (?v6 C_c_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (= (ttl$g (fun_app$e (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_tllist$ ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) ?v1)) (ite (fun_app$d ?v4 ?v1) (fun_app$e ?v5 ?v1) (fun_app$e (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_tllist$ ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) (fun_app$k ?v6 ?v1)))))) :named a12))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_c_fun$) (?v3 C_a_fun$) (?v4 C_bool_fun$) (?v5 C_a_c_tllist_fun$) (?v6 C_c_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (= (ttl$e (fun_app$l (fun_app$m (fun_app$n (fun_app$o (fun_app$p (fun_app$q (corec_tllist$a ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) ?v1)) (ite (fun_app$d ?v4 ?v1) (fun_app$l ?v5 ?v1) (fun_app$l (fun_app$m (fun_app$n (fun_app$o (fun_app$p (fun_app$q (corec_tllist$a ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) (fun_app$k ?v6 ?v1)))))) :named a13))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_fun$) (?v3 C_a_fun$) (?v4 C_bool_fun$) (?v5 C_a_b_tllist_fun$) (?v6 C_c_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (= (ttl$ (fun_app$r (fun_app$s (fun_app$t (fun_app$u (fun_app$v (fun_app$w (corec_tllist$b ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) ?v1)) (ite (fun_app$d ?v4 ?v1) (fun_app$r ?v5 ?v1) (fun_app$r (fun_app$s (fun_app$t (fun_app$u (fun_app$v (fun_app$w (corec_tllist$b ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) (fun_app$k ?v6 ?v1)))))) :named a14))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_c_fun$) (?v4 C_bool_fun$) (?v5 C_c_a_tllist_fun$) (?v6 C_c_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (= (ttl$h (fun_app$x (fun_app$y (fun_app$z (fun_app$aa (fun_app$ab (fun_app$ac (corec_tllist$c ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) ?v1)) (ite (fun_app$d ?v4 ?v1) (fun_app$x ?v5 ?v1) (fun_app$x (fun_app$y (fun_app$z (fun_app$aa (fun_app$ab (fun_app$ac (corec_tllist$c ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) (fun_app$k ?v6 ?v1)))))) :named a15))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_a_fun$) (?v4 C_bool_fun$) (?v5 C_a_a_tllist_fun$) (?v6 C_c_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (= (ttl$f (fun_app$ad (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tllist$d ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) ?v1)) (ite (fun_app$d ?v4 ?v1) (fun_app$ad ?v5 ?v1) (fun_app$ad (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tllist$d ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) (fun_app$k ?v6 ?v1)))))) :named a16))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B_b_tllist$)) (= (is_TNil$ (fun_app$a (tmap$a ?v0 ?v1) ?v2)) (is_TNil$ ?v2))) :named a17))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_a_fun$) (?v2 B_a_tllist$)) (= (is_TNil$a (tmap$b ?v0 ?v1 ?v2)) (is_TNil$a ?v2))) :named a18))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 A_c_tllist$)) (= (is_TNil$d (fun_app$b (tmap$d ?v0 ?v1) ?v2)) (is_TNil$c ?v2))) :named a19))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_tllist$)) (= (is_TNil$d (fun_app$c (tmap$e ?v0 ?v1) ?v2)) (is_TNil$d ?v2))) :named a20))
(assert (! (forall ((?v0 A_a_fun$) (?v1 D_b_fun$) (?v2 A_d_tllist$)) (= (is_TNil$e (tmap$c ?v0 ?v1 ?v2)) (is_TNil$b ?v2))) :named a21))
(assert (! (forall ((?v0 C_c_fun$) (?v1 D_d_fun$) (?v2 C_d_tllist$)) (= (is_TNil$f (tmap$h ?v0 ?v1 ?v2)) (is_TNil$f ?v2))) :named a22))
(assert (! (forall ((?v0 A_c_fun$) (?v1 B_d_fun$) (?v2 A_b_tllist$)) (= (is_TNil$f (tmap$g ?v0 ?v1 ?v2)) (is_TNil$e ?v2))) :named a23))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 A_b_tllist$)) (= (is_TNil$e (tmap$f ?v0 ?v1 ?v2)) (is_TNil$e ?v2))) :named a24))
(assert (! (forall ((?v0 C_a_fun$) (?v1 D_b_fun$) (?v2 C_d_tllist$)) (= (is_TNil$e (fun_app$ (tmap$ ?v0 ?v1) ?v2)) (is_TNil$f ?v2))) :named a25))
(assert (! (forall ((?v0 B$)) (! (= (ttl$ (tNil$ ?v0)) (tNil$ ?v0)) :pattern ((tNil$ ?v0)))) :named a26))
(assert (! (forall ((?v0 D$)) (! (= (ttl$a (tNil$a ?v0)) (tNil$a ?v0)) :pattern ((tNil$a ?v0)))) :named a27))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$a (tmap$a ?v0 ?v1) (tNil$b ?v2)) (tNil$b (fun_app$aj ?v1 ?v2))) :pattern ((fun_app$a (tmap$a ?v0 ?v1) (tNil$b ?v2))))) :named a28))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (tmap$b ?v0 ?v1 (tNil$c ?v2)) (tNil$c (fun_app$ak ?v1 ?v2))) :pattern ((tmap$b ?v0 ?v1 (tNil$c ?v2))))) :named a29))
(assert (! (forall ((?v0 A_a_fun$) (?v1 D_b_fun$) (?v2 D$)) (! (= (tmap$c ?v0 ?v1 (tNil$d ?v2)) (tNil$ (fun_app$al ?v1 ?v2))) :pattern ((tmap$c ?v0 ?v1 (tNil$d ?v2))))) :named a30))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C$)) (! (= (fun_app$b (tmap$d ?v0 ?v1) (tNil$e ?v2)) (tNil$f (fun_app$am ?v1 ?v2))) :pattern ((fun_app$b (tmap$d ?v0 ?v1) (tNil$e ?v2))))) :named a31))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$c (tmap$e ?v0 ?v1) (tNil$f ?v2)) (tNil$f (fun_app$ak ?v1 ?v2))) :pattern ((fun_app$c (tmap$e ?v0 ?v1) (tNil$f ?v2))))) :named a32))
(assert (! (forall ((?v0 C_c_fun$) (?v1 D_d_fun$) (?v2 D$)) (! (= (tmap$h ?v0 ?v1 (tNil$a ?v2)) (tNil$a (fun_app$an ?v1 ?v2))) :pattern ((tmap$h ?v0 ?v1 (tNil$a ?v2))))) :named a33))
(assert (! (forall ((?v0 A_c_fun$) (?v1 B_d_fun$) (?v2 B$)) (! (= (tmap$g ?v0 ?v1 (tNil$ ?v2)) (tNil$a (fun_app$ao ?v1 ?v2))) :pattern ((tmap$g ?v0 ?v1 (tNil$ ?v2))))) :named a34))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (tmap$f ?v0 ?v1 (tNil$ ?v2)) (tNil$ (fun_app$aj ?v1 ?v2))) :pattern ((tmap$f ?v0 ?v1 (tNil$ ?v2))))) :named a35))
(assert (! (forall ((?v0 C_a_fun$) (?v1 D_b_fun$) (?v2 D$)) (! (= (fun_app$ (tmap$ ?v0 ?v1) (tNil$a ?v2)) (tNil$ (fun_app$al ?v1 ?v2))) :pattern ((fun_app$ (tmap$ ?v0 ?v1) (tNil$a ?v2))))) :named a36))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (! (= (ttl$ (tCons$ ?v0 ?v1)) ?v1) :pattern ((tCons$ ?v0 ?v1)))) :named a37))
(assert (! (forall ((?v0 C$) (?v1 C_d_tllist$)) (! (= (ttl$a (tCons$a ?v0 ?v1)) ?v1) :pattern ((tCons$a ?v0 ?v1)))) :named a38))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B$) (?v3 B_b_tllist$)) (! (= (fun_app$a (tmap$a ?v0 ?v1) (tCons$b ?v2 ?v3)) (tCons$b (fun_app$aj ?v0 ?v2) (fun_app$a (tmap$a ?v0 ?v1) ?v3))) :pattern ((fun_app$a (tmap$a ?v0 ?v1) (tCons$b ?v2 ?v3))))) :named a39))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_a_fun$) (?v2 B$) (?v3 B_a_tllist$)) (! (= (tmap$b ?v0 ?v1 (tCons$c ?v2 ?v3)) (tCons$c (fun_app$aj ?v0 ?v2) (tmap$b ?v0 ?v1 ?v3))) :pattern ((tmap$b ?v0 ?v1 (tCons$c ?v2 ?v3))))) :named a40))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 A$) (?v3 A_c_tllist$)) (! (= (fun_app$b (tmap$d ?v0 ?v1) (tCons$e ?v2 ?v3)) (tCons$f (fun_app$ak ?v0 ?v2) (fun_app$b (tmap$d ?v0 ?v1) ?v3))) :pattern ((fun_app$b (tmap$d ?v0 ?v1) (tCons$e ?v2 ?v3))))) :named a41))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$) (?v3 A_a_tllist$)) (! (= (fun_app$c (tmap$e ?v0 ?v1) (tCons$f ?v2 ?v3)) (tCons$f (fun_app$ak ?v0 ?v2) (fun_app$c (tmap$e ?v0 ?v1) ?v3))) :pattern ((fun_app$c (tmap$e ?v0 ?v1) (tCons$f ?v2 ?v3))))) :named a42))
(assert (! (forall ((?v0 A_a_fun$) (?v1 D_b_fun$) (?v2 A$) (?v3 A_d_tllist$)) (! (= (tmap$c ?v0 ?v1 (tCons$d ?v2 ?v3)) (tCons$ (fun_app$ak ?v0 ?v2) (tmap$c ?v0 ?v1 ?v3))) :pattern ((tmap$c ?v0 ?v1 (tCons$d ?v2 ?v3))))) :named a43))
(assert (! (forall ((?v0 C_c_fun$) (?v1 D_d_fun$) (?v2 C$) (?v3 C_d_tllist$)) (! (= (tmap$h ?v0 ?v1 (tCons$a ?v2 ?v3)) (tCons$a (fun_app$k ?v0 ?v2) (tmap$h ?v0 ?v1 ?v3))) :pattern ((tmap$h ?v0 ?v1 (tCons$a ?v2 ?v3))))) :named a44))
(assert (! (forall ((?v0 A_c_fun$) (?v1 B_d_fun$) (?v2 A$) (?v3 A_b_tllist$)) (! (= (tmap$g ?v0 ?v1 (tCons$ ?v2 ?v3)) (tCons$a (fun_app$ap ?v0 ?v2) (tmap$g ?v0 ?v1 ?v3))) :pattern ((tmap$g ?v0 ?v1 (tCons$ ?v2 ?v3))))) :named a45))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 A$) (?v3 A_b_tllist$)) (! (= (tmap$f ?v0 ?v1 (tCons$ ?v2 ?v3)) (tCons$ (fun_app$ak ?v0 ?v2) (tmap$f ?v0 ?v1 ?v3))) :pattern ((tmap$f ?v0 ?v1 (tCons$ ?v2 ?v3))))) :named a46))
(assert (! (forall ((?v0 C_a_fun$) (?v1 D_b_fun$) (?v2 C$) (?v3 C_d_tllist$)) (! (= (fun_app$ (tmap$ ?v0 ?v1) (tCons$a ?v2 ?v3)) (tCons$ (fun_app$am ?v0 ?v2) (fun_app$ (tmap$ ?v0 ?v1) ?v3))) :pattern ((fun_app$ (tmap$ ?v0 ?v1) (tCons$a ?v2 ?v3))))) :named a47))
(assert (! (forall ((?v0 A_b_tllist$)) (=> (is_TNil$e ?v0) (is_TNil$e (ttl$ ?v0)))) :named a48))
(assert (! (forall ((?v0 C_d_tllist$)) (=> (is_TNil$f ?v0) (is_TNil$f (ttl$a ?v0)))) :named a49))
(assert (! (forall ((?v0 C_d_tllist$)) (= (tmap$h id$ id$a ?v0) ?v0)) :named a50))
(assert (! (forall ((?v0 A_b_tllist$)) (= (tmap$f id$b id$c ?v0) ?v0)) :named a51))
(assert (! (forall ((?v0 A_c_tllist$)) (= (tmap$i id$b id$ ?v0) ?v0)) :named a52))
(assert (! (forall ((?v0 A_d_tllist$)) (= (tmap$j id$b id$a ?v0) ?v0)) :named a53))
(assert (! (forall ((?v0 B_c_tllist$)) (= (tmap$k id$c id$ ?v0) ?v0)) :named a54))
(assert (! (forall ((?v0 B_d_tllist$)) (= (tmap$l id$c id$a ?v0) ?v0)) :named a55))
(assert (! (forall ((?v0 C_a_tllist$)) (= (tmap$m id$ id$b ?v0) ?v0)) :named a56))
(assert (! (forall ((?v0 C_b_tllist$)) (= (tmap$n id$ id$c ?v0) ?v0)) :named a57))
(assert (! (forall ((?v0 C_c_tllist$)) (= (tmap$o id$ id$ ?v0) ?v0)) :named a58))
(assert (! (forall ((?v0 D_a_tllist$)) (= (tmap$p id$a id$b ?v0) ?v0)) :named a59))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 C_a_fun$) (?v3 D_b_fun$) (?v4 C_d_tllist$)) (= (tmap$f ?v0 ?v1 (fun_app$ (tmap$ ?v2 ?v3) ?v4)) (fun_app$ (tmap$ (fun_app$aq (comp$ ?v0) ?v2) (fun_app$ar (comp$a ?v1) ?v3)) ?v4))) :named a60))
(assert (! (forall ((?v0 C_a_fun$) (?v1 D_b_fun$) (?v2 C_c_fun$) (?v3 D_d_fun$) (?v4 C_d_tllist$)) (= (fun_app$ (tmap$ ?v0 ?v1) (tmap$h ?v2 ?v3 ?v4)) (fun_app$ (tmap$ (fun_app$as (comp$b ?v0) ?v2) (fun_app$at (comp$c ?v1) ?v3)) ?v4))) :named a61))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$) (?v3 C_c_fun$) (?v4 C_c_tllist$)) (= (fun_app$au (tmap$q ?v0 ?v1) (tmap$o ?v2 ?v3 ?v4)) (fun_app$au (tmap$q (fun_app$as (comp$b ?v0) ?v2) (fun_app$as (comp$b ?v1) ?v3)) ?v4))) :named a62))
(assert (! (forall ((?v0 C_a_fun$) (?v1 A_a_fun$) (?v2 C_c_fun$) (?v3 C_a_fun$) (?v4 C_c_tllist$)) (= (fun_app$av (tmap$r ?v0 ?v1) (tmap$s ?v2 ?v3 ?v4)) (fun_app$au (tmap$q (fun_app$as (comp$b ?v0) ?v2) (fun_app$aq (comp$ ?v1) ?v3)) ?v4))) :named a63))
(assert (! (forall ((?v0 D_b_fun$) (?v1 C_a_fun$) (?v2 D_d_fun$) (?v3 C_c_fun$) (?v4 D_c_tllist$)) (= (tmap$t ?v0 ?v1 (tmap$u ?v2 ?v3 ?v4)) (tmap$t (fun_app$at (comp$c ?v0) ?v2) (fun_app$as (comp$b ?v1) ?v3) ?v4))) :named a64))
(assert (! (forall ((?v0 D_b_fun$) (?v1 D_b_fun$) (?v2 D_d_fun$) (?v3 D_d_fun$) (?v4 D_d_tllist$)) (= (fun_app$aw (tmap$v ?v0 ?v1) (tmap$w ?v2 ?v3 ?v4)) (fun_app$aw (tmap$v (fun_app$at (comp$c ?v0) ?v2) (fun_app$at (comp$c ?v1) ?v3)) ?v4))) :named a65))
(assert (! (forall ((?v0 D_b_fun$) (?v1 A_a_fun$) (?v2 D_d_fun$) (?v3 C_a_fun$) (?v4 D_c_tllist$)) (= (tmap$x ?v0 ?v1 (tmap$y ?v2 ?v3 ?v4)) (tmap$t (fun_app$at (comp$c ?v0) ?v2) (fun_app$aq (comp$ ?v1) ?v3) ?v4))) :named a66))
(assert (! (forall ((?v0 D_b_fun$) (?v1 B_b_fun$) (?v2 D_d_fun$) (?v3 D_b_fun$) (?v4 D_d_tllist$)) (= (fun_app$ax (tmap$z ?v0 ?v1) (tmap$aa ?v2 ?v3 ?v4)) (fun_app$aw (tmap$v (fun_app$at (comp$c ?v0) ?v2) (fun_app$ar (comp$a ?v1) ?v3)) ?v4))) :named a67))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C_a_fun$) (?v3 C_c_fun$) (?v4 C_c_tllist$)) (= (fun_app$b (tmap$d ?v0 ?v1) (tmap$ab ?v2 ?v3 ?v4)) (fun_app$au (tmap$q (fun_app$aq (comp$ ?v0) ?v2) (fun_app$as (comp$b ?v1) ?v3)) ?v4))) :named a68))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 C_a_fun$) (?v3 C_a_fun$) (?v4 C_c_tllist$)) (= (fun_app$c (tmap$e ?v0 ?v1) (fun_app$au (tmap$q ?v2 ?v3) ?v4)) (fun_app$au (tmap$q (fun_app$aq (comp$ ?v0) ?v2) (fun_app$aq (comp$ ?v1) ?v3)) ?v4))) :named a69))
(assert (! (forall ((?v0 C$) (?v1 C_d_tllist$) (?v2 C$) (?v3 C_d_tllist$)) (= (= (tCons$a ?v0 ?v1) (tCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a70))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 A$) (?v3 A_b_tllist$)) (= (= (tCons$ ?v0 ?v1) (tCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a71))
(assert (! (forall ((?v0 D$) (?v1 D$)) (= (= (tNil$a ?v0) (tNil$a ?v1)) (= ?v0 ?v1))) :named a72))
(assert (! (forall ((?v0 B$) (?v1 B$)) (= (= (tNil$ ?v0) (tNil$ ?v1)) (= ?v0 ?v1))) :named a73))
(assert (! (forall ((?v0 C$) (?v1 C_d_tllist$)) (! (= (terminal$a (tCons$a ?v0 ?v1)) (terminal$a ?v1)) :pattern ((tCons$a ?v0 ?v1)))) :named a74))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (! (= (terminal$ (tCons$ ?v0 ?v1)) (terminal$ ?v1)) :pattern ((tCons$ ?v0 ?v1)))) :named a75))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_c_fun$) (?v2 C_c_fun$) (?v3 C_bool_fun$) (?v4 C_c_c_tllist_fun$) (?v5 C_c_fun$) (?v6 C$)) (= (not (is_TNil$g (fun_app$e (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_tllist$ ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6))) (not (fun_app$d ?v0 ?v6)))) :named a76))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_c_fun$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_c_tllist_fun$) (?v5 C_c_fun$) (?v6 C$)) (= (not (is_TNil$c (fun_app$l (fun_app$m (fun_app$n (fun_app$o (fun_app$p (fun_app$q (corec_tllist$a ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6))) (not (fun_app$d ?v0 ?v6)))) :named a77))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_b_fun$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_b_tllist_fun$) (?v5 C_c_fun$) (?v6 C$)) (= (not (is_TNil$e (fun_app$r (fun_app$s (fun_app$t (fun_app$u (fun_app$v (fun_app$w (corec_tllist$b ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6))) (not (fun_app$d ?v0 ?v6)))) :named a78))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$) (?v3 C_bool_fun$) (?v4 C_c_a_tllist_fun$) (?v5 C_c_fun$) (?v6 C$)) (= (not (is_TNil$h (fun_app$x (fun_app$y (fun_app$z (fun_app$aa (fun_app$ab (fun_app$ac (corec_tllist$c ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6))) (not (fun_app$d ?v0 ?v6)))) :named a79))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_a_fun$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_a_tllist_fun$) (?v5 C_c_fun$) (?v6 C$)) (= (not (is_TNil$d (fun_app$ad (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tllist$d ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6))) (not (fun_app$d ?v0 ?v6)))) :named a80))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_c_fun$) (?v2 C_c_fun$) (?v3 C_bool_fun$) (?v4 C_c_c_tllist_fun$) (?v5 C_c_fun$) (?v6 C$)) (= (is_TNil$g (fun_app$e (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_tllist$ ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6)) (fun_app$d ?v0 ?v6))) :named a81))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_c_fun$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_c_tllist_fun$) (?v5 C_c_fun$) (?v6 C$)) (= (is_TNil$c (fun_app$l (fun_app$m (fun_app$n (fun_app$o (fun_app$p (fun_app$q (corec_tllist$a ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6)) (fun_app$d ?v0 ?v6))) :named a82))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_b_fun$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_b_tllist_fun$) (?v5 C_c_fun$) (?v6 C$)) (= (is_TNil$e (fun_app$r (fun_app$s (fun_app$t (fun_app$u (fun_app$v (fun_app$w (corec_tllist$b ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6)) (fun_app$d ?v0 ?v6))) :named a83))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$) (?v3 C_bool_fun$) (?v4 C_c_a_tllist_fun$) (?v5 C_c_fun$) (?v6 C$)) (= (is_TNil$h (fun_app$x (fun_app$y (fun_app$z (fun_app$aa (fun_app$ab (fun_app$ac (corec_tllist$c ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6)) (fun_app$d ?v0 ?v6))) :named a84))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_a_fun$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_a_tllist_fun$) (?v5 C_c_fun$) (?v6 C$)) (= (is_TNil$d (fun_app$ad (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tllist$d ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6)) (fun_app$d ?v0 ?v6))) :named a85))
(assert (! (forall ((?v0 C_d_tllist$)) (=> (is_TNil$f ?v0) (= (tNil$a (terminal$a ?v0)) ?v0))) :named a86))
(assert (! (forall ((?v0 A_b_tllist$)) (=> (is_TNil$e ?v0) (= (tNil$ (terminal$ ?v0)) ?v0))) :named a87))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_c_fun$) (?v2 C_c_fun$) (?v3 C_bool_fun$) (?v4 C_c_c_tllist_fun$) (?v5 C_c_fun$) (?v6 C$)) (= (fun_app$e (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_tllist$ ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) (ite (fun_app$d ?v0 ?v6) (tNil$g (fun_app$k ?v1 ?v6)) (tCons$g (fun_app$k ?v2 ?v6) (ite (fun_app$d ?v3 ?v6) (fun_app$e ?v4 ?v6) (fun_app$e (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_tllist$ ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) (fun_app$k ?v5 ?v6))))))) :named a88))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_c_fun$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_c_tllist_fun$) (?v5 C_c_fun$) (?v6 C$)) (= (fun_app$l (fun_app$m (fun_app$n (fun_app$o (fun_app$p (fun_app$q (corec_tllist$a ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) (ite (fun_app$d ?v0 ?v6) (tNil$e (fun_app$k ?v1 ?v6)) (tCons$e (fun_app$am ?v2 ?v6) (ite (fun_app$d ?v3 ?v6) (fun_app$l ?v4 ?v6) (fun_app$l (fun_app$m (fun_app$n (fun_app$o (fun_app$p (fun_app$q (corec_tllist$a ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) (fun_app$k ?v5 ?v6))))))) :named a89))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_b_fun$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_b_tllist_fun$) (?v5 C_c_fun$) (?v6 C$)) (= (fun_app$r (fun_app$s (fun_app$t (fun_app$u (fun_app$v (fun_app$w (corec_tllist$b ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) (ite (fun_app$d ?v0 ?v6) (tNil$ (fun_app$ay ?v1 ?v6)) (tCons$ (fun_app$am ?v2 ?v6) (ite (fun_app$d ?v3 ?v6) (fun_app$r ?v4 ?v6) (fun_app$r (fun_app$s (fun_app$t (fun_app$u (fun_app$v (fun_app$w (corec_tllist$b ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) (fun_app$k ?v5 ?v6))))))) :named a90))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$) (?v3 C_bool_fun$) (?v4 C_c_a_tllist_fun$) (?v5 C_c_fun$) (?v6 C$)) (= (fun_app$x (fun_app$y (fun_app$z (fun_app$aa (fun_app$ab (fun_app$ac (corec_tllist$c ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) (ite (fun_app$d ?v0 ?v6) (tNil$h (fun_app$am ?v1 ?v6)) (tCons$h (fun_app$k ?v2 ?v6) (ite (fun_app$d ?v3 ?v6) (fun_app$x ?v4 ?v6) (fun_app$x (fun_app$y (fun_app$z (fun_app$aa (fun_app$ab (fun_app$ac (corec_tllist$c ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) (fun_app$k ?v5 ?v6))))))) :named a91))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_a_fun$) (?v2 C_a_fun$) (?v3 C_bool_fun$) (?v4 C_a_a_tllist_fun$) (?v5 C_c_fun$) (?v6 C$)) (= (fun_app$ad (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tllist$d ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) (ite (fun_app$d ?v0 ?v6) (tNil$f (fun_app$am ?v1 ?v6)) (tCons$f (fun_app$am ?v2 ?v6) (ite (fun_app$d ?v3 ?v6) (fun_app$ad ?v4 ?v6) (fun_app$ad (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tllist$d ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) (fun_app$k ?v5 ?v6))))))) :named a92))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_a_fun$) (?v2 C_bool_fun$) (?v3 C_c_fun$) (?v4 C_c_fun$) (?v5 C_bool_fun$) (?v6 C_c_c_tllist_fun$) (?v7 C_c_fun$)) (= (fun_app$az (comp$d (tmap$q ?v0 ?v1)) (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_tllist$ ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tllist$d ?v2) (fun_app$as (comp$b ?v1) ?v3)) (fun_app$as (comp$b ?v0) ?v4)) ?v5) (fun_app$az (comp$d (tmap$q ?v0 ?v1)) ?v6)) ?v7))) :named a93))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C_bool_fun$) (?v3 C_c_fun$) (?v4 C_a_fun$) (?v5 C_bool_fun$) (?v6 C_a_c_tllist_fun$) (?v7 C_c_fun$)) (= (fun_app$ba (comp$e (tmap$d ?v0 ?v1)) (fun_app$m (fun_app$n (fun_app$o (fun_app$p (fun_app$q (corec_tllist$a ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tllist$d ?v2) (fun_app$as (comp$b ?v1) ?v3)) (fun_app$aq (comp$ ?v0) ?v4)) ?v5) (fun_app$ba (comp$e (tmap$d ?v0 ?v1)) ?v6)) ?v7))) :named a94))
(assert (! (forall ((?v0 D_b_fun$) (?v1 D_b_fun$) (?v2 D_bool_fun$) (?v3 D_d_fun$) (?v4 D_d_fun$) (?v5 D_bool_fun$) (?v6 D_d_d_tllist_fun$) (?v7 D_d_fun$)) (= (fun_app$bb (comp$f (tmap$v ?v0 ?v1)) (fun_app$bc (fun_app$bd (fun_app$be (fun_app$bf (fun_app$bg (corec_tllist$e ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$bh (fun_app$bi (fun_app$bj (fun_app$bk (fun_app$bl (corec_tllist$f ?v2) (fun_app$at (comp$c ?v1) ?v3)) (fun_app$at (comp$c ?v0) ?v4)) ?v5) (fun_app$bb (comp$f (tmap$v ?v0 ?v1)) ?v6)) ?v7))) :named a95))
(assert (! (forall ((?v0 B_b_fun$) (?v1 D_b_fun$) (?v2 D_bool_fun$) (?v3 D_d_fun$) (?v4 D_b_fun$) (?v5 D_bool_fun$) (?v6 D_b_d_tllist_fun$) (?v7 D_d_fun$)) (= (fun_app$bm (comp$g (tmap$ac ?v0 ?v1)) (fun_app$bn (fun_app$bo (fun_app$bp (fun_app$bq (fun_app$br (corec_tllist$g ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$bh (fun_app$bi (fun_app$bj (fun_app$bk (fun_app$bl (corec_tllist$f ?v2) (fun_app$at (comp$c ?v1) ?v3)) (fun_app$ar (comp$a ?v0) ?v4)) ?v5) (fun_app$bm (comp$g (tmap$ac ?v0 ?v1)) ?v6)) ?v7))) :named a96))
(assert (! (forall ((?v0 C_a_fun$) (?v1 A_a_fun$) (?v2 C_bool_fun$) (?v3 C_a_fun$) (?v4 C_c_fun$) (?v5 C_bool_fun$) (?v6 C_c_a_tllist_fun$) (?v7 C_c_fun$)) (= (fun_app$bs (comp$h (tmap$r ?v0 ?v1)) (fun_app$y (fun_app$z (fun_app$aa (fun_app$ab (fun_app$ac (corec_tllist$c ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tllist$d ?v2) (fun_app$aq (comp$ ?v1) ?v3)) (fun_app$as (comp$b ?v0) ?v4)) ?v5) (fun_app$bs (comp$h (tmap$r ?v0 ?v1)) ?v6)) ?v7))) :named a97))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 C_bool_fun$) (?v3 C_a_fun$) (?v4 C_a_fun$) (?v5 C_bool_fun$) (?v6 C_a_a_tllist_fun$) (?v7 C_c_fun$)) (= (fun_app$bt (comp$i (tmap$e ?v0 ?v1)) (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tllist$d ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tllist$d ?v2) (fun_app$aq (comp$ ?v1) ?v3)) (fun_app$aq (comp$ ?v0) ?v4)) ?v5) (fun_app$bt (comp$i (tmap$e ?v0 ?v1)) ?v6)) ?v7))) :named a98))
(assert (! (forall ((?v0 D_b_fun$) (?v1 B_b_fun$) (?v2 D_bool_fun$) (?v3 D_b_fun$) (?v4 D_d_fun$) (?v5 D_bool_fun$) (?v6 D_d_b_tllist_fun$) (?v7 D_d_fun$)) (= (fun_app$bu (comp$j (tmap$z ?v0 ?v1)) (fun_app$bv (fun_app$bw (fun_app$bx (fun_app$by (fun_app$bz (corec_tllist$h ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$bh (fun_app$bi (fun_app$bj (fun_app$bk (fun_app$bl (corec_tllist$f ?v2) (fun_app$ar (comp$a ?v1) ?v3)) (fun_app$at (comp$c ?v0) ?v4)) ?v5) (fun_app$bu (comp$j (tmap$z ?v0 ?v1)) ?v6)) ?v7))) :named a99))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 D_bool_fun$) (?v3 D_b_fun$) (?v4 D_b_fun$) (?v5 D_bool_fun$) (?v6 D_b_b_tllist_fun$) (?v7 D_d_fun$)) (= (fun_app$ca (comp$k (tmap$a ?v0 ?v1)) (fun_app$bh (fun_app$bi (fun_app$bj (fun_app$bk (fun_app$bl (corec_tllist$f ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$bh (fun_app$bi (fun_app$bj (fun_app$bk (fun_app$bl (corec_tllist$f ?v2) (fun_app$ar (comp$a ?v1) ?v3)) (fun_app$ar (comp$a ?v0) ?v4)) ?v5) (fun_app$ca (comp$k (tmap$a ?v0 ?v1)) ?v6)) ?v7))) :named a100))
(assert (! (forall ((?v0 C_a_fun$) (?v1 D_b_fun$) (?v2 C_bool_fun$) (?v3 C_d_fun$) (?v4 C_c_fun$) (?v5 C_bool_fun$) (?v6 C_c_d_tllist_fun$) (?v7 C_c_fun$)) (= (fun_app$cb (comp$l (tmap$ ?v0 ?v1)) (fun_app$cc (fun_app$cd (fun_app$ce (fun_app$cf (fun_app$cg (corec_tllist$i ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (fun_app$s (fun_app$t (fun_app$u (fun_app$v (fun_app$w (corec_tllist$b ?v2) (fun_app$ch (comp$m ?v1) ?v3)) (fun_app$as (comp$b ?v0) ?v4)) ?v5) (fun_app$cb (comp$l (tmap$ ?v0 ?v1)) ?v6)) ?v7))) :named a101))
(assert (! (forall ((?v0 C_a_fun$) (?v1 D_b_fun$) (?v2 D_bool_fun$) (?v3 D_d_fun$) (?v4 D_c_fun$) (?v5 D_bool_fun$) (?v6 D_c_d_tllist_fun$) (?v7 D_d_fun$)) (= (comp$n (tmap$ ?v0 ?v1) (fun_app$ci (fun_app$cj (fun_app$ck (fun_app$cl (fun_app$cm (corec_tllist$j ?v2) ?v3) ?v4) ?v5) ?v6) ?v7)) (corec_tllist$k ?v2 (fun_app$at (comp$c ?v1) ?v3) (comp$o ?v0 ?v4) ?v5 (comp$n (tmap$ ?v0 ?v1) ?v6) ?v7))) :named a102))
(assert (! (forall ((?v0 C_d_tllist$)) (= (is_TNil$f ?v0) (exists ((?v1 D$)) (= ?v0 (tNil$a ?v1))))) :named a103))
(assert (! (forall ((?v0 A_b_tllist$)) (= (is_TNil$e ?v0) (exists ((?v1 B$)) (= ?v0 (tNil$ ?v1))))) :named a104))
(assert (! (forall ((?v0 D$)) (! (= (terminal$a (tNil$a ?v0)) ?v0) :pattern ((tNil$a ?v0)))) :named a105))
(assert (! (forall ((?v0 B$)) (! (= (terminal$ (tNil$ ?v0)) ?v0) :pattern ((tNil$ ?v0)))) :named a106))
(assert (! (forall ((?v0 C_d_tllist$)) (=> (and (=> (is_TNil$f ?v0) false) (=> (not (is_TNil$f ?v0)) false)) false)) :named a107))
(assert (! (forall ((?v0 A_b_tllist$)) (=> (and (=> (is_TNil$e ?v0) false) (=> (not (is_TNil$e ?v0)) false)) false)) :named a108))
(assert (! (forall ((?v0 C_d_tllist$)) (=> (and (forall ((?v1 D$)) (=> (= ?v0 (tNil$a ?v1)) false)) (forall ((?v1 C$) (?v2 C_d_tllist$)) (=> (= ?v0 (tCons$a ?v1 ?v2)) false))) false)) :named a109))
(assert (! (forall ((?v0 A_b_tllist$)) (=> (and (forall ((?v1 B$)) (=> (= ?v0 (tNil$ ?v1)) false)) (forall ((?v1 A$) (?v2 A_b_tllist$)) (=> (= ?v0 (tCons$ ?v1 ?v2)) false))) false)) :named a110))
(assert (! (forall ((?v0 C_d_tllist$) (?v1 C$) (?v2 C_d_tllist$)) (=> (= ?v0 (tCons$a ?v1 ?v2)) (not (is_TNil$f ?v0)))) :named a111))
(assert (! (forall ((?v0 A_b_tllist$) (?v1 A$) (?v2 A_b_tllist$)) (=> (= ?v0 (tCons$ ?v1 ?v2)) (not (is_TNil$e ?v0)))) :named a112))
(assert (! (forall ((?v0 C_d_tllist$) (?v1 D$)) (=> (= ?v0 (tNil$a ?v1)) (is_TNil$f ?v0))) :named a113))
(assert (! (forall ((?v0 A_b_tllist$) (?v1 B$)) (=> (= ?v0 (tNil$ ?v1)) (is_TNil$e ?v0))) :named a114))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_c_fun$) (?v3 C_c_fun$) (?v4 C_bool_fun$) (?v5 C_c_c_tllist_fun$) (?v6 C_c_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (= (fun_app$e (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_tllist$ ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) ?v1) (tCons$g (fun_app$k ?v3 ?v1) (ite (fun_app$d ?v4 ?v1) (fun_app$e ?v5 ?v1) (fun_app$e (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_tllist$ ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) (fun_app$k ?v6 ?v1))))))) :named a115))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_c_fun$) (?v3 C_a_fun$) (?v4 C_bool_fun$) (?v5 C_a_c_tllist_fun$) (?v6 C_c_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (= (fun_app$l (fun_app$m (fun_app$n (fun_app$o (fun_app$p (fun_app$q (corec_tllist$a ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) ?v1) (tCons$e (fun_app$am ?v3 ?v1) (ite (fun_app$d ?v4 ?v1) (fun_app$l ?v5 ?v1) (fun_app$l (fun_app$m (fun_app$n (fun_app$o (fun_app$p (fun_app$q (corec_tllist$a ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) (fun_app$k ?v6 ?v1))))))) :named a116))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_fun$) (?v3 C_a_fun$) (?v4 C_bool_fun$) (?v5 C_a_b_tllist_fun$) (?v6 C_c_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (= (fun_app$r (fun_app$s (fun_app$t (fun_app$u (fun_app$v (fun_app$w (corec_tllist$b ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) ?v1) (tCons$ (fun_app$am ?v3 ?v1) (ite (fun_app$d ?v4 ?v1) (fun_app$r ?v5 ?v1) (fun_app$r (fun_app$s (fun_app$t (fun_app$u (fun_app$v (fun_app$w (corec_tllist$b ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) (fun_app$k ?v6 ?v1))))))) :named a117))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_c_fun$) (?v4 C_bool_fun$) (?v5 C_c_a_tllist_fun$) (?v6 C_c_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (= (fun_app$x (fun_app$y (fun_app$z (fun_app$aa (fun_app$ab (fun_app$ac (corec_tllist$c ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) ?v1) (tCons$h (fun_app$k ?v3 ?v1) (ite (fun_app$d ?v4 ?v1) (fun_app$x ?v5 ?v1) (fun_app$x (fun_app$y (fun_app$z (fun_app$aa (fun_app$ab (fun_app$ac (corec_tllist$c ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) (fun_app$k ?v6 ?v1))))))) :named a118))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_a_fun$) (?v4 C_bool_fun$) (?v5 C_a_a_tllist_fun$) (?v6 C_c_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (= (fun_app$ad (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tllist$d ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) ?v1) (tCons$f (fun_app$am ?v3 ?v1) (ite (fun_app$d ?v4 ?v1) (fun_app$ad ?v5 ?v1) (fun_app$ad (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tllist$d ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) (fun_app$k ?v6 ?v1))))))) :named a119))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_c_fun$) (?v3 C_c_fun$) (?v4 C_bool_fun$) (?v5 C_c_c_tllist_fun$) (?v6 C_c_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (not (is_TNil$g (fun_app$e (fun_app$f (fun_app$g (fun_app$h (fun_app$i (fun_app$j (corec_tllist$ ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) ?v1))))) :named a120))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_c_fun$) (?v3 C_a_fun$) (?v4 C_bool_fun$) (?v5 C_a_c_tllist_fun$) (?v6 C_c_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (not (is_TNil$c (fun_app$l (fun_app$m (fun_app$n (fun_app$o (fun_app$p (fun_app$q (corec_tllist$a ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) ?v1))))) :named a121))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_b_fun$) (?v3 C_a_fun$) (?v4 C_bool_fun$) (?v5 C_a_b_tllist_fun$) (?v6 C_c_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (not (is_TNil$e (fun_app$r (fun_app$s (fun_app$t (fun_app$u (fun_app$v (fun_app$w (corec_tllist$b ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) ?v1))))) :named a122))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_c_fun$) (?v4 C_bool_fun$) (?v5 C_c_a_tllist_fun$) (?v6 C_c_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (not (is_TNil$h (fun_app$x (fun_app$y (fun_app$z (fun_app$aa (fun_app$ab (fun_app$ac (corec_tllist$c ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) ?v1))))) :named a123))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C$) (?v2 C_a_fun$) (?v3 C_a_fun$) (?v4 C_bool_fun$) (?v5 C_a_a_tllist_fun$) (?v6 C_c_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (not (is_TNil$d (fun_app$ad (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (corec_tllist$d ?v0) ?v2) ?v3) ?v4) ?v5) ?v6) ?v1))))) :named a124))
(check-sat)
;(get-unsat-core)
