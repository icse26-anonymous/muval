; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 414
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_b_tllist_bool_fun$ 0)
(declare-sort A_a_b_tllist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_b_tllist$ (tNil$ (terminal$ B$)) (tCons$ (thd$ A$) (ttl$ A_b_tllist$)))
  (A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun b$ () B$)
(declare-fun xs$ () A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun tset$ (A_b_tllist$) A_set$)
(declare-fun lsetp$ (A_llist$) A_bool_fun$)
(declare-fun insert$ (A$ A_set$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_b_tllist_bool_fun$ A_b_tllist$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun lmember$ (A$ A_llist$) Bool)
(declare-fun fun_app$a (A_a_b_tllist_bool_fun_fun$ A$) A_b_tllist_bool_fun$)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun pred_tllist$ (A_bool_fun$ B_bool_fun$ A_b_tllist$) Bool)
(declare-fun llist_of_tllist$ (A_b_tllist$) A_llist$)
(declare-fun tllist_of_llist$ (B$ A_llist$) A_b_tllist$)
(assert (! (not (= (tset$ (tllist_of_llist$ b$ xs$)) (lset$ xs$))) :named a0))
(assert (! (forall ((?v0 A_b_tllist$)) (= (lset$ (llist_of_tllist$ ?v0)) (tset$ ?v0))) :named a1))
(assert (! (forall ((?v0 B$) (?v1 A_llist$)) (= (llist_of_tllist$ (tllist_of_llist$ ?v0 ?v1)) ?v1)) :named a2))
(assert (! (forall ((?v0 B$) (?v1 A_llist$) (?v2 B$) (?v3 A_llist$)) (= (= (tllist_of_llist$ ?v0 ?v1) (tllist_of_llist$ ?v2 ?v3)) (and (= ?v1 ?v3) (=> (lfinite$ ?v3) (= ?v0 ?v2))))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (=> (member$ ?v0 (tset$ (ttl$ ?v1))) (member$ ?v0 (tset$ ?v1)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 A_a_b_tllist_bool_fun_fun$)) (=> (and (member$ ?v0 (tset$ ?v1)) (and (forall ((?v3 A$) (?v4 A_b_tllist$)) (fun_app$ (fun_app$a ?v2 ?v3) (tCons$ ?v3 ?v4))) (forall ((?v3 A$) (?v4 A_b_tllist$) (?v5 A$)) (=> (and (member$ ?v5 (tset$ ?v4)) (fun_app$ (fun_app$a ?v2 ?v5) ?v4)) (fun_app$ (fun_app$a ?v2 ?v5) (tCons$ ?v3 ?v4)))))) (fun_app$ (fun_app$a ?v2 ?v0) ?v1))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (=> (and (member$ ?v0 (tset$ ?v1)) (and (forall ((?v2 A_b_tllist$)) (=> (= ?v1 (tCons$ ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_b_tllist$)) (=> (and (= ?v1 (tCons$ ?v2 ?v3)) (member$ ?v0 (tset$ ?v3))) false)))) false)) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 A$)) (=> (member$ ?v0 (tset$ ?v1)) (member$ ?v0 (tset$ (tCons$ ?v2 ?v1))))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (member$ ?v0 (tset$ (tCons$ ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$ ?v0 (lset$ ?v1)) (lmember$ ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 B$) (?v3 B$)) (=> (and (= ?v0 ?v1) (=> (lfinite$ ?v1) (= ?v2 ?v3))) (= (tllist_of_llist$ ?v2 ?v0) (tllist_of_llist$ ?v3 ?v1)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$ ?v0 (lset$ ?v1)) (fun_app$b (lsetp$ ?v1) ?v0))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (fun_app$b (lsetp$ ?v0) ?v1) (member$ ?v1 (lset$ ?v0)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 A$) (?v3 A_b_tllist$)) (= (= (tCons$ ?v0 ?v1) (tCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (! (= (ttl$ (tCons$ ?v0 ?v1)) ?v1) :pattern ((tCons$ ?v0 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 B_bool_fun$) (?v2 A$) (?v3 A_b_tllist$)) (! (= (pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3)) (and (fun_app$b ?v0 ?v2) (pred_tllist$ ?v0 ?v1 ?v3))) :pattern ((pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3))))) :named a15))
(assert (! (forall ((?v0 A_b_tllist$)) (= (tllist_of_llist$ (terminal$ ?v0) (llist_of_tllist$ ?v0)) ?v0)) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (! (= (tset$ (tCons$ ?v0 ?v1)) (insert$ ?v0 (tset$ ?v1))) :pattern ((tCons$ ?v0 ?v1)))) :named a17))
(check-sat)
;(get-unsat-core)
