; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 255
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort D$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort C_bool_fun$ 0)
(declare-sort D_bool_fun$ 0)
(declare-sort Unit_c_fun$ 0)
(declare-sort Unit_d_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort C_a_c_tllist_fun$ 0)
(declare-sort C_c_bool_fun_fun$ 0)
(declare-sort C_d_bool_fun_fun$ 0)
(declare-sort D_b_d_tllist_fun$ 0)
(declare-sort D_c_bool_fun_fun$ 0)
(declare-sort D_d_bool_fun_fun$ 0)
(declare-sort A_c_tllist_bool_fun$ 0)
(declare-sort B_d_tllist_bool_fun$ 0)
(declare-sort A_c_tllist_a_c_tllist_bool_fun_fun$ 0)
(declare-sort B_d_tllist_b_d_tllist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_c_tllist$ (tNil$ (terminal$ C$)) (tCons$ (thd$ A$) (ttl$ A_c_tllist$)))
  (B_d_tllist$ (tNil$a (terminal$a D$)) (tCons$a (thd$a B$) (ttl$a B_d_tllist$)))))
(declare-fun a$ () A_b_bool_fun_fun$)
(declare-fun b$ () C_d_bool_fun_fun$)
(declare-fun uu$ () B_b_bool_fun_fun$)
(declare-fun uua$ () D_d_bool_fun_fun$)
(declare-fun uub$ () B_d_tllist_b_d_tllist_bool_fun_fun$)
(declare-fun uuc$ () A_a_bool_fun_fun$)
(declare-fun uud$ () C_c_bool_fun_fun$)
(declare-fun uue$ () A_c_tllist_a_c_tllist_bool_fun_fun$)
(declare-fun fun_app$ (B_d_tllist_bool_fun$ B_d_tllist$) Bool)
(declare-fun tappend$ (A_c_tllist$ C_a_c_tllist_fun$) A_c_tllist$)
(declare-fun tfilter$ (Unit_c_fun$ A_bool_fun$ A_c_tllist$) A_c_tllist$)
(declare-fun fun_app$a (B_d_tllist_b_d_tllist_bool_fun_fun$ B_d_tllist$) B_d_tllist_bool_fun$)
(declare-fun fun_app$b (A_c_tllist_bool_fun$ A_c_tllist$) Bool)
(declare-fun fun_app$c (A_c_tllist_a_c_tllist_bool_fun_fun$ A_c_tllist$) A_c_tllist_bool_fun$)
(declare-fun fun_app$d (D_bool_fun$ D$) Bool)
(declare-fun fun_app$e (D_d_bool_fun_fun$ D$) D_bool_fun$)
(declare-fun fun_app$f (C_bool_fun$ C$) Bool)
(declare-fun fun_app$g (C_c_bool_fun_fun$ C$) C_bool_fun$)
(declare-fun fun_app$h (B_bool_fun$ B$) Bool)
(declare-fun fun_app$i (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$j (A_bool_fun$ A$) Bool)
(declare-fun fun_app$k (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$l (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$m (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$n (D_c_bool_fun_fun$ D$) C_bool_fun$)
(declare-fun fun_app$o (C_d_bool_fun_fun$ C$) D_bool_fun$)
(declare-fun tappend$a (B_d_tllist$ D_b_d_tllist_fun$) B_d_tllist$)
(declare-fun tfilter$a (Unit_d_fun$ B_bool_fun$ B_d_tllist$) B_d_tllist$)
(declare-fun tfilter$b (C$ A_bool_fun$ A_c_tllist$) A_c_tllist$)
(declare-fun tfilter$c (D$ B_bool_fun$ B_d_tllist$) B_d_tllist$)
(declare-fun pred_tllist$ (A_bool_fun$ C_bool_fun$ A_c_tllist$) Bool)
(declare-fun tllist_all2$ (A_b_bool_fun_fun$ C_d_bool_fun_fun$ A_c_tllist$ B_d_tllist$) Bool)
(declare-fun pred_tllist$a (B_bool_fun$ D_bool_fun$ B_d_tllist$) Bool)
(declare-fun tllist_all2$a (A_a_bool_fun_fun$ C_c_bool_fun_fun$) A_c_tllist_a_c_tllist_bool_fun_fun$)
(declare-fun tllist_all2$b (B_a_bool_fun_fun$ D_c_bool_fun_fun$ B_d_tllist$ A_c_tllist$) Bool)
(declare-fun tllist_all2$c (B_b_bool_fun_fun$ D_d_bool_fun_fun$) B_d_tllist_b_d_tllist_bool_fun_fun$)
(assert (! (forall ((?v0 B_d_tllist$) (?v1 B_d_tllist$)) (! (= (fun_app$ (fun_app$a uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uub$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_c_tllist$) (?v1 A_c_tllist$)) (! (= (fun_app$b (fun_app$c uue$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c uue$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 D$) (?v1 D$)) (! (= (fun_app$d (fun_app$e uua$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (fun_app$e uua$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 C$) (?v1 C$)) (! (= (fun_app$f (fun_app$g uud$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$f (fun_app$g uud$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$h (fun_app$i uu$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$h (fun_app$i uu$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$j (fun_app$k uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$j (fun_app$k uuc$ ?v0) ?v1)))) :named a5))
(assert (! (not (forall ((?v0 A$) (?v1 B$)) (=> (fun_app$h (fun_app$l a$ ?v0) ?v1) (forall ((?v2 A_c_tllist$) (?v3 B_d_tllist$)) (=> (tllist_all2$ a$ b$ ?v2 ?v3) (tllist_all2$ a$ b$ (tCons$ ?v0 ?v2) (tCons$a ?v1 ?v3))))))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$) (?v2 A$) (?v3 A_c_tllist$)) (= (= (tCons$ ?v0 ?v1) (tCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a7))
(assert (! (forall ((?v0 B$) (?v1 B_d_tllist$) (?v2 B$) (?v3 B_d_tllist$)) (= (= (tCons$a ?v0 ?v1) (tCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a8))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A$) (?v3 A_c_tllist$) (?v4 A$) (?v5 A_c_tllist$)) (! (= (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1) (tCons$ ?v2 ?v3)) (tCons$ ?v4 ?v5)) (and (fun_app$j (fun_app$k ?v0 ?v2) ?v4) (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1) ?v3) ?v5))) :pattern ((fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1) (tCons$ ?v2 ?v3)) (tCons$ ?v4 ?v5))))) :named a9))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 B$) (?v3 B_d_tllist$) (?v4 A$) (?v5 A_c_tllist$)) (! (= (tllist_all2$b ?v0 ?v1 (tCons$a ?v2 ?v3) (tCons$ ?v4 ?v5)) (and (fun_app$j (fun_app$m ?v0 ?v2) ?v4) (tllist_all2$b ?v0 ?v1 ?v3 ?v5))) :pattern ((tllist_all2$b ?v0 ?v1 (tCons$a ?v2 ?v3) (tCons$ ?v4 ?v5))))) :named a10))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 B$) (?v3 B_d_tllist$) (?v4 B$) (?v5 B_d_tllist$)) (! (= (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1) (tCons$a ?v2 ?v3)) (tCons$a ?v4 ?v5)) (and (fun_app$h (fun_app$i ?v0 ?v2) ?v4) (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1) ?v3) ?v5))) :pattern ((fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1) (tCons$a ?v2 ?v3)) (tCons$a ?v4 ?v5))))) :named a11))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A$) (?v3 A_c_tllist$) (?v4 B$) (?v5 B_d_tllist$)) (! (= (tllist_all2$ ?v0 ?v1 (tCons$ ?v2 ?v3) (tCons$a ?v4 ?v5)) (and (fun_app$h (fun_app$l ?v0 ?v2) ?v4) (tllist_all2$ ?v0 ?v1 ?v3 ?v5))) :pattern ((tllist_all2$ ?v0 ?v1 (tCons$ ?v2 ?v3) (tCons$a ?v4 ?v5))))) :named a12))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A$) (?v3 A_c_tllist$) (?v4 A_c_tllist$)) (= (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1) (tCons$ ?v2 ?v3)) ?v4) (exists ((?v5 A$) (?v6 A_c_tllist$)) (and (= ?v4 (tCons$ ?v5 ?v6)) (and (fun_app$j (fun_app$k ?v0 ?v2) ?v5) (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1) ?v3) ?v6)))))) :named a13))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 B$) (?v3 B_d_tllist$) (?v4 A_c_tllist$)) (= (tllist_all2$b ?v0 ?v1 (tCons$a ?v2 ?v3) ?v4) (exists ((?v5 A$) (?v6 A_c_tllist$)) (and (= ?v4 (tCons$ ?v5 ?v6)) (and (fun_app$j (fun_app$m ?v0 ?v2) ?v5) (tllist_all2$b ?v0 ?v1 ?v3 ?v6)))))) :named a14))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 B$) (?v3 B_d_tllist$) (?v4 B_d_tllist$)) (= (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1) (tCons$a ?v2 ?v3)) ?v4) (exists ((?v5 B$) (?v6 B_d_tllist$)) (and (= ?v4 (tCons$a ?v5 ?v6)) (and (fun_app$h (fun_app$i ?v0 ?v2) ?v5) (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1) ?v3) ?v6)))))) :named a15))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A$) (?v3 A_c_tllist$) (?v4 B_d_tllist$)) (= (tllist_all2$ ?v0 ?v1 (tCons$ ?v2 ?v3) ?v4) (exists ((?v5 B$) (?v6 B_d_tllist$)) (and (= ?v4 (tCons$a ?v5 ?v6)) (and (fun_app$h (fun_app$l ?v0 ?v2) ?v5) (tllist_all2$ ?v0 ?v1 ?v3 ?v6)))))) :named a16))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 A$) (?v4 A_c_tllist$)) (= (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1) ?v2) (tCons$ ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_c_tllist$)) (and (= ?v2 (tCons$ ?v5 ?v6)) (and (fun_app$j (fun_app$k ?v0 ?v5) ?v3) (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1) ?v6) ?v4)))))) :named a17))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 A$) (?v4 A_c_tllist$)) (= (tllist_all2$b ?v0 ?v1 ?v2 (tCons$ ?v3 ?v4)) (exists ((?v5 B$) (?v6 B_d_tllist$)) (and (= ?v2 (tCons$a ?v5 ?v6)) (and (fun_app$j (fun_app$m ?v0 ?v5) ?v3) (tllist_all2$b ?v0 ?v1 ?v6 ?v4)))))) :named a18))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 B$) (?v4 B_d_tllist$)) (= (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1) ?v2) (tCons$a ?v3 ?v4)) (exists ((?v5 B$) (?v6 B_d_tllist$)) (and (= ?v2 (tCons$a ?v5 ?v6)) (and (fun_app$h (fun_app$i ?v0 ?v5) ?v3) (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1) ?v6) ?v4)))))) :named a19))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 B$) (?v4 B_d_tllist$)) (= (tllist_all2$ ?v0 ?v1 ?v2 (tCons$a ?v3 ?v4)) (exists ((?v5 A$) (?v6 A_c_tllist$)) (and (= ?v2 (tCons$ ?v5 ?v6)) (and (fun_app$h (fun_app$l ?v0 ?v5) ?v3) (tllist_all2$ ?v0 ?v1 ?v6 ?v4)))))) :named a20))
(assert (! (= (tllist_all2$c uu$ uua$) uub$) :named a21))
(assert (! (= (tllist_all2$a uuc$ uud$) uue$) :named a22))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 B_d_tllist$) (?v4 B_b_bool_fun_fun$) (?v5 D_d_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1) ?v2) ?v3) (and (forall ((?v6 B$) (?v7 B$)) (=> (fun_app$h (fun_app$i ?v0 ?v6) ?v7) (fun_app$h (fun_app$i ?v4 ?v6) ?v7))) (forall ((?v6 D$) (?v7 D$)) (=> (fun_app$d (fun_app$e ?v1 ?v6) ?v7) (fun_app$d (fun_app$e ?v5 ?v6) ?v7))))) (fun_app$ (fun_app$a (tllist_all2$c ?v4 ?v5) ?v2) ?v3))) :named a23))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 A_c_tllist$) (?v4 B_a_bool_fun_fun$) (?v5 D_c_bool_fun_fun$)) (=> (and (tllist_all2$b ?v0 ?v1 ?v2 ?v3) (and (forall ((?v6 B$) (?v7 A$)) (=> (fun_app$j (fun_app$m ?v0 ?v6) ?v7) (fun_app$j (fun_app$m ?v4 ?v6) ?v7))) (forall ((?v6 D$) (?v7 C$)) (=> (fun_app$f (fun_app$n ?v1 ?v6) ?v7) (fun_app$f (fun_app$n ?v5 ?v6) ?v7))))) (tllist_all2$b ?v4 ?v5 ?v2 ?v3))) :named a24))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 A_c_tllist$) (?v4 A_a_bool_fun_fun$) (?v5 C_c_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1) ?v2) ?v3) (and (forall ((?v6 A$) (?v7 A$)) (=> (fun_app$j (fun_app$k ?v0 ?v6) ?v7) (fun_app$j (fun_app$k ?v4 ?v6) ?v7))) (forall ((?v6 C$) (?v7 C$)) (=> (fun_app$f (fun_app$g ?v1 ?v6) ?v7) (fun_app$f (fun_app$g ?v5 ?v6) ?v7))))) (fun_app$b (fun_app$c (tllist_all2$a ?v4 ?v5) ?v2) ?v3))) :named a25))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 B_d_tllist$) (?v4 A_b_bool_fun_fun$) (?v5 C_d_bool_fun_fun$)) (=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3) (and (forall ((?v6 A$) (?v7 B$)) (=> (fun_app$h (fun_app$l ?v0 ?v6) ?v7) (fun_app$h (fun_app$l ?v4 ?v6) ?v7))) (forall ((?v6 C$) (?v7 D$)) (=> (fun_app$d (fun_app$o ?v1 ?v6) ?v7) (fun_app$d (fun_app$o ?v5 ?v6) ?v7))))) (tllist_all2$ ?v4 ?v5 ?v2 ?v3))) :named a26))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 C_c_bool_fun_fun$) (?v4 A_c_tllist$) (?v5 A_c_tllist$)) (=> (and (fun_app$j (fun_app$k ?v0 ?v1) ?v2) (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v3) ?v4) ?v5)) (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v3) (tCons$ ?v1 ?v4)) (tCons$ ?v2 ?v5)))) :named a27))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B$) (?v2 A$) (?v3 D_c_bool_fun_fun$) (?v4 B_d_tllist$) (?v5 A_c_tllist$)) (=> (and (fun_app$j (fun_app$m ?v0 ?v1) ?v2) (tllist_all2$b ?v0 ?v3 ?v4 ?v5)) (tllist_all2$b ?v0 ?v3 (tCons$a ?v1 ?v4) (tCons$ ?v2 ?v5)))) :named a28))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B$) (?v2 B$) (?v3 D_d_bool_fun_fun$) (?v4 B_d_tllist$) (?v5 B_d_tllist$)) (=> (and (fun_app$h (fun_app$i ?v0 ?v1) ?v2) (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v3) ?v4) ?v5)) (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v3) (tCons$a ?v1 ?v4)) (tCons$a ?v2 ?v5)))) :named a29))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 B$) (?v3 C_d_bool_fun_fun$) (?v4 A_c_tllist$) (?v5 B_d_tllist$)) (=> (and (fun_app$h (fun_app$l ?v0 ?v1) ?v2) (tllist_all2$ ?v0 ?v3 ?v4 ?v5)) (tllist_all2$ ?v0 ?v3 (tCons$ ?v1 ?v4) (tCons$a ?v2 ?v5)))) :named a30))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 C_bool_fun$) (?v2 A$) (?v3 A_c_tllist$)) (! (= (pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3)) (and (fun_app$j ?v0 ?v2) (pred_tllist$ ?v0 ?v1 ?v3))) :pattern ((pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3))))) :named a31))
(assert (! (forall ((?v0 B_bool_fun$) (?v1 D_bool_fun$) (?v2 B$) (?v3 B_d_tllist$)) (! (= (pred_tllist$a ?v0 ?v1 (tCons$a ?v2 ?v3)) (and (fun_app$h ?v0 ?v2) (pred_tllist$a ?v0 ?v1 ?v3))) :pattern ((pred_tllist$a ?v0 ?v1 (tCons$a ?v2 ?v3))))) :named a32))
(assert (! (forall ((?v0 Unit_c_fun$) (?v1 A_bool_fun$) (?v2 A$) (?v3 A_c_tllist$)) (! (= (tfilter$ ?v0 ?v1 (tCons$ ?v2 ?v3)) (ite (fun_app$j ?v1 ?v2) (tCons$ ?v2 (tfilter$ ?v0 ?v1 ?v3)) (tfilter$ ?v0 ?v1 ?v3))) :pattern ((tfilter$ ?v0 ?v1 (tCons$ ?v2 ?v3))))) :named a33))
(assert (! (forall ((?v0 Unit_d_fun$) (?v1 B_bool_fun$) (?v2 B$) (?v3 B_d_tllist$)) (! (= (tfilter$a ?v0 ?v1 (tCons$a ?v2 ?v3)) (ite (fun_app$h ?v1 ?v2) (tCons$a ?v2 (tfilter$a ?v0 ?v1 ?v3)) (tfilter$a ?v0 ?v1 ?v3))) :pattern ((tfilter$a ?v0 ?v1 (tCons$a ?v2 ?v3))))) :named a34))
(assert (! (forall ((?v0 C$) (?v1 A_bool_fun$) (?v2 A$) (?v3 A_c_tllist$)) (! (= (tfilter$b ?v0 ?v1 (tCons$ ?v2 ?v3)) (ite (fun_app$j ?v1 ?v2) (tCons$ ?v2 (tfilter$b ?v0 ?v1 ?v3)) (tfilter$b ?v0 ?v1 ?v3))) :pattern ((tfilter$b ?v0 ?v1 (tCons$ ?v2 ?v3))))) :named a35))
(assert (! (forall ((?v0 D$) (?v1 B_bool_fun$) (?v2 B$) (?v3 B_d_tllist$)) (! (= (tfilter$c ?v0 ?v1 (tCons$a ?v2 ?v3)) (ite (fun_app$h ?v1 ?v2) (tCons$a ?v2 (tfilter$c ?v0 ?v1 ?v3)) (tfilter$c ?v0 ?v1 ?v3))) :pattern ((tfilter$c ?v0 ?v1 (tCons$a ?v2 ?v3))))) :named a36))
(assert (! (forall ((?v0 A$) (?v1 A_c_tllist$) (?v2 C_a_c_tllist_fun$)) (! (= (tappend$ (tCons$ ?v0 ?v1) ?v2) (tCons$ ?v0 (tappend$ ?v1 ?v2))) :pattern ((tappend$ (tCons$ ?v0 ?v1) ?v2)))) :named a37))
(assert (! (forall ((?v0 B$) (?v1 B_d_tllist$) (?v2 D_b_d_tllist_fun$)) (! (= (tappend$a (tCons$a ?v0 ?v1) ?v2) (tCons$a ?v0 (tappend$a ?v1 ?v2))) :pattern ((tappend$a (tCons$a ?v0 ?v1) ?v2)))) :named a38))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 A_c_tllist$)) (=> (and (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1) ?v2) ?v3) (and (forall ((?v4 C$) (?v5 C$)) (=> (and (= ?v2 (tNil$ ?v4)) (and (= ?v3 (tNil$ ?v5)) (fun_app$f (fun_app$g ?v1 ?v4) ?v5))) false)) (forall ((?v4 A$) (?v5 A_c_tllist$) (?v6 A$) (?v7 A_c_tllist$)) (=> (and (= ?v2 (tCons$ ?v4 ?v5)) (and (= ?v3 (tCons$ ?v6 ?v7)) (and (fun_app$j (fun_app$k ?v0 ?v4) ?v6) (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1) ?v5) ?v7)))) false)))) false)) :named a39))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 A_c_tllist$)) (=> (and (tllist_all2$b ?v0 ?v1 ?v2 ?v3) (and (forall ((?v4 D$) (?v5 C$)) (=> (and (= ?v2 (tNil$a ?v4)) (and (= ?v3 (tNil$ ?v5)) (fun_app$f (fun_app$n ?v1 ?v4) ?v5))) false)) (forall ((?v4 B$) (?v5 B_d_tllist$) (?v6 A$) (?v7 A_c_tllist$)) (=> (and (= ?v2 (tCons$a ?v4 ?v5)) (and (= ?v3 (tCons$ ?v6 ?v7)) (and (fun_app$j (fun_app$m ?v0 ?v4) ?v6) (tllist_all2$b ?v0 ?v1 ?v5 ?v7)))) false)))) false)) :named a40))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 B_d_tllist$)) (=> (and (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1) ?v2) ?v3) (and (forall ((?v4 D$) (?v5 D$)) (=> (and (= ?v2 (tNil$a ?v4)) (and (= ?v3 (tNil$a ?v5)) (fun_app$d (fun_app$e ?v1 ?v4) ?v5))) false)) (forall ((?v4 B$) (?v5 B_d_tllist$) (?v6 B$) (?v7 B_d_tllist$)) (=> (and (= ?v2 (tCons$a ?v4 ?v5)) (and (= ?v3 (tCons$a ?v6 ?v7)) (and (fun_app$h (fun_app$i ?v0 ?v4) ?v6) (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1) ?v5) ?v7)))) false)))) false)) :named a41))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 B_d_tllist$)) (=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3) (and (forall ((?v4 C$) (?v5 D$)) (=> (and (= ?v2 (tNil$ ?v4)) (and (= ?v3 (tNil$a ?v5)) (fun_app$d (fun_app$o ?v1 ?v4) ?v5))) false)) (forall ((?v4 A$) (?v5 A_c_tllist$) (?v6 B$) (?v7 B_d_tllist$)) (=> (and (= ?v2 (tCons$ ?v4 ?v5)) (and (= ?v3 (tCons$a ?v6 ?v7)) (and (fun_app$h (fun_app$l ?v0 ?v4) ?v6) (tllist_all2$ ?v0 ?v1 ?v5 ?v7)))) false)))) false)) :named a42))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 A_c_tllist$)) (=> (and (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1) ?v2) ?v3) (and (forall ((?v4 C$) (?v5 C$)) (=> (and (= ?v2 (tNil$ ?v4)) (and (= ?v3 (tNil$ ?v5)) (fun_app$f (fun_app$g ?v1 ?v4) ?v5))) false)) (forall ((?v4 A$) (?v5 A_c_tllist$) (?v6 A$) (?v7 A_c_tllist$)) (=> (and (= ?v2 (tCons$ ?v4 ?v5)) (and (= ?v3 (tCons$ ?v6 ?v7)) (and (fun_app$j (fun_app$k ?v0 ?v4) ?v6) (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1) ?v5) ?v7)))) false)))) false)) :named a43))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 A_c_tllist$)) (=> (and (tllist_all2$b ?v0 ?v1 ?v2 ?v3) (and (forall ((?v4 D$) (?v5 C$)) (=> (and (= ?v2 (tNil$a ?v4)) (and (= ?v3 (tNil$ ?v5)) (fun_app$f (fun_app$n ?v1 ?v4) ?v5))) false)) (forall ((?v4 B$) (?v5 B_d_tllist$) (?v6 A$) (?v7 A_c_tllist$)) (=> (and (= ?v2 (tCons$a ?v4 ?v5)) (and (= ?v3 (tCons$ ?v6 ?v7)) (and (fun_app$j (fun_app$m ?v0 ?v4) ?v6) (tllist_all2$b ?v0 ?v1 ?v5 ?v7)))) false)))) false)) :named a44))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 B_d_tllist$) (?v3 B_d_tllist$)) (=> (and (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1) ?v2) ?v3) (and (forall ((?v4 D$) (?v5 D$)) (=> (and (= ?v2 (tNil$a ?v4)) (and (= ?v3 (tNil$a ?v5)) (fun_app$d (fun_app$e ?v1 ?v4) ?v5))) false)) (forall ((?v4 B$) (?v5 B_d_tllist$) (?v6 B$) (?v7 B_d_tllist$)) (=> (and (= ?v2 (tCons$a ?v4 ?v5)) (and (= ?v3 (tCons$a ?v6 ?v7)) (and (fun_app$h (fun_app$i ?v0 ?v4) ?v6) (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1) ?v5) ?v7)))) false)))) false)) :named a45))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A_c_tllist$) (?v3 B_d_tllist$)) (=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3) (and (forall ((?v4 C$) (?v5 D$)) (=> (and (= ?v2 (tNil$ ?v4)) (and (= ?v3 (tNil$a ?v5)) (fun_app$d (fun_app$o ?v1 ?v4) ?v5))) false)) (forall ((?v4 A$) (?v5 A_c_tllist$) (?v6 B$) (?v7 B_d_tllist$)) (=> (and (= ?v2 (tCons$ ?v4 ?v5)) (and (= ?v3 (tCons$a ?v6 ?v7)) (and (fun_app$h (fun_app$l ?v0 ?v4) ?v6) (tllist_all2$ ?v0 ?v1 ?v5 ?v7)))) false)))) false)) :named a46))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 B$) (?v3 B_d_tllist$) (?v4 D$)) (not (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1) (tCons$a ?v2 ?v3)) (tNil$a ?v4)))) :named a47))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 B$) (?v3 B_d_tllist$) (?v4 C$)) (not (tllist_all2$b ?v0 ?v1 (tCons$a ?v2 ?v3) (tNil$ ?v4)))) :named a48))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A$) (?v3 A_c_tllist$) (?v4 C$)) (not (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1) (tCons$ ?v2 ?v3)) (tNil$ ?v4)))) :named a49))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 A$) (?v3 A_c_tllist$) (?v4 D$)) (not (tllist_all2$ ?v0 ?v1 (tCons$ ?v2 ?v3) (tNil$a ?v4)))) :named a50))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 D_d_bool_fun_fun$) (?v2 D$) (?v3 B$) (?v4 B_d_tllist$)) (not (fun_app$ (fun_app$a (tllist_all2$c ?v0 ?v1) (tNil$a ?v2)) (tCons$a ?v3 ?v4)))) :named a51))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 D_c_bool_fun_fun$) (?v2 D$) (?v3 A$) (?v4 A_c_tllist$)) (not (tllist_all2$b ?v0 ?v1 (tNil$a ?v2) (tCons$ ?v3 ?v4)))) :named a52))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 C$) (?v3 A$) (?v4 A_c_tllist$)) (not (fun_app$b (fun_app$c (tllist_all2$a ?v0 ?v1) (tNil$ ?v2)) (tCons$ ?v3 ?v4)))) :named a53))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 C_d_bool_fun_fun$) (?v2 C$) (?v3 B$) (?v4 B_d_tllist$)) (not (tllist_all2$ ?v0 ?v1 (tNil$ ?v2) (tCons$a ?v3 ?v4)))) :named a54))
(check-sat)
;(get-unsat-core)
