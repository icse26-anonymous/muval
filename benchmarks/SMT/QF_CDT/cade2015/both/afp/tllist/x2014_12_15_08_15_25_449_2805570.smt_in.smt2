; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 517
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort Unit_b_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort B_a_b_tllist_fun$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort B_a_llist_b_tllist_fun$ 0)
(declare-sort A_b_tllist_a_b_tllist_fun$ 0)
(declare-sort B_a_llist_llist_b_tllist_fun$ 0)
(declare-sort A_a_b_tllist_a_b_tllist_fun_fun$ 0)
(declare-sort A_llist_b_tllist_a_llist_b_tllist_fun$ 0)
(declare-sort A_llist_a_llist_b_tllist_a_llist_b_tllist_fun_fun$ 0)
(declare-sort A_llist_llist_b_tllist_a_llist_llist_b_tllist_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_b_tllist_a_llist_llist_b_tllist_fun_fun$ 0)
(declare-codatatypes () ((A_b_tllist$ (tNil$ (terminal$ B$)) (tCons$ (thd$ A$) (ttl$ A_b_tllist$)))
  (A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_b_tllist$ (tNil$a (terminal$a B$)) (tCons$a (thd$a A_llist_llist$) (ttl$a A_llist_llist_b_tllist$)))
  (A_llist_b_tllist$ (tNil$b (terminal$b B$)) (tCons$b (thd$b A_llist$) (ttl$b A_llist_b_tllist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))
  (A_llist_llist_llist_b_tllist$ (tNil$c (terminal$c B$)) (tCons$c (thd$c A_llist_llist_llist$) (ttl$c A_llist_llist_llist_b_tllist$)))))
(declare-fun n$ () Nat$)
(declare-fun uu$ () B_a_b_tllist_fun$)
(declare-fun xs$ () A_b_tllist$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun uua$ () A_a_b_tllist_a_b_tllist_fun_fun$)
(declare-fun uub$ () B_a_llist_llist_b_tllist_fun$)
(declare-fun uuc$ () A_llist_llist_a_llist_llist_b_tllist_a_llist_llist_b_tllist_fun_fun$)
(declare-fun uud$ () B_a_llist_b_tllist_fun$)
(declare-fun uue$ () A_llist_a_llist_b_tllist_a_llist_b_tllist_fun_fun$)
(declare-fun uuf$ () A_a_b_tllist_a_b_tllist_fun_fun$)
(declare-fun tdropn$ (Nat$) A_b_tllist_a_b_tllist_fun$)
(declare-fun fun_app$ (B_a_llist_llist_b_tllist_fun$ B$) A_llist_llist_b_tllist$)
(declare-fun tconcat$ (B$ A_llist_llist_llist_b_tllist$) A_llist_llist_b_tllist$)
(declare-fun tdropn$a (Nat$ A_llist_llist_b_tllist$) A_llist_llist_b_tllist$)
(declare-fun tdropn$b (Nat$ A_llist_b_tllist$) A_llist_b_tllist$)
(declare-fun tfilter$ (Unit_b_fun$ A_llist_llist_bool_fun$ A_llist_llist_b_tllist$) A_llist_llist_b_tllist$)
(declare-fun fun_app$a (B_a_llist_b_tllist_fun$ B$) A_llist_b_tllist$)
(declare-fun fun_app$b (B_a_b_tllist_fun$ B$) A_b_tllist$)
(declare-fun fun_app$c (A_a_b_tllist_a_b_tllist_fun_fun$ A$) A_b_tllist_a_b_tllist_fun$)
(declare-fun fun_app$d (A_llist_llist_b_tllist_a_llist_llist_b_tllist_fun$ A_llist_llist_b_tllist$) A_llist_llist_b_tllist$)
(declare-fun fun_app$e (A_llist_llist_a_llist_llist_b_tllist_a_llist_llist_b_tllist_fun_fun$ A_llist_llist$) A_llist_llist_b_tllist_a_llist_llist_b_tllist_fun$)
(declare-fun fun_app$f (A_llist_b_tllist_a_llist_b_tllist_fun$ A_llist_b_tllist$) A_llist_b_tllist$)
(declare-fun fun_app$g (A_llist_a_llist_b_tllist_a_llist_b_tllist_fun_fun$ A_llist$) A_llist_b_tllist_a_llist_b_tllist_fun$)
(declare-fun fun_app$h (A_b_tllist_a_b_tllist_fun$ A_b_tllist$) A_b_tllist$)
(declare-fun fun_app$i (B_bool_fun$ B$) Bool)
(declare-fun fun_app$j (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$k (A_bool_fun$ A$) Bool)
(declare-fun tconcat$a (B$ A_llist_llist_b_tllist$) A_llist_b_tllist$)
(declare-fun tconcat$b (B$ A_llist_b_tllist$) A_b_tllist$)
(declare-fun tconcat$c (Unit_b_fun$ A_llist_llist_llist_b_tllist$) A_llist_llist_b_tllist$)
(declare-fun tconcat$d (Unit_b_fun$ A_llist_llist_b_tllist$) A_llist_b_tllist$)
(declare-fun tconcat$e (Unit_b_fun$ A_llist_b_tllist$) A_b_tllist$)
(declare-fun tfilter$a (Unit_b_fun$ A_llist_bool_fun$ A_llist_b_tllist$) A_llist_b_tllist$)
(declare-fun tfilter$b (Unit_b_fun$ A_bool_fun$ A_b_tllist$) A_b_tllist$)
(declare-fun tfilter$c (B$ A_llist_llist_bool_fun$ A_llist_llist_b_tllist$) A_llist_llist_b_tllist$)
(declare-fun tfilter$d (B$ A_llist_bool_fun$ A_llist_b_tllist$) A_llist_b_tllist$)
(declare-fun tfilter$e (B$ A_bool_fun$ A_b_tllist$) A_b_tllist$)
(declare-fun case_tllist$ (B_a_b_tllist_fun$ A_a_b_tllist_a_b_tllist_fun_fun$ A_b_tllist$) A_b_tllist$)
(declare-fun pred_tllist$ (A_llist_llist_bool_fun$ B_bool_fun$ A_llist_llist_b_tllist$) Bool)
(declare-fun case_tllist$a (B_a_llist_b_tllist_fun$ A_llist_a_llist_b_tllist_a_llist_b_tllist_fun_fun$ A_llist_b_tllist$) A_llist_b_tllist$)
(declare-fun case_tllist$b (B_a_llist_llist_b_tllist_fun$ A_llist_llist_a_llist_llist_b_tllist_a_llist_llist_b_tllist_fun_fun$ A_llist_llist_b_tllist$) A_llist_llist_b_tllist$)
(declare-fun pred_tllist$a (A_llist_bool_fun$ B_bool_fun$ A_llist_b_tllist$) Bool)
(declare-fun pred_tllist$b (A_bool_fun$ B_bool_fun$ A_b_tllist$) Bool)
(assert (! (forall ((?v0 B$)) (! (= (fun_app$ uub$ ?v0) (tNil$a ?v0)) :pattern ((fun_app$ uub$ ?v0)))) :named a0))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$a uud$ ?v0) (tNil$b ?v0)) :pattern ((fun_app$a uud$ ?v0)))) :named a1))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$b uu$ ?v0) (tNil$ ?v0)) :pattern ((fun_app$b uu$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$c uua$ ?v0) (tdropn$ n$)) :pattern ((fun_app$c uua$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_b_tllist$)) (! (= (fun_app$d (fun_app$e uuc$ ?v0) ?v1) ?v1) :pattern ((fun_app$d (fun_app$e uuc$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_b_tllist$)) (! (= (fun_app$f (fun_app$g uue$ ?v0) ?v1) ?v1) :pattern ((fun_app$f (fun_app$g uue$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$)) (! (= (fun_app$h (fun_app$c uuf$ ?v0) ?v1) ?v1) :pattern ((fun_app$h (fun_app$c uuf$ ?v0) ?v1)))) :named a6))
(assert (! (not (= (fun_app$h (tdropn$ (suc$ n$)) xs$) (case_tllist$ uu$ uua$ xs$))) :named a7))
(assert (! (forall ((?v0 B$) (?v1 B$)) (= (= (tNil$a ?v0) (tNil$a ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 B$) (?v1 B$)) (= (= (tNil$b ?v0) (tNil$b ?v1)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 B$) (?v1 B$)) (= (= (tNil$ ?v0) (tNil$ ?v1)) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 B$)) (! (= (tdropn$a ?v0 (tNil$a ?v1)) (tNil$a ?v1)) :pattern ((tdropn$a ?v0 (tNil$a ?v1))))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 B$)) (! (= (tdropn$b ?v0 (tNil$b ?v1)) (tNil$b ?v1)) :pattern ((tdropn$b ?v0 (tNil$b ?v1))))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 B$)) (! (= (fun_app$h (tdropn$ ?v0) (tNil$ ?v1)) (tNil$ ?v1)) :pattern ((fun_app$h (tdropn$ ?v0) (tNil$ ?v1))))) :named a13))
(assert (! (forall ((?v0 B_a_llist_b_tllist_fun$) (?v1 A_llist_a_llist_b_tllist_a_llist_b_tllist_fun_fun$) (?v2 B$)) (! (= (case_tllist$a ?v0 ?v1 (tNil$b ?v2)) (fun_app$a ?v0 ?v2)) :pattern ((case_tllist$a ?v0 ?v1 (tNil$b ?v2))))) :named a14))
(assert (! (forall ((?v0 B_a_b_tllist_fun$) (?v1 A_a_b_tllist_a_b_tllist_fun_fun$) (?v2 B$)) (! (= (case_tllist$ ?v0 ?v1 (tNil$ ?v2)) (fun_app$b ?v0 ?v2)) :pattern ((case_tllist$ ?v0 ?v1 (tNil$ ?v2))))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a17))
(assert (! (forall ((?v0 A_llist_llist_b_tllist$)) (= (ttl$a ?v0) (case_tllist$b uub$ uuc$ ?v0))) :named a18))
(assert (! (forall ((?v0 A_llist_b_tllist$)) (= (ttl$b ?v0) (case_tllist$a uud$ uue$ ?v0))) :named a19))
(assert (! (forall ((?v0 A_b_tllist$)) (= (ttl$ ?v0) (case_tllist$ uu$ uuf$ ?v0))) :named a20))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 B_bool_fun$) (?v2 B$)) (! (= (pred_tllist$ ?v0 ?v1 (tNil$a ?v2)) (fun_app$i ?v1 ?v2)) :pattern ((pred_tllist$ ?v0 ?v1 (tNil$a ?v2))))) :named a21))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 B_bool_fun$) (?v2 B$)) (! (= (pred_tllist$a ?v0 ?v1 (tNil$b ?v2)) (fun_app$i ?v1 ?v2)) :pattern ((pred_tllist$a ?v0 ?v1 (tNil$b ?v2))))) :named a22))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 B_bool_fun$) (?v2 B$)) (! (= (pred_tllist$b ?v0 ?v1 (tNil$ ?v2)) (fun_app$i ?v1 ?v2)) :pattern ((pred_tllist$b ?v0 ?v1 (tNil$ ?v2))))) :named a23))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (tconcat$ ?v0 (tNil$c ?v1)) (tNil$a ?v1)) :pattern ((tconcat$ ?v0 (tNil$c ?v1))))) :named a24))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (tconcat$a ?v0 (tNil$a ?v1)) (tNil$b ?v1)) :pattern ((tconcat$a ?v0 (tNil$a ?v1))))) :named a25))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (tconcat$b ?v0 (tNil$b ?v1)) (tNil$ ?v1)) :pattern ((tconcat$b ?v0 (tNil$b ?v1))))) :named a26))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a27))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a28))
(assert (! (forall ((?v0 Unit_b_fun$) (?v1 B$)) (! (= (tconcat$c ?v0 (tNil$c ?v1)) (tNil$a ?v1)) :pattern ((tconcat$c ?v0 (tNil$c ?v1))))) :named a29))
(assert (! (forall ((?v0 Unit_b_fun$) (?v1 B$)) (! (= (tconcat$d ?v0 (tNil$a ?v1)) (tNil$b ?v1)) :pattern ((tconcat$d ?v0 (tNil$a ?v1))))) :named a30))
(assert (! (forall ((?v0 Unit_b_fun$) (?v1 B$)) (! (= (tconcat$e ?v0 (tNil$b ?v1)) (tNil$ ?v1)) :pattern ((tconcat$e ?v0 (tNil$b ?v1))))) :named a31))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_llist_b_tllist$)) (! (= (tdropn$b (suc$ ?v0) (tCons$b ?v1 ?v2)) (tdropn$b ?v0 ?v2)) :pattern ((tdropn$b (suc$ ?v0) (tCons$b ?v1 ?v2))))) :named a32))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 A_b_tllist$)) (! (= (fun_app$h (tdropn$ (suc$ ?v0)) (tCons$ ?v1 ?v2)) (fun_app$h (tdropn$ ?v0) ?v2)) :pattern ((fun_app$h (tdropn$ (suc$ ?v0)) (tCons$ ?v1 ?v2))))) :named a33))
(assert (! (forall ((?v0 Unit_b_fun$) (?v1 A_llist_llist_bool_fun$) (?v2 B$)) (! (= (tfilter$ ?v0 ?v1 (tNil$a ?v2)) (tNil$a ?v2)) :pattern ((tfilter$ ?v0 ?v1 (tNil$a ?v2))))) :named a34))
(assert (! (forall ((?v0 Unit_b_fun$) (?v1 A_llist_bool_fun$) (?v2 B$)) (! (= (tfilter$a ?v0 ?v1 (tNil$b ?v2)) (tNil$b ?v2)) :pattern ((tfilter$a ?v0 ?v1 (tNil$b ?v2))))) :named a35))
(assert (! (forall ((?v0 Unit_b_fun$) (?v1 A_bool_fun$) (?v2 B$)) (! (= (tfilter$b ?v0 ?v1 (tNil$ ?v2)) (tNil$ ?v2)) :pattern ((tfilter$b ?v0 ?v1 (tNil$ ?v2))))) :named a36))
(assert (! (forall ((?v0 B$) (?v1 A_llist_llist_bool_fun$) (?v2 B$)) (! (= (tfilter$c ?v0 ?v1 (tNil$a ?v2)) (tNil$a ?v2)) :pattern ((tfilter$c ?v0 ?v1 (tNil$a ?v2))))) :named a37))
(assert (! (forall ((?v0 B$) (?v1 A_llist_bool_fun$) (?v2 B$)) (! (= (tfilter$d ?v0 ?v1 (tNil$b ?v2)) (tNil$b ?v2)) :pattern ((tfilter$d ?v0 ?v1 (tNil$b ?v2))))) :named a38))
(assert (! (forall ((?v0 B$) (?v1 A_bool_fun$) (?v2 B$)) (! (= (tfilter$e ?v0 ?v1 (tNil$ ?v2)) (tNil$ ?v2)) :pattern ((tfilter$e ?v0 ?v1 (tNil$ ?v2))))) :named a39))
(assert (! (forall ((?v0 A$) (?v1 A_b_tllist$) (?v2 A$) (?v3 A_b_tllist$)) (= (= (tCons$ ?v0 ?v1) (tCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a40))
(assert (! (forall ((?v0 B$) (?v1 A_llist_bool_fun$) (?v2 A_llist$) (?v3 A_llist_b_tllist$)) (! (= (tfilter$d ?v0 ?v1 (tCons$b ?v2 ?v3)) (ite (fun_app$j ?v1 ?v2) (tCons$b ?v2 (tfilter$d ?v0 ?v1 ?v3)) (tfilter$d ?v0 ?v1 ?v3))) :pattern ((tfilter$d ?v0 ?v1 (tCons$b ?v2 ?v3))))) :named a41))
(assert (! (forall ((?v0 B$) (?v1 A_bool_fun$) (?v2 A$) (?v3 A_b_tllist$)) (! (= (tfilter$e ?v0 ?v1 (tCons$ ?v2 ?v3)) (ite (fun_app$k ?v1 ?v2) (tCons$ ?v2 (tfilter$e ?v0 ?v1 ?v3)) (tfilter$e ?v0 ?v1 ?v3))) :pattern ((tfilter$e ?v0 ?v1 (tCons$ ?v2 ?v3))))) :named a42))
(check-sat)
;(get-unsat-core)
