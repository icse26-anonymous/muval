; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 103
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort B_a_b_tllist_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort A_b_tllist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Bool_a_b_tllist_fun$ 0)
(declare-sort B_a_llist_b_prod_fun$ 0)
(declare-sort B_b_a_llist_prod_fun$ 0)
(declare-sort A_llist_b_bool_fun_fun$ 0)
(declare-sort B_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_prod_bool_fun$ 0)
(declare-sort Bool_a_llist_b_prod_fun$ 0)
(declare-sort A_b_tllist_a_b_tllist_fun$ 0)
(declare-sort A_llist_a_llist_b_prod_fun$ 0)
(declare-sort A_llist_b_a_llist_prod_fun$ 0)
(declare-sort A_llist_a_llist_fun_nat_fun$ 0)
(declare-sort Nat_a_llist_a_llist_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_a_b_tllist_fun_fun$ 0)
(declare-sort B_a_llist_b_bool_fun_fun_fun$ 0)
(declare-sort B_a_llist_b_prod_bool_fun_fun$ 0)
(declare-sort A_llist_b_a_llist_b_prod_fun_fun$ 0)
(declare-sort A_llist_b_b_a_llist_prod_fun_fun$ 0)
(declare-sort A_llist_b_prod_bool_fun_bool_fun$ 0)
(declare-sort B_a_llist_a_llist_b_prod_fun_fun$ 0)
(declare-sort B_a_llist_b_a_llist_prod_fun_fun$ 0)
(declare-sort Bool_a_llist_b_prod_bool_fun_fun$ 0)
(declare-sort A_llist_b_prod_a_llist_b_prod_fun$ 0)
(declare-sort A_llist_a_llist_b_prod_bool_fun_fun$ 0)
(declare-sort A_llist_b_a_llist_b_bool_fun_fun_fun_fun$ 0)
(declare-sort A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ 0)
(declare-sort A_llist_b_prod_a_llist_b_prod_fun_nat_fun$ 0)
(declare-sort B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ 0)
(declare-sort Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$ 0)
(declare-sort A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ 0)
(declare-sort B_a_llist_prod_a_llist_b_prod_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort Nat_a_llist_a_llist_fun_fun_nat_nat_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_b_bool_fun_fun_a_llist_b_prod_bool_fun_fun$ 0)
(declare-sort A_llist_b_prod_bool_fun_a_llist_b_prod_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$ 0)
(declare-sort A_llist_b_prod_a_llist_b_prod_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort Nat_a_llist_b_prod_a_llist_b_prod_fun_fun_nat_nat_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_nat_fun_a_llist_a_llist_fun_nat_fun_fun$ 0)
(declare-sort Nat_a_llist_a_llist_fun_fun_nat_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun_a_llist_b_a_llist_b_prod_bool_fun_fun_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun_a_llist_b_prod_a_llist_b_prod_bool_fun_fun_fun$ 0)
(declare-sort A_llist_b_bool_fun_fun_a_llist_b_a_llist_b_prod_bool_fun_fun_fun_fun$ 0)
(declare-sort A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$ 0)
(declare-sort Nat_a_llist_a_llist_fun_fun_nat_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$ 0)
(declare-sort Nat_a_llist_b_prod_a_llist_b_prod_fun_fun_nat_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_nat_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_nat_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_a_llist_b_prod_bool_fun_fun_fun_fun$ 0)
(declare-sort A_llist_b_b_a_llist_prod_fun_fun_a_llist_b_a_llist_b_prod_bool_fun_fun_fun_fun$ 0)
(declare-sort B_a_llist_a_llist_b_prod_fun_fun_b_a_llist_a_llist_b_prod_bool_fun_fun_fun_fun$ 0)
(declare-sort B_a_llist_b_a_llist_prod_fun_fun_b_a_llist_a_llist_b_prod_bool_fun_fun_fun_fun$ 0)
(declare-sort A_llist_b_a_llist_b_prod_bool_fun_fun_fun_a_llist_b_a_llist_b_prod_bool_fun_fun_fun_fun$ 0)
(declare-sort Nat_a_llist_b_prod_a_llist_b_prod_fun_fun_nat_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$ 0)
(declare-sort A_llist_b_a_llist_b_prod_bool_fun_fun_fun_a_llist_b_prod_a_llist_b_prod_bool_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_nat_fun_a_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_b_prod_a_llist_b_prod_fun_nat_fun_a_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_a_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_llist_b_prod$ (pair$ (fst$ A_llist$) (snd$ B$)))
  (B_a_llist_prod$ (pair$a (fst$a B$) (snd$a A_llist$)))))
(declare-codatatypes () ((A_b_tllist$ (tNil$ (terminal$ B$)) (tCons$ (thd$ A$) (ttl$ A_b_tllist$)))))
(declare-fun uu$ (A_llist$ B$) A_llist_b_bool_fun_fun$)
(declare-fun nat$ () Nat$)
(declare-fun uua$ () A_llist_b_a_llist_b_prod_bool_fun_fun_fun$)
(declare-fun uub$ (Bool B_a_llist_bool_fun_fun$) B_a_llist_bool_fun_fun$)
(declare-fun uuc$ (Bool A_llist_b_bool_fun_fun$) A_llist_b_bool_fun_fun$)
(declare-fun uud$ (B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_prod$) B_a_llist_bool_fun_fun$)
(declare-fun uue$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_prod$) A_llist_b_bool_fun_fun$)
(declare-fun uuf$ () A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun uug$ () A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)
(declare-fun uuh$ (A_llist_b_prod_a_llist_b_prod_fun$) Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)
(declare-fun uui$ (A_llist_a_llist_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun uuj$ (A_llist_b_prod_a_llist_b_prod_fun$) A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)
(declare-fun uuk$ (A_llist_b_prod_a_llist_b_prod_fun$) A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)
(declare-fun uul$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) B_a_llist_a_llist_b_prod_fun_fun_b_a_llist_a_llist_b_prod_bool_fun_fun_fun_fun$)
(declare-fun uum$ (A_llist_b_bool_fun_fun$ B_a_llist_a_llist_b_prod_fun_fun$) B_a_llist_bool_fun_fun$)
(declare-fun uun$ (A_llist_b_a_llist_b_prod_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$) A_llist_b_a_llist_b_prod_fun_fun$)
(declare-fun uuo$ (A_llist_b_a_b_tllist_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$) A_llist_b_a_b_tllist_fun_fun$)
(declare-fun uup$ (B_a_llist_bool_fun_fun$ A_llist_b_b_a_llist_prod_fun_fun$) A_llist_b_bool_fun_fun$)
(declare-fun uuq$ (B_a_llist_bool_fun_fun$ B_a_llist_b_a_llist_prod_fun_fun$) B_a_llist_bool_fun_fun$)
(declare-fun uur$ (B_a_llist_a_llist_b_prod_bool_fun_fun_fun$) A_llist_b_b_a_llist_prod_fun_fun_a_llist_b_a_llist_b_prod_bool_fun_fun_fun_fun$)
(declare-fun uus$ (B_a_llist_a_llist_b_prod_bool_fun_fun_fun$) B_a_llist_b_a_llist_prod_fun_fun_b_a_llist_a_llist_b_prod_bool_fun_fun_fun_fun$)
(declare-fun uut$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_a_llist_b_prod_bool_fun_fun_fun_fun$)
(declare-fun uuu$ (A_llist_b_bool_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$) A_llist_b_bool_fun_fun$)
(declare-fun uuv$ (Bool_bool_fun$ A_llist_b_bool_fun_fun$) A_llist_b_bool_fun_fun$)
(declare-fun uuw$ (A_llist_b_prod_bool_fun_bool_fun$ A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) A_llist_b_bool_fun_fun$)
(declare-fun uux$ (Bool_a_llist_b_prod_bool_fun_fun$) A_llist_b_bool_fun_fun_a_llist_b_a_llist_b_prod_bool_fun_fun_fun_fun$)
(declare-fun uuy$ (A_llist_b_prod_bool_fun_a_llist_b_prod_bool_fun_fun$) A_llist_b_a_llist_b_prod_bool_fun_fun_fun_a_llist_b_a_llist_b_prod_bool_fun_fun_fun_fun$)
(declare-fun uuz$ (Bool_bool_fun$ B_a_llist_bool_fun_fun$) B_a_llist_bool_fun_fun$)
(declare-fun uva$ (Bool_a_b_tllist_fun$ A_llist_b_bool_fun_fun$) A_llist_b_a_b_tllist_fun_fun$)
(declare-fun uvb$ (A_b_tllist_bool_fun$ A_llist_b_a_b_tllist_fun_fun$) A_llist_b_bool_fun_fun$)
(declare-fun uvc$ (Bool_a_llist_b_prod_fun$ A_llist_b_bool_fun_fun$) A_llist_b_a_llist_b_prod_fun_fun$)
(declare-fun uvd$ (A_llist_b_prod_bool_fun$ A_llist_b_a_llist_b_prod_fun_fun$) A_llist_b_bool_fun_fun$)
(declare-fun uve$ (A_b_tllist_a_b_tllist_fun$ A_llist_b_a_b_tllist_fun_fun$) A_llist_b_a_b_tllist_fun_fun$)
(declare-fun uvf$ () A_llist_b_a_b_tllist_fun_fun$)
(declare-fun uvg$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) B_a_llist_a_llist_b_prod_bool_fun_fun_fun$)
(declare-fun uvh$ (A_llist_b_bool_fun_fun$) B_a_llist_bool_fun_fun$)
(declare-fun uvi$ (B_a_llist_a_llist_b_prod_bool_fun_fun_fun$) A_llist_b_a_llist_b_prod_bool_fun_fun_fun$)
(declare-fun uvj$ (B_a_llist_bool_fun_fun$) A_llist_b_bool_fun_fun$)
(declare-fun uvk$ (A_llist_a_llist_bool_fun_fun$ B_b_bool_fun_fun$) A_llist_b_a_llist_b_bool_fun_fun_fun_fun$)
(declare-fun uvl$ (A_llist_a_llist_bool_fun_fun$) B_b_bool_fun_fun_a_llist_b_a_llist_b_prod_bool_fun_fun_fun_fun$)
(declare-fun comp$ (A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) Nat_a_llist_a_llist_fun_fun_nat_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$)
(declare-fun swap$ (A_llist_b_prod$) B_a_llist_prod$)
(declare-fun apfst$ () A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)
(declare-fun comp$a (Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) Nat_nat_fun_nat_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$)
(declare-fun comp$b (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) Nat_a_llist_a_llist_fun_fun_nat_a_llist_a_llist_fun_fun_fun$)
(declare-fun comp$c (A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$)
(declare-fun comp$d (A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) Nat_a_llist_b_prod_a_llist_b_prod_fun_fun_nat_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$)
(declare-fun comp$e (A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_a_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$)
(declare-fun comp$f (A_llist_a_llist_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun comp$g (Nat_a_llist_a_llist_fun_fun$) Nat_nat_fun_nat_a_llist_a_llist_fun_fun_fun$)
(declare-fun comp$h (Nat_nat_fun$) Nat_nat_fun_nat_nat_fun_fun$)
(declare-fun comp$i (A_llist_a_llist_fun_nat_fun$) Nat_a_llist_a_llist_fun_fun_nat_nat_fun_fun$)
(declare-fun comp$j (Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) A_llist_a_llist_fun_nat_fun_a_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$)
(declare-fun comp$k (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$)
(declare-fun comp$l (A_llist_b_prod_a_llist_b_prod_fun_a_llist_a_llist_fun_fun$) Nat_a_llist_b_prod_a_llist_b_prod_fun_fun_nat_a_llist_a_llist_fun_fun_fun$)
(declare-fun comp$m (A_llist_b_prod_a_llist_b_prod_fun_a_llist_a_llist_fun_fun$) A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$)
(declare-fun comp$n (A_llist_b_prod_a_llist_b_prod_fun_nat_fun$) Nat_a_llist_b_prod_a_llist_b_prod_fun_fun_nat_nat_fun_fun$)
(declare-fun comp$o (Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) A_llist_b_prod_a_llist_b_prod_fun_nat_fun_a_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$)
(declare-fun comp$p (Nat_a_llist_a_llist_fun_fun$) A_llist_a_llist_fun_nat_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$)
(declare-fun comp$q (Nat_nat_fun$) A_llist_a_llist_fun_nat_fun_a_llist_a_llist_fun_nat_fun_fun$)
(declare-fun comp$r (A_llist_a_llist_fun_nat_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_nat_fun_fun$)
(declare-fun prod1$ () A_llist_b_prod$)
(declare-fun prod2$ () A_llist_b_prod$)
(declare-fun reflp$ (A_llist_b_prod_a_llist_b_prod_bool_fun_fun$) Bool)
(declare-fun swap$a (B_a_llist_prod$) A_llist_b_prod$)
(declare-fun ldropn$ () Nat_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$ (B_a_b_tllist_fun$ B$) A_b_tllist$)
(declare-fun lappend$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun fun_app$a (A_llist_b_a_b_tllist_fun_fun$ A_llist$) B_a_b_tllist_fun$)
(declare-fun fun_app$b (B_a_llist_b_prod_bool_fun_fun$ B$) A_llist_b_prod_bool_fun$)
(declare-fun fun_app$c (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist$) B_a_llist_b_prod_bool_fun_fun$)
(declare-fun fun_app$d (A_llist_b_bool_fun_fun_a_llist_b_prod_bool_fun_fun$ A_llist_b_bool_fun_fun$) A_llist_b_prod_bool_fun$)
(declare-fun fun_app$e (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$f (B_a_llist_bool_fun_fun$ B$) A_llist_bool_fun$)
(declare-fun fun_app$g (B_bool_fun$ B$) Bool)
(declare-fun fun_app$h (A_llist_b_bool_fun_fun$ A_llist$) B_bool_fun$)
(declare-fun fun_app$i (A_llist_a_llist_b_prod_bool_fun_fun$ A_llist$) A_llist_b_prod_bool_fun$)
(declare-fun fun_app$j (B_a_llist_a_llist_b_prod_bool_fun_fun_fun$ B$) A_llist_a_llist_b_prod_bool_fun_fun$)
(declare-fun fun_app$k (A_llist_b_prod_bool_fun$ A_llist_b_prod$) Bool)
(declare-fun fun_app$l (B_a_llist_b_prod_fun$ B$) A_llist_b_prod$)
(declare-fun fun_app$m (A_llist_b_a_llist_b_prod_fun_fun$ A_llist$) B_a_llist_b_prod_fun$)
(declare-fun fun_app$n (A_llist_b_prod_a_llist_b_prod_fun$ A_llist_b_prod$) A_llist_b_prod$)
(declare-fun fun_app$o (A_llist_a_llist_b_prod_fun$ A_llist$) A_llist_b_prod$)
(declare-fun fun_app$p (B_a_llist_a_llist_b_prod_fun_fun$ B$) A_llist_a_llist_b_prod_fun$)
(declare-fun fun_app$q (A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_a_llist_b_prod_bool_fun_fun_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$) A_llist_b_a_llist_b_prod_bool_fun_fun_fun$)
(declare-fun fun_app$r (A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ A_llist_b_prod$) A_llist_b_prod_bool_fun$)
(declare-fun fun_app$s (A_llist_b_a_llist_b_prod_bool_fun_fun_fun_a_llist_b_prod_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) A_llist_b_prod_a_llist_b_prod_bool_fun_fun$)
(declare-fun fun_app$t (B_a_llist_a_llist_b_prod_fun_fun_b_a_llist_a_llist_b_prod_bool_fun_fun_fun_fun$ B_a_llist_a_llist_b_prod_fun_fun$) B_a_llist_a_llist_b_prod_bool_fun_fun_fun$)
(declare-fun fun_app$u (B_b_a_llist_prod_fun$ B$) B_a_llist_prod$)
(declare-fun fun_app$v (A_llist_b_b_a_llist_prod_fun_fun$ A_llist$) B_b_a_llist_prod_fun$)
(declare-fun fun_app$w (A_llist_b_a_llist_prod_fun$ A_llist$) B_a_llist_prod$)
(declare-fun fun_app$x (B_a_llist_b_a_llist_prod_fun_fun$ B$) A_llist_b_a_llist_prod_fun$)
(declare-fun fun_app$y (A_llist_b_b_a_llist_prod_fun_fun_a_llist_b_a_llist_b_prod_bool_fun_fun_fun_fun$ A_llist_b_b_a_llist_prod_fun_fun$) A_llist_b_a_llist_b_prod_bool_fun_fun_fun$)
(declare-fun fun_app$z (B_a_llist_prod_a_llist_b_prod_bool_fun_fun$ B_a_llist_prod$) A_llist_b_prod_bool_fun$)
(declare-fun lappendt$ (A_llist$) A_b_tllist_a_b_tllist_fun$)
(declare-fun rel_prod$ (A_llist_a_llist_bool_fun_fun$) B_b_bool_fun_fun_a_llist_b_prod_a_llist_b_prod_bool_fun_fun_fun$)
(declare-fun case_prod$ () A_llist_b_bool_fun_fun_a_llist_b_prod_bool_fun_fun$)
(declare-fun fun_app$aa (B_a_llist_b_a_llist_prod_fun_fun_b_a_llist_a_llist_b_prod_bool_fun_fun_fun_fun$ B_a_llist_b_a_llist_prod_fun_fun$) B_a_llist_a_llist_b_prod_bool_fun_fun_fun$)
(declare-fun fun_app$ab (A_b_tllist_a_b_tllist_fun$ A_b_tllist$) A_b_tllist$)
(declare-fun fun_app$ac (A_b_tllist_bool_fun$ A_b_tllist$) Bool)
(declare-fun fun_app$ad (Bool_a_b_tllist_fun$ Bool) A_b_tllist$)
(declare-fun fun_app$ae (Bool_a_llist_b_prod_fun$ Bool) A_llist_b_prod$)
(declare-fun fun_app$af (Bool_bool_fun$ Bool) Bool)
(declare-fun fun_app$ag (A_llist_b_bool_fun_fun_a_llist_b_a_llist_b_prod_bool_fun_fun_fun_fun$ A_llist_b_bool_fun_fun$) A_llist_b_a_llist_b_prod_bool_fun_fun_fun$)
(declare-fun fun_app$ah (Bool_a_llist_b_prod_bool_fun_fun$ Bool) A_llist_b_prod_bool_fun$)
(declare-fun fun_app$ai (A_llist_b_prod_bool_fun_bool_fun$ A_llist_b_prod_bool_fun$) Bool)
(declare-fun fun_app$aj (A_llist_b_a_llist_b_prod_bool_fun_fun_fun_a_llist_b_a_llist_b_prod_bool_fun_fun_fun_fun$ A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) A_llist_b_a_llist_b_prod_bool_fun_fun_fun$)
(declare-fun fun_app$ak (A_llist_b_prod_bool_fun_a_llist_b_prod_bool_fun_fun$ A_llist_b_prod_bool_fun$) A_llist_b_prod_bool_fun$)
(declare-fun fun_app$al (B_b_bool_fun_fun_a_llist_b_a_llist_b_prod_bool_fun_fun_fun_fun$ B_b_bool_fun_fun$) A_llist_b_a_llist_b_prod_bool_fun_fun_fun$)
(declare-fun fun_app$am (B_a_llist_b_bool_fun_fun_fun$ B$) A_llist_b_bool_fun_fun$)
(declare-fun fun_app$an (A_llist_b_a_llist_b_bool_fun_fun_fun_fun$ A_llist$) B_a_llist_b_bool_fun_fun_fun$)
(declare-fun fun_app$ao (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$ap (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$aq (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$ar (Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$ Nat$) A_llist_b_prod_a_llist_b_prod_fun$)
(declare-fun fun_app$as (A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$ A_llist_a_llist_fun$) A_llist_b_prod_a_llist_b_prod_fun$)
(declare-fun fun_app$at (A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$ A_llist_b_prod_a_llist_b_prod_fun$) A_llist_b_prod_a_llist_b_prod_fun$)
(declare-fun fun_app$au (Nat_a_llist_a_llist_fun_fun_nat_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$ Nat_a_llist_a_llist_fun_fun$) Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)
(declare-fun fun_app$av (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$aw (Nat_a_llist_a_llist_fun_fun$ Nat$) A_llist_a_llist_fun$)
(declare-fun fun_app$ax (Nat_nat_fun_nat_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$ Nat_nat_fun$) Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)
(declare-fun fun_app$ay (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$az (Nat_a_llist_a_llist_fun_fun_nat_a_llist_a_llist_fun_fun_fun$ Nat_a_llist_a_llist_fun_fun$) Nat_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$ba (A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$ A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)
(declare-fun fun_app$bb (Nat_a_llist_b_prod_a_llist_b_prod_fun_fun_nat_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$ Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)
(declare-fun fun_app$bc (A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_a_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$ A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)
(declare-fun fun_app$bd (Nat_nat_fun_nat_a_llist_a_llist_fun_fun_fun$ Nat_nat_fun$) Nat_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$be (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun$) Nat_nat_fun$)
(declare-fun fun_app$bf (Nat_a_llist_a_llist_fun_fun_nat_nat_fun_fun$ Nat_a_llist_a_llist_fun_fun$) Nat_nat_fun$)
(declare-fun fun_app$bg (A_llist_a_llist_fun_nat_fun_a_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$ A_llist_a_llist_fun_nat_fun$) A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)
(declare-fun fun_app$bh (A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$bi (Nat_a_llist_b_prod_a_llist_b_prod_fun_fun_nat_a_llist_a_llist_fun_fun_fun$ Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) Nat_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$bj (A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$bk (Nat_a_llist_b_prod_a_llist_b_prod_fun_fun_nat_nat_fun_fun$ Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) Nat_nat_fun$)
(declare-fun fun_app$bl (A_llist_b_prod_a_llist_b_prod_fun_nat_fun_a_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun_fun$ A_llist_b_prod_a_llist_b_prod_fun_nat_fun$) A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)
(declare-fun fun_app$bm (A_llist_a_llist_fun_nat_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ A_llist_a_llist_fun_nat_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$bn (A_llist_a_llist_fun_nat_fun_a_llist_a_llist_fun_nat_fun_fun$ A_llist_a_llist_fun_nat_fun$) A_llist_a_llist_fun_nat_fun$)
(declare-fun fun_app$bo (A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_nat_fun_fun$ A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) A_llist_a_llist_fun_nat_fun$)
(declare-fun fun_app$bp (B_b_bool_fun_fun_a_llist_b_prod_a_llist_b_prod_bool_fun_fun_fun$ B_b_bool_fun_fun$) A_llist_b_prod_a_llist_b_prod_bool_fun_fun$)
(declare-fun case_prod$a (A_llist_b_a_b_tllist_fun_fun$ A_llist_b_prod$) A_b_tllist$)
(declare-fun case_prod$b (A_llist_b_a_llist_b_prod_fun_fun$) A_llist_b_prod_a_llist_b_prod_fun$)
(declare-fun case_prod$c () A_llist_b_a_llist_b_prod_bool_fun_fun_fun_a_llist_b_prod_a_llist_b_prod_bool_fun_fun_fun$)
(declare-fun case_prod$d (B_a_llist_bool_fun_fun$ B_a_llist_prod$) Bool)
(declare-fun case_prod$e (B_a_llist_a_llist_b_prod_bool_fun_fun_fun$) B_a_llist_prod_a_llist_b_prod_bool_fun_fun$)
(declare-fun case_prod$f (B_a_llist_a_llist_b_prod_fun_fun$ B_a_llist_prod$) A_llist_b_prod$)
(declare-fun case_prod$g (A_llist_b_b_a_llist_prod_fun_fun$ A_llist_b_prod$) B_a_llist_prod$)
(declare-fun case_prod$h (B_a_llist_b_a_llist_prod_fun_fun$ B_a_llist_prod$) B_a_llist_prod$)
(declare-fun internal_split$ () A_llist_b_a_llist_b_prod_bool_fun_fun_fun_a_llist_b_prod_a_llist_b_prod_bool_fun_fun_fun$)
(declare-fun internal_split$a () A_llist_b_bool_fun_fun_a_llist_b_prod_bool_fun_fun$)
(declare-fun tllist_of_llist$ (B$ A_llist$) A_b_tllist$)
(assert (! (forall ((?v0 A_llist$) (?v1 B$)) (! (= (fun_app$ (fun_app$a uvf$ ?v0) ?v1) (tllist_of_llist$ ?v1 ?v0)) :pattern ((fun_app$ (fun_app$a uvf$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 B$)) (! (= (fun_app$b (fun_app$c uua$ ?v0) ?v1) (fun_app$d case_prod$ (uu$ ?v0 ?v1))) :pattern ((fun_app$b (fun_app$c uua$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$) (?v1 B$) (?v2 A_llist$)) (! (= (fun_app$e (fun_app$f (uvh$ ?v0) ?v1) ?v2) (fun_app$g (fun_app$h ?v0 ?v2) ?v1)) :pattern ((fun_app$e (fun_app$f (uvh$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) (?v1 B$) (?v2 A_llist$)) (! (= (fun_app$i (fun_app$j (uvg$ ?v0) ?v1) ?v2) (fun_app$b (fun_app$c ?v0 ?v2) ?v1)) :pattern ((fun_app$i (fun_app$j (uvg$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 B$)) (! (= (fun_app$g (fun_app$h (uvj$ ?v0) ?v1) ?v2) (fun_app$e (fun_app$f ?v0 ?v2) ?v1)) :pattern ((fun_app$g (fun_app$h (uvj$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$) (?v1 A_llist$) (?v2 B$)) (! (= (fun_app$b (fun_app$c (uvi$ ?v0) ?v1) ?v2) (fun_app$i (fun_app$j ?v0 ?v2) ?v1)) :pattern ((fun_app$b (fun_app$c (uvi$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) (?v1 A_llist_b_prod$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$g (fun_app$h (uue$ ?v0 ?v1) ?v2) ?v3) (fun_app$k (fun_app$b (fun_app$c ?v0 ?v2) ?v3) ?v1)) :pattern ((fun_app$g (fun_app$h (uue$ ?v0 ?v1) ?v2) ?v3)))) :named a6))
(assert (! (forall ((?v0 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$) (?v1 A_llist_b_prod$) (?v2 B$) (?v3 A_llist$)) (! (= (fun_app$e (fun_app$f (uud$ ?v0 ?v1) ?v2) ?v3) (fun_app$k (fun_app$i (fun_app$j ?v0 ?v2) ?v3) ?v1)) :pattern ((fun_app$e (fun_app$f (uud$ ?v0 ?v1) ?v2) ?v3)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 B$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$g (fun_app$h (uu$ ?v0 ?v1) ?v2) ?v3) (and (= ?v0 ?v2) (=> (lfinite$ ?v2) (= ?v1 ?v3)))) :pattern ((fun_app$g (fun_app$h (uu$ ?v0 ?v1) ?v2) ?v3)))) :named a8))
(assert (! (forall ((?v0 A_llist_b_a_b_tllist_fun_fun$) (?v1 A_llist_b_a_llist_b_prod_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$ (fun_app$a (uuo$ ?v0 ?v1) ?v2) ?v3) (case_prod$a ?v0 (fun_app$l (fun_app$m ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uuo$ ?v0 ?v1) ?v2) ?v3)))) :named a9))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_fun_fun$) (?v1 A_llist_b_a_llist_b_prod_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$l (fun_app$m (uun$ ?v0 ?v1) ?v2) ?v3) (fun_app$n (case_prod$b ?v0) (fun_app$l (fun_app$m ?v1 ?v2) ?v3))) :pattern ((fun_app$l (fun_app$m (uun$ ?v0 ?v1) ?v2) ?v3)))) :named a10))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$) (?v1 A_llist_b_a_llist_b_prod_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$g (fun_app$h (uuu$ ?v0 ?v1) ?v2) ?v3) (fun_app$k (fun_app$d case_prod$ ?v0) (fun_app$l (fun_app$m ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$h (uuu$ ?v0 ?v1) ?v2) ?v3)))) :named a11))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$) (?v1 B_a_llist_a_llist_b_prod_fun_fun$) (?v2 B$) (?v3 A_llist$)) (! (= (fun_app$e (fun_app$f (uum$ ?v0 ?v1) ?v2) ?v3) (fun_app$k (fun_app$d case_prod$ ?v0) (fun_app$o (fun_app$p ?v1 ?v2) ?v3))) :pattern ((fun_app$e (fun_app$f (uum$ ?v0 ?v1) ?v2) ?v3)))) :named a12))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) (?v1 A_llist_b_a_llist_b_prod_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$b (fun_app$c (fun_app$q (uut$ ?v0) ?v1) ?v2) ?v3) (fun_app$r (fun_app$s case_prod$c ?v0) (fun_app$l (fun_app$m ?v1 ?v2) ?v3))) :pattern ((fun_app$b (fun_app$c (fun_app$q (uut$ ?v0) ?v1) ?v2) ?v3)))) :named a13))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) (?v1 B_a_llist_a_llist_b_prod_fun_fun$) (?v2 B$) (?v3 A_llist$)) (! (= (fun_app$i (fun_app$j (fun_app$t (uul$ ?v0) ?v1) ?v2) ?v3) (fun_app$r (fun_app$s case_prod$c ?v0) (fun_app$o (fun_app$p ?v1 ?v2) ?v3))) :pattern ((fun_app$i (fun_app$j (fun_app$t (uul$ ?v0) ?v1) ?v2) ?v3)))) :named a14))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$) (?v1 A_llist_b_b_a_llist_prod_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$g (fun_app$h (uup$ ?v0 ?v1) ?v2) ?v3) (case_prod$d ?v0 (fun_app$u (fun_app$v ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$h (uup$ ?v0 ?v1) ?v2) ?v3)))) :named a15))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$) (?v1 B_a_llist_b_a_llist_prod_fun_fun$) (?v2 B$) (?v3 A_llist$)) (! (= (fun_app$e (fun_app$f (uuq$ ?v0 ?v1) ?v2) ?v3) (case_prod$d ?v0 (fun_app$w (fun_app$x ?v1 ?v2) ?v3))) :pattern ((fun_app$e (fun_app$f (uuq$ ?v0 ?v1) ?v2) ?v3)))) :named a16))
(assert (! (forall ((?v0 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$) (?v1 A_llist_b_b_a_llist_prod_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$b (fun_app$c (fun_app$y (uur$ ?v0) ?v1) ?v2) ?v3) (fun_app$z (case_prod$e ?v0) (fun_app$u (fun_app$v ?v1 ?v2) ?v3))) :pattern ((fun_app$b (fun_app$c (fun_app$y (uur$ ?v0) ?v1) ?v2) ?v3)))) :named a17))
(assert (! (forall ((?v0 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$) (?v1 B_a_llist_b_a_llist_prod_fun_fun$) (?v2 B$) (?v3 A_llist$)) (! (= (fun_app$i (fun_app$j (fun_app$aa (uus$ ?v0) ?v1) ?v2) ?v3) (fun_app$z (case_prod$e ?v0) (fun_app$w (fun_app$x ?v1 ?v2) ?v3))) :pattern ((fun_app$i (fun_app$j (fun_app$aa (uus$ ?v0) ?v1) ?v2) ?v3)))) :named a18))
(assert (! (forall ((?v0 Bool) (?v1 A_llist_b_bool_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$g (fun_app$h (uuc$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$g (fun_app$h ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$h (uuc$ ?v0 ?v1) ?v2) ?v3)))) :named a19))
(assert (! (forall ((?v0 Bool) (?v1 B_a_llist_bool_fun_fun$) (?v2 B$) (?v3 A_llist$)) (! (= (fun_app$e (fun_app$f (uub$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$e (fun_app$f ?v1 ?v2) ?v3))) :pattern ((fun_app$e (fun_app$f (uub$ ?v0 ?v1) ?v2) ?v3)))) :named a20))
(assert (! (forall ((?v0 A_b_tllist_a_b_tllist_fun$) (?v1 A_llist_b_a_b_tllist_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$ (fun_app$a (uve$ ?v0 ?v1) ?v2) ?v3) (fun_app$ab ?v0 (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uve$ ?v0 ?v1) ?v2) ?v3)))) :named a21))
(assert (! (forall ((?v0 A_b_tllist_bool_fun$) (?v1 A_llist_b_a_b_tllist_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$g (fun_app$h (uvb$ ?v0 ?v1) ?v2) ?v3) (fun_app$ac ?v0 (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$h (uvb$ ?v0 ?v1) ?v2) ?v3)))) :named a22))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun$) (?v1 A_llist_b_a_llist_b_prod_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$g (fun_app$h (uvd$ ?v0 ?v1) ?v2) ?v3) (fun_app$k ?v0 (fun_app$l (fun_app$m ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$h (uvd$ ?v0 ?v1) ?v2) ?v3)))) :named a23))
(assert (! (forall ((?v0 Bool_a_b_tllist_fun$) (?v1 A_llist_b_bool_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$ (fun_app$a (uva$ ?v0 ?v1) ?v2) ?v3) (fun_app$ad ?v0 (fun_app$g (fun_app$h ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uva$ ?v0 ?v1) ?v2) ?v3)))) :named a24))
(assert (! (forall ((?v0 Bool_a_llist_b_prod_fun$) (?v1 A_llist_b_bool_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$l (fun_app$m (uvc$ ?v0 ?v1) ?v2) ?v3) (fun_app$ae ?v0 (fun_app$g (fun_app$h ?v1 ?v2) ?v3))) :pattern ((fun_app$l (fun_app$m (uvc$ ?v0 ?v1) ?v2) ?v3)))) :named a25))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_llist_b_bool_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$g (fun_app$h (uuv$ ?v0 ?v1) ?v2) ?v3) (fun_app$af ?v0 (fun_app$g (fun_app$h ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$h (uuv$ ?v0 ?v1) ?v2) ?v3)))) :named a26))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 B_a_llist_bool_fun_fun$) (?v2 B$) (?v3 A_llist$)) (! (= (fun_app$e (fun_app$f (uuz$ ?v0 ?v1) ?v2) ?v3) (fun_app$af ?v0 (fun_app$e (fun_app$f ?v1 ?v2) ?v3))) :pattern ((fun_app$e (fun_app$f (uuz$ ?v0 ?v1) ?v2) ?v3)))) :named a27))
(assert (! (forall ((?v0 Bool_a_llist_b_prod_bool_fun_fun$) (?v1 A_llist_b_bool_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$b (fun_app$c (fun_app$ag (uux$ ?v0) ?v1) ?v2) ?v3) (fun_app$ah ?v0 (fun_app$g (fun_app$h ?v1 ?v2) ?v3))) :pattern ((fun_app$b (fun_app$c (fun_app$ag (uux$ ?v0) ?v1) ?v2) ?v3)))) :named a28))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun_bool_fun$) (?v1 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$g (fun_app$h (uuw$ ?v0 ?v1) ?v2) ?v3) (fun_app$ai ?v0 (fun_app$b (fun_app$c ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$h (uuw$ ?v0 ?v1) ?v2) ?v3)))) :named a29))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun_a_llist_b_prod_bool_fun_fun$) (?v1 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$b (fun_app$c (fun_app$aj (uuy$ ?v0) ?v1) ?v2) ?v3) (fun_app$ak ?v0 (fun_app$b (fun_app$c ?v1 ?v2) ?v3))) :pattern ((fun_app$b (fun_app$c (fun_app$aj (uuy$ ?v0) ?v1) ?v2) ?v3)))) :named a30))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 B_b_bool_fun_fun$) (?v2 A_llist$) (?v3 B$)) (! (= (fun_app$b (fun_app$c (fun_app$al (uvl$ ?v0) ?v1) ?v2) ?v3) (fun_app$d case_prod$ (fun_app$am (fun_app$an (uvk$ ?v0 ?v1) ?v2) ?v3))) :pattern ((fun_app$b (fun_app$c (fun_app$al (uvl$ ?v0) ?v1) ?v2) ?v3)))) :named a31))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 B_b_bool_fun_fun$) (?v2 A_llist$) (?v3 B$) (?v4 A_llist$) (?v5 B$)) (! (= (fun_app$g (fun_app$h (fun_app$am (fun_app$an (uvk$ ?v0 ?v1) ?v2) ?v3) ?v4) ?v5) (and (fun_app$e (fun_app$ao ?v0 ?v2) ?v4) (fun_app$g (fun_app$ap ?v1 ?v3) ?v5))) :pattern ((fun_app$g (fun_app$h (fun_app$am (fun_app$an (uvk$ ?v0 ?v1) ?v2) ?v3) ?v4) ?v5)))) :named a32))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_a_llist_fun$)) (! (= (fun_app$aq (uui$ ?v0) ?v1) ?v0) :pattern ((fun_app$aq (uui$ ?v0) ?v1)))) :named a33))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun$) (?v1 Nat$)) (! (= (fun_app$ar (uuh$ ?v0) ?v1) ?v0) :pattern ((fun_app$ar (uuh$ ?v0) ?v1)))) :named a34))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun$) (?v1 A_llist_a_llist_fun$)) (! (= (fun_app$as (uuj$ ?v0) ?v1) ?v0) :pattern ((fun_app$as (uuj$ ?v0) ?v1)))) :named a35))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun$) (?v1 A_llist_b_prod_a_llist_b_prod_fun$)) (! (= (fun_app$at (uuk$ ?v0) ?v1) ?v0) :pattern ((fun_app$at (uuk$ ?v0) ?v1)))) :named a36))
(assert (! (forall ((?v0 A_llist_a_llist_fun$)) (! (= (fun_app$aq uuf$ ?v0) ?v0) :pattern ((fun_app$aq uuf$ ?v0)))) :named a37))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun$)) (! (= (fun_app$at uug$ ?v0) ?v0) :pattern ((fun_app$at uug$ ?v0)))) :named a38))
(assert (! (not (fun_app$k (fun_app$r (fun_app$s case_prod$c uua$) (fun_app$n (fun_app$ar (fun_app$au (comp$ apfst$) ldropn$) nat$) prod1$)) (fun_app$n (fun_app$ar (fun_app$au (comp$ apfst$) ldropn$) nat$) prod2$))) :named a39))
(assert (! (fun_app$k (fun_app$r (fun_app$s case_prod$c uua$) prod1$) prod2$) :named a40))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (= (lfinite$ (fun_app$av (fun_app$aw ldropn$ ?v0) ?v1)) (lfinite$ ?v1))) :named a41))
(assert (! (forall ((?v0 Bool) (?v1 B_a_llist_bool_fun_fun$) (?v2 B_a_llist_prod$)) (= (case_prod$d (uub$ ?v0 ?v1) ?v2) (and ?v0 (case_prod$d ?v1 ?v2)))) :named a42))
(assert (! (forall ((?v0 Bool) (?v1 A_llist_b_bool_fun_fun$) (?v2 A_llist_b_prod$)) (= (fun_app$k (fun_app$d case_prod$ (uuc$ ?v0 ?v1)) ?v2) (and ?v0 (fun_app$k (fun_app$d case_prod$ ?v1) ?v2)))) :named a43))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$ar (fun_app$ax (comp$a ?v0) ?v1) ?v2) (fun_app$ar ?v0 (fun_app$ay ?v1 ?v2))) :pattern ((fun_app$ar (fun_app$ax (comp$a ?v0) ?v1) ?v2)))) :named a44))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat$)) (! (= (fun_app$aw (fun_app$az (comp$b ?v0) ?v1) ?v2) (fun_app$aq ?v0 (fun_app$aw ?v1 ?v2))) :pattern ((fun_app$aw (fun_app$az (comp$b ?v0) ?v1) ?v2)))) :named a45))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun$)) (! (= (fun_app$as (fun_app$ba (comp$c ?v0) ?v1) ?v2) (fun_app$as ?v0 (fun_app$aq ?v1 ?v2))) :pattern ((fun_app$as (fun_app$ba (comp$c ?v0) ?v1) ?v2)))) :named a46))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 Nat$)) (! (= (fun_app$ar (fun_app$bb (comp$d ?v0) ?v1) ?v2) (fun_app$at ?v0 (fun_app$ar ?v1 ?v2))) :pattern ((fun_app$ar (fun_app$bb (comp$d ?v0) ?v1) ?v2)))) :named a47))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 A_llist_a_llist_fun$)) (! (= (fun_app$as (fun_app$bc (comp$e ?v0) ?v1) ?v2) (fun_app$at ?v0 (fun_app$as ?v1 ?v2))) :pattern ((fun_app$as (fun_app$bc (comp$e ?v0) ?v1) ?v2)))) :named a48))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat$)) (! (= (fun_app$ar (fun_app$au (comp$ ?v0) ?v1) ?v2) (fun_app$as ?v0 (fun_app$aw ?v1 ?v2))) :pattern ((fun_app$ar (fun_app$au (comp$ ?v0) ?v1) ?v2)))) :named a49))
(assert (! (forall ((?v0 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$) (?v1 B_a_llist_prod$) (?v2 A_llist_b_prod$)) (= (fun_app$k (fun_app$z (case_prod$e ?v0) ?v1) ?v2) (case_prod$d (uud$ ?v0 ?v2) ?v1))) :named a50))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) (?v1 A_llist_b_prod$) (?v2 A_llist_b_prod$)) (= (fun_app$k (fun_app$r (fun_app$s case_prod$c ?v0) ?v1) ?v2) (fun_app$k (fun_app$d case_prod$ (uue$ ?v0 ?v2)) ?v1))) :named a51))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist_b_prod$)) (= (fun_app$n (fun_app$as apfst$ ?v0) (fun_app$n (fun_app$as apfst$ ?v1) ?v2)) (fun_app$n (fun_app$as apfst$ (fun_app$aq (comp$f ?v0) ?v1)) ?v2))) :named a52))
(assert (! (forall ((?v0 Nat_a_llist_a_llist_fun_fun$)) (= (fun_app$az (comp$b uuf$) ?v0) ?v0)) :named a53))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (= (fun_app$bb (comp$d uug$) ?v0) ?v0)) :named a54))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (= (fun_app$bc (comp$e uug$) ?v0) ?v0)) :named a55))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (= (fun_app$ar (fun_app$ax (comp$a (uuh$ ?v0)) ?v1) ?v2) ?v0)) :named a56))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat$)) (= (fun_app$aw (fun_app$az (comp$b (uui$ ?v0)) ?v1) ?v2) ?v0)) :named a57))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun$) (?v1 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun$)) (= (fun_app$as (fun_app$ba (comp$c (uuj$ ?v0)) ?v1) ?v2) ?v0)) :named a58))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun$) (?v1 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 Nat$)) (= (fun_app$ar (fun_app$bb (comp$d (uuk$ ?v0)) ?v1) ?v2) ?v0)) :named a59))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun$) (?v1 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 A_llist_a_llist_fun$)) (= (fun_app$as (fun_app$bc (comp$e (uuk$ ?v0)) ?v1) ?v2) ?v0)) :named a60))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat$)) (= (fun_app$ar (fun_app$au (comp$ (uuj$ ?v0)) ?v1) ?v2) ?v0)) :named a61))
(assert (! (reflp$ (fun_app$s case_prod$c uua$)) :named a62))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) (?v1 B_a_llist_a_llist_b_prod_fun_fun$) (?v2 B_a_llist_prod$)) (= (fun_app$r (fun_app$s case_prod$c ?v0) (case_prod$f ?v1 ?v2)) (fun_app$z (case_prod$e (fun_app$t (uul$ ?v0) ?v1)) ?v2))) :named a63))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$) (?v1 B_a_llist_a_llist_b_prod_fun_fun$) (?v2 B_a_llist_prod$)) (= (fun_app$k (fun_app$d case_prod$ ?v0) (case_prod$f ?v1 ?v2)) (case_prod$d (uum$ ?v0 ?v1) ?v2))) :named a64))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_fun_fun$) (?v1 A_llist_b_a_llist_b_prod_fun_fun$) (?v2 A_llist_b_prod$)) (= (fun_app$n (case_prod$b ?v0) (fun_app$n (case_prod$b ?v1) ?v2)) (fun_app$n (case_prod$b (uun$ ?v0 ?v1)) ?v2))) :named a65))
(assert (! (forall ((?v0 A_llist_b_a_b_tllist_fun_fun$) (?v1 A_llist_b_a_llist_b_prod_fun_fun$) (?v2 A_llist_b_prod$)) (= (case_prod$a ?v0 (fun_app$n (case_prod$b ?v1) ?v2)) (case_prod$a (uuo$ ?v0 ?v1) ?v2))) :named a66))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$) (?v1 A_llist_b_b_a_llist_prod_fun_fun$) (?v2 A_llist_b_prod$)) (= (case_prod$d ?v0 (case_prod$g ?v1 ?v2)) (fun_app$k (fun_app$d case_prod$ (uup$ ?v0 ?v1)) ?v2))) :named a67))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$) (?v1 B_a_llist_b_a_llist_prod_fun_fun$) (?v2 B_a_llist_prod$)) (= (case_prod$d ?v0 (case_prod$h ?v1 ?v2)) (case_prod$d (uuq$ ?v0 ?v1) ?v2))) :named a68))
(assert (! (forall ((?v0 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$) (?v1 A_llist_b_b_a_llist_prod_fun_fun$) (?v2 A_llist_b_prod$)) (= (fun_app$z (case_prod$e ?v0) (case_prod$g ?v1 ?v2)) (fun_app$r (fun_app$s case_prod$c (fun_app$y (uur$ ?v0) ?v1)) ?v2))) :named a69))
(assert (! (forall ((?v0 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$) (?v1 B_a_llist_b_a_llist_prod_fun_fun$) (?v2 B_a_llist_prod$)) (= (fun_app$z (case_prod$e ?v0) (case_prod$h ?v1 ?v2)) (fun_app$z (case_prod$e (fun_app$aa (uus$ ?v0) ?v1)) ?v2))) :named a70))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) (?v1 A_llist_b_a_llist_b_prod_fun_fun$) (?v2 A_llist_b_prod$)) (= (fun_app$r (fun_app$s case_prod$c ?v0) (fun_app$n (case_prod$b ?v1) ?v2)) (fun_app$r (fun_app$s case_prod$c (fun_app$q (uut$ ?v0) ?v1)) ?v2))) :named a71))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$) (?v1 A_llist_b_a_llist_b_prod_fun_fun$) (?v2 A_llist_b_prod$)) (= (fun_app$k (fun_app$d case_prod$ ?v0) (fun_app$n (case_prod$b ?v1) ?v2)) (fun_app$k (fun_app$d case_prod$ (uuu$ ?v0 ?v1)) ?v2))) :named a72))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_llist_b_bool_fun_fun$) (?v2 A_llist_b_prod$)) (= (fun_app$af ?v0 (fun_app$k (fun_app$d case_prod$ ?v1) ?v2)) (fun_app$k (fun_app$d case_prod$ (uuv$ ?v0 ?v1)) ?v2))) :named a73))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun_bool_fun$) (?v1 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) (?v2 A_llist_b_prod$)) (= (fun_app$ai ?v0 (fun_app$r (fun_app$s case_prod$c ?v1) ?v2)) (fun_app$k (fun_app$d case_prod$ (uuw$ ?v0 ?v1)) ?v2))) :named a74))
(assert (! (forall ((?v0 Bool_a_llist_b_prod_bool_fun_fun$) (?v1 A_llist_b_bool_fun_fun$) (?v2 A_llist_b_prod$)) (= (fun_app$ah ?v0 (fun_app$k (fun_app$d case_prod$ ?v1) ?v2)) (fun_app$r (fun_app$s case_prod$c (fun_app$ag (uux$ ?v0) ?v1)) ?v2))) :named a75))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun_a_llist_b_prod_bool_fun_fun$) (?v1 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) (?v2 A_llist_b_prod$)) (= (fun_app$ak ?v0 (fun_app$r (fun_app$s case_prod$c ?v1) ?v2)) (fun_app$r (fun_app$s case_prod$c (fun_app$aj (uuy$ ?v0) ?v1)) ?v2))) :named a76))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 B_a_llist_bool_fun_fun$) (?v2 B_a_llist_prod$)) (= (fun_app$af ?v0 (case_prod$d ?v1 ?v2)) (case_prod$d (uuz$ ?v0 ?v1) ?v2))) :named a77))
(assert (! (forall ((?v0 Bool_a_b_tllist_fun$) (?v1 A_llist_b_bool_fun_fun$) (?v2 A_llist_b_prod$)) (= (fun_app$ad ?v0 (fun_app$k (fun_app$d case_prod$ ?v1) ?v2)) (case_prod$a (uva$ ?v0 ?v1) ?v2))) :named a78))
(assert (! (forall ((?v0 A_b_tllist_bool_fun$) (?v1 A_llist_b_a_b_tllist_fun_fun$) (?v2 A_llist_b_prod$)) (= (fun_app$ac ?v0 (case_prod$a ?v1 ?v2)) (fun_app$k (fun_app$d case_prod$ (uvb$ ?v0 ?v1)) ?v2))) :named a79))
(assert (! (forall ((?v0 Bool_a_llist_b_prod_fun$) (?v1 A_llist_b_bool_fun_fun$) (?v2 A_llist_b_prod$)) (= (fun_app$ae ?v0 (fun_app$k (fun_app$d case_prod$ ?v1) ?v2)) (fun_app$n (case_prod$b (uvc$ ?v0 ?v1)) ?v2))) :named a80))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun$) (?v1 A_llist_b_a_llist_b_prod_fun_fun$) (?v2 A_llist_b_prod$)) (= (fun_app$k ?v0 (fun_app$n (case_prod$b ?v1) ?v2)) (fun_app$k (fun_app$d case_prod$ (uvd$ ?v0 ?v1)) ?v2))) :named a81))
(assert (! (forall ((?v0 A_b_tllist_a_b_tllist_fun$) (?v1 A_llist_b_a_b_tllist_fun_fun$) (?v2 A_llist_b_prod$)) (= (fun_app$ab ?v0 (case_prod$a ?v1 ?v2)) (case_prod$a (uve$ ?v0 ?v1) ?v2))) :named a82))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$au (comp$ ?v0) (fun_app$bd (comp$g ?v1) ?v2)) (fun_app$ax (comp$a (fun_app$au (comp$ ?v0) ?v1)) ?v2))) :named a83))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$)) (= (fun_app$au (comp$ ?v0) (fun_app$az (comp$b ?v1) ?v2)) (fun_app$au (comp$ (fun_app$ba (comp$c ?v0) ?v1)) ?v2))) :named a84))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$)) (= (fun_app$bb (comp$d ?v0) (fun_app$au (comp$ ?v1) ?v2)) (fun_app$au (comp$ (fun_app$bc (comp$e ?v0) ?v1)) ?v2))) :named a85))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$ax (comp$a ?v0) (fun_app$be (comp$h ?v1) ?v2)) (fun_app$ax (comp$a (fun_app$ax (comp$a ?v0) ?v1)) ?v2))) :named a86))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$az (comp$b ?v0) (fun_app$bd (comp$g ?v1) ?v2)) (fun_app$bd (comp$g (fun_app$az (comp$b ?v0) ?v1)) ?v2))) :named a87))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_nat_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$)) (= (fun_app$ax (comp$a ?v0) (fun_app$bf (comp$i ?v1) ?v2)) (fun_app$au (comp$ (fun_app$bg (comp$j ?v0) ?v1)) ?v2))) :named a88))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$)) (= (fun_app$az (comp$b ?v0) (fun_app$az (comp$b ?v1) ?v2)) (fun_app$az (comp$b (fun_app$bh (comp$k ?v0) ?v1)) ?v2))) :named a89))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_a_llist_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$)) (= (fun_app$bi (comp$l ?v0) (fun_app$au (comp$ ?v1) ?v2)) (fun_app$az (comp$b (fun_app$bj (comp$m ?v0) ?v1)) ?v2))) :named a90))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_b_prod_a_llist_b_prod_fun_nat_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (= (fun_app$ax (comp$a ?v0) (fun_app$bk (comp$n ?v1) ?v2)) (fun_app$bb (comp$d (fun_app$bl (comp$o ?v0) ?v1)) ?v2))) :named a91))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun_nat_fun$)) (= (fun_app$ba (comp$c ?v0) (fun_app$bm (comp$p ?v1) ?v2)) (fun_app$bg (comp$j (fun_app$au (comp$ ?v0) ?v1)) ?v2))) :named a92))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$ax (comp$a (fun_app$au (comp$ ?v0) ?v1)) ?v2) (fun_app$au (comp$ ?v0) (fun_app$bd (comp$g ?v1) ?v2)))) :named a93))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$)) (= (fun_app$au (comp$ (fun_app$ba (comp$c ?v0) ?v1)) ?v2) (fun_app$au (comp$ ?v0) (fun_app$az (comp$b ?v1) ?v2)))) :named a94))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$)) (= (fun_app$au (comp$ (fun_app$bc (comp$e ?v0) ?v1)) ?v2) (fun_app$bb (comp$d ?v0) (fun_app$au (comp$ ?v1) ?v2)))) :named a95))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$bd (comp$g (fun_app$az (comp$b ?v0) ?v1)) ?v2) (fun_app$az (comp$b ?v0) (fun_app$bd (comp$g ?v1) ?v2)))) :named a96))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$ax (comp$a (fun_app$ax (comp$a ?v0) ?v1)) ?v2) (fun_app$ax (comp$a ?v0) (fun_app$be (comp$h ?v1) ?v2)))) :named a97))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_nat_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$)) (= (fun_app$au (comp$ (fun_app$bg (comp$j ?v0) ?v1)) ?v2) (fun_app$ax (comp$a ?v0) (fun_app$bf (comp$i ?v1) ?v2)))) :named a98))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$)) (= (fun_app$az (comp$b (fun_app$bh (comp$k ?v0) ?v1)) ?v2) (fun_app$az (comp$b ?v0) (fun_app$az (comp$b ?v1) ?v2)))) :named a99))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun_nat_fun$)) (= (fun_app$bg (comp$j (fun_app$au (comp$ ?v0) ?v1)) ?v2) (fun_app$ba (comp$c ?v0) (fun_app$bm (comp$p ?v1) ?v2)))) :named a100))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$ax (comp$a (fun_app$bb (comp$d ?v0) ?v1)) ?v2) (fun_app$bb (comp$d ?v0) (fun_app$ax (comp$a ?v1) ?v2)))) :named a101))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_a_llist_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$)) (= (fun_app$az (comp$b (fun_app$bj (comp$m ?v0) ?v1)) ?v2) (fun_app$bi (comp$l ?v0) (fun_app$au (comp$ ?v1) ?v2)))) :named a102))
(assert (! (forall ((?v0 A_llist_b_prod$) (?v1 A_llist_b_prod$) (?v2 A_llist_b_a_llist_b_prod_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$n (case_prod$b ?v2) ?v0) (fun_app$n (case_prod$b ?v2) ?v1)))) :named a103))
(assert (! (forall ((?v0 A_llist_b_prod$) (?v1 A_llist_b_prod$) (?v2 A_llist_b_a_b_tllist_fun_fun$)) (=> (= ?v0 ?v1) (= (case_prod$a ?v2 ?v0) (case_prod$a ?v2 ?v1)))) :named a104))
(assert (! (forall ((?v0 B_a_llist_prod$) (?v1 B_a_llist_prod$) (?v2 B_a_llist_bool_fun_fun$)) (=> (= ?v0 ?v1) (= (case_prod$d ?v2 ?v0) (case_prod$d ?v2 ?v1)))) :named a105))
(assert (! (forall ((?v0 B_a_llist_prod$) (?v1 B_a_llist_prod$) (?v2 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$z (case_prod$e ?v2) ?v0) (fun_app$z (case_prod$e ?v2) ?v1)))) :named a106))
(assert (! (forall ((?v0 A_llist_b_prod$) (?v1 A_llist_b_prod$) (?v2 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$r (fun_app$s case_prod$c ?v2) ?v0) (fun_app$r (fun_app$s case_prod$c ?v2) ?v1)))) :named a107))
(assert (! (forall ((?v0 A_llist_b_prod$) (?v1 A_llist_b_prod$) (?v2 A_llist_b_bool_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$k (fun_app$d case_prod$ ?v2) ?v0) (fun_app$k (fun_app$d case_prod$ ?v2) ?v1)))) :named a108))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat$)) (=> (= (fun_app$ax (comp$a ?v0) ?v1) ?v2) (= (fun_app$ar ?v0 (fun_app$ay ?v1 ?v3)) (fun_app$ar ?v2 ?v3)))) :named a109))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$) (?v3 Nat$)) (=> (= (fun_app$az (comp$b ?v0) ?v1) ?v2) (= (fun_app$aq ?v0 (fun_app$aw ?v1 ?v3)) (fun_app$aw ?v2 ?v3)))) :named a110))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 A_llist_a_llist_fun$)) (=> (= (fun_app$ba (comp$c ?v0) ?v1) ?v2) (= (fun_app$as ?v0 (fun_app$aq ?v1 ?v3)) (fun_app$as ?v2 ?v3)))) :named a111))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat$)) (=> (= (fun_app$bb (comp$d ?v0) ?v1) ?v2) (= (fun_app$at ?v0 (fun_app$ar ?v1 ?v3)) (fun_app$ar ?v2 ?v3)))) :named a112))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 A_llist_a_llist_fun$)) (=> (= (fun_app$bc (comp$e ?v0) ?v1) ?v2) (= (fun_app$at ?v0 (fun_app$as ?v1 ?v3)) (fun_app$as ?v2 ?v3)))) :named a113))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat$)) (=> (= (fun_app$au (comp$ ?v0) ?v1) ?v2) (= (fun_app$as ?v0 (fun_app$aw ?v1 ?v3)) (fun_app$ar ?v2 ?v3)))) :named a114))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_nat_fun$)) (=> (= (fun_app$au (comp$ ?v0) ?v1) ?v2) (= (fun_app$au (comp$ ?v0) (fun_app$bd (comp$g ?v1) ?v3)) (fun_app$ax (comp$a ?v2) ?v3)))) :named a115))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$)) (=> (= (fun_app$ba (comp$c ?v0) ?v1) ?v2) (= (fun_app$au (comp$ ?v0) (fun_app$az (comp$b ?v1) ?v3)) (fun_app$au (comp$ ?v2) ?v3)))) :named a116))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$)) (=> (= (fun_app$bc (comp$e ?v0) ?v1) ?v2) (= (fun_app$bb (comp$d ?v0) (fun_app$au (comp$ ?v1) ?v3)) (fun_app$au (comp$ ?v2) ?v3)))) :named a117))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_nat_fun$)) (=> (= (fun_app$ax (comp$a ?v0) ?v1) ?v2) (= (fun_app$ax (comp$a ?v0) (fun_app$be (comp$h ?v1) ?v3)) (fun_app$ax (comp$a ?v2) ?v3)))) :named a118))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$) (?v3 Nat_nat_fun$)) (=> (= (fun_app$az (comp$b ?v0) ?v1) ?v2) (= (fun_app$az (comp$b ?v0) (fun_app$bd (comp$g ?v1) ?v3)) (fun_app$bd (comp$g ?v2) ?v3)))) :named a119))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_nat_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$)) (=> (= (fun_app$bg (comp$j ?v0) ?v1) ?v2) (= (fun_app$ax (comp$a ?v0) (fun_app$bf (comp$i ?v1) ?v3)) (fun_app$au (comp$ ?v2) ?v3)))) :named a120))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$)) (=> (= (fun_app$bh (comp$k ?v0) ?v1) ?v2) (= (fun_app$az (comp$b ?v0) (fun_app$az (comp$b ?v1) ?v3)) (fun_app$az (comp$b ?v2) ?v3)))) :named a121))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_a_llist_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$)) (=> (= (fun_app$bj (comp$m ?v0) ?v1) ?v2) (= (fun_app$bi (comp$l ?v0) (fun_app$au (comp$ ?v1) ?v3)) (fun_app$az (comp$b ?v2) ?v3)))) :named a122))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_b_prod_a_llist_b_prod_fun_nat_fun$) (?v2 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (= (fun_app$bl (comp$o ?v0) ?v1) ?v2) (= (fun_app$ax (comp$a ?v0) (fun_app$bk (comp$n ?v1) ?v3)) (fun_app$bb (comp$d ?v2) ?v3)))) :named a123))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 A_llist_a_llist_fun_nat_fun$)) (=> (= (fun_app$au (comp$ ?v0) ?v1) ?v2) (= (fun_app$ba (comp$c ?v0) (fun_app$bm (comp$p ?v1) ?v3)) (fun_app$bg (comp$j ?v2) ?v3)))) :named a124))
(assert (! (forall ((?v0 Nat_a_llist_a_llist_fun_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$) (?v3 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (= (fun_app$bd (comp$g ?v0) ?v1) ?v2) (= (fun_app$ax (comp$a (fun_app$au (comp$ ?v3) ?v0)) ?v1) (fun_app$au (comp$ ?v3) ?v2)))) :named a125))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$) (?v3 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (= (fun_app$az (comp$b ?v0) ?v1) ?v2) (= (fun_app$au (comp$ (fun_app$ba (comp$c ?v3) ?v0)) ?v1) (fun_app$au (comp$ ?v3) ?v2)))) :named a126))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (= (fun_app$au (comp$ ?v0) ?v1) ?v2) (= (fun_app$au (comp$ (fun_app$bc (comp$e ?v3) ?v0)) ?v1) (fun_app$bb (comp$d ?v3) ?v2)))) :named a127))
(assert (! (forall ((?v0 Nat_a_llist_a_llist_fun_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$) (?v3 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)) (=> (= (fun_app$bd (comp$g ?v0) ?v1) ?v2) (= (fun_app$bd (comp$g (fun_app$az (comp$b ?v3) ?v0)) ?v1) (fun_app$az (comp$b ?v3) ?v2)))) :named a128))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (= (fun_app$be (comp$h ?v0) ?v1) ?v2) (= (fun_app$ax (comp$a (fun_app$ax (comp$a ?v3) ?v0)) ?v1) (fun_app$ax (comp$a ?v3) ?v2)))) :named a129))
(assert (! (forall ((?v0 A_llist_a_llist_fun_nat_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (= (fun_app$bf (comp$i ?v0) ?v1) ?v2) (= (fun_app$au (comp$ (fun_app$bg (comp$j ?v3) ?v0)) ?v1) (fun_app$ax (comp$a ?v3) ?v2)))) :named a130))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$) (?v3 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)) (=> (= (fun_app$az (comp$b ?v0) ?v1) ?v2) (= (fun_app$az (comp$b (fun_app$bh (comp$k ?v3) ?v0)) ?v1) (fun_app$az (comp$b ?v3) ?v2)))) :named a131))
(assert (! (forall ((?v0 Nat_a_llist_a_llist_fun_fun$) (?v1 A_llist_a_llist_fun_nat_fun$) (?v2 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v3 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (= (fun_app$bm (comp$p ?v0) ?v1) ?v2) (= (fun_app$bg (comp$j (fun_app$au (comp$ ?v3) ?v0)) ?v1) (fun_app$ba (comp$c ?v3) ?v2)))) :named a132))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_nat_fun$) (?v1 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (= (fun_app$bk (comp$n ?v0) ?v1) ?v2) (= (fun_app$bb (comp$d (fun_app$bl (comp$o ?v3) ?v0)) ?v1) (fun_app$ax (comp$a ?v3) ?v2)))) :named a133))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 A_llist_b_prod_a_llist_b_prod_fun_a_llist_a_llist_fun_fun$)) (=> (= (fun_app$au (comp$ ?v0) ?v1) ?v2) (= (fun_app$az (comp$b (fun_app$bj (comp$m ?v3) ?v0)) ?v1) (fun_app$bi (comp$l ?v3) ?v2)))) :named a134))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$) (?v4 Nat$)) (=> (= (fun_app$au (comp$ ?v0) ?v1) (fun_app$au (comp$ ?v2) ?v3)) (= (fun_app$as ?v0 (fun_app$aw ?v1 ?v4)) (fun_app$as ?v2 (fun_app$aw ?v3 ?v4))))) :named a135))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_nat_fun$) (?v4 Nat$)) (=> (= (fun_app$ax (comp$a ?v0) ?v1) (fun_app$ax (comp$a ?v2) ?v3)) (= (fun_app$ar ?v0 (fun_app$ay ?v1 ?v4)) (fun_app$ar ?v2 (fun_app$ay ?v3 ?v4))))) :named a136))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_nat_fun$) (?v4 Nat$)) (=> (= (fun_app$au (comp$ ?v0) ?v1) (fun_app$ax (comp$a ?v2) ?v3)) (= (fun_app$as ?v0 (fun_app$aw ?v1 ?v4)) (fun_app$ar ?v2 (fun_app$ay ?v3 ?v4))))) :named a137))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_nat_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$) (?v4 Nat$)) (=> (= (fun_app$ax (comp$a ?v0) ?v1) (fun_app$au (comp$ ?v2) ?v3)) (= (fun_app$ar ?v0 (fun_app$ay ?v1 ?v4)) (fun_app$as ?v2 (fun_app$aw ?v3 ?v4))))) :named a138))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$) (?v4 Nat$)) (=> (= (fun_app$az (comp$b ?v0) ?v1) (fun_app$az (comp$b ?v2) ?v3)) (= (fun_app$aq ?v0 (fun_app$aw ?v1 ?v4)) (fun_app$aq ?v2 (fun_app$aw ?v3 ?v4))))) :named a139))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_nat_fun$) (?v2 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v4 Nat$)) (=> (= (fun_app$ax (comp$a ?v0) ?v1) (fun_app$bb (comp$d ?v2) ?v3)) (= (fun_app$ar ?v0 (fun_app$ay ?v1 ?v4)) (fun_app$at ?v2 (fun_app$ar ?v3 ?v4))))) :named a140))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_nat_fun$) (?v4 Nat$)) (=> (= (fun_app$bb (comp$d ?v0) ?v1) (fun_app$ax (comp$a ?v2) ?v3)) (= (fun_app$at ?v0 (fun_app$ar ?v1 ?v4)) (fun_app$ar ?v2 (fun_app$ay ?v3 ?v4))))) :named a141))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v4 Nat$)) (=> (= (fun_app$au (comp$ ?v0) ?v1) (fun_app$bb (comp$d ?v2) ?v3)) (= (fun_app$as ?v0 (fun_app$aw ?v1 ?v4)) (fun_app$at ?v2 (fun_app$ar ?v3 ?v4))))) :named a142))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v4 A_llist_a_llist_fun$)) (=> (= (fun_app$ba (comp$c ?v0) ?v1) (fun_app$ba (comp$c ?v2) ?v3)) (= (fun_app$as ?v0 (fun_app$aq ?v1 ?v4)) (fun_app$as ?v2 (fun_app$aq ?v3 ?v4))))) :named a143))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$) (?v4 Nat$)) (=> (= (fun_app$bb (comp$d ?v0) ?v1) (fun_app$au (comp$ ?v2) ?v3)) (= (fun_app$at ?v0 (fun_app$ar ?v1 ?v4)) (fun_app$as ?v2 (fun_app$aw ?v3 ?v4))))) :named a144))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_a_llist_a_llist_fun_fun$)) (=> (and (= (fun_app$au (comp$ ?v0) ?v1) (fun_app$au (comp$ ?v2) ?v3)) (= (fun_app$bd (comp$g ?v3) ?v4) ?v5)) (= (fun_app$au (comp$ ?v0) (fun_app$bd (comp$g ?v1) ?v4)) (fun_app$au (comp$ ?v2) ?v5)))) :named a145))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v4 Nat_a_llist_a_llist_fun_fun$) (?v5 Nat_a_llist_a_llist_fun_fun$)) (=> (and (= (fun_app$bc (comp$e ?v0) ?v1) (fun_app$ba (comp$c ?v2) ?v3)) (= (fun_app$az (comp$b ?v3) ?v4) ?v5)) (= (fun_app$bb (comp$d ?v0) (fun_app$au (comp$ ?v1) ?v4)) (fun_app$au (comp$ ?v2) ?v5)))) :named a146))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v2 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v4 Nat_a_llist_a_llist_fun_fun$) (?v5 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (and (= (fun_app$ba (comp$c ?v0) ?v1) (fun_app$bc (comp$e ?v2) ?v3)) (= (fun_app$au (comp$ ?v3) ?v4) ?v5)) (= (fun_app$au (comp$ ?v0) (fun_app$az (comp$b ?v1) ?v4)) (fun_app$bb (comp$d ?v2) ?v5)))) :named a147))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_nat_fun$)) (=> (and (= (fun_app$ax (comp$a ?v0) ?v1) (fun_app$ax (comp$a ?v2) ?v3)) (= (fun_app$be (comp$h ?v3) ?v4) ?v5)) (= (fun_app$ax (comp$a ?v0) (fun_app$be (comp$h ?v1) ?v4)) (fun_app$ax (comp$a ?v2) ?v5)))) :named a148))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_nat_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_nat_fun$)) (=> (and (= (fun_app$au (comp$ ?v0) ?v1) (fun_app$ax (comp$a ?v2) ?v3)) (= (fun_app$be (comp$h ?v3) ?v4) ?v5)) (= (fun_app$au (comp$ ?v0) (fun_app$bd (comp$g ?v1) ?v4)) (fun_app$ax (comp$a ?v2) ?v5)))) :named a149))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_nat_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_a_llist_a_llist_fun_fun$)) (=> (and (= (fun_app$ax (comp$a ?v0) ?v1) (fun_app$au (comp$ ?v2) ?v3)) (= (fun_app$bd (comp$g ?v3) ?v4) ?v5)) (= (fun_app$ax (comp$a ?v0) (fun_app$be (comp$h ?v1) ?v4)) (fun_app$au (comp$ ?v2) ?v5)))) :named a150))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_a_llist_a_llist_fun_fun$)) (=> (and (= (fun_app$az (comp$b ?v0) ?v1) (fun_app$az (comp$b ?v2) ?v3)) (= (fun_app$bd (comp$g ?v3) ?v4) ?v5)) (= (fun_app$az (comp$b ?v0) (fun_app$bd (comp$g ?v1) ?v4)) (fun_app$az (comp$b ?v2) ?v5)))) :named a151))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v3 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v4 Nat_a_llist_a_llist_fun_fun$) (?v5 Nat_a_llist_a_llist_fun_fun$)) (=> (and (= (fun_app$bh (comp$k ?v0) ?v1) (fun_app$bh (comp$k ?v2) ?v3)) (= (fun_app$az (comp$b ?v3) ?v4) ?v5)) (= (fun_app$az (comp$b ?v0) (fun_app$az (comp$b ?v1) ?v4)) (fun_app$az (comp$b ?v2) ?v5)))) :named a152))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_a_llist_fun_fun$) (?v1 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_a_llist_a_llist_fun_fun$)) (=> (and (= (fun_app$bi (comp$l ?v0) ?v1) (fun_app$az (comp$b ?v2) ?v3)) (= (fun_app$bd (comp$g ?v3) ?v4) ?v5)) (= (fun_app$bi (comp$l ?v0) (fun_app$ax (comp$a ?v1) ?v4)) (fun_app$az (comp$b ?v2) ?v5)))) :named a153))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_nat_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v4 Nat_a_llist_a_llist_fun_fun$) (?v5 Nat_a_llist_a_llist_fun_fun$)) (=> (and (= (fun_app$bg (comp$j ?v0) ?v1) (fun_app$ba (comp$c ?v2) ?v3)) (= (fun_app$az (comp$b ?v3) ?v4) ?v5)) (= (fun_app$ax (comp$a ?v0) (fun_app$bf (comp$i ?v1) ?v4)) (fun_app$au (comp$ ?v2) ?v5)))) :named a154))
(assert (! (forall ((?v0 Nat_a_llist_a_llist_fun_fun$) (?v1 Nat_nat_fun$) (?v2 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$) (?v4 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v5 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (and (= (fun_app$bd (comp$g ?v0) ?v1) (fun_app$az (comp$b ?v2) ?v3)) (= (fun_app$ba (comp$c ?v4) ?v2) ?v5)) (= (fun_app$ax (comp$a (fun_app$au (comp$ ?v4) ?v0)) ?v1) (fun_app$au (comp$ ?v5) ?v3)))) :named a155))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$) (?v3 Nat_nat_fun$) (?v4 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v5 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (and (= (fun_app$az (comp$b ?v0) ?v1) (fun_app$bd (comp$g ?v2) ?v3)) (= (fun_app$au (comp$ ?v4) ?v2) ?v5)) (= (fun_app$au (comp$ (fun_app$ba (comp$c ?v4) ?v0)) ?v1) (fun_app$ax (comp$a ?v5) ?v3)))) :named a156))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$) (?v4 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v5 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (and (= (fun_app$au (comp$ ?v0) ?v1) (fun_app$au (comp$ ?v2) ?v3)) (= (fun_app$bc (comp$e ?v4) ?v2) ?v5)) (= (fun_app$au (comp$ (fun_app$bc (comp$e ?v4) ?v0)) ?v1) (fun_app$au (comp$ ?v5) ?v3)))) :named a157))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$) (?v4 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v5 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (and (= (fun_app$be (comp$h ?v0) ?v1) (fun_app$be (comp$h ?v2) ?v3)) (= (fun_app$ax (comp$a ?v4) ?v2) ?v5)) (= (fun_app$ax (comp$a (fun_app$ax (comp$a ?v4) ?v0)) ?v1) (fun_app$ax (comp$a ?v5) ?v3)))) :named a158))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 A_llist_a_llist_fun_nat_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$) (?v4 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v5 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (and (= (fun_app$be (comp$h ?v0) ?v1) (fun_app$bf (comp$i ?v2) ?v3)) (= (fun_app$bg (comp$j ?v4) ?v2) ?v5)) (= (fun_app$ax (comp$a (fun_app$ax (comp$a ?v4) ?v0)) ?v1) (fun_app$au (comp$ ?v5) ?v3)))) :named a159))
(assert (! (forall ((?v0 Nat_a_llist_a_llist_fun_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$) (?v3 Nat_nat_fun$) (?v4 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v5 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (and (= (fun_app$bd (comp$g ?v0) ?v1) (fun_app$bd (comp$g ?v2) ?v3)) (= (fun_app$au (comp$ ?v4) ?v2) ?v5)) (= (fun_app$ax (comp$a (fun_app$au (comp$ ?v4) ?v0)) ?v1) (fun_app$ax (comp$a ?v5) ?v3)))) :named a160))
(assert (! (forall ((?v0 A_llist_a_llist_fun_nat_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$) (?v4 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v5 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (and (= (fun_app$bf (comp$i ?v0) ?v1) (fun_app$be (comp$h ?v2) ?v3)) (= (fun_app$ax (comp$a ?v4) ?v2) ?v5)) (= (fun_app$au (comp$ (fun_app$bg (comp$j ?v4) ?v0)) ?v1) (fun_app$ax (comp$a ?v5) ?v3)))) :named a161))
(assert (! (forall ((?v0 Nat_a_llist_a_llist_fun_fun$) (?v1 Nat_nat_fun$) (?v2 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$) (?v4 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v5 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)) (=> (and (= (fun_app$bd (comp$g ?v0) ?v1) (fun_app$az (comp$b ?v2) ?v3)) (= (fun_app$bh (comp$k ?v4) ?v2) ?v5)) (= (fun_app$bd (comp$g (fun_app$az (comp$b ?v4) ?v0)) ?v1) (fun_app$az (comp$b ?v5) ?v3)))) :named a162))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_a_llist_fun_fun$) (?v3 Nat_nat_fun$) (?v4 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v5 Nat_a_llist_a_llist_fun_fun$)) (=> (and (= (fun_app$az (comp$b ?v0) ?v1) (fun_app$bd (comp$g ?v2) ?v3)) (= (fun_app$az (comp$b ?v4) ?v2) ?v5)) (= (fun_app$az (comp$b (fun_app$bh (comp$k ?v4) ?v0)) ?v1) (fun_app$bd (comp$g ?v5) ?v3)))) :named a163))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 A_llist_a_llist_fun_nat_fun$) (?v2 A_llist_a_llist_fun_nat_fun$) (?v3 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v4 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v5 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (and (= (fun_app$bn (comp$q ?v0) ?v1) (fun_app$bo (comp$r ?v2) ?v3)) (= (fun_app$bg (comp$j ?v4) ?v2) ?v5)) (= (fun_app$bg (comp$j (fun_app$ax (comp$a ?v4) ?v0)) ?v1) (fun_app$ba (comp$c ?v5) ?v3)))) :named a164))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$)) (=> (and (= (fun_app$au (comp$ ?v0) ?v1) (fun_app$au (comp$ ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$as ?v0 (fun_app$aw ?v1 ?v4)) (fun_app$as ?v2 (fun_app$aw ?v3 ?v4)))) false)) false)) :named a165))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_nat_fun$)) (=> (and (= (fun_app$ax (comp$a ?v0) ?v1) (fun_app$ax (comp$a ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$ar ?v0 (fun_app$ay ?v1 ?v4)) (fun_app$ar ?v2 (fun_app$ay ?v3 ?v4)))) false)) false)) :named a166))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_nat_fun$)) (=> (and (= (fun_app$au (comp$ ?v0) ?v1) (fun_app$ax (comp$a ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$as ?v0 (fun_app$aw ?v1 ?v4)) (fun_app$ar ?v2 (fun_app$ay ?v3 ?v4)))) false)) false)) :named a167))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_nat_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$)) (=> (and (= (fun_app$ax (comp$a ?v0) ?v1) (fun_app$au (comp$ ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$ar ?v0 (fun_app$ay ?v1 ?v4)) (fun_app$as ?v2 (fun_app$aw ?v3 ?v4)))) false)) false)) :named a168))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$)) (=> (and (= (fun_app$az (comp$b ?v0) ?v1) (fun_app$az (comp$b ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$aq ?v0 (fun_app$aw ?v1 ?v4)) (fun_app$aq ?v2 (fun_app$aw ?v3 ?v4)))) false)) false)) :named a169))
(assert (! (forall ((?v0 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_nat_fun$) (?v2 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (and (= (fun_app$ax (comp$a ?v0) ?v1) (fun_app$bb (comp$d ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$ar ?v0 (fun_app$ay ?v1 ?v4)) (fun_app$at ?v2 (fun_app$ar ?v3 ?v4)))) false)) false)) :named a170))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_nat_fun$)) (=> (and (= (fun_app$bb (comp$d ?v0) ?v1) (fun_app$ax (comp$a ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$at ?v0 (fun_app$ar ?v1 ?v4)) (fun_app$ar ?v2 (fun_app$ay ?v3 ?v4)))) false)) false)) :named a171))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (and (= (fun_app$au (comp$ ?v0) ?v1) (fun_app$bb (comp$d ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$as ?v0 (fun_app$aw ?v1 ?v4)) (fun_app$at ?v2 (fun_app$ar ?v3 ?v4)))) false)) false)) :named a172))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)) (=> (and (= (fun_app$ba (comp$c ?v0) ?v1) (fun_app$ba (comp$c ?v2) ?v3)) (=> (forall ((?v4 A_llist_a_llist_fun$)) (= (fun_app$as ?v0 (fun_app$aq ?v1 ?v4)) (fun_app$as ?v2 (fun_app$aq ?v3 ?v4)))) false)) false)) :named a173))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v3 Nat_a_llist_a_llist_fun_fun$)) (=> (and (= (fun_app$bb (comp$d ?v0) ?v1) (fun_app$au (comp$ ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$at ?v0 (fun_app$ar ?v1 ?v4)) (fun_app$as ?v2 (fun_app$aw ?v3 ?v4)))) false)) false)) :named a174))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v2 A_llist_a_llist_fun$)) (! (= (fun_app$as (fun_app$ba (comp$c ?v0) ?v1) ?v2) (fun_app$as ?v0 (fun_app$aq ?v1 ?v2))) :pattern ((fun_app$as (fun_app$ba (comp$c ?v0) ?v1) ?v2)))) :named a175))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 Nat$)) (! (= (fun_app$ar (fun_app$bb (comp$d ?v0) ?v1) ?v2) (fun_app$at ?v0 (fun_app$ar ?v1 ?v2))) :pattern ((fun_app$ar (fun_app$bb (comp$d ?v0) ?v1) ?v2)))) :named a176))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v2 A_llist_a_llist_fun$)) (! (= (fun_app$as (fun_app$bc (comp$e ?v0) ?v1) ?v2) (fun_app$at ?v0 (fun_app$as ?v1 ?v2))) :pattern ((fun_app$as (fun_app$bc (comp$e ?v0) ?v1) ?v2)))) :named a177))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat$)) (! (= (fun_app$ar (fun_app$au (comp$ ?v0) ?v1) ?v2) (fun_app$as ?v0 (fun_app$aw ?v1 ?v2))) :pattern ((fun_app$ar (fun_app$au (comp$ ?v0) ?v1) ?v2)))) :named a178))
(assert (! (= internal_split$ case_prod$c) :named a179))
(assert (! (= internal_split$a case_prod$) :named a180))
(assert (! (forall ((?v0 A_llist_b_prod$) (?v1 A_llist_b_prod$)) (= (= (case_prod$a uvf$ ?v0) (case_prod$a uvf$ ?v1)) (fun_app$k (fun_app$r (fun_app$s case_prod$c uua$) ?v0) ?v1))) :named a181))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$) (?v1 A_llist_b_prod$)) (= (fun_app$z (case_prod$e (uvg$ ?v0)) (swap$ ?v1)) (fun_app$r (fun_app$s case_prod$c ?v0) ?v1))) :named a182))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$) (?v1 A_llist_b_prod$)) (= (case_prod$d (uvh$ ?v0) (swap$ ?v1)) (fun_app$k (fun_app$d case_prod$ ?v0) ?v1))) :named a183))
(assert (! (forall ((?v0 B_a_llist_a_llist_b_prod_bool_fun_fun_fun$) (?v1 B_a_llist_prod$)) (= (fun_app$r (fun_app$s case_prod$c (uvi$ ?v0)) (swap$a ?v1)) (fun_app$z (case_prod$e ?v0) ?v1))) :named a184))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$) (?v1 B_a_llist_prod$)) (= (fun_app$k (fun_app$d case_prod$ (uvj$ ?v0)) (swap$a ?v1)) (case_prod$d ?v0 ?v1))) :named a185))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat$) (?v3 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v4 Nat_a_llist_a_llist_fun_fun$) (?v5 Nat$)) (=> (= (fun_app$as ?v0 (fun_app$aw ?v1 ?v2)) (fun_app$as ?v3 (fun_app$aw ?v4 ?v5))) (= (fun_app$ar (fun_app$au (comp$ ?v0) ?v1) ?v2) (fun_app$ar (fun_app$au (comp$ ?v3) ?v4) ?v5)))) :named a186))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat$) (?v3 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$) (?v4 Nat_a_llist_a_llist_fun_fun$)) (=> (= (fun_app$as ?v0 (fun_app$aw ?v1 ?v2)) (fun_app$as ?v3 (fun_app$aw ?v4 ?v2))) (= (fun_app$ar (fun_app$au (comp$ ?v0) ?v1) ?v2) (fun_app$ar (fun_app$au (comp$ ?v3) ?v4) ?v2)))) :named a187))
(assert (! (forall ((?v0 Nat_a_llist_a_llist_fun_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v4 Nat_a_llist_a_llist_fun_fun$) (?v5 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (= (fun_app$aw ?v0 (fun_app$ay ?v1 ?v2)) (fun_app$aq ?v3 (fun_app$aw ?v4 ?v2))) (= (fun_app$ar (fun_app$ax (comp$a (fun_app$au (comp$ ?v5) ?v0)) ?v1) ?v2) (fun_app$ar (fun_app$au (comp$ (fun_app$ba (comp$c ?v5) ?v3)) ?v4) ?v2)))) :named a188))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) (?v1 Nat_a_llist_a_llist_fun_fun$) (?v2 Nat$) (?v3 Nat_a_llist_a_llist_fun_fun$) (?v4 Nat_nat_fun$) (?v5 A_llist_a_llist_fun_a_llist_b_prod_a_llist_b_prod_fun_fun$)) (=> (= (fun_app$aq ?v0 (fun_app$aw ?v1 ?v2)) (fun_app$aw ?v3 (fun_app$ay ?v4 ?v2))) (= (fun_app$ar (fun_app$au (comp$ (fun_app$ba (comp$c ?v5) ?v0)) ?v1) ?v2) (fun_app$ar (fun_app$ax (comp$a (fun_app$au (comp$ ?v5) ?v3)) ?v4) ?v2)))) :named a189))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_b_prod$)) (= (fun_app$ab (lappendt$ ?v0) (case_prod$a uvf$ ?v1)) (case_prod$a uvf$ (fun_app$n (fun_app$as apfst$ (lappend$ ?v0)) ?v1)))) :named a190))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 B_b_bool_fun_fun$)) (= (fun_app$bp (rel_prod$ ?v0) ?v1) (fun_app$s case_prod$c (fun_app$al (uvl$ ?v0) ?v1)))) :named a191))
(check-sat)
;(get-unsat-core)
