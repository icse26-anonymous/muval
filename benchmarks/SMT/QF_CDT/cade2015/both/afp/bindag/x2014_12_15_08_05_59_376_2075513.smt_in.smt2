; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 282
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Ref$ 0)
(declare-sort Ref_set$ 0)
(declare-sort Ref_ref_fun$ 0)
(declare-sort Dag_bool_fun$ 0)
(declare-sort Ref_ref_ref_fun_fun$ 0)
(declare-sort Ref_ref_ref_ref_fun_fun_fun$ 0)
(declare-datatypes () ((Dag$ (tip$) (node$ (select$ Dag$) (selecta$ Ref$) (selectb$ Dag$)))))
(declare-fun l$ () Ref_ref_fun$)
(declare-fun p$ () Ref$)
(declare-fun q$ () Ref$)
(declare-fun r$ () Ref_ref_fun$)
(declare-fun t$ () Dag$)
(declare-fun lt$ () Dag$)
(declare-fun rt$ () Dag$)
(declare-fun dag$ (Ref$ Ref_ref_fun$ Ref_ref_fun$) Dag_bool_fun$)
(declare-fun null$ () Ref$)
(declare-fun member$ (Ref$ Ref_set$) Bool)
(declare-fun set_of$ (Dag$) Ref_set$)
(declare-fun subdag$ (Dag$ Dag$) Bool)
(declare-fun fun_app$ (Dag_bool_fun$ Dag$) Bool)
(declare-fun fun_upd$ (Ref_ref_fun$) Ref_ref_ref_ref_fun_fun_fun$)
(declare-fun fun_app$a (Ref_ref_fun$ Ref$) Ref$)
(declare-fun fun_app$b (Ref_ref_ref_fun_fun$ Ref$) Ref_ref_fun$)
(declare-fun fun_app$c (Ref_ref_ref_ref_fun_fun_fun$ Ref$) Ref_ref_ref_fun_fun$)
(assert (! (not (fun_app$ (dag$ (fun_app$a r$ p$) l$ r$) rt$)) :named a0))
(assert (! (fun_app$ (dag$ q$ l$ r$) (node$ lt$ p$ rt$)) :named a1))
(assert (! (fun_app$ (dag$ (fun_app$a r$ p$) l$ r$) t$) :named a2))
(assert (! (=> (forall ((?v0 Ref$)) (=> (fun_app$ (dag$ ?v0 l$ r$) (node$ lt$ p$ rt$)) false)) false) :named a3))
(assert (! (forall ((?v0 Ref$) (?v1 Ref_ref_fun$) (?v2 Ref_ref_fun$) (?v3 Dag$) (?v4 Dag$)) (=> (and (fun_app$ (dag$ ?v0 ?v1 ?v2) ?v3) (fun_app$ (dag$ ?v0 ?v1 ?v2) ?v4)) (= ?v3 ?v4))) :named a4))
(assert (! (forall ((?v0 Ref$) (?v1 Ref_ref_fun$) (?v2 Ref_ref_fun$) (?v3 Dag$)) (=> (fun_app$ (dag$ ?v0 ?v1 ?v2) ?v3) (exists ((?v4 Dag$)) (and (fun_app$ (dag$ ?v0 ?v1 ?v2) ?v4) (forall ((?v5 Dag$)) (=> (fun_app$ (dag$ ?v0 ?v1 ?v2) ?v5) (= ?v5 ?v4))))))) :named a5))
(assert (! (forall ((?v0 Dag$) (?v1 Dag$)) (=> (= t$ (node$ ?v0 p$ ?v1)) false)) :named a6))
(assert (! (subdag$ t$ (node$ lt$ p$ rt$)) :named a7))
(assert (! (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$) (?v3 Dag$) (?v4 Ref$) (?v5 Dag$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a8))
(assert (! (forall ((?v0 Ref_ref_fun$) (?v1 Ref$) (?v2 Ref_ref_fun$) (?v3 Dag$)) (=> (fun_app$ (dag$ (fun_app$a ?v0 ?v1) ?v0 ?v2) ?v3) (not (member$ ?v1 (set_of$ ?v3))))) :named a9))
(assert (! (forall ((?v0 Ref$) (?v1 Ref_ref_fun$) (?v2 Ref_ref_fun$) (?v3 Dag$)) (=> (not (= ?v0 null$)) (= (fun_app$ (dag$ ?v0 ?v1 ?v2) ?v3) (exists ((?v4 Dag$) (?v5 Dag$)) (and (= ?v3 (node$ ?v4 ?v0 ?v5)) (and (fun_app$ (dag$ (fun_app$a ?v1 ?v0) ?v1 ?v2) ?v4) (fun_app$ (dag$ (fun_app$a ?v2 ?v0) ?v1 ?v2) ?v5))))))) :named a10))
(assert (! (forall ((?v0 Ref$) (?v1 Ref_ref_fun$) (?v2 Ref_ref_fun$) (?v3 Dag$) (?v4 Dag$)) (=> (and (fun_app$ (dag$ ?v0 ?v1 ?v2) ?v3) (subdag$ ?v3 ?v4)) (exists ((?v5 Ref$)) (fun_app$ (dag$ ?v5 ?v1 ?v2) ?v4)))) :named a11))
(assert (! (forall ((?v0 Ref$) (?v1 Ref_ref_fun$) (?v2 Ref_ref_fun$) (?v3 Dag$) (?v4 Ref$) (?v5 Dag$)) (! (= (fun_app$ (dag$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v4) (and (not (= ?v0 null$)) (and (fun_app$ (dag$ (fun_app$a ?v1 ?v0) ?v1 ?v2) ?v3) (fun_app$ (dag$ (fun_app$a ?v2 ?v0) ?v1 ?v2) ?v5))))) :pattern ((fun_app$ (dag$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5))))) :named a12))
(assert (! (forall ((?v0 Ref_ref_fun$) (?v1 Ref_ref_fun$) (?v2 Dag$)) (= (fun_app$ (dag$ null$ ?v0 ?v1) ?v2) (= ?v2 tip$))) :named a13))
(assert (! (forall ((?v0 Ref$) (?v1 Ref_ref_fun$) (?v2 Ref_ref_fun$) (?v3 Dag$)) (=> (fun_app$ (dag$ ?v0 ?v1 ?v2) ?v3) (not (member$ null$ (set_of$ ?v3))))) :named a14))
(assert (! (forall ((?v0 Ref$) (?v1 Ref_ref_fun$) (?v2 Ref_ref_fun$)) (! (= (fun_app$ (dag$ ?v0 ?v1 ?v2) tip$) (= ?v0 null$)) :pattern ((dag$ ?v0 ?v1 ?v2)))) :named a15))
(assert (! (forall ((?v0 Ref$) (?v1 Ref_ref_fun$) (?v2 Ref_ref_fun$) (?v3 Dag$)) (=> (not (= ?v0 null$)) (not (fun_app$ (dag$ ?v0 (fun_app$b (fun_app$c (fun_upd$ ?v1) ?v0) ?v0) ?v2) ?v3)))) :named a16))
(assert (! (forall ((?v0 Ref$) (?v1 Ref_ref_fun$) (?v2 Ref_ref_fun$) (?v3 Dag$)) (=> (not (= ?v0 null$)) (not (fun_app$ (dag$ ?v0 ?v1 (fun_app$b (fun_app$c (fun_upd$ ?v2) ?v0) ?v0)) ?v3)))) :named a17))
(check-sat)
;(get-unsat-core)
