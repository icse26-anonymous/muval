; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 384
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Ref$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-datatypes () ((Dag$ (tip$) (node$ (select$ Dag$) (selecta$ Ref$) (selectb$ Dag$)))))
(declare-fun s$ () Dag$)
(declare-fun t$ () Dag$)
(declare-fun dag$ (Dag$) Bool)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun size$ (Dag$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun subdag$ (Dag$ Dag$) Bool)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$a (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(assert (! (not (fun_app$ (less$ (size$ s$)) (size$ t$))) :named a0))
(assert (! (subdag$ t$ s$) :named a1))
(assert (! (forall ((?v0 Dag$)) (! (= (subdag$ tip$ ?v0) false) :pattern ((subdag$ tip$ ?v0)))) :named a2))
(assert (! (forall ((?v0 Dag$) (?v1 Dag$)) (=> (not (= (size$ ?v0) (size$ ?v1))) (not (= ?v0 ?v1)))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (= ?v0 ?v1)) (or (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ ?v1) ?v0)))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_bool_fun_fun$)) (=> (and (=> (fun_app$ (less$ ?v0) ?v1) (fun_app$ (fun_app$a ?v2 ?v1) ?v0)) (and (=> (= ?v0 ?v1) (fun_app$ (fun_app$a ?v2 ?v1) ?v0)) (=> (fun_app$ (less$ ?v1) ?v0) (fun_app$ (fun_app$a ?v2 ?v1) ?v0)))) (fun_app$ (fun_app$a ?v2 ?v1) ?v0))) :named a5))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (not (fun_app$ ?v0 ?v2)) (exists ((?v3 Nat$)) (and (fun_app$ (less$ ?v3) ?v2) (not (fun_app$ ?v0 ?v3)))))) (fun_app$ ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (forall ((?v3 Nat$)) (=> (fun_app$ (less$ ?v3) ?v2) (fun_app$ ?v0 ?v3))) (fun_app$ ?v0 ?v2))) (fun_app$ ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (not (= ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (not (= ?v1 ?v0)))) :named a9))
(assert (! (forall ((?v0 Nat$)) (=> (fun_app$ (less$ ?v0) ?v0) false)) :named a10))
(assert (! (forall ((?v0 Nat$)) (not (fun_app$ (less$ ?v0) ?v0))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 ?v1)) (and (=> (fun_app$ (less$ ?v0) ?v1) false) (=> (fun_app$ (less$ ?v1) ?v0) false))) false)) :named a12))
(assert (! (= (dag$ tip$) true) :named a13))
(assert (! (= (size$ tip$) zero$) :named a14))
(check-sat)
;(get-unsat-core)
