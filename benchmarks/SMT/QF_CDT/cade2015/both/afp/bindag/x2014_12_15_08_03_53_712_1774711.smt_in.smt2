; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 470
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Ref$ 0)
(declare-datatypes () ((Dag$ (tip$) (node$ (select$ Dag$) (selecta$ Ref$) (selectb$ Dag$)))))
(declare-fun x$ () Dag$)
(declare-fun y$ () Dag$)
(declare-fun subdag$ (Dag$ Dag$) Bool)
(declare-fun less_eq$ (Dag$ Dag$) Bool)
(assert (! (not (= x$ y$)) :named a0))
(assert (! (not (= x$ y$)) :named a1))
(assert (! (less_eq$ x$ y$) :named a2))
(assert (! (less_eq$ y$ x$) :named a3))
(assert (! (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2))) :named a4))
(assert (! (forall ((?v0 Dag$)) (less_eq$ ?v0 ?v0)) :named a5))
(assert (! (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$) (?v3 Dag$) (?v4 Ref$) (?v5 Dag$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a6))
(assert (! (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (subdag$ ?v0 ?v1) (subdag$ ?v1 ?v2)) (subdag$ ?v0 ?v2))) :named a7))
(assert (! (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (subdag$ ?v0 ?v1) (subdag$ ?v1 ?v0)) false)) :named a8))
(assert (! (forall ((?v0 Dag$) (?v1 Dag$)) (=> (subdag$ ?v0 ?v1) (not (= ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$) (?v3 Dag$)) (! (= (subdag$ (node$ ?v0 ?v1 ?v2) ?v3) (or (= ?v3 ?v0) (or (= ?v3 ?v2) (or (subdag$ ?v0 ?v3) (subdag$ ?v2 ?v3))))) :pattern ((subdag$ (node$ ?v0 ?v1 ?v2) ?v3)))) :named a10))
(assert (! (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Ref$) (?v3 Dag$)) (=> (subdag$ ?v0 (node$ ?v1 ?v2 ?v3)) (and (subdag$ ?v0 ?v1) (subdag$ ?v0 ?v3)))) :named a11))
(check-sat)
;(get-unsat-core)
