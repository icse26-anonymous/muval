; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 378
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Ref$ 0)
(declare-sort Ref_set$ 0)
(declare-sort Ref_ref_fun$ 0)
(declare-sort Dag_bool_fun$ 0)
(declare-datatypes () ((Dag$ (tip$) (node$ (select$ Dag$) (selecta$ Ref$) (selectb$ Dag$)))))
(declare-fun l$ () Ref_ref_fun$)
(declare-fun r$ () Ref_ref_fun$)
(declare-fun t$ () Dag$)
(declare-fun bot$ () Ref_set$)
(declare-fun dag$ (Ref$ Ref_ref_fun$ Ref_ref_fun$) Dag_bool_fun$)
(declare-fun new$ (Ref_set$) Ref$)
(declare-fun dag$a (Dag$) Bool)
(declare-fun less$ (Dag$ Dag$) Bool)
(declare-fun null$ () Ref$)
(declare-fun size$ (Dag$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun finite$ (Ref_set$) Bool)
(declare-fun member$ (Ref$ Ref_set$) Bool)
(declare-fun set_of$ (Dag$) Ref_set$)
(declare-fun subdag$ (Dag$ Dag$) Bool)
(declare-fun fun_app$ (Dag_bool_fun$ Dag$) Bool)
(declare-fun fun_app$a (Ref_ref_fun$ Ref$) Ref$)
(declare-fun size_dag$ (Dag$) Nat$)
(assert (! (not (= (fun_app$ (dag$ null$ l$ r$) t$) (= t$ tip$))) :named a0))
(assert (! (forall ((?v0 Ref$) (?v1 Ref_ref_fun$) (?v2 Ref_ref_fun$)) (! (= (fun_app$ (dag$ ?v0 ?v1 ?v2) tip$) (= ?v0 null$)) :pattern ((dag$ ?v0 ?v1 ?v2)))) :named a1))
(assert (! (forall ((?v0 Ref$) (?v1 Ref_ref_fun$) (?v2 Ref_ref_fun$) (?v3 Dag$) (?v4 Ref$) (?v5 Dag$)) (! (= (fun_app$ (dag$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v4) (and (not (= ?v0 null$)) (and (fun_app$ (dag$ (fun_app$a ?v1 ?v0) ?v1 ?v2) ?v3) (fun_app$ (dag$ (fun_app$a ?v2 ?v0) ?v1 ?v2) ?v5))))) :pattern ((fun_app$ (dag$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5))))) :named a2))
(assert (! (= (dag$a tip$) true) :named a3))
(assert (! (forall ((?v0 Dag$)) (! (= (subdag$ tip$ ?v0) false) :pattern ((subdag$ tip$ ?v0)))) :named a4))
(assert (! (forall ((?v0 Dag$)) (=> (and (=> (= ?v0 tip$) false) (forall ((?v1 Dag$) (?v2 Ref$) (?v3 Dag$)) (=> (= ?v0 (node$ ?v1 ?v2 ?v3)) false))) false)) :named a5))
(assert (! (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$)) (not (= tip$ (node$ ?v0 ?v1 ?v2)))) :named a6))
(assert (! (forall ((?v0 Dag$)) (not (less$ ?v0 tip$))) :named a7))
(assert (! (= (size_dag$ tip$) zero$) :named a8))
(assert (! (= (size$ tip$) zero$) :named a9))
(assert (! (forall ((?v0 Ref_set$)) (=> (finite$ ?v0) (not (= (new$ ?v0) null$)))) :named a10))
(assert (! (= (set_of$ tip$) bot$) :named a11))
(assert (! (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$) (?v3 Dag$) (?v4 Ref$) (?v5 Dag$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a12))
(assert (! (forall ((?v0 Ref_set$)) (=> (finite$ ?v0) (not (member$ (new$ ?v0) ?v0)))) :named a13))
(check-sat)
;(get-unsat-core)
