; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 388
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Ref$ 0)
(declare-sort Ref_set$ 0)
(declare-sort Ref_ref_fun$ 0)
(declare-datatypes () ((Dag$ (tip$) (node$ (select$ Dag$) (selecta$ Ref$) (selectb$ Dag$)))))
(declare-fun l$ () Ref_ref_fun$)
(declare-fun p$ () Ref$)
(declare-fun q$ () Ref$)
(declare-fun r$ () Ref_ref_fun$)
(declare-fun t$ () Dag$)
(declare-fun lt$ () Dag$)
(declare-fun rt$ () Dag$)
(declare-fun dag$ (Ref$ Ref_ref_fun$ Ref_ref_fun$ Dag$) Bool)
(declare-fun member$ (Ref$ Ref_set$) Bool)
(declare-fun set_of$ (Dag$) Ref_set$)
(declare-fun subdag$ (Dag$ Dag$) Bool)
(declare-fun fun_app$ (Ref_ref_fun$ Ref$) Ref$)
(assert (! (not (subdag$ (node$ lt$ p$ rt$) rt$)) :named a0))
(assert (! (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$) (?v3 Dag$) (?v4 Ref$) (?v5 Dag$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a1))
(assert (! (subdag$ t$ (node$ lt$ p$ rt$)) :named a2))
(assert (! (= t$ rt$) :named a3))
(assert (! (forall ((?v0 Dag$) (?v1 Dag$)) (=> (= t$ (node$ ?v0 p$ ?v1)) false)) :named a4))
(assert (! (forall ((?v0 Dag$) (?v1 Ref$) (?v2 Dag$) (?v3 Dag$)) (! (= (subdag$ (node$ ?v0 ?v1 ?v2) ?v3) (or (= ?v3 ?v0) (or (= ?v3 ?v2) (or (subdag$ ?v0 ?v3) (subdag$ ?v2 ?v3))))) :pattern ((subdag$ (node$ ?v0 ?v1 ?v2) ?v3)))) :named a5))
(assert (! (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Ref$) (?v3 Dag$)) (=> (subdag$ ?v0 (node$ ?v1 ?v2 ?v3)) (and (subdag$ ?v0 ?v1) (subdag$ ?v0 ?v3)))) :named a6))
(assert (! (forall ((?v0 Dag$) (?v1 Dag$) (?v2 Dag$)) (=> (and (subdag$ ?v0 ?v1) (subdag$ ?v1 ?v2)) (subdag$ ?v0 ?v2))) :named a7))
(assert (! (forall ((?v0 Dag$) (?v1 Dag$)) (=> (and (subdag$ ?v0 ?v1) (subdag$ ?v1 ?v0)) false)) :named a8))
(assert (! (forall ((?v0 Dag$) (?v1 Dag$)) (=> (subdag$ ?v0 ?v1) (not (= ?v0 ?v1)))) :named a9))
(assert (! (dag$ q$ l$ r$ (node$ lt$ p$ rt$)) :named a10))
(assert (! (=> (forall ((?v0 Ref$)) (=> (dag$ ?v0 l$ r$ (node$ lt$ p$ rt$)) false)) false) :named a11))
(assert (! (forall ((?v0 Ref$) (?v1 Dag$)) (= (member$ ?v0 (set_of$ ?v1)) (exists ((?v2 Dag$) (?v3 Dag$)) (or (= ?v1 (node$ ?v2 ?v0 ?v3)) (subdag$ ?v1 (node$ ?v2 ?v0 ?v3)))))) :named a12))
(assert (! (dag$ (fun_app$ r$ p$) l$ r$ rt$) :named a13))
(assert (! (forall ((?v0 Dag$)) (! (= (subdag$ tip$ ?v0) false) :pattern ((subdag$ tip$ ?v0)))) :named a14))
(assert (! (forall ((?v0 Dag$)) (=> (and (=> (= ?v0 tip$) false) (forall ((?v1 Dag$) (?v2 Ref$) (?v3 Dag$)) (=> (= ?v0 (node$ ?v1 ?v2 ?v3)) false))) false)) :named a15))
(check-sat)
;(get-unsat-core)
