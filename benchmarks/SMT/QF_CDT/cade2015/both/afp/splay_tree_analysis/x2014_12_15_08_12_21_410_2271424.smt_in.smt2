; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 448
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_real_fun$ 0)
(declare-datatypes () ((A_op_s_t$ (splay$ (select$ A$)) (insert$ (selecta$ A$)) (delete$ (selectb$ A$)))
  (A_tree$ (leaf$) (node$ (left$ A_tree$) (val$ A$) (right$ A_tree$)))
  (Num$ (one$) (bit0$ (selectc$ Num$)) (bit1$ (selectd$ Num$)))))
(declare-fun f$ () A_op_s_t$)
(declare-fun s$ () A_tree$)
(declare-fun uu$ () A_real_fun$)
(declare-fun bst$ (A_tree$) Bool)
(declare-fun log$ (Real Real) Real)
(declare-fun phi$ (A_tree$) Real)
(declare-fun uua$ () A_real_fun$)
(declare-fun uub$ () A_real_fun$)
(declare-fun plus$ (Num$ Num$) Num$)
(declare-fun real$ (Nat$) Real)
(declare-fun size1$ (A_tree$) Nat$)
(declare-fun t_s_t$ (A_op_s_t$ A_tree$) Real)
(declare-fun times$ (Real Real) Real)
(declare-fun times$a (Num$ Num$) Num$)
(declare-fun fun_app$ (A_real_fun$ A$) Real)
(declare-fun less_eq$ (Num$ Num$) Bool)
(declare-fun numeral$ (Num$) Real)
(declare-fun nxt_s_t$ (A_op_s_t$ A_tree$) A_tree$)
(declare-fun case_op_s_t$ (A_real_fun$ A_real_fun$ A_real_fun$ A_op_s_t$) Real)
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uub$ ?v0) (+ (* 6.0 (log$ 2.0 (real$ (size1$ s$)))) 2.0)) :pattern ((fun_app$ uub$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uua$ ?v0) (+ (* 4.0 (log$ 2.0 (real$ (size1$ s$)))) 2.0)) :pattern ((fun_app$ uua$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uu$ ?v0) (+ (* 3.0 (log$ 2.0 (real$ (size1$ s$)))) 1.0)) :pattern ((fun_app$ uu$ ?v0)))) :named a2))
(assert (! (not (<= (- (+ (t_s_t$ f$ s$) (phi$ (nxt_s_t$ f$ s$))) (phi$ s$)) (case_op_s_t$ uu$ uua$ uub$ f$))) :named a3))
(assert (! (bst$ s$) :named a4))
(assert (! (not (= s$ leaf$)) :named a5))
(assert (! (= (+ 1.0 1.0) 2.0) :named a6))
(assert (! (forall ((?v0 Num$)) (= (+ (numeral$ ?v0) 1.0) (numeral$ (plus$ ?v0 one$)))) :named a7))
(assert (! (forall ((?v0 Num$)) (= (+ 1.0 (numeral$ ?v0)) (numeral$ (plus$ one$ ?v0)))) :named a8))
(assert (! (forall ((?v0 Num$)) (= (<= (numeral$ ?v0) 1.0) (less_eq$ ?v0 one$))) :named a9))
(assert (! (forall ((?v0 Num$)) (= (= (numeral$ ?v0) 1.0) (= ?v0 one$))) :named a10))
(assert (! (forall ((?v0 Num$)) (= (= 1.0 (numeral$ ?v0)) (= one$ ?v0))) :named a11))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Num$)) (= (times$ (- ?v0 ?v1) (numeral$ ?v2)) (- (times$ ?v0 (numeral$ ?v2)) (times$ ?v1 (numeral$ ?v2))))) :named a12))
(assert (! (forall ((?v0 Num$) (?v1 Real) (?v2 Real)) (= (times$ (numeral$ ?v0) (- ?v1 ?v2)) (- (times$ (numeral$ ?v0) ?v1) (times$ (numeral$ ?v0) ?v2)))) :named a13))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Num$)) (= (times$ (+ ?v0 ?v1) (numeral$ ?v2)) (+ (times$ ?v0 (numeral$ ?v2)) (times$ ?v1 (numeral$ ?v2))))) :named a14))
(assert (! (forall ((?v0 Num$) (?v1 Real) (?v2 Real)) (= (times$ (numeral$ ?v0) (+ ?v1 ?v2)) (+ (times$ (numeral$ ?v0) ?v1) (times$ (numeral$ ?v0) ?v2)))) :named a15))
(assert (! (forall ((?v0 Num$)) (= (= (bit1$ ?v0) one$) false)) :named a16))
(assert (! (forall ((?v0 Num$)) (= (= one$ (bit1$ ?v0)) false)) :named a17))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (numeral$ ?v0) (numeral$ ?v1)) (= ?v0 ?v1))) :named a18))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (! (= (times$a (bit0$ ?v0) (bit0$ ?v1)) (bit0$ (bit0$ (times$a ?v0 ?v1)))) :pattern ((times$a (bit0$ ?v0) (bit0$ ?v1))))) :named a19))
(check-sat)
;(get-unsat-core)
