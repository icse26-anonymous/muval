; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 271
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_tree_set$ 0)
(declare-datatypes () ((A_tree$ (leaf$) (node$ (left$ A_tree$) (val$ A$) (right$ A_tree$)))
  (A_tree_tree$ (leaf$a) (node$a (left$a A_tree_tree$) (val$a A_tree$) (right$a A_tree_tree$)))))
(declare-fun b$ () A$)
(declare-fun c$ () A$)
(declare-fun l$ () A_tree$)
(declare-fun r$ () A_tree$)
(declare-fun aa$ () A$)
(declare-fun la$ () A_tree$)
(declare-fun ll$ () A_tree$)
(declare-fun lr$ () A_tree$)
(declare-fun ra$ () A_tree$)
(declare-fun bst$ (A_tree$) Bool)
(declare-fun sup$ (A_set$ A_set$) A_set$)
(declare-fun less$ (A$ A$) Bool)
(declare-fun insert$ (A$ A_set$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun member$a (A_tree$ A_tree_set$) Bool)
(declare-fun set_tree$ (A_tree$) A_set$)
(declare-fun subtrees$ (A_tree$) A_tree_set$)
(declare-fun set_tree$a (A_tree_tree$) A_tree_set$)
(assert (! (not (and (not (member$ aa$ (set_tree$ ll$))) (not (member$ aa$ (set_tree$ r$))))) :named a0))
(assert (! (less$ b$ aa$) :named a1))
(assert (! (less$ aa$ c$) :named a2))
(assert (! (not (= aa$ b$)) :named a3))
(assert (! (=> (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$)) (=> (= l$ (node$ ?v0 ?v1 ?v2)) false)) false) :named a4))
(assert (! (not (= aa$ c$)) :named a5))
(assert (! (bst$ (node$ l$ c$ r$)) :named a6))
(assert (! (not (member$ b$ (set_tree$ r$))) :named a7))
(assert (! (or (less$ aa$ b$) (less$ b$ aa$)) :named a8))
(assert (! (or (less$ aa$ c$) (less$ c$ aa$)) :named a9))
(assert (! (= l$ (node$ ll$ b$ lr$)) :named a10))
(assert (! (less$ b$ c$) :named a11))
(assert (! (member$ aa$ (insert$ c$ (sup$ (set_tree$ l$) (set_tree$ r$)))) :named a12))
(assert (! (member$a (node$ la$ aa$ ra$) (subtrees$ (node$ l$ c$ r$))) :named a13))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_tree$)) (=> (and (member$a ?v0 (set_tree$a ?v1)) (and (forall ((?v2 A_tree_tree$) (?v3 A_tree$) (?v4 A_tree_tree$)) (=> (and (= ?v1 (node$a ?v2 ?v3 ?v4)) (member$a ?v0 (set_tree$a ?v2))) false)) (and (forall ((?v2 A_tree_tree$) (?v3 A_tree_tree$)) (=> (= ?v1 (node$a ?v2 ?v0 ?v3)) false)) (forall ((?v2 A_tree_tree$) (?v3 A_tree$) (?v4 A_tree_tree$)) (=> (and (= ?v1 (node$a ?v2 ?v3 ?v4)) (member$a ?v0 (set_tree$a ?v4))) false))))) false)) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (=> (and (member$ ?v0 (set_tree$ ?v1)) (and (forall ((?v2 A_tree$) (?v3 A$) (?v4 A_tree$)) (=> (and (= ?v1 (node$ ?v2 ?v3 ?v4)) (member$ ?v0 (set_tree$ ?v2))) false)) (and (forall ((?v2 A_tree$) (?v3 A_tree$)) (=> (= ?v1 (node$ ?v2 ?v0 ?v3)) false)) (forall ((?v2 A_tree$) (?v3 A$) (?v4 A_tree$)) (=> (and (= ?v1 (node$ ?v2 ?v3 ?v4)) (member$ ?v0 (set_tree$ ?v4))) false))))) false)) :named a15))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_tree$) (?v2 A_tree$) (?v3 A_tree_tree$)) (=> (member$a ?v0 (set_tree$a ?v1)) (member$a ?v0 (set_tree$a (node$a ?v1 ?v2 ?v3))))) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A$) (?v3 A_tree$)) (=> (member$ ?v0 (set_tree$ ?v1)) (member$ ?v0 (set_tree$ (node$ ?v1 ?v2 ?v3))))) :named a17))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_tree$) (?v2 A_tree_tree$) (?v3 A_tree$)) (=> (member$a ?v0 (set_tree$a ?v1)) (member$a ?v0 (set_tree$a (node$a ?v2 ?v3 ?v1))))) :named a18))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$) (?v3 A$)) (=> (member$ ?v0 (set_tree$ ?v1)) (member$ ?v0 (set_tree$ (node$ ?v2 ?v3 ?v1))))) :named a19))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_tree$) (?v2 A_tree_tree$)) (member$a ?v0 (set_tree$a (node$a ?v1 ?v0 ?v2)))) :named a20))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (member$ ?v0 (set_tree$ (node$ ?v1 ?v0 ?v2)))) :named a21))
(check-sat)
;(get-unsat-core)
