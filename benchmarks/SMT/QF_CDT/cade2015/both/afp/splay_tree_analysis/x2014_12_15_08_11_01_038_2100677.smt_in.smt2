; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 459
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-datatypes () ((A_tree$ (leaf$) (node$ (left$ A_tree$) (val$ A$) (right$ A_tree$)))
  (Num$ (one$) (bit0$ (select$ Num$)) (bit1$ (selecta$ Num$)))))
(declare-fun a$ (A$ A_tree$) Real)
(declare-fun t$ () A_tree$)
(declare-fun a$a () A$)
(declare-fun bst$ (A_tree$) Bool)
(declare-fun log$ (Real Real) Real)
(declare-fun plus$ (Num$ Num$) Num$)
(declare-fun real$ (Nat$) Real)
(declare-fun size1$ (A_tree$) Nat$)
(declare-fun times$ (Real Real) Real)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun times$a (Num$ Num$) Num$)
(declare-fun less_eq$ (Num$ Num$) Bool)
(declare-fun numeral$ (Num$) Real)
(declare-fun set_tree$ (A_tree$) A_set$)
(assert (! (not (<= (a$ a$a t$) (+ (* 3.0 (- (log$ 2.0 (real$ (size1$ t$))) 1.0)) 1.0))) :named a0))
(assert (! (bst$ t$) :named a1))
(assert (! (member$ a$a (set_tree$ t$)) :named a2))
(assert (! (= (+ 1.0 1.0) 2.0) :named a3))
(assert (! (forall ((?v0 Num$)) (= (+ (numeral$ ?v0) 1.0) (numeral$ (plus$ ?v0 one$)))) :named a4))
(assert (! (forall ((?v0 Num$)) (= (+ 1.0 (numeral$ ?v0)) (numeral$ (plus$ one$ ?v0)))) :named a5))
(assert (! (forall ((?v0 Num$)) (= (<= (numeral$ ?v0) 1.0) (less_eq$ ?v0 one$))) :named a6))
(assert (! (forall ((?v0 Num$)) (= (= (numeral$ ?v0) 1.0) (= ?v0 one$))) :named a7))
(assert (! (forall ((?v0 Num$)) (= (= 1.0 (numeral$ ?v0)) (= one$ ?v0))) :named a8))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Num$)) (= (times$ (- ?v0 ?v1) (numeral$ ?v2)) (- (times$ ?v0 (numeral$ ?v2)) (times$ ?v1 (numeral$ ?v2))))) :named a9))
(assert (! (forall ((?v0 Num$) (?v1 Real) (?v2 Real)) (= (times$ (numeral$ ?v0) (- ?v1 ?v2)) (- (times$ (numeral$ ?v0) ?v1) (times$ (numeral$ ?v0) ?v2)))) :named a10))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Num$)) (= (times$ (+ ?v0 ?v1) (numeral$ ?v2)) (+ (times$ ?v0 (numeral$ ?v2)) (times$ ?v1 (numeral$ ?v2))))) :named a11))
(assert (! (forall ((?v0 Num$) (?v1 Real) (?v2 Real)) (= (times$ (numeral$ ?v0) (+ ?v1 ?v2)) (+ (times$ (numeral$ ?v0) ?v1) (times$ (numeral$ ?v0) ?v2)))) :named a12))
(assert (! (forall ((?v0 Num$)) (= (= (bit1$ ?v0) one$) false)) :named a13))
(assert (! (forall ((?v0 Num$)) (= (= one$ (bit1$ ?v0)) false)) :named a14))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (numeral$ ?v0) (numeral$ ?v1)) (= ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (! (= (times$a (bit0$ ?v0) (bit0$ ?v1)) (bit0$ (bit0$ (times$a ?v0 ?v1)))) :pattern ((times$a (bit0$ ?v0) (bit0$ ?v1))))) :named a16))
(check-sat)
;(get-unsat-core)
