; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 166
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_tree_set$ 0)
(declare-sort A_tree_bool_fun$ 0)
(declare-sort A_tree_tree_set$ 0)
(declare-sort A_tree_tree_bool_fun$ 0)
(declare-sort A_tree_tree_tree_set$ 0)
(declare-sort A_tree_tree_tree_tree_set$ 0)
(declare-datatypes () ((A_tree$ (leaf$) (node$ (left$ A_tree$) (val$ A$) (right$ A_tree$)))
  (A_tree_tree$ (leaf$a) (node$a (left$a A_tree_tree$) (val$a A_tree$) (right$a A_tree_tree$)))
  (A_tree_tree_tree$ (leaf$b) (node$b (left$b A_tree_tree_tree$) (val$b A_tree_tree$) (right$b A_tree_tree_tree$)))
  (A_tree_tree_tree_tree$ (leaf$c) (node$c (left$c A_tree_tree_tree_tree$) (val$c A_tree_tree_tree$) (right$c A_tree_tree_tree_tree$)))))
(declare-fun a$ () A$)
(declare-fun t$ () A_tree$)
(declare-fun a$a (A$ A_tree$) Real)
(declare-fun bst$ (A_tree$) Bool)
(declare-fun splay$ (A$ A_tree$) A_tree$)
(declare-fun member$ (A_tree$ A_tree_set$) Bool)
(declare-fun thesis$ () Bool)
(declare-fun fun_app$ (A_tree_tree_bool_fun$ A_tree_tree$) Bool)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (A_tree_tree_tree_tree$ A_tree_tree_tree_tree_set$) Bool)
(declare-fun member$c (A_tree_tree_tree$ A_tree_tree_tree_set$) Bool)
(declare-fun member$d (A_tree_tree$ A_tree_tree_set$) Bool)
(declare-fun fun_app$a (A_tree_bool_fun$ A_tree$) Bool)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun set_tree$ (A_tree$) A_set$)
(declare-fun subtrees$ (A_tree$) A_tree_set$)
(declare-fun pred_tree$ (A_tree_tree_bool_fun$ A_tree_tree_tree$) Bool)
(declare-fun set_tree$a (A_tree_tree_tree_tree$) A_tree_tree_tree_set$)
(declare-fun set_tree$b (A_tree_tree_tree$) A_tree_tree_set$)
(declare-fun set_tree$c (A_tree_tree$) A_tree_set$)
(declare-fun subtrees$a (A_tree_tree_tree_tree$) A_tree_tree_tree_tree_set$)
(declare-fun subtrees$b (A_tree_tree_tree$) A_tree_tree_tree_set$)
(declare-fun subtrees$c (A_tree_tree$) A_tree_tree_set$)
(declare-fun pred_tree$a (A_tree_bool_fun$) A_tree_tree_bool_fun$)
(declare-fun pred_tree$b (A_bool_fun$) A_tree_bool_fun$)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (=> (member$ (node$ ?v0 a$ ?v1) (subtrees$ t$)) thesis$)) :named a1))
(assert (! (member$a a$ (set_tree$ t$)) :named a2))
(assert (! (bst$ t$) :named a3))
(assert (! (forall ((?v0 A_tree_tree_tree$) (?v1 A_tree_tree$) (?v2 A_tree_tree_tree$) (?v3 A_tree_tree_tree$) (?v4 A_tree_tree$) (?v5 A_tree_tree_tree$)) (= (= (node$b ?v0 ?v1 ?v2) (node$b ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a4))
(assert (! (forall ((?v0 A_tree_tree$) (?v1 A_tree$) (?v2 A_tree_tree$) (?v3 A_tree_tree$) (?v4 A_tree$) (?v5 A_tree_tree$)) (= (= (node$a ?v0 ?v1 ?v2) (node$a ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a5))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$) (?v4 A$) (?v5 A_tree$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a6))
(assert (! (forall ((?v0 A_tree_tree_tree_tree$) (?v1 A_tree_tree_tree$) (?v2 A_tree_tree_tree_tree$) (?v3 A_tree_tree_tree_tree$)) (=> (member$b (node$c ?v0 ?v1 ?v2) (subtrees$a ?v3)) (member$c ?v1 (set_tree$a ?v3)))) :named a7))
(assert (! (forall ((?v0 A_tree_tree_tree$) (?v1 A_tree_tree$) (?v2 A_tree_tree_tree$) (?v3 A_tree_tree_tree$)) (=> (member$c (node$b ?v0 ?v1 ?v2) (subtrees$b ?v3)) (member$d ?v1 (set_tree$b ?v3)))) :named a8))
(assert (! (forall ((?v0 A_tree_tree$) (?v1 A_tree$) (?v2 A_tree_tree$) (?v3 A_tree_tree$)) (=> (member$d (node$a ?v0 ?v1 ?v2) (subtrees$c ?v3)) (member$ ?v1 (set_tree$c ?v3)))) :named a9))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$)) (=> (member$ (node$ ?v0 ?v1 ?v2) (subtrees$ ?v3)) (member$a ?v1 (set_tree$ ?v3)))) :named a10))
(assert (! (forall ((?v0 A_tree_tree_tree$) (?v1 A_tree_tree_tree_tree$)) (=> (member$c ?v0 (set_tree$a ?v1)) (exists ((?v2 A_tree_tree_tree_tree$) (?v3 A_tree_tree_tree_tree$)) (member$b (node$c ?v2 ?v0 ?v3) (subtrees$a ?v1))))) :named a11))
(assert (! (forall ((?v0 A_tree_tree$) (?v1 A_tree_tree_tree$)) (=> (member$d ?v0 (set_tree$b ?v1)) (exists ((?v2 A_tree_tree_tree$) (?v3 A_tree_tree_tree$)) (member$c (node$b ?v2 ?v0 ?v3) (subtrees$b ?v1))))) :named a12))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_tree$)) (=> (member$ ?v0 (set_tree$c ?v1)) (exists ((?v2 A_tree_tree$) (?v3 A_tree_tree$)) (member$d (node$a ?v2 ?v0 ?v3) (subtrees$c ?v1))))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (=> (member$a ?v0 (set_tree$ ?v1)) (exists ((?v2 A_tree$) (?v3 A_tree$)) (member$ (node$ ?v2 ?v0 ?v3) (subtrees$ ?v1))))) :named a14))
(assert (! (forall ((?v0 A_tree_tree_tree$) (?v1 A_tree_tree_tree_tree$) (?v2 A_tree_tree_tree_tree$) (?v3 A_tree_tree_tree_tree$)) (=> (not (member$c ?v0 (set_tree$a ?v1))) (not (member$b (node$c ?v2 ?v0 ?v3) (subtrees$a ?v1))))) :named a15))
(assert (! (forall ((?v0 A_tree_tree$) (?v1 A_tree_tree_tree$) (?v2 A_tree_tree_tree$) (?v3 A_tree_tree_tree$)) (=> (not (member$d ?v0 (set_tree$b ?v1))) (not (member$c (node$b ?v2 ?v0 ?v3) (subtrees$b ?v1))))) :named a16))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_tree$) (?v2 A_tree_tree$) (?v3 A_tree_tree$)) (=> (not (member$ ?v0 (set_tree$c ?v1))) (not (member$d (node$a ?v2 ?v0 ?v3) (subtrees$c ?v1))))) :named a17))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$) (?v3 A_tree$)) (=> (not (member$a ?v0 (set_tree$ ?v1))) (not (member$ (node$ ?v2 ?v0 ?v3) (subtrees$ ?v1))))) :named a18))
(assert (! (forall ((?v0 A_tree_tree_tree$) (?v1 A_tree_tree_tree_tree$)) (=> (and (member$c ?v0 (set_tree$a ?v1)) (and (forall ((?v2 A_tree_tree_tree_tree$) (?v3 A_tree_tree_tree$) (?v4 A_tree_tree_tree_tree$)) (=> (and (= ?v1 (node$c ?v2 ?v3 ?v4)) (member$c ?v0 (set_tree$a ?v2))) false)) (and (forall ((?v2 A_tree_tree_tree_tree$) (?v3 A_tree_tree_tree_tree$)) (=> (= ?v1 (node$c ?v2 ?v0 ?v3)) false)) (forall ((?v2 A_tree_tree_tree_tree$) (?v3 A_tree_tree_tree$) (?v4 A_tree_tree_tree_tree$)) (=> (and (= ?v1 (node$c ?v2 ?v3 ?v4)) (member$c ?v0 (set_tree$a ?v4))) false))))) false)) :named a19))
(assert (! (forall ((?v0 A_tree_tree$) (?v1 A_tree_tree_tree$)) (=> (and (member$d ?v0 (set_tree$b ?v1)) (and (forall ((?v2 A_tree_tree_tree$) (?v3 A_tree_tree$) (?v4 A_tree_tree_tree$)) (=> (and (= ?v1 (node$b ?v2 ?v3 ?v4)) (member$d ?v0 (set_tree$b ?v2))) false)) (and (forall ((?v2 A_tree_tree_tree$) (?v3 A_tree_tree_tree$)) (=> (= ?v1 (node$b ?v2 ?v0 ?v3)) false)) (forall ((?v2 A_tree_tree_tree$) (?v3 A_tree_tree$) (?v4 A_tree_tree_tree$)) (=> (and (= ?v1 (node$b ?v2 ?v3 ?v4)) (member$d ?v0 (set_tree$b ?v4))) false))))) false)) :named a20))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_tree$)) (=> (and (member$ ?v0 (set_tree$c ?v1)) (and (forall ((?v2 A_tree_tree$) (?v3 A_tree$) (?v4 A_tree_tree$)) (=> (and (= ?v1 (node$a ?v2 ?v3 ?v4)) (member$ ?v0 (set_tree$c ?v2))) false)) (and (forall ((?v2 A_tree_tree$) (?v3 A_tree_tree$)) (=> (= ?v1 (node$a ?v2 ?v0 ?v3)) false)) (forall ((?v2 A_tree_tree$) (?v3 A_tree$) (?v4 A_tree_tree$)) (=> (and (= ?v1 (node$a ?v2 ?v3 ?v4)) (member$ ?v0 (set_tree$c ?v4))) false))))) false)) :named a21))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (=> (and (member$a ?v0 (set_tree$ ?v1)) (and (forall ((?v2 A_tree$) (?v3 A$) (?v4 A_tree$)) (=> (and (= ?v1 (node$ ?v2 ?v3 ?v4)) (member$a ?v0 (set_tree$ ?v2))) false)) (and (forall ((?v2 A_tree$) (?v3 A_tree$)) (=> (= ?v1 (node$ ?v2 ?v0 ?v3)) false)) (forall ((?v2 A_tree$) (?v3 A$) (?v4 A_tree$)) (=> (and (= ?v1 (node$ ?v2 ?v3 ?v4)) (member$a ?v0 (set_tree$ ?v4))) false))))) false)) :named a22))
(assert (! (forall ((?v0 A_tree_tree_tree$) (?v1 A_tree_tree_tree_tree$) (?v2 A_tree_tree_tree$) (?v3 A_tree_tree_tree_tree$)) (=> (member$c ?v0 (set_tree$a ?v1)) (member$c ?v0 (set_tree$a (node$c ?v1 ?v2 ?v3))))) :named a23))
(assert (! (forall ((?v0 A_tree_tree$) (?v1 A_tree_tree_tree$) (?v2 A_tree_tree$) (?v3 A_tree_tree_tree$)) (=> (member$d ?v0 (set_tree$b ?v1)) (member$d ?v0 (set_tree$b (node$b ?v1 ?v2 ?v3))))) :named a24))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_tree$) (?v2 A_tree$) (?v3 A_tree_tree$)) (=> (member$ ?v0 (set_tree$c ?v1)) (member$ ?v0 (set_tree$c (node$a ?v1 ?v2 ?v3))))) :named a25))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A$) (?v3 A_tree$)) (=> (member$a ?v0 (set_tree$ ?v1)) (member$a ?v0 (set_tree$ (node$ ?v1 ?v2 ?v3))))) :named a26))
(assert (! (forall ((?v0 A_tree_tree_tree$) (?v1 A_tree_tree_tree_tree$) (?v2 A_tree_tree_tree_tree$) (?v3 A_tree_tree_tree$)) (=> (member$c ?v0 (set_tree$a ?v1)) (member$c ?v0 (set_tree$a (node$c ?v2 ?v3 ?v1))))) :named a27))
(assert (! (forall ((?v0 A_tree_tree$) (?v1 A_tree_tree_tree$) (?v2 A_tree_tree_tree$) (?v3 A_tree_tree$)) (=> (member$d ?v0 (set_tree$b ?v1)) (member$d ?v0 (set_tree$b (node$b ?v2 ?v3 ?v1))))) :named a28))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_tree$) (?v2 A_tree_tree$) (?v3 A_tree$)) (=> (member$ ?v0 (set_tree$c ?v1)) (member$ ?v0 (set_tree$c (node$a ?v2 ?v3 ?v1))))) :named a29))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$) (?v3 A$)) (=> (member$a ?v0 (set_tree$ ?v1)) (member$a ?v0 (set_tree$ (node$ ?v2 ?v3 ?v1))))) :named a30))
(assert (! (forall ((?v0 A_tree_tree_tree$) (?v1 A_tree_tree_tree_tree$) (?v2 A_tree_tree_tree_tree$)) (member$c ?v0 (set_tree$a (node$c ?v1 ?v0 ?v2)))) :named a31))
(assert (! (forall ((?v0 A_tree_tree$) (?v1 A_tree_tree_tree$) (?v2 A_tree_tree_tree$)) (member$d ?v0 (set_tree$b (node$b ?v1 ?v0 ?v2)))) :named a32))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_tree$) (?v2 A_tree_tree$)) (member$ ?v0 (set_tree$c (node$a ?v1 ?v0 ?v2)))) :named a33))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (member$a ?v0 (set_tree$ (node$ ?v1 ?v0 ?v2)))) :named a34))
(assert (! (forall ((?v0 A_tree_tree_bool_fun$) (?v1 A_tree_tree_tree$) (?v2 A_tree_tree$) (?v3 A_tree_tree_tree$)) (! (= (pred_tree$ ?v0 (node$b ?v1 ?v2 ?v3)) (and (pred_tree$ ?v0 ?v1) (and (fun_app$ ?v0 ?v2) (pred_tree$ ?v0 ?v3)))) :pattern ((pred_tree$ ?v0 (node$b ?v1 ?v2 ?v3))))) :named a35))
(assert (! (forall ((?v0 A_tree_bool_fun$) (?v1 A_tree_tree$) (?v2 A_tree$) (?v3 A_tree_tree$)) (! (= (fun_app$ (pred_tree$a ?v0) (node$a ?v1 ?v2 ?v3)) (and (fun_app$ (pred_tree$a ?v0) ?v1) (and (fun_app$a ?v0 ?v2) (fun_app$ (pred_tree$a ?v0) ?v3)))) :pattern ((fun_app$ (pred_tree$a ?v0) (node$a ?v1 ?v2 ?v3))))) :named a36))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_tree$) (?v2 A$) (?v3 A_tree$)) (! (= (fun_app$a (pred_tree$b ?v0) (node$ ?v1 ?v2 ?v3)) (and (fun_app$a (pred_tree$b ?v0) ?v1) (and (fun_app$b ?v0 ?v2) (fun_app$a (pred_tree$b ?v0) ?v3)))) :pattern ((fun_app$a (pred_tree$b ?v0) (node$ ?v1 ?v2 ?v3))))) :named a37))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (a$a ?v0 (node$ ?v1 ?v0 ?v2)) 1.0) :pattern ((node$ ?v1 ?v0 ?v2)))) :named a38))
(assert (! (forall ((?v0 Real)) (= (= 1.0 ?v0) (= ?v0 1.0))) :named a39))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$)) (=> (and (bst$ ?v0) (= (splay$ ?v1 ?v0) ?v2)) (= (member$a ?v1 (set_tree$ ?v0)) (exists ((?v3 A_tree$) (?v4 A_tree$)) (= ?v2 (node$ ?v3 ?v1 ?v4)))))) :named a40))
(check-sat)
;(get-unsat-core)
