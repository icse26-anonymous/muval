; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 421
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-datatypes () ((A_tree$ (leaf$) (node$ (left$ A_tree$) (val$ A$) (right$ A_tree$)))
  (A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun a$ () A$)
(declare-fun e$ () A$)
(declare-fun l$ () A_tree$)
(declare-fun r$ () A_tree$)
(declare-fun s$ () A_tree$)
(declare-fun x$ () A$)
(declare-fun y$ () A$)
(declare-fun ll$ () A_tree$)
(declare-fun lr$ () A_tree$)
(declare-fun ls$ () A_tree$)
(declare-fun rs$ () A_tree$)
(declare-fun bst$ (A_tree$) Bool)
(declare-fun splay$ (A$ A_tree$) A_tree$)
(declare-fun delete$ (A$ A_tree$) A_tree$)
(declare-fun insert$ (A$ A_tree$) A_tree$)
(declare-fun sorted$ (A_list$) Bool)
(declare-fun inorder$ (A_tree$) A_list$)
(declare-fun splay_max$ (A_tree$) A_tree$)
(assert (! (not (bst$ l$)) :named a0))
(assert (! (bst$ s$) :named a1))
(assert (! (= l$ (node$ ll$ y$ lr$)) :named a2))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (bst$ ?v0) (bst$ (delete$ ?v1 ?v0)))) :named a3))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (bst$ ?v0) (bst$ (insert$ ?v1 ?v0)))) :named a4))
(assert (! (forall ((?v0 A_tree$)) (=> (bst$ ?v0) (bst$ (splay_max$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (bst$ ?v0) (bst$ (splay$ ?v1 ?v0)))) :named a6))
(assert (! (= (bst$ leaf$) true) :named a7))
(assert (! (= (splay$ a$ (node$ ls$ x$ rs$)) (node$ l$ e$ r$)) :named a8))
(assert (! (forall ((?v0 A_tree$)) (=> (bst$ ?v0) (exists ((?v1 A$)) (= (splay_max$ ?v0) (splay$ ?v1 ?v0))))) :named a9))
(assert (! (forall ((?v0 A_tree$)) (=> (bst$ ?v0) (sorted$ (inorder$ ?v0)))) :named a10))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$) (?v3 A_tree$) (?v4 A$) (?v5 A_tree$)) (= (= (node$ ?v0 ?v1 ?v2) (node$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (splay$ ?v0 (node$ ?v1 ?v0 ?v2)) (node$ ?v1 ?v0 ?v2)) :pattern ((node$ ?v1 ?v0 ?v2)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (= (= (splay$ ?v0 ?v1) leaf$) (= ?v1 leaf$))) :named a13))
(assert (! (forall ((?v0 A_tree$)) (= (= (splay_max$ ?v0) leaf$) (= ?v0 leaf$))) :named a14))
(assert (! (=> (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$)) (=> (= (splay_max$ (node$ ll$ y$ lr$)) (node$ ?v0 ?v1 ?v2)) false)) false) :named a15))
(assert (! (=> (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$)) (=> (= (splay$ a$ (node$ ls$ x$ rs$)) (node$ ?v0 ?v1 ?v2)) false)) false) :named a16))
(assert (! (= e$ a$) :named a17))
(check-sat)
;(get-unsat-core)
