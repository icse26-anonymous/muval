; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 528
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-datatypes () ((A_tree$ (leaf$) (node$ (left$ A_tree$) (val$ A$) (right$ A_tree$)))
  (Num$ (one$) (bit0$ (select$ Num$)) (bit1$ (selecta$ Num$)))))
(declare-fun a$ () A$)
(declare-fun l$ () A_tree$)
(declare-fun r$ () A_tree$)
(declare-fun x$ () A$)
(declare-fun y$ () A$)
(declare-fun l$a () A_tree$)
(declare-fun ll$ () A_tree$)
(declare-fun lr$ () A_tree$)
(declare-fun ls$ () A_tree$)
(declare-fun r$a () A_tree$)
(declare-fun rs$ () A_tree$)
(declare-fun y$a () A$)
(declare-fun log$ (Real Real) Real)
(declare-fun phi$ (A_tree$) Real)
(declare-fun real$ (Nat$) Real)
(declare-fun size$ (A_tree$) Nat$)
(declare-fun splay$ (A$ A_tree$) A_tree$)
(declare-fun times$ (Real Real) Real)
(declare-fun numeral$ (Num$) Real)
(declare-fun t_splay$ (A$ A_tree$) Nat$)
(declare-fun splay_max$ (A_tree$) A_tree$)
(declare-fun t_splay_max$ (A_tree$) Nat$)
(assert (! (not (<= (+ (phi$ l$) (+ (phi$ r$) (+ (real$ (t_splay_max$ (node$ ll$ y$ lr$))) (+ (real$ (t_splay$ a$ (node$ ls$ x$ rs$))) (log$ 2.0 (+ 2.0 (+ (real$ (size$ l$)) (real$ (size$ r$))))))))) (+ (phi$ ls$) (+ (phi$ rs$) (+ 2.0 (* 7.0 (log$ 2.0 (+ 2.0 (+ (real$ (size$ ls$)) (real$ (size$ rs$))))))))))) :named a0))
(assert (! (<= (+ (phi$ l$) (+ (phi$ r$a) (+ (phi$ r$) (+ (real$ (t_splay_max$ (node$ ll$ y$ lr$))) (+ (real$ (t_splay$ a$ (node$ ls$ x$ rs$))) (+ (log$ 2.0 (+ 2.0 (+ (real$ (size$ l$)) (real$ (size$ r$a))))) (log$ 2.0 (+ 3.0 (+ (real$ (size$ ll$)) (+ (real$ (size$ lr$)) (real$ (size$ r$)))))))))))) (+ (phi$ ls$) (+ (phi$ rs$) (+ 2.0 (+ (* 3.0 (log$ 2.0 (+ 2.0 (+ (real$ (size$ ll$)) (real$ (size$ lr$)))))) (* 4.0 (log$ 2.0 (+ 2.0 (+ (real$ (size$ ls$)) (real$ (size$ rs$))))))))))) :named a1))
(assert (! (= l$a (node$ ll$ y$ lr$)) :named a2))
(assert (! (<= (log$ 2.0 (+ 2.0 (+ (real$ (size$ l$)) (real$ (size$ r$))))) (+ (log$ 2.0 (+ 2.0 (+ (real$ (size$ l$)) (real$ (size$ r$a))))) (log$ 2.0 (+ 3.0 (+ (real$ (size$ ll$)) (+ (real$ (size$ lr$)) (real$ (size$ r$)))))))) :named a3))
(assert (! (<= 0.0 (phi$ r$a)) :named a4))
(assert (! (= l$a (node$ ll$ y$ lr$)) :named a5))
(assert (! (<= (log$ 2.0 (+ 2.0 (+ (real$ (size$ ll$)) (real$ (size$ lr$))))) (log$ 2.0 (+ 2.0 (+ (real$ (size$ ls$)) (real$ (size$ rs$)))))) :named a6))
(assert (! (<= (log$ 2.0 (+ 2.0 (+ (real$ (size$ l$)) (real$ (size$ r$))))) (log$ 2.0 (+ 2.0 (+ (real$ (size$ l$a)) (real$ (size$ r$)))))) :named a7))
(assert (! (<= 0.0 (log$ 2.0 (+ 2.0 (+ (real$ (size$ l$)) (real$ (size$ r$a)))))) :named a8))
(assert (! (<= 0.0 (log$ 2.0 (+ 2.0 (+ (real$ (size$ ls$)) (real$ (size$ rs$)))))) :named a9))
(assert (! (=> (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$)) (=> (= (splay_max$ (node$ ll$ y$ lr$)) (node$ ?v0 ?v1 ?v2)) false)) false) :named a10))
(assert (! (=> (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$)) (=> (= (splay$ a$ (node$ ls$ x$ rs$)) (node$ ?v0 ?v1 ?v2)) false)) false) :named a11))
(assert (! (forall ((?v0 Real) (?v1 Real) (?v2 Num$)) (= (times$ (+ ?v0 ?v1) (numeral$ ?v2)) (+ (times$ ?v0 (numeral$ ?v2)) (times$ ?v1 (numeral$ ?v2))))) :named a12))
(assert (! (forall ((?v0 Num$) (?v1 Real) (?v2 Real)) (= (times$ (numeral$ ?v0) (+ ?v1 ?v2)) (+ (times$ (numeral$ ?v0) ?v1) (times$ (numeral$ ?v0) ?v2)))) :named a13))
(assert (! (forall ((?v0 Num$)) (= (= (bit1$ ?v0) one$) false)) :named a14))
(assert (! (forall ((?v0 Num$)) (= (= one$ (bit1$ ?v0)) false)) :named a15))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (bit0$ ?v0) (bit1$ ?v1)) false)) :named a16))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (bit1$ ?v0) (bit0$ ?v1)) false)) :named a17))
(assert (! (= (splay_max$ (node$ ll$ y$ lr$)) (node$ l$ y$a r$a)) :named a18))
(assert (! (forall ((?v0 Num$)) (= (= (bit0$ ?v0) one$) false)) :named a19))
(assert (! (forall ((?v0 Num$)) (= (= one$ (bit0$ ?v0)) false)) :named a20))
(check-sat)
;(get-unsat-core)
