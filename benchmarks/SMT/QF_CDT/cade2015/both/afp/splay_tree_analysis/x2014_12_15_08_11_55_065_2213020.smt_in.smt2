; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 277
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$) (node$ (left$ A_tree$) (val$ A$) (right$ A_tree$)))
  (A_tree_a_prod$ (pair$ (fst$ A_tree$) (snd$ A$)))))
(declare-fun bst$ (A_tree$) Bool)
(declare-fun delete$ (A$ A_tree$) A_tree$)
(declare-fun insert$ (A$ A_tree$) A_tree$)
(declare-fun pred_tree$ (A_bool_fun$ A_tree$) Bool)
(declare-fun splay_max$ (A_tree$) A_tree$)
(declare-fun del_rightmost$ (A_tree$) A_tree_a_prod$)
(assert (! (not (bst$ leaf$)) :named a0))
(assert (! (= (bst$ leaf$) true) :named a1))
(assert (! (forall ((?v0 A_tree$)) (=> (and (=> (= ?v0 leaf$) false) (=> (not (= ?v0 leaf$)) false)) false)) :named a2))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (bst$ ?v0) (bst$ (delete$ ?v1 ?v0)))) :named a3))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (bst$ ?v0) (bst$ (insert$ ?v1 ?v0)))) :named a4))
(assert (! (forall ((?v0 A_bool_fun$)) (pred_tree$ ?v0 leaf$)) :named a5))
(assert (! (forall ((?v0 A_tree$)) (= (= (splay_max$ ?v0) leaf$) (= ?v0 leaf$))) :named a6))
(assert (! (forall ((?v0 A_tree$)) (=> (bst$ ?v0) (bst$ (splay_max$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 A$)) (=> (and (= (del_rightmost$ ?v0) (pair$ ?v1 ?v2)) (and (bst$ ?v0) (not (= ?v0 leaf$)))) (bst$ ?v1))) :named a8))
(assert (! (= (left$ leaf$) leaf$) :named a9))
(assert (! (= (right$ leaf$) leaf$) :named a10))
(assert (! (= (splay_max$ leaf$) leaf$) :named a11))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$) (?v3 A$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$) (?v3 A$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (=> (and (= (= ?v0 leaf$) (= ?v1 leaf$)) (=> (and (not (= ?v0 leaf$)) (not (= ?v1 leaf$))) (and (= (left$ ?v0) (left$ ?v1)) (and (= (val$ ?v0) (val$ ?v1)) (= (right$ ?v0) (right$ ?v1)))))) (= ?v0 ?v1))) :named a14))
(check-sat)
;(get-unsat-core)
