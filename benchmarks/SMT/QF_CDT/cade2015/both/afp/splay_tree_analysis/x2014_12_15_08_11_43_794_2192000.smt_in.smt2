; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 439
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-datatypes () ((A_tree$ (leaf$) (node$ (left$ A_tree$) (val$ A$) (right$ A_tree$)))
  (Num$ (one$) (bit0$ (select$ Num$)) (bit1$ (selecta$ Num$)))))
(declare-fun b$ () A$)
(declare-fun c$ () A$)
(declare-fun l$ () A_tree$)
(declare-fun am$ (A_tree$) Real)
(declare-fun l$a () A_tree$)
(declare-fun rl$ () A_tree$)
(declare-fun rr$ () A_tree$)
(declare-fun bst$ (A_tree$) Bool)
(declare-fun log$ (Real Real) Real)
(declare-fun plus$ (Num$ Num$) Num$)
(declare-fun real$ (Nat$) Real)
(declare-fun size1$ (A_tree$) Nat$)
(declare-fun less_eq$ (Num$ Num$) Bool)
(declare-fun numeral$ (Num$) Real)
(declare-fun splay_max$ (A_tree$) A_tree$)
(assert (! (not (<= (am$ (node$ l$ b$ (node$ rl$ c$ rr$))) (+ (* 3.0 (- (log$ 2.0 (real$ (size1$ (node$ l$ b$ (node$ rl$ c$ rr$))))) 1.0)) 1.0))) :named a0))
(assert (! (<= (am$ (node$ l$ b$ (node$ rl$ c$ rr$))) (- (* 3.0 (log$ 2.0 (real$ (size1$ (node$ l$ b$ (node$ rl$ c$ rr$)))))) 2.0)) :named a1))
(assert (! (not (= rr$ leaf$)) :named a2))
(assert (! (bst$ (node$ l$ b$ (node$ rl$ c$ rr$))) :named a3))
(assert (! (not (= (node$ l$ b$ (node$ rl$ c$ rr$)) leaf$)) :named a4))
(assert (! (<= (+ (- (- (+ (+ (am$ rr$) (log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$))))) (log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$) c$ l$a))))) (log$ 2.0 (real$ (size1$ rr$)))) (log$ 2.0 (real$ (size1$ (node$ rl$ c$ rr$))))) 1.0) (+ (- (- (+ (+ (* 3.0 (- (log$ 2.0 (real$ (size1$ rr$))) 1.0)) (log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$))))) (log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$) c$ l$a))))) (log$ 2.0 (real$ (size1$ rr$)))) (log$ 2.0 (real$ (size1$ (node$ rl$ c$ rr$))))) 2.0)) :named a5))
(assert (! (= (+ (- (- (+ (+ (* 3.0 (- (log$ 2.0 (real$ (size1$ rr$))) 1.0)) (log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$))))) (log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$) c$ l$a))))) (log$ 2.0 (real$ (size1$ rr$)))) (log$ 2.0 (real$ (size1$ (node$ rl$ c$ rr$))))) 2.0) (- (- (+ (+ (* 2.0 (log$ 2.0 (real$ (size1$ rr$)))) (log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$))))) (log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$) c$ l$a))))) (log$ 2.0 (real$ (size1$ (node$ rl$ c$ rr$))))) 1.0)) :named a6))
(assert (! (<= (- (+ (* 2.0 (log$ 2.0 (real$ (size1$ (node$ l$ b$ (node$ rl$ c$ rr$)))))) (log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$) c$ l$a))))) 2.0) (- (* 3.0 (log$ 2.0 (real$ (size1$ (node$ l$ b$ (node$ rl$ c$ rr$)))))) 2.0)) :named a7))
(assert (! (<= (- (+ (+ (log$ 2.0 (real$ (size1$ rr$))) (log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$))))) (log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$) c$ l$a))))) 1.0) (- (+ (* 2.0 (log$ 2.0 (real$ (size1$ (node$ l$ b$ (node$ rl$ c$ rr$)))))) (log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$) c$ l$a))))) 2.0)) :named a8))
(assert (! (<= (- (- (+ (+ (* 2.0 (log$ 2.0 (real$ (size1$ rr$)))) (log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$))))) (log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$) c$ l$a))))) (log$ 2.0 (real$ (size1$ (node$ rl$ c$ rr$))))) 1.0) (- (+ (+ (log$ 2.0 (real$ (size1$ rr$))) (log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$))))) (log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$) c$ l$a))))) 1.0)) :named a9))
(assert (! (= (am$ (node$ l$ b$ (node$ rl$ c$ rr$))) (+ (- (- (+ (+ (am$ rr$) (log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$))))) (log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$) c$ l$a))))) (log$ 2.0 (real$ (size1$ rr$)))) (log$ 2.0 (real$ (size1$ (node$ rl$ c$ rr$))))) 1.0)) :named a10))
(assert (! (= (+ 1.0 1.0) 2.0) :named a11))
(assert (! (forall ((?v0 Num$)) (= (+ (numeral$ ?v0) 1.0) (numeral$ (plus$ ?v0 one$)))) :named a12))
(assert (! (forall ((?v0 Num$)) (= (+ 1.0 (numeral$ ?v0)) (numeral$ (plus$ one$ ?v0)))) :named a13))
(assert (! (forall ((?v0 Num$)) (= (<= (numeral$ ?v0) 1.0) (less_eq$ ?v0 one$))) :named a14))
(assert (! (=> (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$)) (=> (= (splay_max$ rr$) (node$ ?v0 ?v1 ?v2)) false)) false) :named a15))
(assert (! (forall ((?v0 Num$)) (= (= (numeral$ ?v0) 1.0) (= ?v0 one$))) :named a16))
(check-sat)
;(get-unsat-core)
