; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 312
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_tree_set$ 0)
(declare-datatypes () ((Num$ (one$) (bit0$ (select$ Num$)) (bit1$ (selecta$ Num$)))
  (A_tree$ (leaf$) (node$ (left$ A_tree$) (val$ A$) (right$ A_tree$)))))
(declare-fun a$ (A$ A_tree$) Real)
(declare-fun b$ () A$)
(declare-fun c$ () A$)
(declare-fun l$ () A_tree$)
(declare-fun r$ () A_tree$)
(declare-fun u$ () A$)
(declare-fun aa$ () A$)
(declare-fun l$a () A_tree$)
(declare-fun la$ () A_tree$)
(declare-fun ll$ () A_tree$)
(declare-fun lr$ () A_tree$)
(declare-fun r$a () A_tree$)
(declare-fun ra$ () A_tree$)
(declare-fun bst$ (A_tree$) Bool)
(declare-fun log$ (Real Real) Real)
(declare-fun less$ (A$ A$) Bool)
(declare-fun real$ (Nat$) Real)
(declare-fun size1$ (A_tree$) Nat$)
(declare-fun splay$ (A$ A_tree$) A_tree$)
(declare-fun member$ (A_tree$ A_tree_set$) Bool)
(declare-fun subtrees$ (A_tree$) A_tree_set$)
(assert (! (not (<= (+ (- (+ (log$ 2.0 (real$ (size1$ (node$ r$ b$ (node$ lr$ c$ r$a))))) (* 2.0 (log$ 2.0 (real$ (size1$ (node$ l$ c$ r$a)))))) (* 3.0 (log$ 2.0 (real$ (size1$ (node$ la$ aa$ ra$)))))) 1.0) (+ (- (* 3.0 (log$ 2.0 (real$ (size1$ (node$ l$ c$ r$a))))) (* 3.0 (log$ 2.0 (real$ (size1$ (node$ la$ aa$ ra$)))))) 1.0))) :named a0))
(assert (! (not (= aa$ c$)) :named a1))
(assert (! (not (= aa$ b$)) :named a2))
(assert (! (=> (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$)) (=> (= l$ (node$ ?v0 ?v1 ?v2)) false)) false) :named a3))
(assert (! (= (splay$ aa$ ll$) (node$ l$a u$ r$)) :named a4))
(assert (! (less$ aa$ c$) :named a5))
(assert (! (less$ aa$ b$) :named a6))
(assert (! (=> (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$)) (=> (= (splay$ aa$ ll$) (node$ ?v0 ?v1 ?v2)) false)) false) :named a7))
(assert (! (member$ (node$ la$ aa$ ra$) (subtrees$ (node$ l$ c$ r$a))) :named a8))
(assert (! (bst$ (node$ l$ c$ r$a)) :named a9))
(assert (! (<= (+ (- (- (+ (+ (* 2.0 (log$ 2.0 (real$ (size1$ ll$)))) (log$ 2.0 (real$ (size1$ (node$ r$ b$ (node$ lr$ c$ r$a)))))) (log$ 2.0 (real$ (size1$ (node$ lr$ c$ r$a))))) (log$ 2.0 (real$ (size1$ (node$ ll$ b$ lr$))))) (* 3.0 (log$ 2.0 (real$ (size1$ (node$ la$ aa$ ra$)))))) 2.0) (+ (- (+ (+ (log$ 2.0 (real$ (size1$ ll$))) (log$ 2.0 (real$ (size1$ (node$ r$ b$ (node$ lr$ c$ r$a)))))) (log$ 2.0 (real$ (size1$ (node$ lr$ c$ r$a))))) (* 3.0 (log$ 2.0 (real$ (size1$ (node$ la$ aa$ ra$)))))) 2.0)) :named a10))
(assert (! (<= (+ (- (+ (+ (log$ 2.0 (real$ (size1$ ll$))) (log$ 2.0 (real$ (size1$ (node$ r$ b$ (node$ lr$ c$ r$a)))))) (log$ 2.0 (real$ (size1$ (node$ lr$ c$ r$a))))) (* 3.0 (log$ 2.0 (real$ (size1$ (node$ la$ aa$ ra$)))))) 2.0) (+ (- (+ (log$ 2.0 (real$ (size1$ (node$ r$ b$ (node$ lr$ c$ r$a))))) (* 2.0 (log$ 2.0 (real$ (size1$ (node$ l$ c$ r$a)))))) (* 3.0 (log$ 2.0 (real$ (size1$ (node$ la$ aa$ ra$)))))) 1.0)) :named a11))
(assert (! (= (+ (- (- (- (+ (+ (* 3.0 (log$ 2.0 (real$ (size1$ ll$)))) (log$ 2.0 (real$ (size1$ (node$ r$ b$ (node$ lr$ c$ r$a)))))) (log$ 2.0 (real$ (size1$ (node$ lr$ c$ r$a))))) (log$ 2.0 (real$ (size1$ (node$ ll$ b$ lr$))))) (log$ 2.0 (real$ (size1$ (node$ l$a u$ r$))))) (* 3.0 (log$ 2.0 (real$ (size1$ (node$ la$ aa$ ra$)))))) 2.0) (+ (- (- (+ (+ (* 2.0 (log$ 2.0 (real$ (size1$ ll$)))) (log$ 2.0 (real$ (size1$ (node$ r$ b$ (node$ lr$ c$ r$a)))))) (log$ 2.0 (real$ (size1$ (node$ lr$ c$ r$a))))) (log$ 2.0 (real$ (size1$ (node$ ll$ b$ lr$))))) (* 3.0 (log$ 2.0 (real$ (size1$ (node$ la$ aa$ ra$)))))) 2.0)) :named a12))
(assert (! (<= (a$ aa$ (node$ l$ c$ r$a)) (+ (- (+ (log$ 2.0 (real$ (size1$ (node$ r$ b$ (node$ lr$ c$ r$a))))) (* 2.0 (log$ 2.0 (real$ (size1$ (node$ l$ c$ r$a)))))) (* 3.0 (log$ 2.0 (real$ (size1$ (node$ la$ aa$ ra$)))))) 1.0)) :named a13))
(assert (! (= l$ (node$ ll$ b$ lr$)) :named a14))
(assert (! (<= (+ (- (- (+ (+ (a$ aa$ ll$) (log$ 2.0 (real$ (size1$ (node$ r$ b$ (node$ lr$ c$ r$a)))))) (log$ 2.0 (real$ (size1$ (node$ lr$ c$ r$a))))) (log$ 2.0 (real$ (size1$ (node$ ll$ b$ lr$))))) (log$ 2.0 (real$ (size1$ (node$ l$a u$ r$))))) 1.0) (+ (- (- (- (+ (+ (* 3.0 (log$ 2.0 (real$ (size1$ ll$)))) (log$ 2.0 (real$ (size1$ (node$ r$ b$ (node$ lr$ c$ r$a)))))) (log$ 2.0 (real$ (size1$ (node$ lr$ c$ r$a))))) (log$ 2.0 (real$ (size1$ (node$ ll$ b$ lr$))))) (log$ 2.0 (real$ (size1$ (node$ l$a u$ r$))))) (* 3.0 (log$ 2.0 (real$ (size1$ (node$ la$ aa$ ra$)))))) 2.0)) :named a15))
(assert (! (= (+ 1.0 1.0) 2.0) :named a16))
(assert (! (= (a$ aa$ (node$ l$ c$ r$a)) (+ (- (- (+ (+ (a$ aa$ ll$) (log$ 2.0 (real$ (size1$ (node$ r$ b$ (node$ lr$ c$ r$a)))))) (log$ 2.0 (real$ (size1$ (node$ lr$ c$ r$a))))) (log$ 2.0 (real$ (size1$ (node$ ll$ b$ lr$))))) (log$ 2.0 (real$ (size1$ (node$ l$a u$ r$))))) 1.0)) :named a17))
(check-sat)
;(get-unsat-core)
