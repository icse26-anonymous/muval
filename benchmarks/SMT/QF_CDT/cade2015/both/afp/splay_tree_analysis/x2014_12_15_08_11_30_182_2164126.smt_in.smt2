; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 344
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_tree_a_tree_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$) (node$ (left$ A_tree$) (val$ A$) (right$ A_tree$)))))
(declare-fun l$ () A_tree$)
(declare-fun r$ () A_tree$)
(declare-fun u$ () A$)
(declare-fun rr$ () A_tree$)
(declare-fun uu$ (A_tree$ A$) A_tree_a_tree_fun$)
(declare-fun one$ () Nat$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun size$ (A_tree$) Nat$)
(declare-fun fun_app$ (A_tree_a_tree_fun$ A_tree$) A_tree$)
(declare-fun splay_max$ (A_tree$) A_tree$)
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$)) (! (= (fun_app$ (uu$ ?v0 ?v1) ?v2) (node$ ?v0 ?v1 ?v2)) :pattern ((fun_app$ (uu$ ?v0 ?v1) ?v2)))) :named a0))
(assert (! (not (= (size$ rr$) (plus$ (plus$ (size$ l$) (size$ r$)) one$))) :named a1))
(assert (! (= (splay_max$ rr$) (node$ l$ u$ r$)) :named a2))
(assert (! (=> (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$)) (=> (= (splay_max$ rr$) (node$ ?v0 ?v1 ?v2)) false)) false) :named a3))
(assert (! (not (= rr$ leaf$)) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a6))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 A$) (?v3 A_tree$)) (=> (= (splay_max$ ?v0) (node$ ?v1 ?v2 ?v3)) (= (size$ ?v0) (plus$ (plus$ (size$ ?v1) (size$ ?v3)) one$)))) :named a7))
(assert (! (= one$ one$) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a10))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (=> (not (= (size$ ?v0) (size$ ?v1))) (not (= ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 Nat$)) (= (= one$ ?v0) (= ?v0 one$))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (plus$ (plus$ ?v0 ?v1) (plus$ ?v2 ?v3)) (plus$ (plus$ ?v0 ?v2) (plus$ ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (plus$ (plus$ ?v0 ?v1) ?v2) (plus$ (plus$ ?v0 ?v2) ?v1))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (plus$ (plus$ ?v0 ?v1) ?v2) (plus$ ?v0 (plus$ ?v1 ?v2)))) :named a15))
(assert (! (forall ((?v0 A_tree$)) (= (= (splay_max$ ?v0) leaf$) (= ?v0 leaf$))) :named a16))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (! (= (splay_max$ (node$ ?v0 ?v1 leaf$)) (node$ ?v0 ?v1 leaf$)) :pattern ((uu$ ?v0 ?v1)))) :named a17))
(check-sat)
;(get-unsat-core)
