; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 380
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-datatypes () ((A_tree$ (leaf$) (node$ (left$ A_tree$) (val$ A$) (right$ A_tree$)))
  (A_op_s_t$ (splay$ (select$ A$)) (insert$ (selecta$ A$)) (delete$ (selectb$ A$)))
  (A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun a$ () A$)
(declare-fun f$ () A_op_s_t$)
(declare-fun s$ () A_tree$)
(declare-fun bst$ (A_tree$) Bool)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun sorted$ (A_list$) Bool)
(declare-fun splay$a (A$ A_tree$) A_tree$)
(declare-fun delete$a (A$ A_tree$) A_tree$)
(declare-fun inorder$ (A_tree$) A_list$)
(declare-fun insert$a (A$ A_tree$) A_tree$)
(declare-fun is_root$ (A$ A_tree$) Bool)
(declare-fun nxt_s_t$ (A_op_s_t$ A_tree$) A_tree$)
(declare-fun set_tree$ (A_tree$) A_set$)
(declare-fun splay_max$ (A_tree$) A_tree$)
(assert (! (not (bst$ (nxt_s_t$ f$ s$))) :named a0))
(assert (! (= f$ (insert$ a$)) :named a1))
(assert (! (bst$ (splay$a a$ s$)) :named a2))
(assert (! (bst$ s$) :named a3))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (bst$ ?v0) (bst$ (splay$a ?v1 ?v0)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (! (= (nxt_s_t$ (insert$ ?v0) ?v1) (insert$a ?v0 ?v1)) :pattern ((nxt_s_t$ (insert$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (bst$ ?v0) (bst$ (delete$a ?v1 ?v0)))) :named a6))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (bst$ ?v0) (bst$ (insert$a ?v1 ?v0)))) :named a7))
(assert (! (forall ((?v0 A_tree$)) (=> (bst$ ?v0) (bst$ (splay_max$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (! (= (nxt_s_t$ (splay$ ?v0) ?v1) (splay$a ?v0 ?v1)) :pattern ((nxt_s_t$ (splay$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (! (= (nxt_s_t$ (delete$ ?v0) ?v1) (delete$a ?v0 ?v1)) :pattern ((nxt_s_t$ (delete$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 A_tree$)) (=> (bst$ ?v0) (exists ((?v1 A$)) (= (splay_max$ ?v0) (splay$a ?v1 ?v0))))) :named a11))
(assert (! (= (bst$ leaf$) true) :named a12))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (bst$ ?v0) (= (is_root$ ?v1 (splay$a ?v1 ?v0)) (member$ ?v1 (set_tree$ ?v0))))) :named a13))
(assert (! (forall ((?v0 A_tree$)) (=> (bst$ ?v0) (sorted$ (inorder$ ?v0)))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (insert$ ?v0) (insert$ ?v1)) (= ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (splay$ ?v0) (splay$ ?v1)) (= ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= (delete$ ?v0) (delete$ ?v1)) (= ?v0 ?v1))) :named a17))
(check-sat)
;(get-unsat-core)
