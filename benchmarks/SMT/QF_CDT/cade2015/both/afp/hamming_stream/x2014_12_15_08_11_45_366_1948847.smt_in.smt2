; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 54
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_fun$ 0)
(declare-sort A_llist_a_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_fun_bool_fun$ 0)
(declare-sort A_a_llist_a_a_llist_a_llist_fun_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_llist_prod_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_fun_a_llist_fun$ 0)
(declare-sort A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_a_llist_a_llist_fun_fun_fun_fun$ 0)
(declare-sort A_a_llist_a_llist_prod_a_llist_fun_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_a_llist_a_a_llist_a_llist_fun_fun_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_a_llist_a_a_llist_a_llist_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_llist_prod_a_llist_fun_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_a_llist_prod_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_a_llist_prod_a_llist_fun_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_llist_prod_a_llist_fun_fun_a_llist_a_llist_a_llist_prod_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_fun_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun_a_llist_a_llist_prod_a_llist_fun_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_fun_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun_a_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_llist_a_llist_prod$ (pair$ (fst$ A_llist$) (snd$ A_llist$)))))
(declare-fun f$ (A_llist_a_llist_prod_a_llist_fun$) A_llist_a_llist_prod_a_llist_fun$)
(declare-fun uu$ (A_llist_a_llist_prod_a_llist_fun$) A_llist_a_llist_a_a_llist_a_a_llist_a_llist_fun_fun_fun_fun_fun_fun$)
(declare-fun uua$ (A_llist_a_llist_prod_a_llist_fun$) A_llist_a_llist_a_a_llist_a_llist_fun_fun_fun_fun$)
(declare-fun uub$ (A_llist_a_llist_prod_a_llist_fun$) A_llist_a_llist_a_llist_fun_fun$)
(declare-fun uuc$ () A_llist_a_llist_prod_a_llist_fun_a_llist_fun$)
(declare-fun uud$ (A$) A_bool_fun$)
(declare-fun uue$ (A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) A_a_llist_a_llist_prod_a_llist_fun_a_llist_fun_fun$)
(declare-fun uuf$ (A_llist_a_llist_fun$) A_a_llist_a_llist_fun_fun$)
(declare-fun uug$ (A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) A_llist_a_llist_a_llist_prod_a_llist_fun_fun_a_llist_a_llist_fun_fun$)
(declare-fun uuh$ (A_llist_a_llist_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun uui$ (A_llist_a_llist_fun$) A_llist_a_llist_prod_a_llist_fun_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_a_llist_fun_fun$)
(declare-fun uuj$ (A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun_a_llist_a_llist_prod_a_llist_fun_a_llist_fun_fun$)
(declare-fun uuk$ (A_llist_a_llist_a_llist_prod_a_llist_fun_fun$) A_llist_a_llist_prod_a_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun_fun$)
(declare-fun uul$ (A_llist_a_llist_fun$) A_llist_a_llist_prod_a_llist_a_llist_prod_a_llist_fun_a_llist_fun_fun$)
(declare-fun uum$ (A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$) A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun_a_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun_fun$)
(declare-fun uun$ (A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$) A_llist_a_llist_a_llist_prod_a_llist_fun_fun_a_llist_a_llist_a_llist_prod_a_llist_fun_fun_fun$)
(declare-fun uuo$ (A_llist_a_llist_a_llist_prod_a_llist_fun_fun$) A_llist_a_llist_fun_a_llist_a_llist_a_llist_prod_a_llist_fun_fun_fun$)
(declare-fun uup$ (A_llist_a_llist_a_llist_prod_a_llist_fun_fun$) A_llist_a_llist_prod_a_llist_fun_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun_fun$)
(declare-fun xsa$ () A_llist_a_llist_prod$)
(declare-fun less$ () A_a_bool_fun_fun$)
(declare-fun curry$ (A_llist_a_llist_prod_a_llist_fun$) A_llist_a_llist_a_llist_fun_fun$)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_llist_a_llist_prod_a_llist_fun_a_llist_fun$ A_llist_a_llist_prod_a_llist_fun$) A_llist$)
(declare-fun fun_ord$ (A_llist_a_llist_bool_fun_fun$) A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_a_llist_prod_a_llist_fun$ A_llist_a_llist_prod$) A_llist$)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$d (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$e (A_llist_a_llist_a_llist_fun_fun$ A_llist$) A_llist_a_llist_fun$)
(declare-fun fun_app$f (A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ A_a_llist_a_llist_fun_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$g (A_llist_a_a_llist_a_llist_fun_fun_fun$ A_llist$) A_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$h (A_llist_a_llist_a_a_llist_a_llist_fun_fun_fun_fun$ A_llist$) A_llist_a_a_llist_a_llist_fun_fun_fun$)
(declare-fun fun_app$i (A_a_llist_a_llist_fun_fun$ A$) A_llist_a_llist_fun$)
(declare-fun fun_app$j (A_a_llist_a_llist_prod_a_llist_fun_a_llist_fun_fun$ A$) A_llist_a_llist_prod_a_llist_fun_a_llist_fun$)
(declare-fun fun_app$k (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$l (A_llist_a_llist_prod_a_llist_fun_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_a_llist_fun_fun$ A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) A_llist_a_llist_prod_a_llist_fun_a_llist_fun$)
(declare-fun fun_app$m (A_llist_a_llist_a_llist_prod_a_llist_fun_fun$ A_llist$) A_llist_a_llist_prod_a_llist_fun$)
(declare-fun fun_app$n (A_llist_a_llist_fun_a_llist_a_llist_a_llist_prod_a_llist_fun_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_a_llist_prod_a_llist_fun_fun$)
(declare-fun fun_app$o (A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$ A_llist_a_llist_prod_a_llist_fun$) A_llist_a_llist_prod_a_llist_fun$)
(declare-fun fun_app$p (A_llist_a_llist_prod_a_llist_fun_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun_fun$ A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$)
(declare-fun fun_app$q (A_llist_a_llist_a_llist_prod_a_llist_fun_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_a_llist_prod_a_llist_fun_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$r (A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun_a_llist_a_llist_prod_a_llist_fun_a_llist_fun_fun$ A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$) A_llist_a_llist_prod_a_llist_fun_a_llist_fun$)
(declare-fun fun_app$s (A_llist_a_llist_a_llist_prod_a_llist_fun_fun_a_llist_a_llist_a_llist_prod_a_llist_fun_fun_fun$ A_llist_a_llist_a_llist_prod_a_llist_fun_fun$) A_llist_a_llist_a_llist_prod_a_llist_fun_fun$)
(declare-fun fun_app$t (A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun_a_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun_fun$ A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$) A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$)
(declare-fun fun_app$u (A_llist_a_llist_prod_a_llist_a_llist_prod_a_llist_fun_a_llist_fun_fun$ A_llist_a_llist_prod$) A_llist_a_llist_prod_a_llist_fun_a_llist_fun$)
(declare-fun fun_app$v (A_llist_a_llist_prod_a_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun_fun$ A_llist_a_llist_prod$) A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$)
(declare-fun fun_app$w (A_a_llist_a_a_llist_a_llist_fun_fun_fun_fun$ A$) A_llist_a_a_llist_a_llist_fun_fun_fun$)
(declare-fun fun_app$x (A_llist_a_a_llist_a_a_llist_a_llist_fun_fun_fun_fun_fun$ A_llist$) A_a_llist_a_a_llist_a_llist_fun_fun_fun_fun$)
(declare-fun fun_app$y (A_llist_a_llist_a_a_llist_a_a_llist_a_llist_fun_fun_fun_fun_fun_fun$ A_llist$) A_llist_a_a_llist_a_a_llist_a_llist_fun_fun_fun_fun_fun$)
(declare-fun fun_app$z (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lessThan$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun monotone$ (A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) Bool)
(declare-fun case_prod$ (A_llist_a_llist_a_llist_fun_fun$) A_llist_a_llist_prod_a_llist_fun$)
(declare-fun fun_app$aa (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$ab (A_llist_a_llist_prod_a_llist_fun_bool_fun$ A_llist_a_llist_prod_a_llist_fun$) Bool)
(declare-fun fun_app$ac (A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$ A_llist_a_llist_prod_a_llist_fun$) A_llist_a_llist_prod_a_llist_fun_bool_fun$)
(declare-fun monotone$a (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$) Bool)
(declare-fun monotone$b (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$ A_llist_a_llist_a_llist_prod_a_llist_fun_fun$) Bool)
(declare-fun monotone$c (A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$ A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$ A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$) Bool)
(declare-fun case_llist$ (A_llist$) A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$)
(declare-fun greaterThan$ (A_a_bool_fun_fun$ A$) A_set$)
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun$)) (! (= (fun_app$ uuc$ ?v0) (fun_app$a (case_prod$ (uub$ ?v0)) xsa$)) :pattern ((fun_app$ uuc$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$b (uud$ ?v0) ?v1) (fun_app$b (fun_app$c less$ ?v1) ?v0)) :pattern ((fun_app$b (uud$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$d (fun_app$e (uub$ ?v0) ?v1) ?v2) (fun_app$d (fun_app$f (case_llist$ lNil$) (fun_app$g (fun_app$h (uua$ ?v0) ?v1) ?v2)) ?v1)) :pattern ((fun_app$d (fun_app$e (uub$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$d (fun_app$i (uuf$ ?v0) ?v1) ?v2) (lCons$ ?v1 (fun_app$d ?v0 ?v2))) :pattern ((fun_app$d (fun_app$i (uuf$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) (?v1 A$) (?v2 A_llist_a_llist_prod_a_llist_fun$)) (! (= (fun_app$ (fun_app$j (uue$ ?v0) ?v1) ?v2) (lCons$ ?v1 (fun_app$ ?v0 ?v2))) :pattern ((fun_app$ (fun_app$j (uue$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$)) (! (= (fun_app$d (fun_app$k (uuh$ ?v0) ?v1) ?v2) (fun_app$d ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$d (fun_app$k (uuh$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) (?v2 A_llist_a_llist_prod_a_llist_fun$)) (! (= (fun_app$ (fun_app$l (uui$ ?v0) ?v1) ?v2) (fun_app$d ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$l (uui$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 A_llist_a_llist_a_llist_prod_a_llist_fun_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$)) (! (= (fun_app$m (fun_app$n (uuo$ ?v0) ?v1) ?v2) (fun_app$m ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$m (fun_app$n (uuo$ ?v0) ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 A_llist_a_llist_a_llist_prod_a_llist_fun_fun$) (?v1 A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) (?v2 A_llist_a_llist_prod_a_llist_fun$)) (! (= (fun_app$o (fun_app$p (uup$ ?v0) ?v1) ?v2) (fun_app$m ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$o (fun_app$p (uup$ ?v0) ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) (?v1 A_llist_a_llist_a_llist_prod_a_llist_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$d (fun_app$q (uug$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$m ?v1 ?v2))) :pattern ((fun_app$d (fun_app$q (uug$ ?v0) ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) (?v1 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$) (?v2 A_llist_a_llist_prod_a_llist_fun$)) (! (= (fun_app$ (fun_app$r (uuj$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$o ?v1 ?v2))) :pattern ((fun_app$ (fun_app$r (uuj$ ?v0) ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$) (?v1 A_llist_a_llist_a_llist_prod_a_llist_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$m (fun_app$s (uun$ ?v0) ?v1) ?v2) (fun_app$o ?v0 (fun_app$m ?v1 ?v2))) :pattern ((fun_app$m (fun_app$s (uun$ ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$) (?v1 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$) (?v2 A_llist_a_llist_prod_a_llist_fun$)) (! (= (fun_app$o (fun_app$t (uum$ ?v0) ?v1) ?v2) (fun_app$o ?v0 (fun_app$o ?v1 ?v2))) :pattern ((fun_app$o (fun_app$t (uum$ ?v0) ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_a_llist_prod$) (?v2 A_llist_a_llist_prod_a_llist_fun$)) (! (= (fun_app$ (fun_app$u (uul$ ?v0) ?v1) ?v2) (fun_app$d ?v0 (fun_app$a ?v2 ?v1))) :pattern ((fun_app$ (fun_app$u (uul$ ?v0) ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 A_llist_a_llist_a_llist_prod_a_llist_fun_fun$) (?v1 A_llist_a_llist_prod$) (?v2 A_llist_a_llist_prod_a_llist_fun$)) (! (= (fun_app$o (fun_app$v (uuk$ ?v0) ?v1) ?v2) (fun_app$m ?v0 (fun_app$a ?v2 ?v1))) :pattern ((fun_app$o (fun_app$v (uuk$ ?v0) ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (fun_app$d (fun_app$i (fun_app$g (fun_app$h (uua$ ?v0) ?v1) ?v2) ?v3) ?v4) (fun_app$d (fun_app$f (case_llist$ lNil$) (fun_app$g (fun_app$w (fun_app$x (fun_app$y (uu$ ?v0) ?v1) ?v2) ?v3) ?v4)) ?v2)) :pattern ((fun_app$d (fun_app$i (fun_app$g (fun_app$h (uua$ ?v0) ?v1) ?v2) ?v3) ?v4)))) :named a15))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A$) (?v4 A_llist$) (?v5 A$) (?v6 A_llist$)) (! (= (fun_app$d (fun_app$i (fun_app$g (fun_app$w (fun_app$x (fun_app$y (uu$ ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) (ite (fun_app$b (fun_app$c less$ ?v3) ?v5) (lCons$ ?v3 (fun_app$d (fun_app$e (curry$ ?v0) ?v4) ?v2)) (ite (fun_app$b (fun_app$c less$ ?v5) ?v3) (lCons$ ?v5 (fun_app$d (fun_app$e (curry$ ?v0) ?v1) ?v6)) (lCons$ ?v5 (fun_app$d (fun_app$e (curry$ ?v0) ?v4) ?v6))))) :pattern ((fun_app$d (fun_app$i (fun_app$g (fun_app$w (fun_app$x (fun_app$y (uu$ ?v0) ?v1) ?v2) ?v3) ?v4) ?v5) ?v6)))) :named a16))
(assert (! (not (monotone$ (fun_ord$ lprefix$) lprefix$ uuc$)) :named a17))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$b (fun_app$c less$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$b (fun_app$c less$ ?v0) ?v2))) :named a18))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (= ?v0 ?v1) (fun_app$b (fun_app$c less$ ?v1) ?v2)) (fun_app$b (fun_app$c less$ ?v0) ?v2))) :named a19))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun$)) (= (f$ ?v0) (case_prod$ (uub$ ?v0)))) :named a20))
(assert (! (forall ((?v0 A$)) (= (lessThan$ less$ ?v0) (collect$ (uud$ ?v0)))) :named a21))
(assert (! (forall ((?v0 A$)) (! (= (greaterThan$ less$ ?v0) (collect$ (fun_app$c less$ ?v0))) :pattern ((greaterThan$ less$ ?v0)))) :named a22))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$z (fun_app$aa lprefix$ lNil$) ?v0) true) :pattern ((fun_app$z (fun_app$aa lprefix$ lNil$) ?v0)))) :named a23))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$z (fun_app$aa lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$z (fun_app$aa lprefix$ ?v1) ?v3))) :pattern ((fun_app$z (fun_app$aa lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))) :named a24))
(assert (! (forall ((?v0 A_llist_a_llist_a_llist_fun_fun$)) (= (curry$ (case_prod$ ?v0)) ?v0)) :named a25))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun$)) (= (case_prod$ (curry$ ?v0)) ?v0)) :named a26))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) (?v1 A$)) (=> (monotone$ (fun_ord$ lprefix$) lprefix$ ?v0) (monotone$ (fun_ord$ lprefix$) lprefix$ (fun_app$j (uue$ ?v0) ?v1)))) :named a27))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A$)) (=> (monotone$a ?v0 lprefix$ ?v1) (monotone$a ?v0 lprefix$ (fun_app$i (uuf$ ?v1) ?v2)))) :named a28))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$) (?v1 A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) (?v2 A$)) (=> (monotone$ ?v0 lprefix$ ?v1) (monotone$ ?v0 lprefix$ (fun_app$j (uue$ ?v1) ?v2)))) :named a29))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$) (?v1 A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_llist_a_llist_prod_a_llist_fun_fun$)) (=> (and (monotone$ ?v0 lprefix$ ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$a ?v2 lprefix$ (fun_app$q (uug$ ?v1) ?v3)))) :named a30))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_llist_fun$)) (=> (and (monotone$a ?v0 lprefix$ ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$a ?v2 lprefix$ (fun_app$k (uuh$ ?v1) ?v3)))) :named a31))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$) (?v3 A_llist_a_llist_prod_a_llist_fun_a_llist_fun$)) (=> (and (monotone$a ?v0 lprefix$ ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$ ?v2 lprefix$ (fun_app$l (uui$ ?v1) ?v3)))) :named a32))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$) (?v1 A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) (?v2 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$) (?v3 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$)) (=> (and (monotone$ ?v0 lprefix$ ?v1) (monotone$c ?v2 ?v0 ?v3)) (monotone$ ?v2 lprefix$ (fun_app$r (uuj$ ?v1) ?v3)))) :named a33))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$) (?v2 A_llist_a_llist_a_llist_prod_a_llist_fun_fun$) (?v3 A_llist_a_llist_prod$)) (=> (monotone$b ?v0 ?v1 ?v2) (monotone$c (fun_ord$ ?v0) ?v1 (fun_app$v (uuk$ ?v2) ?v3)))) :named a34))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist_a_llist_prod$)) (=> (monotone$a ?v0 ?v1 ?v2) (monotone$ (fun_ord$ ?v0) ?v1 (fun_app$u (uul$ ?v2) ?v3)))) :named a35))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$) (?v1 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$) (?v2 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$) (?v3 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$)) (=> (and (monotone$c ?v0 (fun_ord$ lprefix$) ?v1) (monotone$c ?v2 ?v0 ?v3)) (monotone$c ?v2 (fun_ord$ lprefix$) (fun_app$t (uum$ ?v1) ?v3)))) :named a36))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$) (?v1 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_llist_a_llist_prod_a_llist_fun_fun$)) (=> (and (monotone$c ?v0 (fun_ord$ lprefix$) ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$b ?v2 (fun_ord$ lprefix$) (fun_app$s (uun$ ?v1) ?v3)))) :named a37))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_a_llist_prod_a_llist_fun_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_llist_fun$)) (=> (and (monotone$b ?v0 (fun_ord$ lprefix$) ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$b ?v2 (fun_ord$ lprefix$) (fun_app$n (uuo$ ?v1) ?v3)))) :named a38))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_a_llist_prod_a_llist_fun_fun$) (?v2 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$) (?v3 A_llist_a_llist_prod_a_llist_fun_a_llist_fun$)) (=> (and (monotone$b ?v0 (fun_ord$ lprefix$) ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$c ?v2 (fun_ord$ lprefix$) (fun_app$p (uup$ ?v1) ?v3)))) :named a39))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$) (?v1 A_llist_a_llist_prod_a_llist_fun$) (?v2 A_llist_a_llist_prod_a_llist_fun$) (?v3 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_fun$) (?v4 A_llist_a_llist_prod_a_llist_fun_a_llist_a_llist_prod_a_llist_fun_bool_fun_fun$)) (=> (and (forall ((?v5 A_llist_a_llist_prod_a_llist_fun$)) (= (fun_app$o ?v0 ?v5) (ite (fun_app$ab (fun_app$ac (fun_ord$ lprefix$) ?v5) ?v1) ?v2 (fun_app$o ?v3 ?v5)))) (and (forall ((?v5 A_llist_a_llist_prod_a_llist_fun$) (?v6 A_llist_a_llist_prod_a_llist_fun$)) (=> (and (fun_app$ab (fun_app$ac (fun_ord$ lprefix$) ?v5) ?v6) (not (fun_app$ab (fun_app$ac (fun_ord$ lprefix$) ?v5) ?v1))) (fun_app$ab (fun_app$ac ?v4 (fun_app$o ?v3 ?v5)) (fun_app$o ?v3 ?v6)))) (and (forall ((?v5 A_llist_a_llist_prod_a_llist_fun$)) (=> (not (fun_app$ab (fun_app$ac (fun_ord$ lprefix$) ?v5) ?v1)) (fun_app$ab (fun_app$ac ?v4 ?v2) (fun_app$o ?v3 ?v5)))) (fun_app$ab (fun_app$ac ?v4 ?v2) ?v2)))) (monotone$c (fun_ord$ lprefix$) ?v4 ?v0))) :named a40))
(assert (! (forall ((?v0 A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) (?v1 A_llist_a_llist_prod_a_llist_fun$) (?v2 A_llist$) (?v3 A_llist_a_llist_prod_a_llist_fun_a_llist_fun$) (?v4 A_llist_a_llist_bool_fun_fun$)) (=> (and (forall ((?v5 A_llist_a_llist_prod_a_llist_fun$)) (= (fun_app$ ?v0 ?v5) (ite (fun_app$ab (fun_app$ac (fun_ord$ lprefix$) ?v5) ?v1) ?v2 (fun_app$ ?v3 ?v5)))) (and (forall ((?v5 A_llist_a_llist_prod_a_llist_fun$) (?v6 A_llist_a_llist_prod_a_llist_fun$)) (=> (and (fun_app$ab (fun_app$ac (fun_ord$ lprefix$) ?v5) ?v6) (not (fun_app$ab (fun_app$ac (fun_ord$ lprefix$) ?v5) ?v1))) (fun_app$z (fun_app$aa ?v4 (fun_app$ ?v3 ?v5)) (fun_app$ ?v3 ?v6)))) (and (forall ((?v5 A_llist_a_llist_prod_a_llist_fun$)) (=> (not (fun_app$ab (fun_app$ac (fun_ord$ lprefix$) ?v5) ?v1)) (fun_app$z (fun_app$aa ?v4 ?v2) (fun_app$ ?v3 ?v5)))) (fun_app$z (fun_app$aa ?v4 ?v2) ?v2)))) (monotone$ (fun_ord$ lprefix$) ?v4 ?v0))) :named a41))
(assert (! (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$z (fun_app$aa lprefix$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 lNil$) (exists ((?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v3)) (fun_app$z (fun_app$aa lprefix$ ?v3) ?v2)))))) :named a42))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$z (fun_app$aa lprefix$ ?v0) ?v1) (or (exists ((?v2 A_llist$)) (and (= ?v0 lNil$) (= ?v1 ?v2))) (exists ((?v2 A_llist$) (?v3 A_llist$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 (lCons$ ?v4 ?v3)) (fun_app$z (fun_app$aa lprefix$ ?v2) ?v3))))))) :named a43))
(check-sat)
;(get-unsat-core)
