; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 542
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-codatatypes () ((Nat_llist$ (lNil$) (lCons$ (lhd$ Nat$) (ltl$ Nat_llist$)))))
(declare-fun lset$ (Nat_llist$) Nat_set$)
(declare-fun zero$ () Nat$)
(declare-fun lnull$ (Nat_llist$) Bool)
(declare-fun lsetp$ (Nat_llist$) Nat_bool_fun$)
(declare-fun times$ (Nat$ Nat$) Nat$)
(declare-fun lmerge$ (Nat_llist$ Nat_llist$) Nat_llist$)
(declare-fun member$ (Nat$ Nat_set$) Bool)
(declare-fun smooth$ () Nat_bool_fun$)
(declare-fun collect$ (Nat_bool_fun$) Nat_set$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun hamming$ () Nat_llist$)
(declare-fun less_eq$ (Nat_set$ Nat_set$) Bool)
(declare-fun lfinite$ (Nat_llist$) Bool)
(declare-fun lmember$ (Nat$ Nat_llist$) Bool)
(declare-fun lmerge$a (Nat_nat_bool_fun_fun$ Nat_llist$ Nat_llist$) Nat_llist$)
(declare-fun lsorted$ (Nat_llist$) Bool)
(declare-fun ldistinct$ (Nat_llist$) Bool)
(assert (! (not (= (lset$ hamming$) (collect$ smooth$))) :named a0))
(assert (! (less_eq$ (lset$ hamming$) (collect$ smooth$)) :named a1))
(assert (! (forall ((?v0 Nat$)) (=> (fun_app$ smooth$ ?v0) (member$ ?v0 (lset$ hamming$)))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ smooth$ (times$ ?v0 ?v1)) (and (fun_app$ smooth$ ?v0) (fun_app$ smooth$ ?v1)))) :named a3))
(assert (! (= (= hamming$ lNil$) false) :named a4))
(assert (! (not (fun_app$ smooth$ zero$)) :named a5))
(assert (! (ldistinct$ hamming$) :named a6))
(assert (! (lsorted$ hamming$) :named a7))
(assert (! (forall ((?v0 Nat_llist$)) (! (= (lset$ ?v0) (collect$ (lsetp$ ?v0))) :pattern ((lset$ ?v0)))) :named a8))
(assert (! (not (lnull$ hamming$)) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_llist$)) (= (member$ ?v0 (lset$ ?v1)) (lmember$ ?v0 ?v1))) :named a10))
(assert (! (not (lfinite$ hamming$)) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_llist$) (?v2 Nat_llist$)) (=> (member$ ?v0 (lset$ (lmerge$ ?v1 ?v2))) (or (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ ?v2))))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat_llist$) (?v3 Nat_llist$)) (=> (member$ ?v0 (lset$ (lmerge$a ?v1 ?v2 ?v3))) (or (member$ ?v0 (lset$ ?v2)) (member$ ?v0 (lset$ ?v3))))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_llist$)) (=> (member$ ?v0 (lset$ ?v1)) (fun_app$ (lsetp$ ?v1) ?v0))) :named a14))
(assert (! (= (lfinite$ lNil$) true) :named a15))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (= (not (lnull$ (lmerge$ ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a16))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (= (lnull$ (lmerge$ ?v0 ?v1)) (or (lnull$ ?v0) (lnull$ ?v1)))) :named a17))
(check-sat)
;(get-unsat-core)
