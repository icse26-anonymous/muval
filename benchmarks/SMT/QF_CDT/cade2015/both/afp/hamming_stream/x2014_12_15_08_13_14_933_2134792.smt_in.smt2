; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 623
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-datatypes () ((Num$ (one$) (bit0$ (select$ Num$)) (bit1$ (selecta$ Num$)))))
(declare-fun smooth$ (Nat$) Bool)
(declare-fun numeral$ (Num$) Nat$)
(assert (! (not (smooth$ (numeral$ (bit1$ (bit0$ one$))))) :named a0))
(assert (! (smooth$ (numeral$ (bit0$ one$))) :named a1))
(assert (! (smooth$ (numeral$ (bit1$ one$))) :named a2))
(assert (! (forall ((?v0 Num$)) (= (= (bit1$ ?v0) one$) false)) :named a3))
(assert (! (forall ((?v0 Num$)) (= (= one$ (bit1$ ?v0)) false)) :named a4))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (bit0$ ?v0) (bit1$ ?v1)) false)) :named a5))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (bit1$ ?v0) (bit0$ ?v1)) false)) :named a6))
(assert (! (forall ((?v0 Num$)) (= (= (bit0$ ?v0) one$) false)) :named a7))
(assert (! (forall ((?v0 Num$)) (= (= one$ (bit0$ ?v0)) false)) :named a8))
(assert (! (forall ((?v0 Num$)) (=> (and (=> (= ?v0 one$) false) (and (forall ((?v1 Num$)) (=> (= ?v0 (bit0$ ?v1)) false)) (forall ((?v1 Num$)) (=> (= ?v0 (bit1$ ?v1)) false)))) false)) :named a9))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (bit1$ ?v0) (bit1$ ?v1)) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (bit1$ ?v0) (bit1$ ?v1)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (bit0$ ?v0) (bit0$ ?v1)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (bit0$ ?v0) (bit0$ ?v1)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (numeral$ ?v0) (numeral$ ?v1)) (= ?v0 ?v1))) :named a14))
(assert (! (= (= one$ one$) true) :named a15))
(assert (! (forall ((?v0 Num$)) (not (= one$ (bit0$ ?v0)))) :named a16))
(check-sat)
;(get-unsat-core)
