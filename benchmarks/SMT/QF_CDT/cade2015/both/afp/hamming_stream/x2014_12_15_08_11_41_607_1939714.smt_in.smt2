; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 474
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_set_a_set_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun sup$ (A_set$) A_set_a_set_fun$)
(declare-fun less$ () A_a_bool_fun_fun$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lmerge$ (A_a_bool_fun_fun$ A_llist$ A_llist$) A_llist$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_set_a_set_fun$ A_set$) A_set$)
(declare-fun less_eq$ (A_set$ A_set$) Bool)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (A_a_bool_fun_fun$ A$) A_bool_fun$)
(assert (! (not (less_eq$ (lset$ (lmerge$ less$ xs$ ys$)) (fun_app$ (sup$ (lset$ xs$)) (lset$ ys$)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$b less$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$a (fun_app$b less$ ?v0) ?v2))) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (= ?v0 ?v1) (fun_app$a (fun_app$b less$ ?v1) ?v2)) (fun_app$a (fun_app$b less$ ?v0) ?v2))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ (lmerge$ less$ ?v1 ?v2))) (or (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ ?v2))))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_a_bool_fun_fun$) (?v2 A_llist$) (?v3 A_llist$)) (=> (member$ ?v0 (lset$ (lmerge$ ?v1 ?v2 ?v3))) (or (member$ ?v0 (lset$ ?v2)) (member$ ?v0 (lset$ ?v3))))) :named a4))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (less_eq$ (fun_app$ (sup$ ?v0) ?v1) ?v2) (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2)))) :named a5))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (less_eq$ (fun_app$ (sup$ ?v0) ?v1) ?v2) (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2)))) :named a6))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (= (less_eq$ (fun_app$ (sup$ ?v0) ?v1) ?v2) (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (member$ ?v0 (fun_app$ (sup$ ?v1) ?v2)) (or (member$ ?v0 ?v1) (member$ ?v0 ?v2)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (=> (not (member$ ?v0 ?v1)) (member$ ?v0 ?v2)) (member$ ?v0 (fun_app$ (sup$ ?v2) ?v1)))) :named a9))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$ (sup$ (fun_app$ (sup$ ?v0) ?v1)) ?v1) (fun_app$ (sup$ ?v0) ?v1))) :named a10))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$ (sup$ ?v0) (fun_app$ (sup$ ?v0) ?v1)) (fun_app$ (sup$ ?v0) ?v1))) :named a11))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$ (sup$ ?v0) (fun_app$ (sup$ ?v0) ?v1)) (fun_app$ (sup$ ?v0) ?v1))) :named a12))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$ (sup$ ?v0) ?v0) ?v0) :pattern ((sup$ ?v0)))) :named a13))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$ (sup$ ?v0) ?v0) ?v0) :pattern ((sup$ ?v0)))) :named a14))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))) (less_eq$ ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a16))
(check-sat)
;(get-unsat-core)
