; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 301
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun uu$ () A_llist_a_llist_fun$)
(declare-fun ys$ () A_llist$)
(declare-fun uua$ (A$) A_bool_fun$)
(declare-fun uub$ (A_llist_a_llist_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun uuc$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun less$ () A_a_bool_fun_fun$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lmerge$ (A_a_bool_fun_fun$) A_llist_a_llist_a_llist_fun_fun$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_a_llist_a_llist_fun_fun$ A_llist$) A_llist_a_llist_fun$)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$d (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$e (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$f (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun lessThan$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun monotone$ (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$) Bool)
(declare-fun lexordp_eq$ (A_a_bool_fun_fun$ A_list$ A_list$) Bool)
(declare-fun greaterThan$ (A_a_bool_fun_fun$ A$) A_set$)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uu$ ?v0) (fun_app$ (fun_app$a (lmerge$ less$) ?v0) ys$)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$b (uua$ ?v0) ?v1) (fun_app$b (fun_app$c less$ ?v1) ?v0)) :pattern ((fun_app$b (uua$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$d (uub$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$d (uub$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$ (uuc$ ?v0) ?v1) ?v0) :pattern ((fun_app$ (uuc$ ?v0) ?v1)))) :named a3))
(assert (! (not (monotone$ lprefix$ lprefix$ uu$)) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$b (fun_app$c less$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$b (fun_app$c less$ ?v0) ?v2))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (= ?v0 ?v1) (fun_app$b (fun_app$c less$ ?v1) ?v2)) (fun_app$b (fun_app$c less$ ?v0) ?v2))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (fun_app$e (fun_app$f lprefix$ ?v0) ?v1) (fun_app$e (fun_app$f lprefix$ ?v2) ?v3)) (fun_app$e (fun_app$f lprefix$ (fun_app$ (fun_app$a (lmerge$ less$) ?v0) ?v2)) (fun_app$ (fun_app$a (lmerge$ less$) ?v1) ?v3)))) :named a7))
(assert (! (forall ((?v0 A$)) (= (lessThan$ less$ ?v0) (collect$ (uua$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A$)) (! (= (greaterThan$ less$ ?v0) (collect$ (fun_app$c less$ ?v0))) :pattern ((greaterThan$ less$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$) (?v4 A_a_bool_fun_fun$)) (=> (and (fun_app$e (fun_app$f lprefix$ ?v0) ?v1) (fun_app$e (fun_app$f lprefix$ ?v2) ?v3)) (fun_app$e (fun_app$f lprefix$ (fun_app$ (fun_app$a (lmerge$ ?v4) ?v0) ?v2)) (fun_app$ (fun_app$a (lmerge$ ?v4) ?v1) ?v3)))) :named a10))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_llist_fun$)) (=> (and (monotone$ ?v0 lprefix$ ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$ ?v2 lprefix$ (fun_app$d (uub$ ?v1) ?v3)))) :named a11))
(assert (! (forall ((?v0 A_llist$)) (fun_app$e (fun_app$f lprefix$ ?v0) ?v0)) :named a12))
(assert (! (forall ((?v0 A_llist$)) (fun_app$e (fun_app$f lprefix$ ?v0) ?v0)) :named a13))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$)) (monotone$ ?v0 lprefix$ (uuc$ ?v1))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (fun_app$ (fun_app$a (lmerge$ less$) ?v0) ?v1) lNil$) (or (= ?v0 lNil$) (= ?v1 lNil$)))) :named a15))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist_a_llist_fun$) (?v4 A_llist_a_llist_bool_fun_fun$)) (=> (and (forall ((?v5 A_llist$)) (= (fun_app$ ?v0 ?v5) (ite (fun_app$e (fun_app$f lprefix$ ?v5) ?v1) ?v2 (fun_app$ ?v3 ?v5)))) (and (forall ((?v5 A_llist$) (?v6 A_llist$)) (=> (and (fun_app$e (fun_app$f lprefix$ ?v5) ?v6) (not (fun_app$e (fun_app$f lprefix$ ?v5) ?v1))) (fun_app$e (fun_app$f ?v4 (fun_app$ ?v3 ?v5)) (fun_app$ ?v3 ?v6)))) (and (forall ((?v5 A_llist$)) (=> (not (fun_app$e (fun_app$f lprefix$ ?v5) ?v1)) (fun_app$e (fun_app$f ?v4 ?v2) (fun_app$ ?v3 ?v5)))) (fun_app$e (fun_app$f ?v4 ?v2) ?v2)))) (monotone$ lprefix$ ?v4 ?v0))) :named a16))
(assert (! (forall ((?v0 A_list$)) (lexordp_eq$ less$ ?v0 ?v0)) :named a17))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$ (fun_app$a (lmerge$ less$) (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (ite (fun_app$b (fun_app$c less$ ?v0) ?v2) (lCons$ ?v0 (fun_app$ (fun_app$a (lmerge$ less$) ?v1) (lCons$ ?v2 ?v3))) (ite (fun_app$b (fun_app$c less$ ?v2) ?v0) (lCons$ ?v2 (fun_app$ (fun_app$a (lmerge$ less$) (lCons$ ?v0 ?v1)) ?v3)) (lCons$ ?v2 (fun_app$ (fun_app$a (lmerge$ less$) ?v1) ?v3))))) :pattern ((fun_app$ (fun_app$a (lmerge$ less$) (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))) :named a18))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (lnull$ ?v0) (lnull$ ?v1)) (lnull$ (fun_app$ (fun_app$a (lmerge$ less$) ?v0) ?v1)))) :named a19))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) (not (lnull$ (fun_app$ (fun_app$a (lmerge$ less$) ?v0) ?v1))))) :named a20))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ (fun_app$ (fun_app$a (lmerge$ less$) ?v1) ?v2))) (or (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ ?v2))))) :named a21))
(check-sat)
;(get-unsat-core)
