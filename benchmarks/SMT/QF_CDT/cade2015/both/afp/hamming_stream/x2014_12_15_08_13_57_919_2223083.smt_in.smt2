; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 630
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-codatatypes () ((Nat_llist$ (lNil$) (lCons$ (lhd$ Nat$) (ltl$ Nat_llist$)))))
(declare-datatypes () ((Num$ (one$) (bit0$ (select$ Num$)) (bit1$ (selecta$ Num$)))))
(declare-fun n$ () Nat$)
(declare-fun p$ () Nat$)
(declare-fun n$a () Nat$)
(declare-fun na$ () Nat$)
(declare-fun dvd$ (Nat$ Nat$) Bool)
(declare-fun less$ (Nat$ Nat$) Bool)
(declare-fun lset$ (Nat_llist$) Nat_set$)
(declare-fun one$a () Nat$)
(declare-fun lnull$ (Nat_llist$) Bool)
(declare-fun prime$ (Nat$) Bool)
(declare-fun times$ (Nat$ Nat$) Nat$)
(declare-fun member$ (Nat$ Nat_set$) Bool)
(declare-fun smooth$ (Nat$) Bool)
(declare-fun hamming$ () Nat_llist$)
(declare-fun lmember$ (Nat$ Nat_llist$) Bool)
(declare-fun lsorted$ (Nat_llist$) Bool)
(declare-fun numeral$ (Num$) Nat$)
(declare-fun ldistinct$ (Nat_llist$) Bool)
(assert (! (not (member$ na$ (lset$ hamming$))) :named a0))
(assert (! (or (= p$ (numeral$ (bit0$ one$))) (or (= p$ (numeral$ (bit1$ one$))) (= p$ (numeral$ (bit1$ (bit0$ one$)))))) :named a1))
(assert (! (smooth$ n$) :named a2))
(assert (! (smooth$ na$) :named a3))
(assert (! (prime$ p$) :named a4))
(assert (! (member$ n$a (lset$ hamming$)) :named a5))
(assert (! (dvd$ p$ na$) :named a6))
(assert (! (forall ((?v0 Nat$)) (=> (and (less$ ?v0 na$) (smooth$ ?v0)) (member$ ?v0 (lset$ hamming$)))) :named a7))
(assert (! (= na$ (times$ p$ n$a)) :named a8))
(assert (! (=> (forall ((?v0 Nat$)) (=> (= na$ (times$ p$ ?v0)) false)) false) :named a9))
(assert (! (less$ one$a na$) :named a10))
(assert (! (less$ n$a na$) :named a11))
(assert (! (= (= hamming$ lNil$) false) :named a12))
(assert (! (exists ((?v0 Nat$)) (and (prime$ ?v0) (dvd$ ?v0 na$))) :named a13))
(assert (! (ldistinct$ hamming$) :named a14))
(assert (! (lsorted$ hamming$) :named a15))
(assert (! (not (lnull$ hamming$)) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_llist$)) (= (member$ ?v0 (lset$ ?v1)) (lmember$ ?v0 ?v1))) :named a17))
(check-sat)
;(get-unsat-core)
