; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 481
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Unit$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Nat_llist_nat_llist_fun$ 0)
(declare-codatatypes () ((Nat_llist$ (lNil$) (lCons$ (lhd$ Nat$) (ltl$ Nat_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun one$ () Nat$)
(declare-fun lset$ (Nat_llist$) Nat_set$)
(declare-fun ldrop$ (Enat$) Nat_llist_nat_llist_fun$)
(declare-fun lnull$ (Nat_llist$) Bool)
(declare-fun unity$ () Unit$)
(declare-fun ldropn$ (Nat$) Nat_llist_nat_llist_fun$)
(declare-fun lmerge$ (Nat_llist$ Nat_llist$) Nat_llist$)
(declare-fun atLeast$ (Nat$) Nat_set$)
(declare-fun fun_app$ (Nat_llist_nat_llist_fun$ Nat_llist$) Nat_llist$)
(declare-fun hamming$ () Nat_llist$)
(declare-fun less_eq$ (Nat_set$ Nat_set$) Bool)
(declare-fun lfinite$ (Nat_llist$) Bool)
(declare-fun lsorted$ (Nat_llist$) Bool)
(declare-fun hamming$a (Unit$) Nat_llist$)
(declare-fun ldistinct$ (Nat_llist$) Bool)
(assert (! (not (lsorted$ hamming$)) :named a0))
(assert (! (and (lsorted$ hamming$) (and (ldistinct$ hamming$) (less_eq$ (lset$ hamming$) (atLeast$ one$)))) :named a1))
(assert (! (= (= hamming$ lNil$) false) :named a2))
(assert (! (not (lnull$ hamming$)) :named a3))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (lsorted$ ?v0) (lsorted$ ?v1)) (lsorted$ (lmerge$ ?v0 ?v1)))) :named a4))
(assert (! (not (lfinite$ hamming$)) :named a5))
(assert (! (= (lhd$ hamming$) one$) :named a6))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (lsorted$ ?v0) (and (ldistinct$ ?v0) (and (lsorted$ ?v1) (and (ldistinct$ ?v1) (= (lset$ ?v0) (lset$ ?v1)))))) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (lsorted$ ?v0) (and (lsorted$ ?v1) (and (ldistinct$ ?v0) (ldistinct$ ?v1)))) (ldistinct$ (lmerge$ ?v0 ?v1)))) :named a8))
(assert (! (= hamming$ (hamming$a unity$)) :named a9))
(assert (! (= (lsorted$ lNil$) true) :named a10))
(assert (! (lsorted$ lNil$) :named a11))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Enat$)) (=> (lsorted$ ?v0) (lsorted$ (fun_app$ (ldrop$ ?v1) ?v0)))) :named a12))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat$)) (=> (lsorted$ ?v0) (lsorted$ (fun_app$ (ldropn$ ?v1) ?v0)))) :named a13))
(assert (! (= (lfinite$ lNil$) true) :named a14))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$ (ldrop$ ?v0) lNil$) lNil$) :pattern ((ldrop$ ?v0)))) :named a15))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (ldropn$ ?v0) lNil$) lNil$) :pattern ((ldropn$ ?v0)))) :named a16))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (= (not (lnull$ (lmerge$ ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a17))
(check-sat)
;(get-unsat-core)
