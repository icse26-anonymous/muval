; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 417
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Unit$ 0)
(declare-sort Nat_llist_set$ 0)
(declare-sort Unit_bool_fun$ 0)
(declare-codatatypes () ((Nat_llist$ (lNil$) (lCons$ (lhd$ Nat$) (ltl$ Nat_llist$)))))
(declare-fun lnull$ (Nat_llist$) Bool)
(declare-fun unity$ () Unit$)
(declare-fun lmerge$ (Nat_llist$ Nat_llist$) Nat_llist$)
(declare-fun member$ (Nat_llist$ Nat_llist_set$) Bool)
(declare-fun default$ () Unit$)
(declare-fun fun_app$ (Unit_bool_fun$ Unit$) Bool)
(declare-fun hamming$ (Unit$) Nat_llist$)
(declare-fun hamming$a () Nat_llist$)
(assert (! (not (not (lnull$ (hamming$ unity$)))) :named a0))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a1))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a2))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a3))
(assert (! (= hamming$a (hamming$ unity$)) :named a4))
(assert (! (forall ((?v0 Bool)) (= (= ?v0 (= unity$ unity$)) ?v0)) :named a5))
(assert (! (forall ((?v0 Unit$)) (=> (=> (= ?v0 unity$) false) false)) :named a6))
(assert (! (forall ((?v0 Unit_bool_fun$) (?v1 Unit_bool_fun$)) (=> (=> (fun_app$ ?v0 unity$) (fun_app$ ?v1 unity$)) (forall ((?v2 Unit$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))))) :named a7))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a8))
(assert (! (forall ((?v0 Nat_llist_set$)) (=> (and (=> (forall ((?v1 Nat_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 Nat_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a9))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a10))
(assert (! (forall ((?v0 Nat_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)) :named a11))
(assert (! (= default$ unity$) :named a12))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (= (not (lnull$ (lmerge$ ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a13))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (= (lnull$ (lmerge$ ?v0 ?v1)) (or (lnull$ ?v0) (lnull$ ?v1)))) :named a14))
(check-sat)
;(get-unsat-core)
