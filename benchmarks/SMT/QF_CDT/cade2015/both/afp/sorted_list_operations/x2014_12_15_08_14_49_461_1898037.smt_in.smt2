; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 512
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun l1$ () A_list$)
(declare-fun l2$ () A_list$)
(declare-fun x1$ () A$)
(declare-fun x2$ () A$)
(declare-fun inf$ (A_set$ A_set$) A_set$)
(declare-fun l1a$ () A_list$)
(declare-fun l2b$ () A_list$)
(declare-fun set$ (A_list$) A_set$)
(declare-fun less$ (A$ A$) Bool)
(declare-fun insert$ (A$ A_set$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun sorted$ (A_list$) Bool)
(declare-fun less_eq$ (A$ A$) Bool)
(declare-fun distinct$ (A_list$) Bool)
(declare-fun inter_sorted$ (A_list$ A_list$) A_list$)
(assert (! (not false) :named a0))
(assert (! (not (less$ x1$ x2$)) :named a1))
(assert (! (not (= x1$ x2$)) :named a2))
(assert (! (forall ((?v0 A$)) (=> (member$ ?v0 (set$ l2b$)) (less_eq$ x2$ ?v0))) :named a3))
(assert (! (not (member$ x2$ (set$ l2b$))) :named a4))
(assert (! (forall ((?v0 A$)) (=> (member$ ?v0 (set$ l1a$)) (less_eq$ x1$ ?v0))) :named a5))
(assert (! (distinct$ (inter_sorted$ (cons$ x1$ l1a$) l2b$)) :named a6))
(assert (! (sorted$ (inter_sorted$ (cons$ x1$ l1a$) l2b$)) :named a7))
(assert (! (= (set$ (inter_sorted$ (cons$ x1$ l1a$) l2b$)) (inf$ (insert$ x1$ (set$ l1a$)) (set$ l2b$))) :named a8))
(assert (! (member$ x2$ (set$ l1a$)) :named a9))
(assert (! (not (= x1$ x2$)) :named a10))
(assert (! (and (distinct$ l1$) (sorted$ l1$)) :named a11))
(assert (! (and (distinct$ l2$) (sorted$ l2$)) :named a12))
(assert (! (not (less$ x1$ x2$)) :named a13))
(assert (! (and (distinct$ (cons$ x1$ l1a$)) (sorted$ (cons$ x1$ l1a$))) :named a14))
(assert (! (and (distinct$ (cons$ x2$ l2b$)) (sorted$ (cons$ x2$ l2b$))) :named a15))
(assert (! (and (distinct$ l1a$) (sorted$ l1a$)) :named a16))
(assert (! (and (distinct$ l2b$) (sorted$ l2b$)) :named a17))
(assert (! (not (member$ x1$ (set$ l1a$))) :named a18))
(assert (! (not (member$ x2$ (set$ l2b$))) :named a19))
(assert (! (less$ x2$ x1$) :named a20))
(assert (! (forall ((?v0 A$)) (=> (member$ ?v0 (set$ l1a$)) (less_eq$ x1$ ?v0))) :named a21))
(assert (! (=> (and (distinct$ l2b$) (sorted$ l2b$)) (and (distinct$ (inter_sorted$ (cons$ x1$ l1a$) l2b$)) (and (sorted$ (inter_sorted$ (cons$ x1$ l1a$) l2b$)) (= (set$ (inter_sorted$ (cons$ x1$ l1a$) l2b$)) (inf$ (set$ (cons$ x1$ l1a$)) (set$ l2b$)))))) :named a22))
(assert (! (forall ((?v0 A$)) (=> (member$ ?v0 (set$ l2b$)) (less_eq$ x2$ ?v0))) :named a23))
(assert (! (forall ((?v0 A_list$)) (=> (and (distinct$ ?v0) (sorted$ ?v0)) (and (distinct$ (inter_sorted$ l1a$ ?v0)) (and (sorted$ (inter_sorted$ l1a$ ?v0)) (= (set$ (inter_sorted$ l1a$ ?v0)) (inf$ (set$ l1a$) (set$ ?v0))))))) :named a24))
(assert (! (and (distinct$ (inter_sorted$ (cons$ x1$ l1a$) l2b$)) (and (sorted$ (inter_sorted$ (cons$ x1$ l1a$) l2b$)) (= (set$ (inter_sorted$ (cons$ x1$ l1a$) l2b$)) (inf$ (set$ (cons$ x1$ l1a$)) (set$ l2b$))))) :named a25))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (! (= (inter_sorted$ (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (ite (less$ ?v0 ?v2) (inter_sorted$ ?v1 (cons$ ?v2 ?v3)) (ite (= ?v0 ?v2) (cons$ ?v0 (inter_sorted$ ?v1 ?v3)) (inter_sorted$ (cons$ ?v0 ?v1) ?v3)))) :pattern ((inter_sorted$ (cons$ ?v0 ?v1) (cons$ ?v2 ?v3))))) :named a26))
(check-sat)
;(get-unsat-core)
