; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 464
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun l1$ () A_list$)
(declare-fun l2$ () A_list$)
(declare-fun set$ (A_list$) A_set$)
(declare-fun minus$ (A_set$ A_set$) A_set$)
(declare-fun union$ (A_list$ A_list$) A_list$)
(declare-fun finite$ (A_set$) Bool)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun sorted$ (A_list$) Bool)
(declare-fun member$a (A_list$ A$) Bool)
(declare-fun distinct$ (A_list$) Bool)
(declare-fun diff_sorted$ (A_list$ A_list$) A_list$)
(declare-fun mergesort_remdups$ (A_list$) A_list$)
(assert (! (not (and (distinct$ (diff_sorted$ l1$ l2$)) (and (sorted$ (diff_sorted$ l1$ l2$)) (= (set$ (diff_sorted$ l1$ l2$)) (minus$ (set$ l1$) (set$ l2$)))))) :named a0))
(assert (! (and (distinct$ l1$) (sorted$ l1$)) :named a1))
(assert (! (and (distinct$ l2$) (sorted$ l2$)) :named a2))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (sorted$ ?v0) (and (distinct$ ?v0) (and (sorted$ ?v1) (and (distinct$ ?v1) (= (set$ ?v0) (set$ ?v1)))))) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (member$ ?v0 (minus$ ?v1 ?v2)) (and (member$ ?v0 ?v1) (not (member$ ?v0 ?v2))))) :named a4))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (minus$ (minus$ ?v0 ?v1) ?v1) (minus$ ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 ?v1) (not (member$ ?v0 ?v2))) (member$ ?v0 (minus$ ?v1 ?v2)))) :named a6))
(assert (! (forall ((?v0 A_list$)) (and (distinct$ (mergesort_remdups$ ?v0)) (and (sorted$ (mergesort_remdups$ ?v0)) (= (set$ (mergesort_remdups$ ?v0)) (set$ ?v0))))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 (minus$ ?v1 ?v2)) (=> (and (member$ ?v0 ?v1) (not (member$ ?v0 ?v2))) false)) false)) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 (minus$ ?v1 ?v2)) (member$ ?v0 ?v2)) false)) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (member$ ?v0 (minus$ ?v1 ?v2)) (member$ ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (distinct$ (union$ ?v0 ?v1)) (distinct$ ?v1))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (= (member$ ?v0 (set$ ?v1)) (member$a ?v1 ?v0))) :named a12))
(assert (! (forall ((?v0 A_set$)) (=> (finite$ ?v0) (exists ((?v1 A_list$)) (and (and (= (set$ ?v1) ?v0) (and (sorted$ ?v1) (distinct$ ?v1))) (forall ((?v2 A_list$)) (=> (and (= (set$ ?v2) ?v0) (and (sorted$ ?v2) (distinct$ ?v2))) (= ?v2 ?v1))))))) :named a13))
(check-sat)
;(get-unsat-core)
