; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 481
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_a_a_prod_prod_set$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))
  (A_list_a_prod$ (pair$ (fst$ A_list$) (snd$ A$)))
  (A_list_a_prod_list$ (nil$a) (cons$a (hd$a A_list_a_prod$) (tl$a A_list_a_prod_list$)))
  (A_a_prod$ (pair$a (fst$a A$) (snd$a A$)))
  (A_a_a_prod_prod$ (pair$b (fst$b A$) (snd$b A_a_prod$)))
  (A_a_a_prod_prod_list$ (nil$b) (cons$b (hd$b A_a_a_prod_prod$) (tl$b A_a_a_prod_prod_list$)))
  (A_a_list_prod$ (pair$c (fst$c A$) (snd$c A_list$)))
  (A_a_list_prod_list$ (nil$c) (cons$c (hd$c A_a_list_prod$) (tl$c A_a_list_prod_list$)))
  (A_a_prod_list$ (nil$d) (cons$d (hd$d A_a_prod$) (tl$d A_a_prod_list$)))
  (A_a_prod_list_list$ (nil$e) (cons$e (hd$e A_a_prod_list$) (tl$e A_a_prod_list_list$)))
  (A_list_list$ (nil$f) (cons$f (hd$f A_list$) (tl$f A_list_list$)))
  (A_list_list_list$ (nil$g) (cons$g (hd$g A_list_list$) (tl$g A_list_list_list$)))
  (A_list_a_prod_list_list$ (nil$h) (cons$h (hd$h A_list_a_prod_list$) (tl$h A_list_a_prod_list_list$)))
  (A_a_a_prod_prod_list_list$ (nil$i) (cons$i (hd$i A_a_a_prod_prod_list$) (tl$i A_a_a_prod_prod_list_list$)))
  (A_a_list_prod_list_list$ (nil$j) (cons$j (hd$j A_a_list_prod_list$) (tl$j A_a_list_prod_list_list$)))
  (A_a_prod_list_list_list$ (nil$k) (cons$k (hd$k A_a_prod_list_list$) (tl$k A_a_prod_list_list_list$)))
  (A_list_list_list_list$ (nil$l) (cons$l (hd$l A_list_list_list$) (tl$l A_list_list_list_list$)))
  (A_list_a_list_prod$ (pair$d (fst$d A_list$) (snd$d A_list$)))
  (A_list_a_list_prod_list$ (nil$m) (cons$m (hd$m A_list_a_list_prod$) (tl$m A_list_a_list_prod_list$)))
  (A_a_prod_a_prod$ (pair$e (fst$e A_a_prod$) (snd$e A$)))
  (A_a_prod_a_prod_list$ (nil$n) (cons$n (hd$n A_a_prod_a_prod$) (tl$n A_a_prod_a_prod_list$)))
  (A_list_a_a_prod_prod$ (pair$f (fst$f A_list$) (snd$f A_a_prod$)))
  (A_list_a_a_prod_prod_list$ (nil$o) (cons$o (hd$o A_list_a_a_prod_prod$) (tl$o A_list_a_a_prod_prod_list$)))
  (A_a_prod_a_list_prod$ (pair$g (fst$g A_a_prod$) (snd$g A_list$)))
  (A_a_prod_a_list_prod_list$ (nil$p) (cons$p (hd$p A_a_prod_a_list_prod$) (tl$p A_a_prod_a_list_prod_list$)))
  (A_a_prod_a_a_prod_prod$ (pair$h (fst$h A_a_prod$) (snd$h A_a_prod$)))
  (A_a_prod_a_a_prod_prod_list$ (nil$q) (cons$q (hd$q A_a_prod_a_a_prod_prod$) (tl$q A_a_prod_a_a_prod_prod_list$)))
  (A_a_list_list_prod$ (pair$i (fst$i A$) (snd$i A_list_list$)))
  (A_a_list_list_prod_list$ (nil$r) (cons$r (hd$r A_a_list_list_prod$) (tl$r A_a_list_list_prod_list$)))))
(declare-fun l1$ () A_list$)
(declare-fun l2$ () A_list$)
(declare-fun x1$ () A$)
(declare-fun x2$ () A$)
(declare-fun l1a$ () A_list$)
(declare-fun l2a$ () A_list$)
(declare-fun l2b$ () A_list$)
(declare-fun set$ (A_a_a_prod_prod_list$) A_a_a_prod_prod_set$)
(declare-fun set$a (A_a_prod_list$) A_a_prod_set$)
(declare-fun set$b (A_list$) A_set$)
(declare-fun minus$ (A_set$ A_set$) A_set$)
(declare-fun union$ (A_list_a_prod_list$ A_list_a_prod_list$) A_list_a_prod_list$)
(declare-fun insert$ (A_list_a_prod$ A_list_a_prod_list$) A_list_a_prod_list$)
(declare-fun sorted$ (A_list$) Bool)
(declare-fun union$a (A_a_a_prod_prod_list$ A_a_a_prod_prod_list$) A_a_a_prod_prod_list$)
(declare-fun union$b (A_a_list_prod_list$ A_a_list_prod_list$) A_a_list_prod_list$)
(declare-fun union$c (A_a_prod_list_list$ A_a_prod_list_list$) A_a_prod_list_list$)
(declare-fun union$d (A_list_list_list$ A_list_list_list$) A_list_list_list$)
(declare-fun union$e (A_list_list$ A_list_list$) A_list_list$)
(declare-fun union$f (A_a_prod_list$ A_a_prod_list$) A_a_prod_list$)
(declare-fun union$g (A_list$ A_list$) A_list$)
(declare-fun insert$a (A_a_a_prod_prod$ A_a_a_prod_prod_list$) A_a_a_prod_prod_list$)
(declare-fun insert$b (A_a_list_prod$ A_a_list_prod_list$) A_a_list_prod_list$)
(declare-fun insert$c (A_a_prod_list$ A_a_prod_list_list$) A_a_prod_list_list$)
(declare-fun insert$d (A_list_list$ A_list_list_list$) A_list_list_list$)
(declare-fun insert$e (A_list$ A_list_list$) A_list_list$)
(declare-fun insert$f (A_a_prod$ A_a_prod_list$) A_a_prod_list$)
(declare-fun insert$g (A$ A_list$) A_list$)
(declare-fun n_lists$ (Nat$ A_list_a_prod_list$) A_list_a_prod_list_list$)
(declare-fun product$ (A_list$ A_list$) A_a_prod_list$)
(declare-fun rotate1$ (A_list_a_prod_list$) A_list_a_prod_list$)
(declare-fun sorted$a (A_a_a_prod_prod_list$) Bool)
(declare-fun sorted$b (A_a_prod_list$) Bool)
(declare-fun distinct$ (A_list$) Bool)
(declare-fun n_lists$a (Nat$ A_a_a_prod_prod_list$) A_a_a_prod_prod_list_list$)
(declare-fun n_lists$b (Nat$ A_a_list_prod_list$) A_a_list_prod_list_list$)
(declare-fun n_lists$c (Nat$ A_a_prod_list_list$) A_a_prod_list_list_list$)
(declare-fun n_lists$d (Nat$ A_list_list_list$) A_list_list_list_list$)
(declare-fun n_lists$e (Nat$ A_list_list$) A_list_list_list$)
(declare-fun n_lists$f (Nat$ A_a_prod_list$) A_a_prod_list_list$)
(declare-fun n_lists$g (Nat$ A_list$) A_list_list$)
(declare-fun product$a (A_list$ A_list_list$) A_a_list_prod_list$)
(declare-fun product$b (A_list_list$ A_list$) A_list_a_prod_list$)
(declare-fun product$c (A_list$ A_a_prod_list$) A_a_a_prod_prod_list$)
(declare-fun product$d (A_list_list$ A_list_list$) A_list_a_list_prod_list$)
(declare-fun product$e (A_a_prod_list$ A_list$) A_a_prod_a_prod_list$)
(declare-fun product$f (A_list_list$ A_a_prod_list$) A_list_a_a_prod_prod_list$)
(declare-fun product$g (A_a_prod_list$ A_list_list$) A_a_prod_a_list_prod_list$)
(declare-fun product$h (A_a_prod_list$ A_a_prod_list$) A_a_prod_a_a_prod_prod_list$)
(declare-fun product$i (A_list$ A_list_list_list$) A_a_list_list_prod_list$)
(declare-fun rotate1$a (A_a_a_prod_prod_list$) A_a_a_prod_prod_list$)
(declare-fun rotate1$b (A_a_list_prod_list$) A_a_list_prod_list$)
(declare-fun rotate1$c (A_a_prod_list_list$) A_a_prod_list_list$)
(declare-fun rotate1$d (A_list_list_list$) A_list_list_list$)
(declare-fun rotate1$e (A_list_list$) A_list_list$)
(declare-fun rotate1$f (A_a_prod_list$) A_a_prod_list$)
(declare-fun rotate1$g (A_list$) A_list$)
(declare-fun distinct$a (A_list_a_prod_list$) Bool)
(declare-fun distinct$b (A_a_a_prod_prod_list$) Bool)
(declare-fun distinct$c (A_a_list_prod_list$) Bool)
(declare-fun distinct$d (A_a_prod_list_list$) Bool)
(declare-fun distinct$e (A_list_list_list$) Bool)
(declare-fun distinct$f (A_list_list$) Bool)
(declare-fun distinct$g (A_a_prod_list$) Bool)
(declare-fun distinct$h (A_list_a_prod_list_list$) Bool)
(declare-fun distinct$i (A_a_a_prod_prod_list_list$) Bool)
(declare-fun distinct$j (A_a_list_prod_list_list$) Bool)
(declare-fun distinct$k (A_a_prod_list_list_list$) Bool)
(declare-fun distinct$l (A_list_list_list_list$) Bool)
(declare-fun distinct$m (A_list_a_list_prod_list$) Bool)
(declare-fun distinct$n (A_a_prod_a_prod_list$) Bool)
(declare-fun distinct$o (A_list_a_a_prod_prod_list$) Bool)
(declare-fun distinct$p (A_a_prod_a_list_prod_list$) Bool)
(declare-fun distinct$q (A_a_prod_a_a_prod_prod_list$) Bool)
(declare-fun distinct$r (A_a_list_list_prod_list$) Bool)
(declare-fun diff_sorted$ (A_list$ A_list$) A_list$)
(declare-fun mergesort_remdups$ (A_a_a_prod_prod_list$) A_a_a_prod_prod_list$)
(declare-fun mergesort_remdups$a (A_a_prod_list$) A_a_prod_list$)
(declare-fun mergesort_remdups$b (A_list$) A_list$)
(assert (! (not (and (distinct$ l2b$) (sorted$ l2b$))) :named a0))
(assert (! (and (distinct$ l1$) (sorted$ l1$)) :named a1))
(assert (! (and (distinct$ l2$) (sorted$ l2$)) :named a2))
(assert (! (and (distinct$ l2a$) (sorted$ l2a$)) :named a3))
(assert (! (and (distinct$ (cons$ x2$ l2b$)) (sorted$ (cons$ x2$ l2b$))) :named a4))
(assert (! (and (distinct$ l1a$) (sorted$ l1a$)) :named a5))
(assert (! (and (distinct$ (cons$ x1$ l1a$)) (sorted$ (cons$ x1$ l1a$))) :named a6))
(assert (! (forall ((?v0 A_list_a_prod_list$) (?v1 A_list_a_prod_list$)) (= (distinct$a (union$ ?v0 ?v1)) (distinct$a ?v1))) :named a7))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$) (?v1 A_a_a_prod_prod_list$)) (= (distinct$b (union$a ?v0 ?v1)) (distinct$b ?v1))) :named a8))
(assert (! (forall ((?v0 A_a_list_prod_list$) (?v1 A_a_list_prod_list$)) (= (distinct$c (union$b ?v0 ?v1)) (distinct$c ?v1))) :named a9))
(assert (! (forall ((?v0 A_a_prod_list_list$) (?v1 A_a_prod_list_list$)) (= (distinct$d (union$c ?v0 ?v1)) (distinct$d ?v1))) :named a10))
(assert (! (forall ((?v0 A_list_list_list$) (?v1 A_list_list_list$)) (= (distinct$e (union$d ?v0 ?v1)) (distinct$e ?v1))) :named a11))
(assert (! (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (= (distinct$f (union$e ?v0 ?v1)) (distinct$f ?v1))) :named a12))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 A_a_prod_list$)) (= (distinct$g (union$f ?v0 ?v1)) (distinct$g ?v1))) :named a13))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (distinct$ (union$g ?v0 ?v1)) (distinct$ ?v1))) :named a14))
(assert (! (forall ((?v0 A_list_a_prod$) (?v1 A_list_a_prod$) (?v2 A_list_a_prod_list$)) (! (= (distinct$a (cons$a ?v0 (cons$a ?v1 ?v2))) (and (not (= ?v0 ?v1)) (and (distinct$a (cons$a ?v0 ?v2)) (distinct$a (cons$a ?v1 ?v2))))) :pattern ((cons$a ?v0 (cons$a ?v1 ?v2))))) :named a15))
(assert (! (forall ((?v0 A_a_a_prod_prod$) (?v1 A_a_a_prod_prod$) (?v2 A_a_a_prod_prod_list$)) (! (= (distinct$b (cons$b ?v0 (cons$b ?v1 ?v2))) (and (not (= ?v0 ?v1)) (and (distinct$b (cons$b ?v0 ?v2)) (distinct$b (cons$b ?v1 ?v2))))) :pattern ((cons$b ?v0 (cons$b ?v1 ?v2))))) :named a16))
(assert (! (forall ((?v0 A_a_list_prod$) (?v1 A_a_list_prod$) (?v2 A_a_list_prod_list$)) (! (= (distinct$c (cons$c ?v0 (cons$c ?v1 ?v2))) (and (not (= ?v0 ?v1)) (and (distinct$c (cons$c ?v0 ?v2)) (distinct$c (cons$c ?v1 ?v2))))) :pattern ((cons$c ?v0 (cons$c ?v1 ?v2))))) :named a17))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 A_a_prod_list$) (?v2 A_a_prod_list_list$)) (! (= (distinct$d (cons$e ?v0 (cons$e ?v1 ?v2))) (and (not (= ?v0 ?v1)) (and (distinct$d (cons$e ?v0 ?v2)) (distinct$d (cons$e ?v1 ?v2))))) :pattern ((cons$e ?v0 (cons$e ?v1 ?v2))))) :named a18))
(assert (! (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list_list_list$)) (! (= (distinct$e (cons$g ?v0 (cons$g ?v1 ?v2))) (and (not (= ?v0 ?v1)) (and (distinct$e (cons$g ?v0 ?v2)) (distinct$e (cons$g ?v1 ?v2))))) :pattern ((cons$g ?v0 (cons$g ?v1 ?v2))))) :named a19))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list_list$)) (! (= (distinct$f (cons$f ?v0 (cons$f ?v1 ?v2))) (and (not (= ?v0 ?v1)) (and (distinct$f (cons$f ?v0 ?v2)) (distinct$f (cons$f ?v1 ?v2))))) :pattern ((cons$f ?v0 (cons$f ?v1 ?v2))))) :named a20))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod$) (?v2 A_a_prod_list$)) (! (= (distinct$g (cons$d ?v0 (cons$d ?v1 ?v2))) (and (not (= ?v0 ?v1)) (and (distinct$g (cons$d ?v0 ?v2)) (distinct$g (cons$d ?v1 ?v2))))) :pattern ((cons$d ?v0 (cons$d ?v1 ?v2))))) :named a21))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_list$)) (! (= (distinct$ (cons$ ?v0 (cons$ ?v1 ?v2))) (and (not (= ?v0 ?v1)) (and (distinct$ (cons$ ?v0 ?v2)) (distinct$ (cons$ ?v1 ?v2))))) :pattern ((cons$ ?v0 (cons$ ?v1 ?v2))))) :named a22))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$) (?v1 A_a_a_prod_prod_list$)) (=> (and (sorted$a ?v0) (and (distinct$b ?v0) (and (sorted$a ?v1) (and (distinct$b ?v1) (= (set$ ?v0) (set$ ?v1)))))) (= ?v0 ?v1))) :named a23))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 A_a_prod_list$)) (=> (and (sorted$b ?v0) (and (distinct$g ?v0) (and (sorted$b ?v1) (and (distinct$g ?v1) (= (set$a ?v0) (set$a ?v1)))))) (= ?v0 ?v1))) :named a24))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (sorted$ ?v0) (and (distinct$ ?v0) (and (sorted$ ?v1) (and (distinct$ ?v1) (= (set$b ?v0) (set$b ?v1)))))) (= ?v0 ?v1))) :named a25))
(assert (! (=> (and (distinct$ l2b$) (sorted$ l2b$)) (and (distinct$ (diff_sorted$ (cons$ x1$ l1a$) l2b$)) (and (sorted$ (diff_sorted$ (cons$ x1$ l1a$) l2b$)) (= (set$b (diff_sorted$ (cons$ x1$ l1a$) l2b$)) (minus$ (set$b (cons$ x1$ l1a$)) (set$b l2b$)))))) :named a26))
(assert (! (forall ((?v0 A_list_a_prod$) (?v1 A_list_a_prod_list$)) (= (distinct$a (insert$ ?v0 ?v1)) (distinct$a ?v1))) :named a27))
(assert (! (forall ((?v0 A_a_a_prod_prod$) (?v1 A_a_a_prod_prod_list$)) (= (distinct$b (insert$a ?v0 ?v1)) (distinct$b ?v1))) :named a28))
(assert (! (forall ((?v0 A_a_list_prod$) (?v1 A_a_list_prod_list$)) (= (distinct$c (insert$b ?v0 ?v1)) (distinct$c ?v1))) :named a29))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 A_a_prod_list_list$)) (= (distinct$d (insert$c ?v0 ?v1)) (distinct$d ?v1))) :named a30))
(assert (! (forall ((?v0 A_list_list$) (?v1 A_list_list_list$)) (= (distinct$e (insert$d ?v0 ?v1)) (distinct$e ?v1))) :named a31))
(assert (! (forall ((?v0 A_list$) (?v1 A_list_list$)) (= (distinct$f (insert$e ?v0 ?v1)) (distinct$f ?v1))) :named a32))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_list$)) (= (distinct$g (insert$f ?v0 ?v1)) (distinct$g ?v1))) :named a33))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (= (distinct$ (insert$g ?v0 ?v1)) (distinct$ ?v1))) :named a34))
(assert (! (forall ((?v0 A_list_a_prod_list$)) (= (distinct$a (rotate1$ ?v0)) (distinct$a ?v0))) :named a35))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$)) (= (distinct$b (rotate1$a ?v0)) (distinct$b ?v0))) :named a36))
(assert (! (forall ((?v0 A_a_list_prod_list$)) (= (distinct$c (rotate1$b ?v0)) (distinct$c ?v0))) :named a37))
(assert (! (forall ((?v0 A_a_prod_list_list$)) (= (distinct$d (rotate1$c ?v0)) (distinct$d ?v0))) :named a38))
(assert (! (forall ((?v0 A_list_list_list$)) (= (distinct$e (rotate1$d ?v0)) (distinct$e ?v0))) :named a39))
(assert (! (forall ((?v0 A_list_list$)) (= (distinct$f (rotate1$e ?v0)) (distinct$f ?v0))) :named a40))
(assert (! (forall ((?v0 A_a_prod_list$)) (= (distinct$g (rotate1$f ?v0)) (distinct$g ?v0))) :named a41))
(assert (! (forall ((?v0 A_list$)) (= (distinct$ (rotate1$g ?v0)) (distinct$ ?v0))) :named a42))
(assert (! (forall ((?v0 A_list_a_prod_list$) (?v1 Nat$)) (=> (distinct$a ?v0) (distinct$h (n_lists$ ?v1 ?v0)))) :named a43))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$) (?v1 Nat$)) (=> (distinct$b ?v0) (distinct$i (n_lists$a ?v1 ?v0)))) :named a44))
(assert (! (forall ((?v0 A_a_list_prod_list$) (?v1 Nat$)) (=> (distinct$c ?v0) (distinct$j (n_lists$b ?v1 ?v0)))) :named a45))
(assert (! (forall ((?v0 A_a_prod_list_list$) (?v1 Nat$)) (=> (distinct$d ?v0) (distinct$k (n_lists$c ?v1 ?v0)))) :named a46))
(assert (! (forall ((?v0 A_list_list_list$) (?v1 Nat$)) (=> (distinct$e ?v0) (distinct$l (n_lists$d ?v1 ?v0)))) :named a47))
(assert (! (forall ((?v0 A_list_list$) (?v1 Nat$)) (=> (distinct$f ?v0) (distinct$e (n_lists$e ?v1 ?v0)))) :named a48))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 Nat$)) (=> (distinct$g ?v0) (distinct$d (n_lists$f ?v1 ?v0)))) :named a49))
(assert (! (forall ((?v0 A_list$) (?v1 Nat$)) (=> (distinct$ ?v0) (distinct$f (n_lists$g ?v1 ?v0)))) :named a50))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (distinct$ ?v0) (distinct$ ?v1)) (distinct$g (product$ ?v0 ?v1)))) :named a51))
(assert (! (forall ((?v0 A_list$) (?v1 A_list_list$)) (=> (and (distinct$ ?v0) (distinct$f ?v1)) (distinct$c (product$a ?v0 ?v1)))) :named a52))
(assert (! (forall ((?v0 A_list_list$) (?v1 A_list$)) (=> (and (distinct$f ?v0) (distinct$ ?v1)) (distinct$a (product$b ?v0 ?v1)))) :named a53))
(assert (! (forall ((?v0 A_list$) (?v1 A_a_prod_list$)) (=> (and (distinct$ ?v0) (distinct$g ?v1)) (distinct$b (product$c ?v0 ?v1)))) :named a54))
(assert (! (forall ((?v0 A_list_list$) (?v1 A_list_list$)) (=> (and (distinct$f ?v0) (distinct$f ?v1)) (distinct$m (product$d ?v0 ?v1)))) :named a55))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 A_list$)) (=> (and (distinct$g ?v0) (distinct$ ?v1)) (distinct$n (product$e ?v0 ?v1)))) :named a56))
(assert (! (forall ((?v0 A_list_list$) (?v1 A_a_prod_list$)) (=> (and (distinct$f ?v0) (distinct$g ?v1)) (distinct$o (product$f ?v0 ?v1)))) :named a57))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 A_list_list$)) (=> (and (distinct$g ?v0) (distinct$f ?v1)) (distinct$p (product$g ?v0 ?v1)))) :named a58))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 A_a_prod_list$)) (=> (and (distinct$g ?v0) (distinct$g ?v1)) (distinct$q (product$h ?v0 ?v1)))) :named a59))
(assert (! (forall ((?v0 A_list$) (?v1 A_list_list_list$)) (=> (and (distinct$ ?v0) (distinct$e ?v1)) (distinct$r (product$i ?v0 ?v1)))) :named a60))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$)) (and (distinct$b (mergesort_remdups$ ?v0)) (and (sorted$a (mergesort_remdups$ ?v0)) (= (set$ (mergesort_remdups$ ?v0)) (set$ ?v0))))) :named a61))
(assert (! (forall ((?v0 A_a_prod_list$)) (and (distinct$g (mergesort_remdups$a ?v0)) (and (sorted$b (mergesort_remdups$a ?v0)) (= (set$a (mergesort_remdups$a ?v0)) (set$a ?v0))))) :named a62))
(assert (! (forall ((?v0 A_list$)) (and (distinct$ (mergesort_remdups$b ?v0)) (and (sorted$ (mergesort_remdups$b ?v0)) (= (set$b (mergesort_remdups$b ?v0)) (set$b ?v0))))) :named a63))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_list$) (?v2 A_a_prod$) (?v3 A_a_prod_list$)) (= (= (cons$d ?v0 ?v1) (cons$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a64))
(assert (! (forall ((?v0 A_list$) (?v1 A_list_list$) (?v2 A_list$) (?v3 A_list_list$)) (= (= (cons$f ?v0 ?v1) (cons$f ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a65))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a66))
(check-sat)
;(get-unsat-core)
