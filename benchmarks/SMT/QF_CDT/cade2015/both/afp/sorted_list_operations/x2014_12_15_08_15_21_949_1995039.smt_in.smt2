; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 528
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun l1$ () A_list$)
(declare-fun l2$ () A_list$)
(declare-fun x1$ () A$)
(declare-fun x2$ () A$)
(declare-fun l1a$ () A_list$)
(declare-fun l2b$ () A_list$)
(declare-fun set$ (A_list$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun sorted$ (A_list$) Bool)
(declare-fun less_eq$ (A_set$ A_set$) Bool)
(declare-fun distinct$ (A_list$) Bool)
(declare-fun less_eq$a (A$ A$) Bool)
(declare-fun subset_sorted$ (A_list$ A_list$) Bool)
(assert (! (not (= (subset_sorted$ (cons$ x1$ l1a$) (cons$ x2$ l2b$)) (less_eq$ (set$ (cons$ x1$ l1a$)) (set$ (cons$ x2$ l2b$))))) :named a0))
(assert (! (not (member$ x1$ (set$ l1a$))) :named a1))
(assert (! (not (member$ x2$ (set$ l2b$))) :named a2))
(assert (! (= (subset_sorted$ (cons$ x1$ l1a$) l2b$) (less_eq$ (set$ (cons$ x1$ l1a$)) (set$ l2b$))) :named a3))
(assert (! (forall ((?v0 A$)) (=> (member$ ?v0 (set$ l2b$)) (less_eq$a x2$ ?v0))) :named a4))
(assert (! (forall ((?v0 A$)) (=> (member$ ?v0 (set$ l1a$)) (less_eq$a x1$ ?v0))) :named a5))
(assert (! (=> (and (distinct$ l2b$) (sorted$ l2b$)) (= (subset_sorted$ (cons$ x1$ l1a$) l2b$) (less_eq$ (set$ (cons$ x1$ l1a$)) (set$ l2b$)))) :named a6))
(assert (! (forall ((?v0 A_list$) (?v1 A$)) (less_eq$ (set$ ?v0) (set$ (cons$ ?v1 ?v0)))) :named a7))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))) (less_eq$ ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a10))
(assert (! (forall ((?v0 A_set$)) (less_eq$ ?v0 ?v0)) :named a11))
(assert (! (forall ((?v0 A$)) (less_eq$a ?v0 ?v0)) :named a12))
(assert (! (forall ((?v0 A_list$) (?v1 A_set$)) (= (less_eq$ (set$ ?v0) ?v1) (forall ((?v2 A$)) (=> (member$ ?v2 (set$ ?v0)) (member$ ?v2 ?v1))))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_list$)) (=> (member$ ?v0 (set$ (cons$ ?v1 ?v2))) (or (= ?v0 ?v1) (member$ ?v0 (set$ ?v2))))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (=> (and (member$ ?v0 (set$ ?v1)) (and (forall ((?v2 A_list$)) (=> (= ?v1 (cons$ ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_list$)) (=> (and (= ?v1 (cons$ ?v2 ?v3)) (member$ ?v0 (set$ ?v3))) false)))) false)) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A$)) (=> (member$ ?v0 (set$ ?v1)) (member$ ?v0 (set$ (cons$ ?v2 ?v1))))) :named a16))
(assert (! (and (distinct$ l1$) (sorted$ l1$)) :named a17))
(assert (! (and (distinct$ l2$) (sorted$ l2$)) :named a18))
(check-sat)
;(get-unsat-core)
