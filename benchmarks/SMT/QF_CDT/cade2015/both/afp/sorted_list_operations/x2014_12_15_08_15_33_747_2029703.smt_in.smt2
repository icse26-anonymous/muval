; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 570
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))
  (A_option$ (none$) (some$ (the$ A$)))))
(declare-fun l1$ () A_list$)
(declare-fun l2$ () A_list$)
(declare-fun set$ (A_list$) A_set$)
(declare-fun find$ (A_bool_fun$ A_list$) A_option$)
(declare-fun insert$ (A$ A_list$) A_list$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun rotate$ (Nat$ A_list$) A_list$)
(declare-fun sorted$ (A_list$) Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun listMem$ (A$ A_list$) Bool)
(declare-fun member$a (A_list$) A_bool_fun$)
(declare-fun rotate1$ (A_list$) A_list$)
(declare-fun distinct$ (A_list$) Bool)
(declare-fun list_ex1$ (A_bool_fun$ A_list$) Bool)
(declare-fun quicksort$ (A_list$) A_list$)
(declare-fun removeAll$ (A$ A_list$) A_list$)
(declare-fun mergesort_by_rel$ (A_a_bool_fun_fun$ A_list$) A_list$)
(assert (! (not (= (= l1$ l2$) (= (set$ l1$) (set$ l2$)))) :named a0))
(assert (! (and (distinct$ l1$) (sorted$ l1$)) :named a1))
(assert (! (and (distinct$ l2$) (sorted$ l2$)) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (= (member$ ?v0 (set$ ?v1)) (fun_app$ (member$a ?v1) ?v0))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (=> (member$ ?v0 (set$ ?v1)) (= (insert$ ?v0 ?v1) ?v1)) :pattern ((insert$ ?v0 ?v1)))) :named a4))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_list$)) (= (list_ex1$ ?v0 ?v1) (exists ((?v2 A$)) (and (and (member$ ?v2 (set$ ?v1)) (fun_app$ ?v0 ?v2)) (forall ((?v3 A$)) (=> (and (member$ ?v3 (set$ ?v1)) (fun_app$ ?v0 ?v3)) (= ?v3 ?v2))))))) :named a5))
(assert (! (forall ((?v0 A_list$)) (= (set$ (rotate1$ ?v0)) (set$ ?v0))) :named a6))
(assert (! (forall ((?v0 A_list$)) (= (set$ (quicksort$ ?v0)) (set$ ?v0))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (= (listMem$ ?v0 ?v1) (member$ ?v0 (set$ ?v1))) :pattern ((listMem$ ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (sorted$ ?v0) (and (distinct$ ?v0) (and (sorted$ ?v1) (and (distinct$ ?v1) (= (set$ ?v0) (set$ ?v1)))))) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (=> (not (member$ ?v0 (set$ ?v1))) (= (removeAll$ ?v0 ?v1) ?v1)) :pattern ((removeAll$ ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$)) (= (set$ (mergesort_by_rel$ ?v0 ?v1)) (set$ ?v1))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 A_list$)) (= (set$ (rotate$ ?v0 ?v1)) (set$ ?v1))) :named a12))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_bool_fun$) (?v3 A_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 (set$ ?v1)) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (find$ ?v2 ?v0) (find$ ?v3 ?v1)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 A_list$)) (= (distinct$ (rotate$ ?v0 ?v1)) (distinct$ ?v1))) :named a14))
(assert (! (forall ((?v0 A_list$)) (= (distinct$ (rotate1$ ?v0)) (distinct$ ?v0))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (= (distinct$ (insert$ ?v0 ?v1)) (distinct$ ?v1))) :named a16))
(check-sat)
;(get-unsat-core)
