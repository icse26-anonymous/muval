; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 567
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_set_a_set_fun$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun x$ () A$)
(declare-fun xs$ () A_list$)
(declare-fun bot$ () A_set$)
(declare-fun set$ (A_list$) A_set$)
(declare-fun minus$ (A_set$) A_set_a_set_fun$)
(declare-fun insert$ (A$ A_set$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun sorted$ (A_list$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_set_a_set_fun$ A_set$) A_set$)
(declare-fun distinct$ (A_list$) Bool)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun delete_sorted$ (A$ A_list$) A_list$)
(assert (! (not (and (distinct$ (delete_sorted$ x$ xs$)) (and (sorted$ (delete_sorted$ x$ xs$)) (= (set$ (delete_sorted$ x$ xs$)) (fun_app$ (minus$ (set$ xs$)) (insert$ x$ bot$)))))) :named a0))
(assert (! (sorted$ xs$) :named a1))
(assert (! (distinct$ xs$) :named a2))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (and (distinct$ ?v0) (sorted$ ?v0)) (and (distinct$ ?v1) (sorted$ ?v1))) (= (= ?v0 ?v1) (= (set$ ?v0) (set$ ?v1))))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (= (insert$ ?v0 (fun_app$ (minus$ ?v1) (insert$ ?v0 bot$))) (insert$ ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (member$ ?v0 ?v1) (= (fun_app$ (minus$ (insert$ ?v0 ?v2)) ?v1) (fun_app$ (minus$ ?v2) ?v1)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (not (member$ ?v0 ?v1)) (= (fun_app$ (minus$ ?v1) (insert$ ?v0 ?v2)) (fun_app$ (minus$ ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 A_set$)) (= (fun_app$ (minus$ ?v0) bot$) ?v0)) :named a7))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$ (minus$ ?v0) ?v0) bot$) :pattern ((minus$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_set$)) (= (fun_app$ (minus$ bot$) ?v0) bot$)) :named a9))
(assert (! (forall ((?v0 A$)) (member$ ?v0 (insert$ ?v0 bot$))) :named a10))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (sorted$ ?v0) (and (distinct$ ?v0) (and (sorted$ ?v1) (and (distinct$ ?v1) (= (set$ ?v0) (set$ ?v1)))))) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 A_set$) (?v1 A$) (?v2 A_set$)) (= (fun_app$ (minus$ ?v0) (insert$ ?v1 ?v2)) (fun_app$ (minus$ (fun_app$ (minus$ ?v0) (insert$ ?v1 bot$))) ?v2))) :named a12))
(assert (! (forall ((?v0 A_set$) (?v1 A$) (?v2 A_set$)) (= (fun_app$ (minus$ ?v0) (insert$ ?v1 ?v2)) (fun_app$ (minus$ (fun_app$ (minus$ ?v0) ?v2)) (insert$ ?v1 bot$)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (=> (member$ ?v0 ?v1) (= (insert$ ?v0 (fun_app$ (minus$ ?v1) (insert$ ?v0 bot$))) ?v1))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (=> (not (member$ ?v0 ?v1)) (= (fun_app$ (minus$ (insert$ ?v0 ?v1)) (insert$ ?v0 bot$)) ?v1))) :named a15))
(assert (! (forall ((?v0 A$)) (= (member$ ?v0 bot$) false)) :named a16))
(assert (! (forall ((?v0 A_bool_fun$)) (= (= bot$ (collect$ ?v0)) (forall ((?v1 A$)) (not (fun_app$a ?v0 ?v1))))) :named a17))
(assert (! (forall ((?v0 A_set$)) (= (forall ((?v1 A$)) (not (member$ ?v1 ?v0))) (= ?v0 bot$))) :named a18))
(assert (! (forall ((?v0 A_bool_fun$)) (= (= (collect$ ?v0) bot$) (forall ((?v1 A$)) (not (fun_app$a ?v0 ?v1))))) :named a19))
(check-sat)
;(get-unsat-core)
