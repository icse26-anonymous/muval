; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 554
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_list_bool_fun$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun x$ () A$)
(declare-fun xs$ () A_list$)
(declare-fun set$ (A_list$) A_set$)
(declare-fun insert$ (A$ A_list$) A_list$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun sorted$ (A_list$) Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun listMem$ (A$ A_list$) Bool)
(declare-fun member$a (A_list$) A_bool_fun$)
(declare-fun rotate1$ (A_list$) A_list$)
(declare-fun distinct$ (A_list$) Bool)
(declare-fun fun_app$a (A_list_bool_fun$ A_list$) Bool)
(declare-fun list_ex1$ (A_bool_fun$) A_list_bool_fun$)
(declare-fun quicksort$ (A_list$) A_list$)
(declare-fun removeAll$ (A$ A_list$) A_list$)
(declare-fun memb_sorted$ (A_list$) A_bool_fun$)
(declare-fun mergesort_remdups$ (A_list$) A_list$)
(assert (! (not (= (fun_app$ (memb_sorted$ xs$) x$) (member$ x$ (set$ xs$)))) :named a0))
(assert (! (sorted$ xs$) :named a1))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (and (distinct$ ?v0) (sorted$ ?v0)) (and (distinct$ ?v1) (sorted$ ?v1))) (= (= ?v0 ?v1) (= (set$ ?v0) (set$ ?v1))))) :named a2))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ (memb_sorted$ nil$) ?v0) false) :pattern ((fun_app$ (memb_sorted$ nil$) ?v0)))) :named a3))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (sorted$ ?v0) (and (distinct$ ?v0) (and (sorted$ ?v1) (and (distinct$ ?v1) (= (set$ ?v0) (set$ ?v1)))))) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (= (member$ ?v0 (set$ ?v1)) (fun_app$ (member$a ?v1) ?v0))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (=> (member$ ?v0 (set$ ?v1)) (= (insert$ ?v0 ?v1) ?v1)) :pattern ((insert$ ?v0 ?v1)))) :named a6))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_list$)) (= (fun_app$a (list_ex1$ ?v0) ?v1) (exists ((?v2 A$)) (and (and (member$ ?v2 (set$ ?v1)) (fun_app$ ?v0 ?v2)) (forall ((?v3 A$)) (=> (and (member$ ?v3 (set$ ?v1)) (fun_app$ ?v0 ?v3)) (= ?v3 ?v2))))))) :named a7))
(assert (! (forall ((?v0 A_list$)) (= (set$ (rotate1$ ?v0)) (set$ ?v0))) :named a8))
(assert (! (forall ((?v0 A_list$)) (= (set$ (quicksort$ ?v0)) (set$ ?v0))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (= (listMem$ ?v0 ?v1) (member$ ?v0 (set$ ?v1))) :pattern ((listMem$ ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (=> (not (member$ ?v0 (set$ ?v1))) (= (removeAll$ ?v0 ?v1) ?v1)) :pattern ((removeAll$ ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 A_list$)) (and (distinct$ (mergesort_remdups$ ?v0)) (and (sorted$ (mergesort_remdups$ ?v0)) (= (set$ (mergesort_remdups$ ?v0)) (set$ ?v0))))) :named a12))
(assert (! (forall ((?v0 A_list$)) (sorted$ (quicksort$ ?v0))) :named a13))
(assert (! (forall ((?v0 A_list$)) (= (= (rotate1$ ?v0) nil$) (= ?v0 nil$))) :named a14))
(assert (! (forall ((?v0 A_list$)) (= (distinct$ (rotate1$ ?v0)) (distinct$ ?v0))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (= (distinct$ (insert$ ?v0 ?v1)) (distinct$ ?v1))) :named a16))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$a (list_ex1$ ?v0) nil$) false) :pattern ((list_ex1$ ?v0)))) :named a17))
(assert (! (= (distinct$ nil$) true) :named a18))
(check-sat)
;(get-unsat-core)
