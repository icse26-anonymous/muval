; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 54
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort B_llist_set$ 0)
(declare-sort A_b_prod_set$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort A_a_b_prod_fun$ 0)
(declare-sort A_b_prod_a_fun$ 0)
(declare-sort A_b_prod_b_fun$ 0)
(declare-sort B_a_b_prod_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort A_b_prod_bool_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort B_stream_bool_fun$ 0)
(declare-sort A_b_prod_llist_set$ 0)
(declare-sort A_b_prod_stream_set$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-sort A_b_prod_llist_bool_fun$ 0)
(declare-sort A_b_prod_stream_bool_fun$ 0)
(declare-sort A_b_prod_llist_a_llist_fun$ 0)
(declare-sort A_b_prod_llist_b_llist_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_llist_bool_fun_fun$ 0)
(declare-sort B_llist_a_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-sort A_stream_a_stream_bool_fun_fun$ 0)
(declare-sort A_stream_b_stream_bool_fun_fun$ 0)
(declare-sort B_stream_a_stream_bool_fun_fun$ 0)
(declare-sort B_stream_b_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_a_llist_prod_set$ 0)
(declare-sort A_b_prod_llist_b_llist_prod_set$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_set$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_set$ 0)
(declare-sort A_b_prod_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_b_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_b_prod_llist_bool_fun_fun$ 0)
(declare-sort B_llist_a_b_prod_llist_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_a_llist_prod_bool_fun$ 0)
(declare-sort A_b_prod_llist_b_llist_prod_bool_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_bool_fun_fun$ 0)
(declare-sort A_stream_a_b_prod_stream_bool_fun_fun$ 0)
(declare-sort B_stream_a_b_prod_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_a_llist_prod_stream_set$ 0)
(declare-sort A_b_prod_llist_b_llist_prod_stream_set$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_bool_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_bool_fun$ 0)
(declare-sort A_b_prod_llist_a_llist_prod_a_llist_fun$ 0)
(declare-sort A_b_prod_llist_b_llist_prod_b_llist_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_stream_set$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_stream_set$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_a_stream_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_b_stream_fun$ 0)
(declare-sort A_llist_stream_a_llist_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_a_llist_prod_stream_bool_fun$ 0)
(declare-sort A_b_prod_llist_b_llist_prod_stream_bool_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_stream_bool_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_stream_bool_fun$ 0)
(declare-sort A_b_prod_llist_a_llist_prod_a_b_prod_llist_fun$ 0)
(declare-sort A_b_prod_llist_b_llist_prod_a_b_prod_llist_fun$ 0)
(declare-sort A_b_prod_llist_stream_a_llist_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_stream_b_llist_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_a_b_prod_stream_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_a_b_prod_stream_fun$ 0)
(declare-sort A_b_prod_stream_stream_a_stream_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_stream_stream_b_stream_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_a_llist_prod_stream_a_llist_stream_fun$ 0)
(declare-sort A_b_prod_llist_b_llist_prod_stream_b_llist_stream_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_stream_stream_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_stream_b_stream_stream_fun$ 0)
(declare-sort A_b_prod_llist_a_llist_prod_stream_a_llist_stream_prod_set$ 0)
(declare-sort A_b_prod_llist_a_llist_prod_stream_a_b_prod_llist_stream_fun$ 0)
(declare-sort A_b_prod_llist_b_llist_prod_stream_a_b_prod_llist_stream_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod_set$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod_set$ 0)
(declare-sort A_b_prod_llist_a_llist_prod_stream_a_llist_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_b_llist_prod_stream_b_llist_stream_bool_fun_fun$ 0)
(declare-sort A_llist_stream_a_b_prod_llist_a_llist_prod_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_a_llist_prod_stream_a_llist_stream_prod_bool_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_stream_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_stream_b_stream_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod_bool_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod_bool_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod_set$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod_set$ 0)
(declare-sort A_b_prod_llist_a_llist_prod_stream_a_b_prod_llist_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_b_llist_prod_stream_a_b_prod_llist_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_stream_a_b_prod_llist_a_llist_prod_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_llist_stream_a_b_prod_llist_b_llist_prod_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_fun_a_b_prod_stream_a_stream_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_fun_a_b_prod_stream_b_stream_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_bool_fun_fun_a_stream_a_stream_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_bool_fun_fun_b_stream_a_stream_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_bool_fun_fun_a_stream_b_stream_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_bool_fun_fun_b_stream_b_stream_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_stream_stream_a_b_prod_stream_a_stream_prod_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_stream_stream_a_b_prod_stream_b_stream_prod_stream_bool_fun_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod_bool_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod_bool_fun$ 0)
(declare-sort A_b_prod_stream_a_stream_bool_fun_fun_a_b_prod_stream_a_stream_bool_fun_fun_fun$ 0)
(declare-sort A_b_prod_stream_b_stream_bool_fun_fun_a_b_prod_stream_b_stream_bool_fun_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$a) (lCons$a (lhd$a A_b_prod$) (ltl$a A_b_prod_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))
  (A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (A_b_prod_stream$ (sCons$a (shd$a A_b_prod$) (stl$a A_b_prod_stream$)))
  (B_stream$ (sCons$b (shd$b B$) (stl$b B_stream$)))))
(declare-datatypes () ((A_b_prod_llist_a_llist_prod$ (pair$a (fst$a A_b_prod_llist$) (snd$a A_llist$)))))
(declare-codatatypes () ((A_b_prod_llist_a_llist_prod_llist$ (lNil$c) (lCons$c (lhd$c A_b_prod_llist_a_llist_prod$) (ltl$c A_b_prod_llist_a_llist_prod_llist$)))
  (A_b_prod_llist_a_llist_prod_stream$ (sCons$c (shd$c A_b_prod_llist_a_llist_prod$) (stl$c A_b_prod_llist_a_llist_prod_stream$)))))
(declare-datatypes () ((A_b_prod_llist_b_llist_prod$ (pair$b (fst$b A_b_prod_llist$) (snd$b B_llist$)))))
(declare-codatatypes () ((A_b_prod_llist_b_llist_prod_llist$ (lNil$d) (lCons$d (lhd$d A_b_prod_llist_b_llist_prod$) (ltl$d A_b_prod_llist_b_llist_prod_llist$)))
  (A_b_prod_llist_b_llist_prod_stream$ (sCons$d (shd$d A_b_prod_llist_b_llist_prod$) (stl$d A_b_prod_llist_b_llist_prod_stream$)))))
(declare-datatypes () ((A_b_prod_stream_a_stream_prod$ (pair$c (fst$c A_b_prod_stream$) (snd$c A_stream$)))))
(declare-codatatypes () ((A_b_prod_stream_a_stream_prod_llist$ (lNil$e) (lCons$e (lhd$e A_b_prod_stream_a_stream_prod$) (ltl$e A_b_prod_stream_a_stream_prod_llist$)))
  (A_b_prod_stream_a_stream_prod_stream$ (sCons$e (shd$e A_b_prod_stream_a_stream_prod$) (stl$e A_b_prod_stream_a_stream_prod_stream$)))))
(declare-datatypes () ((A_b_prod_stream_b_stream_prod$ (pair$d (fst$d A_b_prod_stream$) (snd$d B_stream$)))))
(declare-codatatypes () ((A_b_prod_stream_b_stream_prod_llist$ (lNil$f) (lCons$f (lhd$f A_b_prod_stream_b_stream_prod$) (ltl$f A_b_prod_stream_b_stream_prod_llist$)))
  (A_b_prod_stream_b_stream_prod_stream$ (sCons$f (shd$f A_b_prod_stream_b_stream_prod$) (stl$f A_b_prod_stream_b_stream_prod_stream$)))
  (A_stream_stream$ (sCons$g (shd$g A_stream$) (stl$g A_stream_stream$)))
  (A_stream_llist$ (lNil$g) (lCons$g (lhd$g A_stream$) (ltl$g A_stream_llist$)))
  (A_b_prod_stream_stream$ (sCons$h (shd$h A_b_prod_stream$) (stl$h A_b_prod_stream_stream$)))
  (B_stream_stream$ (sCons$i (shd$i B_stream$) (stl$i B_stream_stream$)))
  (A_b_prod_llist_stream$ (sCons$j (shd$j A_b_prod_llist$) (stl$j A_b_prod_llist_stream$)))
  (B_llist_stream$ (sCons$k (shd$k B_llist$) (stl$k B_llist_stream$)))
  (A_llist_stream$ (sCons$l (shd$l A_llist$) (stl$l A_llist_stream$)))))
(declare-datatypes () ((A_b_prod_llist_a_llist_prod_stream_a_llist_stream_prod$ (pair$e (fst$e A_b_prod_llist_a_llist_prod_stream$) (snd$e A_llist_stream$)))
  (A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod$ (pair$f (fst$f A_b_prod_stream_b_stream_prod_stream$) (snd$f A_b_prod_stream_stream$)))
  (A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod$ (pair$g (fst$g A_b_prod_stream_b_stream_prod_stream$) (snd$g B_stream_stream$)))
  (A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod$ (pair$h (fst$h A_b_prod_stream_a_stream_prod_stream$) (snd$h A_b_prod_stream_stream$)))
  (A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod$ (pair$i (fst$i A_b_prod_stream_a_stream_prod_stream$) (snd$i A_stream_stream$)))))
(declare-fun p$ () A_b_bool_fun_fun$)
(declare-fun y$ () A_llist$)
(declare-fun uu$ () A_b_prod_llist_bool_fun$)
(declare-fun xs$ () A_stream$)
(declare-fun ya$ () B_llist$)
(declare-fun ys$ () B_stream$)
(declare-fun grp$ (A_b_prod_llist_set$ A_b_prod_llist_a_llist_fun$) A_b_prod_llist_a_llist_bool_fun_fun$)
(declare-fun uua$ () A_b_prod_a_fun$)
(declare-fun uub$ () A_b_prod_b_fun$)
(declare-fun uuc$ () A_b_prod_stream_bool_fun$)
(declare-fun uud$ () A_b_prod_llist_bool_fun$)
(declare-fun uue$ () A_llist_bool_fun$)
(declare-fun uuf$ () B_llist_bool_fun$)
(declare-fun uug$ () A_b_prod_a_b_prod_fun$)
(declare-fun uuh$ () B_b_fun$)
(declare-fun uui$ () A_a_fun$)
(declare-fun uuj$ (Bool) A_b_prod_stream_b_stream_bool_fun_fun_a_b_prod_stream_b_stream_bool_fun_fun_fun$)
(declare-fun uuk$ (Bool) A_b_prod_stream_a_stream_bool_fun_fun_a_b_prod_stream_a_stream_bool_fun_fun_fun$)
(declare-fun uul$ (Bool A_b_prod_llist_b_llist_bool_fun_fun$) A_b_prod_llist_b_llist_bool_fun_fun$)
(declare-fun uum$ (Bool A_b_prod_llist_a_llist_bool_fun_fun$) A_b_prod_llist_a_llist_bool_fun_fun$)
(declare-fun uun$ (Bool A_b_bool_fun_fun$) A_b_bool_fun_fun$)
(declare-fun uuo$ (A_b_prod_stream_b_stream_bool_fun_fun$) A_b_prod_stream_b_stream_prod_stream_bool_fun$)
(declare-fun uup$ () A_b_prod_stream_b_stream_prod_a_b_prod_stream_fun$)
(declare-fun uuq$ () A_b_prod_stream_b_stream_prod_b_stream_fun$)
(declare-fun uur$ (A_b_prod_stream_a_stream_bool_fun_fun$) A_b_prod_stream_a_stream_prod_stream_bool_fun$)
(declare-fun uus$ () A_b_prod_stream_a_stream_prod_a_b_prod_stream_fun$)
(declare-fun uut$ () A_b_prod_stream_a_stream_prod_a_stream_fun$)
(declare-fun uuu$ (A_b_prod_llist_b_llist_bool_fun_fun$) A_b_prod_llist_b_llist_prod_stream_bool_fun$)
(declare-fun uuv$ () A_b_prod_llist_b_llist_prod_a_b_prod_llist_fun$)
(declare-fun uuw$ () A_b_prod_llist_b_llist_prod_b_llist_fun$)
(declare-fun uux$ (A_b_prod_llist_a_llist_bool_fun_fun$) A_b_prod_llist_a_llist_prod_stream_bool_fun$)
(declare-fun uuy$ () A_b_prod_llist_a_llist_prod_a_b_prod_llist_fun$)
(declare-fun uuz$ () A_b_prod_llist_a_llist_prod_a_llist_fun$)
(declare-fun uva$ (A_b_bool_fun_fun$) A_b_prod_stream_bool_fun$)
(declare-fun grp$a (A_b_prod_llist_set$ A_b_prod_llist_b_llist_fun$) A_b_prod_llist_b_llist_bool_fun_fun$)
(declare-fun grp$b (A_b_prod_stream_set$) A_b_prod_stream_a_stream_fun_a_b_prod_stream_a_stream_bool_fun_fun_fun$)
(declare-fun grp$c (A_b_prod_stream_set$) A_b_prod_stream_b_stream_fun_a_b_prod_stream_b_stream_bool_fun_fun_fun$)
(declare-fun grp$d (A_b_prod_stream_b_stream_prod_stream_set$ A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_fun$) A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$)
(declare-fun grp$e (A_b_prod_stream_b_stream_prod_stream_set$ A_b_prod_stream_b_stream_prod_stream_b_stream_stream_fun$) A_b_prod_stream_b_stream_prod_stream_b_stream_stream_bool_fun_fun$)
(declare-fun grp$f (A_b_prod_stream_a_stream_prod_stream_set$ A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_fun$) A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$)
(declare-fun grp$g (A_b_prod_stream_a_stream_prod_stream_set$ A_b_prod_stream_a_stream_prod_stream_a_stream_stream_fun$) A_b_prod_stream_a_stream_prod_stream_a_stream_stream_bool_fun_fun$)
(declare-fun grp$h (A_b_prod_llist_b_llist_prod_stream_set$ A_b_prod_llist_b_llist_prod_stream_a_b_prod_llist_stream_fun$) A_b_prod_llist_b_llist_prod_stream_a_b_prod_llist_stream_bool_fun_fun$)
(declare-fun grp$i (A_b_prod_llist_b_llist_prod_stream_set$ A_b_prod_llist_b_llist_prod_stream_b_llist_stream_fun$) A_b_prod_llist_b_llist_prod_stream_b_llist_stream_bool_fun_fun$)
(declare-fun grp$j (A_b_prod_llist_a_llist_prod_stream_set$ A_b_prod_llist_a_llist_prod_stream_a_b_prod_llist_stream_fun$) A_b_prod_llist_a_llist_prod_stream_a_b_prod_llist_stream_bool_fun_fun$)
(declare-fun grp$k (A_b_prod_llist_a_llist_prod_stream_set$ A_b_prod_llist_a_llist_prod_stream_a_llist_stream_fun$) A_b_prod_llist_a_llist_prod_stream_a_llist_stream_bool_fun_fun$)
(declare-fun grp$l (A_set$ A_b_fun$) A_b_bool_fun_fun$)
(declare-fun lmap$ (A_b_prod_a_fun$) A_b_prod_llist_a_llist_fun$)
(declare-fun lset$ (A_b_prod_llist$) A_b_prod_set$)
(declare-fun smap$ (A_b_prod_a_fun$) A_b_prod_stream_a_stream_fun$)
(declare-fun sset$ (A_b_prod_stream$) A_b_prod_set$)
(declare-fun lmap$a (A_b_prod_b_fun$) A_b_prod_llist_b_llist_fun$)
(declare-fun lmap$b (A_a_fun$ A_llist$) A_llist$)
(declare-fun lmap$c (A_b_fun$ A_llist$) B_llist$)
(declare-fun lmap$d (B_a_fun$ B_llist$) A_llist$)
(declare-fun lmap$e (B_b_fun$ B_llist$) B_llist$)
(declare-fun lmap$f (A_a_b_prod_fun$ A_llist$) A_b_prod_llist$)
(declare-fun lmap$g (B_a_b_prod_fun$ B_llist$) A_b_prod_llist$)
(declare-fun lmap$h (A_b_prod_a_b_prod_fun$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun lmap$i (A_b_prod_stream_a_stream_prod_a_stream_fun$ A_b_prod_stream_a_stream_prod_llist$) A_stream_llist$)
(declare-fun lset$a (A_b_prod_llist_a_llist_prod_llist$) A_b_prod_llist_a_llist_prod_set$)
(declare-fun lset$b (A_b_prod_llist_b_llist_prod_llist$) A_b_prod_llist_b_llist_prod_set$)
(declare-fun lset$c (A_b_prod_stream_a_stream_prod_llist$) A_b_prod_stream_a_stream_prod_set$)
(declare-fun lset$d (A_b_prod_stream_b_stream_prod_llist$) A_b_prod_stream_b_stream_prod_set$)
(declare-fun lset$e (A_llist$) A_set$)
(declare-fun lset$f (B_llist$) B_set$)
(declare-fun smap$a (A_b_prod_b_fun$) A_b_prod_stream_b_stream_fun$)
(declare-fun smap$b (A_a_fun$ A_stream$) A_stream$)
(declare-fun smap$c (A_b_fun$ A_stream$) B_stream$)
(declare-fun smap$d (B_a_fun$ B_stream$) A_stream$)
(declare-fun smap$e (B_b_fun$ B_stream$) B_stream$)
(declare-fun smap$f (A_a_b_prod_fun$ A_stream$) A_b_prod_stream$)
(declare-fun smap$g (B_a_b_prod_fun$ B_stream$) A_b_prod_stream$)
(declare-fun smap$h (A_b_prod_a_b_prod_fun$ A_b_prod_stream$) A_b_prod_stream$)
(declare-fun smap$i (A_b_prod_stream_a_stream_prod_a_stream_fun$) A_b_prod_stream_a_stream_prod_stream_a_stream_stream_fun$)
(declare-fun smap$j (A_b_prod_stream_b_stream_prod_a_b_prod_stream_fun$) A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_fun$)
(declare-fun smap$k (A_b_prod_stream_b_stream_prod_b_stream_fun$) A_b_prod_stream_b_stream_prod_stream_b_stream_stream_fun$)
(declare-fun smap$l (A_b_prod_stream_a_stream_prod_a_b_prod_stream_fun$) A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_fun$)
(declare-fun smap$m (A_b_prod_llist_b_llist_prod_a_b_prod_llist_fun$) A_b_prod_llist_b_llist_prod_stream_a_b_prod_llist_stream_fun$)
(declare-fun smap$n (A_b_prod_llist_b_llist_prod_b_llist_fun$) A_b_prod_llist_b_llist_prod_stream_b_llist_stream_fun$)
(declare-fun smap$o (A_b_prod_llist_a_llist_prod_a_b_prod_llist_fun$) A_b_prod_llist_a_llist_prod_stream_a_b_prod_llist_stream_fun$)
(declare-fun smap$p (A_b_prod_llist_a_llist_prod_a_llist_fun$) A_b_prod_llist_a_llist_prod_stream_a_llist_stream_fun$)
(declare-fun sset$a (A_b_prod_llist_b_llist_prod_stream$) A_b_prod_llist_b_llist_prod_set$)
(declare-fun sset$b (A_b_prod_llist_a_llist_prod_stream$) A_b_prod_llist_a_llist_prod_set$)
(declare-fun sset$c (A_b_prod_stream_b_stream_prod_stream$) A_b_prod_stream_b_stream_prod_set$)
(declare-fun sset$d (A_b_prod_stream_a_stream_prod_stream$) A_b_prod_stream_a_stream_prod_set$)
(declare-fun sset$e (A_stream$) A_set$)
(declare-fun sset$f (B_stream$) B_set$)
(declare-fun member$ (A_b_prod_llist$ A_b_prod_llist_set$) Bool)
(declare-fun collect$ (A_b_prod_bool_fun$) A_b_prod_set$)
(declare-fun fun_app$ (A_b_prod_llist_bool_fun$ A_b_prod_llist$) Bool)
(declare-fun less_eq$ (A_b_prod_set$ A_b_prod_set$) Bool)
(declare-fun lfinite$ (A_b_prod_llist$) Bool)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun member$b (B_llist$ B_llist_set$) Bool)
(declare-fun member$c (A_b_prod_llist_a_llist_prod_stream_a_llist_stream_prod$ A_b_prod_llist_a_llist_prod_stream_a_llist_stream_prod_set$) Bool)
(declare-fun member$d (A_b_prod_llist_a_llist_prod_stream$ A_b_prod_llist_a_llist_prod_stream_set$) Bool)
(declare-fun member$e (A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod$ A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod_set$) Bool)
(declare-fun member$f (A_b_prod_stream_b_stream_prod_stream$ A_b_prod_stream_b_stream_prod_stream_set$) Bool)
(declare-fun member$g (A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod$ A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod_set$) Bool)
(declare-fun member$h (A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod$ A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod_set$) Bool)
(declare-fun member$i (A_b_prod_stream_a_stream_prod_stream$ A_b_prod_stream_a_stream_prod_stream_set$) Bool)
(declare-fun member$j (A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod$ A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod_set$) Bool)
(declare-fun member$k (A_b_prod_llist_a_llist_prod$ A_b_prod_llist_a_llist_prod_set$) Bool)
(declare-fun member$l (A_b_prod_llist_b_llist_prod$ A_b_prod_llist_b_llist_prod_set$) Bool)
(declare-fun member$m (A_b_prod_stream_a_stream_prod$ A_b_prod_stream_a_stream_prod_set$) Bool)
(declare-fun member$n (A_b_prod_stream$ A_b_prod_stream_set$) Bool)
(declare-fun member$o (A_b_prod_stream_b_stream_prod$ A_b_prod_stream_b_stream_prod_set$) Bool)
(declare-fun member$p (A_b_prod$ A_b_prod_set$) Bool)
(declare-fun member$q (A$ A_set$) Bool)
(declare-fun collect$a (A_b_prod_llist_b_llist_prod_bool_fun$) A_b_prod_llist_b_llist_prod_set$)
(declare-fun collect$b (A_b_prod_llist_a_llist_prod_bool_fun$) A_b_prod_llist_a_llist_prod_set$)
(declare-fun collect$c (A_b_prod_stream_b_stream_prod_bool_fun$) A_b_prod_stream_b_stream_prod_set$)
(declare-fun collect$d (A_b_prod_stream_a_stream_prod_bool_fun$) A_b_prod_stream_a_stream_prod_set$)
(declare-fun collect$e (A_b_prod_llist_bool_fun$) A_b_prod_llist_set$)
(declare-fun collect$f (A_b_prod_stream_bool_fun$) A_b_prod_stream_set$)
(declare-fun collect$g (A_llist_bool_fun$) A_llist_set$)
(declare-fun collect$h (B_llist_bool_fun$) B_llist_set$)
(declare-fun collect$i (A_b_prod_stream_b_stream_prod_stream_bool_fun$) A_b_prod_stream_b_stream_prod_stream_set$)
(declare-fun collect$j (A_b_prod_stream_a_stream_prod_stream_bool_fun$) A_b_prod_stream_a_stream_prod_stream_set$)
(declare-fun collect$k (A_b_prod_llist_b_llist_prod_stream_bool_fun$) A_b_prod_llist_b_llist_prod_stream_set$)
(declare-fun collect$l (A_b_prod_llist_a_llist_prod_stream_bool_fun$) A_b_prod_llist_a_llist_prod_stream_set$)
(declare-fun collect$m (A_b_prod_llist_a_llist_prod_stream_a_llist_stream_prod_bool_fun$) A_b_prod_llist_a_llist_prod_stream_a_llist_stream_prod_set$)
(declare-fun collect$n (A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod_bool_fun$) A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod_set$)
(declare-fun collect$o (A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod_bool_fun$) A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod_set$)
(declare-fun collect$p (A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod_bool_fun$) A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod_set$)
(declare-fun collect$q (A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod_bool_fun$) A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod_set$)
(declare-fun fun_app$a (A_b_prod_stream_bool_fun$ A_b_prod_stream$) Bool)
(declare-fun fun_app$b (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$d (A_b_prod_llist_b_llist_prod_b_llist_fun$ A_b_prod_llist_b_llist_prod$) B_llist$)
(declare-fun fun_app$e (A_b_prod_llist_a_llist_prod_a_llist_fun$ A_b_prod_llist_a_llist_prod$) A_llist$)
(declare-fun fun_app$f (A_b_prod_stream_b_stream_prod_b_stream_fun$ A_b_prod_stream_b_stream_prod$) B_stream$)
(declare-fun fun_app$g (A_b_prod_stream_a_stream_prod_a_stream_fun$ A_b_prod_stream_a_stream_prod$) A_stream$)
(declare-fun fun_app$h (A_b_prod_b_fun$ A_b_prod$) B$)
(declare-fun fun_app$i (A_b_prod_llist_b_llist_prod_a_b_prod_llist_fun$ A_b_prod_llist_b_llist_prod$) A_b_prod_llist$)
(declare-fun fun_app$j (A_b_prod_llist_a_llist_prod_a_b_prod_llist_fun$ A_b_prod_llist_a_llist_prod$) A_b_prod_llist$)
(declare-fun fun_app$k (A_b_prod_stream_b_stream_prod_a_b_prod_stream_fun$ A_b_prod_stream_b_stream_prod$) A_b_prod_stream$)
(declare-fun fun_app$l (A_b_prod_stream_a_stream_prod_a_b_prod_stream_fun$ A_b_prod_stream_a_stream_prod$) A_b_prod_stream$)
(declare-fun fun_app$m (A_b_prod_a_fun$ A_b_prod$) A$)
(declare-fun fun_app$n (A_b_prod_llist_b_llist_prod_stream_bool_fun$ A_b_prod_llist_b_llist_prod_stream$) Bool)
(declare-fun fun_app$o (A_b_prod_llist_a_llist_prod_stream_bool_fun$ A_b_prod_llist_a_llist_prod_stream$) Bool)
(declare-fun fun_app$p (A_b_prod_stream_b_stream_prod_stream_bool_fun$ A_b_prod_stream_b_stream_prod_stream$) Bool)
(declare-fun fun_app$q (A_b_prod_stream_a_stream_prod_stream_bool_fun$ A_b_prod_stream_a_stream_prod_stream$) Bool)
(declare-fun fun_app$r (A_b_prod_llist_b_llist_bool_fun_fun$ A_b_prod_llist$) B_llist_bool_fun$)
(declare-fun fun_app$s (A_b_prod_llist_a_llist_bool_fun_fun$ A_b_prod_llist$) A_llist_bool_fun$)
(declare-fun fun_app$t (B_stream_bool_fun$ B_stream$) Bool)
(declare-fun fun_app$u (A_b_prod_stream_b_stream_bool_fun_fun$ A_b_prod_stream$) B_stream_bool_fun$)
(declare-fun fun_app$v (A_b_prod_stream_b_stream_bool_fun_fun_a_b_prod_stream_b_stream_bool_fun_fun_fun$ A_b_prod_stream_b_stream_bool_fun_fun$) A_b_prod_stream_b_stream_bool_fun_fun$)
(declare-fun fun_app$w (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$x (A_b_prod_stream_a_stream_bool_fun_fun$ A_b_prod_stream$) A_stream_bool_fun$)
(declare-fun fun_app$y (A_b_prod_stream_a_stream_bool_fun_fun_a_b_prod_stream_a_stream_bool_fun_fun_fun$ A_b_prod_stream_a_stream_bool_fun_fun$) A_b_prod_stream_a_stream_bool_fun_fun$)
(declare-fun fun_app$z (B_bool_fun$ B$) Bool)
(declare-fun less_eq$a (A_b_prod_llist_b_llist_prod_set$ A_b_prod_llist_b_llist_prod_set$) Bool)
(declare-fun less_eq$b (A_b_prod_llist_a_llist_prod_set$ A_b_prod_llist_a_llist_prod_set$) Bool)
(declare-fun less_eq$c (A_b_prod_stream_b_stream_prod_set$ A_b_prod_stream_b_stream_prod_set$) Bool)
(declare-fun less_eq$d (A_b_prod_stream_a_stream_prod_set$ A_b_prod_stream_a_stream_prod_set$) Bool)
(declare-fun lfinite$a (B_llist$) Bool)
(declare-fun lfinite$b (A_llist$) Bool)
(declare-fun lfinite$c (A_b_prod_llist_a_llist_prod_llist$) Bool)
(declare-fun lfinite$d (A_b_prod_llist_b_llist_prod_llist$) Bool)
(declare-fun lfinite$e (A_b_prod_stream_a_stream_prod_llist$) Bool)
(declare-fun lfinite$f (A_b_prod_stream_b_stream_prod_llist$) Bool)
(declare-fun relcompp$ (A_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist_b_llist_bool_fun_fun$) A_llist_b_llist_bool_fun_fun$)
(declare-fun case_prod$ (A_b_bool_fun_fun$) A_b_prod_bool_fun$)
(declare-fun conversep$ (A_b_prod_llist_a_llist_bool_fun_fun$) A_llist_a_b_prod_llist_bool_fun_fun$)
(declare-fun fun_app$aa (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$ab (A_b_prod_a_b_prod_fun$ A_b_prod$) A_b_prod$)
(declare-fun fun_app$ac (B_b_fun$ B$) B$)
(declare-fun fun_app$ad (A_a_fun$ A$) A$)
(declare-fun fun_app$ae (A_llist_b_llist_bool_fun_fun$ A_llist$) B_llist_bool_fun$)
(declare-fun fun_app$af (A_stream_b_stream_bool_fun_fun$ A_stream$) B_stream_bool_fun$)
(declare-fun fun_app$ag (A_b_prod_stream_b_stream_bool_fun_fun_a_stream_b_stream_bool_fun_fun_fun$ A_b_prod_stream_b_stream_bool_fun_fun$) A_stream_b_stream_bool_fun_fun$)
(declare-fun fun_app$ah (A_b_prod_stream_a_stream_fun_a_b_prod_stream_a_stream_bool_fun_fun_fun$ A_b_prod_stream_a_stream_fun$) A_b_prod_stream_a_stream_bool_fun_fun$)
(declare-fun fun_app$ai (A_b_prod_stream_b_stream_fun_a_b_prod_stream_b_stream_bool_fun_fun_fun$ A_b_prod_stream_b_stream_fun$) A_b_prod_stream_b_stream_bool_fun_fun$)
(declare-fun fun_app$aj (A_b_prod_stream_a_stream_fun$ A_b_prod_stream$) A_stream$)
(declare-fun fun_app$ak (A_b_prod_llist_a_llist_fun$ A_b_prod_llist$) A_llist$)
(declare-fun fun_app$al (A_b_prod_stream_b_stream_fun$ A_b_prod_stream$) B_stream$)
(declare-fun fun_app$am (A_b_prod_llist_b_llist_fun$ A_b_prod_llist$) B_llist$)
(declare-fun fun_app$an (A_b_prod_stream_a_stream_prod_stream_a_stream_stream_fun$ A_b_prod_stream_a_stream_prod_stream$) A_stream_stream$)
(declare-fun fun_app$ao (A_b_prod_stream_b_stream_prod_bool_fun$ A_b_prod_stream_b_stream_prod$) Bool)
(declare-fun fun_app$ap (A_b_prod_stream_a_stream_prod_bool_fun$ A_b_prod_stream_a_stream_prod$) Bool)
(declare-fun fun_app$aq (A_b_prod_llist_b_llist_prod_bool_fun$ A_b_prod_llist_b_llist_prod$) Bool)
(declare-fun fun_app$ar (A_b_prod_llist_a_llist_prod_bool_fun$ A_b_prod_llist_a_llist_prod$) Bool)
(declare-fun fun_app$as (A_b_prod_bool_fun$ A_b_prod$) Bool)
(declare-fun fun_app$at (B_stream_a_b_prod_stream_bool_fun_fun$ B_stream$) A_b_prod_stream_bool_fun$)
(declare-fun fun_app$au (Bool_bool_fun$ Bool) Bool)
(declare-fun fun_app$av (A_stream_a_b_prod_stream_bool_fun_fun$ A_stream$) A_b_prod_stream_bool_fun$)
(declare-fun fun_app$aw (B_llist_a_b_prod_llist_bool_fun_fun$ B_llist$) A_b_prod_llist_bool_fun$)
(declare-fun fun_app$ax (A_llist_a_b_prod_llist_bool_fun_fun$ A_llist$) A_b_prod_llist_bool_fun$)
(declare-fun fun_app$ay (A_bool_fun$ A$) Bool)
(declare-fun fun_app$az (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$ba (A_b_prod_stream_a_stream_bool_fun_fun_b_stream_a_stream_bool_fun_fun_fun$ A_b_prod_stream_a_stream_bool_fun_fun$) B_stream_a_stream_bool_fun_fun$)
(declare-fun fun_app$bb (A_b_prod_stream_b_stream_bool_fun_fun_b_stream_b_stream_bool_fun_fun_fun$ A_b_prod_stream_b_stream_bool_fun_fun$) B_stream_b_stream_bool_fun_fun$)
(declare-fun fun_app$bc (A_b_prod_stream_a_stream_bool_fun_fun_a_stream_a_stream_bool_fun_fun_fun$ A_b_prod_stream_a_stream_bool_fun_fun$) A_stream_a_stream_bool_fun_fun$)
(declare-fun relcompp$a (A_stream_a_b_prod_stream_bool_fun_fun$) A_b_prod_stream_b_stream_bool_fun_fun_a_stream_b_stream_bool_fun_fun_fun$)
(declare-fun relcompp$b (A_b_prod_stream_stream_a_b_prod_stream_b_stream_prod_stream_bool_fun_fun$ A_b_prod_stream_b_stream_prod_stream_b_stream_stream_bool_fun_fun$) A_b_prod_stream_stream_b_stream_stream_bool_fun_fun$)
(declare-fun relcompp$c (A_b_prod_stream_stream_a_b_prod_stream_a_stream_prod_stream_bool_fun_fun$ A_b_prod_stream_a_stream_prod_stream_a_stream_stream_bool_fun_fun$) A_b_prod_stream_stream_a_stream_stream_bool_fun_fun$)
(declare-fun relcompp$d (A_b_prod_llist_stream_a_b_prod_llist_b_llist_prod_stream_bool_fun_fun$ A_b_prod_llist_b_llist_prod_stream_b_llist_stream_bool_fun_fun$) A_b_prod_llist_stream_b_llist_stream_bool_fun_fun$)
(declare-fun relcompp$e (A_b_prod_llist_stream_a_b_prod_llist_a_llist_prod_stream_bool_fun_fun$ A_b_prod_llist_a_llist_prod_stream_a_llist_stream_bool_fun_fun$) A_b_prod_llist_stream_a_llist_stream_bool_fun_fun$)
(declare-fun relcompp$f (B_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist_a_llist_bool_fun_fun$) B_llist_a_llist_bool_fun_fun$)
(declare-fun relcompp$g (B_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist_b_llist_bool_fun_fun$) B_llist_b_llist_bool_fun_fun$)
(declare-fun relcompp$h (B_stream_a_b_prod_stream_bool_fun_fun$) A_b_prod_stream_a_stream_bool_fun_fun_b_stream_a_stream_bool_fun_fun_fun$)
(declare-fun relcompp$i (B_stream_a_b_prod_stream_bool_fun_fun$) A_b_prod_stream_b_stream_bool_fun_fun_b_stream_b_stream_bool_fun_fun_fun$)
(declare-fun relcompp$j (A_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist_a_llist_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun relcompp$k (A_stream_a_b_prod_stream_bool_fun_fun$) A_b_prod_stream_a_stream_bool_fun_fun_a_stream_a_stream_bool_fun_fun_fun$)
(declare-fun relcompp$l (B_a_bool_fun_fun$ A_b_bool_fun_fun$) B_b_bool_fun_fun$)
(declare-fun relcompp$m (A_llist_stream_a_b_prod_llist_a_llist_prod_stream_bool_fun_fun$ A_b_prod_llist_a_llist_prod_stream_a_llist_stream_bool_fun_fun$) A_llist_stream_a_llist_stream_bool_fun_fun$)
(declare-fun case_prod$a (A_b_prod_llist_b_llist_bool_fun_fun$) A_b_prod_llist_b_llist_prod_bool_fun$)
(declare-fun case_prod$b (A_b_prod_llist_a_llist_bool_fun_fun$) A_b_prod_llist_a_llist_prod_bool_fun$)
(declare-fun case_prod$c (A_b_prod_stream_b_stream_bool_fun_fun$) A_b_prod_stream_b_stream_prod_bool_fun$)
(declare-fun case_prod$d (A_b_prod_stream_a_stream_bool_fun_fun$) A_b_prod_stream_a_stream_prod_bool_fun$)
(declare-fun case_prod$e (A_b_prod_llist_a_llist_prod_stream_a_llist_stream_bool_fun_fun$) A_b_prod_llist_a_llist_prod_stream_a_llist_stream_prod_bool_fun$)
(declare-fun case_prod$f (A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$) A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod_bool_fun$)
(declare-fun case_prod$g (A_b_prod_stream_b_stream_prod_stream_b_stream_stream_bool_fun_fun$) A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod_bool_fun$)
(declare-fun case_prod$h (A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$) A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod_bool_fun$)
(declare-fun case_prod$i (A_b_prod_stream_a_stream_prod_stream_a_stream_stream_bool_fun_fun$) A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod_bool_fun$)
(declare-fun conversep$a (A_b_prod_stream_a_stream_bool_fun_fun$) A_stream_a_b_prod_stream_bool_fun_fun$)
(declare-fun conversep$b (A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$) A_b_prod_stream_stream_a_b_prod_stream_b_stream_prod_stream_bool_fun_fun$)
(declare-fun conversep$c (A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_bool_fun_fun$) A_b_prod_stream_stream_a_b_prod_stream_a_stream_prod_stream_bool_fun_fun$)
(declare-fun conversep$d (A_b_prod_llist_b_llist_prod_stream_a_b_prod_llist_stream_bool_fun_fun$) A_b_prod_llist_stream_a_b_prod_llist_b_llist_prod_stream_bool_fun_fun$)
(declare-fun conversep$e (A_b_prod_llist_a_llist_prod_stream_a_b_prod_llist_stream_bool_fun_fun$) A_b_prod_llist_stream_a_b_prod_llist_a_llist_prod_stream_bool_fun_fun$)
(declare-fun conversep$f (A_b_prod_llist_b_llist_bool_fun_fun$) B_llist_a_b_prod_llist_bool_fun_fun$)
(declare-fun conversep$g (A_b_prod_stream_b_stream_bool_fun_fun$) B_stream_a_b_prod_stream_bool_fun_fun$)
(declare-fun conversep$h (A_b_bool_fun_fun$) B_a_bool_fun_fun$)
(declare-fun conversep$i (A_b_prod_llist_a_llist_prod_stream_a_llist_stream_bool_fun_fun$) A_llist_stream_a_b_prod_llist_a_llist_prod_stream_bool_fun_fun$)
(declare-fun stream_all2$ (A_b_prod_stream_b_stream_bool_fun_fun$) A_b_prod_stream_stream_b_stream_stream_bool_fun_fun$)
(declare-fun stream_all2$a (A_b_prod_stream_a_stream_bool_fun_fun$) A_b_prod_stream_stream_a_stream_stream_bool_fun_fun$)
(declare-fun stream_all2$b (A_b_prod_llist_b_llist_bool_fun_fun$) A_b_prod_llist_stream_b_llist_stream_bool_fun_fun$)
(declare-fun stream_all2$c (A_b_prod_llist_a_llist_bool_fun_fun$) A_b_prod_llist_stream_a_llist_stream_bool_fun_fun$)
(declare-fun stream_all2$d (A_b_bool_fun_fun$) A_stream_b_stream_bool_fun_fun$)
(declare-fun stream_of_llist$ (A_llist$) A_stream$)
(declare-fun stream_of_llist$a (B_llist$) B_stream$)
(declare-fun stream_of_llist$b (A_b_prod_llist_a_llist_prod_llist$) A_b_prod_llist_a_llist_prod_stream$)
(declare-fun stream_of_llist$c (A_b_prod_llist_b_llist_prod_llist$) A_b_prod_llist_b_llist_prod_stream$)
(declare-fun stream_of_llist$d (A_b_prod_stream_a_stream_prod_llist$) A_b_prod_stream_a_stream_prod_stream$)
(declare-fun stream_of_llist$e (A_b_prod_stream_b_stream_prod_llist$) A_b_prod_stream_b_stream_prod_stream$)
(declare-fun stream_of_llist$f (A_b_prod_llist$) A_b_prod_stream$)
(declare-fun stream_of_llist$g (A_stream_llist$) A_stream_stream$)
(assert (! (forall ((?v0 A_b_prod_llist$)) (! (= (fun_app$ uu$ ?v0) (less_eq$ (lset$ ?v0) (collect$ (case_prod$ p$)))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_b_prod_stream$)) (! (= (fun_app$a uuc$ ?v0) (less_eq$ (sset$ ?v0) (collect$ (case_prod$ p$)))) :pattern ((fun_app$a uuc$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_b_prod_llist$)) (! (= (fun_app$ uud$ ?v0) (not (lfinite$ ?v0))) :pattern ((fun_app$ uud$ ?v0)))) :named a2))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$b uuf$ ?v0) (not (lfinite$a ?v0))) :pattern ((fun_app$b uuf$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$c uue$ ?v0) (not (lfinite$b ?v0))) :pattern ((fun_app$c uue$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_prod$)) (! (= (fun_app$d uuw$ ?v0) (snd$b ?v0)) :pattern ((fun_app$d uuw$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_prod$)) (! (= (fun_app$e uuz$ ?v0) (snd$a ?v0)) :pattern ((fun_app$e uuz$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_prod$)) (! (= (fun_app$f uuq$ ?v0) (snd$d ?v0)) :pattern ((fun_app$f uuq$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod$)) (! (= (fun_app$g uut$ ?v0) (snd$c ?v0)) :pattern ((fun_app$g uut$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$h uub$ ?v0) (snd$ ?v0)) :pattern ((fun_app$h uub$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_prod$)) (! (= (fun_app$i uuv$ ?v0) (fst$b ?v0)) :pattern ((fun_app$i uuv$ ?v0)))) :named a10))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_prod$)) (! (= (fun_app$j uuy$ ?v0) (fst$a ?v0)) :pattern ((fun_app$j uuy$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_prod$)) (! (= (fun_app$k uup$ ?v0) (fst$d ?v0)) :pattern ((fun_app$k uup$ ?v0)))) :named a12))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod$)) (! (= (fun_app$l uus$ ?v0) (fst$c ?v0)) :pattern ((fun_app$l uus$ ?v0)))) :named a13))
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$m uua$ ?v0) (fst$ ?v0)) :pattern ((fun_app$m uua$ ?v0)))) :named a14))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_bool_fun_fun$) (?v1 A_b_prod_llist_b_llist_prod_stream$)) (! (= (fun_app$n (uuu$ ?v0) ?v1) (less_eq$a (sset$a ?v1) (collect$a (case_prod$a ?v0)))) :pattern ((fun_app$n (uuu$ ?v0) ?v1)))) :named a15))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_bool_fun_fun$) (?v1 A_b_prod_llist_a_llist_prod_stream$)) (! (= (fun_app$o (uux$ ?v0) ?v1) (less_eq$b (sset$b ?v1) (collect$b (case_prod$b ?v0)))) :pattern ((fun_app$o (uux$ ?v0) ?v1)))) :named a16))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_bool_fun_fun$) (?v1 A_b_prod_stream_b_stream_prod_stream$)) (! (= (fun_app$p (uuo$ ?v0) ?v1) (less_eq$c (sset$c ?v1) (collect$c (case_prod$c ?v0)))) :pattern ((fun_app$p (uuo$ ?v0) ?v1)))) :named a17))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_bool_fun_fun$) (?v1 A_b_prod_stream_a_stream_prod_stream$)) (! (= (fun_app$q (uur$ ?v0) ?v1) (less_eq$d (sset$d ?v1) (collect$d (case_prod$d ?v0)))) :pattern ((fun_app$q (uur$ ?v0) ?v1)))) :named a18))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_prod_stream$)) (! (= (fun_app$a (uva$ ?v0) ?v1) (less_eq$ (sset$ ?v1) (collect$ (case_prod$ ?v0)))) :pattern ((fun_app$a (uva$ ?v0) ?v1)))) :named a19))
(assert (! (forall ((?v0 Bool) (?v1 A_b_prod_llist_b_llist_bool_fun_fun$) (?v2 A_b_prod_llist$) (?v3 B_llist$)) (! (= (fun_app$b (fun_app$r (uul$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$b (fun_app$r ?v1 ?v2) ?v3))) :pattern ((fun_app$b (fun_app$r (uul$ ?v0 ?v1) ?v2) ?v3)))) :named a20))
(assert (! (forall ((?v0 Bool) (?v1 A_b_prod_llist_a_llist_bool_fun_fun$) (?v2 A_b_prod_llist$) (?v3 A_llist$)) (! (= (fun_app$c (fun_app$s (uum$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$c (fun_app$s ?v1 ?v2) ?v3))) :pattern ((fun_app$c (fun_app$s (uum$ ?v0 ?v1) ?v2) ?v3)))) :named a21))
(assert (! (forall ((?v0 Bool) (?v1 A_b_prod_stream_b_stream_bool_fun_fun$) (?v2 A_b_prod_stream$) (?v3 B_stream$)) (! (= (fun_app$t (fun_app$u (fun_app$v (uuj$ ?v0) ?v1) ?v2) ?v3) (and ?v0 (fun_app$t (fun_app$u ?v1 ?v2) ?v3))) :pattern ((fun_app$t (fun_app$u (fun_app$v (uuj$ ?v0) ?v1) ?v2) ?v3)))) :named a22))
(assert (! (forall ((?v0 Bool) (?v1 A_b_prod_stream_a_stream_bool_fun_fun$) (?v2 A_b_prod_stream$) (?v3 A_stream$)) (! (= (fun_app$w (fun_app$x (fun_app$y (uuk$ ?v0) ?v1) ?v2) ?v3) (and ?v0 (fun_app$w (fun_app$x ?v1 ?v2) ?v3))) :pattern ((fun_app$w (fun_app$x (fun_app$y (uuk$ ?v0) ?v1) ?v2) ?v3)))) :named a23))
(assert (! (forall ((?v0 Bool) (?v1 A_b_bool_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$z (fun_app$aa (uun$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$z (fun_app$aa ?v1 ?v2) ?v3))) :pattern ((fun_app$z (fun_app$aa (uun$ ?v0 ?v1) ?v2) ?v3)))) :named a24))
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$ab uug$ ?v0) ?v0) :pattern ((fun_app$ab uug$ ?v0)))) :named a25))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$ac uuh$ ?v0) ?v0) :pattern ((fun_app$ac uuh$ ?v0)))) :named a26))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ad uui$ ?v0) ?v0) :pattern ((fun_app$ad uui$ ?v0)))) :named a27))
(assert (! (not (= (fun_app$b (fun_app$ae (relcompp$ (conversep$ (grp$ (collect$e uu$) (lmap$ uua$))) (grp$a (collect$e uu$) (lmap$a uub$))) y$) ya$) (fun_app$t (fun_app$af (fun_app$ag (relcompp$a (conversep$a (fun_app$ah (grp$b (collect$f uuc$)) (smap$ uua$)))) (fun_app$ai (grp$c (collect$f uuc$)) (smap$a uub$))) (stream_of_llist$ y$)) (stream_of_llist$a ya$)))) :named a28))
(assert (! (= xs$ (stream_of_llist$ y$)) :named a29))
(assert (! (not (lfinite$b y$)) :named a30))
(assert (! (= ys$ (stream_of_llist$a ya$)) :named a31))
(assert (! (not (lfinite$a ya$)) :named a32))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_prod_llist$)) (=> (and (not (lfinite$c ?v0)) (not (lfinite$c ?v0))) (= (sset$b (stream_of_llist$b ?v0)) (lset$a ?v0)))) :named a33))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_prod_llist$)) (=> (and (not (lfinite$d ?v0)) (not (lfinite$d ?v0))) (= (sset$a (stream_of_llist$c ?v0)) (lset$b ?v0)))) :named a34))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod_llist$)) (=> (and (not (lfinite$e ?v0)) (not (lfinite$e ?v0))) (= (sset$d (stream_of_llist$d ?v0)) (lset$c ?v0)))) :named a35))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_prod_llist$)) (=> (and (not (lfinite$f ?v0)) (not (lfinite$f ?v0))) (= (sset$c (stream_of_llist$e ?v0)) (lset$d ?v0)))) :named a36))
(assert (! (forall ((?v0 A_b_prod_llist$)) (=> (and (not (lfinite$ ?v0)) (not (lfinite$ ?v0))) (= (sset$ (stream_of_llist$f ?v0)) (lset$ ?v0)))) :named a37))
(assert (! (forall ((?v0 A_llist$)) (=> (and (not (lfinite$b ?v0)) (not (lfinite$b ?v0))) (= (sset$e (stream_of_llist$ ?v0)) (lset$e ?v0)))) :named a38))
(assert (! (forall ((?v0 B_llist$)) (=> (and (not (lfinite$a ?v0)) (not (lfinite$a ?v0))) (= (sset$f (stream_of_llist$a ?v0)) (lset$f ?v0)))) :named a39))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_fun$)) (=> (not (lfinite$b ?v0)) (= (smap$b ?v1 (stream_of_llist$ ?v0)) (stream_of_llist$ (lmap$b ?v1 ?v0))))) :named a40))
(assert (! (forall ((?v0 A_llist$) (?v1 A_b_fun$)) (=> (not (lfinite$b ?v0)) (= (smap$c ?v1 (stream_of_llist$ ?v0)) (stream_of_llist$a (lmap$c ?v1 ?v0))))) :named a41))
(assert (! (forall ((?v0 B_llist$) (?v1 B_a_fun$)) (=> (not (lfinite$a ?v0)) (= (smap$d ?v1 (stream_of_llist$a ?v0)) (stream_of_llist$ (lmap$d ?v1 ?v0))))) :named a42))
(assert (! (forall ((?v0 B_llist$) (?v1 B_b_fun$)) (=> (not (lfinite$a ?v0)) (= (smap$e ?v1 (stream_of_llist$a ?v0)) (stream_of_llist$a (lmap$e ?v1 ?v0))))) :named a43))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_a_fun$)) (=> (not (lfinite$ ?v0)) (= (fun_app$aj (smap$ ?v1) (stream_of_llist$f ?v0)) (stream_of_llist$ (fun_app$ak (lmap$ ?v1) ?v0))))) :named a44))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_b_fun$)) (=> (not (lfinite$ ?v0)) (= (fun_app$al (smap$a ?v1) (stream_of_llist$f ?v0)) (stream_of_llist$a (fun_app$am (lmap$a ?v1) ?v0))))) :named a45))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_b_prod_fun$)) (=> (not (lfinite$b ?v0)) (= (smap$f ?v1 (stream_of_llist$ ?v0)) (stream_of_llist$f (lmap$f ?v1 ?v0))))) :named a46))
(assert (! (forall ((?v0 B_llist$) (?v1 B_a_b_prod_fun$)) (=> (not (lfinite$a ?v0)) (= (smap$g ?v1 (stream_of_llist$a ?v0)) (stream_of_llist$f (lmap$g ?v1 ?v0))))) :named a47))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_a_b_prod_fun$)) (=> (not (lfinite$ ?v0)) (= (smap$h ?v1 (stream_of_llist$f ?v0)) (stream_of_llist$f (lmap$h ?v1 ?v0))))) :named a48))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod_llist$) (?v1 A_b_prod_stream_a_stream_prod_a_stream_fun$)) (=> (not (lfinite$e ?v0)) (= (fun_app$an (smap$i ?v1) (stream_of_llist$d ?v0)) (stream_of_llist$g (lmap$i ?v1 ?v0))))) :named a49))
(assert (! (forall ((?v0 A_b_prod_stream_bool_fun$) (?v1 A_b_prod_stream$)) (=> (forall ((?v2 A_b_prod_llist$)) (=> (member$ ?v2 (collect$e uud$)) (fun_app$a ?v0 (stream_of_llist$f ?v2)))) (fun_app$a ?v0 ?v1))) :named a50))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (=> (forall ((?v2 A_llist$)) (=> (member$a ?v2 (collect$g uue$)) (fun_app$w ?v0 (stream_of_llist$ ?v2)))) (fun_app$w ?v0 ?v1))) :named a51))
(assert (! (forall ((?v0 B_stream_bool_fun$) (?v1 B_stream$)) (=> (forall ((?v2 B_llist$)) (=> (member$b ?v2 (collect$h uuf$)) (fun_app$t ?v0 (stream_of_llist$a ?v2)))) (fun_app$t ?v0 ?v1))) :named a52))
(assert (! (forall ((?v0 A_b_prod_stream$)) (=> (forall ((?v1 A_b_prod_llist$)) (=> (and (= ?v0 (stream_of_llist$f ?v1)) (member$ ?v1 (collect$e uud$))) false)) false)) :named a53))
(assert (! (forall ((?v0 A_stream$)) (=> (forall ((?v1 A_llist$)) (=> (and (= ?v0 (stream_of_llist$ ?v1)) (member$a ?v1 (collect$g uue$))) false)) false)) :named a54))
(assert (! (forall ((?v0 B_stream$)) (=> (forall ((?v1 B_llist$)) (=> (and (= ?v0 (stream_of_llist$a ?v1)) (member$b ?v1 (collect$h uuf$))) false)) false)) :named a55))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (=> (and (member$ ?v0 (collect$e uud$)) (member$ ?v1 (collect$e uud$))) (= (= (stream_of_llist$f ?v0) (stream_of_llist$f ?v1)) (= ?v0 ?v1)))) :named a56))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (member$a ?v0 (collect$g uue$)) (member$a ?v1 (collect$g uue$))) (= (= (stream_of_llist$ ?v0) (stream_of_llist$ ?v1)) (= ?v0 ?v1)))) :named a57))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (member$b ?v0 (collect$h uuf$)) (member$b ?v1 (collect$h uuf$))) (= (= (stream_of_llist$a ?v0) (stream_of_llist$a ?v1)) (= ?v0 ?v1)))) :named a58))
(assert (! (forall ((?v0 A_a_b_prod_fun$) (?v1 A_llist$)) (= (lfinite$ (lmap$f ?v0 ?v1)) (lfinite$b ?v1))) :named a59))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 B_llist$)) (= (lfinite$ (lmap$g ?v0 ?v1)) (lfinite$a ?v1))) :named a60))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod_llist$)) (= (lfinite$ (lmap$h ?v0 ?v1)) (lfinite$ ?v1))) :named a61))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lfinite$b (lmap$b ?v0 ?v1)) (lfinite$b ?v1))) :named a62))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (lfinite$b (lmap$d ?v0 ?v1)) (lfinite$a ?v1))) :named a63))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (lfinite$a (lmap$c ?v0 ?v1)) (lfinite$b ?v1))) :named a64))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (lfinite$a (lmap$e ?v0 ?v1)) (lfinite$a ?v1))) :named a65))
(assert (! (forall ((?v0 A_b_prod_a_fun$) (?v1 A_b_prod_llist$)) (= (lfinite$b (fun_app$ak (lmap$ ?v0) ?v1)) (lfinite$ ?v1))) :named a66))
(assert (! (forall ((?v0 A_b_prod_b_fun$) (?v1 A_b_prod_llist$)) (= (lfinite$a (fun_app$am (lmap$a ?v0) ?v1)) (lfinite$ ?v1))) :named a67))
(assert (! (forall ((?v0 A_b_prod_stream$)) (= (smap$h uug$ ?v0) ?v0)) :named a68))
(assert (! (forall ((?v0 B_stream$)) (= (smap$e uuh$ ?v0) ?v0)) :named a69))
(assert (! (forall ((?v0 A_stream$)) (= (smap$b uui$ ?v0) ?v0)) :named a70))
(assert (! (forall ((?v0 A_b_prod_llist$)) (= (lmap$h uug$ ?v0) ?v0)) :named a71))
(assert (! (forall ((?v0 B_llist$)) (= (lmap$e uuh$ ?v0) ?v0)) :named a72))
(assert (! (forall ((?v0 A_llist$)) (= (lmap$b uui$ ?v0) ?v0)) :named a73))
(assert (! (forall ((?v0 Bool) (?v1 A_b_prod_stream_b_stream_bool_fun_fun$) (?v2 A_b_prod_stream_b_stream_prod$)) (= (fun_app$ao (case_prod$c (fun_app$v (uuj$ ?v0) ?v1)) ?v2) (and ?v0 (fun_app$ao (case_prod$c ?v1) ?v2)))) :named a74))
(assert (! (forall ((?v0 Bool) (?v1 A_b_prod_stream_a_stream_bool_fun_fun$) (?v2 A_b_prod_stream_a_stream_prod$)) (= (fun_app$ap (case_prod$d (fun_app$y (uuk$ ?v0) ?v1)) ?v2) (and ?v0 (fun_app$ap (case_prod$d ?v1) ?v2)))) :named a75))
(assert (! (forall ((?v0 Bool) (?v1 A_b_prod_llist_b_llist_bool_fun_fun$) (?v2 A_b_prod_llist_b_llist_prod$)) (= (fun_app$aq (case_prod$a (uul$ ?v0 ?v1)) ?v2) (and ?v0 (fun_app$aq (case_prod$a ?v1) ?v2)))) :named a76))
(assert (! (forall ((?v0 Bool) (?v1 A_b_prod_llist_a_llist_bool_fun_fun$) (?v2 A_b_prod_llist_a_llist_prod$)) (= (fun_app$ar (case_prod$b (uum$ ?v0 ?v1)) ?v2) (and ?v0 (fun_app$ar (case_prod$b ?v1) ?v2)))) :named a77))
(assert (! (forall ((?v0 Bool) (?v1 A_b_bool_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$as (case_prod$ (uun$ ?v0 ?v1)) ?v2) (and ?v0 (fun_app$as (case_prod$ ?v1) ?v2)))) :named a78))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_bool_fun_fun$) (?v1 A_b_prod_stream_b_stream_prod$)) (! (= (fun_app$ao (case_prod$c ?v0) ?v1) (fun_app$t (fun_app$u ?v0 (fst$d ?v1)) (snd$d ?v1))) :pattern ((fun_app$ao (case_prod$c ?v0) ?v1)))) :named a79))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_bool_fun_fun$) (?v1 A_b_prod_stream_a_stream_prod$)) (! (= (fun_app$ap (case_prod$d ?v0) ?v1) (fun_app$w (fun_app$x ?v0 (fst$c ?v1)) (snd$c ?v1))) :pattern ((fun_app$ap (case_prod$d ?v0) ?v1)))) :named a80))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_bool_fun_fun$) (?v1 A_b_prod_llist_b_llist_prod$)) (! (= (fun_app$aq (case_prod$a ?v0) ?v1) (fun_app$b (fun_app$r ?v0 (fst$b ?v1)) (snd$b ?v1))) :pattern ((fun_app$aq (case_prod$a ?v0) ?v1)))) :named a81))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_bool_fun_fun$) (?v1 A_b_prod_llist_a_llist_prod$)) (! (= (fun_app$ar (case_prod$b ?v0) ?v1) (fun_app$c (fun_app$s ?v0 (fst$a ?v1)) (snd$a ?v1))) :pattern ((fun_app$ar (case_prod$b ?v0) ?v1)))) :named a82))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_prod$)) (! (= (fun_app$as (case_prod$ ?v0) ?v1) (fun_app$z (fun_app$aa ?v0 (fst$ ?v1)) (snd$ ?v1))) :pattern ((fun_app$as (case_prod$ ?v0) ?v1)))) :named a83))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_bool_fun_fun$) (?v1 A_b_prod_stream_b_stream_prod$)) (! (= (fun_app$ao (case_prod$c ?v0) ?v1) (fun_app$t (fun_app$u ?v0 (fst$d ?v1)) (snd$d ?v1))) :pattern ((fun_app$ao (case_prod$c ?v0) ?v1)))) :named a84))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_bool_fun_fun$) (?v1 A_b_prod_stream_a_stream_prod$)) (! (= (fun_app$ap (case_prod$d ?v0) ?v1) (fun_app$w (fun_app$x ?v0 (fst$c ?v1)) (snd$c ?v1))) :pattern ((fun_app$ap (case_prod$d ?v0) ?v1)))) :named a85))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_bool_fun_fun$) (?v1 A_b_prod_llist_b_llist_prod$)) (! (= (fun_app$aq (case_prod$a ?v0) ?v1) (fun_app$b (fun_app$r ?v0 (fst$b ?v1)) (snd$b ?v1))) :pattern ((fun_app$aq (case_prod$a ?v0) ?v1)))) :named a86))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_bool_fun_fun$) (?v1 A_b_prod_llist_a_llist_prod$)) (! (= (fun_app$ar (case_prod$b ?v0) ?v1) (fun_app$c (fun_app$s ?v0 (fst$a ?v1)) (snd$a ?v1))) :pattern ((fun_app$ar (case_prod$b ?v0) ?v1)))) :named a87))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_prod$)) (! (= (fun_app$as (case_prod$ ?v0) ?v1) (fun_app$z (fun_app$aa ?v0 (fst$ ?v1)) (snd$ ?v1))) :pattern ((fun_app$as (case_prod$ ?v0) ?v1)))) :named a88))
(assert (! (forall ((?v0 B_stream_a_b_prod_stream_bool_fun_fun$) (?v1 A_b_prod_stream_b_stream_prod$) (?v2 Bool_bool_fun$) (?v3 A_b_prod_stream_b_stream_bool_fun_fun$)) (=> (and (fun_app$a (fun_app$at ?v0 (snd$d ?v1)) (fst$d ?v1)) (forall ((?v4 A_b_prod_stream$) (?v5 B_stream$)) (=> (fun_app$a (fun_app$at ?v0 ?v5) ?v4) (fun_app$au ?v2 (fun_app$t (fun_app$u ?v3 ?v4) ?v5))))) (fun_app$au ?v2 (fun_app$ao (case_prod$c ?v3) ?v1)))) :named a89))
(assert (! (forall ((?v0 A_stream_a_b_prod_stream_bool_fun_fun$) (?v1 A_b_prod_stream_a_stream_prod$) (?v2 Bool_bool_fun$) (?v3 A_b_prod_stream_a_stream_bool_fun_fun$)) (=> (and (fun_app$a (fun_app$av ?v0 (snd$c ?v1)) (fst$c ?v1)) (forall ((?v4 A_b_prod_stream$) (?v5 A_stream$)) (=> (fun_app$a (fun_app$av ?v0 ?v5) ?v4) (fun_app$au ?v2 (fun_app$w (fun_app$x ?v3 ?v4) ?v5))))) (fun_app$au ?v2 (fun_app$ap (case_prod$d ?v3) ?v1)))) :named a90))
(assert (! (forall ((?v0 B_llist_a_b_prod_llist_bool_fun_fun$) (?v1 A_b_prod_llist_b_llist_prod$) (?v2 Bool_bool_fun$) (?v3 A_b_prod_llist_b_llist_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$aw ?v0 (snd$b ?v1)) (fst$b ?v1)) (forall ((?v4 A_b_prod_llist$) (?v5 B_llist$)) (=> (fun_app$ (fun_app$aw ?v0 ?v5) ?v4) (fun_app$au ?v2 (fun_app$b (fun_app$r ?v3 ?v4) ?v5))))) (fun_app$au ?v2 (fun_app$aq (case_prod$a ?v3) ?v1)))) :named a91))
(assert (! (forall ((?v0 A_llist_a_b_prod_llist_bool_fun_fun$) (?v1 A_b_prod_llist_a_llist_prod$) (?v2 Bool_bool_fun$) (?v3 A_b_prod_llist_a_llist_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$ax ?v0 (snd$a ?v1)) (fst$a ?v1)) (forall ((?v4 A_b_prod_llist$) (?v5 A_llist$)) (=> (fun_app$ (fun_app$ax ?v0 ?v5) ?v4) (fun_app$au ?v2 (fun_app$c (fun_app$s ?v3 ?v4) ?v5))))) (fun_app$au ?v2 (fun_app$ar (case_prod$b ?v3) ?v1)))) :named a92))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_b_prod$) (?v2 Bool_bool_fun$) (?v3 A_b_bool_fun_fun$)) (=> (and (fun_app$ay (fun_app$az ?v0 (snd$ ?v1)) (fst$ ?v1)) (forall ((?v4 A$) (?v5 B$)) (=> (fun_app$ay (fun_app$az ?v0 ?v5) ?v4) (fun_app$au ?v2 (fun_app$z (fun_app$aa ?v3 ?v4) ?v5))))) (fun_app$au ?v2 (fun_app$as (case_prod$ ?v3) ?v1)))) :named a93))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_bool_fun_fun$)) (= (stream_all2$ ?v0) (relcompp$b (conversep$b (grp$d (collect$i (uuo$ ?v0)) (smap$j uup$))) (grp$e (collect$i (uuo$ ?v0)) (smap$k uuq$))))) :named a94))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_bool_fun_fun$)) (= (stream_all2$a ?v0) (relcompp$c (conversep$c (grp$f (collect$j (uur$ ?v0)) (smap$l uus$))) (grp$g (collect$j (uur$ ?v0)) (smap$i uut$))))) :named a95))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_bool_fun_fun$)) (= (stream_all2$b ?v0) (relcompp$d (conversep$d (grp$h (collect$k (uuu$ ?v0)) (smap$m uuv$))) (grp$i (collect$k (uuu$ ?v0)) (smap$n uuw$))))) :named a96))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_bool_fun_fun$)) (= (stream_all2$c ?v0) (relcompp$e (conversep$e (grp$j (collect$l (uux$ ?v0)) (smap$o uuy$))) (grp$k (collect$l (uux$ ?v0)) (smap$p uuz$))))) :named a97))
(assert (! (forall ((?v0 A_b_bool_fun_fun$)) (= (stream_all2$d ?v0) (fun_app$ag (relcompp$a (conversep$a (fun_app$ah (grp$b (collect$f (uva$ ?v0))) (smap$ uua$)))) (fun_app$ai (grp$c (collect$f (uva$ ?v0))) (smap$a uub$))))) :named a98))
(assert (! (forall ((?v0 A_b_prod_llist_set$) (?v1 A_b_prod_llist_set$) (?v2 A_b_prod_llist_b_llist_fun$) (?v3 A_b_prod_llist_a_llist_fun$)) (=> (= ?v0 ?v1) (= (relcompp$f (conversep$f (grp$a ?v0 ?v2)) (grp$ ?v0 ?v3)) (relcompp$f (conversep$f (grp$a ?v1 ?v2)) (grp$ ?v1 ?v3))))) :named a99))
(assert (! (forall ((?v0 A_b_prod_llist_set$) (?v1 A_b_prod_llist_set$) (?v2 A_b_prod_llist_b_llist_fun$) (?v3 A_b_prod_llist_b_llist_fun$)) (=> (= ?v0 ?v1) (= (relcompp$g (conversep$f (grp$a ?v0 ?v2)) (grp$a ?v0 ?v3)) (relcompp$g (conversep$f (grp$a ?v1 ?v2)) (grp$a ?v1 ?v3))))) :named a100))
(assert (! (forall ((?v0 A_b_prod_stream_set$) (?v1 A_b_prod_stream_set$) (?v2 A_b_prod_stream_b_stream_fun$) (?v3 A_b_prod_stream_a_stream_fun$)) (=> (= ?v0 ?v1) (= (fun_app$ba (relcompp$h (conversep$g (fun_app$ai (grp$c ?v0) ?v2))) (fun_app$ah (grp$b ?v0) ?v3)) (fun_app$ba (relcompp$h (conversep$g (fun_app$ai (grp$c ?v1) ?v2))) (fun_app$ah (grp$b ?v1) ?v3))))) :named a101))
(assert (! (forall ((?v0 A_b_prod_stream_set$) (?v1 A_b_prod_stream_set$) (?v2 A_b_prod_stream_b_stream_fun$) (?v3 A_b_prod_stream_b_stream_fun$)) (=> (= ?v0 ?v1) (= (fun_app$bb (relcompp$i (conversep$g (fun_app$ai (grp$c ?v0) ?v2))) (fun_app$ai (grp$c ?v0) ?v3)) (fun_app$bb (relcompp$i (conversep$g (fun_app$ai (grp$c ?v1) ?v2))) (fun_app$ai (grp$c ?v1) ?v3))))) :named a102))
(assert (! (forall ((?v0 A_b_prod_llist_set$) (?v1 A_b_prod_llist_set$) (?v2 A_b_prod_llist_a_llist_fun$) (?v3 A_b_prod_llist_a_llist_fun$)) (=> (= ?v0 ?v1) (= (relcompp$j (conversep$ (grp$ ?v0 ?v2)) (grp$ ?v0 ?v3)) (relcompp$j (conversep$ (grp$ ?v1 ?v2)) (grp$ ?v1 ?v3))))) :named a103))
(assert (! (forall ((?v0 A_b_prod_llist_set$) (?v1 A_b_prod_llist_set$) (?v2 A_b_prod_llist_a_llist_fun$) (?v3 A_b_prod_llist_b_llist_fun$)) (=> (= ?v0 ?v1) (= (relcompp$ (conversep$ (grp$ ?v0 ?v2)) (grp$a ?v0 ?v3)) (relcompp$ (conversep$ (grp$ ?v1 ?v2)) (grp$a ?v1 ?v3))))) :named a104))
(assert (! (forall ((?v0 A_b_prod_stream_set$) (?v1 A_b_prod_stream_set$) (?v2 A_b_prod_stream_a_stream_fun$) (?v3 A_b_prod_stream_a_stream_fun$)) (=> (= ?v0 ?v1) (= (fun_app$bc (relcompp$k (conversep$a (fun_app$ah (grp$b ?v0) ?v2))) (fun_app$ah (grp$b ?v0) ?v3)) (fun_app$bc (relcompp$k (conversep$a (fun_app$ah (grp$b ?v1) ?v2))) (fun_app$ah (grp$b ?v1) ?v3))))) :named a105))
(assert (! (forall ((?v0 A_b_prod_stream_set$) (?v1 A_b_prod_stream_set$) (?v2 A_b_prod_stream_a_stream_fun$) (?v3 A_b_prod_stream_b_stream_fun$)) (=> (= ?v0 ?v1) (= (fun_app$ag (relcompp$a (conversep$a (fun_app$ah (grp$b ?v0) ?v2))) (fun_app$ai (grp$c ?v0) ?v3)) (fun_app$ag (relcompp$a (conversep$a (fun_app$ah (grp$b ?v1) ?v2))) (fun_app$ai (grp$c ?v1) ?v3))))) :named a106))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_b_fun$) (?v3 A_b_fun$)) (=> (= ?v0 ?v1) (= (relcompp$l (conversep$h (grp$l ?v0 ?v2)) (grp$l ?v0 ?v3)) (relcompp$l (conversep$h (grp$l ?v1 ?v2)) (grp$l ?v1 ?v3))))) :named a107))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_prod_stream_set$) (?v1 A_b_prod_llist_a_llist_prod_stream_set$) (?v2 A_b_prod_llist_a_llist_prod_stream_a_llist_stream_fun$) (?v3 A_b_prod_llist_a_llist_prod_stream_a_llist_stream_fun$)) (=> (= ?v0 ?v1) (= (relcompp$m (conversep$i (grp$k ?v0 ?v2)) (grp$k ?v0 ?v3)) (relcompp$m (conversep$i (grp$k ?v1 ?v2)) (grp$k ?v1 ?v3))))) :named a108))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_prod_stream_a_llist_stream_prod$) (?v1 A_b_prod_llist_a_llist_prod_stream_set$) (?v2 A_b_prod_llist_a_llist_prod_stream_a_llist_stream_fun$)) (=> (member$c ?v0 (collect$m (case_prod$e (grp$k ?v1 ?v2)))) (member$d (fst$e ?v0) ?v1))) :named a109))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_prod$) (?v1 A_b_prod_stream_b_stream_prod_stream_set$) (?v2 A_b_prod_stream_b_stream_prod_stream_a_b_prod_stream_stream_fun$)) (=> (member$e ?v0 (collect$n (case_prod$f (grp$d ?v1 ?v2)))) (member$f (fst$f ?v0) ?v1))) :named a110))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_prod_stream_b_stream_stream_prod$) (?v1 A_b_prod_stream_b_stream_prod_stream_set$) (?v2 A_b_prod_stream_b_stream_prod_stream_b_stream_stream_fun$)) (=> (member$g ?v0 (collect$o (case_prod$g (grp$e ?v1 ?v2)))) (member$f (fst$g ?v0) ?v1))) :named a111))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_prod$) (?v1 A_b_prod_stream_a_stream_prod_stream_set$) (?v2 A_b_prod_stream_a_stream_prod_stream_a_b_prod_stream_stream_fun$)) (=> (member$h ?v0 (collect$p (case_prod$h (grp$f ?v1 ?v2)))) (member$i (fst$h ?v0) ?v1))) :named a112))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod_stream_a_stream_stream_prod$) (?v1 A_b_prod_stream_a_stream_prod_stream_set$) (?v2 A_b_prod_stream_a_stream_prod_stream_a_stream_stream_fun$)) (=> (member$j ?v0 (collect$q (case_prod$i (grp$g ?v1 ?v2)))) (member$i (fst$i ?v0) ?v1))) :named a113))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_prod$) (?v1 A_b_prod_llist_set$) (?v2 A_b_prod_llist_a_llist_fun$)) (=> (member$k ?v0 (collect$b (case_prod$b (grp$ ?v1 ?v2)))) (member$ (fst$a ?v0) ?v1))) :named a114))
(assert (! (forall ((?v0 A_b_prod_llist_b_llist_prod$) (?v1 A_b_prod_llist_set$) (?v2 A_b_prod_llist_b_llist_fun$)) (=> (member$l ?v0 (collect$a (case_prod$a (grp$a ?v1 ?v2)))) (member$ (fst$b ?v0) ?v1))) :named a115))
(assert (! (forall ((?v0 A_b_prod_stream_a_stream_prod$) (?v1 A_b_prod_stream_set$) (?v2 A_b_prod_stream_a_stream_fun$)) (=> (member$m ?v0 (collect$d (case_prod$d (fun_app$ah (grp$b ?v1) ?v2)))) (member$n (fst$c ?v0) ?v1))) :named a116))
(assert (! (forall ((?v0 A_b_prod_stream_b_stream_prod$) (?v1 A_b_prod_stream_set$) (?v2 A_b_prod_stream_b_stream_fun$)) (=> (member$o ?v0 (collect$c (case_prod$c (fun_app$ai (grp$c ?v1) ?v2)))) (member$n (fst$d ?v0) ?v1))) :named a117))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_set$) (?v2 A_b_fun$)) (=> (member$p ?v0 (collect$ (case_prod$ (grp$l ?v1 ?v2)))) (member$q (fst$ ?v0) ?v1))) :named a118))
(check-sat)
;(get-unsat-core)
