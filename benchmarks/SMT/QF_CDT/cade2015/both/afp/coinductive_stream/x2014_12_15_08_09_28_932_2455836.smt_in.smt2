; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 431
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-fun p$ () A_stream_bool_fun$)
(declare-fun s$ () A$)
(declare-fun x$ () A_stream$)
(declare-fun eSuc$ (Enat$) Enat$)
(declare-fun zero$ () Enat$)
(declare-fun sfirst$ (A_stream_bool_fun$ A_stream$) Enat$)
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun smember$ (A$) A_stream_bool_fun$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun pred_stream$ (A_bool_fun$) A_stream_bool_fun$)
(assert (! (not (= (sfirst$ p$ (sCons$ s$ x$)) (ite (fun_app$ p$ (sCons$ s$ x$)) zero$ (eSuc$ (sfirst$ p$ x$))))) :named a0))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (! (=> (fun_app$ ?v0 ?v1) (= (sfirst$ ?v0 ?v1) zero$)) :pattern ((sfirst$ ?v0 ?v1)))) :named a1))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (= (= (sfirst$ ?v0 ?v1) zero$) (fun_app$ ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a3))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (eSuc$ ?v0) (eSuc$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (eSuc$ ?v0) (eSuc$ ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 Enat$)) (= (not (= ?v0 zero$)) (exists ((?v1 Enat$)) (= ?v0 (eSuc$ ?v1))))) :named a6))
(assert (! (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Enat$)) (=> (= ?v0 (eSuc$ ?v1)) false))) false)) :named a7))
(assert (! (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Enat$)) (=> (= ?v0 (eSuc$ ?v1)) false))) false)) :named a8))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (=> (= ?v0 (eSuc$ ?v1)) (not (= ?v0 zero$)))) :named a9))
(assert (! (forall ((?v0 Enat$)) (not (= zero$ (eSuc$ ?v0)))) :named a10))
(assert (! (forall ((?v0 Enat$)) (not (= zero$ (eSuc$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_stream$)) (=> (forall ((?v1 A$) (?v2 A_stream$)) (=> (= ?v0 (sCons$ ?v1 ?v2)) false)) false)) :named a12))
(assert (! (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a13))
(assert (! (forall ((?v0 Enat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$ (smember$ ?v0) (sCons$ ?v1 ?v2)) (ite (= ?v0 ?v1) true (fun_app$ (smember$ ?v0) ?v2))) :pattern ((fun_app$ (smember$ ?v0) (sCons$ ?v1 ?v2))))) :named a15))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$ (pred_stream$ ?v0) (sCons$ ?v1 ?v2)) (and (fun_app$a ?v0 ?v1) (fun_app$ (pred_stream$ ?v0) ?v2))) :pattern ((fun_app$ (pred_stream$ ?v0) (sCons$ ?v1 ?v2))))) :named a16))
(check-sat)
;(get-unsat-core)
