; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 419
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-fun p$ (A_stream$) Bool)
(declare-fun ev$ (A_stream_bool_fun$) A_stream_bool_fun$)
(declare-fun uu$ () Nat_bool_fun$)
(declare-fun alw$ (A_stream_bool_fun$) A_stream_bool_fun$)
(declare-fun bot$ () Nat_set$)
(declare-fun uua$ () A_stream_bool_fun$)
(declare-fun uub$ () Nat_bool_fun$)
(declare-fun uuc$ (A_stream_bool_fun$) A_stream_bool_fun$)
(declare-fun uud$ (A_stream_bool_fun$) A_stream_bool_fun$)
(declare-fun uue$ (A_stream_bool_fun$) A_stream_bool_fun$)
(declare-fun bot$a () Nat_bool_fun$)
(declare-fun bot$b () Bool)
(declare-fun omega$ () A_stream$)
(declare-fun sdrop$ (Nat$ A_stream$) A_stream$)
(declare-fun member$ (Nat$ Nat_set$) Bool)
(declare-fun omega$a () A_stream$)
(declare-fun collect$ (Nat_bool_fun$) Nat_set$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$a (A_stream_bool_fun$ A_stream$) Bool)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (p$ (sdrop$ ?v0 omega$))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$a uua$ ?v0) (not (p$ ?v0))) :pattern ((fun_app$a uua$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (! (= (fun_app$a (uud$ ?v0) ?v1) (not (fun_app$a (alw$ (uuc$ ?v0)) ?v1))) :pattern ((fun_app$a (uud$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (! (= (fun_app$a (uue$ ?v0) ?v1) (not (fun_app$a (ev$ (uuc$ ?v0)) ?v1))) :pattern ((fun_app$a (uue$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (! (= (fun_app$a (uuc$ ?v0) ?v1) (not (fun_app$a ?v0 ?v1))) :pattern ((fun_app$a (uuc$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uub$ ?v0) false) :pattern ((fun_app$ uub$ ?v0)))) :named a5))
(assert (! (not (= (collect$ uu$) bot$)) :named a6))
(assert (! (fun_app$a (alw$ uua$) omega$) :named a7))
(assert (! (forall ((?v0 Nat_bool_fun$)) (= (= (collect$ ?v0) bot$) (forall ((?v1 Nat$)) (not (fun_app$ ?v0 ?v1))))) :named a8))
(assert (! (forall ((?v0 Nat_set$)) (= (forall ((?v1 Nat$)) (not (member$ ?v1 ?v0))) (= ?v0 bot$))) :named a9))
(assert (! (forall ((?v0 Nat_bool_fun$)) (= (= bot$ (collect$ ?v0)) (forall ((?v1 Nat$)) (not (fun_app$ ?v0 ?v1))))) :named a10))
(assert (! (forall ((?v0 Nat$)) (= (member$ ?v0 bot$) false)) :named a11))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ bot$a ?v0) bot$b) :pattern ((fun_app$ bot$a ?v0)))) :named a12))
(assert (! (fun_app$a (ev$ (alw$ uua$)) omega$a) :named a13))
(assert (! (= bot$ (collect$ uub$)) :named a14))
(assert (! (forall ((?v0 Nat_set$)) (= (exists ((?v1 Nat$)) (member$ ?v1 ?v0)) (not (= ?v0 bot$)))) :named a15))
(assert (! (forall ((?v0 Nat_set$)) (=> (forall ((?v1 Nat$)) (=> (member$ ?v1 ?v0) false)) (= ?v0 bot$))) :named a16))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat$)) (=> (= ?v0 bot$) (not (member$ ?v1 ?v0)))) :named a17))
(assert (! (forall ((?v0 Nat$)) (=> (member$ ?v0 bot$) false)) :named a18))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ bot$a ?v0) bot$b) :pattern ((fun_app$ bot$a ?v0)))) :named a19))
(assert (! (= bot$ (collect$ bot$a)) :named a20))
(assert (! (forall ((?v0 A_stream_bool_fun$)) (= (uud$ ?v0) (ev$ ?v0))) :named a21))
(assert (! (forall ((?v0 A_stream_bool_fun$)) (= (uue$ ?v0) (alw$ ?v0))) :named a22))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 Nat$) (?v2 A_stream$)) (=> (fun_app$a (alw$ (ev$ ?v0)) (sdrop$ ?v1 ?v2)) (fun_app$a (alw$ (ev$ ?v0)) ?v2))) :named a23))
(check-sat)
;(get-unsat-core)
