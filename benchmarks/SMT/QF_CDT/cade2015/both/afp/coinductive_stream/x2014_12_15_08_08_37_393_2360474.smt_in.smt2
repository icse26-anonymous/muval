; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 394
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-fun p$ () A_stream_bool_fun$)
(declare-fun ev$ (A_stream_bool_fun$) A_stream_bool_fun$)
(declare-fun uu$ () Nat_bool_fun$)
(declare-fun alw$ (A_stream_bool_fun$) A_stream_bool_fun$)
(declare-fun uua$ () A_stream_bool_fun$)
(declare-fun uub$ (A_stream_bool_fun$) A_stream_bool_fun$)
(declare-fun uuc$ (Nat$) Nat_bool_fun$)
(declare-fun uud$ (A_stream_bool_fun$) A_stream_bool_fun$)
(declare-fun uue$ (A_stream_bool_fun$) A_stream_bool_fun$)
(declare-fun card$ (Nat_set$) Nat$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Nat$ Nat$) Bool)
(declare-fun zero$ () Enat$)
(declare-fun omega$ () A_stream$)
(declare-fun sdrop$ (Nat$ A_stream$) A_stream$)
(declare-fun smap2$ (A_a_a_fun_fun$ A_stream$ A_stream$) A_stream$)
(declare-fun scount$ (A_stream_bool_fun$ A_stream$) Enat$)
(declare-fun collect$ (Nat_bool_fun$) Nat_set$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$a (A_stream_bool_fun$ A_stream$) Bool)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (fun_app$a p$ (sdrop$ ?v0 omega$))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$a uua$ ?v0) (not (fun_app$a p$ ?v0))) :pattern ((fun_app$a uua$ ?v0)))) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (uuc$ ?v0) ?v1) (less$ ?v1 ?v0)) :pattern ((fun_app$ (uuc$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (! (= (fun_app$a (uud$ ?v0) ?v1) (not (fun_app$a (alw$ (uub$ ?v0)) ?v1))) :pattern ((fun_app$a (uud$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (! (= (fun_app$a (uue$ ?v0) ?v1) (not (fun_app$a (ev$ (uub$ ?v0)) ?v1))) :pattern ((fun_app$a (uue$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (! (= (fun_app$a (uub$ ?v0) ?v1) (not (fun_app$a ?v0 ?v1))) :pattern ((fun_app$a (uub$ ?v0) ?v1)))) :named a5))
(assert (! (not (= (scount$ p$ omega$) (enat$ (card$ (collect$ uu$))))) :named a6))
(assert (! (fun_app$a (ev$ (alw$ uua$)) omega$) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (= (fun_app$a (ev$ ?v0) ?v1) (exists ((?v2 Nat$)) (fun_app$a ?v0 (sdrop$ ?v2 ?v1))))) :named a9))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (= (fun_app$a (alw$ ?v0) ?v1) (forall ((?v2 Nat$)) (fun_app$a ?v0 (sdrop$ ?v2 ?v1))))) :named a10))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$) (?v2 Nat$)) (=> (fun_app$a (alw$ ?v0) ?v1) (fun_app$a (alw$ ?v0) (sdrop$ ?v2 ?v1)))) :named a11))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (= (= (scount$ ?v0 ?v1) zero$) (fun_app$a (alw$ (uub$ ?v0)) ?v1))) :named a12))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (=> (= (scount$ ?v0 ?v1) zero$) (fun_app$a (alw$ (uub$ ?v0)) ?v1))) :named a13))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (! (=> (fun_app$a (alw$ (uub$ ?v0)) ?v1) (= (scount$ ?v0 ?v1) zero$)) :pattern ((scount$ ?v0 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (=> (not (fun_app$a ?v0 ?v1)) (= (scount$ ?v0 ?v1) (scount$ ?v0 (stl$ ?v1))))) :named a15))
(assert (! (forall ((?v0 Nat$)) (= (card$ (collect$ (uuc$ ?v0))) ?v0)) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_a_fun_fun$) (?v2 A_stream$) (?v3 A_stream$)) (= (sdrop$ ?v0 (smap2$ ?v1 ?v2 ?v3)) (smap2$ ?v1 (sdrop$ ?v0 ?v2) (sdrop$ ?v0 ?v3)))) :named a17))
(assert (! (forall ((?v0 A_stream_bool_fun$)) (= (alw$ (alw$ ?v0)) (alw$ ?v0))) :named a18))
(assert (! (forall ((?v0 A_stream_bool_fun$)) (= (ev$ (ev$ ?v0)) (ev$ ?v0))) :named a19))
(assert (! (forall ((?v0 A_stream_bool_fun$)) (= (uud$ ?v0) (ev$ ?v0))) :named a20))
(assert (! (forall ((?v0 A_stream_bool_fun$)) (= (uue$ ?v0) (alw$ ?v0))) :named a21))
(check-sat)
;(get-unsat-core)
