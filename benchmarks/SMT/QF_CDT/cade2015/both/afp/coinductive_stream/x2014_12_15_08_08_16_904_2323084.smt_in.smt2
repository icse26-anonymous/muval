; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 98
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort Nat_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun a$ () A$)
(declare-fun f$ () A_a_fun$)
(declare-fun uu$ () Nat_a_fun$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun uua$ (A_a_fun$ A$) A_bool_fun$)
(declare-fun uub$ (Nat_a_fun$) Nat_a_fun$)
(declare-fun uuc$ () A_a_fun$)
(declare-fun smap$ (A_a_fun$ A_stream$) A_stream$)
(declare-fun snth$ (A_stream$) Nat_a_fun$)
(declare-fun sset$ (A_stream$) A_set$)
(declare-fun sdrop$ (Nat$ A_stream$) A_stream$)
(declare-fun compow$ () Nat_a_a_fun_a_a_fun_fun_fun$)
(declare-fun funpow$ () Nat_a_a_fun_a_a_fun_fun_fun$)
(declare-fun of_seq$ (Nat_a_fun$) A_stream$)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (Nat_a_fun$ Nat$) A$)
(declare-fun fun_app$a (A_a_fun$ A$) A$)
(declare-fun fun_app$b (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$c (Nat_a_a_fun_a_a_fun_fun_fun$ Nat$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$d (A_bool_fun$ A$) Bool)
(declare-fun siterate$ (A_a_fun$ A$) A_stream$)
(declare-fun inf_llist$ (Nat_a_fun$) A_llist$)
(declare-fun stream_of_llist$ (A_llist$) A_stream$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (fun_app$a (fun_app$b (fun_app$c compow$ ?v0) f$) a$)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat$)) (! (= (fun_app$ (uub$ ?v0) ?v1) (fun_app$ ?v0 (suc$ ?v1))) :pattern ((fun_app$ (uub$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$d (uua$ ?v0 ?v1) ?v2) (exists ((?v3 Nat$)) (and (= ?v2 (fun_app$a (fun_app$b (fun_app$c compow$ ?v3) ?v0) ?v1)) true))) :pattern ((fun_app$d (uua$ ?v0 ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$a uuc$ ?v0) ?v0) :pattern ((fun_app$a uuc$ ?v0)))) :named a3))
(assert (! (not (= (siterate$ f$ a$) (of_seq$ uu$))) :named a4))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat$) (?v2 A$)) (= (fun_app$a ?v0 (fun_app$a (fun_app$b (fun_app$c compow$ ?v1) ?v0) ?v2)) (fun_app$a (fun_app$b (fun_app$c compow$ ?v1) ?v0) (fun_app$a ?v0 ?v2)))) :named a5))
(assert (! (= funpow$ compow$) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (sdrop$ ?v0 (siterate$ ?v1 ?v2)) (siterate$ ?v1 (fun_app$a (fun_app$b (fun_app$c compow$ ?v0) ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 Nat_a_fun$)) (= (snth$ (of_seq$ ?v0)) ?v0)) :named a8))
(assert (! (forall ((?v0 A_stream$)) (= (of_seq$ (snth$ ?v0)) ?v0)) :named a9))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 Nat$)) (= (fun_app$ (snth$ (siterate$ ?v0 ?v1)) ?v2) (fun_app$a (fun_app$b (fun_app$c compow$ ?v2) ?v0) ?v1))) :named a10))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (smap$ ?v0 (siterate$ ?v0 ?v1)) (siterate$ ?v0 (fun_app$a ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (siterate$ ?v0 ?v1) (sCons$ ?v1 (siterate$ ?v0 (fun_app$a ?v0 ?v1))))) :named a12))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (sset$ (siterate$ ?v0 ?v1)) (collect$ (uua$ ?v0 ?v1)))) :named a13))
(assert (! (forall ((?v0 Nat_a_fun$)) (= (stl$ (of_seq$ ?v0)) (of_seq$ (uub$ ?v0)))) :named a14))
(assert (! (forall ((?v0 Nat_a_fun$)) (! (= (of_seq$ ?v0) (stream_of_llist$ (inf_llist$ ?v0))) :pattern ((of_seq$ ?v0)))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a17))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a18))
(assert (! (forall ((?v0 A_stream$)) (= (smap$ uuc$ ?v0) ?v0)) :named a19))
(check-sat)
;(get-unsat-core)
