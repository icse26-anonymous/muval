; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 55
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_b_prod_set$ 0)
(declare-sort B_a_prod_set$ 0)
(declare-sort B_b_prod_set$ 0)
(declare-sort A_a_b_prod_fun$ 0)
(declare-sort A_b_a_prod_fun$ 0)
(declare-sort A_b_prod_a_fun$ 0)
(declare-sort A_b_prod_b_fun$ 0)
(declare-sort B_a_b_prod_fun$ 0)
(declare-sort B_b_a_prod_fun$ 0)
(declare-sort A_b_prod_bool_fun$ 0)
(declare-sort B_a_prod_bool_fun$ 0)
(declare-sort A_a_b_prod_prod_set$ 0)
(declare-sort A_b_a_prod_prod_set$ 0)
(declare-sort A_b_prod_a_prod_set$ 0)
(declare-sort B_a_prod_a_prod_set$ 0)
(declare-sort A_a_prod_a_a_prod_fun$ 0)
(declare-sort A_a_prod_a_b_prod_fun$ 0)
(declare-sort A_a_prod_b_a_prod_fun$ 0)
(declare-sort A_a_prod_b_b_prod_fun$ 0)
(declare-sort A_b_prod_a_a_prod_fun$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-sort A_b_prod_b_a_prod_fun$ 0)
(declare-sort A_b_prod_b_b_prod_fun$ 0)
(declare-sort B_a_prod_a_a_prod_fun$ 0)
(declare-sort B_a_prod_a_b_prod_fun$ 0)
(declare-sort B_a_prod_b_a_prod_fun$ 0)
(declare-sort A_a_prod_a_a_b_prod_prod_fun$ 0)
(declare-sort A_b_prod_a_a_b_prod_prod_fun$ 0)
(declare-sort A_a_fun_b_a_prod_b_a_prod_fun_fun$ 0)
(declare-sort A_b_fun_b_a_prod_a_b_prod_fun_fun$ 0)
(declare-sort B_a_fun_a_b_prod_b_a_prod_fun_fun$ 0)
(declare-sort B_b_fun_a_b_prod_a_b_prod_fun_fun$ 0)
(declare-sort A_a_b_prod_prod_a_b_prod_a_prod_fun$ 0)
(declare-sort A_b_a_prod_prod_b_a_prod_a_prod_fun$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_stream$ (sCons$ (shd$ A_b_prod$) (stl$ A_b_prod_stream$)))
  (A_stream$ (sCons$a (shd$a A$) (stl$a A_stream$)))
  (B_stream$ (sCons$b (shd$b B$) (stl$b B_stream$)))))
(declare-datatypes () ((A_a_b_prod_prod$ (pair$a (fst$a A$) (snd$a A_b_prod$)))
  (A_a_prod$ (pair$b (fst$b A$) (snd$b A$)))
  (B_a_prod$ (pair$c (fst$c B$) (snd$c A$)))
  (B_a_prod_a_prod$ (pair$d (fst$d B_a_prod$) (snd$d A$)))
  (A_b_a_prod_prod$ (pair$e (fst$e A$) (snd$e B_a_prod$)))
  (A_b_prod_a_prod$ (pair$f (fst$f A_b_prod$) (snd$f A$)))
  (B_b_prod$ (pair$g (fst$g B$) (snd$g B$)))))
(declare-fun a$ () A$)
(declare-fun b$ () B$)
(declare-fun f$ () A_a_fun$)
(declare-fun g$ () B_b_fun$)
(declare-fun uu$ (A_b_prod_set$) A_b_prod_bool_fun$)
(declare-fun top$ () A_b_a_prod_prod_set$)
(declare-fun uua$ (B_a_prod_set$) B_a_prod_bool_fun$)
(declare-fun swap$ () B_a_prod_a_b_prod_fun$)
(declare-fun szip$ (A_stream$ B_stream$) A_b_prod_stream$)
(declare-fun top$a () B_a_prod_a_prod_set$)
(declare-fun top$b () A_a_b_prod_prod_set$)
(declare-fun top$c () A_b_prod_a_prod_set$)
(declare-fun top$d () A_a_prod_set$)
(declare-fun top$e () B_a_prod_set$)
(declare-fun top$f () A_b_prod_set$)
(declare-fun top$g () A_set$)
(declare-fun top$h () B_set$)
(declare-fun top$i () B_b_prod_set$)
(declare-fun apfst$ (B_b_fun$) B_a_prod_b_a_prod_fun$)
(declare-fun apsnd$ (A_a_fun$) B_a_prod_b_a_prod_fun$)
(declare-fun image$ (A_b_prod_a_a_b_prod_prod_fun$ A_b_prod_set$) A_a_b_prod_prod_set$)
(declare-fun swap$a () A_b_prod_b_a_prod_fun$)
(declare-fun swap$b () A_b_a_prod_prod_b_a_prod_a_prod_fun$)
(declare-fun swap$c () A_a_b_prod_prod_a_b_prod_a_prod_fun$)
(declare-fun swap$d () A_a_prod_a_a_prod_fun$)
(declare-fun apfst$a (A_a_fun$) A_b_prod_a_b_prod_fun$)
(declare-fun apsnd$a (B_b_fun$) A_b_prod_a_b_prod_fun$)
(declare-fun image$a (A_b_prod_a_a_prod_fun$ A_b_prod_set$) A_a_prod_set$)
(declare-fun image$b (A_a_prod_a_a_b_prod_prod_fun$ A_a_prod_set$) A_a_b_prod_prod_set$)
(declare-fun image$c (A_a_prod_a_b_prod_fun$ A_a_prod_set$) A_b_prod_set$)
(declare-fun image$d (A_a_prod_a_a_prod_fun$ A_a_prod_set$) A_a_prod_set$)
(declare-fun image$e (A_b_prod_b_a_prod_fun$ A_b_prod_set$) B_a_prod_set$)
(declare-fun image$f (B_a_prod_a_b_prod_fun$ B_a_prod_set$) A_b_prod_set$)
(declare-fun image$g (B_a_prod_b_a_prod_fun$ B_a_prod_set$) B_a_prod_set$)
(declare-fun image$h (A_b_prod_a_b_prod_fun$ A_b_prod_set$) A_b_prod_set$)
(declare-fun image$i (A_a_fun$ A_set$) A_set$)
(declare-fun image$j (B_b_fun$ B_set$) B_set$)
(declare-fun image$k (B_a_fun$ B_set$) A_set$)
(declare-fun image$l (A_b_fun$ A_set$) B_set$)
(declare-fun image$m (A_b_prod_b_fun$ A_b_prod_set$) B_set$)
(declare-fun image$n (A_b_prod_a_fun$ A_b_prod_set$) A_set$)
(declare-fun image$o (A_b_a_prod_prod_b_a_prod_a_prod_fun$ A_b_a_prod_prod_set$) B_a_prod_a_prod_set$)
(declare-fun image$p (A_a_b_prod_prod_a_b_prod_a_prod_fun$ A_a_b_prod_prod_set$) A_b_prod_a_prod_set$)
(declare-fun image$q (A_a_b_prod_fun$ A_set$) A_b_prod_set$)
(declare-fun image$r (A_b_a_prod_fun$ A_set$) B_a_prod_set$)
(declare-fun image$s (B_a_b_prod_fun$ B_set$) A_b_prod_set$)
(declare-fun image$t (B_b_a_prod_fun$ B_set$) B_a_prod_set$)
(declare-fun image$u (A_a_prod_b_a_prod_fun$ A_a_prod_set$) B_a_prod_set$)
(declare-fun image$v (A_a_prod_b_b_prod_fun$ A_a_prod_set$) B_b_prod_set$)
(declare-fun image$w (A_b_prod_b_b_prod_fun$ A_b_prod_set$) B_b_prod_set$)
(declare-fun image$x (B_a_prod_a_a_prod_fun$ B_a_prod_set$) A_a_prod_set$)
(declare-fun member$ (B_a_prod$ B_a_prod_set$) Bool)
(declare-fun collect$ (A_b_prod_bool_fun$) A_b_prod_set$)
(declare-fun fun_app$ (B_a_prod_bool_fun$ B_a_prod$) Bool)
(declare-fun member$a (A_b_prod$ A_b_prod_set$) Bool)
(declare-fun member$b (A_a_b_prod_prod$ A_a_b_prod_prod_set$) Bool)
(declare-fun member$c (A_a_prod$ A_a_prod_set$) Bool)
(declare-fun member$d (A$ A_set$) Bool)
(declare-fun member$e (B$ B_set$) Bool)
(declare-fun collect$a (B_a_prod_bool_fun$) B_a_prod_set$)
(declare-fun fun_app$a (A_b_prod_bool_fun$ A_b_prod$) Bool)
(declare-fun fun_app$b (B_b_fun_a_b_prod_a_b_prod_fun_fun$ B_b_fun$) A_b_prod_a_b_prod_fun$)
(declare-fun fun_app$c (A_b_prod_a_a_b_prod_prod_fun$ A_b_prod$) A_a_b_prod_prod$)
(declare-fun fun_app$d (A_a_fun$ A$) A$)
(declare-fun fun_app$e (B_a_b_prod_fun$ B$) A_b_prod$)
(declare-fun fun_app$f (A_b_prod_a_a_prod_fun$ A_b_prod$) A_a_prod$)
(declare-fun fun_app$g (B_a_fun$ B$) A$)
(declare-fun fun_app$h (A_a_prod_a_a_b_prod_prod_fun$ A_a_prod$) A_a_b_prod_prod$)
(declare-fun fun_app$i (A_a_b_prod_fun$ A$) A_b_prod$)
(declare-fun fun_app$j (A_a_prod_a_b_prod_fun$ A_a_prod$) A_b_prod$)
(declare-fun fun_app$k (A_b_fun$ A$) B$)
(declare-fun fun_app$l (A_a_prod_a_a_prod_fun$ A_a_prod$) A_a_prod$)
(declare-fun fun_app$m (A_b_prod_b_a_prod_fun$ A_b_prod$) B_a_prod$)
(declare-fun fun_app$n (B_a_fun_a_b_prod_b_a_prod_fun_fun$ B_a_fun$) A_b_prod_b_a_prod_fun$)
(declare-fun fun_app$o (B_a_prod_a_b_prod_fun$ B_a_prod$) A_b_prod$)
(declare-fun fun_app$p (A_b_fun_b_a_prod_a_b_prod_fun_fun$ A_b_fun$) B_a_prod_a_b_prod_fun$)
(declare-fun fun_app$q (B_a_prod_b_a_prod_fun$ B_a_prod$) B_a_prod$)
(declare-fun fun_app$r (A_a_fun_b_a_prod_b_a_prod_fun_fun$ A_a_fun$) B_a_prod_b_a_prod_fun$)
(declare-fun fun_app$s (B_b_fun$ B$) B$)
(declare-fun fun_app$t (A_b_prod_a_b_prod_fun$ A_b_prod$) A_b_prod$)
(declare-fun fun_app$u (A_b_prod_b_fun$ A_b_prod$) B$)
(declare-fun fun_app$v (A_b_prod_a_fun$ A_b_prod$) A$)
(declare-fun fun_app$w (A_bool_fun$ A$) Bool)
(declare-fun fun_app$x (B_bool_fun$ B$) Bool)
(declare-fun fun_app$y (A_b_a_prod_fun$ A$) B_a_prod$)
(declare-fun fun_app$z (B_b_a_prod_fun$ B$) B_a_prod$)
(declare-fun map_prod$ (A_a_fun$) B_b_fun_a_b_prod_a_b_prod_fun_fun$)
(declare-fun siterate$ (A_a_fun$ A$) A_stream$)
(declare-fun map_prod$a (A_a_fun$ B_a_b_prod_fun$) A_b_prod_a_a_b_prod_prod_fun$)
(declare-fun map_prod$b (A_a_fun$ B_a_fun$) A_b_prod_a_a_prod_fun$)
(declare-fun map_prod$c (A_a_fun$ A_a_b_prod_fun$) A_a_prod_a_a_b_prod_prod_fun$)
(declare-fun map_prod$d (A_a_fun$ A_b_fun$) A_a_prod_a_b_prod_fun$)
(declare-fun map_prod$e (A_a_fun$ A_a_fun$) A_a_prod_a_a_prod_fun$)
(declare-fun map_prod$f (A_b_fun$) B_a_fun_a_b_prod_b_a_prod_fun_fun$)
(declare-fun map_prod$g (B_a_fun$) A_b_fun_b_a_prod_a_b_prod_fun_fun$)
(declare-fun map_prod$h (B_b_fun$) A_a_fun_b_a_prod_b_a_prod_fun_fun$)
(declare-fun map_prod$i (A_b_fun$ A_a_fun$) A_a_prod_b_a_prod_fun$)
(declare-fun map_prod$j (A_b_fun$ A_b_fun$) A_a_prod_b_b_prod_fun$)
(declare-fun map_prod$k (A_b_fun$ B_b_fun$) A_b_prod_b_b_prod_fun$)
(declare-fun map_prod$l (B_a_fun$ A_a_fun$) B_a_prod_a_a_prod_fun$)
(declare-fun siterate$a (B_b_fun$ B$) B_stream$)
(declare-fun siterate$b (A_b_prod_a_b_prod_fun$ A_b_prod$) A_b_prod_stream$)
(assert (! (forall ((?v0 B_a_prod_set$) (?v1 B_a_prod$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$ (uua$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_b_prod_set$) (?v1 A_b_prod$)) (! (= (fun_app$a (uu$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$a (uu$ ?v0) ?v1)))) :named a1))
(assert (! (not (= (szip$ (siterate$ f$ a$) (siterate$a g$ b$)) (siterate$b (fun_app$b (map_prod$ f$) g$) (pair$ a$ b$)))) :named a2))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_b_prod_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$c (map_prod$a ?v0 ?v1) (pair$ ?v2 ?v3)) (pair$a (fun_app$d ?v0 ?v2) (fun_app$e ?v1 ?v3))) :pattern ((fun_app$c (map_prod$a ?v0 ?v1) (pair$ ?v2 ?v3))))) :named a3))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$f (map_prod$b ?v0 ?v1) (pair$ ?v2 ?v3)) (pair$b (fun_app$d ?v0 ?v2) (fun_app$g ?v1 ?v3))) :pattern ((fun_app$f (map_prod$b ?v0 ?v1) (pair$ ?v2 ?v3))))) :named a4))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_b_prod_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$h (map_prod$c ?v0 ?v1) (pair$b ?v2 ?v3)) (pair$a (fun_app$d ?v0 ?v2) (fun_app$i ?v1 ?v3))) :pattern ((fun_app$h (map_prod$c ?v0 ?v1) (pair$b ?v2 ?v3))))) :named a5))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_b_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$j (map_prod$d ?v0 ?v1) (pair$b ?v2 ?v3)) (pair$ (fun_app$d ?v0 ?v2) (fun_app$k ?v1 ?v3))) :pattern ((fun_app$j (map_prod$d ?v0 ?v1) (pair$b ?v2 ?v3))))) :named a6))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$l (map_prod$e ?v0 ?v1) (pair$b ?v2 ?v3)) (pair$b (fun_app$d ?v0 ?v2) (fun_app$d ?v1 ?v3))) :pattern ((fun_app$l (map_prod$e ?v0 ?v1) (pair$b ?v2 ?v3))))) :named a7))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$m (fun_app$n (map_prod$f ?v0) ?v1) (pair$ ?v2 ?v3)) (pair$c (fun_app$k ?v0 ?v2) (fun_app$g ?v1 ?v3))) :pattern ((fun_app$m (fun_app$n (map_prod$f ?v0) ?v1) (pair$ ?v2 ?v3))))) :named a8))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$o (fun_app$p (map_prod$g ?v0) ?v1) (pair$c ?v2 ?v3)) (pair$ (fun_app$g ?v0 ?v2) (fun_app$k ?v1 ?v3))) :pattern ((fun_app$o (fun_app$p (map_prod$g ?v0) ?v1) (pair$c ?v2 ?v3))))) :named a9))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_a_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$q (fun_app$r (map_prod$h ?v0) ?v1) (pair$c ?v2 ?v3)) (pair$c (fun_app$s ?v0 ?v2) (fun_app$d ?v1 ?v3))) :pattern ((fun_app$q (fun_app$r (map_prod$h ?v0) ?v1) (pair$c ?v2 ?v3))))) :named a10))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$t (fun_app$b (map_prod$ ?v0) ?v1) (pair$ ?v2 ?v3)) (pair$ (fun_app$d ?v0 ?v2) (fun_app$s ?v1 ?v3))) :pattern ((fun_app$t (fun_app$b (map_prod$ ?v0) ?v1) (pair$ ?v2 ?v3))))) :named a11))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (= (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (= (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 B_a_prod$)) (=> (forall ((?v1 B$) (?v2 A$)) (=> (= ?v0 (pair$c ?v1 ?v2)) false)) false)) :named a16))
(assert (! (forall ((?v0 A_b_prod$)) (=> (forall ((?v1 A$) (?v2 B$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a17))
(assert (! (forall ((?v0 B_a_prod$)) (exists ((?v1 B$) (?v2 A$)) (= ?v0 (pair$c ?v1 ?v2)))) :named a18))
(assert (! (forall ((?v0 A_b_prod$)) (exists ((?v1 A$) (?v2 B$)) (= ?v0 (pair$ ?v1 ?v2)))) :named a19))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (=> (and (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a20))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (=> (and (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a21))
(assert (! (forall ((?v0 B_a_prod$)) (=> (forall ((?v1 B$) (?v2 A$)) (=> (= ?v0 (pair$c ?v1 ?v2)) false)) false)) :named a22))
(assert (! (forall ((?v0 A_b_prod$)) (=> (forall ((?v1 A$) (?v2 B$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a23))
(assert (! (forall ((?v0 B_a_prod_bool_fun$) (?v1 B_a_prod$)) (=> (forall ((?v2 B$) (?v3 A$)) (fun_app$ ?v0 (pair$c ?v2 ?v3))) (fun_app$ ?v0 ?v1))) :named a24))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A_b_prod$)) (=> (forall ((?v2 A$) (?v3 B$)) (fun_app$a ?v0 (pair$ ?v2 ?v3))) (fun_app$a ?v0 ?v1))) :named a25))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B_a_prod_set$) (?v3 A$)) (=> (and (member$ (pair$c ?v0 ?v1) ?v2) (= ?v3 ?v1)) (member$ (pair$c ?v0 ?v3) ?v2))) :named a26))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_b_prod_set$) (?v3 B$)) (=> (and (member$a (pair$ ?v0 ?v1) ?v2) (= ?v3 ?v1)) (member$a (pair$ ?v0 ?v3) ?v2))) :named a27))
(assert (! (forall ((?v0 B$) (?v1 A$)) (= (fun_app$o swap$ (pair$c ?v0 ?v1)) (pair$ ?v1 ?v0))) :named a28))
(assert (! (forall ((?v0 A$) (?v1 B$)) (= (fun_app$m swap$a (pair$ ?v0 ?v1)) (pair$c ?v1 ?v0))) :named a29))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_b_prod_set$) (?v3 A_a_fun$) (?v4 B_a_b_prod_fun$)) (=> (member$a (pair$ ?v0 ?v1) ?v2) (member$b (pair$a (fun_app$d ?v3 ?v0) (fun_app$e ?v4 ?v1)) (image$ (map_prod$a ?v3 ?v4) ?v2)))) :named a30))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_b_prod_set$) (?v3 A_a_fun$) (?v4 B_a_fun$)) (=> (member$a (pair$ ?v0 ?v1) ?v2) (member$c (pair$b (fun_app$d ?v3 ?v0) (fun_app$g ?v4 ?v1)) (image$a (map_prod$b ?v3 ?v4) ?v2)))) :named a31))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_a_prod_set$) (?v3 A_a_fun$) (?v4 A_a_b_prod_fun$)) (=> (member$c (pair$b ?v0 ?v1) ?v2) (member$b (pair$a (fun_app$d ?v3 ?v0) (fun_app$i ?v4 ?v1)) (image$b (map_prod$c ?v3 ?v4) ?v2)))) :named a32))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_a_prod_set$) (?v3 A_a_fun$) (?v4 A_b_fun$)) (=> (member$c (pair$b ?v0 ?v1) ?v2) (member$a (pair$ (fun_app$d ?v3 ?v0) (fun_app$k ?v4 ?v1)) (image$c (map_prod$d ?v3 ?v4) ?v2)))) :named a33))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_a_prod_set$) (?v3 A_a_fun$) (?v4 A_a_fun$)) (=> (member$c (pair$b ?v0 ?v1) ?v2) (member$c (pair$b (fun_app$d ?v3 ?v0) (fun_app$d ?v4 ?v1)) (image$d (map_prod$e ?v3 ?v4) ?v2)))) :named a34))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_b_prod_set$) (?v3 A_b_fun$) (?v4 B_a_fun$)) (=> (member$a (pair$ ?v0 ?v1) ?v2) (member$ (pair$c (fun_app$k ?v3 ?v0) (fun_app$g ?v4 ?v1)) (image$e (fun_app$n (map_prod$f ?v3) ?v4) ?v2)))) :named a35))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B_a_prod_set$) (?v3 B_a_fun$) (?v4 A_b_fun$)) (=> (member$ (pair$c ?v0 ?v1) ?v2) (member$a (pair$ (fun_app$g ?v3 ?v0) (fun_app$k ?v4 ?v1)) (image$f (fun_app$p (map_prod$g ?v3) ?v4) ?v2)))) :named a36))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B_a_prod_set$) (?v3 B_b_fun$) (?v4 A_a_fun$)) (=> (member$ (pair$c ?v0 ?v1) ?v2) (member$ (pair$c (fun_app$s ?v3 ?v0) (fun_app$d ?v4 ?v1)) (image$g (fun_app$r (map_prod$h ?v3) ?v4) ?v2)))) :named a37))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_b_prod_set$) (?v3 A_a_fun$) (?v4 B_b_fun$)) (=> (member$a (pair$ ?v0 ?v1) ?v2) (member$a (pair$ (fun_app$d ?v3 ?v0) (fun_app$s ?v4 ?v1)) (image$h (fun_app$b (map_prod$ ?v3) ?v4) ?v2)))) :named a38))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B$) (?v2 A$)) (! (= (fun_app$q (apsnd$ ?v0) (pair$c ?v1 ?v2)) (pair$c ?v1 (fun_app$d ?v0 ?v2))) :pattern ((fun_app$q (apsnd$ ?v0) (pair$c ?v1 ?v2))))) :named a39))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$t (apsnd$a ?v0) (pair$ ?v1 ?v2)) (pair$ ?v1 (fun_app$s ?v0 ?v2))) :pattern ((fun_app$t (apsnd$a ?v0) (pair$ ?v1 ?v2))))) :named a40))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$) (?v2 A$)) (! (= (fun_app$q (apfst$ ?v0) (pair$c ?v1 ?v2)) (pair$c (fun_app$s ?v0 ?v1) ?v2)) :pattern ((fun_app$q (apfst$ ?v0) (pair$c ?v1 ?v2))))) :named a41))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$t (apfst$a ?v0) (pair$ ?v1 ?v2)) (pair$ (fun_app$d ?v0 ?v1) ?v2)) :pattern ((fun_app$t (apfst$a ?v0) (pair$ ?v1 ?v2))))) :named a42))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_fun$) (?v2 B_a_b_prod_fun$) (?v3 A_b_prod_set$)) (=> (and (member$b ?v0 (image$ (map_prod$a ?v1 ?v2) ?v3)) (forall ((?v4 A$) (?v5 B$)) (=> (and (= ?v0 (pair$a (fun_app$d ?v1 ?v4) (fun_app$e ?v2 ?v5))) (member$a (pair$ ?v4 ?v5) ?v3)) false))) false)) :named a43))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_fun$) (?v2 B_a_fun$) (?v3 A_b_prod_set$)) (=> (and (member$c ?v0 (image$a (map_prod$b ?v1 ?v2) ?v3)) (forall ((?v4 A$) (?v5 B$)) (=> (and (= ?v0 (pair$b (fun_app$d ?v1 ?v4) (fun_app$g ?v2 ?v5))) (member$a (pair$ ?v4 ?v5) ?v3)) false))) false)) :named a44))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_fun$) (?v2 A_a_b_prod_fun$) (?v3 A_a_prod_set$)) (=> (and (member$b ?v0 (image$b (map_prod$c ?v1 ?v2) ?v3)) (forall ((?v4 A$) (?v5 A$)) (=> (and (= ?v0 (pair$a (fun_app$d ?v1 ?v4) (fun_app$i ?v2 ?v5))) (member$c (pair$b ?v4 ?v5) ?v3)) false))) false)) :named a45))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_a_fun$) (?v2 A_b_fun$) (?v3 A_a_prod_set$)) (=> (and (member$a ?v0 (image$c (map_prod$d ?v1 ?v2) ?v3)) (forall ((?v4 A$) (?v5 A$)) (=> (and (= ?v0 (pair$ (fun_app$d ?v1 ?v4) (fun_app$k ?v2 ?v5))) (member$c (pair$b ?v4 ?v5) ?v3)) false))) false)) :named a46))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_prod_set$)) (=> (and (member$c ?v0 (image$d (map_prod$e ?v1 ?v2) ?v3)) (forall ((?v4 A$) (?v5 A$)) (=> (and (= ?v0 (pair$b (fun_app$d ?v1 ?v4) (fun_app$d ?v2 ?v5))) (member$c (pair$b ?v4 ?v5) ?v3)) false))) false)) :named a47))
(assert (! (forall ((?v0 A_b_prod$) (?v1 B_a_fun$) (?v2 A_b_fun$) (?v3 B_a_prod_set$)) (=> (and (member$a ?v0 (image$f (fun_app$p (map_prod$g ?v1) ?v2) ?v3)) (forall ((?v4 B$) (?v5 A$)) (=> (and (= ?v0 (pair$ (fun_app$g ?v1 ?v4) (fun_app$k ?v2 ?v5))) (member$ (pair$c ?v4 ?v5) ?v3)) false))) false)) :named a48))
(assert (! (forall ((?v0 B_a_prod$) (?v1 A_b_fun$) (?v2 B_a_fun$) (?v3 A_b_prod_set$)) (=> (and (member$ ?v0 (image$e (fun_app$n (map_prod$f ?v1) ?v2) ?v3)) (forall ((?v4 A$) (?v5 B$)) (=> (and (= ?v0 (pair$c (fun_app$k ?v1 ?v4) (fun_app$g ?v2 ?v5))) (member$a (pair$ ?v4 ?v5) ?v3)) false))) false)) :named a49))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_b_fun$) (?v2 A_a_fun$) (?v3 B_a_prod_set$)) (=> (and (member$ ?v0 (image$g (fun_app$r (map_prod$h ?v1) ?v2) ?v3)) (forall ((?v4 B$) (?v5 A$)) (=> (and (= ?v0 (pair$c (fun_app$s ?v1 ?v4) (fun_app$d ?v2 ?v5))) (member$ (pair$c ?v4 ?v5) ?v3)) false))) false)) :named a50))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_a_fun$) (?v2 B_b_fun$) (?v3 A_b_prod_set$)) (=> (and (member$a ?v0 (image$h (fun_app$b (map_prod$ ?v1) ?v2) ?v3)) (forall ((?v4 A$) (?v5 B$)) (=> (and (= ?v0 (pair$ (fun_app$d ?v1 ?v4) (fun_app$s ?v2 ?v5))) (member$a (pair$ ?v4 ?v5) ?v3)) false))) false)) :named a51))
(assert (! (forall ((?v0 B_a_prod$)) (= (fun_app$m swap$a (fun_app$o swap$ ?v0)) ?v0)) :named a52))
(assert (! (forall ((?v0 A_b_prod$)) (= (fun_app$o swap$ (fun_app$m swap$a ?v0)) ?v0)) :named a53))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 A_b_prod_set$)) (= (member$ (pair$c ?v0 ?v1) (image$e swap$a ?v2)) (member$a (pair$ ?v1 ?v0) ?v2))) :named a54))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 B_a_prod_set$)) (= (member$a (pair$ ?v0 ?v1) (image$f swap$ ?v2)) (member$ (pair$c ?v1 ?v0) ?v2))) :named a55))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 B_a_prod$)) (= (fun_app$q (apsnd$ ?v0) (fun_app$q (apfst$ ?v1) ?v2)) (fun_app$q (apfst$ ?v1) (fun_app$q (apsnd$ ?v0) ?v2)))) :named a56))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_a_fun$) (?v2 A_b_prod$)) (= (fun_app$t (apsnd$a ?v0) (fun_app$t (apfst$a ?v1) ?v2)) (fun_app$t (apfst$a ?v1) (fun_app$t (apsnd$a ?v0) ?v2)))) :named a57))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v2)) (member$d ?v2 ?v3)) (member$d ?v0 (image$i ?v1 ?v3)))) :named a58))
(assert (! (forall ((?v0 B$) (?v1 B_b_fun$) (?v2 B$) (?v3 B_set$)) (=> (and (= ?v0 (fun_app$s ?v1 ?v2)) (member$e ?v2 ?v3)) (member$e ?v0 (image$j ?v1 ?v3)))) :named a59))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_a_b_prod_fun$) (?v2 A_b_prod$) (?v3 A_b_prod_set$)) (=> (and (= ?v0 (fun_app$t ?v1 ?v2)) (member$a ?v2 ?v3)) (member$a ?v0 (image$h ?v1 ?v3)))) :named a60))
(assert (! (forall ((?v0 B_a_prod$) (?v1 A_b_prod_b_a_prod_fun$) (?v2 A_b_prod$) (?v3 A_b_prod_set$)) (=> (and (= ?v0 (fun_app$m ?v1 ?v2)) (member$a ?v2 ?v3)) (member$ ?v0 (image$e ?v1 ?v3)))) :named a61))
(assert (! (forall ((?v0 A_b_prod$) (?v1 B_a_prod_a_b_prod_fun$) (?v2 B_a_prod$) (?v3 B_a_prod_set$)) (=> (and (= ?v0 (fun_app$o ?v1 ?v2)) (member$ ?v2 ?v3)) (member$a ?v0 (image$f ?v1 ?v3)))) :named a62))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_b_a_prod_fun$) (?v2 B_a_prod$) (?v3 B_a_prod_set$)) (=> (and (= ?v0 (fun_app$q ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (image$g ?v1 ?v3)))) :named a63))
(assert (! (forall ((?v0 A$) (?v1 B_a_fun$) (?v2 B$) (?v3 B_set$)) (=> (and (= ?v0 (fun_app$g ?v1 ?v2)) (member$e ?v2 ?v3)) (member$d ?v0 (image$k ?v1 ?v3)))) :named a64))
(assert (! (forall ((?v0 B$) (?v1 A_b_fun$) (?v2 A$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (member$d ?v2 ?v3)) (member$e ?v0 (image$l ?v1 ?v3)))) :named a65))
(assert (! (forall ((?v0 B$) (?v1 A_b_prod_b_fun$) (?v2 A_b_prod$) (?v3 A_b_prod_set$)) (=> (and (= ?v0 (fun_app$u ?v1 ?v2)) (member$a ?v2 ?v3)) (member$e ?v0 (image$m ?v1 ?v3)))) :named a66))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod_a_fun$) (?v2 A_b_prod$) (?v3 A_b_prod_set$)) (=> (and (= ?v0 (fun_app$v ?v1 ?v2)) (member$a ?v2 ?v3)) (member$d ?v0 (image$n ?v1 ?v3)))) :named a67))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_b_fun$) (?v2 B_a_prod$)) (=> (and (= ?v0 (fun_app$q (apfst$ ?v1) ?v2)) (forall ((?v3 B$) (?v4 A$)) (=> (and (= ?v2 (pair$c ?v3 ?v4)) (= ?v0 (pair$c (fun_app$s ?v1 ?v3) ?v4))) false))) false)) :named a68))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_a_fun$) (?v2 A_b_prod$)) (=> (and (= ?v0 (fun_app$t (apfst$a ?v1) ?v2)) (forall ((?v3 A$) (?v4 B$)) (=> (and (= ?v2 (pair$ ?v3 ?v4)) (= ?v0 (pair$ (fun_app$d ?v1 ?v3) ?v4))) false))) false)) :named a69))
(assert (! (= (image$o swap$b top$) top$a) :named a70))
(assert (! (= (image$p swap$c top$b) top$c) :named a71))
(assert (! (= (image$d swap$d top$d) top$d) :named a72))
(assert (! (= (image$f swap$ top$e) top$f) :named a73))
(assert (! (= (image$e swap$a top$f) top$e) :named a74))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_a_fun$)) (=> (member$d ?v0 ?v1) (member$d (fun_app$d ?v2 ?v0) (image$i ?v2 ?v1)))) :named a75))
(assert (! (forall ((?v0 B$) (?v1 B_set$) (?v2 B_b_fun$)) (=> (member$e ?v0 ?v1) (member$e (fun_app$s ?v2 ?v0) (image$j ?v2 ?v1)))) :named a76))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_set$) (?v2 A_b_prod_a_b_prod_fun$)) (=> (member$a ?v0 ?v1) (member$a (fun_app$t ?v2 ?v0) (image$h ?v2 ?v1)))) :named a77))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_set$) (?v2 A_b_prod_b_a_prod_fun$)) (=> (member$a ?v0 ?v1) (member$ (fun_app$m ?v2 ?v0) (image$e ?v2 ?v1)))) :named a78))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_set$) (?v2 B_a_prod_a_b_prod_fun$)) (=> (member$ ?v0 ?v1) (member$a (fun_app$o ?v2 ?v0) (image$f ?v2 ?v1)))) :named a79))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_set$) (?v2 B_a_prod_b_a_prod_fun$)) (=> (member$ ?v0 ?v1) (member$ (fun_app$q ?v2 ?v0) (image$g ?v2 ?v1)))) :named a80))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A$) (?v3 A_a_fun$)) (=> (and (member$d ?v0 ?v1) (= ?v2 (fun_app$d ?v3 ?v0))) (member$d ?v2 (image$i ?v3 ?v1)))) :named a81))
(assert (! (forall ((?v0 B$) (?v1 B_set$) (?v2 B$) (?v3 B_b_fun$)) (=> (and (member$e ?v0 ?v1) (= ?v2 (fun_app$s ?v3 ?v0))) (member$e ?v2 (image$j ?v3 ?v1)))) :named a82))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_set$) (?v2 A_b_prod$) (?v3 A_b_prod_a_b_prod_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$t ?v3 ?v0))) (member$a ?v2 (image$h ?v3 ?v1)))) :named a83))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_set$) (?v2 B_a_prod$) (?v3 A_b_prod_b_a_prod_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$m ?v3 ?v0))) (member$ ?v2 (image$e ?v3 ?v1)))) :named a84))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_set$) (?v2 A_b_prod$) (?v3 B_a_prod_a_b_prod_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$o ?v3 ?v0))) (member$a ?v2 (image$f ?v3 ?v1)))) :named a85))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_set$) (?v2 B_a_prod$) (?v3 B_a_prod_b_a_prod_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$q ?v3 ?v0))) (member$ ?v2 (image$g ?v3 ?v1)))) :named a86))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_set$) (?v2 A_bool_fun$)) (=> (forall ((?v3 A$)) (=> (member$d ?v3 (image$i ?v0 ?v1)) (fun_app$w ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$d ?v3 ?v1) (fun_app$w ?v2 (fun_app$d ?v0 ?v3)))))) :named a87))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_set$) (?v2 B_bool_fun$)) (=> (forall ((?v3 B$)) (=> (member$e ?v3 (image$j ?v0 ?v1)) (fun_app$x ?v2 ?v3))) (forall ((?v3 B$)) (=> (member$e ?v3 ?v1) (fun_app$x ?v2 (fun_app$s ?v0 ?v3)))))) :named a88))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod_set$) (?v2 A_b_prod_bool_fun$)) (=> (forall ((?v3 A_b_prod$)) (=> (member$a ?v3 (image$h ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A_b_prod$)) (=> (member$a ?v3 ?v1) (fun_app$a ?v2 (fun_app$t ?v0 ?v3)))))) :named a89))
(assert (! (forall ((?v0 B_a_prod_a_b_prod_fun$) (?v1 B_a_prod_set$) (?v2 A_b_prod_bool_fun$)) (=> (forall ((?v3 A_b_prod$)) (=> (member$a ?v3 (image$f ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 B_a_prod$)) (=> (member$ ?v3 ?v1) (fun_app$a ?v2 (fun_app$o ?v0 ?v3)))))) :named a90))
(assert (! (forall ((?v0 A_b_prod_b_a_prod_fun$) (?v1 A_b_prod_set$) (?v2 B_a_prod_bool_fun$)) (=> (forall ((?v3 B_a_prod$)) (=> (member$ ?v3 (image$e ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (forall ((?v3 A_b_prod$)) (=> (member$a ?v3 ?v1) (fun_app$ ?v2 (fun_app$m ?v0 ?v3)))))) :named a91))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_fun$) (?v1 B_a_prod_set$) (?v2 B_a_prod_bool_fun$)) (=> (forall ((?v3 B_a_prod$)) (=> (member$ ?v3 (image$g ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (forall ((?v3 B_a_prod$)) (=> (member$ ?v3 ?v1) (fun_app$ ?v2 (fun_app$q ?v0 ?v3)))))) :named a92))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_set$) (?v2 A_bool_fun$)) (=> (exists ((?v3 A$)) (and (member$d ?v3 (image$i ?v0 ?v1)) (fun_app$w ?v2 ?v3))) (exists ((?v3 A$)) (and (member$d ?v3 ?v1) (fun_app$w ?v2 (fun_app$d ?v0 ?v3)))))) :named a93))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_set$) (?v2 B_bool_fun$)) (=> (exists ((?v3 B$)) (and (member$e ?v3 (image$j ?v0 ?v1)) (fun_app$x ?v2 ?v3))) (exists ((?v3 B$)) (and (member$e ?v3 ?v1) (fun_app$x ?v2 (fun_app$s ?v0 ?v3)))))) :named a94))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod_set$) (?v2 A_b_prod_bool_fun$)) (=> (exists ((?v3 A_b_prod$)) (and (member$a ?v3 (image$h ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A_b_prod$)) (and (member$a ?v3 ?v1) (fun_app$a ?v2 (fun_app$t ?v0 ?v3)))))) :named a95))
(assert (! (forall ((?v0 B_a_prod_a_b_prod_fun$) (?v1 B_a_prod_set$) (?v2 A_b_prod_bool_fun$)) (=> (exists ((?v3 A_b_prod$)) (and (member$a ?v3 (image$f ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 B_a_prod$)) (and (member$ ?v3 ?v1) (fun_app$a ?v2 (fun_app$o ?v0 ?v3)))))) :named a96))
(assert (! (forall ((?v0 A_b_prod_b_a_prod_fun$) (?v1 A_b_prod_set$) (?v2 B_a_prod_bool_fun$)) (=> (exists ((?v3 B_a_prod$)) (and (member$ ?v3 (image$e ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (exists ((?v3 A_b_prod$)) (and (member$a ?v3 ?v1) (fun_app$ ?v2 (fun_app$m ?v0 ?v3)))))) :named a97))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_fun$) (?v1 B_a_prod_set$) (?v2 B_a_prod_bool_fun$)) (=> (exists ((?v3 B_a_prod$)) (and (member$ ?v3 (image$g ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (exists ((?v3 B_a_prod$)) (and (member$ ?v3 ?v1) (fun_app$ ?v2 (fun_app$q ?v0 ?v3)))))) :named a98))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$d ?v4 ?v1) (= (fun_app$d ?v2 ?v4) (fun_app$d ?v3 ?v4))))) (= (image$i ?v2 ?v0) (image$i ?v3 ?v1)))) :named a99))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_b_fun$) (?v3 B_b_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 B$)) (=> (member$e ?v4 ?v1) (= (fun_app$s ?v2 ?v4) (fun_app$s ?v3 ?v4))))) (= (image$j ?v2 ?v0) (image$j ?v3 ?v1)))) :named a100))
(assert (! (forall ((?v0 A_b_prod_set$) (?v1 A_b_prod_set$) (?v2 A_b_prod_a_b_prod_fun$) (?v3 A_b_prod_a_b_prod_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_b_prod$)) (=> (member$a ?v4 ?v1) (= (fun_app$t ?v2 ?v4) (fun_app$t ?v3 ?v4))))) (= (image$h ?v2 ?v0) (image$h ?v3 ?v1)))) :named a101))
(assert (! (forall ((?v0 A_b_prod_set$) (?v1 A_b_prod_set$) (?v2 A_b_prod_b_a_prod_fun$) (?v3 A_b_prod_b_a_prod_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_b_prod$)) (=> (member$a ?v4 ?v1) (= (fun_app$m ?v2 ?v4) (fun_app$m ?v3 ?v4))))) (= (image$e ?v2 ?v0) (image$e ?v3 ?v1)))) :named a102))
(assert (! (forall ((?v0 B_a_prod_set$) (?v1 B_a_prod_set$) (?v2 B_a_prod_a_b_prod_fun$) (?v3 B_a_prod_a_b_prod_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 B_a_prod$)) (=> (member$ ?v4 ?v1) (= (fun_app$o ?v2 ?v4) (fun_app$o ?v3 ?v4))))) (= (image$f ?v2 ?v0) (image$f ?v3 ?v1)))) :named a103))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A_set$)) (= (member$d ?v0 (image$i ?v1 ?v2)) (exists ((?v3 A$)) (and (member$d ?v3 ?v2) (= ?v0 (fun_app$d ?v1 ?v3)))))) :named a104))
(assert (! (forall ((?v0 B$) (?v1 B_b_fun$) (?v2 B_set$)) (= (member$e ?v0 (image$j ?v1 ?v2)) (exists ((?v3 B$)) (and (member$e ?v3 ?v2) (= ?v0 (fun_app$s ?v1 ?v3)))))) :named a105))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_a_b_prod_fun$) (?v2 A_b_prod_set$)) (= (member$a ?v0 (image$h ?v1 ?v2)) (exists ((?v3 A_b_prod$)) (and (member$a ?v3 ?v2) (= ?v0 (fun_app$t ?v1 ?v3)))))) :named a106))
(assert (! (forall ((?v0 A_b_prod$) (?v1 B_a_prod_a_b_prod_fun$) (?v2 B_a_prod_set$)) (= (member$a ?v0 (image$f ?v1 ?v2)) (exists ((?v3 B_a_prod$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$o ?v1 ?v3)))))) :named a107))
(assert (! (forall ((?v0 B_a_prod$) (?v1 A_b_prod_b_a_prod_fun$) (?v2 A_b_prod_set$)) (= (member$ ?v0 (image$e ?v1 ?v2)) (exists ((?v3 A_b_prod$)) (and (member$a ?v3 ?v2) (= ?v0 (fun_app$m ?v1 ?v3)))))) :named a108))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_b_a_prod_fun$) (?v2 B_a_prod_set$)) (= (member$ ?v0 (image$g ?v1 ?v2)) (exists ((?v3 B_a_prod$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$q ?v1 ?v3)))))) :named a109))
(assert (! (forall ((?v0 B_a_prod$)) (member$ ?v0 top$e)) :named a110))
(assert (! (forall ((?v0 A$)) (member$d ?v0 top$g)) :named a111))
(assert (! (forall ((?v0 B$)) (member$e ?v0 top$h)) :named a112))
(assert (! (forall ((?v0 A_b_prod$)) (member$a ?v0 top$f)) :named a113))
(assert (! (forall ((?v0 B_a_prod_set$)) (=> (forall ((?v1 B_a_prod$)) (member$ ?v1 ?v0)) (= top$e ?v0))) :named a114))
(assert (! (forall ((?v0 A_set$)) (=> (forall ((?v1 A$)) (member$d ?v1 ?v0)) (= top$g ?v0))) :named a115))
(assert (! (forall ((?v0 B_set$)) (=> (forall ((?v1 B$)) (member$e ?v1 ?v0)) (= top$h ?v0))) :named a116))
(assert (! (forall ((?v0 A_b_prod_set$)) (=> (forall ((?v1 A_b_prod$)) (member$a ?v1 ?v0)) (= top$f ?v0))) :named a117))
(assert (! (exists ((?v0 B_a_prod$)) (member$ ?v0 top$e)) :named a118))
(assert (! (exists ((?v0 A$)) (member$d ?v0 top$g)) :named a119))
(assert (! (exists ((?v0 B$)) (member$e ?v0 top$h)) :named a120))
(assert (! (exists ((?v0 A_b_prod$)) (member$a ?v0 top$f)) :named a121))
(assert (! (forall ((?v0 A_b_prod_set$)) (= (collect$ (uu$ ?v0)) ?v0)) :named a122))
(assert (! (forall ((?v0 B_a_prod_set$)) (= (collect$a (uua$ ?v0)) ?v0)) :named a123))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_bool_fun$)) (= (member$a ?v0 (collect$ ?v1)) (fun_app$a ?v1 ?v0))) :named a124))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_bool_fun$)) (= (member$ ?v0 (collect$a ?v1)) (fun_app$ ?v1 ?v0))) :named a125))
(assert (! (forall ((?v0 A_b_prod$) (?v1 B_a_prod_a_b_prod_fun$) (?v2 B_a_prod$)) (=> (= ?v0 (fun_app$o ?v1 ?v2)) (member$a ?v0 (image$f ?v1 top$e)))) :named a126))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A$)) (=> (= ?v0 (fun_app$d ?v1 ?v2)) (member$d ?v0 (image$i ?v1 top$g)))) :named a127))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_a_b_prod_fun$) (?v2 A$)) (=> (= ?v0 (fun_app$i ?v1 ?v2)) (member$a ?v0 (image$q ?v1 top$g)))) :named a128))
(assert (! (forall ((?v0 B_a_prod$) (?v1 A_b_a_prod_fun$) (?v2 A$)) (=> (= ?v0 (fun_app$y ?v1 ?v2)) (member$ ?v0 (image$r ?v1 top$g)))) :named a129))
(assert (! (forall ((?v0 B$) (?v1 B_b_fun$) (?v2 B$)) (=> (= ?v0 (fun_app$s ?v1 ?v2)) (member$e ?v0 (image$j ?v1 top$h)))) :named a130))
(assert (! (forall ((?v0 A_b_prod$) (?v1 B_a_b_prod_fun$) (?v2 B$)) (=> (= ?v0 (fun_app$e ?v1 ?v2)) (member$a ?v0 (image$s ?v1 top$h)))) :named a131))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_b_a_prod_fun$) (?v2 B$)) (=> (= ?v0 (fun_app$z ?v1 ?v2)) (member$ ?v0 (image$t ?v1 top$h)))) :named a132))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_a_b_prod_fun$) (?v2 A_b_prod$)) (=> (= ?v0 (fun_app$t ?v1 ?v2)) (member$a ?v0 (image$h ?v1 top$f)))) :named a133))
(assert (! (forall ((?v0 B_a_prod$) (?v1 A_b_prod_b_a_prod_fun$) (?v2 A_b_prod$)) (=> (= ?v0 (fun_app$m ?v1 ?v2)) (member$ ?v0 (image$e ?v1 top$f)))) :named a134))
(assert (! (forall ((?v0 B_a_prod_a_b_prod_fun$) (?v1 B_a_prod$)) (member$a (fun_app$o ?v0 ?v1) (image$f ?v0 top$e))) :named a135))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (member$d (fun_app$d ?v0 ?v1) (image$i ?v0 top$g))) :named a136))
(assert (! (forall ((?v0 A_a_b_prod_fun$) (?v1 A$)) (member$a (fun_app$i ?v0 ?v1) (image$q ?v0 top$g))) :named a137))
(assert (! (forall ((?v0 A_b_a_prod_fun$) (?v1 A$)) (member$ (fun_app$y ?v0 ?v1) (image$r ?v0 top$g))) :named a138))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (member$e (fun_app$s ?v0 ?v1) (image$j ?v0 top$h))) :named a139))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 B$)) (member$a (fun_app$e ?v0 ?v1) (image$s ?v0 top$h))) :named a140))
(assert (! (forall ((?v0 B_b_a_prod_fun$) (?v1 B$)) (member$ (fun_app$z ?v0 ?v1) (image$t ?v0 top$h))) :named a141))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod$)) (member$a (fun_app$t ?v0 ?v1) (image$h ?v0 top$f))) :named a142))
(assert (! (forall ((?v0 A_b_prod_b_a_prod_fun$) (?v1 A_b_prod$)) (member$ (fun_app$m ?v0 ?v1) (image$e ?v0 top$f))) :named a143))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$)) (=> (and (= (image$i ?v0 top$g) top$g) (= (image$j ?v1 top$h) top$h)) (= (image$h (fun_app$b (map_prod$ ?v0) ?v1) top$f) top$f))) :named a144))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (=> (and (= (image$i ?v0 top$g) top$g) (= (image$i ?v1 top$g) top$g)) (= (image$d (map_prod$e ?v0 ?v1) top$d) top$d))) :named a145))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_b_fun$)) (=> (and (= (image$i ?v0 top$g) top$g) (= (image$l ?v1 top$g) top$h)) (= (image$c (map_prod$d ?v0 ?v1) top$d) top$f))) :named a146))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$)) (=> (and (= (image$i ?v0 top$g) top$g) (= (image$k ?v1 top$h) top$g)) (= (image$a (map_prod$b ?v0 ?v1) top$f) top$d))) :named a147))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_a_fun$)) (=> (and (= (image$l ?v0 top$g) top$h) (= (image$i ?v1 top$g) top$g)) (= (image$u (map_prod$i ?v0 ?v1) top$d) top$e))) :named a148))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_b_fun$)) (=> (and (= (image$l ?v0 top$g) top$h) (= (image$l ?v1 top$g) top$h)) (= (image$v (map_prod$j ?v0 ?v1) top$d) top$i))) :named a149))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$)) (=> (and (= (image$l ?v0 top$g) top$h) (= (image$k ?v1 top$h) top$g)) (= (image$e (fun_app$n (map_prod$f ?v0) ?v1) top$f) top$e))) :named a150))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_b_fun$)) (=> (and (= (image$l ?v0 top$g) top$h) (= (image$j ?v1 top$h) top$h)) (= (image$w (map_prod$k ?v0 ?v1) top$f) top$i))) :named a151))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_a_fun$)) (=> (and (= (image$k ?v0 top$h) top$g) (= (image$i ?v1 top$g) top$g)) (= (image$x (map_prod$l ?v0 ?v1) top$e) top$d))) :named a152))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_b_fun$)) (=> (and (= (image$k ?v0 top$h) top$g) (= (image$l ?v1 top$g) top$h)) (= (image$f (fun_app$p (map_prod$g ?v0) ?v1) top$e) top$f))) :named a153))
(check-sat)
;(get-unsat-core)
