; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 475
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Enat_set$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-fun f$ (A_stream_bool_fun$ A_stream$) Enat$)
(declare-fun p$ () A_stream_bool_fun$)
(declare-fun uu$ () Enat_bool_fun$)
(declare-fun bot$ () Enat_set$)
(declare-fun inf$ (Enat_set$) Enat$)
(declare-fun sup$ (Enat_set$ Enat_set$) Enat_set$)
(declare-fun uua$ () Enat_bool_fun$)
(declare-fun uub$ (A_stream$) Enat_bool_fun$)
(declare-fun uuc$ () Enat_bool_fun$)
(declare-fun eSuc$ () Enat_enat_fun$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun zero$ () Enat$)
(declare-fun image$ (Enat_enat_fun$ Enat_set$) Enat_set$)
(declare-fun omega$ () A_stream$)
(declare-fun sdrop$ (Nat$ A_stream$) A_stream$)
(declare-fun insert$ (Enat$ Enat_set$) Enat_set$)
(declare-fun omega$a () A_stream$)
(declare-fun sfirst$ (A_stream_bool_fun$ A_stream$) Enat$)
(declare-fun collect$ (Enat_bool_fun$) Enat_set$)
(declare-fun fun_app$ (Enat_bool_fun$ Enat$) Bool)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun fun_app$a (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$b (Enat_enat_fun$ Enat$) Enat$)
(declare-fun less_eq$a (Nat$ Nat$) Bool)
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$ uua$ ?v0) (exists ((?v1 Nat$)) (and (= ?v0 (enat$ ?v1)) (fun_app$a p$ (sdrop$ ?v1 (stl$ omega$)))))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$ uu$ ?v0) (exists ((?v1 Nat$)) (and (= ?v0 (enat$ ?v1)) (fun_app$a p$ (sdrop$ ?v1 omega$))))) :pattern ((fun_app$ uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$ uuc$ ?v0) (exists ((?v1 Nat$)) (and (= ?v0 (enat$ ?v1)) (fun_app$a p$ (sdrop$ ?v1 omega$a))))) :pattern ((fun_app$ uuc$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A_stream$) (?v1 Enat$)) (! (= (fun_app$ (uub$ ?v0) ?v1) (exists ((?v2 Nat$)) (and (= ?v1 (enat$ ?v2)) (fun_app$a p$ (sdrop$ ?v2 ?v0))))) :pattern ((fun_app$ (uub$ ?v0) ?v1)))) :named a3))
(assert (! (not (less_eq$ (inf$ (collect$ uu$)) (ite (fun_app$a p$ omega$) zero$ (fun_app$b eSuc$ (f$ p$ (stl$ omega$)))))) :named a4))
(assert (! (less_eq$ (inf$ (collect$ uua$)) (f$ p$ (stl$ omega$))) :named a5))
(assert (! (forall ((?v0 A_stream$)) (less_eq$ (inf$ (collect$ (uub$ ?v0))) (f$ p$ ?v0))) :named a6))
(assert (! (= (collect$ uu$) (sup$ (ite (fun_app$a p$ omega$) (insert$ zero$ bot$) bot$) (image$ eSuc$ (collect$ uua$)))) :named a7))
(assert (! (less_eq$ (sfirst$ p$ omega$a) (inf$ (collect$ uuc$))) :named a8))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (less_eq$ (fun_app$b eSuc$ ?v0) (fun_app$b eSuc$ ?v1)) (less_eq$ ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 Enat$)) (= (less_eq$ ?v0 zero$) (= ?v0 zero$))) :named a10))
(assert (! (forall ((?v0 Enat$)) (not (less_eq$ (fun_app$b eSuc$ ?v0) zero$))) :named a11))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (fun_app$b eSuc$ ?v0) (fun_app$b eSuc$ ?v1)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (fun_app$b eSuc$ ?v0) (fun_app$b eSuc$ ?v1)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 Enat$)) (less_eq$ ?v0 ?v0)) :named a15))
(assert (! (forall ((?v0 Nat$)) (less_eq$a ?v0 ?v0)) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (= (sdrop$ ?v0 (stl$ ?v1)) (stl$ (sdrop$ ?v0 ?v1)))) :named a17))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (less_eq$ (fun_app$b eSuc$ ?v0) ?v1) (exists ((?v2 Enat$)) (and (= ?v1 (fun_app$b eSuc$ ?v2)) (less_eq$ ?v0 ?v2))))) :named a18))
(assert (! (forall ((?v0 Enat$)) (less_eq$ ?v0 (fun_app$b eSuc$ ?v0))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less_eq$ (enat$ ?v0) (enat$ ?v1)) (less_eq$a ?v0 ?v1)) :pattern ((less_eq$ (enat$ ?v0) (enat$ ?v1))))) :named a20))
(check-sat)
;(get-unsat-core)
