; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 497
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_enat_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-fun p$ () A_stream_bool_fun$)
(declare-fun na$ () Nat$)
(declare-fun uu$ () A_stream_bool_fun$)
(declare-fun alw$ (A_stream_bool_fun$) A_stream_bool_fun$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun uua$ (Nat_a_fun$) Nat_a_fun$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun less$a (Nat$ Nat$) Bool)
(declare-fun omega$ () A_stream$)
(declare-fun sdrop$ (Nat$ A_stream$) A_stream$)
(declare-fun until$ (A_stream_bool_fun$ A_stream_bool_fun$ A_stream$) Bool)
(declare-fun of_seq$ (Nat_a_fun$) A_stream$)
(declare-fun sfirst$ (A_stream_bool_fun$ A_stream$) Enat$)
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$a (Nat_a_fun$ Nat$) A$)
(declare-fun fun_app$b (Nat_enat_fun$ Nat$) Enat$)
(declare-fun fun_app$c (Nat_nat_fun$ Nat$) Nat$)
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$ uu$ ?v0) (not (fun_app$ p$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat$)) (! (= (fun_app$a (uua$ ?v0) ?v1) (fun_app$a ?v0 (suc$ ?v1))) :pattern ((fun_app$a (uua$ ?v0) ?v1)))) :named a1))
(assert (! (not (= (less$ (enat$ (suc$ na$)) (sfirst$ p$ omega$)) (less$ (enat$ na$) (sfirst$ p$ (stl$ omega$))))) :named a2))
(assert (! (=> (fun_app$ p$ omega$) (fun_app$ p$ (stl$ omega$))) :named a3))
(assert (! (= (not (fun_app$ p$ (sdrop$ na$ (stl$ omega$)))) (less$ (enat$ na$) (sfirst$ p$ (stl$ omega$)))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (less$ ?v0 (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a8))
(assert (! (until$ uu$ (alw$ p$) omega$) :named a9))
(assert (! (forall ((?v0 Nat_enat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (less$ (fun_app$b ?v0 ?v3) (fun_app$b ?v0 (suc$ ?v3)))) (less$a ?v1 ?v2)) (less$ (fun_app$b ?v0 ?v1) (fun_app$b ?v0 ?v2)))) :named a10))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (less$a (fun_app$c ?v0 ?v3) (fun_app$c ?v0 (suc$ ?v3)))) (less$a ?v1 ?v2)) (less$a (fun_app$c ?v0 ?v1) (fun_app$c ?v0 ?v2)))) :named a11))
(assert (! (forall ((?v0 Nat_enat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (forall ((?v3 Nat$)) (less$ (fun_app$b ?v0 ?v3) (fun_app$b ?v0 (suc$ ?v3)))) (= (less$ (fun_app$b ?v0 ?v1) (fun_app$b ?v0 ?v2)) (less$a ?v1 ?v2)))) :named a12))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (forall ((?v3 Nat$)) (less$a (fun_app$c ?v0 ?v3) (fun_app$c ?v0 (suc$ ?v3)))) (= (less$a (fun_app$c ?v0 ?v1) (fun_app$c ?v0 ?v2)) (less$a ?v1 ?v2)))) :named a13))
(assert (! (forall ((?v0 Nat_a_fun$)) (= (stl$ (of_seq$ ?v0)) (of_seq$ (uua$ ?v0)))) :named a14))
(assert (! (forall ((?v0 A_stream$)) (=> (until$ uu$ (alw$ p$) ?v0) (= (less$ (enat$ na$) (sfirst$ p$ ?v0)) (not (fun_app$ p$ (sdrop$ na$ ?v0)))))) :named a15))
(assert (! (forall ((?v0 Nat$)) (less$a ?v0 (suc$ ?v0))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (less$a ?v0 ?v1) (less$a (suc$ ?v0) (suc$ ?v1)))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less$a (suc$ ?v0) (suc$ ?v1)) (less$a ?v0 ?v1)) :pattern ((less$a (suc$ ?v0) (suc$ ?v1))))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less$ (enat$ ?v0) (enat$ ?v1)) (less$a ?v0 ?v1)) :pattern ((less$ (enat$ ?v0) (enat$ ?v1))))) :named a19))
(check-sat)
;(get-unsat-core)
