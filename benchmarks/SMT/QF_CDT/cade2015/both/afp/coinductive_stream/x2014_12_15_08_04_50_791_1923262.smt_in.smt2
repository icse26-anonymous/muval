; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 39
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort C_a_fun$ 0)
(declare-sort C_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort C_bool_fun$ 0)
(declare-sort A_a_stream_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort B_a_a_prod_fun$ 0)
(declare-sort B_a_stream_fun$ 0)
(declare-sort B_b_stream_fun$ 0)
(declare-sort B_stream_a_fun$ 0)
(declare-sort B_stream_b_fun$ 0)
(declare-sort C_a_a_prod_fun$ 0)
(declare-sort C_a_stream_fun$ 0)
(declare-sort C_b_stream_fun$ 0)
(declare-sort C_c_stream_fun$ 0)
(declare-sort A_b_fun_a_a_fun_fun$ 0)
(declare-sort A_b_fun_a_b_fun_fun$ 0)
(declare-sort A_c_fun_a_b_fun_fun$ 0)
(declare-sort B_a_fun_b_a_fun_fun$ 0)
(declare-sort B_a_fun_b_b_fun_fun$ 0)
(declare-sort B_b_fun_b_a_fun_fun$ 0)
(declare-sort B_c_fun_b_a_fun_fun$ 0)
(declare-sort B_c_fun_b_b_fun_fun$ 0)
(declare-sort C_a_fun_c_a_fun_fun$ 0)
(declare-sort C_a_fun_c_b_fun_fun$ 0)
(declare-sort C_b_fun_c_a_fun_fun$ 0)
(declare-sort C_b_fun_c_b_fun_fun$ 0)
(declare-sort C_c_fun_c_a_fun_fun$ 0)
(declare-sort C_c_fun_c_b_fun_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_stream_b_stream_fun$ 0)
(declare-sort B_a_stream_stream_fun$ 0)
(declare-sort B_stream_a_stream_fun$ 0)
(declare-sort B_stream_b_stream_fun$ 0)
(declare-sort C_a_stream_stream_fun$ 0)
(declare-sort C_b_stream_stream_fun$ 0)
(declare-sort C_stream_a_stream_fun$ 0)
(declare-sort C_stream_b_stream_fun$ 0)
(declare-sort B_a_fun_b_a_stream_fun_fun$ 0)
(declare-sort B_a_stream_fun_b_a_fun_fun$ 0)
(declare-sort B_b_fun_b_a_stream_fun_fun$ 0)
(declare-sort C_a_fun_c_a_stream_fun_fun$ 0)
(declare-sort C_a_stream_fun_c_a_fun_fun$ 0)
(declare-sort C_b_fun_c_a_stream_fun_fun$ 0)
(declare-sort C_b_fun_c_b_stream_fun_fun$ 0)
(declare-sort C_b_stream_fun_c_a_fun_fun$ 0)
(declare-sort C_b_stream_fun_c_b_fun_fun$ 0)
(declare-sort C_c_fun_c_a_stream_fun_fun$ 0)
(declare-sort C_c_fun_c_b_stream_fun_fun$ 0)
(declare-sort C_c_fun_c_c_stream_fun_fun$ 0)
(declare-sort A_stream_a_stream_stream_fun$ 0)
(declare-sort B_stream_b_stream_stream_fun$ 0)
(declare-sort C_a_stream_a_stream_prod_fun$ 0)
(declare-sort B_a_stream_fun_b_a_stream_fun_fun$ 0)
(declare-sort B_b_stream_fun_b_a_stream_fun_fun$ 0)
(declare-sort B_stream_b_fun_b_stream_a_fun_fun$ 0)
(declare-sort C_a_stream_fun_c_a_stream_fun_fun$ 0)
(declare-sort C_a_stream_fun_c_b_stream_fun_fun$ 0)
(declare-sort C_b_stream_fun_c_a_stream_fun_fun$ 0)
(declare-sort C_b_stream_fun_c_b_stream_fun_fun$ 0)
(declare-sort C_c_fun_c_a_stream_stream_fun_fun$ 0)
(declare-sort C_c_fun_c_b_stream_stream_fun_fun$ 0)
(declare-sort C_c_stream_fun_c_a_stream_fun_fun$ 0)
(declare-sort C_c_stream_fun_c_b_stream_fun_fun$ 0)
(declare-sort B_stream_a_stream_a_stream_prod_fun$ 0)
(declare-sort B_stream_stream_a_stream_stream_fun$ 0)
(declare-sort B_stream_a_fun_b_stream_a_stream_fun_fun$ 0)
(declare-sort B_stream_a_stream_fun_b_stream_a_fun_fun$ 0)
(declare-sort C_b_stream_fun_c_b_stream_stream_fun_fun$ 0)
(declare-sort B_a_stream_fun_b_b_fun_b_a_stream_fun_fun_fun$ 0)
(declare-sort C_a_stream_fun_c_c_fun_c_a_stream_fun_fun_fun$ 0)
(declare-sort C_b_stream_fun_c_c_fun_c_b_stream_fun_fun_fun$ 0)
(declare-sort C_c_stream_fun_c_c_fun_c_c_stream_fun_fun_fun$ 0)
(declare-sort B_stream_a_stream_fun_b_stream_a_stream_fun_fun$ 0)
(declare-sort B_stream_b_stream_fun_b_stream_a_stream_fun_fun$ 0)
(declare-sort C_b_stream_stream_fun_c_a_stream_stream_fun_fun$ 0)
(declare-sort C_a_stream_stream_fun_c_c_fun_c_a_stream_stream_fun_fun_fun$ 0)
(declare-sort C_b_stream_stream_fun_c_c_fun_c_b_stream_stream_fun_fun_fun$ 0)
(declare-sort B_bool_fun_b_a_stream_fun_b_b_fun_b_a_stream_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_a_stream_fun_c_c_fun_c_a_stream_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_b_stream_fun_c_c_fun_c_b_stream_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_c_stream_fun_c_c_fun_c_c_stream_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_a_stream_stream_fun_c_c_fun_c_a_stream_stream_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_b_stream_stream_fun_c_c_fun_c_b_stream_stream_fun_fun_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (B_stream$ (sCons$a (shd$a B$) (stl$a B_stream$)))
  (B_stream_stream$ (sCons$b (shd$b B_stream$) (stl$b B_stream_stream$)))
  (A_stream_stream$ (sCons$c (shd$c A_stream$) (stl$c A_stream_stream$)))
  (C_stream$ (sCons$d (shd$d C$) (stl$d C_stream$)))))
(declare-datatypes () ((A_a_prod$ (pair$ (fst$ A$) (snd$ A$)))
  (A_stream_a_stream_prod$ (pair$a (fst$a A_stream$) (snd$a A_stream$)))))
(declare-fun b$ () C$)
(declare-fun f$ () B_a_fun$)
(declare-fun comp$ (B_a_fun$) C_b_fun_c_a_fun_fun$)
(declare-fun shd$e () C_b_fun$)
(declare-fun smap$ (B_a_fun$) B_stream_a_stream_fun$)
(declare-fun snth$ (A_stream$ Nat$) A$)
(declare-fun comp$a (B_stream_a_stream_fun$) C_b_stream_fun_c_a_stream_fun_fun$)
(declare-fun comp$b (B_stream_b_stream_fun$) C_b_stream_fun_c_b_stream_fun_fun$)
(declare-fun comp$c (B_b_fun$) C_b_fun_c_b_fun_fun$)
(declare-fun comp$d (A_stream_b_stream_fun$) C_a_stream_fun_c_b_stream_fun_fun$)
(declare-fun comp$e (A_b_fun$) C_a_fun_c_b_fun_fun$)
(declare-fun comp$f (A_stream_a_stream_fun$) C_a_stream_fun_c_a_stream_fun_fun$)
(declare-fun comp$g (A_a_fun$) C_a_fun_c_a_fun_fun$)
(declare-fun comp$h (B_stream_stream_a_stream_stream_fun$) C_b_stream_stream_fun_c_a_stream_stream_fun_fun$)
(declare-fun comp$i (A_stream_a_stream_fun$) B_a_stream_fun_b_a_stream_fun_fun$)
(declare-fun comp$j (A_a_fun$) B_a_fun_b_a_fun_fun$)
(declare-fun comp$k (C_stream_b_stream_fun$) C_c_stream_fun_c_b_stream_fun_fun$)
(declare-fun comp$l (C_b_fun$) C_c_fun_c_b_fun_fun$)
(declare-fun comp$m (C_stream_a_stream_fun$) C_c_stream_fun_c_a_stream_fun_fun$)
(declare-fun comp$n (C_a_fun$) C_c_fun_c_a_fun_fun$)
(declare-fun comp$o (A_stream_a_stream_stream_fun$ B_a_stream_fun$) B_a_stream_stream_fun$)
(declare-fun comp$p (A_a_stream_fun$) B_a_fun_b_a_stream_fun_fun$)
(declare-fun comp$q (B_stream_b_stream_stream_fun$) C_b_stream_fun_c_b_stream_stream_fun_fun$)
(declare-fun comp$r (B_b_stream_fun$) C_b_fun_c_b_stream_fun_fun$)
(declare-fun comp$s (A_a_stream_fun$) C_a_fun_c_a_stream_fun_fun$)
(declare-fun comp$t (B_a_fun$) B_b_fun_b_a_fun_fun$)
(declare-fun comp$u (B_a_fun$) A_b_fun_a_a_fun_fun$)
(declare-fun comp$v (C_b_fun$) B_c_fun_b_b_fun_fun$)
(declare-fun comp$w (C_b_fun$) A_c_fun_a_b_fun_fun$)
(declare-fun comp$x (C_a_fun$) B_c_fun_b_a_fun_fun$)
(declare-fun comp$y (C_b_stream_fun$) C_c_fun_c_b_stream_fun_fun$)
(declare-fun comp$z (C_a_stream_fun$) C_c_fun_c_a_stream_fun_fun$)
(declare-fun sdrop$ (Nat$) A_stream_a_stream_fun$)
(declare-fun smap$a (B_b_fun$) B_stream_b_stream_fun$)
(declare-fun smap$b (A_b_fun$) A_stream_b_stream_fun$)
(declare-fun smap$c (A_a_fun$) A_stream_a_stream_fun$)
(declare-fun smap$d (B_stream_a_stream_fun$) B_stream_stream_a_stream_stream_fun$)
(declare-fun smap$e (C_b_fun$) C_stream_b_stream_fun$)
(declare-fun smap$f (C_a_fun$) C_stream_a_stream_fun$)
(declare-fun smap$g (A_a_stream_fun$) A_stream_a_stream_stream_fun$)
(declare-fun smap$h (B_b_stream_fun$) B_stream_b_stream_stream_fun$)
(declare-fun smap$i (C_b_stream_fun$ C_stream$) B_stream_stream$)
(declare-fun smap$j (C_a_stream_fun$ C_stream$) A_stream_stream$)
(declare-fun smap$k (C_c_fun$ C_stream$) C_stream$)
(declare-fun smap$l (B_c_fun$ B_stream$) C_stream$)
(declare-fun smap$m (A_c_fun$ A_stream$) C_stream$)
(declare-fun snth$a (B_stream$ Nat$) B$)
(declare-fun comp$aa (A_stream_a_stream_fun$) B_stream_a_stream_fun_b_stream_a_stream_fun_fun$)
(declare-fun comp$ab (B_stream_a_stream_fun$) B_stream_b_stream_fun_b_stream_a_stream_fun_fun$)
(declare-fun comp$ac (B_b_fun$) A_b_fun_a_b_fun_fun$)
(declare-fun comp$ad (A_b_fun$) B_a_fun_b_b_fun_fun$)
(declare-fun comp$ae (B_stream_a_fun$) C_b_stream_fun_c_a_fun_fun$)
(declare-fun comp$af (A_a_stream_fun$) B_stream_a_fun_b_stream_a_stream_fun_fun$)
(declare-fun comp$ag (B_a_stream_fun$) C_b_fun_c_a_stream_fun_fun$)
(declare-fun comp$ah (A_stream_a_fun$) B_stream_a_stream_fun_b_stream_a_fun_fun$)
(declare-fun comp$ai (A_stream_a_fun$) B_a_stream_fun_b_a_fun_fun$)
(declare-fun comp$aj (B_stream_a_stream_fun$) B_b_stream_fun_b_a_stream_fun_fun$)
(declare-fun comp$ak (B_a_fun$) B_stream_b_fun_b_stream_a_fun_fun$)
(declare-fun comp$al (B_stream_b_fun$) C_b_stream_fun_c_b_fun_fun$)
(declare-fun comp$am (A_stream_a_fun$) C_a_stream_fun_c_a_fun_fun$)
(declare-fun comp$an (B_a_a_prod_fun$ C_b_fun$) C_a_a_prod_fun$)
(declare-fun comp$ao (B_stream_a_stream_a_stream_prod_fun$ C_b_stream_fun$) C_a_stream_a_stream_prod_fun$)
(declare-fun convol$ (B_a_fun$ B_a_fun$) B_a_a_prod_fun$)
(declare-fun sdrop$a (Nat$) B_stream_b_stream_fun$)
(declare-fun convol$a (C_a_fun$ C_a_fun$) C_a_a_prod_fun$)
(declare-fun convol$b (B_stream_a_stream_fun$ B_stream_a_stream_fun$) B_stream_a_stream_a_stream_prod_fun$)
(declare-fun convol$c (C_a_stream_fun$ C_a_stream_fun$) C_a_stream_a_stream_prod_fun$)
(declare-fun fun_app$ (B_stream_a_stream_fun$ B_stream$) A_stream$)
(declare-fun sTL_end$ () C_b_stream_fun$)
(declare-fun fun_app$a (C_b_stream_fun$ C$) B_stream$)
(declare-fun fun_app$b (C_c_fun_c_b_stream_fun_fun$ C_c_fun$) C_b_stream_fun$)
(declare-fun fun_app$c (C_b_stream_fun_c_c_fun_c_b_stream_fun_fun_fun$ C_b_stream_fun$) C_c_fun_c_b_stream_fun_fun$)
(declare-fun fun_app$d (C_bool_fun_c_b_stream_fun_c_c_fun_c_b_stream_fun_fun_fun_fun$ C_bool_fun$) C_b_stream_fun_c_c_fun_c_b_stream_fun_fun_fun$)
(declare-fun fun_app$e (C_a_stream_fun$ C$) A_stream$)
(declare-fun fun_app$f (C_c_fun_c_a_stream_fun_fun$ C_c_fun$) C_a_stream_fun$)
(declare-fun fun_app$g (C_a_stream_fun_c_c_fun_c_a_stream_fun_fun_fun$ C_a_stream_fun$) C_c_fun_c_a_stream_fun_fun$)
(declare-fun fun_app$h (C_bool_fun_c_a_stream_fun_c_c_fun_c_a_stream_fun_fun_fun_fun$ C_bool_fun$) C_a_stream_fun_c_c_fun_c_a_stream_fun_fun_fun$)
(declare-fun fun_app$i (C_b_fun_c_a_fun_fun$ C_b_fun$) C_a_fun$)
(declare-fun fun_app$j (C_b_stream_fun_c_a_stream_fun_fun$ C_b_stream_fun$) C_a_stream_fun$)
(declare-fun fun_app$k (C_b_stream_fun_c_b_stream_fun_fun$ C_b_stream_fun$) C_b_stream_fun$)
(declare-fun fun_app$l (C_b_fun_c_b_fun_fun$ C_b_fun$) C_b_fun$)
(declare-fun fun_app$m (C_a_stream_fun_c_b_stream_fun_fun$ C_a_stream_fun$) C_b_stream_fun$)
(declare-fun fun_app$n (C_a_fun_c_b_fun_fun$ C_a_fun$) C_b_fun$)
(declare-fun fun_app$o (C_a_stream_fun_c_a_stream_fun_fun$ C_a_stream_fun$) C_a_stream_fun$)
(declare-fun fun_app$p (C_a_fun_c_a_fun_fun$ C_a_fun$) C_a_fun$)
(declare-fun fun_app$q (C_b_stream_stream_fun_c_a_stream_stream_fun_fun$ C_b_stream_stream_fun$) C_a_stream_stream_fun$)
(declare-fun fun_app$r (C_c_fun_c_b_stream_stream_fun_fun$ C_c_fun$) C_b_stream_stream_fun$)
(declare-fun fun_app$s (C_b_stream_stream_fun_c_c_fun_c_b_stream_stream_fun_fun_fun$ C_b_stream_stream_fun$) C_c_fun_c_b_stream_stream_fun_fun$)
(declare-fun fun_app$t (C_bool_fun_c_b_stream_stream_fun_c_c_fun_c_b_stream_stream_fun_fun_fun_fun$ C_bool_fun$) C_b_stream_stream_fun_c_c_fun_c_b_stream_stream_fun_fun_fun$)
(declare-fun fun_app$u (C_c_fun_c_a_stream_stream_fun_fun$ C_c_fun$) C_a_stream_stream_fun$)
(declare-fun fun_app$v (C_a_stream_stream_fun_c_c_fun_c_a_stream_stream_fun_fun_fun$ C_a_stream_stream_fun$) C_c_fun_c_a_stream_stream_fun_fun$)
(declare-fun fun_app$w (C_bool_fun_c_a_stream_stream_fun_c_c_fun_c_a_stream_stream_fun_fun_fun_fun$ C_bool_fun$) C_a_stream_stream_fun_c_c_fun_c_a_stream_stream_fun_fun_fun$)
(declare-fun fun_app$x (B_a_stream_fun_b_a_stream_fun_fun$ B_a_stream_fun$) B_a_stream_fun$)
(declare-fun fun_app$y (B_b_fun_b_a_stream_fun_fun$ B_b_fun$) B_a_stream_fun$)
(declare-fun fun_app$z (B_a_stream_fun_b_b_fun_b_a_stream_fun_fun_fun$ B_a_stream_fun$) B_b_fun_b_a_stream_fun_fun$)
(declare-fun sTL_more$ () C_c_fun$)
(declare-fun endORmore$ () C_bool_fun$)
(declare-fun fun_app$aa (B_bool_fun_b_a_stream_fun_b_b_fun_b_a_stream_fun_fun_fun_fun$ B_bool_fun$) B_a_stream_fun_b_b_fun_b_a_stream_fun_fun_fun$)
(declare-fun fun_app$ab (B_a_fun_b_a_fun_fun$ B_a_fun$) B_a_fun$)
(declare-fun fun_app$ac (C_c_stream_fun_c_b_stream_fun_fun$ C_c_stream_fun$) C_b_stream_fun$)
(declare-fun fun_app$ad (C_c_fun_c_c_stream_fun_fun$ C_c_fun$) C_c_stream_fun$)
(declare-fun fun_app$ae (C_c_stream_fun_c_c_fun_c_c_stream_fun_fun_fun$ C_c_stream_fun$) C_c_fun_c_c_stream_fun_fun$)
(declare-fun fun_app$af (C_bool_fun_c_c_stream_fun_c_c_fun_c_c_stream_fun_fun_fun_fun$ C_bool_fun$) C_c_stream_fun_c_c_fun_c_c_stream_fun_fun_fun$)
(declare-fun fun_app$ag (C_c_fun_c_b_fun_fun$ C_c_fun$) C_b_fun$)
(declare-fun fun_app$ah (C_c_stream_fun_c_a_stream_fun_fun$ C_c_stream_fun$) C_a_stream_fun$)
(declare-fun fun_app$ai (C_c_fun_c_a_fun_fun$ C_c_fun$) C_a_fun$)
(declare-fun fun_app$aj (B_a_fun_b_a_stream_fun_fun$ B_a_fun$) B_a_stream_fun$)
(declare-fun fun_app$ak (C_b_stream_fun_c_b_stream_stream_fun_fun$ C_b_stream_fun$) C_b_stream_stream_fun$)
(declare-fun fun_app$al (C_b_fun_c_b_stream_fun_fun$ C_b_fun$) C_b_stream_fun$)
(declare-fun fun_app$am (C_a_fun_c_a_stream_fun_fun$ C_a_fun$) C_a_stream_fun$)
(declare-fun fun_app$an (A_a_stream_fun$ A$) A_stream$)
(declare-fun fun_app$ao (C_a_fun$ C$) A$)
(declare-fun fun_app$ap (B_a_stream_fun$ B$) A_stream$)
(declare-fun fun_app$aq (B_a_fun$ B$) A$)
(declare-fun fun_app$ar (C_b_fun$ C$) B$)
(declare-fun fun_app$as (A_b_fun$ A$) B$)
(declare-fun fun_app$at (A_a_fun$ A$) A$)
(declare-fun fun_app$au (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$av (C_stream_b_stream_fun$ C_stream$) B_stream$)
(declare-fun fun_app$aw (C_stream_a_stream_fun$ C_stream$) A_stream$)
(declare-fun fun_app$ax (B_stream_b_stream_fun$ B_stream$) B_stream$)
(declare-fun fun_app$ay (B_b_fun_b_a_fun_fun$ B_b_fun$) B_a_fun$)
(declare-fun fun_app$az (B_stream_stream_a_stream_stream_fun$ B_stream_stream$) A_stream_stream$)
(declare-fun fun_app$ba (A_stream_b_stream_fun$ A_stream$) B_stream$)
(declare-fun fun_app$bb (A_b_fun_a_a_fun_fun$ A_b_fun$) A_a_fun$)
(declare-fun fun_app$bc (B_c_fun_b_b_fun_fun$ B_c_fun$) B_b_fun$)
(declare-fun fun_app$bd (A_c_fun_a_b_fun_fun$ A_c_fun$) A_b_fun$)
(declare-fun fun_app$be (B_c_fun_b_a_fun_fun$ B_c_fun$) B_a_fun$)
(declare-fun fun_app$bf (C_b_stream_stream_fun$ C$) B_stream_stream$)
(declare-fun fun_app$bg (C_a_stream_stream_fun$ C$) A_stream_stream$)
(declare-fun fun_app$bh (C_c_stream_fun$ C$) C_stream$)
(declare-fun fun_app$bi (A_stream_a_stream_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun fun_app$bj (B_stream_b_stream_stream_fun$ B_stream$) B_stream_stream$)
(declare-fun fun_app$bk (B_stream_a_stream_fun_b_stream_a_stream_fun_fun$ B_stream_a_stream_fun$) B_stream_a_stream_fun$)
(declare-fun fun_app$bl (B_stream_b_stream_fun_b_stream_a_stream_fun_fun$ B_stream_b_stream_fun$) B_stream_a_stream_fun$)
(declare-fun fun_app$bm (A_b_fun_a_b_fun_fun$ A_b_fun$) A_b_fun$)
(declare-fun fun_app$bn (B_a_fun_b_b_fun_fun$ B_a_fun$) B_b_fun$)
(declare-fun fun_app$bo (C_b_stream_fun_c_a_fun_fun$ C_b_stream_fun$) C_a_fun$)
(declare-fun fun_app$bp (B_stream_a_fun_b_stream_a_stream_fun_fun$ B_stream_a_fun$) B_stream_a_stream_fun$)
(declare-fun fun_app$bq (C_b_fun_c_a_stream_fun_fun$ C_b_fun$) C_a_stream_fun$)
(declare-fun fun_app$br (B_stream_a_stream_fun_b_stream_a_fun_fun$ B_stream_a_stream_fun$) B_stream_a_fun$)
(declare-fun fun_app$bs (B_a_stream_fun_b_a_fun_fun$ B_a_stream_fun$) B_a_fun$)
(declare-fun fun_app$bt (B_b_stream_fun_b_a_stream_fun_fun$ B_b_stream_fun$) B_a_stream_fun$)
(declare-fun fun_app$bu (B_stream_b_fun_b_stream_a_fun_fun$ B_stream_b_fun$) B_stream_a_fun$)
(declare-fun fun_app$bv (C_b_stream_fun_c_b_fun_fun$ C_b_stream_fun$) C_b_fun$)
(declare-fun fun_app$bw (C_a_stream_fun_c_a_fun_fun$ C_a_stream_fun$) C_a_fun$)
(declare-fun fun_app$bx (C_c_fun$ C$) C$)
(declare-fun fun_app$by (B_b_fun$ B$) B$)
(declare-fun corec_stream$ (C_b_fun$) C_bool_fun_c_b_stream_fun_c_c_fun_c_b_stream_fun_fun_fun_fun$)
(declare-fun corec_stream$a (C_a_fun$) C_bool_fun_c_a_stream_fun_c_c_fun_c_a_stream_fun_fun_fun_fun$)
(declare-fun corec_stream$b (C_b_stream_fun$) C_bool_fun_c_b_stream_stream_fun_c_c_fun_c_b_stream_stream_fun_fun_fun_fun$)
(declare-fun corec_stream$c (C_a_stream_fun$) C_bool_fun_c_a_stream_stream_fun_c_c_fun_c_a_stream_stream_fun_fun_fun_fun$)
(declare-fun corec_stream$d (B_a_fun$) B_bool_fun_b_a_stream_fun_b_b_fun_b_a_stream_fun_fun_fun_fun$)
(declare-fun corec_stream$e (C_c_fun$) C_bool_fun_c_c_stream_fun_c_c_fun_c_c_stream_fun_fun_fun_fun$)
(declare-fun corec_stream$f (B_a_stream_fun$ B_bool_fun$ B_a_stream_stream_fun$ B_b_fun$) B_a_stream_stream_fun$)
(declare-fun unfold_stream$ (C_b_fun$) C_c_fun_c_b_stream_fun_fun$)
(declare-fun unfold_stream$a (C_a_fun$) C_c_fun_c_a_stream_fun_fun$)
(declare-fun unfold_stream$b (C_b_stream_fun$) C_c_fun_c_b_stream_stream_fun_fun$)
(declare-fun unfold_stream$c (C_a_stream_fun$) C_c_fun_c_a_stream_stream_fun_fun$)
(declare-fun unfold_stream$d (B_a_fun$) B_b_fun_b_a_stream_fun_fun$)
(declare-fun unfold_stream$e (C_c_fun$) C_c_fun_c_c_stream_fun_fun$)
(declare-fun unfold_stream$f (B_a_stream_fun$ B_b_fun$ B$) A_stream_stream$)
(assert (! (not (= (fun_app$ (smap$ f$) (fun_app$a (fun_app$b (fun_app$c (fun_app$d (corec_stream$ shd$e) endORmore$) sTL_end$) sTL_more$) b$)) (fun_app$e (fun_app$f (fun_app$g (fun_app$h (corec_stream$a (fun_app$i (comp$ f$) shd$e)) endORmore$) (fun_app$j (comp$a (smap$ f$)) sTL_end$)) sTL_more$) b$))) :named a0))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C_bool_fun$) (?v3 C_b_stream_fun$) (?v4 C_c_fun$)) (= (fun_app$k (comp$b (smap$a ?v0)) (fun_app$b (fun_app$c (fun_app$d (corec_stream$ ?v1) ?v2) ?v3) ?v4)) (fun_app$b (fun_app$c (fun_app$d (corec_stream$ (fun_app$l (comp$c ?v0) ?v1)) ?v2) (fun_app$k (comp$b (smap$a ?v0)) ?v3)) ?v4))) :named a1))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_bool_fun$) (?v3 C_b_stream_fun$) (?v4 C_c_fun$)) (= (fun_app$j (comp$a (smap$ ?v0)) (fun_app$b (fun_app$c (fun_app$d (corec_stream$ ?v1) ?v2) ?v3) ?v4)) (fun_app$f (fun_app$g (fun_app$h (corec_stream$a (fun_app$i (comp$ ?v0) ?v1)) ?v2) (fun_app$j (comp$a (smap$ ?v0)) ?v3)) ?v4))) :named a2))
(assert (! (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C_bool_fun$) (?v3 C_a_stream_fun$) (?v4 C_c_fun$)) (= (fun_app$m (comp$d (smap$b ?v0)) (fun_app$f (fun_app$g (fun_app$h (corec_stream$a ?v1) ?v2) ?v3) ?v4)) (fun_app$b (fun_app$c (fun_app$d (corec_stream$ (fun_app$n (comp$e ?v0) ?v1)) ?v2) (fun_app$m (comp$d (smap$b ?v0)) ?v3)) ?v4))) :named a3))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C_bool_fun$) (?v3 C_a_stream_fun$) (?v4 C_c_fun$)) (= (fun_app$o (comp$f (smap$c ?v0)) (fun_app$f (fun_app$g (fun_app$h (corec_stream$a ?v1) ?v2) ?v3) ?v4)) (fun_app$f (fun_app$g (fun_app$h (corec_stream$a (fun_app$p (comp$g ?v0) ?v1)) ?v2) (fun_app$o (comp$f (smap$c ?v0)) ?v3)) ?v4))) :named a4))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 C_bool_fun$) (?v3 C_b_stream_stream_fun$) (?v4 C_c_fun$)) (= (fun_app$q (comp$h (smap$d ?v0)) (fun_app$r (fun_app$s (fun_app$t (corec_stream$b ?v1) ?v2) ?v3) ?v4)) (fun_app$u (fun_app$v (fun_app$w (corec_stream$c (fun_app$j (comp$a ?v0) ?v1)) ?v2) (fun_app$q (comp$h (smap$d ?v0)) ?v3)) ?v4))) :named a5))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_bool_fun$) (?v3 B_a_stream_fun$) (?v4 B_b_fun$)) (= (fun_app$x (comp$i (smap$c ?v0)) (fun_app$y (fun_app$z (fun_app$aa (corec_stream$d ?v1) ?v2) ?v3) ?v4)) (fun_app$y (fun_app$z (fun_app$aa (corec_stream$d (fun_app$ab (comp$j ?v0) ?v1)) ?v2) (fun_app$x (comp$i (smap$c ?v0)) ?v3)) ?v4))) :named a6))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 C_bool_fun$) (?v3 C_c_stream_fun$) (?v4 C_c_fun$)) (= (fun_app$ac (comp$k (smap$e ?v0)) (fun_app$ad (fun_app$ae (fun_app$af (corec_stream$e ?v1) ?v2) ?v3) ?v4)) (fun_app$b (fun_app$c (fun_app$d (corec_stream$ (fun_app$ag (comp$l ?v0) ?v1)) ?v2) (fun_app$ac (comp$k (smap$e ?v0)) ?v3)) ?v4))) :named a7))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_c_fun$) (?v2 C_bool_fun$) (?v3 C_c_stream_fun$) (?v4 C_c_fun$)) (= (fun_app$ah (comp$m (smap$f ?v0)) (fun_app$ad (fun_app$ae (fun_app$af (corec_stream$e ?v1) ?v2) ?v3) ?v4)) (fun_app$f (fun_app$g (fun_app$h (corec_stream$a (fun_app$ai (comp$n ?v0) ?v1)) ?v2) (fun_app$ah (comp$m (smap$f ?v0)) ?v3)) ?v4))) :named a8))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 B_a_fun$) (?v2 B_bool_fun$) (?v3 B_a_stream_fun$) (?v4 B_b_fun$)) (= (comp$o (smap$g ?v0) (fun_app$y (fun_app$z (fun_app$aa (corec_stream$d ?v1) ?v2) ?v3) ?v4)) (corec_stream$f (fun_app$aj (comp$p ?v0) ?v1) ?v2 (comp$o (smap$g ?v0) ?v3) ?v4))) :named a9))
(assert (! (forall ((?v0 B_b_stream_fun$) (?v1 C_b_fun$) (?v2 C_bool_fun$) (?v3 C_b_stream_fun$) (?v4 C_c_fun$)) (= (fun_app$ak (comp$q (smap$h ?v0)) (fun_app$b (fun_app$c (fun_app$d (corec_stream$ ?v1) ?v2) ?v3) ?v4)) (fun_app$r (fun_app$s (fun_app$t (corec_stream$b (fun_app$al (comp$r ?v0) ?v1)) ?v2) (fun_app$ak (comp$q (smap$h ?v0)) ?v3)) ?v4))) :named a10))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 C_a_fun$) (?v2 C$)) (! (= (fun_app$e (fun_app$am (comp$s ?v0) ?v1) ?v2) (fun_app$an ?v0 (fun_app$ao ?v1 ?v2))) :pattern ((fun_app$e (fun_app$am (comp$s ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$ap (fun_app$aj (comp$p ?v0) ?v1) ?v2) (fun_app$an ?v0 (fun_app$aq ?v1 ?v2))) :pattern ((fun_app$ap (fun_app$aj (comp$p ?v0) ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C$)) (! (= (fun_app$ar (fun_app$n (comp$e ?v0) ?v1) ?v2) (fun_app$as ?v0 (fun_app$ao ?v1 ?v2))) :pattern ((fun_app$ar (fun_app$n (comp$e ?v0) ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C$)) (! (= (fun_app$ao (fun_app$p (comp$g ?v0) ?v1) ?v2) (fun_app$at ?v0 (fun_app$ao ?v1 ?v2))) :pattern ((fun_app$ao (fun_app$p (comp$g ?v0) ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$aq (fun_app$ab (comp$j ?v0) ?v1) ?v2) (fun_app$at ?v0 (fun_app$aq ?v1 ?v2))) :pattern ((fun_app$aq (fun_app$ab (comp$j ?v0) ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C$)) (! (= (fun_app$ao (fun_app$i (comp$ ?v0) ?v1) ?v2) (fun_app$aq ?v0 (fun_app$ar ?v1 ?v2))) :pattern ((fun_app$ao (fun_app$i (comp$ ?v0) ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 C$)) (! (= (fun_app$e (fun_app$j (comp$a ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$e (fun_app$j (comp$a ?v0) ?v1) ?v2)))) :named a17))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (fun_app$au (smap$c ?v0) (fun_app$ (smap$ ?v1) ?v2)) (fun_app$ (smap$ (fun_app$ab (comp$j ?v0) ?v1)) ?v2))) :named a18))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_stream$)) (= (fun_app$ (smap$ ?v0) (fun_app$av (smap$e ?v1) ?v2)) (fun_app$aw (smap$f (fun_app$i (comp$ ?v0) ?v1)) ?v2))) :named a19))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_stream$)) (= (fun_app$ (smap$ ?v0) (fun_app$ax (smap$a ?v1) ?v2)) (fun_app$ (smap$ (fun_app$ay (comp$t ?v0) ?v1)) ?v2))) :named a20))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 C_stream$)) (= (fun_app$az (smap$d ?v0) (smap$i ?v1 ?v2)) (smap$j (fun_app$j (comp$a ?v0) ?v1) ?v2))) :named a21))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 A_stream$)) (= (fun_app$ (smap$ ?v0) (fun_app$ba (smap$b ?v1) ?v2)) (fun_app$au (smap$c (fun_app$bb (comp$u ?v0) ?v1)) ?v2))) :named a22))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 C_stream$)) (= (fun_app$av (smap$e ?v0) (smap$k ?v1 ?v2)) (fun_app$av (smap$e (fun_app$ag (comp$l ?v0) ?v1)) ?v2))) :named a23))
(assert (! (forall ((?v0 C_b_fun$) (?v1 B_c_fun$) (?v2 B_stream$)) (= (fun_app$av (smap$e ?v0) (smap$l ?v1 ?v2)) (fun_app$ax (smap$a (fun_app$bc (comp$v ?v0) ?v1)) ?v2))) :named a24))
(assert (! (forall ((?v0 C_b_fun$) (?v1 A_c_fun$) (?v2 A_stream$)) (= (fun_app$av (smap$e ?v0) (smap$m ?v1 ?v2)) (fun_app$ba (smap$b (fun_app$bd (comp$w ?v0) ?v1)) ?v2))) :named a25))
(assert (! (forall ((?v0 C_a_fun$) (?v1 B_c_fun$) (?v2 B_stream$)) (= (fun_app$aw (smap$f ?v0) (smap$l ?v1 ?v2)) (fun_app$ (smap$ (fun_app$be (comp$x ?v0) ?v1)) ?v2))) :named a26))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_c_fun$) (?v2 C_stream$)) (= (fun_app$aw (smap$f ?v0) (smap$k ?v1 ?v2)) (fun_app$aw (smap$f (fun_app$ai (comp$n ?v0) ?v1)) ?v2))) :named a27))
(assert (! (forall ((?v0 C_b_stream_fun$) (?v1 C_bool_fun$) (?v2 C_b_stream_stream_fun$) (?v3 C_c_fun$) (?v4 C$)) (! (= (fun_app$bf (fun_app$r (fun_app$s (fun_app$t (corec_stream$b ?v0) ?v1) ?v2) ?v3) ?v4) (fun_app$bf (fun_app$r (fun_app$s (fun_app$t (corec_stream$b ?v0) ?v1) ?v2) ?v3) ?v4)) :pattern ((fun_app$bf (fun_app$r (fun_app$s (fun_app$t (corec_stream$b ?v0) ?v1) ?v2) ?v3) ?v4)))) :named a28))
(assert (! (forall ((?v0 C_a_stream_fun$) (?v1 C_bool_fun$) (?v2 C_a_stream_stream_fun$) (?v3 C_c_fun$) (?v4 C$)) (! (= (fun_app$bg (fun_app$u (fun_app$v (fun_app$w (corec_stream$c ?v0) ?v1) ?v2) ?v3) ?v4) (fun_app$bg (fun_app$u (fun_app$v (fun_app$w (corec_stream$c ?v0) ?v1) ?v2) ?v3) ?v4)) :pattern ((fun_app$bg (fun_app$u (fun_app$v (fun_app$w (corec_stream$c ?v0) ?v1) ?v2) ?v3) ?v4)))) :named a29))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_bool_fun$) (?v2 C_b_stream_fun$) (?v3 C_c_fun$) (?v4 C$)) (! (= (fun_app$a (fun_app$b (fun_app$c (fun_app$d (corec_stream$ ?v0) ?v1) ?v2) ?v3) ?v4) (fun_app$a (fun_app$b (fun_app$c (fun_app$d (corec_stream$ ?v0) ?v1) ?v2) ?v3) ?v4)) :pattern ((fun_app$a (fun_app$b (fun_app$c (fun_app$d (corec_stream$ ?v0) ?v1) ?v2) ?v3) ?v4)))) :named a30))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_bool_fun$) (?v2 C_a_stream_fun$) (?v3 C_c_fun$) (?v4 C$)) (! (= (fun_app$e (fun_app$f (fun_app$g (fun_app$h (corec_stream$a ?v0) ?v1) ?v2) ?v3) ?v4) (fun_app$e (fun_app$f (fun_app$g (fun_app$h (corec_stream$a ?v0) ?v1) ?v2) ?v3) ?v4)) :pattern ((fun_app$e (fun_app$f (fun_app$g (fun_app$h (corec_stream$a ?v0) ?v1) ?v2) ?v3) ?v4)))) :named a31))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (fun_app$ (smap$ ?v0) (fun_app$a (fun_app$b (unfold_stream$ ?v1) ?v2) ?v3)) (fun_app$e (fun_app$f (unfold_stream$a (fun_app$i (comp$ ?v0) ?v1)) ?v2) ?v3))) :named a32))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (fun_app$az (smap$d ?v0) (fun_app$bf (fun_app$r (unfold_stream$b ?v1) ?v2) ?v3)) (fun_app$bg (fun_app$u (unfold_stream$c (fun_app$j (comp$a ?v0) ?v1)) ?v2) ?v3))) :named a33))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_b_fun$) (?v3 B$)) (= (fun_app$au (smap$c ?v0) (fun_app$ap (fun_app$y (unfold_stream$d ?v1) ?v2) ?v3)) (fun_app$ap (fun_app$y (unfold_stream$d (fun_app$ab (comp$j ?v0) ?v1)) ?v2) ?v3))) :named a34))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (fun_app$av (smap$e ?v0) (fun_app$bh (fun_app$ad (unfold_stream$e ?v1) ?v2) ?v3)) (fun_app$a (fun_app$b (unfold_stream$ (fun_app$ag (comp$l ?v0) ?v1)) ?v2) ?v3))) :named a35))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_c_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (fun_app$aw (smap$f ?v0) (fun_app$bh (fun_app$ad (unfold_stream$e ?v1) ?v2) ?v3)) (fun_app$e (fun_app$f (unfold_stream$a (fun_app$ai (comp$n ?v0) ?v1)) ?v2) ?v3))) :named a36))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (fun_app$ax (smap$a ?v0) (fun_app$a (fun_app$b (unfold_stream$ ?v1) ?v2) ?v3)) (fun_app$a (fun_app$b (unfold_stream$ (fun_app$l (comp$c ?v0) ?v1)) ?v2) ?v3))) :named a37))
(assert (! (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (fun_app$ba (smap$b ?v0) (fun_app$e (fun_app$f (unfold_stream$a ?v1) ?v2) ?v3)) (fun_app$a (fun_app$b (unfold_stream$ (fun_app$n (comp$e ?v0) ?v1)) ?v2) ?v3))) :named a38))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (fun_app$au (smap$c ?v0) (fun_app$e (fun_app$f (unfold_stream$a ?v1) ?v2) ?v3)) (fun_app$e (fun_app$f (unfold_stream$a (fun_app$p (comp$g ?v0) ?v1)) ?v2) ?v3))) :named a39))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 B_a_fun$) (?v2 B_b_fun$) (?v3 B$)) (= (fun_app$bi (smap$g ?v0) (fun_app$ap (fun_app$y (unfold_stream$d ?v1) ?v2) ?v3)) (unfold_stream$f (fun_app$aj (comp$p ?v0) ?v1) ?v2 ?v3))) :named a40))
(assert (! (forall ((?v0 B_b_stream_fun$) (?v1 C_b_fun$) (?v2 C_c_fun$) (?v3 C$)) (= (fun_app$bj (smap$h ?v0) (fun_app$a (fun_app$b (unfold_stream$ ?v1) ?v2) ?v3)) (fun_app$bf (fun_app$r (unfold_stream$b (fun_app$al (comp$r ?v0) ?v1)) ?v2) ?v3))) :named a41))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$)) (= (fun_app$p (comp$g ?v0) (fun_app$i (comp$ ?v1) ?v2)) (fun_app$i (comp$ (fun_app$ab (comp$j ?v0) ?v1)) ?v2))) :named a42))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_c_fun$)) (= (fun_app$i (comp$ ?v0) (fun_app$ag (comp$l ?v1) ?v2)) (fun_app$ai (comp$n (fun_app$i (comp$ ?v0) ?v1)) ?v2))) :named a43))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 C_b_fun$)) (= (fun_app$i (comp$ ?v0) (fun_app$l (comp$c ?v1) ?v2)) (fun_app$i (comp$ (fun_app$ay (comp$t ?v0) ?v1)) ?v2))) :named a44))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 C_c_fun$)) (= (fun_app$j (comp$a ?v0) (fun_app$b (comp$y ?v1) ?v2)) (fun_app$f (comp$z (fun_app$j (comp$a ?v0) ?v1)) ?v2))) :named a45))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 B_stream_a_stream_fun$) (?v2 C_b_stream_fun$)) (= (fun_app$o (comp$f ?v0) (fun_app$j (comp$a ?v1) ?v2)) (fun_app$j (comp$a (fun_app$bk (comp$aa ?v0) ?v1)) ?v2))) :named a46))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 B_stream_b_stream_fun$) (?v2 C_b_stream_fun$)) (= (fun_app$j (comp$a ?v0) (fun_app$k (comp$b ?v1) ?v2)) (fun_app$j (comp$a (fun_app$bl (comp$ab ?v0) ?v1)) ?v2))) :named a47))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_b_fun$) (?v2 C_a_fun$)) (= (fun_app$l (comp$c ?v0) (fun_app$n (comp$e ?v1) ?v2)) (fun_app$n (comp$e (fun_app$bm (comp$ac ?v0) ?v1)) ?v2))) :named a48))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 C_a_fun$)) (= (fun_app$i (comp$ ?v0) (fun_app$n (comp$e ?v1) ?v2)) (fun_app$p (comp$g (fun_app$bb (comp$u ?v0) ?v1)) ?v2))) :named a49))
(assert (! (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$)) (= (fun_app$n (comp$e ?v0) (fun_app$ai (comp$n ?v1) ?v2)) (fun_app$ag (comp$l (fun_app$n (comp$e ?v0) ?v1)) ?v2))) :named a50))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$)) (= (fun_app$n (comp$e ?v0) (fun_app$i (comp$ ?v1) ?v2)) (fun_app$l (comp$c (fun_app$bn (comp$ad ?v0) ?v1)) ?v2))) :named a51))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_c_fun$)) (= (fun_app$ai (comp$n (fun_app$i (comp$ ?v0) ?v1)) ?v2) (fun_app$i (comp$ ?v0) (fun_app$ag (comp$l ?v1) ?v2)))) :named a52))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$)) (= (fun_app$i (comp$ (fun_app$ab (comp$j ?v0) ?v1)) ?v2) (fun_app$p (comp$g ?v0) (fun_app$i (comp$ ?v1) ?v2)))) :named a53))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 C_b_fun$)) (= (fun_app$i (comp$ (fun_app$ay (comp$t ?v0) ?v1)) ?v2) (fun_app$i (comp$ ?v0) (fun_app$l (comp$c ?v1) ?v2)))) :named a54))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 C_c_fun$)) (= (fun_app$f (comp$z (fun_app$j (comp$a ?v0) ?v1)) ?v2) (fun_app$j (comp$a ?v0) (fun_app$b (comp$y ?v1) ?v2)))) :named a55))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 B_stream_a_stream_fun$) (?v2 C_b_stream_fun$)) (= (fun_app$j (comp$a (fun_app$bk (comp$aa ?v0) ?v1)) ?v2) (fun_app$o (comp$f ?v0) (fun_app$j (comp$a ?v1) ?v2)))) :named a56))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 B_stream_b_stream_fun$) (?v2 C_b_stream_fun$)) (= (fun_app$j (comp$a (fun_app$bl (comp$ab ?v0) ?v1)) ?v2) (fun_app$j (comp$a ?v0) (fun_app$k (comp$b ?v1) ?v2)))) :named a57))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$)) (= (fun_app$l (comp$c (fun_app$bn (comp$ad ?v0) ?v1)) ?v2) (fun_app$n (comp$e ?v0) (fun_app$i (comp$ ?v1) ?v2)))) :named a58))
(assert (! (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$)) (= (fun_app$ag (comp$l (fun_app$n (comp$e ?v0) ?v1)) ?v2) (fun_app$n (comp$e ?v0) (fun_app$ai (comp$n ?v1) ?v2)))) :named a59))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$)) (= (fun_app$ai (comp$n (fun_app$p (comp$g ?v0) ?v1)) ?v2) (fun_app$p (comp$g ?v0) (fun_app$ai (comp$n ?v1) ?v2)))) :named a60))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 B_c_fun$)) (= (fun_app$be (comp$x (fun_app$p (comp$g ?v0) ?v1)) ?v2) (fun_app$ab (comp$j ?v0) (fun_app$be (comp$x ?v1) ?v2)))) :named a61))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 C_a_fun$) (?v2 C$)) (! (= (fun_app$e (fun_app$am (comp$s ?v0) ?v1) ?v2) (fun_app$an ?v0 (fun_app$ao ?v1 ?v2))) :pattern ((fun_app$e (fun_app$am (comp$s ?v0) ?v1) ?v2)))) :named a62))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$ap (fun_app$aj (comp$p ?v0) ?v1) ?v2) (fun_app$an ?v0 (fun_app$aq ?v1 ?v2))) :pattern ((fun_app$ap (fun_app$aj (comp$p ?v0) ?v1) ?v2)))) :named a63))
(assert (! (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C$)) (! (= (fun_app$ar (fun_app$n (comp$e ?v0) ?v1) ?v2) (fun_app$as ?v0 (fun_app$ao ?v1 ?v2))) :pattern ((fun_app$ar (fun_app$n (comp$e ?v0) ?v1) ?v2)))) :named a64))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C$)) (! (= (fun_app$ao (fun_app$p (comp$g ?v0) ?v1) ?v2) (fun_app$at ?v0 (fun_app$ao ?v1 ?v2))) :pattern ((fun_app$ao (fun_app$p (comp$g ?v0) ?v1) ?v2)))) :named a65))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$aq (fun_app$ab (comp$j ?v0) ?v1) ?v2) (fun_app$at ?v0 (fun_app$aq ?v1 ?v2))) :pattern ((fun_app$aq (fun_app$ab (comp$j ?v0) ?v1) ?v2)))) :named a66))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C$)) (! (= (fun_app$ao (fun_app$i (comp$ ?v0) ?v1) ?v2) (fun_app$aq ?v0 (fun_app$ar ?v1 ?v2))) :pattern ((fun_app$ao (fun_app$i (comp$ ?v0) ?v1) ?v2)))) :named a67))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 C$)) (! (= (fun_app$e (fun_app$j (comp$a ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$e (fun_app$j (comp$a ?v0) ?v1) ?v2)))) :named a68))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$)) (=> (and (= (fun_app$i (comp$ ?v0) ?v1) (fun_app$i (comp$ ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$aq ?v0 (fun_app$ar ?v1 ?v4)) (fun_app$aq ?v2 (fun_app$ar ?v3 ?v4)))) false)) false)) :named a69))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 B_stream_a_stream_fun$) (?v3 C_b_stream_fun$)) (=> (and (= (fun_app$j (comp$a ?v0) ?v1) (fun_app$j (comp$a ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$ ?v0 (fun_app$a ?v1 ?v4)) (fun_app$ ?v2 (fun_app$a ?v3 ?v4)))) false)) false)) :named a70))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 A_a_fun$) (?v3 C_a_fun$)) (=> (and (= (fun_app$i (comp$ ?v0) ?v1) (fun_app$p (comp$g ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$aq ?v0 (fun_app$ar ?v1 ?v4)) (fun_app$at ?v2 (fun_app$ao ?v3 ?v4)))) false)) false)) :named a71))
(assert (! (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 A_b_fun$) (?v3 C_a_fun$)) (=> (and (= (fun_app$n (comp$e ?v0) ?v1) (fun_app$n (comp$e ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$as ?v0 (fun_app$ao ?v1 ?v4)) (fun_app$as ?v2 (fun_app$ao ?v3 ?v4)))) false)) false)) :named a72))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$)) (=> (and (= (fun_app$p (comp$g ?v0) ?v1) (fun_app$i (comp$ ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$at ?v0 (fun_app$ao ?v1 ?v4)) (fun_app$aq ?v2 (fun_app$ar ?v3 ?v4)))) false)) false)) :named a73))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 A_a_fun$) (?v3 C_a_fun$)) (=> (and (= (fun_app$p (comp$g ?v0) ?v1) (fun_app$p (comp$g ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$at ?v0 (fun_app$ao ?v1 ?v4)) (fun_app$at ?v2 (fun_app$ao ?v3 ?v4)))) false)) false)) :named a74))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$)) (=> (and (= (fun_app$ab (comp$j ?v0) ?v1) (fun_app$ab (comp$j ?v2) ?v3)) (=> (forall ((?v4 B$)) (= (fun_app$at ?v0 (fun_app$aq ?v1 ?v4)) (fun_app$at ?v2 (fun_app$aq ?v3 ?v4)))) false)) false)) :named a75))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 C_a_fun$) (?v2 A_a_stream_fun$) (?v3 C_a_fun$)) (=> (and (= (fun_app$am (comp$s ?v0) ?v1) (fun_app$am (comp$s ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$an ?v0 (fun_app$ao ?v1 ?v4)) (fun_app$an ?v2 (fun_app$ao ?v3 ?v4)))) false)) false)) :named a76))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 B_a_fun$) (?v2 A_a_stream_fun$) (?v3 B_a_fun$)) (=> (and (= (fun_app$aj (comp$p ?v0) ?v1) (fun_app$aj (comp$p ?v2) ?v3)) (=> (forall ((?v4 B$)) (= (fun_app$an ?v0 (fun_app$aq ?v1 ?v4)) (fun_app$an ?v2 (fun_app$aq ?v3 ?v4)))) false)) false)) :named a77))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 A_a_stream_fun$) (?v3 C_a_fun$)) (=> (and (= (fun_app$j (comp$a ?v0) ?v1) (fun_app$am (comp$s ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$ ?v0 (fun_app$a ?v1 ?v4)) (fun_app$an ?v2 (fun_app$ao ?v3 ?v4)))) false)) false)) :named a78))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 B_b_fun$) (?v3 C_b_fun$) (?v4 B_a_fun$) (?v5 B_a_fun$)) (=> (and (= (fun_app$ag (comp$l ?v0) ?v1) (fun_app$l (comp$c ?v2) ?v3)) (= (fun_app$ay (comp$t ?v4) ?v2) ?v5)) (= (fun_app$ai (comp$n (fun_app$i (comp$ ?v4) ?v0)) ?v1) (fun_app$i (comp$ ?v5) ?v3)))) :named a79))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C_b_fun$) (?v3 C_c_fun$) (?v4 B_a_fun$) (?v5 C_a_fun$)) (=> (and (= (fun_app$l (comp$c ?v0) ?v1) (fun_app$ag (comp$l ?v2) ?v3)) (= (fun_app$i (comp$ ?v4) ?v2) ?v5)) (= (fun_app$i (comp$ (fun_app$ay (comp$t ?v4) ?v0)) ?v1) (fun_app$ai (comp$n ?v5) ?v3)))) :named a80))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$) (?v4 A_a_fun$) (?v5 B_a_fun$)) (=> (and (= (fun_app$i (comp$ ?v0) ?v1) (fun_app$i (comp$ ?v2) ?v3)) (= (fun_app$ab (comp$j ?v4) ?v2) ?v5)) (= (fun_app$i (comp$ (fun_app$ab (comp$j ?v4) ?v0)) ?v1) (fun_app$i (comp$ ?v5) ?v3)))) :named a81))
(assert (! (forall ((?v0 B_stream_a_fun$) (?v1 C_b_stream_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$) (?v4 A_a_stream_fun$) (?v5 B_a_stream_fun$)) (=> (and (= (fun_app$bo (comp$ae ?v0) ?v1) (fun_app$i (comp$ ?v2) ?v3)) (= (fun_app$aj (comp$p ?v4) ?v2) ?v5)) (= (fun_app$j (comp$a (fun_app$bp (comp$af ?v4) ?v0)) ?v1) (fun_app$bq (comp$ag ?v5) ?v3)))) :named a82))
(assert (! (forall ((?v0 B_a_stream_fun$) (?v1 C_b_fun$) (?v2 B_stream_a_stream_fun$) (?v3 C_b_stream_fun$) (?v4 A_stream_a_fun$) (?v5 B_stream_a_fun$)) (=> (and (= (fun_app$bq (comp$ag ?v0) ?v1) (fun_app$j (comp$a ?v2) ?v3)) (= (fun_app$br (comp$ah ?v4) ?v2) ?v5)) (= (fun_app$i (comp$ (fun_app$bs (comp$ai ?v4) ?v0)) ?v1) (fun_app$bo (comp$ae ?v5) ?v3)))) :named a83))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_stream_a_fun$) (?v3 C_b_stream_fun$) (?v4 A_a_stream_fun$) (?v5 B_stream_a_stream_fun$)) (=> (and (= (fun_app$i (comp$ ?v0) ?v1) (fun_app$bo (comp$ae ?v2) ?v3)) (= (fun_app$bp (comp$af ?v4) ?v2) ?v5)) (= (fun_app$bq (comp$ag (fun_app$aj (comp$p ?v4) ?v0)) ?v1) (fun_app$j (comp$a ?v5) ?v3)))) :named a84))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 B_a_stream_fun$) (?v3 C_b_fun$) (?v4 A_stream_a_fun$) (?v5 B_a_fun$)) (=> (and (= (fun_app$j (comp$a ?v0) ?v1) (fun_app$bq (comp$ag ?v2) ?v3)) (= (fun_app$bs (comp$ai ?v4) ?v2) ?v5)) (= (fun_app$bo (comp$ae (fun_app$br (comp$ah ?v4) ?v0)) ?v1) (fun_app$i (comp$ ?v5) ?v3)))) :named a85))
(assert (! (forall ((?v0 C_b_stream_fun$) (?v1 C_c_fun$) (?v2 B_stream_b_stream_fun$) (?v3 C_b_stream_fun$) (?v4 B_stream_a_stream_fun$) (?v5 B_stream_a_stream_fun$)) (=> (and (= (fun_app$b (comp$y ?v0) ?v1) (fun_app$k (comp$b ?v2) ?v3)) (= (fun_app$bl (comp$ab ?v4) ?v2) ?v5)) (= (fun_app$f (comp$z (fun_app$j (comp$a ?v4) ?v0)) ?v1) (fun_app$j (comp$a ?v5) ?v3)))) :named a86))
(assert (! (forall ((?v0 B_stream_b_stream_fun$) (?v1 C_b_stream_fun$) (?v2 C_b_stream_fun$) (?v3 C_c_fun$) (?v4 B_stream_a_stream_fun$) (?v5 C_a_stream_fun$)) (=> (and (= (fun_app$k (comp$b ?v0) ?v1) (fun_app$b (comp$y ?v2) ?v3)) (= (fun_app$j (comp$a ?v4) ?v2) ?v5)) (= (fun_app$j (comp$a (fun_app$bl (comp$ab ?v4) ?v0)) ?v1) (fun_app$f (comp$z ?v5) ?v3)))) :named a87))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 B_stream_a_stream_fun$) (?v3 C_b_stream_fun$) (?v4 A_stream_a_stream_fun$) (?v5 B_stream_a_stream_fun$)) (=> (and (= (fun_app$j (comp$a ?v0) ?v1) (fun_app$j (comp$a ?v2) ?v3)) (= (fun_app$bk (comp$aa ?v4) ?v2) ?v5)) (= (fun_app$j (comp$a (fun_app$bk (comp$aa ?v4) ?v0)) ?v1) (fun_app$j (comp$a ?v5) ?v3)))) :named a88))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$) (?v4 C_b_fun$) (?v5 C_b_fun$)) (=> (and (= (fun_app$ab (comp$j ?v0) ?v1) (fun_app$ay (comp$t ?v2) ?v3)) (= (fun_app$l (comp$c ?v3) ?v4) ?v5)) (= (fun_app$p (comp$g ?v0) (fun_app$i (comp$ ?v1) ?v4)) (fun_app$i (comp$ ?v2) ?v5)))) :named a89))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$) (?v4 C_b_fun$) (?v5 C_a_fun$)) (=> (and (= (fun_app$ay (comp$t ?v0) ?v1) (fun_app$ab (comp$j ?v2) ?v3)) (= (fun_app$i (comp$ ?v3) ?v4) ?v5)) (= (fun_app$i (comp$ ?v0) (fun_app$l (comp$c ?v1) ?v4)) (fun_app$p (comp$g ?v2) ?v5)))) :named a90))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$) (?v4 C_c_fun$) (?v5 C_b_fun$)) (=> (and (= (fun_app$i (comp$ ?v0) ?v1) (fun_app$i (comp$ ?v2) ?v3)) (= (fun_app$ag (comp$l ?v3) ?v4) ?v5)) (= (fun_app$i (comp$ ?v0) (fun_app$ag (comp$l ?v1) ?v4)) (fun_app$i (comp$ ?v2) ?v5)))) :named a91))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 B_a_fun$) (?v2 B_stream_a_stream_fun$) (?v3 B_b_stream_fun$) (?v4 C_b_fun$) (?v5 C_b_stream_fun$)) (=> (and (= (fun_app$aj (comp$p ?v0) ?v1) (fun_app$bt (comp$aj ?v2) ?v3)) (= (fun_app$al (comp$r ?v3) ?v4) ?v5)) (= (fun_app$am (comp$s ?v0) (fun_app$i (comp$ ?v1) ?v4)) (fun_app$j (comp$a ?v2) ?v5)))) :named a92))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 B_stream_a_stream_fun$) (?v2 B_a_fun$) (?v3 B_stream_b_fun$) (?v4 C_b_stream_fun$) (?v5 C_b_fun$)) (=> (and (= (fun_app$br (comp$ah ?v0) ?v1) (fun_app$bu (comp$ak ?v2) ?v3)) (= (fun_app$bv (comp$al ?v3) ?v4) ?v5)) (= (fun_app$bw (comp$am ?v0) (fun_app$j (comp$a ?v1) ?v4)) (fun_app$i (comp$ ?v2) ?v5)))) :named a93))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 B_b_stream_fun$) (?v2 A_a_stream_fun$) (?v3 B_a_fun$) (?v4 C_b_fun$) (?v5 C_a_fun$)) (=> (and (= (fun_app$bt (comp$aj ?v0) ?v1) (fun_app$aj (comp$p ?v2) ?v3)) (= (fun_app$i (comp$ ?v3) ?v4) ?v5)) (= (fun_app$j (comp$a ?v0) (fun_app$al (comp$r ?v1) ?v4)) (fun_app$am (comp$s ?v2) ?v5)))) :named a94))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream_b_fun$) (?v2 A_stream_a_fun$) (?v3 B_stream_a_stream_fun$) (?v4 C_b_stream_fun$) (?v5 C_a_stream_fun$)) (=> (and (= (fun_app$bu (comp$ak ?v0) ?v1) (fun_app$br (comp$ah ?v2) ?v3)) (= (fun_app$j (comp$a ?v3) ?v4) ?v5)) (= (fun_app$i (comp$ ?v0) (fun_app$bv (comp$al ?v1) ?v4)) (fun_app$bw (comp$am ?v2) ?v5)))) :named a95))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 B_stream_a_stream_fun$) (?v3 C_b_stream_fun$) (?v4 C_c_fun$) (?v5 C_b_stream_fun$)) (=> (and (= (fun_app$j (comp$a ?v0) ?v1) (fun_app$j (comp$a ?v2) ?v3)) (= (fun_app$b (comp$y ?v3) ?v4) ?v5)) (= (fun_app$j (comp$a ?v0) (fun_app$b (comp$y ?v1) ?v4)) (fun_app$j (comp$a ?v2) ?v5)))) :named a96))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 B_stream_a_stream_fun$) (?v2 B_stream_a_stream_fun$) (?v3 B_stream_b_stream_fun$) (?v4 C_b_stream_fun$) (?v5 C_b_stream_fun$)) (=> (and (= (fun_app$bk (comp$aa ?v0) ?v1) (fun_app$bl (comp$ab ?v2) ?v3)) (= (fun_app$k (comp$b ?v3) ?v4) ?v5)) (= (fun_app$o (comp$f ?v0) (fun_app$j (comp$a ?v1) ?v4)) (fun_app$j (comp$a ?v2) ?v5)))) :named a97))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 B_stream_b_stream_fun$) (?v2 A_stream_a_stream_fun$) (?v3 B_stream_a_stream_fun$) (?v4 C_b_stream_fun$) (?v5 C_a_stream_fun$)) (=> (and (= (fun_app$bl (comp$ab ?v0) ?v1) (fun_app$bk (comp$aa ?v2) ?v3)) (= (fun_app$j (comp$a ?v3) ?v4) ?v5)) (= (fun_app$j (comp$a ?v0) (fun_app$k (comp$b ?v1) ?v4)) (fun_app$o (comp$f ?v2) ?v5)))) :named a98))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 C_a_fun$) (?v2 B_stream_a_stream_fun$) (?v3 C_b_stream_fun$) (?v4 C$)) (=> (= (fun_app$am (comp$s ?v0) ?v1) (fun_app$j (comp$a ?v2) ?v3)) (= (fun_app$an ?v0 (fun_app$ao ?v1 ?v4)) (fun_app$ ?v2 (fun_app$a ?v3 ?v4))))) :named a99))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 C_a_fun$) (?v2 A_a_stream_fun$) (?v3 C_a_fun$) (?v4 C$)) (=> (= (fun_app$am (comp$s ?v0) ?v1) (fun_app$am (comp$s ?v2) ?v3)) (= (fun_app$an ?v0 (fun_app$ao ?v1 ?v4)) (fun_app$an ?v2 (fun_app$ao ?v3 ?v4))))) :named a100))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 B_a_fun$) (?v2 A_a_stream_fun$) (?v3 B_a_fun$) (?v4 B$)) (=> (= (fun_app$aj (comp$p ?v0) ?v1) (fun_app$aj (comp$p ?v2) ?v3)) (= (fun_app$an ?v0 (fun_app$aq ?v1 ?v4)) (fun_app$an ?v2 (fun_app$aq ?v3 ?v4))))) :named a101))
(assert (! (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 A_b_fun$) (?v3 C_a_fun$) (?v4 C$)) (=> (= (fun_app$n (comp$e ?v0) ?v1) (fun_app$n (comp$e ?v2) ?v3)) (= (fun_app$as ?v0 (fun_app$ao ?v1 ?v4)) (fun_app$as ?v2 (fun_app$ao ?v3 ?v4))))) :named a102))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$) (?v4 C$)) (=> (= (fun_app$p (comp$g ?v0) ?v1) (fun_app$i (comp$ ?v2) ?v3)) (= (fun_app$at ?v0 (fun_app$ao ?v1 ?v4)) (fun_app$aq ?v2 (fun_app$ar ?v3 ?v4))))) :named a103))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 A_a_fun$) (?v3 C_a_fun$) (?v4 C$)) (=> (= (fun_app$p (comp$g ?v0) ?v1) (fun_app$p (comp$g ?v2) ?v3)) (= (fun_app$at ?v0 (fun_app$ao ?v1 ?v4)) (fun_app$at ?v2 (fun_app$ao ?v3 ?v4))))) :named a104))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$) (?v4 B$)) (=> (= (fun_app$ab (comp$j ?v0) ?v1) (fun_app$ab (comp$j ?v2) ?v3)) (= (fun_app$at ?v0 (fun_app$aq ?v1 ?v4)) (fun_app$at ?v2 (fun_app$aq ?v3 ?v4))))) :named a105))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$) (?v4 C$)) (=> (= (fun_app$i (comp$ ?v0) ?v1) (fun_app$i (comp$ ?v2) ?v3)) (= (fun_app$aq ?v0 (fun_app$ar ?v1 ?v4)) (fun_app$aq ?v2 (fun_app$ar ?v3 ?v4))))) :named a106))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 B_stream_a_stream_fun$) (?v3 C_b_stream_fun$) (?v4 C$)) (=> (= (fun_app$j (comp$a ?v0) ?v1) (fun_app$j (comp$a ?v2) ?v3)) (= (fun_app$ ?v0 (fun_app$a ?v1 ?v4)) (fun_app$ ?v2 (fun_app$a ?v3 ?v4))))) :named a107))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_a_fun$) (?v3 C$)) (=> (= (fun_app$i (comp$ ?v0) ?v1) ?v2) (= (fun_app$aq ?v0 (fun_app$ar ?v1 ?v3)) (fun_app$ao ?v2 ?v3)))) :named a108))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 C_a_stream_fun$) (?v3 C$)) (=> (= (fun_app$j (comp$a ?v0) ?v1) ?v2) (= (fun_app$ ?v0 (fun_app$a ?v1 ?v3)) (fun_app$e ?v2 ?v3)))) :named a109))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$)) (=> (= (fun_app$ab (comp$j ?v0) ?v1) ?v2) (= (fun_app$p (comp$g ?v0) (fun_app$i (comp$ ?v1) ?v3)) (fun_app$i (comp$ ?v2) ?v3)))) :named a110))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 B_stream_a_stream_fun$) (?v2 B_stream_a_stream_fun$) (?v3 C_b_stream_fun$)) (=> (= (fun_app$bk (comp$aa ?v0) ?v1) ?v2) (= (fun_app$o (comp$f ?v0) (fun_app$j (comp$a ?v1) ?v3)) (fun_app$j (comp$a ?v2) ?v3)))) :named a111))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$)) (=> (= (fun_app$ay (comp$t ?v0) ?v1) ?v2) (= (fun_app$i (comp$ ?v0) (fun_app$l (comp$c ?v1) ?v3)) (fun_app$i (comp$ ?v2) ?v3)))) :named a112))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 B_stream_b_stream_fun$) (?v2 B_stream_a_stream_fun$) (?v3 C_b_stream_fun$)) (=> (= (fun_app$bl (comp$ab ?v0) ?v1) ?v2) (= (fun_app$j (comp$a ?v0) (fun_app$k (comp$b ?v1) ?v3)) (fun_app$j (comp$a ?v2) ?v3)))) :named a113))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_a_fun$) (?v3 C_c_fun$)) (=> (= (fun_app$i (comp$ ?v0) ?v1) ?v2) (= (fun_app$i (comp$ ?v0) (fun_app$ag (comp$l ?v1) ?v3)) (fun_app$ai (comp$n ?v2) ?v3)))) :named a114))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 C_a_stream_fun$) (?v3 C_c_fun$)) (=> (= (fun_app$j (comp$a ?v0) ?v1) ?v2) (= (fun_app$j (comp$a ?v0) (fun_app$b (comp$y ?v1) ?v3)) (fun_app$f (comp$z ?v2) ?v3)))) :named a115))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 C_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$ag (comp$l ?v0) ?v1) ?v2) (= (fun_app$ai (comp$n (fun_app$i (comp$ ?v3) ?v0)) ?v1) (fun_app$i (comp$ ?v3) ?v2)))) :named a116))
(assert (! (forall ((?v0 C_b_stream_fun$) (?v1 C_c_fun$) (?v2 C_b_stream_fun$) (?v3 B_stream_a_stream_fun$)) (=> (= (fun_app$b (comp$y ?v0) ?v1) ?v2) (= (fun_app$f (comp$z (fun_app$j (comp$a ?v3) ?v0)) ?v1) (fun_app$j (comp$a ?v3) ?v2)))) :named a117))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$l (comp$c ?v0) ?v1) ?v2) (= (fun_app$i (comp$ (fun_app$ay (comp$t ?v3) ?v0)) ?v1) (fun_app$i (comp$ ?v3) ?v2)))) :named a118))
(assert (! (forall ((?v0 B_stream_b_stream_fun$) (?v1 C_b_stream_fun$) (?v2 C_b_stream_fun$) (?v3 B_stream_a_stream_fun$)) (=> (= (fun_app$k (comp$b ?v0) ?v1) ?v2) (= (fun_app$j (comp$a (fun_app$bl (comp$ab ?v3) ?v0)) ?v1) (fun_app$j (comp$a ?v3) ?v2)))) :named a119))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_a_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$i (comp$ ?v0) ?v1) ?v2) (= (fun_app$i (comp$ (fun_app$ab (comp$j ?v3) ?v0)) ?v1) (fun_app$p (comp$g ?v3) ?v2)))) :named a120))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 C_a_stream_fun$) (?v3 A_stream_a_stream_fun$)) (=> (= (fun_app$j (comp$a ?v0) ?v1) ?v2) (= (fun_app$j (comp$a (fun_app$bk (comp$aa ?v3) ?v0)) ?v1) (fun_app$o (comp$f ?v3) ?v2)))) :named a121))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C$) (?v3 B_a_fun$) (?v4 C_b_fun$) (?v5 C$)) (=> (= (fun_app$aq ?v0 (fun_app$ar ?v1 ?v2)) (fun_app$aq ?v3 (fun_app$ar ?v4 ?v5))) (= (fun_app$ao (fun_app$i (comp$ ?v0) ?v1) ?v2) (fun_app$ao (fun_app$i (comp$ ?v3) ?v4) ?v5)))) :named a122))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 C$) (?v3 B_stream_a_stream_fun$) (?v4 C_b_stream_fun$) (?v5 C$)) (=> (= (fun_app$ ?v0 (fun_app$a ?v1 ?v2)) (fun_app$ ?v3 (fun_app$a ?v4 ?v5))) (= (fun_app$e (fun_app$j (comp$a ?v0) ?v1) ?v2) (fun_app$e (fun_app$j (comp$a ?v3) ?v4) ?v5)))) :named a123))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C$) (?v3 B_a_fun$) (?v4 C_b_fun$)) (=> (= (fun_app$aq ?v0 (fun_app$ar ?v1 ?v2)) (fun_app$aq ?v3 (fun_app$ar ?v4 ?v2))) (= (fun_app$ao (fun_app$i (comp$ ?v0) ?v1) ?v2) (fun_app$ao (fun_app$i (comp$ ?v3) ?v4) ?v2)))) :named a124))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 C_b_stream_fun$) (?v2 C$) (?v3 B_stream_a_stream_fun$) (?v4 C_b_stream_fun$)) (=> (= (fun_app$ ?v0 (fun_app$a ?v1 ?v2)) (fun_app$ ?v3 (fun_app$a ?v4 ?v2))) (= (fun_app$e (fun_app$j (comp$a ?v0) ?v1) ?v2) (fun_app$e (fun_app$j (comp$a ?v3) ?v4) ?v2)))) :named a125))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 C$) (?v3 B_b_fun$) (?v4 C_b_fun$) (?v5 B_a_fun$)) (=> (= (fun_app$ar ?v0 (fun_app$bx ?v1 ?v2)) (fun_app$by ?v3 (fun_app$ar ?v4 ?v2))) (= (fun_app$ao (fun_app$ai (comp$n (fun_app$i (comp$ ?v5) ?v0)) ?v1) ?v2) (fun_app$ao (fun_app$i (comp$ (fun_app$ay (comp$t ?v5) ?v3)) ?v4) ?v2)))) :named a126))
(assert (! (forall ((?v0 C_b_stream_fun$) (?v1 C_c_fun$) (?v2 C$) (?v3 B_stream_b_stream_fun$) (?v4 C_b_stream_fun$) (?v5 B_stream_a_stream_fun$)) (=> (= (fun_app$a ?v0 (fun_app$bx ?v1 ?v2)) (fun_app$ax ?v3 (fun_app$a ?v4 ?v2))) (= (fun_app$e (fun_app$f (comp$z (fun_app$j (comp$a ?v5) ?v0)) ?v1) ?v2) (fun_app$e (fun_app$j (comp$a (fun_app$bl (comp$ab ?v5) ?v3)) ?v4) ?v2)))) :named a127))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C$) (?v3 C_b_fun$) (?v4 C_c_fun$) (?v5 B_a_fun$)) (=> (= (fun_app$by ?v0 (fun_app$ar ?v1 ?v2)) (fun_app$ar ?v3 (fun_app$bx ?v4 ?v2))) (= (fun_app$ao (fun_app$i (comp$ (fun_app$ay (comp$t ?v5) ?v0)) ?v1) ?v2) (fun_app$ao (fun_app$ai (comp$n (fun_app$i (comp$ ?v5) ?v3)) ?v4) ?v2)))) :named a128))
(assert (! (forall ((?v0 B_stream_b_stream_fun$) (?v1 C_b_stream_fun$) (?v2 C$) (?v3 C_b_stream_fun$) (?v4 C_c_fun$) (?v5 B_stream_a_stream_fun$)) (=> (= (fun_app$ax ?v0 (fun_app$a ?v1 ?v2)) (fun_app$a ?v3 (fun_app$bx ?v4 ?v2))) (= (fun_app$e (fun_app$j (comp$a (fun_app$bl (comp$ab ?v5) ?v0)) ?v1) ?v2) (fun_app$e (fun_app$f (comp$z (fun_app$j (comp$a ?v5) ?v3)) ?v4) ?v2)))) :named a129))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (fun_app$au (sdrop$ ?v0) (fun_app$ (smap$ ?v1) ?v2)) (fun_app$ (smap$ ?v1) (fun_app$ax (sdrop$a ?v0) ?v2)))) :named a130))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$)) (= (comp$an (convol$ ?v0 ?v1) ?v2) (convol$a (fun_app$i (comp$ ?v0) ?v2) (fun_app$i (comp$ ?v1) ?v2)))) :named a131))
(assert (! (forall ((?v0 B_stream_a_stream_fun$) (?v1 B_stream_a_stream_fun$) (?v2 C_b_stream_fun$)) (= (comp$ao (convol$b ?v0 ?v1) ?v2) (convol$c (fun_app$j (comp$a ?v0) ?v2) (fun_app$j (comp$a ?v1) ?v2)))) :named a132))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$ (fun_app$ (smap$ ?v0) ?v1) ?v2) (fun_app$aq ?v0 (snth$a ?v1 ?v2)))) :named a133))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$)) (= (shd$ (fun_app$ (smap$ ?v0) ?v1)) (fun_app$aq ?v0 (shd$a ?v1)))) :named a134))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (fun_app$ (smap$ ?v0) ?v1) (sCons$ ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_stream$)) (and (= ?v1 (sCons$a ?v4 ?v5)) (and (= ?v2 (fun_app$aq ?v0 ?v4)) (= ?v3 (fun_app$ (smap$ ?v0) ?v5))))))) :named a135))
(check-sat)
;(get-unsat-core)
