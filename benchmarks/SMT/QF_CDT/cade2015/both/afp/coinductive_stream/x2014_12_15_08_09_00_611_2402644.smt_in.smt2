; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 487
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort Nat_a_stream_bool_fun_fun$ 0)
(declare-sort A_stream_bool_fun_a_stream_bool_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun p$ () A_stream_bool_fun$)
(declare-fun ev$ (A_stream_bool_fun$) A_stream_bool_fun$)
(declare-fun alw$ (A_stream_bool_fun$) A_stream_bool_fun$)
(declare-fun nxt$ (A_stream_bool_fun$) A_stream_bool_fun$)
(declare-fun ev_at$ (A_stream_bool_fun$) Nat_a_stream_bool_fun_fun$)
(declare-fun omega$ () A_stream$)
(declare-fun sdrop$ (Nat$ A_stream$) A_stream$)
(declare-fun shift$ (A_list$ A_stream$) A_stream$)
(declare-fun suntil$ (A_stream_bool_fun$) A_stream_bool_fun_a_stream_bool_fun_fun$)
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$a (Nat_a_stream_bool_fun_fun$ Nat$) A_stream_bool_fun$)
(declare-fun fun_app$b (A_stream_bool_fun_a_stream_bool_fun_fun$ A_stream_bool_fun$) A_stream_bool_fun$)
(assert (! (not (fun_app$ (ev$ p$) omega$)) :named a0))
(assert (! (fun_app$ (alw$ (ev$ p$)) omega$) :named a1))
(assert (! (forall ((?v0 A_stream_bool_fun$)) (= (ev$ (ev$ ?v0)) (ev$ ?v0))) :named a2))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$) (?v2 A_stream_bool_fun$)) (=> (and (fun_app$ (ev$ ?v0) ?v1) (forall ((?v3 A_stream$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ ?v2 ?v3)))) (fun_app$ (ev$ ?v2) ?v1))) :named a3))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (=> (fun_app$ ?v0 ?v1) (fun_app$ (ev$ ?v0) ?v1))) :named a4))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (=> (fun_app$ (ev$ (alw$ ?v0)) ?v1) (fun_app$ (alw$ (ev$ ?v0)) ?v1))) :named a5))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$) (?v2 A_stream_bool_fun$) (?v3 A_stream_bool_fun$)) (=> (and (fun_app$ (alw$ ?v0) ?v1) (forall ((?v4 A_stream$)) (=> (fun_app$ ?v0 ?v4) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (fun_app$ (ev$ ?v2) ?v1) (fun_app$ (ev$ ?v3) ?v1)))) :named a6))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (= (fun_app$ (ev$ ?v0) ?v1) (exists ((?v2 Nat$)) (fun_app$ (fun_app$a (ev_at$ ?v0) ?v2) ?v1)))) :named a7))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (= (fun_app$ (ev$ ?v0) ?v1) (exists ((?v2 Nat$)) (and (fun_app$ (fun_app$a (ev_at$ ?v0) ?v2) ?v1) (forall ((?v3 Nat$)) (=> (fun_app$ (fun_app$a (ev_at$ ?v0) ?v3) ?v1) (= ?v3 ?v2))))))) :named a8))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (! (= (fun_app$ (ev$ ?v0) ?v1) (or (fun_app$ ?v0 ?v1) (fun_app$ (nxt$ (ev$ ?v0)) ?v1))) :pattern ((fun_app$ (ev$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream_bool_fun$) (?v2 A_stream$)) (= (fun_app$ (ev$ (fun_app$b (suntil$ ?v0) ?v1)) ?v2) (fun_app$ (ev$ ?v1) ?v2))) :named a10))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream_bool_fun$) (?v2 A_stream$)) (=> (fun_app$ (fun_app$b (suntil$ ?v0) ?v1) ?v2) (fun_app$ (ev$ ?v1) ?v2))) :named a11))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (= (fun_app$ (ev$ ?v0) ?v1) (exists ((?v2 Nat$)) (fun_app$ ?v0 (sdrop$ ?v2 ?v1))))) :named a12))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$) (?v2 A_list$)) (=> (fun_app$ (ev$ ?v0) ?v1) (fun_app$ (ev$ ?v0) (shift$ ?v2 ?v1)))) :named a13))
(assert (! (forall ((?v0 A_stream_bool_fun$)) (= (alw$ (alw$ ?v0)) (alw$ ?v0))) :named a14))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (= (fun_app$ (alw$ ?v0) ?v1) (forall ((?v2 Nat$)) (fun_app$ ?v0 (sdrop$ ?v2 ?v1))))) :named a15))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$)) (! (= (fun_app$ (alw$ ?v0) ?v1) (and (fun_app$ ?v0 ?v1) (fun_app$ (nxt$ (alw$ ?v0)) ?v1))) :pattern ((fun_app$ (alw$ ?v0) ?v1)))) :named a16))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream_bool_fun$) (?v2 A_stream_bool_fun$) (?v3 A_stream_bool_fun$) (?v4 A_stream_bool_fun$) (?v5 A_stream$)) (=> (and (forall ((?v6 A_stream$)) (=> (and (fun_app$ ?v0 ?v6) (fun_app$ ?v1 ?v6)) (fun_app$ ?v2 ?v6))) (and (forall ((?v6 A_stream$)) (=> (and (fun_app$ ?v0 ?v6) (fun_app$ ?v3 ?v6)) (fun_app$ ?v4 ?v6))) (and (fun_app$ (fun_app$b (suntil$ ?v1) ?v3) ?v5) (fun_app$ (alw$ ?v0) ?v5)))) (fun_app$ (fun_app$b (suntil$ ?v2) ?v4) ?v5))) :named a17))
(check-sat)
;(get-unsat-core)
