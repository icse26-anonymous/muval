; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 20
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort C_a_fun$ 0)
(declare-sort C_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort C_bool_fun$ 0)
(declare-sort B_a_a_prod_fun$ 0)
(declare-sort C_a_a_prod_fun$ 0)
(declare-sort C_a_stream_fun$ 0)
(declare-sort C_b_stream_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_b_fun_fun$ 0)
(declare-sort A_b_fun_a_a_fun_fun$ 0)
(declare-sort A_b_fun_a_b_fun_fun$ 0)
(declare-sort B_a_fun_b_a_fun_fun$ 0)
(declare-sort B_a_fun_b_b_fun_fun$ 0)
(declare-sort B_b_fun_b_a_fun_fun$ 0)
(declare-sort B_b_fun_b_b_fun_fun$ 0)
(declare-sort B_c_fun_b_a_fun_fun$ 0)
(declare-sort B_c_fun_b_b_fun_fun$ 0)
(declare-sort C_a_fun_c_a_fun_fun$ 0)
(declare-sort C_a_fun_c_b_fun_fun$ 0)
(declare-sort C_b_fun_c_a_fun_fun$ 0)
(declare-sort C_b_fun_c_b_fun_fun$ 0)
(declare-sort C_c_fun_c_a_fun_fun$ 0)
(declare-sort C_c_fun_c_b_fun_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_stream_b_stream_fun$ 0)
(declare-sort B_stream_a_stream_fun$ 0)
(declare-sort B_stream_b_stream_fun$ 0)
(declare-sort C_a_a_prod_stream_fun$ 0)
(declare-sort B_a_fun_b_a_a_prod_fun_fun$ 0)
(declare-sort C_a_fun_c_a_a_prod_fun_fun$ 0)
(declare-sort C_b_fun_c_a_a_prod_fun_fun$ 0)
(declare-sort C_c_fun_c_a_stream_fun_fun$ 0)
(declare-sort C_c_fun_c_b_stream_fun_fun$ 0)
(declare-sort B_stream_a_a_prod_stream_fun$ 0)
(declare-sort C_a_stream_fun_c_a_stream_fun_fun$ 0)
(declare-sort C_a_stream_fun_c_b_stream_fun_fun$ 0)
(declare-sort C_b_stream_fun_c_a_stream_fun_fun$ 0)
(declare-sort C_b_stream_fun_c_b_stream_fun_fun$ 0)
(declare-sort C_a_stream_fun_c_c_fun_c_a_stream_fun_fun_fun$ 0)
(declare-sort C_b_stream_fun_c_c_fun_c_b_stream_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_a_stream_fun_c_c_fun_c_a_stream_fun_fun_fun_fun$ 0)
(declare-sort C_bool_fun_c_b_stream_fun_c_c_fun_c_b_stream_fun_fun_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (B_stream$ (sCons$a (shd$a B$) (stl$a B_stream$)))))
(declare-datatypes () ((A_a_prod$ (pair$ (fst$ A$) (snd$ A$)))))
(declare-codatatypes () ((C_stream$ (sCons$b (shd$b C$) (stl$b C_stream$)))
  (A_a_prod_stream$ (sCons$c (shd$c A_a_prod$) (stl$c A_a_prod_stream$)))))
(declare-fun b$ () C$)
(declare-fun f$ () B_a_fun$)
(declare-fun comp$ (B_a_fun$) C_b_fun_c_a_fun_fun$)
(declare-fun shd$d () C_b_fun$)
(declare-fun smap$ (B_a_fun$) B_stream_a_stream_fun$)
(declare-fun snth$ (A_stream$ Nat$) A$)
(declare-fun stl$d () C_c_fun$)
(declare-fun comp$a (B_a_a_prod_fun$) C_b_fun_c_a_a_prod_fun_fun$)
(declare-fun comp$b (B_b_fun$) C_b_fun_c_b_fun_fun$)
(declare-fun comp$c (B_a_fun$) B_b_fun_b_a_fun_fun$)
(declare-fun comp$d (A_a_fun$) C_a_fun_c_a_fun_fun$)
(declare-fun comp$e (A_a_fun$) B_a_fun_b_a_fun_fun$)
(declare-fun comp$f (A_b_fun$) B_a_fun_b_b_fun_fun$)
(declare-fun comp$g (A_b_fun$) C_a_fun_c_b_fun_fun$)
(declare-fun comp$h (B_a_fun$) A_b_fun_a_a_fun_fun$)
(declare-fun comp$i (B_b_fun$) B_b_fun_b_b_fun_fun$)
(declare-fun comp$j (C_b_fun$) B_c_fun_b_b_fun_fun$)
(declare-fun comp$k (C_b_fun$) C_c_fun_c_b_fun_fun$)
(declare-fun comp$l (C_a_fun$) C_c_fun_c_a_fun_fun$)
(declare-fun comp$m (C_a_fun$) B_c_fun_b_a_fun_fun$)
(declare-fun comp$n (A_b_fun$) A_a_fun_a_b_fun_fun$)
(declare-fun comp$o (B_b_fun$) A_b_fun_a_b_fun_fun$)
(declare-fun comp$p (A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun comp$q (B_stream_a_a_prod_stream_fun$ C_b_stream_fun$) C_a_a_prod_stream_fun$)
(declare-fun comp$r (B_stream_b_stream_fun$) C_b_stream_fun_c_b_stream_fun_fun$)
(declare-fun comp$s (A_stream_b_stream_fun$) C_a_stream_fun_c_b_stream_fun_fun$)
(declare-fun comp$t (A_stream_a_stream_fun$) C_a_stream_fun_c_a_stream_fun_fun$)
(declare-fun comp$u (B_stream_a_stream_fun$) C_b_stream_fun_c_a_stream_fun_fun$)
(declare-fun sdrop$ (Nat$ A_stream$) A_stream$)
(declare-fun smap$a (A_a_fun$) A_stream_a_stream_fun$)
(declare-fun smap$b (C_b_fun$ C_stream$) B_stream$)
(declare-fun smap$c (C_a_fun$ C_stream$) A_stream$)
(declare-fun smap$d (B_b_fun$) B_stream_b_stream_fun$)
(declare-fun smap$e (A_b_fun$) A_stream_b_stream_fun$)
(declare-fun smap$f (B_c_fun$ B_stream$) C_stream$)
(declare-fun smap$g (C_c_fun$ C_stream$) C_stream$)
(declare-fun smap$h (B_a_a_prod_fun$) B_stream_a_a_prod_stream_fun$)
(declare-fun snth$a (B_stream$ Nat$) B$)
(declare-fun convol$ (B_a_fun$) B_a_fun_b_a_a_prod_fun_fun$)
(declare-fun sdrop$a (Nat$ B_stream$) B_stream$)
(declare-fun convol$a (C_a_fun$) C_a_fun_c_a_a_prod_fun_fun$)
(declare-fun fun_app$ (B_stream_a_stream_fun$ B_stream$) A_stream$)
(declare-fun fun_app$a (C_b_stream_fun$ C$) B_stream$)
(declare-fun fun_app$b (C_c_fun_c_b_stream_fun_fun$ C_c_fun$) C_b_stream_fun$)
(declare-fun fun_app$c (C_a_stream_fun$ C$) A_stream$)
(declare-fun fun_app$d (C_c_fun_c_a_stream_fun_fun$ C_c_fun$) C_a_stream_fun$)
(declare-fun fun_app$e (C_b_fun_c_a_fun_fun$ C_b_fun$) C_a_fun$)
(declare-fun fun_app$f (C_a_a_prod_fun$ C$) A_a_prod$)
(declare-fun fun_app$g (C_b_fun_c_a_a_prod_fun_fun$ C_b_fun$) C_a_a_prod_fun$)
(declare-fun fun_app$h (B_a_a_prod_fun$ B$) A_a_prod$)
(declare-fun fun_app$i (C_b_fun$ C$) B$)
(declare-fun fun_app$j (C_b_fun_c_b_fun_fun$ C_b_fun$) C_b_fun$)
(declare-fun fun_app$k (B_b_fun$ B$) B$)
(declare-fun fun_app$l (B_a_fun$ B$) A$)
(declare-fun fun_app$m (B_b_fun_b_a_fun_fun$ B_b_fun$) B_a_fun$)
(declare-fun fun_app$n (C_a_fun$ C$) A$)
(declare-fun fun_app$o (C_a_fun_c_a_fun_fun$ C_a_fun$) C_a_fun$)
(declare-fun fun_app$p (A_a_fun$ A$) A$)
(declare-fun fun_app$q (B_a_fun_b_a_fun_fun$ B_a_fun$) B_a_fun$)
(declare-fun fun_app$r (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$s (B_stream_b_stream_fun$ B_stream$) B_stream$)
(declare-fun fun_app$t (A_stream_b_stream_fun$ A_stream$) B_stream$)
(declare-fun fun_app$u (B_a_fun_b_b_fun_fun$ B_a_fun$) B_b_fun$)
(declare-fun fun_app$v (C_a_fun_c_b_fun_fun$ C_a_fun$) C_b_fun$)
(declare-fun fun_app$w (A_b_fun_a_a_fun_fun$ A_b_fun$) A_a_fun$)
(declare-fun fun_app$x (B_b_fun_b_b_fun_fun$ B_b_fun$) B_b_fun$)
(declare-fun fun_app$y (B_c_fun_b_b_fun_fun$ B_c_fun$) B_b_fun$)
(declare-fun fun_app$z (C_c_fun_c_b_fun_fun$ C_c_fun$) C_b_fun$)
(declare-fun fun_app$aa (C_c_fun_c_a_fun_fun$ C_c_fun$) C_a_fun$)
(declare-fun fun_app$ab (B_c_fun_b_a_fun_fun$ B_c_fun$) B_a_fun$)
(declare-fun fun_app$ac (A_a_fun_a_b_fun_fun$ A_a_fun$) A_b_fun$)
(declare-fun fun_app$ad (A_b_fun_a_b_fun_fun$ A_b_fun$) A_b_fun$)
(declare-fun fun_app$ae (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$af (C_b_stream_fun_c_c_fun_c_b_stream_fun_fun_fun$ C_b_stream_fun$) C_c_fun_c_b_stream_fun_fun$)
(declare-fun fun_app$ag (C_bool_fun_c_b_stream_fun_c_c_fun_c_b_stream_fun_fun_fun_fun$ C_bool_fun$) C_b_stream_fun_c_c_fun_c_b_stream_fun_fun_fun$)
(declare-fun fun_app$ah (C_b_stream_fun_c_b_stream_fun_fun$ C_b_stream_fun$) C_b_stream_fun$)
(declare-fun fun_app$ai (C_a_stream_fun_c_b_stream_fun_fun$ C_a_stream_fun$) C_b_stream_fun$)
(declare-fun fun_app$aj (C_a_stream_fun_c_c_fun_c_a_stream_fun_fun_fun$ C_a_stream_fun$) C_c_fun_c_a_stream_fun_fun$)
(declare-fun fun_app$ak (C_bool_fun_c_a_stream_fun_c_c_fun_c_a_stream_fun_fun_fun_fun$ C_bool_fun$) C_a_stream_fun_c_c_fun_c_a_stream_fun_fun_fun$)
(declare-fun fun_app$al (C_a_stream_fun_c_a_stream_fun_fun$ C_a_stream_fun$) C_a_stream_fun$)
(declare-fun fun_app$am (C_b_stream_fun_c_a_stream_fun_fun$ C_b_stream_fun$) C_a_stream_fun$)
(declare-fun fun_app$an (C_c_fun$ C$) C$)
(declare-fun fun_app$ao (B_a_fun_b_a_a_prod_fun_fun$ B_a_fun$) B_a_a_prod_fun$)
(declare-fun fun_app$ap (C_a_fun_c_a_a_prod_fun_fun$ C_a_fun$) C_a_a_prod_fun$)
(declare-fun corec_stream$ (C_b_fun$) C_bool_fun_c_b_stream_fun_c_c_fun_c_b_stream_fun_fun_fun_fun$)
(declare-fun corec_stream$a (C_a_a_prod_fun$ C_bool_fun$ C_a_a_prod_stream_fun$ C_c_fun$) C_a_a_prod_stream_fun$)
(declare-fun corec_stream$b (C_a_fun$) C_bool_fun_c_a_stream_fun_c_c_fun_c_a_stream_fun_fun_fun_fun$)
(declare-fun unfold_stream$ (C_b_fun$) C_c_fun_c_b_stream_fun_fun$)
(declare-fun unfold_stream$a (C_a_fun$) C_c_fun_c_a_stream_fun_fun$)
(assert (! (not (= (fun_app$ (smap$ f$) (fun_app$a (fun_app$b (unfold_stream$ shd$d) stl$d) b$)) (fun_app$c (fun_app$d (unfold_stream$a (fun_app$e (comp$ f$) shd$d)) stl$d) b$))) :named a0))
(assert (! (forall ((?v0 B_a_a_prod_fun$) (?v1 C_b_fun$) (?v2 C$)) (! (= (fun_app$f (fun_app$g (comp$a ?v0) ?v1) ?v2) (fun_app$h ?v0 (fun_app$i ?v1 ?v2))) :pattern ((fun_app$f (fun_app$g (comp$a ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C$)) (! (= (fun_app$i (fun_app$j (comp$b ?v0) ?v1) ?v2) (fun_app$k ?v0 (fun_app$i ?v1 ?v2))) :pattern ((fun_app$i (fun_app$j (comp$b ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$l (fun_app$m (comp$c ?v0) ?v1) ?v2) (fun_app$l ?v0 (fun_app$k ?v1 ?v2))) :pattern ((fun_app$l (fun_app$m (comp$c ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C$)) (! (= (fun_app$n (fun_app$o (comp$d ?v0) ?v1) ?v2) (fun_app$p ?v0 (fun_app$n ?v1 ?v2))) :pattern ((fun_app$n (fun_app$o (comp$d ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$l (fun_app$q (comp$e ?v0) ?v1) ?v2) (fun_app$p ?v0 (fun_app$l ?v1 ?v2))) :pattern ((fun_app$l (fun_app$q (comp$e ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C$)) (! (= (fun_app$n (fun_app$e (comp$ ?v0) ?v1) ?v2) (fun_app$l ?v0 (fun_app$i ?v1 ?v2))) :pattern ((fun_app$n (fun_app$e (comp$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (fun_app$r (smap$a ?v0) (fun_app$ (smap$ ?v1) ?v2)) (fun_app$ (smap$ (fun_app$q (comp$e ?v0) ?v1)) ?v2))) :named a7))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_stream$)) (= (fun_app$ (smap$ ?v0) (smap$b ?v1 ?v2)) (smap$c (fun_app$e (comp$ ?v0) ?v1) ?v2))) :named a8))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_stream$)) (= (fun_app$ (smap$ ?v0) (fun_app$s (smap$d ?v1) ?v2)) (fun_app$ (smap$ (fun_app$m (comp$c ?v0) ?v1)) ?v2))) :named a9))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (fun_app$t (smap$e ?v0) (fun_app$ (smap$ ?v1) ?v2)) (fun_app$s (smap$d (fun_app$u (comp$f ?v0) ?v1)) ?v2))) :named a10))
(assert (! (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C_stream$)) (= (fun_app$t (smap$e ?v0) (smap$c ?v1 ?v2)) (smap$b (fun_app$v (comp$g ?v0) ?v1) ?v2))) :named a11))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 A_stream$)) (= (fun_app$ (smap$ ?v0) (fun_app$t (smap$e ?v1) ?v2)) (fun_app$r (smap$a (fun_app$w (comp$h ?v0) ?v1)) ?v2))) :named a12))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B_stream$)) (= (fun_app$s (smap$d ?v0) (fun_app$s (smap$d ?v1) ?v2)) (fun_app$s (smap$d (fun_app$x (comp$i ?v0) ?v1)) ?v2))) :named a13))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C_stream$)) (= (fun_app$s (smap$d ?v0) (smap$b ?v1 ?v2)) (smap$b (fun_app$j (comp$b ?v0) ?v1) ?v2))) :named a14))
(assert (! (forall ((?v0 C_b_fun$) (?v1 B_c_fun$) (?v2 B_stream$)) (= (smap$b ?v0 (smap$f ?v1 ?v2)) (fun_app$s (smap$d (fun_app$y (comp$j ?v0) ?v1)) ?v2))) :named a15))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 C_stream$)) (= (smap$b ?v0 (smap$g ?v1 ?v2)) (smap$b (fun_app$z (comp$k ?v0) ?v1) ?v2))) :named a16))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$)) (= (fun_app$o (comp$d ?v0) (fun_app$e (comp$ ?v1) ?v2)) (fun_app$e (comp$ (fun_app$q (comp$e ?v0) ?v1)) ?v2))) :named a17))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_c_fun$)) (= (fun_app$e (comp$ ?v0) (fun_app$z (comp$k ?v1) ?v2)) (fun_app$aa (comp$l (fun_app$e (comp$ ?v0) ?v1)) ?v2))) :named a18))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 C_b_fun$)) (= (fun_app$e (comp$ ?v0) (fun_app$j (comp$b ?v1) ?v2)) (fun_app$e (comp$ (fun_app$m (comp$c ?v0) ?v1)) ?v2))) :named a19))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$)) (= (fun_app$v (comp$g ?v0) (fun_app$e (comp$ ?v1) ?v2)) (fun_app$j (comp$b (fun_app$u (comp$f ?v0) ?v1)) ?v2))) :named a20))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 C_a_fun$)) (= (fun_app$e (comp$ ?v0) (fun_app$v (comp$g ?v1) ?v2)) (fun_app$o (comp$d (fun_app$w (comp$h ?v0) ?v1)) ?v2))) :named a21))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C_c_fun$)) (= (fun_app$j (comp$b ?v0) (fun_app$z (comp$k ?v1) ?v2)) (fun_app$z (comp$k (fun_app$j (comp$b ?v0) ?v1)) ?v2))) :named a22))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 C_b_fun$)) (= (fun_app$j (comp$b ?v0) (fun_app$j (comp$b ?v1) ?v2)) (fun_app$j (comp$b (fun_app$x (comp$i ?v0) ?v1)) ?v2))) :named a23))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_c_fun$)) (= (fun_app$m (comp$c ?v0) (fun_app$y (comp$j ?v1) ?v2)) (fun_app$ab (comp$m (fun_app$e (comp$ ?v0) ?v1)) ?v2))) :named a24))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_b_fun$)) (= (fun_app$m (comp$c ?v0) (fun_app$x (comp$i ?v1) ?v2)) (fun_app$m (comp$c (fun_app$m (comp$c ?v0) ?v1)) ?v2))) :named a25))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 B_a_fun$)) (= (fun_app$m (comp$c ?v0) (fun_app$u (comp$f ?v1) ?v2)) (fun_app$q (comp$e (fun_app$w (comp$h ?v0) ?v1)) ?v2))) :named a26))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_c_fun$)) (= (fun_app$aa (comp$l (fun_app$e (comp$ ?v0) ?v1)) ?v2) (fun_app$e (comp$ ?v0) (fun_app$z (comp$k ?v1) ?v2)))) :named a27))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$)) (= (fun_app$e (comp$ (fun_app$q (comp$e ?v0) ?v1)) ?v2) (fun_app$o (comp$d ?v0) (fun_app$e (comp$ ?v1) ?v2)))) :named a28))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 C_b_fun$)) (= (fun_app$e (comp$ (fun_app$m (comp$c ?v0) ?v1)) ?v2) (fun_app$e (comp$ ?v0) (fun_app$j (comp$b ?v1) ?v2)))) :named a29))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_c_fun$)) (= (fun_app$ab (comp$m (fun_app$e (comp$ ?v0) ?v1)) ?v2) (fun_app$m (comp$c ?v0) (fun_app$y (comp$j ?v1) ?v2)))) :named a30))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C_c_fun$)) (= (fun_app$z (comp$k (fun_app$j (comp$b ?v0) ?v1)) ?v2) (fun_app$j (comp$b ?v0) (fun_app$z (comp$k ?v1) ?v2)))) :named a31))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C_c_fun$)) (= (fun_app$aa (comp$l (fun_app$o (comp$d ?v0) ?v1)) ?v2) (fun_app$o (comp$d ?v0) (fun_app$aa (comp$l ?v1) ?v2)))) :named a32))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 B_c_fun$)) (= (fun_app$ab (comp$m (fun_app$o (comp$d ?v0) ?v1)) ?v2) (fun_app$q (comp$e ?v0) (fun_app$ab (comp$m ?v1) ?v2)))) :named a33))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$)) (= (fun_app$j (comp$b (fun_app$u (comp$f ?v0) ?v1)) ?v2) (fun_app$v (comp$g ?v0) (fun_app$e (comp$ ?v1) ?v2)))) :named a34))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 C_b_fun$)) (= (fun_app$j (comp$b (fun_app$x (comp$i ?v0) ?v1)) ?v2) (fun_app$j (comp$b ?v0) (fun_app$j (comp$b ?v1) ?v2)))) :named a35))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_b_fun$)) (= (fun_app$m (comp$c (fun_app$m (comp$c ?v0) ?v1)) ?v2) (fun_app$m (comp$c ?v0) (fun_app$x (comp$i ?v1) ?v2)))) :named a36))
(assert (! (forall ((?v0 B_a_a_prod_fun$) (?v1 C_b_fun$) (?v2 C$)) (! (= (fun_app$f (fun_app$g (comp$a ?v0) ?v1) ?v2) (fun_app$h ?v0 (fun_app$i ?v1 ?v2))) :pattern ((fun_app$f (fun_app$g (comp$a ?v0) ?v1) ?v2)))) :named a37))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C$)) (! (= (fun_app$i (fun_app$j (comp$b ?v0) ?v1) ?v2) (fun_app$k ?v0 (fun_app$i ?v1 ?v2))) :pattern ((fun_app$i (fun_app$j (comp$b ?v0) ?v1) ?v2)))) :named a38))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$l (fun_app$m (comp$c ?v0) ?v1) ?v2) (fun_app$l ?v0 (fun_app$k ?v1 ?v2))) :pattern ((fun_app$l (fun_app$m (comp$c ?v0) ?v1) ?v2)))) :named a39))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C$)) (! (= (fun_app$n (fun_app$o (comp$d ?v0) ?v1) ?v2) (fun_app$p ?v0 (fun_app$n ?v1 ?v2))) :pattern ((fun_app$n (fun_app$o (comp$d ?v0) ?v1) ?v2)))) :named a40))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$l (fun_app$q (comp$e ?v0) ?v1) ?v2) (fun_app$p ?v0 (fun_app$l ?v1 ?v2))) :pattern ((fun_app$l (fun_app$q (comp$e ?v0) ?v1) ?v2)))) :named a41))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C$)) (! (= (fun_app$n (fun_app$e (comp$ ?v0) ?v1) ?v2) (fun_app$l ?v0 (fun_app$i ?v1 ?v2))) :pattern ((fun_app$n (fun_app$e (comp$ ?v0) ?v1) ?v2)))) :named a42))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 A_a_fun$) (?v3 C_a_fun$)) (=> (and (= (fun_app$e (comp$ ?v0) ?v1) (fun_app$o (comp$d ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$l ?v0 (fun_app$i ?v1 ?v4)) (fun_app$p ?v2 (fun_app$n ?v3 ?v4)))) false)) false)) :named a43))
(assert (! (forall ((?v0 B_a_a_prod_fun$) (?v1 C_b_fun$) (?v2 B_a_a_prod_fun$) (?v3 C_b_fun$)) (=> (and (= (fun_app$g (comp$a ?v0) ?v1) (fun_app$g (comp$a ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$h ?v0 (fun_app$i ?v1 ?v4)) (fun_app$h ?v2 (fun_app$i ?v3 ?v4)))) false)) false)) :named a44))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 B_b_fun$) (?v3 C_b_fun$)) (=> (and (= (fun_app$j (comp$b ?v0) ?v1) (fun_app$j (comp$b ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$k ?v0 (fun_app$i ?v1 ?v4)) (fun_app$k ?v2 (fun_app$i ?v3 ?v4)))) false)) false)) :named a45))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$)) (=> (and (= (fun_app$m (comp$c ?v0) ?v1) (fun_app$m (comp$c ?v2) ?v3)) (=> (forall ((?v4 B$)) (= (fun_app$l ?v0 (fun_app$k ?v1 ?v4)) (fun_app$l ?v2 (fun_app$k ?v3 ?v4)))) false)) false)) :named a46))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$)) (=> (and (= (fun_app$m (comp$c ?v0) ?v1) (fun_app$q (comp$e ?v2) ?v3)) (=> (forall ((?v4 B$)) (= (fun_app$l ?v0 (fun_app$k ?v1 ?v4)) (fun_app$p ?v2 (fun_app$l ?v3 ?v4)))) false)) false)) :named a47))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$)) (=> (and (= (fun_app$o (comp$d ?v0) ?v1) (fun_app$e (comp$ ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$p ?v0 (fun_app$n ?v1 ?v4)) (fun_app$l ?v2 (fun_app$i ?v3 ?v4)))) false)) false)) :named a48))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 A_a_fun$) (?v3 C_a_fun$)) (=> (and (= (fun_app$o (comp$d ?v0) ?v1) (fun_app$o (comp$d ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$p ?v0 (fun_app$n ?v1 ?v4)) (fun_app$p ?v2 (fun_app$n ?v3 ?v4)))) false)) false)) :named a49))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$)) (=> (and (= (fun_app$q (comp$e ?v0) ?v1) (fun_app$m (comp$c ?v2) ?v3)) (=> (forall ((?v4 B$)) (= (fun_app$p ?v0 (fun_app$l ?v1 ?v4)) (fun_app$l ?v2 (fun_app$k ?v3 ?v4)))) false)) false)) :named a50))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$)) (=> (and (= (fun_app$q (comp$e ?v0) ?v1) (fun_app$q (comp$e ?v2) ?v3)) (=> (forall ((?v4 B$)) (= (fun_app$p ?v0 (fun_app$l ?v1 ?v4)) (fun_app$p ?v2 (fun_app$l ?v3 ?v4)))) false)) false)) :named a51))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$)) (=> (and (= (fun_app$e (comp$ ?v0) ?v1) (fun_app$e (comp$ ?v2) ?v3)) (=> (forall ((?v4 C$)) (= (fun_app$l ?v0 (fun_app$i ?v1 ?v4)) (fun_app$l ?v2 (fun_app$i ?v3 ?v4)))) false)) false)) :named a52))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 B_b_fun$) (?v3 C_b_fun$) (?v4 B_a_fun$) (?v5 B_a_fun$)) (=> (and (= (fun_app$z (comp$k ?v0) ?v1) (fun_app$j (comp$b ?v2) ?v3)) (= (fun_app$m (comp$c ?v4) ?v2) ?v5)) (= (fun_app$aa (comp$l (fun_app$e (comp$ ?v4) ?v0)) ?v1) (fun_app$e (comp$ ?v5) ?v3)))) :named a53))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C_b_fun$) (?v3 C_c_fun$) (?v4 B_a_fun$) (?v5 C_a_fun$)) (=> (and (= (fun_app$j (comp$b ?v0) ?v1) (fun_app$z (comp$k ?v2) ?v3)) (= (fun_app$e (comp$ ?v4) ?v2) ?v5)) (= (fun_app$e (comp$ (fun_app$m (comp$c ?v4) ?v0)) ?v1) (fun_app$aa (comp$l ?v5) ?v3)))) :named a54))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$) (?v4 A_a_fun$) (?v5 B_a_fun$)) (=> (and (= (fun_app$e (comp$ ?v0) ?v1) (fun_app$e (comp$ ?v2) ?v3)) (= (fun_app$q (comp$e ?v4) ?v2) ?v5)) (= (fun_app$e (comp$ (fun_app$q (comp$e ?v4) ?v0)) ?v1) (fun_app$e (comp$ ?v5) ?v3)))) :named a55))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 A_b_fun$) (?v3 C_a_fun$) (?v4 B_a_fun$) (?v5 A_a_fun$)) (=> (and (= (fun_app$z (comp$k ?v0) ?v1) (fun_app$v (comp$g ?v2) ?v3)) (= (fun_app$w (comp$h ?v4) ?v2) ?v5)) (= (fun_app$aa (comp$l (fun_app$e (comp$ ?v4) ?v0)) ?v1) (fun_app$o (comp$d ?v5) ?v3)))) :named a56))
(assert (! (forall ((?v0 C_b_fun$) (?v1 B_c_fun$) (?v2 A_b_fun$) (?v3 B_a_fun$) (?v4 B_a_fun$) (?v5 A_a_fun$)) (=> (and (= (fun_app$y (comp$j ?v0) ?v1) (fun_app$u (comp$f ?v2) ?v3)) (= (fun_app$w (comp$h ?v4) ?v2) ?v5)) (= (fun_app$ab (comp$m (fun_app$e (comp$ ?v4) ?v0)) ?v1) (fun_app$q (comp$e ?v5) ?v3)))) :named a57))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 A_b_fun$) (?v3 B_a_fun$) (?v4 B_a_fun$) (?v5 A_a_fun$)) (=> (and (= (fun_app$x (comp$i ?v0) ?v1) (fun_app$u (comp$f ?v2) ?v3)) (= (fun_app$w (comp$h ?v4) ?v2) ?v5)) (= (fun_app$m (comp$c (fun_app$m (comp$c ?v4) ?v0)) ?v1) (fun_app$q (comp$e ?v5) ?v3)))) :named a58))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 C_b_fun$) (?v3 B_c_fun$) (?v4 B_a_fun$) (?v5 C_a_fun$)) (=> (and (= (fun_app$x (comp$i ?v0) ?v1) (fun_app$y (comp$j ?v2) ?v3)) (= (fun_app$e (comp$ ?v4) ?v2) ?v5)) (= (fun_app$m (comp$c (fun_app$m (comp$c ?v4) ?v0)) ?v1) (fun_app$ab (comp$m ?v5) ?v3)))) :named a59))
(assert (! (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C_b_fun$) (?v3 C_c_fun$) (?v4 B_a_fun$) (?v5 C_a_fun$)) (=> (and (= (fun_app$v (comp$g ?v0) ?v1) (fun_app$z (comp$k ?v2) ?v3)) (= (fun_app$e (comp$ ?v4) ?v2) ?v5)) (= (fun_app$o (comp$d (fun_app$w (comp$h ?v4) ?v0)) ?v1) (fun_app$aa (comp$l ?v5) ?v3)))) :named a60))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$) (?v3 B_c_fun$) (?v4 B_a_fun$) (?v5 C_a_fun$)) (=> (and (= (fun_app$u (comp$f ?v0) ?v1) (fun_app$y (comp$j ?v2) ?v3)) (= (fun_app$e (comp$ ?v4) ?v2) ?v5)) (= (fun_app$q (comp$e (fun_app$w (comp$h ?v4) ?v0)) ?v1) (fun_app$ab (comp$m ?v5) ?v3)))) :named a61))
(assert (! (forall ((?v0 C_b_fun$) (?v1 B_c_fun$) (?v2 B_b_fun$) (?v3 B_b_fun$) (?v4 B_a_fun$) (?v5 B_a_fun$)) (=> (and (= (fun_app$y (comp$j ?v0) ?v1) (fun_app$x (comp$i ?v2) ?v3)) (= (fun_app$m (comp$c ?v4) ?v2) ?v5)) (= (fun_app$ab (comp$m (fun_app$e (comp$ ?v4) ?v0)) ?v1) (fun_app$m (comp$c ?v5) ?v3)))) :named a62))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$) (?v4 C_b_fun$) (?v5 C_b_fun$)) (=> (and (= (fun_app$q (comp$e ?v0) ?v1) (fun_app$m (comp$c ?v2) ?v3)) (= (fun_app$j (comp$b ?v3) ?v4) ?v5)) (= (fun_app$o (comp$d ?v0) (fun_app$e (comp$ ?v1) ?v4)) (fun_app$e (comp$ ?v2) ?v5)))) :named a63))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$) (?v4 C_b_fun$) (?v5 C_a_fun$)) (=> (and (= (fun_app$m (comp$c ?v0) ?v1) (fun_app$q (comp$e ?v2) ?v3)) (= (fun_app$e (comp$ ?v3) ?v4) ?v5)) (= (fun_app$e (comp$ ?v0) (fun_app$j (comp$b ?v1) ?v4)) (fun_app$o (comp$d ?v2) ?v5)))) :named a64))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$) (?v4 C_c_fun$) (?v5 C_b_fun$)) (=> (and (= (fun_app$e (comp$ ?v0) ?v1) (fun_app$e (comp$ ?v2) ?v3)) (= (fun_app$z (comp$k ?v3) ?v4) ?v5)) (= (fun_app$e (comp$ ?v0) (fun_app$z (comp$k ?v1) ?v4)) (fun_app$e (comp$ ?v2) ?v5)))) :named a65))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_a_fun$) (?v2 B_b_fun$) (?v3 A_b_fun$) (?v4 C_a_fun$) (?v5 C_b_fun$)) (=> (and (= (fun_app$ac (comp$n ?v0) ?v1) (fun_app$ad (comp$o ?v2) ?v3)) (= (fun_app$v (comp$g ?v3) ?v4) ?v5)) (= (fun_app$v (comp$g ?v0) (fun_app$o (comp$d ?v1) ?v4)) (fun_app$j (comp$b ?v2) ?v5)))) :named a66))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 B_a_fun$) (?v3 A_b_fun$) (?v4 C_a_fun$) (?v5 C_b_fun$)) (=> (and (= (fun_app$ae (comp$p ?v0) ?v1) (fun_app$w (comp$h ?v2) ?v3)) (= (fun_app$v (comp$g ?v3) ?v4) ?v5)) (= (fun_app$o (comp$d ?v0) (fun_app$o (comp$d ?v1) ?v4)) (fun_app$e (comp$ ?v2) ?v5)))) :named a67))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 B_a_fun$) (?v3 A_b_fun$) (?v4 B_a_fun$) (?v5 B_b_fun$)) (=> (and (= (fun_app$ae (comp$p ?v0) ?v1) (fun_app$w (comp$h ?v2) ?v3)) (= (fun_app$u (comp$f ?v3) ?v4) ?v5)) (= (fun_app$q (comp$e ?v0) (fun_app$q (comp$e ?v1) ?v4)) (fun_app$m (comp$c ?v2) ?v5)))) :named a68))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 A_b_fun$) (?v3 B_a_fun$) (?v4 C_b_fun$) (?v5 C_a_fun$)) (=> (and (= (fun_app$x (comp$i ?v0) ?v1) (fun_app$u (comp$f ?v2) ?v3)) (= (fun_app$e (comp$ ?v3) ?v4) ?v5)) (= (fun_app$j (comp$b ?v0) (fun_app$j (comp$b ?v1) ?v4)) (fun_app$v (comp$g ?v2) ?v5)))) :named a69))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 B_b_fun$) (?v3 B_b_fun$) (?v4 C_b_fun$) (?v5 C_b_fun$)) (=> (and (= (fun_app$u (comp$f ?v0) ?v1) (fun_app$x (comp$i ?v2) ?v3)) (= (fun_app$j (comp$b ?v3) ?v4) ?v5)) (= (fun_app$v (comp$g ?v0) (fun_app$e (comp$ ?v1) ?v4)) (fun_app$j (comp$b ?v2) ?v5)))) :named a70))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B_b_fun$) (?v3 B_b_fun$) (?v4 C_b_fun$) (?v5 C_b_fun$)) (=> (and (= (fun_app$x (comp$i ?v0) ?v1) (fun_app$x (comp$i ?v2) ?v3)) (= (fun_app$j (comp$b ?v3) ?v4) ?v5)) (= (fun_app$j (comp$b ?v0) (fun_app$j (comp$b ?v1) ?v4)) (fun_app$j (comp$b ?v2) ?v5)))) :named a71))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 C_a_fun$) (?v5 C_a_fun$)) (=> (and (= (fun_app$w (comp$h ?v0) ?v1) (fun_app$ae (comp$p ?v2) ?v3)) (= (fun_app$o (comp$d ?v3) ?v4) ?v5)) (= (fun_app$e (comp$ ?v0) (fun_app$v (comp$g ?v1) ?v4)) (fun_app$o (comp$d ?v2) ?v5)))) :named a72))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 A_a_fun$) (?v3 C_a_fun$) (?v4 C$)) (=> (= (fun_app$e (comp$ ?v0) ?v1) (fun_app$o (comp$d ?v2) ?v3)) (= (fun_app$l ?v0 (fun_app$i ?v1 ?v4)) (fun_app$p ?v2 (fun_app$n ?v3 ?v4))))) :named a73))
(assert (! (forall ((?v0 B_a_a_prod_fun$) (?v1 C_b_fun$) (?v2 B_a_a_prod_fun$) (?v3 C_b_fun$) (?v4 C$)) (=> (= (fun_app$g (comp$a ?v0) ?v1) (fun_app$g (comp$a ?v2) ?v3)) (= (fun_app$h ?v0 (fun_app$i ?v1 ?v4)) (fun_app$h ?v2 (fun_app$i ?v3 ?v4))))) :named a74))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 B_b_fun$) (?v3 C_b_fun$) (?v4 C$)) (=> (= (fun_app$j (comp$b ?v0) ?v1) (fun_app$j (comp$b ?v2) ?v3)) (= (fun_app$k ?v0 (fun_app$i ?v1 ?v4)) (fun_app$k ?v2 (fun_app$i ?v3 ?v4))))) :named a75))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$) (?v4 B$)) (=> (= (fun_app$m (comp$c ?v0) ?v1) (fun_app$m (comp$c ?v2) ?v3)) (= (fun_app$l ?v0 (fun_app$k ?v1 ?v4)) (fun_app$l ?v2 (fun_app$k ?v3 ?v4))))) :named a76))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$) (?v4 B$)) (=> (= (fun_app$m (comp$c ?v0) ?v1) (fun_app$q (comp$e ?v2) ?v3)) (= (fun_app$l ?v0 (fun_app$k ?v1 ?v4)) (fun_app$p ?v2 (fun_app$l ?v3 ?v4))))) :named a77))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$) (?v4 C$)) (=> (= (fun_app$o (comp$d ?v0) ?v1) (fun_app$e (comp$ ?v2) ?v3)) (= (fun_app$p ?v0 (fun_app$n ?v1 ?v4)) (fun_app$l ?v2 (fun_app$i ?v3 ?v4))))) :named a78))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 A_a_fun$) (?v3 C_a_fun$) (?v4 C$)) (=> (= (fun_app$o (comp$d ?v0) ?v1) (fun_app$o (comp$d ?v2) ?v3)) (= (fun_app$p ?v0 (fun_app$n ?v1 ?v4)) (fun_app$p ?v2 (fun_app$n ?v3 ?v4))))) :named a79))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$) (?v4 B$)) (=> (= (fun_app$q (comp$e ?v0) ?v1) (fun_app$m (comp$c ?v2) ?v3)) (= (fun_app$p ?v0 (fun_app$l ?v1 ?v4)) (fun_app$l ?v2 (fun_app$k ?v3 ?v4))))) :named a80))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$) (?v4 B$)) (=> (= (fun_app$q (comp$e ?v0) ?v1) (fun_app$q (comp$e ?v2) ?v3)) (= (fun_app$p ?v0 (fun_app$l ?v1 ?v4)) (fun_app$p ?v2 (fun_app$l ?v3 ?v4))))) :named a81))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$) (?v4 C$)) (=> (= (fun_app$e (comp$ ?v0) ?v1) (fun_app$e (comp$ ?v2) ?v3)) (= (fun_app$l ?v0 (fun_app$i ?v1 ?v4)) (fun_app$l ?v2 (fun_app$i ?v3 ?v4))))) :named a82))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 C_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$z (comp$k ?v0) ?v1) ?v2) (= (fun_app$aa (comp$l (fun_app$e (comp$ ?v3) ?v0)) ?v1) (fun_app$e (comp$ ?v3) ?v2)))) :named a83))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$j (comp$b ?v0) ?v1) ?v2) (= (fun_app$e (comp$ (fun_app$m (comp$c ?v3) ?v0)) ?v1) (fun_app$e (comp$ ?v3) ?v2)))) :named a84))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_a_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$e (comp$ ?v0) ?v1) ?v2) (= (fun_app$e (comp$ (fun_app$q (comp$e ?v3) ?v0)) ?v1) (fun_app$o (comp$d ?v3) ?v2)))) :named a85))
(assert (! (forall ((?v0 C_b_fun$) (?v1 B_c_fun$) (?v2 B_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$y (comp$j ?v0) ?v1) ?v2) (= (fun_app$ab (comp$m (fun_app$e (comp$ ?v3) ?v0)) ?v1) (fun_app$m (comp$c ?v3) ?v2)))) :named a86))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 C_b_fun$) (?v3 B_b_fun$)) (=> (= (fun_app$z (comp$k ?v0) ?v1) ?v2) (= (fun_app$z (comp$k (fun_app$j (comp$b ?v3) ?v0)) ?v1) (fun_app$j (comp$b ?v3) ?v2)))) :named a87))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_c_fun$) (?v2 C_a_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$aa (comp$l ?v0) ?v1) ?v2) (= (fun_app$aa (comp$l (fun_app$o (comp$d ?v3) ?v0)) ?v1) (fun_app$o (comp$d ?v3) ?v2)))) :named a88))
(assert (! (forall ((?v0 C_a_fun$) (?v1 B_c_fun$) (?v2 B_a_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$ab (comp$m ?v0) ?v1) ?v2) (= (fun_app$ab (comp$m (fun_app$o (comp$d ?v3) ?v0)) ?v1) (fun_app$q (comp$e ?v3) ?v2)))) :named a89))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$x (comp$i ?v0) ?v1) ?v2) (= (fun_app$m (comp$c (fun_app$m (comp$c ?v3) ?v0)) ?v1) (fun_app$m (comp$c ?v3) ?v2)))) :named a90))
(assert (! (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$v (comp$g ?v0) ?v1) ?v2) (= (fun_app$o (comp$d (fun_app$w (comp$h ?v3) ?v0)) ?v1) (fun_app$e (comp$ ?v3) ?v2)))) :named a91))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 B_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$u (comp$f ?v0) ?v1) ?v2) (= (fun_app$q (comp$e (fun_app$w (comp$h ?v3) ?v0)) ?v1) (fun_app$m (comp$c ?v3) ?v2)))) :named a92))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$)) (=> (= (fun_app$q (comp$e ?v0) ?v1) ?v2) (= (fun_app$o (comp$d ?v0) (fun_app$e (comp$ ?v1) ?v3)) (fun_app$e (comp$ ?v2) ?v3)))) :named a93))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_a_fun$) (?v3 C_b_fun$)) (=> (= (fun_app$m (comp$c ?v0) ?v1) ?v2) (= (fun_app$e (comp$ ?v0) (fun_app$j (comp$b ?v1) ?v3)) (fun_app$e (comp$ ?v2) ?v3)))) :named a94))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_a_fun$) (?v3 C_c_fun$)) (=> (= (fun_app$e (comp$ ?v0) ?v1) ?v2) (= (fun_app$e (comp$ ?v0) (fun_app$z (comp$k ?v1) ?v3)) (fun_app$aa (comp$l ?v2) ?v3)))) :named a95))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 B_b_fun$) (?v3 C_b_fun$)) (=> (= (fun_app$u (comp$f ?v0) ?v1) ?v2) (= (fun_app$v (comp$g ?v0) (fun_app$e (comp$ ?v1) ?v3)) (fun_app$j (comp$b ?v2) ?v3)))) :named a96))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 A_a_fun$) (?v3 C_a_fun$)) (=> (= (fun_app$w (comp$h ?v0) ?v1) ?v2) (= (fun_app$e (comp$ ?v0) (fun_app$v (comp$g ?v1) ?v3)) (fun_app$o (comp$d ?v2) ?v3)))) :named a97))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B_b_fun$) (?v3 C_b_fun$)) (=> (= (fun_app$x (comp$i ?v0) ?v1) ?v2) (= (fun_app$j (comp$b ?v0) (fun_app$j (comp$b ?v1) ?v3)) (fun_app$j (comp$b ?v2) ?v3)))) :named a98))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$w (comp$h ?v0) ?v1) ?v2) (= (fun_app$m (comp$c ?v0) (fun_app$u (comp$f ?v1) ?v3)) (fun_app$q (comp$e ?v2) ?v3)))) :named a99))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 C_a_fun$)) (=> (= (fun_app$ae (comp$p ?v0) ?v1) ?v2) (= (fun_app$o (comp$d ?v0) (fun_app$o (comp$d ?v1) ?v3)) (fun_app$o (comp$d ?v2) ?v3)))) :named a100))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$ae (comp$p ?v0) ?v1) ?v2) (= (fun_app$q (comp$e ?v0) (fun_app$q (comp$e ?v1) ?v3)) (fun_app$q (comp$e ?v2) ?v3)))) :named a101))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_a_fun$) (?v3 B_c_fun$)) (=> (= (fun_app$e (comp$ ?v0) ?v1) ?v2) (= (fun_app$m (comp$c ?v0) (fun_app$y (comp$j ?v1) ?v3)) (fun_app$ab (comp$m ?v2) ?v3)))) :named a102))
(assert (! (forall ((?v0 B_a_a_prod_fun$) (?v1 C_b_fun$) (?v2 C_a_a_prod_fun$) (?v3 C$)) (=> (= (fun_app$g (comp$a ?v0) ?v1) ?v2) (= (fun_app$h ?v0 (fun_app$i ?v1 ?v3)) (fun_app$f ?v2 ?v3)))) :named a103))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C_b_fun$) (?v3 C$)) (=> (= (fun_app$j (comp$b ?v0) ?v1) ?v2) (= (fun_app$k ?v0 (fun_app$i ?v1 ?v3)) (fun_app$i ?v2 ?v3)))) :named a104))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_a_fun$) (?v3 B$)) (=> (= (fun_app$m (comp$c ?v0) ?v1) ?v2) (= (fun_app$l ?v0 (fun_app$k ?v1 ?v3)) (fun_app$l ?v2 ?v3)))) :named a105))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C_a_fun$) (?v3 C$)) (=> (= (fun_app$o (comp$d ?v0) ?v1) ?v2) (= (fun_app$p ?v0 (fun_app$n ?v1 ?v3)) (fun_app$n ?v2 ?v3)))) :named a106))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 B$)) (=> (= (fun_app$q (comp$e ?v0) ?v1) ?v2) (= (fun_app$p ?v0 (fun_app$l ?v1 ?v3)) (fun_app$l ?v2 ?v3)))) :named a107))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_a_fun$) (?v3 C$)) (=> (= (fun_app$e (comp$ ?v0) ?v1) ?v2) (= (fun_app$l ?v0 (fun_app$i ?v1 ?v3)) (fun_app$n ?v2 ?v3)))) :named a108))
(assert (! (forall ((?v0 B_a_a_prod_fun$) (?v1 C_b_fun$) (?v2 C_bool_fun$) (?v3 C_b_stream_fun$) (?v4 C_c_fun$)) (= (comp$q (smap$h ?v0) (fun_app$b (fun_app$af (fun_app$ag (corec_stream$ ?v1) ?v2) ?v3) ?v4)) (corec_stream$a (fun_app$g (comp$a ?v0) ?v1) ?v2 (comp$q (smap$h ?v0) ?v3) ?v4))) :named a109))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C_bool_fun$) (?v3 C_b_stream_fun$) (?v4 C_c_fun$)) (= (fun_app$ah (comp$r (smap$d ?v0)) (fun_app$b (fun_app$af (fun_app$ag (corec_stream$ ?v1) ?v2) ?v3) ?v4)) (fun_app$b (fun_app$af (fun_app$ag (corec_stream$ (fun_app$j (comp$b ?v0) ?v1)) ?v2) (fun_app$ah (comp$r (smap$d ?v0)) ?v3)) ?v4))) :named a110))
(assert (! (forall ((?v0 A_b_fun$) (?v1 C_a_fun$) (?v2 C_bool_fun$) (?v3 C_a_stream_fun$) (?v4 C_c_fun$)) (= (fun_app$ai (comp$s (smap$e ?v0)) (fun_app$d (fun_app$aj (fun_app$ak (corec_stream$b ?v1) ?v2) ?v3) ?v4)) (fun_app$b (fun_app$af (fun_app$ag (corec_stream$ (fun_app$v (comp$g ?v0) ?v1)) ?v2) (fun_app$ai (comp$s (smap$e ?v0)) ?v3)) ?v4))) :named a111))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_a_fun$) (?v2 C_bool_fun$) (?v3 C_a_stream_fun$) (?v4 C_c_fun$)) (= (fun_app$al (comp$t (smap$a ?v0)) (fun_app$d (fun_app$aj (fun_app$ak (corec_stream$b ?v1) ?v2) ?v3) ?v4)) (fun_app$d (fun_app$aj (fun_app$ak (corec_stream$b (fun_app$o (comp$d ?v0) ?v1)) ?v2) (fun_app$al (comp$t (smap$a ?v0)) ?v3)) ?v4))) :named a112))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C_bool_fun$) (?v3 C_b_stream_fun$) (?v4 C_c_fun$)) (= (fun_app$am (comp$u (smap$ ?v0)) (fun_app$b (fun_app$af (fun_app$ag (corec_stream$ ?v1) ?v2) ?v3) ?v4)) (fun_app$d (fun_app$aj (fun_app$ak (corec_stream$b (fun_app$e (comp$ ?v0) ?v1)) ?v2) (fun_app$am (comp$u (smap$ ?v0)) ?v3)) ?v4))) :named a113))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C$) (?v3 B_a_fun$) (?v4 C_b_fun$) (?v5 C$)) (=> (= (fun_app$l ?v0 (fun_app$i ?v1 ?v2)) (fun_app$l ?v3 (fun_app$i ?v4 ?v5))) (= (fun_app$n (fun_app$e (comp$ ?v0) ?v1) ?v2) (fun_app$n (fun_app$e (comp$ ?v3) ?v4) ?v5)))) :named a114))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_fun$) (?v2 C$) (?v3 B_a_fun$) (?v4 C_b_fun$)) (=> (= (fun_app$l ?v0 (fun_app$i ?v1 ?v2)) (fun_app$l ?v3 (fun_app$i ?v4 ?v2))) (= (fun_app$n (fun_app$e (comp$ ?v0) ?v1) ?v2) (fun_app$n (fun_app$e (comp$ ?v3) ?v4) ?v2)))) :named a115))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 C$) (?v3 B_b_fun$) (?v4 C_b_fun$) (?v5 B_a_fun$)) (=> (= (fun_app$i ?v0 (fun_app$an ?v1 ?v2)) (fun_app$k ?v3 (fun_app$i ?v4 ?v2))) (= (fun_app$n (fun_app$aa (comp$l (fun_app$e (comp$ ?v5) ?v0)) ?v1) ?v2) (fun_app$n (fun_app$e (comp$ (fun_app$m (comp$c ?v5) ?v3)) ?v4) ?v2)))) :named a116))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_fun$) (?v2 C$) (?v3 C_b_fun$) (?v4 C_c_fun$) (?v5 B_a_fun$)) (=> (= (fun_app$k ?v0 (fun_app$i ?v1 ?v2)) (fun_app$i ?v3 (fun_app$an ?v4 ?v2))) (= (fun_app$n (fun_app$e (comp$ (fun_app$m (comp$c ?v5) ?v0)) ?v1) ?v2) (fun_app$n (fun_app$aa (comp$l (fun_app$e (comp$ ?v5) ?v3)) ?v4) ?v2)))) :named a117))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (sdrop$ ?v0 (fun_app$ (smap$ ?v1) ?v2)) (fun_app$ (smap$ ?v1) (sdrop$a ?v0 ?v2)))) :named a118))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_a_fun$) (?v2 C_b_fun$)) (= (fun_app$g (comp$a (fun_app$ao (convol$ ?v0) ?v1)) ?v2) (fun_app$ap (convol$a (fun_app$e (comp$ ?v0) ?v2)) (fun_app$e (comp$ ?v1) ?v2)))) :named a119))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$ (fun_app$ (smap$ ?v0) ?v1) ?v2) (fun_app$l ?v0 (snth$a ?v1 ?v2)))) :named a120))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 C$)) (= (shd$a (fun_app$a (fun_app$b (unfold_stream$ ?v0) ?v1) ?v2)) (fun_app$i ?v0 ?v2))) :named a121))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_c_fun$) (?v2 C$)) (= (shd$ (fun_app$c (fun_app$d (unfold_stream$a ?v0) ?v1) ?v2)) (fun_app$n ?v0 ?v2))) :named a122))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_c_fun$) (?v2 C$)) (= (fun_app$a (fun_app$b (unfold_stream$ ?v0) ?v1) ?v2) (sCons$a (fun_app$i ?v0 ?v2) (fun_app$a (fun_app$b (unfold_stream$ ?v0) ?v1) (fun_app$an ?v1 ?v2))))) :named a123))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_c_fun$) (?v2 C$)) (= (fun_app$c (fun_app$d (unfold_stream$a ?v0) ?v1) ?v2) (sCons$ (fun_app$n ?v0 ?v2) (fun_app$c (fun_app$d (unfold_stream$a ?v0) ?v1) (fun_app$an ?v1 ?v2))))) :named a124))
(check-sat)
;(get-unsat-core)
