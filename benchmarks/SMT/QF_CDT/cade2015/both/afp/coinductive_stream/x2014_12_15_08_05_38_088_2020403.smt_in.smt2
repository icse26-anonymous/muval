; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 310
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_a_stream_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_stream_a_stream_bool_fun_fun$ 0)
(declare-sort A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun uu$ () A_llist_a_fun$)
(declare-fun xs$ () A_stream$)
(declare-fun uua$ () A_llist_a_llist_fun$)
(declare-fun uub$ () A_stream_a_fun$)
(declare-fun uuc$ () A_stream_a_stream_fun$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$a (A_llist_a_fun$ A_llist$) A$)
(declare-fun fun_app$b (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$c (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$d (A_llist_a_stream_fun$ A_llist$) A_stream$)
(declare-fun fun_app$e (A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ A_stream_a_stream_fun$) A_stream_a_stream_fun$)
(declare-fun fun_app$f (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$g (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$h (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$i (A_stream_a_stream_bool_fun_fun$ A_stream$) A_stream_bool_fun$)
(declare-fun fun_app$j (A_bool_fun$ A$) Bool)
(declare-fun unfold_stream$ (A_llist_a_fun$ A_llist_a_llist_fun$) A_llist_a_stream_fun$)
(declare-fun unfold_stream$a (A_stream_a_fun$) A_stream_a_stream_fun_a_stream_a_stream_fun_fun$)
(declare-fun llist_of_stream$ (A_stream$) A_llist$)
(declare-fun stream_of_llist$ () A_llist_a_stream_fun$)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uua$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a uu$ ?v0) (lhd$ ?v0)) :pattern ((fun_app$a uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$b uuc$ ?v0) (stl$ ?v0)) :pattern ((fun_app$b uuc$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$c uub$ ?v0) (shd$ ?v0)) :pattern ((fun_app$c uub$ ?v0)))) :named a3))
(assert (! (not (= (fun_app$d stream_of_llist$ (llist_of_stream$ xs$)) xs$)) :named a4))
(assert (! (forall ((?v0 A_stream$)) (not (lnull$ (llist_of_stream$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_llist$)) (= (shd$ (fun_app$d stream_of_llist$ ?v0)) (lhd$ ?v0))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (= (stl$ (fun_app$d stream_of_llist$ ?v0)) (fun_app$d stream_of_llist$ (ltl$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A_stream$)) (= (lhd$ (llist_of_stream$ ?v0)) (shd$ ?v0))) :named a8))
(assert (! (forall ((?v0 A_stream$)) (= (ltl$ (llist_of_stream$ ?v0)) (llist_of_stream$ (stl$ ?v0)))) :named a9))
(assert (! (= stream_of_llist$ (unfold_stream$ uu$ uua$)) :named a10))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_a_stream_fun$) (?v2 A_stream$)) (= (shd$ (fun_app$b (fun_app$e (unfold_stream$a ?v0) ?v1) ?v2)) (fun_app$c ?v0 ?v2))) :named a11))
(assert (! (forall ((?v0 A_llist_a_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$)) (= (shd$ (fun_app$d (unfold_stream$ ?v0 ?v1) ?v2)) (fun_app$a ?v0 ?v2))) :named a12))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_a_stream_fun$) (?v2 A_stream$)) (= (stl$ (fun_app$b (fun_app$e (unfold_stream$a ?v0) ?v1) ?v2)) (fun_app$b (fun_app$e (unfold_stream$a ?v0) ?v1) (fun_app$b ?v1 ?v2)))) :named a13))
(assert (! (forall ((?v0 A_llist_a_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$)) (= (stl$ (fun_app$d (unfold_stream$ ?v0 ?v1) ?v2)) (fun_app$d (unfold_stream$ ?v0 ?v1) (fun_app$ ?v1 ?v2)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (lnull$ ?v0) (lnull$ ?v1)) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$f (fun_app$g ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$f (fun_app$g ?v0 ?v3) ?v4) (and (= (lnull$ ?v3) (lnull$ ?v4)) (=> (and (not (lnull$ ?v3)) (not (lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$f (fun_app$g ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))))) (= ?v1 ?v2))) :named a16))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$f (fun_app$g ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$f (fun_app$g ?v0 ?v3) ?v4) (and (= (lnull$ ?v3) (lnull$ ?v4)) (=> (and (not (lnull$ ?v3)) (not (lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (fun_app$f (fun_app$g ?v0 (ltl$ ?v3)) (ltl$ ?v4)))))))) (= ?v1 ?v2))) :named a17))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$)) (=> (and (= (shd$ ?v0) (shd$ ?v1)) (= (stl$ ?v0) (stl$ ?v1))) (= ?v0 ?v1))) :named a18))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (=> (and (fun_app$h (fun_app$i ?v0 ?v1) ?v2) (forall ((?v3 A_stream$) (?v4 A_stream$)) (=> (fun_app$h (fun_app$i ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (or (fun_app$h (fun_app$i ?v0 (stl$ ?v3)) (stl$ ?v4)) (= (stl$ ?v3) (stl$ ?v4))))))) (= ?v1 ?v2))) :named a19))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (=> (and (fun_app$h (fun_app$i ?v0 ?v1) ?v2) (forall ((?v3 A_stream$) (?v4 A_stream$)) (=> (fun_app$h (fun_app$i ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (fun_app$h (fun_app$i ?v0 (stl$ ?v3)) (stl$ ?v4)))))) (= ?v1 ?v2))) :named a20))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (lnull$ ?v0) (not (fun_app$j ?v1 (lhd$ ?v0)))) false) (=> (and (not (lnull$ ?v0)) (fun_app$j ?v1 (lhd$ ?v0))) false)) false)) :named a21))
(assert (! (forall ((?v0 A_llist$)) (=> (lnull$ ?v0) (lnull$ (ltl$ ?v0)))) :named a22))
(assert (! (forall ((?v0 A_stream$)) (= (fun_app$b (fun_app$e (unfold_stream$a uub$) uuc$) ?v0) ?v0)) :named a23))
(check-sat)
;(get-unsat-core)
