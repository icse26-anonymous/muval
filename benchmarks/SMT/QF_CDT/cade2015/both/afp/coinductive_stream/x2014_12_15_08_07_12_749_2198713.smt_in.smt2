; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 79
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort B_stream_set$ 0)
(declare-sort A_a_prod_b_fun$ 0)
(declare-sort A_a_stream_fun$ 0)
(declare-sort A_b_prod_b_fun$ 0)
(declare-sort A_b_stream_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort A_stream_b_fun$ 0)
(declare-sort B_a_prod_b_fun$ 0)
(declare-sort B_b_prod_b_fun$ 0)
(declare-sort B_stream_a_fun$ 0)
(declare-sort B_stream_b_fun$ 0)
(declare-sort A_stream_stream_set$ 0)
(declare-sort B_stream_stream_set$ 0)
(declare-sort A_a_prod_a_a_prod_fun$ 0)
(declare-sort A_a_prod_a_b_prod_fun$ 0)
(declare-sort A_b_prod_a_a_prod_fun$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-sort B_a_prod_b_a_prod_fun$ 0)
(declare-sort B_a_prod_b_b_prod_fun$ 0)
(declare-sort B_b_prod_b_a_prod_fun$ 0)
(declare-sort B_b_prod_b_b_prod_fun$ 0)
(declare-sort A_a_prod_a_b_stream_prod_fun$ 0)
(declare-sort B_a_prod_b_b_stream_prod_fun$ 0)
(declare-codatatypes () ((B_stream$ (sCons$ (shd$ B$) (stl$ B_stream$)))
  (A_stream$ (sCons$a (shd$a A$) (stl$a A_stream$)))
  (A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))
  (B_stream_llist$ (lNil$b) (lCons$b (lhd$b B_stream$) (ltl$b B_stream_llist$)))
  (B_stream_stream$ (sCons$b (shd$b B_stream$) (stl$b B_stream_stream$)))
  (A_stream_llist$ (lNil$c) (lCons$c (lhd$c A_stream$) (ltl$c A_stream_llist$)))
  (A_stream_stream$ (sCons$c (shd$c A_stream$) (stl$c A_stream_stream$)))))
(declare-datatypes () ((A_a_prod$ (pair$ (fst$ A$) (snd$ A$)))))
(declare-codatatypes () ((A_a_prod_stream$ (sCons$d (shd$d A_a_prod$) (stl$d A_a_prod_stream$)))))
(declare-datatypes () ((A_b_prod$ (pair$a (fst$a A$) (snd$a B$)))))
(declare-codatatypes () ((A_b_prod_stream$ (sCons$e (shd$e A_b_prod$) (stl$e A_b_prod_stream$)))))
(declare-datatypes () ((B_a_prod$ (pair$b (fst$b B$) (snd$b A$)))))
(declare-codatatypes () ((B_a_prod_stream$ (sCons$f (shd$f B_a_prod$) (stl$f B_a_prod_stream$)))))
(declare-datatypes () ((B_b_prod$ (pair$c (fst$c B$) (snd$c B$)))))
(declare-codatatypes () ((B_b_prod_stream$ (sCons$g (shd$g B_b_prod$) (stl$g B_b_prod_stream$)))))
(declare-datatypes () ((A_b_stream_prod$ (pair$d (fst$d A$) (snd$d B_stream$)))))
(declare-codatatypes () ((A_b_stream_prod_stream$ (sCons$h (shd$h A_b_stream_prod$) (stl$h A_b_stream_prod_stream$)))))
(declare-datatypes () ((B_b_stream_prod$ (pair$e (fst$e B$) (snd$e B_stream$)))))
(declare-codatatypes () ((B_b_stream_prod_stream$ (sCons$i (shd$i B_b_stream_prod$) (stl$i B_b_stream_prod_stream$)))))
(declare-datatypes () ((B_a_a_prod_prod$ (pair$f (fst$f B$) (snd$f A_a_prod$)))))
(declare-codatatypes () ((B_a_a_prod_prod_stream$ (sCons$j (shd$j B_a_a_prod_prod$) (stl$j B_a_a_prod_prod_stream$)))))
(declare-datatypes () ((B_a_b_prod_prod$ (pair$g (fst$g B$) (snd$g A_b_prod$)))))
(declare-codatatypes () ((B_a_b_prod_prod_stream$ (sCons$k (shd$k B_a_b_prod_prod$) (stl$k B_a_b_prod_prod_stream$)))))
(declare-datatypes () ((B_b_a_prod_prod$ (pair$h (fst$h B$) (snd$h B_a_prod$)))))
(declare-codatatypes () ((B_b_a_prod_prod_stream$ (sCons$l (shd$l B_b_a_prod_prod$) (stl$l B_b_a_prod_prod_stream$)))))
(declare-datatypes () ((B_b_b_prod_prod$ (pair$i (fst$i B$) (snd$i B_b_prod$)))))
(declare-codatatypes () ((B_b_b_prod_prod_stream$ (sCons$m (shd$m B_b_b_prod_prod$) (stl$m B_b_b_prod_prod_stream$)))))
(declare-datatypes () ((A_a_a_prod_prod$ (pair$j (fst$j A$) (snd$j A_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_prod_stream$ (sCons$n (shd$n A_a_a_prod_prod$) (stl$n A_a_a_prod_prod_stream$)))))
(declare-datatypes () ((A_a_b_prod_prod$ (pair$k (fst$k A$) (snd$k A_b_prod$)))))
(declare-codatatypes () ((A_a_b_prod_prod_stream$ (sCons$o (shd$o A_a_b_prod_prod$) (stl$o A_a_b_prod_prod_stream$)))))
(declare-fun f$ () A_b_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun lmap$ (A_b_fun$ A_llist$) B_llist$)
(declare-fun smap$ (A_b_fun$ A_stream$) B_stream$)
(declare-fun snth$ (B_stream_stream$ Nat$) B_stream$)
(declare-fun szip$ (A_stream$ B_stream$) A_b_prod_stream$)
(declare-fun apsnd$ (A_b_fun$) A_a_prod_a_b_prod_fun$)
(declare-fun lmap$a (A_b_stream_fun$ A_llist$) B_stream_llist$)
(declare-fun lmap$b (A_a_stream_fun$ A_llist$) A_stream_llist$)
(declare-fun lmap$c (A_a_fun$ A_llist$) A_llist$)
(declare-fun lmap$d (B_a_fun$ B_llist$) A_llist$)
(declare-fun lmap$e (B_b_fun$ B_llist$) B_llist$)
(declare-fun sdrop$ (Nat$ B_stream$) B_stream$)
(declare-fun smap$a (A_b_stream_fun$ A_stream$) B_stream_stream$)
(declare-fun smap$b (A_a_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun smap$c (A_a_fun$ A_stream$) A_stream$)
(declare-fun smap$d (B_a_fun$ B_stream$) A_stream$)
(declare-fun smap$e (B_b_fun$ B_stream$) B_stream$)
(declare-fun smap$f (A_a_prod_b_fun$ A_a_prod_stream$) B_stream$)
(declare-fun smap$g (A_b_prod_b_fun$ A_b_prod_stream$) B_stream$)
(declare-fun smap$h (B_a_prod_b_fun$ B_a_prod_stream$) B_stream$)
(declare-fun smap$i (B_b_prod_b_fun$ B_b_prod_stream$) B_stream$)
(declare-fun smap$j (A_stream_a_fun$ A_stream_stream$) A_stream$)
(declare-fun smap$k (B_stream_a_fun$ B_stream_stream$) A_stream$)
(declare-fun smap$l (A_stream_b_fun$ A_stream_stream$) B_stream$)
(declare-fun smap$m (B_stream_b_fun$ B_stream_stream$) B_stream$)
(declare-fun smap$n (A_a_prod_a_b_prod_fun$ A_a_prod_stream$) A_b_prod_stream$)
(declare-fun smap$o (B_a_prod_b_b_prod_fun$ B_a_prod_stream$) B_b_prod_stream$)
(declare-fun smap$p (A_b_prod_a_b_prod_fun$ A_b_prod_stream$) A_b_prod_stream$)
(declare-fun smap$q (B_b_prod_b_b_prod_fun$ B_b_prod_stream$) B_b_prod_stream$)
(declare-fun smap$r (A_b_prod_a_a_prod_fun$ A_b_prod_stream$) A_a_prod_stream$)
(declare-fun smap$s (B_b_prod_b_a_prod_fun$ B_b_prod_stream$) B_a_prod_stream$)
(declare-fun smap$t (A_a_prod_a_a_prod_fun$ A_a_prod_stream$) A_a_prod_stream$)
(declare-fun smap$u (B_a_prod_b_a_prod_fun$ B_a_prod_stream$) B_a_prod_stream$)
(declare-fun smap$v (A_a_prod_a_b_stream_prod_fun$ A_a_prod_stream$) A_b_stream_prod_stream$)
(declare-fun smap$w (B_a_prod_b_b_stream_prod_fun$ B_a_prod_stream$) B_b_stream_prod_stream$)
(declare-fun snth$a (A_stream$ Nat$) A$)
(declare-fun snth$b (A_stream_stream$ Nat$) A_stream$)
(declare-fun snth$c (B_stream$ Nat$) B$)
(declare-fun szip$a (A_stream$ A_stream$) A_a_prod_stream$)
(declare-fun szip$b (B_stream$ B_stream$) B_b_prod_stream$)
(declare-fun szip$c (B_stream$ A_stream$) B_a_prod_stream$)
(declare-fun szip$d (A_stream$ B_stream_stream$) A_b_stream_prod_stream$)
(declare-fun szip$e (B_stream$ B_stream_stream$) B_b_stream_prod_stream$)
(declare-fun szip$f (B_stream$ A_a_prod_stream$) B_a_a_prod_prod_stream$)
(declare-fun szip$g (B_stream$ A_b_prod_stream$) B_a_b_prod_prod_stream$)
(declare-fun szip$h (B_stream$ B_a_prod_stream$) B_b_a_prod_prod_stream$)
(declare-fun szip$i (B_stream$ B_b_prod_stream$) B_b_b_prod_prod_stream$)
(declare-fun szip$j (A_stream$ A_a_prod_stream$) A_a_a_prod_prod_stream$)
(declare-fun szip$k (A_stream$ A_b_prod_stream$) A_a_b_prod_prod_stream$)
(declare-fun apsnd$a (A_b_fun$) B_a_prod_b_b_prod_fun$)
(declare-fun apsnd$b (B_b_fun$) A_b_prod_a_b_prod_fun$)
(declare-fun apsnd$c (B_b_fun$) B_b_prod_b_b_prod_fun$)
(declare-fun apsnd$d (B_a_fun$) A_b_prod_a_a_prod_fun$)
(declare-fun apsnd$e (B_a_fun$) B_b_prod_b_a_prod_fun$)
(declare-fun apsnd$f (A_a_fun$) A_a_prod_a_a_prod_fun$)
(declare-fun apsnd$g (A_a_fun$) B_a_prod_b_a_prod_fun$)
(declare-fun apsnd$h (A_b_stream_fun$) A_a_prod_a_b_stream_prod_fun$)
(declare-fun apsnd$i (A_b_stream_fun$) B_a_prod_b_b_stream_prod_fun$)
(declare-fun member$ (A_stream$ A_stream_set$) Bool)
(declare-fun sdrop$a (Nat$ A_stream$) A_stream$)
(declare-fun sdrop$b (Nat$ B_stream_stream$) B_stream_stream$)
(declare-fun sdrop$c (Nat$ A_stream_stream$) A_stream_stream$)
(declare-fun sdrop$d (Nat$ A_a_prod_stream$) A_a_prod_stream$)
(declare-fun sdrop$e (Nat$ A_b_prod_stream$) A_b_prod_stream$)
(declare-fun sdrop$f (Nat$ B_a_prod_stream$) B_a_prod_stream$)
(declare-fun sdrop$g (Nat$ B_b_prod_stream$) B_b_prod_stream$)
(declare-fun sdrop$h (Nat$ B_a_a_prod_prod_stream$) B_a_a_prod_prod_stream$)
(declare-fun sdrop$i (Nat$ B_a_b_prod_prod_stream$) B_a_b_prod_prod_stream$)
(declare-fun sdrop$j (Nat$ B_b_a_prod_prod_stream$) B_b_a_prod_prod_stream$)
(declare-fun sdrop$k (Nat$ B_b_b_prod_prod_stream$) B_b_b_prod_prod_stream$)
(declare-fun sdrop$l (Nat$ A_a_a_prod_prod_stream$) A_a_a_prod_prod_stream$)
(declare-fun sdrop$m (Nat$ A_a_b_prod_prod_stream$) A_a_b_prod_prod_stream$)
(declare-fun fun_app$ (A_b_stream_fun$ A$) B_stream$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (B$ B_set$) Bool)
(declare-fun member$c (B_stream$ B_stream_set$) Bool)
(declare-fun member$d (A_stream_stream$ A_stream_stream_set$) Bool)
(declare-fun member$e (B_stream_stream$ B_stream_stream_set$) Bool)
(declare-fun streams$ (A_set$) A_stream_set$)
(declare-fun fun_app$a (A_a_stream_fun$ A$) A_stream$)
(declare-fun fun_app$b (B_b_fun$ B$) B$)
(declare-fun fun_app$c (B_a_fun$ B$) A$)
(declare-fun fun_app$d (A_a_fun$ A$) A$)
(declare-fun fun_app$e (A_b_fun$ A$) B$)
(declare-fun fun_app$f (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$g (B_stream_a_fun$ B_stream$) A$)
(declare-fun fun_app$h (A_stream_b_fun$ A_stream$) B$)
(declare-fun fun_app$i (B_stream_b_fun$ B_stream$) B$)
(declare-fun lfinite$a (B_llist$) Bool)
(declare-fun lsublist$ (B_llist$ Nat_set$) B_llist$)
(declare-fun siterate$ (B_b_fun$ B$) B_stream$)
(declare-fun streams$a (B_set$) B_stream_set$)
(declare-fun streams$b (A_stream_set$) A_stream_stream_set$)
(declare-fun streams$c (B_stream_set$) B_stream_stream_set$)
(declare-fun cr_stream$ (A_llist$ A_stream$) Bool)
(declare-fun lsublist$a (A_llist$ Nat_set$) A_llist$)
(declare-fun siterate$a (A_a_fun$) A_a_stream_fun$)
(declare-fun cr_stream$a (B_llist$ B_stream$) Bool)
(declare-fun lstrict_prefix$ (A_llist$ A_llist$) Bool)
(declare-fun llist_of_stream$ (A_stream$) A_llist$)
(declare-fun lstrict_prefix$a (B_llist$ B_llist$) Bool)
(declare-fun stream_of_llist$ (A_llist$) A_stream$)
(declare-fun llist_of_stream$a (B_stream_stream$) B_stream_llist$)
(declare-fun llist_of_stream$b (A_stream_stream$) A_stream_llist$)
(declare-fun llist_of_stream$c (B_stream$) B_llist$)
(declare-fun stream_of_llist$a (B_llist$) B_stream$)
(assert (! (not (= (smap$ f$ (stream_of_llist$ xs$)) (stream_of_llist$a (lmap$ f$ xs$)))) :named a0))
(assert (! (not (lfinite$ xs$)) :named a1))
(assert (! (forall ((?v0 A_b_stream_fun$) (?v1 A_stream$)) (= (lmap$a ?v0 (llist_of_stream$ ?v1)) (llist_of_stream$a (smap$a ?v0 ?v1)))) :named a2))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$)) (= (lmap$b ?v0 (llist_of_stream$ ?v1)) (llist_of_stream$b (smap$b ?v0 ?v1)))) :named a3))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (lmap$c ?v0 (llist_of_stream$ ?v1)) (llist_of_stream$ (smap$c ?v0 ?v1)))) :named a4))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$)) (= (lmap$d ?v0 (llist_of_stream$c ?v1)) (llist_of_stream$ (smap$d ?v0 ?v1)))) :named a5))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$)) (= (lmap$e ?v0 (llist_of_stream$c ?v1)) (llist_of_stream$c (smap$e ?v0 ?v1)))) :named a6))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_stream$)) (= (lmap$ ?v0 (llist_of_stream$ ?v1)) (llist_of_stream$c (smap$ ?v0 ?v1)))) :named a7))
(assert (! (forall ((?v0 A_stream$)) (= (stream_of_llist$ (llist_of_stream$ ?v0)) ?v0)) :named a8))
(assert (! (forall ((?v0 B_stream$)) (= (stream_of_llist$a (llist_of_stream$c ?v0)) ?v0)) :named a9))
(assert (! (forall ((?v0 A_stream$)) (= (stream_of_llist$ (llist_of_stream$ ?v0)) ?v0)) :named a10))
(assert (! (forall ((?v0 B_stream$)) (= (stream_of_llist$a (llist_of_stream$c ?v0)) ?v0)) :named a11))
(assert (! (forall ((?v0 A_b_stream_fun$) (?v1 A_stream$) (?v2 B_stream$) (?v3 B_stream_stream$)) (= (= (smap$a ?v0 ?v1) (sCons$b ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v1 (sCons$a ?v4 ?v5)) (and (= ?v2 (fun_app$ ?v0 ?v4)) (= ?v3 (smap$a ?v0 ?v5))))))) :named a12))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$) (?v2 A_stream$) (?v3 A_stream_stream$)) (= (= (smap$b ?v0 ?v1) (sCons$c ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v1 (sCons$a ?v4 ?v5)) (and (= ?v2 (fun_app$a ?v0 ?v4)) (= ?v3 (smap$b ?v0 ?v5))))))) :named a13))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$) (?v2 B$) (?v3 B_stream$)) (= (= (smap$e ?v0 ?v1) (sCons$ ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_stream$)) (and (= ?v1 (sCons$ ?v4 ?v5)) (and (= ?v2 (fun_app$b ?v0 ?v4)) (= ?v3 (smap$e ?v0 ?v5))))))) :named a14))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (smap$d ?v0 ?v1) (sCons$a ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_stream$)) (and (= ?v1 (sCons$ ?v4 ?v5)) (and (= ?v2 (fun_app$c ?v0 ?v4)) (= ?v3 (smap$d ?v0 ?v5))))))) :named a15))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (smap$c ?v0 ?v1) (sCons$a ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v1 (sCons$a ?v4 ?v5)) (and (= ?v2 (fun_app$d ?v0 ?v4)) (= ?v3 (smap$c ?v0 ?v5))))))) :named a16))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_stream$) (?v2 B$) (?v3 B_stream$)) (= (= (smap$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v1 (sCons$a ?v4 ?v5)) (and (= ?v2 (fun_app$e ?v0 ?v4)) (= ?v3 (smap$ ?v0 ?v5))))))) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_fun$)) (=> (lstrict_prefix$ ?v0 ?v1) (lstrict_prefix$ (lmap$c ?v2 ?v0) (lmap$c ?v2 ?v1)))) :named a18))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_a_fun$)) (=> (lstrict_prefix$a ?v0 ?v1) (lstrict_prefix$ (lmap$d ?v2 ?v0) (lmap$d ?v2 ?v1)))) :named a19))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_b_fun$)) (=> (lstrict_prefix$a ?v0 ?v1) (lstrict_prefix$a (lmap$e ?v2 ?v0) (lmap$e ?v2 ?v1)))) :named a20))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_b_fun$)) (=> (lstrict_prefix$ ?v0 ?v1) (lstrict_prefix$a (lmap$ ?v2 ?v0) (lmap$ ?v2 ?v1)))) :named a21))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$) (?v2 Nat_set$)) (= (lsublist$ (lmap$e ?v0 ?v1) ?v2) (lmap$e ?v0 (lsublist$ ?v1 ?v2)))) :named a22))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$) (?v2 Nat_set$)) (= (lsublist$a (lmap$d ?v0 ?v1) ?v2) (lmap$d ?v0 (lsublist$ ?v1 ?v2)))) :named a23))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 Nat_set$)) (= (lsublist$a (lmap$c ?v0 ?v1) ?v2) (lmap$c ?v0 (lsublist$a ?v1 ?v2)))) :named a24))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$) (?v2 Nat_set$)) (= (lsublist$ (lmap$ ?v0 ?v1) ?v2) (lmap$ ?v0 (lsublist$a ?v1 ?v2)))) :named a25))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_fun$) (?v2 A_stream$)) (= (sdrop$ ?v0 (smap$ ?v1 ?v2)) (smap$ ?v1 (sdrop$a ?v0 ?v2)))) :named a26))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_fun$) (?v2 B_stream$)) (= (sdrop$ ?v0 (smap$e ?v1 ?v2)) (smap$e ?v1 (sdrop$ ?v0 ?v2)))) :named a27))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (sdrop$a ?v0 (smap$d ?v1 ?v2)) (smap$d ?v1 (sdrop$ ?v0 ?v2)))) :named a28))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (sdrop$a ?v0 (smap$c ?v1 ?v2)) (smap$c ?v1 (sdrop$a ?v0 ?v2)))) :named a29))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_stream_fun$) (?v2 A_stream$)) (= (sdrop$b ?v0 (smap$a ?v1 ?v2)) (smap$a ?v1 (sdrop$a ?v0 ?v2)))) :named a30))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_stream_fun$) (?v2 A_stream$)) (= (sdrop$c ?v0 (smap$b ?v1 ?v2)) (smap$b ?v1 (sdrop$a ?v0 ?v2)))) :named a31))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_b_fun$) (?v2 A_a_prod_stream$)) (= (sdrop$ ?v0 (smap$f ?v1 ?v2)) (smap$f ?v1 (sdrop$d ?v0 ?v2)))) :named a32))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_b_fun$) (?v2 A_b_prod_stream$)) (= (sdrop$ ?v0 (smap$g ?v1 ?v2)) (smap$g ?v1 (sdrop$e ?v0 ?v2)))) :named a33))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_prod_b_fun$) (?v2 B_a_prod_stream$)) (= (sdrop$ ?v0 (smap$h ?v1 ?v2)) (smap$h ?v1 (sdrop$f ?v0 ?v2)))) :named a34))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_prod_b_fun$) (?v2 B_b_prod_stream$)) (= (sdrop$ ?v0 (smap$i ?v1 ?v2)) (smap$i ?v1 (sdrop$g ?v0 ?v2)))) :named a35))
(assert (! (forall ((?v0 A_llist$)) (=> (not (lfinite$ ?v0)) (cr_stream$ ?v0 (stream_of_llist$ ?v0)))) :named a36))
(assert (! (forall ((?v0 B_llist$)) (=> (not (lfinite$a ?v0)) (cr_stream$a ?v0 (stream_of_llist$a ?v0)))) :named a37))
(assert (! (forall ((?v0 A_b_stream_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$ (smap$a ?v0 ?v1) ?v2) (fun_app$ ?v0 (snth$a ?v1 ?v2)))) :named a38))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$b (smap$b ?v0 ?v1) ?v2) (fun_app$a ?v0 (snth$a ?v1 ?v2)))) :named a39))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$c (smap$e ?v0 ?v1) ?v2) (fun_app$b ?v0 (snth$c ?v1 ?v2)))) :named a40))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$a (smap$d ?v0 ?v1) ?v2) (fun_app$c ?v0 (snth$c ?v1 ?v2)))) :named a41))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$a (smap$c ?v0 ?v1) ?v2) (fun_app$d ?v0 (snth$a ?v1 ?v2)))) :named a42))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$c (smap$ ?v0 ?v1) ?v2) (fun_app$e ?v0 (snth$a ?v1 ?v2)))) :named a43))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$) (?v2 A_b_fun$) (?v3 B_set$)) (=> (and (member$ ?v0 (streams$ ?v1)) (forall ((?v4 A$)) (=> (member$a ?v4 ?v1) (member$b (fun_app$e ?v2 ?v4) ?v3)))) (member$c (smap$ ?v2 ?v0) (streams$a ?v3)))) :named a44))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$) (?v2 A_a_fun$) (?v3 A_set$)) (=> (and (member$ ?v0 (streams$ ?v1)) (forall ((?v4 A$)) (=> (member$a ?v4 ?v1) (member$a (fun_app$d ?v2 ?v4) ?v3)))) (member$ (smap$c ?v2 ?v0) (streams$ ?v3)))) :named a45))
(assert (! (forall ((?v0 B_stream$) (?v1 B_set$) (?v2 B_a_fun$) (?v3 A_set$)) (=> (and (member$c ?v0 (streams$a ?v1)) (forall ((?v4 B$)) (=> (member$b ?v4 ?v1) (member$a (fun_app$c ?v2 ?v4) ?v3)))) (member$ (smap$d ?v2 ?v0) (streams$ ?v3)))) :named a46))
(assert (! (forall ((?v0 B_stream$) (?v1 B_set$) (?v2 B_b_fun$) (?v3 B_set$)) (=> (and (member$c ?v0 (streams$a ?v1)) (forall ((?v4 B$)) (=> (member$b ?v4 ?v1) (member$b (fun_app$b ?v2 ?v4) ?v3)))) (member$c (smap$e ?v2 ?v0) (streams$a ?v3)))) :named a47))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$) (?v2 A_stream_a_fun$) (?v3 A_set$)) (=> (and (member$d ?v0 (streams$b ?v1)) (forall ((?v4 A_stream$)) (=> (member$ ?v4 ?v1) (member$a (fun_app$f ?v2 ?v4) ?v3)))) (member$ (smap$j ?v2 ?v0) (streams$ ?v3)))) :named a48))
(assert (! (forall ((?v0 B_stream_stream$) (?v1 B_stream_set$) (?v2 B_stream_a_fun$) (?v3 A_set$)) (=> (and (member$e ?v0 (streams$c ?v1)) (forall ((?v4 B_stream$)) (=> (member$c ?v4 ?v1) (member$a (fun_app$g ?v2 ?v4) ?v3)))) (member$ (smap$k ?v2 ?v0) (streams$ ?v3)))) :named a49))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$) (?v2 A_stream_b_fun$) (?v3 B_set$)) (=> (and (member$d ?v0 (streams$b ?v1)) (forall ((?v4 A_stream$)) (=> (member$ ?v4 ?v1) (member$b (fun_app$h ?v2 ?v4) ?v3)))) (member$c (smap$l ?v2 ?v0) (streams$a ?v3)))) :named a50))
(assert (! (forall ((?v0 B_stream_stream$) (?v1 B_stream_set$) (?v2 B_stream_b_fun$) (?v3 B_set$)) (=> (and (member$e ?v0 (streams$c ?v1)) (forall ((?v4 B_stream$)) (=> (member$c ?v4 ?v1) (member$b (fun_app$i ?v2 ?v4) ?v3)))) (member$c (smap$m ?v2 ?v0) (streams$a ?v3)))) :named a51))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$) (?v2 A_a_stream_fun$) (?v3 A_stream_set$)) (=> (and (member$ ?v0 (streams$ ?v1)) (forall ((?v4 A$)) (=> (member$a ?v4 ?v1) (member$ (fun_app$a ?v2 ?v4) ?v3)))) (member$d (smap$b ?v2 ?v0) (streams$b ?v3)))) :named a52))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$) (?v2 A_b_stream_fun$) (?v3 B_stream_set$)) (=> (and (member$ ?v0 (streams$ ?v1)) (forall ((?v4 A$)) (=> (member$a ?v4 ?v1) (member$c (fun_app$ ?v2 ?v4) ?v3)))) (member$e (smap$a ?v2 ?v0) (streams$c ?v3)))) :named a53))
(assert (! (forall ((?v0 A_stream$) (?v1 A_b_fun$) (?v2 A_stream$)) (= (szip$ ?v0 (smap$ ?v1 ?v2)) (smap$n (apsnd$ ?v1) (szip$a ?v0 ?v2)))) :named a54))
(assert (! (forall ((?v0 B_stream$) (?v1 A_b_fun$) (?v2 A_stream$)) (= (szip$b ?v0 (smap$ ?v1 ?v2)) (smap$o (apsnd$a ?v1) (szip$c ?v0 ?v2)))) :named a55))
(assert (! (forall ((?v0 A_stream$) (?v1 B_b_fun$) (?v2 B_stream$)) (= (szip$ ?v0 (smap$e ?v1 ?v2)) (smap$p (apsnd$b ?v1) (szip$ ?v0 ?v2)))) :named a56))
(assert (! (forall ((?v0 B_stream$) (?v1 B_b_fun$) (?v2 B_stream$)) (= (szip$b ?v0 (smap$e ?v1 ?v2)) (smap$q (apsnd$c ?v1) (szip$b ?v0 ?v2)))) :named a57))
(assert (! (forall ((?v0 A_stream$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (szip$a ?v0 (smap$d ?v1 ?v2)) (smap$r (apsnd$d ?v1) (szip$ ?v0 ?v2)))) :named a58))
(assert (! (forall ((?v0 B_stream$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (szip$c ?v0 (smap$d ?v1 ?v2)) (smap$s (apsnd$e ?v1) (szip$b ?v0 ?v2)))) :named a59))
(assert (! (forall ((?v0 A_stream$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (szip$a ?v0 (smap$c ?v1 ?v2)) (smap$t (apsnd$f ?v1) (szip$a ?v0 ?v2)))) :named a60))
(assert (! (forall ((?v0 B_stream$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (szip$c ?v0 (smap$c ?v1 ?v2)) (smap$u (apsnd$g ?v1) (szip$c ?v0 ?v2)))) :named a61))
(assert (! (forall ((?v0 A_stream$) (?v1 A_b_stream_fun$) (?v2 A_stream$)) (= (szip$d ?v0 (smap$a ?v1 ?v2)) (smap$v (apsnd$h ?v1) (szip$a ?v0 ?v2)))) :named a62))
(assert (! (forall ((?v0 B_stream$) (?v1 A_b_stream_fun$) (?v2 A_stream$)) (= (szip$e ?v0 (smap$a ?v1 ?v2)) (smap$w (apsnd$i ?v1) (szip$c ?v0 ?v2)))) :named a63))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (= (smap$e ?v0 (siterate$ ?v0 ?v1)) (siterate$ ?v0 (fun_app$b ?v0 ?v1)))) :named a64))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (smap$c ?v0 (fun_app$a (siterate$a ?v0) ?v1)) (fun_app$a (siterate$a ?v0) (fun_app$d ?v0 ?v1)))) :named a65))
(assert (! (forall ((?v0 B$) (?v1 B_stream$) (?v2 B$) (?v3 B_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a66))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$a ?v0 ?v1) (sCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a67))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (lfinite$ (lmap$d ?v0 ?v1)) (lfinite$a ?v1))) :named a68))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (lfinite$a (lmap$e ?v0 ?v1)) (lfinite$a ?v1))) :named a69))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lfinite$ (lmap$c ?v0 ?v1)) (lfinite$ ?v1))) :named a70))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (lfinite$a (lmap$ ?v0 ?v1)) (lfinite$ ?v1))) :named a71))
(assert (! (forall ((?v0 Nat$) (?v1 B_stream$) (?v2 B_stream$)) (= (sdrop$g ?v0 (szip$b ?v1 ?v2)) (szip$b (sdrop$ ?v0 ?v1) (sdrop$ ?v0 ?v2)))) :named a72))
(assert (! (forall ((?v0 Nat$) (?v1 B_stream$) (?v2 A_stream$)) (= (sdrop$f ?v0 (szip$c ?v1 ?v2)) (szip$c (sdrop$ ?v0 ?v1) (sdrop$a ?v0 ?v2)))) :named a73))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$) (?v2 B_stream$)) (= (sdrop$e ?v0 (szip$ ?v1 ?v2)) (szip$ (sdrop$a ?v0 ?v1) (sdrop$ ?v0 ?v2)))) :named a74))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$) (?v2 A_stream$)) (= (sdrop$d ?v0 (szip$a ?v1 ?v2)) (szip$a (sdrop$a ?v0 ?v1) (sdrop$a ?v0 ?v2)))) :named a75))
(assert (! (forall ((?v0 Nat$) (?v1 B_stream$) (?v2 A_a_prod_stream$)) (= (sdrop$h ?v0 (szip$f ?v1 ?v2)) (szip$f (sdrop$ ?v0 ?v1) (sdrop$d ?v0 ?v2)))) :named a76))
(assert (! (forall ((?v0 Nat$) (?v1 B_stream$) (?v2 A_b_prod_stream$)) (= (sdrop$i ?v0 (szip$g ?v1 ?v2)) (szip$g (sdrop$ ?v0 ?v1) (sdrop$e ?v0 ?v2)))) :named a77))
(assert (! (forall ((?v0 Nat$) (?v1 B_stream$) (?v2 B_a_prod_stream$)) (= (sdrop$j ?v0 (szip$h ?v1 ?v2)) (szip$h (sdrop$ ?v0 ?v1) (sdrop$f ?v0 ?v2)))) :named a78))
(assert (! (forall ((?v0 Nat$) (?v1 B_stream$) (?v2 B_b_prod_stream$)) (= (sdrop$k ?v0 (szip$i ?v1 ?v2)) (szip$i (sdrop$ ?v0 ?v1) (sdrop$g ?v0 ?v2)))) :named a79))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$) (?v2 A_a_prod_stream$)) (= (sdrop$l ?v0 (szip$j ?v1 ?v2)) (szip$j (sdrop$a ?v0 ?v1) (sdrop$d ?v0 ?v2)))) :named a80))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$) (?v2 A_b_prod_stream$)) (= (sdrop$m ?v0 (szip$k ?v1 ?v2)) (szip$k (sdrop$a ?v0 ?v1) (sdrop$e ?v0 ?v2)))) :named a81))
(assert (! (forall ((?v0 A_llist$)) (=> (not (lfinite$ ?v0)) (= (llist_of_stream$ (stream_of_llist$ ?v0)) ?v0))) :named a82))
(assert (! (forall ((?v0 B_llist$)) (=> (not (lfinite$a ?v0)) (= (llist_of_stream$c (stream_of_llist$a ?v0)) ?v0))) :named a83))
(check-sat)
;(get-unsat-core)
