; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 96
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort B_stream_set$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort B_stream_b_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort B_stream_bool_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort B_stream_b_stream_fun$ 0)
(declare-sort A_stream_stream_bool_fun$ 0)
(declare-sort B_stream_stream_bool_fun$ 0)
(declare-sort A_stream_stream_a_stream_fun$ 0)
(declare-sort B_stream_stream_b_stream_fun$ 0)
(declare-sort A_stream_a_stream_bool_fun_fun$ 0)
(declare-sort A_stream_b_stream_bool_fun_fun$ 0)
(declare-sort B_stream_a_stream_bool_fun_fun$ 0)
(declare-sort B_stream_b_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_stream_bool_fun$ 0)
(declare-sort B_stream_stream_stream_bool_fun$ 0)
(declare-sort A_stream_stream_a_stream_stream_fun$ 0)
(declare-sort B_stream_stream_b_stream_stream_fun$ 0)
(declare-sort A_stream_stream_a_stream_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_b_stream_stream_bool_fun_fun$ 0)
(declare-sort B_stream_stream_a_stream_stream_bool_fun_fun$ 0)
(declare-sort B_stream_stream_b_stream_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_stream_b_stream_stream_stream_bool_fun_fun$ 0)
(declare-sort B_stream_stream_stream_a_stream_stream_stream_bool_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (B_stream$ (sCons$a (shd$a B$) (stl$a B_stream$)))
  (B_stream_stream$ (sCons$b (shd$b B_stream$) (stl$b B_stream_stream$)))
  (A_stream_stream$ (sCons$c (shd$c A_stream$) (stl$c A_stream_stream$)))
  (B_stream_llist$ (lNil$) (lCons$ (lhd$ B_stream$) (ltl$ B_stream_llist$)))
  (A_stream_llist$ (lNil$a) (lCons$a (lhd$a A_stream$) (ltl$a A_stream_llist$)))
  (A_llist$ (lNil$b) (lCons$b (lhd$b A$) (ltl$b A_llist$)))
  (B_llist$ (lNil$c) (lCons$c (lhd$c B$) (ltl$c B_llist$)))
  (B_stream_stream_stream$ (sCons$d (shd$d B_stream_stream$) (stl$d B_stream_stream_stream$)))
  (A_stream_stream_stream$ (sCons$e (shd$e A_stream_stream$) (stl$e A_stream_stream_stream$)))))
(declare-fun p$ () A_b_bool_fun_fun$)
(declare-fun x$ (A_stream$ B_stream$) Bool)
(declare-fun uu$ () B_b_bool_fun_fun$)
(declare-fun xs$ () A_stream$)
(declare-fun ys$ () B_stream$)
(declare-fun uua$ () B_stream_b_stream_bool_fun_fun$)
(declare-fun uub$ () A_a_bool_fun_fun$)
(declare-fun uuc$ () A_stream_a_stream_bool_fun_fun$)
(declare-fun uud$ () B_stream_stream_b_stream_fun$)
(declare-fun uue$ () A_stream_stream_a_stream_fun$)
(declare-fun uuf$ () A_stream_a_fun$)
(declare-fun uug$ () B_stream_b_fun$)
(declare-fun uuh$ () B_stream_stream_b_stream_stream_fun$)
(declare-fun uui$ () A_stream_stream_a_stream_stream_fun$)
(declare-fun uuj$ () A_stream_a_stream_fun$)
(declare-fun uuk$ () B_stream_b_stream_fun$)
(declare-fun sset$ (B_stream_stream$) B_stream_set$)
(declare-fun sset$a (A_stream_stream$) A_stream_set$)
(declare-fun sset$b (B_stream$) B_set$)
(declare-fun sset$c (A_stream$) A_set$)
(declare-fun member$ (B_stream$ B_stream_set$) Bool)
(declare-fun fun_app$ (B_stream_stream_b_stream_stream_fun$ B_stream_stream$) B_stream_stream$)
(declare-fun member$a (A_stream$ A_stream_set$) Bool)
(declare-fun member$b (B$ B_set$) Bool)
(declare-fun member$c (A$ A_set$) Bool)
(declare-fun rel_fun$ (B_stream_stream_a_stream_stream_bool_fun_fun$ B_stream_a_stream_bool_fun_fun$ B_stream_stream_b_stream_fun$ A_stream_stream_a_stream_fun$) Bool)
(declare-fun fun_app$a (A_stream_stream_a_stream_stream_fun$ A_stream_stream$) A_stream_stream$)
(declare-fun fun_app$b (B_stream_b_stream_fun$ B_stream$) B_stream$)
(declare-fun fun_app$c (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$d (B_stream_stream_b_stream_fun$ B_stream_stream$) B_stream$)
(declare-fun fun_app$e (A_stream_stream_a_stream_fun$ A_stream_stream$) A_stream$)
(declare-fun fun_app$f (B_stream_b_fun$ B_stream$) B$)
(declare-fun fun_app$g (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$h (B_stream_bool_fun$ B_stream$) Bool)
(declare-fun fun_app$i (B_stream_b_stream_bool_fun_fun$ B_stream$) B_stream_bool_fun$)
(declare-fun fun_app$j (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$k (A_stream_a_stream_bool_fun_fun$ A_stream$) A_stream_bool_fun$)
(declare-fun fun_app$l (B_bool_fun$ B$) Bool)
(declare-fun fun_app$m (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$n (A_bool_fun$ A$) Bool)
(declare-fun fun_app$o (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$p (A_stream_b_stream_bool_fun_fun$ A_stream$) B_stream_bool_fun$)
(declare-fun fun_app$q (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$r (A_stream_stream_bool_fun$ A_stream_stream$) Bool)
(declare-fun fun_app$s (B_stream_stream_a_stream_stream_bool_fun_fun$ B_stream_stream$) A_stream_stream_bool_fun$)
(declare-fun fun_app$t (B_stream_a_stream_bool_fun_fun$ B_stream$) A_stream_bool_fun$)
(declare-fun fun_app$u (B_stream_stream_bool_fun$ B_stream_stream$) Bool)
(declare-fun fun_app$v (A_stream_stream_b_stream_stream_bool_fun_fun$ A_stream_stream$) B_stream_stream_bool_fun$)
(declare-fun fun_app$w (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$x (A_stream_stream_stream_bool_fun$ A_stream_stream_stream$) Bool)
(declare-fun fun_app$y (B_stream_stream_stream_a_stream_stream_stream_bool_fun_fun$ B_stream_stream_stream$) A_stream_stream_stream_bool_fun$)
(declare-fun fun_app$z (B_stream_stream_stream_bool_fun$ B_stream_stream_stream$) Bool)
(declare-fun rel_fun$a (A_stream_stream_b_stream_stream_bool_fun_fun$ A_stream_b_stream_bool_fun_fun$ A_stream_stream_a_stream_fun$ B_stream_stream_b_stream_fun$) Bool)
(declare-fun rel_fun$b (A_stream_a_stream_bool_fun_fun$ A_a_bool_fun_fun$ A_stream_a_fun$ A_stream_a_fun$) Bool)
(declare-fun rel_fun$c (B_stream_a_stream_bool_fun_fun$ B_a_bool_fun_fun$ B_stream_b_fun$ A_stream_a_fun$) Bool)
(declare-fun rel_fun$d (B_stream_b_stream_bool_fun_fun$ B_b_bool_fun_fun$ B_stream_b_fun$ B_stream_b_fun$) Bool)
(declare-fun rel_fun$e (A_stream_b_stream_bool_fun_fun$ A_b_bool_fun_fun$ A_stream_a_fun$ B_stream_b_fun$) Bool)
(declare-fun rel_fun$f (B_stream_stream_a_stream_stream_bool_fun_fun$ B_stream_stream_a_stream_stream_bool_fun_fun$ B_stream_stream_b_stream_stream_fun$ A_stream_stream_a_stream_stream_fun$) Bool)
(declare-fun rel_fun$g (A_stream_stream_b_stream_stream_bool_fun_fun$ A_stream_stream_b_stream_stream_bool_fun_fun$ A_stream_stream_a_stream_stream_fun$ B_stream_stream_b_stream_stream_fun$) Bool)
(declare-fun rel_fun$h (A_stream_a_stream_bool_fun_fun$ A_stream_a_stream_bool_fun_fun$ A_stream_a_stream_fun$ A_stream_a_stream_fun$) Bool)
(declare-fun rel_fun$i (B_stream_a_stream_bool_fun_fun$ B_stream_a_stream_bool_fun_fun$ B_stream_b_stream_fun$ A_stream_a_stream_fun$) Bool)
(declare-fun rel_fun$j (B_stream_b_stream_bool_fun_fun$ B_stream_b_stream_bool_fun_fun$ B_stream_b_stream_fun$ B_stream_b_stream_fun$) Bool)
(declare-fun rel_fun$k (A_stream_b_stream_bool_fun_fun$ A_stream_b_stream_bool_fun_fun$ A_stream_a_stream_fun$ B_stream_b_stream_fun$) Bool)
(declare-fun conversep$ (A_stream_stream_b_stream_stream_bool_fun_fun$) B_stream_stream_a_stream_stream_bool_fun_fun$)
(declare-fun fun_app$aa (A_stream_stream_stream_b_stream_stream_stream_bool_fun_fun$ A_stream_stream_stream$) B_stream_stream_stream_bool_fun$)
(declare-fun fun_app$ab (B_stream_stream_b_stream_stream_bool_fun_fun$ B_stream_stream$) B_stream_stream_bool_fun$)
(declare-fun fun_app$ac (A_stream_stream_a_stream_stream_bool_fun_fun$ A_stream_stream$) A_stream_stream_bool_fun$)
(declare-fun conversep$a (B_stream_b_stream_bool_fun_fun$) B_stream_b_stream_bool_fun_fun$)
(declare-fun conversep$b (A_stream_a_stream_bool_fun_fun$) A_stream_a_stream_bool_fun_fun$)
(declare-fun conversep$c (B_stream_a_stream_bool_fun_fun$) A_stream_b_stream_bool_fun_fun$)
(declare-fun conversep$d (A_stream_b_stream_bool_fun_fun$) B_stream_a_stream_bool_fun_fun$)
(declare-fun conversep$e (B_b_bool_fun_fun$) B_b_bool_fun_fun$)
(declare-fun conversep$f (A_a_bool_fun_fun$) A_a_bool_fun_fun$)
(declare-fun conversep$g (A_b_bool_fun_fun$) B_a_bool_fun_fun$)
(declare-fun conversep$h (B_a_bool_fun_fun$) A_b_bool_fun_fun$)
(declare-fun conversep$i (A_stream_stream_stream_b_stream_stream_stream_bool_fun_fun$) B_stream_stream_stream_a_stream_stream_stream_bool_fun_fun$)
(declare-fun conversep$j (B_stream_stream_b_stream_stream_bool_fun_fun$) B_stream_stream_b_stream_stream_bool_fun_fun$)
(declare-fun conversep$k (A_stream_stream_a_stream_stream_bool_fun_fun$) A_stream_stream_a_stream_stream_bool_fun_fun$)
(declare-fun conversep$l (B_stream_stream_a_stream_stream_bool_fun_fun$) A_stream_stream_b_stream_stream_bool_fun_fun$)
(declare-fun llist_all2$ (B_stream_a_stream_bool_fun_fun$ B_stream_llist$ A_stream_llist$) Bool)
(declare-fun llist_all2$a (A_stream_b_stream_bool_fun_fun$ A_stream_llist$ B_stream_llist$) Bool)
(declare-fun llist_all2$b (A_a_bool_fun_fun$ A_llist$ A_llist$) Bool)
(declare-fun llist_all2$c (B_a_bool_fun_fun$ B_llist$ A_llist$) Bool)
(declare-fun llist_all2$d (B_b_bool_fun_fun$ B_llist$ B_llist$) Bool)
(declare-fun llist_all2$e (A_b_bool_fun_fun$ A_llist$ B_llist$) Bool)
(declare-fun stream_all2$ (A_b_bool_fun_fun$) A_stream_b_stream_bool_fun_fun$)
(declare-fun stream_all2$a (B_b_bool_fun_fun$) B_stream_b_stream_bool_fun_fun$)
(declare-fun stream_all2$b (A_a_bool_fun_fun$) A_stream_a_stream_bool_fun_fun$)
(declare-fun stream_all2$c (B_stream_a_stream_bool_fun_fun$) B_stream_stream_a_stream_stream_bool_fun_fun$)
(declare-fun stream_all2$d (A_stream_b_stream_bool_fun_fun$) A_stream_stream_b_stream_stream_bool_fun_fun$)
(declare-fun stream_all2$e (B_a_bool_fun_fun$) B_stream_a_stream_bool_fun_fun$)
(declare-fun stream_all2$f (B_stream_stream_a_stream_stream_bool_fun_fun$) B_stream_stream_stream_a_stream_stream_stream_bool_fun_fun$)
(declare-fun stream_all2$g (A_stream_stream_b_stream_stream_bool_fun_fun$) A_stream_stream_stream_b_stream_stream_stream_bool_fun_fun$)
(declare-fun stream_all2$h (B_stream_b_stream_bool_fun_fun$) B_stream_stream_b_stream_stream_bool_fun_fun$)
(declare-fun stream_all2$i (A_stream_a_stream_bool_fun_fun$) A_stream_stream_a_stream_stream_bool_fun_fun$)
(declare-fun llist_of_stream$ (B_stream_stream$) B_stream_llist$)
(declare-fun llist_of_stream$a (A_stream_stream$) A_stream_llist$)
(declare-fun llist_of_stream$b (A_stream$) A_llist$)
(declare-fun llist_of_stream$c (B_stream$) B_llist$)
(assert (! (forall ((?v0 B_stream_stream$)) (! (= (fun_app$ uuh$ ?v0) (stl$b ?v0)) :pattern ((fun_app$ uuh$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_stream_stream$)) (! (= (fun_app$a uui$ ?v0) (stl$c ?v0)) :pattern ((fun_app$a uui$ ?v0)))) :named a1))
(assert (! (forall ((?v0 B_stream$)) (! (= (fun_app$b uuk$ ?v0) (stl$a ?v0)) :pattern ((fun_app$b uuk$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$c uuj$ ?v0) (stl$ ?v0)) :pattern ((fun_app$c uuj$ ?v0)))) :named a3))
(assert (! (forall ((?v0 B_stream_stream$)) (! (= (fun_app$d uud$ ?v0) (shd$b ?v0)) :pattern ((fun_app$d uud$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_stream_stream$)) (! (= (fun_app$e uue$ ?v0) (shd$c ?v0)) :pattern ((fun_app$e uue$ ?v0)))) :named a5))
(assert (! (forall ((?v0 B_stream$)) (! (= (fun_app$f uug$ ?v0) (shd$a ?v0)) :pattern ((fun_app$f uug$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$g uuf$ ?v0) (shd$ ?v0)) :pattern ((fun_app$g uuf$ ?v0)))) :named a7))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream$)) (! (= (fun_app$h (fun_app$i uua$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$h (fun_app$i uua$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$)) (! (= (fun_app$j (fun_app$k uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$j (fun_app$k uuc$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$l (fun_app$m uu$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$l (fun_app$m uu$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$n (fun_app$o uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$n (fun_app$o uub$ ?v0) ?v1)))) :named a11))
(assert (! (not (fun_app$h (fun_app$p (stream_all2$ p$) xs$) ys$)) :named a12))
(assert (! (x$ xs$ ys$) :named a13))
(assert (! (forall ((?v0 A_stream$) (?v1 B_stream$)) (=> (x$ ?v0 ?v1) (and (fun_app$l (fun_app$q p$ (shd$ ?v0)) (shd$a ?v1)) (or (x$ (stl$ ?v0) (stl$a ?v1)) (fun_app$h (fun_app$p (stream_all2$ p$) (stl$ ?v0)) (stl$a ?v1)))))) :named a14))
(assert (! (= (stream_all2$a uu$) uua$) :named a15))
(assert (! (= (stream_all2$b uub$) uuc$) :named a16))
(assert (! (forall ((?v0 B_stream_a_stream_bool_fun_fun$) (?v1 B_stream_stream$) (?v2 A_stream_stream$)) (= (fun_app$r (fun_app$s (stream_all2$c ?v0) ?v1) ?v2) (and (fun_app$j (fun_app$t ?v0 (shd$b ?v1)) (shd$c ?v2)) (fun_app$r (fun_app$s (stream_all2$c ?v0) (stl$b ?v1)) (stl$c ?v2))))) :named a17))
(assert (! (forall ((?v0 A_stream_b_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 B_stream_stream$)) (= (fun_app$u (fun_app$v (stream_all2$d ?v0) ?v1) ?v2) (and (fun_app$h (fun_app$p ?v0 (shd$c ?v1)) (shd$b ?v2)) (fun_app$u (fun_app$v (stream_all2$d ?v0) (stl$c ?v1)) (stl$b ?v2))))) :named a18))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (fun_app$j (fun_app$k (stream_all2$b ?v0) ?v1) ?v2) (and (fun_app$n (fun_app$o ?v0 (shd$ ?v1)) (shd$ ?v2)) (fun_app$j (fun_app$k (stream_all2$b ?v0) (stl$ ?v1)) (stl$ ?v2))))) :named a19))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_stream$) (?v2 A_stream$)) (= (fun_app$j (fun_app$t (stream_all2$e ?v0) ?v1) ?v2) (and (fun_app$n (fun_app$w ?v0 (shd$a ?v1)) (shd$ ?v2)) (fun_app$j (fun_app$t (stream_all2$e ?v0) (stl$a ?v1)) (stl$ ?v2))))) :named a20))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_stream$) (?v2 B_stream$)) (= (fun_app$h (fun_app$i (stream_all2$a ?v0) ?v1) ?v2) (and (fun_app$l (fun_app$m ?v0 (shd$a ?v1)) (shd$a ?v2)) (fun_app$h (fun_app$i (stream_all2$a ?v0) (stl$a ?v1)) (stl$a ?v2))))) :named a21))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_stream$) (?v2 B_stream$)) (= (fun_app$h (fun_app$p (stream_all2$ ?v0) ?v1) ?v2) (and (fun_app$l (fun_app$q ?v0 (shd$ ?v1)) (shd$a ?v2)) (fun_app$h (fun_app$p (stream_all2$ ?v0) (stl$ ?v1)) (stl$a ?v2))))) :named a22))
(assert (! (forall ((?v0 B_stream_stream_a_stream_stream_bool_fun_fun$) (?v1 B_stream_stream$) (?v2 A_stream_stream$) (?v3 B_stream_a_stream_bool_fun_fun$)) (=> (and (fun_app$r (fun_app$s ?v0 ?v1) ?v2) (forall ((?v4 B_stream_stream$) (?v5 A_stream_stream$)) (=> (fun_app$r (fun_app$s ?v0 ?v4) ?v5) (and (fun_app$j (fun_app$t ?v3 (shd$b ?v4)) (shd$c ?v5)) (fun_app$r (fun_app$s ?v0 (stl$b ?v4)) (stl$c ?v5)))))) (fun_app$r (fun_app$s (stream_all2$c ?v3) ?v1) ?v2))) :named a23))
(assert (! (forall ((?v0 A_stream_stream_b_stream_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 B_stream_stream$) (?v3 A_stream_b_stream_bool_fun_fun$)) (=> (and (fun_app$u (fun_app$v ?v0 ?v1) ?v2) (forall ((?v4 A_stream_stream$) (?v5 B_stream_stream$)) (=> (fun_app$u (fun_app$v ?v0 ?v4) ?v5) (and (fun_app$h (fun_app$p ?v3 (shd$c ?v4)) (shd$b ?v5)) (fun_app$u (fun_app$v ?v0 (stl$c ?v4)) (stl$b ?v5)))))) (fun_app$u (fun_app$v (stream_all2$d ?v3) ?v1) ?v2))) :named a24))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$j (fun_app$k ?v0 ?v1) ?v2) (forall ((?v4 A_stream$) (?v5 A_stream$)) (=> (fun_app$j (fun_app$k ?v0 ?v4) ?v5) (and (fun_app$n (fun_app$o ?v3 (shd$ ?v4)) (shd$ ?v5)) (fun_app$j (fun_app$k ?v0 (stl$ ?v4)) (stl$ ?v5)))))) (fun_app$j (fun_app$k (stream_all2$b ?v3) ?v1) ?v2))) :named a25))
(assert (! (forall ((?v0 B_stream_a_stream_bool_fun_fun$) (?v1 B_stream$) (?v2 A_stream$) (?v3 B_a_bool_fun_fun$)) (=> (and (fun_app$j (fun_app$t ?v0 ?v1) ?v2) (forall ((?v4 B_stream$) (?v5 A_stream$)) (=> (fun_app$j (fun_app$t ?v0 ?v4) ?v5) (and (fun_app$n (fun_app$w ?v3 (shd$a ?v4)) (shd$ ?v5)) (fun_app$j (fun_app$t ?v0 (stl$a ?v4)) (stl$ ?v5)))))) (fun_app$j (fun_app$t (stream_all2$e ?v3) ?v1) ?v2))) :named a26))
(assert (! (forall ((?v0 B_stream_b_stream_bool_fun_fun$) (?v1 B_stream$) (?v2 B_stream$) (?v3 B_b_bool_fun_fun$)) (=> (and (fun_app$h (fun_app$i ?v0 ?v1) ?v2) (forall ((?v4 B_stream$) (?v5 B_stream$)) (=> (fun_app$h (fun_app$i ?v0 ?v4) ?v5) (and (fun_app$l (fun_app$m ?v3 (shd$a ?v4)) (shd$a ?v5)) (fun_app$h (fun_app$i ?v0 (stl$a ?v4)) (stl$a ?v5)))))) (fun_app$h (fun_app$i (stream_all2$a ?v3) ?v1) ?v2))) :named a27))
(assert (! (forall ((?v0 A_stream_b_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 B_stream$) (?v3 A_b_bool_fun_fun$)) (=> (and (fun_app$h (fun_app$p ?v0 ?v1) ?v2) (forall ((?v4 A_stream$) (?v5 B_stream$)) (=> (fun_app$h (fun_app$p ?v0 ?v4) ?v5) (and (fun_app$l (fun_app$q ?v3 (shd$ ?v4)) (shd$a ?v5)) (fun_app$h (fun_app$p ?v0 (stl$ ?v4)) (stl$a ?v5)))))) (fun_app$h (fun_app$p (stream_all2$ ?v3) ?v1) ?v2))) :named a28))
(assert (! (forall ((?v0 B_stream_a_stream_bool_fun_fun$) (?v1 B_stream$) (?v2 B_stream_stream$) (?v3 A_stream$) (?v4 A_stream_stream$)) (! (= (fun_app$r (fun_app$s (stream_all2$c ?v0) (sCons$b ?v1 ?v2)) (sCons$c ?v3 ?v4)) (and (fun_app$j (fun_app$t ?v0 ?v1) ?v3) (fun_app$r (fun_app$s (stream_all2$c ?v0) ?v2) ?v4))) :pattern ((fun_app$r (fun_app$s (stream_all2$c ?v0) (sCons$b ?v1 ?v2)) (sCons$c ?v3 ?v4))))) :named a29))
(assert (! (forall ((?v0 A_stream_b_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream_stream$) (?v3 B_stream$) (?v4 B_stream_stream$)) (! (= (fun_app$u (fun_app$v (stream_all2$d ?v0) (sCons$c ?v1 ?v2)) (sCons$b ?v3 ?v4)) (and (fun_app$h (fun_app$p ?v0 ?v1) ?v3) (fun_app$u (fun_app$v (stream_all2$d ?v0) ?v2) ?v4))) :pattern ((fun_app$u (fun_app$v (stream_all2$d ?v0) (sCons$c ?v1 ?v2)) (sCons$b ?v3 ?v4))))) :named a30))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B$) (?v2 B_stream$) (?v3 B$) (?v4 B_stream$)) (! (= (fun_app$h (fun_app$i (stream_all2$a ?v0) (sCons$a ?v1 ?v2)) (sCons$a ?v3 ?v4)) (and (fun_app$l (fun_app$m ?v0 ?v1) ?v3) (fun_app$h (fun_app$i (stream_all2$a ?v0) ?v2) ?v4))) :pattern ((fun_app$h (fun_app$i (stream_all2$a ?v0) (sCons$a ?v1 ?v2)) (sCons$a ?v3 ?v4))))) :named a31))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B$) (?v2 B_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (fun_app$j (fun_app$t (stream_all2$e ?v0) (sCons$a ?v1 ?v2)) (sCons$ ?v3 ?v4)) (and (fun_app$n (fun_app$w ?v0 ?v1) ?v3) (fun_app$j (fun_app$t (stream_all2$e ?v0) ?v2) ?v4))) :pattern ((fun_app$j (fun_app$t (stream_all2$e ?v0) (sCons$a ?v1 ?v2)) (sCons$ ?v3 ?v4))))) :named a32))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (fun_app$j (fun_app$k (stream_all2$b ?v0) (sCons$ ?v1 ?v2)) (sCons$ ?v3 ?v4)) (and (fun_app$n (fun_app$o ?v0 ?v1) ?v3) (fun_app$j (fun_app$k (stream_all2$b ?v0) ?v2) ?v4))) :pattern ((fun_app$j (fun_app$k (stream_all2$b ?v0) (sCons$ ?v1 ?v2)) (sCons$ ?v3 ?v4))))) :named a33))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 A_stream$) (?v3 B$) (?v4 B_stream$)) (! (= (fun_app$h (fun_app$p (stream_all2$ ?v0) (sCons$ ?v1 ?v2)) (sCons$a ?v3 ?v4)) (and (fun_app$l (fun_app$q ?v0 ?v1) ?v3) (fun_app$h (fun_app$p (stream_all2$ ?v0) ?v2) ?v4))) :pattern ((fun_app$h (fun_app$p (stream_all2$ ?v0) (sCons$ ?v1 ?v2)) (sCons$a ?v3 ?v4))))) :named a34))
(assert (! (forall ((?v0 B_stream_a_stream_bool_fun_fun$) (?v1 B_stream_stream$) (?v2 A_stream_stream$) (?v3 B_stream_a_stream_bool_fun_fun$)) (=> (and (fun_app$r (fun_app$s (stream_all2$c ?v0) ?v1) ?v2) (forall ((?v4 B_stream$) (?v5 A_stream$)) (=> (and (member$ ?v4 (sset$ ?v1)) (and (member$a ?v5 (sset$a ?v2)) (fun_app$j (fun_app$t ?v0 ?v4) ?v5))) (fun_app$j (fun_app$t ?v3 ?v4) ?v5)))) (fun_app$r (fun_app$s (stream_all2$c ?v3) ?v1) ?v2))) :named a35))
(assert (! (forall ((?v0 A_stream_b_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 B_stream_stream$) (?v3 A_stream_b_stream_bool_fun_fun$)) (=> (and (fun_app$u (fun_app$v (stream_all2$d ?v0) ?v1) ?v2) (forall ((?v4 A_stream$) (?v5 B_stream$)) (=> (and (member$a ?v4 (sset$a ?v1)) (and (member$ ?v5 (sset$ ?v2)) (fun_app$h (fun_app$p ?v0 ?v4) ?v5))) (fun_app$h (fun_app$p ?v3 ?v4) ?v5)))) (fun_app$u (fun_app$v (stream_all2$d ?v3) ?v1) ?v2))) :named a36))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_stream$) (?v2 B_stream$) (?v3 B_b_bool_fun_fun$)) (=> (and (fun_app$h (fun_app$i (stream_all2$a ?v0) ?v1) ?v2) (forall ((?v4 B$) (?v5 B$)) (=> (and (member$b ?v4 (sset$b ?v1)) (and (member$b ?v5 (sset$b ?v2)) (fun_app$l (fun_app$m ?v0 ?v4) ?v5))) (fun_app$l (fun_app$m ?v3 ?v4) ?v5)))) (fun_app$h (fun_app$i (stream_all2$a ?v3) ?v1) ?v2))) :named a37))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_stream$) (?v2 A_stream$) (?v3 B_a_bool_fun_fun$)) (=> (and (fun_app$j (fun_app$t (stream_all2$e ?v0) ?v1) ?v2) (forall ((?v4 B$) (?v5 A$)) (=> (and (member$b ?v4 (sset$b ?v1)) (and (member$c ?v5 (sset$c ?v2)) (fun_app$n (fun_app$w ?v0 ?v4) ?v5))) (fun_app$n (fun_app$w ?v3 ?v4) ?v5)))) (fun_app$j (fun_app$t (stream_all2$e ?v3) ?v1) ?v2))) :named a38))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$j (fun_app$k (stream_all2$b ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 A$)) (=> (and (member$c ?v4 (sset$c ?v1)) (and (member$c ?v5 (sset$c ?v2)) (fun_app$n (fun_app$o ?v0 ?v4) ?v5))) (fun_app$n (fun_app$o ?v3 ?v4) ?v5)))) (fun_app$j (fun_app$k (stream_all2$b ?v3) ?v1) ?v2))) :named a39))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_stream$) (?v2 B_stream$) (?v3 A_b_bool_fun_fun$)) (=> (and (fun_app$h (fun_app$p (stream_all2$ ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 B$)) (=> (and (member$c ?v4 (sset$c ?v1)) (and (member$b ?v5 (sset$b ?v2)) (fun_app$l (fun_app$q ?v0 ?v4) ?v5))) (fun_app$l (fun_app$q ?v3 ?v4) ?v5)))) (fun_app$h (fun_app$p (stream_all2$ ?v3) ?v1) ?v2))) :named a40))
(assert (! (forall ((?v0 B_stream_a_stream_bool_fun_fun$) (?v1 B_stream_stream$) (?v2 A_stream_stream$)) (=> (and (fun_app$r (fun_app$s (stream_all2$c ?v0) ?v1) ?v2) (forall ((?v3 B_stream$) (?v4 B_stream_stream$) (?v5 A_stream$) (?v6 A_stream_stream$)) (=> (and (= ?v1 (sCons$b ?v3 ?v4)) (and (= ?v2 (sCons$c ?v5 ?v6)) (and (fun_app$j (fun_app$t ?v0 ?v3) ?v5) (fun_app$r (fun_app$s (stream_all2$c ?v0) ?v4) ?v6)))) false))) false)) :named a41))
(assert (! (forall ((?v0 A_stream_b_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 B_stream_stream$)) (=> (and (fun_app$u (fun_app$v (stream_all2$d ?v0) ?v1) ?v2) (forall ((?v3 A_stream$) (?v4 A_stream_stream$) (?v5 B_stream$) (?v6 B_stream_stream$)) (=> (and (= ?v1 (sCons$c ?v3 ?v4)) (and (= ?v2 (sCons$b ?v5 ?v6)) (and (fun_app$h (fun_app$p ?v0 ?v3) ?v5) (fun_app$u (fun_app$v (stream_all2$d ?v0) ?v4) ?v6)))) false))) false)) :named a42))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_stream$) (?v2 B_stream$)) (=> (and (fun_app$h (fun_app$i (stream_all2$a ?v0) ?v1) ?v2) (forall ((?v3 B$) (?v4 B_stream$) (?v5 B$) (?v6 B_stream$)) (=> (and (= ?v1 (sCons$a ?v3 ?v4)) (and (= ?v2 (sCons$a ?v5 ?v6)) (and (fun_app$l (fun_app$m ?v0 ?v3) ?v5) (fun_app$h (fun_app$i (stream_all2$a ?v0) ?v4) ?v6)))) false))) false)) :named a43))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_stream$) (?v2 A_stream$)) (=> (and (fun_app$j (fun_app$t (stream_all2$e ?v0) ?v1) ?v2) (forall ((?v3 B$) (?v4 B_stream$) (?v5 A$) (?v6 A_stream$)) (=> (and (= ?v1 (sCons$a ?v3 ?v4)) (and (= ?v2 (sCons$ ?v5 ?v6)) (and (fun_app$n (fun_app$w ?v0 ?v3) ?v5) (fun_app$j (fun_app$t (stream_all2$e ?v0) ?v4) ?v6)))) false))) false)) :named a44))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (=> (and (fun_app$j (fun_app$k (stream_all2$b ?v0) ?v1) ?v2) (forall ((?v3 A$) (?v4 A_stream$) (?v5 A$) (?v6 A_stream$)) (=> (and (= ?v1 (sCons$ ?v3 ?v4)) (and (= ?v2 (sCons$ ?v5 ?v6)) (and (fun_app$n (fun_app$o ?v0 ?v3) ?v5) (fun_app$j (fun_app$k (stream_all2$b ?v0) ?v4) ?v6)))) false))) false)) :named a45))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_stream$) (?v2 B_stream$)) (=> (and (fun_app$h (fun_app$p (stream_all2$ ?v0) ?v1) ?v2) (forall ((?v3 A$) (?v4 A_stream$) (?v5 B$) (?v6 B_stream$)) (=> (and (= ?v1 (sCons$ ?v3 ?v4)) (and (= ?v2 (sCons$a ?v5 ?v6)) (and (fun_app$l (fun_app$q ?v0 ?v3) ?v5) (fun_app$h (fun_app$p (stream_all2$ ?v0) ?v4) ?v6)))) false))) false)) :named a46))
(assert (! (forall ((?v0 B_stream_a_stream_bool_fun_fun$) (?v1 B_stream$) (?v2 A_stream$) (?v3 B_stream_stream$) (?v4 A_stream_stream$)) (=> (and (fun_app$j (fun_app$t ?v0 ?v1) ?v2) (fun_app$r (fun_app$s (stream_all2$c ?v0) ?v3) ?v4)) (fun_app$r (fun_app$s (stream_all2$c ?v0) (sCons$b ?v1 ?v3)) (sCons$c ?v2 ?v4)))) :named a47))
(assert (! (forall ((?v0 A_stream_b_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 B_stream$) (?v3 A_stream_stream$) (?v4 B_stream_stream$)) (=> (and (fun_app$h (fun_app$p ?v0 ?v1) ?v2) (fun_app$u (fun_app$v (stream_all2$d ?v0) ?v3) ?v4)) (fun_app$u (fun_app$v (stream_all2$d ?v0) (sCons$c ?v1 ?v3)) (sCons$b ?v2 ?v4)))) :named a48))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B$) (?v2 B$) (?v3 B_stream$) (?v4 B_stream$)) (=> (and (fun_app$l (fun_app$m ?v0 ?v1) ?v2) (fun_app$h (fun_app$i (stream_all2$a ?v0) ?v3) ?v4)) (fun_app$h (fun_app$i (stream_all2$a ?v0) (sCons$a ?v1 ?v3)) (sCons$a ?v2 ?v4)))) :named a49))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B$) (?v2 A$) (?v3 B_stream$) (?v4 A_stream$)) (=> (and (fun_app$n (fun_app$w ?v0 ?v1) ?v2) (fun_app$j (fun_app$t (stream_all2$e ?v0) ?v3) ?v4)) (fun_app$j (fun_app$t (stream_all2$e ?v0) (sCons$a ?v1 ?v3)) (sCons$ ?v2 ?v4)))) :named a50))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_stream$) (?v4 A_stream$)) (=> (and (fun_app$n (fun_app$o ?v0 ?v1) ?v2) (fun_app$j (fun_app$k (stream_all2$b ?v0) ?v3) ?v4)) (fun_app$j (fun_app$k (stream_all2$b ?v0) (sCons$ ?v1 ?v3)) (sCons$ ?v2 ?v4)))) :named a51))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 B$) (?v3 A_stream$) (?v4 B_stream$)) (=> (and (fun_app$l (fun_app$q ?v0 ?v1) ?v2) (fun_app$h (fun_app$p (stream_all2$ ?v0) ?v3) ?v4)) (fun_app$h (fun_app$p (stream_all2$ ?v0) (sCons$ ?v1 ?v3)) (sCons$a ?v2 ?v4)))) :named a52))
(assert (! (forall ((?v0 B_stream_a_stream_bool_fun_fun$) (?v1 B_stream_stream$) (?v2 A_stream_stream$)) (= (llist_all2$ ?v0 (llist_of_stream$ ?v1) (llist_of_stream$a ?v2)) (fun_app$r (fun_app$s (stream_all2$c ?v0) ?v1) ?v2))) :named a53))
(assert (! (forall ((?v0 A_stream_b_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 B_stream_stream$)) (= (llist_all2$a ?v0 (llist_of_stream$a ?v1) (llist_of_stream$ ?v2)) (fun_app$u (fun_app$v (stream_all2$d ?v0) ?v1) ?v2))) :named a54))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (llist_all2$b ?v0 (llist_of_stream$b ?v1) (llist_of_stream$b ?v2)) (fun_app$j (fun_app$k (stream_all2$b ?v0) ?v1) ?v2))) :named a55))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_stream$) (?v2 A_stream$)) (= (llist_all2$c ?v0 (llist_of_stream$c ?v1) (llist_of_stream$b ?v2)) (fun_app$j (fun_app$t (stream_all2$e ?v0) ?v1) ?v2))) :named a56))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_stream$) (?v2 B_stream$)) (= (llist_all2$d ?v0 (llist_of_stream$c ?v1) (llist_of_stream$c ?v2)) (fun_app$h (fun_app$i (stream_all2$a ?v0) ?v1) ?v2))) :named a57))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_stream$) (?v2 B_stream$)) (= (llist_all2$e ?v0 (llist_of_stream$b ?v1) (llist_of_stream$c ?v2)) (fun_app$h (fun_app$p (stream_all2$ ?v0) ?v1) ?v2))) :named a58))
(assert (! (forall ((?v0 A_stream_stream_b_stream_stream_bool_fun_fun$) (?v1 B_stream_stream_stream$) (?v2 A_stream_stream_stream$)) (= (fun_app$x (fun_app$y (stream_all2$f (conversep$ ?v0)) ?v1) ?v2) (fun_app$z (fun_app$aa (stream_all2$g ?v0) ?v2) ?v1))) :named a59))
(assert (! (forall ((?v0 B_stream_b_stream_bool_fun_fun$) (?v1 B_stream_stream$) (?v2 B_stream_stream$)) (= (fun_app$u (fun_app$ab (stream_all2$h (conversep$a ?v0)) ?v1) ?v2) (fun_app$u (fun_app$ab (stream_all2$h ?v0) ?v2) ?v1))) :named a60))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream$)) (= (fun_app$r (fun_app$ac (stream_all2$i (conversep$b ?v0)) ?v1) ?v2) (fun_app$r (fun_app$ac (stream_all2$i ?v0) ?v2) ?v1))) :named a61))
(assert (! (forall ((?v0 B_stream_a_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 B_stream_stream$)) (= (fun_app$u (fun_app$v (stream_all2$d (conversep$c ?v0)) ?v1) ?v2) (fun_app$r (fun_app$s (stream_all2$c ?v0) ?v2) ?v1))) :named a62))
(assert (! (forall ((?v0 A_stream_b_stream_bool_fun_fun$) (?v1 B_stream_stream$) (?v2 A_stream_stream$)) (= (fun_app$r (fun_app$s (stream_all2$c (conversep$d ?v0)) ?v1) ?v2) (fun_app$u (fun_app$v (stream_all2$d ?v0) ?v2) ?v1))) :named a63))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_stream$) (?v2 B_stream$)) (= (fun_app$h (fun_app$i (stream_all2$a (conversep$e ?v0)) ?v1) ?v2) (fun_app$h (fun_app$i (stream_all2$a ?v0) ?v2) ?v1))) :named a64))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (fun_app$j (fun_app$k (stream_all2$b (conversep$f ?v0)) ?v1) ?v2) (fun_app$j (fun_app$k (stream_all2$b ?v0) ?v2) ?v1))) :named a65))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_stream$) (?v2 A_stream$)) (= (fun_app$j (fun_app$t (stream_all2$e (conversep$g ?v0)) ?v1) ?v2) (fun_app$h (fun_app$p (stream_all2$ ?v0) ?v2) ?v1))) :named a66))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_stream$) (?v2 B_stream$)) (= (fun_app$h (fun_app$p (stream_all2$ (conversep$h ?v0)) ?v1) ?v2) (fun_app$j (fun_app$t (stream_all2$e ?v0) ?v2) ?v1))) :named a67))
(assert (! (forall ((?v0 B_stream_a_stream_bool_fun_fun$)) (rel_fun$ (stream_all2$c ?v0) ?v0 uud$ uue$)) :named a68))
(assert (! (forall ((?v0 A_stream_b_stream_bool_fun_fun$)) (rel_fun$a (stream_all2$d ?v0) ?v0 uue$ uud$)) :named a69))
(assert (! (forall ((?v0 A_a_bool_fun_fun$)) (rel_fun$b (stream_all2$b ?v0) ?v0 uuf$ uuf$)) :named a70))
(assert (! (forall ((?v0 B_a_bool_fun_fun$)) (rel_fun$c (stream_all2$e ?v0) ?v0 uug$ uuf$)) :named a71))
(assert (! (forall ((?v0 B_b_bool_fun_fun$)) (rel_fun$d (stream_all2$a ?v0) ?v0 uug$ uug$)) :named a72))
(assert (! (forall ((?v0 A_b_bool_fun_fun$)) (rel_fun$e (stream_all2$ ?v0) ?v0 uuf$ uug$)) :named a73))
(assert (! (forall ((?v0 B_stream_a_stream_bool_fun_fun$)) (rel_fun$f (stream_all2$c ?v0) (stream_all2$c ?v0) uuh$ uui$)) :named a74))
(assert (! (forall ((?v0 A_stream_b_stream_bool_fun_fun$)) (rel_fun$g (stream_all2$d ?v0) (stream_all2$d ?v0) uui$ uuh$)) :named a75))
(assert (! (forall ((?v0 A_a_bool_fun_fun$)) (rel_fun$h (stream_all2$b ?v0) (stream_all2$b ?v0) uuj$ uuj$)) :named a76))
(assert (! (forall ((?v0 B_a_bool_fun_fun$)) (rel_fun$i (stream_all2$e ?v0) (stream_all2$e ?v0) uuk$ uuj$)) :named a77))
(assert (! (forall ((?v0 B_b_bool_fun_fun$)) (rel_fun$j (stream_all2$a ?v0) (stream_all2$a ?v0) uuk$ uuk$)) :named a78))
(assert (! (forall ((?v0 A_b_bool_fun_fun$)) (rel_fun$k (stream_all2$ ?v0) (stream_all2$ ?v0) uuj$ uuk$)) :named a79))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a80))
(assert (! (forall ((?v0 B$) (?v1 B_stream$) (?v2 B$) (?v3 B_stream$)) (= (= (sCons$a ?v0 ?v1) (sCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a81))
(assert (! (forall ((?v0 A_stream$)) (= (sCons$ (shd$ ?v0) (stl$ ?v0)) ?v0)) :named a82))
(assert (! (forall ((?v0 B_stream$)) (= (sCons$a (shd$a ?v0) (stl$a ?v0)) ?v0)) :named a83))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$)) (= (= (llist_of_stream$b ?v0) (llist_of_stream$b ?v1)) (= ?v0 ?v1))) :named a84))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream$)) (= (= (llist_of_stream$c ?v0) (llist_of_stream$c ?v1)) (= ?v0 ?v1))) :named a85))
(assert (! (forall ((?v0 A_stream_stream_b_stream_stream_bool_fun_fun$)) (= (stream_all2$f (conversep$ ?v0)) (conversep$i (stream_all2$g ?v0)))) :named a86))
(assert (! (forall ((?v0 B_stream_b_stream_bool_fun_fun$)) (= (stream_all2$h (conversep$a ?v0)) (conversep$j (stream_all2$h ?v0)))) :named a87))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$)) (= (stream_all2$i (conversep$b ?v0)) (conversep$k (stream_all2$i ?v0)))) :named a88))
(assert (! (forall ((?v0 B_stream_a_stream_bool_fun_fun$)) (= (stream_all2$d (conversep$c ?v0)) (conversep$l (stream_all2$c ?v0)))) :named a89))
(assert (! (forall ((?v0 A_stream_b_stream_bool_fun_fun$)) (= (stream_all2$c (conversep$d ?v0)) (conversep$ (stream_all2$d ?v0)))) :named a90))
(assert (! (forall ((?v0 B_b_bool_fun_fun$)) (= (stream_all2$a (conversep$e ?v0)) (conversep$a (stream_all2$a ?v0)))) :named a91))
(assert (! (forall ((?v0 A_a_bool_fun_fun$)) (= (stream_all2$b (conversep$f ?v0)) (conversep$b (stream_all2$b ?v0)))) :named a92))
(assert (! (forall ((?v0 A_b_bool_fun_fun$)) (= (stream_all2$e (conversep$g ?v0)) (conversep$d (stream_all2$ ?v0)))) :named a93))
(assert (! (forall ((?v0 B_a_bool_fun_fun$)) (= (stream_all2$ (conversep$h ?v0)) (conversep$c (stream_all2$e ?v0)))) :named a94))
(check-sat)
;(get-unsat-core)
