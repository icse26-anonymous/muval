; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 340
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-fun xs$ () A_list$)
(declare-fun ys$ () A_stream$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun shift$ (A_list$ A_stream$) A_stream$)
(declare-fun append$ (A_list$ A_list$) A_list$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun list_of$ (A_llist$) A_list$)
(declare-fun iterates$ (A_a_fun$ A$) A_llist$)
(declare-fun llist_of$ (A_list$) A_llist$)
(declare-fun siterate$ (A_a_fun$ A$) A_stream$)
(declare-fun inf_llist$ (Nat_a_fun$) A_llist$)
(declare-fun llist_of_stream$ (A_stream$) A_llist$)
(declare-fun stream_of_llist$ (A_llist$) A_stream$)
(assert (! (not (= (lappend$ (llist_of$ xs$) (llist_of_stream$ ys$)) (llist_of_stream$ (shift$ xs$ ys$)))) :named a0))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$)) (= (= (llist_of_stream$ ?v0) (llist_of_stream$ ?v1)) (= ?v0 ?v1))) :named a1))
(assert (! (forall ((?v0 A_list$) (?v1 A_stream$) (?v2 A_stream$)) (= (= (shift$ ?v0 ?v1) (shift$ ?v0 ?v2)) (= ?v1 ?v2))) :named a2))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a4))
(assert (! (forall ((?v0 A_stream$)) (= (stream_of_llist$ (llist_of_stream$ ?v0)) ?v0)) :named a5))
(assert (! (forall ((?v0 A_stream$)) (= (stream_of_llist$ (llist_of_stream$ ?v0)) ?v0)) :named a6))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (lappend$ (llist_of$ ?v0) (llist_of$ ?v1)) (llist_of$ (append$ ?v0 ?v1)))) :named a7))
(assert (! (forall ((?v0 A_stream$)) (not (lnull$ (llist_of_stream$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_stream$)) (not (lfinite$ (llist_of_stream$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A_list$)) (= (list_of$ (llist_of$ ?v0)) ?v0)) :named a10))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 A_llist$)) (= (lappend$ (inf_llist$ ?v0) ?v1) (inf_llist$ ?v0))) :named a11))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_stream$)) (= (shift$ (append$ ?v0 ?v1) ?v2) (shift$ ?v0 (shift$ ?v1 ?v2)))) :named a12))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (llist_of_stream$ (siterate$ ?v0 ?v1)) (iterates$ ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_a_fun$)) (= (= (inf_llist$ ?v0) (inf_llist$ ?v1)) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$ (lappend$ ?v0 ?v1)) (and (lnull$ ?v0) (lnull$ ?v1)))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$ (lappend$ ?v0 ?v1))) (or (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$ (lappend$ ?v0 ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1)))) :named a17))
(check-sat)
;(get-unsat-core)
