; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 0
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_nat_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_b_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort B_a_a_prod_fun$ 0)
(declare-sort Nat_a_a_prod_fun$ 0)
(declare-sort Nat_a_stream_fun$ 0)
(declare-sort Nat_b_stream_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_b_fun_fun$ 0)
(declare-sort A_b_fun_a_a_fun_fun$ 0)
(declare-sort A_b_fun_a_b_fun_fun$ 0)
(declare-sort B_a_fun_b_a_fun_fun$ 0)
(declare-sort B_a_fun_b_b_fun_fun$ 0)
(declare-sort B_b_fun_b_a_fun_fun$ 0)
(declare-sort B_b_fun_b_b_fun_fun$ 0)
(declare-sort B_nat_fun_b_a_fun_fun$ 0)
(declare-sort B_nat_fun_b_b_fun_fun$ 0)
(declare-sort B_stream_a_stream_fun$ 0)
(declare-sort Nat_a_fun_nat_a_fun_fun$ 0)
(declare-sort Nat_a_fun_nat_b_fun_fun$ 0)
(declare-sort Nat_b_fun_nat_a_fun_fun$ 0)
(declare-sort Nat_b_fun_nat_b_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_a_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_b_fun_fun$ 0)
(declare-sort B_a_fun_b_a_a_prod_fun_fun$ 0)
(declare-sort Nat_a_fun_nat_a_a_prod_fun_fun$ 0)
(declare-sort Nat_b_fun_nat_a_a_prod_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_a_a_prod_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_b_stream_fun_fun$ 0)
(declare-sort Nat_b_stream_fun_nat_nat_fun_nat_b_stream_fun_fun_fun$ 0)
(declare-sort Nat_bool_fun_nat_b_stream_fun_nat_nat_fun_nat_b_stream_fun_fun_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (B_stream$ (sCons$a (shd$a B$) (stl$a B_stream$)))))
(declare-datatypes () ((A_a_prod$ (pair$ (fst$ A$) (snd$ A$)))))
(declare-codatatypes () ((Nat_stream$ (sCons$b (shd$b Nat$) (stl$b Nat_stream$)))
  (A_a_prod_stream$ (sCons$c (shd$c A_a_prod$) (stl$c A_a_prod_stream$)))))
(declare-fun f$ () B_a_fun$)
(declare-fun g$ () Nat_b_fun$)
(declare-fun comp$ (B_a_fun$) Nat_b_fun_nat_a_fun_fun$)
(declare-fun smap$ (B_a_fun$) B_stream_a_stream_fun$)
(declare-fun snth$ (B_stream$) Nat_b_fun$)
(declare-fun comp$a (B_a_a_prod_fun$) Nat_b_fun_nat_a_a_prod_fun_fun$)
(declare-fun comp$b (B_b_fun$) Nat_b_fun_nat_b_fun_fun$)
(declare-fun comp$c (B_a_fun$) B_b_fun_b_a_fun_fun$)
(declare-fun comp$d (A_a_fun$) Nat_a_fun_nat_a_fun_fun$)
(declare-fun comp$e (A_a_fun$) B_a_fun_b_a_fun_fun$)
(declare-fun comp$f (A_b_fun$) B_a_fun_b_b_fun_fun$)
(declare-fun comp$g (A_b_fun$) Nat_a_fun_nat_b_fun_fun$)
(declare-fun comp$h (B_a_fun$) A_b_fun_a_a_fun_fun$)
(declare-fun comp$i (B_b_fun$) B_b_fun_b_b_fun_fun$)
(declare-fun comp$j (Nat_b_fun$) B_nat_fun_b_b_fun_fun$)
(declare-fun comp$k (Nat_b_fun$) Nat_nat_fun_nat_b_fun_fun$)
(declare-fun comp$l (Nat_a_fun$) Nat_nat_fun_nat_a_fun_fun$)
(declare-fun comp$m (Nat_a_fun$) B_nat_fun_b_a_fun_fun$)
(declare-fun comp$n (A_b_fun$) A_a_fun_a_b_fun_fun$)
(declare-fun comp$o (B_b_fun$) A_b_fun_a_b_fun_fun$)
(declare-fun comp$p (A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun comp$q (Nat_a_a_prod_fun$) Nat_nat_fun_nat_a_a_prod_fun_fun$)
(declare-fun comp$r (B_stream_a_stream_fun$ Nat_b_stream_fun$) Nat_a_stream_fun$)
(declare-fun sdrop$ (Nat$ A_stream$) A_stream$)
(declare-fun smap$a (A_a_fun$ A_stream$) A_stream$)
(declare-fun smap$b (Nat_b_fun$ Nat_stream$) B_stream$)
(declare-fun smap$c (Nat_a_fun$ Nat_stream$) A_stream$)
(declare-fun smap$d (B_b_fun$ B_stream$) B_stream$)
(declare-fun smap$e (A_b_fun$ A_stream$) B_stream$)
(declare-fun smap$f (B_nat_fun$ B_stream$) Nat_stream$)
(declare-fun smap$g (Nat_nat_fun$ Nat_stream$) Nat_stream$)
(declare-fun smap$h (B_a_a_prod_fun$ B_stream$) A_a_prod_stream$)
(declare-fun snth$a (A_stream$) Nat_a_fun$)
(declare-fun convol$ (B_a_fun$) B_a_fun_b_a_a_prod_fun_fun$)
(declare-fun of_seq$ (Nat_b_fun$) B_stream$)
(declare-fun sdrop$a (Nat$ B_stream$) B_stream$)
(declare-fun convol$a (Nat_a_fun$) Nat_a_fun_nat_a_a_prod_fun_fun$)
(declare-fun fun_app$ (B_stream_a_stream_fun$ B_stream$) A_stream$)
(declare-fun of_seq$a (Nat_a_fun$) A_stream$)
(declare-fun fun_app$a (Nat_b_fun_nat_a_fun_fun$ Nat_b_fun$) Nat_a_fun$)
(declare-fun fun_app$b (Nat_a_a_prod_fun$ Nat$) A_a_prod$)
(declare-fun fun_app$c (Nat_b_fun_nat_a_a_prod_fun_fun$ Nat_b_fun$) Nat_a_a_prod_fun$)
(declare-fun fun_app$d (B_a_a_prod_fun$ B$) A_a_prod$)
(declare-fun fun_app$e (Nat_b_fun$ Nat$) B$)
(declare-fun fun_app$f (Nat_b_fun_nat_b_fun_fun$ Nat_b_fun$) Nat_b_fun$)
(declare-fun fun_app$g (B_b_fun$ B$) B$)
(declare-fun fun_app$h (B_a_fun$ B$) A$)
(declare-fun fun_app$i (B_b_fun_b_a_fun_fun$ B_b_fun$) B_a_fun$)
(declare-fun fun_app$j (Nat_a_fun$ Nat$) A$)
(declare-fun fun_app$k (Nat_a_fun_nat_a_fun_fun$ Nat_a_fun$) Nat_a_fun$)
(declare-fun fun_app$l (A_a_fun$ A$) A$)
(declare-fun fun_app$m (B_a_fun_b_a_fun_fun$ B_a_fun$) B_a_fun$)
(declare-fun fun_app$n (B_a_fun_b_b_fun_fun$ B_a_fun$) B_b_fun$)
(declare-fun fun_app$o (Nat_a_fun_nat_b_fun_fun$ Nat_a_fun$) Nat_b_fun$)
(declare-fun fun_app$p (A_b_fun_a_a_fun_fun$ A_b_fun$) A_a_fun$)
(declare-fun fun_app$q (B_b_fun_b_b_fun_fun$ B_b_fun$) B_b_fun$)
(declare-fun fun_app$r (B_nat_fun_b_b_fun_fun$ B_nat_fun$) B_b_fun$)
(declare-fun fun_app$s (Nat_nat_fun_nat_b_fun_fun$ Nat_nat_fun$) Nat_b_fun$)
(declare-fun fun_app$t (Nat_b_stream_fun$ Nat$) B_stream$)
(declare-fun fun_app$u (Nat_nat_fun_nat_b_stream_fun_fun$ Nat_nat_fun$) Nat_b_stream_fun$)
(declare-fun fun_app$v (Nat_nat_fun_nat_a_fun_fun$ Nat_nat_fun$) Nat_a_fun$)
(declare-fun fun_app$w (B_nat_fun_b_a_fun_fun$ B_nat_fun$) B_a_fun$)
(declare-fun fun_app$x (A_a_fun_a_b_fun_fun$ A_a_fun$) A_b_fun$)
(declare-fun fun_app$y (A_b_fun_a_b_fun_fun$ A_b_fun$) A_b_fun$)
(declare-fun fun_app$z (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$aa (Nat_nat_fun_nat_a_a_prod_fun_fun$ Nat_nat_fun$) Nat_a_a_prod_fun$)
(declare-fun fun_app$ab (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$ac (Nat_b_stream_fun_nat_nat_fun_nat_b_stream_fun_fun_fun$ Nat_b_stream_fun$) Nat_nat_fun_nat_b_stream_fun_fun$)
(declare-fun fun_app$ad (Nat_bool_fun_nat_b_stream_fun_nat_nat_fun_nat_b_stream_fun_fun_fun_fun$ Nat_bool_fun$) Nat_b_stream_fun_nat_nat_fun_nat_b_stream_fun_fun_fun$)
(declare-fun fun_app$ae (Nat_a_stream_fun$ Nat$) A_stream$)
(declare-fun fun_app$af (B_a_fun_b_a_a_prod_fun_fun$ B_a_fun$) B_a_a_prod_fun$)
(declare-fun fun_app$ag (Nat_a_fun_nat_a_a_prod_fun_fun$ Nat_a_fun$) Nat_a_a_prod_fun$)
(declare-fun corec_stream$ (Nat_b_fun$) Nat_bool_fun_nat_b_stream_fun_nat_nat_fun_nat_b_stream_fun_fun_fun_fun$)
(declare-fun corec_stream$a (Nat_a_fun$ Nat_bool_fun$ Nat_a_stream_fun$ Nat_nat_fun$) Nat_a_stream_fun$)
(declare-fun unfold_stream$ (B_b_fun$ B_b_fun$ B$) B_stream$)
(declare-fun unfold_stream$a (B_a_fun$ B_b_fun$ B$) A_stream$)
(declare-fun unfold_stream$b (Nat_nat_fun$ Nat_nat_fun$ Nat$) Nat_stream$)
(declare-fun unfold_stream$c (Nat_b_fun$) Nat_nat_fun_nat_b_stream_fun_fun$)
(declare-fun unfold_stream$d (Nat_a_fun$ Nat_nat_fun$ Nat$) A_stream$)
(declare-fun unfold_stream$e (Nat_a_a_prod_fun$ Nat_nat_fun$ Nat$) A_a_prod_stream$)
(assert (! (not (= (fun_app$ (smap$ f$) (of_seq$ g$)) (of_seq$a (fun_app$a (comp$ f$) g$)))) :named a0))
(assert (! (forall ((?v0 B_a_a_prod_fun$) (?v1 Nat_b_fun$) (?v2 Nat$)) (! (= (fun_app$b (fun_app$c (comp$a ?v0) ?v1) ?v2) (fun_app$d ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$b (fun_app$c (comp$a ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 B_b_fun$) (?v1 Nat_b_fun$) (?v2 Nat$)) (! (= (fun_app$e (fun_app$f (comp$b ?v0) ?v1) ?v2) (fun_app$g ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$e (fun_app$f (comp$b ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$h (fun_app$i (comp$c ?v0) ?v1) ?v2) (fun_app$h ?v0 (fun_app$g ?v1 ?v2))) :pattern ((fun_app$h (fun_app$i (comp$c ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat_a_fun$) (?v2 Nat$)) (! (= (fun_app$j (fun_app$k (comp$d ?v0) ?v1) ?v2) (fun_app$l ?v0 (fun_app$j ?v1 ?v2))) :pattern ((fun_app$j (fun_app$k (comp$d ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$h (fun_app$m (comp$e ?v0) ?v1) ?v2) (fun_app$l ?v0 (fun_app$h ?v1 ?v2))) :pattern ((fun_app$h (fun_app$m (comp$e ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 Nat$)) (! (= (fun_app$j (fun_app$a (comp$ ?v0) ?v1) ?v2) (fun_app$h ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$j (fun_app$a (comp$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (smap$a ?v0 (fun_app$ (smap$ ?v1) ?v2)) (fun_app$ (smap$ (fun_app$m (comp$e ?v0) ?v1)) ?v2))) :named a7))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 Nat_stream$)) (= (fun_app$ (smap$ ?v0) (smap$b ?v1 ?v2)) (smap$c (fun_app$a (comp$ ?v0) ?v1) ?v2))) :named a8))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_stream$)) (= (fun_app$ (smap$ ?v0) (smap$d ?v1 ?v2)) (fun_app$ (smap$ (fun_app$i (comp$c ?v0) ?v1)) ?v2))) :named a9))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (smap$e ?v0 (fun_app$ (smap$ ?v1) ?v2)) (smap$d (fun_app$n (comp$f ?v0) ?v1) ?v2))) :named a10))
(assert (! (forall ((?v0 A_b_fun$) (?v1 Nat_a_fun$) (?v2 Nat_stream$)) (= (smap$e ?v0 (smap$c ?v1 ?v2)) (smap$b (fun_app$o (comp$g ?v0) ?v1) ?v2))) :named a11))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 A_stream$)) (= (fun_app$ (smap$ ?v0) (smap$e ?v1 ?v2)) (smap$a (fun_app$p (comp$h ?v0) ?v1) ?v2))) :named a12))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B_stream$)) (= (smap$d ?v0 (smap$d ?v1 ?v2)) (smap$d (fun_app$q (comp$i ?v0) ?v1) ?v2))) :named a13))
(assert (! (forall ((?v0 B_b_fun$) (?v1 Nat_b_fun$) (?v2 Nat_stream$)) (= (smap$d ?v0 (smap$b ?v1 ?v2)) (smap$b (fun_app$f (comp$b ?v0) ?v1) ?v2))) :named a14))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 B_nat_fun$) (?v2 B_stream$)) (= (smap$b ?v0 (smap$f ?v1 ?v2)) (smap$d (fun_app$r (comp$j ?v0) ?v1) ?v2))) :named a15))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_stream$)) (= (smap$b ?v0 (smap$g ?v1 ?v2)) (smap$b (fun_app$s (comp$k ?v0) ?v1) ?v2))) :named a16))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_b_fun$) (?v3 B$)) (= (fun_app$ (smap$ ?v0) (unfold_stream$ ?v1 ?v2 ?v3)) (unfold_stream$a (fun_app$i (comp$c ?v0) ?v1) ?v2 ?v3))) :named a17))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_b_fun$) (?v3 B$)) (= (smap$a ?v0 (unfold_stream$a ?v1 ?v2 ?v3)) (unfold_stream$a (fun_app$m (comp$e ?v0) ?v1) ?v2 ?v3))) :named a18))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (smap$b ?v0 (unfold_stream$b ?v1 ?v2 ?v3)) (fun_app$t (fun_app$u (unfold_stream$c (fun_app$s (comp$k ?v0) ?v1)) ?v2) ?v3))) :named a19))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (smap$c ?v0 (unfold_stream$b ?v1 ?v2 ?v3)) (unfold_stream$d (fun_app$v (comp$l ?v0) ?v1) ?v2 ?v3))) :named a20))
(assert (! (forall ((?v0 B_a_a_prod_fun$) (?v1 Nat_b_fun$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (smap$h ?v0 (fun_app$t (fun_app$u (unfold_stream$c ?v1) ?v2) ?v3)) (unfold_stream$e (fun_app$c (comp$a ?v0) ?v1) ?v2 ?v3))) :named a21))
(assert (! (forall ((?v0 B_b_fun$) (?v1 Nat_b_fun$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (smap$d ?v0 (fun_app$t (fun_app$u (unfold_stream$c ?v1) ?v2) ?v3)) (fun_app$t (fun_app$u (unfold_stream$c (fun_app$f (comp$b ?v0) ?v1)) ?v2) ?v3))) :named a22))
(assert (! (forall ((?v0 A_b_fun$) (?v1 Nat_a_fun$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (smap$e ?v0 (unfold_stream$d ?v1 ?v2 ?v3)) (fun_app$t (fun_app$u (unfold_stream$c (fun_app$o (comp$g ?v0) ?v1)) ?v2) ?v3))) :named a23))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat_a_fun$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (smap$a ?v0 (unfold_stream$d ?v1 ?v2 ?v3)) (unfold_stream$d (fun_app$k (comp$d ?v0) ?v1) ?v2 ?v3))) :named a24))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 Nat_nat_fun$) (?v3 Nat$)) (= (fun_app$ (smap$ ?v0) (fun_app$t (fun_app$u (unfold_stream$c ?v1) ?v2) ?v3)) (unfold_stream$d (fun_app$a (comp$ ?v0) ?v1) ?v2 ?v3))) :named a25))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 Nat_b_fun$)) (= (fun_app$k (comp$d ?v0) (fun_app$a (comp$ ?v1) ?v2)) (fun_app$a (comp$ (fun_app$m (comp$e ?v0) ?v1)) ?v2))) :named a26))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$a (comp$ ?v0) (fun_app$s (comp$k ?v1) ?v2)) (fun_app$v (comp$l (fun_app$a (comp$ ?v0) ?v1)) ?v2))) :named a27))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 Nat_b_fun$)) (= (fun_app$a (comp$ ?v0) (fun_app$f (comp$b ?v1) ?v2)) (fun_app$a (comp$ (fun_app$i (comp$c ?v0) ?v1)) ?v2))) :named a28))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 Nat_b_fun$)) (= (fun_app$o (comp$g ?v0) (fun_app$a (comp$ ?v1) ?v2)) (fun_app$f (comp$b (fun_app$n (comp$f ?v0) ?v1)) ?v2))) :named a29))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 Nat_a_fun$)) (= (fun_app$a (comp$ ?v0) (fun_app$o (comp$g ?v1) ?v2)) (fun_app$k (comp$d (fun_app$p (comp$h ?v0) ?v1)) ?v2))) :named a30))
(assert (! (forall ((?v0 B_b_fun$) (?v1 Nat_b_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$f (comp$b ?v0) (fun_app$s (comp$k ?v1) ?v2)) (fun_app$s (comp$k (fun_app$f (comp$b ?v0) ?v1)) ?v2))) :named a31))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 Nat_b_fun$)) (= (fun_app$f (comp$b ?v0) (fun_app$f (comp$b ?v1) ?v2)) (fun_app$f (comp$b (fun_app$q (comp$i ?v0) ?v1)) ?v2))) :named a32))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 B_nat_fun$)) (= (fun_app$i (comp$c ?v0) (fun_app$r (comp$j ?v1) ?v2)) (fun_app$w (comp$m (fun_app$a (comp$ ?v0) ?v1)) ?v2))) :named a33))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_b_fun$)) (= (fun_app$i (comp$c ?v0) (fun_app$q (comp$i ?v1) ?v2)) (fun_app$i (comp$c (fun_app$i (comp$c ?v0) ?v1)) ?v2))) :named a34))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 B_a_fun$)) (= (fun_app$i (comp$c ?v0) (fun_app$n (comp$f ?v1) ?v2)) (fun_app$m (comp$e (fun_app$p (comp$h ?v0) ?v1)) ?v2))) :named a35))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$v (comp$l (fun_app$a (comp$ ?v0) ?v1)) ?v2) (fun_app$a (comp$ ?v0) (fun_app$s (comp$k ?v1) ?v2)))) :named a36))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 Nat_b_fun$)) (= (fun_app$a (comp$ (fun_app$m (comp$e ?v0) ?v1)) ?v2) (fun_app$k (comp$d ?v0) (fun_app$a (comp$ ?v1) ?v2)))) :named a37))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 Nat_b_fun$)) (= (fun_app$a (comp$ (fun_app$i (comp$c ?v0) ?v1)) ?v2) (fun_app$a (comp$ ?v0) (fun_app$f (comp$b ?v1) ?v2)))) :named a38))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 B_nat_fun$)) (= (fun_app$w (comp$m (fun_app$a (comp$ ?v0) ?v1)) ?v2) (fun_app$i (comp$c ?v0) (fun_app$r (comp$j ?v1) ?v2)))) :named a39))
(assert (! (forall ((?v0 B_b_fun$) (?v1 Nat_b_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$s (comp$k (fun_app$f (comp$b ?v0) ?v1)) ?v2) (fun_app$f (comp$b ?v0) (fun_app$s (comp$k ?v1) ?v2)))) :named a40))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat_a_fun$) (?v2 Nat_nat_fun$)) (= (fun_app$v (comp$l (fun_app$k (comp$d ?v0) ?v1)) ?v2) (fun_app$k (comp$d ?v0) (fun_app$v (comp$l ?v1) ?v2)))) :named a41))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat_a_fun$) (?v2 B_nat_fun$)) (= (fun_app$w (comp$m (fun_app$k (comp$d ?v0) ?v1)) ?v2) (fun_app$m (comp$e ?v0) (fun_app$w (comp$m ?v1) ?v2)))) :named a42))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 Nat_b_fun$)) (= (fun_app$f (comp$b (fun_app$n (comp$f ?v0) ?v1)) ?v2) (fun_app$o (comp$g ?v0) (fun_app$a (comp$ ?v1) ?v2)))) :named a43))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 Nat_b_fun$)) (= (fun_app$f (comp$b (fun_app$q (comp$i ?v0) ?v1)) ?v2) (fun_app$f (comp$b ?v0) (fun_app$f (comp$b ?v1) ?v2)))) :named a44))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_b_fun$)) (= (fun_app$i (comp$c (fun_app$i (comp$c ?v0) ?v1)) ?v2) (fun_app$i (comp$c ?v0) (fun_app$q (comp$i ?v1) ?v2)))) :named a45))
(assert (! (forall ((?v0 B_a_a_prod_fun$) (?v1 Nat_b_fun$) (?v2 Nat$)) (! (= (fun_app$b (fun_app$c (comp$a ?v0) ?v1) ?v2) (fun_app$d ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$b (fun_app$c (comp$a ?v0) ?v1) ?v2)))) :named a46))
(assert (! (forall ((?v0 B_b_fun$) (?v1 Nat_b_fun$) (?v2 Nat$)) (! (= (fun_app$e (fun_app$f (comp$b ?v0) ?v1) ?v2) (fun_app$g ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$e (fun_app$f (comp$b ?v0) ?v1) ?v2)))) :named a47))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$h (fun_app$i (comp$c ?v0) ?v1) ?v2) (fun_app$h ?v0 (fun_app$g ?v1 ?v2))) :pattern ((fun_app$h (fun_app$i (comp$c ?v0) ?v1) ?v2)))) :named a48))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat_a_fun$) (?v2 Nat$)) (! (= (fun_app$j (fun_app$k (comp$d ?v0) ?v1) ?v2) (fun_app$l ?v0 (fun_app$j ?v1 ?v2))) :pattern ((fun_app$j (fun_app$k (comp$d ?v0) ?v1) ?v2)))) :named a49))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$h (fun_app$m (comp$e ?v0) ?v1) ?v2) (fun_app$l ?v0 (fun_app$h ?v1 ?v2))) :pattern ((fun_app$h (fun_app$m (comp$e ?v0) ?v1) ?v2)))) :named a50))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 Nat$)) (! (= (fun_app$j (fun_app$a (comp$ ?v0) ?v1) ?v2) (fun_app$h ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$j (fun_app$a (comp$ ?v0) ?v1) ?v2)))) :named a51))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 A_a_fun$) (?v3 Nat_a_fun$)) (=> (and (= (fun_app$a (comp$ ?v0) ?v1) (fun_app$k (comp$d ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$h ?v0 (fun_app$e ?v1 ?v4)) (fun_app$l ?v2 (fun_app$j ?v3 ?v4)))) false)) false)) :named a52))
(assert (! (forall ((?v0 B_a_a_prod_fun$) (?v1 Nat_b_fun$) (?v2 B_a_a_prod_fun$) (?v3 Nat_b_fun$)) (=> (and (= (fun_app$c (comp$a ?v0) ?v1) (fun_app$c (comp$a ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$d ?v0 (fun_app$e ?v1 ?v4)) (fun_app$d ?v2 (fun_app$e ?v3 ?v4)))) false)) false)) :named a53))
(assert (! (forall ((?v0 B_b_fun$) (?v1 Nat_b_fun$) (?v2 B_b_fun$) (?v3 Nat_b_fun$)) (=> (and (= (fun_app$f (comp$b ?v0) ?v1) (fun_app$f (comp$b ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$g ?v0 (fun_app$e ?v1 ?v4)) (fun_app$g ?v2 (fun_app$e ?v3 ?v4)))) false)) false)) :named a54))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$)) (=> (and (= (fun_app$i (comp$c ?v0) ?v1) (fun_app$i (comp$c ?v2) ?v3)) (=> (forall ((?v4 B$)) (= (fun_app$h ?v0 (fun_app$g ?v1 ?v4)) (fun_app$h ?v2 (fun_app$g ?v3 ?v4)))) false)) false)) :named a55))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$)) (=> (and (= (fun_app$i (comp$c ?v0) ?v1) (fun_app$m (comp$e ?v2) ?v3)) (=> (forall ((?v4 B$)) (= (fun_app$h ?v0 (fun_app$g ?v1 ?v4)) (fun_app$l ?v2 (fun_app$h ?v3 ?v4)))) false)) false)) :named a56))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat_a_fun$) (?v2 B_a_fun$) (?v3 Nat_b_fun$)) (=> (and (= (fun_app$k (comp$d ?v0) ?v1) (fun_app$a (comp$ ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$l ?v0 (fun_app$j ?v1 ?v4)) (fun_app$h ?v2 (fun_app$e ?v3 ?v4)))) false)) false)) :named a57))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat_a_fun$) (?v2 A_a_fun$) (?v3 Nat_a_fun$)) (=> (and (= (fun_app$k (comp$d ?v0) ?v1) (fun_app$k (comp$d ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$l ?v0 (fun_app$j ?v1 ?v4)) (fun_app$l ?v2 (fun_app$j ?v3 ?v4)))) false)) false)) :named a58))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$)) (=> (and (= (fun_app$m (comp$e ?v0) ?v1) (fun_app$i (comp$c ?v2) ?v3)) (=> (forall ((?v4 B$)) (= (fun_app$l ?v0 (fun_app$h ?v1 ?v4)) (fun_app$h ?v2 (fun_app$g ?v3 ?v4)))) false)) false)) :named a59))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$)) (=> (and (= (fun_app$m (comp$e ?v0) ?v1) (fun_app$m (comp$e ?v2) ?v3)) (=> (forall ((?v4 B$)) (= (fun_app$l ?v0 (fun_app$h ?v1 ?v4)) (fun_app$l ?v2 (fun_app$h ?v3 ?v4)))) false)) false)) :named a60))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 B_a_fun$) (?v3 Nat_b_fun$)) (=> (and (= (fun_app$a (comp$ ?v0) ?v1) (fun_app$a (comp$ ?v2) ?v3)) (=> (forall ((?v4 Nat$)) (= (fun_app$h ?v0 (fun_app$e ?v1 ?v4)) (fun_app$h ?v2 (fun_app$e ?v3 ?v4)))) false)) false)) :named a61))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 Nat_nat_fun$) (?v2 B_b_fun$) (?v3 Nat_b_fun$) (?v4 B_a_fun$) (?v5 B_a_fun$)) (=> (and (= (fun_app$s (comp$k ?v0) ?v1) (fun_app$f (comp$b ?v2) ?v3)) (= (fun_app$i (comp$c ?v4) ?v2) ?v5)) (= (fun_app$v (comp$l (fun_app$a (comp$ ?v4) ?v0)) ?v1) (fun_app$a (comp$ ?v5) ?v3)))) :named a62))
(assert (! (forall ((?v0 B_b_fun$) (?v1 Nat_b_fun$) (?v2 Nat_b_fun$) (?v3 Nat_nat_fun$) (?v4 B_a_fun$) (?v5 Nat_a_fun$)) (=> (and (= (fun_app$f (comp$b ?v0) ?v1) (fun_app$s (comp$k ?v2) ?v3)) (= (fun_app$a (comp$ ?v4) ?v2) ?v5)) (= (fun_app$a (comp$ (fun_app$i (comp$c ?v4) ?v0)) ?v1) (fun_app$v (comp$l ?v5) ?v3)))) :named a63))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 B_a_fun$) (?v3 Nat_b_fun$) (?v4 A_a_fun$) (?v5 B_a_fun$)) (=> (and (= (fun_app$a (comp$ ?v0) ?v1) (fun_app$a (comp$ ?v2) ?v3)) (= (fun_app$m (comp$e ?v4) ?v2) ?v5)) (= (fun_app$a (comp$ (fun_app$m (comp$e ?v4) ?v0)) ?v1) (fun_app$a (comp$ ?v5) ?v3)))) :named a64))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 Nat_nat_fun$) (?v2 A_b_fun$) (?v3 Nat_a_fun$) (?v4 B_a_fun$) (?v5 A_a_fun$)) (=> (and (= (fun_app$s (comp$k ?v0) ?v1) (fun_app$o (comp$g ?v2) ?v3)) (= (fun_app$p (comp$h ?v4) ?v2) ?v5)) (= (fun_app$v (comp$l (fun_app$a (comp$ ?v4) ?v0)) ?v1) (fun_app$k (comp$d ?v5) ?v3)))) :named a65))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 B_nat_fun$) (?v2 A_b_fun$) (?v3 B_a_fun$) (?v4 B_a_fun$) (?v5 A_a_fun$)) (=> (and (= (fun_app$r (comp$j ?v0) ?v1) (fun_app$n (comp$f ?v2) ?v3)) (= (fun_app$p (comp$h ?v4) ?v2) ?v5)) (= (fun_app$w (comp$m (fun_app$a (comp$ ?v4) ?v0)) ?v1) (fun_app$m (comp$e ?v5) ?v3)))) :named a66))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 A_b_fun$) (?v3 B_a_fun$) (?v4 B_a_fun$) (?v5 A_a_fun$)) (=> (and (= (fun_app$q (comp$i ?v0) ?v1) (fun_app$n (comp$f ?v2) ?v3)) (= (fun_app$p (comp$h ?v4) ?v2) ?v5)) (= (fun_app$i (comp$c (fun_app$i (comp$c ?v4) ?v0)) ?v1) (fun_app$m (comp$e ?v5) ?v3)))) :named a67))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 Nat_b_fun$) (?v3 B_nat_fun$) (?v4 B_a_fun$) (?v5 Nat_a_fun$)) (=> (and (= (fun_app$q (comp$i ?v0) ?v1) (fun_app$r (comp$j ?v2) ?v3)) (= (fun_app$a (comp$ ?v4) ?v2) ?v5)) (= (fun_app$i (comp$c (fun_app$i (comp$c ?v4) ?v0)) ?v1) (fun_app$w (comp$m ?v5) ?v3)))) :named a68))
(assert (! (forall ((?v0 A_b_fun$) (?v1 Nat_a_fun$) (?v2 Nat_b_fun$) (?v3 Nat_nat_fun$) (?v4 B_a_fun$) (?v5 Nat_a_fun$)) (=> (and (= (fun_app$o (comp$g ?v0) ?v1) (fun_app$s (comp$k ?v2) ?v3)) (= (fun_app$a (comp$ ?v4) ?v2) ?v5)) (= (fun_app$k (comp$d (fun_app$p (comp$h ?v4) ?v0)) ?v1) (fun_app$v (comp$l ?v5) ?v3)))) :named a69))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 Nat_b_fun$) (?v3 B_nat_fun$) (?v4 B_a_fun$) (?v5 Nat_a_fun$)) (=> (and (= (fun_app$n (comp$f ?v0) ?v1) (fun_app$r (comp$j ?v2) ?v3)) (= (fun_app$a (comp$ ?v4) ?v2) ?v5)) (= (fun_app$m (comp$e (fun_app$p (comp$h ?v4) ?v0)) ?v1) (fun_app$w (comp$m ?v5) ?v3)))) :named a70))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 B_nat_fun$) (?v2 B_b_fun$) (?v3 B_b_fun$) (?v4 B_a_fun$) (?v5 B_a_fun$)) (=> (and (= (fun_app$r (comp$j ?v0) ?v1) (fun_app$q (comp$i ?v2) ?v3)) (= (fun_app$i (comp$c ?v4) ?v2) ?v5)) (= (fun_app$w (comp$m (fun_app$a (comp$ ?v4) ?v0)) ?v1) (fun_app$i (comp$c ?v5) ?v3)))) :named a71))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$) (?v4 Nat_b_fun$) (?v5 Nat_b_fun$)) (=> (and (= (fun_app$m (comp$e ?v0) ?v1) (fun_app$i (comp$c ?v2) ?v3)) (= (fun_app$f (comp$b ?v3) ?v4) ?v5)) (= (fun_app$k (comp$d ?v0) (fun_app$a (comp$ ?v1) ?v4)) (fun_app$a (comp$ ?v2) ?v5)))) :named a72))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$) (?v4 Nat_b_fun$) (?v5 Nat_a_fun$)) (=> (and (= (fun_app$i (comp$c ?v0) ?v1) (fun_app$m (comp$e ?v2) ?v3)) (= (fun_app$a (comp$ ?v3) ?v4) ?v5)) (= (fun_app$a (comp$ ?v0) (fun_app$f (comp$b ?v1) ?v4)) (fun_app$k (comp$d ?v2) ?v5)))) :named a73))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 B_a_fun$) (?v3 Nat_b_fun$) (?v4 Nat_nat_fun$) (?v5 Nat_b_fun$)) (=> (and (= (fun_app$a (comp$ ?v0) ?v1) (fun_app$a (comp$ ?v2) ?v3)) (= (fun_app$s (comp$k ?v3) ?v4) ?v5)) (= (fun_app$a (comp$ ?v0) (fun_app$s (comp$k ?v1) ?v4)) (fun_app$a (comp$ ?v2) ?v5)))) :named a74))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_a_fun$) (?v2 B_b_fun$) (?v3 A_b_fun$) (?v4 Nat_a_fun$) (?v5 Nat_b_fun$)) (=> (and (= (fun_app$x (comp$n ?v0) ?v1) (fun_app$y (comp$o ?v2) ?v3)) (= (fun_app$o (comp$g ?v3) ?v4) ?v5)) (= (fun_app$o (comp$g ?v0) (fun_app$k (comp$d ?v1) ?v4)) (fun_app$f (comp$b ?v2) ?v5)))) :named a75))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 B_a_fun$) (?v3 A_b_fun$) (?v4 Nat_a_fun$) (?v5 Nat_b_fun$)) (=> (and (= (fun_app$z (comp$p ?v0) ?v1) (fun_app$p (comp$h ?v2) ?v3)) (= (fun_app$o (comp$g ?v3) ?v4) ?v5)) (= (fun_app$k (comp$d ?v0) (fun_app$k (comp$d ?v1) ?v4)) (fun_app$a (comp$ ?v2) ?v5)))) :named a76))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 B_a_fun$) (?v3 A_b_fun$) (?v4 B_a_fun$) (?v5 B_b_fun$)) (=> (and (= (fun_app$z (comp$p ?v0) ?v1) (fun_app$p (comp$h ?v2) ?v3)) (= (fun_app$n (comp$f ?v3) ?v4) ?v5)) (= (fun_app$m (comp$e ?v0) (fun_app$m (comp$e ?v1) ?v4)) (fun_app$i (comp$c ?v2) ?v5)))) :named a77))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 A_b_fun$) (?v3 B_a_fun$) (?v4 Nat_b_fun$) (?v5 Nat_a_fun$)) (=> (and (= (fun_app$q (comp$i ?v0) ?v1) (fun_app$n (comp$f ?v2) ?v3)) (= (fun_app$a (comp$ ?v3) ?v4) ?v5)) (= (fun_app$f (comp$b ?v0) (fun_app$f (comp$b ?v1) ?v4)) (fun_app$o (comp$g ?v2) ?v5)))) :named a78))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 B_b_fun$) (?v3 B_b_fun$) (?v4 Nat_b_fun$) (?v5 Nat_b_fun$)) (=> (and (= (fun_app$n (comp$f ?v0) ?v1) (fun_app$q (comp$i ?v2) ?v3)) (= (fun_app$f (comp$b ?v3) ?v4) ?v5)) (= (fun_app$o (comp$g ?v0) (fun_app$a (comp$ ?v1) ?v4)) (fun_app$f (comp$b ?v2) ?v5)))) :named a79))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B_b_fun$) (?v3 B_b_fun$) (?v4 Nat_b_fun$) (?v5 Nat_b_fun$)) (=> (and (= (fun_app$q (comp$i ?v0) ?v1) (fun_app$q (comp$i ?v2) ?v3)) (= (fun_app$f (comp$b ?v3) ?v4) ?v5)) (= (fun_app$f (comp$b ?v0) (fun_app$f (comp$b ?v1) ?v4)) (fun_app$f (comp$b ?v2) ?v5)))) :named a80))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 Nat_a_fun$) (?v5 Nat_a_fun$)) (=> (and (= (fun_app$p (comp$h ?v0) ?v1) (fun_app$z (comp$p ?v2) ?v3)) (= (fun_app$k (comp$d ?v3) ?v4) ?v5)) (= (fun_app$a (comp$ ?v0) (fun_app$o (comp$g ?v1) ?v4)) (fun_app$k (comp$d ?v2) ?v5)))) :named a81))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 A_a_fun$) (?v3 Nat_a_fun$) (?v4 Nat$)) (=> (= (fun_app$a (comp$ ?v0) ?v1) (fun_app$k (comp$d ?v2) ?v3)) (= (fun_app$h ?v0 (fun_app$e ?v1 ?v4)) (fun_app$l ?v2 (fun_app$j ?v3 ?v4))))) :named a82))
(assert (! (forall ((?v0 B_a_a_prod_fun$) (?v1 Nat_b_fun$) (?v2 B_a_a_prod_fun$) (?v3 Nat_b_fun$) (?v4 Nat$)) (=> (= (fun_app$c (comp$a ?v0) ?v1) (fun_app$c (comp$a ?v2) ?v3)) (= (fun_app$d ?v0 (fun_app$e ?v1 ?v4)) (fun_app$d ?v2 (fun_app$e ?v3 ?v4))))) :named a83))
(assert (! (forall ((?v0 B_b_fun$) (?v1 Nat_b_fun$) (?v2 B_b_fun$) (?v3 Nat_b_fun$) (?v4 Nat$)) (=> (= (fun_app$f (comp$b ?v0) ?v1) (fun_app$f (comp$b ?v2) ?v3)) (= (fun_app$g ?v0 (fun_app$e ?v1 ?v4)) (fun_app$g ?v2 (fun_app$e ?v3 ?v4))))) :named a84))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$) (?v4 B$)) (=> (= (fun_app$i (comp$c ?v0) ?v1) (fun_app$i (comp$c ?v2) ?v3)) (= (fun_app$h ?v0 (fun_app$g ?v1 ?v4)) (fun_app$h ?v2 (fun_app$g ?v3 ?v4))))) :named a85))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$) (?v4 B$)) (=> (= (fun_app$i (comp$c ?v0) ?v1) (fun_app$m (comp$e ?v2) ?v3)) (= (fun_app$h ?v0 (fun_app$g ?v1 ?v4)) (fun_app$l ?v2 (fun_app$h ?v3 ?v4))))) :named a86))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat_a_fun$) (?v2 B_a_fun$) (?v3 Nat_b_fun$) (?v4 Nat$)) (=> (= (fun_app$k (comp$d ?v0) ?v1) (fun_app$a (comp$ ?v2) ?v3)) (= (fun_app$l ?v0 (fun_app$j ?v1 ?v4)) (fun_app$h ?v2 (fun_app$e ?v3 ?v4))))) :named a87))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat_a_fun$) (?v2 A_a_fun$) (?v3 Nat_a_fun$) (?v4 Nat$)) (=> (= (fun_app$k (comp$d ?v0) ?v1) (fun_app$k (comp$d ?v2) ?v3)) (= (fun_app$l ?v0 (fun_app$j ?v1 ?v4)) (fun_app$l ?v2 (fun_app$j ?v3 ?v4))))) :named a88))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$) (?v4 B$)) (=> (= (fun_app$m (comp$e ?v0) ?v1) (fun_app$i (comp$c ?v2) ?v3)) (= (fun_app$l ?v0 (fun_app$h ?v1 ?v4)) (fun_app$h ?v2 (fun_app$g ?v3 ?v4))))) :named a89))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 A_a_fun$) (?v3 B_a_fun$) (?v4 B$)) (=> (= (fun_app$m (comp$e ?v0) ?v1) (fun_app$m (comp$e ?v2) ?v3)) (= (fun_app$l ?v0 (fun_app$h ?v1 ?v4)) (fun_app$l ?v2 (fun_app$h ?v3 ?v4))))) :named a90))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 B_a_fun$) (?v3 Nat_b_fun$) (?v4 Nat$)) (=> (= (fun_app$a (comp$ ?v0) ?v1) (fun_app$a (comp$ ?v2) ?v3)) (= (fun_app$h ?v0 (fun_app$e ?v1 ?v4)) (fun_app$h ?v2 (fun_app$e ?v3 ?v4))))) :named a91))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$s (comp$k ?v0) ?v1) ?v2) (= (fun_app$v (comp$l (fun_app$a (comp$ ?v3) ?v0)) ?v1) (fun_app$a (comp$ ?v3) ?v2)))) :named a92))
(assert (! (forall ((?v0 B_b_fun$) (?v1 Nat_b_fun$) (?v2 Nat_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$f (comp$b ?v0) ?v1) ?v2) (= (fun_app$a (comp$ (fun_app$i (comp$c ?v3) ?v0)) ?v1) (fun_app$a (comp$ ?v3) ?v2)))) :named a93))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 Nat_a_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$a (comp$ ?v0) ?v1) ?v2) (= (fun_app$a (comp$ (fun_app$m (comp$e ?v3) ?v0)) ?v1) (fun_app$k (comp$d ?v3) ?v2)))) :named a94))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 B_nat_fun$) (?v2 B_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$r (comp$j ?v0) ?v1) ?v2) (= (fun_app$w (comp$m (fun_app$a (comp$ ?v3) ?v0)) ?v1) (fun_app$i (comp$c ?v3) ?v2)))) :named a95))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_b_fun$) (?v3 B_b_fun$)) (=> (= (fun_app$s (comp$k ?v0) ?v1) ?v2) (= (fun_app$s (comp$k (fun_app$f (comp$b ?v3) ?v0)) ?v1) (fun_app$f (comp$b ?v3) ?v2)))) :named a96))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_nat_fun$) (?v2 Nat_a_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$v (comp$l ?v0) ?v1) ?v2) (= (fun_app$v (comp$l (fun_app$k (comp$d ?v3) ?v0)) ?v1) (fun_app$k (comp$d ?v3) ?v2)))) :named a97))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 B_nat_fun$) (?v2 B_a_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$w (comp$m ?v0) ?v1) ?v2) (= (fun_app$w (comp$m (fun_app$k (comp$d ?v3) ?v0)) ?v1) (fun_app$m (comp$e ?v3) ?v2)))) :named a98))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$q (comp$i ?v0) ?v1) ?v2) (= (fun_app$i (comp$c (fun_app$i (comp$c ?v3) ?v0)) ?v1) (fun_app$i (comp$c ?v3) ?v2)))) :named a99))
(assert (! (forall ((?v0 A_b_fun$) (?v1 Nat_a_fun$) (?v2 Nat_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$o (comp$g ?v0) ?v1) ?v2) (= (fun_app$k (comp$d (fun_app$p (comp$h ?v3) ?v0)) ?v1) (fun_app$a (comp$ ?v3) ?v2)))) :named a100))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 B_b_fun$) (?v3 B_a_fun$)) (=> (= (fun_app$n (comp$f ?v0) ?v1) ?v2) (= (fun_app$m (comp$e (fun_app$p (comp$h ?v3) ?v0)) ?v1) (fun_app$i (comp$c ?v3) ?v2)))) :named a101))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 Nat_a_fun$) (?v3 B_nat_fun$)) (=> (= (fun_app$a (comp$ ?v0) ?v1) ?v2) (= (fun_app$i (comp$c ?v0) (fun_app$r (comp$j ?v1) ?v3)) (fun_app$w (comp$m ?v2) ?v3)))) :named a102))
(assert (! (forall ((?v0 B_a_a_prod_fun$) (?v1 Nat_b_fun$) (?v2 Nat_a_a_prod_fun$) (?v3 Nat_nat_fun$)) (=> (= (fun_app$c (comp$a ?v0) ?v1) ?v2) (= (fun_app$c (comp$a ?v0) (fun_app$s (comp$k ?v1) ?v3)) (fun_app$aa (comp$q ?v2) ?v3)))) :named a103))
(assert (! (forall ((?v0 B_b_fun$) (?v1 Nat_b_fun$) (?v2 Nat_b_fun$) (?v3 Nat_nat_fun$)) (=> (= (fun_app$f (comp$b ?v0) ?v1) ?v2) (= (fun_app$f (comp$b ?v0) (fun_app$s (comp$k ?v1) ?v3)) (fun_app$s (comp$k ?v2) ?v3)))) :named a104))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$)) (=> (= (fun_app$i (comp$c ?v0) ?v1) ?v2) (= (fun_app$i (comp$c ?v0) (fun_app$q (comp$i ?v1) ?v3)) (fun_app$i (comp$c ?v2) ?v3)))) :named a105))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat_a_fun$) (?v2 Nat_a_fun$) (?v3 Nat_nat_fun$)) (=> (= (fun_app$k (comp$d ?v0) ?v1) ?v2) (= (fun_app$k (comp$d ?v0) (fun_app$v (comp$l ?v1) ?v3)) (fun_app$v (comp$l ?v2) ?v3)))) :named a106))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat_a_fun$) (?v2 Nat_a_fun$) (?v3 B_nat_fun$)) (=> (= (fun_app$k (comp$d ?v0) ?v1) ?v2) (= (fun_app$m (comp$e ?v0) (fun_app$w (comp$m ?v1) ?v3)) (fun_app$w (comp$m ?v2) ?v3)))) :named a107))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 B_b_fun$)) (=> (= (fun_app$m (comp$e ?v0) ?v1) ?v2) (= (fun_app$m (comp$e ?v0) (fun_app$i (comp$c ?v1) ?v3)) (fun_app$i (comp$c ?v2) ?v3)))) :named a108))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_a_fun$) (?v3 Nat_b_fun$)) (=> (= (fun_app$m (comp$e ?v0) ?v1) ?v2) (= (fun_app$k (comp$d ?v0) (fun_app$a (comp$ ?v1) ?v3)) (fun_app$a (comp$ ?v2) ?v3)))) :named a109))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_a_fun$) (?v3 Nat_b_fun$)) (=> (= (fun_app$i (comp$c ?v0) ?v1) ?v2) (= (fun_app$a (comp$ ?v0) (fun_app$f (comp$b ?v1) ?v3)) (fun_app$a (comp$ ?v2) ?v3)))) :named a110))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 Nat_a_fun$) (?v3 Nat_nat_fun$)) (=> (= (fun_app$a (comp$ ?v0) ?v1) ?v2) (= (fun_app$a (comp$ ?v0) (fun_app$s (comp$k ?v1) ?v3)) (fun_app$v (comp$l ?v2) ?v3)))) :named a111))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 Nat_a_fun$) (?v3 Nat$)) (=> (= (fun_app$a (comp$ ?v0) ?v1) ?v2) (= (fun_app$h ?v0 (fun_app$e ?v1 ?v3)) (fun_app$j ?v2 ?v3)))) :named a112))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 Nat$) (?v3 B_a_fun$) (?v4 Nat_b_fun$) (?v5 Nat$)) (=> (= (fun_app$h ?v0 (fun_app$e ?v1 ?v2)) (fun_app$h ?v3 (fun_app$e ?v4 ?v5))) (= (fun_app$j (fun_app$a (comp$ ?v0) ?v1) ?v2) (fun_app$j (fun_app$a (comp$ ?v3) ?v4) ?v5)))) :named a113))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 Nat$) (?v3 B_a_fun$) (?v4 Nat_b_fun$)) (=> (= (fun_app$h ?v0 (fun_app$e ?v1 ?v2)) (fun_app$h ?v3 (fun_app$e ?v4 ?v2))) (= (fun_app$j (fun_app$a (comp$ ?v0) ?v1) ?v2) (fun_app$j (fun_app$a (comp$ ?v3) ?v4) ?v2)))) :named a114))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 B_b_fun$) (?v4 Nat_b_fun$) (?v5 B_a_fun$)) (=> (= (fun_app$e ?v0 (fun_app$ab ?v1 ?v2)) (fun_app$g ?v3 (fun_app$e ?v4 ?v2))) (= (fun_app$j (fun_app$v (comp$l (fun_app$a (comp$ ?v5) ?v0)) ?v1) ?v2) (fun_app$j (fun_app$a (comp$ (fun_app$i (comp$c ?v5) ?v3)) ?v4) ?v2)))) :named a115))
(assert (! (forall ((?v0 B_b_fun$) (?v1 Nat_b_fun$) (?v2 Nat$) (?v3 Nat_b_fun$) (?v4 Nat_nat_fun$) (?v5 B_a_fun$)) (=> (= (fun_app$g ?v0 (fun_app$e ?v1 ?v2)) (fun_app$e ?v3 (fun_app$ab ?v4 ?v2))) (= (fun_app$j (fun_app$a (comp$ (fun_app$i (comp$c ?v5) ?v0)) ?v1) ?v2) (fun_app$j (fun_app$v (comp$l (fun_app$a (comp$ ?v5) ?v3)) ?v4) ?v2)))) :named a116))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_b_stream_fun$) (?v4 Nat_nat_fun$)) (= (comp$r (smap$ ?v0) (fun_app$u (fun_app$ac (fun_app$ad (corec_stream$ ?v1) ?v2) ?v3) ?v4)) (corec_stream$a (fun_app$a (comp$ ?v0) ?v1) ?v2 (comp$r (smap$ ?v0) ?v3) ?v4))) :named a117))
(assert (! (forall ((?v0 B_a_fun$) (?v1 Nat_b_fun$) (?v2 Nat_bool_fun$) (?v3 Nat_b_stream_fun$) (?v4 Nat_nat_fun$) (?v5 Nat$)) (= (fun_app$ (smap$ ?v0) (fun_app$t (fun_app$u (fun_app$ac (fun_app$ad (corec_stream$ ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$ae (corec_stream$a (fun_app$a (comp$ ?v0) ?v1) ?v2 (comp$r (smap$ ?v0) ?v3) ?v4) ?v5))) :named a118))
(assert (! (forall ((?v0 B_stream$)) (= (of_seq$ (snth$ ?v0)) ?v0)) :named a119))
(assert (! (forall ((?v0 A_stream$)) (= (of_seq$a (snth$a ?v0)) ?v0)) :named a120))
(assert (! (forall ((?v0 Nat_b_fun$)) (= (snth$ (of_seq$ ?v0)) ?v0)) :named a121))
(assert (! (forall ((?v0 Nat_a_fun$)) (= (snth$a (of_seq$a ?v0)) ?v0)) :named a122))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_a_fun$) (?v2 Nat_b_fun$)) (= (fun_app$c (comp$a (fun_app$af (convol$ ?v0) ?v1)) ?v2) (fun_app$ag (convol$a (fun_app$a (comp$ ?v0) ?v2)) (fun_app$a (comp$ ?v1) ?v2)))) :named a123))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (sdrop$ ?v0 (fun_app$ (smap$ ?v1) ?v2)) (fun_app$ (smap$ ?v1) (sdrop$a ?v0 ?v2)))) :named a124))
(check-sat)
;(get-unsat-core)
