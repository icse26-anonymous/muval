; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 353
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort Nat_a_stream_bool_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-fun f$ () Nat_a_fun$)
(declare-fun uu$ () Nat_a_fun$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun snth$ (A_stream$) Nat_a_fun$)
(declare-fun ev_at$ (A_stream_bool_fun$) Nat_a_stream_bool_fun_fun$)
(declare-fun sdrop$ (Nat$ A_stream$) A_stream$)
(declare-fun of_seq$ (Nat_a_fun$) A_stream$)
(declare-fun fun_app$ (Nat_a_fun$ Nat$) A$)
(declare-fun fun_app$a (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$b (Nat_a_stream_bool_fun_fun$ Nat$) A_stream_bool_fun$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (fun_app$ f$ (suc$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (= (stl$ (of_seq$ f$)) (of_seq$ uu$))) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 Nat$) (?v2 A_stream$)) (! (= (fun_app$a (fun_app$b (ev_at$ ?v0) (suc$ ?v1)) ?v2) (and (not (fun_app$a ?v0 ?v2)) (fun_app$a (fun_app$b (ev_at$ ?v0) ?v1) (stl$ ?v2)))) :pattern ((fun_app$a (fun_app$b (ev_at$ ?v0) (suc$ ?v1)) ?v2)))) :named a6))
(assert (! (forall ((?v0 Nat_a_fun$)) (= (snth$ (of_seq$ ?v0)) ?v0)) :named a7))
(assert (! (forall ((?v0 A_stream$)) (= (of_seq$ (snth$ ?v0)) ?v0)) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (= (stl$ (sdrop$ ?v0 ?v1)) (sdrop$ (suc$ ?v0) ?v1))) :named a9))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$) (?v2 Nat$)) (=> (and (not (fun_app$a ?v0 ?v1)) (fun_app$a (fun_app$b (ev_at$ ?v0) ?v2) (stl$ ?v1))) (fun_app$a (fun_app$b (ev_at$ ?v0) (suc$ ?v2)) ?v1))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (! (= (sdrop$ (suc$ ?v0) ?v1) (sdrop$ ?v0 (stl$ ?v1))) :pattern ((sdrop$ (suc$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 Nat$) (?v2 A_stream$) (?v3 Nat$)) (=> (and (fun_app$a (fun_app$b (ev_at$ ?v0) ?v1) ?v2) (fun_app$a (fun_app$b (ev_at$ ?v0) ?v3) ?v2)) (= ?v1 ?v3))) :named a12))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 Nat$) (?v2 A_stream$)) (=> (fun_app$a (fun_app$b (ev_at$ ?v0) ?v1) ?v2) (fun_app$a ?v0 (sdrop$ ?v1 ?v2)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (= (sdrop$ ?v0 (stl$ ?v1)) (stl$ (sdrop$ ?v0 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_stream$) (?v1 Nat$)) (! (= (fun_app$ (snth$ ?v0) (suc$ ?v1)) (fun_app$ (snth$ (stl$ ?v0)) ?v1)) :pattern ((fun_app$ (snth$ ?v0) (suc$ ?v1))))) :named a15))
(check-sat)
;(get-unsat-core)
