; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 88
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort C_a_fun$ 0)
(declare-sort C_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort Bool_stream$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_a_c_fun_fun$ 0)
(declare-sort A_b_a_fun_fun$ 0)
(declare-sort A_c_a_fun_fun$ 0)
(declare-sort B_a_a_fun_fun$ 0)
(declare-sort B_b_a_fun_fun$ 0)
(declare-sort B_c_a_fun_fun$ 0)
(declare-sort C_a_a_fun_fun$ 0)
(declare-sort C_b_a_fun_fun$ 0)
(declare-sort C_b_b_fun_fun$ 0)
(declare-sort C_b_c_fun_fun$ 0)
(declare-sort C_c_a_fun_fun$ 0)
(declare-sort A_a_b_prod_fun$ 0)
(declare-sort A_a_prod_a_fun$ 0)
(declare-sort A_c_b_prod_fun$ 0)
(declare-sort B_a_b_prod_fun$ 0)
(declare-sort B_c_b_prod_fun$ 0)
(declare-sort C_a_b_prod_fun$ 0)
(declare-sort C_b_prod_a_fun$ 0)
(declare-sort C_c_b_prod_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort C_b_bool_fun_fun$ 0)
(declare-sort A_b_prod_bool_fun$ 0)
(declare-sort C_b_prod_bool_fun$ 0)
(declare-sort C_b_a_b_prod_fun_fun$ 0)
(declare-sort C_b_c_b_prod_fun_fun$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-sort C_b_prod_a_b_prod_fun$ 0)
(declare-sort C_b_b_fun_fun_c_b_a_b_prod_fun_fun_fun$ 0)
(declare-sort C_b_c_fun_fun_c_b_a_b_prod_fun_fun_fun$ 0)
(declare-sort C_b_a_b_prod_fun_fun_c_b_a_b_prod_fun_fun_fun$ 0)
(declare-sort C_b_c_b_prod_fun_fun_c_b_a_b_prod_fun_fun_fun$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_stream$ (sCons$ (shd$ A_b_prod$) (stl$ A_b_prod_stream$)))
  (A_stream$ (sCons$a (shd$a A$) (stl$a A_stream$)))
  (B_stream$ (sCons$b (shd$b B$) (stl$b B_stream$)))
  (C_stream$ (sCons$c (shd$c C$) (stl$c C_stream$)))))
(declare-datatypes () ((C_b_prod$ (pair$a (fst$a C$) (snd$a B$)))))
(declare-codatatypes () ((C_b_prod_stream$ (sCons$d (shd$d C_b_prod$) (stl$d C_b_prod_stream$)))))
(declare-datatypes () ((A_a_prod$ (pair$b (fst$b A$) (snd$b A$)))))
(declare-codatatypes () ((A_a_prod_stream$ (sCons$e (shd$e A_a_prod$) (stl$e A_a_prod_stream$)))))
(declare-datatypes () ((A_c_prod$ (pair$c (fst$c A$) (snd$c C$)))))
(declare-codatatypes () ((A_c_prod_stream$ (sCons$f (shd$f A_c_prod$) (stl$f A_c_prod_stream$)))))
(declare-datatypes () ((C_a_prod$ (pair$d (fst$d C$) (snd$d A$)))))
(declare-codatatypes () ((C_a_prod_stream$ (sCons$g (shd$g C_a_prod$) (stl$g C_a_prod_stream$)))))
(declare-datatypes () ((C_c_prod$ (pair$e (fst$e C$) (snd$e C$)))))
(declare-codatatypes () ((C_c_prod_stream$ (sCons$h (shd$h C_c_prod$) (stl$h C_c_prod_stream$)))))
(declare-datatypes () ((B_a_prod$ (pair$f (fst$f B$) (snd$f A$)))))
(declare-codatatypes () ((B_a_prod_stream$ (sCons$i (shd$i B_a_prod$) (stl$i B_a_prod_stream$)))))
(declare-datatypes () ((B_c_prod$ (pair$g (fst$g B$) (snd$g C$)))))
(declare-codatatypes () ((B_c_prod_stream$ (sCons$j (shd$j B_c_prod$) (stl$j B_c_prod_stream$)))))
(declare-datatypes () ((B_b_prod$ (pair$h (fst$h B$) (snd$h B$)))))
(declare-codatatypes () ((B_b_prod_stream$ (sCons$k (shd$k B_b_prod$) (stl$k B_b_prod_stream$)))))
(declare-datatypes () ((A_b_prod_a_prod$ (pair$i (fst$i A_b_prod$) (snd$i A$)))))
(declare-codatatypes () ((A_b_prod_a_prod_stream$ (sCons$l (shd$l A_b_prod_a_prod$) (stl$l A_b_prod_a_prod_stream$)))))
(declare-fun f$ () C_a_fun$)
(declare-fun uu$ (C_a_fun$) C_b_prod_a_fun$)
(declare-fun xs$ () C_stream$)
(declare-fun ys$ () B_stream$)
(declare-fun uua$ (C_a_b_prod_fun$) C_b_prod_a_b_prod_fun$)
(declare-fun uub$ (B_a_fun$) C_b_prod_a_fun$)
(declare-fun uuc$ (B_a_b_prod_fun$) A_b_prod_a_b_prod_fun$)
(declare-fun uud$ (B_a_b_prod_fun$) C_b_prod_a_b_prod_fun$)
(declare-fun uue$ (A_b_prod_a_b_prod_fun$) C_b_a_b_prod_fun_fun_c_b_a_b_prod_fun_fun_fun$)
(declare-fun uuf$ (C_b_prod_a_b_prod_fun$) C_b_c_b_prod_fun_fun_c_b_a_b_prod_fun_fun_fun$)
(declare-fun uug$ (C_a_b_prod_fun$) C_b_c_fun_fun_c_b_a_b_prod_fun_fun_fun$)
(declare-fun uuh$ (B_a_b_prod_fun$) C_b_b_fun_fun_c_b_a_b_prod_fun_fun_fun$)
(declare-fun smap$ (C_a_fun$ C_stream$) A_stream$)
(declare-fun snth$ (A_stream$ Nat$) A$)
(declare-fun szip$ (A_stream$ B_stream$) A_b_prod_stream$)
(declare-fun apfst$ (C_a_fun$) C_b_prod_a_b_prod_fun$)
(declare-fun apsnd$ (B_b_fun$) A_b_prod_a_b_prod_fun$)
(declare-fun sdrop$ (Nat$ A_stream$) A_stream$)
(declare-fun smap$a (C_b_prod_a_b_prod_fun$ C_b_prod_stream$) A_b_prod_stream$)
(declare-fun smap$b (A_a_fun$ A_stream$) A_stream$)
(declare-fun smap$c (A_c_fun$ A_stream$) C_stream$)
(declare-fun smap$d (C_c_fun$ C_stream$) C_stream$)
(declare-fun smap$e (B_a_b_prod_fun$ B_stream$) A_b_prod_stream$)
(declare-fun smap$f (A_a_b_prod_fun$ A_stream$) A_b_prod_stream$)
(declare-fun smap$g (C_a_b_prod_fun$ C_stream$) A_b_prod_stream$)
(declare-fun smap$h (A_c_b_prod_fun$ A_stream$) C_b_prod_stream$)
(declare-fun smap$i (C_c_b_prod_fun$ C_stream$) C_b_prod_stream$)
(declare-fun smap$j (A_a_prod_a_fun$ A_a_prod_stream$) A_stream$)
(declare-fun smap$k (A_b_prod_bool_fun$ A_b_prod_stream$) Bool_stream$)
(declare-fun smap$l (C_b_prod_bool_fun$ C_b_prod_stream$) Bool_stream$)
(declare-fun smap$m (C_b_prod_a_fun$ C_b_prod_stream$) A_stream$)
(declare-fun smap$n (B_a_fun$ B_stream$) A_stream$)
(declare-fun smap$o (B_c_fun$ B_stream$) C_stream$)
(declare-fun smap$p (A_b_fun$ A_stream$) B_stream$)
(declare-fun smap$q (C_b_fun$ C_stream$) B_stream$)
(declare-fun smap$r (B_b_fun$ B_stream$) B_stream$)
(declare-fun smap$s (A_b_prod_a_b_prod_fun$ A_b_prod_stream$) A_b_prod_stream$)
(declare-fun smap2$ (A_a_a_fun_fun$ A_stream$ A_stream$) A_stream$)
(declare-fun snth$a (C_stream$ Nat$) C$)
(declare-fun snth$b (A_b_prod_stream$ Nat$) A_b_prod$)
(declare-fun snth$c (C_b_prod_stream$ Nat$) C_b_prod$)
(declare-fun snth$d (B_stream$ Nat$) B$)
(declare-fun snth$e (A_a_prod_stream$ Nat$) A_a_prod$)
(declare-fun snth$f (A_c_prod_stream$ Nat$) A_c_prod$)
(declare-fun snth$g (C_a_prod_stream$ Nat$) C_a_prod$)
(declare-fun snth$h (C_c_prod_stream$ Nat$) C_c_prod$)
(declare-fun snth$i (B_a_prod_stream$ Nat$) B_a_prod$)
(declare-fun snth$j (B_c_prod_stream$ Nat$) B_c_prod$)
(declare-fun snth$k (B_b_prod_stream$ Nat$) B_b_prod$)
(declare-fun snth$l (A_b_prod_a_prod_stream$ Nat$) A_b_prod_a_prod$)
(declare-fun szip$a (C_stream$ B_stream$) C_b_prod_stream$)
(declare-fun szip$b (A_stream$ A_stream$) A_a_prod_stream$)
(declare-fun szip$c (A_stream$ C_stream$) A_c_prod_stream$)
(declare-fun szip$d (C_stream$ A_stream$) C_a_prod_stream$)
(declare-fun szip$e (C_stream$ C_stream$) C_c_prod_stream$)
(declare-fun szip$f (B_stream$ A_stream$) B_a_prod_stream$)
(declare-fun szip$g (B_stream$ C_stream$) B_c_prod_stream$)
(declare-fun szip$h (B_stream$ B_stream$) B_b_prod_stream$)
(declare-fun szip$i (A_b_prod_stream$ A_stream$) A_b_prod_a_prod_stream$)
(declare-fun apfst$a (A_a_fun$) A_b_prod_a_b_prod_fun$)
(declare-fun apfst$b (A_c_fun$ A_b_prod$) C_b_prod$)
(declare-fun apfst$c (C_c_fun$ C_b_prod$) C_b_prod$)
(declare-fun apsnd$a (B_b_fun$ C_b_prod$) C_b_prod$)
(declare-fun sdrop$a (Nat$ C_stream$) C_stream$)
(declare-fun sdrop$b (Nat$ A_b_prod_stream$) A_b_prod_stream$)
(declare-fun sdrop$c (Nat$ C_b_prod_stream$) C_b_prod_stream$)
(declare-fun sdrop$d (Nat$ B_stream$) B_stream$)
(declare-fun sdrop$e (Nat$ A_a_prod_stream$) A_a_prod_stream$)
(declare-fun sdrop$f (Nat$ A_c_prod_stream$) A_c_prod_stream$)
(declare-fun sdrop$g (Nat$ C_a_prod_stream$) C_a_prod_stream$)
(declare-fun sdrop$h (Nat$ C_c_prod_stream$) C_c_prod_stream$)
(declare-fun sdrop$i (Nat$ B_a_prod_stream$) B_a_prod_stream$)
(declare-fun sdrop$j (Nat$ B_c_prod_stream$) B_c_prod_stream$)
(declare-fun sdrop$k (Nat$ B_b_prod_stream$) B_b_prod_stream$)
(declare-fun sdrop$l (Nat$ A_b_prod_a_prod_stream$) A_b_prod_a_prod_stream$)
(declare-fun smap2$a (A_b_bool_fun_fun$ A_stream$ B_stream$) Bool_stream$)
(declare-fun smap2$b (C_b_bool_fun_fun$ C_stream$ B_stream$) Bool_stream$)
(declare-fun smap2$c (C_b_a_fun_fun$ C_stream$ B_stream$) A_stream$)
(declare-fun smap2$d (C_b_a_b_prod_fun_fun$ C_stream$ B_stream$) A_b_prod_stream$)
(declare-fun smap2$e (A_c_a_fun_fun$ A_stream$ C_stream$) A_stream$)
(declare-fun smap2$f (A_b_a_fun_fun$ A_stream$ B_stream$) A_stream$)
(declare-fun smap2$g (C_a_a_fun_fun$ C_stream$ A_stream$) A_stream$)
(declare-fun smap2$h (C_c_a_fun_fun$ C_stream$ C_stream$) A_stream$)
(declare-fun smap2$i (B_a_a_fun_fun$ B_stream$ A_stream$) A_stream$)
(declare-fun smap2$j (B_c_a_fun_fun$ B_stream$ C_stream$) A_stream$)
(declare-fun smap2$k (B_b_a_fun_fun$ B_stream$ B_stream$) A_stream$)
(declare-fun smap2$l (A_a_c_fun_fun$ A_stream$ A_stream$) C_stream$)
(declare-fun smap2$m (C_b_c_b_prod_fun_fun$ C_stream$ B_stream$) C_b_prod_stream$)
(declare-fun smap2$n (C_b_c_fun_fun$ C_stream$ B_stream$) C_stream$)
(declare-fun smap2$o (C_b_b_fun_fun$ C_stream$ B_stream$) B_stream$)
(declare-fun fun_app$ (C_b_prod_a_b_prod_fun$ C_b_prod$) A_b_prod$)
(declare-fun fun_app$a (B_a_b_prod_fun$ B$) A_b_prod$)
(declare-fun fun_app$b (A_b_prod_a_b_prod_fun$ A_b_prod$) A_b_prod$)
(declare-fun fun_app$c (C_b_prod_a_fun$ C_b_prod$) A$)
(declare-fun fun_app$d (B_a_fun$ B$) A$)
(declare-fun fun_app$e (C_a_b_prod_fun$ C$) A_b_prod$)
(declare-fun fun_app$f (C_a_fun$ C$) A$)
(declare-fun fun_app$g (C_b_a_b_prod_fun_fun$ C$) B_a_b_prod_fun$)
(declare-fun fun_app$h (C_b_c_b_prod_fun_fun_c_b_a_b_prod_fun_fun_fun$ C_b_c_b_prod_fun_fun$) C_b_a_b_prod_fun_fun$)
(declare-fun fun_app$i (B_c_b_prod_fun$ B$) C_b_prod$)
(declare-fun fun_app$j (C_b_c_b_prod_fun_fun$ C$) B_c_b_prod_fun$)
(declare-fun fun_app$k (C_b_a_b_prod_fun_fun_c_b_a_b_prod_fun_fun_fun$ C_b_a_b_prod_fun_fun$) C_b_a_b_prod_fun_fun$)
(declare-fun fun_app$l (C_b_c_fun_fun_c_b_a_b_prod_fun_fun_fun$ C_b_c_fun_fun$) C_b_a_b_prod_fun_fun$)
(declare-fun fun_app$m (B_c_fun$ B$) C$)
(declare-fun fun_app$n (C_b_c_fun_fun$ C$) B_c_fun$)
(declare-fun fun_app$o (C_b_b_fun_fun_c_b_a_b_prod_fun_fun_fun$ C_b_b_fun_fun$) C_b_a_b_prod_fun_fun$)
(declare-fun fun_app$p (B_b_fun$ B$) B$)
(declare-fun fun_app$q (C_b_b_fun_fun$ C$) B_b_fun$)
(declare-fun fun_app$r (A_a_fun$ A$) A$)
(declare-fun fun_app$s (A_c_fun$ A$) C$)
(declare-fun fun_app$t (C_c_fun$ C$) C$)
(declare-fun fun_app$u (A_a_b_prod_fun$ A$) A_b_prod$)
(declare-fun fun_app$v (A_c_b_prod_fun$ A$) C_b_prod$)
(declare-fun fun_app$w (C_c_b_prod_fun$ C$) C_b_prod$)
(declare-fun fun_app$x (A_b_fun$ A$) B$)
(declare-fun fun_app$y (C_b_fun$ C$) B$)
(declare-fun fun_app$z (B_bool_fun$ B$) Bool)
(declare-fun case_prod$ (A_a_a_fun_fun$) A_a_prod_a_fun$)
(declare-fun fun_app$aa (C_b_bool_fun_fun$ C$) B_bool_fun$)
(declare-fun fun_app$ab (C_b_prod_bool_fun$ C_b_prod$) Bool)
(declare-fun fun_app$ac (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$ad (A_b_prod_bool_fun$ A_b_prod$) Bool)
(declare-fun fun_app$ae (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$af (A_c_a_fun_fun$ A$) C_a_fun$)
(declare-fun fun_app$ag (A_b_a_fun_fun$ A$) B_a_fun$)
(declare-fun fun_app$ah (C_a_a_fun_fun$ C$) A_a_fun$)
(declare-fun fun_app$ai (C_c_a_fun_fun$ C$) C_a_fun$)
(declare-fun fun_app$aj (C_b_a_fun_fun$ C$) B_a_fun$)
(declare-fun fun_app$ak (B_a_a_fun_fun$ B$) A_a_fun$)
(declare-fun fun_app$al (B_c_a_fun_fun$ B$) C_a_fun$)
(declare-fun fun_app$am (B_b_a_fun_fun$ B$) B_a_fun$)
(declare-fun fun_app$an (A_a_c_fun_fun$ A$) A_c_fun$)
(declare-fun case_prod$a (A_b_bool_fun_fun$) A_b_prod_bool_fun$)
(declare-fun case_prod$b (C_b_bool_fun_fun$) C_b_prod_bool_fun$)
(declare-fun case_prod$c (C_b_a_fun_fun$) C_b_prod_a_fun$)
(declare-fun case_prod$d (C_b_a_b_prod_fun_fun$) C_b_prod_a_b_prod_fun$)
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 C_b_prod$)) (! (= (fun_app$ (uud$ ?v0) ?v1) (fun_app$a ?v0 (snd$a ?v1))) :pattern ((fun_app$ (uud$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 A_b_prod$)) (! (= (fun_app$b (uuc$ ?v0) ?v1) (fun_app$a ?v0 (snd$ ?v1))) :pattern ((fun_app$b (uuc$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_b_prod$)) (! (= (fun_app$c (uub$ ?v0) ?v1) (fun_app$d ?v0 (snd$a ?v1))) :pattern ((fun_app$c (uub$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 C_a_b_prod_fun$) (?v1 C_b_prod$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (fun_app$e ?v0 (fst$a ?v1))) :pattern ((fun_app$ (uua$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_b_prod$)) (! (= (fun_app$c (uu$ ?v0) ?v1) (fun_app$f ?v0 (fst$a ?v1))) :pattern ((fun_app$c (uu$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 C_b_prod_a_b_prod_fun$) (?v1 C_b_c_b_prod_fun_fun$) (?v2 C$) (?v3 B$)) (! (= (fun_app$a (fun_app$g (fun_app$h (uuf$ ?v0) ?v1) ?v2) ?v3) (fun_app$ ?v0 (fun_app$i (fun_app$j ?v1 ?v2) ?v3))) :pattern ((fun_app$a (fun_app$g (fun_app$h (uuf$ ?v0) ?v1) ?v2) ?v3)))) :named a5))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 C_b_a_b_prod_fun_fun$) (?v2 C$) (?v3 B$)) (! (= (fun_app$a (fun_app$g (fun_app$k (uue$ ?v0) ?v1) ?v2) ?v3) (fun_app$b ?v0 (fun_app$a (fun_app$g ?v1 ?v2) ?v3))) :pattern ((fun_app$a (fun_app$g (fun_app$k (uue$ ?v0) ?v1) ?v2) ?v3)))) :named a6))
(assert (! (forall ((?v0 C_a_b_prod_fun$) (?v1 C_b_c_fun_fun$) (?v2 C$) (?v3 B$)) (! (= (fun_app$a (fun_app$g (fun_app$l (uug$ ?v0) ?v1) ?v2) ?v3) (fun_app$e ?v0 (fun_app$m (fun_app$n ?v1 ?v2) ?v3))) :pattern ((fun_app$a (fun_app$g (fun_app$l (uug$ ?v0) ?v1) ?v2) ?v3)))) :named a7))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 C_b_b_fun_fun$) (?v2 C$) (?v3 B$)) (! (= (fun_app$a (fun_app$g (fun_app$o (uuh$ ?v0) ?v1) ?v2) ?v3) (fun_app$a ?v0 (fun_app$p (fun_app$q ?v1 ?v2) ?v3))) :pattern ((fun_app$a (fun_app$g (fun_app$o (uuh$ ?v0) ?v1) ?v2) ?v3)))) :named a8))
(assert (! (not (= (szip$ (smap$ f$ xs$) ys$) (smap$a (apfst$ f$) (szip$a xs$ ys$)))) :named a9))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (smap$ ?v0 ?v1) (sCons$a ?v2 ?v3)) (exists ((?v4 C$) (?v5 C_stream$)) (and (= ?v1 (sCons$c ?v4 ?v5)) (and (= ?v2 (fun_app$f ?v0 ?v4)) (= ?v3 (smap$ ?v0 ?v5))))))) :named a10))
(assert (! (forall ((?v0 C_b_prod_a_b_prod_fun$) (?v1 C_b_prod_stream$) (?v2 A_b_prod$) (?v3 A_b_prod_stream$)) (= (= (smap$a ?v0 ?v1) (sCons$ ?v2 ?v3)) (exists ((?v4 C_b_prod$) (?v5 C_b_prod_stream$)) (and (= ?v1 (sCons$d ?v4 ?v5)) (and (= ?v2 (fun_app$ ?v0 ?v4)) (= ?v3 (smap$a ?v0 ?v5))))))) :named a11))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (smap$b ?v0 ?v1) (sCons$a ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v1 (sCons$a ?v4 ?v5)) (and (= ?v2 (fun_app$r ?v0 ?v4)) (= ?v3 (smap$b ?v0 ?v5))))))) :named a12))
(assert (! (forall ((?v0 A_c_fun$) (?v1 A_stream$) (?v2 C$) (?v3 C_stream$)) (= (= (smap$c ?v0 ?v1) (sCons$c ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v1 (sCons$a ?v4 ?v5)) (and (= ?v2 (fun_app$s ?v0 ?v4)) (= ?v3 (smap$c ?v0 ?v5))))))) :named a13))
(assert (! (forall ((?v0 C_c_fun$) (?v1 C_stream$) (?v2 C$) (?v3 C_stream$)) (= (= (smap$d ?v0 ?v1) (sCons$c ?v2 ?v3)) (exists ((?v4 C$) (?v5 C_stream$)) (and (= ?v1 (sCons$c ?v4 ?v5)) (and (= ?v2 (fun_app$t ?v0 ?v4)) (= ?v3 (smap$d ?v0 ?v5))))))) :named a14))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 B_stream$) (?v2 A_b_prod$) (?v3 A_b_prod_stream$)) (= (= (smap$e ?v0 ?v1) (sCons$ ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_stream$)) (and (= ?v1 (sCons$b ?v4 ?v5)) (and (= ?v2 (fun_app$a ?v0 ?v4)) (= ?v3 (smap$e ?v0 ?v5))))))) :named a15))
(assert (! (forall ((?v0 A_a_b_prod_fun$) (?v1 A_stream$) (?v2 A_b_prod$) (?v3 A_b_prod_stream$)) (= (= (smap$f ?v0 ?v1) (sCons$ ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v1 (sCons$a ?v4 ?v5)) (and (= ?v2 (fun_app$u ?v0 ?v4)) (= ?v3 (smap$f ?v0 ?v5))))))) :named a16))
(assert (! (forall ((?v0 C_a_b_prod_fun$) (?v1 C_stream$) (?v2 A_b_prod$) (?v3 A_b_prod_stream$)) (= (= (smap$g ?v0 ?v1) (sCons$ ?v2 ?v3)) (exists ((?v4 C$) (?v5 C_stream$)) (and (= ?v1 (sCons$c ?v4 ?v5)) (and (= ?v2 (fun_app$e ?v0 ?v4)) (= ?v3 (smap$g ?v0 ?v5))))))) :named a17))
(assert (! (forall ((?v0 A_c_b_prod_fun$) (?v1 A_stream$) (?v2 C_b_prod$) (?v3 C_b_prod_stream$)) (= (= (smap$h ?v0 ?v1) (sCons$d ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v1 (sCons$a ?v4 ?v5)) (and (= ?v2 (fun_app$v ?v0 ?v4)) (= ?v3 (smap$h ?v0 ?v5))))))) :named a18))
(assert (! (forall ((?v0 C_c_b_prod_fun$) (?v1 C_stream$) (?v2 C_b_prod$) (?v3 C_b_prod_stream$)) (= (= (smap$i ?v0 ?v1) (sCons$d ?v2 ?v3)) (exists ((?v4 C$) (?v5 C_stream$)) (and (= ?v1 (sCons$c ?v4 ?v5)) (and (= ?v2 (fun_app$w ?v0 ?v4)) (= ?v3 (smap$i ?v0 ?v5))))))) :named a19))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (! (= (smap2$ ?v0 ?v1 ?v2) (smap$j (case_prod$ ?v0) (szip$b ?v1 ?v2))) :pattern ((smap2$ ?v0 ?v1 ?v2)))) :named a20))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_stream$) (?v2 B_stream$)) (! (= (smap2$a ?v0 ?v1 ?v2) (smap$k (case_prod$a ?v0) (szip$ ?v1 ?v2))) :pattern ((smap2$a ?v0 ?v1 ?v2)))) :named a21))
(assert (! (forall ((?v0 C_b_bool_fun_fun$) (?v1 C_stream$) (?v2 B_stream$)) (! (= (smap2$b ?v0 ?v1 ?v2) (smap$l (case_prod$b ?v0) (szip$a ?v1 ?v2))) :pattern ((smap2$b ?v0 ?v1 ?v2)))) :named a22))
(assert (! (forall ((?v0 C_b_a_fun_fun$) (?v1 C_stream$) (?v2 B_stream$)) (! (= (smap2$c ?v0 ?v1 ?v2) (smap$m (case_prod$c ?v0) (szip$a ?v1 ?v2))) :pattern ((smap2$c ?v0 ?v1 ?v2)))) :named a23))
(assert (! (forall ((?v0 C_b_a_b_prod_fun_fun$) (?v1 C_stream$) (?v2 B_stream$)) (! (= (smap2$d ?v0 ?v1 ?v2) (smap$a (case_prod$d ?v0) (szip$a ?v1 ?v2))) :pattern ((smap2$d ?v0 ?v1 ?v2)))) :named a24))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_a_fun$) (?v2 A_b_prod$)) (= (fun_app$b (apsnd$ ?v0) (fun_app$b (apfst$a ?v1) ?v2)) (fun_app$b (apfst$a ?v1) (fun_app$b (apsnd$ ?v0) ?v2)))) :named a25))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_c_fun$) (?v2 A_b_prod$)) (= (apsnd$a ?v0 (apfst$b ?v1 ?v2)) (apfst$b ?v1 (fun_app$b (apsnd$ ?v0) ?v2)))) :named a26))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_c_fun$) (?v2 C_b_prod$)) (= (apsnd$a ?v0 (apfst$c ?v1 ?v2)) (apfst$c ?v1 (apsnd$a ?v0 ?v2)))) :named a27))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_a_fun$) (?v2 C_b_prod$)) (= (fun_app$b (apsnd$ ?v0) (fun_app$ (apfst$ ?v1) ?v2)) (fun_app$ (apfst$ ?v1) (apsnd$a ?v0 ?v2)))) :named a28))
(assert (! (forall ((?v0 C_c_fun$) (?v1 C$) (?v2 B$)) (! (= (apfst$c ?v0 (pair$a ?v1 ?v2)) (pair$a (fun_app$t ?v0 ?v1) ?v2)) :pattern ((apfst$c ?v0 (pair$a ?v1 ?v2))))) :named a29))
(assert (! (forall ((?v0 A_c_fun$) (?v1 A$) (?v2 B$)) (! (= (apfst$b ?v0 (pair$ ?v1 ?v2)) (pair$a (fun_app$s ?v0 ?v1) ?v2)) :pattern ((apfst$b ?v0 (pair$ ?v1 ?v2))))) :named a30))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$b (apfst$a ?v0) (pair$ ?v1 ?v2)) (pair$ (fun_app$r ?v0 ?v1) ?v2)) :pattern ((fun_app$b (apfst$a ?v0) (pair$ ?v1 ?v2))))) :named a31))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C$) (?v2 B$)) (! (= (fun_app$ (apfst$ ?v0) (pair$a ?v1 ?v2)) (pair$ (fun_app$f ?v0 ?v1) ?v2)) :pattern ((fun_app$ (apfst$ ?v0) (pair$a ?v1 ?v2))))) :named a32))
(assert (! (forall ((?v0 Nat$) (?v1 C_a_fun$) (?v2 C_stream$)) (= (sdrop$ ?v0 (smap$ ?v1 ?v2)) (smap$ ?v1 (sdrop$a ?v0 ?v2)))) :named a33))
(assert (! (forall ((?v0 Nat$) (?v1 C_b_prod_a_b_prod_fun$) (?v2 C_b_prod_stream$)) (= (sdrop$b ?v0 (smap$a ?v1 ?v2)) (smap$a ?v1 (sdrop$c ?v0 ?v2)))) :named a34))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (sdrop$ ?v0 (smap$b ?v1 ?v2)) (smap$b ?v1 (sdrop$ ?v0 ?v2)))) :named a35))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (sdrop$ ?v0 (smap$n ?v1 ?v2)) (smap$n ?v1 (sdrop$d ?v0 ?v2)))) :named a36))
(assert (! (forall ((?v0 Nat$) (?v1 A_c_fun$) (?v2 A_stream$)) (= (sdrop$a ?v0 (smap$c ?v1 ?v2)) (smap$c ?v1 (sdrop$ ?v0 ?v2)))) :named a37))
(assert (! (forall ((?v0 Nat$) (?v1 C_c_fun$) (?v2 C_stream$)) (= (sdrop$a ?v0 (smap$d ?v1 ?v2)) (smap$d ?v1 (sdrop$a ?v0 ?v2)))) :named a38))
(assert (! (forall ((?v0 Nat$) (?v1 B_c_fun$) (?v2 B_stream$)) (= (sdrop$a ?v0 (smap$o ?v1 ?v2)) (smap$o ?v1 (sdrop$d ?v0 ?v2)))) :named a39))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_fun$) (?v2 A_stream$)) (= (sdrop$d ?v0 (smap$p ?v1 ?v2)) (smap$p ?v1 (sdrop$ ?v0 ?v2)))) :named a40))
(assert (! (forall ((?v0 Nat$) (?v1 C_b_fun$) (?v2 C_stream$)) (= (sdrop$d ?v0 (smap$q ?v1 ?v2)) (smap$q ?v1 (sdrop$a ?v0 ?v2)))) :named a41))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_fun$) (?v2 B_stream$)) (= (sdrop$d ?v0 (smap$r ?v1 ?v2)) (smap$r ?v1 (sdrop$d ?v0 ?v2)))) :named a42))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_stream$) (?v2 B_stream$)) (= (smap$m (uu$ ?v0) (szip$a ?v1 ?v2)) (smap$ ?v0 ?v1))) :named a43))
(assert (! (forall ((?v0 C_a_b_prod_fun$) (?v1 C_stream$) (?v2 B_stream$)) (= (smap$a (uua$ ?v0) (szip$a ?v1 ?v2)) (smap$g ?v0 ?v1))) :named a44))
(assert (! (forall ((?v0 B_a_fun$) (?v1 C_stream$) (?v2 B_stream$)) (= (smap$m (uub$ ?v0) (szip$a ?v1 ?v2)) (smap$n ?v0 ?v2))) :named a45))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 A_stream$) (?v2 B_stream$)) (= (smap$s (uuc$ ?v0) (szip$ ?v1 ?v2)) (smap$e ?v0 ?v2))) :named a46))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 C_stream$) (?v2 B_stream$)) (= (smap$a (uud$ ?v0) (szip$a ?v1 ?v2)) (smap$e ?v0 ?v2))) :named a47))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_stream$) (?v2 Nat$)) (= (snth$ (smap$ ?v0 ?v1) ?v2) (fun_app$f ?v0 (snth$a ?v1 ?v2)))) :named a48))
(assert (! (forall ((?v0 C_b_prod_a_b_prod_fun$) (?v1 C_b_prod_stream$) (?v2 Nat$)) (= (snth$b (smap$a ?v0 ?v1) ?v2) (fun_app$ ?v0 (snth$c ?v1 ?v2)))) :named a49))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$ (smap$b ?v0 ?v1) ?v2) (fun_app$r ?v0 (snth$ ?v1 ?v2)))) :named a50))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$ (smap$n ?v0 ?v1) ?v2) (fun_app$d ?v0 (snth$d ?v1 ?v2)))) :named a51))
(assert (! (forall ((?v0 A_c_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$a (smap$c ?v0 ?v1) ?v2) (fun_app$s ?v0 (snth$ ?v1 ?v2)))) :named a52))
(assert (! (forall ((?v0 C_c_fun$) (?v1 C_stream$) (?v2 Nat$)) (= (snth$a (smap$d ?v0 ?v1) ?v2) (fun_app$t ?v0 (snth$a ?v1 ?v2)))) :named a53))
(assert (! (forall ((?v0 B_c_fun$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$a (smap$o ?v0 ?v1) ?v2) (fun_app$m ?v0 (snth$d ?v1 ?v2)))) :named a54))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$d (smap$p ?v0 ?v1) ?v2) (fun_app$x ?v0 (snth$ ?v1 ?v2)))) :named a55))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_stream$) (?v2 Nat$)) (= (snth$d (smap$q ?v0 ?v1) ?v2) (fun_app$y ?v0 (snth$a ?v1 ?v2)))) :named a56))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$d (smap$r ?v0 ?v1) ?v2) (fun_app$p ?v0 (snth$d ?v1 ?v2)))) :named a57))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_b_prod$) (?v2 C_a_fun$)) (= (= (fun_app$ (apfst$ ?v0) ?v1) (fun_app$ (apfst$ ?v2) ?v1)) (= (fun_app$f ?v0 (fst$a ?v1)) (fun_app$f ?v2 (fst$a ?v1))))) :named a58))
(assert (! (forall ((?v0 C_c_fun$) (?v1 C_b_prod$)) (= (fst$a (apfst$c ?v0 ?v1)) (fun_app$t ?v0 (fst$a ?v1)))) :named a59))
(assert (! (forall ((?v0 A_c_fun$) (?v1 A_b_prod$)) (= (fst$a (apfst$b ?v0 ?v1)) (fun_app$s ?v0 (fst$ ?v1)))) :named a60))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_b_prod$)) (= (fst$ (fun_app$b (apfst$a ?v0) ?v1)) (fun_app$r ?v0 (fst$ ?v1)))) :named a61))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_b_prod$)) (= (fst$ (fun_app$ (apfst$ ?v0) ?v1)) (fun_app$f ?v0 (fst$a ?v1)))) :named a62))
(assert (! (forall ((?v0 C_c_fun$) (?v1 C_b_prod$)) (= (snd$a (apfst$c ?v0 ?v1)) (snd$a ?v1))) :named a63))
(assert (! (forall ((?v0 A_c_fun$) (?v1 A_b_prod$)) (= (snd$a (apfst$b ?v0 ?v1)) (snd$ ?v1))) :named a64))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_b_prod$)) (= (snd$ (fun_app$b (apfst$a ?v0) ?v1)) (snd$ ?v1))) :named a65))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_b_prod$)) (= (snd$ (fun_app$ (apfst$ ?v0) ?v1)) (snd$a ?v1))) :named a66))
(assert (! (forall ((?v0 C$) (?v1 B$) (?v2 C$) (?v3 B$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a67))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a68))
(assert (! (forall ((?v0 C$) (?v1 B$) (?v2 C$) (?v3 B$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a69))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a70))
(assert (! (forall ((?v0 C_b_prod$) (?v1 C_b_bool_fun_fun$)) (=> (forall ((?v2 C$) (?v3 B$)) (=> (= ?v0 (pair$a ?v2 ?v3)) (fun_app$z (fun_app$aa ?v1 ?v2) ?v3))) (fun_app$ab (case_prod$b ?v1) ?v0))) :named a71))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_bool_fun_fun$)) (=> (forall ((?v2 A$) (?v3 B$)) (=> (= ?v0 (pair$ ?v2 ?v3)) (fun_app$z (fun_app$ac ?v1 ?v2) ?v3))) (fun_app$ad (case_prod$a ?v1) ?v0))) :named a72))
(assert (! (forall ((?v0 C_b_bool_fun_fun$) (?v1 C$) (?v2 B$)) (=> (fun_app$z (fun_app$aa ?v0 ?v1) ?v2) (fun_app$ab (case_prod$b ?v0) (pair$a ?v1 ?v2)))) :named a73))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 B$)) (=> (fun_app$z (fun_app$ac ?v0 ?v1) ?v2) (fun_app$ad (case_prod$a ?v0) (pair$ ?v1 ?v2)))) :named a74))
(assert (! (forall ((?v0 C_b_bool_fun_fun$) (?v1 C$) (?v2 B$)) (=> (fun_app$z (fun_app$aa ?v0 ?v1) ?v2) (fun_app$ab (case_prod$b ?v0) (pair$a ?v1 ?v2)))) :named a75))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 B$)) (=> (fun_app$z (fun_app$ac ?v0 ?v1) ?v2) (fun_app$ad (case_prod$a ?v0) (pair$ ?v1 ?v2)))) :named a76))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_stream$) (?v2 A_b_prod$) (?v3 A_b_prod_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a77))
(assert (! (forall ((?v0 C_b_prod$) (?v1 C_b_prod_stream$) (?v2 C_b_prod$) (?v3 C_b_prod_stream$)) (= (= (sCons$d ?v0 ?v1) (sCons$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a78))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$a ?v0 ?v1) (sCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a79))
(assert (! (forall ((?v0 C$) (?v1 C_stream$) (?v2 C$) (?v3 C_stream$)) (= (= (sCons$c ?v0 ?v1) (sCons$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a80))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$b (apsnd$ ?v0) (pair$ ?v1 ?v2)) (pair$ ?v1 (fun_app$p ?v0 ?v2))) :pattern ((fun_app$b (apsnd$ ?v0) (pair$ ?v1 ?v2))))) :named a81))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C$) (?v2 B$)) (! (= (apsnd$a ?v0 (pair$a ?v1 ?v2)) (pair$a ?v1 (fun_app$p ?v0 ?v2))) :pattern ((apsnd$a ?v0 (pair$a ?v1 ?v2))))) :named a82))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_prod$)) (= (fst$a (apsnd$a ?v0 ?v1)) (fst$a ?v1))) :named a83))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_b_prod$)) (= (fst$ (fun_app$b (apsnd$ ?v0) ?v1)) (fst$ ?v1))) :named a84))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_prod$) (?v2 B_b_fun$)) (= (= (apsnd$a ?v0 ?v1) (apsnd$a ?v2 ?v1)) (= (fun_app$p ?v0 (snd$a ?v1)) (fun_app$p ?v2 (snd$a ?v1))))) :named a85))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_b_prod$) (?v2 B_b_fun$)) (= (= (fun_app$b (apsnd$ ?v0) ?v1) (fun_app$b (apsnd$ ?v2) ?v1)) (= (fun_app$p ?v0 (snd$ ?v1)) (fun_app$p ?v2 (snd$ ?v1))))) :named a86))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_b_prod$)) (= (snd$a (apsnd$a ?v0 ?v1)) (fun_app$p ?v0 (snd$a ?v1)))) :named a87))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_b_prod$)) (= (snd$ (fun_app$b (apsnd$ ?v0) ?v1)) (fun_app$p ?v0 (snd$ ?v1)))) :named a88))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_stream$) (?v2 A_stream$) (?v3 Nat$)) (= (snth$ (smap2$ ?v0 ?v1 ?v2) ?v3) (fun_app$r (fun_app$ae ?v0 (snth$ ?v1 ?v3)) (snth$ ?v2 ?v3)))) :named a89))
(assert (! (forall ((?v0 A_c_a_fun_fun$) (?v1 A_stream$) (?v2 C_stream$) (?v3 Nat$)) (= (snth$ (smap2$e ?v0 ?v1 ?v2) ?v3) (fun_app$f (fun_app$af ?v0 (snth$ ?v1 ?v3)) (snth$a ?v2 ?v3)))) :named a90))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 A_stream$) (?v2 B_stream$) (?v3 Nat$)) (= (snth$ (smap2$f ?v0 ?v1 ?v2) ?v3) (fun_app$d (fun_app$ag ?v0 (snth$ ?v1 ?v3)) (snth$d ?v2 ?v3)))) :named a91))
(assert (! (forall ((?v0 C_a_a_fun_fun$) (?v1 C_stream$) (?v2 A_stream$) (?v3 Nat$)) (= (snth$ (smap2$g ?v0 ?v1 ?v2) ?v3) (fun_app$r (fun_app$ah ?v0 (snth$a ?v1 ?v3)) (snth$ ?v2 ?v3)))) :named a92))
(assert (! (forall ((?v0 C_c_a_fun_fun$) (?v1 C_stream$) (?v2 C_stream$) (?v3 Nat$)) (= (snth$ (smap2$h ?v0 ?v1 ?v2) ?v3) (fun_app$f (fun_app$ai ?v0 (snth$a ?v1 ?v3)) (snth$a ?v2 ?v3)))) :named a93))
(assert (! (forall ((?v0 C_b_a_fun_fun$) (?v1 C_stream$) (?v2 B_stream$) (?v3 Nat$)) (= (snth$ (smap2$c ?v0 ?v1 ?v2) ?v3) (fun_app$d (fun_app$aj ?v0 (snth$a ?v1 ?v3)) (snth$d ?v2 ?v3)))) :named a94))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B_stream$) (?v2 A_stream$) (?v3 Nat$)) (= (snth$ (smap2$i ?v0 ?v1 ?v2) ?v3) (fun_app$r (fun_app$ak ?v0 (snth$d ?v1 ?v3)) (snth$ ?v2 ?v3)))) :named a95))
(assert (! (forall ((?v0 B_c_a_fun_fun$) (?v1 B_stream$) (?v2 C_stream$) (?v3 Nat$)) (= (snth$ (smap2$j ?v0 ?v1 ?v2) ?v3) (fun_app$f (fun_app$al ?v0 (snth$d ?v1 ?v3)) (snth$a ?v2 ?v3)))) :named a96))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B_stream$) (?v2 B_stream$) (?v3 Nat$)) (= (snth$ (smap2$k ?v0 ?v1 ?v2) ?v3) (fun_app$d (fun_app$am ?v0 (snth$d ?v1 ?v3)) (snth$d ?v2 ?v3)))) :named a97))
(assert (! (forall ((?v0 A_a_c_fun_fun$) (?v1 A_stream$) (?v2 A_stream$) (?v3 Nat$)) (= (snth$a (smap2$l ?v0 ?v1 ?v2) ?v3) (fun_app$s (fun_app$an ?v0 (snth$ ?v1 ?v3)) (snth$ ?v2 ?v3)))) :named a98))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_a_fun_fun$) (?v2 A_stream$) (?v3 A_stream$)) (= (sdrop$ ?v0 (smap2$ ?v1 ?v2 ?v3)) (smap2$ ?v1 (sdrop$ ?v0 ?v2) (sdrop$ ?v0 ?v3)))) :named a99))
(assert (! (forall ((?v0 Nat$) (?v1 A_c_a_fun_fun$) (?v2 A_stream$) (?v3 C_stream$)) (= (sdrop$ ?v0 (smap2$e ?v1 ?v2 ?v3)) (smap2$e ?v1 (sdrop$ ?v0 ?v2) (sdrop$a ?v0 ?v3)))) :named a100))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_a_fun_fun$) (?v2 A_stream$) (?v3 B_stream$)) (= (sdrop$ ?v0 (smap2$f ?v1 ?v2 ?v3)) (smap2$f ?v1 (sdrop$ ?v0 ?v2) (sdrop$d ?v0 ?v3)))) :named a101))
(assert (! (forall ((?v0 Nat$) (?v1 C_a_a_fun_fun$) (?v2 C_stream$) (?v3 A_stream$)) (= (sdrop$ ?v0 (smap2$g ?v1 ?v2 ?v3)) (smap2$g ?v1 (sdrop$a ?v0 ?v2) (sdrop$ ?v0 ?v3)))) :named a102))
(assert (! (forall ((?v0 Nat$) (?v1 C_c_a_fun_fun$) (?v2 C_stream$) (?v3 C_stream$)) (= (sdrop$ ?v0 (smap2$h ?v1 ?v2 ?v3)) (smap2$h ?v1 (sdrop$a ?v0 ?v2) (sdrop$a ?v0 ?v3)))) :named a103))
(assert (! (forall ((?v0 Nat$) (?v1 C_b_a_fun_fun$) (?v2 C_stream$) (?v3 B_stream$)) (= (sdrop$ ?v0 (smap2$c ?v1 ?v2 ?v3)) (smap2$c ?v1 (sdrop$a ?v0 ?v2) (sdrop$d ?v0 ?v3)))) :named a104))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_a_fun_fun$) (?v2 B_stream$) (?v3 A_stream$)) (= (sdrop$ ?v0 (smap2$i ?v1 ?v2 ?v3)) (smap2$i ?v1 (sdrop$d ?v0 ?v2) (sdrop$ ?v0 ?v3)))) :named a105))
(assert (! (forall ((?v0 Nat$) (?v1 B_c_a_fun_fun$) (?v2 B_stream$) (?v3 C_stream$)) (= (sdrop$ ?v0 (smap2$j ?v1 ?v2 ?v3)) (smap2$j ?v1 (sdrop$d ?v0 ?v2) (sdrop$a ?v0 ?v3)))) :named a106))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_a_fun_fun$) (?v2 B_stream$) (?v3 B_stream$)) (= (sdrop$ ?v0 (smap2$k ?v1 ?v2 ?v3)) (smap2$k ?v1 (sdrop$d ?v0 ?v2) (sdrop$d ?v0 ?v3)))) :named a107))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_c_fun_fun$) (?v2 A_stream$) (?v3 A_stream$)) (= (sdrop$a ?v0 (smap2$l ?v1 ?v2 ?v3)) (smap2$l ?v1 (sdrop$ ?v0 ?v2) (sdrop$ ?v0 ?v3)))) :named a108))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$) (?v2 B_stream$)) (= (sdrop$b ?v0 (szip$ ?v1 ?v2)) (szip$ (sdrop$ ?v0 ?v1) (sdrop$d ?v0 ?v2)))) :named a109))
(assert (! (forall ((?v0 Nat$) (?v1 C_stream$) (?v2 B_stream$)) (= (sdrop$c ?v0 (szip$a ?v1 ?v2)) (szip$a (sdrop$a ?v0 ?v1) (sdrop$d ?v0 ?v2)))) :named a110))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$) (?v2 A_stream$)) (= (sdrop$e ?v0 (szip$b ?v1 ?v2)) (szip$b (sdrop$ ?v0 ?v1) (sdrop$ ?v0 ?v2)))) :named a111))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$) (?v2 C_stream$)) (= (sdrop$f ?v0 (szip$c ?v1 ?v2)) (szip$c (sdrop$ ?v0 ?v1) (sdrop$a ?v0 ?v2)))) :named a112))
(assert (! (forall ((?v0 Nat$) (?v1 C_stream$) (?v2 A_stream$)) (= (sdrop$g ?v0 (szip$d ?v1 ?v2)) (szip$d (sdrop$a ?v0 ?v1) (sdrop$ ?v0 ?v2)))) :named a113))
(assert (! (forall ((?v0 Nat$) (?v1 C_stream$) (?v2 C_stream$)) (= (sdrop$h ?v0 (szip$e ?v1 ?v2)) (szip$e (sdrop$a ?v0 ?v1) (sdrop$a ?v0 ?v2)))) :named a114))
(assert (! (forall ((?v0 Nat$) (?v1 B_stream$) (?v2 A_stream$)) (= (sdrop$i ?v0 (szip$f ?v1 ?v2)) (szip$f (sdrop$d ?v0 ?v1) (sdrop$ ?v0 ?v2)))) :named a115))
(assert (! (forall ((?v0 Nat$) (?v1 B_stream$) (?v2 C_stream$)) (= (sdrop$j ?v0 (szip$g ?v1 ?v2)) (szip$g (sdrop$d ?v0 ?v1) (sdrop$a ?v0 ?v2)))) :named a116))
(assert (! (forall ((?v0 Nat$) (?v1 B_stream$) (?v2 B_stream$)) (= (sdrop$k ?v0 (szip$h ?v1 ?v2)) (szip$h (sdrop$d ?v0 ?v1) (sdrop$d ?v0 ?v2)))) :named a117))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_stream$) (?v2 A_stream$)) (= (sdrop$l ?v0 (szip$i ?v1 ?v2)) (szip$i (sdrop$b ?v0 ?v1) (sdrop$ ?v0 ?v2)))) :named a118))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 C_b_a_b_prod_fun_fun$) (?v2 C_stream$) (?v3 B_stream$)) (= (smap$s ?v0 (smap2$d ?v1 ?v2 ?v3)) (smap2$d (fun_app$k (uue$ ?v0) ?v1) ?v2 ?v3))) :named a119))
(assert (! (forall ((?v0 C_b_prod_a_b_prod_fun$) (?v1 C_b_c_b_prod_fun_fun$) (?v2 C_stream$) (?v3 B_stream$)) (= (smap$a ?v0 (smap2$m ?v1 ?v2 ?v3)) (smap2$d (fun_app$h (uuf$ ?v0) ?v1) ?v2 ?v3))) :named a120))
(assert (! (forall ((?v0 C_a_b_prod_fun$) (?v1 C_b_c_fun_fun$) (?v2 C_stream$) (?v3 B_stream$)) (= (smap$g ?v0 (smap2$n ?v1 ?v2 ?v3)) (smap2$d (fun_app$l (uug$ ?v0) ?v1) ?v2 ?v3))) :named a121))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 C_b_b_fun_fun$) (?v2 C_stream$) (?v3 B_stream$)) (= (smap$e ?v0 (smap2$o ?v1 ?v2 ?v3)) (smap2$d (fun_app$o (uuh$ ?v0) ?v1) ?v2 ?v3))) :named a122))
(assert (! (forall ((?v0 C_b_prod$)) (= (pair$a (fst$a ?v0) (snd$a ?v0)) ?v0)) :named a123))
(assert (! (forall ((?v0 A_b_prod$)) (= (pair$ (fst$ ?v0) (snd$ ?v0)) ?v0)) :named a124))
(assert (! (forall ((?v0 A_stream$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$b (szip$ ?v0 ?v1) ?v2) (pair$ (snth$ ?v0 ?v2) (snth$d ?v1 ?v2)))) :named a125))
(assert (! (forall ((?v0 C_stream$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$c (szip$a ?v0 ?v1) ?v2) (pair$a (snth$a ?v0 ?v2) (snth$d ?v1 ?v2)))) :named a126))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$e (szip$b ?v0 ?v1) ?v2) (pair$b (snth$ ?v0 ?v2) (snth$ ?v1 ?v2)))) :named a127))
(assert (! (forall ((?v0 A_stream$) (?v1 C_stream$) (?v2 Nat$)) (= (snth$f (szip$c ?v0 ?v1) ?v2) (pair$c (snth$ ?v0 ?v2) (snth$a ?v1 ?v2)))) :named a128))
(assert (! (forall ((?v0 C_stream$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$g (szip$d ?v0 ?v1) ?v2) (pair$d (snth$a ?v0 ?v2) (snth$ ?v1 ?v2)))) :named a129))
(assert (! (forall ((?v0 C_stream$) (?v1 C_stream$) (?v2 Nat$)) (= (snth$h (szip$e ?v0 ?v1) ?v2) (pair$e (snth$a ?v0 ?v2) (snth$a ?v1 ?v2)))) :named a130))
(assert (! (forall ((?v0 B_stream$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$i (szip$f ?v0 ?v1) ?v2) (pair$f (snth$d ?v0 ?v2) (snth$ ?v1 ?v2)))) :named a131))
(assert (! (forall ((?v0 B_stream$) (?v1 C_stream$) (?v2 Nat$)) (= (snth$j (szip$g ?v0 ?v1) ?v2) (pair$g (snth$d ?v0 ?v2) (snth$a ?v1 ?v2)))) :named a132))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$k (szip$h ?v0 ?v1) ?v2) (pair$h (snth$d ?v0 ?v2) (snth$d ?v1 ?v2)))) :named a133))
(assert (! (forall ((?v0 A_b_prod_stream$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$l (szip$i ?v0 ?v1) ?v2) (pair$i (snth$b ?v0 ?v2) (snth$ ?v1 ?v2)))) :named a134))
(assert (! (forall ((?v0 C_c_fun$) (?v1 B_b_fun$) (?v2 C_b_prod$)) (= (apfst$c ?v0 (apsnd$a ?v1 ?v2)) (pair$a (fun_app$t ?v0 (fst$a ?v2)) (fun_app$p ?v1 (snd$a ?v2))))) :named a135))
(assert (! (forall ((?v0 C_a_fun$) (?v1 B_b_fun$) (?v2 C_b_prod$)) (= (fun_app$ (apfst$ ?v0) (apsnd$a ?v1 ?v2)) (pair$ (fun_app$f ?v0 (fst$a ?v2)) (fun_app$p ?v1 (snd$a ?v2))))) :named a136))
(assert (! (forall ((?v0 A_c_fun$) (?v1 B_b_fun$) (?v2 A_b_prod$)) (= (apfst$b ?v0 (fun_app$b (apsnd$ ?v1) ?v2)) (pair$a (fun_app$s ?v0 (fst$ ?v2)) (fun_app$p ?v1 (snd$ ?v2))))) :named a137))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 A_b_prod$)) (= (fun_app$b (apfst$a ?v0) (fun_app$b (apsnd$ ?v1) ?v2)) (pair$ (fun_app$r ?v0 (fst$ ?v2)) (fun_app$p ?v1 (snd$ ?v2))))) :named a138))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_a_fun$) (?v2 C_b_prod$)) (= (fun_app$b (apsnd$ ?v0) (fun_app$ (apfst$ ?v1) ?v2)) (pair$ (fun_app$f ?v1 (fst$a ?v2)) (fun_app$p ?v0 (snd$a ?v2))))) :named a139))
(assert (! (forall ((?v0 B_b_fun$) (?v1 C_c_fun$) (?v2 C_b_prod$)) (= (apsnd$a ?v0 (apfst$c ?v1 ?v2)) (pair$a (fun_app$t ?v1 (fst$a ?v2)) (fun_app$p ?v0 (snd$a ?v2))))) :named a140))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_a_fun$) (?v2 A_b_prod$)) (= (fun_app$b (apsnd$ ?v0) (fun_app$b (apfst$a ?v1) ?v2)) (pair$ (fun_app$r ?v1 (fst$ ?v2)) (fun_app$p ?v0 (snd$ ?v2))))) :named a141))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_c_fun$) (?v2 A_b_prod$)) (= (apsnd$a ?v0 (apfst$b ?v1 ?v2)) (pair$a (fun_app$s ?v1 (fst$ ?v2)) (fun_app$p ?v0 (snd$ ?v2))))) :named a142))
(assert (! (forall ((?v0 C_b_prod$) (?v1 C_b_prod$)) (= (= ?v0 ?v1) (and (= (fst$a ?v0) (fst$a ?v1)) (= (snd$a ?v0) (snd$a ?v1))))) :named a143))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$)) (= (= ?v0 ?v1) (and (= (fst$ ?v0) (fst$ ?v1)) (= (snd$ ?v0) (snd$ ?v1))))) :named a144))
(check-sat)
;(get-unsat-core)
