; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 36
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort B_a_a_fun_fun$ 0)
(declare-sort B_a_b_fun_fun$ 0)
(declare-sort A_a_prod_a_fun$ 0)
(declare-sort A_b_a_prod_fun$ 0)
(declare-sort A_b_prod_a_fun$ 0)
(declare-sort B_a_prod_a_fun$ 0)
(declare-sort B_a_prod_b_fun$ 0)
(declare-sort B_b_a_prod_fun$ 0)
(declare-sort B_b_prod_b_fun$ 0)
(declare-sort A_a_b_a_prod_fun_fun$ 0)
(declare-sort A_b_a_prod_a_fun_fun$ 0)
(declare-sort B_a_b_a_prod_fun_fun$ 0)
(declare-sort B_a_prod_a_a_fun_fun$ 0)
(declare-sort A_a_prod_a_a_prod_fun$ 0)
(declare-sort A_a_prod_b_a_prod_fun$ 0)
(declare-sort A_b_a_prod_prod_a_fun$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-sort B_a_prod_a_a_prod_fun$ 0)
(declare-sort B_a_prod_b_a_prod_fun$ 0)
(declare-sort B_b_a_prod_prod_a_fun$ 0)
(declare-sort B_b_a_prod_prod_b_fun$ 0)
(declare-sort B_b_prod_b_b_prod_fun$ 0)
(declare-sort A_b_a_prod_b_a_prod_fun_fun$ 0)
(declare-sort B_a_prod_a_b_a_prod_fun_fun$ 0)
(declare-sort B_a_prod_b_a_prod_a_fun_fun$ 0)
(declare-sort B_b_a_prod_b_a_prod_fun_fun$ 0)
(declare-sort A_a_prod_b_b_a_prod_prod_fun$ 0)
(declare-sort A_b_a_prod_prod_a_a_prod_fun$ 0)
(declare-sort A_b_a_prod_prod_b_a_prod_fun$ 0)
(declare-sort A_b_b_a_prod_prod_prod_a_fun$ 0)
(declare-sort B_a_prod_a_prod_a_a_prod_fun$ 0)
(declare-sort B_a_prod_a_prod_b_a_prod_fun$ 0)
(declare-sort B_a_prod_b_a_prod_prod_a_fun$ 0)
(declare-sort B_a_prod_b_a_prod_prod_b_fun$ 0)
(declare-sort B_a_prod_b_b_a_prod_prod_fun$ 0)
(declare-sort B_a_prod_b_prod_a_b_prod_fun$ 0)
(declare-sort B_b_a_prod_prod_a_a_prod_fun$ 0)
(declare-sort B_b_a_prod_prod_b_a_prod_fun$ 0)
(declare-sort B_b_a_prod_prod_b_b_prod_fun$ 0)
(declare-sort B_b_b_a_prod_prod_prod_b_fun$ 0)
(declare-sort B_a_a_fun_fun_b_a_a_fun_fun_fun$ 0)
(declare-sort A_a_fun_b_a_prod_b_a_prod_fun_fun$ 0)
(declare-sort B_a_prod_b_a_prod_b_a_prod_fun_fun$ 0)
(declare-sort B_a_prod_b_a_prod_prod_a_a_prod_fun$ 0)
(declare-sort B_a_prod_b_a_prod_prod_b_a_prod_fun$ 0)
(declare-sort B_b_a_prod_prod_b_b_a_prod_prod_fun$ 0)
(declare-sort B_a_b_a_prod_fun_fun_b_a_a_fun_fun_fun$ 0)
(declare-sort B_a_prod_b_a_prod_prod_a_b_a_prod_prod_fun$ 0)
(declare-sort B_a_prod_b_a_prod_prod_b_a_prod_a_prod_fun$ 0)
(declare-sort B_a_prod_b_a_prod_prod_b_a_prod_b_prod_fun$ 0)
(declare-sort B_a_prod_b_a_prod_prod_b_b_a_prod_prod_fun$ 0)
(declare-sort B_b_a_prod_prod_b_a_prod_b_a_prod_prod_fun$ 0)
(declare-sort B_b_b_a_prod_prod_prod_b_b_a_prod_prod_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-datatypes () ((B_a_prod$ (pair$ (fst$ B$) (snd$ A$)))))
(declare-codatatypes () ((B_a_prod_stream$ (sCons$a (shd$a B_a_prod$) (stl$a B_a_prod_stream$)))
  (B_stream$ (sCons$b (shd$b B$) (stl$b B_stream$)))))
(declare-datatypes () ((B_b_a_prod_prod$ (pair$a (fst$a B$) (snd$a B_a_prod$)))))
(declare-codatatypes () ((B_b_a_prod_prod_stream$ (sCons$c (shd$c B_b_a_prod_prod$) (stl$c B_b_a_prod_prod_stream$)))))
(declare-datatypes () ((A_a_prod$ (pair$b (fst$b A$) (snd$b A$)))))
(declare-codatatypes () ((A_a_prod_stream$ (sCons$d (shd$d A_a_prod$) (stl$d A_a_prod_stream$)))))
(declare-datatypes () ((A_b_a_prod_prod$ (pair$c (fst$c A$) (snd$c B_a_prod$)))))
(declare-codatatypes () ((A_b_a_prod_prod_stream$ (sCons$e (shd$e A_b_a_prod_prod$) (stl$e A_b_a_prod_prod_stream$)))))
(declare-datatypes () ((B_b_prod$ (pair$d (fst$d B$) (snd$d B$)))))
(declare-codatatypes () ((B_b_prod_stream$ (sCons$f (shd$f B_b_prod$) (stl$f B_b_prod_stream$)))))
(declare-datatypes () ((B_a_prod_a_prod$ (pair$e (fst$e B_a_prod$) (snd$e A$)))))
(declare-codatatypes () ((B_a_prod_a_prod_stream$ (sCons$g (shd$g B_a_prod_a_prod$) (stl$g B_a_prod_a_prod_stream$)))))
(declare-datatypes () ((B_a_prod_b_a_prod_prod$ (pair$f (fst$f B_a_prod$) (snd$f B_a_prod$)))))
(declare-codatatypes () ((B_a_prod_b_a_prod_prod_stream$ (sCons$h (shd$h B_a_prod_b_a_prod_prod$) (stl$h B_a_prod_b_a_prod_prod_stream$)))))
(declare-datatypes () ((B_a_prod_b_prod$ (pair$g (fst$g B_a_prod$) (snd$g B$)))))
(declare-codatatypes () ((B_a_prod_b_prod_stream$ (sCons$i (shd$i B_a_prod_b_prod$) (stl$i B_a_prod_b_prod_stream$)))))
(declare-datatypes () ((B_b_b_a_prod_prod_prod$ (pair$h (fst$h B$) (snd$h B_b_a_prod_prod$)))))
(declare-codatatypes () ((B_b_b_a_prod_prod_prod_stream$ (sCons$j (shd$j B_b_b_a_prod_prod_prod$) (stl$j B_b_b_a_prod_prod_prod_stream$)))))
(declare-datatypes () ((A_b_b_a_prod_prod_prod$ (pair$i (fst$i A$) (snd$i B_b_a_prod_prod$)))))
(declare-codatatypes () ((A_b_b_a_prod_prod_prod_stream$ (sCons$k (shd$k A_b_b_a_prod_prod_prod$) (stl$k A_b_b_a_prod_prod_prod_stream$)))))
(declare-datatypes () ((A_b_prod$ (pair$j (fst$j A$) (snd$j B$)))))
(declare-codatatypes () ((A_b_prod_stream$ (sCons$l (shd$l A_b_prod$) (stl$l A_b_prod_stream$)))))
(declare-fun uu$ () B_a_prod_a_fun$)
(declare-fun xs$ () B_stream$)
(declare-fun ys$ () A_stream$)
(declare-fun uua$ () B_b_b_a_prod_prod_prod_b_fun$)
(declare-fun uub$ () B_b_prod_b_fun$)
(declare-fun uuc$ () A_b_b_a_prod_prod_prod_a_fun$)
(declare-fun uud$ () A_b_a_prod_prod_a_fun$)
(declare-fun uue$ () A_b_prod_a_fun$)
(declare-fun uuf$ () B_b_a_prod_prod_b_fun$)
(declare-fun uug$ () A_a_prod_a_fun$)
(declare-fun uuh$ () B_a_prod_b_a_prod_prod_b_a_prod_fun$)
(declare-fun uui$ () B_a_prod_b_fun$)
(declare-fun uuj$ (A_a_fun$) B_a_prod_a_fun$)
(declare-fun uuk$ (A_a_fun$) A_a_prod_a_fun$)
(declare-fun uul$ (A_b_fun$) B_a_prod_b_fun$)
(declare-fun uum$ (B_a_prod_a_fun$) B_b_a_prod_prod_a_fun$)
(declare-fun uun$ (B_a_prod_b_fun$) B_b_a_prod_prod_b_fun$)
(declare-fun uuo$ (A_b_a_prod_fun$) B_a_prod_b_a_prod_fun$)
(declare-fun uup$ (B_a_prod_a_fun$) B_a_prod_b_a_prod_prod_a_fun$)
(declare-fun uuq$ (B_a_prod_b_fun$) B_a_prod_b_a_prod_prod_b_fun$)
(declare-fun uur$ (B_a_prod_b_a_prod_fun$) B_b_a_prod_prod_b_a_prod_fun$)
(declare-fun uus$ (B_a_prod_b_a_prod_fun$) B_a_prod_b_a_prod_prod_b_a_prod_fun$)
(declare-fun uut$ () B_a_prod_b_a_prod_fun$)
(declare-fun uuu$ () B_b_fun$)
(declare-fun uuv$ () A_a_fun$)
(declare-fun uuw$ (B_a_prod_a_fun$) B_a_b_a_prod_fun_fun_b_a_a_fun_fun_fun$)
(declare-fun uux$ (A_a_fun$) B_a_a_fun_fun_b_a_a_fun_fun_fun$)
(declare-fun smap$ (B_a_prod_a_fun$ B_a_prod_stream$) A_stream$)
(declare-fun szip$ (B_stream$ A_stream$) B_a_prod_stream$)
(declare-fun apfst$ (B_b_fun$) B_a_prod_b_a_prod_fun$)
(declare-fun apsnd$ (A_a_fun$) B_a_prod_b_a_prod_fun$)
(declare-fun smap$a (A_a_fun$ A_stream$) A_stream$)
(declare-fun smap$b (B_a_prod_b_a_prod_fun$ B_a_prod_stream$) B_a_prod_stream$)
(declare-fun smap$c (B_b_a_prod_prod_b_a_prod_fun$ B_b_a_prod_prod_stream$) B_a_prod_stream$)
(declare-fun smap$d (A_a_prod_a_a_prod_fun$ A_a_prod_stream$) A_a_prod_stream$)
(declare-fun smap$e (A_b_a_prod_fun$ A_stream$) B_a_prod_stream$)
(declare-fun smap$f (B_a_prod_b_b_a_prod_prod_fun$ B_a_prod_stream$) B_b_a_prod_prod_stream$)
(declare-fun smap$g (A_b_a_prod_prod_a_a_prod_fun$ A_b_a_prod_prod_stream$) A_a_prod_stream$)
(declare-fun smap$h (B_a_prod_b_fun$ B_a_prod_stream$) B_stream$)
(declare-fun smap$i (B_b_a_prod_prod_b_b_prod_fun$ B_b_a_prod_prod_stream$) B_b_prod_stream$)
(declare-fun smap$j (B_a_prod_b_a_prod_prod_b_a_prod_a_prod_fun$ B_a_prod_b_a_prod_prod_stream$) B_a_prod_a_prod_stream$)
(declare-fun smap$k (B_b_a_prod_prod_b_b_a_prod_prod_fun$ B_b_a_prod_prod_stream$) B_b_a_prod_prod_stream$)
(declare-fun smap$l (B_a_prod_b_a_prod_prod_b_a_prod_b_prod_fun$ B_a_prod_b_a_prod_prod_stream$) B_a_prod_b_prod_stream$)
(declare-fun smap$m (B_b_b_a_prod_prod_prod_b_b_a_prod_prod_fun$ B_b_b_a_prod_prod_prod_stream$) B_b_a_prod_prod_stream$)
(declare-fun smap$n (B_b_fun$ B_stream$) B_stream$)
(declare-fun smap$o (A_b_fun$ A_stream$) B_stream$)
(declare-fun smap$p (A_a_prod_b_a_prod_fun$ A_a_prod_stream$) B_a_prod_stream$)
(declare-fun smap$q (B_a_fun$ B_stream$) A_stream$)
(declare-fun smap$r (B_a_prod_a_a_prod_fun$ B_a_prod_stream$) A_a_prod_stream$)
(declare-fun smap$s (B_a_prod_a_prod_a_a_prod_fun$ B_a_prod_a_prod_stream$) A_a_prod_stream$)
(declare-fun smap$t (B_a_prod_a_prod_b_a_prod_fun$ B_a_prod_a_prod_stream$) B_a_prod_stream$)
(declare-fun smap$u (B_b_a_prod_fun$ B_stream$) B_a_prod_stream$)
(declare-fun smap$v (B_b_a_prod_prod_b_a_prod_b_a_prod_prod_fun$ B_b_a_prod_prod_stream$) B_a_prod_b_a_prod_prod_stream$)
(declare-fun smap$w (B_a_prod_b_a_prod_prod_a_b_a_prod_prod_fun$ B_a_prod_b_a_prod_prod_stream$) A_b_a_prod_prod_stream$)
(declare-fun smap$x (B_a_prod_b_a_prod_prod_b_b_a_prod_prod_fun$ B_a_prod_b_a_prod_prod_stream$) B_b_a_prod_prod_stream$)
(declare-fun smap$y (B_b_b_a_prod_prod_prod_b_fun$ B_b_b_a_prod_prod_prod_stream$) B_stream$)
(declare-fun smap$z (B_b_prod_b_fun$ B_b_prod_stream$) B_stream$)
(declare-fun smap2$ (A_b_a_prod_b_a_prod_fun_fun$ A_stream$ B_a_prod_stream$) B_a_prod_stream$)
(declare-fun sndsp$ (B_b_a_prod_prod$ B_a_prod$) Bool)
(declare-fun szip$a (B_stream$ B_a_prod_stream$) B_b_a_prod_prod_stream$)
(declare-fun szip$b (A_stream$ A_stream$) A_a_prod_stream$)
(declare-fun szip$c (A_stream$ B_a_prod_stream$) A_b_a_prod_prod_stream$)
(declare-fun szip$d (B_stream$ B_stream$) B_b_prod_stream$)
(declare-fun szip$e (B_a_prod_stream$ A_stream$) B_a_prod_a_prod_stream$)
(declare-fun szip$f (B_a_prod_stream$ B_a_prod_stream$) B_a_prod_b_a_prod_prod_stream$)
(declare-fun szip$g (B_a_prod_stream$ B_stream$) B_a_prod_b_prod_stream$)
(declare-fun szip$h (B_stream$ B_b_a_prod_prod_stream$) B_b_b_a_prod_prod_prod_stream$)
(declare-fun szip$i (A_stream$ B_b_a_prod_prod_stream$) A_b_b_a_prod_prod_prod_stream$)
(declare-fun szip$j (A_stream$ B_stream$) A_b_prod_stream$)
(declare-fun apfst$a (A_b_fun$) A_a_prod_b_a_prod_fun$)
(declare-fun apfst$b (B_a_fun$) B_a_prod_a_a_prod_fun$)
(declare-fun apfst$c (A_a_fun$) A_a_prod_a_a_prod_fun$)
(declare-fun apfst$d (B_a_prod_a_fun$) B_a_prod_a_prod_a_a_prod_fun$)
(declare-fun apfst$e (B_a_prod_b_fun$) B_a_prod_a_prod_b_a_prod_fun$)
(declare-fun apfst$f (B_b_fun$) B_b_a_prod_prod_b_b_a_prod_prod_fun$)
(declare-fun apfst$g (B_b_a_prod_fun$) B_b_a_prod_prod_b_a_prod_b_a_prod_prod_fun$)
(declare-fun apfst$h (B_a_prod_a_fun$) B_a_prod_b_a_prod_prod_a_b_a_prod_prod_fun$)
(declare-fun apfst$i (B_a_prod_b_fun$) B_a_prod_b_a_prod_prod_b_b_a_prod_prod_fun$)
(declare-fun apsnd$a (B_a_prod_a_fun$) B_b_a_prod_prod_b_a_prod_fun$)
(declare-fun apsnd$b (A_a_fun$) A_a_prod_a_a_prod_fun$)
(declare-fun apsnd$c (A_b_a_prod_fun$) B_a_prod_b_b_a_prod_prod_fun$)
(declare-fun apsnd$d (B_a_prod_a_fun$) A_b_a_prod_prod_a_a_prod_fun$)
(declare-fun apsnd$e (B_a_prod_b_fun$) B_b_a_prod_prod_b_b_prod_fun$)
(declare-fun apsnd$f (B_a_prod_a_fun$) B_a_prod_b_a_prod_prod_b_a_prod_a_prod_fun$)
(declare-fun apsnd$g (B_a_prod_b_a_prod_fun$) B_b_a_prod_prod_b_b_a_prod_prod_fun$)
(declare-fun apsnd$h (B_a_prod_b_fun$) B_a_prod_b_a_prod_prod_b_a_prod_b_prod_fun$)
(declare-fun apsnd$i (B_b_a_prod_prod_b_a_prod_fun$) B_b_b_a_prod_prod_prod_b_b_a_prod_prod_fun$)
(declare-fun apsnd$j (B_a_prod_b_a_prod_fun$ B_a_prod_b_a_prod_prod$) B_a_prod_b_a_prod_prod$)
(declare-fun smap$aa (A_b_b_a_prod_prod_prod_a_fun$ A_b_b_a_prod_prod_prod_stream$) A_stream$)
(declare-fun smap$ab (A_b_a_prod_prod_a_fun$ A_b_a_prod_prod_stream$) A_stream$)
(declare-fun smap$ac (A_b_prod_a_fun$ A_b_prod_stream$) A_stream$)
(declare-fun smap$ad (B_b_a_prod_prod_b_fun$ B_b_a_prod_prod_stream$) B_stream$)
(declare-fun smap$ae (A_a_prod_a_fun$ A_a_prod_stream$) A_stream$)
(declare-fun smap$af (B_a_prod_b_a_prod_prod_b_a_prod_fun$ B_a_prod_b_a_prod_prod_stream$) B_a_prod_stream$)
(declare-fun smap$ag (B_a_prod_b_a_prod_prod_a_a_prod_fun$ B_a_prod_b_a_prod_prod_stream$) A_a_prod_stream$)
(declare-fun smap$ah (B_b_prod_b_b_prod_fun$ B_b_prod_stream$) B_b_prod_stream$)
(declare-fun smap$ai (A_b_prod_a_b_prod_fun$ A_b_prod_stream$) A_b_prod_stream$)
(declare-fun smap$aj (A_a_prod_b_b_a_prod_prod_fun$ A_a_prod_stream$) B_b_a_prod_prod_stream$)
(declare-fun smap$ak (B_b_a_prod_prod_a_a_prod_fun$ B_b_a_prod_prod_stream$) A_a_prod_stream$)
(declare-fun smap$al (B_a_prod_b_prod_a_b_prod_fun$ B_a_prod_b_prod_stream$) A_b_prod_stream$)
(declare-fun smap$am (B_b_a_prod_prod_a_fun$ B_b_a_prod_prod_stream$) A_stream$)
(declare-fun smap$an (B_a_prod_b_a_prod_prod_a_fun$ B_a_prod_b_a_prod_prod_stream$) A_stream$)
(declare-fun smap$ao (B_a_prod_b_a_prod_prod_b_fun$ B_a_prod_b_a_prod_prod_stream$) B_stream$)
(declare-fun smap$ap (A_b_a_prod_prod_b_a_prod_fun$ A_b_a_prod_prod_stream$) B_a_prod_stream$)
(declare-fun smap2$a (A_b_a_prod_a_fun_fun$ A_stream$ B_a_prod_stream$) A_stream$)
(declare-fun smap2$b (A_a_b_a_prod_fun_fun$ A_stream$ A_stream$) B_a_prod_stream$)
(declare-fun smap2$c (A_a_a_fun_fun$ A_stream$ A_stream$) A_stream$)
(declare-fun smap2$d (B_b_a_prod_b_a_prod_fun_fun$ B_stream$ B_a_prod_stream$) B_a_prod_stream$)
(declare-fun smap2$e (B_a_b_a_prod_fun_fun$ B_stream$ A_stream$) B_a_prod_stream$)
(declare-fun smap2$f (B_a_b_fun_fun$ B_stream$ A_stream$) B_stream$)
(declare-fun smap2$g (B_a_a_fun_fun$ B_stream$ A_stream$) A_stream$)
(declare-fun smap2$h (B_a_prod_a_a_fun_fun$ B_a_prod_stream$ A_stream$) A_stream$)
(declare-fun smap2$i (B_a_prod_a_b_a_prod_fun_fun$ B_a_prod_stream$ A_stream$) B_a_prod_stream$)
(declare-fun smap2$j (B_a_prod_b_a_prod_a_fun_fun$ B_a_prod_stream$ B_a_prod_stream$) A_stream$)
(declare-fun smap2$k (B_a_prod_b_a_prod_b_a_prod_fun_fun$ B_a_prod_stream$ B_a_prod_stream$) B_a_prod_stream$)
(declare-fun sndsp$a (A_a_prod$ A$) Bool)
(declare-fun sndsp$b (B_a_prod_b_a_prod_prod$ B_a_prod$) Bool)
(declare-fun sndsp$c (B_a_prod$ A$) Bool)
(declare-fun fun_app$ (B_a_prod_a_fun$ B_a_prod$) A$)
(declare-fun fun_app$a (B_a_prod_b_a_prod_prod_b_a_prod_fun$ B_a_prod_b_a_prod_prod$) B_a_prod$)
(declare-fun fun_app$b (B_b_b_a_prod_prod_prod_b_fun$ B_b_b_a_prod_prod_prod$) B$)
(declare-fun fun_app$c (B_b_a_prod_prod_b_fun$ B_b_a_prod_prod$) B$)
(declare-fun fun_app$d (B_b_prod_b_fun$ B_b_prod$) B$)
(declare-fun fun_app$e (B_a_prod_b_fun$ B_a_prod$) B$)
(declare-fun fun_app$f (A_b_b_a_prod_prod_prod_a_fun$ A_b_b_a_prod_prod_prod$) A$)
(declare-fun fun_app$g (A_b_a_prod_prod_a_fun$ A_b_a_prod_prod$) A$)
(declare-fun fun_app$h (A_b_prod_a_fun$ A_b_prod$) A$)
(declare-fun fun_app$i (A_a_prod_a_fun$ A_a_prod$) A$)
(declare-fun fun_app$j (B_a_prod_b_a_prod_fun$ B_a_prod$) B_a_prod$)
(declare-fun fun_app$k (B_b_a_prod_prod_b_a_prod_fun$ B_b_a_prod_prod$) B_a_prod$)
(declare-fun fun_app$l (B_a_prod_b_a_prod_prod_b_fun$ B_a_prod_b_a_prod_prod$) B$)
(declare-fun fun_app$m (B_a_prod_b_a_prod_prod_a_fun$ B_a_prod_b_a_prod_prod$) A$)
(declare-fun fun_app$n (B_b_a_prod_prod_a_fun$ B_b_a_prod_prod$) A$)
(declare-fun fun_app$o (A_b_a_prod_fun$ A$) B_a_prod$)
(declare-fun fun_app$p (A_b_fun$ A$) B$)
(declare-fun fun_app$q (A_a_fun$ A$) A$)
(declare-fun fun_app$r (B_a_a_fun_fun$ B$) A_a_fun$)
(declare-fun fun_app$s (B_a_b_a_prod_fun_fun_b_a_a_fun_fun_fun$ B_a_b_a_prod_fun_fun$) B_a_a_fun_fun$)
(declare-fun fun_app$t (B_a_b_a_prod_fun_fun$ B$) A_b_a_prod_fun$)
(declare-fun fun_app$u (B_a_a_fun_fun_b_a_a_fun_fun_fun$ B_a_a_fun_fun$) B_a_a_fun_fun$)
(declare-fun fun_app$v (B_b_fun$ B$) B$)
(declare-fun fun_app$w (A_a_fun_b_a_prod_b_a_prod_fun_fun$ A_a_fun$) B_a_prod_b_a_prod_fun$)
(declare-fun fun_app$x (B_a_fun$ B$) A$)
(declare-fun fun_app$y (A_b_a_prod_prod_a_a_prod_fun$ A_b_a_prod_prod$) A_a_prod$)
(declare-fun fun_app$z (B_a_prod_b_b_a_prod_prod_fun$ B_a_prod$) B_b_a_prod_prod$)
(declare-fun map_prod$ (B_b_fun$) A_a_fun_b_a_prod_b_a_prod_fun_fun$)
(declare-fun case_prod$ (A_b_a_prod_b_a_prod_fun_fun$) A_b_a_prod_prod_b_a_prod_fun$)
(declare-fun fun_app$aa (B_b_a_prod_prod_b_b_prod_fun$ B_b_a_prod_prod$) B_b_prod$)
(declare-fun fun_app$ab (A_a_prod_a_a_prod_fun$ A_a_prod$) A_a_prod$)
(declare-fun fun_app$ac (B_a_prod_b_a_prod_prod_b_a_prod_a_prod_fun$ B_a_prod_b_a_prod_prod$) B_a_prod_a_prod$)
(declare-fun fun_app$ad (B_b_a_prod_prod_b_b_a_prod_prod_fun$ B_b_a_prod_prod$) B_b_a_prod_prod$)
(declare-fun fun_app$ae (B_a_prod_b_a_prod_prod_a_a_prod_fun$ B_a_prod_b_a_prod_prod$) A_a_prod$)
(declare-fun fun_app$af (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$ag (A_a_b_a_prod_fun_fun$ A$) A_b_a_prod_fun$)
(declare-fun fun_app$ah (A_b_a_prod_a_fun_fun$ A$) B_a_prod_a_fun$)
(declare-fun fun_app$ai (A_b_a_prod_b_a_prod_fun_fun$ A$) B_a_prod_b_a_prod_fun$)
(declare-fun fun_app$aj (B_a_prod_a_a_fun_fun$ B_a_prod$) A_a_fun$)
(declare-fun fun_app$ak (B_a_prod_a_b_a_prod_fun_fun$ B_a_prod$) A_b_a_prod_fun$)
(declare-fun fun_app$al (B_a_prod_b_a_prod_a_fun_fun$ B_a_prod$) B_a_prod_a_fun$)
(declare-fun fun_app$am (B_a_prod_b_a_prod_b_a_prod_fun_fun$ B_a_prod$) B_a_prod_b_a_prod_fun$)
(declare-fun map_prod$a (B_a_prod_a_fun$ B_a_prod_a_fun$) B_a_prod_b_a_prod_prod_a_a_prod_fun$)
(declare-fun map_prod$b (A_b_fun$ A_a_fun$) A_a_prod_b_a_prod_fun$)
(declare-fun map_prod$c (B_a_fun$ A_a_fun$) B_a_prod_a_a_prod_fun$)
(declare-fun map_prod$d (B_b_fun$ B_b_fun$) B_b_prod_b_b_prod_fun$)
(declare-fun map_prod$e (A_a_fun$ B_b_fun$) A_b_prod_a_b_prod_fun$)
(declare-fun map_prod$f (A_a_fun$ A_a_fun$) A_a_prod_a_a_prod_fun$)
(declare-fun map_prod$g (A_b_fun$ A_b_a_prod_fun$) A_a_prod_b_b_a_prod_prod_fun$)
(declare-fun map_prod$h (B_a_fun$ B_a_prod_a_fun$) B_b_a_prod_prod_a_a_prod_fun$)
(declare-fun map_prod$i (B_a_prod_a_fun$ B_b_fun$) B_a_prod_b_prod_a_b_prod_fun$)
(declare-fun case_prod$a (A_b_a_prod_a_fun_fun$) A_b_a_prod_prod_a_fun$)
(declare-fun case_prod$b (A_a_b_a_prod_fun_fun$) A_a_prod_b_a_prod_fun$)
(declare-fun case_prod$c (A_a_a_fun_fun$) A_a_prod_a_fun$)
(declare-fun case_prod$d (B_b_a_prod_b_a_prod_fun_fun$) B_b_a_prod_prod_b_a_prod_fun$)
(declare-fun case_prod$e (B_a_b_a_prod_fun_fun$) B_a_prod_b_a_prod_fun$)
(declare-fun case_prod$f (B_a_b_fun_fun$) B_a_prod_b_fun$)
(declare-fun case_prod$g (B_a_a_fun_fun$) B_a_prod_a_fun$)
(assert (! (forall ((?v0 B_a_prod$)) (! (= (fun_app$ uu$ ?v0) (snd$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_prod$)) (! (= (fun_app$a uuh$ ?v0) (fst$f ?v0)) :pattern ((fun_app$a uuh$ ?v0)))) :named a1))
(assert (! (forall ((?v0 B_b_b_a_prod_prod_prod$)) (! (= (fun_app$b uua$ ?v0) (fst$h ?v0)) :pattern ((fun_app$b uua$ ?v0)))) :named a2))
(assert (! (forall ((?v0 B_b_a_prod_prod$)) (! (= (fun_app$c uuf$ ?v0) (fst$a ?v0)) :pattern ((fun_app$c uuf$ ?v0)))) :named a3))
(assert (! (forall ((?v0 B_b_prod$)) (! (= (fun_app$d uub$ ?v0) (fst$d ?v0)) :pattern ((fun_app$d uub$ ?v0)))) :named a4))
(assert (! (forall ((?v0 B_a_prod$)) (! (= (fun_app$e uui$ ?v0) (fst$ ?v0)) :pattern ((fun_app$e uui$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_b_b_a_prod_prod_prod$)) (! (= (fun_app$f uuc$ ?v0) (fst$i ?v0)) :pattern ((fun_app$f uuc$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_b_a_prod_prod$)) (! (= (fun_app$g uud$ ?v0) (fst$c ?v0)) :pattern ((fun_app$g uud$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$h uue$ ?v0) (fst$j ?v0)) :pattern ((fun_app$h uue$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_a_prod$)) (! (= (fun_app$i uug$ ?v0) (fst$b ?v0)) :pattern ((fun_app$i uug$ ?v0)))) :named a9))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_fun$) (?v1 B_a_prod_b_a_prod_prod$)) (! (= (fun_app$a (uus$ ?v0) ?v1) (fun_app$j ?v0 (snd$f ?v1))) :pattern ((fun_app$a (uus$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_fun$) (?v1 B_b_a_prod_prod$)) (! (= (fun_app$k (uur$ ?v0) ?v1) (fun_app$j ?v0 (snd$a ?v1))) :pattern ((fun_app$k (uur$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 B_a_prod_b_fun$) (?v1 B_a_prod_b_a_prod_prod$)) (! (= (fun_app$l (uuq$ ?v0) ?v1) (fun_app$e ?v0 (snd$f ?v1))) :pattern ((fun_app$l (uuq$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 B_a_prod_b_fun$) (?v1 B_b_a_prod_prod$)) (! (= (fun_app$c (uun$ ?v0) ?v1) (fun_app$e ?v0 (snd$a ?v1))) :pattern ((fun_app$c (uun$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_a_prod_b_a_prod_prod$)) (! (= (fun_app$m (uup$ ?v0) ?v1) (fun_app$ ?v0 (snd$f ?v1))) :pattern ((fun_app$m (uup$ ?v0) ?v1)))) :named a14))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_b_a_prod_prod$)) (! (= (fun_app$n (uum$ ?v0) ?v1) (fun_app$ ?v0 (snd$a ?v1))) :pattern ((fun_app$n (uum$ ?v0) ?v1)))) :named a15))
(assert (! (forall ((?v0 A_b_a_prod_fun$) (?v1 B_a_prod$)) (! (= (fun_app$j (uuo$ ?v0) ?v1) (fun_app$o ?v0 (snd$ ?v1))) :pattern ((fun_app$j (uuo$ ?v0) ?v1)))) :named a16))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_prod$)) (! (= (fun_app$e (uul$ ?v0) ?v1) (fun_app$p ?v0 (snd$ ?v1))) :pattern ((fun_app$e (uul$ ?v0) ?v1)))) :named a17))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_prod$)) (! (= (fun_app$ (uuj$ ?v0) ?v1) (fun_app$q ?v0 (snd$ ?v1))) :pattern ((fun_app$ (uuj$ ?v0) ?v1)))) :named a18))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_prod$)) (! (= (fun_app$i (uuk$ ?v0) ?v1) (fun_app$q ?v0 (snd$b ?v1))) :pattern ((fun_app$i (uuk$ ?v0) ?v1)))) :named a19))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_a_b_a_prod_fun_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$q (fun_app$r (fun_app$s (uuw$ ?v0) ?v1) ?v2) ?v3) (fun_app$ ?v0 (fun_app$o (fun_app$t ?v1 ?v2) ?v3))) :pattern ((fun_app$q (fun_app$r (fun_app$s (uuw$ ?v0) ?v1) ?v2) ?v3)))) :named a20))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_a_fun_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$q (fun_app$r (fun_app$u (uux$ ?v0) ?v1) ?v2) ?v3) (fun_app$q ?v0 (fun_app$q (fun_app$r ?v1 ?v2) ?v3))) :pattern ((fun_app$q (fun_app$r (fun_app$u (uux$ ?v0) ?v1) ?v2) ?v3)))) :named a21))
(assert (! (forall ((?v0 B_a_prod$)) (! (= (fun_app$j uut$ ?v0) ?v0) :pattern ((fun_app$j uut$ ?v0)))) :named a22))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$v uuu$ ?v0) ?v0) :pattern ((fun_app$v uuu$ ?v0)))) :named a23))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$q uuv$ ?v0) ?v0) :pattern ((fun_app$q uuv$ ?v0)))) :named a24))
(assert (! (not (= (smap$ uu$ (szip$ xs$ ys$)) ys$)) :named a25))
(assert (! (forall ((?v0 B_stream$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (szip$ ?v0 (smap$a ?v1 ?v2)) (smap$b (apsnd$ ?v1) (szip$ ?v0 ?v2)))) :named a26))
(assert (! (forall ((?v0 B_stream$) (?v1 B_a_prod_a_fun$) (?v2 B_a_prod_stream$)) (= (szip$ ?v0 (smap$ ?v1 ?v2)) (smap$c (apsnd$a ?v1) (szip$a ?v0 ?v2)))) :named a27))
(assert (! (forall ((?v0 A_stream$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (szip$b ?v0 (smap$a ?v1 ?v2)) (smap$d (apsnd$b ?v1) (szip$b ?v0 ?v2)))) :named a28))
(assert (! (forall ((?v0 B_stream$) (?v1 A_b_a_prod_fun$) (?v2 A_stream$)) (= (szip$a ?v0 (smap$e ?v1 ?v2)) (smap$f (apsnd$c ?v1) (szip$ ?v0 ?v2)))) :named a29))
(assert (! (forall ((?v0 A_stream$) (?v1 B_a_prod_a_fun$) (?v2 B_a_prod_stream$)) (= (szip$b ?v0 (smap$ ?v1 ?v2)) (smap$g (apsnd$d ?v1) (szip$c ?v0 ?v2)))) :named a30))
(assert (! (forall ((?v0 B_stream$) (?v1 B_a_prod_b_fun$) (?v2 B_a_prod_stream$)) (= (szip$d ?v0 (smap$h ?v1 ?v2)) (smap$i (apsnd$e ?v1) (szip$a ?v0 ?v2)))) :named a31))
(assert (! (forall ((?v0 B_a_prod_stream$) (?v1 B_a_prod_a_fun$) (?v2 B_a_prod_stream$)) (= (szip$e ?v0 (smap$ ?v1 ?v2)) (smap$j (apsnd$f ?v1) (szip$f ?v0 ?v2)))) :named a32))
(assert (! (forall ((?v0 B_stream$) (?v1 B_a_prod_b_a_prod_fun$) (?v2 B_a_prod_stream$)) (= (szip$a ?v0 (smap$b ?v1 ?v2)) (smap$k (apsnd$g ?v1) (szip$a ?v0 ?v2)))) :named a33))
(assert (! (forall ((?v0 B_a_prod_stream$) (?v1 B_a_prod_b_fun$) (?v2 B_a_prod_stream$)) (= (szip$g ?v0 (smap$h ?v1 ?v2)) (smap$l (apsnd$h ?v1) (szip$f ?v0 ?v2)))) :named a34))
(assert (! (forall ((?v0 B_stream$) (?v1 B_b_a_prod_prod_b_a_prod_fun$) (?v2 B_b_a_prod_prod_stream$)) (= (szip$a ?v0 (smap$c ?v1 ?v2)) (smap$m (apsnd$i ?v1) (szip$h ?v0 ?v2)))) :named a35))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$) (?v2 A_stream$)) (= (szip$ (smap$n ?v0 ?v1) ?v2) (smap$b (apfst$ ?v0) (szip$ ?v1 ?v2)))) :named a36))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (szip$ (smap$o ?v0 ?v1) ?v2) (smap$p (apfst$a ?v0) (szip$b ?v1 ?v2)))) :named a37))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$) (?v2 A_stream$)) (= (szip$b (smap$q ?v0 ?v1) ?v2) (smap$r (apfst$b ?v0) (szip$ ?v1 ?v2)))) :named a38))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (szip$b (smap$a ?v0 ?v1) ?v2) (smap$d (apfst$c ?v0) (szip$b ?v1 ?v2)))) :named a39))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_a_prod_stream$) (?v2 A_stream$)) (= (szip$b (smap$ ?v0 ?v1) ?v2) (smap$s (apfst$d ?v0) (szip$e ?v1 ?v2)))) :named a40))
(assert (! (forall ((?v0 B_a_prod_b_fun$) (?v1 B_a_prod_stream$) (?v2 A_stream$)) (= (szip$ (smap$h ?v0 ?v1) ?v2) (smap$t (apfst$e ?v0) (szip$e ?v1 ?v2)))) :named a41))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$) (?v2 B_a_prod_stream$)) (= (szip$a (smap$n ?v0 ?v1) ?v2) (smap$k (apfst$f ?v0) (szip$a ?v1 ?v2)))) :named a42))
(assert (! (forall ((?v0 B_b_a_prod_fun$) (?v1 B_stream$) (?v2 B_a_prod_stream$)) (= (szip$f (smap$u ?v0 ?v1) ?v2) (smap$v (apfst$g ?v0) (szip$a ?v1 ?v2)))) :named a43))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_a_prod_stream$) (?v2 B_a_prod_stream$)) (= (szip$c (smap$ ?v0 ?v1) ?v2) (smap$w (apfst$h ?v0) (szip$f ?v1 ?v2)))) :named a44))
(assert (! (forall ((?v0 B_a_prod_b_fun$) (?v1 B_a_prod_stream$) (?v2 B_a_prod_stream$)) (= (szip$a (smap$h ?v0 ?v1) ?v2) (smap$x (apfst$i ?v0) (szip$f ?v1 ?v2)))) :named a45))
(assert (! (forall ((?v0 B_stream$) (?v1 B_b_a_prod_prod_stream$)) (= (smap$y uua$ (szip$h ?v0 ?v1)) ?v0)) :named a46))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream$)) (= (smap$z uub$ (szip$d ?v0 ?v1)) ?v0)) :named a47))
(assert (! (forall ((?v0 A_stream$) (?v1 B_b_a_prod_prod_stream$)) (= (smap$aa uuc$ (szip$i ?v0 ?v1)) ?v0)) :named a48))
(assert (! (forall ((?v0 A_stream$) (?v1 B_a_prod_stream$)) (= (smap$ab uud$ (szip$c ?v0 ?v1)) ?v0)) :named a49))
(assert (! (forall ((?v0 A_stream$) (?v1 B_stream$)) (= (smap$ac uue$ (szip$j ?v0 ?v1)) ?v0)) :named a50))
(assert (! (forall ((?v0 B_stream$) (?v1 B_a_prod_stream$)) (= (smap$ad uuf$ (szip$a ?v0 ?v1)) ?v0)) :named a51))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$)) (= (smap$ae uug$ (szip$b ?v0 ?v1)) ?v0)) :named a52))
(assert (! (forall ((?v0 B_a_prod_stream$) (?v1 B_a_prod_stream$)) (= (smap$af uuh$ (szip$f ?v0 ?v1)) ?v0)) :named a53))
(assert (! (forall ((?v0 B_stream$) (?v1 A_stream$)) (= (smap$h uui$ (szip$ ?v0 ?v1)) ?v0)) :named a54))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$) (?v2 A_a_fun$) (?v3 A_stream$)) (= (szip$ (smap$n ?v0 ?v1) (smap$a ?v2 ?v3)) (smap$b (fun_app$w (map_prod$ ?v0) ?v2) (szip$ ?v1 ?v3)))) :named a55))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_a_prod_stream$) (?v2 B_a_prod_a_fun$) (?v3 B_a_prod_stream$)) (= (szip$b (smap$ ?v0 ?v1) (smap$ ?v2 ?v3)) (smap$ag (map_prod$a ?v0 ?v2) (szip$f ?v1 ?v3)))) :named a56))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_stream$) (?v2 A_a_fun$) (?v3 A_stream$)) (= (szip$ (smap$o ?v0 ?v1) (smap$a ?v2 ?v3)) (smap$p (map_prod$b ?v0 ?v2) (szip$b ?v1 ?v3)))) :named a57))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$) (?v2 A_a_fun$) (?v3 A_stream$)) (= (szip$b (smap$q ?v0 ?v1) (smap$a ?v2 ?v3)) (smap$r (map_prod$c ?v0 ?v2) (szip$ ?v1 ?v3)))) :named a58))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$) (?v2 B_b_fun$) (?v3 B_stream$)) (= (szip$d (smap$n ?v0 ?v1) (smap$n ?v2 ?v3)) (smap$ah (map_prod$d ?v0 ?v2) (szip$d ?v1 ?v3)))) :named a59))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 B_b_fun$) (?v3 B_stream$)) (= (szip$j (smap$a ?v0 ?v1) (smap$n ?v2 ?v3)) (smap$ai (map_prod$e ?v0 ?v2) (szip$j ?v1 ?v3)))) :named a60))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A_a_fun$) (?v3 A_stream$)) (= (szip$b (smap$a ?v0 ?v1) (smap$a ?v2 ?v3)) (smap$d (map_prod$f ?v0 ?v2) (szip$b ?v1 ?v3)))) :named a61))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_stream$) (?v2 A_b_a_prod_fun$) (?v3 A_stream$)) (= (szip$a (smap$o ?v0 ?v1) (smap$e ?v2 ?v3)) (smap$aj (map_prod$g ?v0 ?v2) (szip$b ?v1 ?v3)))) :named a62))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$) (?v2 B_a_prod_a_fun$) (?v3 B_a_prod_stream$)) (= (szip$b (smap$q ?v0 ?v1) (smap$ ?v2 ?v3)) (smap$ak (map_prod$h ?v0 ?v2) (szip$a ?v1 ?v3)))) :named a63))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_a_prod_stream$) (?v2 B_b_fun$) (?v3 B_stream$)) (= (szip$j (smap$ ?v0 ?v1) (smap$n ?v2 ?v3)) (smap$al (map_prod$i ?v0 ?v2) (szip$g ?v1 ?v3)))) :named a64))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_stream$) (?v2 A_stream$)) (= (smap$ (uuj$ ?v0) (szip$ ?v1 ?v2)) (smap$a ?v0 ?v2))) :named a65))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (smap$ae (uuk$ ?v0) (szip$b ?v1 ?v2)) (smap$a ?v0 ?v2))) :named a66))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_stream$) (?v2 A_stream$)) (= (smap$h (uul$ ?v0) (szip$ ?v1 ?v2)) (smap$o ?v0 ?v2))) :named a67))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_stream$) (?v2 B_a_prod_stream$)) (= (smap$am (uum$ ?v0) (szip$a ?v1 ?v2)) (smap$ ?v0 ?v2))) :named a68))
(assert (! (forall ((?v0 B_a_prod_b_fun$) (?v1 B_stream$) (?v2 B_a_prod_stream$)) (= (smap$ad (uun$ ?v0) (szip$a ?v1 ?v2)) (smap$h ?v0 ?v2))) :named a69))
(assert (! (forall ((?v0 A_b_a_prod_fun$) (?v1 B_stream$) (?v2 A_stream$)) (= (smap$b (uuo$ ?v0) (szip$ ?v1 ?v2)) (smap$e ?v0 ?v2))) :named a70))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_a_prod_stream$) (?v2 B_a_prod_stream$)) (= (smap$an (uup$ ?v0) (szip$f ?v1 ?v2)) (smap$ ?v0 ?v2))) :named a71))
(assert (! (forall ((?v0 B_a_prod_b_fun$) (?v1 B_a_prod_stream$) (?v2 B_a_prod_stream$)) (= (smap$ao (uuq$ ?v0) (szip$f ?v1 ?v2)) (smap$h ?v0 ?v2))) :named a72))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_fun$) (?v1 B_stream$) (?v2 B_a_prod_stream$)) (= (smap$c (uur$ ?v0) (szip$a ?v1 ?v2)) (smap$b ?v0 ?v2))) :named a73))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_fun$) (?v1 B_a_prod_stream$) (?v2 B_a_prod_stream$)) (= (smap$af (uus$ ?v0) (szip$f ?v1 ?v2)) (smap$b ?v0 ?v2))) :named a74))
(assert (! (forall ((?v0 B_b_a_prod_prod$) (?v1 B_a_prod$)) (! (= (sndsp$ ?v0 ?v1) (= ?v1 (snd$a ?v0))) :pattern ((sndsp$ ?v0 ?v1)))) :named a75))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A$)) (! (= (sndsp$a ?v0 ?v1) (= ?v1 (snd$b ?v0))) :pattern ((sndsp$a ?v0 ?v1)))) :named a76))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_prod$) (?v1 B_a_prod$)) (! (= (sndsp$b ?v0 ?v1) (= ?v1 (snd$f ?v0))) :pattern ((sndsp$b ?v0 ?v1)))) :named a77))
(assert (! (forall ((?v0 B_a_prod$) (?v1 A$)) (! (= (sndsp$c ?v0 ?v1) (= ?v1 (snd$ ?v0))) :pattern ((sndsp$c ?v0 ?v1)))) :named a78))
(assert (! (forall ((?v0 B_b_a_prod_prod$) (?v1 B_a_prod$)) (=> (and (sndsp$ ?v0 ?v1) (=> (= ?v1 (snd$a ?v0)) false)) false)) :named a79))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A$)) (=> (and (sndsp$a ?v0 ?v1) (=> (= ?v1 (snd$b ?v0)) false)) false)) :named a80))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_prod$) (?v1 B_a_prod$)) (=> (and (sndsp$b ?v0 ?v1) (=> (= ?v1 (snd$f ?v0)) false)) false)) :named a81))
(assert (! (forall ((?v0 B_a_prod$) (?v1 A$)) (=> (and (sndsp$c ?v0 ?v1) (=> (= ?v1 (snd$ ?v0)) false)) false)) :named a82))
(assert (! (forall ((?v0 B_b_a_prod_prod$)) (sndsp$ ?v0 (snd$a ?v0))) :named a83))
(assert (! (forall ((?v0 A_a_prod$)) (sndsp$a ?v0 (snd$b ?v0))) :named a84))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_prod$)) (sndsp$b ?v0 (snd$f ?v0))) :named a85))
(assert (! (forall ((?v0 B_a_prod$)) (sndsp$c ?v0 (snd$ ?v0))) :named a86))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_a_prod_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (smap$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (exists ((?v4 B_a_prod$) (?v5 B_a_prod_stream$)) (and (= ?v1 (sCons$a ?v4 ?v5)) (and (= ?v2 (fun_app$ ?v0 ?v4)) (= ?v3 (smap$ ?v0 ?v5))))))) :named a87))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$) (?v2 B$) (?v3 B_stream$)) (= (= (smap$n ?v0 ?v1) (sCons$b ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_stream$)) (and (= ?v1 (sCons$b ?v4 ?v5)) (and (= ?v2 (fun_app$v ?v0 ?v4)) (= ?v3 (smap$n ?v0 ?v5))))))) :named a88))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (smap$a ?v0 ?v1) (sCons$ ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v1 (sCons$ ?v4 ?v5)) (and (= ?v2 (fun_app$q ?v0 ?v4)) (= ?v3 (smap$a ?v0 ?v5))))))) :named a89))
(assert (! (forall ((?v0 B_a_prod_b_fun$) (?v1 B_a_prod_stream$) (?v2 B$) (?v3 B_stream$)) (= (= (smap$h ?v0 ?v1) (sCons$b ?v2 ?v3)) (exists ((?v4 B_a_prod$) (?v5 B_a_prod_stream$)) (and (= ?v1 (sCons$a ?v4 ?v5)) (and (= ?v2 (fun_app$e ?v0 ?v4)) (= ?v3 (smap$h ?v0 ?v5))))))) :named a90))
(assert (! (forall ((?v0 A_b_a_prod_fun$) (?v1 A_stream$) (?v2 B_a_prod$) (?v3 B_a_prod_stream$)) (= (= (smap$e ?v0 ?v1) (sCons$a ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v1 (sCons$ ?v4 ?v5)) (and (= ?v2 (fun_app$o ?v0 ?v4)) (= ?v3 (smap$e ?v0 ?v5))))))) :named a91))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_fun$) (?v1 B_a_prod_stream$) (?v2 B_a_prod$) (?v3 B_a_prod_stream$)) (= (= (smap$b ?v0 ?v1) (sCons$a ?v2 ?v3)) (exists ((?v4 B_a_prod$) (?v5 B_a_prod_stream$)) (and (= ?v1 (sCons$a ?v4 ?v5)) (and (= ?v2 (fun_app$j ?v0 ?v4)) (= ?v3 (smap$b ?v0 ?v5))))))) :named a92))
(assert (! (forall ((?v0 B_b_a_prod_prod_b_a_prod_fun$) (?v1 B_b_a_prod_prod_stream$) (?v2 B_a_prod$) (?v3 B_a_prod_stream$)) (= (= (smap$c ?v0 ?v1) (sCons$a ?v2 ?v3)) (exists ((?v4 B_b_a_prod_prod$) (?v5 B_b_a_prod_prod_stream$)) (and (= ?v1 (sCons$c ?v4 ?v5)) (and (= ?v2 (fun_app$k ?v0 ?v4)) (= ?v3 (smap$c ?v0 ?v5))))))) :named a93))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (smap$q ?v0 ?v1) (sCons$ ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_stream$)) (and (= ?v1 (sCons$b ?v4 ?v5)) (and (= ?v2 (fun_app$x ?v0 ?v4)) (= ?v3 (smap$q ?v0 ?v5))))))) :named a94))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_stream$) (?v2 B$) (?v3 B_stream$)) (= (= (smap$o ?v0 ?v1) (sCons$b ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v1 (sCons$ ?v4 ?v5)) (and (= ?v2 (fun_app$p ?v0 ?v4)) (= ?v3 (smap$o ?v0 ?v5))))))) :named a95))
(assert (! (forall ((?v0 A_a_prod_a_fun$) (?v1 A_a_prod_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (smap$ae ?v0 ?v1) (sCons$ ?v2 ?v3)) (exists ((?v4 A_a_prod$) (?v5 A_a_prod_stream$)) (and (= ?v1 (sCons$d ?v4 ?v5)) (and (= ?v2 (fun_app$i ?v0 ?v4)) (= ?v3 (smap$ae ?v0 ?v5))))))) :named a96))
(assert (! (forall ((?v0 A_b_a_prod_b_a_prod_fun_fun$) (?v1 A_stream$) (?v2 B_a_prod_stream$)) (! (= (smap2$ ?v0 ?v1 ?v2) (smap$ap (case_prod$ ?v0) (szip$c ?v1 ?v2))) :pattern ((smap2$ ?v0 ?v1 ?v2)))) :named a97))
(assert (! (forall ((?v0 A_b_a_prod_a_fun_fun$) (?v1 A_stream$) (?v2 B_a_prod_stream$)) (! (= (smap2$a ?v0 ?v1 ?v2) (smap$ab (case_prod$a ?v0) (szip$c ?v1 ?v2))) :pattern ((smap2$a ?v0 ?v1 ?v2)))) :named a98))
(assert (! (forall ((?v0 A_a_b_a_prod_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (! (= (smap2$b ?v0 ?v1 ?v2) (smap$p (case_prod$b ?v0) (szip$b ?v1 ?v2))) :pattern ((smap2$b ?v0 ?v1 ?v2)))) :named a99))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (! (= (smap2$c ?v0 ?v1 ?v2) (smap$ae (case_prod$c ?v0) (szip$b ?v1 ?v2))) :pattern ((smap2$c ?v0 ?v1 ?v2)))) :named a100))
(assert (! (forall ((?v0 B_b_a_prod_b_a_prod_fun_fun$) (?v1 B_stream$) (?v2 B_a_prod_stream$)) (! (= (smap2$d ?v0 ?v1 ?v2) (smap$c (case_prod$d ?v0) (szip$a ?v1 ?v2))) :pattern ((smap2$d ?v0 ?v1 ?v2)))) :named a101))
(assert (! (forall ((?v0 B_a_b_a_prod_fun_fun$) (?v1 B_stream$) (?v2 A_stream$)) (! (= (smap2$e ?v0 ?v1 ?v2) (smap$b (case_prod$e ?v0) (szip$ ?v1 ?v2))) :pattern ((smap2$e ?v0 ?v1 ?v2)))) :named a102))
(assert (! (forall ((?v0 B_a_b_fun_fun$) (?v1 B_stream$) (?v2 A_stream$)) (! (= (smap2$f ?v0 ?v1 ?v2) (smap$h (case_prod$f ?v0) (szip$ ?v1 ?v2))) :pattern ((smap2$f ?v0 ?v1 ?v2)))) :named a103))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B_stream$) (?v2 A_stream$)) (! (= (smap2$g ?v0 ?v1 ?v2) (smap$ (case_prod$g ?v0) (szip$ ?v1 ?v2))) :pattern ((smap2$g ?v0 ?v1 ?v2)))) :named a104))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 A_b_a_prod_prod$) (?v2 B_a_prod_a_fun$)) (= (= (fun_app$y (apsnd$d ?v0) ?v1) (fun_app$y (apsnd$d ?v2) ?v1)) (= (fun_app$ ?v0 (snd$c ?v1)) (fun_app$ ?v2 (snd$c ?v1))))) :named a105))
(assert (! (forall ((?v0 A_b_a_prod_fun$) (?v1 B_a_prod$) (?v2 A_b_a_prod_fun$)) (= (= (fun_app$z (apsnd$c ?v0) ?v1) (fun_app$z (apsnd$c ?v2) ?v1)) (= (fun_app$o ?v0 (snd$ ?v1)) (fun_app$o ?v2 (snd$ ?v1))))) :named a106))
(assert (! (forall ((?v0 B_a_prod_b_fun$) (?v1 B_b_a_prod_prod$) (?v2 B_a_prod_b_fun$)) (= (= (fun_app$aa (apsnd$e ?v0) ?v1) (fun_app$aa (apsnd$e ?v2) ?v1)) (= (fun_app$e ?v0 (snd$a ?v1)) (fun_app$e ?v2 (snd$a ?v1))))) :named a107))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_prod$) (?v2 A_a_fun$)) (= (= (fun_app$ab (apsnd$b ?v0) ?v1) (fun_app$ab (apsnd$b ?v2) ?v1)) (= (fun_app$q ?v0 (snd$b ?v1)) (fun_app$q ?v2 (snd$b ?v1))))) :named a108))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_a_prod_b_a_prod_prod$) (?v2 B_a_prod_a_fun$)) (= (= (fun_app$ac (apsnd$f ?v0) ?v1) (fun_app$ac (apsnd$f ?v2) ?v1)) (= (fun_app$ ?v0 (snd$f ?v1)) (fun_app$ ?v2 (snd$f ?v1))))) :named a109))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_b_a_prod_prod$) (?v2 B_a_prod_a_fun$)) (= (= (fun_app$k (apsnd$a ?v0) ?v1) (fun_app$k (apsnd$a ?v2) ?v1)) (= (fun_app$ ?v0 (snd$a ?v1)) (fun_app$ ?v2 (snd$a ?v1))))) :named a110))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_prod$) (?v2 A_a_fun$)) (= (= (fun_app$j (apsnd$ ?v0) ?v1) (fun_app$j (apsnd$ ?v2) ?v1)) (= (fun_app$q ?v0 (snd$ ?v1)) (fun_app$q ?v2 (snd$ ?v1))))) :named a111))
(assert (! (forall ((?v0 B_a_prod_b_fun$) (?v1 B_b_a_prod_prod$)) (= (snd$d (fun_app$aa (apsnd$e ?v0) ?v1)) (fun_app$e ?v0 (snd$a ?v1)))) :named a112))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_a_prod_b_a_prod_prod$)) (= (snd$e (fun_app$ac (apsnd$f ?v0) ?v1)) (fun_app$ ?v0 (snd$f ?v1)))) :named a113))
(assert (! (forall ((?v0 A_b_a_prod_fun$) (?v1 B_a_prod$)) (= (snd$a (fun_app$z (apsnd$c ?v0) ?v1)) (fun_app$o ?v0 (snd$ ?v1)))) :named a114))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_fun$) (?v1 B_b_a_prod_prod$)) (= (snd$a (fun_app$ad (apsnd$g ?v0) ?v1)) (fun_app$j ?v0 (snd$a ?v1)))) :named a115))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 A_b_a_prod_prod$)) (= (snd$b (fun_app$y (apsnd$d ?v0) ?v1)) (fun_app$ ?v0 (snd$c ?v1)))) :named a116))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_prod$)) (= (snd$b (fun_app$ab (apsnd$b ?v0) ?v1)) (fun_app$q ?v0 (snd$b ?v1)))) :named a117))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_fun$) (?v1 B_a_prod_b_a_prod_prod$)) (= (snd$f (apsnd$j ?v0 ?v1)) (fun_app$j ?v0 (snd$f ?v1)))) :named a118))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_b_a_prod_prod$)) (= (snd$ (fun_app$k (apsnd$a ?v0) ?v1)) (fun_app$ ?v0 (snd$a ?v1)))) :named a119))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_prod$)) (= (snd$ (fun_app$j (apsnd$ ?v0) ?v1)) (fun_app$q ?v0 (snd$ ?v1)))) :named a120))
(assert (! (forall ((?v0 B$) (?v1 B_stream$) (?v2 B$) (?v3 B_stream$)) (= (= (sCons$b ?v0 ?v1) (sCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a121))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a122))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_stream$) (?v2 B_a_prod$) (?v3 B_a_prod_stream$)) (= (= (sCons$a ?v0 ?v1) (sCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a123))
(assert (! (forall ((?v0 B_a_prod_stream$)) (= (smap$b uut$ ?v0) ?v0)) :named a124))
(assert (! (forall ((?v0 B_stream$)) (= (smap$n uuu$ ?v0) ?v0)) :named a125))
(assert (! (forall ((?v0 A_stream$)) (= (smap$a uuv$ ?v0) ?v0)) :named a126))
(assert (! (forall ((?v0 B_a_prod$)) (= (fun_app$j (fun_app$w (map_prod$ uuu$) uuv$) ?v0) ?v0)) :named a127))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_a_prod_a_fun$) (?v2 B_a_prod_b_a_prod_prod$)) (= (fst$b (fun_app$ae (map_prod$a ?v0 ?v1) ?v2)) (fun_app$ ?v0 (fst$f ?v2)))) :named a128))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_a_fun$) (?v2 B_a_prod$)) (= (fst$ (fun_app$j (fun_app$w (map_prod$ ?v0) ?v1) ?v2)) (fun_app$v ?v0 (fst$ ?v2)))) :named a129))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_a_prod_a_fun$) (?v2 B_a_prod_b_a_prod_prod$)) (= (snd$b (fun_app$ae (map_prod$a ?v0 ?v1) ?v2)) (fun_app$ ?v1 (snd$f ?v2)))) :named a130))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_a_fun$) (?v2 B_a_prod$)) (= (snd$ (fun_app$j (fun_app$w (map_prod$ ?v0) ?v1) ?v2)) (fun_app$q ?v1 (snd$ ?v2)))) :named a131))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_b_a_prod_prod$)) (= (fst$ (fun_app$k (apsnd$a ?v0) ?v1)) (fst$a ?v1))) :named a132))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_prod$)) (= (fst$ (fun_app$j (apsnd$ ?v0) ?v1)) (fst$ ?v1))) :named a133))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_a_prod$) (?v2 B_b_fun$)) (= (= (fun_app$j (apfst$ ?v0) ?v1) (fun_app$j (apfst$ ?v2) ?v1)) (= (fun_app$v ?v0 (fst$ ?v1)) (fun_app$v ?v2 (fst$ ?v1))))) :named a134))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_a_prod$)) (= (fst$ (fun_app$j (apfst$ ?v0) ?v1)) (fun_app$v ?v0 (fst$ ?v1)))) :named a135))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_a_prod$)) (= (snd$ (fun_app$j (apfst$ ?v0) ?v1)) (snd$ ?v1))) :named a136))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_a_b_a_prod_fun_fun$) (?v2 B_stream$) (?v3 A_stream$)) (= (smap$ ?v0 (smap2$e ?v1 ?v2 ?v3)) (smap2$g (fun_app$s (uuw$ ?v0) ?v1) ?v2 ?v3))) :named a137))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_a_fun_fun$) (?v2 B_stream$) (?v3 A_stream$)) (= (smap$a ?v0 (smap2$g ?v1 ?v2 ?v3)) (smap2$g (fun_app$u (uux$ ?v0) ?v1) ?v2 ?v3))) :named a138))
(assert (! (forall ((?v0 B_a_prod_a_fun$) (?v1 B_b_fun$) (?v2 B_b_a_prod_prod$)) (= (fun_app$k (apsnd$a ?v0) (fun_app$ad (apfst$f ?v1) ?v2)) (fun_app$j (apfst$ ?v1) (fun_app$k (apsnd$a ?v0) ?v2)))) :named a139))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 B_a_prod$)) (= (fun_app$j (apsnd$ ?v0) (fun_app$j (apfst$ ?v1) ?v2)) (fun_app$j (apfst$ ?v1) (fun_app$j (apsnd$ ?v0) ?v2)))) :named a140))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B$) (?v2 B_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (smap2$g ?v0 (sCons$b ?v1 ?v2) (sCons$ ?v3 ?v4)) (sCons$ (fun_app$q (fun_app$r ?v0 ?v1) ?v3) (smap2$g ?v0 ?v2 ?v4))) :pattern ((smap2$g ?v0 (sCons$b ?v1 ?v2) (sCons$ ?v3 ?v4))))) :named a141))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A$) (?v2 A_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (smap2$c ?v0 (sCons$ ?v1 ?v2) (sCons$ ?v3 ?v4)) (sCons$ (fun_app$q (fun_app$af ?v0 ?v1) ?v3) (smap2$c ?v0 ?v2 ?v4))) :pattern ((smap2$c ?v0 (sCons$ ?v1 ?v2) (sCons$ ?v3 ?v4))))) :named a142))
(assert (! (forall ((?v0 A_a_b_a_prod_fun_fun$) (?v1 A$) (?v2 A_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (smap2$b ?v0 (sCons$ ?v1 ?v2) (sCons$ ?v3 ?v4)) (sCons$a (fun_app$o (fun_app$ag ?v0 ?v1) ?v3) (smap2$b ?v0 ?v2 ?v4))) :pattern ((smap2$b ?v0 (sCons$ ?v1 ?v2) (sCons$ ?v3 ?v4))))) :named a143))
(assert (! (forall ((?v0 A_b_a_prod_a_fun_fun$) (?v1 A$) (?v2 A_stream$) (?v3 B_a_prod$) (?v4 B_a_prod_stream$)) (! (= (smap2$a ?v0 (sCons$ ?v1 ?v2) (sCons$a ?v3 ?v4)) (sCons$ (fun_app$ (fun_app$ah ?v0 ?v1) ?v3) (smap2$a ?v0 ?v2 ?v4))) :pattern ((smap2$a ?v0 (sCons$ ?v1 ?v2) (sCons$a ?v3 ?v4))))) :named a144))
(assert (! (forall ((?v0 A_b_a_prod_b_a_prod_fun_fun$) (?v1 A$) (?v2 A_stream$) (?v3 B_a_prod$) (?v4 B_a_prod_stream$)) (! (= (smap2$ ?v0 (sCons$ ?v1 ?v2) (sCons$a ?v3 ?v4)) (sCons$a (fun_app$j (fun_app$ai ?v0 ?v1) ?v3) (smap2$ ?v0 ?v2 ?v4))) :pattern ((smap2$ ?v0 (sCons$ ?v1 ?v2) (sCons$a ?v3 ?v4))))) :named a145))
(assert (! (forall ((?v0 B_a_prod_a_a_fun_fun$) (?v1 B_a_prod$) (?v2 B_a_prod_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (smap2$h ?v0 (sCons$a ?v1 ?v2) (sCons$ ?v3 ?v4)) (sCons$ (fun_app$q (fun_app$aj ?v0 ?v1) ?v3) (smap2$h ?v0 ?v2 ?v4))) :pattern ((smap2$h ?v0 (sCons$a ?v1 ?v2) (sCons$ ?v3 ?v4))))) :named a146))
(assert (! (forall ((?v0 B_a_prod_a_b_a_prod_fun_fun$) (?v1 B_a_prod$) (?v2 B_a_prod_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (smap2$i ?v0 (sCons$a ?v1 ?v2) (sCons$ ?v3 ?v4)) (sCons$a (fun_app$o (fun_app$ak ?v0 ?v1) ?v3) (smap2$i ?v0 ?v2 ?v4))) :pattern ((smap2$i ?v0 (sCons$a ?v1 ?v2) (sCons$ ?v3 ?v4))))) :named a147))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_a_fun_fun$) (?v1 B_a_prod$) (?v2 B_a_prod_stream$) (?v3 B_a_prod$) (?v4 B_a_prod_stream$)) (! (= (smap2$j ?v0 (sCons$a ?v1 ?v2) (sCons$a ?v3 ?v4)) (sCons$ (fun_app$ (fun_app$al ?v0 ?v1) ?v3) (smap2$j ?v0 ?v2 ?v4))) :pattern ((smap2$j ?v0 (sCons$a ?v1 ?v2) (sCons$a ?v3 ?v4))))) :named a148))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_b_a_prod_fun_fun$) (?v1 B_a_prod$) (?v2 B_a_prod_stream$) (?v3 B_a_prod$) (?v4 B_a_prod_stream$)) (! (= (smap2$k ?v0 (sCons$a ?v1 ?v2) (sCons$a ?v3 ?v4)) (sCons$a (fun_app$j (fun_app$am ?v0 ?v1) ?v3) (smap2$k ?v0 ?v2 ?v4))) :pattern ((smap2$k ?v0 (sCons$a ?v1 ?v2) (sCons$a ?v3 ?v4))))) :named a149))
(check-sat)
;(get-unsat-core)
