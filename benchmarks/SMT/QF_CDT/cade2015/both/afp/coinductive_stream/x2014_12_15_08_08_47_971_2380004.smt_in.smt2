; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 366
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun p$ () A_stream_bool_fun$)
(declare-fun ev$ (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun uu$ () Nat_bool_fun$)
(declare-fun alw$ (A_stream_bool_fun$) A_stream_bool_fun$)
(declare-fun bot$ () Nat_set$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun sup$ (Nat_set$ Nat_set$) Nat_set$)
(declare-fun uua$ () A_stream_bool_fun$)
(declare-fun uub$ () Nat_bool_fun$)
(declare-fun uuc$ (Nat$) Nat_bool_fun$)
(declare-fun uud$ (Nat$) Nat_bool_fun$)
(declare-fun card$ (Nat_set$) Nat$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun zero$ () Nat$)
(declare-fun image$ (Nat_nat_fun$ Nat_set$) Nat_set$)
(declare-fun omega$ () A_stream$)
(declare-fun sdrop$ (Nat$ A_stream$) A_stream$)
(declare-fun finite$ (Nat_set$) Bool)
(declare-fun insert$ (Nat$ Nat_set$) Nat_set$)
(declare-fun member$ (Nat$ Nat_set$) Bool)
(declare-fun omega$a () A_stream$)
(declare-fun scount$ (A_stream_bool_fun$ A_stream$) Enat$)
(declare-fun collect$ (Nat_bool_fun$) Nat_set$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$a (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$b (Nat_nat_fun$ Nat$) Nat$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (fun_app$a p$ (sdrop$ ?v0 (stl$ omega$)))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uub$ ?v0) (fun_app$a p$ (sdrop$ ?v0 omega$))) :pattern ((fun_app$ uub$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$a uua$ ?v0) (not (fun_app$a p$ ?v0))) :pattern ((fun_app$a uua$ ?v0)))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (uuc$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (uud$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$ (uud$ ?v0) ?v1)))) :named a4))
(assert (! (not (finite$ (sup$ (ite (fun_app$a p$ omega$) (insert$ zero$ bot$) bot$) (image$ suc$ (collect$ uu$))))) :named a5))
(assert (! (finite$ (collect$ uu$)) :named a6))
(assert (! (ev$ (alw$ uua$) (stl$ omega$)) :named a7))
(assert (! (ev$ (alw$ uua$) omega$a) :named a8))
(assert (! (= (scount$ p$ (stl$ omega$)) (enat$ (card$ (collect$ uu$)))) :named a9))
(assert (! (= (collect$ uub$) (sup$ (ite (fun_app$a p$ omega$) (insert$ zero$ bot$) bot$) (image$ suc$ (collect$ uu$)))) :named a10))
(assert (! (= (scount$ p$ omega$) (enat$ (card$ (collect$ uub$)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (= (stl$ (sdrop$ ?v0 ?v1)) (sdrop$ (fun_app$b suc$ ?v0) ?v1))) :named a12))
(assert (! (forall ((?v0 Nat$)) (= (collect$ (uuc$ ?v0)) (insert$ ?v0 bot$))) :named a13))
(assert (! (forall ((?v0 Nat$)) (= (collect$ (uud$ ?v0)) (insert$ ?v0 bot$))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat_set$)) (= (sup$ (insert$ ?v0 ?v1) ?v2) (insert$ ?v0 (sup$ ?v1 ?v2)))) :named a15))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat$) (?v2 Nat_set$)) (= (sup$ ?v0 (insert$ ?v1 ?v2)) (insert$ ?v1 (sup$ ?v0 ?v2)))) :named a16))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set$)) (= (finite$ (sup$ ?v0 ?v1)) (and (finite$ ?v0) (finite$ ?v1)))) :named a17))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set$)) (= (= (sup$ ?v0 ?v1) bot$) (and (= ?v0 bot$) (= ?v1 bot$)))) :named a18))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat_set$)) (= (image$ ?v0 (insert$ ?v1 ?v2)) (insert$ (fun_app$b ?v0 ?v1) (image$ ?v0 ?v2)))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat_nat_fun$)) (=> (member$ ?v0 ?v1) (= (insert$ (fun_app$b ?v2 ?v0) (image$ ?v2 ?v1)) (image$ ?v2 ?v1)))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$)) (= (finite$ (insert$ ?v0 ?v1)) (finite$ ?v1))) :named a21))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_nat_fun$)) (=> (finite$ ?v0) (finite$ (image$ ?v1 ?v0)))) :named a22))
(check-sat)
;(get-unsat-core)
