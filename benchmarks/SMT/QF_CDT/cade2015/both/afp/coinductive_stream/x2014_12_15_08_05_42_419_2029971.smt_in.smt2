; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 235
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_a_prod_a_a_prod_fun$ 0)
(declare-sort A_llist_a_a_prod_llist_fun$ 0)
(declare-sort A_llist_a_a_prod_a_prod_llist_fun$ 0)
(declare-sort A_a_a_prod_prod_a_a_a_prod_prod_fun$ 0)
(declare-sort A_a_prod_a_prod_a_a_prod_a_prod_fun$ 0)
(declare-sort A_a_prod_llist_a_a_a_prod_prod_llist_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ 0)
(declare-sort A_a_prod_a_a_prod_prod_a_a_prod_a_a_prod_prod_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-datatypes () ((A_a_prod$ (pair$ (fst$ A$) (snd$ A$)))
  (A_a_prod_a_a_prod_prod$ (pair$a (fst$a A_a_prod$) (snd$a A_a_prod$)))))
(declare-codatatypes () ((A_a_prod_a_a_prod_prod_llist$ (lNil$a) (lCons$a (lhd$a A_a_prod_a_a_prod_prod$) (ltl$a A_a_prod_a_a_prod_prod_llist$)))
  (A_a_prod_a_a_prod_prod_stream$ (sCons$a (shd$a A_a_prod_a_a_prod_prod$) (stl$a A_a_prod_a_a_prod_prod_stream$)))))
(declare-datatypes () ((A_a_prod_a_prod$ (pair$b (fst$b A_a_prod$) (snd$b A$)))))
(declare-codatatypes () ((A_a_prod_a_prod_llist$ (lNil$b) (lCons$b (lhd$b A_a_prod_a_prod$) (ltl$b A_a_prod_a_prod_llist$)))
  (A_a_prod_a_prod_stream$ (sCons$b (shd$b A_a_prod_a_prod$) (stl$b A_a_prod_a_prod_stream$)))))
(declare-datatypes () ((A_a_a_prod_prod$ (pair$c (fst$c A$) (snd$c A_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_prod_llist$ (lNil$c) (lCons$c (lhd$c A_a_a_prod_prod$) (ltl$c A_a_a_prod_prod_llist$)))
  (A_a_a_prod_prod_stream$ (sCons$c (shd$c A_a_a_prod_prod$) (stl$c A_a_a_prod_prod_stream$)))
  (A_a_prod_llist$ (lNil$d) (lCons$d (lhd$d A_a_prod$) (ltl$d A_a_prod_llist$)))
  (A_a_prod_stream$ (sCons$d (shd$d A_a_prod$) (stl$d A_a_prod_stream$)))))
(declare-datatypes () ((A_a_a_prod_a_prod_prod$ (pair$d (fst$d A$) (snd$d A_a_prod_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_a_prod_prod_llist$ (lNil$e) (lCons$e (lhd$e A_a_a_prod_a_prod_prod$) (ltl$e A_a_a_prod_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_a_a_prod_prod_prod$ (pair$e (fst$e A$) (snd$e A_a_a_prod_prod$)))))
(declare-codatatypes () ((A_a_a_a_prod_prod_prod_llist$ (lNil$f) (lCons$f (lhd$f A_a_a_a_prod_prod_prod$) (ltl$f A_a_a_a_prod_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_prod_a_prod$ (pair$f (fst$f A_a_prod_a_prod$) (snd$f A$)))))
(declare-codatatypes () ((A_a_prod_a_prod_a_prod_llist$ (lNil$g) (lCons$g (lhd$g A_a_prod_a_prod_a_prod$) (ltl$g A_a_prod_a_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod_a_prod$ (pair$g (fst$g A_a_a_prod_prod$) (snd$g A$)))))
(declare-codatatypes () ((A_a_a_prod_prod_a_prod_llist$ (lNil$h) (lCons$h (lhd$h A_a_a_prod_prod_a_prod$) (ltl$h A_a_a_prod_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_a_a_prod_prod_prod$ (pair$h (fst$h A$) (snd$h A_a_prod_a_a_prod_prod$)))))
(declare-codatatypes () ((A_a_a_prod_a_a_prod_prod_prod_llist$ (lNil$i) (lCons$i (lhd$i A_a_a_prod_a_a_prod_prod_prod$) (ltl$i A_a_a_prod_a_a_prod_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_a_prod_a_prod_prod$ (pair$i (fst$i A_a_prod$) (snd$i A_a_prod_a_prod$)))))
(declare-codatatypes () ((A_a_prod_a_a_prod_a_prod_prod_llist$ (lNil$j) (lCons$j (lhd$j A_a_prod_a_a_prod_a_prod_prod$) (ltl$j A_a_prod_a_a_prod_a_prod_prod_llist$)))))
(declare-fun xs$ () A_stream$)
(declare-fun lzip$ (A_llist$) A_llist_a_a_prod_llist_fun$)
(declare-fun lnull$ (A_a_prod_llist$) Bool)
(declare-fun lzip$a (A_llist$) A_a_prod_llist_a_a_a_prod_prod_llist_fun$)
(declare-fun lzip$b (A_a_prod_llist$) A_llist_a_a_prod_a_prod_llist_fun$)
(declare-fun lzip$c (A_a_prod_llist$) A_a_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$)
(declare-fun lzip$d (A_llist$ A_a_prod_a_prod_llist$) A_a_a_prod_a_prod_prod_llist$)
(declare-fun lzip$e (A_llist$ A_a_a_prod_prod_llist$) A_a_a_a_prod_prod_prod_llist$)
(declare-fun lzip$f (A_a_prod_a_prod_llist$ A_llist$) A_a_prod_a_prod_a_prod_llist$)
(declare-fun lzip$g (A_a_a_prod_prod_llist$ A_llist$) A_a_a_prod_prod_a_prod_llist$)
(declare-fun lzip$h (A_llist$ A_a_prod_a_a_prod_prod_llist$) A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lzip$i (A_a_prod_llist$ A_a_prod_a_prod_llist$) A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun ldropn$ (Nat$ A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lnull$a (A_llist$) Bool)
(declare-fun lnull$b (A_a_a_prod_prod_llist$) Bool)
(declare-fun lnull$c (A_a_prod_a_prod_llist$) Bool)
(declare-fun lnull$d (A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun fun_app$ (A_llist_a_a_prod_llist_fun$ A_llist$) A_a_prod_llist$)
(declare-fun ldropn$a (Nat$ A_a_prod_a_prod_llist$) A_a_prod_a_prod_llist$)
(declare-fun ldropn$b (Nat$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun ldropn$c (Nat$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun ldropn$d (Nat$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun fun_app$a (A_a_prod_llist_a_a_a_prod_prod_llist_fun$ A_a_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun fun_app$b (A_llist_a_a_prod_a_prod_llist_fun$ A_llist$) A_a_prod_a_prod_llist$)
(declare-fun fun_app$c (A_a_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ A_a_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun iterates$ (A_a_prod_a_a_prod_prod_a_a_prod_a_a_prod_prod_fun$ A_a_prod_a_a_prod_prod$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lfinite$a (A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun lfinite$b (A_a_prod_a_prod_llist$) Bool)
(declare-fun lfinite$c (A_a_a_prod_prod_llist$) Bool)
(declare-fun lfinite$d (A_a_prod_llist$) Bool)
(declare-fun lfinite$e (A_a_a_prod_a_prod_prod_llist$) Bool)
(declare-fun lfinite$f (A_a_a_a_prod_prod_prod_llist$) Bool)
(declare-fun lfinite$g (A_a_prod_a_prod_a_prod_llist$) Bool)
(declare-fun lfinite$h (A_a_a_prod_prod_a_prod_llist$) Bool)
(declare-fun lfinite$i (A_a_a_prod_a_a_prod_prod_prod_llist$) Bool)
(declare-fun lfinite$j (A_a_prod_a_a_prod_a_prod_prod_llist$) Bool)
(declare-fun iterates$a (A_a_prod_a_prod_a_a_prod_a_prod_fun$ A_a_prod_a_prod$) A_a_prod_a_prod_llist$)
(declare-fun iterates$b (A_a_a_prod_prod_a_a_a_prod_prod_fun$ A_a_a_prod_prod$) A_a_a_prod_prod_llist$)
(declare-fun iterates$c (A_a_prod_a_a_prod_fun$ A_a_prod$) A_a_prod_llist$)
(declare-fun iterates$d (A_a_fun$ A$) A_llist$)
(declare-fun lstrict_prefix$ (A_a_prod_a_a_prod_prod_llist$ A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun llist_of_stream$ (A_stream$) A_llist$)
(declare-fun lstrict_prefix$a (A_a_prod_a_prod_llist$ A_a_prod_a_prod_llist$) Bool)
(declare-fun lstrict_prefix$b (A_a_a_prod_prod_llist$ A_a_a_prod_prod_llist$) Bool)
(declare-fun lstrict_prefix$c (A_a_prod_llist$ A_a_prod_llist$) Bool)
(declare-fun lstrict_prefix$d (A_llist$ A_llist$) Bool)
(declare-fun stream_of_llist$ (A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_stream$)
(declare-fun llist_of_stream$a (A_a_prod_a_a_prod_prod_stream$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun llist_of_stream$b (A_a_prod_a_prod_stream$) A_a_prod_a_prod_llist$)
(declare-fun llist_of_stream$c (A_a_a_prod_prod_stream$) A_a_a_prod_prod_llist$)
(declare-fun llist_of_stream$d (A_a_prod_stream$) A_a_prod_llist$)
(declare-fun stream_of_llist$a (A_a_prod_a_prod_llist$) A_a_prod_a_prod_stream$)
(declare-fun stream_of_llist$b (A_a_a_prod_prod_llist$) A_a_a_prod_prod_stream$)
(declare-fun stream_of_llist$c (A_a_prod_llist$) A_a_prod_stream$)
(declare-fun stream_of_llist$d (A_llist$) A_stream$)
(assert (! (not (not (lfinite$ (llist_of_stream$ xs$)))) :named a0))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (=> (not (lfinite$a ?v0)) (= (llist_of_stream$a (stream_of_llist$ ?v0)) ?v0))) :named a1))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (=> (not (lfinite$b ?v0)) (= (llist_of_stream$b (stream_of_llist$a ?v0)) ?v0))) :named a2))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (=> (not (lfinite$c ?v0)) (= (llist_of_stream$c (stream_of_llist$b ?v0)) ?v0))) :named a3))
(assert (! (forall ((?v0 A_a_prod_llist$)) (=> (not (lfinite$d ?v0)) (= (llist_of_stream$d (stream_of_llist$c ?v0)) ?v0))) :named a4))
(assert (! (forall ((?v0 A_llist$)) (=> (not (lfinite$ ?v0)) (= (llist_of_stream$ (stream_of_llist$d ?v0)) ?v0))) :named a5))
(assert (! (forall ((?v0 A_a_prod_stream$)) (= (stream_of_llist$c (llist_of_stream$d ?v0)) ?v0)) :named a6))
(assert (! (forall ((?v0 A_stream$)) (= (stream_of_llist$d (llist_of_stream$ ?v0)) ?v0)) :named a7))
(assert (! (forall ((?v0 A_a_prod_stream$)) (not (lnull$ (llist_of_stream$d ?v0)))) :named a8))
(assert (! (forall ((?v0 A_stream$)) (not (lnull$a (llist_of_stream$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (=> (lstrict_prefix$ ?v0 ?v1) (lfinite$a ?v0))) :named a10))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_a_prod_a_prod_llist$)) (=> (lstrict_prefix$a ?v0 ?v1) (lfinite$b ?v0))) :named a11))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_a_a_prod_prod_llist$)) (=> (lstrict_prefix$b ?v0 ?v1) (lfinite$c ?v0))) :named a12))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (lstrict_prefix$c ?v0 ?v1) (lfinite$d ?v0))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (lstrict_prefix$d ?v0 ?v1) (lfinite$ ?v0))) :named a14))
(assert (! (= (lfinite$a lNil$a) true) :named a15))
(assert (! (= (lfinite$b lNil$b) true) :named a16))
(assert (! (= (lfinite$c lNil$c) true) :named a17))
(assert (! (= (lfinite$d lNil$d) true) :named a18))
(assert (! (= (lfinite$ lNil$) true) :named a19))
(assert (! (forall ((?v0 A_a_prod_stream$)) (= (lhd$d (llist_of_stream$d ?v0)) (shd$d ?v0))) :named a20))
(assert (! (forall ((?v0 A_stream$)) (= (lhd$ (llist_of_stream$ ?v0)) (shd$ ?v0))) :named a21))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (= (lfinite$a (ldropn$ ?v0 ?v1)) (lfinite$a ?v1))) :named a22))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_a_prod_llist$)) (= (lfinite$b (ldropn$a ?v0 ?v1)) (lfinite$b ?v1))) :named a23))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_a_prod_prod_llist$)) (= (lfinite$c (ldropn$b ?v0 ?v1)) (lfinite$c ?v1))) :named a24))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_llist$)) (= (lfinite$d (ldropn$c ?v0 ?v1)) (lfinite$d ?v1))) :named a25))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (= (lfinite$ (ldropn$d ?v0 ?v1)) (lfinite$ ?v1))) :named a26))
(assert (! (forall ((?v0 A_a_prod_stream$)) (= (ltl$d (llist_of_stream$d ?v0)) (llist_of_stream$d (stl$d ?v0)))) :named a27))
(assert (! (forall ((?v0 A_stream$)) (= (ltl$ (llist_of_stream$ ?v0)) (llist_of_stream$ (stl$ ?v0)))) :named a28))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$d (fun_app$ (lzip$ ?v0) ?v1)) (or (lfinite$ ?v0) (lfinite$ ?v1)))) :named a29))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (lfinite$c (fun_app$a (lzip$a ?v0) ?v1)) (or (lfinite$ ?v0) (lfinite$d ?v1)))) :named a30))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (lfinite$b (fun_app$b (lzip$b ?v0) ?v1)) (or (lfinite$d ?v0) (lfinite$ ?v1)))) :named a31))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lfinite$a (fun_app$c (lzip$c ?v0) ?v1)) (or (lfinite$d ?v0) (lfinite$d ?v1)))) :named a32))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_prod_llist$)) (= (lfinite$e (lzip$d ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$b ?v1)))) :named a33))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_a_prod_prod_llist$)) (= (lfinite$f (lzip$e ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$c ?v1)))) :named a34))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_llist$)) (= (lfinite$g (lzip$f ?v0 ?v1)) (or (lfinite$b ?v0) (lfinite$ ?v1)))) :named a35))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_llist$)) (= (lfinite$h (lzip$g ?v0 ?v1)) (or (lfinite$c ?v0) (lfinite$ ?v1)))) :named a36))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (= (lfinite$i (lzip$h ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$a ?v1)))) :named a37))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_a_prod_llist$)) (= (lfinite$j (lzip$i ?v0 ?v1)) (or (lfinite$d ?v0) (lfinite$b ?v1)))) :named a38))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a39))
(assert (! (forall ((?v0 A_a_prod_a_prod$) (?v1 A_a_prod_a_prod_llist$)) (! (= (lfinite$b (lCons$b ?v0 ?v1)) (lfinite$b ?v1)) :pattern ((lCons$b ?v0 ?v1)))) :named a40))
(assert (! (forall ((?v0 A_a_a_prod_prod$) (?v1 A_a_a_prod_prod_llist$)) (! (= (lfinite$c (lCons$c ?v0 ?v1)) (lfinite$c ?v1)) :pattern ((lCons$c ?v0 ?v1)))) :named a41))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (lfinite$d (lCons$d ?v0 ?v1)) (lfinite$d ?v1)) :pattern ((lCons$d ?v0 ?v1)))) :named a42))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a43))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a44))
(assert (! (forall ((?v0 A_a_prod_a_prod$) (?v1 A_a_prod_a_prod_llist$)) (! (= (lfinite$b (lCons$b ?v0 ?v1)) (lfinite$b ?v1)) :pattern ((lCons$b ?v0 ?v1)))) :named a45))
(assert (! (forall ((?v0 A_a_a_prod_prod$) (?v1 A_a_a_prod_prod_llist$)) (! (= (lfinite$c (lCons$c ?v0 ?v1)) (lfinite$c ?v1)) :pattern ((lCons$c ?v0 ?v1)))) :named a46))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (lfinite$d (lCons$d ?v0 ?v1)) (lfinite$d ?v1)) :pattern ((lCons$d ?v0 ?v1)))) :named a47))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a48))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_a_a_prod_a_a_prod_prod_fun$) (?v1 A_a_prod_a_a_prod_prod$)) (not (lfinite$a (iterates$ ?v0 ?v1)))) :named a49))
(assert (! (forall ((?v0 A_a_prod_a_prod_a_a_prod_a_prod_fun$) (?v1 A_a_prod_a_prod$)) (not (lfinite$b (iterates$a ?v0 ?v1)))) :named a50))
(assert (! (forall ((?v0 A_a_a_prod_prod_a_a_a_prod_prod_fun$) (?v1 A_a_a_prod_prod$)) (not (lfinite$c (iterates$b ?v0 ?v1)))) :named a51))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 A_a_prod$)) (not (lfinite$d (iterates$c ?v0 ?v1)))) :named a52))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (not (lfinite$ (iterates$d ?v0 ?v1)))) :named a53))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod$) (?v3 A_a_prod_llist$)) (= (= (lCons$d ?v0 ?v1) (lCons$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a54))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a55))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (= (lfinite$a (ltl$a ?v0)) (lfinite$a ?v0))) :named a56))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (= (lfinite$b (ltl$b ?v0)) (lfinite$b ?v0))) :named a57))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (= (lfinite$c (ltl$c ?v0)) (lfinite$c ?v0))) :named a58))
(assert (! (forall ((?v0 A_a_prod_llist$)) (= (lfinite$d (ltl$d ?v0)) (lfinite$d ?v0))) :named a59))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$ (ltl$ ?v0)) (lfinite$ ?v0))) :named a60))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$b (fun_app$a (lzip$a ?v0) ?v1))) (and (not (lnull$a ?v0)) (not (lnull$ ?v1))))) :named a61))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (not (lnull$c (fun_app$b (lzip$b ?v0) ?v1))) (and (not (lnull$ ?v0)) (not (lnull$a ?v1))))) :named a62))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$d (fun_app$c (lzip$c ?v0) ?v1))) (and (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a63))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$ (fun_app$ (lzip$ ?v0) ?v1))) (and (not (lnull$a ?v0)) (not (lnull$a ?v1))))) :named a64))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (lnull$b (fun_app$a (lzip$a ?v0) ?v1)) (or (lnull$a ?v0) (lnull$ ?v1)))) :named a65))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (lnull$c (fun_app$b (lzip$b ?v0) ?v1)) (or (lnull$ ?v0) (lnull$a ?v1)))) :named a66))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lnull$d (fun_app$c (lzip$c ?v0) ?v1)) (or (lnull$ ?v0) (lnull$ ?v1)))) :named a67))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$ (fun_app$ (lzip$ ?v0) ?v1)) (or (lnull$a ?v0) (lnull$a ?v1)))) :named a68))
(assert (! (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$b (lzip$b ?v0) lNil$) lNil$b) :pattern ((lzip$b ?v0)))) :named a69))
(assert (! (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$c (lzip$c ?v0) lNil$d) lNil$a) :pattern ((lzip$c ?v0)))) :named a70))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a (lzip$a ?v0) lNil$d) lNil$c) :pattern ((lzip$a ?v0)))) :named a71))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (lzip$ ?v0) lNil$) lNil$d) :pattern ((lzip$ ?v0)))) :named a72))
(check-sat)
;(get-unsat-core)
