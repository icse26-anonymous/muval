; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 246
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Node$ 0)
(declare-sort Node_set$ 0)
(declare-sort Node_llist_set$ 0)
(declare-sort Node_node_bool_fun_fun$ 0)
(declare-codatatypes () ((Node_llist$ (lNil$) (lCons$ (lhd$ Node$) (ltl$ Node_llist$)))))
(declare-datatypes () ((Node_list$ (nil$) (cons$ (hd$ Node$) (tl$ Node_list$)))))
(declare-fun n$ () Node$)
(declare-fun n$a () Node$)
(declare-fun ns$ () Node_set$)
(declare-fun xs$ () Node_list$)
(declare-fun bot$ () Node_set$)
(declare-fun bot$a () Node_llist_set$)
(declare-fun lset$ (Node_llist$) Node_set$)
(declare-fun graph$ () Node_node_bool_fun_fun$)
(declare-fun paths$ (Node_node_bool_fun_fun$) Node_llist_set$)
(declare-fun append$ (Node_list$ Node_list$) Node_list$)
(declare-fun insert$ (Node$ Node_set$) Node_set$)
(declare-fun member$ (Node$ Node_set$) Bool)
(declare-fun uminus$ (Node_set$) Node_set$)
(declare-fun insert$a (Node_llist$ Node_llist_set$) Node_llist_set$)
(declare-fun less_eq$ (Node_set$ Node_set$) Bool)
(declare-fun member$a (Node_llist$ Node_llist_set$) Bool)
(declare-fun uminus$a (Node_llist_set$) Node_llist_set$)
(declare-fun llist_of$ (Node_list$) Node_llist$)
(declare-fun connected$ (Node_node_bool_fun_fun$) Bool)
(declare-fun reachable_via$ (Node_node_bool_fun_fun$ Node_set$ Node$) Node_set$)
(assert (! (not (member$ n$ (reachable_via$ graph$ (uminus$ (insert$ n$a bot$)) n$a))) :named a0))
(assert (! (connected$ graph$) :named a1))
(assert (! (= ns$ bot$) :named a2))
(assert (! (not (= n$a n$)) :named a3))
(assert (! (member$ n$ (uminus$ (insert$ n$a bot$))) :named a4))
(assert (! (member$a (llist_of$ (cons$ n$a (append$ xs$ (cons$ n$ nil$)))) (paths$ graph$)) :named a5))
(assert (! (forall ((?v0 Node_llist$)) (member$a ?v0 (insert$a ?v0 bot$a))) :named a6))
(assert (! (forall ((?v0 Node$)) (member$ ?v0 (insert$ ?v0 bot$))) :named a7))
(assert (! (exists ((?v0 Node_llist$)) (and (member$a (lCons$ n$a ?v0) (paths$ graph$)) (and (less_eq$ (lset$ ?v0) (lset$ (llist_of$ (append$ xs$ (cons$ n$ nil$))))) (and (member$ n$ (lset$ ?v0)) (not (member$ n$a (lset$ ?v0))))))) :named a8))
(assert (! (=> (forall ((?v0 Node_list$)) (=> (member$a (llist_of$ (cons$ n$a (append$ ?v0 (cons$ n$ nil$)))) (paths$ graph$)) false)) false) :named a9))
(assert (! (forall ((?v0 Node_llist_set$) (?v1 Node_llist_set$)) (= (= (uminus$a ?v0) (uminus$a ?v1)) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 Node_set$) (?v1 Node_set$)) (= (= (uminus$ ?v0) (uminus$ ?v1)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 Node_llist$) (?v1 Node_llist_set$)) (= (member$a ?v0 (uminus$a ?v1)) (not (member$a ?v0 ?v1)))) :named a12))
(assert (! (forall ((?v0 Node$) (?v1 Node_set$)) (= (member$ ?v0 (uminus$ ?v1)) (not (member$ ?v0 ?v1)))) :named a13))
(assert (! (forall ((?v0 Node_llist$) (?v1 Node_llist_set$)) (=> (=> (member$a ?v0 ?v1) false) (member$a ?v0 (uminus$a ?v1)))) :named a14))
(assert (! (forall ((?v0 Node$) (?v1 Node_set$)) (=> (=> (member$ ?v0 ?v1) false) (member$ ?v0 (uminus$ ?v1)))) :named a15))
(assert (! (forall ((?v0 Node_llist$) (?v1 Node_llist_set$)) (= (insert$a ?v0 (insert$a ?v0 ?v1)) (insert$a ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 Node$) (?v1 Node_set$)) (= (insert$ ?v0 (insert$ ?v0 ?v1)) (insert$ ?v0 ?v1))) :named a17))
(assert (! (forall ((?v0 Node$) (?v1 Node$) (?v2 Node_set$)) (= (member$ ?v0 (insert$ ?v1 ?v2)) (or (= ?v0 ?v1) (member$ ?v0 ?v2)))) :named a18))
(assert (! (forall ((?v0 Node_llist$) (?v1 Node_llist$) (?v2 Node_llist_set$)) (= (member$a ?v0 (insert$a ?v1 ?v2)) (or (= ?v0 ?v1) (member$a ?v0 ?v2)))) :named a19))
(assert (! (forall ((?v0 Node$) (?v1 Node_set$) (?v2 Node$)) (=> (=> (not (member$ ?v0 ?v1)) (= ?v0 ?v2)) (member$ ?v0 (insert$ ?v2 ?v1)))) :named a20))
(assert (! (forall ((?v0 Node_llist$) (?v1 Node_llist_set$) (?v2 Node_llist$)) (=> (=> (not (member$a ?v0 ?v1)) (= ?v0 ?v2)) (member$a ?v0 (insert$a ?v2 ?v1)))) :named a21))
(assert (! (forall ((?v0 Node_llist_set$) (?v1 Node_llist_set$)) (= (= (uminus$a ?v0) (uminus$a ?v1)) (= ?v0 ?v1))) :named a22))
(assert (! (forall ((?v0 Node_set$) (?v1 Node_set$)) (= (= (uminus$ ?v0) (uminus$ ?v1)) (= ?v0 ?v1))) :named a23))
(assert (! (forall ((?v0 Node_llist$)) (= (member$a ?v0 bot$a) false)) :named a24))
(assert (! (forall ((?v0 Node$)) (= (member$ ?v0 bot$) false)) :named a25))
(check-sat)
;(get-unsat-core)
