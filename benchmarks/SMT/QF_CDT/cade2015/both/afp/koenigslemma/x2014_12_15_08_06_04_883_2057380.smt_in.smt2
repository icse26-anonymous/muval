; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 251
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun n$ () A$)
(declare-fun x$ () A$)
(declare-fun n$a () A$)
(declare-fun ns$ () A_set$)
(declare-fun xs$ () A_llist$)
(declare-fun xs$a () A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun graph$ () A_a_bool_fun_fun$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun less_eq$ (A_set$ A_set$) Bool)
(declare-fun fun_app$a (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun reachable_via$ (A_a_bool_fun_fun$ A_set$ A$) A_set$)
(assert (! (not (member$ x$ (lset$ xs$))) :named a0))
(assert (! (=> (forall ((?v0 A$) (?v1 A_llist$)) (=> (= xs$a (lCons$ ?v0 ?v1)) false)) false) :named a1))
(assert (! (not (= x$ n$)) :named a2))
(assert (! (member$ x$ (lset$ xs$a)) :named a3))
(assert (! (= xs$a (lCons$ n$ xs$)) :named a4))
(assert (! (less_eq$ (lset$ xs$a) ns$) :named a5))
(assert (! (member$ x$ (reachable_via$ graph$ ns$ n$a)) :named a6))
(assert (! (member$ n$ ns$) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A$) (?v4 A_llist$)) (fun_app$ (fun_app$a ?v2 ?v3) (lCons$ ?v3 ?v4))) (forall ((?v3 A$) (?v4 A_llist$) (?v5 A$)) (=> (and (member$ ?v5 (lset$ ?v4)) (fun_app$ (fun_app$a ?v2 ?v5) ?v4)) (fun_app$ (fun_app$a ?v2 ?v5) (lCons$ ?v3 ?v4)))))) (fun_app$ (fun_app$a ?v2 ?v0) ?v1))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$ ?v0 (lset$ ?v3))) false)))) false)) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$ ?v2 (lCons$ ?v0 ?v3))) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v4)) (fun_app$ ?v2 ?v4)) (fun_app$ ?v2 (lCons$ ?v3 ?v4)))))) (fun_app$ ?v2 ?v1))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$ ?v2 (lCons$ ?v0 ?v3))) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v4)) (and (not (= ?v0 ?v3)) (fun_app$ ?v2 ?v4))) (fun_app$ ?v2 (lCons$ ?v3 ?v4)))))) (fun_app$ ?v2 ?v1))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$ ?v0 (lset$ ?v3))) false)))) false)) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ (lCons$ ?v2 ?v1))))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ (lCons$ ?v2 ?v1))))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (member$ ?v0 (lset$ (lCons$ ?v0 ?v1)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (member$ ?v0 (lset$ (lCons$ ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a17))
(check-sat)
;(get-unsat-core)
