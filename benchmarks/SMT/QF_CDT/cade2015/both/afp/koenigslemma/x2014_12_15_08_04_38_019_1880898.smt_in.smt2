; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 77
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_llist_set$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_llist_llist_set$ 0)
(declare-sort A_llist_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))
  (A_llist_llist_llist_llist$ (lNil$c) (lCons$c (lhd$c A_llist_llist_llist$) (ltl$c A_llist_llist_llist_llist$)))))
(declare-fun x$ () A$)
(declare-fun xs$ () A_llist$)
(declare-fun lset$ (A_llist_llist_llist_llist$) A_llist_llist_llist_set$)
(declare-fun graph$ () A_a_bool_fun_fun$)
(declare-fun lset$a (A_llist_llist_llist$) A_llist_llist_set$)
(declare-fun lset$b (A_llist_llist$) A_llist_set$)
(declare-fun lset$c (A_llist$) A_set$)
(declare-fun paths$ (A_a_bool_fun_fun$) A_llist_set$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun paths$a (A_llist_llist_a_llist_llist_bool_fun_fun$) A_llist_llist_llist_set$)
(declare-fun paths$b (A_llist_a_llist_bool_fun_fun$) A_llist_llist_set$)
(declare-fun paths$c (A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$) A_llist_llist_llist_llist_set$)
(declare-fun pathsp$ (A_llist_llist_a_llist_llist_bool_fun_fun$) A_llist_llist_llist_bool_fun$)
(declare-fun fun_app$ (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun less_eq$ (A_llist_llist_llist_set$ A_llist_llist_llist_set$) Bool)
(declare-fun member$a (A_llist_llist_llist$ A_llist_llist_llist_set$) Bool)
(declare-fun member$b (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun member$c (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_set$) Bool)
(declare-fun member$d (A$ A_set$) Bool)
(declare-fun pathsp$a (A_llist_a_llist_bool_fun_fun$) A_llist_llist_bool_fun$)
(declare-fun pathsp$b (A_a_bool_fun_fun$) A_llist_bool_fun$)
(declare-fun fun_app$a (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$d (A_bool_fun$ A$) Bool)
(declare-fun fun_app$e (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$f (A_llist_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun less_eq$a (A_llist_llist_set$ A_llist_llist_set$) Bool)
(declare-fun less_eq$b (A_llist_set$ A_llist_set$) Bool)
(declare-fun less_eq$c (A_set$ A_set$) Bool)
(declare-fun reachable_via$ (A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ A_llist_llist_llist_set$ A_llist_llist_llist$) A_llist_llist_llist_set$)
(declare-fun reachable_via$a (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist_set$ A_llist_llist$) A_llist_llist_set$)
(declare-fun reachable_via$b (A_llist_a_llist_bool_fun_fun$ A_llist_set$ A_llist$) A_llist_set$)
(declare-fun reachable_via$c (A_a_bool_fun_fun$ A_set$ A$) A_set$)
(assert (! (not (member$ xs$ (paths$ graph$))) :named a0))
(assert (! (member$ (lCons$ x$ xs$) (paths$ graph$)) :named a1))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_llist_llist$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (member$a (lCons$b ?v2 ?v3) (paths$a ?v0))) (member$a (lCons$b ?v1 (lCons$b ?v2 ?v3)) (paths$a ?v0)))) :named a2))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (member$b (lCons$a ?v2 ?v3) (paths$b ?v0))) (member$b (lCons$a ?v1 (lCons$a ?v2 ?v3)) (paths$b ?v0)))) :named a3))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$)) (=> (and (fun_app$d (fun_app$e ?v0 ?v1) ?v2) (member$ (lCons$ ?v2 ?v3) (paths$ ?v0))) (member$ (lCons$ ?v1 (lCons$ ?v2 ?v3)) (paths$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist_llist$)) (! (= (fun_app$f (pathsp$ ?v0) ?v1) (member$a ?v1 (paths$a ?v0))) :pattern ((fun_app$f (pathsp$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_llist$)) (! (= (fun_app$ (pathsp$a ?v0) ?v1) (member$b ?v1 (paths$b ?v0))) :pattern ((fun_app$ (pathsp$a ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$b (pathsp$b ?v0) ?v1) (member$ ?v1 (paths$ ?v0))) :pattern ((fun_app$b (pathsp$b ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$)) (member$a lNil$b (paths$a ?v0))) :named a8))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$)) (member$b lNil$a (paths$b ?v0))) :named a9))
(assert (! (forall ((?v0 A_a_bool_fun_fun$)) (member$ lNil$ (paths$ ?v0))) :named a10))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_a_llist_llist_bool_fun_fun$)) (= (member$a ?v0 (paths$a ?v1)) (or (= ?v0 lNil$b) (or (exists ((?v2 A_llist_llist$)) (= ?v0 (lCons$b ?v2 lNil$b))) (exists ((?v2 A_llist_llist$) (?v3 A_llist_llist$) (?v4 A_llist_llist_llist$)) (and (= ?v0 (lCons$b ?v2 (lCons$b ?v3 ?v4))) (and (fun_app$ (fun_app$a ?v1 ?v2) ?v3) (member$a (lCons$b ?v3 ?v4) (paths$a ?v1))))))))) :named a11))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_a_llist_bool_fun_fun$)) (= (member$b ?v0 (paths$b ?v1)) (or (= ?v0 lNil$a) (or (exists ((?v2 A_llist$)) (= ?v0 (lCons$a ?v2 lNil$a))) (exists ((?v2 A_llist$) (?v3 A_llist$) (?v4 A_llist_llist$)) (and (= ?v0 (lCons$a ?v2 (lCons$a ?v3 ?v4))) (and (fun_app$b (fun_app$c ?v1 ?v2) ?v3) (member$b (lCons$a ?v3 ?v4) (paths$b ?v1))))))))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_bool_fun_fun$)) (= (member$ ?v0 (paths$ ?v1)) (or (= ?v0 lNil$) (or (exists ((?v2 A$)) (= ?v0 (lCons$ ?v2 lNil$))) (exists ((?v2 A$) (?v3 A$) (?v4 A_llist$)) (and (= ?v0 (lCons$ ?v2 (lCons$ ?v3 ?v4))) (and (fun_app$d (fun_app$e ?v1 ?v2) ?v3) (member$ (lCons$ ?v3 ?v4) (paths$ ?v1))))))))) :named a13))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_a_llist_llist_bool_fun_fun$)) (=> (and (member$a ?v0 (paths$a ?v1)) (and (=> (= ?v0 lNil$b) false) (and (forall ((?v2 A_llist_llist$)) (=> (= ?v0 (lCons$b ?v2 lNil$b)) false)) (forall ((?v2 A_llist_llist$) (?v3 A_llist_llist$) (?v4 A_llist_llist_llist$)) (=> (and (= ?v0 (lCons$b ?v2 (lCons$b ?v3 ?v4))) (and (fun_app$ (fun_app$a ?v1 ?v2) ?v3) (member$a (lCons$b ?v3 ?v4) (paths$a ?v1)))) false))))) false)) :named a14))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_a_llist_bool_fun_fun$)) (=> (and (member$b ?v0 (paths$b ?v1)) (and (=> (= ?v0 lNil$a) false) (and (forall ((?v2 A_llist$)) (=> (= ?v0 (lCons$a ?v2 lNil$a)) false)) (forall ((?v2 A_llist$) (?v3 A_llist$) (?v4 A_llist_llist$)) (=> (and (= ?v0 (lCons$a ?v2 (lCons$a ?v3 ?v4))) (and (fun_app$b (fun_app$c ?v1 ?v2) ?v3) (member$b (lCons$a ?v3 ?v4) (paths$b ?v1)))) false))))) false)) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_bool_fun_fun$)) (=> (and (member$ ?v0 (paths$ ?v1)) (and (=> (= ?v0 lNil$) false) (and (forall ((?v2 A$)) (=> (= ?v0 (lCons$ ?v2 lNil$)) false)) (forall ((?v2 A$) (?v3 A$) (?v4 A_llist$)) (=> (and (= ?v0 (lCons$ ?v2 (lCons$ ?v3 ?v4))) (and (fun_app$d (fun_app$e ?v1 ?v2) ?v3) (member$ (lCons$ ?v3 ?v4) (paths$ ?v1)))) false))))) false)) :named a16))
(assert (! (forall ((?v0 A_llist_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_a_llist_llist_bool_fun_fun$)) (=> (and (fun_app$f ?v0 ?v1) (forall ((?v3 A_llist_llist_llist$)) (=> (fun_app$f ?v0 ?v3) (or (= ?v3 lNil$b) (or (exists ((?v4 A_llist_llist$)) (= ?v3 (lCons$b ?v4 lNil$b))) (exists ((?v4 A_llist_llist$) (?v5 A_llist_llist$) (?v6 A_llist_llist_llist$)) (and (= ?v3 (lCons$b ?v4 (lCons$b ?v5 ?v6))) (and (fun_app$ (fun_app$a ?v2 ?v4) ?v5) (or (fun_app$f ?v0 (lCons$b ?v5 ?v6)) (member$a (lCons$b ?v5 ?v6) (paths$a ?v2))))))))))) (member$a ?v1 (paths$a ?v2)))) :named a17))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_bool_fun_fun$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 A_llist_llist$)) (=> (fun_app$ ?v0 ?v3) (or (= ?v3 lNil$a) (or (exists ((?v4 A_llist$)) (= ?v3 (lCons$a ?v4 lNil$a))) (exists ((?v4 A_llist$) (?v5 A_llist$) (?v6 A_llist_llist$)) (and (= ?v3 (lCons$a ?v4 (lCons$a ?v5 ?v6))) (and (fun_app$b (fun_app$c ?v2 ?v4) ?v5) (or (fun_app$ ?v0 (lCons$a ?v5 ?v6)) (member$b (lCons$a ?v5 ?v6) (paths$b ?v2))))))))))) (member$b ?v1 (paths$b ?v2)))) :named a18))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v3 A_llist$)) (=> (fun_app$b ?v0 ?v3) (or (= ?v3 lNil$) (or (exists ((?v4 A$)) (= ?v3 (lCons$ ?v4 lNil$))) (exists ((?v4 A$) (?v5 A$) (?v6 A_llist$)) (and (= ?v3 (lCons$ ?v4 (lCons$ ?v5 ?v6))) (and (fun_app$d (fun_app$e ?v2 ?v4) ?v5) (or (fun_app$b ?v0 (lCons$ ?v5 ?v6)) (member$ (lCons$ ?v5 ?v6) (paths$ ?v2))))))))))) (member$ ?v1 (paths$ ?v2)))) :named a19))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_a_llist_llist_bool_fun_fun$)) (member$a (lCons$b ?v0 lNil$b) (paths$a ?v1))) :named a20))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_bool_fun_fun$)) (member$b (lCons$a ?v0 lNil$a) (paths$b ?v1))) :named a21))
(assert (! (forall ((?v0 A$) (?v1 A_a_bool_fun_fun$)) (member$ (lCons$ ?v0 lNil$) (paths$ ?v1))) :named a22))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$) (?v2 A_llist_llist_llist_set$) (?v3 A_llist_llist_llist$)) (= (member$a ?v0 (reachable_via$ ?v1 ?v2 ?v3)) (exists ((?v4 A_llist_llist_llist_llist$) (?v5 A_llist_llist_llist$)) (and (= ?v0 ?v5) (and (member$c (lCons$c ?v3 ?v4) (paths$c ?v1)) (and (member$a ?v5 (lset$ ?v4)) (less_eq$ (lset$ ?v4) ?v2))))))) :named a23))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v2 A_llist_llist_set$) (?v3 A_llist_llist$)) (= (member$b ?v0 (reachable_via$a ?v1 ?v2 ?v3)) (exists ((?v4 A_llist_llist_llist$) (?v5 A_llist_llist$)) (and (= ?v0 ?v5) (and (member$a (lCons$b ?v3 ?v4) (paths$a ?v1)) (and (member$b ?v5 (lset$a ?v4)) (less_eq$a (lset$a ?v4) ?v2))))))) :named a24))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist_set$) (?v3 A_llist$)) (= (member$ ?v0 (reachable_via$b ?v1 ?v2 ?v3)) (exists ((?v4 A_llist_llist$) (?v5 A_llist$)) (and (= ?v0 ?v5) (and (member$b (lCons$a ?v3 ?v4) (paths$b ?v1)) (and (member$ ?v5 (lset$b ?v4)) (less_eq$b (lset$b ?v4) ?v2))))))) :named a25))
(assert (! (forall ((?v0 A$) (?v1 A_a_bool_fun_fun$) (?v2 A_set$) (?v3 A$)) (= (member$d ?v0 (reachable_via$c ?v1 ?v2 ?v3)) (exists ((?v4 A_llist$) (?v5 A$)) (and (= ?v0 ?v5) (and (member$ (lCons$ ?v3 ?v4) (paths$ ?v1)) (and (member$d ?v5 (lset$c ?v4)) (less_eq$c (lset$c ?v4) ?v2))))))) :named a26))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist_llist$) (?v2 A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$) (?v3 A_llist_llist_llist$) (?v4 A_llist_llist_llist_set$)) (=> (and (member$c (lCons$c ?v0 ?v1) (paths$c ?v2)) (and (member$a ?v3 (lset$ ?v1)) (less_eq$ (lset$ ?v1) ?v4))) (member$a ?v3 (reachable_via$ ?v2 ?v4 ?v0)))) :named a27))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v3 A_llist_llist$) (?v4 A_llist_llist_set$)) (=> (and (member$a (lCons$b ?v0 ?v1) (paths$a ?v2)) (and (member$b ?v3 (lset$a ?v1)) (less_eq$a (lset$a ?v1) ?v4))) (member$b ?v3 (reachable_via$a ?v2 ?v4 ?v0)))) :named a28))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist$) (?v4 A_llist_set$)) (=> (and (member$b (lCons$a ?v0 ?v1) (paths$b ?v2)) (and (member$ ?v3 (lset$b ?v1)) (less_eq$b (lset$b ?v1) ?v4))) (member$ ?v3 (reachable_via$b ?v2 ?v4 ?v0)))) :named a29))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$) (?v3 A$) (?v4 A_set$)) (=> (and (member$ (lCons$ ?v0 ?v1) (paths$ ?v2)) (and (member$d ?v3 (lset$c ?v1)) (less_eq$c (lset$c ?v1) ?v4))) (member$d ?v3 (reachable_via$c ?v2 ?v4 ?v0)))) :named a30))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$) (?v2 A_llist_llist_llist_set$) (?v3 A_llist_llist_llist$)) (=> (and (member$a ?v0 (reachable_via$ ?v1 ?v2 ?v3)) (forall ((?v4 A_llist_llist_llist_llist$) (?v5 A_llist_llist_llist$)) (=> (and (= ?v0 ?v5) (and (member$c (lCons$c ?v3 ?v4) (paths$c ?v1)) (and (member$a ?v5 (lset$ ?v4)) (less_eq$ (lset$ ?v4) ?v2)))) false))) false)) :named a31))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v2 A_llist_llist_set$) (?v3 A_llist_llist$)) (=> (and (member$b ?v0 (reachable_via$a ?v1 ?v2 ?v3)) (forall ((?v4 A_llist_llist_llist$) (?v5 A_llist_llist$)) (=> (and (= ?v0 ?v5) (and (member$a (lCons$b ?v3 ?v4) (paths$a ?v1)) (and (member$b ?v5 (lset$a ?v4)) (less_eq$a (lset$a ?v4) ?v2)))) false))) false)) :named a32))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist_set$) (?v3 A_llist$)) (=> (and (member$ ?v0 (reachable_via$b ?v1 ?v2 ?v3)) (forall ((?v4 A_llist_llist$) (?v5 A_llist$)) (=> (and (= ?v0 ?v5) (and (member$b (lCons$a ?v3 ?v4) (paths$b ?v1)) (and (member$ ?v5 (lset$b ?v4)) (less_eq$b (lset$b ?v4) ?v2)))) false))) false)) :named a33))
(assert (! (forall ((?v0 A$) (?v1 A_a_bool_fun_fun$) (?v2 A_set$) (?v3 A$)) (=> (and (member$d ?v0 (reachable_via$c ?v1 ?v2 ?v3)) (forall ((?v4 A_llist$) (?v5 A$)) (=> (and (= ?v0 ?v5) (and (member$ (lCons$ ?v3 ?v4) (paths$ ?v1)) (and (member$d ?v5 (lset$c ?v4)) (less_eq$c (lset$c ?v4) ?v2)))) false))) false)) :named a34))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist_llist$)) (= (fun_app$f (pathsp$ ?v0) ?v1) (or (= ?v1 lNil$b) (or (exists ((?v2 A_llist_llist$)) (= ?v1 (lCons$b ?v2 lNil$b))) (exists ((?v2 A_llist_llist$) (?v3 A_llist_llist$) (?v4 A_llist_llist_llist$)) (and (= ?v1 (lCons$b ?v2 (lCons$b ?v3 ?v4))) (and (fun_app$ (fun_app$a ?v0 ?v2) ?v3) (fun_app$f (pathsp$ ?v0) (lCons$b ?v3 ?v4))))))))) :named a35))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_llist$)) (= (fun_app$ (pathsp$a ?v0) ?v1) (or (= ?v1 lNil$a) (or (exists ((?v2 A_llist$)) (= ?v1 (lCons$a ?v2 lNil$a))) (exists ((?v2 A_llist$) (?v3 A_llist$) (?v4 A_llist_llist$)) (and (= ?v1 (lCons$a ?v2 (lCons$a ?v3 ?v4))) (and (fun_app$b (fun_app$c ?v0 ?v2) ?v3) (fun_app$ (pathsp$a ?v0) (lCons$a ?v3 ?v4))))))))) :named a36))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (= (fun_app$b (pathsp$b ?v0) ?v1) (or (= ?v1 lNil$) (or (exists ((?v2 A$)) (= ?v1 (lCons$ ?v2 lNil$))) (exists ((?v2 A$) (?v3 A$) (?v4 A_llist$)) (and (= ?v1 (lCons$ ?v2 (lCons$ ?v3 ?v4))) (and (fun_app$d (fun_app$e ?v0 ?v2) ?v3) (fun_app$b (pathsp$b ?v0) (lCons$ ?v3 ?v4))))))))) :named a37))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist_llist$)) (=> (and (fun_app$f (pathsp$ ?v0) ?v1) (and (=> (= ?v1 lNil$b) false) (and (forall ((?v2 A_llist_llist$)) (=> (= ?v1 (lCons$b ?v2 lNil$b)) false)) (forall ((?v2 A_llist_llist$) (?v3 A_llist_llist$) (?v4 A_llist_llist_llist$)) (=> (and (= ?v1 (lCons$b ?v2 (lCons$b ?v3 ?v4))) (and (fun_app$ (fun_app$a ?v0 ?v2) ?v3) (fun_app$f (pathsp$ ?v0) (lCons$b ?v3 ?v4)))) false))))) false)) :named a38))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_llist$)) (=> (and (fun_app$ (pathsp$a ?v0) ?v1) (and (=> (= ?v1 lNil$a) false) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$a ?v2 lNil$a)) false)) (forall ((?v2 A_llist$) (?v3 A_llist$) (?v4 A_llist_llist$)) (=> (and (= ?v1 (lCons$a ?v2 (lCons$a ?v3 ?v4))) (and (fun_app$b (fun_app$c ?v0 ?v2) ?v3) (fun_app$ (pathsp$a ?v0) (lCons$a ?v3 ?v4)))) false))))) false)) :named a39))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (=> (and (fun_app$b (pathsp$b ?v0) ?v1) (and (=> (= ?v1 lNil$) false) (and (forall ((?v2 A$)) (=> (= ?v1 (lCons$ ?v2 lNil$)) false)) (forall ((?v2 A$) (?v3 A$) (?v4 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 (lCons$ ?v3 ?v4))) (and (fun_app$d (fun_app$e ?v0 ?v2) ?v3) (fun_app$b (pathsp$b ?v0) (lCons$ ?v3 ?v4)))) false))))) false)) :named a40))
(assert (! (forall ((?v0 A_llist_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_a_llist_llist_bool_fun_fun$)) (=> (and (fun_app$f ?v0 ?v1) (forall ((?v3 A_llist_llist_llist$)) (=> (fun_app$f ?v0 ?v3) (or (= ?v3 lNil$b) (or (exists ((?v4 A_llist_llist$)) (= ?v3 (lCons$b ?v4 lNil$b))) (exists ((?v4 A_llist_llist$) (?v5 A_llist_llist$) (?v6 A_llist_llist_llist$)) (and (= ?v3 (lCons$b ?v4 (lCons$b ?v5 ?v6))) (and (fun_app$ (fun_app$a ?v2 ?v4) ?v5) (or (fun_app$f ?v0 (lCons$b ?v5 ?v6)) (fun_app$f (pathsp$ ?v2) (lCons$b ?v5 ?v6))))))))))) (fun_app$f (pathsp$ ?v2) ?v1))) :named a41))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_bool_fun_fun$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 A_llist_llist$)) (=> (fun_app$ ?v0 ?v3) (or (= ?v3 lNil$a) (or (exists ((?v4 A_llist$)) (= ?v3 (lCons$a ?v4 lNil$a))) (exists ((?v4 A_llist$) (?v5 A_llist$) (?v6 A_llist_llist$)) (and (= ?v3 (lCons$a ?v4 (lCons$a ?v5 ?v6))) (and (fun_app$b (fun_app$c ?v2 ?v4) ?v5) (or (fun_app$ ?v0 (lCons$a ?v5 ?v6)) (fun_app$ (pathsp$a ?v2) (lCons$a ?v5 ?v6))))))))))) (fun_app$ (pathsp$a ?v2) ?v1))) :named a42))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v3 A_llist$)) (=> (fun_app$b ?v0 ?v3) (or (= ?v3 lNil$) (or (exists ((?v4 A$)) (= ?v3 (lCons$ ?v4 lNil$))) (exists ((?v4 A$) (?v5 A$) (?v6 A_llist$)) (and (= ?v3 (lCons$ ?v4 (lCons$ ?v5 ?v6))) (and (fun_app$d (fun_app$e ?v2 ?v4) ?v5) (or (fun_app$b ?v0 (lCons$ ?v5 ?v6)) (fun_app$b (pathsp$b ?v2) (lCons$ ?v5 ?v6))))))))))) (fun_app$b (pathsp$b ?v2) ?v1))) :named a43))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_llist_llist$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (fun_app$f (pathsp$ ?v0) (lCons$b ?v2 ?v3))) (fun_app$f (pathsp$ ?v0) (lCons$b ?v1 (lCons$b ?v2 ?v3))))) :named a44))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (fun_app$ (pathsp$a ?v0) (lCons$a ?v2 ?v3))) (fun_app$ (pathsp$a ?v0) (lCons$a ?v1 (lCons$a ?v2 ?v3))))) :named a45))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$)) (=> (and (fun_app$d (fun_app$e ?v0 ?v1) ?v2) (fun_app$b (pathsp$b ?v0) (lCons$ ?v2 ?v3))) (fun_app$b (pathsp$b ?v0) (lCons$ ?v1 (lCons$ ?v2 ?v3))))) :named a46))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist$)) (fun_app$f (pathsp$ ?v0) (lCons$b ?v1 lNil$b))) :named a47))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$)) (fun_app$ (pathsp$a ?v0) (lCons$a ?v1 lNil$a))) :named a48))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$)) (fun_app$b (pathsp$b ?v0) (lCons$ ?v1 lNil$))) :named a49))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$)) (fun_app$ (pathsp$a ?v0) lNil$a)) :named a50))
(assert (! (forall ((?v0 A_a_bool_fun_fun$)) (fun_app$b (pathsp$b ?v0) lNil$)) :named a51))
(check-sat)
;(get-unsat-core)
