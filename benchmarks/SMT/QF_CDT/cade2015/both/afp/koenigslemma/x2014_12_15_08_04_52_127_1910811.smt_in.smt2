; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 260
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun x$ () A_llist$)
(declare-fun xa$ () A$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun x21$ () A$)
(declare-fun x22$ () A_llist$)
(declare-fun graph$ () A_a_bool_fun_fun$)
(declare-fun paths$ (A_a_bool_fun_fun$) A_llist_set$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun lappend$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$) Bool)
(assert (! (not (or (= x$ lNil$) (or (exists ((?v0 A$)) (= x$ (lCons$ ?v0 lNil$))) (exists ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (and (= x$ (lCons$ ?v0 (lCons$ ?v1 ?v2))) (and (fun_app$ (fun_app$a graph$ ?v0) ?v1) (or (member$ (fun_app$b (lappend$ (lCons$ ?v1 ?v2)) ys$) (paths$ graph$)) (member$ (lCons$ ?v1 ?v2) (paths$ graph$))))))))) :named a0))
(assert (! (= (fun_app$b (lappend$ x$) ys$) (lCons$ xa$ lNil$)) :named a1))
(assert (! (= x$ (lCons$ x21$ x22$)) :named a2))
(assert (! (member$ (fun_app$b (lappend$ xs$) ys$) (paths$ graph$)) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_bool_fun_fun$)) (= (member$ ?v0 (paths$ ?v1)) (or (= ?v0 lNil$) (or (exists ((?v2 A$)) (= ?v0 (lCons$ ?v2 lNil$))) (exists ((?v2 A$) (?v3 A$) (?v4 A_llist$)) (and (= ?v0 (lCons$ ?v2 (lCons$ ?v3 ?v4))) (and (fun_app$ (fun_app$a ?v1 ?v2) ?v3) (member$ (lCons$ ?v3 ?v4) (paths$ ?v1))))))))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (member$ (lCons$ ?v0 ?v1) (paths$ ?v2)) (member$ ?v1 (paths$ ?v2)))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_bool_fun_fun$)) (=> (and (member$ ?v0 (paths$ ?v1)) (and (=> (= ?v0 lNil$) false) (and (forall ((?v2 A$)) (=> (= ?v0 (lCons$ ?v2 lNil$)) false)) (forall ((?v2 A$) (?v3 A$) (?v4 A_llist$)) (=> (and (= ?v0 (lCons$ ?v2 (lCons$ ?v3 ?v4))) (and (fun_app$ (fun_app$a ?v1 ?v2) ?v3) (member$ (lCons$ ?v3 ?v4) (paths$ ?v1)))) false))))) false)) :named a6))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (and (fun_app$c ?v0 ?v1) (forall ((?v3 A_llist$)) (=> (fun_app$c ?v0 ?v3) (or (= ?v3 lNil$) (or (exists ((?v4 A$)) (= ?v3 (lCons$ ?v4 lNil$))) (exists ((?v4 A$) (?v5 A$) (?v6 A_llist$)) (and (= ?v3 (lCons$ ?v4 (lCons$ ?v5 ?v6))) (and (fun_app$ (fun_app$a ?v2 ?v4) ?v5) (or (fun_app$c ?v0 (lCons$ ?v5 ?v6)) (member$ (lCons$ ?v5 ?v6) (paths$ ?v2))))))))))) (member$ ?v1 (paths$ ?v2)))) :named a7))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (member$ (lCons$ ?v2 ?v3) (paths$ ?v0))) (member$ (lCons$ ?v1 (lCons$ ?v2 ?v3)) (paths$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_a_bool_fun_fun$)) (member$ (lCons$ ?v0 lNil$) (paths$ ?v1))) :named a9))
(assert (! (forall ((?v0 A_a_bool_fun_fun$)) (member$ lNil$ (paths$ ?v0))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$b (lappend$ ?v0) lNil$) ?v0) :pattern ((lappend$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$b (lappend$ lNil$) ?v0) ?v0) :pattern ((fun_app$b (lappend$ lNil$) ?v0)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$b (lappend$ (lCons$ ?v0 ?v1)) ?v2) (lCons$ ?v0 (fun_app$b (lappend$ ?v1) ?v2))) :pattern ((fun_app$b (lappend$ (lCons$ ?v0 ?v1)) ?v2)))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$b (lappend$ (fun_app$b (lappend$ ?v0) (lCons$ ?v1 lNil$))) ?v2) (fun_app$b (lappend$ ?v0) (lCons$ ?v1 ?v2)))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= lNil$ (fun_app$b (lappend$ ?v0) ?v1)) (and (= ?v0 lNil$) (= ?v1 lNil$)))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (fun_app$b (lappend$ ?v0) ?v1) lNil$) (and (= ?v0 lNil$) (= ?v1 lNil$)))) :named a17))
(assert (! (= (fun_app$b (lappend$ lNil$) lNil$) lNil$) :named a18))
(assert (! (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))) :named a19))
(check-sat)
;(get-unsat-core)
