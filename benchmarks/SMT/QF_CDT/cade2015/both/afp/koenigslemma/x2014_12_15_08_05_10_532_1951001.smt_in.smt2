; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 214
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))))
(declare-fun n$ () A$)
(declare-fun x$ () A$)
(declare-fun xs$ () A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun graph$ () A_a_bool_fun_fun$)
(declare-fun lset$a (A_llist_llist_llist$) A_llist_llist_set$)
(declare-fun lset$b (A_llist_llist$) A_llist_set$)
(declare-fun paths$ (A_a_bool_fun_fun$) A_llist_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun paths$a (A_llist_a_llist_bool_fun_fun$) A_llist_llist_set$)
(declare-fun thesis$ () Bool)
(declare-fun fun_app$ (A_llist_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun member$b (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun fun_app$a (A_llist_llist_a_llist_llist_llist_bool_fun_fun$ A_llist_llist$) A_llist_llist_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_llist_bool_fun_fun$ A_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$e (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$f (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$g (A_bool_fun$ A$) Bool)
(declare-fun fun_app$h (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun lappend$a (A_llist_llist$ A_llist_llist$) A_llist_llist$)
(declare-fun lappend$b (A_llist_llist_llist$ A_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun lfinite$a (A_llist_llist$) Bool)
(declare-fun lfinite$b (A_llist_llist_llist$) Bool)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lfinite$ ?v0) (and (= xs$ (lappend$ ?v0 (lCons$ x$ ?v1))) (not (member$ x$ (lset$ ?v0))))) thesis$)) :named a1))
(assert (! (not (= n$ x$)) :named a2))
(assert (! (member$ x$ (lset$ xs$)) :named a3))
(assert (! (member$a (lCons$ n$ xs$) (paths$ graph$)) :named a4))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (lfinite$a (lappend$a ?v0 ?v1)) (and (lfinite$a ?v0) (lfinite$a ?v1)))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$ (lappend$ ?v0 ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1)))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (! (= (lappend$a (lCons$a ?v0 ?v1) ?v2) (lCons$a ?v0 (lappend$a ?v1 ?v2))) :pattern ((lappend$a (lCons$a ?v0 ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (lappend$ (lCons$ ?v0 ?v1) ?v2) (lCons$ ?v0 (lappend$ ?v1 ?v2))) :pattern ((lappend$ (lCons$ ?v0 ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$)) (=> (member$b ?v0 (lset$a ?v1)) (exists ((?v2 A_llist_llist_llist$) (?v3 A_llist_llist_llist$)) (and (= ?v1 (lappend$b ?v2 (lCons$b ?v0 ?v3))) (and (lfinite$b ?v2) (not (member$b ?v0 (lset$a ?v2)))))))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (member$a ?v0 (lset$b ?v1)) (exists ((?v2 A_llist_llist$) (?v3 A_llist_llist$)) (and (= ?v1 (lappend$a ?v2 (lCons$a ?v0 ?v3))) (and (lfinite$a ?v2) (not (member$a ?v0 (lset$b ?v2)))))))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$ ?v0 (lset$ ?v1)) (exists ((?v2 A_llist$) (?v3 A_llist$)) (and (= ?v1 (lappend$ ?v2 (lCons$ ?v0 ?v3))) (and (lfinite$ ?v2) (not (member$ ?v0 (lset$ ?v2)))))))) :named a15))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$)) (=> (member$b ?v0 (lset$a ?v1)) (exists ((?v2 A_llist_llist_llist$) (?v3 A_llist_llist_llist$)) (and (= ?v1 (lappend$b ?v2 (lCons$b ?v0 ?v3))) (lfinite$b ?v2))))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (member$a ?v0 (lset$b ?v1)) (exists ((?v2 A_llist_llist$) (?v3 A_llist_llist$)) (and (= ?v1 (lappend$a ?v2 (lCons$a ?v0 ?v3))) (lfinite$a ?v2))))) :named a17))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$ ?v0 (lset$ ?v1)) (exists ((?v2 A_llist$) (?v3 A_llist$)) (and (= ?v1 (lappend$ ?v2 (lCons$ ?v0 ?v3))) (lfinite$ ?v2))))) :named a18))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_llist$)) (= (member$b ?v0 (lset$a (lappend$b ?v1 ?v2))) (or (member$b ?v0 (lset$a ?v1)) (and (lfinite$b ?v1) (member$b ?v0 (lset$a ?v2)))))) :named a19))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (= (member$a ?v0 (lset$b (lappend$a ?v1 ?v2))) (or (member$a ?v0 (lset$b ?v1)) (and (lfinite$a ?v1) (member$a ?v0 (lset$b ?v2)))))) :named a20))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (member$ ?v0 (lset$ (lappend$ ?v1 ?v2))) (or (member$ ?v0 (lset$ ?v1)) (and (lfinite$ ?v1) (member$ ?v0 (lset$ ?v2)))))) :named a21))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a22))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a23))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (! (=> (not (lfinite$a ?v0)) (= (lappend$a ?v0 ?v1) ?v0)) :pattern ((lappend$a ?v0 ?v1)))) :named a24))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (lappend$ ?v0 ?v1) ?v0)) :pattern ((lappend$ ?v0 ?v1)))) :named a25))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (lfinite$a ?v0) (lfinite$a (lCons$a ?v1 ?v0)))) :named a26))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (lfinite$ ?v0) (lfinite$ (lCons$ ?v1 ?v0)))) :named a27))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_a_llist_llist_llist_bool_fun_fun$)) (=> (and (member$b ?v0 (lset$a ?v1)) (and (forall ((?v3 A_llist_llist$) (?v4 A_llist_llist_llist$)) (fun_app$ (fun_app$a ?v2 ?v3) (lCons$b ?v3 ?v4))) (forall ((?v3 A_llist_llist$) (?v4 A_llist_llist_llist$) (?v5 A_llist_llist$)) (=> (and (member$b ?v5 (lset$a ?v4)) (fun_app$ (fun_app$a ?v2 ?v5) ?v4)) (fun_app$ (fun_app$a ?v2 ?v5) (lCons$b ?v3 ?v4)))))) (fun_app$ (fun_app$a ?v2 ?v0) ?v1))) :named a28))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_llist_bool_fun_fun$)) (=> (and (member$a ?v0 (lset$b ?v1)) (and (forall ((?v3 A_llist$) (?v4 A_llist_llist$)) (fun_app$b (fun_app$c ?v2 ?v3) (lCons$a ?v3 ?v4))) (forall ((?v3 A_llist$) (?v4 A_llist_llist$) (?v5 A_llist$)) (=> (and (member$a ?v5 (lset$b ?v4)) (fun_app$b (fun_app$c ?v2 ?v5) ?v4)) (fun_app$b (fun_app$c ?v2 ?v5) (lCons$a ?v3 ?v4)))))) (fun_app$b (fun_app$c ?v2 ?v0) ?v1))) :named a29))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A$) (?v4 A_llist$)) (fun_app$d (fun_app$e ?v2 ?v3) (lCons$ ?v3 ?v4))) (forall ((?v3 A$) (?v4 A_llist$) (?v5 A$)) (=> (and (member$ ?v5 (lset$ ?v4)) (fun_app$d (fun_app$e ?v2 ?v5) ?v4)) (fun_app$d (fun_app$e ?v2 ?v5) (lCons$ ?v3 ?v4)))))) (fun_app$d (fun_app$e ?v2 ?v0) ?v1))) :named a30))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (=> (and (fun_app$d (fun_app$f ?v0 ?v1) ?v2) (member$b (lCons$a ?v2 ?v3) (paths$a ?v0))) (member$b (lCons$a ?v1 (lCons$a ?v2 ?v3)) (paths$a ?v0)))) :named a31))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$)) (=> (and (fun_app$g (fun_app$h ?v0 ?v1) ?v2) (member$a (lCons$ ?v2 ?v3) (paths$ ?v0))) (member$a (lCons$ ?v1 (lCons$ ?v2 ?v3)) (paths$ ?v0)))) :named a32))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_bool_fun_fun$)) (=> (member$b (lCons$a ?v0 ?v1) (paths$a ?v2)) (member$b ?v1 (paths$a ?v2)))) :named a33))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (member$a (lCons$ ?v0 ?v1) (paths$ ?v2)) (member$a ?v1 (paths$ ?v2)))) :named a34))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_bool_fun_fun$)) (=> (member$b (lappend$a ?v0 ?v1) (paths$a ?v2)) (member$b ?v0 (paths$a ?v2)))) :named a35))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (member$a (lappend$ ?v0 ?v1) (paths$ ?v2)) (member$a ?v0 (paths$ ?v2)))) :named a36))
(check-sat)
;(get-unsat-core)
