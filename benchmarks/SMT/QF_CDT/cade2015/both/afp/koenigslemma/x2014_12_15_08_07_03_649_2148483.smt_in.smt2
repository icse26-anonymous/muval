; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 221
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Node$ 0)
(declare-sort Node_set$ 0)
(declare-sort Node_bool_fun$ 0)
(declare-sort Node_node_bool_fun_fun$ 0)
(declare-codatatypes () ((Node_llist$ (lNil$) (lCons$ (lhd$ Node$) (ltl$ Node_llist$)))))
(declare-datatypes () ((Node_node_set_prod$ (pair$ (fst$ Node$) (snd$ Node_set$)))))
(declare-fun f$ (Node_node_set_prod$) Node_llist$)
(declare-fun n$ () Node$)
(declare-fun ns$ () Node_set$)
(declare-fun bot$ () Node_set$)
(declare-fun lset$ (Node_llist$) Node_set$)
(declare-fun graph$ () Node_node_bool_fun_fun$)
(declare-fun member$ (Node$ Node_set$) Bool)
(declare-fun collect$ (Node_bool_fun$) Node_set$)
(declare-fun fun_app$ (Node_bool_fun$ Node$) Bool)
(declare-fun lfinite$ (Node_llist$) Bool)
(declare-fun connected$ (Node_node_bool_fun_fun$) Bool)
(assert (! (not false) :named a0))
(assert (! (= ns$ bot$) :named a1))
(assert (! (connected$ graph$) :named a2))
(assert (! (lfinite$ (f$ (pair$ n$ ns$))) :named a3))
(assert (! (forall ((?v0 Node_bool_fun$)) (= (= (collect$ ?v0) bot$) (forall ((?v1 Node$)) (not (fun_app$ ?v0 ?v1))))) :named a4))
(assert (! (forall ((?v0 Node_set$)) (= (forall ((?v1 Node$)) (not (member$ ?v1 ?v0))) (= ?v0 bot$))) :named a5))
(assert (! (forall ((?v0 Node_bool_fun$)) (= (= bot$ (collect$ ?v0)) (forall ((?v1 Node$)) (not (fun_app$ ?v0 ?v1))))) :named a6))
(assert (! (forall ((?v0 Node$)) (= (member$ ?v0 bot$) false)) :named a7))
(assert (! (forall ((?v0 Node_set$)) (= (exists ((?v1 Node$)) (member$ ?v1 ?v0)) (not (= ?v0 bot$)))) :named a8))
(assert (! (forall ((?v0 Node_set$)) (=> (forall ((?v1 Node$)) (=> (member$ ?v1 ?v0) false)) (= ?v0 bot$))) :named a9))
(assert (! (forall ((?v0 Node_set$) (?v1 Node$)) (=> (= ?v0 bot$) (not (member$ ?v1 ?v0)))) :named a10))
(assert (! (forall ((?v0 Node$)) (=> (member$ ?v0 bot$) false)) :named a11))
(assert (! (member$ n$ (lset$ (f$ (pair$ n$ ns$)))) :named a12))
(check-sat)
;(get-unsat-core)
