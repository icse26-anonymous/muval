; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 204
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_llist_set$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_llist_llist_set$ 0)
(declare-sort A_llist_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))
  (A_llist_llist_llist_llist$ (lNil$c) (lCons$c (lhd$c A_llist_llist_llist$) (ltl$c A_llist_llist_llist_llist$)))))
(declare-fun n$ () A$)
(declare-fun x$ () A$)
(declare-fun n$a () A$)
(declare-fun ns$ () A_set$)
(declare-fun xs$ () A_llist$)
(declare-fun xs$a () A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun graph$ () A_a_bool_fun_fun$)
(declare-fun lset$a (A_llist_llist_llist_llist$) A_llist_llist_llist_set$)
(declare-fun lset$b (A_llist_llist_llist$) A_llist_llist_set$)
(declare-fun lset$c (A_llist_llist$) A_llist_set$)
(declare-fun paths$ (A_a_bool_fun_fun$) A_llist_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun paths$a (A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$) A_llist_llist_llist_llist_set$)
(declare-fun paths$b (A_llist_llist_a_llist_llist_bool_fun_fun$) A_llist_llist_llist_set$)
(declare-fun paths$c (A_llist_a_llist_bool_fun_fun$) A_llist_llist_set$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun less_eq$ (A_set$ A_set$) Bool)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun member$b (A_llist_llist_llist$ A_llist_llist_llist_set$) Bool)
(declare-fun member$c (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_set$) Bool)
(declare-fun member$d (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$b (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$c (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$e (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun less_eq$a (A_llist_llist_llist_set$ A_llist_llist_llist_set$) Bool)
(declare-fun less_eq$b (A_llist_llist_set$ A_llist_llist_set$) Bool)
(declare-fun less_eq$c (A_llist_set$ A_llist_set$) Bool)
(declare-fun reachable_via$ (A_a_bool_fun_fun$ A_set$ A$) A_set$)
(declare-fun reachable_via$a (A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ A_llist_llist_llist_set$ A_llist_llist_llist$) A_llist_llist_llist_set$)
(declare-fun reachable_via$b (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist_set$ A_llist_llist$) A_llist_llist_set$)
(declare-fun reachable_via$c (A_llist_a_llist_bool_fun_fun$ A_llist_set$ A_llist$) A_llist_set$)
(assert (! (not (member$ n$ ns$)) :named a0))
(assert (! (member$ x$ (lset$ xs$)) :named a1))
(assert (! (=> (forall ((?v0 A$) (?v1 A_llist$)) (=> (= xs$ (lCons$ ?v0 ?v1)) false)) false) :named a2))
(assert (! (= xs$ (lCons$ n$ xs$a)) :named a3))
(assert (! (less_eq$ (lset$ xs$) ns$) :named a4))
(assert (! (fun_app$ (fun_app$a graph$ n$a) n$) :named a5))
(assert (! (member$ x$ (reachable_via$ graph$ ns$ n$a)) :named a6))
(assert (! (=> (forall ((?v0 A_llist$)) (=> (and (member$a (lCons$ n$a ?v0) (paths$ graph$)) (and (member$ x$ (lset$ ?v0)) (less_eq$ (lset$ ?v0) ns$))) false)) false) :named a7))
(assert (! (member$a (lCons$ n$a xs$) (paths$ graph$)) :named a8))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$) (?v2 A_llist_llist_llist_set$) (?v3 A_llist_llist_llist$)) (= (member$b ?v0 (reachable_via$a ?v1 ?v2 ?v3)) (exists ((?v4 A_llist_llist_llist_llist$) (?v5 A_llist_llist_llist$)) (and (= ?v0 ?v5) (and (member$c (lCons$c ?v3 ?v4) (paths$a ?v1)) (and (member$b ?v5 (lset$a ?v4)) (less_eq$a (lset$a ?v4) ?v2))))))) :named a9))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v2 A_llist_llist_set$) (?v3 A_llist_llist$)) (= (member$d ?v0 (reachable_via$b ?v1 ?v2 ?v3)) (exists ((?v4 A_llist_llist_llist$) (?v5 A_llist_llist$)) (and (= ?v0 ?v5) (and (member$b (lCons$b ?v3 ?v4) (paths$b ?v1)) (and (member$d ?v5 (lset$b ?v4)) (less_eq$b (lset$b ?v4) ?v2))))))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist_set$) (?v3 A_llist$)) (= (member$a ?v0 (reachable_via$c ?v1 ?v2 ?v3)) (exists ((?v4 A_llist_llist$) (?v5 A_llist$)) (and (= ?v0 ?v5) (and (member$d (lCons$a ?v3 ?v4) (paths$c ?v1)) (and (member$a ?v5 (lset$c ?v4)) (less_eq$c (lset$c ?v4) ?v2))))))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_a_bool_fun_fun$) (?v2 A_set$) (?v3 A$)) (= (member$ ?v0 (reachable_via$ ?v1 ?v2 ?v3)) (exists ((?v4 A_llist$) (?v5 A$)) (and (= ?v0 ?v5) (and (member$a (lCons$ ?v3 ?v4) (paths$ ?v1)) (and (member$ ?v5 (lset$ ?v4)) (less_eq$ (lset$ ?v4) ?v2))))))) :named a12))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist_llist$) (?v2 A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$) (?v3 A_llist_llist_llist$) (?v4 A_llist_llist_llist_set$)) (=> (and (member$c (lCons$c ?v0 ?v1) (paths$a ?v2)) (and (member$b ?v3 (lset$a ?v1)) (less_eq$a (lset$a ?v1) ?v4))) (member$b ?v3 (reachable_via$a ?v2 ?v4 ?v0)))) :named a13))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v3 A_llist_llist$) (?v4 A_llist_llist_set$)) (=> (and (member$b (lCons$b ?v0 ?v1) (paths$b ?v2)) (and (member$d ?v3 (lset$b ?v1)) (less_eq$b (lset$b ?v1) ?v4))) (member$d ?v3 (reachable_via$b ?v2 ?v4 ?v0)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist$) (?v4 A_llist_set$)) (=> (and (member$d (lCons$a ?v0 ?v1) (paths$c ?v2)) (and (member$a ?v3 (lset$c ?v1)) (less_eq$c (lset$c ?v1) ?v4))) (member$a ?v3 (reachable_via$c ?v2 ?v4 ?v0)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$) (?v3 A$) (?v4 A_set$)) (=> (and (member$a (lCons$ ?v0 ?v1) (paths$ ?v2)) (and (member$ ?v3 (lset$ ?v1)) (less_eq$ (lset$ ?v1) ?v4))) (member$ ?v3 (reachable_via$ ?v2 ?v4 ?v0)))) :named a16))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist_llist$) (?v2 A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$) (?v3 A_llist_llist_llist$)) (=> (and (member$c (lCons$c ?v0 ?v1) (paths$a ?v2)) (and (member$b ?v3 (lset$a ?v1)) (not (= ?v0 ?v3)))) (exists ((?v4 A_llist_llist_llist_llist$)) (and (member$c (lCons$c ?v0 ?v4) (paths$a ?v2)) (and (less_eq$a (lset$a ?v4) (lset$a ?v1)) (and (member$b ?v3 (lset$a ?v4)) (not (member$b ?v0 (lset$a ?v4))))))))) :named a17))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v3 A_llist_llist$)) (=> (and (member$b (lCons$b ?v0 ?v1) (paths$b ?v2)) (and (member$d ?v3 (lset$b ?v1)) (not (= ?v0 ?v3)))) (exists ((?v4 A_llist_llist_llist$)) (and (member$b (lCons$b ?v0 ?v4) (paths$b ?v2)) (and (less_eq$b (lset$b ?v4) (lset$b ?v1)) (and (member$d ?v3 (lset$b ?v4)) (not (member$d ?v0 (lset$b ?v4))))))))) :named a18))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist$)) (=> (and (member$d (lCons$a ?v0 ?v1) (paths$c ?v2)) (and (member$a ?v3 (lset$c ?v1)) (not (= ?v0 ?v3)))) (exists ((?v4 A_llist_llist$)) (and (member$d (lCons$a ?v0 ?v4) (paths$c ?v2)) (and (less_eq$c (lset$c ?v4) (lset$c ?v1)) (and (member$a ?v3 (lset$c ?v4)) (not (member$a ?v0 (lset$c ?v4))))))))) :named a19))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$) (?v3 A$)) (=> (and (member$a (lCons$ ?v0 ?v1) (paths$ ?v2)) (and (member$ ?v3 (lset$ ?v1)) (not (= ?v0 ?v3)))) (exists ((?v4 A_llist$)) (and (member$a (lCons$ ?v0 ?v4) (paths$ ?v2)) (and (less_eq$ (lset$ ?v4) (lset$ ?v1)) (and (member$ ?v3 (lset$ ?v4)) (not (member$ ?v0 (lset$ ?v4))))))))) :named a20))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_a_llist_llist_bool_fun_fun$)) (=> (member$b (lCons$b ?v0 ?v1) (paths$b ?v2)) (member$b ?v1 (paths$b ?v2)))) :named a21))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_bool_fun_fun$)) (=> (member$d (lCons$a ?v0 ?v1) (paths$c ?v2)) (member$d ?v1 (paths$c ?v2)))) :named a22))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (member$a (lCons$ ?v0 ?v1) (paths$ ?v2)) (member$a ?v1 (paths$ ?v2)))) :named a23))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$) (?v2 A_llist_llist_llist_set$) (?v3 A_llist_llist_llist$)) (=> (and (member$b ?v0 (reachable_via$a ?v1 ?v2 ?v3)) (forall ((?v4 A_llist_llist_llist_llist$) (?v5 A_llist_llist_llist$)) (=> (and (= ?v0 ?v5) (and (member$c (lCons$c ?v3 ?v4) (paths$a ?v1)) (and (member$b ?v5 (lset$a ?v4)) (less_eq$a (lset$a ?v4) ?v2)))) false))) false)) :named a24))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v2 A_llist_llist_set$) (?v3 A_llist_llist$)) (=> (and (member$d ?v0 (reachable_via$b ?v1 ?v2 ?v3)) (forall ((?v4 A_llist_llist_llist$) (?v5 A_llist_llist$)) (=> (and (= ?v0 ?v5) (and (member$b (lCons$b ?v3 ?v4) (paths$b ?v1)) (and (member$d ?v5 (lset$b ?v4)) (less_eq$b (lset$b ?v4) ?v2)))) false))) false)) :named a25))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist_set$) (?v3 A_llist$)) (=> (and (member$a ?v0 (reachable_via$c ?v1 ?v2 ?v3)) (forall ((?v4 A_llist_llist$) (?v5 A_llist$)) (=> (and (= ?v0 ?v5) (and (member$d (lCons$a ?v3 ?v4) (paths$c ?v1)) (and (member$a ?v5 (lset$c ?v4)) (less_eq$c (lset$c ?v4) ?v2)))) false))) false)) :named a26))
(assert (! (forall ((?v0 A$) (?v1 A_a_bool_fun_fun$) (?v2 A_set$) (?v3 A$)) (=> (and (member$ ?v0 (reachable_via$ ?v1 ?v2 ?v3)) (forall ((?v4 A_llist$) (?v5 A$)) (=> (and (= ?v0 ?v5) (and (member$a (lCons$ ?v3 ?v4) (paths$ ?v1)) (and (member$ ?v5 (lset$ ?v4)) (less_eq$ (lset$ ?v4) ?v2)))) false))) false)) :named a27))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_llist_llist$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (member$b (lCons$b ?v2 ?v3) (paths$b ?v0))) (member$b (lCons$b ?v1 (lCons$b ?v2 ?v3)) (paths$b ?v0)))) :named a28))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (=> (and (fun_app$d (fun_app$e ?v0 ?v1) ?v2) (member$d (lCons$a ?v2 ?v3) (paths$c ?v0))) (member$d (lCons$a ?v1 (lCons$a ?v2 ?v3)) (paths$c ?v0)))) :named a29))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (member$a (lCons$ ?v2 ?v3) (paths$ ?v0))) (member$a (lCons$ ?v1 (lCons$ ?v2 ?v3)) (paths$ ?v0)))) :named a30))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_llist_llist$)) (= (= (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a31))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a32))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a33))
(assert (! (forall ((?v0 A_llist_llist_llist_set$) (?v1 A_llist_llist_llist_set$)) (=> (forall ((?v2 A_llist_llist_llist$)) (=> (member$b ?v2 ?v0) (member$b ?v2 ?v1))) (less_eq$a ?v0 ?v1))) :named a34))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist_set$)) (=> (forall ((?v2 A_llist_llist$)) (=> (member$d ?v2 ?v0) (member$d ?v2 ?v1))) (less_eq$b ?v0 ?v1))) :named a35))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (=> (forall ((?v2 A_llist$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1))) (less_eq$c ?v0 ?v1))) :named a36))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))) (less_eq$ ?v0 ?v1))) :named a37))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist_set$)) (=> (and (less_eq$b ?v0 ?v1) (less_eq$b ?v1 ?v0)) (= ?v0 ?v1))) :named a38))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (=> (and (less_eq$c ?v0 ?v1) (less_eq$c ?v1 ?v0)) (= ?v0 ?v1))) :named a39))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a40))
(check-sat)
;(get-unsat-core)
