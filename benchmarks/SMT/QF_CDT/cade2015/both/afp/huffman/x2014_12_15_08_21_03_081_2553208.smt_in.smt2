; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 681
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))))
(declare-fun a$ () A$)
(declare-fun w$ () Nat$)
(declare-fun t_1$ () A_tree$)
(declare-fun t_2$ () A_tree$)
(declare-fun cost$ (A_tree$) Nat$)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun zero$ () Nat$)
(declare-fun height$ (A_tree$) Nat$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun mergeSibling$ (A_tree$ A$) A_tree$)
(assert (! (not (= (mergeSibling$ (innerNode$ w$ t_1$ t_2$) a$) (innerNode$ w$ (mergeSibling$ t_1$ a$) (mergeSibling$ t_2$ a$)))) :named a0))
(assert (! (fun_app$ (less$ zero$) (height$ t_2$)) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$) (?v3 Nat$) (?v4 A_tree$) (?v5 A_tree$)) (= (= (innerNode$ ?v0 ?v1 ?v2) (innerNode$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a2))
(assert (! (forall ((?v0 A_tree$) (?v1 Nat$) (?v2 A_tree$) (?v3 A$)) (! (=> (fun_app$ (less$ zero$) (height$ ?v0)) (= (mergeSibling$ (innerNode$ ?v1 ?v0 ?v2) ?v3) (innerNode$ ?v1 (mergeSibling$ ?v0 ?v3) (mergeSibling$ ?v2 ?v3)))) :pattern ((mergeSibling$ (innerNode$ ?v1 ?v0 ?v2) ?v3)))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_tree$) (?v3 A_tree$) (?v4 A_tree$) (?v5 A$)) (! (= (mergeSibling$ (innerNode$ ?v0 (innerNode$ ?v1 ?v2 ?v3) ?v4) ?v5) (innerNode$ ?v0 (mergeSibling$ (innerNode$ ?v1 ?v2 ?v3) ?v5) (mergeSibling$ ?v4 ?v5))) :pattern ((mergeSibling$ (innerNode$ ?v0 (innerNode$ ?v1 ?v2 ?v3) ?v4) ?v5)))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 Nat$) (?v3 A_tree$) (?v4 A_tree$) (?v5 A$)) (! (= (mergeSibling$ (innerNode$ ?v0 ?v1 (innerNode$ ?v2 ?v3 ?v4)) ?v5) (innerNode$ ?v0 (mergeSibling$ ?v1 ?v5) (mergeSibling$ (innerNode$ ?v2 ?v3 ?v4) ?v5))) :pattern ((mergeSibling$ (innerNode$ ?v0 ?v1 (innerNode$ ?v2 ?v3 ?v4)) ?v5)))) :named a5))
(assert (! (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$ (less$ zero$) ?v0))) :named a6))
(assert (! (forall ((?v0 Nat$)) (= (not (fun_app$ (less$ zero$) ?v0)) (= ?v0 zero$))) :named a7))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (less$ ?v0) zero$) false) :pattern ((less$ ?v0)))) :named a8))
(assert (! (forall ((?v0 Nat$)) (=> (=> (= ?v0 zero$) false) (fun_app$ (less$ zero$) ?v0))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (not (= ?v1 zero$)))) :named a10))
(assert (! (forall ((?v0 Nat$)) (=> (fun_app$ (less$ ?v0) zero$) false)) :named a11))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 zero$) (forall ((?v2 Nat$)) (=> (and (fun_app$ (less$ zero$) ?v2) (not (fun_app$ ?v0 ?v2))) (exists ((?v3 Nat$)) (and (fun_app$ (less$ ?v3) ?v2) (not (fun_app$ ?v0 ?v3))))))) (fun_app$ ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Nat$)) (not (fun_app$ (less$ ?v0) zero$))) :named a13))
(assert (! (not (fun_app$ (less$ zero$) zero$)) :named a14))
(assert (! (forall ((?v0 A_tree$)) (! (=> (= (height$ ?v0) zero$) (= (cost$ ?v0) zero$)) :pattern ((cost$ ?v0)))) :named a15))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a16))
(check-sat)
;(get-unsat-core)
