; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 655
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))))
(declare-fun aa$ () A$)
(declare-fun bot$ () A_set$)
(declare-fun inf$ (A_set$ A_set$) A_set$)
(declare-fun t_1$ () A_tree$)
(declare-fun t_2$ () A_tree$)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun zero$ () Nat$)
(declare-fun height$ (A_tree$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun sibling$ (A_tree$ A$) A$)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun consistent$ (A_tree$) Bool)
(declare-fun uniteTrees$ (A_tree$ A_tree$) A_tree$)
(assert (! (not (and (or (fun_app$ (less$ zero$) (height$ t_1$)) (fun_app$ (less$ zero$) (height$ t_2$))) (and (not (member$ aa$ (alphabet$ t_1$))) (and (not (member$ (sibling$ t_2$ aa$) (alphabet$ t_1$))) (and (member$ aa$ (alphabet$ t_2$)) (member$ (sibling$ t_2$ aa$) (alphabet$ t_2$))))))) :named a0))
(assert (! (consistent$ t_1$) :named a1))
(assert (! (consistent$ t_2$) :named a2))
(assert (! (= (inf$ (alphabet$ t_1$) (alphabet$ t_2$)) bot$) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 A$)) (=> (= t_1$ (leaf$ ?v0 ?v1)) (forall ((?v2 Nat$) (?v3 A$)) (or (= ?v1 ?v3) (not (= t_2$ (leaf$ ?v2 ?v3))))))) :named a4))
(assert (! (=> (and (member$ (sibling$ t_1$ aa$) (alphabet$ t_1$)) (member$ aa$ (alphabet$ t_1$))) (or (and (= (height$ t_1$) zero$) (= (height$ t_2$) zero$)) (or (member$ aa$ (alphabet$ t_2$)) (member$ (sibling$ t_1$ aa$) (alphabet$ t_2$))))) :named a5))
(assert (! (or (and (= (height$ t_1$) zero$) (= (height$ t_2$) zero$)) (or (member$ aa$ (alphabet$ t_1$)) (member$ aa$ (alphabet$ t_2$)))) :named a6))
(assert (! (and (= (height$ t_1$) zero$) (= (height$ t_2$) zero$)) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 Nat$) (?v3 A$)) (= (= (leaf$ ?v0 ?v1) (leaf$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (! (=> (not (member$ ?v0 (alphabet$ ?v1))) (= (sibling$ ?v1 ?v0) ?v0)) :pattern ((sibling$ ?v1 ?v0)))) :named a9))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (! (=> (= (height$ ?v0) zero$) (= (sibling$ ?v0 ?v1) ?v1)) :pattern ((sibling$ ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 A$)) (! (= (sibling$ (leaf$ ?v0 ?v1) ?v2) ?v2) :pattern ((sibling$ (leaf$ ?v0 ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 A$)) (! (= (consistent$ (leaf$ ?v0 ?v1)) true) :pattern ((leaf$ ?v0 ?v1)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 A$)) (! (= (height$ (leaf$ ?v0 ?v1)) zero$) :pattern ((leaf$ ?v0 ?v1)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (=> (member$ ?v0 (alphabet$ ?v1)) (member$ (sibling$ ?v1 ?v0) (alphabet$ ?v1)))) :named a14))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (=> (and (fun_app$ (less$ zero$) (height$ ?v0)) (and (consistent$ ?v0) (= (alphabet$ ?v0) (alphabet$ ?v1)))) (fun_app$ (less$ zero$) (height$ ?v1)))) :named a15))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (not (= (sibling$ ?v0 ?v1) ?v1)) (member$ (sibling$ ?v0 ?v1) (alphabet$ ?v0)))) :named a16))
(assert (! (forall ((?v0 A_tree$)) (exists ((?v1 A$)) (member$ ?v1 (alphabet$ ?v0)))) :named a17))
(assert (! (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$ (less$ zero$) ?v0))) :named a18))
(assert (! (forall ((?v0 Nat$)) (= (not (fun_app$ (less$ zero$) ?v0)) (= ?v0 zero$))) :named a19))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (less$ ?v0) zero$) false) :pattern ((less$ ?v0)))) :named a20))
(assert (! (forall ((?v0 A_set$)) (= (inf$ ?v0 bot$) bot$)) :named a21))
(assert (! (forall ((?v0 A_set$)) (= (inf$ bot$ ?v0) bot$)) :named a22))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (=> (and (consistent$ ?v0) (and (consistent$ ?v1) (= (inf$ (alphabet$ ?v0) (alphabet$ ?v1)) bot$))) (consistent$ (uniteTrees$ ?v0 ?v1)))) :named a23))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (member$ ?v0 (inf$ ?v1 ?v2)) (and (member$ ?v0 ?v1) (member$ ?v0 ?v2)))) :named a24))
(check-sat)
;(get-unsat-core)
