; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 644
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))))
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun d$ () A$)
(declare-fun w$ () Nat$)
(declare-fun t_1$ () A_tree$)
(declare-fun t_2$ () A_tree$)
(declare-fun w_a$ () Nat$)
(declare-fun w_d$ () Nat$)
(declare-fun w_s$ () Nat$)
(declare-fun zero$ () Nat$)
(declare-fun height$ (A_tree$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun sibling$ (A_tree$ A$) A$)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun pred_tree$ (A_bool_fun$ A_tree$) Bool)
(declare-fun consistent$ (A_tree$) Bool)
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$ A$) A_tree$)
(declare-fun cachedWeight$ (A_tree$) Nat$)
(assert (! (not (= (sibling$ (swapLeaves$ (innerNode$ w$ t_1$ t_2$) w_a$ a$ w_s$ (sibling$ (innerNode$ w$ t_1$ t_2$) b$)) a$) b$)) :named a0))
(assert (! (not (= d$ b$)) :named a1))
(assert (! (not (= a$ b$)) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$) (?v3 Nat$) (?v4 A_tree$) (?v5 A_tree$)) (= (= (innerNode$ ?v0 ?v1 ?v2) (innerNode$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a3))
(assert (! (not (= (sibling$ (innerNode$ w$ t_1$ t_2$) b$) b$)) :named a4))
(assert (! (consistent$ (innerNode$ w$ t_1$ t_2$)) :named a5))
(assert (! (=> (and (consistent$ t_2$) (and (not (= (sibling$ t_2$ b$) b$)) (not (= a$ b$)))) (= (sibling$ (swapLeaves$ t_2$ w_a$ a$ w_s$ (sibling$ t_2$ b$)) a$) b$)) :named a6))
(assert (! (=> (and (consistent$ t_1$) (and (not (= (sibling$ t_1$ b$) b$)) (not (= a$ b$)))) (= (sibling$ (swapLeaves$ t_1$ w_a$ a$ w_s$ (sibling$ t_1$ b$)) a$) b$)) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$) (?v3 Nat$) (?v4 A$) (?v5 Nat$) (?v6 A$)) (! (= (swapLeaves$ (innerNode$ ?v0 ?v1 ?v2) ?v3 ?v4 ?v5 ?v6) (innerNode$ ?v0 (swapLeaves$ ?v1 ?v3 ?v4 ?v5 ?v6) (swapLeaves$ ?v2 ?v3 ?v4 ?v5 ?v6))) :pattern ((swapLeaves$ (innerNode$ ?v0 ?v1 ?v2) ?v3 ?v4 ?v5 ?v6)))) :named a8))
(assert (! (= t_2$ (leaf$ w_d$ d$)) :named a9))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Nat$) (?v2 A_tree$) (?v3 A_tree$)) (! (= (pred_tree$ ?v0 (innerNode$ ?v1 ?v2 ?v3)) (and (pred_tree$ ?v0 ?v2) (pred_tree$ ?v0 ?v3))) :pattern ((pred_tree$ ?v0 (innerNode$ ?v1 ?v2 ?v3))))) :named a10))
(assert (! (not (= (height$ t_1$) zero$)) :named a11))
(assert (! (= (height$ t_2$) zero$) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (cachedWeight$ (innerNode$ ?v0 ?v1 ?v2)) ?v0) :pattern ((innerNode$ ?v0 ?v1 ?v2)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A$) (?v3 Nat$) (?v4 A$) (?v5 A$)) (! (= (sibling$ (innerNode$ ?v0 (leaf$ ?v1 ?v2) (leaf$ ?v3 ?v4)) ?v5) (ite (= ?v5 ?v2) ?v4 (ite (= ?v5 ?v4) ?v2 ?v5))) :pattern ((sibling$ (innerNode$ ?v0 (leaf$ ?v1 ?v2) (leaf$ ?v3 ?v4)) ?v5)))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_tree$) (?v3 A_tree$) (?v4 A_tree$) (?v5 A$)) (! (= (sibling$ (innerNode$ ?v0 (innerNode$ ?v1 ?v2 ?v3) ?v4) ?v5) (ite (member$ ?v5 (alphabet$ (innerNode$ ?v1 ?v2 ?v3))) (sibling$ (innerNode$ ?v1 ?v2 ?v3) ?v5) (ite (member$ ?v5 (alphabet$ ?v4)) (sibling$ ?v4 ?v5) ?v5))) :pattern ((sibling$ (innerNode$ ?v0 (innerNode$ ?v1 ?v2 ?v3) ?v4) ?v5)))) :named a15))
(check-sat)
;(get-unsat-core)
