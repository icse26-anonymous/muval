; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 675
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))
  (B_tree$ (leaf$a (selecte$ Nat$) (selectf$ B$)) (innerNode$a (selectg$ Nat$) (selecth$ B_tree$) (selecti$ B_tree$)))))
(declare-fun a$ () A$)
(declare-fun p$ () Bool)
(declare-fun max$ (Nat$ Nat$) Nat$)
(declare-fun t_1$ () B_tree$)
(declare-fun t_2$ () A_tree$)
(declare-fun depth$ (A_tree$ A$) Nat$)
(declare-fun depth$a (B_tree$ B$) Nat$)
(declare-fun height$ (B_tree$) Nat$)
(declare-fun height$a (A_tree$) Nat$)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(assert (! (not p$) :named a0))
(assert (! (= (depth$ t_2$ a$) (max$ (height$ t_1$) (height$a t_2$))) :named a1))
(assert (! (=> (and (= (depth$ t_2$ a$) (height$a t_2$)) (less_eq$ (height$ t_1$) (height$a t_2$))) p$) :named a2))
(assert (! (forall ((?v0 B_tree$) (?v1 B$) (?v2 B_tree$)) (=> (and (= (depth$a ?v0 ?v1) (max$ (height$ ?v0) (height$ ?v2))) (=> (and (= (depth$a ?v0 ?v1) (height$ ?v0)) (less_eq$ (height$ ?v2) (height$ ?v0))) false)) false)) :named a3))
(assert (! (forall ((?v0 B_tree$) (?v1 B$) (?v2 A_tree$)) (=> (and (= (depth$a ?v0 ?v1) (max$ (height$ ?v0) (height$a ?v2))) (=> (and (= (depth$a ?v0 ?v1) (height$ ?v0)) (less_eq$ (height$a ?v2) (height$ ?v0))) false)) false)) :named a4))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 B_tree$)) (=> (and (= (depth$ ?v0 ?v1) (max$ (height$a ?v0) (height$ ?v2))) (=> (and (= (depth$ ?v0 ?v1) (height$a ?v0)) (less_eq$ (height$ ?v2) (height$a ?v0))) false)) false)) :named a5))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$)) (=> (and (= (depth$ ?v0 ?v1) (max$ (height$a ?v0) (height$a ?v2))) (=> (and (= (depth$ ?v0 ?v1) (height$a ?v0)) (less_eq$ (height$a ?v2) (height$a ?v0))) false)) false)) :named a6))
(assert (! (forall ((?v0 B_tree$) (?v1 B$)) (less_eq$ (depth$a ?v0 ?v1) (height$ ?v0))) :named a7))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (less_eq$ (depth$ ?v0 ?v1) (height$a ?v0))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (less_eq$ (max$ ?v0 ?v1) ?v2) (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2)))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (less_eq$ ?v0 ?v1) (= (max$ ?v0 ?v1) ?v1))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (less_eq$ ?v0 ?v1) (= (max$ ?v1 ?v0) ?v1))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (max$ (max$ ?v0 ?v1) ?v1) (max$ ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (max$ ?v0 (max$ ?v0 ?v1)) (max$ ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 Nat$)) (= (max$ ?v0 ?v0) ?v0)) :named a14))
(assert (! (forall ((?v0 Nat$)) (less_eq$ ?v0 ?v0)) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (max$ ?v0 ?v1) (ite (less_eq$ ?v0 ?v1) ?v1 ?v0))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (less_eq$ ?v0 (max$ ?v1 ?v2)) (or (less_eq$ ?v0 ?v1) (less_eq$ ?v0 ?v2)))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less_eq$ ?v0 ?v1) (= (max$ ?v0 ?v1) ?v1)) :pattern ((less_eq$ ?v0 ?v1)))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less_eq$ ?v0 ?v1) (= (max$ ?v1 ?v0) ?v1)) :pattern ((less_eq$ ?v0 ?v1)))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less_eq$ ?v0 ?v1) (= ?v1 (max$ ?v1 ?v0))) :pattern ((less_eq$ ?v0 ?v1)))) :named a20))
(assert (! (forall ((?v0 Nat$)) (less_eq$ ?v0 ?v0)) :named a21))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (or (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0))) :named a22))
(check-sat)
;(get-unsat-core)
