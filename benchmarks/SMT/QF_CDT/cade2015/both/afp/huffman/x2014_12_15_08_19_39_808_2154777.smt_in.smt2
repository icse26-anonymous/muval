; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 685
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_nat_fun$ 0)
(declare-sort A_a_tree_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))))
(declare-fun b$ () A$)
(declare-fun aa$ () A$)
(declare-fun uu$ (A_tree$ A$ A$ Nat$ Nat$) A_nat_fun$)
(declare-fun bot$ () A_set$)
(declare-fun inf$ (A_set$ A_set$) A_set$)
(declare-fun t_1$ () A_tree$)
(declare-fun t_2$ () A_tree$)
(declare-fun w_a$ () Nat$)
(declare-fun w_b$ () Nat$)
(declare-fun freq$ (A_tree$) A_nat_fun$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun finite$ (A_set$) Bool)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun weight$ (A_tree$) Nat$)
(declare-fun fun_app$ (A_nat_fun$ A$) Nat$)
(declare-fun sibling$ (A_tree$ A$) A$)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun fun_app$a (A_a_tree_fun$ A$) A_tree$)
(declare-fun consistent$ (A_tree$) Bool)
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$) A_a_tree_fun$)
(declare-fun uniteTrees$ (A_tree$ A_tree$) A_tree$)
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 Nat$) (?v4 Nat$) (?v5 A$)) (! (= (fun_app$ (uu$ ?v0 ?v1 ?v2 ?v3 ?v4) ?v5) (ite (= ?v5 ?v1) (ite (member$ ?v2 (alphabet$ ?v0)) ?v3 zero$) (ite (= ?v5 ?v2) (ite (member$ ?v1 (alphabet$ ?v0)) ?v4 zero$) (fun_app$ (freq$ ?v0) ?v5)))) :pattern ((fun_app$ (uu$ ?v0 ?v1 ?v2 ?v3 ?v4) ?v5)))) :named a0))
(assert (! (not (not (member$ b$ (alphabet$ t_2$)))) :named a1))
(assert (! (not (member$ aa$ (alphabet$ t_1$))) :named a2))
(assert (! (consistent$ t_2$) :named a3))
(assert (! (not (= aa$ b$)) :named a4))
(assert (! (member$ b$ (alphabet$ t_1$)) :named a5))
(assert (! (not (member$ aa$ (alphabet$ t_2$))) :named a6))
(assert (! (= (inf$ (alphabet$ t_1$) (alphabet$ t_2$)) bot$) :named a7))
(assert (! (=> (not (= aa$ b$)) (ite (member$ aa$ (alphabet$ t_2$)) (ite (member$ b$ (alphabet$ t_2$)) (= (plus$ (plus$ (weight$ (fun_app$a (swapLeaves$ t_2$ w_a$ aa$ w_b$) b$)) (fun_app$ (freq$ t_2$) aa$)) (fun_app$ (freq$ t_2$) b$)) (plus$ (plus$ (weight$ t_2$) w_a$) w_b$)) (= (plus$ (weight$ (fun_app$a (swapLeaves$ t_2$ w_a$ aa$ w_b$) b$)) (fun_app$ (freq$ t_2$) aa$)) (plus$ (weight$ t_2$) w_b$))) (ite (member$ b$ (alphabet$ t_2$)) (= (plus$ (weight$ (fun_app$a (swapLeaves$ t_2$ w_a$ aa$ w_b$) b$)) (fun_app$ (freq$ t_2$) b$)) (plus$ (weight$ t_2$) w_a$)) (= (weight$ (fun_app$a (swapLeaves$ t_2$ w_a$ aa$ w_b$) b$)) (weight$ t_2$))))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 Nat$) (?v3 Nat$)) (! (=> (not (member$ ?v0 (alphabet$ ?v1))) (= (fun_app$a (swapLeaves$ ?v1 ?v2 ?v0 ?v3) ?v0) ?v1)) :pattern ((swapLeaves$ ?v1 ?v2 ?v0 ?v3)))) :named a9))
(assert (! (forall ((?v0 A_tree$)) (exists ((?v1 A$)) (member$ ?v1 (alphabet$ ?v0)))) :named a10))
(assert (! (=> (not (= aa$ b$)) (ite (member$ aa$ (alphabet$ t_1$)) (ite (member$ b$ (alphabet$ t_1$)) (= (plus$ (plus$ (weight$ (fun_app$a (swapLeaves$ t_1$ w_a$ aa$ w_b$) b$)) (fun_app$ (freq$ t_1$) aa$)) (fun_app$ (freq$ t_1$) b$)) (plus$ (plus$ (weight$ t_1$) w_a$) w_b$)) (= (plus$ (weight$ (fun_app$a (swapLeaves$ t_1$ w_a$ aa$ w_b$) b$)) (fun_app$ (freq$ t_1$) aa$)) (plus$ (weight$ t_1$) w_b$))) (ite (member$ b$ (alphabet$ t_1$)) (= (plus$ (weight$ (fun_app$a (swapLeaves$ t_1$ w_a$ aa$ w_b$) b$)) (fun_app$ (freq$ t_1$) b$)) (plus$ (weight$ t_1$) w_a$)) (= (weight$ (fun_app$a (swapLeaves$ t_1$ w_a$ aa$ w_b$) b$)) (weight$ t_1$))))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (! (=> (not (member$ ?v0 (alphabet$ ?v1))) (= (sibling$ ?v1 ?v0) ?v0)) :pattern ((sibling$ ?v1 ?v0)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (=> (member$ ?v0 (alphabet$ ?v1)) (member$ (sibling$ ?v1 ?v0) (alphabet$ ?v1)))) :named a13))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (not (= (sibling$ ?v0 ?v1) ?v1)) (member$ (sibling$ ?v0 ?v1) (alphabet$ ?v0)))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (! (=> (not (member$ ?v0 (alphabet$ ?v1))) (= (fun_app$ (freq$ ?v1) ?v0) zero$)) :pattern ((fun_app$ (freq$ ?v1) ?v0)))) :named a15))
(assert (! (forall ((?v0 A_tree$)) (finite$ (alphabet$ ?v0))) :named a16))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (=> (and (consistent$ ?v0) (and (consistent$ ?v1) (= (inf$ (alphabet$ ?v0) (alphabet$ ?v1)) bot$))) (consistent$ (uniteTrees$ ?v0 ?v1)))) :named a17))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 Nat$) (?v4 Nat$)) (=> (and (consistent$ ?v0) (not (= ?v1 ?v2))) (= (freq$ (fun_app$a (swapLeaves$ ?v0 ?v3 ?v1 ?v4) ?v2)) (uu$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a18))
(check-sat)
;(get-unsat-core)
