; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 688
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))))
(declare-fun b$ () A$)
(declare-fun c$ () A$)
(declare-fun t$ () A_tree$)
(declare-fun u$ () A_tree$)
(declare-fun t_1$ () A_tree$)
(declare-fun t_2$ () A_tree$)
(declare-fun x21$ () Nat$)
(declare-fun x22$ () A_tree$)
(declare-fun x23$ () A_tree$)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun zero$ () Nat$)
(declare-fun height$ (A_tree$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun consistent$ (A_tree$) Bool)
(assert (! (not (fun_app$ (less$ zero$) (height$ u$))) :named a0))
(assert (! (= u$ (innerNode$ x21$ x22$ x23$)) :named a1))
(assert (! (consistent$ t$) :named a2))
(assert (! (fun_app$ (less$ zero$) (height$ t$)) :named a3))
(assert (! (= (alphabet$ t$) (alphabet$ u$)) :named a4))
(assert (! (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$ (less$ zero$) ?v0))) :named a5))
(assert (! (forall ((?v0 Nat$)) (= (not (fun_app$ (less$ zero$) ?v0)) (= ?v0 zero$))) :named a6))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (less$ ?v0) zero$) false) :pattern ((less$ ?v0)))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$) (?v3 Nat$) (?v4 A_tree$) (?v5 A_tree$)) (= (= (innerNode$ ?v0 ?v1 ?v2) (innerNode$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a8))
(assert (! (forall ((?v0 Nat$)) (=> (=> (= ?v0 zero$) false) (fun_app$ (less$ zero$) ?v0))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (not (= ?v1 zero$)))) :named a10))
(assert (! (forall ((?v0 Nat$)) (=> (fun_app$ (less$ ?v0) zero$) false)) :named a11))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 zero$) (forall ((?v2 Nat$)) (=> (and (fun_app$ (less$ zero$) ?v2) (not (fun_app$ ?v0 ?v2))) (exists ((?v3 Nat$)) (and (fun_app$ (less$ ?v3) ?v2) (not (fun_app$ ?v0 ?v3))))))) (fun_app$ ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Nat$)) (not (fun_app$ (less$ ?v0) zero$))) :named a13))
(assert (! (member$ c$ (alphabet$ t_2$)) :named a14))
(assert (! (member$ b$ (alphabet$ t_1$)) :named a15))
(check-sat)
;(get-unsat-core)
