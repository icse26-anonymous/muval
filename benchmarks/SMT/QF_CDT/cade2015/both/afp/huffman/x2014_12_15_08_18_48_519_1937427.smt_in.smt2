; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 634
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))
  (A_tree_list$ (nil$) (cons$ (hd$ A_tree$) (tl$ A_tree_list$)))))
(declare-fun t$ () A_tree$)
(declare-fun ts$ () A_tree_list$)
(declare-fun max$ (Nat$ Nat$) Nat$)
(declare-fun cost$ (A_tree$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun depth$ (A_tree$ A$) Nat$)
(declare-fun height$ (A_tree$) Nat$)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun height_F$ (A_tree_list$) Nat$)
(declare-fun insortTree$ (A_tree$ A_tree_list$) A_tree_list$)
(declare-fun consistent_F$ (A_tree_list$) Bool)
(assert (! (not (= (height_F$ (insortTree$ t$ ts$)) (max$ (height$ t$) (height_F$ ts$)))) :named a0))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (max$ (max$ ?v0 ?v1) ?v1) (max$ ?v0 ?v1))) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (max$ ?v0 (max$ ?v0 ?v1)) (max$ ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 Nat$)) (= (max$ ?v0 ?v0) ?v0)) :named a3))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (! (= (height_F$ (cons$ ?v0 ?v1)) (max$ (height$ ?v0) (height_F$ ?v1))) :pattern ((cons$ ?v0 ?v1)))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (max$ (max$ ?v0 ?v1) ?v2) (max$ ?v0 (max$ ?v1 ?v2)))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (max$ ?v0 (max$ ?v1 ?v2)) (max$ ?v1 (max$ ?v0 ?v2)))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (max$ ?v0 ?v1) (max$ ?v1 ?v0))) :named a7))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (not (= (insortTree$ ?v0 ?v1) nil$))) :named a8))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$)) (=> (and (= (depth$ ?v0 ?v1) (max$ (height$ ?v2) (height$ ?v0))) (=> (and (= (depth$ ?v0 ?v1) (height$ ?v0)) (less_eq$ (height$ ?v2) (height$ ?v0))) false)) false)) :named a9))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A_tree$)) (=> (and (= (depth$ ?v0 ?v1) (max$ (height$ ?v0) (height$ ?v2))) (=> (and (= (depth$ ?v0 ?v1) (height$ ?v0)) (less_eq$ (height$ ?v2) (height$ ?v0))) false)) false)) :named a10))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (= (consistent_F$ (insortTree$ ?v0 ?v1)) (consistent_F$ (cons$ ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 A_tree$)) (! (=> (= (height$ ?v0) zero$) (= (cost$ ?v0) zero$)) :pattern ((cost$ ?v0)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (less_eq$ ?v0 ?v1) (= (max$ ?v1 ?v0) ?v1))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (less_eq$ ?v0 ?v1) (= (max$ ?v0 ?v1) ?v1))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (less_eq$ (max$ ?v0 ?v1) ?v2) (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2)))) :named a15))
(assert (! (= (consistent_F$ nil$) true) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (less_eq$ ?v0 (max$ ?v0 ?v1))) :named a17))
(check-sat)
;(get-unsat-core)
