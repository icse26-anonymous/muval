; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 700
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_nat_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))))
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun c$ () A$)
(declare-fun t$ () A_tree$)
(declare-fun u$ () A_tree$)
(declare-fun w_a$ () Nat$)
(declare-fun w_b$ () Nat$)
(declare-fun cost$ (A_tree$) Nat$)
(declare-fun freq$ (A_tree$) A_nat_fun$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun sibling$ (A_tree$ A$) A$)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun splitLeaf$ (A_tree$ Nat$ A$ Nat$ A$) A_tree$)
(declare-fun consistent$ (A_tree$) Bool)
(declare-fun mergeSibling$ (A_tree$ A$) A_tree$)
(declare-fun swapFourSyms$ (A_tree$ A$ A$ A$ A$) A_tree$)
(assert (! (not (= (plus$ (plus$ (cost$ (mergeSibling$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$)) a$)) w_a$) w_b$) (cost$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$))))) :named a0))
(assert (! (not (= a$ b$)) :named a1))
(assert (! (not (= (sibling$ u$ c$) c$)) :named a2))
(assert (! (consistent$ u$) :named a3))
(assert (! (= (sibling$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$)) a$) b$) :named a4))
(assert (! (less_eq$ w_a$ w_b$) :named a5))
(assert (! (member$ c$ (alphabet$ u$)) :named a6))
(assert (! (consistent$ (mergeSibling$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$)) a$)) :named a7))
(assert (! (consistent$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$))) :named a8))
(assert (! (= (freq$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$))) (freq$ u$)) :named a9))
(assert (! (= (alphabet$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$))) (alphabet$ u$)) :named a10))
(assert (! (less_eq$ (plus$ (plus$ (cost$ t$) w_a$) w_b$) (plus$ (plus$ (cost$ (mergeSibling$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$)) a$)) w_a$) w_b$)) :named a11))
(assert (! (member$ (sibling$ u$ c$) (alphabet$ u$)) :named a12))
(assert (! (= (cost$ (splitLeaf$ t$ w_a$ a$ w_b$ b$)) (plus$ (plus$ (cost$ t$) w_a$) w_b$)) :named a13))
(assert (! (less_eq$ (cost$ (splitLeaf$ t$ w_a$ a$ w_b$ b$)) (plus$ (plus$ (cost$ (mergeSibling$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$)) a$)) w_a$) w_b$)) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a16))
(assert (! (= (freq$ (mergeSibling$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$)) a$)) (freq$ t$)) :named a17))
(check-sat)
;(get-unsat-core)
