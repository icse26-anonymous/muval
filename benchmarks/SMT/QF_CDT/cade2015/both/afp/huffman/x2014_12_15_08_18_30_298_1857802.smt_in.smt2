; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 700
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_set_a_set_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))))
(declare-fun a$ () A$)
(declare-fun w$ () Nat$)
(declare-fun bot$ () A_set$)
(declare-fun inf$ (A_set$) A_set_a_set_fun$)
(declare-fun one$ () Nat$)
(declare-fun t_1$ () A_tree$)
(declare-fun t_2$ () A_tree$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun depth$ (A_tree$ A$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_set_a_set_fun$ A_set$) A_set$)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun consistent$ (A_tree$) Bool)
(assert (! (not (= (depth$ (innerNode$ w$ t_1$ t_2$) a$) (plus$ (depth$ t_2$ a$) one$))) :named a0))
(assert (! (= (fun_app$ (inf$ (alphabet$ t_1$)) (alphabet$ t_2$)) bot$) :named a1))
(assert (! (member$ a$ (alphabet$ t_2$)) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$) (?v3 Nat$) (?v4 A_tree$) (?v5 A_tree$)) (= (= (innerNode$ ?v0 ?v1 ?v2) (innerNode$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a3))
(assert (! (consistent$ (innerNode$ w$ t_1$ t_2$)) :named a4))
(assert (! (forall ((?v0 A_tree$)) (exists ((?v1 A$)) (member$ ?v1 (alphabet$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_set$)) (= (fun_app$ (inf$ ?v0) bot$) bot$)) :named a6))
(assert (! (forall ((?v0 A_set$)) (= (fun_app$ (inf$ bot$) ?v0) bot$)) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (member$ ?v0 (fun_app$ (inf$ ?v1) ?v2)) (and (member$ ?v0 ?v1) (member$ ?v0 ?v2)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 ?v1) (member$ ?v0 ?v2)) (member$ ?v0 (fun_app$ (inf$ ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (consistent$ (innerNode$ ?v0 ?v1 ?v2)) (and (consistent$ ?v1) (and (consistent$ ?v2) (= (fun_app$ (inf$ (alphabet$ ?v1)) (alphabet$ ?v2)) bot$)))) :pattern ((innerNode$ ?v0 ?v1 ?v2)))) :named a10))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$ (inf$ (fun_app$ (inf$ ?v0) ?v1)) ?v1) (fun_app$ (inf$ ?v0) ?v1))) :named a11))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$ (inf$ (fun_app$ (inf$ ?v0) ?v1)) ?v1) (fun_app$ (inf$ ?v0) ?v1))) :named a12))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$ (inf$ ?v0) (fun_app$ (inf$ ?v0) ?v1)) (fun_app$ (inf$ ?v0) ?v1))) :named a13))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$ (inf$ ?v0) (fun_app$ (inf$ ?v0) ?v1)) (fun_app$ (inf$ ?v0) ?v1))) :named a14))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$ (inf$ ?v0) ?v0) ?v0) :pattern ((inf$ ?v0)))) :named a15))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$ (inf$ ?v0) ?v0) ?v0) :pattern ((inf$ ?v0)))) :named a16))
(assert (! (forall ((?v0 A$)) (= (member$ ?v0 bot$) false)) :named a17))
(assert (! (forall ((?v0 A_bool_fun$)) (= (= bot$ (collect$ ?v0)) (forall ((?v1 A$)) (not (fun_app$a ?v0 ?v1))))) :named a18))
(check-sat)
;(get-unsat-core)
