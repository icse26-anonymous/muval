; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 555
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_tree_bool_fun$ 0)
(declare-sort A_tree_list_set$ 0)
(declare-sort A_tree_list_bool_fun$ 0)
(declare-sort A_tree_list_a_tree_list_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))
  (A_tree_list$ (nil$) (cons$ (hd$ A_tree$) (tl$ A_tree_list$)))))
(declare-fun t$ () A_tree$)
(declare-fun ts$ () A_tree_list$)
(declare-fun null$ (A_tree_list$) Bool)
(declare-fun shift$ (A_tree_list_set$ A_tree$) A_tree_list_set$)
(declare-fun member$ (A_tree_list$) A_tree_bool_fun$)
(declare-fun fun_app$ (A_tree_list_a_tree_list_fun$ A_tree_list$) A_tree_list$)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun listMem$ (A_tree$ A_tree_list$) Bool)
(declare-fun list_ex$ (A_tree_bool_fun$) A_tree_list_bool_fun$)
(declare-fun member$a (A_tree_list$ A_tree_list_set$) Bool)
(declare-fun fun_app$a (A_tree_bool_fun$ A_tree$) Bool)
(declare-fun fun_app$b (A_tree_list_bool_fun$ A_tree_list$) Bool)
(declare-fun insortTree$ (A_tree$) A_tree_list_a_tree_list_fun$)
(declare-fun cachedWeight$ (A_tree$) Nat$)
(declare-fun consistent_F$ (A_tree_list$) Bool)
(assert (! (not (= (consistent_F$ (fun_app$ (insortTree$ t$) ts$)) (consistent_F$ (cons$ t$ ts$)))) :named a0))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$) (?v2 A_tree$) (?v3 A_tree_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a1))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (not (= (cons$ ?v0 ?v1) ?v1))) :named a2))
(assert (! (forall ((?v0 A_tree$)) (! (= (fun_app$ (insortTree$ ?v0) nil$) (cons$ ?v0 nil$)) :pattern ((insortTree$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 A_tree_list$)) (! (= (fun_app$ (insortTree$ ?v0) (cons$ ?v1 ?v2)) (ite (less_eq$ (cachedWeight$ ?v0) (cachedWeight$ ?v1)) (cons$ ?v0 (cons$ ?v1 ?v2)) (cons$ ?v1 (fun_app$ (insortTree$ ?v0) ?v2)))) :pattern ((fun_app$ (insortTree$ ?v0) (cons$ ?v1 ?v2))))) :named a4))
(assert (! (= (consistent_F$ nil$) true) :named a5))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (not (= (fun_app$ (insortTree$ ?v0) ?v1) nil$))) :named a6))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$) (?v2 A_tree$)) (! (= (fun_app$a (member$ (cons$ ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$a (member$ ?v1) ?v2))) :pattern ((fun_app$a (member$ (cons$ ?v0 ?v1)) ?v2)))) :named a7))
(assert (! (forall ((?v0 A_tree_list$) (?v1 A_tree_list_set$) (?v2 A_tree$)) (=> (member$a ?v0 (shift$ ?v1 ?v2)) (member$a (cons$ ?v2 ?v0) ?v1))) :named a8))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (! (= (null$ (cons$ ?v0 ?v1)) false) :pattern ((cons$ ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 A_tree_bool_fun$) (?v1 A_tree$) (?v2 A_tree_list$)) (! (= (fun_app$b (list_ex$ ?v0) (cons$ ?v1 ?v2)) (or (fun_app$a ?v0 ?v1) (fun_app$b (list_ex$ ?v0) ?v2))) :pattern ((fun_app$b (list_ex$ ?v0) (cons$ ?v1 ?v2))))) :named a10))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (= (listMem$ ?v0 ?v1) (or (exists ((?v2 A_tree$) (?v3 A_tree_list$)) (and (= ?v0 ?v2) (= ?v1 (cons$ ?v2 ?v3)))) (exists ((?v2 A_tree$) (?v3 A_tree_list$) (?v4 A_tree$)) (and (= ?v0 ?v2) (and (= ?v1 (cons$ ?v4 ?v3)) (listMem$ ?v2 ?v3))))))) :named a11))
(assert (! (forall ((?v0 A_tree_bool_fun$)) (! (= (fun_app$b (list_ex$ ?v0) nil$) false) :pattern ((list_ex$ ?v0)))) :named a12))
(assert (! (forall ((?v0 A_tree_list$)) (= (= ?v0 nil$) (null$ ?v0))) :named a13))
(assert (! (= (null$ nil$) true) :named a14))
(assert (! (forall ((?v0 A_tree$)) (! (= (fun_app$a (member$ nil$) ?v0) false) :pattern ((fun_app$a (member$ nil$) ?v0)))) :named a15))
(assert (! (forall ((?v0 A_tree_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false)) :named a16))
(check-sat)
;(get-unsat-core)
