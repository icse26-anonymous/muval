; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 654
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_tree_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))
  (A_tree_list$ (nil$) (cons$ (hd$ A_tree$) (tl$ A_tree_list$)))))
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun c$ () A$)
(declare-fun t$ () A_tree$)
(declare-fun w_a$ () Nat$)
(declare-fun w_b$ () Nat$)
(declare-fun freq$ (A_tree$ A$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun depth$ (A_tree$ A$) Nat$)
(declare-fun height$ (A_tree$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_a_tree_fun$ A$) A_tree$)
(declare-fun huffman$ (A_tree_list$) A_tree$)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun sibling$ (A_tree$ A$) A$)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun consistent$ (A_tree$) Bool)
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$) A_a_tree_fun$)
(declare-fun consistent_F$ (A_tree_list$) Bool)
(assert (! (not (= (depth$ (fun_app$ (swapLeaves$ t$ w_a$ a$ w_b$) b$) c$) (depth$ t$ c$))) :named a0))
(assert (! (consistent$ t$) :named a1))
(assert (! (not (= c$ a$)) :named a2))
(assert (! (not (= c$ b$)) :named a3))
(assert (! (forall ((?v0 A_tree$) (?v1 Nat$) (?v2 A$) (?v3 Nat$) (?v4 A$)) (=> (consistent$ ?v0) (consistent$ (fun_app$ (swapLeaves$ ?v0 ?v1 ?v2 ?v3) ?v4)))) :named a4))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (consistent$ ?v0) (= (fun_app$ (swapLeaves$ ?v0 (freq$ ?v0 ?v1) ?v1 (freq$ ?v0 ?v1)) ?v1) ?v0))) :named a5))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (consistent$ ?v0) (= (depth$ ?v0 (sibling$ ?v0 ?v1)) (depth$ ?v0 ?v1)))) :named a6))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (consistent$ ?v0) (= (sibling$ ?v0 (sibling$ ?v0 ?v1)) ?v1))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 Nat$) (?v3 Nat$)) (! (=> (not (member$ ?v0 (alphabet$ ?v1))) (= (fun_app$ (swapLeaves$ ?v1 ?v2 ?v0 ?v3) ?v0) ?v1)) :pattern ((swapLeaves$ ?v1 ?v2 ?v0 ?v3)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 Nat$) (?v3 A$) (?v4 Nat$) (?v5 A$)) (! (= (fun_app$ (swapLeaves$ (leaf$ ?v0 ?v1) ?v2 ?v3 ?v4) ?v5) (ite (= ?v1 ?v3) (leaf$ ?v4 ?v5) (ite (= ?v1 ?v5) (leaf$ ?v2 ?v3) (leaf$ ?v0 ?v1)))) :pattern ((fun_app$ (swapLeaves$ (leaf$ ?v0 ?v1) ?v2 ?v3 ?v4) ?v5)))) :named a9))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (=> (and (consistent$ ?v0) (= (sibling$ ?v0 ?v1) ?v2)) (= (sibling$ ?v0 ?v2) ?v1))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$) (?v3 Nat$) (?v4 A$) (?v5 Nat$) (?v6 A$)) (! (= (fun_app$ (swapLeaves$ (innerNode$ ?v0 ?v1 ?v2) ?v3 ?v4 ?v5) ?v6) (innerNode$ ?v0 (fun_app$ (swapLeaves$ ?v1 ?v3 ?v4 ?v5) ?v6) (fun_app$ (swapLeaves$ ?v2 ?v3 ?v4 ?v5) ?v6))) :pattern ((fun_app$ (swapLeaves$ (innerNode$ ?v0 ?v1 ?v2) ?v3 ?v4 ?v5) ?v6)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 A$)) (! (= (consistent$ (leaf$ ?v0 ?v1)) true) :pattern ((leaf$ ?v0 ?v1)))) :named a12))
(assert (! (forall ((?v0 A_tree$)) (=> (consistent$ ?v0) (exists ((?v1 A$)) (and (member$ ?v1 (alphabet$ ?v0)) (= (depth$ ?v0 ?v1) (height$ ?v0)))))) :named a13))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (less_eq$ (depth$ ?v0 ?v1) (height$ ?v0))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 A$)) (! (= (depth$ (leaf$ ?v0 ?v1) ?v2) zero$) :pattern ((depth$ (leaf$ ?v0 ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 A_tree_list$)) (=> (and (consistent_F$ ?v0) (not (= ?v0 nil$))) (consistent$ (huffman$ ?v0)))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$) (?v3 Nat$) (?v4 A_tree$) (?v5 A_tree$)) (= (= (innerNode$ ?v0 ?v1 ?v2) (innerNode$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 Nat$) (?v3 A$)) (= (= (leaf$ ?v0 ?v1) (leaf$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a18))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (! (=> (not (member$ ?v0 (alphabet$ ?v1))) (= (sibling$ ?v1 ?v0) ?v0)) :pattern ((sibling$ ?v1 ?v0)))) :named a19))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (! (=> (= (height$ ?v0) zero$) (= (sibling$ ?v0 ?v1) ?v1)) :pattern ((sibling$ ?v0 ?v1)))) :named a20))
(check-sat)
;(get-unsat-core)
