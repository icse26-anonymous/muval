; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 674
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_tree_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))))
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun t$ () A_tree$)
(declare-fun cost$ (A_tree$) Nat$)
(declare-fun freq$ (A_tree$ A$) Nat$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun depth$ (A_tree$ A$) Nat$)
(declare-fun times$ (Nat$ Nat$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_a_tree_fun$ A$) A_tree$)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun consistent$ (A_tree$) Bool)
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$) A_a_tree_fun$)
(declare-fun uniteTrees$ (A_tree$ A_tree$) A_tree$)
(assert (! (not (= (plus$ (plus$ (cost$ (fun_app$ (swapLeaves$ t$ (freq$ t$ a$) a$ (freq$ t$ b$)) b$)) (times$ (freq$ t$ a$) (depth$ t$ a$))) (times$ (freq$ t$ b$) (depth$ t$ b$))) (plus$ (plus$ (cost$ t$) (times$ (freq$ t$ a$) (depth$ t$ b$))) (times$ (freq$ t$ b$) (depth$ t$ a$))))) :named a0))
(assert (! (consistent$ t$) :named a1))
(assert (! (not (= a$ b$)) :named a2))
(assert (! (member$ a$ (alphabet$ t$)) :named a3))
(assert (! (member$ b$ (alphabet$ t$)) :named a4))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 A$) (?v4 Nat$) (?v5 Nat$)) (=> (and (consistent$ ?v0) (and (not (= ?v1 ?v2)) (not (= ?v1 ?v3)))) (= (depth$ (fun_app$ (swapLeaves$ ?v0 ?v4 ?v2 ?v5) ?v3) ?v1) (depth$ ?v0 ?v1)))) :named a5))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (consistent$ ?v0) (= (fun_app$ (swapLeaves$ ?v0 (freq$ ?v0 ?v1) ?v1 (freq$ ?v0 ?v1)) ?v1) ?v0))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 Nat$) (?v3 Nat$)) (! (=> (not (member$ ?v0 (alphabet$ ?v1))) (= (fun_app$ (swapLeaves$ ?v1 ?v2 ?v0 ?v3) ?v0) ?v1)) :pattern ((swapLeaves$ ?v1 ?v2 ?v0 ?v3)))) :named a7))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 Nat$) (?v4 Nat$)) (=> (and (consistent$ ?v0) (not (= ?v1 ?v2))) (ite (member$ ?v1 (alphabet$ ?v0)) (ite (member$ ?v2 (alphabet$ ?v0)) (= (plus$ (plus$ (cost$ (fun_app$ (swapLeaves$ ?v0 ?v3 ?v1 ?v4) ?v2)) (times$ (freq$ ?v0 ?v1) (depth$ ?v0 ?v1))) (times$ (freq$ ?v0 ?v2) (depth$ ?v0 ?v2))) (plus$ (plus$ (cost$ ?v0) (times$ ?v3 (depth$ ?v0 ?v2))) (times$ ?v4 (depth$ ?v0 ?v1)))) (= (plus$ (cost$ (fun_app$ (swapLeaves$ ?v0 ?v3 ?v1 ?v4) ?v2)) (times$ (freq$ ?v0 ?v1) (depth$ ?v0 ?v1))) (plus$ (cost$ ?v0) (times$ ?v4 (depth$ ?v0 ?v1))))) (ite (member$ ?v2 (alphabet$ ?v0)) (= (plus$ (cost$ (fun_app$ (swapLeaves$ ?v0 ?v3 ?v1 ?v4) ?v2)) (times$ (freq$ ?v0 ?v2) (depth$ ?v0 ?v2))) (plus$ (cost$ ?v0) (times$ ?v3 (depth$ ?v0 ?v2)))) (= (cost$ (fun_app$ (swapLeaves$ ?v0 ?v3 ?v1 ?v4) ?v2)) (cost$ ?v0)))))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a10))
(assert (! (forall ((?v0 A_tree$) (?v1 Nat$) (?v2 A$) (?v3 Nat$) (?v4 A$)) (=> (consistent$ ?v0) (consistent$ (fun_app$ (swapLeaves$ ?v0 ?v1 ?v2 ?v3) ?v4)))) :named a11))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 A$)) (= (freq$ (uniteTrees$ ?v0 ?v1) ?v2) (plus$ (freq$ ?v0 ?v2) (freq$ ?v1 ?v2)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (plus$ (times$ ?v0 ?v1) (plus$ (times$ ?v2 ?v1) ?v3)) (plus$ (times$ (plus$ ?v0 ?v2) ?v1) ?v3))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (times$ (plus$ ?v0 ?v1) ?v2) (plus$ (times$ ?v0 ?v2) (times$ ?v1 ?v2)))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (times$ ?v0 (plus$ ?v1 ?v2)) (plus$ (times$ ?v0 ?v1) (times$ ?v0 ?v2)))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (= (plus$ (times$ ?v0 ?v1) (times$ ?v2 ?v3)) (plus$ (times$ ?v0 ?v3) (times$ ?v2 ?v1))) (or (= ?v0 ?v2) (= ?v1 ?v3)))) :named a16))
(assert (! (forall ((?v0 A_tree$)) (exists ((?v1 A$)) (member$ ?v1 (alphabet$ ?v0)))) :named a17))
(check-sat)
;(get-unsat-core)
