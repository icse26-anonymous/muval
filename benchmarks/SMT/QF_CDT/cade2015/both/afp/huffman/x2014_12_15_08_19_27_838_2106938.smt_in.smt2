; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 657
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_tree_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))))
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun c$ () A$)
(declare-fun x1$ () Nat$)
(declare-fun x2$ () A$)
(declare-fun w_a$ () Nat$)
(declare-fun w_b$ () Nat$)
(declare-fun cost$ (A_tree$) Nat$)
(declare-fun freq$ (A_tree$ A$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun depth$ (A_tree$ A$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_a_tree_fun$ A$) A_tree$)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun pred_tree$ (A_bool_fun$ A_tree$) Bool)
(declare-fun consistent$ (A_tree$) Bool)
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$) A_a_tree_fun$)
(assert (! (not (= (freq$ (fun_app$ (swapLeaves$ (leaf$ x1$ x2$) w_a$ a$ w_b$) b$) c$) (ite (= c$ a$) (ite (member$ b$ (alphabet$ (leaf$ x1$ x2$))) w_a$ zero$) (ite (= c$ b$) (ite (member$ a$ (alphabet$ (leaf$ x1$ x2$))) w_b$ zero$) (freq$ (leaf$ x1$ x2$) c$))))) :named a0))
(assert (! (consistent$ (leaf$ x1$ x2$)) :named a1))
(assert (! (not (= a$ b$)) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 Nat$) (?v3 A$)) (= (= (leaf$ ?v0 ?v1) (leaf$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 Nat$) (?v3 Nat$)) (! (=> (not (member$ ?v0 (alphabet$ ?v1))) (= (fun_app$ (swapLeaves$ ?v1 ?v2 ?v0 ?v3) ?v0) ?v1)) :pattern ((swapLeaves$ ?v1 ?v2 ?v0 ?v3)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_tree$)) (! (=> (not (member$ ?v0 (alphabet$ ?v1))) (= (freq$ ?v1 ?v0) zero$)) :pattern ((freq$ ?v1 ?v0)))) :named a5))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (consistent$ ?v0) (= (fun_app$ (swapLeaves$ ?v0 (freq$ ?v0 ?v1) ?v1 (freq$ ?v0 ?v1)) ?v1) ?v0))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 Nat$) (?v3 A$) (?v4 Nat$) (?v5 A$)) (! (= (fun_app$ (swapLeaves$ (leaf$ ?v0 ?v1) ?v2 ?v3 ?v4) ?v5) (ite (= ?v1 ?v3) (leaf$ ?v4 ?v5) (ite (= ?v1 ?v5) (leaf$ ?v2 ?v3) (leaf$ ?v0 ?v1)))) :pattern ((fun_app$ (swapLeaves$ (leaf$ ?v0 ?v1) ?v2 ?v3 ?v4) ?v5)))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 A$)) (! (= (freq$ (leaf$ ?v0 ?v1) ?v2) (ite (= ?v2 ?v1) ?v0 zero$)) :pattern ((freq$ (leaf$ ?v0 ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 A$)) (! (= (consistent$ (leaf$ ?v0 ?v1)) true) :pattern ((leaf$ ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 A_tree$) (?v1 Nat$) (?v2 A$) (?v3 Nat$) (?v4 A$)) (=> (consistent$ ?v0) (consistent$ (fun_app$ (swapLeaves$ ?v0 ?v1 ?v2 ?v3) ?v4)))) :named a10))
(assert (! (forall ((?v0 A_tree$)) (exists ((?v1 A$)) (member$ ?v1 (alphabet$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 A$) (?v4 Nat$) (?v5 Nat$)) (=> (and (consistent$ ?v0) (and (not (= ?v1 ?v2)) (not (= ?v1 ?v3)))) (= (depth$ (fun_app$ (swapLeaves$ ?v0 ?v4 ?v2 ?v5) ?v3) ?v1) (depth$ ?v0 ?v1)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 A$)) (! (= (cost$ (leaf$ ?v0 ?v1)) zero$) :pattern ((leaf$ ?v0 ?v1)))) :named a13))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Nat$) (?v2 A$)) (! (= (pred_tree$ ?v0 (leaf$ ?v1 ?v2)) (fun_app$a ?v0 ?v2)) :pattern ((pred_tree$ ?v0 (leaf$ ?v1 ?v2))))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 A$)) (! (= (depth$ (leaf$ ?v0 ?v1) ?v2) zero$) :pattern ((depth$ (leaf$ ?v0 ?v1) ?v2)))) :named a15))
(assert (! (= zero$ zero$) :named a16))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a17))
(check-sat)
;(get-unsat-core)
