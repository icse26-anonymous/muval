; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 692
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))))
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun c$ () A$)
(declare-fun t$ () A_tree$)
(declare-fun u$ () A_tree$)
(declare-fun depth$ (A_tree$ A$) Nat$)
(declare-fun height$ (A_tree$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun optimum$ (A_tree$) Bool)
(declare-fun sibling$ (A_tree$ A$) A$)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun swapSyms$ (A_tree$ A$ A$) A_tree$)
(declare-fun consistent$ (A_tree$) Bool)
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$ A$) A_tree$)
(declare-fun swapFourSyms$ (A_tree$ A$ A$ A$ A$) A_tree$)
(assert (! (not (consistent$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$)))) :named a0))
(assert (! (consistent$ u$) :named a1))
(assert (! (not (= a$ b$)) :named a2))
(assert (! (consistent$ t$) :named a3))
(assert (! (optimum$ t$) :named a4))
(assert (! (not (= (sibling$ u$ c$) c$)) :named a5))
(assert (! (forall ((?v0 A_tree$) (?v1 A$)) (=> (consistent$ ?v0) (= (sibling$ ?v0 (sibling$ ?v0 ?v1)) ?v1))) :named a6))
(assert (! (member$ c$ (alphabet$ u$)) :named a7))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (=> (and (consistent$ ?v0) (= (sibling$ ?v0 ?v1) ?v2)) (= (sibling$ ?v0 ?v2) ?v1))) :named a8))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 A$) (?v4 A$)) (=> (consistent$ ?v0) (consistent$ (swapFourSyms$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a9))
(assert (! (member$ (sibling$ u$ c$) (alphabet$ u$)) :named a10))
(assert (! (member$ b$ (alphabet$ u$)) :named a11))
(assert (! (member$ a$ (alphabet$ u$)) :named a12))
(assert (! (= (depth$ u$ c$) (height$ u$)) :named a13))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (=> (and (consistent$ ?v0) (and (not (= (sibling$ ?v0 ?v1) ?v2)) (and (not (= (sibling$ ?v0 ?v1) ?v1)) (not (= ?v2 ?v1))))) (= (sibling$ (swapSyms$ ?v0 ?v2 ?v1) (sibling$ ?v0 ?v1)) ?v2))) :named a14))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$)) (=> (and (consistent$ ?v0) (and (not (= (sibling$ ?v0 ?v1) ?v1)) (not (= ?v2 ?v1)))) (= (sibling$ (swapSyms$ ?v0 ?v2 (sibling$ ?v0 ?v1)) ?v2) ?v1))) :named a15))
(assert (! (= (depth$ u$ (sibling$ u$ c$)) (height$ u$)) :named a16))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 A$) (?v3 Nat$) (?v4 Nat$)) (=> (and (consistent$ ?v0) (and (not (= (sibling$ ?v0 ?v1) ?v1)) (not (= ?v2 ?v1)))) (= (sibling$ (swapLeaves$ ?v0 ?v3 ?v2 ?v4 (sibling$ ?v0 ?v1)) ?v2) ?v1))) :named a17))
(check-sat)
;(get-unsat-core)
