; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 639
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))
  (A_tree_list$ (nil$) (cons$ (hd$ A_tree$) (tl$ A_tree_list$)))))
(declare-fun t$ () A_tree$)
(declare-fun ts$ () A_tree_list$)
(declare-fun one$ () Nat$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun size$ (A_tree_list$) Nat$)
(declare-fun insortTree$ (A_tree$ A_tree_list$) A_tree_list$)
(assert (! (not (= (size$ (insortTree$ t$ ts$)) (plus$ (size$ ts$) one$))) :named a0))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a2))
(assert (! (= one$ one$) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a5))
(assert (! (forall ((?v0 A_tree_list$) (?v1 A_tree_list$)) (=> (not (= (size$ ?v0) (size$ ?v1))) (= (= ?v0 ?v1) false))) :named a6))
(assert (! (forall ((?v0 Nat$)) (exists ((?v1 A_tree_list$)) (= (size$ ?v1) ?v0))) :named a7))
(assert (! (forall ((?v0 A_tree_list$) (?v1 A_tree_list$)) (=> (not (= (size$ ?v0) (size$ ?v1))) (not (= ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 Nat$)) (= (= one$ ?v0) (= ?v0 one$))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (= (plus$ (plus$ ?v0 ?v1) (plus$ ?v2 ?v3)) (plus$ (plus$ ?v0 ?v2) (plus$ ?v1 ?v3)))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (plus$ (plus$ ?v0 ?v1) ?v2) (plus$ (plus$ ?v0 ?v2) ?v1))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (plus$ ?v0 ?v2) (plus$ ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (plus$ ?v0 ?v1) (plus$ ?v1 ?v0))) :named a16))
(check-sat)
;(get-unsat-core)
