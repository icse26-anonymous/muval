; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 656
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))
  (A_tree_list$ (nil$) (cons$ (hd$ A_tree$) (tl$ A_tree_list$)))))
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun t$ () A_tree$)
(declare-fun w_a$ () Nat$)
(declare-fun w_b$ () Nat$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun height$ (A_tree$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun weight$ (A_tree$) Nat$)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun splitLeaf$ (A_tree$ Nat$ A$ Nat$ A$) A_tree$)
(declare-fun consistent$ (A_tree$) Bool)
(declare-fun insortTree$ (A_tree$ A_tree_list$) A_tree_list$)
(declare-fun uniteTrees$ (A_tree$ A_tree$) A_tree$)
(declare-fun splitLeaf_F$ (A_tree_list$ Nat$ A$ Nat$ A$) A_tree_list$)
(declare-fun cachedWeight$ (A_tree$) Nat$)
(assert (! (not (= (cachedWeight$ (splitLeaf$ t$ w_a$ a$ w_b$ b$)) (cachedWeight$ t$))) :named a0))
(assert (! (forall ((?v0 Nat$) (?v1 A$)) (! (= (cachedWeight$ (leaf$ ?v0 ?v1)) ?v0) :pattern ((leaf$ ?v0 ?v1)))) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 Nat$) (?v3 Nat$) (?v4 A$)) (! (=> (not (member$ ?v0 (alphabet$ ?v1))) (= (splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4) ?v1)) :pattern ((splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4)))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (cachedWeight$ (innerNode$ ?v0 ?v1 ?v2)) ?v0) :pattern ((innerNode$ ?v0 ?v1 ?v2)))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$) (?v3 Nat$) (?v4 A$) (?v5 Nat$) (?v6 A$)) (! (= (splitLeaf$ (innerNode$ ?v0 ?v1 ?v2) ?v3 ?v4 ?v5 ?v6) (innerNode$ ?v0 (splitLeaf$ ?v1 ?v3 ?v4 ?v5 ?v6) (splitLeaf$ ?v2 ?v3 ?v4 ?v5 ?v6))) :pattern ((splitLeaf$ (innerNode$ ?v0 ?v1 ?v2) ?v3 ?v4 ?v5 ?v6)))) :named a4))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$) (?v2 Nat$) (?v3 A$) (?v4 Nat$) (?v5 A$)) (! (= (splitLeaf_F$ (cons$ ?v0 ?v1) ?v2 ?v3 ?v4 ?v5) (cons$ (splitLeaf$ ?v0 ?v2 ?v3 ?v4 ?v5) (splitLeaf_F$ ?v1 ?v2 ?v3 ?v4 ?v5))) :pattern ((splitLeaf_F$ (cons$ ?v0 ?v1) ?v2 ?v3 ?v4 ?v5)))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 Nat$) (?v3 A$) (?v4 Nat$) (?v5 A$)) (! (= (splitLeaf$ (leaf$ ?v0 ?v1) ?v2 ?v3 ?v4 ?v5) (ite (= ?v1 ?v3) (innerNode$ ?v0 (leaf$ ?v2 ?v3) (leaf$ ?v4 ?v5)) (leaf$ ?v0 ?v1))) :pattern ((splitLeaf$ (leaf$ ?v0 ?v1) ?v2 ?v3 ?v4 ?v5)))) :named a6))
(assert (! (forall ((?v0 A_tree$) (?v1 A$) (?v2 Nat$) (?v3 A$) (?v4 Nat$)) (=> (and (consistent$ ?v0) (not (member$ ?v1 (alphabet$ ?v0)))) (consistent$ (splitLeaf$ ?v0 ?v2 ?v3 ?v4 ?v1)))) :named a7))
(assert (! (forall ((?v0 A_tree$)) (! (=> (= (height$ ?v0) zero$) (= (cachedWeight$ ?v0) (weight$ ?v0))) :pattern ((cachedWeight$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (! (= (uniteTrees$ ?v0 ?v1) (innerNode$ (plus$ (cachedWeight$ ?v0) (cachedWeight$ ?v1)) ?v0 ?v1)) :pattern ((uniteTrees$ ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 A_tree_list$)) (! (= (insortTree$ ?v0 (cons$ ?v1 ?v2)) (ite (less_eq$ (cachedWeight$ ?v0) (cachedWeight$ ?v1)) (cons$ ?v0 (cons$ ?v1 ?v2)) (cons$ ?v1 (insortTree$ ?v0 ?v2)))) :pattern ((insortTree$ ?v0 (cons$ ?v1 ?v2))))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$) (?v3 Nat$) (?v4 A_tree$) (?v5 A_tree$)) (= (= (innerNode$ ?v0 ?v1 ?v2) (innerNode$ ?v3 ?v4 ?v5)) (and (= ?v0 ?v3) (and (= ?v1 ?v4) (= ?v2 ?v5))))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 Nat$) (?v3 A$)) (= (= (leaf$ ?v0 ?v1) (leaf$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 A_tree$) (?v2 A_tree$)) (! (= (weight$ (innerNode$ ?v0 ?v1 ?v2)) (plus$ (weight$ ?v1) (weight$ ?v2))) :pattern ((innerNode$ ?v0 ?v1 ?v2)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 A$)) (! (= (weight$ (leaf$ ?v0 ?v1)) ?v0) :pattern ((leaf$ ?v0 ?v1)))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 A$)) (! (= (consistent$ (leaf$ ?v0 ?v1)) true) :pattern ((leaf$ ?v0 ?v1)))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 A$)) (! (= (height$ (leaf$ ?v0 ?v1)) zero$) :pattern ((leaf$ ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 A_tree$)) (=> (and (forall ((?v1 Nat$) (?v2 A$)) (=> (= ?v0 (leaf$ ?v1 ?v2)) false)) (forall ((?v1 Nat$) (?v2 A_tree$) (?v3 A_tree$)) (=> (= ?v0 (innerNode$ ?v1 ?v2 ?v3)) false))) false)) :named a17))
(check-sat)
;(get-unsat-core)
