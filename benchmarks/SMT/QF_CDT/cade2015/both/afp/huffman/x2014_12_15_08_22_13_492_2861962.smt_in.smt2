; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 645
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))
  (A_tree_list$ (nil$) (cons$ (hd$ A_tree$) (tl$ A_tree_list$)))))
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun bot$ () A_set$)
(declare-fun sup$ (A_set$ A_set$) A_set$)
(declare-fun t_1$ () A_tree$)
(declare-fun t_2$ () A_tree$)
(declare-fun tsa$ () A_tree_list$)
(declare-fun w_a$ () Nat$)
(declare-fun w_b$ () Nat$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun freq_F$ (A_tree_list$ A$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun huffman$ (A_tree_list$) A_tree$)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun splitLeaf$ (A_tree$ Nat$ A$ Nat$ A$) A_tree$)
(declare-fun alphabet_F$ (A_tree_list$) A_set$)
(declare-fun insortTree$ (A_tree$ A_tree_list$) A_tree_list$)
(declare-fun uniteTrees$ (A_tree$ A_tree$) A_tree$)
(declare-fun splitLeaf_F$ (A_tree_list$ Nat$ A$ Nat$ A$) A_tree_list$)
(declare-fun consistent_F$ (A_tree_list$) Bool)
(assert (! (not (not (member$ a$ (alphabet_F$ tsa$)))) :named a0))
(assert (! (member$ a$ (alphabet$ t_2$)) :named a1))
(assert (! (consistent_F$ (cons$ t_1$ (cons$ t_2$ tsa$))) :named a2))
(assert (! (not (= (cons$ t_1$ (cons$ t_2$ tsa$)) nil$)) :named a3))
(assert (! (not (member$ a$ (alphabet$ t_1$))) :named a4))
(assert (! (member$ a$ (alphabet_F$ (cons$ t_1$ (cons$ t_2$ tsa$)))) :named a5))
(assert (! (= (freq_F$ (cons$ t_1$ (cons$ t_2$ tsa$)) a$) (plus$ w_a$ w_b$)) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_tree_list$) (?v2 Nat$) (?v3 Nat$) (?v4 A$)) (! (=> (not (member$ ?v0 (alphabet_F$ ?v1))) (= (splitLeaf_F$ ?v1 ?v2 ?v0 ?v3 ?v4) ?v1)) :pattern ((splitLeaf_F$ ?v1 ?v2 ?v0 ?v3 ?v4)))) :named a7))
(assert (! (=> (and (consistent_F$ (insortTree$ (uniteTrees$ t_1$ t_2$) tsa$)) (and (not (= (insortTree$ (uniteTrees$ t_1$ t_2$) tsa$) nil$)) (and (member$ a$ (alphabet_F$ (insortTree$ (uniteTrees$ t_1$ t_2$) tsa$))) (= (freq_F$ (insortTree$ (uniteTrees$ t_1$ t_2$) tsa$) a$) (plus$ w_a$ w_b$))))) (= (splitLeaf$ (huffman$ (insortTree$ (uniteTrees$ t_1$ t_2$) tsa$)) w_a$ a$ w_b$ b$) (huffman$ (splitLeaf_F$ (insortTree$ (uniteTrees$ t_1$ t_2$) tsa$) w_a$ a$ w_b$ b$)))) :named a8))
(assert (! (forall ((?v0 A_tree_list$)) (=> (not (= ?v0 nil$)) (= (alphabet$ (huffman$ ?v0)) (alphabet_F$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_tree_list$)) (! (=> (not (member$ ?v0 (alphabet_F$ ?v1))) (= (freq_F$ ?v1 ?v0) zero$)) :pattern ((freq_F$ ?v1 ?v0)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_tree_list$) (?v2 A_tree$) (?v3 Nat$) (?v4 Nat$) (?v5 A$)) (=> (and (member$ ?v0 (alphabet_F$ ?v1)) (and (consistent_F$ ?v1) (and (not (member$ ?v0 (alphabet$ ?v2))) (= (freq_F$ ?v1 ?v0) (plus$ ?v3 ?v4))))) (= (splitLeaf_F$ (insortTree$ ?v2 ?v1) ?v3 ?v0 ?v4 ?v5) (insortTree$ ?v2 (splitLeaf_F$ ?v1 ?v3 ?v0 ?v4 ?v5))))) :named a11))
(assert (! (= (alphabet_F$ nil$) bot$) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 Nat$) (?v3 Nat$) (?v4 A$)) (! (=> (not (member$ ?v0 (alphabet$ ?v1))) (= (splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4) ?v1)) :pattern ((splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4)))) :named a13))
(assert (! (forall ((?v0 A_tree$)) (exists ((?v1 A$)) (member$ ?v1 (alphabet$ ?v0)))) :named a14))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (= (alphabet_F$ (insortTree$ ?v0 ?v1)) (sup$ (alphabet$ ?v0) (alphabet_F$ ?v1)))) :named a15))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (! (= (alphabet_F$ (cons$ ?v0 ?v1)) (sup$ (alphabet$ ?v0) (alphabet_F$ ?v1))) :pattern ((cons$ ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 Nat$) (?v3 A$)) (! (= (splitLeaf_F$ nil$ ?v0 ?v1 ?v2 ?v3) nil$) :pattern ((splitLeaf_F$ nil$ ?v0 ?v1 ?v2 ?v3)))) :named a17))
(check-sat)
;(get-unsat-core)
