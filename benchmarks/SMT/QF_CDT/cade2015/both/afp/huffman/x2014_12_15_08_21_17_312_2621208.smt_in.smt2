; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 528
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_tree_list_a_tree_list_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))
  (A_tree_list$ (nil$) (cons$ (hd$ A_tree$) (tl$ A_tree_list$)))
  (A_tree_list_list$ (nil$a) (cons$a (hd$a A_tree_list$) (tl$a A_tree_list_list$)))
  (A_tree_list_list_list$ (nil$b) (cons$b (hd$b A_tree_list_list$) (tl$b A_tree_list_list_list$)))
  (A_tree_list_list_list_list$ (nil$c) (cons$c (hd$c A_tree_list_list_list$) (tl$c A_tree_list_list_list_list$)))))
(declare-fun t$ () A_tree$)
(declare-fun ts$ () A_tree_list$)
(declare-fun uu$ (A_tree$) A_tree_list_a_tree_list_fun$)
(declare-fun member$ (A_tree_list_list_list$ A_tree_list_list$) Bool)
(declare-fun weight$ (A_tree$) Nat$)
(declare-fun fun_app$ (A_tree_list_a_tree_list_fun$ A_tree_list$) A_tree_list$)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun member$a (A_tree_list_list$ A_tree_list$) Bool)
(declare-fun member$b (A_tree_list$ A_tree$) Bool)
(declare-fun splitLeaf$ (A_tree$ Nat$ A$ Nat$ A$) A_tree$)
(declare-fun insortTree$ (A_tree$ A_tree_list$) A_tree_list$)
(declare-fun splitLeaf_F$ (A_tree_list$ Nat$ A$ Nat$ A$) A_tree_list$)
(declare-fun consistent_F$ (A_tree_list$) Bool)
(declare-fun sortedByWeight$ (A_tree_list$) Bool)
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (cons$ ?v0 ?v1)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a0))
(assert (! (not (sortedByWeight$ ts$)) :named a1))
(assert (! (sortedByWeight$ (cons$ t$ ts$)) :named a2))
(assert (! (forall ((?v0 A_tree_list_list$) (?v1 A_tree_list_list_list$) (?v2 A_tree_list_list$) (?v3 A_tree_list_list_list$)) (= (= (cons$b ?v0 ?v1) (cons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a3))
(assert (! (forall ((?v0 A_tree_list$) (?v1 A_tree_list_list$) (?v2 A_tree_list$) (?v3 A_tree_list_list$)) (= (= (cons$a ?v0 ?v1) (cons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a4))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$) (?v2 A_tree$) (?v3 A_tree_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a5))
(assert (! (forall ((?v0 A_tree_list_list$) (?v1 A_tree_list_list_list$)) (not (= (cons$b ?v0 ?v1) ?v1))) :named a6))
(assert (! (forall ((?v0 A_tree_list$) (?v1 A_tree_list_list$)) (not (= (cons$a ?v0 ?v1) ?v1))) :named a7))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (not (= (cons$ ?v0 ?v1) ?v1))) :named a8))
(assert (! (forall ((?v0 A_tree$)) (! (= (sortedByWeight$ (cons$ ?v0 nil$)) true) :pattern ((uu$ ?v0)))) :named a9))
(assert (! (= (sortedByWeight$ nil$) true) :named a10))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (= (consistent_F$ (insortTree$ ?v0 ?v1)) (consistent_F$ (cons$ ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 A_tree_list$)) (=> (and (=> (= ?v0 nil$) false) (and (forall ((?v1 A_tree$)) (=> (= ?v0 (cons$ ?v1 nil$)) false)) (forall ((?v1 A_tree$) (?v2 A_tree$) (?v3 A_tree_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false)))) false)) :named a12))
(assert (! (forall ((?v0 A_tree_list$)) (=> (and (forall ((?v1 A_tree$)) (=> (= ?v0 (cons$ ?v1 nil$)) false)) (and (forall ((?v1 A_tree$) (?v2 A_tree$) (?v3 A_tree_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false)) (=> (= ?v0 nil$) false))) false)) :named a13))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$) (?v2 Nat$) (?v3 A$) (?v4 Nat$) (?v5 A$)) (! (= (splitLeaf_F$ (cons$ ?v0 ?v1) ?v2 ?v3 ?v4 ?v5) (cons$ (splitLeaf$ ?v0 ?v2 ?v3 ?v4 ?v5) (splitLeaf_F$ ?v1 ?v2 ?v3 ?v4 ?v5))) :pattern ((splitLeaf_F$ (cons$ ?v0 ?v1) ?v2 ?v3 ?v4 ?v5)))) :named a14))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 A_tree_list$)) (! (= (sortedByWeight$ (cons$ ?v0 (cons$ ?v1 ?v2))) (and (less_eq$ (weight$ ?v0) (weight$ ?v1)) (sortedByWeight$ (cons$ ?v1 ?v2)))) :pattern ((cons$ ?v0 (cons$ ?v1 ?v2))))) :named a15))
(assert (! (forall ((?v0 A_tree_list$)) (=> (and (not (sortedByWeight$ ?v0)) (forall ((?v1 A_tree$) (?v2 A_tree$) (?v3 A_tree_list$)) (=> (and (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) (not (and (less_eq$ (weight$ ?v1) (weight$ ?v2)) (sortedByWeight$ (cons$ ?v2 ?v3))))) false))) false)) :named a16))
(assert (! (forall ((?v0 A_tree_list_list$) (?v1 A_tree_list_list_list$) (?v2 A_tree_list_list$)) (! (= (member$ (cons$b ?v0 ?v1) ?v2) (or (= ?v0 ?v2) (member$ ?v1 ?v2))) :pattern ((member$ (cons$b ?v0 ?v1) ?v2)))) :named a17))
(assert (! (forall ((?v0 A_tree_list$) (?v1 A_tree_list_list$) (?v2 A_tree_list$)) (! (= (member$a (cons$a ?v0 ?v1) ?v2) (or (= ?v0 ?v2) (member$a ?v1 ?v2))) :pattern ((member$a (cons$a ?v0 ?v1) ?v2)))) :named a18))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$) (?v2 A_tree$)) (! (= (member$b (cons$ ?v0 ?v1) ?v2) (or (= ?v0 ?v2) (member$b ?v1 ?v2))) :pattern ((member$b (cons$ ?v0 ?v1) ?v2)))) :named a19))
(assert (! (= (consistent_F$ nil$) true) :named a20))
(assert (! (forall ((?v0 A_tree_list_list$)) (! (= (member$ nil$b ?v0) false) :pattern ((member$ nil$b ?v0)))) :named a21))
(assert (! (forall ((?v0 A_tree$)) (! (= (member$b nil$ ?v0) false) :pattern ((member$b nil$ ?v0)))) :named a22))
(assert (! (forall ((?v0 A_tree_list$)) (! (= (member$a nil$a ?v0) false) :pattern ((member$a nil$a ?v0)))) :named a23))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 Nat$) (?v3 A$)) (! (= (splitLeaf_F$ nil$ ?v0 ?v1 ?v2 ?v3) nil$) :pattern ((splitLeaf_F$ nil$ ?v0 ?v1 ?v2 ?v3)))) :named a24))
(assert (! (forall ((?v0 A_tree_list_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (=> (not (= ?v0 nil$b)) false)) false)) :named a25))
(assert (! (forall ((?v0 A_tree_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false)) :named a26))
(assert (! (forall ((?v0 A_tree_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (=> (not (= ?v0 nil$a)) false)) false)) :named a27))
(assert (! (forall ((?v0 A_tree_list_list_list_list$)) (=> (and (=> (= ?v0 nil$c) false) (and (forall ((?v1 A_tree_list_list_list_list$)) (=> (= ?v0 (cons$c nil$b ?v1)) false)) (forall ((?v1 A_tree_list_list$) (?v2 A_tree_list_list_list$) (?v3 A_tree_list_list_list_list$)) (=> (= ?v0 (cons$c (cons$b ?v1 ?v2) ?v3)) false)))) false)) :named a28))
(assert (! (forall ((?v0 A_tree_list_list_list$)) (=> (and (=> (= ?v0 nil$b) false) (and (forall ((?v1 A_tree_list_list_list$)) (=> (= ?v0 (cons$b nil$a ?v1)) false)) (forall ((?v1 A_tree_list$) (?v2 A_tree_list_list$) (?v3 A_tree_list_list_list$)) (=> (= ?v0 (cons$b (cons$a ?v1 ?v2) ?v3)) false)))) false)) :named a29))
(assert (! (forall ((?v0 A_tree_list_list$)) (=> (and (=> (= ?v0 nil$a) false) (and (forall ((?v1 A_tree_list_list$)) (=> (= ?v0 (cons$a nil$ ?v1)) false)) (forall ((?v1 A_tree$) (?v2 A_tree_list$) (?v3 A_tree_list_list$)) (=> (= ?v0 (cons$a (cons$ ?v1 ?v2) ?v3)) false)))) false)) :named a30))
(check-sat)
;(get-unsat-core)
