; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 343
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_nat_fun$ 0)
(declare-sort A_tree_list_a_tree_list_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))
  (A_tree_list$ (nil$) (cons$ (hd$ A_tree$) (tl$ A_tree_list$)))))
(declare-fun ts$ () A_tree_list$)
(declare-fun uu$ (A_tree$) A_tree_list_a_tree_list_fun$)
(declare-fun t_a$ () A_tree$)
(declare-fun tsa$ () A_tree_list$)
(declare-fun freq$ (A_tree$) A_nat_fun$)
(declare-fun less$ (Nat$ Nat$) Bool)
(declare-fun size$ (A_tree_list$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun freq_F$ (A_tree_list$) A_nat_fun$)
(declare-fun fun_app$ (A_tree_list_a_tree_list_fun$ A_tree_list$) A_tree_list$)
(declare-fun huffman$ (A_tree_list$) A_tree$)
(declare-fun optimum$ (A_tree$) Bool)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun height_F$ (A_tree_list$) Nat$)
(declare-fun alphabet_F$ (A_tree_list$) A_set$)
(declare-fun consistent$ (A_tree$) Bool)
(declare-fun insortTree$ (A_tree$ A_tree_list$) A_tree_list$)
(declare-fun uniteTrees$ (A_tree$ A_tree$) A_tree$)
(declare-fun consistent_F$ (A_tree_list$) Bool)
(declare-fun sortedByWeight$ (A_tree_list$) Bool)
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (cons$ ?v0 ?v1)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a0))
(assert (! (not (optimum$ (huffman$ tsa$))) :named a1))
(assert (! (consistent_F$ tsa$) :named a2))
(assert (! (sortedByWeight$ tsa$) :named a3))
(assert (! (not (= tsa$ nil$)) :named a4))
(assert (! (= (height_F$ tsa$) zero$) :named a5))
(assert (! (= tsa$ (cons$ t_a$ ts$)) :named a6))
(assert (! (forall ((?v0 A_tree_list$)) (=> (and (less$ (size$ ?v0) (size$ tsa$)) (and (consistent_F$ ?v0) (and (= (height_F$ ?v0) zero$) (and (sortedByWeight$ ?v0) (not (= ?v0 nil$)))))) (optimum$ (huffman$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A_tree$)) (! (= (huffman$ (cons$ ?v0 nil$)) ?v0) :pattern ((uu$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_tree_list$)) (=> (and (consistent_F$ ?v0) (not (= ?v0 nil$))) (consistent$ (huffman$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$) (?v2 A_tree_list$)) (! (= (huffman$ (cons$ ?v0 (cons$ ?v1 ?v2))) (huffman$ (insortTree$ (uniteTrees$ ?v0 ?v1) ?v2))) :pattern ((cons$ ?v0 (cons$ ?v1 ?v2))))) :named a10))
(assert (! (forall ((?v0 A_tree_list$)) (=> (not (= ?v0 nil$)) (= (freq$ (huffman$ ?v0)) (freq_F$ ?v0)))) :named a11))
(assert (! (= (consistent_F$ nil$) true) :named a12))
(assert (! (forall ((?v0 A_tree_list$)) (=> (not (= ?v0 nil$)) (= (alphabet$ (huffman$ ?v0)) (alphabet_F$ ?v0)))) :named a13))
(assert (! (= (sortedByWeight$ nil$) true) :named a14))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (=> (sortedByWeight$ (cons$ ?v0 ?v1)) (sortedByWeight$ ?v1))) :named a15))
(assert (! (forall ((?v0 A_tree_list$)) (=> (and (=> (= ?v0 nil$) false) (and (forall ((?v1 A_tree$)) (=> (= ?v0 (cons$ ?v1 nil$)) false)) (forall ((?v1 A_tree$) (?v2 A_tree$) (?v3 A_tree_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false)))) false)) :named a16))
(assert (! (forall ((?v0 A_tree_list$)) (=> (and (forall ((?v1 A_tree$)) (=> (= ?v0 (cons$ ?v1 nil$)) false)) (and (forall ((?v1 A_tree$) (?v2 A_tree$) (?v3 A_tree_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false)) (=> (= ?v0 nil$) false))) false)) :named a17))
(check-sat)
;(get-unsat-core)
