; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 538
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_tree_bool_fun$ 0)
(declare-sort A_tree_list_nat_fun$ 0)
(declare-sort A_tree_list_bool_fun$ 0)
(declare-sort A_tree_a_tree_list_fun$ 0)
(declare-sort A_tree_list_a_tree_list_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))
  (A_tree_list$ (nil$) (cons$ (hd$ A_tree$) (tl$ A_tree_list$)))))
(declare-fun ts$ () A_tree_list$)
(declare-fun uu$ (A_tree$) A_tree_list_a_tree_list_fun$)
(declare-fun bind$ (A_tree_list$ A_tree_a_tree_list_fun$) A_tree_list$)
(declare-fun maps$ (A_tree_a_tree_list_fun$) A_tree_list_a_tree_list_fun$)
(declare-fun member$ (A_tree_list$) A_tree_bool_fun$)
(declare-fun splice$ (A_tree_list$) A_tree_list_a_tree_list_fun$)
(declare-fun fun_app$ (A_tree_list_a_tree_list_fun$ A_tree_list$) A_tree_list$)
(declare-fun huffman$ (A_tree_list$) A_tree$)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun fun_app$a (A_tree_list_bool_fun$ A_tree_list$) Bool)
(declare-fun fun_app$b (A_tree_bool_fun$ A_tree$) Bool)
(declare-fun fun_app$c (A_tree_list_nat_fun$ A_tree_list$) Nat$)
(declare-fun list_ex1$ (A_tree_bool_fun$) A_tree_list_bool_fun$)
(declare-fun alphabet_F$ (A_tree_list$) A_set$)
(declare-fun consistent$ (A_tree$) Bool)
(declare-fun gen_length$ (Nat$) A_tree_list_nat_fun$)
(declare-fun insortTree$ (A_tree$ A_tree_list$) A_tree_list$)
(declare-fun consistent_F$ (A_tree_list$) Bool)
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (cons$ ?v0 ?v1)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a0))
(assert (! (not (consistent$ (huffman$ ts$))) :named a1))
(assert (! (consistent_F$ ts$) :named a2))
(assert (! (not (= ts$ nil$)) :named a3))
(assert (! (= (consistent_F$ nil$) true) :named a4))
(assert (! (forall ((?v0 A_tree_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false)) :named a5))
(assert (! (forall ((?v0 A_tree$)) (! (= (huffman$ (cons$ ?v0 nil$)) ?v0) :pattern ((uu$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (not (= (insortTree$ ?v0 ?v1) nil$))) :named a7))
(assert (! (forall ((?v0 A_tree_list$)) (=> (not (= ?v0 nil$)) (= (alphabet$ (huffman$ ?v0)) (alphabet_F$ ?v0)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 A$)) (! (= (consistent$ (leaf$ ?v0 ?v1)) true) :pattern ((leaf$ ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 A_tree_a_tree_list_fun$)) (! (= (bind$ nil$ ?v0) nil$) :pattern ((bind$ nil$ ?v0)))) :named a10))
(assert (! (forall ((?v0 A_tree_bool_fun$)) (! (= (fun_app$a (list_ex1$ ?v0) nil$) false) :pattern ((list_ex1$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_tree_list$)) (=> (and (forall ((?v1 A_tree$)) (=> (= ?v0 (cons$ ?v1 nil$)) false)) (and (forall ((?v1 A_tree$) (?v2 A_tree$) (?v3 A_tree_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false)) (=> (= ?v0 nil$) false))) false)) :named a12))
(assert (! (forall ((?v0 A_tree$)) (! (= (fun_app$b (member$ nil$) ?v0) false) :pattern ((fun_app$b (member$ nil$) ?v0)))) :named a13))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$c (gen_length$ ?v0) nil$) ?v0) :pattern ((gen_length$ ?v0)))) :named a14))
(assert (! (forall ((?v0 A_tree_list$)) (! (= (fun_app$ (splice$ ?v0) nil$) ?v0) :pattern ((splice$ ?v0)))) :named a15))
(assert (! (forall ((?v0 A_tree_a_tree_list_fun$)) (! (= (fun_app$ (maps$ ?v0) nil$) nil$) :pattern ((maps$ ?v0)))) :named a16))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$) (?v2 A_tree$) (?v3 A_tree_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 Nat$) (?v3 A$)) (= (= (leaf$ ?v0 ?v1) (leaf$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a18))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (= (consistent_F$ (insortTree$ ?v0 ?v1)) (consistent_F$ (cons$ ?v0 ?v1)))) :named a19))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$) (?v2 A_tree$)) (! (= (fun_app$b (member$ (cons$ ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$b (member$ ?v1) ?v2))) :pattern ((fun_app$b (member$ (cons$ ?v0 ?v1)) ?v2)))) :named a20))
(check-sat)
;(get-unsat-core)
