; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 698
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))))
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun t$ () A_tree$)
(declare-fun u$ () A_tree$)
(declare-fun w_a$ () Nat$)
(declare-fun w_b$ () Nat$)
(declare-fun freq$ (A_tree$) A_nat_fun$)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun height$ (A_tree$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun less_eq$ (Nat$) Nat_bool_fun$)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun fun_app$a (A_nat_fun$ A$) Nat$)
(declare-fun splitLeaf$ (A_tree$ Nat$ A$ Nat$ A$) A_tree$)
(declare-fun consistent$ (A_tree$) Bool)
(assert (! (not (fun_app$ (less$ zero$) (height$ u$))) :named a0))
(assert (! (= (fun_app$a (freq$ t$) a$) (plus$ w_a$ w_b$)) :named a1))
(assert (! (forall ((?v0 A$)) (=> (member$ ?v0 (alphabet$ t$)) (and (fun_app$ (less_eq$ w_a$) (fun_app$a (freq$ t$) ?v0)) (fun_app$ (less_eq$ w_b$) (fun_app$a (freq$ t$) ?v0))))) :named a2))
(assert (! (consistent$ u$) :named a3))
(assert (! (not (= (height$ (splitLeaf$ t$ w_a$ a$ w_b$ b$)) zero$)) :named a4))
(assert (! (= (alphabet$ (splitLeaf$ t$ w_a$ a$ w_b$ b$)) (alphabet$ u$)) :named a5))
(assert (! (= (freq$ (splitLeaf$ t$ w_a$ a$ w_b$ b$)) (freq$ u$)) :named a6))
(assert (! (forall ((?v0 Nat$)) (= (not (= ?v0 zero$)) (fun_app$ (less$ zero$) ?v0))) :named a7))
(assert (! (forall ((?v0 Nat$)) (= (not (fun_app$ (less$ zero$) ?v0)) (= ?v0 zero$))) :named a8))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (less$ ?v0) zero$) false) :pattern ((less$ ?v0)))) :named a9))
(assert (! (forall ((?v0 Nat$)) (=> (=> (= ?v0 zero$) false) (fun_app$ (less$ zero$) ?v0))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (not (= ?v1 zero$)))) :named a11))
(assert (! (forall ((?v0 Nat$)) (=> (fun_app$ (less$ ?v0) zero$) false)) :named a12))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (and (fun_app$ ?v0 zero$) (forall ((?v2 Nat$)) (=> (and (fun_app$ (less$ zero$) ?v2) (not (fun_app$ ?v0 ?v2))) (exists ((?v3 Nat$)) (and (fun_app$ (less$ ?v3) ?v2) (not (fun_app$ ?v0 ?v3))))))) (fun_app$ ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 Nat$)) (not (fun_app$ (less$ ?v0) zero$))) :named a14))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree$)) (=> (and (fun_app$ (less$ zero$) (height$ ?v0)) (and (consistent$ ?v0) (= (alphabet$ ?v0) (alphabet$ ?v1)))) (fun_app$ (less$ zero$) (height$ ?v1)))) :named a15))
(check-sat)
;(get-unsat-core)
