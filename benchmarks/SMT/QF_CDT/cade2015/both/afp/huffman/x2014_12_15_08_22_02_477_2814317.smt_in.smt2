; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 647
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_tree_list_a_tree_list_fun$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))
  (A_tree_list$ (nil$) (cons$ (hd$ A_tree$) (tl$ A_tree_list$)))))
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun t$ () A_tree$)
(declare-fun u$ () A_tree$)
(declare-fun us$ () A_tree_list$)
(declare-fun uu$ (A_tree$) A_tree_list_a_tree_list_fun$)
(declare-fun bot$ () A_set$)
(declare-fun sup$ (A_set$ A_set$) A_set$)
(declare-fun w_a$ () Nat$)
(declare-fun w_b$ () Nat$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun freq_F$ (A_tree_list$ A$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_tree_list_a_tree_list_fun$ A_tree_list$) A_tree_list$)
(declare-fun huffman$ (A_tree_list$) A_tree$)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun alphabet_F$ (A_tree_list$) A_set$)
(declare-fun insortTree$ (A_tree$) A_tree_list_a_tree_list_fun$)
(declare-fun splitLeaf_F$ (A_tree_list$ Nat$ A$ Nat$ A$) A_tree_list$)
(declare-fun consistent_F$ (A_tree_list$) Bool)
(declare-fun swapFourSyms$ (A_tree$ A$ A$ A$ A$) A_tree$)
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (cons$ ?v0 ?v1)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a0))
(assert (! (not (not (member$ a$ (alphabet_F$ us$)))) :named a1))
(assert (! (member$ a$ (alphabet$ u$)) :named a2))
(assert (! (not (member$ a$ (alphabet$ t$))) :named a3))
(assert (! (consistent_F$ (cons$ u$ us$)) :named a4))
(assert (! (member$ a$ (alphabet_F$ (cons$ u$ us$))) :named a5))
(assert (! (= (freq_F$ (cons$ u$ us$) a$) (plus$ w_a$ w_b$)) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_tree_list$) (?v2 Nat$) (?v3 Nat$) (?v4 A$)) (! (=> (not (member$ ?v0 (alphabet_F$ ?v1))) (= (splitLeaf_F$ ?v1 ?v2 ?v0 ?v3 ?v4) ?v1)) :pattern ((splitLeaf_F$ ?v1 ?v2 ?v0 ?v3 ?v4)))) :named a7))
(assert (! (=> (and (member$ a$ (alphabet_F$ us$)) (and (consistent_F$ us$) (and (not (member$ a$ (alphabet$ t$))) (= (freq_F$ us$ a$) (plus$ w_a$ w_b$))))) (= (splitLeaf_F$ (fun_app$ (insortTree$ t$) us$) w_a$ a$ w_b$ b$) (fun_app$ (insortTree$ t$) (splitLeaf_F$ us$ w_a$ a$ w_b$ b$)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_tree_list$)) (! (=> (not (member$ ?v0 (alphabet_F$ ?v1))) (= (freq_F$ ?v1 ?v0) zero$)) :pattern ((freq_F$ ?v1 ?v0)))) :named a9))
(assert (! (forall ((?v0 A_tree$)) (exists ((?v1 A$)) (member$ ?v1 (alphabet$ ?v0)))) :named a10))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (= (alphabet_F$ (fun_app$ (insortTree$ ?v0) ?v1)) (sup$ (alphabet$ ?v0) (alphabet_F$ ?v1)))) :named a11))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (! (= (alphabet_F$ (cons$ ?v0 ?v1)) (sup$ (alphabet$ ?v0) (alphabet_F$ ?v1))) :pattern ((cons$ ?v0 ?v1)))) :named a12))
(assert (! (forall ((?v0 A_tree_list$)) (=> (not (= ?v0 nil$)) (= (alphabet$ (huffman$ ?v0)) (alphabet_F$ ?v0)))) :named a13))
(assert (! (forall ((?v0 A_tree$) (?v1 A_tree_list$)) (= (consistent_F$ (fun_app$ (insortTree$ ?v0) ?v1)) (consistent_F$ (cons$ ?v0 ?v1)))) :named a14))
(assert (! (= (alphabet_F$ nil$) bot$) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_tree$) (?v2 A$) (?v3 A$) (?v4 A$)) (=> (and (member$ ?v0 (alphabet$ ?v1)) (and (member$ ?v2 (alphabet$ ?v1)) (and (member$ ?v3 (alphabet$ ?v1)) (member$ ?v4 (alphabet$ ?v1))))) (= (alphabet$ (swapFourSyms$ ?v1 ?v0 ?v2 ?v3 ?v4)) (alphabet$ ?v1)))) :named a16))
(assert (! (forall ((?v0 A_tree$)) (! (= (fun_app$ (insortTree$ ?v0) nil$) (cons$ ?v0 nil$)) :pattern ((insortTree$ ?v0)))) :named a17))
(assert (! (forall ((?v0 A_tree$)) (! (= (huffman$ (cons$ ?v0 nil$)) ?v0) :pattern ((uu$ ?v0)))) :named a18))
(check-sat)
;(get-unsat-core)
