; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 679
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-datatypes () ((A_tree$ (leaf$ (select$ Nat$) (selecta$ A$)) (innerNode$ (selectb$ Nat$) (selectc$ A_tree$) (selectd$ A_tree$)))))
(declare-fun a$ () A$)
(declare-fun b$ () A$)
(declare-fun c$ () A$)
(declare-fun d$ () A$)
(declare-fun t$ () A_tree$)
(declare-fun cost$ (A_tree$) Nat$)
(declare-fun depth$ (A_tree$ A$) Nat$)
(declare-fun height$ (A_tree$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun minima$ (A_tree$ A$ A$) Bool)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun alphabet$ (A_tree$) A_set$)
(declare-fun consistent$ (A_tree$) Bool)
(declare-fun swapFourSyms$ (A_tree$ A$ A$ A$ A$) A_tree$)
(assert (! (not (less_eq$ (cost$ (swapFourSyms$ t$ a$ b$ c$ d$)) (cost$ t$))) :named a0))
(assert (! (not (= c$ d$)) :named a1))
(assert (! (consistent$ t$) :named a2))
(assert (! (minima$ t$ a$ b$) :named a3))
(assert (! (member$ c$ (alphabet$ t$)) :named a4))
(assert (! (member$ d$ (alphabet$ t$)) :named a5))
(assert (! (= (depth$ t$ c$) (height$ t$)) :named a6))
(assert (! (= (depth$ t$ d$) (height$ t$)) :named a7))
(assert (! (forall ((?v0 Nat$)) (less_eq$ ?v0 ?v0)) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (less_eq$ ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (or (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0))) :named a12))
(assert (! (forall ((?v0 Nat$)) (less_eq$ ?v0 ?v0)) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= ?v0 ?v1) (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (=> (less_eq$ ?v0 ?v1) false) (=> (less_eq$ ?v1 ?v0) false)) false)) :named a15))
(check-sat)
;(get-unsat-core)
