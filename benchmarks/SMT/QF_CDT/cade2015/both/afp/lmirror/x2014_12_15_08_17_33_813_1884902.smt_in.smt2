; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 520
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_llist_set$ 0)
(declare-sort A_llist_llist_a_llist_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))
  (A_llist_llist_llist_llist$ (lNil$c) (lCons$c (lhd$c A_llist_llist_llist$) (ltl$c A_llist_llist_llist_llist$)))))
(declare-fun xs$ () A_llist$)
(declare-fun acc$ () A_llist$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lnull$a (A_llist_llist_llist$) Bool)
(declare-fun lnull$b (A_llist_llist$) Bool)
(declare-fun lnull$c (A_llist_llist_llist_llist$) Bool)
(declare-fun member$ (A_llist_llist_llist$ A_llist_llist_llist_set$) Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lconcat$ (A_llist_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun member$a (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun member$b (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$a (A_llist_llist_a_llist_llist_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun fun_app$b (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$d (A_bool_fun$ A$) Bool)
(declare-fun lconcat$a (A_llist_llist_llist$) A_llist_llist$)
(declare-fun lconcat$b (A_llist_llist$) A_llist$)
(declare-fun ltakeWhile$ (A_llist_llist_bool_fun$ A_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun lmirror_aux$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun ltakeWhile$a (A_llist_bool_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun ltakeWhile$b (A_bool_fun$ A_llist$) A_llist$)
(declare-fun lmirror_aux$a (A_llist_llist_llist$ A_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun lmirror_aux$b (A_llist_llist$) A_llist_llist_a_llist_llist_fun$)
(assert (! (not (= (lhd$ (fun_app$ (lmirror_aux$ acc$) xs$)) (ite (lnull$ xs$) (lhd$ acc$) (lhd$ xs$)))) :named a0))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (= (not (lnull$a (lmirror_aux$a ?v0 ?v1))) (or (not (lnull$a ?v1)) (not (lnull$a ?v0))))) :named a1))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (not (lnull$b (fun_app$a (lmirror_aux$b ?v0) ?v1))) (or (not (lnull$b ?v1)) (not (lnull$b ?v0))))) :named a2))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$ (fun_app$ (lmirror_aux$ ?v0) ?v1))) (or (not (lnull$ ?v1)) (not (lnull$ ?v0))))) :named a3))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (= (lnull$a (lmirror_aux$a ?v0 ?v1)) (and (lnull$a ?v1) (lnull$a ?v0)))) :named a4))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (lnull$b (fun_app$a (lmirror_aux$b ?v0) ?v1)) (and (lnull$b ?v1) (lnull$b ?v0)))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$ (fun_app$ (lmirror_aux$ ?v0) ?v1)) (and (lnull$ ?v1) (lnull$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a7))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (and (lnull$b ?v0) (lnull$b ?v1)) false) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false)) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a9))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) (not (lnull$a (lmirror_aux$a ?v1 ?v0))))) :named a10))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) (not (lnull$b (fun_app$a (lmirror_aux$b ?v1) ?v0))))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) (not (lnull$ (fun_app$ (lmirror_aux$ ?v1) ?v0))))) :named a12))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (=> (and (lnull$a ?v0) (lnull$a ?v1)) (lnull$a (lmirror_aux$a ?v1 ?v0)))) :named a13))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (lnull$b ?v0) (lnull$b ?v1)) (lnull$b (fun_app$a (lmirror_aux$b ?v1) ?v0)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lnull$ ?v0) (lnull$ ?v1)) (lnull$ (fun_app$ (lmirror_aux$ ?v1) ?v0)))) :named a15))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_bool_fun$)) (=> (and (=> (or (lnull$a ?v0) (not (fun_app$b ?v1 (lhd$b ?v0)))) false) (=> (and (not (lnull$a ?v0)) (fun_app$b ?v1 (lhd$b ?v0))) false)) false)) :named a16))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_bool_fun$)) (=> (and (=> (or (lnull$b ?v0) (not (fun_app$c ?v1 (lhd$a ?v0)))) false) (=> (and (not (lnull$b ?v0)) (fun_app$c ?v1 (lhd$a ?v0))) false)) false)) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (lnull$ ?v0) (not (fun_app$d ?v1 (lhd$ ?v0)))) false) (=> (and (not (lnull$ ?v0)) (fun_app$d ?v1 (lhd$ ?v0))) false)) false)) :named a18))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$a ?v1))) false)) false)) :named a19))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$a ?v1))) false)) false)) :named a20))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$ ?v1))) false)) false)) :named a21))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$b ?v1))) false)) false)) :named a22))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a23))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$b ?v1))) false)) false)) :named a24))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$ ?v1))) false)) false)) :named a25))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false)) :named a26))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a27))
(assert (! (forall ((?v0 A_llist_llist_llist_set$)) (=> (and (=> (forall ((?v1 A_llist_llist_llist$)) (=> (member$ ?v1 ?v0) (lnull$a ?v1))) false) (=> (not (forall ((?v1 A_llist_llist_llist$)) (=> (member$ ?v1 ?v0) (lnull$a ?v1)))) false)) false)) :named a28))
(assert (! (forall ((?v0 A_llist_llist_set$)) (=> (and (=> (forall ((?v1 A_llist_llist$)) (=> (member$a ?v1 ?v0) (lnull$b ?v1))) false) (=> (not (forall ((?v1 A_llist_llist$)) (=> (member$a ?v1 ?v0) (lnull$b ?v1)))) false)) false)) :named a29))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$b ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$b ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a30))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a31))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (and (lnull$b ?v0) (lnull$b ?v1)) false) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false)) :named a32))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a33))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false)) :named a34))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (and (=> (lnull$b ?v0) false) (=> (not (lnull$b ?v0)) false)) false)) :named a35))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)) :named a36))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (! (=> (and (lnull$a ?v0) (lnull$a ?v1)) (= (lmirror_aux$a ?v1 ?v0) lNil$b)) :pattern ((lmirror_aux$a ?v1 ?v0)))) :named a37))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (! (=> (and (lnull$b ?v0) (lnull$b ?v1)) (= (fun_app$a (lmirror_aux$b ?v1) ?v0) lNil$a)) :pattern ((fun_app$a (lmirror_aux$b ?v1) ?v0)))) :named a38))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (and (lnull$ ?v0) (lnull$ ?v1)) (= (fun_app$ (lmirror_aux$ ?v1) ?v0) lNil$)) :pattern ((fun_app$ (lmirror_aux$ ?v1) ?v0)))) :named a39))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$a (lmirror_aux$b ?v0) lNil$a) ?v0) :pattern ((lmirror_aux$b ?v0)))) :named a40))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (lmirror_aux$ ?v0) lNil$) ?v0) :pattern ((lmirror_aux$ ?v0)))) :named a41))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$)) (=> (and (not (lnull$c ?v0)) (not (lnull$a (lhd$c ?v0)))) (= (lhd$b (lconcat$ ?v0)) (lhd$b (lhd$c ?v0))))) :named a42))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (=> (and (not (lnull$a ?v0)) (not (lnull$b (lhd$b ?v0)))) (= (lhd$a (lconcat$a ?v0)) (lhd$a (lhd$b ?v0))))) :named a43))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (and (not (lnull$b ?v0)) (not (lnull$ (lhd$a ?v0)))) (= (lhd$ (lconcat$b ?v0)) (lhd$ (lhd$a ?v0))))) :named a44))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist$) (?v2 A_llist_llist$)) (! (= (fun_app$a (lmirror_aux$b ?v0) (lCons$a ?v1 ?v2)) (lCons$a ?v1 (fun_app$a (lmirror_aux$b (lCons$a ?v1 ?v0)) ?v2))) :pattern ((fun_app$a (lmirror_aux$b ?v0) (lCons$a ?v1 ?v2))))) :named a45))
(assert (! (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (lmirror_aux$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v1 (fun_app$ (lmirror_aux$ (lCons$ ?v1 ?v0)) ?v2))) :pattern ((fun_app$ (lmirror_aux$ ?v0) (lCons$ ?v1 ?v2))))) :named a46))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$)) (= (not (lnull$a (ltakeWhile$ ?v0 ?v1))) (and (not (lnull$a ?v1)) (fun_app$b ?v0 (lhd$b ?v1))))) :named a47))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (= (not (lnull$b (ltakeWhile$a ?v0 ?v1))) (and (not (lnull$b ?v1)) (fun_app$c ?v0 (lhd$a ?v1))))) :named a48))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (not (lnull$ (ltakeWhile$b ?v0 ?v1))) (and (not (lnull$ ?v1)) (fun_app$d ?v0 (lhd$ ?v1))))) :named a49))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$)) (= (lnull$a (ltakeWhile$ ?v0 ?v1)) (or (lnull$a ?v1) (not (fun_app$b ?v0 (lhd$b ?v1)))))) :named a50))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (= (lnull$b (ltakeWhile$a ?v0 ?v1)) (or (lnull$b ?v1) (not (fun_app$c ?v0 (lhd$a ?v1)))))) :named a51))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lnull$ (ltakeWhile$b ?v0 ?v1)) (or (lnull$ ?v1) (not (fun_app$d ?v0 (lhd$ ?v1)))))) :named a52))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$)) (= (lnull$a (ltakeWhile$ ?v0 ?v1)) (=> (not (lnull$a ?v1)) (not (fun_app$b ?v0 (lhd$b ?v1)))))) :named a53))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (= (lnull$b (ltakeWhile$a ?v0 ?v1)) (=> (not (lnull$b ?v1)) (not (fun_app$c ?v0 (lhd$a ?v1)))))) :named a54))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lnull$ (ltakeWhile$b ?v0 ?v1)) (=> (not (lnull$ ?v1)) (not (fun_app$d ?v0 (lhd$ ?v1)))))) :named a55))
(check-sat)
;(get-unsat-core)
