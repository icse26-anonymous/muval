; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 527
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))))
(declare-fun p$ () A_b_bool_fun_fun$)
(declare-fun xsa$ () A_llist$)
(declare-fun acca$ () A_llist$)
(declare-fun xs_a$ () B_llist$)
(declare-fun acc_a$ () B_llist$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lnull$a (B_llist$) Bool)
(declare-fun fun_app$ (B_bool_fun$ B$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun fun_app$a (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun lfinite$a (B_llist$) Bool)
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ B_llist$) Bool)
(declare-fun llist_all2$a (A_a_bool_fun_fun$ A_llist$ A_llist$) Bool)
(declare-fun llist_all2$b (B_a_bool_fun_fun$ B_llist$ A_llist$) Bool)
(declare-fun llist_all2$c (B_b_bool_fun_fun$ B_llist$ B_llist$) Bool)
(declare-fun lmirror_aux$ (A_llist$ A_llist$) A_llist$)
(declare-fun lmirror_aux$a (B_llist$ B_llist$) B_llist$)
(assert (! (not (and (fun_app$ (fun_app$a p$ (lhd$ xsa$)) (lhd$a xs_a$)) (or (exists ((?v0 A_llist$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_llist$)) (and (= (ltl$ xsa$) ?v0) (and (= (ltl$a xs_a$) ?v1) (and (llist_all2$ p$ (lmirror_aux$ ?v2 ?v0) (lmirror_aux$a ?v3 ?v1)) (and (llist_all2$ p$ ?v2 ?v3) (lfinite$ ?v2)))))) (llist_all2$ p$ (ltl$ xsa$) (ltl$a xs_a$))))) :named a0))
(assert (! (lfinite$ acca$) :named a1))
(assert (! (not (lnull$ xsa$)) :named a2))
(assert (! (not (lnull$a xs_a$)) :named a3))
(assert (! (llist_all2$ p$ acca$ acc_a$) :named a4))
(assert (! (fun_app$ (fun_app$a p$ (lhd$ xsa$)) (lhd$a xs_a$)) :named a5))
(assert (! (llist_all2$ p$ (lmirror_aux$ acca$ xsa$) (lmirror_aux$a acc_a$ xs_a$)) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$ (lmirror_aux$ ?v0 ?v1)) (and (lfinite$ ?v1) (lfinite$ ?v0)))) :named a7))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (lfinite$a (lmirror_aux$a ?v0 ?v1)) (and (lfinite$a ?v1) (lfinite$a ?v0)))) :named a8))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$) (?v4 A_llist$)) (=> (and (llist_all2$a ?v0 ?v1 ?v2) (llist_all2$a ?v0 ?v3 ?v4)) (llist_all2$a ?v0 (lmirror_aux$ ?v1 ?v3) (lmirror_aux$ ?v2 ?v4)))) :named a9))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_llist$) (?v4 B_llist$)) (=> (and (llist_all2$ ?v0 ?v1 ?v2) (llist_all2$ ?v0 ?v3 ?v4)) (llist_all2$ ?v0 (lmirror_aux$ ?v1 ?v3) (lmirror_aux$a ?v2 ?v4)))) :named a10))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_llist$) (?v4 A_llist$)) (=> (and (llist_all2$b ?v0 ?v1 ?v2) (llist_all2$b ?v0 ?v3 ?v4)) (llist_all2$b ?v0 (lmirror_aux$a ?v1 ?v3) (lmirror_aux$ ?v2 ?v4)))) :named a11))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_llist$) (?v4 B_llist$)) (=> (and (llist_all2$c ?v0 ?v1 ?v2) (llist_all2$c ?v0 ?v3 ?v4)) (llist_all2$c ?v0 (lmirror_aux$a ?v1 ?v3) (lmirror_aux$a ?v2 ?v4)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (lmirror_aux$ ?v1 ?v0) ?v0)) :pattern ((lmirror_aux$ ?v1 ?v0)))) :named a13))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (=> (not (lfinite$a ?v0)) (= (lmirror_aux$a ?v1 ?v0) ?v0)) :pattern ((lmirror_aux$a ?v1 ?v0)))) :named a14))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$ (ltl$ ?v0)) (lfinite$ ?v0))) :named a15))
(assert (! (forall ((?v0 B_llist$)) (= (lfinite$a (ltl$a ?v0)) (lfinite$a ?v0))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$ (lmirror_aux$ ?v0 ?v1))) (or (not (lnull$ ?v1)) (not (lnull$ ?v0))))) :named a17))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (not (lnull$a (lmirror_aux$a ?v0 ?v1))) (or (not (lnull$a ?v1)) (not (lnull$a ?v0))))) :named a18))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$ (lmirror_aux$ ?v0 ?v1)) (and (lnull$ ?v1) (lnull$ ?v0)))) :named a19))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (lnull$a (lmirror_aux$a ?v0 ?v1)) (and (lnull$a ?v1) (lnull$a ?v0)))) :named a20))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lhd$ (lmirror_aux$ ?v0 ?v1)) (ite (lnull$ ?v1) (lhd$ ?v0) (lhd$ ?v1)))) :named a21))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (lhd$a (lmirror_aux$a ?v0 ?v1)) (ite (lnull$a ?v1) (lhd$a ?v0) (lhd$a ?v1)))) :named a22))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (llist_all2$c ?v0 ?v1 ?v2) (= (lfinite$a ?v1) (lfinite$a ?v2)))) :named a23))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$)) (=> (llist_all2$b ?v0 ?v1 ?v2) (= (lfinite$a ?v1) (lfinite$ ?v2)))) :named a24))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (llist_all2$a ?v0 ?v1 ?v2) (= (lfinite$ ?v1) (lfinite$ ?v2)))) :named a25))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (=> (llist_all2$ ?v0 ?v1 ?v2) (= (lfinite$ ?v1) (lfinite$a ?v2)))) :named a26))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (llist_all2$a ?v0 ?v1 ?v2) (llist_all2$a ?v0 (ltl$ ?v1) (ltl$ ?v2)))) :named a27))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$)) (=> (llist_all2$b ?v0 ?v1 ?v2) (llist_all2$b ?v0 (ltl$a ?v1) (ltl$ ?v2)))) :named a28))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (llist_all2$c ?v0 ?v1 ?v2) (llist_all2$c ?v0 (ltl$a ?v1) (ltl$a ?v2)))) :named a29))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (=> (llist_all2$ ?v0 ?v1 ?v2) (llist_all2$ ?v0 (ltl$ ?v1) (ltl$a ?v2)))) :named a30))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) (not (lnull$ (lmirror_aux$ ?v1 ?v0))))) :named a31))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) (not (lnull$a (lmirror_aux$a ?v1 ?v0))))) :named a32))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lnull$ ?v0) (lnull$ ?v1)) (lnull$ (lmirror_aux$ ?v1 ?v0)))) :named a33))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (lnull$a ?v0) (lnull$a ?v1)) (lnull$a (lmirror_aux$a ?v1 ?v0)))) :named a34))
(check-sat)
;(get-unsat-core)
