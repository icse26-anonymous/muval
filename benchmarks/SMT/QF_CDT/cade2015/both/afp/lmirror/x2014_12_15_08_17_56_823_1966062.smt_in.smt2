; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 629
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun lmirror$ () A_llist_a_llist_fun$)
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$b (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun gen_lset$ (A_set$) A_llist_a_set_fun$)
(declare-fun lsublist$ (A_llist$ Nat_set$) A_llist$)
(declare-fun ldistinct$ (A_llist$) Bool)
(declare-fun pred_llist$ (A_bool_fun$ A_llist$) Bool)
(declare-fun lmirror_aux$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun finite_lprefix$ (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$ (A_llist$ A_llist$) Bool)
(assert (! (not (= (fun_app$ lmirror$ lNil$) lNil$)) :named a0))
(assert (! (= lmirror$ (lmirror_aux$ lNil$)) :named a1))
(assert (! (forall ((?v0 A_llist$)) (= (lnull$ (fun_app$ lmirror$ ?v0)) (lnull$ ?v0))) :named a2))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (lmirror_aux$ ?v0) lNil$) ?v0) :pattern ((lmirror_aux$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$a (lmember$ ?v0) lNil$) false) :pattern ((lmember$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$b (gen_lset$ ?v0) lNil$) ?v0) :pattern ((gen_lset$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a (finite_lprefix$ ?v0) lNil$) (= ?v0 lNil$)) :pattern ((finite_lprefix$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a (finite_lprefix$ lNil$) ?v0) true) :pattern ((fun_app$a (finite_lprefix$ lNil$) ?v0)))) :named a7))
(assert (! (= (lstrict_prefix$ lNil$ lNil$) false) :named a8))
(assert (! (forall ((?v0 A_bool_fun$)) (pred_llist$ ?v0 lNil$)) :named a9))
(assert (! (forall ((?v0 Nat_set$)) (! (= (lsublist$ lNil$ ?v0) lNil$) :pattern ((lsublist$ lNil$ ?v0)))) :named a10))
(assert (! (= (ldistinct$ lNil$) true) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$ (fun_app$ (lmirror_aux$ ?v0) ?v1))) (or (not (lnull$ ?v1)) (not (lnull$ ?v0))))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$ (fun_app$ (lmirror_aux$ ?v0) ?v1)) (and (lnull$ ?v1) (lnull$ ?v0)))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a14))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a16))
(check-sat)
;(get-unsat-core)
