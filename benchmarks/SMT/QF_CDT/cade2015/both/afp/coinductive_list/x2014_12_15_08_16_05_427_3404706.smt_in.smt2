; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 470
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Enat_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Enat_nat_fun$ 0)
(declare-sort Nat_enat_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort A_llist_nat_fun$ 0)
(declare-sort Nat_a_llist_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort Enat_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_set_a_llist_fun$ 0)
(declare-sort B_llist_set_b_llist_fun$ 0)
(declare-sort A_llist_b_llist_prod_set$ 0)
(declare-sort A_llist_b_llist_prod_nat_fun$ 0)
(declare-sort Nat_a_llist_b_llist_prod_fun$ 0)
(declare-sort Nat_enat_fun_nat_nat_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_enat_fun_fun$ 0)
(declare-sort Enat_a_llist_b_llist_prod_fun$ 0)
(declare-sort Nat_enat_fun_nat_enat_fun_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_llist_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ 0)
(declare-sort Nat_enat_fun_nat_a_llist_b_llist_prod_fun_fun$ 0)
(declare-sort Enat_enat_fun_enat_a_llist_b_llist_prod_fun_fun$ 0)
(declare-sort Nat_a_llist_b_llist_prod_fun_nat_a_llist_fun_fun$ 0)
(declare-sort Enat_a_llist_b_llist_prod_fun_enat_a_llist_fun_fun$ 0)
(declare-sort Enat_a_llist_b_llist_prod_fun_enat_a_llist_b_llist_prod_fun_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_llist_fun_a_llist_b_llist_prod_a_llist_fun_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_llist_b_llist_prod_fun_a_llist_b_llist_prod_a_llist_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))))
(declare-datatypes () ((A_llist_b_llist_prod$ (pair$ (fst$ A_llist$) (snd$ B_llist$)))
  (Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun p$ (A_llist$ B_llist$) Bool)
(declare-fun uu$ () A_llist_b_llist_prod_a_llist_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun top$ () Nat_set$)
(declare-fun uua$ () Enat_a_llist_b_llist_prod_fun$)
(declare-fun uub$ () A_llist_b_llist_prod_a_llist_b_llist_prod_fun$)
(declare-fun uuc$ () Enat_enat_fun$)
(declare-fun uud$ () Nat_nat_fun$)
(declare-fun uue$ (Enat_enat_fun$) Nat_enat_fun_nat_enat_fun_fun$)
(declare-fun uuf$ (Nat_enat_fun$) Nat_nat_fun_nat_enat_fun_fun$)
(declare-fun uug$ (Enat_a_llist_b_llist_prod_fun$) Enat_enat_fun_enat_a_llist_b_llist_prod_fun_fun$)
(declare-fun uuh$ (Enat_a_llist_b_llist_prod_fun$) Nat_enat_fun_nat_a_llist_b_llist_prod_fun_fun$)
(declare-fun uui$ (A_llist_b_llist_prod_a_llist_fun$) Enat_a_llist_b_llist_prod_fun_enat_a_llist_fun_fun$)
(declare-fun uuj$ (A_llist_b_llist_prod_a_llist_fun$) Nat_a_llist_b_llist_prod_fun_nat_a_llist_fun_fun$)
(declare-fun uuk$ (A_llist_a_llist_fun$) A_llist_b_llist_prod_a_llist_fun_a_llist_b_llist_prod_a_llist_fun_fun$)
(declare-fun uul$ (A_llist_b_llist_prod_a_llist_b_llist_prod_fun$) Enat_a_llist_b_llist_prod_fun_enat_a_llist_b_llist_prod_fun_fun$)
(declare-fun uum$ (A_llist_b_llist_prod_a_llist_fun$) A_llist_b_llist_prod_a_llist_b_llist_prod_fun_a_llist_b_llist_prod_a_llist_fun_fun$)
(declare-fun uun$ (Enat_nat_fun$) Nat_enat_fun_nat_nat_fun_fun$)
(declare-fun enat$ () Nat_enat_fun$)
(declare-fun lSup$ () A_llist_set_a_llist_fun$)
(declare-fun top$a () A_llist_set$)
(declare-fun top$b () Enat_set$)
(declare-fun top$c () A_llist_b_llist_prod_set$)
(declare-fun image$ (A_llist_b_llist_prod_a_llist_fun$ A_llist_b_llist_prod_set$) A_llist_set$)
(declare-fun lSup$a () B_llist_set_b_llist_fun$)
(declare-fun ltake$ (Enat$) A_llist_a_llist_fun$)
(declare-fun image$a (Enat_a_llist_b_llist_prod_fun$ Enat_set$) A_llist_b_llist_prod_set$)
(declare-fun image$b (Nat_enat_fun$ Nat_set$) Enat_set$)
(declare-fun image$c (A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ A_llist_b_llist_prod_set$) A_llist_b_llist_prod_set$)
(declare-fun image$d (Enat_enat_fun$ Enat_set$) Enat_set$)
(declare-fun image$e (Nat_nat_fun$ Nat_set$) Nat_set$)
(declare-fun image$f (Enat_nat_fun$ Enat_set$) Nat_set$)
(declare-fun image$g (Nat_a_llist_fun$ Nat_set$) A_llist_set$)
(declare-fun image$h (Enat_a_llist_fun$ Enat_set$) A_llist_set$)
(declare-fun image$i (A_llist_nat_fun$ A_llist_set$) Nat_set$)
(declare-fun image$j (A_llist_enat_fun$ A_llist_set$) Enat_set$)
(declare-fun image$k (Nat_a_llist_b_llist_prod_fun$ Nat_set$) A_llist_b_llist_prod_set$)
(declare-fun image$l (A_llist_a_llist_fun$ A_llist_set$) A_llist_set$)
(declare-fun image$m (A_llist_b_llist_prod_nat_fun$ A_llist_b_llist_prod_set$) Nat_set$)
(declare-fun ltake$a (Enat$ B_llist$) B_llist$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$ (Enat_a_llist_b_llist_prod_fun$ Enat$) A_llist_b_llist_prod$)
(declare-fun member$a (Enat$ Enat_set$) Bool)
(declare-fun member$b (A_llist_b_llist_prod$ A_llist_b_llist_prod_set$) Bool)
(declare-fun member$c (Nat$ Nat_set$) Bool)
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$b (A_llist_b_llist_prod_a_llist_fun$ A_llist_b_llist_prod$) A_llist$)
(declare-fun fun_app$c (A_llist_b_llist_prod_a_llist_fun_a_llist_b_llist_prod_a_llist_fun_fun$ A_llist_b_llist_prod_a_llist_fun$) A_llist_b_llist_prod_a_llist_fun$)
(declare-fun fun_app$d (A_llist_b_llist_prod_a_llist_b_llist_prod_fun_a_llist_b_llist_prod_a_llist_fun_fun$ A_llist_b_llist_prod_a_llist_b_llist_prod_fun$) A_llist_b_llist_prod_a_llist_fun$)
(declare-fun fun_app$e (A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ A_llist_b_llist_prod$) A_llist_b_llist_prod$)
(declare-fun fun_app$f (Enat_a_llist_fun$ Enat$) A_llist$)
(declare-fun fun_app$g (Enat_a_llist_b_llist_prod_fun_enat_a_llist_fun_fun$ Enat_a_llist_b_llist_prod_fun$) Enat_a_llist_fun$)
(declare-fun fun_app$h (Nat_a_llist_fun$ Nat$) A_llist$)
(declare-fun fun_app$i (Nat_a_llist_b_llist_prod_fun_nat_a_llist_fun_fun$ Nat_a_llist_b_llist_prod_fun$) Nat_a_llist_fun$)
(declare-fun fun_app$j (Nat_a_llist_b_llist_prod_fun$ Nat$) A_llist_b_llist_prod$)
(declare-fun fun_app$k (Enat_a_llist_b_llist_prod_fun_enat_a_llist_b_llist_prod_fun_fun$ Enat_a_llist_b_llist_prod_fun$) Enat_a_llist_b_llist_prod_fun$)
(declare-fun fun_app$l (Enat_enat_fun_enat_a_llist_b_llist_prod_fun_fun$ Enat_enat_fun$) Enat_a_llist_b_llist_prod_fun$)
(declare-fun fun_app$m (Enat_enat_fun$ Enat$) Enat$)
(declare-fun fun_app$n (Nat_enat_fun_nat_a_llist_b_llist_prod_fun_fun$ Nat_enat_fun$) Nat_a_llist_b_llist_prod_fun$)
(declare-fun fun_app$o (Nat_enat_fun$ Nat$) Enat$)
(declare-fun fun_app$p (Nat_enat_fun_nat_enat_fun_fun$ Nat_enat_fun$) Nat_enat_fun$)
(declare-fun fun_app$q (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$r (Nat_enat_fun_nat_nat_fun_fun$ Nat_enat_fun$) Nat_nat_fun$)
(declare-fun fun_app$s (Enat_nat_fun$ Enat$) Nat$)
(declare-fun fun_app$t (Nat_nat_fun_nat_enat_fun_fun$ Nat_nat_fun$) Nat_enat_fun$)
(declare-fun fun_app$u (A_llist_set_a_llist_fun$ A_llist_set$) A_llist$)
(declare-fun fun_app$v (A_llist_nat_fun$ A_llist$) Nat$)
(declare-fun fun_app$w (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$x (A_llist_b_llist_prod_nat_fun$ A_llist_b_llist_prod$) Nat$)
(declare-fun prod_lub$ (A_llist_set_a_llist_fun$ B_llist_set_b_llist_fun$ A_llist_b_llist_prod_set$) A_llist_b_llist_prod$)
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$ uua$ ?v0) (pair$ (fun_app$a (ltake$ ?v0) xs$) (ltake$a ?v0 ys$))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist_b_llist_prod$)) (! (= (fun_app$b uu$ ?v0) (fst$ ?v0)) :pattern ((fun_app$b uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_b_llist_prod_a_llist_fun$) (?v2 A_llist_b_llist_prod$)) (! (= (fun_app$b (fun_app$c (uuk$ ?v0) ?v1) ?v2) (fun_app$a ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$b (fun_app$c (uuk$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_llist_fun$) (?v1 A_llist_b_llist_prod_a_llist_b_llist_prod_fun$) (?v2 A_llist_b_llist_prod$)) (! (= (fun_app$b (fun_app$d (uum$ ?v0) ?v1) ?v2) (fun_app$b ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$b (fun_app$d (uum$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_llist_fun$) (?v1 Enat_a_llist_b_llist_prod_fun$) (?v2 Enat$)) (! (= (fun_app$f (fun_app$g (uui$ ?v0) ?v1) ?v2) (fun_app$b ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$f (fun_app$g (uui$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_llist_fun$) (?v1 Nat_a_llist_b_llist_prod_fun$) (?v2 Nat$)) (! (= (fun_app$h (fun_app$i (uuj$ ?v0) ?v1) ?v2) (fun_app$b ?v0 (fun_app$j ?v1 ?v2))) :pattern ((fun_app$h (fun_app$i (uuj$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_llist_b_llist_prod_fun$) (?v1 Enat_a_llist_b_llist_prod_fun$) (?v2 Enat$)) (! (= (fun_app$ (fun_app$k (uul$ ?v0) ?v1) ?v2) (fun_app$e ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$k (uul$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 Enat_a_llist_b_llist_prod_fun$) (?v1 Enat_enat_fun$) (?v2 Enat$)) (! (= (fun_app$ (fun_app$l (uug$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$m ?v1 ?v2))) :pattern ((fun_app$ (fun_app$l (uug$ ?v0) ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 Enat_a_llist_b_llist_prod_fun$) (?v1 Nat_enat_fun$) (?v2 Nat$)) (! (= (fun_app$j (fun_app$n (uuh$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$o ?v1 ?v2))) :pattern ((fun_app$j (fun_app$n (uuh$ ?v0) ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 Enat_enat_fun$) (?v1 Nat_enat_fun$) (?v2 Nat$)) (! (= (fun_app$o (fun_app$p (uue$ ?v0) ?v1) ?v2) (fun_app$m ?v0 (fun_app$o ?v1 ?v2))) :pattern ((fun_app$o (fun_app$p (uue$ ?v0) ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 Enat_nat_fun$) (?v1 Nat_enat_fun$) (?v2 Nat$)) (! (= (fun_app$q (fun_app$r (uun$ ?v0) ?v1) ?v2) (fun_app$s ?v0 (fun_app$o ?v1 ?v2))) :pattern ((fun_app$q (fun_app$r (uun$ ?v0) ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 Nat_enat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (= (fun_app$o (fun_app$t (uuf$ ?v0) ?v1) ?v2) (fun_app$o ?v0 (fun_app$q ?v1 ?v2))) :pattern ((fun_app$o (fun_app$t (uuf$ ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 A_llist_b_llist_prod$)) (! (= (fun_app$e uub$ ?v0) ?v0) :pattern ((fun_app$e uub$ ?v0)))) :named a12))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$m uuc$ ?v0) ?v0) :pattern ((fun_app$m uuc$ ?v0)))) :named a13))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$q uud$ ?v0) ?v0) :pattern ((fun_app$q uud$ ?v0)))) :named a14))
(assert (! (not (= (fun_app$u lSup$ (image$ uu$ (image$a uua$ (image$b enat$ top$)))) xs$)) :named a15))
(assert (! (forall ((?v0 A_llist_b_llist_prod_set$)) (= (image$c uub$ ?v0) ?v0)) :named a16))
(assert (! (forall ((?v0 Enat_set$)) (= (image$d uuc$ ?v0) ?v0)) :named a17))
(assert (! (forall ((?v0 Nat_set$)) (= (image$e uud$ ?v0) ?v0)) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$o enat$ ?v0) (fun_app$o enat$ ?v1)) (= ?v0 ?v1))) :named a19))
(assert (! (forall ((?v0 A_llist$)) (= (member$ ?v0 top$a) true)) :named a20))
(assert (! (forall ((?v0 Enat$)) (= (member$a ?v0 top$b) true)) :named a21))
(assert (! (forall ((?v0 A_llist_b_llist_prod$)) (= (member$b ?v0 top$c) true)) :named a22))
(assert (! (forall ((?v0 Nat$)) (= (member$c ?v0 top$) true)) :named a23))
(assert (! (forall ((?v0 A_llist$)) (member$ ?v0 top$a)) :named a24))
(assert (! (forall ((?v0 Enat$)) (member$a ?v0 top$b)) :named a25))
(assert (! (forall ((?v0 A_llist_b_llist_prod$)) (member$b ?v0 top$c)) :named a26))
(assert (! (forall ((?v0 Nat$)) (member$c ?v0 top$)) :named a27))
(assert (! (forall ((?v0 Enat$) (?v1 Nat_enat_fun$) (?v2 Nat$) (?v3 Nat_set$)) (=> (and (= ?v0 (fun_app$o ?v1 ?v2)) (member$c ?v2 ?v3)) (member$a ?v0 (image$b ?v1 ?v3)))) :named a28))
(assert (! (forall ((?v0 A_llist_b_llist_prod$) (?v1 Enat_a_llist_b_llist_prod_fun$) (?v2 Enat$) (?v3 Enat_set$)) (=> (and (= ?v0 (fun_app$ ?v1 ?v2)) (member$a ?v2 ?v3)) (member$b ?v0 (image$a ?v1 ?v3)))) :named a29))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_b_llist_prod_a_llist_fun$) (?v2 A_llist_b_llist_prod$) (?v3 A_llist_b_llist_prod_set$)) (=> (and (= ?v0 (fun_app$b ?v1 ?v2)) (member$b ?v2 ?v3)) (member$ ?v0 (image$ ?v1 ?v3)))) :named a30))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_set$)) (=> (and (= ?v0 (fun_app$q ?v1 ?v2)) (member$c ?v2 ?v3)) (member$c ?v0 (image$e ?v1 ?v3)))) :named a31))
(assert (! (forall ((?v0 Nat$) (?v1 Enat_nat_fun$) (?v2 Enat$) (?v3 Enat_set$)) (=> (and (= ?v0 (fun_app$s ?v1 ?v2)) (member$a ?v2 ?v3)) (member$c ?v0 (image$f ?v1 ?v3)))) :named a32))
(assert (! (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat_set$)) (=> (and (= ?v0 (fun_app$m ?v1 ?v2)) (member$a ?v2 ?v3)) (member$a ?v0 (image$d ?v1 ?v3)))) :named a33))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$) (?v3 Nat_set$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (member$c ?v2 ?v3)) (member$ ?v0 (image$g ?v1 ?v3)))) :named a34))
(assert (! (forall ((?v0 A_llist$) (?v1 Enat_a_llist_fun$) (?v2 Enat$) (?v3 Enat_set$)) (=> (and (= ?v0 (fun_app$f ?v1 ?v2)) (member$a ?v2 ?v3)) (member$ ?v0 (image$h ?v1 ?v3)))) :named a35))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist_nat_fun$) (?v2 A_llist$) (?v3 A_llist_set$)) (=> (and (= ?v0 (fun_app$v ?v1 ?v2)) (member$ ?v2 ?v3)) (member$c ?v0 (image$i ?v1 ?v3)))) :named a36))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist_enat_fun$) (?v2 A_llist$) (?v3 A_llist_set$)) (=> (and (= ?v0 (fun_app$w ?v1 ?v2)) (member$ ?v2 ?v3)) (member$a ?v0 (image$j ?v1 ?v3)))) :named a37))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_llist$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a38))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_llist$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a39))
(assert (! (forall ((?v0 Enat_enat_fun$) (?v1 Nat_enat_fun$)) (= (image$b (fun_app$p (uue$ ?v0) ?v1) top$) (image$d ?v0 (image$b ?v1 top$)))) :named a40))
(assert (! (forall ((?v0 Nat_enat_fun$) (?v1 Nat_nat_fun$)) (= (image$b (fun_app$t (uuf$ ?v0) ?v1) top$) (image$b ?v0 (image$e ?v1 top$)))) :named a41))
(assert (! (forall ((?v0 Enat_a_llist_b_llist_prod_fun$) (?v1 Enat_enat_fun$)) (= (image$a (fun_app$l (uug$ ?v0) ?v1) top$b) (image$a ?v0 (image$d ?v1 top$b)))) :named a42))
(assert (! (forall ((?v0 Enat_a_llist_b_llist_prod_fun$) (?v1 Nat_enat_fun$)) (= (image$k (fun_app$n (uuh$ ?v0) ?v1) top$) (image$a ?v0 (image$b ?v1 top$)))) :named a43))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_llist_fun$) (?v1 Enat_a_llist_b_llist_prod_fun$)) (= (image$h (fun_app$g (uui$ ?v0) ?v1) top$b) (image$ ?v0 (image$a ?v1 top$b)))) :named a44))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_llist_fun$) (?v1 Nat_a_llist_b_llist_prod_fun$)) (= (image$g (fun_app$i (uuj$ ?v0) ?v1) top$) (image$ ?v0 (image$k ?v1 top$)))) :named a45))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_b_llist_prod_a_llist_fun$)) (= (image$ (fun_app$c (uuk$ ?v0) ?v1) top$c) (image$l ?v0 (image$ ?v1 top$c)))) :named a46))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_llist_b_llist_prod_fun$) (?v1 Enat_a_llist_b_llist_prod_fun$)) (= (image$a (fun_app$k (uul$ ?v0) ?v1) top$b) (image$c ?v0 (image$a ?v1 top$b)))) :named a47))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_llist_fun$) (?v1 A_llist_b_llist_prod_a_llist_b_llist_prod_fun$)) (= (image$ (fun_app$d (uum$ ?v0) ?v1) top$c) (image$ ?v0 (image$c ?v1 top$c)))) :named a48))
(assert (! (forall ((?v0 Enat_nat_fun$) (?v1 Nat_enat_fun$)) (= (image$e (fun_app$r (uun$ ?v0) ?v1) top$) (image$f ?v0 (image$b ?v1 top$)))) :named a49))
(assert (! (forall ((?v0 Enat$) (?v1 Nat_enat_fun$)) (=> (and (member$a ?v0 (image$b ?v1 top$)) (forall ((?v2 Nat$)) (=> (= ?v0 (fun_app$o ?v1 ?v2)) false))) false)) :named a50))
(assert (! (forall ((?v0 A_llist_b_llist_prod$) (?v1 Enat_a_llist_b_llist_prod_fun$)) (=> (and (member$b ?v0 (image$a ?v1 top$b)) (forall ((?v2 Enat$)) (=> (= ?v0 (fun_app$ ?v1 ?v2)) false))) false)) :named a51))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_b_llist_prod_a_llist_fun$)) (=> (and (member$ ?v0 (image$ ?v1 top$c)) (forall ((?v2 A_llist_b_llist_prod$)) (=> (= ?v0 (fun_app$b ?v1 ?v2)) false))) false)) :named a52))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$)) (=> (and (member$c ?v0 (image$e ?v1 top$)) (forall ((?v2 Nat$)) (=> (= ?v0 (fun_app$q ?v1 ?v2)) false))) false)) :named a53))
(assert (! (forall ((?v0 Nat$) (?v1 Enat_nat_fun$)) (=> (and (member$c ?v0 (image$f ?v1 top$b)) (forall ((?v2 Enat$)) (=> (= ?v0 (fun_app$s ?v1 ?v2)) false))) false)) :named a54))
(assert (! (forall ((?v0 Enat$) (?v1 Enat_enat_fun$)) (=> (and (member$a ?v0 (image$d ?v1 top$b)) (forall ((?v2 Enat$)) (=> (= ?v0 (fun_app$m ?v1 ?v2)) false))) false)) :named a55))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$)) (=> (and (member$ ?v0 (image$g ?v1 top$)) (forall ((?v2 Nat$)) (=> (= ?v0 (fun_app$h ?v1 ?v2)) false))) false)) :named a56))
(assert (! (forall ((?v0 A_llist$) (?v1 Enat_a_llist_fun$)) (=> (and (member$ ?v0 (image$h ?v1 top$b)) (forall ((?v2 Enat$)) (=> (= ?v0 (fun_app$f ?v1 ?v2)) false))) false)) :named a57))
(assert (! (forall ((?v0 A_llist_b_llist_prod$) (?v1 Nat_a_llist_b_llist_prod_fun$)) (=> (and (member$b ?v0 (image$k ?v1 top$)) (forall ((?v2 Nat$)) (=> (= ?v0 (fun_app$j ?v1 ?v2)) false))) false)) :named a58))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist_b_llist_prod_nat_fun$)) (=> (and (member$c ?v0 (image$m ?v1 top$c)) (forall ((?v2 A_llist_b_llist_prod$)) (=> (= ?v0 (fun_app$x ?v1 ?v2)) false))) false)) :named a59))
(assert (! (p$ (fst$ (prod_lub$ lSup$ lSup$a (image$a uua$ (image$b enat$ top$)))) (snd$ (prod_lub$ lSup$ lSup$a (image$a uua$ (image$b enat$ top$))))) :named a60))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_b_llist_prod$)) (= (= ?v0 (fst$ ?v1)) (exists ((?v2 B_llist$)) (= ?v1 (pair$ ?v0 ?v2))))) :named a61))
(assert (! (forall ((?v0 A_llist_b_llist_prod$)) (= (pair$ (fst$ ?v0) (snd$ ?v0)) ?v0)) :named a62))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (= (snd$ (pair$ ?v0 ?v1)) ?v2) (= ?v1 ?v2))) :named a63))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$)) (! (= (snd$ (pair$ ?v0 ?v1)) ?v1) :pattern ((pair$ ?v0 ?v1)))) :named a64))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist_b_llist_prod$)) (= (= ?v0 (snd$ ?v1)) (exists ((?v2 A_llist$)) (= ?v1 (pair$ ?v2 ?v0))))) :named a65))
(assert (! (forall ((?v0 A_llist_b_llist_prod$) (?v1 A_llist_b_llist_prod$)) (=> (and (= (fst$ ?v0) (fst$ ?v1)) (= (snd$ ?v0) (snd$ ?v1))) (= ?v0 ?v1))) :named a66))
(check-sat)
;(get-unsat-core)
