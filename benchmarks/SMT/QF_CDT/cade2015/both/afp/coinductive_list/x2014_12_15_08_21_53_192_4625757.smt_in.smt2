; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 548
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_b_prod_set$ 0)
(declare-sort B_a_prod_set$ 0)
(declare-sort B_b_prod_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort A_a_b_prod_prod_set$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort B_b_llist_bool_fun_fun$ 0)
(declare-sort A_a_prod_llist_bool_fun$ 0)
(declare-sort A_b_prod_llist_bool_fun$ 0)
(declare-sort B_a_prod_llist_bool_fun$ 0)
(declare-sort B_b_prod_llist_bool_fun$ 0)
(declare-sort A_b_prod_a_b_prod_prod_set$ 0)
(declare-sort A_a_b_prod_prod_llist_bool_fun$ 0)
(declare-sort A_a_b_prod_a_b_prod_prod_prod_set$ 0)
(declare-sort A_a_prod_a_a_prod_llist_bool_fun_fun$ 0)
(declare-sort A_b_prod_a_b_prod_llist_bool_fun_fun$ 0)
(declare-sort B_a_prod_b_a_prod_llist_bool_fun_fun$ 0)
(declare-sort B_b_prod_b_b_prod_llist_bool_fun_fun$ 0)
(declare-sort A_b_prod_a_b_prod_prod_llist_bool_fun$ 0)
(declare-sort A_a_b_prod_a_b_prod_prod_prod_llist_bool_fun$ 0)
(declare-sort A_a_b_prod_prod_a_a_b_prod_prod_llist_bool_fun_fun$ 0)
(declare-sort A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_llist_bool_fun_fun$ 0)
(declare-sort A_a_b_prod_a_b_prod_prod_prod_a_a_b_prod_a_b_prod_prod_prod_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((B_llist$ (lNil$) (lCons$ (lhd$ B$) (ltl$ B_llist$)))))
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$a) (lCons$a (lhd$a A_b_prod$) (ltl$a A_b_prod_llist$)))
  (A_llist$ (lNil$b) (lCons$b (lhd$b A$) (ltl$b A_llist$)))))
(declare-datatypes () ((B_b_prod$ (pair$a (fst$a B$) (snd$a B$)))))
(declare-codatatypes () ((B_b_prod_llist$ (lNil$c) (lCons$c (lhd$c B_b_prod$) (ltl$c B_b_prod_llist$)))))
(declare-datatypes () ((B_a_prod$ (pair$b (fst$b B$) (snd$b A$)))))
(declare-codatatypes () ((B_a_prod_llist$ (lNil$d) (lCons$d (lhd$d B_a_prod$) (ltl$d B_a_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_b_prod_prod$ (pair$c (fst$c A_b_prod$) (snd$c A_b_prod$)))
  (A_a_b_prod_a_b_prod_prod_prod$ (pair$d (fst$d A$) (snd$d A_b_prod_a_b_prod_prod$)))))
(declare-codatatypes () ((A_a_b_prod_a_b_prod_prod_prod_llist$ (lNil$e) (lCons$e (lhd$e A_a_b_prod_a_b_prod_prod_prod$) (ltl$e A_a_b_prod_a_b_prod_prod_prod_llist$)))))
(declare-datatypes () ((A_a_b_prod_prod$ (pair$e (fst$e A$) (snd$e A_b_prod$)))))
(declare-codatatypes () ((A_a_b_prod_prod_llist$ (lNil$f) (lCons$f (lhd$f A_a_b_prod_prod$) (ltl$f A_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod$ (pair$f (fst$f A$) (snd$f A$)))))
(declare-codatatypes () ((A_a_prod_llist$ (lNil$g) (lCons$g (lhd$g A_a_prod$) (ltl$g A_a_prod_llist$)))
  (A_b_prod_a_b_prod_prod_llist$ (lNil$h) (lCons$h (lhd$h A_b_prod_a_b_prod_prod$) (ltl$h A_b_prod_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_b_prod_b_prod$ (pair$g (fst$g A_b_prod$) (snd$g B$)))))
(declare-codatatypes () ((A_b_prod_b_prod_llist$ (lNil$i) (lCons$i (lhd$i A_b_prod_b_prod$) (ltl$i A_b_prod_b_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_prod$ (pair$h (fst$h A_b_prod$) (snd$h A$)))))
(declare-codatatypes () ((A_b_prod_a_prod_llist$ (lNil$j) (lCons$j (lhd$j A_b_prod_a_prod$) (ltl$j A_b_prod_a_prod_llist$)))))
(declare-datatypes () ((B_a_b_prod_prod$ (pair$i (fst$i B$) (snd$i A_b_prod$)))))
(declare-codatatypes () ((B_a_b_prod_prod_llist$ (lNil$k) (lCons$k (lhd$k B_a_b_prod_prod$) (ltl$k B_a_b_prod_prod_llist$)))))
(declare-datatypes () ((B_a_b_prod_a_b_prod_prod_prod$ (pair$j (fst$j B$) (snd$j A_b_prod_a_b_prod_prod$)))))
(declare-codatatypes () ((B_a_b_prod_a_b_prod_prod_prod_llist$ (lNil$l) (lCons$l (lhd$l B_a_b_prod_a_b_prod_prod_prod$) (ltl$l B_a_b_prod_a_b_prod_prod_prod_llist$)))))
(declare-fun x$ () A$)
(declare-fun y$ () B$)
(declare-fun xsa$ () A_b_prod_llist$)
(declare-fun xsb$ () A_llist$)
(declare-fun ysa$ () B_llist$)
(declare-fun lset$ (B_llist$) B_set$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun lset$a (B_b_prod_llist$) B_b_prod_set$)
(declare-fun lset$b (B_a_prod_llist$) B_a_prod_set$)
(declare-fun lset$c (A_a_b_prod_a_b_prod_prod_prod_llist$) A_a_b_prod_a_b_prod_prod_prod_set$)
(declare-fun lset$d (A_a_b_prod_prod_llist$) A_a_b_prod_prod_set$)
(declare-fun lset$e (A_a_prod_llist$) A_a_prod_set$)
(declare-fun lset$f (A_b_prod_a_b_prod_prod_llist$) A_b_prod_a_b_prod_prod_set$)
(declare-fun lset$g (A_llist$) A_set$)
(declare-fun lset$h (A_b_prod_llist$) A_b_prod_set$)
(declare-fun lzip$a (A_b_prod_llist$ A_b_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun lzip$b (B_llist$ B_llist$) B_b_prod_llist$)
(declare-fun lzip$c (B_llist$ A_llist$) B_a_prod_llist$)
(declare-fun lzip$d (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun lzip$e (A_b_prod_llist$ B_llist$) A_b_prod_b_prod_llist$)
(declare-fun lzip$f (A_b_prod_llist$ A_llist$) A_b_prod_a_prod_llist$)
(declare-fun lzip$g (B_llist$ A_b_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun lzip$h (A_llist$ A_b_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun lzip$i (B_llist$ A_b_prod_a_b_prod_prod_llist$) B_a_b_prod_a_b_prod_prod_prod_llist$)
(declare-fun member$ (B$ B_set$) Bool)
(declare-fun fun_app$ (B_b_prod_llist_bool_fun$ B_b_prod_llist$) Bool)
(declare-fun lmember$ (A_b_prod$) A_b_prod_llist_bool_fun$)
(declare-fun member$a (B_b_prod$ B_b_prod_set$) Bool)
(declare-fun member$b (B_a_prod$ B_a_prod_set$) Bool)
(declare-fun member$c (A_a_b_prod_a_b_prod_prod_prod$ A_a_b_prod_a_b_prod_prod_prod_set$) Bool)
(declare-fun member$d (A_a_b_prod_prod$ A_a_b_prod_prod_set$) Bool)
(declare-fun member$e (A_a_prod$ A_a_prod_set$) Bool)
(declare-fun member$f (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_set$) Bool)
(declare-fun member$g (A$ A_set$) Bool)
(declare-fun member$h (A_b_prod$ A_b_prod_set$) Bool)
(declare-fun fun_app$a (B_b_prod_b_b_prod_llist_bool_fun_fun$ B_b_prod$) B_b_prod_llist_bool_fun$)
(declare-fun fun_app$b (B_a_prod_llist_bool_fun$ B_a_prod_llist$) Bool)
(declare-fun fun_app$c (B_a_prod_b_a_prod_llist_bool_fun_fun$ B_a_prod$) B_a_prod_llist_bool_fun$)
(declare-fun fun_app$d (A_a_b_prod_a_b_prod_prod_prod_llist_bool_fun$ A_a_b_prod_a_b_prod_prod_prod_llist$) Bool)
(declare-fun fun_app$e (A_a_b_prod_a_b_prod_prod_prod_a_a_b_prod_a_b_prod_prod_prod_llist_bool_fun_fun$ A_a_b_prod_a_b_prod_prod_prod$) A_a_b_prod_a_b_prod_prod_prod_llist_bool_fun$)
(declare-fun fun_app$f (A_a_b_prod_prod_llist_bool_fun$ A_a_b_prod_prod_llist$) Bool)
(declare-fun fun_app$g (A_a_b_prod_prod_a_a_b_prod_prod_llist_bool_fun_fun$ A_a_b_prod_prod$) A_a_b_prod_prod_llist_bool_fun$)
(declare-fun fun_app$h (A_a_prod_llist_bool_fun$ A_a_prod_llist$) Bool)
(declare-fun fun_app$i (A_a_prod_a_a_prod_llist_bool_fun_fun$ A_a_prod$) A_a_prod_llist_bool_fun$)
(declare-fun fun_app$j (A_b_prod_a_b_prod_prod_llist_bool_fun$ A_b_prod_a_b_prod_prod_llist$) Bool)
(declare-fun fun_app$k (A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_llist_bool_fun_fun$ A_b_prod_a_b_prod_prod$) A_b_prod_a_b_prod_prod_llist_bool_fun$)
(declare-fun fun_app$l (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$m (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$n (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun fun_app$o (B_b_llist_bool_fun_fun$ B$) B_llist_bool_fun$)
(declare-fun fun_app$p (A_b_prod_llist_bool_fun$ A_b_prod_llist$) Bool)
(declare-fun fun_app$q (A_b_prod_a_b_prod_llist_bool_fun_fun$ A_b_prod$) A_b_prod_llist_bool_fun$)
(declare-fun lmember$a (A$) A_llist_bool_fun$)
(declare-fun lmember$b (B$) B_llist_bool_fun$)
(declare-fun lmember$c (A_b_prod_a_b_prod_prod$) A_b_prod_a_b_prod_prod_llist_bool_fun$)
(assert (! (not (member$ y$ (lset$ ysa$))) :named a0))
(assert (! (= (lzip$ xsb$ ysa$) (lCons$a (pair$ x$ y$) xsa$)) :named a1))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_llist$) (?v2 B_b_prod_b_b_prod_llist_bool_fun_fun$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v3 B_b_prod$) (?v4 B_b_prod_llist$)) (fun_app$ (fun_app$a ?v2 ?v3) (lCons$c ?v3 ?v4))) (forall ((?v3 B_b_prod$) (?v4 B_b_prod_llist$) (?v5 B_b_prod$)) (=> (and (member$a ?v5 (lset$a ?v4)) (fun_app$ (fun_app$a ?v2 ?v5) ?v4)) (fun_app$ (fun_app$a ?v2 ?v5) (lCons$c ?v3 ?v4)))))) (fun_app$ (fun_app$a ?v2 ?v0) ?v1))) :named a2))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_llist$) (?v2 B_a_prod_b_a_prod_llist_bool_fun_fun$)) (=> (and (member$b ?v0 (lset$b ?v1)) (and (forall ((?v3 B_a_prod$) (?v4 B_a_prod_llist$)) (fun_app$b (fun_app$c ?v2 ?v3) (lCons$d ?v3 ?v4))) (forall ((?v3 B_a_prod$) (?v4 B_a_prod_llist$) (?v5 B_a_prod$)) (=> (and (member$b ?v5 (lset$b ?v4)) (fun_app$b (fun_app$c ?v2 ?v5) ?v4)) (fun_app$b (fun_app$c ?v2 ?v5) (lCons$d ?v3 ?v4)))))) (fun_app$b (fun_app$c ?v2 ?v0) ?v1))) :named a3))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$) (?v2 A_a_b_prod_a_b_prod_prod_prod_a_a_b_prod_a_b_prod_prod_prod_llist_bool_fun_fun$)) (=> (and (member$c ?v0 (lset$c ?v1)) (and (forall ((?v3 A_a_b_prod_a_b_prod_prod_prod$) (?v4 A_a_b_prod_a_b_prod_prod_prod_llist$)) (fun_app$d (fun_app$e ?v2 ?v3) (lCons$e ?v3 ?v4))) (forall ((?v3 A_a_b_prod_a_b_prod_prod_prod$) (?v4 A_a_b_prod_a_b_prod_prod_prod_llist$) (?v5 A_a_b_prod_a_b_prod_prod_prod$)) (=> (and (member$c ?v5 (lset$c ?v4)) (fun_app$d (fun_app$e ?v2 ?v5) ?v4)) (fun_app$d (fun_app$e ?v2 ?v5) (lCons$e ?v3 ?v4)))))) (fun_app$d (fun_app$e ?v2 ?v0) ?v1))) :named a4))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_b_prod_prod_llist$) (?v2 A_a_b_prod_prod_a_a_b_prod_prod_llist_bool_fun_fun$)) (=> (and (member$d ?v0 (lset$d ?v1)) (and (forall ((?v3 A_a_b_prod_prod$) (?v4 A_a_b_prod_prod_llist$)) (fun_app$f (fun_app$g ?v2 ?v3) (lCons$f ?v3 ?v4))) (forall ((?v3 A_a_b_prod_prod$) (?v4 A_a_b_prod_prod_llist$) (?v5 A_a_b_prod_prod$)) (=> (and (member$d ?v5 (lset$d ?v4)) (fun_app$f (fun_app$g ?v2 ?v5) ?v4)) (fun_app$f (fun_app$g ?v2 ?v5) (lCons$f ?v3 ?v4)))))) (fun_app$f (fun_app$g ?v2 ?v0) ?v1))) :named a5))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_a_a_prod_llist_bool_fun_fun$)) (=> (and (member$e ?v0 (lset$e ?v1)) (and (forall ((?v3 A_a_prod$) (?v4 A_a_prod_llist$)) (fun_app$h (fun_app$i ?v2 ?v3) (lCons$g ?v3 ?v4))) (forall ((?v3 A_a_prod$) (?v4 A_a_prod_llist$) (?v5 A_a_prod$)) (=> (and (member$e ?v5 (lset$e ?v4)) (fun_app$h (fun_app$i ?v2 ?v5) ?v4)) (fun_app$h (fun_app$i ?v2 ?v5) (lCons$g ?v3 ?v4)))))) (fun_app$h (fun_app$i ?v2 ?v0) ?v1))) :named a6))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$) (?v1 A_b_prod_a_b_prod_prod_llist$) (?v2 A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_llist_bool_fun_fun$)) (=> (and (member$f ?v0 (lset$f ?v1)) (and (forall ((?v3 A_b_prod_a_b_prod_prod$) (?v4 A_b_prod_a_b_prod_prod_llist$)) (fun_app$j (fun_app$k ?v2 ?v3) (lCons$h ?v3 ?v4))) (forall ((?v3 A_b_prod_a_b_prod_prod$) (?v4 A_b_prod_a_b_prod_prod_llist$) (?v5 A_b_prod_a_b_prod_prod$)) (=> (and (member$f ?v5 (lset$f ?v4)) (fun_app$j (fun_app$k ?v2 ?v5) ?v4)) (fun_app$j (fun_app$k ?v2 ?v5) (lCons$h ?v3 ?v4)))))) (fun_app$j (fun_app$k ?v2 ?v0) ?v1))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (member$g ?v0 (lset$g ?v1)) (and (forall ((?v3 A$) (?v4 A_llist$)) (fun_app$l (fun_app$m ?v2 ?v3) (lCons$b ?v3 ?v4))) (forall ((?v3 A$) (?v4 A_llist$) (?v5 A$)) (=> (and (member$g ?v5 (lset$g ?v4)) (fun_app$l (fun_app$m ?v2 ?v5) ?v4)) (fun_app$l (fun_app$m ?v2 ?v5) (lCons$b ?v3 ?v4)))))) (fun_app$l (fun_app$m ?v2 ?v0) ?v1))) :named a8))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B_b_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 B$) (?v4 B_llist$)) (fun_app$n (fun_app$o ?v2 ?v3) (lCons$ ?v3 ?v4))) (forall ((?v3 B$) (?v4 B_llist$) (?v5 B$)) (=> (and (member$ ?v5 (lset$ ?v4)) (fun_app$n (fun_app$o ?v2 ?v5) ?v4)) (fun_app$n (fun_app$o ?v2 ?v5) (lCons$ ?v3 ?v4)))))) (fun_app$n (fun_app$o ?v2 ?v0) ?v1))) :named a9))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_a_b_prod_llist_bool_fun_fun$)) (=> (and (member$h ?v0 (lset$h ?v1)) (and (forall ((?v3 A_b_prod$) (?v4 A_b_prod_llist$)) (fun_app$p (fun_app$q ?v2 ?v3) (lCons$a ?v3 ?v4))) (forall ((?v3 A_b_prod$) (?v4 A_b_prod_llist$) (?v5 A_b_prod$)) (=> (and (member$h ?v5 (lset$h ?v4)) (fun_app$p (fun_app$q ?v2 ?v5) ?v4)) (fun_app$p (fun_app$q ?v2 ?v5) (lCons$a ?v3 ?v4)))))) (fun_app$p (fun_app$q ?v2 ?v0) ?v1))) :named a10))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_llist$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v2 B_b_prod_llist$)) (=> (= ?v1 (lCons$c ?v0 ?v2)) false)) (forall ((?v2 B_b_prod$) (?v3 B_b_prod_llist$)) (=> (and (= ?v1 (lCons$c ?v2 ?v3)) (member$a ?v0 (lset$a ?v3))) false)))) false)) :named a11))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_llist$)) (=> (and (member$b ?v0 (lset$b ?v1)) (and (forall ((?v2 B_a_prod_llist$)) (=> (= ?v1 (lCons$d ?v0 ?v2)) false)) (forall ((?v2 B_a_prod$) (?v3 B_a_prod_llist$)) (=> (and (= ?v1 (lCons$d ?v2 ?v3)) (member$b ?v0 (lset$b ?v3))) false)))) false)) :named a12))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$)) (=> (and (member$c ?v0 (lset$c ?v1)) (and (forall ((?v2 A_a_b_prod_a_b_prod_prod_prod_llist$)) (=> (= ?v1 (lCons$e ?v0 ?v2)) false)) (forall ((?v2 A_a_b_prod_a_b_prod_prod_prod$) (?v3 A_a_b_prod_a_b_prod_prod_prod_llist$)) (=> (and (= ?v1 (lCons$e ?v2 ?v3)) (member$c ?v0 (lset$c ?v3))) false)))) false)) :named a13))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_b_prod_prod_llist$)) (=> (and (member$d ?v0 (lset$d ?v1)) (and (forall ((?v2 A_a_b_prod_prod_llist$)) (=> (= ?v1 (lCons$f ?v0 ?v2)) false)) (forall ((?v2 A_a_b_prod_prod$) (?v3 A_a_b_prod_prod_llist$)) (=> (and (= ?v1 (lCons$f ?v2 ?v3)) (member$d ?v0 (lset$d ?v3))) false)))) false)) :named a14))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (=> (and (member$e ?v0 (lset$e ?v1)) (and (forall ((?v2 A_a_prod_llist$)) (=> (= ?v1 (lCons$g ?v0 ?v2)) false)) (forall ((?v2 A_a_prod$) (?v3 A_a_prod_llist$)) (=> (and (= ?v1 (lCons$g ?v2 ?v3)) (member$e ?v0 (lset$e ?v3))) false)))) false)) :named a15))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$) (?v1 A_b_prod_a_b_prod_prod_llist$)) (=> (and (member$f ?v0 (lset$f ?v1)) (and (forall ((?v2 A_b_prod_a_b_prod_prod_llist$)) (=> (= ?v1 (lCons$h ?v0 ?v2)) false)) (forall ((?v2 A_b_prod_a_b_prod_prod$) (?v3 A_b_prod_a_b_prod_prod_llist$)) (=> (and (= ?v1 (lCons$h ?v2 ?v3)) (member$f ?v0 (lset$f ?v3))) false)))) false)) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$g ?v0 (lset$g ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$b ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$b ?v2 ?v3)) (member$g ?v0 (lset$g ?v3))) false)))) false)) :named a17))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v2 B_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false)) (forall ((?v2 B$) (?v3 B_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$ ?v0 (lset$ ?v3))) false)))) false)) :named a18))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$)) (=> (and (member$h ?v0 (lset$h ?v1)) (and (forall ((?v2 A_b_prod_llist$)) (=> (= ?v1 (lCons$a ?v0 ?v2)) false)) (forall ((?v2 A_b_prod$) (?v3 A_b_prod_llist$)) (=> (and (= ?v1 (lCons$a ?v2 ?v3)) (member$h ?v0 (lset$h ?v3))) false)))) false)) :named a19))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_llist$) (?v2 B_b_prod_llist_bool_fun$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v3 B_b_prod_llist$)) (fun_app$ ?v2 (lCons$c ?v0 ?v3))) (forall ((?v3 B_b_prod$) (?v4 B_b_prod_llist$)) (=> (and (member$a ?v0 (lset$a ?v4)) (fun_app$ ?v2 ?v4)) (fun_app$ ?v2 (lCons$c ?v3 ?v4)))))) (fun_app$ ?v2 ?v1))) :named a20))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_llist$) (?v2 B_a_prod_llist_bool_fun$)) (=> (and (member$b ?v0 (lset$b ?v1)) (and (forall ((?v3 B_a_prod_llist$)) (fun_app$b ?v2 (lCons$d ?v0 ?v3))) (forall ((?v3 B_a_prod$) (?v4 B_a_prod_llist$)) (=> (and (member$b ?v0 (lset$b ?v4)) (fun_app$b ?v2 ?v4)) (fun_app$b ?v2 (lCons$d ?v3 ?v4)))))) (fun_app$b ?v2 ?v1))) :named a21))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$) (?v2 A_a_b_prod_a_b_prod_prod_prod_llist_bool_fun$)) (=> (and (member$c ?v0 (lset$c ?v1)) (and (forall ((?v3 A_a_b_prod_a_b_prod_prod_prod_llist$)) (fun_app$d ?v2 (lCons$e ?v0 ?v3))) (forall ((?v3 A_a_b_prod_a_b_prod_prod_prod$) (?v4 A_a_b_prod_a_b_prod_prod_prod_llist$)) (=> (and (member$c ?v0 (lset$c ?v4)) (fun_app$d ?v2 ?v4)) (fun_app$d ?v2 (lCons$e ?v3 ?v4)))))) (fun_app$d ?v2 ?v1))) :named a22))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_b_prod_prod_llist$) (?v2 A_a_b_prod_prod_llist_bool_fun$)) (=> (and (member$d ?v0 (lset$d ?v1)) (and (forall ((?v3 A_a_b_prod_prod_llist$)) (fun_app$f ?v2 (lCons$f ?v0 ?v3))) (forall ((?v3 A_a_b_prod_prod$) (?v4 A_a_b_prod_prod_llist$)) (=> (and (member$d ?v0 (lset$d ?v4)) (fun_app$f ?v2 ?v4)) (fun_app$f ?v2 (lCons$f ?v3 ?v4)))))) (fun_app$f ?v2 ?v1))) :named a23))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist_bool_fun$)) (=> (and (member$e ?v0 (lset$e ?v1)) (and (forall ((?v3 A_a_prod_llist$)) (fun_app$h ?v2 (lCons$g ?v0 ?v3))) (forall ((?v3 A_a_prod$) (?v4 A_a_prod_llist$)) (=> (and (member$e ?v0 (lset$e ?v4)) (fun_app$h ?v2 ?v4)) (fun_app$h ?v2 (lCons$g ?v3 ?v4)))))) (fun_app$h ?v2 ?v1))) :named a24))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$) (?v1 A_b_prod_a_b_prod_prod_llist$) (?v2 A_b_prod_a_b_prod_prod_llist_bool_fun$)) (=> (and (member$f ?v0 (lset$f ?v1)) (and (forall ((?v3 A_b_prod_a_b_prod_prod_llist$)) (fun_app$j ?v2 (lCons$h ?v0 ?v3))) (forall ((?v3 A_b_prod_a_b_prod_prod$) (?v4 A_b_prod_a_b_prod_prod_llist$)) (=> (and (member$f ?v0 (lset$f ?v4)) (fun_app$j ?v2 ?v4)) (fun_app$j ?v2 (lCons$h ?v3 ?v4)))))) (fun_app$j ?v2 ?v1))) :named a25))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$g ?v0 (lset$g ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$l ?v2 (lCons$b ?v0 ?v3))) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$g ?v0 (lset$g ?v4)) (fun_app$l ?v2 ?v4)) (fun_app$l ?v2 (lCons$b ?v3 ?v4)))))) (fun_app$l ?v2 ?v1))) :named a26))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 B_llist$)) (fun_app$n ?v2 (lCons$ ?v0 ?v3))) (forall ((?v3 B$) (?v4 B_llist$)) (=> (and (member$ ?v0 (lset$ ?v4)) (fun_app$n ?v2 ?v4)) (fun_app$n ?v2 (lCons$ ?v3 ?v4)))))) (fun_app$n ?v2 ?v1))) :named a27))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist_bool_fun$)) (=> (and (member$h ?v0 (lset$h ?v1)) (and (forall ((?v3 A_b_prod_llist$)) (fun_app$p ?v2 (lCons$a ?v0 ?v3))) (forall ((?v3 A_b_prod$) (?v4 A_b_prod_llist$)) (=> (and (member$h ?v0 (lset$h ?v4)) (fun_app$p ?v2 ?v4)) (fun_app$p ?v2 (lCons$a ?v3 ?v4)))))) (fun_app$p ?v2 ?v1))) :named a28))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_llist$) (?v2 B_b_prod_llist_bool_fun$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v3 B_b_prod_llist$)) (fun_app$ ?v2 (lCons$c ?v0 ?v3))) (forall ((?v3 B_b_prod$) (?v4 B_b_prod_llist$)) (=> (and (member$a ?v0 (lset$a ?v4)) (and (not (= ?v0 ?v3)) (fun_app$ ?v2 ?v4))) (fun_app$ ?v2 (lCons$c ?v3 ?v4)))))) (fun_app$ ?v2 ?v1))) :named a29))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_llist$) (?v2 B_a_prod_llist_bool_fun$)) (=> (and (member$b ?v0 (lset$b ?v1)) (and (forall ((?v3 B_a_prod_llist$)) (fun_app$b ?v2 (lCons$d ?v0 ?v3))) (forall ((?v3 B_a_prod$) (?v4 B_a_prod_llist$)) (=> (and (member$b ?v0 (lset$b ?v4)) (and (not (= ?v0 ?v3)) (fun_app$b ?v2 ?v4))) (fun_app$b ?v2 (lCons$d ?v3 ?v4)))))) (fun_app$b ?v2 ?v1))) :named a30))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$) (?v2 A_a_b_prod_a_b_prod_prod_prod_llist_bool_fun$)) (=> (and (member$c ?v0 (lset$c ?v1)) (and (forall ((?v3 A_a_b_prod_a_b_prod_prod_prod_llist$)) (fun_app$d ?v2 (lCons$e ?v0 ?v3))) (forall ((?v3 A_a_b_prod_a_b_prod_prod_prod$) (?v4 A_a_b_prod_a_b_prod_prod_prod_llist$)) (=> (and (member$c ?v0 (lset$c ?v4)) (and (not (= ?v0 ?v3)) (fun_app$d ?v2 ?v4))) (fun_app$d ?v2 (lCons$e ?v3 ?v4)))))) (fun_app$d ?v2 ?v1))) :named a31))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_b_prod_prod_llist$) (?v2 A_a_b_prod_prod_llist_bool_fun$)) (=> (and (member$d ?v0 (lset$d ?v1)) (and (forall ((?v3 A_a_b_prod_prod_llist$)) (fun_app$f ?v2 (lCons$f ?v0 ?v3))) (forall ((?v3 A_a_b_prod_prod$) (?v4 A_a_b_prod_prod_llist$)) (=> (and (member$d ?v0 (lset$d ?v4)) (and (not (= ?v0 ?v3)) (fun_app$f ?v2 ?v4))) (fun_app$f ?v2 (lCons$f ?v3 ?v4)))))) (fun_app$f ?v2 ?v1))) :named a32))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist_bool_fun$)) (=> (and (member$e ?v0 (lset$e ?v1)) (and (forall ((?v3 A_a_prod_llist$)) (fun_app$h ?v2 (lCons$g ?v0 ?v3))) (forall ((?v3 A_a_prod$) (?v4 A_a_prod_llist$)) (=> (and (member$e ?v0 (lset$e ?v4)) (and (not (= ?v0 ?v3)) (fun_app$h ?v2 ?v4))) (fun_app$h ?v2 (lCons$g ?v3 ?v4)))))) (fun_app$h ?v2 ?v1))) :named a33))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$) (?v1 A_b_prod_a_b_prod_prod_llist$) (?v2 A_b_prod_a_b_prod_prod_llist_bool_fun$)) (=> (and (member$f ?v0 (lset$f ?v1)) (and (forall ((?v3 A_b_prod_a_b_prod_prod_llist$)) (fun_app$j ?v2 (lCons$h ?v0 ?v3))) (forall ((?v3 A_b_prod_a_b_prod_prod$) (?v4 A_b_prod_a_b_prod_prod_llist$)) (=> (and (member$f ?v0 (lset$f ?v4)) (and (not (= ?v0 ?v3)) (fun_app$j ?v2 ?v4))) (fun_app$j ?v2 (lCons$h ?v3 ?v4)))))) (fun_app$j ?v2 ?v1))) :named a34))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$g ?v0 (lset$g ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$l ?v2 (lCons$b ?v0 ?v3))) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$g ?v0 (lset$g ?v4)) (and (not (= ?v0 ?v3)) (fun_app$l ?v2 ?v4))) (fun_app$l ?v2 (lCons$b ?v3 ?v4)))))) (fun_app$l ?v2 ?v1))) :named a35))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 B_llist$)) (fun_app$n ?v2 (lCons$ ?v0 ?v3))) (forall ((?v3 B$) (?v4 B_llist$)) (=> (and (member$ ?v0 (lset$ ?v4)) (and (not (= ?v0 ?v3)) (fun_app$n ?v2 ?v4))) (fun_app$n ?v2 (lCons$ ?v3 ?v4)))))) (fun_app$n ?v2 ?v1))) :named a36))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist_bool_fun$)) (=> (and (member$h ?v0 (lset$h ?v1)) (and (forall ((?v3 A_b_prod_llist$)) (fun_app$p ?v2 (lCons$a ?v0 ?v3))) (forall ((?v3 A_b_prod$) (?v4 A_b_prod_llist$)) (=> (and (member$h ?v0 (lset$h ?v4)) (and (not (= ?v0 ?v3)) (fun_app$p ?v2 ?v4))) (fun_app$p ?v2 (lCons$a ?v3 ?v4)))))) (fun_app$p ?v2 ?v1))) :named a37))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_llist$)) (=> (and (member$a ?v0 (lset$a ?v1)) (and (forall ((?v2 B_b_prod_llist$)) (=> (= ?v1 (lCons$c ?v0 ?v2)) false)) (forall ((?v2 B_b_prod$) (?v3 B_b_prod_llist$)) (=> (and (= ?v1 (lCons$c ?v2 ?v3)) (member$a ?v0 (lset$a ?v3))) false)))) false)) :named a38))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_llist$)) (=> (and (member$b ?v0 (lset$b ?v1)) (and (forall ((?v2 B_a_prod_llist$)) (=> (= ?v1 (lCons$d ?v0 ?v2)) false)) (forall ((?v2 B_a_prod$) (?v3 B_a_prod_llist$)) (=> (and (= ?v1 (lCons$d ?v2 ?v3)) (member$b ?v0 (lset$b ?v3))) false)))) false)) :named a39))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$)) (=> (and (member$c ?v0 (lset$c ?v1)) (and (forall ((?v2 A_a_b_prod_a_b_prod_prod_prod_llist$)) (=> (= ?v1 (lCons$e ?v0 ?v2)) false)) (forall ((?v2 A_a_b_prod_a_b_prod_prod_prod$) (?v3 A_a_b_prod_a_b_prod_prod_prod_llist$)) (=> (and (= ?v1 (lCons$e ?v2 ?v3)) (member$c ?v0 (lset$c ?v3))) false)))) false)) :named a40))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_b_prod_prod_llist$)) (=> (and (member$d ?v0 (lset$d ?v1)) (and (forall ((?v2 A_a_b_prod_prod_llist$)) (=> (= ?v1 (lCons$f ?v0 ?v2)) false)) (forall ((?v2 A_a_b_prod_prod$) (?v3 A_a_b_prod_prod_llist$)) (=> (and (= ?v1 (lCons$f ?v2 ?v3)) (member$d ?v0 (lset$d ?v3))) false)))) false)) :named a41))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (=> (and (member$e ?v0 (lset$e ?v1)) (and (forall ((?v2 A_a_prod_llist$)) (=> (= ?v1 (lCons$g ?v0 ?v2)) false)) (forall ((?v2 A_a_prod$) (?v3 A_a_prod_llist$)) (=> (and (= ?v1 (lCons$g ?v2 ?v3)) (member$e ?v0 (lset$e ?v3))) false)))) false)) :named a42))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$) (?v1 A_b_prod_a_b_prod_prod_llist$)) (=> (and (member$f ?v0 (lset$f ?v1)) (and (forall ((?v2 A_b_prod_a_b_prod_prod_llist$)) (=> (= ?v1 (lCons$h ?v0 ?v2)) false)) (forall ((?v2 A_b_prod_a_b_prod_prod$) (?v3 A_b_prod_a_b_prod_prod_llist$)) (=> (and (= ?v1 (lCons$h ?v2 ?v3)) (member$f ?v0 (lset$f ?v3))) false)))) false)) :named a43))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$g ?v0 (lset$g ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$b ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$b ?v2 ?v3)) (member$g ?v0 (lset$g ?v3))) false)))) false)) :named a44))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v2 B_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false)) (forall ((?v2 B$) (?v3 B_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$ ?v0 (lset$ ?v3))) false)))) false)) :named a45))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$)) (=> (and (member$h ?v0 (lset$h ?v1)) (and (forall ((?v2 A_b_prod_llist$)) (=> (= ?v1 (lCons$a ?v0 ?v2)) false)) (forall ((?v2 A_b_prod$) (?v3 A_b_prod_llist$)) (=> (and (= ?v1 (lCons$a ?v2 ?v3)) (member$h ?v0 (lset$h ?v3))) false)))) false)) :named a46))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_llist$) (?v2 B_b_prod$)) (=> (member$a ?v0 (lset$a ?v1)) (member$a ?v0 (lset$a (lCons$c ?v2 ?v1))))) :named a47))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_llist$) (?v2 B_a_prod$)) (=> (member$b ?v0 (lset$b ?v1)) (member$b ?v0 (lset$b (lCons$d ?v2 ?v1))))) :named a48))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$) (?v2 A_a_b_prod_a_b_prod_prod_prod$)) (=> (member$c ?v0 (lset$c ?v1)) (member$c ?v0 (lset$c (lCons$e ?v2 ?v1))))) :named a49))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_b_prod_prod_llist$) (?v2 A_a_b_prod_prod$)) (=> (member$d ?v0 (lset$d ?v1)) (member$d ?v0 (lset$d (lCons$f ?v2 ?v1))))) :named a50))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod$)) (=> (member$e ?v0 (lset$e ?v1)) (member$e ?v0 (lset$e (lCons$g ?v2 ?v1))))) :named a51))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$) (?v1 A_b_prod_a_b_prod_prod_llist$) (?v2 A_b_prod_a_b_prod_prod$)) (=> (member$f ?v0 (lset$f ?v1)) (member$f ?v0 (lset$f (lCons$h ?v2 ?v1))))) :named a52))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$g ?v0 (lset$g ?v1)) (member$g ?v0 (lset$g (lCons$b ?v2 ?v1))))) :named a53))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$)) (=> (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ (lCons$ ?v2 ?v1))))) :named a54))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$) (?v2 A_b_prod$)) (=> (member$h ?v0 (lset$h ?v1)) (member$h ?v0 (lset$h (lCons$a ?v2 ?v1))))) :named a55))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_llist$) (?v2 B_b_prod$)) (=> (member$a ?v0 (lset$a ?v1)) (member$a ?v0 (lset$a (lCons$c ?v2 ?v1))))) :named a56))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_llist$) (?v2 B_a_prod$)) (=> (member$b ?v0 (lset$b ?v1)) (member$b ?v0 (lset$b (lCons$d ?v2 ?v1))))) :named a57))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$) (?v2 A_a_b_prod_a_b_prod_prod_prod$)) (=> (member$c ?v0 (lset$c ?v1)) (member$c ?v0 (lset$c (lCons$e ?v2 ?v1))))) :named a58))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_b_prod_prod_llist$) (?v2 A_a_b_prod_prod$)) (=> (member$d ?v0 (lset$d ?v1)) (member$d ?v0 (lset$d (lCons$f ?v2 ?v1))))) :named a59))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod$)) (=> (member$e ?v0 (lset$e ?v1)) (member$e ?v0 (lset$e (lCons$g ?v2 ?v1))))) :named a60))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$) (?v1 A_b_prod_a_b_prod_prod_llist$) (?v2 A_b_prod_a_b_prod_prod$)) (=> (member$f ?v0 (lset$f ?v1)) (member$f ?v0 (lset$f (lCons$h ?v2 ?v1))))) :named a61))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$g ?v0 (lset$g ?v1)) (member$g ?v0 (lset$g (lCons$b ?v2 ?v1))))) :named a62))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$)) (=> (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ (lCons$ ?v2 ?v1))))) :named a63))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$) (?v2 A_b_prod$)) (=> (member$h ?v0 (lset$h ?v1)) (member$h ?v0 (lset$h (lCons$a ?v2 ?v1))))) :named a64))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_llist$)) (member$a ?v0 (lset$a (lCons$c ?v0 ?v1)))) :named a65))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_llist$)) (member$b ?v0 (lset$b (lCons$d ?v0 ?v1)))) :named a66))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$)) (member$c ?v0 (lset$c (lCons$e ?v0 ?v1)))) :named a67))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_b_prod_prod_llist$)) (member$d ?v0 (lset$d (lCons$f ?v0 ?v1)))) :named a68))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (member$e ?v0 (lset$e (lCons$g ?v0 ?v1)))) :named a69))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$) (?v1 A_b_prod_a_b_prod_prod_llist$)) (member$f ?v0 (lset$f (lCons$h ?v0 ?v1)))) :named a70))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (member$g ?v0 (lset$g (lCons$b ?v0 ?v1)))) :named a71))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (member$ ?v0 (lset$ (lCons$ ?v0 ?v1)))) :named a72))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$)) (member$h ?v0 (lset$h (lCons$a ?v0 ?v1)))) :named a73))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_llist$)) (member$a ?v0 (lset$a (lCons$c ?v0 ?v1)))) :named a74))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_llist$)) (member$b ?v0 (lset$b (lCons$d ?v0 ?v1)))) :named a75))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$)) (member$c ?v0 (lset$c (lCons$e ?v0 ?v1)))) :named a76))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_b_prod_prod_llist$)) (member$d ?v0 (lset$d (lCons$f ?v0 ?v1)))) :named a77))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (member$e ?v0 (lset$e (lCons$g ?v0 ?v1)))) :named a78))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$) (?v1 A_b_prod_a_b_prod_prod_llist$)) (member$f ?v0 (lset$f (lCons$h ?v0 ?v1)))) :named a79))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (member$g ?v0 (lset$g (lCons$b ?v0 ?v1)))) :named a80))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (member$ ?v0 (lset$ (lCons$ ?v0 ?v1)))) :named a81))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$)) (member$h ?v0 (lset$h (lCons$a ?v0 ?v1)))) :named a82))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a83))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$) (?v1 A_b_prod_a_b_prod_prod_llist$) (?v2 A_b_prod_a_b_prod_prod$) (?v3 A_b_prod_a_b_prod_prod_llist$)) (= (= (lCons$h ?v0 ?v1) (lCons$h ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a84))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a85))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$) (?v2 A_b_prod$) (?v3 A_b_prod_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a86))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$)) (= (member$h ?v0 (lset$h ?v1)) (fun_app$p (lmember$ ?v0) ?v1))) :named a87))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$g ?v0 (lset$g ?v1)) (fun_app$l (lmember$a ?v0) ?v1))) :named a88))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (= (member$ ?v0 (lset$ ?v1)) (fun_app$n (lmember$b ?v0) ?v1))) :named a89))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod_llist$) (?v3 A_b_prod_llist$)) (=> (member$f (pair$c ?v0 ?v1) (lset$f (lzip$a ?v2 ?v3))) (member$h ?v0 (lset$h ?v2)))) :named a90))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_llist$) (?v3 B_llist$)) (=> (member$h (pair$ ?v0 ?v1) (lset$h (lzip$ ?v2 ?v3))) (member$g ?v0 (lset$g ?v2)))) :named a91))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 B$) (?v3 B_llist$)) (! (= (lzip$ (lCons$b ?v0 ?v1) (lCons$ ?v2 ?v3)) (lCons$a (pair$ ?v0 ?v2) (lzip$ ?v1 ?v3))) :pattern ((lzip$ (lCons$b ?v0 ?v1) (lCons$ ?v2 ?v3))))) :named a92))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$) (?v2 A_b_prod$) (?v3 A_b_prod_llist$)) (! (= (lzip$a (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (lCons$h (pair$c ?v0 ?v2) (lzip$a ?v1 ?v3))) :pattern ((lzip$a (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3))))) :named a93))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (! (= (lzip$b (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (lCons$c (pair$a ?v0 ?v2) (lzip$b ?v1 ?v3))) :pattern ((lzip$b (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3))))) :named a94))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (lzip$c (lCons$ ?v0 ?v1) (lCons$b ?v2 ?v3)) (lCons$d (pair$b ?v0 ?v2) (lzip$c ?v1 ?v3))) :pattern ((lzip$c (lCons$ ?v0 ?v1) (lCons$b ?v2 ?v3))))) :named a95))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (lzip$d (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (lCons$g (pair$f ?v0 ?v2) (lzip$d ?v1 ?v3))) :pattern ((lzip$d (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3))))) :named a96))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$) (?v2 B$) (?v3 B_llist$)) (! (= (lzip$e (lCons$a ?v0 ?v1) (lCons$ ?v2 ?v3)) (lCons$i (pair$g ?v0 ?v2) (lzip$e ?v1 ?v3))) :pattern ((lzip$e (lCons$a ?v0 ?v1) (lCons$ ?v2 ?v3))))) :named a97))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (lzip$f (lCons$a ?v0 ?v1) (lCons$b ?v2 ?v3)) (lCons$j (pair$h ?v0 ?v2) (lzip$f ?v1 ?v3))) :pattern ((lzip$f (lCons$a ?v0 ?v1) (lCons$b ?v2 ?v3))))) :named a98))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 A_b_prod$) (?v3 A_b_prod_llist$)) (! (= (lzip$g (lCons$ ?v0 ?v1) (lCons$a ?v2 ?v3)) (lCons$k (pair$i ?v0 ?v2) (lzip$g ?v1 ?v3))) :pattern ((lzip$g (lCons$ ?v0 ?v1) (lCons$a ?v2 ?v3))))) :named a99))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_b_prod$) (?v3 A_b_prod_llist$)) (! (= (lzip$h (lCons$b ?v0 ?v1) (lCons$a ?v2 ?v3)) (lCons$f (pair$e ?v0 ?v2) (lzip$h ?v1 ?v3))) :pattern ((lzip$h (lCons$b ?v0 ?v1) (lCons$a ?v2 ?v3))))) :named a100))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 A_b_prod_a_b_prod_prod$) (?v3 A_b_prod_a_b_prod_prod_llist$)) (! (= (lzip$i (lCons$ ?v0 ?v1) (lCons$h ?v2 ?v3)) (lCons$l (pair$j ?v0 ?v2) (lzip$i ?v1 ?v3))) :pattern ((lzip$i (lCons$ ?v0 ?v1) (lCons$h ?v2 ?v3))))) :named a101))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$) (?v2 A_b_prod$) (?v3 A_b_prod_llist$)) (= (= (lzip$ ?v0 ?v1) (lCons$a ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_llist$) (?v6 B$) (?v7 B_llist$)) (and (= ?v0 (lCons$b ?v4 ?v5)) (and (= ?v1 (lCons$ ?v6 ?v7)) (and (= ?v2 (pair$ ?v4 ?v6)) (= ?v3 (lzip$ ?v5 ?v7)))))))) :named a102))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_a_b_prod_prod$) (?v3 A_b_prod_a_b_prod_prod_llist$)) (= (= (lzip$a ?v0 ?v1) (lCons$h ?v2 ?v3)) (exists ((?v4 A_b_prod$) (?v5 A_b_prod_llist$) (?v6 A_b_prod$) (?v7 A_b_prod_llist$)) (and (= ?v0 (lCons$a ?v4 ?v5)) (and (= ?v1 (lCons$a ?v6 ?v7)) (and (= ?v2 (pair$c ?v4 ?v6)) (= ?v3 (lzip$a ?v5 ?v7)))))))) :named a103))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_b_prod$) (?v3 B_b_prod_llist$)) (= (= (lzip$b ?v0 ?v1) (lCons$c ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_llist$) (?v6 B$) (?v7 B_llist$)) (and (= ?v0 (lCons$ ?v4 ?v5)) (and (= ?v1 (lCons$ ?v6 ?v7)) (and (= ?v2 (pair$a ?v4 ?v6)) (= ?v3 (lzip$b ?v5 ?v7)))))))) :named a104))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$) (?v2 B_a_prod$) (?v3 B_a_prod_llist$)) (= (= (lzip$c ?v0 ?v1) (lCons$d ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_llist$) (?v6 A$) (?v7 A_llist$)) (and (= ?v0 (lCons$ ?v4 ?v5)) (and (= ?v1 (lCons$b ?v6 ?v7)) (and (= ?v2 (pair$b ?v4 ?v6)) (= ?v3 (lzip$c ?v5 ?v7)))))))) :named a105))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_prod$) (?v3 A_a_prod_llist$)) (= (= (lzip$d ?v0 ?v1) (lCons$g ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_llist$) (?v6 A$) (?v7 A_llist$)) (and (= ?v0 (lCons$b ?v4 ?v5)) (and (= ?v1 (lCons$b ?v6 ?v7)) (and (= ?v2 (pair$f ?v4 ?v6)) (= ?v3 (lzip$d ?v5 ?v7)))))))) :named a106))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 B_llist$) (?v2 A_b_prod_b_prod$) (?v3 A_b_prod_b_prod_llist$)) (= (= (lzip$e ?v0 ?v1) (lCons$i ?v2 ?v3)) (exists ((?v4 A_b_prod$) (?v5 A_b_prod_llist$) (?v6 B$) (?v7 B_llist$)) (and (= ?v0 (lCons$a ?v4 ?v5)) (and (= ?v1 (lCons$ ?v6 ?v7)) (and (= ?v2 (pair$g ?v4 ?v6)) (= ?v3 (lzip$e ?v5 ?v7)))))))) :named a107))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_llist$) (?v2 A_b_prod_a_prod$) (?v3 A_b_prod_a_prod_llist$)) (= (= (lzip$f ?v0 ?v1) (lCons$j ?v2 ?v3)) (exists ((?v4 A_b_prod$) (?v5 A_b_prod_llist$) (?v6 A$) (?v7 A_llist$)) (and (= ?v0 (lCons$a ?v4 ?v5)) (and (= ?v1 (lCons$b ?v6 ?v7)) (and (= ?v2 (pair$h ?v4 ?v6)) (= ?v3 (lzip$f ?v5 ?v7)))))))) :named a108))
(assert (! (forall ((?v0 B_llist$) (?v1 A_b_prod_llist$) (?v2 B_a_b_prod_prod$) (?v3 B_a_b_prod_prod_llist$)) (= (= (lzip$g ?v0 ?v1) (lCons$k ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_llist$) (?v6 A_b_prod$) (?v7 A_b_prod_llist$)) (and (= ?v0 (lCons$ ?v4 ?v5)) (and (= ?v1 (lCons$a ?v6 ?v7)) (and (= ?v2 (pair$i ?v4 ?v6)) (= ?v3 (lzip$g ?v5 ?v7)))))))) :named a109))
(assert (! (forall ((?v0 A_llist$) (?v1 A_b_prod_llist$) (?v2 A_a_b_prod_prod$) (?v3 A_a_b_prod_prod_llist$)) (= (= (lzip$h ?v0 ?v1) (lCons$f ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_llist$) (?v6 A_b_prod$) (?v7 A_b_prod_llist$)) (and (= ?v0 (lCons$b ?v4 ?v5)) (and (= ?v1 (lCons$a ?v6 ?v7)) (and (= ?v2 (pair$e ?v4 ?v6)) (= ?v3 (lzip$h ?v5 ?v7)))))))) :named a110))
(assert (! (forall ((?v0 B_llist$) (?v1 A_b_prod_a_b_prod_prod_llist$) (?v2 B_a_b_prod_a_b_prod_prod_prod$) (?v3 B_a_b_prod_a_b_prod_prod_prod_llist$)) (= (= (lzip$i ?v0 ?v1) (lCons$l ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_llist$) (?v6 A_b_prod_a_b_prod_prod$) (?v7 A_b_prod_a_b_prod_prod_llist$)) (and (= ?v0 (lCons$ ?v4 ?v5)) (and (= ?v1 (lCons$h ?v6 ?v7)) (and (= ?v2 (pair$j ?v4 ?v6)) (= ?v3 (lzip$i ?v5 ?v7)))))))) :named a111))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B_llist$)) (! (= (fun_app$n (lmember$b ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$n (lmember$b ?v0) ?v2))) :pattern ((fun_app$n (lmember$b ?v0) (lCons$ ?v1 ?v2))))) :named a112))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$) (?v1 A_b_prod_a_b_prod_prod$) (?v2 A_b_prod_a_b_prod_prod_llist$)) (! (= (fun_app$j (lmember$c ?v0) (lCons$h ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$j (lmember$c ?v0) ?v2))) :pattern ((fun_app$j (lmember$c ?v0) (lCons$h ?v1 ?v2))))) :named a113))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$l (lmember$a ?v0) (lCons$b ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$l (lmember$a ?v0) ?v2))) :pattern ((fun_app$l (lmember$a ?v0) (lCons$b ?v1 ?v2))))) :named a114))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod_llist$)) (! (= (fun_app$p (lmember$ ?v0) (lCons$a ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$p (lmember$ ?v0) ?v2))) :pattern ((fun_app$p (lmember$ ?v0) (lCons$a ?v1 ?v2))))) :named a115))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod$) (?v3 A_b_prod$)) (= (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a116))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a117))
(check-sat)
;(get-unsat-core)
