; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 407
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun x$ () A$)
(declare-fun uu$ () A_llist_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun uua$ () A_llist_bool_fun$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lprefix$ (A_llist$) A_llist_bool_fun$)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uua$ ?v0) (or (not (fun_app$ (lprefix$ xs$) (ltl$ ?v0))) (or (= ?v0 lNil$) (and (not (lnull$ ?v0)) (not (= (lhd$ ?v0) x$)))))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uu$ ?v0) (not (fun_app$ (lprefix$ (lCons$ x$ xs$)) ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a1))
(assert (! (not (= uu$ uua$)) :named a2))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (lprefix$ ?v0) ?v0)) :named a3))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (lprefix$ ?v0) ?v0)) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$ (lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$ (lprefix$ ?v1) ?v3))) :pattern ((fun_app$ (lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (lprefix$ lNil$) ?v0) true) :pattern ((fun_app$ (lprefix$ lNil$) ?v0)))) :named a7))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (lprefix$ ?v0) lNil$) (lnull$ ?v0)) :pattern ((lprefix$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_llist$)) (=> (not (lnull$ ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$ (lprefix$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 lNil$) (exists ((?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v3)) (fun_app$ (lprefix$ ?v3) ?v2)))))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$ (lprefix$ ?v0) ?v1) (or (exists ((?v2 A_llist$)) (and (= ?v0 lNil$) (= ?v1 ?v2))) (exists ((?v2 A_llist$) (?v3 A_llist$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 (lCons$ ?v4 ?v3)) (fun_app$ (lprefix$ ?v2) ?v3))))))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (lprefix$ (lCons$ ?v0 ?v1)) ?v2) (exists ((?v3 A_llist$)) (and (= ?v2 (lCons$ ?v0 ?v3)) (fun_app$ (lprefix$ ?v1) ?v3))))) :named a12))
(assert (! (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))) :named a13))
(assert (! (forall ((?v0 A_llist$)) (= (not (lnull$ ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))) :named a14))
(assert (! (forall ((?v0 A_llist$)) (! (= (lnull$ ?v0) (= ?v0 lNil$)) :pattern ((lnull$ ?v0)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lhd$ (lCons$ ?v0 ?v1)) ?v0) :pattern ((lCons$ ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (ltl$ (lCons$ ?v0 ?v1)) ?v1) :pattern ((lCons$ ?v0 ?v1)))) :named a17))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$ (lprefix$ (lCons$ ?v0 ?v1)) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))) :named a18))
(assert (! (= (ltl$ lNil$) lNil$) :named a19))
(check-sat)
;(get-unsat-core)
