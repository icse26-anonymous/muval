; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 313
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_list_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_list_bool_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_list_a_list_fun$ 0)
(declare-sort A_list_a_llist_fun$ 0)
(declare-sort A_llist_a_list_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun xs$ () A_llist$)
(declare-fun top$ () A_list_set$)
(declare-fun top$a () A_llist_set$)
(declare-fun top$b () A_llist_bool_fun$)
(declare-fun top$c () Bool)
(declare-fun top$d () A_list_bool_fun$)
(declare-fun image$ (A_list_a_llist_fun$ A_list_set$) A_llist_set$)
(declare-fun image$a (A_llist_a_list_fun$ A_llist_set$) A_list_set$)
(declare-fun image$b (A_list_a_list_fun$ A_list_set$) A_list_set$)
(declare-fun image$c (A_llist_a_llist_fun$ A_llist_set$) A_llist_set$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun member$a (A_list$ A_list_set$) Bool)
(declare-fun collect$a (A_list_bool_fun$) A_list_set$)
(declare-fun fun_app$a (A_list_bool_fun$ A_list$) Bool)
(declare-fun fun_app$b (A_llist_a_list_fun$ A_llist$) A_list$)
(declare-fun fun_app$c (A_list_a_list_fun$ A_list$) A_list$)
(declare-fun fun_app$d (A_list_a_llist_fun$ A_list$) A_llist$)
(declare-fun fun_app$e (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun llist_of$ () A_list_a_llist_fun$)
(assert (! (not (member$ xs$ (image$ llist_of$ top$))) :named a0))
(assert (! (lfinite$ xs$) :named a1))
(assert (! (forall ((?v0 A_llist$)) (= (member$ ?v0 top$a) true)) :named a2))
(assert (! (forall ((?v0 A_list$)) (= (member$a ?v0 top$) true)) :named a3))
(assert (! (forall ((?v0 A_llist$)) (member$ ?v0 top$a)) :named a4))
(assert (! (forall ((?v0 A_list$)) (member$a ?v0 top$)) :named a5))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ top$b ?v0) top$c) :pattern ((fun_app$ top$b ?v0)))) :named a6))
(assert (! (forall ((?v0 A_list$)) (! (= (fun_app$a top$d ?v0) top$c) :pattern ((fun_app$a top$d ?v0)))) :named a7))
(assert (! (forall ((?v0 A_list$) (?v1 A_llist_a_list_fun$) (?v2 A_llist$) (?v3 A_llist_set$)) (=> (and (= ?v0 (fun_app$b ?v1 ?v2)) (member$ ?v2 ?v3)) (member$a ?v0 (image$a ?v1 ?v3)))) :named a8))
(assert (! (forall ((?v0 A_list$) (?v1 A_list_a_list_fun$) (?v2 A_list$) (?v3 A_list_set$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v2)) (member$a ?v2 ?v3)) (member$a ?v0 (image$b ?v1 ?v3)))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list$) (?v3 A_list_set$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v2)) (member$a ?v2 ?v3)) (member$ ?v0 (image$ ?v1 ?v3)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$) (?v3 A_llist_set$)) (=> (and (= ?v0 (fun_app$e ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (image$c ?v1 ?v3)))) :named a11))
(assert (! (forall ((?v0 A_list$)) (lfinite$ (fun_app$d llist_of$ ?v0))) :named a12))
(assert (! (forall ((?v0 A_llist_a_list_fun$)) (= (= (image$a ?v0 top$a) top$) (forall ((?v1 A_list$)) (exists ((?v2 A_llist$)) (= ?v1 (fun_app$b ?v0 ?v2)))))) :named a13))
(assert (! (forall ((?v0 A_llist_a_llist_fun$)) (= (= (image$c ?v0 top$a) top$a) (forall ((?v1 A_llist$)) (exists ((?v2 A_llist$)) (= ?v1 (fun_app$e ?v0 ?v2)))))) :named a14))
(assert (! (forall ((?v0 A_list_a_llist_fun$)) (= (= (image$ ?v0 top$) top$a) (forall ((?v1 A_llist$)) (exists ((?v2 A_list$)) (= ?v1 (fun_app$d ?v0 ?v2)))))) :named a15))
(assert (! (forall ((?v0 A_list_a_list_fun$)) (= (= (image$b ?v0 top$) top$) (forall ((?v1 A_list$)) (exists ((?v2 A_list$)) (= ?v1 (fun_app$c ?v0 ?v2)))))) :named a16))
(assert (! (forall ((?v0 A_llist_a_list_fun$) (?v1 A_list_a_llist_fun$)) (=> (forall ((?v2 A_list$)) (= (fun_app$b ?v0 (fun_app$d ?v1 ?v2)) ?v2)) (= (image$a ?v0 top$a) top$))) :named a17))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_a_llist_fun$)) (=> (forall ((?v2 A_llist$)) (= (fun_app$e ?v0 (fun_app$e ?v1 ?v2)) ?v2)) (= (image$c ?v0 top$a) top$a))) :named a18))
(assert (! (forall ((?v0 A_list_a_llist_fun$) (?v1 A_llist_a_list_fun$)) (=> (forall ((?v2 A_llist$)) (= (fun_app$d ?v0 (fun_app$b ?v1 ?v2)) ?v2)) (= (image$ ?v0 top$) top$a))) :named a19))
(assert (! (forall ((?v0 A_list_a_list_fun$) (?v1 A_list_a_list_fun$)) (=> (forall ((?v2 A_list$)) (= (fun_app$c ?v0 (fun_app$c ?v1 ?v2)) ?v2)) (= (image$b ?v0 top$) top$))) :named a20))
(assert (! (forall ((?v0 A_llist_a_list_fun$) (?v1 A_list$)) (=> (and (= (image$a ?v0 top$a) top$) (forall ((?v2 A_llist$)) (=> (= ?v1 (fun_app$b ?v0 ?v2)) false))) false)) :named a21))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$)) (=> (and (= (image$c ?v0 top$a) top$a) (forall ((?v2 A_llist$)) (=> (= ?v1 (fun_app$e ?v0 ?v2)) false))) false)) :named a22))
(assert (! (forall ((?v0 A_list_a_llist_fun$) (?v1 A_llist$)) (=> (and (= (image$ ?v0 top$) top$a) (forall ((?v2 A_list$)) (=> (= ?v1 (fun_app$d ?v0 ?v2)) false))) false)) :named a23))
(assert (! (forall ((?v0 A_list_a_list_fun$) (?v1 A_list$)) (=> (and (= (image$b ?v0 top$) top$) (forall ((?v2 A_list$)) (=> (= ?v1 (fun_app$c ?v0 ?v2)) false))) false)) :named a24))
(assert (! (forall ((?v0 A_llist_a_list_fun$) (?v1 A_list$)) (=> (= (image$a ?v0 top$a) top$) (exists ((?v2 A_llist$)) (= ?v1 (fun_app$b ?v0 ?v2))))) :named a25))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$)) (=> (= (image$c ?v0 top$a) top$a) (exists ((?v2 A_llist$)) (= ?v1 (fun_app$e ?v0 ?v2))))) :named a26))
(assert (! (forall ((?v0 A_list_a_llist_fun$) (?v1 A_llist$)) (=> (= (image$ ?v0 top$) top$a) (exists ((?v2 A_list$)) (= ?v1 (fun_app$d ?v0 ?v2))))) :named a27))
(assert (! (forall ((?v0 A_list_a_list_fun$) (?v1 A_list$)) (=> (= (image$b ?v0 top$) top$) (exists ((?v2 A_list$)) (= ?v1 (fun_app$c ?v0 ?v2))))) :named a28))
(assert (! (forall ((?v0 A_list$) (?v1 A_list_a_list_fun$) (?v2 A_list$)) (=> (= ?v0 (fun_app$c ?v1 ?v2)) (member$a ?v0 (image$b ?v1 top$)))) :named a29))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$)) (=> (= ?v0 (fun_app$e ?v1 ?v2)) (member$ ?v0 (image$c ?v1 top$a)))) :named a30))
(assert (! (forall ((?v0 A_list$) (?v1 A_llist_a_list_fun$) (?v2 A_llist$)) (=> (= ?v0 (fun_app$b ?v1 ?v2)) (member$a ?v0 (image$a ?v1 top$a)))) :named a31))
(assert (! (forall ((?v0 A_llist$) (?v1 A_list_a_llist_fun$) (?v2 A_list$)) (=> (= ?v0 (fun_app$d ?v1 ?v2)) (member$ ?v0 (image$ ?v1 top$)))) :named a32))
(assert (! (forall ((?v0 A_list_a_list_fun$) (?v1 A_list$)) (member$a (fun_app$c ?v0 ?v1) (image$b ?v0 top$))) :named a33))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$)) (member$ (fun_app$e ?v0 ?v1) (image$c ?v0 top$a))) :named a34))
(assert (! (forall ((?v0 A_llist_a_list_fun$) (?v1 A_llist$)) (member$a (fun_app$b ?v0 ?v1) (image$a ?v0 top$a))) :named a35))
(assert (! (forall ((?v0 A_list_a_llist_fun$) (?v1 A_list$)) (member$ (fun_app$d ?v0 ?v1) (image$ ?v0 top$))) :named a36))
(assert (! (forall ((?v0 A_llist_set$)) (=> (forall ((?v1 A_llist$)) (member$ ?v1 ?v0)) (= top$a ?v0))) :named a37))
(assert (! (forall ((?v0 A_list_set$)) (=> (forall ((?v1 A_list$)) (member$a ?v1 ?v0)) (= top$ ?v0))) :named a38))
(assert (! (= top$a (collect$ top$b)) :named a39))
(assert (! (= top$ (collect$a top$d)) :named a40))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_a_list_fun$)) (=> (member$ ?v0 ?v1) (member$a (fun_app$b ?v2 ?v0) (image$a ?v2 ?v1)))) :named a41))
(assert (! (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list_a_list_fun$)) (=> (member$a ?v0 ?v1) (member$a (fun_app$c ?v2 ?v0) (image$b ?v2 ?v1)))) :named a42))
(assert (! (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list_a_llist_fun$)) (=> (member$a ?v0 ?v1) (member$ (fun_app$d ?v2 ?v0) (image$ ?v2 ?v1)))) :named a43))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_fun$)) (=> (member$ ?v0 ?v1) (member$ (fun_app$e ?v2 ?v0) (image$c ?v2 ?v1)))) :named a44))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_list$) (?v3 A_llist_a_list_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$b ?v3 ?v0))) (member$a ?v2 (image$a ?v3 ?v1)))) :named a45))
(assert (! (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list$) (?v3 A_list_a_list_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$c ?v3 ?v0))) (member$a ?v2 (image$b ?v3 ?v1)))) :named a46))
(assert (! (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_llist$) (?v3 A_list_a_llist_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$d ?v3 ?v0))) (member$ ?v2 (image$ ?v3 ?v1)))) :named a47))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist$) (?v3 A_llist_a_llist_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$e ?v3 ?v0))) (member$ ?v2 (image$c ?v3 ?v1)))) :named a48))
(assert (! (forall ((?v0 A_llist_a_list_fun$) (?v1 A_llist_set$) (?v2 A_list_bool_fun$)) (=> (forall ((?v3 A_list$)) (=> (member$a ?v3 (image$a ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A_llist$)) (=> (member$ ?v3 ?v1) (fun_app$a ?v2 (fun_app$b ?v0 ?v3)))))) :named a49))
(assert (! (forall ((?v0 A_list_a_list_fun$) (?v1 A_list_set$) (?v2 A_list_bool_fun$)) (=> (forall ((?v3 A_list$)) (=> (member$a ?v3 (image$b ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A_list$)) (=> (member$a ?v3 ?v1) (fun_app$a ?v2 (fun_app$c ?v0 ?v3)))))) :named a50))
(assert (! (forall ((?v0 A_list_a_llist_fun$) (?v1 A_list_set$) (?v2 A_llist_bool_fun$)) (=> (forall ((?v3 A_llist$)) (=> (member$ ?v3 (image$ ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (forall ((?v3 A_list$)) (=> (member$a ?v3 ?v1) (fun_app$ ?v2 (fun_app$d ?v0 ?v3)))))) :named a51))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_set$) (?v2 A_llist_bool_fun$)) (=> (forall ((?v3 A_llist$)) (=> (member$ ?v3 (image$c ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (forall ((?v3 A_llist$)) (=> (member$ ?v3 ?v1) (fun_app$ ?v2 (fun_app$e ?v0 ?v3)))))) :named a52))
(check-sat)
;(get-unsat-core)
