; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 423
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun uu$ () A_llist_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun zs$ () A_llist$)
(declare-fun bot$ () A_llist_set$)
(declare-fun uua$ (A_llist$) A_llist_bool_fun$)
(declare-fun xsa$ () A_llist$)
(declare-fun lSup$ (A_llist_set$) A_llist$)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun fun_app$a (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun gen_lset$ (A_set$) A_llist_a_set_fun$)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uu$ ?v0) (and (lprefix$ ?v0 xsa$) (and (lprefix$ lNil$ ?v0) (lfinite$ ?v0)))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (and (lprefix$ ?v1 ?v0) (lfinite$ ?v1))) :pattern ((fun_app$ (uua$ ?v0) ?v1)))) :named a1))
(assert (! (not (= (lSup$ (collect$ uu$)) xsa$)) :named a2))
(assert (! (lfinite$ zs$) :named a3))
(assert (! (lprefix$ zs$ xs$) :named a4))
(assert (! (lprefix$ lNil$ xsa$) :named a5))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a6))
(assert (! (forall ((?v0 A_llist$)) (! (= (lprefix$ lNil$ ?v0) true) :pattern ((lprefix$ lNil$ ?v0)))) :named a7))
(assert (! (= (lfinite$ lNil$) true) :named a8))
(assert (! (forall ((?v0 A_llist$)) (= (lSup$ (collect$ (uua$ ?v0))) ?v0)) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v0)) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v2 ?v1)) (or (lprefix$ ?v0 ?v2) (lprefix$ ?v2 ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v2)) (lprefix$ ?v0 ?v2))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (lprefix$ ?v0 ?v1) (= ?v0 ?v1))) :pattern ((lprefix$ ?v0 ?v1)))) :named a13))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ lNil$ ?v0)) :named a14))
(assert (! (lfinite$ lNil$) :named a15))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ (lmember$ ?v0) lNil$) false) :pattern ((lmember$ ?v0)))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lprefix$ (lappend$ ?v0 ?v1) (lappend$ ?v0 ?v2)) (=> (lfinite$ ?v0) (lprefix$ ?v1 ?v2)))) :named a17))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$a (gen_lset$ ?v0) lNil$) ?v0) :pattern ((gen_lset$ ?v0)))) :named a18))
(assert (! (= (lSup$ bot$) lNil$) :named a19))
(check-sat)
;(get-unsat-core)
