; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 388
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_set_bool_fun$ 0)
(declare-sort A_set_a_set_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_a_set_a_set_fun_fun$ 0)
(declare-sort A_a_llist_a_set_fun_fun$ 0)
(declare-sort A_set_a_set_bool_fun_fun$ 0)
(declare-sort A_llist_a_set_a_set_fun_fun$ 0)
(declare-sort A_llist_a_set_fun_a_set_fun$ 0)
(declare-sort A_a_llist_a_set_a_set_fun_fun_fun$ 0)
(declare-sort A_a_llist_a_set_fun_a_set_fun_fun$ 0)
(declare-sort A_set_a_a_llist_a_set_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_set_fun_a_set_fun_fun$ 0)
(declare-sort A_a_llist_a_llist_a_set_fun_a_set_fun_fun_fun$ 0)
(declare-sort A_a_llist_a_set_fun_fun_a_llist_a_set_fun_fun$ 0)
(declare-sort A_llist_a_set_fun_a_a_llist_a_set_fun_fun_fun$ 0)
(declare-sort A_llist_a_set_fun_a_llist_a_set_fun_bool_fun_fun$ 0)
(declare-sort A_set_a_a_llist_a_set_fun_fun_fun_a_llist_a_set_a_set_fun_fun_fun$ 0)
(declare-sort A_llist_a_set_fun_a_a_llist_a_set_fun_fun_fun_a_llist_a_llist_a_set_fun_a_set_fun_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun f$ (A_llist_a_set_fun$) A_llist_a_set_fun$)
(declare-fun x$ () A_llist$)
(declare-fun uu$ (A_llist_a_set_fun$) A_a_llist_a_set_fun_fun$)
(declare-fun bot$ () A_set$)
(declare-fun uua$ () A_llist_a_set_fun_a_set_fun$)
(declare-fun uub$ (A_set_a_a_llist_a_set_fun_fun_fun$) A_a_llist_a_set_a_set_fun_fun_fun$)
(declare-fun uuc$ (A_set_a_set_fun$) A_set_a_a_llist_a_set_fun_fun_fun_a_llist_a_set_a_set_fun_fun_fun$)
(declare-fun uud$ (A_llist_a_set_fun_a_a_llist_a_set_fun_fun_fun$) A_a_llist_a_llist_a_set_fun_a_set_fun_fun_fun$)
(declare-fun uue$ (A_llist_a_set_fun_a_set_fun$) A_llist_a_set_fun_a_a_llist_a_set_fun_fun_fun_a_llist_a_llist_a_set_fun_a_set_fun_fun_fun$)
(declare-fun uuf$ (A_llist_a_set_fun_a_set_fun$) A_a_llist_a_set_fun_a_set_fun_fun$)
(declare-fun uug$ (A$) A_bool_fun$)
(declare-fun uuh$ (A$) A_bool_fun$)
(declare-fun uui$ (A_set_a_set_fun$) A_a_set_a_set_fun_fun$)
(declare-fun uuj$ (A_set_a_set_fun$) A_llist_a_llist_a_set_fun_a_set_fun_fun$)
(declare-fun insert$ (A$) A_set_a_set_fun$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_llist_a_set_fun_a_set_fun$ A_llist_a_set_fun$) A_set$)
(declare-fun fun_ord$ (A_set_a_set_bool_fun_fun$) A_llist_a_set_fun_a_llist_a_set_fun_bool_fun_fun$)
(declare-fun less_eq$ () A_set_a_set_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun fun_app$b (A_a_llist_a_set_fun_fun_a_llist_a_set_fun_fun$ A_a_llist_a_set_fun_fun$) A_llist_a_set_fun$)
(declare-fun fun_app$c (A_bool_fun$ A$) Bool)
(declare-fun fun_app$d (A_a_llist_a_set_fun_fun$ A$) A_llist_a_set_fun$)
(declare-fun fun_app$e (A_set_a_set_fun$ A_set$) A_set$)
(declare-fun fun_app$f (A_a_set_a_set_fun_fun$ A$) A_set_a_set_fun$)
(declare-fun fun_app$g (A_a_llist_a_set_fun_a_set_fun_fun$ A$) A_llist_a_set_fun_a_set_fun$)
(declare-fun fun_app$h (A_llist_a_llist_a_set_fun_a_set_fun_fun$ A_llist$) A_llist_a_set_fun_a_set_fun$)
(declare-fun fun_app$i (A_llist_a_set_a_set_fun_fun$ A_llist$) A_set_a_set_fun$)
(declare-fun fun_app$j (A_a_llist_a_set_a_set_fun_fun_fun$ A$) A_llist_a_set_a_set_fun_fun$)
(declare-fun fun_app$k (A_set_a_a_llist_a_set_fun_fun_fun$ A_set$) A_a_llist_a_set_fun_fun$)
(declare-fun fun_app$l (A_a_llist_a_llist_a_set_fun_a_set_fun_fun_fun$ A$) A_llist_a_llist_a_set_fun_a_set_fun_fun$)
(declare-fun fun_app$m (A_llist_a_set_fun_a_a_llist_a_set_fun_fun_fun$ A_llist_a_set_fun$) A_a_llist_a_set_fun_fun$)
(declare-fun fun_app$n (A_set_a_a_llist_a_set_fun_fun_fun_a_llist_a_set_a_set_fun_fun_fun$ A_set_a_a_llist_a_set_fun_fun_fun$) A_llist_a_set_a_set_fun_fun$)
(declare-fun fun_app$o (A_llist_a_set_fun_a_a_llist_a_set_fun_fun_fun_a_llist_a_llist_a_set_fun_a_set_fun_fun_fun$ A_llist_a_set_fun_a_a_llist_a_set_fun_fun_fun$) A_llist_a_llist_a_set_fun_a_set_fun_fun$)
(declare-fun fun_app$p (A_set_bool_fun$ A_set$) Bool)
(declare-fun fun_app$q (A_set_a_set_bool_fun_fun$ A_set$) A_set_bool_fun$)
(declare-fun monotone$ (A_llist_a_set_fun_a_llist_a_set_fun_bool_fun_fun$ A_set_a_set_bool_fun_fun$ A_llist_a_set_fun_a_set_fun$) Bool)
(declare-fun monotone$a (A_set_a_set_bool_fun_fun$ A_set_a_set_bool_fun_fun$ A_set_a_set_fun$) Bool)
(declare-fun case_llist$ (A_set$) A_a_llist_a_set_fun_fun_a_llist_a_set_fun_fun$)
(assert (! (forall ((?v0 A_llist_a_set_fun$)) (! (= (fun_app$ uua$ ?v0) (fun_app$a (fun_app$b (case_llist$ bot$) (uu$ ?v0)) x$)) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$c (uug$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$c (uug$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$c (uuh$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$c (uuh$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_llist_a_set_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$a (fun_app$d (uu$ ?v0) ?v1) ?v2) (fun_app$e (insert$ ?v1) (fun_app$a ?v0 ?v2))) :pattern ((fun_app$a (fun_app$d (uu$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A_set_a_set_fun$) (?v1 A$) (?v2 A_set$)) (! (= (fun_app$e (fun_app$f (uui$ ?v0) ?v1) ?v2) (fun_app$e (insert$ ?v1) (fun_app$e ?v0 ?v2))) :pattern ((fun_app$e (fun_app$f (uui$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_llist_a_set_fun_a_set_fun$) (?v1 A$) (?v2 A_llist_a_set_fun$)) (! (= (fun_app$ (fun_app$g (uuf$ ?v0) ?v1) ?v2) (fun_app$e (insert$ ?v1) (fun_app$ ?v0 ?v2))) :pattern ((fun_app$ (fun_app$g (uuf$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A_set_a_set_fun$) (?v1 A_llist$) (?v2 A_llist_a_set_fun$)) (! (= (fun_app$ (fun_app$h (uuj$ ?v0) ?v1) ?v2) (fun_app$e ?v0 (fun_app$a ?v2 ?v1))) :pattern ((fun_app$ (fun_app$h (uuj$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 A_set_a_a_llist_a_set_fun_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A_set$)) (! (= (fun_app$e (fun_app$i (fun_app$j (uub$ ?v0) ?v1) ?v2) ?v3) (fun_app$a (fun_app$d (fun_app$k ?v0 ?v3) ?v1) ?v2)) :pattern ((fun_app$e (fun_app$i (fun_app$j (uub$ ?v0) ?v1) ?v2) ?v3)))) :named a7))
(assert (! (forall ((?v0 A_llist_a_set_fun_a_a_llist_a_set_fun_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A_llist_a_set_fun$)) (! (= (fun_app$ (fun_app$h (fun_app$l (uud$ ?v0) ?v1) ?v2) ?v3) (fun_app$a (fun_app$d (fun_app$m ?v0 ?v3) ?v1) ?v2)) :pattern ((fun_app$ (fun_app$h (fun_app$l (uud$ ?v0) ?v1) ?v2) ?v3)))) :named a8))
(assert (! (forall ((?v0 A_set_a_set_fun$) (?v1 A_set_a_a_llist_a_set_fun_fun_fun$) (?v2 A_llist$) (?v3 A_set$)) (! (= (fun_app$e (fun_app$i (fun_app$n (uuc$ ?v0) ?v1) ?v2) ?v3) (fun_app$a (fun_app$b (case_llist$ (fun_app$e ?v0 ?v3)) (fun_app$k ?v1 ?v3)) ?v2)) :pattern ((fun_app$e (fun_app$i (fun_app$n (uuc$ ?v0) ?v1) ?v2) ?v3)))) :named a9))
(assert (! (forall ((?v0 A_llist_a_set_fun_a_set_fun$) (?v1 A_llist_a_set_fun_a_a_llist_a_set_fun_fun_fun$) (?v2 A_llist$) (?v3 A_llist_a_set_fun$)) (! (= (fun_app$ (fun_app$h (fun_app$o (uue$ ?v0) ?v1) ?v2) ?v3) (fun_app$a (fun_app$b (case_llist$ (fun_app$ ?v0 ?v3)) (fun_app$m ?v1 ?v3)) ?v2)) :pattern ((fun_app$ (fun_app$h (fun_app$o (uue$ ?v0) ?v1) ?v2) ?v3)))) :named a10))
(assert (! (not (monotone$ (fun_ord$ less_eq$) less_eq$ uua$)) :named a11))
(assert (! (forall ((?v0 A_llist_a_set_fun$) (?v1 A_llist$)) (= (fun_app$a (f$ ?v0) ?v1) (fun_app$a (fun_app$b (case_llist$ bot$) (uu$ ?v0)) ?v1))) :named a12))
(assert (! (forall ((?v0 A_set_a_set_bool_fun_fun$) (?v1 A_set_a_set_bool_fun_fun$) (?v2 A_set_a_set_fun$) (?v3 A_set_a_a_llist_a_set_fun_fun_fun$) (?v4 A_llist$)) (=> (and (monotone$a ?v0 ?v1 ?v2) (forall ((?v5 A$) (?v6 A_llist$)) (monotone$a ?v0 ?v1 (fun_app$i (fun_app$j (uub$ ?v3) ?v5) ?v6)))) (monotone$a ?v0 ?v1 (fun_app$i (fun_app$n (uuc$ ?v2) ?v3) ?v4)))) :named a13))
(assert (! (forall ((?v0 A_llist_a_set_fun_a_llist_a_set_fun_bool_fun_fun$) (?v1 A_set_a_set_bool_fun_fun$) (?v2 A_llist_a_set_fun_a_set_fun$) (?v3 A_llist_a_set_fun_a_a_llist_a_set_fun_fun_fun$) (?v4 A_llist$)) (=> (and (monotone$ ?v0 ?v1 ?v2) (forall ((?v5 A$) (?v6 A_llist$)) (monotone$ ?v0 ?v1 (fun_app$h (fun_app$l (uud$ ?v3) ?v5) ?v6)))) (monotone$ ?v0 ?v1 (fun_app$h (fun_app$o (uue$ ?v2) ?v3) ?v4)))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A$)) (= (= (fun_app$e (insert$ ?v0) ?v1) (fun_app$e (insert$ ?v2) bot$)) (and (= ?v0 ?v2) (fun_app$p (fun_app$q less_eq$ ?v1) (fun_app$e (insert$ ?v2) bot$))))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_set$)) (= (= (fun_app$e (insert$ ?v0) bot$) (fun_app$e (insert$ ?v1) ?v2)) (and (= ?v1 ?v0) (fun_app$p (fun_app$q less_eq$ ?v2) (fun_app$e (insert$ ?v0) bot$))))) :named a16))
(assert (! (forall ((?v0 A_llist_a_set_fun_a_set_fun$) (?v1 A$)) (=> (monotone$ (fun_ord$ less_eq$) less_eq$ ?v0) (monotone$ (fun_ord$ less_eq$) less_eq$ (fun_app$g (uuf$ ?v0) ?v1)))) :named a17))
(assert (! (forall ((?v0 A$)) (= (collect$ (uug$ ?v0)) (fun_app$e (insert$ ?v0) bot$))) :named a18))
(assert (! (forall ((?v0 A$)) (= (collect$ (uuh$ ?v0)) (fun_app$e (insert$ ?v0) bot$))) :named a19))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (fun_app$p (fun_app$q less_eq$ (fun_app$e (insert$ ?v0) ?v1)) ?v2) (and (member$ ?v0 ?v2) (fun_app$p (fun_app$q less_eq$ ?v1) ?v2)))) :named a20))
(assert (! (forall ((?v0 A$)) (member$ ?v0 (fun_app$e (insert$ ?v0) bot$))) :named a21))
(assert (! (forall ((?v0 A_set$)) (= (fun_app$p (fun_app$q less_eq$ ?v0) bot$) (= ?v0 bot$))) :named a22))
(assert (! (forall ((?v0 A_set$)) (fun_app$p (fun_app$q less_eq$ bot$) ?v0)) :named a23))
(assert (! (forall ((?v0 A_set_a_set_bool_fun_fun$) (?v1 A_set_a_set_fun$) (?v2 A$)) (=> (monotone$a ?v0 less_eq$ ?v1) (monotone$a ?v0 less_eq$ (fun_app$f (uui$ ?v1) ?v2)))) :named a24))
(assert (! (forall ((?v0 A_llist_a_set_fun_a_llist_a_set_fun_bool_fun_fun$) (?v1 A_llist_a_set_fun_a_set_fun$) (?v2 A$)) (=> (monotone$ ?v0 less_eq$ ?v1) (monotone$ ?v0 less_eq$ (fun_app$g (uuf$ ?v1) ?v2)))) :named a25))
(assert (! (forall ((?v0 A_set_a_set_bool_fun_fun$) (?v1 A_set_a_set_bool_fun_fun$) (?v2 A_set_a_set_fun$) (?v3 A_llist$)) (=> (monotone$a ?v0 ?v1 ?v2) (monotone$ (fun_ord$ ?v0) ?v1 (fun_app$h (uuj$ ?v2) ?v3)))) :named a26))
(assert (! (forall ((?v0 A_set$) (?v1 A$)) (=> (fun_app$p (fun_app$q less_eq$ ?v0) (fun_app$e (insert$ ?v1) bot$)) (or (= ?v0 bot$) (= ?v0 (fun_app$e (insert$ ?v1) bot$))))) :named a27))
(assert (! (forall ((?v0 A$)) (= (member$ ?v0 bot$) false)) :named a28))
(assert (! (forall ((?v0 A_bool_fun$)) (= (= bot$ (collect$ ?v0)) (forall ((?v1 A$)) (not (fun_app$c ?v0 ?v1))))) :named a29))
(check-sat)
;(get-unsat-core)
