; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 389
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_set_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun lSup$ () A_llist_set_a_llist_fun$)
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$) Bool)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_set_a_llist_fun$ A_llist_set$) A_llist$)
(declare-fun partial_function_definitions$ (A_llist_a_llist_bool_fun_fun$ A_llist_set_a_llist_fun$) Bool)
(assert (! (not (partial_function_definitions$ lprefix$ lSup$)) :named a0))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v0)) :named a1))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v2) ?v1)) (or (fun_app$ (fun_app$a lprefix$ ?v0) ?v2) (fun_app$ (fun_app$a lprefix$ ?v2) ?v0)))) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v2)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v2))) :named a4))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_set_a_llist_fun$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (partial_function_definitions$ ?v0 ?v1) (and (fun_app$ (fun_app$a ?v0 ?v2) ?v3) (fun_app$ (fun_app$a ?v0 ?v3) ?v2))) (= ?v2 ?v3))) :named a5))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_set_a_llist_fun$) (?v2 A_llist$) (?v3 A_llist$) (?v4 A_llist$)) (=> (and (partial_function_definitions$ ?v0 ?v1) (and (fun_app$ (fun_app$a ?v0 ?v2) ?v3) (fun_app$ (fun_app$a ?v0 ?v3) ?v4))) (fun_app$ (fun_app$a ?v0 ?v2) ?v4))) :named a6))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_set_a_llist_fun$) (?v2 A_llist$)) (=> (partial_function_definitions$ ?v0 ?v1) (fun_app$ (fun_app$a ?v0 ?v2) ?v2))) :named a7))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (fun_app$ (fun_app$a lprefix$ ?v2) ?v1)))) (fun_app$ (fun_app$a lprefix$ (fun_app$b lSup$ ?v0)) ?v1))) :named a8))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (member$ ?v1 ?v0)) (fun_app$ (fun_app$a lprefix$ ?v1) (fun_app$b lSup$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (fun_app$a lprefix$ lNil$) ?v0) true) :pattern ((fun_app$ (fun_app$a lprefix$ lNil$) ?v0)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$ (fun_app$a lprefix$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 A_llist_set$)) (= (lnull$ (fun_app$b lSup$ ?v0)) (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$ (fun_app$a lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$ (fun_app$a lprefix$ ?v1) ?v3))) :pattern ((fun_app$ (fun_app$a lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ (lappend$ ?v2 ?v0)) (lappend$ ?v2 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (fun_app$ (fun_app$a lprefix$ ?v0) (lappend$ ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$a lprefix$ lNil$) ?v0)) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a17))
(check-sat)
;(get-unsat-core)
