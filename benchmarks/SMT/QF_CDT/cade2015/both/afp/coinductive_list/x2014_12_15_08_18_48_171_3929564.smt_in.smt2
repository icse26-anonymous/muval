; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 594
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort A_llist_a_list_fun$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun xs$ () A_llist$)
(declare-fun nth$ (A_list$) Nat_a_fun$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun lnth$ (A_llist$) Nat_a_fun$)
(declare-fun zero$ () Nat$)
(declare-fun fun_app$ (A_llist_a_list_fun$ A_llist$) A_list$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun list_of$ () A_llist_a_list_fun$)
(declare-fun fun_app$a (Nat_a_fun$ Nat$) A$)
(declare-fun llist_of$ (A_list$) A_llist$)
(declare-fun undefined$ (Nat$) A$)
(declare-fun list_of_aux$ (A_list$) A_llist_a_list_fun$)
(declare-fun list_update$ (A_list$ Nat$ A$) A_list$)
(assert (! (not (= (nth$ (fun_app$ list_of$ xs$)) (lnth$ xs$))) :named a0))
(assert (! (lfinite$ xs$) :named a1))
(assert (! (forall ((?v0 A_list$)) (= (lnth$ (llist_of$ ?v0)) (nth$ ?v0))) :named a2))
(assert (! (forall ((?v0 A_list$)) (= (fun_app$ list_of$ (llist_of$ ?v0)) ?v0)) :named a3))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$ ?v0) (= (llist_of$ (fun_app$ list_of$ ?v0)) ?v0))) :named a4))
(assert (! (= list_of$ (list_of_aux$ nil$)) :named a5))
(assert (! (forall ((?v0 A_list$) (?v1 Nat$)) (= (list_update$ ?v0 ?v1 (fun_app$a (nth$ ?v0) ?v1)) ?v0)) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_list$) (?v3 A$)) (=> (not (= ?v0 ?v1)) (= (fun_app$a (nth$ (list_update$ ?v2 ?v0 ?v3)) ?v1) (fun_app$a (nth$ ?v2) ?v1)))) :named a7))
(assert (! (= (fun_app$ list_of$ lNil$) nil$) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$a (lnth$ (lCons$ ?v0 ?v1)) zero$) ?v0) :pattern ((lCons$ ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 Nat$)) (! (= (fun_app$a (lnth$ (lCons$ ?v0 ?v1)) (suc$ ?v2)) (fun_app$a (lnth$ ?v1) ?v2)) :pattern ((fun_app$a (lnth$ (lCons$ ?v0 ?v1)) (suc$ ?v2))))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$ ?v0) (= (hd$ (fun_app$ list_of$ ?v0)) (lhd$ ?v0)))) :named a11))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a (lnth$ lNil$) ?v0) (undefined$ ?v0)) :pattern ((fun_app$a (lnth$ lNil$) ?v0)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (! (=> (lfinite$ ?v0) (= (fun_app$ list_of$ (lCons$ ?v1 ?v0)) (cons$ ?v1 (fun_app$ list_of$ ?v0)))) :pattern ((lCons$ ?v1 ?v0)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 A_list$) (?v1 Nat$) (?v2 A$) (?v3 A$)) (= (list_update$ (list_update$ ?v0 ?v1 ?v2) ?v1 ?v3) (list_update$ ?v0 ?v1 ?v3))) :named a16))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a17))
(check-sat)
;(get-unsat-core)
