; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 612
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_b_prod_fun$ 0)
(declare-sort A_b_prod_a_fun$ 0)
(declare-sort A_b_prod_b_fun$ 0)
(declare-sort B_a_b_prod_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$) (lCons$ (lhd$ A_b_prod$) (ltl$ A_b_prod_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun us$ () A_b_prod_llist$)
(declare-fun uu$ () A_b_prod_a_fun$)
(declare-fun vs$ () A_b_prod_llist$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun uua$ () A_b_prod_b_fun$)
(declare-fun lmap$ (A_b_prod_a_fun$ A_b_prod_llist$) A_llist$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun lmap$a (A_b_prod_b_fun$ A_b_prod_llist$) B_llist$)
(declare-fun lmap$b (A_b_prod_a_b_prod_fun$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun lmap$c (B_a_b_prod_fun$ B_llist$) A_b_prod_llist$)
(declare-fun lmap$d (B_b_fun$ B_llist$) B_llist$)
(declare-fun lmap$e (B_a_fun$ B_llist$) A_llist$)
(declare-fun lmap$f (A_a_b_prod_fun$ A_llist$) A_b_prod_llist$)
(declare-fun lmap$g (A_b_fun$ A_llist$) B_llist$)
(declare-fun lmap$h (A_a_fun$ A_llist$) A_llist$)
(declare-fun lnull$ (B_llist$) Bool)
(declare-fun ltake$ (Enat$ A_llist$) A_llist$)
(declare-fun ldrop$a (Enat$ B_llist$) B_llist$)
(declare-fun ldrop$b (Enat$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun ldropn$ (Nat$ B_llist$) B_llist$)
(declare-fun lnull$a (A_llist$) Bool)
(declare-fun lnull$b (A_b_prod_llist$) Bool)
(declare-fun ltake$a (Enat$ B_llist$) B_llist$)
(declare-fun fun_app$ (A_b_prod_b_fun$ A_b_prod$) B$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun ldropn$a (Nat$ A_llist$) A_llist$)
(declare-fun ldropn$b (Nat$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun llength$ (A_b_prod_llist$) Enat$)
(declare-fun fun_app$a (A_b_prod_a_fun$ A_b_prod$) A$)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun fun_app$c (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$d (B_b_fun$ B$) B$)
(declare-fun fun_app$e (A_a_fun$ A$) A$)
(declare-fun iterates$ (B_b_fun$ B$) B_llist$)
(declare-fun lappend$a (B_llist$ B_llist$) B_llist$)
(declare-fun iterates$a (A_a_fun$ A$) A_llist$)
(declare-fun lstrict_prefix$ (A_b_prod_llist$ A_b_prod_llist$) Bool)
(declare-fun lstrict_prefix$a (B_llist$ B_llist$) Bool)
(declare-fun lstrict_prefix$b (A_llist$ A_llist$) Bool)
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$ uua$ ?v0) (snd$ ?v0)) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$a uu$ ?v0) (fst$ ?v0)) :pattern ((fun_app$a uu$ ?v0)))) :named a1))
(assert (! (not (= vs$ (lzip$ (lmap$ uu$ vs$) (lmap$a uua$ vs$)))) :named a2))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$)) (= (= ?v0 ?v1) (and (= (fst$ ?v0) (fst$ ?v1)) (= (snd$ ?v0) (snd$ ?v1))))) :named a3))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$)) (=> (and (= (fst$ ?v0) (fst$ ?v1)) (= (snd$ ?v0) (snd$ ?v1))) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$)) (=> (and (= (fst$ ?v0) (fst$ ?v1)) (= (snd$ ?v0) (snd$ ?v1))) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_b_prod$)) (=> (and (fun_app$b (fun_app$c ?v0 (snd$ ?v1)) (fst$ ?v1)) (forall ((?v2 A$) (?v3 B$)) (=> (fun_app$b (fun_app$c ?v0 ?v3) ?v2) false))) false)) :named a6))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_a_b_prod_fun$)) (=> (lstrict_prefix$ ?v0 ?v1) (lstrict_prefix$ (lmap$b ?v2 ?v0) (lmap$b ?v2 ?v1)))) :named a7))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_a_b_prod_fun$)) (=> (lstrict_prefix$a ?v0 ?v1) (lstrict_prefix$ (lmap$c ?v2 ?v0) (lmap$c ?v2 ?v1)))) :named a8))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_b_fun$)) (=> (lstrict_prefix$a ?v0 ?v1) (lstrict_prefix$a (lmap$d ?v2 ?v0) (lmap$d ?v2 ?v1)))) :named a9))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_a_fun$)) (=> (lstrict_prefix$a ?v0 ?v1) (lstrict_prefix$b (lmap$e ?v2 ?v0) (lmap$e ?v2 ?v1)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_b_prod_fun$)) (=> (lstrict_prefix$b ?v0 ?v1) (lstrict_prefix$ (lmap$f ?v2 ?v0) (lmap$f ?v2 ?v1)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_b_fun$)) (=> (lstrict_prefix$b ?v0 ?v1) (lstrict_prefix$a (lmap$g ?v2 ?v0) (lmap$g ?v2 ?v1)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_fun$)) (=> (lstrict_prefix$b ?v0 ?v1) (lstrict_prefix$b (lmap$h ?v2 ?v0) (lmap$h ?v2 ?v1)))) :named a13))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_a_fun$)) (=> (lstrict_prefix$ ?v0 ?v1) (lstrict_prefix$b (lmap$ ?v2 ?v0) (lmap$ ?v2 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_b_fun$)) (=> (lstrict_prefix$ ?v0 ?v1) (lstrict_prefix$a (lmap$a ?v2 ?v0) (lmap$a ?v2 ?v1)))) :named a15))
(assert (! (forall ((?v0 A_b_prod$)) (= (pair$ (fst$ ?v0) (snd$ ?v0)) ?v0)) :named a16))
(assert (! (forall ((?v0 Enat$) (?v1 B_a_fun$) (?v2 B_llist$)) (= (ldrop$ ?v0 (lmap$e ?v1 ?v2)) (lmap$e ?v1 (ldrop$a ?v0 ?v2)))) :named a17))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_fun$) (?v2 A_llist$)) (= (ldrop$a ?v0 (lmap$g ?v1 ?v2)) (lmap$g ?v1 (ldrop$ ?v0 ?v2)))) :named a18))
(assert (! (forall ((?v0 Enat$) (?v1 B_b_fun$) (?v2 B_llist$)) (= (ldrop$a ?v0 (lmap$d ?v1 ?v2)) (lmap$d ?v1 (ldrop$a ?v0 ?v2)))) :named a19))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_b_prod_fun$) (?v2 A_llist$)) (= (ldrop$b ?v0 (lmap$f ?v1 ?v2)) (lmap$f ?v1 (ldrop$ ?v0 ?v2)))) :named a20))
(assert (! (forall ((?v0 Enat$) (?v1 B_a_b_prod_fun$) (?v2 B_llist$)) (= (ldrop$b ?v0 (lmap$c ?v1 ?v2)) (lmap$c ?v1 (ldrop$a ?v0 ?v2)))) :named a21))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_prod_a_b_prod_fun$) (?v2 A_b_prod_llist$)) (= (ldrop$b ?v0 (lmap$b ?v1 ?v2)) (lmap$b ?v1 (ldrop$b ?v0 ?v2)))) :named a22))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (ldrop$ ?v0 (lmap$h ?v1 ?v2)) (lmap$h ?v1 (ldrop$ ?v0 ?v2)))) :named a23))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_prod_a_fun$) (?v2 A_b_prod_llist$)) (= (ldrop$ ?v0 (lmap$ ?v1 ?v2)) (lmap$ ?v1 (ldrop$b ?v0 ?v2)))) :named a24))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_prod_b_fun$) (?v2 A_b_prod_llist$)) (= (ldrop$a ?v0 (lmap$a ?v1 ?v2)) (lmap$a ?v1 (ldrop$b ?v0 ?v2)))) :named a25))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_fun$) (?v2 B_llist$)) (= (ldropn$ ?v0 (lmap$d ?v1 ?v2)) (lmap$d ?v1 (ldropn$ ?v0 ?v2)))) :named a26))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_fun$) (?v2 A_llist$)) (= (ldropn$ ?v0 (lmap$g ?v1 ?v2)) (lmap$g ?v1 (ldropn$a ?v0 ?v2)))) :named a27))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_b_prod_fun$) (?v2 B_llist$)) (= (ldropn$b ?v0 (lmap$c ?v1 ?v2)) (lmap$c ?v1 (ldropn$ ?v0 ?v2)))) :named a28))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_a_b_prod_fun$) (?v2 A_b_prod_llist$)) (= (ldropn$b ?v0 (lmap$b ?v1 ?v2)) (lmap$b ?v1 (ldropn$b ?v0 ?v2)))) :named a29))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_b_prod_fun$) (?v2 A_llist$)) (= (ldropn$b ?v0 (lmap$f ?v1 ?v2)) (lmap$f ?v1 (ldropn$a ?v0 ?v2)))) :named a30))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_fun$) (?v2 B_llist$)) (= (ldropn$a ?v0 (lmap$e ?v1 ?v2)) (lmap$e ?v1 (ldropn$ ?v0 ?v2)))) :named a31))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (ldropn$a ?v0 (lmap$h ?v1 ?v2)) (lmap$h ?v1 (ldropn$a ?v0 ?v2)))) :named a32))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_a_fun$) (?v2 A_b_prod_llist$)) (= (ldropn$a ?v0 (lmap$ ?v1 ?v2)) (lmap$ ?v1 (ldropn$b ?v0 ?v2)))) :named a33))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_b_fun$) (?v2 A_b_prod_llist$)) (= (ldropn$ ?v0 (lmap$a ?v1 ?v2)) (lmap$a ?v1 (ldropn$b ?v0 ?v2)))) :named a34))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (= (lmap$d ?v0 (iterates$ ?v0 ?v1)) (iterates$ ?v0 (fun_app$d ?v0 ?v1)))) :named a35))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (lmap$h ?v0 (iterates$a ?v0 ?v1)) (iterates$a ?v0 (fun_app$e ?v0 ?v1)))) :named a36))
(assert (! (= xs$ (lappend$ (ltake$ (llength$ us$) xs$) (lmap$ uu$ vs$))) :named a37))
(assert (! (= ys$ (lappend$a (ltake$a (llength$ us$) ys$) (lmap$a uua$ vs$))) :named a38))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (lnull$ (lmap$d ?v0 ?v1)) (lnull$ ?v1))) :named a39))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (lnull$ (lmap$g ?v0 ?v1)) (lnull$a ?v1))) :named a40))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 B_llist$)) (= (lnull$b (lmap$c ?v0 ?v1)) (lnull$ ?v1))) :named a41))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod_llist$)) (= (lnull$b (lmap$b ?v0 ?v1)) (lnull$b ?v1))) :named a42))
(assert (! (forall ((?v0 A_a_b_prod_fun$) (?v1 A_llist$)) (= (lnull$b (lmap$f ?v0 ?v1)) (lnull$a ?v1))) :named a43))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (lnull$a (lmap$e ?v0 ?v1)) (lnull$ ?v1))) :named a44))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lnull$a (lmap$h ?v0 ?v1)) (lnull$a ?v1))) :named a45))
(assert (! (forall ((?v0 A_b_prod_a_fun$) (?v1 A_b_prod_llist$)) (= (lnull$a (lmap$ ?v0 ?v1)) (lnull$b ?v1))) :named a46))
(assert (! (forall ((?v0 A_b_prod_b_fun$) (?v1 A_b_prod_llist$)) (= (lnull$ (lmap$a ?v0 ?v1)) (lnull$b ?v1))) :named a47))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a48))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a49))
(assert (! (= xs$ (ltake$ (llength$ us$) xs$)) :named a50))
(assert (! (= ys$ (ltake$a (llength$ us$) ys$)) :named a51))
(assert (! (= xs$ (lappend$ (ltake$ (llength$ us$) xs$) (ldrop$ (llength$ us$) xs$))) :named a52))
(check-sat)
;(get-unsat-core)
