; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 618
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))
  (A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun i$ () Nat$)
(declare-fun j$ () Nat$)
(declare-fun xs$ () A_llist$)
(declare-fun nth$ (A_list$) Nat_a_fun$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lmap$ (A_a_fun$ A_llist$) A_llist$)
(declare-fun lnth$ (A_llist$) Nat_a_fun$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun zero$ () Nat$)
(declare-fun ltake$ (Enat$ A_llist$) A_llist$)
(declare-fun compow$ (Nat$) A_a_fun_a_a_fun_fun$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (Nat_a_fun$ Nat$) A$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun fun_app$a (A_a_fun$ A$) A$)
(declare-fun fun_app$b (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$c (A_bool_fun$ A$) Bool)
(declare-fun fun_app$d (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun iterates$ (A_a_fun$ A$) A_llist$)
(declare-fun llist_of$ (A_list$) A_llist$)
(declare-fun ldistinct$ (A_llist$) Bool)
(declare-fun llist_all2$ (A_a_bool_fun_fun$ A_llist$ A_llist$) Bool)
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$) A_llist$)
(assert (! (not (not (= (fun_app$ (lnth$ xs$) i$) (fun_app$ (lnth$ xs$) j$)))) :named a0))
(assert (! (not (= i$ j$)) :named a1))
(assert (! (less$ (enat$ i$) (llength$ xs$)) :named a2))
(assert (! (less$ (enat$ j$) (llength$ xs$)) :named a3))
(assert (! (ldistinct$ xs$) :named a4))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 Nat$)) (= (fun_app$ (lnth$ (iterates$ ?v0 ?v1)) ?v2) (fun_app$a (fun_app$b (compow$ ?v2) ?v0) ?v1))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Enat$) (?v2 A_llist$)) (=> (less$ (enat$ ?v0) ?v1) (= (fun_app$ (lnth$ (ltake$ ?v1 ?v2)) ?v0) (fun_app$ (lnth$ ?v2) ?v0)))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_a_fun$)) (=> (less$ (enat$ ?v0) (llength$ ?v1)) (= (fun_app$ (lnth$ (lmap$ ?v2 ?v1)) ?v0) (fun_app$a ?v2 (fun_app$ (lnth$ ?v1) ?v0))))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 Nat$)) (=> (and (lprefix$ ?v0 ?v1) (less$ (enat$ ?v2) (llength$ ?v0))) (= (fun_app$ (lnth$ ?v0) ?v2) (fun_app$ (lnth$ ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$ (lnth$ (lCons$ ?v0 ?v1)) zero$) ?v0) :pattern ((lCons$ ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 A_list$)) (= (lnth$ (llist_of$ ?v0)) (nth$ ?v0))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 A_bool_fun$) (?v2 A_llist$)) (=> (less$ (enat$ ?v0) (llength$ (ltakeWhile$ ?v1 ?v2))) (= (fun_app$ (lnth$ (ltakeWhile$ ?v1 ?v2)) ?v0) (fun_app$ (lnth$ ?v2) ?v0)))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$ ?v0 (lset$ ?v1)) (exists ((?v2 Nat$)) (and (less$ (enat$ ?v2) (llength$ ?v1)) (= (fun_app$ (lnth$ ?v1) ?v2) ?v0))))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_llist$)) (=> (less$ (enat$ ?v0) (llength$ ?v1)) (= (fun_app$ (lnth$ (lappend$ ?v1 ?v2)) ?v0) (fun_app$ (lnth$ ?v1) ?v0)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 Nat$)) (! (= (fun_app$ (lnth$ (lCons$ ?v0 ?v1)) (suc$ ?v2)) (fun_app$ (lnth$ ?v1) ?v2)) :pattern ((fun_app$ (lnth$ (lCons$ ?v0 ?v1)) (suc$ ?v2))))) :named a14))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (llist_all2$ ?v0 ?v1 ?v2) (and (= (llength$ ?v1) (llength$ ?v2)) (forall ((?v3 Nat$)) (=> (less$ (enat$ ?v3) (llength$ ?v2)) (fun_app$c (fun_app$d ?v0 (fun_app$ (lnth$ ?v1) ?v3)) (fun_app$ (lnth$ ?v2) ?v3))))))) :named a15))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 Nat$)) (=> (and (llist_all2$ ?v0 ?v1 ?v2) (less$ (enat$ ?v3) (llength$ ?v2))) (fun_app$c (fun_app$d ?v0 (fun_app$ (lnth$ ?v1) ?v3)) (fun_app$ (lnth$ ?v2) ?v3)))) :named a16))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a17))
(check-sat)
;(get-unsat-core)
