; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 390
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort C_a_fun$ 0)
(declare-sort C_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort A_a_a_prod_fun$ 0)
(declare-sort A_b_a_prod_fun$ 0)
(declare-sort B_a_b_prod_fun$ 0)
(declare-sort B_a_c_prod_fun$ 0)
(declare-sort B_b_b_prod_fun$ 0)
(declare-sort B_c_b_prod_fun$ 0)
(declare-sort B_c_c_prod_fun$ 0)
(declare-sort C_a_b_prod_fun$ 0)
(declare-sort C_a_c_prod_fun$ 0)
(declare-sort C_b_b_prod_fun$ 0)
(declare-sort C_b_c_prod_fun$ 0)
(declare-sort C_c_c_prod_fun$ 0)
(declare-sort A_b_prod_bool_fun$ 0)
(declare-sort A_c_prod_bool_fun$ 0)
(declare-sort B_b_prod_bool_fun$ 0)
(declare-sort A_a_a_a_prod_fun_fun$ 0)
(declare-sort A_b_a_b_prod_fun_fun$ 0)
(declare-sort A_b_a_c_prod_fun_fun$ 0)
(declare-sort A_b_b_b_prod_fun_fun$ 0)
(declare-sort A_b_c_c_prod_fun_fun$ 0)
(declare-sort A_c_a_b_prod_fun_fun$ 0)
(declare-sort A_c_a_c_prod_fun_fun$ 0)
(declare-sort A_c_b_b_prod_fun_fun$ 0)
(declare-sort A_c_c_c_prod_fun_fun$ 0)
(declare-sort B_a_b_a_prod_fun_fun$ 0)
(declare-sort B_b_a_b_prod_fun_fun$ 0)
(declare-sort B_b_b_b_prod_fun_fun$ 0)
(declare-sort B_b_c_b_prod_fun_fun$ 0)
(declare-sort B_c_b_c_prod_fun_fun$ 0)
(declare-sort C_b_b_b_prod_fun_fun$ 0)
(declare-sort C_c_a_b_prod_fun_fun$ 0)
(declare-sort C_c_a_c_prod_fun_fun$ 0)
(declare-sort C_c_b_b_prod_fun_fun$ 0)
(declare-sort C_c_b_c_prod_fun_fun$ 0)
(declare-sort C_c_c_c_prod_fun_fun$ 0)
(declare-sort A_a_prod_a_a_prod_fun$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-sort A_b_prod_a_c_prod_fun$ 0)
(declare-sort A_b_prod_b_b_prod_fun$ 0)
(declare-sort A_b_prod_c_c_prod_fun$ 0)
(declare-sort A_c_prod_a_b_prod_fun$ 0)
(declare-sort A_c_prod_a_c_prod_fun$ 0)
(declare-sort A_c_prod_b_b_prod_fun$ 0)
(declare-sort A_c_prod_c_c_prod_fun$ 0)
(declare-sort B_a_b_prod_b_prod_fun$ 0)
(declare-sort B_b_a_b_prod_prod_fun$ 0)
(declare-sort B_b_prod_a_b_prod_fun$ 0)
(declare-sort B_b_prod_b_b_prod_fun$ 0)
(declare-sort B_b_prod_c_b_prod_fun$ 0)
(declare-sort B_c_a_c_prod_prod_fun$ 0)
(declare-sort C_a_b_prod_b_prod_fun$ 0)
(declare-sort C_b_prod_b_b_prod_fun$ 0)
(declare-sort C_c_prod_a_b_prod_fun$ 0)
(declare-sort C_c_prod_a_c_prod_fun$ 0)
(declare-sort C_c_prod_b_b_prod_fun$ 0)
(declare-sort C_c_prod_b_c_prod_fun$ 0)
(declare-sort C_c_prod_c_c_prod_fun$ 0)
(declare-sort B_a_b_prod_prod_bool_fun$ 0)
(declare-sort A_b_b_a_b_prod_prod_fun_fun$ 0)
(declare-sort A_b_c_a_c_prod_prod_fun_fun$ 0)
(declare-sort A_b_prod_b_a_b_prod_prod_fun$ 0)
(declare-sort A_b_prod_c_a_c_prod_prod_fun$ 0)
(declare-sort A_c_prod_b_a_b_prod_prod_fun$ 0)
(declare-sort A_c_prod_b_a_c_prod_prod_fun$ 0)
(declare-sort A_b_prod_b_a_b_prod_b_prod_fun_fun$ 0)
(declare-sort A_c_prod_c_a_b_prod_b_prod_fun_fun$ 0)
(declare-sort B_a_b_prod_b_a_b_prod_prod_fun_fun$ 0)
(declare-sort B_a_c_prod_b_a_c_prod_prod_fun_fun$ 0)
(declare-sort C_a_c_prod_b_a_b_prod_prod_fun_fun$ 0)
(declare-sort A_b_prod_a_b_prod_a_b_prod_prod_fun$ 0)
(declare-sort A_c_prod_a_b_prod_a_b_prod_prod_fun$ 0)
(declare-sort A_c_prod_c_prod_a_b_prod_b_prod_fun$ 0)
(declare-sort B_a_b_prod_prod_b_a_b_prod_prod_fun$ 0)
(declare-sort C_a_c_prod_prod_b_a_b_prod_prod_fun$ 0)
(declare-sort A_b_prod_a_b_prod_a_b_prod_a_b_prod_prod_fun_fun$ 0)
(declare-sort A_c_prod_a_c_prod_a_b_prod_a_b_prod_prod_fun_fun$ 0)
(declare-sort A_c_prod_a_c_prod_prod_a_b_prod_a_b_prod_prod_fun$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$) (lCons$ (lhd$ A_b_prod$) (ltl$ A_b_prod_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))
  (C_llist$ (lNil$c) (lCons$c (lhd$c C$) (ltl$c C_llist$)))))
(declare-datatypes () ((A_c_prod$ (pair$a (fst$a A$) (snd$a C$)))))
(declare-codatatypes () ((A_c_prod_llist$ (lNil$d) (lCons$d (lhd$d A_c_prod$) (ltl$d A_c_prod_llist$)))))
(declare-datatypes () ((B_b_prod$ (pair$b (fst$b B$) (snd$b B$)))))
(declare-codatatypes () ((B_b_prod_llist$ (lNil$e) (lCons$e (lhd$e B_b_prod$) (ltl$e B_b_prod_llist$)))))
(declare-datatypes () ((C_c_prod$ (pair$c (fst$c C$) (snd$c C$)))))
(declare-codatatypes () ((C_c_prod_llist$ (lNil$f) (lCons$f (lhd$f C_c_prod$) (ltl$f C_c_prod_llist$)))))
(declare-datatypes () ((B_a_b_prod_prod$ (pair$d (fst$d B$) (snd$d A_b_prod$)))))
(declare-codatatypes () ((B_a_b_prod_prod_llist$ (lNil$g) (lCons$g (lhd$g B_a_b_prod_prod$) (ltl$g B_a_b_prod_prod_llist$)))))
(declare-datatypes () ((C_a_c_prod_prod$ (pair$e (fst$e C$) (snd$e A_c_prod$)))))
(declare-codatatypes () ((C_a_c_prod_prod_llist$ (lNil$h) (lCons$h (lhd$h C_a_c_prod_prod$) (ltl$h C_a_c_prod_prod_llist$)))))
(declare-datatypes () ((A_b_prod_b_prod$ (pair$f (fst$f A_b_prod$) (snd$f B$)))))
(declare-codatatypes () ((A_b_prod_b_prod_llist$ (lNil$i) (lCons$i (lhd$i A_b_prod_b_prod$) (ltl$i A_b_prod_b_prod_llist$)))))
(declare-datatypes () ((A_c_prod_c_prod$ (pair$g (fst$g A_c_prod$) (snd$g C$)))))
(declare-codatatypes () ((A_c_prod_c_prod_llist$ (lNil$j) (lCons$j (lhd$j A_c_prod_c_prod$) (ltl$j A_c_prod_c_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_b_prod_prod$ (pair$h (fst$h A_b_prod$) (snd$h A_b_prod$)))))
(declare-codatatypes () ((A_b_prod_a_b_prod_prod_llist$ (lNil$k) (lCons$k (lhd$k A_b_prod_a_b_prod_prod$) (ltl$k A_b_prod_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_c_prod_a_c_prod_prod$ (pair$i (fst$i A_c_prod$) (snd$i A_c_prod$)))))
(declare-codatatypes () ((A_c_prod_a_c_prod_prod_llist$ (lNil$l) (lCons$l (lhd$l A_c_prod_a_c_prod_prod$) (ltl$l A_c_prod_a_c_prod_prod_llist$)))))
(declare-datatypes () ((B_c_prod$ (pair$j (fst$j B$) (snd$j C$)))))
(declare-codatatypes () ((B_c_prod_llist$ (lNil$m) (lCons$m (lhd$m B_c_prod$) (ltl$m B_c_prod_llist$)))))
(declare-datatypes () ((C_b_prod$ (pair$k (fst$k C$) (snd$k B$)))))
(declare-codatatypes () ((C_b_prod_llist$ (lNil$n) (lCons$n (lhd$n C_b_prod$) (ltl$n C_b_prod_llist$)))))
(declare-datatypes () ((B_a_prod$ (pair$l (fst$l B$) (snd$l A$)))
  (A_a_prod$ (pair$m (fst$m A$) (snd$m A$)))
  (B_a_c_prod_prod$ (pair$n (fst$n B$) (snd$n A_c_prod$)))))
(declare-fun f$ () C_b_fun$)
(declare-fun uu$ () A_c_a_b_prod_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () C_llist$)
(declare-fun uua$ () A_b_prod_a_b_prod_fun$)
(declare-fun uub$ () C_c_fun$)
(declare-fun uuc$ () B_b_fun$)
(declare-fun uud$ () A_a_fun$)
(declare-fun uue$ (A_a_fun$ B_b_fun$) A_b_a_b_prod_fun_fun$)
(declare-fun uuf$ (A_a_fun$ B_c_fun$) A_b_a_c_prod_fun_fun$)
(declare-fun uug$ (A_a_fun$ C_c_fun$) A_c_a_c_prod_fun_fun$)
(declare-fun uuh$ (A_a_fun$ C_b_fun$) A_c_a_b_prod_fun_fun$)
(declare-fun uui$ (C_b_fun$ C_b_fun$) C_c_b_b_prod_fun_fun$)
(declare-fun uuj$ (C_b_fun$ A_c_prod_a_b_prod_fun$) C_a_c_prod_b_a_b_prod_prod_fun_fun$)
(declare-fun uuk$ (A_c_prod_a_b_prod_fun$ C_b_fun$) A_c_prod_c_a_b_prod_b_prod_fun_fun$)
(declare-fun uul$ (A_c_prod_a_b_prod_fun$ A_c_prod_a_b_prod_fun$) A_c_prod_a_c_prod_a_b_prod_a_b_prod_prod_fun_fun$)
(declare-fun uum$ (C_a_fun$ C_b_fun$) C_c_a_b_prod_fun_fun$)
(declare-fun uun$ (A_b_fun$ C_b_fun$) A_c_b_b_prod_fun_fun$)
(declare-fun uuo$ (A_a_fun$) A_b_a_b_prod_fun_fun$)
(declare-fun uup$ (A_a_fun$) A_c_a_c_prod_fun_fun$)
(declare-fun uuq$ (B_a_fun$) B_b_a_b_prod_fun_fun$)
(declare-fun uur$ (C_a_fun$) C_c_a_c_prod_fun_fun$)
(declare-fun uus$ (A_c_fun$) A_c_c_c_prod_fun_fun$)
(declare-fun uut$ (A_b_fun$) A_b_b_b_prod_fun_fun$)
(declare-fun uuu$ (C_b_fun$) C_c_b_c_prod_fun_fun$)
(declare-fun uuv$ (C_b_fun$) C_b_b_b_prod_fun_fun$)
(declare-fun uuw$ (C_c_fun$) C_c_c_c_prod_fun_fun$)
(declare-fun uux$ (B_c_fun$) B_b_c_b_prod_fun_fun$)
(declare-fun uuy$ (A_b_a_b_prod_fun_fun$ A_c_a_b_prod_fun_fun$) A_c_a_b_prod_fun_fun$)
(declare-fun uuz$ (A_c_a_b_prod_fun_fun$ A_c_a_c_prod_fun_fun$) A_c_a_b_prod_fun_fun$)
(declare-fun uva$ (B_b_b_b_prod_fun_fun$ C_c_b_b_prod_fun_fun$) C_c_b_b_prod_fun_fun$)
(declare-fun uvb$ (A_c_a_b_prod_fun_fun$ A_b_a_c_prod_fun_fun$) A_b_a_b_prod_fun_fun$)
(declare-fun uvc$ (C_c_b_b_prod_fun_fun$ C_c_c_c_prod_fun_fun$) C_c_b_b_prod_fun_fun$)
(declare-fun uvd$ (A_c_a_c_prod_fun_fun$ A_c_a_c_prod_fun_fun$) A_c_a_c_prod_fun_fun$)
(declare-fun uve$ (A_c_a_c_prod_fun_fun$ A_b_a_c_prod_fun_fun$) A_b_a_c_prod_fun_fun$)
(declare-fun uvf$ (A_b_a_c_prod_fun_fun$ A_c_a_b_prod_fun_fun$) A_c_a_c_prod_fun_fun$)
(declare-fun uvg$ (A_b_a_c_prod_fun_fun$ A_b_a_b_prod_fun_fun$) A_b_a_c_prod_fun_fun$)
(declare-fun uvh$ (A_b_a_b_prod_fun_fun$ A_b_a_b_prod_fun_fun$) A_b_a_b_prod_fun_fun$)
(declare-fun uvi$ () A_b_a_b_prod_fun_fun$)
(declare-fun uvj$ () B_b_b_b_prod_fun_fun$)
(declare-fun uvk$ () A_c_a_c_prod_fun_fun$)
(declare-fun uvl$ () A_b_prod_b_a_b_prod_b_prod_fun_fun$)
(declare-fun uvm$ () B_a_b_prod_b_a_b_prod_prod_fun_fun$)
(declare-fun uvn$ () A_b_prod_a_b_prod_a_b_prod_a_b_prod_prod_fun_fun$)
(declare-fun uvo$ () B_c_b_c_prod_fun_fun$)
(declare-fun uvp$ () B_a_b_a_prod_fun_fun$)
(declare-fun uvq$ () A_a_a_a_prod_fun_fun$)
(declare-fun uvr$ () B_a_c_prod_b_a_c_prod_prod_fun_fun$)
(declare-fun uvs$ (A_c_prod_a_b_prod_fun$) A_c_a_b_prod_fun_fun$)
(declare-fun uvt$ (C_c_prod_b_b_prod_fun$) C_c_b_b_prod_fun_fun$)
(declare-fun uvu$ (A_c_prod_a_c_prod_fun$) A_c_a_c_prod_fun_fun$)
(declare-fun uvv$ (A_b_prod_a_c_prod_fun$) A_b_a_c_prod_fun_fun$)
(declare-fun uvw$ (A_b_prod_a_b_prod_fun$) A_b_a_b_prod_fun_fun$)
(declare-fun uvx$ (C_a_c_prod_prod_b_a_b_prod_prod_fun$) C_a_c_prod_b_a_b_prod_prod_fun_fun$)
(declare-fun uvy$ (A_b_prod_c_c_prod_fun$) A_b_c_c_prod_fun_fun$)
(declare-fun uvz$ (A_b_prod_b_b_prod_fun$) A_b_b_b_prod_fun_fun$)
(declare-fun uwa$ (A_a_prod_a_a_prod_fun$) A_a_a_a_prod_fun_fun$)
(declare-fun uwb$ (A_b_prod_c_a_c_prod_prod_fun$) A_b_c_a_c_prod_prod_fun_fun$)
(declare-fun uwc$ (A_b_prod_a_c_prod_fun$ A_c_a_b_prod_fun_fun$) A_c_a_c_prod_fun_fun$)
(declare-fun uwd$ (B_a_b_prod_prod_b_a_b_prod_prod_fun$ C_a_c_prod_b_a_b_prod_prod_fun_fun$) C_a_c_prod_b_a_b_prod_prod_fun_fun$)
(declare-fun uwe$ (B_b_prod_b_b_prod_fun$ C_c_b_b_prod_fun_fun$) C_c_b_b_prod_fun_fun$)
(declare-fun uwf$ (A_c_prod_a_b_prod_fun$ A_c_a_c_prod_fun_fun$) A_c_a_b_prod_fun_fun$)
(declare-fun uwg$ (A_c_prod_a_c_prod_fun$ A_c_a_c_prod_fun_fun$) A_c_a_c_prod_fun_fun$)
(declare-fun uwh$ (A_c_prod_a_c_prod_fun$ A_b_a_c_prod_fun_fun$) A_b_a_c_prod_fun_fun$)
(declare-fun uwi$ (A_c_prod_a_b_prod_fun$ A_b_a_c_prod_fun_fun$) A_b_a_b_prod_fun_fun$)
(declare-fun uwj$ (A_b_prod_a_c_prod_fun$ A_b_a_b_prod_fun_fun$) A_b_a_c_prod_fun_fun$)
(declare-fun uwk$ (A_b_prod_a_b_prod_fun$ A_b_a_b_prod_fun_fun$) A_b_a_b_prod_fun_fun$)
(declare-fun uwl$ (A_b_prod_a_b_prod_fun$ A_c_a_b_prod_fun_fun$) A_c_a_b_prod_fun_fun$)
(declare-fun lmap$ (C_b_fun$ C_llist$) B_llist$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun lmap$a (A_c_prod_a_b_prod_fun$ A_c_prod_llist$) A_b_prod_llist$)
(declare-fun lmap$b (A_b_prod_a_b_prod_fun$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun lmap$c (C_c_fun$ C_llist$) C_llist$)
(declare-fun lmap$d (B_b_fun$ B_llist$) B_llist$)
(declare-fun lmap$e (A_a_fun$ A_llist$) A_llist$)
(declare-fun lmap$f (B_c_fun$ B_llist$) C_llist$)
(declare-fun lmap$g (A_b_prod_a_c_prod_fun$ A_b_prod_llist$) A_c_prod_llist$)
(declare-fun lmap$h (A_c_prod_a_c_prod_fun$ A_c_prod_llist$) A_c_prod_llist$)
(declare-fun lmap$i (C_c_prod_b_b_prod_fun$ C_c_prod_llist$) B_b_prod_llist$)
(declare-fun lmap$j (C_a_c_prod_prod_b_a_b_prod_prod_fun$ C_a_c_prod_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun lmap$k (A_c_prod_c_prod_a_b_prod_b_prod_fun$ A_c_prod_c_prod_llist$) A_b_prod_b_prod_llist$)
(declare-fun lmap$l (A_c_prod_a_c_prod_prod_a_b_prod_a_b_prod_prod_fun$ A_c_prod_a_c_prod_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun lmap$m (C_a_fun$ C_llist$) A_llist$)
(declare-fun lmap$n (C_c_prod_a_b_prod_fun$ C_c_prod_llist$) A_b_prod_llist$)
(declare-fun lmap$o (A_b_fun$ A_llist$) B_llist$)
(declare-fun lmap$p (A_c_prod_b_b_prod_fun$ A_c_prod_llist$) B_b_prod_llist$)
(declare-fun lmap$q (B_a_fun$ B_llist$) A_llist$)
(declare-fun lmap$r (B_b_prod_a_b_prod_fun$ B_b_prod_llist$) A_b_prod_llist$)
(declare-fun lmap$s (C_c_prod_a_c_prod_fun$ C_c_prod_llist$) A_c_prod_llist$)
(declare-fun lmap$t (A_c_fun$ A_llist$) C_llist$)
(declare-fun lmap$u (A_c_prod_c_c_prod_fun$ A_c_prod_llist$) C_c_prod_llist$)
(declare-fun lmap$v (A_b_prod_b_b_prod_fun$ A_b_prod_llist$) B_b_prod_llist$)
(declare-fun lmap$w (C_c_prod_b_c_prod_fun$ C_c_prod_llist$) B_c_prod_llist$)
(declare-fun lmap$x (C_b_prod_b_b_prod_fun$ C_b_prod_llist$) B_b_prod_llist$)
(declare-fun lmap$y (C_c_prod_c_c_prod_fun$ C_c_prod_llist$) C_c_prod_llist$)
(declare-fun lmap$z (B_b_prod_c_b_prod_fun$ B_b_prod_llist$) C_b_prod_llist$)
(declare-fun lzip$a (A_llist$ C_llist$) A_c_prod_llist$)
(declare-fun lzip$b (B_llist$ B_llist$) B_b_prod_llist$)
(declare-fun lzip$c (C_llist$ C_llist$) C_c_prod_llist$)
(declare-fun lzip$d (B_llist$ A_b_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun lzip$e (C_llist$ A_c_prod_llist$) C_a_c_prod_prod_llist$)
(declare-fun lzip$f (A_b_prod_llist$ B_llist$) A_b_prod_b_prod_llist$)
(declare-fun lzip$g (A_c_prod_llist$ C_llist$) A_c_prod_c_prod_llist$)
(declare-fun lzip$h (A_b_prod_llist$ A_b_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun lzip$i (A_c_prod_llist$ A_c_prod_llist$) A_c_prod_a_c_prod_prod_llist$)
(declare-fun lzip$j (B_llist$ C_llist$) B_c_prod_llist$)
(declare-fun lzip$k (C_llist$ B_llist$) C_b_prod_llist$)
(declare-fun fun_app$ (C_a_b_prod_fun$ C$) A_b_prod$)
(declare-fun fun_app$a (A_c_a_b_prod_fun_fun$ A$) C_a_b_prod_fun$)
(declare-fun fun_app$b (C_b_fun$ C$) B$)
(declare-fun fun_app$c (A_b_prod_a_b_prod_a_b_prod_prod_fun$ A_b_prod$) A_b_prod_a_b_prod_prod$)
(declare-fun fun_app$d (A_b_prod_a_b_prod_a_b_prod_a_b_prod_prod_fun_fun$ A_b_prod$) A_b_prod_a_b_prod_a_b_prod_prod_fun$)
(declare-fun fun_app$e (B_a_b_prod_b_prod_fun$ B$) A_b_prod_b_prod$)
(declare-fun fun_app$f (A_b_prod_b_a_b_prod_b_prod_fun_fun$ A_b_prod$) B_a_b_prod_b_prod_fun$)
(declare-fun fun_app$g (A_c_prod_b_a_c_prod_prod_fun$ A_c_prod$) B_a_c_prod_prod$)
(declare-fun fun_app$h (B_a_c_prod_b_a_c_prod_prod_fun_fun$ B$) A_c_prod_b_a_c_prod_prod_fun$)
(declare-fun fun_app$i (A_b_prod_b_a_b_prod_prod_fun$ A_b_prod$) B_a_b_prod_prod$)
(declare-fun fun_app$j (B_a_b_prod_b_a_b_prod_prod_fun_fun$ B$) A_b_prod_b_a_b_prod_prod_fun$)
(declare-fun fun_app$k (C_b_c_prod_fun$ C$) B_c_prod$)
(declare-fun fun_app$l (B_c_b_c_prod_fun_fun$ B$) C_b_c_prod_fun$)
(declare-fun fun_app$m (B_b_b_prod_fun$ B$) B_b_prod$)
(declare-fun fun_app$n (B_b_b_b_prod_fun_fun$ B$) B_b_b_prod_fun$)
(declare-fun fun_app$o (A_b_a_prod_fun$ A$) B_a_prod$)
(declare-fun fun_app$p (B_a_b_a_prod_fun_fun$ B$) A_b_a_prod_fun$)
(declare-fun fun_app$q (C_a_c_prod_fun$ C$) A_c_prod$)
(declare-fun fun_app$r (A_c_a_c_prod_fun_fun$ A$) C_a_c_prod_fun$)
(declare-fun fun_app$s (B_a_b_prod_fun$ B$) A_b_prod$)
(declare-fun fun_app$t (A_b_a_b_prod_fun_fun$ A$) B_a_b_prod_fun$)
(declare-fun fun_app$u (A_a_a_prod_fun$ A$) A_a_prod$)
(declare-fun fun_app$v (A_a_a_a_prod_fun_fun$ A$) A_a_a_prod_fun$)
(declare-fun fun_app$w (C_c_c_prod_fun$ C$) C_c_prod$)
(declare-fun fun_app$x (C_c_c_c_prod_fun_fun$ C$) C_c_c_prod_fun$)
(declare-fun fun_app$y (C_c_fun$ C$) C$)
(declare-fun fun_app$z (C_c_b_c_prod_fun_fun$ C$) C_b_c_prod_fun$)
(declare-fun case_prod$ (C_c_b_b_prod_fun_fun$) C_c_prod_b_b_prod_fun$)
(declare-fun fun_app$aa (C_b_b_b_prod_fun_fun$ C$) B_b_b_prod_fun$)
(declare-fun fun_app$ab (C_c_a_c_prod_fun_fun$ C$) C_a_c_prod_fun$)
(declare-fun fun_app$ac (C_a_fun$ C$) A$)
(declare-fun fun_app$ad (B_c_b_prod_fun$ B$) C_b_prod$)
(declare-fun fun_app$ae (B_b_c_b_prod_fun_fun$ B$) B_c_b_prod_fun$)
(declare-fun fun_app$af (B_c_fun$ B$) C$)
(declare-fun fun_app$ag (B_b_a_b_prod_fun_fun$ B$) B_a_b_prod_fun$)
(declare-fun fun_app$ah (B_a_fun$ B$) A$)
(declare-fun fun_app$ai (A_c_c_c_prod_fun_fun$ A$) C_c_c_prod_fun$)
(declare-fun fun_app$aj (A_c_fun$ A$) C$)
(declare-fun fun_app$ak (A_b_b_b_prod_fun_fun$ A$) B_b_b_prod_fun$)
(declare-fun fun_app$al (A_b_fun$ A$) B$)
(declare-fun fun_app$am (A_a_fun$ A$) A$)
(declare-fun fun_app$an (A_c_prod_b_a_b_prod_prod_fun$ A_c_prod$) B_a_b_prod_prod$)
(declare-fun fun_app$ao (C_a_c_prod_b_a_b_prod_prod_fun_fun$ C$) A_c_prod_b_a_b_prod_prod_fun$)
(declare-fun fun_app$ap (C_a_c_prod_prod_b_a_b_prod_prod_fun$ C_a_c_prod_prod$) B_a_b_prod_prod$)
(declare-fun fun_app$aq (C_b_b_prod_fun$ C$) B_b_prod$)
(declare-fun fun_app$ar (C_c_b_b_prod_fun_fun$ C$) C_b_b_prod_fun$)
(declare-fun fun_app$as (C_c_prod_b_b_prod_fun$ C_c_prod$) B_b_prod$)
(declare-fun fun_app$at (A_c_prod_a_c_prod_fun$ A_c_prod$) A_c_prod$)
(declare-fun fun_app$au (A_c_prod_a_b_prod_fun$ A_c_prod$) A_b_prod$)
(declare-fun fun_app$av (B_c_a_c_prod_prod_fun$ B$) C_a_c_prod_prod$)
(declare-fun fun_app$aw (A_b_c_a_c_prod_prod_fun_fun$ A$) B_c_a_c_prod_prod_fun$)
(declare-fun fun_app$ax (A_b_prod_c_a_c_prod_prod_fun$ A_b_prod$) C_a_c_prod_prod$)
(declare-fun fun_app$ay (B_c_c_prod_fun$ B$) C_c_prod$)
(declare-fun fun_app$az (A_b_c_c_prod_fun_fun$ A$) B_c_c_prod_fun$)
(declare-fun fun_app$ba (A_b_prod_c_c_prod_fun$ A_b_prod$) C_c_prod$)
(declare-fun fun_app$bb (A_b_prod_b_b_prod_fun$ A_b_prod$) B_b_prod$)
(declare-fun fun_app$bc (B_a_c_prod_fun$ B$) A_c_prod$)
(declare-fun fun_app$bd (A_b_a_c_prod_fun_fun$ A$) B_a_c_prod_fun$)
(declare-fun fun_app$be (A_b_prod_a_c_prod_fun$ A_b_prod$) A_c_prod$)
(declare-fun fun_app$bf (A_b_prod_a_b_prod_fun$ A_b_prod$) A_b_prod$)
(declare-fun fun_app$bg (A_a_prod_a_a_prod_fun$ A_a_prod$) A_a_prod$)
(declare-fun fun_app$bh (A_c_prod_a_b_prod_a_b_prod_prod_fun$ A_c_prod$) A_b_prod_a_b_prod_prod$)
(declare-fun fun_app$bi (A_c_prod_a_c_prod_a_b_prod_a_b_prod_prod_fun_fun$ A_c_prod$) A_c_prod_a_b_prod_a_b_prod_prod_fun$)
(declare-fun fun_app$bj (C_a_b_prod_b_prod_fun$ C$) A_b_prod_b_prod$)
(declare-fun fun_app$bk (A_c_prod_c_a_b_prod_b_prod_fun_fun$ A_c_prod$) C_a_b_prod_b_prod_fun$)
(declare-fun fun_app$bl (C_c_a_b_prod_fun_fun$ C$) C_a_b_prod_fun$)
(declare-fun fun_app$bm (A_c_b_b_prod_fun_fun$ A$) C_b_b_prod_fun$)
(declare-fun fun_app$bn (B_b_fun$ B$) B$)
(declare-fun fun_app$bo (B_b_prod_b_b_prod_fun$ B_b_prod$) B_b_prod$)
(declare-fun fun_app$bp (B_a_b_prod_prod_b_a_b_prod_prod_fun$ B_a_b_prod_prod$) B_a_b_prod_prod$)
(declare-fun fun_app$bq (C_c_prod_c_c_prod_fun$ C_c_prod$) C_c_prod$)
(declare-fun fun_app$br (B_b_a_b_prod_prod_fun$ B$) B_a_b_prod_prod$)
(declare-fun fun_app$bs (A_b_b_a_b_prod_prod_fun_fun$ A$) B_b_a_b_prod_prod_fun$)
(declare-fun fun_app$bt (B_a_b_prod_prod_bool_fun$ B_a_b_prod_prod$) Bool)
(declare-fun fun_app$bu (B_b_prod_bool_fun$ B_b_prod$) Bool)
(declare-fun fun_app$bv (A_c_prod_bool_fun$ A_c_prod$) Bool)
(declare-fun fun_app$bw (A_b_prod_bool_fun$ A_b_prod$) Bool)
(declare-fun case_prod$a (B_b_b_b_prod_fun_fun$) B_b_prod_b_b_prod_fun$)
(declare-fun case_prod$b (A_c_a_c_prod_fun_fun$) A_c_prod_a_c_prod_fun$)
(declare-fun case_prod$c (A_c_a_b_prod_fun_fun$) A_c_prod_a_b_prod_fun$)
(declare-fun case_prod$d (A_b_a_c_prod_fun_fun$) A_b_prod_a_c_prod_fun$)
(declare-fun case_prod$e (A_b_a_b_prod_fun_fun$) A_b_prod_a_b_prod_fun$)
(declare-fun case_prod$f (C_a_c_prod_b_a_b_prod_prod_fun_fun$) C_a_c_prod_prod_b_a_b_prod_prod_fun$)
(declare-fun case_prod$g (A_c_prod_c_a_b_prod_b_prod_fun_fun$) A_c_prod_c_prod_a_b_prod_b_prod_fun$)
(declare-fun case_prod$h (A_c_prod_a_c_prod_a_b_prod_a_b_prod_prod_fun_fun$) A_c_prod_a_c_prod_prod_a_b_prod_a_b_prod_prod_fun$)
(declare-fun case_prod$i (C_c_a_b_prod_fun_fun$) C_c_prod_a_b_prod_fun$)
(declare-fun case_prod$j (A_c_b_b_prod_fun_fun$) A_c_prod_b_b_prod_fun$)
(declare-fun case_prod$k (B_b_a_b_prod_fun_fun$) B_b_prod_a_b_prod_fun$)
(declare-fun case_prod$l (C_c_a_c_prod_fun_fun$) C_c_prod_a_c_prod_fun$)
(declare-fun case_prod$m (A_c_c_c_prod_fun_fun$) A_c_prod_c_c_prod_fun$)
(declare-fun case_prod$n (A_b_b_b_prod_fun_fun$) A_b_prod_b_b_prod_fun$)
(declare-fun case_prod$o (C_c_b_c_prod_fun_fun$) C_c_prod_b_c_prod_fun$)
(declare-fun case_prod$p (C_b_b_b_prod_fun_fun$) C_b_prod_b_b_prod_fun$)
(declare-fun case_prod$q (C_c_c_c_prod_fun_fun$) C_c_prod_c_c_prod_fun$)
(declare-fun case_prod$r (B_b_c_b_prod_fun_fun$) B_b_prod_c_b_prod_fun$)
(declare-fun case_prod$s (A_b_prod_b_a_b_prod_b_prod_fun_fun$ A_b_prod_b_prod$) A_b_prod_b_prod$)
(declare-fun case_prod$t (B_a_b_prod_b_a_b_prod_prod_fun_fun$) B_a_b_prod_prod_b_a_b_prod_prod_fun$)
(declare-fun case_prod$u (A_b_prod_a_b_prod_a_b_prod_a_b_prod_prod_fun_fun$ A_b_prod_a_b_prod_prod$) A_b_prod_a_b_prod_prod$)
(declare-fun case_prod$v (B_c_b_c_prod_fun_fun$ B_c_prod$) B_c_prod$)
(declare-fun case_prod$w (B_a_b_a_prod_fun_fun$ B_a_prod$) B_a_prod$)
(declare-fun case_prod$x (A_a_a_a_prod_fun_fun$) A_a_prod_a_a_prod_fun$)
(declare-fun case_prod$y (B_a_c_prod_b_a_c_prod_prod_fun_fun$ B_a_c_prod_prod$) B_a_c_prod_prod$)
(declare-fun case_prod$z (A_b_c_c_prod_fun_fun$) A_b_prod_c_c_prod_fun$)
(declare-fun case_prod$aa (A_b_c_a_c_prod_prod_fun_fun$) A_b_prod_c_a_c_prod_prod_fun$)
(declare-fun case_prod$ab (A_b_b_a_b_prod_prod_fun_fun$) A_b_prod_b_a_b_prod_prod_fun$)
(assert (! (forall ((?v0 A$) (?v1 C$)) (! (= (fun_app$ (fun_app$a uu$ ?v0) ?v1) (pair$ ?v0 (fun_app$b f$ ?v1))) :pattern ((fun_app$ (fun_app$a uu$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$)) (! (= (fun_app$c (fun_app$d uvn$ ?v0) ?v1) (pair$h ?v0 ?v1)) :pattern ((fun_app$c (fun_app$d uvn$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A_b_prod$) (?v1 B$)) (! (= (fun_app$e (fun_app$f uvl$ ?v0) ?v1) (pair$f ?v0 ?v1)) :pattern ((fun_app$e (fun_app$f uvl$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 B$) (?v1 A_c_prod$)) (! (= (fun_app$g (fun_app$h uvr$ ?v0) ?v1) (pair$n ?v0 ?v1)) :pattern ((fun_app$g (fun_app$h uvr$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 B$) (?v1 A_b_prod$)) (! (= (fun_app$i (fun_app$j uvm$ ?v0) ?v1) (pair$d ?v0 ?v1)) :pattern ((fun_app$i (fun_app$j uvm$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 B$) (?v1 C$)) (! (= (fun_app$k (fun_app$l uvo$ ?v0) ?v1) (pair$j ?v0 ?v1)) :pattern ((fun_app$k (fun_app$l uvo$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$m (fun_app$n uvj$ ?v0) ?v1) (pair$b ?v0 ?v1)) :pattern ((fun_app$m (fun_app$n uvj$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 B$) (?v1 A$)) (! (= (fun_app$o (fun_app$p uvp$ ?v0) ?v1) (pair$l ?v0 ?v1)) :pattern ((fun_app$o (fun_app$p uvp$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 C$)) (! (= (fun_app$q (fun_app$r uvk$ ?v0) ?v1) (pair$a ?v0 ?v1)) :pattern ((fun_app$q (fun_app$r uvk$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 B$)) (! (= (fun_app$s (fun_app$t uvi$ ?v0) ?v1) (pair$ ?v0 ?v1)) :pattern ((fun_app$s (fun_app$t uvi$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$u (fun_app$v uvq$ ?v0) ?v1) (pair$m ?v0 ?v1)) :pattern ((fun_app$u (fun_app$v uvq$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 C_c_fun$) (?v1 C$) (?v2 C$)) (! (= (fun_app$w (fun_app$x (uuw$ ?v0) ?v1) ?v2) (pair$c (fun_app$y ?v0 ?v1) ?v2)) :pattern ((fun_app$w (fun_app$x (uuw$ ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C$) (?v2 C$)) (! (= (fun_app$k (fun_app$z (uuu$ ?v0) ?v1) ?v2) (pair$j (fun_app$b ?v0 ?v1) ?v2)) :pattern ((fun_app$k (fun_app$z (uuu$ ?v0) ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C$) (?v2 B$)) (! (= (fun_app$m (fun_app$aa (uuv$ ?v0) ?v1) ?v2) (pair$b (fun_app$b ?v0 ?v1) ?v2)) :pattern ((fun_app$m (fun_app$aa (uuv$ ?v0) ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C$) (?v2 C$)) (! (= (fun_app$q (fun_app$ab (uur$ ?v0) ?v1) ?v2) (pair$a (fun_app$ac ?v0 ?v1) ?v2)) :pattern ((fun_app$q (fun_app$ab (uur$ ?v0) ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 B_c_fun$) (?v1 B$) (?v2 B$)) (! (= (fun_app$ad (fun_app$ae (uux$ ?v0) ?v1) ?v2) (pair$k (fun_app$af ?v0 ?v1) ?v2)) :pattern ((fun_app$ad (fun_app$ae (uux$ ?v0) ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B$) (?v2 B$)) (! (= (fun_app$s (fun_app$ag (uuq$ ?v0) ?v1) ?v2) (pair$ (fun_app$ah ?v0 ?v1) ?v2)) :pattern ((fun_app$s (fun_app$ag (uuq$ ?v0) ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 A_c_fun$) (?v1 A$) (?v2 C$)) (! (= (fun_app$w (fun_app$ai (uus$ ?v0) ?v1) ?v2) (pair$c (fun_app$aj ?v0 ?v1) ?v2)) :pattern ((fun_app$w (fun_app$ai (uus$ ?v0) ?v1) ?v2)))) :named a17))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$m (fun_app$ak (uut$ ?v0) ?v1) ?v2) (pair$b (fun_app$al ?v0 ?v1) ?v2)) :pattern ((fun_app$m (fun_app$ak (uut$ ?v0) ?v1) ?v2)))) :named a18))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 C$)) (! (= (fun_app$q (fun_app$r (uup$ ?v0) ?v1) ?v2) (pair$a (fun_app$am ?v0 ?v1) ?v2)) :pattern ((fun_app$q (fun_app$r (uup$ ?v0) ?v1) ?v2)))) :named a19))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$s (fun_app$t (uuo$ ?v0) ?v1) ?v2) (pair$ (fun_app$am ?v0 ?v1) ?v2)) :pattern ((fun_app$s (fun_app$t (uuo$ ?v0) ?v1) ?v2)))) :named a20))
(assert (! (forall ((?v0 C_a_c_prod_prod_b_a_b_prod_prod_fun$) (?v1 C$) (?v2 A_c_prod$)) (! (= (fun_app$an (fun_app$ao (uvx$ ?v0) ?v1) ?v2) (fun_app$ap ?v0 (pair$e ?v1 ?v2))) :pattern ((fun_app$an (fun_app$ao (uvx$ ?v0) ?v1) ?v2)))) :named a21))
(assert (! (forall ((?v0 C_c_prod_b_b_prod_fun$) (?v1 C$) (?v2 C$)) (! (= (fun_app$aq (fun_app$ar (uvt$ ?v0) ?v1) ?v2) (fun_app$as ?v0 (pair$c ?v1 ?v2))) :pattern ((fun_app$aq (fun_app$ar (uvt$ ?v0) ?v1) ?v2)))) :named a22))
(assert (! (forall ((?v0 A_c_prod_a_c_prod_fun$) (?v1 A$) (?v2 C$)) (! (= (fun_app$q (fun_app$r (uvu$ ?v0) ?v1) ?v2) (fun_app$at ?v0 (pair$a ?v1 ?v2))) :pattern ((fun_app$q (fun_app$r (uvu$ ?v0) ?v1) ?v2)))) :named a23))
(assert (! (forall ((?v0 A_c_prod_a_b_prod_fun$) (?v1 A$) (?v2 C$)) (! (= (fun_app$ (fun_app$a (uvs$ ?v0) ?v1) ?v2) (fun_app$au ?v0 (pair$a ?v1 ?v2))) :pattern ((fun_app$ (fun_app$a (uvs$ ?v0) ?v1) ?v2)))) :named a24))
(assert (! (forall ((?v0 A_b_prod_c_a_c_prod_prod_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$av (fun_app$aw (uwb$ ?v0) ?v1) ?v2) (fun_app$ax ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$av (fun_app$aw (uwb$ ?v0) ?v1) ?v2)))) :named a25))
(assert (! (forall ((?v0 A_b_prod_c_c_prod_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$ay (fun_app$az (uvy$ ?v0) ?v1) ?v2) (fun_app$ba ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$ay (fun_app$az (uvy$ ?v0) ?v1) ?v2)))) :named a26))
(assert (! (forall ((?v0 A_b_prod_b_b_prod_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$m (fun_app$ak (uvz$ ?v0) ?v1) ?v2) (fun_app$bb ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$m (fun_app$ak (uvz$ ?v0) ?v1) ?v2)))) :named a27))
(assert (! (forall ((?v0 A_b_prod_a_c_prod_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$bc (fun_app$bd (uvv$ ?v0) ?v1) ?v2) (fun_app$be ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$bc (fun_app$bd (uvv$ ?v0) ?v1) ?v2)))) :named a28))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$s (fun_app$t (uvw$ ?v0) ?v1) ?v2) (fun_app$bf ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$s (fun_app$t (uvw$ ?v0) ?v1) ?v2)))) :named a29))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$u (fun_app$v (uwa$ ?v0) ?v1) ?v2) (fun_app$bg ?v0 (pair$m ?v1 ?v2))) :pattern ((fun_app$u (fun_app$v (uwa$ ?v0) ?v1) ?v2)))) :named a30))
(assert (! (forall ((?v0 A_c_prod_a_b_prod_fun$) (?v1 A_c_prod_a_b_prod_fun$) (?v2 A_c_prod$) (?v3 A_c_prod$)) (! (= (fun_app$bh (fun_app$bi (uul$ ?v0 ?v1) ?v2) ?v3) (pair$h (fun_app$au ?v0 ?v2) (fun_app$au ?v1 ?v3))) :pattern ((fun_app$bh (fun_app$bi (uul$ ?v0 ?v1) ?v2) ?v3)))) :named a31))
(assert (! (forall ((?v0 A_c_prod_a_b_prod_fun$) (?v1 C_b_fun$) (?v2 A_c_prod$) (?v3 C$)) (! (= (fun_app$bj (fun_app$bk (uuk$ ?v0 ?v1) ?v2) ?v3) (pair$f (fun_app$au ?v0 ?v2) (fun_app$b ?v1 ?v3))) :pattern ((fun_app$bj (fun_app$bk (uuk$ ?v0 ?v1) ?v2) ?v3)))) :named a32))
(assert (! (forall ((?v0 C_b_fun$) (?v1 A_c_prod_a_b_prod_fun$) (?v2 C$) (?v3 A_c_prod$)) (! (= (fun_app$an (fun_app$ao (uuj$ ?v0 ?v1) ?v2) ?v3) (pair$d (fun_app$b ?v0 ?v2) (fun_app$au ?v1 ?v3))) :pattern ((fun_app$an (fun_app$ao (uuj$ ?v0 ?v1) ?v2) ?v3)))) :named a33))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_b_fun$) (?v2 C$) (?v3 C$)) (! (= (fun_app$aq (fun_app$ar (uui$ ?v0 ?v1) ?v2) ?v3) (pair$b (fun_app$b ?v0 ?v2) (fun_app$b ?v1 ?v3))) :pattern ((fun_app$aq (fun_app$ar (uui$ ?v0 ?v1) ?v2) ?v3)))) :named a34))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_b_fun$) (?v2 C$) (?v3 C$)) (! (= (fun_app$ (fun_app$bl (uum$ ?v0 ?v1) ?v2) ?v3) (pair$ (fun_app$ac ?v0 ?v2) (fun_app$b ?v1 ?v3))) :pattern ((fun_app$ (fun_app$bl (uum$ ?v0 ?v1) ?v2) ?v3)))) :named a35))
(assert (! (forall ((?v0 A_b_fun$) (?v1 C_b_fun$) (?v2 A$) (?v3 C$)) (! (= (fun_app$aq (fun_app$bm (uun$ ?v0 ?v1) ?v2) ?v3) (pair$b (fun_app$al ?v0 ?v2) (fun_app$b ?v1 ?v3))) :pattern ((fun_app$aq (fun_app$bm (uun$ ?v0 ?v1) ?v2) ?v3)))) :named a36))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_c_fun$) (?v2 A$) (?v3 C$)) (! (= (fun_app$q (fun_app$r (uug$ ?v0 ?v1) ?v2) ?v3) (pair$a (fun_app$am ?v0 ?v2) (fun_app$y ?v1 ?v3))) :pattern ((fun_app$q (fun_app$r (uug$ ?v0 ?v1) ?v2) ?v3)))) :named a37))
(assert (! (forall ((?v0 A_a_fun$) (?v1 C_b_fun$) (?v2 A$) (?v3 C$)) (! (= (fun_app$ (fun_app$a (uuh$ ?v0 ?v1) ?v2) ?v3) (pair$ (fun_app$am ?v0 ?v2) (fun_app$b ?v1 ?v3))) :pattern ((fun_app$ (fun_app$a (uuh$ ?v0 ?v1) ?v2) ?v3)))) :named a38))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_c_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$bc (fun_app$bd (uuf$ ?v0 ?v1) ?v2) ?v3) (pair$a (fun_app$am ?v0 ?v2) (fun_app$af ?v1 ?v3))) :pattern ((fun_app$bc (fun_app$bd (uuf$ ?v0 ?v1) ?v2) ?v3)))) :named a39))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$s (fun_app$t (uue$ ?v0 ?v1) ?v2) ?v3) (pair$ (fun_app$am ?v0 ?v2) (fun_app$bn ?v1 ?v3))) :pattern ((fun_app$s (fun_app$t (uue$ ?v0 ?v1) ?v2) ?v3)))) :named a40))
(assert (! (forall ((?v0 C_c_b_b_prod_fun_fun$) (?v1 C_c_c_c_prod_fun_fun$) (?v2 C$) (?v3 C$)) (! (= (fun_app$aq (fun_app$ar (uvc$ ?v0 ?v1) ?v2) ?v3) (fun_app$as (case_prod$ ?v0) (fun_app$w (fun_app$x ?v1 ?v2) ?v3))) :pattern ((fun_app$aq (fun_app$ar (uvc$ ?v0 ?v1) ?v2) ?v3)))) :named a41))
(assert (! (forall ((?v0 B_b_b_b_prod_fun_fun$) (?v1 C_c_b_b_prod_fun_fun$) (?v2 C$) (?v3 C$)) (! (= (fun_app$aq (fun_app$ar (uva$ ?v0 ?v1) ?v2) ?v3) (fun_app$bo (case_prod$a ?v0) (fun_app$aq (fun_app$ar ?v1 ?v2) ?v3))) :pattern ((fun_app$aq (fun_app$ar (uva$ ?v0 ?v1) ?v2) ?v3)))) :named a42))
(assert (! (forall ((?v0 A_c_a_c_prod_fun_fun$) (?v1 A_c_a_c_prod_fun_fun$) (?v2 A$) (?v3 C$)) (! (= (fun_app$q (fun_app$r (uvd$ ?v0 ?v1) ?v2) ?v3) (fun_app$at (case_prod$b ?v0) (fun_app$q (fun_app$r ?v1 ?v2) ?v3))) :pattern ((fun_app$q (fun_app$r (uvd$ ?v0 ?v1) ?v2) ?v3)))) :named a43))
(assert (! (forall ((?v0 A_c_a_c_prod_fun_fun$) (?v1 A_b_a_c_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$bc (fun_app$bd (uve$ ?v0 ?v1) ?v2) ?v3) (fun_app$at (case_prod$b ?v0) (fun_app$bc (fun_app$bd ?v1 ?v2) ?v3))) :pattern ((fun_app$bc (fun_app$bd (uve$ ?v0 ?v1) ?v2) ?v3)))) :named a44))
(assert (! (forall ((?v0 A_c_a_b_prod_fun_fun$) (?v1 A_c_a_c_prod_fun_fun$) (?v2 A$) (?v3 C$)) (! (= (fun_app$ (fun_app$a (uuz$ ?v0 ?v1) ?v2) ?v3) (fun_app$au (case_prod$c ?v0) (fun_app$q (fun_app$r ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uuz$ ?v0 ?v1) ?v2) ?v3)))) :named a45))
(assert (! (forall ((?v0 A_c_a_b_prod_fun_fun$) (?v1 A_b_a_c_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$s (fun_app$t (uvb$ ?v0 ?v1) ?v2) ?v3) (fun_app$au (case_prod$c ?v0) (fun_app$bc (fun_app$bd ?v1 ?v2) ?v3))) :pattern ((fun_app$s (fun_app$t (uvb$ ?v0 ?v1) ?v2) ?v3)))) :named a46))
(assert (! (forall ((?v0 A_b_a_c_prod_fun_fun$) (?v1 A_c_a_b_prod_fun_fun$) (?v2 A$) (?v3 C$)) (! (= (fun_app$q (fun_app$r (uvf$ ?v0 ?v1) ?v2) ?v3) (fun_app$be (case_prod$d ?v0) (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$q (fun_app$r (uvf$ ?v0 ?v1) ?v2) ?v3)))) :named a47))
(assert (! (forall ((?v0 A_b_a_c_prod_fun_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$bc (fun_app$bd (uvg$ ?v0 ?v1) ?v2) ?v3) (fun_app$be (case_prod$d ?v0) (fun_app$s (fun_app$t ?v1 ?v2) ?v3))) :pattern ((fun_app$bc (fun_app$bd (uvg$ ?v0 ?v1) ?v2) ?v3)))) :named a48))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$) (?v1 A_c_a_b_prod_fun_fun$) (?v2 A$) (?v3 C$)) (! (= (fun_app$ (fun_app$a (uuy$ ?v0 ?v1) ?v2) ?v3) (fun_app$bf (case_prod$e ?v0) (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uuy$ ?v0 ?v1) ?v2) ?v3)))) :named a49))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$s (fun_app$t (uvh$ ?v0 ?v1) ?v2) ?v3) (fun_app$bf (case_prod$e ?v0) (fun_app$s (fun_app$t ?v1 ?v2) ?v3))) :pattern ((fun_app$s (fun_app$t (uvh$ ?v0 ?v1) ?v2) ?v3)))) :named a50))
(assert (! (forall ((?v0 B_a_b_prod_prod_b_a_b_prod_prod_fun$) (?v1 C_a_c_prod_b_a_b_prod_prod_fun_fun$) (?v2 C$) (?v3 A_c_prod$)) (! (= (fun_app$an (fun_app$ao (uwd$ ?v0 ?v1) ?v2) ?v3) (fun_app$bp ?v0 (fun_app$an (fun_app$ao ?v1 ?v2) ?v3))) :pattern ((fun_app$an (fun_app$ao (uwd$ ?v0 ?v1) ?v2) ?v3)))) :named a51))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_fun$) (?v1 C_c_b_b_prod_fun_fun$) (?v2 C$) (?v3 C$)) (! (= (fun_app$aq (fun_app$ar (uwe$ ?v0 ?v1) ?v2) ?v3) (fun_app$bo ?v0 (fun_app$aq (fun_app$ar ?v1 ?v2) ?v3))) :pattern ((fun_app$aq (fun_app$ar (uwe$ ?v0 ?v1) ?v2) ?v3)))) :named a52))
(assert (! (forall ((?v0 A_c_prod_a_c_prod_fun$) (?v1 A_c_a_c_prod_fun_fun$) (?v2 A$) (?v3 C$)) (! (= (fun_app$q (fun_app$r (uwg$ ?v0 ?v1) ?v2) ?v3) (fun_app$at ?v0 (fun_app$q (fun_app$r ?v1 ?v2) ?v3))) :pattern ((fun_app$q (fun_app$r (uwg$ ?v0 ?v1) ?v2) ?v3)))) :named a53))
(assert (! (forall ((?v0 A_c_prod_a_c_prod_fun$) (?v1 A_b_a_c_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$bc (fun_app$bd (uwh$ ?v0 ?v1) ?v2) ?v3) (fun_app$at ?v0 (fun_app$bc (fun_app$bd ?v1 ?v2) ?v3))) :pattern ((fun_app$bc (fun_app$bd (uwh$ ?v0 ?v1) ?v2) ?v3)))) :named a54))
(assert (! (forall ((?v0 A_c_prod_a_b_prod_fun$) (?v1 A_c_a_c_prod_fun_fun$) (?v2 A$) (?v3 C$)) (! (= (fun_app$ (fun_app$a (uwf$ ?v0 ?v1) ?v2) ?v3) (fun_app$au ?v0 (fun_app$q (fun_app$r ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uwf$ ?v0 ?v1) ?v2) ?v3)))) :named a55))
(assert (! (forall ((?v0 A_c_prod_a_b_prod_fun$) (?v1 A_b_a_c_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$s (fun_app$t (uwi$ ?v0 ?v1) ?v2) ?v3) (fun_app$au ?v0 (fun_app$bc (fun_app$bd ?v1 ?v2) ?v3))) :pattern ((fun_app$s (fun_app$t (uwi$ ?v0 ?v1) ?v2) ?v3)))) :named a56))
(assert (! (forall ((?v0 A_b_prod_a_c_prod_fun$) (?v1 A_c_a_b_prod_fun_fun$) (?v2 A$) (?v3 C$)) (! (= (fun_app$q (fun_app$r (uwc$ ?v0 ?v1) ?v2) ?v3) (fun_app$be ?v0 (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$q (fun_app$r (uwc$ ?v0 ?v1) ?v2) ?v3)))) :named a57))
(assert (! (forall ((?v0 A_b_prod_a_c_prod_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$bc (fun_app$bd (uwj$ ?v0 ?v1) ?v2) ?v3) (fun_app$be ?v0 (fun_app$s (fun_app$t ?v1 ?v2) ?v3))) :pattern ((fun_app$bc (fun_app$bd (uwj$ ?v0 ?v1) ?v2) ?v3)))) :named a58))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_c_a_b_prod_fun_fun$) (?v2 A$) (?v3 C$)) (! (= (fun_app$ (fun_app$a (uwl$ ?v0 ?v1) ?v2) ?v3) (fun_app$bf ?v0 (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uwl$ ?v0 ?v1) ?v2) ?v3)))) :named a59))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$s (fun_app$t (uwk$ ?v0 ?v1) ?v2) ?v3) (fun_app$bf ?v0 (fun_app$s (fun_app$t ?v1 ?v2) ?v3))) :pattern ((fun_app$s (fun_app$t (uwk$ ?v0 ?v1) ?v2) ?v3)))) :named a60))
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$bf uua$ ?v0) ?v0) :pattern ((fun_app$bf uua$ ?v0)))) :named a61))
(assert (! (forall ((?v0 C$)) (! (= (fun_app$y uub$ ?v0) ?v0) :pattern ((fun_app$y uub$ ?v0)))) :named a62))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$bn uuc$ ?v0) ?v0) :pattern ((fun_app$bn uuc$ ?v0)))) :named a63))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$am uud$ ?v0) ?v0) :pattern ((fun_app$am uud$ ?v0)))) :named a64))
(assert (! (not (= (lzip$ xs$ (lmap$ f$ ys$)) (lmap$a (case_prod$c uu$) (lzip$a xs$ ys$)))) :named a65))
(assert (! (forall ((?v0 A_b_prod_llist$)) (= (lmap$b uua$ ?v0) ?v0)) :named a66))
(assert (! (forall ((?v0 C_llist$)) (= (lmap$c uub$ ?v0) ?v0)) :named a67))
(assert (! (forall ((?v0 B_llist$)) (= (lmap$d uuc$ ?v0) ?v0)) :named a68))
(assert (! (forall ((?v0 A_llist$)) (= (lmap$e uud$ ?v0) ?v0)) :named a69))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (lzip$ (lmap$e ?v0 ?v1) (lmap$d ?v2 ?v3)) (lmap$b (case_prod$e (uue$ ?v0 ?v2)) (lzip$ ?v1 ?v3)))) :named a70))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 B_c_fun$) (?v3 B_llist$)) (= (lzip$a (lmap$e ?v0 ?v1) (lmap$f ?v2 ?v3)) (lmap$g (case_prod$d (uuf$ ?v0 ?v2)) (lzip$ ?v1 ?v3)))) :named a71))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 C_c_fun$) (?v3 C_llist$)) (= (lzip$a (lmap$e ?v0 ?v1) (lmap$c ?v2 ?v3)) (lmap$h (case_prod$b (uug$ ?v0 ?v2)) (lzip$a ?v1 ?v3)))) :named a72))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 C_b_fun$) (?v3 C_llist$)) (= (lzip$ (lmap$e ?v0 ?v1) (lmap$ ?v2 ?v3)) (lmap$a (case_prod$c (uuh$ ?v0 ?v2)) (lzip$a ?v1 ?v3)))) :named a73))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_llist$) (?v2 C_b_fun$) (?v3 C_llist$)) (= (lzip$b (lmap$ ?v0 ?v1) (lmap$ ?v2 ?v3)) (lmap$i (case_prod$ (uui$ ?v0 ?v2)) (lzip$c ?v1 ?v3)))) :named a74))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_llist$) (?v2 A_c_prod_a_b_prod_fun$) (?v3 A_c_prod_llist$)) (= (lzip$d (lmap$ ?v0 ?v1) (lmap$a ?v2 ?v3)) (lmap$j (case_prod$f (uuj$ ?v0 ?v2)) (lzip$e ?v1 ?v3)))) :named a75))
(assert (! (forall ((?v0 A_c_prod_a_b_prod_fun$) (?v1 A_c_prod_llist$) (?v2 C_b_fun$) (?v3 C_llist$)) (= (lzip$f (lmap$a ?v0 ?v1) (lmap$ ?v2 ?v3)) (lmap$k (case_prod$g (uuk$ ?v0 ?v2)) (lzip$g ?v1 ?v3)))) :named a76))
(assert (! (forall ((?v0 A_c_prod_a_b_prod_fun$) (?v1 A_c_prod_llist$) (?v2 A_c_prod_a_b_prod_fun$) (?v3 A_c_prod_llist$)) (= (lzip$h (lmap$a ?v0 ?v1) (lmap$a ?v2 ?v3)) (lmap$l (case_prod$h (uul$ ?v0 ?v2)) (lzip$i ?v1 ?v3)))) :named a77))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_llist$) (?v2 C_b_fun$) (?v3 C_llist$)) (= (lzip$ (lmap$m ?v0 ?v1) (lmap$ ?v2 ?v3)) (lmap$n (case_prod$i (uum$ ?v0 ?v2)) (lzip$c ?v1 ?v3)))) :named a78))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$) (?v2 C_b_fun$) (?v3 C_llist$)) (= (lzip$b (lmap$o ?v0 ?v1) (lmap$ ?v2 ?v3)) (lmap$p (case_prod$j (uun$ ?v0 ?v2)) (lzip$a ?v1 ?v3)))) :named a79))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 B_llist$)) (= (lzip$ (lmap$e ?v0 ?v1) ?v2) (lmap$b (case_prod$e (uuo$ ?v0)) (lzip$ ?v1 ?v2)))) :named a80))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 C_llist$)) (= (lzip$a (lmap$e ?v0 ?v1) ?v2) (lmap$h (case_prod$b (uup$ ?v0)) (lzip$a ?v1 ?v2)))) :named a81))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$) (?v2 B_llist$)) (= (lzip$ (lmap$q ?v0 ?v1) ?v2) (lmap$r (case_prod$k (uuq$ ?v0)) (lzip$b ?v1 ?v2)))) :named a82))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_llist$) (?v2 C_llist$)) (= (lzip$a (lmap$m ?v0 ?v1) ?v2) (lmap$s (case_prod$l (uur$ ?v0)) (lzip$c ?v1 ?v2)))) :named a83))
(assert (! (forall ((?v0 A_c_fun$) (?v1 A_llist$) (?v2 C_llist$)) (= (lzip$c (lmap$t ?v0 ?v1) ?v2) (lmap$u (case_prod$m (uus$ ?v0)) (lzip$a ?v1 ?v2)))) :named a84))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$) (?v2 B_llist$)) (= (lzip$b (lmap$o ?v0 ?v1) ?v2) (lmap$v (case_prod$n (uut$ ?v0)) (lzip$ ?v1 ?v2)))) :named a85))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_llist$) (?v2 C_llist$)) (= (lzip$j (lmap$ ?v0 ?v1) ?v2) (lmap$w (case_prod$o (uuu$ ?v0)) (lzip$c ?v1 ?v2)))) :named a86))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_llist$) (?v2 B_llist$)) (= (lzip$b (lmap$ ?v0 ?v1) ?v2) (lmap$x (case_prod$p (uuv$ ?v0)) (lzip$k ?v1 ?v2)))) :named a87))
(assert (! (forall ((?v0 C_c_fun$) (?v1 C_llist$) (?v2 C_llist$)) (= (lzip$c (lmap$c ?v0 ?v1) ?v2) (lmap$y (case_prod$q (uuw$ ?v0)) (lzip$c ?v1 ?v2)))) :named a88))
(assert (! (forall ((?v0 B_c_fun$) (?v1 B_llist$) (?v2 B_llist$)) (= (lzip$k (lmap$f ?v0 ?v1) ?v2) (lmap$z (case_prod$r (uux$ ?v0)) (lzip$b ?v1 ?v2)))) :named a89))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$) (?v1 A_c_a_b_prod_fun_fun$) (?v2 A_c_prod$)) (= (fun_app$bf (case_prod$e ?v0) (fun_app$au (case_prod$c ?v1) ?v2)) (fun_app$au (case_prod$c (uuy$ ?v0 ?v1)) ?v2))) :named a90))
(assert (! (forall ((?v0 A_c_a_b_prod_fun_fun$) (?v1 A_c_a_c_prod_fun_fun$) (?v2 A_c_prod$)) (= (fun_app$au (case_prod$c ?v0) (fun_app$at (case_prod$b ?v1) ?v2)) (fun_app$au (case_prod$c (uuz$ ?v0 ?v1)) ?v2))) :named a91))
(assert (! (forall ((?v0 B_b_b_b_prod_fun_fun$) (?v1 C_c_b_b_prod_fun_fun$) (?v2 C_c_prod$)) (= (fun_app$bo (case_prod$a ?v0) (fun_app$as (case_prod$ ?v1) ?v2)) (fun_app$as (case_prod$ (uva$ ?v0 ?v1)) ?v2))) :named a92))
(assert (! (forall ((?v0 A_c_a_b_prod_fun_fun$) (?v1 A_b_a_c_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$au (case_prod$c ?v0) (fun_app$be (case_prod$d ?v1) ?v2)) (fun_app$bf (case_prod$e (uvb$ ?v0 ?v1)) ?v2))) :named a93))
(assert (! (forall ((?v0 C_c_b_b_prod_fun_fun$) (?v1 C_c_c_c_prod_fun_fun$) (?v2 C_c_prod$)) (= (fun_app$as (case_prod$ ?v0) (fun_app$bq (case_prod$q ?v1) ?v2)) (fun_app$as (case_prod$ (uvc$ ?v0 ?v1)) ?v2))) :named a94))
(assert (! (forall ((?v0 A_c_a_c_prod_fun_fun$) (?v1 A_c_a_c_prod_fun_fun$) (?v2 A_c_prod$)) (= (fun_app$at (case_prod$b ?v0) (fun_app$at (case_prod$b ?v1) ?v2)) (fun_app$at (case_prod$b (uvd$ ?v0 ?v1)) ?v2))) :named a95))
(assert (! (forall ((?v0 A_c_a_c_prod_fun_fun$) (?v1 A_b_a_c_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$at (case_prod$b ?v0) (fun_app$be (case_prod$d ?v1) ?v2)) (fun_app$be (case_prod$d (uve$ ?v0 ?v1)) ?v2))) :named a96))
(assert (! (forall ((?v0 A_b_a_c_prod_fun_fun$) (?v1 A_c_a_b_prod_fun_fun$) (?v2 A_c_prod$)) (= (fun_app$be (case_prod$d ?v0) (fun_app$au (case_prod$c ?v1) ?v2)) (fun_app$at (case_prod$b (uvf$ ?v0 ?v1)) ?v2))) :named a97))
(assert (! (forall ((?v0 A_b_a_c_prod_fun_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$be (case_prod$d ?v0) (fun_app$bf (case_prod$e ?v1) ?v2)) (fun_app$be (case_prod$d (uvg$ ?v0 ?v1)) ?v2))) :named a98))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$bf (case_prod$e ?v0) (fun_app$bf (case_prod$e ?v1) ?v2)) (fun_app$bf (case_prod$e (uvh$ ?v0 ?v1)) ?v2))) :named a99))
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$bf (case_prod$e uvi$) ?v0) ?v0) :pattern ((fun_app$bf (case_prod$e uvi$) ?v0)))) :named a100))
(assert (! (forall ((?v0 B_b_prod$)) (! (= (fun_app$bo (case_prod$a uvj$) ?v0) ?v0) :pattern ((fun_app$bo (case_prod$a uvj$) ?v0)))) :named a101))
(assert (! (forall ((?v0 A_c_prod$)) (! (= (fun_app$at (case_prod$b uvk$) ?v0) ?v0) :pattern ((fun_app$at (case_prod$b uvk$) ?v0)))) :named a102))
(assert (! (forall ((?v0 A_b_prod_b_prod$)) (! (= (case_prod$s uvl$ ?v0) ?v0) :pattern ((case_prod$s uvl$ ?v0)))) :named a103))
(assert (! (forall ((?v0 B_a_b_prod_prod$)) (! (= (fun_app$bp (case_prod$t uvm$) ?v0) ?v0) :pattern ((fun_app$bp (case_prod$t uvm$) ?v0)))) :named a104))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$)) (! (= (case_prod$u uvn$ ?v0) ?v0) :pattern ((case_prod$u uvn$ ?v0)))) :named a105))
(assert (! (forall ((?v0 B_c_prod$)) (! (= (case_prod$v uvo$ ?v0) ?v0) :pattern ((case_prod$v uvo$ ?v0)))) :named a106))
(assert (! (forall ((?v0 B_a_prod$)) (! (= (case_prod$w uvp$ ?v0) ?v0) :pattern ((case_prod$w uvp$ ?v0)))) :named a107))
(assert (! (forall ((?v0 A_a_prod$)) (! (= (fun_app$bg (case_prod$x uvq$) ?v0) ?v0) :pattern ((fun_app$bg (case_prod$x uvq$) ?v0)))) :named a108))
(assert (! (forall ((?v0 B_a_c_prod_prod$)) (! (= (case_prod$y uvr$ ?v0) ?v0) :pattern ((case_prod$y uvr$ ?v0)))) :named a109))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a110))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$) (?v3 B$)) (= (= (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a111))
(assert (! (forall ((?v0 A$) (?v1 C$) (?v2 A$) (?v3 C$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a112))
(assert (! (forall ((?v0 A_b_prod$) (?v1 B$) (?v2 A_b_prod$) (?v3 B$)) (= (= (pair$f ?v0 ?v1) (pair$f ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a113))
(assert (! (forall ((?v0 B$) (?v1 A_b_prod$) (?v2 B$) (?v3 A_b_prod$)) (= (= (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a114))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod$) (?v3 A_b_prod$)) (= (= (pair$h ?v0 ?v1) (pair$h ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a115))
(assert (! (forall ((?v0 B$) (?v1 C$) (?v2 B$) (?v3 C$)) (= (= (pair$j ?v0 ?v1) (pair$j ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a116))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (= (= (pair$l ?v0 ?v1) (pair$l ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a117))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$m ?v0 ?v1) (pair$m ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a118))
(assert (! (forall ((?v0 B$) (?v1 A_c_prod$) (?v2 B$) (?v3 A_c_prod$)) (= (= (pair$n ?v0 ?v1) (pair$n ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a119))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a120))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$) (?v3 B$)) (= (= (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a121))
(assert (! (forall ((?v0 A$) (?v1 C$) (?v2 A$) (?v3 C$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a122))
(assert (! (forall ((?v0 A_b_prod$) (?v1 B$) (?v2 A_b_prod$) (?v3 B$)) (= (= (pair$f ?v0 ?v1) (pair$f ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a123))
(assert (! (forall ((?v0 B$) (?v1 A_b_prod$) (?v2 B$) (?v3 A_b_prod$)) (= (= (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a124))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod$) (?v3 A_b_prod$)) (= (= (pair$h ?v0 ?v1) (pair$h ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a125))
(assert (! (forall ((?v0 B$) (?v1 C$) (?v2 B$) (?v3 C$)) (= (= (pair$j ?v0 ?v1) (pair$j ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a126))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (= (= (pair$l ?v0 ?v1) (pair$l ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a127))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$m ?v0 ?v1) (pair$m ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a128))
(assert (! (forall ((?v0 B$) (?v1 A_c_prod$) (?v2 B$) (?v3 A_c_prod$)) (= (= (pair$n ?v0 ?v1) (pair$n ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a129))
(assert (! (forall ((?v0 A_c_prod_a_b_prod_fun$)) (= (case_prod$c (uvs$ ?v0)) ?v0)) :named a130))
(assert (! (forall ((?v0 C_c_prod_b_b_prod_fun$)) (= (case_prod$ (uvt$ ?v0)) ?v0)) :named a131))
(assert (! (forall ((?v0 A_c_prod_a_c_prod_fun$)) (= (case_prod$b (uvu$ ?v0)) ?v0)) :named a132))
(assert (! (forall ((?v0 A_b_prod_a_c_prod_fun$)) (= (case_prod$d (uvv$ ?v0)) ?v0)) :named a133))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$)) (= (case_prod$e (uvw$ ?v0)) ?v0)) :named a134))
(assert (! (forall ((?v0 C_a_c_prod_prod_b_a_b_prod_prod_fun$)) (= (case_prod$f (uvx$ ?v0)) ?v0)) :named a135))
(assert (! (forall ((?v0 A_b_prod_c_c_prod_fun$)) (= (case_prod$z (uvy$ ?v0)) ?v0)) :named a136))
(assert (! (forall ((?v0 A_b_prod_b_b_prod_fun$)) (= (case_prod$n (uvz$ ?v0)) ?v0)) :named a137))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$)) (= (case_prod$x (uwa$ ?v0)) ?v0)) :named a138))
(assert (! (forall ((?v0 A_b_prod_c_a_c_prod_prod_fun$)) (= (case_prod$aa (uwb$ ?v0)) ?v0)) :named a139))
(assert (! (forall ((?v0 A_b_b_a_b_prod_prod_fun_fun$) (?v1 A_b_prod_b_a_b_prod_prod_fun$)) (=> (forall ((?v2 A$) (?v3 B$)) (= (fun_app$br (fun_app$bs ?v0 ?v2) ?v3) (fun_app$i ?v1 (pair$ ?v2 ?v3)))) (= (case_prod$ab ?v0) ?v1))) :named a140))
(assert (! (forall ((?v0 A_b_b_b_prod_fun_fun$) (?v1 A_b_prod_b_b_prod_fun$)) (=> (forall ((?v2 A$) (?v3 B$)) (= (fun_app$m (fun_app$ak ?v0 ?v2) ?v3) (fun_app$bb ?v1 (pair$ ?v2 ?v3)))) (= (case_prod$n ?v0) ?v1))) :named a141))
(assert (! (forall ((?v0 A_a_a_a_prod_fun_fun$) (?v1 A_a_prod_a_a_prod_fun$)) (=> (forall ((?v2 A$) (?v3 A$)) (= (fun_app$u (fun_app$v ?v0 ?v2) ?v3) (fun_app$bg ?v1 (pair$m ?v2 ?v3)))) (= (case_prod$x ?v0) ?v1))) :named a142))
(assert (! (forall ((?v0 C_a_c_prod_b_a_b_prod_prod_fun_fun$) (?v1 C_a_c_prod_prod_b_a_b_prod_prod_fun$)) (=> (forall ((?v2 C$) (?v3 A_c_prod$)) (= (fun_app$an (fun_app$ao ?v0 ?v2) ?v3) (fun_app$ap ?v1 (pair$e ?v2 ?v3)))) (= (case_prod$f ?v0) ?v1))) :named a143))
(assert (! (forall ((?v0 C_c_b_b_prod_fun_fun$) (?v1 C_c_prod_b_b_prod_fun$)) (=> (forall ((?v2 C$) (?v3 C$)) (= (fun_app$aq (fun_app$ar ?v0 ?v2) ?v3) (fun_app$as ?v1 (pair$c ?v2 ?v3)))) (= (case_prod$ ?v0) ?v1))) :named a144))
(assert (! (forall ((?v0 A_c_a_c_prod_fun_fun$) (?v1 A_c_prod_a_c_prod_fun$)) (=> (forall ((?v2 A$) (?v3 C$)) (= (fun_app$q (fun_app$r ?v0 ?v2) ?v3) (fun_app$at ?v1 (pair$a ?v2 ?v3)))) (= (case_prod$b ?v0) ?v1))) :named a145))
(assert (! (forall ((?v0 A_b_a_c_prod_fun_fun$) (?v1 A_b_prod_a_c_prod_fun$)) (=> (forall ((?v2 A$) (?v3 B$)) (= (fun_app$bc (fun_app$bd ?v0 ?v2) ?v3) (fun_app$be ?v1 (pair$ ?v2 ?v3)))) (= (case_prod$d ?v0) ?v1))) :named a146))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$) (?v1 A_b_prod_a_b_prod_fun$)) (=> (forall ((?v2 A$) (?v3 B$)) (= (fun_app$s (fun_app$t ?v0 ?v2) ?v3) (fun_app$bf ?v1 (pair$ ?v2 ?v3)))) (= (case_prod$e ?v0) ?v1))) :named a147))
(assert (! (forall ((?v0 A_c_a_b_prod_fun_fun$) (?v1 A_c_prod_a_b_prod_fun$)) (=> (forall ((?v2 A$) (?v3 C$)) (= (fun_app$ (fun_app$a ?v0 ?v2) ?v3) (fun_app$au ?v1 (pair$a ?v2 ?v3)))) (= (case_prod$c ?v0) ?v1))) :named a148))
(assert (! (forall ((?v0 C_a_c_prod_b_a_b_prod_prod_fun_fun$) (?v1 C$) (?v2 A_c_prod$)) (! (= (fun_app$ap (case_prod$f ?v0) (pair$e ?v1 ?v2)) (fun_app$an (fun_app$ao ?v0 ?v1) ?v2)) :pattern ((fun_app$ap (case_prod$f ?v0) (pair$e ?v1 ?v2))))) :named a149))
(assert (! (forall ((?v0 C_c_b_b_prod_fun_fun$) (?v1 C$) (?v2 C$)) (! (= (fun_app$as (case_prod$ ?v0) (pair$c ?v1 ?v2)) (fun_app$aq (fun_app$ar ?v0 ?v1) ?v2)) :pattern ((fun_app$as (case_prod$ ?v0) (pair$c ?v1 ?v2))))) :named a150))
(assert (! (forall ((?v0 A_c_a_c_prod_fun_fun$) (?v1 A$) (?v2 C$)) (! (= (fun_app$at (case_prod$b ?v0) (pair$a ?v1 ?v2)) (fun_app$q (fun_app$r ?v0 ?v1) ?v2)) :pattern ((fun_app$at (case_prod$b ?v0) (pair$a ?v1 ?v2))))) :named a151))
(assert (! (forall ((?v0 A_b_a_c_prod_fun_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$be (case_prod$d ?v0) (pair$ ?v1 ?v2)) (fun_app$bc (fun_app$bd ?v0 ?v1) ?v2)) :pattern ((fun_app$be (case_prod$d ?v0) (pair$ ?v1 ?v2))))) :named a152))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$bf (case_prod$e ?v0) (pair$ ?v1 ?v2)) (fun_app$s (fun_app$t ?v0 ?v1) ?v2)) :pattern ((fun_app$bf (case_prod$e ?v0) (pair$ ?v1 ?v2))))) :named a153))
(assert (! (forall ((?v0 A_c_a_b_prod_fun_fun$) (?v1 A$) (?v2 C$)) (! (= (fun_app$au (case_prod$c ?v0) (pair$a ?v1 ?v2)) (fun_app$ (fun_app$a ?v0 ?v1) ?v2)) :pattern ((fun_app$au (case_prod$c ?v0) (pair$a ?v1 ?v2))))) :named a154))
(assert (! (forall ((?v0 C_a_c_prod_b_a_b_prod_prod_fun_fun$) (?v1 C$) (?v2 A_c_prod$)) (! (= (fun_app$ap (case_prod$f ?v0) (pair$e ?v1 ?v2)) (fun_app$an (fun_app$ao ?v0 ?v1) ?v2)) :pattern ((fun_app$ap (case_prod$f ?v0) (pair$e ?v1 ?v2))))) :named a155))
(assert (! (forall ((?v0 C_c_b_b_prod_fun_fun$) (?v1 C$) (?v2 C$)) (! (= (fun_app$as (case_prod$ ?v0) (pair$c ?v1 ?v2)) (fun_app$aq (fun_app$ar ?v0 ?v1) ?v2)) :pattern ((fun_app$as (case_prod$ ?v0) (pair$c ?v1 ?v2))))) :named a156))
(assert (! (forall ((?v0 A_c_a_c_prod_fun_fun$) (?v1 A$) (?v2 C$)) (! (= (fun_app$at (case_prod$b ?v0) (pair$a ?v1 ?v2)) (fun_app$q (fun_app$r ?v0 ?v1) ?v2)) :pattern ((fun_app$at (case_prod$b ?v0) (pair$a ?v1 ?v2))))) :named a157))
(assert (! (forall ((?v0 A_b_a_c_prod_fun_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$be (case_prod$d ?v0) (pair$ ?v1 ?v2)) (fun_app$bc (fun_app$bd ?v0 ?v1) ?v2)) :pattern ((fun_app$be (case_prod$d ?v0) (pair$ ?v1 ?v2))))) :named a158))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$bf (case_prod$e ?v0) (pair$ ?v1 ?v2)) (fun_app$s (fun_app$t ?v0 ?v1) ?v2)) :pattern ((fun_app$bf (case_prod$e ?v0) (pair$ ?v1 ?v2))))) :named a159))
(assert (! (forall ((?v0 A_c_a_b_prod_fun_fun$) (?v1 A$) (?v2 C$)) (! (= (fun_app$au (case_prod$c ?v0) (pair$a ?v1 ?v2)) (fun_app$ (fun_app$a ?v0 ?v1) ?v2)) :pattern ((fun_app$au (case_prod$c ?v0) (pair$a ?v1 ?v2))))) :named a160))
(assert (! (forall ((?v0 C_a_c_prod_prod$) (?v1 C_a_c_prod_b_a_b_prod_prod_fun_fun$) (?v2 C_a_c_prod_b_a_b_prod_prod_fun_fun$) (?v3 C_a_c_prod_prod$)) (=> (and (forall ((?v4 C$) (?v5 A_c_prod$)) (=> (= (pair$e ?v4 ?v5) ?v0) (= (fun_app$an (fun_app$ao ?v1 ?v4) ?v5) (fun_app$an (fun_app$ao ?v2 ?v4) ?v5)))) (= ?v3 ?v0)) (= (fun_app$ap (case_prod$f ?v1) ?v3) (fun_app$ap (case_prod$f ?v2) ?v0)))) :named a161))
(assert (! (forall ((?v0 C_c_prod$) (?v1 C_c_b_b_prod_fun_fun$) (?v2 C_c_b_b_prod_fun_fun$) (?v3 C_c_prod$)) (=> (and (forall ((?v4 C$) (?v5 C$)) (=> (= (pair$c ?v4 ?v5) ?v0) (= (fun_app$aq (fun_app$ar ?v1 ?v4) ?v5) (fun_app$aq (fun_app$ar ?v2 ?v4) ?v5)))) (= ?v3 ?v0)) (= (fun_app$as (case_prod$ ?v1) ?v3) (fun_app$as (case_prod$ ?v2) ?v0)))) :named a162))
(assert (! (forall ((?v0 A_c_prod$) (?v1 A_c_a_c_prod_fun_fun$) (?v2 A_c_a_c_prod_fun_fun$) (?v3 A_c_prod$)) (=> (and (forall ((?v4 A$) (?v5 C$)) (=> (= (pair$a ?v4 ?v5) ?v0) (= (fun_app$q (fun_app$r ?v1 ?v4) ?v5) (fun_app$q (fun_app$r ?v2 ?v4) ?v5)))) (= ?v3 ?v0)) (= (fun_app$at (case_prod$b ?v1) ?v3) (fun_app$at (case_prod$b ?v2) ?v0)))) :named a163))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_a_c_prod_fun_fun$) (?v2 A_b_a_c_prod_fun_fun$) (?v3 A_b_prod$)) (=> (and (forall ((?v4 A$) (?v5 B$)) (=> (= (pair$ ?v4 ?v5) ?v0) (= (fun_app$bc (fun_app$bd ?v1 ?v4) ?v5) (fun_app$bc (fun_app$bd ?v2 ?v4) ?v5)))) (= ?v3 ?v0)) (= (fun_app$be (case_prod$d ?v1) ?v3) (fun_app$be (case_prod$d ?v2) ?v0)))) :named a164))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A_b_a_b_prod_fun_fun$) (?v3 A_b_prod$)) (=> (and (forall ((?v4 A$) (?v5 B$)) (=> (= (pair$ ?v4 ?v5) ?v0) (= (fun_app$s (fun_app$t ?v1 ?v4) ?v5) (fun_app$s (fun_app$t ?v2 ?v4) ?v5)))) (= ?v3 ?v0)) (= (fun_app$bf (case_prod$e ?v1) ?v3) (fun_app$bf (case_prod$e ?v2) ?v0)))) :named a165))
(assert (! (forall ((?v0 A_c_prod$) (?v1 A_c_a_b_prod_fun_fun$) (?v2 A_c_a_b_prod_fun_fun$) (?v3 A_c_prod$)) (=> (and (forall ((?v4 A$) (?v5 C$)) (=> (= (pair$a ?v4 ?v5) ?v0) (= (fun_app$ (fun_app$a ?v1 ?v4) ?v5) (fun_app$ (fun_app$a ?v2 ?v4) ?v5)))) (= ?v3 ?v0)) (= (fun_app$au (case_prod$c ?v1) ?v3) (fun_app$au (case_prod$c ?v2) ?v0)))) :named a166))
(assert (! (forall ((?v0 B_a_b_prod_prod_bool_fun$) (?v1 C_a_c_prod_b_a_b_prod_prod_fun_fun$) (?v2 C_a_c_prod_prod$)) (=> (and (fun_app$bt ?v0 (fun_app$ap (case_prod$f ?v1) ?v2)) (forall ((?v3 C$) (?v4 A_c_prod$)) (=> (and (= ?v2 (pair$e ?v3 ?v4)) (fun_app$bt ?v0 (fun_app$an (fun_app$ao ?v1 ?v3) ?v4))) false))) false)) :named a167))
(assert (! (forall ((?v0 B_b_prod_bool_fun$) (?v1 C_c_b_b_prod_fun_fun$) (?v2 C_c_prod$)) (=> (and (fun_app$bu ?v0 (fun_app$as (case_prod$ ?v1) ?v2)) (forall ((?v3 C$) (?v4 C$)) (=> (and (= ?v2 (pair$c ?v3 ?v4)) (fun_app$bu ?v0 (fun_app$aq (fun_app$ar ?v1 ?v3) ?v4))) false))) false)) :named a168))
(assert (! (forall ((?v0 A_c_prod_bool_fun$) (?v1 A_c_a_c_prod_fun_fun$) (?v2 A_c_prod$)) (=> (and (fun_app$bv ?v0 (fun_app$at (case_prod$b ?v1) ?v2)) (forall ((?v3 A$) (?v4 C$)) (=> (and (= ?v2 (pair$a ?v3 ?v4)) (fun_app$bv ?v0 (fun_app$q (fun_app$r ?v1 ?v3) ?v4))) false))) false)) :named a169))
(assert (! (forall ((?v0 A_c_prod_bool_fun$) (?v1 A_b_a_c_prod_fun_fun$) (?v2 A_b_prod$)) (=> (and (fun_app$bv ?v0 (fun_app$be (case_prod$d ?v1) ?v2)) (forall ((?v3 A$) (?v4 B$)) (=> (and (= ?v2 (pair$ ?v3 ?v4)) (fun_app$bv ?v0 (fun_app$bc (fun_app$bd ?v1 ?v3) ?v4))) false))) false)) :named a170))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A_b_prod$)) (=> (and (fun_app$bw ?v0 (fun_app$bf (case_prod$e ?v1) ?v2)) (forall ((?v3 A$) (?v4 B$)) (=> (and (= ?v2 (pair$ ?v3 ?v4)) (fun_app$bw ?v0 (fun_app$s (fun_app$t ?v1 ?v3) ?v4))) false))) false)) :named a171))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A_c_a_b_prod_fun_fun$) (?v2 A_c_prod$)) (=> (and (fun_app$bw ?v0 (fun_app$au (case_prod$c ?v1) ?v2)) (forall ((?v3 A$) (?v4 C$)) (=> (and (= ?v2 (pair$a ?v3 ?v4)) (fun_app$bw ?v0 (fun_app$ (fun_app$a ?v1 ?v3) ?v4))) false))) false)) :named a172))
(assert (! (forall ((?v0 A_b_prod_a_c_prod_fun$) (?v1 A_c_a_b_prod_fun_fun$) (?v2 A_c_prod$)) (= (fun_app$be ?v0 (fun_app$au (case_prod$c ?v1) ?v2)) (fun_app$at (case_prod$b (uwc$ ?v0 ?v1)) ?v2))) :named a173))
(assert (! (forall ((?v0 B_a_b_prod_prod_b_a_b_prod_prod_fun$) (?v1 C_a_c_prod_b_a_b_prod_prod_fun_fun$) (?v2 C_a_c_prod_prod$)) (= (fun_app$bp ?v0 (fun_app$ap (case_prod$f ?v1) ?v2)) (fun_app$ap (case_prod$f (uwd$ ?v0 ?v1)) ?v2))) :named a174))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_fun$) (?v1 C_c_b_b_prod_fun_fun$) (?v2 C_c_prod$)) (= (fun_app$bo ?v0 (fun_app$as (case_prod$ ?v1) ?v2)) (fun_app$as (case_prod$ (uwe$ ?v0 ?v1)) ?v2))) :named a175))
(assert (! (forall ((?v0 A_c_prod_a_b_prod_fun$) (?v1 A_c_a_c_prod_fun_fun$) (?v2 A_c_prod$)) (= (fun_app$au ?v0 (fun_app$at (case_prod$b ?v1) ?v2)) (fun_app$au (case_prod$c (uwf$ ?v0 ?v1)) ?v2))) :named a176))
(assert (! (forall ((?v0 A_c_prod_a_c_prod_fun$) (?v1 A_c_a_c_prod_fun_fun$) (?v2 A_c_prod$)) (= (fun_app$at ?v0 (fun_app$at (case_prod$b ?v1) ?v2)) (fun_app$at (case_prod$b (uwg$ ?v0 ?v1)) ?v2))) :named a177))
(assert (! (forall ((?v0 A_c_prod_a_c_prod_fun$) (?v1 A_b_a_c_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$at ?v0 (fun_app$be (case_prod$d ?v1) ?v2)) (fun_app$be (case_prod$d (uwh$ ?v0 ?v1)) ?v2))) :named a178))
(assert (! (forall ((?v0 A_c_prod_a_b_prod_fun$) (?v1 A_b_a_c_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$au ?v0 (fun_app$be (case_prod$d ?v1) ?v2)) (fun_app$bf (case_prod$e (uwi$ ?v0 ?v1)) ?v2))) :named a179))
(assert (! (forall ((?v0 A_b_prod_a_c_prod_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$be ?v0 (fun_app$bf (case_prod$e ?v1) ?v2)) (fun_app$be (case_prod$d (uwj$ ?v0 ?v1)) ?v2))) :named a180))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$bf ?v0 (fun_app$bf (case_prod$e ?v1) ?v2)) (fun_app$bf (case_prod$e (uwk$ ?v0 ?v1)) ?v2))) :named a181))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_c_a_b_prod_fun_fun$) (?v2 A_c_prod$)) (= (fun_app$bf ?v0 (fun_app$au (case_prod$c ?v1) ?v2)) (fun_app$au (case_prod$c (uwl$ ?v0 ?v1)) ?v2))) :named a182))
(check-sat)
;(get-unsat-core)
