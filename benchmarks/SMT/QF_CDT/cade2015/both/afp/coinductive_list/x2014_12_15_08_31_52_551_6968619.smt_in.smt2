; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 594
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_bool_fun_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-fun x$ () A$)
(declare-fun uu$ () A_llist_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun uua$ () A_bool_fun$)
(declare-fun uub$ () A_llist_bool_fun$)
(declare-fun uuc$ (A_bool_fun$) A_bool_fun_a_bool_fun_fun$)
(declare-fun uud$ (A_llist_bool_fun$) A_llist_bool_fun_a_llist_bool_fun_fun$)
(declare-fun uue$ () A_llist_bool_fun$)
(declare-fun xss$ () A_llist_llist$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lsetp$ (A_llist$) A_bool_fun$)
(declare-fun lnull$a (A_llist_llist$) Bool)
(declare-fun lsetp$a (A_llist_llist$) A_llist_bool_fun$)
(declare-fun thesis$ () Bool)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun lfilter$ (A_llist_bool_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun fun_app$a (A_llist_bool_fun_a_llist_bool_fun_fun$ A_llist_bool_fun$) A_llist_bool_fun$)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun fun_app$c (A_bool_fun_a_bool_fun_fun$ A_bool_fun$) A_bool_fun$)
(declare-fun lfilter$a (A_bool_fun$ A_llist$) A_llist$)
(declare-fun lmember$a (A_llist$ A_llist_llist$) Bool)
(declare-fun pred_llist$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun pred_llist$a (A_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun lstrict_prefix$ (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$a (A_llist_llist$ A_llist_llist$) Bool)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uue$ ?v0) (not (lnull$ ?v0))) :pattern ((fun_app$ uue$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uu$ ?v0) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2)))) :pattern ((fun_app$ uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$a (uud$ ?v0) ?v1) ?v2) (and (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$a (uud$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$b (fun_app$c (uuc$ ?v0) ?v1) ?v2) (and (fun_app$b ?v0 ?v2) (fun_app$b ?v1 ?v2))) :pattern ((fun_app$b (fun_app$c (uuc$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uub$ ?v0) true) :pattern ((fun_app$ uub$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$b uua$ ?v0) true) :pattern ((fun_app$b uua$ ?v0)))) :named a5))
(assert (! (not thesis$) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (= (lfilter$ uu$ xss$) (lCons$a ?v0 ?v1)) thesis$)) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a9))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lfilter$a ?v0 (lfilter$a ?v0 ?v1)) (lfilter$a ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (= (lfilter$ ?v0 (lfilter$ ?v0 ?v1)) (lfilter$ ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 A_llist$)) (= (lfilter$a uua$ ?v0) ?v0)) :named a12))
(assert (! (forall ((?v0 A_llist_llist$)) (= (lfilter$ uub$ ?v0) ?v0)) :named a13))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (lfilter$a ?v0 (lCons$ ?v1 ?v2)) (ite (fun_app$b ?v0 ?v1) (lCons$ ?v1 (lfilter$a ?v0 ?v2)) (lfilter$a ?v0 ?v2))) :pattern ((lfilter$a ?v0 (lCons$ ?v1 ?v2))))) :named a14))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_llist$)) (! (= (lfilter$ ?v0 (lCons$a ?v1 ?v2)) (ite (fun_app$ ?v0 ?v1) (lCons$a ?v1 (lfilter$ ?v0 ?v2)) (lfilter$ ?v0 ?v2))) :pattern ((lfilter$ ?v0 (lCons$a ?v1 ?v2))))) :named a15))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$) (?v2 A_llist$)) (= (lfilter$a ?v0 (lfilter$a ?v1 ?v2)) (lfilter$a (fun_app$c (uuc$ ?v0) ?v1) ?v2))) :named a16))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$) (?v2 A_llist_llist$)) (= (lfilter$ ?v0 (lfilter$ ?v1 ?v2)) (lfilter$ (fun_app$a (uud$ ?v0) ?v1) ?v2))) :named a17))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (=> (not (fun_app$b ?v0 ?v1)) (= (lfilter$a ?v0 (lCons$ ?v1 ?v2)) (lfilter$a ?v0 ?v2))) :pattern ((lfilter$a ?v0 (lCons$ ?v1 ?v2))))) :named a18))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_llist$)) (! (=> (not (fun_app$ ?v0 ?v1)) (= (lfilter$ ?v0 (lCons$a ?v1 ?v2)) (lfilter$ ?v0 ?v2))) :pattern ((lfilter$ ?v0 (lCons$a ?v1 ?v2))))) :named a19))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (=> (fun_app$b ?v0 ?v1) (= (lfilter$a ?v0 (lCons$ ?v1 ?v2)) (lCons$ ?v1 (lfilter$a ?v0 ?v2)))) :pattern ((lfilter$a ?v0 (lCons$ ?v1 ?v2))))) :named a20))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_llist$)) (! (=> (fun_app$ ?v0 ?v1) (= (lfilter$ ?v0 (lCons$a ?v1 ?v2)) (lCons$a ?v1 (lfilter$ ?v0 ?v2)))) :pattern ((lfilter$ ?v0 (lCons$a ?v1 ?v2))))) :named a21))
(assert (! (= (lconcat$ xss$) (lCons$ x$ xs$)) :named a22))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (pred_llist$ ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$b ?v0 ?v1) (fun_app$ (pred_llist$ ?v0) ?v2))) :pattern ((fun_app$ (pred_llist$ ?v0) (lCons$ ?v1 ?v2))))) :named a23))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_llist$)) (! (= (pred_llist$a ?v0 (lCons$a ?v1 ?v2)) (and (fun_app$ ?v0 ?v1) (pred_llist$a ?v0 ?v2))) :pattern ((pred_llist$a ?v0 (lCons$a ?v1 ?v2))))) :named a24))
(assert (! (not (lnull$a (lfilter$ uue$ xss$))) :named a25))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (lmember$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$ (lmember$ ?v0) ?v2))) :pattern ((fun_app$ (lmember$ ?v0) (lCons$ ?v1 ?v2))))) :named a26))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist_llist$)) (! (= (lmember$a ?v0 (lCons$a ?v1 ?v2)) (or (= ?v0 ?v1) (lmember$a ?v0 ?v2))) :pattern ((lmember$a ?v0 (lCons$a ?v1 ?v2))))) :named a27))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$ (lstrict_prefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$ (lstrict_prefix$ ?v1) ?v3))) :pattern ((fun_app$ (lstrict_prefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))) :named a28))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (! (= (lstrict_prefix$a (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (lstrict_prefix$a ?v1 ?v3))) :pattern ((lstrict_prefix$a (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3))))) :named a29))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (= (fun_app$b (lsetp$ ?v0) ?v1) (or (exists ((?v2 A$) (?v3 A_llist$)) (and (= ?v0 (lCons$ ?v2 ?v3)) (= ?v1 ?v2))) (exists ((?v2 A_llist$) (?v3 A$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$b (lsetp$ ?v2) ?v3))))))) :named a30))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (= (fun_app$ (lsetp$a ?v0) ?v1) (or (exists ((?v2 A_llist$) (?v3 A_llist_llist$)) (and (= ?v0 (lCons$a ?v2 ?v3)) (= ?v1 ?v2))) (exists ((?v2 A_llist_llist$) (?v3 A_llist$) (?v4 A_llist$)) (and (= ?v0 (lCons$a ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$ (lsetp$a ?v2) ?v3))))))) :named a31))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (fun_app$b (lsetp$ ?v0) ?v1) (and (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v0 (lCons$ ?v2 ?v3)) (= ?v1 ?v2)) false)) (forall ((?v2 A_llist$) (?v3 A$) (?v4 A$)) (=> (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$b (lsetp$ ?v2) ?v3))) false)))) false)) :named a32))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (lsetp$a ?v0) ?v1) (and (forall ((?v2 A_llist$) (?v3 A_llist_llist$)) (=> (and (= ?v0 (lCons$a ?v2 ?v3)) (= ?v1 ?v2)) false)) (forall ((?v2 A_llist_llist$) (?v3 A_llist$) (?v4 A_llist$)) (=> (and (= ?v0 (lCons$a ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$ (lsetp$a ?v2) ?v3))) false)))) false)) :named a33))
(assert (! (forall ((?v0 A_llist$) (?v1 A$) (?v2 A$)) (=> (fun_app$b (lsetp$ ?v0) ?v1) (fun_app$b (lsetp$ (lCons$ ?v2 ?v0)) ?v1))) :named a34))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$ (lsetp$a ?v0) ?v1) (fun_app$ (lsetp$a (lCons$a ?v2 ?v0)) ?v1))) :named a35))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (fun_app$b (lsetp$ (lCons$ ?v0 ?v1)) ?v0)) :named a36))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (fun_app$ (lsetp$a (lCons$a ?v0 ?v1)) ?v0)) :named a37))
(check-sat)
;(get-unsat-core)
