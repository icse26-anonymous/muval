; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 590
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort B_llist_b_llist_fun$ 0)
(declare-sort A_a_prod_a_a_prod_fun$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-sort B_a_prod_b_a_prod_fun$ 0)
(declare-sort B_b_prod_b_b_prod_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0)
(declare-sort A_b_prod_llist_a_b_prod_llist_fun$ 0)
(declare-sort B_a_prod_llist_b_a_prod_llist_fun$ 0)
(declare-sort B_b_prod_llist_b_b_prod_llist_fun$ 0)
(declare-sort A_a_b_prod_prod_a_a_b_prod_prod_fun$ 0)
(declare-sort A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ 0)
(declare-sort A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ 0)
(declare-sort A_b_prod_a_b_prod_prod_llist_a_b_prod_a_b_prod_prod_llist_fun$ 0)
(declare-sort A_a_b_prod_a_b_prod_prod_prod_a_a_b_prod_a_b_prod_prod_prod_fun$ 0)
(declare-sort A_a_b_prod_a_b_prod_prod_prod_llist_a_a_b_prod_a_b_prod_prod_prod_llist_fun$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$) (lCons$ (lhd$ A_b_prod$) (ltl$ A_b_prod_llist$)))))
(declare-datatypes () ((B_b_prod$ (pair$a (fst$a B$) (snd$a B$)))))
(declare-codatatypes () ((B_b_prod_llist$ (lNil$a) (lCons$a (lhd$a B_b_prod$) (ltl$a B_b_prod_llist$)))))
(declare-datatypes () ((B_a_prod$ (pair$b (fst$b B$) (snd$b A$)))))
(declare-codatatypes () ((B_a_prod_llist$ (lNil$b) (lCons$b (lhd$b B_a_prod$) (ltl$b B_a_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_b_prod_prod$ (pair$c (fst$c A_b_prod$) (snd$c A_b_prod$)))
  (A_a_b_prod_a_b_prod_prod_prod$ (pair$d (fst$d A$) (snd$d A_b_prod_a_b_prod_prod$)))))
(declare-codatatypes () ((A_a_b_prod_a_b_prod_prod_prod_llist$ (lNil$c) (lCons$c (lhd$c A_a_b_prod_a_b_prod_prod_prod$) (ltl$c A_a_b_prod_a_b_prod_prod_prod_llist$)))))
(declare-datatypes () ((A_a_b_prod_prod$ (pair$e (fst$e A$) (snd$e A_b_prod$)))))
(declare-codatatypes () ((A_a_b_prod_prod_llist$ (lNil$d) (lCons$d (lhd$d A_a_b_prod_prod$) (ltl$d A_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod$ (pair$f (fst$f A$) (snd$f A$)))))
(declare-codatatypes () ((A_a_prod_llist$ (lNil$e) (lCons$e (lhd$e A_a_prod$) (ltl$e A_a_prod_llist$)))
  (A_b_prod_a_b_prod_prod_llist$ (lNil$f) (lCons$f (lhd$f A_b_prod_a_b_prod_prod$) (ltl$f A_b_prod_a_b_prod_prod_llist$)))
  (A_llist$ (lNil$g) (lCons$g (lhd$g A$) (ltl$g A_llist$)))
  (B_llist$ (lNil$h) (lCons$h (lhd$h B$) (ltl$h B_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))
  (A_b_prod_a_prod$ (pair$g (fst$g A_b_prod$) (snd$g A$)))))
(declare-codatatypes () ((A_b_prod_a_prod_llist$ (lNil$i) (lCons$i (lhd$i A_b_prod_a_prod$) (ltl$i A_b_prod_a_prod_llist$)))))
(declare-datatypes () ((A_b_prod_b_prod$ (pair$h (fst$h A_b_prod$) (snd$h B$)))))
(declare-codatatypes () ((A_b_prod_b_prod_llist$ (lNil$j) (lCons$j (lhd$j A_b_prod_b_prod$) (ltl$j A_b_prod_b_prod_llist$)))))
(declare-datatypes () ((B_a_b_prod_prod$ (pair$i (fst$i B$) (snd$i A_b_prod$)))))
(declare-codatatypes () ((B_a_b_prod_prod_llist$ (lNil$k) (lCons$k (lhd$k B_a_b_prod_prod$) (ltl$k B_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_b_prod_prod_a_prod$ (pair$j (fst$j A_b_prod_a_b_prod_prod$) (snd$j A$)))))
(declare-codatatypes () ((A_b_prod_a_b_prod_prod_a_prod_llist$ (lNil$l) (lCons$l (lhd$l A_b_prod_a_b_prod_prod_a_prod$) (ltl$l A_b_prod_a_b_prod_prod_a_prod_llist$)))))
(declare-fun us$ () A_b_prod_llist$)
(declare-fun vs$ () A_b_prod_llist$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun lnull$ (B_b_prod_llist$) Bool)
(declare-fun lzip$a (A_b_prod_llist$ A_b_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun lzip$b (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun lzip$c (B_llist$ A_llist$) B_a_prod_llist$)
(declare-fun lzip$d (B_llist$ B_llist$) B_b_prod_llist$)
(declare-fun lzip$e (A_b_prod_llist$ A_llist$) A_b_prod_a_prod_llist$)
(declare-fun lzip$f (A_b_prod_llist$ B_llist$) A_b_prod_b_prod_llist$)
(declare-fun lzip$g (A_llist$ A_b_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun lzip$h (B_llist$ A_b_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun lzip$i (A_b_prod_a_b_prod_prod_llist$ A_llist$) A_b_prod_a_b_prod_prod_a_prod_llist$)
(declare-fun lnull$a (B_a_prod_llist$) Bool)
(declare-fun lnull$b (A_a_b_prod_a_b_prod_prod_prod_llist$) Bool)
(declare-fun lnull$c (A_a_b_prod_prod_llist$) Bool)
(declare-fun lnull$d (A_a_prod_llist$) Bool)
(declare-fun lnull$e (A_b_prod_a_b_prod_prod_llist$) Bool)
(declare-fun lnull$f (A_llist$) Bool)
(declare-fun lnull$g (B_llist$) Bool)
(declare-fun lnull$h (A_b_prod_llist$) Bool)
(declare-fun fun_app$ (A_b_prod_llist_a_b_prod_llist_fun$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun lappend$ (A_b_prod_llist$) A_b_prod_llist_a_b_prod_llist_fun$)
(declare-fun lfinite$ (A_b_prod_llist$) Bool)
(declare-fun llength$ (A_b_prod_llist$) Enat$)
(declare-fun fun_app$a (B_b_prod_llist_b_b_prod_llist_fun$ B_b_prod_llist$) B_b_prod_llist$)
(declare-fun fun_app$b (B_a_prod_llist_b_a_prod_llist_fun$ B_a_prod_llist$) B_a_prod_llist$)
(declare-fun fun_app$c (A_a_b_prod_a_b_prod_prod_prod_llist_a_a_b_prod_a_b_prod_prod_prod_llist_fun$ A_a_b_prod_a_b_prod_prod_prod_llist$) A_a_b_prod_a_b_prod_prod_prod_llist$)
(declare-fun fun_app$d (A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun fun_app$e (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun fun_app$f (A_b_prod_a_b_prod_prod_llist_a_b_prod_a_b_prod_prod_llist_fun$ A_b_prod_a_b_prod_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun fun_app$g (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$h (B_llist_b_llist_fun$ B_llist$) B_llist$)
(declare-fun iterates$ (B_b_prod_b_b_prod_fun$ B_b_prod$) B_b_prod_llist$)
(declare-fun lappend$a (B_b_prod_llist$) B_b_prod_llist_b_b_prod_llist_fun$)
(declare-fun lappend$b (B_a_prod_llist$) B_a_prod_llist_b_a_prod_llist_fun$)
(declare-fun lappend$c (A_a_b_prod_a_b_prod_prod_prod_llist$) A_a_b_prod_a_b_prod_prod_prod_llist_a_a_b_prod_a_b_prod_prod_prod_llist_fun$)
(declare-fun lappend$d (A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$)
(declare-fun lappend$e (A_a_prod_llist$) A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun lappend$f (A_b_prod_a_b_prod_prod_llist$) A_b_prod_a_b_prod_prod_llist_a_b_prod_a_b_prod_prod_llist_fun$)
(declare-fun lappend$g (A_llist$) A_llist_a_llist_fun$)
(declare-fun lappend$h (B_llist$) B_llist_b_llist_fun$)
(declare-fun lappend$i (A_b_prod_a_prod_llist$ A_b_prod_a_prod_llist$) A_b_prod_a_prod_llist$)
(declare-fun lappend$j (A_b_prod_b_prod_llist$ A_b_prod_b_prod_llist$) A_b_prod_b_prod_llist$)
(declare-fun lappend$k (B_a_b_prod_prod_llist$ B_a_b_prod_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun lappend$l (A_b_prod_a_b_prod_prod_a_prod_llist$ A_b_prod_a_b_prod_prod_a_prod_llist$) A_b_prod_a_b_prod_prod_a_prod_llist$)
(declare-fun lfinite$a (B_b_prod_llist$) Bool)
(declare-fun lfinite$b (B_a_prod_llist$) Bool)
(declare-fun lfinite$c (A_a_b_prod_a_b_prod_prod_prod_llist$) Bool)
(declare-fun lfinite$d (A_a_b_prod_prod_llist$) Bool)
(declare-fun lfinite$e (A_a_prod_llist$) Bool)
(declare-fun lfinite$f (A_b_prod_a_b_prod_prod_llist$) Bool)
(declare-fun lfinite$g (A_llist$) Bool)
(declare-fun lfinite$h (B_llist$) Bool)
(declare-fun llength$a (A_llist$) Enat$)
(declare-fun llength$b (B_llist$) Enat$)
(declare-fun llength$c (A_b_prod_a_b_prod_prod_llist$) Enat$)
(declare-fun iterates$a (B_a_prod_b_a_prod_fun$ B_a_prod$) B_a_prod_llist$)
(declare-fun iterates$b (A_a_b_prod_a_b_prod_prod_prod_a_a_b_prod_a_b_prod_prod_prod_fun$ A_a_b_prod_a_b_prod_prod_prod$) A_a_b_prod_a_b_prod_prod_prod_llist$)
(declare-fun iterates$c (A_a_b_prod_prod_a_a_b_prod_prod_fun$ A_a_b_prod_prod$) A_a_b_prod_prod_llist$)
(declare-fun iterates$d (A_a_prod_a_a_prod_fun$ A_a_prod$) A_a_prod_llist$)
(declare-fun iterates$e (A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ A_b_prod_a_b_prod_prod$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun iterates$f (A_a_fun$ A$) A_llist$)
(declare-fun iterates$g (B_b_fun$ B$) B_llist$)
(declare-fun iterates$h (A_b_prod_a_b_prod_fun$ A_b_prod$) A_b_prod_llist$)
(assert (! (not (= (fun_app$ (lappend$ us$) vs$) us$)) :named a0))
(assert (! (not (lfinite$ us$)) :named a1))
(assert (! (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$) (?v2 B_b_prod_llist$)) (= (fun_app$a (lappend$a (fun_app$a (lappend$a ?v0) ?v1)) ?v2) (fun_app$a (lappend$a ?v0) (fun_app$a (lappend$a ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$) (?v2 B_a_prod_llist$)) (= (fun_app$b (lappend$b (fun_app$b (lappend$b ?v0) ?v1)) ?v2) (fun_app$b (lappend$b ?v0) (fun_app$b (lappend$b ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_llist$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$) (?v2 A_a_b_prod_a_b_prod_prod_prod_llist$)) (= (fun_app$c (lappend$c (fun_app$c (lappend$c ?v0) ?v1)) ?v2) (fun_app$c (lappend$c ?v0) (fun_app$c (lappend$c ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$) (?v2 A_a_b_prod_prod_llist$)) (= (fun_app$d (lappend$d (fun_app$d (lappend$d ?v0) ?v1)) ?v2) (fun_app$d (lappend$d ?v0) (fun_app$d (lappend$d ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (= (fun_app$e (lappend$e (fun_app$e (lappend$e ?v0) ?v1)) ?v2) (fun_app$e (lappend$e ?v0) (fun_app$e (lappend$e ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$) (?v1 A_b_prod_a_b_prod_prod_llist$) (?v2 A_b_prod_a_b_prod_prod_llist$)) (= (fun_app$f (lappend$f (fun_app$f (lappend$f ?v0) ?v1)) ?v2) (fun_app$f (lappend$f ?v0) (fun_app$f (lappend$f ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$g (lappend$g (fun_app$g (lappend$g ?v0) ?v1)) ?v2) (fun_app$g (lappend$g ?v0) (fun_app$g (lappend$g ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (= (fun_app$h (lappend$h (fun_app$h (lappend$h ?v0) ?v1)) ?v2) (fun_app$h (lappend$h ?v0) (fun_app$h (lappend$h ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0) ?v1)) ?v2) (fun_app$ (lappend$ ?v0) (fun_app$ (lappend$ ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$)) (= (lfinite$a (fun_app$a (lappend$a ?v0) ?v1)) (and (lfinite$a ?v0) (lfinite$a ?v1)))) :named a11))
(assert (! (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$)) (= (lfinite$b (fun_app$b (lappend$b ?v0) ?v1)) (and (lfinite$b ?v0) (lfinite$b ?v1)))) :named a12))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_llist$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$)) (= (lfinite$c (fun_app$c (lappend$c ?v0) ?v1)) (and (lfinite$c ?v0) (lfinite$c ?v1)))) :named a13))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$)) (= (lfinite$d (fun_app$d (lappend$d ?v0) ?v1)) (and (lfinite$d ?v0) (lfinite$d ?v1)))) :named a14))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lfinite$e (fun_app$e (lappend$e ?v0) ?v1)) (and (lfinite$e ?v0) (lfinite$e ?v1)))) :named a15))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$) (?v1 A_b_prod_a_b_prod_prod_llist$)) (= (lfinite$f (fun_app$f (lappend$f ?v0) ?v1)) (and (lfinite$f ?v0) (lfinite$f ?v1)))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$g (fun_app$g (lappend$g ?v0) ?v1)) (and (lfinite$g ?v0) (lfinite$g ?v1)))) :named a17))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (lfinite$h (fun_app$h (lappend$h ?v0) ?v1)) (and (lfinite$h ?v0) (lfinite$h ?v1)))) :named a18))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (lfinite$ (fun_app$ (lappend$ ?v0) ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1)))) :named a19))
(assert (! (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$)) (! (=> (not (lfinite$a ?v0)) (= (fun_app$a (lappend$a ?v0) ?v1) ?v0)) :pattern ((fun_app$a (lappend$a ?v0) ?v1)))) :named a20))
(assert (! (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$)) (! (=> (not (lfinite$b ?v0)) (= (fun_app$b (lappend$b ?v0) ?v1) ?v0)) :pattern ((fun_app$b (lappend$b ?v0) ?v1)))) :named a21))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_llist$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$)) (! (=> (not (lfinite$c ?v0)) (= (fun_app$c (lappend$c ?v0) ?v1) ?v0)) :pattern ((fun_app$c (lappend$c ?v0) ?v1)))) :named a22))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$)) (! (=> (not (lfinite$d ?v0)) (= (fun_app$d (lappend$d ?v0) ?v1) ?v0)) :pattern ((fun_app$d (lappend$d ?v0) ?v1)))) :named a23))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (! (=> (not (lfinite$e ?v0)) (= (fun_app$e (lappend$e ?v0) ?v1) ?v0)) :pattern ((fun_app$e (lappend$e ?v0) ?v1)))) :named a24))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$) (?v1 A_b_prod_a_b_prod_prod_llist$)) (! (=> (not (lfinite$f ?v0)) (= (fun_app$f (lappend$f ?v0) ?v1) ?v0)) :pattern ((fun_app$f (lappend$f ?v0) ?v1)))) :named a25))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$g ?v0)) (= (fun_app$g (lappend$g ?v0) ?v1) ?v0)) :pattern ((fun_app$g (lappend$g ?v0) ?v1)))) :named a26))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (=> (not (lfinite$h ?v0)) (= (fun_app$h (lappend$h ?v0) ?v1) ?v0)) :pattern ((fun_app$h (lappend$h ?v0) ?v1)))) :named a27))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (! (=> (not (lfinite$ ?v0)) (= (fun_app$ (lappend$ ?v0) ?v1) ?v0)) :pattern ((fun_app$ (lappend$ ?v0) ?v1)))) :named a28))
(assert (! (= (lzip$ xs$ ys$) (fun_app$ (lappend$ us$) vs$)) :named a29))
(assert (! (= (llength$ (lzip$ xs$ ys$)) (llength$ (fun_app$ (lappend$ us$) vs$))) :named a30))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_fun$) (?v1 B_b_prod$) (?v2 B_b_prod_llist$)) (= (fun_app$a (lappend$a (iterates$ ?v0 ?v1)) ?v2) (iterates$ ?v0 ?v1))) :named a31))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_fun$) (?v1 B_a_prod$) (?v2 B_a_prod_llist$)) (= (fun_app$b (lappend$b (iterates$a ?v0 ?v1)) ?v2) (iterates$a ?v0 ?v1))) :named a32))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_a_a_b_prod_a_b_prod_prod_prod_fun$) (?v1 A_a_b_prod_a_b_prod_prod_prod$) (?v2 A_a_b_prod_a_b_prod_prod_prod_llist$)) (= (fun_app$c (lappend$c (iterates$b ?v0 ?v1)) ?v2) (iterates$b ?v0 ?v1))) :named a33))
(assert (! (forall ((?v0 A_a_b_prod_prod_a_a_b_prod_prod_fun$) (?v1 A_a_b_prod_prod$) (?v2 A_a_b_prod_prod_llist$)) (= (fun_app$d (lappend$d (iterates$c ?v0 ?v1)) ?v2) (iterates$c ?v0 ?v1))) :named a34))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (= (fun_app$e (lappend$e (iterates$d ?v0 ?v1)) ?v2) (iterates$d ?v0 ?v1))) :named a35))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_a_b_prod_a_b_prod_prod_fun$) (?v1 A_b_prod_a_b_prod_prod$) (?v2 A_b_prod_a_b_prod_prod_llist$)) (= (fun_app$f (lappend$f (iterates$e ?v0 ?v1)) ?v2) (iterates$e ?v0 ?v1))) :named a36))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$g (lappend$g (iterates$f ?v0 ?v1)) ?v2) (iterates$f ?v0 ?v1))) :named a37))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$) (?v2 B_llist$)) (= (fun_app$h (lappend$h (iterates$g ?v0 ?v1)) ?v2) (iterates$g ?v0 ?v1))) :named a38))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod$) (?v2 A_b_prod_llist$)) (= (fun_app$ (lappend$ (iterates$h ?v0 ?v1)) ?v2) (iterates$h ?v0 ?v1))) :named a39))
(assert (! (forall ((?v0 B_b_prod_llist$)) (! (= (fun_app$a (lappend$a ?v0) lNil$a) ?v0) :pattern ((lappend$a ?v0)))) :named a40))
(assert (! (forall ((?v0 B_a_prod_llist$)) (! (= (fun_app$b (lappend$b ?v0) lNil$b) ?v0) :pattern ((lappend$b ?v0)))) :named a41))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_llist$)) (! (= (fun_app$c (lappend$c ?v0) lNil$c) ?v0) :pattern ((lappend$c ?v0)))) :named a42))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$)) (! (= (fun_app$d (lappend$d ?v0) lNil$d) ?v0) :pattern ((lappend$d ?v0)))) :named a43))
(assert (! (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$e (lappend$e ?v0) lNil$e) ?v0) :pattern ((lappend$e ?v0)))) :named a44))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$)) (! (= (fun_app$f (lappend$f ?v0) lNil$f) ?v0) :pattern ((lappend$f ?v0)))) :named a45))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$g (lappend$g ?v0) lNil$g) ?v0) :pattern ((lappend$g ?v0)))) :named a46))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$h (lappend$h ?v0) lNil$h) ?v0) :pattern ((lappend$h ?v0)))) :named a47))
(assert (! (forall ((?v0 A_b_prod_llist$)) (! (= (fun_app$ (lappend$ ?v0) lNil$) ?v0) :pattern ((lappend$ ?v0)))) :named a48))
(assert (! (forall ((?v0 B_b_prod_llist$)) (! (= (fun_app$a (lappend$a lNil$a) ?v0) ?v0) :pattern ((fun_app$a (lappend$a lNil$a) ?v0)))) :named a49))
(assert (! (forall ((?v0 B_a_prod_llist$)) (! (= (fun_app$b (lappend$b lNil$b) ?v0) ?v0) :pattern ((fun_app$b (lappend$b lNil$b) ?v0)))) :named a50))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_llist$)) (! (= (fun_app$c (lappend$c lNil$c) ?v0) ?v0) :pattern ((fun_app$c (lappend$c lNil$c) ?v0)))) :named a51))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$)) (! (= (fun_app$d (lappend$d lNil$d) ?v0) ?v0) :pattern ((fun_app$d (lappend$d lNil$d) ?v0)))) :named a52))
(assert (! (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$e (lappend$e lNil$e) ?v0) ?v0) :pattern ((fun_app$e (lappend$e lNil$e) ?v0)))) :named a53))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$)) (! (= (fun_app$f (lappend$f lNil$f) ?v0) ?v0) :pattern ((fun_app$f (lappend$f lNil$f) ?v0)))) :named a54))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$g (lappend$g lNil$g) ?v0) ?v0) :pattern ((fun_app$g (lappend$g lNil$g) ?v0)))) :named a55))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$h (lappend$h lNil$h) ?v0) ?v0) :pattern ((fun_app$h (lappend$h lNil$h) ?v0)))) :named a56))
(assert (! (forall ((?v0 A_b_prod_llist$)) (! (= (fun_app$ (lappend$ lNil$) ?v0) ?v0) :pattern ((fun_app$ (lappend$ lNil$) ?v0)))) :named a57))
(assert (! (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$)) (= (not (lnull$ (fun_app$a (lappend$a ?v0) ?v1))) (or (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a58))
(assert (! (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$)) (= (not (lnull$a (fun_app$b (lappend$b ?v0) ?v1))) (or (not (lnull$a ?v0)) (not (lnull$a ?v1))))) :named a59))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_llist$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$)) (= (not (lnull$b (fun_app$c (lappend$c ?v0) ?v1))) (or (not (lnull$b ?v0)) (not (lnull$b ?v1))))) :named a60))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$)) (= (not (lnull$c (fun_app$d (lappend$d ?v0) ?v1))) (or (not (lnull$c ?v0)) (not (lnull$c ?v1))))) :named a61))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$d (fun_app$e (lappend$e ?v0) ?v1))) (or (not (lnull$d ?v0)) (not (lnull$d ?v1))))) :named a62))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$) (?v1 A_b_prod_a_b_prod_prod_llist$)) (= (not (lnull$e (fun_app$f (lappend$f ?v0) ?v1))) (or (not (lnull$e ?v0)) (not (lnull$e ?v1))))) :named a63))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$f (fun_app$g (lappend$g ?v0) ?v1))) (or (not (lnull$f ?v0)) (not (lnull$f ?v1))))) :named a64))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (not (lnull$g (fun_app$h (lappend$h ?v0) ?v1))) (or (not (lnull$g ?v0)) (not (lnull$g ?v1))))) :named a65))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (not (lnull$h (fun_app$ (lappend$ ?v0) ?v1))) (or (not (lnull$h ?v0)) (not (lnull$h ?v1))))) :named a66))
(assert (! (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$)) (= (lnull$ (fun_app$a (lappend$a ?v0) ?v1)) (and (lnull$ ?v0) (lnull$ ?v1)))) :named a67))
(assert (! (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$)) (= (lnull$a (fun_app$b (lappend$b ?v0) ?v1)) (and (lnull$a ?v0) (lnull$a ?v1)))) :named a68))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_llist$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$)) (= (lnull$b (fun_app$c (lappend$c ?v0) ?v1)) (and (lnull$b ?v0) (lnull$b ?v1)))) :named a69))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$)) (= (lnull$c (fun_app$d (lappend$d ?v0) ?v1)) (and (lnull$c ?v0) (lnull$c ?v1)))) :named a70))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lnull$d (fun_app$e (lappend$e ?v0) ?v1)) (and (lnull$d ?v0) (lnull$d ?v1)))) :named a71))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$) (?v1 A_b_prod_a_b_prod_prod_llist$)) (= (lnull$e (fun_app$f (lappend$f ?v0) ?v1)) (and (lnull$e ?v0) (lnull$e ?v1)))) :named a72))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$f (fun_app$g (lappend$g ?v0) ?v1)) (and (lnull$f ?v0) (lnull$f ?v1)))) :named a73))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (lnull$g (fun_app$h (lappend$h ?v0) ?v1)) (and (lnull$g ?v0) (lnull$g ?v1)))) :named a74))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (lnull$h (fun_app$ (lappend$ ?v0) ?v1)) (and (lnull$h ?v0) (lnull$h ?v1)))) :named a75))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_llist$) (?v2 B_b_prod_llist$)) (! (= (fun_app$a (lappend$a (lCons$a ?v0 ?v1)) ?v2) (lCons$a ?v0 (fun_app$a (lappend$a ?v1) ?v2))) :pattern ((fun_app$a (lappend$a (lCons$a ?v0 ?v1)) ?v2)))) :named a76))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_llist$) (?v2 B_a_prod_llist$)) (! (= (fun_app$b (lappend$b (lCons$b ?v0 ?v1)) ?v2) (lCons$b ?v0 (fun_app$b (lappend$b ?v1) ?v2))) :pattern ((fun_app$b (lappend$b (lCons$b ?v0 ?v1)) ?v2)))) :named a77))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$) (?v2 A_a_b_prod_a_b_prod_prod_prod_llist$)) (! (= (fun_app$c (lappend$c (lCons$c ?v0 ?v1)) ?v2) (lCons$c ?v0 (fun_app$c (lappend$c ?v1) ?v2))) :pattern ((fun_app$c (lappend$c (lCons$c ?v0 ?v1)) ?v2)))) :named a78))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_b_prod_prod_llist$) (?v2 A_a_b_prod_prod_llist$)) (! (= (fun_app$d (lappend$d (lCons$d ?v0 ?v1)) ?v2) (lCons$d ?v0 (fun_app$d (lappend$d ?v1) ?v2))) :pattern ((fun_app$d (lappend$d (lCons$d ?v0 ?v1)) ?v2)))) :named a79))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (! (= (fun_app$e (lappend$e (lCons$e ?v0 ?v1)) ?v2) (lCons$e ?v0 (fun_app$e (lappend$e ?v1) ?v2))) :pattern ((fun_app$e (lappend$e (lCons$e ?v0 ?v1)) ?v2)))) :named a80))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$) (?v1 A_b_prod_a_b_prod_prod_llist$) (?v2 A_b_prod_a_b_prod_prod_llist$)) (! (= (fun_app$f (lappend$f (lCons$f ?v0 ?v1)) ?v2) (lCons$f ?v0 (fun_app$f (lappend$f ?v1) ?v2))) :pattern ((fun_app$f (lappend$f (lCons$f ?v0 ?v1)) ?v2)))) :named a81))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$g (lappend$g (lCons$g ?v0 ?v1)) ?v2) (lCons$g ?v0 (fun_app$g (lappend$g ?v1) ?v2))) :pattern ((fun_app$g (lappend$g (lCons$g ?v0 ?v1)) ?v2)))) :named a82))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B_llist$)) (! (= (fun_app$h (lappend$h (lCons$h ?v0 ?v1)) ?v2) (lCons$h ?v0 (fun_app$h (lappend$h ?v1) ?v2))) :pattern ((fun_app$h (lappend$h (lCons$h ?v0 ?v1)) ?v2)))) :named a83))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (! (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1)) ?v2) (lCons$ ?v0 (fun_app$ (lappend$ ?v1) ?v2))) :pattern ((fun_app$ (lappend$ (lCons$ ?v0 ?v1)) ?v2)))) :named a84))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_llist$)) (=> (= (llength$a ?v0) (llength$b ?v1)) (= (lzip$ (fun_app$g (lappend$g ?v0) ?v2) (fun_app$h (lappend$h ?v1) ?v3)) (fun_app$ (lappend$ (lzip$ ?v0 ?v1)) (lzip$ ?v2 ?v3))))) :named a85))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$) (?v3 A_b_prod_llist$)) (=> (= (llength$ ?v0) (llength$ ?v1)) (= (lzip$a (fun_app$ (lappend$ ?v0) ?v2) (fun_app$ (lappend$ ?v1) ?v3)) (fun_app$f (lappend$f (lzip$a ?v0 ?v1)) (lzip$a ?v2 ?v3))))) :named a86))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (= (llength$a ?v0) (llength$a ?v1)) (= (lzip$b (fun_app$g (lappend$g ?v0) ?v2) (fun_app$g (lappend$g ?v1) ?v3)) (fun_app$e (lappend$e (lzip$b ?v0 ?v1)) (lzip$b ?v2 ?v3))))) :named a87))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_llist$)) (=> (= (llength$b ?v0) (llength$a ?v1)) (= (lzip$c (fun_app$h (lappend$h ?v0) ?v2) (fun_app$g (lappend$g ?v1) ?v3)) (fun_app$b (lappend$b (lzip$c ?v0 ?v1)) (lzip$c ?v2 ?v3))))) :named a88))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_llist$)) (=> (= (llength$b ?v0) (llength$b ?v1)) (= (lzip$d (fun_app$h (lappend$h ?v0) ?v2) (fun_app$h (lappend$h ?v1) ?v3)) (fun_app$a (lappend$a (lzip$d ?v0 ?v1)) (lzip$d ?v2 ?v3))))) :named a89))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_llist$) (?v2 A_b_prod_llist$) (?v3 A_llist$)) (=> (= (llength$ ?v0) (llength$a ?v1)) (= (lzip$e (fun_app$ (lappend$ ?v0) ?v2) (fun_app$g (lappend$g ?v1) ?v3)) (lappend$i (lzip$e ?v0 ?v1) (lzip$e ?v2 ?v3))))) :named a90))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 B_llist$) (?v2 A_b_prod_llist$) (?v3 B_llist$)) (=> (= (llength$ ?v0) (llength$b ?v1)) (= (lzip$f (fun_app$ (lappend$ ?v0) ?v2) (fun_app$h (lappend$h ?v1) ?v3)) (lappend$j (lzip$f ?v0 ?v1) (lzip$f ?v2 ?v3))))) :named a91))
(assert (! (forall ((?v0 A_llist$) (?v1 A_b_prod_llist$) (?v2 A_llist$) (?v3 A_b_prod_llist$)) (=> (= (llength$a ?v0) (llength$ ?v1)) (= (lzip$g (fun_app$g (lappend$g ?v0) ?v2) (fun_app$ (lappend$ ?v1) ?v3)) (fun_app$d (lappend$d (lzip$g ?v0 ?v1)) (lzip$g ?v2 ?v3))))) :named a92))
(assert (! (forall ((?v0 B_llist$) (?v1 A_b_prod_llist$) (?v2 B_llist$) (?v3 A_b_prod_llist$)) (=> (= (llength$b ?v0) (llength$ ?v1)) (= (lzip$h (fun_app$h (lappend$h ?v0) ?v2) (fun_app$ (lappend$ ?v1) ?v3)) (lappend$k (lzip$h ?v0 ?v1) (lzip$h ?v2 ?v3))))) :named a93))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$) (?v1 A_llist$) (?v2 A_b_prod_a_b_prod_prod_llist$) (?v3 A_llist$)) (=> (= (llength$c ?v0) (llength$a ?v1)) (= (lzip$i (fun_app$f (lappend$f ?v0) ?v2) (fun_app$g (lappend$g ?v1) ?v3)) (lappend$l (lzip$i ?v0 ?v1) (lzip$i ?v2 ?v3))))) :named a94))
(assert (! (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$)) (= (= lNil$a (fun_app$a (lappend$a ?v0) ?v1)) (and (= ?v0 lNil$a) (= ?v1 lNil$a)))) :named a95))
(assert (! (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$)) (= (= lNil$b (fun_app$b (lappend$b ?v0) ?v1)) (and (= ?v0 lNil$b) (= ?v1 lNil$b)))) :named a96))
(assert (! (forall ((?v0 A_a_b_prod_a_b_prod_prod_prod_llist$) (?v1 A_a_b_prod_a_b_prod_prod_prod_llist$)) (= (= lNil$c (fun_app$c (lappend$c ?v0) ?v1)) (and (= ?v0 lNil$c) (= ?v1 lNil$c)))) :named a97))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$)) (= (= lNil$d (fun_app$d (lappend$d ?v0) ?v1)) (and (= ?v0 lNil$d) (= ?v1 lNil$d)))) :named a98))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (= lNil$e (fun_app$e (lappend$e ?v0) ?v1)) (and (= ?v0 lNil$e) (= ?v1 lNil$e)))) :named a99))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$) (?v1 A_b_prod_a_b_prod_prod_llist$)) (= (= lNil$f (fun_app$f (lappend$f ?v0) ?v1)) (and (= ?v0 lNil$f) (= ?v1 lNil$f)))) :named a100))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= lNil$g (fun_app$g (lappend$g ?v0) ?v1)) (and (= ?v0 lNil$g) (= ?v1 lNil$g)))) :named a101))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (= lNil$h (fun_app$h (lappend$h ?v0) ?v1)) (and (= ?v0 lNil$h) (= ?v1 lNil$h)))) :named a102))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (= lNil$ (fun_app$ (lappend$ ?v0) ?v1)) (and (= ?v0 lNil$) (= ?v1 lNil$)))) :named a103))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (= (= (lCons$h ?v0 ?v1) (lCons$h ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a104))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$g ?v0 ?v1) (lCons$g ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a105))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$) (?v1 A_b_prod_a_b_prod_prod_llist$) (?v2 A_b_prod_a_b_prod_prod$) (?v3 A_b_prod_a_b_prod_prod_llist$)) (= (= (lCons$f ?v0 ?v1) (lCons$f ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a106))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$) (?v2 A_b_prod$) (?v3 A_b_prod_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a107))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (! (= (lfinite$h (lCons$h ?v0 ?v1)) (lfinite$h ?v1)) :pattern ((lCons$h ?v0 ?v1)))) :named a108))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$g (lCons$g ?v0 ?v1)) (lfinite$g ?v1)) :pattern ((lCons$g ?v0 ?v1)))) :named a109))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$) (?v1 A_b_prod_a_b_prod_prod_llist$)) (! (= (lfinite$f (lCons$f ?v0 ?v1)) (lfinite$f ?v1)) :pattern ((lCons$f ?v0 ?v1)))) :named a110))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a111))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (! (= (lfinite$h (lCons$h ?v0 ?v1)) (lfinite$h ?v1)) :pattern ((lCons$h ?v0 ?v1)))) :named a112))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$g (lCons$g ?v0 ?v1)) (lfinite$g ?v1)) :pattern ((lCons$g ?v0 ?v1)))) :named a113))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$) (?v1 A_b_prod_a_b_prod_prod_llist$)) (! (= (lfinite$f (lCons$f ?v0 ?v1)) (lfinite$f ?v1)) :pattern ((lCons$f ?v0 ?v1)))) :named a114))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a115))
(check-sat)
;(get-unsat-core)
