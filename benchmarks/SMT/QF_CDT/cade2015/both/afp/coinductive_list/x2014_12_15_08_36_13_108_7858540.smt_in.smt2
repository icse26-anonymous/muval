; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 206
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_nat_fun$ 0)
(declare-sort B_nat_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_b_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))
  (Nat_list$ (nil$a) (cons$a (hd$a Nat$) (tl$a Nat_list$)))
  (B_list$ (nil$b) (cons$b (hd$b B$) (tl$b B_list$)))))
(declare-fun x$ () B$)
(declare-fun fa$ () Nat_a_fun$)
(declare-fun uu$ () Nat_a_fun$)
(declare-fun map$ (Nat_a_fun$ Nat_list$) A_list$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun upt$ (Nat$ Nat$) Nat_list$)
(declare-fun uua$ () B_b_fun$)
(declare-fun uub$ () A_a_fun$)
(declare-fun uuc$ () Nat_nat_fun$)
(declare-fun xsa$ () B_list$)
(declare-fun map$a (Nat_b_fun$ Nat_list$) B_list$)
(declare-fun map$b (A_b_fun$ A_list$) B_list$)
(declare-fun map$c (B_nat_fun$ B_list$) Nat_list$)
(declare-fun map$d (A_nat_fun$ A_list$) Nat_list$)
(declare-fun map$e (B_a_fun$ B_list$) A_list$)
(declare-fun map$f (A_a_fun$ A_list$) A_list$)
(declare-fun map$g (Nat_nat_fun$ Nat_list$) Nat_list$)
(declare-fun map$h (B_b_fun$ B_list$) B_list$)
(declare-fun size$ (B_list$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun size$a (Nat_list$) Nat$)
(declare-fun size$b (A_list$) Nat$)
(declare-fun fun_app$ (Nat_a_fun$ Nat$) A$)
(declare-fun fun_app$a (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$b (B_b_fun$ B$) B$)
(declare-fun fun_app$c (A_a_fun$ A$) A$)
(declare-fun fun_app$d (B_nat_fun$ B$) Nat$)
(declare-fun fun_app$e (A_nat_fun$ A$) Nat$)
(declare-fun fun_app$f (Nat_b_fun$ Nat$) B$)
(declare-fun fun_app$g (B_a_fun$ B$) A$)
(declare-fun fun_app$h (A_b_fun$ A$) B$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (fun_app$ fa$ (fun_app$a suc$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a uuc$ ?v0) ?v0) :pattern ((fun_app$a uuc$ ?v0)))) :named a1))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$b uua$ ?v0) ?v0) :pattern ((fun_app$b uua$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$c uub$ ?v0) ?v0) :pattern ((fun_app$c uub$ ?v0)))) :named a3))
(assert (! (not (= (map$ fa$ (upt$ zero$ (size$ (cons$b x$ xsa$)))) (cons$ (fun_app$ fa$ zero$) (map$ uu$ (upt$ zero$ (size$ xsa$)))))) :named a4))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 Nat_list$)) (= (size$ (map$a ?v0 ?v1)) (size$a ?v1))) :named a5))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_list$)) (= (size$ (map$b ?v0 ?v1)) (size$b ?v1))) :named a6))
(assert (! (forall ((?v0 B_nat_fun$) (?v1 B_list$)) (= (size$a (map$c ?v0 ?v1)) (size$ ?v1))) :named a7))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A_list$)) (= (size$a (map$d ?v0 ?v1)) (size$b ?v1))) :named a8))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_list$)) (= (size$b (map$e ?v0 ?v1)) (size$ ?v1))) :named a9))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_list$)) (= (size$b (map$f ?v0 ?v1)) (size$b ?v1))) :named a10))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_list$)) (= (size$b (map$ ?v0 ?v1)) (size$a ?v1))) :named a11))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_list$)) (= (size$a (map$g ?v0 ?v1)) (size$a ?v1))) :named a12))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_list$)) (= (size$ (map$h ?v0 ?v1)) (size$ ?v1))) :named a13))
(assert (! (forall ((?v0 B_list$)) (= (map$h uua$ ?v0) ?v0)) :named a14))
(assert (! (forall ((?v0 A_list$)) (= (map$f uub$ ?v0) ?v0)) :named a15))
(assert (! (forall ((?v0 Nat_list$)) (= (map$g uuc$ ?v0) ?v0)) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (= (= (fun_app$a suc$ ?v0) (size$a ?v1)) (exists ((?v2 Nat$) (?v3 Nat_list$)) (and (= ?v1 (cons$a ?v2 ?v3)) (= (size$a ?v3) ?v0))))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 A_list$)) (= (= (fun_app$a suc$ ?v0) (size$b ?v1)) (exists ((?v2 A$) (?v3 A_list$)) (and (= ?v1 (cons$ ?v2 ?v3)) (= (size$b ?v3) ?v0))))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 B_list$)) (= (= (fun_app$a suc$ ?v0) (size$ ?v1)) (exists ((?v2 B$) (?v3 B_list$)) (and (= ?v1 (cons$b ?v2 ?v3)) (= (size$ ?v3) ?v0))))) :named a19))
(assert (! (forall ((?v0 Nat_list$) (?v1 Nat$)) (= (= (size$a ?v0) (fun_app$a suc$ ?v1)) (exists ((?v2 Nat$) (?v3 Nat_list$)) (and (= ?v0 (cons$a ?v2 ?v3)) (= (size$a ?v3) ?v1))))) :named a20))
(assert (! (forall ((?v0 A_list$) (?v1 Nat$)) (= (= (size$b ?v0) (fun_app$a suc$ ?v1)) (exists ((?v2 A$) (?v3 A_list$)) (and (= ?v0 (cons$ ?v2 ?v3)) (= (size$b ?v3) ?v1))))) :named a21))
(assert (! (forall ((?v0 B_list$) (?v1 Nat$)) (= (= (size$ ?v0) (fun_app$a suc$ ?v1)) (exists ((?v2 B$) (?v3 B_list$)) (and (= ?v0 (cons$b ?v2 ?v3)) (= (size$ ?v3) ?v1))))) :named a22))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (! (= (size$a (cons$a ?v0 ?v1)) (fun_app$a suc$ (size$a ?v1))) :pattern ((cons$a ?v0 ?v1)))) :named a23))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (= (size$b (cons$ ?v0 ?v1)) (fun_app$a suc$ (size$b ?v1))) :pattern ((cons$ ?v0 ?v1)))) :named a24))
(assert (! (forall ((?v0 B$) (?v1 B_list$)) (! (= (size$ (cons$b ?v0 ?v1)) (fun_app$a suc$ (size$ ?v1))) :pattern ((cons$b ?v0 ?v1)))) :named a25))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a suc$ ?v0) (fun_app$a suc$ ?v1)) (= ?v0 ?v1))) :named a26))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a suc$ ?v0) (fun_app$a suc$ ?v1)) (= ?v0 ?v1))) :named a27))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$) (?v2 Nat$) (?v3 Nat_list$)) (= (= (cons$a ?v0 ?v1) (cons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a28))
(assert (! (forall ((?v0 B$) (?v1 B_list$) (?v2 B$) (?v3 B_list$)) (= (= (cons$b ?v0 ?v1) (cons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a29))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a30))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_list$) (?v2 Nat_a_fun$) (?v3 Nat_list$)) (=> (= (map$ ?v0 ?v1) (map$ ?v2 ?v3)) (= (size$a ?v1) (size$a ?v3)))) :named a31))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_list$) (?v2 Nat_nat_fun$) (?v3 Nat_list$)) (=> (= (map$g ?v0 ?v1) (map$g ?v2 ?v3)) (= (size$a ?v1) (size$a ?v3)))) :named a32))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_list$) (?v2 B_a_fun$) (?v3 B_list$)) (=> (= (map$ ?v0 ?v1) (map$e ?v2 ?v3)) (= (size$a ?v1) (size$ ?v3)))) :named a33))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_list$) (?v2 B_nat_fun$) (?v3 B_list$)) (=> (= (map$g ?v0 ?v1) (map$c ?v2 ?v3)) (= (size$a ?v1) (size$ ?v3)))) :named a34))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_list$) (?v2 Nat_a_fun$) (?v3 Nat_list$)) (=> (= (map$e ?v0 ?v1) (map$ ?v2 ?v3)) (= (size$ ?v1) (size$a ?v3)))) :named a35))
(assert (! (forall ((?v0 B_nat_fun$) (?v1 B_list$) (?v2 Nat_nat_fun$) (?v3 Nat_list$)) (=> (= (map$c ?v0 ?v1) (map$g ?v2 ?v3)) (= (size$ ?v1) (size$a ?v3)))) :named a36))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_list$) (?v2 B_b_fun$) (?v3 B_list$)) (=> (= (map$h ?v0 ?v1) (map$h ?v2 ?v3)) (= (size$ ?v1) (size$ ?v3)))) :named a37))
(assert (! (forall ((?v0 B_nat_fun$) (?v1 B_list$) (?v2 B_nat_fun$) (?v3 B_list$)) (=> (= (map$c ?v0 ?v1) (map$c ?v2 ?v3)) (= (size$ ?v1) (size$ ?v3)))) :named a38))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_list$) (?v2 B_a_fun$) (?v3 B_list$)) (=> (= (map$e ?v0 ?v1) (map$e ?v2 ?v3)) (= (size$ ?v1) (size$ ?v3)))) :named a39))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_list$) (?v2 Nat_b_fun$) (?v3 Nat_list$)) (=> (= (map$h ?v0 ?v1) (map$a ?v2 ?v3)) (= (size$ ?v1) (size$a ?v3)))) :named a40))
(assert (! (forall ((?v0 B_nat_fun$) (?v1 B$) (?v2 B_list$)) (! (= (map$c ?v0 (cons$b ?v1 ?v2)) (cons$a (fun_app$d ?v0 ?v1) (map$c ?v0 ?v2))) :pattern ((map$c ?v0 (cons$b ?v1 ?v2))))) :named a41))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A$) (?v2 A_list$)) (! (= (map$d ?v0 (cons$ ?v1 ?v2)) (cons$a (fun_app$e ?v0 ?v1) (map$d ?v0 ?v2))) :pattern ((map$d ?v0 (cons$ ?v1 ?v2))))) :named a42))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 Nat$) (?v2 Nat_list$)) (! (= (map$a ?v0 (cons$a ?v1 ?v2)) (cons$b (fun_app$f ?v0 ?v1) (map$a ?v0 ?v2))) :pattern ((map$a ?v0 (cons$a ?v1 ?v2))))) :named a43))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat_list$)) (! (= (map$g ?v0 (cons$a ?v1 ?v2)) (cons$a (fun_app$a ?v0 ?v1) (map$g ?v0 ?v2))) :pattern ((map$g ?v0 (cons$a ?v1 ?v2))))) :named a44))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat$) (?v2 Nat_list$)) (! (= (map$ ?v0 (cons$a ?v1 ?v2)) (cons$ (fun_app$ ?v0 ?v1) (map$ ?v0 ?v2))) :pattern ((map$ ?v0 (cons$a ?v1 ?v2))))) :named a45))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$) (?v2 B_list$)) (! (= (map$h ?v0 (cons$b ?v1 ?v2)) (cons$b (fun_app$b ?v0 ?v1) (map$h ?v0 ?v2))) :pattern ((map$h ?v0 (cons$b ?v1 ?v2))))) :named a46))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B$) (?v2 B_list$)) (! (= (map$e ?v0 (cons$b ?v1 ?v2)) (cons$ (fun_app$g ?v0 ?v1) (map$e ?v0 ?v2))) :pattern ((map$e ?v0 (cons$b ?v1 ?v2))))) :named a47))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A$) (?v2 A_list$)) (! (= (map$b ?v0 (cons$ ?v1 ?v2)) (cons$b (fun_app$h ?v0 ?v1) (map$b ?v0 ?v2))) :pattern ((map$b ?v0 (cons$ ?v1 ?v2))))) :named a48))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_list$)) (! (= (map$f ?v0 (cons$ ?v1 ?v2)) (cons$ (fun_app$c ?v0 ?v1) (map$f ?v0 ?v2))) :pattern ((map$f ?v0 (cons$ ?v1 ?v2))))) :named a49))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (map$g suc$ (upt$ ?v0 ?v1)) (upt$ (fun_app$a suc$ ?v0) (fun_app$a suc$ ?v1)))) :named a50))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a51))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (not (= (cons$a ?v0 ?v1) ?v1))) :named a52))
(assert (! (forall ((?v0 B$) (?v1 B_list$)) (not (= (cons$b ?v0 ?v1) ?v1))) :named a53))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (not (= (cons$ ?v0 ?v1) ?v1))) :named a54))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a55))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (fun_app$a suc$ ?v0)))) :named a56))
(check-sat)
;(get-unsat-core)
