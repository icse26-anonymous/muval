; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 648
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun fa$ () Nat_a_fun$)
(declare-fun na$ () Nat$)
(declare-fun uu$ () Nat_a_fun$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun uua$ (Nat_a_fun$) Nat_a_fun$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun plus$a (Enat$ Enat$) Enat$)
(declare-fun fun_app$ (Nat_a_fun$ Nat$) A$)
(declare-fun inf_llist$ (Nat_a_fun$) A_llist$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (fun_app$ fa$ (plus$ ?v0 (suc$ na$)))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (fun_app$ ?v0 (plus$ ?v1 na$))) :pattern ((fun_app$ (uua$ ?v0) ?v1)))) :named a1))
(assert (! (not (= (ldrop$ (enat$ (suc$ na$)) (inf_llist$ fa$)) (inf_llist$ uu$))) :named a2))
(assert (! (forall ((?v0 Nat_a_fun$)) (= (ldrop$ (enat$ na$) (inf_llist$ ?v0)) (inf_llist$ (uua$ ?v0)))) :named a3))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_a_fun$)) (= (= (inf_llist$ ?v0) (inf_llist$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (plus$ ?v0 (suc$ ?v1)) (suc$ (plus$ ?v0 ?v1))) :pattern ((plus$ ?v0 (suc$ ?v1))))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (plus$ (suc$ ?v0) ?v1) (plus$ ?v0 (suc$ ?v1))) :pattern ((plus$ (suc$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (plus$ (suc$ ?v0) ?v1) (suc$ (plus$ ?v0 ?v1))) :pattern ((plus$ (suc$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_llist$)) (= (ldrop$ ?v0 (ldrop$ ?v1 ?v2)) (ldrop$ (plus$a ?v0 ?v1) ?v2))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (plus$a (enat$ ?v0) (enat$ ?v1)) (enat$ (plus$ ?v0 ?v1))) :pattern ((plus$a (enat$ ?v0) (enat$ ?v1))))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$) (?v3 Nat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (plus$ ?v0 ?v2) (plus$ ?v1 ?v3)))) :named a18))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (plus$a ?v0 ?v2) (plus$a ?v1 ?v3)))) :named a19))
(check-sat)
;(get-unsat-core)
