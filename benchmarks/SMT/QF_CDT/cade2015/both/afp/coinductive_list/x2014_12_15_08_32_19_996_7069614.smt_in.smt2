; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 559
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Enat_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Enat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_enat_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Nat_nat_enat_fun_fun$ 0)
(declare-sort Nat_set_nat_enat_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_fun$ 0)
(declare-sort A_llist_llist_llist_a_llist_llist_llist_fun$ 0)
(declare-sort A_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))
  (A_llist_llist_llist_llist$ (lNil$c) (lCons$c (lhd$c A_llist_llist_llist$) (ltl$c A_llist_llist_llist_llist$)))
  (A_llist_llist_llist_llist_llist$ (lNil$d) (lCons$d (lhd$d A_llist_llist_llist_llist$) (ltl$d A_llist_llist_llist_llist_llist$)))))
(declare-fun na$ () Nat$)
(declare-fun uu$ () Nat_enat_fun$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun uua$ (A_llist_llist$) Nat_enat_fun$)
(declare-fun uub$ (Nat_nat_enat_fun_fun$) Nat_set_nat_enat_fun_fun$)
(declare-fun uuc$ (Nat_nat_enat_fun_fun$) Nat_nat_enat_fun_fun$)
(declare-fun uud$ (Nat_nat_enat_fun_fun$) Nat_set_nat_enat_fun_fun$)
(declare-fun uue$ (A_llist_llist_llist_llist$) Nat_enat_fun$)
(declare-fun uuf$ (A_llist_llist_llist_llist$) Nat_bool_fun$)
(declare-fun uug$ (A_llist_llist_llist$) Nat_enat_fun$)
(declare-fun uuh$ (A_llist_llist_llist$) Nat_bool_fun$)
(declare-fun uui$ (A_llist_llist$) Nat_bool_fun$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist_llist$ Nat$) A_llist$)
(declare-fun xssa$ () A_llist_llist$)
(declare-fun less$a (Nat$ Nat$) Bool)
(declare-fun lnth$a (A_llist_llist_llist_llist$ Nat$) A_llist_llist_llist$)
(declare-fun lnth$b (A_llist_llist_llist$ Nat$) A_llist_llist$)
(declare-fun lnth$c (A_llist$ Nat$) A$)
(declare-fun ltake$ (Enat$) A_llist_llist_a_llist_llist_fun$)
(declare-fun ltake$a (Enat$) A_llist_a_llist_fun$)
(declare-fun ltake$b (Enat$) A_llist_llist_llist_a_llist_llist_llist_fun$)
(declare-fun ltake$c (Enat$) A_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$)
(declare-fun member$ (Enat$ Enat_set$) Bool)
(declare-fun setsum$ (Nat_enat_fun$ Nat_set$) Enat$)
(declare-fun collect$ (Nat_bool_fun$) Nat_set$)
(declare-fun fun_app$ (Nat_enat_fun$ Nat$) Enat$)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun lfinite$ (A_llist_llist_llist_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun member$a (Nat$ Nat_set$) Bool)
(declare-fun setsum$a (Enat_enat_fun$ Enat_set$) Enat$)
(declare-fun fun_app$a (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$b (Nat_nat_enat_fun_fun$ Nat$) Nat_enat_fun$)
(declare-fun fun_app$c (Nat_set_nat_enat_fun_fun$ Nat_set$) Nat_enat_fun$)
(declare-fun fun_app$d (A_llist_llist_a_llist_llist_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun fun_app$e (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$f (A_llist_llist_llist_a_llist_llist_llist_fun$ A_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun fun_app$g (A_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ A_llist_llist_llist_llist$) A_llist_llist_llist_llist$)
(declare-fun fun_app$h (Enat_nat_fun$ Enat$) Nat$)
(declare-fun fun_app$i (Enat_enat_fun$ Enat$) Enat$)
(declare-fun fun_app$j (Nat_nat_fun$ Nat$) Nat$)
(declare-fun lconcat$a (A_llist_llist_llist_llist_llist$) A_llist_llist_llist_llist$)
(declare-fun lconcat$b (A_llist_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun lconcat$c (A_llist_llist_llist$) A_llist_llist$)
(declare-fun lessThan$ (Nat$) Nat_set$)
(declare-fun lfinite$a (A_llist_llist_llist$) Bool)
(declare-fun lfinite$b (A_llist_llist$) Bool)
(declare-fun lfinite$c (A_llist$) Bool)
(declare-fun llength$a (A_llist_llist_llist_llist$) Enat$)
(declare-fun llength$b (A_llist_llist_llist$) Enat$)
(declare-fun llength$c (A_llist_llist$) Enat$)
(declare-fun lessThan$a (Enat$) Enat_set$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (llength$ (lnth$ xssa$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$) (?v1 Nat$)) (! (= (fun_app$a (uuf$ ?v0) ?v1) (less$ (enat$ ?v1) (llength$a ?v0))) :pattern ((fun_app$a (uuf$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 Nat$)) (! (= (fun_app$a (uuh$ ?v0) ?v1) (less$ (enat$ ?v1) (llength$b ?v0))) :pattern ((fun_app$a (uuh$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (! (= (fun_app$a (uui$ ?v0) ?v1) (less$ (enat$ ?v1) (llength$c ?v0))) :pattern ((fun_app$a (uui$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$) (?v1 Nat$)) (! (= (fun_app$ (uue$ ?v0) ?v1) (llength$b (lnth$a ?v0 ?v1))) :pattern ((fun_app$ (uue$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 Nat$)) (! (= (fun_app$ (uug$ ?v0) ?v1) (llength$c (lnth$b ?v0 ?v1))) :pattern ((fun_app$ (uug$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (llength$ (lnth$ ?v0 ?v1))) :pattern ((fun_app$ (uua$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$b (uuc$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$b ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$b (uuc$ ?v0) ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat_set$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$c (uud$ ?v0) ?v1) ?v2) (setsum$ (fun_app$b (uuc$ ?v0) ?v2) ?v1)) :pattern ((fun_app$ (fun_app$c (uud$ ?v0) ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat_set$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$c (uub$ ?v0) ?v1) ?v2) (setsum$ (fun_app$b ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$c (uub$ ?v0) ?v1) ?v2)))) :named a9))
(assert (! (not (= (lconcat$ (fun_app$d (ltake$ (enat$ (suc$ na$))) xssa$)) (fun_app$e (ltake$a (setsum$ uu$ (lessThan$ (suc$ na$)))) (lconcat$ xssa$)))) :named a10))
(assert (! (= xssa$ lNil$a) :named a11))
(assert (! (forall ((?v0 A_llist_llist$)) (= (lconcat$ (fun_app$d (ltake$ (enat$ na$)) ?v0)) (fun_app$e (ltake$a (setsum$ (uua$ ?v0) (lessThan$ na$))) (lconcat$ ?v0)))) :named a12))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (=> (forall ((?v2 Nat$)) (= (fun_app$f (ltake$b (enat$ ?v2)) ?v0) (fun_app$f (ltake$b (enat$ ?v2)) ?v1))) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (forall ((?v2 Nat$)) (= (fun_app$d (ltake$ (enat$ ?v2)) ?v0) (fun_app$d (ltake$ (enat$ ?v2)) ?v1))) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (forall ((?v2 Nat$)) (= (fun_app$e (ltake$a (enat$ ?v2)) ?v0) (fun_app$e (ltake$a (enat$ ?v2)) ?v1))) (= ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$g (ltake$c ?v0) lNil$c) lNil$c) :pattern ((ltake$c ?v0)))) :named a16))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$f (ltake$b ?v0) lNil$b) lNil$b) :pattern ((ltake$b ?v0)))) :named a17))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$e (ltake$a ?v0) lNil$) lNil$) :pattern ((ltake$a ?v0)))) :named a18))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$d (ltake$ ?v0) lNil$a) lNil$a) :pattern ((ltake$ ?v0)))) :named a19))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (lessThan$a ?v0) (lessThan$a ?v1)) (= ?v0 ?v1))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (lessThan$ ?v0) (lessThan$ ?v1)) (= ?v0 ?v1))) :named a21))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a22))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a23))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a24))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat_set$) (?v2 Nat_set$)) (= (setsum$ (fun_app$c (uub$ ?v0) ?v1) ?v2) (setsum$ (fun_app$c (uud$ ?v0) ?v2) ?v1))) :named a25))
(assert (! (= (lconcat$a lNil$d) lNil$c) :named a26))
(assert (! (= (lconcat$b lNil$c) lNil$b) :named a27))
(assert (! (= (lconcat$c lNil$b) lNil$a) :named a28))
(assert (! (= (lconcat$ lNil$a) lNil$) :named a29))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$)) (=> (lfinite$ ?v0) (= (llength$b (lconcat$b ?v0)) (setsum$ (uue$ ?v0) (collect$ (uuf$ ?v0)))))) :named a30))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (=> (lfinite$a ?v0) (= (llength$c (lconcat$c ?v0)) (setsum$ (uug$ ?v0) (collect$ (uuh$ ?v0)))))) :named a31))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (lfinite$b ?v0) (= (llength$ (lconcat$ ?v0)) (setsum$ (uua$ ?v0) (collect$ (uui$ ?v0)))))) :named a32))
(assert (! (forall ((?v0 Enat_set$) (?v1 Nat_enat_fun$) (?v2 Enat_nat_fun$) (?v3 Nat_set$) (?v4 Nat_enat_fun$) (?v5 Enat_enat_fun$)) (=> (and (forall ((?v6 Enat$)) (=> (member$ ?v6 ?v0) (= (fun_app$ ?v1 (fun_app$h ?v2 ?v6)) ?v6))) (and (forall ((?v6 Enat$)) (=> (member$ ?v6 ?v0) (member$a (fun_app$h ?v2 ?v6) ?v3))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v3) (= (fun_app$h ?v2 (fun_app$ ?v1 ?v6)) ?v6))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v3) (member$ (fun_app$ ?v1 ?v6) ?v0))) (forall ((?v6 Enat$)) (=> (member$ ?v6 ?v0) (= (fun_app$ ?v4 (fun_app$h ?v2 ?v6)) (fun_app$i ?v5 ?v6)))))))) (= (setsum$a ?v5 ?v0) (setsum$ ?v4 ?v3)))) :named a33))
(assert (! (forall ((?v0 Nat_set$) (?v1 Enat_nat_fun$) (?v2 Nat_enat_fun$) (?v3 Enat_set$) (?v4 Enat_enat_fun$) (?v5 Nat_enat_fun$)) (=> (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (= (fun_app$h ?v1 (fun_app$ ?v2 ?v6)) ?v6))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (member$ (fun_app$ ?v2 ?v6) ?v3))) (and (forall ((?v6 Enat$)) (=> (member$ ?v6 ?v3) (= (fun_app$ ?v2 (fun_app$h ?v1 ?v6)) ?v6))) (and (forall ((?v6 Enat$)) (=> (member$ ?v6 ?v3) (member$a (fun_app$h ?v1 ?v6) ?v0))) (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (= (fun_app$i ?v4 (fun_app$ ?v2 ?v6)) (fun_app$ ?v5 ?v6)))))))) (= (setsum$ ?v5 ?v0) (setsum$a ?v4 ?v3)))) :named a34))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_set$) (?v4 Nat_enat_fun$) (?v5 Nat_enat_fun$)) (=> (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (= (fun_app$j ?v1 (fun_app$j ?v2 ?v6)) ?v6))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (member$a (fun_app$j ?v2 ?v6) ?v3))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v3) (= (fun_app$j ?v2 (fun_app$j ?v1 ?v6)) ?v6))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v3) (member$a (fun_app$j ?v1 ?v6) ?v0))) (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (= (fun_app$ ?v4 (fun_app$j ?v2 ?v6)) (fun_app$ ?v5 ?v6)))))))) (= (setsum$ ?v5 ?v0) (setsum$ ?v4 ?v3)))) :named a35))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set$) (?v2 Nat_enat_fun$) (?v3 Nat_enat_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 Nat$)) (=> (member$a ?v4 ?v1) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (setsum$ ?v2 ?v0) (setsum$ ?v3 ?v1)))) :named a36))
(assert (! (forall ((?v0 Nat$) (?v1 Enat$) (?v2 A_llist_llist_llist$)) (=> (less$ (enat$ ?v0) ?v1) (= (lnth$b (fun_app$f (ltake$b ?v1) ?v2) ?v0) (lnth$b ?v2 ?v0)))) :named a37))
(assert (! (forall ((?v0 Nat$) (?v1 Enat$) (?v2 A_llist_llist$)) (=> (less$ (enat$ ?v0) ?v1) (= (lnth$ (fun_app$d (ltake$ ?v1) ?v2) ?v0) (lnth$ ?v2 ?v0)))) :named a38))
(assert (! (forall ((?v0 Nat$) (?v1 Enat$) (?v2 A_llist$)) (=> (less$ (enat$ ?v0) ?v1) (= (lnth$c (fun_app$e (ltake$a ?v1) ?v2) ?v0) (lnth$c ?v2 ?v0)))) :named a39))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (member$ ?v0 (lessThan$a ?v1)) (less$ ?v0 ?v1))) :named a40))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (member$a ?v0 (lessThan$ ?v1)) (less$a ?v0 ?v1))) :named a41))
(assert (! (= (lfinite$ lNil$c) true) :named a42))
(assert (! (= (lfinite$c lNil$) true) :named a43))
(assert (! (= (lfinite$a lNil$b) true) :named a44))
(assert (! (= (lfinite$b lNil$a) true) :named a45))
(check-sat)
;(get-unsat-core)
