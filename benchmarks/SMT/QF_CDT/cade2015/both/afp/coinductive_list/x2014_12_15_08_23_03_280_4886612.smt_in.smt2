; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 636
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun x$ () A$)
(declare-fun xs$ () A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun ldrop$ (Enat$) A_llist_a_llist_fun$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lsetp$ (A_llist$) A_bool_fun$)
(declare-fun ldropn$ (Nat$) A_llist_a_llist_fun$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun less_eq$ (A_set$ A_set$) Bool)
(declare-fun lmember$ (A$ A_llist$) Bool)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun ldropWhile$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun ltakeWhile$ (A_bool_fun$) A_llist_a_llist_fun$)
(assert (! (not (member$ x$ (lset$ xs$))) :named a0))
(assert (! (member$ x$ (lset$ (fun_app$ (ldropWhile$ p$) xs$))) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$ ?v0 (lset$ ?v1)) (lmember$ ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lnull$ (fun_app$ (ldropWhile$ ?v0) ?v1)) (forall ((?v2 A$)) (=> (member$ ?v2 (lset$ ?v1)) (fun_app$a ?v0 ?v2))))) :named a3))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (less_eq$ (lset$ (fun_app$ (ldropWhile$ ?v0) ?v1)) (lset$ ?v1))) :named a4))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (= (fun_app$ (ldropWhile$ ?v0) ?v1) lNil$) (forall ((?v2 A$)) (=> (member$ ?v2 (lset$ ?v1)) (fun_app$a ?v0 ?v2))))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$ ?v0 (lset$ ?v1)) (fun_app$a (lsetp$ ?v1) ?v0))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (fun_app$a (lsetp$ ?v0) ?v1) (member$ ?v1 (lset$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$ (ldropWhile$ ?v0) lNil$) lNil$) :pattern ((ldropWhile$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (ldropWhile$ ?v0) (lCons$ ?v1 ?v2)) (ite (fun_app$a ?v0 ?v1) (fun_app$ (ldropWhile$ ?v0) ?v2) (lCons$ ?v1 ?v2))) :pattern ((fun_app$ (ldropWhile$ ?v0) (lCons$ ?v1 ?v2))))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (! (=> (forall ((?v2 A$)) (=> (member$ ?v2 (lset$ ?v0)) (fun_app$a ?v1 ?v2))) (= (fun_app$ (ltakeWhile$ ?v1) ?v0) ?v0)) :pattern ((fun_app$ (ltakeWhile$ ?v1) ?v0)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_bool_fun$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ (fun_app$ (ltakeWhile$ ?v1) ?v2))) (and (member$ ?v0 (lset$ ?v2)) (fun_app$a ?v1 ?v0)))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 Enat$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ (fun_app$ (ldrop$ ?v1) ?v2))) (member$ ?v0 (lset$ ?v2)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 Nat$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ (fun_app$ (ldropn$ ?v1) ?v2))) (member$ ?v0 (lset$ ?v2)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$ (ldrop$ ?v0) lNil$) lNil$) :pattern ((ldrop$ ?v0)))) :named a15))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (ldropn$ ?v0) lNil$) lNil$) :pattern ((ldropn$ ?v0)))) :named a16))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$ (ltakeWhile$ ?v0) lNil$) lNil$) :pattern ((ltakeWhile$ ?v0)))) :named a17))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (ltakeWhile$ ?v0) (lCons$ ?v1 ?v2)) (ite (fun_app$a ?v0 ?v1) (lCons$ ?v1 (fun_app$ (ltakeWhile$ ?v0) ?v2)) lNil$)) :pattern ((fun_app$ (ltakeWhile$ ?v0) (lCons$ ?v1 ?v2))))) :named a18))
(check-sat)
;(get-unsat-core)
