; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 165
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort D$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort B_d_fun$ 0)
(declare-sort C_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort C_d_fun$ 0)
(declare-sort D_b_fun$ 0)
(declare-sort D_c_fun$ 0)
(declare-sort D_d_fun$ 0)
(declare-sort A_b_llist_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort C_llist_bool_fun$ 0)
(declare-sort D_llist_bool_fun$ 0)
(declare-sort B_llist_b_llist_fun$ 0)
(declare-sort B_llist_c_llist_fun$ 0)
(declare-sort B_llist_d_llist_fun$ 0)
(declare-sort C_llist_b_llist_fun$ 0)
(declare-sort C_llist_c_llist_fun$ 0)
(declare-sort C_llist_d_llist_fun$ 0)
(declare-sort D_llist_b_llist_fun$ 0)
(declare-sort D_llist_c_llist_fun$ 0)
(declare-sort D_llist_d_llist_fun$ 0)
(declare-sort A_b_llist_fun_bool_fun$ 0)
(declare-sort A_b_llist_fun_b_llist_fun$ 0)
(declare-sort A_b_llist_fun_c_llist_fun$ 0)
(declare-sort A_b_llist_fun_d_llist_fun$ 0)
(declare-sort B_llist_a_b_llist_fun_fun$ 0)
(declare-sort C_llist_a_b_llist_fun_fun$ 0)
(declare-sort D_llist_a_b_llist_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-sort C_llist_c_llist_bool_fun_fun$ 0)
(declare-sort D_llist_d_llist_bool_fun_fun$ 0)
(declare-sort A_a_b_llist_fun_b_llist_fun_fun$ 0)
(declare-sort A_a_b_llist_fun_c_llist_fun_fun$ 0)
(declare-sort A_a_b_llist_fun_d_llist_fun_fun$ 0)
(declare-sort A_b_llist_fun_a_b_llist_fun_fun$ 0)
(declare-sort D_c_fun_b_llist_c_llist_fun_fun$ 0)
(declare-sort D_d_fun_b_llist_d_llist_fun_fun$ 0)
(declare-sort A_a_b_llist_fun_a_b_llist_fun_fun_fun$ 0)
(declare-sort B_c_fun_a_b_llist_fun_c_llist_fun_fun$ 0)
(declare-sort B_d_fun_a_b_llist_fun_d_llist_fun_fun$ 0)
(declare-sort C_b_fun_a_b_llist_fun_b_llist_fun_fun$ 0)
(declare-sort C_c_fun_a_b_llist_fun_c_llist_fun_fun$ 0)
(declare-sort C_d_fun_a_b_llist_fun_d_llist_fun_fun$ 0)
(declare-sort D_b_fun_a_b_llist_fun_b_llist_fun_fun$ 0)
(declare-sort D_c_fun_a_b_llist_fun_c_llist_fun_fun$ 0)
(declare-sort D_d_fun_a_b_llist_fun_d_llist_fun_fun$ 0)
(declare-sort A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ 0)
(declare-sort B_llist_c_llist_fun_b_llist_b_llist_fun_fun$ 0)
(declare-sort B_llist_d_llist_fun_b_llist_b_llist_fun_fun$ 0)
(declare-sort B_llist_c_llist_fun_b_llist_a_b_llist_fun_fun_fun$ 0)
(declare-sort B_llist_d_llist_fun_b_llist_a_b_llist_fun_fun_fun$ 0)
(declare-sort C_llist_b_llist_fun_c_llist_a_b_llist_fun_fun_fun$ 0)
(declare-sort C_llist_c_llist_fun_c_llist_a_b_llist_fun_fun_fun$ 0)
(declare-sort C_llist_d_llist_fun_c_llist_a_b_llist_fun_fun_fun$ 0)
(declare-sort A_b_llist_fun_c_llist_fun_a_b_llist_fun_b_llist_fun_fun$ 0)
(declare-sort A_b_llist_fun_c_llist_fun_a_b_llist_fun_c_llist_fun_fun$ 0)
(declare-sort A_b_llist_fun_c_llist_fun_a_b_llist_fun_d_llist_fun_fun$ 0)
(declare-sort A_b_llist_fun_d_llist_fun_a_b_llist_fun_b_llist_fun_fun$ 0)
(declare-sort A_b_llist_fun_d_llist_fun_a_b_llist_fun_c_llist_fun_fun$ 0)
(declare-sort A_b_llist_fun_d_llist_fun_a_b_llist_fun_d_llist_fun_fun$ 0)
(declare-sort C_llist_a_b_llist_fun_fun_c_llist_a_b_llist_fun_fun_fun$ 0)
(declare-sort A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_c_llist_fun_fun$ 0)
(declare-sort A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_d_llist_fun_fun$ 0)
(declare-sort A_b_llist_fun_b_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ 0)
(declare-sort A_b_llist_fun_c_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ 0)
(declare-sort A_b_llist_fun_d_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ 0)
(declare-sort A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ 0)
(declare-codatatypes () ((B_llist$ (lNil$) (lCons$ (lhd$ B$) (ltl$ B_llist$)))
  (D_llist$ (lNil$a) (lCons$a (lhd$a D$) (ltl$a D_llist$)))
  (C_llist$ (lNil$b) (lCons$b (lhd$b C$) (ltl$b C_llist$)))))
(declare-fun f$ () A_b_llist_fun_c_llist_fun$)
(declare-fun g$ () C_d_fun$)
(declare-fun uu$ () A_b_llist_fun_d_llist_fun$)
(declare-fun uua$ () D_d_fun$)
(declare-fun uub$ () B_b_fun$)
(declare-fun uuc$ () C_c_fun$)
(declare-fun uud$ (D_llist_a_b_llist_fun_fun$) A_b_llist_fun_d_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$)
(declare-fun uue$ (C_llist_a_b_llist_fun_fun$) A_b_llist_fun_c_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$)
(declare-fun uuf$ (D_llist_a_b_llist_fun_fun$) B_llist_d_llist_fun_b_llist_a_b_llist_fun_fun_fun$)
(declare-fun uug$ (C_llist_a_b_llist_fun_fun$) C_llist_c_llist_fun_c_llist_a_b_llist_fun_fun_fun$)
(declare-fun uuh$ (C_llist_a_b_llist_fun_fun$) B_llist_c_llist_fun_b_llist_a_b_llist_fun_fun_fun$)
(declare-fun uui$ (B_llist_a_b_llist_fun_fun$) A_b_llist_fun_b_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$)
(declare-fun uuj$ (A_b_llist_fun_a_b_llist_fun_fun$) C_llist_a_b_llist_fun_fun_c_llist_a_b_llist_fun_fun_fun$)
(declare-fun uuk$ (A_b_llist_fun_a_b_llist_fun_fun$) A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$)
(declare-fun uul$ (D_llist_a_b_llist_fun_fun$) C_llist_d_llist_fun_c_llist_a_b_llist_fun_fun_fun$)
(declare-fun uum$ (B_llist_a_b_llist_fun_fun$) C_llist_b_llist_fun_c_llist_a_b_llist_fun_fun_fun$)
(declare-fun uun$ (D_llist_b_llist_fun$) A_b_llist_fun_d_llist_fun_a_b_llist_fun_b_llist_fun_fun$)
(declare-fun uuo$ (C_llist_b_llist_fun$) A_b_llist_fun_c_llist_fun_a_b_llist_fun_b_llist_fun_fun$)
(declare-fun uup$ (D_llist_d_llist_fun$) A_b_llist_fun_d_llist_fun_a_b_llist_fun_d_llist_fun_fun$)
(declare-fun uuq$ (C_llist_d_llist_fun$) A_b_llist_fun_c_llist_fun_a_b_llist_fun_d_llist_fun_fun$)
(declare-fun uur$ (D_llist_c_llist_fun$) A_b_llist_fun_d_llist_fun_a_b_llist_fun_c_llist_fun_fun$)
(declare-fun uus$ (C_llist_c_llist_fun$) A_b_llist_fun_c_llist_fun_a_b_llist_fun_c_llist_fun_fun$)
(declare-fun uut$ (A_b_llist_fun_d_llist_fun$) A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_d_llist_fun_fun$)
(declare-fun uuu$ (A_b_llist_fun_c_llist_fun$) A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_c_llist_fun_fun$)
(declare-fun uuv$ (D_llist_b_llist_fun$) B_llist_d_llist_fun_b_llist_b_llist_fun_fun$)
(declare-fun uuw$ (C_llist_b_llist_fun$) B_llist_c_llist_fun_b_llist_b_llist_fun_fun$)
(declare-fun uux$ (A_b_llist_fun_b_llist_fun$) B_d_fun_a_b_llist_fun_d_llist_fun_fun$)
(declare-fun uuy$ (A_b_llist_fun_b_llist_fun$) B_c_fun_a_b_llist_fun_c_llist_fun_fun$)
(declare-fun uuz$ (A_b_llist_fun_d_llist_fun$) D_b_fun_a_b_llist_fun_b_llist_fun_fun$)
(declare-fun uva$ (A_b_llist_fun_d_llist_fun$) D_d_fun_a_b_llist_fun_d_llist_fun_fun$)
(declare-fun uvb$ (A_b_llist_fun_d_llist_fun$) D_c_fun_a_b_llist_fun_c_llist_fun_fun$)
(declare-fun uvc$ (A_b_llist_fun_c_llist_fun$) C_b_fun_a_b_llist_fun_b_llist_fun_fun$)
(declare-fun uvd$ (A_b_llist_fun_c_llist_fun$) C_c_fun_a_b_llist_fun_c_llist_fun_fun$)
(declare-fun uve$ (A_b_llist_fun_c_llist_fun$) C_d_fun_a_b_llist_fun_d_llist_fun_fun$)
(declare-fun uvf$ (B_llist_d_llist_fun$) D_d_fun_b_llist_d_llist_fun_fun$)
(declare-fun uvg$ (B_llist_d_llist_fun$) D_c_fun_b_llist_c_llist_fun_fun$)
(declare-fun uvh$ (B_llist$) C_llist_b_llist_fun$)
(declare-fun uvi$ (B_llist$) B_llist_b_llist_fun$)
(declare-fun uvj$ (D_llist$) C_llist_d_llist_fun$)
(declare-fun uvk$ (C_llist$) C_llist_c_llist_fun$)
(declare-fun uvl$ (B_llist$) A_b_llist_fun_b_llist_fun$)
(declare-fun uvm$ (D_llist$) B_llist_d_llist_fun$)
(declare-fun uvn$ (C_llist$) B_llist_c_llist_fun$)
(declare-fun uvo$ (D_llist$) A_b_llist_fun_d_llist_fun$)
(declare-fun uvp$ (C_llist$) A_b_llist_fun_c_llist_fun$)
(declare-fun uvq$ (B_llist_b_llist_fun$) A_a_b_llist_fun_b_llist_fun_fun$)
(declare-fun uvr$ (B_llist_a_b_llist_fun_fun$) A_a_b_llist_fun_a_b_llist_fun_fun_fun$)
(declare-fun uvs$ (B_llist_d_llist_fun$) A_a_b_llist_fun_d_llist_fun_fun$)
(declare-fun uvt$ (B_llist_c_llist_fun$) A_a_b_llist_fun_c_llist_fun_fun$)
(declare-fun lmap$ (C_d_fun$) C_llist_d_llist_fun$)
(declare-fun lmap$a (D_d_fun$) D_llist_d_llist_fun$)
(declare-fun lmap$b (D_c_fun$) D_llist_c_llist_fun$)
(declare-fun lmap$c (D_b_fun$) D_llist_b_llist_fun$)
(declare-fun lmap$d (C_c_fun$) C_llist_c_llist_fun$)
(declare-fun lmap$e (C_b_fun$) C_llist_b_llist_fun$)
(declare-fun lmap$f (B_d_fun$) B_llist_d_llist_fun$)
(declare-fun lmap$g (B_c_fun$) B_llist_c_llist_fun$)
(declare-fun lmap$h (B_b_fun$) B_llist_b_llist_fun$)
(declare-fun fun_app$ (A_b_llist_fun_d_llist_fun$ A_b_llist_fun$) D_llist$)
(declare-fun fun_ord$ (B_llist_b_llist_bool_fun_fun$) A_b_llist_fun_a_b_llist_fun_bool_fun_fun$)
(declare-fun lprefix$ () B_llist_b_llist_bool_fun_fun$)
(declare-fun fun_app$a (C_llist_d_llist_fun$ C_llist$) D_llist$)
(declare-fun fun_app$b (A_b_llist_fun_c_llist_fun$ A_b_llist_fun$) C_llist$)
(declare-fun fun_app$c (B_llist_d_llist_fun$ B_llist$) D_llist$)
(declare-fun fun_app$d (D_d_fun_b_llist_d_llist_fun_fun$ D_d_fun$) B_llist_d_llist_fun$)
(declare-fun fun_app$e (D_llist_d_llist_fun$ D_llist$) D_llist$)
(declare-fun fun_app$f (B_llist_c_llist_fun$ B_llist$) C_llist$)
(declare-fun fun_app$g (D_c_fun_b_llist_c_llist_fun_fun$ D_c_fun$) B_llist_c_llist_fun$)
(declare-fun fun_app$h (D_llist_c_llist_fun$ D_llist$) C_llist$)
(declare-fun fun_app$i (D_d_fun_a_b_llist_fun_d_llist_fun_fun$ D_d_fun$) A_b_llist_fun_d_llist_fun$)
(declare-fun fun_app$j (D_c_fun_a_b_llist_fun_c_llist_fun_fun$ D_c_fun$) A_b_llist_fun_c_llist_fun$)
(declare-fun fun_app$k (A_b_llist_fun_b_llist_fun$ A_b_llist_fun$) B_llist$)
(declare-fun fun_app$l (D_b_fun_a_b_llist_fun_b_llist_fun_fun$ D_b_fun$) A_b_llist_fun_b_llist_fun$)
(declare-fun fun_app$m (D_llist_b_llist_fun$ D_llist$) B_llist$)
(declare-fun fun_app$n (C_d_fun_a_b_llist_fun_d_llist_fun_fun$ C_d_fun$) A_b_llist_fun_d_llist_fun$)
(declare-fun fun_app$o (C_c_fun_a_b_llist_fun_c_llist_fun_fun$ C_c_fun$) A_b_llist_fun_c_llist_fun$)
(declare-fun fun_app$p (C_llist_c_llist_fun$ C_llist$) C_llist$)
(declare-fun fun_app$q (C_b_fun_a_b_llist_fun_b_llist_fun_fun$ C_b_fun$) A_b_llist_fun_b_llist_fun$)
(declare-fun fun_app$r (C_llist_b_llist_fun$ C_llist$) B_llist$)
(declare-fun fun_app$s (B_d_fun_a_b_llist_fun_d_llist_fun_fun$ B_d_fun$) A_b_llist_fun_d_llist_fun$)
(declare-fun fun_app$t (B_c_fun_a_b_llist_fun_c_llist_fun_fun$ B_c_fun$) A_b_llist_fun_c_llist_fun$)
(declare-fun fun_app$u (A_b_llist_fun_d_llist_fun_a_b_llist_fun_d_llist_fun_fun$ A_b_llist_fun_d_llist_fun$) A_b_llist_fun_d_llist_fun$)
(declare-fun fun_app$v (A_b_llist_fun_d_llist_fun_a_b_llist_fun_c_llist_fun_fun$ A_b_llist_fun_d_llist_fun$) A_b_llist_fun_c_llist_fun$)
(declare-fun fun_app$w (B_llist_b_llist_fun$ B_llist$) B_llist$)
(declare-fun fun_app$x (B_llist_d_llist_fun_b_llist_b_llist_fun_fun$ B_llist_d_llist_fun$) B_llist_b_llist_fun$)
(declare-fun fun_app$y (A_b_llist_fun_d_llist_fun_a_b_llist_fun_b_llist_fun_fun$ A_b_llist_fun_d_llist_fun$) A_b_llist_fun_b_llist_fun$)
(declare-fun fun_app$z (C_llist_a_b_llist_fun_fun$ C_llist$) A_b_llist_fun$)
(declare-fun lprefix$a () D_llist_d_llist_bool_fun_fun$)
(declare-fun lprefix$b () C_llist_c_llist_bool_fun_fun$)
(declare-fun monotone$ (A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ D_llist_d_llist_bool_fun_fun$ A_b_llist_fun_d_llist_fun$) Bool)
(declare-fun fun_app$aa (C_llist_d_llist_fun_c_llist_a_b_llist_fun_fun_fun$ C_llist_d_llist_fun$) C_llist_a_b_llist_fun_fun$)
(declare-fun fun_app$ab (D_llist_a_b_llist_fun_fun$ D_llist$) A_b_llist_fun$)
(declare-fun fun_app$ac (B_llist_a_b_llist_fun_fun$ B_llist$) A_b_llist_fun$)
(declare-fun fun_app$ad (B_llist_d_llist_fun_b_llist_a_b_llist_fun_fun_fun$ B_llist_d_llist_fun$) B_llist_a_b_llist_fun_fun$)
(declare-fun fun_app$ae (A_b_llist_fun_a_b_llist_fun_fun$ A_b_llist_fun$) A_b_llist_fun$)
(declare-fun fun_app$af (A_b_llist_fun_d_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ A_b_llist_fun_d_llist_fun$) A_b_llist_fun_a_b_llist_fun_fun$)
(declare-fun fun_app$ag (A_b_llist_fun_c_llist_fun_a_b_llist_fun_d_llist_fun_fun$ A_b_llist_fun_c_llist_fun$) A_b_llist_fun_d_llist_fun$)
(declare-fun fun_app$ah (A_b_llist_fun_c_llist_fun_a_b_llist_fun_c_llist_fun_fun$ A_b_llist_fun_c_llist_fun$) A_b_llist_fun_c_llist_fun$)
(declare-fun fun_app$ai (B_llist_c_llist_fun_b_llist_b_llist_fun_fun$ B_llist_c_llist_fun$) B_llist_b_llist_fun$)
(declare-fun fun_app$aj (A_b_llist_fun_c_llist_fun_a_b_llist_fun_b_llist_fun_fun$ A_b_llist_fun_c_llist_fun$) A_b_llist_fun_b_llist_fun$)
(declare-fun fun_app$ak (C_llist_c_llist_fun_c_llist_a_b_llist_fun_fun_fun$ C_llist_c_llist_fun$) C_llist_a_b_llist_fun_fun$)
(declare-fun fun_app$al (B_llist_c_llist_fun_b_llist_a_b_llist_fun_fun_fun$ B_llist_c_llist_fun$) B_llist_a_b_llist_fun_fun$)
(declare-fun fun_app$am (A_b_llist_fun_c_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ A_b_llist_fun_c_llist_fun$) A_b_llist_fun_a_b_llist_fun_fun$)
(declare-fun fun_app$an (C_llist_b_llist_fun_c_llist_a_b_llist_fun_fun_fun$ C_llist_b_llist_fun$) C_llist_a_b_llist_fun_fun$)
(declare-fun fun_app$ao (A_b_llist_fun_b_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ A_b_llist_fun_b_llist_fun$) A_b_llist_fun_a_b_llist_fun_fun$)
(declare-fun fun_app$ap (A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_d_llist_fun_fun$ A_b_llist_fun_a_b_llist_fun_fun$) A_b_llist_fun_d_llist_fun$)
(declare-fun fun_app$aq (A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_c_llist_fun_fun$ A_b_llist_fun_a_b_llist_fun_fun$) A_b_llist_fun_c_llist_fun$)
(declare-fun fun_app$ar (C_llist_a_b_llist_fun_fun_c_llist_a_b_llist_fun_fun_fun$ C_llist_a_b_llist_fun_fun$) C_llist_a_b_llist_fun_fun$)
(declare-fun fun_app$as (A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ A_b_llist_fun_a_b_llist_fun_fun$) A_b_llist_fun_a_b_llist_fun_fun$)
(declare-fun fun_app$at (A_a_b_llist_fun_d_llist_fun_fun$ A$) A_b_llist_fun_d_llist_fun$)
(declare-fun fun_app$au (A_b_llist_fun$ A$) B_llist$)
(declare-fun fun_app$av (A_a_b_llist_fun_c_llist_fun_fun$ A$) A_b_llist_fun_c_llist_fun$)
(declare-fun fun_app$aw (A_a_b_llist_fun_b_llist_fun_fun$ A$) A_b_llist_fun_b_llist_fun$)
(declare-fun fun_app$ax (A_a_b_llist_fun_a_b_llist_fun_fun_fun$ A$) A_b_llist_fun_a_b_llist_fun_fun$)
(declare-fun fun_app$ay (D_d_fun$ D$) D$)
(declare-fun fun_app$az (C_c_fun$ C$) C$)
(declare-fun fun_app$ba (B_b_fun$ B$) B$)
(declare-fun fun_app$bb (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun fun_app$bc (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun fun_app$bd (D_llist_bool_fun$ D_llist$) Bool)
(declare-fun fun_app$be (D_llist_d_llist_bool_fun_fun$ D_llist$) D_llist_bool_fun$)
(declare-fun fun_app$bf (C_llist_bool_fun$ C_llist$) Bool)
(declare-fun fun_app$bg (C_llist_c_llist_bool_fun_fun$ C_llist$) C_llist_bool_fun$)
(declare-fun fun_app$bh (A_b_llist_fun_bool_fun$ A_b_llist_fun$) Bool)
(declare-fun fun_app$bi (A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ A_b_llist_fun$) A_b_llist_fun_bool_fun$)
(declare-fun monotone$a (A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ A_b_llist_fun_c_llist_fun$) Bool)
(declare-fun monotone$b (A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ A_b_llist_fun_b_llist_fun$) Bool)
(declare-fun monotone$c (A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ A_b_llist_fun_a_b_llist_fun_fun$) Bool)
(declare-fun monotone$d (D_llist_d_llist_bool_fun_fun$ A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ D_llist_a_b_llist_fun_fun$) Bool)
(declare-fun monotone$e (C_llist_c_llist_bool_fun_fun$ A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ C_llist_a_b_llist_fun_fun$) Bool)
(declare-fun monotone$f (B_llist_b_llist_bool_fun_fun$ D_llist_d_llist_bool_fun_fun$ B_llist_d_llist_fun$) Bool)
(declare-fun monotone$g (B_llist_b_llist_bool_fun_fun$ A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ B_llist_a_b_llist_fun_fun$) Bool)
(declare-fun monotone$h (C_llist_c_llist_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ C_llist_c_llist_fun$) Bool)
(declare-fun monotone$i (B_llist_b_llist_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ B_llist_c_llist_fun$) Bool)
(declare-fun monotone$j (C_llist_c_llist_bool_fun_fun$ D_llist_d_llist_bool_fun_fun$ C_llist_d_llist_fun$) Bool)
(declare-fun monotone$k (C_llist_c_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ C_llist_b_llist_fun$) Bool)
(declare-fun monotone$l (D_llist_d_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ D_llist_b_llist_fun$) Bool)
(declare-fun monotone$m (D_llist_d_llist_bool_fun_fun$ D_llist_d_llist_bool_fun_fun$ D_llist_d_llist_fun$) Bool)
(declare-fun monotone$n (D_llist_d_llist_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ D_llist_c_llist_fun$) Bool)
(declare-fun monotone$o (B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_fun$) Bool)
(assert (! (forall ((?v0 A_b_llist_fun$)) (! (= (fun_app$ uu$ ?v0) (fun_app$a (lmap$ g$) (fun_app$b f$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 B_llist_d_llist_fun$) (?v1 D_d_fun$) (?v2 B_llist$)) (! (= (fun_app$c (fun_app$d (uvf$ ?v0) ?v1) ?v2) (fun_app$e (lmap$a ?v1) (fun_app$c ?v0 ?v2))) :pattern ((fun_app$c (fun_app$d (uvf$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 B_llist_d_llist_fun$) (?v1 D_c_fun$) (?v2 B_llist$)) (! (= (fun_app$f (fun_app$g (uvg$ ?v0) ?v1) ?v2) (fun_app$h (lmap$b ?v1) (fun_app$c ?v0 ?v2))) :pattern ((fun_app$f (fun_app$g (uvg$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_b_llist_fun_d_llist_fun$) (?v1 D_d_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$ (fun_app$i (uva$ ?v0) ?v1) ?v2) (fun_app$e (lmap$a ?v1) (fun_app$ ?v0 ?v2))) :pattern ((fun_app$ (fun_app$i (uva$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A_b_llist_fun_d_llist_fun$) (?v1 D_c_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$b (fun_app$j (uvb$ ?v0) ?v1) ?v2) (fun_app$h (lmap$b ?v1) (fun_app$ ?v0 ?v2))) :pattern ((fun_app$b (fun_app$j (uvb$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_b_llist_fun_d_llist_fun$) (?v1 D_b_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$k (fun_app$l (uuz$ ?v0) ?v1) ?v2) (fun_app$m (lmap$c ?v1) (fun_app$ ?v0 ?v2))) :pattern ((fun_app$k (fun_app$l (uuz$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A_b_llist_fun_c_llist_fun$) (?v1 C_d_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$ (fun_app$n (uve$ ?v0) ?v1) ?v2) (fun_app$a (lmap$ ?v1) (fun_app$b ?v0 ?v2))) :pattern ((fun_app$ (fun_app$n (uve$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 A_b_llist_fun_c_llist_fun$) (?v1 C_c_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$b (fun_app$o (uvd$ ?v0) ?v1) ?v2) (fun_app$p (lmap$d ?v1) (fun_app$b ?v0 ?v2))) :pattern ((fun_app$b (fun_app$o (uvd$ ?v0) ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 A_b_llist_fun_c_llist_fun$) (?v1 C_b_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$k (fun_app$q (uvc$ ?v0) ?v1) ?v2) (fun_app$r (lmap$e ?v1) (fun_app$b ?v0 ?v2))) :pattern ((fun_app$k (fun_app$q (uvc$ ?v0) ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 A_b_llist_fun_b_llist_fun$) (?v1 B_d_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$ (fun_app$s (uux$ ?v0) ?v1) ?v2) (fun_app$c (lmap$f ?v1) (fun_app$k ?v0 ?v2))) :pattern ((fun_app$ (fun_app$s (uux$ ?v0) ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 A_b_llist_fun_b_llist_fun$) (?v1 B_c_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$b (fun_app$t (uuy$ ?v0) ?v1) ?v2) (fun_app$f (lmap$g ?v1) (fun_app$k ?v0 ?v2))) :pattern ((fun_app$b (fun_app$t (uuy$ ?v0) ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 D_llist_d_llist_fun$) (?v1 A_b_llist_fun_d_llist_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$ (fun_app$u (uup$ ?v0) ?v1) ?v2) (fun_app$e ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$u (uup$ ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 D_llist_c_llist_fun$) (?v1 A_b_llist_fun_d_llist_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$b (fun_app$v (uur$ ?v0) ?v1) ?v2) (fun_app$h ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$b (fun_app$v (uur$ ?v0) ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 D_llist_b_llist_fun$) (?v1 B_llist_d_llist_fun$) (?v2 B_llist$)) (! (= (fun_app$w (fun_app$x (uuv$ ?v0) ?v1) ?v2) (fun_app$m ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$w (fun_app$x (uuv$ ?v0) ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 D_llist_b_llist_fun$) (?v1 A_b_llist_fun_d_llist_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$k (fun_app$y (uun$ ?v0) ?v1) ?v2) (fun_app$m ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$k (fun_app$y (uun$ ?v0) ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 D_llist_a_b_llist_fun_fun$) (?v1 C_llist_d_llist_fun$) (?v2 C_llist$)) (! (= (fun_app$z (fun_app$aa (uul$ ?v0) ?v1) ?v2) (fun_app$ab ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$z (fun_app$aa (uul$ ?v0) ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 D_llist_a_b_llist_fun_fun$) (?v1 B_llist_d_llist_fun$) (?v2 B_llist$)) (! (= (fun_app$ac (fun_app$ad (uuf$ ?v0) ?v1) ?v2) (fun_app$ab ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$ac (fun_app$ad (uuf$ ?v0) ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 D_llist_a_b_llist_fun_fun$) (?v1 A_b_llist_fun_d_llist_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$ae (fun_app$af (uud$ ?v0) ?v1) ?v2) (fun_app$ab ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ae (fun_app$af (uud$ ?v0) ?v1) ?v2)))) :named a17))
(assert (! (forall ((?v0 C_llist_d_llist_fun$) (?v1 A_b_llist_fun_c_llist_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$ (fun_app$ag (uuq$ ?v0) ?v1) ?v2) (fun_app$a ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$ (fun_app$ag (uuq$ ?v0) ?v1) ?v2)))) :named a18))
(assert (! (forall ((?v0 C_llist_c_llist_fun$) (?v1 A_b_llist_fun_c_llist_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$b (fun_app$ah (uus$ ?v0) ?v1) ?v2) (fun_app$p ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$b (fun_app$ah (uus$ ?v0) ?v1) ?v2)))) :named a19))
(assert (! (forall ((?v0 C_llist_b_llist_fun$) (?v1 B_llist_c_llist_fun$) (?v2 B_llist$)) (! (= (fun_app$w (fun_app$ai (uuw$ ?v0) ?v1) ?v2) (fun_app$r ?v0 (fun_app$f ?v1 ?v2))) :pattern ((fun_app$w (fun_app$ai (uuw$ ?v0) ?v1) ?v2)))) :named a20))
(assert (! (forall ((?v0 C_llist_b_llist_fun$) (?v1 A_b_llist_fun_c_llist_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$k (fun_app$aj (uuo$ ?v0) ?v1) ?v2) (fun_app$r ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$k (fun_app$aj (uuo$ ?v0) ?v1) ?v2)))) :named a21))
(assert (! (forall ((?v0 C_llist_a_b_llist_fun_fun$) (?v1 C_llist_c_llist_fun$) (?v2 C_llist$)) (! (= (fun_app$z (fun_app$ak (uug$ ?v0) ?v1) ?v2) (fun_app$z ?v0 (fun_app$p ?v1 ?v2))) :pattern ((fun_app$z (fun_app$ak (uug$ ?v0) ?v1) ?v2)))) :named a22))
(assert (! (forall ((?v0 C_llist_a_b_llist_fun_fun$) (?v1 B_llist_c_llist_fun$) (?v2 B_llist$)) (! (= (fun_app$ac (fun_app$al (uuh$ ?v0) ?v1) ?v2) (fun_app$z ?v0 (fun_app$f ?v1 ?v2))) :pattern ((fun_app$ac (fun_app$al (uuh$ ?v0) ?v1) ?v2)))) :named a23))
(assert (! (forall ((?v0 C_llist_a_b_llist_fun_fun$) (?v1 A_b_llist_fun_c_llist_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$ae (fun_app$am (uue$ ?v0) ?v1) ?v2) (fun_app$z ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$ae (fun_app$am (uue$ ?v0) ?v1) ?v2)))) :named a24))
(assert (! (forall ((?v0 B_llist_a_b_llist_fun_fun$) (?v1 C_llist_b_llist_fun$) (?v2 C_llist$)) (! (= (fun_app$z (fun_app$an (uum$ ?v0) ?v1) ?v2) (fun_app$ac ?v0 (fun_app$r ?v1 ?v2))) :pattern ((fun_app$z (fun_app$an (uum$ ?v0) ?v1) ?v2)))) :named a25))
(assert (! (forall ((?v0 B_llist_a_b_llist_fun_fun$) (?v1 A_b_llist_fun_b_llist_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$ae (fun_app$ao (uui$ ?v0) ?v1) ?v2) (fun_app$ac ?v0 (fun_app$k ?v1 ?v2))) :pattern ((fun_app$ae (fun_app$ao (uui$ ?v0) ?v1) ?v2)))) :named a26))
(assert (! (forall ((?v0 A_b_llist_fun_d_llist_fun$) (?v1 A_b_llist_fun_a_b_llist_fun_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$ (fun_app$ap (uut$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$ae ?v1 ?v2))) :pattern ((fun_app$ (fun_app$ap (uut$ ?v0) ?v1) ?v2)))) :named a27))
(assert (! (forall ((?v0 A_b_llist_fun_c_llist_fun$) (?v1 A_b_llist_fun_a_b_llist_fun_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$b (fun_app$aq (uuu$ ?v0) ?v1) ?v2) (fun_app$b ?v0 (fun_app$ae ?v1 ?v2))) :pattern ((fun_app$b (fun_app$aq (uuu$ ?v0) ?v1) ?v2)))) :named a28))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_fun$) (?v1 C_llist_a_b_llist_fun_fun$) (?v2 C_llist$)) (! (= (fun_app$z (fun_app$ar (uuj$ ?v0) ?v1) ?v2) (fun_app$ae ?v0 (fun_app$z ?v1 ?v2))) :pattern ((fun_app$z (fun_app$ar (uuj$ ?v0) ?v1) ?v2)))) :named a29))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_fun$) (?v1 A_b_llist_fun_a_b_llist_fun_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$ae (fun_app$as (uuk$ ?v0) ?v1) ?v2) (fun_app$ae ?v0 (fun_app$ae ?v1 ?v2))) :pattern ((fun_app$ae (fun_app$as (uuk$ ?v0) ?v1) ?v2)))) :named a30))
(assert (! (forall ((?v0 B_llist_d_llist_fun$) (?v1 A$) (?v2 A_b_llist_fun$)) (! (= (fun_app$ (fun_app$at (uvs$ ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$au ?v2 ?v1))) :pattern ((fun_app$ (fun_app$at (uvs$ ?v0) ?v1) ?v2)))) :named a31))
(assert (! (forall ((?v0 B_llist_c_llist_fun$) (?v1 A$) (?v2 A_b_llist_fun$)) (! (= (fun_app$b (fun_app$av (uvt$ ?v0) ?v1) ?v2) (fun_app$f ?v0 (fun_app$au ?v2 ?v1))) :pattern ((fun_app$b (fun_app$av (uvt$ ?v0) ?v1) ?v2)))) :named a32))
(assert (! (forall ((?v0 B_llist_b_llist_fun$) (?v1 A$) (?v2 A_b_llist_fun$)) (! (= (fun_app$k (fun_app$aw (uvq$ ?v0) ?v1) ?v2) (fun_app$w ?v0 (fun_app$au ?v2 ?v1))) :pattern ((fun_app$k (fun_app$aw (uvq$ ?v0) ?v1) ?v2)))) :named a33))
(assert (! (forall ((?v0 B_llist_a_b_llist_fun_fun$) (?v1 A$) (?v2 A_b_llist_fun$)) (! (= (fun_app$ae (fun_app$ax (uvr$ ?v0) ?v1) ?v2) (fun_app$ac ?v0 (fun_app$au ?v2 ?v1))) :pattern ((fun_app$ae (fun_app$ax (uvr$ ?v0) ?v1) ?v2)))) :named a34))
(assert (! (forall ((?v0 D_llist$) (?v1 C_llist$)) (! (= (fun_app$a (uvj$ ?v0) ?v1) ?v0) :pattern ((fun_app$a (uvj$ ?v0) ?v1)))) :named a35))
(assert (! (forall ((?v0 D_llist$) (?v1 B_llist$)) (! (= (fun_app$c (uvm$ ?v0) ?v1) ?v0) :pattern ((fun_app$c (uvm$ ?v0) ?v1)))) :named a36))
(assert (! (forall ((?v0 D_llist$) (?v1 A_b_llist_fun$)) (! (= (fun_app$ (uvo$ ?v0) ?v1) ?v0) :pattern ((fun_app$ (uvo$ ?v0) ?v1)))) :named a37))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$)) (! (= (fun_app$p (uvk$ ?v0) ?v1) ?v0) :pattern ((fun_app$p (uvk$ ?v0) ?v1)))) :named a38))
(assert (! (forall ((?v0 C_llist$) (?v1 B_llist$)) (! (= (fun_app$f (uvn$ ?v0) ?v1) ?v0) :pattern ((fun_app$f (uvn$ ?v0) ?v1)))) :named a39))
(assert (! (forall ((?v0 C_llist$) (?v1 A_b_llist_fun$)) (! (= (fun_app$b (uvp$ ?v0) ?v1) ?v0) :pattern ((fun_app$b (uvp$ ?v0) ?v1)))) :named a40))
(assert (! (forall ((?v0 B_llist$) (?v1 C_llist$)) (! (= (fun_app$r (uvh$ ?v0) ?v1) ?v0) :pattern ((fun_app$r (uvh$ ?v0) ?v1)))) :named a41))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (= (fun_app$w (uvi$ ?v0) ?v1) ?v0) :pattern ((fun_app$w (uvi$ ?v0) ?v1)))) :named a42))
(assert (! (forall ((?v0 B_llist$) (?v1 A_b_llist_fun$)) (! (= (fun_app$k (uvl$ ?v0) ?v1) ?v0) :pattern ((fun_app$k (uvl$ ?v0) ?v1)))) :named a43))
(assert (! (forall ((?v0 D$)) (! (= (fun_app$ay uua$ ?v0) ?v0) :pattern ((fun_app$ay uua$ ?v0)))) :named a44))
(assert (! (forall ((?v0 C$)) (! (= (fun_app$az uuc$ ?v0) ?v0) :pattern ((fun_app$az uuc$ ?v0)))) :named a45))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$ba uub$ ?v0) ?v0) :pattern ((fun_app$ba uub$ ?v0)))) :named a46))
(assert (! (not (monotone$ (fun_ord$ lprefix$) lprefix$a uu$)) :named a47))
(assert (! (monotone$a (fun_ord$ lprefix$) lprefix$b f$) :named a48))
(assert (! (forall ((?v0 B_llist$)) (fun_app$bb (fun_app$bc lprefix$ ?v0) ?v0)) :named a49))
(assert (! (forall ((?v0 D_llist$)) (fun_app$bd (fun_app$be lprefix$a ?v0) ?v0)) :named a50))
(assert (! (forall ((?v0 C_llist$)) (fun_app$bf (fun_app$bg lprefix$b ?v0) ?v0)) :named a51))
(assert (! (forall ((?v0 B_llist$)) (fun_app$bb (fun_app$bc lprefix$ ?v0) ?v0)) :named a52))
(assert (! (forall ((?v0 D_llist$)) (fun_app$bd (fun_app$be lprefix$a ?v0) ?v0)) :named a53))
(assert (! (forall ((?v0 C_llist$)) (fun_app$bf (fun_app$bg lprefix$b ?v0) ?v0)) :named a54))
(assert (! (forall ((?v0 D_llist$)) (= (fun_app$e (lmap$a uua$) ?v0) ?v0)) :named a55))
(assert (! (forall ((?v0 B_llist$)) (= (fun_app$w (lmap$h uub$) ?v0) ?v0)) :named a56))
(assert (! (forall ((?v0 C_llist$)) (= (fun_app$p (lmap$d uuc$) ?v0) ?v0)) :named a57))
(assert (! (forall ((?v0 A_b_llist_fun_b_llist_fun$) (?v1 A_b_llist_fun$) (?v2 B_llist$) (?v3 A_b_llist_fun_b_llist_fun$) (?v4 B_llist_b_llist_bool_fun_fun$)) (=> (and (forall ((?v5 A_b_llist_fun$)) (= (fun_app$k ?v0 ?v5) (ite (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v1) ?v2 (fun_app$k ?v3 ?v5)))) (and (forall ((?v5 A_b_llist_fun$) (?v6 A_b_llist_fun$)) (=> (and (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v6) (not (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v1))) (fun_app$bb (fun_app$bc ?v4 (fun_app$k ?v3 ?v5)) (fun_app$k ?v3 ?v6)))) (and (forall ((?v5 A_b_llist_fun$)) (=> (not (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v1)) (fun_app$bb (fun_app$bc ?v4 ?v2) (fun_app$k ?v3 ?v5)))) (fun_app$bb (fun_app$bc ?v4 ?v2) ?v2)))) (monotone$b (fun_ord$ lprefix$) ?v4 ?v0))) :named a58))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_fun$) (?v1 A_b_llist_fun$) (?v2 A_b_llist_fun$) (?v3 A_b_llist_fun_a_b_llist_fun_fun$) (?v4 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$)) (=> (and (forall ((?v5 A_b_llist_fun$)) (= (fun_app$ae ?v0 ?v5) (ite (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v1) ?v2 (fun_app$ae ?v3 ?v5)))) (and (forall ((?v5 A_b_llist_fun$) (?v6 A_b_llist_fun$)) (=> (and (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v6) (not (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v1))) (fun_app$bh (fun_app$bi ?v4 (fun_app$ae ?v3 ?v5)) (fun_app$ae ?v3 ?v6)))) (and (forall ((?v5 A_b_llist_fun$)) (=> (not (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v1)) (fun_app$bh (fun_app$bi ?v4 ?v2) (fun_app$ae ?v3 ?v5)))) (fun_app$bh (fun_app$bi ?v4 ?v2) ?v2)))) (monotone$c (fun_ord$ lprefix$) ?v4 ?v0))) :named a59))
(assert (! (forall ((?v0 A_b_llist_fun_d_llist_fun$) (?v1 A_b_llist_fun$) (?v2 D_llist$) (?v3 A_b_llist_fun_d_llist_fun$) (?v4 D_llist_d_llist_bool_fun_fun$)) (=> (and (forall ((?v5 A_b_llist_fun$)) (= (fun_app$ ?v0 ?v5) (ite (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v1) ?v2 (fun_app$ ?v3 ?v5)))) (and (forall ((?v5 A_b_llist_fun$) (?v6 A_b_llist_fun$)) (=> (and (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v6) (not (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v1))) (fun_app$bd (fun_app$be ?v4 (fun_app$ ?v3 ?v5)) (fun_app$ ?v3 ?v6)))) (and (forall ((?v5 A_b_llist_fun$)) (=> (not (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v1)) (fun_app$bd (fun_app$be ?v4 ?v2) (fun_app$ ?v3 ?v5)))) (fun_app$bd (fun_app$be ?v4 ?v2) ?v2)))) (monotone$ (fun_ord$ lprefix$) ?v4 ?v0))) :named a60))
(assert (! (forall ((?v0 A_b_llist_fun_c_llist_fun$) (?v1 A_b_llist_fun$) (?v2 C_llist$) (?v3 A_b_llist_fun_c_llist_fun$) (?v4 C_llist_c_llist_bool_fun_fun$)) (=> (and (forall ((?v5 A_b_llist_fun$)) (= (fun_app$b ?v0 ?v5) (ite (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v1) ?v2 (fun_app$b ?v3 ?v5)))) (and (forall ((?v5 A_b_llist_fun$) (?v6 A_b_llist_fun$)) (=> (and (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v6) (not (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v1))) (fun_app$bf (fun_app$bg ?v4 (fun_app$b ?v3 ?v5)) (fun_app$b ?v3 ?v6)))) (and (forall ((?v5 A_b_llist_fun$)) (=> (not (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v5) ?v1)) (fun_app$bf (fun_app$bg ?v4 ?v2) (fun_app$b ?v3 ?v5)))) (fun_app$bf (fun_app$bg ?v4 ?v2) ?v2)))) (monotone$a (fun_ord$ lprefix$) ?v4 ?v0))) :named a61))
(assert (! (forall ((?v0 A_b_llist_fun$) (?v1 A_b_llist_fun$) (?v2 A_b_llist_fun$)) (=> (and (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v0) ?v1) (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v1) ?v2)) (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v0) ?v2))) :named a62))
(assert (! (forall ((?v0 A_b_llist_fun$) (?v1 A_b_llist_fun$)) (=> (and (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v0) ?v1) (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v1) ?v0)) (= ?v0 ?v1))) :named a63))
(assert (! (forall ((?v0 D_llist_d_llist_bool_fun_fun$) (?v1 D_llist_a_b_llist_fun_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_d_llist_fun$)) (=> (and (monotone$d ?v0 (fun_ord$ lprefix$) ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$c ?v2 (fun_ord$ lprefix$) (fun_app$af (uud$ ?v1) ?v3)))) :named a64))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist_a_b_llist_fun_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_c_llist_fun$)) (=> (and (monotone$e ?v0 (fun_ord$ lprefix$) ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$c ?v2 (fun_ord$ lprefix$) (fun_app$am (uue$ ?v1) ?v3)))) :named a65))
(assert (! (forall ((?v0 D_llist_d_llist_bool_fun_fun$) (?v1 D_llist_a_b_llist_fun_fun$) (?v2 B_llist_b_llist_bool_fun_fun$) (?v3 B_llist_d_llist_fun$)) (=> (and (monotone$d ?v0 (fun_ord$ lprefix$) ?v1) (monotone$f ?v2 ?v0 ?v3)) (monotone$g ?v2 (fun_ord$ lprefix$) (fun_app$ad (uuf$ ?v1) ?v3)))) :named a66))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist_a_b_llist_fun_fun$) (?v2 C_llist_c_llist_bool_fun_fun$) (?v3 C_llist_c_llist_fun$)) (=> (and (monotone$e ?v0 (fun_ord$ lprefix$) ?v1) (monotone$h ?v2 ?v0 ?v3)) (monotone$e ?v2 (fun_ord$ lprefix$) (fun_app$ak (uug$ ?v1) ?v3)))) :named a67))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist_a_b_llist_fun_fun$) (?v2 B_llist_b_llist_bool_fun_fun$) (?v3 B_llist_c_llist_fun$)) (=> (and (monotone$e ?v0 (fun_ord$ lprefix$) ?v1) (monotone$i ?v2 ?v0 ?v3)) (monotone$g ?v2 (fun_ord$ lprefix$) (fun_app$al (uuh$ ?v1) ?v3)))) :named a68))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_a_b_llist_fun_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_b_llist_fun$)) (=> (and (monotone$g ?v0 (fun_ord$ lprefix$) ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$c ?v2 (fun_ord$ lprefix$) (fun_app$ao (uui$ ?v1) ?v3)))) :named a69))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_a_b_llist_fun_fun$) (?v2 C_llist_c_llist_bool_fun_fun$) (?v3 C_llist_a_b_llist_fun_fun$)) (=> (and (monotone$c ?v0 (fun_ord$ lprefix$) ?v1) (monotone$e ?v2 ?v0 ?v3)) (monotone$e ?v2 (fun_ord$ lprefix$) (fun_app$ar (uuj$ ?v1) ?v3)))) :named a70))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_a_b_llist_fun_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_a_b_llist_fun_fun$)) (=> (and (monotone$c ?v0 (fun_ord$ lprefix$) ?v1) (monotone$c ?v2 ?v0 ?v3)) (monotone$c ?v2 (fun_ord$ lprefix$) (fun_app$as (uuk$ ?v1) ?v3)))) :named a71))
(assert (! (forall ((?v0 D_llist_d_llist_bool_fun_fun$) (?v1 D_llist_a_b_llist_fun_fun$) (?v2 C_llist_c_llist_bool_fun_fun$) (?v3 C_llist_d_llist_fun$)) (=> (and (monotone$d ?v0 (fun_ord$ lprefix$) ?v1) (monotone$j ?v2 ?v0 ?v3)) (monotone$e ?v2 (fun_ord$ lprefix$) (fun_app$aa (uul$ ?v1) ?v3)))) :named a72))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_a_b_llist_fun_fun$) (?v2 C_llist_c_llist_bool_fun_fun$) (?v3 C_llist_b_llist_fun$)) (=> (and (monotone$g ?v0 (fun_ord$ lprefix$) ?v1) (monotone$k ?v2 ?v0 ?v3)) (monotone$e ?v2 (fun_ord$ lprefix$) (fun_app$an (uum$ ?v1) ?v3)))) :named a73))
(assert (! (forall ((?v0 D_llist_d_llist_bool_fun_fun$) (?v1 D_llist_b_llist_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_d_llist_fun$)) (=> (and (monotone$l ?v0 lprefix$ ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$b ?v2 lprefix$ (fun_app$y (uun$ ?v1) ?v3)))) :named a74))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist_b_llist_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_c_llist_fun$)) (=> (and (monotone$k ?v0 lprefix$ ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$b ?v2 lprefix$ (fun_app$aj (uuo$ ?v1) ?v3)))) :named a75))
(assert (! (forall ((?v0 D_llist_d_llist_bool_fun_fun$) (?v1 D_llist_d_llist_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_d_llist_fun$)) (=> (and (monotone$m ?v0 lprefix$a ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$ ?v2 lprefix$a (fun_app$u (uup$ ?v1) ?v3)))) :named a76))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist_d_llist_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_c_llist_fun$)) (=> (and (monotone$j ?v0 lprefix$a ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$ ?v2 lprefix$a (fun_app$ag (uuq$ ?v1) ?v3)))) :named a77))
(assert (! (forall ((?v0 D_llist_d_llist_bool_fun_fun$) (?v1 D_llist_c_llist_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_d_llist_fun$)) (=> (and (monotone$n ?v0 lprefix$b ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$a ?v2 lprefix$b (fun_app$v (uur$ ?v1) ?v3)))) :named a78))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist_c_llist_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_c_llist_fun$)) (=> (and (monotone$h ?v0 lprefix$b ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$a ?v2 lprefix$b (fun_app$ah (uus$ ?v1) ?v3)))) :named a79))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_d_llist_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_a_b_llist_fun_fun$)) (=> (and (monotone$ ?v0 lprefix$a ?v1) (monotone$c ?v2 ?v0 ?v3)) (monotone$ ?v2 lprefix$a (fun_app$ap (uut$ ?v1) ?v3)))) :named a80))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_c_llist_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_a_b_llist_fun_fun$)) (=> (and (monotone$a ?v0 lprefix$b ?v1) (monotone$c ?v2 ?v0 ?v3)) (monotone$a ?v2 lprefix$b (fun_app$aq (uuu$ ?v1) ?v3)))) :named a81))
(assert (! (forall ((?v0 D_llist_d_llist_bool_fun_fun$) (?v1 D_llist_b_llist_fun$) (?v2 B_llist_b_llist_bool_fun_fun$) (?v3 B_llist_d_llist_fun$)) (=> (and (monotone$l ?v0 lprefix$ ?v1) (monotone$f ?v2 ?v0 ?v3)) (monotone$o ?v2 lprefix$ (fun_app$x (uuv$ ?v1) ?v3)))) :named a82))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist_b_llist_fun$) (?v2 B_llist_b_llist_bool_fun_fun$) (?v3 B_llist_c_llist_fun$)) (=> (and (monotone$k ?v0 lprefix$ ?v1) (monotone$i ?v2 ?v0 ?v3)) (monotone$o ?v2 lprefix$ (fun_app$ai (uuw$ ?v1) ?v3)))) :named a83))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_b_llist_fun$) (?v2 B_d_fun$)) (=> (monotone$b ?v0 lprefix$ ?v1) (monotone$ ?v0 lprefix$a (fun_app$s (uux$ ?v1) ?v2)))) :named a84))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_b_llist_fun$) (?v2 B_c_fun$)) (=> (monotone$b ?v0 lprefix$ ?v1) (monotone$a ?v0 lprefix$b (fun_app$t (uuy$ ?v1) ?v2)))) :named a85))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_d_llist_fun$) (?v2 D_b_fun$)) (=> (monotone$ ?v0 lprefix$a ?v1) (monotone$b ?v0 lprefix$ (fun_app$l (uuz$ ?v1) ?v2)))) :named a86))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_d_llist_fun$) (?v2 D_d_fun$)) (=> (monotone$ ?v0 lprefix$a ?v1) (monotone$ ?v0 lprefix$a (fun_app$i (uva$ ?v1) ?v2)))) :named a87))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_d_llist_fun$) (?v2 D_c_fun$)) (=> (monotone$ ?v0 lprefix$a ?v1) (monotone$a ?v0 lprefix$b (fun_app$j (uvb$ ?v1) ?v2)))) :named a88))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_c_llist_fun$) (?v2 C_b_fun$)) (=> (monotone$a ?v0 lprefix$b ?v1) (monotone$b ?v0 lprefix$ (fun_app$q (uvc$ ?v1) ?v2)))) :named a89))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_c_llist_fun$) (?v2 C_c_fun$)) (=> (monotone$a ?v0 lprefix$b ?v1) (monotone$a ?v0 lprefix$b (fun_app$o (uvd$ ?v1) ?v2)))) :named a90))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_c_llist_fun$) (?v2 C_d_fun$)) (=> (monotone$a ?v0 lprefix$b ?v1) (monotone$ ?v0 lprefix$a (fun_app$n (uve$ ?v1) ?v2)))) :named a91))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_d_llist_fun$) (?v2 D_d_fun$)) (=> (monotone$f ?v0 lprefix$a ?v1) (monotone$f ?v0 lprefix$a (fun_app$d (uvf$ ?v1) ?v2)))) :named a92))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_d_llist_fun$) (?v2 D_c_fun$)) (=> (monotone$f ?v0 lprefix$a ?v1) (monotone$i ?v0 lprefix$b (fun_app$g (uvg$ ?v1) ?v2)))) :named a93))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (fun_app$bb (fun_app$bc lprefix$ ?v0) ?v1) (fun_app$bb (fun_app$bc lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a94))
(assert (! (forall ((?v0 D_llist$) (?v1 D_llist$)) (=> (and (fun_app$bd (fun_app$be lprefix$a ?v0) ?v1) (fun_app$bd (fun_app$be lprefix$a ?v1) ?v0)) (= ?v0 ?v1))) :named a95))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$)) (=> (and (fun_app$bf (fun_app$bg lprefix$b ?v0) ?v1) (fun_app$bf (fun_app$bg lprefix$b ?v1) ?v0)) (= ?v0 ?v1))) :named a96))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (fun_app$bb (fun_app$bc lprefix$ ?v0) ?v1) (fun_app$bb (fun_app$bc lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a97))
(assert (! (forall ((?v0 D_llist$) (?v1 D_llist$)) (=> (and (fun_app$bd (fun_app$be lprefix$a ?v0) ?v1) (fun_app$bd (fun_app$be lprefix$a ?v1) ?v0)) (= ?v0 ?v1))) :named a98))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$)) (=> (and (fun_app$bf (fun_app$bg lprefix$b ?v0) ?v1) (fun_app$bf (fun_app$bg lprefix$b ?v1) ?v0)) (= ?v0 ?v1))) :named a99))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$bb (fun_app$bc lprefix$ ?v0) ?v1) (fun_app$bb (fun_app$bc lprefix$ ?v2) ?v1)) (or (fun_app$bb (fun_app$bc lprefix$ ?v0) ?v2) (fun_app$bb (fun_app$bc lprefix$ ?v2) ?v0)))) :named a100))
(assert (! (forall ((?v0 D_llist$) (?v1 D_llist$) (?v2 D_llist$)) (=> (and (fun_app$bd (fun_app$be lprefix$a ?v0) ?v1) (fun_app$bd (fun_app$be lprefix$a ?v2) ?v1)) (or (fun_app$bd (fun_app$be lprefix$a ?v0) ?v2) (fun_app$bd (fun_app$be lprefix$a ?v2) ?v0)))) :named a101))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$) (?v2 C_llist$)) (=> (and (fun_app$bf (fun_app$bg lprefix$b ?v0) ?v1) (fun_app$bf (fun_app$bg lprefix$b ?v2) ?v1)) (or (fun_app$bf (fun_app$bg lprefix$b ?v0) ?v2) (fun_app$bf (fun_app$bg lprefix$b ?v2) ?v0)))) :named a102))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$bb (fun_app$bc lprefix$ ?v0) ?v1) (fun_app$bb (fun_app$bc lprefix$ ?v1) ?v2)) (fun_app$bb (fun_app$bc lprefix$ ?v0) ?v2))) :named a103))
(assert (! (forall ((?v0 D_llist$) (?v1 D_llist$) (?v2 D_llist$)) (=> (and (fun_app$bd (fun_app$be lprefix$a ?v0) ?v1) (fun_app$bd (fun_app$be lprefix$a ?v1) ?v2)) (fun_app$bd (fun_app$be lprefix$a ?v0) ?v2))) :named a104))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$) (?v2 C_llist$)) (=> (and (fun_app$bf (fun_app$bg lprefix$b ?v0) ?v1) (fun_app$bf (fun_app$bg lprefix$b ?v1) ?v2)) (fun_app$bf (fun_app$bg lprefix$b ?v0) ?v2))) :named a105))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$bb (fun_app$bc lprefix$ ?v0) ?v1) (fun_app$bb (fun_app$bc lprefix$ ?v1) ?v2)) (fun_app$bb (fun_app$bc lprefix$ ?v0) ?v2))) :named a106))
(assert (! (forall ((?v0 D_llist$) (?v1 D_llist$) (?v2 D_llist$)) (=> (and (fun_app$bd (fun_app$be lprefix$a ?v0) ?v1) (fun_app$bd (fun_app$be lprefix$a ?v1) ?v2)) (fun_app$bd (fun_app$be lprefix$a ?v0) ?v2))) :named a107))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$) (?v2 C_llist$)) (=> (and (fun_app$bf (fun_app$bg lprefix$b ?v0) ?v1) (fun_app$bf (fun_app$bg lprefix$b ?v1) ?v2)) (fun_app$bf (fun_app$bg lprefix$b ?v0) ?v2))) :named a108))
(assert (! (forall ((?v0 A_b_llist_fun$)) (fun_app$bh (fun_app$bi (fun_ord$ lprefix$) ?v0) ?v0)) :named a109))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 B_llist$)) (monotone$k ?v0 lprefix$ (uvh$ ?v1))) :named a110))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist$)) (monotone$o ?v0 lprefix$ (uvi$ ?v1))) :named a111))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 D_llist$)) (monotone$j ?v0 lprefix$a (uvj$ ?v1))) :named a112))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist$)) (monotone$h ?v0 lprefix$b (uvk$ ?v1))) :named a113))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 B_llist$)) (monotone$b ?v0 lprefix$ (uvl$ ?v1))) :named a114))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 D_llist$)) (monotone$f ?v0 lprefix$a (uvm$ ?v1))) :named a115))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 C_llist$)) (monotone$i ?v0 lprefix$b (uvn$ ?v1))) :named a116))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 D_llist$)) (monotone$ ?v0 lprefix$a (uvo$ ?v1))) :named a117))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 C_llist$)) (monotone$a ?v0 lprefix$b (uvp$ ?v1))) :named a118))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_b_llist_bool_fun_fun$) (?v2 B_llist_b_llist_fun$) (?v3 A$)) (=> (monotone$o ?v0 ?v1 ?v2) (monotone$b (fun_ord$ ?v0) ?v1 (fun_app$aw (uvq$ ?v2) ?v3)))) :named a119))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v2 B_llist_a_b_llist_fun_fun$) (?v3 A$)) (=> (monotone$g ?v0 ?v1 ?v2) (monotone$c (fun_ord$ ?v0) ?v1 (fun_app$ax (uvr$ ?v2) ?v3)))) :named a120))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 D_llist_d_llist_bool_fun_fun$) (?v2 B_llist_d_llist_fun$) (?v3 A$)) (=> (monotone$f ?v0 ?v1 ?v2) (monotone$ (fun_ord$ ?v0) ?v1 (fun_app$at (uvs$ ?v2) ?v3)))) :named a121))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 C_llist_c_llist_bool_fun_fun$) (?v2 B_llist_c_llist_fun$) (?v3 A$)) (=> (monotone$i ?v0 ?v1 ?v2) (monotone$a (fun_ord$ ?v0) ?v1 (fun_app$av (uvt$ ?v2) ?v3)))) :named a122))
(check-sat)
;(get-unsat-core)
