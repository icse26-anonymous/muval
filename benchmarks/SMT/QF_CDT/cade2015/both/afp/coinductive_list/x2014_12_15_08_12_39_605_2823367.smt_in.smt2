; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 377
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_set_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun x$ () A$)
(declare-fun uu$ (A$) A_llist_a_llist_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun lSup$ () A_llist_set_a_llist_fun$)
(declare-fun mcont$ (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$) Bool)
(declare-fun compact$ (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist$) Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lmember$ (A$ A_llist$) Bool)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$b (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$c (A_bool_fun$ A$) Bool)
(declare-fun pred_llist$ (A_bool_fun$ A_llist$) Bool)
(declare-fun partial_function_definitions$ (A_llist_a_llist_bool_fun_fun$ A_llist_set_a_llist_fun$) Bool)
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (lCons$ ?v0 ?v1)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a0))
(assert (! (not (= (compact$ lSup$ lprefix$ (lCons$ x$ xs$)) (compact$ lSup$ lprefix$ xs$))) :named a1))
(assert (! (forall ((?v0 A_llist$)) (fun_app$a (fun_app$b lprefix$ ?v0) ?v0)) :named a2))
(assert (! (forall ((?v0 A_llist$)) (fun_app$a (fun_app$b lprefix$ ?v0) ?v0)) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$a (fun_app$b lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$a (fun_app$b lprefix$ ?v1) ?v3))) :pattern ((fun_app$a (fun_app$b lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$a (fun_app$b lprefix$ (lCons$ ?v0 ?v1)) ?v2) (exists ((?v3 A_llist$)) (and (= ?v2 (lCons$ ?v0 ?v3)) (fun_app$a (fun_app$b lprefix$ ?v1) ?v3))))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (compact$ lSup$ lprefix$ (lCons$ ?v0 ?v1)) (compact$ lSup$ lprefix$ ?v1))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (compact$ lSup$ lprefix$ ?v0) (compact$ lSup$ lprefix$ (lCons$ ?v1 ?v0)))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$a (fun_app$b lprefix$ ?v0) ?v1) (fun_app$a (fun_app$b lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$a (fun_app$b lprefix$ ?v0) ?v1) (fun_app$a (fun_app$b lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$a (fun_app$b lprefix$ ?v0) ?v1) (fun_app$a (fun_app$b lprefix$ ?v2) ?v1)) (or (fun_app$a (fun_app$b lprefix$ ?v0) ?v2) (fun_app$a (fun_app$b lprefix$ ?v2) ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$a (fun_app$b lprefix$ ?v0) ?v1) (fun_app$a (fun_app$b lprefix$ ?v1) ?v2)) (fun_app$a (fun_app$b lprefix$ ?v0) ?v2))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$a (fun_app$b lprefix$ ?v0) ?v1) (fun_app$a (fun_app$b lprefix$ ?v1) ?v2)) (fun_app$a (fun_app$b lprefix$ ?v0) ?v2))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A$)) (=> (fun_app$a (fun_app$b lprefix$ ?v0) ?v1) (fun_app$a (fun_app$b lprefix$ (lCons$ ?v2 ?v0)) (lCons$ ?v2 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2)) (and (fun_app$c ?v0 ?v1) (pred_llist$ ?v0 ?v2))) :pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2))))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (lmember$ ?v0 (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (lmember$ ?v0 ?v2))) :pattern ((lmember$ ?v0 (lCons$ ?v1 ?v2))))) :named a16))
(assert (! (forall ((?v0 A$)) (mcont$ lSup$ lprefix$ lSup$ lprefix$ (uu$ ?v0))) :named a17))
(assert (! (partial_function_definitions$ lprefix$ lSup$) :named a18))
(check-sat)
;(get-unsat-core)
