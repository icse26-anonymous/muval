; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 535
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_a_llist_fun$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort A_llist_b_fun$ 0)
(declare-sort B_a_llist_fun$ 0)
(declare-sort B_llist_a_fun$ 0)
(declare-sort B_llist_b_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort B_llist_enat_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort B_llist_b_llist_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort A_b_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_bool_fun_fun$ 0)
(declare-sort A_llist_llist_enat_fun$ 0)
(declare-sort B_a_llist_bool_fun_fun$ 0)
(declare-sort B_b_llist_bool_fun_fun$ 0)
(declare-sort B_llist_llist_enat_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_llist_bool_fun_fun$ 0)
(declare-sort B_llist_a_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_bool_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))
  (B_llist_llist$ (lNil$c) (lCons$c (lhd$c B_llist$) (ltl$c B_llist_llist$)))
  (A_llist_llist_llist$ (lNil$d) (lCons$d (lhd$d A_llist_llist$) (ltl$d A_llist_llist_llist$)))
  (A_llist_llist_llist_llist$ (lNil$e) (lCons$e (lhd$e A_llist_llist_llist$) (ltl$e A_llist_llist_llist_llist$)))
  (B_llist_llist_llist$ (lNil$f) (lCons$f (lhd$f B_llist_llist$) (ltl$f B_llist_llist_llist$)))
  (B_llist_llist_llist_llist$ (lNil$g) (lCons$g (lhd$g B_llist_llist_llist$) (ltl$g B_llist_llist_llist_llist$)))))
(declare-fun uu$ () A_llist_b_llist_bool_fun_fun$)
(declare-fun uua$ () B_b_fun$)
(declare-fun uub$ () A_a_fun$)
(declare-fun uuc$ () B_llist_bool_fun$)
(declare-fun uud$ () A_llist_bool_fun$)
(declare-fun uue$ () B_bool_fun$)
(declare-fun uuf$ () A_bool_fun$)
(declare-fun xss$ () A_llist_llist$)
(declare-fun yss$ () B_llist_llist$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun llcp$ (A_llist_llist$) A_llist_llist_enat_fun$)
(declare-fun lmap$ (A_a_fun$) A_llist_a_llist_fun$)
(declare-fun zero$ () Nat$)
(declare-fun llcp$a (B_llist_llist$) B_llist_llist_enat_fun$)
(declare-fun llcp$b (A_llist$) A_llist_enat_fun$)
(declare-fun llcp$c (B_llist$) B_llist_enat_fun$)
(declare-fun lmap$a (B_a_fun$ B_llist$) A_llist$)
(declare-fun lmap$b (A_b_fun$ A_llist$) B_llist$)
(declare-fun lmap$c (B_b_fun$) B_llist_b_llist_fun$)
(declare-fun lmap$d (A_llist_a_fun$ A_llist_llist$) A_llist$)
(declare-fun lmap$e (B_llist_a_fun$ B_llist_llist$) A_llist$)
(declare-fun lmap$f (A_llist_b_fun$ A_llist_llist$) B_llist$)
(declare-fun lmap$g (B_llist_b_fun$ B_llist_llist$) B_llist$)
(declare-fun lmap$h (A_a_llist_fun$ A_llist$) A_llist_llist$)
(declare-fun lmap$i (B_a_llist_fun$ B_llist$) A_llist_llist$)
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun llength$ () A_llist_enat_fun$)
(declare-fun lprefix$ (A_llist_llist$ A_llist_llist$) Bool)
(declare-fun fun_app$a (A_llist_b_llist_bool_fun_fun$ A_llist$) B_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$c (B_llist_enat_fun$ B_llist$) Enat$)
(declare-fun fun_app$d (B_b_fun$ B$) B$)
(declare-fun fun_app$e (A_a_fun$ A$) A$)
(declare-fun fun_app$f (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$g (B_bool_fun$ B$) Bool)
(declare-fun fun_app$h (A_bool_fun$ A$) Bool)
(declare-fun fun_app$i (A_llist_llist_enat_fun$ A_llist_llist$) Enat$)
(declare-fun fun_app$j (B_llist_llist_enat_fun$ B_llist_llist$) Enat$)
(declare-fun fun_app$k (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$l (B_llist_b_llist_fun$ B_llist$) B_llist$)
(declare-fun fun_app$m (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$n (B_llist_a_llist_bool_fun_fun$ B_llist$) A_llist_bool_fun$)
(declare-fun fun_app$o (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun fun_app$p (A_llist_llist_a_llist_bool_fun_fun$ A_llist_llist$) A_llist_bool_fun$)
(declare-fun fun_app$q (A_a_llist_fun$ A$) A_llist$)
(declare-fun infinity$ () Enat$)
(declare-fun iterates$ (A_llist_a_llist_fun$ A_llist$) A_llist_llist$)
(declare-fun lconcat$a (B_llist_llist$) B_llist$)
(declare-fun lconcat$b (A_llist_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun lconcat$c (B_llist_llist_llist_llist$) B_llist_llist_llist$)
(declare-fun lconcat$d (B_llist_llist_llist$) B_llist_llist$)
(declare-fun lconcat$e (A_llist_llist_llist$) A_llist_llist$)
(declare-fun llength$a () B_llist_enat_fun$)
(declare-fun llength$b () A_llist_llist_enat_fun$)
(declare-fun llength$c () B_llist_llist_enat_fun$)
(declare-fun lprefix$a (B_llist_llist$ B_llist_llist$) Bool)
(declare-fun lprefix$b (A_llist$) A_llist_bool_fun$)
(declare-fun lprefix$c (B_llist$) B_llist_bool_fun$)
(declare-fun lprefix$d (A_llist_llist_llist$ A_llist_llist_llist$) Bool)
(declare-fun lprefix$e (B_llist_llist_llist$ B_llist_llist_llist$) Bool)
(declare-fun iterates$a (B_llist_b_llist_fun$ B_llist$) B_llist_llist$)
(declare-fun iterates$b (A_a_fun$) A_a_llist_fun$)
(declare-fun iterates$c (B_b_fun$ B$) B_llist$)
(declare-fun llist_all2$ (A_llist_b_llist_bool_fun_fun$ A_llist_llist$ B_llist_llist$) Bool)
(declare-fun ltakeWhile$ (A_llist_bool_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun gen_llength$ (Nat$) A_llist_llist_enat_fun$)
(declare-fun llist_all2$a (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$b (A_b_bool_fun_fun$) A_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$c (B_a_bool_fun_fun$) B_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$d (B_b_bool_fun_fun$) B_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$e (A_a_llist_bool_fun_fun$ A_llist$ A_llist_llist$) Bool)
(declare-fun llist_all2$f (A_b_llist_bool_fun_fun$ A_llist$ B_llist_llist$) Bool)
(declare-fun llist_all2$g (B_a_llist_bool_fun_fun$ B_llist$ A_llist_llist$) Bool)
(declare-fun llist_all2$h (B_b_llist_bool_fun_fun$ B_llist$ B_llist_llist$) Bool)
(declare-fun llist_all2$i (A_llist_a_bool_fun_fun$) A_llist_llist_a_llist_bool_fun_fun$)
(declare-fun ltakeWhile$a (B_llist_bool_fun$ B_llist_llist$) B_llist_llist$)
(declare-fun ltakeWhile$b (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun ltakeWhile$c (B_bool_fun$) B_llist_b_llist_fun$)
(declare-fun gen_llength$a (Nat$) B_llist_llist_enat_fun$)
(declare-fun gen_llength$b (Nat$) A_llist_enat_fun$)
(declare-fun gen_llength$c (Nat$) B_llist_enat_fun$)
(declare-fun lstrict_prefix$ (A_llist_llist$ A_llist_llist$) Bool)
(declare-fun lstrict_prefix$a (B_llist_llist$ B_llist_llist$) Bool)
(declare-fun lstrict_prefix$b (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$c (B_llist$) B_llist_bool_fun$)
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$)) (! (= (fun_app$ (fun_app$a uu$ ?v0) ?v1) (= (fun_app$b llength$ ?v0) (fun_app$c llength$a ?v1))) :pattern ((fun_app$ (fun_app$a uu$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$d uua$ ?v0) ?v0) :pattern ((fun_app$d uua$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$e uub$ ?v0) ?v0) :pattern ((fun_app$e uub$ ?v0)))) :named a2))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$ uuc$ ?v0) true) :pattern ((fun_app$ uuc$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$f uud$ ?v0) true) :pattern ((fun_app$f uud$ ?v0)))) :named a4))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$g uue$ ?v0) true) :pattern ((fun_app$g uue$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$h uuf$ ?v0) true) :pattern ((fun_app$h uuf$ ?v0)))) :named a6))
(assert (! (not (= (fun_app$b llength$ (lconcat$ xss$)) (fun_app$c llength$a (lconcat$a yss$)))) :named a7))
(assert (! (llist_all2$ uu$ xss$ yss$) :named a8))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$i (llcp$ ?v0) ?v0) (fun_app$i llength$b ?v0)) :pattern ((llcp$ ?v0)))) :named a9))
(assert (! (forall ((?v0 B_llist_llist$)) (! (= (fun_app$j (llcp$a ?v0) ?v0) (fun_app$j llength$c ?v0)) :pattern ((llcp$a ?v0)))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$b (llcp$b ?v0) ?v0) (fun_app$b llength$ ?v0)) :pattern ((llcp$b ?v0)))) :named a11))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$c (llcp$c ?v0) ?v0) (fun_app$c llength$a ?v0)) :pattern ((llcp$c ?v0)))) :named a12))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (fun_app$b llength$ (fun_app$k (lmap$ ?v0) ?v1)) (fun_app$b llength$ ?v1))) :named a13))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (fun_app$b llength$ (lmap$a ?v0 ?v1)) (fun_app$c llength$a ?v1))) :named a14))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (fun_app$c llength$a (lmap$b ?v0 ?v1)) (fun_app$b llength$ ?v1))) :named a15))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (fun_app$c llength$a (fun_app$l (lmap$c ?v0) ?v1)) (fun_app$c llength$a ?v1))) :named a16))
(assert (! (forall ((?v0 A_llist_a_fun$) (?v1 A_llist_llist$)) (= (fun_app$b llength$ (lmap$d ?v0 ?v1)) (fun_app$i llength$b ?v1))) :named a17))
(assert (! (forall ((?v0 B_llist_a_fun$) (?v1 B_llist_llist$)) (= (fun_app$b llength$ (lmap$e ?v0 ?v1)) (fun_app$j llength$c ?v1))) :named a18))
(assert (! (forall ((?v0 A_llist_b_fun$) (?v1 A_llist_llist$)) (= (fun_app$c llength$a (lmap$f ?v0 ?v1)) (fun_app$i llength$b ?v1))) :named a19))
(assert (! (forall ((?v0 B_llist_b_fun$) (?v1 B_llist_llist$)) (= (fun_app$c llength$a (lmap$g ?v0 ?v1)) (fun_app$j llength$c ?v1))) :named a20))
(assert (! (forall ((?v0 A_a_llist_fun$) (?v1 A_llist$)) (= (fun_app$i llength$b (lmap$h ?v0 ?v1)) (fun_app$b llength$ ?v1))) :named a21))
(assert (! (forall ((?v0 B_a_llist_fun$) (?v1 B_llist$)) (= (fun_app$i llength$b (lmap$i ?v0 ?v1)) (fun_app$c llength$a ?v1))) :named a22))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (lprefix$ ?v0 ?v1) (= (fun_app$i llength$b ?v0) (fun_app$i llength$b ?v1))) (= ?v0 ?v1))) :named a23))
(assert (! (forall ((?v0 B_llist_llist$) (?v1 B_llist_llist$)) (=> (and (lprefix$a ?v0 ?v1) (= (fun_app$j llength$c ?v0) (fun_app$j llength$c ?v1))) (= ?v0 ?v1))) :named a24))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$f (lprefix$b ?v0) ?v1) (= (fun_app$b llength$ ?v0) (fun_app$b llength$ ?v1))) (= ?v0 ?v1))) :named a25))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (fun_app$ (lprefix$c ?v0) ?v1) (= (fun_app$c llength$a ?v0) (fun_app$c llength$a ?v1))) (= ?v0 ?v1))) :named a26))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (= (= (fun_app$i llength$b (ltakeWhile$ ?v0 ?v1)) (fun_app$i llength$b ?v1)) (= (ltakeWhile$ ?v0 ?v1) ?v1))) :named a27))
(assert (! (forall ((?v0 B_llist_bool_fun$) (?v1 B_llist_llist$)) (= (= (fun_app$j llength$c (ltakeWhile$a ?v0 ?v1)) (fun_app$j llength$c ?v1)) (= (ltakeWhile$a ?v0 ?v1) ?v1))) :named a28))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (= (fun_app$b llength$ (fun_app$k (ltakeWhile$b ?v0) ?v1)) (fun_app$b llength$ ?v1)) (= (fun_app$k (ltakeWhile$b ?v0) ?v1) ?v1))) :named a29))
(assert (! (forall ((?v0 B_bool_fun$) (?v1 B_llist$)) (= (= (fun_app$c llength$a (fun_app$l (ltakeWhile$c ?v0) ?v1)) (fun_app$c llength$a ?v1)) (= (fun_app$l (ltakeWhile$c ?v0) ?v1) ?v1))) :named a30))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$f (fun_app$m (llist_all2$a ?v0) ?v1) ?v2) (= (fun_app$b llength$ ?v1) (fun_app$b llength$ ?v2)))) :named a31))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (=> (fun_app$ (fun_app$a (llist_all2$b ?v0) ?v1) ?v2) (= (fun_app$b llength$ ?v1) (fun_app$c llength$a ?v2)))) :named a32))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$)) (=> (fun_app$f (fun_app$n (llist_all2$c ?v0) ?v1) ?v2) (= (fun_app$c llength$a ?v1) (fun_app$b llength$ ?v2)))) :named a33))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (fun_app$ (fun_app$o (llist_all2$d ?v0) ?v1) ?v2) (= (fun_app$c llength$a ?v1) (fun_app$c llength$a ?v2)))) :named a34))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 B_llist_llist$)) (=> (llist_all2$ ?v0 ?v1 ?v2) (= (fun_app$i llength$b ?v1) (fun_app$j llength$c ?v2)))) :named a35))
(assert (! (forall ((?v0 A_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist_llist$)) (=> (llist_all2$e ?v0 ?v1 ?v2) (= (fun_app$b llength$ ?v1) (fun_app$i llength$b ?v2)))) :named a36))
(assert (! (forall ((?v0 A_b_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist_llist$)) (=> (llist_all2$f ?v0 ?v1 ?v2) (= (fun_app$b llength$ ?v1) (fun_app$j llength$c ?v2)))) :named a37))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist_llist$)) (=> (llist_all2$g ?v0 ?v1 ?v2) (= (fun_app$c llength$a ?v1) (fun_app$i llength$b ?v2)))) :named a38))
(assert (! (forall ((?v0 B_b_llist_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist_llist$)) (=> (llist_all2$h ?v0 ?v1 ?v2) (= (fun_app$c llength$a ?v1) (fun_app$j llength$c ?v2)))) :named a39))
(assert (! (forall ((?v0 A_llist_a_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist$)) (=> (fun_app$f (fun_app$p (llist_all2$i ?v0) ?v1) ?v2) (= (fun_app$i llength$b ?v1) (fun_app$b llength$ ?v2)))) :named a40))
(assert (! (= llength$b (gen_llength$ zero$)) :named a41))
(assert (! (= llength$c (gen_llength$a zero$)) :named a42))
(assert (! (= llength$ (gen_llength$b zero$)) :named a43))
(assert (! (= llength$a (gen_llength$c zero$)) :named a44))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (! (=> (lprefix$ ?v0 ?v1) (= (fun_app$i (llcp$ ?v1) ?v0) (fun_app$i llength$b ?v0))) :pattern ((fun_app$i (llcp$ ?v1) ?v0)))) :named a45))
(assert (! (forall ((?v0 B_llist_llist$) (?v1 B_llist_llist$)) (! (=> (lprefix$a ?v0 ?v1) (= (fun_app$j (llcp$a ?v1) ?v0) (fun_app$j llength$c ?v0))) :pattern ((fun_app$j (llcp$a ?v1) ?v0)))) :named a46))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$f (lprefix$b ?v0) ?v1) (= (fun_app$b (llcp$b ?v1) ?v0) (fun_app$b llength$ ?v0))) :pattern ((fun_app$b (llcp$b ?v1) ?v0)))) :named a47))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (=> (fun_app$ (lprefix$c ?v0) ?v1) (= (fun_app$c (llcp$c ?v1) ?v0) (fun_app$c llength$a ?v0))) :pattern ((fun_app$c (llcp$c ?v1) ?v0)))) :named a48))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (! (=> (lprefix$ ?v0 ?v1) (= (fun_app$i (llcp$ ?v0) ?v1) (fun_app$i llength$b ?v0))) :pattern ((fun_app$i (llcp$ ?v0) ?v1)))) :named a49))
(assert (! (forall ((?v0 B_llist_llist$) (?v1 B_llist_llist$)) (! (=> (lprefix$a ?v0 ?v1) (= (fun_app$j (llcp$a ?v0) ?v1) (fun_app$j llength$c ?v0))) :pattern ((fun_app$j (llcp$a ?v0) ?v1)))) :named a50))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$f (lprefix$b ?v0) ?v1) (= (fun_app$b (llcp$b ?v0) ?v1) (fun_app$b llength$ ?v0))) :pattern ((fun_app$b (llcp$b ?v0) ?v1)))) :named a51))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (=> (fun_app$ (lprefix$c ?v0) ?v1) (= (fun_app$c (llcp$c ?v0) ?v1) (fun_app$c llength$a ?v0))) :pattern ((fun_app$c (llcp$c ?v0) ?v1)))) :named a52))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (lstrict_prefix$ ?v0 ?v1) (less$ (fun_app$i llength$b ?v0) (fun_app$i llength$b ?v1)))) :named a53))
(assert (! (forall ((?v0 B_llist_llist$) (?v1 B_llist_llist$)) (=> (lstrict_prefix$a ?v0 ?v1) (less$ (fun_app$j llength$c ?v0) (fun_app$j llength$c ?v1)))) :named a54))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$f (lstrict_prefix$b ?v0) ?v1) (less$ (fun_app$b llength$ ?v0) (fun_app$b llength$ ?v1)))) :named a55))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (fun_app$ (lstrict_prefix$c ?v0) ?v1) (less$ (fun_app$c llength$a ?v0) (fun_app$c llength$a ?v1)))) :named a56))
(assert (! (= (lconcat$b lNil$e) lNil$d) :named a57))
(assert (! (= (lconcat$c lNil$g) lNil$f) :named a58))
(assert (! (= (lconcat$d lNil$f) lNil$c) :named a59))
(assert (! (= (lconcat$e lNil$d) lNil$a) :named a60))
(assert (! (= (lconcat$ lNil$a) lNil$) :named a61))
(assert (! (= (lconcat$a lNil$c) lNil$b) :named a62))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$)) (= (fun_app$i llength$b (iterates$ ?v0 ?v1)) infinity$)) :named a63))
(assert (! (forall ((?v0 B_llist_b_llist_fun$) (?v1 B_llist$)) (= (fun_app$j llength$c (iterates$a ?v0 ?v1)) infinity$)) :named a64))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$b llength$ (fun_app$q (iterates$b ?v0) ?v1)) infinity$)) :named a65))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (= (fun_app$c llength$a (iterates$c ?v0 ?v1)) infinity$)) :named a66))
(assert (! (forall ((?v0 B_llist_llist$)) (lprefix$a ?v0 ?v0)) :named a67))
(assert (! (forall ((?v0 A_llist_llist$)) (lprefix$ ?v0 ?v0)) :named a68))
(assert (! (forall ((?v0 B_llist$)) (fun_app$ (lprefix$c ?v0) ?v0)) :named a69))
(assert (! (forall ((?v0 A_llist$)) (fun_app$f (lprefix$b ?v0) ?v0)) :named a70))
(assert (! (forall ((?v0 B_llist_llist$)) (lprefix$a ?v0 ?v0)) :named a71))
(assert (! (forall ((?v0 A_llist_llist$)) (lprefix$ ?v0 ?v0)) :named a72))
(assert (! (forall ((?v0 B_llist$)) (fun_app$ (lprefix$c ?v0) ?v0)) :named a73))
(assert (! (forall ((?v0 A_llist$)) (fun_app$f (lprefix$b ?v0) ?v0)) :named a74))
(assert (! (forall ((?v0 B_llist$)) (= (fun_app$l (lmap$c uua$) ?v0) ?v0)) :named a75))
(assert (! (forall ((?v0 A_llist$)) (= (fun_app$k (lmap$ uub$) ?v0) ?v0)) :named a76))
(assert (! (forall ((?v0 B_llist_llist$)) (= (ltakeWhile$a uuc$ ?v0) ?v0)) :named a77))
(assert (! (forall ((?v0 A_llist_llist$)) (= (ltakeWhile$ uud$ ?v0) ?v0)) :named a78))
(assert (! (forall ((?v0 B_llist$)) (= (fun_app$l (ltakeWhile$c uue$) ?v0) ?v0)) :named a79))
(assert (! (forall ((?v0 A_llist$)) (= (fun_app$k (ltakeWhile$b uuf$) ?v0) ?v0)) :named a80))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (! (= (lprefix$d lNil$d ?v0) true) :pattern ((lprefix$d lNil$d ?v0)))) :named a81))
(assert (! (forall ((?v0 B_llist_llist_llist$)) (! (= (lprefix$e lNil$f ?v0) true) :pattern ((lprefix$e lNil$f ?v0)))) :named a82))
(assert (! (forall ((?v0 B_llist_llist$)) (! (= (lprefix$a lNil$c ?v0) true) :pattern ((lprefix$a lNil$c ?v0)))) :named a83))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$ (lprefix$c lNil$b) ?v0) true) :pattern ((fun_app$ (lprefix$c lNil$b) ?v0)))) :named a84))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (lprefix$ lNil$a ?v0) true) :pattern ((lprefix$ lNil$a ?v0)))) :named a85))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$f (lprefix$b lNil$) ?v0) true) :pattern ((fun_app$f (lprefix$b lNil$) ?v0)))) :named a86))
(check-sat)
;(get-unsat-core)
