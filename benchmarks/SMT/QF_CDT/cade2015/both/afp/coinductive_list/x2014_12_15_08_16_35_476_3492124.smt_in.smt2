; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 554
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort B_enat_fun$ 0)
(declare-sort Enat_b_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort B_enat_b_fun_fun$ 0)
(declare-sort Enat_b_b_fun_fun$ 0)
(declare-sort B_enat_enat_fun_fun$ 0)
(declare-sort Enat_b_enat_fun_fun$ 0)
(declare-sort Enat_enat_b_fun_fun$ 0)
(declare-sort B_b_fun_b_enat_fun_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-sort Enat_enat_enat_fun_fun$ 0)
(declare-sort B_enat_fun_b_enat_fun_fun$ 0)
(declare-sort Enat_b_fun_enat_b_fun_fun$ 0)
(declare-sort Enat_b_fun_enat_enat_fun_fun$ 0)
(declare-sort Enat_b_fun_b_enat_b_fun_fun_fun$ 0)
(declare-sort Enat_enat_fun_enat_enat_fun_fun$ 0)
(declare-sort B_enat_b_fun_fun_enat_b_b_fun_fun_fun$ 0)
(declare-sort Enat_enat_fun_enat_enat_enat_fun_fun_fun$ 0)
(declare-sort B_enat_enat_fun_fun_enat_b_enat_fun_fun_fun$ 0)
(declare-sort Enat_enat_b_fun_fun_enat_enat_b_fun_fun_fun$ 0)
(declare-sort Enat_enat_enat_fun_fun_enat_enat_enat_fun_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun a$ () B$)
(declare-fun f$ (Enat$) Enat_b_fun$)
(declare-fun uu$ (Enat$) Enat_b_fun$)
(declare-fun ord$ () B_b_bool_fun_fun$)
(declare-fun uua$ () Enat_b_fun$)
(declare-fun uub$ () Enat_b_fun$)
(declare-fun uuc$ (Enat_enat_enat_fun_fun$) Enat_enat_fun$)
(declare-fun uud$ (Enat_enat_enat_fun_fun$) Enat_enat_enat_fun_fun$)
(declare-fun uue$ (Enat_enat_enat_fun_fun$) Enat_enat_enat_fun_fun$)
(declare-fun uuf$ (Enat_enat_b_fun_fun$) Enat_b_fun$)
(declare-fun uug$ (Enat_enat_b_fun_fun$) Enat_enat_b_fun_fun$)
(declare-fun uuh$ (Enat_enat_b_fun_fun$) B_enat_b_fun_fun$)
(declare-fun uui$ (B_enat_b_fun_fun$) Enat_b_b_fun_fun$)
(declare-fun uuj$ (B_b_fun$) B_enat_b_fun_fun_enat_b_b_fun_fun_fun$)
(declare-fun uuk$ (B_enat_enat_fun_fun$) Enat_b_enat_fun_fun$)
(declare-fun uul$ (B_enat_fun$) B_enat_enat_fun_fun_enat_b_enat_fun_fun_fun$)
(declare-fun uum$ (Enat_enat_fun$) Enat_enat_enat_fun_fun_enat_enat_enat_fun_fun_fun$)
(declare-fun uun$ (Enat_b_fun$) Enat_enat_b_fun_fun_enat_enat_b_fun_fun_fun$)
(declare-fun uuo$ () Enat_enat_bool_fun_fun$)
(declare-fun uup$ (Enat$) Enat_b_fun_b_enat_b_fun_fun_fun$)
(declare-fun uuq$ (Enat$) Enat_enat_fun_enat_enat_enat_fun_fun_fun$)
(declare-fun uur$ (Enat_enat_fun$) B_enat_fun_b_enat_fun_fun$)
(declare-fun uus$ (B_enat_fun$) B_b_fun_b_enat_fun_fun$)
(declare-fun uut$ (B_enat_fun$) Enat_b_fun_enat_enat_fun_fun$)
(declare-fun uuu$ (Enat_enat_fun$) Enat_enat_fun_enat_enat_fun_fun$)
(declare-fun uuv$ (Enat$) B_enat_fun$)
(declare-fun uuw$ (Enat$) Enat_enat_fun$)
(declare-fun uux$ (B_enat_fun$) B_enat_fun$)
(declare-fun uuy$ (Enat_enat_fun$) Enat_enat_fun$)
(declare-fun eSuc$ () Enat_enat_fun$)
(declare-fun fun_app$ (Enat_b_fun$ Enat$) B$)
(declare-fun less_eq$ () Enat_enat_bool_fun_fun$)
(declare-fun fun_app$a (Enat_b_fun_enat_b_fun_fun$ Enat_b_fun$) Enat_b_fun$)
(declare-fun fun_app$b (Enat_enat_fun$ Enat$) Enat$)
(declare-fun fun_app$c (Enat_enat_enat_fun_fun$ Enat$) Enat_enat_fun$)
(declare-fun fun_app$d (Enat_enat_b_fun_fun$ Enat$) Enat_b_fun$)
(declare-fun fun_app$e (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$f (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$g (B_enat_fun$ B$) Enat$)
(declare-fun fun_app$h (B_enat_b_fun_fun$ B$) Enat_b_fun$)
(declare-fun fun_app$i (Enat_enat_fun_enat_enat_fun_fun$ Enat_enat_fun$) Enat_enat_fun$)
(declare-fun fun_app$j (Enat_b_enat_fun_fun$ Enat$) B_enat_fun$)
(declare-fun fun_app$k (B_enat_enat_fun_fun$ B$) Enat_enat_fun$)
(declare-fun fun_app$l (B_b_fun$ B$) B$)
(declare-fun fun_app$m (Enat_b_b_fun_fun$ Enat$) B_b_fun$)
(declare-fun fun_app$n (B_enat_fun_b_enat_fun_fun$ B_enat_fun$) B_enat_fun$)
(declare-fun fun_app$o (Enat_b_fun_enat_enat_fun_fun$ Enat_b_fun$) Enat_enat_fun$)
(declare-fun fun_app$p (B_b_fun_b_enat_fun_fun$ B_b_fun$) B_enat_fun$)
(declare-fun fun_app$q (Enat_enat_fun_enat_enat_enat_fun_fun_fun$ Enat_enat_fun$) Enat_enat_enat_fun_fun$)
(declare-fun fun_app$r (Enat_b_fun_b_enat_b_fun_fun_fun$ Enat_b_fun$) B_enat_b_fun_fun$)
(declare-fun fun_app$s (Enat_enat_enat_fun_fun_enat_enat_enat_fun_fun_fun$ Enat_enat_enat_fun_fun$) Enat_enat_enat_fun_fun$)
(declare-fun fun_app$t (Enat_enat_b_fun_fun_enat_enat_b_fun_fun_fun$ Enat_enat_b_fun_fun$) Enat_enat_b_fun_fun$)
(declare-fun fun_app$u (B_enat_enat_fun_fun_enat_b_enat_fun_fun_fun$ B_enat_enat_fun_fun$) Enat_b_enat_fun_fun$)
(declare-fun fun_app$v (B_enat_b_fun_fun_enat_b_b_fun_fun_fun$ B_enat_b_fun_fun$) Enat_b_b_fun_fun$)
(declare-fun fun_app$w (B_bool_fun$ B$) Bool)
(declare-fun fun_app$x (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun monotone$ (Enat_enat_bool_fun_fun$ B_b_bool_fun_fun$ Enat_b_fun$) Bool)
(declare-fun case_enat$ (B$) Enat_b_fun_enat_b_fun_fun$)
(declare-fun monotone$a (Enat_enat_bool_fun_fun$ Enat_enat_bool_fun_fun$ Enat_enat_fun$) Bool)
(declare-fun monotone$b (B_b_bool_fun_fun$ B_b_bool_fun_fun$ B_b_fun$) Bool)
(declare-fun monotone$c (B_b_bool_fun_fun$ Enat_enat_bool_fun_fun$ B_enat_fun$) Bool)
(declare-fun case_enat$a (Enat$) Enat_enat_fun_enat_enat_fun_fun$)
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$ uua$ ?v0) (fun_app$ (fun_app$a (case_enat$ a$) (uu$ ?v0)) ?v0)) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$ uub$ ?v0) (fun_app$ (f$ ?v0) (fun_app$b eSuc$ ?v0))) :pattern ((fun_app$ uub$ ?v0)))) :named a1))
(assert (! (forall ((?v0 Enat_enat_enat_fun_fun$) (?v1 Enat$)) (! (= (fun_app$b (uuc$ ?v0) ?v1) (fun_app$b (fun_app$c ?v0 ?v1) (fun_app$b eSuc$ ?v1))) :pattern ((fun_app$b (uuc$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 Enat_enat_b_fun_fun$) (?v1 Enat$)) (! (= (fun_app$ (uuf$ ?v0) ?v1) (fun_app$ (fun_app$d ?v0 ?v1) (fun_app$b eSuc$ ?v1))) :pattern ((fun_app$ (uuf$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (fun_app$ (f$ ?v1) ?v0)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$e (fun_app$f uuo$ ?v0) ?v1) (fun_app$e (fun_app$f less_eq$ ?v1) ?v0)) :pattern ((fun_app$e (fun_app$f uuo$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 Enat_enat_fun$) (?v1 Enat$)) (! (= (fun_app$b (uuy$ ?v0) ?v1) (fun_app$b eSuc$ (fun_app$b ?v0 ?v1))) :pattern ((fun_app$b (uuy$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 B_enat_fun$) (?v1 B$)) (! (= (fun_app$g (uux$ ?v0) ?v1) (fun_app$b eSuc$ (fun_app$g ?v0 ?v1))) :pattern ((fun_app$g (uux$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 Enat_enat_b_fun_fun$) (?v1 B$) (?v2 Enat$)) (! (= (fun_app$ (fun_app$h (uuh$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$a (case_enat$ ?v1) (fun_app$d (uug$ ?v0) ?v2)) ?v2)) :pattern ((fun_app$ (fun_app$h (uuh$ ?v0) ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 Enat_enat_enat_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (! (= (fun_app$b (fun_app$c (uue$ ?v0) ?v1) ?v2) (fun_app$b (fun_app$i (case_enat$a ?v1) (fun_app$c (uud$ ?v0) ?v2)) ?v2)) :pattern ((fun_app$b (fun_app$c (uue$ ?v0) ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 Enat_enat_enat_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (! (= (fun_app$b (fun_app$c (uud$ ?v0) ?v1) ?v2) (fun_app$b (fun_app$c ?v0 ?v2) ?v1)) :pattern ((fun_app$b (fun_app$c (uud$ ?v0) ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 Enat_enat_b_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (! (= (fun_app$ (fun_app$d (uug$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$d ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$d (uug$ ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 B_enat_enat_fun_fun$) (?v1 Enat$) (?v2 B$)) (! (= (fun_app$g (fun_app$j (uuk$ ?v0) ?v1) ?v2) (fun_app$b (fun_app$k ?v0 ?v2) ?v1)) :pattern ((fun_app$g (fun_app$j (uuk$ ?v0) ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 B_enat_b_fun_fun$) (?v1 Enat$) (?v2 B$)) (! (= (fun_app$l (fun_app$m (uui$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$h ?v0 ?v2) ?v1)) :pattern ((fun_app$l (fun_app$m (uui$ ?v0) ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 Enat_enat_fun$) (?v1 Enat_enat_fun$) (?v2 Enat$)) (! (= (fun_app$b (fun_app$i (uuu$ ?v0) ?v1) ?v2) (fun_app$b ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$b (fun_app$i (uuu$ ?v0) ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 Enat_enat_fun$) (?v1 B_enat_fun$) (?v2 B$)) (! (= (fun_app$g (fun_app$n (uur$ ?v0) ?v1) ?v2) (fun_app$b ?v0 (fun_app$g ?v1 ?v2))) :pattern ((fun_app$g (fun_app$n (uur$ ?v0) ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 B_enat_fun$) (?v1 Enat_b_fun$) (?v2 Enat$)) (! (= (fun_app$b (fun_app$o (uut$ ?v0) ?v1) ?v2) (fun_app$g ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$b (fun_app$o (uut$ ?v0) ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 B_enat_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$g (fun_app$p (uus$ ?v0) ?v1) ?v2) (fun_app$g ?v0 (fun_app$l ?v1 ?v2))) :pattern ((fun_app$g (fun_app$p (uus$ ?v0) ?v1) ?v2)))) :named a17))
(assert (! (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (! (= (fun_app$b (fun_app$c (fun_app$q (uuq$ ?v0) ?v1) ?v2) ?v3) (ite (fun_app$e (fun_app$f less_eq$ ?v3) ?v0) ?v2 (fun_app$b ?v1 ?v3))) :pattern ((fun_app$b (fun_app$c (fun_app$q (uuq$ ?v0) ?v1) ?v2) ?v3)))) :named a18))
(assert (! (forall ((?v0 Enat$) (?v1 Enat_b_fun$) (?v2 B$) (?v3 Enat$)) (! (= (fun_app$ (fun_app$h (fun_app$r (uup$ ?v0) ?v1) ?v2) ?v3) (ite (fun_app$e (fun_app$f less_eq$ ?v3) ?v0) ?v2 (fun_app$ ?v1 ?v3))) :pattern ((fun_app$ (fun_app$h (fun_app$r (uup$ ?v0) ?v1) ?v2) ?v3)))) :named a19))
(assert (! (forall ((?v0 Enat_enat_fun$) (?v1 Enat_enat_enat_fun_fun$) (?v2 Enat$) (?v3 Enat$)) (! (= (fun_app$b (fun_app$c (fun_app$s (uum$ ?v0) ?v1) ?v2) ?v3) (fun_app$b (fun_app$i (case_enat$a (fun_app$b ?v0 ?v3)) (fun_app$c ?v1 ?v3)) ?v2)) :pattern ((fun_app$b (fun_app$c (fun_app$s (uum$ ?v0) ?v1) ?v2) ?v3)))) :named a20))
(assert (! (forall ((?v0 Enat_b_fun$) (?v1 Enat_enat_b_fun_fun$) (?v2 Enat$) (?v3 Enat$)) (! (= (fun_app$ (fun_app$d (fun_app$t (uun$ ?v0) ?v1) ?v2) ?v3) (fun_app$ (fun_app$a (case_enat$ (fun_app$ ?v0 ?v3)) (fun_app$d ?v1 ?v3)) ?v2)) :pattern ((fun_app$ (fun_app$d (fun_app$t (uun$ ?v0) ?v1) ?v2) ?v3)))) :named a21))
(assert (! (forall ((?v0 B_enat_fun$) (?v1 B_enat_enat_fun_fun$) (?v2 Enat$) (?v3 B$)) (! (= (fun_app$g (fun_app$j (fun_app$u (uul$ ?v0) ?v1) ?v2) ?v3) (fun_app$b (fun_app$i (case_enat$a (fun_app$g ?v0 ?v3)) (fun_app$k ?v1 ?v3)) ?v2)) :pattern ((fun_app$g (fun_app$j (fun_app$u (uul$ ?v0) ?v1) ?v2) ?v3)))) :named a22))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_enat_b_fun_fun$) (?v2 Enat$) (?v3 B$)) (! (= (fun_app$l (fun_app$m (fun_app$v (uuj$ ?v0) ?v1) ?v2) ?v3) (fun_app$ (fun_app$a (case_enat$ (fun_app$l ?v0 ?v3)) (fun_app$h ?v1 ?v3)) ?v2)) :pattern ((fun_app$l (fun_app$m (fun_app$v (uuj$ ?v0) ?v1) ?v2) ?v3)))) :named a23))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$b (uuw$ ?v0) ?v1) ?v0) :pattern ((fun_app$b (uuw$ ?v0) ?v1)))) :named a24))
(assert (! (forall ((?v0 Enat$) (?v1 B$)) (! (= (fun_app$g (uuv$ ?v0) ?v1) ?v0) :pattern ((fun_app$g (uuv$ ?v0) ?v1)))) :named a25))
(assert (! (not (monotone$ less_eq$ ord$ uua$)) :named a26))
(assert (! (monotone$ less_eq$ ord$ uub$) :named a27))
(assert (! (forall ((?v0 Enat$)) (fun_app$w (fun_app$x ord$ a$) (fun_app$ (f$ ?v0) (fun_app$b eSuc$ ?v0)))) :named a28))
(assert (! (fun_app$w (fun_app$x ord$ a$) a$) :named a29))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$e (fun_app$f less_eq$ ?v3) ?v4) (fun_app$e (fun_app$f ?v0 ?v3) ?v4))) (=> (fun_app$e (fun_app$f ?v0 ?v1) ?v2) (fun_app$e (fun_app$f ?v0 ?v2) ?v1))) (fun_app$e (fun_app$f ?v0 ?v2) ?v1))) :named a30))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (fun_app$e (fun_app$f less_eq$ (fun_app$b eSuc$ ?v0)) (fun_app$b eSuc$ ?v1)) (fun_app$e (fun_app$f less_eq$ ?v0) ?v1))) :named a31))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_enat_fun_fun$) (?v2 Enat$)) (=> (and (monotone$a less_eq$ ?v0 (uuc$ ?v1)) (and (forall ((?v3 Enat$)) (fun_app$e (fun_app$f ?v0 ?v2) (fun_app$b (fun_app$c ?v1 ?v3) (fun_app$b eSuc$ ?v3)))) (fun_app$e (fun_app$f ?v0 ?v2) ?v2))) (monotone$a less_eq$ ?v0 (fun_app$c (uue$ ?v1) ?v2)))) :named a32))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 Enat_enat_b_fun_fun$) (?v2 B$)) (=> (and (monotone$ less_eq$ ?v0 (uuf$ ?v1)) (and (forall ((?v3 Enat$)) (fun_app$w (fun_app$x ?v0 ?v2) (fun_app$ (fun_app$d ?v1 ?v3) (fun_app$b eSuc$ ?v3)))) (fun_app$w (fun_app$x ?v0 ?v2) ?v2))) (monotone$ less_eq$ ?v0 (fun_app$h (uuh$ ?v1) ?v2)))) :named a33))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (fun_app$b eSuc$ ?v0) (fun_app$b eSuc$ ?v1)) (= ?v0 ?v1))) :named a34))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (fun_app$b eSuc$ ?v0) (fun_app$b eSuc$ ?v1)) (= ?v0 ?v1))) :named a35))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_bool_fun_fun$) (?v2 B_b_fun$) (?v3 B_enat_b_fun_fun$) (?v4 Enat$)) (=> (and (monotone$b ?v0 ?v1 ?v2) (forall ((?v5 Enat$)) (monotone$b ?v0 ?v1 (fun_app$m (uui$ ?v3) ?v5)))) (monotone$b ?v0 ?v1 (fun_app$m (fun_app$v (uuj$ ?v2) ?v3) ?v4)))) :named a36))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 B_enat_fun$) (?v3 B_enat_enat_fun_fun$) (?v4 Enat$)) (=> (and (monotone$c ?v0 ?v1 ?v2) (forall ((?v5 Enat$)) (monotone$c ?v0 ?v1 (fun_app$j (uuk$ ?v3) ?v5)))) (monotone$c ?v0 ?v1 (fun_app$j (fun_app$u (uul$ ?v2) ?v3) ?v4)))) :named a37))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_bool_fun_fun$) (?v2 Enat_enat_fun$) (?v3 Enat_enat_enat_fun_fun$) (?v4 Enat$)) (=> (and (monotone$a ?v0 ?v1 ?v2) (forall ((?v5 Enat$)) (monotone$a ?v0 ?v1 (fun_app$c (uud$ ?v3) ?v5)))) (monotone$a ?v0 ?v1 (fun_app$c (fun_app$s (uum$ ?v2) ?v3) ?v4)))) :named a38))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 B_b_bool_fun_fun$) (?v2 Enat_b_fun$) (?v3 Enat_enat_b_fun_fun$) (?v4 Enat$)) (=> (and (monotone$ ?v0 ?v1 ?v2) (forall ((?v5 Enat$)) (monotone$ ?v0 ?v1 (fun_app$d (uug$ ?v3) ?v5)))) (monotone$ ?v0 ?v1 (fun_app$d (fun_app$t (uun$ ?v2) ?v3) ?v4)))) :named a39))
(assert (! (forall ((?v0 Enat$)) (fun_app$e (fun_app$f less_eq$ ?v0) ?v0)) :named a40))
(assert (! (forall ((?v0 Enat_b_fun$) (?v1 Enat$) (?v2 B$) (?v3 Enat_b_fun$) (?v4 B_b_bool_fun_fun$)) (=> (and (forall ((?v5 Enat$)) (= (fun_app$ ?v0 ?v5) (ite (fun_app$e (fun_app$f less_eq$ ?v1) ?v5) ?v2 (fun_app$ ?v3 ?v5)))) (and (forall ((?v5 Enat$) (?v6 Enat$)) (=> (and (fun_app$e (fun_app$f less_eq$ ?v6) ?v5) (not (fun_app$e (fun_app$f less_eq$ ?v1) ?v5))) (fun_app$w (fun_app$x ?v4 (fun_app$ ?v3 ?v5)) (fun_app$ ?v3 ?v6)))) (and (forall ((?v5 Enat$)) (=> (not (fun_app$e (fun_app$f less_eq$ ?v1) ?v5)) (fun_app$w (fun_app$x ?v4 ?v2) (fun_app$ ?v3 ?v5)))) (fun_app$w (fun_app$x ?v4 ?v2) ?v2)))) (monotone$ uuo$ ?v4 ?v0))) :named a41))
(assert (! (forall ((?v0 Enat_enat_fun$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat_enat_fun$) (?v4 Enat_enat_bool_fun_fun$)) (=> (and (forall ((?v5 Enat$)) (= (fun_app$b ?v0 ?v5) (ite (fun_app$e (fun_app$f less_eq$ ?v1) ?v5) ?v2 (fun_app$b ?v3 ?v5)))) (and (forall ((?v5 Enat$) (?v6 Enat$)) (=> (and (fun_app$e (fun_app$f less_eq$ ?v6) ?v5) (not (fun_app$e (fun_app$f less_eq$ ?v1) ?v5))) (fun_app$e (fun_app$f ?v4 (fun_app$b ?v3 ?v5)) (fun_app$b ?v3 ?v6)))) (and (forall ((?v5 Enat$)) (=> (not (fun_app$e (fun_app$f less_eq$ ?v1) ?v5)) (fun_app$e (fun_app$f ?v4 ?v2) (fun_app$b ?v3 ?v5)))) (fun_app$e (fun_app$f ?v4 ?v2) ?v2)))) (monotone$a uuo$ ?v4 ?v0))) :named a42))
(assert (! (forall ((?v0 Enat$) (?v1 B_b_bool_fun_fun$) (?v2 Enat_b_fun$) (?v3 B$)) (=> (and (forall ((?v4 Enat$) (?v5 Enat$)) (=> (and (fun_app$e (fun_app$f less_eq$ ?v4) ?v5) (not (fun_app$e (fun_app$f less_eq$ ?v4) ?v0))) (fun_app$w (fun_app$x ?v1 (fun_app$ ?v2 ?v4)) (fun_app$ ?v2 ?v5)))) (and (forall ((?v4 Enat$)) (=> (not (fun_app$e (fun_app$f less_eq$ ?v4) ?v0)) (fun_app$w (fun_app$x ?v1 ?v3) (fun_app$ ?v2 ?v4)))) (fun_app$w (fun_app$x ?v1 ?v3) ?v3))) (monotone$ less_eq$ ?v1 (fun_app$h (fun_app$r (uup$ ?v0) ?v2) ?v3)))) :named a43))
(assert (! (forall ((?v0 Enat$) (?v1 Enat_enat_bool_fun_fun$) (?v2 Enat_enat_fun$) (?v3 Enat$)) (=> (and (forall ((?v4 Enat$) (?v5 Enat$)) (=> (and (fun_app$e (fun_app$f less_eq$ ?v4) ?v5) (not (fun_app$e (fun_app$f less_eq$ ?v4) ?v0))) (fun_app$e (fun_app$f ?v1 (fun_app$b ?v2 ?v4)) (fun_app$b ?v2 ?v5)))) (and (forall ((?v4 Enat$)) (=> (not (fun_app$e (fun_app$f less_eq$ ?v4) ?v0)) (fun_app$e (fun_app$f ?v1 ?v3) (fun_app$b ?v2 ?v4)))) (fun_app$e (fun_app$f ?v1 ?v3) ?v3))) (monotone$a less_eq$ ?v1 (fun_app$c (fun_app$q (uuq$ ?v0) ?v2) ?v3)))) :named a44))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_fun$) (?v2 B_b_bool_fun_fun$) (?v3 B_enat_fun$)) (=> (and (monotone$a ?v0 uuo$ ?v1) (monotone$c ?v2 ?v0 ?v3)) (monotone$c ?v2 uuo$ (fun_app$n (uur$ ?v1) ?v3)))) :named a45))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_enat_fun$) (?v2 B_b_bool_fun_fun$) (?v3 B_b_fun$)) (=> (and (monotone$c ?v0 uuo$ ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$c ?v2 uuo$ (fun_app$p (uus$ ?v1) ?v3)))) :named a46))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_enat_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 Enat_b_fun$)) (=> (and (monotone$c ?v0 uuo$ ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$a ?v2 uuo$ (fun_app$o (uut$ ?v1) ?v3)))) :named a47))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 Enat_enat_fun$)) (=> (and (monotone$a ?v0 uuo$ ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$a ?v2 uuo$ (fun_app$i (uuu$ ?v1) ?v3)))) :named a48))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_fun$) (?v2 B_b_bool_fun_fun$) (?v3 B_enat_fun$)) (=> (and (monotone$a ?v0 less_eq$ ?v1) (monotone$c ?v2 ?v0 ?v3)) (monotone$c ?v2 less_eq$ (fun_app$n (uur$ ?v1) ?v3)))) :named a49))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_enat_fun$) (?v2 B_b_bool_fun_fun$) (?v3 B_b_fun$)) (=> (and (monotone$c ?v0 less_eq$ ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$c ?v2 less_eq$ (fun_app$p (uus$ ?v1) ?v3)))) :named a50))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_enat_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 Enat_b_fun$)) (=> (and (monotone$c ?v0 less_eq$ ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$a ?v2 less_eq$ (fun_app$o (uut$ ?v1) ?v3)))) :named a51))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 Enat_enat_fun$)) (=> (and (monotone$a ?v0 less_eq$ ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$a ?v2 less_eq$ (fun_app$i (uuu$ ?v1) ?v3)))) :named a52))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 Enat$)) (monotone$c ?v0 uuo$ (uuv$ ?v1))) :named a53))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$)) (monotone$a ?v0 uuo$ (uuw$ ?v1))) :named a54))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 Enat$)) (monotone$c ?v0 less_eq$ (uuv$ ?v1))) :named a55))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$)) (monotone$a ?v0 less_eq$ (uuw$ ?v1))) :named a56))
(assert (! (monotone$a less_eq$ less_eq$ eSuc$) :named a57))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_enat_fun$)) (=> (monotone$c ?v0 less_eq$ ?v1) (monotone$c ?v0 less_eq$ (uux$ ?v1)))) :named a58))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat_enat_fun$)) (=> (monotone$a ?v0 less_eq$ ?v1) (monotone$a ?v0 less_eq$ (uuy$ ?v1)))) :named a59))
(assert (! (forall ((?v0 Enat$)) (fun_app$e (fun_app$f less_eq$ ?v0) ?v0)) :named a60))
(assert (! (forall ((?v0 Enat$)) (fun_app$e (fun_app$f less_eq$ ?v0) ?v0)) :named a61))
(check-sat)
;(get-unsat-core)
