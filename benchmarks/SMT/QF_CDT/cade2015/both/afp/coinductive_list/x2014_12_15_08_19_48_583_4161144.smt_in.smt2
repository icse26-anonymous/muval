; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 698
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_bool_fun_a_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun x$ () A$)
(declare-fun uu$ () A_a_fun$)
(declare-fun bot$ () A_set$)
(declare-fun uua$ (A$) A_bool_fun$)
(declare-fun uub$ (A$) A_bool_fun$)
(declare-fun uuc$ (A$) A_bool_fun_a_bool_fun_fun$)
(declare-fun bot$a () A_bool_fun$)
(declare-fun bot$b () Bool)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun insert$ (A$ A_set$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun fun_app$a (A_bool_fun_a_bool_fun_fun$ A_bool_fun$) A_bool_fun$)
(declare-fun fun_app$b (A_a_fun$ A$) A$)
(declare-fun iterates$ (A_a_fun$ A$) A_llist$)
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (uua$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$ (uub$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$ (uub$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$ (fun_app$a (uuc$ ?v0) ?v1) ?v2) (and (= ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$a (uuc$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$b uu$ ?v0) ?v0) :pattern ((fun_app$b uu$ ?v0)))) :named a3))
(assert (! (not (= (lset$ (iterates$ uu$ x$)) (insert$ x$ bot$))) :named a4))
(assert (! (forall ((?v0 A$)) (= (collect$ (uua$ ?v0)) (insert$ ?v0 bot$))) :named a5))
(assert (! (forall ((?v0 A$)) (= (collect$ (uub$ ?v0)) (insert$ ?v0 bot$))) :named a6))
(assert (! (forall ((?v0 A$)) (member$ ?v0 (insert$ ?v0 bot$))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (= (insert$ ?v0 (insert$ ?v0 ?v1)) (insert$ ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_set$)) (= (member$ ?v0 (insert$ ?v1 ?v2)) (or (= ?v0 ?v1) (member$ ?v0 ?v2)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A$)) (=> (=> (not (member$ ?v0 ?v1)) (= ?v0 ?v2)) (member$ ?v0 (insert$ ?v2 ?v1)))) :named a10))
(assert (! (forall ((?v0 A_bool_fun$)) (= (= (collect$ ?v0) bot$) (forall ((?v1 A$)) (not (fun_app$ ?v0 ?v1))))) :named a11))
(assert (! (forall ((?v0 A_set$)) (= (forall ((?v1 A$)) (not (member$ ?v1 ?v0))) (= ?v0 bot$))) :named a12))
(assert (! (forall ((?v0 A_bool_fun$)) (= (= bot$ (collect$ ?v0)) (forall ((?v1 A$)) (not (fun_app$ ?v0 ?v1))))) :named a13))
(assert (! (forall ((?v0 A$)) (= (member$ ?v0 bot$) false)) :named a14))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ bot$a ?v0) bot$b) :pattern ((fun_app$ bot$a ?v0)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (collect$ (fun_app$a (uuc$ ?v0) ?v1)) (ite (fun_app$ ?v1 ?v0) (insert$ ?v0 bot$) bot$))) :named a16))
(assert (! (= bot$ (collect$ bot$a)) :named a17))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ bot$a ?v0) bot$b) :pattern ((fun_app$ bot$a ?v0)))) :named a18))
(assert (! (forall ((?v0 A$)) (=> (member$ ?v0 bot$) false)) :named a19))
(assert (! (forall ((?v0 A_set$) (?v1 A$)) (=> (= ?v0 bot$) (not (member$ ?v1 ?v0)))) :named a20))
(assert (! (forall ((?v0 A_set$)) (=> (forall ((?v1 A$)) (=> (member$ ?v1 ?v0) false)) (= ?v0 bot$))) :named a21))
(check-sat)
;(get-unsat-core)
