; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 695
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort Nat_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun f$ () A_a_fun$)
(declare-fun na$ () Nat$)
(declare-fun xa$ () A$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun zero$ () Enat$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun compow$ () Nat_a_a_fun_a_a_fun_fun_fun$)
(declare-fun funpow$ () Nat_a_a_fun_a_a_fun_fun_fun$)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun fun_app$ (A_a_fun$ A$) A$)
(declare-fun fun_app$a (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$b (Nat_a_a_fun_a_a_fun_fun_fun$ Nat$) A_a_fun_a_a_fun_fun$)
(declare-fun iterates$ (A_a_fun$ A$) A_llist$)
(assert (! (not (= (ldrop$ (enat$ (suc$ na$)) (iterates$ f$ xa$)) (iterates$ f$ (fun_app$ (fun_app$a (fun_app$b compow$ (suc$ na$)) f$) xa$)))) :named a0))
(assert (! (forall ((?v0 A$)) (= (ldrop$ (enat$ na$) (iterates$ f$ ?v0)) (iterates$ f$ (fun_app$ (fun_app$a (fun_app$b compow$ na$) f$) ?v0)))) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat$) (?v2 A$)) (= (fun_app$ ?v0 (fun_app$ (fun_app$a (fun_app$b compow$ ?v1) ?v0) ?v2)) (fun_app$ (fun_app$a (fun_app$b compow$ ?v1) ?v0) (fun_app$ ?v0 ?v2)))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (ldropn$ ?v0 (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$ (fun_app$a (fun_app$b compow$ ?v0) ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (! (= (ldrop$ (enat$ ?v0) ?v1) (ldropn$ ?v0 ?v1)) :pattern ((ldrop$ (enat$ ?v0) ?v1)))) :named a9))
(assert (! (= funpow$ compow$) :named a10))
(assert (! (forall ((?v0 A_llist$)) (= (ldrop$ zero$ ?v0) ?v0)) :named a11))
(check-sat)
;(get-unsat-core)
