; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 654
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun xsa$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist$ Nat$) A$)
(declare-fun lset$ (A_llist_llist$) A_llist_set$)
(declare-fun zero$ () Nat$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lset$a (A_llist$) A_set$)
(declare-fun lnull$a (A_llist_llist$) Bool)
(declare-fun member$ (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun lfilter$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun member$b (A$ A_set$) Bool)
(declare-fun fun_app$a (A_llist_llist_a_llist_llist_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lfilter$a (A_llist_bool_fun$) A_llist_llist_a_llist_llist_fun$)
(assert (! (not (lnull$ (fun_app$ (lfilter$ p$) xsa$))) :named a0))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (= (fun_app$a (lfilter$a ?v0) (fun_app$a (lfilter$a ?v0) ?v1)) (fun_app$a (lfilter$a ?v0) ?v1))) :named a1))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$ (lfilter$ ?v0) (fun_app$ (lfilter$ ?v0) ?v1)) (fun_app$ (lfilter$ ?v0) ?v1))) :named a2))
(assert (! (forall ((?v0 Nat$)) (=> (and (less_eq$ zero$ ?v0) (less$ (enat$ ?v0) (llength$ xsa$))) (not (fun_app$b p$ (lnth$ xsa$ ?v0))))) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$a ?v1))) false)) false)) :named a4))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$ ?v1))) false)) false)) :named a5))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a7))
(assert (! (forall ((?v0 A_llist_llist_set$)) (=> (and (=> (forall ((?v1 A_llist_llist$)) (=> (member$ ?v1 ?v0) (lnull$a ?v1))) false) (=> (not (forall ((?v1 A_llist_llist$)) (=> (member$ ?v1 ?v0) (lnull$a ?v1)))) false)) false)) :named a8))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$a ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$a ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a9))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a11))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false)) :named a12))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)) :named a13))
(assert (! (=> (lfinite$ xs$) (lfinite$ (fun_app$ (lfilter$ p$) xs$))) :named a14))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (= (lnull$a (fun_app$a (lfilter$a ?v0) ?v1)) (forall ((?v2 A_llist$)) (=> (member$a ?v2 (lset$ ?v1)) (not (fun_app$c ?v0 ?v2)))))) :named a15))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lnull$ (fun_app$ (lfilter$ ?v0) ?v1)) (forall ((?v2 A$)) (=> (member$b ?v2 (lset$a ?v1)) (not (fun_app$b ?v0 ?v2)))))) :named a16))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (! (= (fun_app$a (lfilter$a ?v0) lNil$a) lNil$a) :pattern ((lfilter$a ?v0)))) :named a17))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$ (lfilter$ ?v0) lNil$) lNil$) :pattern ((lfilter$ ?v0)))) :named a18))
(check-sat)
;(get-unsat-core)
