; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 387
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_a_llist_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort Nat_a_llist_fun_bool_fun$ 0)
(declare-sort A_llist_nat_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_a_llist_nat_a_llist_fun_fun_fun$ 0)
(declare-sort Nat_a_llist_fun_nat_a_llist_fun_fun$ 0)
(declare-sort Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$ 0)
(declare-sort A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun$ 0)
(declare-sort Nat_a_llist_fun_a_llist_nat_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_fun$ 0)
(declare-sort A_a_llist_nat_a_llist_fun_fun_fun_a_llist_nat_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_bool_fun_fun$ 0)
(declare-sort Nat_a_llist_fun_nat_a_llist_fun_fun_nat_a_llist_fun_nat_a_llist_fun_fun_fun$ 0)
(declare-sort Nat_a_llist_fun_a_llist_nat_a_llist_fun_fun_fun_nat_a_llist_fun_nat_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_fun_a_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun f$ (A_llist_nat_a_llist_fun_fun$) A_llist_nat_a_llist_fun_fun$)
(declare-fun uu$ () Nat_a_llist_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun one$ () Nat$)
(declare-fun uua$ (A_llist_nat_a_llist_fun_fun$) A_a_llist_nat_a_llist_fun_fun_fun$)
(declare-fun uub$ () A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun$)
(declare-fun uuc$ (A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun$) Nat_a_llist_fun_a_llist_nat_a_llist_fun_fun_fun_nat_a_llist_fun_nat_a_llist_fun_fun_fun$)
(declare-fun uud$ (Nat_a_llist_fun_nat_a_llist_fun_fun$) Nat_a_llist_fun_nat_a_llist_fun_fun_nat_a_llist_fun_nat_a_llist_fun_fun_fun$)
(declare-fun uue$ (Nat_a_llist_fun_nat_a_llist_fun_fun$) A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun_fun$)
(declare-fun uuf$ (A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun$) A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_fun_a_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun_fun$)
(declare-fun zero$ () Nat$)
(declare-fun minus$ (Nat$ Nat$) Nat$)
(declare-fun fun_app$ (A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun$ A_llist_nat_a_llist_fun_fun$) Nat_a_llist_fun$)
(declare-fun fun_ord$ (Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$) A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_bool_fun_fun$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_nat_a_llist_fun_fun$ A_llist$) Nat_a_llist_fun$)
(declare-fun fun_app$b (A_a_llist_nat_a_llist_fun_fun_fun_a_llist_nat_a_llist_fun_fun_fun$ A_a_llist_nat_a_llist_fun_fun_fun$) A_llist_nat_a_llist_fun_fun$)
(declare-fun fun_app$c (A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_fun_a_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun_fun$ A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_fun$) A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun$)
(declare-fun fun_app$d (A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_fun$ A_llist_nat_a_llist_fun_fun$) A_llist_nat_a_llist_fun_fun$)
(declare-fun fun_app$e (Nat_a_llist_fun_nat_a_llist_fun_fun$ Nat_a_llist_fun$) Nat_a_llist_fun$)
(declare-fun fun_app$f (Nat_a_llist_fun_a_llist_nat_a_llist_fun_fun_fun_nat_a_llist_fun_nat_a_llist_fun_fun_fun$ Nat_a_llist_fun_a_llist_nat_a_llist_fun_fun_fun$) Nat_a_llist_fun_nat_a_llist_fun_fun$)
(declare-fun fun_app$g (Nat_a_llist_fun_a_llist_nat_a_llist_fun_fun_fun$ Nat_a_llist_fun$) A_llist_nat_a_llist_fun_fun$)
(declare-fun fun_app$h (A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun_fun$ A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun$) A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun$)
(declare-fun fun_app$i (Nat_a_llist_fun_nat_a_llist_fun_fun_nat_a_llist_fun_nat_a_llist_fun_fun_fun$ Nat_a_llist_fun_nat_a_llist_fun_fun$) Nat_a_llist_fun_nat_a_llist_fun_fun$)
(declare-fun fun_app$j (Nat_a_llist_fun$ Nat$) A_llist$)
(declare-fun fun_app$k (A_a_llist_nat_a_llist_fun_fun_fun$ A$) A_llist_nat_a_llist_fun_fun$)
(declare-fun fun_app$l (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$m (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$n (Nat_a_llist_fun_bool_fun$ Nat_a_llist_fun$) Bool)
(declare-fun fun_app$o (Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$ Nat_a_llist_fun$) Nat_a_llist_fun_bool_fun$)
(declare-fun fun_ord$a (A_llist_a_llist_bool_fun_fun$) Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$)
(declare-fun monotone$ (A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_bool_fun_fun$ Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$ A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun$) Bool)
(declare-fun monotone$a (Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$ A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_bool_fun_fun$ Nat_a_llist_fun_a_llist_nat_a_llist_fun_fun_fun$) Bool)
(declare-fun monotone$b (Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$ Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$ Nat_a_llist_fun_nat_a_llist_fun_fun$) Bool)
(declare-fun monotone$c (A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_bool_fun_fun$ A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_bool_fun_fun$ A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_fun$) Bool)
(declare-fun case_llist$ (Nat_a_llist_fun$) A_a_llist_nat_a_llist_fun_fun_fun_a_llist_nat_a_llist_fun_fun_fun$)
(assert (! (forall ((?v0 A_llist_nat_a_llist_fun_fun$)) (! (= (fun_app$ uub$ ?v0) (fun_app$a (fun_app$b (case_llist$ uu$) (uua$ ?v0)) xs$)) :pattern ((fun_app$ uub$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun$) (?v1 A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_fun$) (?v2 A_llist_nat_a_llist_fun_fun$)) (! (= (fun_app$ (fun_app$c (uuf$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$ (fun_app$c (uuf$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun$) (?v1 Nat_a_llist_fun_a_llist_nat_a_llist_fun_fun_fun$) (?v2 Nat_a_llist_fun$)) (! (= (fun_app$e (fun_app$f (uuc$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$g ?v1 ?v2))) :pattern ((fun_app$e (fun_app$f (uuc$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 Nat_a_llist_fun_nat_a_llist_fun_fun$) (?v1 A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun$) (?v2 A_llist_nat_a_llist_fun_fun$)) (! (= (fun_app$ (fun_app$h (uue$ ?v0) ?v1) ?v2) (fun_app$e ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$h (uue$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 Nat_a_llist_fun_nat_a_llist_fun_fun$) (?v1 Nat_a_llist_fun_nat_a_llist_fun_fun$) (?v2 Nat_a_llist_fun$)) (! (= (fun_app$e (fun_app$i (uud$ ?v0) ?v1) ?v2) (fun_app$e ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$e (fun_app$i (uud$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_llist_nat_a_llist_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 Nat$)) (! (= (fun_app$j (fun_app$a (fun_app$k (uua$ ?v0) ?v1) ?v2) ?v3) (ite (= ?v3 zero$) (lCons$ ?v1 ?v2) (fun_app$j (fun_app$a ?v0 ?v2) (minus$ ?v3 one$)))) :pattern ((fun_app$j (fun_app$a (fun_app$k (uua$ ?v0) ?v1) ?v2) ?v3)))) :named a5))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$j uu$ ?v0) lNil$) :pattern ((fun_app$j uu$ ?v0)))) :named a6))
(assert (! (not (monotone$ (fun_ord$ (fun_ord$a lprefix$)) (fun_ord$a lprefix$) uub$)) :named a7))
(assert (! (forall ((?v0 A_llist$)) (fun_app$l (fun_app$m lprefix$ ?v0) ?v0)) :named a8))
(assert (! (forall ((?v0 A_llist$)) (fun_app$l (fun_app$m lprefix$ ?v0) ?v0)) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a10))
(assert (! (forall ((?v0 A_llist_nat_a_llist_fun_fun$) (?v1 A_llist$)) (= (fun_app$a (f$ ?v0) ?v1) (fun_app$a (fun_app$b (case_llist$ uu$) (uua$ ?v0)) ?v1))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$l (fun_app$m lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$l (fun_app$m lprefix$ ?v1) ?v3))) :pattern ((fun_app$l (fun_app$m lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))) :named a12))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$l (fun_app$m lprefix$ lNil$) ?v0) true) :pattern ((fun_app$l (fun_app$m lprefix$ lNil$) ?v0)))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$l (fun_app$m lprefix$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 lNil$) (exists ((?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v3)) (fun_app$l (fun_app$m lprefix$ ?v3) ?v2)))))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$l (fun_app$m lprefix$ ?v0) ?v1) (or (exists ((?v2 A_llist$)) (and (= ?v0 lNil$) (= ?v1 ?v2))) (exists ((?v2 A_llist$) (?v3 A_llist$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 (lCons$ ?v4 ?v3)) (fun_app$l (fun_app$m lprefix$ ?v2) ?v3))))))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$l (fun_app$m lprefix$ (lCons$ ?v0 ?v1)) ?v2) (exists ((?v3 A_llist$)) (and (= ?v2 (lCons$ ?v0 ?v3)) (fun_app$l (fun_app$m lprefix$ ?v1) ?v3))))) :named a16))
(assert (! (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))) :named a17))
(assert (! (forall ((?v0 Nat_a_llist_fun$) (?v1 A_a_llist_nat_a_llist_fun_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$a (fun_app$b (case_llist$ ?v0) ?v1) (lCons$ ?v2 ?v3)) (fun_app$a (fun_app$k ?v1 ?v2) ?v3)) :pattern ((fun_app$a (fun_app$b (case_llist$ ?v0) ?v1) (lCons$ ?v2 ?v3))))) :named a18))
(assert (! (forall ((?v0 Nat_a_llist_fun$) (?v1 A_a_llist_nat_a_llist_fun_fun_fun$)) (! (= (fun_app$a (fun_app$b (case_llist$ ?v0) ?v1) lNil$) ?v0) :pattern ((fun_app$b (case_llist$ ?v0) ?v1)))) :named a19))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$l (fun_app$m lprefix$ (lCons$ ?v0 ?v1)) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))) :named a20))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false))) false)) :named a21))
(assert (! (forall ((?v0 Nat_a_llist_fun$) (?v1 Nat_a_llist_fun$) (?v2 Nat_a_llist_fun$)) (=> (and (fun_app$n (fun_app$o (fun_ord$a lprefix$) ?v0) ?v1) (fun_app$n (fun_app$o (fun_ord$a lprefix$) ?v1) ?v2)) (fun_app$n (fun_app$o (fun_ord$a lprefix$) ?v0) ?v2))) :named a22))
(assert (! (forall ((?v0 Nat_a_llist_fun$) (?v1 Nat_a_llist_fun$)) (=> (and (fun_app$n (fun_app$o (fun_ord$a lprefix$) ?v0) ?v1) (fun_app$n (fun_app$o (fun_ord$a lprefix$) ?v1) ?v0)) (= ?v0 ?v1))) :named a23))
(assert (! (forall ((?v0 A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_bool_fun_fun$) (?v1 A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun$) (?v2 Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$) (?v3 Nat_a_llist_fun_a_llist_nat_a_llist_fun_fun_fun$)) (=> (and (monotone$ ?v0 (fun_ord$a lprefix$) ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$b ?v2 (fun_ord$a lprefix$) (fun_app$f (uuc$ ?v1) ?v3)))) :named a24))
(assert (! (forall ((?v0 Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$) (?v1 Nat_a_llist_fun_nat_a_llist_fun_fun$) (?v2 Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$) (?v3 Nat_a_llist_fun_nat_a_llist_fun_fun$)) (=> (and (monotone$b ?v0 (fun_ord$a lprefix$) ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$b ?v2 (fun_ord$a lprefix$) (fun_app$i (uud$ ?v1) ?v3)))) :named a25))
(assert (! (forall ((?v0 Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$) (?v1 Nat_a_llist_fun_nat_a_llist_fun_fun$) (?v2 A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_bool_fun_fun$) (?v3 A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun$)) (=> (and (monotone$b ?v0 (fun_ord$a lprefix$) ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$ ?v2 (fun_ord$a lprefix$) (fun_app$h (uue$ ?v1) ?v3)))) :named a26))
(assert (! (forall ((?v0 A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_bool_fun_fun$) (?v1 A_llist_nat_a_llist_fun_fun_nat_a_llist_fun_fun$) (?v2 A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_bool_fun_fun$) (?v3 A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_fun$)) (=> (and (monotone$ ?v0 (fun_ord$a lprefix$) ?v1) (monotone$c ?v2 ?v0 ?v3)) (monotone$ ?v2 (fun_ord$a lprefix$) (fun_app$c (uuf$ ?v1) ?v3)))) :named a27))
(check-sat)
;(get-unsat-core)
