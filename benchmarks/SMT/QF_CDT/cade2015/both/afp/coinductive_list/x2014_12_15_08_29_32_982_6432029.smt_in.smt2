; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 626
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun x$ () A$)
(declare-fun xs$ () A_llist$)
(declare-fun llast$ (A_llist$) A$)
(declare-fun lsetp$ (A_llist$) A_bool_fun$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lfilter$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun lmember$ (A$ A_llist$) Bool)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun ldropWhile$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun pred_llist$ (A_bool_fun$ A_llist$) Bool)
(declare-fun lstrict_prefix$ (A_llist$ A_llist$) Bool)
(assert (! (not (= (fun_app$ (lfilter$ p$) (lCons$ x$ xs$)) (lCons$ x$ (fun_app$ (lfilter$ p$) xs$)))) :named a0))
(assert (! (fun_app$a p$ x$) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a2))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (lfilter$ ?v0) (lCons$ ?v1 ?v2)) (ite (fun_app$a ?v0 ?v1) (lCons$ ?v1 (fun_app$ (lfilter$ ?v0) ?v2)) (fun_app$ (lfilter$ ?v0) ?v2))) :pattern ((fun_app$ (lfilter$ ?v0) (lCons$ ?v1 ?v2))))) :named a3))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (=> (not (fun_app$a ?v0 ?v1)) (= (fun_app$ (lfilter$ ?v0) (lCons$ ?v1 ?v2)) (fun_app$ (lfilter$ ?v0) ?v2))) :pattern ((fun_app$ (lfilter$ ?v0) (lCons$ ?v1 ?v2))))) :named a4))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2)) (and (fun_app$a ?v0 ?v1) (pred_llist$ ?v0 ?v2))) :pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2))))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (lmember$ ?v0 (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (lmember$ ?v0 ?v2))) :pattern ((lmember$ ?v0 (lCons$ ?v1 ?v2))))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (lstrict_prefix$ (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (lstrict_prefix$ ?v1 ?v3))) :pattern ((lstrict_prefix$ (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3))))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (= (fun_app$a (lsetp$ ?v0) ?v1) (or (exists ((?v2 A$) (?v3 A_llist$)) (and (= ?v0 (lCons$ ?v2 ?v3)) (= ?v1 ?v2))) (exists ((?v2 A_llist$) (?v3 A$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$a (lsetp$ ?v2) ?v3))))))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (fun_app$a (lsetp$ ?v0) ?v1) (and (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v0 (lCons$ ?v2 ?v3)) (= ?v1 ?v2)) false)) (forall ((?v2 A_llist$) (?v3 A$) (?v4 A$)) (=> (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$a (lsetp$ ?v2) ?v3))) false)))) false)) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A$) (?v2 A$)) (=> (fun_app$a (lsetp$ ?v0) ?v1) (fun_app$a (lsetp$ (lCons$ ?v2 ?v0)) ?v1))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (fun_app$a (lsetp$ (lCons$ ?v0 ?v1)) ?v0)) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (llast$ (lCons$ ?v0 (lCons$ ?v1 ?v2))) (llast$ (lCons$ ?v1 ?v2))) :pattern ((lCons$ ?v0 (lCons$ ?v1 ?v2))))) :named a12))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$ (lfilter$ ?v0) lNil$) lNil$) :pattern ((lfilter$ ?v0)))) :named a13))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (ldropWhile$ ?v0) (lCons$ ?v1 ?v2)) (ite (fun_app$a ?v0 ?v1) (fun_app$ (ldropWhile$ ?v0) ?v2) (lCons$ ?v1 ?v2))) :pattern ((fun_app$ (ldropWhile$ ?v0) (lCons$ ?v1 ?v2))))) :named a14))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$ (ldropWhile$ ?v0) lNil$) lNil$) :pattern ((ldropWhile$ ?v0)))) :named a15))
(assert (! (= (lstrict_prefix$ lNil$ lNil$) false) :named a16))
(check-sat)
;(get-unsat-core)
