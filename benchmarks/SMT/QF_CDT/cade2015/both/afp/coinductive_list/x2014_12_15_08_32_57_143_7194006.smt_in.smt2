; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 611
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Enat_set$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_enat_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))
  (A_llist_llist_llist_llist$ (lNil$c) (lCons$c (lhd$c A_llist_llist_llist$) (ltl$c A_llist_llist_llist_llist$)))
  (A_llist_llist_llist_llist_llist$ (lNil$d) (lCons$d (lhd$d A_llist_llist_llist_llist$) (ltl$d A_llist_llist_llist_llist_llist$)))))
(declare-fun n$ () Nat$)
(declare-fun na$ () Nat$)
(declare-fun uu$ () Nat_enat_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun uua$ (A_llist_llist$) Nat_enat_fun$)
(declare-fun uub$ (A_llist_llist_llist_llist_llist$) Nat_enat_fun$)
(declare-fun uuc$ (A_llist_llist_llist_llist_llist$) Nat_bool_fun$)
(declare-fun uud$ (A_llist_llist_llist_llist$) Nat_enat_fun$)
(declare-fun uue$ (A_llist_llist_llist_llist$) Nat_bool_fun$)
(declare-fun uuf$ (A_llist_llist$) Nat_bool_fun$)
(declare-fun uug$ (A_llist_llist_llist$) Nat_enat_fun$)
(declare-fun uuh$ (A_llist_llist_llist$) Nat_bool_fun$)
(declare-fun xs$a () A_llist$)
(declare-fun xss$ () A_llist_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist_llist$ Nat$) A_llist$)
(declare-fun plus$ (Enat$ Enat$) Enat$)
(declare-fun xss$a () A_llist_llist$)
(declare-fun xssa$ () A_llist_llist$)
(declare-fun less$a (Nat$ Nat$) Bool)
(declare-fun lnth$a (A_llist_llist_llist_llist_llist$ Nat$) A_llist_llist_llist_llist$)
(declare-fun lnth$b (A_llist_llist_llist_llist$ Nat$) A_llist_llist_llist$)
(declare-fun lnth$c (A_llist_llist_llist$ Nat$) A_llist_llist$)
(declare-fun lnth$d (A_llist$ Nat$) A$)
(declare-fun plus$a (Nat$ Nat$) Nat$)
(declare-fun member$ (Enat$ Enat_set$) Bool)
(declare-fun setsum$ (Nat_enat_fun$ Nat_set$) Enat$)
(declare-fun thesis$ () Bool)
(declare-fun collect$ (Nat_bool_fun$) Nat_set$)
(declare-fun fun_app$ (Nat_enat_fun$ Nat$) Enat$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun lfinite$ (A_llist_llist_llist_llist_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun member$a (Nat$ Nat_set$) Bool)
(declare-fun fun_app$a (Nat_bool_fun$ Nat$) Bool)
(declare-fun lconcat$a (A_llist_llist_llist_llist_llist$) A_llist_llist_llist_llist$)
(declare-fun lconcat$b (A_llist_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun lconcat$c (A_llist_llist_llist$) A_llist_llist$)
(declare-fun lessThan$ (Nat$) Nat_set$)
(declare-fun lfinite$a (A_llist_llist_llist_llist$) Bool)
(declare-fun lfinite$b (A_llist_llist$) Bool)
(declare-fun lfinite$c (A_llist_llist_llist$) Bool)
(declare-fun llength$a (A_llist_llist_llist_llist_llist$) Enat$)
(declare-fun llength$b (A_llist_llist_llist_llist$) Enat$)
(declare-fun llength$c (A_llist_llist_llist$) Enat$)
(declare-fun llength$d (A_llist_llist$) Enat$)
(declare-fun lessThan$a (Enat$) Enat_set$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (llength$ (lnth$ (lCons$a xs$ xss$) ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist_llist_llist_llist_llist$) (?v1 Nat$)) (! (= (fun_app$a (uuc$ ?v0) ?v1) (less$ (enat$ ?v1) (llength$a ?v0))) :pattern ((fun_app$a (uuc$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$) (?v1 Nat$)) (! (= (fun_app$a (uue$ ?v0) ?v1) (less$ (enat$ ?v1) (llength$b ?v0))) :pattern ((fun_app$a (uue$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 Nat$)) (! (= (fun_app$a (uuh$ ?v0) ?v1) (less$ (enat$ ?v1) (llength$c ?v0))) :pattern ((fun_app$a (uuh$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (! (= (fun_app$a (uuf$ ?v0) ?v1) (less$ (enat$ ?v1) (llength$d ?v0))) :pattern ((fun_app$a (uuf$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 A_llist_llist_llist_llist_llist$) (?v1 Nat$)) (! (= (fun_app$ (uub$ ?v0) ?v1) (llength$b (lnth$a ?v0 ?v1))) :pattern ((fun_app$ (uub$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$) (?v1 Nat$)) (! (= (fun_app$ (uud$ ?v0) ?v1) (llength$c (lnth$b ?v0 ?v1))) :pattern ((fun_app$ (uud$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 Nat$)) (! (= (fun_app$ (uug$ ?v0) ?v1) (llength$d (lnth$c ?v0 ?v1))) :pattern ((fun_app$ (uug$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (llength$ (lnth$ ?v0 ?v1))) :pattern ((fun_app$ (uua$ ?v0) ?v1)))) :named a8))
(assert (! (not thesis$) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (= (lnth$d (lconcat$ (lCons$a xs$ xss$)) na$) (lnth$d (lnth$ (lCons$a xs$ xss$) ?v0) ?v1)) (and (less$ (enat$ ?v1) (llength$ (lnth$ (lCons$a xs$ xss$) ?v0))) (and (less$ (enat$ ?v0) (llength$d (lCons$a xs$ xss$))) (= (enat$ na$) (plus$ (setsum$ uu$ (lessThan$ ?v0)) (enat$ ?v1)))))) thesis$)) :named a10))
(assert (! (less$ (enat$ n$) (llength$ (lconcat$ xss$a))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (exists ((?v0 Nat$) (?v1 Nat$)) (and (= (lnth$d (lconcat$ (lCons$a xs$ xss$)) na$) (lnth$d (lnth$ (lCons$a xs$ xss$) ?v0) ?v1)) (and (less$ (enat$ ?v1) (llength$ (lnth$ (lCons$a xs$ xss$) ?v0))) (and (less$ (enat$ ?v0) (llength$d (lCons$a xs$ xss$))) (= (enat$ na$) (plus$ (setsum$ uu$ (lessThan$ ?v0)) (enat$ ?v1))))))) :named a13))
(assert (! (less$ (enat$ na$) (llength$ (lconcat$ (lCons$a xs$ xss$)))) :named a14))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (less$ (enat$ na$) (llength$ (lconcat$ ?v0))) (exists ((?v1 Nat$) (?v2 Nat$)) (and (= (lnth$d (lconcat$ ?v0) na$) (lnth$d (lnth$ ?v0 ?v1) ?v2)) (and (less$ (enat$ ?v2) (llength$ (lnth$ ?v0 ?v1))) (and (less$ (enat$ ?v1) (llength$d ?v0)) (= (enat$ na$) (plus$ (setsum$ (uua$ ?v0) (lessThan$ ?v1)) (enat$ ?v2))))))))) :named a15))
(assert (! (= xs$a (lconcat$ (lCons$a xs$ xss$))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Enat$) (?v2 Enat$)) (= (less$ (plus$ (enat$ ?v0) ?v1) (plus$ (enat$ ?v0) ?v2)) (less$ ?v1 ?v2))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 Enat$) (?v2 Enat$)) (= (= (plus$ (enat$ ?v0) ?v1) (plus$ (enat$ ?v0) ?v2)) (= ?v1 ?v2))) :named a18))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$) (?v2 Enat$)) (= (= (plus$ ?v0 (enat$ ?v1)) (plus$ ?v2 (enat$ ?v1))) (= ?v0 ?v2))) :named a19))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (member$ ?v0 (lessThan$a ?v1)) (less$ ?v0 ?v1))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (member$a ?v0 (lessThan$ ?v1)) (less$a ?v0 ?v1))) :named a21))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (less$a (plus$a ?v0 ?v1) (plus$a ?v2 ?v1)) (less$a ?v0 ?v2))) :named a22))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (less$a (plus$a ?v0 ?v1) (plus$a ?v0 ?v2)) (less$a ?v1 ?v2))) :named a23))
(assert (! (less$ (enat$ (suc$ na$)) (llength$ (lconcat$ xssa$))) :named a24))
(assert (! (= xs$a (lappend$ xs$ (lconcat$ xss$))) :named a25))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (lessThan$a ?v0) (lessThan$a ?v1)) (= ?v0 ?v1))) :named a26))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (lessThan$ ?v0) (lessThan$ ?v1)) (= ?v0 ?v1))) :named a27))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a28))
(assert (! (forall ((?v0 A_llist_llist_llist_llist_llist$)) (=> (lfinite$ ?v0) (= (llength$b (lconcat$a ?v0)) (setsum$ (uub$ ?v0) (collect$ (uuc$ ?v0)))))) :named a29))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$)) (=> (lfinite$a ?v0) (= (llength$c (lconcat$b ?v0)) (setsum$ (uud$ ?v0) (collect$ (uue$ ?v0)))))) :named a30))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (lfinite$b ?v0) (= (llength$ (lconcat$ ?v0)) (setsum$ (uua$ ?v0) (collect$ (uuf$ ?v0)))))) :named a31))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (=> (lfinite$c ?v0) (= (llength$d (lconcat$c ?v0)) (setsum$ (uug$ ?v0) (collect$ (uuh$ ?v0)))))) :named a32))
(check-sat)
;(get-unsat-core)
