; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 635
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_llist_set$ 0)
(declare-sort A_bool_fun_a_bool_fun_fun$ 0)
(declare-sort A_llist_llist_llist_bool_fun$ 0)
(declare-sort A_llist_bool_fun_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_bool_fun_a_llist_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))
  (A_llist_llist_llist_llist$ (lNil$c) (lCons$c (lhd$c A_llist_llist_llist$) (ltl$c A_llist_llist_llist_llist$)))))
(declare-fun uu$ () A_llist_bool_fun$)
(declare-fun bot$ () A_llist_llist_llist_set$)
(declare-fun uua$ (A_llist_llist_bool_fun$) A_llist_llist_bool_fun_a_llist_llist_bool_fun_fun$)
(declare-fun uub$ (A_llist_bool_fun$) A_llist_bool_fun_a_llist_bool_fun_fun$)
(declare-fun uuc$ (A_set$) A_bool_fun_a_bool_fun_fun$)
(declare-fun uud$ (A_llist_llist_set$) A_llist_llist_bool_fun_a_llist_llist_bool_fun_fun$)
(declare-fun uue$ (A_llist_set$) A_llist_bool_fun_a_llist_bool_fun_fun$)
(declare-fun xss$ () A_llist_llist$)
(declare-fun bot$a () A_llist_llist_set$)
(declare-fun bot$b () A_llist_set$)
(declare-fun bot$c () A_set$)
(declare-fun lset$ (A_llist_llist$) A_llist_set$)
(declare-fun lset$a (A_llist_llist_llist_llist$) A_llist_llist_llist_set$)
(declare-fun lset$b (A_llist_llist_llist$) A_llist_llist_set$)
(declare-fun lset$c (A_llist$) A_set$)
(declare-fun insert$ (A_llist_llist_llist$ A_llist_llist_llist_set$) A_llist_llist_llist_set$)
(declare-fun member$ (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun insert$a (A_llist_llist$ A_llist_llist_set$) A_llist_llist_set$)
(declare-fun insert$b (A_llist$ A_llist_set$) A_llist_set$)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun less_eq$ (A_llist_set$ A_llist_set$) Bool)
(declare-fun lmember$ (A_llist_llist$) A_llist_llist_llist_bool_fun$)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun member$b (A$ A_set$) Bool)
(declare-fun collect$a (A_llist_llist_bool_fun$) A_llist_llist_set$)
(declare-fun collect$b (A_bool_fun$) A_set$)
(declare-fun fun_app$a (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$b (A_llist_llist_bool_fun_a_llist_llist_bool_fun_fun$ A_llist_llist_bool_fun$) A_llist_llist_bool_fun$)
(declare-fun fun_app$c (A_llist_bool_fun_a_llist_bool_fun_fun$ A_llist_bool_fun$) A_llist_bool_fun$)
(declare-fun fun_app$d (A_bool_fun$ A$) Bool)
(declare-fun fun_app$e (A_bool_fun_a_bool_fun_fun$ A_bool_fun$) A_bool_fun$)
(declare-fun fun_app$f (A_llist_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun lconcat$a (A_llist_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun lconcat$b (A_llist_llist_llist$) A_llist_llist$)
(declare-fun less_eq$a (A_set$ A_set$) Bool)
(declare-fun less_eq$b (A_llist_llist_set$ A_llist_llist_set$) Bool)
(declare-fun less_eq$c (A_llist_llist_llist_set$ A_llist_llist_llist_set$) Bool)
(declare-fun lmember$a (A$) A_llist_bool_fun$)
(declare-fun lmember$b (A_llist$) A_llist_llist_bool_fun$)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uu$ ?v0) (= ?v0 lNil$)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist_bool_fun$) (?v2 A_llist_llist$)) (! (= (fun_app$a (fun_app$b (uud$ ?v0) ?v1) ?v2) (and (member$ ?v2 ?v0) (fun_app$a ?v1 ?v2))) :pattern ((fun_app$a (fun_app$b (uud$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_bool_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$c (uue$ ?v0) ?v1) ?v2) (and (member$a ?v2 ?v0) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$c (uue$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_set$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$d (fun_app$e (uuc$ ?v0) ?v1) ?v2) (and (member$b ?v2 ?v0) (fun_app$d ?v1 ?v2))) :pattern ((fun_app$d (fun_app$e (uuc$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_bool_fun$) (?v2 A_llist_llist$)) (! (= (fun_app$a (fun_app$b (uua$ ?v0) ?v1) ?v2) (and (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2))) :pattern ((fun_app$a (fun_app$b (uua$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$c (uub$ ?v0) ?v1) ?v2) (and (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$c (uub$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (not (= (= (lconcat$ xss$) lNil$) (less_eq$ (lset$ xss$) (collect$ uu$)))) :named a6))
(assert (! (= (lconcat$a lNil$c) lNil$b) :named a7))
(assert (! (= (lconcat$b lNil$b) lNil$a) :named a8))
(assert (! (= (lconcat$ lNil$a) lNil$) :named a9))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (forall ((?v2 A$)) (=> (member$b ?v2 ?v0) (member$b ?v2 ?v1))) (less_eq$a ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist_set$)) (=> (forall ((?v2 A_llist_llist$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))) (less_eq$b ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (=> (forall ((?v2 A_llist$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1))) (less_eq$ ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist_set$)) (=> (and (less_eq$b ?v0 ?v1) (less_eq$b ?v1 ?v0)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 A_llist_llist_set$)) (less_eq$b ?v0 ?v0)) :named a15))
(assert (! (forall ((?v0 A_llist_set$)) (less_eq$ ?v0 ?v0)) :named a16))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist_bool_fun$) (?v2 A_llist_llist_bool_fun$)) (= (less_eq$b ?v0 (collect$a (fun_app$b (uua$ ?v1) ?v2))) (and (less_eq$b ?v0 (collect$a ?v1)) (less_eq$b ?v0 (collect$a ?v2))))) :named a17))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_bool_fun$) (?v2 A_llist_bool_fun$)) (= (less_eq$ ?v0 (collect$ (fun_app$c (uub$ ?v1) ?v2))) (and (less_eq$ ?v0 (collect$ ?v1)) (less_eq$ ?v0 (collect$ ?v2))))) :named a18))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$) (?v3 A_bool_fun$)) (=> (and (member$b ?v0 ?v1) (less_eq$a ?v1 (collect$b (fun_app$e (uuc$ ?v2) ?v3)))) (fun_app$d ?v3 ?v0))) :named a19))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist_set$) (?v3 A_llist_llist_bool_fun$)) (=> (and (member$ ?v0 ?v1) (less_eq$b ?v1 (collect$a (fun_app$b (uud$ ?v2) ?v3)))) (fun_app$a ?v3 ?v0))) :named a20))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_set$) (?v3 A_llist_bool_fun$)) (=> (and (member$a ?v0 ?v1) (less_eq$ ?v1 (collect$ (fun_app$c (uue$ ?v2) ?v3)))) (fun_app$ ?v3 ?v0))) :named a21))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_bool_fun$) (?v3 A_bool_fun$)) (=> (and (less_eq$a ?v0 ?v1) (forall ((?v4 A$)) (=> (and (member$b ?v4 ?v0) (fun_app$d ?v2 ?v4)) (fun_app$d ?v3 ?v4)))) (less_eq$a (collect$b (fun_app$e (uuc$ ?v0) ?v2)) (collect$b (fun_app$e (uuc$ ?v1) ?v3))))) :named a22))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist_bool_fun$) (?v3 A_llist_llist_bool_fun$)) (=> (and (less_eq$b ?v0 ?v1) (forall ((?v4 A_llist_llist$)) (=> (and (member$ ?v4 ?v0) (fun_app$a ?v2 ?v4)) (fun_app$a ?v3 ?v4)))) (less_eq$b (collect$a (fun_app$b (uud$ ?v0) ?v2)) (collect$a (fun_app$b (uud$ ?v1) ?v3))))) :named a23))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$) (?v2 A_llist_bool_fun$) (?v3 A_llist_bool_fun$)) (=> (and (less_eq$ ?v0 ?v1) (forall ((?v4 A_llist$)) (=> (and (member$a ?v4 ?v0) (fun_app$ ?v2 ?v4)) (fun_app$ ?v3 ?v4)))) (less_eq$ (collect$ (fun_app$c (uue$ ?v0) ?v2)) (collect$ (fun_app$c (uue$ ?v1) ?v3))))) :named a24))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_bool_fun$)) (=> (less_eq$a ?v0 ?v1) (= (less_eq$a ?v0 (collect$b (fun_app$e (uuc$ ?v1) ?v2))) (forall ((?v3 A$)) (=> (member$b ?v3 ?v0) (fun_app$d ?v2 ?v3)))))) :named a25))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist_set$) (?v2 A_llist_llist_bool_fun$)) (=> (less_eq$b ?v0 ?v1) (= (less_eq$b ?v0 (collect$a (fun_app$b (uud$ ?v1) ?v2))) (forall ((?v3 A_llist_llist$)) (=> (member$ ?v3 ?v0) (fun_app$a ?v2 ?v3)))))) :named a26))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$) (?v2 A_llist_bool_fun$)) (=> (less_eq$ ?v0 ?v1) (= (less_eq$ ?v0 (collect$ (fun_app$c (uue$ ?v1) ?v2))) (forall ((?v3 A_llist$)) (=> (member$a ?v3 ?v0) (fun_app$ ?v2 ?v3)))))) :named a27))
(assert (! (forall ((?v0 A_set$) (?v1 A_bool_fun$)) (less_eq$a (collect$b (fun_app$e (uuc$ ?v0) ?v1)) ?v0)) :named a28))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist_bool_fun$)) (less_eq$b (collect$a (fun_app$b (uud$ ?v0) ?v1)) ?v0)) :named a29))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_bool_fun$)) (less_eq$ (collect$ (fun_app$c (uue$ ?v0) ?v1)) ?v0)) :named a30))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$)) (= (= (lconcat$a ?v0) lNil$b) (less_eq$c (lset$a ?v0) (insert$ lNil$b bot$)))) :named a31))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (= (= (lconcat$b ?v0) lNil$a) (less_eq$b (lset$b ?v0) (insert$a lNil$a bot$a)))) :named a32))
(assert (! (forall ((?v0 A_llist_llist$)) (= (= (lconcat$ ?v0) lNil$) (less_eq$ (lset$ ?v0) (insert$b lNil$ bot$b)))) :named a33))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$)) (= (member$ ?v0 (lset$b ?v1)) (fun_app$f (lmember$ ?v0) ?v1))) :named a34))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$b ?v0 (lset$c ?v1)) (fun_app$ (lmember$a ?v0) ?v1))) :named a35))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (= (member$a ?v0 (lset$ ?v1)) (fun_app$a (lmember$b ?v0) ?v1))) :named a36))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$f (lmember$ ?v0) lNil$b) false) :pattern ((lmember$ ?v0)))) :named a37))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a (lmember$b ?v0) lNil$a) false) :pattern ((lmember$b ?v0)))) :named a38))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ (lmember$a ?v0) lNil$) false) :pattern ((lmember$a ?v0)))) :named a39))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist_set$)) (= (= ?v0 ?v1) (and (less_eq$b ?v0 ?v1) (less_eq$b ?v1 ?v0)))) :named a40))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (= ?v0 ?v1) (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)))) :named a41))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$)) (= (= (collect$a ?v0) bot$a) (forall ((?v1 A_llist_llist$)) (not (fun_app$a ?v0 ?v1))))) :named a42))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (= (= (collect$ ?v0) bot$b) (forall ((?v1 A_llist$)) (not (fun_app$ ?v0 ?v1))))) :named a43))
(assert (! (forall ((?v0 A_set$)) (= (forall ((?v1 A$)) (not (member$b ?v1 ?v0))) (= ?v0 bot$c))) :named a44))
(assert (! (forall ((?v0 A_llist_llist_set$)) (= (forall ((?v1 A_llist_llist$)) (not (member$ ?v1 ?v0))) (= ?v0 bot$a))) :named a45))
(assert (! (forall ((?v0 A_llist_set$)) (= (forall ((?v1 A_llist$)) (not (member$a ?v1 ?v0))) (= ?v0 bot$b))) :named a46))
(check-sat)
;(get-unsat-core)
