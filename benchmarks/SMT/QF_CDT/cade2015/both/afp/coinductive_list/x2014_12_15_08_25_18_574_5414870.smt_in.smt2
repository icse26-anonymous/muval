; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 578
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort B_llist_set$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_b_llist_prod_set$ 0)
(declare-sort A_llist_b_llist_prod_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))))
(declare-datatypes () ((A_llist_b_llist_prod$ (pair$ (fst$ A_llist$) (snd$ B_llist$)))))
(declare-fun uu$ () A_llist_a_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ya$ () A_llist_b_llist_prod_set$)
(declare-fun ys$ () B_llist$)
(declare-fun inf$ (A_llist_set$ A_llist_set$) A_llist_set$)
(declare-fun uua$ () A_llist_b_llist_prod_a_llist_fun$)
(declare-fun uub$ () A_llist_bool_fun$)
(declare-fun inf$a (B_llist_set$ B_llist_set$) B_llist_set$)
(declare-fun inf$b (A_set$ A_set$) A_set$)
(declare-fun inf$c (A_llist_b_llist_prod_set$ A_llist_b_llist_prod_set$) A_llist_b_llist_prod_set$)
(declare-fun lSup$ (A_llist_set$) A_llist$)
(declare-fun image$ (A_llist_a_fun$ A_llist_set$) A_set$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun image$a (A_llist_b_llist_prod_a_llist_fun$ A_llist_b_llist_prod_set$) A_llist_set$)
(declare-fun lnull$a (B_llist$) Bool)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun member$a (A_llist_b_llist_prod$ A_llist_b_llist_prod_set$) Bool)
(declare-fun member$b (A_llist$ A_llist_set$) Bool)
(declare-fun member$c (B_llist$ B_llist_set$) Bool)
(declare-fun fun_app$a (A_llist_a_fun$ A_llist$) A$)
(declare-fun fun_app$b (A_llist_b_llist_prod_a_llist_fun$ A_llist_b_llist_prod$) A_llist$)
(declare-fun fun_app$c (A_bool_fun$ A$) Bool)
(declare-fun fun_app$d (B_bool_fun$ B$) Bool)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uub$ ?v0) (not (lnull$ ?v0))) :pattern ((fun_app$ uub$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a uu$ ?v0) (lhd$ ?v0)) :pattern ((fun_app$a uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_llist_b_llist_prod$)) (! (= (fun_app$b uua$ ?v0) (fst$ ?v0)) :pattern ((fun_app$b uua$ ?v0)))) :named a2))
(assert (! (not (member$ (lhd$ xs$) (image$ uu$ (inf$ (image$a uua$ ya$) (collect$ uub$))))) :named a3))
(assert (! (member$a (pair$ xs$ ys$) ya$) :named a4))
(assert (! (not (lnull$ xs$)) :named a5))
(assert (! (not (lnull$a ys$)) :named a6))
(assert (! (not (lnull$ (lSup$ (image$a uua$ ya$)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (lnull$ ?v0) (not (fun_app$c ?v1 (lhd$ ?v0)))) false) (=> (and (not (lnull$ ?v0)) (fun_app$c ?v1 (lhd$ ?v0))) false)) false)) :named a8))
(assert (! (forall ((?v0 B_llist$) (?v1 B_bool_fun$)) (=> (and (=> (or (lnull$a ?v0) (not (fun_app$d ?v1 (lhd$a ?v0)))) false) (=> (and (not (lnull$a ?v0)) (fun_app$d ?v1 (lhd$a ?v0))) false)) false)) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$a ?v1))) false)) false)) :named a11))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$ ?v1))) false)) false)) :named a12))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a13))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$b ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$b ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a14))
(assert (! (forall ((?v0 B_llist_set$)) (=> (and (=> (forall ((?v1 B_llist$)) (=> (member$c ?v1 ?v0) (lnull$a ?v1))) false) (=> (not (forall ((?v1 B_llist$)) (=> (member$c ?v1 ?v0) (lnull$a ?v1)))) false)) false)) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a16))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a17))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)) :named a18))
(assert (! (forall ((?v0 B_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false)) :named a19))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist_set$) (?v2 B_llist_set$)) (= (member$c ?v0 (inf$a ?v1 ?v2)) (and (member$c ?v0 ?v1) (member$c ?v0 ?v2)))) :named a20))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (member$ ?v0 (inf$b ?v1 ?v2)) (and (member$ ?v0 ?v1) (member$ ?v0 ?v2)))) :named a21))
(assert (! (forall ((?v0 A_llist_b_llist_prod$) (?v1 A_llist_b_llist_prod_set$) (?v2 A_llist_b_llist_prod_set$)) (= (member$a ?v0 (inf$c ?v1 ?v2)) (and (member$a ?v0 ?v1) (member$a ?v0 ?v2)))) :named a22))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_set$)) (= (member$b ?v0 (inf$ ?v1 ?v2)) (and (member$b ?v0 ?v1) (member$b ?v0 ?v2)))) :named a23))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist_set$) (?v2 B_llist_set$)) (=> (and (member$c ?v0 ?v1) (member$c ?v0 ?v2)) (member$c ?v0 (inf$a ?v1 ?v2)))) :named a24))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 ?v1) (member$ ?v0 ?v2)) (member$ ?v0 (inf$b ?v1 ?v2)))) :named a25))
(assert (! (forall ((?v0 A_llist_b_llist_prod$) (?v1 A_llist_b_llist_prod_set$) (?v2 A_llist_b_llist_prod_set$)) (=> (and (member$a ?v0 ?v1) (member$a ?v0 ?v2)) (member$a ?v0 (inf$c ?v1 ?v2)))) :named a26))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_set$)) (=> (and (member$b ?v0 ?v1) (member$b ?v0 ?v2)) (member$b ?v0 (inf$ ?v1 ?v2)))) :named a27))
(assert (! (forall ((?v0 B_llist_set$) (?v1 B_llist_set$)) (= (inf$a (inf$a ?v0 ?v1) ?v1) (inf$a ?v0 ?v1))) :named a28))
(assert (! (forall ((?v0 A_llist_b_llist_prod_set$) (?v1 A_llist_b_llist_prod_set$)) (= (inf$c (inf$c ?v0 ?v1) ?v1) (inf$c ?v0 ?v1))) :named a29))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (inf$b (inf$b ?v0 ?v1) ?v1) (inf$b ?v0 ?v1))) :named a30))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (inf$ (inf$ ?v0 ?v1) ?v1) (inf$ ?v0 ?v1))) :named a31))
(assert (! (forall ((?v0 B_llist_set$) (?v1 B_llist_set$)) (= (inf$a (inf$a ?v0 ?v1) ?v1) (inf$a ?v0 ?v1))) :named a32))
(assert (! (forall ((?v0 A_llist_b_llist_prod_set$) (?v1 A_llist_b_llist_prod_set$)) (= (inf$c (inf$c ?v0 ?v1) ?v1) (inf$c ?v0 ?v1))) :named a33))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (inf$b (inf$b ?v0 ?v1) ?v1) (inf$b ?v0 ?v1))) :named a34))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (inf$ (inf$ ?v0 ?v1) ?v1) (inf$ ?v0 ?v1))) :named a35))
(assert (! (forall ((?v0 B_llist_set$) (?v1 B_llist_set$)) (= (inf$a ?v0 (inf$a ?v0 ?v1)) (inf$a ?v0 ?v1))) :named a36))
(assert (! (forall ((?v0 A_llist_b_llist_prod_set$) (?v1 A_llist_b_llist_prod_set$)) (= (inf$c ?v0 (inf$c ?v0 ?v1)) (inf$c ?v0 ?v1))) :named a37))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (inf$b ?v0 (inf$b ?v0 ?v1)) (inf$b ?v0 ?v1))) :named a38))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (inf$ ?v0 (inf$ ?v0 ?v1)) (inf$ ?v0 ?v1))) :named a39))
(assert (! (forall ((?v0 B_llist_set$) (?v1 B_llist_set$)) (= (inf$a ?v0 (inf$a ?v0 ?v1)) (inf$a ?v0 ?v1))) :named a40))
(assert (! (forall ((?v0 A_llist_b_llist_prod_set$) (?v1 A_llist_b_llist_prod_set$)) (= (inf$c ?v0 (inf$c ?v0 ?v1)) (inf$c ?v0 ?v1))) :named a41))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (inf$b ?v0 (inf$b ?v0 ?v1)) (inf$b ?v0 ?v1))) :named a42))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (inf$ ?v0 (inf$ ?v0 ?v1)) (inf$ ?v0 ?v1))) :named a43))
(check-sat)
;(get-unsat-core)
