; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 616
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_b_prod_llist_bool_fun$ 0)
(declare-sort A_b_prod_llist_set_a_b_prod_llist_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_b_prod_llist_fun$ 0)
(declare-sort A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_b_prod_llist_fun_set$ 0)
(declare-sort A_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_b_prod_llist_fun_set_a_llist_b_llist_prod_a_b_prod_llist_fun_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_fun_fun$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$) (lCons$ (lhd$ A_b_prod$) (ltl$ A_b_prod_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))))
(declare-datatypes () ((A_llist_b_llist_prod$ (pair$a (fst$a A_llist$) (snd$a B_llist$)))))
(declare-fun f$ () A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_fun$)
(declare-fun ys$ () B_llist$)
(declare-fun xsa$ () A_llist$)
(declare-fun fixp$ (A_llist_b_llist_prod_a_b_prod_llist_fun_set_a_llist_b_llist_prod_a_b_prod_llist_fun_fun$) A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_fun_fun$)
(declare-fun lSup$ () A_b_prod_llist_set_a_b_prod_llist_fun$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun chain$ (A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun_fun$ A_llist_b_llist_prod_a_b_prod_llist_fun_set$) Bool)
(declare-fun curry$ (A_llist_b_llist_prod_a_b_prod_llist_fun$ A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun member$ (A_llist_b_llist_prod_a_b_prod_llist_fun$ A_llist_b_llist_prod_a_b_prod_llist_fun_set$) Bool)
(declare-fun transp$ (A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun_fun$) Bool)
(declare-fun fun_app$ (A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_fun$ A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_fun$) A_llist_b_llist_prod_a_b_prod_llist_fun$)
(declare-fun fun_lub$ (A_b_prod_llist_set_a_b_prod_llist_fun$) A_llist_b_llist_prod_a_b_prod_llist_fun_set_a_llist_b_llist_prod_a_b_prod_llist_fun_fun$)
(declare-fun fun_ord$ (A_b_prod_llist_a_b_prod_llist_bool_fun_fun$) A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun_fun$)
(declare-fun lprefix$ () A_b_prod_llist_a_b_prod_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_fun_fun$ A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun_fun$) A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_fun$)
(declare-fun fun_app$b (A_b_prod_llist_bool_fun$ A_b_prod_llist$) Bool)
(declare-fun fun_app$c (A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist$) A_b_prod_llist_bool_fun$)
(declare-fun fun_app$d (A_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun$ A_llist_b_llist_prod_a_b_prod_llist_fun$) Bool)
(declare-fun fun_app$e (A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun_fun$ A_llist_b_llist_prod_a_b_prod_llist_fun$) A_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun$)
(declare-fun fun_app$f (A_llist_b_llist_prod_a_b_prod_llist_fun_set_a_llist_b_llist_prod_a_b_prod_llist_fun_fun$ A_llist_b_llist_prod_a_b_prod_llist_fun_set$) A_llist_b_llist_prod_a_b_prod_llist_fun$)
(declare-fun lub_singleton$ (A_llist_b_llist_prod_a_b_prod_llist_fun_set_a_llist_b_llist_prod_a_b_prod_llist_fun_fun$) Bool)
(declare-fun finite_lprefix$ () A_b_prod_llist_a_b_prod_llist_bool_fun_fun$)
(declare-fun partial_function_definitions$ (A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist_set_a_b_prod_llist_fun$) Bool)
(assert (! (not (= (lzip$ xsa$ ys$) (curry$ (fun_app$ (fun_app$a (fixp$ (fun_lub$ lSup$)) (fun_ord$ lprefix$)) f$) xsa$ ys$))) :named a0))
(assert (! (forall ((?v0 A_b_prod_llist$)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v0)) :named a1))
(assert (! (forall ((?v0 A_b_prod_llist$)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v0)) :named a2))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_b_prod_llist_fun$) (?v1 A_llist_b_llist_prod_a_b_prod_llist_fun$) (?v2 A_llist_b_llist_prod_a_b_prod_llist_fun$)) (=> (and (fun_app$d (fun_app$e (fun_ord$ lprefix$) ?v0) ?v1) (fun_app$d (fun_app$e (fun_ord$ lprefix$) ?v1) ?v2)) (fun_app$d (fun_app$e (fun_ord$ lprefix$) ?v0) ?v2))) :named a3))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_b_prod_llist_fun$) (?v1 A_llist_b_llist_prod_a_b_prod_llist_fun$)) (=> (and (fun_app$d (fun_app$e (fun_ord$ lprefix$) ?v0) ?v1) (fun_app$d (fun_app$e (fun_ord$ lprefix$) ?v1) ?v0)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v2) ?v1)) (or (fun_app$b (fun_app$c lprefix$ ?v0) ?v2) (fun_app$b (fun_app$c lprefix$ ?v2) ?v0)))) :named a7))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v2)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v2))) :named a8))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v2)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v2))) :named a9))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_b_prod_llist_fun$)) (fun_app$d (fun_app$e (fun_ord$ lprefix$) ?v0) ?v0)) :named a10))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_b_prod_llist_fun_set$) (?v1 A_llist_b_llist_prod_a_b_prod_llist_fun$)) (=> (and (chain$ (fun_ord$ lprefix$) ?v0) (forall ((?v2 A_llist_b_llist_prod_a_b_prod_llist_fun$)) (=> (member$ ?v2 ?v0) (fun_app$d (fun_app$e (fun_ord$ lprefix$) ?v2) ?v1)))) (fun_app$d (fun_app$e (fun_ord$ lprefix$) (fun_app$f (fun_lub$ lSup$) ?v0)) ?v1))) :named a11))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_b_prod_llist_fun_set$) (?v1 A_llist_b_llist_prod_a_b_prod_llist_fun$)) (=> (and (chain$ (fun_ord$ lprefix$) ?v0) (member$ ?v1 ?v0)) (fun_app$d (fun_app$e (fun_ord$ lprefix$) ?v1) (fun_app$f (fun_lub$ lSup$) ?v0)))) :named a12))
(assert (! (lub_singleton$ (fun_lub$ lSup$)) :named a13))
(assert (! (= finite_lprefix$ lprefix$) :named a14))
(assert (! (transp$ (fun_ord$ lprefix$)) :named a15))
(assert (! (partial_function_definitions$ lprefix$ lSup$) :named a16))
(check-sat)
;(get-unsat-core)
