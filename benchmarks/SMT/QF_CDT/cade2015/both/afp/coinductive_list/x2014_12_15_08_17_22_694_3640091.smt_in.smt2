; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 584
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun n$ () Enat$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun less$ (Enat$) Enat_bool_fun$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun ltake$ (Enat$ A_llist$) A_llist$)
(declare-fun minus$ (Enat$ Enat$) Enat$)
(declare-fun fun_app$ (Enat_bool_fun$ Enat$) Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun llength$ (A_llist$) Enat$)
(assert (! (not (= (ldrop$ n$ (lappend$ xs$ ys$)) (ite (fun_app$ (less$ n$) (llength$ xs$)) (lappend$ (ldrop$ n$ xs$) ys$) (ldrop$ (minus$ n$ (llength$ xs$)) ys$)))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a1))
(assert (! (forall ((?v0 Enat_bool_fun$) (?v1 Enat$)) (=> (forall ((?v2 Enat$)) (=> (forall ((?v3 Enat$)) (=> (fun_app$ (less$ ?v3) ?v2) (fun_app$ ?v0 ?v3))) (fun_app$ ?v0 ?v2))) (fun_app$ ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$)) (= (ltake$ ?v0 (lappend$ ?v1 ?v2)) (lappend$ (ltake$ ?v0 ?v1) (ltake$ (minus$ ?v0 (llength$ ?v1)) ?v2)))) :named a3))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (= ?v0 ?v1)) (or (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ ?v1) ?v0)))) :named a4))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (fun_app$ (less$ ?v0) ?v1)) (or (fun_app$ (less$ ?v1) ?v0) (= ?v0 ?v1)))) :named a5))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$)) (= (lappend$ (ltake$ ?v0 ?v1) (ldrop$ ?v0 ?v1)) ?v1)) :named a6))
(assert (! (forall ((?v0 Enat$)) (not (fun_app$ (less$ ?v0) ?v0))) :named a7))
(assert (! (forall ((?v0 Enat$)) (not (fun_app$ (less$ ?v0) ?v0))) :named a8))
(check-sat)
;(get-unsat-core)
