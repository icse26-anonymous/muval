; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 479
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort B_llist_enat_fun$ 0)
(declare-sort A_a_prod_llist_enat_fun$ 0)
(declare-sort A_b_prod_llist_enat_fun$ 0)
(declare-sort B_a_prod_llist_enat_fun$ 0)
(declare-sort B_b_prod_llist_enat_fun$ 0)
(declare-sort A_a_b_prod_prod_llist_enat_fun$ 0)
(declare-sort A_b_a_prod_prod_llist_enat_fun$ 0)
(declare-sort A_b_b_prod_prod_llist_enat_fun$ 0)
(declare-sort B_a_b_prod_prod_llist_enat_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))
  (A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$b) (lCons$b (lhd$b A_b_prod$) (ltl$b A_b_prod_llist$)))))
(declare-datatypes () ((B_b_prod$ (pair$a (fst$a B$) (snd$a B$)))))
(declare-codatatypes () ((B_b_prod_llist$ (lNil$c) (lCons$c (lhd$c B_b_prod$) (ltl$c B_b_prod_llist$)))))
(declare-datatypes () ((B_a_prod$ (pair$b (fst$b B$) (snd$b A$)))))
(declare-codatatypes () ((B_a_prod_llist$ (lNil$d) (lCons$d (lhd$d B_a_prod$) (ltl$d B_a_prod_llist$)))))
(declare-datatypes () ((A_a_prod$ (pair$c (fst$c A$) (snd$c A$)))))
(declare-codatatypes () ((A_a_prod_llist$ (lNil$e) (lCons$e (lhd$e A_a_prod$) (ltl$e A_a_prod_llist$)))))
(declare-datatypes () ((B_a_b_prod_prod$ (pair$d (fst$d B$) (snd$d A_b_prod$)))))
(declare-codatatypes () ((B_a_b_prod_prod_llist$ (lNil$f) (lCons$f (lhd$f B_a_b_prod_prod$) (ltl$f B_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_a_b_prod_prod$ (pair$e (fst$e A$) (snd$e A_b_prod$)))))
(declare-codatatypes () ((A_a_b_prod_prod_llist$ (lNil$g) (lCons$g (lhd$g A_a_b_prod_prod$) (ltl$g A_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_b_b_prod_prod$ (pair$f (fst$f A$) (snd$f B_b_prod$)))))
(declare-codatatypes () ((A_b_b_prod_prod_llist$ (lNil$h) (lCons$h (lhd$h A_b_b_prod_prod$) (ltl$h A_b_b_prod_prod_llist$)))))
(declare-datatypes () ((A_b_a_prod_prod$ (pair$g (fst$g A$) (snd$g B_a_prod$)))))
(declare-codatatypes () ((A_b_a_prod_prod_llist$ (lNil$i) (lCons$i (lhd$i A_b_a_prod_prod$) (ltl$i A_b_a_prod_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_prod$ (pair$h (fst$h A_b_prod$) (snd$h A$)))))
(declare-codatatypes () ((A_b_prod_a_prod_llist$ (lNil$j) (lCons$j (lhd$j A_b_prod_a_prod$) (ltl$j A_b_prod_a_prod_llist$)))))
(declare-datatypes () ((A_b_prod_b_prod$ (pair$i (fst$i A_b_prod$) (snd$i B$)))))
(declare-codatatypes () ((A_b_prod_b_prod_llist$ (lNil$k) (lCons$k (lhd$k A_b_prod_b_prod$) (ltl$k A_b_prod_b_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_b_prod_prod$ (pair$j (fst$j A_b_prod$) (snd$j A_b_prod$)))))
(declare-codatatypes () ((A_b_prod_a_b_prod_prod_llist$ (lNil$l) (lCons$l (lhd$l A_b_prod_a_b_prod_prod$) (ltl$l A_b_prod_a_b_prod_prod_llist$)))))
(declare-fun us$ () A_b_prod_llist$)
(declare-fun vs$ () A_b_prod_llist$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun min$ (Enat$ Enat$) Enat$)
(declare-fun llcp$ (A_llist$) A_llist_enat_fun$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun plus$ (Enat$ Enat$) Enat$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun llcp$a (B_llist$) B_llist_enat_fun$)
(declare-fun llcp$b (A_b_prod_llist$) A_b_prod_llist_enat_fun$)
(declare-fun llcp$c (B_b_prod_llist$) B_b_prod_llist_enat_fun$)
(declare-fun llcp$d (B_a_prod_llist$) B_a_prod_llist_enat_fun$)
(declare-fun llcp$e (A_a_prod_llist$) A_a_prod_llist_enat_fun$)
(declare-fun llcp$f (B_a_b_prod_prod_llist$) B_a_b_prod_prod_llist_enat_fun$)
(declare-fun llcp$g (A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist_enat_fun$)
(declare-fun llcp$h (A_b_b_prod_prod_llist$) A_b_b_prod_prod_llist_enat_fun$)
(declare-fun llcp$i (A_b_a_prod_prod_llist$) A_b_a_prod_prod_llist_enat_fun$)
(declare-fun ltake$ (Enat$ A_llist$) A_llist$)
(declare-fun lzip$a (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun lzip$b (B_llist$ A_llist$) B_a_prod_llist$)
(declare-fun lzip$c (B_llist$ B_llist$) B_b_prod_llist$)
(declare-fun lzip$d (A_llist$ A_b_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun lzip$e (B_llist$ A_b_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun lzip$f (A_b_prod_llist$ A_llist$) A_b_prod_a_prod_llist$)
(declare-fun lzip$g (A_b_prod_llist$ B_llist$) A_b_prod_b_prod_llist$)
(declare-fun lzip$h (A_b_prod_llist$ A_b_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun lzip$i (A_llist$ B_b_prod_llist$) A_b_b_prod_prod_llist$)
(declare-fun ldrop$a (Enat$ B_llist$) B_llist$)
(declare-fun ltake$a (Enat$ B_llist$) B_llist$)
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun lfinite$ (A_b_prod_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (B_llist_enat_fun$ B_llist$) Enat$)
(declare-fun fun_app$b (A_b_prod_llist_enat_fun$ A_b_prod_llist$) Enat$)
(declare-fun fun_app$c (B_b_prod_llist_enat_fun$ B_b_prod_llist$) Enat$)
(declare-fun fun_app$d (B_a_prod_llist_enat_fun$ B_a_prod_llist$) Enat$)
(declare-fun fun_app$e (A_a_prod_llist_enat_fun$ A_a_prod_llist$) Enat$)
(declare-fun fun_app$f (B_a_b_prod_prod_llist_enat_fun$ B_a_b_prod_prod_llist$) Enat$)
(declare-fun fun_app$g (A_a_b_prod_prod_llist_enat_fun$ A_a_b_prod_prod_llist$) Enat$)
(declare-fun fun_app$h (A_b_b_prod_prod_llist_enat_fun$ A_b_b_prod_prod_llist$) Enat$)
(declare-fun fun_app$i (A_b_a_prod_prod_llist_enat_fun$ A_b_a_prod_prod_llist$) Enat$)
(declare-fun lappend$a (B_llist$ B_llist$) B_llist$)
(declare-fun lappend$b (A_b_prod_llist$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun lappend$c (B_b_prod_llist$ B_b_prod_llist$) B_b_prod_llist$)
(declare-fun lappend$d (B_a_prod_llist$ B_a_prod_llist$) B_a_prod_llist$)
(declare-fun lappend$e (A_a_prod_llist$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun lappend$f (B_a_b_prod_prod_llist$ B_a_b_prod_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun lappend$g (A_a_b_prod_prod_llist$ A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun lappend$h (A_b_b_prod_prod_llist$ A_b_b_prod_prod_llist$) A_b_b_prod_prod_llist$)
(declare-fun lappend$i (A_b_a_prod_prod_llist$ A_b_a_prod_prod_llist$) A_b_a_prod_prod_llist$)
(declare-fun lappend$j (A_b_prod_a_prod_llist$ A_b_prod_a_prod_llist$) A_b_prod_a_prod_llist$)
(declare-fun lappend$k (A_b_prod_b_prod_llist$ A_b_prod_b_prod_llist$) A_b_prod_b_prod_llist$)
(declare-fun lappend$l (A_b_prod_a_b_prod_prod_llist$ A_b_prod_a_b_prod_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun lfinite$a (A_llist$) Bool)
(declare-fun lfinite$b (B_llist$) Bool)
(declare-fun lfinite$c (B_b_prod_llist$) Bool)
(declare-fun lfinite$d (B_a_prod_llist$) Bool)
(declare-fun lfinite$e (A_a_prod_llist$) Bool)
(declare-fun lfinite$f (B_a_b_prod_prod_llist$) Bool)
(declare-fun lfinite$g (A_a_b_prod_prod_llist$) Bool)
(declare-fun lfinite$h (A_b_b_prod_prod_llist$) Bool)
(declare-fun lfinite$i (A_b_a_prod_prod_llist$) Bool)
(declare-fun llength$a (B_llist$) Enat$)
(declare-fun llength$b (A_b_prod_llist$) Enat$)
(declare-fun llength$c (B_b_prod_llist$) Enat$)
(declare-fun llength$d (B_a_prod_llist$) Enat$)
(declare-fun llength$e (A_a_prod_llist$) Enat$)
(declare-fun llength$f (B_a_b_prod_prod_llist$) Enat$)
(declare-fun llength$g (A_a_b_prod_prod_llist$) Enat$)
(declare-fun llength$h (A_b_b_prod_prod_llist$) Enat$)
(declare-fun llength$i (A_b_a_prod_prod_llist$) Enat$)
(declare-fun llength$j (A_b_prod_a_prod_llist$) Enat$)
(declare-fun llength$k (A_b_prod_b_prod_llist$) Enat$)
(declare-fun llength$l (A_b_prod_a_b_prod_prod_llist$) Enat$)
(assert (! (not (exists ((?v0 A_llist$) (?v1 A_llist$) (?v2 B_llist$) (?v3 B_llist$)) (and (= xs$ (lappend$ ?v0 ?v1)) (and (= ys$ (lappend$a ?v2 ?v3)) (and (= (llength$ ?v0) (llength$a ?v2)) (and (= us$ (lzip$ ?v0 ?v2)) (= vs$ (lzip$ ?v1 ?v3)))))))) :named a0))
(assert (! (= (lzip$ xs$ ys$) (lappend$b us$ vs$)) :named a1))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a2))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (= (lappend$a (lappend$a ?v0 ?v1) ?v2) (lappend$a ?v0 (lappend$a ?v1 ?v2)))) :named a3))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (lappend$b (lappend$b ?v0 ?v1) ?v2) (lappend$b ?v0 (lappend$b ?v1 ?v2)))) :named a4))
(assert (! (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$) (?v2 B_b_prod_llist$)) (= (lappend$c (lappend$c ?v0 ?v1) ?v2) (lappend$c ?v0 (lappend$c ?v1 ?v2)))) :named a5))
(assert (! (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$) (?v2 B_a_prod_llist$)) (= (lappend$d (lappend$d ?v0 ?v1) ?v2) (lappend$d ?v0 (lappend$d ?v1 ?v2)))) :named a6))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (= (lappend$e (lappend$e ?v0 ?v1) ?v2) (lappend$e ?v0 (lappend$e ?v1 ?v2)))) :named a7))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$) (?v1 B_a_b_prod_prod_llist$) (?v2 B_a_b_prod_prod_llist$)) (= (lappend$f (lappend$f ?v0 ?v1) ?v2) (lappend$f ?v0 (lappend$f ?v1 ?v2)))) :named a8))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$) (?v2 A_a_b_prod_prod_llist$)) (= (lappend$g (lappend$g ?v0 ?v1) ?v2) (lappend$g ?v0 (lappend$g ?v1 ?v2)))) :named a9))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$) (?v1 A_b_b_prod_prod_llist$) (?v2 A_b_b_prod_prod_llist$)) (= (lappend$h (lappend$h ?v0 ?v1) ?v2) (lappend$h ?v0 (lappend$h ?v1 ?v2)))) :named a10))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$) (?v1 A_b_a_prod_prod_llist$) (?v2 A_b_a_prod_prod_llist$)) (= (lappend$i (lappend$i ?v0 ?v1) ?v2) (lappend$i ?v0 (lappend$i ?v1 ?v2)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (= (llength$ ?v0) (llength$ ?v1)) (= (lzip$a (lappend$ ?v0 ?v2) (lappend$ ?v1 ?v3)) (lappend$e (lzip$a ?v0 ?v1) (lzip$a ?v2 ?v3))))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_llist$)) (=> (= (llength$ ?v0) (llength$a ?v1)) (= (lzip$ (lappend$ ?v0 ?v2) (lappend$a ?v1 ?v3)) (lappend$b (lzip$ ?v0 ?v1) (lzip$ ?v2 ?v3))))) :named a13))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_llist$)) (=> (= (llength$a ?v0) (llength$ ?v1)) (= (lzip$b (lappend$a ?v0 ?v2) (lappend$ ?v1 ?v3)) (lappend$d (lzip$b ?v0 ?v1) (lzip$b ?v2 ?v3))))) :named a14))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_llist$)) (=> (= (llength$a ?v0) (llength$a ?v1)) (= (lzip$c (lappend$a ?v0 ?v2) (lappend$a ?v1 ?v3)) (lappend$c (lzip$c ?v0 ?v1) (lzip$c ?v2 ?v3))))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_b_prod_llist$) (?v2 A_llist$) (?v3 A_b_prod_llist$)) (=> (= (llength$ ?v0) (llength$b ?v1)) (= (lzip$d (lappend$ ?v0 ?v2) (lappend$b ?v1 ?v3)) (lappend$g (lzip$d ?v0 ?v1) (lzip$d ?v2 ?v3))))) :named a16))
(assert (! (forall ((?v0 B_llist$) (?v1 A_b_prod_llist$) (?v2 B_llist$) (?v3 A_b_prod_llist$)) (=> (= (llength$a ?v0) (llength$b ?v1)) (= (lzip$e (lappend$a ?v0 ?v2) (lappend$b ?v1 ?v3)) (lappend$f (lzip$e ?v0 ?v1) (lzip$e ?v2 ?v3))))) :named a17))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_llist$) (?v2 A_b_prod_llist$) (?v3 A_llist$)) (=> (= (llength$b ?v0) (llength$ ?v1)) (= (lzip$f (lappend$b ?v0 ?v2) (lappend$ ?v1 ?v3)) (lappend$j (lzip$f ?v0 ?v1) (lzip$f ?v2 ?v3))))) :named a18))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 B_llist$) (?v2 A_b_prod_llist$) (?v3 B_llist$)) (=> (= (llength$b ?v0) (llength$a ?v1)) (= (lzip$g (lappend$b ?v0 ?v2) (lappend$a ?v1 ?v3)) (lappend$k (lzip$g ?v0 ?v1) (lzip$g ?v2 ?v3))))) :named a19))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$) (?v3 A_b_prod_llist$)) (=> (= (llength$b ?v0) (llength$b ?v1)) (= (lzip$h (lappend$b ?v0 ?v2) (lappend$b ?v1 ?v3)) (lappend$l (lzip$h ?v0 ?v1) (lzip$h ?v2 ?v3))))) :named a20))
(assert (! (forall ((?v0 A_llist$) (?v1 B_b_prod_llist$) (?v2 A_llist$) (?v3 B_b_prod_llist$)) (=> (= (llength$ ?v0) (llength$c ?v1)) (= (lzip$i (lappend$ ?v0 ?v2) (lappend$c ?v1 ?v3)) (lappend$h (lzip$i ?v0 ?v1) (lzip$i ?v2 ?v3))))) :named a21))
(assert (! (= (llength$b (lzip$ xs$ ys$)) (llength$b (lappend$b us$ vs$))) :named a22))
(assert (! (less_eq$ (llength$b us$) (llength$ xs$)) :named a23))
(assert (! (less_eq$ (llength$b us$) (llength$a ys$)) :named a24))
(assert (! (less_eq$ (llength$b us$) (min$ (llength$ xs$) (llength$a ys$))) :named a25))
(assert (! (= (llength$ (ltake$ (llength$b us$) xs$)) (llength$a (ltake$a (llength$b us$) ys$))) :named a26))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (llength$ (lappend$ ?v0 ?v1)) (plus$ (llength$ ?v0) (llength$ ?v1)))) :named a27))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (llength$a (lappend$a ?v0 ?v1)) (plus$ (llength$a ?v0) (llength$a ?v1)))) :named a28))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (llength$b (lappend$b ?v0 ?v1)) (plus$ (llength$b ?v0) (llength$b ?v1)))) :named a29))
(assert (! (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$)) (= (llength$c (lappend$c ?v0 ?v1)) (plus$ (llength$c ?v0) (llength$c ?v1)))) :named a30))
(assert (! (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$)) (= (llength$d (lappend$d ?v0 ?v1)) (plus$ (llength$d ?v0) (llength$d ?v1)))) :named a31))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (llength$e (lappend$e ?v0 ?v1)) (plus$ (llength$e ?v0) (llength$e ?v1)))) :named a32))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$) (?v1 B_a_b_prod_prod_llist$)) (= (llength$f (lappend$f ?v0 ?v1)) (plus$ (llength$f ?v0) (llength$f ?v1)))) :named a33))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$)) (= (llength$g (lappend$g ?v0 ?v1)) (plus$ (llength$g ?v0) (llength$g ?v1)))) :named a34))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$) (?v1 A_b_b_prod_prod_llist$)) (= (llength$h (lappend$h ?v0 ?v1)) (plus$ (llength$h ?v0) (llength$h ?v1)))) :named a35))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$) (?v1 A_b_a_prod_prod_llist$)) (= (llength$i (lappend$i ?v0 ?v1)) (plus$ (llength$i ?v0) (llength$i ?v1)))) :named a36))
(assert (! (= us$ (lzip$ (ltake$ (llength$b us$) xs$) (ltake$a (llength$b us$) ys$))) :named a37))
(assert (! (=> (lfinite$ us$) (= vs$ (lzip$ (ldrop$ (llength$b us$) xs$) (ldrop$a (llength$b us$) ys$)))) :named a38))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (llength$e (lzip$a ?v0 ?v1)) (min$ (llength$ ?v0) (llength$ ?v1)))) :named a39))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$)) (= (llength$d (lzip$b ?v0 ?v1)) (min$ (llength$a ?v0) (llength$ ?v1)))) :named a40))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (llength$c (lzip$c ?v0 ?v1)) (min$ (llength$a ?v0) (llength$a ?v1)))) :named a41))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$)) (= (llength$b (lzip$ ?v0 ?v1)) (min$ (llength$ ?v0) (llength$a ?v1)))) :named a42))
(assert (! (forall ((?v0 A_llist$) (?v1 A_b_prod_llist$)) (= (llength$g (lzip$d ?v0 ?v1)) (min$ (llength$ ?v0) (llength$b ?v1)))) :named a43))
(assert (! (forall ((?v0 B_llist$) (?v1 A_b_prod_llist$)) (= (llength$f (lzip$e ?v0 ?v1)) (min$ (llength$a ?v0) (llength$b ?v1)))) :named a44))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_llist$)) (= (llength$j (lzip$f ?v0 ?v1)) (min$ (llength$b ?v0) (llength$ ?v1)))) :named a45))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 B_llist$)) (= (llength$k (lzip$g ?v0 ?v1)) (min$ (llength$b ?v0) (llength$a ?v1)))) :named a46))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (llength$l (lzip$h ?v0 ?v1)) (min$ (llength$b ?v0) (llength$b ?v1)))) :named a47))
(assert (! (forall ((?v0 A_llist$) (?v1 B_b_prod_llist$)) (= (llength$h (lzip$i ?v0 ?v1)) (min$ (llength$ ?v0) (llength$c ?v1)))) :named a48))
(assert (! (= (lappend$b us$ vs$) (lzip$ (lappend$ (ltake$ (llength$b us$) xs$) (ldrop$ (llength$b us$) xs$)) (lappend$a (ltake$a (llength$b us$) ys$) (ldrop$a (llength$b us$) ys$)))) :named a49))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (llcp$ ?v0) ?v0) (llength$ ?v0)) :pattern ((llcp$ ?v0)))) :named a50))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$a (llcp$a ?v0) ?v0) (llength$a ?v0)) :pattern ((llcp$a ?v0)))) :named a51))
(assert (! (forall ((?v0 A_b_prod_llist$)) (! (= (fun_app$b (llcp$b ?v0) ?v0) (llength$b ?v0)) :pattern ((llcp$b ?v0)))) :named a52))
(assert (! (forall ((?v0 B_b_prod_llist$)) (! (= (fun_app$c (llcp$c ?v0) ?v0) (llength$c ?v0)) :pattern ((llcp$c ?v0)))) :named a53))
(assert (! (forall ((?v0 B_a_prod_llist$)) (! (= (fun_app$d (llcp$d ?v0) ?v0) (llength$d ?v0)) :pattern ((llcp$d ?v0)))) :named a54))
(assert (! (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$e (llcp$e ?v0) ?v0) (llength$e ?v0)) :pattern ((llcp$e ?v0)))) :named a55))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$)) (! (= (fun_app$f (llcp$f ?v0) ?v0) (llength$f ?v0)) :pattern ((llcp$f ?v0)))) :named a56))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$)) (! (= (fun_app$g (llcp$g ?v0) ?v0) (llength$g ?v0)) :pattern ((llcp$g ?v0)))) :named a57))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$)) (! (= (fun_app$h (llcp$h ?v0) ?v0) (llength$h ?v0)) :pattern ((llcp$h ?v0)))) :named a58))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$)) (! (= (fun_app$i (llcp$i ?v0) ?v0) (llength$i ?v0)) :pattern ((llcp$i ?v0)))) :named a59))
(assert (! (= xs$ (lappend$ (ltake$ (llength$b us$) xs$) (ldrop$ (llength$b us$) xs$))) :named a60))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$a (lappend$ ?v0 ?v1)) (and (lfinite$a ?v0) (lfinite$a ?v1)))) :named a61))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (lfinite$b (lappend$a ?v0 ?v1)) (and (lfinite$b ?v0) (lfinite$b ?v1)))) :named a62))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (lfinite$ (lappend$b ?v0 ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1)))) :named a63))
(assert (! (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$)) (= (lfinite$c (lappend$c ?v0 ?v1)) (and (lfinite$c ?v0) (lfinite$c ?v1)))) :named a64))
(assert (! (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$)) (= (lfinite$d (lappend$d ?v0 ?v1)) (and (lfinite$d ?v0) (lfinite$d ?v1)))) :named a65))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lfinite$e (lappend$e ?v0 ?v1)) (and (lfinite$e ?v0) (lfinite$e ?v1)))) :named a66))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$) (?v1 B_a_b_prod_prod_llist$)) (= (lfinite$f (lappend$f ?v0 ?v1)) (and (lfinite$f ?v0) (lfinite$f ?v1)))) :named a67))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$)) (= (lfinite$g (lappend$g ?v0 ?v1)) (and (lfinite$g ?v0) (lfinite$g ?v1)))) :named a68))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$) (?v1 A_b_b_prod_prod_llist$)) (= (lfinite$h (lappend$h ?v0 ?v1)) (and (lfinite$h ?v0) (lfinite$h ?v1)))) :named a69))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$) (?v1 A_b_a_prod_prod_llist$)) (= (lfinite$i (lappend$i ?v0 ?v1)) (and (lfinite$i ?v0) (lfinite$i ?v1)))) :named a70))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_llist$)) (= (ldrop$ ?v0 (ldrop$ ?v1 ?v2)) (ldrop$ (plus$ ?v0 ?v1) ?v2))) :named a71))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 B_llist$)) (= (ldrop$a ?v0 (ldrop$a ?v1 ?v2)) (ldrop$a (plus$ ?v0 ?v1) ?v2))) :named a72))
(check-sat)
;(get-unsat-core)
