; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 404
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun xs$ () A_list$)
(declare-fun ys$ () A_list$)
(declare-fun map$ (A_a_fun$ A_list$) A_list$)
(declare-fun set$ (A_list$) A_set$)
(declare-fun lmap$ (A_a_fun$ A_llist$) A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun append$ (A_list$ A_list$) A_list$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lappend$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llist_of$ (A_list$) A_llist$)
(assert (! (not (= (= (llist_of$ xs$) (llist_of$ ys$)) (= xs$ ys$))) :named a0))
(assert (! (forall ((?v0 A_list$)) (lfinite$ (llist_of$ ?v0))) :named a1))
(assert (! (forall ((?v0 A_list$)) (= (lhd$ (llist_of$ ?v0)) (hd$ ?v0))) :named a2))
(assert (! (forall ((?v0 A_list$)) (= (lnull$ (llist_of$ ?v0)) (= ?v0 nil$))) :named a3))
(assert (! (forall ((?v0 A_list$)) (= (ltl$ (llist_of$ ?v0)) (llist_of$ (tl$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_list$)) (= (lset$ (llist_of$ ?v0)) (set$ ?v0))) :named a5))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_list$)) (= (lmap$ ?v0 (llist_of$ ?v1)) (llist_of$ (map$ ?v0 ?v1)))) :named a6))
(assert (! (forall ((?v0 A_list$)) (= (= (llist_of$ ?v0) lNil$) (= ?v0 nil$))) :named a7))
(assert (! (= (llist_of$ nil$) lNil$) :named a8))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (fun_app$ (lappend$ (llist_of$ ?v0)) (llist_of$ ?v1)) (llist_of$ (append$ ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 A_list$) (?v1 A$) (?v2 A_llist$)) (= (= (llist_of$ ?v0) (lCons$ ?v1 ?v2)) (exists ((?v3 A_list$)) (and (= ?v0 (cons$ ?v1 ?v3)) (= ?v2 (llist_of$ ?v3)))))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (= (llist_of$ (cons$ ?v0 ?v1)) (lCons$ ?v0 (llist_of$ ?v1))) :pattern ((cons$ ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$ (fun_app$ (lappend$ ?v0) ?v1))) (or (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$ (fun_app$ (lappend$ ?v0) ?v1)) (and (lnull$ ?v0) (lnull$ ?v1)))) :named a14))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lnull$ (lmap$ ?v0 ?v1)) (lnull$ ?v1))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1)) ?v2) (lCons$ ?v0 (fun_app$ (lappend$ ?v1) ?v2))) :pattern ((fun_app$ (lappend$ (lCons$ ?v0 ?v1)) ?v2)))) :named a16))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (lappend$ ?v0) lNil$) ?v0) :pattern ((lappend$ ?v0)))) :named a17))
(check-sat)
;(get-unsat-core)
