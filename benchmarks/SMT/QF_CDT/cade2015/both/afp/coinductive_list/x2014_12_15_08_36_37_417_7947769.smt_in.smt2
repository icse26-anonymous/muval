; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 448
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort D$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_d_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort C_bool_fun$ 0)
(declare-sort D_bool_fun$ 0)
(declare-sort C_llist_set$ 0)
(declare-sort D_llist_set$ 0)
(declare-sort A_c_llist_fun$ 0)
(declare-sort B_d_llist_fun$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort C_d_bool_fun_fun$ 0)
(declare-sort Bool_bool_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_c_llist_fun_fun$ 0)
(declare-sort B_b_fun_b_d_llist_fun_fun$ 0)
(declare-sort A_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun$ 0)
(declare-sort B_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun$ 0)
(declare-sort A_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun$ 0)
(declare-sort B_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun$ 0)
(declare-sort A_c_fun_a_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun_fun$ 0)
(declare-sort B_d_fun_b_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun_fun$ 0)
(declare-codatatypes () ((C_llist$ (lNil$) (lCons$ (lhd$ C$) (ltl$ C_llist$)))
  (D_llist$ (lNil$a) (lCons$a (lhd$a D$) (ltl$a D_llist$)))))
(declare-fun a$ () A_b_bool_fun_fun$)
(declare-fun b$ () C_d_bool_fun_fun$)
(declare-fun x$ () A$)
(declare-fun y$ () B$)
(declare-fun uu$ () Bool_bool_bool_fun_fun$)
(declare-fun xa$ () A$)
(declare-fun ya$ () B$)
(declare-fun lHD1$ () A_c_fun$)
(declare-fun lHD2$ () B_d_fun$)
(declare-fun lTL1$ () A_a_fun$)
(declare-fun lTL2$ () B_b_fun$)
(declare-fun lnull$ (C_llist$) Bool)
(declare-fun mORE1$ () A_c_llist_fun$)
(declare-fun mORE2$ () B_d_llist_fun$)
(declare-fun sTOP1$ () A_bool_fun$)
(declare-fun sTOP2$ () B_bool_fun$)
(declare-fun lnull$a (D_llist$) Bool)
(declare-fun member$ (C_llist$ C_llist_set$) Bool)
(declare-fun fun_app$ (Bool_bool_fun$ Bool) Bool)
(declare-fun member$a (D_llist$ D_llist_set$) Bool)
(declare-fun rel_fun$ (A_b_bool_fun_fun$ Bool_bool_bool_fun_fun$ A_bool_fun$ B_bool_fun$) Bool)
(declare-fun fun_app$a (Bool_bool_bool_fun_fun$ Bool) Bool_bool_fun$)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun fun_app$c (B_bool_fun$ B$) Bool)
(declare-fun fun_app$d (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$e (A_c_llist_fun$ A$) C_llist$)
(declare-fun fun_app$f (A_a_fun_a_c_llist_fun_fun$ A_a_fun$) A_c_llist_fun$)
(declare-fun fun_app$g (A_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun$ A_c_llist_fun$) A_a_fun_a_c_llist_fun_fun$)
(declare-fun fun_app$h (A_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun$ A_bool_fun$) A_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun$)
(declare-fun fun_app$i (A_c_fun_a_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun_fun$ A_c_fun$) A_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun$)
(declare-fun fun_app$j (B_d_llist_fun$ B$) D_llist$)
(declare-fun fun_app$k (B_b_fun_b_d_llist_fun_fun$ B_b_fun$) B_d_llist_fun$)
(declare-fun fun_app$l (B_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun$ B_d_llist_fun$) B_b_fun_b_d_llist_fun_fun$)
(declare-fun fun_app$m (B_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun$ B_bool_fun$) B_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun$)
(declare-fun fun_app$n (B_d_fun_b_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun_fun$ B_d_fun$) B_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun$)
(declare-fun fun_app$o (D_bool_fun$ D$) Bool)
(declare-fun fun_app$p (C_d_bool_fun_fun$ C$) D_bool_fun$)
(declare-fun fun_app$q (C_bool_fun$ C$) Bool)
(declare-fun iS_LNIL1$ () A_bool_fun$)
(declare-fun iS_LNIL2$ () B_bool_fun$)
(declare-fun rel_fun$a (A_b_bool_fun_fun$ A_b_bool_fun_fun$ A_a_fun$ B_b_fun$) Bool)
(declare-fun rel_fun$b (A_b_bool_fun_fun$ C_d_bool_fun_fun$ A_c_fun$ B_d_fun$) Bool)
(declare-fun corec_llist$ (A_bool_fun$) A_c_fun_a_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun_fun$)
(declare-fun corec_llist$a (B_bool_fun$) B_d_fun_b_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun_fun$)
(assert (! (forall ((?v0 Bool) (?v1 Bool)) (! (= (fun_app$ (fun_app$a uu$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uu$ ?v0) ?v1)))) :named a0))
(assert (! (not (= (fun_app$b sTOP1$ xa$) (fun_app$c sTOP2$ ya$))) :named a1))
(assert (! (fun_app$c (fun_app$d a$ xa$) ya$) :named a2))
(assert (! (rel_fun$ a$ uu$ sTOP1$ sTOP2$) :named a3))
(assert (! (fun_app$c (fun_app$d a$ x$) y$) :named a4))
(assert (! (not (lnull$ (fun_app$e (fun_app$f (fun_app$g (fun_app$h (fun_app$i (corec_llist$ iS_LNIL1$) lHD1$) sTOP1$) mORE1$) lTL1$) xa$))) :named a5))
(assert (! (not (lnull$a (fun_app$j (fun_app$k (fun_app$l (fun_app$m (fun_app$n (corec_llist$a iS_LNIL2$) lHD2$) sTOP2$) mORE2$) lTL2$) ya$))) :named a6))
(assert (! (fun_app$o (fun_app$p b$ (lhd$ (fun_app$e (fun_app$f (fun_app$g (fun_app$h (fun_app$i (corec_llist$ iS_LNIL1$) lHD1$) sTOP1$) mORE1$) lTL1$) xa$))) (lhd$a (fun_app$j (fun_app$k (fun_app$l (fun_app$m (fun_app$n (corec_llist$a iS_LNIL2$) lHD2$) sTOP2$) mORE2$) lTL2$) ya$))) :named a7))
(assert (! (rel_fun$ a$ uu$ iS_LNIL1$ iS_LNIL2$) :named a8))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_c_fun$) (?v2 A_bool_fun$) (?v3 A_c_llist_fun$) (?v4 A_a_fun$) (?v5 A$)) (= (not (lnull$ (fun_app$e (fun_app$f (fun_app$g (fun_app$h (fun_app$i (corec_llist$ ?v0) ?v1) ?v2) ?v3) ?v4) ?v5))) (not (fun_app$b ?v0 ?v5)))) :named a9))
(assert (! (forall ((?v0 B_bool_fun$) (?v1 B_d_fun$) (?v2 B_bool_fun$) (?v3 B_d_llist_fun$) (?v4 B_b_fun$) (?v5 B$)) (= (not (lnull$a (fun_app$j (fun_app$k (fun_app$l (fun_app$m (fun_app$n (corec_llist$a ?v0) ?v1) ?v2) ?v3) ?v4) ?v5))) (not (fun_app$c ?v0 ?v5)))) :named a10))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_c_fun$) (?v2 A_bool_fun$) (?v3 A_c_llist_fun$) (?v4 A_a_fun$) (?v5 A$)) (= (lnull$ (fun_app$e (fun_app$f (fun_app$g (fun_app$h (fun_app$i (corec_llist$ ?v0) ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$b ?v0 ?v5))) :named a11))
(assert (! (forall ((?v0 B_bool_fun$) (?v1 B_d_fun$) (?v2 B_bool_fun$) (?v3 B_d_llist_fun$) (?v4 B_b_fun$) (?v5 B$)) (= (lnull$a (fun_app$j (fun_app$k (fun_app$l (fun_app$m (fun_app$n (corec_llist$a ?v0) ?v1) ?v2) ?v3) ?v4) ?v5)) (fun_app$c ?v0 ?v5))) :named a12))
(assert (! (rel_fun$a a$ a$ lTL1$ lTL2$) :named a13))
(assert (! (rel_fun$b a$ b$ lHD1$ lHD2$) :named a14))
(assert (! (forall ((?v0 C_llist$) (?v1 C_bool_fun$)) (=> (and (=> (or (lnull$ ?v0) (not (fun_app$q ?v1 (lhd$ ?v0)))) false) (=> (and (not (lnull$ ?v0)) (fun_app$q ?v1 (lhd$ ?v0))) false)) false)) :named a15))
(assert (! (forall ((?v0 D_llist$) (?v1 D_bool_fun$)) (=> (and (=> (or (lnull$a ?v0) (not (fun_app$o ?v1 (lhd$a ?v0)))) false) (=> (and (not (lnull$a ?v0)) (fun_app$o ?v1 (lhd$a ?v0))) false)) false)) :named a16))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a17))
(assert (! (forall ((?v0 C_llist$) (?v1 D_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$a ?v1))) false)) false)) :named a18))
(assert (! (forall ((?v0 D_llist$) (?v1 C_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$ ?v1))) false)) false)) :named a19))
(assert (! (forall ((?v0 D_llist$) (?v1 D_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a20))
(assert (! (forall ((?v0 C_llist_set$)) (=> (and (=> (forall ((?v1 C_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 C_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a21))
(assert (! (forall ((?v0 D_llist_set$)) (=> (and (=> (forall ((?v1 D_llist$)) (=> (member$a ?v1 ?v0) (lnull$a ?v1))) false) (=> (not (forall ((?v1 D_llist$)) (=> (member$a ?v1 ?v0) (lnull$a ?v1)))) false)) false)) :named a22))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a23))
(assert (! (forall ((?v0 D_llist$) (?v1 D_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a24))
(assert (! (forall ((?v0 C_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)) :named a25))
(assert (! (forall ((?v0 D_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false)) :named a26))
(check-sat)
;(get-unsat-core)
