; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 544
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_set_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_set_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun f$ () A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun p$ () A_bool_fun$)
(declare-fun xsa$ () A_llist$)
(declare-fun fixp$ (A_llist_a_llist_fun_set_a_llist_a_llist_fun_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun_fun$)
(declare-fun lSup$ () A_llist_set_a_llist_fun$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_lub$ (A_llist_set_a_llist_fun$) A_llist_a_llist_fun_set_a_llist_a_llist_fun_fun$)
(declare-fun fun_ord$ (A_llist_a_llist_bool_fun_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun_a_llist_a_llist_fun_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$b (A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun_fun$ A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$d (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$e (A_llist_set_a_llist_fun$ A_llist_set$) A_llist$)
(declare-fun fun_app$f (A_bool_fun$ A$) Bool)
(declare-fun fun_app$g (A_llist_a_llist_fun_bool_fun$ A_llist_a_llist_fun$) Bool)
(declare-fun fun_app$h (A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_fun_bool_fun$)
(declare-fun ltakeWhile$ (A_bool_fun$) A_llist_a_llist_fun$)
(assert (! (not (and (= (lnull$ (fun_app$ (ltakeWhile$ p$) xsa$)) (lnull$ (fun_app$ (fun_app$a (fun_app$b (fixp$ (fun_lub$ lSup$)) (fun_ord$ lprefix$)) f$) xsa$))) (=> (and (not (lnull$ (fun_app$ (ltakeWhile$ p$) xsa$))) (not (lnull$ (fun_app$ (fun_app$a (fun_app$b (fixp$ (fun_lub$ lSup$)) (fun_ord$ lprefix$)) f$) xsa$)))) (and (= (lhd$ (fun_app$ (ltakeWhile$ p$) xsa$)) (lhd$ (fun_app$ (fun_app$a (fun_app$b (fixp$ (fun_lub$ lSup$)) (fun_ord$ lprefix$)) f$) xsa$))) (exists ((?v0 A_llist$)) (and (= (ltl$ (fun_app$ (ltakeWhile$ p$) xsa$)) (fun_app$ (ltakeWhile$ p$) ?v0)) (= (ltl$ (fun_app$ (fun_app$a (fun_app$b (fixp$ (fun_lub$ lSup$)) (fun_ord$ lprefix$)) f$) xsa$)) (fun_app$ (fun_app$a (fun_app$b (fixp$ (fun_lub$ lSup$)) (fun_ord$ lprefix$)) f$) ?v0)))))))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (fun_app$c (fun_app$d lprefix$ ?v0) ?v0)) :named a1))
(assert (! (forall ((?v0 A_llist$)) (fun_app$c (fun_app$d lprefix$ ?v0) ?v0)) :named a2))
(assert (! (forall ((?v0 A_llist_set$)) (= (lnull$ (fun_app$e lSup$ ?v0)) (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))))) :named a3))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (not (lnull$ (fun_app$ (ltakeWhile$ ?v0) ?v1))) (and (not (lnull$ ?v1)) (fun_app$f ?v0 (lhd$ ?v1))))) :named a4))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lnull$ (fun_app$ (ltakeWhile$ ?v0) ?v1)) (or (lnull$ ?v1) (not (fun_app$f ?v0 (lhd$ ?v1)))))) :named a5))
(assert (! (forall ((?v0 A_llist_set$)) (= (not (lnull$ (fun_app$e lSup$ ?v0))) (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)))))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (lnull$ ?v0) (not (fun_app$f ?v1 (lhd$ ?v0)))) false) (=> (and (not (lnull$ ?v0)) (fun_app$f ?v1 (lhd$ ?v0))) false)) false)) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a8))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (=> (not (lnull$ ?v0)) (and (not (lnull$ ?v1)) (and (= (lhd$ ?v0) (lhd$ ?v1)) (fun_app$c (fun_app$d lprefix$ (ltl$ ?v0)) (ltl$ ?v1))))) (fun_app$c (fun_app$d lprefix$ ?v0) ?v1))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a11))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)) :named a12))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist_a_llist_fun$)) (=> (and (fun_app$g (fun_app$h (fun_ord$ lprefix$) ?v0) ?v1) (fun_app$g (fun_app$h (fun_ord$ lprefix$) ?v1) ?v2)) (fun_app$g (fun_app$h (fun_ord$ lprefix$) ?v0) ?v2))) :named a13))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_a_llist_fun$)) (=> (and (fun_app$g (fun_app$h (fun_ord$ lprefix$) ?v0) ?v1) (fun_app$g (fun_app$h (fun_ord$ lprefix$) ?v1) ?v0)) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (lnull$ ?v0) (lnull$ ?v1)) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (or (lnull$ ?v0) (not (fun_app$f ?v1 (lhd$ ?v0)))) (lnull$ (fun_app$ (ltakeWhile$ ?v1) ?v0)))) :named a16))
(assert (! (forall ((?v0 A_llist_set$)) (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))) (lnull$ (fun_app$e lSup$ ?v0)))) :named a17))
(check-sat)
;(get-unsat-core)
