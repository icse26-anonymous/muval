; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 642
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun a$ () A$)
(declare-fun p$ (A$) Bool)
(declare-fun ma$ () Nat$)
(declare-fun na$ () Nat$)
(declare-fun xs$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist$ Nat$) A$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun lfilter$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$b (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$c (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun less_eq$a (Enat$ Enat$) Bool)
(declare-fun ldistinct$ (A_llist$) Bool)
(declare-fun lstrict_prefix$ (A_llist$) A_llist_bool_fun$)
(assert (! (not (= ma$ na$)) :named a0))
(assert (! (= (lnth$ xs$ ma$) a$) :named a1))
(assert (! (= (lnth$ xs$ na$) a$) :named a2))
(assert (! (less_eq$ na$ ma$) :named a3))
(assert (! (less$ (enat$ ma$) (llength$ xs$)) :named a4))
(assert (! (less$ (enat$ na$) (llength$ xs$)) :named a5))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lfilter$ ?v0 (lfilter$ ?v0 ?v1)) (lfilter$ ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (less_eq$ ?v3 ?v4) (fun_app$ (fun_app$a ?v0 ?v3) ?v4))) (=> (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (fun_app$ (fun_app$a ?v0 ?v2) ?v1))) (fun_app$ (fun_app$a ?v0 ?v2) ?v1))) :named a7))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (less_eq$a ?v3 ?v4) (fun_app$b (fun_app$c ?v0 ?v3) ?v4))) (=> (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (fun_app$b (fun_app$c ?v0 ?v2) ?v1))) (fun_app$b (fun_app$c ?v0 ?v2) ?v1))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (ldistinct$ ?v0) (ldistinct$ (lfilter$ ?v1 ?v0)))) :named a9))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (forall ((?v2 A_llist$)) (=> (forall ((?v3 A_llist$)) (=> (fun_app$d (lstrict_prefix$ ?v3) ?v2) (fun_app$d ?v0 ?v3))) (fun_app$d ?v0 ?v2))) (fun_app$d ?v0 ?v1))) :named a10))
(assert (! (p$ a$) :named a11))
(assert (! (forall ((?v0 A_llist$)) (= (ldistinct$ ?v0) (forall ((?v1 Nat$) (?v2 Nat$)) (=> (and (less$ (enat$ ?v1) (llength$ ?v0)) (and (less$ (enat$ ?v2) (llength$ ?v0)) (not (= ?v1 ?v2)))) (not (= (lnth$ ?v0 ?v1) (lnth$ ?v0 ?v2))))))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$d (lstrict_prefix$ ?v0) ?v1) (less$ (llength$ ?v0) (llength$ ?v1)))) :named a13))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (less_eq$a (llength$ (lfilter$ ?v0 ?v1)) (llength$ ?v1))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less_eq$a (enat$ ?v0) (enat$ ?v1)) (less_eq$ ?v0 ?v1)) :pattern ((less_eq$a (enat$ ?v0) (enat$ ?v1))))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 Nat$)) (less_eq$ ?v0 ?v0)) :named a17))
(assert (! (forall ((?v0 Enat$)) (less_eq$a ?v0 ?v0)) :named a18))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (=> (forall ((?v2 Nat$)) (=> (less$ ?v0 (enat$ ?v2)) (less$ ?v1 (enat$ ?v2)))) (less_eq$a ?v1 ?v0))) :named a19))
(check-sat)
;(get-unsat-core)
