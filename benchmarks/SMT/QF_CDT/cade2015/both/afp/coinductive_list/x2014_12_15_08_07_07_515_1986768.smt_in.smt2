; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 52
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun x$ () A$)
(declare-fun uu$ (A_set$) A_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun uua$ () A_llist_a_fun$)
(declare-fun uub$ () A_llist_a_llist_fun$)
(declare-fun lmap$ (A_a_fun$) A_llist_a_llist_fun$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun image$ (A_a_fun$ A_set$) A_set$)
(declare-fun lnull$ () A_llist_bool_fun$)
(declare-fun lsetp$ (A_llist$) A_bool_fun$)
(declare-fun insert$ (A$ A_set$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun less_eq$ (A_set$ A_set$) Bool)
(declare-fun fun_app$a (A_llist_a_fun$ A_llist$) A$)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun fun_app$c (A_a_fun$ A$) A$)
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$e (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$f (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$g (A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ A_llist_a_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun pred_llist$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun unfold_llist$ (A_llist_bool_fun$) A_llist_a_fun_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uub$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$ uub$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a uua$ ?v0) (lhd$ ?v0)) :pattern ((fun_app$a uua$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$b (uu$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$b (uu$ ?v0) ?v1)))) :named a2))
(assert (! (not (member$ x$ (lset$ xs$))) :named a3))
(assert (! (fun_app$b (lsetp$ xs$) x$) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$ ?v0 (lset$ ?v1)) (fun_app$b (lsetp$ ?v1) ?v0))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (= (fun_app$b (lsetp$ ?v0) ?v1) (or (exists ((?v2 A$) (?v3 A_llist$)) (and (= ?v0 (lCons$ ?v2 ?v3)) (= ?v1 ?v2))) (exists ((?v2 A_llist$) (?v3 A$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$b (lsetp$ ?v2) ?v3))))))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (fun_app$b (lsetp$ ?v0) ?v1) (and (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v0 (lCons$ ?v2 ?v3)) (= ?v1 ?v2)) false)) (forall ((?v2 A_llist$) (?v3 A$) (?v4 A$)) (=> (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$b (lsetp$ ?v2) ?v3))) false)))) false)) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A$) (?v2 A$)) (=> (fun_app$b (lsetp$ ?v0) ?v1) (fun_app$b (lsetp$ (lCons$ ?v2 ?v0)) ?v1))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (fun_app$b (lsetp$ (lCons$ ?v0 ?v1)) ?v0)) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$ ?v0 (lset$ (ltl$ ?v1))) (member$ ?v0 (lset$ ?v1)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$ ?v4 (lset$ ?v0)) (and (member$ ?v5 (lset$ ?v1)) (= (fun_app$c ?v2 ?v4) (fun_app$c ?v3 ?v5)))) (= ?v4 ?v5))) (= (fun_app$ (lmap$ ?v2) ?v0) (fun_app$ (lmap$ ?v3) ?v1))) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 (lset$ ?v0)) (= (fun_app$c ?v1 ?v3) (fun_app$c ?v2 ?v3)))) (= (fun_app$ (lmap$ ?v1) ?v0) (fun_app$ (lmap$ ?v2) ?v0)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 (lset$ ?v1)) (= (fun_app$c ?v2 ?v4) (fun_app$c ?v3 ?v4))))) (= (fun_app$ (lmap$ ?v2) ?v0) (fun_app$ (lmap$ ?v3) ?v1)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A$) (?v4 A_llist$)) (fun_app$d (fun_app$e ?v2 ?v3) (lCons$ ?v3 ?v4))) (forall ((?v3 A$) (?v4 A_llist$) (?v5 A$)) (=> (and (member$ ?v5 (lset$ ?v4)) (fun_app$d (fun_app$e ?v2 ?v5) ?v4)) (fun_app$d (fun_app$e ?v2 ?v5) (lCons$ ?v3 ?v4)))))) (fun_app$d (fun_app$e ?v2 ?v0) ?v1))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$ ?v0 (lset$ ?v3))) false)))) false)) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$d ?v2 (lCons$ ?v0 ?v3))) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v4)) (fun_app$d ?v2 ?v4)) (fun_app$d ?v2 (lCons$ ?v3 ?v4)))))) (fun_app$d ?v2 ?v1))) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$d ?v2 (lCons$ ?v0 ?v3))) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v4)) (and (not (= ?v0 ?v3)) (fun_app$d ?v2 ?v4))) (fun_app$d ?v2 (lCons$ ?v3 ?v4)))))) (fun_app$d ?v2 ?v1))) :named a17))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a18))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (ltl$ (fun_app$ (lmap$ ?v0) ?v1)) (fun_app$ (lmap$ ?v0) (ltl$ ?v1)))) :named a19))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (lmap$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ (fun_app$c ?v0 ?v1) (fun_app$ (lmap$ ?v0) ?v2))) :pattern ((fun_app$ (lmap$ ?v0) (lCons$ ?v1 ?v2))))) :named a20))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (fun_app$ (lmap$ ?v0) ?v1) (lCons$ ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v1 (lCons$ ?v4 ?v5)) (and (= ?v2 (fun_app$c ?v0 ?v4)) (= ?v3 (fun_app$ (lmap$ ?v0) ?v5))))))) :named a21))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (ltl$ (lCons$ ?v0 ?v1)) ?v1) :pattern ((lCons$ ?v0 ?v1)))) :named a22))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (member$ ?v0 (lset$ (lCons$ ?v0 ?v1)))) :named a23))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (member$ ?v0 (lset$ (lCons$ ?v0 ?v1)))) :named a24))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ (lCons$ ?v2 ?v1))))) :named a25))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ (lCons$ ?v2 ?v1))))) :named a26))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$ ?v0 (lset$ ?v3))) false)))) false)) :named a27))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$d (pred_llist$ ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$b ?v0 ?v1) (fun_app$d (pred_llist$ ?v0) ?v2))) :pattern ((fun_app$d (pred_llist$ ?v0) (lCons$ ?v1 ?v2))))) :named a28))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lset$ (lCons$ ?v0 ?v1)) (insert$ ?v0 (lset$ ?v1))) :pattern ((lCons$ ?v0 ?v1)))) :named a29))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lset$ (lCons$ ?v0 ?v1)) (insert$ ?v0 (lset$ ?v1))) :pattern ((lCons$ ?v0 ?v1)))) :named a30))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_fun$)) (=> (not (fun_app$d lnull$ ?v0)) (= (ltl$ (fun_app$ (lmap$ ?v1) ?v0)) (fun_app$ (lmap$ ?v1) (ltl$ ?v0))))) :named a31))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (not (fun_app$d lnull$ ?v0)) (member$ ?v1 (lset$ (ltl$ ?v0)))) (member$ ?v1 (lset$ ?v0)))) :named a32))
(assert (! (forall ((?v0 A_llist$)) (less_eq$ (lset$ (ltl$ ?v0)) (lset$ ?v0))) :named a33))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lset$ (fun_app$ (lmap$ ?v0) ?v1)) (image$ ?v0 (lset$ ?v1)))) :named a34))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_a_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$) (?v4 A$) (?v5 A_llist$)) (= (= (fun_app$ (fun_app$f (fun_app$g (unfold_llist$ ?v0) ?v1) ?v2) ?v3) (lCons$ ?v4 ?v5)) (and (not (fun_app$d ?v0 ?v3)) (and (= ?v4 (fun_app$a ?v1 ?v3)) (= ?v5 (fun_app$ (fun_app$f (fun_app$g (unfold_llist$ ?v0) ?v1) ?v2) (fun_app$ ?v2 ?v3))))))) :named a35))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (fun_app$d lnull$ (fun_app$ (lmap$ ?v0) ?v1)) (fun_app$d lnull$ ?v1))) :named a36))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_a_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$)) (= (fun_app$d lnull$ (fun_app$ (fun_app$f (fun_app$g (unfold_llist$ ?v0) ?v1) ?v2) ?v3)) (fun_app$d ?v0 ?v3))) :named a37))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_a_fun$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist$)) (= (not (fun_app$d lnull$ (fun_app$ (fun_app$f (fun_app$g (unfold_llist$ ?v0) ?v1) ?v2) ?v3))) (not (fun_app$d ?v0 ?v3)))) :named a38))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_fun$) (?v3 A_llist_a_llist_fun$)) (=> (fun_app$d ?v0 ?v1) (fun_app$d lnull$ (fun_app$ (fun_app$f (fun_app$g (unfold_llist$ ?v0) ?v2) ?v3) ?v1)))) :named a39))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_fun$) (?v3 A_llist_a_llist_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (not (fun_app$d lnull$ (fun_app$ (fun_app$f (fun_app$g (unfold_llist$ ?v0) ?v2) ?v3) ?v1))))) :named a40))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (fun_app$d lnull$ ?v0) false) (=> (not (fun_app$d lnull$ ?v0)) false)) false)) :named a41))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (=> (forall ((?v2 A$)) (= (fun_app$b ?v0 ?v2) (fun_app$b ?v1 ?v2))) (= (collect$ ?v0) (collect$ ?v1)))) :named a42))
(assert (! (forall ((?v0 A_set$)) (= (collect$ (uu$ ?v0)) ?v0)) :named a43))
(assert (! (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$b ?v1 ?v0))) :named a44))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (not (fun_app$d lnull$ (lCons$ ?v0 ?v1)))) :named a45))
(assert (! (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) (not (fun_app$d lnull$ ?v0)))) :named a46))
(assert (! (forall ((?v0 A_llist$)) (= (not (fun_app$d lnull$ ?v0)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))) :named a47))
(assert (! (forall ((?v0 A_llist$)) (=> (fun_app$d lnull$ ?v0) (fun_app$d lnull$ (ltl$ ?v0)))) :named a48))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_fun$) (?v3 A_llist_a_llist_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (= (fun_app$ (fun_app$f (fun_app$g (unfold_llist$ ?v0) ?v2) ?v3) ?v1) (lCons$ (fun_app$a ?v2 ?v1) (fun_app$ (fun_app$f (fun_app$g (unfold_llist$ ?v0) ?v2) ?v3) (fun_app$ ?v3 ?v1)))))) :named a49))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_fun$) (?v3 A_llist_a_llist_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (= (ltl$ (fun_app$ (fun_app$f (fun_app$g (unfold_llist$ ?v0) ?v2) ?v3) ?v1)) (fun_app$ (fun_app$f (fun_app$g (unfold_llist$ ?v0) ?v2) ?v3) (fun_app$ ?v3 ?v1))))) :named a50))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_a_fun$)) (=> (member$ ?v0 ?v1) (= (insert$ (fun_app$c ?v2 ?v0) (image$ ?v2 ?v1)) (image$ ?v2 ?v1)))) :named a51))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_set$)) (= (image$ ?v0 (insert$ ?v1 ?v2)) (insert$ (fun_app$c ?v0 ?v1) (image$ ?v0 ?v2)))) :named a52))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (less_eq$ (insert$ ?v0 ?v1) ?v2) (and (member$ ?v0 ?v2) (less_eq$ ?v1 ?v2)))) :named a53))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A$)) (=> (=> (not (member$ ?v0 ?v1)) (= ?v0 ?v2)) (member$ ?v0 (insert$ ?v2 ?v1)))) :named a54))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_set$)) (= (member$ ?v0 (insert$ ?v1 ?v2)) (or (= ?v0 ?v1) (member$ ?v0 ?v2)))) :named a55))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (= (insert$ ?v0 (insert$ ?v0 ?v1)) (insert$ ?v0 ?v1))) :named a56))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (image$ ?v1 ?v3)))) :named a57))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a58))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))) (less_eq$ ?v0 ?v1))) :named a59))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (= ?v0 ?v1) (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)))) :named a60))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (less_eq$ ?v0 ?v1) (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))))) :named a61))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (less_eq$ ?v0 ?v1) (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))))) :named a62))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (=> (forall ((?v2 A$)) (=> (fun_app$b ?v0 ?v2) (fun_app$b ?v1 ?v2))) (less_eq$ (collect$ ?v0) (collect$ ?v1)))) :named a63))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (= ?v0 ?v1) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) false)) false)) :named a64))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (= ?v0 ?v1) (less_eq$ ?v1 ?v0))) :named a65))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (= ?v0 ?v1) (less_eq$ ?v0 ?v1))) :named a66))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (member$ ?v0 ?v2))) :named a67))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (member$ ?v0 ?v2))) :named a68))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A$)) (=> (and (less_eq$ ?v0 ?v1) (and (=> (not (member$ ?v2 ?v0)) false) (=> (member$ ?v2 ?v1) false))) false)) :named a69))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A$)) (=> (and (less_eq$ ?v0 ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1))) :named a70))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A$)) (=> (and (less_eq$ ?v0 ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1))) :named a71))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2))) :named a72))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A$)) (=> (and (less_eq$ ?v0 ?v1) (not (member$ ?v2 ?v1))) (not (member$ ?v2 ?v0)))) :named a73))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A$)) (=> (and (less_eq$ ?v0 ?v1) (member$ ?v2 ?v0)) (member$ ?v2 ?v1))) :named a74))
(assert (! (forall ((?v0 A_set$)) (less_eq$ ?v0 ?v0)) :named a75))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A_set$)) (= (member$ ?v0 (image$ ?v1 ?v2)) (exists ((?v3 A$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$c ?v1 ?v3)))))) :named a76))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 ?v1) (= (fun_app$c ?v2 ?v4) (fun_app$c ?v3 ?v4))))) (= (image$ ?v2 ?v0) (image$ ?v3 ?v1)))) :named a77))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_set$) (?v2 A_bool_fun$)) (=> (exists ((?v3 A$)) (and (member$ ?v3 (image$ ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v1) (fun_app$b ?v2 (fun_app$c ?v0 ?v3)))))) :named a78))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_set$) (?v2 A_bool_fun$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 (image$ ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v1) (fun_app$b ?v2 (fun_app$c ?v0 ?v3)))))) :named a79))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A$) (?v3 A_a_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$c ?v3 ?v0))) (member$ ?v2 (image$ ?v3 ?v1)))) :named a80))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_a_fun$)) (=> (member$ ?v0 ?v1) (member$ (fun_app$c ?v2 ?v0) (image$ ?v2 ?v1)))) :named a81))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_set$)) (= (insert$ ?v0 (insert$ ?v1 ?v2)) (insert$ ?v1 (insert$ ?v0 ?v2)))) :named a82))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_set$)) (=> (and (member$ ?v0 (insert$ ?v1 ?v2)) (and (=> (= ?v0 ?v1) false) (=> (member$ ?v0 ?v2) false))) false)) :named a83))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (=> (and (member$ ?v0 ?v1) (forall ((?v2 A_set$)) (=> (and (= ?v1 (insert$ ?v0 ?v2)) (not (member$ ?v0 ?v2))) false))) false)) :named a84))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (! (=> (member$ ?v0 ?v1) (= (insert$ ?v0 ?v1) ?v1)) :pattern ((insert$ ?v0 ?v1)))) :named a85))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A$)) (=> (member$ ?v0 ?v1) (member$ ?v0 (insert$ ?v2 ?v1)))) :named a86))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (=> (member$ ?v0 ?v1) (exists ((?v2 A_set$)) (and (= ?v1 (insert$ ?v0 ?v2)) (not (member$ ?v0 ?v2)))))) :named a87))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A$) (?v3 A_set$)) (=> (and (not (member$ ?v0 ?v1)) (not (member$ ?v2 ?v3))) (= (= (insert$ ?v0 ?v1) (insert$ ?v2 ?v3)) (ite (= ?v0 ?v2) (= ?v1 ?v3) (exists ((?v4 A_set$)) (and (= ?v1 (insert$ ?v2 ?v4)) (and (not (member$ ?v2 ?v4)) (and (= ?v3 (insert$ ?v0 ?v4)) (not (member$ ?v0 ?v4)))))))))) :named a88))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (not (member$ ?v0 ?v1)) (not (member$ ?v0 ?v2))) (= (= (insert$ ?v0 ?v1) (insert$ ?v0 ?v2)) (= ?v1 ?v2)))) :named a89))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (member$ ?v0 (insert$ ?v0 ?v1))) :named a90))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_set$) (?v2 A_set$)) (= (less_eq$ (image$ ?v0 ?v1) ?v2) (forall ((?v3 A$)) (=> (member$ ?v3 ?v1) (member$ (fun_app$c ?v0 ?v3) ?v2))))) :named a91))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_fun$) (?v2 A_set$)) (= (less_eq$ ?v0 (image$ ?v1 ?v2)) (exists ((?v3 A_set$)) (and (less_eq$ ?v3 ?v2) (= ?v0 (image$ ?v1 ?v3)))))) :named a92))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_fun$) (?v2 A_set$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (member$ (fun_app$c ?v1 ?v3) ?v2))) (less_eq$ (image$ ?v1 ?v0) ?v2))) :named a93))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_fun$) (?v2 A_set$)) (=> (and (less_eq$ ?v0 (image$ ?v1 ?v2)) (forall ((?v3 A_set$)) (=> (and (less_eq$ ?v3 ?v2) (= ?v0 (image$ ?v1 ?v3))) false))) false)) :named a94))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_fun$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ (image$ ?v2 ?v0) (image$ ?v2 ?v1)))) :named a95))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ (insert$ ?v2 ?v0) (insert$ ?v2 ?v1)))) :named a96))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A$)) (=> (less_eq$ ?v0 ?v1) (less_eq$ ?v0 (insert$ ?v2 ?v1)))) :named a97))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (not (member$ ?v0 ?v1)) (= (less_eq$ ?v1 (insert$ ?v0 ?v2)) (less_eq$ ?v1 ?v2)))) :named a98))
(assert (! (forall ((?v0 A_set$) (?v1 A$)) (less_eq$ ?v0 (insert$ ?v1 ?v0))) :named a99))
(assert (! (forall ((?v0 A_set$)) (less_eq$ ?v0 ?v0)) :named a100))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 ?v1) (less_eq$ ?v2 ?v1)) (less_eq$ (insert$ ?v0 ?v2) ?v1))) :named a101))
(assert (! (forall ((?v0 A_llist$)) (=> (not (fun_app$d lnull$ ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0))) :named a102))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist$)) (=> (not (fun_app$d lnull$ ?v3)) (fun_app$d (fun_app$e ?v2 (lhd$ ?v3)) ?v3))) (forall ((?v3 A_llist$) (?v4 A$)) (=> (and (not (fun_app$d lnull$ ?v3)) (and (member$ ?v4 (lset$ (ltl$ ?v3))) (fun_app$d (fun_app$e ?v2 ?v4) (ltl$ ?v3)))) (fun_app$d (fun_app$e ?v2 ?v4) ?v3))))) (fun_app$d (fun_app$e ?v2 ?v0) ?v1))) :named a103))
(assert (! (forall ((?v0 A_llist$)) (= (fun_app$ (fun_app$f (fun_app$g (unfold_llist$ lnull$) uua$) uub$) ?v0) ?v0)) :named a104))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_fun$)) (=> (not (fun_app$d lnull$ ?v0)) (= (lhd$ (fun_app$ (lmap$ ?v1) ?v0)) (fun_app$c ?v1 (lhd$ ?v0))))) :named a105))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lhd$ (lCons$ ?v0 ?v1)) ?v0) :pattern ((lCons$ ?v0 ?v1)))) :named a106))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_a_fun$) (?v3 A_llist_a_llist_fun$)) (=> (not (fun_app$d ?v0 ?v1)) (= (lhd$ (fun_app$ (fun_app$f (fun_app$g (unfold_llist$ ?v0) ?v2) ?v3) ?v1)) (fun_app$a ?v2 ?v1)))) :named a107))
(assert (! (forall ((?v0 A_llist$)) (=> (not (fun_app$d lnull$ ?v0)) (member$ (lhd$ ?v0) (lset$ ?v0)))) :named a108))
(check-sat)
;(get-unsat-core)
