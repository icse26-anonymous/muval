; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 328
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_set_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ () A_llist_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun lSup$ () A_llist_set_a_llist_fun$)
(declare-fun lmap$ (A_a_fun$ A_llist$) A_llist$)
(declare-fun thesis$ () Bool)
(declare-fun transp$ (A_llist_a_llist_bool_fun_fun$) Bool)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun admissible$ (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_bool_fun$) Bool)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) xs$) (and (lfinite$ ?v0) (forall ((?v1 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (and (fun_app$ (fun_app$a lprefix$ ?v1) xs$) (lfinite$ ?v1))) (fun_app$ p$ ?v1))))) thesis$)) :named a1))
(assert (! (exists ((?v0 A_llist$)) (and (fun_app$ (fun_app$a lprefix$ ?v0) xs$) (and (lfinite$ ?v0) (forall ((?v1 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (and (fun_app$ (fun_app$a lprefix$ ?v1) xs$) (lfinite$ ?v1))) (fun_app$ p$ ?v1)))))) :named a2))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v0)) :named a3))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v0)) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v2) ?v1)) (or (fun_app$ (fun_app$a lprefix$ ?v0) ?v2) (fun_app$ (fun_app$a lprefix$ ?v2) ?v0)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v2)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v2))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v2)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v2))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$ (fun_app$a lprefix$ ?v0) ?v1)))) :named a10))
(assert (! (admissible$ lSup$ lprefix$ p$) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (fun_app$a lprefix$ (lappend$ ?v0 ?v1)) (lappend$ ?v0 ?v2)) (=> (lfinite$ ?v0) (fun_app$ (fun_app$a lprefix$ ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$ (lappend$ ?v0 ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1)))) :named a13))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lfinite$ (lmap$ ?v0 ?v1)) (lfinite$ ?v1))) :named a14))
(assert (! (= (lfinite$ lNil$) true) :named a15))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$ (ltl$ ?v0)) (lfinite$ ?v0))) :named a16))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (fun_app$a lprefix$ lNil$) ?v0) true) :pattern ((fun_app$ (fun_app$a lprefix$ lNil$) ?v0)))) :named a17))
(assert (! (transp$ lprefix$) :named a18))
(check-sat)
;(get-unsat-core)
