; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 527
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_a_prod_llist_set$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_a_prod_a_a_prod_fun$ 0)
(declare-sort A_a_prod_llist_bool_fun$ 0)
(declare-sort A_a_a_prod_prod_llist_set$ 0)
(declare-sort A_a_prod_a_prod_llist_set$ 0)
(declare-sort A_a_a_prod_prod_llist_bool_fun$ 0)
(declare-sort A_a_prod_a_prod_llist_bool_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_set_fun$ 0)
(declare-sort A_a_prod_a_a_prod_prod_llist_set$ 0)
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0)
(declare-sort A_a_a_prod_prod_a_a_a_prod_prod_fun$ 0)
(declare-sort A_a_prod_a_prod_a_a_prod_a_prod_fun$ 0)
(declare-sort A_a_prod_a_a_prod_prod_llist_bool_fun$ 0)
(declare-sort A_a_prod_a_a_prod_prod_a_a_prod_a_a_prod_prod_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_a_prod$ (pair$ (fst$ A$) (snd$ A$)))))
(declare-codatatypes () ((A_a_prod_llist$ (lNil$a) (lCons$a (lhd$a A_a_prod$) (ltl$a A_a_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_a_prod_prod$ (pair$a (fst$a A_a_prod$) (snd$a A_a_prod$)))))
(declare-codatatypes () ((A_a_prod_a_a_prod_prod_llist$ (lNil$b) (lCons$b (lhd$b A_a_prod_a_a_prod_prod$) (ltl$b A_a_prod_a_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_prod$ (pair$b (fst$b A_a_prod$) (snd$b A$)))))
(declare-codatatypes () ((A_a_prod_a_prod_llist$ (lNil$c) (lCons$c (lhd$c A_a_prod_a_prod$) (ltl$c A_a_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod$ (pair$c (fst$c A$) (snd$c A_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_prod_llist$ (lNil$d) (lCons$d (lhd$d A_a_a_prod_prod$) (ltl$d A_a_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_a_prod_prod$ (pair$d (fst$d A$) (snd$d A_a_prod_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_a_prod_prod_llist$ (lNil$e) (lCons$e (lhd$e A_a_a_prod_a_prod_prod$) (ltl$e A_a_a_prod_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_a_a_prod_prod_prod$ (pair$e (fst$e A$) (snd$e A_a_a_prod_prod$)))))
(declare-codatatypes () ((A_a_a_a_prod_prod_prod_llist$ (lNil$f) (lCons$f (lhd$f A_a_a_a_prod_prod_prod$) (ltl$f A_a_a_a_prod_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_prod_a_prod$ (pair$f (fst$f A_a_prod_a_prod$) (snd$f A$)))))
(declare-codatatypes () ((A_a_prod_a_prod_a_prod_llist$ (lNil$g) (lCons$g (lhd$g A_a_prod_a_prod_a_prod$) (ltl$g A_a_prod_a_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod_a_prod$ (pair$g (fst$g A_a_a_prod_prod$) (snd$g A$)))))
(declare-codatatypes () ((A_a_a_prod_prod_a_prod_llist$ (lNil$h) (lCons$h (lhd$h A_a_a_prod_prod_a_prod$) (ltl$h A_a_a_prod_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_a_a_prod_prod_prod$ (pair$h (fst$h A$) (snd$h A_a_prod_a_a_prod_prod$)))))
(declare-codatatypes () ((A_a_a_prod_a_a_prod_prod_prod_llist$ (lNil$i) (lCons$i (lhd$i A_a_a_prod_a_a_prod_prod_prod$) (ltl$i A_a_a_prod_a_a_prod_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_a_prod_a_prod_prod$ (pair$i (fst$i A_a_prod$) (snd$i A_a_prod_a_prod$)))))
(declare-codatatypes () ((A_a_prod_a_a_prod_a_prod_prod_llist$ (lNil$j) (lCons$j (lhd$j A_a_prod_a_a_prod_a_prod_prod$) (ltl$j A_a_prod_a_a_prod_a_prod_prod_llist$)))))
(declare-fun n$ () Nat$)
(declare-fun xs$ () A_llist$)
(declare-fun lzip$ (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun zero$ () Nat$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lzip$a (A_llist$ A_a_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun lzip$b (A_a_prod_llist$ A_llist$) A_a_prod_a_prod_llist$)
(declare-fun lzip$c (A_a_prod_llist$ A_a_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lzip$d (A_llist$ A_a_prod_a_prod_llist$) A_a_a_prod_a_prod_prod_llist$)
(declare-fun lzip$e (A_llist$ A_a_a_prod_prod_llist$) A_a_a_a_prod_prod_prod_llist$)
(declare-fun lzip$f (A_a_prod_a_prod_llist$ A_llist$) A_a_prod_a_prod_a_prod_llist$)
(declare-fun lzip$g (A_a_a_prod_prod_llist$ A_llist$) A_a_a_prod_prod_a_prod_llist$)
(declare-fun lzip$h (A_llist$ A_a_prod_a_a_prod_prod_llist$) A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lzip$i (A_a_prod_llist$ A_a_prod_a_prod_llist$) A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun ldropn$ (Nat$) A_llist_a_llist_fun$)
(declare-fun lnull$a (A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun lnull$b (A_a_prod_a_prod_llist$) Bool)
(declare-fun lnull$c (A_a_a_prod_prod_llist$) Bool)
(declare-fun lnull$d (A_a_prod_llist$) Bool)
(declare-fun lnull$e (A_a_a_prod_a_prod_prod_llist$) Bool)
(declare-fun lnull$f (A_a_a_a_prod_prod_prod_llist$) Bool)
(declare-fun lnull$g (A_a_prod_a_prod_a_prod_llist$) Bool)
(declare-fun lnull$h (A_a_a_prod_prod_a_prod_llist$) Bool)
(declare-fun lnull$i (A_a_a_prod_a_a_prod_prod_prod_llist$) Bool)
(declare-fun lnull$j (A_a_prod_a_a_prod_a_prod_prod_llist$) Bool)
(declare-fun member$ (A_a_prod_a_a_prod_prod_llist$ A_a_prod_a_a_prod_prod_llist_set$) Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun ldropn$a (Nat$) A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun lmember$ (A_a_prod$) A_a_prod_llist_bool_fun$)
(declare-fun lprefix$ (A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_llist_bool_fun$)
(declare-fun member$a (A_a_prod_a_prod_llist$ A_a_prod_a_prod_llist_set$) Bool)
(declare-fun member$b (A_a_a_prod_prod_llist$ A_a_a_prod_prod_llist_set$) Bool)
(declare-fun member$c (A_a_prod_llist$ A_a_prod_llist_set$) Bool)
(declare-fun member$d (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$a (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun fun_app$b (A_a_prod_llist_bool_fun$ A_a_prod_llist$) Bool)
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$d (A_a_prod_llist_a_a_prod_set_fun$ A_a_prod_llist$) A_a_prod_set$)
(declare-fun fun_app$e (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun fun_app$f (A_a_prod_a_a_prod_prod_llist_bool_fun$ A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun fun_app$g (A_a_prod_a_prod_llist_bool_fun$ A_a_prod_a_prod_llist$) Bool)
(declare-fun fun_app$h (A_a_a_prod_prod_llist_bool_fun$ A_a_a_prod_prod_llist$) Bool)
(declare-fun gen_lset$ (A_a_prod_set$) A_a_prod_llist_a_a_prod_set_fun$)
(declare-fun iterates$ (A_a_prod_a_a_prod_prod_a_a_prod_a_a_prod_prod_fun$ A_a_prod_a_a_prod_prod$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lmember$a (A$) A_llist_bool_fun$)
(declare-fun lprefix$a (A_a_prod_a_prod_llist$) A_a_prod_a_prod_llist_bool_fun$)
(declare-fun lprefix$b (A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist_bool_fun$)
(declare-fun lprefix$c (A_a_prod_llist$) A_a_prod_llist_bool_fun$)
(declare-fun lprefix$d (A_llist$) A_llist_bool_fun$)
(declare-fun gen_lset$a (A_set$) A_llist_a_set_fun$)
(declare-fun iterates$a (A_a_prod_a_prod_a_a_prod_a_prod_fun$ A_a_prod_a_prod$) A_a_prod_a_prod_llist$)
(declare-fun iterates$b (A_a_a_prod_prod_a_a_a_prod_prod_fun$ A_a_a_prod_prod$) A_a_a_prod_prod_llist$)
(declare-fun iterates$c (A_a_prod_a_a_prod_fun$ A_a_prod$) A_a_prod_llist$)
(declare-fun iterates$d (A_a_fun$ A$) A_llist$)
(declare-fun pred_llist$ (A_a_prod_bool_fun$ A_a_prod_llist$) Bool)
(declare-fun pred_llist$a (A_bool_fun$ A_llist$) Bool)
(assert (! (not (= (fun_app$ (ldropn$ n$) xs$) lNil$)) :named a0))
(assert (! (lnull$ xs$) :named a1))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a (ldropn$a ?v0) lNil$a) lNil$a) :pattern ((ldropn$a ?v0)))) :named a2))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (ldropn$ ?v0) lNil$) lNil$) :pattern ((ldropn$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (! (= (lnull$a ?v0) (= ?v0 lNil$b)) :pattern ((lnull$a ?v0)))) :named a4))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (! (= (lnull$b ?v0) (= ?v0 lNil$c)) :pattern ((lnull$b ?v0)))) :named a5))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (! (= (lnull$c ?v0) (= ?v0 lNil$d)) :pattern ((lnull$c ?v0)))) :named a6))
(assert (! (forall ((?v0 A_a_prod_llist$)) (! (= (lnull$d ?v0) (= ?v0 lNil$a)) :pattern ((lnull$d ?v0)))) :named a7))
(assert (! (forall ((?v0 A_llist$)) (! (= (lnull$ ?v0) (= ?v0 lNil$)) :pattern ((lnull$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$d ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$d ?v1))) false)) false)) :named a10))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$d ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$d ?v0)) (not (lnull$ ?v1))) false)) false)) :named a11))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (lnull$d ?v0) (lnull$d ?v1)) false) (=> (and (not (lnull$d ?v0)) (not (lnull$d ?v1))) false)) false)) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_prod_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$b ?v1))) false)) false)) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_a_prod_prod_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$c ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$c ?v1))) false)) false)) :named a14))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$ ?v1))) false)) false)) :named a15))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$c ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$c ?v0)) (not (lnull$ ?v1))) false)) false)) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$a ?v1))) false)) false)) :named a17))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_a_prod_llist$)) (=> (and (=> (or (lnull$d ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$d ?v0)) (not (lnull$b ?v1))) false)) false)) :named a18))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_a_prod_a_a_prod_prod_llist$)) (=> (member$ ?v1 ?v0) (lnull$a ?v1))) false) (=> (not (forall ((?v1 A_a_prod_a_a_prod_prod_llist$)) (=> (member$ ?v1 ?v0) (lnull$a ?v1)))) false)) false)) :named a19))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_a_prod_a_prod_llist$)) (=> (member$a ?v1 ?v0) (lnull$b ?v1))) false) (=> (not (forall ((?v1 A_a_prod_a_prod_llist$)) (=> (member$a ?v1 ?v0) (lnull$b ?v1)))) false)) false)) :named a20))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_a_a_prod_prod_llist$)) (=> (member$b ?v1 ?v0) (lnull$c ?v1))) false) (=> (not (forall ((?v1 A_a_a_prod_prod_llist$)) (=> (member$b ?v1 ?v0) (lnull$c ?v1)))) false)) false)) :named a21))
(assert (! (forall ((?v0 A_a_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_a_prod_llist$)) (=> (member$c ?v1 ?v0) (lnull$d ?v1))) false) (=> (not (forall ((?v1 A_a_prod_llist$)) (=> (member$c ?v1 ?v0) (lnull$d ?v1)))) false)) false)) :named a22))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$d ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$d ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a23))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a24))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_a_prod_a_prod_llist$)) (=> (and (=> (and (lnull$b ?v0) (lnull$b ?v1)) false) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false)) :named a25))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_a_a_prod_prod_llist$)) (=> (and (=> (and (lnull$c ?v0) (lnull$c ?v1)) false) (=> (or (not (lnull$c ?v0)) (not (lnull$c ?v1))) false)) false)) :named a26))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (and (lnull$d ?v0) (lnull$d ?v1)) false) (=> (or (not (lnull$d ?v0)) (not (lnull$d ?v1))) false)) false)) :named a27))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a28))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false)) :named a29))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (=> (and (=> (lnull$b ?v0) false) (=> (not (lnull$b ?v0)) false)) false)) :named a30))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (=> (and (=> (lnull$c ?v0) false) (=> (not (lnull$c ?v0)) false)) false)) :named a31))
(assert (! (forall ((?v0 A_a_prod_llist$)) (=> (and (=> (lnull$d ?v0) false) (=> (not (lnull$d ?v0)) false)) false)) :named a32))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)) :named a33))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (=> (= ?v0 lNil$b) (lnull$a ?v0))) :named a34))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (=> (= ?v0 lNil$c) (lnull$b ?v0))) :named a35))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (=> (= ?v0 lNil$d) (lnull$c ?v0))) :named a36))
(assert (! (forall ((?v0 A_a_prod_llist$)) (=> (= ?v0 lNil$a) (lnull$d ?v0))) :named a37))
(assert (! (forall ((?v0 A_llist$)) (=> (= ?v0 lNil$) (lnull$ ?v0))) :named a38))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (=> (lnull$a ?v0) (= ?v0 lNil$b))) :named a39))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (=> (lnull$b ?v0) (= ?v0 lNil$c))) :named a40))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (=> (lnull$c ?v0) (= ?v0 lNil$d))) :named a41))
(assert (! (forall ((?v0 A_a_prod_llist$)) (=> (lnull$d ?v0) (= ?v0 lNil$a))) :named a42))
(assert (! (forall ((?v0 A_llist$)) (=> (lnull$ ?v0) (= ?v0 lNil$))) :named a43))
(assert (! (lnull$a lNil$b) :named a44))
(assert (! (lnull$b lNil$c) :named a45))
(assert (! (lnull$c lNil$d) :named a46))
(assert (! (lnull$d lNil$a) :named a47))
(assert (! (lnull$ lNil$) :named a48))
(assert (! (forall ((?v0 A_a_prod$)) (! (= (fun_app$b (lmember$ ?v0) lNil$a) false) :pattern ((lmember$ ?v0)))) :named a49))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$c (lmember$a ?v0) lNil$) false) :pattern ((lmember$a ?v0)))) :named a50))
(assert (! (forall ((?v0 A_a_prod_set$)) (! (= (fun_app$d (gen_lset$ ?v0) lNil$a) ?v0) :pattern ((gen_lset$ ?v0)))) :named a51))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$e (gen_lset$a ?v0) lNil$) ?v0) :pattern ((gen_lset$a ?v0)))) :named a52))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$d (lzip$ ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a53))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$c (lzip$a ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$d ?v1))))) :named a54))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (not (lnull$b (lzip$b ?v0 ?v1))) (and (not (lnull$d ?v0)) (not (lnull$ ?v1))))) :named a55))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$a (lzip$c ?v0 ?v1))) (and (not (lnull$d ?v0)) (not (lnull$d ?v1))))) :named a56))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_prod_llist$)) (= (not (lnull$e (lzip$d ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$b ?v1))))) :named a57))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_a_prod_prod_llist$)) (= (not (lnull$f (lzip$e ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$c ?v1))))) :named a58))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_llist$)) (= (not (lnull$g (lzip$f ?v0 ?v1))) (and (not (lnull$b ?v0)) (not (lnull$ ?v1))))) :named a59))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_llist$)) (= (not (lnull$h (lzip$g ?v0 ?v1))) (and (not (lnull$c ?v0)) (not (lnull$ ?v1))))) :named a60))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (= (not (lnull$i (lzip$h ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$a ?v1))))) :named a61))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_a_prod_llist$)) (= (not (lnull$j (lzip$i ?v0 ?v1))) (and (not (lnull$d ?v0)) (not (lnull$b ?v1))))) :named a62))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$d (lzip$ ?v0 ?v1)) (or (lnull$ ?v0) (lnull$ ?v1)))) :named a63))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (lnull$c (lzip$a ?v0 ?v1)) (or (lnull$ ?v0) (lnull$d ?v1)))) :named a64))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (lnull$b (lzip$b ?v0 ?v1)) (or (lnull$d ?v0) (lnull$ ?v1)))) :named a65))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lnull$a (lzip$c ?v0 ?v1)) (or (lnull$d ?v0) (lnull$d ?v1)))) :named a66))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_prod_llist$)) (= (lnull$e (lzip$d ?v0 ?v1)) (or (lnull$ ?v0) (lnull$b ?v1)))) :named a67))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_a_prod_prod_llist$)) (= (lnull$f (lzip$e ?v0 ?v1)) (or (lnull$ ?v0) (lnull$c ?v1)))) :named a68))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_llist$)) (= (lnull$g (lzip$f ?v0 ?v1)) (or (lnull$b ?v0) (lnull$ ?v1)))) :named a69))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_llist$)) (= (lnull$h (lzip$g ?v0 ?v1)) (or (lnull$c ?v0) (lnull$ ?v1)))) :named a70))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (= (lnull$i (lzip$h ?v0 ?v1)) (or (lnull$ ?v0) (lnull$a ?v1)))) :named a71))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_a_prod_llist$)) (= (lnull$j (lzip$i ?v0 ?v1)) (or (lnull$d ?v0) (lnull$b ?v1)))) :named a72))
(assert (! (forall ((?v0 A_a_prod_bool_fun$)) (pred_llist$ ?v0 lNil$a)) :named a73))
(assert (! (forall ((?v0 A_bool_fun$)) (pred_llist$a ?v0 lNil$)) :named a74))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (ldropn$ zero$) ?v0) ?v0) :pattern ((fun_app$ (ldropn$ zero$) ?v0)))) :named a75))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_a_a_prod_a_a_prod_prod_fun$) (?v1 A_a_prod_a_a_prod_prod$)) (not (lnull$a (iterates$ ?v0 ?v1)))) :named a76))
(assert (! (forall ((?v0 A_a_prod_a_prod_a_a_prod_a_prod_fun$) (?v1 A_a_prod_a_prod$)) (not (lnull$b (iterates$a ?v0 ?v1)))) :named a77))
(assert (! (forall ((?v0 A_a_a_prod_prod_a_a_a_prod_prod_fun$) (?v1 A_a_a_prod_prod$)) (not (lnull$c (iterates$b ?v0 ?v1)))) :named a78))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 A_a_prod$)) (not (lnull$d (iterates$c ?v0 ?v1)))) :named a79))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (not (lnull$ (iterates$d ?v0 ?v1)))) :named a80))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (! (= (fun_app$f (lprefix$ ?v0) lNil$b) (lnull$a ?v0)) :pattern ((lprefix$ ?v0)))) :named a81))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (! (= (fun_app$g (lprefix$a ?v0) lNil$c) (lnull$b ?v0)) :pattern ((lprefix$a ?v0)))) :named a82))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (! (= (fun_app$h (lprefix$b ?v0) lNil$d) (lnull$c ?v0)) :pattern ((lprefix$b ?v0)))) :named a83))
(assert (! (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$b (lprefix$c ?v0) lNil$a) (lnull$d ?v0)) :pattern ((lprefix$c ?v0)))) :named a84))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$c (lprefix$d ?v0) lNil$) (lnull$ ?v0)) :pattern ((lprefix$d ?v0)))) :named a85))
(check-sat)
;(get-unsat-core)
