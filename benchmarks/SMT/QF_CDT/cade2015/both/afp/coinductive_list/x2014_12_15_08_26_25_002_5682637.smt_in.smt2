; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 621
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun distinct$ (A_list$) Bool)
(declare-fun llist_of$ (A_list$) A_llist$)
(declare-fun ldistinct$ (A_llist$) Bool)
(assert (! (not (ldistinct$ ys$)) :named a0))
(assert (! (ldistinct$ xs$) :named a1))
(assert (! (ldistinct$ (lappend$ xs$ ys$)) :named a2))
(assert (! (= (ldistinct$ lNil$) true) :named a3))
(assert (! (ldistinct$ lNil$) :named a4))
(assert (! (forall ((?v0 A_llist$)) (=> (ldistinct$ ?v0) (ldistinct$ (ltl$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$ (lappend$ ?v0 ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1)))) :named a7))
(assert (! (forall ((?v0 A_list$)) (= (ldistinct$ (llist_of$ ?v0)) (distinct$ ?v0))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (ldistinct$ (lCons$ ?v0 ?v1)) (and (not (member$ ?v0 (lset$ ?v1))) (ldistinct$ ?v1))) :pattern ((lCons$ ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (not (member$ ?v0 (lset$ ?v1))) (ldistinct$ ?v1)) (ldistinct$ (lCons$ ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (lappend$ ?v0 ?v1) ?v0)) :pattern ((lappend$ ?v0 ?v1)))) :named a11))
(assert (! (lfinite$ xs$) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (lappend$ (lCons$ ?v0 ?v1) ?v2) (lCons$ ?v0 (lappend$ ?v1 ?v2))) :pattern ((lappend$ (lCons$ ?v0 ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a16))
(check-sat)
;(get-unsat-core)
