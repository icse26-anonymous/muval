; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 614
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun us$ () A_llist$)
(declare-fun vs$ () A_llist$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun map$ (A_a_fun$ A_list$) A_list$)
(declare-fun nth$ (A_list$) Nat_a_fun$)
(declare-fun set$ (A_list$) A_set$)
(declare-fun drop$ (Nat$ A_list$) A_list$)
(declare-fun lmap$ (A_a_fun$ A_llist$) A_llist$)
(declare-fun lnth$ (A_llist$) Nat_a_fun$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun thesis$ () Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun list_of$ (A_llist$) A_list$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun llist_of$ (A_list$) A_llist$)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 A_list$)) (=> (= xs$ (llist_of$ ?v0)) thesis$)) :named a1))
(assert (! (lfinite$ xs$) :named a2))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (= xs$ us$) :named a4))
(assert (! (= (llength$ xs$) (llength$ us$)) :named a5))
(assert (! (forall ((?v0 A_list$)) (lfinite$ (llist_of$ ?v0))) :named a6))
(assert (! (= (lappend$ xs$ ys$) (lappend$ us$ vs$)) :named a7))
(assert (! (forall ((?v0 A_list$)) (= (list_of$ (llist_of$ ?v0)) ?v0)) :named a8))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$ ?v0) (= (llist_of$ (list_of$ ?v0)) ?v0))) :named a9))
(assert (! (forall ((?v0 A_list$)) (= (lhd$ (llist_of$ ?v0)) (hd$ ?v0))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 A_list$)) (= (ldropn$ ?v0 (llist_of$ ?v1)) (llist_of$ (drop$ ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 A_list$)) (= (lnth$ (llist_of$ ?v0)) (nth$ ?v0))) :named a12))
(assert (! (forall ((?v0 A_list$)) (= (lnull$ (llist_of$ ?v0)) (= ?v0 nil$))) :named a13))
(assert (! (forall ((?v0 A_list$)) (= (ltl$ (llist_of$ ?v0)) (llist_of$ (tl$ ?v0)))) :named a14))
(assert (! (forall ((?v0 A_list$)) (= (lset$ (llist_of$ ?v0)) (set$ ?v0))) :named a15))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_list$)) (= (lmap$ ?v0 (llist_of$ ?v1)) (llist_of$ (map$ ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$ (lappend$ ?v0 ?v1))) (or (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$ (lappend$ ?v0 ?v1)) (and (lnull$ ?v0) (lnull$ ?v1)))) :named a18))
(check-sat)
;(get-unsat-core)
