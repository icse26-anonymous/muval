; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 617
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_set_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun uu$ () A_llist_bool_fun$)
(declare-fun max$ (A_a_bool_fun_fun$ A$ A$) A$)
(declare-fun min$ (A_a_bool_fun_fun$ A$ A$) A$)
(declare-fun uua$ (A$) A_bool_fun$)
(declare-fun lSup$ () A_llist_set_a_llist_fun$)
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$) Bool)
(declare-fun atMost$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun atLeast$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun less_eq$ () A_a_bool_fun_fun$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun lsorted$ (A_a_bool_fun_fun$ A_llist$) Bool)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$d (A_llist_set_a_llist_fun$ A_llist_set$) A_llist$)
(declare-fun admissible$ (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_bool_fun$) Bool)
(declare-fun atLeastAtMost$ (A_a_bool_fun_fun$ A$ A$) A_set$)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uu$ ?v0) (not (lsorted$ less_eq$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$a (uua$ ?v0) ?v1) (fun_app$a (fun_app$b less_eq$ ?v1) ?v0)) :pattern ((fun_app$a (uua$ ?v0) ?v1)))) :named a1))
(assert (! (not (admissible$ lSup$ lprefix$ uu$)) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (= ?v0 ?v1) (fun_app$a (fun_app$b less_eq$ ?v1) ?v2)) (fun_app$a (fun_app$b less_eq$ ?v0) ?v2))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$a (fun_app$b less_eq$ ?v0) ?v2))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (max$ less_eq$ ?v0 ?v1) (ite (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) ?v1 ?v0)) :pattern ((max$ less_eq$ ?v0 ?v1)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (min$ less_eq$ ?v0 ?v1) (ite (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) ?v0 ?v1)) :pattern ((min$ less_eq$ ?v0 ?v1)))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$c lprefix$ ?v0) ?v0)) :named a7))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$c lprefix$ ?v0) ?v0)) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (fun_app$c lprefix$ ?v0) ?v1) (lsorted$ less_eq$ ?v1)) (lsorted$ less_eq$ ?v0))) :named a9))
(assert (! (forall ((?v0 A$)) (= (atMost$ less_eq$ ?v0) (collect$ (uua$ ?v0)))) :named a10))
(assert (! (forall ((?v0 A$)) (! (= (atLeast$ less_eq$ ?v0) (collect$ (fun_app$b less_eq$ ?v0))) :pattern ((atLeast$ less_eq$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (fun_app$c lprefix$ ?v0) ?v1) (fun_app$ (fun_app$c lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (fun_app$c lprefix$ ?v0) ?v1) (fun_app$ (fun_app$c lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$c lprefix$ ?v0) ?v1) (fun_app$ (fun_app$c lprefix$ ?v2) ?v1)) (or (fun_app$ (fun_app$c lprefix$ ?v0) ?v2) (fun_app$ (fun_app$c lprefix$ ?v2) ?v0)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$c lprefix$ ?v0) ?v1) (fun_app$ (fun_app$c lprefix$ ?v1) ?v2)) (fun_app$ (fun_app$c lprefix$ ?v0) ?v2))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$c lprefix$ ?v0) ?v1) (fun_app$ (fun_app$c lprefix$ ?v1) ?v2)) (fun_app$ (fun_app$c lprefix$ ?v0) ?v2))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$c lprefix$ ?v0) ?v1) (lsorted$ ?v2 ?v1)) (lsorted$ ?v2 ?v0))) :named a17))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (chain$ lprefix$ ?v0) (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lsorted$ less_eq$ ?v1)))) (lsorted$ less_eq$ (fun_app$d lSup$ ?v0)))) :named a18))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (= (member$a ?v0 (atLeastAtMost$ less_eq$ ?v1 ?v2)) (and (fun_app$a (fun_app$b less_eq$ ?v1) ?v0) (fun_app$a (fun_app$b less_eq$ ?v0) ?v2)))) :named a19))
(check-sat)
;(get-unsat-core)
