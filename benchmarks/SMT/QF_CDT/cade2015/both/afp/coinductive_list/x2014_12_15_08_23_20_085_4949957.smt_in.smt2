; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 670
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun uu$ () A_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun uua$ () A_bool_fun$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lsetp$ (A_llist$) A_bool_fun$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun less_eq$ (A_set$ A_set$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun lmember$ (A$ A_llist$) Bool)
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$) A_llist$)
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uua$ ?v0) false) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uu$ ?v0) true) :pattern ((fun_app$ uu$ ?v0)))) :named a1))
(assert (! (not (= (ltakeWhile$ p$ (lappend$ xs$ ys$)) (ite (exists ((?v0 A$)) (and (member$ ?v0 (lset$ xs$)) (not (fun_app$ p$ ?v0)))) (ltakeWhile$ p$ xs$) (lappend$ xs$ (ltakeWhile$ p$ ys$))))) :named a2))
(assert (! (forall ((?v0 A_llist$)) (= (ltakeWhile$ uu$ ?v0) ?v0)) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (! (=> (forall ((?v2 A$)) (=> (member$ ?v2 (lset$ ?v0)) (fun_app$ ?v1 ?v2))) (= (ltakeWhile$ ?v1 ?v0) ?v0)) :pattern ((ltakeWhile$ ?v1 ?v0)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_bool_fun$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ (ltakeWhile$ ?v1 ?v2))) (and (member$ ?v0 (lset$ ?v2)) (fun_app$ ?v1 ?v0)))) :named a6))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lappend$ (ltakeWhile$ ?v0 ?v1) (ldropWhile$ ?v0 ?v1)) ?v1)) :named a7))
(assert (! (forall ((?v0 A_set$) (?v1 A_bool_fun$)) (= (exists ((?v2 A$)) (and (member$ ?v2 ?v0) (fun_app$ ?v1 ?v2))) (exists ((?v2 A$)) (and (member$ ?v2 ?v0) (fun_app$ ?v1 ?v2))))) :named a8))
(assert (! (forall ((?v0 A_set$) (?v1 A_bool_fun$) (?v2 A_bool_fun$)) (=> (and (forall ((?v3 A$)) (=> (and (member$ ?v3 ?v0) (fun_app$ ?v1 ?v3)) (fun_app$ ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (fun_app$ ?v1 ?v3)))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (fun_app$ ?v2 ?v3))))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$ ?v0 (lset$ ?v1)) (lmember$ ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (! (= (lset$ ?v0) (collect$ (lsetp$ ?v0))) :pattern ((lset$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (= (ltakeWhile$ ?v0 ?v1) ?v1) (less_eq$ (lset$ ?v1) (collect$ ?v0)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (less_eq$ (lset$ ?v0) (lset$ (lappend$ ?v0 ?v1)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$ ?v0 (lset$ ?v1)) (fun_app$ (lsetp$ ?v1) ?v0))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (fun_app$ (lsetp$ ?v0) ?v1) (member$ ?v1 (lset$ ?v0)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (member$ ?v0 (lset$ (lappend$ ?v1 ?v2))) (or (member$ ?v0 (lset$ ?v1)) (and (lfinite$ ?v1) (member$ ?v0 (lset$ ?v2)))))) :named a16))
(assert (! (forall ((?v0 A_llist$)) (= (ltakeWhile$ uua$ ?v0) lNil$)) :named a17))
(assert (! (forall ((?v0 A$) (?v1 A_bool_fun$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ (ldropWhile$ ?v1 ?v2))) (member$ ?v0 (lset$ ?v2)))) :named a18))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))) (less_eq$ ?v0 ?v1))) :named a19))
(check-sat)
;(get-unsat-core)
