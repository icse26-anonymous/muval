; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 591
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_b_prod_set$ 0)
(declare-sort A_a_b_prod_fun$ 0)
(declare-sort A_b_prod_a_fun$ 0)
(declare-sort A_b_prod_b_fun$ 0)
(declare-sort B_a_b_prod_fun$ 0)
(declare-sort B_b_prod_a_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort B_b_fun_b_b_fun_fun$ 0)
(declare-sort B_llist_b_llist_fun$ 0)
(declare-sort A_a_prod_a_a_prod_fun$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-sort B_a_prod_b_a_prod_fun$ 0)
(declare-sort B_b_prod_b_b_prod_fun$ 0)
(declare-sort A_llist_a_a_prod_llist_fun$ 0)
(declare-sort A_llist_b_a_prod_llist_fun$ 0)
(declare-sort B_llist_a_b_prod_llist_fun$ 0)
(declare-sort B_llist_b_b_prod_llist_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0)
(declare-sort A_b_prod_llist_a_b_prod_llist_fun$ 0)
(declare-sort B_a_prod_llist_b_a_prod_llist_fun$ 0)
(declare-sort B_b_prod_llist_b_b_prod_llist_fun$ 0)
(declare-sort A_a_b_prod_prod_a_a_b_prod_prod_fun$ 0)
(declare-sort B_a_b_prod_prod_b_a_b_prod_prod_fun$ 0)
(declare-sort A_b_prod_llist_a_a_b_prod_prod_llist_fun$ 0)
(declare-sort A_b_prod_llist_b_a_b_prod_prod_llist_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort B_llist_b_llist_fun_b_llist_b_llist_fun_fun$ 0)
(declare-sort A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ 0)
(declare-sort A_b_prod_a_b_prod_fun_a_b_prod_a_b_prod_fun_fun$ 0)
(declare-sort B_a_b_prod_prod_llist_b_a_b_prod_prod_llist_fun$ 0)
(declare-sort A_b_prod_llist_a_b_prod_llist_fun_a_b_prod_llist_a_b_prod_llist_fun_fun$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$) (lCons$ (lhd$ A_b_prod$) (ltl$ A_b_prod_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))
  (B_llist_llist$ (lNil$c) (lCons$c (lhd$c B_llist$) (ltl$c B_llist_llist$)))
  (A_llist_llist$ (lNil$d) (lCons$d (lhd$d A_llist$) (ltl$d A_llist_llist$)))
  (A_b_prod_llist_llist$ (lNil$e) (lCons$e (lhd$e A_b_prod_llist$) (ltl$e A_b_prod_llist_llist$)))))
(declare-datatypes () ((A_b_prod_list$ (nil$) (cons$ (hd$ A_b_prod$) (tl$ A_b_prod_list$)))
  (A_list$ (nil$a) (cons$a (hd$a A$) (tl$a A_list$)))
  (B_list$ (nil$b) (cons$b (hd$b B$) (tl$b B_list$)))
  (B_b_prod$ (pair$a (fst$a B$) (snd$a B$)))))
(declare-codatatypes () ((B_b_prod_llist$ (lNil$f) (lCons$f (lhd$f B_b_prod$) (ltl$f B_b_prod_llist$)))))
(declare-datatypes () ((B_a_prod$ (pair$b (fst$b B$) (snd$b A$)))))
(declare-codatatypes () ((B_a_prod_llist$ (lNil$g) (lCons$g (lhd$g B_a_prod$) (ltl$g B_a_prod_llist$)))))
(declare-datatypes () ((A_a_prod$ (pair$c (fst$c A$) (snd$c A$)))))
(declare-codatatypes () ((A_a_prod_llist$ (lNil$h) (lCons$h (lhd$h A_a_prod$) (ltl$h A_a_prod_llist$)))))
(declare-datatypes () ((B_a_b_prod_prod$ (pair$d (fst$d B$) (snd$d A_b_prod$)))))
(declare-codatatypes () ((B_a_b_prod_prod_llist$ (lNil$i) (lCons$i (lhd$i B_a_b_prod_prod$) (ltl$i B_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_a_b_prod_prod$ (pair$e (fst$e A$) (snd$e A_b_prod$)))))
(declare-codatatypes () ((A_a_b_prod_prod_llist$ (lNil$j) (lCons$j (lhd$j A_a_b_prod_prod$) (ltl$j A_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_prod$ (pair$f (fst$f A_b_prod$) (snd$f A$)))))
(declare-codatatypes () ((A_b_prod_a_prod_llist$ (lNil$k) (lCons$k (lhd$k A_b_prod_a_prod$) (ltl$k A_b_prod_a_prod_llist$)))))
(declare-datatypes () ((A_b_prod_b_prod$ (pair$g (fst$g A_b_prod$) (snd$g B$)))))
(declare-codatatypes () ((A_b_prod_b_prod_llist$ (lNil$l) (lCons$l (lhd$l A_b_prod_b_prod$) (ltl$l A_b_prod_b_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_b_prod_prod$ (pair$h (fst$h A_b_prod$) (snd$h A_b_prod$)))))
(declare-codatatypes () ((A_b_prod_a_b_prod_prod_llist$ (lNil$m) (lCons$m (lhd$m A_b_prod_a_b_prod_prod$) (ltl$m A_b_prod_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_b_b_prod_prod$ (pair$i (fst$i A$) (snd$i B_b_prod$)))))
(declare-codatatypes () ((A_b_b_prod_prod_llist$ (lNil$n) (lCons$n (lhd$n A_b_b_prod_prod$) (ltl$n A_b_b_prod_prod_llist$)))))
(declare-fun n$ () Nat$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun drop$ (Nat$ A_b_prod_list$) A_b_prod_list$)
(declare-fun lmap$ (A_b_prod_a_b_prod_fun$) A_b_prod_llist_a_b_prod_llist_fun$)
(declare-fun lset$ (A_b_prod_llist$) A_b_prod_set$)
(declare-fun lzip$ (A_llist$) B_llist_a_b_prod_llist_fun$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun drop$a (Nat$ A_list$) A_list$)
(declare-fun drop$b (Nat$ B_list$) B_list$)
(declare-fun lmap$a (A_a_b_prod_fun$ A_llist$) A_b_prod_llist$)
(declare-fun lmap$b (B_a_b_prod_fun$ B_llist$) A_b_prod_llist$)
(declare-fun lmap$c (A_b_prod_a_fun$ A_b_prod_llist$) A_llist$)
(declare-fun lmap$d (A_a_fun$) A_llist_a_llist_fun$)
(declare-fun lmap$e (B_a_fun$ B_llist$) A_llist$)
(declare-fun lmap$f (A_b_prod_b_fun$ A_b_prod_llist$) B_llist$)
(declare-fun lmap$g (A_b_fun$ A_llist$) B_llist$)
(declare-fun lmap$h (B_b_fun$) B_llist_b_llist_fun$)
(declare-fun lmap$i (B_a_b_prod_prod_b_a_b_prod_prod_fun$) B_a_b_prod_prod_llist_b_a_b_prod_prod_llist_fun$)
(declare-fun lmap$j (B_b_prod_b_b_prod_fun$) B_b_prod_llist_b_b_prod_llist_fun$)
(declare-fun lmap$k (B_a_prod_b_a_prod_fun$) B_a_prod_llist_b_a_prod_llist_fun$)
(declare-fun lmap$l (A_a_b_prod_prod_a_a_b_prod_prod_fun$) A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$)
(declare-fun lmap$m (A_a_prod_a_a_prod_fun$) A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun lmap$n (B_b_prod_a_fun$ B_b_prod_llist$) A_llist$)
(declare-fun lnull$ (A_b_prod_llist$) Bool)
(declare-fun lset$a (A_llist$) A_set$)
(declare-fun lset$b (B_llist$) B_set$)
(declare-fun lzip$a (B_llist$) B_llist_b_b_prod_llist_fun$)
(declare-fun lzip$b (B_llist$) A_llist_b_a_prod_llist_fun$)
(declare-fun lzip$c (A_llist$) A_llist_a_a_prod_llist_fun$)
(declare-fun lzip$d (B_llist$) A_b_prod_llist_b_a_b_prod_prod_llist_fun$)
(declare-fun lzip$e (A_llist$) A_b_prod_llist_a_a_b_prod_prod_llist_fun$)
(declare-fun lzip$f (A_b_prod_llist$ A_llist$) A_b_prod_a_prod_llist$)
(declare-fun lzip$g (A_b_prod_llist$ B_llist$) A_b_prod_b_prod_llist$)
(declare-fun lzip$h (A_b_prod_llist$ A_b_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun lzip$i (A_llist$ B_b_prod_llist$) A_b_b_prod_prod_llist$)
(declare-fun compow$ (Nat$) B_llist_b_llist_fun_b_llist_b_llist_fun_fun$)
(declare-fun ldropn$ (Nat$) A_b_prod_llist_a_b_prod_llist_fun$)
(declare-fun lnull$a (A_llist$) Bool)
(declare-fun lnull$b (B_llist$) Bool)
(declare-fun lnull$c (A_a_prod_llist$) Bool)
(declare-fun lnull$d (B_a_prod_llist$) Bool)
(declare-fun lnull$e (B_b_prod_llist$) Bool)
(declare-fun lnull$f (A_b_prod_a_prod_llist$) Bool)
(declare-fun lnull$g (A_b_prod_b_prod_llist$) Bool)
(declare-fun lnull$h (A_a_b_prod_prod_llist$) Bool)
(declare-fun lnull$i (B_a_b_prod_prod_llist$) Bool)
(declare-fun lnull$j (A_b_prod_a_b_prod_prod_llist$) Bool)
(declare-fun lnull$k (A_b_b_prod_prod_llist$) Bool)
(declare-fun member$ (A_b_prod$ A_b_prod_set$) Bool)
(declare-fun compow$a (Nat$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun compow$b (Nat$) A_b_prod_llist_a_b_prod_llist_fun_a_b_prod_llist_a_b_prod_llist_fun_fun$)
(declare-fun compow$c (Nat$) A_b_prod_a_b_prod_fun_a_b_prod_a_b_prod_fun_fun$)
(declare-fun compow$d (Nat$) A_a_fun_a_a_fun_fun$)
(declare-fun compow$e (Nat$) B_b_fun_b_b_fun_fun$)
(declare-fun compow$f (Nat$ B_a_b_prod_prod_llist_b_a_b_prod_prod_llist_fun$ B_a_b_prod_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun compow$g (Nat$ B_b_prod_llist_b_b_prod_llist_fun$ B_b_prod_llist$) B_b_prod_llist$)
(declare-fun compow$h (Nat$ B_a_prod_llist_b_a_prod_llist_fun$ B_a_prod_llist$) B_a_prod_llist$)
(declare-fun compow$i (Nat$ A_a_b_prod_prod_llist_a_a_b_prod_prod_llist_fun$ A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun compow$j (Nat$ A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun fun_app$ (A_b_prod_llist_a_b_prod_llist_fun$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun ldropn$a (Nat$) A_llist_a_llist_fun$)
(declare-fun ldropn$b (Nat$) B_llist_b_llist_fun$)
(declare-fun ldropn$c (Nat$ B_llist_llist$) B_llist_llist$)
(declare-fun ldropn$d (Nat$ A_llist_llist$) A_llist_llist$)
(declare-fun ldropn$e (Nat$ A_b_prod_llist_llist$) A_b_prod_llist_llist$)
(declare-fun lfinite$ (A_b_prod_llist$) Bool)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (B$ B_set$) Bool)
(declare-fun fun_app$a (B_llist_a_b_prod_llist_fun$ B_llist$) A_b_prod_llist$)
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$c (B_llist_b_llist_fun$ B_llist$) B_llist$)
(declare-fun fun_app$d (B_llist_b_llist_fun_b_llist_b_llist_fun_fun$ B_llist_b_llist_fun$) B_llist_b_llist_fun$)
(declare-fun fun_app$e (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$f (A_b_prod_llist_a_b_prod_llist_fun_a_b_prod_llist_a_b_prod_llist_fun_fun$ A_b_prod_llist_a_b_prod_llist_fun$) A_b_prod_llist_a_b_prod_llist_fun$)
(declare-fun fun_app$g (A_b_prod_a_b_prod_fun$ A_b_prod$) A_b_prod$)
(declare-fun fun_app$h (A_b_prod_a_b_prod_fun_a_b_prod_a_b_prod_fun_fun$ A_b_prod_a_b_prod_fun$) A_b_prod_a_b_prod_fun$)
(declare-fun fun_app$i (A_a_fun$ A$) A$)
(declare-fun fun_app$j (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$k (B_b_fun$ B$) B$)
(declare-fun fun_app$l (B_b_fun_b_b_fun_fun$ B_b_fun$) B_b_fun$)
(declare-fun fun_app$m (B_llist_b_b_prod_llist_fun$ B_llist$) B_b_prod_llist$)
(declare-fun fun_app$n (A_llist_b_a_prod_llist_fun$ A_llist$) B_a_prod_llist$)
(declare-fun fun_app$o (A_llist_a_a_prod_llist_fun$ A_llist$) A_a_prod_llist$)
(declare-fun fun_app$p (A_b_prod_llist_b_a_b_prod_prod_llist_fun$ A_b_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun fun_app$q (A_b_prod_llist_a_a_b_prod_prod_llist_fun$ A_b_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun iterates$ (B_llist_b_llist_fun$ B_llist$) B_llist_llist$)
(declare-fun lfinite$a (A_llist$) Bool)
(declare-fun lfinite$b (B_llist$) Bool)
(declare-fun llist_of$ (A_b_prod_list$) A_b_prod_llist$)
(declare-fun iterates$a (A_llist_a_llist_fun$ A_llist$) A_llist_llist$)
(declare-fun iterates$b (A_b_prod_llist_a_b_prod_llist_fun$ A_b_prod_llist$) A_b_prod_llist_llist$)
(declare-fun iterates$c (A_b_prod_a_b_prod_fun$ A_b_prod$) A_b_prod_llist$)
(declare-fun iterates$d (A_a_fun$ A$) A_llist$)
(declare-fun iterates$e (B_b_fun$ B$) B_llist$)
(declare-fun llist_of$a (A_list$) A_llist$)
(declare-fun llist_of$b (B_list$) B_llist$)
(assert (! (not (= (fun_app$ (ldropn$ n$) (fun_app$a (lzip$ xs$) ys$)) (fun_app$a (lzip$ (fun_app$b (ldropn$a n$) xs$)) (fun_app$c (ldropn$b n$) ys$)))) :named a0))
(assert (! (forall ((?v0 A_b_prod_llist$)) (! (= (fun_app$ (ldropn$ zero$) ?v0) ?v0) :pattern ((fun_app$ (ldropn$ zero$) ?v0)))) :named a1))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$b (ldropn$a zero$) ?v0) ?v0) :pattern ((fun_app$b (ldropn$a zero$) ?v0)))) :named a2))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$c (ldropn$b zero$) ?v0) ?v0) :pattern ((fun_app$c (ldropn$b zero$) ?v0)))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_b_prod_llist$)) (= (fun_app$ (ldropn$ ?v0) (fun_app$ (ldropn$ ?v1) ?v2)) (fun_app$ (ldropn$ (plus$ ?v0 ?v1)) ?v2))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_llist$)) (= (fun_app$b (ldropn$a ?v0) (fun_app$b (ldropn$a ?v1) ?v2)) (fun_app$b (ldropn$a (plus$ ?v0 ?v1)) ?v2))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 B_llist$)) (= (fun_app$c (ldropn$b ?v0) (fun_app$c (ldropn$b ?v1) ?v2)) (fun_app$c (ldropn$b (plus$ ?v0 ?v1)) ?v2))) :named a6))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (ldropn$ ?v0) lNil$) lNil$) :pattern ((ldropn$ ?v0)))) :named a7))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$b (ldropn$a ?v0) lNil$a) lNil$a) :pattern ((ldropn$a ?v0)))) :named a8))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$c (ldropn$b ?v0) lNil$b) lNil$b) :pattern ((ldropn$b ?v0)))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_a_b_prod_fun$) (?v2 A_b_prod_llist$)) (= (fun_app$ (ldropn$ ?v0) (fun_app$ (lmap$ ?v1) ?v2)) (fun_app$ (lmap$ ?v1) (fun_app$ (ldropn$ ?v0) ?v2)))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_b_prod_fun$) (?v2 A_llist$)) (= (fun_app$ (ldropn$ ?v0) (lmap$a ?v1 ?v2)) (lmap$a ?v1 (fun_app$b (ldropn$a ?v0) ?v2)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_b_prod_fun$) (?v2 B_llist$)) (= (fun_app$ (ldropn$ ?v0) (lmap$b ?v1 ?v2)) (lmap$b ?v1 (fun_app$c (ldropn$b ?v0) ?v2)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_a_fun$) (?v2 A_b_prod_llist$)) (= (fun_app$b (ldropn$a ?v0) (lmap$c ?v1 ?v2)) (lmap$c ?v1 (fun_app$ (ldropn$ ?v0) ?v2)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (fun_app$b (ldropn$a ?v0) (fun_app$b (lmap$d ?v1) ?v2)) (fun_app$b (lmap$d ?v1) (fun_app$b (ldropn$a ?v0) ?v2)))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_fun$) (?v2 B_llist$)) (= (fun_app$b (ldropn$a ?v0) (lmap$e ?v1 ?v2)) (lmap$e ?v1 (fun_app$c (ldropn$b ?v0) ?v2)))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_b_fun$) (?v2 A_b_prod_llist$)) (= (fun_app$c (ldropn$b ?v0) (lmap$f ?v1 ?v2)) (lmap$f ?v1 (fun_app$ (ldropn$ ?v0) ?v2)))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_fun$) (?v2 A_llist$)) (= (fun_app$c (ldropn$b ?v0) (lmap$g ?v1 ?v2)) (lmap$g ?v1 (fun_app$b (ldropn$a ?v0) ?v2)))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_fun$) (?v2 B_llist$)) (= (fun_app$c (ldropn$b ?v0) (fun_app$c (lmap$h ?v1) ?v2)) (fun_app$c (lmap$h ?v1) (fun_app$c (ldropn$b ?v0) ?v2)))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_llist$)) (= (lfinite$ (fun_app$ (ldropn$ ?v0) ?v1)) (lfinite$ ?v1))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (= (lfinite$a (fun_app$b (ldropn$a ?v0) ?v1)) (lfinite$a ?v1))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 B_llist$)) (= (lfinite$b (fun_app$c (ldropn$b ?v0) ?v1)) (lfinite$b ?v1))) :named a21))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_llist$)) (= (ltl$ (fun_app$ (ldropn$ ?v0) ?v1)) (fun_app$ (ldropn$ ?v0) (ltl$ ?v1)))) :named a22))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (= (ltl$a (fun_app$b (ldropn$a ?v0) ?v1)) (fun_app$b (ldropn$a ?v0) (ltl$a ?v1)))) :named a23))
(assert (! (forall ((?v0 Nat$) (?v1 B_llist$)) (= (ltl$b (fun_app$c (ldropn$b ?v0) ?v1)) (fun_app$c (ldropn$b ?v0) (ltl$b ?v1)))) :named a24))
(assert (! (forall ((?v0 A_b_prod$) (?v1 Nat$) (?v2 A_b_prod_llist$)) (=> (member$ ?v0 (lset$ (fun_app$ (ldropn$ ?v1) ?v2))) (member$ ?v0 (lset$ ?v2)))) :named a25))
(assert (! (forall ((?v0 A$) (?v1 Nat$) (?v2 A_llist$)) (=> (member$a ?v0 (lset$a (fun_app$b (ldropn$a ?v1) ?v2))) (member$a ?v0 (lset$a ?v2)))) :named a26))
(assert (! (forall ((?v0 B$) (?v1 Nat$) (?v2 B_llist$)) (=> (member$b ?v0 (lset$b (fun_app$c (ldropn$b ?v1) ?v2))) (member$b ?v0 (lset$b ?v2)))) :named a27))
(assert (! (forall ((?v0 Nat$) (?v1 B_llist_b_llist_fun$) (?v2 B_llist$)) (= (ldropn$c ?v0 (iterates$ ?v1 ?v2)) (iterates$ ?v1 (fun_app$c (fun_app$d (compow$ ?v0) ?v1) ?v2)))) :named a28))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$)) (= (ldropn$d ?v0 (iterates$a ?v1 ?v2)) (iterates$a ?v1 (fun_app$b (fun_app$e (compow$a ?v0) ?v1) ?v2)))) :named a29))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_llist_a_b_prod_llist_fun$) (?v2 A_b_prod_llist$)) (= (ldropn$e ?v0 (iterates$b ?v1 ?v2)) (iterates$b ?v1 (fun_app$ (fun_app$f (compow$b ?v0) ?v1) ?v2)))) :named a30))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_a_b_prod_fun$) (?v2 A_b_prod$)) (= (fun_app$ (ldropn$ ?v0) (iterates$c ?v1 ?v2)) (iterates$c ?v1 (fun_app$g (fun_app$h (compow$c ?v0) ?v1) ?v2)))) :named a31))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$b (ldropn$a ?v0) (iterates$d ?v1 ?v2)) (iterates$d ?v1 (fun_app$i (fun_app$j (compow$d ?v0) ?v1) ?v2)))) :named a32))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_fun$) (?v2 B$)) (= (fun_app$c (ldropn$b ?v0) (iterates$e ?v1 ?v2)) (iterates$e ?v1 (fun_app$k (fun_app$l (compow$e ?v0) ?v1) ?v2)))) :named a33))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_list$)) (= (fun_app$ (ldropn$ ?v0) (llist_of$ ?v1)) (llist_of$ (drop$ ?v0 ?v1)))) :named a34))
(assert (! (forall ((?v0 Nat$) (?v1 A_list$)) (= (fun_app$b (ldropn$a ?v0) (llist_of$a ?v1)) (llist_of$a (drop$a ?v0 ?v1)))) :named a35))
(assert (! (forall ((?v0 Nat$) (?v1 B_list$)) (= (fun_app$c (ldropn$b ?v0) (llist_of$b ?v1)) (llist_of$b (drop$b ?v0 ?v1)))) :named a36))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$m (lzip$a ?v0) lNil$b) lNil$f) :pattern ((lzip$a ?v0)))) :named a37))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$n (lzip$b ?v0) lNil$a) lNil$g) :pattern ((lzip$b ?v0)))) :named a38))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$o (lzip$c ?v0) lNil$a) lNil$h) :pattern ((lzip$c ?v0)))) :named a39))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$p (lzip$d ?v0) lNil$) lNil$i) :pattern ((lzip$d ?v0)))) :named a40))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$q (lzip$e ?v0) lNil$) lNil$j) :pattern ((lzip$e ?v0)))) :named a41))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a (lzip$ ?v0) lNil$b) lNil$) :pattern ((lzip$ ?v0)))) :named a42))
(assert (! (forall ((?v0 A_b_prod_llist$)) (! (= (fun_app$p (lzip$d lNil$b) ?v0) lNil$i) :pattern ((fun_app$p (lzip$d lNil$b) ?v0)))) :named a43))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$m (lzip$a lNil$b) ?v0) lNil$f) :pattern ((fun_app$m (lzip$a lNil$b) ?v0)))) :named a44))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$n (lzip$b lNil$b) ?v0) lNil$g) :pattern ((fun_app$n (lzip$b lNil$b) ?v0)))) :named a45))
(assert (! (forall ((?v0 A_b_prod_llist$)) (! (= (fun_app$q (lzip$e lNil$a) ?v0) lNil$j) :pattern ((fun_app$q (lzip$e lNil$a) ?v0)))) :named a46))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$o (lzip$c lNil$a) ?v0) lNil$h) :pattern ((fun_app$o (lzip$c lNil$a) ?v0)))) :named a47))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$a (lzip$ lNil$a) ?v0) lNil$) :pattern ((fun_app$a (lzip$ lNil$a) ?v0)))) :named a48))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$)) (= (not (lnull$ (fun_app$a (lzip$ ?v0) ?v1))) (and (not (lnull$a ?v0)) (not (lnull$b ?v1))))) :named a49))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$c (fun_app$o (lzip$c ?v0) ?v1))) (and (not (lnull$a ?v0)) (not (lnull$a ?v1))))) :named a50))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$)) (= (not (lnull$d (fun_app$n (lzip$b ?v0) ?v1))) (and (not (lnull$b ?v0)) (not (lnull$a ?v1))))) :named a51))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (not (lnull$e (fun_app$m (lzip$a ?v0) ?v1))) (and (not (lnull$b ?v0)) (not (lnull$b ?v1))))) :named a52))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_llist$)) (= (not (lnull$f (lzip$f ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$a ?v1))))) :named a53))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 B_llist$)) (= (not (lnull$g (lzip$g ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$b ?v1))))) :named a54))
(assert (! (forall ((?v0 A_llist$) (?v1 A_b_prod_llist$)) (= (not (lnull$h (fun_app$q (lzip$e ?v0) ?v1))) (and (not (lnull$a ?v0)) (not (lnull$ ?v1))))) :named a55))
(assert (! (forall ((?v0 B_llist$) (?v1 A_b_prod_llist$)) (= (not (lnull$i (fun_app$p (lzip$d ?v0) ?v1))) (and (not (lnull$b ?v0)) (not (lnull$ ?v1))))) :named a56))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (not (lnull$j (lzip$h ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a57))
(assert (! (forall ((?v0 A_llist$) (?v1 B_b_prod_llist$)) (= (not (lnull$k (lzip$i ?v0 ?v1))) (and (not (lnull$a ?v0)) (not (lnull$e ?v1))))) :named a58))
(assert (! (forall ((?v0 B_list$) (?v1 B_list$)) (= (= (llist_of$b ?v0) (llist_of$b ?v1)) (= ?v0 ?v1))) :named a59))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$a ?v0) (llist_of$a ?v1)) (= ?v0 ?v1))) :named a60))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a61))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_b_prod_prod_b_a_b_prod_prod_fun$) (?v2 B_a_b_prod_prod_llist$)) (= (lnull$i (compow$f ?v0 (lmap$i ?v1) ?v2)) (lnull$i ?v2))) :named a62))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_prod_b_b_prod_fun$) (?v2 B_b_prod_llist$)) (= (lnull$e (compow$g ?v0 (lmap$j ?v1) ?v2)) (lnull$e ?v2))) :named a63))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_prod_b_a_prod_fun$) (?v2 B_a_prod_llist$)) (= (lnull$d (compow$h ?v0 (lmap$k ?v1) ?v2)) (lnull$d ?v2))) :named a64))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_b_prod_prod_a_a_b_prod_prod_fun$) (?v2 A_a_b_prod_prod_llist$)) (= (lnull$h (compow$i ?v0 (lmap$l ?v1) ?v2)) (lnull$h ?v2))) :named a65))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_a_a_prod_fun$) (?v2 A_a_prod_llist$)) (= (lnull$c (compow$j ?v0 (lmap$m ?v1) ?v2)) (lnull$c ?v2))) :named a66))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_a_b_prod_fun$) (?v2 A_b_prod_llist$)) (= (lnull$ (fun_app$ (fun_app$f (compow$b ?v0) (lmap$ ?v1)) ?v2)) (lnull$ ?v2))) :named a67))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (lnull$a (fun_app$b (fun_app$e (compow$a ?v0) (lmap$d ?v1)) ?v2)) (lnull$a ?v2))) :named a68))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_fun$) (?v2 B_llist$)) (= (lnull$b (fun_app$c (fun_app$d (compow$ ?v0) (lmap$h ?v1)) ?v2)) (lnull$b ?v2))) :named a69))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lnull$a (fun_app$b (lmap$d ?v0) ?v1)) (lnull$a ?v1))) :named a70))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (lnull$a (lmap$e ?v0 ?v1)) (lnull$b ?v1))) :named a71))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (lnull$b (lmap$g ?v0 ?v1)) (lnull$a ?v1))) :named a72))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (lnull$b (fun_app$c (lmap$h ?v0) ?v1)) (lnull$b ?v1))) :named a73))
(assert (! (forall ((?v0 A_a_b_prod_fun$) (?v1 A_llist$)) (= (lnull$ (lmap$a ?v0 ?v1)) (lnull$a ?v1))) :named a74))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 B_llist$)) (= (lnull$ (lmap$b ?v0 ?v1)) (lnull$b ?v1))) :named a75))
(assert (! (forall ((?v0 A_b_prod_a_fun$) (?v1 A_b_prod_llist$)) (= (lnull$a (lmap$c ?v0 ?v1)) (lnull$ ?v1))) :named a76))
(assert (! (forall ((?v0 A_b_prod_b_fun$) (?v1 A_b_prod_llist$)) (= (lnull$b (lmap$f ?v0 ?v1)) (lnull$ ?v1))) :named a77))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod_llist$)) (= (lnull$ (fun_app$ (lmap$ ?v0) ?v1)) (lnull$ ?v1))) :named a78))
(assert (! (forall ((?v0 B_b_prod_a_fun$) (?v1 B_b_prod_llist$)) (= (lnull$a (lmap$n ?v0 ?v1)) (lnull$e ?v1))) :named a79))
(assert (! (= (lfinite$b lNil$b) true) :named a80))
(assert (! (= (lfinite$a lNil$a) true) :named a81))
(assert (! (= (lfinite$ lNil$) true) :named a82))
(assert (! (forall ((?v0 B_llist$)) (= (lfinite$b (ltl$b ?v0)) (lfinite$b ?v0))) :named a83))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$a (ltl$a ?v0)) (lfinite$a ?v0))) :named a84))
(assert (! (forall ((?v0 A_b_prod_llist$)) (= (lfinite$ (ltl$ ?v0)) (lfinite$ ?v0))) :named a85))
(check-sat)
;(get-unsat-core)
