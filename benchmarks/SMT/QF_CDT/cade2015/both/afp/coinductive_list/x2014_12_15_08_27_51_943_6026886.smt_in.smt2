; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 600
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun uu$ () A_a_bool_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun transp$ (A_llist_a_llist_bool_fun_fun$) Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$) Bool)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun lsorted$ (A_a_bool_fun_fun$ A_llist$) Bool)
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun ldistinct$ (A_llist$) Bool)
(declare-fun finite_lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun lstrict_prefix$ (A_llist$ A_llist$) Bool)
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$ (fun_app$a uu$ ?v0) ?v1) false) :pattern ((fun_app$ (fun_app$a uu$ ?v0) ?v1)))) :named a0))
(assert (! (not (fun_app$b (fun_app$c lprefix$ xs$) ys$)) :named a1))
(assert (! (forall ((?v0 A_llist$)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v0)) :named a2))
(assert (! (forall ((?v0 A_llist$)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v0)) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v2) ?v1)) (or (fun_app$b (fun_app$c lprefix$ ?v0) ?v2) (fun_app$b (fun_app$c lprefix$ ?v2) ?v0)))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v2)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v2))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v2)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v2))) :named a8))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (llexord$ ?v0 ?v1 ?v1)) :named a9))
(assert (! (llexord$ uu$ xs$ ys$) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (llexord$ ?v2 ?v0 ?v1))) :named a11))
(assert (! (= finite_lprefix$ lprefix$) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (lstrict_prefix$ ?v0 ?v1) (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((lstrict_prefix$ ?v0 ?v1)))) :named a13))
(assert (! (transp$ lprefix$) :named a14))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$b (fun_app$c lprefix$ lNil$) ?v0) true) :pattern ((fun_app$b (fun_app$c lprefix$ lNil$) ?v0)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$b (fun_app$c lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$b (fun_app$c lprefix$ ?v1) ?v3))) :pattern ((fun_app$b (fun_app$c lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (ldistinct$ ?v0) (fun_app$b (fun_app$c lprefix$ ?v1) ?v0)) (ldistinct$ ?v1))) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (lsorted$ ?v2 ?v1)) (lsorted$ ?v2 ?v0))) :named a18))
(check-sat)
;(get-unsat-core)
