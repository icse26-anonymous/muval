; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 620
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun p$ () A_a_bool_fun_fun$)
(declare-fun uu$ () A_a_bool_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun zs$ () A_llist$)
(declare-fun uua$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun ldrop$ (Enat$) A_llist_a_llist_fun$)
(declare-fun ldropn$ (Nat$) A_llist_a_llist_fun$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun transp$ (A_a_bool_fun_fun$) Bool)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$d (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun llist_all2$ (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$ (fun_app$a uua$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uua$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$b (fun_app$c uu$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c uu$ ?v0) ?v1)))) :named a1))
(assert (! (not (fun_app$ (fun_app$a (llist_all2$ p$) xs$) zs$)) :named a2))
(assert (! (fun_app$ (fun_app$a (llist_all2$ p$) xs$) ys$) :named a3))
(assert (! (fun_app$ (fun_app$a (llist_all2$ p$) ys$) zs$) :named a4))
(assert (! (transp$ p$) :named a5))
(assert (! (= (llist_all2$ uu$) uua$) :named a6))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$a (llist_all2$ ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 A$)) (=> (fun_app$b (fun_app$c ?v0 ?v4) ?v5) (fun_app$b (fun_app$c ?v3 ?v4) ?v5)))) (fun_app$ (fun_app$a (llist_all2$ ?v3) ?v1) ?v2))) :named a7))
(assert (! (forall ((?v0 A_a_bool_fun_fun$)) (= (transp$ ?v0) (forall ((?v1 A$) (?v2 A$) (?v3 A$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (fun_app$b (fun_app$c ?v0 ?v2) ?v3)) (fun_app$b (fun_app$c ?v0 ?v1) ?v3))))) :named a8))
(assert (! (forall ((?v0 A_a_bool_fun_fun$)) (=> (forall ((?v1 A$) (?v2 A$) (?v3 A$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (fun_app$b (fun_app$c ?v0 ?v2) ?v3)) (fun_app$b (fun_app$c ?v0 ?v1) ?v3))) (transp$ ?v0))) :named a9))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A$)) (=> (and (transp$ ?v0) (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (and (fun_app$b (fun_app$c ?v0 ?v2) ?v3) (=> (fun_app$b (fun_app$c ?v0 ?v1) ?v3) false)))) false)) :named a10))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A$)) (=> (and (transp$ ?v0) (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (fun_app$b (fun_app$c ?v0 ?v2) ?v3))) (fun_app$b (fun_app$c ?v0 ?v1) ?v3))) :named a11))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$ (fun_app$a (llist_all2$ ?v0) ?v1) lNil$) (= ?v1 lNil$)) :pattern ((fun_app$a (llist_all2$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$ (fun_app$a (llist_all2$ ?v0) lNil$) ?v1) (= ?v1 lNil$)) :pattern ((fun_app$ (fun_app$a (llist_all2$ ?v0) lNil$) ?v1)))) :named a13))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (fun_app$ (fun_app$a (llist_all2$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4)) (and (fun_app$b (fun_app$c ?v0 ?v1) ?v3) (fun_app$ (fun_app$a (llist_all2$ ?v0) ?v2) ?v4))) :pattern ((fun_app$ (fun_app$a (llist_all2$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4))))) :named a14))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_bool_fun$) (?v4 A_bool_fun$)) (=> (and (fun_app$ (fun_app$a (llist_all2$ ?v0) ?v1) ?v2) (forall ((?v5 A$) (?v6 A$)) (=> (fun_app$b (fun_app$c ?v0 ?v5) ?v6) (= (fun_app$b ?v3 ?v5) (fun_app$b ?v4 ?v6))))) (fun_app$ (fun_app$a (llist_all2$ ?v0) (ldropWhile$ ?v3 ?v1)) (ldropWhile$ ?v4 ?v2)))) :named a15))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (= (fun_app$ (fun_app$a (llist_all2$ ?v0) ?v1) ?v1) (forall ((?v2 A$)) (=> (member$ ?v2 (lset$ ?v1)) (fun_app$b (fun_app$c ?v0 ?v2) ?v2))))) :named a16))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 Nat$)) (=> (fun_app$ (fun_app$a (llist_all2$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$a (llist_all2$ ?v0) (fun_app$d (ldropn$ ?v3) ?v1)) (fun_app$d (ldropn$ ?v3) ?v2)))) :named a17))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 Enat$)) (=> (fun_app$ (fun_app$a (llist_all2$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$a (llist_all2$ ?v0) (fun_app$d (ldrop$ ?v3) ?v1)) (fun_app$d (ldrop$ ?v3) ?v2)))) :named a18))
(assert (! (forall ((?v0 A_a_bool_fun_fun$)) (fun_app$ (fun_app$a (llist_all2$ ?v0) lNil$) lNil$)) :named a19))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a20))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$d (ldrop$ ?v0) lNil$) lNil$) :pattern ((ldrop$ ?v0)))) :named a21))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$d (ldropn$ ?v0) lNil$) lNil$) :pattern ((ldropn$ ?v0)))) :named a22))
(check-sat)
;(get-unsat-core)
