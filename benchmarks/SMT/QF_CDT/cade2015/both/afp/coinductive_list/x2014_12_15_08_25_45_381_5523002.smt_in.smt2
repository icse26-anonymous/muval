; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 609
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun llast$ (A_llist$) A$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun llexord$ (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun fun_app$a (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun fun_app$b (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$c (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$d (A_bool_fun$ A$) Bool)
(declare-fun fun_app$e (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun gen_lset$ (A_set$) A_llist_a_set_fun$)
(declare-fun ldistinct$ (A_llist$) Bool)
(declare-fun undefined$ () A$)
(declare-fun ldropWhile$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun pred_llist$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun finite_lprefix$ (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$ (A_llist$) A_llist_bool_fun$)
(assert (! (not (= (llast$ lNil$) undefined$)) :named a0))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ (lmember$ ?v0) lNil$) false) :pattern ((lmember$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$a (gen_lset$ ?v0) lNil$) ?v0) :pattern ((gen_lset$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (finite_lprefix$ ?v0) lNil$) (= ?v0 lNil$)) :pattern ((finite_lprefix$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (finite_lprefix$ lNil$) ?v0) true) :pattern ((fun_app$ (finite_lprefix$ lNil$) ?v0)))) :named a4))
(assert (! (= (fun_app$ (lstrict_prefix$ lNil$) lNil$) false) :named a5))
(assert (! (forall ((?v0 A_bool_fun$)) (fun_app$ (pred_llist$ ?v0) lNil$)) :named a6))
(assert (! (ldistinct$ lNil$) :named a7))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (fun_app$ (fun_app$b (llexord$ ?v0) lNil$) ?v1)) :named a8))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$c (ldropWhile$ ?v0) lNil$) lNil$) :pattern ((ldropWhile$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (forall ((?v2 A_llist$)) (=> (forall ((?v3 A_llist$)) (=> (fun_app$ (lstrict_prefix$ ?v3) ?v2) (fun_app$ ?v0 ?v3))) (fun_app$ ?v0 ?v2))) (fun_app$ ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$ (lstrict_prefix$ (lCons$ ?v0 ?v1)) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$ (lstrict_prefix$ lNil$) (lCons$ ?v0 ?v1)) true) :pattern ((lCons$ ?v0 ?v1)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$ (finite_lprefix$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 lNil$) (exists ((?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v3)) (fun_app$ (finite_lprefix$ ?v3) ?v2)))))) :named a13))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$b ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$ (fun_app$b ?v0 ?v4) ?v5) (or (exists ((?v6 A_llist$) (?v7 A_llist$) (?v8 A$)) (and (= ?v4 (lCons$ ?v8 ?v6)) (and (= ?v5 (lCons$ ?v8 ?v7)) (or (fun_app$ (fun_app$b ?v0 ?v6) ?v7) (fun_app$ (fun_app$b (llexord$ ?v3) ?v6) ?v7))))) (or (exists ((?v6 A$) (?v7 A$) (?v8 A_llist$) (?v9 A_llist$)) (and (= ?v4 (lCons$ ?v6 ?v8)) (and (= ?v5 (lCons$ ?v7 ?v9)) (fun_app$d (fun_app$e ?v3 ?v6) ?v7)))) (exists ((?v6 A_llist$)) (and (= ?v4 lNil$) (= ?v5 ?v6)))))))) (fun_app$ (fun_app$b (llexord$ ?v3) ?v1) ?v2))) :named a14))
(check-sat)
;(get-unsat-core)
