; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 522
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_prod_a_fun$ 0)
(declare-sort A_b_prod_a_fun$ 0)
(declare-sort B_a_prod_b_fun$ 0)
(declare-sort B_b_prod_b_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort B_llist_enat_fun$ 0)
(declare-sort A_a_a_prod_prod_a_fun$ 0)
(declare-sort A_a_b_prod_prod_a_fun$ 0)
(declare-sort A_b_a_prod_prod_a_fun$ 0)
(declare-sort A_b_b_prod_prod_a_fun$ 0)
(declare-sort B_b_a_prod_prod_b_fun$ 0)
(declare-sort B_b_b_prod_prod_b_fun$ 0)
(declare-sort A_a_prod_llist_enat_fun$ 0)
(declare-sort A_b_prod_llist_enat_fun$ 0)
(declare-sort B_a_prod_llist_enat_fun$ 0)
(declare-sort B_b_prod_llist_enat_fun$ 0)
(declare-sort A_a_b_prod_prod_llist_enat_fun$ 0)
(declare-sort A_b_a_prod_prod_llist_enat_fun$ 0)
(declare-sort A_b_b_prod_prod_llist_enat_fun$ 0)
(declare-sort B_a_a_prod_prod_llist_enat_fun$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$) (lCons$ (lhd$ A_b_prod$) (ltl$ A_b_prod_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))
  (B_b_prod$ (pair$a (fst$a B$) (snd$a B$)))))
(declare-codatatypes () ((B_b_prod_llist$ (lNil$c) (lCons$c (lhd$c B_b_prod$) (ltl$c B_b_prod_llist$)))))
(declare-datatypes () ((B_a_prod$ (pair$b (fst$b B$) (snd$b A$)))))
(declare-codatatypes () ((B_a_prod_llist$ (lNil$d) (lCons$d (lhd$d B_a_prod$) (ltl$d B_a_prod_llist$)))))
(declare-datatypes () ((A_a_prod$ (pair$c (fst$c A$) (snd$c A$)))))
(declare-codatatypes () ((A_a_prod_llist$ (lNil$e) (lCons$e (lhd$e A_a_prod$) (ltl$e A_a_prod_llist$)))))
(declare-datatypes () ((B_a_a_prod_prod$ (pair$d (fst$d B$) (snd$d A_a_prod$)))))
(declare-codatatypes () ((B_a_a_prod_prod_llist$ (lNil$f) (lCons$f (lhd$f B_a_a_prod_prod$) (ltl$f B_a_a_prod_prod_llist$)))))
(declare-datatypes () ((A_b_b_prod_prod$ (pair$e (fst$e A$) (snd$e B_b_prod$)))))
(declare-codatatypes () ((A_b_b_prod_prod_llist$ (lNil$g) (lCons$g (lhd$g A_b_b_prod_prod$) (ltl$g A_b_b_prod_prod_llist$)))))
(declare-datatypes () ((A_b_a_prod_prod$ (pair$f (fst$f A$) (snd$f B_a_prod$)))))
(declare-codatatypes () ((A_b_a_prod_prod_llist$ (lNil$h) (lCons$h (lhd$h A_b_a_prod_prod$) (ltl$h A_b_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_b_prod_prod$ (pair$g (fst$g A$) (snd$g A_b_prod$)))))
(declare-codatatypes () ((A_a_b_prod_prod_llist$ (lNil$i) (lCons$i (lhd$i A_a_b_prod_prod$) (ltl$i A_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod$ (pair$h (fst$h A$) (snd$h A_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_prod_llist$ (lNil$j) (lCons$j (lhd$j A_a_a_prod_prod$) (ltl$j A_a_a_prod_prod_llist$)))))
(declare-datatypes () ((B_b_b_prod_prod$ (pair$i (fst$i B$) (snd$i B_b_prod$)))))
(declare-codatatypes () ((B_b_b_prod_prod_llist$ (lNil$k) (lCons$k (lhd$k B_b_b_prod_prod$) (ltl$k B_b_b_prod_prod_llist$)))))
(declare-datatypes () ((B_b_a_prod_prod$ (pair$j (fst$j B$) (snd$j B_a_prod$)))))
(declare-codatatypes () ((B_b_a_prod_prod_llist$ (lNil$l) (lCons$l (lhd$l B_b_a_prod_prod$) (ltl$l B_b_a_prod_prod_llist$)))))
(declare-fun uu$ () A_a_prod_a_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun min$ (Enat$ Enat$) Enat$)
(declare-fun uua$ () A_b_prod_a_fun$)
(declare-fun uub$ () B_a_prod_b_fun$)
(declare-fun uuc$ () B_b_prod_b_fun$)
(declare-fun uud$ () A_b_b_prod_prod_a_fun$)
(declare-fun uue$ () A_b_a_prod_prod_a_fun$)
(declare-fun uuf$ () A_a_b_prod_prod_a_fun$)
(declare-fun uug$ () A_a_a_prod_prod_a_fun$)
(declare-fun uuh$ () B_b_b_prod_prod_b_fun$)
(declare-fun uui$ () B_b_a_prod_prod_b_fun$)
(declare-fun llcp$ (A_llist$) A_llist_enat_fun$)
(declare-fun lmap$ (A_a_prod_a_fun$ A_a_prod_llist$) A_llist$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun llcp$a (B_llist$) B_llist_enat_fun$)
(declare-fun llcp$b (B_b_prod_llist$) B_b_prod_llist_enat_fun$)
(declare-fun llcp$c (B_a_prod_llist$) B_a_prod_llist_enat_fun$)
(declare-fun llcp$d (A_b_prod_llist$) A_b_prod_llist_enat_fun$)
(declare-fun llcp$e (A_a_prod_llist$) A_a_prod_llist_enat_fun$)
(declare-fun llcp$f (B_a_a_prod_prod_llist$) B_a_a_prod_prod_llist_enat_fun$)
(declare-fun llcp$g (A_b_b_prod_prod_llist$) A_b_b_prod_prod_llist_enat_fun$)
(declare-fun llcp$h (A_b_a_prod_prod_llist$) A_b_a_prod_prod_llist_enat_fun$)
(declare-fun llcp$i (A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist_enat_fun$)
(declare-fun lmap$a (A_b_prod_a_fun$ A_b_prod_llist$) A_llist$)
(declare-fun lmap$b (B_a_prod_b_fun$ B_a_prod_llist$) B_llist$)
(declare-fun lmap$c (B_b_prod_b_fun$ B_b_prod_llist$) B_llist$)
(declare-fun lmap$d (A_b_b_prod_prod_a_fun$ A_b_b_prod_prod_llist$) A_llist$)
(declare-fun lmap$e (A_b_a_prod_prod_a_fun$ A_b_a_prod_prod_llist$) A_llist$)
(declare-fun lmap$f (A_a_b_prod_prod_a_fun$ A_a_b_prod_prod_llist$) A_llist$)
(declare-fun lmap$g (A_a_a_prod_prod_a_fun$ A_a_a_prod_prod_llist$) A_llist$)
(declare-fun lmap$h (B_b_b_prod_prod_b_fun$ B_b_b_prod_prod_llist$) B_llist$)
(declare-fun lmap$i (B_b_a_prod_prod_b_fun$ B_b_a_prod_prod_llist$) B_llist$)
(declare-fun ltake$ (Enat$ A_llist$) A_llist$)
(declare-fun lzip$a (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun lzip$b (B_llist$ A_llist$) B_a_prod_llist$)
(declare-fun lzip$c (B_llist$ B_llist$) B_b_prod_llist$)
(declare-fun lzip$d (A_llist$ B_b_prod_llist$) A_b_b_prod_prod_llist$)
(declare-fun lzip$e (A_llist$ B_a_prod_llist$) A_b_a_prod_prod_llist$)
(declare-fun lzip$f (A_llist$ A_b_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun lzip$g (A_llist$ A_a_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun lzip$h (B_llist$ B_b_prod_llist$) B_b_b_prod_prod_llist$)
(declare-fun lzip$i (B_llist$ B_a_prod_llist$) B_b_a_prod_prod_llist$)
(declare-fun ltake$a (Enat$ B_llist$) B_llist$)
(declare-fun ltake$b (Enat$ B_b_prod_llist$) B_b_prod_llist$)
(declare-fun ltake$c (Enat$ B_a_prod_llist$) B_a_prod_llist$)
(declare-fun ltake$d (Enat$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun ltake$e (Enat$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun ltake$f (Enat$ B_a_a_prod_prod_llist$) B_a_a_prod_prod_llist$)
(declare-fun ltake$g (Enat$ A_b_b_prod_prod_llist$) A_b_b_prod_prod_llist$)
(declare-fun ltake$h (Enat$ A_b_a_prod_prod_llist$) A_b_a_prod_prod_llist$)
(declare-fun ltake$i (Enat$ A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun ltake$j (Enat$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun ltake$k (Enat$ B_b_b_prod_prod_llist$) B_b_b_prod_prod_llist$)
(declare-fun ltake$l (Enat$ B_b_a_prod_prod_llist$) B_b_a_prod_prod_llist$)
(declare-fun fun_app$ (B_b_b_prod_prod_b_fun$ B_b_b_prod_prod$) B$)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (B_b_a_prod_prod_b_fun$ B_b_a_prod_prod$) B$)
(declare-fun fun_app$b (B_b_prod_b_fun$ B_b_prod$) B$)
(declare-fun fun_app$c (B_a_prod_b_fun$ B_a_prod$) B$)
(declare-fun fun_app$d (A_b_b_prod_prod_a_fun$ A_b_b_prod_prod$) A$)
(declare-fun fun_app$e (A_b_a_prod_prod_a_fun$ A_b_a_prod_prod$) A$)
(declare-fun fun_app$f (A_a_b_prod_prod_a_fun$ A_a_b_prod_prod$) A$)
(declare-fun fun_app$g (A_a_a_prod_prod_a_fun$ A_a_a_prod_prod$) A$)
(declare-fun fun_app$h (A_b_prod_a_fun$ A_b_prod$) A$)
(declare-fun fun_app$i (A_a_prod_a_fun$ A_a_prod$) A$)
(declare-fun fun_app$j (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$k (B_llist_enat_fun$ B_llist$) Enat$)
(declare-fun fun_app$l (B_b_prod_llist_enat_fun$ B_b_prod_llist$) Enat$)
(declare-fun fun_app$m (B_a_prod_llist_enat_fun$ B_a_prod_llist$) Enat$)
(declare-fun fun_app$n (A_b_prod_llist_enat_fun$ A_b_prod_llist$) Enat$)
(declare-fun fun_app$o (A_a_prod_llist_enat_fun$ A_a_prod_llist$) Enat$)
(declare-fun fun_app$p (B_a_a_prod_prod_llist_enat_fun$ B_a_a_prod_prod_llist$) Enat$)
(declare-fun fun_app$q (A_b_b_prod_prod_llist_enat_fun$ A_b_b_prod_prod_llist$) Enat$)
(declare-fun fun_app$r (A_b_a_prod_prod_llist_enat_fun$ A_b_a_prod_prod_llist$) Enat$)
(declare-fun fun_app$s (A_a_b_prod_prod_llist_enat_fun$ A_a_b_prod_prod_llist$) Enat$)
(declare-fun llength$a (B_llist$) Enat$)
(declare-fun llength$b (B_b_prod_llist$) Enat$)
(declare-fun llength$c (B_a_prod_llist$) Enat$)
(declare-fun llength$d (A_b_prod_llist$) Enat$)
(declare-fun llength$e (A_a_prod_llist$) Enat$)
(declare-fun llength$f (B_a_a_prod_prod_llist$) Enat$)
(declare-fun llength$g (A_b_b_prod_prod_llist$) Enat$)
(declare-fun llength$h (A_b_a_prod_prod_llist$) Enat$)
(declare-fun llength$i (A_a_b_prod_prod_llist$) Enat$)
(declare-fun llength$j (A_a_a_prod_prod_llist$) Enat$)
(declare-fun llength$k (B_b_b_prod_prod_llist$) Enat$)
(declare-fun llength$l (B_b_a_prod_prod_llist$) Enat$)
(assert (! (forall ((?v0 B_b_b_prod_prod$)) (! (= (fun_app$ uuh$ ?v0) (fst$i ?v0)) :pattern ((fun_app$ uuh$ ?v0)))) :named a0))
(assert (! (forall ((?v0 B_b_a_prod_prod$)) (! (= (fun_app$a uui$ ?v0) (fst$j ?v0)) :pattern ((fun_app$a uui$ ?v0)))) :named a1))
(assert (! (forall ((?v0 B_b_prod$)) (! (= (fun_app$b uuc$ ?v0) (fst$a ?v0)) :pattern ((fun_app$b uuc$ ?v0)))) :named a2))
(assert (! (forall ((?v0 B_a_prod$)) (! (= (fun_app$c uub$ ?v0) (fst$b ?v0)) :pattern ((fun_app$c uub$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A_b_b_prod_prod$)) (! (= (fun_app$d uud$ ?v0) (fst$e ?v0)) :pattern ((fun_app$d uud$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_b_a_prod_prod$)) (! (= (fun_app$e uue$ ?v0) (fst$f ?v0)) :pattern ((fun_app$e uue$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_a_b_prod_prod$)) (! (= (fun_app$f uuf$ ?v0) (fst$g ?v0)) :pattern ((fun_app$f uuf$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_a_a_prod_prod$)) (! (= (fun_app$g uug$ ?v0) (fst$h ?v0)) :pattern ((fun_app$g uug$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$h uua$ ?v0) (fst$ ?v0)) :pattern ((fun_app$h uua$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_a_prod$)) (! (= (fun_app$i uu$ ?v0) (fst$c ?v0)) :pattern ((fun_app$i uu$ ?v0)))) :named a9))
(assert (! (not (= (lzip$ xs$ ys$) (lzip$ (ltake$ (min$ (llength$ xs$) (llength$a ys$)) xs$) (ltake$a (min$ (llength$ xs$) (llength$a ys$)) ys$)))) :named a10))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_llist$)) (= (ltake$ ?v0 (ltake$ ?v1 ?v2)) (ltake$ (min$ ?v0 ?v1) ?v2))) :named a11))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 B_llist$)) (= (ltake$a ?v0 (ltake$a ?v1 ?v2)) (ltake$a (min$ ?v0 ?v1) ?v2))) :named a12))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 B_b_prod_llist$)) (= (ltake$b ?v0 (ltake$b ?v1 ?v2)) (ltake$b (min$ ?v0 ?v1) ?v2))) :named a13))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 B_a_prod_llist$)) (= (ltake$c ?v0 (ltake$c ?v1 ?v2)) (ltake$c (min$ ?v0 ?v1) ?v2))) :named a14))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_b_prod_llist$)) (= (ltake$d ?v0 (ltake$d ?v1 ?v2)) (ltake$d (min$ ?v0 ?v1) ?v2))) :named a15))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_a_prod_llist$)) (= (ltake$e ?v0 (ltake$e ?v1 ?v2)) (ltake$e (min$ ?v0 ?v1) ?v2))) :named a16))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 B_a_a_prod_prod_llist$)) (= (ltake$f ?v0 (ltake$f ?v1 ?v2)) (ltake$f (min$ ?v0 ?v1) ?v2))) :named a17))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_b_b_prod_prod_llist$)) (= (ltake$g ?v0 (ltake$g ?v1 ?v2)) (ltake$g (min$ ?v0 ?v1) ?v2))) :named a18))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_b_a_prod_prod_llist$)) (= (ltake$h ?v0 (ltake$h ?v1 ?v2)) (ltake$h (min$ ?v0 ?v1) ?v2))) :named a19))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_a_b_prod_prod_llist$)) (= (ltake$i ?v0 (ltake$i ?v1 ?v2)) (ltake$i (min$ ?v0 ?v1) ?v2))) :named a20))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$)) (= (llength$ (ltake$ ?v0 ?v1)) (min$ ?v0 (llength$ ?v1)))) :named a21))
(assert (! (forall ((?v0 Enat$) (?v1 B_llist$)) (= (llength$a (ltake$a ?v0 ?v1)) (min$ ?v0 (llength$a ?v1)))) :named a22))
(assert (! (forall ((?v0 Enat$) (?v1 B_b_prod_llist$)) (= (llength$b (ltake$b ?v0 ?v1)) (min$ ?v0 (llength$b ?v1)))) :named a23))
(assert (! (forall ((?v0 Enat$) (?v1 B_a_prod_llist$)) (= (llength$c (ltake$c ?v0 ?v1)) (min$ ?v0 (llength$c ?v1)))) :named a24))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_prod_llist$)) (= (llength$d (ltake$d ?v0 ?v1)) (min$ ?v0 (llength$d ?v1)))) :named a25))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_prod_llist$)) (= (llength$e (ltake$e ?v0 ?v1)) (min$ ?v0 (llength$e ?v1)))) :named a26))
(assert (! (forall ((?v0 Enat$) (?v1 B_a_a_prod_prod_llist$)) (= (llength$f (ltake$f ?v0 ?v1)) (min$ ?v0 (llength$f ?v1)))) :named a27))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_b_prod_prod_llist$)) (= (llength$g (ltake$g ?v0 ?v1)) (min$ ?v0 (llength$g ?v1)))) :named a28))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_a_prod_prod_llist$)) (= (llength$h (ltake$h ?v0 ?v1)) (min$ ?v0 (llength$h ?v1)))) :named a29))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_b_prod_prod_llist$)) (= (llength$i (ltake$i ?v0 ?v1)) (min$ ?v0 (llength$i ?v1)))) :named a30))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (llength$e (lzip$a ?v0 ?v1)) (min$ (llength$ ?v0) (llength$ ?v1)))) :named a31))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$)) (= (llength$d (lzip$ ?v0 ?v1)) (min$ (llength$ ?v0) (llength$a ?v1)))) :named a32))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$)) (= (llength$c (lzip$b ?v0 ?v1)) (min$ (llength$a ?v0) (llength$ ?v1)))) :named a33))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (llength$b (lzip$c ?v0 ?v1)) (min$ (llength$a ?v0) (llength$a ?v1)))) :named a34))
(assert (! (forall ((?v0 A_llist$) (?v1 B_b_prod_llist$)) (= (llength$g (lzip$d ?v0 ?v1)) (min$ (llength$ ?v0) (llength$b ?v1)))) :named a35))
(assert (! (forall ((?v0 A_llist$) (?v1 B_a_prod_llist$)) (= (llength$h (lzip$e ?v0 ?v1)) (min$ (llength$ ?v0) (llength$c ?v1)))) :named a36))
(assert (! (forall ((?v0 A_llist$) (?v1 A_b_prod_llist$)) (= (llength$i (lzip$f ?v0 ?v1)) (min$ (llength$ ?v0) (llength$d ?v1)))) :named a37))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (llength$j (lzip$g ?v0 ?v1)) (min$ (llength$ ?v0) (llength$e ?v1)))) :named a38))
(assert (! (forall ((?v0 B_llist$) (?v1 B_b_prod_llist$)) (= (llength$k (lzip$h ?v0 ?v1)) (min$ (llength$a ?v0) (llength$b ?v1)))) :named a39))
(assert (! (forall ((?v0 B_llist$) (?v1 B_a_prod_llist$)) (= (llength$l (lzip$i ?v0 ?v1)) (min$ (llength$a ?v0) (llength$c ?v1)))) :named a40))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$)) (= (ltake$e ?v0 (lzip$a ?v1 ?v2)) (lzip$a (ltake$ ?v0 ?v1) (ltake$ ?v0 ?v2)))) :named a41))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 B_llist$)) (= (ltake$d ?v0 (lzip$ ?v1 ?v2)) (lzip$ (ltake$ ?v0 ?v1) (ltake$a ?v0 ?v2)))) :named a42))
(assert (! (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 A_llist$)) (= (ltake$c ?v0 (lzip$b ?v1 ?v2)) (lzip$b (ltake$a ?v0 ?v1) (ltake$ ?v0 ?v2)))) :named a43))
(assert (! (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 B_llist$)) (= (ltake$b ?v0 (lzip$c ?v1 ?v2)) (lzip$c (ltake$a ?v0 ?v1) (ltake$a ?v0 ?v2)))) :named a44))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 B_b_prod_llist$)) (= (ltake$g ?v0 (lzip$d ?v1 ?v2)) (lzip$d (ltake$ ?v0 ?v1) (ltake$b ?v0 ?v2)))) :named a45))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 B_a_prod_llist$)) (= (ltake$h ?v0 (lzip$e ?v1 ?v2)) (lzip$e (ltake$ ?v0 ?v1) (ltake$c ?v0 ?v2)))) :named a46))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_b_prod_llist$)) (= (ltake$i ?v0 (lzip$f ?v1 ?v2)) (lzip$f (ltake$ ?v0 ?v1) (ltake$d ?v0 ?v2)))) :named a47))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_a_prod_llist$)) (= (ltake$j ?v0 (lzip$g ?v1 ?v2)) (lzip$g (ltake$ ?v0 ?v1) (ltake$e ?v0 ?v2)))) :named a48))
(assert (! (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 B_b_prod_llist$)) (= (ltake$k ?v0 (lzip$h ?v1 ?v2)) (lzip$h (ltake$a ?v0 ?v1) (ltake$b ?v0 ?v2)))) :named a49))
(assert (! (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 B_a_prod_llist$)) (= (ltake$l ?v0 (lzip$i ?v1 ?v2)) (lzip$i (ltake$a ?v0 ?v1) (ltake$c ?v0 ?v2)))) :named a50))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (min$ (min$ ?v0 ?v1) ?v1) (min$ ?v0 ?v1))) :named a51))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (min$ ?v0 (min$ ?v0 ?v1)) (min$ ?v0 ?v1))) :named a52))
(assert (! (forall ((?v0 Enat$)) (= (min$ ?v0 ?v0) ?v0)) :named a53))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 Enat$) (?v3 A_llist$)) (= (fun_app$j (llcp$ (ltake$ ?v0 ?v1)) (ltake$ ?v2 ?v3)) (min$ (min$ ?v0 ?v2) (fun_app$j (llcp$ ?v1) ?v3)))) :named a54))
(assert (! (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 Enat$) (?v3 B_llist$)) (= (fun_app$k (llcp$a (ltake$a ?v0 ?v1)) (ltake$a ?v2 ?v3)) (min$ (min$ ?v0 ?v2) (fun_app$k (llcp$a ?v1) ?v3)))) :named a55))
(assert (! (forall ((?v0 Enat$) (?v1 B_b_prod_llist$) (?v2 Enat$) (?v3 B_b_prod_llist$)) (= (fun_app$l (llcp$b (ltake$b ?v0 ?v1)) (ltake$b ?v2 ?v3)) (min$ (min$ ?v0 ?v2) (fun_app$l (llcp$b ?v1) ?v3)))) :named a56))
(assert (! (forall ((?v0 Enat$) (?v1 B_a_prod_llist$) (?v2 Enat$) (?v3 B_a_prod_llist$)) (= (fun_app$m (llcp$c (ltake$c ?v0 ?v1)) (ltake$c ?v2 ?v3)) (min$ (min$ ?v0 ?v2) (fun_app$m (llcp$c ?v1) ?v3)))) :named a57))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_prod_llist$) (?v2 Enat$) (?v3 A_b_prod_llist$)) (= (fun_app$n (llcp$d (ltake$d ?v0 ?v1)) (ltake$d ?v2 ?v3)) (min$ (min$ ?v0 ?v2) (fun_app$n (llcp$d ?v1) ?v3)))) :named a58))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_prod_llist$) (?v2 Enat$) (?v3 A_a_prod_llist$)) (= (fun_app$o (llcp$e (ltake$e ?v0 ?v1)) (ltake$e ?v2 ?v3)) (min$ (min$ ?v0 ?v2) (fun_app$o (llcp$e ?v1) ?v3)))) :named a59))
(assert (! (forall ((?v0 Enat$) (?v1 B_a_a_prod_prod_llist$) (?v2 Enat$) (?v3 B_a_a_prod_prod_llist$)) (= (fun_app$p (llcp$f (ltake$f ?v0 ?v1)) (ltake$f ?v2 ?v3)) (min$ (min$ ?v0 ?v2) (fun_app$p (llcp$f ?v1) ?v3)))) :named a60))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_b_prod_prod_llist$) (?v2 Enat$) (?v3 A_b_b_prod_prod_llist$)) (= (fun_app$q (llcp$g (ltake$g ?v0 ?v1)) (ltake$g ?v2 ?v3)) (min$ (min$ ?v0 ?v2) (fun_app$q (llcp$g ?v1) ?v3)))) :named a61))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_a_prod_prod_llist$) (?v2 Enat$) (?v3 A_b_a_prod_prod_llist$)) (= (fun_app$r (llcp$h (ltake$h ?v0 ?v1)) (ltake$h ?v2 ?v3)) (min$ (min$ ?v0 ?v2) (fun_app$r (llcp$h ?v1) ?v3)))) :named a62))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_b_prod_prod_llist$) (?v2 Enat$) (?v3 A_a_b_prod_prod_llist$)) (= (fun_app$s (llcp$i (ltake$i ?v0 ?v1)) (ltake$i ?v2 ?v3)) (min$ (min$ ?v0 ?v2) (fun_app$s (llcp$i ?v1) ?v3)))) :named a63))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (min$ (min$ ?v0 ?v1) ?v2) (min$ ?v0 (min$ ?v1 ?v2)))) :named a64))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (min$ ?v0 (min$ ?v1 ?v2)) (min$ ?v1 (min$ ?v0 ?v2)))) :named a65))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (min$ ?v0 ?v1) (min$ ?v1 ?v0))) :named a66))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$j (llcp$ (ltake$ ?v0 ?v1)) ?v2) (min$ ?v0 (fun_app$j (llcp$ ?v1) ?v2)))) :named a67))
(assert (! (forall ((?v0 Enat$) (?v1 B_llist$) (?v2 B_llist$)) (= (fun_app$k (llcp$a (ltake$a ?v0 ?v1)) ?v2) (min$ ?v0 (fun_app$k (llcp$a ?v1) ?v2)))) :named a68))
(assert (! (forall ((?v0 Enat$) (?v1 B_b_prod_llist$) (?v2 B_b_prod_llist$)) (= (fun_app$l (llcp$b (ltake$b ?v0 ?v1)) ?v2) (min$ ?v0 (fun_app$l (llcp$b ?v1) ?v2)))) :named a69))
(assert (! (forall ((?v0 Enat$) (?v1 B_a_prod_llist$) (?v2 B_a_prod_llist$)) (= (fun_app$m (llcp$c (ltake$c ?v0 ?v1)) ?v2) (min$ ?v0 (fun_app$m (llcp$c ?v1) ?v2)))) :named a70))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (fun_app$n (llcp$d (ltake$d ?v0 ?v1)) ?v2) (min$ ?v0 (fun_app$n (llcp$d ?v1) ?v2)))) :named a71))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (= (fun_app$o (llcp$e (ltake$e ?v0 ?v1)) ?v2) (min$ ?v0 (fun_app$o (llcp$e ?v1) ?v2)))) :named a72))
(assert (! (forall ((?v0 Enat$) (?v1 B_a_a_prod_prod_llist$) (?v2 B_a_a_prod_prod_llist$)) (= (fun_app$p (llcp$f (ltake$f ?v0 ?v1)) ?v2) (min$ ?v0 (fun_app$p (llcp$f ?v1) ?v2)))) :named a73))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_b_prod_prod_llist$) (?v2 A_b_b_prod_prod_llist$)) (= (fun_app$q (llcp$g (ltake$g ?v0 ?v1)) ?v2) (min$ ?v0 (fun_app$q (llcp$g ?v1) ?v2)))) :named a74))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_a_prod_prod_llist$) (?v2 A_b_a_prod_prod_llist$)) (= (fun_app$r (llcp$h (ltake$h ?v0 ?v1)) ?v2) (min$ ?v0 (fun_app$r (llcp$h ?v1) ?v2)))) :named a75))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_b_prod_prod_llist$) (?v2 A_a_b_prod_prod_llist$)) (= (fun_app$s (llcp$i (ltake$i ?v0 ?v1)) ?v2) (min$ ?v0 (fun_app$s (llcp$i ?v1) ?v2)))) :named a76))
(assert (! (forall ((?v0 A_llist$) (?v1 Enat$) (?v2 A_llist$)) (= (fun_app$j (llcp$ ?v0) (ltake$ ?v1 ?v2)) (min$ ?v1 (fun_app$j (llcp$ ?v0) ?v2)))) :named a77))
(assert (! (forall ((?v0 B_llist$) (?v1 Enat$) (?v2 B_llist$)) (= (fun_app$k (llcp$a ?v0) (ltake$a ?v1 ?v2)) (min$ ?v1 (fun_app$k (llcp$a ?v0) ?v2)))) :named a78))
(assert (! (forall ((?v0 B_b_prod_llist$) (?v1 Enat$) (?v2 B_b_prod_llist$)) (= (fun_app$l (llcp$b ?v0) (ltake$b ?v1 ?v2)) (min$ ?v1 (fun_app$l (llcp$b ?v0) ?v2)))) :named a79))
(assert (! (forall ((?v0 B_a_prod_llist$) (?v1 Enat$) (?v2 B_a_prod_llist$)) (= (fun_app$m (llcp$c ?v0) (ltake$c ?v1 ?v2)) (min$ ?v1 (fun_app$m (llcp$c ?v0) ?v2)))) :named a80))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 Enat$) (?v2 A_b_prod_llist$)) (= (fun_app$n (llcp$d ?v0) (ltake$d ?v1 ?v2)) (min$ ?v1 (fun_app$n (llcp$d ?v0) ?v2)))) :named a81))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 Enat$) (?v2 A_a_prod_llist$)) (= (fun_app$o (llcp$e ?v0) (ltake$e ?v1 ?v2)) (min$ ?v1 (fun_app$o (llcp$e ?v0) ?v2)))) :named a82))
(assert (! (forall ((?v0 B_a_a_prod_prod_llist$) (?v1 Enat$) (?v2 B_a_a_prod_prod_llist$)) (= (fun_app$p (llcp$f ?v0) (ltake$f ?v1 ?v2)) (min$ ?v1 (fun_app$p (llcp$f ?v0) ?v2)))) :named a83))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$) (?v1 Enat$) (?v2 A_b_b_prod_prod_llist$)) (= (fun_app$q (llcp$g ?v0) (ltake$g ?v1 ?v2)) (min$ ?v1 (fun_app$q (llcp$g ?v0) ?v2)))) :named a84))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$) (?v1 Enat$) (?v2 A_b_a_prod_prod_llist$)) (= (fun_app$r (llcp$h ?v0) (ltake$h ?v1 ?v2)) (min$ ?v1 (fun_app$r (llcp$h ?v0) ?v2)))) :named a85))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 Enat$) (?v2 A_a_b_prod_prod_llist$)) (= (fun_app$s (llcp$i ?v0) (ltake$i ?v1 ?v2)) (min$ ?v1 (fun_app$s (llcp$i ?v0) ?v2)))) :named a86))
(assert (! (forall ((?v0 A_llist$) (?v1 Enat$)) (! (=> (less_eq$ (llength$ ?v0) ?v1) (= (ltake$ ?v1 ?v0) ?v0)) :pattern ((ltake$ ?v1 ?v0)))) :named a87))
(assert (! (forall ((?v0 B_llist$) (?v1 Enat$)) (! (=> (less_eq$ (llength$a ?v0) ?v1) (= (ltake$a ?v1 ?v0) ?v0)) :pattern ((ltake$a ?v1 ?v0)))) :named a88))
(assert (! (forall ((?v0 B_b_prod_llist$) (?v1 Enat$)) (! (=> (less_eq$ (llength$b ?v0) ?v1) (= (ltake$b ?v1 ?v0) ?v0)) :pattern ((ltake$b ?v1 ?v0)))) :named a89))
(assert (! (forall ((?v0 B_a_prod_llist$) (?v1 Enat$)) (! (=> (less_eq$ (llength$c ?v0) ?v1) (= (ltake$c ?v1 ?v0) ?v0)) :pattern ((ltake$c ?v1 ?v0)))) :named a90))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 Enat$)) (! (=> (less_eq$ (llength$d ?v0) ?v1) (= (ltake$d ?v1 ?v0) ?v0)) :pattern ((ltake$d ?v1 ?v0)))) :named a91))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 Enat$)) (! (=> (less_eq$ (llength$e ?v0) ?v1) (= (ltake$e ?v1 ?v0) ?v0)) :pattern ((ltake$e ?v1 ?v0)))) :named a92))
(assert (! (forall ((?v0 B_a_a_prod_prod_llist$) (?v1 Enat$)) (! (=> (less_eq$ (llength$f ?v0) ?v1) (= (ltake$f ?v1 ?v0) ?v0)) :pattern ((ltake$f ?v1 ?v0)))) :named a93))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$) (?v1 Enat$)) (! (=> (less_eq$ (llength$g ?v0) ?v1) (= (ltake$g ?v1 ?v0) ?v0)) :pattern ((ltake$g ?v1 ?v0)))) :named a94))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$) (?v1 Enat$)) (! (=> (less_eq$ (llength$h ?v0) ?v1) (= (ltake$h ?v1 ?v0) ?v0)) :pattern ((ltake$h ?v1 ?v0)))) :named a95))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 Enat$)) (! (=> (less_eq$ (llength$i ?v0) ?v1) (= (ltake$i ?v1 ?v0) ?v0)) :pattern ((ltake$i ?v1 ?v0)))) :named a96))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$j (llcp$ ?v0) ?v0) (llength$ ?v0)) :pattern ((llcp$ ?v0)))) :named a97))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$k (llcp$a ?v0) ?v0) (llength$a ?v0)) :pattern ((llcp$a ?v0)))) :named a98))
(assert (! (forall ((?v0 B_b_prod_llist$)) (! (= (fun_app$l (llcp$b ?v0) ?v0) (llength$b ?v0)) :pattern ((llcp$b ?v0)))) :named a99))
(assert (! (forall ((?v0 B_a_prod_llist$)) (! (= (fun_app$m (llcp$c ?v0) ?v0) (llength$c ?v0)) :pattern ((llcp$c ?v0)))) :named a100))
(assert (! (forall ((?v0 A_b_prod_llist$)) (! (= (fun_app$n (llcp$d ?v0) ?v0) (llength$d ?v0)) :pattern ((llcp$d ?v0)))) :named a101))
(assert (! (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$o (llcp$e ?v0) ?v0) (llength$e ?v0)) :pattern ((llcp$e ?v0)))) :named a102))
(assert (! (forall ((?v0 B_a_a_prod_prod_llist$)) (! (= (fun_app$p (llcp$f ?v0) ?v0) (llength$f ?v0)) :pattern ((llcp$f ?v0)))) :named a103))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$)) (! (= (fun_app$q (llcp$g ?v0) ?v0) (llength$g ?v0)) :pattern ((llcp$g ?v0)))) :named a104))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$)) (! (= (fun_app$r (llcp$h ?v0) ?v0) (llength$h ?v0)) :pattern ((llcp$h ?v0)))) :named a105))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$)) (! (= (fun_app$s (llcp$i ?v0) ?v0) (llength$i ?v0)) :pattern ((llcp$i ?v0)))) :named a106))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lmap$ uu$ (lzip$a ?v0 ?v1)) (ltake$ (min$ (llength$ ?v0) (llength$ ?v1)) ?v0))) :named a107))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$)) (= (lmap$a uua$ (lzip$ ?v0 ?v1)) (ltake$ (min$ (llength$ ?v0) (llength$a ?v1)) ?v0))) :named a108))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$)) (= (lmap$b uub$ (lzip$b ?v0 ?v1)) (ltake$a (min$ (llength$a ?v0) (llength$ ?v1)) ?v0))) :named a109))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (lmap$c uuc$ (lzip$c ?v0 ?v1)) (ltake$a (min$ (llength$a ?v0) (llength$a ?v1)) ?v0))) :named a110))
(assert (! (forall ((?v0 A_llist$) (?v1 B_b_prod_llist$)) (= (lmap$d uud$ (lzip$d ?v0 ?v1)) (ltake$ (min$ (llength$ ?v0) (llength$b ?v1)) ?v0))) :named a111))
(assert (! (forall ((?v0 A_llist$) (?v1 B_a_prod_llist$)) (= (lmap$e uue$ (lzip$e ?v0 ?v1)) (ltake$ (min$ (llength$ ?v0) (llength$c ?v1)) ?v0))) :named a112))
(assert (! (forall ((?v0 A_llist$) (?v1 A_b_prod_llist$)) (= (lmap$f uuf$ (lzip$f ?v0 ?v1)) (ltake$ (min$ (llength$ ?v0) (llength$d ?v1)) ?v0))) :named a113))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (lmap$g uug$ (lzip$g ?v0 ?v1)) (ltake$ (min$ (llength$ ?v0) (llength$e ?v1)) ?v0))) :named a114))
(assert (! (forall ((?v0 B_llist$) (?v1 B_b_prod_llist$)) (= (lmap$h uuh$ (lzip$h ?v0 ?v1)) (ltake$a (min$ (llength$a ?v0) (llength$b ?v1)) ?v0))) :named a115))
(assert (! (forall ((?v0 B_llist$) (?v1 B_a_prod_llist$)) (= (lmap$i uui$ (lzip$i ?v0 ?v1)) (ltake$a (min$ (llength$a ?v0) (llength$c ?v1)) ?v0))) :named a116))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (less_eq$ ?v0 (min$ ?v1 ?v2)) (and (less_eq$ ?v0 ?v1) (less_eq$ ?v0 ?v2)))) :named a117))
(check-sat)
;(get-unsat-core)
