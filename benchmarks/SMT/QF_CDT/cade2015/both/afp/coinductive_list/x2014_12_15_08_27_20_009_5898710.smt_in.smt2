; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 630
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun f$ (B$) A_llist$)
(declare-fun y$ () B_set$)
(declare-fun bot$ () B_set$)
(declare-fun lub$ (B_set$) B$)
(declare-fun max$ (A_a_bool_fun_fun$ A$ A$) A$)
(declare-fun min$ (A_a_bool_fun_fun$ A$ A$) A$)
(declare-fun ord$ () B_b_bool_fun_fun$)
(declare-fun chain$ (B_b_bool_fun_fun$ B_set$) Bool)
(declare-fun atMost$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun member$ (B$ B_set$) Bool)
(declare-fun atLeast$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun less_eq$ () A_a_bool_fun_fun$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun lsorted$ (A_a_bool_fun_fun$ A_llist$) Bool)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun atLeastAtMost$ (A_a_bool_fun_fun$ A$ A$) A_set$)
(assert (! (not (lsorted$ less_eq$ (f$ (lub$ y$)))) :named a0))
(assert (! (not (= y$ bot$)) :named a1))
(assert (! (chain$ ord$ y$) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (= ?v0 ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a4))
(assert (! (forall ((?v0 B$)) (=> (member$ ?v0 y$) (lsorted$ less_eq$ (f$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (max$ less_eq$ ?v0 ?v1) (ite (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) ?v1 ?v0)) :pattern ((max$ less_eq$ ?v0 ?v1)))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (min$ less_eq$ ?v0 ?v1) (ite (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) ?v0 ?v1)) :pattern ((min$ less_eq$ ?v0 ?v1)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (= (member$a ?v0 (atLeastAtMost$ less_eq$ ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2)))) :named a8))
(assert (! (lsorted$ less_eq$ lNil$) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lsorted$ less_eq$ ?v1)) (lsorted$ less_eq$ ?v0))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (lsorted$ less_eq$ (lCons$ ?v1 ?v2))) (lsorted$ less_eq$ (lCons$ ?v0 (lCons$ ?v1 ?v2))))) :named a11))
(assert (! (forall ((?v0 A_llist$)) (=> (lsorted$ less_eq$ ?v0) (lsorted$ less_eq$ (ltl$ ?v0)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (member$a ?v0 (atMost$ less_eq$ ?v1)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v1))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (member$a ?v0 (atLeast$ less_eq$ ?v1)) (fun_app$ (fun_app$a less_eq$ ?v1) ?v0))) :named a14))
(assert (! (= (lsorted$ less_eq$ lNil$) true) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (lsorted$ less_eq$ (lCons$ ?v0 (lCons$ ?v1 ?v2))) (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (lsorted$ less_eq$ (lCons$ ?v1 ?v2)))) :pattern ((lCons$ ?v0 (lCons$ ?v1 ?v2))))) :named a16))
(assert (! (forall ((?v0 A_llist$)) (= (lsorted$ less_eq$ ?v0) (or (= ?v0 lNil$) (or (exists ((?v1 A$)) (= ?v0 (lCons$ ?v1 lNil$))) (exists ((?v1 A$) (?v2 A$) (?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 (lCons$ ?v2 ?v3))) (and (fun_app$ (fun_app$a less_eq$ ?v1) ?v2) (lsorted$ less_eq$ (lCons$ ?v2 ?v3))))))))) :named a17))
(check-sat)
;(get-unsat-core)
