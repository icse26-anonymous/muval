; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 630
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun xsa$ () A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lsetp$ (A_llist$) A_bool_fun$)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun lfilter$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun lmember$ (A$ A_llist$) Bool)
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun llist_all2$ (A_a_bool_fun_fun$ A_llist$ A_llist$) Bool)
(assert (! (not (exists ((?v0 A$)) (and (member$ ?v0 (lset$ xsa$)) (fun_app$ p$ ?v0)))) :named a0))
(assert (! (not (lnull$ (lfilter$ p$ xsa$))) :named a1))
(assert (! (not (lfinite$ xsa$)) :named a2))
(assert (! (lfinite$ (lfilter$ p$ xsa$)) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_bool_fun$) (?v3 A_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 (lset$ ?v1)) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (lfilter$ ?v2 ?v0) (lfilter$ ?v3 ?v1)))) :named a4))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lfilter$ ?v0 (lfilter$ ?v0 ?v1)) (lfilter$ ?v0 ?v1))) :named a5))
(assert (! (lfinite$ (lfilter$ p$ xs$)) :named a6))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lnull$ (lfilter$ ?v0 ?v1)) (forall ((?v2 A$)) (=> (member$ ?v2 (lset$ ?v1)) (not (fun_app$ ?v0 ?v2)))))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$ ?v0 (lset$ ?v1)) (lmember$ ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$ ?v0 (lset$ ?v1)) (fun_app$ (lsetp$ ?v1) ?v0))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (fun_app$ (lsetp$ ?v0) ?v1) (member$ ?v1 (lset$ ?v0)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_bool_fun$) (?v3 A_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 (lset$ ?v1)) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (ldropWhile$ ?v2 ?v0) (ldropWhile$ ?v3 ?v1)))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_bool_fun$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ (ldropWhile$ ?v1 ?v2))) (member$ ?v0 (lset$ ?v2)))) :named a12))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (= (llist_all2$ ?v0 ?v1 ?v1) (forall ((?v2 A$)) (=> (member$ ?v2 (lset$ ?v1)) (fun_app$ (fun_app$a ?v0 ?v2) ?v2))))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 Nat$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ (ldropn$ ?v1 ?v2))) (member$ ?v0 (lset$ ?v2)))) :named a14))
(assert (! (not (lfinite$ xs$)) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (= (lfinite$ (ldropn$ ?v0 ?v1)) (lfinite$ ?v1))) :named a16))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lnull$ (ldropWhile$ ?v0 ?v1)) (forall ((?v2 A$)) (=> (member$ ?v2 (lset$ ?v1)) (fun_app$ ?v0 ?v2))))) :named a17))
(check-sat)
;(get-unsat-core)
