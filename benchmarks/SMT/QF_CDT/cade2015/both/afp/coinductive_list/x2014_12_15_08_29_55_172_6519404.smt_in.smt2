; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 629
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort A_set_a_set_fun$ 0)
(declare-sort A_set_a_bool_fun_fun$ 0)
(declare-sort A_llist_a_bool_fun_fun$ 0)
(declare-sort A_bool_fun_a_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun uu$ () A_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun inf$ (A_set$) A_set_a_set_fun$)
(declare-fun uua$ (A_bool_fun$) A_llist_a_bool_fun_fun$)
(declare-fun uub$ (A_bool_fun$) A_bool_fun_a_bool_fun_fun$)
(declare-fun uuc$ (A_set$) A_set_a_bool_fun_fun$)
(declare-fun uud$ (A_set$) A_bool_fun$)
(declare-fun inf$a (A_bool_fun$) A_bool_fun_a_bool_fun_fun$)
(declare-fun inf$b (Bool) Bool_bool_fun$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun lfilter$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun fun_app$a (A_llist_a_bool_fun_fun$ A_llist$) A_bool_fun$)
(declare-fun fun_app$b (A_set_a_bool_fun_fun$ A_set$) A_bool_fun$)
(declare-fun fun_app$c (A_bool_fun_a_bool_fun_fun$ A_bool_fun$) A_bool_fun$)
(declare-fun fun_app$d (A_set_a_set_fun$ A_set$) A_set$)
(declare-fun fun_app$e (Bool_bool_fun$ Bool) Bool)
(assert (! (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$ (uud$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$ (uud$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$)) (! (= (fun_app$ (fun_app$a (uua$ ?v0) ?v1) ?v2) (and (member$ ?v2 (lset$ ?v1)) (fun_app$ ?v0 ?v2))) :pattern ((fun_app$ (fun_app$a (uua$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A$)) (! (= (fun_app$ (fun_app$b (uuc$ ?v0) ?v1) ?v2) (and (member$ ?v2 ?v0) (member$ ?v2 ?v1))) :pattern ((fun_app$ (fun_app$b (uuc$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$ (fun_app$c (uub$ ?v0) ?v1) ?v2) (and (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$c (uub$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uu$ ?v0) true) :pattern ((fun_app$ uu$ ?v0)))) :named a4))
(assert (! (not (= (lset$ (lfilter$ p$ xs$)) (fun_app$d (inf$ (lset$ xs$)) (collect$ p$)))) :named a5))
(assert (! (forall ((?v0 A_llist$)) (= (lfilter$ uu$ ?v0) ?v0)) :named a6))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lset$ (lfilter$ ?v0 ?v1)) (collect$ (fun_app$a (uua$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (member$ ?v0 (fun_app$d (inf$ ?v1) ?v2)) (and (member$ ?v0 ?v1) (member$ ?v0 ?v2)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 ?v1) (member$ ?v0 ?v2)) (member$ ?v0 (fun_app$d (inf$ ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$ (fun_app$c (inf$a ?v0) ?v1) ?v2) (fun_app$e (inf$b (fun_app$ ?v0 ?v2)) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$c (inf$a ?v0) ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 Bool) (?v1 Bool)) (= (fun_app$e (inf$b (fun_app$e (inf$b ?v0) ?v1)) ?v1) (fun_app$e (inf$b ?v0) ?v1))) :named a11))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (= (fun_app$c (inf$a (fun_app$c (inf$a ?v0) ?v1)) ?v1) (fun_app$c (inf$a ?v0) ?v1))) :named a12))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$d (inf$ (fun_app$d (inf$ ?v0) ?v1)) ?v1) (fun_app$d (inf$ ?v0) ?v1))) :named a13))
(assert (! (forall ((?v0 Bool) (?v1 Bool)) (= (fun_app$e (inf$b (fun_app$e (inf$b ?v0) ?v1)) ?v1) (fun_app$e (inf$b ?v0) ?v1))) :named a14))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (= (fun_app$c (inf$a (fun_app$c (inf$a ?v0) ?v1)) ?v1) (fun_app$c (inf$a ?v0) ?v1))) :named a15))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$d (inf$ (fun_app$d (inf$ ?v0) ?v1)) ?v1) (fun_app$d (inf$ ?v0) ?v1))) :named a16))
(assert (! (forall ((?v0 Bool) (?v1 Bool)) (= (fun_app$e (inf$b ?v0) (fun_app$e (inf$b ?v0) ?v1)) (fun_app$e (inf$b ?v0) ?v1))) :named a17))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (= (fun_app$c (inf$a ?v0) (fun_app$c (inf$a ?v0) ?v1)) (fun_app$c (inf$a ?v0) ?v1))) :named a18))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$d (inf$ ?v0) (fun_app$d (inf$ ?v0) ?v1)) (fun_app$d (inf$ ?v0) ?v1))) :named a19))
(assert (! (forall ((?v0 Bool) (?v1 Bool)) (= (fun_app$e (inf$b ?v0) (fun_app$e (inf$b ?v0) ?v1)) (fun_app$e (inf$b ?v0) ?v1))) :named a20))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (= (fun_app$c (inf$a ?v0) (fun_app$c (inf$a ?v0) ?v1)) (fun_app$c (inf$a ?v0) ?v1))) :named a21))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$d (inf$ ?v0) (fun_app$d (inf$ ?v0) ?v1)) (fun_app$d (inf$ ?v0) ?v1))) :named a22))
(assert (! (forall ((?v0 Bool)) (! (= (fun_app$e (inf$b ?v0) ?v0) ?v0) :pattern ((inf$b ?v0)))) :named a23))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$c (inf$a ?v0) ?v0) ?v0) :pattern ((inf$a ?v0)))) :named a24))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$d (inf$ ?v0) ?v0) ?v0) :pattern ((inf$ ?v0)))) :named a25))
(assert (! (forall ((?v0 Bool)) (! (= (fun_app$e (inf$b ?v0) ?v0) ?v0) :pattern ((inf$b ?v0)))) :named a26))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$c (inf$a ?v0) ?v0) ?v0) :pattern ((inf$a ?v0)))) :named a27))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$d (inf$ ?v0) ?v0) ?v0) :pattern ((inf$ ?v0)))) :named a28))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_bool_fun$)) (= (member$ ?v0 (fun_app$d (inf$ ?v1) (collect$ ?v2))) (and (member$ ?v0 ?v1) (fun_app$ ?v2 ?v0)))) :named a29))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (= (collect$ (fun_app$c (uub$ ?v0) ?v1)) (fun_app$d (inf$ (collect$ ?v0)) (collect$ ?v1)))) :named a30))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$d (inf$ ?v0) ?v1) (collect$ (fun_app$b (uuc$ ?v0) ?v1)))) :named a31))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$d (inf$ ?v0) ?v1) (collect$ (fun_app$c (inf$a (uud$ ?v0)) (uud$ ?v1))))) :named a32))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$ (fun_app$c (inf$a ?v0) ?v1) ?v2) (fun_app$e (inf$b (fun_app$ ?v0 ?v2)) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$c (inf$a ?v0) ?v1) ?v2)))) :named a33))
(assert (! (forall ((?v0 Bool) (?v1 Bool)) (= (fun_app$e (inf$b ?v0) ?v1) (fun_app$e (inf$b ?v1) ?v0))) :named a34))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (= (fun_app$c (inf$a ?v0) ?v1) (fun_app$c (inf$a ?v1) ?v0))) :named a35))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (fun_app$d (inf$ ?v0) ?v1) (fun_app$d (inf$ ?v1) ?v0))) :named a36))
(check-sat)
;(get-unsat-core)
