; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 627
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Nat_enat_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-datatypes () ((A_llist_list$ (nil$) (cons$ (hd$ A_llist$) (tl$ A_llist_list$)))))
(declare-fun uu$ () Nat_enat_fun$)
(declare-fun uua$ () Nat_enat_fun$)
(declare-fun xss$ () A_llist_list$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist_llist$ Nat$) A_llist$)
(declare-fun plus$ (Enat$ Enat$) Enat$)
(declare-fun size$ (A_llist_list$) Nat$)
(declare-fun xssa$ () A_llist_llist$)
(declare-fun zero$ () Enat$)
(declare-fun less$a (Nat$ Nat$) Bool)
(declare-fun plus$a (Nat$ Nat$) Nat$)
(declare-fun zero$a () Nat$)
(declare-fun setsum$ (Nat_enat_fun$ Nat_set$) Enat$)
(declare-fun fun_app$ (Nat_enat_fun$ Nat$) Enat$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lessThan$ (Nat$) Nat_set$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (llength$ (lnth$ xssa$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uua$ ?v0) zero$) :pattern ((fun_app$ uua$ ?v0)))) :named a1))
(assert (! (not (= (enat$ zero$a) (plus$ (setsum$ uu$ (lessThan$ (size$ xss$))) (enat$ zero$a)))) :named a2))
(assert (! (= (setsum$ uu$ (lessThan$ (size$ xss$))) (setsum$ uua$ (lessThan$ (size$ xss$)))) :named a3))
(assert (! (less$ (enat$ zero$a) (llength$ (lnth$ xssa$ (size$ xss$)))) :named a4))
(assert (! (forall ((?v0 Nat_set$)) (= (setsum$ uua$ ?v0) zero$)) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Enat$) (?v2 Enat$)) (= (= (plus$ (enat$ ?v0) ?v1) (plus$ (enat$ ?v0) ?v2)) (= ?v1 ?v2))) :named a6))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$) (?v2 Enat$)) (= (= (plus$ ?v0 (enat$ ?v1)) (plus$ ?v2 (enat$ ?v1))) (= ?v0 ?v2))) :named a7))
(assert (! (forall ((?v0 Nat$)) (= (plus$a ?v0 zero$a) ?v0)) :named a8))
(assert (! (forall ((?v0 Enat$)) (= (plus$ ?v0 zero$) ?v0)) :named a9))
(assert (! (forall ((?v0 Nat$)) (= (plus$a ?v0 zero$a) ?v0)) :named a10))
(assert (! (forall ((?v0 Enat$)) (= (plus$ ?v0 zero$) ?v0)) :named a11))
(assert (! (forall ((?v0 Nat$)) (= (plus$a zero$a ?v0) ?v0)) :named a12))
(assert (! (forall ((?v0 Enat$)) (= (plus$ zero$ ?v0) ?v0)) :named a13))
(assert (! (forall ((?v0 Nat$)) (= (plus$a zero$a ?v0) ?v0)) :named a14))
(assert (! (forall ((?v0 Enat$)) (= (plus$ zero$ ?v0) ?v0)) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (lessThan$ ?v0) (lessThan$ ?v1)) (= ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$a ?v0 ?v1) (plus$a ?v0 ?v2)) (= ?v1 ?v2))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$a ?v0 ?v1) (plus$a ?v2 ?v1)) (= ?v0 ?v2))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (less$a (plus$a ?v0 ?v1) (plus$a ?v0 ?v2)) (less$a ?v1 ?v2))) :named a20))
(check-sat)
;(get-unsat-core)
