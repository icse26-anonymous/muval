; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 655
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nibble$ (nibble0$) (nibble1$) (nibble2$) (nibble3$) (nibble4$) (nibble5$) (nibble6$) (nibble7$) (nibble8$) (nibble9$) (nibbleA$) (nibbleB$) (nibbleC$) (nibbleD$) (nibbleE$) (nibbleF$))
  (Char$ (char$ (select$ Nibble$) (selecta$ Nibble$)))))
(declare-fun f$ () Nat_a_fun$)
(declare-fun size$ (Char$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun fun_app$ (Nat_a_fun$ Nat$) A$)
(declare-fun inf_llist$ (Nat_a_fun$) A_llist$)
(declare-fun size_bool$ (Bool) Nat$)
(declare-fun size_char$ (Char$) Nat$)
(assert (! (not (= (lhd$ (inf_llist$ f$)) (fun_app$ f$ zero$))) :named a0))
(assert (! (= zero$ zero$) :named a1))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a2))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a3))
(assert (! (forall ((?v0 Char$)) (! (= (size_char$ ?v0) zero$) :pattern ((size_char$ ?v0)))) :named a4))
(assert (! (forall ((?v0 Nat_a_fun$)) (not (= (inf_llist$ ?v0) lNil$))) :named a5))
(assert (! (= (size_bool$ true) zero$) :named a6))
(assert (! (= (size_bool$ false) zero$) :named a7))
(assert (! (forall ((?v0 Nat_a_fun$)) (not (lnull$ (inf_llist$ ?v0)))) :named a8))
(assert (! (forall ((?v0 Char$)) (! (= (size$ ?v0) zero$) :pattern ((size$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A_llist$)) (! (= (lnull$ ?v0) (= ?v0 lNil$)) :pattern ((lnull$ ?v0)))) :named a10))
(check-sat)
;(get-unsat-core)
