; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 577
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort B_llist_enat_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun uu$ () A_b_bool_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun uua$ () B_b_bool_fun_fun$)
(declare-fun uub$ () B_llist_b_llist_bool_fun_fun$)
(declare-fun uuc$ () A_a_bool_fun_fun$)
(declare-fun uud$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun uue$ (A_b_bool_fun_fun$ B_a_fun$) B_b_bool_fun_fun$)
(declare-fun uuf$ (B_b_bool_fun_fun$ A_b_fun$) A_b_bool_fun_fun$)
(declare-fun uug$ (B_b_bool_fun_fun$ B_b_fun$) B_b_bool_fun_fun$)
(declare-fun uuh$ (B_a_bool_fun_fun$ B_b_fun$) B_a_bool_fun_fun$)
(declare-fun uui$ (B_a_bool_fun_fun$ A_b_fun$) A_a_bool_fun_fun$)
(declare-fun uuj$ (A_a_bool_fun_fun$ B_a_fun$) B_a_bool_fun_fun$)
(declare-fun uuk$ (A_a_bool_fun_fun$ A_a_fun$) A_a_bool_fun_fun$)
(declare-fun uul$ (A_b_bool_fun_fun$ A_a_fun$) A_b_bool_fun_fun$)
(declare-fun uum$ (A_b_bool_fun_fun$ A_b_fun$) A_a_bool_fun_fun$)
(declare-fun uun$ (B_b_bool_fun_fun$ B_b_fun$) B_b_bool_fun_fun$)
(declare-fun uuo$ (B_b_bool_fun_fun$ A_b_fun$) B_a_bool_fun_fun$)
(declare-fun uup$ (B_a_bool_fun_fun$ B_a_fun$) B_b_bool_fun_fun$)
(declare-fun uuq$ (B_a_bool_fun_fun$ A_a_fun$) B_a_bool_fun_fun$)
(declare-fun uur$ (A_a_bool_fun_fun$ B_a_fun$) A_b_bool_fun_fun$)
(declare-fun uus$ (A_a_bool_fun_fun$ A_a_fun$) A_a_bool_fun_fun$)
(declare-fun uut$ (A_b_bool_fun_fun$ B_b_fun$) A_b_bool_fun_fun$)
(declare-fun llcp$ (A_llist$) A_llist_enat_fun$)
(declare-fun lmap$ (B_a_fun$ B_llist$) A_llist$)
(declare-fun llcp$a (B_llist$) B_llist_enat_fun$)
(declare-fun lmap$a (A_b_fun$ A_llist$) B_llist$)
(declare-fun lmap$b (B_b_fun$ B_llist$) B_llist$)
(declare-fun lmap$c (A_a_fun$ A_llist$) A_llist$)
(declare-fun lnull$ (B_llist$) Bool)
(declare-fun lnull$a (A_llist$) Bool)
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$d (B_bool_fun$ B$) Bool)
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$f (A_bool_fun$ A$) Bool)
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$h (B_b_fun$ B$) B$)
(declare-fun fun_app$i (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$j (A_b_fun$ A$) B$)
(declare-fun fun_app$k (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$l (B_a_fun$ B$) A$)
(declare-fun fun_app$m (A_a_fun$ A$) A$)
(declare-fun fun_app$n (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$o (B_llist_enat_fun$ B_llist$) Enat$)
(declare-fun llength$a (B_llist$) Enat$)
(declare-fun lprefix$a (B_llist$ B_llist$) Bool)
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$) B_llist_bool_fun$)
(declare-fun llist_all2$a (B_b_bool_fun_fun$) B_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$b (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$c (B_a_bool_fun_fun$ B_llist$) A_llist_bool_fun$)
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (= (fun_app$ (fun_app$a uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uub$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$c uud$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c uud$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$d (fun_app$e uua$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (fun_app$e uua$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$f (fun_app$g uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$f (fun_app$g uuc$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$e (uug$ ?v0 ?v1) ?v2) (fun_app$e ?v0 (fun_app$h ?v1 ?v2))) :pattern ((fun_app$e (uug$ ?v0 ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A$)) (! (= (fun_app$i (uuf$ ?v0 ?v1) ?v2) (fun_app$e ?v0 (fun_app$j ?v1 ?v2))) :pattern ((fun_app$i (uuf$ ?v0 ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$k (uuh$ ?v0 ?v1) ?v2) (fun_app$k ?v0 (fun_app$h ?v1 ?v2))) :pattern ((fun_app$k (uuh$ ?v0 ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A$)) (! (= (fun_app$g (uui$ ?v0 ?v1) ?v2) (fun_app$k ?v0 (fun_app$j ?v1 ?v2))) :pattern ((fun_app$g (uui$ ?v0 ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$e (uue$ ?v0 ?v1) ?v2) (fun_app$i ?v0 (fun_app$l ?v1 ?v2))) :pattern ((fun_app$e (uue$ ?v0 ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$i (uul$ ?v0 ?v1) ?v2) (fun_app$i ?v0 (fun_app$m ?v1 ?v2))) :pattern ((fun_app$i (uul$ ?v0 ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$k (uuj$ ?v0 ?v1) ?v2) (fun_app$g ?v0 (fun_app$l ?v1 ?v2))) :pattern ((fun_app$k (uuj$ ?v0 ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$g (uuk$ ?v0 ?v1) ?v2) (fun_app$g ?v0 (fun_app$m ?v1 ?v2))) :pattern ((fun_app$g (uuk$ ?v0 ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B$) (?v3 B$)) (! (= (fun_app$d (fun_app$e (uun$ ?v0 ?v1) ?v2) ?v3) (fun_app$d (fun_app$e ?v0 ?v2) (fun_app$h ?v1 ?v3))) :pattern ((fun_app$d (fun_app$e (uun$ ?v0 ?v1) ?v2) ?v3)))) :named a12))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 A_b_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$f (fun_app$k (uuo$ ?v0 ?v1) ?v2) ?v3) (fun_app$d (fun_app$e ?v0 ?v2) (fun_app$j ?v1 ?v3))) :pattern ((fun_app$f (fun_app$k (uuo$ ?v0 ?v1) ?v2) ?v3)))) :named a13))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B$) (?v3 B$)) (! (= (fun_app$d (fun_app$e (uup$ ?v0 ?v1) ?v2) ?v3) (fun_app$f (fun_app$k ?v0 ?v2) (fun_app$l ?v1 ?v3))) :pattern ((fun_app$d (fun_app$e (uup$ ?v0 ?v1) ?v2) ?v3)))) :named a14))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_a_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$f (fun_app$k (uuq$ ?v0 ?v1) ?v2) ?v3) (fun_app$f (fun_app$k ?v0 ?v2) (fun_app$m ?v1 ?v3))) :pattern ((fun_app$f (fun_app$k (uuq$ ?v0 ?v1) ?v2) ?v3)))) :named a15))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_b_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$d (fun_app$i (uut$ ?v0 ?v1) ?v2) ?v3) (fun_app$d (fun_app$i ?v0 ?v2) (fun_app$h ?v1 ?v3))) :pattern ((fun_app$d (fun_app$i (uut$ ?v0 ?v1) ?v2) ?v3)))) :named a16))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$f (fun_app$g (uum$ ?v0 ?v1) ?v2) ?v3) (fun_app$d (fun_app$i ?v0 ?v2) (fun_app$j ?v1 ?v3))) :pattern ((fun_app$f (fun_app$g (uum$ ?v0 ?v1) ?v2) ?v3)))) :named a17))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_a_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$d (fun_app$i (uur$ ?v0 ?v1) ?v2) ?v3) (fun_app$f (fun_app$g ?v0 ?v2) (fun_app$l ?v1 ?v3))) :pattern ((fun_app$d (fun_app$i (uur$ ?v0 ?v1) ?v2) ?v3)))) :named a18))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$f (fun_app$g (uus$ ?v0 ?v1) ?v2) ?v3) (fun_app$f (fun_app$g ?v0 ?v2) (fun_app$m ?v1 ?v3))) :pattern ((fun_app$f (fun_app$g (uus$ ?v0 ?v1) ?v2) ?v3)))) :named a19))
(assert (! (forall ((?v0 A$) (?v1 B$)) (! (= (fun_app$d (fun_app$i uu$ ?v0) ?v1) true) :pattern ((fun_app$d (fun_app$i uu$ ?v0) ?v1)))) :named a20))
(assert (! (not (= (fun_app$ (llist_all2$ uu$ xs$) ys$) (= (llength$ xs$) (llength$a ys$)))) :named a21))
(assert (! (= (llist_all2$a uua$) uub$) :named a22))
(assert (! (= (llist_all2$b uuc$) uud$) :named a23))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) ?v2) (= (llength$ ?v1) (llength$ ?v2)))) :named a24))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$)) (=> (fun_app$b (llist_all2$c ?v0 ?v1) ?v2) (= (llength$a ?v1) (llength$ ?v2)))) :named a25))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (fun_app$ (fun_app$a (llist_all2$a ?v0) ?v1) ?v2) (= (llength$a ?v1) (llength$a ?v2)))) :named a26))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (=> (fun_app$ (llist_all2$ ?v0 ?v1) ?v2) (= (llength$ ?v1) (llength$a ?v2)))) :named a27))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$n (llcp$ ?v0) ?v0) (llength$ ?v0)) :pattern ((llcp$ ?v0)))) :named a28))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$o (llcp$a ?v0) ?v0) (llength$a ?v0)) :pattern ((llcp$a ?v0)))) :named a29))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$ (fun_app$a (llist_all2$a ?v0) ?v1) lNil$a) (= ?v1 lNil$a)) :pattern ((fun_app$a (llist_all2$a ?v0) ?v1)))) :named a30))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$b (llist_all2$c ?v0 ?v1) lNil$) (= ?v1 lNil$a)) :pattern ((llist_all2$c ?v0 ?v1)))) :named a31))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) lNil$) (= ?v1 lNil$)) :pattern ((fun_app$c (llist_all2$b ?v0) ?v1)))) :named a32))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$ (llist_all2$ ?v0 ?v1) lNil$a) (= ?v1 lNil$)) :pattern ((llist_all2$ ?v0 ?v1)))) :named a33))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$ (fun_app$a (llist_all2$a ?v0) lNil$a) ?v1) (= ?v1 lNil$a)) :pattern ((fun_app$ (fun_app$a (llist_all2$a ?v0) lNil$a) ?v1)))) :named a34))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$b (llist_all2$c ?v0 lNil$a) ?v1) (= ?v1 lNil$)) :pattern ((fun_app$b (llist_all2$c ?v0 lNil$a) ?v1)))) :named a35))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$c (llist_all2$b ?v0) lNil$) ?v1) (= ?v1 lNil$)) :pattern ((fun_app$b (fun_app$c (llist_all2$b ?v0) lNil$) ?v1)))) :named a36))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$ (llist_all2$ ?v0 lNil$) ?v1) (= ?v1 lNil$a)) :pattern ((fun_app$ (llist_all2$ ?v0 lNil$) ?v1)))) :named a37))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B_llist$) (?v3 B_llist$)) (= (fun_app$ (llist_all2$ ?v0 (lmap$ ?v1 ?v2)) ?v3) (fun_app$ (fun_app$a (llist_all2$a (uue$ ?v0 ?v1)) ?v2) ?v3))) :named a38))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$ (fun_app$a (llist_all2$a ?v0) (lmap$a ?v1 ?v2)) ?v3) (fun_app$ (llist_all2$ (uuf$ ?v0 ?v1) ?v2) ?v3))) :named a39))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B_llist$) (?v3 B_llist$)) (= (fun_app$ (fun_app$a (llist_all2$a ?v0) (lmap$b ?v1 ?v2)) ?v3) (fun_app$ (fun_app$a (llist_all2$a (uug$ ?v0 ?v1)) ?v2) ?v3))) :named a40))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B_llist$) (?v3 A_llist$)) (= (fun_app$b (llist_all2$c ?v0 (lmap$b ?v1 ?v2)) ?v3) (fun_app$b (llist_all2$c (uuh$ ?v0 ?v1) ?v2) ?v3))) :named a41))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A_llist$) (?v3 A_llist$)) (= (fun_app$b (llist_all2$c ?v0 (lmap$a ?v1 ?v2)) ?v3) (fun_app$b (fun_app$c (llist_all2$b (uui$ ?v0 ?v1)) ?v2) ?v3))) :named a42))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B_llist$) (?v3 A_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) (lmap$ ?v1 ?v2)) ?v3) (fun_app$b (llist_all2$c (uuj$ ?v0 ?v1) ?v2) ?v3))) :named a43))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A_llist$) (?v3 A_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) (lmap$c ?v1 ?v2)) ?v3) (fun_app$b (fun_app$c (llist_all2$b (uuk$ ?v0 ?v1)) ?v2) ?v3))) :named a44))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$ (llist_all2$ ?v0 (lmap$c ?v1 ?v2)) ?v3) (fun_app$ (llist_all2$ (uul$ ?v0 ?v1) ?v2) ?v3))) :named a45))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 A_b_fun$) (?v3 A_llist$)) (= (fun_app$ (llist_all2$ ?v0 ?v1) (lmap$a ?v2 ?v3)) (fun_app$b (fun_app$c (llist_all2$b (uum$ ?v0 ?v2)) ?v1) ?v3))) :named a46))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (fun_app$ (fun_app$a (llist_all2$a ?v0) ?v1) (lmap$b ?v2 ?v3)) (fun_app$ (fun_app$a (llist_all2$a (uun$ ?v0 ?v2)) ?v1) ?v3))) :named a47))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 A_b_fun$) (?v3 A_llist$)) (= (fun_app$ (fun_app$a (llist_all2$a ?v0) ?v1) (lmap$a ?v2 ?v3)) (fun_app$b (llist_all2$c (uuo$ ?v0 ?v2) ?v1) ?v3))) :named a48))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 B_a_fun$) (?v3 B_llist$)) (= (fun_app$b (llist_all2$c ?v0 ?v1) (lmap$ ?v2 ?v3)) (fun_app$ (fun_app$a (llist_all2$a (uup$ ?v0 ?v2)) ?v1) ?v3))) :named a49))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_a_fun$) (?v3 A_llist$)) (= (fun_app$b (llist_all2$c ?v0 ?v1) (lmap$c ?v2 ?v3)) (fun_app$b (llist_all2$c (uuq$ ?v0 ?v2) ?v1) ?v3))) :named a50))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 B_a_fun$) (?v3 B_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) (lmap$ ?v2 ?v3)) (fun_app$ (llist_all2$ (uur$ ?v0 ?v2) ?v1) ?v3))) :named a51))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_a_fun$) (?v3 A_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) (lmap$c ?v2 ?v3)) (fun_app$b (fun_app$c (llist_all2$b (uus$ ?v0 ?v2)) ?v1) ?v3))) :named a52))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (fun_app$ (llist_all2$ ?v0 ?v1) (lmap$b ?v2 ?v3)) (fun_app$ (llist_all2$ (uut$ ?v0 ?v2) ?v1) ?v3))) :named a53))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B$) (?v2 B_llist$) (?v3 B$) (?v4 B_llist$)) (! (= (fun_app$ (fun_app$a (llist_all2$a ?v0) (lCons$a ?v1 ?v2)) (lCons$a ?v3 ?v4)) (and (fun_app$d (fun_app$e ?v0 ?v1) ?v3) (fun_app$ (fun_app$a (llist_all2$a ?v0) ?v2) ?v4))) :pattern ((fun_app$ (fun_app$a (llist_all2$a ?v0) (lCons$a ?v1 ?v2)) (lCons$a ?v3 ?v4))))) :named a54))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B$) (?v2 B_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (fun_app$b (llist_all2$c ?v0 (lCons$a ?v1 ?v2)) (lCons$ ?v3 ?v4)) (and (fun_app$f (fun_app$k ?v0 ?v1) ?v3) (fun_app$b (llist_all2$c ?v0 ?v2) ?v4))) :pattern ((fun_app$b (llist_all2$c ?v0 (lCons$a ?v1 ?v2)) (lCons$ ?v3 ?v4))))) :named a55))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (fun_app$b (fun_app$c (llist_all2$b ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4)) (and (fun_app$f (fun_app$g ?v0 ?v1) ?v3) (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v2) ?v4))) :pattern ((fun_app$b (fun_app$c (llist_all2$b ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4))))) :named a56))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 B$) (?v4 B_llist$)) (! (= (fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2)) (lCons$a ?v3 ?v4)) (and (fun_app$d (fun_app$i ?v0 ?v1) ?v3) (fun_app$ (llist_all2$ ?v0 ?v2) ?v4))) :pattern ((fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2)) (lCons$a ?v3 ?v4))))) :named a57))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (llength$ (lmap$c ?v0 ?v1)) (llength$ ?v1))) :named a58))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (llength$ (lmap$ ?v0 ?v1)) (llength$a ?v1))) :named a59))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (llength$a (lmap$a ?v0 ?v1)) (llength$ ?v1))) :named a60))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (llength$a (lmap$b ?v0 ?v1)) (llength$a ?v1))) :named a61))
(assert (! (forall ((?v0 B_b_bool_fun_fun$)) (fun_app$ (fun_app$a (llist_all2$a ?v0) lNil$a) lNil$a)) :named a62))
(assert (! (forall ((?v0 B_a_bool_fun_fun$)) (fun_app$b (llist_all2$c ?v0 lNil$a) lNil$)) :named a63))
(assert (! (forall ((?v0 A_a_bool_fun_fun$)) (fun_app$b (fun_app$c (llist_all2$b ?v0) lNil$) lNil$)) :named a64))
(assert (! (forall ((?v0 A_b_bool_fun_fun$)) (fun_app$ (llist_all2$ ?v0 lNil$) lNil$a)) :named a65))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (fun_app$ (fun_app$a (llist_all2$a ?v0) ?v1) ?v2) (= (lnull$ ?v1) (lnull$ ?v2)))) :named a66))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$)) (=> (fun_app$b (llist_all2$c ?v0 ?v1) ?v2) (= (lnull$ ?v1) (lnull$a ?v2)))) :named a67))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) ?v2) (= (lnull$a ?v1) (lnull$a ?v2)))) :named a68))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (=> (fun_app$ (llist_all2$ ?v0 ?v1) ?v2) (= (lnull$a ?v1) (lnull$ ?v2)))) :named a69))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (= (llength$ ?v0) (llength$ ?v1))) (= ?v0 ?v1))) :named a70))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (lprefix$a ?v0 ?v1) (= (llength$a ?v0) (llength$a ?v1))) (= ?v0 ?v1))) :named a71))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B$) (?v2 B_llist$) (?v3 B_llist$)) (= (fun_app$ (fun_app$a (llist_all2$a ?v0) (lCons$a ?v1 ?v2)) ?v3) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v3 (lCons$a ?v4 ?v5)) (and (fun_app$d (fun_app$e ?v0 ?v1) ?v4) (fun_app$ (fun_app$a (llist_all2$a ?v0) ?v2) ?v5)))))) :named a72))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B$) (?v2 B_llist$) (?v3 A_llist$)) (= (fun_app$b (llist_all2$c ?v0 (lCons$a ?v1 ?v2)) ?v3) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v3 (lCons$ ?v4 ?v5)) (and (fun_app$f (fun_app$k ?v0 ?v1) ?v4) (fun_app$b (llist_all2$c ?v0 ?v2) ?v5)))))) :named a73))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) (lCons$ ?v1 ?v2)) ?v3) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v3 (lCons$ ?v4 ?v5)) (and (fun_app$f (fun_app$g ?v0 ?v1) ?v4) (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v2) ?v5)))))) :named a74))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2)) ?v3) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v3 (lCons$a ?v4 ?v5)) (and (fun_app$d (fun_app$i ?v0 ?v1) ?v4) (fun_app$ (llist_all2$ ?v0 ?v2) ?v5)))))) :named a75))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (= (fun_app$ (fun_app$a (llist_all2$a ?v0) ?v1) (lCons$a ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v1 (lCons$a ?v4 ?v5)) (and (fun_app$d (fun_app$e ?v0 ?v4) ?v2) (fun_app$ (fun_app$a (llist_all2$a ?v0) ?v5) ?v3)))))) :named a76))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$b (llist_all2$c ?v0 ?v1) (lCons$ ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v1 (lCons$a ?v4 ?v5)) (and (fun_app$f (fun_app$k ?v0 ?v4) ?v2) (fun_app$b (llist_all2$c ?v0 ?v5) ?v3)))))) :named a77))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) (lCons$ ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v1 (lCons$ ?v4 ?v5)) (and (fun_app$f (fun_app$g ?v0 ?v4) ?v2) (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v5) ?v3)))))) :named a78))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B$) (?v3 B_llist$)) (= (fun_app$ (llist_all2$ ?v0 ?v1) (lCons$a ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v1 (lCons$ ?v4 ?v5)) (and (fun_app$d (fun_app$i ?v0 ?v4) ?v2) (fun_app$ (llist_all2$ ?v0 ?v5) ?v3)))))) :named a79))
(assert (! (forall ((?v0 B_llist$)) (lprefix$a ?v0 ?v0)) :named a80))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a81))
(assert (! (forall ((?v0 B_llist$)) (lprefix$a ?v0 ?v0)) :named a82))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a83))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a84))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a85))
(check-sat)
;(get-unsat-core)
