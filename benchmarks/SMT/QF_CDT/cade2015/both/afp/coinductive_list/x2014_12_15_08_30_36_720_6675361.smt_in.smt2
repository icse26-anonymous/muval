; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 646
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun n$ () Nat$)
(declare-fun ma$ () Nat$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun xsa$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun less_eq$ (Nat$) Nat_bool_fun$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$b (Nat_nat_fun$ Nat$) Nat$)
(assert (! (not (fun_app$ (less_eq$ (suc$ ma$)) (suc$ n$))) :named a0))
(assert (! (fun_app$ (less_eq$ ma$) n$) :named a1))
(assert (! (less$ (enat$ n$) (llength$ (ltl$ xsa$))) :named a2))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (less_eq$ ?v3) ?v4) (fun_app$ (fun_app$a ?v0 ?v3) ?v4))) (=> (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (fun_app$ (fun_app$a ?v0 ?v2) ?v1))) (fun_app$ (fun_app$a ?v0 ?v2) ?v1))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (less_eq$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$ (less_eq$ ?v0) ?v1)) :pattern ((fun_app$ (less_eq$ (suc$ ?v0)) (suc$ ?v1))))) :named a4))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (less_eq$ (fun_app$b ?v0 (suc$ ?v3))) (fun_app$b ?v0 ?v3))) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ (fun_app$b ?v0 ?v2)) (fun_app$b ?v0 ?v1)))) :named a5))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (less_eq$ (fun_app$b ?v0 ?v3)) (fun_app$b ?v0 (suc$ ?v3)))) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ (fun_app$b ?v0 ?v1)) (fun_app$b ?v0 ?v2)))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (less_eq$ ?v0) ?v0)) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (less_eq$ ?v0) (suc$ ?v1)) (or (fun_app$ (less_eq$ ?v0) ?v1) (= ?v0 (suc$ ?v1)))) :pattern ((fun_app$ (less_eq$ ?v0) (suc$ ?v1))))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$ (less_eq$ ?v0) ?v1)) (fun_app$ (less_eq$ (suc$ ?v1)) ?v0))) :named a11))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (forall ((?v3 Nat$)) (=> (fun_app$ (less_eq$ (suc$ ?v3)) ?v2) (fun_app$ ?v0 ?v3))) (fun_app$ ?v0 ?v2))) (fun_app$ ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less_eq$ (suc$ ?v0)) ?v1) (fun_app$ (less_eq$ ?v0) ?v1))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less_eq$ (suc$ ?v0)) ?v1) (exists ((?v2 Nat$)) (= ?v1 (suc$ ?v2))))) :named a14))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (= ?v0 ?v1)) (or (less$ ?v0 ?v1) (less$ ?v1 ?v0)))) :named a15))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (less$ ?v0 ?v1)) (or (less$ ?v1 ?v0) (= ?v0 ?v1)))) :named a16))
(check-sat)
;(get-unsat-core)
