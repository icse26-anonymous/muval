; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 632
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-codatatypes () ((Nat_llist$ (lNil$) (lCons$ (lhd$ Nat$) (ltl$ Nat_llist$)))))
(declare-fun k$ () Nat$)
(declare-fun uu$ () Nat_nat_fun$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun uua$ (Nat$) Nat_nat_fun$)
(declare-fun uub$ () Nat_nat_fun$)
(declare-fun lmap$ (Nat_nat_fun$ Nat_llist$) Nat_llist$)
(declare-fun plus$ (Nat$) Nat_nat_fun$)
(declare-fun zero$ () Nat$)
(declare-fun fun_app$ (Nat_nat_fun$ Nat$) Nat$)
(declare-fun iterates$ (Nat_nat_fun$ Nat$) Nat_llist$)
(declare-fun inf_llist$ (Nat_nat_fun$) Nat_llist$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (fun_app$ (plus$ ?v0) k$)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (fun_app$ (plus$ ?v1) ?v0)) :pattern ((fun_app$ (uua$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uub$ ?v0) ?v0) :pattern ((fun_app$ uub$ ?v0)))) :named a2))
(assert (! (not (= (iterates$ suc$ k$) (lmap$ uu$ (iterates$ suc$ zero$)))) :named a3))
(assert (! (= (iterates$ suc$ (fun_app$ (plus$ zero$) k$)) (lmap$ uu$ (iterates$ suc$ zero$))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (iterates$ suc$ (fun_app$ (plus$ ?v0) ?v1)) (lmap$ (uua$ ?v1) (iterates$ suc$ ?v0)))) :named a5))
(assert (! (forall ((?v0 Nat_llist$)) (= (lmap$ uub$ ?v0) ?v0)) :named a6))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$)) (= (lmap$ ?v0 (iterates$ ?v0 ?v1)) (iterates$ ?v0 (fun_app$ ?v0 ?v1)))) :named a7))
(assert (! (forall ((?v0 Nat_nat_fun$)) (! (= (inf_llist$ ?v0) (lmap$ ?v0 (iterates$ suc$ zero$))) :pattern ((inf_llist$ ?v0)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (plus$ ?v0) (fun_app$ suc$ ?v1)) (fun_app$ suc$ (fun_app$ (plus$ ?v0) ?v1))) :pattern ((fun_app$ (plus$ ?v0) (fun_app$ suc$ ?v1))))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$ (plus$ ?v0) ?v1) zero$) (and (= ?v0 zero$) (= ?v1 zero$)))) :named a10))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (plus$ ?v0) zero$) ?v0) :pattern ((plus$ ?v0)))) :named a11))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (plus$ ?v0) zero$) ?v0)) :named a12))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (plus$ ?v0) zero$) ?v0)) :named a13))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (plus$ zero$) ?v0) ?v0)) :named a14))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (plus$ zero$) ?v0) ?v0)) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$ (plus$ ?v0) ?v1) (fun_app$ suc$ zero$)) (or (and (= ?v0 (fun_app$ suc$ zero$)) (= ?v1 zero$)) (and (= ?v0 zero$) (= ?v1 (fun_app$ suc$ zero$)))))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$ suc$ zero$) (fun_app$ (plus$ ?v0) ?v1)) (or (and (= ?v0 (fun_app$ suc$ zero$)) (= ?v1 zero$)) (and (= ?v0 zero$) (= ?v1 (fun_app$ suc$ zero$)))))) :named a17))
(check-sat)
;(get-unsat-core)
