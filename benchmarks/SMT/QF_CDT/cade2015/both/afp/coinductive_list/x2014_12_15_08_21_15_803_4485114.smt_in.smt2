; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 573
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_b_prod_set$ 0)
(declare-sort B_a_prod_set$ 0)
(declare-sort B_b_prod_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_b_prod_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort B_a_prod_bool_fun$ 0)
(declare-sort B_b_prod_bool_fun$ 0)
(declare-sort A_a_b_prod_prod_set$ 0)
(declare-sort B_a_b_prod_prod_set$ 0)
(declare-sort A_a_prod_llist_bool_fun$ 0)
(declare-sort A_b_prod_llist_bool_fun$ 0)
(declare-sort B_a_prod_llist_bool_fun$ 0)
(declare-sort B_b_prod_llist_bool_fun$ 0)
(declare-sort A_a_b_prod_prod_bool_fun$ 0)
(declare-sort B_a_b_prod_prod_bool_fun$ 0)
(declare-sort A_a_b_prod_prod_llist_bool_fun$ 0)
(declare-sort A_a_prod_a_a_prod_bool_fun_fun$ 0)
(declare-sort A_b_prod_a_b_prod_bool_fun_fun$ 0)
(declare-sort B_a_b_prod_prod_llist_bool_fun$ 0)
(declare-sort B_a_prod_b_a_prod_bool_fun_fun$ 0)
(declare-sort B_b_prod_b_b_prod_bool_fun_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_set_fun$ 0)
(declare-sort A_b_prod_llist_a_b_prod_set_fun$ 0)
(declare-sort B_a_prod_llist_b_a_prod_set_fun$ 0)
(declare-sort B_b_prod_llist_b_b_prod_set_fun$ 0)
(declare-sort A_a_b_prod_prod_a_a_b_prod_prod_bool_fun_fun$ 0)
(declare-sort B_a_b_prod_prod_b_a_b_prod_prod_bool_fun_fun$ 0)
(declare-sort A_a_b_prod_prod_llist_a_a_b_prod_prod_set_fun$ 0)
(declare-sort B_a_b_prod_prod_llist_b_a_b_prod_prod_set_fun$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$) (lCons$ (lhd$ A_b_prod$) (ltl$ A_b_prod_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))))
(declare-datatypes () ((B_a_b_prod_prod$ (pair$a (fst$a B$) (snd$a A_b_prod$)))))
(declare-codatatypes () ((B_a_b_prod_prod_llist$ (lNil$c) (lCons$c (lhd$c B_a_b_prod_prod$) (ltl$c B_a_b_prod_prod_llist$)))))
(declare-datatypes () ((B_b_prod$ (pair$b (fst$b B$) (snd$b B$)))))
(declare-codatatypes () ((B_b_prod_llist$ (lNil$d) (lCons$d (lhd$d B_b_prod$) (ltl$d B_b_prod_llist$)))))
(declare-datatypes () ((B_a_prod$ (pair$c (fst$c B$) (snd$c A$)))))
(declare-codatatypes () ((B_a_prod_llist$ (lNil$e) (lCons$e (lhd$e B_a_prod$) (ltl$e B_a_prod_llist$)))))
(declare-datatypes () ((A_a_b_prod_prod$ (pair$d (fst$d A$) (snd$d A_b_prod$)))))
(declare-codatatypes () ((A_a_b_prod_prod_llist$ (lNil$f) (lCons$f (lhd$f A_a_b_prod_prod$) (ltl$f A_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod$ (pair$e (fst$e A$) (snd$e A$)))))
(declare-codatatypes () ((A_a_prod_llist$ (lNil$g) (lCons$g (lhd$g A_a_prod$) (ltl$g A_a_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_prod$ (pair$f (fst$f A_b_prod$) (snd$f A$)))))
(declare-codatatypes () ((A_b_prod_a_prod_llist$ (lNil$h) (lCons$h (lhd$h A_b_prod_a_prod$) (ltl$h A_b_prod_a_prod_llist$)))))
(declare-datatypes () ((A_b_prod_b_prod$ (pair$g (fst$g A_b_prod$) (snd$g B$)))))
(declare-codatatypes () ((A_b_prod_b_prod_llist$ (lNil$i) (lCons$i (lhd$i A_b_prod_b_prod$) (ltl$i A_b_prod_b_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_b_prod_prod$ (pair$h (fst$h A_b_prod$) (snd$h A_b_prod$)))))
(declare-codatatypes () ((A_b_prod_a_b_prod_prod_llist$ (lNil$j) (lCons$j (lhd$j A_b_prod_a_b_prod_prod$) (ltl$j A_b_prod_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_b_b_prod_prod$ (pair$i (fst$i A$) (snd$i B_b_prod$)))))
(declare-codatatypes () ((A_b_b_prod_prod_llist$ (lNil$k) (lCons$k (lhd$k A_b_b_prod_prod$) (ltl$k A_b_b_prod_prod_llist$)))))
(declare-fun ys$ () B_llist$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lzip$a (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun lzip$b (B_llist$ A_llist$) B_a_prod_llist$)
(declare-fun lzip$c (B_llist$ B_llist$) B_b_prod_llist$)
(declare-fun lzip$d (A_llist$ A_b_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun lzip$e (B_llist$ A_b_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun lzip$f (A_b_prod_llist$ A_llist$) A_b_prod_a_prod_llist$)
(declare-fun lzip$g (A_b_prod_llist$ B_llist$) A_b_prod_b_prod_llist$)
(declare-fun lzip$h (A_b_prod_llist$ A_b_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun lzip$i (A_llist$ B_b_prod_llist$) A_b_b_prod_prod_llist$)
(declare-fun lnull$a (B_llist$) Bool)
(declare-fun lnull$b (A_b_prod_llist$) Bool)
(declare-fun lnull$c (B_b_prod_llist$) Bool)
(declare-fun lnull$d (A_a_prod_llist$) Bool)
(declare-fun lnull$e (B_a_prod_llist$) Bool)
(declare-fun lnull$f (A_a_b_prod_prod_llist$) Bool)
(declare-fun lnull$g (B_a_b_prod_prod_llist$) Bool)
(declare-fun lnull$h (A_b_prod_a_prod_llist$) Bool)
(declare-fun lnull$i (A_b_prod_b_prod_llist$) Bool)
(declare-fun lnull$j (A_b_prod_a_b_prod_prod_llist$) Bool)
(declare-fun lnull$k (A_b_b_prod_prod_llist$) Bool)
(declare-fun fun_app$ (B_a_b_prod_prod_llist_bool_fun$ B_a_b_prod_prod_llist$) Bool)
(declare-fun llexord$ (B_a_b_prod_prod_b_a_b_prod_prod_bool_fun_fun$ B_a_b_prod_prod_llist$ B_a_b_prod_prod_llist$) Bool)
(declare-fun lmember$ (B_a_b_prod_prod$) B_a_b_prod_prod_llist_bool_fun$)
(declare-fun fun_app$a (B_b_prod_llist_bool_fun$ B_b_prod_llist$) Bool)
(declare-fun fun_app$b (B_a_prod_llist_bool_fun$ B_a_prod_llist$) Bool)
(declare-fun fun_app$c (A_a_b_prod_prod_llist_bool_fun$ A_a_b_prod_prod_llist$) Bool)
(declare-fun fun_app$d (A_a_prod_llist_bool_fun$ A_a_prod_llist$) Bool)
(declare-fun fun_app$e (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$f (A_b_prod_llist_bool_fun$ A_b_prod_llist$) Bool)
(declare-fun fun_app$g (B_a_b_prod_prod_llist_b_a_b_prod_prod_set_fun$ B_a_b_prod_prod_llist$) B_a_b_prod_prod_set$)
(declare-fun fun_app$h (B_b_prod_llist_b_b_prod_set_fun$ B_b_prod_llist$) B_b_prod_set$)
(declare-fun fun_app$i (B_a_prod_llist_b_a_prod_set_fun$ B_a_prod_llist$) B_a_prod_set$)
(declare-fun fun_app$j (A_a_b_prod_prod_llist_a_a_b_prod_prod_set_fun$ A_a_b_prod_prod_llist$) A_a_b_prod_prod_set$)
(declare-fun fun_app$k (A_a_prod_llist_a_a_prod_set_fun$ A_a_prod_llist$) A_a_prod_set$)
(declare-fun fun_app$l (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun fun_app$m (A_b_prod_llist_a_b_prod_set_fun$ A_b_prod_llist$) A_b_prod_set$)
(declare-fun gen_lset$ (B_a_b_prod_prod_set$) B_a_b_prod_prod_llist_b_a_b_prod_prod_set_fun$)
(declare-fun llexord$a (B_b_prod_b_b_prod_bool_fun_fun$ B_b_prod_llist$ B_b_prod_llist$) Bool)
(declare-fun llexord$b (B_a_prod_b_a_prod_bool_fun_fun$ B_a_prod_llist$ B_a_prod_llist$) Bool)
(declare-fun llexord$c (A_a_b_prod_prod_a_a_b_prod_prod_bool_fun_fun$ A_a_b_prod_prod_llist$ A_a_b_prod_prod_llist$) Bool)
(declare-fun llexord$d (A_a_prod_a_a_prod_bool_fun_fun$ A_a_prod_llist$ A_a_prod_llist$) Bool)
(declare-fun llexord$e (A_a_bool_fun_fun$ A_llist$ A_llist$) Bool)
(declare-fun llexord$f (A_b_prod_a_b_prod_bool_fun_fun$ A_b_prod_llist$ A_b_prod_llist$) Bool)
(declare-fun lmember$a (B_b_prod$) B_b_prod_llist_bool_fun$)
(declare-fun lmember$b (B_a_prod$) B_a_prod_llist_bool_fun$)
(declare-fun lmember$c (A_a_b_prod_prod$) A_a_b_prod_prod_llist_bool_fun$)
(declare-fun lmember$d (A_a_prod$) A_a_prod_llist_bool_fun$)
(declare-fun lmember$e (A$) A_llist_bool_fun$)
(declare-fun lmember$f (A_b_prod$) A_b_prod_llist_bool_fun$)
(declare-fun gen_lset$a (B_b_prod_set$) B_b_prod_llist_b_b_prod_set_fun$)
(declare-fun gen_lset$b (B_a_prod_set$) B_a_prod_llist_b_a_prod_set_fun$)
(declare-fun gen_lset$c (A_a_b_prod_prod_set$) A_a_b_prod_prod_llist_a_a_b_prod_prod_set_fun$)
(declare-fun gen_lset$d (A_a_prod_set$) A_a_prod_llist_a_a_prod_set_fun$)
(declare-fun gen_lset$e (A_set$) A_llist_a_set_fun$)
(declare-fun gen_lset$f (A_b_prod_set$) A_b_prod_llist_a_b_prod_set_fun$)
(declare-fun ldistinct$ (B_a_b_prod_prod_llist$) Bool)
(declare-fun ldistinct$a (B_b_prod_llist$) Bool)
(declare-fun ldistinct$b (B_a_prod_llist$) Bool)
(declare-fun ldistinct$c (A_a_b_prod_prod_llist$) Bool)
(declare-fun ldistinct$d (A_a_prod_llist$) Bool)
(declare-fun ldistinct$e (A_llist$) Bool)
(declare-fun ldistinct$f (A_b_prod_llist$) Bool)
(declare-fun pred_llist$ (B_a_b_prod_prod_bool_fun$ B_a_b_prod_prod_llist$) Bool)
(declare-fun pred_llist$a (B_b_prod_bool_fun$ B_b_prod_llist$) Bool)
(declare-fun pred_llist$b (B_a_prod_bool_fun$ B_a_prod_llist$) Bool)
(declare-fun pred_llist$c (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod_llist$) Bool)
(declare-fun pred_llist$d (A_a_prod_bool_fun$ A_a_prod_llist$) Bool)
(declare-fun pred_llist$e (A_bool_fun$ A_llist$) Bool)
(declare-fun pred_llist$f (A_b_prod_bool_fun$ A_b_prod_llist$) Bool)
(declare-fun finite_lprefix$ (B_a_b_prod_prod_llist$) B_a_b_prod_prod_llist_bool_fun$)
(declare-fun lstrict_prefix$ (B_a_b_prod_prod_llist$ B_a_b_prod_prod_llist$) Bool)
(declare-fun finite_lprefix$a (B_b_prod_llist$) B_b_prod_llist_bool_fun$)
(declare-fun finite_lprefix$b (B_a_prod_llist$) B_a_prod_llist_bool_fun$)
(declare-fun finite_lprefix$c (A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist_bool_fun$)
(declare-fun finite_lprefix$d (A_a_prod_llist$) A_a_prod_llist_bool_fun$)
(declare-fun finite_lprefix$e (A_llist$) A_llist_bool_fun$)
(declare-fun finite_lprefix$f (A_b_prod_llist$) A_b_prod_llist_bool_fun$)
(declare-fun lstrict_prefix$a (B_b_prod_llist$ B_b_prod_llist$) Bool)
(declare-fun lstrict_prefix$b (B_a_prod_llist$ B_a_prod_llist$) Bool)
(declare-fun lstrict_prefix$c (A_a_b_prod_prod_llist$ A_a_b_prod_prod_llist$) Bool)
(declare-fun lstrict_prefix$d (A_a_prod_llist$ A_a_prod_llist$) Bool)
(declare-fun lstrict_prefix$e (A_llist$ A_llist$) Bool)
(declare-fun lstrict_prefix$f (A_b_prod_llist$ A_b_prod_llist$) Bool)
(assert (! (not (= (lzip$ lNil$a ys$) lNil$)) :named a0))
(assert (! (forall ((?v0 B_a_b_prod_prod$)) (! (= (fun_app$ (lmember$ ?v0) lNil$c) false) :pattern ((lmember$ ?v0)))) :named a1))
(assert (! (forall ((?v0 B_b_prod$)) (! (= (fun_app$a (lmember$a ?v0) lNil$d) false) :pattern ((lmember$a ?v0)))) :named a2))
(assert (! (forall ((?v0 B_a_prod$)) (! (= (fun_app$b (lmember$b ?v0) lNil$e) false) :pattern ((lmember$b ?v0)))) :named a3))
(assert (! (forall ((?v0 A_a_b_prod_prod$)) (! (= (fun_app$c (lmember$c ?v0) lNil$f) false) :pattern ((lmember$c ?v0)))) :named a4))
(assert (! (forall ((?v0 A_a_prod$)) (! (= (fun_app$d (lmember$d ?v0) lNil$g) false) :pattern ((lmember$d ?v0)))) :named a5))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$e (lmember$e ?v0) lNil$a) false) :pattern ((lmember$e ?v0)))) :named a6))
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$f (lmember$f ?v0) lNil$) false) :pattern ((lmember$f ?v0)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$)) (! (=> (or (lnull$ ?v0) (lnull$a ?v1)) (= (lzip$ ?v0 ?v1) lNil$)) :pattern ((lzip$ ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (or (lnull$ ?v0) (lnull$ ?v1)) (= (lzip$a ?v0 ?v1) lNil$g)) :pattern ((lzip$a ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$)) (! (=> (or (lnull$a ?v0) (lnull$ ?v1)) (= (lzip$b ?v0 ?v1) lNil$e)) :pattern ((lzip$b ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (=> (or (lnull$a ?v0) (lnull$a ?v1)) (= (lzip$c ?v0 ?v1) lNil$d)) :pattern ((lzip$c ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_b_prod_llist$)) (! (=> (or (lnull$ ?v0) (lnull$b ?v1)) (= (lzip$d ?v0 ?v1) lNil$f)) :pattern ((lzip$d ?v0 ?v1)))) :named a12))
(assert (! (forall ((?v0 B_llist$) (?v1 A_b_prod_llist$)) (! (=> (or (lnull$a ?v0) (lnull$b ?v1)) (= (lzip$e ?v0 ?v1) lNil$c)) :pattern ((lzip$e ?v0 ?v1)))) :named a13))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_llist$)) (! (=> (or (lnull$b ?v0) (lnull$ ?v1)) (= (lzip$f ?v0 ?v1) lNil$h)) :pattern ((lzip$f ?v0 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 B_llist$)) (! (=> (or (lnull$b ?v0) (lnull$a ?v1)) (= (lzip$g ?v0 ?v1) lNil$i)) :pattern ((lzip$g ?v0 ?v1)))) :named a15))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (! (=> (or (lnull$b ?v0) (lnull$b ?v1)) (= (lzip$h ?v0 ?v1) lNil$j)) :pattern ((lzip$h ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 B_b_prod_llist$)) (! (=> (or (lnull$ ?v0) (lnull$c ?v1)) (= (lzip$i ?v0 ?v1) lNil$k)) :pattern ((lzip$i ?v0 ?v1)))) :named a17))
(assert (! (forall ((?v0 B_a_b_prod_prod_set$)) (! (= (fun_app$g (gen_lset$ ?v0) lNil$c) ?v0) :pattern ((gen_lset$ ?v0)))) :named a18))
(assert (! (forall ((?v0 B_b_prod_set$)) (! (= (fun_app$h (gen_lset$a ?v0) lNil$d) ?v0) :pattern ((gen_lset$a ?v0)))) :named a19))
(assert (! (forall ((?v0 B_a_prod_set$)) (! (= (fun_app$i (gen_lset$b ?v0) lNil$e) ?v0) :pattern ((gen_lset$b ?v0)))) :named a20))
(assert (! (forall ((?v0 A_a_b_prod_prod_set$)) (! (= (fun_app$j (gen_lset$c ?v0) lNil$f) ?v0) :pattern ((gen_lset$c ?v0)))) :named a21))
(assert (! (forall ((?v0 A_a_prod_set$)) (! (= (fun_app$k (gen_lset$d ?v0) lNil$g) ?v0) :pattern ((gen_lset$d ?v0)))) :named a22))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$l (gen_lset$e ?v0) lNil$a) ?v0) :pattern ((gen_lset$e ?v0)))) :named a23))
(assert (! (forall ((?v0 A_b_prod_set$)) (! (= (fun_app$m (gen_lset$f ?v0) lNil$) ?v0) :pattern ((gen_lset$f ?v0)))) :named a24))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$)) (! (= (fun_app$ (finite_lprefix$ ?v0) lNil$c) (= ?v0 lNil$c)) :pattern ((finite_lprefix$ ?v0)))) :named a25))
(assert (! (forall ((?v0 B_b_prod_llist$)) (! (= (fun_app$a (finite_lprefix$a ?v0) lNil$d) (= ?v0 lNil$d)) :pattern ((finite_lprefix$a ?v0)))) :named a26))
(assert (! (forall ((?v0 B_a_prod_llist$)) (! (= (fun_app$b (finite_lprefix$b ?v0) lNil$e) (= ?v0 lNil$e)) :pattern ((finite_lprefix$b ?v0)))) :named a27))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$)) (! (= (fun_app$c (finite_lprefix$c ?v0) lNil$f) (= ?v0 lNil$f)) :pattern ((finite_lprefix$c ?v0)))) :named a28))
(assert (! (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$d (finite_lprefix$d ?v0) lNil$g) (= ?v0 lNil$g)) :pattern ((finite_lprefix$d ?v0)))) :named a29))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$e (finite_lprefix$e ?v0) lNil$a) (= ?v0 lNil$a)) :pattern ((finite_lprefix$e ?v0)))) :named a30))
(assert (! (forall ((?v0 A_b_prod_llist$)) (! (= (fun_app$f (finite_lprefix$f ?v0) lNil$) (= ?v0 lNil$)) :pattern ((finite_lprefix$f ?v0)))) :named a31))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$)) (! (= (fun_app$ (finite_lprefix$ lNil$c) ?v0) true) :pattern ((fun_app$ (finite_lprefix$ lNil$c) ?v0)))) :named a32))
(assert (! (forall ((?v0 B_b_prod_llist$)) (! (= (fun_app$a (finite_lprefix$a lNil$d) ?v0) true) :pattern ((fun_app$a (finite_lprefix$a lNil$d) ?v0)))) :named a33))
(assert (! (forall ((?v0 B_a_prod_llist$)) (! (= (fun_app$b (finite_lprefix$b lNil$e) ?v0) true) :pattern ((fun_app$b (finite_lprefix$b lNil$e) ?v0)))) :named a34))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$)) (! (= (fun_app$c (finite_lprefix$c lNil$f) ?v0) true) :pattern ((fun_app$c (finite_lprefix$c lNil$f) ?v0)))) :named a35))
(assert (! (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$d (finite_lprefix$d lNil$g) ?v0) true) :pattern ((fun_app$d (finite_lprefix$d lNil$g) ?v0)))) :named a36))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$e (finite_lprefix$e lNil$a) ?v0) true) :pattern ((fun_app$e (finite_lprefix$e lNil$a) ?v0)))) :named a37))
(assert (! (forall ((?v0 A_b_prod_llist$)) (! (= (fun_app$f (finite_lprefix$f lNil$) ?v0) true) :pattern ((fun_app$f (finite_lprefix$f lNil$) ?v0)))) :named a38))
(assert (! (= (lstrict_prefix$ lNil$c lNil$c) false) :named a39))
(assert (! (= (lstrict_prefix$a lNil$d lNil$d) false) :named a40))
(assert (! (= (lstrict_prefix$b lNil$e lNil$e) false) :named a41))
(assert (! (= (lstrict_prefix$c lNil$f lNil$f) false) :named a42))
(assert (! (= (lstrict_prefix$d lNil$g lNil$g) false) :named a43))
(assert (! (= (lstrict_prefix$e lNil$a lNil$a) false) :named a44))
(assert (! (= (lstrict_prefix$f lNil$ lNil$) false) :named a45))
(assert (! (forall ((?v0 B_a_b_prod_prod_bool_fun$)) (pred_llist$ ?v0 lNil$c)) :named a46))
(assert (! (forall ((?v0 B_b_prod_bool_fun$)) (pred_llist$a ?v0 lNil$d)) :named a47))
(assert (! (forall ((?v0 B_a_prod_bool_fun$)) (pred_llist$b ?v0 lNil$e)) :named a48))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$)) (pred_llist$c ?v0 lNil$f)) :named a49))
(assert (! (forall ((?v0 A_a_prod_bool_fun$)) (pred_llist$d ?v0 lNil$g)) :named a50))
(assert (! (forall ((?v0 A_bool_fun$)) (pred_llist$e ?v0 lNil$a)) :named a51))
(assert (! (forall ((?v0 A_b_prod_bool_fun$)) (pred_llist$f ?v0 lNil$)) :named a52))
(assert (! (ldistinct$ lNil$c) :named a53))
(assert (! (ldistinct$a lNil$d) :named a54))
(assert (! (ldistinct$b lNil$e) :named a55))
(assert (! (ldistinct$c lNil$f) :named a56))
(assert (! (ldistinct$d lNil$g) :named a57))
(assert (! (ldistinct$e lNil$a) :named a58))
(assert (! (ldistinct$f lNil$) :named a59))
(assert (! (forall ((?v0 B_a_b_prod_prod_b_a_b_prod_prod_bool_fun_fun$) (?v1 B_a_b_prod_prod_llist$)) (llexord$ ?v0 lNil$c ?v1)) :named a60))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_bool_fun_fun$) (?v1 B_b_prod_llist$)) (llexord$a ?v0 lNil$d ?v1)) :named a61))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_bool_fun_fun$) (?v1 B_a_prod_llist$)) (llexord$b ?v0 lNil$e ?v1)) :named a62))
(assert (! (forall ((?v0 A_a_b_prod_prod_a_a_b_prod_prod_bool_fun_fun$) (?v1 A_a_b_prod_prod_llist$)) (llexord$c ?v0 lNil$f ?v1)) :named a63))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_bool_fun_fun$) (?v1 A_a_prod_llist$)) (llexord$d ?v0 lNil$g ?v1)) :named a64))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (llexord$e ?v0 lNil$a ?v1)) :named a65))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_bool_fun_fun$) (?v1 A_b_prod_llist$)) (llexord$f ?v0 lNil$ ?v1)) :named a66))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$)) (= (lnull$b (lzip$ ?v0 ?v1)) (or (lnull$ ?v0) (lnull$a ?v1)))) :named a67))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$d (lzip$a ?v0 ?v1)) (or (lnull$ ?v0) (lnull$ ?v1)))) :named a68))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$)) (= (lnull$e (lzip$b ?v0 ?v1)) (or (lnull$a ?v0) (lnull$ ?v1)))) :named a69))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (lnull$c (lzip$c ?v0 ?v1)) (or (lnull$a ?v0) (lnull$a ?v1)))) :named a70))
(assert (! (forall ((?v0 A_llist$) (?v1 A_b_prod_llist$)) (= (lnull$f (lzip$d ?v0 ?v1)) (or (lnull$ ?v0) (lnull$b ?v1)))) :named a71))
(assert (! (forall ((?v0 B_llist$) (?v1 A_b_prod_llist$)) (= (lnull$g (lzip$e ?v0 ?v1)) (or (lnull$a ?v0) (lnull$b ?v1)))) :named a72))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_llist$)) (= (lnull$h (lzip$f ?v0 ?v1)) (or (lnull$b ?v0) (lnull$ ?v1)))) :named a73))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 B_llist$)) (= (lnull$i (lzip$g ?v0 ?v1)) (or (lnull$b ?v0) (lnull$a ?v1)))) :named a74))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (lnull$j (lzip$h ?v0 ?v1)) (or (lnull$b ?v0) (lnull$b ?v1)))) :named a75))
(assert (! (forall ((?v0 A_llist$) (?v1 B_b_prod_llist$)) (= (lnull$k (lzip$i ?v0 ?v1)) (or (lnull$ ?v0) (lnull$c ?v1)))) :named a76))
(check-sat)
;(get-unsat-core)
