; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 673
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun len$ () Nat$)
(declare-fun xsa$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist$ Nat$) A$)
(declare-fun zero$ () Nat$)
(declare-fun less$a (Nat$ Nat$) Bool)
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun llength$ () A_llist_enat_fun$)
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun the_enat$ (Enat$) Nat$)
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun gen_llength$ (Nat$) A_llist_enat_fun$)
(declare-fun lstrict_prefix$ (A_llist$) A_llist_bool_fun$)
(assert (! (not false) :named a0))
(assert (! (less$ (enat$ zero$) (fun_app$ llength$ xsa$)) :named a1))
(assert (! (less$ (fun_app$ llength$ (ltakeWhile$ p$ xs$)) (fun_app$ llength$ xs$)) :named a2))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (= (fun_app$ llength$ (ltakeWhile$ ?v0 ?v1)) (fun_app$ llength$ ?v1)) (= (ltakeWhile$ ?v0 ?v1) ?v1))) :named a3))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (forall ((?v2 A_llist$)) (=> (forall ((?v3 A_llist$)) (=> (fun_app$a (lstrict_prefix$ ?v3) ?v2) (fun_app$a ?v0 ?v3))) (fun_app$a ?v0 ?v2))) (fun_app$a ?v0 ?v1))) :named a4))
(assert (! (fun_app$b p$ (lnth$ xsa$ zero$)) :named a5))
(assert (! (= (fun_app$ llength$ (ltakeWhile$ p$ xs$)) (enat$ len$)) :named a6))
(assert (! (=> (forall ((?v0 Nat$)) (=> (= (fun_app$ llength$ (ltakeWhile$ p$ xs$)) (enat$ ?v0)) false)) false) :named a7))
(assert (! (fun_app$b p$ (lnth$ xs$ (the_enat$ (fun_app$ llength$ (ltakeWhile$ p$ xs$))))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$a (lstrict_prefix$ ?v0) ?v1) (less$ (fun_app$ llength$ ?v0) (fun_app$ llength$ ?v1)))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 A_bool_fun$) (?v2 A_llist$)) (=> (less$ (enat$ ?v0) (fun_app$ llength$ (ltakeWhile$ ?v1 ?v2))) (= (lnth$ (ltakeWhile$ ?v1 ?v2) ?v0) (lnth$ ?v2 ?v0)))) :named a10))
(assert (! (= (fun_app$ llength$ (ltakeWhile$ p$ xsa$)) (enat$ zero$)) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (less$ ?v0 (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a13))
(assert (! (not (less$a zero$ zero$)) :named a14))
(assert (! (= llength$ (gen_llength$ zero$)) :named a15))
(check-sat)
;(get-unsat-core)
