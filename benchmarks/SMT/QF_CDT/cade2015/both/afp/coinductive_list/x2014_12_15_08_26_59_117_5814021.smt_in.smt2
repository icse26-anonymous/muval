; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 610
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort B_llist_b_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun f$ () B_a_fun$)
(declare-fun xs$ () B_llist$)
(declare-fun lmap$ (B_a_fun$ B_llist$) A_llist$)
(declare-fun lset$ (B_llist$) B_set$)
(declare-fun ldrop$ (Enat$) A_llist_a_llist_fun$)
(declare-fun lmap$a (A_a_fun$ A_llist$) A_llist$)
(declare-fun lmap$b (A_b_fun$ A_llist$) B_llist$)
(declare-fun lmap$c (B_b_fun$ B_llist$) B_llist$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lset$a (A_llist$) A_set$)
(declare-fun inj_on$ (B_a_fun$ B_set$) Bool)
(declare-fun ldrop$a (Enat$) B_llist_b_llist_fun$)
(declare-fun ldropn$ (Nat$) A_llist_a_llist_fun$)
(declare-fun lnull$a (B_llist$) Bool)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_a_fun$ A$) A$)
(declare-fun ldropn$a (Nat$) B_llist_b_llist_fun$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun member$a (B$ B_set$) Bool)
(declare-fun fun_app$a (A_b_fun$ A$) B$)
(declare-fun fun_app$b (B_b_fun$ B$) B$)
(declare-fun fun_app$c (B_a_fun$ B$) A$)
(declare-fun fun_app$d (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$e (B_llist_b_llist_fun$ B_llist$) B_llist$)
(declare-fun iterates$ (A_a_fun$ A$) A_llist$)
(declare-fun llength$a (B_llist$) Enat$)
(declare-fun iterates$a (B_b_fun$ B$) B_llist$)
(declare-fun ldistinct$ (A_llist$) Bool)
(declare-fun ldistinct$a (B_llist$) Bool)
(declare-fun lstrict_prefix$ (B_llist$ B_llist$) Bool)
(declare-fun lstrict_prefix$a (A_llist$ A_llist$) Bool)
(assert (! (not (ldistinct$ (lmap$ f$ xs$))) :named a0))
(assert (! (and (ldistinct$a xs$) (inj_on$ f$ (lset$ xs$))) :named a1))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$ ?v4 (lset$a ?v0)) (and (member$ ?v5 (lset$a ?v1)) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v5)))) (= ?v4 ?v5))) (= (lmap$a ?v2 ?v0) (lmap$a ?v3 ?v1))) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_b_fun$) (?v3 A_b_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$ ?v4 (lset$a ?v0)) (and (member$ ?v5 (lset$a ?v1)) (= (fun_app$a ?v2 ?v4) (fun_app$a ?v3 ?v5)))) (= ?v4 ?v5))) (= (lmap$b ?v2 ?v0) (lmap$b ?v3 ?v1))) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_b_fun$) (?v3 B_b_fun$)) (=> (and (forall ((?v4 B$) (?v5 B$)) (=> (and (member$a ?v4 (lset$ ?v0)) (and (member$a ?v5 (lset$ ?v1)) (= (fun_app$b ?v2 ?v4) (fun_app$b ?v3 ?v5)))) (= ?v4 ?v5))) (= (lmap$c ?v2 ?v0) (lmap$c ?v3 ?v1))) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_a_fun$) (?v3 B_a_fun$)) (=> (and (forall ((?v4 B$) (?v5 B$)) (=> (and (member$a ?v4 (lset$ ?v0)) (and (member$a ?v5 (lset$ ?v1)) (= (fun_app$c ?v2 ?v4) (fun_app$c ?v3 ?v5)))) (= ?v4 ?v5))) (= (lmap$ ?v2 ?v0) (lmap$ ?v3 ?v1))) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 (lset$a ?v0)) (= (fun_app$ ?v1 ?v3) (fun_app$ ?v2 ?v3)))) (= (lmap$a ?v1 ?v0) (lmap$a ?v2 ?v0)))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_b_fun$) (?v2 A_b_fun$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 (lset$a ?v0)) (= (fun_app$a ?v1 ?v3) (fun_app$a ?v2 ?v3)))) (= (lmap$b ?v1 ?v0) (lmap$b ?v2 ?v0)))) :named a7))
(assert (! (forall ((?v0 B_llist$) (?v1 B_b_fun$) (?v2 B_b_fun$)) (=> (forall ((?v3 B$)) (=> (member$a ?v3 (lset$ ?v0)) (= (fun_app$b ?v1 ?v3) (fun_app$b ?v2 ?v3)))) (= (lmap$c ?v1 ?v0) (lmap$c ?v2 ?v0)))) :named a8))
(assert (! (forall ((?v0 B_llist$) (?v1 B_a_fun$) (?v2 B_a_fun$)) (=> (forall ((?v3 B$)) (=> (member$a ?v3 (lset$ ?v0)) (= (fun_app$c ?v1 ?v3) (fun_app$c ?v2 ?v3)))) (= (lmap$ ?v1 ?v0) (lmap$ ?v2 ?v0)))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 (lset$a ?v1)) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (lmap$a ?v2 ?v0) (lmap$a ?v3 ?v1)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_b_fun$) (?v3 A_b_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 (lset$a ?v1)) (= (fun_app$a ?v2 ?v4) (fun_app$a ?v3 ?v4))))) (= (lmap$b ?v2 ?v0) (lmap$b ?v3 ?v1)))) :named a11))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_b_fun$) (?v3 B_b_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 B$)) (=> (member$a ?v4 (lset$ ?v1)) (= (fun_app$b ?v2 ?v4) (fun_app$b ?v3 ?v4))))) (= (lmap$c ?v2 ?v0) (lmap$c ?v3 ?v1)))) :named a12))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_a_fun$) (?v3 B_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 B$)) (=> (member$a ?v4 (lset$ ?v1)) (= (fun_app$c ?v2 ?v4) (fun_app$c ?v3 ?v4))))) (= (lmap$ ?v2 ?v0) (lmap$ ?v3 ?v1)))) :named a13))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_b_fun$)) (=> (lstrict_prefix$ ?v0 ?v1) (lstrict_prefix$ (lmap$c ?v2 ?v0) (lmap$c ?v2 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_b_fun$)) (=> (lstrict_prefix$a ?v0 ?v1) (lstrict_prefix$ (lmap$b ?v2 ?v0) (lmap$b ?v2 ?v1)))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_fun$)) (=> (lstrict_prefix$a ?v0 ?v1) (lstrict_prefix$a (lmap$a ?v2 ?v0) (lmap$a ?v2 ?v1)))) :named a16))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_a_fun$)) (=> (lstrict_prefix$ ?v0 ?v1) (lstrict_prefix$a (lmap$ ?v2 ?v0) (lmap$ ?v2 ?v1)))) :named a17))
(assert (! (= (ldistinct$ lNil$) true) :named a18))
(assert (! (= (ldistinct$a lNil$a) true) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (fun_app$d (ldropn$ ?v0) (lmap$a ?v1 ?v2)) (lmap$a ?v1 (fun_app$d (ldropn$ ?v0) ?v2)))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_fun$) (?v2 A_llist$)) (= (fun_app$e (ldropn$a ?v0) (lmap$b ?v1 ?v2)) (lmap$b ?v1 (fun_app$d (ldropn$ ?v0) ?v2)))) :named a21))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_fun$) (?v2 B_llist$)) (= (fun_app$e (ldropn$a ?v0) (lmap$c ?v1 ?v2)) (lmap$c ?v1 (fun_app$e (ldropn$a ?v0) ?v2)))) :named a22))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_fun$) (?v2 B_llist$)) (= (fun_app$d (ldropn$ ?v0) (lmap$ ?v1 ?v2)) (lmap$ ?v1 (fun_app$e (ldropn$a ?v0) ?v2)))) :named a23))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (fun_app$d (ldrop$ ?v0) (lmap$a ?v1 ?v2)) (lmap$a ?v1 (fun_app$d (ldrop$ ?v0) ?v2)))) :named a24))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_fun$) (?v2 A_llist$)) (= (fun_app$e (ldrop$a ?v0) (lmap$b ?v1 ?v2)) (lmap$b ?v1 (fun_app$d (ldrop$ ?v0) ?v2)))) :named a25))
(assert (! (forall ((?v0 Enat$) (?v1 B_b_fun$) (?v2 B_llist$)) (= (fun_app$e (ldrop$a ?v0) (lmap$c ?v1 ?v2)) (lmap$c ?v1 (fun_app$e (ldrop$a ?v0) ?v2)))) :named a26))
(assert (! (forall ((?v0 Enat$) (?v1 B_a_fun$) (?v2 B_llist$)) (= (fun_app$d (ldrop$ ?v0) (lmap$ ?v1 ?v2)) (lmap$ ?v1 (fun_app$e (ldrop$a ?v0) ?v2)))) :named a27))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (lmap$a ?v0 (iterates$ ?v0 ?v1)) (iterates$ ?v0 (fun_app$ ?v0 ?v1)))) :named a28))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (= (lmap$c ?v0 (iterates$a ?v0 ?v1)) (iterates$a ?v0 (fun_app$b ?v0 ?v1)))) :named a29))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lnull$ (lmap$a ?v0 ?v1)) (lnull$ ?v1))) :named a30))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (lnull$a (lmap$b ?v0 ?v1)) (lnull$ ?v1))) :named a31))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (lnull$a (lmap$c ?v0 ?v1)) (lnull$a ?v1))) :named a32))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (lnull$ (lmap$ ?v0 ?v1)) (lnull$a ?v1))) :named a33))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (llength$ (lmap$a ?v0 ?v1)) (llength$ ?v1))) :named a34))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (llength$a (lmap$b ?v0 ?v1)) (llength$ ?v1))) :named a35))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (llength$a (lmap$c ?v0 ?v1)) (llength$a ?v1))) :named a36))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (llength$ (lmap$ ?v0 ?v1)) (llength$a ?v1))) :named a37))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (ldistinct$ ?v0) (ldistinct$ (fun_app$d (ldropn$ ?v1) ?v0)))) :named a38))
(assert (! (forall ((?v0 B_llist$) (?v1 Nat$)) (=> (ldistinct$a ?v0) (ldistinct$a (fun_app$e (ldropn$a ?v1) ?v0)))) :named a39))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (ltl$ (lmap$a ?v0 ?v1)) (lmap$a ?v0 (ltl$ ?v1)))) :named a40))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (ltl$a (lmap$b ?v0 ?v1)) (lmap$b ?v0 (ltl$ ?v1)))) :named a41))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (ltl$a (lmap$c ?v0 ?v1)) (lmap$c ?v0 (ltl$a ?v1)))) :named a42))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (ltl$ (lmap$ ?v0 ?v1)) (lmap$ ?v0 (ltl$a ?v1)))) :named a43))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$e (ldrop$a ?v0) lNil$a) lNil$a) :pattern ((ldrop$a ?v0)))) :named a44))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$d (ldrop$ ?v0) lNil$) lNil$) :pattern ((ldrop$ ?v0)))) :named a45))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$e (ldropn$a ?v0) lNil$a) lNil$a) :pattern ((ldropn$a ?v0)))) :named a46))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$d (ldropn$ ?v0) lNil$) lNil$) :pattern ((ldropn$ ?v0)))) :named a47))
(assert (! (= (lstrict_prefix$ lNil$a lNil$a) false) :named a48))
(assert (! (= (lstrict_prefix$a lNil$ lNil$) false) :named a49))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$)) (= (ltl$ (fun_app$d (ldrop$ ?v0) ?v1)) (fun_app$d (ldrop$ ?v0) (ltl$ ?v1)))) :named a50))
(assert (! (forall ((?v0 Enat$) (?v1 B_llist$)) (= (ltl$a (fun_app$e (ldrop$a ?v0) ?v1)) (fun_app$e (ldrop$a ?v0) (ltl$a ?v1)))) :named a51))
(check-sat)
;(get-unsat-core)
