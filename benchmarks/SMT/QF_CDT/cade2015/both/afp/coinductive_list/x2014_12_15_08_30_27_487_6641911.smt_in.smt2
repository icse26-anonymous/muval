; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 583
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Nat_bool_fun_nat_bool_fun_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun_nat_nat_bool_fun_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun uu$ () Nat_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun uua$ (A_llist$) Nat_bool_fun$)
(declare-fun uub$ (Nat_bool_fun$) Nat_bool_fun_nat_bool_fun_fun$)
(declare-fun uuc$ (Nat_bool_fun$) Nat_bool_fun_nat_bool_fun_fun$)
(declare-fun uud$ (Nat_set$) Nat_nat_bool_fun_fun_nat_nat_bool_fun_fun_fun$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lmap$ (A_a_fun$ A_llist$) A_llist$)
(declare-fun lnth$ (A_llist$ Nat$) A$)
(declare-fun finite$ (Nat_set$) Bool)
(declare-fun member$ (Nat$ Nat_set$) Bool)
(declare-fun collect$ (Nat_bool_fun$) Nat_set$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun lfilter$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (Nat_bool_fun_nat_bool_fun_fun$ Nat_bool_fun$) Nat_bool_fun$)
(declare-fun fun_app$c (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$d (Nat_nat_bool_fun_fun_nat_nat_bool_fun_fun_fun$ Nat_nat_bool_fun_fun$) Nat_nat_bool_fun_fun$)
(declare-fun fun_app$e (A_a_fun$ A$) A$)
(declare-fun ldistinct$ (A_llist$) Bool)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (and (less$ (enat$ ?v0) (llength$ xs$)) (fun_app$a p$ (lnth$ xs$ ?v0)))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (less$ (enat$ ?v1) (llength$ ?v0))) :pattern ((fun_app$ (uua$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$b (uub$ ?v0) ?v1) ?v2) (or (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$b (uub$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$b (uuc$ ?v0) ?v1) ?v2) (and (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$b (uuc$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$c (fun_app$d (uud$ ?v0) ?v1) ?v2) ?v3) (and (member$ ?v3 ?v0) (fun_app$ (fun_app$c ?v1 ?v3) ?v2))) :pattern ((fun_app$ (fun_app$c (fun_app$d (uud$ ?v0) ?v1) ?v2) ?v3)))) :named a4))
(assert (! (not (or (lfinite$ xs$) (finite$ (collect$ uu$)))) :named a5))
(assert (! (=> (not (lfinite$ xs$)) (finite$ (collect$ uu$))) :named a6))
(assert (! (lfinite$ (lfilter$ p$ xs$)) :named a7))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (exists ((?v1 Nat$)) (= (llength$ ?v0) (enat$ ?v1))))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (= (llength$ ?v0) (enat$ ?v1)) (lfinite$ ?v0))) :named a9))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$ ?v0) (exists ((?v1 Nat$)) (= (llength$ ?v0) (enat$ ?v1))))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$ ?v0) (finite$ (collect$ (uua$ ?v0))))) :named a11))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$)) (= (finite$ (collect$ (fun_app$b (uub$ ?v0) ?v1))) (and (finite$ (collect$ ?v0)) (finite$ (collect$ ?v1))))) :named a12))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat_bool_fun$)) (=> (or (finite$ (collect$ ?v0)) (finite$ (collect$ ?v1))) (finite$ (collect$ (fun_app$b (uuc$ ?v0) ?v1))))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (less$ ?v0 (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a15))
(assert (! (forall ((?v0 A_llist$)) (= (ldistinct$ ?v0) (forall ((?v1 Nat$) (?v2 Nat$)) (=> (and (less$ (enat$ ?v1) (llength$ ?v0)) (and (less$ (enat$ ?v2) (llength$ ?v0)) (not (= ?v1 ?v2)))) (not (= (lnth$ ?v0 ?v1) (lnth$ ?v0 ?v2))))))) :named a16))
(assert (! (forall ((?v0 Nat_bool_fun$)) (=> (not (finite$ (collect$ ?v0))) (exists ((?v1 Nat$)) (fun_app$ ?v0 ?v1)))) :named a17))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set$) (?v2 Nat_nat_bool_fun_fun$)) (=> (and (not (finite$ ?v0)) (and (finite$ ?v1) (forall ((?v3 Nat$)) (=> (member$ ?v3 ?v0) (exists ((?v4 Nat$)) (and (member$ ?v4 ?v1) (fun_app$ (fun_app$c ?v2 ?v3) ?v4))))))) (exists ((?v3 Nat$)) (and (member$ ?v3 ?v1) (not (finite$ (collect$ (fun_app$c (fun_app$d (uud$ ?v0) ?v2) ?v3)))))))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_a_fun$)) (=> (less$ (enat$ ?v0) (llength$ ?v1)) (= (lnth$ (lmap$ ?v2 ?v1) ?v0) (fun_app$e ?v2 (lnth$ ?v1 ?v0))))) :named a19))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 Nat$)) (=> (and (lprefix$ ?v0 ?v1) (less$ (enat$ ?v2) (llength$ ?v0))) (= (lnth$ ?v0 ?v2) (lnth$ ?v1 ?v2)))) :named a20))
(check-sat)
;(get-unsat-core)
