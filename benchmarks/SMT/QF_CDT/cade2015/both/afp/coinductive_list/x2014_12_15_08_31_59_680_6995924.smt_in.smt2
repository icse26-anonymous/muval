; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 566
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_enat_fun$ 0)
(declare-sort A_a_llist_fun$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Nat_nat_enat_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-fun uu$ () Nat_enat_fun$)
(declare-fun uua$ () Nat_bool_fun$)
(declare-fun uub$ (Nat_nat_enat_fun_fun$ Nat_set$) Nat_enat_fun$)
(declare-fun uuc$ (Nat_nat_enat_fun_fun$ Nat$) Nat_enat_fun$)
(declare-fun uud$ (Nat_nat_enat_fun_fun$ Nat_set$) Nat_enat_fun$)
(declare-fun uue$ () A_a_fun$)
(declare-fun uuf$ () A_llist_a_llist_fun$)
(declare-fun uug$ () A_llist_bool_fun$)
(declare-fun uuh$ () A_bool_fun$)
(declare-fun xss$ () A_llist_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lmap$ (A_a_fun$) A_llist_a_llist_fun$)
(declare-fun lnth$ (A_llist_llist$ Nat$) A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lmap$a (A_llist_a_fun$ A_llist_llist$) A_llist$)
(declare-fun lmap$b (A_a_llist_fun$ A_llist$) A_llist_llist$)
(declare-fun lmap$c (A_llist_a_llist_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun lnth$a (A_llist$ Nat$) A$)
(declare-fun lset$a (A_llist_llist$) A_llist_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun setsum$ (Nat_enat_fun$ Nat_set$) Enat$)
(declare-fun collect$ (Nat_bool_fun$) Nat_set$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun lfinite$ (A_llist_llist$) Bool)
(declare-fun llength$ (A_llist_llist$) Enat$)
(declare-fun lprefix$ (A_llist$) A_llist_bool_fun$)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$a (Nat_enat_fun$ Nat$) Enat$)
(declare-fun fun_app$b (Nat_nat_enat_fun_fun$ Nat$) Nat_enat_fun$)
(declare-fun fun_app$c (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$d (A_a_fun$ A$) A$)
(declare-fun fun_app$e (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$f (A_bool_fun$ A$) Bool)
(declare-fun fun_app$g (A_llist_a_fun$ A_llist$) A$)
(declare-fun fun_app$h (A_a_llist_fun$ A$) A_llist$)
(declare-fun lfinite$a (A_llist$) Bool)
(declare-fun llength$a (A_llist$) Enat$)
(declare-fun lprefix$a (A_llist_llist$ A_llist_llist$) Bool)
(declare-fun ldistinct$ (A_llist$) Bool)
(declare-fun ldistinct$a (A_llist_llist$) Bool)
(declare-fun ltakeWhile$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun ltakeWhile$a (A_llist_bool_fun$ A_llist_llist$) A_llist_llist$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uua$ ?v0) (less$ (enat$ ?v0) (llength$ xss$))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a uu$ ?v0) (llength$a (lnth$ xss$ ?v0))) :pattern ((fun_app$a uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$a (uuc$ ?v0 ?v1) ?v2) (fun_app$a (fun_app$b ?v0 ?v2) ?v1)) :pattern ((fun_app$a (uuc$ ?v0 ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat_set$) (?v2 Nat$)) (! (= (fun_app$a (uud$ ?v0 ?v1) ?v2) (setsum$ (uuc$ ?v0 ?v2) ?v1)) :pattern ((fun_app$a (uud$ ?v0 ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat_set$) (?v2 Nat$)) (! (= (fun_app$a (uub$ ?v0 ?v1) ?v2) (setsum$ (fun_app$b ?v0 ?v2) ?v1)) :pattern ((fun_app$a (uub$ ?v0 ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$c uuf$ ?v0) ?v0) :pattern ((fun_app$c uuf$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$d uue$ ?v0) ?v0) :pattern ((fun_app$d uue$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$e uug$ ?v0) true) :pattern ((fun_app$e uug$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$f uuh$ ?v0) true) :pattern ((fun_app$f uuh$ ?v0)))) :named a8))
(assert (! (not (= (llength$a (lconcat$ xss$)) (setsum$ uu$ (collect$ uua$)))) :named a9))
(assert (! (lfinite$ xss$) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$a ?v0) (exists ((?v1 Nat$)) (= (llength$a ?v0) (enat$ ?v1))))) :named a12))
(assert (! (forall ((?v0 A_llist_llist$)) (= (lfinite$ ?v0) (exists ((?v1 Nat$)) (= (llength$ ?v0) (enat$ ?v1))))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (= (llength$a ?v0) (enat$ ?v1)) (lfinite$a ?v0))) :named a14))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (=> (= (llength$ ?v0) (enat$ ?v1)) (lfinite$ ?v0))) :named a15))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$a ?v0) (exists ((?v1 Nat$)) (= (llength$a ?v0) (enat$ ?v1))))) :named a16))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (lfinite$ ?v0) (exists ((?v1 Nat$)) (= (llength$ ?v0) (enat$ ?v1))))) :named a17))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (less$ ?v0 (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a18))
(assert (! (forall ((?v0 A_llist$)) (= (ldistinct$ ?v0) (forall ((?v1 Nat$) (?v2 Nat$)) (=> (and (less$ (enat$ ?v1) (llength$a ?v0)) (and (less$ (enat$ ?v2) (llength$a ?v0)) (not (= ?v1 ?v2)))) (not (= (lnth$a ?v0 ?v1) (lnth$a ?v0 ?v2))))))) :named a19))
(assert (! (forall ((?v0 A_llist_llist$)) (= (ldistinct$a ?v0) (forall ((?v1 Nat$) (?v2 Nat$)) (=> (and (less$ (enat$ ?v1) (llength$ ?v0)) (and (less$ (enat$ ?v2) (llength$ ?v0)) (not (= ?v1 ?v2)))) (not (= (lnth$ ?v0 ?v1) (lnth$ ?v0 ?v2))))))) :named a20))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat_set$) (?v2 Nat_set$)) (= (setsum$ (uub$ ?v0 ?v1) ?v2) (setsum$ (uud$ ?v0 ?v2) ?v1))) :named a21))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_a_fun$)) (=> (less$ (enat$ ?v0) (llength$a ?v1)) (= (lnth$a (fun_app$c (lmap$ ?v2) ?v1) ?v0) (fun_app$d ?v2 (lnth$a ?v1 ?v0))))) :named a22))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist_llist$) (?v2 A_llist_a_fun$)) (=> (less$ (enat$ ?v0) (llength$ ?v1)) (= (lnth$a (lmap$a ?v2 ?v1) ?v0) (fun_app$g ?v2 (lnth$ ?v1 ?v0))))) :named a23))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_a_llist_fun$)) (=> (less$ (enat$ ?v0) (llength$a ?v1)) (= (lnth$ (lmap$b ?v2 ?v1) ?v0) (fun_app$h ?v2 (lnth$a ?v1 ?v0))))) :named a24))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_fun$)) (=> (less$ (enat$ ?v0) (llength$ ?v1)) (= (lnth$ (lmap$c ?v2 ?v1) ?v0) (fun_app$c ?v2 (lnth$ ?v1 ?v0))))) :named a25))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 Nat$)) (=> (and (fun_app$e (lprefix$ ?v0) ?v1) (less$ (enat$ ?v2) (llength$a ?v0))) (= (lnth$a ?v0 ?v2) (lnth$a ?v1 ?v2)))) :named a26))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$) (?v2 Nat$)) (=> (and (lprefix$a ?v0 ?v1) (less$ (enat$ ?v2) (llength$ ?v0))) (= (lnth$ ?v0 ?v2) (lnth$ ?v1 ?v2)))) :named a27))
(assert (! (forall ((?v0 Nat$) (?v1 A_bool_fun$) (?v2 A_llist$)) (=> (less$ (enat$ ?v0) (llength$a (fun_app$c (ltakeWhile$ ?v1) ?v2))) (= (lnth$a (fun_app$c (ltakeWhile$ ?v1) ?v2) ?v0) (lnth$a ?v2 ?v0)))) :named a28))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist_bool_fun$) (?v2 A_llist_llist$)) (=> (less$ (enat$ ?v0) (llength$ (ltakeWhile$a ?v1 ?v2))) (= (lnth$ (ltakeWhile$a ?v1 ?v2) ?v0) (lnth$ ?v2 ?v0)))) :named a29))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$ ?v0 (lset$ ?v1)) (exists ((?v2 Nat$)) (and (less$ (enat$ ?v2) (llength$a ?v1)) (= (lnth$a ?v1 ?v2) ?v0))))) :named a30))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (= (member$a ?v0 (lset$a ?v1)) (exists ((?v2 Nat$)) (and (less$ (enat$ ?v2) (llength$ ?v1)) (= (lnth$ ?v1 ?v2) ?v0))))) :named a31))
(assert (! (forall ((?v0 A_llist_llist$)) (lprefix$a ?v0 ?v0)) :named a32))
(assert (! (forall ((?v0 A_llist$)) (fun_app$e (lprefix$ ?v0) ?v0)) :named a33))
(assert (! (forall ((?v0 A_llist_llist$)) (lprefix$a ?v0 ?v0)) :named a34))
(assert (! (forall ((?v0 A_llist$)) (fun_app$e (lprefix$ ?v0) ?v0)) :named a35))
(assert (! (forall ((?v0 A_llist$)) (= (fun_app$c (lmap$ uue$) ?v0) ?v0)) :named a36))
(assert (! (forall ((?v0 A_llist_llist$)) (= (lmap$c uuf$ ?v0) ?v0)) :named a37))
(assert (! (forall ((?v0 A_llist_llist$)) (= (ltakeWhile$a uug$ ?v0) ?v0)) :named a38))
(assert (! (forall ((?v0 A_llist$)) (= (fun_app$c (ltakeWhile$ uuh$) ?v0) ?v0)) :named a39))
(check-sat)
;(get-unsat-core)
