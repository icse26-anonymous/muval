; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 245
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-codatatypes () ((B_llist$ (lNil$) (lCons$ (lhd$ B$) (ltl$ B_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))))
(declare-fun f$ () B_a_fun$)
(declare-fun xs$ () B_llist$)
(declare-fun lmap$ (B_a_fun$ B_llist$) A_llist$)
(declare-fun lset$ (B_llist$) B_set$)
(declare-fun lmap$a (A_a_fun$ A_llist$) A_llist$)
(declare-fun lmap$b (A_b_fun$ A_llist$) B_llist$)
(declare-fun lmap$c (B_b_fun$ B_llist$) B_llist$)
(declare-fun lnull$ (B_llist$) Bool)
(declare-fun lset$a (A_llist$) A_set$)
(declare-fun finite$ (B_set$) Bool)
(declare-fun lnull$a (A_llist$) Bool)
(declare-fun finite$a (A_set$) Bool)
(declare-fun lappend$ (B_llist$ B_llist$) B_llist$)
(declare-fun lfinite$ (B_llist$) Bool)
(declare-fun lappend$a (A_llist$ A_llist$) A_llist$)
(declare-fun lfinite$a (A_llist$) Bool)
(assert (! (not (lfinite$ xs$)) :named a0))
(assert (! (lfinite$a (lmap$ f$ xs$)) :named a1))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (lfinite$ (lappend$ ?v0 ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1)))) :named a2))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$a (lappend$a ?v0 ?v1)) (and (lfinite$a ?v0) (lfinite$a ?v1)))) :named a3))
(assert (! (= (lfinite$ lNil$) true) :named a4))
(assert (! (= (lfinite$a lNil$a) true) :named a5))
(assert (! (forall ((?v0 B_llist$)) (= (lfinite$ (ltl$ ?v0)) (lfinite$ ?v0))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$a (ltl$a ?v0)) (lfinite$a ?v0))) :named a7))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (=> (not (lfinite$ ?v0)) (= (lappend$ ?v0 ?v1) ?v0)) :pattern ((lappend$ ?v0 ?v1)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$a ?v0)) (= (lappend$a ?v0 ?v1) ?v0)) :pattern ((lappend$a ?v0 ?v1)))) :named a13))
(assert (! (lfinite$ lNil$) :named a14))
(assert (! (lfinite$a lNil$a) :named a15))
(assert (! (forall ((?v0 B_llist$) (?v1 B$)) (=> (lfinite$ ?v0) (lfinite$ (lCons$ ?v1 ?v0)))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (lfinite$a ?v0) (lfinite$a (lCons$a ?v1 ?v0)))) :named a17))
(assert (! (forall ((?v0 B_llist$)) (=> (lnull$ ?v0) (lfinite$ ?v0))) :named a18))
(assert (! (forall ((?v0 A_llist$)) (=> (lnull$a ?v0) (lfinite$a ?v0))) :named a19))
(assert (! (forall ((?v0 B_llist$)) (= (lfinite$ ?v0) (or (= ?v0 lNil$) (exists ((?v1 B_llist$) (?v2 B$)) (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$ ?v1)))))) :named a20))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$a ?v0) (or (= ?v0 lNil$a) (exists ((?v1 A_llist$) (?v2 A$)) (and (= ?v0 (lCons$a ?v2 ?v1)) (lfinite$a ?v1)))))) :named a21))
(assert (! (forall ((?v0 B_llist$)) (=> (and (lfinite$ ?v0) (and (=> (= ?v0 lNil$) false) (forall ((?v1 B_llist$) (?v2 B$)) (=> (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$ ?v1)) false)))) false)) :named a22))
(assert (! (forall ((?v0 A_llist$)) (=> (and (lfinite$a ?v0) (and (=> (= ?v0 lNil$a) false) (forall ((?v1 A_llist$) (?v2 A$)) (=> (and (= ?v0 (lCons$a ?v2 ?v1)) (lfinite$a ?v1)) false)))) false)) :named a23))
(assert (! (forall ((?v0 B_llist$)) (=> (lfinite$ ?v0) (finite$ (lset$ ?v0)))) :named a24))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$a ?v0) (finite$a (lset$a ?v0)))) :named a25))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a26))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a27))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lnull$a (lmap$a ?v0 ?v1)) (lnull$a ?v1))) :named a28))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (lnull$ (lmap$b ?v0 ?v1)) (lnull$a ?v1))) :named a29))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (lnull$ (lmap$c ?v0 ?v1)) (lnull$ ?v1))) :named a30))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (lnull$a (lmap$ ?v0 ?v1)) (lnull$ ?v1))) :named a31))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$a (lappend$a ?v0 ?v1))) (or (not (lnull$a ?v0)) (not (lnull$a ?v1))))) :named a32))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (not (lnull$ (lappend$ ?v0 ?v1))) (or (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a33))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$a (lappend$a ?v0 ?v1)) (and (lnull$a ?v0) (lnull$a ?v1)))) :named a34))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (lnull$ (lappend$ ?v0 ?v1)) (and (lnull$ ?v0) (lnull$ ?v1)))) :named a35))
(check-sat)
;(get-unsat-core)
