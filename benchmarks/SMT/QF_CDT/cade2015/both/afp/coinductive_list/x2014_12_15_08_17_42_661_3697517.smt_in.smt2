; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 639
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun m$ () Nat$)
(declare-fun n$ () Nat$)
(declare-fun xs$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun minus$ (Nat$ Nat$) Nat$)
(declare-fun ldropn$ (Nat$) A_llist_a_llist_fun$)
(declare-fun minus$a (Enat$ Enat$) Enat$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$b (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$c (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$d (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun less_eq$a (Nat$ Nat$) Bool)
(assert (! (not (less_eq$ (enat$ (minus$ n$ m$)) (llength$ (fun_app$ (ldropn$ m$) xs$)))) :named a0))
(assert (! (less_eq$ (enat$ n$) (llength$ xs$)) :named a1))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (less_eq$ ?v3 ?v4) (fun_app$a (fun_app$b ?v0 ?v3) ?v4))) (=> (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (fun_app$a (fun_app$b ?v0 ?v2) ?v1))) (fun_app$a (fun_app$b ?v0 ?v2) ?v1))) :named a2))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (less_eq$a ?v3 ?v4) (fun_app$c (fun_app$d ?v0 ?v3) ?v4))) (=> (fun_app$c (fun_app$d ?v0 ?v1) ?v2) (fun_app$c (fun_app$d ?v0 ?v2) ?v1))) (fun_app$c (fun_app$d ?v0 ?v2) ?v1))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 Enat$)) (less_eq$ ?v0 ?v0)) :named a5))
(assert (! (forall ((?v0 Nat$)) (less_eq$a ?v0 ?v0)) :named a6))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (less_eq$ ?v0 (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (= (lnull$ (fun_app$ (ldropn$ ?v0) ?v1)) (less_eq$ (llength$ ?v1) (enat$ ?v0)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (= (= (fun_app$ (ldropn$ ?v0) ?v1) lNil$) (less_eq$ (llength$ ?v1) (enat$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (! (=> (less_eq$ (llength$ ?v0) (enat$ ?v1)) (= (fun_app$ (ldropn$ ?v1) ?v0) lNil$)) :pattern ((fun_app$ (ldropn$ ?v1) ?v0)))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (= (llength$ (fun_app$ (ldropn$ ?v0) ?v1)) (minus$a (llength$ ?v1) (enat$ ?v0)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less_eq$ (enat$ ?v0) (enat$ ?v1)) (less_eq$a ?v0 ?v1)) :pattern ((less_eq$ (enat$ ?v0) (enat$ ?v1))))) :named a12))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (ldropn$ ?v0) lNil$) lNil$) :pattern ((ldropn$ ?v0)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (minus$a (enat$ ?v0) (enat$ ?v1)) (enat$ (minus$ ?v0 ?v1))) :pattern ((minus$a (enat$ ?v0) (enat$ ?v1))))) :named a14))
(assert (! (forall ((?v0 A_llist$)) (! (= (lnull$ ?v0) (= ?v0 lNil$)) :pattern ((lnull$ ?v0)))) :named a15))
(check-sat)
;(get-unsat-core)
