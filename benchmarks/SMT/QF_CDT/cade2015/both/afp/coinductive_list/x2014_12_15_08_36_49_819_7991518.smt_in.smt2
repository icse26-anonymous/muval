; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 445
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort A_list_a_llist_fun$ 0)
(declare-sort B_list_b_llist_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort B_llist_b_llist_fun$ 0)
(declare-sort A_list_b_list_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-sort A_list_a_llist_a_llist_fun_fun$ 0)
(declare-sort B_list_b_llist_b_llist_fun_fun$ 0)
(declare-sort A_a_list_a_llist_a_llist_fun_fun_fun$ 0)
(declare-sort B_b_list_b_llist_b_llist_fun_fun_fun$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))
  (B_list$ (nil$a) (cons$a (hd$a B$) (tl$a B_list$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))))
(declare-fun a$ () A_b_bool_fun_fun$)
(declare-fun uu$ () A_a_list_a_llist_a_llist_fun_fun_fun$)
(declare-fun uua$ () B_b_list_b_llist_b_llist_fun_fun_fun$)
(declare-fun uub$ (B_b_bool_fun_fun$ B_b_bool_fun_fun$) B_b_bool_fun_fun$)
(declare-fun uuc$ (B_a_bool_fun_fun$ B_a_bool_fun_fun$) B_a_bool_fun_fun$)
(declare-fun uud$ (A_a_bool_fun_fun$ A_a_bool_fun_fun$) A_a_bool_fun_fun$)
(declare-fun uue$ (A_b_bool_fun_fun$ A_b_bool_fun_fun$) A_b_bool_fun_fun$)
(declare-fun uuf$ () B_b_bool_fun_fun$)
(declare-fun uug$ () B_llist_b_llist_bool_fun_fun$)
(declare-fun uuh$ () A_a_bool_fun_fun$)
(declare-fun uui$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun rel_fun$ (A_list_b_list_bool_fun_fun$ A_llist_b_llist_bool_fun_fun$ A_list_a_llist_fun$ B_list_b_llist_fun$) Bool)
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$d (B_bool_fun$ B$) Bool)
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$f (A_bool_fun$ A$) Bool)
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$h (B_llist_b_llist_fun$ B_llist$) B_llist$)
(declare-fun fun_app$i (B_list_b_llist_b_llist_fun_fun$ B_list$) B_llist_b_llist_fun$)
(declare-fun fun_app$j (B_b_list_b_llist_b_llist_fun_fun_fun$ B$) B_list_b_llist_b_llist_fun_fun$)
(declare-fun fun_app$k (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$l (A_list_a_llist_a_llist_fun_fun$ A_list$) A_llist_a_llist_fun$)
(declare-fun fun_app$m (A_a_list_a_llist_a_llist_fun_fun_fun$ A$) A_list_a_llist_a_llist_fun_fun$)
(declare-fun fun_app$n (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$o (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$p (A_llist_b_llist_bool_fun_fun$ A_llist$) B_llist_bool_fun$)
(declare-fun rec_list$ (A_llist$ A_a_list_a_llist_a_llist_fun_fun_fun$) A_list_a_llist_fun$)
(declare-fun list_all2$ (A_b_bool_fun_fun$) A_list_b_list_bool_fun_fun$)
(declare-fun rec_list$a (B_llist$ B_b_list_b_llist_b_llist_fun_fun_fun$) B_list_b_llist_fun$)
(declare-fun llist_all2$ (A_b_bool_fun_fun$) A_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$a (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$b (B_a_bool_fun_fun$ B_llist$) A_llist_bool_fun$)
(declare-fun llist_all2$c (B_b_bool_fun_fun$) B_llist_b_llist_bool_fun_fun$)
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (= (fun_app$ (fun_app$a uug$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uug$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$c uui$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c uui$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$d (fun_app$e uuf$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (fun_app$e uuf$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$f (fun_app$g uuh$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$f (fun_app$g uuh$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 B$) (?v1 B_list$) (?v2 B_llist$)) (! (= (fun_app$h (fun_app$i (fun_app$j uua$ ?v0) ?v1) ?v2) (lCons$a ?v0 ?v2)) :pattern ((fun_app$h (fun_app$i (fun_app$j uua$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A_llist$)) (! (= (fun_app$k (fun_app$l (fun_app$m uu$ ?v0) ?v1) ?v2) (lCons$ ?v0 ?v2)) :pattern ((fun_app$k (fun_app$l (fun_app$m uu$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_bool_fun_fun$) (?v2 B$) (?v3 B$)) (! (= (fun_app$d (fun_app$e (uub$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$d (fun_app$e ?v0 ?v2) ?v3) (fun_app$d (fun_app$e ?v1 ?v2) ?v3))) :pattern ((fun_app$d (fun_app$e (uub$ ?v0 ?v1) ?v2) ?v3)))) :named a6))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_a_bool_fun_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$f (fun_app$n (uuc$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$f (fun_app$n ?v0 ?v2) ?v3) (fun_app$f (fun_app$n ?v1 ?v2) ?v3))) :pattern ((fun_app$f (fun_app$n (uuc$ ?v0 ?v1) ?v2) ?v3)))) :named a7))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_bool_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$d (fun_app$o (uue$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$d (fun_app$o ?v0 ?v2) ?v3) (fun_app$d (fun_app$o ?v1 ?v2) ?v3))) :pattern ((fun_app$d (fun_app$o (uue$ ?v0 ?v1) ?v2) ?v3)))) :named a8))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_bool_fun_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$f (fun_app$g (uud$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$f (fun_app$g ?v0 ?v2) ?v3) (fun_app$f (fun_app$g ?v1 ?v2) ?v3))) :pattern ((fun_app$f (fun_app$g (uud$ ?v0 ?v1) ?v2) ?v3)))) :named a9))
(assert (! (not (rel_fun$ (list_all2$ a$) (llist_all2$ a$) (rec_list$ lNil$ uu$) (rec_list$a lNil$a uua$))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a11))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (fun_app$b (fun_app$c (llist_all2$a ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4)) (and (fun_app$f (fun_app$g ?v0 ?v1) ?v3) (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v2) ?v4))) :pattern ((fun_app$b (fun_app$c (llist_all2$a ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4))))) :named a13))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B$) (?v2 B_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (fun_app$b (llist_all2$b ?v0 (lCons$a ?v1 ?v2)) (lCons$ ?v3 ?v4)) (and (fun_app$f (fun_app$n ?v0 ?v1) ?v3) (fun_app$b (llist_all2$b ?v0 ?v2) ?v4))) :pattern ((fun_app$b (llist_all2$b ?v0 (lCons$a ?v1 ?v2)) (lCons$ ?v3 ?v4))))) :named a14))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B$) (?v2 B_llist$) (?v3 B$) (?v4 B_llist$)) (! (= (fun_app$ (fun_app$a (llist_all2$c ?v0) (lCons$a ?v1 ?v2)) (lCons$a ?v3 ?v4)) (and (fun_app$d (fun_app$e ?v0 ?v1) ?v3) (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v2) ?v4))) :pattern ((fun_app$ (fun_app$a (llist_all2$c ?v0) (lCons$a ?v1 ?v2)) (lCons$a ?v3 ?v4))))) :named a15))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 B$) (?v4 B_llist$)) (! (= (fun_app$ (fun_app$p (llist_all2$ ?v0) (lCons$ ?v1 ?v2)) (lCons$a ?v3 ?v4)) (and (fun_app$d (fun_app$o ?v0 ?v1) ?v3) (fun_app$ (fun_app$p (llist_all2$ ?v0) ?v2) ?v4))) :pattern ((fun_app$ (fun_app$p (llist_all2$ ?v0) (lCons$ ?v1 ?v2)) (lCons$a ?v3 ?v4))))) :named a16))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v1) lNil$) (= ?v1 lNil$)) :pattern ((fun_app$c (llist_all2$a ?v0) ?v1)))) :named a17))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$b (llist_all2$b ?v0 ?v1) lNil$) (= ?v1 lNil$a)) :pattern ((llist_all2$b ?v0 ?v1)))) :named a18))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v1) lNil$a) (= ?v1 lNil$a)) :pattern ((fun_app$a (llist_all2$c ?v0) ?v1)))) :named a19))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$ (fun_app$p (llist_all2$ ?v0) ?v1) lNil$a) (= ?v1 lNil$)) :pattern ((fun_app$p (llist_all2$ ?v0) ?v1)))) :named a20))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$c (llist_all2$a ?v0) lNil$) ?v1) (= ?v1 lNil$)) :pattern ((fun_app$b (fun_app$c (llist_all2$a ?v0) lNil$) ?v1)))) :named a21))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$b (llist_all2$b ?v0 lNil$a) ?v1) (= ?v1 lNil$)) :pattern ((fun_app$b (llist_all2$b ?v0 lNil$a) ?v1)))) :named a22))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$ (fun_app$a (llist_all2$c ?v0) lNil$a) ?v1) (= ?v1 lNil$a)) :pattern ((fun_app$ (fun_app$a (llist_all2$c ?v0) lNil$a) ?v1)))) :named a23))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$ (fun_app$p (llist_all2$ ?v0) lNil$) ?v1) (= ?v1 lNil$a)) :pattern ((fun_app$ (fun_app$p (llist_all2$ ?v0) lNil$) ?v1)))) :named a24))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_bool_fun_fun$) (?v2 B_llist$) (?v3 B_llist$)) (= (fun_app$ (fun_app$a (llist_all2$c (uub$ ?v0 ?v1)) ?v2) ?v3) (and (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v2) ?v3) (fun_app$ (fun_app$a (llist_all2$c ?v1) ?v2) ?v3)))) :named a25))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_a_bool_fun_fun$) (?v2 B_llist$) (?v3 A_llist$)) (= (fun_app$b (llist_all2$b (uuc$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$b (llist_all2$b ?v0 ?v2) ?v3) (fun_app$b (llist_all2$b ?v1 ?v2) ?v3)))) :named a26))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_bool_fun_fun$) (?v2 A_llist$) (?v3 A_llist$)) (= (fun_app$b (fun_app$c (llist_all2$a (uud$ ?v0 ?v1)) ?v2) ?v3) (and (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v2) ?v3) (fun_app$b (fun_app$c (llist_all2$a ?v1) ?v2) ?v3)))) :named a27))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_bool_fun_fun$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$ (fun_app$p (llist_all2$ (uue$ ?v0 ?v1)) ?v2) ?v3) (and (fun_app$ (fun_app$p (llist_all2$ ?v0) ?v2) ?v3) (fun_app$ (fun_app$p (llist_all2$ ?v1) ?v2) ?v3)))) :named a28))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A_llist$)) (= (fun_app$b (fun_app$c (llist_all2$a ?v0) (lCons$ ?v1 ?v2)) ?v3) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v3 (lCons$ ?v4 ?v5)) (and (fun_app$f (fun_app$g ?v0 ?v1) ?v4) (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v2) ?v5)))))) :named a29))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B$) (?v2 B_llist$) (?v3 A_llist$)) (= (fun_app$b (llist_all2$b ?v0 (lCons$a ?v1 ?v2)) ?v3) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v3 (lCons$ ?v4 ?v5)) (and (fun_app$f (fun_app$n ?v0 ?v1) ?v4) (fun_app$b (llist_all2$b ?v0 ?v2) ?v5)))))) :named a30))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B$) (?v2 B_llist$) (?v3 B_llist$)) (= (fun_app$ (fun_app$a (llist_all2$c ?v0) (lCons$a ?v1 ?v2)) ?v3) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v3 (lCons$a ?v4 ?v5)) (and (fun_app$d (fun_app$e ?v0 ?v1) ?v4) (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v2) ?v5)))))) :named a31))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$ (fun_app$p (llist_all2$ ?v0) (lCons$ ?v1 ?v2)) ?v3) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v3 (lCons$a ?v4 ?v5)) (and (fun_app$d (fun_app$o ?v0 ?v1) ?v4) (fun_app$ (fun_app$p (llist_all2$ ?v0) ?v2) ?v5)))))) :named a32))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v1) (lCons$ ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v1 (lCons$ ?v4 ?v5)) (and (fun_app$f (fun_app$g ?v0 ?v4) ?v2) (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v5) ?v3)))))) :named a33))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A$) (?v3 A_llist$)) (= (fun_app$b (llist_all2$b ?v0 ?v1) (lCons$ ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v1 (lCons$a ?v4 ?v5)) (and (fun_app$f (fun_app$n ?v0 ?v4) ?v2) (fun_app$b (llist_all2$b ?v0 ?v5) ?v3)))))) :named a34))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (= (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v1) (lCons$a ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v1 (lCons$a ?v4 ?v5)) (and (fun_app$d (fun_app$e ?v0 ?v4) ?v2) (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v5) ?v3)))))) :named a35))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B$) (?v3 B_llist$)) (= (fun_app$ (fun_app$p (llist_all2$ ?v0) ?v1) (lCons$a ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v1 (lCons$ ?v4 ?v5)) (and (fun_app$d (fun_app$o ?v0 ?v4) ?v2) (fun_app$ (fun_app$p (llist_all2$ ?v0) ?v5) ?v3)))))) :named a36))
(assert (! (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))) :named a37))
(assert (! (forall ((?v0 B_llist$)) (= (not (= ?v0 lNil$a)) (exists ((?v1 B$) (?v2 B_llist$)) (= ?v0 (lCons$a ?v1 ?v2))))) :named a38))
(assert (! (= (llist_all2$c uuf$) uug$) :named a39))
(assert (! (= (llist_all2$a uuh$) uui$) :named a40))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false))) false)) :named a41))
(assert (! (forall ((?v0 B_llist$)) (=> (and (=> (= ?v0 lNil$a) false) (forall ((?v1 B$) (?v2 B_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) false))) false)) :named a42))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v1) ?v2) (and (=> (and (= ?v1 lNil$) (= ?v2 lNil$)) false) (forall ((?v3 A$) (?v4 A_llist$) (?v5 A$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v4)) (and (= ?v2 (lCons$ ?v5 ?v6)) (and (fun_app$f (fun_app$g ?v0 ?v3) ?v5) (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v4) ?v6)))) false)))) false)) :named a43))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (llist_all2$b ?v0 ?v1) ?v2) (and (=> (and (= ?v1 lNil$a) (= ?v2 lNil$)) false) (forall ((?v3 B$) (?v4 B_llist$) (?v5 A$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$a ?v3 ?v4)) (and (= ?v2 (lCons$ ?v5 ?v6)) (and (fun_app$f (fun_app$n ?v0 ?v3) ?v5) (fun_app$b (llist_all2$b ?v0 ?v4) ?v6)))) false)))) false)) :named a44))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v1) ?v2) (and (=> (and (= ?v1 lNil$a) (= ?v2 lNil$a)) false) (forall ((?v3 B$) (?v4 B_llist$) (?v5 B$) (?v6 B_llist$)) (=> (and (= ?v1 (lCons$a ?v3 ?v4)) (and (= ?v2 (lCons$a ?v5 ?v6)) (and (fun_app$d (fun_app$e ?v0 ?v3) ?v5) (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v4) ?v6)))) false)))) false)) :named a45))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (=> (and (fun_app$ (fun_app$p (llist_all2$ ?v0) ?v1) ?v2) (and (=> (and (= ?v1 lNil$) (= ?v2 lNil$a)) false) (forall ((?v3 A$) (?v4 A_llist$) (?v5 B$) (?v6 B_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v4)) (and (= ?v2 (lCons$a ?v5 ?v6)) (and (fun_app$d (fun_app$o ?v0 ?v3) ?v5) (fun_app$ (fun_app$p (llist_all2$ ?v0) ?v4) ?v6)))) false)))) false)) :named a46))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v1) ?v2) (and (=> (and (= ?v1 lNil$) (= ?v2 lNil$)) false) (forall ((?v3 A$) (?v4 A_llist$) (?v5 A$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v4)) (and (= ?v2 (lCons$ ?v5 ?v6)) (and (fun_app$f (fun_app$g ?v0 ?v3) ?v5) (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v4) ?v6)))) false)))) false)) :named a47))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (llist_all2$b ?v0 ?v1) ?v2) (and (=> (and (= ?v1 lNil$a) (= ?v2 lNil$)) false) (forall ((?v3 B$) (?v4 B_llist$) (?v5 A$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$a ?v3 ?v4)) (and (= ?v2 (lCons$ ?v5 ?v6)) (and (fun_app$f (fun_app$n ?v0 ?v3) ?v5) (fun_app$b (llist_all2$b ?v0 ?v4) ?v6)))) false)))) false)) :named a48))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v1) ?v2) (and (=> (and (= ?v1 lNil$a) (= ?v2 lNil$a)) false) (forall ((?v3 B$) (?v4 B_llist$) (?v5 B$) (?v6 B_llist$)) (=> (and (= ?v1 (lCons$a ?v3 ?v4)) (and (= ?v2 (lCons$a ?v5 ?v6)) (and (fun_app$d (fun_app$e ?v0 ?v3) ?v5) (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v4) ?v6)))) false)))) false)) :named a49))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (=> (and (fun_app$ (fun_app$p (llist_all2$ ?v0) ?v1) ?v2) (and (=> (and (= ?v1 lNil$) (= ?v2 lNil$a)) false) (forall ((?v3 A$) (?v4 A_llist$) (?v5 B$) (?v6 B_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v4)) (and (= ?v2 (lCons$a ?v5 ?v6)) (and (fun_app$d (fun_app$o ?v0 ?v3) ?v5) (fun_app$ (fun_app$p (llist_all2$ ?v0) ?v4) ?v6)))) false)))) false)) :named a50))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_b_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v1) ?v2) (forall ((?v4 B$) (?v5 B$)) (=> (fun_app$d (fun_app$e ?v0 ?v4) ?v5) (fun_app$d (fun_app$e ?v3 ?v4) ?v5)))) (fun_app$ (fun_app$a (llist_all2$c ?v3) ?v1) ?v2))) :named a51))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_a_bool_fun_fun$)) (=> (and (fun_app$b (llist_all2$b ?v0 ?v1) ?v2) (forall ((?v4 B$) (?v5 A$)) (=> (fun_app$f (fun_app$n ?v0 ?v4) ?v5) (fun_app$f (fun_app$n ?v3 ?v4) ?v5)))) (fun_app$b (llist_all2$b ?v3 ?v1) ?v2))) :named a52))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 A$)) (=> (fun_app$f (fun_app$g ?v0 ?v4) ?v5) (fun_app$f (fun_app$g ?v3 ?v4) ?v5)))) (fun_app$b (fun_app$c (llist_all2$a ?v3) ?v1) ?v2))) :named a53))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_b_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$p (llist_all2$ ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 B$)) (=> (fun_app$d (fun_app$o ?v0 ?v4) ?v5) (fun_app$d (fun_app$o ?v3 ?v4) ?v5)))) (fun_app$ (fun_app$p (llist_all2$ ?v3) ?v1) ?v2))) :named a54))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$) (?v4 A_llist$)) (=> (and (fun_app$f (fun_app$g ?v0 ?v1) ?v2) (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v3) ?v4)) (fun_app$b (fun_app$c (llist_all2$a ?v0) (lCons$ ?v1 ?v3)) (lCons$ ?v2 ?v4)))) :named a55))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B$) (?v2 A$) (?v3 B_llist$) (?v4 A_llist$)) (=> (and (fun_app$f (fun_app$n ?v0 ?v1) ?v2) (fun_app$b (llist_all2$b ?v0 ?v3) ?v4)) (fun_app$b (llist_all2$b ?v0 (lCons$a ?v1 ?v3)) (lCons$ ?v2 ?v4)))) :named a56))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B$) (?v2 B$) (?v3 B_llist$) (?v4 B_llist$)) (=> (and (fun_app$d (fun_app$e ?v0 ?v1) ?v2) (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v3) ?v4)) (fun_app$ (fun_app$a (llist_all2$c ?v0) (lCons$a ?v1 ?v3)) (lCons$a ?v2 ?v4)))) :named a57))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 B$) (?v3 A_llist$) (?v4 B_llist$)) (=> (and (fun_app$d (fun_app$o ?v0 ?v1) ?v2) (fun_app$ (fun_app$p (llist_all2$ ?v0) ?v3) ?v4)) (fun_app$ (fun_app$p (llist_all2$ ?v0) (lCons$ ?v1 ?v3)) (lCons$a ?v2 ?v4)))) :named a58))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (not (= lNil$ (lCons$ ?v0 ?v1)))) :named a59))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (not (= lNil$a (lCons$a ?v0 ?v1)))) :named a60))
(assert (! (forall ((?v0 A_a_bool_fun_fun$)) (fun_app$b (fun_app$c (llist_all2$a ?v0) lNil$) lNil$)) :named a61))
(assert (! (forall ((?v0 B_a_bool_fun_fun$)) (fun_app$b (llist_all2$b ?v0 lNil$a) lNil$)) :named a62))
(assert (! (forall ((?v0 B_b_bool_fun_fun$)) (fun_app$ (fun_app$a (llist_all2$c ?v0) lNil$a) lNil$a)) :named a63))
(assert (! (forall ((?v0 A_b_bool_fun_fun$)) (fun_app$ (fun_app$p (llist_all2$ ?v0) lNil$) lNil$a)) :named a64))
(assert (! (forall ((?v0 A_a_bool_fun_fun$)) (fun_app$b (fun_app$c (llist_all2$a ?v0) lNil$) lNil$)) :named a65))
(assert (! (forall ((?v0 B_a_bool_fun_fun$)) (fun_app$b (llist_all2$b ?v0 lNil$a) lNil$)) :named a66))
(assert (! (forall ((?v0 B_b_bool_fun_fun$)) (fun_app$ (fun_app$a (llist_all2$c ?v0) lNil$a) lNil$a)) :named a67))
(assert (! (forall ((?v0 A_b_bool_fun_fun$)) (fun_app$ (fun_app$p (llist_all2$ ?v0) lNil$) lNil$a)) :named a68))
(check-sat)
;(get-unsat-core)
