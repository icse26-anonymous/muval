; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 564
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_enat_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-fun uu$ () Nat_enat_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun uua$ () Nat_bool_fun$)
(declare-fun uub$ () Nat_bool_fun$)
(declare-fun uuc$ () Nat_enat_fun$)
(declare-fun uud$ () Nat_bool_fun$)
(declare-fun uue$ (A_llist$) Nat_bool_fun$)
(declare-fun uuf$ (A_llist_llist$) Nat_bool_fun$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist_llist$ Nat$) A_llist$)
(declare-fun xssa$ () A_llist_llist$)
(declare-fun zero$ () Nat$)
(declare-fun image$ (Nat_nat_fun$ Nat_set$) Nat_set$)
(declare-fun lnth$a (A_llist$ Nat$) A$)
(declare-fun finite$ (Nat_set$) Bool)
(declare-fun insert$ (Nat$ Nat_set$) Nat_set$)
(declare-fun member$ (Nat$ Nat_set$) Bool)
(declare-fun setsum$ (Nat_enat_fun$ Nat_set$) Enat$)
(declare-fun collect$ (Nat_bool_fun$) Nat_set$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun lfinite$ (A_llist_llist$) Bool)
(declare-fun llength$ (A_llist_llist$) Enat$)
(declare-fun fun_app$a (Nat_enat_fun$ Nat$) Enat$)
(declare-fun fun_app$b (Nat_nat_fun$ Nat$) Nat$)
(declare-fun lfinite$a (A_llist$) Bool)
(declare-fun llength$a (A_llist$) Enat$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uua$ ?v0) (less$ (enat$ ?v0) (llength$ (lCons$a xs$ xssa$)))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uud$ ?v0) (less_eq$ (enat$ ?v0) (llength$ xssa$))) :pattern ((fun_app$ uud$ ?v0)))) :named a1))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uub$ ?v0) (less$ (enat$ ?v0) (llength$ xssa$))) :pattern ((fun_app$ uub$ ?v0)))) :named a2))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a uu$ ?v0) (llength$a (lnth$ (lCons$a xs$ xssa$) ?v0))) :pattern ((fun_app$a uu$ ?v0)))) :named a3))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a uuc$ ?v0) (llength$a (lnth$ xssa$ ?v0))) :pattern ((fun_app$a uuc$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (! (= (fun_app$ (uuf$ ?v0) ?v1) (less$ (enat$ ?v1) (llength$ ?v0))) :pattern ((fun_app$ (uuf$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (! (= (fun_app$ (uue$ ?v0) ?v1) (less$ (enat$ ?v1) (llength$a ?v0))) :pattern ((fun_app$ (uue$ ?v0) ?v1)))) :named a6))
(assert (! (not (= (llength$a (lconcat$ (lCons$a xs$ xssa$))) (setsum$ uu$ (collect$ uua$)))) :named a7))
(assert (! (lfinite$ xssa$) :named a8))
(assert (! (finite$ (collect$ uub$)) :named a9))
(assert (! (not (member$ zero$ (image$ suc$ (collect$ uub$)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (= (llength$a (lconcat$ xssa$)) (setsum$ uuc$ (collect$ uub$))) :named a13))
(assert (! (= (collect$ uud$) (insert$ zero$ (image$ suc$ (collect$ uub$)))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lnth$a (lCons$ ?v0 ?v1) zero$) ?v0) :pattern ((lCons$ ?v0 ?v1)))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (lnth$ (lCons$a ?v0 ?v1) zero$) ?v0) :pattern ((lCons$a ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 Nat$)) (! (= (lnth$a (lCons$ ?v0 ?v1) (fun_app$b suc$ ?v2)) (lnth$a ?v1 ?v2)) :pattern ((lnth$a (lCons$ ?v0 ?v1) (fun_app$b suc$ ?v2))))) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 Nat$)) (! (= (lnth$ (lCons$a ?v0 ?v1) (fun_app$b suc$ ?v2)) (lnth$ ?v1 ?v2)) :pattern ((lnth$ (lCons$a ?v0 ?v1) (fun_app$b suc$ ?v2))))) :named a18))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$a (lCons$ ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a19))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (lfinite$ (lCons$a ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a20))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$a (lCons$ ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a21))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (lfinite$ (lCons$a ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a22))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a23))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$a ?v0) (exists ((?v1 Nat$)) (= (llength$a ?v0) (enat$ ?v1))))) :named a24))
(assert (! (forall ((?v0 A_llist_llist$)) (= (lfinite$ ?v0) (exists ((?v1 Nat$)) (= (llength$ ?v0) (enat$ ?v1))))) :named a25))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (= (llength$a ?v0) (enat$ ?v1)) (lfinite$a ?v0))) :named a26))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 Nat$)) (=> (= (llength$ ?v0) (enat$ ?v1)) (lfinite$ ?v0))) :named a27))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$a ?v0) (exists ((?v1 Nat$)) (= (llength$a ?v0) (enat$ ?v1))))) :named a28))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (lfinite$ ?v0) (exists ((?v1 Nat$)) (= (llength$ ?v0) (enat$ ?v1))))) :named a29))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (less$ ?v0 (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a30))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$a ?v0) (finite$ (collect$ (uue$ ?v0))))) :named a31))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (lfinite$ ?v0) (finite$ (collect$ (uuf$ ?v0))))) :named a32))
(check-sat)
;(get-unsat-core)
