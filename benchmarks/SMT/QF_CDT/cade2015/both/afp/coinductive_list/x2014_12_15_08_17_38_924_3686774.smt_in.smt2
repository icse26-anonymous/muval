; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 646
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun n$ () Nat$)
(declare-fun xs$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun zero$ () Nat$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun minus$ (Enat$) Enat_enat_fun$)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun minus$a (Nat$) Nat_nat_fun$)
(declare-fun fun_app$ (Enat_enat_fun$ Enat$) Enat$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (Nat_nat_fun$ Nat$) Nat$)
(assert (! (not (= (llength$ (ldropn$ n$ xs$)) (fun_app$ (minus$ (llength$ xs$)) (enat$ n$)))) :named a0))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (minus$a (fun_app$a (minus$a ?v0) ?v1)) ?v2) (fun_app$a (minus$a (fun_app$a (minus$a ?v0) ?v2)) ?v1))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (! (= (ldrop$ (enat$ ?v0) ?v1) (ldropn$ ?v0 ?v1)) :pattern ((ldrop$ (enat$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (exists ((?v1 Nat$)) (= (llength$ ?v0) (enat$ ?v1))))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (= (llength$ ?v0) (enat$ ?v1)) (lfinite$ ?v0))) :named a5))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$ ?v0) (exists ((?v1 Nat$)) (= (llength$ ?v0) (enat$ ?v1))))) :named a6))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$ (minus$ (enat$ zero$)) ?v0) (enat$ zero$)) :pattern ((fun_app$ (minus$ (enat$ zero$)) ?v0)))) :named a7))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$ (minus$ ?v0) (enat$ zero$)) ?v0) :pattern ((minus$ ?v0)))) :named a8))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$a (minus$a zero$) ?v0) zero$)) :named a9))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a (minus$a ?v0) ?v0) zero$) :pattern ((minus$a ?v0)))) :named a10))
(check-sat)
;(get-unsat-core)
