; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 663
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun na$ () Nat$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun xsa$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun minus$ (Enat$ Enat$) Enat$)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun minus$a (Nat$ Nat$) Nat$)
(declare-fun llength$ (A_llist$) Enat$)
(assert (! (not (= (llength$ (ldropn$ (suc$ na$) xsa$)) (minus$ (llength$ xsa$) (enat$ (suc$ na$))))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (= (llength$ (ldropn$ na$ ?v0)) (minus$ (llength$ ?v0) (enat$ na$)))) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$a (minus$a ?v0 ?v1) ?v2) (minus$a (minus$a ?v0 ?v2) ?v1))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (! (= (ldrop$ (enat$ ?v0) ?v1) (ldropn$ ?v0 ?v1)) :pattern ((ldrop$ (enat$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 A_llist$)) (! (= (ldropn$ (suc$ ?v0) (lCons$ ?v1 ?v2)) (ldropn$ ?v0 ?v2)) :pattern ((ldropn$ (suc$ ?v0) (lCons$ ?v1 ?v2))))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (minus$a (suc$ ?v0) (suc$ ?v1)) (minus$a ?v0 ?v1)) :pattern ((minus$a (suc$ ?v0) (suc$ ?v1))))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$a (minus$a (suc$ ?v0) ?v1) (suc$ ?v2)) (minus$a (minus$a ?v0 ?v1) ?v2))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (minus$ (enat$ ?v0) (enat$ ?v1)) (enat$ (minus$a ?v0 ?v1))) :pattern ((minus$ (enat$ ?v0) (enat$ ?v1))))) :named a13))
(check-sat)
;(get-unsat-core)
