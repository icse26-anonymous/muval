; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 682
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_llist_list$ (nil$) (cons$ (hd$ A_llist$) (tl$ A_llist_list$)))))
(declare-fun m$ () Nat$)
(declare-fun xss$ () A_llist_list$)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun plus$ (Nat$) Nat_nat_fun$)
(declare-fun size$ (A_llist_list$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun fun_app$ (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$a (Nat_bool_fun$ Nat$) Bool)
(declare-fun atLeastLessThan$ (Nat$ Nat$) Nat_set$)
(assert (! (not (= (atLeastLessThan$ (size$ xss$) (fun_app$ (plus$ m$) (size$ xss$))) (atLeastLessThan$ (fun_app$ (plus$ zero$) (size$ xss$)) (fun_app$ (plus$ m$) (size$ xss$))))) :named a0))
(assert (! (fun_app$a (less$ zero$) m$) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$ (plus$ ?v0) ?v1) zero$) (and (= ?v0 zero$) (= ?v1 zero$)))) :named a2))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (plus$ ?v0) zero$) ?v0) :pattern ((plus$ ?v0)))) :named a3))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (plus$ ?v0) zero$) ?v0)) :named a4))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (plus$ ?v0) zero$) ?v0)) :named a5))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (plus$ zero$) ?v0) ?v0)) :named a6))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (plus$ zero$) ?v0) ?v0)) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$ (plus$ ?v0) ?v1) (fun_app$ (plus$ ?v2) ?v1)) (= ?v0 ?v2))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$ (plus$ ?v0) ?v1) (fun_app$ (plus$ ?v0) ?v2)) (= ?v1 ?v2))) :named a9))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (plus$ zero$) ?v0) ?v0) :pattern ((fun_app$ (plus$ zero$) ?v0)))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (less$ (fun_app$ (plus$ ?v0) ?v1)) (fun_app$ (plus$ ?v0) ?v2)) (fun_app$a (less$ ?v1) ?v2))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$a (less$ (fun_app$ (plus$ ?v0) ?v1)) (fun_app$ (plus$ ?v2) ?v1)) (fun_app$a (less$ ?v0) ?v2))) :named a12))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a (less$ ?v0) zero$) false) :pattern ((less$ ?v0)))) :named a13))
(assert (! (forall ((?v0 Nat$)) (= (not (fun_app$a (less$ zero$) ?v0)) (= ?v0 zero$))) :named a14))
(check-sat)
;(get-unsat-core)
