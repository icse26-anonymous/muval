; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 270
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun xs$ () A_llist$)
(declare-fun bot$ () A_set$)
(declare-fun bot$a () A_bool_fun$)
(declare-fun bot$b () Bool)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$b (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(assert (! (not (= (= (lset$ xs$) bot$) (lnull$ xs$))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)) :named a1))
(assert (! (forall ((?v0 A_bool_fun$)) (= (= (collect$ ?v0) bot$) (forall ((?v1 A$)) (not (fun_app$ ?v0 ?v1))))) :named a2))
(assert (! (forall ((?v0 A_set$)) (= (forall ((?v1 A$)) (not (member$ ?v1 ?v0))) (= ?v0 bot$))) :named a3))
(assert (! (forall ((?v0 A_bool_fun$)) (= (= bot$ (collect$ ?v0)) (forall ((?v1 A$)) (not (fun_app$ ?v0 ?v1))))) :named a4))
(assert (! (forall ((?v0 A$)) (= (member$ ?v0 bot$) false)) :named a5))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ bot$a ?v0) bot$b) :pattern ((fun_app$ bot$a ?v0)))) :named a6))
(assert (! (forall ((?v0 A_set$)) (= (exists ((?v1 A$)) (member$ ?v1 ?v0)) (not (= ?v0 bot$)))) :named a7))
(assert (! (forall ((?v0 A_set$)) (=> (forall ((?v1 A$)) (=> (member$ ?v1 ?v0) false)) (= ?v0 bot$))) :named a8))
(assert (! (forall ((?v0 A_set$) (?v1 A$)) (=> (= ?v0 bot$) (not (member$ ?v1 ?v0)))) :named a9))
(assert (! (forall ((?v0 A$)) (=> (member$ ?v0 bot$) false)) :named a10))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ bot$a ?v0) bot$b) :pattern ((fun_app$ bot$a ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist$)) (=> (not (lnull$ ?v0)) (member$ (lhd$ ?v0) (lset$ ?v0)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (not (lnull$ ?v0)) (member$ ?v1 (lset$ (ltl$ ?v0)))) (member$ ?v1 (lset$ ?v0)))) :named a13))
(assert (! (= bot$ (collect$ bot$a)) :named a14))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$a (fun_app$b ?v0 ?v3) ?v4) (and (= (lnull$ ?v3) (lnull$ ?v4)) (=> (and (not (lnull$ ?v3)) (not (lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (fun_app$a (fun_app$b ?v0 (ltl$ ?v3)) (ltl$ ?v4)))))))) (= ?v1 ?v2))) :named a15))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$a (fun_app$b ?v0 ?v3) ?v4) (and (= (lnull$ ?v3) (lnull$ ?v4)) (=> (and (not (lnull$ ?v3)) (not (lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$a (fun_app$b ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))))) (= ?v1 ?v2))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (lnull$ ?v0) (lnull$ ?v1)) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1))) :named a17))
(check-sat)
;(get-unsat-core)
