; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 639
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun xs$ () A_llist$)
(declare-fun ya$ () A_llist_set$)
(declare-fun lSup$ (A_llist_set$) A_llist$)
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$) Bool)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun less_eq$ () A_a_bool_fun_fun$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun lsorted$ (A_a_bool_fun_fun$ A_llist$) Bool)
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(assert (! (not (= (lhd$ (lSup$ ya$)) (lhd$ xs$))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (= ?v0 ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a2))
(assert (! (not (lnull$ xs$)) :named a3))
(assert (! (chain$ lprefix$ ya$) :named a4))
(assert (! (forall ((?v0 A_llist$)) (=> (member$ ?v0 ya$) (lsorted$ less_eq$ ?v0))) :named a5))
(assert (! (not (lnull$ (ltl$ xs$))) :named a6))
(assert (! (member$ xs$ ya$) :named a7))
(assert (! (forall ((?v0 A_llist$)) (=> (member$ ?v0 ya$) (lsorted$ less_eq$ ?v0))) :named a8))
(assert (! (not (lnull$ (lSup$ ya$))) :named a9))
(assert (! (not (lnull$ (ltl$ (lSup$ ya$)))) :named a10))
(assert (! (=> (forall ((?v0 A_llist$)) (=> (and (member$ ?v0 ya$) (and (not (lnull$ ?v0)) (not (lnull$ (ltl$ ?v0))))) false)) false) :named a11))
(assert (! (forall ((?v0 A_llist_set$)) (= (lnull$ (lSup$ ?v0)) (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (lnull$ ?v0) (not (fun_app$ ?v1 (lhd$ ?v0)))) false) (=> (and (not (lnull$ ?v0)) (fun_app$ ?v1 (lhd$ ?v0))) false)) false)) :named a13))
(assert (! (forall ((?v0 A_llist_set$)) (= (not (lnull$ (lSup$ ?v0))) (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)))))) :named a14))
(assert (! (forall ((?v0 A_llist_set$)) (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))) (lnull$ (lSup$ ?v0)))) :named a15))
(assert (! (forall ((?v0 A_llist_set$)) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)))) (not (lnull$ (lSup$ ?v0))))) :named a16))
(assert (! (forall ((?v0 A_llist$)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v0)) :named a17))
(check-sat)
;(get-unsat-core)
