; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 539
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_fun$ 0)
(declare-sort A_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-fun uu$ () A_llist_llist_a_llist_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun uua$ () A_llist_llist_a_llist_llist_fun$)
(declare-fun uub$ () A_llist_a_fun$)
(declare-fun uuc$ () A_llist_a_llist_fun$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lnull$ () A_llist_bool_fun$)
(declare-fun lset$a (A_llist_llist$) A_llist_set$)
(declare-fun lnull$a () A_llist_llist_bool_fun$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_llist_llist_a_llist_llist_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun member$a (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun member$b (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$b (A_llist_llist_a_llist_fun$ A_llist_llist$) A_llist$)
(declare-fun fun_app$c (A_llist_a_fun$ A_llist$) A$)
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$e (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$f (A_bool_fun$ A$) Bool)
(declare-fun fun_app$g (A_llist_a_llist_llist_bool_fun_fun$ A_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$h (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$i (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$j (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun ldistinct$ (A_llist$) Bool)
(declare-fun ldistinct$a (A_llist_llist$) Bool)
(declare-fun unfold_llist$ (A_llist_llist_bool_fun$ A_llist_llist_a_llist_fun$ A_llist_llist_a_llist_llist_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun unfold_llist$a (A_llist_bool_fun$ A_llist_a_fun$ A_llist_a_llist_fun$ A_llist$) A_llist$)
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$ uua$ ?v0) (ltl$a ?v0)) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a uuc$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$a uuc$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$b uu$ ?v0) (lhd$a ?v0)) :pattern ((fun_app$b uu$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$c uub$ ?v0) (lhd$ ?v0)) :pattern ((fun_app$c uub$ ?v0)))) :named a3))
(assert (! (not (not (member$ (lhd$ xs$) (lset$ (ltl$ xs$))))) :named a4))
(assert (! (ldistinct$ xs$) :named a5))
(assert (! (not (fun_app$d lnull$ xs$)) :named a6))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_bool_fun$)) (=> (and (=> (or (fun_app$e lnull$a ?v0) (not (fun_app$d ?v1 (lhd$a ?v0)))) false) (=> (and (not (fun_app$e lnull$a ?v0)) (fun_app$d ?v1 (lhd$a ?v0))) false)) false)) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (fun_app$d lnull$ ?v0) (not (fun_app$f ?v1 (lhd$ ?v0)))) false) (=> (and (not (fun_app$d lnull$ ?v0)) (fun_app$f ?v1 (lhd$ ?v0))) false)) false)) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (fun_app$d lnull$ ?v0) (fun_app$e lnull$a ?v1)) false) (=> (and (not (fun_app$d lnull$ ?v0)) (not (fun_app$e lnull$a ?v1))) false)) false)) :named a9))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (and (=> (or (fun_app$e lnull$a ?v0) (fun_app$d lnull$ ?v1)) false) (=> (and (not (fun_app$e lnull$a ?v0)) (not (fun_app$d lnull$ ?v1))) false)) false)) :named a10))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (fun_app$e lnull$a ?v0) (fun_app$e lnull$a ?v1)) false) (=> (and (not (fun_app$e lnull$a ?v0)) (not (fun_app$e lnull$a ?v1))) false)) false)) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (fun_app$d lnull$ ?v0) (fun_app$d lnull$ ?v1)) false) (=> (and (not (fun_app$d lnull$ ?v0)) (not (fun_app$d lnull$ ?v1))) false)) false)) :named a12))
(assert (! (forall ((?v0 A_llist_llist_set$)) (=> (and (=> (forall ((?v1 A_llist_llist$)) (=> (member$a ?v1 ?v0) (fun_app$e lnull$a ?v1))) false) (=> (not (forall ((?v1 A_llist_llist$)) (=> (member$a ?v1 ?v0) (fun_app$e lnull$a ?v1)))) false)) false)) :named a13))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$b ?v1 ?v0) (fun_app$d lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$b ?v1 ?v0) (fun_app$d lnull$ ?v1)))) false)) false)) :named a14))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (and (fun_app$e lnull$a ?v0) (fun_app$e lnull$a ?v1)) false) (=> (or (not (fun_app$e lnull$a ?v0)) (not (fun_app$e lnull$a ?v1))) false)) false)) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (fun_app$d lnull$ ?v0) (fun_app$d lnull$ ?v1)) false) (=> (or (not (fun_app$d lnull$ ?v0)) (not (fun_app$d lnull$ ?v1))) false)) false)) :named a16))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (and (=> (fun_app$e lnull$a ?v0) false) (=> (not (fun_app$e lnull$a ?v0)) false)) false)) :named a17))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (fun_app$d lnull$ ?v0) false) (=> (not (fun_app$d lnull$ ?v0)) false)) false)) :named a18))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (= (fun_app$e lnull$a ?v0) (fun_app$e lnull$a ?v1)) (=> (and (not (fun_app$e lnull$a ?v0)) (not (fun_app$e lnull$a ?v1))) (and (= (lhd$a ?v0) (lhd$a ?v1)) (= (ltl$a ?v0) (ltl$a ?v1))))) (= ?v0 ?v1))) :named a19))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (fun_app$d lnull$ ?v0) (fun_app$d lnull$ ?v1)) (=> (and (not (fun_app$d lnull$ ?v0)) (not (fun_app$d lnull$ ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1))) :named a20))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (member$b ?v0 (lset$a (ltl$a ?v1))) (member$b ?v0 (lset$a ?v1)))) :named a21))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$ ?v0 (lset$ (ltl$ ?v1))) (member$ ?v0 (lset$ ?v1)))) :named a22))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_llist_bool_fun_fun$)) (=> (and (member$b ?v0 (lset$a ?v1)) (and (forall ((?v3 A_llist_llist$)) (=> (not (fun_app$e lnull$a ?v3)) (fun_app$e (fun_app$g ?v2 (lhd$a ?v3)) ?v3))) (forall ((?v3 A_llist_llist$) (?v4 A_llist$)) (=> (and (not (fun_app$e lnull$a ?v3)) (and (member$b ?v4 (lset$a (ltl$a ?v3))) (fun_app$e (fun_app$g ?v2 ?v4) (ltl$a ?v3)))) (fun_app$e (fun_app$g ?v2 ?v4) ?v3))))) (fun_app$e (fun_app$g ?v2 ?v0) ?v1))) :named a23))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist$)) (=> (not (fun_app$d lnull$ ?v3)) (fun_app$d (fun_app$h ?v2 (lhd$ ?v3)) ?v3))) (forall ((?v3 A_llist$) (?v4 A$)) (=> (and (not (fun_app$d lnull$ ?v3)) (and (member$ ?v4 (lset$ (ltl$ ?v3))) (fun_app$d (fun_app$h ?v2 ?v4) (ltl$ ?v3)))) (fun_app$d (fun_app$h ?v2 ?v4) ?v3))))) (fun_app$d (fun_app$h ?v2 ?v0) ?v1))) :named a24))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$e lnull$a ?v0)) (member$b ?v1 (lset$a (ltl$a ?v0)))) (member$b ?v1 (lset$a ?v0)))) :named a25))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (not (fun_app$d lnull$ ?v0)) (member$ ?v1 (lset$ (ltl$ ?v0)))) (member$ ?v1 (lset$ ?v0)))) :named a26))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (not (fun_app$e lnull$a ?v0)) (member$b (lhd$a ?v0) (lset$a ?v0)))) :named a27))
(assert (! (forall ((?v0 A_llist$)) (=> (not (fun_app$d lnull$ ?v0)) (member$ (lhd$ ?v0) (lset$ ?v0)))) :named a28))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (fun_app$e lnull$a ?v0) (fun_app$e lnull$a (ltl$a ?v0)))) :named a29))
(assert (! (forall ((?v0 A_llist$)) (=> (fun_app$d lnull$ ?v0) (fun_app$d lnull$ (ltl$ ?v0)))) :named a30))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (=> (and (fun_app$e (fun_app$i ?v0 ?v1) ?v2) (forall ((?v3 A_llist_llist$) (?v4 A_llist_llist$)) (=> (fun_app$e (fun_app$i ?v0 ?v3) ?v4) (and (= (fun_app$e lnull$a ?v3) (fun_app$e lnull$a ?v4)) (=> (and (not (fun_app$e lnull$a ?v3)) (not (fun_app$e lnull$a ?v4))) (and (= (lhd$a ?v3) (lhd$a ?v4)) (or (fun_app$e (fun_app$i ?v0 (ltl$a ?v3)) (ltl$a ?v4)) (= (ltl$a ?v3) (ltl$a ?v4))))))))) (= ?v1 ?v2))) :named a31))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$d (fun_app$j ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$d (fun_app$j ?v0 ?v3) ?v4) (and (= (fun_app$d lnull$ ?v3) (fun_app$d lnull$ ?v4)) (=> (and (not (fun_app$d lnull$ ?v3)) (not (fun_app$d lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$d (fun_app$j ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))))) (= ?v1 ?v2))) :named a32))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (=> (and (fun_app$e (fun_app$i ?v0 ?v1) ?v2) (forall ((?v3 A_llist_llist$) (?v4 A_llist_llist$)) (=> (fun_app$e (fun_app$i ?v0 ?v3) ?v4) (and (= (fun_app$e lnull$a ?v3) (fun_app$e lnull$a ?v4)) (=> (and (not (fun_app$e lnull$a ?v3)) (not (fun_app$e lnull$a ?v4))) (and (= (lhd$a ?v3) (lhd$a ?v4)) (fun_app$e (fun_app$i ?v0 (ltl$a ?v3)) (ltl$a ?v4)))))))) (= ?v1 ?v2))) :named a33))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$d (fun_app$j ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$d (fun_app$j ?v0 ?v3) ?v4) (and (= (fun_app$d lnull$ ?v3) (fun_app$d lnull$ ?v4)) (=> (and (not (fun_app$d lnull$ ?v3)) (not (fun_app$d lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (fun_app$d (fun_app$j ?v0 (ltl$ ?v3)) (ltl$ ?v4)))))))) (= ?v1 ?v2))) :named a34))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist$)) (=> (and (fun_app$e ?v0 ?v1) (forall ((?v2 A_llist_llist$)) (=> (and (fun_app$e ?v0 ?v2) (not (fun_app$e lnull$a ?v2))) (and (not (member$b (lhd$a ?v2) (lset$a (ltl$a ?v2)))) (or (fun_app$e ?v0 (ltl$a ?v2)) (ldistinct$a (ltl$a ?v2))))))) (ldistinct$a ?v1))) :named a35))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (and (fun_app$d ?v0 ?v1) (forall ((?v2 A_llist$)) (=> (and (fun_app$d ?v0 ?v2) (not (fun_app$d lnull$ ?v2))) (and (not (member$ (lhd$ ?v2) (lset$ (ltl$ ?v2)))) (or (fun_app$d ?v0 (ltl$ ?v2)) (ldistinct$ (ltl$ ?v2))))))) (ldistinct$ ?v1))) :named a36))
(assert (! (forall ((?v0 A_llist_llist$)) (= (unfold_llist$ lnull$a uu$ uua$ ?v0) ?v0)) :named a37))
(assert (! (forall ((?v0 A_llist$)) (= (unfold_llist$a lnull$ uub$ uuc$ ?v0) ?v0)) :named a38))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (not (fun_app$e lnull$a ?v0)) (= (lCons$a (lhd$a ?v0) (ltl$a ?v0)) ?v0))) :named a39))
(assert (! (forall ((?v0 A_llist$)) (=> (not (fun_app$d lnull$ ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0))) :named a40))
(check-sat)
;(get-unsat-core)
