; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 610
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort A_llist_list_bool_fun$ 0)
(declare-sort Nat_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_llist_list$ (nil$) (cons$ (hd$ A_llist$) (tl$ A_llist_list$)))))
(declare-fun i$ () Nat$)
(declare-fun nth$ (A_llist_list$ Nat$) A_llist$)
(declare-fun xss$ () A_llist_list$)
(declare-fun less$ (Nat$) Nat_bool_fun$)
(declare-fun size$ (A_llist_list$) Nat$)
(declare-fun member$ (Nat$ Nat_set$) Bool)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$b (Nat_a_llist_bool_fun_fun$ Nat$) A_llist_bool_fun$)
(declare-fun fun_app$c (A_llist_list_bool_fun$ A_llist_list$) Bool)
(declare-fun fun_app$d (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun lessThan$ (Nat$) Nat_set$)
(assert (! (not (exists ((?v0 Nat$)) (and (fun_app$ (less$ ?v0) (size$ xss$)) (= (nth$ xss$ ?v0) (nth$ xss$ i$))))) :named a0))
(assert (! (member$ i$ (lessThan$ (size$ xss$))) :named a1))
(assert (! (forall ((?v0 A_llist_list$) (?v1 A_llist_list$)) (= (= ?v0 ?v1) (and (= (size$ ?v0) (size$ ?v1)) (forall ((?v2 Nat$)) (=> (fun_app$ (less$ ?v2) (size$ ?v0)) (= (nth$ ?v0 ?v2) (nth$ ?v1 ?v2))))))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_a_llist_bool_fun_fun$)) (= (forall ((?v2 Nat$)) (=> (fun_app$ (less$ ?v2) ?v0) (exists ((?v3 A_llist$)) (fun_app$a (fun_app$b ?v1 ?v2) ?v3)))) (exists ((?v2 A_llist_list$)) (and (= (size$ ?v2) ?v0) (forall ((?v3 Nat$)) (=> (fun_app$ (less$ ?v3) ?v0) (fun_app$a (fun_app$b ?v1 ?v3) (nth$ ?v2 ?v3)))))))) :named a3))
(assert (! (forall ((?v0 A_llist_list$) (?v1 A_llist_list$)) (=> (and (= (size$ ?v0) (size$ ?v1)) (forall ((?v2 Nat$)) (=> (fun_app$ (less$ ?v2) (size$ ?v0)) (= (nth$ ?v0 ?v2) (nth$ ?v1 ?v2))))) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_llist_list_bool_fun$) (?v1 A_llist_list$)) (=> (forall ((?v2 A_llist_list$)) (=> (forall ((?v3 A_llist_list$)) (=> (fun_app$ (less$ (size$ ?v3)) (size$ ?v2)) (fun_app$c ?v0 ?v3))) (fun_app$c ?v0 ?v2))) (fun_app$c ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_llist_list$) (?v1 A_llist_list$)) (=> (not (= (size$ ?v0) (size$ ?v1))) (= (= ?v0 ?v1) false))) :named a6))
(assert (! (forall ((?v0 Nat$)) (exists ((?v1 A_llist_list$)) (= (size$ ?v1) ?v0))) :named a7))
(assert (! (forall ((?v0 A_llist_list$) (?v1 A_llist_list$)) (=> (not (= (size$ ?v0) (size$ ?v1))) (not (= ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (= ?v0 ?v1)) (or (fun_app$ (less$ ?v0) ?v1) (fun_app$ (less$ ?v1) ?v0)))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_nat_bool_fun_fun$)) (=> (and (=> (fun_app$ (less$ ?v0) ?v1) (fun_app$ (fun_app$d ?v2 ?v1) ?v0)) (and (=> (= ?v0 ?v1) (fun_app$ (fun_app$d ?v2 ?v1) ?v0)) (=> (fun_app$ (less$ ?v1) ?v0) (fun_app$ (fun_app$d ?v2 ?v1) ?v0)))) (fun_app$ (fun_app$d ?v2 ?v1) ?v0))) :named a10))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (not (fun_app$ ?v0 ?v2)) (exists ((?v3 Nat$)) (and (fun_app$ (less$ ?v3) ?v2) (not (fun_app$ ?v0 ?v3)))))) (fun_app$ ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 Nat$)) (not (fun_app$ (less$ ?v0) ?v0))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (not (= ?v0 ?v1)) (and (=> (fun_app$ (less$ ?v0) ?v1) false) (=> (fun_app$ (less$ ?v1) ?v0) false))) false)) :named a13))
(assert (! (forall ((?v0 Nat$)) (=> (fun_app$ (less$ ?v0) ?v0) false)) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) ?v1) (not (= ?v1 ?v0)))) :named a15))
(check-sat)
;(get-unsat-core)
