; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 624
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun llcp$ (A_llist$) A_llist_enat_fun$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun lsetp$ (A_llist$) A_bool_fun$)
(declare-fun finite$ (A_set$) Bool)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lmember$ (A$ A_llist$) Bool)
(declare-fun fun_app$a (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun infinity$ () Enat$)
(declare-fun iterates$ (A_a_fun$ A$) A_llist$)
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$) A_llist$)
(assert (! (not (= (= (llength$ (ltakeWhile$ p$ xs$)) infinity$) (and (not (lfinite$ xs$)) (forall ((?v0 A$)) (=> (member$ ?v0 (lset$ xs$)) (fun_app$ p$ ?v0)))))) :named a0))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (= (llength$ (ltakeWhile$ ?v0 ?v1)) (llength$ ?v1)) (= (ltakeWhile$ ?v0 ?v1) ?v1))) :named a1))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (= (llength$ (ltakeWhile$ ?v0 ?v1)) infinity$) (and (not (lfinite$ ?v1)) (= (ltakeWhile$ ?v0 ?v1) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_llist$)) (= (= (llength$ ?v0) infinity$) (not (lfinite$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lfinite$ (ltakeWhile$ ?v0 ?v1)) (or (lfinite$ ?v1) (exists ((?v2 A$)) (and (member$ ?v2 (lset$ ?v1)) (not (fun_app$ ?v0 ?v2))))))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (! (=> (forall ((?v2 A$)) (=> (member$ ?v2 (lset$ ?v0)) (fun_app$ ?v1 ?v2))) (= (ltakeWhile$ ?v1 ?v0) ?v0)) :pattern ((ltakeWhile$ ?v1 ?v0)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_bool_fun$) (?v2 A_llist$)) (=> (member$ ?v0 (lset$ (ltakeWhile$ ?v1 ?v2))) (and (member$ ?v0 (lset$ ?v2)) (fun_app$ ?v1 ?v0)))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (llength$ ?v0) infinity$)) :pattern ((llength$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (llength$ (iterates$ ?v0 ?v1)) infinity$)) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$ ?v0 (lset$ ?v1)) (lmember$ ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (less$ (llength$ (ltakeWhile$ ?v0 ?v1)) (llength$ ?v1)) (exists ((?v2 A$)) (and (member$ ?v2 (lset$ ?v1)) (not (fun_app$ ?v0 ?v2)))))) :named a10))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$)) (= (lfinite$ (ldrop$ ?v0 ?v1)) (or (lfinite$ ?v1) (= ?v0 infinity$)))) :named a11))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (less_eq$ (llength$ (ltakeWhile$ ?v0 ?v1)) (llength$ ?v1))) :named a12))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$ ?v0) (finite$ (lset$ ?v0)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$ ?v0 (lset$ ?v1)) (fun_app$ (lsetp$ ?v1) ?v0))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (fun_app$ (lsetp$ ?v0) ?v1) (member$ ?v1 (lset$ ?v0)))) :named a15))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a (llcp$ ?v0) ?v0) (llength$ ?v0)) :pattern ((llcp$ ?v0)))) :named a16))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (exists ((?v1 Nat$)) (= (llength$ ?v0) (enat$ ?v1))))) :named a17))
(check-sat)
;(get-unsat-core)
