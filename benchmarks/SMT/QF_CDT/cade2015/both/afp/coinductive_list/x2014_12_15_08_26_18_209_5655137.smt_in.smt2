; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 592
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))))
(declare-fun ya$ () A_llist_set$)
(declare-fun lSup$ (A_llist_set$) A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$) Bool)
(declare-fun lSup$a (A_llist_llist_set$) A_llist_llist$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lset$a (A_llist_llist_llist$) A_llist_llist_set$)
(declare-fun lset$b (A_llist_llist$) A_llist_set$)
(declare-fun chain$a (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist_set$) Bool)
(declare-fun lnull$a (A_llist_llist_llist$) Bool)
(declare-fun lnull$b (A_llist_llist$) Bool)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun lmember$ (A_llist_llist$ A_llist_llist_llist$) Bool)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun member$b (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun fun_app$a (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$d (A_llist_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun fun_app$e (A_llist_llist_a_llist_llist_llist_bool_fun_fun$ A_llist_llist$) A_llist_llist_llist_bool_fun$)
(declare-fun fun_app$f (A_llist_a_llist_llist_bool_fun_fun$ A_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$g (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$h (A_bool_fun$ A$) Bool)
(declare-fun lmember$a (A_llist$) A_llist_llist_bool_fun$)
(declare-fun lmember$b (A$) A_llist_bool_fun$)
(declare-fun lprefix$a () A_llist_llist_a_llist_llist_bool_fun_fun$)
(declare-fun ldistinct$ (A_llist$) Bool)
(declare-fun ldropWhile$ (A_llist_llist_bool_fun$ A_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun ldropWhile$a (A_llist_bool_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun ldropWhile$b (A_bool_fun$ A_llist$) A_llist$)
(assert (! (not (not (member$ (lhd$ (lSup$ ya$)) (lset$ (ltl$ (lSup$ ya$)))))) :named a0))
(assert (! (chain$ lprefix$ ya$) :named a1))
(assert (! (forall ((?v0 A_llist$)) (=> (member$a ?v0 ya$) (ldistinct$ ?v0))) :named a2))
(assert (! (not (lnull$ (lSup$ ya$))) :named a3))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$)) (=> (member$b ?v0 (lset$a (ltl$b ?v1))) (member$b ?v0 (lset$a ?v1)))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (member$a ?v0 (lset$b (ltl$a ?v1))) (member$a ?v0 (lset$b ?v1)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$ ?v0 (lset$ (ltl$ ?v1))) (member$ ?v0 (lset$ ?v1)))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (=> (member$a ?v0 ya$) (ldistinct$ ?v0))) :named a7))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (fun_app$ (fun_app$a lprefix$a ?v0) ?v1) (fun_app$ (fun_app$a lprefix$a (ltl$a ?v0)) (ltl$a ?v1)))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ (ltl$ ?v0)) (ltl$ ?v1)))) :named a9))
(assert (! (forall ((?v0 A_llist_llist$)) (fun_app$ (fun_app$a lprefix$a ?v0) ?v0)) :named a10))
(assert (! (forall ((?v0 A_llist$)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v0)) :named a11))
(assert (! (forall ((?v0 A_llist_llist$)) (fun_app$ (fun_app$a lprefix$a ?v0) ?v0)) :named a12))
(assert (! (forall ((?v0 A_llist$)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v0)) :named a13))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$)) (= (member$b ?v0 (lset$a ?v1)) (lmember$ ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (= (member$a ?v0 (lset$b ?v1)) (fun_app$ (lmember$a ?v0) ?v1))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$ ?v0 (lset$ ?v1)) (fun_app$b (lmember$b ?v0) ?v1))) :named a16))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_a_llist_llist_llist_bool_fun_fun$)) (=> (and (member$b ?v0 (lset$a ?v1)) (and (forall ((?v3 A_llist_llist_llist$)) (=> (not (lnull$a ?v3)) (fun_app$d (fun_app$e ?v2 (lhd$b ?v3)) ?v3))) (forall ((?v3 A_llist_llist_llist$) (?v4 A_llist_llist$)) (=> (and (not (lnull$a ?v3)) (and (member$b ?v4 (lset$a (ltl$b ?v3))) (fun_app$d (fun_app$e ?v2 ?v4) (ltl$b ?v3)))) (fun_app$d (fun_app$e ?v2 ?v4) ?v3))))) (fun_app$d (fun_app$e ?v2 ?v0) ?v1))) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_a_llist_llist_bool_fun_fun$)) (=> (and (member$a ?v0 (lset$b ?v1)) (and (forall ((?v3 A_llist_llist$)) (=> (not (lnull$b ?v3)) (fun_app$ (fun_app$f ?v2 (lhd$a ?v3)) ?v3))) (forall ((?v3 A_llist_llist$) (?v4 A_llist$)) (=> (and (not (lnull$b ?v3)) (and (member$a ?v4 (lset$b (ltl$a ?v3))) (fun_app$ (fun_app$f ?v2 ?v4) (ltl$a ?v3)))) (fun_app$ (fun_app$f ?v2 ?v4) ?v3))))) (fun_app$ (fun_app$f ?v2 ?v0) ?v1))) :named a18))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist$)) (=> (not (lnull$ ?v3)) (fun_app$b (fun_app$g ?v2 (lhd$ ?v3)) ?v3))) (forall ((?v3 A_llist$) (?v4 A$)) (=> (and (not (lnull$ ?v3)) (and (member$ ?v4 (lset$ (ltl$ ?v3))) (fun_app$b (fun_app$g ?v2 ?v4) (ltl$ ?v3)))) (fun_app$b (fun_app$g ?v2 ?v4) ?v3))))) (fun_app$b (fun_app$g ?v2 ?v0) ?v1))) :named a19))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_bool_fun$)) (=> (exists ((?v2 A_llist_llist$)) (and (member$b ?v2 (lset$a ?v0)) (not (fun_app$ ?v1 ?v2)))) (member$b (lhd$b (ldropWhile$ ?v1 ?v0)) (lset$a ?v0)))) :named a20))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_bool_fun$)) (=> (exists ((?v2 A_llist$)) (and (member$a ?v2 (lset$b ?v0)) (not (fun_app$b ?v1 ?v2)))) (member$a (lhd$a (ldropWhile$a ?v1 ?v0)) (lset$b ?v0)))) :named a21))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (exists ((?v2 A$)) (and (member$ ?v2 (lset$ ?v0)) (not (fun_app$h ?v1 ?v2)))) (member$ (lhd$ (ldropWhile$b ?v1 ?v0)) (lset$ ?v0)))) :named a22))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_bool_fun$)) (=> (exists ((?v2 A_llist_llist$)) (and (member$b ?v2 (lset$a ?v0)) (not (fun_app$ ?v1 ?v2)))) (not (fun_app$ ?v1 (lhd$b (ldropWhile$ ?v1 ?v0)))))) :named a23))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_bool_fun$)) (=> (exists ((?v2 A_llist$)) (and (member$a ?v2 (lset$b ?v0)) (not (fun_app$b ?v1 ?v2)))) (not (fun_app$b ?v1 (lhd$a (ldropWhile$a ?v1 ?v0)))))) :named a24))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (exists ((?v2 A$)) (and (member$ ?v2 (lset$ ?v0)) (not (fun_app$h ?v1 ?v2)))) (not (fun_app$h ?v1 (lhd$ (ldropWhile$b ?v1 ?v0)))))) :named a25))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist$)) (=> (and (chain$a lprefix$a ?v0) (forall ((?v2 A_llist_llist$)) (=> (member$b ?v2 ?v0) (fun_app$ (fun_app$a lprefix$a ?v2) ?v1)))) (fun_app$ (fun_app$a lprefix$a (lSup$a ?v0)) ?v1))) :named a26))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (forall ((?v2 A_llist$)) (=> (member$a ?v2 ?v0) (fun_app$b (fun_app$c lprefix$ ?v2) ?v1)))) (fun_app$b (fun_app$c lprefix$ (lSup$ ?v0)) ?v1))) :named a27))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist$)) (=> (and (chain$a lprefix$a ?v0) (forall ((?v2 A_llist_llist$)) (=> (member$b ?v2 ?v0) (fun_app$ (fun_app$a lprefix$a ?v2) ?v1)))) (fun_app$ (fun_app$a lprefix$a (lSup$a ?v0)) ?v1))) :named a28))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (forall ((?v2 A_llist$)) (=> (member$a ?v2 ?v0) (fun_app$b (fun_app$c lprefix$ ?v2) ?v1)))) (fun_app$b (fun_app$c lprefix$ (lSup$ ?v0)) ?v1))) :named a29))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist$)) (=> (and (chain$a lprefix$a ?v0) (member$b ?v1 ?v0)) (fun_app$ (fun_app$a lprefix$a ?v1) (lSup$a ?v0)))) :named a30))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (member$a ?v1 ?v0)) (fun_app$b (fun_app$c lprefix$ ?v1) (lSup$ ?v0)))) :named a31))
(assert (! (forall ((?v0 A_llist_llist_set$) (?v1 A_llist_llist$)) (=> (and (chain$a lprefix$a ?v0) (member$b ?v1 ?v0)) (fun_app$ (fun_app$a lprefix$a ?v1) (lSup$a ?v0)))) :named a32))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (member$a ?v1 ?v0)) (fun_app$b (fun_app$c lprefix$ ?v1) (lSup$ ?v0)))) :named a33))
(assert (! (forall ((?v0 A_llist_llist_set$)) (= (lnull$b (lSup$a ?v0)) (forall ((?v1 A_llist_llist$)) (=> (member$b ?v1 ?v0) (lnull$b ?v1))))) :named a34))
(assert (! (forall ((?v0 A_llist_set$)) (= (lnull$ (lSup$ ?v0)) (forall ((?v1 A_llist$)) (=> (member$a ?v1 ?v0) (lnull$ ?v1))))) :named a35))
(check-sat)
;(get-unsat-core)
