; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 520
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_set_a_llist_set_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun y$ () A_llist_set$)
(declare-fun uu$ () A_llist_bool_fun$)
(declare-fun bot$ () A_llist_set$)
(declare-fun inf$ (A_llist_set$) A_llist_set_a_llist_set_fun$)
(declare-fun ord$ (B$ B$) Bool)
(declare-fun bot$a () B$)
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$) Bool)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_set_a_llist_set_fun$ A_llist_set$) A_llist_set$)
(declare-fun fun_app$b (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uu$ ?v0) (not (lnull$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (not (= (fun_app$a (inf$ y$) (collect$ uu$)) bot$))) :named a1))
(assert (! (forall ((?v0 A_llist$)) (=> (member$ ?v0 y$) (not (fun_app$ (fun_app$b lprefix$ ?v0) lNil$)))) :named a2))
(assert (! (not (= y$ bot$)) :named a3))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a5))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)) :named a6))
(assert (! (chain$ lprefix$ y$) :named a7))
(assert (! (forall ((?v0 A_llist_set$)) (= (fun_app$a (inf$ ?v0) bot$) bot$)) :named a8))
(assert (! (forall ((?v0 A_llist_set$)) (= (fun_app$a (inf$ bot$) ?v0) bot$)) :named a9))
(assert (! (forall ((?v0 B$)) (ord$ bot$a ?v0)) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_set$)) (= (member$ ?v0 (fun_app$a (inf$ ?v1) ?v2)) (and (member$ ?v0 ?v1) (member$ ?v0 ?v2)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_set$)) (=> (and (member$ ?v0 ?v1) (member$ ?v0 ?v2)) (member$ ?v0 (fun_app$a (inf$ ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (fun_app$a (inf$ (fun_app$a (inf$ ?v0) ?v1)) ?v1) (fun_app$a (inf$ ?v0) ?v1))) :named a13))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (fun_app$a (inf$ (fun_app$a (inf$ ?v0) ?v1)) ?v1) (fun_app$a (inf$ ?v0) ?v1))) :named a14))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (fun_app$a (inf$ ?v0) (fun_app$a (inf$ ?v0) ?v1)) (fun_app$a (inf$ ?v0) ?v1))) :named a15))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (= (fun_app$a (inf$ ?v0) (fun_app$a (inf$ ?v0) ?v1)) (fun_app$a (inf$ ?v0) ?v1))) :named a16))
(assert (! (forall ((?v0 A_llist_set$)) (! (= (fun_app$a (inf$ ?v0) ?v0) ?v0) :pattern ((inf$ ?v0)))) :named a17))
(check-sat)
;(get-unsat-core)
