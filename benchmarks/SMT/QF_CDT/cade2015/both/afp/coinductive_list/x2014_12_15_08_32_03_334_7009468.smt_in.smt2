; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 650
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_enat_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-fun uu$ () Nat_bool_fun$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun uua$ () Nat_bool_fun$)
(declare-fun uub$ () Nat_bool_fun$)
(declare-fun uuc$ () Nat_nat_fun$)
(declare-fun xss$ () A_llist_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun xssa$ () A_llist_llist$)
(declare-fun zero$ () Nat$)
(declare-fun image$ (Nat_nat_fun$ Nat_set$) Nat_set$)
(declare-fun insert$ (Nat$ Nat_set$) Nat_set$)
(declare-fun member$ (Nat$ Nat_set$) Bool)
(declare-fun collect$ (Nat_bool_fun$) Nat_set$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun lfinite$ (A_llist_llist$) Bool)
(declare-fun llength$ (A_llist_llist$) Enat$)
(declare-fun fun_app$a (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$b (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$c (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$d (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$e (Nat_enat_fun$ Nat$) Enat$)
(declare-fun less_eq$a (Nat$ Nat$) Bool)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uub$ ?v0) (less_eq$ (enat$ ?v0) (llength$ xssa$))) :pattern ((fun_app$ uub$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uua$ ?v0) (less$ (enat$ ?v0) (llength$ xssa$))) :pattern ((fun_app$ uua$ ?v0)))) :named a1))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (exists ((?v1 Nat$)) (and (= ?v0 (fun_app$a suc$ ?v1)) (less$ (enat$ ?v1) (llength$ xssa$))))) :pattern ((fun_app$ uu$ ?v0)))) :named a2))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a uuc$ ?v0) ?v0) :pattern ((fun_app$a uuc$ ?v0)))) :named a3))
(assert (! (not (= (insert$ zero$ (collect$ uu$)) (insert$ zero$ (image$ suc$ (collect$ uua$))))) :named a4))
(assert (! (lfinite$ xssa$) :named a5))
(assert (! (= (collect$ uub$) (insert$ zero$ (collect$ uu$))) :named a6))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat_set$)) (= (image$ ?v0 (insert$ ?v1 ?v2)) (insert$ (fun_app$a ?v0 ?v1) (image$ ?v0 ?v2)))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat_nat_fun$)) (=> (member$ ?v0 ?v1) (= (insert$ (fun_app$a ?v2 ?v0) (image$ ?v2 ?v1)) (image$ ?v2 ?v1)))) :named a8))
(assert (! (forall ((?v0 Nat_set$)) (= (image$ uuc$ ?v0) ?v0)) :named a9))
(assert (! (forall ((?v0 Nat_set$)) (not (member$ zero$ (image$ suc$ ?v0)))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a suc$ ?v0) (fun_app$a suc$ ?v1)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a suc$ ?v0) (fun_app$a suc$ ?v1)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$)) (= (insert$ ?v0 (insert$ ?v0 ?v1)) (insert$ ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_set$)) (= (member$ ?v0 (insert$ ?v1 ?v2)) (or (= ?v0 ?v1) (member$ ?v0 ?v2)))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat$)) (=> (=> (not (member$ ?v0 ?v1)) (= ?v0 ?v2)) (member$ ?v0 (insert$ ?v2 ?v1)))) :named a16))
(assert (! (lfinite$ xss$) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_set$)) (=> (and (= ?v0 (fun_app$a ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (image$ ?v1 ?v3)))) :named a18))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (less_eq$a ?v3 ?v4) (fun_app$ (fun_app$b ?v0 ?v3) ?v4))) (=> (fun_app$ (fun_app$b ?v0 ?v1) ?v2) (fun_app$ (fun_app$b ?v0 ?v2) ?v1))) (fun_app$ (fun_app$b ?v0 ?v2) ?v1))) :named a19))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (less_eq$ ?v3 ?v4) (fun_app$c (fun_app$d ?v0 ?v3) ?v4))) (=> (fun_app$c (fun_app$d ?v0 ?v1) ?v2) (fun_app$c (fun_app$d ?v0 ?v2) ?v1))) (fun_app$c (fun_app$d ?v0 ?v2) ?v1))) :named a20))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (less_eq$a (fun_app$a ?v0 (fun_app$a suc$ ?v3)) (fun_app$a ?v0 ?v3))) (less_eq$a ?v1 ?v2)) (less_eq$a (fun_app$a ?v0 ?v2) (fun_app$a ?v0 ?v1)))) :named a21))
(assert (! (forall ((?v0 Nat_enat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (less_eq$ (fun_app$e ?v0 (fun_app$a suc$ ?v3)) (fun_app$e ?v0 ?v3))) (less_eq$a ?v1 ?v2)) (less_eq$ (fun_app$e ?v0 ?v2) (fun_app$e ?v0 ?v1)))) :named a22))
(check-sat)
;(get-unsat-core)
