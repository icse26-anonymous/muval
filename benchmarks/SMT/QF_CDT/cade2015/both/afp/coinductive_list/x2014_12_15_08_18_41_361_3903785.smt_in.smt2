; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 660
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun x$ () A$)
(declare-fun x$a () A$)
(declare-fun xs$ () A_llist$)
(declare-fun xsa$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lmap$ (A_a_fun$ A_llist$) A_llist$)
(declare-fun lnth$ (A_llist$ Nat$) A$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_a_fun$ A$) A$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$b (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(assert (! (not (exists ((?v0 Nat$)) (and (less$ (enat$ ?v0) (llength$ (lCons$ x$ xsa$))) (= (lnth$ (lCons$ x$ xsa$) ?v0) x$a)))) :named a0))
(assert (! (member$ x$a (lset$ xsa$)) :named a1))
(assert (! (not (= x$a x$)) :named a2))
(assert (! (member$ x$a (lset$ xs$)) :named a3))
(assert (! (exists ((?v0 Nat$)) (and (less$ (enat$ ?v0) (llength$ xsa$)) (= (lnth$ xsa$ ?v0) x$a))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (less$ ?v0 (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_a_fun$)) (=> (less$ (enat$ ?v0) (llength$ ?v1)) (= (lnth$ (lmap$ ?v2 ?v1) ?v0) (fun_app$ ?v2 (lnth$ ?v1 ?v0))))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_a_llist_bool_fun_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A$) (?v4 A_llist$)) (fun_app$a (fun_app$b ?v2 ?v3) (lCons$ ?v3 ?v4))) (forall ((?v3 A$) (?v4 A_llist$) (?v5 A$)) (=> (and (member$ ?v5 (lset$ ?v4)) (fun_app$a (fun_app$b ?v2 ?v5) ?v4)) (fun_app$a (fun_app$b ?v2 ?v5) (lCons$ ?v3 ?v4)))))) (fun_app$a (fun_app$b ?v2 ?v0) ?v1))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$ ?v0 (lset$ ?v3))) false)))) false)) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$a ?v2 (lCons$ ?v0 ?v3))) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v4)) (fun_app$a ?v2 ?v4)) (fun_app$a ?v2 (lCons$ ?v3 ?v4)))))) (fun_app$a ?v2 ?v1))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist_bool_fun$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v3 A_llist$)) (fun_app$a ?v2 (lCons$ ?v0 ?v3))) (forall ((?v3 A$) (?v4 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v4)) (and (not (= ?v0 ?v3)) (fun_app$a ?v2 ?v4))) (fun_app$a ?v2 (lCons$ ?v3 ?v4)))))) (fun_app$a ?v2 ?v1))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (member$ ?v0 (lset$ ?v1)) (and (forall ((?v2 A_llist$)) (=> (= ?v1 (lCons$ ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v1 (lCons$ ?v2 ?v3)) (member$ ?v0 (lset$ ?v3))) false)))) false)) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ (lCons$ ?v2 ?v1))))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$)) (=> (member$ ?v0 (lset$ ?v1)) (member$ ?v0 (lset$ (lCons$ ?v2 ?v1))))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (member$ ?v0 (lset$ (lCons$ ?v0 ?v1)))) :named a16))
(check-sat)
;(get-unsat-core)
