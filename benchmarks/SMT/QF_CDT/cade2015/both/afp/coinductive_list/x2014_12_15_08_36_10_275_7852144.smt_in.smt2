; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 505
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_nat_fun$ 0)
(declare-sort B_nat_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_b_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort A_b_prod_b_fun$ 0)
(declare-sort A_list_nat_fun$ 0)
(declare-sort B_list_nat_fun$ 0)
(declare-sort Nat_a_a_prod_fun$ 0)
(declare-sort Nat_a_b_prod_fun$ 0)
(declare-sort Nat_b_a_prod_fun$ 0)
(declare-sort Nat_b_b_prod_fun$ 0)
(declare-sort Nat_list_nat_fun$ 0)
(declare-sort A_b_prod_list_nat_fun$ 0)
(declare-sort Nat_a_b_b_prod_prod_fun$ 0)
(declare-sort Nat_a_b_prod_a_prod_fun$ 0)
(declare-sort Nat_b_a_b_prod_prod_fun$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$) (lCons$ (lhd$ A_b_prod$) (ltl$ A_b_prod_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))))
(declare-datatypes () ((B_list$ (nil$) (cons$ (hd$ B$) (tl$ B_list$)))
  (A_b_prod_list$ (nil$a) (cons$a (hd$a A_b_prod$) (tl$a A_b_prod_list$)))
  (A_list$ (nil$b) (cons$b (hd$b A$) (tl$b A_list$)))
  (Nat_list$ (nil$c) (cons$c (hd$c Nat$) (tl$c Nat_list$)))
  (B_b_prod$ (pair$a (fst$a B$) (snd$a B$)))
  (B_b_prod_list$ (nil$d) (cons$d (hd$d B_b_prod$) (tl$d B_b_prod_list$)))))
(declare-codatatypes () ((B_b_prod_llist$ (lNil$c) (lCons$c (lhd$c B_b_prod$) (ltl$c B_b_prod_llist$)))))
(declare-datatypes () ((B_a_prod$ (pair$b (fst$b B$) (snd$b A$)))
  (B_a_prod_list$ (nil$e) (cons$e (hd$e B_a_prod$) (tl$e B_a_prod_list$)))))
(declare-codatatypes () ((B_a_prod_llist$ (lNil$d) (lCons$d (lhd$d B_a_prod$) (ltl$d B_a_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_prod$ (pair$c (fst$c A_b_prod$) (snd$c A$)))
  (A_b_prod_a_prod_list$ (nil$f) (cons$f (hd$f A_b_prod_a_prod$) (tl$f A_b_prod_a_prod_list$)))))
(declare-codatatypes () ((A_b_prod_a_prod_llist$ (lNil$e) (lCons$e (lhd$e A_b_prod_a_prod$) (ltl$e A_b_prod_a_prod_llist$)))))
(declare-datatypes () ((B_a_b_prod_prod$ (pair$d (fst$d B$) (snd$d A_b_prod$)))
  (B_a_b_prod_prod_list$ (nil$g) (cons$g (hd$g B_a_b_prod_prod$) (tl$g B_a_b_prod_prod_list$)))))
(declare-codatatypes () ((B_a_b_prod_prod_llist$ (lNil$f) (lCons$f (lhd$f B_a_b_prod_prod$) (ltl$f B_a_b_prod_prod_llist$)))
  (Nat_llist$ (lNil$g) (lCons$g (lhd$g Nat$) (ltl$g Nat_llist$)))))
(declare-datatypes () ((A_a_prod$ (pair$e (fst$e A$) (snd$e A$)))
  (A_a_prod_list$ (nil$h) (cons$h (hd$h A_a_prod$) (tl$h A_a_prod_list$)))))
(declare-codatatypes () ((A_a_prod_llist$ (lNil$h) (lCons$h (lhd$h A_a_prod$) (ltl$h A_a_prod_llist$)))))
(declare-datatypes () ((A_b_b_prod_prod$ (pair$f (fst$f A$) (snd$f B_b_prod$)))
  (A_b_b_prod_prod_list$ (nil$i) (cons$i (hd$i A_b_b_prod_prod$) (tl$i A_b_b_prod_prod_list$)))))
(declare-codatatypes () ((A_b_b_prod_prod_llist$ (lNil$i) (lCons$i (lhd$i A_b_b_prod_prod$) (ltl$i A_b_b_prod_prod_llist$)))))
(declare-datatypes () ((A_b_prod_b_prod$ (pair$g (fst$g A_b_prod$) (snd$g B$)))))
(declare-codatatypes () ((A_b_prod_b_prod_llist$ (lNil$j) (lCons$j (lhd$j A_b_prod_b_prod$) (ltl$j A_b_prod_b_prod_llist$)))))
(declare-datatypes () ((A_b_prod_b_prod_list$ (nil$j) (cons$j (hd$j A_b_prod_b_prod$) (tl$j A_b_prod_b_prod_list$)))
  (A_b_prod_a_b_prod_prod$ (pair$h (fst$h A_b_prod$) (snd$h A_b_prod$)))))
(declare-codatatypes () ((A_b_prod_a_b_prod_prod_llist$ (lNil$k) (lCons$k (lhd$k A_b_prod_a_b_prod_prod$) (ltl$k A_b_prod_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_b_prod_prod_list$ (nil$k) (cons$k (hd$k A_b_prod_a_b_prod_prod$) (tl$k A_b_prod_a_b_prod_prod_list$)))
  (B_b_b_prod_prod$ (pair$i (fst$i B$) (snd$i B_b_prod$)))))
(declare-codatatypes () ((B_b_b_prod_prod_llist$ (lNil$l) (lCons$l (lhd$l B_b_b_prod_prod$) (ltl$l B_b_b_prod_prod_llist$)))))
(declare-datatypes () ((B_b_b_prod_prod_list$ (nil$l) (cons$l (hd$l B_b_b_prod_prod$) (tl$l B_b_b_prod_prod_list$)))
  (B_b_a_prod_prod$ (pair$j (fst$j B$) (snd$j B_a_prod$)))))
(declare-codatatypes () ((B_b_a_prod_prod_llist$ (lNil$m) (lCons$m (lhd$m B_b_a_prod_prod$) (ltl$m B_b_a_prod_prod_llist$)))))
(declare-datatypes () ((B_b_a_prod_prod_list$ (nil$m) (cons$m (hd$m B_b_a_prod_prod$) (tl$m B_b_a_prod_prod_list$)))
  (Nat_a_prod$ (pair$k (fst$k Nat$) (snd$k A$)))))
(declare-codatatypes () ((Nat_a_prod_llist$ (lNil$n) (lCons$n (lhd$n Nat_a_prod$) (ltl$n Nat_a_prod_llist$)))))
(declare-datatypes () ((Nat_a_prod_list$ (nil$n) (cons$n (hd$n Nat_a_prod$) (tl$n Nat_a_prod_list$)))
  (Nat_b_prod$ (pair$l (fst$l Nat$) (snd$l B$)))))
(declare-codatatypes () ((Nat_b_prod_llist$ (lNil$o) (lCons$o (lhd$o Nat_b_prod$) (ltl$o Nat_b_prod_llist$)))))
(declare-datatypes () ((Nat_b_prod_list$ (nil$o) (cons$o (hd$o Nat_b_prod$) (tl$o Nat_b_prod_list$)))
  (B_b_prod_a_prod$ (pair$m (fst$m B_b_prod$) (snd$m A$)))))
(declare-codatatypes () ((B_b_prod_a_prod_llist$ (lNil$p) (lCons$p (lhd$p B_b_prod_a_prod$) (ltl$p B_b_prod_a_prod_llist$)))))
(declare-datatypes () ((B_b_prod_a_prod_list$ (nil$p) (cons$p (hd$p B_b_prod_a_prod$) (tl$p B_b_prod_a_prod_list$)))
  (B_a_prod_a_prod$ (pair$n (fst$n B_a_prod$) (snd$n A$)))))
(declare-codatatypes () ((B_a_prod_a_prod_llist$ (lNil$q) (lCons$q (lhd$q B_a_prod_a_prod$) (ltl$q B_a_prod_a_prod_llist$)))))
(declare-datatypes () ((B_a_prod_a_prod_list$ (nil$q) (cons$q (hd$q B_a_prod_a_prod$) (tl$q B_a_prod_a_prod_list$)))
  (Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun f$ () Nat_a_fun$)
(declare-fun xs$ () B_list$)
(declare-fun map$ (Nat_a_fun$ Nat_list$) A_list$)
(declare-fun upt$ (Nat$ Nat$) Nat_list$)
(declare-fun zip$ (A_list$ B_list$) A_b_prod_list$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun map$a (Nat_b_fun$ Nat_list$) B_list$)
(declare-fun map$b (B_b_fun$ B_list$) B_list$)
(declare-fun map$c (A_b_fun$ A_list$) B_list$)
(declare-fun map$d (B_a_fun$ B_list$) A_list$)
(declare-fun map$e (A_a_fun$ A_list$) A_list$)
(declare-fun map$f (B_nat_fun$ B_list$) Nat_list$)
(declare-fun map$g (A_nat_fun$ A_list$) Nat_list$)
(declare-fun map$h (Nat_nat_fun$ Nat_list$) Nat_list$)
(declare-fun map$i (A_b_prod_b_fun$ A_b_prod_list$) B_list$)
(declare-fun map$j (Nat_a_b_prod_a_prod_fun$ Nat_list$) A_b_prod_a_prod_list$)
(declare-fun map$k (Nat_b_a_b_prod_prod_fun$ Nat_list$) B_a_b_prod_prod_list$)
(declare-fun map$l (Nat_b_b_prod_fun$ Nat_list$) B_b_prod_list$)
(declare-fun map$m (Nat_b_a_prod_fun$ Nat_list$) B_a_prod_list$)
(declare-fun map$n (Nat_a_b_prod_fun$ Nat_list$) A_b_prod_list$)
(declare-fun size$ () B_list_nat_fun$)
(declare-fun zero$ () Nat$)
(declare-fun zip$a (B_list$ B_list$) B_b_prod_list$)
(declare-fun zip$b (B_list$ A_b_prod_list$) B_a_b_prod_prod_list$)
(declare-fun zip$c (A_b_prod_list$ B_list$) A_b_prod_b_prod_list$)
(declare-fun zip$d (A_b_prod_list$ A_b_prod_list$) A_b_prod_a_b_prod_prod_list$)
(declare-fun zip$e (B_list$ A_list$) B_a_prod_list$)
(declare-fun zip$f (A_list$ A_list$) A_a_prod_list$)
(declare-fun zip$g (B_list$ B_b_prod_list$) B_b_b_prod_prod_list$)
(declare-fun zip$h (B_list$ B_a_prod_list$) B_b_a_prod_prod_list$)
(declare-fun zip$i (A_b_prod_list$ A_list$) A_b_prod_a_prod_list$)
(declare-fun zip$j (Nat_list$ A_list$) Nat_a_prod_list$)
(declare-fun zip$k (Nat_list$ B_list$) Nat_b_prod_list$)
(declare-fun zip$l (B_b_prod_list$ A_list$) B_b_prod_a_prod_list$)
(declare-fun zip$m (B_a_prod_list$ A_list$) B_a_prod_a_prod_list$)
(declare-fun ltake$ (Enat$ Nat_llist$) Nat_llist$)
(declare-fun lzip$a (B_llist$ B_llist$) B_b_prod_llist$)
(declare-fun lzip$b (B_llist$ A_b_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun lzip$c (A_b_prod_llist$ B_llist$) A_b_prod_b_prod_llist$)
(declare-fun lzip$d (A_b_prod_llist$ A_b_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun lzip$e (B_llist$ A_llist$) B_a_prod_llist$)
(declare-fun lzip$f (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun lzip$g (B_llist$ B_b_prod_llist$) B_b_b_prod_prod_llist$)
(declare-fun lzip$h (B_llist$ B_a_prod_llist$) B_b_a_prod_prod_llist$)
(declare-fun lzip$i (A_b_prod_llist$ A_llist$) A_b_prod_a_prod_llist$)
(declare-fun lzip$j (Nat_llist$ A_llist$) Nat_a_prod_llist$)
(declare-fun lzip$k (Nat_llist$ B_llist$) Nat_b_prod_llist$)
(declare-fun lzip$l (B_b_prod_llist$ A_llist$) B_b_prod_a_prod_llist$)
(declare-fun lzip$m (B_a_prod_llist$ A_llist$) B_a_prod_a_prod_llist$)
(declare-fun size$a () A_list_nat_fun$)
(declare-fun size$b () A_b_prod_list_nat_fun$)
(declare-fun size$c () Nat_list_nat_fun$)
(declare-fun size$d (B_b_prod_list$) Nat$)
(declare-fun size$e (B_a_prod_list$) Nat$)
(declare-fun size$f (B_a_b_prod_prod_list$) Nat$)
(declare-fun size$g (A_b_prod_a_prod_list$) Nat$)
(declare-fun ltake$a (Enat$ A_b_prod_a_prod_llist$) A_b_prod_a_prod_llist$)
(declare-fun ltake$b (Enat$ B_a_b_prod_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun ltake$c (Enat$ B_b_prod_llist$) B_b_prod_llist$)
(declare-fun ltake$d (Enat$ B_a_prod_llist$) B_a_prod_llist$)
(declare-fun ltake$e (Enat$ B_llist$) B_llist$)
(declare-fun ltake$f (Enat$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun ltake$g (Enat$ A_llist$) A_llist$)
(declare-fun fun_app$ (B_list_nat_fun$ B_list$) Nat$)
(declare-fun fun_app$a (A_list_nat_fun$ A_list$) Nat$)
(declare-fun fun_app$b (A_b_prod_list_nat_fun$ A_b_prod_list$) Nat$)
(declare-fun fun_app$c (Nat_list_nat_fun$ Nat_list$) Nat$)
(declare-fun llist_of$ (B_list$) B_llist$)
(declare-fun inf_llist$ (Nat_a_fun$) A_llist$)
(declare-fun llist_of$a (A_b_prod_list$) A_b_prod_llist$)
(declare-fun llist_of$b (A_list$) A_llist$)
(declare-fun llist_of$c (B_b_prod_list$) B_b_prod_llist$)
(declare-fun llist_of$d (B_a_prod_list$) B_a_prod_llist$)
(declare-fun llist_of$e (A_b_prod_a_prod_list$) A_b_prod_a_prod_llist$)
(declare-fun llist_of$f (B_a_b_prod_prod_list$) B_a_b_prod_prod_llist$)
(declare-fun llist_of$g (Nat_list$) Nat_llist$)
(declare-fun llist_of$h (A_a_prod_list$) A_a_prod_llist$)
(declare-fun llist_of$i (A_b_b_prod_prod_list$) A_b_b_prod_prod_llist$)
(declare-fun llist_of$j (A_b_prod_b_prod_list$) A_b_prod_b_prod_llist$)
(declare-fun llist_of$k (A_b_prod_a_b_prod_prod_list$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun llist_of$l (B_b_b_prod_prod_list$) B_b_b_prod_prod_llist$)
(declare-fun llist_of$m (B_b_a_prod_prod_list$) B_b_a_prod_prod_llist$)
(declare-fun llist_of$n (Nat_a_prod_list$) Nat_a_prod_llist$)
(declare-fun llist_of$o (Nat_b_prod_list$) Nat_b_prod_llist$)
(declare-fun llist_of$p (B_b_prod_a_prod_list$) B_b_prod_a_prod_llist$)
(declare-fun llist_of$q (B_a_prod_a_prod_list$) B_a_prod_a_prod_llist$)
(declare-fun gen_length$ (Nat$) A_b_prod_list_nat_fun$)
(declare-fun inf_llist$a (Nat_b_a_prod_fun$) B_a_prod_llist$)
(declare-fun inf_llist$b (Nat_b_b_prod_fun$) B_b_prod_llist$)
(declare-fun inf_llist$c (Nat_b_a_b_prod_prod_fun$) B_a_b_prod_prod_llist$)
(declare-fun inf_llist$d (Nat_a_b_prod_a_prod_fun$) A_b_prod_a_prod_llist$)
(declare-fun inf_llist$e (Nat_b_fun$) B_llist$)
(declare-fun inf_llist$f (Nat_a_b_prod_fun$) A_b_prod_llist$)
(declare-fun inf_llist$g (Nat_nat_fun$) Nat_llist$)
(declare-fun inf_llist$h (Nat_a_a_prod_fun$) A_a_prod_llist$)
(declare-fun inf_llist$i (Nat_a_b_b_prod_prod_fun$) A_b_b_prod_prod_llist$)
(declare-fun gen_length$a (Nat$) A_list_nat_fun$)
(declare-fun gen_length$b (Nat$) Nat_list_nat_fun$)
(declare-fun gen_length$c (Nat$) B_list_nat_fun$)
(assert (! (not (= (lzip$ (inf_llist$ f$) (llist_of$ xs$)) (llist_of$a (zip$ (map$ f$ (upt$ zero$ (fun_app$ size$ xs$))) xs$)))) :named a0))
(assert (! (forall ((?v0 B_list$) (?v1 B_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a1))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$)) (= (= (llist_of$a ?v0) (llist_of$a ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$b ?v0) (llist_of$b ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 B_b_prod_list$) (?v1 B_b_prod_list$)) (= (= (llist_of$c ?v0) (llist_of$c ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 B_a_prod_list$) (?v1 B_a_prod_list$)) (= (= (llist_of$d ?v0) (llist_of$d ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_b_prod_a_prod_list$) (?v1 A_b_prod_a_prod_list$)) (= (= (llist_of$e ?v0) (llist_of$e ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 B_a_b_prod_prod_list$) (?v1 B_a_b_prod_prod_list$)) (= (= (llist_of$f ?v0) (llist_of$f ?v1)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 Nat_list$) (?v1 Nat_list$)) (= (= (llist_of$g ?v0) (llist_of$g ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 A_a_prod_list$)) (= (= (llist_of$h ?v0) (llist_of$h ?v1)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 A_b_b_prod_prod_list$) (?v1 A_b_b_prod_prod_list$)) (= (= (llist_of$i ?v0) (llist_of$i ?v1)) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 Nat_b_a_prod_fun$) (?v1 Nat_b_a_prod_fun$)) (= (= (inf_llist$a ?v0) (inf_llist$a ?v1)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 Nat_b_b_prod_fun$) (?v1 Nat_b_b_prod_fun$)) (= (= (inf_llist$b ?v0) (inf_llist$b ?v1)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Nat_b_a_b_prod_prod_fun$) (?v1 Nat_b_a_b_prod_prod_fun$)) (= (= (inf_llist$c ?v0) (inf_llist$c ?v1)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 Nat_a_b_prod_a_prod_fun$) (?v1 Nat_a_b_prod_a_prod_fun$)) (= (= (inf_llist$d ?v0) (inf_llist$d ?v1)) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 Nat_b_fun$)) (= (= (inf_llist$e ?v0) (inf_llist$e ?v1)) (= ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 Nat_a_b_prod_fun$) (?v1 Nat_a_b_prod_fun$)) (= (= (inf_llist$f ?v0) (inf_llist$f ?v1)) (= ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_a_fun$)) (= (= (inf_llist$ ?v0) (inf_llist$ ?v1)) (= ?v0 ?v1))) :named a17))
(assert (! (forall ((?v0 A_list$) (?v1 B_list$)) (= (lzip$ (llist_of$b ?v0) (llist_of$ ?v1)) (llist_of$a (zip$ ?v0 ?v1)))) :named a18))
(assert (! (forall ((?v0 B_list$) (?v1 B_list$)) (= (lzip$a (llist_of$ ?v0) (llist_of$ ?v1)) (llist_of$c (zip$a ?v0 ?v1)))) :named a19))
(assert (! (forall ((?v0 B_list$) (?v1 A_b_prod_list$)) (= (lzip$b (llist_of$ ?v0) (llist_of$a ?v1)) (llist_of$f (zip$b ?v0 ?v1)))) :named a20))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 B_list$)) (= (lzip$c (llist_of$a ?v0) (llist_of$ ?v1)) (llist_of$j (zip$c ?v0 ?v1)))) :named a21))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$)) (= (lzip$d (llist_of$a ?v0) (llist_of$a ?v1)) (llist_of$k (zip$d ?v0 ?v1)))) :named a22))
(assert (! (forall ((?v0 B_list$) (?v1 A_list$)) (= (lzip$e (llist_of$ ?v0) (llist_of$b ?v1)) (llist_of$d (zip$e ?v0 ?v1)))) :named a23))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (lzip$f (llist_of$b ?v0) (llist_of$b ?v1)) (llist_of$h (zip$f ?v0 ?v1)))) :named a24))
(assert (! (forall ((?v0 B_list$) (?v1 B_b_prod_list$)) (= (lzip$g (llist_of$ ?v0) (llist_of$c ?v1)) (llist_of$l (zip$g ?v0 ?v1)))) :named a25))
(assert (! (forall ((?v0 B_list$) (?v1 B_a_prod_list$)) (= (lzip$h (llist_of$ ?v0) (llist_of$d ?v1)) (llist_of$m (zip$h ?v0 ?v1)))) :named a26))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_list$)) (= (lzip$i (llist_of$a ?v0) (llist_of$b ?v1)) (llist_of$e (zip$i ?v0 ?v1)))) :named a27))
(assert (! (forall ((?v0 A_list$) (?v1 Nat_b_fun$)) (= (lzip$ (llist_of$b ?v0) (inf_llist$e ?v1)) (llist_of$a (zip$ ?v0 (map$a ?v1 (upt$ zero$ (fun_app$a size$a ?v0))))))) :named a28))
(assert (! (forall ((?v0 B_list$) (?v1 Nat_a_fun$)) (= (lzip$e (llist_of$ ?v0) (inf_llist$ ?v1)) (llist_of$d (zip$e ?v0 (map$ ?v1 (upt$ zero$ (fun_app$ size$ ?v0))))))) :named a29))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 Nat_a_fun$)) (= (lzip$i (llist_of$a ?v0) (inf_llist$ ?v1)) (llist_of$e (zip$i ?v0 (map$ ?v1 (upt$ zero$ (fun_app$b size$b ?v0))))))) :named a30))
(assert (! (forall ((?v0 Nat_list$) (?v1 Nat_a_fun$)) (= (lzip$j (llist_of$g ?v0) (inf_llist$ ?v1)) (llist_of$n (zip$j ?v0 (map$ ?v1 (upt$ zero$ (fun_app$c size$c ?v0))))))) :named a31))
(assert (! (forall ((?v0 A_list$) (?v1 Nat_a_fun$)) (= (lzip$f (llist_of$b ?v0) (inf_llist$ ?v1)) (llist_of$h (zip$f ?v0 (map$ ?v1 (upt$ zero$ (fun_app$a size$a ?v0))))))) :named a32))
(assert (! (forall ((?v0 Nat_list$) (?v1 Nat_b_fun$)) (= (lzip$k (llist_of$g ?v0) (inf_llist$e ?v1)) (llist_of$o (zip$k ?v0 (map$a ?v1 (upt$ zero$ (fun_app$c size$c ?v0))))))) :named a33))
(assert (! (forall ((?v0 B_list$) (?v1 Nat_b_fun$)) (= (lzip$a (llist_of$ ?v0) (inf_llist$e ?v1)) (llist_of$c (zip$a ?v0 (map$a ?v1 (upt$ zero$ (fun_app$ size$ ?v0))))))) :named a34))
(assert (! (forall ((?v0 B_b_prod_list$) (?v1 Nat_a_fun$)) (= (lzip$l (llist_of$c ?v0) (inf_llist$ ?v1)) (llist_of$p (zip$l ?v0 (map$ ?v1 (upt$ zero$ (size$d ?v0))))))) :named a35))
(assert (! (forall ((?v0 B_a_prod_list$) (?v1 Nat_a_fun$)) (= (lzip$m (llist_of$d ?v0) (inf_llist$ ?v1)) (llist_of$q (zip$m ?v0 (map$ ?v1 (upt$ zero$ (size$e ?v0))))))) :named a36))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 Nat_b_fun$)) (= (lzip$c (llist_of$a ?v0) (inf_llist$e ?v1)) (llist_of$j (zip$c ?v0 (map$a ?v1 (upt$ zero$ (fun_app$b size$b ?v0))))))) :named a37))
(assert (! (forall ((?v0 B_llist$)) (=> (and (forall ((?v1 B_list$)) (=> (= ?v0 (llist_of$ ?v1)) false)) (forall ((?v1 Nat_b_fun$)) (=> (= ?v0 (inf_llist$e ?v1)) false))) false)) :named a38))
(assert (! (forall ((?v0 A_llist$)) (=> (and (forall ((?v1 A_list$)) (=> (= ?v0 (llist_of$b ?v1)) false)) (forall ((?v1 Nat_a_fun$)) (=> (= ?v0 (inf_llist$ ?v1)) false))) false)) :named a39))
(assert (! (forall ((?v0 A_b_prod_llist$)) (=> (and (forall ((?v1 A_b_prod_list$)) (=> (= ?v0 (llist_of$a ?v1)) false)) (forall ((?v1 Nat_a_b_prod_fun$)) (=> (= ?v0 (inf_llist$f ?v1)) false))) false)) :named a40))
(assert (! (forall ((?v0 B_b_prod_llist$)) (=> (and (forall ((?v1 B_b_prod_list$)) (=> (= ?v0 (llist_of$c ?v1)) false)) (forall ((?v1 Nat_b_b_prod_fun$)) (=> (= ?v0 (inf_llist$b ?v1)) false))) false)) :named a41))
(assert (! (forall ((?v0 B_a_prod_llist$)) (=> (and (forall ((?v1 B_a_prod_list$)) (=> (= ?v0 (llist_of$d ?v1)) false)) (forall ((?v1 Nat_b_a_prod_fun$)) (=> (= ?v0 (inf_llist$a ?v1)) false))) false)) :named a42))
(assert (! (forall ((?v0 A_b_prod_a_prod_llist$)) (=> (and (forall ((?v1 A_b_prod_a_prod_list$)) (=> (= ?v0 (llist_of$e ?v1)) false)) (forall ((?v1 Nat_a_b_prod_a_prod_fun$)) (=> (= ?v0 (inf_llist$d ?v1)) false))) false)) :named a43))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$)) (=> (and (forall ((?v1 B_a_b_prod_prod_list$)) (=> (= ?v0 (llist_of$f ?v1)) false)) (forall ((?v1 Nat_b_a_b_prod_prod_fun$)) (=> (= ?v0 (inf_llist$c ?v1)) false))) false)) :named a44))
(assert (! (forall ((?v0 Nat_llist$)) (=> (and (forall ((?v1 Nat_list$)) (=> (= ?v0 (llist_of$g ?v1)) false)) (forall ((?v1 Nat_nat_fun$)) (=> (= ?v0 (inf_llist$g ?v1)) false))) false)) :named a45))
(assert (! (forall ((?v0 A_a_prod_llist$)) (=> (and (forall ((?v1 A_a_prod_list$)) (=> (= ?v0 (llist_of$h ?v1)) false)) (forall ((?v1 Nat_a_a_prod_fun$)) (=> (= ?v0 (inf_llist$h ?v1)) false))) false)) :named a46))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$)) (=> (and (forall ((?v1 A_b_b_prod_prod_list$)) (=> (= ?v0 (llist_of$i ?v1)) false)) (forall ((?v1 Nat_a_b_b_prod_prod_fun$)) (=> (= ?v0 (inf_llist$i ?v1)) false))) false)) :named a47))
(assert (! (forall ((?v0 B_list$) (?v1 Nat_b_fun$)) (not (= (llist_of$ ?v0) (inf_llist$e ?v1)))) :named a48))
(assert (! (forall ((?v0 A_list$) (?v1 Nat_a_fun$)) (not (= (llist_of$b ?v0) (inf_llist$ ?v1)))) :named a49))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 Nat_a_b_prod_fun$)) (not (= (llist_of$a ?v0) (inf_llist$f ?v1)))) :named a50))
(assert (! (forall ((?v0 B_b_prod_list$) (?v1 Nat_b_b_prod_fun$)) (not (= (llist_of$c ?v0) (inf_llist$b ?v1)))) :named a51))
(assert (! (forall ((?v0 B_a_prod_list$) (?v1 Nat_b_a_prod_fun$)) (not (= (llist_of$d ?v0) (inf_llist$a ?v1)))) :named a52))
(assert (! (forall ((?v0 A_b_prod_a_prod_list$) (?v1 Nat_a_b_prod_a_prod_fun$)) (not (= (llist_of$e ?v0) (inf_llist$d ?v1)))) :named a53))
(assert (! (forall ((?v0 B_a_b_prod_prod_list$) (?v1 Nat_b_a_b_prod_prod_fun$)) (not (= (llist_of$f ?v0) (inf_llist$c ?v1)))) :named a54))
(assert (! (forall ((?v0 Nat_list$) (?v1 Nat_nat_fun$)) (not (= (llist_of$g ?v0) (inf_llist$g ?v1)))) :named a55))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 Nat_a_a_prod_fun$)) (not (= (llist_of$h ?v0) (inf_llist$h ?v1)))) :named a56))
(assert (! (forall ((?v0 A_b_b_prod_prod_list$) (?v1 Nat_a_b_b_prod_prod_fun$)) (not (= (llist_of$i ?v0) (inf_llist$i ?v1)))) :named a57))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_list$)) (= (fun_app$a size$a (map$ ?v0 ?v1)) (fun_app$c size$c ?v1))) :named a58))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_list$)) (= (fun_app$ size$ (map$b ?v0 ?v1)) (fun_app$ size$ ?v1))) :named a59))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_list$)) (= (fun_app$ size$ (map$c ?v0 ?v1)) (fun_app$a size$a ?v1))) :named a60))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 Nat_list$)) (= (fun_app$ size$ (map$a ?v0 ?v1)) (fun_app$c size$c ?v1))) :named a61))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_list$)) (= (fun_app$a size$a (map$d ?v0 ?v1)) (fun_app$ size$ ?v1))) :named a62))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_list$)) (= (fun_app$a size$a (map$e ?v0 ?v1)) (fun_app$a size$a ?v1))) :named a63))
(assert (! (forall ((?v0 B_nat_fun$) (?v1 B_list$)) (= (fun_app$c size$c (map$f ?v0 ?v1)) (fun_app$ size$ ?v1))) :named a64))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A_list$)) (= (fun_app$c size$c (map$g ?v0 ?v1)) (fun_app$a size$a ?v1))) :named a65))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_list$)) (= (fun_app$c size$c (map$h ?v0 ?v1)) (fun_app$c size$c ?v1))) :named a66))
(assert (! (forall ((?v0 A_b_prod_b_fun$) (?v1 A_b_prod_list$)) (= (fun_app$ size$ (map$i ?v0 ?v1)) (fun_app$b size$b ?v1))) :named a67))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_list$) (?v2 Nat_a_fun$) (?v3 Nat_list$)) (=> (= (map$ ?v0 ?v1) (map$ ?v2 ?v3)) (= (fun_app$c size$c ?v1) (fun_app$c size$c ?v3)))) :named a68))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_list$) (?v2 B_a_fun$) (?v3 B_list$)) (=> (= (map$ ?v0 ?v1) (map$d ?v2 ?v3)) (= (fun_app$c size$c ?v1) (fun_app$ size$ ?v3)))) :named a69))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_list$) (?v2 Nat_a_fun$) (?v3 Nat_list$)) (=> (= (map$d ?v0 ?v1) (map$ ?v2 ?v3)) (= (fun_app$ size$ ?v1) (fun_app$c size$c ?v3)))) :named a70))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_list$) (?v2 B_b_fun$) (?v3 B_list$)) (=> (= (map$b ?v0 ?v1) (map$b ?v2 ?v3)) (= (fun_app$ size$ ?v1) (fun_app$ size$ ?v3)))) :named a71))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_list$) (?v2 B_a_fun$) (?v3 B_list$)) (=> (= (map$d ?v0 ?v1) (map$d ?v2 ?v3)) (= (fun_app$ size$ ?v1) (fun_app$ size$ ?v3)))) :named a72))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_list$) (?v2 A_b_fun$) (?v3 A_list$)) (=> (= (map$b ?v0 ?v1) (map$c ?v2 ?v3)) (= (fun_app$ size$ ?v1) (fun_app$a size$a ?v3)))) :named a73))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_list$) (?v2 A_a_fun$) (?v3 A_list$)) (=> (= (map$d ?v0 ?v1) (map$e ?v2 ?v3)) (= (fun_app$ size$ ?v1) (fun_app$a size$a ?v3)))) :named a74))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_list$) (?v2 Nat_b_fun$) (?v3 Nat_list$)) (=> (= (map$b ?v0 ?v1) (map$a ?v2 ?v3)) (= (fun_app$ size$ ?v1) (fun_app$c size$c ?v3)))) :named a75))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_list$) (?v2 B_b_fun$) (?v3 B_list$)) (=> (= (map$c ?v0 ?v1) (map$b ?v2 ?v3)) (= (fun_app$a size$a ?v1) (fun_app$ size$ ?v3)))) :named a76))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_list$) (?v2 B_a_fun$) (?v3 B_list$)) (=> (= (map$e ?v0 ?v1) (map$d ?v2 ?v3)) (= (fun_app$a size$a ?v1) (fun_app$ size$ ?v3)))) :named a77))
(assert (! (forall ((?v0 B_a_prod_list$) (?v1 B_a_prod_list$)) (=> (not (= (size$e ?v0) (size$e ?v1))) (= (= ?v0 ?v1) false))) :named a78))
(assert (! (forall ((?v0 B_b_prod_list$) (?v1 B_b_prod_list$)) (=> (not (= (size$d ?v0) (size$d ?v1))) (= (= ?v0 ?v1) false))) :named a79))
(assert (! (forall ((?v0 B_a_b_prod_prod_list$) (?v1 B_a_b_prod_prod_list$)) (=> (not (= (size$f ?v0) (size$f ?v1))) (= (= ?v0 ?v1) false))) :named a80))
(assert (! (forall ((?v0 A_b_prod_a_prod_list$) (?v1 A_b_prod_a_prod_list$)) (=> (not (= (size$g ?v0) (size$g ?v1))) (= (= ?v0 ?v1) false))) :named a81))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$)) (=> (not (= (fun_app$b size$b ?v0) (fun_app$b size$b ?v1))) (= (= ?v0 ?v1) false))) :named a82))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (not (= (fun_app$a size$a ?v0) (fun_app$a size$a ?v1))) (= (= ?v0 ?v1) false))) :named a83))
(assert (! (forall ((?v0 Nat_list$) (?v1 Nat_list$)) (=> (not (= (fun_app$c size$c ?v0) (fun_app$c size$c ?v1))) (= (= ?v0 ?v1) false))) :named a84))
(assert (! (forall ((?v0 B_list$) (?v1 B_list$)) (=> (not (= (fun_app$ size$ ?v0) (fun_app$ size$ ?v1))) (= (= ?v0 ?v1) false))) :named a85))
(assert (! (forall ((?v0 Nat$)) (exists ((?v1 B_a_prod_list$)) (= (size$e ?v1) ?v0))) :named a86))
(assert (! (forall ((?v0 Nat$)) (exists ((?v1 B_b_prod_list$)) (= (size$d ?v1) ?v0))) :named a87))
(assert (! (forall ((?v0 Nat$)) (exists ((?v1 B_a_b_prod_prod_list$)) (= (size$f ?v1) ?v0))) :named a88))
(assert (! (forall ((?v0 Nat$)) (exists ((?v1 A_b_prod_a_prod_list$)) (= (size$g ?v1) ?v0))) :named a89))
(assert (! (forall ((?v0 Nat$)) (exists ((?v1 A_b_prod_list$)) (= (fun_app$b size$b ?v1) ?v0))) :named a90))
(assert (! (forall ((?v0 Nat$)) (exists ((?v1 A_list$)) (= (fun_app$a size$a ?v1) ?v0))) :named a91))
(assert (! (forall ((?v0 Nat$)) (exists ((?v1 Nat_list$)) (= (fun_app$c size$c ?v1) ?v0))) :named a92))
(assert (! (forall ((?v0 Nat$)) (exists ((?v1 B_list$)) (= (fun_app$ size$ ?v1) ?v0))) :named a93))
(assert (! (forall ((?v0 B_a_prod_list$) (?v1 B_a_prod_list$)) (=> (not (= (size$e ?v0) (size$e ?v1))) (not (= ?v0 ?v1)))) :named a94))
(assert (! (forall ((?v0 B_b_prod_list$) (?v1 B_b_prod_list$)) (=> (not (= (size$d ?v0) (size$d ?v1))) (not (= ?v0 ?v1)))) :named a95))
(assert (! (forall ((?v0 B_a_b_prod_prod_list$) (?v1 B_a_b_prod_prod_list$)) (=> (not (= (size$f ?v0) (size$f ?v1))) (not (= ?v0 ?v1)))) :named a96))
(assert (! (forall ((?v0 A_b_prod_a_prod_list$) (?v1 A_b_prod_a_prod_list$)) (=> (not (= (size$g ?v0) (size$g ?v1))) (not (= ?v0 ?v1)))) :named a97))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$)) (=> (not (= (fun_app$b size$b ?v0) (fun_app$b size$b ?v1))) (not (= ?v0 ?v1)))) :named a98))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (not (= (fun_app$a size$a ?v0) (fun_app$a size$a ?v1))) (not (= ?v0 ?v1)))) :named a99))
(assert (! (forall ((?v0 Nat_list$) (?v1 Nat_list$)) (=> (not (= (fun_app$c size$c ?v0) (fun_app$c size$c ?v1))) (not (= ?v0 ?v1)))) :named a100))
(assert (! (forall ((?v0 B_list$) (?v1 B_list$)) (=> (not (= (fun_app$ size$ ?v0) (fun_app$ size$ ?v1))) (not (= ?v0 ?v1)))) :named a101))
(assert (! (= zero$ zero$) :named a102))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a103))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a104))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$)) (= (ltake$ (enat$ ?v0) (inf_llist$g ?v1)) (llist_of$g (map$h ?v1 (upt$ zero$ ?v0))))) :named a105))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_a_b_prod_a_prod_fun$)) (= (ltake$a (enat$ ?v0) (inf_llist$d ?v1)) (llist_of$e (map$j ?v1 (upt$ zero$ ?v0))))) :named a106))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_b_a_b_prod_prod_fun$)) (= (ltake$b (enat$ ?v0) (inf_llist$c ?v1)) (llist_of$f (map$k ?v1 (upt$ zero$ ?v0))))) :named a107))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_b_b_prod_fun$)) (= (ltake$c (enat$ ?v0) (inf_llist$b ?v1)) (llist_of$c (map$l ?v1 (upt$ zero$ ?v0))))) :named a108))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_b_a_prod_fun$)) (= (ltake$d (enat$ ?v0) (inf_llist$a ?v1)) (llist_of$d (map$m ?v1 (upt$ zero$ ?v0))))) :named a109))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_b_fun$)) (= (ltake$e (enat$ ?v0) (inf_llist$e ?v1)) (llist_of$ (map$a ?v1 (upt$ zero$ ?v0))))) :named a110))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_a_b_prod_fun$)) (= (ltake$f (enat$ ?v0) (inf_llist$f ?v1)) (llist_of$a (map$n ?v1 (upt$ zero$ ?v0))))) :named a111))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_a_fun$)) (= (ltake$g (enat$ ?v0) (inf_llist$ ?v1)) (llist_of$b (map$ ?v1 (upt$ zero$ ?v0))))) :named a112))
(assert (! (= size$b (gen_length$ zero$)) :named a113))
(assert (! (= size$a (gen_length$a zero$)) :named a114))
(assert (! (= size$c (gen_length$b zero$)) :named a115))
(assert (! (= size$ (gen_length$c zero$)) :named a116))
(check-sat)
;(get-unsat-core)
