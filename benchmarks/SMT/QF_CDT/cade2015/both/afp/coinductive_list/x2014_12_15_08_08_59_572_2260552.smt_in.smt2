; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 289
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun uu$ () A_llist_a_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun uua$ () A_llist_a_llist_fun$)
(declare-fun lnull$ () A_llist_bool_fun$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun fun_app$a (A_llist_a_fun$ A_llist$) A$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun unfold_llist$ (A_llist_bool_fun$ A_llist_a_fun$ A_llist_a_llist_fun$ A_llist$) A_llist$)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uua$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a uu$ ?v0) (lhd$ ?v0)) :pattern ((fun_app$a uu$ ?v0)))) :named a1))
(assert (! (not (lprefix$ xs$ ys$)) :named a2))
(assert (! (=> (not (fun_app$b lnull$ xs$)) (and (not (fun_app$b lnull$ ys$)) (and (= (lhd$ xs$) (lhd$ ys$)) (lprefix$ (ltl$ xs$) (ltl$ ys$))))) :named a3))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) false) (=> (or (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) false)) false)) :named a5))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (fun_app$b lnull$ ?v0) false) (=> (not (fun_app$b lnull$ ?v0)) false)) false)) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (fun_app$b lnull$ ?v0) (fun_app$b lnull$ ?v1)) (=> (and (not (fun_app$b lnull$ ?v0)) (not (fun_app$b lnull$ ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (not (fun_app$b lnull$ ?v0))) (= (lhd$ ?v0) (lhd$ ?v1)))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (not (fun_app$b lnull$ ?v0))) (not (fun_app$b lnull$ ?v1)))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (fun_app$b lnull$ ?v1)) (fun_app$b lnull$ ?v0))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (lprefix$ ?v0 ?v1) (lprefix$ (ltl$ ?v0) (ltl$ ?v1)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (fun_app$b lnull$ ?v0) (= (lprefix$ ?v1 ?v0) (fun_app$b lnull$ ?v1))) :pattern ((lprefix$ ?v1 ?v0)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$b lnull$ ?v0) (lprefix$ ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 A_llist$)) (=> (fun_app$b lnull$ ?v0) (fun_app$b lnull$ (ltl$ ?v0)))) :named a14))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$c ?v0 ?v3) ?v4) (and (= (fun_app$b lnull$ ?v3) (fun_app$b lnull$ ?v4)) (=> (and (not (fun_app$b lnull$ ?v3)) (not (fun_app$b lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$b (fun_app$c ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))))) (= ?v1 ?v2))) :named a15))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$c ?v0 ?v3) ?v4) (and (= (fun_app$b lnull$ ?v3) (fun_app$b lnull$ ?v4)) (=> (and (not (fun_app$b lnull$ ?v3)) (not (fun_app$b lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (fun_app$b (fun_app$c ?v0 (ltl$ ?v3)) (ltl$ ?v4)))))))) (= ?v1 ?v2))) :named a16))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$c ?v0 ?v3) ?v4) (and (=> (fun_app$b lnull$ ?v4) (fun_app$b lnull$ ?v3)) (=> (and (not (fun_app$b lnull$ ?v3)) (not (fun_app$b lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$b (fun_app$c ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (lprefix$ (ltl$ ?v3) (ltl$ ?v4))))))))) (lprefix$ ?v1 ?v2))) :named a17))
(assert (! (forall ((?v0 A_llist$)) (= (unfold_llist$ lnull$ uu$ uua$ ?v0) ?v0)) :named a18))
(assert (! (forall ((?v0 A_llist$)) (=> (not (fun_app$b lnull$ ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0))) :named a19))
(check-sat)
;(get-unsat-core)
