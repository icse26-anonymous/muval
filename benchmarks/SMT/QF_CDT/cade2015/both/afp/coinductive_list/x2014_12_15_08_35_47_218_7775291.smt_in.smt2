; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 562
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_nat_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (Nat_llist$ (lNil$a) (lCons$a (lhd$a Nat$) (ltl$a Nat_llist$)))))
(declare-fun f$ () Nat_a_fun$)
(declare-fun top$ () Nat_set$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun top$a () A_set$)
(declare-fun top$b () A_bool_fun$)
(declare-fun top$c () Bool)
(declare-fun top$d () Nat_bool_fun$)
(declare-fun image$ (Nat_a_fun$ Nat_set$) A_set$)
(declare-fun lset$a (Nat_llist$) Nat_set$)
(declare-fun image$a (Nat_nat_fun$ Nat_set$) Nat_set$)
(declare-fun image$b (A_nat_fun$ A_set$) Nat_set$)
(declare-fun image$c (A_a_fun$ A_set$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun lmember$ (Nat$ Nat_llist$) Bool)
(declare-fun member$a (Nat$ Nat_set$) Bool)
(declare-fun collect$a (Nat_bool_fun$) Nat_set$)
(declare-fun from_nat$ () Nat_nat_fun$)
(declare-fun fun_app$a (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$b (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$c (A_nat_fun$ A$) Nat$)
(declare-fun fun_app$d (A_a_fun$ A$) A$)
(declare-fun fun_app$e (Nat_a_fun$ Nat$) A$)
(declare-fun lmember$a (A$ A_llist$) Bool)
(declare-fun inf_llist$ (Nat_a_fun$) A_llist$)
(assert (! (not (= (lset$ (inf_llist$ f$)) (image$ f$ top$))) :named a0))
(assert (! (forall ((?v0 A$)) (= (member$ ?v0 top$a) true)) :named a1))
(assert (! (forall ((?v0 Nat$)) (= (member$a ?v0 top$) true)) :named a2))
(assert (! (forall ((?v0 A$)) (member$ ?v0 top$a)) :named a3))
(assert (! (forall ((?v0 Nat$)) (member$a ?v0 top$)) :named a4))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ top$b ?v0) top$c) :pattern ((fun_app$ top$b ?v0)))) :named a5))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a top$d ?v0) top$c) :pattern ((fun_app$a top$d ?v0)))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_set$)) (=> (and (= ?v0 (fun_app$b ?v1 ?v2)) (member$a ?v2 ?v3)) (member$a ?v0 (image$a ?v1 ?v3)))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 A_nat_fun$) (?v2 A$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v2)) (member$ ?v2 ?v3)) (member$a ?v0 (image$b ?v1 ?v3)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (image$c ?v1 ?v3)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 Nat_a_fun$) (?v2 Nat$) (?v3 Nat_set$)) (=> (and (= ?v0 (fun_app$e ?v1 ?v2)) (member$a ?v2 ?v3)) (member$ ?v0 (image$ ?v1 ?v3)))) :named a10))
(assert (! (forall ((?v0 A_nat_fun$)) (= (= (image$b ?v0 top$a) top$) (forall ((?v1 Nat$)) (exists ((?v2 A$)) (= ?v1 (fun_app$c ?v0 ?v2)))))) :named a11))
(assert (! (forall ((?v0 A_a_fun$)) (= (= (image$c ?v0 top$a) top$a) (forall ((?v1 A$)) (exists ((?v2 A$)) (= ?v1 (fun_app$d ?v0 ?v2)))))) :named a12))
(assert (! (forall ((?v0 Nat_a_fun$)) (= (= (image$ ?v0 top$) top$a) (forall ((?v1 A$)) (exists ((?v2 Nat$)) (= ?v1 (fun_app$e ?v0 ?v2)))))) :named a13))
(assert (! (forall ((?v0 Nat_nat_fun$)) (= (= (image$a ?v0 top$) top$) (forall ((?v1 Nat$)) (exists ((?v2 Nat$)) (= ?v1 (fun_app$b ?v0 ?v2)))))) :named a14))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 Nat_a_fun$)) (=> (forall ((?v2 Nat$)) (= (fun_app$c ?v0 (fun_app$e ?v1 ?v2)) ?v2)) (= (image$b ?v0 top$a) top$))) :named a15))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (=> (forall ((?v2 A$)) (= (fun_app$d ?v0 (fun_app$d ?v1 ?v2)) ?v2)) (= (image$c ?v0 top$a) top$a))) :named a16))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 A_nat_fun$)) (=> (forall ((?v2 A$)) (= (fun_app$e ?v0 (fun_app$c ?v1 ?v2)) ?v2)) (= (image$ ?v0 top$) top$a))) :named a17))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$)) (=> (forall ((?v2 Nat$)) (= (fun_app$b ?v0 (fun_app$b ?v1 ?v2)) ?v2)) (= (image$a ?v0 top$) top$))) :named a18))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 Nat$)) (=> (and (= (image$b ?v0 top$a) top$) (forall ((?v2 A$)) (=> (= ?v1 (fun_app$c ?v0 ?v2)) false))) false)) :named a19))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (=> (and (= (image$c ?v0 top$a) top$a) (forall ((?v2 A$)) (=> (= ?v1 (fun_app$d ?v0 ?v2)) false))) false)) :named a20))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 A$)) (=> (and (= (image$ ?v0 top$) top$a) (forall ((?v2 Nat$)) (=> (= ?v1 (fun_app$e ?v0 ?v2)) false))) false)) :named a21))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$)) (=> (and (= (image$a ?v0 top$) top$) (forall ((?v2 Nat$)) (=> (= ?v1 (fun_app$b ?v0 ?v2)) false))) false)) :named a22))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 Nat$)) (=> (= (image$b ?v0 top$a) top$) (exists ((?v2 A$)) (= ?v1 (fun_app$c ?v0 ?v2))))) :named a23))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (=> (= (image$c ?v0 top$a) top$a) (exists ((?v2 A$)) (= ?v1 (fun_app$d ?v0 ?v2))))) :named a24))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 A$)) (=> (= (image$ ?v0 top$) top$a) (exists ((?v2 Nat$)) (= ?v1 (fun_app$e ?v0 ?v2))))) :named a25))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$)) (=> (= (image$a ?v0 top$) top$) (exists ((?v2 Nat$)) (= ?v1 (fun_app$b ?v0 ?v2))))) :named a26))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (=> (= ?v0 (fun_app$b ?v1 ?v2)) (member$a ?v0 (image$a ?v1 top$)))) :named a27))
(assert (! (forall ((?v0 Nat$) (?v1 A_nat_fun$) (?v2 A$)) (=> (= ?v0 (fun_app$c ?v1 ?v2)) (member$a ?v0 (image$b ?v1 top$a)))) :named a28))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A$)) (=> (= ?v0 (fun_app$d ?v1 ?v2)) (member$ ?v0 (image$c ?v1 top$a)))) :named a29))
(assert (! (forall ((?v0 A$) (?v1 Nat_a_fun$) (?v2 Nat$)) (=> (= ?v0 (fun_app$e ?v1 ?v2)) (member$ ?v0 (image$ ?v1 top$)))) :named a30))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$)) (member$a (fun_app$b ?v0 ?v1) (image$a ?v0 top$))) :named a31))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A$)) (member$a (fun_app$c ?v0 ?v1) (image$b ?v0 top$a))) :named a32))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (member$ (fun_app$d ?v0 ?v1) (image$c ?v0 top$a))) :named a33))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat$)) (member$ (fun_app$e ?v0 ?v1) (image$ ?v0 top$))) :named a34))
(assert (! (= (image$a from_nat$ top$) top$) :named a35))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_llist$)) (= (member$a ?v0 (lset$a ?v1)) (lmember$ ?v0 ?v1))) :named a36))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$ ?v0 (lset$ ?v1)) (lmember$a ?v0 ?v1))) :named a37))
(assert (! (= top$a (collect$ top$b)) :named a38))
(assert (! (= top$ (collect$a top$d)) :named a39))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat_nat_fun$)) (=> (member$a ?v0 ?v1) (member$a (fun_app$b ?v2 ?v0) (image$a ?v2 ?v1)))) :named a40))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_nat_fun$)) (=> (member$ ?v0 ?v1) (member$a (fun_app$c ?v2 ?v0) (image$b ?v2 ?v1)))) :named a41))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_a_fun$)) (=> (member$ ?v0 ?v1) (member$ (fun_app$d ?v2 ?v0) (image$c ?v2 ?v1)))) :named a42))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat_a_fun$)) (=> (member$a ?v0 ?v1) (member$ (fun_app$e ?v2 ?v0) (image$ ?v2 ?v1)))) :named a43))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat$) (?v3 Nat_nat_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$b ?v3 ?v0))) (member$a ?v2 (image$a ?v3 ?v1)))) :named a44))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 Nat$) (?v3 A_nat_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$c ?v3 ?v0))) (member$a ?v2 (image$b ?v3 ?v1)))) :named a45))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A$) (?v3 A_a_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$d ?v3 ?v0))) (member$ ?v2 (image$c ?v3 ?v1)))) :named a46))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 A$) (?v3 Nat_a_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$e ?v3 ?v0))) (member$ ?v2 (image$ ?v3 ?v1)))) :named a47))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_set$) (?v2 Nat_bool_fun$)) (=> (forall ((?v3 Nat$)) (=> (member$a ?v3 (image$a ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 Nat$)) (=> (member$a ?v3 ?v1) (fun_app$a ?v2 (fun_app$b ?v0 ?v3)))))) :named a48))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A_set$) (?v2 Nat_bool_fun$)) (=> (forall ((?v3 Nat$)) (=> (member$a ?v3 (image$b ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v1) (fun_app$a ?v2 (fun_app$c ?v0 ?v3)))))) :named a49))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_set$) (?v2 A_bool_fun$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 (image$c ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v1) (fun_app$ ?v2 (fun_app$d ?v0 ?v3)))))) :named a50))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_set$) (?v2 A_bool_fun$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 (image$ ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (forall ((?v3 Nat$)) (=> (member$a ?v3 ?v1) (fun_app$ ?v2 (fun_app$e ?v0 ?v3)))))) :named a51))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_set$) (?v2 Nat_bool_fun$)) (=> (exists ((?v3 Nat$)) (and (member$a ?v3 (image$a ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 Nat$)) (and (member$a ?v3 ?v1) (fun_app$a ?v2 (fun_app$b ?v0 ?v3)))))) :named a52))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A_set$) (?v2 Nat_bool_fun$)) (=> (exists ((?v3 Nat$)) (and (member$a ?v3 (image$b ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v1) (fun_app$a ?v2 (fun_app$c ?v0 ?v3)))))) :named a53))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_set$) (?v2 A_bool_fun$)) (=> (exists ((?v3 A$)) (and (member$ ?v3 (image$c ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v1) (fun_app$ ?v2 (fun_app$d ?v0 ?v3)))))) :named a54))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_set$) (?v2 A_bool_fun$)) (=> (exists ((?v3 A$)) (and (member$ ?v3 (image$ ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (exists ((?v3 Nat$)) (and (member$a ?v3 ?v1) (fun_app$ ?v2 (fun_app$e ?v0 ?v3)))))) :named a55))
(check-sat)
;(get-unsat-core)
