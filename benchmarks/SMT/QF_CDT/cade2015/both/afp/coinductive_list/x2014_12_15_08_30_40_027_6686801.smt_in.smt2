; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 656
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun ma$ () Nat$)
(declare-fun xs$ () A_llist$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun xsa$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist$ Nat$) A$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun lfilter$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lstrict_prefix$ (A_llist$) A_llist_bool_fun$)
(assert (! (not (lfinite$ (fun_app$ (lfilter$ p$) (ltl$ xsa$)))) :named a0))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$ (lfilter$ ?v0) (fun_app$ (lfilter$ ?v0) ?v1)) (fun_app$ (lfilter$ ?v0) ?v1))) :named a1))
(assert (! (not (lfinite$ xs$)) :named a2))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$ (ltl$ ?v0)) (lfinite$ ?v0))) :named a3))
(assert (! (forall ((?v0 Nat$)) (=> (and (less_eq$ ma$ ?v0) (less$ (enat$ ?v0) (llength$ (ltl$ xsa$)))) (not (fun_app$a p$ (lnth$ (ltl$ xsa$) ?v0))))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (lfinite$ ?v0) (lfinite$ (fun_app$ (lfilter$ ?v1) ?v0)))) :named a5))
(assert (! (=> (lfinite$ xs$) (lfinite$ (fun_app$ (lfilter$ p$) xs$))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$) (?v2 A_llist$)) (=> (lfinite$ ?v0) (= (fun_app$ (lfilter$ ?v1) (lappend$ ?v0 ?v2)) (lappend$ (fun_app$ (lfilter$ ?v1) ?v0) (fun_app$ (lfilter$ ?v1) ?v2))))) :named a7))
(assert (! (forall ((?v0 Nat$)) (=> (and (less_eq$ (suc$ ma$) ?v0) (less$ (enat$ ?v0) (llength$ xsa$))) (not (fun_app$a p$ (lnth$ xsa$ ?v0))))) :named a8))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (exists ((?v1 Nat$)) (= (llength$ ?v0) (enat$ ?v1))))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (= (llength$ ?v0) (enat$ ?v1)) (lfinite$ ?v0))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$ ?v0) (exists ((?v1 Nat$)) (= (llength$ ?v0) (enat$ ?v1))))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_bool_fun$)) (=> (and (lfinite$ ?v0) (and (forall ((?v2 A_llist$)) (=> (lnull$ ?v2) (fun_app$b ?v1 ?v2))) (forall ((?v2 A_llist$)) (=> (and (lfinite$ ?v2) (and (not (lnull$ ?v2)) (fun_app$b ?v1 (ltl$ ?v2)))) (fun_app$b ?v1 ?v2))))) (fun_app$b ?v1 ?v0))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$b (lstrict_prefix$ ?v0) ?v1) (lfinite$ ?v0))) :named a13))
(assert (! (forall ((?v0 A_llist$)) (=> (forall ((?v1 Nat$)) (=> (and (less_eq$ ma$ ?v1) (less$ (enat$ ?v1) (llength$ ?v0))) (not (fun_app$a p$ (lnth$ ?v0 ?v1))))) (lfinite$ (fun_app$ (lfilter$ p$) ?v0)))) :named a14))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$ (lfilter$ ?v0) lNil$) lNil$) :pattern ((lfilter$ ?v0)))) :named a15))
(check-sat)
;(get-unsat-core)
