; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 349
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_set_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun x$ () A$)
(declare-fun uu$ () A_llist_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun uua$ () A_llist_bool_fun$)
(declare-fun uub$ (Bool) A_llist_bool_fun_a_llist_bool_fun_fun$)
(declare-fun uuc$ (A_llist_bool_fun$) A_llist_bool_fun_a_llist_bool_fun_fun$)
(declare-fun uud$ (A_llist_bool_fun$) A_llist_bool_fun_a_llist_bool_fun_fun$)
(declare-fun uue$ (A_llist_bool_fun$) A_llist_bool_fun_a_llist_bool_fun_fun$)
(declare-fun uuf$ (A_llist_bool_fun$) A_llist_bool_fun_a_llist_bool_fun_fun$)
(declare-fun lSup$ () A_llist_set_a_llist_fun$)
(declare-fun compact$ (A_llist_set_a_llist_fun$) A_llist_a_llist_bool_fun_fun_a_llist_bool_fun_fun$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_bool_fun_a_llist_bool_fun_fun$ A_llist_bool_fun$) A_llist_bool_fun$)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$) A_llist_bool_fun$)
(declare-fun admissible$ (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_bool_fun$) Bool)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uu$ ?v0) (not (fun_app$ (fun_app$a lprefix$ (lCons$ x$ xs$)) (lCons$ x$ ?v0)))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uua$ ?v0) (not (fun_app$ (fun_app$a lprefix$ (lCons$ x$ xs$)) ?v0))) :pattern ((fun_app$ uua$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$b (uuc$ ?v0) ?v1) ?v2) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$b (uuc$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$b (uud$ ?v0) ?v1) ?v2) (=> (fun_app$ ?v1 ?v2) (fun_app$ ?v0 ?v2))) :pattern ((fun_app$ (fun_app$b (uud$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$b (uuf$ ?v0) ?v1) ?v2) (and (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$b (uuf$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$b (uue$ ?v0) ?v1) ?v2) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$b (uue$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 Bool) (?v1 A_llist_bool_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$b (uub$ ?v0) ?v1) ?v2) (=> ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$b (uub$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (not (admissible$ lSup$ lprefix$ uu$)) :named a7))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v0)) :named a8))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v0)) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a10))
(assert (! (admissible$ lSup$ lprefix$ uua$) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$ (fun_app$a lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$ (fun_app$a lprefix$ ?v1) ?v3))) :pattern ((fun_app$ (fun_app$a lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))) :named a12))
(assert (! (fun_app$ (fun_app$c (compact$ lSup$) lprefix$) (lCons$ x$ xs$)) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (fun_app$a lprefix$ (lCons$ ?v0 ?v1)) ?v2) (exists ((?v3 A_llist$)) (and (= ?v2 (lCons$ ?v0 ?v3)) (fun_app$ (fun_app$a lprefix$ ?v1) ?v3))))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v2) ?v1)) (or (fun_app$ (fun_app$a lprefix$ ?v0) ?v2) (fun_app$ (fun_app$a lprefix$ ?v2) ?v0)))) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v2)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v2))) :named a18))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v2)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v2))) :named a19))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A$)) (=> (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ (lCons$ ?v2 ?v0)) (lCons$ ?v2 ?v1)))) :named a20))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (fun_app$ (fun_app$c (compact$ lSup$) lprefix$) ?v0) (fun_app$ (fun_app$c (compact$ lSup$) lprefix$) (lCons$ ?v1 ?v0)))) :named a21))
(assert (! (forall ((?v0 Bool) (?v1 A_llist_set_a_llist_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_bool_fun$)) (=> (=> ?v0 (admissible$ ?v1 ?v2 ?v3)) (admissible$ ?v1 ?v2 (fun_app$b (uub$ ?v0) ?v3)))) :named a22))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist_bool_fun$) (?v3 A_llist_bool_fun$)) (=> (and (admissible$ ?v0 ?v1 (fun_app$b (uuc$ ?v2) ?v3)) (admissible$ ?v0 ?v1 (fun_app$b (uud$ ?v2) ?v3))) (admissible$ ?v0 ?v1 (fun_app$b (uue$ ?v2) ?v3)))) :named a23))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist_bool_fun$) (?v3 A_llist_bool_fun$)) (=> (and (admissible$ ?v0 ?v1 ?v2) (admissible$ ?v0 ?v1 ?v3)) (admissible$ ?v0 ?v1 (fun_app$b (uuf$ ?v2) ?v3)))) :named a24))
(check-sat)
;(get-unsat-core)
