; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 616
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun y$ () A$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun zs$ () A_llist$)
(declare-fun xsa$ () A_llist$)
(declare-fun ysa$ () A_llist$)
(declare-fun zsa$ () A_llist$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lfilter$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun lmember$ (A$ A_llist$) Bool)
(declare-fun pred_llist$ (A_bool_fun$ A_llist$) Bool)
(declare-fun lstrict_prefix$ (A_llist$ A_llist$) Bool)
(assert (! (not (= (lfilter$ p$ xsa$) (lCons$ y$ (lappend$ ysa$ zsa$)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a1))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lfilter$ ?v0 (lfilter$ ?v0 ?v1)) (lfilter$ ?v0 ?v1))) :named a2))
(assert (! (= (lfilter$ p$ xsa$) (lappend$ (lCons$ y$ ysa$) zsa$)) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (lappend$ (lCons$ ?v0 ?v1) ?v2) (lCons$ ?v0 (lappend$ ?v1 ?v2))) :pattern ((lappend$ (lCons$ ?v0 ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (lfilter$ ?v0 (lCons$ ?v1 ?v2)) (ite (fun_app$ ?v0 ?v1) (lCons$ ?v1 (lfilter$ ?v0 ?v2)) (lfilter$ ?v0 ?v2))) :pattern ((lfilter$ ?v0 (lCons$ ?v1 ?v2))))) :named a5))
(assert (! (= (lfilter$ p$ xs$) (lappend$ ys$ zs$)) :named a6))
(assert (! (lfinite$ ysa$) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a8))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (=> (not (fun_app$ ?v0 ?v1)) (= (lfilter$ ?v0 (lCons$ ?v1 ?v2)) (lfilter$ ?v0 ?v2))) :pattern ((lfilter$ ?v0 (lCons$ ?v1 ?v2))))) :named a9))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (=> (fun_app$ ?v0 ?v1) (= (lfilter$ ?v0 (lCons$ ?v1 ?v2)) (lCons$ ?v1 (lfilter$ ?v0 ?v2)))) :pattern ((lfilter$ ?v0 (lCons$ ?v1 ?v2))))) :named a10))
(assert (! (= (lfilter$ p$ xsa$) (lappend$ (lCons$ y$ ysa$) zsa$)) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (= (lfilter$ p$ ?v0) (lappend$ ysa$ ?v1)) (exists ((?v2 A_llist$) (?v3 A_llist$)) (and (= ?v0 (lappend$ ?v2 ?v3)) (and (lfinite$ ?v2) (and (= ysa$ (lfilter$ p$ ?v2)) (= ?v1 (lfilter$ p$ ?v3)))))))) :named a12))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2)) (and (fun_app$ ?v0 ?v1) (pred_llist$ ?v0 ?v2))) :pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2))))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (lmember$ ?v0 (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (lmember$ ?v0 ?v2))) :pattern ((lmember$ ?v0 (lCons$ ?v1 ?v2))))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (lstrict_prefix$ (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (lstrict_prefix$ ?v1 ?v3))) :pattern ((lstrict_prefix$ (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3))))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (= (lfilter$ p$ ?v0) (lappend$ ysa$ ?v1)) (exists ((?v2 A_llist$) (?v3 A_llist$)) (and (= ?v0 (lappend$ ?v2 ?v3)) (and (lfinite$ ?v2) (and (= ysa$ (lfilter$ p$ ?v2)) (= ?v1 (lfilter$ p$ ?v3)))))))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$) (?v2 A_llist$)) (=> (lfinite$ ?v0) (= (lfilter$ ?v1 (lappend$ ?v0 ?v2)) (lappend$ (lfilter$ ?v1 ?v0) (lfilter$ ?v1 ?v2))))) :named a17))
(check-sat)
;(get-unsat-core)
