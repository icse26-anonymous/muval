; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 580
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort B_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort B_llist_b_llist_fun$ 0)
(declare-sort A_llist_b_llist_prod_set$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_llist_prod_bool_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ 0)
(declare-codatatypes () ((B_llist$ (lNil$) (lCons$ (lhd$ B$) (ltl$ B_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))))
(declare-datatypes () ((A_llist_b_llist_prod$ (pair$ (fst$ A_llist$) (snd$ B_llist$)))))
(declare-fun y$ () A_llist_b_llist_prod_set$)
(declare-fun uu$ () A_llist_a_llist_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ya$ () A_llist_b_llist_prod_set$)
(declare-fun ys$ () B_llist$)
(declare-fun inf$ (A_llist_b_llist_prod_set$ A_llist_b_llist_prod_set$) A_llist_b_llist_prod_set$)
(declare-fun uua$ () B_llist_b_llist_fun$)
(declare-fun uub$ () A_llist_b_llist_bool_fun_fun$)
(declare-fun chain$ (A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ A_llist_b_llist_prod_set$) Bool)
(declare-fun image$ (A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ A_llist_b_llist_prod_set$) A_llist_b_llist_prod_set$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lnull$a (B_llist$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun collect$ (A_llist_b_llist_prod_bool_fun$) A_llist_b_llist_prod_set$)
(declare-fun fun_app$ (B_llist_b_llist_fun$ B_llist$) B_llist$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun member$a (B_llist$ B_llist_set$) Bool)
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$b (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun fun_app$c (A_llist_b_llist_bool_fun_fun$ A_llist$) B_llist_bool_fun$)
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$e (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$f (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun lprefix$a () B_llist_b_llist_bool_fun_fun$)
(declare-fun map_prod$ (A_llist_a_llist_fun$ B_llist_b_llist_fun$) A_llist_b_llist_prod_a_llist_b_llist_prod_fun$)
(declare-fun rel_prod$ (A_llist_a_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$) A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$)
(declare-fun case_prod$ (A_llist_b_llist_bool_fun_fun$) A_llist_b_llist_prod_bool_fun$)
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$ uua$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a uu$ ?v0) (ltl$a ?v0)) :pattern ((fun_app$a uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$)) (! (= (fun_app$b (fun_app$c uub$ ?v0) ?v1) (and (not (lnull$ ?v0)) (not (lnull$a ?v1)))) :pattern ((fun_app$b (fun_app$c uub$ ?v0) ?v1)))) :named a2))
(assert (! (not (chain$ (rel_prod$ lprefix$ lprefix$a) (image$ (map_prod$ uu$ uua$) (inf$ ya$ (collect$ (case_prod$ uub$)))))) :named a3))
(assert (! (not (lnull$ xs$)) :named a4))
(assert (! (not (lnull$a ys$)) :named a5))
(assert (! (forall ((?v0 A_llist$)) (fun_app$d (fun_app$e lprefix$ ?v0) ?v0)) :named a6))
(assert (! (forall ((?v0 B_llist$)) (fun_app$b (fun_app$f lprefix$a ?v0) ?v0)) :named a7))
(assert (! (forall ((?v0 A_llist$)) (fun_app$d (fun_app$e lprefix$ ?v0) ?v0)) :named a8))
(assert (! (forall ((?v0 B_llist$)) (fun_app$b (fun_app$f lprefix$a ?v0) ?v0)) :named a9))
(assert (! (chain$ (rel_prod$ lprefix$ lprefix$a) ya$) :named a10))
(assert (! (chain$ (rel_prod$ lprefix$ lprefix$a) y$) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$a ?v1))) false)) false)) :named a13))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$ ?v1))) false)) false)) :named a14))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a15))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a16))
(assert (! (forall ((?v0 B_llist_set$)) (=> (and (=> (forall ((?v1 B_llist$)) (=> (member$a ?v1 ?v0) (lnull$a ?v1))) false) (=> (not (forall ((?v1 B_llist$)) (=> (member$a ?v1 ?v0) (lnull$a ?v1)))) false)) false)) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a18))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a19))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)) :named a20))
(assert (! (forall ((?v0 B_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false)) :named a21))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$d (fun_app$e lprefix$ ?v0) ?v1) (fun_app$d (fun_app$e lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a22))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (fun_app$b (fun_app$f lprefix$a ?v0) ?v1) (fun_app$b (fun_app$f lprefix$a ?v1) ?v0)) (= ?v0 ?v1))) :named a23))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$d (fun_app$e lprefix$ ?v0) ?v1) (fun_app$d (fun_app$e lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a24))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (fun_app$b (fun_app$f lprefix$a ?v0) ?v1) (fun_app$b (fun_app$f lprefix$a ?v1) ?v0)) (= ?v0 ?v1))) :named a25))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$d (fun_app$e lprefix$ ?v0) ?v1) (fun_app$d (fun_app$e lprefix$ ?v2) ?v1)) (or (fun_app$d (fun_app$e lprefix$ ?v0) ?v2) (fun_app$d (fun_app$e lprefix$ ?v2) ?v0)))) :named a26))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$b (fun_app$f lprefix$a ?v0) ?v1) (fun_app$b (fun_app$f lprefix$a ?v2) ?v1)) (or (fun_app$b (fun_app$f lprefix$a ?v0) ?v2) (fun_app$b (fun_app$f lprefix$a ?v2) ?v0)))) :named a27))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$d (fun_app$e lprefix$ ?v0) ?v1) (fun_app$d (fun_app$e lprefix$ ?v1) ?v2)) (fun_app$d (fun_app$e lprefix$ ?v0) ?v2))) :named a28))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$b (fun_app$f lprefix$a ?v0) ?v1) (fun_app$b (fun_app$f lprefix$a ?v1) ?v2)) (fun_app$b (fun_app$f lprefix$a ?v0) ?v2))) :named a29))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$d (fun_app$e lprefix$ ?v0) ?v1) (fun_app$d (fun_app$e lprefix$ ?v1) ?v2)) (fun_app$d (fun_app$e lprefix$ ?v0) ?v2))) :named a30))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$b (fun_app$f lprefix$a ?v0) ?v1) (fun_app$b (fun_app$f lprefix$a ?v1) ?v2)) (fun_app$b (fun_app$f lprefix$a ?v0) ?v2))) :named a31))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$d (fun_app$e lprefix$ ?v0) ?v1) (not (lnull$ ?v0))) (not (lnull$ ?v1)))) :named a32))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (fun_app$b (fun_app$f lprefix$a ?v0) ?v1) (not (lnull$a ?v0))) (not (lnull$a ?v1)))) :named a33))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$d (fun_app$e lprefix$ ?v0) ?v1) (lnull$ ?v1)) (lnull$ ?v0))) :named a34))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (fun_app$b (fun_app$f lprefix$a ?v0) ?v1) (lnull$a ?v1)) (lnull$a ?v0))) :named a35))
(check-sat)
;(get-unsat-core)
