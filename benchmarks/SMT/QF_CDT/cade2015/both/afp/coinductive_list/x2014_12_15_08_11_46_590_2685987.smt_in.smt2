; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 73
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort B_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_b_llist_fun$ 0)
(declare-sort B_llist_a_llist_fun$ 0)
(declare-sort B_llist_b_llist_fun$ 0)
(declare-sort A_llist_set_a_llist_fun$ 0)
(declare-sort B_llist_set_b_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))))
(declare-fun f$ () A_b_fun$)
(declare-fun uu$ () A_llist_a_llist_fun$)
(declare-fun uua$ () B_llist_b_llist_fun$)
(declare-fun uub$ (A$) A_llist_a_llist_fun$)
(declare-fun uuc$ (B$) B_llist_b_llist_fun$)
(declare-fun lSup$ () A_llist_set_a_llist_fun$)
(declare-fun lmap$ (A_b_fun$) A_llist_b_llist_fun$)
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$) Bool)
(declare-fun lSup$a () B_llist_set_b_llist_fun$)
(declare-fun lmap$a (A_a_fun$) A_llist_a_llist_fun$)
(declare-fun lmap$b (B_a_fun$) B_llist_a_llist_fun$)
(declare-fun lmap$c (B_b_fun$) B_llist_b_llist_fun$)
(declare-fun mcont$ (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ B_llist_set_b_llist_fun$ B_llist_b_llist_bool_fun_fun$ A_llist_b_llist_fun$) Bool)
(declare-fun chain$a (B_llist_b_llist_bool_fun_fun$ B_llist_set$) Bool)
(declare-fun mcont$a (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$) Bool)
(declare-fun mcont$b (B_llist_set_b_llist_fun$ B_llist_b_llist_bool_fun_fun$ B_llist_set_b_llist_fun$ B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_fun$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$ (B_llist_b_llist_fun$ B_llist$) B_llist$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun member$a (B_llist$ B_llist_set$) Bool)
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$d (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun fun_app$e (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun fun_app$f (A_llist_b_llist_fun$ A_llist$) B_llist$)
(declare-fun fun_app$g (A_llist_set_a_llist_fun$ A_llist_set$) A_llist$)
(declare-fun fun_app$h (B_llist_set_b_llist_fun$ B_llist_set$) B_llist$)
(declare-fun lprefix$a () B_llist_b_llist_bool_fun_fun$)
(declare-fun monotone$ (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$) Bool)
(declare-fun monotone$a (B_llist_b_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ B_llist_a_llist_fun$) Bool)
(declare-fun monotone$b (B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_fun$) Bool)
(declare-fun monotone$c (A_llist_a_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ A_llist_b_llist_fun$) Bool)
(declare-fun lub_singleton$ (A_llist_set_a_llist_fun$) Bool)
(declare-fun lub_singleton$a (B_llist_set_b_llist_fun$) Bool)
(declare-fun partial_function_definitions$ (A_llist_a_llist_bool_fun_fun$ A_llist_set_a_llist_fun$) Bool)
(declare-fun partial_function_definitions$a (B_llist_b_llist_bool_fun_fun$ B_llist_set_b_llist_fun$) Bool)
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$ uua$ ?v0) (ltl$a ?v0)) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a uu$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$a uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (! (= (fun_app$ (uuc$ ?v0) ?v1) (lCons$a ?v0 ?v1)) :pattern ((fun_app$ (uuc$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$a (uub$ ?v0) ?v1) (lCons$ ?v0 ?v1)) :pattern ((fun_app$a (uub$ ?v0) ?v1)))) :named a3))
(assert (! (not (mcont$ lSup$ lprefix$ lSup$a lprefix$a (lmap$ f$))) :named a4))
(assert (! (forall ((?v0 A_llist$)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v0)) :named a5))
(assert (! (forall ((?v0 B_llist$)) (fun_app$d (fun_app$e lprefix$a ?v0) ?v0)) :named a6))
(assert (! (forall ((?v0 A_llist$)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v0)) :named a7))
(assert (! (forall ((?v0 B_llist$)) (fun_app$d (fun_app$e lprefix$a ?v0) ?v0)) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (fun_app$d (fun_app$e lprefix$a ?v0) ?v1) (fun_app$d (fun_app$e lprefix$a ?v1) ?v0)) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (fun_app$d (fun_app$e lprefix$a ?v0) ?v1) (fun_app$d (fun_app$e lprefix$a ?v1) ?v0)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v2) ?v1)) (or (fun_app$b (fun_app$c lprefix$ ?v0) ?v2) (fun_app$b (fun_app$c lprefix$ ?v2) ?v0)))) :named a13))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$d (fun_app$e lprefix$a ?v0) ?v1) (fun_app$d (fun_app$e lprefix$a ?v2) ?v1)) (or (fun_app$d (fun_app$e lprefix$a ?v0) ?v2) (fun_app$d (fun_app$e lprefix$a ?v2) ?v0)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v2)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v2))) :named a15))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$d (fun_app$e lprefix$a ?v0) ?v1) (fun_app$d (fun_app$e lprefix$a ?v1) ?v2)) (fun_app$d (fun_app$e lprefix$a ?v0) ?v2))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v2)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v2))) :named a17))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$d (fun_app$e lprefix$a ?v0) ?v1) (fun_app$d (fun_app$e lprefix$a ?v1) ?v2)) (fun_app$d (fun_app$e lprefix$a ?v0) ?v2))) :named a18))
(assert (! (mcont$a lSup$ lprefix$ lSup$ lprefix$ uu$) :named a19))
(assert (! (mcont$b lSup$a lprefix$a lSup$a lprefix$a uua$) :named a20))
(assert (! (forall ((?v0 A$)) (mcont$a lSup$ lprefix$ lSup$ lprefix$ (uub$ ?v0))) :named a21))
(assert (! (forall ((?v0 B$)) (mcont$b lSup$a lprefix$a lSup$a lprefix$a (uuc$ ?v0))) :named a22))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$) (?v1 B_llist_b_llist_bool_fun_fun$) (?v2 B_llist_set_b_llist_fun$) (?v3 B_llist_b_llist_bool_fun_fun$) (?v4 B_llist_b_llist_fun$) (?v5 B_llist$) (?v6 B_llist$)) (=> (and (mcont$b ?v0 ?v1 ?v2 ?v3 ?v4) (fun_app$d (fun_app$e ?v1 ?v5) ?v6)) (fun_app$d (fun_app$e ?v3 (fun_app$ ?v4 ?v5)) (fun_app$ ?v4 ?v6)))) :named a23))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist_set_a_llist_fun$) (?v3 A_llist_a_llist_bool_fun_fun$) (?v4 A_llist_a_llist_fun$) (?v5 A_llist$) (?v6 A_llist$)) (=> (and (mcont$a ?v0 ?v1 ?v2 ?v3 ?v4) (fun_app$b (fun_app$c ?v1 ?v5) ?v6)) (fun_app$b (fun_app$c ?v3 (fun_app$a ?v4 ?v5)) (fun_app$a ?v4 ?v6)))) :named a24))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 B_llist_set_b_llist_fun$) (?v3 B_llist_b_llist_bool_fun_fun$) (?v4 A_llist_b_llist_fun$) (?v5 A_llist$) (?v6 A_llist$)) (=> (and (mcont$ ?v0 ?v1 ?v2 ?v3 ?v4) (fun_app$b (fun_app$c ?v1 ?v5) ?v6)) (fun_app$d (fun_app$e ?v3 (fun_app$f ?v4 ?v5)) (fun_app$f ?v4 ?v6)))) :named a25))
(assert (! (partial_function_definitions$ lprefix$ lSup$) :named a26))
(assert (! (partial_function_definitions$a lprefix$a lSup$a) :named a27))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (fun_app$b (fun_app$c lprefix$ ?v2) ?v1)))) (fun_app$b (fun_app$c lprefix$ (fun_app$g lSup$ ?v0)) ?v1))) :named a28))
(assert (! (forall ((?v0 B_llist_set$) (?v1 B_llist$)) (=> (and (chain$a lprefix$a ?v0) (forall ((?v2 B_llist$)) (=> (member$a ?v2 ?v0) (fun_app$d (fun_app$e lprefix$a ?v2) ?v1)))) (fun_app$d (fun_app$e lprefix$a (fun_app$h lSup$a ?v0)) ?v1))) :named a29))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (fun_app$b (fun_app$c lprefix$ ?v2) ?v1)))) (fun_app$b (fun_app$c lprefix$ (fun_app$g lSup$ ?v0)) ?v1))) :named a30))
(assert (! (forall ((?v0 B_llist_set$) (?v1 B_llist$)) (=> (and (chain$a lprefix$a ?v0) (forall ((?v2 B_llist$)) (=> (member$a ?v2 ?v0) (fun_app$d (fun_app$e lprefix$a ?v2) ?v1)))) (fun_app$d (fun_app$e lprefix$a (fun_app$h lSup$a ?v0)) ?v1))) :named a31))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (member$ ?v1 ?v0)) (fun_app$b (fun_app$c lprefix$ ?v1) (fun_app$g lSup$ ?v0)))) :named a32))
(assert (! (forall ((?v0 B_llist_set$) (?v1 B_llist$)) (=> (and (chain$a lprefix$a ?v0) (member$a ?v1 ?v0)) (fun_app$d (fun_app$e lprefix$a ?v1) (fun_app$h lSup$a ?v0)))) :named a33))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (member$ ?v1 ?v0)) (fun_app$b (fun_app$c lprefix$ ?v1) (fun_app$g lSup$ ?v0)))) :named a34))
(assert (! (forall ((?v0 B_llist_set$) (?v1 B_llist$)) (=> (and (chain$a lprefix$a ?v0) (member$a ?v1 ?v0)) (fun_app$d (fun_app$e lprefix$a ?v1) (fun_app$h lSup$a ?v0)))) :named a35))
(assert (! (lub_singleton$ lSup$) :named a36))
(assert (! (lub_singleton$a lSup$a) :named a37))
(assert (! (forall ((?v0 A_a_fun$)) (monotone$ lprefix$ lprefix$ (lmap$a ?v0))) :named a38))
(assert (! (forall ((?v0 B_a_fun$)) (monotone$a lprefix$a lprefix$ (lmap$b ?v0))) :named a39))
(assert (! (forall ((?v0 B_b_fun$)) (monotone$b lprefix$a lprefix$a (lmap$c ?v0))) :named a40))
(assert (! (forall ((?v0 A_b_fun$)) (monotone$c lprefix$ lprefix$a (lmap$ ?v0))) :named a41))
(check-sat)
;(get-unsat-core)
