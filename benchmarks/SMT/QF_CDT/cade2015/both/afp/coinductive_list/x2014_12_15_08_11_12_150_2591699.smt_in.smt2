; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 477
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun y$ () A_llist_set$)
(declare-fun uu$ () A_llist_a_llist_fun$)
(declare-fun bot$ () A_llist_set$)
(declare-fun inf$ (A_llist_set$ A_llist_set$) A_llist_set$)
(declare-fun uua$ () A_llist_bool_fun$)
(declare-fun lSup$ (A_llist_set$) A_llist$)
(declare-fun image$ (A_llist_a_llist_fun$ A_llist_set$) A_llist_set$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun insert$ (A_llist$ A_llist_set$) A_llist_set$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$) A_llist$)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uua$ ?v0) (not (lnull$ ?v0))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a uu$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$a uu$ ?v0)))) :named a1))
(assert (! (not (= (ltl$ (lSup$ y$)) (lSup$ (insert$ lNil$ (image$ uu$ (inf$ y$ (collect$ uua$))))))) :named a2))
(assert (! (forall ((?v0 A_llist_set$)) (= (lnull$ (lSup$ ?v0)) (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))))) :named a3))
(assert (! (not (= y$ bot$)) :named a4))
(assert (! (forall ((?v0 A_llist_set$)) (= (ltl$ (lSup$ ?v0)) (lSup$ (image$ uu$ (inf$ ?v0 (collect$ uua$)))))) :named a5))
(assert (! (forall ((?v0 A_llist_set$)) (= (not (lnull$ (lSup$ ?v0))) (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)))))) :named a6))
(assert (! (forall ((?v0 A_llist_set$)) (= (lSup$ (insert$ lNil$ ?v0)) (lSup$ ?v0))) :named a7))
(assert (! (forall ((?v0 A_llist$)) (! (= (lnull$ ?v0) (= ?v0 lNil$)) :pattern ((lnull$ ?v0)))) :named a8))
(assert (! (= (ltl$ lNil$) lNil$) :named a9))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a11))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)) :named a12))
(assert (! (forall ((?v0 A_llist$)) (=> (= ?v0 lNil$) (lnull$ ?v0))) :named a13))
(assert (! (forall ((?v0 A_llist_set$)) (! (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))) (= (lSup$ ?v0) lNil$)) :pattern ((lSup$ ?v0)))) :named a14))
(assert (! (forall ((?v0 A_llist_set$)) (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))) (lnull$ (lSup$ ?v0)))) :named a15))
(assert (! (forall ((?v0 A_llist_set$)) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)))) (not (lnull$ (lSup$ ?v0))))) :named a16))
(assert (! (forall ((?v0 A_llist$)) (=> (lnull$ ?v0) (= ?v0 lNil$))) :named a17))
(assert (! (forall ((?v0 A_llist$)) (=> (lnull$ ?v0) (lnull$ (ltl$ ?v0)))) :named a18))
(assert (! (lnull$ lNil$) :named a19))
(check-sat)
;(get-unsat-core)
