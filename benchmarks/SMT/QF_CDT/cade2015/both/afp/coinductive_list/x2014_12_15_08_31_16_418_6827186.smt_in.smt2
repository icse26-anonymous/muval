; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 553
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun a$ () A$)
(declare-fun p$ () A_bool_fun$)
(declare-fun x$ () A$)
(declare-fun xs$ () A_llist$)
(declare-fun xs$a () A_llist$)
(declare-fun xsa$ () A_llist$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lfilter$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun ldistinct$ (A_llist$) Bool)
(assert (! (not (ldistinct$ (fun_app$ (lfilter$ p$) xs$))) :named a0))
(assert (! (ldistinct$ (fun_app$ (lfilter$ p$) xsa$)) :named a1))
(assert (! (fun_app$a p$ a$) :named a2))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$ (lfilter$ ?v0) (fun_app$ (lfilter$ ?v0) ?v1)) (fun_app$ (lfilter$ ?v0) ?v1))) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (ldistinct$ ?v0) (ldistinct$ (fun_app$ (lfilter$ ?v1) ?v0)))) :named a4))
(assert (! (ldistinct$ (fun_app$ (lfilter$ p$) xsa$)) :named a5))
(assert (! (= xsa$ (lCons$ x$ xs$)) :named a6))
(assert (! (ldistinct$ (fun_app$ (lfilter$ p$) xs$a)) :named a7))
(assert (! (= (ldistinct$ lNil$) true) :named a8))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$ (lfilter$ ?v0) lNil$) lNil$) :pattern ((lfilter$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (lfilter$ ?v0) (lCons$ ?v1 ?v2)) (ite (fun_app$a ?v0 ?v1) (lCons$ ?v1 (fun_app$ (lfilter$ ?v0) ?v2)) (fun_app$ (lfilter$ ?v0) ?v2))) :pattern ((fun_app$ (lfilter$ ?v0) (lCons$ ?v1 ?v2))))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (ldistinct$ ?v0) (ldistinct$ (ldropn$ ?v1 ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 Enat$)) (=> (ldistinct$ ?v0) (ldistinct$ (ldrop$ ?v1 ?v0)))) :named a12))
(assert (! (ldistinct$ lNil$) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (ldistinct$ ?v0) (lprefix$ ?v1 ?v0)) (ldistinct$ ?v1))) :named a14))
(assert (! (=> (forall ((?v0 A$) (?v1 A_llist$)) (=> (= xsa$ (lCons$ ?v0 ?v1)) false)) false) :named a15))
(check-sat)
;(get-unsat-core)
