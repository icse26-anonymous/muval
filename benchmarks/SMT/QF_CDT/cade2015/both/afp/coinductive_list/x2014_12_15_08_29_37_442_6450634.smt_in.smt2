; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 631
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lfilter$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun gen_lset$ (A_set$) A_llist_a_set_fun$)
(declare-fun pred_llist$ (A_bool_fun$ A_llist$) Bool)
(declare-fun finite_lprefix$ (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$ (A_llist$ A_llist$) Bool)
(assert (! (not (= (fun_app$ (lfilter$ p$) xs$) lNil$)) :named a0))
(assert (! (lprefix$ (fun_app$ (lfilter$ p$) xs$) lNil$) :named a1))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$ (lfilter$ ?v0) lNil$) lNil$) :pattern ((lfilter$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A$)) (=> (member$ ?v0 (lset$ xs$)) (not (fun_app$a p$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A_llist$)) (! (= (lprefix$ lNil$ ?v0) true) :pattern ((lprefix$ lNil$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ lNil$ ?v0)) :named a5))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a6))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a7))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$b (lmember$ ?v0) lNil$) false) :pattern ((lmember$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$c (gen_lset$ ?v0) lNil$) ?v0) :pattern ((gen_lset$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$b (finite_lprefix$ ?v0) lNil$) (= ?v0 lNil$)) :pattern ((finite_lprefix$ ?v0)))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$b (finite_lprefix$ lNil$) ?v0) true) :pattern ((fun_app$b (finite_lprefix$ lNil$) ?v0)))) :named a11))
(assert (! (= (lstrict_prefix$ lNil$ lNil$) false) :named a12))
(assert (! (forall ((?v0 A_bool_fun$)) (pred_llist$ ?v0 lNil$)) :named a13))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (= (fun_app$ (lfilter$ ?v0) ?v1) lNil$) (forall ((?v2 A$)) (=> (member$ ?v2 (lset$ ?v1)) (not (fun_app$a ?v0 ?v2)))))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$ ?v0 (lset$ ?v1)) (fun_app$b (lmember$ ?v0) ?v1))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (lstrict_prefix$ ?v0 ?v1) (and (lprefix$ ?v0 ?v1) (not (= ?v0 ?v1)))) :pattern ((lstrict_prefix$ ?v0 ?v1)))) :named a16))
(check-sat)
;(get-unsat-core)
