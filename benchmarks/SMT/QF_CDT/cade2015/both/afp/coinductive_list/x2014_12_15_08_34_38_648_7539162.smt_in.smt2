; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 641
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-codatatypes () ((Nat_llist$ (lNil$) (lCons$ (lhd$ Nat$) (ltl$ Nat_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))
  (Nat_list$ (nil$) (cons$ (hd$ Nat$) (tl$ Nat_list$)))))
(declare-fun ma$ () Nat$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun upt$ (Nat$ Nat$) Nat_list$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun plus$ (Nat$) Nat_nat_fun$)
(declare-fun zero$ () Nat$)
(declare-fun ltake$ (Enat$ Nat_llist$) Nat_llist$)
(declare-fun fun_app$ (Nat_nat_fun$ Nat$) Nat$)
(declare-fun iterates$ (Nat_nat_fun$ Nat$) Nat_llist$)
(declare-fun llist_of$ (Nat_list$) Nat_llist$)
(assert (! (not (= (ltake$ (enat$ zero$) (iterates$ suc$ ma$)) (llist_of$ (upt$ ma$ (fun_app$ (plus$ zero$) ma$))))) :named a0))
(assert (! (forall ((?v0 Nat_list$) (?v1 Nat_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a1))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (=> (forall ((?v2 Nat$)) (= (ltake$ (enat$ ?v2) ?v0) (ltake$ (enat$ ?v2) ?v1))) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (plus$ ?v0) (fun_app$ suc$ ?v1)) (fun_app$ suc$ (fun_app$ (plus$ ?v0) ?v1))) :pattern ((fun_app$ (plus$ ?v0) (fun_app$ suc$ ?v1))))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$ (plus$ ?v0) ?v1) zero$) (and (= ?v0 zero$) (= ?v1 zero$)))) :named a4))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (plus$ ?v0) zero$) ?v0) :pattern ((plus$ ?v0)))) :named a5))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (plus$ ?v0) zero$) ?v0)) :named a6))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (plus$ ?v0) zero$) ?v0)) :named a7))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (plus$ zero$) ?v0) ?v0)) :named a8))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (plus$ zero$) ?v0) ?v0)) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$ (plus$ ?v0) ?v1) (fun_app$ suc$ zero$)) (or (and (= ?v0 (fun_app$ suc$ zero$)) (= ?v1 zero$)) (and (= ?v0 zero$) (= ?v1 (fun_app$ suc$ zero$)))))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$ suc$ zero$) (fun_app$ (plus$ ?v0) ?v1)) (or (and (= ?v0 (fun_app$ suc$ zero$)) (= ?v1 zero$)) (and (= ?v0 zero$) (= ?v1 (fun_app$ suc$ zero$)))))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$ (plus$ ?v0) ?v1) (fun_app$ (plus$ ?v0) ?v2)) (= ?v1 ?v2))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$ (plus$ ?v0) ?v1) (fun_app$ (plus$ ?v2) ?v1)) (= ?v0 ?v2))) :named a14))
(check-sat)
;(get-unsat-core)
