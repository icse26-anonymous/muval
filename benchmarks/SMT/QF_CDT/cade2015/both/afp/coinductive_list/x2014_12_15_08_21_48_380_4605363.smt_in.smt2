; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 569
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort A_b_prod_set$ 0)
(declare-sort A_b_prod_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$a) (lCons$a (lhd$a A_b_prod$) (ltl$a A_b_prod_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))))
(declare-fun x$ () A$)
(declare-fun y$ () B$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun lset$a (A_b_prod_llist$) A_b_prod_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_b_prod_bool_fun$ A_b_prod$) Bool)
(declare-fun lmember$ (A$ A_llist$) Bool)
(declare-fun member$a (A_b_prod$ A_b_prod_set$) Bool)
(declare-fun lmember$a (A_b_prod$ A_b_prod_llist$) Bool)
(assert (! (not (member$ x$ (lset$ xs$))) :named a0))
(assert (! (member$a (pair$ x$ y$) (lset$a (lzip$ xs$ ys$))) :named a1))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$ ?v0 (lset$ ?v1)) (lmember$ ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$)) (= (member$a ?v0 (lset$a ?v1)) (lmember$a ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_b_prod$)) (=> (forall ((?v1 A$) (?v2 B$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a6))
(assert (! (forall ((?v0 A_b_prod$)) (exists ((?v1 A$) (?v2 B$)) (= ?v0 (pair$ ?v1 ?v2)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (=> (and (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a8))
(assert (! (forall ((?v0 A_b_prod$)) (=> (forall ((?v1 A$) (?v2 B$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a9))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A_b_prod$)) (=> (forall ((?v2 A$) (?v3 B$)) (fun_app$ ?v0 (pair$ ?v2 ?v3))) (fun_app$ ?v0 ?v1))) :named a10))
(check-sat)
;(get-unsat-core)
