; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 372
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort B_set$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_b_fun$ 0)
(declare-sort B_a_llist_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_set_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun g$ () A_llist_b_fun$)
(declare-fun x$ () A$)
(declare-fun y$ () A_llist_set$)
(declare-fun xs$ () A_llist$)
(declare-fun bot$ () A_llist_set$)
(declare-fun lub$ (B_set$) B$)
(declare-fun ord$ (B$) B_bool_fun$)
(declare-fun bot$a () B$)
(declare-fun bot$b () B_set$)
(declare-fun lSup$ () A_llist_set_a_llist_fun$)
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$) Bool)
(declare-fun image$ (A_llist_b_fun$ A_llist_set$) B_set$)
(declare-fun image$a (B_a_llist_fun$ B_set$) A_llist_set$)
(declare-fun image$b (B_b_fun$ B_set$) B_set$)
(declare-fun image$c (A_llist_a_llist_fun$ A_llist_set$) A_llist_set$)
(declare-fun member$ (B$ B_set$) Bool)
(declare-fun collect$ (B_bool_fun$) B_set$)
(declare-fun fun_app$ (A_llist_b_fun$ A_llist$) B$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun collect$a (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$a (A_llist_set_a_llist_fun$ A_llist_set$) A_llist$)
(declare-fun fun_app$b (B_bool_fun$ B$) Bool)
(declare-fun fun_app$c (B_a_llist_fun$ B$) A_llist$)
(declare-fun fun_app$d (B_b_fun$ B$) B$)
(declare-fun fun_app$e (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$f (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lub_singleton$ (A_llist_set_a_llist_fun$) Bool)
(assert (! (not (= (fun_app$ g$ (fun_app$a lSup$ y$)) (lub$ (image$ g$ y$)))) :named a0))
(assert (! (not (= y$ bot$)) :named a1))
(assert (! (forall ((?v0 B$)) (fun_app$b (ord$ bot$a) ?v0)) :named a2))
(assert (! (forall ((?v0 A_llist$) (?v1 B_a_llist_fun$) (?v2 B$) (?v3 B_set$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v2)) (member$ ?v2 ?v3)) (member$a ?v0 (image$a ?v1 ?v3)))) :named a3))
(assert (! (forall ((?v0 B$) (?v1 B_b_fun$) (?v2 B$) (?v3 B_set$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (image$b ?v1 ?v3)))) :named a4))
(assert (! (forall ((?v0 B$) (?v1 A_llist_b_fun$) (?v2 A_llist$) (?v3 A_llist_set$)) (=> (and (= ?v0 (fun_app$ ?v1 ?v2)) (member$a ?v2 ?v3)) (member$ ?v0 (image$ ?v1 ?v3)))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$) (?v3 A_llist_set$)) (=> (and (= ?v0 (fun_app$e ?v1 ?v2)) (member$a ?v2 ?v3)) (member$a ?v0 (image$c ?v1 ?v3)))) :named a6))
(assert (! (=> (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$a (lCons$ ?v0 ?v1) y$) false)) false) :named a7))
(assert (! (member$a (lCons$ x$ xs$) y$) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 B_a_llist_fun$) (?v2 B_set$)) (= (member$a ?v0 (image$a ?v1 ?v2)) (exists ((?v3 B$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$c ?v1 ?v3)))))) :named a9))
(assert (! (forall ((?v0 B$) (?v1 B_b_fun$) (?v2 B_set$)) (= (member$ ?v0 (image$b ?v1 ?v2)) (exists ((?v3 B$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$d ?v1 ?v3)))))) :named a10))
(assert (! (forall ((?v0 B$) (?v1 A_llist_b_fun$) (?v2 A_llist_set$)) (= (member$ ?v0 (image$ ?v1 ?v2)) (exists ((?v3 A_llist$)) (and (member$a ?v3 ?v2) (= ?v0 (fun_app$ ?v1 ?v3)))))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist_set$)) (= (member$a ?v0 (image$c ?v1 ?v2)) (exists ((?v3 A_llist$)) (and (member$a ?v3 ?v2) (= ?v0 (fun_app$e ?v1 ?v3)))))) :named a12))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_b_fun$) (?v3 B_b_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 B$)) (=> (member$ ?v4 ?v1) (= (fun_app$d ?v2 ?v4) (fun_app$d ?v3 ?v4))))) (= (image$b ?v2 ?v0) (image$b ?v3 ?v1)))) :named a13))
(assert (! (forall ((?v0 B_set$) (?v1 B_set$) (?v2 B_a_llist_fun$) (?v3 B_a_llist_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 B$)) (=> (member$ ?v4 ?v1) (= (fun_app$c ?v2 ?v4) (fun_app$c ?v3 ?v4))))) (= (image$a ?v2 ?v0) (image$a ?v3 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_fun$) (?v3 A_llist_a_llist_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_llist$)) (=> (member$a ?v4 ?v1) (= (fun_app$e ?v2 ?v4) (fun_app$e ?v3 ?v4))))) (= (image$c ?v2 ?v0) (image$c ?v3 ?v1)))) :named a15))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$) (?v2 A_llist_b_fun$) (?v3 A_llist_b_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_llist$)) (=> (member$a ?v4 ?v1) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (image$ ?v2 ?v0) (image$ ?v3 ?v1)))) :named a16))
(assert (! (forall ((?v0 B_a_llist_fun$) (?v1 B_set$) (?v2 A_llist_bool_fun$)) (=> (exists ((?v3 A_llist$)) (and (member$a ?v3 (image$a ?v0 ?v1)) (fun_app$f ?v2 ?v3))) (exists ((?v3 B$)) (and (member$ ?v3 ?v1) (fun_app$f ?v2 (fun_app$c ?v0 ?v3)))))) :named a17))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_set$) (?v2 B_bool_fun$)) (=> (exists ((?v3 B$)) (and (member$ ?v3 (image$b ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (exists ((?v3 B$)) (and (member$ ?v3 ?v1) (fun_app$b ?v2 (fun_app$d ?v0 ?v3)))))) :named a18))
(assert (! (forall ((?v0 A_llist_b_fun$) (?v1 A_llist_set$) (?v2 B_bool_fun$)) (=> (exists ((?v3 B$)) (and (member$ ?v3 (image$ ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (exists ((?v3 A_llist$)) (and (member$a ?v3 ?v1) (fun_app$b ?v2 (fun_app$ ?v0 ?v3)))))) :named a19))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_set$) (?v2 A_llist_bool_fun$)) (=> (exists ((?v3 A_llist$)) (and (member$a ?v3 (image$c ?v0 ?v1)) (fun_app$f ?v2 ?v3))) (exists ((?v3 A_llist$)) (and (member$a ?v3 ?v1) (fun_app$f ?v2 (fun_app$e ?v0 ?v3)))))) :named a20))
(assert (! (forall ((?v0 B_a_llist_fun$) (?v1 B_set$) (?v2 A_llist_bool_fun$)) (=> (forall ((?v3 A_llist$)) (=> (member$a ?v3 (image$a ?v0 ?v1)) (fun_app$f ?v2 ?v3))) (forall ((?v3 B$)) (=> (member$ ?v3 ?v1) (fun_app$f ?v2 (fun_app$c ?v0 ?v3)))))) :named a21))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_set$) (?v2 B_bool_fun$)) (=> (forall ((?v3 B$)) (=> (member$ ?v3 (image$b ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (forall ((?v3 B$)) (=> (member$ ?v3 ?v1) (fun_app$b ?v2 (fun_app$d ?v0 ?v3)))))) :named a22))
(assert (! (forall ((?v0 A_llist_b_fun$) (?v1 A_llist_set$) (?v2 B_bool_fun$)) (=> (forall ((?v3 B$)) (=> (member$ ?v3 (image$ ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (forall ((?v3 A_llist$)) (=> (member$a ?v3 ?v1) (fun_app$b ?v2 (fun_app$ ?v0 ?v3)))))) :named a23))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_set$) (?v2 A_llist_bool_fun$)) (=> (forall ((?v3 A_llist$)) (=> (member$a ?v3 (image$c ?v0 ?v1)) (fun_app$f ?v2 ?v3))) (forall ((?v3 A_llist$)) (=> (member$a ?v3 ?v1) (fun_app$f ?v2 (fun_app$e ?v0 ?v3)))))) :named a24))
(assert (! (forall ((?v0 B$) (?v1 B_set$) (?v2 A_llist$) (?v3 B_a_llist_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$c ?v3 ?v0))) (member$a ?v2 (image$a ?v3 ?v1)))) :named a25))
(assert (! (forall ((?v0 B$) (?v1 B_set$) (?v2 B$) (?v3 B_b_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$d ?v3 ?v0))) (member$ ?v2 (image$b ?v3 ?v1)))) :named a26))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 B$) (?v3 A_llist_b_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$ ?v3 ?v0))) (member$ ?v2 (image$ ?v3 ?v1)))) :named a27))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist$) (?v3 A_llist_a_llist_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$e ?v3 ?v0))) (member$a ?v2 (image$c ?v3 ?v1)))) :named a28))
(assert (! (forall ((?v0 B$) (?v1 B_set$) (?v2 B_a_llist_fun$)) (=> (member$ ?v0 ?v1) (member$a (fun_app$c ?v2 ?v0) (image$a ?v2 ?v1)))) :named a29))
(assert (! (forall ((?v0 B$) (?v1 B_set$) (?v2 B_b_fun$)) (=> (member$ ?v0 ?v1) (member$ (fun_app$d ?v2 ?v0) (image$b ?v2 ?v1)))) :named a30))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_b_fun$)) (=> (member$a ?v0 ?v1) (member$ (fun_app$ ?v2 ?v0) (image$ ?v2 ?v1)))) :named a31))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_fun$)) (=> (member$a ?v0 ?v1) (member$a (fun_app$e ?v2 ?v0) (image$c ?v2 ?v1)))) :named a32))
(assert (! (chain$ lprefix$ y$) :named a33))
(assert (! (lub_singleton$ lSup$) :named a34))
(assert (! (forall ((?v0 B_bool_fun$)) (= (= (collect$ ?v0) bot$b) (forall ((?v1 B$)) (not (fun_app$b ?v0 ?v1))))) :named a35))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (= (= (collect$a ?v0) bot$) (forall ((?v1 A_llist$)) (not (fun_app$f ?v0 ?v1))))) :named a36))
(assert (! (forall ((?v0 B_set$)) (= (forall ((?v1 B$)) (not (member$ ?v1 ?v0))) (= ?v0 bot$b))) :named a37))
(assert (! (forall ((?v0 A_llist_set$)) (= (forall ((?v1 A_llist$)) (not (member$a ?v1 ?v0))) (= ?v0 bot$))) :named a38))
(assert (! (forall ((?v0 B_bool_fun$)) (= (= bot$b (collect$ ?v0)) (forall ((?v1 B$)) (not (fun_app$b ?v0 ?v1))))) :named a39))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (= (= bot$ (collect$a ?v0)) (forall ((?v1 A_llist$)) (not (fun_app$f ?v0 ?v1))))) :named a40))
(assert (! (forall ((?v0 B$)) (= (member$ ?v0 bot$b) false)) :named a41))
(assert (! (forall ((?v0 A_llist$)) (= (member$a ?v0 bot$) false)) :named a42))
(check-sat)
;(get-unsat-core)
