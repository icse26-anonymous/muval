; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 522
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort D$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort C_set$ 0)
(declare-sort D_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort C_bool_fun$ 0)
(declare-sort D_bool_fun$ 0)
(declare-sort A_c_prod_set$ 0)
(declare-sort B_d_prod_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_c_bool_fun_fun$ 0)
(declare-sort A_d_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort B_c_bool_fun_fun$ 0)
(declare-sort B_d_bool_fun_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort C_a_bool_fun_fun$ 0)
(declare-sort C_b_bool_fun_fun$ 0)
(declare-sort C_c_bool_fun_fun$ 0)
(declare-sort C_d_bool_fun_fun$ 0)
(declare-sort C_llist_bool_fun$ 0)
(declare-sort D_a_bool_fun_fun$ 0)
(declare-sort D_b_bool_fun_fun$ 0)
(declare-sort D_c_bool_fun_fun$ 0)
(declare-sort D_d_bool_fun_fun$ 0)
(declare-sort D_llist_bool_fun$ 0)
(declare-sort A_c_prod_bool_fun$ 0)
(declare-sort B_d_prod_bool_fun$ 0)
(declare-sort B_d_prod_llist_bool_fun$ 0)
(declare-sort A_c_prod_a_c_prod_bool_fun_fun$ 0)
(declare-sort A_c_prod_b_d_prod_bool_fun_fun$ 0)
(declare-datatypes () ((A_c_prod$ (pair$ (fst$ A$) (snd$ C$)))
  (B_d_prod$ (pair$a (fst$a B$) (snd$a D$)))))
(declare-codatatypes () ((A_c_prod_llist$ (lNil$) (lCons$ (lhd$ A_c_prod$) (ltl$ A_c_prod_llist$)))
  (B_d_prod_llist$ (lNil$a) (lCons$a (lhd$a B_d_prod$) (ltl$a B_d_prod_llist$)))
  (A_llist$ (lNil$b) (lCons$b (lhd$b A$) (ltl$b A_llist$)))
  (C_llist$ (lNil$c) (lCons$c (lhd$c C$) (ltl$c C_llist$)))
  (B_llist$ (lNil$d) (lCons$d (lhd$d B$) (ltl$d B_llist$)))
  (D_llist$ (lNil$e) (lCons$e (lhd$e D$) (ltl$e D_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun p$ () A_b_bool_fun_fun$)
(declare-fun p$a () C_d_bool_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun xs$a () C_llist$)
(declare-fun ys$a () D_llist$)
(declare-fun lset$ (A_c_prod_llist$) A_c_prod_set$)
(declare-fun lzip$ (A_llist$ C_llist$) A_c_prod_llist$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lset$a (D_llist$) D_set$)
(declare-fun lset$b (C_llist$) C_set$)
(declare-fun lset$c (B_llist$) B_set$)
(declare-fun lset$d (A_llist$) A_set$)
(declare-fun lset$e (B_d_prod_llist$) B_d_prod_set$)
(declare-fun lzip$a (B_llist$ D_llist$) B_d_prod_llist$)
(declare-fun lnull$a (B_llist$) Bool)
(declare-fun lnull$b (C_llist$) Bool)
(declare-fun lnull$c (D_llist$) Bool)
(declare-fun lnull$d (A_c_prod_llist$) Bool)
(declare-fun lnull$e (B_d_prod_llist$) Bool)
(declare-fun member$ (A_c_prod$ A_c_prod_set$) Bool)
(declare-fun fun_app$ (B_d_prod_llist_bool_fun$ B_d_prod_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun member$a (D$ D_set$) Bool)
(declare-fun member$b (C$ C_set$) Bool)
(declare-fun member$c (B$ B_set$) Bool)
(declare-fun member$d (A$ A_set$) Bool)
(declare-fun member$e (B_d_prod$ B_d_prod_set$) Bool)
(declare-fun fun_app$a (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun fun_app$b (D_llist_bool_fun$ D_llist$) Bool)
(declare-fun fun_app$c (B_d_prod_bool_fun$ B_d_prod$) Bool)
(declare-fun fun_app$d (A_c_prod_b_d_prod_bool_fun_fun$ A_c_prod$) B_d_prod_bool_fun$)
(declare-fun fun_app$e (B_bool_fun$ B$) Bool)
(declare-fun fun_app$f (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$g (D_bool_fun$ D$) Bool)
(declare-fun fun_app$h (C_d_bool_fun_fun$ C$) D_bool_fun$)
(declare-fun fun_app$i (C_llist_bool_fun$ C_llist$) Bool)
(declare-fun fun_app$j (D_d_bool_fun_fun$ D$) D_bool_fun$)
(declare-fun fun_app$k (C_bool_fun$ C$) Bool)
(declare-fun fun_app$l (D_c_bool_fun_fun$ D$) C_bool_fun$)
(declare-fun fun_app$m (D_b_bool_fun_fun$ D$) B_bool_fun$)
(declare-fun fun_app$n (A_bool_fun$ A$) Bool)
(declare-fun fun_app$o (D_a_bool_fun_fun$ D$) A_bool_fun$)
(declare-fun fun_app$p (C_c_bool_fun_fun$ C$) C_bool_fun$)
(declare-fun fun_app$q (C_b_bool_fun_fun$ C$) B_bool_fun$)
(declare-fun fun_app$r (C_a_bool_fun_fun$ C$) A_bool_fun$)
(declare-fun fun_app$s (B_d_bool_fun_fun$ B$) D_bool_fun$)
(declare-fun fun_app$t (A_d_bool_fun_fun$ A$) D_bool_fun$)
(declare-fun fun_app$u (B_c_bool_fun_fun$ B$) C_bool_fun$)
(declare-fun fun_app$v (A_c_bool_fun_fun$ A$) C_bool_fun$)
(declare-fun fun_app$w (A_c_prod_bool_fun$ A_c_prod$) Bool)
(declare-fun fun_app$x (A_c_prod_a_c_prod_bool_fun_fun$ A_c_prod$) A_c_prod_bool_fun$)
(declare-fun fun_app$y (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$z (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun llength$a (B_llist$) Enat$)
(declare-fun llength$b (C_llist$) Enat$)
(declare-fun llength$c (D_llist$) Enat$)
(declare-fun llength$d (A_c_prod_llist$) Enat$)
(declare-fun llength$e (B_d_prod_llist$) Enat$)
(declare-fun rel_prod$ (A_b_bool_fun_fun$ C_d_bool_fun_fun$) A_c_prod_b_d_prod_bool_fun_fun$)
(declare-fun llist_all2$ (A_c_prod_b_d_prod_bool_fun_fun$ A_c_prod_llist$) B_d_prod_llist_bool_fun$)
(declare-fun llist_all2$a (A_b_bool_fun_fun$ A_llist$) B_llist_bool_fun$)
(declare-fun llist_all2$b (C_d_bool_fun_fun$ C_llist$) D_llist_bool_fun$)
(declare-fun llist_all2$c (D_d_bool_fun_fun$ D_llist$) D_llist_bool_fun$)
(declare-fun llist_all2$d (B_d_bool_fun_fun$ B_llist$) D_llist_bool_fun$)
(declare-fun llist_all2$e (A_d_bool_fun_fun$ A_llist$) D_llist_bool_fun$)
(declare-fun llist_all2$f (D_c_bool_fun_fun$ D_llist$) C_llist_bool_fun$)
(declare-fun llist_all2$g (C_c_bool_fun_fun$ C_llist$) C_llist_bool_fun$)
(declare-fun llist_all2$h (B_c_bool_fun_fun$ B_llist$) C_llist_bool_fun$)
(declare-fun llist_all2$i (A_c_bool_fun_fun$ A_llist$) C_llist_bool_fun$)
(declare-fun llist_all2$j (D_b_bool_fun_fun$ D_llist$ B_llist$) Bool)
(declare-fun llist_all2$k (D_a_bool_fun_fun$ D_llist$ A_llist$) Bool)
(declare-fun llist_all2$l (C_b_bool_fun_fun$ C_llist$ B_llist$) Bool)
(declare-fun llist_all2$m (C_a_bool_fun_fun$ C_llist$ A_llist$) Bool)
(declare-fun llist_all2$n (A_c_prod_a_c_prod_bool_fun_fun$ A_c_prod_llist$ A_c_prod_llist$) Bool)
(declare-fun llist_all2$o (B_b_bool_fun_fun$ B_llist$ B_llist$) Bool)
(declare-fun llist_all2$p (A_a_bool_fun_fun$ A_llist$ A_llist$) Bool)
(assert (! (not (fun_app$ (llist_all2$ (rel_prod$ p$ p$a) (lzip$ xs$ xs$a)) (lzip$a ys$ ys$a))) :named a0))
(assert (! (fun_app$a (llist_all2$a p$ xs$) ys$) :named a1))
(assert (! (fun_app$b (llist_all2$b p$a xs$a) ys$a) :named a2))
(assert (! (forall ((?v0 A_c_prod_b_d_prod_bool_fun_fun$) (?v1 A_c_prod_llist$) (?v2 B_d_prod_llist$) (?v3 A_c_prod_b_d_prod_bool_fun_fun$)) (=> (and (fun_app$ (llist_all2$ ?v0 ?v1) ?v2) (forall ((?v4 A_c_prod$) (?v5 B_d_prod$)) (=> (fun_app$c (fun_app$d ?v0 ?v4) ?v5) (fun_app$c (fun_app$d ?v3 ?v4) ?v5)))) (fun_app$ (llist_all2$ ?v3 ?v1) ?v2))) :named a3))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_b_bool_fun_fun$)) (=> (and (fun_app$a (llist_all2$a ?v0 ?v1) ?v2) (forall ((?v4 A$) (?v5 B$)) (=> (fun_app$e (fun_app$f ?v0 ?v4) ?v5) (fun_app$e (fun_app$f ?v3 ?v4) ?v5)))) (fun_app$a (llist_all2$a ?v3 ?v1) ?v2))) :named a4))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 C_llist$) (?v2 D_llist$) (?v3 C_d_bool_fun_fun$)) (=> (and (fun_app$b (llist_all2$b ?v0 ?v1) ?v2) (forall ((?v4 C$) (?v5 D$)) (=> (fun_app$g (fun_app$h ?v0 ?v4) ?v5) (fun_app$g (fun_app$h ?v3 ?v4) ?v5)))) (fun_app$b (llist_all2$b ?v3 ?v1) ?v2))) :named a5))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$a (llist_all2$a ?v0 ?v1) lNil$d) (= ?v1 lNil$b)) :pattern ((llist_all2$a ?v0 ?v1)))) :named a6))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 C_llist$)) (! (= (fun_app$b (llist_all2$b ?v0 ?v1) lNil$e) (= ?v1 lNil$c)) :pattern ((llist_all2$b ?v0 ?v1)))) :named a7))
(assert (! (forall ((?v0 A_c_prod_b_d_prod_bool_fun_fun$) (?v1 A_c_prod_llist$)) (! (= (fun_app$ (llist_all2$ ?v0 ?v1) lNil$a) (= ?v1 lNil$)) :pattern ((llist_all2$ ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 D_d_bool_fun_fun$) (?v1 D_llist$)) (! (= (fun_app$b (llist_all2$c ?v0 ?v1) lNil$e) (= ?v1 lNil$e)) :pattern ((llist_all2$c ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 B_d_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$b (llist_all2$d ?v0 ?v1) lNil$e) (= ?v1 lNil$d)) :pattern ((llist_all2$d ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 A_d_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$b (llist_all2$e ?v0 ?v1) lNil$e) (= ?v1 lNil$b)) :pattern ((llist_all2$e ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 D_c_bool_fun_fun$) (?v1 D_llist$)) (! (= (fun_app$i (llist_all2$f ?v0 ?v1) lNil$c) (= ?v1 lNil$e)) :pattern ((llist_all2$f ?v0 ?v1)))) :named a12))
(assert (! (forall ((?v0 C_c_bool_fun_fun$) (?v1 C_llist$)) (! (= (fun_app$i (llist_all2$g ?v0 ?v1) lNil$c) (= ?v1 lNil$c)) :pattern ((llist_all2$g ?v0 ?v1)))) :named a13))
(assert (! (forall ((?v0 B_c_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$i (llist_all2$h ?v0 ?v1) lNil$c) (= ?v1 lNil$d)) :pattern ((llist_all2$h ?v0 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_c_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$i (llist_all2$i ?v0 ?v1) lNil$c) (= ?v1 lNil$b)) :pattern ((llist_all2$i ?v0 ?v1)))) :named a15))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$a (llist_all2$a ?v0 lNil$b) ?v1) (= ?v1 lNil$d)) :pattern ((fun_app$a (llist_all2$a ?v0 lNil$b) ?v1)))) :named a16))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 D_llist$)) (! (= (fun_app$b (llist_all2$b ?v0 lNil$c) ?v1) (= ?v1 lNil$e)) :pattern ((fun_app$b (llist_all2$b ?v0 lNil$c) ?v1)))) :named a17))
(assert (! (forall ((?v0 A_c_prod_b_d_prod_bool_fun_fun$) (?v1 B_d_prod_llist$)) (! (= (fun_app$ (llist_all2$ ?v0 lNil$) ?v1) (= ?v1 lNil$a)) :pattern ((fun_app$ (llist_all2$ ?v0 lNil$) ?v1)))) :named a18))
(assert (! (forall ((?v0 D_d_bool_fun_fun$) (?v1 D_llist$)) (! (= (fun_app$b (llist_all2$c ?v0 lNil$e) ?v1) (= ?v1 lNil$e)) :pattern ((fun_app$b (llist_all2$c ?v0 lNil$e) ?v1)))) :named a19))
(assert (! (forall ((?v0 D_c_bool_fun_fun$) (?v1 C_llist$)) (! (= (fun_app$i (llist_all2$f ?v0 lNil$e) ?v1) (= ?v1 lNil$c)) :pattern ((fun_app$i (llist_all2$f ?v0 lNil$e) ?v1)))) :named a20))
(assert (! (forall ((?v0 D_b_bool_fun_fun$) (?v1 B_llist$)) (! (= (llist_all2$j ?v0 lNil$e ?v1) (= ?v1 lNil$d)) :pattern ((llist_all2$j ?v0 lNil$e ?v1)))) :named a21))
(assert (! (forall ((?v0 D_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (llist_all2$k ?v0 lNil$e ?v1) (= ?v1 lNil$b)) :pattern ((llist_all2$k ?v0 lNil$e ?v1)))) :named a22))
(assert (! (forall ((?v0 C_c_bool_fun_fun$) (?v1 C_llist$)) (! (= (fun_app$i (llist_all2$g ?v0 lNil$c) ?v1) (= ?v1 lNil$c)) :pattern ((fun_app$i (llist_all2$g ?v0 lNil$c) ?v1)))) :named a23))
(assert (! (forall ((?v0 C_b_bool_fun_fun$) (?v1 B_llist$)) (! (= (llist_all2$l ?v0 lNil$c ?v1) (= ?v1 lNil$d)) :pattern ((llist_all2$l ?v0 lNil$c ?v1)))) :named a24))
(assert (! (forall ((?v0 C_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (llist_all2$m ?v0 lNil$c ?v1) (= ?v1 lNil$b)) :pattern ((llist_all2$m ?v0 lNil$c ?v1)))) :named a25))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 B$) (?v4 B_llist$)) (! (= (fun_app$a (llist_all2$a ?v0 (lCons$b ?v1 ?v2)) (lCons$d ?v3 ?v4)) (and (fun_app$e (fun_app$f ?v0 ?v1) ?v3) (fun_app$a (llist_all2$a ?v0 ?v2) ?v4))) :pattern ((fun_app$a (llist_all2$a ?v0 (lCons$b ?v1 ?v2)) (lCons$d ?v3 ?v4))))) :named a26))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 C$) (?v2 C_llist$) (?v3 D$) (?v4 D_llist$)) (! (= (fun_app$b (llist_all2$b ?v0 (lCons$c ?v1 ?v2)) (lCons$e ?v3 ?v4)) (and (fun_app$g (fun_app$h ?v0 ?v1) ?v3) (fun_app$b (llist_all2$b ?v0 ?v2) ?v4))) :pattern ((fun_app$b (llist_all2$b ?v0 (lCons$c ?v1 ?v2)) (lCons$e ?v3 ?v4))))) :named a27))
(assert (! (forall ((?v0 A_c_prod_b_d_prod_bool_fun_fun$) (?v1 A_c_prod$) (?v2 A_c_prod_llist$) (?v3 B_d_prod$) (?v4 B_d_prod_llist$)) (! (= (fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2)) (lCons$a ?v3 ?v4)) (and (fun_app$c (fun_app$d ?v0 ?v1) ?v3) (fun_app$ (llist_all2$ ?v0 ?v2) ?v4))) :pattern ((fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2)) (lCons$a ?v3 ?v4))))) :named a28))
(assert (! (forall ((?v0 D_d_bool_fun_fun$) (?v1 D$) (?v2 D_llist$) (?v3 D$) (?v4 D_llist$)) (! (= (fun_app$b (llist_all2$c ?v0 (lCons$e ?v1 ?v2)) (lCons$e ?v3 ?v4)) (and (fun_app$g (fun_app$j ?v0 ?v1) ?v3) (fun_app$b (llist_all2$c ?v0 ?v2) ?v4))) :pattern ((fun_app$b (llist_all2$c ?v0 (lCons$e ?v1 ?v2)) (lCons$e ?v3 ?v4))))) :named a29))
(assert (! (forall ((?v0 D_c_bool_fun_fun$) (?v1 D$) (?v2 D_llist$) (?v3 C$) (?v4 C_llist$)) (! (= (fun_app$i (llist_all2$f ?v0 (lCons$e ?v1 ?v2)) (lCons$c ?v3 ?v4)) (and (fun_app$k (fun_app$l ?v0 ?v1) ?v3) (fun_app$i (llist_all2$f ?v0 ?v2) ?v4))) :pattern ((fun_app$i (llist_all2$f ?v0 (lCons$e ?v1 ?v2)) (lCons$c ?v3 ?v4))))) :named a30))
(assert (! (forall ((?v0 D_b_bool_fun_fun$) (?v1 D$) (?v2 D_llist$) (?v3 B$) (?v4 B_llist$)) (! (= (llist_all2$j ?v0 (lCons$e ?v1 ?v2) (lCons$d ?v3 ?v4)) (and (fun_app$e (fun_app$m ?v0 ?v1) ?v3) (llist_all2$j ?v0 ?v2 ?v4))) :pattern ((llist_all2$j ?v0 (lCons$e ?v1 ?v2) (lCons$d ?v3 ?v4))))) :named a31))
(assert (! (forall ((?v0 D_a_bool_fun_fun$) (?v1 D$) (?v2 D_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (llist_all2$k ?v0 (lCons$e ?v1 ?v2) (lCons$b ?v3 ?v4)) (and (fun_app$n (fun_app$o ?v0 ?v1) ?v3) (llist_all2$k ?v0 ?v2 ?v4))) :pattern ((llist_all2$k ?v0 (lCons$e ?v1 ?v2) (lCons$b ?v3 ?v4))))) :named a32))
(assert (! (forall ((?v0 C_c_bool_fun_fun$) (?v1 C$) (?v2 C_llist$) (?v3 C$) (?v4 C_llist$)) (! (= (fun_app$i (llist_all2$g ?v0 (lCons$c ?v1 ?v2)) (lCons$c ?v3 ?v4)) (and (fun_app$k (fun_app$p ?v0 ?v1) ?v3) (fun_app$i (llist_all2$g ?v0 ?v2) ?v4))) :pattern ((fun_app$i (llist_all2$g ?v0 (lCons$c ?v1 ?v2)) (lCons$c ?v3 ?v4))))) :named a33))
(assert (! (forall ((?v0 C_b_bool_fun_fun$) (?v1 C$) (?v2 C_llist$) (?v3 B$) (?v4 B_llist$)) (! (= (llist_all2$l ?v0 (lCons$c ?v1 ?v2) (lCons$d ?v3 ?v4)) (and (fun_app$e (fun_app$q ?v0 ?v1) ?v3) (llist_all2$l ?v0 ?v2 ?v4))) :pattern ((llist_all2$l ?v0 (lCons$c ?v1 ?v2) (lCons$d ?v3 ?v4))))) :named a34))
(assert (! (forall ((?v0 C_a_bool_fun_fun$) (?v1 C$) (?v2 C_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (llist_all2$m ?v0 (lCons$c ?v1 ?v2) (lCons$b ?v3 ?v4)) (and (fun_app$n (fun_app$r ?v0 ?v1) ?v3) (llist_all2$m ?v0 ?v2 ?v4))) :pattern ((llist_all2$m ?v0 (lCons$c ?v1 ?v2) (lCons$b ?v3 ?v4))))) :named a35))
(assert (! (forall ((?v0 A_b_bool_fun_fun$)) (fun_app$a (llist_all2$a ?v0 lNil$b) lNil$d)) :named a36))
(assert (! (forall ((?v0 C_d_bool_fun_fun$)) (fun_app$b (llist_all2$b ?v0 lNil$c) lNil$e)) :named a37))
(assert (! (forall ((?v0 A_c_prod_b_d_prod_bool_fun_fun$)) (fun_app$ (llist_all2$ ?v0 lNil$) lNil$a)) :named a38))
(assert (! (forall ((?v0 D_d_bool_fun_fun$)) (fun_app$b (llist_all2$c ?v0 lNil$e) lNil$e)) :named a39))
(assert (! (forall ((?v0 D_c_bool_fun_fun$)) (fun_app$i (llist_all2$f ?v0 lNil$e) lNil$c)) :named a40))
(assert (! (forall ((?v0 D_b_bool_fun_fun$)) (llist_all2$j ?v0 lNil$e lNil$d)) :named a41))
(assert (! (forall ((?v0 D_a_bool_fun_fun$)) (llist_all2$k ?v0 lNil$e lNil$b)) :named a42))
(assert (! (forall ((?v0 C_c_bool_fun_fun$)) (fun_app$i (llist_all2$g ?v0 lNil$c) lNil$c)) :named a43))
(assert (! (forall ((?v0 C_b_bool_fun_fun$)) (llist_all2$l ?v0 lNil$c lNil$d)) :named a44))
(assert (! (forall ((?v0 C_a_bool_fun_fun$)) (llist_all2$m ?v0 lNil$c lNil$b)) :named a45))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (=> (fun_app$a (llist_all2$a ?v0 ?v1) ?v2) (= (lnull$ ?v1) (lnull$a ?v2)))) :named a46))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 C_llist$) (?v2 D_llist$)) (=> (fun_app$b (llist_all2$b ?v0 ?v1) ?v2) (= (lnull$b ?v1) (lnull$c ?v2)))) :named a47))
(assert (! (forall ((?v0 A_c_prod_b_d_prod_bool_fun_fun$) (?v1 A_c_prod_llist$) (?v2 B_d_prod_llist$)) (=> (fun_app$ (llist_all2$ ?v0 ?v1) ?v2) (= (lnull$d ?v1) (lnull$e ?v2)))) :named a48))
(assert (! (forall ((?v0 D_d_bool_fun_fun$) (?v1 D_llist$) (?v2 D_llist$)) (=> (fun_app$b (llist_all2$c ?v0 ?v1) ?v2) (= (lnull$c ?v1) (lnull$c ?v2)))) :named a49))
(assert (! (forall ((?v0 D_c_bool_fun_fun$) (?v1 D_llist$) (?v2 C_llist$)) (=> (fun_app$i (llist_all2$f ?v0 ?v1) ?v2) (= (lnull$c ?v1) (lnull$b ?v2)))) :named a50))
(assert (! (forall ((?v0 D_b_bool_fun_fun$) (?v1 D_llist$) (?v2 B_llist$)) (=> (llist_all2$j ?v0 ?v1 ?v2) (= (lnull$c ?v1) (lnull$a ?v2)))) :named a51))
(assert (! (forall ((?v0 D_a_bool_fun_fun$) (?v1 D_llist$) (?v2 A_llist$)) (=> (llist_all2$k ?v0 ?v1 ?v2) (= (lnull$c ?v1) (lnull$ ?v2)))) :named a52))
(assert (! (forall ((?v0 C_c_bool_fun_fun$) (?v1 C_llist$) (?v2 C_llist$)) (=> (fun_app$i (llist_all2$g ?v0 ?v1) ?v2) (= (lnull$b ?v1) (lnull$b ?v2)))) :named a53))
(assert (! (forall ((?v0 C_b_bool_fun_fun$) (?v1 C_llist$) (?v2 B_llist$)) (=> (llist_all2$l ?v0 ?v1 ?v2) (= (lnull$b ?v1) (lnull$a ?v2)))) :named a54))
(assert (! (forall ((?v0 C_a_bool_fun_fun$) (?v1 C_llist$) (?v2 A_llist$)) (=> (llist_all2$m ?v0 ?v1 ?v2) (= (lnull$b ?v1) (lnull$ ?v2)))) :named a55))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$a (llist_all2$a ?v0 (lCons$b ?v1 ?v2)) ?v3) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v3 (lCons$d ?v4 ?v5)) (and (fun_app$e (fun_app$f ?v0 ?v1) ?v4) (fun_app$a (llist_all2$a ?v0 ?v2) ?v5)))))) :named a56))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 C$) (?v2 C_llist$) (?v3 D_llist$)) (= (fun_app$b (llist_all2$b ?v0 (lCons$c ?v1 ?v2)) ?v3) (exists ((?v4 D$) (?v5 D_llist$)) (and (= ?v3 (lCons$e ?v4 ?v5)) (and (fun_app$g (fun_app$h ?v0 ?v1) ?v4) (fun_app$b (llist_all2$b ?v0 ?v2) ?v5)))))) :named a57))
(assert (! (forall ((?v0 A_c_prod_b_d_prod_bool_fun_fun$) (?v1 A_c_prod$) (?v2 A_c_prod_llist$) (?v3 B_d_prod_llist$)) (= (fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2)) ?v3) (exists ((?v4 B_d_prod$) (?v5 B_d_prod_llist$)) (and (= ?v3 (lCons$a ?v4 ?v5)) (and (fun_app$c (fun_app$d ?v0 ?v1) ?v4) (fun_app$ (llist_all2$ ?v0 ?v2) ?v5)))))) :named a58))
(assert (! (forall ((?v0 D_d_bool_fun_fun$) (?v1 D$) (?v2 D_llist$) (?v3 D_llist$)) (= (fun_app$b (llist_all2$c ?v0 (lCons$e ?v1 ?v2)) ?v3) (exists ((?v4 D$) (?v5 D_llist$)) (and (= ?v3 (lCons$e ?v4 ?v5)) (and (fun_app$g (fun_app$j ?v0 ?v1) ?v4) (fun_app$b (llist_all2$c ?v0 ?v2) ?v5)))))) :named a59))
(assert (! (forall ((?v0 D_c_bool_fun_fun$) (?v1 D$) (?v2 D_llist$) (?v3 C_llist$)) (= (fun_app$i (llist_all2$f ?v0 (lCons$e ?v1 ?v2)) ?v3) (exists ((?v4 C$) (?v5 C_llist$)) (and (= ?v3 (lCons$c ?v4 ?v5)) (and (fun_app$k (fun_app$l ?v0 ?v1) ?v4) (fun_app$i (llist_all2$f ?v0 ?v2) ?v5)))))) :named a60))
(assert (! (forall ((?v0 D_b_bool_fun_fun$) (?v1 D$) (?v2 D_llist$) (?v3 B_llist$)) (= (llist_all2$j ?v0 (lCons$e ?v1 ?v2) ?v3) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v3 (lCons$d ?v4 ?v5)) (and (fun_app$e (fun_app$m ?v0 ?v1) ?v4) (llist_all2$j ?v0 ?v2 ?v5)))))) :named a61))
(assert (! (forall ((?v0 D_a_bool_fun_fun$) (?v1 D$) (?v2 D_llist$) (?v3 A_llist$)) (= (llist_all2$k ?v0 (lCons$e ?v1 ?v2) ?v3) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v3 (lCons$b ?v4 ?v5)) (and (fun_app$n (fun_app$o ?v0 ?v1) ?v4) (llist_all2$k ?v0 ?v2 ?v5)))))) :named a62))
(assert (! (forall ((?v0 C_c_bool_fun_fun$) (?v1 C$) (?v2 C_llist$) (?v3 C_llist$)) (= (fun_app$i (llist_all2$g ?v0 (lCons$c ?v1 ?v2)) ?v3) (exists ((?v4 C$) (?v5 C_llist$)) (and (= ?v3 (lCons$c ?v4 ?v5)) (and (fun_app$k (fun_app$p ?v0 ?v1) ?v4) (fun_app$i (llist_all2$g ?v0 ?v2) ?v5)))))) :named a63))
(assert (! (forall ((?v0 C_b_bool_fun_fun$) (?v1 C$) (?v2 C_llist$) (?v3 B_llist$)) (= (llist_all2$l ?v0 (lCons$c ?v1 ?v2) ?v3) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v3 (lCons$d ?v4 ?v5)) (and (fun_app$e (fun_app$q ?v0 ?v1) ?v4) (llist_all2$l ?v0 ?v2 ?v5)))))) :named a64))
(assert (! (forall ((?v0 C_a_bool_fun_fun$) (?v1 C$) (?v2 C_llist$) (?v3 A_llist$)) (= (llist_all2$m ?v0 (lCons$c ?v1 ?v2) ?v3) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v3 (lCons$b ?v4 ?v5)) (and (fun_app$n (fun_app$r ?v0 ?v1) ?v4) (llist_all2$m ?v0 ?v2 ?v5)))))) :named a65))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B$) (?v3 B_llist$)) (= (fun_app$a (llist_all2$a ?v0 ?v1) (lCons$d ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v1 (lCons$b ?v4 ?v5)) (and (fun_app$e (fun_app$f ?v0 ?v4) ?v2) (fun_app$a (llist_all2$a ?v0 ?v5) ?v3)))))) :named a66))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 C_llist$) (?v2 D$) (?v3 D_llist$)) (= (fun_app$b (llist_all2$b ?v0 ?v1) (lCons$e ?v2 ?v3)) (exists ((?v4 C$) (?v5 C_llist$)) (and (= ?v1 (lCons$c ?v4 ?v5)) (and (fun_app$g (fun_app$h ?v0 ?v4) ?v2) (fun_app$b (llist_all2$b ?v0 ?v5) ?v3)))))) :named a67))
(assert (! (forall ((?v0 A_c_prod_b_d_prod_bool_fun_fun$) (?v1 A_c_prod_llist$) (?v2 B_d_prod$) (?v3 B_d_prod_llist$)) (= (fun_app$ (llist_all2$ ?v0 ?v1) (lCons$a ?v2 ?v3)) (exists ((?v4 A_c_prod$) (?v5 A_c_prod_llist$)) (and (= ?v1 (lCons$ ?v4 ?v5)) (and (fun_app$c (fun_app$d ?v0 ?v4) ?v2) (fun_app$ (llist_all2$ ?v0 ?v5) ?v3)))))) :named a68))
(assert (! (forall ((?v0 D_d_bool_fun_fun$) (?v1 D_llist$) (?v2 D$) (?v3 D_llist$)) (= (fun_app$b (llist_all2$c ?v0 ?v1) (lCons$e ?v2 ?v3)) (exists ((?v4 D$) (?v5 D_llist$)) (and (= ?v1 (lCons$e ?v4 ?v5)) (and (fun_app$g (fun_app$j ?v0 ?v4) ?v2) (fun_app$b (llist_all2$c ?v0 ?v5) ?v3)))))) :named a69))
(assert (! (forall ((?v0 B_d_bool_fun_fun$) (?v1 B_llist$) (?v2 D$) (?v3 D_llist$)) (= (fun_app$b (llist_all2$d ?v0 ?v1) (lCons$e ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v1 (lCons$d ?v4 ?v5)) (and (fun_app$g (fun_app$s ?v0 ?v4) ?v2) (fun_app$b (llist_all2$d ?v0 ?v5) ?v3)))))) :named a70))
(assert (! (forall ((?v0 A_d_bool_fun_fun$) (?v1 A_llist$) (?v2 D$) (?v3 D_llist$)) (= (fun_app$b (llist_all2$e ?v0 ?v1) (lCons$e ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v1 (lCons$b ?v4 ?v5)) (and (fun_app$g (fun_app$t ?v0 ?v4) ?v2) (fun_app$b (llist_all2$e ?v0 ?v5) ?v3)))))) :named a71))
(assert (! (forall ((?v0 D_c_bool_fun_fun$) (?v1 D_llist$) (?v2 C$) (?v3 C_llist$)) (= (fun_app$i (llist_all2$f ?v0 ?v1) (lCons$c ?v2 ?v3)) (exists ((?v4 D$) (?v5 D_llist$)) (and (= ?v1 (lCons$e ?v4 ?v5)) (and (fun_app$k (fun_app$l ?v0 ?v4) ?v2) (fun_app$i (llist_all2$f ?v0 ?v5) ?v3)))))) :named a72))
(assert (! (forall ((?v0 C_c_bool_fun_fun$) (?v1 C_llist$) (?v2 C$) (?v3 C_llist$)) (= (fun_app$i (llist_all2$g ?v0 ?v1) (lCons$c ?v2 ?v3)) (exists ((?v4 C$) (?v5 C_llist$)) (and (= ?v1 (lCons$c ?v4 ?v5)) (and (fun_app$k (fun_app$p ?v0 ?v4) ?v2) (fun_app$i (llist_all2$g ?v0 ?v5) ?v3)))))) :named a73))
(assert (! (forall ((?v0 B_c_bool_fun_fun$) (?v1 B_llist$) (?v2 C$) (?v3 C_llist$)) (= (fun_app$i (llist_all2$h ?v0 ?v1) (lCons$c ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v1 (lCons$d ?v4 ?v5)) (and (fun_app$k (fun_app$u ?v0 ?v4) ?v2) (fun_app$i (llist_all2$h ?v0 ?v5) ?v3)))))) :named a74))
(assert (! (forall ((?v0 A_c_bool_fun_fun$) (?v1 A_llist$) (?v2 C$) (?v3 C_llist$)) (= (fun_app$i (llist_all2$i ?v0 ?v1) (lCons$c ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v1 (lCons$b ?v4 ?v5)) (and (fun_app$k (fun_app$v ?v0 ?v4) ?v2) (fun_app$i (llist_all2$i ?v0 ?v5) ?v3)))))) :named a75))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 B$) (?v3 A_llist$) (?v4 B_llist$)) (=> (and (fun_app$e (fun_app$f ?v0 ?v1) ?v2) (fun_app$a (llist_all2$a ?v0 ?v3) ?v4)) (fun_app$a (llist_all2$a ?v0 (lCons$b ?v1 ?v3)) (lCons$d ?v2 ?v4)))) :named a76))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 C$) (?v2 D$) (?v3 C_llist$) (?v4 D_llist$)) (=> (and (fun_app$g (fun_app$h ?v0 ?v1) ?v2) (fun_app$b (llist_all2$b ?v0 ?v3) ?v4)) (fun_app$b (llist_all2$b ?v0 (lCons$c ?v1 ?v3)) (lCons$e ?v2 ?v4)))) :named a77))
(assert (! (forall ((?v0 A_c_prod_b_d_prod_bool_fun_fun$) (?v1 A_c_prod$) (?v2 B_d_prod$) (?v3 A_c_prod_llist$) (?v4 B_d_prod_llist$)) (=> (and (fun_app$c (fun_app$d ?v0 ?v1) ?v2) (fun_app$ (llist_all2$ ?v0 ?v3) ?v4)) (fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v3)) (lCons$a ?v2 ?v4)))) :named a78))
(assert (! (forall ((?v0 D_d_bool_fun_fun$) (?v1 D$) (?v2 D$) (?v3 D_llist$) (?v4 D_llist$)) (=> (and (fun_app$g (fun_app$j ?v0 ?v1) ?v2) (fun_app$b (llist_all2$c ?v0 ?v3) ?v4)) (fun_app$b (llist_all2$c ?v0 (lCons$e ?v1 ?v3)) (lCons$e ?v2 ?v4)))) :named a79))
(assert (! (forall ((?v0 D_c_bool_fun_fun$) (?v1 D$) (?v2 C$) (?v3 D_llist$) (?v4 C_llist$)) (=> (and (fun_app$k (fun_app$l ?v0 ?v1) ?v2) (fun_app$i (llist_all2$f ?v0 ?v3) ?v4)) (fun_app$i (llist_all2$f ?v0 (lCons$e ?v1 ?v3)) (lCons$c ?v2 ?v4)))) :named a80))
(assert (! (forall ((?v0 D_b_bool_fun_fun$) (?v1 D$) (?v2 B$) (?v3 D_llist$) (?v4 B_llist$)) (=> (and (fun_app$e (fun_app$m ?v0 ?v1) ?v2) (llist_all2$j ?v0 ?v3 ?v4)) (llist_all2$j ?v0 (lCons$e ?v1 ?v3) (lCons$d ?v2 ?v4)))) :named a81))
(assert (! (forall ((?v0 D_a_bool_fun_fun$) (?v1 D$) (?v2 A$) (?v3 D_llist$) (?v4 A_llist$)) (=> (and (fun_app$n (fun_app$o ?v0 ?v1) ?v2) (llist_all2$k ?v0 ?v3 ?v4)) (llist_all2$k ?v0 (lCons$e ?v1 ?v3) (lCons$b ?v2 ?v4)))) :named a82))
(assert (! (forall ((?v0 C_c_bool_fun_fun$) (?v1 C$) (?v2 C$) (?v3 C_llist$) (?v4 C_llist$)) (=> (and (fun_app$k (fun_app$p ?v0 ?v1) ?v2) (fun_app$i (llist_all2$g ?v0 ?v3) ?v4)) (fun_app$i (llist_all2$g ?v0 (lCons$c ?v1 ?v3)) (lCons$c ?v2 ?v4)))) :named a83))
(assert (! (forall ((?v0 C_b_bool_fun_fun$) (?v1 C$) (?v2 B$) (?v3 C_llist$) (?v4 B_llist$)) (=> (and (fun_app$e (fun_app$q ?v0 ?v1) ?v2) (llist_all2$l ?v0 ?v3 ?v4)) (llist_all2$l ?v0 (lCons$c ?v1 ?v3) (lCons$d ?v2 ?v4)))) :named a84))
(assert (! (forall ((?v0 C_a_bool_fun_fun$) (?v1 C$) (?v2 A$) (?v3 C_llist$) (?v4 A_llist$)) (=> (and (fun_app$n (fun_app$r ?v0 ?v1) ?v2) (llist_all2$m ?v0 ?v3 ?v4)) (llist_all2$m ?v0 (lCons$c ?v1 ?v3) (lCons$b ?v2 ?v4)))) :named a85))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (=> (fun_app$a (llist_all2$a ?v0 ?v1) ?v2) (= (llength$ ?v1) (llength$a ?v2)))) :named a86))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 C_llist$) (?v2 D_llist$)) (=> (fun_app$b (llist_all2$b ?v0 ?v1) ?v2) (= (llength$b ?v1) (llength$c ?v2)))) :named a87))
(assert (! (forall ((?v0 A_c_prod_b_d_prod_bool_fun_fun$) (?v1 A_c_prod_llist$) (?v2 B_d_prod_llist$)) (=> (fun_app$ (llist_all2$ ?v0 ?v1) ?v2) (= (llength$d ?v1) (llength$e ?v2)))) :named a88))
(assert (! (forall ((?v0 D_d_bool_fun_fun$) (?v1 D_llist$) (?v2 D_llist$)) (=> (fun_app$b (llist_all2$c ?v0 ?v1) ?v2) (= (llength$c ?v1) (llength$c ?v2)))) :named a89))
(assert (! (forall ((?v0 D_c_bool_fun_fun$) (?v1 D_llist$) (?v2 C_llist$)) (=> (fun_app$i (llist_all2$f ?v0 ?v1) ?v2) (= (llength$c ?v1) (llength$b ?v2)))) :named a90))
(assert (! (forall ((?v0 D_b_bool_fun_fun$) (?v1 D_llist$) (?v2 B_llist$)) (=> (llist_all2$j ?v0 ?v1 ?v2) (= (llength$c ?v1) (llength$a ?v2)))) :named a91))
(assert (! (forall ((?v0 D_a_bool_fun_fun$) (?v1 D_llist$) (?v2 A_llist$)) (=> (llist_all2$k ?v0 ?v1 ?v2) (= (llength$c ?v1) (llength$ ?v2)))) :named a92))
(assert (! (forall ((?v0 C_c_bool_fun_fun$) (?v1 C_llist$) (?v2 C_llist$)) (=> (fun_app$i (llist_all2$g ?v0 ?v1) ?v2) (= (llength$b ?v1) (llength$b ?v2)))) :named a93))
(assert (! (forall ((?v0 C_b_bool_fun_fun$) (?v1 C_llist$) (?v2 B_llist$)) (=> (llist_all2$l ?v0 ?v1 ?v2) (= (llength$b ?v1) (llength$a ?v2)))) :named a94))
(assert (! (forall ((?v0 C_a_bool_fun_fun$) (?v1 C_llist$) (?v2 A_llist$)) (=> (llist_all2$m ?v0 ?v1 ?v2) (= (llength$b ?v1) (llength$ ?v2)))) :named a95))
(assert (! (forall ((?v0 A_c_prod_llist$) (?v1 A_c_prod_a_c_prod_bool_fun_fun$)) (=> (forall ((?v2 A_c_prod$)) (=> (member$ ?v2 (lset$ ?v0)) (fun_app$w (fun_app$x ?v1 ?v2) ?v2))) (llist_all2$n ?v1 ?v0 ?v0))) :named a96))
(assert (! (forall ((?v0 D_llist$) (?v1 D_d_bool_fun_fun$)) (=> (forall ((?v2 D$)) (=> (member$a ?v2 (lset$a ?v0)) (fun_app$g (fun_app$j ?v1 ?v2) ?v2))) (fun_app$b (llist_all2$c ?v1 ?v0) ?v0))) :named a97))
(assert (! (forall ((?v0 C_llist$) (?v1 C_c_bool_fun_fun$)) (=> (forall ((?v2 C$)) (=> (member$b ?v2 (lset$b ?v0)) (fun_app$k (fun_app$p ?v1 ?v2) ?v2))) (fun_app$i (llist_all2$g ?v1 ?v0) ?v0))) :named a98))
(assert (! (forall ((?v0 B_llist$) (?v1 B_b_bool_fun_fun$)) (=> (forall ((?v2 B$)) (=> (member$c ?v2 (lset$c ?v0)) (fun_app$e (fun_app$y ?v1 ?v2) ?v2))) (llist_all2$o ?v1 ?v0 ?v0))) :named a99))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_bool_fun_fun$)) (=> (forall ((?v2 A$)) (=> (member$d ?v2 (lset$d ?v0)) (fun_app$n (fun_app$z ?v1 ?v2) ?v2))) (llist_all2$p ?v1 ?v0 ?v0))) :named a100))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_b_bool_fun_fun$)) (=> (and (fun_app$a (llist_all2$a ?v0 ?v1) ?v2) (forall ((?v4 A$) (?v5 B$)) (=> (and (member$d ?v4 (lset$d ?v1)) (and (member$c ?v5 (lset$c ?v2)) (fun_app$e (fun_app$f ?v0 ?v4) ?v5))) (fun_app$e (fun_app$f ?v3 ?v4) ?v5)))) (fun_app$a (llist_all2$a ?v3 ?v1) ?v2))) :named a101))
(assert (! (forall ((?v0 C_d_bool_fun_fun$) (?v1 C_llist$) (?v2 D_llist$) (?v3 C_d_bool_fun_fun$)) (=> (and (fun_app$b (llist_all2$b ?v0 ?v1) ?v2) (forall ((?v4 C$) (?v5 D$)) (=> (and (member$b ?v4 (lset$b ?v1)) (and (member$a ?v5 (lset$a ?v2)) (fun_app$g (fun_app$h ?v0 ?v4) ?v5))) (fun_app$g (fun_app$h ?v3 ?v4) ?v5)))) (fun_app$b (llist_all2$b ?v3 ?v1) ?v2))) :named a102))
(assert (! (forall ((?v0 A_c_prod_b_d_prod_bool_fun_fun$) (?v1 A_c_prod_llist$) (?v2 B_d_prod_llist$) (?v3 A_c_prod_b_d_prod_bool_fun_fun$)) (=> (and (fun_app$ (llist_all2$ ?v0 ?v1) ?v2) (forall ((?v4 A_c_prod$) (?v5 B_d_prod$)) (=> (and (member$ ?v4 (lset$ ?v1)) (and (member$e ?v5 (lset$e ?v2)) (fun_app$c (fun_app$d ?v0 ?v4) ?v5))) (fun_app$c (fun_app$d ?v3 ?v4) ?v5)))) (fun_app$ (llist_all2$ ?v3 ?v1) ?v2))) :named a103))
(assert (! (forall ((?v0 D_d_bool_fun_fun$) (?v1 D_llist$) (?v2 D_llist$) (?v3 D_d_bool_fun_fun$)) (=> (and (fun_app$b (llist_all2$c ?v0 ?v1) ?v2) (forall ((?v4 D$) (?v5 D$)) (=> (and (member$a ?v4 (lset$a ?v1)) (and (member$a ?v5 (lset$a ?v2)) (fun_app$g (fun_app$j ?v0 ?v4) ?v5))) (fun_app$g (fun_app$j ?v3 ?v4) ?v5)))) (fun_app$b (llist_all2$c ?v3 ?v1) ?v2))) :named a104))
(assert (! (forall ((?v0 D_c_bool_fun_fun$) (?v1 D_llist$) (?v2 C_llist$) (?v3 D_c_bool_fun_fun$)) (=> (and (fun_app$i (llist_all2$f ?v0 ?v1) ?v2) (forall ((?v4 D$) (?v5 C$)) (=> (and (member$a ?v4 (lset$a ?v1)) (and (member$b ?v5 (lset$b ?v2)) (fun_app$k (fun_app$l ?v0 ?v4) ?v5))) (fun_app$k (fun_app$l ?v3 ?v4) ?v5)))) (fun_app$i (llist_all2$f ?v3 ?v1) ?v2))) :named a105))
(assert (! (forall ((?v0 D_b_bool_fun_fun$) (?v1 D_llist$) (?v2 B_llist$) (?v3 D_b_bool_fun_fun$)) (=> (and (llist_all2$j ?v0 ?v1 ?v2) (forall ((?v4 D$) (?v5 B$)) (=> (and (member$a ?v4 (lset$a ?v1)) (and (member$c ?v5 (lset$c ?v2)) (fun_app$e (fun_app$m ?v0 ?v4) ?v5))) (fun_app$e (fun_app$m ?v3 ?v4) ?v5)))) (llist_all2$j ?v3 ?v1 ?v2))) :named a106))
(assert (! (forall ((?v0 D_a_bool_fun_fun$) (?v1 D_llist$) (?v2 A_llist$) (?v3 D_a_bool_fun_fun$)) (=> (and (llist_all2$k ?v0 ?v1 ?v2) (forall ((?v4 D$) (?v5 A$)) (=> (and (member$a ?v4 (lset$a ?v1)) (and (member$d ?v5 (lset$d ?v2)) (fun_app$n (fun_app$o ?v0 ?v4) ?v5))) (fun_app$n (fun_app$o ?v3 ?v4) ?v5)))) (llist_all2$k ?v3 ?v1 ?v2))) :named a107))
(assert (! (forall ((?v0 C_c_bool_fun_fun$) (?v1 C_llist$) (?v2 C_llist$) (?v3 C_c_bool_fun_fun$)) (=> (and (fun_app$i (llist_all2$g ?v0 ?v1) ?v2) (forall ((?v4 C$) (?v5 C$)) (=> (and (member$b ?v4 (lset$b ?v1)) (and (member$b ?v5 (lset$b ?v2)) (fun_app$k (fun_app$p ?v0 ?v4) ?v5))) (fun_app$k (fun_app$p ?v3 ?v4) ?v5)))) (fun_app$i (llist_all2$g ?v3 ?v1) ?v2))) :named a108))
(assert (! (forall ((?v0 C_b_bool_fun_fun$) (?v1 C_llist$) (?v2 B_llist$) (?v3 C_b_bool_fun_fun$)) (=> (and (llist_all2$l ?v0 ?v1 ?v2) (forall ((?v4 C$) (?v5 B$)) (=> (and (member$b ?v4 (lset$b ?v1)) (and (member$c ?v5 (lset$c ?v2)) (fun_app$e (fun_app$q ?v0 ?v4) ?v5))) (fun_app$e (fun_app$q ?v3 ?v4) ?v5)))) (llist_all2$l ?v3 ?v1 ?v2))) :named a109))
(assert (! (forall ((?v0 C_a_bool_fun_fun$) (?v1 C_llist$) (?v2 A_llist$) (?v3 C_a_bool_fun_fun$)) (=> (and (llist_all2$m ?v0 ?v1 ?v2) (forall ((?v4 C$) (?v5 A$)) (=> (and (member$b ?v4 (lset$b ?v1)) (and (member$d ?v5 (lset$d ?v2)) (fun_app$n (fun_app$r ?v0 ?v4) ?v5))) (fun_app$n (fun_app$r ?v3 ?v4) ?v5)))) (llist_all2$m ?v3 ?v1 ?v2))) :named a110))
(assert (! (forall ((?v0 A_c_prod$) (?v1 A_c_prod_llist$) (?v2 A_c_prod$) (?v3 A_c_prod_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a111))
(assert (! (forall ((?v0 D$) (?v1 D_llist$) (?v2 D$) (?v3 D_llist$)) (= (= (lCons$e ?v0 ?v1) (lCons$e ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a112))
(assert (! (forall ((?v0 C$) (?v1 C_llist$) (?v2 C$) (?v3 C_llist$)) (= (= (lCons$c ?v0 ?v1) (lCons$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a113))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (= (= (lCons$d ?v0 ?v1) (lCons$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a114))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a115))
(assert (! (forall ((?v0 A_llist$) (?v1 C_llist$)) (= (lnull$d (lzip$ ?v0 ?v1)) (or (lnull$ ?v0) (lnull$b ?v1)))) :named a116))
(assert (! (forall ((?v0 B_llist$) (?v1 D_llist$)) (= (lnull$e (lzip$a ?v0 ?v1)) (or (lnull$a ?v0) (lnull$c ?v1)))) :named a117))
(assert (! (forall ((?v0 A_llist$) (?v1 C_llist$)) (= (not (lnull$d (lzip$ ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$b ?v1))))) :named a118))
(assert (! (forall ((?v0 B_llist$) (?v1 D_llist$)) (= (not (lnull$e (lzip$a ?v0 ?v1))) (and (not (lnull$a ?v0)) (not (lnull$c ?v1))))) :named a119))
(check-sat)
;(get-unsat-core)
