; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 515
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ (A_llist$) Bool)
(declare-fun xs$ () A_llist$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lappend$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun lfinite$ (A_llist$) Bool)
(assert (! (not (p$ xs$)) :named a0))
(assert (! (lfinite$ xs$) :named a1))
(assert (! (p$ lNil$) :named a2))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (lfinite$ ?v0) (p$ ?v0)) (p$ (fun_app$ (lappend$ ?v0) (lCons$ ?v1 lNil$))))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1)) ?v2) (lCons$ ?v0 (fun_app$ (lappend$ ?v1) ?v2))) :pattern ((fun_app$ (lappend$ (lCons$ ?v0 ?v1)) ?v2)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a7))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (lappend$ ?v0) lNil$) ?v0) :pattern ((lappend$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (lappend$ lNil$) ?v0) ?v0) :pattern ((fun_app$ (lappend$ lNil$) ?v0)))) :named a9))
(assert (! (= (lfinite$ lNil$) true) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$ (fun_app$ (lappend$ ?v0) ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= lNil$ (fun_app$ (lappend$ ?v0) ?v1)) (and (= ?v0 lNil$) (= ?v1 lNil$)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (fun_app$ (lappend$ ?v0) ?v1) lNil$) (and (= ?v0 lNil$) (= ?v1 lNil$)))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0) ?v1)) ?v2) (fun_app$ (lappend$ ?v0) (fun_app$ (lappend$ ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0) (lCons$ ?v1 lNil$))) ?v2) (fun_app$ (lappend$ ?v0) (lCons$ ?v1 ?v2)))) :named a15))
(assert (! (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))) :named a16))
(check-sat)
;(get-unsat-core)
