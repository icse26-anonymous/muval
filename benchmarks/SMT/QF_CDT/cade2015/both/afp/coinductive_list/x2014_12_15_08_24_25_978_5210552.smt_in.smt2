; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 552
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_b_prod_bool_fun$ 0)
(declare-sort B_a_prod_bool_fun$ 0)
(declare-sort B_b_prod_bool_fun$ 0)
(declare-sort A_a_prod_a_a_prod_fun$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-sort B_a_prod_b_a_prod_fun$ 0)
(declare-sort B_b_prod_b_b_prod_fun$ 0)
(declare-sort A_a_a_prod_bool_fun_fun$ 0)
(declare-sort A_a_b_prod_bool_fun_fun$ 0)
(declare-sort A_a_prod_a_bool_fun_fun$ 0)
(declare-sort A_a_prod_b_bool_fun_fun$ 0)
(declare-sort A_b_prod_a_bool_fun_fun$ 0)
(declare-sort A_b_prod_b_bool_fun_fun$ 0)
(declare-sort B_a_a_prod_bool_fun_fun$ 0)
(declare-sort B_a_b_prod_bool_fun_fun$ 0)
(declare-sort B_a_prod_b_bool_fun_fun$ 0)
(declare-sort B_b_a_prod_bool_fun_fun$ 0)
(declare-sort B_b_b_prod_bool_fun_fun$ 0)
(declare-sort B_b_prod_b_bool_fun_fun$ 0)
(declare-sort A_llist_a_a_prod_llist_fun$ 0)
(declare-sort A_llist_b_a_prod_llist_fun$ 0)
(declare-sort B_llist_a_b_prod_llist_fun$ 0)
(declare-sort B_llist_b_b_prod_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-sort B_b_prod_a_a_prod_bool_fun_fun$ 0)
(declare-sort B_b_prod_a_b_prod_bool_fun_fun$ 0)
(declare-sort B_b_prod_b_a_prod_bool_fun_fun$ 0)
(declare-sort B_b_prod_b_b_prod_bool_fun_fun$ 0)
(declare-sort A_a_b_prod_prod_a_a_b_prod_prod_fun$ 0)
(declare-sort A_b_a_prod_prod_a_b_a_prod_prod_fun$ 0)
(declare-sort A_b_b_prod_prod_a_b_b_prod_prod_fun$ 0)
(declare-sort B_a_a_prod_prod_b_a_a_prod_prod_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))))
(declare-datatypes () ((B_b_prod$ (pair$ (fst$ B$) (snd$ B$)))))
(declare-codatatypes () ((B_b_prod_llist$ (lNil$b) (lCons$b (lhd$b B_b_prod$) (ltl$b B_b_prod_llist$)))))
(declare-datatypes () ((B_a_prod$ (pair$a (fst$a B$) (snd$a A$)))))
(declare-codatatypes () ((B_a_prod_llist$ (lNil$c) (lCons$c (lhd$c B_a_prod$) (ltl$c B_a_prod_llist$)))))
(declare-datatypes () ((A_b_prod$ (pair$b (fst$b A$) (snd$b B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$d) (lCons$d (lhd$d A_b_prod$) (ltl$d A_b_prod_llist$)))))
(declare-datatypes () ((A_a_prod$ (pair$c (fst$c A$) (snd$c A$)))))
(declare-codatatypes () ((A_a_prod_llist$ (lNil$e) (lCons$e (lhd$e A_a_prod$) (ltl$e A_a_prod_llist$)))))
(declare-datatypes () ((B_a_a_prod_prod$ (pair$d (fst$d B$) (snd$d A_a_prod$)))))
(declare-codatatypes () ((B_a_a_prod_prod_llist$ (lNil$f) (lCons$f (lhd$f B_a_a_prod_prod$) (ltl$f B_a_a_prod_prod_llist$)))))
(declare-datatypes () ((A_b_b_prod_prod$ (pair$e (fst$e A$) (snd$e B_b_prod$)))))
(declare-codatatypes () ((A_b_b_prod_prod_llist$ (lNil$g) (lCons$g (lhd$g A_b_b_prod_prod$) (ltl$g A_b_b_prod_prod_llist$)))))
(declare-datatypes () ((A_b_a_prod_prod$ (pair$f (fst$f A$) (snd$f B_a_prod$)))))
(declare-codatatypes () ((A_b_a_prod_prod_llist$ (lNil$h) (lCons$h (lhd$h A_b_a_prod_prod$) (ltl$h A_b_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_b_prod_prod$ (pair$g (fst$g A$) (snd$g A_b_prod$)))))
(declare-codatatypes () ((A_a_b_prod_prod_llist$ (lNil$i) (lCons$i (lhd$i A_a_b_prod_prod$) (ltl$i A_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod$ (pair$h (fst$h A$) (snd$h A_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_prod_llist$ (lNil$j) (lCons$j (lhd$j A_a_a_prod_prod$) (ltl$j A_a_a_prod_prod_llist$)))))
(declare-datatypes () ((B_b_b_prod_prod$ (pair$i (fst$i B$) (snd$i B_b_prod$)))))
(declare-codatatypes () ((B_b_b_prod_prod_llist$ (lNil$k) (lCons$k (lhd$k B_b_b_prod_prod$) (ltl$k B_b_b_prod_prod_llist$)))))
(declare-datatypes () ((B_b_a_prod_prod$ (pair$j (fst$j B$) (snd$j B_a_prod$)))))
(declare-codatatypes () ((B_b_a_prod_prod_llist$ (lNil$l) (lCons$l (lhd$l B_b_a_prod_prod$) (ltl$l B_b_a_prod_prod_llist$)))))
(declare-datatypes () ((B_b_prod_list$ (nil$) (cons$ (hd$ B_b_prod$) (tl$ B_b_prod_list$)))
  (B_a_prod_list$ (nil$a) (cons$a (hd$a B_a_prod$) (tl$a B_a_prod_list$)))
  (A_b_prod_list$ (nil$b) (cons$b (hd$b A_b_prod$) (tl$b A_b_prod_list$)))
  (A_a_prod_list$ (nil$c) (cons$c (hd$c A_a_prod$) (tl$c A_a_prod_list$)))
  (A_list$ (nil$d) (cons$d (hd$d A$) (tl$d A_list$)))
  (B_list$ (nil$e) (cons$e (hd$e B$) (tl$e B_list$)))))
(declare-fun p$ () A_b_bool_fun_fun$)
(declare-fun uu$ () A_a_bool_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun uua$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun uub$ () B_b_bool_fun_fun$)
(declare-fun uuc$ () B_llist_b_llist_bool_fun_fun$)
(declare-fun lzip$ (A_llist$) A_llist_a_a_prod_llist_fun$)
(declare-fun lzip$a (A_llist$) B_llist_a_b_prod_llist_fun$)
(declare-fun lzip$b (B_llist$) A_llist_b_a_prod_llist_fun$)
(declare-fun lzip$c (B_llist$) B_llist_b_b_prod_llist_fun$)
(declare-fun lzip$d (A_llist$ B_b_prod_llist$) A_b_b_prod_prod_llist$)
(declare-fun lzip$e (A_llist$ B_a_prod_llist$) A_b_a_prod_prod_llist$)
(declare-fun lzip$f (A_llist$ A_b_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun lzip$g (A_llist$ A_a_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun lzip$h (B_llist$ B_b_prod_llist$) B_b_b_prod_prod_llist$)
(declare-fun lzip$i (B_llist$ B_a_prod_llist$) B_b_a_prod_prod_llist$)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun ldropn$a (Nat$ B_llist$) B_llist$)
(declare-fun ldropn$b (Nat$ B_b_prod_llist$) B_b_prod_llist$)
(declare-fun ldropn$c (Nat$ B_a_prod_llist$) B_a_prod_llist$)
(declare-fun ldropn$d (Nat$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun ldropn$e (Nat$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun ldropn$f (Nat$ B_a_a_prod_prod_llist$) B_a_a_prod_prod_llist$)
(declare-fun ldropn$g (Nat$ A_b_b_prod_prod_llist$) A_b_b_prod_prod_llist$)
(declare-fun ldropn$h (Nat$ A_b_a_prod_prod_llist$) A_b_a_prod_prod_llist$)
(declare-fun ldropn$i (Nat$ A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$d (B_bool_fun$ B$) Bool)
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$f (A_bool_fun$ A$) Bool)
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$h (A_llist_a_a_prod_llist_fun$ A_llist$) A_a_prod_llist$)
(declare-fun fun_app$i (B_llist_a_b_prod_llist_fun$ B_llist$) A_b_prod_llist$)
(declare-fun fun_app$j (A_llist_b_a_prod_llist_fun$ A_llist$) B_a_prod_llist$)
(declare-fun fun_app$k (B_llist_b_b_prod_llist_fun$ B_llist$) B_b_prod_llist$)
(declare-fun fun_app$l (B_b_prod_b_bool_fun_fun$ B_b_prod$) B_bool_fun$)
(declare-fun fun_app$m (A_a_prod_bool_fun$ A_a_prod$) Bool)
(declare-fun fun_app$n (B_b_prod_a_a_prod_bool_fun_fun$ B_b_prod$) A_a_prod_bool_fun$)
(declare-fun fun_app$o (A_b_prod_bool_fun$ A_b_prod$) Bool)
(declare-fun fun_app$p (B_b_prod_a_b_prod_bool_fun_fun$ B_b_prod$) A_b_prod_bool_fun$)
(declare-fun fun_app$q (B_a_prod_bool_fun$ B_a_prod$) Bool)
(declare-fun fun_app$r (B_b_prod_b_a_prod_bool_fun_fun$ B_b_prod$) B_a_prod_bool_fun$)
(declare-fun fun_app$s (B_b_prod_bool_fun$ B_b_prod$) Bool)
(declare-fun fun_app$t (B_b_prod_b_b_prod_bool_fun_fun$ B_b_prod$) B_b_prod_bool_fun$)
(declare-fun fun_app$u (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$v (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun iterates$ (A_a_fun$ A$) A_llist$)
(declare-fun lfinite$a (B_llist$) Bool)
(declare-fun lfinite$b (B_b_prod_llist$) Bool)
(declare-fun lfinite$c (B_a_prod_llist$) Bool)
(declare-fun lfinite$d (A_b_prod_llist$) Bool)
(declare-fun lfinite$e (A_a_prod_llist$) Bool)
(declare-fun lfinite$f (B_a_a_prod_prod_llist$) Bool)
(declare-fun lfinite$g (A_b_b_prod_prod_llist$) Bool)
(declare-fun lfinite$h (A_b_a_prod_prod_llist$) Bool)
(declare-fun lfinite$i (A_a_b_prod_prod_llist$) Bool)
(declare-fun lfinite$j (A_a_a_prod_prod_llist$) Bool)
(declare-fun lfinite$k (B_b_b_prod_prod_llist$) Bool)
(declare-fun lfinite$l (B_b_a_prod_prod_llist$) Bool)
(declare-fun llist_of$ (B_b_prod_list$) B_b_prod_llist$)
(declare-fun iterates$a (B_b_fun$ B$) B_llist$)
(declare-fun iterates$b (B_b_prod_b_b_prod_fun$ B_b_prod$) B_b_prod_llist$)
(declare-fun iterates$c (B_a_prod_b_a_prod_fun$ B_a_prod$) B_a_prod_llist$)
(declare-fun iterates$d (A_b_prod_a_b_prod_fun$ A_b_prod$) A_b_prod_llist$)
(declare-fun iterates$e (A_a_prod_a_a_prod_fun$ A_a_prod$) A_a_prod_llist$)
(declare-fun iterates$f (B_a_a_prod_prod_b_a_a_prod_prod_fun$ B_a_a_prod_prod$) B_a_a_prod_prod_llist$)
(declare-fun iterates$g (A_b_b_prod_prod_a_b_b_prod_prod_fun$ A_b_b_prod_prod$) A_b_b_prod_prod_llist$)
(declare-fun iterates$h (A_b_a_prod_prod_a_b_a_prod_prod_fun$ A_b_a_prod_prod$) A_b_a_prod_prod_llist$)
(declare-fun iterates$i (A_a_b_prod_prod_a_a_b_prod_prod_fun$ A_a_b_prod_prod$) A_a_b_prod_prod_llist$)
(declare-fun llist_of$a (B_a_prod_list$) B_a_prod_llist$)
(declare-fun llist_of$b (A_b_prod_list$) A_b_prod_llist$)
(declare-fun llist_of$c (A_a_prod_list$) A_a_prod_llist$)
(declare-fun llist_of$d (A_list$) A_llist$)
(declare-fun llist_of$e (B_list$) B_llist$)
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$) B_llist_bool_fun$)
(declare-fun llist_all2$a (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$b (B_b_bool_fun_fun$) B_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$c (B_a_bool_fun_fun$ B_llist$) A_llist_bool_fun$)
(declare-fun llist_all2$d (A_a_prod_b_bool_fun_fun$ A_a_prod_llist$) B_llist_bool_fun$)
(declare-fun llist_all2$e (A_b_prod_b_bool_fun_fun$ A_b_prod_llist$) B_llist_bool_fun$)
(declare-fun llist_all2$f (B_a_prod_b_bool_fun_fun$ B_a_prod_llist$) B_llist_bool_fun$)
(declare-fun llist_all2$g (B_b_prod_b_bool_fun_fun$ B_b_prod_llist$) B_llist_bool_fun$)
(declare-fun llist_all2$h (A_a_prod_a_bool_fun_fun$ A_a_prod_llist$) A_llist_bool_fun$)
(declare-fun llist_all2$i (A_b_prod_a_bool_fun_fun$ A_b_prod_llist$) A_llist_bool_fun$)
(declare-fun llist_all2$j (B_a_a_prod_bool_fun_fun$ B_llist$ A_a_prod_llist$) Bool)
(declare-fun llist_all2$k (B_a_b_prod_bool_fun_fun$ B_llist$ A_b_prod_llist$) Bool)
(declare-fun llist_all2$l (B_b_a_prod_bool_fun_fun$ B_llist$ B_a_prod_llist$) Bool)
(declare-fun llist_all2$m (B_b_b_prod_bool_fun_fun$ B_llist$ B_b_prod_llist$) Bool)
(declare-fun llist_all2$n (A_a_a_prod_bool_fun_fun$ A_llist$ A_a_prod_llist$) Bool)
(declare-fun llist_all2$o (A_a_b_prod_bool_fun_fun$ A_llist$ A_b_prod_llist$) Bool)
(declare-fun llist_all2$p (B_b_prod_a_a_prod_bool_fun_fun$ B_b_prod_llist$ A_a_prod_llist$) Bool)
(declare-fun llist_all2$q (B_b_prod_a_b_prod_bool_fun_fun$ B_b_prod_llist$ A_b_prod_llist$) Bool)
(declare-fun llist_all2$r (B_b_prod_b_a_prod_bool_fun_fun$ B_b_prod_llist$ B_a_prod_llist$) Bool)
(declare-fun llist_all2$s (B_b_prod_b_b_prod_bool_fun_fun$ B_b_prod_llist$ B_b_prod_llist$) Bool)
(declare-fun lstrict_prefix$ (A_llist$ A_llist$) Bool)
(declare-fun lstrict_prefix$a (B_llist$ B_llist$) Bool)
(declare-fun lstrict_prefix$b (B_b_prod_llist$ B_b_prod_llist$) Bool)
(declare-fun lstrict_prefix$c (B_a_prod_llist$ B_a_prod_llist$) Bool)
(declare-fun lstrict_prefix$d (A_b_prod_llist$ A_b_prod_llist$) Bool)
(declare-fun lstrict_prefix$e (A_a_prod_llist$ A_a_prod_llist$) Bool)
(declare-fun lstrict_prefix$f (B_a_a_prod_prod_llist$ B_a_a_prod_prod_llist$) Bool)
(declare-fun lstrict_prefix$g (A_b_b_prod_prod_llist$ A_b_b_prod_prod_llist$) Bool)
(declare-fun lstrict_prefix$h (A_b_a_prod_prod_llist$ A_b_a_prod_prod_llist$) Bool)
(declare-fun lstrict_prefix$i (A_a_b_prod_prod_llist$ A_a_b_prod_prod_llist$) Bool)
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (= (fun_app$ (fun_app$a uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uuc$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$c uua$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c uua$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$d (fun_app$e uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (fun_app$e uub$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$f (fun_app$g uu$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$f (fun_app$g uu$ ?v0) ?v1)))) :named a3))
(assert (! (not (= (lfinite$ xs$) (lfinite$a ys$))) :named a4))
(assert (! (fun_app$ (llist_all2$ p$ xs$) ys$) :named a5))
(assert (! (= (llist_all2$a uu$) uua$) :named a6))
(assert (! (= (llist_all2$b uub$) uuc$) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (lstrict_prefix$ ?v0 ?v1) (lfinite$ ?v0))) :named a8))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (lstrict_prefix$a ?v0 ?v1) (lfinite$a ?v0))) :named a9))
(assert (! (forall ((?v0 B_b_prod_llist$) (?v1 B_b_prod_llist$)) (=> (lstrict_prefix$b ?v0 ?v1) (lfinite$b ?v0))) :named a10))
(assert (! (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$)) (=> (lstrict_prefix$c ?v0 ?v1) (lfinite$c ?v0))) :named a11))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (=> (lstrict_prefix$d ?v0 ?v1) (lfinite$d ?v0))) :named a12))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (lstrict_prefix$e ?v0 ?v1) (lfinite$e ?v0))) :named a13))
(assert (! (forall ((?v0 B_a_a_prod_prod_llist$) (?v1 B_a_a_prod_prod_llist$)) (=> (lstrict_prefix$f ?v0 ?v1) (lfinite$f ?v0))) :named a14))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$) (?v1 A_b_b_prod_prod_llist$)) (=> (lstrict_prefix$g ?v0 ?v1) (lfinite$g ?v0))) :named a15))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$) (?v1 A_b_a_prod_prod_llist$)) (=> (lstrict_prefix$h ?v0 ?v1) (lfinite$h ?v0))) :named a16))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$)) (=> (lstrict_prefix$i ?v0 ?v1) (lfinite$i ?v0))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (= (lfinite$ (ldropn$ ?v0 ?v1)) (lfinite$ ?v1))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 B_llist$)) (= (lfinite$a (ldropn$a ?v0 ?v1)) (lfinite$a ?v1))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_prod_llist$)) (= (lfinite$b (ldropn$b ?v0 ?v1)) (lfinite$b ?v1))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_prod_llist$)) (= (lfinite$c (ldropn$c ?v0 ?v1)) (lfinite$c ?v1))) :named a21))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_llist$)) (= (lfinite$d (ldropn$d ?v0 ?v1)) (lfinite$d ?v1))) :named a22))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_llist$)) (= (lfinite$e (ldropn$e ?v0 ?v1)) (lfinite$e ?v1))) :named a23))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_a_prod_prod_llist$)) (= (lfinite$f (ldropn$f ?v0 ?v1)) (lfinite$f ?v1))) :named a24))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_b_prod_prod_llist$)) (= (lfinite$g (ldropn$g ?v0 ?v1)) (lfinite$g ?v1))) :named a25))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_a_prod_prod_llist$)) (= (lfinite$h (ldropn$h ?v0 ?v1)) (lfinite$h ?v1))) :named a26))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_b_prod_prod_llist$)) (= (lfinite$i (ldropn$i ?v0 ?v1)) (lfinite$i ?v1))) :named a27))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$ (llist_all2$ ?v0 ?v1) lNil$a) (= ?v1 lNil$)) :pattern ((llist_all2$ ?v0 ?v1)))) :named a28))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$ (fun_app$a (llist_all2$b ?v0) ?v1) lNil$a) (= ?v1 lNil$a)) :pattern ((fun_app$a (llist_all2$b ?v0) ?v1)))) :named a29))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$b (llist_all2$c ?v0 ?v1) lNil$) (= ?v1 lNil$a)) :pattern ((llist_all2$c ?v0 ?v1)))) :named a30))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v1) lNil$) (= ?v1 lNil$)) :pattern ((fun_app$c (llist_all2$a ?v0) ?v1)))) :named a31))
(assert (! (forall ((?v0 A_a_prod_b_bool_fun_fun$) (?v1 A_a_prod_llist$)) (! (= (fun_app$ (llist_all2$d ?v0 ?v1) lNil$a) (= ?v1 lNil$e)) :pattern ((llist_all2$d ?v0 ?v1)))) :named a32))
(assert (! (forall ((?v0 A_b_prod_b_bool_fun_fun$) (?v1 A_b_prod_llist$)) (! (= (fun_app$ (llist_all2$e ?v0 ?v1) lNil$a) (= ?v1 lNil$d)) :pattern ((llist_all2$e ?v0 ?v1)))) :named a33))
(assert (! (forall ((?v0 B_a_prod_b_bool_fun_fun$) (?v1 B_a_prod_llist$)) (! (= (fun_app$ (llist_all2$f ?v0 ?v1) lNil$a) (= ?v1 lNil$c)) :pattern ((llist_all2$f ?v0 ?v1)))) :named a34))
(assert (! (forall ((?v0 B_b_prod_b_bool_fun_fun$) (?v1 B_b_prod_llist$)) (! (= (fun_app$ (llist_all2$g ?v0 ?v1) lNil$a) (= ?v1 lNil$b)) :pattern ((llist_all2$g ?v0 ?v1)))) :named a35))
(assert (! (forall ((?v0 A_a_prod_a_bool_fun_fun$) (?v1 A_a_prod_llist$)) (! (= (fun_app$b (llist_all2$h ?v0 ?v1) lNil$) (= ?v1 lNil$e)) :pattern ((llist_all2$h ?v0 ?v1)))) :named a36))
(assert (! (forall ((?v0 A_b_prod_a_bool_fun_fun$) (?v1 A_b_prod_llist$)) (! (= (fun_app$b (llist_all2$i ?v0 ?v1) lNil$) (= ?v1 lNil$d)) :pattern ((llist_all2$i ?v0 ?v1)))) :named a37))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$ (llist_all2$ ?v0 lNil$) ?v1) (= ?v1 lNil$a)) :pattern ((fun_app$ (llist_all2$ ?v0 lNil$) ?v1)))) :named a38))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$ (fun_app$a (llist_all2$b ?v0) lNil$a) ?v1) (= ?v1 lNil$a)) :pattern ((fun_app$ (fun_app$a (llist_all2$b ?v0) lNil$a) ?v1)))) :named a39))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$b (llist_all2$c ?v0 lNil$a) ?v1) (= ?v1 lNil$)) :pattern ((fun_app$b (llist_all2$c ?v0 lNil$a) ?v1)))) :named a40))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$c (llist_all2$a ?v0) lNil$) ?v1) (= ?v1 lNil$)) :pattern ((fun_app$b (fun_app$c (llist_all2$a ?v0) lNil$) ?v1)))) :named a41))
(assert (! (forall ((?v0 B_a_a_prod_bool_fun_fun$) (?v1 A_a_prod_llist$)) (! (= (llist_all2$j ?v0 lNil$a ?v1) (= ?v1 lNil$e)) :pattern ((llist_all2$j ?v0 lNil$a ?v1)))) :named a42))
(assert (! (forall ((?v0 B_a_b_prod_bool_fun_fun$) (?v1 A_b_prod_llist$)) (! (= (llist_all2$k ?v0 lNil$a ?v1) (= ?v1 lNil$d)) :pattern ((llist_all2$k ?v0 lNil$a ?v1)))) :named a43))
(assert (! (forall ((?v0 B_b_a_prod_bool_fun_fun$) (?v1 B_a_prod_llist$)) (! (= (llist_all2$l ?v0 lNil$a ?v1) (= ?v1 lNil$c)) :pattern ((llist_all2$l ?v0 lNil$a ?v1)))) :named a44))
(assert (! (forall ((?v0 B_b_b_prod_bool_fun_fun$) (?v1 B_b_prod_llist$)) (! (= (llist_all2$m ?v0 lNil$a ?v1) (= ?v1 lNil$b)) :pattern ((llist_all2$m ?v0 lNil$a ?v1)))) :named a45))
(assert (! (forall ((?v0 A_a_a_prod_bool_fun_fun$) (?v1 A_a_prod_llist$)) (! (= (llist_all2$n ?v0 lNil$ ?v1) (= ?v1 lNil$e)) :pattern ((llist_all2$n ?v0 lNil$ ?v1)))) :named a46))
(assert (! (forall ((?v0 A_a_b_prod_bool_fun_fun$) (?v1 A_b_prod_llist$)) (! (= (llist_all2$o ?v0 lNil$ ?v1) (= ?v1 lNil$d)) :pattern ((llist_all2$o ?v0 lNil$ ?v1)))) :named a47))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$e (fun_app$h (lzip$ ?v0) ?v1)) (or (lfinite$ ?v0) (lfinite$ ?v1)))) :named a48))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$)) (= (lfinite$d (fun_app$i (lzip$a ?v0) ?v1)) (or (lfinite$ ?v0) (lfinite$a ?v1)))) :named a49))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$)) (= (lfinite$c (fun_app$j (lzip$b ?v0) ?v1)) (or (lfinite$a ?v0) (lfinite$ ?v1)))) :named a50))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (lfinite$b (fun_app$k (lzip$c ?v0) ?v1)) (or (lfinite$a ?v0) (lfinite$a ?v1)))) :named a51))
(assert (! (forall ((?v0 A_llist$) (?v1 B_b_prod_llist$)) (= (lfinite$g (lzip$d ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$b ?v1)))) :named a52))
(assert (! (forall ((?v0 A_llist$) (?v1 B_a_prod_llist$)) (= (lfinite$h (lzip$e ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$c ?v1)))) :named a53))
(assert (! (forall ((?v0 A_llist$) (?v1 A_b_prod_llist$)) (= (lfinite$i (lzip$f ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$d ?v1)))) :named a54))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (lfinite$j (lzip$g ?v0 ?v1)) (or (lfinite$ ?v0) (lfinite$e ?v1)))) :named a55))
(assert (! (forall ((?v0 B_llist$) (?v1 B_b_prod_llist$)) (= (lfinite$k (lzip$h ?v0 ?v1)) (or (lfinite$a ?v0) (lfinite$b ?v1)))) :named a56))
(assert (! (forall ((?v0 B_llist$) (?v1 B_a_prod_llist$)) (= (lfinite$l (lzip$i ?v0 ?v1)) (or (lfinite$a ?v0) (lfinite$c ?v1)))) :named a57))
(assert (! (= (lfinite$ lNil$) true) :named a58))
(assert (! (= (lfinite$a lNil$a) true) :named a59))
(assert (! (= (lfinite$b lNil$b) true) :named a60))
(assert (! (= (lfinite$c lNil$c) true) :named a61))
(assert (! (= (lfinite$d lNil$d) true) :named a62))
(assert (! (= (lfinite$e lNil$e) true) :named a63))
(assert (! (= (lfinite$f lNil$f) true) :named a64))
(assert (! (= (lfinite$g lNil$g) true) :named a65))
(assert (! (= (lfinite$h lNil$h) true) :named a66))
(assert (! (= (lfinite$i lNil$i) true) :named a67))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (not (lfinite$ (iterates$ ?v0 ?v1)))) :named a68))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (not (lfinite$a (iterates$a ?v0 ?v1)))) :named a69))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_fun$) (?v1 B_b_prod$)) (not (lfinite$b (iterates$b ?v0 ?v1)))) :named a70))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_fun$) (?v1 B_a_prod$)) (not (lfinite$c (iterates$c ?v0 ?v1)))) :named a71))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod$)) (not (lfinite$d (iterates$d ?v0 ?v1)))) :named a72))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 A_a_prod$)) (not (lfinite$e (iterates$e ?v0 ?v1)))) :named a73))
(assert (! (forall ((?v0 B_a_a_prod_prod_b_a_a_prod_prod_fun$) (?v1 B_a_a_prod_prod$)) (not (lfinite$f (iterates$f ?v0 ?v1)))) :named a74))
(assert (! (forall ((?v0 A_b_b_prod_prod_a_b_b_prod_prod_fun$) (?v1 A_b_b_prod_prod$)) (not (lfinite$g (iterates$g ?v0 ?v1)))) :named a75))
(assert (! (forall ((?v0 A_b_a_prod_prod_a_b_a_prod_prod_fun$) (?v1 A_b_a_prod_prod$)) (not (lfinite$h (iterates$h ?v0 ?v1)))) :named a76))
(assert (! (forall ((?v0 A_a_b_prod_prod_a_a_b_prod_prod_fun$) (?v1 A_a_b_prod_prod$)) (not (lfinite$i (iterates$i ?v0 ?v1)))) :named a77))
(assert (! (forall ((?v0 B_b_prod_b_bool_fun_fun$) (?v1 B_b_prod$) (?v2 B_b_prod_llist$) (?v3 B$) (?v4 B_llist$)) (! (= (fun_app$ (llist_all2$g ?v0 (lCons$b ?v1 ?v2)) (lCons$a ?v3 ?v4)) (and (fun_app$d (fun_app$l ?v0 ?v1) ?v3) (fun_app$ (llist_all2$g ?v0 ?v2) ?v4))) :pattern ((fun_app$ (llist_all2$g ?v0 (lCons$b ?v1 ?v2)) (lCons$a ?v3 ?v4))))) :named a78))
(assert (! (forall ((?v0 B_b_prod_a_a_prod_bool_fun_fun$) (?v1 B_b_prod$) (?v2 B_b_prod_llist$) (?v3 A_a_prod$) (?v4 A_a_prod_llist$)) (! (= (llist_all2$p ?v0 (lCons$b ?v1 ?v2) (lCons$e ?v3 ?v4)) (and (fun_app$m (fun_app$n ?v0 ?v1) ?v3) (llist_all2$p ?v0 ?v2 ?v4))) :pattern ((llist_all2$p ?v0 (lCons$b ?v1 ?v2) (lCons$e ?v3 ?v4))))) :named a79))
(assert (! (forall ((?v0 B_b_prod_a_b_prod_bool_fun_fun$) (?v1 B_b_prod$) (?v2 B_b_prod_llist$) (?v3 A_b_prod$) (?v4 A_b_prod_llist$)) (! (= (llist_all2$q ?v0 (lCons$b ?v1 ?v2) (lCons$d ?v3 ?v4)) (and (fun_app$o (fun_app$p ?v0 ?v1) ?v3) (llist_all2$q ?v0 ?v2 ?v4))) :pattern ((llist_all2$q ?v0 (lCons$b ?v1 ?v2) (lCons$d ?v3 ?v4))))) :named a80))
(assert (! (forall ((?v0 B_b_prod_b_a_prod_bool_fun_fun$) (?v1 B_b_prod$) (?v2 B_b_prod_llist$) (?v3 B_a_prod$) (?v4 B_a_prod_llist$)) (! (= (llist_all2$r ?v0 (lCons$b ?v1 ?v2) (lCons$c ?v3 ?v4)) (and (fun_app$q (fun_app$r ?v0 ?v1) ?v3) (llist_all2$r ?v0 ?v2 ?v4))) :pattern ((llist_all2$r ?v0 (lCons$b ?v1 ?v2) (lCons$c ?v3 ?v4))))) :named a81))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_bool_fun_fun$) (?v1 B_b_prod$) (?v2 B_b_prod_llist$) (?v3 B_b_prod$) (?v4 B_b_prod_llist$)) (! (= (llist_all2$s ?v0 (lCons$b ?v1 ?v2) (lCons$b ?v3 ?v4)) (and (fun_app$s (fun_app$t ?v0 ?v1) ?v3) (llist_all2$s ?v0 ?v2 ?v4))) :pattern ((llist_all2$s ?v0 (lCons$b ?v1 ?v2) (lCons$b ?v3 ?v4))))) :named a82))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (fun_app$b (fun_app$c (llist_all2$a ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4)) (and (fun_app$f (fun_app$g ?v0 ?v1) ?v3) (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v2) ?v4))) :pattern ((fun_app$b (fun_app$c (llist_all2$a ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4))))) :named a83))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B$) (?v2 B_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (fun_app$b (llist_all2$c ?v0 (lCons$a ?v1 ?v2)) (lCons$ ?v3 ?v4)) (and (fun_app$f (fun_app$u ?v0 ?v1) ?v3) (fun_app$b (llist_all2$c ?v0 ?v2) ?v4))) :pattern ((fun_app$b (llist_all2$c ?v0 (lCons$a ?v1 ?v2)) (lCons$ ?v3 ?v4))))) :named a84))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B$) (?v2 B_llist$) (?v3 B$) (?v4 B_llist$)) (! (= (fun_app$ (fun_app$a (llist_all2$b ?v0) (lCons$a ?v1 ?v2)) (lCons$a ?v3 ?v4)) (and (fun_app$d (fun_app$e ?v0 ?v1) ?v3) (fun_app$ (fun_app$a (llist_all2$b ?v0) ?v2) ?v4))) :pattern ((fun_app$ (fun_app$a (llist_all2$b ?v0) (lCons$a ?v1 ?v2)) (lCons$a ?v3 ?v4))))) :named a85))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 B$) (?v4 B_llist$)) (! (= (fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2)) (lCons$a ?v3 ?v4)) (and (fun_app$d (fun_app$v ?v0 ?v1) ?v3) (fun_app$ (llist_all2$ ?v0 ?v2) ?v4))) :pattern ((fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2)) (lCons$a ?v3 ?v4))))) :named a86))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_llist$)) (! (= (lfinite$b (lCons$b ?v0 ?v1)) (lfinite$b ?v1)) :pattern ((lCons$b ?v0 ?v1)))) :named a87))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_llist$)) (! (= (lfinite$c (lCons$c ?v0 ?v1)) (lfinite$c ?v1)) :pattern ((lCons$c ?v0 ?v1)))) :named a88))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$)) (! (= (lfinite$d (lCons$d ?v0 ?v1)) (lfinite$d ?v1)) :pattern ((lCons$d ?v0 ?v1)))) :named a89))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (lfinite$e (lCons$e ?v0 ?v1)) (lfinite$e ?v1)) :pattern ((lCons$e ?v0 ?v1)))) :named a90))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a91))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a92))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_llist$)) (! (= (lfinite$b (lCons$b ?v0 ?v1)) (lfinite$b ?v1)) :pattern ((lCons$b ?v0 ?v1)))) :named a93))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_llist$)) (! (= (lfinite$c (lCons$c ?v0 ?v1)) (lfinite$c ?v1)) :pattern ((lCons$c ?v0 ?v1)))) :named a94))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$)) (! (= (lfinite$d (lCons$d ?v0 ?v1)) (lfinite$d ?v1)) :pattern ((lCons$d ?v0 ?v1)))) :named a95))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (lfinite$e (lCons$e ?v0 ?v1)) (lfinite$e ?v1)) :pattern ((lCons$e ?v0 ?v1)))) :named a96))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a97))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a98))
(assert (! (forall ((?v0 B_b_prod_list$)) (lfinite$b (llist_of$ ?v0))) :named a99))
(assert (! (forall ((?v0 B_a_prod_list$)) (lfinite$c (llist_of$a ?v0))) :named a100))
(assert (! (forall ((?v0 A_b_prod_list$)) (lfinite$d (llist_of$b ?v0))) :named a101))
(assert (! (forall ((?v0 A_a_prod_list$)) (lfinite$e (llist_of$c ?v0))) :named a102))
(assert (! (forall ((?v0 A_list$)) (lfinite$ (llist_of$d ?v0))) :named a103))
(assert (! (forall ((?v0 B_list$)) (lfinite$a (llist_of$e ?v0))) :named a104))
(assert (! (forall ((?v0 B_b_prod_llist$)) (= (lfinite$b (ltl$b ?v0)) (lfinite$b ?v0))) :named a105))
(assert (! (forall ((?v0 B_a_prod_llist$)) (= (lfinite$c (ltl$c ?v0)) (lfinite$c ?v0))) :named a106))
(assert (! (forall ((?v0 A_b_prod_llist$)) (= (lfinite$d (ltl$d ?v0)) (lfinite$d ?v0))) :named a107))
(assert (! (forall ((?v0 A_a_prod_llist$)) (= (lfinite$e (ltl$e ?v0)) (lfinite$e ?v0))) :named a108))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$ (ltl$ ?v0)) (lfinite$ ?v0))) :named a109))
(assert (! (forall ((?v0 B_llist$)) (= (lfinite$a (ltl$a ?v0)) (lfinite$a ?v0))) :named a110))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a111))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a112))
(assert (! (forall ((?v0 B_list$) (?v1 B_list$)) (= (= (llist_of$e ?v0) (llist_of$e ?v1)) (= ?v0 ?v1))) :named a113))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$d ?v0) (llist_of$d ?v1)) (= ?v0 ?v1))) :named a114))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$k (lzip$c ?v0) lNil$a) lNil$b) :pattern ((lzip$c ?v0)))) :named a115))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$i (lzip$a ?v0) lNil$a) lNil$d) :pattern ((lzip$a ?v0)))) :named a116))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$j (lzip$b ?v0) lNil$) lNil$c) :pattern ((lzip$b ?v0)))) :named a117))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$h (lzip$ ?v0) lNil$) lNil$e) :pattern ((lzip$ ?v0)))) :named a118))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$k (lzip$c lNil$a) ?v0) lNil$b) :pattern ((fun_app$k (lzip$c lNil$a) ?v0)))) :named a119))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$j (lzip$b lNil$a) ?v0) lNil$c) :pattern ((fun_app$j (lzip$b lNil$a) ?v0)))) :named a120))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$i (lzip$a lNil$) ?v0) lNil$d) :pattern ((fun_app$i (lzip$a lNil$) ?v0)))) :named a121))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$h (lzip$ lNil$) ?v0) lNil$e) :pattern ((fun_app$h (lzip$ lNil$) ?v0)))) :named a122))
(check-sat)
;(get-unsat-core)
