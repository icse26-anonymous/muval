; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 506
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun xs$ () A_llist$)
(declare-fun bot$ () A_llist_set$)
(declare-fun bot$a () A_llist_bool_fun$)
(declare-fun bot$b () Bool)
(declare-fun lSup$ (A_llist_set$) A_llist$)
(declare-fun insert$ (A_llist$ A_llist_set$) A_llist_set$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(assert (! (not (= (lSup$ (insert$ xs$ bot$)) xs$)) :named a0))
(assert (! (forall ((?v0 A_llist$)) (member$ ?v0 (insert$ ?v0 bot$))) :named a1))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$)) (= (insert$ ?v0 (insert$ ?v0 ?v1)) (insert$ ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist_set$)) (= (member$ ?v0 (insert$ ?v1 ?v2)) (or (= ?v0 ?v1) (member$ ?v0 ?v2)))) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist$)) (=> (=> (not (member$ ?v0 ?v1)) (= ?v0 ?v2)) (member$ ?v0 (insert$ ?v2 ?v1)))) :named a4))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (= (= (collect$ ?v0) bot$) (forall ((?v1 A_llist$)) (not (fun_app$ ?v0 ?v1))))) :named a5))
(assert (! (forall ((?v0 A_llist_set$)) (= (forall ((?v1 A_llist$)) (not (member$ ?v1 ?v0))) (= ?v0 bot$))) :named a6))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (= (= bot$ (collect$ ?v0)) (forall ((?v1 A_llist$)) (not (fun_app$ ?v0 ?v1))))) :named a7))
(assert (! (forall ((?v0 A_llist$)) (= (member$ ?v0 bot$) false)) :named a8))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ bot$a ?v0) bot$b) :pattern ((fun_app$ bot$a ?v0)))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (= (= (insert$ ?v0 (insert$ ?v1 bot$)) (insert$ ?v2 (insert$ ?v3 bot$))) (or (and (= ?v0 ?v2) (= ?v1 ?v3)) (and (= ?v0 ?v3) (= ?v1 ?v2))))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (member$ ?v0 (insert$ ?v1 bot$)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (= (insert$ ?v0 bot$) (insert$ ?v1 bot$)) (= ?v0 ?v1))) :named a12))
(assert (! (= bot$ (collect$ bot$a)) :named a13))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ bot$a ?v0) bot$b) :pattern ((fun_app$ bot$a ?v0)))) :named a14))
(assert (! (forall ((?v0 A_llist$)) (=> (member$ ?v0 bot$) false)) :named a15))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (= ?v0 bot$) (not (member$ ?v1 ?v0)))) :named a16))
(assert (! (forall ((?v0 A_llist_set$)) (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) false)) (= ?v0 bot$))) :named a17))
(check-sat)
;(get-unsat-core)
