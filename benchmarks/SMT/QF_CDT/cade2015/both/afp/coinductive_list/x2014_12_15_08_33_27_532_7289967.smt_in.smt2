; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 646
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-datatypes () ((A_llist_list$ (nil$) (cons$ (hd$ A_llist$) (tl$ A_llist_list$)))
  (A_list$ (nil$a) (cons$a (hd$a A$) (tl$a A_list$)))))
(declare-fun m$ () Nat$)
(declare-fun n$ () Nat$)
(declare-fun x$ () A$)
(declare-fun n$a () Nat$)
(declare-fun xs$ () A_llist$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun xss$ () A_llist_list$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist_llist$ Nat$) A_llist$)
(declare-fun size$ (A_llist_list$) Nat$)
(declare-fun xss$a () A_llist_llist$)
(declare-fun xss$b () A_llist_llist$)
(declare-fun xssa$ () A_llist_llist$)
(declare-fun lnth$a (A_llist$ Nat$) A$)
(declare-fun size$a (A_list$) Nat$)
(declare-fun lappend$ (A_llist_llist$ A_llist_llist$) A_llist_llist$)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lappend$a (A_llist$ A_llist$) A_llist$)
(declare-fun llength$a (A_llist_llist$) Enat$)
(declare-fun llist_of$ (A_llist_list$) A_llist_llist$)
(declare-fun llist_of$a (A_list$) A_llist$)
(assert (! (not (less$ (enat$ (suc$ n$)) (llength$ (lnth$ (lappend$ (llist_of$ xss$) (lCons$a (lCons$ x$ xs$) xss$a)) (size$ xss$))))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a2))
(assert (! (less$ (enat$ n$) (llength$ (lnth$ (lCons$a xs$ xss$a) m$))) :named a3))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$a ?v0) (llist_of$a ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_llist_list$) (?v1 A_llist_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (! (= (lappend$ (lCons$a ?v0 ?v1) ?v2) (lCons$a ?v0 (lappend$ ?v1 ?v2))) :pattern ((lappend$ (lCons$a ?v0 ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (lappend$a (lCons$ ?v0 ?v1) ?v2) (lCons$ ?v0 (lappend$a ?v1 ?v2))) :pattern ((lappend$a (lCons$ ?v0 ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 Nat$)) (! (= (lnth$ (lCons$a ?v0 ?v1) (suc$ ?v2)) (lnth$ ?v1 ?v2)) :pattern ((lnth$ (lCons$a ?v0 ?v1) (suc$ ?v2))))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 Nat$)) (! (= (lnth$a (lCons$ ?v0 ?v1) (suc$ ?v2)) (lnth$a ?v1 ?v2)) :pattern ((lnth$a (lCons$ ?v0 ?v1) (suc$ ?v2))))) :named a9))
(assert (! (forall ((?v0 A_list$)) (= (llength$ (llist_of$a ?v0)) (enat$ (size$a ?v0)))) :named a10))
(assert (! (forall ((?v0 A_llist_list$)) (= (llength$a (llist_of$ ?v0)) (enat$ (size$ ?v0)))) :named a11))
(assert (! (= xssa$ (lappend$ (llist_of$ xss$) (lCons$a (lCons$ x$ xs$) xss$a))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$a (lappend$a ?v0 ?v1) ?v2) (lappend$a ?v0 (lappend$a ?v1 ?v2)))) :named a13))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_llist$)) (=> (less$ (enat$ ?v0) (llength$ ?v1)) (= (lnth$a (lappend$a ?v1 ?v2) ?v0) (lnth$a ?v1 ?v0)))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (=> (less$ (enat$ ?v0) (llength$a ?v1)) (= (lnth$ (lappend$ ?v1 ?v2) ?v0) (lnth$ ?v1 ?v0)))) :named a16))
(assert (! (less$ (enat$ m$) (llength$a (lCons$a xs$ xss$a))) :named a17))
(assert (! (less$ (enat$ n$a) (llength$ (lconcat$ xss$b))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a21))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (less$ ?v0 (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a22))
(check-sat)
;(get-unsat-core)
