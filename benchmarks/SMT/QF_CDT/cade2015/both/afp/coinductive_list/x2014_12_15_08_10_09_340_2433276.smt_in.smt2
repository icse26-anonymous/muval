; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 440
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun z$ () A$)
(declare-fun xs$ () A_llist$)
(declare-fun zs$ () A_llist$)
(declare-fun xsa$ () A_llist$)
(declare-fun zsa$ () A_llist$)
(declare-fun thesis$ () Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun lmember$ (A$ A_llist$) Bool)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun pred_llist$ (A_bool_fun$ A_llist$) Bool)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 A_llist$)) (=> (and (= xsa$ (lCons$ z$ ?v0)) (lprefix$ zsa$ ?v0)) thesis$)) :named a1))
(assert (! (lprefix$ zs$ xs$) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a3))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a4))
(assert (! (lfinite$ zsa$) :named a5))
(assert (! (lprefix$ (lCons$ z$ zsa$) xsa$) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (lprefix$ (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (lprefix$ ?v1 ?v3))) :pattern ((lprefix$ (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3))))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (lprefix$ (lCons$ ?v0 ?v1) ?v2) (exists ((?v3 A_llist$)) (and (= ?v2 (lCons$ ?v0 ?v3)) (lprefix$ ?v1 ?v3))))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v0)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v2 ?v1)) (or (lprefix$ ?v0 ?v2) (lprefix$ ?v2 ?v0)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v2)) (lprefix$ ?v0 ?v2))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A$)) (=> (lprefix$ ?v0 ?v1) (lprefix$ (lCons$ ?v2 ?v0) (lCons$ ?v2 ?v1)))) :named a12))
(assert (! (lfinite$ zs$) :named a13))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2)) (and (fun_app$ ?v0 ?v1) (pred_llist$ ?v0 ?v2))) :pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2))))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (lmember$ ?v0 (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (lmember$ ?v0 ?v2))) :pattern ((lmember$ ?v0 (lCons$ ?v1 ?v2))))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (lprefix$ ?v0 (lCons$ ?v1 ?v2)) (or (= ?v0 lNil$) (exists ((?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 ?v3)) (lprefix$ ?v3 ?v2)))))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lprefix$ ?v0 ?v1) (or (exists ((?v2 A_llist$)) (and (= ?v0 lNil$) (= ?v1 ?v2))) (exists ((?v2 A_llist$) (?v3 A_llist$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 (lCons$ ?v4 ?v3)) (lprefix$ ?v2 ?v3))))))) :named a17))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lprefix$ (lCons$ ?v0 ?v1) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))) :named a18))
(check-sat)
;(get-unsat-core)
