; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 159
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort A_llist_b_llist_fun$ 0)
(declare-sort A_a_llist_b_llist_fun_fun$ 0)
(declare-sort A_llist_b_llist_fun_bool_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_llist_fun_b_llist_fun$ 0)
(declare-sort A_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun$ 0)
(declare-sort A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ 0)
(declare-codatatypes () ((B_llist$ (lNil$) (lCons$ (lhd$ B$) (ltl$ B_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))))
(declare-fun f$ (A$) B$)
(declare-fun f$a (A_llist_b_llist_fun$) A_llist_b_llist_fun$)
(declare-fun uu$ (A_llist_b_llist_fun$) A_a_llist_b_llist_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun uua$ () A_llist_b_llist_fun_b_llist_fun$)
(declare-fun fun_app$ (A_llist_b_llist_fun_b_llist_fun$ A_llist_b_llist_fun$) B_llist$)
(declare-fun fun_ord$ (B_llist_b_llist_bool_fun_fun$) A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$)
(declare-fun lprefix$ () B_llist_b_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_b_llist_fun$ A_llist$) B_llist$)
(declare-fun fun_app$b (A_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun$ A_a_llist_b_llist_fun_fun$) A_llist_b_llist_fun$)
(declare-fun fun_app$c (A_a_llist_b_llist_fun_fun$ A$) A_llist_b_llist_fun$)
(declare-fun fun_app$d (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun fun_app$e (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun fun_app$f (A_llist_b_llist_fun_bool_fun$ A_llist_b_llist_fun$) Bool)
(declare-fun fun_app$g (A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ A_llist_b_llist_fun$) A_llist_b_llist_fun_bool_fun$)
(declare-fun lprefix$a (A_llist$ A_llist$) Bool)
(declare-fun monotone$ (A_llist_b_llist_fun_a_llist_b_llist_fun_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ A_llist_b_llist_fun_b_llist_fun$) Bool)
(declare-fun case_llist$ (B_llist$) A_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun$)
(assert (! (forall ((?v0 A_llist_b_llist_fun$)) (! (= (fun_app$ uua$ ?v0) (fun_app$a (fun_app$b (case_llist$ lNil$) (uu$ ?v0)) xs$)) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist_b_llist_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$a (fun_app$c (uu$ ?v0) ?v1) ?v2) (lCons$ (f$ ?v1) (fun_app$a ?v0 ?v2))) :pattern ((fun_app$a (fun_app$c (uu$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (not (monotone$ (fun_ord$ lprefix$) lprefix$ uua$)) :named a2))
(assert (! (forall ((?v0 A_llist$)) (lprefix$a ?v0 ?v0)) :named a3))
(assert (! (forall ((?v0 B_llist$)) (fun_app$d (fun_app$e lprefix$ ?v0) ?v0)) :named a4))
(assert (! (forall ((?v0 A_llist$)) (lprefix$a ?v0 ?v0)) :named a5))
(assert (! (forall ((?v0 B_llist$)) (fun_app$d (fun_app$e lprefix$ ?v0) ?v0)) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a7))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (lprefix$a (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (lprefix$a ?v1 ?v3))) :pattern ((lprefix$a (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3))))) :named a9))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (! (= (fun_app$d (fun_app$e lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$d (fun_app$e lprefix$ ?v1) ?v3))) :pattern ((fun_app$d (fun_app$e lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (! (= (lprefix$a lNil$a ?v0) true) :pattern ((lprefix$a lNil$a ?v0)))) :named a11))
(assert (! (forall ((?v0 B_llist$)) (! (= (fun_app$d (fun_app$e lprefix$ lNil$) ?v0) true) :pattern ((fun_app$d (fun_app$e lprefix$ lNil$) ?v0)))) :named a12))
(assert (! (forall ((?v0 A_llist_b_llist_fun$) (?v1 A_llist$)) (= (fun_app$a (f$a ?v0) ?v1) (fun_app$a (fun_app$b (case_llist$ lNil$) (uu$ ?v0)) ?v1))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (lprefix$a ?v0 (lCons$a ?v1 ?v2)) (or (= ?v0 lNil$a) (exists ((?v3 A_llist$)) (and (= ?v0 (lCons$a ?v1 ?v3)) (lprefix$a ?v3 ?v2)))))) :named a14))
(assert (! (forall ((?v0 B_llist$) (?v1 B$) (?v2 B_llist$)) (= (fun_app$d (fun_app$e lprefix$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 lNil$) (exists ((?v3 B_llist$)) (and (= ?v0 (lCons$ ?v1 ?v3)) (fun_app$d (fun_app$e lprefix$ ?v3) ?v2)))))) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lprefix$a ?v0 ?v1) (or (exists ((?v2 A_llist$)) (and (= ?v0 lNil$a) (= ?v1 ?v2))) (exists ((?v2 A_llist$) (?v3 A_llist$) (?v4 A$)) (and (= ?v0 (lCons$a ?v4 ?v2)) (and (= ?v1 (lCons$a ?v4 ?v3)) (lprefix$a ?v2 ?v3))))))) :named a16))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (fun_app$d (fun_app$e lprefix$ ?v0) ?v1) (or (exists ((?v2 B_llist$)) (and (= ?v0 lNil$) (= ?v1 ?v2))) (exists ((?v2 B_llist$) (?v3 B_llist$) (?v4 B$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 (lCons$ ?v4 ?v3)) (fun_app$d (fun_app$e lprefix$ ?v2) ?v3))))))) :named a17))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (lprefix$a (lCons$a ?v0 ?v1) ?v2) (exists ((?v3 A_llist$)) (and (= ?v2 (lCons$a ?v0 ?v3)) (lprefix$a ?v1 ?v3))))) :named a18))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B_llist$)) (= (fun_app$d (fun_app$e lprefix$ (lCons$ ?v0 ?v1)) ?v2) (exists ((?v3 B_llist$)) (and (= ?v2 (lCons$ ?v0 ?v3)) (fun_app$d (fun_app$e lprefix$ ?v1) ?v3))))) :named a19))
(assert (! (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$a)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$a ?v1 ?v2))))) :named a20))
(assert (! (forall ((?v0 B_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 B$) (?v2 B_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))) :named a21))
(assert (! (forall ((?v0 B_llist$) (?v1 A_a_llist_b_llist_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$a (fun_app$b (case_llist$ ?v0) ?v1) (lCons$a ?v2 ?v3)) (fun_app$a (fun_app$c ?v1 ?v2) ?v3)) :pattern ((fun_app$a (fun_app$b (case_llist$ ?v0) ?v1) (lCons$a ?v2 ?v3))))) :named a22))
(assert (! (forall ((?v0 B_llist$) (?v1 A_a_llist_b_llist_fun_fun$)) (! (= (fun_app$a (fun_app$b (case_llist$ ?v0) ?v1) lNil$a) ?v0) :pattern ((fun_app$b (case_llist$ ?v0) ?v1)))) :named a23))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lprefix$a (lCons$a ?v0 ?v1) lNil$a) false) :pattern ((lCons$a ?v0 ?v1)))) :named a24))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (! (= (fun_app$d (fun_app$e lprefix$ (lCons$ ?v0 ?v1)) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))) :named a25))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$a) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) false))) false)) :named a26))
(assert (! (forall ((?v0 B_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 B$) (?v2 B_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false))) false)) :named a27))
(assert (! (forall ((?v0 A_llist_b_llist_fun_b_llist_fun$) (?v1 A_llist_b_llist_fun$) (?v2 B_llist$) (?v3 A_llist_b_llist_fun_b_llist_fun$) (?v4 B_llist_b_llist_bool_fun_fun$)) (=> (and (forall ((?v5 A_llist_b_llist_fun$)) (= (fun_app$ ?v0 ?v5) (ite (fun_app$f (fun_app$g (fun_ord$ lprefix$) ?v5) ?v1) ?v2 (fun_app$ ?v3 ?v5)))) (and (forall ((?v5 A_llist_b_llist_fun$) (?v6 A_llist_b_llist_fun$)) (=> (and (fun_app$f (fun_app$g (fun_ord$ lprefix$) ?v5) ?v6) (not (fun_app$f (fun_app$g (fun_ord$ lprefix$) ?v5) ?v1))) (fun_app$d (fun_app$e ?v4 (fun_app$ ?v3 ?v5)) (fun_app$ ?v3 ?v6)))) (and (forall ((?v5 A_llist_b_llist_fun$)) (=> (not (fun_app$f (fun_app$g (fun_ord$ lprefix$) ?v5) ?v1)) (fun_app$d (fun_app$e ?v4 ?v2) (fun_app$ ?v3 ?v5)))) (fun_app$d (fun_app$e ?v4 ?v2) ?v2)))) (monotone$ (fun_ord$ lprefix$) ?v4 ?v0))) :named a28))
(assert (! (forall ((?v0 A_llist_b_llist_fun$) (?v1 A_llist_b_llist_fun$) (?v2 A_llist_b_llist_fun$)) (=> (and (fun_app$f (fun_app$g (fun_ord$ lprefix$) ?v0) ?v1) (fun_app$f (fun_app$g (fun_ord$ lprefix$) ?v1) ?v2)) (fun_app$f (fun_app$g (fun_ord$ lprefix$) ?v0) ?v2))) :named a29))
(assert (! (forall ((?v0 A_llist_b_llist_fun$) (?v1 A_llist_b_llist_fun$)) (=> (and (fun_app$f (fun_app$g (fun_ord$ lprefix$) ?v0) ?v1) (fun_app$f (fun_app$g (fun_ord$ lprefix$) ?v1) ?v0)) (= ?v0 ?v1))) :named a30))
(check-sat)
;(get-unsat-core)
