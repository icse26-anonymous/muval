; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 605
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_a_bool_fun_fun$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_llist_set$ 0)
(declare-sort A_bool_fun_a_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_bool_fun_a_llist_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))))
(declare-fun uu$ () A_llist_bool_fun$)
(declare-fun uua$ () A_llist_llist_bool_fun$)
(declare-fun uub$ () A_bool_fun$)
(declare-fun uuc$ () A_llist_bool_fun$)
(declare-fun uud$ (A_llist_llist_bool_fun$) A_llist_llist_llist_a_llist_llist_bool_fun_fun$)
(declare-fun uue$ (A_bool_fun$) A_llist_a_bool_fun_fun$)
(declare-fun uuf$ (A_llist_bool_fun$) A_llist_llist_a_llist_bool_fun_fun$)
(declare-fun uug$ (A_llist_llist_bool_fun$) A_llist_llist_bool_fun_a_llist_llist_bool_fun_fun$)
(declare-fun uuh$ (A_bool_fun$) A_bool_fun_a_bool_fun_fun$)
(declare-fun uui$ (A_llist_bool_fun$) A_llist_bool_fun_a_llist_bool_fun_fun$)
(declare-fun xss$ () A_llist_llist$)
(declare-fun lset$ (A_llist_llist_llist$) A_llist_llist_set$)
(declare-fun xssa$ () A_llist_llist$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lset$a (A_llist_llist$) A_llist_set$)
(declare-fun lset$b (A_llist$) A_set$)
(declare-fun lnull$a (A_llist_llist$) Bool)
(declare-fun lnull$b (A_llist_llist_llist$) Bool)
(declare-fun member$ (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun collect$ (A_llist_llist_bool_fun$) A_llist_llist_set$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun lfilter$ (A_llist_bool_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun lfinite$ (A_llist_llist$) Bool)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun member$b (A$ A_set$) Bool)
(declare-fun member$c (A_llist_llist_llist$ A_llist_llist_llist_set$) Bool)
(declare-fun collect$a (A_bool_fun$) A_set$)
(declare-fun collect$b (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$a (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$b (A_llist_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$c (A_llist_llist_a_llist_bool_fun_fun$ A_llist_llist$) A_llist_bool_fun$)
(declare-fun fun_app$d (A_bool_fun$ A$) Bool)
(declare-fun fun_app$e (A_llist_a_bool_fun_fun$ A_llist$) A_bool_fun$)
(declare-fun fun_app$f (A_llist_llist_bool_fun_a_llist_llist_bool_fun_fun$ A_llist_llist_bool_fun$) A_llist_llist_bool_fun$)
(declare-fun fun_app$g (A_llist_bool_fun_a_llist_bool_fun_fun$ A_llist_bool_fun$) A_llist_bool_fun$)
(declare-fun fun_app$h (A_bool_fun_a_bool_fun_fun$ A_bool_fun$) A_bool_fun$)
(declare-fun lfilter$a (A_llist_llist_bool_fun$ A_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun lfilter$b (A_bool_fun$ A_llist$) A_llist$)
(declare-fun lfinite$a (A_llist$) Bool)
(declare-fun lfinite$b (A_llist_llist_llist$) Bool)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uu$ ?v0) (not (lnull$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist$)) (! (= (fun_app$a (fun_app$b (uud$ ?v0) ?v1) ?v2) (and (member$ ?v2 (lset$ ?v1)) (fun_app$a ?v0 ?v2))) :pattern ((fun_app$a (fun_app$b (uud$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$c (uuf$ ?v0) ?v1) ?v2) (and (member$a ?v2 (lset$a ?v1)) (fun_app$ ?v0 ?v2))) :pattern ((fun_app$ (fun_app$c (uuf$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$)) (! (= (fun_app$d (fun_app$e (uue$ ?v0) ?v1) ?v2) (and (member$b ?v2 (lset$b ?v1)) (fun_app$d ?v0 ?v2))) :pattern ((fun_app$d (fun_app$e (uue$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_bool_fun$) (?v2 A_llist_llist$)) (! (= (fun_app$a (fun_app$f (uug$ ?v0) ?v1) ?v2) (and (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2))) :pattern ((fun_app$a (fun_app$f (uug$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$g (uui$ ?v0) ?v1) ?v2) (and (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$g (uui$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$d (fun_app$h (uuh$ ?v0) ?v1) ?v2) (and (fun_app$d ?v0 ?v2) (fun_app$d ?v1 ?v2))) :pattern ((fun_app$d (fun_app$h (uuh$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$a uua$ ?v0) true) :pattern ((fun_app$a uua$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uuc$ ?v0) true) :pattern ((fun_app$ uuc$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$d uub$ ?v0) true) :pattern ((fun_app$d uub$ ?v0)))) :named a9))
(assert (! (not (and (lfinite$ (lfilter$ uu$ xssa$)) (forall ((?v0 A_llist$)) (=> (member$a ?v0 (lset$a xssa$)) (lfinite$a ?v0))))) :named a10))
(assert (! (= (lconcat$ xssa$) lNil$) :named a11))
(assert (! (lfinite$a (lconcat$ xss$)) :named a12))
(assert (! (lnull$a (lfilter$ uu$ xssa$)) :named a13))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$)) (= (lfilter$a ?v0 (lfilter$a ?v0 ?v1)) (lfilter$a ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lfilter$b ?v0 (lfilter$b ?v0 ?v1)) (lfilter$b ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (= (lfilter$ ?v0 (lfilter$ ?v0 ?v1)) (lfilter$ ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (= (lfilter$a uua$ ?v0) ?v0)) :named a17))
(assert (! (forall ((?v0 A_llist$)) (= (lfilter$b uub$ ?v0) ?v0)) :named a18))
(assert (! (forall ((?v0 A_llist_llist$)) (= (lfilter$ uuc$ ?v0) ?v0)) :named a19))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$)) (= (lset$ (lfilter$a ?v0 ?v1)) (collect$ (fun_app$b (uud$ ?v0) ?v1)))) :named a20))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lset$b (lfilter$b ?v0 ?v1)) (collect$a (fun_app$e (uue$ ?v0) ?v1)))) :named a21))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (= (lset$a (lfilter$ ?v0 ?v1)) (collect$b (fun_app$c (uuf$ ?v0) ?v1)))) :named a22))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$)) (= (lnull$b (lfilter$a ?v0 ?v1)) (forall ((?v2 A_llist_llist$)) (=> (member$ ?v2 (lset$ ?v1)) (not (fun_app$a ?v0 ?v2)))))) :named a23))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lnull$ (lfilter$b ?v0 ?v1)) (forall ((?v2 A$)) (=> (member$b ?v2 (lset$b ?v1)) (not (fun_app$d ?v0 ?v2)))))) :named a24))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (= (lnull$a (lfilter$ ?v0 ?v1)) (forall ((?v2 A_llist$)) (=> (member$a ?v2 (lset$a ?v1)) (not (fun_app$ ?v0 ?v2)))))) :named a25))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_llist$)) (= (= (lfilter$a ?v0 ?v1) ?v1) (forall ((?v2 A_llist_llist$)) (=> (member$ ?v2 (lset$ ?v1)) (fun_app$a ?v0 ?v2))))) :named a26))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (= (lfilter$b ?v0 ?v1) ?v1) (forall ((?v2 A$)) (=> (member$b ?v2 (lset$b ?v1)) (fun_app$d ?v0 ?v2))))) :named a27))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (= (= (lfilter$ ?v0 ?v1) ?v1) (forall ((?v2 A_llist$)) (=> (member$a ?v2 (lset$a ?v1)) (fun_app$ ?v0 ?v2))))) :named a28))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist_bool_fun$) (?v2 A_llist_llist_llist$)) (= (lfilter$a ?v0 (lfilter$a ?v1 ?v2)) (lfilter$a (fun_app$f (uug$ ?v0) ?v1) ?v2))) :named a29))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$) (?v2 A_llist$)) (= (lfilter$b ?v0 (lfilter$b ?v1 ?v2)) (lfilter$b (fun_app$h (uuh$ ?v0) ?v1) ?v2))) :named a30))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_bool_fun$) (?v2 A_llist_llist$)) (= (lfilter$ ?v0 (lfilter$ ?v1 ?v2)) (lfilter$ (fun_app$g (uui$ ?v0) ?v1) ?v2))) :named a31))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$b ?v1))) false)) false)) :named a32))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$b ?v1))) false)) false)) :named a33))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$ ?v1))) false)) false)) :named a34))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$a ?v1))) false)) false)) :named a35))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false)) :named a36))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a37))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$a ?v1))) false)) false)) :named a38))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$ ?v1))) false)) false)) :named a39))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a40))
(assert (! (forall ((?v0 A_llist_llist_llist_set$)) (=> (and (=> (forall ((?v1 A_llist_llist_llist$)) (=> (member$c ?v1 ?v0) (lnull$b ?v1))) false) (=> (not (forall ((?v1 A_llist_llist_llist$)) (=> (member$c ?v1 ?v0) (lnull$b ?v1)))) false)) false)) :named a41))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$a ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$a ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a42))
(assert (! (forall ((?v0 A_llist_llist_set$)) (=> (and (=> (forall ((?v1 A_llist_llist$)) (=> (member$ ?v1 ?v0) (lnull$a ?v1))) false) (=> (not (forall ((?v1 A_llist_llist$)) (=> (member$ ?v1 ?v0) (lnull$a ?v1)))) false)) false)) :named a43))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (=> (and (=> (and (lnull$b ?v0) (lnull$b ?v1)) false) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false)) :named a44))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a45))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a46))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (=> (and (=> (lnull$b ?v0) false) (=> (not (lnull$b ?v0)) false)) false)) :named a47))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)) :named a48))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false)) :named a49))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_bool_fun$) (?v3 A_llist_llist_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_llist_llist$)) (=> (member$ ?v4 (lset$ ?v1)) (= (fun_app$a ?v2 ?v4) (fun_app$a ?v3 ?v4))))) (= (lfilter$a ?v2 ?v0) (lfilter$a ?v3 ?v1)))) :named a50))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_bool_fun$) (?v3 A_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$b ?v4 (lset$b ?v1)) (= (fun_app$d ?v2 ?v4) (fun_app$d ?v3 ?v4))))) (= (lfilter$b ?v2 ?v0) (lfilter$b ?v3 ?v1)))) :named a51))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$) (?v2 A_llist_bool_fun$) (?v3 A_llist_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_llist$)) (=> (member$a ?v4 (lset$a ?v1)) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (lfilter$ ?v2 ?v0) (lfilter$ ?v3 ?v1)))) :named a52))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_bool_fun$)) (=> (lfinite$b ?v0) (lfinite$b (lfilter$a ?v1 ?v0)))) :named a53))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_bool_fun$)) (=> (lfinite$ ?v0) (lfinite$ (lfilter$ ?v1 ?v0)))) :named a54))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (lfinite$a ?v0) (lfinite$a (lfilter$b ?v1 ?v0)))) :named a55))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (=> (lnull$b ?v0) (lfinite$b ?v0))) :named a56))
(assert (! (forall ((?v0 A_llist$)) (=> (lnull$ ?v0) (lfinite$a ?v0))) :named a57))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (lnull$a ?v0) (lfinite$ ?v0))) :named a58))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_bool_fun$)) (! (=> (forall ((?v2 A_llist_llist$)) (=> (member$ ?v2 (lset$ ?v0)) (not (fun_app$a ?v1 ?v2)))) (= (lfilter$a ?v1 ?v0) lNil$b)) :pattern ((lfilter$a ?v1 ?v0)))) :named a59))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (! (=> (forall ((?v2 A$)) (=> (member$b ?v2 (lset$b ?v0)) (not (fun_app$d ?v1 ?v2)))) (= (lfilter$b ?v1 ?v0) lNil$)) :pattern ((lfilter$b ?v1 ?v0)))) :named a60))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_bool_fun$)) (! (=> (forall ((?v2 A_llist$)) (=> (member$a ?v2 (lset$a ?v0)) (not (fun_app$ ?v1 ?v2)))) (= (lfilter$ ?v1 ?v0) lNil$a)) :pattern ((lfilter$ ?v1 ?v0)))) :named a61))
(check-sat)
;(get-unsat-core)
