; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 632
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun max$ (A_a_bool_fun_fun$ A$ A$) A$)
(declare-fun min$ (A_a_bool_fun_fun$ A$ A$) A$)
(declare-fun xsa$ () A_llist$)
(declare-fun ysa$ () A_llist$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun less_eq$ () A_a_bool_fun_fun$)
(declare-fun lprefix$ (A_llist$) A_llist_bool_fun$)
(declare-fun lsorted$ (A_a_bool_fun_fun$) A_llist_bool_fun$)
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun atLeastAtMost$ (A_a_bool_fun_fun$ A$ A$) A_set$)
(assert (! (not (fun_app$ (fun_app$a less_eq$ (lhd$ ysa$)) (lhd$ (ltl$ ysa$)))) :named a0))
(assert (! (not (lnull$ (ltl$ xsa$))) :named a1))
(assert (! (fun_app$b (lprefix$ xsa$) ysa$) :named a2))
(assert (! (fun_app$b (lsorted$ less_eq$) ysa$) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (= ?v0 ?v1) (fun_app$ (fun_app$a less_eq$ ?v1) ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (max$ less_eq$ ?v0 ?v1) (ite (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) ?v1 ?v0)) :pattern ((max$ less_eq$ ?v0 ?v1)))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (min$ less_eq$ ?v0 ?v1) (ite (fun_app$ (fun_app$a less_eq$ ?v0) ?v1) ?v0 ?v1)) :pattern ((min$ less_eq$ ?v0 ?v1)))) :named a7))
(assert (! (forall ((?v0 A_llist$)) (=> (fun_app$b (lsorted$ less_eq$) ?v0) (fun_app$b (lsorted$ less_eq$) (ltl$ ?v0)))) :named a8))
(assert (! (= (lhd$ xsa$) (lhd$ ysa$)) :named a9))
(assert (! (= (lhd$ (ltl$ xsa$)) (lhd$ (ltl$ ysa$))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (=> (and (fun_app$b (lsorted$ less_eq$) ?v0) (and (not (lnull$ ?v0)) (not (lnull$ (ltl$ ?v0))))) (fun_app$ (fun_app$a less_eq$ (lhd$ ?v0)) (lhd$ (ltl$ ?v0))))) :named a11))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v2 A_llist$)) (=> (and (fun_app$b ?v0 ?v2) (and (not (lnull$ ?v2)) (not (lnull$ (ltl$ ?v2))))) (and (fun_app$ (fun_app$a less_eq$ (lhd$ ?v2)) (lhd$ (ltl$ ?v2))) (or (fun_app$b ?v0 (ltl$ ?v2)) (fun_app$b (lsorted$ less_eq$) (ltl$ ?v2))))))) (fun_app$b (lsorted$ less_eq$) ?v1))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (lnull$ ?v0) (lnull$ ?v1)) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$c ?v0 ?v3) ?v4) (and (= (lnull$ ?v3) (lnull$ ?v4)) (=> (and (not (lnull$ ?v3)) (not (lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$b (fun_app$c ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))))) (= ?v1 ?v2))) :named a14))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$c ?v0 ?v3) ?v4) (and (= (lnull$ ?v3) (lnull$ ?v4)) (=> (and (not (lnull$ ?v3)) (not (lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (fun_app$b (fun_app$c ?v0 (ltl$ ?v3)) (ltl$ ?v4)))))))) (= ?v1 ?v2))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (= (member$ ?v0 (atLeastAtMost$ less_eq$ ?v1 ?v2)) (and (fun_app$ (fun_app$a less_eq$ ?v1) ?v0) (fun_app$ (fun_app$a less_eq$ ?v0) ?v2)))) :named a16))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (=> (fun_app$b (lsorted$ ?v0) ?v1) (fun_app$b (lsorted$ ?v0) (ltl$ ?v1)))) :named a17))
(check-sat)
;(get-unsat-core)
