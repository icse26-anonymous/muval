; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 608
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_a_b_prod_fun$ 0)
(declare-sort A_b_prod_a_fun$ 0)
(declare-sort A_b_prod_b_fun$ 0)
(declare-sort B_a_b_prod_fun$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))
  (A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$a) (lCons$a (lhd$a A_b_prod$) (ltl$a A_b_prod_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))))
(declare-fun us$ () A_b_prod_llist$)
(declare-fun uu$ () A_b_prod_a_fun$)
(declare-fun vs$ () A_b_prod_llist$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun lmap$ (A_b_prod_a_fun$ A_b_prod_llist$) A_llist$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun lmap$a (B_a_b_prod_fun$ B_llist$) A_b_prod_llist$)
(declare-fun lmap$b (A_b_prod_b_fun$ A_b_prod_llist$) B_llist$)
(declare-fun lmap$c (B_b_fun$ B_llist$) B_llist$)
(declare-fun lmap$d (B_a_fun$ B_llist$) A_llist$)
(declare-fun lmap$e (A_a_b_prod_fun$ A_llist$) A_b_prod_llist$)
(declare-fun lmap$f (A_b_fun$ A_llist$) B_llist$)
(declare-fun lmap$g (A_a_fun$ A_llist$) A_llist$)
(declare-fun lmap$h (A_b_prod_a_b_prod_fun$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun ltake$ (Enat$ A_llist$) A_llist$)
(declare-fun ltake$a (Enat$ B_llist$) B_llist$)
(declare-fun ltake$b (Enat$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun fun_app$ (A_b_prod_a_fun$ A_b_prod$) A$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lfinite$ (B_llist$) Bool)
(declare-fun llength$ (A_b_prod_llist$) Enat$)
(declare-fun infinity$ () Enat$)
(declare-fun lappend$a (B_llist$ B_llist$) B_llist$)
(declare-fun lappend$b (A_b_prod_llist$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun lfinite$a (A_llist$) Bool)
(declare-fun lfinite$b (A_b_prod_llist$) Bool)
(declare-fun llength$a (B_llist$) Enat$)
(declare-fun llength$b (A_llist$) Enat$)
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$ uu$ ?v0) (fst$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (= xs$ (lappend$ (ltake$ (llength$ us$) xs$) (lmap$ uu$ vs$)))) :named a1))
(assert (! (= ys$ (ltake$a (llength$ us$) ys$)) :named a2))
(assert (! (not (lfinite$ (ltake$a (llength$ us$) ys$))) :named a3))
(assert (! (= xs$ (ltake$ (llength$ us$) xs$)) :named a4))
(assert (! (not (lfinite$a (ltake$ (llength$ us$) xs$))) :named a5))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 B_llist$)) (= (llength$ (lmap$a ?v0 ?v1)) (llength$a ?v1))) :named a6))
(assert (! (forall ((?v0 A_b_prod_b_fun$) (?v1 A_b_prod_llist$)) (= (llength$a (lmap$b ?v0 ?v1)) (llength$ ?v1))) :named a7))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (llength$a (lmap$c ?v0 ?v1)) (llength$a ?v1))) :named a8))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (llength$b (lmap$d ?v0 ?v1)) (llength$a ?v1))) :named a9))
(assert (! (forall ((?v0 A_a_b_prod_fun$) (?v1 A_llist$)) (= (llength$ (lmap$e ?v0 ?v1)) (llength$b ?v1))) :named a10))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (llength$a (lmap$f ?v0 ?v1)) (llength$b ?v1))) :named a11))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (llength$b (lmap$g ?v0 ?v1)) (llength$b ?v1))) :named a12))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod_llist$)) (= (llength$ (lmap$h ?v0 ?v1)) (llength$ ?v1))) :named a13))
(assert (! (forall ((?v0 A_b_prod_a_fun$) (?v1 A_b_prod_llist$)) (= (llength$b (lmap$ ?v0 ?v1)) (llength$ ?v1))) :named a14))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_prod_b_fun$) (?v2 A_b_prod_llist$)) (= (ltake$a ?v0 (lmap$b ?v1 ?v2)) (lmap$b ?v1 (ltake$b ?v0 ?v2)))) :named a15))
(assert (! (forall ((?v0 Enat$) (?v1 B_a_b_prod_fun$) (?v2 B_llist$)) (= (ltake$b ?v0 (lmap$a ?v1 ?v2)) (lmap$a ?v1 (ltake$a ?v0 ?v2)))) :named a16))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_prod_a_b_prod_fun$) (?v2 A_b_prod_llist$)) (= (ltake$b ?v0 (lmap$h ?v1 ?v2)) (lmap$h ?v1 (ltake$b ?v0 ?v2)))) :named a17))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_b_prod_fun$) (?v2 A_llist$)) (= (ltake$b ?v0 (lmap$e ?v1 ?v2)) (lmap$e ?v1 (ltake$ ?v0 ?v2)))) :named a18))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (ltake$ ?v0 (lmap$g ?v1 ?v2)) (lmap$g ?v1 (ltake$ ?v0 ?v2)))) :named a19))
(assert (! (forall ((?v0 Enat$) (?v1 B_a_fun$) (?v2 B_llist$)) (= (ltake$ ?v0 (lmap$d ?v1 ?v2)) (lmap$d ?v1 (ltake$a ?v0 ?v2)))) :named a20))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_fun$) (?v2 A_llist$)) (= (ltake$a ?v0 (lmap$f ?v1 ?v2)) (lmap$f ?v1 (ltake$ ?v0 ?v2)))) :named a21))
(assert (! (forall ((?v0 Enat$) (?v1 B_b_fun$) (?v2 B_llist$)) (= (ltake$a ?v0 (lmap$c ?v1 ?v2)) (lmap$c ?v1 (ltake$a ?v0 ?v2)))) :named a22))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_prod_a_fun$) (?v2 A_b_prod_llist$)) (= (ltake$ ?v0 (lmap$ ?v1 ?v2)) (lmap$ ?v1 (ltake$b ?v0 ?v2)))) :named a23))
(assert (! (not (lfinite$b us$)) :named a24))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (= (lappend$a (lappend$a ?v0 ?v1) ?v2) (lappend$a ?v0 (lappend$a ?v1 ?v2)))) :named a25))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a26))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (lappend$b (lappend$b ?v0 ?v1) ?v2) (lappend$b ?v0 (lappend$b ?v1 ?v2)))) :named a27))
(assert (! (forall ((?v0 A_b_prod_b_fun$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (lmap$b ?v0 (lappend$b ?v1 ?v2)) (lappend$a (lmap$b ?v0 ?v1) (lmap$b ?v0 ?v2)))) :named a28))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 B_llist$) (?v2 B_llist$)) (= (lmap$a ?v0 (lappend$a ?v1 ?v2)) (lappend$b (lmap$a ?v0 ?v1) (lmap$a ?v0 ?v2)))) :named a29))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$) (?v2 B_llist$)) (= (lmap$c ?v0 (lappend$a ?v1 ?v2)) (lappend$a (lmap$c ?v0 ?v1) (lmap$c ?v0 ?v2)))) :named a30))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$) (?v2 B_llist$)) (= (lmap$d ?v0 (lappend$a ?v1 ?v2)) (lappend$ (lmap$d ?v0 ?v1) (lmap$d ?v0 ?v2)))) :named a31))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (lmap$f ?v0 (lappend$ ?v1 ?v2)) (lappend$a (lmap$f ?v0 ?v1) (lmap$f ?v0 ?v2)))) :named a32))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (lmap$g ?v0 (lappend$ ?v1 ?v2)) (lappend$ (lmap$g ?v0 ?v1) (lmap$g ?v0 ?v2)))) :named a33))
(assert (! (forall ((?v0 A_a_b_prod_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (lmap$e ?v0 (lappend$ ?v1 ?v2)) (lappend$b (lmap$e ?v0 ?v1) (lmap$e ?v0 ?v2)))) :named a34))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (lmap$h ?v0 (lappend$b ?v1 ?v2)) (lappend$b (lmap$h ?v0 ?v1) (lmap$h ?v0 ?v2)))) :named a35))
(assert (! (forall ((?v0 A_b_prod_a_fun$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (lmap$ ?v0 (lappend$b ?v1 ?v2)) (lappend$ (lmap$ ?v0 ?v1) (lmap$ ?v0 ?v2)))) :named a36))
(assert (! (= xs$ (lappend$ (ltake$ (llength$ us$) xs$) (ldrop$ (llength$ us$) xs$))) :named a37))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (lfinite$ (lmap$c ?v0 ?v1)) (lfinite$ ?v1))) :named a38))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (lfinite$ (lmap$f ?v0 ?v1)) (lfinite$a ?v1))) :named a39))
(assert (! (forall ((?v0 A_b_prod_b_fun$) (?v1 A_b_prod_llist$)) (= (lfinite$ (lmap$b ?v0 ?v1)) (lfinite$b ?v1))) :named a40))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (lfinite$a (lmap$d ?v0 ?v1)) (lfinite$ ?v1))) :named a41))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lfinite$a (lmap$g ?v0 ?v1)) (lfinite$a ?v1))) :named a42))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 B_llist$)) (= (lfinite$b (lmap$a ?v0 ?v1)) (lfinite$ ?v1))) :named a43))
(assert (! (forall ((?v0 A_a_b_prod_fun$) (?v1 A_llist$)) (= (lfinite$b (lmap$e ?v0 ?v1)) (lfinite$a ?v1))) :named a44))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod_llist$)) (= (lfinite$b (lmap$h ?v0 ?v1)) (lfinite$b ?v1))) :named a45))
(assert (! (forall ((?v0 A_b_prod_a_fun$) (?v1 A_b_prod_llist$)) (= (lfinite$a (lmap$ ?v0 ?v1)) (lfinite$b ?v1))) :named a46))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (lfinite$ (lappend$a ?v0 ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1)))) :named a47))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$a (lappend$ ?v0 ?v1)) (and (lfinite$a ?v0) (lfinite$a ?v1)))) :named a48))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (lfinite$b (lappend$b ?v0 ?v1)) (and (lfinite$b ?v0) (lfinite$b ?v1)))) :named a49))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_llist$)) (=> (= (llength$a ?v0) (llength$a ?v1)) (= (= (lappend$a ?v0 ?v2) (lappend$a ?v1 ?v3)) (and (= ?v0 ?v1) (=> (lfinite$ ?v0) (= ?v2 ?v3)))))) :named a50))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (= (llength$b ?v0) (llength$b ?v1)) (= (= (lappend$ ?v0 ?v2) (lappend$ ?v1 ?v3)) (and (= ?v0 ?v1) (=> (lfinite$a ?v0) (= ?v2 ?v3)))))) :named a51))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$) (?v3 A_b_prod_llist$)) (=> (= (llength$ ?v0) (llength$ ?v1)) (= (= (lappend$b ?v0 ?v2) (lappend$b ?v1 ?v3)) (and (= ?v0 ?v1) (=> (lfinite$b ?v0) (= ?v2 ?v3)))))) :named a52))
(assert (! (= (lappend$b us$ vs$) us$) :named a53))
(assert (! (= (llength$ us$) infinity$) :named a54))
(assert (! (= us$ (lzip$ (ltake$ (llength$ us$) xs$) (ltake$a (llength$ us$) ys$))) :named a55))
(assert (! (= (lzip$ xs$ ys$) (lappend$b us$ vs$)) :named a56))
(check-sat)
;(get-unsat-core)
