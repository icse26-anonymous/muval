; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 579
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_enat_fun$ 0)
(declare-sort Nat_a_llist_fun$ 0)
(declare-sort Nat_nat_enat_fun_fun$ 0)
(declare-sort Nat_set_nat_enat_fun_fun$ 0)
(declare-sort Nat_enat_fun_nat_enat_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-fun m$ () Nat$)
(declare-fun n$ () Nat$)
(declare-fun n$a () Nat$)
(declare-fun na$ () Nat$)
(declare-fun uu$ () Nat_enat_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun uua$ (Nat_enat_fun$) Nat_enat_fun_nat_enat_fun_fun$)
(declare-fun uub$ (Nat_nat_enat_fun_fun$) Nat_set_nat_enat_fun_fun$)
(declare-fun uuc$ (Nat_nat_enat_fun_fun$) Nat_nat_enat_fun_fun$)
(declare-fun uud$ (Nat_nat_enat_fun_fun$) Nat_set_nat_enat_fun_fun$)
(declare-fun xs$a () A_llist$)
(declare-fun xss$ () A_llist_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist_llist$) Nat_a_llist_fun$)
(declare-fun plus$ (Enat$ Enat$) Enat$)
(declare-fun xss$a () A_llist_llist$)
(declare-fun less$a (Nat$ Nat$) Bool)
(declare-fun lnth$a (A_llist$) Nat_a_fun$)
(declare-fun plus$a (Nat$ Nat$) Nat$)
(declare-fun setsum$ (Nat_enat_fun$ Nat_set$) Enat$)
(declare-fun thesis$ () Bool)
(declare-fun fun_app$ (Nat_enat_fun$ Nat$) Enat$)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun case_nat$ (A$ Nat_a_fun$ Nat$) A$)
(declare-fun fun_app$a (Nat_a_llist_fun$ Nat$) A_llist$)
(declare-fun fun_app$b (Nat_nat_enat_fun_fun$ Nat$) Nat_enat_fun$)
(declare-fun fun_app$c (Nat_set_nat_enat_fun_fun$ Nat_set$) Nat_enat_fun$)
(declare-fun fun_app$d (Nat_enat_fun_nat_enat_fun_fun$ Nat_enat_fun$) Nat_enat_fun$)
(declare-fun fun_app$e (Nat_a_fun$ Nat$) A$)
(declare-fun lessThan$ (Nat$) Nat_set$)
(declare-fun llength$a (A_llist_llist$) Enat$)
(declare-fun case_nat$a (A_llist$ Nat_a_llist_fun$ Nat$) A_llist$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (llength$ (fun_app$a (lnth$ (lCons$a xs$ xss$)) ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$b (uuc$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$b ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$b (uuc$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat_set$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$c (uud$ ?v0) ?v1) ?v2) (setsum$ (fun_app$b (uuc$ ?v0) ?v2) ?v1)) :pattern ((fun_app$ (fun_app$c (uud$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 Nat_enat_fun$) (?v1 Nat_enat_fun$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$d (uua$ ?v0) ?v1) ?v2) (plus$ (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$d (uua$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat_set$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$c (uub$ ?v0) ?v1) ?v2) (setsum$ (fun_app$b ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$c (uub$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (not thesis$) :named a5))
(assert (! (forall ((?v0 Nat$)) (=> (and (= (setsum$ uu$ (lessThan$ m$)) (enat$ ?v0)) (= na$ (plus$a ?v0 n$))) thesis$)) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a8))
(assert (! (= (enat$ na$) (plus$ (setsum$ uu$ (lessThan$ m$)) (enat$ n$))) :named a9))
(assert (! (less$ (enat$ n$) (llength$ (fun_app$a (lnth$ (lCons$a xs$ xss$)) m$))) :named a10))
(assert (! (= (fun_app$e (lnth$a (lconcat$ (lCons$a xs$ xss$))) na$) (fun_app$e (lnth$a (fun_app$a (lnth$ (lCons$a xs$ xss$)) m$)) n$)) :named a11))
(assert (! (less$ (enat$ m$) (llength$a (lCons$a xs$ xss$))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (lessThan$ ?v0) (lessThan$ ?v1)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$a ?v0 ?v1) (plus$a ?v2 ?v1)) (= ?v0 ?v2))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$a ?v0 ?v1) (plus$a ?v0 ?v2)) (= ?v1 ?v2))) :named a16))
(assert (! (forall ((?v0 Nat_enat_fun$) (?v1 Nat_enat_fun$) (?v2 Nat_set$)) (= (setsum$ (fun_app$d (uua$ ?v0) ?v1) ?v2) (plus$ (setsum$ ?v0 ?v2) (setsum$ ?v1 ?v2)))) :named a17))
(assert (! (less$ (enat$ na$) (llength$ (lconcat$ (lCons$a xs$ xss$)))) :named a18))
(assert (! (= xs$a (lconcat$ (lCons$a xs$ xss$))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (plus$ (enat$ ?v0) (enat$ ?v1)) (enat$ (plus$a ?v0 ?v1))) :pattern ((plus$ (enat$ ?v0) (enat$ ?v1))))) :named a20))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat_set$) (?v2 Nat_set$)) (= (setsum$ (fun_app$c (uub$ ?v0) ?v1) ?v2) (setsum$ (fun_app$c (uud$ ?v0) ?v2) ?v1))) :named a21))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 Nat$)) (! (= (fun_app$e (lnth$a (lCons$ ?v0 ?v1)) ?v2) (case_nat$ ?v0 (lnth$a ?v1) ?v2)) :pattern ((fun_app$e (lnth$a (lCons$ ?v0 ?v1)) ?v2)))) :named a22))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 Nat$)) (! (= (fun_app$a (lnth$ (lCons$a ?v0 ?v1)) ?v2) (case_nat$a ?v0 (lnth$ ?v1) ?v2)) :pattern ((fun_app$a (lnth$ (lCons$a ?v0 ?v1)) ?v2)))) :named a23))
(assert (! (less$ (enat$ n$a) (llength$ (lconcat$ xss$a))) :named a24))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (less$a (plus$a ?v0 ?v1) (plus$a ?v0 ?v2)) (less$a ?v1 ?v2))) :named a25))
(check-sat)
;(get-unsat-core)
