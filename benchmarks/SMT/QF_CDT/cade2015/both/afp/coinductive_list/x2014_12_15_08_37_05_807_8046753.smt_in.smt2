; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 294
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_nat_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort A_a_llist_fun$ 0)
(declare-sort B_b_llist_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort B_b_fun_bool_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort Nat_nat_llist_fun$ 0)
(declare-sort A_nat_bool_fun_fun$ 0)
(declare-sort B_nat_bool_fun_fun$ 0)
(declare-sort Nat_a_bool_fun_fun$ 0)
(declare-sort Nat_a_fun_bool_fun$ 0)
(declare-sort Nat_b_bool_fun_fun$ 0)
(declare-sort Nat_b_fun_bool_fun$ 0)
(declare-sort Nat_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort B_llist_b_llist_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Nat_a_fun_a_llist_fun$ 0)
(declare-sort Nat_b_fun_b_llist_fun$ 0)
(declare-sort Nat_llist_a_llist_fun$ 0)
(declare-sort Nat_llist_b_llist_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort A_b_llist_bool_fun_fun$ 0)
(declare-sort B_b_llist_fun_bool_fun$ 0)
(declare-sort Nat_a_fun_nat_a_fun_fun$ 0)
(declare-sort Nat_b_fun_nat_b_fun_fun$ 0)
(declare-sort Nat_llist_nat_llist_fun$ 0)
(declare-sort A_nat_a_fun_bool_fun_fun$ 0)
(declare-sort A_nat_b_fun_bool_fun_fun$ 0)
(declare-sort B_nat_a_fun_bool_fun_fun$ 0)
(declare-sort Nat_b_fun_llist_bool_fun$ 0)
(declare-sort A_a_fun_a_a_llist_fun_fun$ 0)
(declare-sort B_b_fun_b_b_llist_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_bool_fun_fun$ 0)
(declare-sort A_a_fun_b_b_fun_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_llist_bool_fun_fun$ 0)
(declare-sort B_b_fun_a_a_fun_bool_fun_fun$ 0)
(declare-sort B_b_fun_b_b_fun_bool_fun_fun$ 0)
(declare-sort B_llist_a_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_fun_bool_fun$ 0)
(declare-sort Nat_a_fun_nat_a_fun_llist_fun$ 0)
(declare-sort Nat_b_fun_nat_b_fun_llist_fun$ 0)
(declare-sort A_llist_nat_llist_bool_fun_fun$ 0)
(declare-sort B_llist_nat_llist_bool_fun_fun$ 0)
(declare-sort Nat_b_fun_b_llist_fun_bool_fun$ 0)
(declare-sort Nat_llist_a_llist_bool_fun_fun$ 0)
(declare-sort Nat_llist_b_llist_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort B_b_fun_b_llist_b_llist_fun_fun$ 0)
(declare-sort A_a_fun_nat_nat_fun_bool_fun_fun$ 0)
(declare-sort B_b_fun_nat_nat_fun_bool_fun_fun$ 0)
(declare-sort Nat_a_fun_nat_a_fun_bool_fun_fun$ 0)
(declare-sort Nat_a_fun_nat_b_fun_bool_fun_fun$ 0)
(declare-sort Nat_b_fun_nat_a_fun_bool_fun_fun$ 0)
(declare-sort Nat_b_fun_nat_b_fun_bool_fun_fun$ 0)
(declare-sort Nat_llist_nat_llist_bool_fun_fun$ 0)
(declare-sort Nat_nat_fun_a_a_fun_bool_fun_fun$ 0)
(declare-sort Nat_nat_fun_b_b_fun_bool_fun_fun$ 0)
(declare-sort Nat_a_fun_llist_a_llist_llist_fun$ 0)
(declare-sort Nat_b_fun_llist_b_llist_llist_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_llist_fun_fun$ 0)
(declare-sort Nat_b_fun_nat_nat_fun_bool_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_a_fun_bool_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_b_fun_bool_fun_fun$ 0)
(declare-sort Nat_a_fun_nat_llist_a_llist_fun_fun$ 0)
(declare-sort Nat_b_fun_nat_llist_b_llist_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_fun_bool_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_llist_nat_llist_fun_fun$ 0)
(declare-sort A_a_llist_fun_a_a_llist_fun_bool_fun_fun$ 0)
(declare-sort A_a_llist_fun_b_b_llist_fun_bool_fun_fun$ 0)
(declare-sort A_llist_llist_b_llist_llist_bool_fun_fun$ 0)
(declare-sort B_b_llist_fun_a_a_llist_fun_bool_fun_fun$ 0)
(declare-sort B_b_llist_fun_b_b_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_b_fun_llist_b_llist_llist_fun_bool_fun$ 0)
(declare-sort A_a_llist_fun_nat_nat_llist_fun_bool_fun_fun$ 0)
(declare-sort B_b_llist_fun_nat_nat_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_a_fun_llist_nat_b_fun_llist_bool_fun_fun$ 0)
(declare-sort Nat_nat_llist_fun_a_a_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_nat_llist_fun_b_b_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_nat_llist_fun_nat_nat_llist_fun_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_b_llist_b_llist_fun_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_fun_nat_llist_nat_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_a_fun_a_llist_fun_nat_b_fun_b_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_llist_a_llist_fun_nat_llist_a_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_llist_a_llist_fun_nat_llist_b_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_llist_b_llist_fun_nat_llist_a_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_llist_b_llist_fun_nat_llist_b_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_a_fun_nat_a_fun_fun_nat_a_fun_nat_a_fun_llist_fun_fun$ 0)
(declare-sort Nat_b_fun_nat_b_fun_fun_nat_b_fun_nat_b_fun_llist_fun_fun$ 0)
(declare-sort Nat_llist_b_llist_fun_nat_llist_nat_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_llist_nat_llist_fun_nat_llist_a_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_llist_nat_llist_fun_nat_llist_b_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_a_fun_a_llist_fun_nat_a_fun_llist_a_llist_llist_fun_fun$ 0)
(declare-sort Nat_b_fun_b_llist_fun_nat_b_fun_llist_b_llist_llist_fun_fun$ 0)
(declare-sort Nat_a_fun_nat_a_fun_fun_nat_b_fun_nat_b_fun_fun_bool_fun_fun$ 0)
(declare-sort Nat_a_fun_nat_a_fun_llist_fun_nat_b_fun_nat_b_fun_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_a_fun_llist_a_llist_llist_fun_nat_b_fun_llist_b_llist_llist_fun_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))
  (Nat_llist$ (lNil$b) (lCons$b (lhd$b Nat$) (ltl$b Nat_llist$)))
  (Nat_a_fun_llist$ (lNil$c) (lCons$c (select$ Nat_a_fun$) (selecta$ Nat_a_fun_llist$)))
  (Nat_b_fun_llist$ (lNil$d) (lCons$d (selectb$ Nat_b_fun$) (selectc$ Nat_b_fun_llist$)))
  (B_llist_llist$ (lNil$e) (lCons$e (lhd$c B_llist$) (ltl$c B_llist_llist$)))
  (A_llist_llist$ (lNil$f) (lCons$f (lhd$d A_llist$) (ltl$d A_llist_llist$)))))
(declare-fun a$ () A_b_bool_fun_fun$)
(declare-fun uu$ () Nat_nat_bool_fun_fun$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun uua$ () Nat_a_fun_a_llist_fun$)
(declare-fun uub$ () Nat_b_fun_b_llist_fun$)
(declare-fun uuc$ () A_a_fun$)
(declare-fun uud$ () B_b_fun$)
(declare-fun uue$ () Nat_nat_fun$)
(declare-fun uuf$ (A_b_bool_fun_fun$ Nat_a_fun$) Nat_b_bool_fun_fun$)
(declare-fun uug$ (A_b_bool_fun_fun$ A_a_fun$) A_b_bool_fun_fun$)
(declare-fun uuh$ (A_b_bool_fun_fun$ B_a_fun$) B_b_bool_fun_fun$)
(declare-fun uui$ (B_b_bool_fun_fun$ Nat_b_fun$) Nat_b_bool_fun_fun$)
(declare-fun uuj$ (B_b_bool_fun_fun$ A_b_fun$) A_b_bool_fun_fun$)
(declare-fun uuk$ (B_b_bool_fun_fun$ B_b_fun$) B_b_bool_fun_fun$)
(declare-fun uul$ (B_a_bool_fun_fun$ Nat_b_fun$) Nat_a_bool_fun_fun$)
(declare-fun uum$ (B_a_bool_fun_fun$ B_b_fun$) B_a_bool_fun_fun$)
(declare-fun uun$ (B_a_bool_fun_fun$ A_b_fun$) A_a_bool_fun_fun$)
(declare-fun uuo$ (A_nat_bool_fun_fun$ Nat_a_fun$) Nat_nat_bool_fun_fun$)
(declare-fun uup$ (A_b_bool_fun_fun$ Nat_b_fun$) A_nat_bool_fun_fun$)
(declare-fun uuq$ (A_b_bool_fun_fun$ B_b_fun$) A_b_bool_fun_fun$)
(declare-fun uur$ (A_b_bool_fun_fun$ A_b_fun$) A_a_bool_fun_fun$)
(declare-fun uus$ (B_b_bool_fun_fun$ Nat_b_fun$) B_nat_bool_fun_fun$)
(declare-fun uut$ (B_b_bool_fun_fun$ B_b_fun$) B_b_bool_fun_fun$)
(declare-fun uuu$ (B_b_bool_fun_fun$ A_b_fun$) B_a_bool_fun_fun$)
(declare-fun uuv$ (B_a_bool_fun_fun$ Nat_a_fun$) B_nat_bool_fun_fun$)
(declare-fun uuw$ (B_a_bool_fun_fun$ B_a_fun$) B_b_bool_fun_fun$)
(declare-fun uux$ (B_a_bool_fun_fun$ A_a_fun$) B_a_bool_fun_fun$)
(declare-fun uuy$ (A_nat_bool_fun_fun$ B_nat_fun$) A_b_bool_fun_fun$)
(declare-fun uuz$ (Nat_a_fun$ Nat_a_fun$) Nat_nat_bool_fun_fun$)
(declare-fun uva$ (Nat_b_fun$ Nat_b_fun$) Nat_nat_bool_fun_fun$)
(declare-fun uvb$ (Nat_a_fun$ A_a_fun$) Nat_a_bool_fun_fun$)
(declare-fun uvc$ (Nat_b_fun$ B_b_fun$) Nat_b_bool_fun_fun$)
(declare-fun uvd$ (B_b_fun$ Nat_b_fun$) B_nat_bool_fun_fun$)
(declare-fun uve$ (Nat_nat_fun$ Nat_nat_fun$) Nat_nat_bool_fun_fun$)
(declare-fun uvf$ (A_b_fun$ B_b_fun$) A_b_bool_fun_fun$)
(declare-fun uvg$ (A_a_fun$ B_a_fun$) A_b_bool_fun_fun$)
(declare-fun uvh$ (B_b_fun$ B_b_fun$) B_b_bool_fun_fun$)
(declare-fun uvi$ (B_a_fun$ A_a_fun$) B_a_bool_fun_fun$)
(declare-fun uvj$ (A_b_bool_fun_fun$ A_b_bool_fun_fun$) A_b_bool_fun_fun$)
(declare-fun uvk$ (B_b_bool_fun_fun$ B_b_bool_fun_fun$) B_b_bool_fun_fun$)
(declare-fun uvl$ (B_a_bool_fun_fun$ B_a_bool_fun_fun$) B_a_bool_fun_fun$)
(declare-fun uvm$ (A_nat_bool_fun_fun$ A_nat_bool_fun_fun$) A_nat_bool_fun_fun$)
(declare-fun uvn$ (A_a_bool_fun_fun$ A_a_bool_fun_fun$) A_a_bool_fun_fun$)
(declare-fun uvo$ (Nat_a_fun_nat_b_fun_bool_fun_fun$ Nat_a_fun_nat_b_fun_bool_fun_fun$) Nat_a_fun_nat_b_fun_bool_fun_fun$)
(declare-fun uvp$ (A_b_llist_bool_fun_fun$ A_b_llist_bool_fun_fun$) A_b_llist_bool_fun_fun$)
(declare-fun uvq$ (A_a_llist_bool_fun_fun$ A_a_llist_bool_fun_fun$) A_a_llist_bool_fun_fun$)
(declare-fun uvr$ (B_nat_a_fun_bool_fun_fun$ B_nat_a_fun_bool_fun_fun$) B_nat_a_fun_bool_fun_fun$)
(declare-fun uvs$ (A_nat_b_fun_bool_fun_fun$ A_nat_b_fun_bool_fun_fun$) A_nat_b_fun_bool_fun_fun$)
(declare-fun uvt$ () B_b_bool_fun_fun$)
(declare-fun uvu$ () B_llist_b_llist_bool_fun_fun$)
(declare-fun uvv$ () A_a_bool_fun_fun$)
(declare-fun uvw$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun lmap$ () Nat_b_fun_nat_llist_b_llist_fun_fun$)
(declare-fun zero$ () Nat$)
(declare-fun lmap$a () Nat_a_fun_nat_llist_a_llist_fun_fun$)
(declare-fun lmap$b () A_a_fun_a_llist_a_llist_fun_fun$)
(declare-fun lmap$c () B_b_fun_b_llist_b_llist_fun_fun$)
(declare-fun lmap$d () Nat_nat_fun_nat_llist_nat_llist_fun_fun$)
(declare-fun lmap$e (B_a_fun$ B_llist$) A_llist$)
(declare-fun lmap$f (A_b_fun$ A_llist$) B_llist$)
(declare-fun lmap$g (B_nat_fun$ B_llist$) Nat_llist$)
(declare-fun lmap$h (Nat_a_fun_nat_a_fun_fun$ Nat_a_fun_llist$) Nat_a_fun_llist$)
(declare-fun lmap$i (Nat_b_fun_nat_b_fun_fun$ Nat_b_fun_llist$) Nat_b_fun_llist$)
(declare-fun lmap$j () Nat_a_fun_a_llist_fun_nat_a_fun_llist_a_llist_llist_fun_fun$)
(declare-fun lmap$k () Nat_b_fun_b_llist_fun_nat_b_fun_llist_b_llist_llist_fun_fun$)
(declare-fun fun_app$ (Nat_b_fun_b_llist_fun$ Nat_b_fun$) B_llist$)
(declare-fun rel_fun$ (Nat_a_fun_nat_b_fun_bool_fun_fun$ A_llist_b_llist_bool_fun_fun$) Nat_a_fun_a_llist_fun_nat_b_fun_b_llist_fun_bool_fun_fun$)
(declare-fun fun_app$a (Nat_llist_b_llist_fun$ Nat_llist$) B_llist$)
(declare-fun fun_app$b (Nat_b_fun_nat_llist_b_llist_fun_fun$ Nat_b_fun$) Nat_llist_b_llist_fun$)
(declare-fun fun_app$c (Nat_nat_llist_fun$ Nat$) Nat_llist$)
(declare-fun fun_app$d (Nat_nat_fun_nat_nat_llist_fun_fun$ Nat_nat_fun$) Nat_nat_llist_fun$)
(declare-fun fun_app$e (Nat_a_fun_a_llist_fun$ Nat_a_fun$) A_llist$)
(declare-fun fun_app$f (Nat_llist_a_llist_fun$ Nat_llist$) A_llist$)
(declare-fun fun_app$g (Nat_a_fun_nat_llist_a_llist_fun_fun$ Nat_a_fun$) Nat_llist_a_llist_fun$)
(declare-fun fun_app$h (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun fun_app$i (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun fun_app$j (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$k (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$l (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$m (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$n (B_bool_fun$ B$) Bool)
(declare-fun fun_app$o (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$p (A_bool_fun$ A$) Bool)
(declare-fun fun_app$q (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$r (Nat_b_bool_fun_fun$ Nat$) B_bool_fun$)
(declare-fun fun_app$s (Nat_b_fun$ Nat$) B$)
(declare-fun fun_app$t (B_b_fun$ B$) B$)
(declare-fun fun_app$u (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$v (A_b_fun$ A$) B$)
(declare-fun fun_app$w (Nat_a_bool_fun_fun$ Nat$) A_bool_fun$)
(declare-fun fun_app$x (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$y (A_nat_bool_fun_fun$ A$) Nat_bool_fun$)
(declare-fun fun_app$z (Nat_a_fun$ Nat$) A$)
(declare-fun iterates$ () Nat_nat_fun_nat_nat_llist_fun_fun$)
(declare-fun rel_fun$a (Nat_nat_bool_fun_fun$ A_b_bool_fun_fun$) Nat_a_fun_nat_b_fun_bool_fun_fun$)
(declare-fun rel_fun$b (Nat_a_fun_nat_a_fun_bool_fun_fun$ Nat_llist_a_llist_fun_nat_llist_a_llist_fun_bool_fun_fun$ Nat_a_fun_nat_llist_a_llist_fun_fun$ Nat_a_fun_nat_llist_a_llist_fun_fun$) Bool)
(declare-fun rel_fun$c (Nat_nat_bool_fun_fun$ A_a_bool_fun_fun$) Nat_a_fun_nat_a_fun_bool_fun_fun$)
(declare-fun rel_fun$d (Nat_llist_nat_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$) Nat_llist_a_llist_fun_nat_llist_a_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$e (Nat_b_fun_nat_a_fun_bool_fun_fun$ Nat_llist_b_llist_fun_nat_llist_a_llist_fun_bool_fun_fun$ Nat_b_fun_nat_llist_b_llist_fun_fun$ Nat_a_fun_nat_llist_a_llist_fun_fun$) Bool)
(declare-fun rel_fun$f (Nat_nat_bool_fun_fun$ B_a_bool_fun_fun$) Nat_b_fun_nat_a_fun_bool_fun_fun$)
(declare-fun rel_fun$g (Nat_llist_nat_llist_bool_fun_fun$ B_llist_a_llist_bool_fun_fun$) Nat_llist_b_llist_fun_nat_llist_a_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$h (Nat_b_fun_nat_b_fun_bool_fun_fun$ Nat_llist_b_llist_fun_nat_llist_b_llist_fun_bool_fun_fun$ Nat_b_fun_nat_llist_b_llist_fun_fun$ Nat_b_fun_nat_llist_b_llist_fun_fun$) Bool)
(declare-fun rel_fun$i (Nat_nat_bool_fun_fun$ B_b_bool_fun_fun$) Nat_b_fun_nat_b_fun_bool_fun_fun$)
(declare-fun rel_fun$j (Nat_llist_nat_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$) Nat_llist_b_llist_fun_nat_llist_b_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$k (Nat_a_fun_nat_b_fun_bool_fun_fun$ Nat_llist_a_llist_fun_nat_llist_b_llist_fun_bool_fun_fun$ Nat_a_fun_nat_llist_a_llist_fun_fun$ Nat_b_fun_nat_llist_b_llist_fun_fun$) Bool)
(declare-fun rel_fun$l (Nat_llist_nat_llist_bool_fun_fun$ A_llist_b_llist_bool_fun_fun$) Nat_llist_a_llist_fun_nat_llist_b_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$m (A_a_fun_b_b_fun_bool_fun_fun$ A_llist_a_llist_fun_b_llist_b_llist_fun_bool_fun_fun$ A_a_fun_a_llist_a_llist_fun_fun$ B_b_fun_b_llist_b_llist_fun_fun$) Bool)
(declare-fun rel_fun$n (A_b_bool_fun_fun$ A_b_bool_fun_fun$) A_a_fun_b_b_fun_bool_fun_fun$)
(declare-fun rel_fun$o (A_llist_b_llist_bool_fun_fun$ A_llist_b_llist_bool_fun_fun$) A_llist_a_llist_fun_b_llist_b_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$p (Nat_a_fun_a_llist_fun_nat_b_fun_b_llist_fun_bool_fun_fun$ Nat_a_fun_llist_a_llist_llist_fun_nat_b_fun_llist_b_llist_llist_fun_bool_fun_fun$ Nat_a_fun_a_llist_fun_nat_a_fun_llist_a_llist_llist_fun_fun$ Nat_b_fun_b_llist_fun_nat_b_fun_llist_b_llist_llist_fun_fun$) Bool)
(declare-fun rel_fun$q (Nat_a_fun_llist_nat_b_fun_llist_bool_fun_fun$ A_llist_llist_b_llist_llist_bool_fun_fun$) Nat_a_fun_llist_a_llist_llist_fun_nat_b_fun_llist_b_llist_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$r (Nat_b_fun_nat_nat_fun_bool_fun_fun$ Nat_llist_b_llist_fun_nat_llist_nat_llist_fun_bool_fun_fun$ Nat_b_fun_nat_llist_b_llist_fun_fun$ Nat_nat_fun_nat_llist_nat_llist_fun_fun$) Bool)
(declare-fun rel_fun$s (Nat_nat_bool_fun_fun$ B_nat_bool_fun_fun$) Nat_b_fun_nat_nat_fun_bool_fun_fun$)
(declare-fun rel_fun$t (Nat_llist_nat_llist_bool_fun_fun$ B_llist_nat_llist_bool_fun_fun$) Nat_llist_b_llist_fun_nat_llist_nat_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$u (B_b_fun_nat_nat_fun_bool_fun_fun$ B_llist_b_llist_fun_nat_llist_nat_llist_fun_bool_fun_fun$ B_b_fun_b_llist_b_llist_fun_fun$ Nat_nat_fun_nat_llist_nat_llist_fun_fun$) Bool)
(declare-fun rel_fun$v (B_nat_bool_fun_fun$ B_nat_bool_fun_fun$) B_b_fun_nat_nat_fun_bool_fun_fun$)
(declare-fun rel_fun$w (B_llist_nat_llist_bool_fun_fun$ B_llist_nat_llist_bool_fun_fun$) B_llist_b_llist_fun_nat_llist_nat_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$x (Nat_nat_fun_nat_a_fun_bool_fun_fun$ Nat_llist_nat_llist_fun_nat_llist_a_llist_fun_bool_fun_fun$ Nat_nat_fun_nat_llist_nat_llist_fun_fun$ Nat_a_fun_nat_llist_a_llist_fun_fun$) Bool)
(declare-fun rel_fun$y (Nat_nat_bool_fun_fun$ Nat_a_bool_fun_fun$) Nat_nat_fun_nat_a_fun_bool_fun_fun$)
(declare-fun rel_fun$z (Nat_llist_nat_llist_bool_fun_fun$ Nat_llist_a_llist_bool_fun_fun$) Nat_llist_nat_llist_fun_nat_llist_a_llist_fun_bool_fun_fun$)
(declare-fun fun_app$aa (B_a_fun$ B$) A$)
(declare-fun fun_app$ab (A_a_fun$ A$) A$)
(declare-fun fun_app$ac (B_nat_bool_fun_fun$ B$) Nat_bool_fun$)
(declare-fun fun_app$ad (B_nat_fun$ B$) Nat$)
(declare-fun fun_app$ae (Nat_b_fun_bool_fun$ Nat_b_fun$) Bool)
(declare-fun fun_app$af (Nat_a_fun_nat_b_fun_bool_fun_fun$ Nat_a_fun$) Nat_b_fun_bool_fun$)
(declare-fun fun_app$ag (Nat_a_fun_bool_fun$ Nat_a_fun$) Bool)
(declare-fun fun_app$ah (B_nat_a_fun_bool_fun_fun$ B$) Nat_a_fun_bool_fun$)
(declare-fun fun_app$ai (A_b_llist_bool_fun_fun$ A$) B_llist_bool_fun$)
(declare-fun fun_app$aj (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$ak (A_nat_b_fun_bool_fun_fun$ A$) Nat_b_fun_bool_fun$)
(declare-fun fun_app$al (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$am (Nat_b_fun_b_llist_fun_bool_fun$ Nat_b_fun_b_llist_fun$) Bool)
(declare-fun fun_app$an (Nat_a_fun_a_llist_fun_nat_b_fun_b_llist_fun_bool_fun_fun$ Nat_a_fun_a_llist_fun$) Nat_b_fun_b_llist_fun_bool_fun$)
(declare-fun fun_app$ao (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$ap (A_a_fun_a_llist_a_llist_fun_fun$ A_a_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$aq (B_llist_b_llist_fun$ B_llist$) B_llist$)
(declare-fun fun_app$ar (B_b_fun_b_llist_b_llist_fun_fun$ B_b_fun$) B_llist_b_llist_fun$)
(declare-fun fun_app$as (Nat_llist_nat_llist_fun$ Nat_llist$) Nat_llist$)
(declare-fun fun_app$at (Nat_nat_fun_nat_llist_nat_llist_fun_fun$ Nat_nat_fun$) Nat_llist_nat_llist_fun$)
(declare-fun fun_app$au (A_llist_b_llist_bool_fun_fun$ A_llist$) B_llist_bool_fun$)
(declare-fun fun_app$av (Nat_llist_b_llist_bool_fun_fun$ Nat_llist$) B_llist_bool_fun$)
(declare-fun fun_app$aw (B_llist_a_llist_bool_fun_fun$ B_llist$) A_llist_bool_fun$)
(declare-fun fun_app$ax (Nat_llist_a_llist_bool_fun_fun$ Nat_llist$) A_llist_bool_fun$)
(declare-fun fun_app$ay (Nat_llist_bool_fun$ Nat_llist$) Bool)
(declare-fun fun_app$az (A_llist_nat_llist_bool_fun_fun$ A_llist$) Nat_llist_bool_fun$)
(declare-fun fun_app$ba (Nat_llist_nat_llist_bool_fun_fun$ Nat_llist$) Nat_llist_bool_fun$)
(declare-fun fun_app$bb (B_llist_nat_llist_bool_fun_fun$ B_llist$) Nat_llist_bool_fun$)
(declare-fun fun_app$bc (Nat_b_fun_llist_bool_fun$ Nat_b_fun_llist$) Bool)
(declare-fun fun_app$bd (Nat_a_fun_llist_nat_b_fun_llist_bool_fun_fun$ Nat_a_fun_llist$) Nat_b_fun_llist_bool_fun$)
(declare-fun fun_app$be (Nat_a_fun_nat_a_fun_llist_fun$ Nat_a_fun$) Nat_a_fun_llist$)
(declare-fun fun_app$bf (Nat_a_fun_nat_a_fun_fun_nat_a_fun_nat_a_fun_llist_fun_fun$ Nat_a_fun_nat_a_fun_fun$) Nat_a_fun_nat_a_fun_llist_fun$)
(declare-fun fun_app$bg (Nat_a_fun_nat_a_fun_fun$ Nat_a_fun$) Nat_a_fun$)
(declare-fun fun_app$bh (Nat_b_fun_nat_b_fun_llist_fun$ Nat_b_fun$) Nat_b_fun_llist$)
(declare-fun fun_app$bi (Nat_b_fun_nat_b_fun_fun_nat_b_fun_nat_b_fun_llist_fun_fun$ Nat_b_fun_nat_b_fun_fun$) Nat_b_fun_nat_b_fun_llist_fun$)
(declare-fun fun_app$bj (Nat_b_fun_nat_b_fun_fun$ Nat_b_fun$) Nat_b_fun$)
(declare-fun fun_app$bk (A_a_llist_fun$ A$) A_llist$)
(declare-fun fun_app$bl (A_a_fun_a_a_llist_fun_fun$ A_a_fun$) A_a_llist_fun$)
(declare-fun fun_app$bm (B_b_llist_fun$ B$) B_llist$)
(declare-fun fun_app$bn (B_b_fun_b_b_llist_fun_fun$ B_b_fun$) B_b_llist_fun$)
(declare-fun fun_app$bo (A_nat_a_fun_bool_fun_fun$ A$) Nat_a_fun_bool_fun$)
(declare-fun fun_app$bp (Nat_b_fun_llist_b_llist_llist_fun_bool_fun$ Nat_b_fun_llist_b_llist_llist_fun$) Bool)
(declare-fun fun_app$bq (Nat_a_fun_llist_a_llist_llist_fun_nat_b_fun_llist_b_llist_llist_fun_bool_fun_fun$ Nat_a_fun_llist_a_llist_llist_fun$) Nat_b_fun_llist_b_llist_llist_fun_bool_fun$)
(declare-fun fun_app$br (Nat_a_fun_a_llist_fun_nat_a_fun_llist_a_llist_llist_fun_fun$ Nat_a_fun_a_llist_fun$) Nat_a_fun_llist_a_llist_llist_fun$)
(declare-fun fun_app$bs (Nat_b_fun_b_llist_fun_nat_b_fun_llist_b_llist_llist_fun_fun$ Nat_b_fun_b_llist_fun$) Nat_b_fun_llist_b_llist_llist_fun$)
(declare-fun fun_app$bt (B_b_fun_bool_fun$ B_b_fun$) Bool)
(declare-fun fun_app$bu (A_a_fun_b_b_fun_bool_fun_fun$ A_a_fun$) B_b_fun_bool_fun$)
(declare-fun fun_app$bv (B_llist_b_llist_fun_bool_fun$ B_llist_b_llist_fun$) Bool)
(declare-fun fun_app$bw (A_llist_a_llist_fun_b_llist_b_llist_fun_bool_fun_fun$ A_llist_a_llist_fun$) B_llist_b_llist_fun_bool_fun$)
(declare-fun fun_app$bx (B_b_llist_fun_bool_fun$ B_b_llist_fun$) Bool)
(declare-fun fun_app$by (A_a_llist_fun_b_b_llist_fun_bool_fun_fun$ A_a_llist_fun$) B_b_llist_fun_bool_fun$)
(declare-fun iterates$a () Nat_a_fun_nat_a_fun_fun_nat_a_fun_nat_a_fun_llist_fun_fun$)
(declare-fun iterates$b () Nat_b_fun_nat_b_fun_fun_nat_b_fun_nat_b_fun_llist_fun_fun$)
(declare-fun iterates$c () A_a_fun_a_a_llist_fun_fun$)
(declare-fun iterates$d () B_b_fun_b_b_llist_fun_fun$)
(declare-fun rel_fun$aa (Nat_nat_fun_nat_b_fun_bool_fun_fun$ Nat_llist_nat_llist_fun_nat_llist_b_llist_fun_bool_fun_fun$ Nat_nat_fun_nat_llist_nat_llist_fun_fun$ Nat_b_fun_nat_llist_b_llist_fun_fun$) Bool)
(declare-fun rel_fun$ab (Nat_nat_bool_fun_fun$ Nat_b_bool_fun_fun$) Nat_nat_fun_nat_b_fun_bool_fun_fun$)
(declare-fun rel_fun$ac (Nat_llist_nat_llist_bool_fun_fun$ Nat_llist_b_llist_bool_fun_fun$) Nat_llist_nat_llist_fun_nat_llist_b_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$ad (Nat_nat_fun_a_a_fun_bool_fun_fun$ Nat_nat_llist_fun_a_a_llist_fun_bool_fun_fun$ Nat_nat_fun_nat_nat_llist_fun_fun$ A_a_fun_a_a_llist_fun_fun$) Bool)
(declare-fun rel_fun$ae (Nat_a_bool_fun_fun$ Nat_a_bool_fun_fun$) Nat_nat_fun_a_a_fun_bool_fun_fun$)
(declare-fun rel_fun$af (Nat_a_bool_fun_fun$ Nat_llist_a_llist_bool_fun_fun$) Nat_nat_llist_fun_a_a_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$ag (Nat_nat_fun_b_b_fun_bool_fun_fun$ Nat_nat_llist_fun_b_b_llist_fun_bool_fun_fun$ Nat_nat_fun_nat_nat_llist_fun_fun$ B_b_fun_b_b_llist_fun_fun$) Bool)
(declare-fun rel_fun$ah (Nat_b_bool_fun_fun$ Nat_b_bool_fun_fun$) Nat_nat_fun_b_b_fun_bool_fun_fun$)
(declare-fun rel_fun$ai (Nat_b_bool_fun_fun$ Nat_llist_b_llist_bool_fun_fun$) Nat_nat_llist_fun_b_b_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$aj (B_b_fun_nat_nat_fun_bool_fun_fun$ B_b_llist_fun_nat_nat_llist_fun_bool_fun_fun$ B_b_fun_b_b_llist_fun_fun$ Nat_nat_fun_nat_nat_llist_fun_fun$) Bool)
(declare-fun rel_fun$ak (B_nat_bool_fun_fun$ B_llist_nat_llist_bool_fun_fun$) B_b_llist_fun_nat_nat_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$al (Nat_a_fun_nat_a_fun_fun_nat_b_fun_nat_b_fun_fun_bool_fun_fun$ Nat_a_fun_nat_a_fun_llist_fun_nat_b_fun_nat_b_fun_llist_fun_bool_fun_fun$ Nat_a_fun_nat_a_fun_fun_nat_a_fun_nat_a_fun_llist_fun_fun$ Nat_b_fun_nat_b_fun_fun_nat_b_fun_nat_b_fun_llist_fun_fun$) Bool)
(declare-fun rel_fun$am (Nat_a_fun_nat_b_fun_bool_fun_fun$ Nat_a_fun_nat_b_fun_bool_fun_fun$) Nat_a_fun_nat_a_fun_fun_nat_b_fun_nat_b_fun_fun_bool_fun_fun$)
(declare-fun rel_fun$an (Nat_a_fun_nat_b_fun_bool_fun_fun$ Nat_a_fun_llist_nat_b_fun_llist_bool_fun_fun$) Nat_a_fun_nat_a_fun_llist_fun_nat_b_fun_nat_b_fun_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$ao (B_b_fun_b_b_fun_bool_fun_fun$ B_b_llist_fun_b_b_llist_fun_bool_fun_fun$ B_b_fun_b_b_llist_fun_fun$ B_b_fun_b_b_llist_fun_fun$) Bool)
(declare-fun rel_fun$ap (B_b_bool_fun_fun$ B_b_bool_fun_fun$) B_b_fun_b_b_fun_bool_fun_fun$)
(declare-fun rel_fun$aq (B_b_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$) B_b_llist_fun_b_b_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$ar (B_b_fun_a_a_fun_bool_fun_fun$ B_b_llist_fun_a_a_llist_fun_bool_fun_fun$ B_b_fun_b_b_llist_fun_fun$ A_a_fun_a_a_llist_fun_fun$) Bool)
(declare-fun rel_fun$as (B_a_bool_fun_fun$ B_a_bool_fun_fun$) B_b_fun_a_a_fun_bool_fun_fun$)
(declare-fun rel_fun$at (B_a_bool_fun_fun$ B_llist_a_llist_bool_fun_fun$) B_b_llist_fun_a_a_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$au (A_a_fun_nat_nat_fun_bool_fun_fun$ A_a_llist_fun_nat_nat_llist_fun_bool_fun_fun$ A_a_fun_a_a_llist_fun_fun$ Nat_nat_fun_nat_nat_llist_fun_fun$) Bool)
(declare-fun rel_fun$av (A_nat_bool_fun_fun$ A_nat_bool_fun_fun$) A_a_fun_nat_nat_fun_bool_fun_fun$)
(declare-fun rel_fun$aw (A_nat_bool_fun_fun$ A_llist_nat_llist_bool_fun_fun$) A_a_llist_fun_nat_nat_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$ax (A_a_fun_a_a_fun_bool_fun_fun$ A_a_llist_fun_a_a_llist_fun_bool_fun_fun$ A_a_fun_a_a_llist_fun_fun$ A_a_fun_a_a_llist_fun_fun$) Bool)
(declare-fun rel_fun$ay (A_a_bool_fun_fun$ A_a_bool_fun_fun$) A_a_fun_a_a_fun_bool_fun_fun$)
(declare-fun rel_fun$az (A_a_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$) A_a_llist_fun_a_a_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$ba (Nat_nat_fun_nat_nat_fun_bool_fun_fun$ Nat_nat_llist_fun_nat_nat_llist_fun_bool_fun_fun$ Nat_nat_fun_nat_nat_llist_fun_fun$ Nat_nat_fun_nat_nat_llist_fun_fun$) Bool)
(declare-fun rel_fun$bb (Nat_nat_bool_fun_fun$ Nat_nat_bool_fun_fun$) Nat_nat_fun_nat_nat_fun_bool_fun_fun$)
(declare-fun rel_fun$bc (Nat_nat_bool_fun_fun$ Nat_llist_nat_llist_bool_fun_fun$) Nat_nat_llist_fun_nat_nat_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$bd (A_a_fun_b_b_fun_bool_fun_fun$ A_a_llist_fun_b_b_llist_fun_bool_fun_fun$ A_a_fun_a_a_llist_fun_fun$ B_b_fun_b_b_llist_fun_fun$) Bool)
(declare-fun rel_fun$be (A_b_bool_fun_fun$ A_llist_b_llist_bool_fun_fun$) A_a_llist_fun_b_b_llist_fun_bool_fun_fun$)
(declare-fun llist_all2$ (A_b_bool_fun_fun$) A_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$a (Nat_b_bool_fun_fun$) Nat_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$b (B_b_bool_fun_fun$) B_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$c (B_a_bool_fun_fun$) B_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$d (Nat_a_bool_fun_fun$) Nat_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$e (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$f (A_nat_bool_fun_fun$) A_llist_nat_llist_bool_fun_fun$)
(declare-fun llist_all2$g (Nat_nat_bool_fun_fun$) Nat_llist_nat_llist_bool_fun_fun$)
(declare-fun llist_all2$h (B_nat_bool_fun_fun$) B_llist_nat_llist_bool_fun_fun$)
(declare-fun llist_all2$i (Nat_a_fun_nat_b_fun_bool_fun_fun$) Nat_a_fun_llist_nat_b_fun_llist_bool_fun_fun$)
(declare-fun llist_all2$j (A_b_llist_bool_fun_fun$ A_llist$ B_llist_llist$) Bool)
(declare-fun llist_all2$k (A_a_llist_bool_fun_fun$ A_llist$ A_llist_llist$) Bool)
(declare-fun llist_all2$l (B_nat_a_fun_bool_fun_fun$ B_llist$ Nat_a_fun_llist$) Bool)
(declare-fun llist_all2$m (A_nat_b_fun_bool_fun_fun$ A_llist$ Nat_b_fun_llist$) Bool)
(declare-fun llist_all2$n (A_nat_a_fun_bool_fun_fun$ A_llist$ Nat_a_fun_llist$) Bool)
(declare-fun llist_all2$o (A_llist_b_llist_bool_fun_fun$) A_llist_llist_b_llist_llist_bool_fun_fun$)
(assert (! (forall ((?v0 Nat_b_fun$)) (! (= (fun_app$ uub$ ?v0) (fun_app$a (fun_app$b lmap$ ?v0) (fun_app$c (fun_app$d iterates$ suc$) zero$))) :pattern ((fun_app$ uub$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat_a_fun$)) (! (= (fun_app$e uua$ ?v0) (fun_app$f (fun_app$g lmap$a ?v0) (fun_app$c (fun_app$d iterates$ suc$) zero$))) :pattern ((fun_app$e uua$ ?v0)))) :named a1))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (= (fun_app$h (fun_app$i uvu$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$h (fun_app$i uvu$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$j (fun_app$k uvw$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$j (fun_app$k uvw$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$l (fun_app$m uu$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$l (fun_app$m uu$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$n (fun_app$o uvt$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$n (fun_app$o uvt$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$p (fun_app$q uvv$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$p (fun_app$q uvv$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 Nat_b_fun$) (?v2 Nat$)) (! (= (fun_app$r (uui$ ?v0 ?v1) ?v2) (fun_app$o ?v0 (fun_app$s ?v1 ?v2))) :pattern ((fun_app$r (uui$ ?v0 ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$o (uuk$ ?v0 ?v1) ?v2) (fun_app$o ?v0 (fun_app$t ?v1 ?v2))) :pattern ((fun_app$o (uuk$ ?v0 ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A$)) (! (= (fun_app$u (uuj$ ?v0 ?v1) ?v2) (fun_app$o ?v0 (fun_app$v ?v1 ?v2))) :pattern ((fun_app$u (uuj$ ?v0 ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 Nat_b_fun$) (?v2 Nat$)) (! (= (fun_app$w (uul$ ?v0 ?v1) ?v2) (fun_app$x ?v0 (fun_app$s ?v1 ?v2))) :pattern ((fun_app$w (uul$ ?v0 ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$x (uum$ ?v0 ?v1) ?v2) (fun_app$x ?v0 (fun_app$t ?v1 ?v2))) :pattern ((fun_app$x (uum$ ?v0 ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A$)) (! (= (fun_app$q (uun$ ?v0 ?v1) ?v2) (fun_app$x ?v0 (fun_app$v ?v1 ?v2))) :pattern ((fun_app$q (uun$ ?v0 ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 A_nat_bool_fun_fun$) (?v1 Nat_a_fun$) (?v2 Nat$)) (! (= (fun_app$m (uuo$ ?v0 ?v1) ?v2) (fun_app$y ?v0 (fun_app$z ?v1 ?v2))) :pattern ((fun_app$m (uuo$ ?v0 ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 Nat_a_fun$) (?v2 Nat$)) (! (= (fun_app$r (uuf$ ?v0 ?v1) ?v2) (fun_app$u ?v0 (fun_app$z ?v1 ?v2))) :pattern ((fun_app$r (uuf$ ?v0 ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$o (uuh$ ?v0 ?v1) ?v2) (fun_app$u ?v0 (fun_app$aa ?v1 ?v2))) :pattern ((fun_app$o (uuh$ ?v0 ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$u (uug$ ?v0 ?v1) ?v2) (fun_app$u ?v0 (fun_app$ab ?v1 ?v2))) :pattern ((fun_app$u (uug$ ?v0 ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 Nat_b_fun$) (?v2 B$) (?v3 Nat$)) (! (= (fun_app$l (fun_app$ac (uus$ ?v0 ?v1) ?v2) ?v3) (fun_app$n (fun_app$o ?v0 ?v2) (fun_app$s ?v1 ?v3))) :pattern ((fun_app$l (fun_app$ac (uus$ ?v0 ?v1) ?v2) ?v3)))) :named a17))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B$) (?v3 B$)) (! (= (fun_app$n (fun_app$o (uut$ ?v0 ?v1) ?v2) ?v3) (fun_app$n (fun_app$o ?v0 ?v2) (fun_app$t ?v1 ?v3))) :pattern ((fun_app$n (fun_app$o (uut$ ?v0 ?v1) ?v2) ?v3)))) :named a18))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 A_b_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$p (fun_app$x (uuu$ ?v0 ?v1) ?v2) ?v3) (fun_app$n (fun_app$o ?v0 ?v2) (fun_app$v ?v1 ?v3))) :pattern ((fun_app$p (fun_app$x (uuu$ ?v0 ?v1) ?v2) ?v3)))) :named a19))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 Nat_a_fun$) (?v2 B$) (?v3 Nat$)) (! (= (fun_app$l (fun_app$ac (uuv$ ?v0 ?v1) ?v2) ?v3) (fun_app$p (fun_app$x ?v0 ?v2) (fun_app$z ?v1 ?v3))) :pattern ((fun_app$l (fun_app$ac (uuv$ ?v0 ?v1) ?v2) ?v3)))) :named a20))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B$) (?v3 B$)) (! (= (fun_app$n (fun_app$o (uuw$ ?v0 ?v1) ?v2) ?v3) (fun_app$p (fun_app$x ?v0 ?v2) (fun_app$aa ?v1 ?v3))) :pattern ((fun_app$n (fun_app$o (uuw$ ?v0 ?v1) ?v2) ?v3)))) :named a21))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_a_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$p (fun_app$x (uux$ ?v0 ?v1) ?v2) ?v3) (fun_app$p (fun_app$x ?v0 ?v2) (fun_app$ab ?v1 ?v3))) :pattern ((fun_app$p (fun_app$x (uux$ ?v0 ?v1) ?v2) ?v3)))) :named a22))
(assert (! (forall ((?v0 A_nat_bool_fun_fun$) (?v1 B_nat_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$n (fun_app$u (uuy$ ?v0 ?v1) ?v2) ?v3) (fun_app$l (fun_app$y ?v0 ?v2) (fun_app$ad ?v1 ?v3))) :pattern ((fun_app$n (fun_app$u (uuy$ ?v0 ?v1) ?v2) ?v3)))) :named a23))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 Nat_b_fun$) (?v2 A$) (?v3 Nat$)) (! (= (fun_app$l (fun_app$y (uup$ ?v0 ?v1) ?v2) ?v3) (fun_app$n (fun_app$u ?v0 ?v2) (fun_app$s ?v1 ?v3))) :pattern ((fun_app$l (fun_app$y (uup$ ?v0 ?v1) ?v2) ?v3)))) :named a24))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_b_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$n (fun_app$u (uuq$ ?v0 ?v1) ?v2) ?v3) (fun_app$n (fun_app$u ?v0 ?v2) (fun_app$t ?v1 ?v3))) :pattern ((fun_app$n (fun_app$u (uuq$ ?v0 ?v1) ?v2) ?v3)))) :named a25))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$p (fun_app$q (uur$ ?v0 ?v1) ?v2) ?v3) (fun_app$n (fun_app$u ?v0 ?v2) (fun_app$v ?v1 ?v3))) :pattern ((fun_app$p (fun_app$q (uur$ ?v0 ?v1) ?v2) ?v3)))) :named a26))
(assert (! (forall ((?v0 Nat_a_fun_nat_b_fun_bool_fun_fun$) (?v1 Nat_a_fun_nat_b_fun_bool_fun_fun$) (?v2 Nat_a_fun$) (?v3 Nat_b_fun$)) (! (= (fun_app$ae (fun_app$af (uvo$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$ae (fun_app$af ?v0 ?v2) ?v3) (fun_app$ae (fun_app$af ?v1 ?v2) ?v3))) :pattern ((fun_app$ae (fun_app$af (uvo$ ?v0 ?v1) ?v2) ?v3)))) :named a27))
(assert (! (forall ((?v0 B_nat_a_fun_bool_fun_fun$) (?v1 B_nat_a_fun_bool_fun_fun$) (?v2 B$) (?v3 Nat_a_fun$)) (! (= (fun_app$ag (fun_app$ah (uvr$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$ag (fun_app$ah ?v0 ?v2) ?v3) (fun_app$ag (fun_app$ah ?v1 ?v2) ?v3))) :pattern ((fun_app$ag (fun_app$ah (uvr$ ?v0 ?v1) ?v2) ?v3)))) :named a28))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_bool_fun_fun$) (?v2 B$) (?v3 B$)) (! (= (fun_app$n (fun_app$o (uvk$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$n (fun_app$o ?v0 ?v2) ?v3) (fun_app$n (fun_app$o ?v1 ?v2) ?v3))) :pattern ((fun_app$n (fun_app$o (uvk$ ?v0 ?v1) ?v2) ?v3)))) :named a29))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_a_bool_fun_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$p (fun_app$x (uvl$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$p (fun_app$x ?v0 ?v2) ?v3) (fun_app$p (fun_app$x ?v1 ?v2) ?v3))) :pattern ((fun_app$p (fun_app$x (uvl$ ?v0 ?v1) ?v2) ?v3)))) :named a30))
(assert (! (forall ((?v0 A_b_llist_bool_fun_fun$) (?v1 A_b_llist_bool_fun_fun$) (?v2 A$) (?v3 B_llist$)) (! (= (fun_app$h (fun_app$ai (uvp$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$h (fun_app$ai ?v0 ?v2) ?v3) (fun_app$h (fun_app$ai ?v1 ?v2) ?v3))) :pattern ((fun_app$h (fun_app$ai (uvp$ ?v0 ?v1) ?v2) ?v3)))) :named a31))
(assert (! (forall ((?v0 A_a_llist_bool_fun_fun$) (?v1 A_a_llist_bool_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$j (fun_app$aj (uvq$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$j (fun_app$aj ?v0 ?v2) ?v3) (fun_app$j (fun_app$aj ?v1 ?v2) ?v3))) :pattern ((fun_app$j (fun_app$aj (uvq$ ?v0 ?v1) ?v2) ?v3)))) :named a32))
(assert (! (forall ((?v0 A_nat_bool_fun_fun$) (?v1 A_nat_bool_fun_fun$) (?v2 A$) (?v3 Nat$)) (! (= (fun_app$l (fun_app$y (uvm$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$l (fun_app$y ?v0 ?v2) ?v3) (fun_app$l (fun_app$y ?v1 ?v2) ?v3))) :pattern ((fun_app$l (fun_app$y (uvm$ ?v0 ?v1) ?v2) ?v3)))) :named a33))
(assert (! (forall ((?v0 A_nat_b_fun_bool_fun_fun$) (?v1 A_nat_b_fun_bool_fun_fun$) (?v2 A$) (?v3 Nat_b_fun$)) (! (= (fun_app$ae (fun_app$ak (uvs$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$ae (fun_app$ak ?v0 ?v2) ?v3) (fun_app$ae (fun_app$ak ?v1 ?v2) ?v3))) :pattern ((fun_app$ae (fun_app$ak (uvs$ ?v0 ?v1) ?v2) ?v3)))) :named a34))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_bool_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$n (fun_app$u (uvj$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$n (fun_app$u ?v0 ?v2) ?v3) (fun_app$n (fun_app$u ?v1 ?v2) ?v3))) :pattern ((fun_app$n (fun_app$u (uvj$ ?v0 ?v1) ?v2) ?v3)))) :named a35))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_bool_fun_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$p (fun_app$q (uvn$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$p (fun_app$q ?v0 ?v2) ?v3) (fun_app$p (fun_app$q ?v1 ?v2) ?v3))) :pattern ((fun_app$p (fun_app$q (uvn$ ?v0 ?v1) ?v2) ?v3)))) :named a36))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$l (fun_app$m (uve$ ?v0 ?v1) ?v2) ?v3) (= (fun_app$al ?v0 ?v2) (fun_app$al ?v1 ?v3))) :pattern ((fun_app$l (fun_app$m (uve$ ?v0 ?v1) ?v2) ?v3)))) :named a37))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 Nat_b_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$l (fun_app$m (uva$ ?v0 ?v1) ?v2) ?v3) (= (fun_app$s ?v0 ?v2) (fun_app$s ?v1 ?v3))) :pattern ((fun_app$l (fun_app$m (uva$ ?v0 ?v1) ?v2) ?v3)))) :named a38))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 B_b_fun$) (?v2 Nat$) (?v3 B$)) (! (= (fun_app$n (fun_app$r (uvc$ ?v0 ?v1) ?v2) ?v3) (= (fun_app$s ?v0 ?v2) (fun_app$t ?v1 ?v3))) :pattern ((fun_app$n (fun_app$r (uvc$ ?v0 ?v1) ?v2) ?v3)))) :named a39))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_a_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$l (fun_app$m (uuz$ ?v0 ?v1) ?v2) ?v3) (= (fun_app$z ?v0 ?v2) (fun_app$z ?v1 ?v3))) :pattern ((fun_app$l (fun_app$m (uuz$ ?v0 ?v1) ?v2) ?v3)))) :named a40))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 A_a_fun$) (?v2 Nat$) (?v3 A$)) (! (= (fun_app$p (fun_app$w (uvb$ ?v0 ?v1) ?v2) ?v3) (= (fun_app$z ?v0 ?v2) (fun_app$ab ?v1 ?v3))) :pattern ((fun_app$p (fun_app$w (uvb$ ?v0 ?v1) ?v2) ?v3)))) :named a41))
(assert (! (forall ((?v0 B_b_fun$) (?v1 Nat_b_fun$) (?v2 B$) (?v3 Nat$)) (! (= (fun_app$l (fun_app$ac (uvd$ ?v0 ?v1) ?v2) ?v3) (= (fun_app$t ?v0 ?v2) (fun_app$s ?v1 ?v3))) :pattern ((fun_app$l (fun_app$ac (uvd$ ?v0 ?v1) ?v2) ?v3)))) :named a42))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B$) (?v3 B$)) (! (= (fun_app$n (fun_app$o (uvh$ ?v0 ?v1) ?v2) ?v3) (= (fun_app$t ?v0 ?v2) (fun_app$t ?v1 ?v3))) :pattern ((fun_app$n (fun_app$o (uvh$ ?v0 ?v1) ?v2) ?v3)))) :named a43))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_a_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$p (fun_app$x (uvi$ ?v0 ?v1) ?v2) ?v3) (= (fun_app$aa ?v0 ?v2) (fun_app$ab ?v1 ?v3))) :pattern ((fun_app$p (fun_app$x (uvi$ ?v0 ?v1) ?v2) ?v3)))) :named a44))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_b_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$n (fun_app$u (uvf$ ?v0 ?v1) ?v2) ?v3) (= (fun_app$v ?v0 ?v2) (fun_app$t ?v1 ?v3))) :pattern ((fun_app$n (fun_app$u (uvf$ ?v0 ?v1) ?v2) ?v3)))) :named a45))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$n (fun_app$u (uvg$ ?v0 ?v1) ?v2) ?v3) (= (fun_app$ab ?v0 ?v2) (fun_app$aa ?v1 ?v3))) :pattern ((fun_app$n (fun_app$u (uvg$ ?v0 ?v1) ?v2) ?v3)))) :named a46))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$al uue$ ?v0) ?v0) :pattern ((fun_app$al uue$ ?v0)))) :named a47))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$t uud$ ?v0) ?v0) :pattern ((fun_app$t uud$ ?v0)))) :named a48))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ab uuc$ ?v0) ?v0) :pattern ((fun_app$ab uuc$ ?v0)))) :named a49))
(assert (! (not (fun_app$am (fun_app$an (rel_fun$ (rel_fun$a uu$ a$) (llist_all2$ a$)) uua$) uub$)) :named a50))
(assert (! (forall ((?v0 A_llist$)) (= (fun_app$ao (fun_app$ap lmap$b uuc$) ?v0) ?v0)) :named a51))
(assert (! (forall ((?v0 B_llist$)) (= (fun_app$aq (fun_app$ar lmap$c uud$) ?v0) ?v0)) :named a52))
(assert (! (forall ((?v0 Nat_llist$)) (= (fun_app$as (fun_app$at lmap$d uue$) ?v0) ?v0)) :named a53))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 Nat_a_fun$) (?v2 Nat_llist$) (?v3 B_llist$)) (= (fun_app$h (fun_app$au (llist_all2$ ?v0) (fun_app$f (fun_app$g lmap$a ?v1) ?v2)) ?v3) (fun_app$h (fun_app$av (llist_all2$a (uuf$ ?v0 ?v1)) ?v2) ?v3))) :named a54))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$h (fun_app$au (llist_all2$ ?v0) (fun_app$ao (fun_app$ap lmap$b ?v1) ?v2)) ?v3) (fun_app$h (fun_app$au (llist_all2$ (uug$ ?v0 ?v1)) ?v2) ?v3))) :named a55))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B_llist$) (?v3 B_llist$)) (= (fun_app$h (fun_app$au (llist_all2$ ?v0) (lmap$e ?v1 ?v2)) ?v3) (fun_app$h (fun_app$i (llist_all2$b (uuh$ ?v0 ?v1)) ?v2) ?v3))) :named a56))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 Nat_b_fun$) (?v2 Nat_llist$) (?v3 B_llist$)) (= (fun_app$h (fun_app$i (llist_all2$b ?v0) (fun_app$a (fun_app$b lmap$ ?v1) ?v2)) ?v3) (fun_app$h (fun_app$av (llist_all2$a (uui$ ?v0 ?v1)) ?v2) ?v3))) :named a57))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$h (fun_app$i (llist_all2$b ?v0) (lmap$f ?v1 ?v2)) ?v3) (fun_app$h (fun_app$au (llist_all2$ (uuj$ ?v0 ?v1)) ?v2) ?v3))) :named a58))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B_llist$) (?v3 B_llist$)) (= (fun_app$h (fun_app$i (llist_all2$b ?v0) (fun_app$aq (fun_app$ar lmap$c ?v1) ?v2)) ?v3) (fun_app$h (fun_app$i (llist_all2$b (uuk$ ?v0 ?v1)) ?v2) ?v3))) :named a59))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 Nat_b_fun$) (?v2 Nat_llist$) (?v3 A_llist$)) (= (fun_app$j (fun_app$aw (llist_all2$c ?v0) (fun_app$a (fun_app$b lmap$ ?v1) ?v2)) ?v3) (fun_app$j (fun_app$ax (llist_all2$d (uul$ ?v0 ?v1)) ?v2) ?v3))) :named a60))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B_llist$) (?v3 A_llist$)) (= (fun_app$j (fun_app$aw (llist_all2$c ?v0) (fun_app$aq (fun_app$ar lmap$c ?v1) ?v2)) ?v3) (fun_app$j (fun_app$aw (llist_all2$c (uum$ ?v0 ?v1)) ?v2) ?v3))) :named a61))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A_llist$) (?v3 A_llist$)) (= (fun_app$j (fun_app$aw (llist_all2$c ?v0) (lmap$f ?v1 ?v2)) ?v3) (fun_app$j (fun_app$k (llist_all2$e (uun$ ?v0 ?v1)) ?v2) ?v3))) :named a62))
(assert (! (forall ((?v0 A_nat_bool_fun_fun$) (?v1 Nat_a_fun$) (?v2 Nat_llist$) (?v3 Nat_llist$)) (= (fun_app$ay (fun_app$az (llist_all2$f ?v0) (fun_app$f (fun_app$g lmap$a ?v1) ?v2)) ?v3) (fun_app$ay (fun_app$ba (llist_all2$g (uuo$ ?v0 ?v1)) ?v2) ?v3))) :named a63))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 Nat_a_fun$) (?v2 Nat_llist$) (?v3 B_llist$)) (= (fun_app$h (fun_app$au (llist_all2$ ?v0) (fun_app$f (fun_app$g lmap$a ?v1) ?v2)) ?v3) (fun_app$h (fun_app$av (llist_all2$a (uuf$ ?v0 ?v1)) ?v2) ?v3))) :named a64))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$h (fun_app$au (llist_all2$ ?v0) (fun_app$ao (fun_app$ap lmap$b ?v1) ?v2)) ?v3) (fun_app$h (fun_app$au (llist_all2$ (uug$ ?v0 ?v1)) ?v2) ?v3))) :named a65))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B_llist$) (?v3 B_llist$)) (= (fun_app$h (fun_app$au (llist_all2$ ?v0) (lmap$e ?v1 ?v2)) ?v3) (fun_app$h (fun_app$i (llist_all2$b (uuh$ ?v0 ?v1)) ?v2) ?v3))) :named a66))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 Nat_b_fun$) (?v2 Nat_llist$) (?v3 B_llist$)) (= (fun_app$h (fun_app$i (llist_all2$b ?v0) (fun_app$a (fun_app$b lmap$ ?v1) ?v2)) ?v3) (fun_app$h (fun_app$av (llist_all2$a (uui$ ?v0 ?v1)) ?v2) ?v3))) :named a67))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$h (fun_app$i (llist_all2$b ?v0) (lmap$f ?v1 ?v2)) ?v3) (fun_app$h (fun_app$au (llist_all2$ (uuj$ ?v0 ?v1)) ?v2) ?v3))) :named a68))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B_llist$) (?v3 B_llist$)) (= (fun_app$h (fun_app$i (llist_all2$b ?v0) (fun_app$aq (fun_app$ar lmap$c ?v1) ?v2)) ?v3) (fun_app$h (fun_app$i (llist_all2$b (uuk$ ?v0 ?v1)) ?v2) ?v3))) :named a69))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 Nat_b_fun$) (?v2 Nat_llist$) (?v3 A_llist$)) (= (fun_app$j (fun_app$aw (llist_all2$c ?v0) (fun_app$a (fun_app$b lmap$ ?v1) ?v2)) ?v3) (fun_app$j (fun_app$ax (llist_all2$d (uul$ ?v0 ?v1)) ?v2) ?v3))) :named a70))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B_llist$) (?v3 A_llist$)) (= (fun_app$j (fun_app$aw (llist_all2$c ?v0) (fun_app$aq (fun_app$ar lmap$c ?v1) ?v2)) ?v3) (fun_app$j (fun_app$aw (llist_all2$c (uum$ ?v0 ?v1)) ?v2) ?v3))) :named a71))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A_llist$) (?v3 A_llist$)) (= (fun_app$j (fun_app$aw (llist_all2$c ?v0) (lmap$f ?v1 ?v2)) ?v3) (fun_app$j (fun_app$k (llist_all2$e (uun$ ?v0 ?v1)) ?v2) ?v3))) :named a72))
(assert (! (forall ((?v0 A_nat_bool_fun_fun$) (?v1 Nat_a_fun$) (?v2 Nat_llist$) (?v3 Nat_llist$)) (= (fun_app$ay (fun_app$az (llist_all2$f ?v0) (fun_app$f (fun_app$g lmap$a ?v1) ?v2)) ?v3) (fun_app$ay (fun_app$ba (llist_all2$g (uuo$ ?v0 ?v1)) ?v2) ?v3))) :named a73))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 Nat_b_fun$) (?v3 Nat_llist$)) (= (fun_app$h (fun_app$au (llist_all2$ ?v0) ?v1) (fun_app$a (fun_app$b lmap$ ?v2) ?v3)) (fun_app$ay (fun_app$az (llist_all2$f (uup$ ?v0 ?v2)) ?v1) ?v3))) :named a74))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (fun_app$h (fun_app$au (llist_all2$ ?v0) ?v1) (fun_app$aq (fun_app$ar lmap$c ?v2) ?v3)) (fun_app$h (fun_app$au (llist_all2$ (uuq$ ?v0 ?v2)) ?v1) ?v3))) :named a75))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 A_b_fun$) (?v3 A_llist$)) (= (fun_app$h (fun_app$au (llist_all2$ ?v0) ?v1) (lmap$f ?v2 ?v3)) (fun_app$j (fun_app$k (llist_all2$e (uur$ ?v0 ?v2)) ?v1) ?v3))) :named a76))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 Nat_b_fun$) (?v3 Nat_llist$)) (= (fun_app$h (fun_app$i (llist_all2$b ?v0) ?v1) (fun_app$a (fun_app$b lmap$ ?v2) ?v3)) (fun_app$ay (fun_app$bb (llist_all2$h (uus$ ?v0 ?v2)) ?v1) ?v3))) :named a77))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (fun_app$h (fun_app$i (llist_all2$b ?v0) ?v1) (fun_app$aq (fun_app$ar lmap$c ?v2) ?v3)) (fun_app$h (fun_app$i (llist_all2$b (uut$ ?v0 ?v2)) ?v1) ?v3))) :named a78))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 A_b_fun$) (?v3 A_llist$)) (= (fun_app$h (fun_app$i (llist_all2$b ?v0) ?v1) (lmap$f ?v2 ?v3)) (fun_app$j (fun_app$aw (llist_all2$c (uuu$ ?v0 ?v2)) ?v1) ?v3))) :named a79))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 Nat_a_fun$) (?v3 Nat_llist$)) (= (fun_app$j (fun_app$aw (llist_all2$c ?v0) ?v1) (fun_app$f (fun_app$g lmap$a ?v2) ?v3)) (fun_app$ay (fun_app$bb (llist_all2$h (uuv$ ?v0 ?v2)) ?v1) ?v3))) :named a80))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 B_a_fun$) (?v3 B_llist$)) (= (fun_app$j (fun_app$aw (llist_all2$c ?v0) ?v1) (lmap$e ?v2 ?v3)) (fun_app$h (fun_app$i (llist_all2$b (uuw$ ?v0 ?v2)) ?v1) ?v3))) :named a81))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_a_fun$) (?v3 A_llist$)) (= (fun_app$j (fun_app$aw (llist_all2$c ?v0) ?v1) (fun_app$ao (fun_app$ap lmap$b ?v2) ?v3)) (fun_app$j (fun_app$aw (llist_all2$c (uux$ ?v0 ?v2)) ?v1) ?v3))) :named a82))
(assert (! (forall ((?v0 A_nat_bool_fun_fun$) (?v1 A_llist$) (?v2 B_nat_fun$) (?v3 B_llist$)) (= (fun_app$ay (fun_app$az (llist_all2$f ?v0) ?v1) (lmap$g ?v2 ?v3)) (fun_app$h (fun_app$au (llist_all2$ (uuy$ ?v0 ?v2)) ?v1) ?v3))) :named a83))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 Nat_b_fun$) (?v3 Nat_llist$)) (= (fun_app$h (fun_app$au (llist_all2$ ?v0) ?v1) (fun_app$a (fun_app$b lmap$ ?v2) ?v3)) (fun_app$ay (fun_app$az (llist_all2$f (uup$ ?v0 ?v2)) ?v1) ?v3))) :named a84))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (fun_app$h (fun_app$au (llist_all2$ ?v0) ?v1) (fun_app$aq (fun_app$ar lmap$c ?v2) ?v3)) (fun_app$h (fun_app$au (llist_all2$ (uuq$ ?v0 ?v2)) ?v1) ?v3))) :named a85))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 A_b_fun$) (?v3 A_llist$)) (= (fun_app$h (fun_app$au (llist_all2$ ?v0) ?v1) (lmap$f ?v2 ?v3)) (fun_app$j (fun_app$k (llist_all2$e (uur$ ?v0 ?v2)) ?v1) ?v3))) :named a86))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 Nat_b_fun$) (?v3 Nat_llist$)) (= (fun_app$h (fun_app$i (llist_all2$b ?v0) ?v1) (fun_app$a (fun_app$b lmap$ ?v2) ?v3)) (fun_app$ay (fun_app$bb (llist_all2$h (uus$ ?v0 ?v2)) ?v1) ?v3))) :named a87))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (fun_app$h (fun_app$i (llist_all2$b ?v0) ?v1) (fun_app$aq (fun_app$ar lmap$c ?v2) ?v3)) (fun_app$h (fun_app$i (llist_all2$b (uut$ ?v0 ?v2)) ?v1) ?v3))) :named a88))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 A_b_fun$) (?v3 A_llist$)) (= (fun_app$h (fun_app$i (llist_all2$b ?v0) ?v1) (lmap$f ?v2 ?v3)) (fun_app$j (fun_app$aw (llist_all2$c (uuu$ ?v0 ?v2)) ?v1) ?v3))) :named a89))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 Nat_a_fun$) (?v3 Nat_llist$)) (= (fun_app$j (fun_app$aw (llist_all2$c ?v0) ?v1) (fun_app$f (fun_app$g lmap$a ?v2) ?v3)) (fun_app$ay (fun_app$bb (llist_all2$h (uuv$ ?v0 ?v2)) ?v1) ?v3))) :named a90))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 B_a_fun$) (?v3 B_llist$)) (= (fun_app$j (fun_app$aw (llist_all2$c ?v0) ?v1) (lmap$e ?v2 ?v3)) (fun_app$h (fun_app$i (llist_all2$b (uuw$ ?v0 ?v2)) ?v1) ?v3))) :named a91))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_a_fun$) (?v3 A_llist$)) (= (fun_app$j (fun_app$aw (llist_all2$c ?v0) ?v1) (fun_app$ao (fun_app$ap lmap$b ?v2) ?v3)) (fun_app$j (fun_app$aw (llist_all2$c (uux$ ?v0 ?v2)) ?v1) ?v3))) :named a92))
(assert (! (forall ((?v0 A_nat_bool_fun_fun$) (?v1 A_llist$) (?v2 B_nat_fun$) (?v3 B_llist$)) (= (fun_app$ay (fun_app$az (llist_all2$f ?v0) ?v1) (lmap$g ?v2 ?v3)) (fun_app$h (fun_app$au (llist_all2$ (uuy$ ?v0 ?v2)) ?v1) ?v3))) :named a93))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_llist$) (?v2 Nat_a_fun$) (?v3 Nat_llist$)) (= (= (fun_app$f (fun_app$g lmap$a ?v0) ?v1) (fun_app$f (fun_app$g lmap$a ?v2) ?v3)) (fun_app$ay (fun_app$ba (llist_all2$g (uuz$ ?v0 ?v2)) ?v1) ?v3))) :named a94))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 Nat_llist$) (?v2 Nat_b_fun$) (?v3 Nat_llist$)) (= (= (fun_app$a (fun_app$b lmap$ ?v0) ?v1) (fun_app$a (fun_app$b lmap$ ?v2) ?v3)) (fun_app$ay (fun_app$ba (llist_all2$g (uva$ ?v0 ?v2)) ?v1) ?v3))) :named a95))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_llist$) (?v2 A_a_fun$) (?v3 A_llist$)) (= (= (fun_app$f (fun_app$g lmap$a ?v0) ?v1) (fun_app$ao (fun_app$ap lmap$b ?v2) ?v3)) (fun_app$j (fun_app$ax (llist_all2$d (uvb$ ?v0 ?v2)) ?v1) ?v3))) :named a96))
(assert (! (forall ((?v0 Nat_b_fun$) (?v1 Nat_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (= (fun_app$a (fun_app$b lmap$ ?v0) ?v1) (fun_app$aq (fun_app$ar lmap$c ?v2) ?v3)) (fun_app$h (fun_app$av (llist_all2$a (uvc$ ?v0 ?v2)) ?v1) ?v3))) :named a97))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$) (?v2 Nat_b_fun$) (?v3 Nat_llist$)) (= (= (fun_app$aq (fun_app$ar lmap$c ?v0) ?v1) (fun_app$a (fun_app$b lmap$ ?v2) ?v3)) (fun_app$ay (fun_app$bb (llist_all2$h (uvd$ ?v0 ?v2)) ?v1) ?v3))) :named a98))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_llist$) (?v2 Nat_nat_fun$) (?v3 Nat_llist$)) (= (= (fun_app$as (fun_app$at lmap$d ?v0) ?v1) (fun_app$as (fun_app$at lmap$d ?v2) ?v3)) (fun_app$ay (fun_app$ba (llist_all2$g (uve$ ?v0 ?v2)) ?v1) ?v3))) :named a99))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (= (lmap$f ?v0 ?v1) (fun_app$aq (fun_app$ar lmap$c ?v2) ?v3)) (fun_app$h (fun_app$au (llist_all2$ (uvf$ ?v0 ?v2)) ?v1) ?v3))) :named a100))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 B_a_fun$) (?v3 B_llist$)) (= (= (fun_app$ao (fun_app$ap lmap$b ?v0) ?v1) (lmap$e ?v2 ?v3)) (fun_app$h (fun_app$au (llist_all2$ (uvg$ ?v0 ?v2)) ?v1) ?v3))) :named a101))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (= (fun_app$aq (fun_app$ar lmap$c ?v0) ?v1) (fun_app$aq (fun_app$ar lmap$c ?v2) ?v3)) (fun_app$h (fun_app$i (llist_all2$b (uvh$ ?v0 ?v2)) ?v1) ?v3))) :named a102))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$) (?v2 A_a_fun$) (?v3 A_llist$)) (= (= (lmap$e ?v0 ?v1) (fun_app$ao (fun_app$ap lmap$b ?v2) ?v3)) (fun_app$j (fun_app$aw (llist_all2$c (uvi$ ?v0 ?v2)) ?v1) ?v3))) :named a103))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_bool_fun_fun$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$h (fun_app$au (llist_all2$ (uvj$ ?v0 ?v1)) ?v2) ?v3) (and (fun_app$h (fun_app$au (llist_all2$ ?v0) ?v2) ?v3) (fun_app$h (fun_app$au (llist_all2$ ?v1) ?v2) ?v3)))) :named a104))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_bool_fun_fun$) (?v2 B_llist$) (?v3 B_llist$)) (= (fun_app$h (fun_app$i (llist_all2$b (uvk$ ?v0 ?v1)) ?v2) ?v3) (and (fun_app$h (fun_app$i (llist_all2$b ?v0) ?v2) ?v3) (fun_app$h (fun_app$i (llist_all2$b ?v1) ?v2) ?v3)))) :named a105))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_a_bool_fun_fun$) (?v2 B_llist$) (?v3 A_llist$)) (= (fun_app$j (fun_app$aw (llist_all2$c (uvl$ ?v0 ?v1)) ?v2) ?v3) (and (fun_app$j (fun_app$aw (llist_all2$c ?v0) ?v2) ?v3) (fun_app$j (fun_app$aw (llist_all2$c ?v1) ?v2) ?v3)))) :named a106))
(assert (! (forall ((?v0 A_nat_bool_fun_fun$) (?v1 A_nat_bool_fun_fun$) (?v2 A_llist$) (?v3 Nat_llist$)) (= (fun_app$ay (fun_app$az (llist_all2$f (uvm$ ?v0 ?v1)) ?v2) ?v3) (and (fun_app$ay (fun_app$az (llist_all2$f ?v0) ?v2) ?v3) (fun_app$ay (fun_app$az (llist_all2$f ?v1) ?v2) ?v3)))) :named a107))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_bool_fun_fun$) (?v2 A_llist$) (?v3 A_llist$)) (= (fun_app$j (fun_app$k (llist_all2$e (uvn$ ?v0 ?v1)) ?v2) ?v3) (and (fun_app$j (fun_app$k (llist_all2$e ?v0) ?v2) ?v3) (fun_app$j (fun_app$k (llist_all2$e ?v1) ?v2) ?v3)))) :named a108))
(assert (! (forall ((?v0 Nat_a_fun_nat_b_fun_bool_fun_fun$) (?v1 Nat_a_fun_nat_b_fun_bool_fun_fun$) (?v2 Nat_a_fun_llist$) (?v3 Nat_b_fun_llist$)) (= (fun_app$bc (fun_app$bd (llist_all2$i (uvo$ ?v0 ?v1)) ?v2) ?v3) (and (fun_app$bc (fun_app$bd (llist_all2$i ?v0) ?v2) ?v3) (fun_app$bc (fun_app$bd (llist_all2$i ?v1) ?v2) ?v3)))) :named a109))
(assert (! (forall ((?v0 A_b_llist_bool_fun_fun$) (?v1 A_b_llist_bool_fun_fun$) (?v2 A_llist$) (?v3 B_llist_llist$)) (= (llist_all2$j (uvp$ ?v0 ?v1) ?v2 ?v3) (and (llist_all2$j ?v0 ?v2 ?v3) (llist_all2$j ?v1 ?v2 ?v3)))) :named a110))
(assert (! (forall ((?v0 A_a_llist_bool_fun_fun$) (?v1 A_a_llist_bool_fun_fun$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (llist_all2$k (uvq$ ?v0 ?v1) ?v2 ?v3) (and (llist_all2$k ?v0 ?v2 ?v3) (llist_all2$k ?v1 ?v2 ?v3)))) :named a111))
(assert (! (forall ((?v0 B_nat_a_fun_bool_fun_fun$) (?v1 B_nat_a_fun_bool_fun_fun$) (?v2 B_llist$) (?v3 Nat_a_fun_llist$)) (= (llist_all2$l (uvr$ ?v0 ?v1) ?v2 ?v3) (and (llist_all2$l ?v0 ?v2 ?v3) (llist_all2$l ?v1 ?v2 ?v3)))) :named a112))
(assert (! (forall ((?v0 A_nat_b_fun_bool_fun_fun$) (?v1 A_nat_b_fun_bool_fun_fun$) (?v2 A_llist$) (?v3 Nat_b_fun_llist$)) (= (llist_all2$m (uvs$ ?v0 ?v1) ?v2 ?v3) (and (llist_all2$m ?v0 ?v2 ?v3) (llist_all2$m ?v1 ?v2 ?v3)))) :named a113))
(assert (! (forall ((?v0 Nat_a_fun_nat_a_fun_fun$) (?v1 Nat_a_fun$)) (= (lmap$h ?v0 (fun_app$be (fun_app$bf iterates$a ?v0) ?v1)) (fun_app$be (fun_app$bf iterates$a ?v0) (fun_app$bg ?v0 ?v1)))) :named a114))
(assert (! (forall ((?v0 Nat_b_fun_nat_b_fun_fun$) (?v1 Nat_b_fun$)) (= (lmap$i ?v0 (fun_app$bh (fun_app$bi iterates$b ?v0) ?v1)) (fun_app$bh (fun_app$bi iterates$b ?v0) (fun_app$bj ?v0 ?v1)))) :named a115))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$ao (fun_app$ap lmap$b ?v0) (fun_app$bk (fun_app$bl iterates$c ?v0) ?v1)) (fun_app$bk (fun_app$bl iterates$c ?v0) (fun_app$ab ?v0 ?v1)))) :named a116))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (= (fun_app$aq (fun_app$ar lmap$c ?v0) (fun_app$bm (fun_app$bn iterates$d ?v0) ?v1)) (fun_app$bm (fun_app$bn iterates$d ?v0) (fun_app$t ?v0 ?v1)))) :named a117))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$)) (= (fun_app$as (fun_app$at lmap$d ?v0) (fun_app$c (fun_app$d iterates$ ?v0) ?v1)) (fun_app$c (fun_app$d iterates$ ?v0) (fun_app$al ?v0 ?v1)))) :named a118))
(assert (! (= (llist_all2$b uvt$) uvu$) :named a119))
(assert (! (= (llist_all2$e uvv$) uvw$) :named a120))
(assert (! (forall ((?v0 A_nat_a_fun_bool_fun_fun$) (?v1 A_llist$) (?v2 Nat_a_fun_llist$) (?v3 A_nat_a_fun_bool_fun_fun$)) (=> (and (llist_all2$n ?v0 ?v1 ?v2) (forall ((?v4 A$) (?v5 Nat_a_fun$)) (=> (fun_app$ag (fun_app$bo ?v0 ?v4) ?v5) (fun_app$ag (fun_app$bo ?v3 ?v4) ?v5)))) (llist_all2$n ?v3 ?v1 ?v2))) :named a121))
(assert (! (forall ((?v0 Nat_a_fun_nat_b_fun_bool_fun_fun$) (?v1 Nat_a_fun_llist$) (?v2 Nat_b_fun_llist$) (?v3 Nat_a_fun_nat_b_fun_bool_fun_fun$)) (=> (and (fun_app$bc (fun_app$bd (llist_all2$i ?v0) ?v1) ?v2) (forall ((?v4 Nat_a_fun$) (?v5 Nat_b_fun$)) (=> (fun_app$ae (fun_app$af ?v0 ?v4) ?v5) (fun_app$ae (fun_app$af ?v3 ?v4) ?v5)))) (fun_app$bc (fun_app$bd (llist_all2$i ?v3) ?v1) ?v2))) :named a122))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_b_bool_fun_fun$)) (=> (and (fun_app$h (fun_app$i (llist_all2$b ?v0) ?v1) ?v2) (forall ((?v4 B$) (?v5 B$)) (=> (fun_app$n (fun_app$o ?v0 ?v4) ?v5) (fun_app$n (fun_app$o ?v3 ?v4) ?v5)))) (fun_app$h (fun_app$i (llist_all2$b ?v3) ?v1) ?v2))) :named a123))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_a_bool_fun_fun$)) (=> (and (fun_app$j (fun_app$aw (llist_all2$c ?v0) ?v1) ?v2) (forall ((?v4 B$) (?v5 A$)) (=> (fun_app$p (fun_app$x ?v0 ?v4) ?v5) (fun_app$p (fun_app$x ?v3 ?v4) ?v5)))) (fun_app$j (fun_app$aw (llist_all2$c ?v3) ?v1) ?v2))) :named a124))
(assert (! (forall ((?v0 A_nat_bool_fun_fun$) (?v1 A_llist$) (?v2 Nat_llist$) (?v3 A_nat_bool_fun_fun$)) (=> (and (fun_app$ay (fun_app$az (llist_all2$f ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 Nat$)) (=> (fun_app$l (fun_app$y ?v0 ?v4) ?v5) (fun_app$l (fun_app$y ?v3 ?v4) ?v5)))) (fun_app$ay (fun_app$az (llist_all2$f ?v3) ?v1) ?v2))) :named a125))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$j (fun_app$k (llist_all2$e ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 A$)) (=> (fun_app$p (fun_app$q ?v0 ?v4) ?v5) (fun_app$p (fun_app$q ?v3 ?v4) ?v5)))) (fun_app$j (fun_app$k (llist_all2$e ?v3) ?v1) ?v2))) :named a126))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_b_bool_fun_fun$)) (=> (and (fun_app$h (fun_app$au (llist_all2$ ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 B$)) (=> (fun_app$n (fun_app$u ?v0 ?v4) ?v5) (fun_app$n (fun_app$u ?v3 ?v4) ?v5)))) (fun_app$h (fun_app$au (llist_all2$ ?v3) ?v1) ?v2))) :named a127))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 A_a_bool_fun_fun$)) (rel_fun$b (rel_fun$c ?v0 ?v1) (rel_fun$d (llist_all2$g ?v0) (llist_all2$e ?v1)) lmap$a lmap$a)) :named a128))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 B_a_bool_fun_fun$)) (rel_fun$e (rel_fun$f ?v0 ?v1) (rel_fun$g (llist_all2$g ?v0) (llist_all2$c ?v1)) lmap$ lmap$a)) :named a129))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 B_b_bool_fun_fun$)) (rel_fun$h (rel_fun$i ?v0 ?v1) (rel_fun$j (llist_all2$g ?v0) (llist_all2$b ?v1)) lmap$ lmap$)) :named a130))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 A_b_bool_fun_fun$)) (rel_fun$k (rel_fun$a ?v0 ?v1) (rel_fun$l (llist_all2$g ?v0) (llist_all2$ ?v1)) lmap$a lmap$)) :named a131))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_bool_fun_fun$)) (rel_fun$m (rel_fun$n ?v0 ?v1) (rel_fun$o (llist_all2$ ?v0) (llist_all2$ ?v1)) lmap$b lmap$c)) :named a132))
(assert (! (forall ((?v0 Nat_a_fun_nat_b_fun_bool_fun_fun$) (?v1 A_llist_b_llist_bool_fun_fun$)) (rel_fun$p (rel_fun$ ?v0 ?v1) (rel_fun$q (llist_all2$i ?v0) (llist_all2$o ?v1)) lmap$j lmap$k)) :named a133))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 B_nat_bool_fun_fun$)) (rel_fun$r (rel_fun$s ?v0 ?v1) (rel_fun$t (llist_all2$g ?v0) (llist_all2$h ?v1)) lmap$ lmap$d)) :named a134))
(assert (! (forall ((?v0 B_nat_bool_fun_fun$) (?v1 B_nat_bool_fun_fun$)) (rel_fun$u (rel_fun$v ?v0 ?v1) (rel_fun$w (llist_all2$h ?v0) (llist_all2$h ?v1)) lmap$c lmap$d)) :named a135))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_a_bool_fun_fun$)) (rel_fun$x (rel_fun$y ?v0 ?v1) (rel_fun$z (llist_all2$g ?v0) (llist_all2$d ?v1)) lmap$d lmap$a)) :named a136))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_b_bool_fun_fun$)) (rel_fun$aa (rel_fun$ab ?v0 ?v1) (rel_fun$ac (llist_all2$g ?v0) (llist_all2$a ?v1)) lmap$d lmap$)) :named a137))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 A_a_bool_fun_fun$)) (rel_fun$b (rel_fun$c ?v0 ?v1) (rel_fun$d (llist_all2$g ?v0) (llist_all2$e ?v1)) lmap$a lmap$a)) :named a138))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 B_a_bool_fun_fun$)) (rel_fun$e (rel_fun$f ?v0 ?v1) (rel_fun$g (llist_all2$g ?v0) (llist_all2$c ?v1)) lmap$ lmap$a)) :named a139))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 B_b_bool_fun_fun$)) (rel_fun$h (rel_fun$i ?v0 ?v1) (rel_fun$j (llist_all2$g ?v0) (llist_all2$b ?v1)) lmap$ lmap$)) :named a140))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 A_b_bool_fun_fun$)) (rel_fun$k (rel_fun$a ?v0 ?v1) (rel_fun$l (llist_all2$g ?v0) (llist_all2$ ?v1)) lmap$a lmap$)) :named a141))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_bool_fun_fun$)) (rel_fun$m (rel_fun$n ?v0 ?v1) (rel_fun$o (llist_all2$ ?v0) (llist_all2$ ?v1)) lmap$b lmap$c)) :named a142))
(assert (! (forall ((?v0 Nat_a_fun_nat_b_fun_bool_fun_fun$) (?v1 A_llist_b_llist_bool_fun_fun$)) (rel_fun$p (rel_fun$ ?v0 ?v1) (rel_fun$q (llist_all2$i ?v0) (llist_all2$o ?v1)) lmap$j lmap$k)) :named a143))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 B_nat_bool_fun_fun$)) (rel_fun$r (rel_fun$s ?v0 ?v1) (rel_fun$t (llist_all2$g ?v0) (llist_all2$h ?v1)) lmap$ lmap$d)) :named a144))
(assert (! (forall ((?v0 B_nat_bool_fun_fun$) (?v1 B_nat_bool_fun_fun$)) (rel_fun$u (rel_fun$v ?v0 ?v1) (rel_fun$w (llist_all2$h ?v0) (llist_all2$h ?v1)) lmap$c lmap$d)) :named a145))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_a_bool_fun_fun$)) (rel_fun$x (rel_fun$y ?v0 ?v1) (rel_fun$z (llist_all2$g ?v0) (llist_all2$d ?v1)) lmap$d lmap$a)) :named a146))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_b_bool_fun_fun$)) (rel_fun$aa (rel_fun$ab ?v0 ?v1) (rel_fun$ac (llist_all2$g ?v0) (llist_all2$a ?v1)) lmap$d lmap$)) :named a147))
(assert (! (forall ((?v0 Nat_a_bool_fun_fun$)) (rel_fun$ad (rel_fun$ae ?v0 ?v0) (rel_fun$af ?v0 (llist_all2$d ?v0)) iterates$ iterates$c)) :named a148))
(assert (! (forall ((?v0 Nat_b_bool_fun_fun$)) (rel_fun$ag (rel_fun$ah ?v0 ?v0) (rel_fun$ai ?v0 (llist_all2$a ?v0)) iterates$ iterates$d)) :named a149))
(assert (! (forall ((?v0 B_nat_bool_fun_fun$)) (rel_fun$aj (rel_fun$v ?v0 ?v0) (rel_fun$ak ?v0 (llist_all2$h ?v0)) iterates$d iterates$)) :named a150))
(assert (! (forall ((?v0 Nat_a_fun_nat_b_fun_bool_fun_fun$)) (rel_fun$al (rel_fun$am ?v0 ?v0) (rel_fun$an ?v0 (llist_all2$i ?v0)) iterates$a iterates$b)) :named a151))
(assert (! (forall ((?v0 B_b_bool_fun_fun$)) (rel_fun$ao (rel_fun$ap ?v0 ?v0) (rel_fun$aq ?v0 (llist_all2$b ?v0)) iterates$d iterates$d)) :named a152))
(assert (! (forall ((?v0 B_a_bool_fun_fun$)) (rel_fun$ar (rel_fun$as ?v0 ?v0) (rel_fun$at ?v0 (llist_all2$c ?v0)) iterates$d iterates$c)) :named a153))
(assert (! (forall ((?v0 A_nat_bool_fun_fun$)) (rel_fun$au (rel_fun$av ?v0 ?v0) (rel_fun$aw ?v0 (llist_all2$f ?v0)) iterates$c iterates$)) :named a154))
(assert (! (forall ((?v0 A_a_bool_fun_fun$)) (rel_fun$ax (rel_fun$ay ?v0 ?v0) (rel_fun$az ?v0 (llist_all2$e ?v0)) iterates$c iterates$c)) :named a155))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$)) (rel_fun$ba (rel_fun$bb ?v0 ?v0) (rel_fun$bc ?v0 (llist_all2$g ?v0)) iterates$ iterates$)) :named a156))
(assert (! (forall ((?v0 A_b_bool_fun_fun$)) (rel_fun$bd (rel_fun$n ?v0 ?v0) (rel_fun$be ?v0 (llist_all2$ ?v0)) iterates$c iterates$d)) :named a157))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$al suc$ ?v0) (fun_app$al suc$ ?v1)) (= ?v0 ?v1))) :named a158))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$al suc$ ?v0) (fun_app$al suc$ ?v1)) (= ?v0 ?v1))) :named a159))
(assert (! (forall ((?v0 Nat_a_fun_a_llist_fun_nat_b_fun_b_llist_fun_bool_fun_fun$) (?v1 Nat_a_fun_llist_a_llist_llist_fun_nat_b_fun_llist_b_llist_llist_fun_bool_fun_fun$) (?v2 Nat_a_fun_a_llist_fun_nat_a_fun_llist_a_llist_llist_fun_fun$) (?v3 Nat_b_fun_b_llist_fun_nat_b_fun_llist_b_llist_llist_fun_fun$)) (=> (forall ((?v4 Nat_a_fun_a_llist_fun$) (?v5 Nat_b_fun_b_llist_fun$)) (=> (fun_app$am (fun_app$an ?v0 ?v4) ?v5) (fun_app$bp (fun_app$bq ?v1 (fun_app$br ?v2 ?v4)) (fun_app$bs ?v3 ?v5)))) (rel_fun$p ?v0 ?v1 ?v2 ?v3))) :named a160))
(assert (! (forall ((?v0 A_a_fun_b_b_fun_bool_fun_fun$) (?v1 A_llist_a_llist_fun_b_llist_b_llist_fun_bool_fun_fun$) (?v2 A_a_fun_a_llist_a_llist_fun_fun$) (?v3 B_b_fun_b_llist_b_llist_fun_fun$)) (=> (forall ((?v4 A_a_fun$) (?v5 B_b_fun$)) (=> (fun_app$bt (fun_app$bu ?v0 ?v4) ?v5) (fun_app$bv (fun_app$bw ?v1 (fun_app$ap ?v2 ?v4)) (fun_app$ar ?v3 ?v5)))) (rel_fun$m ?v0 ?v1 ?v2 ?v3))) :named a161))
(assert (! (forall ((?v0 A_a_fun_b_b_fun_bool_fun_fun$) (?v1 A_a_llist_fun_b_b_llist_fun_bool_fun_fun$) (?v2 A_a_fun_a_a_llist_fun_fun$) (?v3 B_b_fun_b_b_llist_fun_fun$)) (=> (forall ((?v4 A_a_fun$) (?v5 B_b_fun$)) (=> (fun_app$bt (fun_app$bu ?v0 ?v4) ?v5) (fun_app$bx (fun_app$by ?v1 (fun_app$bl ?v2 ?v4)) (fun_app$bn ?v3 ?v5)))) (rel_fun$bd ?v0 ?v1 ?v2 ?v3))) :named a162))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist_b_llist_bool_fun_fun$) (?v2 A_a_llist_fun$) (?v3 B_b_llist_fun$)) (=> (forall ((?v4 A$) (?v5 B$)) (=> (fun_app$n (fun_app$u ?v0 ?v4) ?v5) (fun_app$h (fun_app$au ?v1 (fun_app$bk ?v2 ?v4)) (fun_app$bm ?v3 ?v5)))) (fun_app$bx (fun_app$by (rel_fun$be ?v0 ?v1) ?v2) ?v3))) :named a163))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_bool_fun_fun$) (?v2 A_a_fun$) (?v3 B_b_fun$)) (=> (forall ((?v4 A$) (?v5 B$)) (=> (fun_app$n (fun_app$u ?v0 ?v4) ?v5) (fun_app$n (fun_app$u ?v1 (fun_app$ab ?v2 ?v4)) (fun_app$t ?v3 ?v5)))) (fun_app$bt (fun_app$bu (rel_fun$n ?v0 ?v1) ?v2) ?v3))) :named a164))
(assert (! (forall ((?v0 Nat_a_fun_nat_b_fun_bool_fun_fun$) (?v1 A_llist_b_llist_bool_fun_fun$) (?v2 Nat_a_fun_a_llist_fun$) (?v3 Nat_b_fun_b_llist_fun$)) (=> (forall ((?v4 Nat_a_fun$) (?v5 Nat_b_fun$)) (=> (fun_app$ae (fun_app$af ?v0 ?v4) ?v5) (fun_app$h (fun_app$au ?v1 (fun_app$e ?v2 ?v4)) (fun_app$ ?v3 ?v5)))) (fun_app$am (fun_app$an (rel_fun$ ?v0 ?v1) ?v2) ?v3))) :named a165))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 A_b_bool_fun_fun$) (?v2 Nat_a_fun$) (?v3 Nat_b_fun$)) (=> (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$l (fun_app$m ?v0 ?v4) ?v5) (fun_app$n (fun_app$u ?v1 (fun_app$z ?v2 ?v4)) (fun_app$s ?v3 ?v5)))) (fun_app$ae (fun_app$af (rel_fun$a ?v0 ?v1) ?v2) ?v3))) :named a166))
(check-sat)
;(get-unsat-core)
