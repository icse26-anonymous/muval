; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 631
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun ys$ () A_llist$)
(declare-fun llcp$ (A_llist$ A_llist$) Enat$)
(declare-fun zero$ () Enat$)
(declare-fun ltake$ (Enat$) A_llist_a_llist_fun$)
(declare-fun zero$a () Nat$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun llength$ () A_llist_enat_fun$)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun fun_app$a (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun fun_app$b (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$c (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun gen_lset$ (A_set$) A_llist_a_set_fun$)
(declare-fun pred_llist$ (A_bool_fun$) A_llist_bool_fun$)
(declare-fun gen_llength$ (Nat$) A_llist_enat_fun$)
(declare-fun finite_lprefix$ (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$ (A_llist$) A_llist_bool_fun$)
(assert (! (not (= (llcp$ lNil$ ys$) zero$)) :named a0))
(assert (! (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a1))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ (lmember$ ?v0) lNil$) false) :pattern ((lmember$ ?v0)))) :named a2))
(assert (! (forall ((?v0 Nat$)) (= (= zero$a ?v0) (= ?v0 zero$a))) :named a3))
(assert (! (forall ((?v0 Enat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a4))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$a (gen_lset$ ?v0) lNil$) ?v0) :pattern ((gen_lset$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (finite_lprefix$ ?v0) lNil$) (= ?v0 lNil$)) :pattern ((finite_lprefix$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (finite_lprefix$ lNil$) ?v0) true) :pattern ((fun_app$ (finite_lprefix$ lNil$) ?v0)))) :named a7))
(assert (! (= (fun_app$ (lstrict_prefix$ lNil$) lNil$) false) :named a8))
(assert (! (forall ((?v0 A_bool_fun$)) (fun_app$ (pred_llist$ ?v0) lNil$)) :named a9))
(assert (! (= (fun_app$b llength$ lNil$) zero$) :named a10))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$)) (= (= lNil$ (fun_app$c (ltake$ ?v0) ?v1)) (or (= ?v1 lNil$) (= ?v0 zero$)))) :named a11))
(assert (! (forall ((?v0 A_llist$)) (= (fun_app$c (ltake$ zero$) ?v0) lNil$)) :named a12))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$c (ltake$ ?v0) lNil$) lNil$) :pattern ((ltake$ ?v0)))) :named a13))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (forall ((?v2 A_llist$)) (=> (forall ((?v3 A_llist$)) (=> (fun_app$ (lstrict_prefix$ ?v3) ?v2) (fun_app$ ?v0 ?v3))) (fun_app$ ?v0 ?v2))) (fun_app$ ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$)) (= (= (fun_app$c (ltake$ ?v0) ?v1) lNil$) (or (= ?v1 lNil$) (= ?v0 zero$)))) :named a15))
(assert (! (= llength$ (gen_llength$ zero$a)) :named a16))
(check-sat)
;(get-unsat-core)
