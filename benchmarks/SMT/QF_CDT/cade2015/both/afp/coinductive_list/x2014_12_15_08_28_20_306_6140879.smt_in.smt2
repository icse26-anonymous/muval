; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 621
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun r$ () A_a_bool_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lappend$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$) Bool)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (A_a_bool_fun_fun$ A$) A_bool_fun$)
(assert (! (not (= xs$ ys$)) :named a0))
(assert (! (llexord$ r$ xs$ ys$) :named a1))
(assert (! (not (exists ((?v0 A_llist$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (and (lfinite$ ?v0) (and (= xs$ (fun_app$ (lappend$ ?v0) ?v1)) (and (= ys$ (fun_app$ (lappend$ ?v0) (lCons$ ?v2 ?v3))) (or (= ?v1 lNil$) (fun_app$a (fun_app$b r$ (lhd$ ?v1)) ?v2))))))) :named a2))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (llexord$ ?v0 ?v1 ?v1)) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a4))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (forall ((?v3 A$) (?v4 A$)) (or (fun_app$a (fun_app$b ?v0 ?v3) ?v4) (or (= ?v3 ?v4) (fun_app$a (fun_app$b ?v0 ?v4) ?v3)))) (or (llexord$ ?v0 ?v1 ?v2) (llexord$ ?v0 ?v2 ?v1)))) :named a5))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (llexord$ ?v0 ?v1 ?v2) (and (llexord$ ?v0 ?v2 ?v3) (forall ((?v4 A$) (?v5 A$) (?v6 A$)) (=> (and (fun_app$a (fun_app$b ?v0 ?v4) ?v5) (fun_app$a (fun_app$b ?v0 ?v5) ?v6)) (fun_app$a (fun_app$b ?v0 ?v4) ?v6))))) (llexord$ ?v0 ?v1 ?v3))) :named a6))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (llexord$ ?v0 ?v1 ?v2) (and (llexord$ ?v0 ?v2 ?v1) (forall ((?v3 A$) (?v4 A$)) (=> (and (fun_app$a (fun_app$b ?v0 ?v3) ?v4) (fun_app$a (fun_app$b ?v0 ?v4) ?v3)) false)))) (= ?v1 ?v2))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0) ?v1)) ?v2) (fun_app$ (lappend$ ?v0) (fun_app$ (lappend$ ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (llexord$ ?v0 lNil$ ?v1) true) :pattern ((llexord$ ?v0 lNil$ ?v1)))) :named a9))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (llexord$ ?v0 (lCons$ ?v1 ?v2) (lCons$ ?v3 ?v4)) (or (and (= ?v1 ?v3) (llexord$ ?v0 ?v2 ?v4)) (fun_app$a (fun_app$b ?v0 ?v1) ?v3))) :pattern ((llexord$ ?v0 (lCons$ ?v1 ?v2) (lCons$ ?v3 ?v4))))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (lappend$ ?v0) lNil$) ?v0) :pattern ((lappend$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (lappend$ lNil$) ?v0) ?v0) :pattern ((fun_app$ (lappend$ lNil$) ?v0)))) :named a12))
(assert (! (= (lfinite$ lNil$) true) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1)) ?v2) (lCons$ ?v0 (fun_app$ (lappend$ ?v1) ?v2))) :pattern ((fun_app$ (lappend$ (lCons$ ?v0 ?v1)) ?v2)))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$ (fun_app$ (lappend$ ?v0) ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1)))) :named a17))
(check-sat)
;(get-unsat-core)
