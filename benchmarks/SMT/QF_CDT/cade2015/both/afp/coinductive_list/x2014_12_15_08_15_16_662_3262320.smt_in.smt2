; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 601
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))
  (A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun n$ () Nat$)
(declare-fun n$a () Enat$)
(declare-fun xs$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lmap$ (A_a_fun$ A_llist$) A_llist$)
(declare-fun ltake$ (Enat$) A_llist_a_llist_fun$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun infinity$ () Enat$)
(declare-fun llist_of$ (A_list$) A_llist$)
(assert (! (not (lfinite$ (fun_app$ (ltake$ (enat$ n$)) xs$))) :named a0))
(assert (! (= n$a (enat$ n$)) :named a1))
(assert (! (=> (forall ((?v0 Nat$)) (=> (= n$a (enat$ ?v0)) false)) false) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (or (lfinite$ xs$) (less$ n$a infinity$)) :named a4))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (exists ((?v1 Nat$)) (= (llength$ ?v0) (enat$ ?v1))))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (= (llength$ ?v0) (enat$ ?v1)) (lfinite$ ?v0))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$ ?v0) (exists ((?v1 Nat$)) (= (llength$ ?v0) (enat$ ?v1))))) :named a7))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (fun_app$ (ltake$ ?v0) (lmap$ ?v1 ?v2)) (lmap$ ?v1 (fun_app$ (ltake$ ?v0) ?v2)))) :named a8))
(assert (! (forall ((?v0 A_list$)) (lfinite$ (llist_of$ ?v0))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$ (lappend$ ?v0 ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1)))) :named a10))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$ (ltake$ ?v0) lNil$) lNil$) :pattern ((ltake$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lfinite$ (lmap$ ?v0 ?v1)) (lfinite$ ?v1))) :named a12))
(assert (! (less$ n$a infinity$) :named a13))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 Enat$)) (= (forall ((?v1 Nat$)) (not (= ?v0 (enat$ ?v1)))) (= ?v0 infinity$))) :named a15))
(check-sat)
;(get-unsat-core)
