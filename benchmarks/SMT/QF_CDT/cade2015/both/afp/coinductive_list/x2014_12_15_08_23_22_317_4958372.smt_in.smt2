; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 571
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun uu$ () A_bool_fun$)
(declare-fun ys$ () A_llist$)
(declare-fun xsa$ () A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$) A_llist$)
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uu$ ?v0) true) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (=> (and (not (lnull$ (ltakeWhile$ p$ (lappend$ xsa$ ys$)))) (not (lnull$ (ite (exists ((?v0 A$)) (and (member$ ?v0 (lset$ xsa$)) (not (fun_app$ p$ ?v0)))) (ltakeWhile$ p$ xsa$) (lappend$ xsa$ (ltakeWhile$ p$ ys$)))))) (and (= (lhd$ (ltakeWhile$ p$ (lappend$ xsa$ ys$))) (lhd$ (ite (exists ((?v0 A$)) (and (member$ ?v0 (lset$ xsa$)) (not (fun_app$ p$ ?v0)))) (ltakeWhile$ p$ xsa$) (lappend$ xsa$ (ltakeWhile$ p$ ys$))))) (or (exists ((?v0 A_llist$)) (and (= (ltl$ (ltakeWhile$ p$ (lappend$ xsa$ ys$))) (ltakeWhile$ p$ (lappend$ ?v0 ys$))) (= (ltl$ (ite (exists ((?v1 A$)) (and (member$ ?v1 (lset$ xsa$)) (not (fun_app$ p$ ?v1)))) (ltakeWhile$ p$ xsa$) (lappend$ xsa$ (ltakeWhile$ p$ ys$)))) (ite (exists ((?v1 A$)) (and (member$ ?v1 (lset$ ?v0)) (not (fun_app$ p$ ?v1)))) (ltakeWhile$ p$ ?v0) (lappend$ ?v0 (ltakeWhile$ p$ ys$)))))) (= (ltl$ (ltakeWhile$ p$ (lappend$ xsa$ ys$))) (ltl$ (ite (exists ((?v0 A$)) (and (member$ ?v0 (lset$ xsa$)) (not (fun_app$ p$ ?v0)))) (ltakeWhile$ p$ xsa$) (lappend$ xsa$ (ltakeWhile$ p$ ys$))))))))) :named a1))
(assert (! (forall ((?v0 A_llist$)) (= (ltakeWhile$ uu$ ?v0) ?v0)) :named a2))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$ (lappend$ ?v0 ?v1))) (or (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$ (lappend$ ?v0 ?v1)) (and (lnull$ ?v0) (lnull$ ?v1)))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (ltl$ (lappend$ ?v0 ?v1)) (ite (lnull$ ?v0) (ltl$ ?v1) (lappend$ (ltl$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lhd$ (lappend$ ?v0 ?v1)) (ite (lnull$ ?v0) (lhd$ ?v1) (lhd$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (not (lnull$ (ltakeWhile$ ?v0 ?v1))) (and (not (lnull$ ?v1)) (fun_app$ ?v0 (lhd$ ?v1))))) :named a7))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lnull$ (ltakeWhile$ ?v0 ?v1)) (or (lnull$ ?v1) (not (fun_app$ ?v0 (lhd$ ?v1)))))) :named a8))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lnull$ (ltakeWhile$ ?v0 ?v1)) (=> (not (lnull$ ?v1)) (not (fun_app$ ?v0 (lhd$ ?v1)))))) :named a9))
(assert (! (= (lnull$ (ltakeWhile$ p$ (lappend$ xsa$ ys$))) (lnull$ (ite (exists ((?v0 A$)) (and (member$ ?v0 (lset$ xsa$)) (not (fun_app$ p$ ?v0)))) (ltakeWhile$ p$ xsa$) (lappend$ xsa$ (ltakeWhile$ p$ ys$))))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (lnull$ ?v0) (not (fun_app$ ?v1 (lhd$ ?v0)))) false) (=> (and (not (lnull$ ?v0)) (fun_app$ ?v1 (lhd$ ?v0))) false)) false)) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a13))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$a ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$a ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a15))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (lnull$ ?v0) (lnull$ ?v1)) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1))) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) (not (lnull$ (lappend$ ?v0 ?v1))))) :named a18))
(check-sat)
;(get-unsat-core)
