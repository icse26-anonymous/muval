; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 600
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun x$ () A$)
(declare-fun xs$ () A_llist$)
(declare-fun xs$a () A_llist$)
(declare-fun xsa$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist$ Nat$) A$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun ldistinct$ (A_llist$) Bool)
(assert (! (not (and (not (member$ (lhd$ xsa$) (lset$ (ltl$ xsa$)))) (or (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (less$ (enat$ ?v0) (llength$ (ltl$ xsa$))) (and (less$ (enat$ ?v1) (llength$ (ltl$ xsa$))) (not (= ?v0 ?v1)))) (not (= (lnth$ (ltl$ xsa$) ?v0) (lnth$ (ltl$ xsa$) ?v1))))) (ldistinct$ (ltl$ xsa$))))) :named a0))
(assert (! (= xsa$ (lCons$ x$ xs$)) :named a1))
(assert (! (not (member$ x$ (lset$ xs$))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (less$ (enat$ ?v0) (llength$ xs$)) (and (less$ (enat$ ?v1) (llength$ xs$)) (not (= ?v0 ?v1)))) (not (= (lnth$ xs$ ?v0) (lnth$ xs$ ?v1))))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (less$ (enat$ ?v0) (llength$ xsa$)) (and (less$ (enat$ ?v1) (llength$ xsa$)) (not (= ?v0 ?v1)))) (not (= (lnth$ xsa$ ?v0) (lnth$ xsa$ ?v1))))) :named a4))
(assert (! (=> (forall ((?v0 A$) (?v1 A_llist$)) (=> (= xsa$ (lCons$ ?v0 ?v1)) false)) false) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (less$ (enat$ ?v0) (llength$ xs$a)) (and (less$ (enat$ ?v1) (llength$ xs$a)) (not (= ?v0 ?v1)))) (not (= (lnth$ xs$a ?v0) (lnth$ xs$a ?v1))))) :named a6))
(assert (! (not (lnull$ xsa$)) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$ ?v0 (lset$ ?v1)) (exists ((?v2 Nat$)) (and (less$ (enat$ ?v2) (llength$ ?v1)) (= (lnth$ ?v1 ?v2) ?v0))))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (member$ ?v0 (lset$ (ltl$ ?v1))) (member$ ?v0 (lset$ ?v1)))) :named a9))
(assert (! (forall ((?v0 A_llist$)) (=> (ldistinct$ ?v0) (ldistinct$ (ltl$ ?v0)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (ldistinct$ (lCons$ ?v0 ?v1)) (and (not (member$ ?v0 (lset$ ?v1))) (ldistinct$ ?v1))) :pattern ((lCons$ ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (not (member$ ?v0 (lset$ ?v1))) (ldistinct$ ?v1)) (ldistinct$ (lCons$ ?v0 ?v1)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (less$ ?v0 (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (=> (less$ (enat$ ?v0) (llength$ ?v1)) (= (lhd$ (ldropn$ ?v0 ?v1)) (lnth$ ?v1 ?v0)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lhd$ (lCons$ ?v0 ?v1)) ?v0) :pattern ((lCons$ ?v0 ?v1)))) :named a16))
(check-sat)
;(get-unsat-core)
