; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 637
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_enat_fun$ 0)
(declare-sort Nat_nat_enat_fun_fun$ 0)
(declare-sort Nat_set_nat_enat_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-fun na$ () Nat$)
(declare-fun uu$ () Nat_enat_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun one$ () Nat$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun uua$ () Nat_enat_fun$)
(declare-fun uub$ (Nat_enat_fun$) Nat_enat_fun$)
(declare-fun uuc$ (Nat_nat_enat_fun_fun$) Nat_set_nat_enat_fun_fun$)
(declare-fun uud$ (Nat_nat_enat_fun_fun$) Nat_nat_enat_fun_fun$)
(declare-fun uue$ (Nat_nat_enat_fun_fun$) Nat_set_nat_enat_fun_fun$)
(declare-fun xss$ () A_llist_llist$)
(declare-fun lnth$ (A_llist_llist$ Nat$) A_llist$)
(declare-fun plus$ (Enat$ Enat$) Enat$)
(declare-fun xssa$ () A_llist_llist$)
(declare-fun member$ (Nat$ Nat_set$) Bool)
(declare-fun setsum$ (Nat_enat_fun$ Nat_set$) Enat$)
(declare-fun fun_app$ (Nat_enat_fun$ Nat$) Enat$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (Nat_nat_enat_fun_fun$ Nat$) Nat_enat_fun$)
(declare-fun fun_app$b (Nat_set_nat_enat_fun_fun$ Nat_set$) Nat_enat_fun$)
(declare-fun fun_app$c (Nat_nat_fun$ Nat$) Nat$)
(declare-fun lessThan$ (Nat$) Nat_set$)
(declare-fun atLeastLessThan$ (Nat$ Nat$) Nat_set$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uua$ ?v0) (llength$ (lnth$ xssa$ ?v0))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (llength$ (lnth$ xss$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 Nat_enat_fun$) (?v1 Nat$)) (! (= (fun_app$ (uub$ ?v0) ?v1) (fun_app$ ?v0 (suc$ ?v1))) :pattern ((fun_app$ (uub$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$a (uud$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$a ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$a (uud$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat_set$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$b (uue$ ?v0) ?v1) ?v2) (setsum$ (fun_app$a (uud$ ?v0) ?v2) ?v1)) :pattern ((fun_app$ (fun_app$b (uue$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat_set$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$b (uuc$ ?v0) ?v1) ?v2) (setsum$ (fun_app$a ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$b (uuc$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (not (= (setsum$ uu$ (lessThan$ na$)) (setsum$ uua$ (atLeastLessThan$ one$ (suc$ na$))))) :named a6))
(assert (! (forall ((?v0 Nat_enat_fun$) (?v1 Nat$) (?v2 Nat$)) (= (setsum$ ?v0 (atLeastLessThan$ (suc$ ?v1) (suc$ ?v2))) (setsum$ (uub$ ?v0) (atLeastLessThan$ ?v1 ?v2)))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (lessThan$ ?v0) (lessThan$ ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a10))
(assert (! (= xssa$ (lCons$a xs$ xss$)) :named a11))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat_set$) (?v2 Nat_set$)) (= (setsum$ (fun_app$b (uuc$ ?v0) ?v1) ?v2) (setsum$ (fun_app$b (uue$ ?v0) ?v2) ?v1))) :named a12))
(assert (! (= one$ one$) :named a13))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_set$) (?v4 Nat_enat_fun$) (?v5 Nat_enat_fun$)) (=> (and (forall ((?v6 Nat$)) (=> (member$ ?v6 ?v0) (= (fun_app$c ?v1 (fun_app$c ?v2 ?v6)) ?v6))) (and (forall ((?v6 Nat$)) (=> (member$ ?v6 ?v0) (member$ (fun_app$c ?v2 ?v6) ?v3))) (and (forall ((?v6 Nat$)) (=> (member$ ?v6 ?v3) (= (fun_app$c ?v2 (fun_app$c ?v1 ?v6)) ?v6))) (and (forall ((?v6 Nat$)) (=> (member$ ?v6 ?v3) (member$ (fun_app$c ?v1 ?v6) ?v0))) (forall ((?v6 Nat$)) (=> (member$ ?v6 ?v0) (= (fun_app$ ?v4 (fun_app$c ?v2 ?v6)) (fun_app$ ?v5 ?v6)))))))) (= (setsum$ ?v5 ?v0) (setsum$ ?v4 ?v3)))) :named a14))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set$) (?v2 Nat_enat_fun$) (?v3 Nat_enat_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 Nat$)) (=> (member$ ?v4 ?v1) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (setsum$ ?v2 ?v0) (setsum$ ?v3 ?v1)))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 Nat$)) (! (= (lnth$ (lCons$a ?v0 ?v1) (suc$ ?v2)) (lnth$ ?v1 ?v2)) :pattern ((lnth$ (lCons$a ?v0 ?v1) (suc$ ?v2))))) :named a18))
(assert (! (forall ((?v0 Nat$)) (= (= one$ ?v0) (= ?v0 one$))) :named a19))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a20))
(assert (! (forall ((?v0 Nat_enat_fun$) (?v1 Nat$)) (= (setsum$ ?v0 (lessThan$ (suc$ ?v1))) (plus$ (setsum$ ?v0 (lessThan$ ?v1)) (fun_app$ ?v0 ?v1)))) :named a21))
(check-sat)
;(get-unsat-core)
