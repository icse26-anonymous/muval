; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 666
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort Nat$ 0)
(declare-sort Enat_set$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun ma$ () Nat$)
(declare-fun na$ () Enat$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun eSuc$ (Enat$) Enat$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun member$ (Enat$ Enat_set$) Bool)
(declare-fun thesis$ () Bool)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun enat_set$ () Enat_set$)
(declare-fun enat_setp$ (Enat$) Bool)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 Enat$)) (=> (= na$ (eSuc$ ?v0)) thesis$)) :named a1))
(assert (! (less$ (enat$ (suc$ ma$)) na$) :named a2))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (eSuc$ ?v0) (eSuc$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (eSuc$ ?v0) (eSuc$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (less$ (eSuc$ ?v0) (eSuc$ ?v1)) (less$ ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (= (= (eSuc$ ?v0) (enat$ ?v1)) (exists ((?v2 Nat$)) (and (= ?v1 (suc$ ?v2)) (= ?v0 (enat$ ?v2)))))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Enat$)) (= (= (enat$ ?v0) (eSuc$ ?v1)) (exists ((?v2 Nat$)) (and (= ?v0 (suc$ ?v2)) (= (enat$ ?v2) ?v1))))) :named a7))
(assert (! (forall ((?v0 Nat$)) (= (eSuc$ (enat$ ?v0)) (enat$ (suc$ ?v0)))) :named a8))
(assert (! (forall ((?v0 Enat$)) (=> (member$ ?v0 enat_set$) (member$ (eSuc$ ?v0) enat_set$))) :named a9))
(assert (! (forall ((?v0 Enat$)) (=> (enat_setp$ ?v0) (enat_setp$ (eSuc$ ?v0)))) :named a10))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (less_eq$ (eSuc$ ?v0) (eSuc$ ?v1)) (less_eq$ ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Enat$)) (= (less$ (enat$ ?v0) (eSuc$ ?v1)) (less_eq$ (enat$ ?v0) ?v1))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Enat$)) (! (= (less_eq$ (enat$ (suc$ ?v0)) ?v1) (less$ (enat$ ?v0) ?v1)) :pattern ((less_eq$ (enat$ (suc$ ?v0)) ?v1)))) :named a14))
(assert (! (forall ((?v0 Enat$)) (! (= (enat_setp$ ?v0) (member$ ?v0 enat_set$)) :pattern ((enat_setp$ ?v0)))) :named a15))
(check-sat)
;(get-unsat-core)
