; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 674
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))
  (Nibble$ (nibble0$) (nibble1$) (nibble2$) (nibble3$) (nibble4$) (nibble5$) (nibble6$) (nibble7$) (nibble8$) (nibble9$) (nibbleA$) (nibbleB$) (nibbleC$) (nibbleD$) (nibbleE$) (nibbleF$))
  (Char$ (char$ (select$ Nibble$) (selecta$ Nibble$)))))
(declare-fun xsa$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist$) Nat_a_fun$)
(declare-fun zero$ () Nat$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun zero$a () Enat$)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun fun_app$ (Nat_a_fun$ Nat$) A$)
(declare-fun llength$ () A_llist_enat_fun$)
(declare-fun fun_app$a (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun iterates$ (A_a_fun$ A$) A_llist$)
(declare-fun size_bool$ (Bool) Nat$)
(declare-fun size_char$ (Char$) Nat$)
(declare-fun gen_llength$ (Nat$) A_llist_enat_fun$)
(assert (! (not (= (lhd$ (ldropn$ zero$ xsa$)) (fun_app$ (lnth$ xsa$) zero$))) :named a0))
(assert (! (less$ (enat$ zero$) (fun_app$a llength$ xsa$)) :named a1))
(assert (! (forall ((?v0 A_llist$)) (! (= (ldropn$ zero$ ?v0) ?v0) :pattern ((ldropn$ zero$ ?v0)))) :named a2))
(assert (! (= zero$ zero$) :named a3))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a4))
(assert (! (forall ((?v0 A_llist$)) (! (=> (not (lnull$ ?v0)) (= (fun_app$ (lnth$ ?v0) zero$) (lhd$ ?v0))) :pattern ((lnth$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_llist$)) (! (=> (not (lnull$ ?v0)) (= (lhd$ ?v0) (fun_app$ (lnth$ ?v0) zero$))) :pattern ((lhd$ ?v0)))) :named a6))
(assert (! (forall ((?v0 Enat$)) (= (= zero$a ?v0) (= ?v0 zero$a))) :named a7))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a8))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (lhd$ (iterates$ ?v0 ?v1)) ?v1)) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$ (lnth$ (lCons$ ?v0 ?v1)) zero$) ?v0) :pattern ((lCons$ ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 Char$)) (! (= (size_char$ ?v0) zero$) :pattern ((size_char$ ?v0)))) :named a11))
(assert (! (= (size_bool$ true) zero$) :named a12))
(assert (! (= (size_bool$ false) zero$) :named a13))
(assert (! (= llength$ (gen_llength$ zero$)) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 A_llist$)) (= (= (fun_app$a llength$ ?v0) zero$a) (lnull$ ?v0))) :named a16))
(assert (! (forall ((?v0 A_llist$)) (! (=> (lnull$ ?v0) (= (fun_app$a llength$ ?v0) zero$a)) :pattern ((fun_app$a llength$ ?v0)))) :named a17))
(check-sat)
;(get-unsat-core)
