; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 581
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_a_llist_set_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_fun$ 0)
(declare-sort A_llist_llist_llist_a_llist_llist_set_fun$ 0)
(declare-sort A_llist_llist_llist_a_llist_llist_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))
  (A_llist_llist_llist_llist$ (lNil$c) (lCons$c (lhd$c A_llist_llist_llist$) (ltl$c A_llist_llist_llist_llist$)))))
(declare-fun uu$ () A_llist_a_llist_fun$)
(declare-fun uua$ () A_llist_llist_a_llist_llist_fun$)
(declare-fun uub$ () A_a_fun$)
(declare-fun uuc$ () A_llist_llist_bool_fun$)
(declare-fun uud$ () A_llist_bool_fun$)
(declare-fun uue$ () A_bool_fun$)
(declare-fun uuf$ () A_llist_llist_bool_fun$)
(declare-fun uug$ () A_llist_bool_fun$)
(declare-fun uuh$ () A_bool_fun$)
(declare-fun fun_app$ (A_llist_llist_a_llist_llist_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun lfilter$ (A_llist_llist_bool_fun$) A_llist_llist_llist_a_llist_llist_llist_fun$)
(declare-fun lmember$ (A_llist_llist$) A_llist_llist_llist_bool_fun$)
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$b (A_a_fun$ A$) A$)
(declare-fun fun_app$c (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$e (A_bool_fun$ A$) Bool)
(declare-fun fun_app$f (A_llist_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun fun_app$g (A_llist_llist_llist_a_llist_llist_llist_fun$ A_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun fun_app$h (A_llist_llist_llist_a_llist_llist_set_fun$ A_llist_llist_llist$) A_llist_llist_set$)
(declare-fun fun_app$i (A_llist_llist_a_llist_set_fun$ A_llist_llist$) A_llist_set$)
(declare-fun fun_app$j (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun gen_lset$ (A_llist_llist_set$) A_llist_llist_llist_a_llist_llist_set_fun$)
(declare-fun iterates$ (A_llist_a_llist_fun$ A_llist$) A_llist_llist$)
(declare-fun lconcat$a (A_llist_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun lconcat$b (A_llist_llist_llist$) A_llist_llist$)
(declare-fun lfilter$a (A_llist_bool_fun$) A_llist_llist_a_llist_llist_fun$)
(declare-fun lfilter$b (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun lmember$a (A_llist$) A_llist_llist_bool_fun$)
(declare-fun lmember$b (A$) A_llist_bool_fun$)
(declare-fun gen_lset$a (A_llist_set$) A_llist_llist_a_llist_set_fun$)
(declare-fun gen_lset$b (A_set$) A_llist_a_set_fun$)
(declare-fun iterates$a (A_llist_llist_a_llist_llist_fun$ A_llist_llist$) A_llist_llist_llist$)
(declare-fun iterates$b (A_a_fun$ A$) A_llist$)
(declare-fun ldropWhile$ (A_llist_llist_bool_fun$ A_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun ltakeWhile$ (A_llist_llist_bool_fun$ A_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun pred_llist$ (A_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun ldropWhile$a (A_llist_bool_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun ldropWhile$b (A_bool_fun$ A_llist$) A_llist$)
(declare-fun ltakeWhile$a (A_llist_bool_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun ltakeWhile$b (A_bool_fun$ A_llist$) A_llist$)
(declare-fun pred_llist$a (A_llist_bool_fun$) A_llist_llist_bool_fun$)
(declare-fun pred_llist$b (A_bool_fun$) A_llist_bool_fun$)
(declare-fun finite_lprefix$ (A_llist_llist_llist$) A_llist_llist_llist_bool_fun$)
(declare-fun lstrict_prefix$ (A_llist_llist_llist$ A_llist_llist_llist$) Bool)
(declare-fun finite_lprefix$a (A_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun finite_lprefix$b (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$a (A_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun lstrict_prefix$b (A_llist$) A_llist_bool_fun$)
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$ uua$ ?v0) ?v0) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a uu$ ?v0) ?v0) :pattern ((fun_app$a uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$b uub$ ?v0) ?v0) :pattern ((fun_app$b uub$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$c uuf$ ?v0) false) :pattern ((fun_app$c uuf$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$d uug$ ?v0) false) :pattern ((fun_app$d uug$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$e uuh$ ?v0) false) :pattern ((fun_app$e uuh$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$c uuc$ ?v0) true) :pattern ((fun_app$c uuc$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$d uud$ ?v0) true) :pattern ((fun_app$d uud$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$e uue$ ?v0) true) :pattern ((fun_app$e uue$ ?v0)))) :named a8))
(assert (! (not (= (lconcat$ (iterates$ uu$ lNil$)) lNil$)) :named a9))
(assert (! (= (lconcat$a lNil$c) lNil$b) :named a10))
(assert (! (= (lconcat$b lNil$b) lNil$a) :named a11))
(assert (! (= (lconcat$ lNil$a) lNil$) :named a12))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$f (lmember$ ?v0) lNil$b) false) :pattern ((lmember$ ?v0)))) :named a13))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$c (lmember$a ?v0) lNil$a) false) :pattern ((lmember$a ?v0)))) :named a14))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$d (lmember$b ?v0) lNil$) false) :pattern ((lmember$b ?v0)))) :named a15))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist$)) (= (fun_app$g (lfilter$ ?v0) (iterates$a uua$ ?v1)) (ite (fun_app$c ?v0 ?v1) (iterates$a uua$ ?v1) lNil$b))) :named a16))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (= (fun_app$ (lfilter$a ?v0) (iterates$ uu$ ?v1)) (ite (fun_app$d ?v0 ?v1) (iterates$ uu$ ?v1) lNil$a))) :named a17))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$)) (= (fun_app$a (lfilter$b ?v0) (iterates$b uub$ ?v1)) (ite (fun_app$e ?v0 ?v1) (iterates$b uub$ ?v1) lNil$))) :named a18))
(assert (! (forall ((?v0 A_llist_llist_set$)) (! (= (fun_app$h (gen_lset$ ?v0) lNil$b) ?v0) :pattern ((gen_lset$ ?v0)))) :named a19))
(assert (! (forall ((?v0 A_llist_set$)) (! (= (fun_app$i (gen_lset$a ?v0) lNil$a) ?v0) :pattern ((gen_lset$a ?v0)))) :named a20))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$j (gen_lset$b ?v0) lNil$) ?v0) :pattern ((gen_lset$b ?v0)))) :named a21))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist$)) (= (ldropWhile$ ?v0 (iterates$a uua$ ?v1)) (ite (fun_app$c ?v0 ?v1) lNil$b (iterates$a uua$ ?v1)))) :named a22))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (= (ldropWhile$a ?v0 (iterates$ uu$ ?v1)) (ite (fun_app$d ?v0 ?v1) lNil$a (iterates$ uu$ ?v1)))) :named a23))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$)) (= (ldropWhile$b ?v0 (iterates$b uub$ ?v1)) (ite (fun_app$e ?v0 ?v1) lNil$ (iterates$b uub$ ?v1)))) :named a24))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (! (= (fun_app$f (finite_lprefix$ ?v0) lNil$b) (= ?v0 lNil$b)) :pattern ((finite_lprefix$ ?v0)))) :named a25))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$c (finite_lprefix$a ?v0) lNil$a) (= ?v0 lNil$a)) :pattern ((finite_lprefix$a ?v0)))) :named a26))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$d (finite_lprefix$b ?v0) lNil$) (= ?v0 lNil$)) :pattern ((finite_lprefix$b ?v0)))) :named a27))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (! (= (fun_app$f (finite_lprefix$ lNil$b) ?v0) true) :pattern ((fun_app$f (finite_lprefix$ lNil$b) ?v0)))) :named a28))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$c (finite_lprefix$a lNil$a) ?v0) true) :pattern ((fun_app$c (finite_lprefix$a lNil$a) ?v0)))) :named a29))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$d (finite_lprefix$b lNil$) ?v0) true) :pattern ((fun_app$d (finite_lprefix$b lNil$) ?v0)))) :named a30))
(assert (! (= (lstrict_prefix$ lNil$b lNil$b) false) :named a31))
(assert (! (= (fun_app$c (lstrict_prefix$a lNil$a) lNil$a) false) :named a32))
(assert (! (= (fun_app$d (lstrict_prefix$b lNil$) lNil$) false) :named a33))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$)) (pred_llist$ ?v0 lNil$b)) :named a34))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (fun_app$c (pred_llist$a ?v0) lNil$a)) :named a35))
(assert (! (forall ((?v0 A_bool_fun$)) (fun_app$d (pred_llist$b ?v0) lNil$)) :named a36))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist$)) (= (ltakeWhile$ ?v0 (iterates$a uua$ ?v1)) (ite (fun_app$c ?v0 ?v1) (iterates$a uua$ ?v1) lNil$b))) :named a37))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (= (ltakeWhile$a ?v0 (iterates$ uu$ ?v1)) (ite (fun_app$d ?v0 ?v1) (iterates$ uu$ ?v1) lNil$a))) :named a38))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$)) (= (ltakeWhile$b ?v0 (iterates$b uub$ ?v1)) (ite (fun_app$e ?v0 ?v1) (iterates$b uub$ ?v1) lNil$))) :named a39))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (= (ldropWhile$ uuc$ ?v0) lNil$b)) :named a40))
(assert (! (forall ((?v0 A_llist_llist$)) (= (ldropWhile$a uud$ ?v0) lNil$a)) :named a41))
(assert (! (forall ((?v0 A_llist$)) (= (ldropWhile$b uue$ ?v0) lNil$)) :named a42))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (= (ltakeWhile$ uuf$ ?v0) lNil$b)) :named a43))
(assert (! (forall ((?v0 A_llist_llist$)) (= (ltakeWhile$a uug$ ?v0) lNil$a)) :named a44))
(assert (! (forall ((?v0 A_llist$)) (= (ltakeWhile$b uuh$ ?v0) lNil$)) :named a45))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (= (fun_app$g (lfilter$ uuf$) ?v0) lNil$b)) :named a46))
(assert (! (forall ((?v0 A_llist_llist$)) (= (fun_app$ (lfilter$a uug$) ?v0) lNil$a)) :named a47))
(assert (! (forall ((?v0 A_llist$)) (= (fun_app$a (lfilter$b uuh$) ?v0) lNil$)) :named a48))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$a (lfilter$b ?v0) (fun_app$a (lfilter$b ?v0) ?v1)) (fun_app$a (lfilter$b ?v0) ?v1))) :named a49))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist_llist$)) (= (fun_app$ (lfilter$a ?v0) (fun_app$ (lfilter$a ?v0) ?v1)) (fun_app$ (lfilter$a ?v0) ?v1))) :named a50))
(assert (! (forall ((?v0 A_llist$)) (= (fun_app$a (lfilter$b uue$) ?v0) ?v0)) :named a51))
(assert (! (forall ((?v0 A_llist_llist$)) (= (fun_app$ (lfilter$a uud$) ?v0) ?v0)) :named a52))
(assert (! (forall ((?v0 A_llist$)) (= (ltakeWhile$b uue$ ?v0) ?v0)) :named a53))
(assert (! (forall ((?v0 A_llist_llist$)) (= (ltakeWhile$a uud$ ?v0) ?v0)) :named a54))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$)) (! (= (fun_app$g (lfilter$ ?v0) lNil$b) lNil$b) :pattern ((lfilter$ ?v0)))) :named a55))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (! (= (fun_app$ (lfilter$a ?v0) lNil$a) lNil$a) :pattern ((lfilter$a ?v0)))) :named a56))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$a (lfilter$b ?v0) lNil$) lNil$) :pattern ((lfilter$b ?v0)))) :named a57))
(check-sat)
;(get-unsat-core)
