; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 657
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun na$ () Nat$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun xsa$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun ltake$ (Enat$) A_llist_a_llist_fun$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun lessThan$ (Nat$) Nat_set$)
(declare-fun lsublist$ (A_llist$ Nat_set$) A_llist$)
(assert (! (not (= (fun_app$ (ltake$ (enat$ (suc$ na$))) xsa$) (lsublist$ xsa$ (lessThan$ (suc$ na$))))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (ltake$ (enat$ na$)) ?v0) (lsublist$ ?v0 (lessThan$ na$))) :pattern ((fun_app$ (ltake$ (enat$ na$)) ?v0)))) :named a1))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (forall ((?v2 Nat$)) (= (fun_app$ (ltake$ (enat$ ?v2)) ?v0) (fun_app$ (ltake$ (enat$ ?v2)) ?v1))) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (lessThan$ ?v0) (lessThan$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (forall ((?v2 Nat$)) (lprefix$ (fun_app$ (ltake$ (enat$ ?v2)) ?v0) (fun_app$ (ltake$ (enat$ ?v2)) ?v1))) (lprefix$ ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 Nat_set$)) (! (= (lsublist$ lNil$ ?v0) lNil$) :pattern ((lsublist$ lNil$ ?v0)))) :named a10))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$ (ltake$ ?v0) lNil$) lNil$) :pattern ((ltake$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a12))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a13))
(assert (! (forall ((?v0 A_llist$)) (! (= (lprefix$ lNil$ ?v0) true) :pattern ((lprefix$ lNil$ ?v0)))) :named a14))
(check-sat)
;(get-unsat-core)
