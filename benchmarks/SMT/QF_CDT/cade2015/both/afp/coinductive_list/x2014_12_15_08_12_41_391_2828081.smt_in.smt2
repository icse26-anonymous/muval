; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 230
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_set_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun xs$ () A_llist$)
(declare-fun lSup$ () A_llist_set_a_llist_fun$)
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun compact$ (A_llist_set_a_llist_fun$) A_llist_a_llist_bool_fun_fun_a_llist_bool_fun_fun$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$) A_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$c (A_llist_set_a_llist_fun$ A_llist_set$) A_llist$)
(declare-fun admissible$ (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_bool_fun$) Bool)
(declare-fun partial_function_definitions$ (A_llist_a_llist_bool_fun_fun$ A_llist_set_a_llist_fun$) Bool)
(assert (! (not (fun_app$ (fun_app$a (compact$ lSup$) lprefix$) xs$)) :named a0))
(assert (! (lfinite$ xs$) :named a1))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$b lprefix$ ?v0) ?v0)) :named a2))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$b lprefix$ ?v0) ?v0)) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (fun_app$b lprefix$ ?v0) ?v1) (fun_app$ (fun_app$b lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (fun_app$b lprefix$ ?v0) ?v1) (fun_app$ (fun_app$b lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$b lprefix$ ?v0) ?v1) (fun_app$ (fun_app$b lprefix$ ?v2) ?v1)) (or (fun_app$ (fun_app$b lprefix$ ?v0) ?v2) (fun_app$ (fun_app$b lprefix$ ?v2) ?v0)))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$b lprefix$ ?v0) ?v1) (fun_app$ (fun_app$b lprefix$ ?v1) ?v2)) (fun_app$ (fun_app$b lprefix$ ?v0) ?v2))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$b lprefix$ ?v0) ?v1) (fun_app$ (fun_app$b lprefix$ ?v1) ?v2)) (fun_app$ (fun_app$b lprefix$ ?v0) ?v2))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (fun_app$ (fun_app$b lprefix$ ?v0) ?v1) (= ?v0 ?v1))) :pattern ((fun_app$ (fun_app$b lprefix$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 A_llist_set$)) (=> (lfinite$ (fun_app$c lSup$ ?v0)) (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lfinite$ ?v1))))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (fun_app$ (fun_app$a (compact$ lSup$) lprefix$) (lCons$ ?v0 ?v1)) (fun_app$ (fun_app$a (compact$ lSup$) lprefix$) ?v1))) :named a11))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (and (admissible$ lSup$ lprefix$ ?v0) (exists ((?v2 A_llist$)) (and (fun_app$ (fun_app$b lprefix$ ?v2) ?v1) (and (lfinite$ ?v2) (forall ((?v3 A_llist$)) (=> (and (fun_app$ (fun_app$b lprefix$ ?v2) ?v3) (and (fun_app$ (fun_app$b lprefix$ ?v3) ?v1) (lfinite$ ?v3))) (fun_app$ ?v0 ?v3))))))) (fun_app$ ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (=> (fun_app$ (fun_app$a (compact$ lSup$) lprefix$) (lCons$ ?v0 ?v1)) (fun_app$ (fun_app$a (compact$ lSup$) lprefix$) ?v1))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (fun_app$ (fun_app$a (compact$ lSup$) lprefix$) ?v0) (fun_app$ (fun_app$a (compact$ lSup$) lprefix$) (lCons$ ?v1 ?v0)))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$ (fun_app$b lprefix$ (lappend$ ?v0 ?v1)) (lappend$ ?v0 ?v2)) (=> (lfinite$ ?v0) (fun_app$ (fun_app$b lprefix$ ?v1) ?v2)))) :named a15))
(assert (! (partial_function_definitions$ lprefix$ lSup$) :named a16))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (fun_app$ (fun_app$b lprefix$ ?v2) ?v1)))) (fun_app$ (fun_app$b lprefix$ (fun_app$c lSup$ ?v0)) ?v1))) :named a17))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (fun_app$ (fun_app$b lprefix$ ?v2) ?v1)))) (fun_app$ (fun_app$b lprefix$ (fun_app$c lSup$ ?v0)) ?v1))) :named a18))
(check-sat)
;(get-unsat-core)
