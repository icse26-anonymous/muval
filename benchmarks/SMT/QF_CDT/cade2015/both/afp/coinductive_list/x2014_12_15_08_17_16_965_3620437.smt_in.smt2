; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 661
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun ys$ () A_llist$)
(declare-fun xsa$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun zero$ () Nat$)
(declare-fun less$a (Nat$) Nat_bool_fun$)
(declare-fun minus$ (Nat$) Nat_nat_fun$)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun fun_app$ (Nat_nat_fun$ Nat$) Nat$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (Nat_bool_fun$ Nat$) Bool)
(declare-fun the_enat$ (Enat$) Nat$)
(assert (! (not (= (ldropn$ zero$ (lappend$ xsa$ ys$)) (ite (less$ (enat$ zero$) (llength$ xsa$)) (lappend$ (ldropn$ zero$ xsa$) ys$) (ldropn$ (fun_app$ (minus$ zero$) (the_enat$ (llength$ xsa$))) ys$)))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (! (= (ldropn$ zero$ ?v0) ?v0) :pattern ((ldropn$ zero$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a2))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (minus$ ?v0) ?v0) zero$) :pattern ((minus$ ?v0)))) :named a3))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (minus$ zero$) ?v0) zero$) :pattern ((fun_app$ (minus$ zero$) ?v0)))) :named a4))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (minus$ ?v0) zero$) ?v0)) :named a5))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (minus$ ?v0) zero$) ?v0)) :named a6))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (minus$ ?v0) ?v0) zero$) :pattern ((minus$ ?v0)))) :named a7))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (minus$ zero$) ?v0) zero$)) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 Nat$)) (! (= (the_enat$ (enat$ ?v0)) ?v0) :pattern ((enat$ ?v0)))) :named a10))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a (less$a ?v0) zero$) false) :pattern ((less$a ?v0)))) :named a11))
(assert (! (forall ((?v0 Nat$)) (= (not (fun_app$a (less$a zero$) ?v0)) (= ?v0 zero$))) :named a12))
(check-sat)
;(get-unsat-core)
