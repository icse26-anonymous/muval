; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 575
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun x$ () A$)
(declare-fun xs$ () A_llist$)
(declare-fun max$ (A_a_bool_fun_fun$ A$ A$) A$)
(declare-fun min$ (A_a_bool_fun_fun$ A$ A$) A$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun less_eq$ () A_a_bool_fun_fun$)
(declare-fun lsorted$ (A_a_bool_fun_fun$) A_llist_bool_fun$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (A_a_bool_fun_fun$ A$) A_bool_fun$)
(assert (! (not (fun_app$ (lsorted$ less_eq$) (lCons$ x$ xs$))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (= ?v0 ?v1) (fun_app$a (fun_app$b less_eq$ ?v1) ?v2)) (fun_app$a (fun_app$b less_eq$ ?v0) ?v2))) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (= ?v0 ?v1) (fun_app$a (fun_app$b less_eq$ ?v0) ?v1))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$a (fun_app$b less_eq$ ?v0) ?v2))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) (fun_app$a (fun_app$b less_eq$ ?v1) ?v2)) (fun_app$a (fun_app$b less_eq$ ?v0) ?v2))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (=> (and (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) (fun_app$ (lsorted$ less_eq$) (lCons$ ?v1 ?v2))) (fun_app$ (lsorted$ less_eq$) (lCons$ ?v0 (lCons$ ?v1 ?v2))))) :named a5))
(assert (! (and (fun_app$ (lsorted$ less_eq$) xs$) (forall ((?v0 A$)) (=> (member$ ?v0 (lset$ xs$)) (fun_app$a (fun_app$b less_eq$ x$) ?v0)))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (max$ less_eq$ ?v0 ?v1) (ite (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) ?v1 ?v0)) :pattern ((max$ less_eq$ ?v0 ?v1)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (min$ less_eq$ ?v0 ?v1) (ite (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) ?v0 ?v1)) :pattern ((min$ less_eq$ ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a9))
(assert (! (forall ((?v0 A$)) (fun_app$a (fun_app$b less_eq$ ?v0) ?v0)) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (lsorted$ less_eq$) (lCons$ ?v0 (lCons$ ?v1 ?v2))) (and (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) (fun_app$ (lsorted$ less_eq$) (lCons$ ?v1 ?v2)))) :pattern ((lCons$ ?v0 (lCons$ ?v1 ?v2))))) :named a11))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$ (lsorted$ ?v0) (lCons$ ?v1 (lCons$ ?v2 ?v3))) (and (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (fun_app$ (lsorted$ ?v0) (lCons$ ?v2 ?v3)))) :pattern ((fun_app$ (lsorted$ ?v0) (lCons$ ?v1 (lCons$ ?v2 ?v3)))))) :named a12))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$)) (=> (and (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (fun_app$ (lsorted$ ?v0) (lCons$ ?v2 ?v3))) (fun_app$ (lsorted$ ?v0) (lCons$ ?v1 (lCons$ ?v2 ?v3))))) :named a13))
(assert (! (forall ((?v0 A_llist$)) (= (fun_app$ (lsorted$ less_eq$) ?v0) (or (= ?v0 lNil$) (or (exists ((?v1 A$)) (= ?v0 (lCons$ ?v1 lNil$))) (exists ((?v1 A$) (?v2 A$) (?v3 A_llist$)) (and (= ?v0 (lCons$ ?v1 (lCons$ ?v2 ?v3))) (and (fun_app$a (fun_app$b less_eq$ ?v1) ?v2) (fun_app$ (lsorted$ less_eq$) (lCons$ ?v2 ?v3))))))))) :named a14))
(assert (! (forall ((?v0 A_llist$)) (=> (and (fun_app$ (lsorted$ less_eq$) ?v0) (and (=> (= ?v0 lNil$) false) (and (forall ((?v1 A$)) (=> (= ?v0 (lCons$ ?v1 lNil$)) false)) (forall ((?v1 A$) (?v2 A$) (?v3 A_llist$)) (=> (and (= ?v0 (lCons$ ?v1 (lCons$ ?v2 ?v3))) (and (fun_app$a (fun_app$b less_eq$ ?v1) ?v2) (fun_app$ (lsorted$ less_eq$) (lCons$ ?v2 ?v3)))) false))))) false)) :named a15))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v2 A_llist$)) (=> (fun_app$ ?v0 ?v2) (or (= ?v2 lNil$) (or (exists ((?v3 A$)) (= ?v2 (lCons$ ?v3 lNil$))) (exists ((?v3 A$) (?v4 A$) (?v5 A_llist$)) (and (= ?v2 (lCons$ ?v3 (lCons$ ?v4 ?v5))) (and (fun_app$a (fun_app$b less_eq$ ?v3) ?v4) (or (fun_app$ ?v0 (lCons$ ?v4 ?v5)) (fun_app$ (lsorted$ less_eq$) (lCons$ ?v4 ?v5))))))))))) (fun_app$ (lsorted$ less_eq$) ?v1))) :named a16))
(assert (! (forall ((?v0 A$)) (fun_app$ (lsorted$ less_eq$) (lCons$ ?v0 lNil$))) :named a17))
(check-sat)
;(get-unsat-core)
