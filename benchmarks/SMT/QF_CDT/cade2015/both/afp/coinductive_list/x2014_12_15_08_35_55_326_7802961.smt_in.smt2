; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 597
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun xs$ () A_llist$)
(declare-fun nth$ (A_list$) Nat_a_fun$)
(declare-fun wfP$ (A_llist_a_llist_bool_fun_fun$) Bool)
(declare-fun lnth$ (A_llist$) Nat_a_fun$)
(declare-fun thesis$ () Bool)
(declare-fun fun_app$ (Nat_a_fun$ Nat$) A$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun list_of$ (A_llist$) A_list$)
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$b (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun llist_of$ (A_list$) A_llist$)
(declare-fun inf_llist$ (Nat_a_fun$) A_llist$)
(declare-fun lstrict_prefix$ () A_llist_a_llist_bool_fun_fun$)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 Nat_a_fun$)) (=> (= xs$ (inf_llist$ ?v0)) thesis$)) :named a1))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_a_fun$)) (= (= (inf_llist$ ?v0) (inf_llist$ ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A_list$)) (=> (= xs$ (llist_of$ ?v0)) thesis$)) :named a3))
(assert (! (not (lfinite$ xs$)) :named a4))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat$)) (= (fun_app$ (lnth$ (inf_llist$ ?v0)) ?v1) (fun_app$ ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (forall ((?v2 A_llist$)) (=> (forall ((?v3 A_llist$)) (=> (fun_app$a (fun_app$b lstrict_prefix$ ?v3) ?v2) (fun_app$a ?v0 ?v3))) (fun_app$a ?v0 ?v2))) (fun_app$a ?v0 ?v1))) :named a6))
(assert (! (= xs$ (inf_llist$ (lnth$ xs$))) :named a7))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 A_llist$)) (=> (not (lfinite$ ?v0)) (= (inf_llist$ (lnth$ ?v0)) ?v0))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$a (fun_app$b lstrict_prefix$ ?v0) ?v1) (lfinite$ ?v0))) :named a10))
(assert (! (forall ((?v0 A_list$) (?v1 Nat_a_fun$)) (not (= (llist_of$ ?v0) (inf_llist$ ?v1)))) :named a11))
(assert (! (forall ((?v0 Nat_a_fun$)) (not (lfinite$ (inf_llist$ ?v0)))) :named a12))
(assert (! (forall ((?v0 A_list$)) (lfinite$ (llist_of$ ?v0))) :named a13))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$ ?v0) (= (llist_of$ (list_of$ ?v0)) ?v0))) :named a14))
(assert (! (forall ((?v0 A_list$)) (= (lnth$ (llist_of$ ?v0)) (nth$ ?v0))) :named a15))
(assert (! (forall ((?v0 A_list$)) (= (list_of$ (llist_of$ ?v0)) ?v0)) :named a16))
(assert (! (wfP$ lstrict_prefix$) :named a17))
(check-sat)
;(get-unsat-core)
