; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 580
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_set_set$ 0)
(declare-sort Nat_enat_fun$ 0)
(declare-sort Nat_nat_set_fun$ 0)
(declare-sort Nat_set_nat_fun$ 0)
(declare-sort Nat_set_enat_fun$ 0)
(declare-sort Nat_nat_nat_fun_fun$ 0)
(declare-sort Nat_nat_enat_fun_fun$ 0)
(declare-sort A_llist_list_bool_fun$ 0)
(declare-sort Nat_set_nat_nat_fun_fun$ 0)
(declare-sort Nat_set_nat_enat_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-datatypes () ((A_llist_list$ (nil$) (cons$ (hd$ A_llist$) (tl$ A_llist_list$)))))
(declare-fun m$ () Nat$)
(declare-fun uu$ () Nat_enat_fun$)
(declare-fun uua$ () Nat_nat_fun$)
(declare-fun uub$ () Nat_enat_fun$)
(declare-fun uuc$ (Nat_nat_nat_fun_fun$) Nat_set_nat_nat_fun_fun$)
(declare-fun uud$ (Nat_nat_nat_fun_fun$) Nat_nat_nat_fun_fun$)
(declare-fun uue$ (Nat_nat_nat_fun_fun$) Nat_set_nat_nat_fun_fun$)
(declare-fun uuf$ (Nat_nat_enat_fun_fun$) Nat_set_nat_enat_fun_fun$)
(declare-fun uug$ (Nat_nat_enat_fun_fun$) Nat_nat_enat_fun_fun$)
(declare-fun uuh$ (Nat_nat_enat_fun_fun$) Nat_set_nat_enat_fun_fun$)
(declare-fun xss$ () A_llist_list$)
(declare-fun less$ (Nat$ Nat$) Bool)
(declare-fun lnth$ (A_llist_llist$ Nat$) A_llist$)
(declare-fun size$ (A_llist_list$) Nat$)
(declare-fun xssa$ () A_llist_llist$)
(declare-fun zero$ () Enat$)
(declare-fun less$a (Nat_set$ Nat_set$) Bool)
(declare-fun zero$a () Nat$)
(declare-fun member$ (Nat_set$ Nat_set_set$) Bool)
(declare-fun setsum$ (Nat_enat_fun$) Nat_set_enat_fun$)
(declare-fun fun_app$ (Nat_enat_fun$ Nat$) Enat$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun member$a (Nat$ Nat_set$) Bool)
(declare-fun setsum$a (Nat_nat_fun$) Nat_set_nat_fun$)
(declare-fun setsum$b (Nat_set_enat_fun$ Nat_set_set$) Enat$)
(declare-fun setsum$c (Nat_set_nat_fun$ Nat_set_set$) Nat$)
(declare-fun fun_app$a (Nat_nat_enat_fun_fun$ Nat$) Nat_enat_fun$)
(declare-fun fun_app$b (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$c (Nat_nat_nat_fun_fun$ Nat$) Nat_nat_fun$)
(declare-fun fun_app$d (Nat_set_nat_enat_fun_fun$ Nat_set$) Nat_enat_fun$)
(declare-fun fun_app$e (Nat_set_enat_fun$ Nat_set$) Enat$)
(declare-fun fun_app$f (Nat_set_nat_nat_fun_fun$ Nat_set$) Nat_nat_fun$)
(declare-fun fun_app$g (Nat_set_nat_fun$ Nat_set$) Nat$)
(declare-fun fun_app$h (Nat_nat_set_fun$ Nat$) Nat_set$)
(declare-fun fun_app$i (A_llist_list_bool_fun$ A_llist_list$) Bool)
(declare-fun lessThan$ (Nat$) Nat_set$)
(declare-fun lessThan$a (Nat_set$) Nat_set_set$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (llength$ (lnth$ xssa$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$a (uug$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$a ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$a (uug$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$b (fun_app$c (uud$ ?v0) ?v1) ?v2) (fun_app$b (fun_app$c ?v0 ?v2) ?v1)) :pattern ((fun_app$b (fun_app$c (uud$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat_set$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$d (uuh$ ?v0) ?v1) ?v2) (fun_app$e (setsum$ (fun_app$a (uug$ ?v0) ?v2)) ?v1)) :pattern ((fun_app$ (fun_app$d (uuh$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$) (?v1 Nat_set$) (?v2 Nat$)) (! (= (fun_app$b (fun_app$f (uue$ ?v0) ?v1) ?v2) (fun_app$g (setsum$a (fun_app$c (uud$ ?v0) ?v2)) ?v1)) :pattern ((fun_app$b (fun_app$f (uue$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat_set$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$d (uuf$ ?v0) ?v1) ?v2) (fun_app$e (setsum$ (fun_app$a ?v0 ?v2)) ?v1)) :pattern ((fun_app$ (fun_app$d (uuf$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$) (?v1 Nat_set$) (?v2 Nat$)) (! (= (fun_app$b (fun_app$f (uuc$ ?v0) ?v1) ?v2) (fun_app$g (setsum$a (fun_app$c ?v0 ?v2)) ?v1)) :pattern ((fun_app$b (fun_app$f (uuc$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uub$ ?v0) zero$) :pattern ((fun_app$ uub$ ?v0)))) :named a7))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$b uua$ ?v0) zero$a) :pattern ((fun_app$b uua$ ?v0)))) :named a8))
(assert (! (not (= (fun_app$e (setsum$ uu$) (lessThan$ (size$ xss$))) zero$)) :named a9))
(assert (! (forall ((?v0 Nat$)) (! (=> (less$ ?v0 (size$ xss$)) (= (lnth$ xssa$ ?v0) lNil$)) :pattern ((lnth$ xssa$ ?v0)))) :named a10))
(assert (! (= (llength$ lNil$) zero$) :named a11))
(assert (! (forall ((?v0 Nat_set$)) (= (fun_app$g (setsum$a uua$) ?v0) zero$a)) :named a12))
(assert (! (forall ((?v0 Nat_set$)) (= (fun_app$e (setsum$ uub$) ?v0) zero$)) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (lessThan$ ?v0) (lessThan$ ?v1)) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 Nat_set_set$) (?v1 Nat_set_enat_fun$)) (! (=> (forall ((?v2 Nat_set$)) (=> (member$ ?v2 ?v0) (= (fun_app$e ?v1 ?v2) zero$))) (= (setsum$b ?v1 ?v0) zero$)) :pattern ((setsum$b ?v1 ?v0)))) :named a15))
(assert (! (forall ((?v0 Nat_set_set$) (?v1 Nat_set_nat_fun$)) (! (=> (forall ((?v2 Nat_set$)) (=> (member$ ?v2 ?v0) (= (fun_app$g ?v1 ?v2) zero$a))) (= (setsum$c ?v1 ?v0) zero$a)) :pattern ((setsum$c ?v1 ?v0)))) :named a16))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_nat_fun$)) (! (=> (forall ((?v2 Nat$)) (=> (member$a ?v2 ?v0) (= (fun_app$b ?v1 ?v2) zero$a))) (= (fun_app$g (setsum$a ?v1) ?v0) zero$a)) :pattern ((fun_app$g (setsum$a ?v1) ?v0)))) :named a17))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_enat_fun$)) (! (=> (forall ((?v2 Nat$)) (=> (member$a ?v2 ?v0) (= (fun_app$ ?v1 ?v2) zero$))) (= (fun_app$e (setsum$ ?v1) ?v0) zero$)) :pattern ((fun_app$e (setsum$ ?v1) ?v0)))) :named a18))
(assert (! (forall ((?v0 Nat_set_enat_fun$) (?v1 Nat_set_set$)) (=> (and (not (= (setsum$b ?v0 ?v1) zero$)) (forall ((?v2 Nat_set$)) (=> (and (member$ ?v2 ?v1) (not (= (fun_app$e ?v0 ?v2) zero$))) false))) false)) :named a19))
(assert (! (forall ((?v0 Nat_set_nat_fun$) (?v1 Nat_set_set$)) (=> (and (not (= (setsum$c ?v0 ?v1) zero$a)) (forall ((?v2 Nat_set$)) (=> (and (member$ ?v2 ?v1) (not (= (fun_app$g ?v0 ?v2) zero$a))) false))) false)) :named a20))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_set$)) (=> (and (not (= (fun_app$g (setsum$a ?v0) ?v1) zero$a)) (forall ((?v2 Nat$)) (=> (and (member$a ?v2 ?v1) (not (= (fun_app$b ?v0 ?v2) zero$a))) false))) false)) :named a21))
(assert (! (forall ((?v0 Nat_enat_fun$) (?v1 Nat_set$)) (=> (and (not (= (fun_app$e (setsum$ ?v0) ?v1) zero$)) (forall ((?v2 Nat$)) (=> (and (member$a ?v2 ?v1) (not (= (fun_app$ ?v0 ?v2) zero$))) false))) false)) :named a22))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$) (?v1 Nat_set$) (?v2 Nat_set$)) (= (fun_app$g (setsum$a (fun_app$f (uuc$ ?v0) ?v1)) ?v2) (fun_app$g (setsum$a (fun_app$f (uue$ ?v0) ?v2)) ?v1))) :named a23))
(assert (! (forall ((?v0 Nat_nat_enat_fun_fun$) (?v1 Nat_set$) (?v2 Nat_set$)) (= (fun_app$e (setsum$ (fun_app$d (uuf$ ?v0) ?v1)) ?v2) (fun_app$e (setsum$ (fun_app$d (uuh$ ?v0) ?v2)) ?v1))) :named a24))
(assert (! (forall ((?v0 Enat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a25))
(assert (! (forall ((?v0 Nat_set_set$) (?v1 Nat_nat_set_fun$) (?v2 Nat_set_nat_fun$) (?v3 Nat_set$) (?v4 Nat_enat_fun$) (?v5 Nat_set_enat_fun$)) (=> (and (forall ((?v6 Nat_set$)) (=> (member$ ?v6 ?v0) (= (fun_app$h ?v1 (fun_app$g ?v2 ?v6)) ?v6))) (and (forall ((?v6 Nat_set$)) (=> (member$ ?v6 ?v0) (member$a (fun_app$g ?v2 ?v6) ?v3))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v3) (= (fun_app$g ?v2 (fun_app$h ?v1 ?v6)) ?v6))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v3) (member$ (fun_app$h ?v1 ?v6) ?v0))) (forall ((?v6 Nat_set$)) (=> (member$ ?v6 ?v0) (= (fun_app$ ?v4 (fun_app$g ?v2 ?v6)) (fun_app$e ?v5 ?v6)))))))) (= (setsum$b ?v5 ?v0) (fun_app$e (setsum$ ?v4) ?v3)))) :named a26))
(assert (! (forall ((?v0 Nat_set_set$) (?v1 Nat_nat_set_fun$) (?v2 Nat_set_nat_fun$) (?v3 Nat_set$) (?v4 Nat_nat_fun$) (?v5 Nat_set_nat_fun$)) (=> (and (forall ((?v6 Nat_set$)) (=> (member$ ?v6 ?v0) (= (fun_app$h ?v1 (fun_app$g ?v2 ?v6)) ?v6))) (and (forall ((?v6 Nat_set$)) (=> (member$ ?v6 ?v0) (member$a (fun_app$g ?v2 ?v6) ?v3))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v3) (= (fun_app$g ?v2 (fun_app$h ?v1 ?v6)) ?v6))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v3) (member$ (fun_app$h ?v1 ?v6) ?v0))) (forall ((?v6 Nat_set$)) (=> (member$ ?v6 ?v0) (= (fun_app$b ?v4 (fun_app$g ?v2 ?v6)) (fun_app$g ?v5 ?v6)))))))) (= (setsum$c ?v5 ?v0) (fun_app$g (setsum$a ?v4) ?v3)))) :named a27))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set_nat_fun$) (?v2 Nat_nat_set_fun$) (?v3 Nat_set_set$) (?v4 Nat_set_enat_fun$) (?v5 Nat_enat_fun$)) (=> (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (= (fun_app$g ?v1 (fun_app$h ?v2 ?v6)) ?v6))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (member$ (fun_app$h ?v2 ?v6) ?v3))) (and (forall ((?v6 Nat_set$)) (=> (member$ ?v6 ?v3) (= (fun_app$h ?v2 (fun_app$g ?v1 ?v6)) ?v6))) (and (forall ((?v6 Nat_set$)) (=> (member$ ?v6 ?v3) (member$a (fun_app$g ?v1 ?v6) ?v0))) (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (= (fun_app$e ?v4 (fun_app$h ?v2 ?v6)) (fun_app$ ?v5 ?v6)))))))) (= (fun_app$e (setsum$ ?v5) ?v0) (setsum$b ?v4 ?v3)))) :named a28))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set_nat_fun$) (?v2 Nat_nat_set_fun$) (?v3 Nat_set_set$) (?v4 Nat_set_nat_fun$) (?v5 Nat_nat_fun$)) (=> (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (= (fun_app$g ?v1 (fun_app$h ?v2 ?v6)) ?v6))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (member$ (fun_app$h ?v2 ?v6) ?v3))) (and (forall ((?v6 Nat_set$)) (=> (member$ ?v6 ?v3) (= (fun_app$h ?v2 (fun_app$g ?v1 ?v6)) ?v6))) (and (forall ((?v6 Nat_set$)) (=> (member$ ?v6 ?v3) (member$a (fun_app$g ?v1 ?v6) ?v0))) (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (= (fun_app$g ?v4 (fun_app$h ?v2 ?v6)) (fun_app$b ?v5 ?v6)))))))) (= (fun_app$g (setsum$a ?v5) ?v0) (setsum$c ?v4 ?v3)))) :named a29))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_set$) (?v4 Nat_nat_fun$) (?v5 Nat_nat_fun$)) (=> (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (= (fun_app$b ?v1 (fun_app$b ?v2 ?v6)) ?v6))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (member$a (fun_app$b ?v2 ?v6) ?v3))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v3) (= (fun_app$b ?v2 (fun_app$b ?v1 ?v6)) ?v6))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v3) (member$a (fun_app$b ?v1 ?v6) ?v0))) (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (= (fun_app$b ?v4 (fun_app$b ?v2 ?v6)) (fun_app$b ?v5 ?v6)))))))) (= (fun_app$g (setsum$a ?v5) ?v0) (fun_app$g (setsum$a ?v4) ?v3)))) :named a30))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_nat_fun$) (?v2 Nat_nat_fun$) (?v3 Nat_set$) (?v4 Nat_enat_fun$) (?v5 Nat_enat_fun$)) (=> (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (= (fun_app$b ?v1 (fun_app$b ?v2 ?v6)) ?v6))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (member$a (fun_app$b ?v2 ?v6) ?v3))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v3) (= (fun_app$b ?v2 (fun_app$b ?v1 ?v6)) ?v6))) (and (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v3) (member$a (fun_app$b ?v1 ?v6) ?v0))) (forall ((?v6 Nat$)) (=> (member$a ?v6 ?v0) (= (fun_app$ ?v4 (fun_app$b ?v2 ?v6)) (fun_app$ ?v5 ?v6)))))))) (= (fun_app$e (setsum$ ?v5) ?v0) (fun_app$e (setsum$ ?v4) ?v3)))) :named a31))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set$) (?v2 Nat_nat_fun$) (?v3 Nat_nat_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 Nat$)) (=> (member$a ?v4 ?v1) (= (fun_app$b ?v2 ?v4) (fun_app$b ?v3 ?v4))))) (= (fun_app$g (setsum$a ?v2) ?v0) (fun_app$g (setsum$a ?v3) ?v1)))) :named a32))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set$) (?v2 Nat_enat_fun$) (?v3 Nat_enat_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 Nat$)) (=> (member$a ?v4 ?v1) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (fun_app$e (setsum$ ?v2) ?v0) (fun_app$e (setsum$ ?v3) ?v1)))) :named a33))
(assert (! (forall ((?v0 A_llist_list$) (?v1 A_llist_list$)) (=> (not (= (size$ ?v0) (size$ ?v1))) (= (= ?v0 ?v1) false))) :named a34))
(assert (! (not (less$ zero$a m$)) :named a35))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set$)) (= (member$ ?v0 (lessThan$a ?v1)) (less$a ?v0 ?v1))) :named a36))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (member$a ?v0 (lessThan$ ?v1)) (less$ ?v0 ?v1))) :named a37))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (less$a (lessThan$ ?v0) (lessThan$ ?v1)) (less$ ?v0 ?v1))) :named a38))
(assert (! (forall ((?v0 A_llist_list_bool_fun$) (?v1 A_llist_list$)) (=> (forall ((?v2 A_llist_list$)) (=> (forall ((?v3 A_llist_list$)) (=> (less$ (size$ ?v3) (size$ ?v2)) (fun_app$i ?v0 ?v3))) (fun_app$i ?v0 ?v2))) (fun_app$i ?v0 ?v1))) :named a39))
(check-sat)
;(get-unsat-core)
