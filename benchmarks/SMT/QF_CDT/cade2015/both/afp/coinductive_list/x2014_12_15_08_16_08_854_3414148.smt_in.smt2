; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 655
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Bool_nat_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort Nat_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nibble$ (nibble0$) (nibble1$) (nibble2$) (nibble3$) (nibble4$) (nibble5$) (nibble6$) (nibble7$) (nibble8$) (nibble9$) (nibbleA$) (nibbleB$) (nibbleC$) (nibbleD$) (nibbleE$) (nibbleF$))
  (Char$ (char$ (select$ Nibble$) (selecta$ Nibble$)))))
(declare-fun uu$ () A_llist_a_llist_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun size$ (Char$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun compow$ () Nat_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$)
(declare-fun funpow$ () Nat_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$)
(declare-fun ldropn$ (Nat$) A_llist_a_llist_fun$)
(declare-fun of_nat$ (Nat$) Nat$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$a (Bool_nat_fun$ Bool) Nat$)
(declare-fun fun_app$b (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$c (Nat_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ Nat$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun rec_bool$ (Nat$ Nat$) Bool_nat_fun$)
(declare-fun size_bool$ () Bool_nat_fun$)
(declare-fun size_char$ (Char$) Nat$)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uu$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (= (fun_app$ (ldropn$ zero$) xs$) xs$)) :named a1))
(assert (! (= zero$ zero$) :named a2))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a3))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a4))
(assert (! (forall ((?v0 Char$)) (! (= (size_char$ ?v0) zero$) :pattern ((size_char$ ?v0)))) :named a5))
(assert (! (= (fun_app$a size_bool$ true) zero$) :named a6))
(assert (! (= (fun_app$a size_bool$ false) zero$) :named a7))
(assert (! (forall ((?v0 Char$)) (! (= (size$ ?v0) zero$) :pattern ((size$ ?v0)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (! (= (fun_app$ (ldropn$ ?v0) ?v1) (fun_app$ (fun_app$b (fun_app$c compow$ ?v0) uu$) ?v1)) :pattern ((fun_app$ (ldropn$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 Nat$)) (= (= (of_nat$ ?v0) zero$) (= ?v0 zero$))) :named a10))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ (of_nat$ ?v0)) (= zero$ ?v0))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (of_nat$ ?v0) (of_nat$ ?v1)) (= ?v0 ?v1))) :named a12))
(assert (! (= (of_nat$ zero$) zero$) :named a13))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 Nat$) (?v2 A_llist$)) (= (fun_app$ ?v0 (fun_app$ (fun_app$b (fun_app$c compow$ ?v1) ?v0) ?v2)) (fun_app$ (fun_app$b (fun_app$c compow$ ?v1) ?v0) (fun_app$ ?v0 ?v2)))) :named a14))
(assert (! (= funpow$ compow$) :named a15))
(assert (! (= size_bool$ (rec_bool$ zero$ zero$)) :named a16))
(check-sat)
;(get-unsat-core)
