; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 339
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun a$ () A_set$)
(declare-fun sup$ (A_set$ A_set$) A_set$)
(declare-fun lmap$ (A_a_fun$) A_llist_a_llist_fun$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun gen_lset$ (A_set$ A_llist$) A_set$)
(declare-fun pred_llist$ (A_bool_fun$ A_llist$) Bool)
(assert (! (not (= (gen_lset$ a$ lNil$) a$)) :named a0))
(assert (! (forall ((?v0 A_bool_fun$)) (pred_llist$ ?v0 lNil$)) :named a1))
(assert (! (= (ltl$ lNil$) lNil$) :named a2))
(assert (! (forall ((?v0 A_set$) (?v1 A_llist$)) (! (= (gen_lset$ ?v0 ?v1) (sup$ ?v0 (lset$ ?v1))) :pattern ((gen_lset$ ?v0 ?v1)))) :named a3))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (= (fun_app$ (lmap$ ?v0) ?v1) lNil$) (= ?v1 lNil$))) :named a4))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (= lNil$ (fun_app$ (lmap$ ?v0) ?v1)) (= ?v1 lNil$))) :named a5))
(assert (! (forall ((?v0 A_a_fun$)) (! (= (fun_app$ (lmap$ ?v0) lNil$) lNil$) :pattern ((lmap$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_llist$)) (! (= (lnull$ ?v0) (= ?v0 lNil$)) :pattern ((lnull$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A_llist$)) (=> (= ?v0 lNil$) (lnull$ ?v0))) :named a8))
(assert (! (forall ((?v0 A_llist$)) (=> (lnull$ ?v0) (= ?v0 lNil$))) :named a9))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lnull$ (fun_app$ (lmap$ ?v0) ?v1)) (lnull$ ?v1))) :named a10))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (ltl$ (fun_app$ (lmap$ ?v0) ?v1)) (fun_app$ (lmap$ ?v0) (ltl$ ?v1)))) :named a11))
(check-sat)
;(get-unsat-core)
