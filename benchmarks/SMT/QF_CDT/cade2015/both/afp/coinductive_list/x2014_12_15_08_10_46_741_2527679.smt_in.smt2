; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 269
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun_a_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun uu$ () A_llist_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun uua$ (A_llist_set$) A_llist_bool_fun_a_llist_bool_fun_fun$)
(declare-fun lSup$ (A_llist_set$) A_llist$)
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun collect$ (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_bool_fun_a_llist_bool_fun_fun$ A_llist_bool_fun$) A_llist_bool_fun$)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uu$ ?v0) (fun_app$ (fun_app$a lprefix$ ?v0) xs$)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_bool_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$b (uua$ ?v0) ?v1) ?v2) (and (member$ ?v2 ?v0) (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$b (uua$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (not (chain$ lprefix$ (collect$ uu$))) :named a2))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v0)) :named a3))
(assert (! (forall ((?v0 A_llist$)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v0)) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v2) ?v1)) (or (fun_app$ (fun_app$a lprefix$ ?v0) ?v2) (fun_app$ (fun_app$a lprefix$ ?v2) ?v0)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v2)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v2))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v2)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v2))) :named a9))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_set$) (?v2 A_llist_bool_fun$)) (=> (chain$ ?v0 ?v1) (chain$ ?v0 (collect$ (fun_app$b (uua$ ?v1) ?v2))))) :named a10))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_set$)) (= (chain$ ?v0 ?v1) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v1) (forall ((?v3 A_llist$)) (=> (member$ ?v3 ?v1) (or (fun_app$ (fun_app$a ?v0 ?v2) ?v3) (fun_app$ (fun_app$a ?v0 ?v3) ?v2)))))))) :named a11))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_bool_fun_fun$)) (=> (forall ((?v2 A_llist$) (?v3 A_llist$)) (=> (and (member$ ?v2 ?v0) (member$ ?v3 ?v0)) (or (fun_app$ (fun_app$a ?v1 ?v2) ?v3) (fun_app$ (fun_app$a ?v1 ?v3) ?v2)))) (chain$ ?v1 ?v0))) :named a12))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_set$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (chain$ ?v0 ?v1) (and (member$ ?v2 ?v1) (and (member$ ?v3 ?v1) (and (=> (fun_app$ (fun_app$a ?v0 ?v2) ?v3) false) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v2) false))))) false)) :named a13))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_set$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (chain$ ?v0 ?v1) (and (member$ ?v2 ?v1) (member$ ?v3 ?v1))) (or (fun_app$ (fun_app$a ?v0 ?v2) ?v3) (fun_app$ (fun_app$a ?v0 ?v3) ?v2)))) :named a14))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (fun_app$ (fun_app$a lprefix$ ?v2) ?v1)))) (fun_app$ (fun_app$a lprefix$ (lSup$ ?v0)) ?v1))) :named a15))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (fun_app$ (fun_app$a lprefix$ ?v2) ?v1)))) (fun_app$ (fun_app$a lprefix$ (lSup$ ?v0)) ?v1))) :named a16))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (member$ ?v1 ?v0)) (fun_app$ (fun_app$a lprefix$ ?v1) (lSup$ ?v0)))) :named a17))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist$)) (=> (and (chain$ lprefix$ ?v0) (member$ ?v1 ?v0)) (fun_app$ (fun_app$a lprefix$ ?v1) (lSup$ ?v0)))) :named a18))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (fun_app$a lprefix$ lNil$) ?v0) true) :pattern ((fun_app$ (fun_app$a lprefix$ lNil$) ?v0)))) :named a19))
(check-sat)
;(get-unsat-core)
