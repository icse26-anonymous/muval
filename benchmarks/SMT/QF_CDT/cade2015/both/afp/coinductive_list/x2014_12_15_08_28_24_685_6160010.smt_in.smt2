; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 645
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun r$ () A_a_bool_fun_fun$)
(declare-fun x$ () A$)
(declare-fun y$ () A$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun zs$ () A_llist$)
(declare-fun xs$a () A_llist$)
(declare-fun xs$b () A_llist$)
(declare-fun xsa$ () A_llist$)
(declare-fun ys$a () A_llist$)
(declare-fun ys$b () A_llist$)
(declare-fun ysa$ () A_llist$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun lappend$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$) Bool)
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$) A_llist$)
(assert (! (not (and (not (= xs$ lNil$)) (not (fun_app$ (fun_app$a r$ (lhd$ xs$)) y$)))) :named a0))
(assert (! (= xsa$ (lCons$ x$ xs$a)) :named a1))
(assert (! (= ysa$ (lCons$ x$ ys$)) :named a2))
(assert (! (= xsa$ (fun_app$b (lappend$ (lCons$ x$ zs$)) xs$)) :named a3))
(assert (! (= ysa$ (fun_app$b (lappend$ (lCons$ x$ zs$)) (lCons$ y$ ys$a))) :named a4))
(assert (! (= xs$a (fun_app$b (lappend$ zs$) xs$)) :named a5))
(assert (! (not (exists ((?v0 A_llist$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (and (lfinite$ ?v0) (and (= xsa$ (fun_app$b (lappend$ ?v0) ?v1)) (and (= ysa$ (fun_app$b (lappend$ ?v0) (lCons$ ?v2 ?v3))) (or (= ?v1 lNil$) (fun_app$ (fun_app$a r$ (lhd$ ?v1)) ?v2))))))) :named a6))
(assert (! (= ys$ (fun_app$b (lappend$ zs$) (lCons$ y$ ys$a))) :named a7))
(assert (! (llexord$ r$ xsa$ ysa$) :named a8))
(assert (! (not (exists ((?v0 A_llist$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (and (lfinite$ ?v0) (and (= xs$b (fun_app$b (lappend$ ?v0) ?v1)) (and (= ys$b (fun_app$b (lappend$ ?v0) (lCons$ ?v2 ?v3))) (or (= ?v1 lNil$) (fun_app$ (fun_app$a r$ (lhd$ ?v1)) ?v2))))))) :named a9))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$b (lappend$ ?v0) lNil$) ?v0) :pattern ((lappend$ ?v0)))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$b (lappend$ lNil$) ?v0) ?v0) :pattern ((fun_app$b (lappend$ lNil$) ?v0)))) :named a11))
(assert (! (= (lfinite$ lNil$) true) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (=> (and (lfinite$ ?v0) (and (= xsa$ (fun_app$b (lappend$ ?v0) ?v1)) (= ysa$ (fun_app$b (lappend$ ?v0) (lCons$ ?v2 ?v3))))) (and (not (= ?v1 lNil$)) (not (fun_app$ (fun_app$a r$ (lhd$ ?v1)) ?v2))))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lhd$ (lCons$ ?v0 ?v1)) ?v0) :pattern ((lCons$ ?v0 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))) :named a15))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false))) false)) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (not (= lNil$ (lCons$ ?v0 ?v1)))) :named a17))
(check-sat)
;(get-unsat-core)
