; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 660
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun m$ () Nat$)
(declare-fun n$ () Nat$)
(declare-fun p$ (A$) Bool)
(declare-fun ma$ () Nat$)
(declare-fun xs$ () A_llist$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun xsa$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist$ Nat$) A$)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(assert (! (not (not (p$ (lnth$ xsa$ (suc$ n$))))) :named a0))
(assert (! (less_eq$ (suc$ ma$) (suc$ n$)) :named a1))
(assert (! (less_eq$ ma$ n$) :named a2))
(assert (! (less$ (enat$ (suc$ n$)) (llength$ xsa$)) :named a3))
(assert (! (forall ((?v0 Nat$)) (=> (and (less_eq$ (suc$ ma$) ?v0) (less$ (enat$ ?v0) (llength$ xsa$))) (not (p$ (lnth$ xsa$ ?v0))))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (less$ (enat$ n$) (llength$ (ltl$ xsa$))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 Nat$)) (! (= (lnth$ (lCons$ ?v0 ?v1) (suc$ ?v2)) (lnth$ ?v1 ?v2)) :pattern ((lnth$ (lCons$ ?v0 ?v1) (suc$ ?v2))))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less_eq$ (suc$ ?v0) (suc$ ?v1)) (less_eq$ ?v0 ?v1)) :pattern ((less_eq$ (suc$ ?v0) (suc$ ?v1))))) :named a11))
(assert (! (forall ((?v0 Nat$)) (=> (and (less_eq$ m$ ?v0) (less$ (enat$ ?v0) (llength$ xs$))) (not (p$ (lnth$ xs$ ?v0))))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less_eq$ ?v0 (suc$ ?v1)) (or (less_eq$ ?v0 ?v1) (= ?v0 (suc$ ?v1)))) :pattern ((less_eq$ ?v0 (suc$ ?v1))))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (less_eq$ ?v0 ?v1)) (less_eq$ (suc$ ?v1) ?v0))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a15))
(assert (! (not (lfinite$ xs$)) :named a16))
(check-sat)
;(get-unsat-core)
