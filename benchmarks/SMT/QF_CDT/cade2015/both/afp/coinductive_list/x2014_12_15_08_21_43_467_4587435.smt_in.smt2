; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 610
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_b_prod_set$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort A_a_b_prod_fun$ 0)
(declare-sort A_b_prod_a_fun$ 0)
(declare-sort A_b_prod_b_fun$ 0)
(declare-sort B_a_b_prod_fun$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$) (lCons$ (lhd$ A_b_prod$) (ltl$ A_b_prod_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun n$ () Nat$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$) Enat_bool_fun$)
(declare-fun lmap$ (A_b_prod_a_b_prod_fun$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun lnth$ (A_b_prod_llist$ Nat$) A_b_prod$)
(declare-fun lset$ (A_b_prod_llist$) A_b_prod_set$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun lmap$a (A_b_prod_a_fun$ A_b_prod_llist$) A_llist$)
(declare-fun lmap$b (A_b_prod_b_fun$ A_b_prod_llist$) B_llist$)
(declare-fun lmap$c (A_a_b_prod_fun$ A_llist$) A_b_prod_llist$)
(declare-fun lmap$d (A_a_fun$ A_llist$) A_llist$)
(declare-fun lmap$e (A_b_fun$ A_llist$) B_llist$)
(declare-fun lmap$f (B_a_b_prod_fun$ B_llist$) A_b_prod_llist$)
(declare-fun lmap$g (B_a_fun$ B_llist$) A_llist$)
(declare-fun lmap$h (B_b_fun$ B_llist$) B_llist$)
(declare-fun lnth$a (A_llist$ Nat$) A$)
(declare-fun lnth$b (B_llist$ Nat$) B$)
(declare-fun lset$a (A_llist$) A_set$)
(declare-fun lset$b (B_llist$) B_set$)
(declare-fun member$ (A_b_prod$ A_b_prod_set$) Bool)
(declare-fun fun_app$ (Enat_bool_fun$ Enat$) Bool)
(declare-fun lappend$ (A_b_prod_llist$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lprefix$ (A_b_prod_llist$ A_b_prod_llist$) Bool)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (B$ B_set$) Bool)
(declare-fun fun_app$a (A_b_prod_a_b_prod_fun$ A_b_prod$) A_b_prod$)
(declare-fun fun_app$b (A_b_prod_a_fun$ A_b_prod$) A$)
(declare-fun fun_app$c (A_b_prod_b_fun$ A_b_prod$) B$)
(declare-fun fun_app$d (A_a_b_prod_fun$ A$) A_b_prod$)
(declare-fun fun_app$e (A_a_fun$ A$) A$)
(declare-fun fun_app$f (A_b_fun$ A$) B$)
(declare-fun fun_app$g (B_a_b_prod_fun$ B$) A_b_prod$)
(declare-fun fun_app$h (B_a_fun$ B$) A$)
(declare-fun fun_app$i (B_b_fun$ B$) B$)
(declare-fun lappend$a (A_llist$ A_llist$) A_llist$)
(declare-fun lappend$b (B_llist$ B_llist$) B_llist$)
(declare-fun llength$a (B_llist$) Enat$)
(declare-fun llength$b (A_b_prod_llist$) Enat$)
(declare-fun lprefix$a (A_llist$ A_llist$) Bool)
(declare-fun lprefix$b (B_llist$ B_llist$) Bool)
(declare-fun lstrict_prefix$ (A_b_prod_llist$ A_b_prod_llist$) Bool)
(declare-fun lstrict_prefix$a (A_llist$ A_llist$) Bool)
(declare-fun lstrict_prefix$b (B_llist$ B_llist$) Bool)
(assert (! (not (= (lnth$ (lzip$ xs$ ys$) n$) (pair$ (lnth$a xs$ n$) (lnth$b ys$ n$)))) :named a0))
(assert (! (fun_app$ (less$ (enat$ n$)) (llength$ xs$)) :named a1))
(assert (! (fun_app$ (less$ (enat$ n$)) (llength$a ys$)) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a5))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_a_b_prod_fun$)) (=> (fun_app$ (less$ (enat$ ?v0)) (llength$b ?v1)) (= (lnth$ (lmap$ ?v2 ?v1) ?v0) (fun_app$a ?v2 (lnth$ ?v1 ?v0))))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_a_fun$)) (=> (fun_app$ (less$ (enat$ ?v0)) (llength$b ?v1)) (= (lnth$a (lmap$a ?v2 ?v1) ?v0) (fun_app$b ?v2 (lnth$ ?v1 ?v0))))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_b_fun$)) (=> (fun_app$ (less$ (enat$ ?v0)) (llength$b ?v1)) (= (lnth$b (lmap$b ?v2 ?v1) ?v0) (fun_app$c ?v2 (lnth$ ?v1 ?v0))))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_a_b_prod_fun$)) (=> (fun_app$ (less$ (enat$ ?v0)) (llength$ ?v1)) (= (lnth$ (lmap$c ?v2 ?v1) ?v0) (fun_app$d ?v2 (lnth$a ?v1 ?v0))))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_a_fun$)) (=> (fun_app$ (less$ (enat$ ?v0)) (llength$ ?v1)) (= (lnth$a (lmap$d ?v2 ?v1) ?v0) (fun_app$e ?v2 (lnth$a ?v1 ?v0))))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_b_fun$)) (=> (fun_app$ (less$ (enat$ ?v0)) (llength$ ?v1)) (= (lnth$b (lmap$e ?v2 ?v1) ?v0) (fun_app$f ?v2 (lnth$a ?v1 ?v0))))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 B_llist$) (?v2 B_a_b_prod_fun$)) (=> (fun_app$ (less$ (enat$ ?v0)) (llength$a ?v1)) (= (lnth$ (lmap$f ?v2 ?v1) ?v0) (fun_app$g ?v2 (lnth$b ?v1 ?v0))))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 B_llist$) (?v2 B_a_fun$)) (=> (fun_app$ (less$ (enat$ ?v0)) (llength$a ?v1)) (= (lnth$a (lmap$g ?v2 ?v1) ?v0) (fun_app$h ?v2 (lnth$b ?v1 ?v0))))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 B_llist$) (?v2 B_b_fun$)) (=> (fun_app$ (less$ (enat$ ?v0)) (llength$a ?v1)) (= (lnth$b (lmap$h ?v2 ?v1) ?v0) (fun_app$i ?v2 (lnth$b ?v1 ?v0))))) :named a15))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 Nat$)) (=> (and (lprefix$ ?v0 ?v1) (fun_app$ (less$ (enat$ ?v2)) (llength$b ?v0))) (= (lnth$ ?v0 ?v2) (lnth$ ?v1 ?v2)))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 Nat$)) (=> (and (lprefix$a ?v0 ?v1) (fun_app$ (less$ (enat$ ?v2)) (llength$ ?v0))) (= (lnth$a ?v0 ?v2) (lnth$a ?v1 ?v2)))) :named a17))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 Nat$)) (=> (and (lprefix$b ?v0 ?v1) (fun_app$ (less$ (enat$ ?v2)) (llength$a ?v0))) (= (lnth$b ?v0 ?v2) (lnth$b ?v1 ?v2)))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (=> (fun_app$ (less$ (enat$ ?v0)) (llength$b ?v1)) (= (lnth$ (lappend$ ?v1 ?v2) ?v0) (lnth$ ?v1 ?v0)))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$ (less$ (enat$ ?v0)) (llength$ ?v1)) (= (lnth$a (lappend$a ?v1 ?v2) ?v0) (lnth$a ?v1 ?v0)))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 B_llist$) (?v2 B_llist$)) (=> (fun_app$ (less$ (enat$ ?v0)) (llength$a ?v1)) (= (lnth$b (lappend$b ?v1 ?v2) ?v0) (lnth$b ?v1 ?v0)))) :named a21))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$)) (= (member$ ?v0 (lset$ ?v1)) (exists ((?v2 Nat$)) (and (fun_app$ (less$ (enat$ ?v2)) (llength$b ?v1)) (= (lnth$ ?v1 ?v2) ?v0))))) :named a22))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$a ?v0 (lset$a ?v1)) (exists ((?v2 Nat$)) (and (fun_app$ (less$ (enat$ ?v2)) (llength$ ?v1)) (= (lnth$a ?v1 ?v2) ?v0))))) :named a23))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (= (member$b ?v0 (lset$b ?v1)) (exists ((?v2 Nat$)) (and (fun_app$ (less$ (enat$ ?v2)) (llength$a ?v1)) (= (lnth$b ?v1 ?v2) ?v0))))) :named a24))
(assert (! (forall ((?v0 Enat_bool_fun$) (?v1 Enat$)) (=> (forall ((?v2 Enat$)) (=> (forall ((?v3 Enat$)) (=> (fun_app$ (less$ ?v3) ?v2) (fun_app$ ?v0 ?v3))) (fun_app$ ?v0 ?v2))) (fun_app$ ?v0 ?v1))) :named a25))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (=> (lstrict_prefix$ ?v0 ?v1) (fun_app$ (less$ (llength$b ?v0)) (llength$b ?v1)))) :named a26))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (lstrict_prefix$a ?v0 ?v1) (fun_app$ (less$ (llength$ ?v0)) (llength$ ?v1)))) :named a27))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (lstrict_prefix$b ?v0 ?v1) (fun_app$ (less$ (llength$a ?v0)) (llength$a ?v1)))) :named a28))
(assert (! (forall ((?v0 A_b_prod$)) (=> (forall ((?v1 A$) (?v2 B$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a29))
(assert (! (forall ((?v0 B_llist$)) (lprefix$b ?v0 ?v0)) :named a30))
(assert (! (forall ((?v0 A_llist$)) (lprefix$a ?v0 ?v0)) :named a31))
(assert (! (forall ((?v0 A_b_prod_llist$)) (lprefix$ ?v0 ?v0)) :named a32))
(assert (! (forall ((?v0 B_llist$)) (lprefix$b ?v0 ?v0)) :named a33))
(assert (! (forall ((?v0 A_llist$)) (lprefix$a ?v0 ?v0)) :named a34))
(assert (! (forall ((?v0 A_b_prod_llist$)) (lprefix$ ?v0 ?v0)) :named a35))
(assert (! (forall ((?v0 A_b_prod_a_fun$) (?v1 A_b_prod_llist$)) (= (llength$ (lmap$a ?v0 ?v1)) (llength$b ?v1))) :named a36))
(assert (! (forall ((?v0 A_b_prod_b_fun$) (?v1 A_b_prod_llist$)) (= (llength$a (lmap$b ?v0 ?v1)) (llength$b ?v1))) :named a37))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 B_llist$)) (= (llength$b (lmap$f ?v0 ?v1)) (llength$a ?v1))) :named a38))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod_llist$)) (= (llength$b (lmap$ ?v0 ?v1)) (llength$b ?v1))) :named a39))
(assert (! (forall ((?v0 A_a_b_prod_fun$) (?v1 A_llist$)) (= (llength$b (lmap$c ?v0 ?v1)) (llength$ ?v1))) :named a40))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (llength$ (lmap$d ?v0 ?v1)) (llength$ ?v1))) :named a41))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (llength$ (lmap$g ?v0 ?v1)) (llength$a ?v1))) :named a42))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (llength$a (lmap$e ?v0 ?v1)) (llength$ ?v1))) :named a43))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (llength$a (lmap$h ?v0 ?v1)) (llength$a ?v1))) :named a44))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (= (lappend$b (lappend$b ?v0 ?v1) ?v2) (lappend$b ?v0 (lappend$b ?v1 ?v2)))) :named a45))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$a (lappend$a ?v0 ?v1) ?v2) (lappend$a ?v0 (lappend$a ?v1 ?v2)))) :named a46))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a47))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 B_llist$) (?v2 B_llist$)) (= (lmap$f ?v0 (lappend$b ?v1 ?v2)) (lappend$ (lmap$f ?v0 ?v1) (lmap$f ?v0 ?v2)))) :named a48))
(assert (! (forall ((?v0 A_b_prod_b_fun$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (lmap$b ?v0 (lappend$ ?v1 ?v2)) (lappend$b (lmap$b ?v0 ?v1) (lmap$b ?v0 ?v2)))) :named a49))
(assert (! (forall ((?v0 A_b_prod_a_fun$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (lmap$a ?v0 (lappend$ ?v1 ?v2)) (lappend$a (lmap$a ?v0 ?v1) (lmap$a ?v0 ?v2)))) :named a50))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (lmap$ ?v0 (lappend$ ?v1 ?v2)) (lappend$ (lmap$ ?v0 ?v1) (lmap$ ?v0 ?v2)))) :named a51))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$) (?v2 B_llist$)) (= (lmap$h ?v0 (lappend$b ?v1 ?v2)) (lappend$b (lmap$h ?v0 ?v1) (lmap$h ?v0 ?v2)))) :named a52))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$) (?v2 B_llist$)) (= (lmap$g ?v0 (lappend$b ?v1 ?v2)) (lappend$a (lmap$g ?v0 ?v1) (lmap$g ?v0 ?v2)))) :named a53))
(assert (! (forall ((?v0 A_a_b_prod_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (lmap$c ?v0 (lappend$a ?v1 ?v2)) (lappend$ (lmap$c ?v0 ?v1) (lmap$c ?v0 ?v2)))) :named a54))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (lmap$e ?v0 (lappend$a ?v1 ?v2)) (lappend$b (lmap$e ?v0 ?v1) (lmap$e ?v0 ?v2)))) :named a55))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (lmap$d ?v0 (lappend$a ?v1 ?v2)) (lappend$a (lmap$d ?v0 ?v1) (lmap$d ?v0 ?v2)))) :named a56))
(check-sat)
;(get-unsat-core)
