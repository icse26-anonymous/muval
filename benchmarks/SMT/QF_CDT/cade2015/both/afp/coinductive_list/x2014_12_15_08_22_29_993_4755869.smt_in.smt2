; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 397
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort C_a_fun$ 0)
(declare-sort C_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort A_a_a_prod_fun$ 0)
(declare-sort A_a_b_prod_fun$ 0)
(declare-sort A_a_c_prod_fun$ 0)
(declare-sort A_b_a_prod_fun$ 0)
(declare-sort A_c_a_prod_fun$ 0)
(declare-sort B_a_a_prod_fun$ 0)
(declare-sort B_a_b_prod_fun$ 0)
(declare-sort B_b_b_prod_fun$ 0)
(declare-sort B_c_b_prod_fun$ 0)
(declare-sort C_a_a_prod_fun$ 0)
(declare-sort C_a_b_prod_fun$ 0)
(declare-sort C_a_c_prod_fun$ 0)
(declare-sort C_b_c_prod_fun$ 0)
(declare-sort C_c_c_prod_fun$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_b_prod_bool_fun$ 0)
(declare-sort C_b_prod_bool_fun$ 0)
(declare-sort A_a_a_a_prod_fun_fun$ 0)
(declare-sort A_a_a_b_prod_fun_fun$ 0)
(declare-sort A_a_a_c_prod_fun_fun$ 0)
(declare-sort A_a_c_a_prod_fun_fun$ 0)
(declare-sort A_b_a_b_prod_fun_fun$ 0)
(declare-sort A_b_c_b_prod_fun_fun$ 0)
(declare-sort A_c_a_c_prod_fun_fun$ 0)
(declare-sort B_a_b_a_prod_fun_fun$ 0)
(declare-sort B_b_b_b_prod_fun_fun$ 0)
(declare-sort B_c_b_c_prod_fun_fun$ 0)
(declare-sort C_b_a_a_prod_fun_fun$ 0)
(declare-sort C_b_a_b_prod_fun_fun$ 0)
(declare-sort C_b_c_b_prod_fun_fun$ 0)
(declare-sort C_c_a_a_prod_fun_fun$ 0)
(declare-sort C_c_a_b_prod_fun_fun$ 0)
(declare-sort C_c_c_c_prod_fun_fun$ 0)
(declare-sort A_a_b_prod_a_prod_fun$ 0)
(declare-sort A_a_prod_a_a_prod_fun$ 0)
(declare-sort A_a_prod_a_b_prod_fun$ 0)
(declare-sort A_a_prod_a_c_prod_fun$ 0)
(declare-sort A_a_prod_c_a_prod_fun$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-sort A_b_prod_c_b_prod_fun$ 0)
(declare-sort C_a_b_prod_a_prod_fun$ 0)
(declare-sort C_b_prod_a_a_prod_fun$ 0)
(declare-sort C_b_prod_a_b_prod_fun$ 0)
(declare-sort C_b_prod_c_b_prod_fun$ 0)
(declare-sort C_c_prod_a_a_prod_fun$ 0)
(declare-sort C_c_prod_a_b_prod_fun$ 0)
(declare-sort A_a_b_prod_prod_bool_fun$ 0)
(declare-sort A_b_prod_a_a_b_prod_prod_fun$ 0)
(declare-sort C_b_prod_a_a_b_prod_prod_fun$ 0)
(declare-sort A_a_b_prod_a_a_b_prod_prod_fun_fun$ 0)
(declare-sort A_b_prod_a_a_b_prod_a_prod_fun_fun$ 0)
(declare-sort C_b_prod_c_a_b_prod_a_prod_fun_fun$ 0)
(declare-sort C_c_b_prod_a_a_b_prod_prod_fun_fun$ 0)
(declare-sort A_a_b_prod_prod_a_a_b_prod_prod_fun$ 0)
(declare-sort A_b_prod_a_b_prod_a_b_prod_prod_fun$ 0)
(declare-sort C_b_prod_a_b_prod_a_b_prod_prod_fun$ 0)
(declare-sort C_b_prod_c_prod_a_b_prod_a_prod_fun$ 0)
(declare-sort C_c_b_prod_prod_a_a_b_prod_prod_fun$ 0)
(declare-sort A_b_prod_a_b_prod_a_b_prod_a_b_prod_prod_fun_fun$ 0)
(declare-sort C_b_prod_c_b_prod_a_b_prod_a_b_prod_prod_fun_fun$ 0)
(declare-sort C_b_prod_c_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$) (lCons$ (lhd$ A_b_prod$) (ltl$ A_b_prod_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))
  (C_llist$ (lNil$c) (lCons$c (lhd$c C$) (ltl$c C_llist$)))))
(declare-datatypes () ((C_b_prod$ (pair$a (fst$a C$) (snd$a B$)))))
(declare-codatatypes () ((C_b_prod_llist$ (lNil$d) (lCons$d (lhd$d C_b_prod$) (ltl$d C_b_prod_llist$)))))
(declare-datatypes () ((A_a_prod$ (pair$b (fst$b A$) (snd$b A$)))))
(declare-codatatypes () ((A_a_prod_llist$ (lNil$e) (lCons$e (lhd$e A_a_prod$) (ltl$e A_a_prod_llist$)))))
(declare-datatypes () ((C_c_prod$ (pair$c (fst$c C$) (snd$c C$)))))
(declare-codatatypes () ((C_c_prod_llist$ (lNil$f) (lCons$f (lhd$f C_c_prod$) (ltl$f C_c_prod_llist$)))))
(declare-datatypes () ((A_a_b_prod_prod$ (pair$d (fst$d A$) (snd$d A_b_prod$)))))
(declare-codatatypes () ((A_a_b_prod_prod_llist$ (lNil$g) (lCons$g (lhd$g A_a_b_prod_prod$) (ltl$g A_a_b_prod_prod_llist$)))))
(declare-datatypes () ((C_c_b_prod_prod$ (pair$e (fst$e C$) (snd$e C_b_prod$)))))
(declare-codatatypes () ((C_c_b_prod_prod_llist$ (lNil$h) (lCons$h (lhd$h C_c_b_prod_prod$) (ltl$h C_c_b_prod_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_prod$ (pair$f (fst$f A_b_prod$) (snd$f A$)))))
(declare-codatatypes () ((A_b_prod_a_prod_llist$ (lNil$i) (lCons$i (lhd$i A_b_prod_a_prod$) (ltl$i A_b_prod_a_prod_llist$)))))
(declare-datatypes () ((C_b_prod_c_prod$ (pair$g (fst$g C_b_prod$) (snd$g C$)))))
(declare-codatatypes () ((C_b_prod_c_prod_llist$ (lNil$j) (lCons$j (lhd$j C_b_prod_c_prod$) (ltl$j C_b_prod_c_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_b_prod_prod$ (pair$h (fst$h A_b_prod$) (snd$h A_b_prod$)))))
(declare-codatatypes () ((A_b_prod_a_b_prod_prod_llist$ (lNil$k) (lCons$k (lhd$k A_b_prod_a_b_prod_prod$) (ltl$k A_b_prod_a_b_prod_prod_llist$)))))
(declare-datatypes () ((C_b_prod_c_b_prod_prod$ (pair$i (fst$i C_b_prod$) (snd$i C_b_prod$)))))
(declare-codatatypes () ((C_b_prod_c_b_prod_prod_llist$ (lNil$l) (lCons$l (lhd$l C_b_prod_c_b_prod_prod$) (ltl$l C_b_prod_c_b_prod_prod_llist$)))))
(declare-datatypes () ((B_c_prod$ (pair$j (fst$j B$) (snd$j C$)))
  (B_b_prod$ (pair$k (fst$k B$) (snd$k B$)))
  (B_a_prod$ (pair$l (fst$l B$) (snd$l A$)))
  (A_c_prod$ (pair$m (fst$m A$) (snd$m C$)))
  (C_a_prod$ (pair$n (fst$n C$) (snd$n A$)))))
(declare-fun f$ () C_a_fun$)
(declare-fun uu$ () C_b_a_b_prod_fun_fun$)
(declare-fun xs$ () C_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun uua$ () A_b_prod_a_b_prod_fun$)
(declare-fun uub$ () C_c_fun$)
(declare-fun uuc$ () B_b_fun$)
(declare-fun uud$ () A_a_fun$)
(declare-fun uue$ (A_a_fun$ B_b_fun$) A_b_a_b_prod_fun_fun$)
(declare-fun uuf$ (A_c_fun$ B_b_fun$) A_b_c_b_prod_fun_fun$)
(declare-fun uug$ (C_c_fun$ B_b_fun$) C_b_c_b_prod_fun_fun$)
(declare-fun uuh$ (C_a_fun$ B_b_fun$) C_b_a_b_prod_fun_fun$)
(declare-fun uui$ (C_a_fun$ C_a_fun$) C_c_a_a_prod_fun_fun$)
(declare-fun uuj$ (C_a_fun$ C_b_prod_a_b_prod_fun$) C_c_b_prod_a_a_b_prod_prod_fun_fun$)
(declare-fun uuk$ (C_b_prod_a_b_prod_fun$ C_a_fun$) C_b_prod_c_a_b_prod_a_prod_fun_fun$)
(declare-fun uul$ (C_b_prod_a_b_prod_fun$ C_b_prod_a_b_prod_fun$) C_b_prod_c_b_prod_a_b_prod_a_b_prod_prod_fun_fun$)
(declare-fun uum$ (C_a_fun$ C_b_fun$) C_c_a_b_prod_fun_fun$)
(declare-fun uun$ (C_a_fun$ B_a_fun$) C_b_a_a_prod_fun_fun$)
(declare-fun uuo$ (A_b_a_b_prod_fun_fun$ C_b_a_b_prod_fun_fun$) C_b_a_b_prod_fun_fun$)
(declare-fun uup$ (C_b_a_b_prod_fun_fun$ C_b_c_b_prod_fun_fun$) C_b_a_b_prod_fun_fun$)
(declare-fun uuq$ (A_a_a_a_prod_fun_fun$ C_c_a_a_prod_fun_fun$) C_c_a_a_prod_fun_fun$)
(declare-fun uur$ (C_b_a_b_prod_fun_fun$ A_b_c_b_prod_fun_fun$) A_b_a_b_prod_fun_fun$)
(declare-fun uus$ (C_c_a_a_prod_fun_fun$ C_c_c_c_prod_fun_fun$) C_c_a_a_prod_fun_fun$)
(declare-fun uut$ (C_b_c_b_prod_fun_fun$ C_b_c_b_prod_fun_fun$) C_b_c_b_prod_fun_fun$)
(declare-fun uuu$ (C_b_c_b_prod_fun_fun$ A_b_c_b_prod_fun_fun$) A_b_c_b_prod_fun_fun$)
(declare-fun uuv$ (A_b_c_b_prod_fun_fun$ C_b_a_b_prod_fun_fun$) C_b_c_b_prod_fun_fun$)
(declare-fun uuw$ (A_b_c_b_prod_fun_fun$ A_b_a_b_prod_fun_fun$) A_b_c_b_prod_fun_fun$)
(declare-fun uux$ (A_b_a_b_prod_fun_fun$ A_b_a_b_prod_fun_fun$) A_b_a_b_prod_fun_fun$)
(declare-fun uuy$ () A_b_a_b_prod_fun_fun$)
(declare-fun uuz$ () A_a_a_a_prod_fun_fun$)
(declare-fun uva$ () C_b_c_b_prod_fun_fun$)
(declare-fun uvb$ () A_b_prod_a_a_b_prod_a_prod_fun_fun$)
(declare-fun uvc$ () A_a_b_prod_a_a_b_prod_prod_fun_fun$)
(declare-fun uvd$ () A_b_prod_a_b_prod_a_b_prod_a_b_prod_prod_fun_fun$)
(declare-fun uve$ () B_c_b_c_prod_fun_fun$)
(declare-fun uvf$ () B_b_b_b_prod_fun_fun$)
(declare-fun uvg$ () B_a_b_a_prod_fun_fun$)
(declare-fun uvh$ () A_c_a_c_prod_fun_fun$)
(declare-fun uvi$ (C_b_prod_a_b_prod_fun$) C_b_a_b_prod_fun_fun$)
(declare-fun uvj$ (C_c_prod_a_a_prod_fun$) C_c_a_a_prod_fun_fun$)
(declare-fun uvk$ (C_b_prod_c_b_prod_fun$) C_b_c_b_prod_fun_fun$)
(declare-fun uvl$ (A_b_prod_c_b_prod_fun$) A_b_c_b_prod_fun_fun$)
(declare-fun uvm$ (A_b_prod_a_b_prod_fun$) A_b_a_b_prod_fun_fun$)
(declare-fun uvn$ (C_c_b_prod_prod_a_a_b_prod_prod_fun$) C_c_b_prod_a_a_b_prod_prod_fun_fun$)
(declare-fun uvo$ (A_a_prod_c_a_prod_fun$) A_a_c_a_prod_fun_fun$)
(declare-fun uvp$ (A_a_prod_a_c_prod_fun$) A_a_a_c_prod_fun_fun$)
(declare-fun uvq$ (A_a_prod_a_b_prod_fun$) A_a_a_b_prod_fun_fun$)
(declare-fun uvr$ (A_a_prod_a_a_prod_fun$) A_a_a_a_prod_fun_fun$)
(declare-fun uvs$ (A_b_prod_c_b_prod_fun$ C_b_a_b_prod_fun_fun$) C_b_c_b_prod_fun_fun$)
(declare-fun uvt$ (A_a_b_prod_prod_a_a_b_prod_prod_fun$ C_c_b_prod_a_a_b_prod_prod_fun_fun$) C_c_b_prod_a_a_b_prod_prod_fun_fun$)
(declare-fun uvu$ (A_a_prod_a_a_prod_fun$ C_c_a_a_prod_fun_fun$) C_c_a_a_prod_fun_fun$)
(declare-fun uvv$ (C_b_prod_a_b_prod_fun$ C_b_c_b_prod_fun_fun$) C_b_a_b_prod_fun_fun$)
(declare-fun uvw$ (C_b_prod_c_b_prod_fun$ C_b_c_b_prod_fun_fun$) C_b_c_b_prod_fun_fun$)
(declare-fun uvx$ (C_b_prod_c_b_prod_fun$ A_b_c_b_prod_fun_fun$) A_b_c_b_prod_fun_fun$)
(declare-fun uvy$ (C_b_prod_a_b_prod_fun$ A_b_c_b_prod_fun_fun$) A_b_a_b_prod_fun_fun$)
(declare-fun uvz$ (A_b_prod_c_b_prod_fun$ A_b_a_b_prod_fun_fun$) A_b_c_b_prod_fun_fun$)
(declare-fun uwa$ (A_b_prod_a_b_prod_fun$ A_b_a_b_prod_fun_fun$) A_b_a_b_prod_fun_fun$)
(declare-fun uwb$ (A_b_prod_a_b_prod_fun$ C_b_a_b_prod_fun_fun$) C_b_a_b_prod_fun_fun$)
(declare-fun lmap$ (C_a_fun$ C_llist$) A_llist$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun lmap$a (C_b_prod_a_b_prod_fun$ C_b_prod_llist$) A_b_prod_llist$)
(declare-fun lmap$b (A_b_prod_a_b_prod_fun$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun lmap$c (C_c_fun$ C_llist$) C_llist$)
(declare-fun lmap$d (B_b_fun$ B_llist$) B_llist$)
(declare-fun lmap$e (A_a_fun$ A_llist$) A_llist$)
(declare-fun lmap$f (A_c_fun$ A_llist$) C_llist$)
(declare-fun lmap$g (A_b_prod_c_b_prod_fun$ A_b_prod_llist$) C_b_prod_llist$)
(declare-fun lmap$h (C_b_prod_c_b_prod_fun$ C_b_prod_llist$) C_b_prod_llist$)
(declare-fun lmap$i (C_c_prod_a_a_prod_fun$ C_c_prod_llist$) A_a_prod_llist$)
(declare-fun lmap$j (C_c_b_prod_prod_a_a_b_prod_prod_fun$ C_c_b_prod_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun lmap$k (C_b_prod_c_prod_a_b_prod_a_prod_fun$ C_b_prod_c_prod_llist$) A_b_prod_a_prod_llist$)
(declare-fun lmap$l (C_b_prod_c_b_prod_prod_a_b_prod_a_b_prod_prod_fun$ C_b_prod_c_b_prod_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun lmap$m (C_b_fun$ C_llist$) B_llist$)
(declare-fun lmap$n (C_c_prod_a_b_prod_fun$ C_c_prod_llist$) A_b_prod_llist$)
(declare-fun lmap$o (B_a_fun$ B_llist$) A_llist$)
(declare-fun lmap$p (C_b_prod_a_a_prod_fun$ C_b_prod_llist$) A_a_prod_llist$)
(declare-fun lzip$a (C_llist$ B_llist$) C_b_prod_llist$)
(declare-fun lzip$b (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun lzip$c (C_llist$ C_llist$) C_c_prod_llist$)
(declare-fun lzip$d (A_llist$ A_b_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun lzip$e (C_llist$ C_b_prod_llist$) C_c_b_prod_prod_llist$)
(declare-fun lzip$f (A_b_prod_llist$ A_llist$) A_b_prod_a_prod_llist$)
(declare-fun lzip$g (C_b_prod_llist$ C_llist$) C_b_prod_c_prod_llist$)
(declare-fun lzip$h (A_b_prod_llist$ A_b_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun lzip$i (C_b_prod_llist$ C_b_prod_llist$) C_b_prod_c_b_prod_prod_llist$)
(declare-fun fun_app$ (B_a_b_prod_fun$ B$) A_b_prod$)
(declare-fun fun_app$a (C_b_a_b_prod_fun_fun$ C$) B_a_b_prod_fun$)
(declare-fun fun_app$b (C_a_fun$ C$) A$)
(declare-fun fun_app$c (A_b_prod_a_b_prod_a_b_prod_prod_fun$ A_b_prod$) A_b_prod_a_b_prod_prod$)
(declare-fun fun_app$d (A_b_prod_a_b_prod_a_b_prod_a_b_prod_prod_fun_fun$ A_b_prod$) A_b_prod_a_b_prod_a_b_prod_prod_fun$)
(declare-fun fun_app$e (A_a_b_prod_a_prod_fun$ A$) A_b_prod_a_prod$)
(declare-fun fun_app$f (A_b_prod_a_a_b_prod_a_prod_fun_fun$ A_b_prod$) A_a_b_prod_a_prod_fun$)
(declare-fun fun_app$g (B_c_b_prod_fun$ B$) C_b_prod$)
(declare-fun fun_app$h (C_b_c_b_prod_fun_fun$ C$) B_c_b_prod_fun$)
(declare-fun fun_app$i (C_b_c_prod_fun$ C$) B_c_prod$)
(declare-fun fun_app$j (B_c_b_c_prod_fun_fun$ B$) C_b_c_prod_fun$)
(declare-fun fun_app$k (B_b_b_prod_fun$ B$) B_b_prod$)
(declare-fun fun_app$l (B_b_b_b_prod_fun_fun$ B$) B_b_b_prod_fun$)
(declare-fun fun_app$m (A_b_a_prod_fun$ A$) B_a_prod$)
(declare-fun fun_app$n (B_a_b_a_prod_fun_fun$ B$) A_b_a_prod_fun$)
(declare-fun fun_app$o (A_b_prod_a_a_b_prod_prod_fun$ A_b_prod$) A_a_b_prod_prod$)
(declare-fun fun_app$p (A_a_b_prod_a_a_b_prod_prod_fun_fun$ A$) A_b_prod_a_a_b_prod_prod_fun$)
(declare-fun fun_app$q (C_a_c_prod_fun$ C$) A_c_prod$)
(declare-fun fun_app$r (A_c_a_c_prod_fun_fun$ A$) C_a_c_prod_fun$)
(declare-fun fun_app$s (A_b_a_b_prod_fun_fun$ A$) B_a_b_prod_fun$)
(declare-fun fun_app$t (A_a_a_prod_fun$ A$) A_a_prod$)
(declare-fun fun_app$u (A_a_a_a_prod_fun_fun$ A$) A_a_a_prod_fun$)
(declare-fun fun_app$v (C_b_prod_a_a_b_prod_prod_fun$ C_b_prod$) A_a_b_prod_prod$)
(declare-fun fun_app$w (C_c_b_prod_a_a_b_prod_prod_fun_fun$ C$) C_b_prod_a_a_b_prod_prod_fun$)
(declare-fun fun_app$x (C_c_b_prod_prod_a_a_b_prod_prod_fun$ C_c_b_prod_prod$) A_a_b_prod_prod$)
(declare-fun fun_app$y (C_a_a_prod_fun$ C$) A_a_prod$)
(declare-fun fun_app$z (C_c_a_a_prod_fun_fun$ C$) C_a_a_prod_fun$)
(declare-fun case_prod$ (C_c_a_a_prod_fun_fun$) C_c_prod_a_a_prod_fun$)
(declare-fun fun_app$aa (C_c_prod_a_a_prod_fun$ C_c_prod$) A_a_prod$)
(declare-fun fun_app$ab (C_b_prod_c_b_prod_fun$ C_b_prod$) C_b_prod$)
(declare-fun fun_app$ac (C_b_prod_a_b_prod_fun$ C_b_prod$) A_b_prod$)
(declare-fun fun_app$ad (A_b_c_b_prod_fun_fun$ A$) B_c_b_prod_fun$)
(declare-fun fun_app$ae (A_b_prod_c_b_prod_fun$ A_b_prod$) C_b_prod$)
(declare-fun fun_app$af (A_b_prod_a_b_prod_fun$ A_b_prod$) A_b_prod$)
(declare-fun fun_app$ag (A_c_a_prod_fun$ A$) C_a_prod$)
(declare-fun fun_app$ah (A_a_c_a_prod_fun_fun$ A$) A_c_a_prod_fun$)
(declare-fun fun_app$ai (A_a_prod_c_a_prod_fun$ A_a_prod$) C_a_prod$)
(declare-fun fun_app$aj (A_a_c_prod_fun$ A$) A_c_prod$)
(declare-fun fun_app$ak (A_a_a_c_prod_fun_fun$ A$) A_a_c_prod_fun$)
(declare-fun fun_app$al (A_a_prod_a_c_prod_fun$ A_a_prod$) A_c_prod$)
(declare-fun fun_app$am (A_a_b_prod_fun$ A$) A_b_prod$)
(declare-fun fun_app$an (A_a_a_b_prod_fun_fun$ A$) A_a_b_prod_fun$)
(declare-fun fun_app$ao (A_a_prod_a_b_prod_fun$ A_a_prod$) A_b_prod$)
(declare-fun fun_app$ap (A_a_prod_a_a_prod_fun$ A_a_prod$) A_a_prod$)
(declare-fun fun_app$aq (C_b_prod_a_b_prod_a_b_prod_prod_fun$ C_b_prod$) A_b_prod_a_b_prod_prod$)
(declare-fun fun_app$ar (C_b_prod_c_b_prod_a_b_prod_a_b_prod_prod_fun_fun$ C_b_prod$) C_b_prod_a_b_prod_a_b_prod_prod_fun$)
(declare-fun fun_app$as (C_a_b_prod_a_prod_fun$ C$) A_b_prod_a_prod$)
(declare-fun fun_app$at (C_b_prod_c_a_b_prod_a_prod_fun_fun$ C_b_prod$) C_a_b_prod_a_prod_fun$)
(declare-fun fun_app$au (C_c_fun$ C$) C$)
(declare-fun fun_app$av (B_b_fun$ B$) B$)
(declare-fun fun_app$aw (C_a_b_prod_fun$ C$) A_b_prod$)
(declare-fun fun_app$ax (C_c_a_b_prod_fun_fun$ C$) C_a_b_prod_fun$)
(declare-fun fun_app$ay (C_b_fun$ C$) B$)
(declare-fun fun_app$az (B_a_a_prod_fun$ B$) A_a_prod$)
(declare-fun fun_app$ba (C_b_a_a_prod_fun_fun$ C$) B_a_a_prod_fun$)
(declare-fun fun_app$bb (B_a_fun$ B$) A$)
(declare-fun fun_app$bc (A_c_fun$ A$) C$)
(declare-fun fun_app$bd (A_a_fun$ A$) A$)
(declare-fun fun_app$be (C_c_c_prod_fun$ C$) C_c_prod$)
(declare-fun fun_app$bf (C_c_c_c_prod_fun_fun$ C$) C_c_c_prod_fun$)
(declare-fun fun_app$bg (A_a_b_prod_prod_a_a_b_prod_prod_fun$ A_a_b_prod_prod$) A_a_b_prod_prod$)
(declare-fun fun_app$bh (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod$) Bool)
(declare-fun fun_app$bi (A_a_prod_bool_fun$ A_a_prod$) Bool)
(declare-fun fun_app$bj (C_b_prod_bool_fun$ C_b_prod$) Bool)
(declare-fun fun_app$bk (A_b_prod_bool_fun$ A_b_prod$) Bool)
(declare-fun case_prod$a (C_b_c_b_prod_fun_fun$) C_b_prod_c_b_prod_fun$)
(declare-fun case_prod$b (C_b_a_b_prod_fun_fun$) C_b_prod_a_b_prod_fun$)
(declare-fun case_prod$c (A_b_c_b_prod_fun_fun$) A_b_prod_c_b_prod_fun$)
(declare-fun case_prod$d (A_b_a_b_prod_fun_fun$) A_b_prod_a_b_prod_fun$)
(declare-fun case_prod$e (A_a_a_a_prod_fun_fun$) A_a_prod_a_a_prod_fun$)
(declare-fun case_prod$f (C_c_b_prod_a_a_b_prod_prod_fun_fun$) C_c_b_prod_prod_a_a_b_prod_prod_fun$)
(declare-fun case_prod$g (C_b_prod_c_a_b_prod_a_prod_fun_fun$) C_b_prod_c_prod_a_b_prod_a_prod_fun$)
(declare-fun case_prod$h (C_b_prod_c_b_prod_a_b_prod_a_b_prod_prod_fun_fun$) C_b_prod_c_b_prod_prod_a_b_prod_a_b_prod_prod_fun$)
(declare-fun case_prod$i (C_c_a_b_prod_fun_fun$) C_c_prod_a_b_prod_fun$)
(declare-fun case_prod$j (C_b_a_a_prod_fun_fun$) C_b_prod_a_a_prod_fun$)
(declare-fun case_prod$k (C_c_c_c_prod_fun_fun$ C_c_prod$) C_c_prod$)
(declare-fun case_prod$l (A_b_prod_a_a_b_prod_a_prod_fun_fun$ A_b_prod_a_prod$) A_b_prod_a_prod$)
(declare-fun case_prod$m (A_a_b_prod_a_a_b_prod_prod_fun_fun$) A_a_b_prod_prod_a_a_b_prod_prod_fun$)
(declare-fun case_prod$n (A_b_prod_a_b_prod_a_b_prod_a_b_prod_prod_fun_fun$ A_b_prod_a_b_prod_prod$) A_b_prod_a_b_prod_prod$)
(declare-fun case_prod$o (B_c_b_c_prod_fun_fun$ B_c_prod$) B_c_prod$)
(declare-fun case_prod$p (B_b_b_b_prod_fun_fun$ B_b_prod$) B_b_prod$)
(declare-fun case_prod$q (B_a_b_a_prod_fun_fun$ B_a_prod$) B_a_prod$)
(declare-fun case_prod$r (A_c_a_c_prod_fun_fun$ A_c_prod$) A_c_prod$)
(declare-fun case_prod$s (A_a_c_a_prod_fun_fun$) A_a_prod_c_a_prod_fun$)
(declare-fun case_prod$t (A_a_a_c_prod_fun_fun$) A_a_prod_a_c_prod_fun$)
(declare-fun case_prod$u (A_a_a_b_prod_fun_fun$) A_a_prod_a_b_prod_fun$)
(assert (! (forall ((?v0 C$) (?v1 B$)) (! (= (fun_app$ (fun_app$a uu$ ?v0) ?v1) (pair$ (fun_app$b f$ ?v0) ?v1)) :pattern ((fun_app$ (fun_app$a uu$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$)) (! (= (fun_app$c (fun_app$d uvd$ ?v0) ?v1) (pair$h ?v0 ?v1)) :pattern ((fun_app$c (fun_app$d uvd$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$)) (! (= (fun_app$e (fun_app$f uvb$ ?v0) ?v1) (pair$f ?v0 ?v1)) :pattern ((fun_app$e (fun_app$f uvb$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 C$) (?v1 B$)) (! (= (fun_app$g (fun_app$h uva$ ?v0) ?v1) (pair$a ?v0 ?v1)) :pattern ((fun_app$g (fun_app$h uva$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 B$) (?v1 C$)) (! (= (fun_app$i (fun_app$j uve$ ?v0) ?v1) (pair$j ?v0 ?v1)) :pattern ((fun_app$i (fun_app$j uve$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$k (fun_app$l uvf$ ?v0) ?v1) (pair$k ?v0 ?v1)) :pattern ((fun_app$k (fun_app$l uvf$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 B$) (?v1 A$)) (! (= (fun_app$m (fun_app$n uvg$ ?v0) ?v1) (pair$l ?v0 ?v1)) :pattern ((fun_app$m (fun_app$n uvg$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$)) (! (= (fun_app$o (fun_app$p uvc$ ?v0) ?v1) (pair$d ?v0 ?v1)) :pattern ((fun_app$o (fun_app$p uvc$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 C$)) (! (= (fun_app$q (fun_app$r uvh$ ?v0) ?v1) (pair$m ?v0 ?v1)) :pattern ((fun_app$q (fun_app$r uvh$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 B$)) (! (= (fun_app$ (fun_app$s uuy$ ?v0) ?v1) (pair$ ?v0 ?v1)) :pattern ((fun_app$ (fun_app$s uuy$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$t (fun_app$u uuz$ ?v0) ?v1) (pair$b ?v0 ?v1)) :pattern ((fun_app$t (fun_app$u uuz$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 C_c_b_prod_prod_a_a_b_prod_prod_fun$) (?v1 C$) (?v2 C_b_prod$)) (! (= (fun_app$v (fun_app$w (uvn$ ?v0) ?v1) ?v2) (fun_app$x ?v0 (pair$e ?v1 ?v2))) :pattern ((fun_app$v (fun_app$w (uvn$ ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 C_c_prod_a_a_prod_fun$) (?v1 C$) (?v2 C$)) (! (= (fun_app$y (fun_app$z (uvj$ ?v0) ?v1) ?v2) (fun_app$aa ?v0 (pair$c ?v1 ?v2))) :pattern ((fun_app$y (fun_app$z (uvj$ ?v0) ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 C_b_prod_c_b_prod_fun$) (?v1 C$) (?v2 B$)) (! (= (fun_app$g (fun_app$h (uvk$ ?v0) ?v1) ?v2) (fun_app$ab ?v0 (pair$a ?v1 ?v2))) :pattern ((fun_app$g (fun_app$h (uvk$ ?v0) ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 C_b_prod_a_b_prod_fun$) (?v1 C$) (?v2 B$)) (! (= (fun_app$ (fun_app$a (uvi$ ?v0) ?v1) ?v2) (fun_app$ac ?v0 (pair$a ?v1 ?v2))) :pattern ((fun_app$ (fun_app$a (uvi$ ?v0) ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 A_b_prod_c_b_prod_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$g (fun_app$ad (uvl$ ?v0) ?v1) ?v2) (fun_app$ae ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$g (fun_app$ad (uvl$ ?v0) ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$ (fun_app$s (uvm$ ?v0) ?v1) ?v2) (fun_app$af ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$s (uvm$ ?v0) ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 A_a_prod_c_a_prod_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$ag (fun_app$ah (uvo$ ?v0) ?v1) ?v2) (fun_app$ai ?v0 (pair$b ?v1 ?v2))) :pattern ((fun_app$ag (fun_app$ah (uvo$ ?v0) ?v1) ?v2)))) :named a17))
(assert (! (forall ((?v0 A_a_prod_a_c_prod_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$aj (fun_app$ak (uvp$ ?v0) ?v1) ?v2) (fun_app$al ?v0 (pair$b ?v1 ?v2))) :pattern ((fun_app$aj (fun_app$ak (uvp$ ?v0) ?v1) ?v2)))) :named a18))
(assert (! (forall ((?v0 A_a_prod_a_b_prod_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$am (fun_app$an (uvq$ ?v0) ?v1) ?v2) (fun_app$ao ?v0 (pair$b ?v1 ?v2))) :pattern ((fun_app$am (fun_app$an (uvq$ ?v0) ?v1) ?v2)))) :named a19))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$t (fun_app$u (uvr$ ?v0) ?v1) ?v2) (fun_app$ap ?v0 (pair$b ?v1 ?v2))) :pattern ((fun_app$t (fun_app$u (uvr$ ?v0) ?v1) ?v2)))) :named a20))
(assert (! (forall ((?v0 C_b_prod_a_b_prod_fun$) (?v1 C_b_prod_a_b_prod_fun$) (?v2 C_b_prod$) (?v3 C_b_prod$)) (! (= (fun_app$aq (fun_app$ar (uul$ ?v0 ?v1) ?v2) ?v3) (pair$h (fun_app$ac ?v0 ?v2) (fun_app$ac ?v1 ?v3))) :pattern ((fun_app$aq (fun_app$ar (uul$ ?v0 ?v1) ?v2) ?v3)))) :named a21))
(assert (! (forall ((?v0 C_b_prod_a_b_prod_fun$) (?v1 C_a_fun$) (?v2 C_b_prod$) (?v3 C$)) (! (= (fun_app$as (fun_app$at (uuk$ ?v0 ?v1) ?v2) ?v3) (pair$f (fun_app$ac ?v0 ?v2) (fun_app$b ?v1 ?v3))) :pattern ((fun_app$as (fun_app$at (uuk$ ?v0 ?v1) ?v2) ?v3)))) :named a22))
(assert (! (forall ((?v0 C_c_fun$) (?v1 B_b_fun$) (?v2 C$) (?v3 B$)) (! (= (fun_app$g (fun_app$h (uug$ ?v0 ?v1) ?v2) ?v3) (pair$a (fun_app$au ?v0 ?v2) (fun_app$av ?v1 ?v3))) :pattern ((fun_app$g (fun_app$h (uug$ ?v0 ?v1) ?v2) ?v3)))) :named a23))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_b_prod_a_b_prod_fun$) (?v2 C$) (?v3 C_b_prod$)) (! (= (fun_app$v (fun_app$w (uuj$ ?v0 ?v1) ?v2) ?v3) (pair$d (fun_app$b ?v0 ?v2) (fun_app$ac ?v1 ?v3))) :pattern ((fun_app$v (fun_app$w (uuj$ ?v0 ?v1) ?v2) ?v3)))) :named a24))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_b_fun$) (?v2 C$) (?v3 C$)) (! (= (fun_app$aw (fun_app$ax (uum$ ?v0 ?v1) ?v2) ?v3) (pair$ (fun_app$b ?v0 ?v2) (fun_app$ay ?v1 ?v3))) :pattern ((fun_app$aw (fun_app$ax (uum$ ?v0 ?v1) ?v2) ?v3)))) :named a25))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_a_fun$) (?v2 C$) (?v3 C$)) (! (= (fun_app$y (fun_app$z (uui$ ?v0 ?v1) ?v2) ?v3) (pair$b (fun_app$b ?v0 ?v2) (fun_app$b ?v1 ?v3))) :pattern ((fun_app$y (fun_app$z (uui$ ?v0 ?v1) ?v2) ?v3)))) :named a26))
(assert (! (forall ((?v0 C_a_fun$) (?v1 B_b_fun$) (?v2 C$) (?v3 B$)) (! (= (fun_app$ (fun_app$a (uuh$ ?v0 ?v1) ?v2) ?v3) (pair$ (fun_app$b ?v0 ?v2) (fun_app$av ?v1 ?v3))) :pattern ((fun_app$ (fun_app$a (uuh$ ?v0 ?v1) ?v2) ?v3)))) :named a27))
(assert (! (forall ((?v0 C_a_fun$) (?v1 B_a_fun$) (?v2 C$) (?v3 B$)) (! (= (fun_app$az (fun_app$ba (uun$ ?v0 ?v1) ?v2) ?v3) (pair$b (fun_app$b ?v0 ?v2) (fun_app$bb ?v1 ?v3))) :pattern ((fun_app$az (fun_app$ba (uun$ ?v0 ?v1) ?v2) ?v3)))) :named a28))
(assert (! (forall ((?v0 A_c_fun$) (?v1 B_b_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$g (fun_app$ad (uuf$ ?v0 ?v1) ?v2) ?v3) (pair$a (fun_app$bc ?v0 ?v2) (fun_app$av ?v1 ?v3))) :pattern ((fun_app$g (fun_app$ad (uuf$ ?v0 ?v1) ?v2) ?v3)))) :named a29))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$ (fun_app$s (uue$ ?v0 ?v1) ?v2) ?v3) (pair$ (fun_app$bd ?v0 ?v2) (fun_app$av ?v1 ?v3))) :pattern ((fun_app$ (fun_app$s (uue$ ?v0 ?v1) ?v2) ?v3)))) :named a30))
(assert (! (forall ((?v0 C_c_a_a_prod_fun_fun$) (?v1 C_c_c_c_prod_fun_fun$) (?v2 C$) (?v3 C$)) (! (= (fun_app$y (fun_app$z (uus$ ?v0 ?v1) ?v2) ?v3) (fun_app$aa (case_prod$ ?v0) (fun_app$be (fun_app$bf ?v1 ?v2) ?v3))) :pattern ((fun_app$y (fun_app$z (uus$ ?v0 ?v1) ?v2) ?v3)))) :named a31))
(assert (! (forall ((?v0 C_b_c_b_prod_fun_fun$) (?v1 C_b_c_b_prod_fun_fun$) (?v2 C$) (?v3 B$)) (! (= (fun_app$g (fun_app$h (uut$ ?v0 ?v1) ?v2) ?v3) (fun_app$ab (case_prod$a ?v0) (fun_app$g (fun_app$h ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$h (uut$ ?v0 ?v1) ?v2) ?v3)))) :named a32))
(assert (! (forall ((?v0 C_b_c_b_prod_fun_fun$) (?v1 A_b_c_b_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$g (fun_app$ad (uuu$ ?v0 ?v1) ?v2) ?v3) (fun_app$ab (case_prod$a ?v0) (fun_app$g (fun_app$ad ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$ad (uuu$ ?v0 ?v1) ?v2) ?v3)))) :named a33))
(assert (! (forall ((?v0 C_b_a_b_prod_fun_fun$) (?v1 C_b_c_b_prod_fun_fun$) (?v2 C$) (?v3 B$)) (! (= (fun_app$ (fun_app$a (uup$ ?v0 ?v1) ?v2) ?v3) (fun_app$ac (case_prod$b ?v0) (fun_app$g (fun_app$h ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uup$ ?v0 ?v1) ?v2) ?v3)))) :named a34))
(assert (! (forall ((?v0 C_b_a_b_prod_fun_fun$) (?v1 A_b_c_b_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$ (fun_app$s (uur$ ?v0 ?v1) ?v2) ?v3) (fun_app$ac (case_prod$b ?v0) (fun_app$g (fun_app$ad ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$s (uur$ ?v0 ?v1) ?v2) ?v3)))) :named a35))
(assert (! (forall ((?v0 A_b_c_b_prod_fun_fun$) (?v1 C_b_a_b_prod_fun_fun$) (?v2 C$) (?v3 B$)) (! (= (fun_app$g (fun_app$h (uuv$ ?v0 ?v1) ?v2) ?v3) (fun_app$ae (case_prod$c ?v0) (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$h (uuv$ ?v0 ?v1) ?v2) ?v3)))) :named a36))
(assert (! (forall ((?v0 A_b_c_b_prod_fun_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$g (fun_app$ad (uuw$ ?v0 ?v1) ?v2) ?v3) (fun_app$ae (case_prod$c ?v0) (fun_app$ (fun_app$s ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$ad (uuw$ ?v0 ?v1) ?v2) ?v3)))) :named a37))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$) (?v1 C_b_a_b_prod_fun_fun$) (?v2 C$) (?v3 B$)) (! (= (fun_app$ (fun_app$a (uuo$ ?v0 ?v1) ?v2) ?v3) (fun_app$af (case_prod$d ?v0) (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uuo$ ?v0 ?v1) ?v2) ?v3)))) :named a38))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$ (fun_app$s (uux$ ?v0 ?v1) ?v2) ?v3) (fun_app$af (case_prod$d ?v0) (fun_app$ (fun_app$s ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$s (uux$ ?v0 ?v1) ?v2) ?v3)))) :named a39))
(assert (! (forall ((?v0 A_a_a_a_prod_fun_fun$) (?v1 C_c_a_a_prod_fun_fun$) (?v2 C$) (?v3 C$)) (! (= (fun_app$y (fun_app$z (uuq$ ?v0 ?v1) ?v2) ?v3) (fun_app$ap (case_prod$e ?v0) (fun_app$y (fun_app$z ?v1 ?v2) ?v3))) :pattern ((fun_app$y (fun_app$z (uuq$ ?v0 ?v1) ?v2) ?v3)))) :named a40))
(assert (! (forall ((?v0 C_b_prod_c_b_prod_fun$) (?v1 C_b_c_b_prod_fun_fun$) (?v2 C$) (?v3 B$)) (! (= (fun_app$g (fun_app$h (uvw$ ?v0 ?v1) ?v2) ?v3) (fun_app$ab ?v0 (fun_app$g (fun_app$h ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$h (uvw$ ?v0 ?v1) ?v2) ?v3)))) :named a41))
(assert (! (forall ((?v0 C_b_prod_c_b_prod_fun$) (?v1 A_b_c_b_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$g (fun_app$ad (uvx$ ?v0 ?v1) ?v2) ?v3) (fun_app$ab ?v0 (fun_app$g (fun_app$ad ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$ad (uvx$ ?v0 ?v1) ?v2) ?v3)))) :named a42))
(assert (! (forall ((?v0 C_b_prod_a_b_prod_fun$) (?v1 C_b_c_b_prod_fun_fun$) (?v2 C$) (?v3 B$)) (! (= (fun_app$ (fun_app$a (uvv$ ?v0 ?v1) ?v2) ?v3) (fun_app$ac ?v0 (fun_app$g (fun_app$h ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uvv$ ?v0 ?v1) ?v2) ?v3)))) :named a43))
(assert (! (forall ((?v0 C_b_prod_a_b_prod_fun$) (?v1 A_b_c_b_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$ (fun_app$s (uvy$ ?v0 ?v1) ?v2) ?v3) (fun_app$ac ?v0 (fun_app$g (fun_app$ad ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$s (uvy$ ?v0 ?v1) ?v2) ?v3)))) :named a44))
(assert (! (forall ((?v0 A_a_b_prod_prod_a_a_b_prod_prod_fun$) (?v1 C_c_b_prod_a_a_b_prod_prod_fun_fun$) (?v2 C$) (?v3 C_b_prod$)) (! (= (fun_app$v (fun_app$w (uvt$ ?v0 ?v1) ?v2) ?v3) (fun_app$bg ?v0 (fun_app$v (fun_app$w ?v1 ?v2) ?v3))) :pattern ((fun_app$v (fun_app$w (uvt$ ?v0 ?v1) ?v2) ?v3)))) :named a45))
(assert (! (forall ((?v0 A_b_prod_c_b_prod_fun$) (?v1 C_b_a_b_prod_fun_fun$) (?v2 C$) (?v3 B$)) (! (= (fun_app$g (fun_app$h (uvs$ ?v0 ?v1) ?v2) ?v3) (fun_app$ae ?v0 (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$h (uvs$ ?v0 ?v1) ?v2) ?v3)))) :named a46))
(assert (! (forall ((?v0 A_b_prod_c_b_prod_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$g (fun_app$ad (uvz$ ?v0 ?v1) ?v2) ?v3) (fun_app$ae ?v0 (fun_app$ (fun_app$s ?v1 ?v2) ?v3))) :pattern ((fun_app$g (fun_app$ad (uvz$ ?v0 ?v1) ?v2) ?v3)))) :named a47))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 C_b_a_b_prod_fun_fun$) (?v2 C$) (?v3 B$)) (! (= (fun_app$ (fun_app$a (uwb$ ?v0 ?v1) ?v2) ?v3) (fun_app$af ?v0 (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uwb$ ?v0 ?v1) ?v2) ?v3)))) :named a48))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$ (fun_app$s (uwa$ ?v0 ?v1) ?v2) ?v3) (fun_app$af ?v0 (fun_app$ (fun_app$s ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$s (uwa$ ?v0 ?v1) ?v2) ?v3)))) :named a49))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 C_c_a_a_prod_fun_fun$) (?v2 C$) (?v3 C$)) (! (= (fun_app$y (fun_app$z (uvu$ ?v0 ?v1) ?v2) ?v3) (fun_app$ap ?v0 (fun_app$y (fun_app$z ?v1 ?v2) ?v3))) :pattern ((fun_app$y (fun_app$z (uvu$ ?v0 ?v1) ?v2) ?v3)))) :named a50))
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$af uua$ ?v0) ?v0) :pattern ((fun_app$af uua$ ?v0)))) :named a51))
(assert (! (forall ((?v0 C$)) (! (= (fun_app$au uub$ ?v0) ?v0) :pattern ((fun_app$au uub$ ?v0)))) :named a52))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$av uuc$ ?v0) ?v0) :pattern ((fun_app$av uuc$ ?v0)))) :named a53))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$bd uud$ ?v0) ?v0) :pattern ((fun_app$bd uud$ ?v0)))) :named a54))
(assert (! (not (= (lzip$ (lmap$ f$ xs$) ys$) (lmap$a (case_prod$b uu$) (lzip$a xs$ ys$)))) :named a55))
(assert (! (forall ((?v0 A_b_prod_llist$)) (= (lmap$b uua$ ?v0) ?v0)) :named a56))
(assert (! (forall ((?v0 C_llist$)) (= (lmap$c uub$ ?v0) ?v0)) :named a57))
(assert (! (forall ((?v0 B_llist$)) (= (lmap$d uuc$ ?v0) ?v0)) :named a58))
(assert (! (forall ((?v0 A_llist$)) (= (lmap$e uud$ ?v0) ?v0)) :named a59))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (lzip$ (lmap$e ?v0 ?v1) (lmap$d ?v2 ?v3)) (lmap$b (case_prod$d (uue$ ?v0 ?v2)) (lzip$ ?v1 ?v3)))) :named a60))
(assert (! (forall ((?v0 A_c_fun$) (?v1 A_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (lzip$a (lmap$f ?v0 ?v1) (lmap$d ?v2 ?v3)) (lmap$g (case_prod$c (uuf$ ?v0 ?v2)) (lzip$ ?v1 ?v3)))) :named a61))
(assert (! (forall ((?v0 C_c_fun$) (?v1 C_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (lzip$a (lmap$c ?v0 ?v1) (lmap$d ?v2 ?v3)) (lmap$h (case_prod$a (uug$ ?v0 ?v2)) (lzip$a ?v1 ?v3)))) :named a62))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (lzip$ (lmap$ ?v0 ?v1) (lmap$d ?v2 ?v3)) (lmap$a (case_prod$b (uuh$ ?v0 ?v2)) (lzip$a ?v1 ?v3)))) :named a63))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_llist$) (?v2 C_a_fun$) (?v3 C_llist$)) (= (lzip$b (lmap$ ?v0 ?v1) (lmap$ ?v2 ?v3)) (lmap$i (case_prod$ (uui$ ?v0 ?v2)) (lzip$c ?v1 ?v3)))) :named a64))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_llist$) (?v2 C_b_prod_a_b_prod_fun$) (?v3 C_b_prod_llist$)) (= (lzip$d (lmap$ ?v0 ?v1) (lmap$a ?v2 ?v3)) (lmap$j (case_prod$f (uuj$ ?v0 ?v2)) (lzip$e ?v1 ?v3)))) :named a65))
(assert (! (forall ((?v0 C_b_prod_a_b_prod_fun$) (?v1 C_b_prod_llist$) (?v2 C_a_fun$) (?v3 C_llist$)) (= (lzip$f (lmap$a ?v0 ?v1) (lmap$ ?v2 ?v3)) (lmap$k (case_prod$g (uuk$ ?v0 ?v2)) (lzip$g ?v1 ?v3)))) :named a66))
(assert (! (forall ((?v0 C_b_prod_a_b_prod_fun$) (?v1 C_b_prod_llist$) (?v2 C_b_prod_a_b_prod_fun$) (?v3 C_b_prod_llist$)) (= (lzip$h (lmap$a ?v0 ?v1) (lmap$a ?v2 ?v3)) (lmap$l (case_prod$h (uul$ ?v0 ?v2)) (lzip$i ?v1 ?v3)))) :named a67))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_llist$) (?v2 C_b_fun$) (?v3 C_llist$)) (= (lzip$ (lmap$ ?v0 ?v1) (lmap$m ?v2 ?v3)) (lmap$n (case_prod$i (uum$ ?v0 ?v2)) (lzip$c ?v1 ?v3)))) :named a68))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_llist$) (?v2 B_a_fun$) (?v3 B_llist$)) (= (lzip$b (lmap$ ?v0 ?v1) (lmap$o ?v2 ?v3)) (lmap$p (case_prod$j (uun$ ?v0 ?v2)) (lzip$a ?v1 ?v3)))) :named a69))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$) (?v1 C_b_a_b_prod_fun_fun$) (?v2 C_b_prod$)) (= (fun_app$af (case_prod$d ?v0) (fun_app$ac (case_prod$b ?v1) ?v2)) (fun_app$ac (case_prod$b (uuo$ ?v0 ?v1)) ?v2))) :named a70))
(assert (! (forall ((?v0 C_b_a_b_prod_fun_fun$) (?v1 C_b_c_b_prod_fun_fun$) (?v2 C_b_prod$)) (= (fun_app$ac (case_prod$b ?v0) (fun_app$ab (case_prod$a ?v1) ?v2)) (fun_app$ac (case_prod$b (uup$ ?v0 ?v1)) ?v2))) :named a71))
(assert (! (forall ((?v0 A_a_a_a_prod_fun_fun$) (?v1 C_c_a_a_prod_fun_fun$) (?v2 C_c_prod$)) (= (fun_app$ap (case_prod$e ?v0) (fun_app$aa (case_prod$ ?v1) ?v2)) (fun_app$aa (case_prod$ (uuq$ ?v0 ?v1)) ?v2))) :named a72))
(assert (! (forall ((?v0 C_b_a_b_prod_fun_fun$) (?v1 A_b_c_b_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$ac (case_prod$b ?v0) (fun_app$ae (case_prod$c ?v1) ?v2)) (fun_app$af (case_prod$d (uur$ ?v0 ?v1)) ?v2))) :named a73))
(assert (! (forall ((?v0 C_c_a_a_prod_fun_fun$) (?v1 C_c_c_c_prod_fun_fun$) (?v2 C_c_prod$)) (= (fun_app$aa (case_prod$ ?v0) (case_prod$k ?v1 ?v2)) (fun_app$aa (case_prod$ (uus$ ?v0 ?v1)) ?v2))) :named a74))
(assert (! (forall ((?v0 C_b_c_b_prod_fun_fun$) (?v1 C_b_c_b_prod_fun_fun$) (?v2 C_b_prod$)) (= (fun_app$ab (case_prod$a ?v0) (fun_app$ab (case_prod$a ?v1) ?v2)) (fun_app$ab (case_prod$a (uut$ ?v0 ?v1)) ?v2))) :named a75))
(assert (! (forall ((?v0 C_b_c_b_prod_fun_fun$) (?v1 A_b_c_b_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$ab (case_prod$a ?v0) (fun_app$ae (case_prod$c ?v1) ?v2)) (fun_app$ae (case_prod$c (uuu$ ?v0 ?v1)) ?v2))) :named a76))
(assert (! (forall ((?v0 A_b_c_b_prod_fun_fun$) (?v1 C_b_a_b_prod_fun_fun$) (?v2 C_b_prod$)) (= (fun_app$ae (case_prod$c ?v0) (fun_app$ac (case_prod$b ?v1) ?v2)) (fun_app$ab (case_prod$a (uuv$ ?v0 ?v1)) ?v2))) :named a77))
(assert (! (forall ((?v0 A_b_c_b_prod_fun_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$ae (case_prod$c ?v0) (fun_app$af (case_prod$d ?v1) ?v2)) (fun_app$ae (case_prod$c (uuw$ ?v0 ?v1)) ?v2))) :named a78))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$af (case_prod$d ?v0) (fun_app$af (case_prod$d ?v1) ?v2)) (fun_app$af (case_prod$d (uux$ ?v0 ?v1)) ?v2))) :named a79))
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$af (case_prod$d uuy$) ?v0) ?v0) :pattern ((fun_app$af (case_prod$d uuy$) ?v0)))) :named a80))
(assert (! (forall ((?v0 A_a_prod$)) (! (= (fun_app$ap (case_prod$e uuz$) ?v0) ?v0) :pattern ((fun_app$ap (case_prod$e uuz$) ?v0)))) :named a81))
(assert (! (forall ((?v0 C_b_prod$)) (! (= (fun_app$ab (case_prod$a uva$) ?v0) ?v0) :pattern ((fun_app$ab (case_prod$a uva$) ?v0)))) :named a82))
(assert (! (forall ((?v0 A_b_prod_a_prod$)) (! (= (case_prod$l uvb$ ?v0) ?v0) :pattern ((case_prod$l uvb$ ?v0)))) :named a83))
(assert (! (forall ((?v0 A_a_b_prod_prod$)) (! (= (fun_app$bg (case_prod$m uvc$) ?v0) ?v0) :pattern ((fun_app$bg (case_prod$m uvc$) ?v0)))) :named a84))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$)) (! (= (case_prod$n uvd$ ?v0) ?v0) :pattern ((case_prod$n uvd$ ?v0)))) :named a85))
(assert (! (forall ((?v0 B_c_prod$)) (! (= (case_prod$o uve$ ?v0) ?v0) :pattern ((case_prod$o uve$ ?v0)))) :named a86))
(assert (! (forall ((?v0 B_b_prod$)) (! (= (case_prod$p uvf$ ?v0) ?v0) :pattern ((case_prod$p uvf$ ?v0)))) :named a87))
(assert (! (forall ((?v0 B_a_prod$)) (! (= (case_prod$q uvg$ ?v0) ?v0) :pattern ((case_prod$q uvg$ ?v0)))) :named a88))
(assert (! (forall ((?v0 A_c_prod$)) (! (= (case_prod$r uvh$ ?v0) ?v0) :pattern ((case_prod$r uvh$ ?v0)))) :named a89))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a90))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a91))
(assert (! (forall ((?v0 C$) (?v1 B$) (?v2 C$) (?v3 B$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a92))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$) (?v2 A_b_prod$) (?v3 A$)) (= (= (pair$f ?v0 ?v1) (pair$f ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a93))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A$) (?v3 A_b_prod$)) (= (= (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a94))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod$) (?v3 A_b_prod$)) (= (= (pair$h ?v0 ?v1) (pair$h ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a95))
(assert (! (forall ((?v0 B$) (?v1 C$) (?v2 B$) (?v3 C$)) (= (= (pair$j ?v0 ?v1) (pair$j ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a96))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$) (?v3 B$)) (= (= (pair$k ?v0 ?v1) (pair$k ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a97))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (= (= (pair$l ?v0 ?v1) (pair$l ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a98))
(assert (! (forall ((?v0 A$) (?v1 C$) (?v2 A$) (?v3 C$)) (= (= (pair$m ?v0 ?v1) (pair$m ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a99))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a100))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a101))
(assert (! (forall ((?v0 C$) (?v1 B$) (?v2 C$) (?v3 B$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a102))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$) (?v2 A_b_prod$) (?v3 A$)) (= (= (pair$f ?v0 ?v1) (pair$f ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a103))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A$) (?v3 A_b_prod$)) (= (= (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a104))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod$) (?v3 A_b_prod$)) (= (= (pair$h ?v0 ?v1) (pair$h ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a105))
(assert (! (forall ((?v0 B$) (?v1 C$) (?v2 B$) (?v3 C$)) (= (= (pair$j ?v0 ?v1) (pair$j ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a106))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B$) (?v3 B$)) (= (= (pair$k ?v0 ?v1) (pair$k ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a107))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (= (= (pair$l ?v0 ?v1) (pair$l ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a108))
(assert (! (forall ((?v0 A$) (?v1 C$) (?v2 A$) (?v3 C$)) (= (= (pair$m ?v0 ?v1) (pair$m ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a109))
(assert (! (forall ((?v0 C_b_prod_a_b_prod_fun$)) (= (case_prod$b (uvi$ ?v0)) ?v0)) :named a110))
(assert (! (forall ((?v0 C_c_prod_a_a_prod_fun$)) (= (case_prod$ (uvj$ ?v0)) ?v0)) :named a111))
(assert (! (forall ((?v0 C_b_prod_c_b_prod_fun$)) (= (case_prod$a (uvk$ ?v0)) ?v0)) :named a112))
(assert (! (forall ((?v0 A_b_prod_c_b_prod_fun$)) (= (case_prod$c (uvl$ ?v0)) ?v0)) :named a113))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$)) (= (case_prod$d (uvm$ ?v0)) ?v0)) :named a114))
(assert (! (forall ((?v0 C_c_b_prod_prod_a_a_b_prod_prod_fun$)) (= (case_prod$f (uvn$ ?v0)) ?v0)) :named a115))
(assert (! (forall ((?v0 A_a_prod_c_a_prod_fun$)) (= (case_prod$s (uvo$ ?v0)) ?v0)) :named a116))
(assert (! (forall ((?v0 A_a_prod_a_c_prod_fun$)) (= (case_prod$t (uvp$ ?v0)) ?v0)) :named a117))
(assert (! (forall ((?v0 A_a_prod_a_b_prod_fun$)) (= (case_prod$u (uvq$ ?v0)) ?v0)) :named a118))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$)) (= (case_prod$e (uvr$ ?v0)) ?v0)) :named a119))
(assert (! (forall ((?v0 C_b_a_b_prod_fun_fun$) (?v1 C_b_prod_a_b_prod_fun$)) (=> (forall ((?v2 C$) (?v3 B$)) (= (fun_app$ (fun_app$a ?v0 ?v2) ?v3) (fun_app$ac ?v1 (pair$a ?v2 ?v3)))) (= (case_prod$b ?v0) ?v1))) :named a120))
(assert (! (forall ((?v0 C_c_a_a_prod_fun_fun$) (?v1 C_c_prod_a_a_prod_fun$)) (=> (forall ((?v2 C$) (?v3 C$)) (= (fun_app$y (fun_app$z ?v0 ?v2) ?v3) (fun_app$aa ?v1 (pair$c ?v2 ?v3)))) (= (case_prod$ ?v0) ?v1))) :named a121))
(assert (! (forall ((?v0 C_b_c_b_prod_fun_fun$) (?v1 C_b_prod_c_b_prod_fun$)) (=> (forall ((?v2 C$) (?v3 B$)) (= (fun_app$g (fun_app$h ?v0 ?v2) ?v3) (fun_app$ab ?v1 (pair$a ?v2 ?v3)))) (= (case_prod$a ?v0) ?v1))) :named a122))
(assert (! (forall ((?v0 A_b_c_b_prod_fun_fun$) (?v1 A_b_prod_c_b_prod_fun$)) (=> (forall ((?v2 A$) (?v3 B$)) (= (fun_app$g (fun_app$ad ?v0 ?v2) ?v3) (fun_app$ae ?v1 (pair$ ?v2 ?v3)))) (= (case_prod$c ?v0) ?v1))) :named a123))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$) (?v1 A_b_prod_a_b_prod_fun$)) (=> (forall ((?v2 A$) (?v3 B$)) (= (fun_app$ (fun_app$s ?v0 ?v2) ?v3) (fun_app$af ?v1 (pair$ ?v2 ?v3)))) (= (case_prod$d ?v0) ?v1))) :named a124))
(assert (! (forall ((?v0 C_c_b_prod_a_a_b_prod_prod_fun_fun$) (?v1 C_c_b_prod_prod_a_a_b_prod_prod_fun$)) (=> (forall ((?v2 C$) (?v3 C_b_prod$)) (= (fun_app$v (fun_app$w ?v0 ?v2) ?v3) (fun_app$x ?v1 (pair$e ?v2 ?v3)))) (= (case_prod$f ?v0) ?v1))) :named a125))
(assert (! (forall ((?v0 A_a_c_a_prod_fun_fun$) (?v1 A_a_prod_c_a_prod_fun$)) (=> (forall ((?v2 A$) (?v3 A$)) (= (fun_app$ag (fun_app$ah ?v0 ?v2) ?v3) (fun_app$ai ?v1 (pair$b ?v2 ?v3)))) (= (case_prod$s ?v0) ?v1))) :named a126))
(assert (! (forall ((?v0 A_a_a_c_prod_fun_fun$) (?v1 A_a_prod_a_c_prod_fun$)) (=> (forall ((?v2 A$) (?v3 A$)) (= (fun_app$aj (fun_app$ak ?v0 ?v2) ?v3) (fun_app$al ?v1 (pair$b ?v2 ?v3)))) (= (case_prod$t ?v0) ?v1))) :named a127))
(assert (! (forall ((?v0 A_a_a_b_prod_fun_fun$) (?v1 A_a_prod_a_b_prod_fun$)) (=> (forall ((?v2 A$) (?v3 A$)) (= (fun_app$am (fun_app$an ?v0 ?v2) ?v3) (fun_app$ao ?v1 (pair$b ?v2 ?v3)))) (= (case_prod$u ?v0) ?v1))) :named a128))
(assert (! (forall ((?v0 A_a_a_a_prod_fun_fun$) (?v1 A_a_prod_a_a_prod_fun$)) (=> (forall ((?v2 A$) (?v3 A$)) (= (fun_app$t (fun_app$u ?v0 ?v2) ?v3) (fun_app$ap ?v1 (pair$b ?v2 ?v3)))) (= (case_prod$e ?v0) ?v1))) :named a129))
(assert (! (forall ((?v0 C_b_a_b_prod_fun_fun$) (?v1 C$) (?v2 B$)) (! (= (fun_app$ac (case_prod$b ?v0) (pair$a ?v1 ?v2)) (fun_app$ (fun_app$a ?v0 ?v1) ?v2)) :pattern ((fun_app$ac (case_prod$b ?v0) (pair$a ?v1 ?v2))))) :named a130))
(assert (! (forall ((?v0 C_c_a_a_prod_fun_fun$) (?v1 C$) (?v2 C$)) (! (= (fun_app$aa (case_prod$ ?v0) (pair$c ?v1 ?v2)) (fun_app$y (fun_app$z ?v0 ?v1) ?v2)) :pattern ((fun_app$aa (case_prod$ ?v0) (pair$c ?v1 ?v2))))) :named a131))
(assert (! (forall ((?v0 C_b_c_b_prod_fun_fun$) (?v1 C$) (?v2 B$)) (! (= (fun_app$ab (case_prod$a ?v0) (pair$a ?v1 ?v2)) (fun_app$g (fun_app$h ?v0 ?v1) ?v2)) :pattern ((fun_app$ab (case_prod$a ?v0) (pair$a ?v1 ?v2))))) :named a132))
(assert (! (forall ((?v0 A_b_c_b_prod_fun_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$ae (case_prod$c ?v0) (pair$ ?v1 ?v2)) (fun_app$g (fun_app$ad ?v0 ?v1) ?v2)) :pattern ((fun_app$ae (case_prod$c ?v0) (pair$ ?v1 ?v2))))) :named a133))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$af (case_prod$d ?v0) (pair$ ?v1 ?v2)) (fun_app$ (fun_app$s ?v0 ?v1) ?v2)) :pattern ((fun_app$af (case_prod$d ?v0) (pair$ ?v1 ?v2))))) :named a134))
(assert (! (forall ((?v0 C_c_b_prod_a_a_b_prod_prod_fun_fun$) (?v1 C$) (?v2 C_b_prod$)) (! (= (fun_app$x (case_prod$f ?v0) (pair$e ?v1 ?v2)) (fun_app$v (fun_app$w ?v0 ?v1) ?v2)) :pattern ((fun_app$x (case_prod$f ?v0) (pair$e ?v1 ?v2))))) :named a135))
(assert (! (forall ((?v0 A_a_c_a_prod_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$ai (case_prod$s ?v0) (pair$b ?v1 ?v2)) (fun_app$ag (fun_app$ah ?v0 ?v1) ?v2)) :pattern ((fun_app$ai (case_prod$s ?v0) (pair$b ?v1 ?v2))))) :named a136))
(assert (! (forall ((?v0 A_a_a_c_prod_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$al (case_prod$t ?v0) (pair$b ?v1 ?v2)) (fun_app$aj (fun_app$ak ?v0 ?v1) ?v2)) :pattern ((fun_app$al (case_prod$t ?v0) (pair$b ?v1 ?v2))))) :named a137))
(assert (! (forall ((?v0 A_a_a_b_prod_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$ao (case_prod$u ?v0) (pair$b ?v1 ?v2)) (fun_app$am (fun_app$an ?v0 ?v1) ?v2)) :pattern ((fun_app$ao (case_prod$u ?v0) (pair$b ?v1 ?v2))))) :named a138))
(assert (! (forall ((?v0 A_a_a_a_prod_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$ap (case_prod$e ?v0) (pair$b ?v1 ?v2)) (fun_app$t (fun_app$u ?v0 ?v1) ?v2)) :pattern ((fun_app$ap (case_prod$e ?v0) (pair$b ?v1 ?v2))))) :named a139))
(assert (! (forall ((?v0 C_b_a_b_prod_fun_fun$) (?v1 C$) (?v2 B$)) (! (= (fun_app$ac (case_prod$b ?v0) (pair$a ?v1 ?v2)) (fun_app$ (fun_app$a ?v0 ?v1) ?v2)) :pattern ((fun_app$ac (case_prod$b ?v0) (pair$a ?v1 ?v2))))) :named a140))
(assert (! (forall ((?v0 C_c_a_a_prod_fun_fun$) (?v1 C$) (?v2 C$)) (! (= (fun_app$aa (case_prod$ ?v0) (pair$c ?v1 ?v2)) (fun_app$y (fun_app$z ?v0 ?v1) ?v2)) :pattern ((fun_app$aa (case_prod$ ?v0) (pair$c ?v1 ?v2))))) :named a141))
(assert (! (forall ((?v0 C_b_c_b_prod_fun_fun$) (?v1 C$) (?v2 B$)) (! (= (fun_app$ab (case_prod$a ?v0) (pair$a ?v1 ?v2)) (fun_app$g (fun_app$h ?v0 ?v1) ?v2)) :pattern ((fun_app$ab (case_prod$a ?v0) (pair$a ?v1 ?v2))))) :named a142))
(assert (! (forall ((?v0 A_b_c_b_prod_fun_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$ae (case_prod$c ?v0) (pair$ ?v1 ?v2)) (fun_app$g (fun_app$ad ?v0 ?v1) ?v2)) :pattern ((fun_app$ae (case_prod$c ?v0) (pair$ ?v1 ?v2))))) :named a143))
(assert (! (forall ((?v0 A_b_a_b_prod_fun_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$af (case_prod$d ?v0) (pair$ ?v1 ?v2)) (fun_app$ (fun_app$s ?v0 ?v1) ?v2)) :pattern ((fun_app$af (case_prod$d ?v0) (pair$ ?v1 ?v2))))) :named a144))
(assert (! (forall ((?v0 C_c_b_prod_a_a_b_prod_prod_fun_fun$) (?v1 C$) (?v2 C_b_prod$)) (! (= (fun_app$x (case_prod$f ?v0) (pair$e ?v1 ?v2)) (fun_app$v (fun_app$w ?v0 ?v1) ?v2)) :pattern ((fun_app$x (case_prod$f ?v0) (pair$e ?v1 ?v2))))) :named a145))
(assert (! (forall ((?v0 A_a_c_a_prod_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$ai (case_prod$s ?v0) (pair$b ?v1 ?v2)) (fun_app$ag (fun_app$ah ?v0 ?v1) ?v2)) :pattern ((fun_app$ai (case_prod$s ?v0) (pair$b ?v1 ?v2))))) :named a146))
(assert (! (forall ((?v0 A_a_a_c_prod_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$al (case_prod$t ?v0) (pair$b ?v1 ?v2)) (fun_app$aj (fun_app$ak ?v0 ?v1) ?v2)) :pattern ((fun_app$al (case_prod$t ?v0) (pair$b ?v1 ?v2))))) :named a147))
(assert (! (forall ((?v0 A_a_a_b_prod_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$ao (case_prod$u ?v0) (pair$b ?v1 ?v2)) (fun_app$am (fun_app$an ?v0 ?v1) ?v2)) :pattern ((fun_app$ao (case_prod$u ?v0) (pair$b ?v1 ?v2))))) :named a148))
(assert (! (forall ((?v0 A_a_a_a_prod_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$ap (case_prod$e ?v0) (pair$b ?v1 ?v2)) (fun_app$t (fun_app$u ?v0 ?v1) ?v2)) :pattern ((fun_app$ap (case_prod$e ?v0) (pair$b ?v1 ?v2))))) :named a149))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_a_a_prod_fun_fun$) (?v2 A_a_a_a_prod_fun_fun$) (?v3 A_a_prod$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (= (pair$b ?v4 ?v5) ?v0) (= (fun_app$t (fun_app$u ?v1 ?v4) ?v5) (fun_app$t (fun_app$u ?v2 ?v4) ?v5)))) (= ?v3 ?v0)) (= (fun_app$ap (case_prod$e ?v1) ?v3) (fun_app$ap (case_prod$e ?v2) ?v0)))) :named a150))
(assert (! (forall ((?v0 C_c_b_prod_prod$) (?v1 C_c_b_prod_a_a_b_prod_prod_fun_fun$) (?v2 C_c_b_prod_a_a_b_prod_prod_fun_fun$) (?v3 C_c_b_prod_prod$)) (=> (and (forall ((?v4 C$) (?v5 C_b_prod$)) (=> (= (pair$e ?v4 ?v5) ?v0) (= (fun_app$v (fun_app$w ?v1 ?v4) ?v5) (fun_app$v (fun_app$w ?v2 ?v4) ?v5)))) (= ?v3 ?v0)) (= (fun_app$x (case_prod$f ?v1) ?v3) (fun_app$x (case_prod$f ?v2) ?v0)))) :named a151))
(assert (! (forall ((?v0 C_c_prod$) (?v1 C_c_a_a_prod_fun_fun$) (?v2 C_c_a_a_prod_fun_fun$) (?v3 C_c_prod$)) (=> (and (forall ((?v4 C$) (?v5 C$)) (=> (= (pair$c ?v4 ?v5) ?v0) (= (fun_app$y (fun_app$z ?v1 ?v4) ?v5) (fun_app$y (fun_app$z ?v2 ?v4) ?v5)))) (= ?v3 ?v0)) (= (fun_app$aa (case_prod$ ?v1) ?v3) (fun_app$aa (case_prod$ ?v2) ?v0)))) :named a152))
(assert (! (forall ((?v0 C_b_prod$) (?v1 C_b_c_b_prod_fun_fun$) (?v2 C_b_c_b_prod_fun_fun$) (?v3 C_b_prod$)) (=> (and (forall ((?v4 C$) (?v5 B$)) (=> (= (pair$a ?v4 ?v5) ?v0) (= (fun_app$g (fun_app$h ?v1 ?v4) ?v5) (fun_app$g (fun_app$h ?v2 ?v4) ?v5)))) (= ?v3 ?v0)) (= (fun_app$ab (case_prod$a ?v1) ?v3) (fun_app$ab (case_prod$a ?v2) ?v0)))) :named a153))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_c_b_prod_fun_fun$) (?v2 A_b_c_b_prod_fun_fun$) (?v3 A_b_prod$)) (=> (and (forall ((?v4 A$) (?v5 B$)) (=> (= (pair$ ?v4 ?v5) ?v0) (= (fun_app$g (fun_app$ad ?v1 ?v4) ?v5) (fun_app$g (fun_app$ad ?v2 ?v4) ?v5)))) (= ?v3 ?v0)) (= (fun_app$ae (case_prod$c ?v1) ?v3) (fun_app$ae (case_prod$c ?v2) ?v0)))) :named a154))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A_b_a_b_prod_fun_fun$) (?v3 A_b_prod$)) (=> (and (forall ((?v4 A$) (?v5 B$)) (=> (= (pair$ ?v4 ?v5) ?v0) (= (fun_app$ (fun_app$s ?v1 ?v4) ?v5) (fun_app$ (fun_app$s ?v2 ?v4) ?v5)))) (= ?v3 ?v0)) (= (fun_app$af (case_prod$d ?v1) ?v3) (fun_app$af (case_prod$d ?v2) ?v0)))) :named a155))
(assert (! (forall ((?v0 C_b_prod$) (?v1 C_b_a_b_prod_fun_fun$) (?v2 C_b_a_b_prod_fun_fun$) (?v3 C_b_prod$)) (=> (and (forall ((?v4 C$) (?v5 B$)) (=> (= (pair$a ?v4 ?v5) ?v0) (= (fun_app$ (fun_app$a ?v1 ?v4) ?v5) (fun_app$ (fun_app$a ?v2 ?v4) ?v5)))) (= ?v3 ?v0)) (= (fun_app$ac (case_prod$b ?v1) ?v3) (fun_app$ac (case_prod$b ?v2) ?v0)))) :named a156))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$) (?v1 C_c_b_prod_a_a_b_prod_prod_fun_fun$) (?v2 C_c_b_prod_prod$)) (=> (and (fun_app$bh ?v0 (fun_app$x (case_prod$f ?v1) ?v2)) (forall ((?v3 C$) (?v4 C_b_prod$)) (=> (and (= ?v2 (pair$e ?v3 ?v4)) (fun_app$bh ?v0 (fun_app$v (fun_app$w ?v1 ?v3) ?v4))) false))) false)) :named a157))
(assert (! (forall ((?v0 A_a_prod_bool_fun$) (?v1 C_c_a_a_prod_fun_fun$) (?v2 C_c_prod$)) (=> (and (fun_app$bi ?v0 (fun_app$aa (case_prod$ ?v1) ?v2)) (forall ((?v3 C$) (?v4 C$)) (=> (and (= ?v2 (pair$c ?v3 ?v4)) (fun_app$bi ?v0 (fun_app$y (fun_app$z ?v1 ?v3) ?v4))) false))) false)) :named a158))
(assert (! (forall ((?v0 C_b_prod_bool_fun$) (?v1 C_b_c_b_prod_fun_fun$) (?v2 C_b_prod$)) (=> (and (fun_app$bj ?v0 (fun_app$ab (case_prod$a ?v1) ?v2)) (forall ((?v3 C$) (?v4 B$)) (=> (and (= ?v2 (pair$a ?v3 ?v4)) (fun_app$bj ?v0 (fun_app$g (fun_app$h ?v1 ?v3) ?v4))) false))) false)) :named a159))
(assert (! (forall ((?v0 C_b_prod_bool_fun$) (?v1 A_b_c_b_prod_fun_fun$) (?v2 A_b_prod$)) (=> (and (fun_app$bj ?v0 (fun_app$ae (case_prod$c ?v1) ?v2)) (forall ((?v3 A$) (?v4 B$)) (=> (and (= ?v2 (pair$ ?v3 ?v4)) (fun_app$bj ?v0 (fun_app$g (fun_app$ad ?v1 ?v3) ?v4))) false))) false)) :named a160))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A_b_prod$)) (=> (and (fun_app$bk ?v0 (fun_app$af (case_prod$d ?v1) ?v2)) (forall ((?v3 A$) (?v4 B$)) (=> (and (= ?v2 (pair$ ?v3 ?v4)) (fun_app$bk ?v0 (fun_app$ (fun_app$s ?v1 ?v3) ?v4))) false))) false)) :named a161))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 C_b_a_b_prod_fun_fun$) (?v2 C_b_prod$)) (=> (and (fun_app$bk ?v0 (fun_app$ac (case_prod$b ?v1) ?v2)) (forall ((?v3 C$) (?v4 B$)) (=> (and (= ?v2 (pair$a ?v3 ?v4)) (fun_app$bk ?v0 (fun_app$ (fun_app$a ?v1 ?v3) ?v4))) false))) false)) :named a162))
(assert (! (forall ((?v0 A_b_prod_c_b_prod_fun$) (?v1 C_b_a_b_prod_fun_fun$) (?v2 C_b_prod$)) (= (fun_app$ae ?v0 (fun_app$ac (case_prod$b ?v1) ?v2)) (fun_app$ab (case_prod$a (uvs$ ?v0 ?v1)) ?v2))) :named a163))
(assert (! (forall ((?v0 A_a_b_prod_prod_a_a_b_prod_prod_fun$) (?v1 C_c_b_prod_a_a_b_prod_prod_fun_fun$) (?v2 C_c_b_prod_prod$)) (= (fun_app$bg ?v0 (fun_app$x (case_prod$f ?v1) ?v2)) (fun_app$x (case_prod$f (uvt$ ?v0 ?v1)) ?v2))) :named a164))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 C_c_a_a_prod_fun_fun$) (?v2 C_c_prod$)) (= (fun_app$ap ?v0 (fun_app$aa (case_prod$ ?v1) ?v2)) (fun_app$aa (case_prod$ (uvu$ ?v0 ?v1)) ?v2))) :named a165))
(assert (! (forall ((?v0 C_b_prod_a_b_prod_fun$) (?v1 C_b_c_b_prod_fun_fun$) (?v2 C_b_prod$)) (= (fun_app$ac ?v0 (fun_app$ab (case_prod$a ?v1) ?v2)) (fun_app$ac (case_prod$b (uvv$ ?v0 ?v1)) ?v2))) :named a166))
(assert (! (forall ((?v0 C_b_prod_c_b_prod_fun$) (?v1 C_b_c_b_prod_fun_fun$) (?v2 C_b_prod$)) (= (fun_app$ab ?v0 (fun_app$ab (case_prod$a ?v1) ?v2)) (fun_app$ab (case_prod$a (uvw$ ?v0 ?v1)) ?v2))) :named a167))
(assert (! (forall ((?v0 C_b_prod_c_b_prod_fun$) (?v1 A_b_c_b_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$ab ?v0 (fun_app$ae (case_prod$c ?v1) ?v2)) (fun_app$ae (case_prod$c (uvx$ ?v0 ?v1)) ?v2))) :named a168))
(assert (! (forall ((?v0 C_b_prod_a_b_prod_fun$) (?v1 A_b_c_b_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$ac ?v0 (fun_app$ae (case_prod$c ?v1) ?v2)) (fun_app$af (case_prod$d (uvy$ ?v0 ?v1)) ?v2))) :named a169))
(assert (! (forall ((?v0 A_b_prod_c_b_prod_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$ae ?v0 (fun_app$af (case_prod$d ?v1) ?v2)) (fun_app$ae (case_prod$c (uvz$ ?v0 ?v1)) ?v2))) :named a170))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A_b_prod$)) (= (fun_app$af ?v0 (fun_app$af (case_prod$d ?v1) ?v2)) (fun_app$af (case_prod$d (uwa$ ?v0 ?v1)) ?v2))) :named a171))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$) (?v1 C_b_a_b_prod_fun_fun$) (?v2 C_b_prod$)) (= (fun_app$af ?v0 (fun_app$ac (case_prod$b ?v1) ?v2)) (fun_app$ac (case_prod$b (uwb$ ?v0 ?v1)) ?v2))) :named a172))
(check-sat)
;(get-unsat-core)
