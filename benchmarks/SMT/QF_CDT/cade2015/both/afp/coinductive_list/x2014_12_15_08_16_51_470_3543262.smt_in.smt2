; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 607
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun x$ () A$)
(declare-fun na$ () Enat$)
(declare-fun xsa$ () A_llist$)
(declare-fun ldrop$ (Enat$) A_llist_a_llist_fun$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$b (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$c (A_bool_fun$ A$) Bool)
(declare-fun pred_llist$ (A_bool_fun$ A_llist$) Bool)
(assert (! (not (= (= (fun_app$ (ldrop$ na$) (lCons$ x$ xsa$)) lNil$) (less_eq$ (llength$ (lCons$ x$ xsa$)) na$))) :named a0))
(assert (! (lfinite$ xsa$) :named a1))
(assert (! (forall ((?v0 Enat$)) (= (= (fun_app$ (ldrop$ ?v0) xsa$) lNil$) (less_eq$ (llength$ xsa$) ?v0))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a3))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$ (ldrop$ ?v0) lNil$) lNil$) :pattern ((ldrop$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))) :named a5))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false))) false)) :named a6))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (less_eq$ ?v3 ?v4) (fun_app$a (fun_app$b ?v0 ?v3) ?v4))) (=> (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (fun_app$a (fun_app$b ?v0 ?v2) ?v1))) (fun_app$a (fun_app$b ?v0 ?v2) ?v1))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (not (= lNil$ (lCons$ ?v0 ?v1)))) :named a8))
(assert (! (= (lfinite$ lNil$) true) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (or (= ?v0 lNil$) (exists ((?v1 A_llist$) (?v2 A$)) (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$ ?v1)))))) :named a12))
(assert (! (forall ((?v0 A_llist$)) (=> (and (lfinite$ ?v0) (and (=> (= ?v0 lNil$) false) (forall ((?v1 A_llist$) (?v2 A$)) (=> (and (= ?v0 (lCons$ ?v2 ?v1)) (lfinite$ ?v1)) false)))) false)) :named a13))
(assert (! (forall ((?v0 Enat$)) (less_eq$ ?v0 ?v0)) :named a14))
(assert (! (lfinite$ lNil$) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (lfinite$ ?v0) (lfinite$ (lCons$ ?v1 ?v0)))) :named a16))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2)) (and (fun_app$c ?v0 ?v1) (pred_llist$ ?v0 ?v2))) :pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2))))) :named a17))
(check-sat)
;(get-unsat-core)
