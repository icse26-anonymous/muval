; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 651
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (Nat_llist$ (lNil$a) (lCons$a (lhd$a Nat$) (ltl$a Nat_llist$)))))
(declare-fun f$ () Nat_a_fun$)
(declare-fun n$ () Nat$)
(declare-fun uu$ () Nat_a_fun$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun uua$ () Nat_nat_fun$)
(declare-fun lmap$ (Nat_a_fun$ Nat_llist$) A_llist$)
(declare-fun plus$ (Nat$) Nat_nat_fun$)
(declare-fun zero$ () Nat$)
(declare-fun lmap$a (Nat_nat_fun$ Nat_llist$) Nat_llist$)
(declare-fun compow$ (Nat$) Nat_nat_fun_nat_nat_fun_fun$)
(declare-fun fun_app$ (Nat_a_fun$ Nat$) A$)
(declare-fun fun_app$a (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$b (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun$) Nat_nat_fun$)
(declare-fun iterates$ (Nat_nat_fun$ Nat$) Nat_llist$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (fun_app$ f$ (fun_app$a (plus$ ?v0) n$))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a uua$ ?v0) ?v0) :pattern ((fun_app$a uua$ ?v0)))) :named a1))
(assert (! (not (= (lmap$ f$ (iterates$ suc$ (fun_app$a (fun_app$b (compow$ n$) suc$) zero$))) (lmap$ uu$ (iterates$ suc$ zero$)))) :named a2))
(assert (! (forall ((?v0 Nat_llist$)) (= (lmap$a uua$ ?v0) ?v0)) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (fun_app$b (compow$ ?v0) suc$) ?v1) (fun_app$a (plus$ ?v1) ?v0)) :pattern ((fun_app$a (fun_app$b (compow$ ?v0) suc$) ?v1)))) :named a4))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$)) (= (lmap$a ?v0 (iterates$ ?v0 ?v1)) (iterates$ ?v0 (fun_app$a ?v0 ?v1)))) :named a5))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$b (compow$ ?v0) suc$) (plus$ ?v0)) :pattern ((compow$ ?v0)))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$a (plus$ ?v0) (fun_app$a suc$ ?v1)) (fun_app$a suc$ (fun_app$a (plus$ ?v0) ?v1))) :pattern ((fun_app$a (plus$ ?v0) (fun_app$a suc$ ?v1))))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a (plus$ ?v0) ?v1) zero$) (and (= ?v0 zero$) (= ?v1 zero$)))) :named a8))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a (plus$ ?v0) zero$) ?v0) :pattern ((plus$ ?v0)))) :named a9))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$a (plus$ ?v0) zero$) ?v0)) :named a10))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$a (plus$ ?v0) zero$) ?v0)) :named a11))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$a (plus$ zero$) ?v0) ?v0)) :named a12))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$a (plus$ zero$) ?v0) ?v0)) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a (plus$ ?v0) ?v1) (fun_app$a suc$ zero$)) (or (and (= ?v0 (fun_app$a suc$ zero$)) (= ?v1 zero$)) (and (= ?v0 zero$) (= ?v1 (fun_app$a suc$ zero$)))))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$a suc$ zero$) (fun_app$a (plus$ ?v0) ?v1)) (or (and (= ?v0 (fun_app$a suc$ zero$)) (= ?v1 zero$)) (and (= ?v0 zero$) (= ?v1 (fun_app$a suc$ zero$)))))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (fun_app$a (plus$ ?v0) ?v1) (fun_app$a (plus$ ?v0) ?v2)) (= ?v1 ?v2))) :named a16))
(check-sat)
;(get-unsat-core)
