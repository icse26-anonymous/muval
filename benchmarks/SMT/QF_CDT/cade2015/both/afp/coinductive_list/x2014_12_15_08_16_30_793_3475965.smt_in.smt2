; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 419
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_a_llist_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Nat_a_llist_fun_bool_fun$ 0)
(declare-sort A_llist_nat_a_llist_fun_fun$ 0)
(declare-sort Nat_a_llist_fun_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort Nat_a_llist_fun_nat_a_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_a_llist_nat_a_llist_fun_fun_fun$ 0)
(declare-sort A_llist_nat_a_llist_fun_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_fun$ 0)
(declare-sort Nat_a_llist_fun_a_llist_fun_nat_a_llist_fun_a_llist_fun_fun$ 0)
(declare-sort Nat_a_llist_fun_a_llist_fun_nat_a_llist_fun_nat_a_llist_fun_fun_fun$ 0)
(declare-sort Nat_a_llist_fun_nat_a_llist_fun_fun_nat_a_llist_fun_a_llist_fun_fun$ 0)
(declare-sort Nat_a_llist_fun_nat_a_llist_fun_fun_nat_a_llist_fun_nat_a_llist_fun_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun n$ () Nat$)
(declare-fun uu$ () A_llist_nat_a_llist_fun_fun$)
(declare-fun uua$ (A_llist_a_llist_fun$) Nat_a_llist_fun_a_llist_fun_nat_a_llist_fun_a_llist_fun_fun$)
(declare-fun uub$ (Nat_a_llist_fun_a_llist_fun$) Nat_a_llist_fun_nat_a_llist_fun_fun_nat_a_llist_fun_a_llist_fun_fun$)
(declare-fun uuc$ (Nat_a_llist_fun_a_llist_fun$) A_llist_nat_a_llist_fun_fun_a_llist_a_llist_fun_fun$)
(declare-fun uud$ (A_llist_a_llist_fun$) A_llist_a_llist_fun_a_llist_a_llist_fun_fun$)
(declare-fun uue$ (A_llist$) Nat_a_llist_fun_a_llist_fun$)
(declare-fun uuf$ (A_llist$) A_llist_a_llist_fun$)
(declare-fun uug$ (A_llist_nat_a_llist_fun_fun$) Nat_a_llist_fun_a_llist_fun_nat_a_llist_fun_nat_a_llist_fun_fun_fun$)
(declare-fun uuh$ (Nat_a_llist_fun_nat_a_llist_fun_fun$) Nat_a_llist_fun_nat_a_llist_fun_fun_nat_a_llist_fun_nat_a_llist_fun_fun_fun$)
(declare-fun uui$ (Nat_a_llist_fun_nat_a_llist_fun_fun$) A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_fun$)
(declare-fun uuj$ (A_llist_nat_a_llist_fun_fun$) A_llist_a_llist_fun_a_llist_nat_a_llist_fun_fun_fun$)
(declare-fun ldropn$ (Nat$) A_llist_a_llist_fun$)
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$) A_llist$)
(declare-fun fun_ord$ (A_llist_a_llist_bool_fun_fun$) Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_nat_a_llist_fun_fun$ A_llist$) Nat_a_llist_fun$)
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$c (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$d (Nat_a_llist_fun_a_llist_fun$ Nat_a_llist_fun$) A_llist$)
(declare-fun fun_app$e (Nat_a_llist_fun_a_llist_fun_nat_a_llist_fun_a_llist_fun_fun$ Nat_a_llist_fun_a_llist_fun$) Nat_a_llist_fun_a_llist_fun$)
(declare-fun fun_app$f (A_llist_a_llist_fun_a_llist_nat_a_llist_fun_fun_fun$ A_llist_a_llist_fun$) A_llist_nat_a_llist_fun_fun$)
(declare-fun fun_app$g (Nat_a_llist_fun_nat_a_llist_fun_fun$ Nat_a_llist_fun$) Nat_a_llist_fun$)
(declare-fun fun_app$h (Nat_a_llist_fun_a_llist_fun_nat_a_llist_fun_nat_a_llist_fun_fun_fun$ Nat_a_llist_fun_a_llist_fun$) Nat_a_llist_fun_nat_a_llist_fun_fun$)
(declare-fun fun_app$i (A_llist_nat_a_llist_fun_fun_a_llist_a_llist_fun_fun$ A_llist_nat_a_llist_fun_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$j (Nat_a_llist_fun_nat_a_llist_fun_fun_nat_a_llist_fun_a_llist_fun_fun$ Nat_a_llist_fun_nat_a_llist_fun_fun$) Nat_a_llist_fun_a_llist_fun$)
(declare-fun fun_app$k (A_llist_nat_a_llist_fun_fun_a_llist_nat_a_llist_fun_fun_fun$ A_llist_nat_a_llist_fun_fun$) A_llist_nat_a_llist_fun_fun$)
(declare-fun fun_app$l (Nat_a_llist_fun_nat_a_llist_fun_fun_nat_a_llist_fun_nat_a_llist_fun_fun_fun$ Nat_a_llist_fun_nat_a_llist_fun_fun$) Nat_a_llist_fun_nat_a_llist_fun_fun$)
(declare-fun fun_app$m (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$n (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$o (Nat_a_llist_fun_bool_fun$ Nat_a_llist_fun$) Bool)
(declare-fun fun_app$p (Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$ Nat_a_llist_fun$) Nat_a_llist_fun_bool_fun$)
(declare-fun monotone$ (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$) Bool)
(declare-fun monotone$a (A_llist_a_llist_bool_fun_fun$ Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$ A_llist_nat_a_llist_fun_fun$) Bool)
(declare-fun monotone$b (Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ Nat_a_llist_fun_a_llist_fun$) Bool)
(declare-fun monotone$c (Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$ Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$ Nat_a_llist_fun_nat_a_llist_fun_fun$) Bool)
(declare-fun lstrict_prefix$ (A_llist$ A_llist$) Bool)
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (! (= (fun_app$ (fun_app$a uu$ ?v0) ?v1) (fun_app$b (ldropn$ ?v1) ?v0)) :pattern ((fun_app$ (fun_app$a uu$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$)) (! (= (fun_app$b (fun_app$c (uud$ ?v0) ?v1) ?v2) (fun_app$b ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$b (fun_app$c (uud$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 Nat_a_llist_fun_a_llist_fun$) (?v2 Nat_a_llist_fun$)) (! (= (fun_app$d (fun_app$e (uua$ ?v0) ?v1) ?v2) (fun_app$b ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$d (fun_app$e (uua$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_llist_nat_a_llist_fun_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$)) (! (= (fun_app$a (fun_app$f (uuj$ ?v0) ?v1) ?v2) (fun_app$a ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$a (fun_app$f (uuj$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A_llist_nat_a_llist_fun_fun$) (?v1 Nat_a_llist_fun_a_llist_fun$) (?v2 Nat_a_llist_fun$)) (! (= (fun_app$g (fun_app$h (uug$ ?v0) ?v1) ?v2) (fun_app$a ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$g (fun_app$h (uug$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 Nat_a_llist_fun_a_llist_fun$) (?v1 A_llist_nat_a_llist_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$b (fun_app$i (uuc$ ?v0) ?v1) ?v2) (fun_app$d ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$b (fun_app$i (uuc$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 Nat_a_llist_fun_a_llist_fun$) (?v1 Nat_a_llist_fun_nat_a_llist_fun_fun$) (?v2 Nat_a_llist_fun$)) (! (= (fun_app$d (fun_app$j (uub$ ?v0) ?v1) ?v2) (fun_app$d ?v0 (fun_app$g ?v1 ?v2))) :pattern ((fun_app$d (fun_app$j (uub$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 Nat_a_llist_fun_nat_a_llist_fun_fun$) (?v1 A_llist_nat_a_llist_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$a (fun_app$k (uui$ ?v0) ?v1) ?v2) (fun_app$g ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$a (fun_app$k (uui$ ?v0) ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 Nat_a_llist_fun_nat_a_llist_fun_fun$) (?v1 Nat_a_llist_fun_nat_a_llist_fun_fun$) (?v2 Nat_a_llist_fun$)) (! (= (fun_app$g (fun_app$l (uuh$ ?v0) ?v1) ?v2) (fun_app$g ?v0 (fun_app$g ?v1 ?v2))) :pattern ((fun_app$g (fun_app$l (uuh$ ?v0) ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$b (uuf$ ?v0) ?v1) ?v0) :pattern ((fun_app$b (uuf$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$)) (! (= (fun_app$d (uue$ ?v0) ?v1) ?v0) :pattern ((fun_app$d (uue$ ?v0) ?v1)))) :named a10))
(assert (! (not (monotone$ lprefix$ lprefix$ (ldropn$ n$))) :named a11))
(assert (! (monotone$a lprefix$ (fun_ord$ lprefix$) uu$) :named a12))
(assert (! (forall ((?v0 A_llist$)) (fun_app$m (fun_app$n lprefix$ ?v0) ?v0)) :named a13))
(assert (! (forall ((?v0 A_llist$)) (fun_app$m (fun_app$n lprefix$ ?v0) ?v0)) :named a14))
(assert (! (forall ((?v0 A_llist_nat_a_llist_fun_fun$) (?v1 A_llist$) (?v2 Nat_a_llist_fun$) (?v3 A_llist_nat_a_llist_fun_fun$) (?v4 Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$)) (=> (and (forall ((?v5 A_llist$)) (= (fun_app$a ?v0 ?v5) (ite (fun_app$m (fun_app$n lprefix$ ?v5) ?v1) ?v2 (fun_app$a ?v3 ?v5)))) (and (forall ((?v5 A_llist$) (?v6 A_llist$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v5) ?v6) (not (fun_app$m (fun_app$n lprefix$ ?v5) ?v1))) (fun_app$o (fun_app$p ?v4 (fun_app$a ?v3 ?v5)) (fun_app$a ?v3 ?v6)))) (and (forall ((?v5 A_llist$)) (=> (not (fun_app$m (fun_app$n lprefix$ ?v5) ?v1)) (fun_app$o (fun_app$p ?v4 ?v2) (fun_app$a ?v3 ?v5)))) (fun_app$o (fun_app$p ?v4 ?v2) ?v2)))) (monotone$a lprefix$ ?v4 ?v0))) :named a15))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist_a_llist_fun$) (?v4 A_llist_a_llist_bool_fun_fun$)) (=> (and (forall ((?v5 A_llist$)) (= (fun_app$b ?v0 ?v5) (ite (fun_app$m (fun_app$n lprefix$ ?v5) ?v1) ?v2 (fun_app$b ?v3 ?v5)))) (and (forall ((?v5 A_llist$) (?v6 A_llist$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v5) ?v6) (not (fun_app$m (fun_app$n lprefix$ ?v5) ?v1))) (fun_app$m (fun_app$n ?v4 (fun_app$b ?v3 ?v5)) (fun_app$b ?v3 ?v6)))) (and (forall ((?v5 A_llist$)) (=> (not (fun_app$m (fun_app$n lprefix$ ?v5) ?v1)) (fun_app$m (fun_app$n ?v4 ?v2) (fun_app$b ?v3 ?v5)))) (fun_app$m (fun_app$n ?v4 ?v2) ?v2)))) (monotone$ lprefix$ ?v4 ?v0))) :named a16))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_fun$) (?v2 Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$) (?v3 Nat_a_llist_fun_a_llist_fun$)) (=> (and (monotone$ ?v0 lprefix$ ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$b ?v2 lprefix$ (fun_app$e (uua$ ?v1) ?v3)))) :named a17))
(assert (! (forall ((?v0 Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$) (?v1 Nat_a_llist_fun_a_llist_fun$) (?v2 Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$) (?v3 Nat_a_llist_fun_nat_a_llist_fun_fun$)) (=> (and (monotone$b ?v0 lprefix$ ?v1) (monotone$c ?v2 ?v0 ?v3)) (monotone$b ?v2 lprefix$ (fun_app$j (uub$ ?v1) ?v3)))) :named a18))
(assert (! (forall ((?v0 Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$) (?v1 Nat_a_llist_fun_a_llist_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_nat_a_llist_fun_fun$)) (=> (and (monotone$b ?v0 lprefix$ ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$ ?v2 lprefix$ (fun_app$i (uuc$ ?v1) ?v3)))) :named a19))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_llist_fun$)) (=> (and (monotone$ ?v0 lprefix$ ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$ ?v2 lprefix$ (fun_app$c (uud$ ?v1) ?v3)))) :named a20))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (fun_app$m (fun_app$n lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a21))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (fun_app$m (fun_app$n lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a22))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (fun_app$m (fun_app$n lprefix$ ?v2) ?v1)) (or (fun_app$m (fun_app$n lprefix$ ?v0) ?v2) (fun_app$m (fun_app$n lprefix$ ?v2) ?v0)))) :named a23))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (fun_app$m (fun_app$n lprefix$ ?v1) ?v2)) (fun_app$m (fun_app$n lprefix$ ?v0) ?v2))) :named a24))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (fun_app$m (fun_app$n lprefix$ ?v1) ?v2)) (fun_app$m (fun_app$n lprefix$ ?v0) ?v2))) :named a25))
(assert (! (forall ((?v0 Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$) (?v1 A_llist$)) (monotone$b ?v0 lprefix$ (uue$ ?v1))) :named a26))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$)) (monotone$ ?v0 lprefix$ (uuf$ ?v1))) :named a27))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_nat_a_llist_fun_fun$) (?v2 Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$) (?v3 Nat_a_llist_fun_a_llist_fun$)) (=> (and (monotone$a ?v0 (fun_ord$ lprefix$) ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$c ?v2 (fun_ord$ lprefix$) (fun_app$h (uug$ ?v1) ?v3)))) :named a28))
(assert (! (forall ((?v0 Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$) (?v1 Nat_a_llist_fun_nat_a_llist_fun_fun$) (?v2 Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$) (?v3 Nat_a_llist_fun_nat_a_llist_fun_fun$)) (=> (and (monotone$c ?v0 (fun_ord$ lprefix$) ?v1) (monotone$c ?v2 ?v0 ?v3)) (monotone$c ?v2 (fun_ord$ lprefix$) (fun_app$l (uuh$ ?v1) ?v3)))) :named a29))
(assert (! (forall ((?v0 Nat_a_llist_fun_nat_a_llist_fun_bool_fun_fun$) (?v1 Nat_a_llist_fun_nat_a_llist_fun_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_nat_a_llist_fun_fun$)) (=> (and (monotone$c ?v0 (fun_ord$ lprefix$) ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$a ?v2 (fun_ord$ lprefix$) (fun_app$k (uui$ ?v1) ?v3)))) :named a30))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_nat_a_llist_fun_fun$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_llist_fun$)) (=> (and (monotone$a ?v0 (fun_ord$ lprefix$) ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$a ?v2 (fun_ord$ lprefix$) (fun_app$f (uuj$ ?v1) ?v3)))) :named a31))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (lstrict_prefix$ ?v0 ?v1) (and (fun_app$m (fun_app$n lprefix$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((lstrict_prefix$ ?v0 ?v1)))) :named a32))
(assert (! (forall ((?v0 Nat_a_llist_fun$) (?v1 Nat_a_llist_fun$) (?v2 Nat_a_llist_fun$)) (=> (and (fun_app$o (fun_app$p (fun_ord$ lprefix$) ?v0) ?v1) (fun_app$o (fun_app$p (fun_ord$ lprefix$) ?v1) ?v2)) (fun_app$o (fun_app$p (fun_ord$ lprefix$) ?v0) ?v2))) :named a33))
(assert (! (forall ((?v0 Nat_a_llist_fun$) (?v1 Nat_a_llist_fun$)) (=> (and (fun_app$o (fun_app$p (fun_ord$ lprefix$) ?v0) ?v1) (fun_app$o (fun_app$p (fun_ord$ lprefix$) ?v1) ?v0)) (= ?v0 ?v1))) :named a34))
(assert (! (forall ((?v0 Nat_a_llist_fun$)) (fun_app$o (fun_app$p (fun_ord$ lprefix$) ?v0) ?v0)) :named a35))
(check-sat)
;(get-unsat-core)
