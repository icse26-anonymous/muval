; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 417
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))
  (A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$) (lCons$ (lhd$ A_b_prod$) (ltl$ A_b_prod_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))))
(declare-datatypes () ((A_a_prod$ (pair$a (fst$a A$) (snd$a A$)))))
(declare-codatatypes () ((A_a_prod_llist$ (lNil$c) (lCons$c (lhd$c A_a_prod$) (ltl$c A_a_prod_llist$)))))
(declare-datatypes () ((B_a_prod$ (pair$b (fst$b B$) (snd$b A$)))))
(declare-codatatypes () ((B_a_prod_llist$ (lNil$d) (lCons$d (lhd$d B_a_prod$) (ltl$d B_a_prod_llist$)))))
(declare-datatypes () ((B_b_prod$ (pair$c (fst$c B$) (snd$c B$)))))
(declare-codatatypes () ((B_b_prod_llist$ (lNil$e) (lCons$e (lhd$e B_b_prod$) (ltl$e B_b_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_prod$ (pair$d (fst$d A_b_prod$) (snd$d A$)))))
(declare-codatatypes () ((A_b_prod_a_prod_llist$ (lNil$f) (lCons$f (lhd$f A_b_prod_a_prod$) (ltl$f A_b_prod_a_prod_llist$)))))
(declare-datatypes () ((A_b_prod_b_prod$ (pair$e (fst$e A_b_prod$) (snd$e B$)))))
(declare-codatatypes () ((A_b_prod_b_prod_llist$ (lNil$g) (lCons$g (lhd$g A_b_prod_b_prod$) (ltl$g A_b_prod_b_prod_llist$)))))
(declare-datatypes () ((A_a_b_prod_prod$ (pair$f (fst$f A$) (snd$f A_b_prod$)))))
(declare-codatatypes () ((A_a_b_prod_prod_llist$ (lNil$h) (lCons$h (lhd$h A_a_b_prod_prod$) (ltl$h A_a_b_prod_prod_llist$)))))
(declare-datatypes () ((B_a_b_prod_prod$ (pair$g (fst$g B$) (snd$g A_b_prod$)))))
(declare-codatatypes () ((B_a_b_prod_prod_llist$ (lNil$i) (lCons$i (lhd$i B_a_b_prod_prod$) (ltl$i B_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_b_prod_prod$ (pair$h (fst$h A_b_prod$) (snd$h A_b_prod$)))))
(declare-codatatypes () ((A_b_prod_a_b_prod_prod_llist$ (lNil$j) (lCons$j (lhd$j A_b_prod_a_b_prod_prod$) (ltl$j A_b_prod_a_b_prod_prod_llist$)))))
(declare-datatypes () ((A_b_b_prod_prod$ (pair$i (fst$i A$) (snd$i B_b_prod$)))))
(declare-codatatypes () ((A_b_b_prod_prod_llist$ (lNil$k) (lCons$k (lhd$k A_b_b_prod_prod$) (ltl$k A_b_b_prod_prod_llist$)))))
(declare-datatypes () ((A_b_a_prod_prod$ (pair$j (fst$j A$) (snd$j B_a_prod$)))))
(declare-codatatypes () ((A_b_a_prod_prod_llist$ (lNil$l) (lCons$l (lhd$l A_b_a_prod_prod$) (ltl$l A_b_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod$ (pair$k (fst$k A$) (snd$k A_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_prod_llist$ (lNil$m) (lCons$m (lhd$m A_a_a_prod_prod$) (ltl$m A_a_a_prod_prod_llist$)))))
(declare-datatypes () ((A_b_a_b_prod_prod_prod$ (pair$l (fst$l A$) (snd$l B_a_b_prod_prod$)))))
(declare-codatatypes () ((A_b_a_b_prod_prod_prod_llist$ (lNil$n) (lCons$n (lhd$n A_b_a_b_prod_prod_prod$) (ltl$n A_b_a_b_prod_prod_prod_llist$)))))
(declare-fun us$ () A_b_prod_llist$)
(declare-fun vs$ () A_b_prod_llist$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun min$ (Enat$ Enat$) Enat$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun lzip$a (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun lzip$b (B_llist$ A_llist$) B_a_prod_llist$)
(declare-fun lzip$c (B_llist$ B_llist$) B_b_prod_llist$)
(declare-fun lzip$d (A_b_prod_llist$ A_llist$) A_b_prod_a_prod_llist$)
(declare-fun lzip$e (A_b_prod_llist$ B_llist$) A_b_prod_b_prod_llist$)
(declare-fun lzip$f (A_llist$ A_b_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun lzip$g (B_llist$ A_b_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun lzip$h (A_b_prod_llist$ A_b_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun lzip$i (A_llist$ B_b_prod_llist$) A_b_b_prod_prod_llist$)
(declare-fun fun_app$ (Enat_bool_fun$ Enat$) Bool)
(declare-fun lappend$ (A_b_prod_llist$ A_b_prod_llist$) A_b_prod_llist$)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun llength$ (A_b_prod_llist$) Enat$)
(declare-fun fun_app$a (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun lappend$a (B_llist$ B_llist$) B_llist$)
(declare-fun lappend$b (A_llist$ A_llist$) A_llist$)
(declare-fun lappend$c (B_a_prod_llist$ B_a_prod_llist$) B_a_prod_llist$)
(declare-fun lappend$d (A_a_prod_llist$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun lappend$e (A_a_b_prod_prod_llist$ A_a_b_prod_prod_llist$) A_a_b_prod_prod_llist$)
(declare-fun lappend$f (A_b_b_prod_prod_llist$ A_b_b_prod_prod_llist$) A_b_b_prod_prod_llist$)
(declare-fun lappend$g (A_b_a_prod_prod_llist$ A_b_a_prod_prod_llist$) A_b_a_prod_prod_llist$)
(declare-fun lappend$h (A_a_a_prod_prod_llist$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun lappend$i (A_b_a_b_prod_prod_prod_llist$ A_b_a_b_prod_prod_prod_llist$) A_b_a_b_prod_prod_prod_llist$)
(declare-fun lappend$j (B_b_prod_llist$ B_b_prod_llist$) B_b_prod_llist$)
(declare-fun lappend$k (A_b_prod_a_prod_llist$ A_b_prod_a_prod_llist$) A_b_prod_a_prod_llist$)
(declare-fun lappend$l (A_b_prod_b_prod_llist$ A_b_prod_b_prod_llist$) A_b_prod_b_prod_llist$)
(declare-fun lappend$m (B_a_b_prod_prod_llist$ B_a_b_prod_prod_llist$) B_a_b_prod_prod_llist$)
(declare-fun lappend$n (A_b_prod_a_b_prod_prod_llist$ A_b_prod_a_b_prod_prod_llist$) A_b_prod_a_b_prod_prod_llist$)
(declare-fun llength$a (A_llist$) Enat$)
(declare-fun llength$b (B_llist$) Enat$)
(declare-fun llength$c (A_a_prod_llist$) Enat$)
(declare-fun llength$d (B_a_prod_llist$) Enat$)
(declare-fun llength$e (B_b_prod_llist$) Enat$)
(declare-fun llength$f (A_b_prod_a_prod_llist$) Enat$)
(declare-fun llength$g (A_b_prod_b_prod_llist$) Enat$)
(declare-fun llength$h (A_a_b_prod_prod_llist$) Enat$)
(declare-fun llength$i (B_a_b_prod_prod_llist$) Enat$)
(declare-fun llength$j (A_b_prod_a_b_prod_prod_llist$) Enat$)
(declare-fun llength$k (A_b_b_prod_prod_llist$) Enat$)
(assert (! (not (less_eq$ (llength$ us$) (min$ (llength$a xs$) (llength$b ys$)))) :named a0))
(assert (! (= (llength$ (lzip$ xs$ ys$)) (llength$ (lappend$ us$ vs$))) :named a1))
(assert (! (= (lzip$ xs$ ys$) (lappend$ us$ vs$)) :named a2))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (less_eq$ ?v3 ?v4) (fun_app$ (fun_app$a ?v0 ?v3) ?v4))) (=> (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (fun_app$ (fun_app$a ?v0 ?v2) ?v1))) (fun_app$ (fun_app$a ?v0 ?v2) ?v1))) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (llength$c (lzip$a ?v0 ?v1)) (min$ (llength$a ?v0) (llength$a ?v1)))) :named a4))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$)) (= (llength$d (lzip$b ?v0 ?v1)) (min$ (llength$b ?v0) (llength$a ?v1)))) :named a5))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (llength$e (lzip$c ?v0 ?v1)) (min$ (llength$b ?v0) (llength$b ?v1)))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$)) (= (llength$ (lzip$ ?v0 ?v1)) (min$ (llength$a ?v0) (llength$b ?v1)))) :named a7))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_llist$)) (= (llength$f (lzip$d ?v0 ?v1)) (min$ (llength$ ?v0) (llength$a ?v1)))) :named a8))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 B_llist$)) (= (llength$g (lzip$e ?v0 ?v1)) (min$ (llength$ ?v0) (llength$b ?v1)))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_b_prod_llist$)) (= (llength$h (lzip$f ?v0 ?v1)) (min$ (llength$a ?v0) (llength$ ?v1)))) :named a10))
(assert (! (forall ((?v0 B_llist$) (?v1 A_b_prod_llist$)) (= (llength$i (lzip$g ?v0 ?v1)) (min$ (llength$b ?v0) (llength$ ?v1)))) :named a11))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (llength$j (lzip$h ?v0 ?v1)) (min$ (llength$ ?v0) (llength$ ?v1)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 B_b_prod_llist$)) (= (llength$k (lzip$i ?v0 ?v1)) (min$ (llength$a ?v0) (llength$e ?v1)))) :named a13))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (less_eq$ ?v0 (min$ ?v1 ?v2)) (and (less_eq$ ?v0 ?v1) (less_eq$ ?v0 ?v2)))) :named a14))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (min$ (min$ ?v0 ?v1) ?v1) (min$ ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (min$ ?v0 (min$ ?v0 ?v1)) (min$ ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 Enat$)) (= (min$ ?v0 ?v0) ?v0)) :named a17))
(assert (! (forall ((?v0 Enat$)) (less_eq$ ?v0 ?v0)) :named a18))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (min$ ?v0 ?v1) (ite (less_eq$ ?v0 ?v1) ?v0 ?v1))) :named a19))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (less_eq$ (min$ ?v0 ?v1) ?v2) (or (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2)))) :named a20))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (less_eq$ ?v0 ?v1) (= (min$ ?v1 ?v0) ?v0)) :pattern ((less_eq$ ?v0 ?v1)))) :named a21))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (less_eq$ ?v0 ?v1) (= (min$ ?v0 ?v1) ?v0)) :pattern ((less_eq$ ?v0 ?v1)))) :named a22))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (less_eq$ ?v0 ?v1) (= ?v0 (min$ ?v0 ?v1))) :pattern ((less_eq$ ?v0 ?v1)))) :named a23))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (=> (= ?v0 (min$ ?v0 ?v1)) (less_eq$ ?v0 ?v1))) :named a24))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a25))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (= (lappend$a (lappend$a ?v0 ?v1) ?v2) (lappend$a ?v0 (lappend$a ?v1 ?v2)))) :named a26))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$b (lappend$b ?v0 ?v1) ?v2) (lappend$b ?v0 (lappend$b ?v1 ?v2)))) :named a27))
(assert (! (forall ((?v0 B_a_prod_llist$) (?v1 B_a_prod_llist$) (?v2 B_a_prod_llist$)) (= (lappend$c (lappend$c ?v0 ?v1) ?v2) (lappend$c ?v0 (lappend$c ?v1 ?v2)))) :named a28))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (= (lappend$d (lappend$d ?v0 ?v1) ?v2) (lappend$d ?v0 (lappend$d ?v1 ?v2)))) :named a29))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$) (?v1 A_a_b_prod_prod_llist$) (?v2 A_a_b_prod_prod_llist$)) (= (lappend$e (lappend$e ?v0 ?v1) ?v2) (lappend$e ?v0 (lappend$e ?v1 ?v2)))) :named a30))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$) (?v1 A_b_b_prod_prod_llist$) (?v2 A_b_b_prod_prod_llist$)) (= (lappend$f (lappend$f ?v0 ?v1) ?v2) (lappend$f ?v0 (lappend$f ?v1 ?v2)))) :named a31))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$) (?v1 A_b_a_prod_prod_llist$) (?v2 A_b_a_prod_prod_llist$)) (= (lappend$g (lappend$g ?v0 ?v1) ?v2) (lappend$g ?v0 (lappend$g ?v1 ?v2)))) :named a32))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_a_a_prod_prod_llist$) (?v2 A_a_a_prod_prod_llist$)) (= (lappend$h (lappend$h ?v0 ?v1) ?v2) (lappend$h ?v0 (lappend$h ?v1 ?v2)))) :named a33))
(assert (! (forall ((?v0 A_b_a_b_prod_prod_prod_llist$) (?v1 A_b_a_b_prod_prod_prod_llist$) (?v2 A_b_a_b_prod_prod_prod_llist$)) (= (lappend$i (lappend$i ?v0 ?v1) ?v2) (lappend$i ?v0 (lappend$i ?v1 ?v2)))) :named a34))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (= (llength$a ?v0) (llength$a ?v1)) (= (lzip$a (lappend$b ?v0 ?v2) (lappend$b ?v1 ?v3)) (lappend$d (lzip$a ?v0 ?v1) (lzip$a ?v2 ?v3))))) :named a35))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_llist$)) (=> (= (llength$a ?v0) (llength$b ?v1)) (= (lzip$ (lappend$b ?v0 ?v2) (lappend$a ?v1 ?v3)) (lappend$ (lzip$ ?v0 ?v1) (lzip$ ?v2 ?v3))))) :named a36))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_llist$)) (=> (= (llength$b ?v0) (llength$a ?v1)) (= (lzip$b (lappend$a ?v0 ?v2) (lappend$b ?v1 ?v3)) (lappend$c (lzip$b ?v0 ?v1) (lzip$b ?v2 ?v3))))) :named a37))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_llist$)) (=> (= (llength$b ?v0) (llength$b ?v1)) (= (lzip$c (lappend$a ?v0 ?v2) (lappend$a ?v1 ?v3)) (lappend$j (lzip$c ?v0 ?v1) (lzip$c ?v2 ?v3))))) :named a38))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_llist$) (?v2 A_b_prod_llist$) (?v3 A_llist$)) (=> (= (llength$ ?v0) (llength$a ?v1)) (= (lzip$d (lappend$ ?v0 ?v2) (lappend$b ?v1 ?v3)) (lappend$k (lzip$d ?v0 ?v1) (lzip$d ?v2 ?v3))))) :named a39))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 B_llist$) (?v2 A_b_prod_llist$) (?v3 B_llist$)) (=> (= (llength$ ?v0) (llength$b ?v1)) (= (lzip$e (lappend$ ?v0 ?v2) (lappend$a ?v1 ?v3)) (lappend$l (lzip$e ?v0 ?v1) (lzip$e ?v2 ?v3))))) :named a40))
(assert (! (forall ((?v0 A_llist$) (?v1 A_b_prod_llist$) (?v2 A_llist$) (?v3 A_b_prod_llist$)) (=> (= (llength$a ?v0) (llength$ ?v1)) (= (lzip$f (lappend$b ?v0 ?v2) (lappend$ ?v1 ?v3)) (lappend$e (lzip$f ?v0 ?v1) (lzip$f ?v2 ?v3))))) :named a41))
(assert (! (forall ((?v0 B_llist$) (?v1 A_b_prod_llist$) (?v2 B_llist$) (?v3 A_b_prod_llist$)) (=> (= (llength$b ?v0) (llength$ ?v1)) (= (lzip$g (lappend$a ?v0 ?v2) (lappend$ ?v1 ?v3)) (lappend$m (lzip$g ?v0 ?v1) (lzip$g ?v2 ?v3))))) :named a42))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$) (?v3 A_b_prod_llist$)) (=> (= (llength$ ?v0) (llength$ ?v1)) (= (lzip$h (lappend$ ?v0 ?v2) (lappend$ ?v1 ?v3)) (lappend$n (lzip$h ?v0 ?v1) (lzip$h ?v2 ?v3))))) :named a43))
(assert (! (forall ((?v0 A_llist$) (?v1 B_b_prod_llist$) (?v2 A_llist$) (?v3 B_b_prod_llist$)) (=> (= (llength$a ?v0) (llength$e ?v1)) (= (lzip$i (lappend$b ?v0 ?v2) (lappend$j ?v1 ?v3)) (lappend$f (lzip$i ?v0 ?v1) (lzip$i ?v2 ?v3))))) :named a44))
(check-sat)
;(get-unsat-core)
