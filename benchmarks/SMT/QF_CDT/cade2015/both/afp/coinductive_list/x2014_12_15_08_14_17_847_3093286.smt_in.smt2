; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 633
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun x$ () A$)
(declare-fun na$ () Nat$)
(declare-fun xs$ () A_llist$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun xsa$ () A_llist$)
(declare-fun eSuc$ (Enat$) Enat$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun lmap$ (A_a_fun$ A_llist$) A_llist$)
(declare-fun plus$ (Enat$ Enat$) Enat$)
(declare-fun size$ (A_list$) Nat$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun list_of$ (A_llist$) A_list$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun llist_of$ (A_list$) A_llist$)
(declare-fun the_enat$ (Enat$) Nat$)
(assert (! (not (= (llength$ xs$) (enat$ na$))) :named a0))
(assert (! (=> (forall ((?v0 A$) (?v1 A_llist$)) (=> (= xsa$ (lCons$ ?v0 ?v1)) false)) false) :named a1))
(assert (! (= xsa$ (lCons$ x$ xs$)) :named a2))
(assert (! (= (llength$ xsa$) (enat$ (suc$ na$))) :named a3))
(assert (! (forall ((?v0 A_llist$)) (=> (= (llength$ ?v0) (enat$ na$)) (lfinite$ ?v0))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a6))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (llength$ (lmap$ ?v0 ?v1)) (llength$ ?v1))) :named a7))
(assert (! (forall ((?v0 A_list$)) (= (llength$ (llist_of$ ?v0)) (enat$ (size$ ?v0)))) :named a8))
(assert (! (forall ((?v0 Nat$)) (! (= (the_enat$ (enat$ ?v0)) ?v0) :pattern ((enat$ ?v0)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (llength$ (lCons$ ?v0 ?v1)) (eSuc$ (llength$ ?v1))) :pattern ((lCons$ ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$ ?v0) (= (enat$ (size$ (list_of$ ?v0))) (llength$ ?v0)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Enat$) (?v2 Enat$)) (= (= (plus$ (enat$ ?v0) ?v1) (plus$ (enat$ ?v0) ?v2)) (= ?v1 ?v2))) :named a12))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$) (?v2 Enat$)) (= (= (plus$ ?v0 (enat$ ?v1)) (plus$ ?v2 (enat$ ?v1))) (= ?v0 ?v2))) :named a13))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (eSuc$ ?v0) (eSuc$ ?v1)) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (eSuc$ ?v0) (eSuc$ ?v1)) (= ?v0 ?v1))) :named a15))
(check-sat)
;(get-unsat-core)
