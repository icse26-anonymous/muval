; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 140
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun xs$ () A_llist$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun llist_all2$ (A_a_bool_fun_fun$ A_llist$ A_llist$) Bool)
(declare-fun pred_llist$ (A_bool_fun$ A_llist$) Bool)
(assert (! (not (= (not (= xs$ lNil$)) (exists ((?v0 A$) (?v1 A_llist$)) (= xs$ (lCons$ ?v0 ?v1))))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a1))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false))) false)) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (not (= lNil$ (lCons$ ?v0 ?v1)))) :named a3))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2)) (and (fun_app$ ?v0 ?v1) (pred_llist$ ?v0 ?v2))) :pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2))))) :named a4))
(assert (! (forall ((?v0 A_bool_fun$)) (pred_llist$ ?v0 lNil$)) :named a5))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (llist_all2$ ?v0 ?v1 ?v2) (and (=> (and (= ?v1 lNil$) (= ?v2 lNil$)) false) (forall ((?v3 A$) (?v4 A_llist$) (?v5 A$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v4)) (and (= ?v2 (lCons$ ?v5 ?v6)) (and (fun_app$ (fun_app$a ?v0 ?v3) ?v5) (llist_all2$ ?v0 ?v4 ?v6)))) false)))) false)) :named a6))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$)) (not (llist_all2$ ?v0 (lCons$ ?v1 ?v2) lNil$))) :named a7))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$)) (not (llist_all2$ ?v0 lNil$ (lCons$ ?v1 ?v2)))) :named a8))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (llist_all2$ ?v0 (lCons$ ?v1 ?v2) (lCons$ ?v3 ?v4)) (and (fun_app$ (fun_app$a ?v0 ?v1) ?v3) (llist_all2$ ?v0 ?v2 ?v4))) :pattern ((llist_all2$ ?v0 (lCons$ ?v1 ?v2) (lCons$ ?v3 ?v4))))) :named a9))
(check-sat)
;(get-unsat-core)
