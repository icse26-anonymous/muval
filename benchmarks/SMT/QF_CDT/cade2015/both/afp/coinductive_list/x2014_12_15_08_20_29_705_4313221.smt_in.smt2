; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 685
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun zs$ () A_llist$)
(declare-fun xs$a () A_llist$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun ltake$ (Enat$ A_llist$) A_llist$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(assert (! (not (lprefix$ xs$ ys$)) :named a0))
(assert (! (not (or (lprefix$ xs$ ys$) (lprefix$ ys$ xs$))) :named a1))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a2))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a3))
(assert (! (not (lprefix$ xs$ ys$)) :named a4))
(assert (! (not (lprefix$ ys$ xs$)) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v0)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v0)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v2 ?v1)) (or (lprefix$ ?v0 ?v2) (lprefix$ ?v2 ?v0)))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v2)) (lprefix$ ?v0 ?v2))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v2)) (lprefix$ ?v0 ?v2))) :named a10))
(assert (! (lprefix$ xs$ (lappend$ ys$ zs$)) :named a11))
(assert (! (not (less_eq$ (llength$ ys$) (llength$ xs$))) :named a12))
(assert (! (= (lappend$ xs$ xs$a) (lappend$ ys$ zs$)) :named a13))
(assert (! (=> (forall ((?v0 A_llist$)) (=> (= (lappend$ xs$ ?v0) (lappend$ ys$ zs$)) false)) false) :named a14))
(assert (! (less$ (llength$ xs$) (llength$ ys$)) :named a15))
(assert (! (= xs$ (ltake$ (llength$ xs$) ys$)) :named a16))
(assert (! (= (ltake$ (llength$ ys$) xs$) xs$) :named a17))
(check-sat)
;(get-unsat-core)
