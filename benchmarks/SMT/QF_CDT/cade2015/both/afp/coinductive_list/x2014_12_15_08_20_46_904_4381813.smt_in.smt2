; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 611
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort Enat_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Enat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_enat_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort A_llist_nat_fun$ 0)
(declare-sort Nat_a_llist_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort Enat_a_llist_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun a$ () A_llist_set$)
(declare-fun n$ () Nat$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun lSup$ (A_llist_set$) A_llist$)
(declare-fun image$ (A_llist_enat_fun$ A_llist_set$) Enat_set$)
(declare-fun image$a (A_llist_nat_fun$ A_llist_set$) Nat_set$)
(declare-fun image$b (Enat_nat_fun$ Enat_set$) Nat_set$)
(declare-fun image$c (Nat_a_llist_fun$ Nat_set$) A_llist_set$)
(declare-fun image$d (Nat_enat_fun$ Nat_set$) Enat_set$)
(declare-fun image$e (Nat_nat_fun$ Nat_set$) Nat_set$)
(declare-fun image$f (A_llist_a_llist_fun$ A_llist_set$) A_llist_set$)
(declare-fun image$g (Enat_a_llist_fun$ Enat_set$) A_llist_set$)
(declare-fun image$h (Enat_enat_fun$ Enat_set$) Enat_set$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun less_eq$ (Enat_set$ Enat_set$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llength$ () A_llist_enat_fun$)
(declare-fun member$a (Nat$ Nat_set$) Bool)
(declare-fun member$b (Enat$ Enat_set$) Bool)
(declare-fun fun_app$a (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$b (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$c (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$d (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$e (A_llist_nat_fun$ A_llist$) Nat$)
(declare-fun fun_app$f (Enat_nat_fun$ Enat$) Nat$)
(declare-fun fun_app$g (Nat_a_llist_fun$ Nat$) A_llist$)
(declare-fun fun_app$h (Nat_enat_fun$ Nat$) Enat$)
(declare-fun fun_app$i (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$j (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$k (Enat_a_llist_fun$ Enat$) A_llist$)
(declare-fun fun_app$l (Enat_enat_fun$ Enat$) Enat$)
(declare-fun lessThan$ (Enat$) Enat_set$)
(declare-fun less_eq$a (Nat$ Nat$) Bool)
(declare-fun less_eq$b (Enat$ Enat$) Bool)
(declare-fun less_eq$c (Nat_set$ Nat_set$) Bool)
(declare-fun less_eq$d (A_llist_set$ A_llist_set$) Bool)
(declare-fun lessThan$a (Nat$) Nat_set$)
(assert (! (not (less_eq$ (image$ llength$ a$) (lessThan$ (enat$ (suc$ n$))))) :named a0))
(assert (! (= (fun_app$ llength$ (lSup$ a$)) (enat$ n$)) :named a1))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$) (?v4 Nat$)) (=> (less_eq$a ?v3 ?v4) (fun_app$a (fun_app$b ?v0 ?v3) ?v4))) (=> (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (fun_app$a (fun_app$b ?v0 ?v2) ?v1))) (fun_app$a (fun_app$b ?v0 ?v2) ?v1))) :named a2))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (less_eq$b ?v3 ?v4) (fun_app$c (fun_app$d ?v0 ?v3) ?v4))) (=> (fun_app$c (fun_app$d ?v0 ?v1) ?v2) (fun_app$c (fun_app$d ?v0 ?v2) ?v1))) (fun_app$c (fun_app$d ?v0 ?v2) ?v1))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (less_eq$c (lessThan$a ?v0) (lessThan$a ?v1)) (less_eq$a ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (less_eq$ (lessThan$ ?v0) (lessThan$ ?v1)) (less_eq$b ?v0 ?v1))) :named a5))
(assert (! (=> (forall ((?v0 Nat$)) (=> (= (fun_app$ llength$ (lSup$ a$)) (enat$ ?v0)) false)) false) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (lessThan$a ?v0) (lessThan$a ?v1)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (lessThan$ ?v0) (lessThan$ ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist_nat_fun$) (?v2 A_llist$) (?v3 A_llist_set$)) (=> (and (= ?v0 (fun_app$e ?v1 ?v2)) (member$ ?v2 ?v3)) (member$a ?v0 (image$a ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Enat_nat_fun$) (?v2 Enat$) (?v3 Enat_set$)) (=> (and (= ?v0 (fun_app$f ?v1 ?v2)) (member$b ?v2 ?v3)) (member$a ?v0 (image$b ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat_a_llist_fun$) (?v2 Nat$) (?v3 Nat_set$)) (=> (and (= ?v0 (fun_app$g ?v1 ?v2)) (member$a ?v2 ?v3)) (member$ ?v0 (image$c ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 Enat$) (?v1 Nat_enat_fun$) (?v2 Nat$) (?v3 Nat_set$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (member$a ?v2 ?v3)) (member$b ?v0 (image$d ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_set$)) (=> (and (= ?v0 (fun_app$i ?v1 ?v2)) (member$a ?v2 ?v3)) (member$a ?v0 (image$e ?v1 ?v3)))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_a_llist_fun$) (?v2 A_llist$) (?v3 A_llist_set$)) (=> (and (= ?v0 (fun_app$j ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (image$f ?v1 ?v3)))) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 Enat_a_llist_fun$) (?v2 Enat$) (?v3 Enat_set$)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (member$b ?v2 ?v3)) (member$ ?v0 (image$g ?v1 ?v3)))) :named a18))
(assert (! (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat_set$)) (=> (and (= ?v0 (fun_app$l ?v1 ?v2)) (member$b ?v2 ?v3)) (member$b ?v0 (image$h ?v1 ?v3)))) :named a19))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist_enat_fun$) (?v2 A_llist$) (?v3 A_llist_set$)) (=> (and (= ?v0 (fun_app$ ?v1 ?v2)) (member$ ?v2 ?v3)) (member$b ?v0 (image$ ?v1 ?v3)))) :named a20))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (=> (forall ((?v2 A_llist$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))) (less_eq$d ?v0 ?v1))) :named a21))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set$)) (=> (forall ((?v2 Nat$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1))) (less_eq$c ?v0 ?v1))) :named a22))
(assert (! (forall ((?v0 Enat_set$) (?v1 Enat_set$)) (=> (forall ((?v2 Enat$)) (=> (member$b ?v2 ?v0) (member$b ?v2 ?v1))) (less_eq$ ?v0 ?v1))) :named a23))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$)) (=> (and (less_eq$d ?v0 ?v1) (less_eq$d ?v1 ?v0)) (= ?v0 ?v1))) :named a24))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set$)) (=> (and (less_eq$c ?v0 ?v1) (less_eq$c ?v1 ?v0)) (= ?v0 ?v1))) :named a25))
(assert (! (forall ((?v0 Enat_set$) (?v1 Enat_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a26))
(assert (! (forall ((?v0 A_llist_set$)) (less_eq$d ?v0 ?v0)) :named a27))
(assert (! (forall ((?v0 Nat_set$)) (less_eq$c ?v0 ?v0)) :named a28))
(assert (! (forall ((?v0 Enat_set$)) (less_eq$ ?v0 ?v0)) :named a29))
(assert (! (forall ((?v0 Nat$)) (less_eq$a ?v0 ?v0)) :named a30))
(assert (! (forall ((?v0 Enat$)) (less_eq$b ?v0 ?v0)) :named a31))
(assert (! (forall ((?v0 Nat_enat_fun$) (?v1 Nat_set$) (?v2 Enat_set$)) (= (less_eq$ (image$d ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (=> (member$a ?v3 ?v1) (member$b (fun_app$h ?v0 ?v3) ?v2))))) :named a32))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_set$) (?v2 Nat_set$)) (= (less_eq$c (image$e ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (=> (member$a ?v3 ?v1) (member$a (fun_app$i ?v0 ?v3) ?v2))))) :named a33))
(assert (! (forall ((?v0 Nat_a_llist_fun$) (?v1 Nat_set$) (?v2 A_llist_set$)) (= (less_eq$d (image$c ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (=> (member$a ?v3 ?v1) (member$ (fun_app$g ?v0 ?v3) ?v2))))) :named a34))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_set$) (?v2 A_llist_set$)) (= (less_eq$d (image$f ?v0 ?v1) ?v2) (forall ((?v3 A_llist$)) (=> (member$ ?v3 ?v1) (member$ (fun_app$j ?v0 ?v3) ?v2))))) :named a35))
(assert (! (forall ((?v0 Enat_a_llist_fun$) (?v1 Enat_set$) (?v2 A_llist_set$)) (= (less_eq$d (image$g ?v0 ?v1) ?v2) (forall ((?v3 Enat$)) (=> (member$b ?v3 ?v1) (member$ (fun_app$k ?v0 ?v3) ?v2))))) :named a36))
(assert (! (forall ((?v0 Enat_enat_fun$) (?v1 Enat_set$) (?v2 Enat_set$)) (= (less_eq$ (image$h ?v0 ?v1) ?v2) (forall ((?v3 Enat$)) (=> (member$b ?v3 ?v1) (member$b (fun_app$l ?v0 ?v3) ?v2))))) :named a37))
(assert (! (forall ((?v0 A_llist_nat_fun$) (?v1 A_llist_set$) (?v2 Nat_set$)) (= (less_eq$c (image$a ?v0 ?v1) ?v2) (forall ((?v3 A_llist$)) (=> (member$ ?v3 ?v1) (member$a (fun_app$e ?v0 ?v3) ?v2))))) :named a38))
(assert (! (forall ((?v0 Enat_nat_fun$) (?v1 Enat_set$) (?v2 Nat_set$)) (= (less_eq$c (image$b ?v0 ?v1) ?v2) (forall ((?v3 Enat$)) (=> (member$b ?v3 ?v1) (member$a (fun_app$f ?v0 ?v3) ?v2))))) :named a39))
(assert (! (forall ((?v0 A_llist_enat_fun$) (?v1 A_llist_set$) (?v2 Enat_set$)) (= (less_eq$ (image$ ?v0 ?v1) ?v2) (forall ((?v3 A_llist$)) (=> (member$ ?v3 ?v1) (member$b (fun_app$ ?v0 ?v3) ?v2))))) :named a40))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less_eq$a (suc$ ?v0) (suc$ ?v1)) (less_eq$a ?v0 ?v1)) :pattern ((less_eq$a (suc$ ?v0) (suc$ ?v1))))) :named a41))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less_eq$b (enat$ ?v0) (enat$ ?v1)) (less_eq$a ?v0 ?v1)) :pattern ((less_eq$b (enat$ ?v0) (enat$ ?v1))))) :named a42))
(assert (! (lfinite$ (lSup$ a$)) :named a43))
(check-sat)
;(get-unsat-core)
