; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 574
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_set_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_a_a_set_fun_fun$ 0)
(declare-sort A_a_llist_set_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_a_a_bool_fun_fun_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_bool_fun_fun$ 0)
(declare-sort A_a_a_llist_set_fun_fun$ 0)
(declare-sort A_a_llist_a_set_fun_fun$ 0)
(declare-sort A_llist_a_a_set_fun_fun$ 0)
(declare-sort A_llist_a_llist_set_fun$ 0)
(declare-sort A_a_set_fun_a_a_set_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_a_llist_a_llist_set_fun_fun$ 0)
(declare-sort A_llist_a_a_llist_set_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_set_fun_fun$ 0)
(declare-sort A_a_bool_fun_fun_a_bool_fun_fun$ 0)
(declare-sort A_a_a_set_fun_fun_a_a_set_fun_fun$ 0)
(declare-sort A_a_set_fun_a_llist_a_set_fun_fun$ 0)
(declare-sort A_llist_a_set_fun_a_a_set_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_bool_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_llist_set_fun_fun$ 0)
(declare-sort A_llist_a_bool_fun_fun_a_bool_fun_fun$ 0)
(declare-sort A_a_llist_a_set_fun_fun_a_a_set_fun_fun$ 0)
(declare-sort A_a_llist_set_fun_a_a_llist_set_fun_fun$ 0)
(declare-sort A_llist_a_a_set_fun_fun_a_a_set_fun_fun$ 0)
(declare-sort A_llist_a_set_fun_a_llist_a_set_fun_fun$ 0)
(declare-sort A_a_a_bool_fun_fun_fun_a_a_bool_fun_fun_fun$ 0)
(declare-sort A_a_llist_bool_fun_fun_a_llist_bool_fun_fun$ 0)
(declare-sort A_a_a_llist_set_fun_fun_a_a_llist_set_fun_fun$ 0)
(declare-sort A_a_llist_a_set_fun_fun_a_llist_a_set_fun_fun$ 0)
(declare-sort A_a_llist_set_fun_a_llist_a_llist_set_fun_fun$ 0)
(declare-sort A_llist_a_a_set_fun_fun_a_llist_a_set_fun_fun$ 0)
(declare-sort A_llist_a_llist_set_fun_a_a_llist_set_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_a_llist_set_fun_fun_a_a_llist_set_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_set_fun_fun_a_llist_a_set_fun_fun$ 0)
(declare-sort A_llist_a_llist_set_fun_a_llist_a_llist_set_fun_fun$ 0)
(declare-sort A_llist_a_a_llist_set_fun_fun_a_llist_a_llist_set_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_bool_fun_fun_fun_a_llist_a_bool_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_a_llist_set_fun_fun_a_llist_a_llist_set_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-fun uu$ (A_a_bool_fun_fun$) A_a_bool_fun_fun$)
(declare-fun uua$ (A_llist_a_llist_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun uub$ (A_llist_a_bool_fun_fun$) A_a_llist_bool_fun_fun$)
(declare-fun uuc$ (A_a_llist_set_fun$) A_llist_a_llist_set_fun_a_a_llist_set_fun_fun$)
(declare-fun uud$ (A_a_set_fun$) A_a_llist_set_fun_a_a_llist_set_fun_fun$)
(declare-fun uue$ (A_llist_a_set_fun$) A_a_llist_set_fun_a_llist_a_llist_set_fun_fun$)
(declare-fun uuf$ (A_a_llist_set_fun$) A_llist_a_set_fun_a_a_set_fun_fun$)
(declare-fun uug$ (A_llist_a_llist_set_fun$) A_llist_a_llist_set_fun_a_llist_a_llist_set_fun_fun$)
(declare-fun uuh$ (A_a_set_fun$) A_a_set_fun_a_a_set_fun_fun$)
(declare-fun uui$ (A_llist_a_set_fun$) A_a_set_fun_a_llist_a_set_fun_fun$)
(declare-fun uuj$ (A_llist_a_llist_set_fun$) A_llist_a_set_fun_a_llist_a_set_fun_fun$)
(declare-fun uuk$ (A_llist_set$) A_llist_a_llist_a_set_fun_fun_a_llist_a_set_fun_fun$)
(declare-fun uul$ (A_llist_a_llist_a_set_fun_fun$) A_llist_a_llist_a_set_fun_fun$)
(declare-fun uum$ (A_llist_set$) A_llist_a_llist_a_set_fun_fun_a_llist_a_set_fun_fun$)
(declare-fun uun$ (A_set$) A_a_a_set_fun_fun_a_a_set_fun_fun$)
(declare-fun uuo$ (A_a_a_set_fun_fun$) A_a_a_set_fun_fun$)
(declare-fun uup$ (A_set$) A_a_a_set_fun_fun_a_a_set_fun_fun$)
(declare-fun uuq$ (A_set$) A_llist_a_a_set_fun_fun_a_llist_a_set_fun_fun$)
(declare-fun uur$ (A_llist_a_a_set_fun_fun$) A_a_llist_a_set_fun_fun$)
(declare-fun uus$ (A_llist_set$) A_llist_a_a_set_fun_fun_a_a_set_fun_fun$)
(declare-fun uut$ (A_llist_set$) A_a_llist_a_set_fun_fun_a_a_set_fun_fun$)
(declare-fun uuu$ (A_a_llist_a_set_fun_fun$) A_llist_a_a_set_fun_fun$)
(declare-fun uuv$ (A_set$) A_a_llist_a_set_fun_fun_a_llist_a_set_fun_fun$)
(declare-fun uuw$ (A_llist_set$) A_llist_a_llist_a_llist_set_fun_fun_a_llist_a_llist_set_fun_fun$)
(declare-fun uux$ (A_llist_a_llist_a_llist_set_fun_fun$) A_llist_a_llist_a_llist_set_fun_fun$)
(declare-fun uuy$ (A_llist_set$) A_llist_a_llist_a_llist_set_fun_fun_a_llist_a_llist_set_fun_fun$)
(declare-fun uuz$ (A_llist_set$) A_llist_a_llist_a_bool_fun_fun_fun_a_llist_a_bool_fun_fun_fun$)
(declare-fun uva$ (A_llist_a_llist_a_bool_fun_fun_fun$) A_llist_a_llist_a_bool_fun_fun_fun$)
(declare-fun uvb$ (A_llist_set$) A_llist_a_llist_a_bool_fun_fun_fun_a_llist_a_bool_fun_fun_fun$)
(declare-fun uvc$ (A_set$) A_a_a_llist_set_fun_fun_a_a_llist_set_fun_fun$)
(declare-fun uvd$ (A_a_a_llist_set_fun_fun$) A_a_a_llist_set_fun_fun$)
(declare-fun uve$ (A_set$) A_a_a_llist_set_fun_fun_a_a_llist_set_fun_fun$)
(declare-fun uvf$ (A_llist_set$) A_llist_a_llist_bool_fun_fun_a_llist_bool_fun_fun$)
(declare-fun uvg$ (A_llist_set$) A_llist_a_llist_bool_fun_fun_a_llist_bool_fun_fun$)
(declare-fun uvh$ (A_set$) A_a_a_bool_fun_fun_fun_a_a_bool_fun_fun_fun$)
(declare-fun uvi$ (A_a_a_bool_fun_fun_fun$) A_a_a_bool_fun_fun_fun$)
(declare-fun uvj$ (A_set$) A_a_a_bool_fun_fun_fun_a_a_bool_fun_fun_fun$)
(declare-fun uvk$ (A_set$) A_llist_a_a_llist_set_fun_fun_a_llist_a_llist_set_fun_fun$)
(declare-fun uvl$ (A_llist_a_a_llist_set_fun_fun$) A_a_llist_a_llist_set_fun_fun$)
(declare-fun uvm$ (A_llist_set$) A_llist_a_a_llist_set_fun_fun_a_a_llist_set_fun_fun$)
(declare-fun uvn$ (A_a_llist_set_fun$) A_a_llist_bool_fun_fun$)
(declare-fun uvo$ (A_llist_a_llist_set_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun uvp$ (A_a_set_fun$) A_a_bool_fun_fun$)
(declare-fun uvq$ (A_llist_a_set_fun$) A_llist_a_bool_fun_fun$)
(declare-fun xss$ () A_llist_llist$)
(declare-fun bind$ (A_set$ A_a_llist_set_fun$) A_llist_set$)
(declare-fun lset$ () A_llist_a_set_fun$)
(declare-fun bind$a (A_llist_set$ A_llist_a_llist_set_fun$) A_llist_set$)
(declare-fun bind$b (A_set$ A_a_set_fun$) A_set$)
(declare-fun bind$c (A_llist_set$ A_llist_a_set_fun$) A_set$)
(declare-fun lset$a (A_llist_llist$) A_llist_set$)
(declare-fun lsetp$ (A_llist$) A_bool_fun$)
(declare-fun lsetp$a (A_llist_llist$) A_llist_bool_fun$)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun collect$a (A_llist_bool_fun$) A_llist_set$)
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_a_llist_set_fun$ A_llist$) A_llist_set$)
(declare-fun fun_app$c (A_llist_a_llist_a_llist_set_fun_fun$ A_llist$) A_llist_a_llist_set_fun$)
(declare-fun fun_app$d (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun fun_app$e (A_llist_a_llist_a_set_fun_fun$ A_llist$) A_llist_a_set_fun$)
(declare-fun fun_app$f (A_llist_a_bool_fun_fun$ A_llist$) A_bool_fun$)
(declare-fun fun_app$g (A_llist_a_llist_a_bool_fun_fun_fun$ A_llist$) A_llist_a_bool_fun_fun$)
(declare-fun fun_app$h (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$i (A_bool_fun$ A$) Bool)
(declare-fun fun_app$j (A_a_llist_a_llist_set_fun_fun$ A$) A_llist_a_llist_set_fun$)
(declare-fun fun_app$k (A_a_llist_set_fun$ A$) A_llist_set$)
(declare-fun fun_app$l (A_llist_a_a_llist_set_fun_fun$ A_llist$) A_a_llist_set_fun$)
(declare-fun fun_app$m (A_a_llist_a_set_fun_fun$ A$) A_llist_a_set_fun$)
(declare-fun fun_app$n (A_a_set_fun$ A$) A_set$)
(declare-fun fun_app$o (A_llist_a_a_set_fun_fun$ A_llist$) A_a_set_fun$)
(declare-fun fun_app$p (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$q (A_a_a_llist_set_fun_fun$ A$) A_a_llist_set_fun$)
(declare-fun fun_app$r (A_a_a_set_fun_fun$ A$) A_a_set_fun$)
(declare-fun fun_app$s (A_a_a_bool_fun_fun_fun$ A$) A_a_bool_fun_fun$)
(declare-fun fun_app$t (A_llist_a_llist_set_fun_a_llist_a_llist_set_fun_fun$ A_llist_a_llist_set_fun$) A_llist_a_llist_set_fun$)
(declare-fun fun_app$u (A_llist_a_set_fun_a_llist_a_set_fun_fun$ A_llist_a_set_fun$) A_llist_a_set_fun$)
(declare-fun fun_app$v (A_a_llist_set_fun_a_llist_a_llist_set_fun_fun$ A_a_llist_set_fun$) A_llist_a_llist_set_fun$)
(declare-fun fun_app$w (A_a_set_fun_a_llist_a_set_fun_fun$ A_a_set_fun$) A_llist_a_set_fun$)
(declare-fun fun_app$x (A_llist_a_llist_set_fun_a_a_llist_set_fun_fun$ A_llist_a_llist_set_fun$) A_a_llist_set_fun$)
(declare-fun fun_app$y (A_llist_a_set_fun_a_a_set_fun_fun$ A_llist_a_set_fun$) A_a_set_fun$)
(declare-fun fun_app$z (A_a_llist_set_fun_a_a_llist_set_fun_fun$ A_a_llist_set_fun$) A_a_llist_set_fun$)
(declare-fun lmember$a (A_llist$ A_llist_llist$) Bool)
(declare-fun supremum$ (A_llist_set$ A_llist_a_llist_set_fun$) A_llist_set$)
(declare-fun fun_app$aa (A_a_set_fun_a_a_set_fun_fun$ A_a_set_fun$) A_a_set_fun$)
(declare-fun fun_app$ab (A_llist_a_a_llist_set_fun_fun_a_a_llist_set_fun_fun$ A_llist_a_a_llist_set_fun_fun$) A_a_llist_set_fun$)
(declare-fun fun_app$ac (A_a_a_bool_fun_fun_fun_a_a_bool_fun_fun_fun$ A_a_a_bool_fun_fun_fun$) A_a_bool_fun_fun$)
(declare-fun fun_app$ad (A_a_bool_fun_fun_a_bool_fun_fun$ A_a_bool_fun_fun$) A_bool_fun$)
(declare-fun fun_app$ae (A_a_a_llist_set_fun_fun_a_a_llist_set_fun_fun$ A_a_a_llist_set_fun_fun$) A_a_llist_set_fun$)
(declare-fun fun_app$af (A_llist_a_llist_a_bool_fun_fun_fun_a_llist_a_bool_fun_fun_fun$ A_llist_a_llist_a_bool_fun_fun_fun$) A_llist_a_bool_fun_fun$)
(declare-fun fun_app$ag (A_llist_a_bool_fun_fun_a_bool_fun_fun$ A_llist_a_bool_fun_fun$) A_bool_fun$)
(declare-fun fun_app$ah (A_llist_a_llist_a_llist_set_fun_fun_a_llist_a_llist_set_fun_fun$ A_llist_a_llist_a_llist_set_fun_fun$) A_llist_a_llist_set_fun$)
(declare-fun fun_app$ai (A_a_llist_a_set_fun_fun_a_llist_a_set_fun_fun$ A_a_llist_a_set_fun_fun$) A_llist_a_set_fun$)
(declare-fun fun_app$aj (A_llist_a_a_set_fun_fun_a_a_set_fun_fun$ A_llist_a_a_set_fun_fun$) A_a_set_fun$)
(declare-fun fun_app$ak (A_a_a_set_fun_fun_a_a_set_fun_fun$ A_a_a_set_fun_fun$) A_a_set_fun$)
(declare-fun fun_app$al (A_llist_a_llist_a_set_fun_fun_a_llist_a_set_fun_fun$ A_llist_a_llist_a_set_fun_fun$) A_llist_a_set_fun$)
(declare-fun fun_app$am (A_llist_a_llist_bool_fun_fun_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$) A_llist_bool_fun$)
(declare-fun fun_app$an (A_a_llist_a_set_fun_fun_a_a_set_fun_fun$ A_a_llist_a_set_fun_fun$) A_a_set_fun$)
(declare-fun fun_app$ao (A_llist_a_a_llist_set_fun_fun_a_llist_a_llist_set_fun_fun$ A_llist_a_a_llist_set_fun_fun$) A_llist_a_llist_set_fun$)
(declare-fun fun_app$ap (A_llist_a_a_set_fun_fun_a_llist_a_set_fun_fun$ A_llist_a_a_set_fun_fun$) A_llist_a_set_fun$)
(declare-fun fun_app$aq (A_a_llist_bool_fun_fun_a_llist_bool_fun_fun$ A_a_llist_bool_fun_fun$) A_llist_bool_fun$)
(declare-fun supremum$a (A_llist_set$ A_llist_a_set_fun$) A_set$)
(declare-fun supremum$b (A_set$ A_a_llist_set_fun$) A_llist_set$)
(declare-fun supremum$c (A_set$ A_a_set_fun$) A_set$)
(declare-fun supremum$d (A_set$) A_a_bool_fun_fun_a_bool_fun_fun$)
(declare-fun supremum$e (A_llist_set$) A_llist_a_bool_fun_fun_a_bool_fun_fun$)
(declare-fun supremum$f (A_llist_set$ A_llist_bool_fun$) Bool)
(declare-fun supremum$g (A_set$ A_bool_fun$) Bool)
(declare-fun supremum$h (A_llist_set$) A_llist_a_llist_bool_fun_fun_a_llist_bool_fun_fun$)
(declare-fun supremum$i (A_set$) A_a_llist_bool_fun_fun_a_llist_bool_fun_fun$)
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$a (uua$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$a ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$a (uua$ ?v0) ?v1) ?v2)))) :named a0))
(assert (! (forall ((?v0 A_llist_a_llist_a_llist_set_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$b (fun_app$c (uux$ ?v0) ?v1) ?v2) (fun_app$b (fun_app$c ?v0 ?v2) ?v1)) :pattern ((fun_app$b (fun_app$c (uux$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 A_llist_a_llist_a_set_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$d (fun_app$e (uul$ ?v0) ?v1) ?v2) (fun_app$d (fun_app$e ?v0 ?v2) ?v1)) :pattern ((fun_app$d (fun_app$e (uul$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_llist_a_llist_a_bool_fun_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$f (fun_app$g (uva$ ?v0) ?v1) ?v2) (fun_app$f (fun_app$g ?v0 ?v2) ?v1)) :pattern ((fun_app$f (fun_app$g (uva$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A_llist_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$h (uub$ ?v0) ?v1) ?v2) (fun_app$i (fun_app$f ?v0 ?v2) ?v1)) :pattern ((fun_app$ (fun_app$h (uub$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_llist_a_a_llist_set_fun_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$b (fun_app$j (uvl$ ?v0) ?v1) ?v2) (fun_app$k (fun_app$l ?v0 ?v2) ?v1)) :pattern ((fun_app$b (fun_app$j (uvl$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A_llist_a_a_set_fun_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$d (fun_app$m (uur$ ?v0) ?v1) ?v2) (fun_app$n (fun_app$o ?v0 ?v2) ?v1)) :pattern ((fun_app$d (fun_app$m (uur$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 A_a_llist_a_set_fun_fun$) (?v1 A_llist$) (?v2 A$)) (! (= (fun_app$n (fun_app$o (uuu$ ?v0) ?v1) ?v2) (fun_app$d (fun_app$m ?v0 ?v2) ?v1)) :pattern ((fun_app$n (fun_app$o (uuu$ ?v0) ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$i (fun_app$p (uu$ ?v0) ?v1) ?v2) (fun_app$i (fun_app$p ?v0 ?v2) ?v1)) :pattern ((fun_app$i (fun_app$p (uu$ ?v0) ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 A_a_a_llist_set_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$k (fun_app$q (uvd$ ?v0) ?v1) ?v2) (fun_app$k (fun_app$q ?v0 ?v2) ?v1)) :pattern ((fun_app$k (fun_app$q (uvd$ ?v0) ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 A_a_a_set_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$n (fun_app$r (uuo$ ?v0) ?v1) ?v2) (fun_app$n (fun_app$r ?v0 ?v2) ?v1)) :pattern ((fun_app$n (fun_app$r (uuo$ ?v0) ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 A_a_a_bool_fun_fun_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$p (fun_app$s (uvi$ ?v0) ?v1) ?v2) (fun_app$p (fun_app$s ?v0 ?v2) ?v1)) :pattern ((fun_app$p (fun_app$s (uvi$ ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 A_llist_a_llist_set_fun$) (?v1 A_llist_a_llist_set_fun$) (?v2 A_llist$)) (! (= (fun_app$b (fun_app$t (uug$ ?v0) ?v1) ?v2) (supremum$ (fun_app$b ?v0 ?v2) ?v1)) :pattern ((fun_app$b (fun_app$t (uug$ ?v0) ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 A_llist_a_llist_set_fun$) (?v1 A_llist_a_set_fun$) (?v2 A_llist$)) (! (= (fun_app$d (fun_app$u (uuj$ ?v0) ?v1) ?v2) (supremum$a (fun_app$b ?v0 ?v2) ?v1)) :pattern ((fun_app$d (fun_app$u (uuj$ ?v0) ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 A_llist_a_set_fun$) (?v1 A_a_llist_set_fun$) (?v2 A_llist$)) (! (= (fun_app$b (fun_app$v (uue$ ?v0) ?v1) ?v2) (supremum$b (fun_app$d ?v0 ?v2) ?v1)) :pattern ((fun_app$b (fun_app$v (uue$ ?v0) ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 A_llist_a_set_fun$) (?v1 A_a_set_fun$) (?v2 A_llist$)) (! (= (fun_app$d (fun_app$w (uui$ ?v0) ?v1) ?v2) (supremum$c (fun_app$d ?v0 ?v2) ?v1)) :pattern ((fun_app$d (fun_app$w (uui$ ?v0) ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 A_a_llist_set_fun$) (?v1 A_llist_a_llist_set_fun$) (?v2 A$)) (! (= (fun_app$k (fun_app$x (uuc$ ?v0) ?v1) ?v2) (supremum$ (fun_app$k ?v0 ?v2) ?v1)) :pattern ((fun_app$k (fun_app$x (uuc$ ?v0) ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 A_a_llist_set_fun$) (?v1 A_llist_a_set_fun$) (?v2 A$)) (! (= (fun_app$n (fun_app$y (uuf$ ?v0) ?v1) ?v2) (supremum$a (fun_app$k ?v0 ?v2) ?v1)) :pattern ((fun_app$n (fun_app$y (uuf$ ?v0) ?v1) ?v2)))) :named a17))
(assert (! (forall ((?v0 A_a_set_fun$) (?v1 A_a_llist_set_fun$) (?v2 A$)) (! (= (fun_app$k (fun_app$z (uud$ ?v0) ?v1) ?v2) (supremum$b (fun_app$n ?v0 ?v2) ?v1)) :pattern ((fun_app$k (fun_app$z (uud$ ?v0) ?v1) ?v2)))) :named a18))
(assert (! (forall ((?v0 A_a_set_fun$) (?v1 A_a_set_fun$) (?v2 A$)) (! (= (fun_app$n (fun_app$aa (uuh$ ?v0) ?v1) ?v2) (supremum$c (fun_app$n ?v0 ?v2) ?v1)) :pattern ((fun_app$n (fun_app$aa (uuh$ ?v0) ?v1) ?v2)))) :named a19))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_a_llist_set_fun_fun$) (?v2 A$)) (! (= (fun_app$k (fun_app$ab (uvm$ ?v0) ?v1) ?v2) (supremum$ ?v0 (fun_app$j (uvl$ ?v1) ?v2))) :pattern ((fun_app$k (fun_app$ab (uvm$ ?v0) ?v1) ?v2)))) :named a20))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_a_bool_fun_fun_fun$) (?v2 A$)) (! (= (fun_app$p (fun_app$ac (uvj$ ?v0) ?v1) ?v2) (fun_app$ad (supremum$d ?v0) (fun_app$s (uvi$ ?v1) ?v2))) :pattern ((fun_app$p (fun_app$ac (uvj$ ?v0) ?v1) ?v2)))) :named a21))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_a_llist_set_fun_fun$) (?v2 A$)) (! (= (fun_app$k (fun_app$ae (uve$ ?v0) ?v1) ?v2) (supremum$b ?v0 (fun_app$q (uvd$ ?v1) ?v2))) :pattern ((fun_app$k (fun_app$ae (uve$ ?v0) ?v1) ?v2)))) :named a22))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_a_bool_fun_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$f (fun_app$af (uvb$ ?v0) ?v1) ?v2) (fun_app$ag (supremum$e ?v0) (fun_app$g (uva$ ?v1) ?v2))) :pattern ((fun_app$f (fun_app$af (uvb$ ?v0) ?v1) ?v2)))) :named a23))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_a_llist_set_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$b (fun_app$ah (uuy$ ?v0) ?v1) ?v2) (supremum$ ?v0 (fun_app$c (uux$ ?v1) ?v2))) :pattern ((fun_app$b (fun_app$ah (uuy$ ?v0) ?v1) ?v2)))) :named a24))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_llist_a_set_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$d (fun_app$ai (uuv$ ?v0) ?v1) ?v2) (supremum$c ?v0 (fun_app$o (uuu$ ?v1) ?v2))) :pattern ((fun_app$d (fun_app$ai (uuv$ ?v0) ?v1) ?v2)))) :named a25))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_a_set_fun_fun$) (?v2 A$)) (! (= (fun_app$n (fun_app$aj (uus$ ?v0) ?v1) ?v2) (supremum$a ?v0 (fun_app$m (uur$ ?v1) ?v2))) :pattern ((fun_app$n (fun_app$aj (uus$ ?v0) ?v1) ?v2)))) :named a26))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_a_set_fun_fun$) (?v2 A$)) (! (= (fun_app$n (fun_app$ak (uup$ ?v0) ?v1) ?v2) (supremum$c ?v0 (fun_app$r (uuo$ ?v1) ?v2))) :pattern ((fun_app$n (fun_app$ak (uup$ ?v0) ?v1) ?v2)))) :named a27))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_a_set_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$d (fun_app$al (uum$ ?v0) ?v1) ?v2) (supremum$a ?v0 (fun_app$e (uul$ ?v1) ?v2))) :pattern ((fun_app$d (fun_app$al (uum$ ?v0) ?v1) ?v2)))) :named a28))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$am (uvg$ ?v0) ?v1) ?v2) (supremum$f ?v0 (fun_app$a (uua$ ?v1) ?v2))) :pattern ((fun_app$ (fun_app$am (uvg$ ?v0) ?v1) ?v2)))) :named a29))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$am (uvf$ ?v0) ?v1) ?v2) (supremum$f ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$ (fun_app$am (uvf$ ?v0) ?v1) ?v2)))) :named a30))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_a_llist_set_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$b (fun_app$ah (uuw$ ?v0) ?v1) ?v2) (supremum$ ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$b (fun_app$ah (uuw$ ?v0) ?v1) ?v2)))) :named a31))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_a_set_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$d (fun_app$al (uuk$ ?v0) ?v1) ?v2) (supremum$a ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$d (fun_app$al (uuk$ ?v0) ?v1) ?v2)))) :named a32))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_a_bool_fun_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$f (fun_app$af (uuz$ ?v0) ?v1) ?v2) (fun_app$ag (supremum$e ?v0) (fun_app$g ?v1 ?v2))) :pattern ((fun_app$f (fun_app$af (uuz$ ?v0) ?v1) ?v2)))) :named a33))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_a_llist_a_set_fun_fun$) (?v2 A$)) (! (= (fun_app$n (fun_app$an (uut$ ?v0) ?v1) ?v2) (supremum$a ?v0 (fun_app$m ?v1 ?v2))) :pattern ((fun_app$n (fun_app$an (uut$ ?v0) ?v1) ?v2)))) :named a34))
(assert (! (forall ((?v0 A_set$) (?v1 A_llist_a_a_llist_set_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$b (fun_app$ao (uvk$ ?v0) ?v1) ?v2) (supremum$b ?v0 (fun_app$l ?v1 ?v2))) :pattern ((fun_app$b (fun_app$ao (uvk$ ?v0) ?v1) ?v2)))) :named a35))
(assert (! (forall ((?v0 A_set$) (?v1 A_llist_a_a_set_fun_fun$) (?v2 A_llist$)) (! (= (fun_app$d (fun_app$ap (uuq$ ?v0) ?v1) ?v2) (supremum$c ?v0 (fun_app$o ?v1 ?v2))) :pattern ((fun_app$d (fun_app$ap (uuq$ ?v0) ?v1) ?v2)))) :named a36))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_a_llist_set_fun_fun$) (?v2 A$)) (! (= (fun_app$k (fun_app$ae (uvc$ ?v0) ?v1) ?v2) (supremum$b ?v0 (fun_app$q ?v1 ?v2))) :pattern ((fun_app$k (fun_app$ae (uvc$ ?v0) ?v1) ?v2)))) :named a37))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_a_set_fun_fun$) (?v2 A$)) (! (= (fun_app$n (fun_app$ak (uun$ ?v0) ?v1) ?v2) (supremum$c ?v0 (fun_app$r ?v1 ?v2))) :pattern ((fun_app$n (fun_app$ak (uun$ ?v0) ?v1) ?v2)))) :named a38))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_a_bool_fun_fun_fun$) (?v2 A$)) (! (= (fun_app$p (fun_app$ac (uvh$ ?v0) ?v1) ?v2) (fun_app$ad (supremum$d ?v0) (fun_app$s ?v1 ?v2))) :pattern ((fun_app$p (fun_app$ac (uvh$ ?v0) ?v1) ?v2)))) :named a39))
(assert (! (forall ((?v0 A_llist_a_llist_set_fun$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$a (uvo$ ?v0) ?v1) ?v2) (member$ ?v2 (fun_app$b ?v0 ?v1))) :pattern ((fun_app$ (fun_app$a (uvo$ ?v0) ?v1) ?v2)))) :named a40))
(assert (! (forall ((?v0 A_llist_a_set_fun$) (?v1 A_llist$) (?v2 A$)) (! (= (fun_app$i (fun_app$f (uvq$ ?v0) ?v1) ?v2) (member$a ?v2 (fun_app$d ?v0 ?v1))) :pattern ((fun_app$i (fun_app$f (uvq$ ?v0) ?v1) ?v2)))) :named a41))
(assert (! (forall ((?v0 A_a_llist_set_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (fun_app$h (uvn$ ?v0) ?v1) ?v2) (member$ ?v2 (fun_app$k ?v0 ?v1))) :pattern ((fun_app$ (fun_app$h (uvn$ ?v0) ?v1) ?v2)))) :named a42))
(assert (! (forall ((?v0 A_a_set_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$i (fun_app$p (uvp$ ?v0) ?v1) ?v2) (member$a ?v2 (fun_app$n ?v0 ?v1))) :pattern ((fun_app$i (fun_app$p (uvp$ ?v0) ?v1) ?v2)))) :named a43))
(assert (! (not (= (fun_app$d lset$ (lconcat$ xss$)) (supremum$a (lset$a xss$) lset$))) :named a44))
(assert (! (forall ((?v0 A_llist$)) (=> (member$ ?v0 (lset$a xss$)) (lfinite$ ?v0))) :named a45))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_a_llist_set_fun$)) (= (member$ ?v0 (supremum$b ?v1 ?v2)) (exists ((?v3 A$)) (and (member$a ?v3 ?v1) (member$ ?v0 (fun_app$k ?v2 ?v3)))))) :named a46))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_a_set_fun$)) (= (member$a ?v0 (supremum$c ?v1 ?v2)) (exists ((?v3 A$)) (and (member$a ?v3 ?v1) (member$a ?v0 (fun_app$n ?v2 ?v3)))))) :named a47))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_set_fun$)) (= (member$ ?v0 (supremum$ ?v1 ?v2)) (exists ((?v3 A_llist$)) (and (member$ ?v3 ?v1) (member$ ?v0 (fun_app$b ?v2 ?v3)))))) :named a48))
(assert (! (forall ((?v0 A$) (?v1 A_llist_set$) (?v2 A_llist_a_set_fun$)) (= (member$a ?v0 (supremum$a ?v1 ?v2)) (exists ((?v3 A_llist$)) (and (member$ ?v3 ?v1) (member$a ?v0 (fun_app$d ?v2 ?v3)))))) :named a49))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_llist$) (?v3 A_a_llist_set_fun$)) (=> (and (member$a ?v0 ?v1) (member$ ?v2 (fun_app$k ?v3 ?v0))) (member$ ?v2 (supremum$b ?v1 ?v3)))) :named a50))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A$) (?v3 A_a_set_fun$)) (=> (and (member$a ?v0 ?v1) (member$a ?v2 (fun_app$n ?v3 ?v0))) (member$a ?v2 (supremum$c ?v1 ?v3)))) :named a51))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist$) (?v3 A_llist_a_llist_set_fun$)) (=> (and (member$ ?v0 ?v1) (member$ ?v2 (fun_app$b ?v3 ?v0))) (member$ ?v2 (supremum$ ?v1 ?v3)))) :named a52))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A$) (?v3 A_llist_a_set_fun$)) (=> (and (member$ ?v0 ?v1) (member$a ?v2 (fun_app$d ?v3 ?v0))) (member$a ?v2 (supremum$a ?v1 ?v3)))) :named a53))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_bool_fun_fun$) (?v2 A$)) (= (fun_app$i (fun_app$ad (supremum$d ?v0) ?v1) ?v2) (supremum$g ?v0 (fun_app$p (uu$ ?v1) ?v2)))) :named a54))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_bool_fun_fun$) (?v2 A_llist$)) (= (fun_app$ (fun_app$am (supremum$h ?v0) ?v1) ?v2) (supremum$f ?v0 (fun_app$a (uua$ ?v1) ?v2)))) :named a55))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_bool_fun_fun$) (?v2 A$)) (= (fun_app$i (fun_app$ag (supremum$e ?v0) ?v1) ?v2) (supremum$f ?v0 (fun_app$h (uub$ ?v1) ?v2)))) :named a56))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_llist_set_fun$) (?v2 A_llist_bool_fun$)) (= (exists ((?v3 A_llist$)) (and (member$ ?v3 (supremum$b ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (exists ((?v3 A$)) (and (member$a ?v3 ?v0) (exists ((?v4 A_llist$)) (and (member$ ?v4 (fun_app$k ?v1 ?v3)) (fun_app$ ?v2 ?v4))))))) :named a57))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$a ?v3 (supremum$c ?v0 ?v1)) (fun_app$i ?v2 ?v3))) (exists ((?v3 A$)) (and (member$a ?v3 ?v0) (exists ((?v4 A$)) (and (member$a ?v4 (fun_app$n ?v1 ?v3)) (fun_app$i ?v2 ?v4))))))) :named a58))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_set_fun$) (?v2 A_llist_bool_fun$)) (= (exists ((?v3 A_llist$)) (and (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (exists ((?v3 A_llist$)) (and (member$ ?v3 ?v0) (exists ((?v4 A_llist$)) (and (member$ ?v4 (fun_app$b ?v1 ?v3)) (fun_app$ ?v2 ?v4))))))) :named a59))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$a ?v3 (supremum$a ?v0 ?v1)) (fun_app$i ?v2 ?v3))) (exists ((?v3 A_llist$)) (and (member$ ?v3 ?v0) (exists ((?v4 A$)) (and (member$a ?v4 (fun_app$d ?v1 ?v3)) (fun_app$i ?v2 ?v4))))))) :named a60))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_llist_set_fun$) (?v2 A_llist_bool_fun$)) (= (exists ((?v3 A_llist$)) (and (member$ ?v3 (supremum$b ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (exists ((?v3 A$)) (and (member$a ?v3 ?v0) (exists ((?v4 A_llist$)) (and (member$ ?v4 (fun_app$k ?v1 ?v3)) (fun_app$ ?v2 ?v4))))))) :named a61))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$a ?v3 (supremum$c ?v0 ?v1)) (fun_app$i ?v2 ?v3))) (exists ((?v3 A$)) (and (member$a ?v3 ?v0) (exists ((?v4 A$)) (and (member$a ?v4 (fun_app$n ?v1 ?v3)) (fun_app$i ?v2 ?v4))))))) :named a62))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_set_fun$) (?v2 A_llist_bool_fun$)) (= (exists ((?v3 A_llist$)) (and (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (exists ((?v3 A_llist$)) (and (member$ ?v3 ?v0) (exists ((?v4 A_llist$)) (and (member$ ?v4 (fun_app$b ?v1 ?v3)) (fun_app$ ?v2 ?v4))))))) :named a63))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$a ?v3 (supremum$a ?v0 ?v1)) (fun_app$i ?v2 ?v3))) (exists ((?v3 A_llist$)) (and (member$ ?v3 ?v0) (exists ((?v4 A$)) (and (member$a ?v4 (fun_app$d ?v1 ?v3)) (fun_app$i ?v2 ?v4))))))) :named a64))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_llist_set_fun$) (?v2 A_llist_bool_fun$)) (= (forall ((?v3 A_llist$)) (=> (member$ ?v3 (supremum$b ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A_llist$)) (=> (member$ ?v4 (fun_app$k ?v1 ?v3)) (fun_app$ ?v2 ?v4))))))) :named a65))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$a ?v3 (supremum$c ?v0 ?v1)) (fun_app$i ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A$)) (=> (member$a ?v4 (fun_app$n ?v1 ?v3)) (fun_app$i ?v2 ?v4))))))) :named a66))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_set_fun$) (?v2 A_llist_bool_fun$)) (= (forall ((?v3 A_llist$)) (=> (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (forall ((?v3 A_llist$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A_llist$)) (=> (member$ ?v4 (fun_app$b ?v1 ?v3)) (fun_app$ ?v2 ?v4))))))) :named a67))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$a ?v3 (supremum$a ?v0 ?v1)) (fun_app$i ?v2 ?v3))) (forall ((?v3 A_llist$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A$)) (=> (member$a ?v4 (fun_app$d ?v1 ?v3)) (fun_app$i ?v2 ?v4))))))) :named a68))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_llist_set_fun$) (?v2 A_llist_bool_fun$)) (= (forall ((?v3 A_llist$)) (=> (member$ ?v3 (supremum$b ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A_llist$)) (=> (member$ ?v4 (fun_app$k ?v1 ?v3)) (fun_app$ ?v2 ?v4))))))) :named a69))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$a ?v3 (supremum$c ?v0 ?v1)) (fun_app$i ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A$)) (=> (member$a ?v4 (fun_app$n ?v1 ?v3)) (fun_app$i ?v2 ?v4))))))) :named a70))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_set_fun$) (?v2 A_llist_bool_fun$)) (= (forall ((?v3 A_llist$)) (=> (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (forall ((?v3 A_llist$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A_llist$)) (=> (member$ ?v4 (fun_app$b ?v1 ?v3)) (fun_app$ ?v2 ?v4))))))) :named a71))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$a ?v3 (supremum$a ?v0 ?v1)) (fun_app$i ?v2 ?v3))) (forall ((?v3 A_llist$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A$)) (=> (member$a ?v4 (fun_app$d ?v1 ?v3)) (fun_app$i ?v2 ?v4))))))) :named a72))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_llist_set_fun$) (?v2 A_llist_a_llist_set_fun$)) (= (supremum$ (supremum$b ?v0 ?v1) ?v2) (supremum$b ?v0 (fun_app$x (uuc$ ?v1) ?v2)))) :named a73))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_a_llist_set_fun$)) (= (supremum$b (supremum$c ?v0 ?v1) ?v2) (supremum$b ?v0 (fun_app$z (uud$ ?v1) ?v2)))) :named a74))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_set_fun$) (?v2 A_a_llist_set_fun$)) (= (supremum$b (supremum$a ?v0 ?v1) ?v2) (supremum$ ?v0 (fun_app$v (uue$ ?v1) ?v2)))) :named a75))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_llist_set_fun$) (?v2 A_llist_a_set_fun$)) (= (supremum$a (supremum$b ?v0 ?v1) ?v2) (supremum$c ?v0 (fun_app$y (uuf$ ?v1) ?v2)))) :named a76))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_set_fun$) (?v2 A_llist_a_llist_set_fun$)) (= (supremum$ (supremum$ ?v0 ?v1) ?v2) (supremum$ ?v0 (fun_app$t (uug$ ?v1) ?v2)))) :named a77))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_a_set_fun$)) (= (supremum$c (supremum$c ?v0 ?v1) ?v2) (supremum$c ?v0 (fun_app$aa (uuh$ ?v1) ?v2)))) :named a78))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_set_fun$) (?v2 A_a_set_fun$)) (= (supremum$c (supremum$a ?v0 ?v1) ?v2) (supremum$a ?v0 (fun_app$w (uui$ ?v1) ?v2)))) :named a79))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_set_fun$) (?v2 A_llist_a_set_fun$)) (= (supremum$a (supremum$ ?v0 ?v1) ?v2) (supremum$a ?v0 (fun_app$u (uuj$ ?v1) ?v2)))) :named a80))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_llist_set_fun$) (?v2 A_llist_a_llist_set_fun$)) (= (supremum$b ?v0 (fun_app$x (uuc$ ?v1) ?v2)) (supremum$ (supremum$b ?v0 ?v1) ?v2))) :named a81))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_a_llist_set_fun$)) (= (supremum$b ?v0 (fun_app$z (uud$ ?v1) ?v2)) (supremum$b (supremum$c ?v0 ?v1) ?v2))) :named a82))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_set_fun$) (?v2 A_a_llist_set_fun$)) (= (supremum$ ?v0 (fun_app$v (uue$ ?v1) ?v2)) (supremum$b (supremum$a ?v0 ?v1) ?v2))) :named a83))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_set_fun$) (?v2 A_llist_a_llist_set_fun$)) (= (supremum$ ?v0 (fun_app$t (uug$ ?v1) ?v2)) (supremum$ (supremum$ ?v0 ?v1) ?v2))) :named a84))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_llist_set_fun$) (?v2 A_llist_a_set_fun$)) (= (supremum$c ?v0 (fun_app$y (uuf$ ?v1) ?v2)) (supremum$a (supremum$b ?v0 ?v1) ?v2))) :named a85))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_a_set_fun$)) (= (supremum$c ?v0 (fun_app$aa (uuh$ ?v1) ?v2)) (supremum$c (supremum$c ?v0 ?v1) ?v2))) :named a86))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_set_fun$) (?v2 A_a_set_fun$)) (= (supremum$a ?v0 (fun_app$w (uui$ ?v1) ?v2)) (supremum$c (supremum$a ?v0 ?v1) ?v2))) :named a87))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_set_fun$) (?v2 A_llist_a_set_fun$)) (= (supremum$a ?v0 (fun_app$u (uuj$ ?v1) ?v2)) (supremum$a (supremum$ ?v0 ?v1) ?v2))) :named a88))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_a_llist_set_fun$)) (=> (and (member$ ?v0 (supremum$b ?v1 ?v2)) (forall ((?v3 A$)) (=> (and (member$a ?v3 ?v1) (member$ ?v0 (fun_app$k ?v2 ?v3))) false))) false)) :named a89))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_a_set_fun$)) (=> (and (member$a ?v0 (supremum$c ?v1 ?v2)) (forall ((?v3 A$)) (=> (and (member$a ?v3 ?v1) (member$a ?v0 (fun_app$n ?v2 ?v3))) false))) false)) :named a90))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_set_fun$)) (=> (and (member$ ?v0 (supremum$ ?v1 ?v2)) (forall ((?v3 A_llist$)) (=> (and (member$ ?v3 ?v1) (member$ ?v0 (fun_app$b ?v2 ?v3))) false))) false)) :named a91))
(assert (! (forall ((?v0 A$) (?v1 A_llist_set$) (?v2 A_llist_a_set_fun$)) (=> (and (member$a ?v0 (supremum$a ?v1 ?v2)) (forall ((?v3 A_llist$)) (=> (and (member$ ?v3 ?v1) (member$a ?v0 (fun_app$d ?v2 ?v3))) false))) false)) :named a92))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_a_llist_set_fun$) (?v3 A_llist_set$)) (=> (and (member$a ?v0 ?v1) (forall ((?v4 A$)) (=> (member$a ?v4 ?v1) (= (fun_app$k ?v2 ?v4) ?v3)))) (= (supremum$b ?v1 ?v2) ?v3))) :named a93))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_set_fun$) (?v3 A_llist_set$)) (=> (and (member$ ?v0 ?v1) (forall ((?v4 A_llist$)) (=> (member$ ?v4 ?v1) (= (fun_app$b ?v2 ?v4) ?v3)))) (= (supremum$ ?v1 ?v2) ?v3))) :named a94))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_a_set_fun$) (?v3 A_set$)) (=> (and (member$a ?v0 ?v1) (forall ((?v4 A$)) (=> (member$a ?v4 ?v1) (= (fun_app$n ?v2 ?v4) ?v3)))) (= (supremum$c ?v1 ?v2) ?v3))) :named a95))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_a_set_fun$) (?v3 A_set$)) (=> (and (member$ ?v0 ?v1) (forall ((?v4 A_llist$)) (=> (member$ ?v4 ?v1) (= (fun_app$d ?v2 ?v4) ?v3)))) (= (supremum$a ?v1 ?v2) ?v3))) :named a96))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_a_set_fun_fun$)) (= (supremum$a ?v0 (fun_app$al (uuk$ ?v1) ?v2)) (supremum$a ?v1 (fun_app$al (uum$ ?v0) ?v2)))) :named a97))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_a_set_fun_fun$)) (= (supremum$c ?v0 (fun_app$ak (uun$ ?v1) ?v2)) (supremum$c ?v1 (fun_app$ak (uup$ ?v0) ?v2)))) :named a98))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_set$) (?v2 A_llist_a_a_set_fun_fun$)) (= (supremum$a ?v0 (fun_app$ap (uuq$ ?v1) ?v2)) (supremum$c ?v1 (fun_app$aj (uus$ ?v0) ?v2)))) :named a99))
(assert (! (forall ((?v0 A_set$) (?v1 A_llist_set$) (?v2 A_a_llist_a_set_fun_fun$)) (= (supremum$c ?v0 (fun_app$an (uut$ ?v1) ?v2)) (supremum$a ?v1 (fun_app$ai (uuv$ ?v0) ?v2)))) :named a100))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_a_llist_set_fun_fun$)) (= (supremum$ ?v0 (fun_app$ah (uuw$ ?v1) ?v2)) (supremum$ ?v1 (fun_app$ah (uuy$ ?v0) ?v2)))) :named a101))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_a_bool_fun_fun_fun$)) (= (fun_app$ag (supremum$e ?v0) (fun_app$af (uuz$ ?v1) ?v2)) (fun_app$ag (supremum$e ?v1) (fun_app$af (uvb$ ?v0) ?v2)))) :named a102))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_a_llist_set_fun_fun$)) (= (supremum$b ?v0 (fun_app$ae (uvc$ ?v1) ?v2)) (supremum$b ?v1 (fun_app$ae (uve$ ?v0) ?v2)))) :named a103))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_bool_fun_fun$)) (= (supremum$f ?v0 (fun_app$am (uvf$ ?v1) ?v2)) (supremum$f ?v1 (fun_app$am (uvg$ ?v0) ?v2)))) :named a104))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_a_bool_fun_fun_fun$)) (= (fun_app$ad (supremum$d ?v0) (fun_app$ac (uvh$ ?v1) ?v2)) (fun_app$ad (supremum$d ?v1) (fun_app$ac (uvj$ ?v0) ?v2)))) :named a105))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_set$) (?v2 A_llist_a_a_llist_set_fun_fun$)) (= (supremum$ ?v0 (fun_app$ao (uvk$ ?v1) ?v2)) (supremum$b ?v1 (fun_app$ab (uvm$ ?v0) ?v2)))) :named a106))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_llist_set_fun$) (?v3 A_a_llist_set_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$a ?v4 ?v1) (= (fun_app$k ?v2 ?v4) (fun_app$k ?v3 ?v4))))) (= (supremum$b ?v0 ?v2) (supremum$b ?v1 ?v3)))) :named a107))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$) (?v2 A_llist_bool_fun$) (?v3 A_llist_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_llist$)) (=> (member$ ?v4 ?v1) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (supremum$f ?v0 ?v2) (supremum$f ?v1 ?v3)))) :named a108))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_bool_fun_fun$) (?v3 A_a_bool_fun_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$a ?v4 ?v1) (= (fun_app$p ?v2 ?v4) (fun_app$p ?v3 ?v4))))) (= (fun_app$ad (supremum$d ?v0) ?v2) (fun_app$ad (supremum$d ?v1) ?v3)))) :named a109))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_bool_fun_fun$) (?v3 A_llist_a_llist_bool_fun_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_llist$)) (=> (member$ ?v4 ?v1) (= (fun_app$a ?v2 ?v4) (fun_app$a ?v3 ?v4))))) (= (fun_app$am (supremum$h ?v0) ?v2) (fun_app$am (supremum$h ?v1) ?v3)))) :named a110))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_set_fun$) (?v3 A_llist_a_llist_set_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_llist$)) (=> (member$ ?v4 ?v1) (= (fun_app$b ?v2 ?v4) (fun_app$b ?v3 ?v4))))) (= (supremum$ ?v0 ?v2) (supremum$ ?v1 ?v3)))) :named a111))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_set_fun$) (?v3 A_a_set_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$a ?v4 ?v1) (= (fun_app$n ?v2 ?v4) (fun_app$n ?v3 ?v4))))) (= (supremum$c ?v0 ?v2) (supremum$c ?v1 ?v3)))) :named a112))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$) (?v2 A_llist_a_bool_fun_fun$) (?v3 A_llist_a_bool_fun_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_llist$)) (=> (member$ ?v4 ?v1) (= (fun_app$f ?v2 ?v4) (fun_app$f ?v3 ?v4))))) (= (fun_app$ag (supremum$e ?v0) ?v2) (fun_app$ag (supremum$e ?v1) ?v3)))) :named a113))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_set$) (?v2 A_llist_a_set_fun$) (?v3 A_llist_a_set_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_llist$)) (=> (member$ ?v4 ?v1) (= (fun_app$d ?v2 ?v4) (fun_app$d ?v3 ?v4))))) (= (supremum$a ?v0 ?v2) (supremum$a ?v1 ?v3)))) :named a114))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_llist_set_fun$) (?v2 A_llist$)) (= (fun_app$ (fun_app$aq (supremum$i ?v0) (uvn$ ?v1)) ?v2) (member$ ?v2 (supremum$b ?v0 ?v1)))) :named a115))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_set_fun$) (?v2 A_llist$)) (= (fun_app$ (fun_app$am (supremum$h ?v0) (uvo$ ?v1)) ?v2) (member$ ?v2 (supremum$ ?v0 ?v1)))) :named a116))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A$)) (= (fun_app$i (fun_app$ad (supremum$d ?v0) (uvp$ ?v1)) ?v2) (member$a ?v2 (supremum$c ?v0 ?v1)))) :named a117))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_set_fun$) (?v2 A$)) (= (fun_app$i (fun_app$ag (supremum$e ?v0) (uvq$ ?v1)) ?v2) (member$a ?v2 (supremum$a ?v0 ?v1)))) :named a118))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$a ?v0 (fun_app$d lset$ ?v1)) (fun_app$ (lmember$ ?v0) ?v1))) :named a119))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (= (member$ ?v0 (lset$a ?v1)) (lmember$a ?v0 ?v1))) :named a120))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$d lset$ ?v0) (collect$ (lsetp$ ?v0))) :pattern ((fun_app$d lset$ ?v0)))) :named a121))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (lset$a ?v0) (collect$a (lsetp$a ?v0))) :pattern ((lset$a ?v0)))) :named a122))
(assert (! (forall ((?v0 A_llist$) (?v1 A_set$) (?v2 A_a_llist_set_fun$)) (= (member$ ?v0 (bind$ ?v1 ?v2)) (member$ ?v0 (supremum$b ?v1 ?v2)))) :named a123))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_set$) (?v2 A_llist_a_llist_set_fun$)) (= (member$ ?v0 (bind$a ?v1 ?v2)) (member$ ?v0 (supremum$ ?v1 ?v2)))) :named a124))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_a_set_fun$)) (= (member$a ?v0 (bind$b ?v1 ?v2)) (member$a ?v0 (supremum$c ?v1 ?v2)))) :named a125))
(assert (! (forall ((?v0 A$) (?v1 A_llist_set$) (?v2 A_llist_a_set_fun$)) (= (member$a ?v0 (bind$c ?v1 ?v2)) (member$a ?v0 (supremum$a ?v1 ?v2)))) :named a126))
(check-sat)
;(get-unsat-core)
