; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 290
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort B_llist_set$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_llist_bool_fun_fun$ 0)
(declare-sort B_llist_a_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))))
(declare-fun p$ () A_b_bool_fun_fun$)
(declare-fun uu$ () B_b_bool_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun uua$ () B_llist_b_llist_bool_fun_fun$)
(declare-fun uub$ () A_a_bool_fun_fun$)
(declare-fun uuc$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lnull$a (B_llist$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun member$a (B_llist$ B_llist_set$) Bool)
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$d (B_bool_fun$ B$) Bool)
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$f (A_bool_fun$ A$) Bool)
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$h (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$i (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$j (B_llist_a_llist_bool_fun_fun$ B_llist$) A_llist_bool_fun$)
(declare-fun fun_app$k (A_llist_b_llist_bool_fun_fun$ A_llist$) B_llist_bool_fun$)
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$) B_llist_bool_fun$)
(declare-fun llist_all2$a (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$b (B_a_bool_fun_fun$ B_llist$) A_llist_bool_fun$)
(declare-fun llist_all2$c (B_b_bool_fun_fun$) B_llist_b_llist_bool_fun_fun$)
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (= (fun_app$ (fun_app$a uua$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uua$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$c uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c uuc$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$d (fun_app$e uu$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (fun_app$e uu$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$f (fun_app$g uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$f (fun_app$g uub$ ?v0) ?v1)))) :named a3))
(assert (! (not (fun_app$ (llist_all2$ p$ xs$) ys$)) :named a4))
(assert (! (= (lnull$ xs$) (lnull$a ys$)) :named a5))
(assert (! (=> (and (not (lnull$ xs$)) (not (lnull$a ys$))) (and (fun_app$d (fun_app$h p$ (lhd$ xs$)) (lhd$a ys$)) (fun_app$ (llist_all2$ p$ (ltl$ xs$)) (ltl$a ys$)))) :named a6))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v1) ?v2) (and (= (lnull$ ?v1) (lnull$ ?v2)) (=> (and (not (lnull$ ?v1)) (not (lnull$ ?v2))) (and (fun_app$f (fun_app$g ?v0 (lhd$ ?v1)) (lhd$ ?v2)) (fun_app$b (fun_app$c (llist_all2$a ?v0) (ltl$ ?v1)) (ltl$ ?v2))))))) :named a7))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$)) (= (fun_app$b (llist_all2$b ?v0 ?v1) ?v2) (and (= (lnull$a ?v1) (lnull$ ?v2)) (=> (and (not (lnull$a ?v1)) (not (lnull$ ?v2))) (and (fun_app$f (fun_app$i ?v0 (lhd$a ?v1)) (lhd$ ?v2)) (fun_app$b (llist_all2$b ?v0 (ltl$a ?v1)) (ltl$ ?v2))))))) :named a8))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (= (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v1) ?v2) (and (= (lnull$a ?v1) (lnull$a ?v2)) (=> (and (not (lnull$a ?v1)) (not (lnull$a ?v2))) (and (fun_app$d (fun_app$e ?v0 (lhd$a ?v1)) (lhd$a ?v2)) (fun_app$ (fun_app$a (llist_all2$c ?v0) (ltl$a ?v1)) (ltl$a ?v2))))))) :named a9))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (= (fun_app$ (llist_all2$ ?v0 ?v1) ?v2) (and (= (lnull$ ?v1) (lnull$a ?v2)) (=> (and (not (lnull$ ?v1)) (not (lnull$a ?v2))) (and (fun_app$d (fun_app$h ?v0 (lhd$ ?v1)) (lhd$a ?v2)) (fun_app$ (llist_all2$ ?v0 (ltl$ ?v1)) (ltl$a ?v2))))))) :named a10))
(assert (! (= (llist_all2$c uu$) uua$) :named a11))
(assert (! (= (llist_all2$a uub$) uuc$) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (lnull$ ?v0) (not (fun_app$f ?v1 (lhd$ ?v0)))) false) (=> (and (not (lnull$ ?v0)) (fun_app$f ?v1 (lhd$ ?v0))) false)) false)) :named a13))
(assert (! (forall ((?v0 B_llist$) (?v1 B_bool_fun$)) (=> (and (=> (or (lnull$a ?v0) (not (fun_app$d ?v1 (lhd$a ?v0)))) false) (=> (and (not (lnull$a ?v0)) (fun_app$d ?v1 (lhd$a ?v0))) false)) false)) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$a ?v1))) false)) false)) :named a16))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$ ?v1))) false)) false)) :named a17))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (=> (or (lnull$a ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a18))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a19))
(assert (! (forall ((?v0 B_llist_set$)) (=> (and (=> (forall ((?v1 B_llist$)) (=> (member$a ?v1 ?v0) (lnull$a ?v1))) false) (=> (not (forall ((?v1 B_llist$)) (=> (member$a ?v1 ?v0) (lnull$a ?v1)))) false)) false)) :named a20))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a21))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a22))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)) :named a23))
(assert (! (forall ((?v0 B_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false)) :named a24))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_b_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v1) ?v2) (forall ((?v4 B$) (?v5 B$)) (=> (fun_app$d (fun_app$e ?v0 ?v4) ?v5) (fun_app$d (fun_app$e ?v3 ?v4) ?v5)))) (fun_app$ (fun_app$a (llist_all2$c ?v3) ?v1) ?v2))) :named a25))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_a_bool_fun_fun$)) (=> (and (fun_app$b (llist_all2$b ?v0 ?v1) ?v2) (forall ((?v4 B$) (?v5 A$)) (=> (fun_app$f (fun_app$i ?v0 ?v4) ?v5) (fun_app$f (fun_app$i ?v3 ?v4) ?v5)))) (fun_app$b (llist_all2$b ?v3 ?v1) ?v2))) :named a26))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 A$)) (=> (fun_app$f (fun_app$g ?v0 ?v4) ?v5) (fun_app$f (fun_app$g ?v3 ?v4) ?v5)))) (fun_app$b (fun_app$c (llist_all2$a ?v3) ?v1) ?v2))) :named a27))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_b_bool_fun_fun$)) (=> (and (fun_app$ (llist_all2$ ?v0 ?v1) ?v2) (forall ((?v4 A$) (?v5 B$)) (=> (fun_app$d (fun_app$h ?v0 ?v4) ?v5) (fun_app$d (fun_app$h ?v3 ?v4) ?v5)))) (fun_app$ (llist_all2$ ?v3 ?v1) ?v2))) :named a28))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v1) ?v2) (not (lnull$ ?v2))) (fun_app$f (fun_app$g ?v0 (lhd$ ?v1)) (lhd$ ?v2)))) :named a29))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (llist_all2$b ?v0 ?v1) ?v2) (not (lnull$ ?v2))) (fun_app$f (fun_app$i ?v0 (lhd$a ?v1)) (lhd$ ?v2)))) :named a30))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v1) ?v2) (not (lnull$a ?v2))) (fun_app$d (fun_app$e ?v0 (lhd$a ?v1)) (lhd$a ?v2)))) :named a31))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (=> (and (fun_app$ (llist_all2$ ?v0 ?v1) ?v2) (not (lnull$a ?v2))) (fun_app$d (fun_app$h ?v0 (lhd$ ?v1)) (lhd$a ?v2)))) :named a32))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v1) ?v2) (not (lnull$ ?v1))) (fun_app$f (fun_app$g ?v0 (lhd$ ?v1)) (lhd$ ?v2)))) :named a33))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (llist_all2$b ?v0 ?v1) ?v2) (not (lnull$a ?v1))) (fun_app$f (fun_app$i ?v0 (lhd$a ?v1)) (lhd$ ?v2)))) :named a34))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v1) ?v2) (not (lnull$a ?v1))) (fun_app$d (fun_app$e ?v0 (lhd$a ?v1)) (lhd$a ?v2)))) :named a35))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (=> (and (fun_app$ (llist_all2$ ?v0 ?v1) ?v2) (not (lnull$ ?v1))) (fun_app$d (fun_app$h ?v0 (lhd$ ?v1)) (lhd$a ?v2)))) :named a36))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v1) ?v2) (fun_app$b (fun_app$c (llist_all2$a ?v0) (ltl$ ?v1)) (ltl$ ?v2)))) :named a37))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$)) (=> (fun_app$b (llist_all2$b ?v0 ?v1) ?v2) (fun_app$b (llist_all2$b ?v0 (ltl$a ?v1)) (ltl$ ?v2)))) :named a38))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v1) ?v2) (fun_app$ (fun_app$a (llist_all2$c ?v0) (ltl$a ?v1)) (ltl$a ?v2)))) :named a39))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (=> (fun_app$ (llist_all2$ ?v0 ?v1) ?v2) (fun_app$ (llist_all2$ ?v0 (ltl$ ?v1)) (ltl$a ?v2)))) :named a40))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$b (fun_app$c (llist_all2$a ?v0) ?v1) ?v2) (= (lnull$ ?v1) (lnull$ ?v2)))) :named a41))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$)) (=> (fun_app$b (llist_all2$b ?v0 ?v1) ?v2) (= (lnull$a ?v1) (lnull$ ?v2)))) :named a42))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v1) ?v2) (= (lnull$a ?v1) (lnull$a ?v2)))) :named a43))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (=> (fun_app$ (llist_all2$ ?v0 ?v1) ?v2) (= (lnull$ ?v1) (lnull$a ?v2)))) :named a44))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (lnull$ ?v0) (lnull$ ?v1)) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1))) :named a45))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (= (lnull$a ?v0) (lnull$a ?v1)) (=> (and (not (lnull$a ?v0)) (not (lnull$a ?v1))) (and (= (lhd$a ?v0) (lhd$a ?v1)) (= (ltl$a ?v0) (ltl$a ?v1))))) (= ?v0 ?v1))) :named a46))
(assert (! (forall ((?v0 A_llist$)) (=> (lnull$ ?v0) (lnull$ (ltl$ ?v0)))) :named a47))
(assert (! (forall ((?v0 B_llist$)) (=> (lnull$a ?v0) (lnull$a (ltl$a ?v0)))) :named a48))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (and (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$b (fun_app$c ?v0 ?v4) ?v5) (= (lnull$ ?v4) (lnull$ ?v5)))) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v4) ?v5) (and (not (lnull$ ?v4)) (not (lnull$ ?v5)))) (and (fun_app$f (fun_app$g ?v3 (lhd$ ?v4)) (lhd$ ?v5)) (or (fun_app$b (fun_app$c ?v0 (ltl$ ?v4)) (ltl$ ?v5)) (fun_app$b (fun_app$c (llist_all2$a ?v3) (ltl$ ?v4)) (ltl$ ?v5)))))))) (fun_app$b (fun_app$c (llist_all2$a ?v3) ?v1) ?v2))) :named a49))
(assert (! (forall ((?v0 B_llist_a_llist_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$j ?v0 ?v1) ?v2) (and (forall ((?v4 B_llist$) (?v5 A_llist$)) (=> (fun_app$b (fun_app$j ?v0 ?v4) ?v5) (= (lnull$a ?v4) (lnull$ ?v5)))) (forall ((?v4 B_llist$) (?v5 A_llist$)) (=> (and (fun_app$b (fun_app$j ?v0 ?v4) ?v5) (and (not (lnull$a ?v4)) (not (lnull$ ?v5)))) (and (fun_app$f (fun_app$i ?v3 (lhd$a ?v4)) (lhd$ ?v5)) (or (fun_app$b (fun_app$j ?v0 (ltl$a ?v4)) (ltl$ ?v5)) (fun_app$b (llist_all2$b ?v3 (ltl$a ?v4)) (ltl$ ?v5)))))))) (fun_app$b (llist_all2$b ?v3 ?v1) ?v2))) :named a50))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_b_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (and (forall ((?v4 B_llist$) (?v5 B_llist$)) (=> (fun_app$ (fun_app$a ?v0 ?v4) ?v5) (= (lnull$a ?v4) (lnull$a ?v5)))) (forall ((?v4 B_llist$) (?v5 B_llist$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v4) ?v5) (and (not (lnull$a ?v4)) (not (lnull$a ?v5)))) (and (fun_app$d (fun_app$e ?v3 (lhd$a ?v4)) (lhd$a ?v5)) (or (fun_app$ (fun_app$a ?v0 (ltl$a ?v4)) (ltl$a ?v5)) (fun_app$ (fun_app$a (llist_all2$c ?v3) (ltl$a ?v4)) (ltl$a ?v5)))))))) (fun_app$ (fun_app$a (llist_all2$c ?v3) ?v1) ?v2))) :named a51))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_b_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$k ?v0 ?v1) ?v2) (and (forall ((?v4 A_llist$) (?v5 B_llist$)) (=> (fun_app$ (fun_app$k ?v0 ?v4) ?v5) (= (lnull$ ?v4) (lnull$a ?v5)))) (forall ((?v4 A_llist$) (?v5 B_llist$)) (=> (and (fun_app$ (fun_app$k ?v0 ?v4) ?v5) (and (not (lnull$ ?v4)) (not (lnull$a ?v5)))) (and (fun_app$d (fun_app$h ?v3 (lhd$ ?v4)) (lhd$a ?v5)) (or (fun_app$ (fun_app$k ?v0 (ltl$ ?v4)) (ltl$a ?v5)) (fun_app$ (llist_all2$ ?v3 (ltl$ ?v4)) (ltl$a ?v5)))))))) (fun_app$ (llist_all2$ ?v3 ?v1) ?v2))) :named a52))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$b (fun_app$c ?v0 ?v4) ?v5) (and (= (lnull$ ?v4) (lnull$ ?v5)) (=> (and (not (lnull$ ?v4)) (not (lnull$ ?v5))) (and (fun_app$f (fun_app$g ?v3 (lhd$ ?v4)) (lhd$ ?v5)) (fun_app$b (fun_app$c ?v0 (ltl$ ?v4)) (ltl$ ?v5)))))))) (fun_app$b (fun_app$c (llist_all2$a ?v3) ?v1) ?v2))) :named a53))
(assert (! (forall ((?v0 B_llist_a_llist_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_a_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$j ?v0 ?v1) ?v2) (forall ((?v4 B_llist$) (?v5 A_llist$)) (=> (fun_app$b (fun_app$j ?v0 ?v4) ?v5) (and (= (lnull$a ?v4) (lnull$ ?v5)) (=> (and (not (lnull$a ?v4)) (not (lnull$ ?v5))) (and (fun_app$f (fun_app$i ?v3 (lhd$a ?v4)) (lhd$ ?v5)) (fun_app$b (fun_app$j ?v0 (ltl$a ?v4)) (ltl$ ?v5)))))))) (fun_app$b (llist_all2$b ?v3 ?v1) ?v2))) :named a54))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_b_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (forall ((?v4 B_llist$) (?v5 B_llist$)) (=> (fun_app$ (fun_app$a ?v0 ?v4) ?v5) (and (= (lnull$a ?v4) (lnull$a ?v5)) (=> (and (not (lnull$a ?v4)) (not (lnull$a ?v5))) (and (fun_app$d (fun_app$e ?v3 (lhd$a ?v4)) (lhd$a ?v5)) (fun_app$ (fun_app$a ?v0 (ltl$a ?v4)) (ltl$a ?v5)))))))) (fun_app$ (fun_app$a (llist_all2$c ?v3) ?v1) ?v2))) :named a55))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_b_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$k ?v0 ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 B_llist$)) (=> (fun_app$ (fun_app$k ?v0 ?v4) ?v5) (and (= (lnull$ ?v4) (lnull$a ?v5)) (=> (and (not (lnull$ ?v4)) (not (lnull$a ?v5))) (and (fun_app$d (fun_app$h ?v3 (lhd$ ?v4)) (lhd$a ?v5)) (fun_app$ (fun_app$k ?v0 (ltl$ ?v4)) (ltl$a ?v5)))))))) (fun_app$ (llist_all2$ ?v3 ?v1) ?v2))) :named a56))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$b (fun_app$c ?v0 ?v3) ?v4) (and (= (lnull$ ?v3) (lnull$ ?v4)) (=> (and (not (lnull$ ?v3)) (not (lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$b (fun_app$c ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))))) (= ?v1 ?v2))) :named a57))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (forall ((?v3 B_llist$) (?v4 B_llist$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (and (= (lnull$a ?v3) (lnull$a ?v4)) (=> (and (not (lnull$a ?v3)) (not (lnull$a ?v4))) (and (= (lhd$a ?v3) (lhd$a ?v4)) (or (fun_app$ (fun_app$a ?v0 (ltl$a ?v3)) (ltl$a ?v4)) (= (ltl$a ?v3) (ltl$a ?v4))))))))) (= ?v1 ?v2))) :named a58))
(check-sat)
;(get-unsat-core)
