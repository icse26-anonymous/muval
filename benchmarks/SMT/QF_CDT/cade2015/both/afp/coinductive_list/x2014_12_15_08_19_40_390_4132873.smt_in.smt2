; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 662
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Nat_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun f$ () A_a_fun$)
(declare-fun na$ () Nat$)
(declare-fun xa$ () A$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun compow$ () Nat_a_a_fun_a_a_fun_fun_fun$)
(declare-fun funpow$ () Nat_a_a_fun_a_a_fun_fun_fun$)
(declare-fun ldropn$ (Nat$) A_llist_a_llist_fun$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$a (A_a_fun$ A$) A$)
(declare-fun fun_app$b (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$c (Nat_a_a_fun_a_a_fun_fun_fun$ Nat$) A_a_fun_a_a_fun_fun$)
(declare-fun iterates$ (A_a_fun$ A$) A_llist$)
(assert (! (not (= (fun_app$ (ldropn$ (suc$ na$)) (iterates$ f$ xa$)) (iterates$ f$ (fun_app$a (fun_app$b (fun_app$c compow$ (suc$ na$)) f$) xa$)))) :named a0))
(assert (! (= (fun_app$ (ldropn$ (suc$ na$)) (iterates$ f$ xa$)) (iterates$ f$ (fun_app$a (fun_app$b (fun_app$c compow$ na$) f$) (fun_app$a f$ xa$)))) :named a1))
(assert (! (forall ((?v0 A$)) (= (fun_app$ (ldropn$ na$) (iterates$ f$ ?v0)) (iterates$ f$ (fun_app$a (fun_app$b (fun_app$c compow$ na$) f$) ?v0)))) :named a2))
(assert (! (= (fun_app$ (ldropn$ (suc$ na$)) (iterates$ f$ xa$)) (fun_app$ (ldropn$ na$) (iterates$ f$ (fun_app$a f$ xa$)))) :named a3))
(assert (! (= (fun_app$ (ldropn$ na$) (iterates$ f$ (fun_app$a f$ xa$))) (iterates$ f$ (fun_app$a (fun_app$b (fun_app$c compow$ na$) f$) (fun_app$a f$ xa$)))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat$) (?v2 A$)) (= (fun_app$a ?v0 (fun_app$a (fun_app$b (fun_app$c compow$ ?v1) ?v0) ?v2)) (fun_app$a (fun_app$b (fun_app$c compow$ ?v1) ?v0) (fun_app$a ?v0 ?v2)))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$ (ldropn$ (suc$ ?v0)) (lCons$ ?v1 ?v2)) (fun_app$ (ldropn$ ?v0) ?v2)) :pattern ((fun_app$ (ldropn$ (suc$ ?v0)) (lCons$ ?v1 ?v2))))) :named a10))
(assert (! (= funpow$ compow$) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (! (= (fun_app$ (ldropn$ (suc$ ?v0)) ?v1) (fun_app$ (ldropn$ ?v0) (ltl$ ?v1))) :pattern ((fun_app$ (ldropn$ (suc$ ?v0)) ?v1)))) :named a12))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (ldropn$ zero$) ?v0) ?v0) :pattern ((fun_app$ (ldropn$ zero$) ?v0)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_llist$)) (= (fun_app$ (ldropn$ ?v0) (fun_app$ (ldropn$ ?v1) ?v2)) (fun_app$ (ldropn$ (plus$ ?v0 ?v1)) ?v2))) :named a14))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (ldropn$ ?v0) lNil$) lNil$) :pattern ((ldropn$ ?v0)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a16))
(check-sat)
;(get-unsat-core)
