; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 451
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_list_set$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort B_list_set$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_a_prod_list_set$ 0)
(declare-sort A_b_prod_bool_fun$ 0)
(declare-sort A_b_prod_list_set$ 0)
(declare-sort B_a_prod_bool_fun$ 0)
(declare-sort B_a_prod_list_set$ 0)
(declare-sort B_b_prod_bool_fun$ 0)
(declare-sort B_b_prod_list_set$ 0)
(declare-sort A_a_a_prod_prod_bool_fun$ 0)
(declare-sort A_a_a_prod_prod_list_set$ 0)
(declare-sort A_a_b_prod_prod_bool_fun$ 0)
(declare-sort A_a_b_prod_prod_list_set$ 0)
(declare-sort B_a_a_prod_prod_bool_fun$ 0)
(declare-sort B_a_a_prod_prod_list_set$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$) (lCons$ (lhd$ A_b_prod$) (ltl$ A_b_prod_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))
  (B_llist$ (lNil$b) (lCons$b (lhd$b B$) (ltl$b B_llist$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))
  (B_list$ (nil$a) (cons$a (hd$a B$) (tl$a B_list$)))
  (A_b_prod_list$ (nil$b) (cons$b (hd$b A_b_prod$) (tl$b A_b_prod_list$)))
  (A_a_prod$ (pair$a (fst$a A$) (snd$a A$)))
  (A_a_prod_list$ (nil$c) (cons$c (hd$c A_a_prod$) (tl$c A_a_prod_list$)))))
(declare-codatatypes () ((A_a_prod_llist$ (lNil$c) (lCons$c (lhd$c A_a_prod$) (ltl$c A_a_prod_llist$)))))
(declare-datatypes () ((B_a_a_prod_prod$ (pair$b (fst$b B$) (snd$b A_a_prod$)))
  (B_a_a_prod_prod_list$ (nil$d) (cons$d (hd$d B_a_a_prod_prod$) (tl$d B_a_a_prod_prod_list$)))
  (B_b_prod$ (pair$c (fst$c B$) (snd$c B$)))
  (B_b_prod_list$ (nil$e) (cons$e (hd$e B_b_prod$) (tl$e B_b_prod_list$)))
  (B_a_prod$ (pair$d (fst$d B$) (snd$d A$)))
  (B_a_prod_list$ (nil$f) (cons$f (hd$f B_a_prod$) (tl$f B_a_prod_list$)))
  (A_a_b_prod_prod$ (pair$e (fst$e A$) (snd$e A_b_prod$)))
  (A_a_b_prod_prod_list$ (nil$g) (cons$g (hd$g A_a_b_prod_prod$) (tl$g A_a_b_prod_prod_list$)))
  (A_a_a_prod_prod$ (pair$f (fst$f A$) (snd$f A_a_prod$)))
  (A_a_a_prod_prod_list$ (nil$h) (cons$h (hd$h A_a_a_prod_prod$) (tl$h A_a_a_prod_prod_list$)))))
(declare-codatatypes () ((B_a_a_prod_prod_llist$ (lNil$d) (lCons$d (lhd$d B_a_a_prod_prod$) (ltl$d B_a_a_prod_prod_llist$)))
  (B_b_prod_llist$ (lNil$e) (lCons$e (lhd$e B_b_prod$) (ltl$e B_b_prod_llist$)))
  (B_a_prod_llist$ (lNil$f) (lCons$f (lhd$f B_a_prod$) (ltl$f B_a_prod_llist$)))
  (A_a_b_prod_prod_llist$ (lNil$g) (lCons$g (lhd$g A_a_b_prod_prod$) (ltl$g A_a_b_prod_prod_llist$)))
  (A_a_a_prod_prod_llist$ (lNil$h) (lCons$h (lhd$h A_a_a_prod_prod$) (ltl$h A_a_a_prod_prod_llist$)))))
(declare-datatypes () ((A_b_prod_a_prod$ (pair$g (fst$g A_b_prod$) (snd$g A$)))
  (A_b_prod_a_prod_list$ (nil$i) (cons$i (hd$i A_b_prod_a_prod$) (tl$i A_b_prod_a_prod_list$)))
  (A_b_prod_b_prod$ (pair$h (fst$h A_b_prod$) (snd$h B$)))
  (A_b_prod_b_prod_list$ (nil$j) (cons$j (hd$j A_b_prod_b_prod$) (tl$j A_b_prod_b_prod_list$)))
  (B_a_b_prod_prod$ (pair$i (fst$i B$) (snd$i A_b_prod$)))
  (B_a_b_prod_prod_list$ (nil$k) (cons$k (hd$k B_a_b_prod_prod$) (tl$k B_a_b_prod_prod_list$)))))
(declare-fun x$ () A$)
(declare-fun xs$ () A_list$)
(declare-fun ysa$ () B_list$)
(declare-fun zip$ (A_list$ B_list$) A_b_prod_list$)
(declare-fun lzip$ (A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun null$ (B_a_a_prod_prod_list$) Bool)
(declare-fun zip$a (A_list$ A_list$) A_a_prod_list$)
(declare-fun zip$b (B_list$ A_list$) B_a_prod_list$)
(declare-fun zip$c (B_list$ B_list$) B_b_prod_list$)
(declare-fun zip$d (A_list$ A_b_prod_list$) A_a_b_prod_prod_list$)
(declare-fun zip$e (A_list$ A_a_prod_list$) A_a_a_prod_prod_list$)
(declare-fun zip$f (A_b_prod_list$ A_list$) A_b_prod_a_prod_list$)
(declare-fun zip$g (A_b_prod_list$ B_list$) A_b_prod_b_prod_list$)
(declare-fun zip$h (B_list$ A_b_prod_list$) B_a_b_prod_prod_list$)
(declare-fun zip$i (B_list$ A_a_prod_list$) B_a_a_prod_prod_list$)
(declare-fun null$a (B_b_prod_list$) Bool)
(declare-fun null$b (B_a_prod_list$) Bool)
(declare-fun null$c (A_a_b_prod_prod_list$) Bool)
(declare-fun null$d (A_a_a_prod_prod_list$) Bool)
(declare-fun null$e (A_b_prod_list$) Bool)
(declare-fun null$f (B_list$) Bool)
(declare-fun null$g (A_a_prod_list$) Bool)
(declare-fun null$h (A_list$) Bool)
(declare-fun shift$ (B_a_a_prod_prod_list_set$ B_a_a_prod_prod$) B_a_a_prod_prod_list_set$)
(declare-fun member$ (B_a_a_prod_prod_list$) B_a_a_prod_prod_bool_fun$)
(declare-fun shift$a (B_b_prod_list_set$ B_b_prod$) B_b_prod_list_set$)
(declare-fun shift$b (B_a_prod_list_set$ B_a_prod$) B_a_prod_list_set$)
(declare-fun shift$c (A_a_b_prod_prod_list_set$ A_a_b_prod_prod$) A_a_b_prod_prod_list_set$)
(declare-fun shift$d (A_a_a_prod_prod_list_set$ A_a_a_prod_prod$) A_a_a_prod_prod_list_set$)
(declare-fun shift$e (A_b_prod_list_set$ A_b_prod$) A_b_prod_list_set$)
(declare-fun shift$f (B_list_set$ B$) B_list_set$)
(declare-fun shift$g (A_a_prod_list_set$ A_a_prod$) A_a_prod_list_set$)
(declare-fun shift$h (A_list_set$ A$) A_list_set$)
(declare-fun fun_app$ (B_a_a_prod_prod_bool_fun$ B_a_a_prod_prod$) Bool)
(declare-fun lfinite$ (A_a_prod_llist$) Bool)
(declare-fun list_ex$ (B_a_a_prod_prod_bool_fun$ B_a_a_prod_prod_list$) Bool)
(declare-fun list_of$ (A_a_prod_llist$) A_a_prod_list$)
(declare-fun member$a (B_b_prod_list$) B_b_prod_bool_fun$)
(declare-fun member$b (B_a_prod_list$) B_a_prod_bool_fun$)
(declare-fun member$c (A_a_b_prod_prod_list$) A_a_b_prod_prod_bool_fun$)
(declare-fun member$d (A_a_a_prod_prod_list$) A_a_a_prod_prod_bool_fun$)
(declare-fun member$e (A_b_prod_list$) A_b_prod_bool_fun$)
(declare-fun member$f (B_list$) B_bool_fun$)
(declare-fun member$g (A_a_prod_list$) A_a_prod_bool_fun$)
(declare-fun member$h (A_list$) A_bool_fun$)
(declare-fun member$i (B_a_a_prod_prod_list$ B_a_a_prod_prod_list_set$) Bool)
(declare-fun member$j (B_b_prod_list$ B_b_prod_list_set$) Bool)
(declare-fun member$k (B_a_prod_list$ B_a_prod_list_set$) Bool)
(declare-fun member$l (A_a_b_prod_prod_list$ A_a_b_prod_prod_list_set$) Bool)
(declare-fun member$m (A_a_a_prod_prod_list$ A_a_a_prod_prod_list_set$) Bool)
(declare-fun member$n (A_b_prod_list$ A_b_prod_list_set$) Bool)
(declare-fun member$o (B_list$ B_list_set$) Bool)
(declare-fun member$p (A_a_prod_list$ A_a_prod_list_set$) Bool)
(declare-fun member$q (A_list$ A_list_set$) Bool)
(declare-fun fun_app$a (B_b_prod_bool_fun$ B_b_prod$) Bool)
(declare-fun fun_app$b (B_a_prod_bool_fun$ B_a_prod$) Bool)
(declare-fun fun_app$c (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod$) Bool)
(declare-fun fun_app$d (A_a_a_prod_prod_bool_fun$ A_a_a_prod_prod$) Bool)
(declare-fun fun_app$e (A_b_prod_bool_fun$ A_b_prod$) Bool)
(declare-fun fun_app$f (B_bool_fun$ B$) Bool)
(declare-fun fun_app$g (A_a_prod_bool_fun$ A_a_prod$) Bool)
(declare-fun fun_app$h (A_bool_fun$ A$) Bool)
(declare-fun lfinite$a (A_llist$) Bool)
(declare-fun lfinite$b (B_llist$) Bool)
(declare-fun lfinite$c (A_b_prod_llist$) Bool)
(declare-fun list_ex$a (B_b_prod_bool_fun$ B_b_prod_list$) Bool)
(declare-fun list_ex$b (B_a_prod_bool_fun$ B_a_prod_list$) Bool)
(declare-fun list_ex$c (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod_list$) Bool)
(declare-fun list_ex$d (A_a_a_prod_prod_bool_fun$ A_a_a_prod_prod_list$) Bool)
(declare-fun list_ex$e (A_b_prod_bool_fun$ A_b_prod_list$) Bool)
(declare-fun list_ex$f (B_bool_fun$ B_list$) Bool)
(declare-fun list_ex$g (A_a_prod_bool_fun$ A_a_prod_list$) Bool)
(declare-fun list_ex$h (A_bool_fun$ A_list$) Bool)
(declare-fun list_of$a (A_llist$) A_list$)
(declare-fun list_of$b (B_llist$) B_list$)
(declare-fun list_of$c (A_b_prod_llist$) A_b_prod_list$)
(declare-fun llist_of$ (A_list$) A_llist$)
(declare-fun llist_of$a (B_list$) B_llist$)
(declare-fun llist_of$b (A_b_prod_list$) A_b_prod_llist$)
(declare-fun llist_of$c (A_a_prod_list$) A_a_prod_llist$)
(declare-fun llist_of$d (B_a_a_prod_prod_list$) B_a_a_prod_prod_llist$)
(declare-fun llist_of$e (B_b_prod_list$) B_b_prod_llist$)
(declare-fun llist_of$f (B_a_prod_list$) B_a_prod_llist$)
(declare-fun llist_of$g (A_a_b_prod_prod_list$) A_a_b_prod_prod_llist$)
(declare-fun llist_of$h (A_a_a_prod_prod_list$) A_a_a_prod_prod_llist$)
(assert (! (not (= (lzip$ (llist_of$ (cons$ x$ xs$)) (llist_of$a ysa$)) (llist_of$b (zip$ (cons$ x$ xs$) ysa$)))) :named a0))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 A_a_prod_list$)) (= (= (llist_of$c ?v0) (llist_of$c ?v1)) (= ?v0 ?v1))) :named a1))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 B_list$) (?v1 B_list$)) (= (= (llist_of$a ?v0) (llist_of$a ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$)) (= (= (llist_of$b ?v0) (llist_of$b ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 B_list$)) (= (lzip$ (llist_of$ xs$) (llist_of$a ?v0)) (llist_of$b (zip$ xs$ ?v0)))) :named a5))
(assert (! (forall ((?v0 B_a_a_prod_prod$) (?v1 B_a_a_prod_prod_list$) (?v2 B_a_a_prod_prod$) (?v3 B_a_a_prod_prod_list$)) (= (= (cons$d ?v0 ?v1) (cons$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a6))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_list$) (?v2 B_b_prod$) (?v3 B_b_prod_list$)) (= (= (cons$e ?v0 ?v1) (cons$e ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a7))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_list$) (?v2 B_a_prod$) (?v3 B_a_prod_list$)) (= (= (cons$f ?v0 ?v1) (cons$f ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a8))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_b_prod_prod_list$) (?v2 A_a_b_prod_prod$) (?v3 A_a_b_prod_prod_list$)) (= (= (cons$g ?v0 ?v1) (cons$g ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a9))
(assert (! (forall ((?v0 A_a_a_prod_prod$) (?v1 A_a_a_prod_prod_list$) (?v2 A_a_a_prod_prod$) (?v3 A_a_a_prod_prod_list$)) (= (= (cons$h ?v0 ?v1) (cons$h ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a10))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_list$) (?v2 A_b_prod$) (?v3 A_b_prod_list$)) (= (= (cons$b ?v0 ?v1) (cons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a11))
(assert (! (forall ((?v0 B$) (?v1 B_list$) (?v2 B$) (?v3 B_list$)) (= (= (cons$a ?v0 ?v1) (cons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_list$) (?v2 A_a_prod$) (?v3 A_a_prod_list$)) (= (= (cons$c ?v0 ?v1) (cons$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 B_a_a_prod_prod$) (?v1 B_a_a_prod_prod_list$)) (not (= (cons$d ?v0 ?v1) ?v1))) :named a15))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_list$)) (not (= (cons$e ?v0 ?v1) ?v1))) :named a16))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_list$)) (not (= (cons$f ?v0 ?v1) ?v1))) :named a17))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_b_prod_prod_list$)) (not (= (cons$g ?v0 ?v1) ?v1))) :named a18))
(assert (! (forall ((?v0 A_a_a_prod_prod$) (?v1 A_a_a_prod_prod_list$)) (not (= (cons$h ?v0 ?v1) ?v1))) :named a19))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_list$)) (not (= (cons$b ?v0 ?v1) ?v1))) :named a20))
(assert (! (forall ((?v0 B$) (?v1 B_list$)) (not (= (cons$a ?v0 ?v1) ?v1))) :named a21))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_list$)) (not (= (cons$c ?v0 ?v1) ?v1))) :named a22))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (not (= (cons$ ?v0 ?v1) ?v1))) :named a23))
(assert (! (forall ((?v0 A_a_prod_list$)) (= (list_of$ (llist_of$c ?v0)) ?v0)) :named a24))
(assert (! (forall ((?v0 A_list$)) (= (list_of$a (llist_of$ ?v0)) ?v0)) :named a25))
(assert (! (forall ((?v0 B_list$)) (= (list_of$b (llist_of$a ?v0)) ?v0)) :named a26))
(assert (! (forall ((?v0 A_b_prod_list$)) (= (list_of$c (llist_of$b ?v0)) ?v0)) :named a27))
(assert (! (forall ((?v0 B_a_a_prod_prod_list$) (?v1 B_a_a_prod_prod$) (?v2 B_a_a_prod_prod_llist$)) (= (= (llist_of$d ?v0) (lCons$d ?v1 ?v2)) (exists ((?v3 B_a_a_prod_prod_list$)) (and (= ?v0 (cons$d ?v1 ?v3)) (= ?v2 (llist_of$d ?v3)))))) :named a28))
(assert (! (forall ((?v0 B_b_prod_list$) (?v1 B_b_prod$) (?v2 B_b_prod_llist$)) (= (= (llist_of$e ?v0) (lCons$e ?v1 ?v2)) (exists ((?v3 B_b_prod_list$)) (and (= ?v0 (cons$e ?v1 ?v3)) (= ?v2 (llist_of$e ?v3)))))) :named a29))
(assert (! (forall ((?v0 B_a_prod_list$) (?v1 B_a_prod$) (?v2 B_a_prod_llist$)) (= (= (llist_of$f ?v0) (lCons$f ?v1 ?v2)) (exists ((?v3 B_a_prod_list$)) (and (= ?v0 (cons$f ?v1 ?v3)) (= ?v2 (llist_of$f ?v3)))))) :named a30))
(assert (! (forall ((?v0 A_a_b_prod_prod_list$) (?v1 A_a_b_prod_prod$) (?v2 A_a_b_prod_prod_llist$)) (= (= (llist_of$g ?v0) (lCons$g ?v1 ?v2)) (exists ((?v3 A_a_b_prod_prod_list$)) (and (= ?v0 (cons$g ?v1 ?v3)) (= ?v2 (llist_of$g ?v3)))))) :named a31))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$) (?v1 A_a_a_prod_prod$) (?v2 A_a_a_prod_prod_llist$)) (= (= (llist_of$h ?v0) (lCons$h ?v1 ?v2)) (exists ((?v3 A_a_a_prod_prod_list$)) (and (= ?v0 (cons$h ?v1 ?v3)) (= ?v2 (llist_of$h ?v3)))))) :named a32))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 A_a_prod$) (?v2 A_a_prod_llist$)) (= (= (llist_of$c ?v0) (lCons$c ?v1 ?v2)) (exists ((?v3 A_a_prod_list$)) (and (= ?v0 (cons$c ?v1 ?v3)) (= ?v2 (llist_of$c ?v3)))))) :named a33))
(assert (! (forall ((?v0 A_list$) (?v1 A$) (?v2 A_llist$)) (= (= (llist_of$ ?v0) (lCons$a ?v1 ?v2)) (exists ((?v3 A_list$)) (and (= ?v0 (cons$ ?v1 ?v3)) (= ?v2 (llist_of$ ?v3)))))) :named a34))
(assert (! (forall ((?v0 B_list$) (?v1 B$) (?v2 B_llist$)) (= (= (llist_of$a ?v0) (lCons$b ?v1 ?v2)) (exists ((?v3 B_list$)) (and (= ?v0 (cons$a ?v1 ?v3)) (= ?v2 (llist_of$a ?v3)))))) :named a35))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod$) (?v2 A_b_prod_llist$)) (= (= (llist_of$b ?v0) (lCons$ ?v1 ?v2)) (exists ((?v3 A_b_prod_list$)) (and (= ?v0 (cons$b ?v1 ?v3)) (= ?v2 (llist_of$b ?v3)))))) :named a36))
(assert (! (forall ((?v0 B_a_a_prod_prod$) (?v1 B_a_a_prod_prod_list$)) (! (= (llist_of$d (cons$d ?v0 ?v1)) (lCons$d ?v0 (llist_of$d ?v1))) :pattern ((cons$d ?v0 ?v1)))) :named a37))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_list$)) (! (= (llist_of$e (cons$e ?v0 ?v1)) (lCons$e ?v0 (llist_of$e ?v1))) :pattern ((cons$e ?v0 ?v1)))) :named a38))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_list$)) (! (= (llist_of$f (cons$f ?v0 ?v1)) (lCons$f ?v0 (llist_of$f ?v1))) :pattern ((cons$f ?v0 ?v1)))) :named a39))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_b_prod_prod_list$)) (! (= (llist_of$g (cons$g ?v0 ?v1)) (lCons$g ?v0 (llist_of$g ?v1))) :pattern ((cons$g ?v0 ?v1)))) :named a40))
(assert (! (forall ((?v0 A_a_a_prod_prod$) (?v1 A_a_a_prod_prod_list$)) (! (= (llist_of$h (cons$h ?v0 ?v1)) (lCons$h ?v0 (llist_of$h ?v1))) :pattern ((cons$h ?v0 ?v1)))) :named a41))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_list$)) (! (= (llist_of$c (cons$c ?v0 ?v1)) (lCons$c ?v0 (llist_of$c ?v1))) :pattern ((cons$c ?v0 ?v1)))) :named a42))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (= (llist_of$ (cons$ ?v0 ?v1)) (lCons$a ?v0 (llist_of$ ?v1))) :pattern ((cons$ ?v0 ?v1)))) :named a43))
(assert (! (forall ((?v0 B$) (?v1 B_list$)) (! (= (llist_of$a (cons$a ?v0 ?v1)) (lCons$b ?v0 (llist_of$a ?v1))) :pattern ((cons$a ?v0 ?v1)))) :named a44))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_list$)) (! (= (llist_of$b (cons$b ?v0 ?v1)) (lCons$ ?v0 (llist_of$b ?v1))) :pattern ((cons$b ?v0 ?v1)))) :named a45))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 B$) (?v3 B_list$)) (! (= (zip$ (cons$ ?v0 ?v1) (cons$a ?v2 ?v3)) (cons$b (pair$ ?v0 ?v2) (zip$ ?v1 ?v3))) :pattern ((zip$ (cons$ ?v0 ?v1) (cons$a ?v2 ?v3))))) :named a46))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (! (= (zip$a (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (cons$c (pair$a ?v0 ?v2) (zip$a ?v1 ?v3))) :pattern ((zip$a (cons$ ?v0 ?v1) (cons$ ?v2 ?v3))))) :named a47))
(assert (! (forall ((?v0 B$) (?v1 B_list$) (?v2 A$) (?v3 A_list$)) (! (= (zip$b (cons$a ?v0 ?v1) (cons$ ?v2 ?v3)) (cons$f (pair$d ?v0 ?v2) (zip$b ?v1 ?v3))) :pattern ((zip$b (cons$a ?v0 ?v1) (cons$ ?v2 ?v3))))) :named a48))
(assert (! (forall ((?v0 B$) (?v1 B_list$) (?v2 B$) (?v3 B_list$)) (! (= (zip$c (cons$a ?v0 ?v1) (cons$a ?v2 ?v3)) (cons$e (pair$c ?v0 ?v2) (zip$c ?v1 ?v3))) :pattern ((zip$c (cons$a ?v0 ?v1) (cons$a ?v2 ?v3))))) :named a49))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A_b_prod$) (?v3 A_b_prod_list$)) (! (= (zip$d (cons$ ?v0 ?v1) (cons$b ?v2 ?v3)) (cons$g (pair$e ?v0 ?v2) (zip$d ?v1 ?v3))) :pattern ((zip$d (cons$ ?v0 ?v1) (cons$b ?v2 ?v3))))) :named a50))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A_a_prod$) (?v3 A_a_prod_list$)) (! (= (zip$e (cons$ ?v0 ?v1) (cons$c ?v2 ?v3)) (cons$h (pair$f ?v0 ?v2) (zip$e ?v1 ?v3))) :pattern ((zip$e (cons$ ?v0 ?v1) (cons$c ?v2 ?v3))))) :named a51))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_list$) (?v2 A$) (?v3 A_list$)) (! (= (zip$f (cons$b ?v0 ?v1) (cons$ ?v2 ?v3)) (cons$i (pair$g ?v0 ?v2) (zip$f ?v1 ?v3))) :pattern ((zip$f (cons$b ?v0 ?v1) (cons$ ?v2 ?v3))))) :named a52))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_list$) (?v2 B$) (?v3 B_list$)) (! (= (zip$g (cons$b ?v0 ?v1) (cons$a ?v2 ?v3)) (cons$j (pair$h ?v0 ?v2) (zip$g ?v1 ?v3))) :pattern ((zip$g (cons$b ?v0 ?v1) (cons$a ?v2 ?v3))))) :named a53))
(assert (! (forall ((?v0 B$) (?v1 B_list$) (?v2 A_b_prod$) (?v3 A_b_prod_list$)) (! (= (zip$h (cons$a ?v0 ?v1) (cons$b ?v2 ?v3)) (cons$k (pair$i ?v0 ?v2) (zip$h ?v1 ?v3))) :pattern ((zip$h (cons$a ?v0 ?v1) (cons$b ?v2 ?v3))))) :named a54))
(assert (! (forall ((?v0 B$) (?v1 B_list$) (?v2 A_a_prod$) (?v3 A_a_prod_list$)) (! (= (zip$i (cons$a ?v0 ?v1) (cons$c ?v2 ?v3)) (cons$d (pair$b ?v0 ?v2) (zip$i ?v1 ?v3))) :pattern ((zip$i (cons$a ?v0 ?v1) (cons$c ?v2 ?v3))))) :named a55))
(assert (! (forall ((?v0 B_a_a_prod_prod$) (?v1 B_a_a_prod_prod_list$) (?v2 B_a_a_prod_prod$)) (! (= (fun_app$ (member$ (cons$d ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$ (member$ ?v1) ?v2))) :pattern ((fun_app$ (member$ (cons$d ?v0 ?v1)) ?v2)))) :named a56))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_list$) (?v2 B_b_prod$)) (! (= (fun_app$a (member$a (cons$e ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$a (member$a ?v1) ?v2))) :pattern ((fun_app$a (member$a (cons$e ?v0 ?v1)) ?v2)))) :named a57))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_list$) (?v2 B_a_prod$)) (! (= (fun_app$b (member$b (cons$f ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$b (member$b ?v1) ?v2))) :pattern ((fun_app$b (member$b (cons$f ?v0 ?v1)) ?v2)))) :named a58))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_b_prod_prod_list$) (?v2 A_a_b_prod_prod$)) (! (= (fun_app$c (member$c (cons$g ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$c (member$c ?v1) ?v2))) :pattern ((fun_app$c (member$c (cons$g ?v0 ?v1)) ?v2)))) :named a59))
(assert (! (forall ((?v0 A_a_a_prod_prod$) (?v1 A_a_a_prod_prod_list$) (?v2 A_a_a_prod_prod$)) (! (= (fun_app$d (member$d (cons$h ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$d (member$d ?v1) ?v2))) :pattern ((fun_app$d (member$d (cons$h ?v0 ?v1)) ?v2)))) :named a60))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_list$) (?v2 A_b_prod$)) (! (= (fun_app$e (member$e (cons$b ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$e (member$e ?v1) ?v2))) :pattern ((fun_app$e (member$e (cons$b ?v0 ?v1)) ?v2)))) :named a61))
(assert (! (forall ((?v0 B$) (?v1 B_list$) (?v2 B$)) (! (= (fun_app$f (member$f (cons$a ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$f (member$f ?v1) ?v2))) :pattern ((fun_app$f (member$f (cons$a ?v0 ?v1)) ?v2)))) :named a62))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_list$) (?v2 A_a_prod$)) (! (= (fun_app$g (member$g (cons$c ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$g (member$g ?v1) ?v2))) :pattern ((fun_app$g (member$g (cons$c ?v0 ?v1)) ?v2)))) :named a63))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A$)) (! (= (fun_app$h (member$h (cons$ ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$h (member$h ?v1) ?v2))) :pattern ((fun_app$h (member$h (cons$ ?v0 ?v1)) ?v2)))) :named a64))
(assert (! (forall ((?v0 B_a_a_prod_prod_list$) (?v1 B_a_a_prod_prod_list_set$) (?v2 B_a_a_prod_prod$)) (=> (member$i ?v0 (shift$ ?v1 ?v2)) (member$i (cons$d ?v2 ?v0) ?v1))) :named a65))
(assert (! (forall ((?v0 B_b_prod_list$) (?v1 B_b_prod_list_set$) (?v2 B_b_prod$)) (=> (member$j ?v0 (shift$a ?v1 ?v2)) (member$j (cons$e ?v2 ?v0) ?v1))) :named a66))
(assert (! (forall ((?v0 B_a_prod_list$) (?v1 B_a_prod_list_set$) (?v2 B_a_prod$)) (=> (member$k ?v0 (shift$b ?v1 ?v2)) (member$k (cons$f ?v2 ?v0) ?v1))) :named a67))
(assert (! (forall ((?v0 A_a_b_prod_prod_list$) (?v1 A_a_b_prod_prod_list_set$) (?v2 A_a_b_prod_prod$)) (=> (member$l ?v0 (shift$c ?v1 ?v2)) (member$l (cons$g ?v2 ?v0) ?v1))) :named a68))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$) (?v1 A_a_a_prod_prod_list_set$) (?v2 A_a_a_prod_prod$)) (=> (member$m ?v0 (shift$d ?v1 ?v2)) (member$m (cons$h ?v2 ?v0) ?v1))) :named a69))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list_set$) (?v2 A_b_prod$)) (=> (member$n ?v0 (shift$e ?v1 ?v2)) (member$n (cons$b ?v2 ?v0) ?v1))) :named a70))
(assert (! (forall ((?v0 B_list$) (?v1 B_list_set$) (?v2 B$)) (=> (member$o ?v0 (shift$f ?v1 ?v2)) (member$o (cons$a ?v2 ?v0) ?v1))) :named a71))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 A_a_prod_list_set$) (?v2 A_a_prod$)) (=> (member$p ?v0 (shift$g ?v1 ?v2)) (member$p (cons$c ?v2 ?v0) ?v1))) :named a72))
(assert (! (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A$)) (=> (member$q ?v0 (shift$h ?v1 ?v2)) (member$q (cons$ ?v2 ?v0) ?v1))) :named a73))
(assert (! (forall ((?v0 A_a_prod_list$)) (lfinite$ (llist_of$c ?v0))) :named a74))
(assert (! (forall ((?v0 A_list$)) (lfinite$a (llist_of$ ?v0))) :named a75))
(assert (! (forall ((?v0 B_list$)) (lfinite$b (llist_of$a ?v0))) :named a76))
(assert (! (forall ((?v0 A_b_prod_list$)) (lfinite$c (llist_of$b ?v0))) :named a77))
(assert (! (forall ((?v0 B_a_a_prod_prod$) (?v1 B_a_a_prod_prod_list$)) (! (= (null$ (cons$d ?v0 ?v1)) false) :pattern ((cons$d ?v0 ?v1)))) :named a78))
(assert (! (forall ((?v0 B_b_prod$) (?v1 B_b_prod_list$)) (! (= (null$a (cons$e ?v0 ?v1)) false) :pattern ((cons$e ?v0 ?v1)))) :named a79))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_prod_list$)) (! (= (null$b (cons$f ?v0 ?v1)) false) :pattern ((cons$f ?v0 ?v1)))) :named a80))
(assert (! (forall ((?v0 A_a_b_prod_prod$) (?v1 A_a_b_prod_prod_list$)) (! (= (null$c (cons$g ?v0 ?v1)) false) :pattern ((cons$g ?v0 ?v1)))) :named a81))
(assert (! (forall ((?v0 A_a_a_prod_prod$) (?v1 A_a_a_prod_prod_list$)) (! (= (null$d (cons$h ?v0 ?v1)) false) :pattern ((cons$h ?v0 ?v1)))) :named a82))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_list$)) (! (= (null$e (cons$b ?v0 ?v1)) false) :pattern ((cons$b ?v0 ?v1)))) :named a83))
(assert (! (forall ((?v0 B$) (?v1 B_list$)) (! (= (null$f (cons$a ?v0 ?v1)) false) :pattern ((cons$a ?v0 ?v1)))) :named a84))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_list$)) (! (= (null$g (cons$c ?v0 ?v1)) false) :pattern ((cons$c ?v0 ?v1)))) :named a85))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (= (null$h (cons$ ?v0 ?v1)) false) :pattern ((cons$ ?v0 ?v1)))) :named a86))
(assert (! (forall ((?v0 B_a_a_prod_prod_bool_fun$) (?v1 B_a_a_prod_prod$) (?v2 B_a_a_prod_prod_list$)) (! (= (list_ex$ ?v0 (cons$d ?v1 ?v2)) (or (fun_app$ ?v0 ?v1) (list_ex$ ?v0 ?v2))) :pattern ((list_ex$ ?v0 (cons$d ?v1 ?v2))))) :named a87))
(assert (! (forall ((?v0 B_b_prod_bool_fun$) (?v1 B_b_prod$) (?v2 B_b_prod_list$)) (! (= (list_ex$a ?v0 (cons$e ?v1 ?v2)) (or (fun_app$a ?v0 ?v1) (list_ex$a ?v0 ?v2))) :pattern ((list_ex$a ?v0 (cons$e ?v1 ?v2))))) :named a88))
(assert (! (forall ((?v0 B_a_prod_bool_fun$) (?v1 B_a_prod$) (?v2 B_a_prod_list$)) (! (= (list_ex$b ?v0 (cons$f ?v1 ?v2)) (or (fun_app$b ?v0 ?v1) (list_ex$b ?v0 ?v2))) :pattern ((list_ex$b ?v0 (cons$f ?v1 ?v2))))) :named a89))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$) (?v1 A_a_b_prod_prod$) (?v2 A_a_b_prod_prod_list$)) (! (= (list_ex$c ?v0 (cons$g ?v1 ?v2)) (or (fun_app$c ?v0 ?v1) (list_ex$c ?v0 ?v2))) :pattern ((list_ex$c ?v0 (cons$g ?v1 ?v2))))) :named a90))
(assert (! (forall ((?v0 A_a_a_prod_prod_bool_fun$) (?v1 A_a_a_prod_prod$) (?v2 A_a_a_prod_prod_list$)) (! (= (list_ex$d ?v0 (cons$h ?v1 ?v2)) (or (fun_app$d ?v0 ?v1) (list_ex$d ?v0 ?v2))) :pattern ((list_ex$d ?v0 (cons$h ?v1 ?v2))))) :named a91))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A_b_prod$) (?v2 A_b_prod_list$)) (! (= (list_ex$e ?v0 (cons$b ?v1 ?v2)) (or (fun_app$e ?v0 ?v1) (list_ex$e ?v0 ?v2))) :pattern ((list_ex$e ?v0 (cons$b ?v1 ?v2))))) :named a92))
(assert (! (forall ((?v0 B_bool_fun$) (?v1 B$) (?v2 B_list$)) (! (= (list_ex$f ?v0 (cons$a ?v1 ?v2)) (or (fun_app$f ?v0 ?v1) (list_ex$f ?v0 ?v2))) :pattern ((list_ex$f ?v0 (cons$a ?v1 ?v2))))) :named a93))
(assert (! (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod$) (?v2 A_a_prod_list$)) (! (= (list_ex$g ?v0 (cons$c ?v1 ?v2)) (or (fun_app$g ?v0 ?v1) (list_ex$g ?v0 ?v2))) :pattern ((list_ex$g ?v0 (cons$c ?v1 ?v2))))) :named a94))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_list$)) (! (= (list_ex$h ?v0 (cons$ ?v1 ?v2)) (or (fun_app$h ?v0 ?v1) (list_ex$h ?v0 ?v2))) :pattern ((list_ex$h ?v0 (cons$ ?v1 ?v2))))) :named a95))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$) (?v2 A_a_prod$) (?v3 A_a_prod_llist$)) (= (= (lCons$c ?v0 ?v1) (lCons$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a96))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$) (?v2 A_b_prod$) (?v3 A_b_prod_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a97))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (= (= (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a98))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a99))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (lfinite$ (lCons$c ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$c ?v0 ?v1)))) :named a100))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$)) (! (= (lfinite$c (lCons$ ?v0 ?v1)) (lfinite$c ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a101))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (! (= (lfinite$b (lCons$b ?v0 ?v1)) (lfinite$b ?v1)) :pattern ((lCons$b ?v0 ?v1)))) :named a102))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a103))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (lfinite$ (lCons$c ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$c ?v0 ?v1)))) :named a104))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$)) (! (= (lfinite$c (lCons$ ?v0 ?v1)) (lfinite$c ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a105))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (! (= (lfinite$b (lCons$b ?v0 ?v1)) (lfinite$b ?v1)) :pattern ((lCons$b ?v0 ?v1)))) :named a106))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a107))
(check-sat)
;(get-unsat-core)
