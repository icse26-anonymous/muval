; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 413
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort A_a_llist_fun$ 0)
(declare-sort B_b_llist_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_nat_prod_a_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort B_nat_prod_b_fun$ 0)
(declare-sort Nat_set_bool_fun$ 0)
(declare-sort Nat_nat_llist_fun$ 0)
(declare-sort A_nat_bool_fun_fun$ 0)
(declare-sort B_nat_bool_fun_fun$ 0)
(declare-sort Nat_a_bool_fun_fun$ 0)
(declare-sort Nat_b_bool_fun_fun$ 0)
(declare-sort Nat_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_nat_prod_bool_fun$ 0)
(declare-sort B_llist_b_llist_fun$ 0)
(declare-sort B_nat_prod_bool_fun$ 0)
(declare-sort Nat_set_a_llist_fun$ 0)
(declare-sort Nat_set_b_llist_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Nat_llist_nat_llist_fun$ 0)
(declare-sort A_a_fun_a_a_llist_fun_fun$ 0)
(declare-sort A_b_nat_prod_bool_fun_fun$ 0)
(declare-sort A_bool_fun_a_bool_fun_fun$ 0)
(declare-sort A_nat_prod_a_bool_fun_fun$ 0)
(declare-sort A_nat_prod_b_bool_fun_fun$ 0)
(declare-sort A_nat_prod_llist_bool_fun$ 0)
(declare-sort B_b_fun_b_b_llist_fun_fun$ 0)
(declare-sort B_b_nat_prod_bool_fun_fun$ 0)
(declare-sort B_bool_fun_b_bool_fun_fun$ 0)
(declare-sort B_nat_prod_b_bool_fun_fun$ 0)
(declare-sort B_nat_prod_llist_bool_fun$ 0)
(declare-sort A_a_fun_a_a_bool_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_b_bool_fun_fun_fun$ 0)
(declare-sort A_a_fun_b_a_bool_fun_fun_fun$ 0)
(declare-sort A_a_fun_b_b_fun_bool_fun_fun$ 0)
(declare-sort A_b_fun_a_a_bool_fun_fun_fun$ 0)
(declare-sort A_b_fun_a_b_bool_fun_fun_fun$ 0)
(declare-sort A_b_fun_b_a_bool_fun_fun_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_llist_bool_fun_fun$ 0)
(declare-sort A_nat_prod_llist_a_llist_fun$ 0)
(declare-sort B_a_fun_a_b_bool_fun_fun_fun$ 0)
(declare-sort B_a_fun_b_a_bool_fun_fun_fun$ 0)
(declare-sort B_a_fun_b_b_bool_fun_fun_fun$ 0)
(declare-sort B_b_fun_a_a_fun_bool_fun_fun$ 0)
(declare-sort B_b_fun_a_b_bool_fun_fun_fun$ 0)
(declare-sort B_b_fun_b_a_bool_fun_fun_fun$ 0)
(declare-sort B_b_fun_b_b_bool_fun_fun_fun$ 0)
(declare-sort B_llist_a_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-sort B_nat_prod_llist_b_llist_fun$ 0)
(declare-sort Nat_set_b_llist_fun_bool_fun$ 0)
(declare-sort Nat_set_nat_set_bool_fun_fun$ 0)
(declare-sort Nat_llist_a_llist_bool_fun_fun$ 0)
(declare-sort Nat_llist_b_llist_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_llist_a_llist_fun_fun$ 0)
(declare-sort A_llist_nat_set_a_llist_fun_fun$ 0)
(declare-sort B_b_fun_b_llist_b_llist_fun_fun$ 0)
(declare-sort B_llist_nat_set_b_llist_fun_fun$ 0)
(declare-sort Nat_llist_nat_llist_bool_fun_fun$ 0)
(declare-sort Nat_nat_fun_a_a_fun_bool_fun_fun$ 0)
(declare-sort Nat_nat_fun_b_b_fun_bool_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_llist_fun_fun$ 0)
(declare-sort A_nat_prod_a_nat_prod_bool_fun_fun$ 0)
(declare-sort A_nat_prod_b_nat_prod_bool_fun_fun$ 0)
(declare-sort B_nat_prod_a_nat_prod_bool_fun_fun$ 0)
(declare-sort B_nat_prod_b_nat_prod_bool_fun_fun$ 0)
(declare-sort Nat_set_b_llist_fun_llist_bool_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_fun_bool_fun_fun$ 0)
(declare-sort A_a_bool_fun_fun_a_a_bool_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_nat_prod_a_bool_fun_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun_a_b_bool_fun_fun_fun$ 0)
(declare-sort A_llist_b_nat_prod_llist_bool_fun_fun$ 0)
(declare-sort B_a_bool_fun_fun_b_a_bool_fun_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun_b_b_bool_fun_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_llist_nat_llist_fun_fun$ 0)
(declare-sort A_a_llist_fun_a_a_llist_fun_bool_fun_fun$ 0)
(declare-sort A_a_llist_fun_b_b_llist_fun_bool_fun_fun$ 0)
(declare-sort A_llist_llist_b_llist_llist_bool_fun_fun$ 0)
(declare-sort B_b_llist_fun_a_a_llist_fun_bool_fun_fun$ 0)
(declare-sort B_llist_nat_set_b_llist_fun_fun_bool_fun$ 0)
(declare-sort Nat_set_llist_nat_set_llist_bool_fun_fun$ 0)
(declare-sort A_nat_prod_bool_fun_a_nat_prod_bool_fun_fun$ 0)
(declare-sort B_nat_prod_bool_fun_b_nat_prod_bool_fun_fun$ 0)
(declare-sort A_a_fun_b_nat_prod_b_nat_prod_fun_bool_fun_fun$ 0)
(declare-sort A_nat_prod_a_fun_a_nat_prod_a_fun_bool_fun_fun$ 0)
(declare-sort A_nat_prod_a_fun_a_nat_prod_b_bool_fun_fun_fun$ 0)
(declare-sort A_nat_prod_a_fun_b_nat_prod_b_fun_bool_fun_fun$ 0)
(declare-sort A_nat_prod_llist_a_nat_prod_llist_bool_fun_fun$ 0)
(declare-sort A_nat_prod_llist_b_nat_prod_llist_bool_fun_fun$ 0)
(declare-sort B_nat_prod_b_fun_a_b_nat_prod_bool_fun_fun_fun$ 0)
(declare-sort B_nat_prod_b_fun_a_nat_prod_a_fun_bool_fun_fun$ 0)
(declare-sort B_nat_prod_b_fun_b_b_nat_prod_bool_fun_fun_fun$ 0)
(declare-sort B_nat_prod_b_fun_b_nat_prod_b_bool_fun_fun_fun$ 0)
(declare-sort B_nat_prod_b_fun_b_nat_prod_b_fun_bool_fun_fun$ 0)
(declare-sort B_nat_prod_llist_a_nat_prod_llist_bool_fun_fun$ 0)
(declare-sort B_nat_prod_llist_b_nat_prod_llist_bool_fun_fun$ 0)
(declare-sort Nat_nat_llist_fun_nat_nat_llist_fun_bool_fun_fun$ 0)
(declare-sort A_nat_prod_a_fun_a_nat_prod_llist_a_llist_fun_fun$ 0)
(declare-sort B_nat_prod_b_fun_b_nat_prod_llist_b_llist_fun_fun$ 0)
(declare-sort A_llist_a_llist_fun_b_llist_b_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$ 0)
(declare-sort A_b_nat_prod_bool_fun_fun_a_b_nat_prod_bool_fun_fun_fun$ 0)
(declare-sort A_nat_prod_a_fun_a_nat_prod_a_nat_prod_bool_fun_fun_fun$ 0)
(declare-sort B_nat_prod_b_fun_b_nat_prod_b_nat_prod_bool_fun_fun_fun$ 0)
(declare-sort Nat_set_a_llist_fun_nat_set_llist_a_llist_llist_fun_fun$ 0)
(declare-sort Nat_set_b_llist_fun_nat_set_llist_b_llist_llist_fun_fun$ 0)
(declare-sort Nat_llist_nat_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_llist_nat_llist_fun_b_llist_b_llist_fun_bool_fun_fun$ 0)
(declare-sort A_a_llist_fun_b_nat_prod_b_nat_prod_llist_fun_bool_fun_fun$ 0)
(declare-sort Nat_llist_nat_llist_fun_nat_llist_nat_llist_fun_bool_fun_fun$ 0)
(declare-sort B_nat_prod_b_nat_prod_fun_b_nat_prod_b_nat_prod_llist_fun_fun$ 0)
(declare-sort Nat_set_a_llist_fun_llist_nat_set_b_llist_fun_llist_bool_fun_fun$ 0)
(declare-sort A_nat_prod_llist_a_llist_fun_a_nat_prod_llist_a_llist_fun_bool_fun_fun$ 0)
(declare-sort A_nat_prod_llist_a_llist_fun_b_nat_prod_llist_b_llist_fun_bool_fun_fun$ 0)
(declare-sort B_nat_prod_llist_b_llist_fun_a_nat_prod_llist_a_llist_fun_bool_fun_fun$ 0)
(declare-sort B_nat_prod_llist_b_llist_fun_b_nat_prod_llist_b_llist_fun_bool_fun_fun$ 0)
(declare-sort A_llist_nat_set_a_llist_fun_fun_b_llist_nat_set_b_llist_fun_fun_bool_fun_fun$ 0)
(declare-sort Nat_set_llist_a_llist_llist_fun_nat_set_llist_b_llist_llist_fun_bool_fun_fun$ 0)
(declare-sort A_llist_nat_set_a_llist_fun_fun_a_llist_llist_nat_set_a_llist_fun_llist_fun_fun$ 0)
(declare-sort B_llist_nat_set_b_llist_fun_fun_b_llist_llist_nat_set_b_llist_fun_llist_fun_fun$ 0)
(declare-sort A_llist_llist_nat_set_a_llist_fun_llist_fun_b_llist_llist_nat_set_b_llist_fun_llist_fun_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))))
(declare-datatypes () ((A_nat_prod$ (pair$ (fst$ A$) (snd$ Nat$)))))
(declare-codatatypes () ((A_nat_prod_llist$ (lNil$b) (lCons$b (lhd$b A_nat_prod$) (ltl$b A_nat_prod_llist$)))
  (Nat_llist$ (lNil$c) (lCons$c (lhd$c Nat$) (ltl$c Nat_llist$)))))
(declare-datatypes () ((B_nat_prod$ (pair$a (fst$a B$) (snd$a Nat$)))))
(declare-codatatypes () ((B_nat_prod_llist$ (lNil$d) (lCons$d (lhd$d B_nat_prod$) (ltl$d B_nat_prod_llist$)))
  (Nat_set_a_llist_fun_llist$ (lNil$e) (lCons$e (select$ Nat_set_a_llist_fun$) (selecta$ Nat_set_a_llist_fun_llist$)))
  (Nat_set_b_llist_fun_llist$ (lNil$f) (lCons$f (selectb$ Nat_set_b_llist_fun$) (selectc$ Nat_set_b_llist_fun_llist$)))
  (A_llist_llist$ (lNil$g) (lCons$g (lhd$e A_llist$) (ltl$e A_llist_llist$)))
  (Nat_set_llist$ (lNil$h) (lCons$h (lhd$f Nat_set$) (ltl$f Nat_set_llist$)))
  (B_llist_llist$ (lNil$i) (lCons$i (lhd$g B_llist$) (ltl$g B_llist_llist$)))))
(declare-fun a$ () A_b_bool_fun_fun$)
(declare-fun uu$ () Nat_set_nat_set_bool_fun_fun$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun uua$ () A_nat_prod_a_fun$)
(declare-fun uub$ (Nat_set$) A_nat_bool_fun_fun$)
(declare-fun uuc$ () A_llist_nat_set_a_llist_fun_fun$)
(declare-fun uud$ () B_nat_prod_b_fun$)
(declare-fun uue$ (Nat_set$) B_nat_bool_fun_fun$)
(declare-fun uuf$ () B_llist_nat_set_b_llist_fun_fun$)
(declare-fun uug$ () Nat_nat_fun$)
(declare-fun uuh$ () B_b_fun$)
(declare-fun uui$ () A_a_fun$)
(declare-fun uuj$ () A_bool_fun$)
(declare-fun uuk$ () B_bool_fun$)
(declare-fun uul$ () A_nat_prod_bool_fun$)
(declare-fun uum$ () B_nat_prod_bool_fun$)
(declare-fun uun$ (A_b_bool_fun_fun$) A_a_fun_a_b_bool_fun_fun_fun$)
(declare-fun uuo$ (A_b_bool_fun_fun$) A_nat_prod_a_fun_a_nat_prod_b_bool_fun_fun_fun$)
(declare-fun uup$ (A_b_bool_fun_fun$) B_a_fun_b_b_bool_fun_fun_fun$)
(declare-fun uuq$ (B_b_bool_fun_fun$) A_b_fun_a_b_bool_fun_fun_fun$)
(declare-fun uur$ (B_b_bool_fun_fun$) B_b_fun_b_b_bool_fun_fun_fun$)
(declare-fun uus$ (B_a_bool_fun_fun$) B_b_fun_b_a_bool_fun_fun_fun$)
(declare-fun uut$ (B_a_bool_fun_fun$) A_b_fun_a_a_bool_fun_fun_fun$)
(declare-fun uuu$ (A_a_bool_fun_fun$) B_a_fun_b_a_bool_fun_fun_fun$)
(declare-fun uuv$ (A_a_bool_fun_fun$) A_a_fun_a_a_bool_fun_fun_fun$)
(declare-fun uuw$ (B_b_bool_fun_fun$) B_nat_prod_b_fun_b_nat_prod_b_bool_fun_fun_fun$)
(declare-fun uux$ (A_b_bool_fun_fun$) B_b_fun_a_b_bool_fun_fun_fun$)
(declare-fun uuy$ (A_b_bool_fun_fun$) B_nat_prod_b_fun_a_b_nat_prod_bool_fun_fun_fun$)
(declare-fun uuz$ (A_b_bool_fun_fun$) A_b_fun_a_a_bool_fun_fun_fun$)
(declare-fun uva$ (B_b_bool_fun_fun$) B_b_fun_b_b_bool_fun_fun_fun$)
(declare-fun uvb$ (B_b_bool_fun_fun$) A_b_fun_b_a_bool_fun_fun_fun$)
(declare-fun uvc$ (B_a_bool_fun_fun$) B_a_fun_b_b_bool_fun_fun_fun$)
(declare-fun uvd$ (B_a_bool_fun_fun$) A_a_fun_b_a_bool_fun_fun_fun$)
(declare-fun uve$ (A_a_bool_fun_fun$) B_a_fun_a_b_bool_fun_fun_fun$)
(declare-fun uvf$ (A_a_bool_fun_fun$) A_a_fun_a_a_bool_fun_fun_fun$)
(declare-fun uvg$ (B_b_bool_fun_fun$) B_nat_prod_b_fun_b_b_nat_prod_bool_fun_fun_fun$)
(declare-fun uvh$ (A_nat_prod_a_fun$) A_nat_prod_a_fun_a_nat_prod_a_nat_prod_bool_fun_fun_fun$)
(declare-fun uvi$ (B_nat_prod_b_fun$) B_nat_prod_b_fun_b_nat_prod_b_nat_prod_bool_fun_fun_fun$)
(declare-fun uvj$ (Nat_nat_fun$ Nat_nat_fun$) Nat_nat_bool_fun_fun$)
(declare-fun uvk$ (A_b_fun$) B_b_fun_a_b_bool_fun_fun_fun$)
(declare-fun uvl$ (A_a_fun$) B_a_fun_a_b_bool_fun_fun_fun$)
(declare-fun uvm$ (B_b_fun$) B_b_fun_b_b_bool_fun_fun_fun$)
(declare-fun uvn$ (B_a_fun$) A_a_fun_b_a_bool_fun_fun_fun$)
(declare-fun uvo$ (B_b_fun$) A_b_fun_b_a_bool_fun_fun_fun$)
(declare-fun uvp$ (A_a_fun$) A_a_fun_a_a_bool_fun_fun_fun$)
(declare-fun uvq$ (A_nat_prod_a_fun$) A_a_fun_a_nat_prod_a_bool_fun_fun_fun$)
(declare-fun uvr$ (Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$ Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$) Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$)
(declare-fun uvs$ (B_b_bool_fun_fun$) B_b_bool_fun_fun_b_b_bool_fun_fun_fun$)
(declare-fun uvt$ (B_a_bool_fun_fun$) B_a_bool_fun_fun_b_a_bool_fun_fun_fun$)
(declare-fun uvu$ (A_b_nat_prod_bool_fun_fun$) A_b_nat_prod_bool_fun_fun_a_b_nat_prod_bool_fun_fun_fun$)
(declare-fun uvv$ (A_a_bool_fun_fun$) A_a_bool_fun_fun_a_a_bool_fun_fun_fun$)
(declare-fun uvw$ (A_b_bool_fun_fun$) A_b_bool_fun_fun_a_b_bool_fun_fun_fun$)
(declare-fun uvx$ (A_bool_fun$) A_bool_fun_a_bool_fun_fun$)
(declare-fun uvy$ (B_bool_fun$) B_bool_fun_b_bool_fun_fun$)
(declare-fun uvz$ (A_nat_prod_bool_fun$) A_nat_prod_bool_fun_a_nat_prod_bool_fun_fun$)
(declare-fun uwa$ (B_nat_prod_bool_fun$) B_nat_prod_bool_fun_b_nat_prod_bool_fun_fun$)
(declare-fun uwb$ () B_b_bool_fun_fun$)
(declare-fun uwc$ () B_llist_b_llist_bool_fun_fun$)
(declare-fun uwd$ () A_a_bool_fun_fun$)
(declare-fun uwe$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun lmap$ () B_nat_prod_b_fun_b_nat_prod_llist_b_llist_fun_fun$)
(declare-fun lzip$ (B_llist$ Nat_llist$) B_nat_prod_llist$)
(declare-fun zero$ () Nat$)
(declare-fun lmap$a () A_nat_prod_a_fun_a_nat_prod_llist_a_llist_fun_fun$)
(declare-fun lmap$b () Nat_nat_fun_nat_llist_nat_llist_fun_fun$)
(declare-fun lmap$c () B_b_fun_b_llist_b_llist_fun_fun$)
(declare-fun lmap$d () A_a_fun_a_llist_a_llist_fun_fun$)
(declare-fun lmap$e (B_a_fun$ B_llist$) A_llist$)
(declare-fun lmap$f (A_b_fun$ A_llist$) B_llist$)
(declare-fun lmap$g () Nat_set_a_llist_fun_nat_set_llist_a_llist_llist_fun_fun$)
(declare-fun lmap$h () Nat_set_b_llist_fun_nat_set_llist_b_llist_llist_fun_fun$)
(declare-fun lmap$i () A_llist_nat_set_a_llist_fun_fun_a_llist_llist_nat_set_a_llist_fun_llist_fun_fun$)
(declare-fun lmap$j () B_llist_nat_set_b_llist_fun_fun_b_llist_llist_nat_set_b_llist_fun_llist_fun_fun$)
(declare-fun lzip$a (A_llist$ Nat_llist$) A_nat_prod_llist$)
(declare-fun member$ (Nat$ Nat_set$) Bool)
(declare-fun fun_app$ (B_nat_prod_b_fun$ B_nat_prod$) B$)
(declare-fun lfilter$ (B_nat_prod_bool_fun$ B_nat_prod_llist$) B_nat_prod_llist$)
(declare-fun rel_fun$ (A_llist_b_llist_bool_fun_fun$ Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$) A_llist_nat_set_a_llist_fun_fun_b_llist_nat_set_b_llist_fun_fun_bool_fun_fun$)
(declare-fun fun_app$a (A_nat_prod_a_fun$ A_nat_prod$) A$)
(declare-fun fun_app$b (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun fun_app$c (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$e (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$f (Nat_set_bool_fun$ Nat_set$) Bool)
(declare-fun fun_app$g (Nat_set_nat_set_bool_fun_fun$ Nat_set$) Nat_set_bool_fun$)
(declare-fun fun_app$h (B_bool_fun$ B$) Bool)
(declare-fun fun_app$i (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$j (A_bool_fun$ A$) Bool)
(declare-fun fun_app$k (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$l (Nat_set_b_llist_fun$ Nat_set$) B_llist$)
(declare-fun fun_app$m (B_llist_nat_set_b_llist_fun_fun$ B_llist$) Nat_set_b_llist_fun$)
(declare-fun fun_app$n (B_nat_prod_llist_b_llist_fun$ B_nat_prod_llist$) B_llist$)
(declare-fun fun_app$o (B_nat_prod_b_fun_b_nat_prod_llist_b_llist_fun_fun$ B_nat_prod_b_fun$) B_nat_prod_llist_b_llist_fun$)
(declare-fun fun_app$p (Nat_nat_llist_fun$ Nat$) Nat_llist$)
(declare-fun fun_app$q (Nat_nat_fun_nat_nat_llist_fun_fun$ Nat_nat_fun$) Nat_nat_llist_fun$)
(declare-fun fun_app$r (Nat_set_a_llist_fun$ Nat_set$) A_llist$)
(declare-fun fun_app$s (A_llist_nat_set_a_llist_fun_fun$ A_llist$) Nat_set_a_llist_fun$)
(declare-fun fun_app$t (A_nat_prod_llist_a_llist_fun$ A_nat_prod_llist$) A_llist$)
(declare-fun fun_app$u (A_nat_prod_a_fun_a_nat_prod_llist_a_llist_fun_fun$ A_nat_prod_a_fun$) A_nat_prod_llist_a_llist_fun$)
(declare-fun fun_app$v (B_nat_prod_bool_fun$ B_nat_prod$) Bool)
(declare-fun fun_app$w (B_nat_prod_bool_fun_b_nat_prod_bool_fun_fun$ B_nat_prod_bool_fun$) B_nat_prod_bool_fun$)
(declare-fun fun_app$x (A_nat_prod_bool_fun$ A_nat_prod$) Bool)
(declare-fun fun_app$y (A_nat_prod_bool_fun_a_nat_prod_bool_fun_fun$ A_nat_prod_bool_fun$) A_nat_prod_bool_fun$)
(declare-fun fun_app$z (B_bool_fun_b_bool_fun_fun$ B_bool_fun$) B_bool_fun$)
(declare-fun iterates$ () Nat_nat_fun_nat_nat_llist_fun_fun$)
(declare-fun lfilter$a (A_nat_prod_bool_fun$ A_nat_prod_llist$) A_nat_prod_llist$)
(declare-fun lfilter$b (A_bool_fun$ A_llist$) A_llist$)
(declare-fun lfilter$c (B_bool_fun$ B_llist$) B_llist$)
(declare-fun rel_fun$a (Nat_set_nat_set_bool_fun_fun$ A_llist_b_llist_bool_fun_fun$) Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$b (A_a_fun_b_b_fun_bool_fun_fun$ A_llist_a_llist_fun_b_llist_b_llist_fun_bool_fun_fun$ A_a_fun_a_llist_a_llist_fun_fun$ B_b_fun_b_llist_b_llist_fun_fun$) Bool)
(declare-fun rel_fun$c (A_b_bool_fun_fun$ A_b_bool_fun_fun$) A_a_fun_b_b_fun_bool_fun_fun$)
(declare-fun rel_fun$d (A_llist_b_llist_bool_fun_fun$ A_llist_b_llist_bool_fun_fun$) A_llist_a_llist_fun_b_llist_b_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$e (Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$ Nat_set_llist_a_llist_llist_fun_nat_set_llist_b_llist_llist_fun_bool_fun_fun$ Nat_set_a_llist_fun_nat_set_llist_a_llist_llist_fun_fun$ Nat_set_b_llist_fun_nat_set_llist_b_llist_llist_fun_fun$) Bool)
(declare-fun rel_fun$f (Nat_set_llist_nat_set_llist_bool_fun_fun$ A_llist_llist_b_llist_llist_bool_fun_fun$) Nat_set_llist_a_llist_llist_fun_nat_set_llist_b_llist_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$g (A_nat_prod_a_fun_a_nat_prod_a_fun_bool_fun_fun$ A_nat_prod_llist_a_llist_fun_a_nat_prod_llist_a_llist_fun_bool_fun_fun$ A_nat_prod_a_fun_a_nat_prod_llist_a_llist_fun_fun$ A_nat_prod_a_fun_a_nat_prod_llist_a_llist_fun_fun$) Bool)
(declare-fun rel_fun$h (A_nat_prod_a_nat_prod_bool_fun_fun$ A_a_bool_fun_fun$) A_nat_prod_a_fun_a_nat_prod_a_fun_bool_fun_fun$)
(declare-fun rel_fun$i (A_nat_prod_llist_a_nat_prod_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$) A_nat_prod_llist_a_llist_fun_a_nat_prod_llist_a_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$j (B_nat_prod_b_fun_a_nat_prod_a_fun_bool_fun_fun$ B_nat_prod_llist_b_llist_fun_a_nat_prod_llist_a_llist_fun_bool_fun_fun$ B_nat_prod_b_fun_b_nat_prod_llist_b_llist_fun_fun$ A_nat_prod_a_fun_a_nat_prod_llist_a_llist_fun_fun$) Bool)
(declare-fun rel_fun$k (B_nat_prod_a_nat_prod_bool_fun_fun$ B_a_bool_fun_fun$) B_nat_prod_b_fun_a_nat_prod_a_fun_bool_fun_fun$)
(declare-fun rel_fun$l (B_nat_prod_llist_a_nat_prod_llist_bool_fun_fun$ B_llist_a_llist_bool_fun_fun$) B_nat_prod_llist_b_llist_fun_a_nat_prod_llist_a_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$m (B_nat_prod_b_fun_b_nat_prod_b_fun_bool_fun_fun$ B_nat_prod_llist_b_llist_fun_b_nat_prod_llist_b_llist_fun_bool_fun_fun$ B_nat_prod_b_fun_b_nat_prod_llist_b_llist_fun_fun$ B_nat_prod_b_fun_b_nat_prod_llist_b_llist_fun_fun$) Bool)
(declare-fun rel_fun$n (B_nat_prod_b_nat_prod_bool_fun_fun$ B_b_bool_fun_fun$) B_nat_prod_b_fun_b_nat_prod_b_fun_bool_fun_fun$)
(declare-fun rel_fun$o (B_nat_prod_llist_b_nat_prod_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$) B_nat_prod_llist_b_llist_fun_b_nat_prod_llist_b_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$p (A_nat_prod_a_fun_b_nat_prod_b_fun_bool_fun_fun$ A_nat_prod_llist_a_llist_fun_b_nat_prod_llist_b_llist_fun_bool_fun_fun$ A_nat_prod_a_fun_a_nat_prod_llist_a_llist_fun_fun$ B_nat_prod_b_fun_b_nat_prod_llist_b_llist_fun_fun$) Bool)
(declare-fun rel_fun$q (A_nat_prod_b_nat_prod_bool_fun_fun$ A_b_bool_fun_fun$) A_nat_prod_a_fun_b_nat_prod_b_fun_bool_fun_fun$)
(declare-fun rel_fun$r (A_nat_prod_llist_b_nat_prod_llist_bool_fun_fun$ A_llist_b_llist_bool_fun_fun$) A_nat_prod_llist_a_llist_fun_b_nat_prod_llist_b_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$s (A_llist_nat_set_a_llist_fun_fun_b_llist_nat_set_b_llist_fun_fun_bool_fun_fun$ A_llist_llist_nat_set_a_llist_fun_llist_fun_b_llist_llist_nat_set_b_llist_fun_llist_fun_bool_fun_fun$ A_llist_nat_set_a_llist_fun_fun_a_llist_llist_nat_set_a_llist_fun_llist_fun_fun$ B_llist_nat_set_b_llist_fun_fun_b_llist_llist_nat_set_b_llist_fun_llist_fun_fun$) Bool)
(declare-fun rel_fun$t (A_llist_llist_b_llist_llist_bool_fun_fun$ Nat_set_a_llist_fun_llist_nat_set_b_llist_fun_llist_bool_fun_fun$) A_llist_llist_nat_set_a_llist_fun_llist_fun_b_llist_llist_nat_set_b_llist_fun_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$u (Nat_nat_fun_nat_nat_fun_bool_fun_fun$ Nat_llist_nat_llist_fun_nat_llist_nat_llist_fun_bool_fun_fun$ Nat_nat_fun_nat_llist_nat_llist_fun_fun$ Nat_nat_fun_nat_llist_nat_llist_fun_fun$) Bool)
(declare-fun rel_fun$v (Nat_nat_bool_fun_fun$ Nat_nat_bool_fun_fun$) Nat_nat_fun_nat_nat_fun_bool_fun_fun$)
(declare-fun rel_fun$w (Nat_llist_nat_llist_bool_fun_fun$ Nat_llist_nat_llist_bool_fun_fun$) Nat_llist_nat_llist_fun_nat_llist_nat_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$x (Nat_nat_fun_b_b_fun_bool_fun_fun$ Nat_llist_nat_llist_fun_b_llist_b_llist_fun_bool_fun_fun$ Nat_nat_fun_nat_llist_nat_llist_fun_fun$ B_b_fun_b_llist_b_llist_fun_fun$) Bool)
(declare-fun rel_fun$y (Nat_b_bool_fun_fun$ Nat_b_bool_fun_fun$) Nat_nat_fun_b_b_fun_bool_fun_fun$)
(declare-fun rel_fun$z (Nat_llist_b_llist_bool_fun_fun$ Nat_llist_b_llist_bool_fun_fun$) Nat_llist_nat_llist_fun_b_llist_b_llist_fun_bool_fun_fun$)
(declare-fun case_prod$ (B_nat_bool_fun_fun$) B_nat_prod_bool_fun$)
(declare-fun fun_app$aa (A_bool_fun_a_bool_fun_fun$ A_bool_fun$) A_bool_fun$)
(declare-fun fun_app$ab (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$ac (B_nat_bool_fun_fun$ B$) Nat_bool_fun$)
(declare-fun fun_app$ad (A_nat_bool_fun_fun$ A$) Nat_bool_fun$)
(declare-fun fun_app$ae (B_nat_prod_b_bool_fun_fun$ B_nat_prod$) B_bool_fun$)
(declare-fun fun_app$af (B_nat_prod_b_fun_b_nat_prod_b_bool_fun_fun_fun$ B_nat_prod_b_fun$) B_nat_prod_b_bool_fun_fun$)
(declare-fun fun_app$ag (B_b_fun_b_b_bool_fun_fun_fun$ B_b_fun$) B_b_bool_fun_fun$)
(declare-fun fun_app$ah (B_b_fun$ B$) B$)
(declare-fun fun_app$ai (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$aj (A_b_fun_a_b_bool_fun_fun_fun$ A_b_fun$) A_b_bool_fun_fun$)
(declare-fun fun_app$ak (A_b_fun$ A$) B$)
(declare-fun fun_app$al (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$am (B_b_fun_b_a_bool_fun_fun_fun$ B_b_fun$) B_a_bool_fun_fun$)
(declare-fun fun_app$an (A_b_fun_a_a_bool_fun_fun_fun$ A_b_fun$) A_a_bool_fun_fun$)
(declare-fun fun_app$ao (A_nat_prod_b_bool_fun_fun$ A_nat_prod$) B_bool_fun$)
(declare-fun fun_app$ap (A_nat_prod_a_fun_a_nat_prod_b_bool_fun_fun_fun$ A_nat_prod_a_fun$) A_nat_prod_b_bool_fun_fun$)
(declare-fun fun_app$aq (B_a_fun_b_b_bool_fun_fun_fun$ B_a_fun$) B_b_bool_fun_fun$)
(declare-fun fun_app$ar (B_a_fun$ B$) A$)
(declare-fun fun_app$as (A_a_fun_a_b_bool_fun_fun_fun$ A_a_fun$) A_b_bool_fun_fun$)
(declare-fun fun_app$at (A_a_fun$ A$) A$)
(declare-fun fun_app$au (B_a_fun_b_a_bool_fun_fun_fun$ B_a_fun$) B_a_bool_fun_fun$)
(declare-fun fun_app$av (A_a_fun_a_a_bool_fun_fun_fun$ A_a_fun$) A_a_bool_fun_fun$)
(declare-fun fun_app$aw (B_b_nat_prod_bool_fun_fun$ B$) B_nat_prod_bool_fun$)
(declare-fun fun_app$ax (B_nat_prod_b_fun_b_b_nat_prod_bool_fun_fun_fun$ B_nat_prod_b_fun$) B_b_nat_prod_bool_fun_fun$)
(declare-fun fun_app$ay (A_b_fun_b_a_bool_fun_fun_fun$ A_b_fun$) B_a_bool_fun_fun$)
(declare-fun fun_app$az (A_a_fun_b_a_bool_fun_fun_fun$ A_a_fun$) B_a_bool_fun_fun$)
(declare-fun fun_app$ba (A_b_nat_prod_bool_fun_fun$ A$) B_nat_prod_bool_fun$)
(declare-fun fun_app$bb (B_nat_prod_b_fun_a_b_nat_prod_bool_fun_fun_fun$ B_nat_prod_b_fun$) A_b_nat_prod_bool_fun_fun$)
(declare-fun fun_app$bc (B_b_fun_a_b_bool_fun_fun_fun$ B_b_fun$) A_b_bool_fun_fun$)
(declare-fun fun_app$bd (B_a_fun_a_b_bool_fun_fun_fun$ B_a_fun$) A_b_bool_fun_fun$)
(declare-fun fun_app$be (Nat_set_b_llist_fun_bool_fun$ Nat_set_b_llist_fun$) Bool)
(declare-fun fun_app$bf (Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$ Nat_set_a_llist_fun$) Nat_set_b_llist_fun_bool_fun$)
(declare-fun fun_app$bg (B_b_bool_fun_fun_b_b_bool_fun_fun_fun$ B_b_bool_fun_fun$) B_b_bool_fun_fun$)
(declare-fun fun_app$bh (B_a_bool_fun_fun_b_a_bool_fun_fun_fun$ B_a_bool_fun_fun$) B_a_bool_fun_fun$)
(declare-fun fun_app$bi (A_b_nat_prod_bool_fun_fun_a_b_nat_prod_bool_fun_fun_fun$ A_b_nat_prod_bool_fun_fun$) A_b_nat_prod_bool_fun_fun$)
(declare-fun fun_app$bj (A_b_bool_fun_fun_a_b_bool_fun_fun_fun$ A_b_bool_fun_fun$) A_b_bool_fun_fun$)
(declare-fun fun_app$bk (A_a_bool_fun_fun_a_a_bool_fun_fun_fun$ A_a_bool_fun_fun$) A_a_bool_fun_fun$)
(declare-fun fun_app$bl (B_nat_prod_b_nat_prod_bool_fun_fun$ B_nat_prod$) B_nat_prod_bool_fun$)
(declare-fun fun_app$bm (B_nat_prod_b_fun_b_nat_prod_b_nat_prod_bool_fun_fun_fun$ B_nat_prod_b_fun$) B_nat_prod_b_nat_prod_bool_fun_fun$)
(declare-fun fun_app$bn (A_nat_prod_a_nat_prod_bool_fun_fun$ A_nat_prod$) A_nat_prod_bool_fun$)
(declare-fun fun_app$bo (A_nat_prod_a_fun_a_nat_prod_a_nat_prod_bool_fun_fun_fun$ A_nat_prod_a_fun$) A_nat_prod_a_nat_prod_bool_fun_fun$)
(declare-fun fun_app$bp (A_nat_prod_a_bool_fun_fun$ A_nat_prod$) A_bool_fun$)
(declare-fun fun_app$bq (A_a_fun_a_nat_prod_a_bool_fun_fun_fun$ A_a_fun$) A_nat_prod_a_bool_fun_fun$)
(declare-fun fun_app$br (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$bs (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$bt (B_llist_nat_set_b_llist_fun_fun_bool_fun$ B_llist_nat_set_b_llist_fun_fun$) Bool)
(declare-fun fun_app$bu (A_llist_nat_set_a_llist_fun_fun_b_llist_nat_set_b_llist_fun_fun_bool_fun_fun$ A_llist_nat_set_a_llist_fun_fun$) B_llist_nat_set_b_llist_fun_fun_bool_fun$)
(declare-fun fun_app$bv (Nat_llist_nat_llist_fun$ Nat_llist$) Nat_llist$)
(declare-fun fun_app$bw (Nat_nat_fun_nat_llist_nat_llist_fun_fun$ Nat_nat_fun$) Nat_llist_nat_llist_fun$)
(declare-fun fun_app$bx (B_llist_b_llist_fun$ B_llist$) B_llist$)
(declare-fun fun_app$by (B_b_fun_b_llist_b_llist_fun_fun$ B_b_fun$) B_llist_b_llist_fun$)
(declare-fun fun_app$bz (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$ca (A_a_fun_a_llist_a_llist_fun_fun$ A_a_fun$) A_llist_a_llist_fun$)
(declare-fun fun_app$cb (A_llist_b_llist_bool_fun_fun$ A_llist$) B_llist_bool_fun$)
(declare-fun fun_app$cc (B_llist_a_llist_bool_fun_fun$ B_llist$) A_llist_bool_fun$)
(declare-fun fun_app$cd (B_nat_prod_llist_bool_fun$ B_nat_prod_llist$) Bool)
(declare-fun fun_app$ce (A_llist_b_nat_prod_llist_bool_fun_fun$ A_llist$) B_nat_prod_llist_bool_fun$)
(declare-fun fun_app$cf (A_nat_prod_llist_bool_fun$ A_nat_prod_llist$) Bool)
(declare-fun fun_app$cg (A_nat_prod_llist_a_nat_prod_llist_bool_fun_fun$ A_nat_prod_llist$) A_nat_prod_llist_bool_fun$)
(declare-fun fun_app$ch (B_nat_prod_llist_b_nat_prod_llist_bool_fun_fun$ B_nat_prod_llist$) B_nat_prod_llist_bool_fun$)
(declare-fun fun_app$ci (Nat_llist_bool_fun$ Nat_llist$) Bool)
(declare-fun fun_app$cj (Nat_llist_nat_llist_bool_fun_fun$ Nat_llist$) Nat_llist_bool_fun$)
(declare-fun fun_app$ck (Nat_set_b_llist_fun_llist_bool_fun$ Nat_set_b_llist_fun_llist$) Bool)
(declare-fun fun_app$cl (Nat_set_a_llist_fun_llist_nat_set_b_llist_fun_llist_bool_fun_fun$ Nat_set_a_llist_fun_llist$) Nat_set_b_llist_fun_llist_bool_fun$)
(declare-fun fun_app$cm (B_b_llist_fun$ B$) B_llist$)
(declare-fun fun_app$cn (B_b_fun_b_b_llist_fun_fun$ B_b_fun$) B_b_llist_fun$)
(declare-fun fun_app$co (A_a_llist_fun$ A$) A_llist$)
(declare-fun fun_app$cp (A_a_fun_a_a_llist_fun_fun$ A_a_fun$) A_a_llist_fun$)
(declare-fun fun_app$cq (A_nat_prod_llist_b_nat_prod_llist_bool_fun_fun$ A_nat_prod_llist$) B_nat_prod_llist_bool_fun$)
(declare-fun fun_app$cr (A_nat_prod_b_nat_prod_bool_fun_fun$ A_nat_prod$) B_nat_prod_bool_fun$)
(declare-fun fun_app$cs (B_nat_prod_llist_a_nat_prod_llist_bool_fun_fun$ B_nat_prod_llist$) A_nat_prod_llist_bool_fun$)
(declare-fun fun_app$ct (B_nat_prod_a_nat_prod_bool_fun_fun$ B_nat_prod$) A_nat_prod_bool_fun$)
(declare-fun iterates$a () B_b_fun_b_b_llist_fun_fun$)
(declare-fun iterates$b () A_a_fun_a_a_llist_fun_fun$)
(declare-fun iterates$c () B_nat_prod_b_nat_prod_fun_b_nat_prod_b_nat_prod_llist_fun_fun$)
(declare-fun rel_fun$aa (Nat_nat_fun_a_a_fun_bool_fun_fun$ Nat_llist_nat_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ Nat_nat_fun_nat_llist_nat_llist_fun_fun$ A_a_fun_a_llist_a_llist_fun_fun$) Bool)
(declare-fun rel_fun$ab (Nat_a_bool_fun_fun$ Nat_a_bool_fun_fun$) Nat_nat_fun_a_a_fun_bool_fun_fun$)
(declare-fun rel_fun$ac (Nat_llist_a_llist_bool_fun_fun$ Nat_llist_a_llist_bool_fun_fun$) Nat_llist_nat_llist_fun_a_llist_a_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$ad (B_b_fun_a_a_fun_bool_fun_fun$ B_b_llist_fun_a_a_llist_fun_bool_fun_fun$ B_b_fun_b_b_llist_fun_fun$ A_a_fun_a_a_llist_fun_fun$) Bool)
(declare-fun rel_fun$ae (B_a_bool_fun_fun$ B_a_bool_fun_fun$) B_b_fun_a_a_fun_bool_fun_fun$)
(declare-fun rel_fun$af (B_a_bool_fun_fun$ B_llist_a_llist_bool_fun_fun$) B_b_llist_fun_a_a_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$ag (A_a_fun_b_nat_prod_b_nat_prod_fun_bool_fun_fun$ A_a_llist_fun_b_nat_prod_b_nat_prod_llist_fun_bool_fun_fun$ A_a_fun_a_a_llist_fun_fun$ B_nat_prod_b_nat_prod_fun_b_nat_prod_b_nat_prod_llist_fun_fun$) Bool)
(declare-fun rel_fun$ah (A_b_nat_prod_bool_fun_fun$ A_b_nat_prod_bool_fun_fun$) A_a_fun_b_nat_prod_b_nat_prod_fun_bool_fun_fun$)
(declare-fun rel_fun$ai (A_b_nat_prod_bool_fun_fun$ A_llist_b_nat_prod_llist_bool_fun_fun$) A_a_llist_fun_b_nat_prod_b_nat_prod_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$aj (A_a_fun_a_a_fun_bool_fun_fun$ A_a_llist_fun_a_a_llist_fun_bool_fun_fun$ A_a_fun_a_a_llist_fun_fun$ A_a_fun_a_a_llist_fun_fun$) Bool)
(declare-fun rel_fun$ak (A_a_bool_fun_fun$ A_a_bool_fun_fun$) A_a_fun_a_a_fun_bool_fun_fun$)
(declare-fun rel_fun$al (A_a_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$) A_a_llist_fun_a_a_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$am (Nat_nat_fun_nat_nat_fun_bool_fun_fun$ Nat_nat_llist_fun_nat_nat_llist_fun_bool_fun_fun$ Nat_nat_fun_nat_nat_llist_fun_fun$ Nat_nat_fun_nat_nat_llist_fun_fun$) Bool)
(declare-fun rel_fun$an (Nat_nat_bool_fun_fun$ Nat_llist_nat_llist_bool_fun_fun$) Nat_nat_llist_fun_nat_nat_llist_fun_bool_fun_fun$)
(declare-fun rel_fun$ao (A_a_fun_b_b_fun_bool_fun_fun$ A_a_llist_fun_b_b_llist_fun_bool_fun_fun$ A_a_fun_a_a_llist_fun_fun$ B_b_fun_b_b_llist_fun_fun$) Bool)
(declare-fun rel_fun$ap (A_b_bool_fun_fun$ A_llist_b_llist_bool_fun_fun$) A_a_llist_fun_b_b_llist_fun_bool_fun_fun$)
(declare-fun case_prod$a (A_nat_bool_fun_fun$) A_nat_prod_bool_fun$)
(declare-fun llist_all2$ (A_b_bool_fun_fun$) A_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$a (A_nat_prod_b_bool_fun_fun$ A_nat_prod_llist$ B_llist$) Bool)
(declare-fun llist_all2$b (B_b_bool_fun_fun$) B_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$c (B_a_bool_fun_fun$) B_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$d (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$e (B_nat_prod_b_bool_fun_fun$ B_nat_prod_llist$ B_llist$) Bool)
(declare-fun llist_all2$f (A_b_nat_prod_bool_fun_fun$) A_llist_b_nat_prod_llist_bool_fun_fun$)
(declare-fun llist_all2$g (B_b_nat_prod_bool_fun_fun$ B_llist$ B_nat_prod_llist$) Bool)
(declare-fun llist_all2$h (A_nat_prod_a_nat_prod_bool_fun_fun$) A_nat_prod_llist_a_nat_prod_llist_bool_fun_fun$)
(declare-fun llist_all2$i (B_nat_prod_b_nat_prod_bool_fun_fun$) B_nat_prod_llist_b_nat_prod_llist_bool_fun_fun$)
(declare-fun llist_all2$j (Nat_nat_bool_fun_fun$) Nat_llist_nat_llist_bool_fun_fun$)
(declare-fun llist_all2$k (A_nat_prod_a_bool_fun_fun$ A_nat_prod_llist$ A_llist$) Bool)
(declare-fun llist_all2$l (Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$) Nat_set_a_llist_fun_llist_nat_set_b_llist_fun_llist_bool_fun_fun$)
(declare-fun llist_all2$m (A_nat_prod_b_nat_prod_bool_fun_fun$) A_nat_prod_llist_b_nat_prod_llist_bool_fun_fun$)
(declare-fun llist_all2$n (B_nat_prod_a_nat_prod_bool_fun_fun$) B_nat_prod_llist_a_nat_prod_llist_bool_fun_fun$)
(declare-fun llist_all2$o (Nat_set_nat_set_bool_fun_fun$) Nat_set_llist_nat_set_llist_bool_fun_fun$)
(declare-fun llist_all2$p (A_llist_b_llist_bool_fun_fun$) A_llist_llist_b_llist_llist_bool_fun_fun$)
(declare-fun llist_all2$q (Nat_b_bool_fun_fun$) Nat_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$r (Nat_a_bool_fun_fun$) Nat_llist_a_llist_bool_fun_fun$)
(assert (! (forall ((?v0 B_nat_prod$)) (! (= (fun_app$ uud$ ?v0) (fst$a ?v0)) :pattern ((fun_app$ uud$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_nat_prod$)) (! (= (fun_app$a uua$ ?v0) (fst$ ?v0)) :pattern ((fun_app$a uua$ ?v0)))) :named a1))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (= (fun_app$b (fun_app$c uwc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c uwc$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$d (fun_app$e uwe$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (fun_app$e uwe$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_set$)) (! (= (fun_app$f (fun_app$g uu$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$f (fun_app$g uu$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$h (fun_app$i uwb$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$h (fun_app$i uwb$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$j (fun_app$k uwd$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$j (fun_app$k uwd$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 B_llist$) (?v1 Nat_set$)) (! (= (fun_app$l (fun_app$m uuf$ ?v0) ?v1) (fun_app$n (fun_app$o lmap$ uud$) (lfilter$ (case_prod$ (uue$ ?v1)) (lzip$ ?v0 (fun_app$p (fun_app$q iterates$ suc$) zero$))))) :pattern ((fun_app$l (fun_app$m uuf$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat_set$)) (! (= (fun_app$r (fun_app$s uuc$ ?v0) ?v1) (fun_app$t (fun_app$u lmap$a uua$) (lfilter$a (case_prod$a (uub$ ?v1)) (lzip$a ?v0 (fun_app$p (fun_app$q iterates$ suc$) zero$))))) :pattern ((fun_app$r (fun_app$s uuc$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 B_nat_prod_bool_fun$) (?v1 B_nat_prod_bool_fun$) (?v2 B_nat_prod$)) (! (= (fun_app$v (fun_app$w (uwa$ ?v0) ?v1) ?v2) (and (fun_app$v ?v0 ?v2) (fun_app$v ?v1 ?v2))) :pattern ((fun_app$v (fun_app$w (uwa$ ?v0) ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$) (?v1 A_nat_prod_bool_fun$) (?v2 A_nat_prod$)) (! (= (fun_app$x (fun_app$y (uvz$ ?v0) ?v1) ?v2) (and (fun_app$x ?v0 ?v2) (fun_app$x ?v1 ?v2))) :pattern ((fun_app$x (fun_app$y (uvz$ ?v0) ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 B_bool_fun$) (?v1 B_bool_fun$) (?v2 B$)) (! (= (fun_app$h (fun_app$z (uvy$ ?v0) ?v1) ?v2) (and (fun_app$h ?v0 ?v2) (fun_app$h ?v1 ?v2))) :pattern ((fun_app$h (fun_app$z (uvy$ ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$j (fun_app$aa (uvx$ ?v0) ?v1) ?v2) (and (fun_app$j ?v0 ?v2) (fun_app$j ?v1 ?v2))) :pattern ((fun_app$j (fun_app$aa (uvx$ ?v0) ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 Nat_set$) (?v1 B$) (?v2 Nat$)) (! (= (fun_app$ab (fun_app$ac (uue$ ?v0) ?v1) ?v2) (member$ ?v2 ?v0)) :pattern ((fun_app$ab (fun_app$ac (uue$ ?v0) ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 Nat_set$) (?v1 A$) (?v2 Nat$)) (! (= (fun_app$ab (fun_app$ad (uub$ ?v0) ?v1) ?v2) (member$ ?v2 ?v0)) :pattern ((fun_app$ab (fun_app$ad (uub$ ?v0) ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_nat_prod_b_fun$) (?v2 B_nat_prod$)) (! (= (fun_app$ae (fun_app$af (uuw$ ?v0) ?v1) ?v2) (fun_app$i ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ae (fun_app$af (uuw$ ?v0) ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$i (fun_app$ag (uur$ ?v0) ?v1) ?v2) (fun_app$i ?v0 (fun_app$ah ?v1 ?v2))) :pattern ((fun_app$i (fun_app$ag (uur$ ?v0) ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A$)) (! (= (fun_app$ai (fun_app$aj (uuq$ ?v0) ?v1) ?v2) (fun_app$i ?v0 (fun_app$ak ?v1 ?v2))) :pattern ((fun_app$ai (fun_app$aj (uuq$ ?v0) ?v1) ?v2)))) :named a17))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$al (fun_app$am (uus$ ?v0) ?v1) ?v2) (fun_app$al ?v0 (fun_app$ah ?v1 ?v2))) :pattern ((fun_app$al (fun_app$am (uus$ ?v0) ?v1) ?v2)))) :named a18))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A$)) (! (= (fun_app$k (fun_app$an (uut$ ?v0) ?v1) ?v2) (fun_app$al ?v0 (fun_app$ak ?v1 ?v2))) :pattern ((fun_app$k (fun_app$an (uut$ ?v0) ?v1) ?v2)))) :named a19))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_nat_prod_a_fun$) (?v2 A_nat_prod$)) (! (= (fun_app$ao (fun_app$ap (uuo$ ?v0) ?v1) ?v2) (fun_app$ai ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$ao (fun_app$ap (uuo$ ?v0) ?v1) ?v2)))) :named a20))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$i (fun_app$aq (uup$ ?v0) ?v1) ?v2) (fun_app$ai ?v0 (fun_app$ar ?v1 ?v2))) :pattern ((fun_app$i (fun_app$aq (uup$ ?v0) ?v1) ?v2)))) :named a21))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$ai (fun_app$as (uun$ ?v0) ?v1) ?v2) (fun_app$ai ?v0 (fun_app$at ?v1 ?v2))) :pattern ((fun_app$ai (fun_app$as (uun$ ?v0) ?v1) ?v2)))) :named a22))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B$)) (! (= (fun_app$al (fun_app$au (uuu$ ?v0) ?v1) ?v2) (fun_app$k ?v0 (fun_app$ar ?v1 ?v2))) :pattern ((fun_app$al (fun_app$au (uuu$ ?v0) ?v1) ?v2)))) :named a23))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$k (fun_app$av (uuv$ ?v0) ?v1) ?v2) (fun_app$k ?v0 (fun_app$at ?v1 ?v2))) :pattern ((fun_app$k (fun_app$av (uuv$ ?v0) ?v1) ?v2)))) :named a24))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_nat_prod_b_fun$) (?v2 B$) (?v3 B_nat_prod$)) (! (= (fun_app$v (fun_app$aw (fun_app$ax (uvg$ ?v0) ?v1) ?v2) ?v3) (fun_app$h (fun_app$i ?v0 ?v2) (fun_app$ ?v1 ?v3))) :pattern ((fun_app$v (fun_app$aw (fun_app$ax (uvg$ ?v0) ?v1) ?v2) ?v3)))) :named a25))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B$) (?v3 B$)) (! (= (fun_app$h (fun_app$i (fun_app$ag (uva$ ?v0) ?v1) ?v2) ?v3) (fun_app$h (fun_app$i ?v0 ?v2) (fun_app$ah ?v1 ?v3))) :pattern ((fun_app$h (fun_app$i (fun_app$ag (uva$ ?v0) ?v1) ?v2) ?v3)))) :named a26))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 A_b_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$j (fun_app$al (fun_app$ay (uvb$ ?v0) ?v1) ?v2) ?v3) (fun_app$h (fun_app$i ?v0 ?v2) (fun_app$ak ?v1 ?v3))) :pattern ((fun_app$j (fun_app$al (fun_app$ay (uvb$ ?v0) ?v1) ?v2) ?v3)))) :named a27))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B$) (?v3 B$)) (! (= (fun_app$h (fun_app$i (fun_app$aq (uvc$ ?v0) ?v1) ?v2) ?v3) (fun_app$j (fun_app$al ?v0 ?v2) (fun_app$ar ?v1 ?v3))) :pattern ((fun_app$h (fun_app$i (fun_app$aq (uvc$ ?v0) ?v1) ?v2) ?v3)))) :named a28))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_a_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$j (fun_app$al (fun_app$az (uvd$ ?v0) ?v1) ?v2) ?v3) (fun_app$j (fun_app$al ?v0 ?v2) (fun_app$at ?v1 ?v3))) :pattern ((fun_app$j (fun_app$al (fun_app$az (uvd$ ?v0) ?v1) ?v2) ?v3)))) :named a29))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_nat_prod_b_fun$) (?v2 A$) (?v3 B_nat_prod$)) (! (= (fun_app$v (fun_app$ba (fun_app$bb (uuy$ ?v0) ?v1) ?v2) ?v3) (fun_app$h (fun_app$ai ?v0 ?v2) (fun_app$ ?v1 ?v3))) :pattern ((fun_app$v (fun_app$ba (fun_app$bb (uuy$ ?v0) ?v1) ?v2) ?v3)))) :named a30))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_b_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$h (fun_app$ai (fun_app$bc (uux$ ?v0) ?v1) ?v2) ?v3) (fun_app$h (fun_app$ai ?v0 ?v2) (fun_app$ah ?v1 ?v3))) :pattern ((fun_app$h (fun_app$ai (fun_app$bc (uux$ ?v0) ?v1) ?v2) ?v3)))) :named a31))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$j (fun_app$k (fun_app$an (uuz$ ?v0) ?v1) ?v2) ?v3) (fun_app$h (fun_app$ai ?v0 ?v2) (fun_app$ak ?v1 ?v3))) :pattern ((fun_app$j (fun_app$k (fun_app$an (uuz$ ?v0) ?v1) ?v2) ?v3)))) :named a32))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_a_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$h (fun_app$ai (fun_app$bd (uve$ ?v0) ?v1) ?v2) ?v3) (fun_app$j (fun_app$k ?v0 ?v2) (fun_app$ar ?v1 ?v3))) :pattern ((fun_app$h (fun_app$ai (fun_app$bd (uve$ ?v0) ?v1) ?v2) ?v3)))) :named a33))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$j (fun_app$k (fun_app$av (uvf$ ?v0) ?v1) ?v2) ?v3) (fun_app$j (fun_app$k ?v0 ?v2) (fun_app$at ?v1 ?v3))) :pattern ((fun_app$j (fun_app$k (fun_app$av (uvf$ ?v0) ?v1) ?v2) ?v3)))) :named a34))
(assert (! (forall ((?v0 Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$) (?v1 Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$) (?v2 Nat_set_a_llist_fun$) (?v3 Nat_set_b_llist_fun$)) (! (= (fun_app$be (fun_app$bf (uvr$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$be (fun_app$bf ?v0 ?v2) ?v3) (fun_app$be (fun_app$bf ?v1 ?v2) ?v3))) :pattern ((fun_app$be (fun_app$bf (uvr$ ?v0 ?v1) ?v2) ?v3)))) :named a35))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_bool_fun_fun$) (?v2 B$) (?v3 B$)) (! (= (fun_app$h (fun_app$i (fun_app$bg (uvs$ ?v0) ?v1) ?v2) ?v3) (and (fun_app$h (fun_app$i ?v0 ?v2) ?v3) (fun_app$h (fun_app$i ?v1 ?v2) ?v3))) :pattern ((fun_app$h (fun_app$i (fun_app$bg (uvs$ ?v0) ?v1) ?v2) ?v3)))) :named a36))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_a_bool_fun_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$j (fun_app$al (fun_app$bh (uvt$ ?v0) ?v1) ?v2) ?v3) (and (fun_app$j (fun_app$al ?v0 ?v2) ?v3) (fun_app$j (fun_app$al ?v1 ?v2) ?v3))) :pattern ((fun_app$j (fun_app$al (fun_app$bh (uvt$ ?v0) ?v1) ?v2) ?v3)))) :named a37))
(assert (! (forall ((?v0 A_b_nat_prod_bool_fun_fun$) (?v1 A_b_nat_prod_bool_fun_fun$) (?v2 A$) (?v3 B_nat_prod$)) (! (= (fun_app$v (fun_app$ba (fun_app$bi (uvu$ ?v0) ?v1) ?v2) ?v3) (and (fun_app$v (fun_app$ba ?v0 ?v2) ?v3) (fun_app$v (fun_app$ba ?v1 ?v2) ?v3))) :pattern ((fun_app$v (fun_app$ba (fun_app$bi (uvu$ ?v0) ?v1) ?v2) ?v3)))) :named a38))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_bool_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$h (fun_app$ai (fun_app$bj (uvw$ ?v0) ?v1) ?v2) ?v3) (and (fun_app$h (fun_app$ai ?v0 ?v2) ?v3) (fun_app$h (fun_app$ai ?v1 ?v2) ?v3))) :pattern ((fun_app$h (fun_app$ai (fun_app$bj (uvw$ ?v0) ?v1) ?v2) ?v3)))) :named a39))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_bool_fun_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$j (fun_app$k (fun_app$bk (uvv$ ?v0) ?v1) ?v2) ?v3) (and (fun_app$j (fun_app$k ?v0 ?v2) ?v3) (fun_app$j (fun_app$k ?v1 ?v2) ?v3))) :pattern ((fun_app$j (fun_app$k (fun_app$bk (uvv$ ?v0) ?v1) ?v2) ?v3)))) :named a40))
(assert (! (forall ((?v0 B_nat_prod_b_fun$) (?v1 B_nat_prod_b_fun$) (?v2 B_nat_prod$) (?v3 B_nat_prod$)) (! (= (fun_app$v (fun_app$bl (fun_app$bm (uvi$ ?v0) ?v1) ?v2) ?v3) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v3))) :pattern ((fun_app$v (fun_app$bl (fun_app$bm (uvi$ ?v0) ?v1) ?v2) ?v3)))) :named a41))
(assert (! (forall ((?v0 A_nat_prod_a_fun$) (?v1 A_nat_prod_a_fun$) (?v2 A_nat_prod$) (?v3 A_nat_prod$)) (! (= (fun_app$x (fun_app$bn (fun_app$bo (uvh$ ?v0) ?v1) ?v2) ?v3) (= (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v3))) :pattern ((fun_app$x (fun_app$bn (fun_app$bo (uvh$ ?v0) ?v1) ?v2) ?v3)))) :named a42))
(assert (! (forall ((?v0 A_nat_prod_a_fun$) (?v1 A_a_fun$) (?v2 A_nat_prod$) (?v3 A$)) (! (= (fun_app$j (fun_app$bp (fun_app$bq (uvq$ ?v0) ?v1) ?v2) ?v3) (= (fun_app$a ?v0 ?v2) (fun_app$at ?v1 ?v3))) :pattern ((fun_app$j (fun_app$bp (fun_app$bq (uvq$ ?v0) ?v1) ?v2) ?v3)))) :named a43))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ab (fun_app$br (uvj$ ?v0 ?v1) ?v2) ?v3) (= (fun_app$bs ?v0 ?v2) (fun_app$bs ?v1 ?v3))) :pattern ((fun_app$ab (fun_app$br (uvj$ ?v0 ?v1) ?v2) ?v3)))) :named a44))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B$) (?v3 B$)) (! (= (fun_app$h (fun_app$i (fun_app$ag (uvm$ ?v0) ?v1) ?v2) ?v3) (= (fun_app$ah ?v0 ?v2) (fun_app$ah ?v1 ?v3))) :pattern ((fun_app$h (fun_app$i (fun_app$ag (uvm$ ?v0) ?v1) ?v2) ?v3)))) :named a45))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_b_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$j (fun_app$al (fun_app$ay (uvo$ ?v0) ?v1) ?v2) ?v3) (= (fun_app$ah ?v0 ?v2) (fun_app$ak ?v1 ?v3))) :pattern ((fun_app$j (fun_app$al (fun_app$ay (uvo$ ?v0) ?v1) ?v2) ?v3)))) :named a46))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_a_fun$) (?v2 B$) (?v3 A$)) (! (= (fun_app$j (fun_app$al (fun_app$az (uvn$ ?v0) ?v1) ?v2) ?v3) (= (fun_app$ar ?v0 ?v2) (fun_app$at ?v1 ?v3))) :pattern ((fun_app$j (fun_app$al (fun_app$az (uvn$ ?v0) ?v1) ?v2) ?v3)))) :named a47))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_b_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$h (fun_app$ai (fun_app$bc (uvk$ ?v0) ?v1) ?v2) ?v3) (= (fun_app$ak ?v0 ?v2) (fun_app$ah ?v1 ?v3))) :pattern ((fun_app$h (fun_app$ai (fun_app$bc (uvk$ ?v0) ?v1) ?v2) ?v3)))) :named a48))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$h (fun_app$ai (fun_app$bd (uvl$ ?v0) ?v1) ?v2) ?v3) (= (fun_app$at ?v0 ?v2) (fun_app$ar ?v1 ?v3))) :pattern ((fun_app$h (fun_app$ai (fun_app$bd (uvl$ ?v0) ?v1) ?v2) ?v3)))) :named a49))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$j (fun_app$k (fun_app$av (uvp$ ?v0) ?v1) ?v2) ?v3) (= (fun_app$at ?v0 ?v2) (fun_app$at ?v1 ?v3))) :pattern ((fun_app$j (fun_app$k (fun_app$av (uvp$ ?v0) ?v1) ?v2) ?v3)))) :named a50))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$bs uug$ ?v0) ?v0) :pattern ((fun_app$bs uug$ ?v0)))) :named a51))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$ah uuh$ ?v0) ?v0) :pattern ((fun_app$ah uuh$ ?v0)))) :named a52))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$at uui$ ?v0) ?v0) :pattern ((fun_app$at uui$ ?v0)))) :named a53))
(assert (! (forall ((?v0 B_nat_prod$)) (! (= (fun_app$v uum$ ?v0) true) :pattern ((fun_app$v uum$ ?v0)))) :named a54))
(assert (! (forall ((?v0 A_nat_prod$)) (! (= (fun_app$x uul$ ?v0) true) :pattern ((fun_app$x uul$ ?v0)))) :named a55))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$h uuk$ ?v0) true) :pattern ((fun_app$h uuk$ ?v0)))) :named a56))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$j uuj$ ?v0) true) :pattern ((fun_app$j uuj$ ?v0)))) :named a57))
(assert (! (not (fun_app$bt (fun_app$bu (rel_fun$ (llist_all2$ a$) (rel_fun$a uu$ (llist_all2$ a$))) uuc$) uuf$)) :named a58))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lfilter$b ?v0 (lfilter$b ?v0 ?v1)) (lfilter$b ?v0 ?v1))) :named a59))
(assert (! (forall ((?v0 B_bool_fun$) (?v1 B_llist$)) (= (lfilter$c ?v0 (lfilter$c ?v0 ?v1)) (lfilter$c ?v0 ?v1))) :named a60))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$) (?v1 A_nat_prod_llist$)) (= (lfilter$a ?v0 (lfilter$a ?v0 ?v1)) (lfilter$a ?v0 ?v1))) :named a61))
(assert (! (forall ((?v0 B_nat_prod_bool_fun$) (?v1 B_nat_prod_llist$)) (= (lfilter$ ?v0 (lfilter$ ?v0 ?v1)) (lfilter$ ?v0 ?v1))) :named a62))
(assert (! (forall ((?v0 Nat_llist$)) (= (fun_app$bv (fun_app$bw lmap$b uug$) ?v0) ?v0)) :named a63))
(assert (! (forall ((?v0 B_llist$)) (= (fun_app$bx (fun_app$by lmap$c uuh$) ?v0) ?v0)) :named a64))
(assert (! (forall ((?v0 A_llist$)) (= (fun_app$bz (fun_app$ca lmap$d uui$) ?v0) ?v0)) :named a65))
(assert (! (forall ((?v0 A_llist$)) (= (lfilter$b uuj$ ?v0) ?v0)) :named a66))
(assert (! (forall ((?v0 B_llist$)) (= (lfilter$c uuk$ ?v0) ?v0)) :named a67))
(assert (! (forall ((?v0 A_nat_prod_llist$)) (= (lfilter$a uul$ ?v0) ?v0)) :named a68))
(assert (! (forall ((?v0 B_nat_prod_llist$)) (= (lfilter$ uum$ ?v0) ?v0)) :named a69))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$b (fun_app$cb (llist_all2$ ?v0) (fun_app$bz (fun_app$ca lmap$d ?v1) ?v2)) ?v3) (fun_app$b (fun_app$cb (llist_all2$ (fun_app$as (uun$ ?v0) ?v1)) ?v2) ?v3))) :named a70))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_nat_prod_a_fun$) (?v2 A_nat_prod_llist$) (?v3 B_llist$)) (= (fun_app$b (fun_app$cb (llist_all2$ ?v0) (fun_app$t (fun_app$u lmap$a ?v1) ?v2)) ?v3) (llist_all2$a (fun_app$ap (uuo$ ?v0) ?v1) ?v2 ?v3))) :named a71))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B_llist$) (?v3 B_llist$)) (= (fun_app$b (fun_app$cb (llist_all2$ ?v0) (lmap$e ?v1 ?v2)) ?v3) (fun_app$b (fun_app$c (llist_all2$b (fun_app$aq (uup$ ?v0) ?v1)) ?v2) ?v3))) :named a72))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) (lmap$f ?v1 ?v2)) ?v3) (fun_app$b (fun_app$cb (llist_all2$ (fun_app$aj (uuq$ ?v0) ?v1)) ?v2) ?v3))) :named a73))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B_llist$) (?v3 B_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) (fun_app$bx (fun_app$by lmap$c ?v1) ?v2)) ?v3) (fun_app$b (fun_app$c (llist_all2$b (fun_app$ag (uur$ ?v0) ?v1)) ?v2) ?v3))) :named a74))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B_llist$) (?v3 A_llist$)) (= (fun_app$d (fun_app$cc (llist_all2$c ?v0) (fun_app$bx (fun_app$by lmap$c ?v1) ?v2)) ?v3) (fun_app$d (fun_app$cc (llist_all2$c (fun_app$am (uus$ ?v0) ?v1)) ?v2) ?v3))) :named a75))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A_llist$) (?v3 A_llist$)) (= (fun_app$d (fun_app$cc (llist_all2$c ?v0) (lmap$f ?v1 ?v2)) ?v3) (fun_app$d (fun_app$e (llist_all2$d (fun_app$an (uut$ ?v0) ?v1)) ?v2) ?v3))) :named a76))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B_llist$) (?v3 A_llist$)) (= (fun_app$d (fun_app$e (llist_all2$d ?v0) (lmap$e ?v1 ?v2)) ?v3) (fun_app$d (fun_app$cc (llist_all2$c (fun_app$au (uuu$ ?v0) ?v1)) ?v2) ?v3))) :named a77))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A_llist$) (?v3 A_llist$)) (= (fun_app$d (fun_app$e (llist_all2$d ?v0) (fun_app$bz (fun_app$ca lmap$d ?v1) ?v2)) ?v3) (fun_app$d (fun_app$e (llist_all2$d (fun_app$av (uuv$ ?v0) ?v1)) ?v2) ?v3))) :named a78))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_nat_prod_b_fun$) (?v2 B_nat_prod_llist$) (?v3 B_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) (fun_app$n (fun_app$o lmap$ ?v1) ?v2)) ?v3) (llist_all2$e (fun_app$af (uuw$ ?v0) ?v1) ?v2 ?v3))) :named a79))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$b (fun_app$cb (llist_all2$ ?v0) (fun_app$bz (fun_app$ca lmap$d ?v1) ?v2)) ?v3) (fun_app$b (fun_app$cb (llist_all2$ (fun_app$as (uun$ ?v0) ?v1)) ?v2) ?v3))) :named a80))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_nat_prod_a_fun$) (?v2 A_nat_prod_llist$) (?v3 B_llist$)) (= (fun_app$b (fun_app$cb (llist_all2$ ?v0) (fun_app$t (fun_app$u lmap$a ?v1) ?v2)) ?v3) (llist_all2$a (fun_app$ap (uuo$ ?v0) ?v1) ?v2 ?v3))) :named a81))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B_llist$) (?v3 B_llist$)) (= (fun_app$b (fun_app$cb (llist_all2$ ?v0) (lmap$e ?v1 ?v2)) ?v3) (fun_app$b (fun_app$c (llist_all2$b (fun_app$aq (uup$ ?v0) ?v1)) ?v2) ?v3))) :named a82))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) (lmap$f ?v1 ?v2)) ?v3) (fun_app$b (fun_app$cb (llist_all2$ (fun_app$aj (uuq$ ?v0) ?v1)) ?v2) ?v3))) :named a83))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B_llist$) (?v3 B_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) (fun_app$bx (fun_app$by lmap$c ?v1) ?v2)) ?v3) (fun_app$b (fun_app$c (llist_all2$b (fun_app$ag (uur$ ?v0) ?v1)) ?v2) ?v3))) :named a84))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_b_fun$) (?v2 B_llist$) (?v3 A_llist$)) (= (fun_app$d (fun_app$cc (llist_all2$c ?v0) (fun_app$bx (fun_app$by lmap$c ?v1) ?v2)) ?v3) (fun_app$d (fun_app$cc (llist_all2$c (fun_app$am (uus$ ?v0) ?v1)) ?v2) ?v3))) :named a85))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_b_fun$) (?v2 A_llist$) (?v3 A_llist$)) (= (fun_app$d (fun_app$cc (llist_all2$c ?v0) (lmap$f ?v1 ?v2)) ?v3) (fun_app$d (fun_app$e (llist_all2$d (fun_app$an (uut$ ?v0) ?v1)) ?v2) ?v3))) :named a86))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 B_a_fun$) (?v2 B_llist$) (?v3 A_llist$)) (= (fun_app$d (fun_app$e (llist_all2$d ?v0) (lmap$e ?v1 ?v2)) ?v3) (fun_app$d (fun_app$cc (llist_all2$c (fun_app$au (uuu$ ?v0) ?v1)) ?v2) ?v3))) :named a87))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A_llist$) (?v3 A_llist$)) (= (fun_app$d (fun_app$e (llist_all2$d ?v0) (fun_app$bz (fun_app$ca lmap$d ?v1) ?v2)) ?v3) (fun_app$d (fun_app$e (llist_all2$d (fun_app$av (uuv$ ?v0) ?v1)) ?v2) ?v3))) :named a88))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_nat_prod_b_fun$) (?v2 B_nat_prod_llist$) (?v3 B_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) (fun_app$n (fun_app$o lmap$ ?v1) ?v2)) ?v3) (llist_all2$e (fun_app$af (uuw$ ?v0) ?v1) ?v2 ?v3))) :named a89))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (fun_app$b (fun_app$cb (llist_all2$ ?v0) ?v1) (fun_app$bx (fun_app$by lmap$c ?v2) ?v3)) (fun_app$b (fun_app$cb (llist_all2$ (fun_app$bc (uux$ ?v0) ?v2)) ?v1) ?v3))) :named a90))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_nat_prod_b_fun$) (?v3 B_nat_prod_llist$)) (= (fun_app$b (fun_app$cb (llist_all2$ ?v0) ?v1) (fun_app$n (fun_app$o lmap$ ?v2) ?v3)) (fun_app$cd (fun_app$ce (llist_all2$f (fun_app$bb (uuy$ ?v0) ?v2)) ?v1) ?v3))) :named a91))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 A_b_fun$) (?v3 A_llist$)) (= (fun_app$b (fun_app$cb (llist_all2$ ?v0) ?v1) (lmap$f ?v2 ?v3)) (fun_app$d (fun_app$e (llist_all2$d (fun_app$an (uuz$ ?v0) ?v2)) ?v1) ?v3))) :named a92))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) (fun_app$bx (fun_app$by lmap$c ?v2) ?v3)) (fun_app$b (fun_app$c (llist_all2$b (fun_app$ag (uva$ ?v0) ?v2)) ?v1) ?v3))) :named a93))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 A_b_fun$) (?v3 A_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) (lmap$f ?v2 ?v3)) (fun_app$d (fun_app$cc (llist_all2$c (fun_app$ay (uvb$ ?v0) ?v2)) ?v1) ?v3))) :named a94))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 B_a_fun$) (?v3 B_llist$)) (= (fun_app$d (fun_app$cc (llist_all2$c ?v0) ?v1) (lmap$e ?v2 ?v3)) (fun_app$b (fun_app$c (llist_all2$b (fun_app$aq (uvc$ ?v0) ?v2)) ?v1) ?v3))) :named a95))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_a_fun$) (?v3 A_llist$)) (= (fun_app$d (fun_app$cc (llist_all2$c ?v0) ?v1) (fun_app$bz (fun_app$ca lmap$d ?v2) ?v3)) (fun_app$d (fun_app$cc (llist_all2$c (fun_app$az (uvd$ ?v0) ?v2)) ?v1) ?v3))) :named a96))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 B_a_fun$) (?v3 B_llist$)) (= (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v1) (lmap$e ?v2 ?v3)) (fun_app$b (fun_app$cb (llist_all2$ (fun_app$bd (uve$ ?v0) ?v2)) ?v1) ?v3))) :named a97))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_a_fun$) (?v3 A_llist$)) (= (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v1) (fun_app$bz (fun_app$ca lmap$d ?v2) ?v3)) (fun_app$d (fun_app$e (llist_all2$d (fun_app$av (uvf$ ?v0) ?v2)) ?v1) ?v3))) :named a98))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_nat_prod_b_fun$) (?v3 B_nat_prod_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) (fun_app$n (fun_app$o lmap$ ?v2) ?v3)) (llist_all2$g (fun_app$ax (uvg$ ?v0) ?v2) ?v1 ?v3))) :named a99))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (fun_app$b (fun_app$cb (llist_all2$ ?v0) ?v1) (fun_app$bx (fun_app$by lmap$c ?v2) ?v3)) (fun_app$b (fun_app$cb (llist_all2$ (fun_app$bc (uux$ ?v0) ?v2)) ?v1) ?v3))) :named a100))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_nat_prod_b_fun$) (?v3 B_nat_prod_llist$)) (= (fun_app$b (fun_app$cb (llist_all2$ ?v0) ?v1) (fun_app$n (fun_app$o lmap$ ?v2) ?v3)) (fun_app$cd (fun_app$ce (llist_all2$f (fun_app$bb (uuy$ ?v0) ?v2)) ?v1) ?v3))) :named a101))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 A_b_fun$) (?v3 A_llist$)) (= (fun_app$b (fun_app$cb (llist_all2$ ?v0) ?v1) (lmap$f ?v2 ?v3)) (fun_app$d (fun_app$e (llist_all2$d (fun_app$an (uuz$ ?v0) ?v2)) ?v1) ?v3))) :named a102))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) (fun_app$bx (fun_app$by lmap$c ?v2) ?v3)) (fun_app$b (fun_app$c (llist_all2$b (fun_app$ag (uva$ ?v0) ?v2)) ?v1) ?v3))) :named a103))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 A_b_fun$) (?v3 A_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) (lmap$f ?v2 ?v3)) (fun_app$d (fun_app$cc (llist_all2$c (fun_app$ay (uvb$ ?v0) ?v2)) ?v1) ?v3))) :named a104))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 B_a_fun$) (?v3 B_llist$)) (= (fun_app$d (fun_app$cc (llist_all2$c ?v0) ?v1) (lmap$e ?v2 ?v3)) (fun_app$b (fun_app$c (llist_all2$b (fun_app$aq (uvc$ ?v0) ?v2)) ?v1) ?v3))) :named a105))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_a_fun$) (?v3 A_llist$)) (= (fun_app$d (fun_app$cc (llist_all2$c ?v0) ?v1) (fun_app$bz (fun_app$ca lmap$d ?v2) ?v3)) (fun_app$d (fun_app$cc (llist_all2$c (fun_app$az (uvd$ ?v0) ?v2)) ?v1) ?v3))) :named a106))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 B_a_fun$) (?v3 B_llist$)) (= (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v1) (lmap$e ?v2 ?v3)) (fun_app$b (fun_app$cb (llist_all2$ (fun_app$bd (uve$ ?v0) ?v2)) ?v1) ?v3))) :named a107))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_a_fun$) (?v3 A_llist$)) (= (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v1) (fun_app$bz (fun_app$ca lmap$d ?v2) ?v3)) (fun_app$d (fun_app$e (llist_all2$d (fun_app$av (uvf$ ?v0) ?v2)) ?v1) ?v3))) :named a108))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_nat_prod_b_fun$) (?v3 B_nat_prod_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) (fun_app$n (fun_app$o lmap$ ?v2) ?v3)) (llist_all2$g (fun_app$ax (uvg$ ?v0) ?v2) ?v1 ?v3))) :named a109))
(assert (! (forall ((?v0 A_nat_prod_a_fun$) (?v1 A_nat_prod_llist$) (?v2 A_nat_prod_a_fun$) (?v3 A_nat_prod_llist$)) (= (= (fun_app$t (fun_app$u lmap$a ?v0) ?v1) (fun_app$t (fun_app$u lmap$a ?v2) ?v3)) (fun_app$cf (fun_app$cg (llist_all2$h (fun_app$bo (uvh$ ?v0) ?v2)) ?v1) ?v3))) :named a110))
(assert (! (forall ((?v0 B_nat_prod_b_fun$) (?v1 B_nat_prod_llist$) (?v2 B_nat_prod_b_fun$) (?v3 B_nat_prod_llist$)) (= (= (fun_app$n (fun_app$o lmap$ ?v0) ?v1) (fun_app$n (fun_app$o lmap$ ?v2) ?v3)) (fun_app$cd (fun_app$ch (llist_all2$i (fun_app$bm (uvi$ ?v0) ?v2)) ?v1) ?v3))) :named a111))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_llist$) (?v2 Nat_nat_fun$) (?v3 Nat_llist$)) (= (= (fun_app$bv (fun_app$bw lmap$b ?v0) ?v1) (fun_app$bv (fun_app$bw lmap$b ?v2) ?v3)) (fun_app$ci (fun_app$cj (llist_all2$j (uvj$ ?v0 ?v2)) ?v1) ?v3))) :named a112))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (= (lmap$f ?v0 ?v1) (fun_app$bx (fun_app$by lmap$c ?v2) ?v3)) (fun_app$b (fun_app$cb (llist_all2$ (fun_app$bc (uvk$ ?v0) ?v2)) ?v1) ?v3))) :named a113))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 B_a_fun$) (?v3 B_llist$)) (= (= (fun_app$bz (fun_app$ca lmap$d ?v0) ?v1) (lmap$e ?v2 ?v3)) (fun_app$b (fun_app$cb (llist_all2$ (fun_app$bd (uvl$ ?v0) ?v2)) ?v1) ?v3))) :named a114))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$) (?v2 B_b_fun$) (?v3 B_llist$)) (= (= (fun_app$bx (fun_app$by lmap$c ?v0) ?v1) (fun_app$bx (fun_app$by lmap$c ?v2) ?v3)) (fun_app$b (fun_app$c (llist_all2$b (fun_app$ag (uvm$ ?v0) ?v2)) ?v1) ?v3))) :named a115))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$) (?v2 A_a_fun$) (?v3 A_llist$)) (= (= (lmap$e ?v0 ?v1) (fun_app$bz (fun_app$ca lmap$d ?v2) ?v3)) (fun_app$d (fun_app$cc (llist_all2$c (fun_app$az (uvn$ ?v0) ?v2)) ?v1) ?v3))) :named a116))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$) (?v2 A_b_fun$) (?v3 A_llist$)) (= (= (fun_app$bx (fun_app$by lmap$c ?v0) ?v1) (lmap$f ?v2 ?v3)) (fun_app$d (fun_app$cc (llist_all2$c (fun_app$ay (uvo$ ?v0) ?v2)) ?v1) ?v3))) :named a117))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 A_a_fun$) (?v3 A_llist$)) (= (= (fun_app$bz (fun_app$ca lmap$d ?v0) ?v1) (fun_app$bz (fun_app$ca lmap$d ?v2) ?v3)) (fun_app$d (fun_app$e (llist_all2$d (fun_app$av (uvp$ ?v0) ?v2)) ?v1) ?v3))) :named a118))
(assert (! (forall ((?v0 A_nat_prod_a_fun$) (?v1 A_nat_prod_llist$) (?v2 A_a_fun$) (?v3 A_llist$)) (= (= (fun_app$t (fun_app$u lmap$a ?v0) ?v1) (fun_app$bz (fun_app$ca lmap$d ?v2) ?v3)) (llist_all2$k (fun_app$bq (uvq$ ?v0) ?v2) ?v1 ?v3))) :named a119))
(assert (! (forall ((?v0 Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$) (?v1 Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$) (?v2 Nat_set_a_llist_fun_llist$) (?v3 Nat_set_b_llist_fun_llist$)) (= (fun_app$ck (fun_app$cl (llist_all2$l (uvr$ ?v0 ?v1)) ?v2) ?v3) (and (fun_app$ck (fun_app$cl (llist_all2$l ?v0) ?v2) ?v3) (fun_app$ck (fun_app$cl (llist_all2$l ?v1) ?v2) ?v3)))) :named a120))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_b_bool_fun_fun$) (?v2 B_llist$) (?v3 B_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b (fun_app$bg (uvs$ ?v0) ?v1)) ?v2) ?v3) (and (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v2) ?v3) (fun_app$b (fun_app$c (llist_all2$b ?v1) ?v2) ?v3)))) :named a121))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_a_bool_fun_fun$) (?v2 B_llist$) (?v3 A_llist$)) (= (fun_app$d (fun_app$cc (llist_all2$c (fun_app$bh (uvt$ ?v0) ?v1)) ?v2) ?v3) (and (fun_app$d (fun_app$cc (llist_all2$c ?v0) ?v2) ?v3) (fun_app$d (fun_app$cc (llist_all2$c ?v1) ?v2) ?v3)))) :named a122))
(assert (! (forall ((?v0 A_b_nat_prod_bool_fun_fun$) (?v1 A_b_nat_prod_bool_fun_fun$) (?v2 A_llist$) (?v3 B_nat_prod_llist$)) (= (fun_app$cd (fun_app$ce (llist_all2$f (fun_app$bi (uvu$ ?v0) ?v1)) ?v2) ?v3) (and (fun_app$cd (fun_app$ce (llist_all2$f ?v0) ?v2) ?v3) (fun_app$cd (fun_app$ce (llist_all2$f ?v1) ?v2) ?v3)))) :named a123))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_bool_fun_fun$) (?v2 A_llist$) (?v3 A_llist$)) (= (fun_app$d (fun_app$e (llist_all2$d (fun_app$bk (uvv$ ?v0) ?v1)) ?v2) ?v3) (and (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v2) ?v3) (fun_app$d (fun_app$e (llist_all2$d ?v1) ?v2) ?v3)))) :named a124))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_bool_fun_fun$) (?v2 A_llist$) (?v3 B_llist$)) (= (fun_app$b (fun_app$cb (llist_all2$ (fun_app$bj (uvw$ ?v0) ?v1)) ?v2) ?v3) (and (fun_app$b (fun_app$cb (llist_all2$ ?v0) ?v2) ?v3) (fun_app$b (fun_app$cb (llist_all2$ ?v1) ?v2) ?v3)))) :named a125))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$) (?v2 A_llist$)) (= (lfilter$b ?v0 (lfilter$b ?v1 ?v2)) (lfilter$b (fun_app$aa (uvx$ ?v0) ?v1) ?v2))) :named a126))
(assert (! (forall ((?v0 B_bool_fun$) (?v1 B_bool_fun$) (?v2 B_llist$)) (= (lfilter$c ?v0 (lfilter$c ?v1 ?v2)) (lfilter$c (fun_app$z (uvy$ ?v0) ?v1) ?v2))) :named a127))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$) (?v1 A_nat_prod_bool_fun$) (?v2 A_nat_prod_llist$)) (= (lfilter$a ?v0 (lfilter$a ?v1 ?v2)) (lfilter$a (fun_app$y (uvz$ ?v0) ?v1) ?v2))) :named a128))
(assert (! (forall ((?v0 B_nat_prod_bool_fun$) (?v1 B_nat_prod_bool_fun$) (?v2 B_nat_prod_llist$)) (= (lfilter$ ?v0 (lfilter$ ?v1 ?v2)) (lfilter$ (fun_app$w (uwa$ ?v0) ?v1) ?v2))) :named a129))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (= (fun_app$bx (fun_app$by lmap$c ?v0) (fun_app$cm (fun_app$cn iterates$a ?v0) ?v1)) (fun_app$cm (fun_app$cn iterates$a ?v0) (fun_app$ah ?v0 ?v1)))) :named a130))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$bz (fun_app$ca lmap$d ?v0) (fun_app$co (fun_app$cp iterates$b ?v0) ?v1)) (fun_app$co (fun_app$cp iterates$b ?v0) (fun_app$at ?v0 ?v1)))) :named a131))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$)) (= (fun_app$bv (fun_app$bw lmap$b ?v0) (fun_app$p (fun_app$q iterates$ ?v0) ?v1)) (fun_app$p (fun_app$q iterates$ ?v0) (fun_app$bs ?v0 ?v1)))) :named a132))
(assert (! (= (llist_all2$b uwb$) uwc$) :named a133))
(assert (! (= (llist_all2$d uwd$) uwe$) :named a134))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_bool_fun$) (?v4 B_bool_fun$)) (=> (and (fun_app$b (fun_app$cb (llist_all2$ ?v0) ?v1) ?v2) (forall ((?v5 A$) (?v6 B$)) (=> (fun_app$h (fun_app$ai ?v0 ?v5) ?v6) (= (fun_app$j ?v3 ?v5) (fun_app$h ?v4 ?v6))))) (fun_app$b (fun_app$cb (llist_all2$ ?v0) (lfilter$b ?v3 ?v1)) (lfilter$c ?v4 ?v2)))) :named a135))
(assert (! (forall ((?v0 A_nat_prod_a_nat_prod_bool_fun_fun$) (?v1 A_nat_prod_llist$) (?v2 A_nat_prod_llist$) (?v3 A_nat_prod_bool_fun$) (?v4 A_nat_prod_bool_fun$)) (=> (and (fun_app$cf (fun_app$cg (llist_all2$h ?v0) ?v1) ?v2) (forall ((?v5 A_nat_prod$) (?v6 A_nat_prod$)) (=> (fun_app$x (fun_app$bn ?v0 ?v5) ?v6) (= (fun_app$x ?v3 ?v5) (fun_app$x ?v4 ?v6))))) (fun_app$cf (fun_app$cg (llist_all2$h ?v0) (lfilter$a ?v3 ?v1)) (lfilter$a ?v4 ?v2)))) :named a136))
(assert (! (forall ((?v0 A_nat_prod_b_nat_prod_bool_fun_fun$) (?v1 A_nat_prod_llist$) (?v2 B_nat_prod_llist$) (?v3 A_nat_prod_bool_fun$) (?v4 B_nat_prod_bool_fun$)) (=> (and (fun_app$cd (fun_app$cq (llist_all2$m ?v0) ?v1) ?v2) (forall ((?v5 A_nat_prod$) (?v6 B_nat_prod$)) (=> (fun_app$v (fun_app$cr ?v0 ?v5) ?v6) (= (fun_app$x ?v3 ?v5) (fun_app$v ?v4 ?v6))))) (fun_app$cd (fun_app$cq (llist_all2$m ?v0) (lfilter$a ?v3 ?v1)) (lfilter$ ?v4 ?v2)))) :named a137))
(assert (! (forall ((?v0 B_nat_prod_a_nat_prod_bool_fun_fun$) (?v1 B_nat_prod_llist$) (?v2 A_nat_prod_llist$) (?v3 B_nat_prod_bool_fun$) (?v4 A_nat_prod_bool_fun$)) (=> (and (fun_app$cf (fun_app$cs (llist_all2$n ?v0) ?v1) ?v2) (forall ((?v5 B_nat_prod$) (?v6 A_nat_prod$)) (=> (fun_app$x (fun_app$ct ?v0 ?v5) ?v6) (= (fun_app$v ?v3 ?v5) (fun_app$x ?v4 ?v6))))) (fun_app$cf (fun_app$cs (llist_all2$n ?v0) (lfilter$ ?v3 ?v1)) (lfilter$a ?v4 ?v2)))) :named a138))
(assert (! (forall ((?v0 B_nat_prod_b_nat_prod_bool_fun_fun$) (?v1 B_nat_prod_llist$) (?v2 B_nat_prod_llist$) (?v3 B_nat_prod_bool_fun$) (?v4 B_nat_prod_bool_fun$)) (=> (and (fun_app$cd (fun_app$ch (llist_all2$i ?v0) ?v1) ?v2) (forall ((?v5 B_nat_prod$) (?v6 B_nat_prod$)) (=> (fun_app$v (fun_app$bl ?v0 ?v5) ?v6) (= (fun_app$v ?v3 ?v5) (fun_app$v ?v4 ?v6))))) (fun_app$cd (fun_app$ch (llist_all2$i ?v0) (lfilter$ ?v3 ?v1)) (lfilter$ ?v4 ?v2)))) :named a139))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_bool_fun$) (?v4 B_bool_fun$)) (=> (and (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) ?v2) (forall ((?v5 B$) (?v6 B$)) (=> (fun_app$h (fun_app$i ?v0 ?v5) ?v6) (= (fun_app$h ?v3 ?v5) (fun_app$h ?v4 ?v6))))) (fun_app$b (fun_app$c (llist_all2$b ?v0) (lfilter$c ?v3 ?v1)) (lfilter$c ?v4 ?v2)))) :named a140))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_bool_fun$) (?v4 A_bool_fun$)) (=> (and (fun_app$d (fun_app$cc (llist_all2$c ?v0) ?v1) ?v2) (forall ((?v5 B$) (?v6 A$)) (=> (fun_app$j (fun_app$al ?v0 ?v5) ?v6) (= (fun_app$h ?v3 ?v5) (fun_app$j ?v4 ?v6))))) (fun_app$d (fun_app$cc (llist_all2$c ?v0) (lfilter$c ?v3 ?v1)) (lfilter$b ?v4 ?v2)))) :named a141))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_bool_fun$) (?v4 A_bool_fun$)) (=> (and (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v1) ?v2) (forall ((?v5 A$) (?v6 A$)) (=> (fun_app$j (fun_app$k ?v0 ?v5) ?v6) (= (fun_app$j ?v3 ?v5) (fun_app$j ?v4 ?v6))))) (fun_app$d (fun_app$e (llist_all2$d ?v0) (lfilter$b ?v3 ?v1)) (lfilter$b ?v4 ?v2)))) :named a142))
(assert (! (forall ((?v0 A_nat_prod_a_bool_fun_fun$) (?v1 A_nat_prod_llist$) (?v2 A_llist$) (?v3 A_nat_prod_bool_fun$) (?v4 A_bool_fun$)) (=> (and (llist_all2$k ?v0 ?v1 ?v2) (forall ((?v5 A_nat_prod$) (?v6 A$)) (=> (fun_app$j (fun_app$bp ?v0 ?v5) ?v6) (= (fun_app$x ?v3 ?v5) (fun_app$j ?v4 ?v6))))) (llist_all2$k ?v0 (lfilter$a ?v3 ?v1) (lfilter$b ?v4 ?v2)))) :named a143))
(assert (! (forall ((?v0 A_nat_prod_b_bool_fun_fun$) (?v1 A_nat_prod_llist$) (?v2 B_llist$) (?v3 A_nat_prod_bool_fun$) (?v4 B_bool_fun$)) (=> (and (llist_all2$a ?v0 ?v1 ?v2) (forall ((?v5 A_nat_prod$) (?v6 B$)) (=> (fun_app$h (fun_app$ao ?v0 ?v5) ?v6) (= (fun_app$x ?v3 ?v5) (fun_app$h ?v4 ?v6))))) (llist_all2$a ?v0 (lfilter$a ?v3 ?v1) (lfilter$c ?v4 ?v2)))) :named a144))
(assert (! (forall ((?v0 Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$) (?v1 Nat_set_a_llist_fun_llist$) (?v2 Nat_set_b_llist_fun_llist$) (?v3 Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$)) (=> (and (fun_app$ck (fun_app$cl (llist_all2$l ?v0) ?v1) ?v2) (forall ((?v4 Nat_set_a_llist_fun$) (?v5 Nat_set_b_llist_fun$)) (=> (fun_app$be (fun_app$bf ?v0 ?v4) ?v5) (fun_app$be (fun_app$bf ?v3 ?v4) ?v5)))) (fun_app$ck (fun_app$cl (llist_all2$l ?v3) ?v1) ?v2))) :named a145))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_b_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) ?v2) (forall ((?v4 B$) (?v5 B$)) (=> (fun_app$h (fun_app$i ?v0 ?v4) ?v5) (fun_app$h (fun_app$i ?v3 ?v4) ?v5)))) (fun_app$b (fun_app$c (llist_all2$b ?v3) ?v1) ?v2))) :named a146))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_a_bool_fun_fun$)) (=> (and (fun_app$d (fun_app$cc (llist_all2$c ?v0) ?v1) ?v2) (forall ((?v4 B$) (?v5 A$)) (=> (fun_app$j (fun_app$al ?v0 ?v4) ?v5) (fun_app$j (fun_app$al ?v3 ?v4) ?v5)))) (fun_app$d (fun_app$cc (llist_all2$c ?v3) ?v1) ?v2))) :named a147))
(assert (! (forall ((?v0 A_b_nat_prod_bool_fun_fun$) (?v1 A_llist$) (?v2 B_nat_prod_llist$) (?v3 A_b_nat_prod_bool_fun_fun$)) (=> (and (fun_app$cd (fun_app$ce (llist_all2$f ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 B_nat_prod$)) (=> (fun_app$v (fun_app$ba ?v0 ?v4) ?v5) (fun_app$v (fun_app$ba ?v3 ?v4) ?v5)))) (fun_app$cd (fun_app$ce (llist_all2$f ?v3) ?v1) ?v2))) :named a148))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 A$)) (=> (fun_app$j (fun_app$k ?v0 ?v4) ?v5) (fun_app$j (fun_app$k ?v3 ?v4) ?v5)))) (fun_app$d (fun_app$e (llist_all2$d ?v3) ?v1) ?v2))) :named a149))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_b_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$cb (llist_all2$ ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 B$)) (=> (fun_app$h (fun_app$ai ?v0 ?v4) ?v5) (fun_app$h (fun_app$ai ?v3 ?v4) ?v5)))) (fun_app$b (fun_app$cb (llist_all2$ ?v3) ?v1) ?v2))) :named a150))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_bool_fun_fun$)) (rel_fun$b (rel_fun$c ?v0 ?v1) (rel_fun$d (llist_all2$ ?v0) (llist_all2$ ?v1)) lmap$d lmap$c)) :named a151))
(assert (! (forall ((?v0 Nat_set_nat_set_bool_fun_fun$) (?v1 A_llist_b_llist_bool_fun_fun$)) (rel_fun$e (rel_fun$a ?v0 ?v1) (rel_fun$f (llist_all2$o ?v0) (llist_all2$p ?v1)) lmap$g lmap$h)) :named a152))
(assert (! (forall ((?v0 A_nat_prod_a_nat_prod_bool_fun_fun$) (?v1 A_a_bool_fun_fun$)) (rel_fun$g (rel_fun$h ?v0 ?v1) (rel_fun$i (llist_all2$h ?v0) (llist_all2$d ?v1)) lmap$a lmap$a)) :named a153))
(assert (! (forall ((?v0 B_nat_prod_a_nat_prod_bool_fun_fun$) (?v1 B_a_bool_fun_fun$)) (rel_fun$j (rel_fun$k ?v0 ?v1) (rel_fun$l (llist_all2$n ?v0) (llist_all2$c ?v1)) lmap$ lmap$a)) :named a154))
(assert (! (forall ((?v0 B_nat_prod_b_nat_prod_bool_fun_fun$) (?v1 B_b_bool_fun_fun$)) (rel_fun$m (rel_fun$n ?v0 ?v1) (rel_fun$o (llist_all2$i ?v0) (llist_all2$b ?v1)) lmap$ lmap$)) :named a155))
(assert (! (forall ((?v0 A_nat_prod_b_nat_prod_bool_fun_fun$) (?v1 A_b_bool_fun_fun$)) (rel_fun$p (rel_fun$q ?v0 ?v1) (rel_fun$r (llist_all2$m ?v0) (llist_all2$ ?v1)) lmap$a lmap$)) :named a156))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$) (?v1 Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$)) (rel_fun$s (rel_fun$ ?v0 ?v1) (rel_fun$t (llist_all2$p ?v0) (llist_all2$l ?v1)) lmap$i lmap$j)) :named a157))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$)) (rel_fun$u (rel_fun$v ?v0 ?v1) (rel_fun$w (llist_all2$j ?v0) (llist_all2$j ?v1)) lmap$b lmap$b)) :named a158))
(assert (! (forall ((?v0 Nat_b_bool_fun_fun$) (?v1 Nat_b_bool_fun_fun$)) (rel_fun$x (rel_fun$y ?v0 ?v1) (rel_fun$z (llist_all2$q ?v0) (llist_all2$q ?v1)) lmap$b lmap$c)) :named a159))
(assert (! (forall ((?v0 Nat_a_bool_fun_fun$) (?v1 Nat_a_bool_fun_fun$)) (rel_fun$aa (rel_fun$ab ?v0 ?v1) (rel_fun$ac (llist_all2$r ?v0) (llist_all2$r ?v1)) lmap$b lmap$d)) :named a160))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_bool_fun_fun$)) (rel_fun$b (rel_fun$c ?v0 ?v1) (rel_fun$d (llist_all2$ ?v0) (llist_all2$ ?v1)) lmap$d lmap$c)) :named a161))
(assert (! (forall ((?v0 Nat_set_nat_set_bool_fun_fun$) (?v1 A_llist_b_llist_bool_fun_fun$)) (rel_fun$e (rel_fun$a ?v0 ?v1) (rel_fun$f (llist_all2$o ?v0) (llist_all2$p ?v1)) lmap$g lmap$h)) :named a162))
(assert (! (forall ((?v0 A_nat_prod_a_nat_prod_bool_fun_fun$) (?v1 A_a_bool_fun_fun$)) (rel_fun$g (rel_fun$h ?v0 ?v1) (rel_fun$i (llist_all2$h ?v0) (llist_all2$d ?v1)) lmap$a lmap$a)) :named a163))
(assert (! (forall ((?v0 B_nat_prod_a_nat_prod_bool_fun_fun$) (?v1 B_a_bool_fun_fun$)) (rel_fun$j (rel_fun$k ?v0 ?v1) (rel_fun$l (llist_all2$n ?v0) (llist_all2$c ?v1)) lmap$ lmap$a)) :named a164))
(assert (! (forall ((?v0 B_nat_prod_b_nat_prod_bool_fun_fun$) (?v1 B_b_bool_fun_fun$)) (rel_fun$m (rel_fun$n ?v0 ?v1) (rel_fun$o (llist_all2$i ?v0) (llist_all2$b ?v1)) lmap$ lmap$)) :named a165))
(assert (! (forall ((?v0 A_nat_prod_b_nat_prod_bool_fun_fun$) (?v1 A_b_bool_fun_fun$)) (rel_fun$p (rel_fun$q ?v0 ?v1) (rel_fun$r (llist_all2$m ?v0) (llist_all2$ ?v1)) lmap$a lmap$)) :named a166))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$) (?v1 Nat_set_a_llist_fun_nat_set_b_llist_fun_bool_fun_fun$)) (rel_fun$s (rel_fun$ ?v0 ?v1) (rel_fun$t (llist_all2$p ?v0) (llist_all2$l ?v1)) lmap$i lmap$j)) :named a167))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$)) (rel_fun$u (rel_fun$v ?v0 ?v1) (rel_fun$w (llist_all2$j ?v0) (llist_all2$j ?v1)) lmap$b lmap$b)) :named a168))
(assert (! (forall ((?v0 Nat_b_bool_fun_fun$) (?v1 Nat_b_bool_fun_fun$)) (rel_fun$x (rel_fun$y ?v0 ?v1) (rel_fun$z (llist_all2$q ?v0) (llist_all2$q ?v1)) lmap$b lmap$c)) :named a169))
(assert (! (forall ((?v0 Nat_a_bool_fun_fun$) (?v1 Nat_a_bool_fun_fun$)) (rel_fun$aa (rel_fun$ab ?v0 ?v1) (rel_fun$ac (llist_all2$r ?v0) (llist_all2$r ?v1)) lmap$b lmap$d)) :named a170))
(assert (! (forall ((?v0 B_a_bool_fun_fun$)) (rel_fun$ad (rel_fun$ae ?v0 ?v0) (rel_fun$af ?v0 (llist_all2$c ?v0)) iterates$a iterates$b)) :named a171))
(assert (! (forall ((?v0 A_b_nat_prod_bool_fun_fun$)) (rel_fun$ag (rel_fun$ah ?v0 ?v0) (rel_fun$ai ?v0 (llist_all2$f ?v0)) iterates$b iterates$c)) :named a172))
(assert (! (forall ((?v0 A_a_bool_fun_fun$)) (rel_fun$aj (rel_fun$ak ?v0 ?v0) (rel_fun$al ?v0 (llist_all2$d ?v0)) iterates$b iterates$b)) :named a173))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$)) (rel_fun$am (rel_fun$v ?v0 ?v0) (rel_fun$an ?v0 (llist_all2$j ?v0)) iterates$ iterates$)) :named a174))
(assert (! (forall ((?v0 A_b_bool_fun_fun$)) (rel_fun$ao (rel_fun$c ?v0 ?v0) (rel_fun$ap ?v0 (llist_all2$ ?v0)) iterates$b iterates$a)) :named a175))
(check-sat)
;(get-unsat-core)
