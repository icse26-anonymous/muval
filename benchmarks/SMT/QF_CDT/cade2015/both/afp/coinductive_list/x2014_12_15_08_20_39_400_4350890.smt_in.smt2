; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 691
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun xs$ () A_list$)
(declare-fun ys$ () A_list$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun llist_of$ (A_list$) A_llist$)
(declare-fun prefixeq$ (A_list$ A_list$) Bool)
(assert (! (not (= (lprefix$ (llist_of$ xs$) (llist_of$ ys$)) (prefixeq$ xs$ ys$))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a1))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a2))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v0)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v0)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v2 ?v1)) (or (lprefix$ ?v0 ?v2) (lprefix$ ?v2 ?v0)))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v2)) (lprefix$ ?v0 ?v2))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v2)) (lprefix$ ?v0 ?v2))) :named a8))
(assert (! (forall ((?v0 A_list$)) (prefixeq$ ?v0 ?v0)) :named a9))
(assert (! (forall ((?v0 A_list$)) (prefixeq$ ?v0 ?v0)) :named a10))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= ?v0 ?v1) (and (prefixeq$ ?v0 ?v1) (prefixeq$ ?v1 ?v0)))) :named a11))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (and (= ?v0 ?v1) (prefixeq$ ?v1 ?v2)) (prefixeq$ ?v0 ?v2))) :named a12))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (= ?v0 ?v1) (prefixeq$ ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (=> (and (prefixeq$ ?v0 ?v1) (= ?v1 ?v2)) (prefixeq$ ?v0 ?v2))) :named a14))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (prefixeq$ ?v0 ?v1) (prefixeq$ ?v1 ?v0)) (= ?v1 ?v0))) :named a15))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (prefixeq$ ?v0 ?v1) (prefixeq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (and (prefixeq$ ?v0 ?v1) (prefixeq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a17))
(check-sat)
;(get-unsat-core)
