; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 610
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort A_list_a_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun f$ () Nat_a_fun$)
(declare-fun f$a (A_a_a_fun_fun$ A$) A_list_a_fun$)
(declare-fun rev$ (A_list$) A_list$)
(declare-fun fold$ (A_a_a_fun_fun$ A_list$) A_a_fun$)
(declare-fun plus$ () A_a_a_fun_fun$)
(declare-fun zero$ () A$)
(declare-fun foldr$ (A_a_a_fun_fun$ A_list$ A$) A$)
(declare-fun append$ (A_list$ A_list$) A_list$)
(declare-fun fun_app$ (A_a_fun$ A$) A$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun list_of$ (A_llist$) A_list$)
(declare-fun listsum$ (A_a_a_fun_fun$ A$) A_list_a_fun$)
(declare-fun fun_app$a (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$b (A_list_a_fun$ A_list$) A$)
(declare-fun llist_of$ (A_list$) A_llist$)
(declare-fun llistsum$ (A_a_a_fun_fun$ A$ A_llist$) A$)
(declare-fun inf_llist$ (Nat_a_fun$) A_llist$)
(assert (! (not (= (llistsum$ plus$ zero$ (inf_llist$ f$)) zero$)) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (= (fun_app$ (fun_app$a plus$ (fun_app$ (fun_app$a plus$ ?v0) ?v1)) ?v2) (fun_app$ (fun_app$a plus$ ?v0) (fun_app$ (fun_app$a plus$ ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_a_fun$)) (= (= (inf_llist$ ?v0) (inf_llist$ ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A$)) (= (fun_app$ (fun_app$a plus$ ?v0) zero$) ?v0)) :named a3))
(assert (! (forall ((?v0 A$)) (= (fun_app$ (fun_app$a plus$ zero$) ?v0) ?v0)) :named a4))
(assert (! (= (llistsum$ plus$ zero$ lNil$) zero$) :named a5))
(assert (! (forall ((?v0 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (llistsum$ plus$ zero$ ?v0) zero$)) :pattern ((llistsum$ plus$ zero$ ?v0)))) :named a6))
(assert (! (= (listsum$ plus$ zero$) (f$a plus$ zero$)) :named a7))
(assert (! (forall ((?v0 A_list$)) (! (= (fun_app$b (listsum$ plus$ zero$) ?v0) (foldr$ plus$ ?v0 zero$)) :pattern ((fun_app$b (listsum$ plus$ zero$) ?v0)))) :named a8))
(assert (! (forall ((?v0 A_list$)) (= (llistsum$ plus$ zero$ (llist_of$ ?v0)) (fun_app$b (listsum$ plus$ zero$) ?v0))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lfinite$ ?v0) (lfinite$ ?v1)) (= (llistsum$ plus$ zero$ (lappend$ ?v0 ?v1)) (fun_app$ (fun_app$a plus$ (llistsum$ plus$ zero$ ?v0)) (llistsum$ plus$ zero$ ?v1))))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (! (=> (lfinite$ ?v0) (= (llistsum$ plus$ zero$ (lCons$ ?v1 ?v0)) (fun_app$ (fun_app$a plus$ ?v1) (llistsum$ plus$ zero$ ?v0)))) :pattern ((lCons$ ?v1 ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist$)) (! (= (llistsum$ plus$ zero$ ?v0) (ite (lfinite$ ?v0) (fun_app$b (listsum$ plus$ zero$) (list_of$ ?v0)) zero$)) :pattern ((llistsum$ plus$ zero$ ?v0)))) :named a12))
(assert (! (= (fun_app$b (listsum$ plus$ zero$) nil$) zero$) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (= (fun_app$b (listsum$ plus$ zero$) (cons$ ?v0 ?v1)) (fun_app$ (fun_app$a plus$ ?v0) (fun_app$b (listsum$ plus$ zero$) ?v1))) :pattern ((cons$ ?v0 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (fun_app$b (listsum$ plus$ zero$) (append$ ?v0 ?v1)) (fun_app$ (fun_app$a plus$ (fun_app$b (listsum$ plus$ zero$) ?v0)) (fun_app$b (listsum$ plus$ zero$) ?v1)))) :named a15))
(assert (! (forall ((?v0 A_list$)) (! (= (fold$ plus$ ?v0) (fun_app$a plus$ (fun_app$b (listsum$ plus$ zero$) (rev$ ?v0)))) :pattern ((fold$ plus$ ?v0)))) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a17))
(check-sat)
;(get-unsat-core)
