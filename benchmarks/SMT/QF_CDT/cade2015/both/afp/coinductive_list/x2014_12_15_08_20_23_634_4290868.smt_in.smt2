; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 719
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun zs$ () A_llist$)
(declare-fun min$ (Enat$ Enat$) Enat$)
(declare-fun xs$a () A_llist$)
(declare-fun plus$ (Enat$ Enat$) Enat$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun ltake$ (Enat$ A_llist$) A_llist$)
(declare-fun minus$ (Enat$ Enat$) Enat$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(assert (! (not (= (lappend$ (lappend$ (ltake$ (llength$ ys$) xs$) (ldrop$ (llength$ ys$) xs$)) xs$a) (lappend$ ys$ zs$))) :named a0))
(assert (! (= (lappend$ xs$ xs$a) (lappend$ ys$ zs$)) :named a1))
(assert (! (=> (forall ((?v0 A_llist$)) (=> (= (lappend$ xs$ ?v0) (lappend$ ys$ zs$)) false)) false) :named a2))
(assert (! (not (or (lprefix$ xs$ ys$) (lprefix$ ys$ xs$))) :named a3))
(assert (! (lprefix$ xs$ (lappend$ ys$ zs$)) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a5))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$)) (= (lappend$ (ltake$ ?v0 ?v1) (ldrop$ ?v0 ?v1)) ?v1)) :named a6))
(assert (! (not (lprefix$ xs$ ys$)) :named a7))
(assert (! (not (lprefix$ ys$ xs$)) :named a8))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$)) (=> (less_eq$ ?v0 (llength$ ?v1)) (= (ltake$ ?v0 (lappend$ ?v1 ?v2)) (ltake$ ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_llist$)) (= (ltake$ (plus$ ?v0 ?v1) ?v2) (lappend$ (ltake$ ?v0 ?v2) (ltake$ ?v1 (ldrop$ ?v0 ?v2))))) :named a10))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$)) (= (ltake$ ?v0 (lappend$ ?v1 ?v2)) (lappend$ (ltake$ ?v0 ?v1) (ltake$ (minus$ ?v0 (llength$ ?v1)) ?v2)))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (llength$ (lappend$ ?v0 ?v1)) (plus$ (llength$ ?v0) (llength$ ?v1)))) :named a12))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$)) (= (llength$ (ltake$ ?v0 ?v1)) (min$ ?v0 (llength$ ?v1)))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 Enat$)) (! (=> (less_eq$ (llength$ ?v0) ?v1) (= (ltake$ ?v1 ?v0) ?v0)) :pattern ((ltake$ ?v1 ?v0)))) :named a14))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_llist$)) (= (ltake$ ?v0 (ldrop$ ?v1 ?v2)) (ldrop$ ?v1 (ltake$ (plus$ ?v0 ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 A_llist$)) (= (ldrop$ ?v0 (ltake$ ?v1 ?v2)) (ltake$ (minus$ ?v1 ?v0) (ldrop$ ?v0 ?v2)))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (= (llength$ ?v0) (llength$ ?v1)) (= (= (lappend$ ?v0 ?v2) (lappend$ ?v1 ?v3)) (and (= ?v0 ?v1) (=> (lfinite$ ?v0) (= ?v2 ?v3)))))) :named a17))
(check-sat)
;(get-unsat-core)
