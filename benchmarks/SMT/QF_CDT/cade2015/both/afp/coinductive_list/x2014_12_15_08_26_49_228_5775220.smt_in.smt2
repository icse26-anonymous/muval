; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 626
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_a_a_prod_fun$ 0)
(declare-sort A_a_prod_a_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_a_a_a_prod_prod_fun$ 0)
(declare-sort A_a_a_prod_a_prod_fun$ 0)
(declare-sort A_a_a_prod_prod_a_fun$ 0)
(declare-sort A_a_prod_a_a_prod_fun$ 0)
(declare-sort A_a_prod_a_prod_a_fun$ 0)
(declare-sort A_a_prod_a_a_prod_prod_a_fun$ 0)
(declare-sort A_a_prod_a_prod_a_a_prod_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0)
(declare-sort A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$ 0)
(declare-sort A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$ 0)
(declare-sort A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_a_prod$ (pair$ (fst$ A$) (snd$ A$)))
  (A_a_prod_a_a_prod_prod$ (pair$a (fst$a A_a_prod$) (snd$a A_a_prod$)))))
(declare-codatatypes () ((A_a_prod_a_a_prod_prod_llist$ (lNil$a) (lCons$a (lhd$a A_a_prod_a_a_prod_prod$) (ltl$a A_a_prod_a_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_prod$ (pair$b (fst$b A_a_prod$) (snd$b A$)))))
(declare-codatatypes () ((A_a_prod_a_prod_llist$ (lNil$b) (lCons$b (lhd$b A_a_prod_a_prod$) (ltl$b A_a_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod$ (pair$c (fst$c A$) (snd$c A_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_prod_llist$ (lNil$c) (lCons$c (lhd$c A_a_a_prod_prod$) (ltl$c A_a_a_prod_prod_llist$)))
  (A_a_prod_llist$ (lNil$d) (lCons$d (lhd$d A_a_prod$) (ltl$d A_a_prod_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))
  (A_a_a_prod_a_prod_prod$ (pair$d (fst$d A$) (snd$d A_a_prod_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_a_prod_prod_llist$ (lNil$e) (lCons$e (lhd$e A_a_a_prod_a_prod_prod$) (ltl$e A_a_a_prod_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_a_a_prod_prod_prod$ (pair$e (fst$e A$) (snd$e A_a_a_prod_prod$)))))
(declare-codatatypes () ((A_a_a_a_prod_prod_prod_llist$ (lNil$f) (lCons$f (lhd$f A_a_a_a_prod_prod_prod$) (ltl$f A_a_a_a_prod_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_prod_a_prod$ (pair$f (fst$f A_a_prod_a_prod$) (snd$f A$)))))
(declare-codatatypes () ((A_a_prod_a_prod_a_prod_llist$ (lNil$g) (lCons$g (lhd$g A_a_prod_a_prod_a_prod$) (ltl$g A_a_prod_a_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod_a_prod$ (pair$g (fst$g A_a_a_prod_prod$) (snd$g A$)))))
(declare-codatatypes () ((A_a_a_prod_prod_a_prod_llist$ (lNil$h) (lCons$h (lhd$h A_a_a_prod_prod_a_prod$) (ltl$h A_a_a_prod_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_a_a_prod_prod_prod$ (pair$h (fst$h A$) (snd$h A_a_prod_a_a_prod_prod$)))))
(declare-codatatypes () ((A_a_a_prod_a_a_prod_prod_prod_llist$ (lNil$i) (lCons$i (lhd$i A_a_a_prod_a_a_prod_prod_prod$) (ltl$i A_a_a_prod_a_a_prod_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_a_prod_a_prod_prod$ (pair$i (fst$i A_a_prod$) (snd$i A_a_prod_a_prod$)))))
(declare-codatatypes () ((A_a_prod_a_a_prod_a_prod_prod_llist$ (lNil$j) (lCons$j (lhd$j A_a_prod_a_a_prod_a_prod_prod$) (ltl$j A_a_prod_a_a_prod_a_prod_prod_llist$)))))
(declare-fun i$ () Nat$)
(declare-fun j$ () Nat$)
(declare-fun ia$ () Nat$)
(declare-fun ja$ () Nat$)
(declare-fun xs$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lmap$ (A_a_fun$ A_llist$) A_llist$)
(declare-fun lzip$ (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun ldrop$ (Enat$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun lmap$a (A_a_prod_a_fun$ A_a_prod_llist$) A_llist$)
(declare-fun lmap$b (A_a_a_prod_fun$ A_llist$) A_a_prod_llist$)
(declare-fun lmap$c (A_a_prod_a_a_prod_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun lmap$d (A_a_prod_a_prod_a_fun$ A_a_prod_a_prod_llist$) A_llist$)
(declare-fun lmap$e (A_a_a_prod_prod_a_fun$ A_a_a_prod_prod_llist$) A_llist$)
(declare-fun lmap$f (A_a_a_prod_a_prod_fun$ A_llist$) A_a_prod_a_prod_llist$)
(declare-fun lmap$g (A_a_a_a_prod_prod_fun$ A_llist$) A_a_a_prod_prod_llist$)
(declare-fun lmap$h (A_a_prod_a_a_prod_prod_a_fun$ A_a_prod_a_a_prod_prod_llist$) A_llist$)
(declare-fun lmap$i (A_a_prod_a_prod_a_a_prod_fun$ A_a_prod_a_prod_llist$) A_a_prod_llist$)
(declare-fun lzip$a (A_llist$ A_a_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun lzip$b (A_a_prod_llist$ A_llist$) A_a_prod_a_prod_llist$)
(declare-fun lzip$c (A_a_prod_llist$ A_a_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lzip$d (A_llist$ A_a_prod_a_prod_llist$) A_a_a_prod_a_prod_prod_llist$)
(declare-fun lzip$e (A_llist$ A_a_a_prod_prod_llist$) A_a_a_a_prod_prod_prod_llist$)
(declare-fun lzip$f (A_a_prod_a_prod_llist$ A_llist$) A_a_prod_a_prod_a_prod_llist$)
(declare-fun lzip$g (A_a_a_prod_prod_llist$ A_llist$) A_a_a_prod_prod_a_prod_llist$)
(declare-fun lzip$h (A_llist$ A_a_prod_a_a_prod_prod_llist$) A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lzip$i (A_a_prod_llist$ A_a_prod_a_prod_llist$) A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun ldrop$a (Enat$ A_llist$) A_llist$)
(declare-fun ldropn$ (Nat$) A_llist_a_llist_fun$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun ldropn$a (Nat$) A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$)
(declare-fun ldropn$b (Nat$) A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$)
(declare-fun ldropn$c (Nat$) A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$)
(declare-fun ldropn$d (Nat$) A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun ldropn$e (Nat$ A_a_a_prod_a_prod_prod_llist$) A_a_a_prod_a_prod_prod_llist$)
(declare-fun ldropn$f (Nat$ A_a_a_a_prod_prod_prod_llist$) A_a_a_a_prod_prod_prod_llist$)
(declare-fun ldropn$g (Nat$ A_a_prod_a_prod_a_prod_llist$) A_a_prod_a_prod_a_prod_llist$)
(declare-fun ldropn$h (Nat$ A_a_a_prod_prod_a_prod_llist$) A_a_a_prod_prod_a_prod_llist$)
(declare-fun ldropn$i (Nat$ A_a_a_prod_a_a_prod_prod_prod_llist$) A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun ldropn$j (Nat$ A_a_prod_a_a_prod_a_prod_prod_llist$) A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun less_eq$ (Nat$ Nat$) Bool)
(declare-fun lfinite$ (A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lprefix$ (A_a_prod_llist$ A_a_prod_llist$) Bool)
(declare-fun fun_app$a (A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun fun_app$b (A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$ A_a_prod_a_prod_llist$) A_a_prod_a_prod_llist$)
(declare-fun fun_app$c (A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun fun_app$d (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun lfinite$a (A_a_prod_a_prod_llist$) Bool)
(declare-fun lfinite$b (A_a_a_prod_prod_llist$) Bool)
(declare-fun lfinite$c (A_a_prod_llist$) Bool)
(declare-fun lfinite$d (A_llist$) Bool)
(declare-fun lprefix$a (A_llist$ A_llist$) Bool)
(declare-fun ldistinct$ (A_llist$) Bool)
(declare-fun ldistinct$a (A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun ldistinct$b (A_a_prod_a_prod_llist$) Bool)
(declare-fun ldistinct$c (A_a_a_prod_prod_llist$) Bool)
(declare-fun ldistinct$d (A_a_prod_llist$) Bool)
(assert (! (not (ldistinct$ (fun_app$ (ldropn$ ia$) xs$))) :named a0))
(assert (! (not (= i$ j$)) :named a1))
(assert (! (ldistinct$ xs$) :named a2))
(assert (! (not (= ia$ ja$)) :named a3))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$) (?v1 Nat$)) (=> (ldistinct$a ?v0) (ldistinct$a (fun_app$a (ldropn$a ?v1) ?v0)))) :named a4))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 Nat$)) (=> (ldistinct$b ?v0) (ldistinct$b (fun_app$b (ldropn$b ?v1) ?v0)))) :named a5))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 Nat$)) (=> (ldistinct$c ?v0) (ldistinct$c (fun_app$c (ldropn$c ?v1) ?v0)))) :named a6))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 Nat$)) (=> (ldistinct$d ?v0) (ldistinct$d (fun_app$d (ldropn$d ?v1) ?v0)))) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (ldistinct$ ?v0) (ldistinct$ (fun_app$ (ldropn$ ?v1) ?v0)))) :named a8))
(assert (! (less_eq$ ia$ ja$) :named a9))
(assert (! (less$ (enat$ ia$) (llength$ xs$)) :named a10))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (! (= (fun_app$a (ldropn$a zero$) ?v0) ?v0) :pattern ((fun_app$a (ldropn$a zero$) ?v0)))) :named a11))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (! (= (fun_app$b (ldropn$b zero$) ?v0) ?v0) :pattern ((fun_app$b (ldropn$b zero$) ?v0)))) :named a12))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (! (= (fun_app$c (ldropn$c zero$) ?v0) ?v0) :pattern ((fun_app$c (ldropn$c zero$) ?v0)))) :named a13))
(assert (! (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$d (ldropn$d zero$) ?v0) ?v0) :pattern ((fun_app$d (ldropn$d zero$) ?v0)))) :named a14))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (ldropn$ zero$) ?v0) ?v0) :pattern ((fun_app$ (ldropn$ zero$) ?v0)))) :named a15))
(assert (! (= (ldistinct$d lNil$d) true) :named a16))
(assert (! (= (ldistinct$ lNil$) true) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_a_prod_a_a_prod_prod_llist$)) (= (fun_app$a (ldropn$a ?v0) (fun_app$a (ldropn$a ?v1) ?v2)) (fun_app$a (ldropn$a (plus$ ?v0 ?v1)) ?v2))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_a_prod_a_prod_llist$)) (= (fun_app$b (ldropn$b ?v0) (fun_app$b (ldropn$b ?v1) ?v2)) (fun_app$b (ldropn$b (plus$ ?v0 ?v1)) ?v2))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_a_a_prod_prod_llist$)) (= (fun_app$c (ldropn$c ?v0) (fun_app$c (ldropn$c ?v1) ?v2)) (fun_app$c (ldropn$c (plus$ ?v0 ?v1)) ?v2))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_a_prod_llist$)) (= (fun_app$d (ldropn$d ?v0) (fun_app$d (ldropn$d ?v1) ?v2)) (fun_app$d (ldropn$d (plus$ ?v0 ?v1)) ?v2))) :named a21))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_llist$)) (= (fun_app$ (ldropn$ ?v0) (fun_app$ (ldropn$ ?v1) ?v2)) (fun_app$ (ldropn$ (plus$ ?v0 ?v1)) ?v2))) :named a22))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a (ldropn$a ?v0) lNil$a) lNil$a) :pattern ((ldropn$a ?v0)))) :named a23))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$b (ldropn$b ?v0) lNil$b) lNil$b) :pattern ((ldropn$b ?v0)))) :named a24))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$c (ldropn$c ?v0) lNil$c) lNil$c) :pattern ((ldropn$c ?v0)))) :named a25))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$d (ldropn$d ?v0) lNil$d) lNil$d) :pattern ((ldropn$d ?v0)))) :named a26))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (ldropn$ ?v0) lNil$) lNil$) :pattern ((ldropn$ ?v0)))) :named a27))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$d (ldropn$d ?v0) (lzip$ ?v1 ?v2)) (lzip$ (fun_app$ (ldropn$ ?v0) ?v1) (fun_app$ (ldropn$ ?v0) ?v2)))) :named a28))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_a_prod_llist$)) (= (fun_app$c (ldropn$c ?v0) (lzip$a ?v1 ?v2)) (lzip$a (fun_app$ (ldropn$ ?v0) ?v1) (fun_app$d (ldropn$d ?v0) ?v2)))) :named a29))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_llist$) (?v2 A_llist$)) (= (fun_app$b (ldropn$b ?v0) (lzip$b ?v1 ?v2)) (lzip$b (fun_app$d (ldropn$d ?v0) ?v1) (fun_app$ (ldropn$ ?v0) ?v2)))) :named a30))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (= (fun_app$a (ldropn$a ?v0) (lzip$c ?v1 ?v2)) (lzip$c (fun_app$d (ldropn$d ?v0) ?v1) (fun_app$d (ldropn$d ?v0) ?v2)))) :named a31))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_a_prod_a_prod_llist$)) (= (ldropn$e ?v0 (lzip$d ?v1 ?v2)) (lzip$d (fun_app$ (ldropn$ ?v0) ?v1) (fun_app$b (ldropn$b ?v0) ?v2)))) :named a32))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_a_a_prod_prod_llist$)) (= (ldropn$f ?v0 (lzip$e ?v1 ?v2)) (lzip$e (fun_app$ (ldropn$ ?v0) ?v1) (fun_app$c (ldropn$c ?v0) ?v2)))) :named a33))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_a_prod_llist$) (?v2 A_llist$)) (= (ldropn$g ?v0 (lzip$f ?v1 ?v2)) (lzip$f (fun_app$b (ldropn$b ?v0) ?v1) (fun_app$ (ldropn$ ?v0) ?v2)))) :named a34))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_a_prod_prod_llist$) (?v2 A_llist$)) (= (ldropn$h ?v0 (lzip$g ?v1 ?v2)) (lzip$g (fun_app$c (ldropn$c ?v0) ?v1) (fun_app$ (ldropn$ ?v0) ?v2)))) :named a35))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_a_prod_a_a_prod_prod_llist$)) (= (ldropn$i ?v0 (lzip$h ?v1 ?v2)) (lzip$h (fun_app$ (ldropn$ ?v0) ?v1) (fun_app$a (ldropn$a ?v0) ?v2)))) :named a36))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_a_prod_llist$)) (= (ldropn$j ?v0 (lzip$i ?v1 ?v2)) (lzip$i (fun_app$d (ldropn$d ?v0) ?v1) (fun_app$b (ldropn$b ?v0) ?v2)))) :named a37))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (= (lfinite$ (fun_app$a (ldropn$a ?v0) ?v1)) (lfinite$ ?v1))) :named a38))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_a_prod_llist$)) (= (lfinite$a (fun_app$b (ldropn$b ?v0) ?v1)) (lfinite$a ?v1))) :named a39))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_a_prod_prod_llist$)) (= (lfinite$b (fun_app$c (ldropn$c ?v0) ?v1)) (lfinite$b ?v1))) :named a40))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_llist$)) (= (lfinite$c (fun_app$d (ldropn$d ?v0) ?v1)) (lfinite$c ?v1))) :named a41))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (= (lfinite$d (fun_app$ (ldropn$ ?v0) ?v1)) (lfinite$d ?v1))) :named a42))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (fun_app$ (ldropn$ ?v0) (lmap$ ?v1 ?v2)) (lmap$ ?v1 (fun_app$ (ldropn$ ?v0) ?v2)))) :named a43))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_a_fun$) (?v2 A_a_prod_llist$)) (= (fun_app$ (ldropn$ ?v0) (lmap$a ?v1 ?v2)) (lmap$a ?v1 (fun_app$d (ldropn$d ?v0) ?v2)))) :named a44))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_a_prod_fun$) (?v2 A_llist$)) (= (fun_app$d (ldropn$d ?v0) (lmap$b ?v1 ?v2)) (lmap$b ?v1 (fun_app$ (ldropn$ ?v0) ?v2)))) :named a45))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_a_a_prod_fun$) (?v2 A_a_prod_llist$)) (= (fun_app$d (ldropn$d ?v0) (lmap$c ?v1 ?v2)) (lmap$c ?v1 (fun_app$d (ldropn$d ?v0) ?v2)))) :named a46))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_a_prod_a_fun$) (?v2 A_a_prod_a_prod_llist$)) (= (fun_app$ (ldropn$ ?v0) (lmap$d ?v1 ?v2)) (lmap$d ?v1 (fun_app$b (ldropn$b ?v0) ?v2)))) :named a47))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_a_prod_prod_a_fun$) (?v2 A_a_a_prod_prod_llist$)) (= (fun_app$ (ldropn$ ?v0) (lmap$e ?v1 ?v2)) (lmap$e ?v1 (fun_app$c (ldropn$c ?v0) ?v2)))) :named a48))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_a_prod_a_prod_fun$) (?v2 A_llist$)) (= (fun_app$b (ldropn$b ?v0) (lmap$f ?v1 ?v2)) (lmap$f ?v1 (fun_app$ (ldropn$ ?v0) ?v2)))) :named a49))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_a_a_prod_prod_fun$) (?v2 A_llist$)) (= (fun_app$c (ldropn$c ?v0) (lmap$g ?v1 ?v2)) (lmap$g ?v1 (fun_app$ (ldropn$ ?v0) ?v2)))) :named a50))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_a_a_prod_prod_a_fun$) (?v2 A_a_prod_a_a_prod_prod_llist$)) (= (fun_app$ (ldropn$ ?v0) (lmap$h ?v1 ?v2)) (lmap$h ?v1 (fun_app$a (ldropn$a ?v0) ?v2)))) :named a51))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_a_prod_a_a_prod_fun$) (?v2 A_a_prod_a_prod_llist$)) (= (fun_app$d (ldropn$d ?v0) (lmap$i ?v1 ?v2)) (lmap$i ?v1 (fun_app$b (ldropn$b ?v0) ?v2)))) :named a52))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 Enat$)) (=> (ldistinct$d ?v0) (ldistinct$d (ldrop$ ?v1 ?v0)))) :named a53))
(assert (! (forall ((?v0 A_llist$) (?v1 Enat$)) (=> (ldistinct$ ?v0) (ldistinct$ (ldrop$a ?v1 ?v0)))) :named a54))
(assert (! (ldistinct$d lNil$d) :named a55))
(assert (! (ldistinct$ lNil$) :named a56))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (ldistinct$d ?v0) (lprefix$ ?v1 ?v0)) (ldistinct$d ?v1))) :named a57))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (ldistinct$ ?v0) (lprefix$a ?v1 ?v0)) (ldistinct$ ?v1))) :named a58))
(assert (! (less$ (enat$ ja$) (llength$ xs$)) :named a59))
(check-sat)
;(get-unsat-core)
