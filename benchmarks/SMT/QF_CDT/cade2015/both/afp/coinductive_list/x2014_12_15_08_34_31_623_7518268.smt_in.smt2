; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 530
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_nat_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort A_nat_a_fun_fun$ 0)
(declare-sort A_a_nat_prod_fun$ 0)
(declare-sort A_nat_prod_a_fun$ 0)
(declare-sort A_nat_bool_fun_fun$ 0)
(declare-sort A_nat_prod_nat_fun$ 0)
(declare-sort Nat_a_nat_prod_fun$ 0)
(declare-sort A_nat_prod_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Nat_nat_prod_nat_fun$ 0)
(declare-sort Nat_nat_prod_bool_fun$ 0)
(declare-sort A_nat_prod_a_nat_prod_fun$ 0)
(declare-sort A_nat_prod_nat_bool_fun_fun$ 0)
(declare-sort A_nat_prod_nat_prod_bool_fun$ 0)
(declare-sort A_nat_prod_nat_a_nat_prod_fun_fun$ 0)
(declare-sort A_nat_prod_nat_prod_a_nat_prod_fun$ 0)
(declare-sort A_nat_prod_bool_fun_a_nat_prod_bool_fun_fun$ 0)
(declare-sort A_nat_prod_nat_prod_bool_fun_a_nat_prod_nat_prod_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))
  (A_nat_prod$ (pair$ (fst$ A$) (snd$ Nat$)))))
(declare-codatatypes () ((A_nat_prod_llist$ (lNil$a) (lCons$a (lhd$a A_nat_prod$) (ltl$a A_nat_prod_llist$)))
  (Nat_llist$ (lNil$b) (lCons$b (lhd$b Nat$) (ltl$b Nat_llist$)))))
(declare-datatypes () ((A_nat_prod_nat_prod$ (pair$a (fst$a A_nat_prod$) (snd$a Nat$)))))
(declare-codatatypes () ((A_nat_prod_nat_prod_llist$ (lNil$c) (lCons$c (lhd$c A_nat_prod_nat_prod$) (ltl$c A_nat_prod_nat_prod_llist$)))))
(declare-datatypes () ((Nat_nat_prod$ (pair$b (fst$b Nat$) (snd$b Nat$)))))
(declare-codatatypes () ((Nat_nat_prod_llist$ (lNil$d) (lCons$d (lhd$d Nat_nat_prod$) (ltl$d Nat_nat_prod_llist$)))))
(declare-fun p$ (A$) Bool)
(declare-fun uu$ () Nat_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun uua$ () A_nat_prod_a_fun$)
(declare-fun uub$ () A_nat_bool_fun_fun$)
(declare-fun uuc$ () A_nat_prod_a_nat_prod_fun$)
(declare-fun uud$ () A_a_fun$)
(declare-fun uue$ () Nat_nat_fun$)
(declare-fun uuf$ () A_nat_prod_nat_prod_bool_fun$)
(declare-fun uug$ () A_nat_prod_bool_fun$)
(declare-fun uuh$ (A_nat_prod_nat_prod_bool_fun$) A_nat_prod_nat_prod_bool_fun_a_nat_prod_nat_prod_bool_fun_fun$)
(declare-fun uui$ (A_nat_prod_bool_fun$) A_nat_prod_bool_fun_a_nat_prod_bool_fun_fun$)
(declare-fun uuj$ () Nat_nat_prod_nat_fun$)
(declare-fun uuk$ (Nat_set$) Nat_nat_bool_fun_fun$)
(declare-fun uul$ () A_nat_prod_nat_prod_a_nat_prod_fun$)
(declare-fun uum$ (Nat_set$) A_nat_prod_nat_bool_fun_fun$)
(declare-fun uun$ (Nat_set$) A_nat_bool_fun_fun$)
(declare-fun uuo$ (Bool A_nat_prod_nat_bool_fun_fun$) A_nat_prod_nat_bool_fun_fun$)
(declare-fun uup$ (Bool A_nat_bool_fun_fun$) A_nat_bool_fun_fun$)
(declare-fun uuq$ () A_nat_prod_nat_a_nat_prod_fun_fun$)
(declare-fun uur$ () A_nat_a_fun_fun$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lmap$ (A_nat_prod_a_fun$ A_nat_prod_llist$) A_llist$)
(declare-fun lnth$ (A_llist$) Nat_a_fun$)
(declare-fun lzip$ (A_llist$ Nat_llist$) A_nat_prod_llist$)
(declare-fun zero$ () Nat$)
(declare-fun lmap$a (A_nat_prod_a_nat_prod_fun$ A_nat_prod_llist$) A_nat_prod_llist$)
(declare-fun lmap$b (A_a_fun$ A_llist$) A_llist$)
(declare-fun lmap$c (Nat_nat_fun$ Nat_llist$) Nat_llist$)
(declare-fun lmap$d (Nat_a_fun$ Nat_llist$) A_llist$)
(declare-fun lmap$e (Nat_a_nat_prod_fun$ Nat_llist$) A_nat_prod_llist$)
(declare-fun lmap$f (A_nat_fun$ A_llist$) Nat_llist$)
(declare-fun lmap$g (A_nat_prod_nat_fun$ A_nat_prod_llist$) Nat_llist$)
(declare-fun lmap$h (A_nat_prod_nat_prod_a_nat_prod_fun$ A_nat_prod_nat_prod_llist$) A_nat_prod_llist$)
(declare-fun lmap$i (A_a_nat_prod_fun$ A_llist$) A_nat_prod_llist$)
(declare-fun lmap$j (Nat_nat_prod_nat_fun$ Nat_nat_prod_llist$) Nat_llist$)
(declare-fun lnth$a (Nat_llist$) Nat_nat_fun$)
(declare-fun lnth$b (A_nat_prod_llist$) Nat_a_nat_prod_fun$)
(declare-fun lnth$c (A_nat_prod_nat_prod_llist$ Nat$) A_nat_prod_nat_prod$)
(declare-fun lzip$a (Nat_llist$ Nat_llist$) Nat_nat_prod_llist$)
(declare-fun lzip$b (A_nat_prod_llist$ Nat_llist$) A_nat_prod_nat_prod_llist$)
(declare-fun member$ (Nat$ Nat_set$) Bool)
(declare-fun collect$ (Nat_bool_fun$) Nat_set$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun lfilter$ (A_nat_prod_bool_fun$ A_nat_prod_llist$) A_nat_prod_llist$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (Nat_a_fun$ Nat$) A$)
(declare-fun fun_app$b (A_nat_prod_nat_prod_a_nat_prod_fun$ A_nat_prod_nat_prod$) A_nat_prod$)
(declare-fun fun_app$c (Nat_nat_prod_nat_fun$ Nat_nat_prod$) Nat$)
(declare-fun fun_app$d (A_nat_prod_a_fun$ A_nat_prod$) A$)
(declare-fun fun_app$e (A_nat_bool_fun_fun$ A$) Nat_bool_fun$)
(declare-fun fun_app$f (A_nat_prod_nat_prod_bool_fun$ A_nat_prod_nat_prod$) Bool)
(declare-fun fun_app$g (A_nat_prod_nat_prod_bool_fun_a_nat_prod_nat_prod_bool_fun_fun$ A_nat_prod_nat_prod_bool_fun$) A_nat_prod_nat_prod_bool_fun$)
(declare-fun fun_app$h (A_nat_prod_bool_fun$ A_nat_prod$) Bool)
(declare-fun fun_app$i (A_nat_prod_bool_fun_a_nat_prod_bool_fun_fun$ A_nat_prod_bool_fun$) A_nat_prod_bool_fun$)
(declare-fun fun_app$j (A_nat_prod_nat_bool_fun_fun$ A_nat_prod$) Nat_bool_fun$)
(declare-fun fun_app$k (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$l (Nat_a_nat_prod_fun$ Nat$) A_nat_prod$)
(declare-fun fun_app$m (A_nat_prod_nat_a_nat_prod_fun_fun$ A_nat_prod$) Nat_a_nat_prod_fun$)
(declare-fun fun_app$n (A_nat_a_fun_fun$ A$) Nat_a_fun$)
(declare-fun fun_app$o (A_nat_prod_a_nat_prod_fun$ A_nat_prod$) A_nat_prod$)
(declare-fun fun_app$p (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$q (A_a_fun$ A$) A$)
(declare-fun fun_app$r (A_nat_fun$ A$) Nat$)
(declare-fun fun_app$s (A_nat_prod_nat_fun$ A_nat_prod$) Nat$)
(declare-fun fun_app$t (A_a_nat_prod_fun$ A$) A_nat_prod$)
(declare-fun iterates$ (Nat_nat_fun$ Nat$) Nat_llist$)
(declare-fun lfilter$a (A_nat_prod_nat_prod_bool_fun$ A_nat_prod_nat_prod_llist$) A_nat_prod_nat_prod_llist$)
(declare-fun lfilter$b (Nat_nat_prod_bool_fun$ Nat_nat_prod_llist$) Nat_nat_prod_llist$)
(declare-fun llength$a (Nat_llist$) Enat$)
(declare-fun llength$b (A_nat_prod_llist$) Enat$)
(declare-fun llength$c (A_nat_prod_nat_prod_llist$) Enat$)
(declare-fun lsublist$ (A_llist$ Nat_set$) A_llist$)
(declare-fun case_prod$ (A_nat_bool_fun_fun$) A_nat_prod_bool_fun$)
(declare-fun iterates$a (A_nat_prod_a_nat_prod_fun$ A_nat_prod$) A_nat_prod_llist$)
(declare-fun iterates$b (A_a_fun$ A$) A_llist$)
(declare-fun lsublist$a (Nat_llist$ Nat_set$) Nat_llist$)
(declare-fun lsublist$b (A_nat_prod_llist$ Nat_set$) A_nat_prod_llist$)
(declare-fun lsublist$c (A_nat_prod_nat_prod_llist$ Nat_set$) A_nat_prod_nat_prod_llist$)
(declare-fun case_prod$a (Nat_nat_bool_fun_fun$) Nat_nat_prod_bool_fun$)
(declare-fun case_prod$b (A_nat_prod_nat_bool_fun_fun$) A_nat_prod_nat_prod_bool_fun$)
(declare-fun case_prod$c (A_nat_prod_nat_a_nat_prod_fun_fun$) A_nat_prod_nat_prod_a_nat_prod_fun$)
(declare-fun case_prod$d (A_nat_a_fun_fun$) A_nat_prod_a_fun$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (and (less$ (enat$ ?v0) (llength$ xs$)) (p$ (fun_app$a (lnth$ xs$) ?v0)))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_nat_prod_nat_prod$)) (! (= (fun_app$b uul$ ?v0) (fst$a ?v0)) :pattern ((fun_app$b uul$ ?v0)))) :named a1))
(assert (! (forall ((?v0 Nat_nat_prod$)) (! (= (fun_app$c uuj$ ?v0) (fst$b ?v0)) :pattern ((fun_app$c uuj$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A_nat_prod$)) (! (= (fun_app$d uua$ ?v0) (fst$ ?v0)) :pattern ((fun_app$d uua$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 Nat$)) (! (= (fun_app$ (fun_app$e uub$ ?v0) ?v1) (and (less$ (enat$ ?v1) (llength$ xs$)) (p$ (fun_app$a (lnth$ xs$) ?v1)))) :pattern ((fun_app$ (fun_app$e uub$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 A_nat_prod_nat_prod_bool_fun$) (?v1 A_nat_prod_nat_prod_bool_fun$) (?v2 A_nat_prod_nat_prod$)) (! (= (fun_app$f (fun_app$g (uuh$ ?v0) ?v1) ?v2) (and (fun_app$f ?v0 ?v2) (fun_app$f ?v1 ?v2))) :pattern ((fun_app$f (fun_app$g (uuh$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$) (?v1 A_nat_prod_bool_fun$) (?v2 A_nat_prod$)) (! (= (fun_app$h (fun_app$i (uui$ ?v0) ?v1) ?v2) (and (fun_app$h ?v0 ?v2) (fun_app$h ?v1 ?v2))) :pattern ((fun_app$h (fun_app$i (uui$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 Nat_set$) (?v1 A_nat_prod$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$j (uum$ ?v0) ?v1) ?v2) (member$ ?v2 ?v0)) :pattern ((fun_app$ (fun_app$j (uum$ ?v0) ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$k (uuk$ ?v0) ?v1) ?v2) (member$ ?v2 ?v0)) :pattern ((fun_app$ (fun_app$k (uuk$ ?v0) ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 Nat_set$) (?v1 A$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$e (uun$ ?v0) ?v1) ?v2) (member$ ?v2 ?v0)) :pattern ((fun_app$ (fun_app$e (uun$ ?v0) ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 Bool) (?v1 A_nat_prod_nat_bool_fun_fun$) (?v2 A_nat_prod$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$j (uuo$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$ (fun_app$j ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$j (uuo$ ?v0 ?v1) ?v2) ?v3)))) :named a10))
(assert (! (forall ((?v0 Bool) (?v1 A_nat_bool_fun_fun$) (?v2 A$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$e (uup$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$ (fun_app$e ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$e (uup$ ?v0 ?v1) ?v2) ?v3)))) :named a11))
(assert (! (forall ((?v0 A_nat_prod$) (?v1 Nat$)) (! (= (fun_app$l (fun_app$m uuq$ ?v0) ?v1) ?v0) :pattern ((fun_app$l (fun_app$m uuq$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 Nat$)) (! (= (fun_app$a (fun_app$n uur$ ?v0) ?v1) ?v0) :pattern ((fun_app$a (fun_app$n uur$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 A_nat_prod$)) (! (= (fun_app$o uuc$ ?v0) ?v0) :pattern ((fun_app$o uuc$ ?v0)))) :named a14))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$p uue$ ?v0) ?v0) :pattern ((fun_app$p uue$ ?v0)))) :named a15))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$q uud$ ?v0) ?v0) :pattern ((fun_app$q uud$ ?v0)))) :named a16))
(assert (! (forall ((?v0 A_nat_prod_nat_prod$)) (! (= (fun_app$f uuf$ ?v0) true) :pattern ((fun_app$f uuf$ ?v0)))) :named a17))
(assert (! (forall ((?v0 A_nat_prod$)) (! (= (fun_app$h uug$ ?v0) true) :pattern ((fun_app$h uug$ ?v0)))) :named a18))
(assert (! (not (= (lsublist$ xs$ (collect$ uu$)) (lmap$ uua$ (lfilter$ (case_prod$ uub$) (lzip$ xs$ (iterates$ suc$ zero$)))))) :named a19))
(assert (! (forall ((?v0 A_nat_prod_nat_prod_bool_fun$) (?v1 A_nat_prod_nat_prod_llist$)) (= (lfilter$a ?v0 (lfilter$a ?v0 ?v1)) (lfilter$a ?v0 ?v1))) :named a20))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$) (?v1 A_nat_prod_llist$)) (= (lfilter$ ?v0 (lfilter$ ?v0 ?v1)) (lfilter$ ?v0 ?v1))) :named a21))
(assert (! (forall ((?v0 A_nat_prod_llist$)) (= (lmap$a uuc$ ?v0) ?v0)) :named a22))
(assert (! (forall ((?v0 A_llist$)) (= (lmap$b uud$ ?v0) ?v0)) :named a23))
(assert (! (forall ((?v0 Nat_llist$)) (= (lmap$c uue$ ?v0) ?v0)) :named a24))
(assert (! (forall ((?v0 A_nat_prod_nat_prod_llist$)) (= (lfilter$a uuf$ ?v0) ?v0)) :named a25))
(assert (! (forall ((?v0 A_nat_prod_llist$)) (= (lfilter$ uug$ ?v0) ?v0)) :named a26))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_llist$)) (= (llength$ (lmap$d ?v0 ?v1)) (llength$a ?v1))) :named a27))
(assert (! (forall ((?v0 Nat_a_nat_prod_fun$) (?v1 Nat_llist$)) (= (llength$b (lmap$e ?v0 ?v1)) (llength$a ?v1))) :named a28))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A_llist$)) (= (llength$a (lmap$f ?v0 ?v1)) (llength$ ?v1))) :named a29))
(assert (! (forall ((?v0 A_nat_prod_nat_fun$) (?v1 A_nat_prod_llist$)) (= (llength$a (lmap$g ?v0 ?v1)) (llength$b ?v1))) :named a30))
(assert (! (forall ((?v0 A_nat_prod_nat_prod_a_nat_prod_fun$) (?v1 A_nat_prod_nat_prod_llist$)) (= (llength$b (lmap$h ?v0 ?v1)) (llength$c ?v1))) :named a31))
(assert (! (forall ((?v0 A_a_nat_prod_fun$) (?v1 A_llist$)) (= (llength$b (lmap$i ?v0 ?v1)) (llength$ ?v1))) :named a32))
(assert (! (forall ((?v0 A_nat_prod_a_nat_prod_fun$) (?v1 A_nat_prod_llist$)) (= (llength$b (lmap$a ?v0 ?v1)) (llength$b ?v1))) :named a33))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_llist$)) (= (llength$a (lmap$c ?v0 ?v1)) (llength$a ?v1))) :named a34))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (llength$ (lmap$b ?v0 ?v1)) (llength$ ?v1))) :named a35))
(assert (! (forall ((?v0 A_nat_prod_a_fun$) (?v1 A_nat_prod_llist$)) (= (llength$ (lmap$ ?v0 ?v1)) (llength$b ?v1))) :named a36))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_llist$) (?v2 Nat_set$)) (= (lsublist$ (lmap$d ?v0 ?v1) ?v2) (lmap$d ?v0 (lsublist$a ?v1 ?v2)))) :named a37))
(assert (! (forall ((?v0 Nat_a_nat_prod_fun$) (?v1 Nat_llist$) (?v2 Nat_set$)) (= (lsublist$b (lmap$e ?v0 ?v1) ?v2) (lmap$e ?v0 (lsublist$a ?v1 ?v2)))) :named a38))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A_llist$) (?v2 Nat_set$)) (= (lsublist$a (lmap$f ?v0 ?v1) ?v2) (lmap$f ?v0 (lsublist$ ?v1 ?v2)))) :named a39))
(assert (! (forall ((?v0 A_nat_prod_nat_fun$) (?v1 A_nat_prod_llist$) (?v2 Nat_set$)) (= (lsublist$a (lmap$g ?v0 ?v1) ?v2) (lmap$g ?v0 (lsublist$b ?v1 ?v2)))) :named a40))
(assert (! (forall ((?v0 A_nat_prod_nat_prod_a_nat_prod_fun$) (?v1 A_nat_prod_nat_prod_llist$) (?v2 Nat_set$)) (= (lsublist$b (lmap$h ?v0 ?v1) ?v2) (lmap$h ?v0 (lsublist$c ?v1 ?v2)))) :named a41))
(assert (! (forall ((?v0 A_a_nat_prod_fun$) (?v1 A_llist$) (?v2 Nat_set$)) (= (lsublist$b (lmap$i ?v0 ?v1) ?v2) (lmap$i ?v0 (lsublist$ ?v1 ?v2)))) :named a42))
(assert (! (forall ((?v0 A_nat_prod_a_nat_prod_fun$) (?v1 A_nat_prod_llist$) (?v2 Nat_set$)) (= (lsublist$b (lmap$a ?v0 ?v1) ?v2) (lmap$a ?v0 (lsublist$b ?v1 ?v2)))) :named a43))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_llist$) (?v2 Nat_set$)) (= (lsublist$a (lmap$c ?v0 ?v1) ?v2) (lmap$c ?v0 (lsublist$a ?v1 ?v2)))) :named a44))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 Nat_set$)) (= (lsublist$ (lmap$b ?v0 ?v1) ?v2) (lmap$b ?v0 (lsublist$ ?v1 ?v2)))) :named a45))
(assert (! (forall ((?v0 A_nat_prod_a_fun$) (?v1 A_nat_prod_llist$) (?v2 Nat_set$)) (= (lsublist$ (lmap$ ?v0 ?v1) ?v2) (lmap$ ?v0 (lsublist$b ?v1 ?v2)))) :named a46))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_nat_fun$)) (=> (less$ (enat$ ?v0) (llength$ ?v1)) (= (fun_app$p (lnth$a (lmap$f ?v2 ?v1)) ?v0) (fun_app$r ?v2 (fun_app$a (lnth$ ?v1) ?v0))))) :named a47))
(assert (! (forall ((?v0 Nat$) (?v1 A_nat_prod_llist$) (?v2 A_nat_prod_nat_fun$)) (=> (less$ (enat$ ?v0) (llength$b ?v1)) (= (fun_app$p (lnth$a (lmap$g ?v2 ?v1)) ?v0) (fun_app$s ?v2 (fun_app$l (lnth$b ?v1) ?v0))))) :named a48))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_llist$) (?v2 Nat_a_fun$)) (=> (less$ (enat$ ?v0) (llength$a ?v1)) (= (fun_app$a (lnth$ (lmap$d ?v2 ?v1)) ?v0) (fun_app$a ?v2 (fun_app$p (lnth$a ?v1) ?v0))))) :named a49))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_llist$) (?v2 Nat_a_nat_prod_fun$)) (=> (less$ (enat$ ?v0) (llength$a ?v1)) (= (fun_app$l (lnth$b (lmap$e ?v2 ?v1)) ?v0) (fun_app$l ?v2 (fun_app$p (lnth$a ?v1) ?v0))))) :named a50))
(assert (! (forall ((?v0 Nat$) (?v1 A_nat_prod_nat_prod_llist$) (?v2 A_nat_prod_nat_prod_a_nat_prod_fun$)) (=> (less$ (enat$ ?v0) (llength$c ?v1)) (= (fun_app$l (lnth$b (lmap$h ?v2 ?v1)) ?v0) (fun_app$b ?v2 (lnth$c ?v1 ?v0))))) :named a51))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_a_nat_prod_fun$)) (=> (less$ (enat$ ?v0) (llength$ ?v1)) (= (fun_app$l (lnth$b (lmap$i ?v2 ?v1)) ?v0) (fun_app$t ?v2 (fun_app$a (lnth$ ?v1) ?v0))))) :named a52))
(assert (! (forall ((?v0 Nat$) (?v1 A_nat_prod_llist$) (?v2 A_nat_prod_a_nat_prod_fun$)) (=> (less$ (enat$ ?v0) (llength$b ?v1)) (= (fun_app$l (lnth$b (lmap$a ?v2 ?v1)) ?v0) (fun_app$o ?v2 (fun_app$l (lnth$b ?v1) ?v0))))) :named a53))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_llist$) (?v2 Nat_nat_fun$)) (=> (less$ (enat$ ?v0) (llength$a ?v1)) (= (fun_app$p (lnth$a (lmap$c ?v2 ?v1)) ?v0) (fun_app$p ?v2 (fun_app$p (lnth$a ?v1) ?v0))))) :named a54))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_a_fun$)) (=> (less$ (enat$ ?v0) (llength$ ?v1)) (= (fun_app$a (lnth$ (lmap$b ?v2 ?v1)) ?v0) (fun_app$q ?v2 (fun_app$a (lnth$ ?v1) ?v0))))) :named a55))
(assert (! (forall ((?v0 Nat$) (?v1 A_nat_prod_llist$) (?v2 A_nat_prod_a_fun$)) (=> (less$ (enat$ ?v0) (llength$b ?v1)) (= (fun_app$a (lnth$ (lmap$ ?v2 ?v1)) ?v0) (fun_app$d ?v2 (fun_app$l (lnth$b ?v1) ?v0))))) :named a56))
(assert (! (forall ((?v0 A_nat_prod_nat_prod_bool_fun$) (?v1 A_nat_prod_nat_prod_bool_fun$) (?v2 A_nat_prod_nat_prod_llist$)) (= (lfilter$a ?v0 (lfilter$a ?v1 ?v2)) (lfilter$a (fun_app$g (uuh$ ?v0) ?v1) ?v2))) :named a57))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$) (?v1 A_nat_prod_bool_fun$) (?v2 A_nat_prod_llist$)) (= (lfilter$ ?v0 (lfilter$ ?v1 ?v2)) (lfilter$ (fun_app$i (uui$ ?v0) ?v1) ?v2))) :named a58))
(assert (! (forall ((?v0 A_nat_prod_a_nat_prod_fun$) (?v1 A_nat_prod$)) (= (lmap$a ?v0 (iterates$a ?v0 ?v1)) (iterates$a ?v0 (fun_app$o ?v0 ?v1)))) :named a59))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (lmap$b ?v0 (iterates$b ?v0 ?v1)) (iterates$b ?v0 (fun_app$q ?v0 ?v1)))) :named a60))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$)) (= (lmap$c ?v0 (iterates$ ?v0 ?v1)) (iterates$ ?v0 (fun_app$p ?v0 ?v1)))) :named a61))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_set$)) (= (lsublist$a ?v0 ?v1) (lmap$j uuj$ (lfilter$b (case_prod$a (uuk$ ?v1)) (lzip$a ?v0 (iterates$ suc$ zero$)))))) :named a62))
(assert (! (forall ((?v0 A_nat_prod_llist$) (?v1 Nat_set$)) (= (lsublist$b ?v0 ?v1) (lmap$h uul$ (lfilter$a (case_prod$b (uum$ ?v1)) (lzip$b ?v0 (iterates$ suc$ zero$)))))) :named a63))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat_set$)) (= (lsublist$ ?v0 ?v1) (lmap$ uua$ (lfilter$ (case_prod$ (uun$ ?v1)) (lzip$ ?v0 (iterates$ suc$ zero$)))))) :named a64))
(assert (! (forall ((?v0 Bool) (?v1 A_nat_prod_nat_bool_fun_fun$) (?v2 A_nat_prod_nat_prod$)) (= (fun_app$f (case_prod$b (uuo$ ?v0 ?v1)) ?v2) (and ?v0 (fun_app$f (case_prod$b ?v1) ?v2)))) :named a65))
(assert (! (forall ((?v0 Bool) (?v1 A_nat_bool_fun_fun$) (?v2 A_nat_prod$)) (= (fun_app$h (case_prod$ (uup$ ?v0 ?v1)) ?v2) (and ?v0 (fun_app$h (case_prod$ ?v1) ?v2)))) :named a66))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a67))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$p suc$ ?v0) (fun_app$p suc$ ?v1)) (= ?v0 ?v1))) :named a68))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$p suc$ ?v0) (fun_app$p suc$ ?v1)) (= ?v0 ?v1))) :named a69))
(assert (! (forall ((?v0 A_nat_prod_nat_prod$)) (= (fst$a ?v0) (fun_app$b (case_prod$c uuq$) ?v0))) :named a70))
(assert (! (forall ((?v0 A_nat_prod$)) (= (fst$ ?v0) (fun_app$d (case_prod$d uur$) ?v0))) :named a71))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (less$ ?v0 (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a72))
(check-sat)
;(get-unsat-core)
