; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 672
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun llcp$ (A_llist$) A_llist_enat_fun$)
(declare-fun lmap$ (A_a_fun$ A_llist$) A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun fun_app$a (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun infinity$ () Enat$)
(declare-fun iterates$ (A_a_fun$ A$) A_llist$)
(declare-fun ltakeWhile$ (A_bool_fun$) A_llist_a_llist_fun$)
(assert (! (not (= (= (llength$ (fun_app$ (ltakeWhile$ p$) xs$)) infinity$) (and (= (llength$ xs$) infinity$) (= (llength$ (fun_app$ (ltakeWhile$ p$) xs$)) (llength$ xs$))))) :named a0))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (= (llength$ (fun_app$ (ltakeWhile$ ?v0) ?v1)) (llength$ ?v1)) (= (fun_app$ (ltakeWhile$ ?v0) ?v1) ?v1))) :named a1))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (llength$ (iterates$ ?v0 ?v1)) infinity$)) :named a2))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (less_eq$ (llength$ (fun_app$ (ltakeWhile$ ?v0) ?v1)) (llength$ ?v1))) :named a3))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a (llcp$ ?v0) ?v0) (llength$ ?v0)) :pattern ((llcp$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_llist$)) (= (= (llength$ ?v0) infinity$) (not (lfinite$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (llength$ ?v0) infinity$)) :pattern ((llength$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$ (ltakeWhile$ ?v0) lNil$) lNil$) :pattern ((ltakeWhile$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (llength$ (lmap$ ?v0 ?v1)) (llength$ ?v1))) :named a8))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (lprefix$ (fun_app$ (ltakeWhile$ ?v0) ?v1) ?v1)) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (= (llength$ ?v0) (llength$ ?v1))) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (! (=> (forall ((?v2 A$)) (=> (member$ ?v2 (lset$ ?v0)) (fun_app$b ?v1 ?v2))) (= (fun_app$ (ltakeWhile$ ?v1) ?v0) ?v0)) :pattern ((fun_app$ (ltakeWhile$ ?v1) ?v0)))) :named a11))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a12))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a13))
(assert (! (forall ((?v0 A_llist$)) (! (= (lprefix$ lNil$ ?v0) true) :pattern ((lprefix$ lNil$ ?v0)))) :named a14))
(assert (! (= (lfinite$ lNil$) true) :named a15))
(check-sat)
;(get-unsat-core)
