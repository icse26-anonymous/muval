; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 656
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun n$ () Nat$)
(declare-fun x$ () A$)
(declare-fun uu$ () A_llist_a_llist_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun xs$a () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist$ Nat$) A$)
(declare-fun zero$ () Nat$)
(declare-fun compow$ (Nat$ A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun llength$ (A_llist$) Enat$)
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ uu$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (= (ltl$ (ldropn$ n$ xs$)) (ldropn$ (suc$ n$) xs$))) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (! (= (ldropn$ (suc$ ?v0) ?v1) (ldropn$ ?v0 (ltl$ ?v1))) :pattern ((ldropn$ (suc$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (= (ltl$ (ldropn$ ?v0 ?v1)) (ldropn$ ?v0 (ltl$ ?v1)))) :named a3))
(assert (! (= (ldropn$ n$ xs$) (lCons$ x$ xs$a)) :named a4))
(assert (! (=> (forall ((?v0 A$) (?v1 A_llist$)) (=> (= (ldropn$ n$ xs$) (lCons$ ?v0 ?v1)) false)) false) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a7))
(assert (! (= (lnth$ (ldropn$ n$ xs$) zero$) (lnth$ xs$ n$)) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 A_llist$)) (! (= (ldropn$ (suc$ ?v0) (lCons$ ?v1 ?v2)) (ldropn$ ?v0 ?v2)) :pattern ((ldropn$ (suc$ ?v0) (lCons$ ?v1 ?v2))))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (! (= (ldropn$ ?v0 ?v1) (compow$ ?v0 uu$ ?v1)) :pattern ((ldropn$ ?v0 ?v1)))) :named a12))
(assert (! (less$ (enat$ n$) (llength$ xs$)) :named a13))
(assert (! (forall ((?v0 A_llist$)) (! (= (ldropn$ zero$ ?v0) ?v0) :pattern ((ldropn$ zero$ ?v0)))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lnth$ (lCons$ ?v0 ?v1) zero$) ?v0) :pattern ((lCons$ ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 Nat$)) (! (= (lnth$ (lCons$ ?v0 ?v1) (suc$ ?v2)) (lnth$ ?v1 ?v2)) :pattern ((lnth$ (lCons$ ?v0 ?v1) (suc$ ?v2))))) :named a17))
(check-sat)
;(get-unsat-core)
