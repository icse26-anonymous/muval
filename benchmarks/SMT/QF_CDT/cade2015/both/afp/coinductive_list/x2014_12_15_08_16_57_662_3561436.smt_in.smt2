; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 532
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort Enat_a_llist_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_a_llist_a_llist_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun n$ () Enat$)
(declare-fun uu$ () A_a_llist_a_llist_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun uua$ (A_bool_fun$ A_llist$) A_a_llist_a_llist_fun_fun$)
(declare-fun uub$ (Enat$) A_a_llist_a_llist_fun_fun$)
(declare-fun uuc$ (A_llist$) Enat_a_llist_fun$)
(declare-fun uud$ () A_a_llist_a_llist_fun_fun$)
(declare-fun eSuc$ (Enat$) Enat$)
(declare-fun ldrop$ (Enat$) A_llist_a_llist_fun$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun ldropn$ (Nat$) A_llist_a_llist_fun$)
(declare-fun fun_app$ (A_a_llist_a_llist_fun_fun$ A$) A_llist_a_llist_fun$)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun fun_app$a (Enat_a_llist_fun$ Enat$) A_llist$)
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$c (A_bool_fun$ A$) Bool)
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$e (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun gen_lset$ (A_set$) A_llist_a_set_fun$)
(declare-fun case_enat$ (A_llist$ Enat_a_llist_fun$ Enat$) A_llist$)
(declare-fun ldistinct$ (A_llist$) Bool)
(declare-fun case_llist$ (A_llist$ A_a_llist_a_llist_fun_fun$) A_llist_a_llist_fun$)
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun pred_llist$ (A_bool_fun$ A_llist$) Bool)
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uu$ ?v0) (ldrop$ n$)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 Enat$)) (! (= (fun_app$a (uuc$ ?v0) ?v1) (fun_app$b (case_llist$ lNil$ (uub$ ?v1)) ?v0)) :pattern ((fun_app$a (uuc$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 Enat$) (?v1 A$)) (! (= (fun_app$ (uub$ ?v0) ?v1) (ldrop$ ?v0)) :pattern ((fun_app$ (uub$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$b (fun_app$ (uua$ ?v0 ?v1) ?v2) ?v3) (ite (fun_app$c ?v0 ?v2) (ldropWhile$ ?v0 ?v3) ?v1)) :pattern ((fun_app$b (fun_app$ (uua$ ?v0 ?v1) ?v2) ?v3)))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$ uud$ ?v0) ?v1) ?v1) :pattern ((fun_app$b (fun_app$ uud$ ?v0) ?v1)))) :named a4))
(assert (! (not (= (fun_app$b (ldrop$ (eSuc$ n$)) xs$) (fun_app$b (case_llist$ lNil$ uu$) xs$))) :named a5))
(assert (! (forall ((?v0 Enat$)) (! (= (fun_app$b (ldrop$ ?v0) lNil$) lNil$) :pattern ((ldrop$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_llist_a_llist_fun_fun$)) (! (= (fun_app$b (case_llist$ ?v0 ?v1) lNil$) ?v0) :pattern ((case_llist$ ?v0 ?v1)))) :named a7))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (eSuc$ ?v0) (eSuc$ ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= (eSuc$ ?v0) (eSuc$ ?v1)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (ldropWhile$ ?v0 ?v1) (fun_app$b (case_llist$ lNil$ (uua$ ?v0 ?v1)) ?v1))) :named a10))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$)) (= (fun_app$b (ldrop$ ?v0) ?v1) (case_enat$ ?v1 (uuc$ ?v1) ?v0))) :named a11))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$d (lmember$ ?v0) lNil$) false) :pattern ((lmember$ ?v0)))) :named a12))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$e (gen_lset$ ?v0) lNil$) ?v0) :pattern ((gen_lset$ ?v0)))) :named a13))
(assert (! (forall ((?v0 Enat$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$b (ldrop$ (eSuc$ ?v0)) (lCons$ ?v1 ?v2)) (fun_app$b (ldrop$ ?v0) ?v2))) :named a14))
(assert (! (forall ((?v0 A_bool_fun$)) (pred_llist$ ?v0 lNil$)) :named a15))
(assert (! (forall ((?v0 A_llist$)) (= (ltl$ ?v0) (fun_app$b (case_llist$ lNil$ uud$) ?v0))) :named a16))
(assert (! (ldistinct$ lNil$) :named a17))
(assert (! (forall ((?v0 A_llist$) (?v1 Enat$)) (! (=> (lnull$ ?v0) (= (fun_app$b (ldrop$ ?v1) ?v0) lNil$)) :pattern ((fun_app$b (ldrop$ ?v1) ?v0)))) :named a18))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$b (ldropn$ ?v0) lNil$) lNil$) :pattern ((ldropn$ ?v0)))) :named a19))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a20))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2)) (and (fun_app$c ?v0 ?v1) (pred_llist$ ?v0 ?v2))) :pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2))))) :named a21))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$d (lmember$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (fun_app$d (lmember$ ?v0) ?v2))) :pattern ((fun_app$d (lmember$ ?v0) (lCons$ ?v1 ?v2))))) :named a22))
(check-sat)
;(get-unsat-core)
