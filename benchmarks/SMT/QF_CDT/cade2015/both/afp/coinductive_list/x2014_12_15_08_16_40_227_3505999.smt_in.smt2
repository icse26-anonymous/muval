; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 516
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort Enat_set_enat_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-sort A_llist_set_a_llist_fun$ 0)
(declare-sort Enat_a_llist_prod_bool_fun$ 0)
(declare-sort Enat_a_llist_prod_enat_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort Enat_a_llist_a_llist_fun_fun$ 0)
(declare-sort Enat_a_llist_prod_a_llist_fun$ 0)
(declare-sort Enat_a_llist_prod_set_enat_a_llist_prod_fun$ 0)
(declare-sort Enat_a_llist_prod_enat_a_llist_prod_bool_fun_fun$ 0)
(declare-sort A_llist_set_a_llist_fun_enat_a_llist_prod_set_enat_a_llist_prod_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))
  (Enat_a_llist_prod$ (pair$ (fst$ Enat$) (snd$ A_llist$)))))
(declare-fun uu$ () Enat_enat_bool_fun_fun$)
(declare-fun sup$ () Enat_set_enat_fun$)
(declare-fun uua$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun uub$ () Enat_a_llist_prod_enat_a_llist_prod_bool_fun_fun$)
(declare-fun uuc$ () Enat_a_llist_prod_enat_fun$)
(declare-fun uud$ () Enat_a_llist_prod_a_llist_fun$)
(declare-fun lSup$ () A_llist_set_a_llist_fun$)
(declare-fun ldrop$ () Enat_a_llist_a_llist_fun_fun$)
(declare-fun ltake$ () Enat_a_llist_a_llist_fun_fun$)
(declare-fun mcont$ (Enat_a_llist_prod_set_enat_a_llist_prod_fun$ Enat_a_llist_prod_enat_a_llist_prod_bool_fun_fun$ A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ Enat_a_llist_prod_a_llist_fun$) Bool)
(declare-fun mcont$a (Enat_a_llist_prod_set_enat_a_llist_prod_fun$ Enat_a_llist_prod_enat_a_llist_prod_bool_fun_fun$ Enat_set_enat_fun$ Enat_enat_bool_fun_fun$ Enat_a_llist_prod_enat_fun$) Bool)
(declare-fun fun_app$ (Enat_a_llist_prod_a_llist_fun$ Enat_a_llist_prod$) A_llist$)
(declare-fun less_eq$ () Enat_enat_bool_fun_fun$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun the_Sup$ () Enat_set_enat_fun$)
(declare-fun fun_app$a (Enat_a_llist_prod_enat_fun$ Enat_a_llist_prod$) Enat$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$d (Enat_a_llist_prod_bool_fun$ Enat_a_llist_prod$) Bool)
(declare-fun fun_app$e (Enat_a_llist_prod_enat_a_llist_prod_bool_fun_fun$ Enat_a_llist_prod$) Enat_a_llist_prod_bool_fun$)
(declare-fun fun_app$f (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$g (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$h (A_llist_set_a_llist_fun_enat_a_llist_prod_set_enat_a_llist_prod_fun_fun$ A_llist_set_a_llist_fun$) Enat_a_llist_prod_set_enat_a_llist_prod_fun$)
(declare-fun fun_app$i (Enat_a_llist_a_llist_fun_fun$ Enat$) A_llist_a_llist_fun$)
(declare-fun monotone$ (Enat_a_llist_prod_enat_a_llist_prod_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ Enat_a_llist_prod_a_llist_fun$) Bool)
(declare-fun prod_lub$ (Enat_set_enat_fun$) A_llist_set_a_llist_fun_enat_a_llist_prod_set_enat_a_llist_prod_fun_fun$)
(declare-fun rel_prod$ (Enat_enat_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$) Enat_a_llist_prod_enat_a_llist_prod_bool_fun_fun$)
(declare-fun case_prod$ (Enat_a_llist_a_llist_fun_fun$) Enat_a_llist_prod_a_llist_fun$)
(declare-fun monotone$a (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$) Bool)
(declare-fun lstrict_prefix$ (A_llist$ A_llist$) Bool)
(declare-fun partial_function_definitions$ (A_llist_a_llist_bool_fun_fun$ A_llist_set_a_llist_fun$) Bool)
(assert (! (forall ((?v0 Enat_a_llist_prod$)) (! (= (fun_app$ uud$ ?v0) (snd$ ?v0)) :pattern ((fun_app$ uud$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Enat_a_llist_prod$)) (! (= (fun_app$a uuc$ ?v0) (fst$ ?v0)) :pattern ((fun_app$a uuc$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$c uua$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c uua$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 Enat_a_llist_prod$) (?v1 Enat_a_llist_prod$)) (! (= (fun_app$d (fun_app$e uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (fun_app$e uub$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (! (= (fun_app$f (fun_app$g uu$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$f (fun_app$g uu$ ?v0) ?v1)))) :named a4))
(assert (! (not (mcont$ (fun_app$h (prod_lub$ the_Sup$) lSup$) (rel_prod$ uu$ lprefix$) lSup$ lprefix$ (case_prod$ ldrop$))) :named a5))
(assert (! (forall ((?v0 A_llist$)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v0)) :named a6))
(assert (! (forall ((?v0 A_llist$)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v0)) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v2) ?v1)) (or (fun_app$b (fun_app$c lprefix$ ?v0) ?v2) (fun_app$b (fun_app$c lprefix$ ?v2) ?v0)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v2)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v2))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (fun_app$b (fun_app$c lprefix$ ?v1) ?v2)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v2))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (lstrict_prefix$ ?v0 ?v1) (and (fun_app$b (fun_app$c lprefix$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((lstrict_prefix$ ?v0 ?v1)))) :named a13))
(assert (! (monotone$ (rel_prod$ uu$ lprefix$) lprefix$ (case_prod$ ldrop$)) :named a14))
(assert (! (= (rel_prod$ uu$ uua$) uub$) :named a15))
(assert (! (mcont$ (fun_app$h (prod_lub$ sup$) lSup$) (rel_prod$ less_eq$ lprefix$) lSup$ lprefix$ (case_prod$ ltake$)) :named a16))
(assert (! (forall ((?v0 Enat_a_llist_prod_set_enat_a_llist_prod_fun$) (?v1 Enat_a_llist_prod_enat_a_llist_prod_bool_fun_fun$) (?v2 Enat_set_enat_fun$) (?v3 Enat_enat_bool_fun_fun$) (?v4 Enat_a_llist_prod_enat_fun$) (?v5 Enat_a_llist_prod$) (?v6 Enat_a_llist_prod$)) (=> (and (mcont$a ?v0 ?v1 ?v2 ?v3 ?v4) (fun_app$d (fun_app$e ?v1 ?v5) ?v6)) (fun_app$f (fun_app$g ?v3 (fun_app$a ?v4 ?v5)) (fun_app$a ?v4 ?v6)))) :named a17))
(assert (! (forall ((?v0 Enat_a_llist_prod_set_enat_a_llist_prod_fun$) (?v1 Enat_a_llist_prod_enat_a_llist_prod_bool_fun_fun$) (?v2 A_llist_set_a_llist_fun$) (?v3 A_llist_a_llist_bool_fun_fun$) (?v4 Enat_a_llist_prod_a_llist_fun$) (?v5 Enat_a_llist_prod$) (?v6 Enat_a_llist_prod$)) (=> (and (mcont$ ?v0 ?v1 ?v2 ?v3 ?v4) (fun_app$d (fun_app$e ?v1 ?v5) ?v6)) (fun_app$b (fun_app$c ?v3 (fun_app$ ?v4 ?v5)) (fun_app$ ?v4 ?v6)))) :named a18))
(assert (! (forall ((?v0 Enat_a_llist_prod$) (?v1 Enat_a_llist_prod$) (?v2 Enat_a_llist_a_llist_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$ (case_prod$ ?v2) ?v0) (fun_app$ (case_prod$ ?v2) ?v1)))) :named a19))
(assert (! (forall ((?v0 Enat_set_enat_fun$) (?v1 A_llist_set_a_llist_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 A_llist_a_llist_bool_fun_fun$)) (mcont$a (fun_app$h (prod_lub$ ?v0) ?v1) (rel_prod$ ?v2 ?v3) ?v0 ?v2 uuc$)) :named a20))
(assert (! (partial_function_definitions$ lprefix$ lSup$) :named a21))
(assert (! (forall ((?v0 Enat_set_enat_fun$) (?v1 A_llist_set_a_llist_fun$) (?v2 Enat_enat_bool_fun_fun$) (?v3 A_llist_a_llist_bool_fun_fun$)) (mcont$ (fun_app$h (prod_lub$ ?v0) ?v1) (rel_prod$ ?v2 ?v3) ?v1 ?v3 uud$)) :named a22))
(assert (! (forall ((?v0 Enat$)) (monotone$a lprefix$ lprefix$ (fun_app$i ldrop$ ?v0))) :named a23))
(check-sat)
;(get-unsat-core)
