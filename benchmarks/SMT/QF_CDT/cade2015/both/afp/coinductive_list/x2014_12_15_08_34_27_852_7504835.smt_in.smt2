; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 591
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort A_nat_bool_fun_fun$ 0)
(declare-sort A_nat_prod_bool_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-sort A_bool_fun_a_bool_fun_fun$ 0)
(declare-sort A_nat_prod_bool_fun_a_nat_prod_bool_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_nat_prod$ (pair$ (fst$ A$) (snd$ Nat$)))))
(declare-codatatypes () ((A_nat_prod_llist$ (lNil$a) (lCons$a (lhd$a A_nat_prod$) (ltl$a A_nat_prod_llist$)))
  (Nat_llist$ (lNil$b) (lCons$b (lhd$b Nat$) (ltl$b Nat_llist$)))))
(declare-fun a$ () Nat_set$)
(declare-fun uu$ () A_nat_bool_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun uua$ () A_bool_fun$)
(declare-fun uub$ () A_nat_prod_bool_fun$)
(declare-fun uuc$ (A_bool_fun$) A_bool_fun_a_bool_fun_fun$)
(declare-fun uud$ (A_nat_prod_bool_fun$) A_nat_prod_bool_fun_a_nat_prod_bool_fun_fun$)
(declare-fun lzip$ (A_llist$ Nat_llist$) A_nat_prod_llist$)
(declare-fun zero$ () Nat$)
(declare-fun member$ (Nat$ Nat_set$) Bool)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun lfilter$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (A_nat_bool_fun_fun$ A$) Nat_bool_fun$)
(declare-fun fun_app$b (A_nat_prod_bool_fun$ A_nat_prod$) Bool)
(declare-fun fun_app$c (A_nat_prod_bool_fun_a_nat_prod_bool_fun_fun$ A_nat_prod_bool_fun$) A_nat_prod_bool_fun$)
(declare-fun fun_app$d (A_bool_fun$ A$) Bool)
(declare-fun fun_app$e (A_bool_fun_a_bool_fun_fun$ A_bool_fun$) A_bool_fun$)
(declare-fun fun_app$f (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$g (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$h (Enat_enat_fun$ Enat$) Enat$)
(declare-fun iterates$ (Nat_nat_fun$ Nat$) Nat_llist$)
(declare-fun lfilter$a (A_nat_prod_bool_fun$ A_nat_prod_llist$) A_nat_prod_llist$)
(declare-fun llength$a (A_nat_prod_llist$) Enat$)
(declare-fun lsublist$ (A_llist$ Nat_set$) A_llist$)
(declare-fun case_prod$ (A_nat_bool_fun_fun$) A_nat_prod_bool_fun$)
(assert (! (forall ((?v0 A$) (?v1 Nat$)) (! (= (fun_app$ (fun_app$a uu$ ?v0) ?v1) (member$ ?v1 a$)) :pattern ((fun_app$ (fun_app$a uu$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$) (?v1 A_nat_prod_bool_fun$) (?v2 A_nat_prod$)) (! (= (fun_app$b (fun_app$c (uud$ ?v0) ?v1) ?v2) (and (fun_app$b ?v0 ?v2) (fun_app$b ?v1 ?v2))) :pattern ((fun_app$b (fun_app$c (uud$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$d (fun_app$e (uuc$ ?v0) ?v1) ?v2) (and (fun_app$d ?v0 ?v2) (fun_app$d ?v1 ?v2))) :pattern ((fun_app$d (fun_app$e (uuc$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_nat_prod$)) (! (= (fun_app$b uub$ ?v0) true) :pattern ((fun_app$b uub$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$d uua$ ?v0) true) :pattern ((fun_app$d uua$ ?v0)))) :named a4))
(assert (! (not (less_eq$ (llength$ (lsublist$ xs$ a$)) (llength$ xs$))) :named a5))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (less_eq$ ?v3 ?v4) (fun_app$f (fun_app$g ?v0 ?v3) ?v4))) (=> (fun_app$f (fun_app$g ?v0 ?v1) ?v2) (fun_app$f (fun_app$g ?v0 ?v2) ?v1))) (fun_app$f (fun_app$g ?v0 ?v2) ?v1))) :named a6))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (less_eq$ (llength$ (lfilter$ ?v0 ?v1)) (llength$ ?v1))) :named a7))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$) (?v1 A_nat_prod_llist$)) (less_eq$ (llength$a (lfilter$a ?v0 ?v1)) (llength$a ?v1))) :named a8))
(assert (! (forall ((?v0 Enat$)) (less_eq$ ?v0 ?v0)) :named a9))
(assert (! (less_eq$ (llength$a (lfilter$a (case_prod$ uu$) (lzip$ xs$ (iterates$ suc$ zero$)))) (llength$a (lzip$ xs$ (iterates$ suc$ zero$)))) :named a10))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lfilter$ ?v0 (lfilter$ ?v0 ?v1)) (lfilter$ ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$) (?v1 A_nat_prod_llist$)) (= (lfilter$a ?v0 (lfilter$a ?v0 ?v1)) (lfilter$a ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (= ?v0 ?v1) (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)))) :named a13))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (=> (and (=> (less_eq$ ?v0 ?v1) false) (=> (less_eq$ ?v1 ?v0) false)) false)) :named a14))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (less_eq$ ?v3 ?v4) (fun_app$f (fun_app$g ?v0 ?v3) ?v4))) (forall ((?v3 Enat$) (?v4 Enat$)) (=> (fun_app$f (fun_app$g ?v0 ?v4) ?v3) (fun_app$f (fun_app$g ?v0 ?v3) ?v4)))) (fun_app$f (fun_app$g ?v0 ?v1) ?v2))) :named a15))
(assert (! (forall ((?v0 Enat$) (?v1 Enat_enat_fun$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (and (less_eq$ ?v2 ?v3) (forall ((?v4 Enat$) (?v5 Enat$)) (=> (less_eq$ ?v4 ?v5) (less_eq$ (fun_app$h ?v1 ?v4) (fun_app$h ?v1 ?v5)))))) (less_eq$ ?v0 (fun_app$h ?v1 ?v3)))) :named a16))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (=> (and (= ?v0 ?v1) (less_eq$ ?v1 ?v2)) (less_eq$ ?v0 ?v2))) :named a17))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (=> (= ?v0 ?v1) (less_eq$ ?v0 ?v1))) :named a18))
(assert (! (forall ((?v0 A_llist$)) (= (lfilter$ uua$ ?v0) ?v0)) :named a19))
(assert (! (forall ((?v0 A_nat_prod_llist$)) (= (lfilter$a uub$ ?v0) ?v0)) :named a20))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$) (?v2 A_llist$)) (= (lfilter$ ?v0 (lfilter$ ?v1 ?v2)) (lfilter$ (fun_app$e (uuc$ ?v0) ?v1) ?v2))) :named a21))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$) (?v1 A_nat_prod_bool_fun$) (?v2 A_nat_prod_llist$)) (= (lfilter$a ?v0 (lfilter$a ?v1 ?v2)) (lfilter$a (fun_app$c (uud$ ?v0) ?v1) ?v2))) :named a22))
(assert (! (forall ((?v0 Enat$)) (less_eq$ ?v0 ?v0)) :named a23))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (or (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0))) :named a24))
(check-sat)
;(get-unsat-core)
