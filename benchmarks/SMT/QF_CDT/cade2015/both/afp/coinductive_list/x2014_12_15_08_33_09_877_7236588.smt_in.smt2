; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 667
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_llist_list$ (nil$) (cons$ (hd$ A_llist$) (tl$ A_llist_list$)))))
(declare-codatatypes () ((A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-fun m$ () Nat$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun xss$ () A_llist_list$)
(declare-fun eSuc$ (Enat$) Enat$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun size$ (A_llist_list$) Nat$)
(declare-fun xss$a () A_llist_llist$)
(declare-fun less$a (Nat$ Nat$) Bool)
(declare-fun plus$a (Enat$ Enat$) Enat$)
(declare-fun llength$ (A_llist_llist$) Enat$)
(assert (! (not (less$ (enat$ (suc$ (plus$ m$ (size$ xss$)))) (plus$a (enat$ (size$ xss$)) (eSuc$ (llength$ xss$a))))) :named a0))
(assert (! (less$ (enat$ m$) (llength$ xss$a)) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Enat$) (?v2 Enat$)) (= (less$ (plus$a (enat$ ?v0) ?v1) (plus$a (enat$ ?v0) ?v2)) (less$ ?v1 ?v2))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (plus$a (enat$ ?v0) (enat$ ?v1)) (enat$ (plus$ ?v0 ?v1))) :pattern ((plus$a (enat$ ?v0) (enat$ ?v1))))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Enat$) (?v2 Enat$)) (= (= (plus$a (enat$ ?v0) ?v1) (plus$a (enat$ ?v0) ?v2)) (= ?v1 ?v2))) :named a4))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$) (?v2 Enat$)) (= (= (plus$a ?v0 (enat$ ?v1)) (plus$a ?v2 (enat$ ?v1))) (= ?v0 ?v2))) :named a5))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (less$ (eSuc$ ?v0) (eSuc$ ?v1)) (less$ ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (plus$ ?v0 (suc$ ?v1)) (suc$ (plus$ ?v0 ?v1))) :pattern ((plus$ ?v0 (suc$ ?v1))))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (less$a (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (less$a ?v0 ?v2))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (less$a (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (less$a ?v1 ?v2))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Enat$) (?v2 Nat$)) (=> (less$ (enat$ ?v0) ?v1) (less$ (enat$ (plus$ ?v2 ?v0)) (plus$a (enat$ ?v2) ?v1)))) :named a10))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (= (= (eSuc$ ?v0) (enat$ ?v1)) (exists ((?v2 Nat$)) (and (= ?v1 (suc$ ?v2)) (= ?v0 (enat$ ?v2)))))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Enat$)) (= (= (enat$ ?v0) (eSuc$ ?v1)) (exists ((?v2 Nat$)) (and (= ?v0 (suc$ ?v2)) (= (enat$ ?v2) ?v1))))) :named a12))
(assert (! (forall ((?v0 Nat$)) (= (eSuc$ (enat$ ?v0)) (enat$ (suc$ ?v0)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v0 ?v2)) (= ?v1 ?v2))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (= (plus$ ?v0 ?v1) (plus$ ?v2 ?v1)) (= ?v0 ?v2))) :named a15))
(assert (! (forall ((?v0 Nat$)) (less$a ?v0 (suc$ ?v0))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (less$a ?v0 ?v1) (less$a (suc$ ?v0) (suc$ ?v1)))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less$a (suc$ ?v0) (suc$ ?v1)) (less$a ?v0 ?v1)) :pattern ((less$a (suc$ ?v0) (suc$ ?v1))))) :named a18))
(check-sat)
;(get-unsat-core)
