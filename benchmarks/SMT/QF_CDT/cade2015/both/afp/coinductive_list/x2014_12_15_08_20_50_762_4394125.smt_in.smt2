; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 611
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Enat_set$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort Enat_set_set$ 0)
(declare-sort Enat_enat_fun$ 0)
(declare-sort A_llist_set_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort Enat_a_llist_fun$ 0)
(declare-sort Enat_set_set_set$ 0)
(declare-sort Enat_enat_set_fun$ 0)
(declare-sort Enat_set_enat_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_set_set_set$ 0)
(declare-sort A_llist_enat_set_fun$ 0)
(declare-sort A_llist_set_enat_fun$ 0)
(declare-sort Enat_a_llist_set_fun$ 0)
(declare-sort Enat_set_a_llist_fun$ 0)
(declare-sort Enat_set_set_set_set$ 0)
(declare-sort Enat_set_enat_set_fun$ 0)
(declare-sort A_llist_set_set_set_set$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun a$ () A_llist_set$)
(declare-fun n$ () Nat$)
(declare-fun pow$ (A_llist_set_set_set$) A_llist_set_set_set_set$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun lSup$ (A_llist_set$) A_llist$)
(declare-fun pow$a (Enat_set_set_set$) Enat_set_set_set_set$)
(declare-fun pow$b (Enat_set_set$) Enat_set_set_set$)
(declare-fun pow$c (A_llist_set_set$) A_llist_set_set_set$)
(declare-fun pow$d (A_llist_set$) A_llist_set_set$)
(declare-fun pow$e (Enat_set$) Enat_set_set$)
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$) Bool)
(declare-fun image$ (A_llist_enat_fun$ A_llist_set$) Enat_set$)
(declare-fun finite$ (A_llist_set$) Bool)
(declare-fun image$a (Enat_enat_fun$) Enat_set_enat_set_fun$)
(declare-fun image$b (Enat_a_llist_fun$ Enat_set$) A_llist_set$)
(declare-fun image$c (A_llist_a_llist_fun$ A_llist_set$) A_llist_set$)
(declare-fun image$d (Enat_enat_set_fun$ Enat_set$) Enat_set_set$)
(declare-fun image$e (Enat_set_enat_fun$ Enat_set_set$) Enat_set$)
(declare-fun image$f (A_llist_enat_set_fun$ A_llist_set$) Enat_set_set$)
(declare-fun image$g (Enat_a_llist_set_fun$ Enat_set$) A_llist_set_set$)
(declare-fun image$h (Enat_set_a_llist_fun$ Enat_set_set$) A_llist_set$)
(declare-fun image$i (Enat_set_enat_set_fun$ Enat_set_set$) Enat_set_set$)
(declare-fun image$j (A_llist_set_enat_fun$ A_llist_set_set$) Enat_set$)
(declare-fun inj_on$ (A_llist_enat_fun$ A_llist_set$) Bool)
(declare-fun member$ (Enat$ Enat_set$) Bool)
(declare-fun finite$a (Enat_set$) Bool)
(declare-fun finite$b (Enat_set_set$) Bool)
(declare-fun finite$c (A_llist_set_set$) Bool)
(declare-fun finite$d (A_llist_set_set_set_set$) Bool)
(declare-fun finite$e (A_llist_set_set_set$) Bool)
(declare-fun finite$f (Enat_set_set_set_set$) Bool)
(declare-fun finite$g (Enat_set_set_set$) Bool)
(declare-fun fun_app$ (Enat_set_enat_set_fun$ Enat_set$) Enat_set$)
(declare-fun inj_on$a (Enat_enat_fun$ Enat_set$) Bool)
(declare-fun inj_on$b (Enat_a_llist_fun$ Enat_set$) Bool)
(declare-fun inj_on$c (A_llist_a_llist_fun$ A_llist_set$) Bool)
(declare-fun inj_on$d (Enat_set_enat_fun$ Enat_set_set$) Bool)
(declare-fun inj_on$e (Enat_enat_set_fun$ Enat_set$) Bool)
(declare-fun inj_on$f (Enat_set_a_llist_fun$ Enat_set_set$) Bool)
(declare-fun inj_on$g (A_llist_set_enat_fun$ A_llist_set_set$) Bool)
(declare-fun inj_on$h (A_llist_enat_set_fun$ A_llist_set$) Bool)
(declare-fun inj_on$i (Enat_set_enat_set_fun$ Enat_set_set$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llength$ () A_llist_enat_fun$)
(declare-fun lprefix$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun enumerate$ (Enat_set$ Nat$) Enat$)
(assert (! (not (finite$ a$)) :named a0))
(assert (! (inj_on$ llength$ a$) :named a1))
(assert (! (finite$a (image$ llength$ a$)) :named a2))
(assert (! (chain$ lprefix$ a$) :named a3))
(assert (! (lfinite$ (lSup$ a$)) :named a4))
(assert (! (forall ((?v0 Enat_set$) (?v1 Enat_enat_fun$)) (=> (finite$a ?v0) (finite$a (fun_app$ (image$a ?v1) ?v0)))) :named a5))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_enat_fun$)) (=> (finite$ ?v0) (finite$a (image$ ?v1 ?v0)))) :named a6))
(assert (! (forall ((?v0 Enat_set$) (?v1 Enat_a_llist_fun$)) (=> (finite$a ?v0) (finite$ (image$b ?v1 ?v0)))) :named a7))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_a_llist_fun$)) (=> (finite$ ?v0) (finite$ (image$c ?v1 ?v0)))) :named a8))
(assert (! (forall ((?v0 Enat_set$) (?v1 Enat_enat_set_fun$)) (=> (finite$a ?v0) (finite$b (image$d ?v1 ?v0)))) :named a9))
(assert (! (forall ((?v0 Enat_set_set$) (?v1 Enat_set_enat_fun$)) (=> (finite$b ?v0) (finite$a (image$e ?v1 ?v0)))) :named a10))
(assert (! (forall ((?v0 A_llist_set$) (?v1 A_llist_enat_set_fun$)) (=> (finite$ ?v0) (finite$b (image$f ?v1 ?v0)))) :named a11))
(assert (! (forall ((?v0 Enat_set$) (?v1 Enat_a_llist_set_fun$)) (=> (finite$a ?v0) (finite$c (image$g ?v1 ?v0)))) :named a12))
(assert (! (forall ((?v0 Enat_set_set$) (?v1 Enat_set_a_llist_fun$)) (=> (finite$b ?v0) (finite$ (image$h ?v1 ?v0)))) :named a13))
(assert (! (forall ((?v0 Enat_set_set$) (?v1 Enat_set_enat_set_fun$)) (=> (finite$b ?v0) (finite$b (image$i ?v1 ?v0)))) :named a14))
(assert (! (= (fun_app$a llength$ (lSup$ a$)) (enat$ n$)) :named a15))
(assert (! (=> (forall ((?v0 Nat$)) (=> (= (fun_app$a llength$ (lSup$ a$)) (enat$ ?v0)) false)) false) :named a16))
(assert (! (forall ((?v0 Enat_enat_fun$) (?v1 Enat_set$)) (=> (and (finite$a (fun_app$ (image$a ?v0) ?v1)) (inj_on$a ?v0 ?v1)) (finite$a ?v1))) :named a17))
(assert (! (forall ((?v0 Enat_a_llist_fun$) (?v1 Enat_set$)) (=> (and (finite$ (image$b ?v0 ?v1)) (inj_on$b ?v0 ?v1)) (finite$a ?v1))) :named a18))
(assert (! (forall ((?v0 A_llist_enat_fun$) (?v1 A_llist_set$)) (=> (and (finite$a (image$ ?v0 ?v1)) (inj_on$ ?v0 ?v1)) (finite$ ?v1))) :named a19))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist_set$)) (=> (and (finite$ (image$c ?v0 ?v1)) (inj_on$c ?v0 ?v1)) (finite$ ?v1))) :named a20))
(assert (! (forall ((?v0 Enat_set_enat_fun$) (?v1 Enat_set_set$)) (=> (and (finite$a (image$e ?v0 ?v1)) (inj_on$d ?v0 ?v1)) (finite$b ?v1))) :named a21))
(assert (! (forall ((?v0 Enat_enat_set_fun$) (?v1 Enat_set$)) (=> (and (finite$b (image$d ?v0 ?v1)) (inj_on$e ?v0 ?v1)) (finite$a ?v1))) :named a22))
(assert (! (forall ((?v0 Enat_set_a_llist_fun$) (?v1 Enat_set_set$)) (=> (and (finite$ (image$h ?v0 ?v1)) (inj_on$f ?v0 ?v1)) (finite$b ?v1))) :named a23))
(assert (! (forall ((?v0 A_llist_set_enat_fun$) (?v1 A_llist_set_set$)) (=> (and (finite$a (image$j ?v0 ?v1)) (inj_on$g ?v0 ?v1)) (finite$c ?v1))) :named a24))
(assert (! (forall ((?v0 A_llist_enat_set_fun$) (?v1 A_llist_set$)) (=> (and (finite$b (image$f ?v0 ?v1)) (inj_on$h ?v0 ?v1)) (finite$ ?v1))) :named a25))
(assert (! (forall ((?v0 Enat_set_enat_set_fun$) (?v1 Enat_set_set$)) (=> (and (finite$b (image$i ?v0 ?v1)) (inj_on$i ?v0 ?v1)) (finite$b ?v1))) :named a26))
(assert (! (forall ((?v0 Enat_set$) (?v1 Nat$)) (=> (not (finite$a ?v0)) (member$ (enumerate$ ?v0 ?v1) ?v0))) :named a27))
(assert (! (forall ((?v0 A_llist_set_set_set$)) (= (finite$d (pow$ ?v0)) (finite$e ?v0))) :named a28))
(assert (! (forall ((?v0 Enat_set_set_set$)) (= (finite$f (pow$a ?v0)) (finite$g ?v0))) :named a29))
(assert (! (forall ((?v0 Enat_set_set$)) (= (finite$g (pow$b ?v0)) (finite$b ?v0))) :named a30))
(assert (! (forall ((?v0 A_llist_set_set$)) (= (finite$e (pow$c ?v0)) (finite$c ?v0))) :named a31))
(assert (! (forall ((?v0 A_llist_set$)) (= (finite$c (pow$d ?v0)) (finite$ ?v0))) :named a32))
(assert (! (forall ((?v0 Enat_set$)) (= (finite$b (pow$e ?v0)) (finite$a ?v0))) :named a33))
(assert (! (forall ((?v0 A_llist$)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v0)) :named a34))
(assert (! (forall ((?v0 A_llist$)) (fun_app$b (fun_app$c lprefix$ ?v0) ?v0)) :named a35))
(assert (! (forall ((?v0 A_llist$)) (= (lfinite$ ?v0) (exists ((?v1 Nat$)) (= (fun_app$a llength$ ?v0) (enat$ ?v1))))) :named a36))
(check-sat)
;(get-unsat-core)
