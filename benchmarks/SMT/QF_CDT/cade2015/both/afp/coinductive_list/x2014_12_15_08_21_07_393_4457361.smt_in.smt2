; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 537
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-sort Enat_enat_prod_set$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-sort Enat_enat_prod_bool_fun$ 0)
(declare-sort Enat_enat_prod_enat_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))
  (Enat_enat_prod$ (pair$ (fst$ Enat$) (snd$ Enat$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun m$ () Enat$)
(declare-fun n$ () Enat$)
(declare-fun uu$ () Enat_enat_prod_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun min$ (Enat$ Enat$) Enat$)
(declare-fun uua$ (Enat_enat_prod_set$) Enat_enat_bool_fun_fun$)
(declare-fun uub$ (Enat_enat_prod_set$ Enat_enat_prod_enat_fun$ Enat_enat_prod_enat_fun$) Enat_enat_prod_bool_fun$)
(declare-fun llcp$ (A_llist$) A_llist_enat_fun$)
(declare-fun image2$ (Enat_enat_prod_set$ Enat_enat_prod_enat_fun$ Enat_enat_prod_enat_fun$) Enat_enat_prod_set$)
(declare-fun member$ (Enat_enat_prod$ Enat_enat_prod_set$) Bool)
(declare-fun collect$ (Enat_enat_prod_bool_fun$) Enat_enat_prod_set$)
(declare-fun fun_app$ (Enat_enat_prod_bool_fun$ Enat_enat_prod$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun fun_app$b (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$c (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(declare-fun fun_app$d (Enat_enat_prod_enat_fun$ Enat_enat_prod$) Enat$)
(assert (! (forall ((?v0 Enat_enat_prod$)) (! (= (fun_app$ uu$ ?v0) (exists ((?v1 A_llist$) (?v2 A_llist$)) (and (= ?v0 (pair$ (fun_app$a (llcp$ ?v1) ?v2) (min$ (llength$ ?v1) (llength$ ?v2)))) true))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Enat_enat_prod_set$) (?v1 Enat$) (?v2 Enat$)) (! (= (fun_app$b (fun_app$c (uua$ ?v0) ?v1) ?v2) (member$ (pair$ ?v1 ?v2) ?v0)) :pattern ((fun_app$b (fun_app$c (uua$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 Enat_enat_prod_set$) (?v1 Enat_enat_prod_enat_fun$) (?v2 Enat_enat_prod_enat_fun$) (?v3 Enat_enat_prod$)) (! (= (fun_app$ (uub$ ?v0 ?v1 ?v2) ?v3) (exists ((?v4 Enat_enat_prod$)) (and (= ?v3 (pair$ (fun_app$d ?v1 ?v4) (fun_app$d ?v2 ?v4))) (member$ ?v4 ?v0)))) :pattern ((fun_app$ (uub$ ?v0 ?v1 ?v2) ?v3)))) :named a2))
(assert (! (not (member$ (pair$ m$ n$) (collect$ uu$))) :named a3))
(assert (! (= m$ (fun_app$a (llcp$ xs$) ys$)) :named a4))
(assert (! (= n$ (min$ (llength$ xs$) (llength$ ys$))) :named a5))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a (llcp$ ?v0) ?v0) (llength$ ?v0)) :pattern ((llcp$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (fun_app$a (llcp$ ?v0) ?v1) (fun_app$a (llcp$ ?v1) ?v0))) :named a7))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (min$ (min$ ?v0 ?v1) ?v1) (min$ ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (min$ ?v0 (min$ ?v0 ?v1)) (min$ ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 Enat$)) (= (min$ ?v0 ?v0) ?v0)) :named a10))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a11))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 Enat_enat_prod_set$) (?v1 Enat_enat_prod_set$)) (= (= (uua$ ?v0) (uua$ ?v1)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (min$ (min$ ?v0 ?v1) ?v2) (min$ ?v0 (min$ ?v1 ?v2)))) :named a14))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (min$ ?v0 (min$ ?v1 ?v2)) (min$ ?v1 (min$ ?v0 ?v2)))) :named a15))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (min$ ?v0 ?v1) (min$ ?v1 ?v0))) :named a16))
(assert (! (forall ((?v0 Enat_enat_prod_set$) (?v1 Enat_enat_prod_enat_fun$) (?v2 Enat_enat_prod_enat_fun$)) (= (image2$ ?v0 ?v1 ?v2) (collect$ (uub$ ?v0 ?v1 ?v2)))) :named a17))
(assert (! (forall ((?v0 Enat_enat_prod$)) (=> (forall ((?v1 Enat$) (?v2 Enat$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a18))
(assert (! (forall ((?v0 Enat$) (?v1 Enat_enat_prod_enat_fun$) (?v2 Enat_enat_prod$) (?v3 Enat$) (?v4 Enat_enat_prod_enat_fun$) (?v5 Enat_enat_prod_set$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v2)) (and (= ?v3 (fun_app$d ?v4 ?v2)) (member$ ?v2 ?v5))) (member$ (pair$ ?v0 ?v3) (image2$ ?v5 ?v1 ?v4)))) :named a19))
(check-sat)
;(get-unsat-core)
