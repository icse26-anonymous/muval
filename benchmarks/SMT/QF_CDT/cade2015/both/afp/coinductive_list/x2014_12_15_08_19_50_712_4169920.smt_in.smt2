; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 621
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_b_llist_fun$ 0)
(declare-sort B_llist_a_llist_fun$ 0)
(declare-sort B_llist_b_llist_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((B_llist$ (lNil$) (lCons$ (lhd$ B$) (ltl$ B_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun f$ () A_b_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun lmap$ (A_b_fun$) A_llist_b_llist_fun$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun lmap$a (B_b_fun$) B_llist_b_llist_fun$)
(declare-fun lmap$b (B_a_fun$) B_llist_a_llist_fun$)
(declare-fun lmap$c (A_a_fun$) A_llist_a_llist_fun$)
(declare-fun lnull$ (B_llist$) Bool)
(declare-fun ltake$ (Enat$ A_llist$) A_llist$)
(declare-fun ldrop$a (Enat$ B_llist$) B_llist$)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun lnull$a (A_llist$) Bool)
(declare-fun ltake$a (Enat$ B_llist$) B_llist$)
(declare-fun transp$ (B_llist_b_llist_bool_fun_fun$) Bool)
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun ldropn$a (Nat$ B_llist$) B_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lprefix$ () B_llist_b_llist_bool_fun_fun$)
(declare-fun transp$a (A_llist_a_llist_bool_fun_fun$) Bool)
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_b_llist_fun$ A_llist$) B_llist$)
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$d (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$e (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$f (A_a_fun$ A$) A$)
(declare-fun fun_app$g (B_llist_b_llist_fun$ B_llist$) B_llist$)
(declare-fun fun_app$h (B_b_fun$ B$) B$)
(declare-fun fun_app$i (B_llist_a_llist_fun$ B_llist$) A_llist$)
(declare-fun iterates$ (A_a_fun$ A$) A_llist$)
(declare-fun lfinite$a (B_llist$) Bool)
(declare-fun llength$a (B_llist$) Enat$)
(declare-fun lprefix$a () A_llist_a_llist_bool_fun_fun$)
(declare-fun monotone$ (B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_fun$) Bool)
(declare-fun iterates$a (B_b_fun$ B$) B_llist$)
(declare-fun monotone$a (B_llist_b_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ B_llist_a_llist_fun$) Bool)
(declare-fun monotone$b (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$) Bool)
(declare-fun monotone$c (A_llist_a_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ A_llist_b_llist_fun$) Bool)
(declare-fun lstrict_prefix$ (B_llist$ B_llist$) Bool)
(declare-fun lstrict_prefix$a (A_llist$ A_llist$) Bool)
(assert (! (not (fun_app$ (fun_app$a lprefix$ (fun_app$b (lmap$ f$) xs$)) (fun_app$b (lmap$ f$) ys$))) :named a0))
(assert (! (fun_app$c (fun_app$d lprefix$a xs$) ys$) :named a1))
(assert (! (forall ((?v0 B_llist$)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v0)) :named a2))
(assert (! (forall ((?v0 A_llist$)) (fun_app$c (fun_app$d lprefix$a ?v0) ?v0)) :named a3))
(assert (! (forall ((?v0 B_llist$)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v0)) :named a4))
(assert (! (forall ((?v0 A_llist$)) (fun_app$c (fun_app$d lprefix$a ?v0) ?v0)) :named a5))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$c (fun_app$d lprefix$a ?v0) ?v1) (fun_app$c (fun_app$d lprefix$a ?v1) ?v0)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (fun_app$c (fun_app$d lprefix$a ?v0) ?v1) (fun_app$c (fun_app$d lprefix$a ?v1) ?v0)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v2) ?v1)) (or (fun_app$ (fun_app$a lprefix$ ?v0) ?v2) (fun_app$ (fun_app$a lprefix$ ?v2) ?v0)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$c (fun_app$d lprefix$a ?v0) ?v1) (fun_app$c (fun_app$d lprefix$a ?v2) ?v1)) (or (fun_app$c (fun_app$d lprefix$a ?v0) ?v2) (fun_app$c (fun_app$d lprefix$a ?v2) ?v0)))) :named a11))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v2)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v2))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$c (fun_app$d lprefix$a ?v0) ?v1) (fun_app$c (fun_app$d lprefix$a ?v1) ?v2)) (fun_app$c (fun_app$d lprefix$a ?v0) ?v2))) :named a13))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (fun_app$ (fun_app$a lprefix$ ?v1) ?v2)) (fun_app$ (fun_app$a lprefix$ ?v0) ?v2))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$c (fun_app$d lprefix$a ?v0) ?v1) (fun_app$c (fun_app$d lprefix$a ?v1) ?v2)) (fun_app$c (fun_app$d lprefix$a ?v0) ?v2))) :named a15))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (= (lstrict_prefix$ ?v0 ?v1) (and (fun_app$ (fun_app$a lprefix$ ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((lstrict_prefix$ ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (lstrict_prefix$a ?v0 ?v1) (and (fun_app$c (fun_app$d lprefix$a ?v0) ?v1) (not (= ?v0 ?v1)))) :pattern ((lstrict_prefix$a ?v0 ?v1)))) :named a17))
(assert (! (forall ((?v0 B_b_fun$)) (monotone$ lprefix$ lprefix$ (lmap$a ?v0))) :named a18))
(assert (! (forall ((?v0 B_a_fun$)) (monotone$a lprefix$ lprefix$a (lmap$b ?v0))) :named a19))
(assert (! (forall ((?v0 A_a_fun$)) (monotone$b lprefix$a lprefix$a (lmap$c ?v0))) :named a20))
(assert (! (forall ((?v0 A_b_fun$)) (monotone$c lprefix$a lprefix$ (lmap$ ?v0))) :named a21))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$e (lmap$c ?v0) (iterates$ ?v0 ?v1)) (iterates$ ?v0 (fun_app$f ?v0 ?v1)))) :named a22))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (= (fun_app$g (lmap$a ?v0) (iterates$a ?v0 ?v1)) (iterates$a ?v0 (fun_app$h ?v0 ?v1)))) :named a23))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (ldrop$ ?v0 (fun_app$e (lmap$c ?v1) ?v2)) (fun_app$e (lmap$c ?v1) (ldrop$ ?v0 ?v2)))) :named a24))
(assert (! (forall ((?v0 Enat$) (?v1 B_a_fun$) (?v2 B_llist$)) (= (ldrop$ ?v0 (fun_app$i (lmap$b ?v1) ?v2)) (fun_app$i (lmap$b ?v1) (ldrop$a ?v0 ?v2)))) :named a25))
(assert (! (forall ((?v0 Enat$) (?v1 B_b_fun$) (?v2 B_llist$)) (= (ldrop$a ?v0 (fun_app$g (lmap$a ?v1) ?v2)) (fun_app$g (lmap$a ?v1) (ldrop$a ?v0 ?v2)))) :named a26))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_fun$) (?v2 A_llist$)) (= (ldrop$a ?v0 (fun_app$b (lmap$ ?v1) ?v2)) (fun_app$b (lmap$ ?v1) (ldrop$ ?v0 ?v2)))) :named a27))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (ldropn$ ?v0 (fun_app$e (lmap$c ?v1) ?v2)) (fun_app$e (lmap$c ?v1) (ldropn$ ?v0 ?v2)))) :named a28))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_fun$) (?v2 B_llist$)) (= (ldropn$ ?v0 (fun_app$i (lmap$b ?v1) ?v2)) (fun_app$i (lmap$b ?v1) (ldropn$a ?v0 ?v2)))) :named a29))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_fun$) (?v2 B_llist$)) (= (ldropn$a ?v0 (fun_app$g (lmap$a ?v1) ?v2)) (fun_app$g (lmap$a ?v1) (ldropn$a ?v0 ?v2)))) :named a30))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_fun$) (?v2 A_llist$)) (= (ldropn$a ?v0 (fun_app$b (lmap$ ?v1) ?v2)) (fun_app$b (lmap$ ?v1) (ldropn$ ?v0 ?v2)))) :named a31))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (llength$ (fun_app$e (lmap$c ?v0) ?v1)) (llength$ ?v1))) :named a32))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (llength$ (fun_app$i (lmap$b ?v0) ?v1)) (llength$a ?v1))) :named a33))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (llength$a (fun_app$g (lmap$a ?v0) ?v1)) (llength$a ?v1))) :named a34))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (llength$a (fun_app$b (lmap$ ?v0) ?v1)) (llength$ ?v1))) :named a35))
(assert (! (transp$ lprefix$) :named a36))
(assert (! (transp$a lprefix$a) :named a37))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (ltake$ ?v0 (fun_app$e (lmap$c ?v1) ?v2)) (fun_app$e (lmap$c ?v1) (ltake$ ?v0 ?v2)))) :named a38))
(assert (! (forall ((?v0 Enat$) (?v1 B_a_fun$) (?v2 B_llist$)) (= (ltake$ ?v0 (fun_app$i (lmap$b ?v1) ?v2)) (fun_app$i (lmap$b ?v1) (ltake$a ?v0 ?v2)))) :named a39))
(assert (! (forall ((?v0 Enat$) (?v1 B_b_fun$) (?v2 B_llist$)) (= (ltake$a ?v0 (fun_app$g (lmap$a ?v1) ?v2)) (fun_app$g (lmap$a ?v1) (ltake$a ?v0 ?v2)))) :named a40))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_fun$) (?v2 A_llist$)) (= (ltake$a ?v0 (fun_app$b (lmap$ ?v1) ?v2)) (fun_app$b (lmap$ ?v1) (ltake$ ?v0 ?v2)))) :named a41))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (lnull$ (fun_app$g (lmap$a ?v0) ?v1)) (lnull$ ?v1))) :named a42))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (lnull$a (fun_app$i (lmap$b ?v0) ?v1)) (lnull$ ?v1))) :named a43))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lnull$a (fun_app$e (lmap$c ?v0) ?v1)) (lnull$a ?v1))) :named a44))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (lnull$ (fun_app$b (lmap$ ?v0) ?v1)) (lnull$a ?v1))) :named a45))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lfinite$ (fun_app$e (lmap$c ?v0) ?v1)) (lfinite$ ?v1))) :named a46))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (lfinite$ (fun_app$i (lmap$b ?v0) ?v1)) (lfinite$a ?v1))) :named a47))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (lfinite$a (fun_app$g (lmap$a ?v0) ?v1)) (lfinite$a ?v1))) :named a48))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (lfinite$a (fun_app$b (lmap$ ?v0) ?v1)) (lfinite$ ?v1))) :named a49))
(check-sat)
;(get-unsat-core)
