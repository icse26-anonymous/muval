; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 529
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_list_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_list_list_bool_fun$ 0)
(declare-sort A_list_a_list_prod_set$ 0)
(declare-sort A_list_list_list_bool_fun$ 0)
(declare-sort A_list_a_list_bool_fun_fun$ 0)
(declare-sort A_list_a_list_prod_bool_fun$ 0)
(declare-sort A_list_list_a_list_list_prod_set$ 0)
(declare-sort A_list_list_a_list_list_bool_fun_fun$ 0)
(declare-sort A_list_list_a_list_list_prod_bool_fun$ 0)
(declare-sort A_list_list_list_a_list_list_list_prod_set$ 0)
(declare-sort A_list_list_list_a_list_list_list_bool_fun_fun$ 0)
(declare-sort A_list_list_list_list_a_list_list_list_list_prod_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))
  (A_list_a_list_prod$ (pair$ (fst$ A_list$) (snd$ A_list$)))
  (A_a_prod$ (pair$a (fst$a A$) (snd$a A$)))
  (A_list_list$ (nil$a) (cons$a (hd$a A_list$) (tl$a A_list_list$)))
  (A_list_list_list$ (nil$b) (cons$b (hd$b A_list_list$) (tl$b A_list_list_list$)))
  (A_list_list_list_a_list_list_list_prod$ (pair$b (fst$b A_list_list_list$) (snd$b A_list_list_list$)))
  (A_list_list_a_list_list_prod$ (pair$c (fst$c A_list_list$) (snd$c A_list_list$)))
  (A_list_list_list_list$ (nil$c) (cons$c (hd$c A_list_list_list$) (tl$c A_list_list_list_list$)))
  (A_list_list_list_list_a_list_list_list_list_prod$ (pair$d (fst$d A_list_list_list_list$) (snd$d A_list_list_list_list$)))))
(declare-fun r$ () A_a_bool_fun_fun$)
(declare-fun uu$ (Bool A_list_list_a_list_list_bool_fun_fun$) A_list_list_a_list_list_bool_fun_fun$)
(declare-fun xs$ () A_list$)
(declare-fun ys$ () A_list$)
(declare-fun uua$ (Bool A_list_a_list_bool_fun_fun$) A_list_a_list_bool_fun_fun$)
(declare-fun uub$ (Bool A_a_bool_fun_fun$) A_a_bool_fun_fun$)
(declare-fun uuc$ (A_list_list_a_list_list_prod_bool_fun$) A_list_list_a_list_list_bool_fun_fun$)
(declare-fun uud$ (A_list_a_list_prod_bool_fun$) A_list_a_list_bool_fun_fun$)
(declare-fun uue$ (A_a_prod_bool_fun$) A_a_bool_fun_fun$)
(declare-fun lexord$ (A_a_prod_set$) A_list_a_list_prod_set$)
(declare-fun member$ (A_list_a_list_prod$ A_list_a_list_prod_set$) Bool)
(declare-fun collect$ (A_a_prod_bool_fun$) A_a_prod_set$)
(declare-fun fun_app$ (A_list_list_bool_fun$ A_list_list$) Bool)
(declare-fun lexord$a (A_list_list_list_a_list_list_list_prod_set$) A_list_list_list_list_a_list_list_list_list_prod_set$)
(declare-fun lexord$b (A_list_list_a_list_list_prod_set$) A_list_list_list_a_list_list_list_prod_set$)
(declare-fun lexord$c (A_list_a_list_prod_set$) A_list_list_a_list_list_prod_set$)
(declare-fun lexordp$ (A_list_list_a_list_list_bool_fun_fun$ A_list_list_list$) A_list_list_list_bool_fun$)
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$) Bool)
(declare-fun member$a (A_list_list_list_a_list_list_list_prod$ A_list_list_list_a_list_list_list_prod_set$) Bool)
(declare-fun member$b (A_list_list_list_list_a_list_list_list_list_prod$ A_list_list_list_list_a_list_list_list_list_prod_set$) Bool)
(declare-fun member$c (A_list_list_a_list_list_prod$ A_list_list_a_list_list_prod_set$) Bool)
(declare-fun member$d (A_a_prod$ A_a_prod_set$) Bool)
(declare-fun collect$a (A_list_list_a_list_list_prod_bool_fun$) A_list_list_a_list_list_prod_set$)
(declare-fun collect$b (A_list_a_list_prod_bool_fun$) A_list_a_list_prod_set$)
(declare-fun fun_app$a (A_list_list_a_list_list_bool_fun_fun$ A_list_list$) A_list_list_bool_fun$)
(declare-fun fun_app$b (A_list_list_a_list_list_prod_bool_fun$ A_list_list_a_list_list_prod$) Bool)
(declare-fun fun_app$c (A_list_bool_fun$ A_list$) Bool)
(declare-fun fun_app$d (A_list_a_list_bool_fun_fun$ A_list$) A_list_bool_fun$)
(declare-fun fun_app$e (A_list_a_list_prod_bool_fun$ A_list_a_list_prod$) Bool)
(declare-fun fun_app$f (A_bool_fun$ A$) Bool)
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$h (A_a_prod_bool_fun$ A_a_prod$) Bool)
(declare-fun fun_app$i (A_list_list_list_bool_fun$ A_list_list_list$) Bool)
(declare-fun fun_app$j (A_list_list_list_a_list_list_list_bool_fun_fun$ A_list_list_list$) A_list_list_list_bool_fun$)
(declare-fun lexordp$a (A_list_a_list_bool_fun_fun$ A_list_list$) A_list_list_bool_fun$)
(declare-fun lexordp$b (A_a_bool_fun_fun$ A_list$) A_list_bool_fun$)
(declare-fun llist_of$ (A_list$) A_llist$)
(declare-fun case_prod$ (A_a_bool_fun_fun$) A_a_prod_bool_fun$)
(declare-fun case_prod$a (A_list_list_list_a_list_list_list_bool_fun_fun$ A_list_list_list_a_list_list_list_prod$) Bool)
(declare-fun case_prod$b (A_list_list_a_list_list_bool_fun_fun$) A_list_list_a_list_list_prod_bool_fun$)
(declare-fun case_prod$c (A_list_a_list_bool_fun_fun$) A_list_a_list_prod_bool_fun$)
(assert (! (forall ((?v0 A_list_list_a_list_list_prod_bool_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (! (= (fun_app$ (fun_app$a (uuc$ ?v0) ?v1) ?v2) (fun_app$b ?v0 (pair$c ?v1 ?v2))) :pattern ((fun_app$ (fun_app$a (uuc$ ?v0) ?v1) ?v2)))) :named a0))
(assert (! (forall ((?v0 A_list_a_list_prod_bool_fun$) (?v1 A_list$) (?v2 A_list$)) (! (= (fun_app$c (fun_app$d (uud$ ?v0) ?v1) ?v2) (fun_app$e ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$c (fun_app$d (uud$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 A_a_prod_bool_fun$) (?v1 A$) (?v2 A$)) (! (= (fun_app$f (fun_app$g (uue$ ?v0) ?v1) ?v2) (fun_app$h ?v0 (pair$a ?v1 ?v2))) :pattern ((fun_app$f (fun_app$g (uue$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 Bool) (?v1 A_list_list_a_list_list_bool_fun_fun$) (?v2 A_list_list$) (?v3 A_list_list$)) (! (= (fun_app$ (fun_app$a (uu$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uu$ ?v0 ?v1) ?v2) ?v3)))) :named a3))
(assert (! (forall ((?v0 Bool) (?v1 A_list_a_list_bool_fun_fun$) (?v2 A_list$) (?v3 A_list$)) (! (= (fun_app$c (fun_app$d (uua$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$c (fun_app$d ?v1 ?v2) ?v3))) :pattern ((fun_app$c (fun_app$d (uua$ ?v0 ?v1) ?v2) ?v3)))) :named a4))
(assert (! (forall ((?v0 Bool) (?v1 A_a_bool_fun_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$f (fun_app$g (uub$ ?v0 ?v1) ?v2) ?v3) (and ?v0 (fun_app$f (fun_app$g ?v1 ?v2) ?v3))) :pattern ((fun_app$f (fun_app$g (uub$ ?v0 ?v1) ?v2) ?v3)))) :named a5))
(assert (! (not (= (llexord$ r$ (llist_of$ xs$) (llist_of$ ys$)) (or (= xs$ ys$) (member$ (pair$ xs$ ys$) (lexord$ (collect$ (case_prod$ r$))))))) :named a6))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (llexord$ ?v0 ?v1 ?v1)) :named a8))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (forall ((?v3 A$) (?v4 A$)) (or (fun_app$f (fun_app$g ?v0 ?v3) ?v4) (or (= ?v3 ?v4) (fun_app$f (fun_app$g ?v0 ?v4) ?v3)))) (or (llexord$ ?v0 ?v1 ?v2) (llexord$ ?v0 ?v2 ?v1)))) :named a9))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (llexord$ ?v0 ?v1 ?v2) (and (llexord$ ?v0 ?v2 ?v3) (forall ((?v4 A$) (?v5 A$) (?v6 A$)) (=> (and (fun_app$f (fun_app$g ?v0 ?v4) ?v5) (fun_app$f (fun_app$g ?v0 ?v5) ?v6)) (fun_app$f (fun_app$g ?v0 ?v4) ?v6))))) (llexord$ ?v0 ?v1 ?v3))) :named a10))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (llexord$ ?v0 ?v1 ?v2) (and (llexord$ ?v0 ?v2 ?v1) (forall ((?v3 A$) (?v4 A$)) (=> (and (fun_app$f (fun_app$g ?v0 ?v3) ?v4) (fun_app$f (fun_app$g ?v0 ?v4) ?v3)) false)))) (= ?v1 ?v2))) :named a11))
(assert (! (forall ((?v0 A_list_list_list_a_list_list_list_prod$) (?v1 A_list_list_list_a_list_list_list_bool_fun_fun$)) (=> (forall ((?v2 A_list_list_list$) (?v3 A_list_list_list$)) (=> (= ?v0 (pair$b ?v2 ?v3)) (fun_app$i (fun_app$j ?v1 ?v2) ?v3))) (case_prod$a ?v1 ?v0))) :named a12))
(assert (! (forall ((?v0 A_list_list_a_list_list_prod$) (?v1 A_list_list_a_list_list_bool_fun_fun$)) (=> (forall ((?v2 A_list_list$) (?v3 A_list_list$)) (=> (= ?v0 (pair$c ?v2 ?v3)) (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) (fun_app$b (case_prod$b ?v1) ?v0))) :named a13))
(assert (! (forall ((?v0 A_list_a_list_prod$) (?v1 A_list_a_list_bool_fun_fun$)) (=> (forall ((?v2 A_list$) (?v3 A_list$)) (=> (= ?v0 (pair$ ?v2 ?v3)) (fun_app$c (fun_app$d ?v1 ?v2) ?v3))) (fun_app$e (case_prod$c ?v1) ?v0))) :named a14))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_bool_fun_fun$)) (=> (forall ((?v2 A$) (?v3 A$)) (=> (= ?v0 (pair$a ?v2 ?v3)) (fun_app$f (fun_app$g ?v1 ?v2) ?v3))) (fun_app$h (case_prod$ ?v1) ?v0))) :named a15))
(assert (! (forall ((?v0 A_list_list_list_a_list_list_list_bool_fun_fun$) (?v1 A_list_list_list$) (?v2 A_list_list_list$)) (=> (fun_app$i (fun_app$j ?v0 ?v1) ?v2) (case_prod$a ?v0 (pair$b ?v1 ?v2)))) :named a16))
(assert (! (forall ((?v0 A_list_list_a_list_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (fun_app$b (case_prod$b ?v0) (pair$c ?v1 ?v2)))) :named a17))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (fun_app$c (fun_app$d ?v0 ?v1) ?v2) (fun_app$e (case_prod$c ?v0) (pair$ ?v1 ?v2)))) :named a18))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$)) (=> (fun_app$f (fun_app$g ?v0 ?v1) ?v2) (fun_app$h (case_prod$ ?v0) (pair$a ?v1 ?v2)))) :named a19))
(assert (! (forall ((?v0 A_list_list_list_a_list_list_list_bool_fun_fun$) (?v1 A_list_list_list$) (?v2 A_list_list_list$)) (=> (fun_app$i (fun_app$j ?v0 ?v1) ?v2) (case_prod$a ?v0 (pair$b ?v1 ?v2)))) :named a20))
(assert (! (forall ((?v0 A_list_list_a_list_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (fun_app$b (case_prod$b ?v0) (pair$c ?v1 ?v2)))) :named a21))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (fun_app$c (fun_app$d ?v0 ?v1) ?v2) (fun_app$e (case_prod$c ?v0) (pair$ ?v1 ?v2)))) :named a22))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$)) (=> (fun_app$f (fun_app$g ?v0 ?v1) ?v2) (fun_app$h (case_prod$ ?v0) (pair$a ?v1 ?v2)))) :named a23))
(assert (! (forall ((?v0 Bool) (?v1 A_list_list_a_list_list_bool_fun_fun$) (?v2 A_list_list_a_list_list_prod$)) (= (fun_app$b (case_prod$b (uu$ ?v0 ?v1)) ?v2) (and ?v0 (fun_app$b (case_prod$b ?v1) ?v2)))) :named a24))
(assert (! (forall ((?v0 Bool) (?v1 A_list_a_list_bool_fun_fun$) (?v2 A_list_a_list_prod$)) (= (fun_app$e (case_prod$c (uua$ ?v0 ?v1)) ?v2) (and ?v0 (fun_app$e (case_prod$c ?v1) ?v2)))) :named a25))
(assert (! (forall ((?v0 Bool) (?v1 A_a_bool_fun_fun$) (?v2 A_a_prod$)) (= (fun_app$h (case_prod$ (uub$ ?v0 ?v1)) ?v2) (and ?v0 (fun_app$h (case_prod$ ?v1) ?v2)))) :named a26))
(assert (! (forall ((?v0 A_list_list_list_a_list_list_list_prod_set$) (?v1 A_list_list_list_list$) (?v2 A_list_list_list_list$)) (=> (forall ((?v3 A_list_list_list$) (?v4 A_list_list_list$)) (or (member$a (pair$b ?v3 ?v4) ?v0) (or (= ?v3 ?v4) (member$a (pair$b ?v4 ?v3) ?v0)))) (or (member$b (pair$d ?v1 ?v2) (lexord$a ?v0)) (or (= ?v1 ?v2) (member$b (pair$d ?v2 ?v1) (lexord$a ?v0)))))) :named a27))
(assert (! (forall ((?v0 A_list_list_a_list_list_prod_set$) (?v1 A_list_list_list$) (?v2 A_list_list_list$)) (=> (forall ((?v3 A_list_list$) (?v4 A_list_list$)) (or (member$c (pair$c ?v3 ?v4) ?v0) (or (= ?v3 ?v4) (member$c (pair$c ?v4 ?v3) ?v0)))) (or (member$a (pair$b ?v1 ?v2) (lexord$b ?v0)) (or (= ?v1 ?v2) (member$a (pair$b ?v2 ?v1) (lexord$b ?v0)))))) :named a28))
(assert (! (forall ((?v0 A_a_prod_set$) (?v1 A_list$) (?v2 A_list$)) (=> (forall ((?v3 A$) (?v4 A$)) (or (member$d (pair$a ?v3 ?v4) ?v0) (or (= ?v3 ?v4) (member$d (pair$a ?v4 ?v3) ?v0)))) (or (member$ (pair$ ?v1 ?v2) (lexord$ ?v0)) (or (= ?v1 ?v2) (member$ (pair$ ?v2 ?v1) (lexord$ ?v0)))))) :named a29))
(assert (! (forall ((?v0 A_list_a_list_prod_set$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (forall ((?v3 A_list$) (?v4 A_list$)) (or (member$ (pair$ ?v3 ?v4) ?v0) (or (= ?v3 ?v4) (member$ (pair$ ?v4 ?v3) ?v0)))) (or (member$c (pair$c ?v1 ?v2) (lexord$c ?v0)) (or (= ?v1 ?v2) (member$c (pair$c ?v2 ?v1) (lexord$c ?v0)))))) :named a30))
(assert (! (forall ((?v0 A_list_list_list_a_list_list_list_prod_set$) (?v1 A_list_list_list_list$)) (=> (forall ((?v2 A_list_list_list$)) (not (member$a (pair$b ?v2 ?v2) ?v0))) (not (member$b (pair$d ?v1 ?v1) (lexord$a ?v0))))) :named a31))
(assert (! (forall ((?v0 A_list_list_a_list_list_prod_set$) (?v1 A_list_list_list$)) (=> (forall ((?v2 A_list_list$)) (not (member$c (pair$c ?v2 ?v2) ?v0))) (not (member$a (pair$b ?v1 ?v1) (lexord$b ?v0))))) :named a32))
(assert (! (forall ((?v0 A_a_prod_set$) (?v1 A_list$)) (=> (forall ((?v2 A$)) (not (member$d (pair$a ?v2 ?v2) ?v0))) (not (member$ (pair$ ?v1 ?v1) (lexord$ ?v0))))) :named a33))
(assert (! (forall ((?v0 A_list_a_list_prod_set$) (?v1 A_list_list$)) (=> (forall ((?v2 A_list$)) (not (member$ (pair$ ?v2 ?v2) ?v0))) (not (member$c (pair$c ?v1 ?v1) (lexord$c ?v0))))) :named a34))
(assert (! (forall ((?v0 A_list_list_list$) (?v1 A_list_list_list$) (?v2 A_list_list_list$) (?v3 A_list_list_list$)) (= (= (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a35))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a36))
(assert (! (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list_list$) (?v3 A_list_list$)) (= (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a37))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a38))
(assert (! (forall ((?v0 A_list_list_list$) (?v1 A_list_list_list$) (?v2 A_list_list_list$) (?v3 A_list_list_list$)) (= (= (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a39))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a40))
(assert (! (forall ((?v0 A_list_list$) (?v1 A_list_list$) (?v2 A_list_list$) (?v3 A_list_list$)) (= (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a41))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a42))
(assert (! (forall ((?v0 A_list_list_a_list_list_prod_bool_fun$)) (= (case_prod$b (uuc$ ?v0)) ?v0)) :named a43))
(assert (! (forall ((?v0 A_list_a_list_prod_bool_fun$)) (= (case_prod$c (uud$ ?v0)) ?v0)) :named a44))
(assert (! (forall ((?v0 A_a_prod_bool_fun$)) (= (case_prod$ (uue$ ?v0)) ?v0)) :named a45))
(assert (! (forall ((?v0 A_list_list_a_list_list_bool_fun_fun$) (?v1 A_list_list_a_list_list_prod_bool_fun$)) (=> (forall ((?v2 A_list_list$) (?v3 A_list_list$)) (= (fun_app$ (fun_app$a ?v0 ?v2) ?v3) (fun_app$b ?v1 (pair$c ?v2 ?v3)))) (= (case_prod$b ?v0) ?v1))) :named a46))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_a_list_prod_bool_fun$)) (=> (forall ((?v2 A_list$) (?v3 A_list$)) (= (fun_app$c (fun_app$d ?v0 ?v2) ?v3) (fun_app$e ?v1 (pair$ ?v2 ?v3)))) (= (case_prod$c ?v0) ?v1))) :named a47))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_prod_bool_fun$)) (=> (forall ((?v2 A$) (?v3 A$)) (= (fun_app$f (fun_app$g ?v0 ?v2) ?v3) (fun_app$h ?v1 (pair$a ?v2 ?v3)))) (= (case_prod$ ?v0) ?v1))) :named a48))
(assert (! (forall ((?v0 A_list_list_a_list_list_bool_fun_fun$) (?v1 A_list_list_list$) (?v2 A_list_list_list$)) (! (= (fun_app$i (lexordp$ ?v0 ?v1) ?v2) (member$a (pair$b ?v1 ?v2) (lexord$b (collect$a (case_prod$b ?v0))))) :pattern ((fun_app$i (lexordp$ ?v0 ?v1) ?v2)))) :named a49))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (! (= (fun_app$ (lexordp$a ?v0 ?v1) ?v2) (member$c (pair$c ?v1 ?v2) (lexord$c (collect$b (case_prod$c ?v0))))) :pattern ((fun_app$ (lexordp$a ?v0 ?v1) ?v2)))) :named a50))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (! (= (fun_app$c (lexordp$b ?v0 ?v1) ?v2) (member$ (pair$ ?v1 ?v2) (lexord$ (collect$ (case_prod$ ?v0))))) :pattern ((fun_app$c (lexordp$b ?v0 ?v1) ?v2)))) :named a51))
(assert (! (forall ((?v0 A_list_list_list_a_list_list_list_bool_fun_fun$) (?v1 A_list_list_list$) (?v2 A_list_list_list$)) (=> (case_prod$a ?v0 (pair$b ?v1 ?v2)) (fun_app$i (fun_app$j ?v0 ?v1) ?v2))) :named a52))
(assert (! (forall ((?v0 A_list_list_a_list_list_bool_fun_fun$) (?v1 A_list_list$) (?v2 A_list_list$)) (=> (fun_app$b (case_prod$b ?v0) (pair$c ?v1 ?v2)) (fun_app$ (fun_app$a ?v0 ?v1) ?v2))) :named a53))
(assert (! (forall ((?v0 A_list_a_list_bool_fun_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (fun_app$e (case_prod$c ?v0) (pair$ ?v1 ?v2)) (fun_app$c (fun_app$d ?v0 ?v1) ?v2))) :named a54))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$)) (=> (fun_app$h (case_prod$ ?v0) (pair$a ?v1 ?v2)) (fun_app$f (fun_app$g ?v0 ?v1) ?v2))) :named a55))
(check-sat)
;(get-unsat-core)
