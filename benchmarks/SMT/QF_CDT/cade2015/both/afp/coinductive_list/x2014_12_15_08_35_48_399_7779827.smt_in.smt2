; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 675
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_llist_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Nat_llist_nat_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((Nat_llist$ (lNil$) (lCons$ (lhd$ Nat$) (ltl$ Nat_llist$)))))
(declare-fun f$ () Nat_a_fun$)
(declare-fun g$ () Nat_a_fun$)
(declare-fun uu$ () Nat_nat_bool_fun_fun$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun uua$ (Nat_nat_bool_fun_fun$ Nat_nat_bool_fun_fun$) Nat_nat_bool_fun_fun$)
(declare-fun uub$ () Nat_nat_bool_fun_fun$)
(declare-fun uuc$ () Nat_llist_nat_llist_bool_fun_fun$)
(declare-fun zero$ () Nat$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$a (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun fun_app$b (Nat_a_fun$ Nat$) A$)
(declare-fun fun_app$c (Nat_llist_bool_fun$ Nat_llist$) Bool)
(declare-fun fun_app$d (Nat_llist_nat_llist_bool_fun_fun$ Nat_llist$) Nat_llist_bool_fun$)
(declare-fun fun_app$e (Nat_nat_fun$ Nat$) Nat$)
(declare-fun iterates$ (Nat_nat_fun$ Nat$) Nat_llist$)
(declare-fun llist_all2$ (Nat_nat_bool_fun_fun$) Nat_llist_nat_llist_bool_fun_fun$)
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (fun_app$a uu$ ?v0) ?v1) (= (fun_app$b f$ ?v0) (fun_app$b g$ ?v1))) :pattern ((fun_app$ (fun_app$a uu$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 Nat_llist$) (?v1 Nat_llist$)) (! (= (fun_app$c (fun_app$d uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$c (fun_app$d uuc$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (fun_app$a uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uub$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$a (uua$ ?v0 ?v1) ?v2) ?v3) (and (fun_app$ (fun_app$a ?v0 ?v2) ?v3) (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uua$ ?v0 ?v1) ?v2) ?v3)))) :named a3))
(assert (! (not (= (fun_app$c (fun_app$d (llist_all2$ uu$) (iterates$ suc$ zero$)) (iterates$ suc$ zero$)) (= f$ g$))) :named a4))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_nat_bool_fun_fun$) (?v2 Nat_llist$) (?v3 Nat_llist$)) (= (fun_app$c (fun_app$d (llist_all2$ (uua$ ?v0 ?v1)) ?v2) ?v3) (and (fun_app$c (fun_app$d (llist_all2$ ?v0) ?v2) ?v3) (fun_app$c (fun_app$d (llist_all2$ ?v1) ?v2) ?v3)))) :named a5))
(assert (! (= (llist_all2$ uub$) uuc$) :named a6))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat_llist$) (?v2 Nat_llist$) (?v3 Nat_nat_bool_fun_fun$)) (=> (and (fun_app$c (fun_app$d (llist_all2$ ?v0) ?v1) ?v2) (forall ((?v4 Nat$) (?v5 Nat$)) (=> (fun_app$ (fun_app$a ?v0 ?v4) ?v5) (fun_app$ (fun_app$a ?v3 ?v4) ?v5)))) (fun_app$c (fun_app$d (llist_all2$ ?v3) ?v1) ?v2))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$e suc$ ?v0) (fun_app$e suc$ ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$e suc$ ?v0) (fun_app$e suc$ ?v1)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Nat$)) (=> (= ?v0 (fun_app$e suc$ ?v1)) false))) false)) :named a10))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Nat$)) (=> (= ?v0 (fun_app$e suc$ ?v1)) false))) false)) :named a11))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$a ?v0 ?v3) zero$)) (and (forall ((?v3 Nat$)) (fun_app$ (fun_app$a ?v0 zero$) (fun_app$e suc$ ?v3))) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (fun_app$ (fun_app$a ?v0 (fun_app$e suc$ ?v3)) (fun_app$e suc$ ?v4)))))) (fun_app$ (fun_app$a ?v0 ?v1) ?v2))) :named a12))
(assert (! (forall ((?v0 Nat$)) (=> (= (fun_app$e suc$ ?v0) zero$) false)) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 (fun_app$e suc$ ?v1)) (not (= ?v0 zero$)))) :named a14))
(assert (! (forall ((?v0 Nat$)) (=> (= zero$ (fun_app$e suc$ ?v0)) false)) :named a15))
(assert (! (forall ((?v0 Nat$)) (=> (not (= ?v0 zero$)) (exists ((?v1 Nat$)) (= ?v0 (fun_app$e suc$ ?v1))))) :named a16))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a17))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a18))
(check-sat)
;(get-unsat-core)
