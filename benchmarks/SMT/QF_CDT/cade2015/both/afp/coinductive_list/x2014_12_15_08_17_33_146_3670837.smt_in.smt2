; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 550
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort Enat_a_llist_fun$ 0)
(declare-sort Enat_b_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))))
(declare-fun f$ () B_a_fun$)
(declare-fun x$ () B$)
(declare-fun na$ () Enat$)
(declare-fun uu$ () A_a_fun$)
(declare-fun uua$ () B_b_fun$)
(declare-fun uub$ (A_llist$) Enat_a_llist_fun$)
(declare-fun uuc$ (B_llist$) Enat_b_llist_fun$)
(declare-fun xsa$ () B_llist$)
(declare-fun eSuc$ (Enat$) Enat$)
(declare-fun lmap$ (B_a_fun$ B_llist$) A_llist$)
(declare-fun ldrop$ (Enat$ B_llist$) B_llist$)
(declare-fun lmap$a (A_a_fun$ A_llist$) A_llist$)
(declare-fun lmap$b (B_b_fun$ B_llist$) B_llist$)
(declare-fun lmap$c (A_b_fun$ A_llist$) B_llist$)
(declare-fun lsetp$ (A_llist$) A_bool_fun$)
(declare-fun ldrop$a (Enat$ A_llist$) A_llist$)
(declare-fun lsetp$a (B_llist$) B_bool_fun$)
(declare-fun fun_app$ (Enat_b_llist_fun$ Enat$) B_llist$)
(declare-fun lfinite$ (B_llist$) Bool)
(declare-fun lmember$ (A$ A_llist$) Bool)
(declare-fun fun_app$a (Enat_a_llist_fun$ Enat$) A_llist$)
(declare-fun fun_app$b (B_b_fun$ B$) B$)
(declare-fun fun_app$c (A_a_fun$ A$) A$)
(declare-fun fun_app$d (A_b_fun$ A$) B$)
(declare-fun fun_app$e (B_a_fun$ B$) A$)
(declare-fun fun_app$f (A_bool_fun$ A$) Bool)
(declare-fun fun_app$g (B_bool_fun$ B$) Bool)
(declare-fun iterates$ (A_a_fun$ A$) A_llist$)
(declare-fun lfinite$a (A_llist$) Bool)
(declare-fun lmember$a (B$ B_llist$) Bool)
(declare-fun case_enat$ (A_llist$ Enat_a_llist_fun$ Enat$) A_llist$)
(declare-fun iterates$a (B_b_fun$ B$) B_llist$)
(declare-fun case_enat$a (B_llist$ Enat_b_llist_fun$ Enat$) B_llist$)
(declare-fun pred_llist$ (A_bool_fun$ A_llist$) Bool)
(declare-fun pred_llist$a (B_bool_fun$ B_llist$) Bool)
(assert (! (forall ((?v0 B_llist$) (?v1 Enat$)) (! (= (fun_app$ (uuc$ ?v0) ?v1) (ldrop$ ?v1 ?v0)) :pattern ((fun_app$ (uuc$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 Enat$)) (! (= (fun_app$a (uub$ ?v0) ?v1) (ldrop$a ?v1 ?v0)) :pattern ((fun_app$a (uub$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$b uua$ ?v0) ?v0) :pattern ((fun_app$b uua$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$c uu$ ?v0) ?v0) :pattern ((fun_app$c uu$ ?v0)))) :named a3))
(assert (! (not (= (ldrop$a na$ (lmap$ f$ (lCons$a x$ xsa$))) (lmap$ f$ (ldrop$ na$ (lCons$a x$ xsa$))))) :named a4))
(assert (! (lfinite$ xsa$) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a6))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a7))
(assert (! (forall ((?v0 Enat$)) (= (ldrop$a ?v0 (lmap$ f$ xsa$)) (lmap$ f$ (ldrop$ ?v0 xsa$)))) :named a8))
(assert (! (forall ((?v0 A_llist$)) (= (lmap$a uu$ ?v0) ?v0)) :named a9))
(assert (! (forall ((?v0 B_llist$)) (= (lmap$b uua$ ?v0) ?v0)) :named a10))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (lmap$c ?v0 (lCons$ ?v1 ?v2)) (lCons$a (fun_app$d ?v0 ?v1) (lmap$c ?v0 ?v2))) :pattern ((lmap$c ?v0 (lCons$ ?v1 ?v2))))) :named a11))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (lmap$a ?v0 (lCons$ ?v1 ?v2)) (lCons$ (fun_app$c ?v0 ?v1) (lmap$a ?v0 ?v2))) :pattern ((lmap$a ?v0 (lCons$ ?v1 ?v2))))) :named a12))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B$) (?v2 B_llist$)) (! (= (lmap$ ?v0 (lCons$a ?v1 ?v2)) (lCons$ (fun_app$e ?v0 ?v1) (lmap$ ?v0 ?v2))) :pattern ((lmap$ ?v0 (lCons$a ?v1 ?v2))))) :named a13))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$) (?v2 B_llist$)) (! (= (lmap$b ?v0 (lCons$a ?v1 ?v2)) (lCons$a (fun_app$b ?v0 ?v1) (lmap$b ?v0 ?v2))) :pattern ((lmap$b ?v0 (lCons$a ?v1 ?v2))))) :named a14))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$) (?v2 B$) (?v3 B_llist$)) (= (= (lmap$c ?v0 ?v1) (lCons$a ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v1 (lCons$ ?v4 ?v5)) (and (= ?v2 (fun_app$d ?v0 ?v4)) (= ?v3 (lmap$c ?v0 ?v5))))))) :named a15))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lmap$a ?v0 ?v1) (lCons$ ?v2 ?v3)) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v1 (lCons$ ?v4 ?v5)) (and (= ?v2 (fun_app$c ?v0 ?v4)) (= ?v3 (lmap$a ?v0 ?v5))))))) :named a16))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lmap$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v1 (lCons$a ?v4 ?v5)) (and (= ?v2 (fun_app$e ?v0 ?v4)) (= ?v3 (lmap$ ?v0 ?v5))))))) :named a17))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (= (= (lmap$b ?v0 ?v1) (lCons$a ?v2 ?v3)) (exists ((?v4 B$) (?v5 B_llist$)) (and (= ?v1 (lCons$a ?v4 ?v5)) (and (= ?v2 (fun_app$b ?v0 ?v4)) (= ?v3 (lmap$b ?v0 ?v5))))))) :named a18))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (lfinite$ (lmap$c ?v0 ?v1)) (lfinite$a ?v1))) :named a19))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lfinite$a (lmap$a ?v0 ?v1)) (lfinite$a ?v1))) :named a20))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (lfinite$ (lmap$b ?v0 ?v1)) (lfinite$ ?v1))) :named a21))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (lfinite$a (lmap$ ?v0 ?v1)) (lfinite$ ?v1))) :named a22))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$a (lCons$ ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a23))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (! (= (lfinite$ (lCons$a ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a24))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$a (lCons$ ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a25))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (! (= (lfinite$ (lCons$a ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a26))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (lfinite$a ?v0) (lfinite$a (lCons$ ?v1 ?v0)))) :named a27))
(assert (! (forall ((?v0 B_llist$) (?v1 B$)) (=> (lfinite$ ?v0) (lfinite$ (lCons$a ?v1 ?v0)))) :named a28))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2)) (and (fun_app$f ?v0 ?v1) (pred_llist$ ?v0 ?v2))) :pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2))))) :named a29))
(assert (! (forall ((?v0 B_bool_fun$) (?v1 B$) (?v2 B_llist$)) (! (= (pred_llist$a ?v0 (lCons$a ?v1 ?v2)) (and (fun_app$g ?v0 ?v1) (pred_llist$a ?v0 ?v2))) :pattern ((pred_llist$a ?v0 (lCons$a ?v1 ?v2))))) :named a30))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (lmember$ ?v0 (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (lmember$ ?v0 ?v2))) :pattern ((lmember$ ?v0 (lCons$ ?v1 ?v2))))) :named a31))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B_llist$)) (! (= (lmember$a ?v0 (lCons$a ?v1 ?v2)) (or (= ?v0 ?v1) (lmember$a ?v0 ?v2))) :pattern ((lmember$a ?v0 (lCons$a ?v1 ?v2))))) :named a32))
(assert (! (forall ((?v0 Enat$) (?v1 A$) (?v2 A_llist$)) (= (ldrop$a ?v0 (lCons$ ?v1 ?v2)) (case_enat$ (lCons$ ?v1 ?v2) (uub$ ?v2) ?v0))) :named a33))
(assert (! (forall ((?v0 Enat$) (?v1 B$) (?v2 B_llist$)) (= (ldrop$ ?v0 (lCons$a ?v1 ?v2)) (case_enat$a (lCons$a ?v1 ?v2) (uuc$ ?v2) ?v0))) :named a34))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (iterates$ ?v0 ?v1) (lCons$ ?v1 (iterates$ ?v0 (fun_app$c ?v0 ?v1))))) :named a35))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$)) (= (iterates$a ?v0 ?v1) (lCons$a ?v1 (iterates$a ?v0 (fun_app$b ?v0 ?v1))))) :named a36))
(assert (! (forall ((?v0 Enat$) (?v1 A$) (?v2 A_llist$)) (= (ldrop$a (eSuc$ ?v0) (lCons$ ?v1 ?v2)) (ldrop$a ?v0 ?v2))) :named a37))
(assert (! (forall ((?v0 Enat$) (?v1 B$) (?v2 B_llist$)) (= (ldrop$ (eSuc$ ?v0) (lCons$a ?v1 ?v2)) (ldrop$ ?v0 ?v2))) :named a38))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (= (fun_app$f (lsetp$ ?v0) ?v1) (or (exists ((?v2 A$) (?v3 A_llist$)) (and (= ?v0 (lCons$ ?v2 ?v3)) (= ?v1 ?v2))) (exists ((?v2 A_llist$) (?v3 A$) (?v4 A$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$f (lsetp$ ?v2) ?v3))))))) :named a39))
(assert (! (forall ((?v0 B_llist$) (?v1 B$)) (= (fun_app$g (lsetp$a ?v0) ?v1) (or (exists ((?v2 B$) (?v3 B_llist$)) (and (= ?v0 (lCons$a ?v2 ?v3)) (= ?v1 ?v2))) (exists ((?v2 B_llist$) (?v3 B$) (?v4 B$)) (and (= ?v0 (lCons$a ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$g (lsetp$a ?v2) ?v3))))))) :named a40))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (and (fun_app$f (lsetp$ ?v0) ?v1) (and (forall ((?v2 A$) (?v3 A_llist$)) (=> (and (= ?v0 (lCons$ ?v2 ?v3)) (= ?v1 ?v2)) false)) (forall ((?v2 A_llist$) (?v3 A$) (?v4 A$)) (=> (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$f (lsetp$ ?v2) ?v3))) false)))) false)) :named a41))
(assert (! (forall ((?v0 B_llist$) (?v1 B$)) (=> (and (fun_app$g (lsetp$a ?v0) ?v1) (and (forall ((?v2 B$) (?v3 B_llist$)) (=> (and (= ?v0 (lCons$a ?v2 ?v3)) (= ?v1 ?v2)) false)) (forall ((?v2 B_llist$) (?v3 B$) (?v4 B$)) (=> (and (= ?v0 (lCons$a ?v4 ?v2)) (and (= ?v1 ?v3) (fun_app$g (lsetp$a ?v2) ?v3))) false)))) false)) :named a42))
(check-sat)
;(get-unsat-core)
