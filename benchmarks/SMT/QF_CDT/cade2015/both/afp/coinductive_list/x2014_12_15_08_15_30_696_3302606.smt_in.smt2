; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 603
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort Enat_enat_bool_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun m$ () Enat$)
(declare-fun n$ () Enat$)
(declare-fun ma$ () Enat$)
(declare-fun na$ () Enat$)
(declare-fun xs$ () A_llist$)
(declare-fun xsa$ () A_llist$)
(declare-fun plus$ (Enat$ Enat$) Enat$)
(declare-fun zero$ () Enat$)
(declare-fun epred$ (Enat$) Enat$)
(declare-fun ltake$ (Enat$ A_llist$) A_llist$)
(declare-fun fun_app$ (Enat_bool_fun$ Enat$) Bool)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun fun_app$a (Enat_enat_bool_fun_fun$ Enat$) Enat_bool_fun$)
(assert (! (not (and (=> (= ma$ zero$) (= na$ zero$)) (=> (and (not (= na$ zero$)) (not (= ma$ zero$))) (or (exists ((?v0 Enat$) (?v1 Enat$)) (and (exists ((?v2 Enat$) (?v3 Enat$) (?v4 A_llist$)) (and (= (epred$ na$) ?v2) (and (= ?v1 ?v3) (and (lprefix$ (ltake$ ?v2 ?v4) (ltake$ ?v3 ?v4)) (not (less_eq$ (llength$ ?v4) ?v3)))))) (= (epred$ ma$) (plus$ ?v1 ?v0)))) (less_eq$ (epred$ na$) (epred$ ma$)))))) :named a0))
(assert (! (not (less_eq$ (llength$ xsa$) ma$)) :named a1))
(assert (! (lprefix$ (ltake$ na$ xsa$) (ltake$ ma$ xsa$)) :named a2))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a3))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a4))
(assert (! (not (less_eq$ (llength$ xs$) m$)) :named a5))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$)) (lprefix$ (ltake$ ?v0 ?v1) ?v1)) :named a6))
(assert (! (lprefix$ (ltake$ n$ xs$) (ltake$ m$ xs$)) :named a7))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$) (?v1 Enat$) (?v2 Enat$)) (=> (and (forall ((?v3 Enat$) (?v4 Enat$)) (=> (less_eq$ ?v3 ?v4) (fun_app$ (fun_app$a ?v0 ?v3) ?v4))) (=> (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (fun_app$ (fun_app$a ?v0 ?v2) ?v1))) (fun_app$ (fun_app$a ?v0 ?v2) ?v1))) :named a8))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$) (?v2 A_llist$) (?v3 Enat$)) (=> (and (= (ltake$ ?v0 ?v1) (ltake$ ?v0 ?v2)) (less_eq$ ?v3 ?v0)) (= (ltake$ ?v3 ?v1) (ltake$ ?v3 ?v2)))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 Enat$)) (! (=> (less_eq$ (llength$ ?v0) ?v1) (= (ltake$ ?v1 ?v0) ?v0)) :pattern ((ltake$ ?v1 ?v0)))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v0)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v0)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v2 ?v1)) (or (lprefix$ ?v0 ?v2) (lprefix$ ?v2 ?v0)))) :named a13))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v2)) (lprefix$ ?v0 ?v2))) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lprefix$ ?v1 ?v2)) (lprefix$ ?v0 ?v2))) :named a15))
(check-sat)
;(get-unsat-core)
