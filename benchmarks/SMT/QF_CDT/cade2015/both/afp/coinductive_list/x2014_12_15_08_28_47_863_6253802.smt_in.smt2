; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 616
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun r$ () A_a_bool_fun_fun$)
(declare-fun y$ () A$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun zs$ () A_llist$)
(declare-fun x21$ () A$)
(declare-fun x22$ () A_llist$)
(declare-fun xs$a () A_llist$)
(declare-fun ys$a () A_llist$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$) Bool)
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun iterates$ (A_a_fun$ A$) A_llist$)
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$) A_llist$)
(assert (! (not (fun_app$ (fun_app$a r$ (lhd$ xs$)) y$)) :named a0))
(assert (! (= xs$ (lCons$ x21$ x22$)) :named a1))
(assert (! (or (= xs$ lNil$) (fun_app$ (fun_app$a r$ (lhd$ xs$)) y$)) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lhd$ (lCons$ ?v0 ?v1)) ?v0) :pattern ((lCons$ ?v0 ?v1)))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a4))
(assert (! (llexord$ r$ xs$a ys$) :named a5))
(assert (! (exists ((?v0 A_llist$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (and (lfinite$ ?v0) (and (= xs$a (lappend$ ?v0 ?v1)) (and (= ys$ (lappend$ ?v0 (lCons$ ?v2 ?v3))) (or (= ?v1 lNil$) (fun_app$ (fun_app$a r$ (lhd$ ?v1)) ?v2)))))) :named a6))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (lhd$ (iterates$ ?v0 ?v1)) ?v1)) :named a7))
(assert (! (= xs$a (lappend$ zs$ xs$)) :named a8))
(assert (! (=> (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (=> (and (lfinite$ ?v0) (and (or (= ?v1 lNil$) (fun_app$ (fun_app$a r$ (lhd$ ?v1)) ?v2)) (and (= xs$a (lappend$ ?v0 ?v1)) (= ys$ (lappend$ ?v0 (lCons$ ?v2 ?v3)))))) false)) false) :named a9))
(assert (! (= ys$ (lappend$ zs$ (lCons$ y$ ys$a))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (lnull$ ?v0) (not (fun_app$ ?v1 (lhd$ ?v0)))) false) (=> (and (not (lnull$ ?v0)) (fun_app$ ?v1 (lhd$ ?v0))) false)) false)) :named a11))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (= (ltakeWhile$ ?v0 ?v1) lNil$) (=> (not (= ?v1 lNil$)) (not (fun_app$ ?v0 (lhd$ ?v1)))))) :named a12))
(assert (! (lfinite$ zs$) :named a13))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (llexord$ ?v0 ?v1 ?v1)) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (lappend$ (lCons$ ?v0 ?v1) ?v2) (lCons$ ?v0 (lappend$ ?v1 ?v2))) :pattern ((lappend$ (lCons$ ?v0 ?v1) ?v2)))) :named a15))
(check-sat)
;(get-unsat-core)
