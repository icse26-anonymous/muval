; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 668
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort A_llist_enat_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun f$ () Nat_a_fun$)
(declare-fun llcp$ (A_llist$) A_llist_enat_fun$)
(declare-fun lnth$ (A_llist$) Nat_a_fun$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$) Enat$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun fun_app$a (Nat_a_fun$ Nat$) A$)
(declare-fun infinity$ () Enat$)
(declare-fun iterates$ (A_a_fun$ A$) A_llist$)
(declare-fun llist_of$ (A_list$) A_llist$)
(declare-fun inf_llist$ (Nat_a_fun$) A_llist$)
(assert (! (not (= (llength$ (inf_llist$ f$)) infinity$)) :named a0))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (llength$ (iterates$ ?v0 ?v1)) infinity$)) :named a1))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$ (llcp$ ?v0) ?v0) (llength$ ?v0)) :pattern ((llcp$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A_llist$)) (= (= (llength$ ?v0) infinity$) (not (lfinite$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A_llist$)) (! (=> (not (lfinite$ ?v0)) (= (llength$ ?v0) infinity$)) :pattern ((llength$ ?v0)))) :named a4))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 A_llist$)) (= (lprefix$ (inf_llist$ ?v0) ?v1) (= ?v1 (inf_llist$ ?v0)))) :named a5))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat$)) (= (fun_app$a (lnth$ (inf_llist$ ?v0)) ?v1) (fun_app$a ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 A_list$) (?v1 Nat_a_fun$)) (not (= (llist_of$ ?v0) (inf_llist$ ?v1)))) :named a7))
(assert (! (forall ((?v0 Nat_a_fun$)) (not (= (inf_llist$ ?v0) lNil$))) :named a8))
(assert (! (forall ((?v0 Nat_a_fun$)) (not (lnull$ (inf_llist$ ?v0)))) :named a9))
(assert (! (forall ((?v0 Nat_a_fun$)) (not (lfinite$ (inf_llist$ ?v0)))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a11))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a12))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 A_llist$)) (! (= (lprefix$ lNil$ ?v0) true) :pattern ((lprefix$ lNil$ ?v0)))) :named a14))
(assert (! (= (lfinite$ lNil$) true) :named a15))
(check-sat)
;(get-unsat-core)
