; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 568
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_llist_a_llist_llist_llist_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))
  (A_llist_llist_llist_llist$ (lNil$c) (lCons$c (lhd$c A_llist_llist_llist$) (ltl$c A_llist_llist_llist_llist$)))))
(declare-fun xss$ () A_llist_llist$)
(declare-fun yss$ () A_llist_llist$)
(declare-fun lnull$ (A_llist_llist_llist$) Bool)
(declare-fun lnull$a (A_llist_llist$) Bool)
(declare-fun lnull$b (A_llist$) Bool)
(declare-fun fun_app$ (A_llist_llist_a_llist_llist_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun lappend$ (A_llist_llist$) A_llist_llist_a_llist_llist_fun$)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun lfinite$ (A_llist_llist$) Bool)
(declare-fun llexord$ (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist_llist$ A_llist_llist_llist$) Bool)
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$b (A_llist_llist_llist_a_llist_llist_llist_fun$ A_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun fun_app$c (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun iterates$ (A_llist_llist_a_llist_llist_fun$ A_llist_llist$) A_llist_llist_llist$)
(declare-fun lappend$a (A_llist$) A_llist_a_llist_fun$)
(declare-fun lappend$b (A_llist_llist_llist$) A_llist_llist_llist_a_llist_llist_llist_fun$)
(declare-fun lconcat$a (A_llist_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun lconcat$b (A_llist_llist_llist$) A_llist_llist$)
(declare-fun lfinite$a (A_llist_llist_llist$) Bool)
(declare-fun lfinite$b (A_llist$) Bool)
(declare-fun llexord$a (A_llist_a_llist_bool_fun_fun$ A_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun llexord$b (A_a_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun iterates$a (A_llist_a_llist_fun$ A_llist$) A_llist_llist$)
(declare-fun iterates$b (A_a_fun$ A$) A_llist$)
(assert (! (not (= (lconcat$ (fun_app$ (lappend$ xss$) yss$)) (fun_app$a (lappend$a (lconcat$ xss$)) (lconcat$ yss$)))) :named a0))
(assert (! (lfinite$ xss$) :named a1))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_llist$)) (= (fun_app$b (lappend$b (fun_app$b (lappend$b ?v0) ?v1)) ?v2) (fun_app$b (lappend$b ?v0) (fun_app$b (lappend$b ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0) ?v1)) ?v2) (fun_app$ (lappend$ ?v0) (fun_app$ (lappend$ ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (fun_app$a (lappend$a (fun_app$a (lappend$a ?v0) ?v1)) ?v2) (fun_app$a (lappend$a ?v0) (fun_app$a (lappend$a ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (= (lfinite$a (fun_app$b (lappend$b ?v0) ?v1)) (and (lfinite$a ?v0) (lfinite$a ?v1)))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lfinite$b (fun_app$a (lappend$a ?v0) ?v1)) (and (lfinite$b ?v0) (lfinite$b ?v1)))) :named a6))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (lfinite$ (fun_app$ (lappend$ ?v0) ?v1)) (and (lfinite$ ?v0) (lfinite$ ?v1)))) :named a7))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (! (=> (not (lfinite$a ?v0)) (= (fun_app$b (lappend$b ?v0) ?v1) ?v0)) :pattern ((fun_app$b (lappend$b ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (=> (not (lfinite$b ?v0)) (= (fun_app$a (lappend$a ?v0) ?v1) ?v0)) :pattern ((fun_app$a (lappend$a ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (! (=> (not (lfinite$ ?v0)) (= (fun_app$ (lappend$ ?v0) ?v1) ?v0)) :pattern ((fun_app$ (lappend$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist_llist$)) (! (= (lconcat$a (lCons$c ?v0 ?v1)) (fun_app$b (lappend$b ?v0) (lconcat$a ?v1))) :pattern ((lCons$c ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$)) (! (= (lconcat$b (lCons$b ?v0 ?v1)) (fun_app$ (lappend$ ?v0) (lconcat$b ?v1))) :pattern ((lCons$b ?v0 ?v1)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (lconcat$ (lCons$a ?v0 ?v1)) (fun_app$a (lappend$a ?v0) (lconcat$ ?v1))) :pattern ((lCons$a ?v0 ?v1)))) :named a13))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (! (= (fun_app$b (lappend$b ?v0) lNil$b) ?v0) :pattern ((lappend$b ?v0)))) :named a14))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$ (lappend$ ?v0) lNil$a) ?v0) :pattern ((lappend$ ?v0)))) :named a15))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a (lappend$a ?v0) lNil$) ?v0) :pattern ((lappend$a ?v0)))) :named a16))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (! (= (fun_app$b (lappend$b lNil$b) ?v0) ?v0) :pattern ((fun_app$b (lappend$b lNil$b) ?v0)))) :named a17))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$ (lappend$ lNil$a) ?v0) ?v0) :pattern ((fun_app$ (lappend$ lNil$a) ?v0)))) :named a18))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a (lappend$a lNil$) ?v0) ?v0) :pattern ((fun_app$a (lappend$a lNil$) ?v0)))) :named a19))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist_llist$)) (= (fun_app$b (lappend$b (iterates$ ?v0 ?v1)) ?v2) (iterates$ ?v0 ?v1))) :named a20))
(assert (! (forall ((?v0 A_llist_a_llist_fun$) (?v1 A_llist$) (?v2 A_llist_llist$)) (= (fun_app$ (lappend$ (iterates$a ?v0 ?v1)) ?v2) (iterates$a ?v0 ?v1))) :named a21))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_llist$)) (= (fun_app$a (lappend$a (iterates$b ?v0 ?v1)) ?v2) (iterates$b ?v0 ?v1))) :named a22))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_llist$)) (! (= (fun_app$b (lappend$b (lCons$b ?v0 ?v1)) ?v2) (lCons$b ?v0 (fun_app$b (lappend$b ?v1) ?v2))) :pattern ((fun_app$b (lappend$b (lCons$b ?v0 ?v1)) ?v2)))) :named a23))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (! (= (fun_app$ (lappend$ (lCons$a ?v0 ?v1)) ?v2) (lCons$a ?v0 (fun_app$ (lappend$ ?v1) ?v2))) :pattern ((fun_app$ (lappend$ (lCons$a ?v0 ?v1)) ?v2)))) :named a24))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (fun_app$a (lappend$a (lCons$ ?v0 ?v1)) ?v2) (lCons$ ?v0 (fun_app$a (lappend$a ?v1) ?v2))) :pattern ((fun_app$a (lappend$a (lCons$ ?v0 ?v1)) ?v2)))) :named a25))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (= (not (lnull$ (fun_app$b (lappend$b ?v0) ?v1))) (or (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a26))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (not (lnull$a (fun_app$ (lappend$ ?v0) ?v1))) (or (not (lnull$a ?v0)) (not (lnull$a ?v1))))) :named a27))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$b (fun_app$a (lappend$a ?v0) ?v1))) (or (not (lnull$b ?v0)) (not (lnull$b ?v1))))) :named a28))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (= (lnull$ (fun_app$b (lappend$b ?v0) ?v1)) (and (lnull$ ?v0) (lnull$ ?v1)))) :named a29))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (lnull$a (fun_app$ (lappend$ ?v0) ?v1)) (and (lnull$a ?v0) (lnull$a ?v1)))) :named a30))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$b (fun_app$a (lappend$a ?v0) ?v1)) (and (lnull$b ?v0) (lnull$b ?v1)))) :named a31))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_llist$) (?v3 A_llist_llist_llist$)) (=> (llexord$ ?v0 ?v1 ?v2) (llexord$ ?v0 (fun_app$b (lappend$b ?v3) ?v1) (fun_app$b (lappend$b ?v3) ?v2)))) :named a32))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_llist$)) (=> (fun_app$c (llexord$a ?v0 ?v1) ?v2) (fun_app$c (llexord$a ?v0 (fun_app$ (lappend$ ?v3) ?v1)) (fun_app$ (lappend$ ?v3) ?v2)))) :named a33))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (fun_app$d (llexord$b ?v0 ?v1) ?v2) (fun_app$d (llexord$b ?v0 (fun_app$a (lappend$a ?v3) ?v1)) (fun_app$a (lappend$a ?v3) ?v2)))) :named a34))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_llist$)) (llexord$ ?v0 ?v1 (fun_app$b (lappend$b ?v1) ?v2))) :named a35))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (fun_app$c (llexord$a ?v0 ?v1) (fun_app$ (lappend$ ?v1) ?v2))) :named a36))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (fun_app$d (llexord$b ?v0 ?v1) (fun_app$a (lappend$a ?v1) ?v2))) :named a37))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (= (= lNil$b (fun_app$b (lappend$b ?v0) ?v1)) (and (= ?v0 lNil$b) (= ?v1 lNil$b)))) :named a38))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (= (= lNil$a (fun_app$ (lappend$ ?v0) ?v1)) (and (= ?v0 lNil$a) (= ?v1 lNil$a)))) :named a39))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= lNil$ (fun_app$a (lappend$a ?v0) ?v1)) (and (= ?v0 lNil$) (= ?v1 lNil$)))) :named a40))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a41))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_llist_llist$)) (= (= (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a42))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a43))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (fun_app$d (llexord$b ?v0 ?v1) ?v1)) :named a44))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_llist$)) (fun_app$c (llexord$a ?v0 ?v1) ?v1)) :named a45))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist_llist$)) (! (= (lfinite$a (lCons$b ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$b ?v0 ?v1)))) :named a46))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$b (lCons$ ?v0 ?v1)) (lfinite$b ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a47))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$)) (! (= (lfinite$ (lCons$a ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a48))
(check-sat)
;(get-unsat-core)
