; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 150
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort A_b_llist_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort C_llist_bool_fun$ 0)
(declare-sort B_llist_b_llist_fun$ 0)
(declare-sort B_llist_c_llist_fun$ 0)
(declare-sort C_llist_b_llist_fun$ 0)
(declare-sort C_llist_c_llist_fun$ 0)
(declare-sort A_b_llist_fun_bool_fun$ 0)
(declare-sort A_b_llist_fun_b_llist_fun$ 0)
(declare-sort A_b_llist_fun_c_llist_fun$ 0)
(declare-sort B_llist_a_b_llist_fun_fun$ 0)
(declare-sort C_llist_a_b_llist_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-sort C_llist_c_llist_bool_fun_fun$ 0)
(declare-sort A_b_llist_fun_a_b_llist_fun_fun$ 0)
(declare-sort A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ 0)
(declare-sort C_llist_b_llist_fun_c_llist_b_llist_fun_fun$ 0)
(declare-sort C_llist_b_llist_fun_c_llist_c_llist_fun_fun$ 0)
(declare-sort C_llist_c_llist_fun_c_llist_b_llist_fun_fun$ 0)
(declare-sort C_llist_c_llist_fun_c_llist_c_llist_fun_fun$ 0)
(declare-sort B_llist_b_llist_fun_b_llist_a_b_llist_fun_fun_fun$ 0)
(declare-sort B_llist_c_llist_fun_b_llist_a_b_llist_fun_fun_fun$ 0)
(declare-sort C_llist_a_b_llist_fun_fun_c_llist_b_llist_fun_fun$ 0)
(declare-sort C_llist_b_llist_fun_c_llist_a_b_llist_fun_fun_fun$ 0)
(declare-sort C_llist_c_llist_fun_c_llist_a_b_llist_fun_fun_fun$ 0)
(declare-sort A_b_llist_fun_b_llist_fun_a_b_llist_fun_b_llist_fun_fun$ 0)
(declare-sort A_b_llist_fun_b_llist_fun_a_b_llist_fun_c_llist_fun_fun$ 0)
(declare-sort A_b_llist_fun_c_llist_fun_a_b_llist_fun_b_llist_fun_fun$ 0)
(declare-sort A_b_llist_fun_c_llist_fun_a_b_llist_fun_c_llist_fun_fun$ 0)
(declare-sort B_llist_a_b_llist_fun_fun_b_llist_a_b_llist_fun_fun_fun$ 0)
(declare-sort C_llist_a_b_llist_fun_fun_c_llist_a_b_llist_fun_fun_fun$ 0)
(declare-sort A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_c_llist_fun_fun$ 0)
(declare-sort A_b_llist_fun_b_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ 0)
(declare-sort A_b_llist_fun_c_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ 0)
(declare-sort A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ 0)
(declare-codatatypes () ((B_llist$ (lNil$) (lCons$ (lhd$ B$) (ltl$ B_llist$)))
  (C_llist$ (lNil$a) (lCons$a (lhd$a C$) (ltl$a C_llist$)))))
(declare-fun a$ () A_b_llist_fun_c_llist_fun$)
(declare-fun uu$ () A_b_llist_fun_c_llist_fun$)
(declare-fun xs$ () C_llist$)
(declare-fun uua$ (C_llist_a_b_llist_fun_fun$) B_llist_c_llist_fun_b_llist_a_b_llist_fun_fun_fun$)
(declare-fun uub$ (A_b_llist_fun_a_b_llist_fun_fun$) B_llist_a_b_llist_fun_fun_b_llist_a_b_llist_fun_fun_fun$)
(declare-fun uuc$ (B_llist_a_b_llist_fun_fun$) B_llist_b_llist_fun_b_llist_a_b_llist_fun_fun_fun$)
(declare-fun uud$ (B_llist_a_b_llist_fun_fun$) C_llist_b_llist_fun_c_llist_a_b_llist_fun_fun_fun$)
(declare-fun uue$ (B_llist_a_b_llist_fun_fun$) A_b_llist_fun_b_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$)
(declare-fun uuf$ (C_llist_a_b_llist_fun_fun$) C_llist_c_llist_fun_c_llist_a_b_llist_fun_fun_fun$)
(declare-fun uug$ (A_b_llist_fun_a_b_llist_fun_fun$) C_llist_a_b_llist_fun_fun_c_llist_a_b_llist_fun_fun_fun$)
(declare-fun uuh$ (A_b_llist_fun_a_b_llist_fun_fun$) A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$)
(declare-fun uui$ (C_llist_a_b_llist_fun_fun$) A_b_llist_fun_c_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$)
(declare-fun uuj$ (C_llist_b_llist_fun$) A_b_llist_fun_c_llist_fun_a_b_llist_fun_b_llist_fun_fun$)
(declare-fun uuk$ (C_llist_c_llist_fun$) A_b_llist_fun_c_llist_fun_a_b_llist_fun_c_llist_fun_fun$)
(declare-fun uul$ (A_b_llist_fun_c_llist_fun$) A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_c_llist_fun_fun$)
(declare-fun uum$ (B_llist_b_llist_fun$) C_llist_b_llist_fun_c_llist_b_llist_fun_fun$)
(declare-fun uun$ (C_llist_b_llist_fun$) C_llist_c_llist_fun_c_llist_b_llist_fun_fun$)
(declare-fun uuo$ (B_llist_c_llist_fun$) C_llist_b_llist_fun_c_llist_c_llist_fun_fun$)
(declare-fun uup$ (C_llist_c_llist_fun$) C_llist_c_llist_fun_c_llist_c_llist_fun_fun$)
(declare-fun uuq$ (B_llist_b_llist_fun$) A_b_llist_fun_b_llist_fun_a_b_llist_fun_b_llist_fun_fun$)
(declare-fun uur$ (A_b_llist_fun_b_llist_fun$) C_llist_a_b_llist_fun_fun_c_llist_b_llist_fun_fun$)
(declare-fun uus$ (B_llist_c_llist_fun$) A_b_llist_fun_b_llist_fun_a_b_llist_fun_c_llist_fun_fun$)
(declare-fun uut$ (B_llist$) B_llist_b_llist_fun$)
(declare-fun uuu$ (C_llist$) B_llist_c_llist_fun$)
(declare-fun uuv$ (B_llist$) C_llist_b_llist_fun$)
(declare-fun uuw$ (B_llist$) A_b_llist_fun_b_llist_fun$)
(declare-fun uux$ (C_llist$) C_llist_c_llist_fun$)
(declare-fun uuy$ (C_llist$) A_b_llist_fun_c_llist_fun$)
(declare-fun fun_app$ (A_b_llist_fun_c_llist_fun$ A_b_llist_fun$) C_llist$)
(declare-fun fun_ord$ (B_llist_b_llist_bool_fun_fun$) A_b_llist_fun_a_b_llist_fun_bool_fun_fun$)
(declare-fun lappend$ (C_llist$) C_llist_c_llist_fun$)
(declare-fun lprefix$ () B_llist_b_llist_bool_fun_fun$)
(declare-fun fun_app$a (C_llist_c_llist_fun$ C_llist$) C_llist$)
(declare-fun fun_app$b (C_llist_c_llist_fun_c_llist_c_llist_fun_fun$ C_llist_c_llist_fun$) C_llist_c_llist_fun$)
(declare-fun fun_app$c (A_b_llist_fun_c_llist_fun_a_b_llist_fun_c_llist_fun_fun$ A_b_llist_fun_c_llist_fun$) A_b_llist_fun_c_llist_fun$)
(declare-fun fun_app$d (C_llist_b_llist_fun$ C_llist$) B_llist$)
(declare-fun fun_app$e (C_llist_c_llist_fun_c_llist_b_llist_fun_fun$ C_llist_c_llist_fun$) C_llist_b_llist_fun$)
(declare-fun fun_app$f (A_b_llist_fun_b_llist_fun$ A_b_llist_fun$) B_llist$)
(declare-fun fun_app$g (A_b_llist_fun_c_llist_fun_a_b_llist_fun_b_llist_fun_fun$ A_b_llist_fun_c_llist_fun$) A_b_llist_fun_b_llist_fun$)
(declare-fun fun_app$h (C_llist_a_b_llist_fun_fun$ C_llist$) A_b_llist_fun$)
(declare-fun fun_app$i (C_llist_c_llist_fun_c_llist_a_b_llist_fun_fun_fun$ C_llist_c_llist_fun$) C_llist_a_b_llist_fun_fun$)
(declare-fun fun_app$j (B_llist_a_b_llist_fun_fun$ B_llist$) A_b_llist_fun$)
(declare-fun fun_app$k (B_llist_c_llist_fun_b_llist_a_b_llist_fun_fun_fun$ B_llist_c_llist_fun$) B_llist_a_b_llist_fun_fun$)
(declare-fun fun_app$l (B_llist_c_llist_fun$ B_llist$) C_llist$)
(declare-fun fun_app$m (A_b_llist_fun_a_b_llist_fun_fun$ A_b_llist_fun$) A_b_llist_fun$)
(declare-fun fun_app$n (A_b_llist_fun_c_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ A_b_llist_fun_c_llist_fun$) A_b_llist_fun_a_b_llist_fun_fun$)
(declare-fun fun_app$o (C_llist_b_llist_fun_c_llist_c_llist_fun_fun$ C_llist_b_llist_fun$) C_llist_c_llist_fun$)
(declare-fun fun_app$p (A_b_llist_fun_b_llist_fun_a_b_llist_fun_c_llist_fun_fun$ A_b_llist_fun_b_llist_fun$) A_b_llist_fun_c_llist_fun$)
(declare-fun fun_app$q (C_llist_b_llist_fun_c_llist_b_llist_fun_fun$ C_llist_b_llist_fun$) C_llist_b_llist_fun$)
(declare-fun fun_app$r (B_llist_b_llist_fun$ B_llist$) B_llist$)
(declare-fun fun_app$s (A_b_llist_fun_b_llist_fun_a_b_llist_fun_b_llist_fun_fun$ A_b_llist_fun_b_llist_fun$) A_b_llist_fun_b_llist_fun$)
(declare-fun fun_app$t (C_llist_b_llist_fun_c_llist_a_b_llist_fun_fun_fun$ C_llist_b_llist_fun$) C_llist_a_b_llist_fun_fun$)
(declare-fun fun_app$u (B_llist_b_llist_fun_b_llist_a_b_llist_fun_fun_fun$ B_llist_b_llist_fun$) B_llist_a_b_llist_fun_fun$)
(declare-fun fun_app$v (A_b_llist_fun_b_llist_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ A_b_llist_fun_b_llist_fun$) A_b_llist_fun_a_b_llist_fun_fun$)
(declare-fun fun_app$w (A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_c_llist_fun_fun$ A_b_llist_fun_a_b_llist_fun_fun$) A_b_llist_fun_c_llist_fun$)
(declare-fun fun_app$x (C_llist_a_b_llist_fun_fun_c_llist_b_llist_fun_fun$ C_llist_a_b_llist_fun_fun$) C_llist_b_llist_fun$)
(declare-fun fun_app$y (C_llist_a_b_llist_fun_fun_c_llist_a_b_llist_fun_fun_fun$ C_llist_a_b_llist_fun_fun$) C_llist_a_b_llist_fun_fun$)
(declare-fun fun_app$z (B_llist_a_b_llist_fun_fun_b_llist_a_b_llist_fun_fun_fun$ B_llist_a_b_llist_fun_fun$) B_llist_a_b_llist_fun_fun$)
(declare-fun lappend$a (B_llist$) B_llist_b_llist_fun$)
(declare-fun lprefix$a () C_llist_c_llist_bool_fun_fun$)
(declare-fun monotone$ (A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ A_b_llist_fun_c_llist_fun$) Bool)
(declare-fun fun_app$aa (A_b_llist_fun_a_b_llist_fun_fun_a_b_llist_fun_a_b_llist_fun_fun_fun$ A_b_llist_fun_a_b_llist_fun_fun$) A_b_llist_fun_a_b_llist_fun_fun$)
(declare-fun fun_app$ab (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun fun_app$ac (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun fun_app$ad (C_llist_bool_fun$ C_llist$) Bool)
(declare-fun fun_app$ae (C_llist_c_llist_bool_fun_fun$ C_llist$) C_llist_bool_fun$)
(declare-fun fun_app$af (A_b_llist_fun_bool_fun$ A_b_llist_fun$) Bool)
(declare-fun fun_app$ag (A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ A_b_llist_fun$) A_b_llist_fun_bool_fun$)
(declare-fun monotone$a (A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ A_b_llist_fun_a_b_llist_fun_fun$) Bool)
(declare-fun monotone$b (A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ A_b_llist_fun_b_llist_fun$) Bool)
(declare-fun monotone$c (C_llist_c_llist_bool_fun_fun$ A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ C_llist_a_b_llist_fun_fun$) Bool)
(declare-fun monotone$d (B_llist_b_llist_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ B_llist_c_llist_fun$) Bool)
(declare-fun monotone$e (B_llist_b_llist_bool_fun_fun$ A_b_llist_fun_a_b_llist_fun_bool_fun_fun$ B_llist_a_b_llist_fun_fun$) Bool)
(declare-fun monotone$f (B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_fun$) Bool)
(declare-fun monotone$g (C_llist_c_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ C_llist_b_llist_fun$) Bool)
(declare-fun monotone$h (C_llist_c_llist_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ C_llist_c_llist_fun$) Bool)
(assert (! (forall ((?v0 A_b_llist_fun$)) (! (= (fun_app$ uu$ ?v0) (fun_app$a (lappend$ xs$) (fun_app$ a$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 C_llist_c_llist_fun$) (?v1 C_llist_c_llist_fun$) (?v2 C_llist$)) (! (= (fun_app$a (fun_app$b (uup$ ?v0) ?v1) ?v2) (fun_app$a ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$a (fun_app$b (uup$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 C_llist_c_llist_fun$) (?v1 A_b_llist_fun_c_llist_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$ (fun_app$c (uuk$ ?v0) ?v1) ?v2) (fun_app$a ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$c (uuk$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 C_llist_b_llist_fun$) (?v1 C_llist_c_llist_fun$) (?v2 C_llist$)) (! (= (fun_app$d (fun_app$e (uun$ ?v0) ?v1) ?v2) (fun_app$d ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$d (fun_app$e (uun$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 C_llist_b_llist_fun$) (?v1 A_b_llist_fun_c_llist_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$f (fun_app$g (uuj$ ?v0) ?v1) ?v2) (fun_app$d ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$f (fun_app$g (uuj$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 C_llist_a_b_llist_fun_fun$) (?v1 C_llist_c_llist_fun$) (?v2 C_llist$)) (! (= (fun_app$h (fun_app$i (uuf$ ?v0) ?v1) ?v2) (fun_app$h ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$h (fun_app$i (uuf$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 C_llist_a_b_llist_fun_fun$) (?v1 B_llist_c_llist_fun$) (?v2 B_llist$)) (! (= (fun_app$j (fun_app$k (uua$ ?v0) ?v1) ?v2) (fun_app$h ?v0 (fun_app$l ?v1 ?v2))) :pattern ((fun_app$j (fun_app$k (uua$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 C_llist_a_b_llist_fun_fun$) (?v1 A_b_llist_fun_c_llist_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$m (fun_app$n (uui$ ?v0) ?v1) ?v2) (fun_app$h ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$m (fun_app$n (uui$ ?v0) ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 B_llist_c_llist_fun$) (?v1 C_llist_b_llist_fun$) (?v2 C_llist$)) (! (= (fun_app$a (fun_app$o (uuo$ ?v0) ?v1) ?v2) (fun_app$l ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$a (fun_app$o (uuo$ ?v0) ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 B_llist_c_llist_fun$) (?v1 A_b_llist_fun_b_llist_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$ (fun_app$p (uus$ ?v0) ?v1) ?v2) (fun_app$l ?v0 (fun_app$f ?v1 ?v2))) :pattern ((fun_app$ (fun_app$p (uus$ ?v0) ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 B_llist_b_llist_fun$) (?v1 C_llist_b_llist_fun$) (?v2 C_llist$)) (! (= (fun_app$d (fun_app$q (uum$ ?v0) ?v1) ?v2) (fun_app$r ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$d (fun_app$q (uum$ ?v0) ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 B_llist_b_llist_fun$) (?v1 A_b_llist_fun_b_llist_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$f (fun_app$s (uuq$ ?v0) ?v1) ?v2) (fun_app$r ?v0 (fun_app$f ?v1 ?v2))) :pattern ((fun_app$f (fun_app$s (uuq$ ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 B_llist_a_b_llist_fun_fun$) (?v1 C_llist_b_llist_fun$) (?v2 C_llist$)) (! (= (fun_app$h (fun_app$t (uud$ ?v0) ?v1) ?v2) (fun_app$j ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$h (fun_app$t (uud$ ?v0) ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 B_llist_a_b_llist_fun_fun$) (?v1 B_llist_b_llist_fun$) (?v2 B_llist$)) (! (= (fun_app$j (fun_app$u (uuc$ ?v0) ?v1) ?v2) (fun_app$j ?v0 (fun_app$r ?v1 ?v2))) :pattern ((fun_app$j (fun_app$u (uuc$ ?v0) ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 B_llist_a_b_llist_fun_fun$) (?v1 A_b_llist_fun_b_llist_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$m (fun_app$v (uue$ ?v0) ?v1) ?v2) (fun_app$j ?v0 (fun_app$f ?v1 ?v2))) :pattern ((fun_app$m (fun_app$v (uue$ ?v0) ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 A_b_llist_fun_c_llist_fun$) (?v1 A_b_llist_fun_a_b_llist_fun_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$ (fun_app$w (uul$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$m ?v1 ?v2))) :pattern ((fun_app$ (fun_app$w (uul$ ?v0) ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 A_b_llist_fun_b_llist_fun$) (?v1 C_llist_a_b_llist_fun_fun$) (?v2 C_llist$)) (! (= (fun_app$d (fun_app$x (uur$ ?v0) ?v1) ?v2) (fun_app$f ?v0 (fun_app$h ?v1 ?v2))) :pattern ((fun_app$d (fun_app$x (uur$ ?v0) ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_fun$) (?v1 C_llist_a_b_llist_fun_fun$) (?v2 C_llist$)) (! (= (fun_app$h (fun_app$y (uug$ ?v0) ?v1) ?v2) (fun_app$m ?v0 (fun_app$h ?v1 ?v2))) :pattern ((fun_app$h (fun_app$y (uug$ ?v0) ?v1) ?v2)))) :named a17))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_fun$) (?v1 B_llist_a_b_llist_fun_fun$) (?v2 B_llist$)) (! (= (fun_app$j (fun_app$z (uub$ ?v0) ?v1) ?v2) (fun_app$m ?v0 (fun_app$j ?v1 ?v2))) :pattern ((fun_app$j (fun_app$z (uub$ ?v0) ?v1) ?v2)))) :named a18))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_fun$) (?v1 A_b_llist_fun_a_b_llist_fun_fun$) (?v2 A_b_llist_fun$)) (! (= (fun_app$m (fun_app$aa (uuh$ ?v0) ?v1) ?v2) (fun_app$m ?v0 (fun_app$m ?v1 ?v2))) :pattern ((fun_app$m (fun_app$aa (uuh$ ?v0) ?v1) ?v2)))) :named a19))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$)) (! (= (fun_app$a (uux$ ?v0) ?v1) ?v0) :pattern ((fun_app$a (uux$ ?v0) ?v1)))) :named a20))
(assert (! (forall ((?v0 C_llist$) (?v1 B_llist$)) (! (= (fun_app$l (uuu$ ?v0) ?v1) ?v0) :pattern ((fun_app$l (uuu$ ?v0) ?v1)))) :named a21))
(assert (! (forall ((?v0 C_llist$) (?v1 A_b_llist_fun$)) (! (= (fun_app$ (uuy$ ?v0) ?v1) ?v0) :pattern ((fun_app$ (uuy$ ?v0) ?v1)))) :named a22))
(assert (! (forall ((?v0 B_llist$) (?v1 C_llist$)) (! (= (fun_app$d (uuv$ ?v0) ?v1) ?v0) :pattern ((fun_app$d (uuv$ ?v0) ?v1)))) :named a23))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (= (fun_app$r (uut$ ?v0) ?v1) ?v0) :pattern ((fun_app$r (uut$ ?v0) ?v1)))) :named a24))
(assert (! (forall ((?v0 B_llist$) (?v1 A_b_llist_fun$)) (! (= (fun_app$f (uuw$ ?v0) ?v1) ?v0) :pattern ((fun_app$f (uuw$ ?v0) ?v1)))) :named a25))
(assert (! (not (monotone$ (fun_ord$ lprefix$) lprefix$a uu$)) :named a26))
(assert (! (monotone$ (fun_ord$ lprefix$) lprefix$a a$) :named a27))
(assert (! (forall ((?v0 B_llist$)) (fun_app$ab (fun_app$ac lprefix$ ?v0) ?v0)) :named a28))
(assert (! (forall ((?v0 C_llist$)) (fun_app$ad (fun_app$ae lprefix$a ?v0) ?v0)) :named a29))
(assert (! (forall ((?v0 B_llist$)) (fun_app$ab (fun_app$ac lprefix$ ?v0) ?v0)) :named a30))
(assert (! (forall ((?v0 C_llist$)) (fun_app$ad (fun_app$ae lprefix$a ?v0) ?v0)) :named a31))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (= (fun_app$r (lappend$a (fun_app$r (lappend$a ?v0) ?v1)) ?v2) (fun_app$r (lappend$a ?v0) (fun_app$r (lappend$a ?v1) ?v2)))) :named a32))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$) (?v2 C_llist$)) (= (fun_app$a (lappend$ (fun_app$a (lappend$ ?v0) ?v1)) ?v2) (fun_app$a (lappend$ ?v0) (fun_app$a (lappend$ ?v1) ?v2)))) :named a33))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_fun$) (?v1 A_b_llist_fun$) (?v2 A_b_llist_fun$) (?v3 A_b_llist_fun_a_b_llist_fun_fun$) (?v4 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$)) (=> (and (forall ((?v5 A_b_llist_fun$)) (= (fun_app$m ?v0 ?v5) (ite (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v5) ?v1) ?v2 (fun_app$m ?v3 ?v5)))) (and (forall ((?v5 A_b_llist_fun$) (?v6 A_b_llist_fun$)) (=> (and (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v5) ?v6) (not (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v5) ?v1))) (fun_app$af (fun_app$ag ?v4 (fun_app$m ?v3 ?v5)) (fun_app$m ?v3 ?v6)))) (and (forall ((?v5 A_b_llist_fun$)) (=> (not (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v5) ?v1)) (fun_app$af (fun_app$ag ?v4 ?v2) (fun_app$m ?v3 ?v5)))) (fun_app$af (fun_app$ag ?v4 ?v2) ?v2)))) (monotone$a (fun_ord$ lprefix$) ?v4 ?v0))) :named a34))
(assert (! (forall ((?v0 A_b_llist_fun_b_llist_fun$) (?v1 A_b_llist_fun$) (?v2 B_llist$) (?v3 A_b_llist_fun_b_llist_fun$) (?v4 B_llist_b_llist_bool_fun_fun$)) (=> (and (forall ((?v5 A_b_llist_fun$)) (= (fun_app$f ?v0 ?v5) (ite (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v5) ?v1) ?v2 (fun_app$f ?v3 ?v5)))) (and (forall ((?v5 A_b_llist_fun$) (?v6 A_b_llist_fun$)) (=> (and (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v5) ?v6) (not (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v5) ?v1))) (fun_app$ab (fun_app$ac ?v4 (fun_app$f ?v3 ?v5)) (fun_app$f ?v3 ?v6)))) (and (forall ((?v5 A_b_llist_fun$)) (=> (not (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v5) ?v1)) (fun_app$ab (fun_app$ac ?v4 ?v2) (fun_app$f ?v3 ?v5)))) (fun_app$ab (fun_app$ac ?v4 ?v2) ?v2)))) (monotone$b (fun_ord$ lprefix$) ?v4 ?v0))) :named a35))
(assert (! (forall ((?v0 A_b_llist_fun_c_llist_fun$) (?v1 A_b_llist_fun$) (?v2 C_llist$) (?v3 A_b_llist_fun_c_llist_fun$) (?v4 C_llist_c_llist_bool_fun_fun$)) (=> (and (forall ((?v5 A_b_llist_fun$)) (= (fun_app$ ?v0 ?v5) (ite (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v5) ?v1) ?v2 (fun_app$ ?v3 ?v5)))) (and (forall ((?v5 A_b_llist_fun$) (?v6 A_b_llist_fun$)) (=> (and (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v5) ?v6) (not (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v5) ?v1))) (fun_app$ad (fun_app$ae ?v4 (fun_app$ ?v3 ?v5)) (fun_app$ ?v3 ?v6)))) (and (forall ((?v5 A_b_llist_fun$)) (=> (not (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v5) ?v1)) (fun_app$ad (fun_app$ae ?v4 ?v2) (fun_app$ ?v3 ?v5)))) (fun_app$ad (fun_app$ae ?v4 ?v2) ?v2)))) (monotone$ (fun_ord$ lprefix$) ?v4 ?v0))) :named a36))
(assert (! (forall ((?v0 A_b_llist_fun$) (?v1 A_b_llist_fun$) (?v2 A_b_llist_fun$)) (=> (and (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v0) ?v1) (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v1) ?v2)) (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v0) ?v2))) :named a37))
(assert (! (forall ((?v0 A_b_llist_fun$) (?v1 A_b_llist_fun$)) (=> (and (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v0) ?v1) (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v1) ?v0)) (= ?v0 ?v1))) :named a38))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist_a_b_llist_fun_fun$) (?v2 B_llist_b_llist_bool_fun_fun$) (?v3 B_llist_c_llist_fun$)) (=> (and (monotone$c ?v0 (fun_ord$ lprefix$) ?v1) (monotone$d ?v2 ?v0 ?v3)) (monotone$e ?v2 (fun_ord$ lprefix$) (fun_app$k (uua$ ?v1) ?v3)))) :named a39))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_a_b_llist_fun_fun$) (?v2 B_llist_b_llist_bool_fun_fun$) (?v3 B_llist_a_b_llist_fun_fun$)) (=> (and (monotone$a ?v0 (fun_ord$ lprefix$) ?v1) (monotone$e ?v2 ?v0 ?v3)) (monotone$e ?v2 (fun_ord$ lprefix$) (fun_app$z (uub$ ?v1) ?v3)))) :named a40))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_a_b_llist_fun_fun$) (?v2 B_llist_b_llist_bool_fun_fun$) (?v3 B_llist_b_llist_fun$)) (=> (and (monotone$e ?v0 (fun_ord$ lprefix$) ?v1) (monotone$f ?v2 ?v0 ?v3)) (monotone$e ?v2 (fun_ord$ lprefix$) (fun_app$u (uuc$ ?v1) ?v3)))) :named a41))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_a_b_llist_fun_fun$) (?v2 C_llist_c_llist_bool_fun_fun$) (?v3 C_llist_b_llist_fun$)) (=> (and (monotone$e ?v0 (fun_ord$ lprefix$) ?v1) (monotone$g ?v2 ?v0 ?v3)) (monotone$c ?v2 (fun_ord$ lprefix$) (fun_app$t (uud$ ?v1) ?v3)))) :named a42))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_a_b_llist_fun_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_b_llist_fun$)) (=> (and (monotone$e ?v0 (fun_ord$ lprefix$) ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$a ?v2 (fun_ord$ lprefix$) (fun_app$v (uue$ ?v1) ?v3)))) :named a43))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist_a_b_llist_fun_fun$) (?v2 C_llist_c_llist_bool_fun_fun$) (?v3 C_llist_c_llist_fun$)) (=> (and (monotone$c ?v0 (fun_ord$ lprefix$) ?v1) (monotone$h ?v2 ?v0 ?v3)) (monotone$c ?v2 (fun_ord$ lprefix$) (fun_app$i (uuf$ ?v1) ?v3)))) :named a44))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_a_b_llist_fun_fun$) (?v2 C_llist_c_llist_bool_fun_fun$) (?v3 C_llist_a_b_llist_fun_fun$)) (=> (and (monotone$a ?v0 (fun_ord$ lprefix$) ?v1) (monotone$c ?v2 ?v0 ?v3)) (monotone$c ?v2 (fun_ord$ lprefix$) (fun_app$y (uug$ ?v1) ?v3)))) :named a45))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_a_b_llist_fun_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_a_b_llist_fun_fun$)) (=> (and (monotone$a ?v0 (fun_ord$ lprefix$) ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$a ?v2 (fun_ord$ lprefix$) (fun_app$aa (uuh$ ?v1) ?v3)))) :named a46))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist_a_b_llist_fun_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_c_llist_fun$)) (=> (and (monotone$c ?v0 (fun_ord$ lprefix$) ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$a ?v2 (fun_ord$ lprefix$) (fun_app$n (uui$ ?v1) ?v3)))) :named a47))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist_b_llist_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_c_llist_fun$)) (=> (and (monotone$g ?v0 lprefix$ ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$b ?v2 lprefix$ (fun_app$g (uuj$ ?v1) ?v3)))) :named a48))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist_c_llist_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_c_llist_fun$)) (=> (and (monotone$h ?v0 lprefix$a ?v1) (monotone$ ?v2 ?v0 ?v3)) (monotone$ ?v2 lprefix$a (fun_app$c (uuk$ ?v1) ?v3)))) :named a49))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_c_llist_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_a_b_llist_fun_fun$)) (=> (and (monotone$ ?v0 lprefix$a ?v1) (monotone$a ?v2 ?v0 ?v3)) (monotone$ ?v2 lprefix$a (fun_app$w (uul$ ?v1) ?v3)))) :named a50))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_b_llist_fun$) (?v2 C_llist_c_llist_bool_fun_fun$) (?v3 C_llist_b_llist_fun$)) (=> (and (monotone$f ?v0 lprefix$ ?v1) (monotone$g ?v2 ?v0 ?v3)) (monotone$g ?v2 lprefix$ (fun_app$q (uum$ ?v1) ?v3)))) :named a51))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist_b_llist_fun$) (?v2 C_llist_c_llist_bool_fun_fun$) (?v3 C_llist_c_llist_fun$)) (=> (and (monotone$g ?v0 lprefix$ ?v1) (monotone$h ?v2 ?v0 ?v3)) (monotone$g ?v2 lprefix$ (fun_app$e (uun$ ?v1) ?v3)))) :named a52))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_c_llist_fun$) (?v2 C_llist_c_llist_bool_fun_fun$) (?v3 C_llist_b_llist_fun$)) (=> (and (monotone$d ?v0 lprefix$a ?v1) (monotone$g ?v2 ?v0 ?v3)) (monotone$h ?v2 lprefix$a (fun_app$o (uuo$ ?v1) ?v3)))) :named a53))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist_c_llist_fun$) (?v2 C_llist_c_llist_bool_fun_fun$) (?v3 C_llist_c_llist_fun$)) (=> (and (monotone$h ?v0 lprefix$a ?v1) (monotone$h ?v2 ?v0 ?v3)) (monotone$h ?v2 lprefix$a (fun_app$b (uup$ ?v1) ?v3)))) :named a54))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_b_llist_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_b_llist_fun$)) (=> (and (monotone$f ?v0 lprefix$ ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$b ?v2 lprefix$ (fun_app$s (uuq$ ?v1) ?v3)))) :named a55))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 A_b_llist_fun_b_llist_fun$) (?v2 C_llist_c_llist_bool_fun_fun$) (?v3 C_llist_a_b_llist_fun_fun$)) (=> (and (monotone$b ?v0 lprefix$ ?v1) (monotone$c ?v2 ?v0 ?v3)) (monotone$g ?v2 lprefix$ (fun_app$x (uur$ ?v1) ?v3)))) :named a56))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_c_llist_fun$) (?v2 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v3 A_b_llist_fun_b_llist_fun$)) (=> (and (monotone$d ?v0 lprefix$a ?v1) (monotone$b ?v2 ?v0 ?v3)) (monotone$ ?v2 lprefix$a (fun_app$p (uus$ ?v1) ?v3)))) :named a57))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (fun_app$ab (fun_app$ac lprefix$ ?v0) ?v1) (fun_app$ab (fun_app$ac lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a58))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$)) (=> (and (fun_app$ad (fun_app$ae lprefix$a ?v0) ?v1) (fun_app$ad (fun_app$ae lprefix$a ?v1) ?v0)) (= ?v0 ?v1))) :named a59))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (and (fun_app$ab (fun_app$ac lprefix$ ?v0) ?v1) (fun_app$ab (fun_app$ac lprefix$ ?v1) ?v0)) (= ?v0 ?v1))) :named a60))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$)) (=> (and (fun_app$ad (fun_app$ae lprefix$a ?v0) ?v1) (fun_app$ad (fun_app$ae lprefix$a ?v1) ?v0)) (= ?v0 ?v1))) :named a61))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$ab (fun_app$ac lprefix$ ?v0) ?v1) (fun_app$ab (fun_app$ac lprefix$ ?v2) ?v1)) (or (fun_app$ab (fun_app$ac lprefix$ ?v0) ?v2) (fun_app$ab (fun_app$ac lprefix$ ?v2) ?v0)))) :named a62))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$) (?v2 C_llist$)) (=> (and (fun_app$ad (fun_app$ae lprefix$a ?v0) ?v1) (fun_app$ad (fun_app$ae lprefix$a ?v2) ?v1)) (or (fun_app$ad (fun_app$ae lprefix$a ?v0) ?v2) (fun_app$ad (fun_app$ae lprefix$a ?v2) ?v0)))) :named a63))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$ab (fun_app$ac lprefix$ ?v0) ?v1) (fun_app$ab (fun_app$ac lprefix$ ?v1) ?v2)) (fun_app$ab (fun_app$ac lprefix$ ?v0) ?v2))) :named a64))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$) (?v2 C_llist$)) (=> (and (fun_app$ad (fun_app$ae lprefix$a ?v0) ?v1) (fun_app$ad (fun_app$ae lprefix$a ?v1) ?v2)) (fun_app$ad (fun_app$ae lprefix$a ?v0) ?v2))) :named a65))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (and (fun_app$ab (fun_app$ac lprefix$ ?v0) ?v1) (fun_app$ab (fun_app$ac lprefix$ ?v1) ?v2)) (fun_app$ab (fun_app$ac lprefix$ ?v0) ?v2))) :named a66))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$) (?v2 C_llist$)) (=> (and (fun_app$ad (fun_app$ae lprefix$a ?v0) ?v1) (fun_app$ad (fun_app$ae lprefix$a ?v1) ?v2)) (fun_app$ad (fun_app$ae lprefix$a ?v0) ?v2))) :named a67))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_llist$)) (=> (fun_app$ab (fun_app$ac lprefix$ ?v0) ?v1) (fun_app$ab (fun_app$ac lprefix$ (fun_app$r (lappend$a ?v2) ?v0)) (fun_app$r (lappend$a ?v2) ?v1)))) :named a68))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$) (?v2 C_llist$)) (=> (fun_app$ad (fun_app$ae lprefix$a ?v0) ?v1) (fun_app$ad (fun_app$ae lprefix$a (fun_app$a (lappend$ ?v2) ?v0)) (fun_app$a (lappend$ ?v2) ?v1)))) :named a69))
(assert (! (forall ((?v0 A_b_llist_fun$)) (fun_app$af (fun_app$ag (fun_ord$ lprefix$) ?v0) ?v0)) :named a70))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist$)) (monotone$f ?v0 lprefix$ (uut$ ?v1))) :named a71))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 C_llist$)) (monotone$d ?v0 lprefix$a (uuu$ ?v1))) :named a72))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 B_llist$)) (monotone$g ?v0 lprefix$ (uuv$ ?v1))) :named a73))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 B_llist$)) (monotone$b ?v0 lprefix$ (uuw$ ?v1))) :named a74))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$) (?v1 C_llist$)) (monotone$h ?v0 lprefix$a (uux$ ?v1))) :named a75))
(assert (! (forall ((?v0 A_b_llist_fun_a_b_llist_fun_bool_fun_fun$) (?v1 C_llist$)) (monotone$ ?v0 lprefix$a (uuy$ ?v1))) :named a76))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (fun_app$ab (fun_app$ac lprefix$ ?v0) (fun_app$r (lappend$a ?v0) ?v1))) :named a77))
(assert (! (forall ((?v0 C_llist$) (?v1 C_llist$)) (fun_app$ad (fun_app$ae lprefix$a ?v0) (fun_app$a (lappend$ ?v0) ?v1))) :named a78))
(check-sat)
;(get-unsat-core)
