; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 630
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_llist_list$ (nil$) (cons$ (hd$ A_llist$) (tl$ A_llist_list$)))))
(declare-codatatypes () ((A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-datatypes () ((A_list$ (nil$a) (cons$a (hd$a A$) (tl$a A_list$)))))
(declare-fun m$ () Nat$)
(declare-fun x$ () A$)
(declare-fun xs$ () A_llist$)
(declare-fun xs$a () A_llist$)
(declare-fun xss$ () A_llist_list$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$) Enat_bool_fun$)
(declare-fun lnth$ (A_llist$ Nat$) A$)
(declare-fun size$ (A_llist_list$) Nat$)
(declare-fun xss$a () A_llist_llist$)
(declare-fun xssa$ () A_llist_llist$)
(declare-fun lnth$a (A_llist_llist$ Nat$) A_llist$)
(declare-fun size$a (A_list$) Nat$)
(declare-fun ldropn$ (Nat$ A_llist_llist$) A_llist_llist$)
(declare-fun fun_app$ (Enat_bool_fun$ Enat$) Bool)
(declare-fun lappend$ (A_llist_llist$ A_llist_llist$) A_llist_llist$)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun ldropn$a (Nat$ A_llist$) A_llist$)
(declare-fun llength$ (A_llist_llist$) Enat$)
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun lappend$a (A_llist$ A_llist$) A_llist$)
(declare-fun llength$a (A_llist$) Enat$)
(declare-fun llist_of$ (A_llist_list$) A_llist_llist$)
(declare-fun llist_of$a (A_list$) A_llist$)
(declare-fun pred_llist$ (A_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun pred_llist$a (A_bool_fun$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$ (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$a (A_llist_llist$ A_llist_llist$) Bool)
(assert (! (not (fun_app$ (less$ (enat$ (size$ xss$))) (llength$ (lappend$ (llist_of$ xss$) (lCons$a (lCons$ x$ xs$) xss$a))))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a2))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$a ?v0) (llist_of$a ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 A_llist_list$) (?v1 A_llist_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (! (= (lappend$ (lCons$a ?v0 ?v1) ?v2) (lCons$a ?v0 (lappend$ ?v1 ?v2))) :pattern ((lappend$ (lCons$a ?v0 ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (lappend$a (lCons$ ?v0 ?v1) ?v2) (lCons$ ?v0 (lappend$a ?v1 ?v2))) :pattern ((lappend$a (lCons$ ?v0 ?v1) ?v2)))) :named a6))
(assert (! (fun_app$ (less$ (enat$ m$)) (llength$ (lCons$a xs$ xss$a))) :named a7))
(assert (! (forall ((?v0 A_list$)) (= (llength$a (llist_of$a ?v0)) (enat$ (size$a ?v0)))) :named a8))
(assert (! (forall ((?v0 A_llist_list$)) (= (llength$ (llist_of$ ?v0)) (enat$ (size$ ?v0)))) :named a9))
(assert (! (= xssa$ (lappend$ (llist_of$ xss$) (lCons$a (lCons$ x$ xs$) xss$a))) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_llist$)) (= (lappend$a (lappend$a ?v0 ?v1) ?v2) (lappend$a ?v0 (lappend$a ?v1 ?v2)))) :named a11))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (= (lappend$ (lappend$ ?v0 ?v1) ?v2) (lappend$ ?v0 (lappend$ ?v1 ?v2)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a14))
(assert (! (= xs$a (lconcat$ (lCons$a xs$ xss$a))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist_llist$) (?v2 A_llist$) (?v3 A_llist_llist$)) (=> (= (ldropn$ ?v0 ?v1) (lCons$a ?v2 ?v3)) (fun_app$ (less$ (enat$ ?v0)) (llength$ ?v1)))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (=> (= (ldropn$a ?v0 ?v1) (lCons$ ?v2 ?v3)) (fun_app$ (less$ (enat$ ?v0)) (llength$a ?v1)))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$ (less$ (enat$ ?v0)) (llength$a ?v1)) (= (lnth$ (lappend$a ?v1 ?v2) ?v0) (lnth$ ?v1 ?v0)))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (=> (fun_app$ (less$ (enat$ ?v0)) (llength$ ?v1)) (= (lnth$a (lappend$ ?v1 ?v2) ?v0) (lnth$a ?v1 ?v0)))) :named a19))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$) (?v2 A_llist_llist$)) (! (= (pred_llist$ ?v0 (lCons$a ?v1 ?v2)) (and (fun_app$a ?v0 ?v1) (pred_llist$ ?v0 ?v2))) :pattern ((pred_llist$ ?v0 (lCons$a ?v1 ?v2))))) :named a20))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$a (pred_llist$a ?v0) (lCons$ ?v1 ?v2)) (and (fun_app$b ?v0 ?v1) (fun_app$a (pred_llist$a ?v0) ?v2))) :pattern ((fun_app$a (pred_llist$a ?v0) (lCons$ ?v1 ?v2))))) :named a21))
(assert (! (= (lconcat$ xssa$) (lCons$ x$ xs$a)) :named a22))
(assert (! (forall ((?v0 Enat_bool_fun$) (?v1 Enat$)) (=> (forall ((?v2 Enat$)) (=> (forall ((?v3 Enat$)) (=> (fun_app$ (less$ ?v3) ?v2) (fun_app$ ?v0 ?v3))) (fun_app$ ?v0 ?v2))) (fun_app$ ?v0 ?v1))) :named a23))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (fun_app$a (lstrict_prefix$ ?v0) ?v1) (fun_app$ (less$ (llength$a ?v0)) (llength$a ?v1)))) :named a24))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (lstrict_prefix$a ?v0 ?v1) (fun_app$ (less$ (llength$ ?v0)) (llength$ ?v1)))) :named a25))
(check-sat)
;(get-unsat-core)
