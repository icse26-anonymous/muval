; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 643
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))
  (Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun xs$ () A_list$)
(declare-fun last$ (A_list$) A$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun llast$ (A_llist$) A$)
(declare-fun ltake$ (Enat$ A_llist$) A_llist$)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun sorted$ (A_list$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun list_of$ (A_llist$) A_list$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun lsorted$ (A_llist$) Bool)
(declare-fun remdups$ (A_list$) A_list$)
(declare-fun remove1$ (A$ A_list$) A_list$)
(declare-fun llist_of$ (A_list$) A_llist$)
(assert (! (not (= (lsorted$ (llist_of$ xs$)) (sorted$ xs$))) :named a0))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a1))
(assert (! (forall ((?v0 A_list$)) (= (list_of$ (llist_of$ ?v0)) ?v0)) :named a2))
(assert (! (= (lsorted$ lNil$) true) :named a3))
(assert (! (forall ((?v0 A_llist$) (?v1 Nat$)) (=> (lsorted$ ?v0) (lsorted$ (ldropn$ ?v1 ?v0)))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 Enat$)) (=> (lsorted$ ?v0) (lsorted$ (ldrop$ ?v1 ?v0)))) :named a5))
(assert (! (lsorted$ lNil$) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (lprefix$ ?v0 ?v1) (lsorted$ ?v1)) (lsorted$ ?v0))) :named a7))
(assert (! (forall ((?v0 A_llist$)) (=> (lsorted$ ?v0) (lsorted$ (ltl$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 Enat$)) (=> (lsorted$ ?v0) (lsorted$ (ltake$ ?v1 ?v0)))) :named a9))
(assert (! (forall ((?v0 A_list$)) (lfinite$ (llist_of$ ?v0))) :named a10))
(assert (! (forall ((?v0 A_list$)) (= (llast$ (llist_of$ ?v0)) (last$ ?v0))) :named a11))
(assert (! (forall ((?v0 A_list$) (?v1 A$)) (=> (sorted$ ?v0) (sorted$ (remove1$ ?v1 ?v0)))) :named a12))
(assert (! (forall ((?v0 A_list$)) (=> (sorted$ ?v0) (sorted$ (remdups$ ?v0)))) :named a13))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a14))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a15))
(assert (! (forall ((?v0 A_llist$)) (! (= (lprefix$ lNil$ ?v0) true) :pattern ((lprefix$ lNil$ ?v0)))) :named a16))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$)) (lprefix$ (ltake$ ?v0 ?v1) ?v1)) :named a17))
(check-sat)
;(get-unsat-core)
