; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 603
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_llist_bool_fun$ 0)
(declare-sort A_llist_llist_a_llist_set_fun$ 0)
(declare-sort A_llist_llist_llist_a_llist_llist_set_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_llist_list$ (nil$) (cons$ (hd$ A_llist$) (tl$ A_llist_list$)))))
(declare-codatatypes () ((A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist_llist$) (ltl$b A_llist_llist_llist$)))
  (A_llist_llist_llist_llist$ (lNil$c) (lCons$c (lhd$c A_llist_llist_llist$) (ltl$c A_llist_llist_llist_llist$)))))
(declare-fun i$ () Nat$)
(declare-fun nth$ (A_llist_list$ Nat$) A_llist$)
(declare-fun set$ (A_llist_list$) A_llist_set$)
(declare-fun xss$ () A_llist_list$)
(declare-fun size$ (A_llist_list$) Nat$)
(declare-fun lnull$ (A_llist_llist_llist$) Bool)
(declare-fun lnull$a (A_llist_llist$) Bool)
(declare-fun lnull$b (A_llist$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$ (A_llist_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun lconcat$ (A_llist_llist_llist_llist$) A_llist_llist_llist$)
(declare-fun lmember$ (A_llist_llist$) A_llist_llist_llist_bool_fun$)
(declare-fun member$a (Nat$ Nat_set$) Bool)
(declare-fun member$b (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun fun_app$a (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_llist_llist_a_llist_llist_set_fun$ A_llist_llist_llist$) A_llist_llist_set$)
(declare-fun fun_app$d (A_llist_llist_a_llist_set_fun$ A_llist_llist$) A_llist_set$)
(declare-fun fun_app$e (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun gen_lset$ (A_llist_llist_set$) A_llist_llist_llist_a_llist_llist_set_fun$)
(declare-fun lconcat$a (A_llist_llist_llist$) A_llist_llist$)
(declare-fun lconcat$b (A_llist_llist$) A_llist$)
(declare-fun lessThan$ (Nat$) Nat_set$)
(declare-fun lmember$a (A_llist$) A_llist_llist_bool_fun$)
(declare-fun lmember$b (A$) A_llist_bool_fun$)
(declare-fun gen_lset$a (A_llist_set$) A_llist_llist_a_llist_set_fun$)
(declare-fun gen_lset$b (A_set$) A_llist_a_set_fun$)
(declare-fun pred_llist$ (A_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun pred_llist$a (A_llist_bool_fun$) A_llist_llist_bool_fun$)
(declare-fun pred_llist$b (A_bool_fun$) A_llist_bool_fun$)
(declare-fun finite_lprefix$ (A_llist_llist_llist$) A_llist_llist_llist_bool_fun$)
(declare-fun lstrict_prefix$ (A_llist_llist_llist$ A_llist_llist_llist$) Bool)
(declare-fun finite_lprefix$a (A_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun finite_lprefix$b (A_llist$) A_llist_bool_fun$)
(declare-fun lstrict_prefix$a (A_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun lstrict_prefix$b (A_llist$) A_llist_bool_fun$)
(assert (! (not (= (nth$ xss$ i$) lNil$)) :named a0))
(assert (! (member$ (nth$ xss$ i$) (set$ xss$)) :named a1))
(assert (! (member$a i$ (lessThan$ (size$ xss$))) :named a2))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (! (= (lnull$ ?v0) (= ?v0 lNil$b)) :pattern ((lnull$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (lnull$a ?v0) (= ?v0 lNil$a)) :pattern ((lnull$a ?v0)))) :named a4))
(assert (! (forall ((?v0 A_llist$)) (! (= (lnull$b ?v0) (= ?v0 lNil$)) :pattern ((lnull$b ?v0)))) :named a5))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (=> (= ?v0 lNil$b) (lnull$ ?v0))) :named a6))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (= ?v0 lNil$a) (lnull$a ?v0))) :named a7))
(assert (! (forall ((?v0 A_llist$)) (=> (= ?v0 lNil$) (lnull$b ?v0))) :named a8))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (=> (lnull$ ?v0) (= ?v0 lNil$b))) :named a9))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (lnull$a ?v0) (= ?v0 lNil$a))) :named a10))
(assert (! (forall ((?v0 A_llist$)) (=> (lnull$b ?v0) (= ?v0 lNil$))) :named a11))
(assert (! (lnull$ lNil$b) :named a12))
(assert (! (lnull$a lNil$a) :named a13))
(assert (! (lnull$b lNil$) :named a14))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$ (lmember$ ?v0) lNil$b) false) :pattern ((lmember$ ?v0)))) :named a15))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$a (lmember$a ?v0) lNil$a) false) :pattern ((lmember$a ?v0)))) :named a16))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$b (lmember$b ?v0) lNil$) false) :pattern ((lmember$b ?v0)))) :named a17))
(assert (! (forall ((?v0 A_llist_llist_set$)) (! (= (fun_app$c (gen_lset$ ?v0) lNil$b) ?v0) :pattern ((gen_lset$ ?v0)))) :named a18))
(assert (! (forall ((?v0 A_llist_set$)) (! (= (fun_app$d (gen_lset$a ?v0) lNil$a) ?v0) :pattern ((gen_lset$a ?v0)))) :named a19))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$e (gen_lset$b ?v0) lNil$) ?v0) :pattern ((gen_lset$b ?v0)))) :named a20))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (! (= (fun_app$ (finite_lprefix$ ?v0) lNil$b) (= ?v0 lNil$b)) :pattern ((finite_lprefix$ ?v0)))) :named a21))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$a (finite_lprefix$a ?v0) lNil$a) (= ?v0 lNil$a)) :pattern ((finite_lprefix$a ?v0)))) :named a22))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$b (finite_lprefix$b ?v0) lNil$) (= ?v0 lNil$)) :pattern ((finite_lprefix$b ?v0)))) :named a23))
(assert (! (forall ((?v0 A_llist_llist_llist$)) (! (= (fun_app$ (finite_lprefix$ lNil$b) ?v0) true) :pattern ((fun_app$ (finite_lprefix$ lNil$b) ?v0)))) :named a24))
(assert (! (forall ((?v0 A_llist_llist$)) (! (= (fun_app$a (finite_lprefix$a lNil$a) ?v0) true) :pattern ((fun_app$a (finite_lprefix$a lNil$a) ?v0)))) :named a25))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$b (finite_lprefix$b lNil$) ?v0) true) :pattern ((fun_app$b (finite_lprefix$b lNil$) ?v0)))) :named a26))
(assert (! (= (lstrict_prefix$ lNil$b lNil$b) false) :named a27))
(assert (! (= (fun_app$a (lstrict_prefix$a lNil$a) lNil$a) false) :named a28))
(assert (! (= (fun_app$b (lstrict_prefix$b lNil$) lNil$) false) :named a29))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$)) (pred_llist$ ?v0 lNil$b)) :named a30))
(assert (! (forall ((?v0 A_llist_bool_fun$)) (fun_app$a (pred_llist$a ?v0) lNil$a)) :named a31))
(assert (! (forall ((?v0 A_bool_fun$)) (fun_app$b (pred_llist$b ?v0) lNil$)) :named a32))
(assert (! (= (lconcat$ lNil$c) lNil$b) :named a33))
(assert (! (= (lconcat$a lNil$b) lNil$a) :named a34))
(assert (! (= (lconcat$b lNil$a) lNil$) :named a35))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$) (?v1 A_llist_llist$)) (=> (forall ((?v2 A_llist_llist$)) (=> (forall ((?v3 A_llist_llist$)) (=> (fun_app$a (lstrict_prefix$a ?v3) ?v2) (fun_app$a ?v0 ?v3))) (fun_app$a ?v0 ?v2))) (fun_app$a ?v0 ?v1))) :named a36))
(assert (! (forall ((?v0 A_llist_bool_fun$) (?v1 A_llist$)) (=> (forall ((?v2 A_llist$)) (=> (forall ((?v3 A_llist$)) (=> (fun_app$b (lstrict_prefix$b ?v3) ?v2) (fun_app$b ?v0 ?v3))) (fun_app$b ?v0 ?v2))) (fun_app$b ?v0 ?v1))) :named a37))
(assert (! (forall ((?v0 A_llist_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false)) :named a38))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (lnull$b ?v0) false) (=> (not (lnull$b ?v0)) false)) false)) :named a39))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a40))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$b ?v0) (lnull$b ?v1)) false) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false)) :named a41))
(assert (! (forall ((?v0 A_llist_llist_set$)) (=> (and (=> (forall ((?v1 A_llist_llist$)) (=> (member$b ?v1 ?v0) (lnull$a ?v1))) false) (=> (not (forall ((?v1 A_llist_llist$)) (=> (member$b ?v1 ?v0) (lnull$a ?v1)))) false)) false)) :named a42))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$b ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$b ?v1)))) false)) false)) :named a43))
(check-sat)
;(get-unsat-core)
