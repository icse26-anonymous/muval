; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 378
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_a_list_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_llist_a_set_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun xs$ () A_list$)
(declare-fun bind$ (A_list$ A_a_list_fun$) A_list$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun member$ (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$) Bool)
(declare-fun lmember$ (A$) A_llist_bool_fun$)
(declare-fun fun_app$a (A_llist_a_set_fun$ A_llist$) A_set$)
(declare-fun gen_lset$ (A_set$) A_llist_a_set_fun$)
(declare-fun llist_of$ (A_list$) A_llist$)
(declare-fun ldistinct$ (A_llist$) Bool)
(declare-fun pred_llist$ (A_bool_fun$ A_llist$) Bool)
(assert (! (not (= (= (llist_of$ xs$) lNil$) (= xs$ nil$))) :named a0))
(assert (! (= (llist_of$ nil$) lNil$) :named a1))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ (lmember$ ?v0) lNil$) false) :pattern ((lmember$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false)) :named a3))
(assert (! (forall ((?v0 A_set$)) (! (= (fun_app$a (gen_lset$ ?v0) lNil$) ?v0) :pattern ((gen_lset$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_list$)) (= (lnull$ (llist_of$ ?v0)) (= ?v0 nil$))) :named a5))
(assert (! (forall ((?v0 A_bool_fun$)) (pred_llist$ ?v0 lNil$)) :named a6))
(assert (! (ldistinct$ lNil$) :named a7))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (llexord$ ?v0 lNil$ ?v1)) :named a8))
(assert (! (forall ((?v0 A_a_list_fun$)) (! (= (bind$ nil$ ?v0) nil$) :pattern ((bind$ nil$ ?v0)))) :named a9))
(assert (! (= (lfinite$ lNil$) true) :named a10))
(assert (! (forall ((?v0 A_list$)) (lfinite$ (llist_of$ ?v0))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a12))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$ ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a13))
(check-sat)
;(get-unsat-core)
