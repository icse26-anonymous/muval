; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 692
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun lstrict_prefix$ (A_llist$ A_llist$) Bool)
(assert (! (not false) :named a0))
(assert (! (lstrict_prefix$ xs$ ys$) :named a1))
(assert (! (= xs$ ys$) :named a2))
(assert (! (not (= xs$ ys$)) :named a3))
(assert (! (lprefix$ xs$ ys$) :named a4))
(assert (! (= (llength$ xs$) (llength$ ys$)) :named a5))
(assert (! (not (less$ (llength$ xs$) (llength$ ys$))) :named a6))
(assert (! (less_eq$ (llength$ xs$) (llength$ ys$)) :named a7))
(assert (! (= (lstrict_prefix$ lNil$ lNil$) false) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (lstrict_prefix$ (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (lstrict_prefix$ ?v1 ?v3))) :pattern ((lstrict_prefix$ (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3))))) :named a9))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (lstrict_prefix$ ?v0 ?v1) (and (lprefix$ ?v0 ?v1) (not (= ?v0 ?v1)))) :pattern ((lstrict_prefix$ ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lstrict_prefix$ lNil$ (lCons$ ?v0 ?v1)) true) :pattern ((lCons$ ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lstrict_prefix$ (lCons$ ?v0 ?v1) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))) :named a12))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a13))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (lprefix$ (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (lprefix$ ?v1 ?v3))) :pattern ((lprefix$ (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3))))) :named a16))
(assert (! (forall ((?v0 A_llist$)) (! (= (lprefix$ lNil$ ?v0) true) :pattern ((lprefix$ lNil$ ?v0)))) :named a17))
(check-sat)
;(get-unsat-core)
