; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 598
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_llist_a_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun q$ () A_bool_fun$)
(declare-fun uu$ () A_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun uua$ () A_bool_fun$)
(declare-fun uub$ () A_bool_fun$)
(declare-fun uuc$ (A_bool_fun$) A_llist_a_bool_fun_fun$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun lfilter$ (A_bool_fun$) A_llist_a_llist_fun$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun fun_app$a (A_llist_a_bool_fun_fun$ A_llist$) A_bool_fun$)
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$) A_llist$)
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uu$ ?v0) (and (fun_app$ p$ ?v0) (fun_app$ q$ ?v0))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$)) (! (= (fun_app$ (fun_app$a (uuc$ ?v0) ?v1) ?v2) (and (member$ ?v2 (lset$ ?v1)) (fun_app$ ?v0 ?v2))) :pattern ((fun_app$ (fun_app$a (uuc$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uub$ ?v0) false) :pattern ((fun_app$ uub$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uua$ ?v0) true) :pattern ((fun_app$ uua$ ?v0)))) :named a3))
(assert (! (not (= (fun_app$b (lfilter$ p$) (fun_app$b (lfilter$ q$) xs$)) (fun_app$b (lfilter$ uu$) xs$))) :named a4))
(assert (! (forall ((?v0 A_llist$)) (= (fun_app$b (lfilter$ uua$) ?v0) ?v0)) :named a5))
(assert (! (forall ((?v0 A_llist$)) (= (fun_app$b (lfilter$ uub$) ?v0) lNil$)) :named a6))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lset$ (fun_app$b (lfilter$ ?v0) ?v1)) (collect$ (fun_app$a (uuc$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 A_bool_fun$)) (! (= (fun_app$b (lfilter$ ?v0) lNil$) lNil$) :pattern ((lfilter$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (fun_app$b (lfilter$ ?v0) (lCons$ ?v1 ?v2)) (ite (fun_app$ ?v0 ?v1) (lCons$ ?v1 (fun_app$b (lfilter$ ?v0) ?v2)) (fun_app$b (lfilter$ ?v0) ?v2))) :pattern ((fun_app$b (lfilter$ ?v0) (lCons$ ?v1 ?v2))))) :named a9))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (=> (not (fun_app$ ?v0 ?v1)) (= (fun_app$b (lfilter$ ?v0) (lCons$ ?v1 ?v2)) (fun_app$b (lfilter$ ?v0) ?v2))) :pattern ((fun_app$b (lfilter$ ?v0) (lCons$ ?v1 ?v2))))) :named a10))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (=> (fun_app$ ?v0 ?v1) (= (fun_app$b (lfilter$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v1 (fun_app$b (lfilter$ ?v0) ?v2)))) :pattern ((fun_app$b (lfilter$ ?v0) (lCons$ ?v1 ?v2))))) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (lfinite$ ?v0) (lfinite$ (fun_app$b (lfilter$ ?v1) ?v0)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (! (=> (forall ((?v2 A$)) (=> (member$ ?v2 (lset$ ?v0)) (not (fun_app$ ?v1 ?v2)))) (= (fun_app$b (lfilter$ ?v1) ?v0) lNil$)) :pattern ((fun_app$b (lfilter$ ?v1) ?v0)))) :named a13))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lnull$ (fun_app$b (lfilter$ ?v0) ?v1)) (forall ((?v2 A$)) (=> (member$ ?v2 (lset$ ?v1)) (not (fun_app$ ?v0 ?v2)))))) :named a14))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a15))
(assert (! (forall ((?v0 A_llist$)) (lprefix$ ?v0 ?v0)) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a17))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (lprefix$ (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (lprefix$ ?v1 ?v3))) :pattern ((lprefix$ (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3))))) :named a18))
(check-sat)
;(get-unsat-core)
