; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 663
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun less_eq$ (A_set$ A_set$) Bool)
(declare-fun lmember$ (A$ A_llist$) Bool)
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$) A_llist$)
(assert (! (not (less_eq$ (lset$ (ldropWhile$ p$ xs$)) (lset$ xs$))) :named a0))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))) (less_eq$ ?v0 ?v1))) :named a1))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A_set$)) (less_eq$ ?v0 ?v0)) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$ ?v0 (lset$ ?v1)) (lmember$ ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (= ?v0 ?v1) (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)))) :named a5))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (less_eq$ ?v0 ?v1) (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))))) :named a6))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (= (less_eq$ ?v0 ?v1) (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))))) :named a7))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_bool_fun$)) (=> (forall ((?v2 A$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) (less_eq$ (collect$ ?v0) (collect$ ?v1)))) :named a8))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (and (= ?v0 ?v1) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) false)) false)) :named a9))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (= ?v0 ?v1) (less_eq$ ?v1 ?v0))) :named a10))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (=> (= ?v0 ?v1) (less_eq$ ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (member$ ?v0 ?v1) (less_eq$ ?v1 ?v2)) (member$ ?v0 ?v2))) :named a12))
(assert (! (forall ((?v0 A_set$)) (less_eq$ ?v0 ?v0)) :named a13))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$)) (! (=> (less_eq$ ?v0 ?v1) (= (less_eq$ ?v1 ?v0) (= ?v1 ?v0))) :pattern ((less_eq$ ?v1 ?v0)))) :named a14))
(check-sat)
;(get-unsat-core)
