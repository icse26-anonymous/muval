; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 517
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort B_llist_set$ 0)
(declare-sort Nat_a_llist_fun$ 0)
(declare-sort Nat_b_llist_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort A_llist_llist_set$ 0)
(declare-sort B_llist_llist_set$ 0)
(declare-sort A_a_llist_bool_fun_fun$ 0)
(declare-sort A_b_llist_bool_fun_fun$ 0)
(declare-sort A_llist_a_bool_fun_fun$ 0)
(declare-sort A_llist_b_bool_fun_fun$ 0)
(declare-sort A_llist_llist_bool_fun$ 0)
(declare-sort B_a_llist_bool_fun_fun$ 0)
(declare-sort B_b_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_bool_fun_fun$ 0)
(declare-sort B_llist_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_llist_bool_fun$ 0)
(declare-sort B_llist_a_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-sort B_llist_llist_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_b_llist_bool_fun_fun$ 0)
(declare-sort B_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort B_llist_llist_b_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_a_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_b_llist_llist_bool_fun_fun$ 0)
(declare-sort B_llist_llist_b_llist_llist_bool_fun_fun$ 0)
(declare-sort A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ 0)
(declare-sort B_llist_llist_llist_b_llist_llist_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist_llist$ (lNil$b) (lCons$b (lhd$b A_llist$) (ltl$b A_llist_llist$)))
  (A_llist_llist_llist$ (lNil$c) (lCons$c (lhd$c A_llist_llist$) (ltl$c A_llist_llist_llist$)))
  (B_llist_llist$ (lNil$d) (lCons$d (lhd$d B_llist$) (ltl$d B_llist_llist$)))
  (B_llist_llist_llist$ (lNil$e) (lCons$e (lhd$e B_llist_llist$) (ltl$e B_llist_llist_llist$)))))
(declare-fun a$ () A_llist$)
(declare-fun b$ () B_llist$)
(declare-fun r$ () A_b_bool_fun_fun$)
(declare-fun s$ () A_a_bool_fun_fun$)
(declare-fun t$ () B_b_bool_fun_fun$)
(declare-fun x$ () A_llist$)
(declare-fun y$ () B_llist$)
(declare-fun uu$ () A_llist_llist_a_llist_llist_bool_fun_fun$)
(declare-fun uua$ () A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$)
(declare-fun uub$ () B_llist_llist_b_llist_llist_bool_fun_fun$)
(declare-fun uuc$ () B_llist_llist_llist_b_llist_llist_llist_bool_fun_fun$)
(declare-fun uud$ () B_llist_b_llist_bool_fun_fun$)
(declare-fun uue$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun uuf$ () A_a_bool_fun_fun$)
(declare-fun uug$ () B_b_bool_fun_fun$)
(declare-fun lset$ (A_llist_llist_llist$) A_llist_llist_set$)
(declare-fun lset$a (B_llist_llist_llist$) B_llist_llist_set$)
(declare-fun lset$b (B_llist_llist$) B_llist_set$)
(declare-fun lset$c (A_llist_llist$) A_llist_set$)
(declare-fun lset$d (A_llist$) A_set$)
(declare-fun lset$e (B_llist$) B_set$)
(declare-fun member$ (A_llist_llist$ A_llist_llist_set$) Bool)
(declare-fun transp$ (A_llist_llist_a_llist_llist_bool_fun_fun$) Bool)
(declare-fun fun_app$ (B_llist_llist_llist_bool_fun$ B_llist_llist_llist$) Bool)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun member$a (B_llist_llist$ B_llist_llist_set$) Bool)
(declare-fun member$b (B_llist$ B_llist_set$) Bool)
(declare-fun member$c (A_llist$ A_llist_set$) Bool)
(declare-fun member$d (A$ A_set$) Bool)
(declare-fun member$e (B$ B_set$) Bool)
(declare-fun transp$a (B_llist_llist_b_llist_llist_bool_fun_fun$) Bool)
(declare-fun transp$b (B_llist_b_llist_bool_fun_fun$) Bool)
(declare-fun transp$c (A_llist_a_llist_bool_fun_fun$) Bool)
(declare-fun transp$d (A_a_bool_fun_fun$) Bool)
(declare-fun transp$e (B_b_bool_fun_fun$) Bool)
(declare-fun fun_app$a (B_llist_llist_llist_b_llist_llist_llist_bool_fun_fun$ B_llist_llist_llist$) B_llist_llist_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_llist_llist_bool_fun$ A_llist_llist_llist$) Bool)
(declare-fun fun_app$c (A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$ A_llist_llist_llist$) A_llist_llist_llist_bool_fun$)
(declare-fun fun_app$d (B_llist_llist_bool_fun$ B_llist_llist$) Bool)
(declare-fun fun_app$e (B_llist_llist_b_llist_llist_bool_fun_fun$ B_llist_llist$) B_llist_llist_bool_fun$)
(declare-fun fun_app$f (A_llist_llist_bool_fun$ A_llist_llist$) Bool)
(declare-fun fun_app$g (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$h (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun fun_app$i (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun fun_app$j (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$k (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$l (B_bool_fun$ B$) Bool)
(declare-fun fun_app$m (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$n (A_bool_fun$ A$) Bool)
(declare-fun fun_app$o (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$p (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$q (A_llist_b_llist_bool_fun_fun$ A_llist$) B_llist_bool_fun$)
(declare-fun fun_app$r (B_llist_a_llist_bool_fun_fun$ B_llist$) A_llist_bool_fun$)
(declare-fun fun_app$s (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$t (A_llist_llist_b_llist_llist_bool_fun_fun$ A_llist_llist$) B_llist_llist_bool_fun$)
(declare-fun fun_app$u (A_llist_a_llist_llist_bool_fun_fun$ A_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$v (A_llist_b_llist_llist_bool_fun_fun$ A_llist$) B_llist_llist_bool_fun$)
(declare-fun fun_app$w (B_llist_a_llist_llist_bool_fun_fun$ B_llist$) A_llist_llist_bool_fun$)
(declare-fun fun_app$x (Nat_a_fun$ Nat$) A$)
(declare-fun fun_app$y (Nat_b_fun$ Nat$) B$)
(declare-fun fun_app$z (Nat_a_llist_fun$ Nat$) A_llist$)
(declare-fun lconcat$a (B_llist_llist$) B_llist$)
(declare-fun lconcat$b (A_llist_llist_llist$) A_llist_llist$)
(declare-fun lconcat$c (B_llist_llist_llist$) B_llist_llist$)
(declare-fun llength$a (B_llist$) Enat$)
(declare-fun llength$b (A_llist_llist$) Enat$)
(declare-fun llength$c (B_llist_llist$) Enat$)
(declare-fun fun_app$aa (Nat_b_llist_fun$ Nat$) B_llist$)
(declare-fun fun_app$ab (A_a_llist_bool_fun_fun$ A$) A_llist_bool_fun$)
(declare-fun fun_app$ac (A_b_llist_bool_fun_fun$ A$) B_llist_bool_fun$)
(declare-fun fun_app$ad (B_a_llist_bool_fun_fun$ B$) A_llist_bool_fun$)
(declare-fun fun_app$ae (A_llist_llist_b_llist_bool_fun_fun$ A_llist_llist$) B_llist_bool_fun$)
(declare-fun fun_app$af (B_llist_llist_b_llist_bool_fun_fun$ B_llist_llist$) B_llist_bool_fun$)
(declare-fun fun_app$ag (A_llist_llist_a_llist_bool_fun_fun$ A_llist_llist$) A_llist_bool_fun$)
(declare-fun inf_llist$ (Nat_a_fun$) A_llist$)
(declare-fun inf_llist$a (Nat_b_fun$) B_llist$)
(declare-fun inf_llist$b (Nat_a_llist_fun$) A_llist_llist$)
(declare-fun inf_llist$c (Nat_b_llist_fun$) B_llist_llist$)
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun llist_all2$ (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun ldropWhile$a (B_bool_fun$ B_llist$) B_llist$)
(declare-fun ldropWhile$b (A_llist_bool_fun$ A_llist_llist$) A_llist_llist$)
(declare-fun ldropWhile$c (B_llist_bool_fun$ B_llist_llist$) B_llist_llist$)
(declare-fun llist_all2$a (B_b_bool_fun_fun$) B_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$b (A_llist_llist_a_llist_llist_bool_fun_fun$) A_llist_llist_llist_a_llist_llist_llist_bool_fun_fun$)
(declare-fun llist_all2$c (B_llist_llist_b_llist_llist_bool_fun_fun$) B_llist_llist_llist_b_llist_llist_llist_bool_fun_fun$)
(declare-fun llist_all2$d (B_llist_b_llist_bool_fun_fun$) B_llist_llist_b_llist_llist_bool_fun_fun$)
(declare-fun llist_all2$e (A_llist_a_llist_bool_fun_fun$) A_llist_llist_a_llist_llist_bool_fun_fun$)
(declare-fun llist_all2$f (A_b_bool_fun_fun$) A_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$g (B_a_bool_fun_fun$) B_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$h (A_llist_b_llist_bool_fun_fun$) A_llist_llist_b_llist_llist_bool_fun_fun$)
(declare-fun llist_all2$i (B_llist_a_llist_bool_fun_fun$ B_llist_llist$ A_llist_llist$) Bool)
(declare-fun llist_all2$j (A_a_llist_bool_fun_fun$) A_llist_a_llist_llist_bool_fun_fun$)
(declare-fun llist_all2$k (A_b_llist_bool_fun_fun$) A_llist_b_llist_llist_bool_fun_fun$)
(declare-fun llist_all2$l (B_a_llist_bool_fun_fun$) B_llist_a_llist_llist_bool_fun_fun$)
(declare-fun llist_all2$m (A_llist_b_bool_fun_fun$) A_llist_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$n (B_llist_b_bool_fun_fun$) B_llist_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$o (A_llist_a_bool_fun_fun$) A_llist_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$p (B_b_llist_bool_fun_fun$ B_llist$ B_llist_llist$) Bool)
(declare-fun llist_all2$q (A_llist_llist_b_llist_llist_bool_fun_fun$ A_llist_llist_llist$ B_llist_llist_llist$) Bool)
(declare-fun llist_all2$r (A_llist_a_llist_llist_bool_fun_fun$ A_llist_llist$ A_llist_llist_llist$) Bool)
(declare-fun llist_all2$s (A_llist_b_llist_llist_bool_fun_fun$ A_llist_llist$ B_llist_llist_llist$) Bool)
(declare-fun llist_all2$t (B_llist_a_llist_llist_bool_fun_fun$ B_llist_llist$ A_llist_llist_llist$) Bool)
(assert (! (forall ((?v0 B_llist_llist_llist$) (?v1 B_llist_llist_llist$)) (! (= (fun_app$ (fun_app$a uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uuc$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_llist_llist_llist$) (?v1 A_llist_llist_llist$)) (! (= (fun_app$b (fun_app$c uua$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c uua$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 B_llist_llist$) (?v1 B_llist_llist$)) (! (= (fun_app$d (fun_app$e uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (fun_app$e uub$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_llist_llist$) (?v1 A_llist_llist$)) (! (= (fun_app$f (fun_app$g uu$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$f (fun_app$g uu$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (= (fun_app$h (fun_app$i uud$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$h (fun_app$i uud$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$j (fun_app$k uue$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$j (fun_app$k uue$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$l (fun_app$m uug$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$l (fun_app$m uug$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$n (fun_app$o uuf$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$n (fun_app$o uuf$ ?v0) ?v1)))) :named a7))
(assert (! (not (= (fun_app$j (fun_app$k (llist_all2$ s$) x$) a$) (fun_app$h (fun_app$i (llist_all2$a t$) y$) b$))) :named a8))
(assert (! (not (= (llength$ x$) (llength$ a$))) :named a9))
(assert (! (= (llength$ a$) (llength$a b$)) :named a10))
(assert (! (= (llength$ x$) (llength$a y$)) :named a11))
(assert (! (forall ((?v0 A$) (?v1 B$)) (=> (fun_app$l (fun_app$p r$ ?v0) ?v1) (forall ((?v2 A$) (?v3 B$)) (=> (fun_app$l (fun_app$p r$ ?v2) ?v3) (= (fun_app$n (fun_app$o s$ ?v0) ?v2) (fun_app$l (fun_app$m t$ ?v1) ?v3)))))) :named a12))
(assert (! (= (llist_all2$b uu$) uua$) :named a13))
(assert (! (= (llist_all2$c uub$) uuc$) :named a14))
(assert (! (= (llist_all2$d uud$) uub$) :named a15))
(assert (! (= (llist_all2$e uue$) uu$) :named a16))
(assert (! (= (llist_all2$ uuf$) uue$) :named a17))
(assert (! (= (llist_all2$a uug$) uud$) :named a18))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$j (fun_app$k (llist_all2$ ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 A$)) (=> (fun_app$n (fun_app$o ?v0 ?v4) ?v5) (fun_app$n (fun_app$o ?v3 ?v4) ?v5)))) (fun_app$j (fun_app$k (llist_all2$ ?v3) ?v1) ?v2))) :named a19))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_b_bool_fun_fun$)) (=> (and (fun_app$h (fun_app$i (llist_all2$a ?v0) ?v1) ?v2) (forall ((?v4 B$) (?v5 B$)) (=> (fun_app$l (fun_app$m ?v0 ?v4) ?v5) (fun_app$l (fun_app$m ?v3 ?v4) ?v5)))) (fun_app$h (fun_app$i (llist_all2$a ?v3) ?v1) ?v2))) :named a20))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_b_bool_fun_fun$)) (=> (and (fun_app$h (fun_app$q (llist_all2$f ?v0) ?v1) ?v2) (forall ((?v4 A$) (?v5 B$)) (=> (fun_app$l (fun_app$p ?v0 ?v4) ?v5) (fun_app$l (fun_app$p ?v3 ?v4) ?v5)))) (fun_app$h (fun_app$q (llist_all2$f ?v3) ?v1) ?v2))) :named a21))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_a_bool_fun_fun$)) (=> (and (fun_app$j (fun_app$r (llist_all2$g ?v0) ?v1) ?v2) (forall ((?v4 B$) (?v5 A$)) (=> (fun_app$n (fun_app$s ?v0 ?v4) ?v5) (fun_app$n (fun_app$s ?v3 ?v4) ?v5)))) (fun_app$j (fun_app$r (llist_all2$g ?v3) ?v1) ?v2))) :named a22))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 B_llist_llist$) (?v3 A_llist_b_llist_bool_fun_fun$)) (=> (and (fun_app$d (fun_app$t (llist_all2$h ?v0) ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 B_llist$)) (=> (fun_app$h (fun_app$q ?v0 ?v4) ?v5) (fun_app$h (fun_app$q ?v3 ?v4) ?v5)))) (fun_app$d (fun_app$t (llist_all2$h ?v3) ?v1) ?v2))) :named a23))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_llist$) (?v2 B_llist_llist$) (?v3 B_llist_b_llist_bool_fun_fun$)) (=> (and (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v1) ?v2) (forall ((?v4 B_llist$) (?v5 B_llist$)) (=> (fun_app$h (fun_app$i ?v0 ?v4) ?v5) (fun_app$h (fun_app$i ?v3 ?v4) ?v5)))) (fun_app$d (fun_app$e (llist_all2$d ?v3) ?v1) ?v2))) :named a24))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_a_llist_bool_fun_fun$)) (=> (and (fun_app$f (fun_app$g (llist_all2$e ?v0) ?v1) ?v2) (forall ((?v4 A_llist$) (?v5 A_llist$)) (=> (fun_app$j (fun_app$k ?v0 ?v4) ?v5) (fun_app$j (fun_app$k ?v3 ?v4) ?v5)))) (fun_app$f (fun_app$g (llist_all2$e ?v3) ?v1) ?v2))) :named a25))
(assert (! (forall ((?v0 B_llist_a_llist_bool_fun_fun$) (?v1 B_llist_llist$) (?v2 A_llist_llist$) (?v3 B_llist_a_llist_bool_fun_fun$)) (=> (and (llist_all2$i ?v0 ?v1 ?v2) (forall ((?v4 B_llist$) (?v5 A_llist$)) (=> (fun_app$j (fun_app$r ?v0 ?v4) ?v5) (fun_app$j (fun_app$r ?v3 ?v4) ?v5)))) (llist_all2$i ?v3 ?v1 ?v2))) :named a26))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_llist$) (?v3 A_llist_llist_a_llist_llist_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) ?v2) (forall ((?v4 A_llist_llist$) (?v5 A_llist_llist$)) (=> (fun_app$f (fun_app$g ?v0 ?v4) ?v5) (fun_app$f (fun_app$g ?v3 ?v4) ?v5)))) (fun_app$b (fun_app$c (llist_all2$b ?v3) ?v1) ?v2))) :named a27))
(assert (! (forall ((?v0 B_llist_llist_b_llist_llist_bool_fun_fun$) (?v1 B_llist_llist_llist$) (?v2 B_llist_llist_llist$) (?v3 B_llist_llist_b_llist_llist_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v1) ?v2) (forall ((?v4 B_llist_llist$) (?v5 B_llist_llist$)) (=> (fun_app$d (fun_app$e ?v0 ?v4) ?v5) (fun_app$d (fun_app$e ?v3 ?v4) ?v5)))) (fun_app$ (fun_app$a (llist_all2$c ?v3) ?v1) ?v2))) :named a28))
(assert (! (fun_app$h (fun_app$q (llist_all2$f r$) a$) b$) :named a29))
(assert (! (fun_app$h (fun_app$q (llist_all2$f r$) x$) y$) :named a30))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$)) (=> (fun_app$j (fun_app$r (llist_all2$g ?v0) ?v1) ?v2) (= (llength$a ?v1) (llength$ ?v2)))) :named a31))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$j (fun_app$k (llist_all2$ ?v0) ?v1) ?v2) (= (llength$ ?v1) (llength$ ?v2)))) :named a32))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (fun_app$h (fun_app$i (llist_all2$a ?v0) ?v1) ?v2) (= (llength$a ?v1) (llength$a ?v2)))) :named a33))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (=> (fun_app$h (fun_app$q (llist_all2$f ?v0) ?v1) ?v2) (= (llength$ ?v1) (llength$a ?v2)))) :named a34))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 B_llist_llist$)) (=> (fun_app$d (fun_app$t (llist_all2$h ?v0) ?v1) ?v2) (= (llength$b ?v1) (llength$c ?v2)))) :named a35))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_llist$) (?v2 B_llist_llist$)) (=> (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v1) ?v2) (= (llength$c ?v1) (llength$c ?v2)))) :named a36))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (=> (fun_app$f (fun_app$g (llist_all2$e ?v0) ?v1) ?v2) (= (llength$b ?v1) (llength$b ?v2)))) :named a37))
(assert (! (forall ((?v0 A_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist_llist$)) (=> (fun_app$f (fun_app$u (llist_all2$j ?v0) ?v1) ?v2) (= (llength$ ?v1) (llength$b ?v2)))) :named a38))
(assert (! (forall ((?v0 A_b_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist_llist$)) (=> (fun_app$d (fun_app$v (llist_all2$k ?v0) ?v1) ?v2) (= (llength$ ?v1) (llength$c ?v2)))) :named a39))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist_llist$)) (=> (fun_app$f (fun_app$w (llist_all2$l ?v0) ?v1) ?v2) (= (llength$a ?v1) (llength$b ?v2)))) :named a40))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 Nat_a_fun$) (?v2 Nat_a_fun$)) (= (fun_app$j (fun_app$k (llist_all2$ ?v0) (inf_llist$ ?v1)) (inf_llist$ ?v2)) (forall ((?v3 Nat$)) (fun_app$n (fun_app$o ?v0 (fun_app$x ?v1 ?v3)) (fun_app$x ?v2 ?v3))))) :named a41))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 Nat_b_fun$) (?v2 Nat_b_fun$)) (= (fun_app$h (fun_app$i (llist_all2$a ?v0) (inf_llist$a ?v1)) (inf_llist$a ?v2)) (forall ((?v3 Nat$)) (fun_app$l (fun_app$m ?v0 (fun_app$y ?v1 ?v3)) (fun_app$y ?v2 ?v3))))) :named a42))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 Nat_a_fun$) (?v2 Nat_b_fun$)) (= (fun_app$h (fun_app$q (llist_all2$f ?v0) (inf_llist$ ?v1)) (inf_llist$a ?v2)) (forall ((?v3 Nat$)) (fun_app$l (fun_app$p ?v0 (fun_app$x ?v1 ?v3)) (fun_app$y ?v2 ?v3))))) :named a43))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 Nat_b_fun$) (?v2 Nat_a_fun$)) (= (fun_app$j (fun_app$r (llist_all2$g ?v0) (inf_llist$a ?v1)) (inf_llist$ ?v2)) (forall ((?v3 Nat$)) (fun_app$n (fun_app$s ?v0 (fun_app$y ?v1 ?v3)) (fun_app$x ?v2 ?v3))))) :named a44))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$) (?v1 Nat_a_llist_fun$) (?v2 Nat_b_llist_fun$)) (= (fun_app$d (fun_app$t (llist_all2$h ?v0) (inf_llist$b ?v1)) (inf_llist$c ?v2)) (forall ((?v3 Nat$)) (fun_app$h (fun_app$q ?v0 (fun_app$z ?v1 ?v3)) (fun_app$aa ?v2 ?v3))))) :named a45))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 Nat_b_llist_fun$) (?v2 Nat_b_llist_fun$)) (= (fun_app$d (fun_app$e (llist_all2$d ?v0) (inf_llist$c ?v1)) (inf_llist$c ?v2)) (forall ((?v3 Nat$)) (fun_app$h (fun_app$i ?v0 (fun_app$aa ?v1 ?v3)) (fun_app$aa ?v2 ?v3))))) :named a46))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 Nat_a_llist_fun$) (?v2 Nat_a_llist_fun$)) (= (fun_app$f (fun_app$g (llist_all2$e ?v0) (inf_llist$b ?v1)) (inf_llist$b ?v2)) (forall ((?v3 Nat$)) (fun_app$j (fun_app$k ?v0 (fun_app$z ?v1 ?v3)) (fun_app$z ?v2 ?v3))))) :named a47))
(assert (! (forall ((?v0 A_a_llist_bool_fun_fun$) (?v1 Nat_a_fun$) (?v2 Nat_a_llist_fun$)) (= (fun_app$f (fun_app$u (llist_all2$j ?v0) (inf_llist$ ?v1)) (inf_llist$b ?v2)) (forall ((?v3 Nat$)) (fun_app$j (fun_app$ab ?v0 (fun_app$x ?v1 ?v3)) (fun_app$z ?v2 ?v3))))) :named a48))
(assert (! (forall ((?v0 A_b_llist_bool_fun_fun$) (?v1 Nat_a_fun$) (?v2 Nat_b_llist_fun$)) (= (fun_app$d (fun_app$v (llist_all2$k ?v0) (inf_llist$ ?v1)) (inf_llist$c ?v2)) (forall ((?v3 Nat$)) (fun_app$h (fun_app$ac ?v0 (fun_app$x ?v1 ?v3)) (fun_app$aa ?v2 ?v3))))) :named a49))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$) (?v1 Nat_b_fun$) (?v2 Nat_a_llist_fun$)) (= (fun_app$f (fun_app$w (llist_all2$l ?v0) (inf_llist$a ?v1)) (inf_llist$b ?v2)) (forall ((?v3 Nat$)) (fun_app$j (fun_app$ad ?v0 (fun_app$y ?v1 ?v3)) (fun_app$z ?v2 ?v3))))) :named a50))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_llist$) (?v3 A_llist_llist_llist$)) (=> (and (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) ?v2) (and (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v2) ?v3) (transp$ ?v0))) (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) ?v3))) :named a51))
(assert (! (forall ((?v0 B_llist_llist_b_llist_llist_bool_fun_fun$) (?v1 B_llist_llist_llist$) (?v2 B_llist_llist_llist$) (?v3 B_llist_llist_llist$)) (=> (and (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v1) ?v2) (and (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v2) ?v3) (transp$a ?v0))) (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v1) ?v3))) :named a52))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_llist$) (?v2 B_llist_llist$) (?v3 B_llist_llist$)) (=> (and (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v1) ?v2) (and (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v2) ?v3) (transp$b ?v0))) (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v1) ?v3))) :named a53))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_llist$)) (=> (and (fun_app$f (fun_app$g (llist_all2$e ?v0) ?v1) ?v2) (and (fun_app$f (fun_app$g (llist_all2$e ?v0) ?v2) ?v3) (transp$c ?v0))) (fun_app$f (fun_app$g (llist_all2$e ?v0) ?v1) ?v3))) :named a54))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (and (fun_app$j (fun_app$k (llist_all2$ ?v0) ?v1) ?v2) (and (fun_app$j (fun_app$k (llist_all2$ ?v0) ?v2) ?v3) (transp$d ?v0))) (fun_app$j (fun_app$k (llist_all2$ ?v0) ?v1) ?v3))) :named a55))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_llist$)) (=> (and (fun_app$h (fun_app$i (llist_all2$a ?v0) ?v1) ?v2) (and (fun_app$h (fun_app$i (llist_all2$a ?v0) ?v2) ?v3) (transp$e ?v0))) (fun_app$h (fun_app$i (llist_all2$a ?v0) ?v1) ?v3))) :named a56))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$j (fun_app$k (llist_all2$ ?v0) ?v1) lNil$) (= ?v1 lNil$)) :pattern ((fun_app$k (llist_all2$ ?v0) ?v1)))) :named a57))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$h (fun_app$i (llist_all2$a ?v0) ?v1) lNil$a) (= ?v1 lNil$a)) :pattern ((fun_app$i (llist_all2$a ?v0) ?v1)))) :named a58))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$h (fun_app$q (llist_all2$f ?v0) ?v1) lNil$a) (= ?v1 lNil$)) :pattern ((fun_app$q (llist_all2$f ?v0) ?v1)))) :named a59))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$j (fun_app$r (llist_all2$g ?v0) ?v1) lNil$) (= ?v1 lNil$a)) :pattern ((fun_app$r (llist_all2$g ?v0) ?v1)))) :named a60))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$) (?v1 A_llist_llist$)) (! (= (fun_app$d (fun_app$t (llist_all2$h ?v0) ?v1) lNil$d) (= ?v1 lNil$b)) :pattern ((fun_app$t (llist_all2$h ?v0) ?v1)))) :named a61))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_llist$)) (! (= (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v1) lNil$d) (= ?v1 lNil$d)) :pattern ((fun_app$e (llist_all2$d ?v0) ?v1)))) :named a62))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_llist$)) (! (= (fun_app$f (fun_app$g (llist_all2$e ?v0) ?v1) lNil$b) (= ?v1 lNil$b)) :pattern ((fun_app$g (llist_all2$e ?v0) ?v1)))) :named a63))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$) (?v1 A_llist_llist$)) (! (= (fun_app$h (fun_app$ae (llist_all2$m ?v0) ?v1) lNil$a) (= ?v1 lNil$b)) :pattern ((fun_app$ae (llist_all2$m ?v0) ?v1)))) :named a64))
(assert (! (forall ((?v0 B_llist_b_bool_fun_fun$) (?v1 B_llist_llist$)) (! (= (fun_app$h (fun_app$af (llist_all2$n ?v0) ?v1) lNil$a) (= ?v1 lNil$d)) :pattern ((fun_app$af (llist_all2$n ?v0) ?v1)))) :named a65))
(assert (! (forall ((?v0 A_llist_a_bool_fun_fun$) (?v1 A_llist_llist$)) (! (= (fun_app$j (fun_app$ag (llist_all2$o ?v0) ?v1) lNil$) (= ?v1 lNil$b)) :pattern ((fun_app$ag (llist_all2$o ?v0) ?v1)))) :named a66))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$j (fun_app$k (llist_all2$ ?v0) lNil$) ?v1) (= ?v1 lNil$)) :pattern ((fun_app$j (fun_app$k (llist_all2$ ?v0) lNil$) ?v1)))) :named a67))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$h (fun_app$i (llist_all2$a ?v0) lNil$a) ?v1) (= ?v1 lNil$a)) :pattern ((fun_app$h (fun_app$i (llist_all2$a ?v0) lNil$a) ?v1)))) :named a68))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 B_llist$)) (! (= (fun_app$h (fun_app$q (llist_all2$f ?v0) lNil$) ?v1) (= ?v1 lNil$a)) :pattern ((fun_app$h (fun_app$q (llist_all2$f ?v0) lNil$) ?v1)))) :named a69))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 A_llist$)) (! (= (fun_app$j (fun_app$r (llist_all2$g ?v0) lNil$a) ?v1) (= ?v1 lNil$)) :pattern ((fun_app$j (fun_app$r (llist_all2$g ?v0) lNil$a) ?v1)))) :named a70))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$) (?v1 B_llist_llist$)) (! (= (fun_app$d (fun_app$t (llist_all2$h ?v0) lNil$b) ?v1) (= ?v1 lNil$d)) :pattern ((fun_app$d (fun_app$t (llist_all2$h ?v0) lNil$b) ?v1)))) :named a71))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_llist$)) (! (= (fun_app$d (fun_app$e (llist_all2$d ?v0) lNil$d) ?v1) (= ?v1 lNil$d)) :pattern ((fun_app$d (fun_app$e (llist_all2$d ?v0) lNil$d) ?v1)))) :named a72))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_llist$)) (! (= (fun_app$f (fun_app$g (llist_all2$e ?v0) lNil$b) ?v1) (= ?v1 lNil$b)) :pattern ((fun_app$f (fun_app$g (llist_all2$e ?v0) lNil$b) ?v1)))) :named a73))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$) (?v1 A_llist_llist$)) (! (= (fun_app$f (fun_app$w (llist_all2$l ?v0) lNil$a) ?v1) (= ?v1 lNil$b)) :pattern ((fun_app$f (fun_app$w (llist_all2$l ?v0) lNil$a) ?v1)))) :named a74))
(assert (! (forall ((?v0 B_b_llist_bool_fun_fun$) (?v1 B_llist_llist$)) (! (= (llist_all2$p ?v0 lNil$a ?v1) (= ?v1 lNil$d)) :pattern ((llist_all2$p ?v0 lNil$a ?v1)))) :named a75))
(assert (! (forall ((?v0 A_a_llist_bool_fun_fun$) (?v1 A_llist_llist$)) (! (= (fun_app$f (fun_app$u (llist_all2$j ?v0) lNil$) ?v1) (= ?v1 lNil$b)) :pattern ((fun_app$f (fun_app$u (llist_all2$j ?v0) lNil$) ?v1)))) :named a76))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (fun_app$j (fun_app$k (llist_all2$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4)) (and (fun_app$n (fun_app$o ?v0 ?v1) ?v3) (fun_app$j (fun_app$k (llist_all2$ ?v0) ?v2) ?v4))) :pattern ((fun_app$j (fun_app$k (llist_all2$ ?v0) (lCons$ ?v1 ?v2)) (lCons$ ?v3 ?v4))))) :named a77))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B$) (?v2 B_llist$) (?v3 B$) (?v4 B_llist$)) (! (= (fun_app$h (fun_app$i (llist_all2$a ?v0) (lCons$a ?v1 ?v2)) (lCons$a ?v3 ?v4)) (and (fun_app$l (fun_app$m ?v0 ?v1) ?v3) (fun_app$h (fun_app$i (llist_all2$a ?v0) ?v2) ?v4))) :pattern ((fun_app$h (fun_app$i (llist_all2$a ?v0) (lCons$a ?v1 ?v2)) (lCons$a ?v3 ?v4))))) :named a78))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 B$) (?v4 B_llist$)) (! (= (fun_app$h (fun_app$q (llist_all2$f ?v0) (lCons$ ?v1 ?v2)) (lCons$a ?v3 ?v4)) (and (fun_app$l (fun_app$p ?v0 ?v1) ?v3) (fun_app$h (fun_app$q (llist_all2$f ?v0) ?v2) ?v4))) :pattern ((fun_app$h (fun_app$q (llist_all2$f ?v0) (lCons$ ?v1 ?v2)) (lCons$a ?v3 ?v4))))) :named a79))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B$) (?v2 B_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (fun_app$j (fun_app$r (llist_all2$g ?v0) (lCons$a ?v1 ?v2)) (lCons$ ?v3 ?v4)) (and (fun_app$n (fun_app$s ?v0 ?v1) ?v3) (fun_app$j (fun_app$r (llist_all2$g ?v0) ?v2) ?v4))) :pattern ((fun_app$j (fun_app$r (llist_all2$g ?v0) (lCons$a ?v1 ?v2)) (lCons$ ?v3 ?v4))))) :named a80))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist_llist$) (?v3 B_llist$) (?v4 B_llist_llist$)) (! (= (fun_app$d (fun_app$t (llist_all2$h ?v0) (lCons$b ?v1 ?v2)) (lCons$d ?v3 ?v4)) (and (fun_app$h (fun_app$q ?v0 ?v1) ?v3) (fun_app$d (fun_app$t (llist_all2$h ?v0) ?v2) ?v4))) :pattern ((fun_app$d (fun_app$t (llist_all2$h ?v0) (lCons$b ?v1 ?v2)) (lCons$d ?v3 ?v4))))) :named a81))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist_llist$) (?v3 B_llist$) (?v4 B_llist_llist$)) (! (= (fun_app$d (fun_app$e (llist_all2$d ?v0) (lCons$d ?v1 ?v2)) (lCons$d ?v3 ?v4)) (and (fun_app$h (fun_app$i ?v0 ?v1) ?v3) (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v2) ?v4))) :pattern ((fun_app$d (fun_app$e (llist_all2$d ?v0) (lCons$d ?v1 ?v2)) (lCons$d ?v3 ?v4))))) :named a82))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist_llist$) (?v3 A_llist$) (?v4 A_llist_llist$)) (! (= (fun_app$f (fun_app$g (llist_all2$e ?v0) (lCons$b ?v1 ?v2)) (lCons$b ?v3 ?v4)) (and (fun_app$j (fun_app$k ?v0 ?v1) ?v3) (fun_app$f (fun_app$g (llist_all2$e ?v0) ?v2) ?v4))) :pattern ((fun_app$f (fun_app$g (llist_all2$e ?v0) (lCons$b ?v1 ?v2)) (lCons$b ?v3 ?v4))))) :named a83))
(assert (! (forall ((?v0 A_a_llist_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A_llist$) (?v4 A_llist_llist$)) (! (= (fun_app$f (fun_app$u (llist_all2$j ?v0) (lCons$ ?v1 ?v2)) (lCons$b ?v3 ?v4)) (and (fun_app$j (fun_app$ab ?v0 ?v1) ?v3) (fun_app$f (fun_app$u (llist_all2$j ?v0) ?v2) ?v4))) :pattern ((fun_app$f (fun_app$u (llist_all2$j ?v0) (lCons$ ?v1 ?v2)) (lCons$b ?v3 ?v4))))) :named a84))
(assert (! (forall ((?v0 A_b_llist_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 B_llist$) (?v4 B_llist_llist$)) (! (= (fun_app$d (fun_app$v (llist_all2$k ?v0) (lCons$ ?v1 ?v2)) (lCons$d ?v3 ?v4)) (and (fun_app$h (fun_app$ac ?v0 ?v1) ?v3) (fun_app$d (fun_app$v (llist_all2$k ?v0) ?v2) ?v4))) :pattern ((fun_app$d (fun_app$v (llist_all2$k ?v0) (lCons$ ?v1 ?v2)) (lCons$d ?v3 ?v4))))) :named a85))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$) (?v1 B$) (?v2 B_llist$) (?v3 A_llist$) (?v4 A_llist_llist$)) (! (= (fun_app$f (fun_app$w (llist_all2$l ?v0) (lCons$a ?v1 ?v2)) (lCons$b ?v3 ?v4)) (and (fun_app$j (fun_app$ad ?v0 ?v1) ?v3) (fun_app$f (fun_app$w (llist_all2$l ?v0) ?v2) ?v4))) :pattern ((fun_app$f (fun_app$w (llist_all2$l ?v0) (lCons$a ?v1 ?v2)) (lCons$b ?v3 ?v4))))) :named a86))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$) (?v1 A_llist_llist_llist$)) (= (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) ?v1) (forall ((?v2 A_llist_llist$)) (=> (member$ ?v2 (lset$ ?v1)) (fun_app$f (fun_app$g ?v0 ?v2) ?v2))))) :named a87))
(assert (! (forall ((?v0 B_llist_llist_b_llist_llist_bool_fun_fun$) (?v1 B_llist_llist_llist$)) (= (fun_app$ (fun_app$a (llist_all2$c ?v0) ?v1) ?v1) (forall ((?v2 B_llist_llist$)) (=> (member$a ?v2 (lset$a ?v1)) (fun_app$d (fun_app$e ?v0 ?v2) ?v2))))) :named a88))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_llist$)) (= (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v1) ?v1) (forall ((?v2 B_llist$)) (=> (member$b ?v2 (lset$b ?v1)) (fun_app$h (fun_app$i ?v0 ?v2) ?v2))))) :named a89))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_llist$)) (= (fun_app$f (fun_app$g (llist_all2$e ?v0) ?v1) ?v1) (forall ((?v2 A_llist$)) (=> (member$c ?v2 (lset$c ?v1)) (fun_app$j (fun_app$k ?v0 ?v2) ?v2))))) :named a90))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (= (fun_app$j (fun_app$k (llist_all2$ ?v0) ?v1) ?v1) (forall ((?v2 A$)) (=> (member$d ?v2 (lset$d ?v1)) (fun_app$n (fun_app$o ?v0 ?v2) ?v2))))) :named a91))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$)) (= (fun_app$h (fun_app$i (llist_all2$a ?v0) ?v1) ?v1) (forall ((?v2 B$)) (=> (member$e ?v2 (lset$e ?v1)) (fun_app$l (fun_app$m ?v0 ?v2) ?v2))))) :named a92))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_bool_fun$) (?v4 A_bool_fun$)) (=> (and (fun_app$j (fun_app$k (llist_all2$ ?v0) ?v1) ?v2) (forall ((?v5 A$) (?v6 A$)) (=> (fun_app$n (fun_app$o ?v0 ?v5) ?v6) (= (fun_app$n ?v3 ?v5) (fun_app$n ?v4 ?v6))))) (fun_app$j (fun_app$k (llist_all2$ ?v0) (ldropWhile$ ?v3 ?v1)) (ldropWhile$ ?v4 ?v2)))) :named a93))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$) (?v3 B_bool_fun$) (?v4 B_bool_fun$)) (=> (and (fun_app$h (fun_app$i (llist_all2$a ?v0) ?v1) ?v2) (forall ((?v5 B$) (?v6 B$)) (=> (fun_app$l (fun_app$m ?v0 ?v5) ?v6) (= (fun_app$l ?v3 ?v5) (fun_app$l ?v4 ?v6))))) (fun_app$h (fun_app$i (llist_all2$a ?v0) (ldropWhile$a ?v3 ?v1)) (ldropWhile$a ?v4 ?v2)))) :named a94))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$) (?v3 A_bool_fun$) (?v4 B_bool_fun$)) (=> (and (fun_app$h (fun_app$q (llist_all2$f ?v0) ?v1) ?v2) (forall ((?v5 A$) (?v6 B$)) (=> (fun_app$l (fun_app$p ?v0 ?v5) ?v6) (= (fun_app$n ?v3 ?v5) (fun_app$l ?v4 ?v6))))) (fun_app$h (fun_app$q (llist_all2$f ?v0) (ldropWhile$ ?v3 ?v1)) (ldropWhile$a ?v4 ?v2)))) :named a95))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$) (?v3 B_bool_fun$) (?v4 A_bool_fun$)) (=> (and (fun_app$j (fun_app$r (llist_all2$g ?v0) ?v1) ?v2) (forall ((?v5 B$) (?v6 A$)) (=> (fun_app$n (fun_app$s ?v0 ?v5) ?v6) (= (fun_app$l ?v3 ?v5) (fun_app$n ?v4 ?v6))))) (fun_app$j (fun_app$r (llist_all2$g ?v0) (ldropWhile$a ?v3 ?v1)) (ldropWhile$ ?v4 ?v2)))) :named a96))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 B_llist_llist$) (?v3 A_llist_bool_fun$) (?v4 B_llist_bool_fun$)) (=> (and (fun_app$d (fun_app$t (llist_all2$h ?v0) ?v1) ?v2) (forall ((?v5 A_llist$) (?v6 B_llist$)) (=> (fun_app$h (fun_app$q ?v0 ?v5) ?v6) (= (fun_app$j ?v3 ?v5) (fun_app$h ?v4 ?v6))))) (fun_app$d (fun_app$t (llist_all2$h ?v0) (ldropWhile$b ?v3 ?v1)) (ldropWhile$c ?v4 ?v2)))) :named a97))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_llist$) (?v2 B_llist_llist$) (?v3 B_llist_bool_fun$) (?v4 B_llist_bool_fun$)) (=> (and (fun_app$d (fun_app$e (llist_all2$d ?v0) ?v1) ?v2) (forall ((?v5 B_llist$) (?v6 B_llist$)) (=> (fun_app$h (fun_app$i ?v0 ?v5) ?v6) (= (fun_app$h ?v3 ?v5) (fun_app$h ?v4 ?v6))))) (fun_app$d (fun_app$e (llist_all2$d ?v0) (ldropWhile$c ?v3 ?v1)) (ldropWhile$c ?v4 ?v2)))) :named a98))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist$) (?v3 A_llist_bool_fun$) (?v4 A_llist_bool_fun$)) (=> (and (fun_app$f (fun_app$g (llist_all2$e ?v0) ?v1) ?v2) (forall ((?v5 A_llist$) (?v6 A_llist$)) (=> (fun_app$j (fun_app$k ?v0 ?v5) ?v6) (= (fun_app$j ?v3 ?v5) (fun_app$j ?v4 ?v6))))) (fun_app$f (fun_app$g (llist_all2$e ?v0) (ldropWhile$b ?v3 ?v1)) (ldropWhile$b ?v4 ?v2)))) :named a99))
(assert (! (forall ((?v0 A_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist_llist$) (?v3 A_bool_fun$) (?v4 A_llist_bool_fun$)) (=> (and (fun_app$f (fun_app$u (llist_all2$j ?v0) ?v1) ?v2) (forall ((?v5 A$) (?v6 A_llist$)) (=> (fun_app$j (fun_app$ab ?v0 ?v5) ?v6) (= (fun_app$n ?v3 ?v5) (fun_app$j ?v4 ?v6))))) (fun_app$f (fun_app$u (llist_all2$j ?v0) (ldropWhile$ ?v3 ?v1)) (ldropWhile$b ?v4 ?v2)))) :named a100))
(assert (! (forall ((?v0 A_b_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist_llist$) (?v3 A_bool_fun$) (?v4 B_llist_bool_fun$)) (=> (and (fun_app$d (fun_app$v (llist_all2$k ?v0) ?v1) ?v2) (forall ((?v5 A$) (?v6 B_llist$)) (=> (fun_app$h (fun_app$ac ?v0 ?v5) ?v6) (= (fun_app$n ?v3 ?v5) (fun_app$h ?v4 ?v6))))) (fun_app$d (fun_app$v (llist_all2$k ?v0) (ldropWhile$ ?v3 ?v1)) (ldropWhile$c ?v4 ?v2)))) :named a101))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist_llist$) (?v3 B_bool_fun$) (?v4 A_llist_bool_fun$)) (=> (and (fun_app$f (fun_app$w (llist_all2$l ?v0) ?v1) ?v2) (forall ((?v5 B$) (?v6 A_llist$)) (=> (fun_app$j (fun_app$ad ?v0 ?v5) ?v6) (= (fun_app$l ?v3 ?v5) (fun_app$j ?v4 ?v6))))) (fun_app$f (fun_app$w (llist_all2$l ?v0) (ldropWhile$a ?v3 ?v1)) (ldropWhile$b ?v4 ?v2)))) :named a102))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist$)) (=> (fun_app$f (fun_app$g (llist_all2$e (llist_all2$ ?v0)) ?v1) ?v2) (fun_app$j (fun_app$k (llist_all2$ ?v0) (lconcat$ ?v1)) (lconcat$ ?v2)))) :named a103))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist_llist$) (?v2 B_llist_llist$)) (=> (fun_app$d (fun_app$e (llist_all2$d (llist_all2$a ?v0)) ?v1) ?v2) (fun_app$h (fun_app$i (llist_all2$a ?v0) (lconcat$a ?v1)) (lconcat$a ?v2)))) :named a104))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 B_llist_llist$)) (=> (fun_app$d (fun_app$t (llist_all2$h (llist_all2$f ?v0)) ?v1) ?v2) (fun_app$h (fun_app$q (llist_all2$f ?v0) (lconcat$ ?v1)) (lconcat$a ?v2)))) :named a105))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist_llist$) (?v2 A_llist_llist$)) (=> (llist_all2$i (llist_all2$g ?v0) ?v1 ?v2) (fun_app$j (fun_app$r (llist_all2$g ?v0) (lconcat$a ?v1)) (lconcat$ ?v2)))) :named a106))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$) (?v1 A_llist_llist_llist$) (?v2 B_llist_llist_llist$)) (=> (llist_all2$q (llist_all2$h ?v0) ?v1 ?v2) (fun_app$d (fun_app$t (llist_all2$h ?v0) (lconcat$b ?v1)) (lconcat$c ?v2)))) :named a107))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$) (?v1 B_llist_llist_llist$) (?v2 B_llist_llist_llist$)) (=> (fun_app$ (fun_app$a (llist_all2$c (llist_all2$d ?v0)) ?v1) ?v2) (fun_app$d (fun_app$e (llist_all2$d ?v0) (lconcat$c ?v1)) (lconcat$c ?v2)))) :named a108))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist_llist_llist$) (?v2 A_llist_llist_llist$)) (=> (fun_app$b (fun_app$c (llist_all2$b (llist_all2$e ?v0)) ?v1) ?v2) (fun_app$f (fun_app$g (llist_all2$e ?v0) (lconcat$b ?v1)) (lconcat$b ?v2)))) :named a109))
(assert (! (forall ((?v0 A_a_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 A_llist_llist_llist$)) (=> (llist_all2$r (llist_all2$j ?v0) ?v1 ?v2) (fun_app$f (fun_app$u (llist_all2$j ?v0) (lconcat$ ?v1)) (lconcat$b ?v2)))) :named a110))
(assert (! (forall ((?v0 A_b_llist_bool_fun_fun$) (?v1 A_llist_llist$) (?v2 B_llist_llist_llist$)) (=> (llist_all2$s (llist_all2$k ?v0) ?v1 ?v2) (fun_app$d (fun_app$v (llist_all2$k ?v0) (lconcat$ ?v1)) (lconcat$c ?v2)))) :named a111))
(assert (! (forall ((?v0 B_a_llist_bool_fun_fun$) (?v1 B_llist_llist$) (?v2 A_llist_llist_llist$)) (=> (llist_all2$t (llist_all2$l ?v0) ?v1 ?v2) (fun_app$f (fun_app$w (llist_all2$l ?v0) (lconcat$a ?v1)) (lconcat$b ?v2)))) :named a112))
(check-sat)
;(get-unsat-core)
