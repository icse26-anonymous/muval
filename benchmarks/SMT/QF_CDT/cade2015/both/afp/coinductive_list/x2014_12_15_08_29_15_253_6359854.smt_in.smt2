; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 606
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun y$ () A$)
(declare-fun xs$ () A_list$)
(declare-fun ys$ () A_list$)
(declare-fun zs$ () A_list$)
(declare-fun xs$a () A_list$)
(declare-fun ys$a () A_list$)
(declare-fun ys$b () A_llist$)
(declare-fun zs$a () A_llist$)
(declare-fun append$ (A_list$ A_list$) A_list$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun llist_of$ (A_list$) A_llist$)
(assert (! (not (= ys$ (append$ zs$ (cons$ y$ ys$a)))) :named a0))
(assert (! (=> (forall ((?v0 A_list$)) (=> (= ys$b (llist_of$ ?v0)) false)) false) :named a1))
(assert (! (=> (forall ((?v0 A_list$)) (=> (= zs$a (llist_of$ ?v0)) false)) false) :named a2))
(assert (! (= (llist_of$ ys$) (lappend$ zs$a (lCons$ y$ ys$b))) :named a3))
(assert (! (= ys$b (llist_of$ ys$a)) :named a4))
(assert (! (= zs$a (llist_of$ zs$)) :named a5))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (append$ ?v0 ?v1) (append$ ?v0 ?v2)) (= ?v1 ?v2))) :named a6))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (append$ ?v0 ?v1) (append$ ?v2 ?v1)) (= ?v0 ?v2))) :named a7))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (append$ (append$ ?v0 ?v1) ?v2) (append$ ?v0 (append$ ?v1 ?v2)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a9))
(assert (! (= xs$ (append$ zs$ xs$a)) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$)) (! (= (append$ (cons$ ?v0 ?v1) ?v2) (cons$ ?v0 (append$ ?v1 ?v2))) :pattern ((append$ (cons$ ?v0 ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (and (= (cons$ ?v0 ?v1) ?v2) (= ?v3 (append$ ?v1 ?v4))) (= (cons$ ?v0 ?v3) (append$ ?v2 ?v4)))) :named a12))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a13))
(assert (! (lfinite$ zs$a) :named a14))
(assert (! (lfinite$ (llist_of$ ys$)) :named a15))
(assert (! (lfinite$ ys$b) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a17))
(check-sat)
;(get-unsat-core)
