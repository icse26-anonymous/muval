; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 532
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_llist_a_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_a_prod_llist_set$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort A_a_prod_llist_bool_fun$ 0)
(declare-sort A_a_a_prod_prod_bool_fun$ 0)
(declare-sort A_a_prod_a_prod_bool_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort A_a_a_prod_prod_llist_bool_fun$ 0)
(declare-sort A_a_prod_a_prod_llist_bool_fun$ 0)
(declare-sort A_a_prod_a_a_prod_prod_bool_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0)
(declare-sort A_a_prod_a_a_prod_prod_llist_bool_fun$ 0)
(declare-sort A_a_a_prod_prod_llist_a_a_a_prod_prod_fun$ 0)
(declare-sort A_a_prod_a_prod_llist_a_a_prod_a_prod_fun$ 0)
(declare-sort A_a_prod_llist_a_a_prod_llist_bool_fun_fun$ 0)
(declare-sort A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$ 0)
(declare-sort A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$ 0)
(declare-sort A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_fun$ 0)
(declare-sort A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_bool_fun_fun$ 0)
(declare-sort A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_bool_fun_fun$ 0)
(declare-sort A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ 0)
(declare-sort A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_bool_fun_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_a_prod$ (pair$ (fst$ A$) (snd$ A$)))))
(declare-codatatypes () ((A_a_prod_llist$ (lNil$a) (lCons$a (lhd$a A_a_prod$) (ltl$a A_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod$ (pair$a (fst$a A$) (snd$a A_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_prod_llist$ (lNil$b) (lCons$b (lhd$b A_a_a_prod_prod$) (ltl$b A_a_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_prod$ (pair$b (fst$b A_a_prod$) (snd$b A$)))))
(declare-codatatypes () ((A_a_prod_a_prod_llist$ (lNil$c) (lCons$c (lhd$c A_a_prod_a_prod$) (ltl$c A_a_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_a_prod_prod$ (pair$c (fst$c A_a_prod$) (snd$c A_a_prod$)))))
(declare-codatatypes () ((A_a_prod_a_a_prod_prod_llist$ (lNil$d) (lCons$d (lhd$d A_a_prod_a_a_prod_prod$) (ltl$d A_a_prod_a_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod_a_prod$ (pair$d (fst$d A_a_a_prod_prod$) (snd$d A$)))))
(declare-codatatypes () ((A_a_a_prod_prod_a_prod_llist$ (lNil$e) (lCons$e (lhd$e A_a_a_prod_prod_a_prod$) (ltl$e A_a_a_prod_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_prod_a_prod$ (pair$e (fst$e A_a_prod_a_prod$) (snd$e A$)))))
(declare-codatatypes () ((A_a_prod_a_prod_a_prod_llist$ (lNil$f) (lCons$f (lhd$f A_a_prod_a_prod_a_prod$) (ltl$f A_a_prod_a_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_a_prod_prod_prod$ (pair$f (fst$f A$) (snd$f A_a_a_prod_prod$)))))
(declare-codatatypes () ((A_a_a_a_prod_prod_prod_llist$ (lNil$g) (lCons$g (lhd$g A_a_a_a_prod_prod_prod$) (ltl$g A_a_a_a_prod_prod_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_a_prod_prod$ (pair$g (fst$g A$) (snd$g A_a_prod_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_a_prod_prod_llist$ (lNil$h) (lCons$h (lhd$h A_a_a_prod_a_prod_prod$) (ltl$h A_a_a_prod_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_a_prod_prod_a_prod$ (pair$h (fst$h A_a_prod_a_a_prod_prod$) (snd$h A$)))))
(declare-codatatypes () ((A_a_prod_a_a_prod_prod_a_prod_llist$ (lNil$i) (lCons$i (lhd$i A_a_prod_a_a_prod_prod_a_prod$) (ltl$i A_a_prod_a_a_prod_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod_a_a_prod_prod$ (pair$i (fst$i A_a_a_prod_prod$) (snd$i A_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_prod_a_a_prod_prod_llist$ (lNil$j) (lCons$j (lhd$j A_a_a_prod_prod_a_a_prod_prod$) (ltl$j A_a_a_prod_prod_a_a_prod_prod_llist$)))))
(declare-fun uu$ () A_a_a_prod_prod_llist_a_a_a_prod_prod_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun uua$ () A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$)
(declare-fun uub$ () A_a_prod_a_prod_llist_a_a_prod_a_prod_fun$)
(declare-fun uuc$ () A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$)
(declare-fun uud$ () A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_fun$)
(declare-fun uue$ () A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$)
(declare-fun uuf$ () A_a_prod_llist_a_a_prod_fun$)
(declare-fun uug$ () A_a_prod_llist_a_a_prod_llist_fun$)
(declare-fun uuh$ () A_llist_a_fun$)
(declare-fun uui$ () A_llist_a_llist_fun$)
(declare-fun llcp$ (A_llist$ A_llist$) Enat$)
(declare-fun lzip$ (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun zero$ () Enat$)
(declare-fun epred$ (Enat$) Enat$)
(declare-fun llcp$a (A_a_prod_llist$ A_a_prod_llist$) Enat$)
(declare-fun lnull$ () A_llist_bool_fun$)
(declare-fun lzip$a (A_a_prod_llist$ A_llist$) A_a_prod_a_prod_llist$)
(declare-fun lzip$b (A_llist$ A_a_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun lzip$c (A_a_prod_llist$ A_a_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lzip$d (A_a_a_prod_prod_llist$ A_llist$) A_a_a_prod_prod_a_prod_llist$)
(declare-fun lzip$e (A_a_prod_a_prod_llist$ A_llist$) A_a_prod_a_prod_a_prod_llist$)
(declare-fun lzip$f (A_llist$ A_a_a_prod_prod_llist$) A_a_a_a_prod_prod_prod_llist$)
(declare-fun lzip$g (A_llist$ A_a_prod_a_prod_llist$) A_a_a_prod_a_prod_prod_llist$)
(declare-fun lzip$h (A_a_prod_a_a_prod_prod_llist$ A_llist$) A_a_prod_a_a_prod_prod_a_prod_llist$)
(declare-fun lzip$i (A_a_a_prod_prod_llist$ A_a_prod_llist$) A_a_a_prod_prod_a_a_prod_prod_llist$)
(declare-fun lnull$a () A_a_prod_llist_bool_fun$)
(declare-fun lnull$b () A_a_a_prod_prod_llist_bool_fun$)
(declare-fun lnull$c () A_a_prod_a_prod_llist_bool_fun$)
(declare-fun lnull$d () A_a_prod_a_a_prod_prod_llist_bool_fun$)
(declare-fun member$ (A_a_prod_llist$ A_a_prod_llist_set$) Bool)
(declare-fun fun_app$ (A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun member$a (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$a (A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$ A_a_prod_a_prod_llist$) A_a_prod_a_prod_llist$)
(declare-fun fun_app$b (A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun fun_app$c (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun fun_app$d (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun fun_app$e (A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_fun$ A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod$)
(declare-fun fun_app$f (A_a_prod_a_prod_llist_a_a_prod_a_prod_fun$ A_a_prod_a_prod_llist$) A_a_prod_a_prod$)
(declare-fun fun_app$g (A_a_a_prod_prod_llist_a_a_a_prod_prod_fun$ A_a_a_prod_prod_llist$) A_a_a_prod_prod$)
(declare-fun fun_app$h (A_a_prod_llist_a_a_prod_fun$ A_a_prod_llist$) A_a_prod$)
(declare-fun fun_app$i (A_llist_a_fun$ A_llist$) A$)
(declare-fun fun_app$j (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$k (A_a_prod_llist_bool_fun$ A_a_prod_llist$) Bool)
(declare-fun fun_app$l (A_a_prod_bool_fun$ A_a_prod$) Bool)
(declare-fun fun_app$m (A_bool_fun$ A$) Bool)
(declare-fun fun_app$n (A_a_a_prod_prod_llist_bool_fun$ A_a_a_prod_prod_llist$) Bool)
(declare-fun fun_app$o (A_a_prod_a_prod_llist_bool_fun$ A_a_prod_a_prod_llist$) Bool)
(declare-fun fun_app$p (A_a_prod_a_a_prod_prod_llist_bool_fun$ A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun fun_app$q (A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_bool_fun_fun$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist_bool_fun$)
(declare-fun fun_app$r (A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_bool_fun_fun$ A_a_prod_a_prod_llist$) A_a_prod_a_prod_llist_bool_fun$)
(declare-fun fun_app$s (A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_bool_fun_fun$ A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_llist_bool_fun$)
(declare-fun fun_app$t (A_a_prod_llist_a_a_prod_llist_bool_fun_fun$ A_a_prod_llist$) A_a_prod_llist_bool_fun$)
(declare-fun fun_app$u (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$v (A_a_a_prod_prod_bool_fun$ A_a_a_prod_prod$) Bool)
(declare-fun fun_app$w (A_a_prod_a_prod_bool_fun$ A_a_prod_a_prod$) Bool)
(declare-fun fun_app$x (A_a_prod_a_a_prod_prod_bool_fun$ A_a_prod_a_a_prod_prod$) Bool)
(declare-fun ltakeWhile$ (A_a_a_prod_prod_bool_fun$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun ltakeWhile$a (A_a_prod_a_prod_bool_fun$ A_a_prod_a_prod_llist$) A_a_prod_a_prod_llist$)
(declare-fun ltakeWhile$b (A_a_prod_a_a_prod_prod_bool_fun$ A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun ltakeWhile$c (A_a_prod_bool_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun ltakeWhile$d (A_bool_fun$ A_llist$) A_llist$)
(declare-fun unfold_llist$ (A_a_a_prod_prod_llist_bool_fun$ A_a_a_prod_prod_llist_a_a_a_prod_prod_fun$ A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_fun$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun unfold_llist$a (A_a_prod_a_prod_llist_bool_fun$ A_a_prod_a_prod_llist_a_a_prod_a_prod_fun$ A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_fun$ A_a_prod_a_prod_llist$) A_a_prod_a_prod_llist$)
(declare-fun unfold_llist$b (A_a_prod_a_a_prod_prod_llist_bool_fun$ A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_fun$ A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_fun$ A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun unfold_llist$c (A_a_prod_llist_bool_fun$ A_a_prod_llist_a_a_prod_fun$ A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun unfold_llist$d (A_llist_bool_fun$ A_llist_a_fun$ A_llist_a_llist_fun$ A_llist$) A_llist$)
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (! (= (fun_app$ uue$ ?v0) (ltl$d ?v0)) :pattern ((fun_app$ uue$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (! (= (fun_app$a uuc$ ?v0) (ltl$c ?v0)) :pattern ((fun_app$a uuc$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (! (= (fun_app$b uua$ ?v0) (ltl$b ?v0)) :pattern ((fun_app$b uua$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$c uug$ ?v0) (ltl$a ?v0)) :pattern ((fun_app$c uug$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$d uui$ ?v0) (ltl$ ?v0)) :pattern ((fun_app$d uui$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (! (= (fun_app$e uud$ ?v0) (lhd$d ?v0)) :pattern ((fun_app$e uud$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (! (= (fun_app$f uub$ ?v0) (lhd$c ?v0)) :pattern ((fun_app$f uub$ ?v0)))) :named a6))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (! (= (fun_app$g uu$ ?v0) (lhd$b ?v0)) :pattern ((fun_app$g uu$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A_a_prod_llist$)) (! (= (fun_app$h uuf$ ?v0) (lhd$a ?v0)) :pattern ((fun_app$h uuf$ ?v0)))) :named a8))
(assert (! (forall ((?v0 A_llist$)) (! (= (fun_app$i uuh$ ?v0) (lhd$ ?v0)) :pattern ((fun_app$i uuh$ ?v0)))) :named a9))
(assert (! (not (= (epred$ (llcp$ xs$ ys$)) (llcp$ (ltl$ xs$) (ltl$ ys$)))) :named a10))
(assert (! (not (fun_app$j lnull$ xs$)) :named a11))
(assert (! (not (fun_app$j lnull$ ys$)) :named a12))
(assert (! (= (lhd$ xs$) (lhd$ ys$)) :named a13))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_bool_fun$)) (=> (and (=> (or (fun_app$k lnull$a ?v0) (not (fun_app$l ?v1 (lhd$a ?v0)))) false) (=> (and (not (fun_app$k lnull$a ?v0)) (fun_app$l ?v1 (lhd$a ?v0))) false)) false)) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (fun_app$j lnull$ ?v0) (not (fun_app$m ?v1 (lhd$ ?v0)))) false) (=> (and (not (fun_app$j lnull$ ?v0)) (fun_app$m ?v1 (lhd$ ?v0))) false)) false)) :named a15))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (fun_app$j lnull$ ?v0) (fun_app$k lnull$a ?v1)) false) (=> (and (not (fun_app$j lnull$ ?v0)) (not (fun_app$k lnull$a ?v1))) false)) false)) :named a16))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (=> (and (=> (or (fun_app$k lnull$a ?v0) (fun_app$j lnull$ ?v1)) false) (=> (and (not (fun_app$k lnull$a ?v0)) (not (fun_app$j lnull$ ?v1))) false)) false)) :named a17))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (fun_app$k lnull$a ?v0) (fun_app$k lnull$a ?v1)) false) (=> (and (not (fun_app$k lnull$a ?v0)) (not (fun_app$k lnull$a ?v1))) false)) false)) :named a18))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (fun_app$j lnull$ ?v0) (fun_app$j lnull$ ?v1)) false) (=> (and (not (fun_app$j lnull$ ?v0)) (not (fun_app$j lnull$ ?v1))) false)) false)) :named a19))
(assert (! (forall ((?v0 A_a_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_a_prod_llist$)) (=> (member$ ?v1 ?v0) (fun_app$k lnull$a ?v1))) false) (=> (not (forall ((?v1 A_a_prod_llist$)) (=> (member$ ?v1 ?v0) (fun_app$k lnull$a ?v1)))) false)) false)) :named a20))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$a ?v1 ?v0) (fun_app$j lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$a ?v1 ?v0) (fun_app$j lnull$ ?v1)))) false)) false)) :named a21))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (and (fun_app$k lnull$a ?v0) (fun_app$k lnull$a ?v1)) false) (=> (or (not (fun_app$k lnull$a ?v0)) (not (fun_app$k lnull$a ?v1))) false)) false)) :named a22))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (fun_app$j lnull$ ?v0) (fun_app$j lnull$ ?v1)) false) (=> (or (not (fun_app$j lnull$ ?v0)) (not (fun_app$j lnull$ ?v1))) false)) false)) :named a23))
(assert (! (forall ((?v0 A_a_prod_llist$)) (=> (and (=> (fun_app$k lnull$a ?v0) false) (=> (not (fun_app$k lnull$a ?v0)) false)) false)) :named a24))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (fun_app$j lnull$ ?v0) false) (=> (not (fun_app$j lnull$ ?v0)) false)) false)) :named a25))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_a_a_prod_prod_llist$)) (=> (and (= (fun_app$n lnull$b ?v0) (fun_app$n lnull$b ?v1)) (=> (and (not (fun_app$n lnull$b ?v0)) (not (fun_app$n lnull$b ?v1))) (and (= (lhd$b ?v0) (lhd$b ?v1)) (= (ltl$b ?v0) (ltl$b ?v1))))) (= ?v0 ?v1))) :named a26))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_a_prod_a_prod_llist$)) (=> (and (= (fun_app$o lnull$c ?v0) (fun_app$o lnull$c ?v1)) (=> (and (not (fun_app$o lnull$c ?v0)) (not (fun_app$o lnull$c ?v1))) (and (= (lhd$c ?v0) (lhd$c ?v1)) (= (ltl$c ?v0) (ltl$c ?v1))))) (= ?v0 ?v1))) :named a27))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (=> (and (= (fun_app$p lnull$d ?v0) (fun_app$p lnull$d ?v1)) (=> (and (not (fun_app$p lnull$d ?v0)) (not (fun_app$p lnull$d ?v1))) (and (= (lhd$d ?v0) (lhd$d ?v1)) (= (ltl$d ?v0) (ltl$d ?v1))))) (= ?v0 ?v1))) :named a28))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (= (fun_app$k lnull$a ?v0) (fun_app$k lnull$a ?v1)) (=> (and (not (fun_app$k lnull$a ?v0)) (not (fun_app$k lnull$a ?v1))) (and (= (lhd$a ?v0) (lhd$a ?v1)) (= (ltl$a ?v0) (ltl$a ?v1))))) (= ?v0 ?v1))) :named a29))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (= (fun_app$j lnull$ ?v0) (fun_app$j lnull$ ?v1)) (=> (and (not (fun_app$j lnull$ ?v0)) (not (fun_app$j lnull$ ?v1))) (and (= (lhd$ ?v0) (lhd$ ?v1)) (= (ltl$ ?v0) (ltl$ ?v1))))) (= ?v0 ?v1))) :named a30))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (=> (fun_app$n lnull$b ?v0) (fun_app$n lnull$b (ltl$b ?v0)))) :named a31))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (=> (fun_app$o lnull$c ?v0) (fun_app$o lnull$c (ltl$c ?v0)))) :named a32))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (=> (fun_app$p lnull$d ?v0) (fun_app$p lnull$d (ltl$d ?v0)))) :named a33))
(assert (! (forall ((?v0 A_a_prod_llist$)) (=> (fun_app$k lnull$a ?v0) (fun_app$k lnull$a (ltl$a ?v0)))) :named a34))
(assert (! (forall ((?v0 A_llist$)) (=> (fun_app$j lnull$ ?v0) (fun_app$j lnull$ (ltl$ ?v0)))) :named a35))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_bool_fun_fun$) (?v1 A_a_a_prod_prod_llist$) (?v2 A_a_a_prod_prod_llist$)) (=> (and (fun_app$n (fun_app$q ?v0 ?v1) ?v2) (forall ((?v3 A_a_a_prod_prod_llist$) (?v4 A_a_a_prod_prod_llist$)) (=> (fun_app$n (fun_app$q ?v0 ?v3) ?v4) (and (= (fun_app$n lnull$b ?v3) (fun_app$n lnull$b ?v4)) (=> (and (not (fun_app$n lnull$b ?v3)) (not (fun_app$n lnull$b ?v4))) (and (= (lhd$b ?v3) (lhd$b ?v4)) (or (fun_app$n (fun_app$q ?v0 (ltl$b ?v3)) (ltl$b ?v4)) (= (ltl$b ?v3) (ltl$b ?v4))))))))) (= ?v1 ?v2))) :named a36))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_bool_fun_fun$) (?v1 A_a_prod_a_prod_llist$) (?v2 A_a_prod_a_prod_llist$)) (=> (and (fun_app$o (fun_app$r ?v0 ?v1) ?v2) (forall ((?v3 A_a_prod_a_prod_llist$) (?v4 A_a_prod_a_prod_llist$)) (=> (fun_app$o (fun_app$r ?v0 ?v3) ?v4) (and (= (fun_app$o lnull$c ?v3) (fun_app$o lnull$c ?v4)) (=> (and (not (fun_app$o lnull$c ?v3)) (not (fun_app$o lnull$c ?v4))) (and (= (lhd$c ?v3) (lhd$c ?v4)) (or (fun_app$o (fun_app$r ?v0 (ltl$c ?v3)) (ltl$c ?v4)) (= (ltl$c ?v3) (ltl$c ?v4))))))))) (= ?v1 ?v2))) :named a37))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_bool_fun_fun$) (?v1 A_a_prod_a_a_prod_prod_llist$) (?v2 A_a_prod_a_a_prod_prod_llist$)) (=> (and (fun_app$p (fun_app$s ?v0 ?v1) ?v2) (forall ((?v3 A_a_prod_a_a_prod_prod_llist$) (?v4 A_a_prod_a_a_prod_prod_llist$)) (=> (fun_app$p (fun_app$s ?v0 ?v3) ?v4) (and (= (fun_app$p lnull$d ?v3) (fun_app$p lnull$d ?v4)) (=> (and (not (fun_app$p lnull$d ?v3)) (not (fun_app$p lnull$d ?v4))) (and (= (lhd$d ?v3) (lhd$d ?v4)) (or (fun_app$p (fun_app$s ?v0 (ltl$d ?v3)) (ltl$d ?v4)) (= (ltl$d ?v3) (ltl$d ?v4))))))))) (= ?v1 ?v2))) :named a38))
(assert (! (forall ((?v0 A_a_prod_llist_a_a_prod_llist_bool_fun_fun$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (=> (and (fun_app$k (fun_app$t ?v0 ?v1) ?v2) (forall ((?v3 A_a_prod_llist$) (?v4 A_a_prod_llist$)) (=> (fun_app$k (fun_app$t ?v0 ?v3) ?v4) (and (= (fun_app$k lnull$a ?v3) (fun_app$k lnull$a ?v4)) (=> (and (not (fun_app$k lnull$a ?v3)) (not (fun_app$k lnull$a ?v4))) (and (= (lhd$a ?v3) (lhd$a ?v4)) (or (fun_app$k (fun_app$t ?v0 (ltl$a ?v3)) (ltl$a ?v4)) (= (ltl$a ?v3) (ltl$a ?v4))))))))) (= ?v1 ?v2))) :named a39))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$j (fun_app$u ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$j (fun_app$u ?v0 ?v3) ?v4) (and (= (fun_app$j lnull$ ?v3) (fun_app$j lnull$ ?v4)) (=> (and (not (fun_app$j lnull$ ?v3)) (not (fun_app$j lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (or (fun_app$j (fun_app$u ?v0 (ltl$ ?v3)) (ltl$ ?v4)) (= (ltl$ ?v3) (ltl$ ?v4))))))))) (= ?v1 ?v2))) :named a40))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist_a_a_a_prod_prod_llist_bool_fun_fun$) (?v1 A_a_a_prod_prod_llist$) (?v2 A_a_a_prod_prod_llist$)) (=> (and (fun_app$n (fun_app$q ?v0 ?v1) ?v2) (forall ((?v3 A_a_a_prod_prod_llist$) (?v4 A_a_a_prod_prod_llist$)) (=> (fun_app$n (fun_app$q ?v0 ?v3) ?v4) (and (= (fun_app$n lnull$b ?v3) (fun_app$n lnull$b ?v4)) (=> (and (not (fun_app$n lnull$b ?v3)) (not (fun_app$n lnull$b ?v4))) (and (= (lhd$b ?v3) (lhd$b ?v4)) (fun_app$n (fun_app$q ?v0 (ltl$b ?v3)) (ltl$b ?v4)))))))) (= ?v1 ?v2))) :named a41))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist_a_a_prod_a_prod_llist_bool_fun_fun$) (?v1 A_a_prod_a_prod_llist$) (?v2 A_a_prod_a_prod_llist$)) (=> (and (fun_app$o (fun_app$r ?v0 ?v1) ?v2) (forall ((?v3 A_a_prod_a_prod_llist$) (?v4 A_a_prod_a_prod_llist$)) (=> (fun_app$o (fun_app$r ?v0 ?v3) ?v4) (and (= (fun_app$o lnull$c ?v3) (fun_app$o lnull$c ?v4)) (=> (and (not (fun_app$o lnull$c ?v3)) (not (fun_app$o lnull$c ?v4))) (and (= (lhd$c ?v3) (lhd$c ?v4)) (fun_app$o (fun_app$r ?v0 (ltl$c ?v3)) (ltl$c ?v4)))))))) (= ?v1 ?v2))) :named a42))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist_a_a_prod_a_a_prod_prod_llist_bool_fun_fun$) (?v1 A_a_prod_a_a_prod_prod_llist$) (?v2 A_a_prod_a_a_prod_prod_llist$)) (=> (and (fun_app$p (fun_app$s ?v0 ?v1) ?v2) (forall ((?v3 A_a_prod_a_a_prod_prod_llist$) (?v4 A_a_prod_a_a_prod_prod_llist$)) (=> (fun_app$p (fun_app$s ?v0 ?v3) ?v4) (and (= (fun_app$p lnull$d ?v3) (fun_app$p lnull$d ?v4)) (=> (and (not (fun_app$p lnull$d ?v3)) (not (fun_app$p lnull$d ?v4))) (and (= (lhd$d ?v3) (lhd$d ?v4)) (fun_app$p (fun_app$s ?v0 (ltl$d ?v3)) (ltl$d ?v4)))))))) (= ?v1 ?v2))) :named a43))
(assert (! (forall ((?v0 A_a_prod_llist_a_a_prod_llist_bool_fun_fun$) (?v1 A_a_prod_llist$) (?v2 A_a_prod_llist$)) (=> (and (fun_app$k (fun_app$t ?v0 ?v1) ?v2) (forall ((?v3 A_a_prod_llist$) (?v4 A_a_prod_llist$)) (=> (fun_app$k (fun_app$t ?v0 ?v3) ?v4) (and (= (fun_app$k lnull$a ?v3) (fun_app$k lnull$a ?v4)) (=> (and (not (fun_app$k lnull$a ?v3)) (not (fun_app$k lnull$a ?v4))) (and (= (lhd$a ?v3) (lhd$a ?v4)) (fun_app$k (fun_app$t ?v0 (ltl$a ?v3)) (ltl$a ?v4)))))))) (= ?v1 ?v2))) :named a44))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (fun_app$j (fun_app$u ?v0 ?v1) ?v2) (forall ((?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$j (fun_app$u ?v0 ?v3) ?v4) (and (= (fun_app$j lnull$ ?v3) (fun_app$j lnull$ ?v4)) (=> (and (not (fun_app$j lnull$ ?v3)) (not (fun_app$j lnull$ ?v4))) (and (= (lhd$ ?v3) (lhd$ ?v4)) (fun_app$j (fun_app$u ?v0 (ltl$ ?v3)) (ltl$ ?v4)))))))) (= ?v1 ?v2))) :named a45))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (= (unfold_llist$ lnull$b uu$ uua$ ?v0) ?v0)) :named a46))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (= (unfold_llist$a lnull$c uub$ uuc$ ?v0) ?v0)) :named a47))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (= (unfold_llist$b lnull$d uud$ uue$ ?v0) ?v0)) :named a48))
(assert (! (forall ((?v0 A_a_prod_llist$)) (= (unfold_llist$c lnull$a uuf$ uug$ ?v0) ?v0)) :named a49))
(assert (! (forall ((?v0 A_llist$)) (= (unfold_llist$d lnull$ uuh$ uui$ ?v0) ?v0)) :named a50))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_a_a_prod_prod_bool_fun$)) (=> (and (not (fun_app$n lnull$b ?v0)) (fun_app$v ?v1 (lhd$b ?v0))) (= (ltl$b (ltakeWhile$ ?v1 ?v0)) (ltakeWhile$ ?v1 (ltl$b ?v0))))) :named a51))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_a_prod_a_prod_bool_fun$)) (=> (and (not (fun_app$o lnull$c ?v0)) (fun_app$w ?v1 (lhd$c ?v0))) (= (ltl$c (ltakeWhile$a ?v1 ?v0)) (ltakeWhile$a ?v1 (ltl$c ?v0))))) :named a52))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$) (?v1 A_a_prod_a_a_prod_prod_bool_fun$)) (=> (and (not (fun_app$p lnull$d ?v0)) (fun_app$x ?v1 (lhd$d ?v0))) (= (ltl$d (ltakeWhile$b ?v1 ?v0)) (ltakeWhile$b ?v1 (ltl$d ?v0))))) :named a53))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_bool_fun$)) (=> (and (not (fun_app$k lnull$a ?v0)) (fun_app$l ?v1 (lhd$a ?v0))) (= (ltl$a (ltakeWhile$c ?v1 ?v0)) (ltakeWhile$c ?v1 (ltl$a ?v0))))) :named a54))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (fun_app$j lnull$ ?v0)) (fun_app$m ?v1 (lhd$ ?v0))) (= (ltl$ (ltakeWhile$d ?v1 ?v0)) (ltakeWhile$d ?v1 (ltl$ ?v0))))) :named a55))
(assert (! (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_llist$)) (= (not (fun_app$k lnull$a (ltakeWhile$c ?v0 ?v1))) (and (not (fun_app$k lnull$a ?v1)) (fun_app$l ?v0 (lhd$a ?v1))))) :named a56))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (not (fun_app$j lnull$ (ltakeWhile$d ?v0 ?v1))) (and (not (fun_app$j lnull$ ?v1)) (fun_app$m ?v0 (lhd$ ?v1))))) :named a57))
(assert (! (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_llist$)) (= (fun_app$k lnull$a (ltakeWhile$c ?v0 ?v1)) (or (fun_app$k lnull$a ?v1) (not (fun_app$l ?v0 (lhd$a ?v1)))))) :named a58))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (fun_app$j lnull$ (ltakeWhile$d ?v0 ?v1)) (or (fun_app$j lnull$ ?v1) (not (fun_app$m ?v0 (lhd$ ?v1)))))) :named a59))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (= (llcp$a ?v0 ?v1) zero$) (or (fun_app$k lnull$a ?v0) (or (fun_app$k lnull$a ?v1) (not (= (lhd$a ?v0) (lhd$a ?v1))))))) :named a60))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (= (llcp$ ?v0 ?v1) zero$) (or (fun_app$j lnull$ ?v0) (or (fun_app$j lnull$ ?v1) (not (= (lhd$ ?v0) (lhd$ ?v1))))))) :named a61))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$j lnull$ ?v0)) (not (fun_app$j lnull$ ?v1))) (= (ltl$a (lzip$ ?v0 ?v1)) (lzip$ (ltl$ ?v0) (ltl$ ?v1))))) :named a62))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$k lnull$a ?v0)) (not (fun_app$j lnull$ ?v1))) (= (ltl$c (lzip$a ?v0 ?v1)) (lzip$a (ltl$a ?v0) (ltl$ ?v1))))) :named a63))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (fun_app$j lnull$ ?v0)) (not (fun_app$k lnull$a ?v1))) (= (ltl$b (lzip$b ?v0 ?v1)) (lzip$b (ltl$ ?v0) (ltl$a ?v1))))) :named a64))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (fun_app$k lnull$a ?v0)) (not (fun_app$k lnull$a ?v1))) (= (ltl$d (lzip$c ?v0 ?v1)) (lzip$c (ltl$a ?v0) (ltl$a ?v1))))) :named a65))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$n lnull$b ?v0)) (not (fun_app$j lnull$ ?v1))) (= (ltl$e (lzip$d ?v0 ?v1)) (lzip$d (ltl$b ?v0) (ltl$ ?v1))))) :named a66))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$o lnull$c ?v0)) (not (fun_app$j lnull$ ?v1))) (= (ltl$f (lzip$e ?v0 ?v1)) (lzip$e (ltl$c ?v0) (ltl$ ?v1))))) :named a67))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_a_prod_prod_llist$)) (=> (and (not (fun_app$j lnull$ ?v0)) (not (fun_app$n lnull$b ?v1))) (= (ltl$g (lzip$f ?v0 ?v1)) (lzip$f (ltl$ ?v0) (ltl$b ?v1))))) :named a68))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_prod_llist$)) (=> (and (not (fun_app$j lnull$ ?v0)) (not (fun_app$o lnull$c ?v1))) (= (ltl$h (lzip$g ?v0 ?v1)) (lzip$g (ltl$ ?v0) (ltl$c ?v1))))) :named a69))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$) (?v1 A_llist$)) (=> (and (not (fun_app$p lnull$d ?v0)) (not (fun_app$j lnull$ ?v1))) (= (ltl$i (lzip$h ?v0 ?v1)) (lzip$h (ltl$d ?v0) (ltl$ ?v1))))) :named a70))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (not (fun_app$n lnull$b ?v0)) (not (fun_app$k lnull$a ?v1))) (= (ltl$j (lzip$i ?v0 ?v1)) (lzip$i (ltl$b ?v0) (ltl$a ?v1))))) :named a71))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (=> (not (fun_app$n lnull$b ?v0)) (= (lCons$b (lhd$b ?v0) (ltl$b ?v0)) ?v0))) :named a72))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (=> (not (fun_app$o lnull$c ?v0)) (= (lCons$c (lhd$c ?v0) (ltl$c ?v0)) ?v0))) :named a73))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (=> (not (fun_app$p lnull$d ?v0)) (= (lCons$d (lhd$d ?v0) (ltl$d ?v0)) ?v0))) :named a74))
(assert (! (forall ((?v0 A_a_prod_llist$)) (=> (not (fun_app$k lnull$a ?v0)) (= (lCons$a (lhd$a ?v0) (ltl$a ?v0)) ?v0))) :named a75))
(assert (! (forall ((?v0 A_llist$)) (=> (not (fun_app$j lnull$ ?v0)) (= (lCons$ (lhd$ ?v0) (ltl$ ?v0)) ?v0))) :named a76))
(check-sat)
;(get-unsat-core)
