; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 613
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun r$ () A_a_bool_fun_fun$)
(declare-fun y$ () A$)
(declare-fun xs$ () A_list$)
(declare-fun ys$ () A_list$)
(declare-fun zs$ () A_llist$)
(declare-fun xs$a () A_llist$)
(declare-fun ys$a () A_llist$)
(declare-fun drop$ (Nat$ A_list$) A_list$)
(declare-fun last$ (A_list$) A$)
(declare-fun llast$ (A_llist$) A$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun thesis$ () Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun list_of$ (A_llist$) A_list$)
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$) Bool)
(declare-fun distinct$ (A_list$) Bool)
(declare-fun llist_of$ (A_list$) A_llist$)
(declare-fun ldistinct$ (A_llist$) Bool)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 A_list$)) (=> (= zs$ (llist_of$ ?v0)) thesis$)) :named a1))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (lfinite$ zs$) :named a3))
(assert (! (= (llist_of$ xs$) (lappend$ zs$ xs$a)) :named a4))
(assert (! (= (llist_of$ ys$) (lappend$ zs$ (lCons$ y$ ys$a))) :named a5))
(assert (! (forall ((?v0 A_list$)) (= (list_of$ (llist_of$ ?v0)) ?v0)) :named a6))
(assert (! (llexord$ r$ (llist_of$ xs$) (llist_of$ ys$)) :named a7))
(assert (! (forall ((?v0 A_list$)) (lfinite$ (llist_of$ ?v0))) :named a8))
(assert (! (forall ((?v0 A_list$)) (= (llast$ (llist_of$ ?v0)) (last$ ?v0))) :named a9))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$ ?v0) (= (llist_of$ (list_of$ ?v0)) ?v0))) :named a10))
(assert (! (forall ((?v0 A_list$)) (= (ldistinct$ (llist_of$ ?v0)) (distinct$ ?v0))) :named a11))
(assert (! (forall ((?v0 A_list$)) (= (lhd$ (llist_of$ ?v0)) (hd$ ?v0))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 A_list$)) (= (ldropn$ ?v0 (llist_of$ ?v1)) (llist_of$ (drop$ ?v0 ?v1)))) :named a13))
(assert (! (forall ((?v0 A_list$)) (= (lnull$ (llist_of$ ?v0)) (= ?v0 nil$))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (llexord$ ?v0 ?v1 ?v1)) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (lappend$ (lCons$ ?v0 ?v1) ?v2) (lCons$ ?v0 (lappend$ ?v1 ?v2))) :pattern ((lappend$ (lCons$ ?v0 ?v1) ?v2)))) :named a17))
(check-sat)
;(get-unsat-core)
