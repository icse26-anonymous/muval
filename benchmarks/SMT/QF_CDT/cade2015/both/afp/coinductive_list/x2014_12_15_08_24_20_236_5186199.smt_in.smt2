; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 610
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_llist_bool_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort B_llist_bool_fun$ 0)
(declare-sort A_llist_a_llist_bool_fun_fun$ 0)
(declare-sort B_llist_b_llist_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun p$ () A_b_bool_fun_fun$)
(declare-fun uu$ () B_b_bool_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () B_llist$)
(declare-fun uua$ () B_llist_b_llist_bool_fun_fun$)
(declare-fun uub$ () A_a_bool_fun_fun$)
(declare-fun uuc$ () A_llist_a_llist_bool_fun_fun$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$) Enat_bool_fun$)
(declare-fun lmap$ (A_a_fun$ A_llist$) A_llist$)
(declare-fun lnth$ (A_llist$ Nat$) A$)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun lmap$a (A_b_fun$ A_llist$) B_llist$)
(declare-fun lmap$b (B_a_fun$ B_llist$) A_llist$)
(declare-fun lmap$c (B_b_fun$ B_llist$) B_llist$)
(declare-fun lnth$a (B_llist$ Nat$) B$)
(declare-fun lset$a (B_llist$) B_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$) Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun member$a (B$ B_set$) Bool)
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$) B_llist_bool_fun$)
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$) Bool)
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$) A_llist_bool_fun$)
(declare-fun fun_app$d (B_bool_fun$ B$) Bool)
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$f (A_bool_fun$ A$) Bool)
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$h (Enat_bool_fun$ Enat$) Bool)
(declare-fun fun_app$i (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$j (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$k (A_a_fun$ A$) A$)
(declare-fun fun_app$l (A_b_fun$ A$) B$)
(declare-fun fun_app$m (B_a_fun$ B$) A$)
(declare-fun fun_app$n (B_b_fun$ B$) B$)
(declare-fun lappend$a (B_llist$ B_llist$) B_llist$)
(declare-fun llength$a (B_llist$) Enat$)
(declare-fun lprefix$a (B_llist$ B_llist$) Bool)
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ B_llist$) Bool)
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun llist_all2$a (B_b_bool_fun_fun$) B_llist_b_llist_bool_fun_fun$)
(declare-fun llist_all2$b (A_a_bool_fun_fun$) A_llist_a_llist_bool_fun_fun$)
(declare-fun llist_all2$c (B_a_bool_fun_fun$ B_llist$ A_llist$) Bool)
(declare-fun ltakeWhile$a (B_bool_fun$ B_llist$) B_llist$)
(declare-fun lstrict_prefix$ (A_llist$ A_llist$) Bool)
(declare-fun lstrict_prefix$a (B_llist$ B_llist$) Bool)
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (! (= (fun_app$ (fun_app$a uua$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uua$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (! (= (fun_app$b (fun_app$c uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c uuc$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$d (fun_app$e uu$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (fun_app$e uu$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$f (fun_app$g uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$f (fun_app$g uub$ ?v0) ?v1)))) :named a3))
(assert (! (not (= (llist_all2$ p$ xs$ ys$) (and (= (llength$ xs$) (llength$a ys$)) (forall ((?v0 Nat$)) (=> (fun_app$h (less$ (enat$ ?v0)) (llength$a ys$)) (fun_app$d (fun_app$i p$ (lnth$ xs$ ?v0)) (lnth$a ys$ ?v0))))))) :named a4))
(assert (! (= (llist_all2$a uu$) uua$) :named a5))
(assert (! (= (llist_all2$b uub$) uuc$) :named a6))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 Nat$)) (=> (and (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) ?v2) (fun_app$h (less$ (enat$ ?v3)) (llength$ ?v2))) (fun_app$f (fun_app$g ?v0 (lnth$ ?v1 ?v3)) (lnth$ ?v2 ?v3)))) :named a7))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$) (?v3 Nat$)) (=> (and (llist_all2$c ?v0 ?v1 ?v2) (fun_app$h (less$ (enat$ ?v3)) (llength$ ?v2))) (fun_app$f (fun_app$j ?v0 (lnth$a ?v1 ?v3)) (lnth$ ?v2 ?v3)))) :named a8))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$) (?v3 Nat$)) (=> (and (fun_app$ (fun_app$a (llist_all2$a ?v0) ?v1) ?v2) (fun_app$h (less$ (enat$ ?v3)) (llength$a ?v2))) (fun_app$d (fun_app$e ?v0 (lnth$a ?v1 ?v3)) (lnth$a ?v2 ?v3)))) :named a9))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$) (?v3 Nat$)) (=> (and (llist_all2$ ?v0 ?v1 ?v2) (fun_app$h (less$ (enat$ ?v3)) (llength$a ?v2))) (fun_app$d (fun_app$i ?v0 (lnth$ ?v1 ?v3)) (lnth$a ?v2 ?v3)))) :named a10))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 Nat$)) (=> (and (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) ?v2) (fun_app$h (less$ (enat$ ?v3)) (llength$ ?v1))) (fun_app$f (fun_app$g ?v0 (lnth$ ?v1 ?v3)) (lnth$ ?v2 ?v3)))) :named a11))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$) (?v3 Nat$)) (=> (and (llist_all2$c ?v0 ?v1 ?v2) (fun_app$h (less$ (enat$ ?v3)) (llength$a ?v1))) (fun_app$f (fun_app$j ?v0 (lnth$a ?v1 ?v3)) (lnth$ ?v2 ?v3)))) :named a12))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$) (?v3 Nat$)) (=> (and (fun_app$ (fun_app$a (llist_all2$a ?v0) ?v1) ?v2) (fun_app$h (less$ (enat$ ?v3)) (llength$a ?v1))) (fun_app$d (fun_app$e ?v0 (lnth$a ?v1 ?v3)) (lnth$a ?v2 ?v3)))) :named a13))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$) (?v3 Nat$)) (=> (and (llist_all2$ ?v0 ?v1 ?v2) (fun_app$h (less$ (enat$ ?v3)) (llength$ ?v1))) (fun_app$d (fun_app$i ?v0 (lnth$ ?v1 ?v3)) (lnth$a ?v2 ?v3)))) :named a14))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$b (fun_app$c (llist_all2$b ?v0) ?v1) ?v2) (= (llength$ ?v1) (llength$ ?v2)))) :named a15))
(assert (! (forall ((?v0 B_a_bool_fun_fun$) (?v1 B_llist$) (?v2 A_llist$)) (=> (llist_all2$c ?v0 ?v1 ?v2) (= (llength$a ?v1) (llength$ ?v2)))) :named a16))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B_llist$) (?v2 B_llist$)) (=> (fun_app$ (fun_app$a (llist_all2$a ?v0) ?v1) ?v2) (= (llength$a ?v1) (llength$a ?v2)))) :named a17))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_llist$) (?v2 B_llist$)) (=> (llist_all2$ ?v0 ?v1 ?v2) (= (llength$ ?v1) (llength$a ?v2)))) :named a18))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (and (= (llength$ ?v0) (llength$ ?v1)) (forall ((?v3 Nat$)) (=> (fun_app$h (less$ (enat$ ?v3)) (llength$ ?v0)) (fun_app$f (fun_app$g ?v2 (lnth$ ?v0 ?v3)) (lnth$ ?v1 ?v3))))) (fun_app$b (fun_app$c (llist_all2$b ?v2) ?v0) ?v1))) :named a19))
(assert (! (forall ((?v0 B_llist$) (?v1 A_llist$) (?v2 B_a_bool_fun_fun$)) (=> (and (= (llength$a ?v0) (llength$ ?v1)) (forall ((?v3 Nat$)) (=> (fun_app$h (less$ (enat$ ?v3)) (llength$a ?v0)) (fun_app$f (fun_app$j ?v2 (lnth$a ?v0 ?v3)) (lnth$ ?v1 ?v3))))) (llist_all2$c ?v2 ?v0 ?v1))) :named a20))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 B_b_bool_fun_fun$)) (=> (and (= (llength$a ?v0) (llength$a ?v1)) (forall ((?v3 Nat$)) (=> (fun_app$h (less$ (enat$ ?v3)) (llength$a ?v0)) (fun_app$d (fun_app$e ?v2 (lnth$a ?v0 ?v3)) (lnth$a ?v1 ?v3))))) (fun_app$ (fun_app$a (llist_all2$a ?v2) ?v0) ?v1))) :named a21))
(assert (! (forall ((?v0 A_llist$) (?v1 B_llist$) (?v2 A_b_bool_fun_fun$)) (=> (and (= (llength$ ?v0) (llength$a ?v1)) (forall ((?v3 Nat$)) (=> (fun_app$h (less$ (enat$ ?v3)) (llength$ ?v0)) (fun_app$d (fun_app$i ?v2 (lnth$ ?v0 ?v3)) (lnth$a ?v1 ?v3))))) (llist_all2$ ?v2 ?v0 ?v1))) :named a22))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a23))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (fun_app$h (less$ ?v0) (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a24))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_a_fun$)) (=> (fun_app$h (less$ (enat$ ?v0)) (llength$ ?v1)) (= (lnth$ (lmap$ ?v2 ?v1) ?v0) (fun_app$k ?v2 (lnth$ ?v1 ?v0))))) :named a25))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_b_fun$)) (=> (fun_app$h (less$ (enat$ ?v0)) (llength$ ?v1)) (= (lnth$a (lmap$a ?v2 ?v1) ?v0) (fun_app$l ?v2 (lnth$ ?v1 ?v0))))) :named a26))
(assert (! (forall ((?v0 Nat$) (?v1 B_llist$) (?v2 B_a_fun$)) (=> (fun_app$h (less$ (enat$ ?v0)) (llength$a ?v1)) (= (lnth$ (lmap$b ?v2 ?v1) ?v0) (fun_app$m ?v2 (lnth$a ?v1 ?v0))))) :named a27))
(assert (! (forall ((?v0 Nat$) (?v1 B_llist$) (?v2 B_b_fun$)) (=> (fun_app$h (less$ (enat$ ?v0)) (llength$a ?v1)) (= (lnth$a (lmap$c ?v2 ?v1) ?v0) (fun_app$n ?v2 (lnth$a ?v1 ?v0))))) :named a28))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 Nat$)) (=> (and (lprefix$ ?v0 ?v1) (fun_app$h (less$ (enat$ ?v2)) (llength$ ?v0))) (= (lnth$ ?v0 ?v2) (lnth$ ?v1 ?v2)))) :named a29))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$) (?v2 Nat$)) (=> (and (lprefix$a ?v0 ?v1) (fun_app$h (less$ (enat$ ?v2)) (llength$a ?v0))) (= (lnth$a ?v0 ?v2) (lnth$a ?v1 ?v2)))) :named a30))
(assert (! (forall ((?v0 Nat$) (?v1 A_bool_fun$) (?v2 A_llist$)) (=> (fun_app$h (less$ (enat$ ?v0)) (llength$ (ltakeWhile$ ?v1 ?v2))) (= (lnth$ (ltakeWhile$ ?v1 ?v2) ?v0) (lnth$ ?v2 ?v0)))) :named a31))
(assert (! (forall ((?v0 Nat$) (?v1 B_bool_fun$) (?v2 B_llist$)) (=> (fun_app$h (less$ (enat$ ?v0)) (llength$a (ltakeWhile$a ?v1 ?v2))) (= (lnth$a (ltakeWhile$a ?v1 ?v2) ?v0) (lnth$a ?v2 ?v0)))) :named a32))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (= (member$ ?v0 (lset$ ?v1)) (exists ((?v2 Nat$)) (and (fun_app$h (less$ (enat$ ?v2)) (llength$ ?v1)) (= (lnth$ ?v1 ?v2) ?v0))))) :named a33))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (= (member$a ?v0 (lset$a ?v1)) (exists ((?v2 Nat$)) (and (fun_app$h (less$ (enat$ ?v2)) (llength$a ?v1)) (= (lnth$a ?v1 ?v2) ?v0))))) :named a34))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$) (?v2 A_llist$)) (=> (fun_app$h (less$ (enat$ ?v0)) (llength$ ?v1)) (= (lnth$ (lappend$ ?v1 ?v2) ?v0) (lnth$ ?v1 ?v0)))) :named a35))
(assert (! (forall ((?v0 Nat$) (?v1 B_llist$) (?v2 B_llist$)) (=> (fun_app$h (less$ (enat$ ?v0)) (llength$a ?v1)) (= (lnth$a (lappend$a ?v1 ?v2) ?v0) (lnth$a ?v1 ?v0)))) :named a36))
(assert (! (forall ((?v0 Enat_bool_fun$) (?v1 Enat$)) (=> (forall ((?v2 Enat$)) (=> (forall ((?v3 Enat$)) (=> (fun_app$h (less$ ?v3) ?v2) (fun_app$h ?v0 ?v3))) (fun_app$h ?v0 ?v2))) (fun_app$h ?v0 ?v1))) :named a37))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (lstrict_prefix$ ?v0 ?v1) (fun_app$h (less$ (llength$ ?v0)) (llength$ ?v1)))) :named a38))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (=> (lstrict_prefix$a ?v0 ?v1) (fun_app$h (less$ (llength$a ?v0)) (llength$a ?v1)))) :named a39))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (= ?v0 ?v1)) (or (fun_app$h (less$ ?v0) ?v1) (fun_app$h (less$ ?v1) ?v0)))) :named a40))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$)) (= (not (fun_app$h (less$ ?v0) ?v1)) (or (fun_app$h (less$ ?v1) ?v0) (= ?v0 ?v1)))) :named a41))
(check-sat)
;(get-unsat-core)
