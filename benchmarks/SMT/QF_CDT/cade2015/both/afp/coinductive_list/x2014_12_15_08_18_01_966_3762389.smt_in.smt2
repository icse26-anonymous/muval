; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 491
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_llist_set$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_a_prod_llist_set$ 0)
(declare-sort A_a_prod_a_a_prod_fun$ 0)
(declare-sort A_a_a_prod_prod_bool_fun$ 0)
(declare-sort A_a_prod_a_prod_bool_fun$ 0)
(declare-sort A_a_a_prod_prod_llist_set$ 0)
(declare-sort A_a_prod_a_prod_llist_set$ 0)
(declare-sort A_a_prod_a_a_prod_prod_bool_fun$ 0)
(declare-sort A_a_prod_a_a_prod_prod_llist_set$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_a_prod$ (pair$ (fst$ A$) (snd$ A$)))
  (A_a_prod_a_a_prod_prod$ (pair$a (fst$a A_a_prod$) (snd$a A_a_prod$)))))
(declare-codatatypes () ((A_a_prod_a_a_prod_prod_llist$ (lNil$a) (lCons$a (lhd$a A_a_prod_a_a_prod_prod$) (ltl$a A_a_prod_a_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_prod$ (pair$b (fst$b A_a_prod$) (snd$b A$)))))
(declare-codatatypes () ((A_a_prod_a_prod_llist$ (lNil$b) (lCons$b (lhd$b A_a_prod_a_prod$) (ltl$b A_a_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod$ (pair$c (fst$c A$) (snd$c A_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_prod_llist$ (lNil$c) (lCons$c (lhd$c A_a_a_prod_prod$) (ltl$c A_a_a_prod_prod_llist$)))
  (A_a_prod_llist$ (lNil$d) (lCons$d (lhd$d A_a_prod$) (ltl$d A_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_a_prod_prod$ (pair$d (fst$d A$) (snd$d A_a_prod_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_a_prod_prod_llist$ (lNil$e) (lCons$e (lhd$e A_a_a_prod_a_prod_prod$) (ltl$e A_a_a_prod_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_a_a_prod_prod_prod$ (pair$e (fst$e A$) (snd$e A_a_a_prod_prod$)))))
(declare-codatatypes () ((A_a_a_a_prod_prod_prod_llist$ (lNil$f) (lCons$f (lhd$f A_a_a_a_prod_prod_prod$) (ltl$f A_a_a_a_prod_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_prod_a_prod$ (pair$f (fst$f A_a_prod_a_prod$) (snd$f A$)))))
(declare-codatatypes () ((A_a_prod_a_prod_a_prod_llist$ (lNil$g) (lCons$g (lhd$g A_a_prod_a_prod_a_prod$) (ltl$g A_a_prod_a_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod_a_prod$ (pair$g (fst$g A_a_a_prod_prod$) (snd$g A$)))))
(declare-codatatypes () ((A_a_a_prod_prod_a_prod_llist$ (lNil$h) (lCons$h (lhd$h A_a_a_prod_prod_a_prod$) (ltl$h A_a_a_prod_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_a_a_prod_prod_prod$ (pair$h (fst$h A$) (snd$h A_a_prod_a_a_prod_prod$)))))
(declare-codatatypes () ((A_a_a_prod_a_a_prod_prod_prod_llist$ (lNil$i) (lCons$i (lhd$i A_a_a_prod_a_a_prod_prod_prod$) (ltl$i A_a_a_prod_a_a_prod_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_a_prod_a_prod_prod$ (pair$i (fst$i A_a_prod$) (snd$i A_a_prod_a_prod$)))))
(declare-codatatypes () ((A_a_prod_a_a_prod_a_prod_prod_llist$ (lNil$j) (lCons$j (lhd$j A_a_prod_a_a_prod_a_prod_prod$) (ltl$j A_a_prod_a_a_prod_a_prod_prod_llist$)))))
(declare-fun xs$ () A_llist$)
(declare-fun lnth$ (A_llist$ Nat$) A$)
(declare-fun lzip$ (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun zero$ () Nat$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lzip$a (A_llist$ A_a_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun lzip$b (A_a_prod_llist$ A_llist$) A_a_prod_a_prod_llist$)
(declare-fun lzip$c (A_a_prod_llist$ A_a_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lzip$d (A_llist$ A_a_prod_a_prod_llist$) A_a_a_prod_a_prod_prod_llist$)
(declare-fun lzip$e (A_llist$ A_a_a_prod_prod_llist$) A_a_a_a_prod_prod_prod_llist$)
(declare-fun lzip$f (A_a_prod_a_prod_llist$ A_llist$) A_a_prod_a_prod_a_prod_llist$)
(declare-fun lzip$g (A_a_a_prod_prod_llist$ A_llist$) A_a_a_prod_prod_a_prod_llist$)
(declare-fun lzip$h (A_llist$ A_a_prod_a_a_prod_prod_llist$) A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lzip$i (A_a_prod_llist$ A_a_prod_a_prod_llist$) A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun lnull$a (A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun lnull$b (A_a_prod_a_prod_llist$) Bool)
(declare-fun lnull$c (A_a_a_prod_prod_llist$) Bool)
(declare-fun lnull$d (A_a_prod_llist$) Bool)
(declare-fun lnull$e (A_a_a_prod_a_prod_prod_llist$) Bool)
(declare-fun lnull$f (A_a_a_a_prod_prod_prod_llist$) Bool)
(declare-fun lnull$g (A_a_prod_a_prod_a_prod_llist$) Bool)
(declare-fun lnull$h (A_a_a_prod_prod_a_prod_llist$) Bool)
(declare-fun lnull$i (A_a_a_prod_a_a_prod_prod_prod_llist$) Bool)
(declare-fun lnull$j (A_a_prod_a_a_prod_a_prod_prod_llist$) Bool)
(declare-fun member$ (A_a_prod_a_a_prod_prod_llist$ A_a_prod_a_a_prod_prod_llist_set$) Bool)
(declare-fun fun_app$ (A_a_prod_a_a_prod_prod_bool_fun$ A_a_prod_a_a_prod_prod$) Bool)
(declare-fun member$a (A_a_prod_a_prod_llist$ A_a_prod_a_prod_llist_set$) Bool)
(declare-fun member$b (A_a_a_prod_prod_llist$ A_a_a_prod_prod_llist_set$) Bool)
(declare-fun member$c (A_a_prod_llist$ A_a_prod_llist_set$) Bool)
(declare-fun member$d (A_llist$ A_llist_set$) Bool)
(declare-fun fun_app$a (A_a_prod_a_prod_bool_fun$ A_a_prod_a_prod$) Bool)
(declare-fun fun_app$b (A_a_a_prod_prod_bool_fun$ A_a_a_prod_prod$) Bool)
(declare-fun fun_app$c (A_a_prod_bool_fun$ A_a_prod$) Bool)
(declare-fun fun_app$d (A_bool_fun$ A$) Bool)
(declare-fun iterates$ (A_a_prod_a_a_prod_fun$ A_a_prod$) A_a_prod_llist$)
(declare-fun iterates$a (A_a_fun$ A$) A_llist$)
(declare-fun ltakeWhile$ (A_a_prod_a_a_prod_prod_bool_fun$ A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun ltakeWhile$a (A_a_prod_a_prod_bool_fun$ A_a_prod_a_prod_llist$) A_a_prod_a_prod_llist$)
(declare-fun ltakeWhile$b (A_a_a_prod_prod_bool_fun$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun ltakeWhile$c (A_a_prod_bool_fun$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun ltakeWhile$d (A_bool_fun$ A_llist$) A_llist$)
(assert (! (not (= (lhd$ xs$) (lnth$ xs$ zero$))) :named a0))
(assert (! (not (lnull$ xs$)) :named a1))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$) (?v1 A_a_prod_a_a_prod_prod_bool_fun$)) (=> (and (=> (or (lnull$a ?v0) (not (fun_app$ ?v1 (lhd$a ?v0)))) false) (=> (and (not (lnull$a ?v0)) (fun_app$ ?v1 (lhd$a ?v0))) false)) false)) :named a2))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_a_prod_a_prod_bool_fun$)) (=> (and (=> (or (lnull$b ?v0) (not (fun_app$a ?v1 (lhd$b ?v0)))) false) (=> (and (not (lnull$b ?v0)) (fun_app$a ?v1 (lhd$b ?v0))) false)) false)) :named a3))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_a_a_prod_prod_bool_fun$)) (=> (and (=> (or (lnull$c ?v0) (not (fun_app$b ?v1 (lhd$c ?v0)))) false) (=> (and (not (lnull$c ?v0)) (fun_app$b ?v1 (lhd$c ?v0))) false)) false)) :named a4))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_bool_fun$)) (=> (and (=> (or (lnull$d ?v0) (not (fun_app$c ?v1 (lhd$d ?v0)))) false) (=> (and (not (lnull$d ?v0)) (fun_app$c ?v1 (lhd$d ?v0))) false)) false)) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (=> (or (lnull$ ?v0) (not (fun_app$d ?v1 (lhd$ ?v0)))) false) (=> (and (not (lnull$ ?v0)) (fun_app$d ?v1 (lhd$ ?v0))) false)) false)) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a7))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$d ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$d ?v1))) false)) false)) :named a8))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$d ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$d ?v0)) (not (lnull$ ?v1))) false)) false)) :named a9))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (or (lnull$d ?v0) (lnull$d ?v1)) false) (=> (and (not (lnull$d ?v0)) (not (lnull$d ?v1))) false)) false)) :named a10))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_prod_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$b ?v1))) false)) false)) :named a11))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_a_prod_prod_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$c ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$c ?v1))) false)) false)) :named a12))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$b ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$b ?v0)) (not (lnull$ ?v1))) false)) false)) :named a13))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_llist$)) (=> (and (=> (or (lnull$c ?v0) (lnull$ ?v1)) false) (=> (and (not (lnull$c ?v0)) (not (lnull$ ?v1))) false)) false)) :named a14))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (=> (and (=> (or (lnull$ ?v0) (lnull$a ?v1)) false) (=> (and (not (lnull$ ?v0)) (not (lnull$a ?v1))) false)) false)) :named a15))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_a_prod_llist$)) (=> (and (=> (or (lnull$d ?v0) (lnull$b ?v1)) false) (=> (and (not (lnull$d ?v0)) (not (lnull$b ?v1))) false)) false)) :named a16))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_a_prod_a_a_prod_prod_llist$)) (=> (member$ ?v1 ?v0) (lnull$a ?v1))) false) (=> (not (forall ((?v1 A_a_prod_a_a_prod_prod_llist$)) (=> (member$ ?v1 ?v0) (lnull$a ?v1)))) false)) false)) :named a17))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_a_prod_a_prod_llist$)) (=> (member$a ?v1 ?v0) (lnull$b ?v1))) false) (=> (not (forall ((?v1 A_a_prod_a_prod_llist$)) (=> (member$a ?v1 ?v0) (lnull$b ?v1)))) false)) false)) :named a18))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_a_a_prod_prod_llist$)) (=> (member$b ?v1 ?v0) (lnull$c ?v1))) false) (=> (not (forall ((?v1 A_a_a_prod_prod_llist$)) (=> (member$b ?v1 ?v0) (lnull$c ?v1)))) false)) false)) :named a19))
(assert (! (forall ((?v0 A_a_prod_llist_set$)) (=> (and (=> (forall ((?v1 A_a_prod_llist$)) (=> (member$c ?v1 ?v0) (lnull$d ?v1))) false) (=> (not (forall ((?v1 A_a_prod_llist$)) (=> (member$c ?v1 ?v0) (lnull$d ?v1)))) false)) false)) :named a20))
(assert (! (forall ((?v0 A_llist_set$)) (=> (and (=> (forall ((?v1 A_llist$)) (=> (member$d ?v1 ?v0) (lnull$ ?v1))) false) (=> (not (forall ((?v1 A_llist$)) (=> (member$d ?v1 ?v0) (lnull$ ?v1)))) false)) false)) :named a21))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (=> (and (=> (and (lnull$a ?v0) (lnull$a ?v1)) false) (=> (or (not (lnull$a ?v0)) (not (lnull$a ?v1))) false)) false)) :named a22))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_a_prod_a_prod_llist$)) (=> (and (=> (and (lnull$b ?v0) (lnull$b ?v1)) false) (=> (or (not (lnull$b ?v0)) (not (lnull$b ?v1))) false)) false)) :named a23))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_a_a_prod_prod_llist$)) (=> (and (=> (and (lnull$c ?v0) (lnull$c ?v1)) false) (=> (or (not (lnull$c ?v0)) (not (lnull$c ?v1))) false)) false)) :named a24))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (=> (and (=> (and (lnull$d ?v0) (lnull$d ?v1)) false) (=> (or (not (lnull$d ?v0)) (not (lnull$d ?v1))) false)) false)) :named a25))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (=> (and (=> (and (lnull$ ?v0) (lnull$ ?v1)) false) (=> (or (not (lnull$ ?v0)) (not (lnull$ ?v1))) false)) false)) :named a26))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (=> (and (=> (lnull$a ?v0) false) (=> (not (lnull$a ?v0)) false)) false)) :named a27))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (=> (and (=> (lnull$b ?v0) false) (=> (not (lnull$b ?v0)) false)) false)) :named a28))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (=> (and (=> (lnull$c ?v0) false) (=> (not (lnull$c ?v0)) false)) false)) :named a29))
(assert (! (forall ((?v0 A_a_prod_llist$)) (=> (and (=> (lnull$d ?v0) false) (=> (not (lnull$d ?v0)) false)) false)) :named a30))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (lnull$ ?v0) false) (=> (not (lnull$ ?v0)) false)) false)) :named a31))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_bool_fun$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (= (not (lnull$a (ltakeWhile$ ?v0 ?v1))) (and (not (lnull$a ?v1)) (fun_app$ ?v0 (lhd$a ?v1))))) :named a32))
(assert (! (forall ((?v0 A_a_prod_a_prod_bool_fun$) (?v1 A_a_prod_a_prod_llist$)) (= (not (lnull$b (ltakeWhile$a ?v0 ?v1))) (and (not (lnull$b ?v1)) (fun_app$a ?v0 (lhd$b ?v1))))) :named a33))
(assert (! (forall ((?v0 A_a_a_prod_prod_bool_fun$) (?v1 A_a_a_prod_prod_llist$)) (= (not (lnull$c (ltakeWhile$b ?v0 ?v1))) (and (not (lnull$c ?v1)) (fun_app$b ?v0 (lhd$c ?v1))))) :named a34))
(assert (! (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_llist$)) (= (not (lnull$d (ltakeWhile$c ?v0 ?v1))) (and (not (lnull$d ?v1)) (fun_app$c ?v0 (lhd$d ?v1))))) :named a35))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (not (lnull$ (ltakeWhile$d ?v0 ?v1))) (and (not (lnull$ ?v1)) (fun_app$d ?v0 (lhd$ ?v1))))) :named a36))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_bool_fun$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (= (lnull$a (ltakeWhile$ ?v0 ?v1)) (or (lnull$a ?v1) (not (fun_app$ ?v0 (lhd$a ?v1)))))) :named a37))
(assert (! (forall ((?v0 A_a_prod_a_prod_bool_fun$) (?v1 A_a_prod_a_prod_llist$)) (= (lnull$b (ltakeWhile$a ?v0 ?v1)) (or (lnull$b ?v1) (not (fun_app$a ?v0 (lhd$b ?v1)))))) :named a38))
(assert (! (forall ((?v0 A_a_a_prod_prod_bool_fun$) (?v1 A_a_a_prod_prod_llist$)) (= (lnull$c (ltakeWhile$b ?v0 ?v1)) (or (lnull$c ?v1) (not (fun_app$b ?v0 (lhd$c ?v1)))))) :named a39))
(assert (! (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_llist$)) (= (lnull$d (ltakeWhile$c ?v0 ?v1)) (or (lnull$d ?v1) (not (fun_app$c ?v0 (lhd$d ?v1)))))) :named a40))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lnull$ (ltakeWhile$d ?v0 ?v1)) (or (lnull$ ?v1) (not (fun_app$d ?v0 (lhd$ ?v1)))))) :named a41))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$) (?v1 A_a_prod_a_a_prod_prod_bool_fun$)) (=> (or (lnull$a ?v0) (not (fun_app$ ?v1 (lhd$a ?v0)))) (lnull$a (ltakeWhile$ ?v1 ?v0)))) :named a42))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_a_prod_a_prod_bool_fun$)) (=> (or (lnull$b ?v0) (not (fun_app$a ?v1 (lhd$b ?v0)))) (lnull$b (ltakeWhile$a ?v1 ?v0)))) :named a43))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_a_a_prod_prod_bool_fun$)) (=> (or (lnull$c ?v0) (not (fun_app$b ?v1 (lhd$c ?v0)))) (lnull$c (ltakeWhile$b ?v1 ?v0)))) :named a44))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_bool_fun$)) (=> (or (lnull$d ?v0) (not (fun_app$c ?v1 (lhd$d ?v0)))) (lnull$d (ltakeWhile$c ?v1 ?v0)))) :named a45))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (or (lnull$ ?v0) (not (fun_app$d ?v1 (lhd$ ?v0)))) (lnull$ (ltakeWhile$d ?v1 ?v0)))) :named a46))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$) (?v1 A_a_prod_a_a_prod_prod_bool_fun$)) (=> (and (not (lnull$a ?v0)) (fun_app$ ?v1 (lhd$a ?v0))) (= (lhd$a (ltakeWhile$ ?v1 ?v0)) (lhd$a ?v0)))) :named a47))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_a_prod_a_prod_bool_fun$)) (=> (and (not (lnull$b ?v0)) (fun_app$a ?v1 (lhd$b ?v0))) (= (lhd$b (ltakeWhile$a ?v1 ?v0)) (lhd$b ?v0)))) :named a48))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_a_a_prod_prod_bool_fun$)) (=> (and (not (lnull$c ?v0)) (fun_app$b ?v1 (lhd$c ?v0))) (= (lhd$c (ltakeWhile$b ?v1 ?v0)) (lhd$c ?v0)))) :named a49))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_bool_fun$)) (=> (and (not (lnull$d ?v0)) (fun_app$c ?v1 (lhd$d ?v0))) (= (lhd$d (ltakeWhile$c ?v1 ?v0)) (lhd$d ?v0)))) :named a50))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (lnull$ ?v0)) (fun_app$d ?v1 (lhd$ ?v0))) (= (lhd$ (ltakeWhile$d ?v1 ?v0)) (lhd$ ?v0)))) :named a51))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$) (?v1 A_a_prod_a_a_prod_prod_bool_fun$)) (=> (and (not (lnull$a ?v0)) (fun_app$ ?v1 (lhd$a ?v0))) (not (lnull$a (ltakeWhile$ ?v1 ?v0))))) :named a52))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_a_prod_a_prod_bool_fun$)) (=> (and (not (lnull$b ?v0)) (fun_app$a ?v1 (lhd$b ?v0))) (not (lnull$b (ltakeWhile$a ?v1 ?v0))))) :named a53))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_a_a_prod_prod_bool_fun$)) (=> (and (not (lnull$c ?v0)) (fun_app$b ?v1 (lhd$c ?v0))) (not (lnull$c (ltakeWhile$b ?v1 ?v0))))) :named a54))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_bool_fun$)) (=> (and (not (lnull$d ?v0)) (fun_app$c ?v1 (lhd$d ?v0))) (not (lnull$d (ltakeWhile$c ?v1 ?v0))))) :named a55))
(assert (! (forall ((?v0 A_llist$) (?v1 A_bool_fun$)) (=> (and (not (lnull$ ?v0)) (fun_app$d ?v1 (lhd$ ?v0))) (not (lnull$ (ltakeWhile$d ?v1 ?v0))))) :named a56))
(assert (! (= zero$ zero$) :named a57))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a58))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a59))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (not (lnull$d (lzip$ ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$ ?v1))))) :named a60))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$c (lzip$a ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$d ?v1))))) :named a61))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (not (lnull$b (lzip$b ?v0 ?v1))) (and (not (lnull$d ?v0)) (not (lnull$ ?v1))))) :named a62))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (not (lnull$a (lzip$c ?v0 ?v1))) (and (not (lnull$d ?v0)) (not (lnull$d ?v1))))) :named a63))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_prod_llist$)) (= (not (lnull$e (lzip$d ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$b ?v1))))) :named a64))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_a_prod_prod_llist$)) (= (not (lnull$f (lzip$e ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$c ?v1))))) :named a65))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_llist$)) (= (not (lnull$g (lzip$f ?v0 ?v1))) (and (not (lnull$b ?v0)) (not (lnull$ ?v1))))) :named a66))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_llist$)) (= (not (lnull$h (lzip$g ?v0 ?v1))) (and (not (lnull$c ?v0)) (not (lnull$ ?v1))))) :named a67))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (= (not (lnull$i (lzip$h ?v0 ?v1))) (and (not (lnull$ ?v0)) (not (lnull$a ?v1))))) :named a68))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_a_prod_llist$)) (= (not (lnull$j (lzip$i ?v0 ?v1))) (and (not (lnull$d ?v0)) (not (lnull$b ?v1))))) :named a69))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lnull$d (lzip$ ?v0 ?v1)) (or (lnull$ ?v0) (lnull$ ?v1)))) :named a70))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_llist$)) (= (lnull$c (lzip$a ?v0 ?v1)) (or (lnull$ ?v0) (lnull$d ?v1)))) :named a71))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_llist$)) (= (lnull$b (lzip$b ?v0 ?v1)) (or (lnull$d ?v0) (lnull$ ?v1)))) :named a72))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_llist$)) (= (lnull$a (lzip$c ?v0 ?v1)) (or (lnull$d ?v0) (lnull$d ?v1)))) :named a73))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_prod_llist$)) (= (lnull$e (lzip$d ?v0 ?v1)) (or (lnull$ ?v0) (lnull$b ?v1)))) :named a74))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_a_prod_prod_llist$)) (= (lnull$f (lzip$e ?v0 ?v1)) (or (lnull$ ?v0) (lnull$c ?v1)))) :named a75))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$) (?v1 A_llist$)) (= (lnull$g (lzip$f ?v0 ?v1)) (or (lnull$b ?v0) (lnull$ ?v1)))) :named a76))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$) (?v1 A_llist$)) (= (lnull$h (lzip$g ?v0 ?v1)) (or (lnull$c ?v0) (lnull$ ?v1)))) :named a77))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_prod_a_a_prod_prod_llist$)) (= (lnull$i (lzip$h ?v0 ?v1)) (or (lnull$ ?v0) (lnull$a ?v1)))) :named a78))
(assert (! (forall ((?v0 A_a_prod_llist$) (?v1 A_a_prod_a_prod_llist$)) (= (lnull$j (lzip$i ?v0 ?v1)) (or (lnull$d ?v0) (lnull$b ?v1)))) :named a79))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$) (?v1 A_a_prod$)) (= (lhd$d (iterates$ ?v0 ?v1)) ?v1)) :named a80))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (lhd$ (iterates$a ?v0 ?v1)) ?v1)) :named a81))
(check-sat)
;(get-unsat-core)
