; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 308
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Bool_a_fun$ 0)
(declare-sort Bool_llist$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_bool_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_fun_fun$ 0)
(declare-sort A_bool_fun_a_bool_fun_fun$ 0)
(declare-sort Bool_a_fun_bool_a_fun_fun$ 0)
(declare-sort Bool_a_fun_bool_bool_fun_fun$ 0)
(declare-sort Bool_bool_fun_bool_a_fun_fun$ 0)
(declare-sort Bool_bool_fun_bool_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun p$ () A_bool_fun$)
(declare-fun x$ () A$)
(declare-fun uu$ () Bool_bool_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun comp$ (Bool_bool_fun$) A_bool_fun_a_bool_fun_fun$)
(declare-fun lhd$a (Bool_llist$) Bool)
(declare-fun lset$ (A_llist$) A_set$)
(declare-fun ltl$a (Bool_llist$) Bool_llist$)
(declare-fun comp$a (Bool_bool_fun$) Bool_bool_fun_bool_bool_fun_fun$)
(declare-fun comp$b (A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun comp$c (Bool_a_fun$) A_bool_fun_a_a_fun_fun$)
(declare-fun comp$d (A_bool_fun$) Bool_a_fun_bool_bool_fun_fun$)
(declare-fun comp$e (A_bool_fun$) A_a_fun_a_bool_fun_fun$)
(declare-fun comp$f (Bool_a_fun$) Bool_bool_fun_bool_a_fun_fun$)
(declare-fun comp$g (A_a_fun$) Bool_a_fun_bool_a_fun_fun$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun lCons$a (Bool Bool_llist$) Bool_llist$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (Bool_bool_fun$ Bool) Bool)
(declare-fun lfilter$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun fun_app$a (A_bool_fun_a_bool_fun_fun$ A_bool_fun$) A_bool_fun$)
(declare-fun fun_app$b (Bool_bool_fun_bool_bool_fun_fun$ Bool_bool_fun$) Bool_bool_fun$)
(declare-fun fun_app$c (A_bool_fun$ A$) Bool)
(declare-fun fun_app$d (A_a_fun$ A$) A$)
(declare-fun fun_app$e (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$f (A_bool_fun_a_a_fun_fun$ A_bool_fun$) A_a_fun$)
(declare-fun fun_app$g (Bool_a_fun$ Bool) A$)
(declare-fun fun_app$h (Bool_a_fun_bool_bool_fun_fun$ Bool_a_fun$) Bool_bool_fun$)
(declare-fun fun_app$i (A_a_fun_a_bool_fun_fun$ A_a_fun$) A_bool_fun$)
(declare-fun fun_app$j (Bool_bool_fun_bool_a_fun_fun$ Bool_bool_fun$) Bool_a_fun$)
(declare-fun fun_app$k (Bool_a_fun_bool_a_fun_fun$ Bool_a_fun$) Bool_a_fun$)
(declare-fun lfilter$a (Bool_bool_fun$ Bool_llist$) Bool_llist$)
(declare-fun lfinite$a (Bool_llist$) Bool)
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$) A_llist$)
(declare-fun ldropWhile$a (Bool_bool_fun$ Bool_llist$) Bool_llist$)
(assert (! (forall ((?v0 Bool)) (! (= (fun_app$ uu$ ?v0) (not ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (= (ltl$ (lfilter$ p$ ys$)) (lfilter$ p$ (ltl$ (ldropWhile$ (fun_app$a (comp$ uu$) p$) ys$))))) :named a1))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_llist$)) (= (lfilter$a ?v0 (lfilter$a ?v0 ?v1)) (lfilter$a ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lfilter$ ?v0 (lfilter$ ?v0 ?v1)) (lfilter$ ?v0 ?v1))) :named a3))
(assert (! (= xs$ (ltl$ (lfilter$ p$ ys$))) :named a4))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_llist$)) (= (ltl$a (lfilter$a ?v0 ?v1)) (lfilter$a ?v0 (ltl$a (ldropWhile$a (fun_app$b (comp$a uu$) ?v0) ?v1))))) :named a5))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (ltl$ (lfilter$ ?v0 ?v1)) (lfilter$ ?v0 (ltl$ (ldropWhile$ (fun_app$a (comp$ uu$) ?v0) ?v1))))) :named a6))
(assert (! (fun_app$c p$ x$) :named a7))
(assert (! (not (lnull$ (lfilter$ p$ ys$))) :named a8))
(assert (! (exists ((?v0 A$)) (and (member$ ?v0 (lset$ ys$)) (fun_app$c p$ ?v0))) :named a9))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$d (fun_app$e (comp$b ?v0) ?v1) ?v2) (fun_app$d ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$d (fun_app$e (comp$b ?v0) ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$d (fun_app$f (comp$c ?v0) ?v1) ?v2) (fun_app$g ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$d (fun_app$f (comp$c ?v0) ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 Bool)) (! (= (fun_app$ (fun_app$h (comp$d ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$g ?v1 ?v2))) :pattern ((fun_app$ (fun_app$h (comp$d ?v0) ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool)) (! (= (fun_app$ (fun_app$b (comp$a ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$ ?v1 ?v2))) :pattern ((fun_app$ (fun_app$b (comp$a ?v0) ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$c (fun_app$i (comp$e ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$c (fun_app$i (comp$e ?v0) ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$c (fun_app$a (comp$ ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$c (fun_app$a (comp$ ?v0) ?v1) ?v2)))) :named a15))
(assert (! (= x$ (lhd$ (ldropWhile$ (fun_app$a (comp$ uu$) p$) ys$))) :named a16))
(assert (! (= (lfilter$ p$ ys$) (lCons$ x$ xs$)) :named a17))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_llist$)) (= (lhd$a (lfilter$a ?v0 ?v1)) (lhd$a (ldropWhile$a (fun_app$b (comp$a uu$) ?v0) ?v1)))) :named a18))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$)) (= (lhd$ (lfilter$ ?v0 ?v1)) (lhd$ (ldropWhile$ (fun_app$a (comp$ uu$) ?v0) ?v1)))) :named a19))
(assert (! (forall ((?v0 A$)) (=> (member$ ?v0 (lset$ (ltakeWhile$ (fun_app$a (comp$ uu$) p$) ys$))) (not (fun_app$c p$ ?v0)))) :named a20))
(assert (! (lfinite$ (ltakeWhile$ (fun_app$a (comp$ uu$) p$) ys$)) :named a21))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_llist$) (?v2 Bool) (?v3 Bool_llist$)) (=> (= (lfilter$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (exists ((?v4 Bool_llist$)) (and (= ?v3 (lfilter$a ?v0 ?v4)) (= (ldropWhile$a (fun_app$b (comp$a uu$) ?v0) ?v1) (lCons$a ?v2 ?v4)))))) :named a22))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (=> (= (lfilter$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (exists ((?v4 A_llist$)) (and (= ?v3 (lfilter$ ?v0 ?v4)) (= (ldropWhile$ (fun_app$a (comp$ uu$) ?v0) ?v1) (lCons$ ?v2 ?v4)))))) :named a23))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$)) (= (fun_app$a (comp$ ?v0) (fun_app$i (comp$e ?v1) ?v2)) (fun_app$i (comp$e (fun_app$a (comp$ ?v0) ?v1)) ?v2))) :named a24))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$)) (= (fun_app$a (comp$ ?v0) (fun_app$a (comp$ ?v1) ?v2)) (fun_app$a (comp$ (fun_app$b (comp$a ?v0) ?v1)) ?v2))) :named a25))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_a_fun$)) (= (fun_app$b (comp$a ?v0) (fun_app$h (comp$d ?v1) ?v2)) (fun_app$h (comp$d (fun_app$a (comp$ ?v0) ?v1)) ?v2))) :named a26))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$)) (= (fun_app$b (comp$a ?v0) (fun_app$b (comp$a ?v1) ?v2)) (fun_app$b (comp$a (fun_app$b (comp$a ?v0) ?v1)) ?v2))) :named a27))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 A_bool_fun$)) (= (fun_app$i (comp$e ?v0) (fun_app$f (comp$c ?v1) ?v2)) (fun_app$a (comp$ (fun_app$h (comp$d ?v0) ?v1)) ?v2))) :named a28))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (= (fun_app$i (comp$e ?v0) (fun_app$e (comp$b ?v1) ?v2)) (fun_app$i (comp$e (fun_app$i (comp$e ?v0) ?v1)) ?v2))) :named a29))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 Bool_a_fun$)) (= (fun_app$j (comp$f ?v0) (fun_app$h (comp$d ?v1) ?v2)) (fun_app$k (comp$g (fun_app$f (comp$c ?v0) ?v1)) ?v2))) :named a30))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (= (fun_app$e (comp$b ?v0) (fun_app$e (comp$b ?v1) ?v2)) (fun_app$e (comp$b (fun_app$e (comp$b ?v0) ?v1)) ?v2))) :named a31))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Bool_a_fun$) (?v2 A_bool_fun$)) (= (fun_app$e (comp$b ?v0) (fun_app$f (comp$c ?v1) ?v2)) (fun_app$f (comp$c (fun_app$k (comp$g ?v0) ?v1)) ?v2))) :named a32))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$)) (= (fun_app$f (comp$c ?v0) (fun_app$a (comp$ ?v1) ?v2)) (fun_app$f (comp$c (fun_app$j (comp$f ?v0) ?v1)) ?v2))) :named a33))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$)) (= (fun_app$i (comp$e (fun_app$a (comp$ ?v0) ?v1)) ?v2) (fun_app$a (comp$ ?v0) (fun_app$i (comp$e ?v1) ?v2)))) :named a34))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$)) (= (fun_app$a (comp$ (fun_app$b (comp$a ?v0) ?v1)) ?v2) (fun_app$a (comp$ ?v0) (fun_app$a (comp$ ?v1) ?v2)))) :named a35))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_a_fun$)) (= (fun_app$h (comp$d (fun_app$a (comp$ ?v0) ?v1)) ?v2) (fun_app$b (comp$a ?v0) (fun_app$h (comp$d ?v1) ?v2)))) :named a36))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 A_bool_fun$)) (= (fun_app$a (comp$ (fun_app$h (comp$d ?v0) ?v1)) ?v2) (fun_app$i (comp$e ?v0) (fun_app$f (comp$c ?v1) ?v2)))) :named a37))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$)) (= (fun_app$b (comp$a (fun_app$b (comp$a ?v0) ?v1)) ?v2) (fun_app$b (comp$a ?v0) (fun_app$b (comp$a ?v1) ?v2)))) :named a38))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (= (fun_app$i (comp$e (fun_app$i (comp$e ?v0) ?v1)) ?v2) (fun_app$i (comp$e ?v0) (fun_app$e (comp$b ?v1) ?v2)))) :named a39))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 Bool_a_fun$)) (= (fun_app$k (comp$g (fun_app$f (comp$c ?v0) ?v1)) ?v2) (fun_app$j (comp$f ?v0) (fun_app$h (comp$d ?v1) ?v2)))) :named a40))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 Bool_bool_fun$)) (= (fun_app$b (comp$a (fun_app$h (comp$d ?v0) ?v1)) ?v2) (fun_app$h (comp$d ?v0) (fun_app$j (comp$f ?v1) ?v2)))) :named a41))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (= (fun_app$e (comp$b (fun_app$e (comp$b ?v0) ?v1)) ?v2) (fun_app$e (comp$b ?v0) (fun_app$e (comp$b ?v1) ?v2)))) :named a42))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$)) (= (fun_app$e (comp$b (fun_app$f (comp$c ?v0) ?v1)) ?v2) (fun_app$f (comp$c ?v0) (fun_app$i (comp$e ?v1) ?v2)))) :named a43))
(assert (! (forall ((?v0 Bool) (?v1 Bool_llist$) (?v2 Bool) (?v3 Bool_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a44))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a45))
(assert (! (forall ((?v0 Bool) (?v1 Bool_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a46))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a47))
(check-sat)
;(get-unsat-core)
