; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 432
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_b_prod_llist_bool_fun$ 0)
(declare-sort A_llist_a_b_prod_llist_fun$ 0)
(declare-sort B_llist_a_b_prod_llist_fun$ 0)
(declare-sort A_a_llist_a_b_prod_llist_fun_fun$ 0)
(declare-sort B_b_llist_a_b_prod_llist_fun_fun$ 0)
(declare-sort A_llist_b_llist_a_b_prod_llist_fun_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_b_prod_llist_fun$ 0)
(declare-sort A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ 0)
(declare-sort A_llist_b_b_llist_a_b_prod_llist_fun_fun_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_b_prod_llist_fun_a_b_prod_llist_fun$ 0)
(declare-sort A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun_fun$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))))
(declare-codatatypes () ((A_b_prod_llist$ (lNil$) (lCons$ (lhd$ A_b_prod$) (ltl$ A_b_prod_llist$)))
  (B_llist$ (lNil$a) (lCons$a (lhd$a B$) (ltl$a B_llist$)))
  (A_llist$ (lNil$b) (lCons$b (lhd$b A$) (ltl$b A_llist$)))))
(declare-datatypes () ((A_llist_b_llist_prod$ (pair$a (fst$a A_llist$) (snd$a B_llist$)))))
(declare-fun f$ (A_llist_b_llist_prod_a_b_prod_llist_fun$) A_llist_b_llist_prod_a_b_prod_llist_fun$)
(declare-fun uu$ (A_llist_b_llist_prod_a_b_prod_llist_fun$ A$) A_llist_b_b_llist_a_b_prod_llist_fun_fun_fun$)
(declare-fun uua$ (A_llist_b_llist_prod_a_b_prod_llist_fun$ B_llist$) A_a_llist_a_b_prod_llist_fun_fun$)
(declare-fun uub$ (A_llist_b_llist_prod_a_b_prod_llist_fun$) A_llist_b_llist_a_b_prod_llist_fun_fun$)
(declare-fun uuc$ () A_llist_b_llist_prod_a_b_prod_llist_fun_a_b_prod_llist_fun$)
(declare-fun xsa$ () A_llist_b_llist_prod$)
(declare-fun curry$ (A_llist_b_llist_prod_a_b_prod_llist_fun$ A_llist$ B_llist$) A_b_prod_llist$)
(declare-fun fun_app$ (A_llist_b_llist_prod_a_b_prod_llist_fun_a_b_prod_llist_fun$ A_llist_b_llist_prod_a_b_prod_llist_fun$) A_b_prod_llist$)
(declare-fun fun_ord$ (A_b_prod_llist_a_b_prod_llist_bool_fun_fun$) A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun_fun$)
(declare-fun lprefix$ () A_b_prod_llist_a_b_prod_llist_bool_fun_fun$)
(declare-fun fun_app$a (A_llist_b_llist_prod_a_b_prod_llist_fun$ A_llist_b_llist_prod$) A_b_prod_llist$)
(declare-fun fun_app$b (B_llist_a_b_prod_llist_fun$ B_llist$) A_b_prod_llist$)
(declare-fun fun_app$c (A_llist_b_llist_a_b_prod_llist_fun_fun$ A_llist$) B_llist_a_b_prod_llist_fun$)
(declare-fun fun_app$d (A_llist_a_b_prod_llist_fun$ A_llist$) A_b_prod_llist$)
(declare-fun fun_app$e (A_a_llist_a_b_prod_llist_fun_fun$ A$) A_llist_a_b_prod_llist_fun$)
(declare-fun fun_app$f (A_llist_b_b_llist_a_b_prod_llist_fun_fun_fun$ A_llist$) B_b_llist_a_b_prod_llist_fun_fun$)
(declare-fun fun_app$g (B_b_llist_a_b_prod_llist_fun_fun$ B$) B_llist_a_b_prod_llist_fun$)
(declare-fun fun_app$h (A_b_prod_llist_bool_fun$ A_b_prod_llist$) Bool)
(declare-fun fun_app$i (A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist$) A_b_prod_llist_bool_fun$)
(declare-fun fun_app$j (A_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun$ A_llist_b_llist_prod_a_b_prod_llist_fun$) Bool)
(declare-fun fun_app$k (A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun_fun$ A_llist_b_llist_prod_a_b_prod_llist_fun$) A_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun$)
(declare-fun lprefix$a (A_llist$ A_llist$) Bool)
(declare-fun lprefix$b (B_llist$ B_llist$) Bool)
(declare-fun monotone$ (A_llist_b_llist_prod_a_b_prod_llist_fun_a_llist_b_llist_prod_a_b_prod_llist_fun_bool_fun_fun$ A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ A_llist_b_llist_prod_a_b_prod_llist_fun_a_b_prod_llist_fun$) Bool)
(declare-fun case_prod$ (A_llist_b_llist_a_b_prod_llist_fun_fun$) A_llist_b_llist_prod_a_b_prod_llist_fun$)
(declare-fun case_llist$ (A_b_prod_llist$ A_a_llist_a_b_prod_llist_fun_fun$) A_llist_a_b_prod_llist_fun$)
(declare-fun case_llist$a (A_b_prod_llist$ B_b_llist_a_b_prod_llist_fun_fun$) B_llist_a_b_prod_llist_fun$)
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_b_prod_llist_fun$)) (! (= (fun_app$ uuc$ ?v0) (fun_app$a (case_prod$ (uub$ ?v0)) xsa$)) :pattern ((fun_app$ uuc$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_b_prod_llist_fun$) (?v1 A_llist$) (?v2 B_llist$)) (! (= (fun_app$b (fun_app$c (uub$ ?v0) ?v1) ?v2) (fun_app$d (case_llist$ lNil$ (uua$ ?v0 ?v2)) ?v1)) :pattern ((fun_app$b (fun_app$c (uub$ ?v0) ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_b_prod_llist_fun$) (?v1 B_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$d (fun_app$e (uua$ ?v0 ?v1) ?v2) ?v3) (fun_app$b (case_llist$a lNil$ (fun_app$f (uu$ ?v0 ?v2) ?v3)) ?v1)) :pattern ((fun_app$d (fun_app$e (uua$ ?v0 ?v1) ?v2) ?v3)))) :named a2))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_b_prod_llist_fun$) (?v1 A$) (?v2 A_llist$) (?v3 B$) (?v4 B_llist$)) (! (= (fun_app$b (fun_app$g (fun_app$f (uu$ ?v0 ?v1) ?v2) ?v3) ?v4) (lCons$ (pair$ ?v1 ?v3) (curry$ ?v0 ?v2 ?v4))) :pattern ((fun_app$b (fun_app$g (fun_app$f (uu$ ?v0 ?v1) ?v2) ?v3) ?v4)))) :named a3))
(assert (! (not (monotone$ (fun_ord$ lprefix$) lprefix$ uuc$)) :named a4))
(assert (! (forall ((?v0 A_llist$)) (lprefix$a ?v0 ?v0)) :named a5))
(assert (! (forall ((?v0 B_llist$)) (lprefix$b ?v0 ?v0)) :named a6))
(assert (! (forall ((?v0 A_b_prod_llist$)) (fun_app$h (fun_app$i lprefix$ ?v0) ?v0)) :named a7))
(assert (! (forall ((?v0 A_llist$)) (lprefix$a ?v0 ?v0)) :named a8))
(assert (! (forall ((?v0 B_llist$)) (lprefix$b ?v0 ?v0)) :named a9))
(assert (! (forall ((?v0 A_b_prod_llist$)) (fun_app$h (fun_app$i lprefix$ ?v0) ?v0)) :named a10))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$) (?v2 A_b_prod$) (?v3 A_b_prod_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (! (= (lprefix$b (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (lprefix$b ?v1 ?v3))) :pattern ((lprefix$b (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3))))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (! (= (lprefix$a (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (lprefix$a ?v1 ?v3))) :pattern ((lprefix$a (lCons$b ?v0 ?v1) (lCons$b ?v2 ?v3))))) :named a15))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$) (?v2 A_b_prod$) (?v3 A_b_prod_llist$)) (! (= (fun_app$h (fun_app$i lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (fun_app$h (fun_app$i lprefix$ ?v1) ?v3))) :pattern ((fun_app$h (fun_app$i lprefix$ (lCons$ ?v0 ?v1)) (lCons$ ?v2 ?v3))))) :named a16))
(assert (! (forall ((?v0 B_llist$)) (! (= (lprefix$b lNil$a ?v0) true) :pattern ((lprefix$b lNil$a ?v0)))) :named a17))
(assert (! (forall ((?v0 A_llist$)) (! (= (lprefix$a lNil$b ?v0) true) :pattern ((lprefix$a lNil$b ?v0)))) :named a18))
(assert (! (forall ((?v0 A_b_prod_llist$)) (! (= (fun_app$h (fun_app$i lprefix$ lNil$) ?v0) true) :pattern ((fun_app$h (fun_app$i lprefix$ lNil$) ?v0)))) :named a19))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_b_prod_llist_fun$)) (= (f$ ?v0) (case_prod$ (uub$ ?v0)))) :named a20))
(assert (! (forall ((?v0 B_llist$) (?v1 B$) (?v2 B_llist$)) (= (lprefix$b ?v0 (lCons$a ?v1 ?v2)) (or (= ?v0 lNil$a) (exists ((?v3 B_llist$)) (and (= ?v0 (lCons$a ?v1 ?v3)) (lprefix$b ?v3 ?v2)))))) :named a21))
(assert (! (forall ((?v0 A_llist$) (?v1 A$) (?v2 A_llist$)) (= (lprefix$a ?v0 (lCons$b ?v1 ?v2)) (or (= ?v0 lNil$b) (exists ((?v3 A_llist$)) (and (= ?v0 (lCons$b ?v1 ?v3)) (lprefix$a ?v3 ?v2)))))) :named a22))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod$) (?v2 A_b_prod_llist$)) (= (fun_app$h (fun_app$i lprefix$ ?v0) (lCons$ ?v1 ?v2)) (or (= ?v0 lNil$) (exists ((?v3 A_b_prod_llist$)) (and (= ?v0 (lCons$ ?v1 ?v3)) (fun_app$h (fun_app$i lprefix$ ?v3) ?v2)))))) :named a23))
(assert (! (forall ((?v0 B_llist$) (?v1 B_llist$)) (= (lprefix$b ?v0 ?v1) (or (exists ((?v2 B_llist$)) (and (= ?v0 lNil$a) (= ?v1 ?v2))) (exists ((?v2 B_llist$) (?v3 B_llist$) (?v4 B$)) (and (= ?v0 (lCons$a ?v4 ?v2)) (and (= ?v1 (lCons$a ?v4 ?v3)) (lprefix$b ?v2 ?v3))))))) :named a24))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$)) (= (lprefix$a ?v0 ?v1) (or (exists ((?v2 A_llist$)) (and (= ?v0 lNil$b) (= ?v1 ?v2))) (exists ((?v2 A_llist$) (?v3 A_llist$) (?v4 A$)) (and (= ?v0 (lCons$b ?v4 ?v2)) (and (= ?v1 (lCons$b ?v4 ?v3)) (lprefix$a ?v2 ?v3))))))) :named a25))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_b_prod_llist$)) (= (fun_app$h (fun_app$i lprefix$ ?v0) ?v1) (or (exists ((?v2 A_b_prod_llist$)) (and (= ?v0 lNil$) (= ?v1 ?v2))) (exists ((?v2 A_b_prod_llist$) (?v3 A_b_prod_llist$) (?v4 A_b_prod$)) (and (= ?v0 (lCons$ ?v4 ?v2)) (and (= ?v1 (lCons$ ?v4 ?v3)) (fun_app$h (fun_app$i lprefix$ ?v2) ?v3))))))) :named a26))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B_llist$)) (= (lprefix$b (lCons$a ?v0 ?v1) ?v2) (exists ((?v3 B_llist$)) (and (= ?v2 (lCons$a ?v0 ?v3)) (lprefix$b ?v1 ?v3))))) :named a27))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (= (lprefix$a (lCons$b ?v0 ?v1) ?v2) (exists ((?v3 A_llist$)) (and (= ?v2 (lCons$b ?v0 ?v3)) (lprefix$a ?v1 ?v3))))) :named a28))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$) (?v2 A_b_prod_llist$)) (= (fun_app$h (fun_app$i lprefix$ (lCons$ ?v0 ?v1)) ?v2) (exists ((?v3 A_b_prod_llist$)) (and (= ?v2 (lCons$ ?v0 ?v3)) (fun_app$h (fun_app$i lprefix$ ?v1) ?v3))))) :named a29))
(assert (! (forall ((?v0 B_llist$)) (= (not (= ?v0 lNil$a)) (exists ((?v1 B$) (?v2 B_llist$)) (= ?v0 (lCons$a ?v1 ?v2))))) :named a30))
(assert (! (forall ((?v0 A_llist$)) (= (not (= ?v0 lNil$b)) (exists ((?v1 A$) (?v2 A_llist$)) (= ?v0 (lCons$b ?v1 ?v2))))) :named a31))
(assert (! (forall ((?v0 A_b_prod_llist$)) (= (not (= ?v0 lNil$)) (exists ((?v1 A_b_prod$) (?v2 A_b_prod_llist$)) (= ?v0 (lCons$ ?v1 ?v2))))) :named a32))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_a_llist_a_b_prod_llist_fun_fun$) (?v2 A$) (?v3 A_llist$)) (! (= (fun_app$d (case_llist$ ?v0 ?v1) (lCons$b ?v2 ?v3)) (fun_app$d (fun_app$e ?v1 ?v2) ?v3)) :pattern ((fun_app$d (case_llist$ ?v0 ?v1) (lCons$b ?v2 ?v3))))) :named a33))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 B_b_llist_a_b_prod_llist_fun_fun$) (?v2 B$) (?v3 B_llist$)) (! (= (fun_app$b (case_llist$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (fun_app$b (fun_app$g ?v1 ?v2) ?v3)) :pattern ((fun_app$b (case_llist$a ?v0 ?v1) (lCons$a ?v2 ?v3))))) :named a34))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 A_a_llist_a_b_prod_llist_fun_fun$)) (! (= (fun_app$d (case_llist$ ?v0 ?v1) lNil$b) ?v0) :pattern ((case_llist$ ?v0 ?v1)))) :named a35))
(assert (! (forall ((?v0 A_b_prod_llist$) (?v1 B_b_llist_a_b_prod_llist_fun_fun$)) (! (= (fun_app$b (case_llist$a ?v0 ?v1) lNil$a) ?v0) :pattern ((case_llist$a ?v0 ?v1)))) :named a36))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (! (= (lprefix$b (lCons$a ?v0 ?v1) lNil$a) false) :pattern ((lCons$a ?v0 ?v1)))) :named a37))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lprefix$a (lCons$b ?v0 ?v1) lNil$b) false) :pattern ((lCons$b ?v0 ?v1)))) :named a38))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_llist$)) (! (= (fun_app$h (fun_app$i lprefix$ (lCons$ ?v0 ?v1)) lNil$) false) :pattern ((lCons$ ?v0 ?v1)))) :named a39))
(assert (! (forall ((?v0 B_llist$)) (=> (and (=> (= ?v0 lNil$a) false) (forall ((?v1 B$) (?v2 B_llist$)) (=> (= ?v0 (lCons$a ?v1 ?v2)) false))) false)) :named a40))
(assert (! (forall ((?v0 A_llist$)) (=> (and (=> (= ?v0 lNil$b) false) (forall ((?v1 A$) (?v2 A_llist$)) (=> (= ?v0 (lCons$b ?v1 ?v2)) false))) false)) :named a41))
(assert (! (forall ((?v0 A_b_prod_llist$)) (=> (and (=> (= ?v0 lNil$) false) (forall ((?v1 A_b_prod$) (?v2 A_b_prod_llist$)) (=> (= ?v0 (lCons$ ?v1 ?v2)) false))) false)) :named a42))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_b_prod_llist_fun_a_b_prod_llist_fun$) (?v1 A_llist_b_llist_prod_a_b_prod_llist_fun$) (?v2 A_b_prod_llist$) (?v3 A_llist_b_llist_prod_a_b_prod_llist_fun_a_b_prod_llist_fun$) (?v4 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$)) (=> (and (forall ((?v5 A_llist_b_llist_prod_a_b_prod_llist_fun$)) (= (fun_app$ ?v0 ?v5) (ite (fun_app$j (fun_app$k (fun_ord$ lprefix$) ?v5) ?v1) ?v2 (fun_app$ ?v3 ?v5)))) (and (forall ((?v5 A_llist_b_llist_prod_a_b_prod_llist_fun$) (?v6 A_llist_b_llist_prod_a_b_prod_llist_fun$)) (=> (and (fun_app$j (fun_app$k (fun_ord$ lprefix$) ?v5) ?v6) (not (fun_app$j (fun_app$k (fun_ord$ lprefix$) ?v5) ?v1))) (fun_app$h (fun_app$i ?v4 (fun_app$ ?v3 ?v5)) (fun_app$ ?v3 ?v6)))) (and (forall ((?v5 A_llist_b_llist_prod_a_b_prod_llist_fun$)) (=> (not (fun_app$j (fun_app$k (fun_ord$ lprefix$) ?v5) ?v1)) (fun_app$h (fun_app$i ?v4 ?v2) (fun_app$ ?v3 ?v5)))) (fun_app$h (fun_app$i ?v4 ?v2) ?v2)))) (monotone$ (fun_ord$ lprefix$) ?v4 ?v0))) :named a43))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_b_prod_llist_fun$) (?v1 A_llist_b_llist_prod_a_b_prod_llist_fun$) (?v2 A_llist_b_llist_prod_a_b_prod_llist_fun$)) (=> (and (fun_app$j (fun_app$k (fun_ord$ lprefix$) ?v0) ?v1) (fun_app$j (fun_app$k (fun_ord$ lprefix$) ?v1) ?v2)) (fun_app$j (fun_app$k (fun_ord$ lprefix$) ?v0) ?v2))) :named a44))
(assert (! (forall ((?v0 A_llist_b_llist_prod_a_b_prod_llist_fun$) (?v1 A_llist_b_llist_prod_a_b_prod_llist_fun$)) (=> (and (fun_app$j (fun_app$k (fun_ord$ lprefix$) ?v0) ?v1) (fun_app$j (fun_app$k (fun_ord$ lprefix$) ?v1) ?v0)) (= ?v0 ?v1))) :named a45))
(check-sat)
;(get-unsat-core)
