; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 647
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun n$ () Nat$)
(declare-fun r$ (A$ A$) Bool)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun min$ (Enat$ Enat$) Enat$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist$ Nat$) A$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun ltake$ (Enat$ A_llist$) A_llist$)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun less_eq$ (Enat$ Enat$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun the_enat$ (Enat$) Nat$)
(assert (! (not (r$ (lhd$ (ldrop$ (enat$ n$) xs$)) (lnth$ ys$ n$))) :named a0))
(assert (! (r$ (lnth$ xs$ n$) (lnth$ ys$ n$)) :named a1))
(assert (! (less$ (enat$ n$) (min$ (llength$ xs$) (llength$ ys$))) :named a2))
(assert (! (= (ltake$ (enat$ n$) xs$) (ltake$ (enat$ n$) ys$)) :named a3))
(assert (! (exists ((?v0 Nat$)) (and (less$ (enat$ ?v0) (min$ (llength$ xs$) (llength$ ys$))) (and (= (ltake$ (enat$ ?v0) xs$) (ltake$ (enat$ ?v0) ys$)) (r$ (lnth$ xs$ ?v0) (lnth$ ys$ ?v0))))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (=> (forall ((?v0 Nat$)) (=> (and (less$ (enat$ ?v0) (min$ (llength$ xs$) (llength$ ys$))) (and (= (ltake$ (enat$ ?v0) xs$) (ltake$ (enat$ ?v0) ys$)) (r$ (lnth$ xs$ ?v0) (lnth$ ys$ ?v0)))) false)) false) :named a6))
(assert (! (or (and (less_eq$ (llength$ xs$) (llength$ ys$)) (= (ltake$ (llength$ xs$) ys$) xs$)) (exists ((?v0 Nat$)) (and (less$ (enat$ ?v0) (min$ (llength$ xs$) (llength$ ys$))) (and (= (ltake$ (enat$ ?v0) xs$) (ltake$ (enat$ ?v0) ys$)) (r$ (lnth$ xs$ ?v0) (lnth$ ys$ ?v0)))))) :named a7))
(assert (! (= xs$ (lappend$ (ltake$ (enat$ n$) xs$) (ldrop$ (enat$ n$) xs$))) :named a8))
(assert (! (forall ((?v0 Enat$) (?v1 A_llist$)) (=> (less$ ?v0 (llength$ ?v1)) (= (lhd$ (ldrop$ ?v0 ?v1)) (lnth$ ?v1 (the_enat$ ?v0))))) :named a9))
(assert (! (= ys$ (lappend$ (ltake$ (enat$ n$) xs$) (lCons$ (lnth$ ys$ n$) (ldrop$ (enat$ (suc$ n$)) ys$)))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (! (= (ldrop$ (enat$ ?v0) ?v1) (ldropn$ ?v0 ?v1)) :pattern ((ldrop$ (enat$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist$)) (=> (less$ (enat$ ?v0) (llength$ ?v1)) (= (lhd$ (ldropn$ ?v0 ?v1)) (lnth$ ?v1 ?v0)))) :named a12))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (less$ ?v0 (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A_llist$)) (! (= (lappend$ (lCons$ ?v0 ?v1) ?v2) (lCons$ ?v0 (lappend$ ?v1 ?v2))) :pattern ((lappend$ (lCons$ ?v0 ?v1) ?v2)))) :named a15))
(check-sat)
;(get-unsat-core)
