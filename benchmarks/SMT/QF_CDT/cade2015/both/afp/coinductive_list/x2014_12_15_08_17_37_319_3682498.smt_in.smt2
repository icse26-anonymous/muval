; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 666
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_bool_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun n$ () Enat$)
(declare-fun x$ () A$)
(declare-fun ma$ () Enat$)
(declare-fun xsa$ () A_llist$)
(declare-fun plus$ (Enat$ Enat$) Enat$)
(declare-fun ldrop$ (Enat$ A_llist$) A_llist$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun lfinite$ (A_llist$) Bool)
(declare-fun lmember$ (A$ A_llist$) Bool)
(declare-fun pred_llist$ (A_bool_fun$ A_llist$) Bool)
(assert (! (not (= (ldrop$ n$ (ldrop$ ma$ (lCons$ x$ xsa$))) (ldrop$ (plus$ n$ ma$) (lCons$ x$ xsa$)))) :named a0))
(assert (! (lfinite$ xsa$) :named a1))
(assert (! (forall ((?v0 Enat$)) (= (ldrop$ n$ (ldrop$ ?v0 xsa$)) (ldrop$ (plus$ n$ ?v0) xsa$))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a5))
(assert (! (forall ((?v0 A_llist$) (?v1 A$)) (=> (lfinite$ ?v0) (lfinite$ (lCons$ ?v1 ?v0)))) :named a6))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_llist$)) (! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2)) (and (fun_app$ ?v0 ?v1) (pred_llist$ ?v0 ?v2))) :pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2))))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (lmember$ ?v0 (lCons$ ?v1 ?v2)) (or (= ?v0 ?v1) (lmember$ ?v0 ?v2))) :pattern ((lmember$ ?v0 (lCons$ ?v1 ?v2))))) :named a8))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (= (plus$ (plus$ ?v0 ?v1) (plus$ ?v2 ?v3)) (plus$ (plus$ ?v0 ?v2) (plus$ ?v1 ?v3)))) :named a9))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (plus$ (plus$ ?v0 ?v1) ?v2) (plus$ (plus$ ?v0 ?v2) ?v1))) :named a10))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (plus$ (plus$ ?v0 ?v1) ?v2) (plus$ ?v0 (plus$ ?v1 ?v2)))) :named a11))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (plus$ (plus$ ?v0 ?v1) ?v2) (plus$ ?v0 (plus$ ?v1 ?v2)))) :named a12))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$)) (= (plus$ ?v0 (plus$ ?v1 ?v2)) (plus$ (plus$ ?v0 ?v1) ?v2))) :named a13))
(assert (! (forall ((?v0 Enat$) (?v1 Enat$) (?v2 Enat$) (?v3 Enat$)) (=> (and (= ?v0 ?v1) (= ?v2 ?v3)) (= (plus$ ?v0 ?v2) (plus$ ?v1 ?v3)))) :named a14))
(check-sat)
;(get-unsat-core)
