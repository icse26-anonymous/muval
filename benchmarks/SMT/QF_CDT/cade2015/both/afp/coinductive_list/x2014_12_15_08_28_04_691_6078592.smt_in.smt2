; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 631
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun r$ () A_a_bool_fun_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun ys$ () A_llist$)
(declare-fun zs$ () A_llist$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun lappend$ (A_llist$ A_llist$) A_llist$)
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$) Bool)
(declare-fun lprefix$ (A_llist$ A_llist$) Bool)
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$) A_bool_fun$)
(assert (! (not (llexord$ r$ xs$ zs$)) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$ (fun_app$a r$ ?v0) ?v1) (fun_app$ (fun_app$a r$ ?v1) ?v2)) (fun_app$ (fun_app$a r$ ?v0) ?v2))) :named a1))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (llexord$ ?v0 ?v1 ?v1)) :named a2))
(assert (! (llexord$ r$ xs$ ys$) :named a3))
(assert (! (llexord$ r$ ys$ zs$) :named a4))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (llexord$ ?v0 ?v1 ?v2) (and (llexord$ ?v0 ?v2 ?v1) (forall ((?v3 A$) (?v4 A$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (fun_app$ (fun_app$a ?v0 ?v4) ?v3)) false)))) (= ?v1 ?v2))) :named a5))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A$) (?v4 A_llist$)) (! (= (llexord$ ?v0 (lCons$ ?v1 ?v2) (lCons$ ?v3 ?v4)) (or (and (= ?v1 ?v3) (llexord$ ?v0 ?v2 ?v4)) (fun_app$ (fun_app$a ?v0 ?v1) ?v3))) :pattern ((llexord$ ?v0 (lCons$ ?v1 ?v2) (lCons$ ?v3 ?v4))))) :named a6))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_bool_fun_fun$) (?v2 A_llist$)) (! (=> (lnull$ ?v0) (= (llexord$ ?v1 ?v2 ?v0) (lnull$ ?v2))) :pattern ((llexord$ ?v1 ?v2 ?v0)))) :named a7))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$)) (llexord$ ?v0 lNil$ ?v1)) :named a8))
(assert (! (forall ((?v0 A_llist$) (?v1 A_llist$) (?v2 A_a_bool_fun_fun$)) (=> (lprefix$ ?v0 ?v1) (llexord$ ?v2 ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_llist$) (?v3 A_llist$)) (= (llexord$ ?v0 (lCons$ ?v1 ?v2) ?v3) (exists ((?v4 A$) (?v5 A_llist$)) (and (= ?v3 (lCons$ ?v4 ?v5)) (or (and (= ?v1 ?v4) (llexord$ ?v0 ?v2 ?v5)) (fun_app$ (fun_app$a ?v0 ?v1) ?v4)))))) :named a10))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A$)) (=> (llexord$ ?v0 ?v1 ?v2) (llexord$ ?v0 (lCons$ ?v3 ?v1) (lCons$ ?v3 ?v2)))) :named a11))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_llist$) (?v4 A_llist$)) (=> (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (llexord$ ?v0 (lCons$ ?v1 ?v3) (lCons$ ?v2 ?v4)))) :named a12))
(assert (! (forall ((?v0 A_llist$) (?v1 A_a_bool_fun_fun$) (?v2 A_llist$)) (=> (lnull$ ?v0) (llexord$ ?v1 ?v0 ?v2))) :named a13))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$) (?v3 A_llist$)) (=> (llexord$ ?v0 ?v1 ?v2) (llexord$ ?v0 (lappend$ ?v3 ?v1) (lappend$ ?v3 ?v2)))) :named a14))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (llexord$ ?v0 ?v1 (lappend$ ?v1 ?v2))) :named a15))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (= (llexord$ ?v0 ?v1 ?v2) (or (exists ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (llexord$ ?v0 ?v3 ?v4)))) (or (exists ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$ (fun_app$a ?v0 ?v3) ?v4)))) (exists ((?v3 A_llist$)) (and (= ?v1 lNil$) (= ?v2 ?v3))))))) :named a16))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_llist$) (?v2 A_llist$)) (=> (and (llexord$ ?v0 ?v1 ?v2) (and (forall ((?v3 A_llist$) (?v4 A_llist$) (?v5 A$)) (=> (and (= ?v1 (lCons$ ?v5 ?v3)) (and (= ?v2 (lCons$ ?v5 ?v4)) (llexord$ ?v0 ?v3 ?v4))) false)) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_llist$) (?v6 A_llist$)) (=> (and (= ?v1 (lCons$ ?v3 ?v5)) (and (= ?v2 (lCons$ ?v4 ?v6)) (fun_app$ (fun_app$a ?v0 ?v3) ?v4))) false)) (forall ((?v3 A_llist$)) (=> (and (= ?v1 lNil$) (= ?v2 ?v3)) false))))) false)) :named a17))
(check-sat)
;(get-unsat-core)
