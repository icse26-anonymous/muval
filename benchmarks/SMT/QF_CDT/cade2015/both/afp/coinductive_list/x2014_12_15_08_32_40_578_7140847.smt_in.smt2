; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 636
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_llist_list_nat_fun$ 0)
(declare-sort Nat_a_llist_prod_list_nat_fun$ 0)
(declare-sort Nat_nat_a_llist_prod_prod_list_nat_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_llist_list$ (nil$) (cons$ (hd$ A_llist$) (tl$ A_llist_list$)))
  (Nat_a_llist_prod$ (pair$ (fst$ Nat$) (snd$ A_llist$)))
  (Nat_nat_a_llist_prod_prod$ (pair$a (fst$a Nat$) (snd$a Nat_a_llist_prod$)))
  (Nat_nat_a_llist_prod_prod_list$ (nil$a) (cons$a (hd$a Nat_nat_a_llist_prod_prod$) (tl$a Nat_nat_a_llist_prod_prod_list$)))
  (Nat_a_llist_prod_list$ (nil$b) (cons$b (hd$b Nat_a_llist_prod$) (tl$b Nat_a_llist_prod_list$)))
  (Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist_llist$ (lNil$a) (lCons$a (lhd$a A_llist$) (ltl$a A_llist_llist$)))))
(declare-datatypes () ((Nat_nat_nat_a_llist_prod_prod_prod$ (pair$b (fst$b Nat$) (snd$b Nat_nat_a_llist_prod_prod$)))
  (Nat_nat_nat_a_llist_prod_prod_prod_list$ (nil$c) (cons$c (hd$c Nat_nat_nat_a_llist_prod_prod_prod$) (tl$c Nat_nat_nat_a_llist_prod_prod_prod_list$)))))
(declare-fun x$ () A$)
(declare-fun xs$ () A_llist$)
(declare-fun xs$a () A_llist$)
(declare-fun xss$ () A_llist_list$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lnth$ (A_llist_llist$ Nat$) A_llist$)
(declare-fun size$ () A_llist_list_nat_fun$)
(declare-fun xssa$ () A_llist_llist$)
(declare-fun lnull$ (A_llist$) Bool)
(declare-fun size$a () Nat_nat_a_llist_prod_prod_list_nat_fun$)
(declare-fun size$b () Nat_a_llist_prod_list_nat_fun$)
(declare-fun size$c (Nat_nat_nat_a_llist_prod_prod_prod_list$) Nat$)
(declare-fun rotate$ (Nat$ Nat_nat_a_llist_prod_prod_list$) Nat_nat_a_llist_prod_prod_list$)
(declare-fun fun_app$ (A_llist_list_nat_fun$ A_llist_list$) Nat$)
(declare-fun lconcat$ (A_llist_llist$) A_llist$)
(declare-fun llength$ (A_llist_llist$) Enat$)
(declare-fun rotate$a (Nat$ Nat_a_llist_prod_list$) Nat_a_llist_prod_list$)
(declare-fun rotate$b (Nat$ A_llist_list$) A_llist_list$)
(declare-fun rotate1$ (Nat_nat_a_llist_prod_prod_list$) Nat_nat_a_llist_prod_prod_list$)
(declare-fun fun_app$a (Nat_nat_a_llist_prod_prod_list_nat_fun$ Nat_nat_a_llist_prod_prod_list$) Nat$)
(declare-fun fun_app$b (Nat_a_llist_prod_list_nat_fun$ Nat_a_llist_prod_list$) Nat$)
(declare-fun lessThan$ (Nat$) Nat_set$)
(declare-fun llist_of$ (A_llist_list$) A_llist_llist$)
(declare-fun rotate1$a (Nat_a_llist_prod_list$) Nat_a_llist_prod_list$)
(declare-fun rotate1$b (A_llist_list$) A_llist_list$)
(declare-fun enumerate$ (Nat$ Nat_nat_a_llist_prod_prod_list$) Nat_nat_nat_a_llist_prod_prod_prod_list$)
(declare-fun enumerate$a (Nat$ Nat_a_llist_prod_list$) Nat_nat_a_llist_prod_prod_list$)
(declare-fun enumerate$b (Nat$ A_llist_list$) Nat_a_llist_prod_list$)
(declare-fun is_measure$ (Nat_nat_a_llist_prod_prod_list_nat_fun$) Bool)
(declare-fun is_measure$a (Nat_a_llist_prod_list_nat_fun$) Bool)
(declare-fun is_measure$b (A_llist_list_nat_fun$) Bool)
(assert (! (not (= (lessThan$ (fun_app$ size$ xss$)) (lessThan$ (fun_app$ size$ xss$)))) :named a0))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (lessThan$ ?v0) (lessThan$ ?v1)) (= ?v0 ?v1))) :named a1))
(assert (! (forall ((?v0 Nat_nat_a_llist_prod_prod_list$) (?v1 Nat_nat_a_llist_prod_prod_list$)) (=> (not (= (fun_app$a size$a ?v0) (fun_app$a size$a ?v1))) (= (= ?v0 ?v1) false))) :named a2))
(assert (! (forall ((?v0 Nat_a_llist_prod_list$) (?v1 Nat_a_llist_prod_list$)) (=> (not (= (fun_app$b size$b ?v0) (fun_app$b size$b ?v1))) (= (= ?v0 ?v1) false))) :named a3))
(assert (! (forall ((?v0 A_llist_list$) (?v1 A_llist_list$)) (=> (not (= (fun_app$ size$ ?v0) (fun_app$ size$ ?v1))) (= (= ?v0 ?v1) false))) :named a4))
(assert (! (forall ((?v0 Nat$)) (exists ((?v1 Nat_nat_a_llist_prod_prod_list$)) (= (fun_app$a size$a ?v1) ?v0))) :named a5))
(assert (! (forall ((?v0 Nat$)) (exists ((?v1 Nat_a_llist_prod_list$)) (= (fun_app$b size$b ?v1) ?v0))) :named a6))
(assert (! (forall ((?v0 Nat$)) (exists ((?v1 A_llist_list$)) (= (fun_app$ size$ ?v1) ?v0))) :named a7))
(assert (! (forall ((?v0 Nat_nat_a_llist_prod_prod_list$) (?v1 Nat_nat_a_llist_prod_prod_list$)) (=> (not (= (fun_app$a size$a ?v0) (fun_app$a size$a ?v1))) (not (= ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 Nat_a_llist_prod_list$) (?v1 Nat_a_llist_prod_list$)) (=> (not (= (fun_app$b size$b ?v0) (fun_app$b size$b ?v1))) (not (= ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 A_llist_list$) (?v1 A_llist_list$)) (=> (not (= (fun_app$ size$ ?v0) (fun_app$ size$ ?v1))) (not (= ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 Nat_nat_a_llist_prod_prod_list$)) (= (fun_app$a size$a (rotate1$ ?v0)) (fun_app$a size$a ?v0))) :named a11))
(assert (! (forall ((?v0 Nat_a_llist_prod_list$)) (= (fun_app$b size$b (rotate1$a ?v0)) (fun_app$b size$b ?v0))) :named a12))
(assert (! (forall ((?v0 A_llist_list$)) (= (fun_app$ size$ (rotate1$b ?v0)) (fun_app$ size$ ?v0))) :named a13))
(assert (! (is_measure$ size$a) :named a14))
(assert (! (is_measure$a size$b) :named a15))
(assert (! (is_measure$b size$) :named a16))
(assert (! (less$ (enat$ (fun_app$ size$ xss$)) (llength$ xssa$)) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_a_llist_prod_prod_list$)) (= (size$c (enumerate$ ?v0 ?v1)) (fun_app$a size$a ?v1))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_a_llist_prod_list$)) (= (fun_app$a size$a (enumerate$a ?v0 ?v1)) (fun_app$b size$b ?v1))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist_list$)) (= (fun_app$b size$b (enumerate$b ?v0 ?v1)) (fun_app$ size$ ?v1))) :named a20))
(assert (! (= (lnth$ xssa$ (fun_app$ size$ xss$)) (lCons$ x$ xs$)) :named a21))
(assert (! (lnull$ (lconcat$ (llist_of$ xss$))) :named a22))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_a_llist_prod_prod_list$)) (= (fun_app$a size$a (rotate$ ?v0 ?v1)) (fun_app$a size$a ?v1))) :named a23))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_a_llist_prod_list$)) (= (fun_app$b size$b (rotate$a ?v0 ?v1)) (fun_app$b size$b ?v1))) :named a24))
(assert (! (forall ((?v0 Nat$) (?v1 A_llist_list$)) (= (fun_app$ size$ (rotate$b ?v0 ?v1)) (fun_app$ size$ ?v1))) :named a25))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a26))
(assert (! (=> (forall ((?v0 A$) (?v1 A_llist$)) (=> (= (lconcat$ xssa$) (lCons$ ?v0 ?v1)) false)) false) :named a27))
(assert (! (forall ((?v0 A_llist_list$) (?v1 A_llist_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a28))
(assert (! (not (lnull$ (lconcat$ xssa$))) :named a29))
(assert (! (= (lconcat$ xssa$) (lCons$ x$ xs$a)) :named a30))
(check-sat)
;(get-unsat-core)
