; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 617
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-codatatypes () ((B_llist$ (lNil$) (lCons$ (lhd$ B$) (ltl$ B_llist$)))
  (A_llist$ (lNil$a) (lCons$a (lhd$a A$) (ltl$a A_llist$)))))
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-fun f$ () A_b_fun$)
(declare-fun x$ () A$)
(declare-fun na$ () Nat$)
(declare-fun uu$ () B_b_fun$)
(declare-fun xs$ () A_llist$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun uua$ () A_a_fun$)
(declare-fun xsa$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$ Enat$) Bool)
(declare-fun lmap$ (A_b_fun$ A_llist$) B_llist$)
(declare-fun lnth$ (B_llist$ Nat$) B$)
(declare-fun ldrop$ (Enat$ B_llist$) B_llist$)
(declare-fun lmap$a (B_a_fun$ B_llist$) A_llist$)
(declare-fun lmap$b (B_b_fun$ B_llist$) B_llist$)
(declare-fun lmap$c (A_a_fun$ A_llist$) A_llist$)
(declare-fun lnth$a (A_llist$ Nat$) A$)
(declare-fun lnull$ (B_llist$) Bool)
(declare-fun ltake$ (Enat$ B_llist$) B_llist$)
(declare-fun ldrop$a (Enat$ A_llist$) A_llist$)
(declare-fun ldropn$ (Nat$ B_llist$) B_llist$)
(declare-fun lnull$a (A_llist$) Bool)
(declare-fun ltake$a (Enat$ A_llist$) A_llist$)
(declare-fun fun_app$ (B_b_fun$ B$) B$)
(declare-fun ldropn$a (Nat$ A_llist$) A_llist$)
(declare-fun lfinite$ (B_llist$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (A_a_fun$ A$) A$)
(declare-fun fun_app$b (A_b_fun$ A$) B$)
(declare-fun lfinite$a (A_llist$) Bool)
(declare-fun llength$a (B_llist$) Enat$)
(assert (! (forall ((?v0 B$)) (! (= (fun_app$ uu$ ?v0) ?v0) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$a uua$ ?v0) ?v0) :pattern ((fun_app$a uua$ ?v0)))) :named a1))
(assert (! (not (= (lnth$ (lmap$ f$ xs$) na$) (fun_app$b f$ (lnth$a xs$ na$)))) :named a2))
(assert (! (less$ (enat$ na$) (llength$ xs$)) :named a3))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (llength$ (lmap$a ?v0 ?v1)) (llength$a ?v1))) :named a4))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (llength$a (lmap$b ?v0 ?v1)) (llength$a ?v1))) :named a5))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (llength$ (lmap$c ?v0 ?v1)) (llength$ ?v1))) :named a6))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (llength$a (lmap$ ?v0 ?v1)) (llength$ ?v1))) :named a7))
(assert (! (forall ((?v0 A_llist$)) (=> (less$ (enat$ na$) (llength$ ?v0)) (= (lnth$ (lmap$ f$ ?v0) na$) (fun_app$b f$ (lnth$a ?v0 na$))))) :named a8))
(assert (! (= xsa$ (lCons$a x$ xs$)) :named a9))
(assert (! (less$ (enat$ (suc$ na$)) (llength$ xsa$)) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_fun$) (?v2 B_llist$)) (= (ldropn$ ?v0 (lmap$b ?v1 ?v2)) (lmap$b ?v1 (ldropn$ ?v0 ?v2)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_fun$) (?v2 B_llist$)) (= (ldropn$a ?v0 (lmap$a ?v1 ?v2)) (lmap$a ?v1 (ldropn$ ?v0 ?v2)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (ldropn$a ?v0 (lmap$c ?v1 ?v2)) (lmap$c ?v1 (ldropn$a ?v0 ?v2)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_fun$) (?v2 A_llist$)) (= (ldropn$ ?v0 (lmap$ ?v1 ?v2)) (lmap$ ?v1 (ldropn$a ?v0 ?v2)))) :named a14))
(assert (! (forall ((?v0 Enat$) (?v1 B_b_fun$) (?v2 B_llist$)) (= (ldrop$ ?v0 (lmap$b ?v1 ?v2)) (lmap$b ?v1 (ldrop$ ?v0 ?v2)))) :named a15))
(assert (! (forall ((?v0 Enat$) (?v1 B_a_fun$) (?v2 B_llist$)) (= (ldrop$a ?v0 (lmap$a ?v1 ?v2)) (lmap$a ?v1 (ldrop$ ?v0 ?v2)))) :named a16))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (ldrop$a ?v0 (lmap$c ?v1 ?v2)) (lmap$c ?v1 (ldrop$a ?v0 ?v2)))) :named a17))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_fun$) (?v2 A_llist$)) (= (ldrop$ ?v0 (lmap$ ?v1 ?v2)) (lmap$ ?v1 (ldrop$a ?v0 ?v2)))) :named a18))
(assert (! (forall ((?v0 Enat$) (?v1 B_b_fun$) (?v2 B_llist$)) (= (ltake$ ?v0 (lmap$b ?v1 ?v2)) (lmap$b ?v1 (ltake$ ?v0 ?v2)))) :named a19))
(assert (! (forall ((?v0 Enat$) (?v1 B_a_fun$) (?v2 B_llist$)) (= (ltake$a ?v0 (lmap$a ?v1 ?v2)) (lmap$a ?v1 (ltake$ ?v0 ?v2)))) :named a20))
(assert (! (forall ((?v0 Enat$) (?v1 A_a_fun$) (?v2 A_llist$)) (= (ltake$a ?v0 (lmap$c ?v1 ?v2)) (lmap$c ?v1 (ltake$a ?v0 ?v2)))) :named a21))
(assert (! (forall ((?v0 Enat$) (?v1 A_b_fun$) (?v2 A_llist$)) (= (ltake$ ?v0 (lmap$ ?v1 ?v2)) (lmap$ ?v1 (ltake$a ?v0 ?v2)))) :named a22))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (lfinite$ (lmap$b ?v0 ?v1)) (lfinite$ ?v1))) :named a23))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (lfinite$a (lmap$a ?v0 ?v1)) (lfinite$ ?v1))) :named a24))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lfinite$a (lmap$c ?v0 ?v1)) (lfinite$a ?v1))) :named a25))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (lfinite$ (lmap$ ?v0 ?v1)) (lfinite$a ?v1))) :named a26))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (lnull$ (lmap$b ?v0 ?v1)) (lnull$ ?v1))) :named a27))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (lnull$a (lmap$a ?v0 ?v1)) (lnull$ ?v1))) :named a28))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (lnull$a (lmap$c ?v0 ?v1)) (lnull$a ?v1))) :named a29))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (lnull$ (lmap$ ?v0 ?v1)) (lnull$a ?v1))) :named a30))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (ltl$ (lmap$b ?v0 ?v1)) (lmap$b ?v0 (ltl$ ?v1)))) :named a31))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (ltl$a (lmap$a ?v0 ?v1)) (lmap$a ?v0 (ltl$ ?v1)))) :named a32))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (ltl$a (lmap$c ?v0 ?v1)) (lmap$c ?v0 (ltl$a ?v1)))) :named a33))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (ltl$ (lmap$ ?v0 ?v1)) (lmap$ ?v0 (ltl$a ?v1)))) :named a34))
(assert (! (=> (forall ((?v0 A$) (?v1 A_llist$)) (=> (and (= xsa$ (lCons$a ?v0 ?v1)) (less$ (enat$ na$) (llength$ ?v1))) false)) false) :named a35))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_llist$)) (= (= (lmap$b ?v0 ?v1) lNil$) (= ?v1 lNil$))) :named a36))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_llist$)) (= (= (lmap$a ?v0 ?v1) lNil$a) (= ?v1 lNil$))) :named a37))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_llist$)) (= (= (lmap$c ?v0 ?v1) lNil$a) (= ?v1 lNil$a))) :named a38))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_llist$)) (= (= (lmap$ ?v0 ?v1) lNil$) (= ?v1 lNil$a))) :named a39))
(assert (! (forall ((?v0 B$) (?v1 B_llist$) (?v2 B$) (?v3 B_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a40))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$a ?v0 ?v1) (lCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a41))
(assert (! (forall ((?v0 B_llist$)) (= (lmap$b uu$ ?v0) ?v0)) :named a42))
(assert (! (forall ((?v0 A_llist$)) (= (lmap$c uua$ ?v0) ?v0)) :named a43))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a44))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a45))
(assert (! (forall ((?v0 B$) (?v1 B_llist$)) (! (= (lfinite$ (lCons$ ?v0 ?v1)) (lfinite$ ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a46))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$a (lCons$a ?v0 ?v1)) (lfinite$a ?v1)) :pattern ((lCons$a ?v0 ?v1)))) :named a47))
(check-sat)
;(get-unsat-core)
