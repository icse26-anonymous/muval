; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 561
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_a_a_prod_fun$ 0)
(declare-sort A_llist_a_llist_fun$ 0)
(declare-sort Nat_a_a_a_prod_prod_fun$ 0)
(declare-sort Nat_a_a_prod_a_prod_fun$ 0)
(declare-sort Nat_a_a_prod_a_a_prod_prod_fun$ 0)
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))
  (A_a_prod$ (pair$ (fst$ A$) (snd$ A$)))
  (A_a_prod_a_a_prod_prod$ (pair$a (fst$a A_a_prod$) (snd$a A_a_prod$)))
  (A_a_prod_a_a_prod_prod_list$ (nil$a) (cons$a (hd$a A_a_prod_a_a_prod_prod$) (tl$a A_a_prod_a_a_prod_prod_list$)))))
(declare-codatatypes () ((A_a_prod_a_a_prod_prod_llist$ (lNil$a) (lCons$a (lhd$a A_a_prod_a_a_prod_prod$) (ltl$a A_a_prod_a_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_prod$ (pair$b (fst$b A_a_prod$) (snd$b A$)))
  (A_a_prod_a_prod_list$ (nil$b) (cons$b (hd$b A_a_prod_a_prod$) (tl$b A_a_prod_a_prod_list$)))))
(declare-codatatypes () ((A_a_prod_a_prod_llist$ (lNil$b) (lCons$b (lhd$b A_a_prod_a_prod$) (ltl$b A_a_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod$ (pair$c (fst$c A$) (snd$c A_a_prod$)))
  (A_a_a_prod_prod_list$ (nil$c) (cons$c (hd$c A_a_a_prod_prod$) (tl$c A_a_a_prod_prod_list$)))))
(declare-codatatypes () ((A_a_a_prod_prod_llist$ (lNil$c) (lCons$c (lhd$c A_a_a_prod_prod$) (ltl$c A_a_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_list$ (nil$d) (cons$d (hd$d A_a_prod$) (tl$d A_a_prod_list$)))))
(declare-codatatypes () ((A_a_prod_llist$ (lNil$d) (lCons$d (lhd$d A_a_prod$) (ltl$d A_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_a_prod_prod$ (pair$d (fst$d A$) (snd$d A_a_prod_a_prod$)))))
(declare-codatatypes () ((A_a_a_prod_a_prod_prod_llist$ (lNil$e) (lCons$e (lhd$e A_a_a_prod_a_prod_prod$) (ltl$e A_a_a_prod_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_a_prod_prod_list$ (nil$e) (cons$e (hd$e A_a_a_prod_a_prod_prod$) (tl$e A_a_a_prod_a_prod_prod_list$)))
  (A_a_a_a_prod_prod_prod$ (pair$e (fst$e A$) (snd$e A_a_a_prod_prod$)))))
(declare-codatatypes () ((A_a_a_a_prod_prod_prod_llist$ (lNil$f) (lCons$f (lhd$f A_a_a_a_prod_prod_prod$) (ltl$f A_a_a_a_prod_prod_prod_llist$)))))
(declare-datatypes () ((A_a_a_a_prod_prod_prod_list$ (nil$f) (cons$f (hd$f A_a_a_a_prod_prod_prod$) (tl$f A_a_a_a_prod_prod_prod_list$)))
  (A_a_prod_a_prod_a_prod$ (pair$f (fst$f A_a_prod_a_prod$) (snd$f A$)))))
(declare-codatatypes () ((A_a_prod_a_prod_a_prod_llist$ (lNil$g) (lCons$g (lhd$g A_a_prod_a_prod_a_prod$) (ltl$g A_a_prod_a_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_prod_a_prod_list$ (nil$g) (cons$g (hd$g A_a_prod_a_prod_a_prod$) (tl$g A_a_prod_a_prod_a_prod_list$)))
  (A_a_a_prod_prod_a_prod$ (pair$g (fst$g A_a_a_prod_prod$) (snd$g A$)))))
(declare-codatatypes () ((A_a_a_prod_prod_a_prod_llist$ (lNil$h) (lCons$h (lhd$h A_a_a_prod_prod_a_prod$) (ltl$h A_a_a_prod_prod_a_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_prod_a_prod_list$ (nil$h) (cons$h (hd$h A_a_a_prod_prod_a_prod$) (tl$h A_a_a_prod_prod_a_prod_list$)))
  (A_a_a_prod_a_a_prod_prod_prod$ (pair$h (fst$h A$) (snd$h A_a_prod_a_a_prod_prod$)))))
(declare-codatatypes () ((A_a_a_prod_a_a_prod_prod_prod_llist$ (lNil$i) (lCons$i (lhd$i A_a_a_prod_a_a_prod_prod_prod$) (ltl$i A_a_a_prod_a_a_prod_prod_prod_llist$)))))
(declare-datatypes () ((A_a_a_prod_a_a_prod_prod_prod_list$ (nil$i) (cons$i (hd$i A_a_a_prod_a_a_prod_prod_prod$) (tl$i A_a_a_prod_a_a_prod_prod_prod_list$)))
  (A_a_prod_a_a_prod_a_prod_prod$ (pair$i (fst$i A_a_prod$) (snd$i A_a_prod_a_prod$)))))
(declare-codatatypes () ((A_a_prod_a_a_prod_a_prod_prod_llist$ (lNil$j) (lCons$j (lhd$j A_a_prod_a_a_prod_a_prod_prod$) (ltl$j A_a_prod_a_a_prod_a_prod_prod_llist$)))))
(declare-datatypes () ((A_a_prod_a_a_prod_a_prod_prod_list$ (nil$j) (cons$j (hd$j A_a_prod_a_a_prod_a_prod_prod$) (tl$j A_a_prod_a_a_prod_a_prod_prod_list$)))))
(declare-fun uu$ (A$) A_llist_a_llist_fun$)
(declare-fun xs$ () A_list$)
(declare-fun nth$ (A_a_prod_a_a_prod_prod_list$) Nat_a_a_prod_a_a_prod_prod_fun$)
(declare-fun zip$ (A_list$ A_list$) A_a_prod_list$)
(declare-fun drop$ (Nat$ A_a_prod_a_a_prod_prod_list$) A_a_prod_a_a_prod_prod_list$)
(declare-fun last$ (A_list$) A$)
(declare-fun lnth$ (A_a_prod_a_a_prod_prod_llist$) Nat_a_a_prod_a_a_prod_prod_fun$)
(declare-fun lzip$ (A_llist$ A_llist$) A_a_prod_llist$)
(declare-fun nth$a (A_a_prod_a_prod_list$) Nat_a_a_prod_a_prod_fun$)
(declare-fun nth$b (A_a_a_prod_prod_list$) Nat_a_a_a_prod_prod_fun$)
(declare-fun nth$c (A_a_prod_list$) Nat_a_a_prod_fun$)
(declare-fun nth$d (A_list$) Nat_a_fun$)
(declare-fun zip$a (A_list$ A_a_prod_list$) A_a_a_prod_prod_list$)
(declare-fun zip$b (A_a_prod_list$ A_list$) A_a_prod_a_prod_list$)
(declare-fun zip$c (A_a_prod_list$ A_a_prod_list$) A_a_prod_a_a_prod_prod_list$)
(declare-fun zip$d (A_list$ A_a_prod_a_prod_list$) A_a_a_prod_a_prod_prod_list$)
(declare-fun zip$e (A_list$ A_a_a_prod_prod_list$) A_a_a_a_prod_prod_prod_list$)
(declare-fun zip$f (A_a_prod_a_prod_list$ A_list$) A_a_prod_a_prod_a_prod_list$)
(declare-fun zip$g (A_a_a_prod_prod_list$ A_list$) A_a_a_prod_prod_a_prod_list$)
(declare-fun zip$h (A_list$ A_a_prod_a_a_prod_prod_list$) A_a_a_prod_a_a_prod_prod_prod_list$)
(declare-fun zip$i (A_a_prod_list$ A_a_prod_a_prod_list$) A_a_prod_a_a_prod_a_prod_prod_list$)
(declare-fun drop$a (Nat$ A_a_prod_a_prod_list$) A_a_prod_a_prod_list$)
(declare-fun drop$b (Nat$ A_a_a_prod_prod_list$) A_a_a_prod_prod_list$)
(declare-fun drop$c (Nat$ A_a_prod_list$) A_a_prod_list$)
(declare-fun drop$d (Nat$ A_list$) A_list$)
(declare-fun llast$ (A_llist$) A$)
(declare-fun lnth$a (A_a_prod_a_prod_llist$) Nat_a_a_prod_a_prod_fun$)
(declare-fun lnth$b (A_a_a_prod_prod_llist$) Nat_a_a_a_prod_prod_fun$)
(declare-fun lnth$c (A_a_prod_llist$) Nat_a_a_prod_fun$)
(declare-fun lnth$d (A_llist$) Nat_a_fun$)
(declare-fun lnull$ (A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun lzip$a (A_llist$ A_a_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun lzip$b (A_a_prod_llist$ A_llist$) A_a_prod_a_prod_llist$)
(declare-fun lzip$c (A_a_prod_llist$ A_a_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lzip$d (A_llist$ A_a_prod_a_prod_llist$) A_a_a_prod_a_prod_prod_llist$)
(declare-fun lzip$e (A_llist$ A_a_a_prod_prod_llist$) A_a_a_a_prod_prod_prod_llist$)
(declare-fun lzip$f (A_a_prod_a_prod_llist$ A_llist$) A_a_prod_a_prod_a_prod_llist$)
(declare-fun lzip$g (A_a_a_prod_prod_llist$ A_llist$) A_a_a_prod_prod_a_prod_llist$)
(declare-fun lzip$h (A_llist$ A_a_prod_a_a_prod_prod_llist$) A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun lzip$i (A_a_prod_llist$ A_a_prod_a_prod_llist$) A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun ldropn$ (Nat$ A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun lnull$a (A_a_prod_a_prod_llist$) Bool)
(declare-fun lnull$b (A_a_a_prod_prod_llist$) Bool)
(declare-fun lnull$c (A_a_prod_llist$) Bool)
(declare-fun lnull$d (A_llist$) Bool)
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$) A_llist$)
(declare-fun ldropn$a (Nat$ A_a_prod_a_prod_llist$) A_a_prod_a_prod_llist$)
(declare-fun ldropn$b (Nat$ A_a_a_prod_prod_llist$) A_a_a_prod_prod_llist$)
(declare-fun ldropn$c (Nat$ A_a_prod_llist$) A_a_prod_llist$)
(declare-fun ldropn$d (Nat$ A_llist$) A_llist$)
(declare-fun lfinite$ (A_a_prod_a_a_prod_prod_llist$) Bool)
(declare-fun list_of$ (A_a_prod_a_a_prod_prod_llist$) A_a_prod_a_a_prod_prod_list$)
(declare-fun lfinite$a (A_a_prod_a_prod_llist$) Bool)
(declare-fun lfinite$b (A_a_a_prod_prod_llist$) Bool)
(declare-fun lfinite$c (A_a_prod_llist$) Bool)
(declare-fun lfinite$d (A_llist$) Bool)
(declare-fun list_of$a (A_a_prod_a_prod_llist$) A_a_prod_a_prod_list$)
(declare-fun list_of$b (A_a_a_prod_prod_llist$) A_a_a_prod_prod_list$)
(declare-fun list_of$c (A_a_prod_llist$) A_a_prod_list$)
(declare-fun list_of$d (A_llist$) A_list$)
(declare-fun llist_of$ (A_list$) A_llist$)
(declare-fun llist_of$a (A_a_prod_a_a_prod_prod_list$) A_a_prod_a_a_prod_prod_llist$)
(declare-fun llist_of$b (A_a_prod_a_prod_list$) A_a_prod_a_prod_llist$)
(declare-fun llist_of$c (A_a_a_prod_prod_list$) A_a_a_prod_prod_llist$)
(declare-fun llist_of$d (A_a_prod_list$) A_a_prod_llist$)
(declare-fun llist_of$e (A_a_a_prod_a_prod_prod_list$) A_a_a_prod_a_prod_prod_llist$)
(declare-fun llist_of$f (A_a_a_a_prod_prod_prod_list$) A_a_a_a_prod_prod_prod_llist$)
(declare-fun llist_of$g (A_a_prod_a_prod_a_prod_list$) A_a_prod_a_prod_a_prod_llist$)
(declare-fun llist_of$h (A_a_a_prod_prod_a_prod_list$) A_a_a_prod_prod_a_prod_llist$)
(declare-fun llist_of$i (A_a_a_prod_a_a_prod_prod_prod_list$) A_a_a_prod_a_a_prod_prod_prod_llist$)
(declare-fun llist_of$j (A_a_prod_a_a_prod_a_prod_prod_list$) A_a_prod_a_a_prod_a_prod_prod_llist$)
(declare-fun undefined$ () A$)
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (lCons$ ?v0 ?v1)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a0))
(assert (! (not (= (llast$ (llist_of$ xs$)) (last$ xs$))) :named a1))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_list$) (?v1 A_a_prod_a_a_prod_prod_list$)) (= (= (llist_of$a ?v0) (llist_of$a ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 A_a_prod_a_prod_list$) (?v1 A_a_prod_a_prod_list$)) (= (= (llist_of$b ?v0) (llist_of$b ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$) (?v1 A_a_a_prod_prod_list$)) (= (= (llist_of$c ?v0) (llist_of$c ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 A_a_prod_list$)) (= (= (llist_of$d ?v0) (llist_of$d ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (= (llist_of$ ?v0) (llist_of$ ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_list$)) (= (list_of$ (llist_of$a ?v0)) ?v0)) :named a7))
(assert (! (forall ((?v0 A_a_prod_a_prod_list$)) (= (list_of$a (llist_of$b ?v0)) ?v0)) :named a8))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$)) (= (list_of$b (llist_of$c ?v0)) ?v0)) :named a9))
(assert (! (forall ((?v0 A_a_prod_list$)) (= (list_of$c (llist_of$d ?v0)) ?v0)) :named a10))
(assert (! (forall ((?v0 A_list$)) (= (list_of$d (llist_of$ ?v0)) ?v0)) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_llist$)) (! (= (llast$ (lCons$ ?v0 (lCons$ ?v1 ?v2))) (llast$ (lCons$ ?v1 ?v2))) :pattern ((lCons$ ?v0 (lCons$ ?v1 ?v2))))) :named a12))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_list$)) (lfinite$ (llist_of$a ?v0))) :named a13))
(assert (! (forall ((?v0 A_a_prod_a_prod_list$)) (lfinite$a (llist_of$b ?v0))) :named a14))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$)) (lfinite$b (llist_of$c ?v0))) :named a15))
(assert (! (forall ((?v0 A_a_prod_list$)) (lfinite$c (llist_of$d ?v0))) :named a16))
(assert (! (forall ((?v0 A_list$)) (lfinite$d (llist_of$ ?v0))) :named a17))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$)) (=> (lfinite$ ?v0) (= (llist_of$a (list_of$ ?v0)) ?v0))) :named a18))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$)) (=> (lfinite$a ?v0) (= (llist_of$b (list_of$a ?v0)) ?v0))) :named a19))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$)) (=> (lfinite$b ?v0) (= (llist_of$c (list_of$b ?v0)) ?v0))) :named a20))
(assert (! (forall ((?v0 A_a_prod_llist$)) (=> (lfinite$c ?v0) (= (llist_of$d (list_of$c ?v0)) ?v0))) :named a21))
(assert (! (forall ((?v0 A_llist$)) (=> (lfinite$d ?v0) (= (llist_of$ (list_of$d ?v0)) ?v0))) :named a22))
(assert (! (forall ((?v0 A$)) (! (= (llast$ (lCons$ ?v0 lNil$)) ?v0) :pattern ((uu$ ?v0)))) :named a23))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_a_a_prod_prod_list$)) (= (ldropn$ ?v0 (llist_of$a ?v1)) (llist_of$a (drop$ ?v0 ?v1)))) :named a24))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_a_prod_list$)) (= (ldropn$a ?v0 (llist_of$b ?v1)) (llist_of$b (drop$a ?v0 ?v1)))) :named a25))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_a_prod_prod_list$)) (= (ldropn$b ?v0 (llist_of$c ?v1)) (llist_of$c (drop$b ?v0 ?v1)))) :named a26))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_list$)) (= (ldropn$c ?v0 (llist_of$d ?v1)) (llist_of$d (drop$c ?v0 ?v1)))) :named a27))
(assert (! (forall ((?v0 Nat$) (?v1 A_list$)) (= (ldropn$d ?v0 (llist_of$ ?v1)) (llist_of$ (drop$d ?v0 ?v1)))) :named a28))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_list$)) (= (lhd$a (llist_of$a ?v0)) (hd$a ?v0))) :named a29))
(assert (! (forall ((?v0 A_a_prod_a_prod_list$)) (= (lhd$b (llist_of$b ?v0)) (hd$b ?v0))) :named a30))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$)) (= (lhd$c (llist_of$c ?v0)) (hd$c ?v0))) :named a31))
(assert (! (forall ((?v0 A_a_prod_list$)) (= (lhd$d (llist_of$d ?v0)) (hd$d ?v0))) :named a32))
(assert (! (forall ((?v0 A_list$)) (= (lhd$ (llist_of$ ?v0)) (hd$ ?v0))) :named a33))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_list$)) (= (lnull$ (llist_of$a ?v0)) (= ?v0 nil$a))) :named a34))
(assert (! (forall ((?v0 A_a_prod_a_prod_list$)) (= (lnull$a (llist_of$b ?v0)) (= ?v0 nil$b))) :named a35))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$)) (= (lnull$b (llist_of$c ?v0)) (= ?v0 nil$c))) :named a36))
(assert (! (forall ((?v0 A_a_prod_list$)) (= (lnull$c (llist_of$d ?v0)) (= ?v0 nil$d))) :named a37))
(assert (! (forall ((?v0 A_list$)) (= (lnull$d (llist_of$ ?v0)) (= ?v0 nil$))) :named a38))
(assert (! (= (llast$ lNil$) undefined$) :named a39))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (lzip$ (llist_of$ ?v0) (llist_of$ ?v1)) (llist_of$d (zip$ ?v0 ?v1)))) :named a40))
(assert (! (forall ((?v0 A_list$) (?v1 A_a_prod_list$)) (= (lzip$a (llist_of$ ?v0) (llist_of$d ?v1)) (llist_of$c (zip$a ?v0 ?v1)))) :named a41))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 A_list$)) (= (lzip$b (llist_of$d ?v0) (llist_of$ ?v1)) (llist_of$b (zip$b ?v0 ?v1)))) :named a42))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 A_a_prod_list$)) (= (lzip$c (llist_of$d ?v0) (llist_of$d ?v1)) (llist_of$a (zip$c ?v0 ?v1)))) :named a43))
(assert (! (forall ((?v0 A_list$) (?v1 A_a_prod_a_prod_list$)) (= (lzip$d (llist_of$ ?v0) (llist_of$b ?v1)) (llist_of$e (zip$d ?v0 ?v1)))) :named a44))
(assert (! (forall ((?v0 A_list$) (?v1 A_a_a_prod_prod_list$)) (= (lzip$e (llist_of$ ?v0) (llist_of$c ?v1)) (llist_of$f (zip$e ?v0 ?v1)))) :named a45))
(assert (! (forall ((?v0 A_a_prod_a_prod_list$) (?v1 A_list$)) (= (lzip$f (llist_of$b ?v0) (llist_of$ ?v1)) (llist_of$g (zip$f ?v0 ?v1)))) :named a46))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$) (?v1 A_list$)) (= (lzip$g (llist_of$c ?v0) (llist_of$ ?v1)) (llist_of$h (zip$g ?v0 ?v1)))) :named a47))
(assert (! (forall ((?v0 A_list$) (?v1 A_a_prod_a_a_prod_prod_list$)) (= (lzip$h (llist_of$ ?v0) (llist_of$a ?v1)) (llist_of$i (zip$h ?v0 ?v1)))) :named a48))
(assert (! (forall ((?v0 A_a_prod_list$) (?v1 A_a_prod_a_prod_list$)) (= (lzip$i (llist_of$d ?v0) (llist_of$b ?v1)) (llist_of$j (zip$i ?v0 ?v1)))) :named a49))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_list$)) (= (ltl$a (llist_of$a ?v0)) (llist_of$a (tl$a ?v0)))) :named a50))
(assert (! (forall ((?v0 A_a_prod_a_prod_list$)) (= (ltl$b (llist_of$b ?v0)) (llist_of$b (tl$b ?v0)))) :named a51))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$)) (= (ltl$c (llist_of$c ?v0)) (llist_of$c (tl$c ?v0)))) :named a52))
(assert (! (forall ((?v0 A_a_prod_list$)) (= (ltl$d (llist_of$d ?v0)) (llist_of$d (tl$d ?v0)))) :named a53))
(assert (! (forall ((?v0 A_list$)) (= (ltl$ (llist_of$ ?v0)) (llist_of$ (tl$ ?v0)))) :named a54))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_list$)) (= (lnth$ (llist_of$a ?v0)) (nth$ ?v0))) :named a55))
(assert (! (forall ((?v0 A_a_prod_a_prod_list$)) (= (lnth$a (llist_of$b ?v0)) (nth$a ?v0))) :named a56))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$)) (= (lnth$b (llist_of$c ?v0)) (nth$b ?v0))) :named a57))
(assert (! (forall ((?v0 A_a_prod_list$)) (= (lnth$c (llist_of$d ?v0)) (nth$c ?v0))) :named a58))
(assert (! (forall ((?v0 A_list$)) (= (lnth$d (llist_of$ ?v0)) (nth$d ?v0))) :named a59))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a60))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (lfinite$c (lCons$d ?v0 ?v1)) (lfinite$c ?v1)) :pattern ((lCons$d ?v0 ?v1)))) :named a61))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$d (lCons$ ?v0 ?v1)) (lfinite$d ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a62))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod_llist$)) (! (= (lfinite$c (lCons$d ?v0 ?v1)) (lfinite$c ?v1)) :pattern ((lCons$d ?v0 ?v1)))) :named a63))
(assert (! (forall ((?v0 A$) (?v1 A_llist$)) (! (= (lfinite$d (lCons$ ?v0 ?v1)) (lfinite$d ?v1)) :pattern ((lCons$ ?v0 ?v1)))) :named a64))
(assert (! (= (lfinite$c lNil$d) true) :named a65))
(assert (! (= (lfinite$d lNil$) true) :named a66))
(check-sat)
;(get-unsat-core)
