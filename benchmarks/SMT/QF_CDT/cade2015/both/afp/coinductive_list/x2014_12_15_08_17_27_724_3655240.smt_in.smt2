; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 546
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_enat_fun$ 0)
(declare-sort Enat_bool_fun$ 0)
(declare-datatypes () ((Nat_option$ (none$) (some$ (the$ Nat$)))
  (Enat$ (abs_enat$ (rep_enat$ Nat_option$)))))
(declare-codatatypes () ((A_llist$ (lNil$) (lCons$ (lhd$ A$) (ltl$ A_llist$)))))
(declare-fun y$ () A$)
(declare-fun na$ () Nat$)
(declare-fun ys$ () A_llist$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun xsa$ () A_llist$)
(declare-fun enat$ (Nat$) Enat$)
(declare-fun less$ (Enat$) Enat_bool_fun$)
(declare-fun less$a (Nat$ Nat$) Bool)
(declare-fun ldropn$ (Nat$ A_llist$) A_llist$)
(declare-fun fun_app$ (Enat_bool_fun$ Enat$) Bool)
(declare-fun llength$ (A_llist$) Enat$)
(declare-fun fun_app$a (Nat_enat_fun$ Nat$) Enat$)
(declare-fun fun_app$b (Nat_nat_fun$ Nat$) Nat$)
(assert (! (not (fun_app$ (less$ (enat$ (suc$ na$))) (llength$ xsa$))) :named a0))
(assert (! (forall ((?v0 A_llist$)) (=> (= (ldropn$ na$ ?v0) (lCons$ y$ ys$)) (fun_app$ (less$ (enat$ na$)) (llength$ ?v0)))) :named a1))
(assert (! (= (ldropn$ (suc$ na$) xsa$) (lCons$ y$ ys$)) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (enat$ ?v0) (enat$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 Enat$) (?v1 Nat$)) (=> (fun_app$ (less$ ?v0) (enat$ ?v1)) (exists ((?v2 Nat$)) (= ?v0 (enat$ ?v2))))) :named a6))
(assert (! (forall ((?v0 Nat_enat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (less$ (fun_app$a ?v0 ?v3)) (fun_app$a ?v0 (suc$ ?v3)))) (less$a ?v1 ?v2)) (fun_app$ (less$ (fun_app$a ?v0 ?v1)) (fun_app$a ?v0 ?v2)))) :named a7))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (less$a (fun_app$b ?v0 ?v3) (fun_app$b ?v0 (suc$ ?v3)))) (less$a ?v1 ?v2)) (less$a (fun_app$b ?v0 ?v1) (fun_app$b ?v0 ?v2)))) :named a8))
(assert (! (forall ((?v0 Nat_enat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (forall ((?v3 Nat$)) (fun_app$ (less$ (fun_app$a ?v0 ?v3)) (fun_app$a ?v0 (suc$ ?v3)))) (= (fun_app$ (less$ (fun_app$a ?v0 ?v1)) (fun_app$a ?v0 ?v2)) (less$a ?v1 ?v2)))) :named a9))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (forall ((?v3 Nat$)) (less$a (fun_app$b ?v0 ?v3) (fun_app$b ?v0 (suc$ ?v3)))) (= (less$a (fun_app$b ?v0 ?v1) (fun_app$b ?v0 ?v2)) (less$a ?v1 ?v2)))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 A$) (?v2 A_llist$)) (! (= (ldropn$ (suc$ ?v0) (lCons$ ?v1 ?v2)) (ldropn$ ?v0 ?v2)) :pattern ((ldropn$ (suc$ ?v0) (lCons$ ?v1 ?v2))))) :named a11))
(assert (! (forall ((?v0 Enat_bool_fun$) (?v1 Enat$)) (=> (forall ((?v2 Enat$)) (=> (forall ((?v3 Enat$)) (=> (fun_app$ (less$ ?v3) ?v2) (fun_app$ ?v0 ?v3))) (fun_app$ ?v0 ?v2))) (fun_app$ ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_llist$) (?v2 A$) (?v3 A_llist$)) (= (= (lCons$ ?v0 ?v1) (lCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 Nat$)) (less$a ?v0 (suc$ ?v0))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (less$a ?v0 ?v1) (less$a (suc$ ?v0) (suc$ ?v1)))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (less$a (suc$ ?v0) (suc$ ?v1)) (less$a ?v0 ?v1)) :pattern ((less$a (suc$ ?v0) (suc$ ?v1))))) :named a17))
(check-sat)
;(get-unsat-core)
