; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 1000
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_treeFI$ 0)
(declare-sort A_nat_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Nat_treeFI$ 0)
(declare-sort A_a_set_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort A_treeFI_set$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort A_nat_set_fun$ 0)
(declare-sort Nat_a_set_fun$ 0)
(declare-sort Nat_treeFI_set$ 0)
(declare-sort A_treeFI_treeFI$ 0)
(declare-sort Nat_nat_set_fun$ 0)
(declare-sort A_treeFI_nat_fun$ 0)
(declare-sort A_treeFI_bool_fun$ 0)
(declare-sort Nat_list_bool_fun$ 0)
(declare-sort A_a_treeFI_set_fun$ 0)
(declare-sort A_treeFI_a_set_fun$ 0)
(declare-sort A_treeFI_option_set$ 0)
(declare-sort A_treeFI_treeFI_set$ 0)
(declare-sort Nat_treeFI_bool_fun$ 0)
(declare-sort A_treeFI_nat_set_fun$ 0)
(declare-sort Nat_a_treeFI_set_fun$ 0)
(declare-sort Nat_list_nat_list_fun$ 0)
(declare-sort A_treeFI_list_bool_fun$ 0)
(declare-sort A_treeFI_treeFI_treeFI$ 0)
(declare-sort A_a_treeFI_bool_fun_fun$ 0)
(declare-sort A_treeFI_treeFI_nat_fun$ 0)
(declare-sort A_treeFI_treeFI_bool_fun$ 0)
(declare-sort A_treeFI_a_treeFI_set_fun$ 0)
(declare-sort A_treeFI_treeFI_a_set_fun$ 0)
(declare-sort A_treeFI_treeFI_treeFI_set$ 0)
(declare-sort Nat_nat_treeFI_bool_fun_fun$ 0)
(declare-sort Nat_list_nat_list_bool_fun_fun$ 0)
(declare-sort A_treeFI_list_a_treeFI_list_fun$ 0)
(declare-sort A_treeFI_treeFI_treeFI_bool_fun$ 0)
(declare-sort A_treeFI_treeFI_a_treeFI_set_fun$ 0)
(declare-sort A_treeFI_a_treeFI_treeFI_bool_fun_fun$ 0)
(declare-sort A_treeFI_treeFI_a_treeFI_treeFI_treeFI_bool_fun_fun$ 0)
(declare-datatypes () ((A_treeFI_list$ (nil$) (cons$ (hd$ A_treeFI$) (tl$ A_treeFI_list$)))
  (A_treeFI_treeFI_list$ (nil$a) (cons$a (hd$a A_treeFI_treeFI$) (tl$a A_treeFI_treeFI_list$)))
  (A_treeFI_treeFI_treeFI_list$ (nil$b) (cons$b (hd$b A_treeFI_treeFI_treeFI$) (tl$b A_treeFI_treeFI_treeFI_list$)))
  (Nat_treeFI_list$ (nil$c) (cons$c (hd$c Nat_treeFI$) (tl$c Nat_treeFI_list$)))
  (A_list$ (nil$d) (cons$d (hd$d A$) (tl$d A_list$)))
  (Nat_list$ (nil$e) (cons$e (hd$e Nat$) (tl$e Nat_list$)))
  (A_option$ (none$) (some$ (the$ A$)))
  (A_treeFI_treeFI_option$ (none$a) (some$a (the$a A_treeFI_treeFI$)))
  (Nat_option$ (none$b) (some$b (the$b Nat$)))
  (A_treeFI_option$ (none$c) (some$c (the$c A_treeFI$)))
  (A_treeFI_list_list$ (nil$f) (cons$f (hd$f A_treeFI_list$) (tl$f A_treeFI_list_list$)))
  (Nat_list_list$ (nil$g) (cons$g (hd$g Nat_list$) (tl$g Nat_list_list$)))))
(declare-fun tr$ () A_treeFI$)
(declare-fun uu$ (A_set$) A_bool_fun$)
(declare-fun bot$ () A_treeFI_set$)
(declare-fun lab$ (A_treeFI_treeFI$) A_treeFI$)
(declare-fun phi$ (A_treeFI$) Bool)
(declare-fun set$ (A_treeFI_list$) A_treeFI_set$)
(declare-fun sub$ (A_treeFI$) A_treeFI_list$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun uua$ (A_treeFI_treeFI_set$) A_treeFI_treeFI_bool_fun$)
(declare-fun uub$ (Nat_set$) Nat_bool_fun$)
(declare-fun uuc$ (A_treeFI_set$) A_treeFI_bool_fun$)
(declare-fun find$ (A_bool_fun$ A_list$) A_option$)
(declare-fun lab$a (A_treeFI$) A$)
(declare-fun lab$b (A_treeFI_treeFI_treeFI$) A_treeFI_treeFI$)
(declare-fun lab$c (Nat_treeFI$) Nat$)
(declare-fun set$a (A_treeFI_treeFI_list$) A_treeFI_treeFI_set$)
(declare-fun set$b (A_treeFI_treeFI_treeFI_list$) A_treeFI_treeFI_treeFI_set$)
(declare-fun set$c (Nat_treeFI_list$) Nat_treeFI_set$)
(declare-fun set$d (A_list$) A_set$)
(declare-fun set$e (Nat_list$) Nat_set$)
(declare-fun sub$a (A_treeFI_treeFI$) A_treeFI_treeFI_list$)
(declare-fun sub$b (A_treeFI_treeFI_treeFI$) A_treeFI_treeFI_treeFI_list$)
(declare-fun sub$c (Nat_treeFI$) Nat_treeFI_list$)
(declare-fun tree$ (A_treeFI$ A_treeFI_treeFI_list$) A_treeFI_treeFI$)
(declare-fun trev$ (A_treeFI$) A_treeFI$)
(declare-fun coset$ (A_treeFI_list$) A_treeFI_set$)
(declare-fun find$a (A_treeFI_treeFI_bool_fun$ A_treeFI_treeFI_list$) A_treeFI_treeFI_option$)
(declare-fun find$b (Nat_bool_fun$ Nat_list$) Nat_option$)
(declare-fun find$c (A_treeFI_bool_fun$ A_treeFI_list$) A_treeFI_option$)
(declare-fun minus$ (A_treeFI_set$ A_treeFI_set$) A_treeFI_set$)
(declare-fun these$ (A_treeFI_option_set$) A_treeFI_set$)
(declare-fun tree$a (A$ A_treeFI_list$) A_treeFI$)
(declare-fun tree$b (A_treeFI_treeFI$ A_treeFI_treeFI_treeFI_list$) A_treeFI_treeFI_treeFI$)
(declare-fun tree$c (Nat$ Nat_treeFI_list$) Nat_treeFI$)
(declare-fun trev$a (A_treeFI_treeFI$) A_treeFI_treeFI$)
(declare-fun compow$ (Nat$ A_treeFI_list_a_treeFI_list_fun$) A_treeFI_list_a_treeFI_list_fun$)
(declare-fun coset$a (A_list$) A_set$)
(declare-fun coset$b (A_treeFI_treeFI_list$) A_treeFI_treeFI_set$)
(declare-fun coset$c (Nat_list$) Nat_set$)
(declare-fun insert$ (A$ A_list$) A_list$)
(declare-fun member$ (A_treeFI_treeFI$ A_treeFI_treeFI_set$) Bool)
(declare-fun remove$ (A_treeFI_treeFI$ A_treeFI_treeFI_set$) A_treeFI_treeFI_set$)
(declare-fun rotate$ (Nat$ A_treeFI_treeFI_list$) A_treeFI_treeFI_list$)
(declare-fun sorted$ (Nat_list$) Bool)
(declare-fun collect$ (A_treeFI_bool_fun$) A_treeFI_set$)
(declare-fun fun_app$ (A_treeFI_treeFI_bool_fun$ A_treeFI_treeFI$) Bool)
(declare-fun insert$a (A_treeFI_treeFI$ A_treeFI_treeFI_list$) A_treeFI_treeFI_list$)
(declare-fun insert$b (Nat$) Nat_list_nat_list_fun$)
(declare-fun insert$c (A_treeFI$) A_treeFI_list_a_treeFI_list_fun$)
(declare-fun insert$d (A$ A_set$) A_set$)
(declare-fun insert$e (A_treeFI_treeFI$ A_treeFI_treeFI_set$) A_treeFI_treeFI_set$)
(declare-fun insert$f (Nat$ Nat_set$) Nat_set$)
(declare-fun insert$g (A_treeFI$ A_treeFI_set$) A_treeFI_set$)
(declare-fun insert$h (A_treeFI_option$ A_treeFI_option_set$) A_treeFI_option_set$)
(declare-fun is_none$ (A_treeFI_option$) Bool)
(declare-fun less_eq$ (Nat$) Nat_bool_fun$)
(declare-fun listMem$ (A$ A_list$) Bool)
(declare-fun member$a (A_treeFI$ A_treeFI_set$) Bool)
(declare-fun member$b (Nat$ Nat_set$) Bool)
(declare-fun member$c (A$ A_set$) Bool)
(declare-fun member$d (A_treeFI_treeFI_treeFI$ A_treeFI_treeFI_treeFI_set$) Bool)
(declare-fun member$e (Nat_treeFI$ Nat_treeFI_set$) Bool)
(declare-fun member$f (A_list$) A_bool_fun$)
(declare-fun member$g (A_treeFI_treeFI_list$) A_treeFI_treeFI_bool_fun$)
(declare-fun member$h (Nat_list$) Nat_bool_fun$)
(declare-fun member$i (A_treeFI_list$) A_treeFI_bool_fun$)
(declare-fun remove$a (Nat$ Nat_set$) Nat_set$)
(declare-fun remove$b (A_treeFI$ A_treeFI_set$) A_treeFI_set$)
(declare-fun remove$c (A$ A_set$) A_set$)
(declare-fun rotate$a (Nat$ Nat_list$) Nat_list$)
(declare-fun rotate$b (Nat$) A_treeFI_list_a_treeFI_list_fun$)
(declare-fun rotate1$ (A_treeFI_treeFI_list$) A_treeFI_treeFI_list$)
(declare-fun antimono$ (Nat_nat_fun$) Bool)
(declare-fun collect$a (A_bool_fun$) A_set$)
(declare-fun collect$b (A_treeFI_treeFI_bool_fun$) A_treeFI_treeFI_set$)
(declare-fun collect$c (Nat_bool_fun$) Nat_set$)
(declare-fun fun_app$a (A_treeFI_bool_fun$ A_treeFI$) Bool)
(declare-fun fun_app$b (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$c (A_bool_fun$ A$) Bool)
(declare-fun fun_app$d (A_treeFI_treeFI_a_treeFI_set_fun$ A_treeFI_treeFI$) A_treeFI_set$)
(declare-fun fun_app$e (A_treeFI_a_set_fun$ A_treeFI$) A_set$)
(declare-fun fun_app$f (Nat_list_nat_list_fun$ Nat_list$) Nat_list$)
(declare-fun fun_app$g (A_treeFI_list_a_treeFI_list_fun$ A_treeFI_list$) A_treeFI_list$)
(declare-fun fun_app$h (Nat_list_bool_fun$ Nat_list$) Bool)
(declare-fun fun_app$i (A_treeFI_list_bool_fun$ A_treeFI_list$) Bool)
(declare-fun fun_app$j (A_treeFI_treeFI_treeFI_bool_fun$ A_treeFI_treeFI_treeFI$) Bool)
(declare-fun fun_app$k (A_treeFI_treeFI_a_treeFI_treeFI_treeFI_bool_fun_fun$ A_treeFI_treeFI$) A_treeFI_treeFI_treeFI_bool_fun$)
(declare-fun fun_app$l (Nat_treeFI_bool_fun$ Nat_treeFI$) Bool)
(declare-fun fun_app$m (Nat_nat_treeFI_bool_fun_fun$ Nat$) Nat_treeFI_bool_fun$)
(declare-fun fun_app$n (A_treeFI_a_treeFI_treeFI_bool_fun_fun$ A_treeFI$) A_treeFI_treeFI_bool_fun$)
(declare-fun fun_app$o (A_a_treeFI_bool_fun_fun$ A$) A_treeFI_bool_fun$)
(declare-fun fun_app$p (A_treeFI_a_treeFI_set_fun$ A_treeFI$) A_treeFI_set$)
(declare-fun fun_app$q (A_a_set_fun$ A$) A_set$)
(declare-fun fun_app$r (Nat_a_set_fun$ Nat$) A_set$)
(declare-fun fun_app$s (A_nat_set_fun$ A$) Nat_set$)
(declare-fun fun_app$t (Nat_nat_set_fun$ Nat$) Nat_set$)
(declare-fun fun_app$u (A_a_treeFI_set_fun$ A$) A_treeFI_set$)
(declare-fun fun_app$v (Nat_a_treeFI_set_fun$ Nat$) A_treeFI_set$)
(declare-fun fun_app$w (A_treeFI_nat_set_fun$ A_treeFI$) Nat_set$)
(declare-fun fun_app$x (A_treeFI_treeFI_a_set_fun$ A_treeFI_treeFI$) A_set$)
(declare-fun fun_app$y (A_treeFI_nat_fun$ A_treeFI$) Nat$)
(declare-fun fun_app$z (A_nat_fun$ A$) Nat$)
(declare-fun less_eq$a (A_set$ A_set$) Bool)
(declare-fun less_eq$b (A_treeFI_treeFI_set$ A_treeFI_treeFI_set$) Bool)
(declare-fun less_eq$c (Nat_set$ Nat_set$) Bool)
(declare-fun less_eq$d (A_treeFI_set$ A_treeFI_set$) Bool)
(declare-fun listMem$a (A_treeFI_treeFI$ A_treeFI_treeFI_list$) Bool)
(declare-fun listMem$b (Nat$) Nat_list_bool_fun$)
(declare-fun listMem$c (A_treeFI$) A_treeFI_list_bool_fun$)
(declare-fun list_ex1$ (A_bool_fun$ A_list$) Bool)
(declare-fun rotate1$a (Nat_list$) Nat_list$)
(declare-fun rotate1$b () A_treeFI_list_a_treeFI_list_fun$)
(declare-fun sort_key$ (A_treeFI_nat_fun$ A_treeFI_list$) A_treeFI_list$)
(declare-fun supremum$ (A_treeFI_treeFI_set$ A_treeFI_treeFI_a_treeFI_set_fun$) A_treeFI_set$)
(declare-fun the_elem$ (A_treeFI_set$) A_treeFI$)
(declare-fun fun_app$aa (A_treeFI_treeFI_nat_fun$ A_treeFI_treeFI$) Nat$)
(declare-fun fun_app$ab (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$ac (Nat_list_nat_list_bool_fun_fun$ Nat_list$) Nat_list_bool_fun$)
(declare-fun list_ex1$a (A_treeFI_treeFI_bool_fun$ A_treeFI_treeFI_list$) Bool)
(declare-fun list_ex1$b (Nat_bool_fun$) Nat_list_bool_fun$)
(declare-fun list_ex1$c (A_treeFI_bool_fun$) A_treeFI_list_bool_fun$)
(declare-fun removeAll$ (A$ A_list$) A_list$)
(declare-fun supremum$a (A_treeFI_set$ A_treeFI_a_set_fun$) A_set$)
(declare-fun supremum$b (A_treeFI_set$ A_treeFI_a_treeFI_set_fun$) A_treeFI_set$)
(declare-fun supremum$c (A_set$ A_a_set_fun$) A_set$)
(declare-fun supremum$d (Nat_set$ Nat_a_set_fun$) A_set$)
(declare-fun supremum$e (A_set$ A_nat_set_fun$) Nat_set$)
(declare-fun supremum$f (Nat_set$ Nat_nat_set_fun$) Nat_set$)
(declare-fun supremum$g (A_set$ A_a_treeFI_set_fun$) A_treeFI_set$)
(declare-fun supremum$h (Nat_set$ Nat_a_treeFI_set_fun$) A_treeFI_set$)
(declare-fun supremum$i (A_treeFI_set$ A_treeFI_nat_set_fun$) Nat_set$)
(declare-fun supremum$j (A_treeFI_treeFI_set$ A_treeFI_treeFI_a_set_fun$) A_set$)
(declare-fun can_select$ (A_treeFI_treeFI_bool_fun$ A_treeFI_treeFI_set$) Bool)
(declare-fun gen_length$ (Nat$ A_treeFI_list$) Nat$)
(declare-fun infiniteTr$ (A_treeFI$) Bool)
(declare-fun insort_key$ (A_treeFI_nat_fun$ A_treeFI$ A_treeFI_list$) A_treeFI_list$)
(declare-fun removeAll$a (A_treeFI_treeFI$ A_treeFI_treeFI_list$) A_treeFI_treeFI_list$)
(declare-fun removeAll$b (Nat$ Nat_list$) Nat_list$)
(declare-fun removeAll$c (A_treeFI$ A_treeFI_list$) A_treeFI_list$)
(declare-fun set_treeFI$ (A_treeFI_treeFI_treeFI$) A_treeFI_treeFI_set$)
(declare-fun can_select$a (Nat_bool_fun$ Nat_set$) Bool)
(declare-fun can_select$b (A_treeFI_bool_fun$ A_treeFI_set$) Bool)
(declare-fun can_select$c (A_bool_fun$ A_set$) Bool)
(declare-fun gen_length$a (Nat$ Nat_list$) Nat$)
(declare-fun infiniteTr$a (A_treeFI_treeFI$) Bool)
(declare-fun insort_key$a (A_nat_fun$ A$ A_list$) A_list$)
(declare-fun insort_key$b (A_treeFI_treeFI_nat_fun$ A_treeFI_treeFI$ A_treeFI_treeFI_list$) A_treeFI_treeFI_list$)
(declare-fun insort_key$c (Nat_nat_fun$ Nat$ Nat_list$) Nat_list$)
(declare-fun pred_option$ (A_treeFI_bool_fun$ A_treeFI_option$) Bool)
(declare-fun set_treeFI$a (Nat_treeFI$) Nat_set$)
(declare-fun set_treeFI$b () A_treeFI_treeFI_a_treeFI_set_fun$)
(declare-fun set_treeFI$c () A_treeFI_a_set_fun$)
(assert (! (forall ((?v0 A_treeFI_treeFI_set$) (?v1 A_treeFI_treeFI$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$ (uua$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI$)) (! (= (fun_app$a (uuc$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$a (uuc$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat$)) (! (= (fun_app$b (uub$ ?v0) ?v1) (member$b ?v1 ?v0)) :pattern ((fun_app$b (uub$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$c (uu$ ?v0) ?v1) (member$c ?v1 ?v0)) :pattern ((fun_app$c (uu$ ?v0) ?v1)))) :named a3))
(assert (! (not (infiniteTr$ tr$)) :named a4))
(assert (! (phi$ tr$) :named a5))
(assert (! (forall ((?v0 A_treeFI$)) (=> (phi$ ?v0) (exists ((?v1 A_treeFI$)) (and (member$a ?v1 (set$ (sub$ ?v0))) (or (phi$ ?v1) (infiniteTr$ ?v1)))))) :named a6))
(assert (! (forall ((?v0 A_treeFI_treeFI$)) (= (infiniteTr$a ?v0) (exists ((?v1 A_treeFI_treeFI$) (?v2 A_treeFI_treeFI$)) (and (= ?v0 ?v2) (and (member$ ?v1 (set$a (sub$a ?v2))) (infiniteTr$a ?v1)))))) :named a7))
(assert (! (forall ((?v0 A_treeFI$)) (= (infiniteTr$ ?v0) (exists ((?v1 A_treeFI$) (?v2 A_treeFI$)) (and (= ?v0 ?v2) (and (member$a ?v1 (set$ (sub$ ?v2))) (infiniteTr$ ?v1)))))) :named a8))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI$)) (=> (and (member$ ?v0 (set$a (sub$a ?v1))) (infiniteTr$a ?v0)) (infiniteTr$a ?v1))) :named a9))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI$)) (=> (and (member$a ?v0 (set$ (sub$ ?v1))) (infiniteTr$ ?v0)) (infiniteTr$ ?v1))) :named a10))
(assert (! (forall ((?v0 A_treeFI_treeFI$)) (=> (and (infiniteTr$a ?v0) (forall ((?v1 A_treeFI_treeFI$) (?v2 A_treeFI_treeFI$)) (=> (and (= ?v0 ?v2) (and (member$ ?v1 (set$a (sub$a ?v2))) (infiniteTr$a ?v1))) false))) false)) :named a11))
(assert (! (forall ((?v0 A_treeFI$)) (=> (and (infiniteTr$ ?v0) (forall ((?v1 A_treeFI$) (?v2 A_treeFI$)) (=> (and (= ?v0 ?v2) (and (member$a ?v1 (set$ (sub$ ?v2))) (infiniteTr$ ?v1))) false))) false)) :named a12))
(assert (! (forall ((?v0 A_treeFI_treeFI_bool_fun$) (?v1 A_treeFI_treeFI$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v2 A_treeFI_treeFI$)) (=> (fun_app$ ?v0 ?v2) (exists ((?v3 A_treeFI_treeFI$) (?v4 A_treeFI_treeFI$)) (and (= ?v2 ?v4) (and (member$ ?v3 (set$a (sub$a ?v4))) (or (fun_app$ ?v0 ?v3) (infiniteTr$a ?v3)))))))) (infiniteTr$a ?v1))) :named a13))
(assert (! (forall ((?v0 A_treeFI_bool_fun$) (?v1 A_treeFI$)) (=> (and (fun_app$a ?v0 ?v1) (forall ((?v2 A_treeFI$)) (=> (fun_app$a ?v0 ?v2) (exists ((?v3 A_treeFI$) (?v4 A_treeFI$)) (and (= ?v2 ?v4) (and (member$a ?v3 (set$ (sub$ ?v4))) (or (fun_app$a ?v0 ?v3) (infiniteTr$ ?v3)))))))) (infiniteTr$ ?v1))) :named a14))
(assert (! (forall ((?v0 A_treeFI_treeFI_treeFI$) (?v1 A_treeFI_treeFI_treeFI$) (?v2 A_treeFI_treeFI$)) (=> (and (member$d ?v0 (set$b (sub$b ?v1))) (member$ ?v2 (set_treeFI$ ?v0))) (member$ ?v2 (set_treeFI$ ?v1)))) :named a15))
(assert (! (forall ((?v0 Nat_treeFI$) (?v1 Nat_treeFI$) (?v2 Nat$)) (=> (and (member$e ?v0 (set$c (sub$c ?v1))) (member$b ?v2 (set_treeFI$a ?v0))) (member$b ?v2 (set_treeFI$a ?v1)))) :named a16))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI$) (?v2 A_treeFI$)) (=> (and (member$ ?v0 (set$a (sub$a ?v1))) (member$a ?v2 (fun_app$d set_treeFI$b ?v0))) (member$a ?v2 (fun_app$d set_treeFI$b ?v1)))) :named a17))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI$) (?v2 A$)) (=> (and (member$a ?v0 (set$ (sub$ ?v1))) (member$c ?v2 (fun_app$e set_treeFI$c ?v0))) (member$c ?v2 (fun_app$e set_treeFI$c ?v1)))) :named a18))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (= (member$c ?v0 (set$d ?v1)) (fun_app$c (member$f ?v1) ?v0))) :named a19))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_list$)) (= (member$ ?v0 (set$a ?v1)) (fun_app$ (member$g ?v1) ?v0))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (= (member$b ?v0 (set$e ?v1)) (fun_app$b (member$h ?v1) ?v0))) :named a21))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (= (member$a ?v0 (set$ ?v1)) (fun_app$a (member$i ?v1) ?v0))) :named a22))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (=> (member$c ?v0 (set$d ?v1)) (= (insert$ ?v0 ?v1) ?v1)) :pattern ((insert$ ?v0 ?v1)))) :named a23))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_list$)) (! (=> (member$ ?v0 (set$a ?v1)) (= (insert$a ?v0 ?v1) ?v1)) :pattern ((insert$a ?v0 ?v1)))) :named a24))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (! (=> (member$b ?v0 (set$e ?v1)) (= (fun_app$f (insert$b ?v0) ?v1) ?v1)) :pattern ((fun_app$f (insert$b ?v0) ?v1)))) :named a25))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (! (=> (member$a ?v0 (set$ ?v1)) (= (fun_app$g (insert$c ?v0) ?v1) ?v1)) :pattern ((fun_app$g (insert$c ?v0) ?v1)))) :named a26))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_list$)) (= (list_ex1$ ?v0 ?v1) (exists ((?v2 A$)) (and (and (member$c ?v2 (set$d ?v1)) (fun_app$c ?v0 ?v2)) (forall ((?v3 A$)) (=> (and (member$c ?v3 (set$d ?v1)) (fun_app$c ?v0 ?v3)) (= ?v3 ?v2))))))) :named a27))
(assert (! (forall ((?v0 A_treeFI_treeFI_bool_fun$) (?v1 A_treeFI_treeFI_list$)) (= (list_ex1$a ?v0 ?v1) (exists ((?v2 A_treeFI_treeFI$)) (and (and (member$ ?v2 (set$a ?v1)) (fun_app$ ?v0 ?v2)) (forall ((?v3 A_treeFI_treeFI$)) (=> (and (member$ ?v3 (set$a ?v1)) (fun_app$ ?v0 ?v3)) (= ?v3 ?v2))))))) :named a28))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat_list$)) (= (fun_app$h (list_ex1$b ?v0) ?v1) (exists ((?v2 Nat$)) (and (and (member$b ?v2 (set$e ?v1)) (fun_app$b ?v0 ?v2)) (forall ((?v3 Nat$)) (=> (and (member$b ?v3 (set$e ?v1)) (fun_app$b ?v0 ?v3)) (= ?v3 ?v2))))))) :named a29))
(assert (! (forall ((?v0 A_treeFI_bool_fun$) (?v1 A_treeFI_list$)) (= (fun_app$i (list_ex1$c ?v0) ?v1) (exists ((?v2 A_treeFI$)) (and (and (member$a ?v2 (set$ ?v1)) (fun_app$a ?v0 ?v2)) (forall ((?v3 A_treeFI$)) (=> (and (member$a ?v3 (set$ ?v1)) (fun_app$a ?v0 ?v3)) (= ?v3 ?v2))))))) :named a30))
(assert (! (forall ((?v0 A_treeFI_treeFI_list$)) (= (set$a (rotate1$ ?v0)) (set$a ?v0))) :named a31))
(assert (! (forall ((?v0 Nat_list$)) (= (set$e (rotate1$a ?v0)) (set$e ?v0))) :named a32))
(assert (! (forall ((?v0 A_treeFI_list$)) (= (set$ (fun_app$g rotate1$b ?v0)) (set$ ?v0))) :named a33))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (= (listMem$ ?v0 ?v1) (member$c ?v0 (set$d ?v1))) :pattern ((listMem$ ?v0 ?v1)))) :named a34))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_list$)) (! (= (listMem$a ?v0 ?v1) (member$ ?v0 (set$a ?v1))) :pattern ((listMem$a ?v0 ?v1)))) :named a35))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (! (= (fun_app$h (listMem$b ?v0) ?v1) (member$b ?v0 (set$e ?v1))) :pattern ((fun_app$h (listMem$b ?v0) ?v1)))) :named a36))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (! (= (fun_app$i (listMem$c ?v0) ?v1) (member$a ?v0 (set$ ?v1))) :pattern ((fun_app$i (listMem$c ?v0) ?v1)))) :named a37))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (=> (not (member$c ?v0 (set$d ?v1))) (= (removeAll$ ?v0 ?v1) ?v1)) :pattern ((removeAll$ ?v0 ?v1)))) :named a38))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_list$)) (! (=> (not (member$ ?v0 (set$a ?v1))) (= (removeAll$a ?v0 ?v1) ?v1)) :pattern ((removeAll$a ?v0 ?v1)))) :named a39))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (! (=> (not (member$b ?v0 (set$e ?v1))) (= (removeAll$b ?v0 ?v1) ?v1)) :pattern ((removeAll$b ?v0 ?v1)))) :named a40))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (! (=> (not (member$a ?v0 (set$ ?v1))) (= (removeAll$c ?v0 ?v1) ?v1)) :pattern ((removeAll$c ?v0 ?v1)))) :named a41))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_bool_fun$) (?v3 A_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$c ?v4 (set$d ?v1)) (= (fun_app$c ?v2 ?v4) (fun_app$c ?v3 ?v4))))) (= (find$ ?v2 ?v0) (find$ ?v3 ?v1)))) :named a42))
(assert (! (forall ((?v0 A_treeFI_treeFI_list$) (?v1 A_treeFI_treeFI_list$) (?v2 A_treeFI_treeFI_bool_fun$) (?v3 A_treeFI_treeFI_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_treeFI_treeFI$)) (=> (member$ ?v4 (set$a ?v1)) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (find$a ?v2 ?v0) (find$a ?v3 ?v1)))) :named a43))
(assert (! (forall ((?v0 Nat_list$) (?v1 Nat_list$) (?v2 Nat_bool_fun$) (?v3 Nat_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 Nat$)) (=> (member$b ?v4 (set$e ?v1)) (= (fun_app$b ?v2 ?v4) (fun_app$b ?v3 ?v4))))) (= (find$b ?v2 ?v0) (find$b ?v3 ?v1)))) :named a44))
(assert (! (forall ((?v0 A_treeFI_list$) (?v1 A_treeFI_list$) (?v2 A_treeFI_bool_fun$) (?v3 A_treeFI_bool_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_treeFI$)) (=> (member$a ?v4 (set$ ?v1)) (= (fun_app$a ?v2 ?v4) (fun_app$a ?v3 ?v4))))) (= (find$c ?v2 ?v0) (find$c ?v3 ?v1)))) :named a45))
(assert (! (forall ((?v0 Nat$) (?v1 A_treeFI_treeFI_list$)) (= (set$a (rotate$ ?v0 ?v1)) (set$a ?v1))) :named a46))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (= (set$e (rotate$a ?v0 ?v1)) (set$e ?v1))) :named a47))
(assert (! (forall ((?v0 Nat$) (?v1 A_treeFI_list$)) (= (set$ (fun_app$g (rotate$b ?v0) ?v1)) (set$ ?v1))) :named a48))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_treeFI_list$)) (! (= (sub$a (tree$ ?v0 ?v1)) ?v1) :pattern ((tree$ ?v0 ?v1)))) :named a49))
(assert (! (forall ((?v0 A$) (?v1 A_treeFI_list$)) (! (= (sub$ (tree$a ?v0 ?v1)) ?v1) :pattern ((tree$a ?v0 ?v1)))) :named a50))
(assert (! (forall ((?v0 A$) (?v1 A_treeFI_list$) (?v2 A$) (?v3 A_treeFI_list$)) (= (= (tree$a ?v0 ?v1) (tree$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a51))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_treeFI_list$) (?v2 A_treeFI$) (?v3 A_treeFI_treeFI_list$)) (= (= (tree$ ?v0 ?v1) (tree$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a52))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_treeFI_list$)) (member$ ?v0 (set_treeFI$ (tree$b ?v0 ?v1)))) :named a53))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_treeFI_list$)) (member$b ?v0 (set_treeFI$a (tree$c ?v0 ?v1)))) :named a54))
(assert (! (forall ((?v0 A$) (?v1 A_treeFI_list$)) (member$c ?v0 (fun_app$e set_treeFI$c (tree$a ?v0 ?v1)))) :named a55))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_treeFI_list$)) (member$a ?v0 (fun_app$d set_treeFI$b (tree$ ?v0 ?v1)))) :named a56))
(assert (! (forall ((?v0 A_treeFI$)) (=> (forall ((?v1 A$) (?v2 A_treeFI_list$)) (=> (= ?v0 (tree$a ?v1 ?v2)) false)) false)) :named a57))
(assert (! (forall ((?v0 A_treeFI_treeFI$)) (=> (forall ((?v1 A_treeFI$) (?v2 A_treeFI_treeFI_list$)) (=> (= ?v0 (tree$ ?v1 ?v2)) false)) false)) :named a58))
(assert (! (forall ((?v0 Nat$) (?v1 A_treeFI_list$)) (= (fun_app$g rotate1$b (fun_app$g (rotate$b ?v0) ?v1)) (fun_app$g (rotate$b ?v0) (fun_app$g rotate1$b ?v1)))) :named a59))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_treeFI$)) (=> (and (member$ ?v0 (set_treeFI$ ?v1)) (and (forall ((?v2 A_treeFI_treeFI_treeFI_list$)) (=> (= ?v1 (tree$b ?v0 ?v2)) false)) (forall ((?v2 A_treeFI_treeFI$) (?v3 A_treeFI_treeFI_treeFI_list$) (?v4 A_treeFI_treeFI_treeFI$)) (=> (and (= ?v1 (tree$b ?v2 ?v3)) (and (member$d ?v4 (set$b ?v3)) (member$ ?v0 (set_treeFI$ ?v4)))) false)))) false)) :named a60))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_treeFI$)) (=> (and (member$b ?v0 (set_treeFI$a ?v1)) (and (forall ((?v2 Nat_treeFI_list$)) (=> (= ?v1 (tree$c ?v0 ?v2)) false)) (forall ((?v2 Nat$) (?v3 Nat_treeFI_list$) (?v4 Nat_treeFI$)) (=> (and (= ?v1 (tree$c ?v2 ?v3)) (and (member$e ?v4 (set$c ?v3)) (member$b ?v0 (set_treeFI$a ?v4)))) false)))) false)) :named a61))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_treeFI$)) (=> (and (member$a ?v0 (fun_app$d set_treeFI$b ?v1)) (and (forall ((?v2 A_treeFI_treeFI_list$)) (=> (= ?v1 (tree$ ?v0 ?v2)) false)) (forall ((?v2 A_treeFI$) (?v3 A_treeFI_treeFI_list$) (?v4 A_treeFI_treeFI$)) (=> (and (= ?v1 (tree$ ?v2 ?v3)) (and (member$ ?v4 (set$a ?v3)) (member$a ?v0 (fun_app$d set_treeFI$b ?v4)))) false)))) false)) :named a62))
(assert (! (forall ((?v0 A$) (?v1 A_treeFI$)) (=> (and (member$c ?v0 (fun_app$e set_treeFI$c ?v1)) (and (forall ((?v2 A_treeFI_list$)) (=> (= ?v1 (tree$a ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_treeFI_list$) (?v4 A_treeFI$)) (=> (and (= ?v1 (tree$a ?v2 ?v3)) (and (member$a ?v4 (set$ ?v3)) (member$c ?v0 (fun_app$e set_treeFI$c ?v4)))) false)))) false)) :named a63))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_treeFI$) (?v2 A_treeFI_treeFI_a_treeFI_treeFI_treeFI_bool_fun_fun$)) (=> (and (member$ ?v0 (set_treeFI$ ?v1)) (and (forall ((?v3 A_treeFI_treeFI$) (?v4 A_treeFI_treeFI_treeFI_list$)) (fun_app$j (fun_app$k ?v2 ?v3) (tree$b ?v3 ?v4))) (forall ((?v3 A_treeFI_treeFI$) (?v4 A_treeFI_treeFI_treeFI_list$) (?v5 A_treeFI_treeFI_treeFI$) (?v6 A_treeFI_treeFI$)) (=> (and (member$d ?v5 (set$b ?v4)) (and (member$ ?v6 (set_treeFI$ ?v5)) (fun_app$j (fun_app$k ?v2 ?v6) ?v5))) (fun_app$j (fun_app$k ?v2 ?v6) (tree$b ?v3 ?v4)))))) (fun_app$j (fun_app$k ?v2 ?v0) ?v1))) :named a64))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_treeFI$) (?v2 Nat_nat_treeFI_bool_fun_fun$)) (=> (and (member$b ?v0 (set_treeFI$a ?v1)) (and (forall ((?v3 Nat$) (?v4 Nat_treeFI_list$)) (fun_app$l (fun_app$m ?v2 ?v3) (tree$c ?v3 ?v4))) (forall ((?v3 Nat$) (?v4 Nat_treeFI_list$) (?v5 Nat_treeFI$) (?v6 Nat$)) (=> (and (member$e ?v5 (set$c ?v4)) (and (member$b ?v6 (set_treeFI$a ?v5)) (fun_app$l (fun_app$m ?v2 ?v6) ?v5))) (fun_app$l (fun_app$m ?v2 ?v6) (tree$c ?v3 ?v4)))))) (fun_app$l (fun_app$m ?v2 ?v0) ?v1))) :named a65))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_treeFI$) (?v2 A_treeFI_a_treeFI_treeFI_bool_fun_fun$)) (=> (and (member$a ?v0 (fun_app$d set_treeFI$b ?v1)) (and (forall ((?v3 A_treeFI$) (?v4 A_treeFI_treeFI_list$)) (fun_app$ (fun_app$n ?v2 ?v3) (tree$ ?v3 ?v4))) (forall ((?v3 A_treeFI$) (?v4 A_treeFI_treeFI_list$) (?v5 A_treeFI_treeFI$) (?v6 A_treeFI$)) (=> (and (member$ ?v5 (set$a ?v4)) (and (member$a ?v6 (fun_app$d set_treeFI$b ?v5)) (fun_app$ (fun_app$n ?v2 ?v6) ?v5))) (fun_app$ (fun_app$n ?v2 ?v6) (tree$ ?v3 ?v4)))))) (fun_app$ (fun_app$n ?v2 ?v0) ?v1))) :named a66))
(assert (! (forall ((?v0 A$) (?v1 A_treeFI$) (?v2 A_a_treeFI_bool_fun_fun$)) (=> (and (member$c ?v0 (fun_app$e set_treeFI$c ?v1)) (and (forall ((?v3 A$) (?v4 A_treeFI_list$)) (fun_app$a (fun_app$o ?v2 ?v3) (tree$a ?v3 ?v4))) (forall ((?v3 A$) (?v4 A_treeFI_list$) (?v5 A_treeFI$) (?v6 A$)) (=> (and (member$a ?v5 (set$ ?v4)) (and (member$c ?v6 (fun_app$e set_treeFI$c ?v5)) (fun_app$a (fun_app$o ?v2 ?v6) ?v5))) (fun_app$a (fun_app$o ?v2 ?v6) (tree$a ?v3 ?v4)))))) (fun_app$a (fun_app$o ?v2 ?v0) ?v1))) :named a67))
(assert (! (forall ((?v0 A_treeFI_treeFI_treeFI$) (?v1 A_treeFI_treeFI_treeFI_list$) (?v2 A_treeFI_treeFI$) (?v3 A_treeFI_treeFI$)) (=> (and (member$d ?v0 (set$b ?v1)) (member$ ?v2 (set_treeFI$ ?v0))) (member$ ?v2 (set_treeFI$ (tree$b ?v3 ?v1))))) :named a68))
(assert (! (forall ((?v0 Nat_treeFI$) (?v1 Nat_treeFI_list$) (?v2 Nat$) (?v3 Nat$)) (=> (and (member$e ?v0 (set$c ?v1)) (member$b ?v2 (set_treeFI$a ?v0))) (member$b ?v2 (set_treeFI$a (tree$c ?v3 ?v1))))) :named a69))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_list$) (?v2 A_treeFI$) (?v3 A_treeFI$)) (=> (and (member$ ?v0 (set$a ?v1)) (member$a ?v2 (fun_app$d set_treeFI$b ?v0))) (member$a ?v2 (fun_app$d set_treeFI$b (tree$ ?v3 ?v1))))) :named a70))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$) (?v2 A$) (?v3 A$)) (=> (and (member$a ?v0 (set$ ?v1)) (member$c ?v2 (fun_app$e set_treeFI$c ?v0))) (member$c ?v2 (fun_app$e set_treeFI$c (tree$a ?v3 ?v1))))) :named a71))
(assert (! (forall ((?v0 A_treeFI_treeFI_bool_fun$) (?v1 A_treeFI_treeFI_list$)) (= (can_select$ ?v0 (set$a ?v1)) (list_ex1$a ?v0 ?v1))) :named a72))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat_list$)) (= (can_select$a ?v0 (set$e ?v1)) (fun_app$h (list_ex1$b ?v0) ?v1))) :named a73))
(assert (! (forall ((?v0 A_treeFI_bool_fun$) (?v1 A_treeFI_list$)) (= (can_select$b ?v0 (set$ ?v1)) (fun_app$i (list_ex1$c ?v0) ?v1))) :named a74))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_list$)) (= (remove$ ?v0 (set$a ?v1)) (set$a (removeAll$a ?v0 ?v1)))) :named a75))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (= (remove$a ?v0 (set$e ?v1)) (set$e (removeAll$b ?v0 ?v1)))) :named a76))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (= (remove$b ?v0 (set$ ?v1)) (set$ (removeAll$c ?v0 ?v1)))) :named a77))
(assert (! (forall ((?v0 A_treeFI_treeFI$)) (= (tree$ (lab$ ?v0) (sub$a ?v0)) ?v0)) :named a78))
(assert (! (forall ((?v0 A_treeFI$)) (= (tree$a (lab$a ?v0) (sub$ ?v0)) ?v0)) :named a79))
(assert (! (forall ((?v0 Nat$) (?v1 A_treeFI_list$)) (! (= (fun_app$g (rotate$b (suc$ ?v0)) ?v1) (fun_app$g rotate1$b (fun_app$g (rotate$b ?v0) ?v1))) :pattern ((fun_app$g (rotate$b (suc$ ?v0)) ?v1)))) :named a80))
(assert (! (forall ((?v0 A_treeFI_treeFI$)) (=> (=> (= ?v0 (tree$ (lab$ ?v0) (sub$a ?v0))) false) false)) :named a81))
(assert (! (forall ((?v0 A_treeFI$)) (=> (=> (= ?v0 (tree$a (lab$a ?v0) (sub$ ?v0))) false) false)) :named a82))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (=> (not (member$c ?v0 (set$d ?v1))) (= (insert$ ?v0 ?v1) (cons$d ?v0 ?v1))) :pattern ((insert$ ?v0 ?v1)))) :named a83))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_list$)) (! (=> (not (member$ ?v0 (set$a ?v1))) (= (insert$a ?v0 ?v1) (cons$a ?v0 ?v1))) :pattern ((insert$a ?v0 ?v1)))) :named a84))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (! (=> (not (member$b ?v0 (set$e ?v1))) (= (fun_app$f (insert$b ?v0) ?v1) (cons$e ?v0 ?v1))) :pattern ((fun_app$f (insert$b ?v0) ?v1)))) :named a85))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (! (=> (not (member$a ?v0 (set$ ?v1))) (= (fun_app$g (insert$c ?v0) ?v1) (cons$ ?v0 ?v1))) :pattern ((fun_app$g (insert$c ?v0) ?v1)))) :named a86))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (= (set$d (insert$ ?v0 ?v1)) (insert$d ?v0 (set$d ?v1)))) :named a87))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_list$)) (= (set$a (insert$a ?v0 ?v1)) (insert$e ?v0 (set$a ?v1)))) :named a88))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (= (set$e (fun_app$f (insert$b ?v0) ?v1)) (insert$f ?v0 (set$e ?v1)))) :named a89))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (= (set$ (fun_app$g (insert$c ?v0) ?v1)) (insert$g ?v0 (set$ ?v1)))) :named a90))
(assert (! (forall ((?v0 Nat$)) (! (= (rotate$b ?v0) (compow$ ?v0 rotate1$b)) :pattern ((rotate$b ?v0)))) :named a91))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_list$)) (= (= (find$ ?v0 ?v1) none$) (not (exists ((?v2 A$)) (and (member$c ?v2 (set$d ?v1)) (fun_app$c ?v0 ?v2)))))) :named a92))
(assert (! (forall ((?v0 A_treeFI_treeFI_bool_fun$) (?v1 A_treeFI_treeFI_list$)) (= (= (find$a ?v0 ?v1) none$a) (not (exists ((?v2 A_treeFI_treeFI$)) (and (member$ ?v2 (set$a ?v1)) (fun_app$ ?v0 ?v2)))))) :named a93))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat_list$)) (= (= (find$b ?v0 ?v1) none$b) (not (exists ((?v2 Nat$)) (and (member$b ?v2 (set$e ?v1)) (fun_app$b ?v0 ?v2)))))) :named a94))
(assert (! (forall ((?v0 A_treeFI_bool_fun$) (?v1 A_treeFI_list$)) (= (= (find$c ?v0 ?v1) none$c) (not (exists ((?v2 A_treeFI$)) (and (member$a ?v2 (set$ ?v1)) (fun_app$a ?v0 ?v2)))))) :named a95))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$) (?v2 A_treeFI$) (?v3 A_treeFI_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a96))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$) (?v2 Nat$) (?v3 Nat_list$)) (= (= (cons$e ?v0 ?v1) (cons$e ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a97))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (= (set$d (cons$d ?v0 ?v1)) (insert$d ?v0 (set$d ?v1))) :pattern ((cons$d ?v0 ?v1)))) :named a98))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_list$)) (! (= (set$a (cons$a ?v0 ?v1)) (insert$e ?v0 (set$a ?v1))) :pattern ((cons$a ?v0 ?v1)))) :named a99))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (! (= (set$e (cons$e ?v0 ?v1)) (insert$f ?v0 (set$e ?v1))) :pattern ((cons$e ?v0 ?v1)))) :named a100))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (! (= (set$ (cons$ ?v0 ?v1)) (insert$g ?v0 (set$ ?v1))) :pattern ((cons$ ?v0 ?v1)))) :named a101))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (not (= (cons$ ?v0 ?v1) ?v1))) :named a102))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (not (= (cons$e ?v0 ?v1) ?v1))) :named a103))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_list$)) (=> (member$c ?v0 (set$d (cons$d ?v1 ?v2))) (or (= ?v0 ?v1) (member$c ?v0 (set$d ?v2))))) :named a104))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI$) (?v2 A_treeFI_treeFI_list$)) (=> (member$ ?v0 (set$a (cons$a ?v1 ?v2))) (or (= ?v0 ?v1) (member$ ?v0 (set$a ?v2))))) :named a105))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_list$)) (=> (member$b ?v0 (set$e (cons$e ?v1 ?v2))) (or (= ?v0 ?v1) (member$b ?v0 (set$e ?v2))))) :named a106))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI$) (?v2 A_treeFI_list$)) (=> (member$a ?v0 (set$ (cons$ ?v1 ?v2))) (or (= ?v0 ?v1) (member$a ?v0 (set$ ?v2))))) :named a107))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (=> (and (member$c ?v0 (set$d ?v1)) (and (forall ((?v2 A_list$)) (=> (= ?v1 (cons$d ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_list$)) (=> (and (= ?v1 (cons$d ?v2 ?v3)) (member$c ?v0 (set$d ?v3))) false)))) false)) :named a108))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_list$)) (=> (and (member$ ?v0 (set$a ?v1)) (and (forall ((?v2 A_treeFI_treeFI_list$)) (=> (= ?v1 (cons$a ?v0 ?v2)) false)) (forall ((?v2 A_treeFI_treeFI$) (?v3 A_treeFI_treeFI_list$)) (=> (and (= ?v1 (cons$a ?v2 ?v3)) (member$ ?v0 (set$a ?v3))) false)))) false)) :named a109))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (=> (and (member$b ?v0 (set$e ?v1)) (and (forall ((?v2 Nat_list$)) (=> (= ?v1 (cons$e ?v0 ?v2)) false)) (forall ((?v2 Nat$) (?v3 Nat_list$)) (=> (and (= ?v1 (cons$e ?v2 ?v3)) (member$b ?v0 (set$e ?v3))) false)))) false)) :named a110))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (=> (and (member$a ?v0 (set$ ?v1)) (and (forall ((?v2 A_treeFI_list$)) (=> (= ?v1 (cons$ ?v0 ?v2)) false)) (forall ((?v2 A_treeFI$) (?v3 A_treeFI_list$)) (=> (and (= ?v1 (cons$ ?v2 ?v3)) (member$a ?v0 (set$ ?v3))) false)))) false)) :named a111))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A$)) (=> (member$c ?v0 (set$d ?v1)) (member$c ?v0 (set$d (cons$d ?v2 ?v1))))) :named a112))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_list$) (?v2 A_treeFI_treeFI$)) (=> (member$ ?v0 (set$a ?v1)) (member$ ?v0 (set$a (cons$a ?v2 ?v1))))) :named a113))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$) (?v2 Nat$)) (=> (member$b ?v0 (set$e ?v1)) (member$b ?v0 (set$e (cons$e ?v2 ?v1))))) :named a114))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$) (?v2 A_treeFI$)) (=> (member$a ?v0 (set$ ?v1)) (member$a ?v0 (set$ (cons$ ?v2 ?v1))))) :named a115))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (member$c ?v0 (set$d (cons$d ?v0 ?v1)))) :named a116))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_list$)) (member$ ?v0 (set$a (cons$a ?v0 ?v1)))) :named a117))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (member$b ?v0 (set$e (cons$e ?v0 ?v1)))) :named a118))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (member$a ?v0 (set$ (cons$ ?v0 ?v1)))) :named a119))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_set$)) (= (can_select$c ?v0 ?v1) (exists ((?v2 A$)) (and (and (member$c ?v2 ?v1) (fun_app$c ?v0 ?v2)) (forall ((?v3 A$)) (=> (and (member$c ?v3 ?v1) (fun_app$c ?v0 ?v3)) (= ?v3 ?v2))))))) :named a120))
(assert (! (forall ((?v0 A_treeFI_treeFI_bool_fun$) (?v1 A_treeFI_treeFI_set$)) (= (can_select$ ?v0 ?v1) (exists ((?v2 A_treeFI_treeFI$)) (and (and (member$ ?v2 ?v1) (fun_app$ ?v0 ?v2)) (forall ((?v3 A_treeFI_treeFI$)) (=> (and (member$ ?v3 ?v1) (fun_app$ ?v0 ?v3)) (= ?v3 ?v2))))))) :named a121))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat_set$)) (= (can_select$a ?v0 ?v1) (exists ((?v2 Nat$)) (and (and (member$b ?v2 ?v1) (fun_app$b ?v0 ?v2)) (forall ((?v3 Nat$)) (=> (and (member$b ?v3 ?v1) (fun_app$b ?v0 ?v3)) (= ?v3 ?v2))))))) :named a122))
(assert (! (forall ((?v0 A_treeFI_bool_fun$) (?v1 A_treeFI_set$)) (= (can_select$b ?v0 ?v1) (exists ((?v2 A_treeFI$)) (and (and (member$a ?v2 ?v1) (fun_app$a ?v0 ?v2)) (forall ((?v3 A_treeFI$)) (=> (and (member$a ?v3 ?v1) (fun_app$a ?v0 ?v3)) (= ?v3 ?v2))))))) :named a123))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_list$)) (! (= (removeAll$b ?v0 (cons$e ?v1 ?v2)) (ite (= ?v0 ?v1) (removeAll$b ?v0 ?v2) (cons$e ?v1 (removeAll$b ?v0 ?v2)))) :pattern ((removeAll$b ?v0 (cons$e ?v1 ?v2))))) :named a124))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI$) (?v2 A_treeFI_list$)) (! (= (removeAll$c ?v0 (cons$ ?v1 ?v2)) (ite (= ?v0 ?v1) (removeAll$c ?v0 ?v2) (cons$ ?v1 (removeAll$c ?v0 ?v2)))) :pattern ((removeAll$c ?v0 (cons$ ?v1 ?v2))))) :named a125))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (= (fun_app$i (listMem$c ?v0) ?v1) (or (exists ((?v2 A_treeFI$) (?v3 A_treeFI_list$)) (and (= ?v0 ?v2) (= ?v1 (cons$ ?v2 ?v3)))) (exists ((?v2 A_treeFI$) (?v3 A_treeFI_list$) (?v4 A_treeFI$)) (and (= ?v0 ?v2) (and (= ?v1 (cons$ ?v4 ?v3)) (fun_app$i (listMem$c ?v2) ?v3))))))) :named a126))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (= (fun_app$h (listMem$b ?v0) ?v1) (or (exists ((?v2 Nat$) (?v3 Nat_list$)) (and (= ?v0 ?v2) (= ?v1 (cons$e ?v2 ?v3)))) (exists ((?v2 Nat$) (?v3 Nat_list$) (?v4 Nat$)) (and (= ?v0 ?v2) (and (= ?v1 (cons$e ?v4 ?v3)) (fun_app$h (listMem$b ?v2) ?v3))))))) :named a127))
(assert (! (forall ((?v0 A_treeFI_bool_fun$) (?v1 A_treeFI_bool_fun$)) (=> (forall ((?v2 A_treeFI$)) (= (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2))) (= (collect$ ?v0) (collect$ ?v1)))) :named a128))
(assert (! (forall ((?v0 A_set$)) (= (collect$a (uu$ ?v0)) ?v0)) :named a129))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$)) (= (collect$b (uua$ ?v0)) ?v0)) :named a130))
(assert (! (forall ((?v0 Nat_set$)) (= (collect$c (uub$ ?v0)) ?v0)) :named a131))
(assert (! (forall ((?v0 A_treeFI_set$)) (= (collect$ (uuc$ ?v0)) ?v0)) :named a132))
(assert (! (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (member$c ?v0 (collect$a ?v1)) (fun_app$c ?v1 ?v0))) :named a133))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_bool_fun$)) (= (member$ ?v0 (collect$b ?v1)) (fun_app$ ?v1 ?v0))) :named a134))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_bool_fun$)) (= (member$b ?v0 (collect$c ?v1)) (fun_app$b ?v1 ?v0))) :named a135))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_bool_fun$)) (= (member$a ?v0 (collect$ ?v1)) (fun_app$a ?v1 ?v0))) :named a136))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (=> (and (fun_app$i (listMem$c ?v0) ?v1) (and (forall ((?v2 A_treeFI$) (?v3 A_treeFI_list$)) (=> (and (= ?v0 ?v2) (= ?v1 (cons$ ?v2 ?v3))) false)) (forall ((?v2 A_treeFI$) (?v3 A_treeFI_list$) (?v4 A_treeFI$)) (=> (and (= ?v0 ?v2) (and (= ?v1 (cons$ ?v4 ?v3)) (fun_app$i (listMem$c ?v2) ?v3))) false)))) false)) :named a137))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (=> (and (fun_app$h (listMem$b ?v0) ?v1) (and (forall ((?v2 Nat$) (?v3 Nat_list$)) (=> (and (= ?v0 ?v2) (= ?v1 (cons$e ?v2 ?v3))) false)) (forall ((?v2 Nat$) (?v3 Nat_list$) (?v4 Nat$)) (=> (and (= ?v0 ?v2) (and (= ?v1 (cons$e ?v4 ?v3)) (fun_app$h (listMem$b ?v2) ?v3))) false)))) false)) :named a138))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$) (?v2 A_treeFI$)) (=> (fun_app$i (listMem$c ?v0) ?v1) (fun_app$i (listMem$c ?v0) (cons$ ?v2 ?v1)))) :named a139))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$) (?v2 Nat$)) (=> (fun_app$h (listMem$b ?v0) ?v1) (fun_app$h (listMem$b ?v0) (cons$e ?v2 ?v1)))) :named a140))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (fun_app$i (listMem$c ?v0) (cons$ ?v0 ?v1))) :named a141))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (fun_app$h (listMem$b ?v0) (cons$e ?v0 ?v1))) :named a142))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI$)) (=> (and (= (lab$ ?v0) (lab$ ?v1)) (= (sub$a ?v0) (sub$a ?v1))) (= ?v0 ?v1))) :named a143))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI$)) (=> (and (= (lab$a ?v0) (lab$a ?v1)) (= (sub$ ?v0) (sub$ ?v1))) (= ?v0 ?v1))) :named a144))
(assert (! (forall ((?v0 A$) (?v1 A_treeFI_list$)) (! (= (lab$a (tree$a ?v0 ?v1)) ?v0) :pattern ((tree$a ?v0 ?v1)))) :named a145))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_treeFI_list$)) (! (= (lab$ (tree$ ?v0 ?v1)) ?v0) :pattern ((tree$ ?v0 ?v1)))) :named a146))
(assert (! (forall ((?v0 A_treeFI_treeFI_treeFI$)) (member$ (lab$b ?v0) (set_treeFI$ ?v0))) :named a147))
(assert (! (forall ((?v0 Nat_treeFI$)) (member$b (lab$c ?v0) (set_treeFI$a ?v0))) :named a148))
(assert (! (forall ((?v0 A_treeFI$)) (member$c (lab$a ?v0) (fun_app$e set_treeFI$c ?v0))) :named a149))
(assert (! (forall ((?v0 A_treeFI_treeFI$)) (member$a (lab$ ?v0) (fun_app$d set_treeFI$b ?v0))) :named a150))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$) (?v2 A_treeFI$)) (! (= (fun_app$a (member$i (cons$ ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$a (member$i ?v1) ?v2))) :pattern ((fun_app$a (member$i (cons$ ?v0 ?v1)) ?v2)))) :named a151))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$) (?v2 Nat$)) (! (= (fun_app$b (member$h (cons$e ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$b (member$h ?v1) ?v2))) :pattern ((fun_app$b (member$h (cons$e ?v0 ?v1)) ?v2)))) :named a152))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (= (insert$ ?v0 ?v1) (ite (member$c ?v0 (set$d ?v1)) ?v1 (cons$d ?v0 ?v1))) :pattern ((insert$ ?v0 ?v1)))) :named a153))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_list$)) (! (= (insert$a ?v0 ?v1) (ite (member$ ?v0 (set$a ?v1)) ?v1 (cons$a ?v0 ?v1))) :pattern ((insert$a ?v0 ?v1)))) :named a154))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (! (= (fun_app$f (insert$b ?v0) ?v1) (ite (member$b ?v0 (set$e ?v1)) ?v1 (cons$e ?v0 ?v1))) :pattern ((fun_app$f (insert$b ?v0) ?v1)))) :named a155))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (! (= (fun_app$g (insert$c ?v0) ?v1) (ite (member$a ?v0 (set$ ?v1)) ?v1 (cons$ ?v0 ?v1))) :pattern ((fun_app$g (insert$c ?v0) ?v1)))) :named a156))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_set$)) (= (member$c ?v0 (remove$c ?v1 ?v2)) (and (member$c ?v0 ?v2) (not (= ?v0 ?v1))))) :named a157))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI$) (?v2 A_treeFI_treeFI_set$)) (= (member$ ?v0 (remove$ ?v1 ?v2)) (and (member$ ?v0 ?v2) (not (= ?v0 ?v1))))) :named a158))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_set$)) (= (member$b ?v0 (remove$a ?v1 ?v2)) (and (member$b ?v0 ?v2) (not (= ?v0 ?v1))))) :named a159))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI$) (?v2 A_treeFI_set$)) (= (member$a ?v0 (remove$b ?v1 ?v2)) (and (member$a ?v0 ?v2) (not (= ?v0 ?v1))))) :named a160))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$)) (= (insert$g ?v0 (insert$g ?v0 ?v1)) (insert$g ?v0 ?v1))) :named a161))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (= (insert$d ?v0 (insert$d ?v0 ?v1)) (insert$d ?v0 ?v1))) :named a162))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_set$)) (= (member$c ?v0 (insert$d ?v1 ?v2)) (or (= ?v0 ?v1) (member$c ?v0 ?v2)))) :named a163))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI$) (?v2 A_treeFI_treeFI_set$)) (= (member$ ?v0 (insert$e ?v1 ?v2)) (or (= ?v0 ?v1) (member$ ?v0 ?v2)))) :named a164))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_set$)) (= (member$b ?v0 (insert$f ?v1 ?v2)) (or (= ?v0 ?v1) (member$b ?v0 ?v2)))) :named a165))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI$) (?v2 A_treeFI_set$)) (= (member$a ?v0 (insert$g ?v1 ?v2)) (or (= ?v0 ?v1) (member$a ?v0 ?v2)))) :named a166))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A$)) (=> (=> (not (member$c ?v0 ?v1)) (= ?v0 ?v2)) (member$c ?v0 (insert$d ?v2 ?v1)))) :named a167))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_set$) (?v2 A_treeFI_treeFI$)) (=> (=> (not (member$ ?v0 ?v1)) (= ?v0 ?v2)) (member$ ?v0 (insert$e ?v2 ?v1)))) :named a168))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat$)) (=> (=> (not (member$b ?v0 ?v1)) (= ?v0 ?v2)) (member$b ?v0 (insert$f ?v2 ?v1)))) :named a169))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$) (?v2 A_treeFI$)) (=> (=> (not (member$a ?v0 ?v1)) (= ?v0 ?v2)) (member$a ?v0 (insert$g ?v2 ?v1)))) :named a170))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a171))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a172))
(assert (! (forall ((?v0 Nat$) (?v1 A_treeFI$) (?v2 A_treeFI_list$)) (! (= (gen_length$ ?v0 (cons$ ?v1 ?v2)) (gen_length$ (suc$ ?v0) ?v2)) :pattern ((gen_length$ ?v0 (cons$ ?v1 ?v2))))) :named a173))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_list$)) (! (= (gen_length$a ?v0 (cons$e ?v1 ?v2)) (gen_length$a (suc$ ?v0) ?v2)) :pattern ((gen_length$a ?v0 (cons$e ?v1 ?v2))))) :named a174))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_treeFI_list$)) (! (= (fun_app$d set_treeFI$b (tree$ ?v0 ?v1)) (insert$g ?v0 (supremum$ (set$a ?v1) set_treeFI$b))) :pattern ((tree$ ?v0 ?v1)))) :named a175))
(assert (! (forall ((?v0 A$) (?v1 A_treeFI_list$)) (! (= (fun_app$e set_treeFI$c (tree$a ?v0 ?v1)) (insert$d ?v0 (supremum$a (set$ ?v1) set_treeFI$c))) :pattern ((tree$a ?v0 ?v1)))) :named a176))
(assert (! (forall ((?v0 Nat$)) (not (= ?v0 (suc$ ?v0)))) :named a177))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a178))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (member$c ?v0 (insert$d ?v0 ?v1))) :named a179))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_set$)) (member$ ?v0 (insert$e ?v0 ?v1))) :named a180))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$)) (member$b ?v0 (insert$f ?v0 ?v1))) :named a181))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$)) (member$a ?v0 (insert$g ?v0 ?v1))) :named a182))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (and (not (member$c ?v0 ?v1)) (not (member$c ?v0 ?v2))) (= (= (insert$d ?v0 ?v1) (insert$d ?v0 ?v2)) (= ?v1 ?v2)))) :named a183))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_set$) (?v2 A_treeFI_treeFI_set$)) (=> (and (not (member$ ?v0 ?v1)) (not (member$ ?v0 ?v2))) (= (= (insert$e ?v0 ?v1) (insert$e ?v0 ?v2)) (= ?v1 ?v2)))) :named a184))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat_set$)) (=> (and (not (member$b ?v0 ?v1)) (not (member$b ?v0 ?v2))) (= (= (insert$f ?v0 ?v1) (insert$f ?v0 ?v2)) (= ?v1 ?v2)))) :named a185))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$) (?v2 A_treeFI_set$)) (=> (and (not (member$a ?v0 ?v1)) (not (member$a ?v0 ?v2))) (= (= (insert$g ?v0 ?v1) (insert$g ?v0 ?v2)) (= ?v1 ?v2)))) :named a186))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A$) (?v3 A_set$)) (=> (and (not (member$c ?v0 ?v1)) (not (member$c ?v2 ?v3))) (= (= (insert$d ?v0 ?v1) (insert$d ?v2 ?v3)) (ite (= ?v0 ?v2) (= ?v1 ?v3) (exists ((?v4 A_set$)) (and (= ?v1 (insert$d ?v2 ?v4)) (and (not (member$c ?v2 ?v4)) (and (= ?v3 (insert$d ?v0 ?v4)) (not (member$c ?v0 ?v4)))))))))) :named a187))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_set$) (?v2 A_treeFI_treeFI$) (?v3 A_treeFI_treeFI_set$)) (=> (and (not (member$ ?v0 ?v1)) (not (member$ ?v2 ?v3))) (= (= (insert$e ?v0 ?v1) (insert$e ?v2 ?v3)) (ite (= ?v0 ?v2) (= ?v1 ?v3) (exists ((?v4 A_treeFI_treeFI_set$)) (and (= ?v1 (insert$e ?v2 ?v4)) (and (not (member$ ?v2 ?v4)) (and (= ?v3 (insert$e ?v0 ?v4)) (not (member$ ?v0 ?v4)))))))))) :named a188))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat$) (?v3 Nat_set$)) (=> (and (not (member$b ?v0 ?v1)) (not (member$b ?v2 ?v3))) (= (= (insert$f ?v0 ?v1) (insert$f ?v2 ?v3)) (ite (= ?v0 ?v2) (= ?v1 ?v3) (exists ((?v4 Nat_set$)) (and (= ?v1 (insert$f ?v2 ?v4)) (and (not (member$b ?v2 ?v4)) (and (= ?v3 (insert$f ?v0 ?v4)) (not (member$b ?v0 ?v4)))))))))) :named a189))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$) (?v2 A_treeFI$) (?v3 A_treeFI_set$)) (=> (and (not (member$a ?v0 ?v1)) (not (member$a ?v2 ?v3))) (= (= (insert$g ?v0 ?v1) (insert$g ?v2 ?v3)) (ite (= ?v0 ?v2) (= ?v1 ?v3) (exists ((?v4 A_treeFI_set$)) (and (= ?v1 (insert$g ?v2 ?v4)) (and (not (member$a ?v2 ?v4)) (and (= ?v3 (insert$g ?v0 ?v4)) (not (member$a ?v0 ?v4)))))))))) :named a190))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (=> (member$c ?v0 ?v1) (exists ((?v2 A_set$)) (and (= ?v1 (insert$d ?v0 ?v2)) (not (member$c ?v0 ?v2)))))) :named a191))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_set$)) (=> (member$ ?v0 ?v1) (exists ((?v2 A_treeFI_treeFI_set$)) (and (= ?v1 (insert$e ?v0 ?v2)) (not (member$ ?v0 ?v2)))))) :named a192))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$)) (=> (member$b ?v0 ?v1) (exists ((?v2 Nat_set$)) (and (= ?v1 (insert$f ?v0 ?v2)) (not (member$b ?v0 ?v2)))))) :named a193))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$)) (=> (member$a ?v0 ?v1) (exists ((?v2 A_treeFI_set$)) (and (= ?v1 (insert$g ?v0 ?v2)) (not (member$a ?v0 ?v2)))))) :named a194))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A$)) (=> (member$c ?v0 ?v1) (member$c ?v0 (insert$d ?v2 ?v1)))) :named a195))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_set$) (?v2 A_treeFI_treeFI$)) (=> (member$ ?v0 ?v1) (member$ ?v0 (insert$e ?v2 ?v1)))) :named a196))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat$)) (=> (member$b ?v0 ?v1) (member$b ?v0 (insert$f ?v2 ?v1)))) :named a197))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$) (?v2 A_treeFI$)) (=> (member$a ?v0 ?v1) (member$a ?v0 (insert$g ?v2 ?v1)))) :named a198))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (! (=> (member$c ?v0 ?v1) (= (insert$d ?v0 ?v1) ?v1)) :pattern ((insert$d ?v0 ?v1)))) :named a199))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_set$)) (! (=> (member$ ?v0 ?v1) (= (insert$e ?v0 ?v1) ?v1)) :pattern ((insert$e ?v0 ?v1)))) :named a200))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$)) (! (=> (member$b ?v0 ?v1) (= (insert$f ?v0 ?v1) ?v1)) :pattern ((insert$f ?v0 ?v1)))) :named a201))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$)) (! (=> (member$a ?v0 ?v1) (= (insert$g ?v0 ?v1) ?v1)) :pattern ((insert$g ?v0 ?v1)))) :named a202))
(assert (! (forall ((?v0 A$) (?v1 A_set$)) (=> (and (member$c ?v0 ?v1) (forall ((?v2 A_set$)) (=> (and (= ?v1 (insert$d ?v0 ?v2)) (not (member$c ?v0 ?v2))) false))) false)) :named a203))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_set$)) (=> (and (member$ ?v0 ?v1) (forall ((?v2 A_treeFI_treeFI_set$)) (=> (and (= ?v1 (insert$e ?v0 ?v2)) (not (member$ ?v0 ?v2))) false))) false)) :named a204))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$)) (=> (and (member$b ?v0 ?v1) (forall ((?v2 Nat_set$)) (=> (and (= ?v1 (insert$f ?v0 ?v2)) (not (member$b ?v0 ?v2))) false))) false)) :named a205))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$)) (=> (and (member$a ?v0 ?v1) (forall ((?v2 A_treeFI_set$)) (=> (and (= ?v1 (insert$g ?v0 ?v2)) (not (member$a ?v0 ?v2))) false))) false)) :named a206))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_set$)) (=> (and (member$c ?v0 (insert$d ?v1 ?v2)) (and (=> (= ?v0 ?v1) false) (=> (member$c ?v0 ?v2) false))) false)) :named a207))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI$) (?v2 A_treeFI_treeFI_set$)) (=> (and (member$ ?v0 (insert$e ?v1 ?v2)) (and (=> (= ?v0 ?v1) false) (=> (member$ ?v0 ?v2) false))) false)) :named a208))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_set$)) (=> (and (member$b ?v0 (insert$f ?v1 ?v2)) (and (=> (= ?v0 ?v1) false) (=> (member$b ?v0 ?v2) false))) false)) :named a209))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI$) (?v2 A_treeFI_set$)) (=> (and (member$a ?v0 (insert$g ?v1 ?v2)) (and (=> (= ?v0 ?v1) false) (=> (member$a ?v0 ?v2) false))) false)) :named a210))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI$) (?v2 A_treeFI_set$)) (= (insert$g ?v0 (insert$g ?v1 ?v2)) (insert$g ?v1 (insert$g ?v0 ?v2)))) :named a211))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_set$)) (= (insert$d ?v0 (insert$d ?v1 ?v2)) (insert$d ?v1 (insert$d ?v0 ?v2)))) :named a212))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_a_treeFI_set_fun$) (?v2 A_treeFI_bool_fun$)) (= (forall ((?v3 A_treeFI$)) (=> (member$a ?v3 (supremum$b ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A_treeFI$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A_treeFI$)) (=> (member$a ?v4 (fun_app$p ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a213))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$c ?v3 (supremum$c ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$c ?v3 ?v0) (forall ((?v4 A$)) (=> (member$c ?v4 (fun_app$q ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a214))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$c ?v3 (supremum$d ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 Nat$)) (=> (member$b ?v3 ?v0) (forall ((?v4 A$)) (=> (member$c ?v4 (fun_app$r ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a215))
(assert (! (forall ((?v0 A_set$) (?v1 A_nat_set_fun$) (?v2 Nat_bool_fun$)) (= (forall ((?v3 Nat$)) (=> (member$b ?v3 (supremum$e ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$c ?v3 ?v0) (forall ((?v4 Nat$)) (=> (member$b ?v4 (fun_app$s ?v1 ?v3)) (fun_app$b ?v2 ?v4))))))) :named a216))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_nat_set_fun$) (?v2 Nat_bool_fun$)) (= (forall ((?v3 Nat$)) (=> (member$b ?v3 (supremum$f ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (forall ((?v3 Nat$)) (=> (member$b ?v3 ?v0) (forall ((?v4 Nat$)) (=> (member$b ?v4 (fun_app$t ?v1 ?v3)) (fun_app$b ?v2 ?v4))))))) :named a217))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_treeFI_set_fun$) (?v2 A_treeFI_bool_fun$)) (= (forall ((?v3 A_treeFI$)) (=> (member$a ?v3 (supremum$g ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$c ?v3 ?v0) (forall ((?v4 A_treeFI$)) (=> (member$a ?v4 (fun_app$u ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a218))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_a_treeFI_set_fun$) (?v2 A_treeFI_bool_fun$)) (= (forall ((?v3 A_treeFI$)) (=> (member$a ?v3 (supremum$h ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 Nat$)) (=> (member$b ?v3 ?v0) (forall ((?v4 A_treeFI$)) (=> (member$a ?v4 (fun_app$v ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a219))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_nat_set_fun$) (?v2 Nat_bool_fun$)) (= (forall ((?v3 Nat$)) (=> (member$b ?v3 (supremum$i ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (forall ((?v3 A_treeFI$)) (=> (member$a ?v3 ?v0) (forall ((?v4 Nat$)) (=> (member$b ?v4 (fun_app$w ?v1 ?v3)) (fun_app$b ?v2 ?v4))))))) :named a220))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$c ?v3 (supremum$a ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A_treeFI$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A$)) (=> (member$c ?v4 (fun_app$e ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a221))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$) (?v1 A_treeFI_treeFI_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$c ?v3 (supremum$j ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A_treeFI_treeFI$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A$)) (=> (member$c ?v4 (fun_app$x ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a222))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_a_treeFI_set_fun$) (?v2 A_treeFI_bool_fun$)) (= (forall ((?v3 A_treeFI$)) (=> (member$a ?v3 (supremum$b ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A_treeFI$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A_treeFI$)) (=> (member$a ?v4 (fun_app$p ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a223))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$c ?v3 (supremum$c ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$c ?v3 ?v0) (forall ((?v4 A$)) (=> (member$c ?v4 (fun_app$q ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a224))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$c ?v3 (supremum$d ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 Nat$)) (=> (member$b ?v3 ?v0) (forall ((?v4 A$)) (=> (member$c ?v4 (fun_app$r ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a225))
(assert (! (forall ((?v0 A_set$) (?v1 A_nat_set_fun$) (?v2 Nat_bool_fun$)) (= (forall ((?v3 Nat$)) (=> (member$b ?v3 (supremum$e ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$c ?v3 ?v0) (forall ((?v4 Nat$)) (=> (member$b ?v4 (fun_app$s ?v1 ?v3)) (fun_app$b ?v2 ?v4))))))) :named a226))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_nat_set_fun$) (?v2 Nat_bool_fun$)) (= (forall ((?v3 Nat$)) (=> (member$b ?v3 (supremum$f ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (forall ((?v3 Nat$)) (=> (member$b ?v3 ?v0) (forall ((?v4 Nat$)) (=> (member$b ?v4 (fun_app$t ?v1 ?v3)) (fun_app$b ?v2 ?v4))))))) :named a227))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_treeFI_set_fun$) (?v2 A_treeFI_bool_fun$)) (= (forall ((?v3 A_treeFI$)) (=> (member$a ?v3 (supremum$g ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$c ?v3 ?v0) (forall ((?v4 A_treeFI$)) (=> (member$a ?v4 (fun_app$u ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a228))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_a_treeFI_set_fun$) (?v2 A_treeFI_bool_fun$)) (= (forall ((?v3 A_treeFI$)) (=> (member$a ?v3 (supremum$h ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 Nat$)) (=> (member$b ?v3 ?v0) (forall ((?v4 A_treeFI$)) (=> (member$a ?v4 (fun_app$v ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a229))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_nat_set_fun$) (?v2 Nat_bool_fun$)) (= (forall ((?v3 Nat$)) (=> (member$b ?v3 (supremum$i ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (forall ((?v3 A_treeFI$)) (=> (member$a ?v3 ?v0) (forall ((?v4 Nat$)) (=> (member$b ?v4 (fun_app$w ?v1 ?v3)) (fun_app$b ?v2 ?v4))))))) :named a230))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$c ?v3 (supremum$a ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A_treeFI$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A$)) (=> (member$c ?v4 (fun_app$e ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a231))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$) (?v1 A_treeFI_treeFI_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$c ?v3 (supremum$j ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A_treeFI_treeFI$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A$)) (=> (member$c ?v4 (fun_app$x ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a232))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_a_treeFI_set_fun$) (?v2 A_treeFI_bool_fun$)) (= (exists ((?v3 A_treeFI$)) (and (member$a ?v3 (supremum$b ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A_treeFI$)) (and (member$a ?v3 ?v0) (exists ((?v4 A_treeFI$)) (and (member$a ?v4 (fun_app$p ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a233))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$c ?v3 (supremum$c ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A$)) (and (member$c ?v3 ?v0) (exists ((?v4 A$)) (and (member$c ?v4 (fun_app$q ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a234))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$c ?v3 (supremum$d ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 Nat$)) (and (member$b ?v3 ?v0) (exists ((?v4 A$)) (and (member$c ?v4 (fun_app$r ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a235))
(assert (! (forall ((?v0 A_set$) (?v1 A_nat_set_fun$) (?v2 Nat_bool_fun$)) (= (exists ((?v3 Nat$)) (and (member$b ?v3 (supremum$e ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (exists ((?v3 A$)) (and (member$c ?v3 ?v0) (exists ((?v4 Nat$)) (and (member$b ?v4 (fun_app$s ?v1 ?v3)) (fun_app$b ?v2 ?v4))))))) :named a236))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_nat_set_fun$) (?v2 Nat_bool_fun$)) (= (exists ((?v3 Nat$)) (and (member$b ?v3 (supremum$f ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (exists ((?v3 Nat$)) (and (member$b ?v3 ?v0) (exists ((?v4 Nat$)) (and (member$b ?v4 (fun_app$t ?v1 ?v3)) (fun_app$b ?v2 ?v4))))))) :named a237))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_treeFI_set_fun$) (?v2 A_treeFI_bool_fun$)) (= (exists ((?v3 A_treeFI$)) (and (member$a ?v3 (supremum$g ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A$)) (and (member$c ?v3 ?v0) (exists ((?v4 A_treeFI$)) (and (member$a ?v4 (fun_app$u ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a238))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_a_treeFI_set_fun$) (?v2 A_treeFI_bool_fun$)) (= (exists ((?v3 A_treeFI$)) (and (member$a ?v3 (supremum$h ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 Nat$)) (and (member$b ?v3 ?v0) (exists ((?v4 A_treeFI$)) (and (member$a ?v4 (fun_app$v ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a239))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_nat_set_fun$) (?v2 Nat_bool_fun$)) (= (exists ((?v3 Nat$)) (and (member$b ?v3 (supremum$i ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (exists ((?v3 A_treeFI$)) (and (member$a ?v3 ?v0) (exists ((?v4 Nat$)) (and (member$b ?v4 (fun_app$w ?v1 ?v3)) (fun_app$b ?v2 ?v4))))))) :named a240))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$c ?v3 (supremum$a ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A_treeFI$)) (and (member$a ?v3 ?v0) (exists ((?v4 A$)) (and (member$c ?v4 (fun_app$e ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a241))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$) (?v1 A_treeFI_treeFI_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$c ?v3 (supremum$j ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A_treeFI_treeFI$)) (and (member$ ?v3 ?v0) (exists ((?v4 A$)) (and (member$c ?v4 (fun_app$x ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a242))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_a_treeFI_set_fun$) (?v2 A_treeFI_bool_fun$)) (= (exists ((?v3 A_treeFI$)) (and (member$a ?v3 (supremum$b ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A_treeFI$)) (and (member$a ?v3 ?v0) (exists ((?v4 A_treeFI$)) (and (member$a ?v4 (fun_app$p ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a243))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$c ?v3 (supremum$c ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A$)) (and (member$c ?v3 ?v0) (exists ((?v4 A$)) (and (member$c ?v4 (fun_app$q ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a244))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$c ?v3 (supremum$d ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 Nat$)) (and (member$b ?v3 ?v0) (exists ((?v4 A$)) (and (member$c ?v4 (fun_app$r ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a245))
(assert (! (forall ((?v0 A_set$) (?v1 A_nat_set_fun$) (?v2 Nat_bool_fun$)) (= (exists ((?v3 Nat$)) (and (member$b ?v3 (supremum$e ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (exists ((?v3 A$)) (and (member$c ?v3 ?v0) (exists ((?v4 Nat$)) (and (member$b ?v4 (fun_app$s ?v1 ?v3)) (fun_app$b ?v2 ?v4))))))) :named a246))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_nat_set_fun$) (?v2 Nat_bool_fun$)) (= (exists ((?v3 Nat$)) (and (member$b ?v3 (supremum$f ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (exists ((?v3 Nat$)) (and (member$b ?v3 ?v0) (exists ((?v4 Nat$)) (and (member$b ?v4 (fun_app$t ?v1 ?v3)) (fun_app$b ?v2 ?v4))))))) :named a247))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_treeFI_set_fun$) (?v2 A_treeFI_bool_fun$)) (= (exists ((?v3 A_treeFI$)) (and (member$a ?v3 (supremum$g ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A$)) (and (member$c ?v3 ?v0) (exists ((?v4 A_treeFI$)) (and (member$a ?v4 (fun_app$u ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a248))
(assert (! (forall ((?v0 Nat_set$) (?v1 Nat_a_treeFI_set_fun$) (?v2 A_treeFI_bool_fun$)) (= (exists ((?v3 A_treeFI$)) (and (member$a ?v3 (supremum$h ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 Nat$)) (and (member$b ?v3 ?v0) (exists ((?v4 A_treeFI$)) (and (member$a ?v4 (fun_app$v ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a249))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_nat_set_fun$) (?v2 Nat_bool_fun$)) (= (exists ((?v3 Nat$)) (and (member$b ?v3 (supremum$i ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (exists ((?v3 A_treeFI$)) (and (member$a ?v3 ?v0) (exists ((?v4 Nat$)) (and (member$b ?v4 (fun_app$w ?v1 ?v3)) (fun_app$b ?v2 ?v4))))))) :named a250))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$c ?v3 (supremum$a ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A_treeFI$)) (and (member$a ?v3 ?v0) (exists ((?v4 A$)) (and (member$c ?v4 (fun_app$e ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a251))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$) (?v1 A_treeFI_treeFI_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$c ?v3 (supremum$j ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A_treeFI_treeFI$)) (and (member$ ?v3 ?v0) (exists ((?v4 A$)) (and (member$c ?v4 (fun_app$x ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a252))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (= (remove$b ?v0 (coset$ ?v1)) (coset$ (fun_app$g (insert$c ?v0) ?v1)))) :named a253))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (= (insert$d ?v0 (coset$a ?v1)) (coset$a (removeAll$ ?v0 ?v1)))) :named a254))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (= (insert$g ?v0 (coset$ ?v1)) (coset$ (removeAll$c ?v0 ?v1)))) :named a255))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_set$) (?v2 A_treeFI_a_set_fun$) (?v3 A_treeFI_a_set_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_treeFI$)) (=> (member$a ?v4 ?v1) (= (fun_app$e ?v2 ?v4) (fun_app$e ?v3 ?v4))))) (= (supremum$a ?v0 ?v2) (supremum$a ?v1 ?v3)))) :named a256))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_set$) (?v2 A_treeFI_a_treeFI_set_fun$) (?v3 A_treeFI_a_treeFI_set_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_treeFI$)) (=> (member$a ?v4 ?v1) (= (fun_app$p ?v2 ?v4) (fun_app$p ?v3 ?v4))))) (= (supremum$b ?v0 ?v2) (supremum$b ?v1 ?v3)))) :named a257))
(assert (! (forall ((?v0 A_treeFI_option$)) (=> (and (=> (= ?v0 none$c) false) (=> (not (= ?v0 none$c)) false)) false)) :named a258))
(assert (! (= (is_none$ none$c) true) :named a259))
(assert (! (forall ((?v0 A_treeFI_option$)) (! (= (is_none$ ?v0) (= ?v0 none$c)) :pattern ((is_none$ ?v0)))) :named a260))
(assert (! (forall ((?v0 A_treeFI_nat_fun$) (?v1 A_treeFI$) (?v2 A_treeFI_list$)) (! (= (sort_key$ ?v0 (cons$ ?v1 ?v2)) (insort_key$ ?v0 ?v1 (sort_key$ ?v0 ?v2))) :pattern ((sort_key$ ?v0 (cons$ ?v1 ?v2))))) :named a261))
(assert (! (forall ((?v0 A_treeFI_nat_fun$) (?v1 A_treeFI$) (?v2 A_treeFI$) (?v3 A_treeFI_list$)) (=> (not (= (fun_app$y ?v0 ?v1) (fun_app$y ?v0 ?v2))) (= (insort_key$ ?v0 ?v2 (insort_key$ ?v0 ?v1 ?v3)) (insort_key$ ?v0 ?v1 (insort_key$ ?v0 ?v2 ?v3))))) :named a262))
(assert (! (forall ((?v0 A_treeFI_nat_fun$) (?v1 A_treeFI$) (?v2 A_treeFI_list$)) (= (set$ (insort_key$ ?v0 ?v1 ?v2)) (insert$g ?v1 (set$ ?v2)))) :named a263))
(assert (! (forall ((?v0 A_list$) (?v1 A_nat_fun$) (?v2 A$)) (! (=> (forall ((?v3 A$)) (=> (member$c ?v3 (set$d ?v0)) (fun_app$b (less_eq$ (fun_app$z ?v1 ?v2)) (fun_app$z ?v1 ?v3)))) (= (insort_key$a ?v1 ?v2 ?v0) (cons$d ?v2 ?v0))) :pattern ((insort_key$a ?v1 ?v2 ?v0)))) :named a264))
(assert (! (forall ((?v0 A_treeFI_treeFI_list$) (?v1 A_treeFI_treeFI_nat_fun$) (?v2 A_treeFI_treeFI$)) (! (=> (forall ((?v3 A_treeFI_treeFI$)) (=> (member$ ?v3 (set$a ?v0)) (fun_app$b (less_eq$ (fun_app$aa ?v1 ?v2)) (fun_app$aa ?v1 ?v3)))) (= (insort_key$b ?v1 ?v2 ?v0) (cons$a ?v2 ?v0))) :pattern ((insort_key$b ?v1 ?v2 ?v0)))) :named a265))
(assert (! (forall ((?v0 Nat_list$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (! (=> (forall ((?v3 Nat$)) (=> (member$b ?v3 (set$e ?v0)) (fun_app$b (less_eq$ (fun_app$ab ?v1 ?v2)) (fun_app$ab ?v1 ?v3)))) (= (insort_key$c ?v1 ?v2 ?v0) (cons$e ?v2 ?v0))) :pattern ((insort_key$c ?v1 ?v2 ?v0)))) :named a266))
(assert (! (forall ((?v0 A_treeFI_list$) (?v1 A_treeFI_nat_fun$) (?v2 A_treeFI$)) (! (=> (forall ((?v3 A_treeFI$)) (=> (member$a ?v3 (set$ ?v0)) (fun_app$b (less_eq$ (fun_app$y ?v1 ?v2)) (fun_app$y ?v1 ?v3)))) (= (insort_key$ ?v1 ?v2 ?v0) (cons$ ?v2 ?v0))) :pattern ((insort_key$ ?v1 ?v2 ?v0)))) :named a267))
(assert (! (forall ((?v0 A_treeFI$)) (! (= (fun_app$g (insert$c ?v0) nil$) (cons$ ?v0 nil$)) :pattern ((insert$c ?v0)))) :named a268))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$f (insert$b ?v0) nil$e) (cons$e ?v0 nil$e)) :pattern ((insert$b ?v0)))) :named a269))
(assert (! (forall ((?v0 A_treeFI_option_set$)) (= (these$ (insert$h none$c ?v0)) (these$ ?v0))) :named a270))
(assert (! (forall ((?v0 A_treeFI_bool_fun$)) (pred_option$ ?v0 none$c)) :named a271))
(assert (! (forall ((?v0 A_treeFI$)) (= (lab$a (trev$ ?v0)) (lab$a ?v0))) :named a272))
(assert (! (forall ((?v0 A_treeFI_treeFI$)) (= (lab$ (trev$a ?v0)) (lab$ ?v0))) :named a273))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$b (less_eq$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$b (less_eq$ ?v0) ?v1)) :pattern ((fun_app$b (less_eq$ (suc$ ?v0)) (suc$ ?v1))))) :named a274))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (less_eq$a (insert$d ?v0 ?v1) ?v2) (and (member$c ?v0 ?v2) (less_eq$a ?v1 ?v2)))) :named a275))
(assert (! (forall ((?v0 A_treeFI_treeFI$) (?v1 A_treeFI_treeFI_set$) (?v2 A_treeFI_treeFI_set$)) (= (less_eq$b (insert$e ?v0 ?v1) ?v2) (and (member$ ?v0 ?v2) (less_eq$b ?v1 ?v2)))) :named a276))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat_set$)) (= (less_eq$c (insert$f ?v0 ?v1) ?v2) (and (member$b ?v0 ?v2) (less_eq$c ?v1 ?v2)))) :named a277))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$) (?v2 A_treeFI_set$)) (= (less_eq$d (insert$g ?v0 ?v1) ?v2) (and (member$a ?v0 ?v2) (less_eq$d ?v1 ?v2)))) :named a278))
(assert (! (forall ((?v0 Nat$) (?v1 A_treeFI_list$)) (= (= (fun_app$g (rotate$b ?v0) ?v1) nil$) (= ?v1 nil$))) :named a279))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (= (= (rotate$a ?v0 ?v1) nil$e) (= ?v1 nil$e))) :named a280))
(assert (! (forall ((?v0 A_treeFI_list$)) (= (= (fun_app$g rotate1$b ?v0) nil$) (= ?v0 nil$))) :named a281))
(assert (! (forall ((?v0 Nat_list$)) (= (= (rotate1$a ?v0) nil$e) (= ?v0 nil$e))) :named a282))
(assert (! (forall ((?v0 Nat_bool_fun$)) (! (= (fun_app$h (list_ex1$b ?v0) nil$e) false) :pattern ((list_ex1$b ?v0)))) :named a283))
(assert (! (forall ((?v0 A_treeFI_bool_fun$)) (! (= (fun_app$i (list_ex1$c ?v0) nil$) false) :pattern ((list_ex1$c ?v0)))) :named a284))
(assert (! (forall ((?v0 A_treeFI_list_list$)) (=> (and (=> (= ?v0 nil$f) false) (and (forall ((?v1 A_treeFI_list_list$)) (=> (= ?v0 (cons$f nil$ ?v1)) false)) (forall ((?v1 A_treeFI$) (?v2 A_treeFI_list$) (?v3 A_treeFI_list_list$)) (=> (= ?v0 (cons$f (cons$ ?v1 ?v2) ?v3)) false)))) false)) :named a285))
(assert (! (forall ((?v0 Nat_list_list$)) (=> (and (=> (= ?v0 nil$g) false) (and (forall ((?v1 Nat_list_list$)) (=> (= ?v0 (cons$g nil$e ?v1)) false)) (forall ((?v1 Nat$) (?v2 Nat_list$) (?v3 Nat_list_list$)) (=> (= ?v0 (cons$g (cons$e ?v1 ?v2) ?v3)) false)))) false)) :named a286))
(assert (! (forall ((?v0 A_treeFI_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false)) :named a287))
(assert (! (forall ((?v0 Nat_list$)) (=> (and (=> (= ?v0 nil$e) false) (=> (not (= ?v0 nil$e)) false)) false)) :named a288))
(assert (! (forall ((?v0 Nat_a_treeFI_set_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (less_eq$d (fun_app$v ?v0 ?v3) (fun_app$v ?v0 (suc$ ?v3)))) (fun_app$b (less_eq$ ?v1) ?v2)) (less_eq$d (fun_app$v ?v0 ?v1) (fun_app$v ?v0 ?v2)))) :named a289))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$b (less_eq$ (fun_app$ab ?v0 ?v3)) (fun_app$ab ?v0 (suc$ ?v3)))) (fun_app$b (less_eq$ ?v1) ?v2)) (fun_app$b (less_eq$ (fun_app$ab ?v0 ?v1)) (fun_app$ab ?v0 ?v2)))) :named a290))
(assert (! (forall ((?v0 Nat_a_treeFI_set_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (less_eq$d (fun_app$v ?v0 (suc$ ?v3)) (fun_app$v ?v0 ?v3))) (fun_app$b (less_eq$ ?v1) ?v2)) (less_eq$d (fun_app$v ?v0 ?v2) (fun_app$v ?v0 ?v1)))) :named a291))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$b (less_eq$ (fun_app$ab ?v0 (suc$ ?v3))) (fun_app$ab ?v0 ?v3))) (fun_app$b (less_eq$ ?v1) ?v2)) (fun_app$b (less_eq$ (fun_app$ab ?v0 ?v2)) (fun_app$ab ?v0 ?v1)))) :named a292))
(assert (! (= (less_eq$b (coset$b nil$a) (set$a nil$a)) false) :named a293))
(assert (! (= (less_eq$c (coset$c nil$e) (set$e nil$e)) false) :named a294))
(assert (! (= (less_eq$d (coset$ nil$) (set$ nil$)) false) :named a295))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$b (less_eq$ ?v0) (suc$ ?v1)) (or (fun_app$b (less_eq$ ?v0) ?v1) (= ?v0 (suc$ ?v1)))) :pattern ((fun_app$b (less_eq$ ?v0) (suc$ ?v1))))) :named a296))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$b (less_eq$ ?v0) ?v1)) (fun_app$b (less_eq$ (suc$ ?v1)) ?v0))) :named a297))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (forall ((?v2 Nat$)) (=> (forall ((?v3 Nat$)) (=> (fun_app$b (less_eq$ (suc$ ?v3)) ?v2) (fun_app$b ?v0 ?v3))) (fun_app$b ?v0 ?v2))) (fun_app$b ?v0 ?v1))) :named a298))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$b (less_eq$ (suc$ ?v0)) ?v1) (fun_app$b (less_eq$ ?v0) ?v1))) :named a299))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$b (less_eq$ (suc$ ?v0)) ?v1) (exists ((?v2 Nat$)) (= ?v1 (suc$ ?v2))))) :named a300))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$b (less_eq$ ?v0) (suc$ ?v1)) (and (=> (fun_app$b (less_eq$ ?v0) ?v1) false) (=> (= ?v0 (suc$ ?v1)) false))) false)) :named a301))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (fun_app$b (less_eq$ ?v0) ?v1) (fun_app$b (less_eq$ ?v0) (suc$ ?v1)))) :named a302))
(assert (! (forall ((?v0 Nat$)) (not (fun_app$b (less_eq$ (suc$ ?v0)) ?v0))) :named a303))
(assert (! (forall ((?v0 A_treeFI_list$)) (= (not (= ?v0 nil$)) (exists ((?v1 A_treeFI$) (?v2 A_treeFI_list$)) (= ?v0 (cons$ ?v1 ?v2))))) :named a304))
(assert (! (forall ((?v0 Nat_list$)) (= (not (= ?v0 nil$e)) (exists ((?v1 Nat$) (?v2 Nat_list$)) (= ?v0 (cons$e ?v1 ?v2))))) :named a305))
(assert (! (forall ((?v0 A_treeFI_list$)) (=> (and (=> (= ?v0 nil$) false) (and (forall ((?v1 A_treeFI$)) (=> (= ?v0 (cons$ ?v1 nil$)) false)) (forall ((?v1 A_treeFI$) (?v2 A_treeFI$) (?v3 A_treeFI_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false)))) false)) :named a306))
(assert (! (forall ((?v0 Nat_list$)) (=> (and (=> (= ?v0 nil$e) false) (and (forall ((?v1 Nat$)) (=> (= ?v0 (cons$e ?v1 nil$e)) false)) (forall ((?v1 Nat$) (?v2 Nat$) (?v3 Nat_list$)) (=> (= ?v0 (cons$e ?v1 (cons$e ?v2 ?v3))) false)))) false)) :named a307))
(assert (! (forall ((?v0 A_treeFI_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 A_treeFI$) (?v2 A_treeFI_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) false))) false)) :named a308))
(assert (! (forall ((?v0 Nat_list$)) (=> (and (=> (= ?v0 nil$e) false) (forall ((?v1 Nat$) (?v2 Nat_list$)) (=> (= ?v0 (cons$e ?v1 ?v2)) false))) false)) :named a309))
(assert (! (forall ((?v0 A_treeFI_list$) (?v1 A_treeFI$) (?v2 A_treeFI_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) (not (= ?v0 nil$)))) :named a310))
(assert (! (forall ((?v0 Nat_list$) (?v1 Nat$) (?v2 Nat_list$)) (=> (= ?v0 (cons$e ?v1 ?v2)) (not (= ?v0 nil$e)))) :named a311))
(assert (! (forall ((?v0 A_treeFI_list$) (?v1 A_treeFI_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 A_treeFI$)) (fun_app$i ?v1 (cons$ ?v2 nil$))) (forall ((?v2 A_treeFI$) (?v3 A_treeFI_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$i ?v1 ?v3)) (fun_app$i ?v1 (cons$ ?v2 ?v3)))))) (fun_app$i ?v1 ?v0))) :named a312))
(assert (! (forall ((?v0 Nat_list$) (?v1 Nat_list_bool_fun$)) (=> (and (not (= ?v0 nil$e)) (and (forall ((?v2 Nat$)) (fun_app$h ?v1 (cons$e ?v2 nil$e))) (forall ((?v2 Nat$) (?v3 Nat_list$)) (=> (and (not (= ?v3 nil$e)) (fun_app$h ?v1 ?v3)) (fun_app$h ?v1 (cons$e ?v2 ?v3)))))) (fun_app$h ?v1 ?v0))) :named a313))
(assert (! (forall ((?v0 Nat_list_nat_list_bool_fun_fun$) (?v1 Nat_list$) (?v2 Nat_list$)) (=> (and (fun_app$h (fun_app$ac ?v0 nil$e) nil$e) (and (forall ((?v3 Nat$) (?v4 Nat_list$)) (fun_app$h (fun_app$ac ?v0 (cons$e ?v3 ?v4)) nil$e)) (and (forall ((?v3 Nat$) (?v4 Nat_list$)) (fun_app$h (fun_app$ac ?v0 nil$e) (cons$e ?v3 ?v4))) (forall ((?v3 Nat$) (?v4 Nat_list$) (?v5 Nat$) (?v6 Nat_list$)) (=> (fun_app$h (fun_app$ac ?v0 ?v4) ?v6) (fun_app$h (fun_app$ac ?v0 (cons$e ?v3 ?v4)) (cons$e ?v5 ?v6))))))) (fun_app$h (fun_app$ac ?v0 ?v1) ?v2))) :named a314))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$) (?v2 A_treeFI_set$)) (=> (not (member$a ?v0 ?v1)) (= (less_eq$d ?v1 (insert$g ?v0 ?v2)) (less_eq$d ?v1 ?v2)))) :named a315))
(assert (! (forall ((?v0 A_treeFI_list$) (?v1 A_treeFI_set$)) (= (less_eq$d (set$ ?v0) ?v1) (forall ((?v2 A_treeFI$)) (=> (member$a ?v2 (set$ ?v0)) (member$a ?v2 ?v1))))) :named a316))
(assert (! (forall ((?v0 A_treeFI_list$) (?v1 A_treeFI$)) (less_eq$d (set$ ?v0) (set$ (cons$ ?v1 ?v0)))) :named a317))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_list$)) (= (less_eq$d ?v0 (coset$ ?v1)) (forall ((?v2 A_treeFI$)) (=> (member$a ?v2 (set$ ?v1)) (not (member$a ?v2 ?v0)))))) :named a318))
(assert (! (forall ((?v0 A_treeFI$)) (= (the_elem$ (set$ (cons$ ?v0 nil$))) ?v0)) :named a319))
(assert (! (forall ((?v0 Nat_nat_fun$)) (= (antimono$ ?v0) (forall ((?v1 Nat$)) (fun_app$b (less_eq$ (fun_app$ab ?v0 (suc$ ?v1))) (fun_app$ab ?v0 ?v1))))) :named a320))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_set$)) (=> (forall ((?v2 A_treeFI$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1))) (less_eq$d ?v0 ?v1))) :named a321))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_set$)) (= (less_eq$d ?v0 ?v1) (forall ((?v2 A_treeFI$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1))))) :named a322))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_set$)) (= (less_eq$d ?v0 ?v1) (forall ((?v2 A_treeFI$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1))))) :named a323))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 ?v1) (fun_app$b (less_eq$ ?v0) ?v1))) :named a324))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$) (?v2 A_treeFI_set$)) (=> (and (member$a ?v0 ?v1) (less_eq$d ?v1 ?v2)) (member$a ?v0 ?v2))) :named a325))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$) (?v2 A_treeFI_set$)) (=> (and (member$a ?v0 ?v1) (less_eq$d ?v1 ?v2)) (member$a ?v0 ?v2))) :named a326))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_set$) (?v2 A_treeFI$)) (=> (and (less_eq$d ?v0 ?v1) (and (=> (not (member$a ?v2 ?v0)) false) (=> (member$a ?v2 ?v1) false))) false)) :named a327))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_set$) (?v2 A_treeFI$)) (=> (and (less_eq$d ?v0 ?v1) (member$a ?v2 ?v0)) (member$a ?v2 ?v1))) :named a328))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_set$) (?v2 A_treeFI$)) (=> (and (less_eq$d ?v0 ?v1) (member$a ?v2 ?v0)) (member$a ?v2 ?v1))) :named a329))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (fun_app$b (less_eq$ ?v0) ?v1) (fun_app$b (less_eq$ ?v1) ?v0)) (= ?v0 ?v1))) :named a330))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (=> (and (fun_app$b (less_eq$ ?v0) ?v1) (fun_app$b (less_eq$ ?v1) ?v2)) (fun_app$b (less_eq$ ?v0) ?v2))) :named a331))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_set$) (?v2 A_treeFI$)) (=> (and (less_eq$d ?v0 ?v1) (not (member$a ?v2 ?v1))) (not (member$a ?v2 ?v0)))) :named a332))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI_set$) (?v2 A_treeFI$)) (=> (and (less_eq$d ?v0 ?v1) (member$a ?v2 ?v0)) (member$a ?v2 ?v1))) :named a333))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (or (fun_app$b (less_eq$ ?v0) ?v1) (fun_app$b (less_eq$ ?v1) ?v0))) :named a334))
(assert (! (forall ((?v0 Nat$)) (fun_app$b (less_eq$ ?v0) ?v0)) :named a335))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$) (?v2 A_treeFI_set$)) (=> (and (member$a ?v0 ?v1) (less_eq$d ?v2 ?v1)) (less_eq$d (insert$g ?v0 ?v2) ?v1))) :named a336))
(assert (! (forall ((?v0 Nat_list$)) (=> (and (sorted$ ?v0) (and (=> (= ?v0 nil$e) false) (forall ((?v1 Nat_list$) (?v2 Nat$)) (=> (and (= ?v0 (cons$e ?v2 ?v1)) (and (forall ((?v3 Nat$)) (=> (member$b ?v3 (set$e ?v1)) (fun_app$b (less_eq$ ?v2) ?v3))) (sorted$ ?v1))) false)))) false)) :named a337))
(assert (! (forall ((?v0 Nat_list$)) (= (sorted$ ?v0) (or (= ?v0 nil$e) (exists ((?v1 Nat_list$) (?v2 Nat$)) (and (= ?v0 (cons$e ?v2 ?v1)) (and (forall ((?v3 Nat$)) (=> (member$b ?v3 (set$e ?v1)) (fun_app$b (less_eq$ ?v2) ?v3))) (sorted$ ?v1))))))) :named a338))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_list$)) (! (= (sorted$ (cons$e ?v0 (cons$e ?v1 ?v2))) (and (fun_app$b (less_eq$ ?v0) ?v1) (sorted$ (cons$e ?v1 ?v2)))) :pattern ((cons$e ?v0 (cons$e ?v1 ?v2))))) :named a339))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat_list$)) (=> (and (fun_app$b (less_eq$ ?v0) ?v1) (sorted$ (cons$e ?v1 ?v2))) (sorted$ (cons$e ?v0 (cons$e ?v1 ?v2))))) :named a340))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_list$)) (= (sorted$ (cons$e ?v0 ?v1)) (and (sorted$ ?v1) (forall ((?v2 Nat$)) (=> (member$b ?v2 (set$e ?v1)) (fun_app$b (less_eq$ ?v0) ?v2)))))) :named a341))
(assert (! (forall ((?v0 Nat_list$) (?v1 Nat$)) (=> (and (forall ((?v2 Nat$)) (=> (member$b ?v2 (set$e ?v0)) (fun_app$b (less_eq$ ?v1) ?v2))) (sorted$ ?v0)) (sorted$ (cons$e ?v1 ?v0)))) :named a342))
(assert (! (forall ((?v0 A_treeFI_set$)) (= (forall ((?v1 A_treeFI$)) (not (member$a ?v1 ?v0))) (= ?v0 bot$))) :named a343))
(assert (! (forall ((?v0 A_treeFI$)) (= (member$a ?v0 bot$) false)) :named a344))
(assert (! (forall ((?v0 A_treeFI$)) (member$a ?v0 (insert$g ?v0 bot$))) :named a345))
(assert (! (forall ((?v0 A_treeFI_list$)) (= (= bot$ (set$ ?v0)) (= ?v0 nil$))) :named a346))
(assert (! (forall ((?v0 A_treeFI_list$)) (= (= (set$ ?v0) bot$) (= ?v0 nil$))) :named a347))
(assert (! (= bot$ (set$ nil$)) :named a348))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI$)) (= (member$a ?v0 (insert$g ?v1 bot$)) (= ?v0 ?v1))) :named a349))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI$)) (=> (member$a ?v0 (insert$g ?v1 bot$)) (= ?v0 ?v1))) :named a350))
(assert (! (forall ((?v0 A_treeFI_set$)) (= (exists ((?v1 A_treeFI$)) (member$a ?v1 ?v0)) (not (= ?v0 bot$)))) :named a351))
(assert (! (forall ((?v0 A_treeFI_set$)) (=> (forall ((?v1 A_treeFI$)) (=> (member$a ?v1 ?v0) false)) (= ?v0 bot$))) :named a352))
(assert (! (forall ((?v0 A_treeFI_set$) (?v1 A_treeFI$)) (=> (= ?v0 bot$) (not (member$a ?v1 ?v0)))) :named a353))
(assert (! (forall ((?v0 A_treeFI$)) (=> (member$a ?v0 bot$) false)) :named a354))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_list$)) (= (set$ (removeAll$c ?v0 ?v1)) (minus$ (set$ ?v1) (insert$g ?v0 bot$)))) :named a355))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$) (?v2 A_treeFI_set$)) (=> (and (member$a ?v0 ?v1) (not (member$a ?v0 ?v2))) (member$a ?v0 (minus$ ?v1 ?v2)))) :named a356))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$) (?v2 A_treeFI_set$)) (= (member$a ?v0 (minus$ ?v1 ?v2)) (and (member$a ?v0 ?v1) (not (member$a ?v0 ?v2))))) :named a357))
(assert (! (forall ((?v0 A_treeFI$) (?v1 A_treeFI_set$) (?v2 A_treeFI_set$)) (=> (not (member$a ?v0 ?v1)) (= (minus$ ?v1 (insert$g ?v0 ?v2)) (minus$ ?v1 ?v2)))) :named a358))
(check-sat)
;(get-unsat-core)
