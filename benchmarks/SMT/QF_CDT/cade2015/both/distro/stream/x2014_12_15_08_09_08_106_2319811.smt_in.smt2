; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 468
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-datatypes () ((Num$ (one$) (bit0$ (select$ Num$)) (bit1$ (selecta$ Num$)))))
(declare-fun n$ () Nat$)
(declare-fun x$ () A$)
(declare-fun s1$ () A_stream$)
(declare-fun s2$ () A_stream$)
(declare-fun sup$ (A_set$ A_set$) A_set$)
(declare-fun snth$ (A_stream$ Nat$) A$)
(declare-fun sset$ (A_stream$) A_set$)
(declare-fun times$ (Nat$ Nat$) Nat$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun times$a (Num$ Num$) Num$)
(declare-fun numeral$ (Num$) Nat$)
(declare-fun sinterleave$ (A_stream$ A_stream$) A_stream$)
(assert (! (not (= (snth$ (sinterleave$ s1$ s2$) (times$ (numeral$ (bit0$ one$)) n$)) x$)) :named a0))
(assert (! (= x$ (snth$ s1$ n$)) :named a1))
(assert (! (=> (forall ((?v0 Nat$)) (=> (= x$ (snth$ s1$ ?v0)) false)) false) :named a2))
(assert (! (member$ x$ (sset$ s1$)) :named a3))
(assert (! (forall ((?v0 Num$)) (= (= (bit0$ ?v0) one$) false)) :named a4))
(assert (! (forall ((?v0 Num$)) (= (= one$ (bit0$ ?v0)) false)) :named a5))
(assert (! (forall ((?v0 Num$) (?v1 Num$) (?v2 Nat$)) (= (times$ (numeral$ ?v0) (times$ (numeral$ ?v1) ?v2)) (times$ (numeral$ (times$a ?v0 ?v1)) ?v2))) :named a6))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (times$ (numeral$ ?v0) (numeral$ ?v1)) (numeral$ (times$a ?v0 ?v1)))) :named a7))
(assert (! (member$ x$ (sup$ (sset$ s1$) (sset$ s2$))) :named a8))
(assert (! (forall ((?v0 Nat$)) (= (times$ (numeral$ one$) ?v0) ?v0)) :named a9))
(assert (! (forall ((?v0 Nat$)) (= (times$ ?v0 (numeral$ one$)) ?v0)) :named a10))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (bit0$ ?v0) (bit0$ ?v1)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (bit0$ ?v0) (bit0$ ?v1)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (= (= (numeral$ ?v0) (numeral$ ?v1)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 Num$)) (not (= one$ (bit0$ ?v0)))) :named a14))
(assert (! (forall ((?v0 Num$) (?v1 Num$)) (! (= (times$a (bit0$ ?v0) (bit0$ ?v1)) (bit0$ (bit0$ (times$a ?v0 ?v1)))) :pattern ((times$a (bit0$ ?v0) (bit0$ ?v1))))) :named a15))
(assert (! (forall ((?v0 Num$)) (! (= (times$a one$ ?v0) ?v0) :pattern ((times$a one$ ?v0)))) :named a16))
(check-sat)
;(get-unsat-core)
