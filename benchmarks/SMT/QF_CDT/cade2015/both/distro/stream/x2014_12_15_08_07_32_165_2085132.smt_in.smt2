; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 489
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun n$ () Nat$)
(declare-fun u$ () A_list$)
(declare-fun mod$ (Nat$) Nat_nat_fun$)
(declare-fun size$ (A_list$) Nat$)
(declare-fun zero$ () Nat$)
(declare-fun cycle$ (A_list$) A_stream$)
(declare-fun sdrop$ (Nat$ A_stream$) A_stream$)
(declare-fun shift$ (A_list$ A_stream$) A_stream$)
(declare-fun stake$ (Nat$ A_stream$) A_list$)
(declare-fun rotate$ (Nat$ A_list$) A_list$)
(declare-fun fun_app$ (Nat_nat_fun$ Nat$) Nat$)
(assert (! (not (= (sdrop$ n$ (cycle$ u$)) (cycle$ (rotate$ (fun_app$ (mod$ n$) (size$ u$)) u$)))) :named a0))
(assert (! (not (= u$ nil$)) :named a1))
(assert (! (forall ((?v0 A_list$)) (=> (not (= ?v0 nil$)) (= (sdrop$ (size$ ?v0) (cycle$ ?v0)) (cycle$ ?v0)))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 A_list$)) (= (size$ (rotate$ ?v0 ?v1)) (size$ ?v1))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 A_list$)) (= (= (rotate$ ?v0 ?v1) nil$) (= ?v1 nil$))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 A_list$)) (= (rotate$ ?v0 ?v1) (rotate$ (fun_app$ (mod$ ?v0) (size$ ?v1)) ?v1))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (fun_app$ (mod$ (fun_app$ (mod$ ?v0) ?v1)) ?v1) (fun_app$ (mod$ ?v0) ?v1))) :named a6))
(assert (! (forall ((?v0 A_list$) (?v1 Nat$)) (=> (and (not (= ?v0 nil$)) (= (fun_app$ (mod$ ?v1) (size$ ?v0)) zero$)) (= (sdrop$ ?v1 (cycle$ ?v0)) (cycle$ ?v0)))) :named a7))
(assert (! (forall ((?v0 A_list$)) (=> (not (= ?v0 nil$)) (= (stake$ (size$ ?v0) (cycle$ ?v0)) ?v0))) :named a8))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (not (= (size$ ?v0) (size$ ?v1))) (= (= ?v0 ?v1) false))) :named a9))
(assert (! (forall ((?v0 Nat$)) (exists ((?v1 A_list$)) (= (size$ ?v1) ?v0))) :named a10))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (not (= (size$ ?v0) (size$ ?v1))) (not (= ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false)) :named a12))
(assert (! (forall ((?v0 A_list$)) (! (=> (not (= ?v0 nil$)) (= (cycle$ ?v0) (shift$ ?v0 (cycle$ ?v0)))) :pattern ((cycle$ ?v0)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 A_list$)) (! (=> (= (fun_app$ (mod$ ?v0) (size$ ?v1)) zero$) (= (rotate$ ?v0 ?v1) ?v1)) :pattern ((rotate$ ?v0 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_list$) (?v1 A_stream$) (?v2 A_stream$)) (= (= (shift$ ?v0 ?v1) (shift$ ?v0 ?v2)) (= ?v1 ?v2))) :named a15))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (mod$ zero$) ?v0) zero$)) :named a16))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ (mod$ ?v0) ?v0) zero$) :pattern ((mod$ ?v0)))) :named a17))
(assert (! (forall ((?v0 Nat$)) (= (fun_app$ (mod$ ?v0) zero$) ?v0)) :named a18))
(check-sat)
;(get-unsat-core)
