; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 141
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort A_stream_stream_set$ 0)
(declare-sort A_a_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_bool_fun$ 0)
(declare-sort A_stream_stream_stream_set$ 0)
(declare-sort A_stream_a_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_stream_bool_fun$ 0)
(declare-sort A_stream_a_stream_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_a_stream_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_a_stream_stream_stream_bool_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-codatatypes () ((A_stream_stream$ (sCons$a (shd$a A_stream$) (stl$a A_stream_stream$)))))
(declare-datatypes () ((A_stream_list$ (nil$a) (cons$a (hd$a A_stream$) (tl$a A_stream_list$)))))
(declare-codatatypes () ((A_stream_stream_stream$ (sCons$b (shd$b A_stream_stream$) (stl$b A_stream_stream_stream$)))))
(declare-fun ua$ () A_list$)
(declare-fun sset$ (A_stream_stream_stream$) A_stream_stream_set$)
(declare-fun cycle$ (A_list$) A_stream$)
(declare-fun shift$ (A_list$ A_stream$) A_stream$)
(declare-fun sset$a (A_stream_stream$) A_stream_set$)
(declare-fun sset$b (A_stream$) A_set$)
(declare-fun cycle$a (A_stream_list$) A_stream_stream$)
(declare-fun member$ (A_stream_stream_stream$ A_stream_stream_stream_set$) Bool)
(declare-fun shift$a (A_stream_list$ A_stream_stream$) A_stream_stream$)
(declare-fun fun_app$ (A_stream_stream_bool_fun$ A_stream_stream$) Bool)
(declare-fun member$a (A_stream_stream$ A_stream_stream_set$) Bool)
(declare-fun member$b (A_stream$ A_stream_set$) Bool)
(declare-fun member$c (A$ A_set$) Bool)
(declare-fun streams$ (A_stream_stream_set$) A_stream_stream_stream_set$)
(declare-fun fun_app$a (A_stream_stream_a_stream_stream_bool_fun_fun$ A_stream_stream$) A_stream_stream_bool_fun$)
(declare-fun fun_app$b (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$c (A_stream_a_stream_bool_fun_fun$ A_stream$) A_stream_bool_fun$)
(declare-fun fun_app$d (A_bool_fun$ A$) Bool)
(declare-fun fun_app$e (A_stream_stream_stream_bool_fun$ A_stream_stream_stream$) Bool)
(declare-fun fun_app$f (A_stream_stream_a_stream_stream_stream_bool_fun_fun$ A_stream_stream$) A_stream_stream_stream_bool_fun$)
(declare-fun fun_app$g (A_stream_a_stream_stream_bool_fun_fun$ A_stream$) A_stream_stream_bool_fun$)
(declare-fun fun_app$h (A_a_stream_bool_fun_fun$ A$) A_stream_bool_fun$)
(declare-fun streams$a (A_stream_set$) A_stream_stream_set$)
(declare-fun streams$b (A_set$) A_stream_set$)
(declare-fun sdrop_while$ (A_stream_bool_fun$ A_stream_stream$) A_stream_stream$)
(declare-fun sdrop_while$a (A_bool_fun$ A_stream$) A_stream$)
(assert (! (not (and (= (shd$ (cycle$ ua$)) (shd$ (shift$ ua$ (cycle$ ua$)))) (exists ((?v0 A_list$)) (and (= (stl$ (cycle$ ua$)) (cycle$ ?v0)) (and (= (stl$ (shift$ ua$ (cycle$ ua$))) (shift$ ?v0 (cycle$ ?v0))) (not (= ?v0 nil$))))))) :named a0))
(assert (! (not (= ua$ nil$)) :named a1))
(assert (! (forall ((?v0 A_list$) (?v1 A_stream$) (?v2 A_stream$)) (= (= (shift$ ?v0 ?v1) (shift$ ?v0 ?v2)) (= ?v1 ?v2))) :named a2))
(assert (! (forall ((?v0 A_stream$)) (! (= (shift$ nil$ ?v0) ?v0) :pattern ((shift$ nil$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream$)) (=> (and (= (shd$a ?v0) (shd$a ?v1)) (= (stl$a ?v0) (stl$a ?v1))) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$)) (=> (and (= (shd$ ?v0) (shd$ ?v1)) (= (stl$ ?v0) (stl$ ?v1))) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (forall ((?v3 A_stream_stream$) (?v4 A_stream_stream$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (and (= (shd$a ?v3) (shd$a ?v4)) (or (fun_app$ (fun_app$a ?v0 (stl$a ?v3)) (stl$a ?v4)) (= (stl$a ?v3) (stl$a ?v4))))))) (= ?v1 ?v2))) :named a6))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (forall ((?v3 A_stream$) (?v4 A_stream$)) (=> (fun_app$b (fun_app$c ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (or (fun_app$b (fun_app$c ?v0 (stl$ ?v3)) (stl$ ?v4)) (= (stl$ ?v3) (stl$ ?v4))))))) (= ?v1 ?v2))) :named a7))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (forall ((?v3 A_stream_stream$) (?v4 A_stream_stream$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (and (= (shd$a ?v3) (shd$a ?v4)) (fun_app$ (fun_app$a ?v0 (stl$a ?v3)) (stl$a ?v4)))))) (= ?v1 ?v2))) :named a8))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (forall ((?v3 A_stream$) (?v4 A_stream$)) (=> (fun_app$b (fun_app$c ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (fun_app$b (fun_app$c ?v0 (stl$ ?v3)) (stl$ ?v4)))))) (= ?v1 ?v2))) :named a9))
(assert (! (forall ((?v0 A_stream_list$) (?v1 A_stream_stream$)) (= (shd$a (shift$a ?v0 ?v1)) (ite (= ?v0 nil$a) (shd$a ?v1) (hd$a ?v0)))) :named a10))
(assert (! (forall ((?v0 A_list$) (?v1 A_stream$)) (= (shd$ (shift$ ?v0 ?v1)) (ite (= ?v0 nil$) (shd$ ?v1) (hd$ ?v0)))) :named a11))
(assert (! (forall ((?v0 A_stream_list$) (?v1 A_stream_stream$)) (= (stl$a (shift$a ?v0 ?v1)) (ite (= ?v0 nil$a) (stl$a ?v1) (shift$a (tl$a ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 A_list$) (?v1 A_stream$)) (= (stl$ (shift$ ?v0 ?v1)) (ite (= ?v0 nil$) (stl$ ?v1) (shift$ (tl$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream_stream$)) (= (sdrop_while$ ?v0 ?v1) (ite (fun_app$b ?v0 (shd$a ?v1)) (sdrop_while$ ?v0 (stl$a ?v1)) ?v1))) :named a14))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (= (sdrop_while$a ?v0 ?v1) (ite (fun_app$d ?v0 (shd$ ?v1)) (sdrop_while$a ?v0 (stl$ ?v1)) ?v1))) :named a15))
(assert (! (forall ((?v0 A_list$)) (=> (and (=> (= ?v0 nil$) false) (=> (not (= ?v0 nil$)) false)) false)) :named a16))
(assert (! (forall ((?v0 A_stream_stream$)) (= (sCons$a (shd$a ?v0) (stl$a ?v0)) ?v0)) :named a17))
(assert (! (forall ((?v0 A_stream$)) (= (sCons$ (shd$ ?v0) (stl$ ?v0)) ?v0)) :named a18))
(assert (! (forall ((?v0 A_stream_list$)) (= (shd$a (cycle$a ?v0)) (hd$a ?v0))) :named a19))
(assert (! (forall ((?v0 A_list$)) (= (shd$ (cycle$ ?v0)) (hd$ ?v0))) :named a20))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 A_stream_stream_set$)) (=> (and (member$ (stl$b ?v0) (streams$ ?v1)) (member$a (shd$b ?v0) ?v1)) (member$ ?v0 (streams$ ?v1)))) :named a21))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$)) (=> (and (member$a (stl$a ?v0) (streams$a ?v1)) (member$b (shd$a ?v0) ?v1)) (member$a ?v0 (streams$a ?v1)))) :named a22))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$)) (=> (and (member$b (stl$ ?v0) (streams$b ?v1)) (member$c (shd$ ?v0) ?v1)) (member$b ?v0 (streams$b ?v1)))) :named a23))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 A_stream_stream_set$)) (=> (and (member$ ?v0 (streams$ ?v1)) (=> (and (member$a (shd$b ?v0) ?v1) (member$ (stl$b ?v0) (streams$ ?v1))) false)) false)) :named a24))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$)) (=> (and (member$a ?v0 (streams$a ?v1)) (=> (and (member$b (shd$a ?v0) ?v1) (member$a (stl$a ?v0) (streams$a ?v1))) false)) false)) :named a25))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$)) (=> (and (member$b ?v0 (streams$b ?v1)) (=> (and (member$c (shd$ ?v0) ?v1) (member$b (stl$ ?v0) (streams$b ?v1))) false)) false)) :named a26))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream_a_stream_stream_stream_bool_fun_fun$)) (=> (and (member$a ?v0 (sset$ ?v1)) (and (forall ((?v3 A_stream_stream_stream$)) (fun_app$e (fun_app$f ?v2 (shd$b ?v3)) ?v3)) (forall ((?v3 A_stream_stream_stream$) (?v4 A_stream_stream$)) (=> (and (member$a ?v4 (sset$ (stl$b ?v3))) (fun_app$e (fun_app$f ?v2 ?v4) (stl$b ?v3))) (fun_app$e (fun_app$f ?v2 ?v4) ?v3))))) (fun_app$e (fun_app$f ?v2 ?v0) ?v1))) :named a27))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_stream$) (?v2 A_stream_a_stream_stream_bool_fun_fun$)) (=> (and (member$b ?v0 (sset$a ?v1)) (and (forall ((?v3 A_stream_stream$)) (fun_app$ (fun_app$g ?v2 (shd$a ?v3)) ?v3)) (forall ((?v3 A_stream_stream$) (?v4 A_stream$)) (=> (and (member$b ?v4 (sset$a (stl$a ?v3))) (fun_app$ (fun_app$g ?v2 ?v4) (stl$a ?v3))) (fun_app$ (fun_app$g ?v2 ?v4) ?v3))))) (fun_app$ (fun_app$g ?v2 ?v0) ?v1))) :named a28))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A_a_stream_bool_fun_fun$)) (=> (and (member$c ?v0 (sset$b ?v1)) (and (forall ((?v3 A_stream$)) (fun_app$b (fun_app$h ?v2 (shd$ ?v3)) ?v3)) (forall ((?v3 A_stream$) (?v4 A$)) (=> (and (member$c ?v4 (sset$b (stl$ ?v3))) (fun_app$b (fun_app$h ?v2 ?v4) (stl$ ?v3))) (fun_app$b (fun_app$h ?v2 ?v4) ?v3))))) (fun_app$b (fun_app$h ?v2 ?v0) ?v1))) :named a29))
(assert (! (forall ((?v0 A_stream_stream$)) (=> (=> (= ?v0 (sCons$a (shd$a ?v0) (stl$a ?v0))) false) false)) :named a30))
(assert (! (forall ((?v0 A_stream$)) (=> (=> (= ?v0 (sCons$ (shd$ ?v0) (stl$ ?v0))) false) false)) :named a31))
(check-sat)
;(get-unsat-core)
