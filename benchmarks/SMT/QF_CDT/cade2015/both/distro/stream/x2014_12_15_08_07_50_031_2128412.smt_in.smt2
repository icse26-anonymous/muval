; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 322
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort A_stream_stream_set$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_stream_stream_a_stream_stream_fun$ 0)
(declare-sort A_stream_stream_stream_a_stream_stream_stream_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (A_stream_stream$ (sCons$a (shd$a A_stream$) (stl$a A_stream_stream$)))
  (A_stream_stream_stream$ (sCons$b (shd$b A_stream_stream$) (stl$b A_stream_stream_stream$)))))
(declare-datatypes () ((A_stream_stream_list$ (nil$) (cons$ (hd$ A_stream_stream$) (tl$ A_stream_stream_list$)))
  (A_stream_list$ (nil$a) (cons$a (hd$a A_stream$) (tl$a A_stream_list$)))
  (A_list$ (nil$b) (cons$b (hd$b A$) (tl$b A_list$)))))
(declare-fun s$ () A_stream$)
(declare-fun x$ () A$)
(declare-fun id$ () A_a_fun$)
(declare-fun bot$ () A_set$)
(declare-fun id$a () A_stream_stream_a_stream_stream_fun$)
(declare-fun id$b () A_stream_a_stream_fun$)
(declare-fun id$c () A_stream_stream_stream_a_stream_stream_stream_fun$)
(declare-fun bot$a () A_stream_stream_set$)
(declare-fun bot$b () A_stream_set$)
(declare-fun smap$ (A_stream_a_stream_fun$) A_stream_stream_a_stream_stream_fun$)
(declare-fun sset$ (A_stream$) A_set$)
(declare-fun shift$ (A_stream_stream_list$ A_stream_stream_stream$) A_stream_stream_stream$)
(declare-fun smap$a (A_a_fun$) A_stream_a_stream_fun$)
(declare-fun smap$b (A_stream_stream_a_stream_stream_fun$) A_stream_stream_stream_a_stream_stream_stream_fun$)
(declare-fun sset$a (A_stream_stream_stream$) A_stream_stream_set$)
(declare-fun sset$b (A_stream_stream$) A_stream_set$)
(declare-fun insert$ (A$ A_set$) A_set$)
(declare-fun shift$a (A_stream_list$ A_stream_stream$) A_stream_stream$)
(declare-fun shift$b (A_list$) A_stream_a_stream_fun$)
(declare-fun fun_app$ (A_stream_stream_a_stream_stream_fun$ A_stream_stream$) A_stream_stream$)
(declare-fun insert$a (A_stream_stream$ A_stream_stream_set$) A_stream_stream_set$)
(declare-fun insert$b (A_stream$ A_stream_set$) A_stream_set$)
(declare-fun fun_app$a (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$b (A_a_fun$ A$) A$)
(declare-fun fun_app$c (A_stream_stream_stream_a_stream_stream_stream_fun$ A_stream_stream_stream$) A_stream_stream_stream$)
(declare-fun siterate$ (A_a_fun$ A$) A_stream$)
(declare-fun replicate$ (Nat$ A_stream_stream$) A_stream_stream_list$)
(declare-fun siterate$a (A_stream_stream_a_stream_stream_fun$ A_stream_stream$) A_stream_stream_stream$)
(declare-fun siterate$b (A_stream_a_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun replicate$a (Nat$ A_stream$) A_stream_list$)
(declare-fun replicate$b (Nat$ A$) A_list$)
(assert (! (not (= s$ (siterate$ id$ x$))) :named a0))
(assert (! (= (sset$ s$) (insert$ x$ bot$)) :named a1))
(assert (! (forall ((?v0 A_stream_stream$)) (! (= (fun_app$ id$a ?v0) ?v0) :pattern ((fun_app$ id$a ?v0)))) :named a2))
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$a id$b ?v0) ?v0) :pattern ((fun_app$a id$b ?v0)))) :named a3))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$b id$ ?v0) ?v0) :pattern ((fun_app$b id$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_stream_stream$)) (= (sset$a (siterate$a id$a ?v0)) (insert$a ?v0 bot$a))) :named a5))
(assert (! (forall ((?v0 A_stream$)) (= (sset$b (siterate$b id$b ?v0)) (insert$b ?v0 bot$b))) :named a6))
(assert (! (forall ((?v0 A$)) (= (sset$ (siterate$ id$ ?v0)) (insert$ ?v0 bot$))) :named a7))
(assert (! (forall ((?v0 A_stream_stream$)) (! (= (fun_app$ id$a ?v0) ?v0) :pattern ((fun_app$ id$a ?v0)))) :named a8))
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$a id$b ?v0) ?v0) :pattern ((fun_app$a id$b ?v0)))) :named a9))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$b id$ ?v0) ?v0) :pattern ((fun_app$b id$ ?v0)))) :named a10))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream$)) (= (shd$a (siterate$b ?v0 ?v1)) ?v1)) :named a11))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (shd$ (siterate$ ?v0 ?v1)) ?v1)) :named a12))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream$)) (= (fun_app$ (smap$ ?v0) (siterate$b ?v0 ?v1)) (siterate$b ?v0 (fun_app$a ?v0 ?v1)))) :named a13))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$a (smap$a ?v0) (siterate$ ?v0 ?v1)) (siterate$ ?v0 (fun_app$b ?v0 ?v1)))) :named a14))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream$)) (= (stl$a (siterate$b ?v0 ?v1)) (siterate$b ?v0 (fun_app$a ?v0 ?v1)))) :named a15))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (stl$ (siterate$ ?v0 ?v1)) (siterate$ ?v0 (fun_app$b ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream$)) (= (siterate$b ?v0 ?v1) (sCons$a ?v1 (siterate$b ?v0 (fun_app$a ?v0 ?v1))))) :named a17))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (siterate$ ?v0 ?v1) (sCons$ ?v1 (siterate$ ?v0 (fun_app$b ?v0 ?v1))))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream_stream$)) (= (shift$ (replicate$ ?v0 ?v1) (siterate$a id$a ?v1)) (siterate$a id$a ?v1))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (= (shift$a (replicate$a ?v0 ?v1) (siterate$b id$b ?v1)) (siterate$b id$b ?v1))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 A$)) (= (fun_app$a (shift$b (replicate$b ?v0 ?v1)) (siterate$ id$ ?v1)) (siterate$ id$ ?v1))) :named a21))
(assert (! (forall ((?v0 A_stream_stream_stream$)) (= (fun_app$c (smap$b id$a) ?v0) ?v0)) :named a22))
(assert (! (forall ((?v0 A_stream_stream$)) (= (fun_app$ (smap$ id$b) ?v0) ?v0)) :named a23))
(assert (! (forall ((?v0 A_stream$)) (= (fun_app$a (smap$a id$) ?v0) ?v0)) :named a24))
(assert (! (= (smap$b id$a) id$c) :named a25))
(assert (! (= (smap$ id$b) id$a) :named a26))
(assert (! (= (smap$a id$) id$b) :named a27))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a28))
(assert (! (forall ((?v0 A_stream_list$) (?v1 A_stream_stream$) (?v2 A_stream_stream$)) (= (= (shift$a ?v0 ?v1) (shift$a ?v0 ?v2)) (= ?v1 ?v2))) :named a29))
(assert (! (forall ((?v0 A_list$) (?v1 A_stream$) (?v2 A_stream$)) (= (= (fun_app$a (shift$b ?v0) ?v1) (fun_app$a (shift$b ?v0) ?v2)) (= ?v1 ?v2))) :named a30))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$)) (= (stl$a (fun_app$ (smap$ ?v0) ?v1)) (fun_app$ (smap$ ?v0) (stl$a ?v1)))) :named a31))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (stl$ (fun_app$a (smap$a ?v0) ?v1)) (fun_app$a (smap$a ?v0) (stl$ ?v1)))) :named a32))
(check-sat)
;(get-unsat-core)
