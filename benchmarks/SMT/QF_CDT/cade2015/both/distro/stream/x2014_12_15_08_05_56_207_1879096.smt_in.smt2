; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 260
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_nat_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort A_a_stream_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort Nat_stream_set$ 0)
(declare-sort A_stream_nat_fun$ 0)
(declare-sort Nat_a_stream_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort A_stream_stream_set$ 0)
(declare-sort Nat_stream_bool_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort Nat_stream_stream_set$ 0)
(declare-sort A_stream_stream_bool_fun$ 0)
(declare-sort Nat_stream_stream_stream_set$ 0)
(declare-sort A_stream_a_stream_bool_fun_fun$ 0)
(declare-sort Nat_stream_nat_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_a_stream_stream_bool_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (Nat_stream$ (sCons$a (shd$a Nat$) (stl$a Nat_stream$)))
  (Nat_stream_stream$ (sCons$b (shd$b Nat_stream$) (stl$b Nat_stream_stream$)))
  (A_stream_stream$ (sCons$c (shd$c A_stream$) (stl$c A_stream_stream$)))))
(declare-fun s$ () A_stream$)
(declare-fun x$ () A$)
(declare-fun sa$ () A_stream$)
(declare-fun xa$ () A$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun top$ () Nat_set$)
(declare-fun smap$ (A_stream_a_fun$ A_stream_stream$) A_stream$)
(declare-fun snth$ (A_stream$) Nat_a_fun$)
(declare-fun sset$ (A_stream$) A_set$)
(declare-fun top$a () A_stream_set$)
(declare-fun top$b () A_stream_stream_set$)
(declare-fun top$c () Nat_stream_stream_set$)
(declare-fun top$d () Nat_stream_stream_stream_set$)
(declare-fun top$e () Nat_stream_set$)
(declare-fun top$f () A_set$)
(declare-fun image$ (Nat_a_fun$ Nat_set$) A_set$)
(declare-fun smap$a (A_a_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun smap$b (A_stream_a_stream_fun$ A_stream_stream$) A_stream_stream$)
(declare-fun smap$c (A_a_fun$) A_stream_a_stream_fun$)
(declare-fun smap$d (Nat_a_fun$ Nat_stream$) A_stream$)
(declare-fun smap$e (Nat_a_stream_fun$ Nat_stream$) A_stream_stream$)
(declare-fun smap$f (A_nat_fun$ A_stream$) Nat_stream$)
(declare-fun smap$g (A_stream_nat_fun$ A_stream_stream$) Nat_stream$)
(declare-fun smap$h (Nat_nat_fun$ Nat_stream$) Nat_stream$)
(declare-fun snth$a (Nat_stream_stream$ Nat$) Nat_stream$)
(declare-fun snth$b (A_stream_stream$) Nat_a_stream_fun$)
(declare-fun snth$c (Nat_stream$) Nat_nat_fun$)
(declare-fun sset$a (Nat_stream_stream$) Nat_stream_set$)
(declare-fun sset$b (A_stream_stream$) A_stream_set$)
(declare-fun sset$c (Nat_stream$) Nat_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun thesis$ () Bool)
(declare-fun fun_app$ (Nat_a_fun$ Nat$) A$)
(declare-fun member$a (Nat_stream$ Nat_stream_set$) Bool)
(declare-fun member$b (A_stream$ A_stream_set$) Bool)
(declare-fun member$c (Nat$ Nat_set$) Bool)
(declare-fun member$d (Nat_stream_stream$ Nat_stream_stream_set$) Bool)
(declare-fun member$e (A_stream_stream$ A_stream_stream_set$) Bool)
(declare-fun streams$ (Nat_stream_set$) Nat_stream_stream_set$)
(declare-fun fun_app$a (Nat_a_stream_fun$ Nat$) A_stream$)
(declare-fun fun_app$b (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$c (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$d (A_a_stream_fun$ A$) A_stream$)
(declare-fun fun_app$e (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$f (A_a_fun$ A$) A$)
(declare-fun fun_app$g (A_stream_stream_bool_fun$ A_stream_stream$) Bool)
(declare-fun fun_app$h (A_stream_stream_a_stream_stream_bool_fun_fun$ A_stream_stream$) A_stream_stream_bool_fun$)
(declare-fun fun_app$i (Nat_stream_bool_fun$ Nat_stream$) Bool)
(declare-fun fun_app$j (Nat_stream_nat_stream_bool_fun_fun$ Nat_stream$) Nat_stream_bool_fun$)
(declare-fun fun_app$k (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$l (A_stream_a_stream_bool_fun_fun$ A_stream$) A_stream_bool_fun$)
(declare-fun streams$a (A_stream_set$) A_stream_stream_set$)
(declare-fun streams$b (Nat_set$) Nat_stream_set$)
(declare-fun streams$c (A_set$) A_stream_set$)
(declare-fun streams$d (Nat_stream_stream_set$) Nat_stream_stream_stream_set$)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 Nat$)) (=> (= xa$ (fun_app$ (snth$ (stl$ sa$)) ?v0)) thesis$)) :named a1))
(assert (! (member$ x$ (sset$ s$)) :named a2))
(assert (! (member$ xa$ (sset$ (stl$ sa$))) :named a3))
(assert (! (member$ xa$ (image$ (snth$ (stl$ sa$)) top$)) :named a4))
(assert (! (forall ((?v0 Nat_stream_stream$) (?v1 Nat$)) (member$a (snth$a ?v0 ?v1) (sset$a ?v0))) :named a5))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 Nat$)) (member$b (fun_app$a (snth$b ?v0) ?v1) (sset$b ?v0))) :named a6))
(assert (! (forall ((?v0 A_stream$) (?v1 Nat$)) (member$ (fun_app$ (snth$ ?v0) ?v1) (sset$ ?v0))) :named a7))
(assert (! (forall ((?v0 Nat_stream$) (?v1 Nat_stream_stream$)) (=> (member$a ?v0 (sset$a (stl$b ?v1))) (member$a ?v0 (sset$a ?v1)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_stream$)) (=> (member$c ?v0 (sset$c (stl$a ?v1))) (member$c ?v0 (sset$c ?v1)))) :named a9))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_stream$)) (=> (member$b ?v0 (sset$b (stl$c ?v1))) (member$b ?v0 (sset$b ?v1)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_stream$)) (=> (member$ ?v0 (sset$ (stl$ ?v1))) (member$ ?v0 (sset$ ?v1)))) :named a11))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 Nat$)) (! (= (fun_app$a (snth$b ?v0) (suc$ ?v1)) (fun_app$a (snth$b (stl$c ?v0)) ?v1)) :pattern ((fun_app$a (snth$b ?v0) (suc$ ?v1))))) :named a12))
(assert (! (forall ((?v0 Nat_stream$) (?v1 Nat$)) (! (= (fun_app$b (snth$c ?v0) (suc$ ?v1)) (fun_app$b (snth$c (stl$a ?v0)) ?v1)) :pattern ((fun_app$b (snth$c ?v0) (suc$ ?v1))))) :named a13))
(assert (! (forall ((?v0 A_stream$) (?v1 Nat$)) (! (= (fun_app$ (snth$ ?v0) (suc$ ?v1)) (fun_app$ (snth$ (stl$ ?v0)) ?v1)) :pattern ((fun_app$ (snth$ ?v0) (suc$ ?v1))))) :named a14))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (fun_app$ (snth$ (smap$ ?v0 ?v1)) ?v2) (fun_app$c ?v0 (fun_app$a (snth$b ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (fun_app$a (snth$b (smap$a ?v0 ?v1)) ?v2) (fun_app$d ?v0 (fun_app$ (snth$ ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (fun_app$a (snth$b (smap$b ?v0 ?v1)) ?v2) (fun_app$e ?v0 (fun_app$a (snth$b ?v1) ?v2)))) :named a17))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (fun_app$ (snth$ (fun_app$e (smap$c ?v0) ?v1)) ?v2) (fun_app$f ?v0 (fun_app$ (snth$ ?v1) ?v2)))) :named a18))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$)) (= (stl$ (smap$ ?v0 ?v1)) (smap$ ?v0 (stl$c ?v1)))) :named a19))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_stream$)) (= (stl$ (smap$d ?v0 ?v1)) (smap$d ?v0 (stl$a ?v1)))) :named a20))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$)) (= (stl$c (smap$a ?v0 ?v1)) (smap$a ?v0 (stl$ ?v1)))) :named a21))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$)) (= (stl$c (smap$b ?v0 ?v1)) (smap$b ?v0 (stl$c ?v1)))) :named a22))
(assert (! (forall ((?v0 Nat_a_stream_fun$) (?v1 Nat_stream$)) (= (stl$c (smap$e ?v0 ?v1)) (smap$e ?v0 (stl$a ?v1)))) :named a23))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A_stream$)) (= (stl$a (smap$f ?v0 ?v1)) (smap$f ?v0 (stl$ ?v1)))) :named a24))
(assert (! (forall ((?v0 A_stream_nat_fun$) (?v1 A_stream_stream$)) (= (stl$a (smap$g ?v0 ?v1)) (smap$g ?v0 (stl$c ?v1)))) :named a25))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_stream$)) (= (stl$a (smap$h ?v0 ?v1)) (smap$h ?v0 (stl$a ?v1)))) :named a26))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (stl$ (fun_app$e (smap$c ?v0) ?v1)) (fun_app$e (smap$c ?v0) (stl$ ?v1)))) :named a27))
(assert (! (forall ((?v0 Nat_stream_stream$) (?v1 Nat_stream_set$)) (=> (member$d ?v0 (streams$ ?v1)) (member$d (stl$b ?v0) (streams$ ?v1)))) :named a28))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$)) (=> (member$e ?v0 (streams$a ?v1)) (member$e (stl$c ?v0) (streams$a ?v1)))) :named a29))
(assert (! (forall ((?v0 Nat_stream$) (?v1 Nat_set$)) (=> (member$a ?v0 (streams$b ?v1)) (member$a (stl$a ?v0) (streams$b ?v1)))) :named a30))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$)) (=> (member$b ?v0 (streams$c ?v1)) (member$b (stl$ ?v0) (streams$c ?v1)))) :named a31))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream$)) (=> (and (= (shd$c ?v0) (shd$c ?v1)) (= (stl$c ?v0) (stl$c ?v1))) (= ?v0 ?v1))) :named a32))
(assert (! (forall ((?v0 Nat_stream$) (?v1 Nat_stream$)) (=> (and (= (shd$a ?v0) (shd$a ?v1)) (= (stl$a ?v0) (stl$a ?v1))) (= ?v0 ?v1))) :named a33))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$)) (=> (and (= (shd$ ?v0) (shd$ ?v1)) (= (stl$ ?v0) (stl$ ?v1))) (= ?v0 ?v1))) :named a34))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream$)) (=> (and (fun_app$g (fun_app$h ?v0 ?v1) ?v2) (forall ((?v3 A_stream_stream$) (?v4 A_stream_stream$)) (=> (fun_app$g (fun_app$h ?v0 ?v3) ?v4) (and (= (shd$c ?v3) (shd$c ?v4)) (or (fun_app$g (fun_app$h ?v0 (stl$c ?v3)) (stl$c ?v4)) (= (stl$c ?v3) (stl$c ?v4))))))) (= ?v1 ?v2))) :named a35))
(assert (! (forall ((?v0 Nat_stream_nat_stream_bool_fun_fun$) (?v1 Nat_stream$) (?v2 Nat_stream$)) (=> (and (fun_app$i (fun_app$j ?v0 ?v1) ?v2) (forall ((?v3 Nat_stream$) (?v4 Nat_stream$)) (=> (fun_app$i (fun_app$j ?v0 ?v3) ?v4) (and (= (shd$a ?v3) (shd$a ?v4)) (or (fun_app$i (fun_app$j ?v0 (stl$a ?v3)) (stl$a ?v4)) (= (stl$a ?v3) (stl$a ?v4))))))) (= ?v1 ?v2))) :named a36))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (=> (and (fun_app$k (fun_app$l ?v0 ?v1) ?v2) (forall ((?v3 A_stream$) (?v4 A_stream$)) (=> (fun_app$k (fun_app$l ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (or (fun_app$k (fun_app$l ?v0 (stl$ ?v3)) (stl$ ?v4)) (= (stl$ ?v3) (stl$ ?v4))))))) (= ?v1 ?v2))) :named a37))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream$)) (=> (and (fun_app$g (fun_app$h ?v0 ?v1) ?v2) (forall ((?v3 A_stream_stream$) (?v4 A_stream_stream$)) (=> (fun_app$g (fun_app$h ?v0 ?v3) ?v4) (and (= (shd$c ?v3) (shd$c ?v4)) (fun_app$g (fun_app$h ?v0 (stl$c ?v3)) (stl$c ?v4)))))) (= ?v1 ?v2))) :named a38))
(assert (! (forall ((?v0 Nat_stream_nat_stream_bool_fun_fun$) (?v1 Nat_stream$) (?v2 Nat_stream$)) (=> (and (fun_app$i (fun_app$j ?v0 ?v1) ?v2) (forall ((?v3 Nat_stream$) (?v4 Nat_stream$)) (=> (fun_app$i (fun_app$j ?v0 ?v3) ?v4) (and (= (shd$a ?v3) (shd$a ?v4)) (fun_app$i (fun_app$j ?v0 (stl$a ?v3)) (stl$a ?v4)))))) (= ?v1 ?v2))) :named a39))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (=> (and (fun_app$k (fun_app$l ?v0 ?v1) ?v2) (forall ((?v3 A_stream$) (?v4 A_stream$)) (=> (fun_app$k (fun_app$l ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (fun_app$k (fun_app$l ?v0 (stl$ ?v3)) (stl$ ?v4)))))) (= ?v1 ?v2))) :named a40))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_stream$)) (! (= (stl$c (sCons$c ?v0 ?v1)) ?v1) :pattern ((sCons$c ?v0 ?v1)))) :named a41))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_stream$)) (! (= (stl$a (sCons$a ?v0 ?v1)) ?v1) :pattern ((sCons$a ?v0 ?v1)))) :named a42))
(assert (! (forall ((?v0 A$) (?v1 A_stream$)) (! (= (stl$ (sCons$ ?v0 ?v1)) ?v1) :pattern ((sCons$ ?v0 ?v1)))) :named a43))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a44))
(assert (! (= (streams$a top$a) top$b) :named a45))
(assert (! (= (streams$d top$c) top$d) :named a46))
(assert (! (= (streams$ top$e) top$c) :named a47))
(assert (! (= (streams$c top$f) top$a) :named a48))
(assert (! (= (streams$b top$) top$e) :named a49))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (shd$ (fun_app$e (smap$c ?v0) ?v1)) (fun_app$f ?v0 (shd$ ?v1)))) :named a50))
(check-sat)
;(get-unsat-core)
