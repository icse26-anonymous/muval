; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 409
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-datatypes () ((Nibble$ (nibble0$) (nibble1$) (nibble2$) (nibble3$) (nibble4$) (nibble5$) (nibble6$) (nibble7$) (nibble8$) (nibble9$) (nibbleA$) (nibbleB$) (nibbleC$) (nibbleD$) (nibbleE$) (nibbleF$))
  (Char$ (char$ (select$ Nibble$) (selecta$ Nibble$)))))
(declare-fun m$ () Nat$)
(declare-fun p$ (A$) Bool)
(declare-fun s$ () A_stream$)
(declare-fun ma$ () Nat$)
(declare-fun sa$ () A_stream$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun snth$ (A_stream$) Nat_a_fun$)
(declare-fun zero$ () Nat$)
(declare-fun fun_app$ (Nat_a_fun$ Nat$) A$)
(declare-fun less_eq$ (Nat$) Nat_bool_fun$)
(declare-fun fun_app$a (Nat_bool_fun$ Nat$) Bool)
(declare-fun size_bool$ (Bool) Nat$)
(declare-fun size_char$ (Char$) Nat$)
(assert (! (not (not (p$ (fun_app$ (snth$ sa$) zero$)))) :named a0))
(assert (! (forall ((?v0 Nat$)) (=> (p$ (fun_app$ (snth$ sa$) ?v0)) (fun_app$a (less_eq$ (suc$ ma$)) ?v0))) :named a1))
(assert (! (exists ((?v0 Nat$)) (p$ (fun_app$ (snth$ s$) ?v0))) :named a2))
(assert (! (p$ (fun_app$ (snth$ sa$) (suc$ ma$))) :named a3))
(assert (! (p$ (fun_app$ (snth$ s$) m$)) :named a4))
(assert (! (forall ((?v0 Nat$)) (=> (p$ (fun_app$ (snth$ s$) ?v0)) (fun_app$a (less_eq$ m$) ?v0))) :named a5))
(assert (! (= zero$ zero$) :named a6))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a7))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a8))
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$ (snth$ ?v0) zero$) (shd$ ?v0)) :pattern ((snth$ ?v0)))) :named a9))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$a (less_eq$ ?v0) zero$) (= ?v0 zero$)) :pattern ((less_eq$ ?v0)))) :named a10))
(assert (! (forall ((?v0 Nat$)) (fun_app$a (less_eq$ zero$) ?v0)) :named a11))
(assert (! (forall ((?v0 Char$)) (! (= (size_char$ ?v0) zero$) :pattern ((size_char$ ?v0)))) :named a12))
(assert (! (= (size_bool$ true) zero$) :named a13))
(assert (! (= (size_bool$ false) zero$) :named a14))
(assert (! (= (suc$ ma$) (suc$ ma$)) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a16))
(check-sat)
;(get-unsat-core)
