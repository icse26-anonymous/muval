; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 292
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort A_a_stream_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_stream_stream_set$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_stream_stream_stream_set$ 0)
(declare-sort Nat_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (A_stream_stream$ (sCons$a (shd$a A_stream$) (stl$a A_stream_stream$)))
  (A_stream_stream_stream$ (sCons$b (shd$b A_stream_stream$) (stl$b A_stream_stream_stream$)))))
(declare-fun f$ () A_a_fun$)
(declare-fun n$ () Nat$)
(declare-fun x$ () A$)
(declare-fun smap$ (A_stream_a_fun$ A_stream_stream$) A_stream$)
(declare-fun snth$ (A_stream$ Nat$) A$)
(declare-fun sset$ (A_stream_stream_stream$) A_stream_stream_set$)
(declare-fun sdrop$ (Nat$ A_stream_stream$) A_stream_stream$)
(declare-fun smap$a (A_a_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun smap$b (A_stream_a_stream_fun$ A_stream_stream$) A_stream_stream$)
(declare-fun smap$c (A_a_fun$) A_stream_a_stream_fun$)
(declare-fun snth$a (A_stream_stream$ Nat$) A_stream$)
(declare-fun snth$b (A_stream_stream_stream$ Nat$) A_stream_stream$)
(declare-fun sset$a (A_stream_stream$) A_stream_set$)
(declare-fun sset$b (A_stream$) A_set$)
(declare-fun compow$ () Nat_a_a_fun_a_a_fun_fun_fun$)
(declare-fun funpow$ () Nat_a_a_fun_a_a_fun_fun_fun$)
(declare-fun member$ (A_stream_stream_stream$ A_stream_stream_stream_set$) Bool)
(declare-fun sdrop$a (Nat$) A_stream_a_stream_fun$)
(declare-fun fun_app$ (A_a_stream_fun$ A$) A_stream$)
(declare-fun member$a (A_stream_stream$ A_stream_stream_set$) Bool)
(declare-fun member$b (A_stream$ A_stream_set$) Bool)
(declare-fun member$c (A$ A_set$) Bool)
(declare-fun streams$ (A_stream_stream_set$) A_stream_stream_stream_set$)
(declare-fun fun_app$a (A_a_fun$ A$) A$)
(declare-fun fun_app$b (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$c (Nat_a_a_fun_a_a_fun_fun_fun$ Nat$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$d (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$e (A_bool_fun$ A$) Bool)
(declare-fun fun_app$f (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$g (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun siterate$ (A_a_fun$) A_a_stream_fun$)
(declare-fun streams$a (A_stream_set$) A_stream_stream_set$)
(declare-fun streams$b (A_set$) A_stream_set$)
(declare-fun stream_all$ (A_stream_bool_fun$ A_stream_stream$) Bool)
(declare-fun stream_all$a (A_bool_fun$) A_stream_bool_fun$)
(assert (! (not (= (snth$ (fun_app$ (siterate$ f$) x$) n$) (fun_app$a (fun_app$b (fun_app$c compow$ n$) f$) x$))) :named a0))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat$) (?v2 A$)) (= (fun_app$a ?v0 (fun_app$a (fun_app$b (fun_app$c compow$ ?v1) ?v0) ?v2)) (fun_app$a (fun_app$b (fun_app$c compow$ ?v1) ?v0) (fun_app$a ?v0 ?v2)))) :named a1))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream_stream$)) (= (stream_all$ ?v0 ?v1) (forall ((?v2 Nat$)) (fun_app$d ?v0 (snth$a ?v1 ?v2))))) :named a2))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (= (fun_app$d (stream_all$a ?v0) ?v1) (forall ((?v2 Nat$)) (fun_app$e ?v0 (snth$ ?v1 ?v2))))) :named a3))
(assert (! (= funpow$ compow$) :named a4))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (shd$ (fun_app$ (siterate$ ?v0) ?v1)) ?v1)) :named a5))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (snth$ (smap$ ?v0 ?v1) ?v2) (fun_app$f ?v0 (snth$a ?v1 ?v2)))) :named a6))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$a (smap$a ?v0 ?v1) ?v2) (fun_app$ ?v0 (snth$ ?v1 ?v2)))) :named a7))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (snth$a (smap$b ?v0 ?v1) ?v2) (fun_app$g ?v0 (snth$a ?v1 ?v2)))) :named a8))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$ (fun_app$g (smap$c ?v0) ?v1) ?v2) (fun_app$a ?v0 (snth$ ?v1 ?v2)))) :named a9))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (stl$ (fun_app$ (siterate$ ?v0) ?v1)) (fun_app$ (siterate$ ?v0) (fun_app$a ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (fun_app$ (siterate$ ?v0) ?v1) (sCons$ ?v1 (fun_app$ (siterate$ ?v0) (fun_app$a ?v0 ?v1))))) :named a11))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 A_stream_stream_set$)) (= (member$ ?v0 (streams$ ?v1)) (forall ((?v2 Nat$)) (member$a (snth$b ?v0 ?v2) ?v1)))) :named a12))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$)) (= (member$a ?v0 (streams$a ?v1)) (forall ((?v2 Nat$)) (member$b (snth$a ?v0 ?v2) ?v1)))) :named a13))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$)) (= (member$b ?v0 (streams$b ?v1)) (forall ((?v2 Nat$)) (member$c (snth$ ?v0 ?v2) ?v1)))) :named a14))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 A_stream_stream_set$) (?v2 Nat$)) (=> (member$ ?v0 (streams$ ?v1)) (member$a (snth$b ?v0 ?v2) ?v1))) :named a15))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$) (?v2 Nat$)) (=> (member$a ?v0 (streams$a ?v1)) (member$b (snth$a ?v0 ?v2) ?v1))) :named a16))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$) (?v2 Nat$)) (=> (member$b ?v0 (streams$b ?v1)) (member$c (snth$ ?v0 ?v2) ?v1))) :named a17))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 Nat$)) (member$a (snth$b ?v0 ?v1) (sset$ ?v0))) :named a18))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 Nat$)) (member$b (snth$a ?v0 ?v1) (sset$a ?v0))) :named a19))
(assert (! (forall ((?v0 A_stream$) (?v1 Nat$)) (member$c (snth$ ?v0 ?v1) (sset$b ?v0))) :named a20))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$) (?v2 A_stream_stream$)) (= (= (smap$a ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$ ?v0 (snth$ ?v1 ?v3)) (snth$a ?v2 ?v3))))) :named a21))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$) (?v2 A_stream$)) (= (= (smap$ ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$f ?v0 (snth$a ?v1 ?v3)) (snth$ ?v2 ?v3))))) :named a22))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream$)) (= (= (smap$b ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$g ?v0 (snth$a ?v1 ?v3)) (snth$a ?v2 ?v3))))) :named a23))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (= (fun_app$g (smap$c ?v0) ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$a ?v0 (snth$ ?v1 ?v3)) (snth$ ?v2 ?v3))))) :named a24))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream_stream$)) (= (shd$a (sdrop$ ?v0 ?v1)) (snth$a ?v1 ?v0))) :named a25))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (= (shd$ (fun_app$g (sdrop$a ?v0) ?v1)) (snth$ ?v1 ?v0))) :named a26))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a27))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (stl$ (fun_app$g (smap$c ?v0) ?v1)) (fun_app$g (smap$c ?v0) (stl$ ?v1)))) :named a28))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (shd$ (fun_app$g (smap$c ?v0) ?v1)) (fun_app$a ?v0 (shd$ ?v1)))) :named a29))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (fun_app$g (sdrop$a ?v0) (fun_app$g (smap$c ?v1) ?v2)) (fun_app$g (smap$c ?v1) (fun_app$g (sdrop$a ?v0) ?v2)))) :named a30))
(assert (! (forall ((?v0 A_stream$)) (= (sCons$ (shd$ ?v0) (stl$ ?v0)) ?v0)) :named a31))
(check-sat)
;(get-unsat-core)
