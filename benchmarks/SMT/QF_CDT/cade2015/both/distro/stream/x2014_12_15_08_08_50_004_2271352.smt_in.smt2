; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 226
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_set_fun$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort A_a_stream_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort A_a_stream_set_fun$ 0)
(declare-sort A_stream_a_set_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_stream_a_stream_set_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (A_stream_stream$ (sCons$a (shd$a A_stream$) (stl$a A_stream_stream$)))))
(declare-fun x$ () A$)
(declare-fun ss$ () A_stream_stream$)
(declare-fun smap$ (A_stream_a_stream_fun$ A_stream_stream$) A_stream_stream$)
(declare-fun snth$ (A_stream_stream$ Nat$) A_stream$)
(declare-fun sset$ (A_stream_stream$) A_stream_set$)
(declare-fun smap$a (A_stream_a_fun$ A_stream_stream$) A_stream$)
(declare-fun smap$b (A_a_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun smap$c (A_a_fun$) A_stream_a_stream_fun$)
(declare-fun snth$a (A_stream$ Nat$) A$)
(declare-fun sset$a () A_stream_a_set_fun$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun smerge$ (A_stream_stream$) A_stream$)
(declare-fun fun_app$ (A_stream_a_set_fun$ A_stream$) A_set$)
(declare-fun member$a (A_stream$ A_stream_set$) Bool)
(declare-fun smember$ (A_stream$ A_stream_stream$) Bool)
(declare-fun fun_app$a (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$b (A_a_stream_set_fun$ A$) A_stream_set$)
(declare-fun fun_app$c (A_stream_a_stream_set_fun$ A_stream$) A_stream_set$)
(declare-fun fun_app$d (A_bool_fun$ A$) Bool)
(declare-fun fun_app$e (A_a_set_fun$ A$) A_set$)
(declare-fun fun_app$f (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$g (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$h (A_a_stream_fun$ A$) A_stream$)
(declare-fun fun_app$i (A_a_fun$ A$) A$)
(declare-fun smember$a (A$) A_stream_bool_fun$)
(declare-fun supremum$ (A_stream_set$ A_stream_a_set_fun$) A_set$)
(declare-fun supremum$a (A_set$ A_a_stream_set_fun$) A_stream_set$)
(declare-fun supremum$b (A_stream_set$ A_stream_a_stream_set_fun$) A_stream_set$)
(declare-fun supremum$c (A_set$ A_a_set_fun$) A_set$)
(assert (! (not (member$ x$ (supremum$ (sset$ ss$) sset$a))) :named a0))
(assert (! (member$ x$ (fun_app$ sset$a (smerge$ ss$))) :named a1))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (exists ((?v3 A_stream$)) (and (member$a ?v3 (supremum$a ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (exists ((?v4 A_stream$)) (and (member$a ?v4 (fun_app$b ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a2))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (exists ((?v3 A_stream$)) (and (member$a ?v3 (supremum$b ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A_stream$)) (and (member$a ?v3 ?v0) (exists ((?v4 A_stream$)) (and (member$a ?v4 (fun_app$c ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a3))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$ ?v3 (supremum$c ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (exists ((?v4 A$)) (and (member$ ?v4 (fun_app$e ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a4))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (exists ((?v3 A_stream$)) (and (member$a ?v3 ?v0) (exists ((?v4 A$)) (and (member$ ?v4 (fun_app$ ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a5))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (exists ((?v3 A_stream$)) (and (member$a ?v3 (supremum$a ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (exists ((?v4 A_stream$)) (and (member$a ?v4 (fun_app$b ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a6))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (exists ((?v3 A_stream$)) (and (member$a ?v3 (supremum$b ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A_stream$)) (and (member$a ?v3 ?v0) (exists ((?v4 A_stream$)) (and (member$a ?v4 (fun_app$c ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a7))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$ ?v3 (supremum$c ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (exists ((?v4 A$)) (and (member$ ?v4 (fun_app$e ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a8))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (exists ((?v3 A_stream$)) (and (member$a ?v3 ?v0) (exists ((?v4 A$)) (and (member$ ?v4 (fun_app$ ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a9))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (forall ((?v3 A_stream$)) (=> (member$a ?v3 (supremum$a ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A_stream$)) (=> (member$a ?v4 (fun_app$b ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a10))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (forall ((?v3 A_stream$)) (=> (member$a ?v3 (supremum$b ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A_stream$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A_stream$)) (=> (member$a ?v4 (fun_app$c ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a11))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$ ?v3 (supremum$c ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$e ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a12))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (forall ((?v3 A_stream$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$ ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a13))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (forall ((?v3 A_stream$)) (=> (member$a ?v3 (supremum$a ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A_stream$)) (=> (member$a ?v4 (fun_app$b ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a14))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (forall ((?v3 A_stream$)) (=> (member$a ?v3 (supremum$b ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A_stream$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A_stream$)) (=> (member$a ?v4 (fun_app$c ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a15))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$ ?v3 (supremum$c ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$e ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a16))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (forall ((?v3 A_stream$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$ ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a17))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_stream$)) (! (= (smember$ ?v0 ?v1) (member$a ?v0 (sset$ ?v1))) :pattern ((smember$ ?v0 ?v1)))) :named a18))
(assert (! (forall ((?v0 A$) (?v1 A_stream$)) (! (= (fun_app$a (smember$a ?v0) ?v1) (member$ ?v0 (fun_app$ sset$a ?v1))) :pattern ((fun_app$a (smember$a ?v0) ?v1)))) :named a19))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_set$) (?v2 A_stream_a_stream_set_fun$) (?v3 A_stream_a_stream_set_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_stream$)) (=> (member$a ?v4 ?v1) (= (fun_app$c ?v2 ?v4) (fun_app$c ?v3 ?v4))))) (= (supremum$b ?v0 ?v2) (supremum$b ?v1 ?v3)))) :named a20))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_stream_set_fun$) (?v3 A_a_stream_set_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 ?v1) (= (fun_app$b ?v2 ?v4) (fun_app$b ?v3 ?v4))))) (= (supremum$a ?v0 ?v2) (supremum$a ?v1 ?v3)))) :named a21))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_set_fun$) (?v3 A_a_set_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 ?v1) (= (fun_app$e ?v2 ?v4) (fun_app$e ?v3 ?v4))))) (= (supremum$c ?v0 ?v2) (supremum$c ?v1 ?v3)))) :named a22))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_set$) (?v2 A_stream_a_set_fun$) (?v3 A_stream_a_set_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_stream$)) (=> (member$a ?v4 ?v1) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (supremum$ ?v0 ?v2) (supremum$ ?v1 ?v3)))) :named a23))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 Nat$)) (member$a (snth$ ?v0 ?v1) (sset$ ?v0))) :named a24))
(assert (! (forall ((?v0 A_stream$) (?v1 Nat$)) (member$ (snth$a ?v0 ?v1) (fun_app$ sset$a ?v0))) :named a25))
(assert (! (forall ((?v0 A_stream_stream$)) (member$a (shd$a ?v0) (sset$ ?v0))) :named a26))
(assert (! (forall ((?v0 A_stream$)) (member$ (shd$ ?v0) (fun_app$ sset$a ?v0))) :named a27))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream$) (?v2 A_stream_a_stream_fun$) (?v3 A_stream_a_stream_fun$)) (=> (and (forall ((?v4 A_stream$) (?v5 A_stream$)) (=> (and (member$a ?v4 (sset$ ?v0)) (and (member$a ?v5 (sset$ ?v1)) (= (fun_app$f ?v2 ?v4) (fun_app$f ?v3 ?v5)))) (= ?v4 ?v5))) (= (smap$ ?v2 ?v0) (smap$ ?v3 ?v1))) (= ?v0 ?v1))) :named a28))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream$) (?v2 A_stream_a_fun$) (?v3 A_stream_a_fun$)) (=> (and (forall ((?v4 A_stream$) (?v5 A_stream$)) (=> (and (member$a ?v4 (sset$ ?v0)) (and (member$a ?v5 (sset$ ?v1)) (= (fun_app$g ?v2 ?v4) (fun_app$g ?v3 ?v5)))) (= ?v4 ?v5))) (= (smap$a ?v2 ?v0) (smap$a ?v3 ?v1))) (= ?v0 ?v1))) :named a29))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_stream_fun$) (?v3 A_a_stream_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$ ?v4 (fun_app$ sset$a ?v0)) (and (member$ ?v5 (fun_app$ sset$a ?v1)) (= (fun_app$h ?v2 ?v4) (fun_app$h ?v3 ?v5)))) (= ?v4 ?v5))) (= (smap$b ?v2 ?v0) (smap$b ?v3 ?v1))) (= ?v0 ?v1))) :named a30))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$ ?v4 (fun_app$ sset$a ?v0)) (and (member$ ?v5 (fun_app$ sset$a ?v1)) (= (fun_app$i ?v2 ?v4) (fun_app$i ?v3 ?v5)))) (= ?v4 ?v5))) (= (fun_app$f (smap$c ?v2) ?v0) (fun_app$f (smap$c ?v3) ?v1))) (= ?v0 ?v1))) :named a31))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_a_stream_fun$) (?v2 A_stream_a_stream_fun$)) (=> (forall ((?v3 A_stream$)) (=> (member$a ?v3 (sset$ ?v0)) (= (fun_app$f ?v1 ?v3) (fun_app$f ?v2 ?v3)))) (= (smap$ ?v1 ?v0) (smap$ ?v2 ?v0)))) :named a32))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_a_fun$) (?v2 A_stream_a_fun$)) (=> (forall ((?v3 A_stream$)) (=> (member$a ?v3 (sset$ ?v0)) (= (fun_app$g ?v1 ?v3) (fun_app$g ?v2 ?v3)))) (= (smap$a ?v1 ?v0) (smap$a ?v2 ?v0)))) :named a33))
(assert (! (forall ((?v0 A_stream$) (?v1 A_a_stream_fun$) (?v2 A_a_stream_fun$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 (fun_app$ sset$a ?v0)) (= (fun_app$h ?v1 ?v3) (fun_app$h ?v2 ?v3)))) (= (smap$b ?v1 ?v0) (smap$b ?v2 ?v0)))) :named a34))
(assert (! (forall ((?v0 A_stream$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 (fun_app$ sset$a ?v0)) (= (fun_app$i ?v1 ?v3) (fun_app$i ?v2 ?v3)))) (= (fun_app$f (smap$c ?v1) ?v0) (fun_app$f (smap$c ?v2) ?v0)))) :named a35))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream$) (?v2 A_stream_a_stream_fun$) (?v3 A_stream_a_stream_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_stream$)) (=> (member$a ?v4 (sset$ ?v1)) (= (fun_app$f ?v2 ?v4) (fun_app$f ?v3 ?v4))))) (= (smap$ ?v2 ?v0) (smap$ ?v3 ?v1)))) :named a36))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream$) (?v2 A_stream_a_fun$) (?v3 A_stream_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_stream$)) (=> (member$a ?v4 (sset$ ?v1)) (= (fun_app$g ?v2 ?v4) (fun_app$g ?v3 ?v4))))) (= (smap$a ?v2 ?v0) (smap$a ?v3 ?v1)))) :named a37))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_stream_fun$) (?v3 A_a_stream_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$ sset$a ?v1)) (= (fun_app$h ?v2 ?v4) (fun_app$h ?v3 ?v4))))) (= (smap$b ?v2 ?v0) (smap$b ?v3 ?v1)))) :named a38))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$ sset$a ?v1)) (= (fun_app$i ?v2 ?v4) (fun_app$i ?v3 ?v4))))) (= (fun_app$f (smap$c ?v2) ?v0) (fun_app$f (smap$c ?v3) ?v1)))) :named a39))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_stream$)) (=> (member$a ?v0 (sset$ (stl$a ?v1))) (member$a ?v0 (sset$ ?v1)))) :named a40))
(assert (! (forall ((?v0 A$) (?v1 A_stream$)) (=> (member$ ?v0 (fun_app$ sset$a (stl$ ?v1))) (member$ ?v0 (fun_app$ sset$a ?v1)))) :named a41))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (stl$ (fun_app$f (smap$c ?v0) ?v1)) (fun_app$f (smap$c ?v0) (stl$ ?v1)))) :named a42))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$)) (= (stl$ (smap$a ?v0 ?v1)) (smap$a ?v0 (stl$a ?v1)))) :named a43))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$)) (= (stl$a (smap$b ?v0 ?v1)) (smap$b ?v0 (stl$ ?v1)))) :named a44))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$)) (= (stl$a (smap$ ?v0 ?v1)) (smap$ ?v0 (stl$a ?v1)))) :named a45))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (shd$ (fun_app$f (smap$c ?v0) ?v1)) (fun_app$i ?v0 (shd$ ?v1)))) :named a46))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$)) (= (shd$ (smap$a ?v0 ?v1)) (fun_app$g ?v0 (shd$a ?v1)))) :named a47))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$)) (= (shd$a (smap$b ?v0 ?v1)) (fun_app$h ?v0 (shd$ ?v1)))) :named a48))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$)) (= (shd$a (smap$ ?v0 ?v1)) (fun_app$f ?v0 (shd$a ?v1)))) :named a49))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$a (fun_app$f (smap$c ?v0) ?v1) ?v2) (fun_app$i ?v0 (snth$a ?v1 ?v2)))) :named a50))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (snth$a (smap$a ?v0 ?v1) ?v2) (fun_app$g ?v0 (snth$ ?v1 ?v2)))) :named a51))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$ (smap$b ?v0 ?v1) ?v2) (fun_app$h ?v0 (snth$a ?v1 ?v2)))) :named a52))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (snth$ (smap$ ?v0 ?v1) ?v2) (fun_app$f ?v0 (snth$ ?v1 ?v2)))) :named a53))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (= (fun_app$f (smap$c ?v0) ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$i ?v0 (snth$a ?v1 ?v3)) (snth$a ?v2 ?v3))))) :named a54))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$) (?v2 A_stream_stream$)) (= (= (smap$b ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$h ?v0 (snth$a ?v1 ?v3)) (snth$ ?v2 ?v3))))) :named a55))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$) (?v2 A_stream$)) (= (= (smap$a ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$g ?v0 (snth$ ?v1 ?v3)) (snth$a ?v2 ?v3))))) :named a56))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream$)) (= (= (smap$ ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$f ?v0 (snth$ ?v1 ?v3)) (snth$ ?v2 ?v3))))) :named a57))
(check-sat)
;(get-unsat-core)
