; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 399
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_nat_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (Nat_stream$ (sCons$a (shd$a Nat$) (stl$a Nat_stream$)))))
(declare-fun s$ () A_stream$)
(declare-fun suc$ () Nat_nat_fun$)
(declare-fun smap$ (Nat_a_fun$ Nat_stream$) A_stream$)
(declare-fun snth$ (A_stream$) Nat_a_fun$)
(declare-fun zero$ () Nat$)
(declare-fun smap$a (A_nat_fun$ A_stream$) Nat_stream$)
(declare-fun smap$b (Nat_nat_fun$ Nat_stream$) Nat_stream$)
(declare-fun smap$c (A_a_fun$ A_stream$) A_stream$)
(declare-fun snth$a (Nat_stream$) Nat_nat_fun$)
(declare-fun fun_app$ (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$a (A_nat_fun$ A$) Nat$)
(declare-fun fun_app$b (Nat_a_fun$ Nat$) A$)
(declare-fun fun_app$c (A_a_fun$ A$) A$)
(declare-fun fun_app$d (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$e (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun siterate$ (Nat_nat_fun$ Nat$) Nat_stream$)
(declare-fun siterate$a (A_a_fun$ A$) A_stream$)
(assert (! (not (= s$ (smap$ (snth$ s$) (siterate$ suc$ zero$)))) :named a0))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (fun_app$ (snth$a (smap$a ?v0 ?v1)) ?v2) (fun_app$a ?v0 (fun_app$b (snth$ ?v1) ?v2)))) :named a1))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_stream$) (?v2 Nat$)) (= (fun_app$ (snth$a (smap$b ?v0 ?v1)) ?v2) (fun_app$ ?v0 (fun_app$ (snth$a ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (fun_app$b (snth$ (smap$c ?v0 ?v1)) ?v2) (fun_app$c ?v0 (fun_app$b (snth$ ?v1) ?v2)))) :named a3))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_stream$) (?v2 Nat$)) (= (fun_app$b (snth$ (smap$ ?v0 ?v1)) ?v2) (fun_app$b ?v0 (fun_app$ (snth$a ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (= (smap$c ?v0 (siterate$a ?v0 ?v1)) (siterate$a ?v0 (fun_app$c ?v0 ?v1)))) :named a5))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$)) (= (smap$b ?v0 (siterate$ ?v0 ?v1)) (siterate$ ?v0 (fun_app$ ?v0 ?v1)))) :named a6))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A_stream$) (?v2 Nat_stream$)) (= (= (smap$a ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$a ?v0 (fun_app$b (snth$ ?v1) ?v3)) (fun_app$ (snth$a ?v2) ?v3))))) :named a7))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_stream$) (?v2 Nat_stream$)) (= (= (smap$b ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$ ?v0 (fun_app$ (snth$a ?v1) ?v3)) (fun_app$ (snth$a ?v2) ?v3))))) :named a8))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (= (smap$c ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$c ?v0 (fun_app$b (snth$ ?v1) ?v3)) (fun_app$b (snth$ ?v2) ?v3))))) :named a9))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_stream$) (?v2 A_stream$)) (= (= (smap$ ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$b ?v0 (fun_app$ (snth$a ?v1) ?v3)) (fun_app$b (snth$ ?v2) ?v3))))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$ suc$ ?v0) (fun_app$ suc$ ?v1)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (fun_app$ suc$ ?v0) (fun_app$ suc$ ?v1)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Nat$)) (=> (= ?v0 (fun_app$ suc$ ?v1)) false))) false)) :named a13))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (forall ((?v1 Nat$)) (=> (= ?v0 (fun_app$ suc$ ?v1)) false))) false)) :named a14))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$d (fun_app$e ?v0 ?v3) zero$)) (and (forall ((?v3 Nat$)) (fun_app$d (fun_app$e ?v0 zero$) (fun_app$ suc$ ?v3))) (forall ((?v3 Nat$) (?v4 Nat$)) (=> (fun_app$d (fun_app$e ?v0 ?v3) ?v4) (fun_app$d (fun_app$e ?v0 (fun_app$ suc$ ?v3)) (fun_app$ suc$ ?v4)))))) (fun_app$d (fun_app$e ?v0 ?v1) ?v2))) :named a15))
(assert (! (forall ((?v0 Nat$)) (=> (= (fun_app$ suc$ ?v0) zero$) false)) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (=> (= ?v0 (fun_app$ suc$ ?v1)) (not (= ?v0 zero$)))) :named a17))
(assert (! (forall ((?v0 Nat$)) (=> (= zero$ (fun_app$ suc$ ?v0)) false)) :named a18))
(assert (! (forall ((?v0 Nat$)) (=> (not (= ?v0 zero$)) (exists ((?v1 Nat$)) (= ?v0 (fun_app$ suc$ ?v1))))) :named a19))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a20))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a21))
(check-sat)
;(get-unsat-core)
