; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 101
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort A_a_stream_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort A_stream_stream_set$ 0)
(declare-sort A_a_stream_stream_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_stream_stream_a_fun$ 0)
(declare-sort A_a_stream_bool_fun_fun$ 0)
(declare-sort A_stream_a_bool_fun_fun$ 0)
(declare-sort A_stream_stream_bool_fun$ 0)
(declare-sort A_stream_stream_stream_set$ 0)
(declare-sort A_stream_a_stream_stream_fun$ 0)
(declare-sort A_stream_stream_a_stream_fun$ 0)
(declare-sort A_a_stream_stream_bool_fun_fun$ 0)
(declare-sort A_stream_a_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_a_bool_fun_fun$ 0)
(declare-sort A_stream_stream_stream_bool_fun$ 0)
(declare-sort A_stream_stream_stream_stream_set$ 0)
(declare-sort A_stream_stream_a_stream_stream_fun$ 0)
(declare-sort A_stream_a_stream_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_a_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_stream_stream_bool_fun$ 0)
(declare-sort A_stream_a_stream_stream_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_a_stream_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_stream_a_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_a_stream_stream_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_stream_a_stream_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_stream_a_stream_stream_stream_bool_fun_fun$ 0)
(declare-sort A_stream_stream_stream_a_stream_stream_stream_stream_bool_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (A_stream_stream$ (sCons$a (shd$a A_stream$) (stl$a A_stream_stream$)))
  (A_stream_stream_stream$ (sCons$b (shd$b A_stream_stream$) (stl$b A_stream_stream_stream$)))
  (A_stream_stream_stream_stream$ (sCons$c (shd$c A_stream_stream_stream$) (stl$c A_stream_stream_stream_stream$)))))
(declare-fun s$ () A_stream$)
(declare-fun s$a () A_set$)
(declare-fun smap$ (A_stream_stream_a_fun$ A_stream_stream_stream$) A_stream$)
(declare-fun sset$ (A_stream_stream_stream_stream$) A_stream_stream_stream_set$)
(declare-fun smap$a (A_stream_stream_a_stream_fun$ A_stream_stream_stream$) A_stream_stream$)
(declare-fun smap$b (A_a_stream_stream_fun$ A_stream$) A_stream_stream_stream$)
(declare-fun smap$c (A_stream_a_stream_stream_fun$ A_stream_stream$) A_stream_stream_stream$)
(declare-fun smap$d (A_stream_stream_a_stream_stream_fun$ A_stream_stream_stream$) A_stream_stream_stream$)
(declare-fun smap$e (A_stream_a_fun$) A_stream_stream_a_stream_fun$)
(declare-fun smap$f (A_a_stream_fun$) A_stream_a_stream_stream_fun$)
(declare-fun smap$g (A_stream_a_stream_fun$) A_stream_stream_a_stream_stream_fun$)
(declare-fun smap$h (A_a_fun$) A_stream_a_stream_fun$)
(declare-fun sset$a (A_stream_stream_stream$) A_stream_stream_set$)
(declare-fun sset$b (A_stream_stream$) A_stream_set$)
(declare-fun sset$c (A_stream$) A_set$)
(declare-fun member$ (A_stream$ A_stream_set$) Bool)
(declare-fun fun_app$ (A_stream_stream_stream_bool_fun$ A_stream_stream_stream$) Bool)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (A_stream_stream_stream$ A_stream_stream_stream_set$) Bool)
(declare-fun member$c (A_stream_stream$ A_stream_stream_set$) Bool)
(declare-fun member$d (A_stream_stream_stream_stream$ A_stream_stream_stream_stream_set$) Bool)
(declare-fun streams$ (A_set$) A_stream_set$)
(declare-fun fun_app$a (A_stream_stream_stream_a_stream_stream_stream_bool_fun_fun$ A_stream_stream_stream$) A_stream_stream_stream_bool_fun$)
(declare-fun fun_app$b (A_stream_stream_bool_fun$ A_stream_stream$) Bool)
(declare-fun fun_app$c (A_stream_stream_a_stream_stream_bool_fun_fun$ A_stream_stream$) A_stream_stream_bool_fun$)
(declare-fun fun_app$d (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$e (A_stream_a_stream_bool_fun_fun$ A_stream$) A_stream_bool_fun$)
(declare-fun fun_app$f (A_stream_stream_stream_stream_bool_fun$ A_stream_stream_stream_stream$) Bool)
(declare-fun fun_app$g (A_stream_stream_stream_a_stream_stream_stream_stream_bool_fun_fun$ A_stream_stream_stream$) A_stream_stream_stream_stream_bool_fun$)
(declare-fun fun_app$h (A_stream_stream_a_stream_stream_stream_bool_fun_fun$ A_stream_stream$) A_stream_stream_stream_bool_fun$)
(declare-fun fun_app$i (A_stream_a_stream_stream_bool_fun_fun$ A_stream$) A_stream_stream_bool_fun$)
(declare-fun fun_app$j (A_a_stream_bool_fun_fun$ A$) A_stream_bool_fun$)
(declare-fun fun_app$k (A_a_stream_stream_bool_fun_fun$ A$) A_stream_stream_bool_fun$)
(declare-fun fun_app$l (A_bool_fun$ A$) Bool)
(declare-fun fun_app$m (A_stream_stream_a_bool_fun_fun$ A_stream_stream$) A_bool_fun$)
(declare-fun fun_app$n (A_stream_stream_a_stream_bool_fun_fun$ A_stream_stream$) A_stream_bool_fun$)
(declare-fun fun_app$o (A_stream_a_bool_fun_fun$ A_stream$) A_bool_fun$)
(declare-fun fun_app$p (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$q (A_stream_a_stream_stream_stream_bool_fun_fun$ A_stream$) A_stream_stream_stream_bool_fun$)
(declare-fun fun_app$r (A_stream_stream_stream_a_stream_bool_fun_fun$ A_stream_stream_stream$) A_stream_bool_fun$)
(declare-fun fun_app$s (A_stream_stream_stream_a_stream_stream_bool_fun_fun$ A_stream_stream_stream$) A_stream_stream_bool_fun$)
(declare-fun fun_app$t (A_stream_stream_a_fun$ A_stream_stream$) A$)
(declare-fun fun_app$u (A_stream_stream_a_stream_fun$ A_stream_stream$) A_stream$)
(declare-fun fun_app$v (A_a_stream_stream_fun$ A$) A_stream_stream$)
(declare-fun fun_app$w (A_stream_a_stream_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun fun_app$x (A_stream_stream_a_stream_stream_fun$ A_stream_stream$) A_stream_stream$)
(declare-fun fun_app$y (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$z (A_a_stream_fun$ A$) A_stream$)
(declare-fun streams$a (A_stream_stream_stream_set$) A_stream_stream_stream_stream_set$)
(declare-fun streams$b (A_stream_stream_set$) A_stream_stream_stream_set$)
(declare-fun streams$c (A_stream_set$) A_stream_stream_set$)
(declare-fun fun_app$aa (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$ab (A_a_fun$ A$) A$)
(declare-fun stream_all2$ (A_a_stream_stream_bool_fun_fun$ A_stream$) A_stream_stream_stream_bool_fun$)
(declare-fun stream_all2$a (A_stream_a_stream_stream_bool_fun_fun$ A_stream_stream$) A_stream_stream_stream_bool_fun$)
(declare-fun stream_all2$b (A_stream_stream_a_bool_fun_fun$ A_stream_stream_stream$) A_stream_bool_fun$)
(declare-fun stream_all2$c (A_stream_stream_a_stream_bool_fun_fun$ A_stream_stream_stream$) A_stream_stream_bool_fun$)
(declare-fun stream_all2$d (A_stream_stream_a_stream_stream_bool_fun_fun$ A_stream_stream_stream$) A_stream_stream_stream_bool_fun$)
(declare-fun stream_all2$e (A_a_stream_bool_fun_fun$ A_stream$) A_stream_stream_bool_fun$)
(declare-fun stream_all2$f (A_stream_a_bool_fun_fun$ A_stream_stream$) A_stream_bool_fun$)
(declare-fun stream_all2$g (A_stream_a_stream_bool_fun_fun$ A_stream_stream$) A_stream_stream_bool_fun$)
(declare-fun stream_all2$h (A_a_bool_fun_fun$ A_stream$) A_stream_bool_fun$)
(assert (! (not (member$ s$ (streams$ s$a))) :named a0))
(assert (! (member$ (stl$ s$) (streams$ s$a)) :named a1))
(assert (! (member$a (shd$ s$) s$a) :named a2))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 A_stream_stream_stream$)) (=> (and (= (shd$b ?v0) (shd$b ?v1)) (= (stl$b ?v0) (stl$b ?v1))) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream$)) (=> (and (= (shd$a ?v0) (shd$a ?v1)) (= (stl$a ?v0) (stl$a ?v1))) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$)) (=> (and (= (shd$ ?v0) (shd$ ?v1)) (= (stl$ ?v0) (stl$ ?v1))) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 A_stream_stream_stream_a_stream_stream_stream_bool_fun_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream_stream$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (forall ((?v3 A_stream_stream_stream$) (?v4 A_stream_stream_stream$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (and (= (shd$b ?v3) (shd$b ?v4)) (or (fun_app$ (fun_app$a ?v0 (stl$b ?v3)) (stl$b ?v4)) (= (stl$b ?v3) (stl$b ?v4))))))) (= ?v1 ?v2))) :named a6))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (forall ((?v3 A_stream_stream$) (?v4 A_stream_stream$)) (=> (fun_app$b (fun_app$c ?v0 ?v3) ?v4) (and (= (shd$a ?v3) (shd$a ?v4)) (or (fun_app$b (fun_app$c ?v0 (stl$a ?v3)) (stl$a ?v4)) (= (stl$a ?v3) (stl$a ?v4))))))) (= ?v1 ?v2))) :named a7))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (=> (and (fun_app$d (fun_app$e ?v0 ?v1) ?v2) (forall ((?v3 A_stream$) (?v4 A_stream$)) (=> (fun_app$d (fun_app$e ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (or (fun_app$d (fun_app$e ?v0 (stl$ ?v3)) (stl$ ?v4)) (= (stl$ ?v3) (stl$ ?v4))))))) (= ?v1 ?v2))) :named a8))
(assert (! (forall ((?v0 A_stream_stream_stream_a_stream_stream_stream_bool_fun_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream_stream$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (forall ((?v3 A_stream_stream_stream$) (?v4 A_stream_stream_stream$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (and (= (shd$b ?v3) (shd$b ?v4)) (fun_app$ (fun_app$a ?v0 (stl$b ?v3)) (stl$b ?v4)))))) (= ?v1 ?v2))) :named a9))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (forall ((?v3 A_stream_stream$) (?v4 A_stream_stream$)) (=> (fun_app$b (fun_app$c ?v0 ?v3) ?v4) (and (= (shd$a ?v3) (shd$a ?v4)) (fun_app$b (fun_app$c ?v0 (stl$a ?v3)) (stl$a ?v4)))))) (= ?v1 ?v2))) :named a10))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (=> (and (fun_app$d (fun_app$e ?v0 ?v1) ?v2) (forall ((?v3 A_stream$) (?v4 A_stream$)) (=> (fun_app$d (fun_app$e ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (fun_app$d (fun_app$e ?v0 (stl$ ?v3)) (stl$ ?v4)))))) (= ?v1 ?v2))) :named a11))
(assert (! (forall ((?v0 A_stream_stream_stream$)) (= (sCons$b (shd$b ?v0) (stl$b ?v0)) ?v0)) :named a12))
(assert (! (forall ((?v0 A_stream_stream$)) (= (sCons$a (shd$a ?v0) (stl$a ?v0)) ?v0)) :named a13))
(assert (! (forall ((?v0 A_stream$)) (= (sCons$ (shd$ ?v0) (stl$ ?v0)) ?v0)) :named a14))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 A_stream_stream_stream_stream$) (?v2 A_stream_stream_stream_a_stream_stream_stream_stream_bool_fun_fun$)) (=> (and (member$b ?v0 (sset$ ?v1)) (and (forall ((?v3 A_stream_stream_stream_stream$)) (fun_app$f (fun_app$g ?v2 (shd$c ?v3)) ?v3)) (forall ((?v3 A_stream_stream_stream_stream$) (?v4 A_stream_stream_stream$)) (=> (and (member$b ?v4 (sset$ (stl$c ?v3))) (fun_app$f (fun_app$g ?v2 ?v4) (stl$c ?v3))) (fun_app$f (fun_app$g ?v2 ?v4) ?v3))))) (fun_app$f (fun_app$g ?v2 ?v0) ?v1))) :named a15))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream_a_stream_stream_stream_bool_fun_fun$)) (=> (and (member$c ?v0 (sset$a ?v1)) (and (forall ((?v3 A_stream_stream_stream$)) (fun_app$ (fun_app$h ?v2 (shd$b ?v3)) ?v3)) (forall ((?v3 A_stream_stream_stream$) (?v4 A_stream_stream$)) (=> (and (member$c ?v4 (sset$a (stl$b ?v3))) (fun_app$ (fun_app$h ?v2 ?v4) (stl$b ?v3))) (fun_app$ (fun_app$h ?v2 ?v4) ?v3))))) (fun_app$ (fun_app$h ?v2 ?v0) ?v1))) :named a16))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_stream$) (?v2 A_stream_a_stream_stream_bool_fun_fun$)) (=> (and (member$ ?v0 (sset$b ?v1)) (and (forall ((?v3 A_stream_stream$)) (fun_app$b (fun_app$i ?v2 (shd$a ?v3)) ?v3)) (forall ((?v3 A_stream_stream$) (?v4 A_stream$)) (=> (and (member$ ?v4 (sset$b (stl$a ?v3))) (fun_app$b (fun_app$i ?v2 ?v4) (stl$a ?v3))) (fun_app$b (fun_app$i ?v2 ?v4) ?v3))))) (fun_app$b (fun_app$i ?v2 ?v0) ?v1))) :named a17))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A_a_stream_bool_fun_fun$)) (=> (and (member$a ?v0 (sset$c ?v1)) (and (forall ((?v3 A_stream$)) (fun_app$d (fun_app$j ?v2 (shd$ ?v3)) ?v3)) (forall ((?v3 A_stream$) (?v4 A$)) (=> (and (member$a ?v4 (sset$c (stl$ ?v3))) (fun_app$d (fun_app$j ?v2 ?v4) (stl$ ?v3))) (fun_app$d (fun_app$j ?v2 ?v4) ?v3))))) (fun_app$d (fun_app$j ?v2 ?v0) ?v1))) :named a18))
(assert (! (forall ((?v0 A_stream_stream_stream$)) (=> (=> (= ?v0 (sCons$b (shd$b ?v0) (stl$b ?v0))) false) false)) :named a19))
(assert (! (forall ((?v0 A_stream_stream$)) (=> (=> (= ?v0 (sCons$a (shd$a ?v0) (stl$a ?v0))) false) false)) :named a20))
(assert (! (forall ((?v0 A_stream$)) (=> (=> (= ?v0 (sCons$ (shd$ ?v0) (stl$ ?v0))) false) false)) :named a21))
(assert (! (forall ((?v0 A_a_stream_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream_stream_stream$)) (= (fun_app$ (stream_all2$ ?v0 ?v1) ?v2) (and (fun_app$b (fun_app$k ?v0 (shd$ ?v1)) (shd$b ?v2)) (fun_app$ (stream_all2$ ?v0 (stl$ ?v1)) (stl$b ?v2))))) :named a22))
(assert (! (forall ((?v0 A_stream_a_stream_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream_stream$)) (= (fun_app$ (stream_all2$a ?v0 ?v1) ?v2) (and (fun_app$b (fun_app$i ?v0 (shd$a ?v1)) (shd$b ?v2)) (fun_app$ (stream_all2$a ?v0 (stl$a ?v1)) (stl$b ?v2))))) :named a23))
(assert (! (forall ((?v0 A_stream_stream_a_bool_fun_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream$)) (= (fun_app$d (stream_all2$b ?v0 ?v1) ?v2) (and (fun_app$l (fun_app$m ?v0 (shd$b ?v1)) (shd$ ?v2)) (fun_app$d (stream_all2$b ?v0 (stl$b ?v1)) (stl$ ?v2))))) :named a24))
(assert (! (forall ((?v0 A_stream_stream_a_stream_bool_fun_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream$)) (= (fun_app$b (stream_all2$c ?v0 ?v1) ?v2) (and (fun_app$d (fun_app$n ?v0 (shd$b ?v1)) (shd$a ?v2)) (fun_app$b (stream_all2$c ?v0 (stl$b ?v1)) (stl$a ?v2))))) :named a25))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_bool_fun_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream_stream$)) (= (fun_app$ (stream_all2$d ?v0 ?v1) ?v2) (and (fun_app$b (fun_app$c ?v0 (shd$b ?v1)) (shd$b ?v2)) (fun_app$ (stream_all2$d ?v0 (stl$b ?v1)) (stl$b ?v2))))) :named a26))
(assert (! (forall ((?v0 A_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream_stream$)) (= (fun_app$b (stream_all2$e ?v0 ?v1) ?v2) (and (fun_app$d (fun_app$j ?v0 (shd$ ?v1)) (shd$a ?v2)) (fun_app$b (stream_all2$e ?v0 (stl$ ?v1)) (stl$a ?v2))))) :named a27))
(assert (! (forall ((?v0 A_stream_a_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream$)) (= (fun_app$d (stream_all2$f ?v0 ?v1) ?v2) (and (fun_app$l (fun_app$o ?v0 (shd$a ?v1)) (shd$ ?v2)) (fun_app$d (stream_all2$f ?v0 (stl$a ?v1)) (stl$ ?v2))))) :named a28))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream$)) (= (fun_app$b (stream_all2$g ?v0 ?v1) ?v2) (and (fun_app$d (fun_app$e ?v0 (shd$a ?v1)) (shd$a ?v2)) (fun_app$b (stream_all2$g ?v0 (stl$a ?v1)) (stl$a ?v2))))) :named a29))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (fun_app$d (stream_all2$h ?v0 ?v1) ?v2) (and (fun_app$l (fun_app$p ?v0 (shd$ ?v1)) (shd$ ?v2)) (fun_app$d (stream_all2$h ?v0 (stl$ ?v1)) (stl$ ?v2))))) :named a30))
(assert (! (forall ((?v0 A_stream_a_stream_stream_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream_stream_stream$) (?v3 A_a_stream_stream_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$q ?v0 ?v1) ?v2) (forall ((?v4 A_stream$) (?v5 A_stream_stream_stream$)) (=> (fun_app$ (fun_app$q ?v0 ?v4) ?v5) (and (fun_app$b (fun_app$k ?v3 (shd$ ?v4)) (shd$b ?v5)) (fun_app$ (fun_app$q ?v0 (stl$ ?v4)) (stl$b ?v5)))))) (fun_app$ (stream_all2$ ?v3 ?v1) ?v2))) :named a31))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream_stream$) (?v3 A_stream_a_stream_stream_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$h ?v0 ?v1) ?v2) (forall ((?v4 A_stream_stream$) (?v5 A_stream_stream_stream$)) (=> (fun_app$ (fun_app$h ?v0 ?v4) ?v5) (and (fun_app$b (fun_app$i ?v3 (shd$a ?v4)) (shd$b ?v5)) (fun_app$ (fun_app$h ?v0 (stl$a ?v4)) (stl$b ?v5)))))) (fun_app$ (stream_all2$a ?v3 ?v1) ?v2))) :named a32))
(assert (! (forall ((?v0 A_stream_stream_stream_a_stream_bool_fun_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream$) (?v3 A_stream_stream_a_bool_fun_fun$)) (=> (and (fun_app$d (fun_app$r ?v0 ?v1) ?v2) (forall ((?v4 A_stream_stream_stream$) (?v5 A_stream$)) (=> (fun_app$d (fun_app$r ?v0 ?v4) ?v5) (and (fun_app$l (fun_app$m ?v3 (shd$b ?v4)) (shd$ ?v5)) (fun_app$d (fun_app$r ?v0 (stl$b ?v4)) (stl$ ?v5)))))) (fun_app$d (stream_all2$b ?v3 ?v1) ?v2))) :named a33))
(assert (! (forall ((?v0 A_stream_stream_stream_a_stream_stream_bool_fun_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream$) (?v3 A_stream_stream_a_stream_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$s ?v0 ?v1) ?v2) (forall ((?v4 A_stream_stream_stream$) (?v5 A_stream_stream$)) (=> (fun_app$b (fun_app$s ?v0 ?v4) ?v5) (and (fun_app$d (fun_app$n ?v3 (shd$b ?v4)) (shd$a ?v5)) (fun_app$b (fun_app$s ?v0 (stl$b ?v4)) (stl$a ?v5)))))) (fun_app$b (stream_all2$c ?v3 ?v1) ?v2))) :named a34))
(assert (! (forall ((?v0 A_stream_stream_stream_a_stream_stream_stream_bool_fun_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream_stream$) (?v3 A_stream_stream_a_stream_stream_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (forall ((?v4 A_stream_stream_stream$) (?v5 A_stream_stream_stream$)) (=> (fun_app$ (fun_app$a ?v0 ?v4) ?v5) (and (fun_app$b (fun_app$c ?v3 (shd$b ?v4)) (shd$b ?v5)) (fun_app$ (fun_app$a ?v0 (stl$b ?v4)) (stl$b ?v5)))))) (fun_app$ (stream_all2$d ?v3 ?v1) ?v2))) :named a35))
(assert (! (forall ((?v0 A_stream_a_stream_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream_stream$) (?v3 A_a_stream_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$i ?v0 ?v1) ?v2) (forall ((?v4 A_stream$) (?v5 A_stream_stream$)) (=> (fun_app$b (fun_app$i ?v0 ?v4) ?v5) (and (fun_app$d (fun_app$j ?v3 (shd$ ?v4)) (shd$a ?v5)) (fun_app$b (fun_app$i ?v0 (stl$ ?v4)) (stl$a ?v5)))))) (fun_app$b (stream_all2$e ?v3 ?v1) ?v2))) :named a36))
(assert (! (forall ((?v0 A_stream_stream_a_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream$) (?v3 A_stream_a_bool_fun_fun$)) (=> (and (fun_app$d (fun_app$n ?v0 ?v1) ?v2) (forall ((?v4 A_stream_stream$) (?v5 A_stream$)) (=> (fun_app$d (fun_app$n ?v0 ?v4) ?v5) (and (fun_app$l (fun_app$o ?v3 (shd$a ?v4)) (shd$ ?v5)) (fun_app$d (fun_app$n ?v0 (stl$a ?v4)) (stl$ ?v5)))))) (fun_app$d (stream_all2$f ?v3 ?v1) ?v2))) :named a37))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream$) (?v3 A_stream_a_stream_bool_fun_fun$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (forall ((?v4 A_stream_stream$) (?v5 A_stream_stream$)) (=> (fun_app$b (fun_app$c ?v0 ?v4) ?v5) (and (fun_app$d (fun_app$e ?v3 (shd$a ?v4)) (shd$a ?v5)) (fun_app$b (fun_app$c ?v0 (stl$a ?v4)) (stl$a ?v5)))))) (fun_app$b (stream_all2$g ?v3 ?v1) ?v2))) :named a38))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$d (fun_app$e ?v0 ?v1) ?v2) (forall ((?v4 A_stream$) (?v5 A_stream$)) (=> (fun_app$d (fun_app$e ?v0 ?v4) ?v5) (and (fun_app$l (fun_app$p ?v3 (shd$ ?v4)) (shd$ ?v5)) (fun_app$d (fun_app$e ?v0 (stl$ ?v4)) (stl$ ?v5)))))) (fun_app$d (stream_all2$h ?v3 ?v1) ?v2))) :named a39))
(assert (! (forall ((?v0 A_stream_stream_a_fun$) (?v1 A_stream_stream_stream$)) (= (shd$ (smap$ ?v0 ?v1)) (fun_app$t ?v0 (shd$b ?v1)))) :named a40))
(assert (! (forall ((?v0 A_stream_stream_a_stream_fun$) (?v1 A_stream_stream_stream$)) (= (shd$a (smap$a ?v0 ?v1)) (fun_app$u ?v0 (shd$b ?v1)))) :named a41))
(assert (! (forall ((?v0 A_a_stream_stream_fun$) (?v1 A_stream$)) (= (shd$b (smap$b ?v0 ?v1)) (fun_app$v ?v0 (shd$ ?v1)))) :named a42))
(assert (! (forall ((?v0 A_stream_a_stream_stream_fun$) (?v1 A_stream_stream$)) (= (shd$b (smap$c ?v0 ?v1)) (fun_app$w ?v0 (shd$a ?v1)))) :named a43))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_fun$) (?v1 A_stream_stream_stream$)) (= (shd$b (smap$d ?v0 ?v1)) (fun_app$x ?v0 (shd$b ?v1)))) :named a44))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$)) (= (shd$ (fun_app$u (smap$e ?v0) ?v1)) (fun_app$y ?v0 (shd$a ?v1)))) :named a45))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$)) (= (shd$a (fun_app$w (smap$f ?v0) ?v1)) (fun_app$z ?v0 (shd$ ?v1)))) :named a46))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$)) (= (shd$a (fun_app$x (smap$g ?v0) ?v1)) (fun_app$aa ?v0 (shd$a ?v1)))) :named a47))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (shd$ (fun_app$aa (smap$h ?v0) ?v1)) (fun_app$ab ?v0 (shd$ ?v1)))) :named a48))
(assert (! (forall ((?v0 A_stream_stream_a_fun$) (?v1 A_stream_stream_stream$)) (= (stl$ (smap$ ?v0 ?v1)) (smap$ ?v0 (stl$b ?v1)))) :named a49))
(assert (! (forall ((?v0 A_stream_stream_a_stream_fun$) (?v1 A_stream_stream_stream$)) (= (stl$a (smap$a ?v0 ?v1)) (smap$a ?v0 (stl$b ?v1)))) :named a50))
(assert (! (forall ((?v0 A_a_stream_stream_fun$) (?v1 A_stream$)) (= (stl$b (smap$b ?v0 ?v1)) (smap$b ?v0 (stl$ ?v1)))) :named a51))
(assert (! (forall ((?v0 A_stream_a_stream_stream_fun$) (?v1 A_stream_stream$)) (= (stl$b (smap$c ?v0 ?v1)) (smap$c ?v0 (stl$a ?v1)))) :named a52))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_fun$) (?v1 A_stream_stream_stream$)) (= (stl$b (smap$d ?v0 ?v1)) (smap$d ?v0 (stl$b ?v1)))) :named a53))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$)) (= (stl$ (fun_app$u (smap$e ?v0) ?v1)) (fun_app$u (smap$e ?v0) (stl$a ?v1)))) :named a54))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$)) (= (stl$a (fun_app$w (smap$f ?v0) ?v1)) (fun_app$w (smap$f ?v0) (stl$ ?v1)))) :named a55))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$)) (= (stl$a (fun_app$x (smap$g ?v0) ?v1)) (fun_app$x (smap$g ?v0) (stl$a ?v1)))) :named a56))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (stl$ (fun_app$aa (smap$h ?v0) ?v1)) (fun_app$aa (smap$h ?v0) (stl$ ?v1)))) :named a57))
(assert (! (forall ((?v0 A_stream_stream_stream_stream$) (?v1 A_stream_stream_stream_set$)) (= (member$d ?v0 (streams$a ?v1)) (exists ((?v2 A_stream_stream_stream$) (?v3 A_stream_stream_stream_stream$)) (and (= ?v0 (sCons$c ?v2 ?v3)) (and (member$b ?v2 ?v1) (member$d ?v3 (streams$a ?v1))))))) :named a58))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 A_stream_stream_set$)) (= (member$b ?v0 (streams$b ?v1)) (exists ((?v2 A_stream_stream$) (?v3 A_stream_stream_stream$)) (and (= ?v0 (sCons$b ?v2 ?v3)) (and (member$c ?v2 ?v1) (member$b ?v3 (streams$b ?v1))))))) :named a59))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$)) (= (member$c ?v0 (streams$c ?v1)) (exists ((?v2 A_stream$) (?v3 A_stream_stream$)) (and (= ?v0 (sCons$a ?v2 ?v3)) (and (member$ ?v2 ?v1) (member$c ?v3 (streams$c ?v1))))))) :named a60))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$)) (= (member$ ?v0 (streams$ ?v1)) (exists ((?v2 A$) (?v3 A_stream$)) (and (= ?v0 (sCons$ ?v2 ?v3)) (and (member$a ?v2 ?v1) (member$ ?v3 (streams$ ?v1))))))) :named a61))
(assert (! (forall ((?v0 A_stream_stream_stream_stream$) (?v1 A_stream_stream_stream_set$)) (=> (and (member$d ?v0 (streams$a ?v1)) (forall ((?v2 A_stream_stream_stream$) (?v3 A_stream_stream_stream_stream$)) (=> (and (= ?v0 (sCons$c ?v2 ?v3)) (and (member$b ?v2 ?v1) (member$d ?v3 (streams$a ?v1)))) false))) false)) :named a62))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 A_stream_stream_set$)) (=> (and (member$b ?v0 (streams$b ?v1)) (forall ((?v2 A_stream_stream$) (?v3 A_stream_stream_stream$)) (=> (and (= ?v0 (sCons$b ?v2 ?v3)) (and (member$c ?v2 ?v1) (member$b ?v3 (streams$b ?v1)))) false))) false)) :named a63))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$)) (=> (and (member$c ?v0 (streams$c ?v1)) (forall ((?v2 A_stream$) (?v3 A_stream_stream$)) (=> (and (= ?v0 (sCons$a ?v2 ?v3)) (and (member$ ?v2 ?v1) (member$c ?v3 (streams$c ?v1)))) false))) false)) :named a64))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$)) (=> (and (member$ ?v0 (streams$ ?v1)) (forall ((?v2 A$) (?v3 A_stream$)) (=> (and (= ?v0 (sCons$ ?v2 ?v3)) (and (member$a ?v2 ?v1) (member$ ?v3 (streams$ ?v1)))) false))) false)) :named a65))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream$) (?v3 A_stream_stream_stream$)) (= (= (sCons$b ?v0 ?v1) (sCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a66))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a67))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_stream$) (?v2 A_stream$) (?v3 A_stream_stream$)) (= (= (sCons$a ?v0 ?v1) (sCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a68))
(assert (! (forall ((?v0 A_a_stream_stream_bool_fun_fun$) (?v1 A$) (?v2 A_stream$) (?v3 A_stream_stream$) (?v4 A_stream_stream_stream$)) (! (= (fun_app$ (stream_all2$ ?v0 (sCons$ ?v1 ?v2)) (sCons$b ?v3 ?v4)) (and (fun_app$b (fun_app$k ?v0 ?v1) ?v3) (fun_app$ (stream_all2$ ?v0 ?v2) ?v4))) :pattern ((fun_app$ (stream_all2$ ?v0 (sCons$ ?v1 ?v2)) (sCons$b ?v3 ?v4))))) :named a69))
(assert (! (forall ((?v0 A_stream_a_stream_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream_stream$) (?v3 A_stream_stream$) (?v4 A_stream_stream_stream$)) (! (= (fun_app$ (stream_all2$a ?v0 (sCons$a ?v1 ?v2)) (sCons$b ?v3 ?v4)) (and (fun_app$b (fun_app$i ?v0 ?v1) ?v3) (fun_app$ (stream_all2$a ?v0 ?v2) ?v4))) :pattern ((fun_app$ (stream_all2$a ?v0 (sCons$a ?v1 ?v2)) (sCons$b ?v3 ?v4))))) :named a70))
(assert (! (forall ((?v0 A_stream_stream_a_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (fun_app$d (stream_all2$b ?v0 (sCons$b ?v1 ?v2)) (sCons$ ?v3 ?v4)) (and (fun_app$l (fun_app$m ?v0 ?v1) ?v3) (fun_app$d (stream_all2$b ?v0 ?v2) ?v4))) :pattern ((fun_app$d (stream_all2$b ?v0 (sCons$b ?v1 ?v2)) (sCons$ ?v3 ?v4))))) :named a71))
(assert (! (forall ((?v0 A_stream_stream_a_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream_stream$) (?v3 A_stream$) (?v4 A_stream_stream$)) (! (= (fun_app$b (stream_all2$c ?v0 (sCons$b ?v1 ?v2)) (sCons$a ?v3 ?v4)) (and (fun_app$d (fun_app$n ?v0 ?v1) ?v3) (fun_app$b (stream_all2$c ?v0 ?v2) ?v4))) :pattern ((fun_app$b (stream_all2$c ?v0 (sCons$b ?v1 ?v2)) (sCons$a ?v3 ?v4))))) :named a72))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_bool_fun_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream_stream$) (?v3 A_stream_stream$) (?v4 A_stream_stream_stream$)) (! (= (fun_app$ (stream_all2$d ?v0 (sCons$b ?v1 ?v2)) (sCons$b ?v3 ?v4)) (and (fun_app$b (fun_app$c ?v0 ?v1) ?v3) (fun_app$ (stream_all2$d ?v0 ?v2) ?v4))) :pattern ((fun_app$ (stream_all2$d ?v0 (sCons$b ?v1 ?v2)) (sCons$b ?v3 ?v4))))) :named a73))
(assert (! (forall ((?v0 A_a_stream_bool_fun_fun$) (?v1 A$) (?v2 A_stream$) (?v3 A_stream$) (?v4 A_stream_stream$)) (! (= (fun_app$b (stream_all2$e ?v0 (sCons$ ?v1 ?v2)) (sCons$a ?v3 ?v4)) (and (fun_app$d (fun_app$j ?v0 ?v1) ?v3) (fun_app$b (stream_all2$e ?v0 ?v2) ?v4))) :pattern ((fun_app$b (stream_all2$e ?v0 (sCons$ ?v1 ?v2)) (sCons$a ?v3 ?v4))))) :named a74))
(assert (! (forall ((?v0 A_stream_a_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (fun_app$d (stream_all2$f ?v0 (sCons$a ?v1 ?v2)) (sCons$ ?v3 ?v4)) (and (fun_app$l (fun_app$o ?v0 ?v1) ?v3) (fun_app$d (stream_all2$f ?v0 ?v2) ?v4))) :pattern ((fun_app$d (stream_all2$f ?v0 (sCons$a ?v1 ?v2)) (sCons$ ?v3 ?v4))))) :named a75))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$) (?v1 A_stream$) (?v2 A_stream_stream$) (?v3 A_stream$) (?v4 A_stream_stream$)) (! (= (fun_app$b (stream_all2$g ?v0 (sCons$a ?v1 ?v2)) (sCons$a ?v3 ?v4)) (and (fun_app$d (fun_app$e ?v0 ?v1) ?v3) (fun_app$b (stream_all2$g ?v0 ?v2) ?v4))) :pattern ((fun_app$b (stream_all2$g ?v0 (sCons$a ?v1 ?v2)) (sCons$a ?v3 ?v4))))) :named a76))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (fun_app$d (stream_all2$h ?v0 (sCons$ ?v1 ?v2)) (sCons$ ?v3 ?v4)) (and (fun_app$l (fun_app$p ?v0 ?v1) ?v3) (fun_app$d (stream_all2$h ?v0 ?v2) ?v4))) :pattern ((fun_app$d (stream_all2$h ?v0 (sCons$ ?v1 ?v2)) (sCons$ ?v3 ?v4))))) :named a77))
(check-sat)
;(get-unsat-core)
