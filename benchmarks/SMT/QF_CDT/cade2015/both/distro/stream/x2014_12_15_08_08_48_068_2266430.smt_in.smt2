; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 216
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_set_fun$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort A_a_stream_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort A_a_stream_set_fun$ 0)
(declare-sort A_stream_a_set_fun$ 0)
(declare-sort A_stream_stream_set$ 0)
(declare-sort A_a_stream_stream_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_stream_stream_a_fun$ 0)
(declare-sort A_stream_stream_bool_fun$ 0)
(declare-sort A_a_stream_stream_set_fun$ 0)
(declare-sort A_stream_a_stream_set_fun$ 0)
(declare-sort A_stream_stream_a_set_fun$ 0)
(declare-sort A_stream_stream_stream_set$ 0)
(declare-sort A_a_stream_stream_stream_fun$ 0)
(declare-sort A_stream_a_stream_stream_fun$ 0)
(declare-sort A_stream_stream_a_stream_fun$ 0)
(declare-sort A_stream_stream_stream_a_fun$ 0)
(declare-sort A_stream_stream_stream_bool_fun$ 0)
(declare-sort A_stream_a_stream_stream_set_fun$ 0)
(declare-sort A_stream_stream_a_stream_set_fun$ 0)
(declare-sort A_stream_stream_a_stream_stream_fun$ 0)
(declare-sort A_stream_stream_a_stream_stream_set_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (A_stream_stream$ (sCons$a (shd$a A_stream$) (stl$a A_stream_stream$)))
  (A_stream_stream_stream$ (sCons$b (shd$b A_stream_stream$) (stl$b A_stream_stream_stream$)))
  (A_stream_stream_stream_stream$ (sCons$c (shd$c A_stream_stream_stream$) (stl$c A_stream_stream_stream_stream$)))
  (A_stream_stream_stream_stream_stream$ (sCons$d (shd$d A_stream_stream_stream_stream$) (stl$d A_stream_stream_stream_stream_stream$)))))
(declare-fun ss$ () A_stream_stream$)
(declare-fun smap$ (A_a_stream_stream_fun$ A_stream$) A_stream_stream_stream$)
(declare-fun snth$ (A_stream_stream_stream_stream$ Nat$) A_stream_stream_stream$)
(declare-fun sset$ () A_stream_a_set_fun$)
(declare-fun sdrop$ (Nat$ A_stream_stream_stream_stream$) A_stream_stream_stream_stream$)
(declare-fun smap$a (A_a_stream_fun$) A_stream_a_stream_stream_fun$)
(declare-fun smap$b (A_a_fun$) A_stream_a_stream_fun$)
(declare-fun smap$c (A_stream_a_stream_fun$) A_stream_stream_a_stream_stream_fun$)
(declare-fun smap$d (A_stream_a_fun$) A_stream_stream_a_stream_fun$)
(declare-fun smap$e (A_stream_stream_a_stream_fun$ A_stream_stream_stream$) A_stream_stream$)
(declare-fun smap$f (A_stream_stream_a_fun$ A_stream_stream_stream$) A_stream$)
(declare-fun smap$g (A_stream_a_stream_stream_fun$ A_stream_stream$) A_stream_stream_stream$)
(declare-fun smap$h (A_stream_stream_a_stream_stream_fun$ A_stream_stream_stream$) A_stream_stream_stream$)
(declare-fun smap$i (A_stream_stream_stream_a_fun$ A_stream_stream_stream_stream$) A_stream$)
(declare-fun smap$j (A_a_stream_stream_stream_fun$ A_stream$) A_stream_stream_stream_stream$)
(declare-fun snth$a (A_stream_stream_stream_stream_stream$ Nat$) A_stream_stream_stream_stream$)
(declare-fun snth$b (A_stream_stream_stream$ Nat$) A_stream_stream$)
(declare-fun snth$c (A_stream$ Nat$) A$)
(declare-fun snth$d (A_stream_stream$ Nat$) A_stream$)
(declare-fun sset$a (A_stream_stream$) A_stream_set$)
(declare-fun sset$b (A_stream_stream_stream$) A_stream_stream_set$)
(declare-fun sset$c (A_stream_stream_stream_stream$) A_stream_stream_stream_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun sdrop$a (Nat$ A_stream_stream_stream$) A_stream_stream_stream$)
(declare-fun sdrop$b (Nat$) A_stream_stream_a_stream_stream_fun$)
(declare-fun sdrop$c (Nat$) A_stream_a_stream_fun$)
(declare-fun smerge$ (A_stream_stream$) A_stream$)
(declare-fun fun_app$ (A_stream_a_set_fun$ A_stream$) A_set$)
(declare-fun member$a (A_stream_stream$ A_stream_stream_set$) Bool)
(declare-fun member$b (A_stream$ A_stream_set$) Bool)
(declare-fun member$c (A_stream_stream_stream$ A_stream_stream_stream_set$) Bool)
(declare-fun smember$ (A_stream_stream$) A_stream_stream_stream_bool_fun$)
(declare-fun smerge$a (A_stream_stream_stream_stream_stream$) A_stream_stream_stream_stream$)
(declare-fun smerge$b (A_stream_stream_stream_stream$) A_stream_stream_stream$)
(declare-fun smerge$c (A_stream_stream_stream$) A_stream_stream$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (A_stream_stream_a_set_fun$ A_stream_stream$) A_set$)
(declare-fun fun_app$c (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$d (A_stream_stream_a_stream_set_fun$ A_stream_stream$) A_stream_set$)
(declare-fun fun_app$e (A_stream_stream_bool_fun$ A_stream_stream$) Bool)
(declare-fun fun_app$f (A_a_stream_stream_set_fun$ A$) A_stream_stream_set$)
(declare-fun fun_app$g (A_stream_a_stream_stream_set_fun$ A_stream$) A_stream_stream_set$)
(declare-fun fun_app$h (A_stream_stream_a_stream_stream_set_fun$ A_stream_stream$) A_stream_stream_set$)
(declare-fun fun_app$i (A_a_set_fun$ A$) A_set$)
(declare-fun fun_app$j (A_a_stream_set_fun$ A$) A_stream_set$)
(declare-fun fun_app$k (A_stream_a_stream_set_fun$ A_stream$) A_stream_set$)
(declare-fun fun_app$l (A_stream_stream_stream_bool_fun$ A_stream_stream_stream$) Bool)
(declare-fun fun_app$m (A_a_stream_stream_fun$ A$) A_stream_stream$)
(declare-fun fun_app$n (A_a_stream_fun$ A$) A_stream$)
(declare-fun fun_app$o (A_stream_a_stream_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun fun_app$p (A_a_fun$ A$) A$)
(declare-fun fun_app$q (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$r (A_stream_stream_a_stream_stream_fun$ A_stream_stream$) A_stream_stream$)
(declare-fun fun_app$s (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$t (A_stream_stream_a_stream_fun$ A_stream_stream$) A_stream$)
(declare-fun fun_app$u (A_stream_stream_a_fun$ A_stream_stream$) A$)
(declare-fun fun_app$v (A_stream_stream_stream_a_fun$ A_stream_stream_stream$) A$)
(declare-fun fun_app$w (A_a_stream_stream_stream_fun$ A$) A_stream_stream_stream$)
(declare-fun smember$a (A$) A_stream_bool_fun$)
(declare-fun smember$b (A_stream$) A_stream_stream_bool_fun$)
(declare-fun supremum$ (A_stream_set$ A_stream_a_set_fun$) A_set$)
(declare-fun supremum$a (A_stream_stream_set$ A_stream_stream_a_set_fun$) A_set$)
(declare-fun supremum$b (A_stream_stream_set$ A_stream_stream_a_stream_set_fun$) A_stream_set$)
(declare-fun supremum$c (A_set$ A_a_stream_stream_set_fun$) A_stream_stream_set$)
(declare-fun supremum$d (A_stream_set$ A_stream_a_stream_stream_set_fun$) A_stream_stream_set$)
(declare-fun supremum$e (A_stream_stream_set$ A_stream_stream_a_stream_stream_set_fun$) A_stream_stream_set$)
(declare-fun supremum$f (A_set$ A_a_set_fun$) A_set$)
(declare-fun supremum$g (A_set$ A_a_stream_set_fun$) A_stream_set$)
(declare-fun supremum$h (A_stream_set$ A_stream_a_stream_set_fun$) A_stream_set$)
(declare-fun stream_all$ (A_stream_stream_stream_bool_fun$ A_stream_stream_stream_stream$) Bool)
(declare-fun stream_all$a (A_stream_bool_fun$) A_stream_stream_bool_fun$)
(declare-fun stream_all$b (A_stream_stream_bool_fun$) A_stream_stream_stream_bool_fun$)
(declare-fun stream_all$c (A_bool_fun$) A_stream_bool_fun$)
(assert (! (not (= (fun_app$ sset$ (smerge$ ss$)) (supremum$ (sset$a ss$) sset$))) :named a0))
(assert (! (forall ((?v0 A_stream_stream_set$) (?v1 A_stream_stream_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$ ?v3 (supremum$a ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A_stream_stream$)) (and (member$a ?v3 ?v0) (exists ((?v4 A$)) (and (member$ ?v4 (fun_app$b ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a1))
(assert (! (forall ((?v0 A_stream_stream_set$) (?v1 A_stream_stream_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (exists ((?v3 A_stream$)) (and (member$b ?v3 (supremum$b ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A_stream_stream$)) (and (member$a ?v3 ?v0) (exists ((?v4 A_stream$)) (and (member$b ?v4 (fun_app$d ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a2))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_stream_stream_set_fun$) (?v2 A_stream_stream_bool_fun$)) (= (exists ((?v3 A_stream_stream$)) (and (member$a ?v3 (supremum$c ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (exists ((?v4 A_stream_stream$)) (and (member$a ?v4 (fun_app$f ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a3))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_stream_stream_set_fun$) (?v2 A_stream_stream_bool_fun$)) (= (exists ((?v3 A_stream_stream$)) (and (member$a ?v3 (supremum$d ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (exists ((?v3 A_stream$)) (and (member$b ?v3 ?v0) (exists ((?v4 A_stream_stream$)) (and (member$a ?v4 (fun_app$g ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a4))
(assert (! (forall ((?v0 A_stream_stream_set$) (?v1 A_stream_stream_a_stream_stream_set_fun$) (?v2 A_stream_stream_bool_fun$)) (= (exists ((?v3 A_stream_stream$)) (and (member$a ?v3 (supremum$e ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (exists ((?v3 A_stream_stream$)) (and (member$a ?v3 ?v0) (exists ((?v4 A_stream_stream$)) (and (member$a ?v4 (fun_app$h ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a5))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$ ?v3 (supremum$f ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (exists ((?v4 A$)) (and (member$ ?v4 (fun_app$i ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a6))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (exists ((?v3 A_stream$)) (and (member$b ?v3 (supremum$g ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (exists ((?v4 A_stream$)) (and (member$b ?v4 (fun_app$j ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a7))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (exists ((?v3 A_stream$)) (and (member$b ?v3 (supremum$h ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A_stream$)) (and (member$b ?v3 ?v0) (exists ((?v4 A_stream$)) (and (member$b ?v4 (fun_app$k ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a8))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A_stream$)) (and (member$b ?v3 ?v0) (exists ((?v4 A$)) (and (member$ ?v4 (fun_app$ ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a9))
(assert (! (forall ((?v0 A_stream_stream_set$) (?v1 A_stream_stream_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$ ?v3 (supremum$a ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A_stream_stream$)) (and (member$a ?v3 ?v0) (exists ((?v4 A$)) (and (member$ ?v4 (fun_app$b ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a10))
(assert (! (forall ((?v0 A_stream_stream_set$) (?v1 A_stream_stream_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (exists ((?v3 A_stream$)) (and (member$b ?v3 (supremum$b ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A_stream_stream$)) (and (member$a ?v3 ?v0) (exists ((?v4 A_stream$)) (and (member$b ?v4 (fun_app$d ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a11))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_stream_stream_set_fun$) (?v2 A_stream_stream_bool_fun$)) (= (exists ((?v3 A_stream_stream$)) (and (member$a ?v3 (supremum$c ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (exists ((?v4 A_stream_stream$)) (and (member$a ?v4 (fun_app$f ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a12))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_stream_stream_set_fun$) (?v2 A_stream_stream_bool_fun$)) (= (exists ((?v3 A_stream_stream$)) (and (member$a ?v3 (supremum$d ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (exists ((?v3 A_stream$)) (and (member$b ?v3 ?v0) (exists ((?v4 A_stream_stream$)) (and (member$a ?v4 (fun_app$g ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a13))
(assert (! (forall ((?v0 A_stream_stream_set$) (?v1 A_stream_stream_a_stream_stream_set_fun$) (?v2 A_stream_stream_bool_fun$)) (= (exists ((?v3 A_stream_stream$)) (and (member$a ?v3 (supremum$e ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (exists ((?v3 A_stream_stream$)) (and (member$a ?v3 ?v0) (exists ((?v4 A_stream_stream$)) (and (member$a ?v4 (fun_app$h ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a14))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$ ?v3 (supremum$f ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (exists ((?v4 A$)) (and (member$ ?v4 (fun_app$i ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a15))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (exists ((?v3 A_stream$)) (and (member$b ?v3 (supremum$g ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (exists ((?v4 A_stream$)) (and (member$b ?v4 (fun_app$j ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a16))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (exists ((?v3 A_stream$)) (and (member$b ?v3 (supremum$h ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A_stream$)) (and (member$b ?v3 ?v0) (exists ((?v4 A_stream$)) (and (member$b ?v4 (fun_app$k ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a17))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (exists ((?v3 A_stream$)) (and (member$b ?v3 ?v0) (exists ((?v4 A$)) (and (member$ ?v4 (fun_app$ ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a18))
(assert (! (forall ((?v0 A_stream_stream_set$) (?v1 A_stream_stream_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$ ?v3 (supremum$a ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A_stream_stream$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$b ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a19))
(assert (! (forall ((?v0 A_stream_stream_set$) (?v1 A_stream_stream_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (forall ((?v3 A_stream$)) (=> (member$b ?v3 (supremum$b ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A_stream_stream$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A_stream$)) (=> (member$b ?v4 (fun_app$d ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a20))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_stream_stream_set_fun$) (?v2 A_stream_stream_bool_fun$)) (= (forall ((?v3 A_stream_stream$)) (=> (member$a ?v3 (supremum$c ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A_stream_stream$)) (=> (member$a ?v4 (fun_app$f ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a21))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_stream_stream_set_fun$) (?v2 A_stream_stream_bool_fun$)) (= (forall ((?v3 A_stream_stream$)) (=> (member$a ?v3 (supremum$d ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (forall ((?v3 A_stream$)) (=> (member$b ?v3 ?v0) (forall ((?v4 A_stream_stream$)) (=> (member$a ?v4 (fun_app$g ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a22))
(assert (! (forall ((?v0 A_stream_stream_set$) (?v1 A_stream_stream_a_stream_stream_set_fun$) (?v2 A_stream_stream_bool_fun$)) (= (forall ((?v3 A_stream_stream$)) (=> (member$a ?v3 (supremum$e ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (forall ((?v3 A_stream_stream$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A_stream_stream$)) (=> (member$a ?v4 (fun_app$h ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a23))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$ ?v3 (supremum$f ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$i ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a24))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (forall ((?v3 A_stream$)) (=> (member$b ?v3 (supremum$g ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A_stream$)) (=> (member$b ?v4 (fun_app$j ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a25))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (forall ((?v3 A_stream$)) (=> (member$b ?v3 (supremum$h ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A_stream$)) (=> (member$b ?v3 ?v0) (forall ((?v4 A_stream$)) (=> (member$b ?v4 (fun_app$k ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a26))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A_stream$)) (=> (member$b ?v3 ?v0) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$ ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a27))
(assert (! (forall ((?v0 A_stream_stream_set$) (?v1 A_stream_stream_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$ ?v3 (supremum$a ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A_stream_stream$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$b ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a28))
(assert (! (forall ((?v0 A_stream_stream_set$) (?v1 A_stream_stream_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (forall ((?v3 A_stream$)) (=> (member$b ?v3 (supremum$b ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A_stream_stream$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A_stream$)) (=> (member$b ?v4 (fun_app$d ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a29))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_stream_stream_set_fun$) (?v2 A_stream_stream_bool_fun$)) (= (forall ((?v3 A_stream_stream$)) (=> (member$a ?v3 (supremum$c ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A_stream_stream$)) (=> (member$a ?v4 (fun_app$f ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a30))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_stream_stream_set_fun$) (?v2 A_stream_stream_bool_fun$)) (= (forall ((?v3 A_stream_stream$)) (=> (member$a ?v3 (supremum$d ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (forall ((?v3 A_stream$)) (=> (member$b ?v3 ?v0) (forall ((?v4 A_stream_stream$)) (=> (member$a ?v4 (fun_app$g ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a31))
(assert (! (forall ((?v0 A_stream_stream_set$) (?v1 A_stream_stream_a_stream_stream_set_fun$) (?v2 A_stream_stream_bool_fun$)) (= (forall ((?v3 A_stream_stream$)) (=> (member$a ?v3 (supremum$e ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (forall ((?v3 A_stream_stream$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A_stream_stream$)) (=> (member$a ?v4 (fun_app$h ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a32))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$ ?v3 (supremum$f ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$i ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a33))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (forall ((?v3 A_stream$)) (=> (member$b ?v3 (supremum$g ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A_stream$)) (=> (member$b ?v4 (fun_app$j ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a34))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_stream_set_fun$) (?v2 A_stream_bool_fun$)) (= (forall ((?v3 A_stream$)) (=> (member$b ?v3 (supremum$h ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A_stream$)) (=> (member$b ?v3 ?v0) (forall ((?v4 A_stream$)) (=> (member$b ?v4 (fun_app$k ?v1 ?v3)) (fun_app$c ?v2 ?v4))))))) :named a35))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$a ?v2 ?v3))) (forall ((?v3 A_stream$)) (=> (member$b ?v3 ?v0) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$ ?v1 ?v3)) (fun_app$a ?v2 ?v4))))))) :named a36))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_stream$)) (! (= (fun_app$l (smember$ ?v0) ?v1) (member$a ?v0 (sset$b ?v1))) :pattern ((fun_app$l (smember$ ?v0) ?v1)))) :named a37))
(assert (! (forall ((?v0 A$) (?v1 A_stream$)) (! (= (fun_app$c (smember$a ?v0) ?v1) (member$ ?v0 (fun_app$ sset$ ?v1))) :pattern ((fun_app$c (smember$a ?v0) ?v1)))) :named a38))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_stream$)) (! (= (fun_app$e (smember$b ?v0) ?v1) (member$b ?v0 (sset$a ?v1))) :pattern ((fun_app$e (smember$b ?v0) ?v1)))) :named a39))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_set$) (?v2 A_stream_a_stream_set_fun$) (?v3 A_stream_a_stream_set_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_stream$)) (=> (member$b ?v4 ?v1) (= (fun_app$k ?v2 ?v4) (fun_app$k ?v3 ?v4))))) (= (supremum$h ?v0 ?v2) (supremum$h ?v1 ?v3)))) :named a40))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_stream_set_fun$) (?v3 A_a_stream_set_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 ?v1) (= (fun_app$j ?v2 ?v4) (fun_app$j ?v3 ?v4))))) (= (supremum$g ?v0 ?v2) (supremum$g ?v1 ?v3)))) :named a41))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_set_fun$) (?v3 A_a_set_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 ?v1) (= (fun_app$i ?v2 ?v4) (fun_app$i ?v3 ?v4))))) (= (supremum$f ?v0 ?v2) (supremum$f ?v1 ?v3)))) :named a42))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_set$) (?v2 A_stream_a_set_fun$) (?v3 A_stream_a_set_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_stream$)) (=> (member$b ?v4 ?v1) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (supremum$ ?v0 ?v2) (supremum$ ?v1 ?v3)))) :named a43))
(assert (! (forall ((?v0 A_stream_stream_stream_stream_stream$) (?v1 Nat$) (?v2 Nat$)) (member$c (snth$ (snth$a ?v0 ?v1) ?v2) (sset$c (smerge$a ?v0)))) :named a44))
(assert (! (forall ((?v0 A_stream_stream_stream_stream$) (?v1 Nat$) (?v2 Nat$)) (member$a (snth$b (snth$ ?v0 ?v1) ?v2) (sset$b (smerge$b ?v0)))) :named a45))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 Nat$) (?v2 Nat$)) (member$ (snth$c (snth$d ?v0 ?v1) ?v2) (fun_app$ sset$ (smerge$ ?v0)))) :named a46))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 Nat$) (?v2 Nat$)) (member$b (snth$d (snth$b ?v0 ?v1) ?v2) (sset$a (smerge$c ?v0)))) :named a47))
(assert (! (forall ((?v0 A_stream_stream_stream_stream$) (?v1 Nat$)) (member$c (snth$ ?v0 ?v1) (sset$c ?v0))) :named a48))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 Nat$)) (member$a (snth$b ?v0 ?v1) (sset$b ?v0))) :named a49))
(assert (! (forall ((?v0 A_stream$) (?v1 Nat$)) (member$ (snth$c ?v0 ?v1) (fun_app$ sset$ ?v0))) :named a50))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 Nat$)) (member$b (snth$d ?v0 ?v1) (sset$a ?v0))) :named a51))
(assert (! (forall ((?v0 A_stream_stream_stream$)) (member$a (shd$b ?v0) (sset$b ?v0))) :named a52))
(assert (! (forall ((?v0 A_stream$)) (member$ (shd$ ?v0) (fun_app$ sset$ ?v0))) :named a53))
(assert (! (forall ((?v0 A_stream_stream$)) (member$b (shd$a ?v0) (sset$a ?v0))) :named a54))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_stream_stream_fun$) (?v3 A_a_stream_stream_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$ ?v4 (fun_app$ sset$ ?v0)) (and (member$ ?v5 (fun_app$ sset$ ?v1)) (= (fun_app$m ?v2 ?v4) (fun_app$m ?v3 ?v5)))) (= ?v4 ?v5))) (= (smap$ ?v2 ?v0) (smap$ ?v3 ?v1))) (= ?v0 ?v1))) :named a55))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_stream_fun$) (?v3 A_a_stream_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$ ?v4 (fun_app$ sset$ ?v0)) (and (member$ ?v5 (fun_app$ sset$ ?v1)) (= (fun_app$n ?v2 ?v4) (fun_app$n ?v3 ?v5)))) (= ?v4 ?v5))) (= (fun_app$o (smap$a ?v2) ?v0) (fun_app$o (smap$a ?v3) ?v1))) (= ?v0 ?v1))) :named a56))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$ ?v4 (fun_app$ sset$ ?v0)) (and (member$ ?v5 (fun_app$ sset$ ?v1)) (= (fun_app$p ?v2 ?v4) (fun_app$p ?v3 ?v5)))) (= ?v4 ?v5))) (= (fun_app$q (smap$b ?v2) ?v0) (fun_app$q (smap$b ?v3) ?v1))) (= ?v0 ?v1))) :named a57))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream$) (?v2 A_stream_a_stream_fun$) (?v3 A_stream_a_stream_fun$)) (=> (and (forall ((?v4 A_stream$) (?v5 A_stream$)) (=> (and (member$b ?v4 (sset$a ?v0)) (and (member$b ?v5 (sset$a ?v1)) (= (fun_app$q ?v2 ?v4) (fun_app$q ?v3 ?v5)))) (= ?v4 ?v5))) (= (fun_app$r (smap$c ?v2) ?v0) (fun_app$r (smap$c ?v3) ?v1))) (= ?v0 ?v1))) :named a58))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream$) (?v2 A_stream_a_fun$) (?v3 A_stream_a_fun$)) (=> (and (forall ((?v4 A_stream$) (?v5 A_stream$)) (=> (and (member$b ?v4 (sset$a ?v0)) (and (member$b ?v5 (sset$a ?v1)) (= (fun_app$s ?v2 ?v4) (fun_app$s ?v3 ?v5)))) (= ?v4 ?v5))) (= (fun_app$t (smap$d ?v2) ?v0) (fun_app$t (smap$d ?v3) ?v1))) (= ?v0 ?v1))) :named a59))
(assert (! (forall ((?v0 A_stream$) (?v1 A_a_stream_stream_fun$) (?v2 A_a_stream_stream_fun$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 (fun_app$ sset$ ?v0)) (= (fun_app$m ?v1 ?v3) (fun_app$m ?v2 ?v3)))) (= (smap$ ?v1 ?v0) (smap$ ?v2 ?v0)))) :named a60))
(assert (! (forall ((?v0 A_stream$) (?v1 A_a_stream_fun$) (?v2 A_a_stream_fun$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 (fun_app$ sset$ ?v0)) (= (fun_app$n ?v1 ?v3) (fun_app$n ?v2 ?v3)))) (= (fun_app$o (smap$a ?v1) ?v0) (fun_app$o (smap$a ?v2) ?v0)))) :named a61))
(assert (! (forall ((?v0 A_stream$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 (fun_app$ sset$ ?v0)) (= (fun_app$p ?v1 ?v3) (fun_app$p ?v2 ?v3)))) (= (fun_app$q (smap$b ?v1) ?v0) (fun_app$q (smap$b ?v2) ?v0)))) :named a62))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_a_stream_fun$) (?v2 A_stream_a_stream_fun$)) (=> (forall ((?v3 A_stream$)) (=> (member$b ?v3 (sset$a ?v0)) (= (fun_app$q ?v1 ?v3) (fun_app$q ?v2 ?v3)))) (= (fun_app$r (smap$c ?v1) ?v0) (fun_app$r (smap$c ?v2) ?v0)))) :named a63))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_a_fun$) (?v2 A_stream_a_fun$)) (=> (forall ((?v3 A_stream$)) (=> (member$b ?v3 (sset$a ?v0)) (= (fun_app$s ?v1 ?v3) (fun_app$s ?v2 ?v3)))) (= (fun_app$t (smap$d ?v1) ?v0) (fun_app$t (smap$d ?v2) ?v0)))) :named a64))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_stream_stream_fun$) (?v3 A_a_stream_stream_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$ sset$ ?v1)) (= (fun_app$m ?v2 ?v4) (fun_app$m ?v3 ?v4))))) (= (smap$ ?v2 ?v0) (smap$ ?v3 ?v1)))) :named a65))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_stream_fun$) (?v3 A_a_stream_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$ sset$ ?v1)) (= (fun_app$n ?v2 ?v4) (fun_app$n ?v3 ?v4))))) (= (fun_app$o (smap$a ?v2) ?v0) (fun_app$o (smap$a ?v3) ?v1)))) :named a66))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$ sset$ ?v1)) (= (fun_app$p ?v2 ?v4) (fun_app$p ?v3 ?v4))))) (= (fun_app$q (smap$b ?v2) ?v0) (fun_app$q (smap$b ?v3) ?v1)))) :named a67))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream$) (?v2 A_stream_a_stream_fun$) (?v3 A_stream_a_stream_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_stream$)) (=> (member$b ?v4 (sset$a ?v1)) (= (fun_app$q ?v2 ?v4) (fun_app$q ?v3 ?v4))))) (= (fun_app$r (smap$c ?v2) ?v0) (fun_app$r (smap$c ?v3) ?v1)))) :named a68))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream$) (?v2 A_stream_a_fun$) (?v3 A_stream_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_stream$)) (=> (member$b ?v4 (sset$a ?v1)) (= (fun_app$s ?v2 ?v4) (fun_app$s ?v3 ?v4))))) (= (fun_app$t (smap$d ?v2) ?v0) (fun_app$t (smap$d ?v3) ?v1)))) :named a69))
(assert (! (forall ((?v0 A_stream_stream_a_stream_fun$) (?v1 A_stream_stream_stream$)) (= (shd$a (smap$e ?v0 ?v1)) (fun_app$t ?v0 (shd$b ?v1)))) :named a70))
(assert (! (forall ((?v0 A_stream_stream_a_fun$) (?v1 A_stream_stream_stream$)) (= (shd$ (smap$f ?v0 ?v1)) (fun_app$u ?v0 (shd$b ?v1)))) :named a71))
(assert (! (forall ((?v0 A_stream_a_stream_stream_fun$) (?v1 A_stream_stream$)) (= (shd$b (smap$g ?v0 ?v1)) (fun_app$o ?v0 (shd$a ?v1)))) :named a72))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_fun$) (?v1 A_stream_stream_stream$)) (= (shd$b (smap$h ?v0 ?v1)) (fun_app$r ?v0 (shd$b ?v1)))) :named a73))
(assert (! (forall ((?v0 A_a_stream_stream_fun$) (?v1 A_stream$)) (= (shd$b (smap$ ?v0 ?v1)) (fun_app$m ?v0 (shd$ ?v1)))) :named a74))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$)) (= (shd$a (fun_app$r (smap$c ?v0) ?v1)) (fun_app$q ?v0 (shd$a ?v1)))) :named a75))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$)) (= (shd$a (fun_app$o (smap$a ?v0) ?v1)) (fun_app$n ?v0 (shd$ ?v1)))) :named a76))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$)) (= (shd$ (fun_app$t (smap$d ?v0) ?v1)) (fun_app$s ?v0 (shd$a ?v1)))) :named a77))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (shd$ (fun_app$q (smap$b ?v0) ?v1)) (fun_app$p ?v0 (shd$ ?v1)))) :named a78))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$c (fun_app$q (smap$b ?v0) ?v1) ?v2) (fun_app$p ?v0 (snth$c ?v1 ?v2)))) :named a79))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$d (fun_app$o (smap$a ?v0) ?v1) ?v2) (fun_app$n ?v0 (snth$c ?v1 ?v2)))) :named a80))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (snth$c (fun_app$t (smap$d ?v0) ?v1) ?v2) (fun_app$s ?v0 (snth$d ?v1 ?v2)))) :named a81))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (snth$d (fun_app$r (smap$c ?v0) ?v1) ?v2) (fun_app$q ?v0 (snth$d ?v1 ?v2)))) :named a82))
(assert (! (forall ((?v0 A_a_stream_stream_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$b (smap$ ?v0 ?v1) ?v2) (fun_app$m ?v0 (snth$c ?v1 ?v2)))) :named a83))
(assert (! (forall ((?v0 A_stream_stream_a_fun$) (?v1 A_stream_stream_stream$) (?v2 Nat$)) (= (snth$c (smap$f ?v0 ?v1) ?v2) (fun_app$u ?v0 (snth$b ?v1 ?v2)))) :named a84))
(assert (! (forall ((?v0 A_stream_stream_a_stream_fun$) (?v1 A_stream_stream_stream$) (?v2 Nat$)) (= (snth$d (smap$e ?v0 ?v1) ?v2) (fun_app$t ?v0 (snth$b ?v1 ?v2)))) :named a85))
(assert (! (forall ((?v0 A_stream_a_stream_stream_fun$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (snth$b (smap$g ?v0 ?v1) ?v2) (fun_app$o ?v0 (snth$d ?v1 ?v2)))) :named a86))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_fun$) (?v1 A_stream_stream_stream$) (?v2 Nat$)) (= (snth$b (smap$h ?v0 ?v1) ?v2) (fun_app$r ?v0 (snth$b ?v1 ?v2)))) :named a87))
(assert (! (forall ((?v0 A_stream_stream_stream_a_fun$) (?v1 A_stream_stream_stream_stream$) (?v2 Nat$)) (= (snth$c (smap$i ?v0 ?v1) ?v2) (fun_app$v ?v0 (snth$ ?v1 ?v2)))) :named a88))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (= (fun_app$q (smap$b ?v0) ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$p ?v0 (snth$c ?v1 ?v3)) (snth$c ?v2 ?v3))))) :named a89))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$) (?v2 A_stream$)) (= (= (fun_app$t (smap$d ?v0) ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$s ?v0 (snth$d ?v1 ?v3)) (snth$c ?v2 ?v3))))) :named a90))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$) (?v2 A_stream_stream$)) (= (= (fun_app$o (smap$a ?v0) ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$n ?v0 (snth$c ?v1 ?v3)) (snth$d ?v2 ?v3))))) :named a91))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream$)) (= (= (fun_app$r (smap$c ?v0) ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$q ?v0 (snth$d ?v1 ?v3)) (snth$d ?v2 ?v3))))) :named a92))
(assert (! (forall ((?v0 A_stream_stream_a_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream$)) (= (= (smap$f ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$u ?v0 (snth$b ?v1 ?v3)) (snth$c ?v2 ?v3))))) :named a93))
(assert (! (forall ((?v0 A_a_stream_stream_fun$) (?v1 A_stream$) (?v2 A_stream_stream_stream$)) (= (= (smap$ ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$m ?v0 (snth$c ?v1 ?v3)) (snth$b ?v2 ?v3))))) :named a94))
(assert (! (forall ((?v0 A_stream_a_stream_stream_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream_stream$)) (= (= (smap$g ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$o ?v0 (snth$d ?v1 ?v3)) (snth$b ?v2 ?v3))))) :named a95))
(assert (! (forall ((?v0 A_stream_stream_a_stream_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream$)) (= (= (smap$e ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$t ?v0 (snth$b ?v1 ?v3)) (snth$d ?v2 ?v3))))) :named a96))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream_stream$)) (= (= (smap$h ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$r ?v0 (snth$b ?v1 ?v3)) (snth$b ?v2 ?v3))))) :named a97))
(assert (! (forall ((?v0 A_a_stream_stream_stream_fun$) (?v1 A_stream$) (?v2 A_stream_stream_stream_stream$)) (= (= (smap$j ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$w ?v0 (snth$c ?v1 ?v3)) (snth$ ?v2 ?v3))))) :named a98))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream_stream_stream_stream$)) (= (shd$c (sdrop$ ?v0 ?v1)) (snth$ ?v1 ?v0))) :named a99))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream_stream_stream$)) (= (shd$b (sdrop$a ?v0 ?v1)) (snth$b ?v1 ?v0))) :named a100))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream_stream$)) (= (shd$a (fun_app$r (sdrop$b ?v0) ?v1)) (snth$d ?v1 ?v0))) :named a101))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (= (shd$ (fun_app$q (sdrop$c ?v0) ?v1)) (snth$c ?v1 ?v0))) :named a102))
(assert (! (forall ((?v0 A_stream_stream_stream_bool_fun$) (?v1 A_stream_stream_stream_stream$)) (= (stream_all$ ?v0 ?v1) (forall ((?v2 Nat$)) (fun_app$l ?v0 (snth$ ?v1 ?v2))))) :named a103))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream_stream$)) (= (fun_app$e (stream_all$a ?v0) ?v1) (forall ((?v2 Nat$)) (fun_app$c ?v0 (snth$d ?v1 ?v2))))) :named a104))
(assert (! (forall ((?v0 A_stream_stream_bool_fun$) (?v1 A_stream_stream_stream$)) (= (fun_app$l (stream_all$b ?v0) ?v1) (forall ((?v2 Nat$)) (fun_app$e ?v0 (snth$b ?v1 ?v2))))) :named a105))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (= (fun_app$c (stream_all$c ?v0) ?v1) (forall ((?v2 Nat$)) (fun_app$a ?v0 (snth$c ?v1 ?v2))))) :named a106))
(check-sat)
;(get-unsat-core)
