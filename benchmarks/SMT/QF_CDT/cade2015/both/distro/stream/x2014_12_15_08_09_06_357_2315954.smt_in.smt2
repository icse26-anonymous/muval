; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 336
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort A_a_stream_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort Nat_a_stream_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_stream_stream_set$ 0)
(declare-sort A_a_stream_stream_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_stream_stream_a_fun$ 0)
(declare-sort Nat_a_stream_stream_fun$ 0)
(declare-sort A_stream_stream_bool_fun$ 0)
(declare-sort A_stream_stream_stream_set$ 0)
(declare-sort A_stream_a_stream_stream_fun$ 0)
(declare-sort A_stream_stream_a_stream_fun$ 0)
(declare-sort A_stream_stream_a_stream_stream_fun$ 0)
(declare-sort A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ 0)
(declare-sort A_stream_stream_a_stream_stream_fun_a_stream_stream_a_stream_stream_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (A_stream_stream$ (sCons$a (shd$a A_stream$) (stl$a A_stream_stream$)))
  (A_stream_stream_stream$ (sCons$b (shd$b A_stream_stream$) (stl$b A_stream_stream_stream$)))
  (A_stream_stream_stream_stream$ (sCons$c (shd$c A_stream_stream_stream$) (stl$c A_stream_stream_stream_stream$)))))
(declare-fun x$ () A$)
(declare-fun s1$ () A_stream$)
(declare-fun s2$ () A_stream$)
(declare-fun sup$ (A_set$ A_set$) A_set$)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun smap$ (A_stream_stream_a_fun$ A_stream_stream_stream$) A_stream$)
(declare-fun snth$ (A_stream$) Nat_a_fun$)
(declare-fun sset$ (A_stream$) A_set$)
(declare-fun zero$ () Nat$)
(declare-fun sdrop$ (Nat$ A_stream_stream_stream$) A_stream_stream_stream$)
(declare-fun smap$a (A_stream_stream_a_stream_fun$ A_stream_stream_stream$) A_stream_stream$)
(declare-fun smap$b (A_a_stream_stream_fun$ A_stream$) A_stream_stream_stream$)
(declare-fun smap$c (A_stream_a_stream_stream_fun$ A_stream_stream$) A_stream_stream_stream$)
(declare-fun smap$d (A_stream_stream_a_stream_stream_fun$ A_stream_stream_stream$) A_stream_stream_stream$)
(declare-fun smap$e (A_stream_a_fun$) A_stream_stream_a_stream_fun$)
(declare-fun smap$f (A_a_stream_fun$) A_stream_a_stream_stream_fun$)
(declare-fun smap$g (A_stream_a_stream_fun$) A_stream_stream_a_stream_stream_fun$)
(declare-fun smap$h (A_a_fun$) A_stream_a_stream_fun$)
(declare-fun snth$a (A_stream_stream_stream$) Nat_a_stream_stream_fun$)
(declare-fun snth$b (A_stream_stream$) Nat_a_stream_fun$)
(declare-fun snth$c (A_stream_stream_stream_stream$ Nat$) A_stream_stream_stream$)
(declare-fun sset$a (A_stream_stream_stream$) A_stream_stream_set$)
(declare-fun sset$b (A_stream_stream$) A_stream_set$)
(declare-fun compow$ (Nat$) A_stream_stream_a_stream_stream_fun_a_stream_stream_a_stream_stream_fun_fun$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun sdrop$a (Nat$) A_stream_stream_a_stream_stream_fun$)
(declare-fun sdrop$b (Nat$) A_stream_a_stream_fun$)
(declare-fun smerge$ (A_stream_stream_stream_stream$) A_stream_stream_stream$)
(declare-fun thesis$ () Bool)
(declare-fun compow$a (Nat$) A_stream_a_stream_fun_a_stream_a_stream_fun_fun$)
(declare-fun compow$b (Nat$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$ (Nat_a_fun$ Nat$) A$)
(declare-fun member$a (A_stream_stream_stream$ A_stream_stream_stream_set$) Bool)
(declare-fun member$b (A_stream_stream$ A_stream_stream_set$) Bool)
(declare-fun member$c (A_stream$ A_stream_set$) Bool)
(declare-fun smerge$a (A_stream_stream_stream$) A_stream_stream$)
(declare-fun smerge$b (A_stream_stream$) A_stream$)
(declare-fun streams$ (A_stream_stream_set$) A_stream_stream_stream_set$)
(declare-fun fun_app$a (A_stream_stream_bool_fun$ A_stream_stream$) Bool)
(declare-fun fun_app$b (Nat_a_stream_stream_fun$ Nat$) A_stream_stream$)
(declare-fun fun_app$c (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$d (Nat_a_stream_fun$ Nat$) A_stream$)
(declare-fun fun_app$e (A_bool_fun$ A$) Bool)
(declare-fun fun_app$f (A_stream_stream_a_fun$ A_stream_stream$) A$)
(declare-fun fun_app$g (A_stream_stream_a_stream_fun$ A_stream_stream$) A_stream$)
(declare-fun fun_app$h (A_a_stream_stream_fun$ A$) A_stream_stream$)
(declare-fun fun_app$i (A_stream_a_stream_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun fun_app$j (A_stream_stream_a_stream_stream_fun$ A_stream_stream$) A_stream_stream$)
(declare-fun fun_app$k (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$l (A_a_stream_fun$ A$) A_stream$)
(declare-fun fun_app$m (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$n (A_a_fun$ A$) A$)
(declare-fun fun_app$o (A_stream_stream_a_stream_stream_fun_a_stream_stream_a_stream_stream_fun_fun$ A_stream_stream_a_stream_stream_fun$) A_stream_stream_a_stream_stream_fun$)
(declare-fun fun_app$p (A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ A_stream_a_stream_fun$) A_stream_a_stream_fun$)
(declare-fun fun_app$q (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun siterate$ (A_stream_stream_a_stream_stream_fun$ A_stream_stream$) A_stream_stream_stream$)
(declare-fun streams$a (A_stream_set$) A_stream_stream_set$)
(declare-fun streams$b (A_set$) A_stream_set$)
(declare-fun siterate$a (A_stream_a_stream_fun$) A_stream_a_stream_stream_fun$)
(declare-fun siterate$b (A_a_fun$) A_a_stream_fun$)
(declare-fun stream_all$ (A_stream_stream_bool_fun$ A_stream_stream_stream$) Bool)
(declare-fun stream_all$a (A_stream_bool_fun$) A_stream_stream_bool_fun$)
(declare-fun stream_all$b (A_bool_fun$) A_stream_bool_fun$)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 Nat$)) (=> (= x$ (fun_app$ (snth$ s1$) ?v0)) thesis$)) :named a1))
(assert (! (member$ x$ (sset$ s1$)) :named a2))
(assert (! (member$ x$ (sup$ (sset$ s1$) (sset$ s2$))) :named a3))
(assert (! (forall ((?v0 A_stream_stream_bool_fun$) (?v1 A_stream_stream_stream$)) (= (stream_all$ ?v0 ?v1) (forall ((?v2 Nat$)) (fun_app$a ?v0 (fun_app$b (snth$a ?v1) ?v2))))) :named a4))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream_stream$)) (= (fun_app$a (stream_all$a ?v0) ?v1) (forall ((?v2 Nat$)) (fun_app$c ?v0 (fun_app$d (snth$b ?v1) ?v2))))) :named a5))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (= (fun_app$c (stream_all$b ?v0) ?v1) (forall ((?v2 Nat$)) (fun_app$e ?v0 (fun_app$ (snth$ ?v1) ?v2))))) :named a6))
(assert (! (forall ((?v0 A_stream_stream_a_fun$) (?v1 A_stream_stream_stream$) (?v2 Nat$)) (= (fun_app$ (snth$ (smap$ ?v0 ?v1)) ?v2) (fun_app$f ?v0 (fun_app$b (snth$a ?v1) ?v2)))) :named a7))
(assert (! (forall ((?v0 A_stream_stream_a_stream_fun$) (?v1 A_stream_stream_stream$) (?v2 Nat$)) (= (fun_app$d (snth$b (smap$a ?v0 ?v1)) ?v2) (fun_app$g ?v0 (fun_app$b (snth$a ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 A_a_stream_stream_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (fun_app$b (snth$a (smap$b ?v0 ?v1)) ?v2) (fun_app$h ?v0 (fun_app$ (snth$ ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 A_stream_a_stream_stream_fun$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (fun_app$b (snth$a (smap$c ?v0 ?v1)) ?v2) (fun_app$i ?v0 (fun_app$d (snth$b ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_fun$) (?v1 A_stream_stream_stream$) (?v2 Nat$)) (= (fun_app$b (snth$a (smap$d ?v0 ?v1)) ?v2) (fun_app$j ?v0 (fun_app$b (snth$a ?v1) ?v2)))) :named a11))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (fun_app$ (snth$ (fun_app$g (smap$e ?v0) ?v1)) ?v2) (fun_app$k ?v0 (fun_app$d (snth$b ?v1) ?v2)))) :named a12))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (fun_app$d (snth$b (fun_app$i (smap$f ?v0) ?v1)) ?v2) (fun_app$l ?v0 (fun_app$ (snth$ ?v1) ?v2)))) :named a13))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (fun_app$d (snth$b (fun_app$j (smap$g ?v0) ?v1)) ?v2) (fun_app$m ?v0 (fun_app$d (snth$b ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (fun_app$ (snth$ (fun_app$m (smap$h ?v0) ?v1)) ?v2) (fun_app$n ?v0 (fun_app$ (snth$ ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 A_stream_stream_set$)) (= (member$a ?v0 (streams$ ?v1)) (forall ((?v2 Nat$)) (member$b (fun_app$b (snth$a ?v0) ?v2) ?v1)))) :named a16))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$)) (= (member$b ?v0 (streams$a ?v1)) (forall ((?v2 Nat$)) (member$c (fun_app$d (snth$b ?v0) ?v2) ?v1)))) :named a17))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$)) (= (member$c ?v0 (streams$b ?v1)) (forall ((?v2 Nat$)) (member$ (fun_app$ (snth$ ?v0) ?v2) ?v1)))) :named a18))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 A_stream_stream_set$) (?v2 Nat$)) (=> (member$a ?v0 (streams$ ?v1)) (member$b (fun_app$b (snth$a ?v0) ?v2) ?v1))) :named a19))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$) (?v2 Nat$)) (=> (member$b ?v0 (streams$a ?v1)) (member$c (fun_app$d (snth$b ?v0) ?v2) ?v1))) :named a20))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$) (?v2 Nat$)) (=> (member$c ?v0 (streams$b ?v1)) (member$ (fun_app$ (snth$ ?v0) ?v2) ?v1))) :named a21))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 Nat$)) (member$b (fun_app$b (snth$a ?v0) ?v1) (sset$a ?v0))) :named a22))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 Nat$)) (member$c (fun_app$d (snth$b ?v0) ?v1) (sset$b ?v0))) :named a23))
(assert (! (forall ((?v0 A_stream$) (?v1 Nat$)) (member$ (fun_app$ (snth$ ?v0) ?v1) (sset$ ?v0))) :named a24))
(assert (! (forall ((?v0 A_a_stream_stream_fun$) (?v1 A_stream$) (?v2 A_stream_stream_stream$)) (= (= (smap$b ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$h ?v0 (fun_app$ (snth$ ?v1) ?v3)) (fun_app$b (snth$a ?v2) ?v3))))) :named a25))
(assert (! (forall ((?v0 A_stream_a_stream_stream_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream_stream$)) (= (= (smap$c ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$i ?v0 (fun_app$d (snth$b ?v1) ?v3)) (fun_app$b (snth$a ?v2) ?v3))))) :named a26))
(assert (! (forall ((?v0 A_stream_stream_a_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream$)) (= (= (smap$ ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$f ?v0 (fun_app$b (snth$a ?v1) ?v3)) (fun_app$ (snth$ ?v2) ?v3))))) :named a27))
(assert (! (forall ((?v0 A_stream_stream_a_stream_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream$)) (= (= (smap$a ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$g ?v0 (fun_app$b (snth$a ?v1) ?v3)) (fun_app$d (snth$b ?v2) ?v3))))) :named a28))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream_stream$)) (= (= (smap$d ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$j ?v0 (fun_app$b (snth$a ?v1) ?v3)) (fun_app$b (snth$a ?v2) ?v3))))) :named a29))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$) (?v2 A_stream_stream$)) (= (= (fun_app$i (smap$f ?v0) ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$l ?v0 (fun_app$ (snth$ ?v1) ?v3)) (fun_app$d (snth$b ?v2) ?v3))))) :named a30))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$) (?v2 A_stream$)) (= (= (fun_app$g (smap$e ?v0) ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$k ?v0 (fun_app$d (snth$b ?v1) ?v3)) (fun_app$ (snth$ ?v2) ?v3))))) :named a31))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream$)) (= (= (fun_app$j (smap$g ?v0) ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$m ?v0 (fun_app$d (snth$b ?v1) ?v3)) (fun_app$d (snth$b ?v2) ?v3))))) :named a32))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (= (fun_app$m (smap$h ?v0) ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$n ?v0 (fun_app$ (snth$ ?v1) ?v3)) (fun_app$ (snth$ ?v2) ?v3))))) :named a33))
(assert (! (forall ((?v0 A_stream_stream_stream_stream$) (?v1 Nat$) (?v2 Nat$)) (member$b (fun_app$b (snth$a (snth$c ?v0 ?v1)) ?v2) (sset$a (smerge$ ?v0)))) :named a34))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 Nat$) (?v2 Nat$)) (member$c (fun_app$d (snth$b (fun_app$b (snth$a ?v0) ?v1)) ?v2) (sset$b (smerge$a ?v0)))) :named a35))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 Nat$) (?v2 Nat$)) (member$ (fun_app$ (snth$ (fun_app$d (snth$b ?v0) ?v1)) ?v2) (sset$ (smerge$b ?v0)))) :named a36))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_fun$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (fun_app$b (snth$a (siterate$ ?v0 ?v1)) ?v2) (fun_app$j (fun_app$o (compow$ ?v2) ?v0) ?v1))) :named a37))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (fun_app$d (snth$b (fun_app$i (siterate$a ?v0) ?v1)) ?v2) (fun_app$m (fun_app$p (compow$a ?v2) ?v0) ?v1))) :named a38))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 Nat$)) (= (fun_app$ (snth$ (fun_app$l (siterate$b ?v0) ?v1)) ?v2) (fun_app$n (fun_app$q (compow$b ?v2) ?v0) ?v1))) :named a39))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream_stream_stream$)) (= (shd$b (sdrop$ ?v0 ?v1)) (fun_app$b (snth$a ?v1) ?v0))) :named a40))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream_stream$)) (= (shd$a (fun_app$j (sdrop$a ?v0) ?v1)) (fun_app$d (snth$b ?v1) ?v0))) :named a41))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (= (shd$ (fun_app$m (sdrop$b ?v0) ?v1)) (fun_app$ (snth$ ?v1) ?v0))) :named a42))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream_stream_stream$) (?v2 Nat$)) (= (fun_app$b (snth$a (sdrop$ ?v0 ?v1)) ?v2) (fun_app$b (snth$a ?v1) (plus$ ?v0 ?v2)))) :named a43))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (fun_app$d (snth$b (fun_app$j (sdrop$a ?v0) ?v1)) ?v2) (fun_app$d (snth$b ?v1) (plus$ ?v0 ?v2)))) :named a44))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$) (?v2 Nat$)) (= (fun_app$ (snth$ (fun_app$m (sdrop$b ?v0) ?v1)) ?v2) (fun_app$ (snth$ ?v1) (plus$ ?v0 ?v2)))) :named a45))
(assert (! (forall ((?v0 A_stream_stream_stream$)) (! (= (fun_app$b (snth$a ?v0) zero$) (shd$b ?v0)) :pattern ((snth$a ?v0)))) :named a46))
(assert (! (forall ((?v0 A_stream_stream$)) (! (= (fun_app$d (snth$b ?v0) zero$) (shd$a ?v0)) :pattern ((snth$b ?v0)))) :named a47))
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$ (snth$ ?v0) zero$) (shd$ ?v0)) :pattern ((snth$ ?v0)))) :named a48))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_stream_stream$)) (= (fun_app$j (sdrop$a ?v0) (fun_app$j (sdrop$a ?v1) ?v2)) (fun_app$j (sdrop$a (plus$ ?v1 ?v0)) ?v2))) :named a49))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_stream$)) (= (fun_app$m (sdrop$b ?v0) (fun_app$m (sdrop$b ?v1) ?v2)) (fun_app$m (sdrop$b (plus$ ?v1 ?v0)) ?v2))) :named a50))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_stream$)) (= (shd$a (fun_app$j (smap$g ?v0) ?v1)) (fun_app$m ?v0 (shd$a ?v1)))) :named a51))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$)) (= (shd$a (fun_app$i (smap$f ?v0) ?v1)) (fun_app$l ?v0 (shd$ ?v1)))) :named a52))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$)) (= (shd$ (fun_app$g (smap$e ?v0) ?v1)) (fun_app$k ?v0 (shd$a ?v1)))) :named a53))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (shd$ (fun_app$m (smap$h ?v0) ?v1)) (fun_app$n ?v0 (shd$ ?v1)))) :named a54))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream_a_stream_fun$) (?v2 A_stream_stream$)) (= (fun_app$j (sdrop$a ?v0) (fun_app$j (smap$g ?v1) ?v2)) (fun_app$j (smap$g ?v1) (fun_app$j (sdrop$a ?v0) ?v2)))) :named a55))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_stream_fun$) (?v2 A_stream$)) (= (fun_app$j (sdrop$a ?v0) (fun_app$i (smap$f ?v1) ?v2)) (fun_app$i (smap$f ?v1) (fun_app$m (sdrop$b ?v0) ?v2)))) :named a56))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream_a_fun$) (?v2 A_stream_stream$)) (= (fun_app$m (sdrop$b ?v0) (fun_app$g (smap$e ?v1) ?v2)) (fun_app$g (smap$e ?v1) (fun_app$j (sdrop$a ?v0) ?v2)))) :named a57))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (fun_app$m (sdrop$b ?v0) (fun_app$m (smap$h ?v1) ?v2)) (fun_app$m (smap$h ?v1) (fun_app$m (sdrop$b ?v0) ?v2)))) :named a58))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream_a_stream_fun$) (?v2 A_stream$)) (= (fun_app$j (sdrop$a ?v0) (fun_app$i (siterate$a ?v1) ?v2)) (fun_app$i (siterate$a ?v1) (fun_app$m (fun_app$p (compow$a ?v0) ?v1) ?v2)))) :named a59))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$m (sdrop$b ?v0) (fun_app$l (siterate$b ?v1) ?v2)) (fun_app$l (siterate$b ?v1) (fun_app$n (fun_app$q (compow$b ?v0) ?v1) ?v2)))) :named a60))
(check-sat)
;(get-unsat-core)
