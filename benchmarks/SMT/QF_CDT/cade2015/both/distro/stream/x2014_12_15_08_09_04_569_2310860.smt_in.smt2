; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 237
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort A_a_stream_bool_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-fun x$ () A$)
(declare-fun s1$ () A_stream$)
(declare-fun s2$ () A_stream$)
(declare-fun sup$ (A_set$ A_set$) A_set$)
(declare-fun smap$ (A_a_fun$ A_stream$) A_stream$)
(declare-fun snth$ (A_stream$ Nat$) A$)
(declare-fun sset$ (A_stream$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_a_fun$ A$) A$)
(declare-fun smember$ (A$ A_stream$) Bool)
(declare-fun fun_app$a (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$b (A_a_stream_bool_fun_fun$ A$) A_stream_bool_fun$)
(declare-fun sinterleave$ (A_stream$ A_stream$) A_stream$)
(assert (! (not (member$ x$ (sset$ (sinterleave$ s1$ s2$)))) :named a0))
(assert (! (member$ x$ (sup$ (sset$ s1$) (sset$ s2$))) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A_stream$)) (! (= (smember$ ?v0 ?v1) (member$ ?v0 (sset$ ?v1))) :pattern ((smember$ ?v0 ?v1)))) :named a2))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$)) (= (shd$ (sinterleave$ ?v0 ?v1)) (shd$ ?v0))) :named a3))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$)) (= (stl$ (sinterleave$ ?v0 ?v1)) (sinterleave$ ?v1 (stl$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A_stream$)) (! (= (sinterleave$ (sCons$ ?v0 ?v1) ?v2) (sCons$ ?v0 (sinterleave$ ?v2 ?v1))) :pattern ((sinterleave$ (sCons$ ?v0 ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A_stream$) (?v1 Nat$)) (member$ (snth$ ?v0 ?v1) (sset$ ?v0))) :named a6))
(assert (! (forall ((?v0 A_stream$)) (member$ (shd$ ?v0) (sset$ ?v0))) :named a7))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$ ?v4 (sset$ ?v0)) (and (member$ ?v5 (sset$ ?v1)) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v5)))) (= ?v4 ?v5))) (= (smap$ ?v2 ?v0) (smap$ ?v3 ?v1))) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 A_stream$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (=> (forall ((?v3 A$)) (=> (member$ ?v3 (sset$ ?v0)) (= (fun_app$ ?v1 ?v3) (fun_app$ ?v2 ?v3)))) (= (smap$ ?v1 ?v0) (smap$ ?v2 ?v0)))) :named a9))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$ ?v4 (sset$ ?v1)) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (smap$ ?v2 ?v0) (smap$ ?v3 ?v1)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_stream$)) (=> (member$ ?v0 (sset$ (stl$ ?v1))) (member$ ?v0 (sset$ ?v1)))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A_a_stream_bool_fun_fun$)) (=> (and (member$ ?v0 (sset$ ?v1)) (and (forall ((?v3 A$) (?v4 A_stream$)) (fun_app$a (fun_app$b ?v2 ?v3) (sCons$ ?v3 ?v4))) (forall ((?v3 A$) (?v4 A_stream$) (?v5 A$)) (=> (and (member$ ?v5 (sset$ ?v4)) (fun_app$a (fun_app$b ?v2 ?v5) ?v4)) (fun_app$a (fun_app$b ?v2 ?v5) (sCons$ ?v3 ?v4)))))) (fun_app$a (fun_app$b ?v2 ?v0) ?v1))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_stream$)) (=> (and (member$ ?v0 (sset$ ?v1)) (and (forall ((?v2 A_stream$)) (=> (= ?v1 (sCons$ ?v0 ?v2)) false)) (forall ((?v2 A$) (?v3 A_stream$)) (=> (and (= ?v1 (sCons$ ?v2 ?v3)) (member$ ?v0 (sset$ ?v3))) false)))) false)) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (stl$ (smap$ ?v0 ?v1)) (smap$ ?v0 (stl$ ?v1)))) :named a15))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (shd$ (smap$ ?v0 ?v1)) (fun_app$ ?v0 (shd$ ?v1)))) :named a16))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$ (smap$ ?v0 ?v1) ?v2) (fun_app$ ?v0 (snth$ ?v1 ?v2)))) :named a17))
(check-sat)
;(get-unsat-core)
