; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 169
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort C_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort C_a_fun$ 0)
(declare-sort C_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort C_bool_fun$ 0)
(declare-sort A_a_set_fun$ 0)
(declare-sort A_b_set_fun$ 0)
(declare-sort A_c_set_fun$ 0)
(declare-sort B_a_set_fun$ 0)
(declare-sort B_b_set_fun$ 0)
(declare-sort B_c_set_fun$ 0)
(declare-sort C_a_set_fun$ 0)
(declare-sort C_b_set_fun$ 0)
(declare-sort C_c_set_fun$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_b_prod_set$ 0)
(declare-sort A_c_prod_set$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort B_a_prod_set$ 0)
(declare-sort B_c_prod_set$ 0)
(declare-sort B_stream_set$ 0)
(declare-sort C_stream_set$ 0)
(declare-sort B_c_a_fun_fun$ 0)
(declare-sort A_b_c_prod_fun$ 0)
(declare-sort B_c_prod_a_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_c_bool_fun_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort A_a_a_set_fun_fun$ 0)
(declare-sort A_a_b_set_fun_fun$ 0)
(declare-sort A_a_c_set_fun_fun$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_b_a_set_fun_fun$ 0)
(declare-sort A_b_b_set_fun_fun$ 0)
(declare-sort A_b_c_set_fun_fun$ 0)
(declare-sort A_b_prod_bool_fun$ 0)
(declare-sort A_c_a_set_fun_fun$ 0)
(declare-sort A_c_b_set_fun_fun$ 0)
(declare-sort A_c_c_set_fun_fun$ 0)
(declare-sort A_c_prod_bool_fun$ 0)
(declare-sort B_a_a_set_fun_fun$ 0)
(declare-sort B_a_b_set_fun_fun$ 0)
(declare-sort B_a_c_set_fun_fun$ 0)
(declare-sort B_a_prod_bool_fun$ 0)
(declare-sort B_c_prod_bool_fun$ 0)
(declare-sort A_a_prod_a_set_fun$ 0)
(declare-sort A_a_prod_b_set_fun$ 0)
(declare-sort A_a_prod_c_set_fun$ 0)
(declare-sort A_a_prod_stream_set$ 0)
(declare-sort A_b_c_prod_prod_set$ 0)
(declare-sort A_b_prod_stream_set$ 0)
(declare-sort A_c_prod_stream_set$ 0)
(declare-sort A_stream_stream_set$ 0)
(declare-sort B_a_prod_stream_set$ 0)
(declare-sort B_c_prod_stream_set$ 0)
(declare-sort A_b_c_prod_bool_fun_fun$ 0)
(declare-sort A_a_a_stream_set_fun_fun$ 0)
(declare-sort A_a_b_c_prod_set_fun_fun$ 0)
(declare-sort A_b_a_prod_prod_bool_fun$ 0)
(declare-sort A_b_c_prod_prod_bool_fun$ 0)
(declare-sort A_a_prod_a_stream_set_fun$ 0)
(declare-sort A_a_prod_b_c_prod_set_fun$ 0)
(declare-sort A_b_c_prod_prod_stream_set$ 0)
(declare-sort B_c_a_fun_fun_b_c_prod_a_fun_fun$ 0)
(declare-sort A_a_a_set_fun_fun_a_a_prod_a_set_fun_fun$ 0)
(declare-sort A_a_b_set_fun_fun_a_a_prod_b_set_fun_fun$ 0)
(declare-sort A_a_c_set_fun_fun_a_a_prod_c_set_fun_fun$ 0)
(declare-sort A_a_a_stream_set_fun_fun_a_a_prod_a_stream_set_fun_fun$ 0)
(declare-sort A_a_b_c_prod_set_fun_fun_a_a_prod_b_c_prod_set_fun_fun$ 0)
(declare-datatypes () ((B_c_prod$ (pair$ (fst$ B$) (snd$ C$)))))
(declare-codatatypes () ((B_c_prod_stream$ (sCons$ (shd$ B_c_prod$) (stl$ B_c_prod_stream$)))
  (B_stream$ (sCons$a (shd$a B$) (stl$a B_stream$)))
  (C_stream$ (sCons$b (shd$b C$) (stl$b C_stream$)))
  (A_stream$ (sCons$c (shd$c A$) (stl$c A_stream$)))))
(declare-datatypes () ((A_a_prod$ (pair$a (fst$a A$) (snd$a A$)))))
(declare-codatatypes () ((A_a_prod_stream$ (sCons$d (shd$d A_a_prod$) (stl$d A_a_prod_stream$)))))
(declare-datatypes () ((A_b_prod$ (pair$b (fst$b A$) (snd$b B$)))))
(declare-codatatypes () ((A_b_prod_stream$ (sCons$e (shd$e A_b_prod$) (stl$e A_b_prod_stream$)))))
(declare-datatypes () ((A_c_prod$ (pair$c (fst$c A$) (snd$c C$)))))
(declare-codatatypes () ((A_c_prod_stream$ (sCons$f (shd$f A_c_prod$) (stl$f A_c_prod_stream$)))))
(declare-datatypes () ((B_a_prod$ (pair$d (fst$d B$) (snd$d A$)))))
(declare-codatatypes () ((B_a_prod_stream$ (sCons$g (shd$g B_a_prod$) (stl$g B_a_prod_stream$)))))
(declare-datatypes () ((B_b_prod$ (pair$e (fst$e B$) (snd$e B$)))))
(declare-codatatypes () ((B_b_prod_stream$ (sCons$h (shd$h B_b_prod$) (stl$h B_b_prod_stream$)))))
(declare-datatypes () ((C_a_prod$ (pair$f (fst$f C$) (snd$f A$)))))
(declare-codatatypes () ((C_a_prod_stream$ (sCons$i (shd$i C_a_prod$) (stl$i C_a_prod_stream$)))))
(declare-datatypes () ((C_b_prod$ (pair$g (fst$g C$) (snd$g B$)))))
(declare-codatatypes () ((C_b_prod_stream$ (sCons$j (shd$j C_b_prod$) (stl$j C_b_prod_stream$)))))
(declare-datatypes () ((C_c_prod$ (pair$h (fst$h C$) (snd$h C$)))))
(declare-codatatypes () ((C_c_prod_stream$ (sCons$k (shd$k C_c_prod$) (stl$k C_c_prod_stream$)))))
(declare-datatypes () ((B_c_prod_a_prod$ (pair$i (fst$i B_c_prod$) (snd$i A$)))))
(declare-codatatypes () ((B_c_prod_a_prod_stream$ (sCons$l (shd$l B_c_prod_a_prod$) (stl$l B_c_prod_a_prod_stream$)))))
(declare-datatypes () ((A_b_c_prod_prod$ (pair$j (fst$j A$) (snd$j B_c_prod$)))))
(declare-codatatypes () ((A_b_c_prod_prod_stream$ (sCons$m (shd$m A_b_c_prod_prod$) (stl$m A_b_c_prod_prod_stream$)))))
(declare-datatypes () ((A_b_a_prod_prod$ (pair$k (fst$k A$) (snd$k B_a_prod$)))))
(declare-codatatypes () ((A_b_a_prod_prod_stream$ (sCons$n (shd$n A_b_a_prod_prod$) (stl$n A_b_a_prod_prod_stream$)))
  (A_stream_stream$ (sCons$o (shd$o A_stream$) (stl$o A_stream_stream$)))
  (A_stream_set_stream$ (sCons$p (shd$p A_stream_set$) (stl$p A_stream_set_stream$)))
  (B_c_prod_set_stream$ (sCons$q (shd$q B_c_prod_set$) (stl$q B_c_prod_set_stream$)))
  (C_set_stream$ (sCons$r (shd$r C_set$) (stl$r C_set_stream$)))
  (B_set_stream$ (sCons$s (shd$s B_set$) (stl$s B_set_stream$)))
  (A_set_stream$ (sCons$t (shd$t A_set$) (stl$t A_set_stream$)))))
(declare-fun f$ () B_c_a_fun_fun$)
(declare-fun s$ () A_stream$)
(declare-fun s1$ () B_stream$)
(declare-fun s2$ () C_stream$)
(declare-fun smap$ (A_a_fun$ A_stream$) A_stream$)
(declare-fun snth$ (B_c_prod_stream$ Nat$) B_c_prod$)
(declare-fun sset$ (A_stream$) A_set$)
(declare-fun szip$ (B_stream$ C_stream$) B_c_prod_stream$)
(declare-fun curry$ (A_a_prod_b_set_fun$) A_a_b_set_fun_fun$)
(declare-fun smap$a (B_a_fun$ B_stream$) A_stream$)
(declare-fun smap$b (C_a_fun$ C_stream$) A_stream$)
(declare-fun smap$c (A_b_fun$ A_stream$) B_stream$)
(declare-fun smap$d (B_b_fun$ B_stream$) B_stream$)
(declare-fun smap$e (C_b_fun$ C_stream$) B_stream$)
(declare-fun smap$f (A_c_fun$ A_stream$) C_stream$)
(declare-fun smap$g (B_c_fun$ B_stream$) C_stream$)
(declare-fun smap$h (C_c_fun$ C_stream$) C_stream$)
(declare-fun smap$i (A_b_c_prod_fun$ A_stream$) B_c_prod_stream$)
(declare-fun smap$j (A_a_prod_a_stream_set_fun$ A_a_prod_stream$) A_stream_set_stream$)
(declare-fun smap$k (A_a_prod_b_c_prod_set_fun$ A_a_prod_stream$) B_c_prod_set_stream$)
(declare-fun smap$l (A_a_prod_c_set_fun$ A_a_prod_stream$) C_set_stream$)
(declare-fun smap$m (A_a_prod_b_set_fun$ A_a_prod_stream$) B_set_stream$)
(declare-fun smap$n (A_a_prod_a_set_fun$ A_a_prod_stream$) A_set_stream$)
(declare-fun smap$o (B_c_prod_a_fun$ B_c_prod_stream$) A_stream$)
(declare-fun smap2$ (A_a_a_stream_set_fun_fun$ A_stream$ A_stream$) A_stream_set_stream$)
(declare-fun snth$a (A_stream$ Nat$) A$)
(declare-fun snth$b (B_stream$ Nat$) B$)
(declare-fun snth$c (C_stream$ Nat$) C$)
(declare-fun snth$d (A_a_prod_stream$ Nat$) A_a_prod$)
(declare-fun snth$e (A_b_prod_stream$ Nat$) A_b_prod$)
(declare-fun snth$f (A_c_prod_stream$ Nat$) A_c_prod$)
(declare-fun snth$g (B_a_prod_stream$ Nat$) B_a_prod$)
(declare-fun snth$h (B_b_prod_stream$ Nat$) B_b_prod$)
(declare-fun snth$i (C_a_prod_stream$ Nat$) C_a_prod$)
(declare-fun snth$j (C_b_prod_stream$ Nat$) C_b_prod$)
(declare-fun snth$k (C_c_prod_stream$ Nat$) C_c_prod$)
(declare-fun snth$l (B_c_prod_a_prod_stream$ Nat$) B_c_prod_a_prod$)
(declare-fun snth$m (A_b_c_prod_prod_stream$ Nat$) A_b_c_prod_prod$)
(declare-fun snth$n (A_b_a_prod_prod_stream$ Nat$) A_b_a_prod_prod$)
(declare-fun snth$o (A_stream_stream$ Nat$) A_stream$)
(declare-fun sset$a (B_stream$) B_set$)
(declare-fun sset$b (C_stream$) C_set$)
(declare-fun sset$c (B_c_prod_stream$) B_c_prod_set$)
(declare-fun sset$d (A_stream_stream$) A_stream_set$)
(declare-fun sset$e (B_a_prod_stream$) B_a_prod_set$)
(declare-fun sset$f (A_c_prod_stream$) A_c_prod_set$)
(declare-fun sset$g (A_b_prod_stream$) A_b_prod_set$)
(declare-fun sset$h (A_a_prod_stream$) A_a_prod_set$)
(declare-fun sset$i (A_b_c_prod_prod_stream$) A_b_c_prod_prod_set$)
(declare-fun szip$a (A_stream$ A_stream$) A_a_prod_stream$)
(declare-fun szip$b (A_stream$ B_stream$) A_b_prod_stream$)
(declare-fun szip$c (A_stream$ C_stream$) A_c_prod_stream$)
(declare-fun szip$d (B_stream$ A_stream$) B_a_prod_stream$)
(declare-fun szip$e (B_stream$ B_stream$) B_b_prod_stream$)
(declare-fun szip$f (C_stream$ A_stream$) C_a_prod_stream$)
(declare-fun szip$g (C_stream$ B_stream$) C_b_prod_stream$)
(declare-fun szip$h (C_stream$ C_stream$) C_c_prod_stream$)
(declare-fun szip$i (B_c_prod_stream$ A_stream$) B_c_prod_a_prod_stream$)
(declare-fun curry$a (A_a_prod_a_set_fun$) A_a_a_set_fun_fun$)
(declare-fun curry$b (B_c_prod_a_fun$) B_c_a_fun_fun$)
(declare-fun member$ (A_stream$ A_stream_set$) Bool)
(declare-fun smap2$a (A_a_b_c_prod_set_fun_fun$ A_stream$ A_stream$) B_c_prod_set_stream$)
(declare-fun smap2$b (A_a_c_set_fun_fun$ A_stream$ A_stream$) C_set_stream$)
(declare-fun smap2$c (A_a_b_set_fun_fun$ A_stream$ A_stream$) B_set_stream$)
(declare-fun smap2$d (A_a_a_set_fun_fun$ A_stream$ A_stream$) A_set_stream$)
(declare-fun smap2$e (B_c_a_fun_fun$ B_stream$ C_stream$) A_stream$)
(declare-fun fun_app$ (B_c_prod_a_fun$ B_c_prod$) A$)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (B_stream$ B_stream_set$) Bool)
(declare-fun member$c (B$ B_set$) Bool)
(declare-fun member$d (C_stream$ C_stream_set$) Bool)
(declare-fun member$e (C$ C_set$) Bool)
(declare-fun member$f (B_c_prod_stream$ B_c_prod_stream_set$) Bool)
(declare-fun member$g (B_c_prod$ B_c_prod_set$) Bool)
(declare-fun member$h (A_stream_stream$ A_stream_stream_set$) Bool)
(declare-fun member$i (B_a_prod_stream$ B_a_prod_stream_set$) Bool)
(declare-fun member$j (B_a_prod$ B_a_prod_set$) Bool)
(declare-fun member$k (A_c_prod_stream$ A_c_prod_stream_set$) Bool)
(declare-fun member$l (A_c_prod$ A_c_prod_set$) Bool)
(declare-fun member$m (A_b_prod_stream$ A_b_prod_stream_set$) Bool)
(declare-fun member$n (A_b_prod$ A_b_prod_set$) Bool)
(declare-fun member$o (A_a_prod_stream$ A_a_prod_stream_set$) Bool)
(declare-fun member$p (A_a_prod$ A_a_prod_set$) Bool)
(declare-fun member$q (A_b_c_prod_prod_stream$ A_b_c_prod_prod_stream_set$) Bool)
(declare-fun member$r (A_b_c_prod_prod$ A_b_c_prod_prod_set$) Bool)
(declare-fun streams$ (A_set$) A_stream_set$)
(declare-fun fun_app$a (B_c_a_fun_fun_b_c_prod_a_fun_fun$ B_c_a_fun_fun$) B_c_prod_a_fun$)
(declare-fun fun_app$b (C_a_fun$ C$) A$)
(declare-fun fun_app$c (B_c_a_fun_fun$ B$) C_a_fun$)
(declare-fun fun_app$d (A_a_prod_a_stream_set_fun$ A_a_prod$) A_stream_set$)
(declare-fun fun_app$e (A_a_a_stream_set_fun_fun_a_a_prod_a_stream_set_fun_fun$ A_a_a_stream_set_fun_fun$) A_a_prod_a_stream_set_fun$)
(declare-fun fun_app$f (A_a_prod_b_c_prod_set_fun$ A_a_prod$) B_c_prod_set$)
(declare-fun fun_app$g (A_a_b_c_prod_set_fun_fun_a_a_prod_b_c_prod_set_fun_fun$ A_a_b_c_prod_set_fun_fun$) A_a_prod_b_c_prod_set_fun$)
(declare-fun fun_app$h (A_a_prod_c_set_fun$ A_a_prod$) C_set$)
(declare-fun fun_app$i (A_a_c_set_fun_fun_a_a_prod_c_set_fun_fun$ A_a_c_set_fun_fun$) A_a_prod_c_set_fun$)
(declare-fun fun_app$j (A_a_prod_b_set_fun$ A_a_prod$) B_set$)
(declare-fun fun_app$k (A_a_b_set_fun_fun_a_a_prod_b_set_fun_fun$ A_a_b_set_fun_fun$) A_a_prod_b_set_fun$)
(declare-fun fun_app$l (A_a_prod_a_set_fun$ A_a_prod$) A_set$)
(declare-fun fun_app$m (A_a_a_set_fun_fun_a_a_prod_a_set_fun_fun$ A_a_a_set_fun_fun$) A_a_prod_a_set_fun$)
(declare-fun fun_app$n (A_bool_fun$ A$) Bool)
(declare-fun fun_app$o (B_bool_fun$ B$) Bool)
(declare-fun fun_app$p (C_bool_fun$ C$) Bool)
(declare-fun fun_app$q (B_c_prod_bool_fun$ B_c_prod$) Bool)
(declare-fun fun_app$r (B_a_prod_bool_fun$ B_a_prod$) Bool)
(declare-fun fun_app$s (A_c_prod_bool_fun$ A_c_prod$) Bool)
(declare-fun fun_app$t (A_b_prod_bool_fun$ A_b_prod$) Bool)
(declare-fun fun_app$u (A_a_prod_bool_fun$ A_a_prod$) Bool)
(declare-fun fun_app$v (A_b_c_prod_prod_bool_fun$ A_b_c_prod_prod$) Bool)
(declare-fun fun_app$w (A_b_a_prod_prod_bool_fun$ A_b_a_prod_prod$) Bool)
(declare-fun fun_app$x (A_a_fun$ A$) A$)
(declare-fun fun_app$y (B_a_fun$ B$) A$)
(declare-fun fun_app$z (A_b_fun$ A$) B$)
(declare-fun streams$a (B_set$) B_stream_set$)
(declare-fun streams$b (C_set$) C_stream_set$)
(declare-fun streams$c (B_c_prod_set$) B_c_prod_stream_set$)
(declare-fun streams$d (A_stream_set$) A_stream_stream_set$)
(declare-fun streams$e (B_a_prod_set$) B_a_prod_stream_set$)
(declare-fun streams$f (A_c_prod_set$) A_c_prod_stream_set$)
(declare-fun streams$g (A_b_prod_set$) A_b_prod_stream_set$)
(declare-fun streams$h (A_a_prod_set$) A_a_prod_stream_set$)
(declare-fun streams$i (A_b_c_prod_prod_set$) A_b_c_prod_prod_stream_set$)
(declare-fun case_prod$ () B_c_a_fun_fun_b_c_prod_a_fun_fun$)
(declare-fun fun_app$aa (B_b_fun$ B$) B$)
(declare-fun fun_app$ab (C_b_fun$ C$) B$)
(declare-fun fun_app$ac (A_c_fun$ A$) C$)
(declare-fun fun_app$ad (B_c_fun$ B$) C$)
(declare-fun fun_app$ae (C_c_fun$ C$) C$)
(declare-fun fun_app$af (A_b_c_prod_fun$ A$) B_c_prod$)
(declare-fun fun_app$ag (A_c_set_fun$ A$) C_set$)
(declare-fun fun_app$ah (B_a_c_set_fun_fun$ B$) A_c_set_fun$)
(declare-fun fun_app$ai (A_b_set_fun$ A$) B_set$)
(declare-fun fun_app$aj (B_a_b_set_fun_fun$ B$) A_b_set_fun$)
(declare-fun fun_app$ak (A_a_set_fun$ A$) A_set$)
(declare-fun fun_app$al (B_a_a_set_fun_fun$ B$) A_a_set_fun$)
(declare-fun fun_app$am (C_c_set_fun$ C$) C_set$)
(declare-fun fun_app$an (A_c_c_set_fun_fun$ A$) C_c_set_fun$)
(declare-fun fun_app$ao (C_b_set_fun$ C$) B_set$)
(declare-fun fun_app$ap (A_c_b_set_fun_fun$ A$) C_b_set_fun$)
(declare-fun fun_app$aq (C_a_set_fun$ C$) A_set$)
(declare-fun fun_app$ar (A_c_a_set_fun_fun$ A$) C_a_set_fun$)
(declare-fun fun_app$as (B_c_set_fun$ B$) C_set$)
(declare-fun fun_app$at (A_b_c_set_fun_fun$ A$) B_c_set_fun$)
(declare-fun fun_app$au (B_b_set_fun$ B$) B_set$)
(declare-fun fun_app$av (A_b_b_set_fun_fun$ A$) B_b_set_fun$)
(declare-fun fun_app$aw (B_a_set_fun$ B$) A_set$)
(declare-fun fun_app$ax (A_b_a_set_fun_fun$ A$) B_a_set_fun$)
(declare-fun fun_app$ay (A_a_c_set_fun_fun$ A$) A_c_set_fun$)
(declare-fun fun_app$az (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$ba (A_b_c_prod_bool_fun_fun$ A$) B_c_prod_bool_fun$)
(declare-fun fun_app$bb (A_c_bool_fun_fun$ A$) C_bool_fun$)
(declare-fun fun_app$bc (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$bd (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun case_prod$a () A_a_a_stream_set_fun_fun_a_a_prod_a_stream_set_fun_fun$)
(declare-fun case_prod$b () A_a_b_c_prod_set_fun_fun_a_a_prod_b_c_prod_set_fun_fun$)
(declare-fun case_prod$c () A_a_c_set_fun_fun_a_a_prod_c_set_fun_fun$)
(declare-fun case_prod$d () A_a_b_set_fun_fun_a_a_prod_b_set_fun_fun$)
(declare-fun case_prod$e () A_a_a_set_fun_fun_a_a_prod_a_set_fun_fun$)
(declare-fun case_prod$f (B_a_c_set_fun_fun$ B_a_prod$) C_set$)
(declare-fun case_prod$g (B_a_b_set_fun_fun$ B_a_prod$) B_set$)
(declare-fun case_prod$h (B_a_a_set_fun_fun$ B_a_prod$) A_set$)
(declare-fun case_prod$i (A_c_c_set_fun_fun$ A_c_prod$) C_set$)
(declare-fun case_prod$j (A_c_b_set_fun_fun$ A_c_prod$) B_set$)
(declare-fun case_prod$k (A_c_a_set_fun_fun$ A_c_prod$) A_set$)
(declare-fun case_prod$l (A_b_c_set_fun_fun$ A_b_prod$) C_set$)
(declare-fun case_prod$m (A_b_b_set_fun_fun$ A_b_prod$) B_set$)
(declare-fun case_prod$n (A_b_a_set_fun_fun$ A_b_prod$) A_set$)
(declare-fun case_prod$o (B_a_bool_fun_fun$) B_a_prod_bool_fun$)
(declare-fun case_prod$p (A_b_c_prod_bool_fun_fun$) A_b_c_prod_prod_bool_fun$)
(declare-fun case_prod$q (A_c_bool_fun_fun$) A_c_prod_bool_fun$)
(declare-fun case_prod$r (A_b_bool_fun_fun$) A_b_prod_bool_fun$)
(declare-fun case_prod$s (A_a_bool_fun_fun$) A_a_prod_bool_fun$)
(declare-fun stream_all$ (A_bool_fun$ A_stream$) Bool)
(declare-fun stream_all$a (B_bool_fun$ B_stream$) Bool)
(declare-fun stream_all$b (C_bool_fun$ C_stream$) Bool)
(declare-fun stream_all$c (B_c_prod_bool_fun$ B_c_prod_stream$) Bool)
(declare-fun stream_all$d (B_a_prod_bool_fun$ B_a_prod_stream$) Bool)
(declare-fun stream_all$e (A_c_prod_bool_fun$ A_c_prod_stream$) Bool)
(declare-fun stream_all$f (A_b_prod_bool_fun$ A_b_prod_stream$) Bool)
(declare-fun stream_all$g (A_a_prod_bool_fun$ A_a_prod_stream$) Bool)
(declare-fun stream_all$h (A_b_c_prod_prod_bool_fun$ A_b_c_prod_prod_stream$) Bool)
(declare-fun stream_all$i (A_b_a_prod_prod_bool_fun$ A_b_a_prod_prod_stream$) Bool)
(declare-fun internal_split$ () A_a_a_stream_set_fun_fun_a_a_prod_a_stream_set_fun_fun$)
(declare-fun internal_split$a () A_a_b_c_prod_set_fun_fun_a_a_prod_b_c_prod_set_fun_fun$)
(declare-fun internal_split$b () A_a_c_set_fun_fun_a_a_prod_c_set_fun_fun$)
(declare-fun internal_split$c () A_a_b_set_fun_fun_a_a_prod_b_set_fun_fun$)
(declare-fun internal_split$d () A_a_a_set_fun_fun_a_a_prod_a_set_fun_fun$)
(declare-fun internal_split$e () B_c_a_fun_fun_b_c_prod_a_fun_fun$)
(assert (! (not (= (forall ((?v0 Nat$)) (= (fun_app$ (fun_app$a case_prod$ f$) (snth$ (szip$ s1$ s2$) ?v0)) (snth$a s$ ?v0))) (forall ((?v0 Nat$)) (= (fun_app$b (fun_app$c f$ (snth$b s1$ ?v0)) (snth$c s2$ ?v0)) (snth$a s$ ?v0))))) :named a0))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$d (szip$a ?v0 ?v1) ?v2) (pair$a (snth$a ?v0 ?v2) (snth$a ?v1 ?v2)))) :named a1))
(assert (! (forall ((?v0 A_stream$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$e (szip$b ?v0 ?v1) ?v2) (pair$b (snth$a ?v0 ?v2) (snth$b ?v1 ?v2)))) :named a2))
(assert (! (forall ((?v0 A_stream$) (?v1 C_stream$) (?v2 Nat$)) (= (snth$f (szip$c ?v0 ?v1) ?v2) (pair$c (snth$a ?v0 ?v2) (snth$c ?v1 ?v2)))) :named a3))
(assert (! (forall ((?v0 B_stream$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$g (szip$d ?v0 ?v1) ?v2) (pair$d (snth$b ?v0 ?v2) (snth$a ?v1 ?v2)))) :named a4))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$h (szip$e ?v0 ?v1) ?v2) (pair$e (snth$b ?v0 ?v2) (snth$b ?v1 ?v2)))) :named a5))
(assert (! (forall ((?v0 C_stream$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$i (szip$f ?v0 ?v1) ?v2) (pair$f (snth$c ?v0 ?v2) (snth$a ?v1 ?v2)))) :named a6))
(assert (! (forall ((?v0 C_stream$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$j (szip$g ?v0 ?v1) ?v2) (pair$g (snth$c ?v0 ?v2) (snth$b ?v1 ?v2)))) :named a7))
(assert (! (forall ((?v0 C_stream$) (?v1 C_stream$) (?v2 Nat$)) (= (snth$k (szip$h ?v0 ?v1) ?v2) (pair$h (snth$c ?v0 ?v2) (snth$c ?v1 ?v2)))) :named a8))
(assert (! (forall ((?v0 B_stream$) (?v1 C_stream$) (?v2 Nat$)) (= (snth$ (szip$ ?v0 ?v1) ?v2) (pair$ (snth$b ?v0 ?v2) (snth$c ?v1 ?v2)))) :named a9))
(assert (! (forall ((?v0 B_c_prod_stream$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$l (szip$i ?v0 ?v1) ?v2) (pair$i (snth$ ?v0 ?v2) (snth$a ?v1 ?v2)))) :named a10))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod$) (?v2 A_a_a_stream_set_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$d (fun_app$e case_prod$a ?v2) ?v0) (fun_app$d (fun_app$e case_prod$a ?v2) ?v1)))) :named a11))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod$) (?v2 A_a_b_c_prod_set_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$f (fun_app$g case_prod$b ?v2) ?v0) (fun_app$f (fun_app$g case_prod$b ?v2) ?v1)))) :named a12))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod$) (?v2 A_a_c_set_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$h (fun_app$i case_prod$c ?v2) ?v0) (fun_app$h (fun_app$i case_prod$c ?v2) ?v1)))) :named a13))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod$) (?v2 A_a_b_set_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$j (fun_app$k case_prod$d ?v2) ?v0) (fun_app$j (fun_app$k case_prod$d ?v2) ?v1)))) :named a14))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod$) (?v2 A_a_a_set_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$l (fun_app$m case_prod$e ?v2) ?v0) (fun_app$l (fun_app$m case_prod$e ?v2) ?v1)))) :named a15))
(assert (! (forall ((?v0 B_c_prod$) (?v1 B_c_prod$) (?v2 B_c_a_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$ (fun_app$a case_prod$ ?v2) ?v0) (fun_app$ (fun_app$a case_prod$ ?v2) ?v1)))) :named a16))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (= (stream_all$ ?v0 ?v1) (forall ((?v2 Nat$)) (fun_app$n ?v0 (snth$a ?v1 ?v2))))) :named a17))
(assert (! (forall ((?v0 B_bool_fun$) (?v1 B_stream$)) (= (stream_all$a ?v0 ?v1) (forall ((?v2 Nat$)) (fun_app$o ?v0 (snth$b ?v1 ?v2))))) :named a18))
(assert (! (forall ((?v0 C_bool_fun$) (?v1 C_stream$)) (= (stream_all$b ?v0 ?v1) (forall ((?v2 Nat$)) (fun_app$p ?v0 (snth$c ?v1 ?v2))))) :named a19))
(assert (! (forall ((?v0 B_c_prod_bool_fun$) (?v1 B_c_prod_stream$)) (= (stream_all$c ?v0 ?v1) (forall ((?v2 Nat$)) (fun_app$q ?v0 (snth$ ?v1 ?v2))))) :named a20))
(assert (! (forall ((?v0 B_a_prod_bool_fun$) (?v1 B_a_prod_stream$)) (= (stream_all$d ?v0 ?v1) (forall ((?v2 Nat$)) (fun_app$r ?v0 (snth$g ?v1 ?v2))))) :named a21))
(assert (! (forall ((?v0 A_c_prod_bool_fun$) (?v1 A_c_prod_stream$)) (= (stream_all$e ?v0 ?v1) (forall ((?v2 Nat$)) (fun_app$s ?v0 (snth$f ?v1 ?v2))))) :named a22))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A_b_prod_stream$)) (= (stream_all$f ?v0 ?v1) (forall ((?v2 Nat$)) (fun_app$t ?v0 (snth$e ?v1 ?v2))))) :named a23))
(assert (! (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod_stream$)) (= (stream_all$g ?v0 ?v1) (forall ((?v2 Nat$)) (fun_app$u ?v0 (snth$d ?v1 ?v2))))) :named a24))
(assert (! (forall ((?v0 A_b_c_prod_prod_bool_fun$) (?v1 A_b_c_prod_prod_stream$)) (= (stream_all$h ?v0 ?v1) (forall ((?v2 Nat$)) (fun_app$v ?v0 (snth$m ?v1 ?v2))))) :named a25))
(assert (! (forall ((?v0 A_b_a_prod_prod_bool_fun$) (?v1 A_b_a_prod_prod_stream$)) (= (stream_all$i ?v0 ?v1) (forall ((?v2 Nat$)) (fun_app$w ?v0 (snth$n ?v1 ?v2))))) :named a26))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$a (smap$ ?v0 ?v1) ?v2) (fun_app$x ?v0 (snth$a ?v1 ?v2)))) :named a27))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$a (smap$a ?v0 ?v1) ?v2) (fun_app$y ?v0 (snth$b ?v1 ?v2)))) :named a28))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_stream$) (?v2 Nat$)) (= (snth$a (smap$b ?v0 ?v1) ?v2) (fun_app$b ?v0 (snth$c ?v1 ?v2)))) :named a29))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$b (smap$c ?v0 ?v1) ?v2) (fun_app$z ?v0 (snth$a ?v1 ?v2)))) :named a30))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$b (smap$d ?v0 ?v1) ?v2) (fun_app$aa ?v0 (snth$b ?v1 ?v2)))) :named a31))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_stream$) (?v2 Nat$)) (= (snth$b (smap$e ?v0 ?v1) ?v2) (fun_app$ab ?v0 (snth$c ?v1 ?v2)))) :named a32))
(assert (! (forall ((?v0 A_c_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$c (smap$f ?v0 ?v1) ?v2) (fun_app$ac ?v0 (snth$a ?v1 ?v2)))) :named a33))
(assert (! (forall ((?v0 B_c_fun$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$c (smap$g ?v0 ?v1) ?v2) (fun_app$ad ?v0 (snth$b ?v1 ?v2)))) :named a34))
(assert (! (forall ((?v0 C_c_fun$) (?v1 C_stream$) (?v2 Nat$)) (= (snth$c (smap$h ?v0 ?v1) ?v2) (fun_app$ae ?v0 (snth$c ?v1 ?v2)))) :named a35))
(assert (! (forall ((?v0 A_b_c_prod_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$ (smap$i ?v0 ?v1) ?v2) (fun_app$af ?v0 (snth$a ?v1 ?v2)))) :named a36))
(assert (! (= internal_split$ case_prod$a) :named a37))
(assert (! (= internal_split$a case_prod$b) :named a38))
(assert (! (= internal_split$b case_prod$c) :named a39))
(assert (! (= internal_split$c case_prod$d) :named a40))
(assert (! (= internal_split$d case_prod$e) :named a41))
(assert (! (= internal_split$e case_prod$) :named a42))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$)) (= (member$ ?v0 (streams$ ?v1)) (forall ((?v2 Nat$)) (member$a (snth$a ?v0 ?v2) ?v1)))) :named a43))
(assert (! (forall ((?v0 B_stream$) (?v1 B_set$)) (= (member$b ?v0 (streams$a ?v1)) (forall ((?v2 Nat$)) (member$c (snth$b ?v0 ?v2) ?v1)))) :named a44))
(assert (! (forall ((?v0 C_stream$) (?v1 C_set$)) (= (member$d ?v0 (streams$b ?v1)) (forall ((?v2 Nat$)) (member$e (snth$c ?v0 ?v2) ?v1)))) :named a45))
(assert (! (forall ((?v0 B_c_prod_stream$) (?v1 B_c_prod_set$)) (= (member$f ?v0 (streams$c ?v1)) (forall ((?v2 Nat$)) (member$g (snth$ ?v0 ?v2) ?v1)))) :named a46))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$)) (= (member$h ?v0 (streams$d ?v1)) (forall ((?v2 Nat$)) (member$ (snth$o ?v0 ?v2) ?v1)))) :named a47))
(assert (! (forall ((?v0 B_a_prod_stream$) (?v1 B_a_prod_set$)) (= (member$i ?v0 (streams$e ?v1)) (forall ((?v2 Nat$)) (member$j (snth$g ?v0 ?v2) ?v1)))) :named a48))
(assert (! (forall ((?v0 A_c_prod_stream$) (?v1 A_c_prod_set$)) (= (member$k ?v0 (streams$f ?v1)) (forall ((?v2 Nat$)) (member$l (snth$f ?v0 ?v2) ?v1)))) :named a49))
(assert (! (forall ((?v0 A_b_prod_stream$) (?v1 A_b_prod_set$)) (= (member$m ?v0 (streams$g ?v1)) (forall ((?v2 Nat$)) (member$n (snth$e ?v0 ?v2) ?v1)))) :named a50))
(assert (! (forall ((?v0 A_a_prod_stream$) (?v1 A_a_prod_set$)) (= (member$o ?v0 (streams$h ?v1)) (forall ((?v2 Nat$)) (member$p (snth$d ?v0 ?v2) ?v1)))) :named a51))
(assert (! (forall ((?v0 A_b_c_prod_prod_stream$) (?v1 A_b_c_prod_prod_set$)) (= (member$q ?v0 (streams$i ?v1)) (forall ((?v2 Nat$)) (member$r (snth$m ?v0 ?v2) ?v1)))) :named a52))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$) (?v2 Nat$)) (=> (member$ ?v0 (streams$ ?v1)) (member$a (snth$a ?v0 ?v2) ?v1))) :named a53))
(assert (! (forall ((?v0 B_stream$) (?v1 B_set$) (?v2 Nat$)) (=> (member$b ?v0 (streams$a ?v1)) (member$c (snth$b ?v0 ?v2) ?v1))) :named a54))
(assert (! (forall ((?v0 C_stream$) (?v1 C_set$) (?v2 Nat$)) (=> (member$d ?v0 (streams$b ?v1)) (member$e (snth$c ?v0 ?v2) ?v1))) :named a55))
(assert (! (forall ((?v0 B_c_prod_stream$) (?v1 B_c_prod_set$) (?v2 Nat$)) (=> (member$f ?v0 (streams$c ?v1)) (member$g (snth$ ?v0 ?v2) ?v1))) :named a56))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$) (?v2 Nat$)) (=> (member$h ?v0 (streams$d ?v1)) (member$ (snth$o ?v0 ?v2) ?v1))) :named a57))
(assert (! (forall ((?v0 B_a_prod_stream$) (?v1 B_a_prod_set$) (?v2 Nat$)) (=> (member$i ?v0 (streams$e ?v1)) (member$j (snth$g ?v0 ?v2) ?v1))) :named a58))
(assert (! (forall ((?v0 A_c_prod_stream$) (?v1 A_c_prod_set$) (?v2 Nat$)) (=> (member$k ?v0 (streams$f ?v1)) (member$l (snth$f ?v0 ?v2) ?v1))) :named a59))
(assert (! (forall ((?v0 A_b_prod_stream$) (?v1 A_b_prod_set$) (?v2 Nat$)) (=> (member$m ?v0 (streams$g ?v1)) (member$n (snth$e ?v0 ?v2) ?v1))) :named a60))
(assert (! (forall ((?v0 A_a_prod_stream$) (?v1 A_a_prod_set$) (?v2 Nat$)) (=> (member$o ?v0 (streams$h ?v1)) (member$p (snth$d ?v0 ?v2) ?v1))) :named a61))
(assert (! (forall ((?v0 A_b_c_prod_prod_stream$) (?v1 A_b_c_prod_prod_set$) (?v2 Nat$)) (=> (member$q ?v0 (streams$i ?v1)) (member$r (snth$m ?v0 ?v2) ?v1))) :named a62))
(assert (! (forall ((?v0 A_a_a_stream_set_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (! (= (smap2$ ?v0 ?v1 ?v2) (smap$j (fun_app$e case_prod$a ?v0) (szip$a ?v1 ?v2))) :pattern ((smap2$ ?v0 ?v1 ?v2)))) :named a63))
(assert (! (forall ((?v0 A_a_b_c_prod_set_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (! (= (smap2$a ?v0 ?v1 ?v2) (smap$k (fun_app$g case_prod$b ?v0) (szip$a ?v1 ?v2))) :pattern ((smap2$a ?v0 ?v1 ?v2)))) :named a64))
(assert (! (forall ((?v0 A_a_c_set_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (! (= (smap2$b ?v0 ?v1 ?v2) (smap$l (fun_app$i case_prod$c ?v0) (szip$a ?v1 ?v2))) :pattern ((smap2$b ?v0 ?v1 ?v2)))) :named a65))
(assert (! (forall ((?v0 A_a_b_set_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (! (= (smap2$c ?v0 ?v1 ?v2) (smap$m (fun_app$k case_prod$d ?v0) (szip$a ?v1 ?v2))) :pattern ((smap2$c ?v0 ?v1 ?v2)))) :named a66))
(assert (! (forall ((?v0 A_a_a_set_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (! (= (smap2$d ?v0 ?v1 ?v2) (smap$n (fun_app$m case_prod$e ?v0) (szip$a ?v1 ?v2))) :pattern ((smap2$d ?v0 ?v1 ?v2)))) :named a67))
(assert (! (forall ((?v0 B_c_a_fun_fun$) (?v1 B_stream$) (?v2 C_stream$)) (! (= (smap2$e ?v0 ?v1 ?v2) (smap$o (fun_app$a case_prod$ ?v0) (szip$ ?v1 ?v2))) :pattern ((smap2$e ?v0 ?v1 ?v2)))) :named a68))
(assert (! (forall ((?v0 A_stream$) (?v1 Nat$)) (member$a (snth$a ?v0 ?v1) (sset$ ?v0))) :named a69))
(assert (! (forall ((?v0 B_stream$) (?v1 Nat$)) (member$c (snth$b ?v0 ?v1) (sset$a ?v0))) :named a70))
(assert (! (forall ((?v0 C_stream$) (?v1 Nat$)) (member$e (snth$c ?v0 ?v1) (sset$b ?v0))) :named a71))
(assert (! (forall ((?v0 B_c_prod_stream$) (?v1 Nat$)) (member$g (snth$ ?v0 ?v1) (sset$c ?v0))) :named a72))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 Nat$)) (member$ (snth$o ?v0 ?v1) (sset$d ?v0))) :named a73))
(assert (! (forall ((?v0 B_a_prod_stream$) (?v1 Nat$)) (member$j (snth$g ?v0 ?v1) (sset$e ?v0))) :named a74))
(assert (! (forall ((?v0 A_c_prod_stream$) (?v1 Nat$)) (member$l (snth$f ?v0 ?v1) (sset$f ?v0))) :named a75))
(assert (! (forall ((?v0 A_b_prod_stream$) (?v1 Nat$)) (member$n (snth$e ?v0 ?v1) (sset$g ?v0))) :named a76))
(assert (! (forall ((?v0 A_a_prod_stream$) (?v1 Nat$)) (member$p (snth$d ?v0 ?v1) (sset$h ?v0))) :named a77))
(assert (! (forall ((?v0 A_b_c_prod_prod_stream$) (?v1 Nat$)) (member$r (snth$m ?v0 ?v1) (sset$i ?v0))) :named a78))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (= (smap$ ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$x ?v0 (snth$a ?v1 ?v3)) (snth$a ?v2 ?v3))))) :named a79))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_stream$) (?v2 B_stream$)) (= (= (smap$c ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$z ?v0 (snth$a ?v1 ?v3)) (snth$b ?v2 ?v3))))) :named a80))
(assert (! (forall ((?v0 A_c_fun$) (?v1 A_stream$) (?v2 C_stream$)) (= (= (smap$f ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$ac ?v0 (snth$a ?v1 ?v3)) (snth$c ?v2 ?v3))))) :named a81))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$) (?v2 A_stream$)) (= (= (smap$a ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$y ?v0 (snth$b ?v1 ?v3)) (snth$a ?v2 ?v3))))) :named a82))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$) (?v2 B_stream$)) (= (= (smap$d ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$aa ?v0 (snth$b ?v1 ?v3)) (snth$b ?v2 ?v3))))) :named a83))
(assert (! (forall ((?v0 B_c_fun$) (?v1 B_stream$) (?v2 C_stream$)) (= (= (smap$g ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$ad ?v0 (snth$b ?v1 ?v3)) (snth$c ?v2 ?v3))))) :named a84))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_stream$) (?v2 A_stream$)) (= (= (smap$b ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$b ?v0 (snth$c ?v1 ?v3)) (snth$a ?v2 ?v3))))) :named a85))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_stream$) (?v2 B_stream$)) (= (= (smap$e ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$ab ?v0 (snth$c ?v1 ?v3)) (snth$b ?v2 ?v3))))) :named a86))
(assert (! (forall ((?v0 C_c_fun$) (?v1 C_stream$) (?v2 C_stream$)) (= (= (smap$h ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$ae ?v0 (snth$c ?v1 ?v3)) (snth$c ?v2 ?v3))))) :named a87))
(assert (! (forall ((?v0 B_c_prod_a_fun$) (?v1 B_c_prod_stream$) (?v2 A_stream$)) (= (= (smap$o ?v0 ?v1) ?v2) (forall ((?v3 Nat$)) (= (fun_app$ ?v0 (snth$ ?v1 ?v3)) (snth$a ?v2 ?v3))))) :named a88))
(assert (! (forall ((?v0 A_a_b_set_fun_fun$)) (= (curry$ (fun_app$k case_prod$d ?v0)) ?v0)) :named a89))
(assert (! (forall ((?v0 A_a_a_set_fun_fun$)) (= (curry$a (fun_app$m case_prod$e ?v0)) ?v0)) :named a90))
(assert (! (forall ((?v0 B_c_a_fun_fun$)) (= (curry$b (fun_app$a case_prod$ ?v0)) ?v0)) :named a91))
(assert (! (forall ((?v0 B_c_prod_a_fun$)) (= (fun_app$a case_prod$ (curry$b ?v0)) ?v0)) :named a92))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (= (= (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a93))
(assert (! (forall ((?v0 A$) (?v1 B_c_prod$) (?v2 A$) (?v3 B_c_prod$)) (= (= (pair$j ?v0 ?v1) (pair$j ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a94))
(assert (! (forall ((?v0 A$) (?v1 C$) (?v2 A$) (?v3 C$)) (= (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a95))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a96))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a97))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (= (= (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a98))
(assert (! (forall ((?v0 A$) (?v1 B_c_prod$) (?v2 A$) (?v3 B_c_prod$)) (= (= (pair$j ?v0 ?v1) (pair$j ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a99))
(assert (! (forall ((?v0 A$) (?v1 C$) (?v2 A$) (?v3 C$)) (= (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a100))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a101))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a102))
(assert (! (forall ((?v0 B_a_prod$) (?v1 C$) (?v2 B_a_c_set_fun_fun$)) (=> (forall ((?v3 B$) (?v4 A$)) (=> (= ?v0 (pair$d ?v3 ?v4)) (member$e ?v1 (fun_app$ag (fun_app$ah ?v2 ?v3) ?v4)))) (member$e ?v1 (case_prod$f ?v2 ?v0)))) :named a103))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B$) (?v2 B_a_b_set_fun_fun$)) (=> (forall ((?v3 B$) (?v4 A$)) (=> (= ?v0 (pair$d ?v3 ?v4)) (member$c ?v1 (fun_app$ai (fun_app$aj ?v2 ?v3) ?v4)))) (member$c ?v1 (case_prod$g ?v2 ?v0)))) :named a104))
(assert (! (forall ((?v0 B_a_prod$) (?v1 A$) (?v2 B_a_a_set_fun_fun$)) (=> (forall ((?v3 B$) (?v4 A$)) (=> (= ?v0 (pair$d ?v3 ?v4)) (member$a ?v1 (fun_app$ak (fun_app$al ?v2 ?v3) ?v4)))) (member$a ?v1 (case_prod$h ?v2 ?v0)))) :named a105))
(assert (! (forall ((?v0 A_c_prod$) (?v1 C$) (?v2 A_c_c_set_fun_fun$)) (=> (forall ((?v3 A$) (?v4 C$)) (=> (= ?v0 (pair$c ?v3 ?v4)) (member$e ?v1 (fun_app$am (fun_app$an ?v2 ?v3) ?v4)))) (member$e ?v1 (case_prod$i ?v2 ?v0)))) :named a106))
(assert (! (forall ((?v0 A_c_prod$) (?v1 B$) (?v2 A_c_b_set_fun_fun$)) (=> (forall ((?v3 A$) (?v4 C$)) (=> (= ?v0 (pair$c ?v3 ?v4)) (member$c ?v1 (fun_app$ao (fun_app$ap ?v2 ?v3) ?v4)))) (member$c ?v1 (case_prod$j ?v2 ?v0)))) :named a107))
(assert (! (forall ((?v0 A_c_prod$) (?v1 A$) (?v2 A_c_a_set_fun_fun$)) (=> (forall ((?v3 A$) (?v4 C$)) (=> (= ?v0 (pair$c ?v3 ?v4)) (member$a ?v1 (fun_app$aq (fun_app$ar ?v2 ?v3) ?v4)))) (member$a ?v1 (case_prod$k ?v2 ?v0)))) :named a108))
(assert (! (forall ((?v0 A_b_prod$) (?v1 C$) (?v2 A_b_c_set_fun_fun$)) (=> (forall ((?v3 A$) (?v4 B$)) (=> (= ?v0 (pair$b ?v3 ?v4)) (member$e ?v1 (fun_app$as (fun_app$at ?v2 ?v3) ?v4)))) (member$e ?v1 (case_prod$l ?v2 ?v0)))) :named a109))
(assert (! (forall ((?v0 A_b_prod$) (?v1 B$) (?v2 A_b_b_set_fun_fun$)) (=> (forall ((?v3 A$) (?v4 B$)) (=> (= ?v0 (pair$b ?v3 ?v4)) (member$c ?v1 (fun_app$au (fun_app$av ?v2 ?v3) ?v4)))) (member$c ?v1 (case_prod$m ?v2 ?v0)))) :named a110))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$) (?v2 A_b_a_set_fun_fun$)) (=> (forall ((?v3 A$) (?v4 B$)) (=> (= ?v0 (pair$b ?v3 ?v4)) (member$a ?v1 (fun_app$aw (fun_app$ax ?v2 ?v3) ?v4)))) (member$a ?v1 (case_prod$n ?v2 ?v0)))) :named a111))
(assert (! (forall ((?v0 A_a_prod$) (?v1 C$) (?v2 A_a_c_set_fun_fun$)) (=> (forall ((?v3 A$) (?v4 A$)) (=> (= ?v0 (pair$a ?v3 ?v4)) (member$e ?v1 (fun_app$ag (fun_app$ay ?v2 ?v3) ?v4)))) (member$e ?v1 (fun_app$h (fun_app$i case_prod$c ?v2) ?v0)))) :named a112))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B_a_bool_fun_fun$)) (=> (forall ((?v2 B$) (?v3 A$)) (=> (= ?v0 (pair$d ?v2 ?v3)) (fun_app$n (fun_app$az ?v1 ?v2) ?v3))) (fun_app$r (case_prod$o ?v1) ?v0))) :named a113))
(assert (! (forall ((?v0 A_b_c_prod_prod$) (?v1 A_b_c_prod_bool_fun_fun$)) (=> (forall ((?v2 A$) (?v3 B_c_prod$)) (=> (= ?v0 (pair$j ?v2 ?v3)) (fun_app$q (fun_app$ba ?v1 ?v2) ?v3))) (fun_app$v (case_prod$p ?v1) ?v0))) :named a114))
(assert (! (forall ((?v0 A_c_prod$) (?v1 A_c_bool_fun_fun$)) (=> (forall ((?v2 A$) (?v3 C$)) (=> (= ?v0 (pair$c ?v2 ?v3)) (fun_app$p (fun_app$bb ?v1 ?v2) ?v3))) (fun_app$s (case_prod$q ?v1) ?v0))) :named a115))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_bool_fun_fun$)) (=> (forall ((?v2 A$) (?v3 B$)) (=> (= ?v0 (pair$b ?v2 ?v3)) (fun_app$o (fun_app$bc ?v1 ?v2) ?v3))) (fun_app$t (case_prod$r ?v1) ?v0))) :named a116))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_bool_fun_fun$)) (=> (forall ((?v2 A$) (?v3 A$)) (=> (= ?v0 (pair$a ?v2 ?v3)) (fun_app$n (fun_app$bd ?v1 ?v2) ?v3))) (fun_app$u (case_prod$s ?v1) ?v0))) :named a117))
(check-sat)
;(get-unsat-core)
