; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 43
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun p$ (A$) Bool)
(declare-fun s$ () A_stream$)
(declare-fun xs$ () A_list$)
(declare-fun set$ (A_list$) A_set$)
(declare-fun sup$ (A_set$ A_set$) A_set$)
(declare-fun smap$ (A_a_fun$ A_stream$) A_stream$)
(declare-fun snth$ (A_stream$ Nat$) A$)
(declare-fun sset$ (A_stream$) A_set$)
(declare-fun shift$ (A_list$ A_stream$) A_stream$)
(declare-fun append$ (A_list$ A_list$) A_list$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun smember$ (A$ A_stream$) Bool)
(declare-fun fun_app$a (A_a_fun$ A$) A$)
(declare-fun pred_list$ (A_bool_fun$ A_list$) Bool)
(declare-fun stream_all$ (A_bool_fun$ A_stream$) Bool)
(declare-fun pred_stream$ (A_bool_fun$ A_stream$) Bool)
(assert (! (not (= (forall ((?v0 A$)) (=> (member$ ?v0 (sset$ (shift$ xs$ s$))) (p$ ?v0))) (and (forall ((?v0 A$)) (=> (member$ ?v0 (set$ xs$)) (p$ ?v0))) (forall ((?v0 A$)) (=> (member$ ?v0 (sset$ s$)) (p$ ?v0)))))) :named a0))
(assert (! (forall ((?v0 A_list$) (?v1 A_stream$) (?v2 A_stream$)) (= (= (shift$ ?v0 ?v1) (shift$ ?v0 ?v2)) (= ?v1 ?v2))) :named a1))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (= (stream_all$ ?v0 ?v1) (forall ((?v2 A$)) (=> (member$ ?v2 (sset$ ?v1)) (fun_app$ ?v0 ?v2))))) :named a2))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (= (pred_stream$ ?v0 ?v1) (forall ((?v2 A$)) (=> (member$ ?v2 (sset$ ?v1)) (fun_app$ ?v0 ?v2))))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_stream$)) (! (= (smember$ ?v0 ?v1) (member$ ?v0 (sset$ ?v1))) :pattern ((smember$ ?v0 ?v1)))) :named a4))
(assert (! (forall ((?v0 A_list$) (?v1 A_stream$)) (= (sset$ (shift$ ?v0 ?v1)) (sup$ (set$ ?v0) (sset$ ?v1)))) :named a5))
(assert (! (forall ((?v0 A_set$) (?v1 A_bool_fun$)) (= (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (fun_app$ ?v1 ?v2))) (forall ((?v2 A$)) (=> (member$ ?v2 ?v0) (fun_app$ ?v1 ?v2))))) :named a6))
(assert (! (forall ((?v0 A_set$) (?v1 A_bool_fun$) (?v2 A_bool_fun$)) (=> (and (forall ((?v3 A$)) (=> (and (member$ ?v3 ?v0) (fun_app$ ?v1 ?v3)) (fun_app$ ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (fun_app$ ?v1 ?v3)))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (fun_app$ ?v2 ?v3))))) :named a7))
(assert (! (forall ((?v0 A_stream$) (?v1 Nat$)) (member$ (snth$ ?v0 ?v1) (sset$ ?v0))) :named a8))
(assert (! (forall ((?v0 A_list$) (?v1 A_bool_fun$)) (= (forall ((?v2 A$)) (=> (member$ ?v2 (set$ ?v0)) (fun_app$ ?v1 ?v2))) (pred_list$ ?v1 ?v0))) :named a9))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_list$)) (= (pred_list$ ?v0 ?v1) (forall ((?v2 A$)) (=> (member$ ?v2 (set$ ?v1)) (fun_app$ ?v0 ?v2))))) :named a10))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_stream$)) (= (shift$ (append$ ?v0 ?v1) ?v2) (shift$ ?v0 (shift$ ?v1 ?v2)))) :named a11))
(assert (! (forall ((?v0 A_stream$)) (member$ (shd$ ?v0) (sset$ ?v0))) :named a12))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$ ?v4 (sset$ ?v0)) (and (member$ ?v5 (sset$ ?v1)) (= (fun_app$a ?v2 ?v4) (fun_app$a ?v3 ?v5)))) (= ?v4 ?v5))) (= (smap$ ?v2 ?v0) (smap$ ?v3 ?v1))) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (member$ ?v0 (sup$ ?v1 ?v2)) (or (member$ ?v0 ?v1) (member$ ?v0 ?v2)))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (=> (=> (not (member$ ?v0 ?v1)) (member$ ?v0 ?v2)) (member$ ?v0 (sup$ ?v2 ?v1)))) :named a15))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (append$ ?v0 ?v1) (append$ ?v0 ?v2)) (= ?v1 ?v2))) :named a16))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (append$ ?v0 ?v1) (append$ ?v2 ?v1)) (= ?v0 ?v2))) :named a17))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (append$ (append$ ?v0 ?v1) ?v2) (append$ ?v0 (append$ ?v1 ?v2)))) :named a18))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_list$) (?v2 A_list$)) (= (pred_list$ ?v0 (append$ ?v1 ?v2)) (and (pred_list$ ?v0 ?v1) (pred_list$ ?v0 ?v2)))) :named a19))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (shd$ (smap$ ?v0 ?v1)) (fun_app$a ?v0 (shd$ ?v1)))) :named a20))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$ (smap$ ?v0 ?v1) ?v2) (fun_app$a ?v0 (snth$ ?v1 ?v2)))) :named a21))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (set$ (append$ ?v0 ?v1)) (sup$ (set$ ?v0) (set$ ?v1)))) :named a22))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$ ?v3 (sup$ ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (or (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (fun_app$ ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v1) (fun_app$ ?v2 ?v3)))))) :named a23))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$ ?v3 (sup$ ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (and (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (fun_app$ ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v1) (fun_app$ ?v2 ?v3)))))) :named a24))
(check-sat)
;(get-unsat-core)
