; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 68
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort B_stream_set$ 0)
(declare-sort A_a_stream_fun$ 0)
(declare-sort A_b_stream_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort A_stream_b_fun$ 0)
(declare-sort B_a_stream_fun$ 0)
(declare-sort B_b_stream_fun$ 0)
(declare-sort B_stream_a_fun$ 0)
(declare-sort B_stream_b_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_b_fun_fun$ 0)
(declare-sort A_b_fun_a_a_fun_fun$ 0)
(declare-sort A_b_fun_a_b_fun_fun$ 0)
(declare-sort A_stream_stream_set$ 0)
(declare-sort B_a_fun_b_a_fun_fun$ 0)
(declare-sort B_a_fun_b_b_fun_fun$ 0)
(declare-sort B_b_fun_b_a_fun_fun$ 0)
(declare-sort B_b_fun_b_b_fun_fun$ 0)
(declare-sort B_stream_stream_set$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_stream_b_stream_fun$ 0)
(declare-sort A_stream_stream_stream_set$ 0)
(declare-sort B_stream_stream_stream_set$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (B_stream$ (sCons$a (shd$a B$) (stl$a B_stream$)))
  (B_stream_stream$ (sCons$b (shd$b B_stream$) (stl$b B_stream_stream$)))
  (A_stream_stream$ (sCons$c (shd$c A_stream$) (stl$c A_stream_stream$)))
  (B_stream_stream_stream$ (sCons$d (shd$d B_stream_stream$) (stl$d B_stream_stream_stream$)))
  (A_stream_stream_stream$ (sCons$e (shd$e A_stream_stream$) (stl$e A_stream_stream_stream$)))))
(declare-fun f$ () B_a_fun$)
(declare-fun s$ () B_stream$)
(declare-fun s$a () A_stream$)
(declare-fun comp$ (B_a_fun$) A_b_fun_a_a_fun_fun$)
(declare-fun smap$ (B_a_fun$ B_stream$) A_stream$)
(declare-fun snth$ (B_stream$ Nat$) B$)
(declare-fun sset$ (B_stream_stream_stream$) B_stream_stream_set$)
(declare-fun comp$a (A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun comp$b (A_b_fun$) B_a_fun_b_b_fun_fun$)
(declare-fun comp$c (A_b_fun$) A_a_fun_a_b_fun_fun$)
(declare-fun comp$d (B_b_fun$) A_b_fun_a_b_fun_fun$)
(declare-fun comp$e (B_b_fun$) B_b_fun_b_b_fun_fun$)
(declare-fun comp$f (A_a_fun$) B_a_fun_b_a_fun_fun$)
(declare-fun comp$g (B_a_fun$) B_b_fun_b_a_fun_fun$)
(declare-fun sdrop$ (Nat$) A_stream_a_stream_fun$)
(declare-fun smap$a (B_b_fun$ B_stream$) B_stream$)
(declare-fun smap$b (A_b_fun$) A_stream_b_stream_fun$)
(declare-fun smap$c (A_a_fun$) A_stream_a_stream_fun$)
(declare-fun smap$d (B_stream_b_fun$ B_stream_stream$) B_stream$)
(declare-fun smap$e (A_stream_b_fun$ A_stream_stream$) B_stream$)
(declare-fun smap$f (B_stream_a_fun$ B_stream_stream$) A_stream$)
(declare-fun smap$g (A_stream_a_fun$ A_stream_stream$) A_stream$)
(declare-fun smap$h (B_b_stream_fun$ B_stream$) B_stream_stream$)
(declare-fun smap$i (B_a_stream_fun$ B_stream$) A_stream_stream$)
(declare-fun smap$j (A_b_stream_fun$ A_stream$) B_stream_stream$)
(declare-fun smap$k (A_a_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun smap$l (A_stream_b_stream_fun$ A_stream_stream$) B_stream_stream$)
(declare-fun smap$m (A_stream_a_stream_fun$ A_stream_stream$) A_stream_stream$)
(declare-fun snth$a (A_stream$ Nat$) A$)
(declare-fun snth$b (B_stream_stream$ Nat$) B_stream$)
(declare-fun snth$c (A_stream_stream$ Nat$) A_stream$)
(declare-fun snth$d (B_stream_stream_stream$ Nat$) B_stream_stream$)
(declare-fun snth$e (A_stream_stream_stream$ Nat$) A_stream_stream$)
(declare-fun sset$a (A_stream_stream_stream$) A_stream_stream_set$)
(declare-fun sset$b (A_stream_stream$) A_stream_set$)
(declare-fun sset$c (B_stream_stream$) B_stream_set$)
(declare-fun sset$d (B_stream$) B_set$)
(declare-fun sset$e (A_stream$) A_set$)
(declare-fun member$ (B_stream_stream_stream$ B_stream_stream_stream_set$) Bool)
(declare-fun sdrop$a (Nat$ A_stream_stream$) A_stream_stream$)
(declare-fun sdrop$b (Nat$ B_stream_stream$) B_stream_stream$)
(declare-fun sdrop$c (Nat$ B_stream$) B_stream$)
(declare-fun fun_app$ (B_a_fun$ B$) A$)
(declare-fun member$a (B_stream_stream$ B_stream_stream_set$) Bool)
(declare-fun member$b (A_stream_stream_stream$ A_stream_stream_stream_set$) Bool)
(declare-fun member$c (A_stream_stream$ A_stream_stream_set$) Bool)
(declare-fun member$d (A_stream$ A_stream_set$) Bool)
(declare-fun member$e (B_stream$ B_stream_set$) Bool)
(declare-fun member$f (B$ B_set$) Bool)
(declare-fun member$g (A$ A_set$) Bool)
(declare-fun streams$ (B_stream_stream_set$) B_stream_stream_stream_set$)
(declare-fun fun_app$a (B_b_fun$ B$) B$)
(declare-fun fun_app$b (A_stream_b_stream_fun$ A_stream$) B_stream$)
(declare-fun fun_app$c (A_b_fun$ A$) B$)
(declare-fun fun_app$d (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$e (A_a_fun$ A$) A$)
(declare-fun fun_app$f (B_stream_b_fun$ B_stream$) B$)
(declare-fun fun_app$g (A_stream_b_fun$ A_stream$) B$)
(declare-fun fun_app$h (B_stream_a_fun$ B_stream$) A$)
(declare-fun fun_app$i (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$j (B_b_stream_fun$ B$) B_stream$)
(declare-fun fun_app$k (B_a_stream_fun$ B$) A_stream$)
(declare-fun fun_app$l (A_b_stream_fun$ A$) B_stream$)
(declare-fun fun_app$m (A_a_stream_fun$ A$) A_stream$)
(declare-fun fun_app$n (A_b_fun_a_a_fun_fun$ A_b_fun$) A_a_fun$)
(declare-fun fun_app$o (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$p (B_a_fun_b_b_fun_fun$ B_a_fun$) B_b_fun$)
(declare-fun fun_app$q (A_a_fun_a_b_fun_fun$ A_a_fun$) A_b_fun$)
(declare-fun fun_app$r (A_b_fun_a_b_fun_fun$ A_b_fun$) A_b_fun$)
(declare-fun fun_app$s (B_b_fun_b_b_fun_fun$ B_b_fun$) B_b_fun$)
(declare-fun fun_app$t (B_a_fun_b_a_fun_fun$ B_a_fun$) B_a_fun$)
(declare-fun fun_app$u (B_b_fun_b_a_fun_fun$ B_b_fun$) B_a_fun$)
(declare-fun streams$a (A_stream_stream_set$) A_stream_stream_stream_set$)
(declare-fun streams$b (A_stream_set$) A_stream_stream_set$)
(declare-fun streams$c (B_stream_set$) B_stream_stream_set$)
(declare-fun streams$d (B_set$) B_stream_set$)
(declare-fun streams$e (A_set$) A_stream_set$)
(assert (! (not (= (= (smap$ f$ s$) s$a) (forall ((?v0 Nat$)) (= (fun_app$ f$ (snth$ s$ ?v0)) (snth$a s$a ?v0))))) :named a0))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$ (smap$a ?v0 ?v1) ?v2) (fun_app$a ?v0 (snth$ ?v1 ?v2)))) :named a1))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$ (fun_app$b (smap$b ?v0) ?v1) ?v2) (fun_app$c ?v0 (snth$a ?v1 ?v2)))) :named a2))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (snth$a (fun_app$d (smap$c ?v0) ?v1) ?v2) (fun_app$e ?v0 (snth$a ?v1 ?v2)))) :named a3))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$a (smap$ ?v0 ?v1) ?v2) (fun_app$ ?v0 (snth$ ?v1 ?v2)))) :named a4))
(assert (! (forall ((?v0 B_stream_b_fun$) (?v1 B_stream_stream$) (?v2 Nat$)) (= (snth$ (smap$d ?v0 ?v1) ?v2) (fun_app$f ?v0 (snth$b ?v1 ?v2)))) :named a5))
(assert (! (forall ((?v0 A_stream_b_fun$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (snth$ (smap$e ?v0 ?v1) ?v2) (fun_app$g ?v0 (snth$c ?v1 ?v2)))) :named a6))
(assert (! (forall ((?v0 B_stream_a_fun$) (?v1 B_stream_stream$) (?v2 Nat$)) (= (snth$a (smap$f ?v0 ?v1) ?v2) (fun_app$h ?v0 (snth$b ?v1 ?v2)))) :named a7))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$) (?v2 Nat$)) (= (snth$a (smap$g ?v0 ?v1) ?v2) (fun_app$i ?v0 (snth$c ?v1 ?v2)))) :named a8))
(assert (! (forall ((?v0 B_b_stream_fun$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$b (smap$h ?v0 ?v1) ?v2) (fun_app$j ?v0 (snth$ ?v1 ?v2)))) :named a9))
(assert (! (forall ((?v0 B_a_stream_fun$) (?v1 B_stream$) (?v2 Nat$)) (= (snth$c (smap$i ?v0 ?v1) ?v2) (fun_app$k ?v0 (snth$ ?v1 ?v2)))) :named a10))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream_a_fun$) (?v2 A_stream_stream$)) (= (fun_app$d (sdrop$ ?v0) (smap$g ?v1 ?v2)) (smap$g ?v1 (sdrop$a ?v0 ?v2)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_stream_fun$) (?v2 B_stream$)) (= (sdrop$b ?v0 (smap$h ?v1 ?v2)) (smap$h ?v1 (sdrop$c ?v0 ?v2)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_stream_fun$) (?v2 B_stream$)) (= (sdrop$a ?v0 (smap$i ?v1 ?v2)) (smap$i ?v1 (sdrop$c ?v0 ?v2)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_stream_fun$) (?v2 A_stream$)) (= (sdrop$b ?v0 (smap$j ?v1 ?v2)) (smap$j ?v1 (fun_app$d (sdrop$ ?v0) ?v2)))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_stream_fun$) (?v2 A_stream$)) (= (sdrop$a ?v0 (smap$k ?v1 ?v2)) (smap$k ?v1 (fun_app$d (sdrop$ ?v0) ?v2)))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (fun_app$d (sdrop$ ?v0) (fun_app$d (smap$c ?v1) ?v2)) (fun_app$d (smap$c ?v1) (fun_app$d (sdrop$ ?v0) ?v2)))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_fun$) (?v2 A_stream$)) (= (sdrop$c ?v0 (fun_app$b (smap$b ?v1) ?v2)) (fun_app$b (smap$b ?v1) (fun_app$d (sdrop$ ?v0) ?v2)))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_fun$) (?v2 B_stream$)) (= (sdrop$c ?v0 (smap$a ?v1 ?v2)) (smap$a ?v1 (sdrop$c ?v0 ?v2)))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (fun_app$d (sdrop$ ?v0) (smap$ ?v1 ?v2)) (smap$ ?v1 (sdrop$c ?v0 ?v2)))) :named a19))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$)) (= (shd$ (smap$g ?v0 ?v1)) (fun_app$i ?v0 (shd$c ?v1)))) :named a20))
(assert (! (forall ((?v0 B_b_stream_fun$) (?v1 B_stream$)) (= (shd$b (smap$h ?v0 ?v1)) (fun_app$j ?v0 (shd$a ?v1)))) :named a21))
(assert (! (forall ((?v0 B_a_stream_fun$) (?v1 B_stream$)) (= (shd$c (smap$i ?v0 ?v1)) (fun_app$k ?v0 (shd$a ?v1)))) :named a22))
(assert (! (forall ((?v0 A_b_stream_fun$) (?v1 A_stream$)) (= (shd$b (smap$j ?v0 ?v1)) (fun_app$l ?v0 (shd$ ?v1)))) :named a23))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$)) (= (shd$c (smap$k ?v0 ?v1)) (fun_app$m ?v0 (shd$ ?v1)))) :named a24))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (shd$ (fun_app$d (smap$c ?v0) ?v1)) (fun_app$e ?v0 (shd$ ?v1)))) :named a25))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_stream$)) (= (shd$a (fun_app$b (smap$b ?v0) ?v1)) (fun_app$c ?v0 (shd$ ?v1)))) :named a26))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$)) (= (shd$a (smap$a ?v0 ?v1)) (fun_app$a ?v0 (shd$a ?v1)))) :named a27))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$)) (= (shd$ (smap$ ?v0 ?v1)) (fun_app$ ?v0 (shd$a ?v1)))) :named a28))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_stream$)) (= (stl$ (smap$g ?v0 ?v1)) (smap$g ?v0 (stl$c ?v1)))) :named a29))
(assert (! (forall ((?v0 B_b_stream_fun$) (?v1 B_stream$)) (= (stl$b (smap$h ?v0 ?v1)) (smap$h ?v0 (stl$a ?v1)))) :named a30))
(assert (! (forall ((?v0 B_a_stream_fun$) (?v1 B_stream$)) (= (stl$c (smap$i ?v0 ?v1)) (smap$i ?v0 (stl$a ?v1)))) :named a31))
(assert (! (forall ((?v0 A_b_stream_fun$) (?v1 A_stream$)) (= (stl$b (smap$j ?v0 ?v1)) (smap$j ?v0 (stl$ ?v1)))) :named a32))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_stream$)) (= (stl$c (smap$k ?v0 ?v1)) (smap$k ?v0 (stl$ ?v1)))) :named a33))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (stl$ (fun_app$d (smap$c ?v0) ?v1)) (fun_app$d (smap$c ?v0) (stl$ ?v1)))) :named a34))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_stream$)) (= (stl$a (fun_app$b (smap$b ?v0) ?v1)) (fun_app$b (smap$b ?v0) (stl$ ?v1)))) :named a35))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$)) (= (stl$a (smap$a ?v0 ?v1)) (smap$a ?v0 (stl$a ?v1)))) :named a36))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$)) (= (stl$ (smap$ ?v0 ?v1)) (smap$ ?v0 (stl$a ?v1)))) :named a37))
(assert (! (forall ((?v0 B_stream_stream_stream$) (?v1 B_stream_stream_set$)) (= (member$ ?v0 (streams$ ?v1)) (forall ((?v2 Nat$)) (member$a (snth$d ?v0 ?v2) ?v1)))) :named a38))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 A_stream_stream_set$)) (= (member$b ?v0 (streams$a ?v1)) (forall ((?v2 Nat$)) (member$c (snth$e ?v0 ?v2) ?v1)))) :named a39))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$)) (= (member$c ?v0 (streams$b ?v1)) (forall ((?v2 Nat$)) (member$d (snth$c ?v0 ?v2) ?v1)))) :named a40))
(assert (! (forall ((?v0 B_stream_stream$) (?v1 B_stream_set$)) (= (member$a ?v0 (streams$c ?v1)) (forall ((?v2 Nat$)) (member$e (snth$b ?v0 ?v2) ?v1)))) :named a41))
(assert (! (forall ((?v0 B_stream$) (?v1 B_set$)) (= (member$e ?v0 (streams$d ?v1)) (forall ((?v2 Nat$)) (member$f (snth$ ?v0 ?v2) ?v1)))) :named a42))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$)) (= (member$d ?v0 (streams$e ?v1)) (forall ((?v2 Nat$)) (member$g (snth$a ?v0 ?v2) ?v1)))) :named a43))
(assert (! (forall ((?v0 B_stream_stream_stream$) (?v1 B_stream_stream_set$) (?v2 Nat$)) (=> (member$ ?v0 (streams$ ?v1)) (member$a (snth$d ?v0 ?v2) ?v1))) :named a44))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 A_stream_stream_set$) (?v2 Nat$)) (=> (member$b ?v0 (streams$a ?v1)) (member$c (snth$e ?v0 ?v2) ?v1))) :named a45))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$) (?v2 Nat$)) (=> (member$c ?v0 (streams$b ?v1)) (member$d (snth$c ?v0 ?v2) ?v1))) :named a46))
(assert (! (forall ((?v0 B_stream_stream$) (?v1 B_stream_set$) (?v2 Nat$)) (=> (member$a ?v0 (streams$c ?v1)) (member$e (snth$b ?v0 ?v2) ?v1))) :named a47))
(assert (! (forall ((?v0 B_stream$) (?v1 B_set$) (?v2 Nat$)) (=> (member$e ?v0 (streams$d ?v1)) (member$f (snth$ ?v0 ?v2) ?v1))) :named a48))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$) (?v2 Nat$)) (=> (member$d ?v0 (streams$e ?v1)) (member$g (snth$a ?v0 ?v2) ?v1))) :named a49))
(assert (! (forall ((?v0 B_stream_stream_stream$) (?v1 Nat$)) (member$a (snth$d ?v0 ?v1) (sset$ ?v0))) :named a50))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 Nat$)) (member$c (snth$e ?v0 ?v1) (sset$a ?v0))) :named a51))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 Nat$)) (member$d (snth$c ?v0 ?v1) (sset$b ?v0))) :named a52))
(assert (! (forall ((?v0 B_stream_stream$) (?v1 Nat$)) (member$e (snth$b ?v0 ?v1) (sset$c ?v0))) :named a53))
(assert (! (forall ((?v0 B_stream$) (?v1 Nat$)) (member$f (snth$ ?v0 ?v1) (sset$d ?v0))) :named a54))
(assert (! (forall ((?v0 A_stream$) (?v1 Nat$)) (member$g (snth$a ?v0 ?v1) (sset$e ?v0))) :named a55))
(assert (! (forall ((?v0 B_stream$) (?v1 B_set$) (?v2 B_a_fun$) (?v3 A_set$)) (=> (and (member$e ?v0 (streams$d ?v1)) (forall ((?v4 B$)) (=> (member$f ?v4 ?v1) (member$g (fun_app$ ?v2 ?v4) ?v3)))) (member$d (smap$ ?v2 ?v0) (streams$e ?v3)))) :named a56))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$) (?v2 A_a_fun$) (?v3 A_set$)) (=> (and (member$d ?v0 (streams$e ?v1)) (forall ((?v4 A$)) (=> (member$g ?v4 ?v1) (member$g (fun_app$e ?v2 ?v4) ?v3)))) (member$d (fun_app$d (smap$c ?v2) ?v0) (streams$e ?v3)))) :named a57))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$) (?v2 A_b_fun$) (?v3 B_set$)) (=> (and (member$d ?v0 (streams$e ?v1)) (forall ((?v4 A$)) (=> (member$g ?v4 ?v1) (member$f (fun_app$c ?v2 ?v4) ?v3)))) (member$e (fun_app$b (smap$b ?v2) ?v0) (streams$d ?v3)))) :named a58))
(assert (! (forall ((?v0 B_stream$) (?v1 B_set$) (?v2 B_b_fun$) (?v3 B_set$)) (=> (and (member$e ?v0 (streams$d ?v1)) (forall ((?v4 B$)) (=> (member$f ?v4 ?v1) (member$f (fun_app$a ?v2 ?v4) ?v3)))) (member$e (smap$a ?v2 ?v0) (streams$d ?v3)))) :named a59))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$) (?v2 A_stream_a_fun$) (?v3 A_set$)) (=> (and (member$c ?v0 (streams$b ?v1)) (forall ((?v4 A_stream$)) (=> (member$d ?v4 ?v1) (member$g (fun_app$i ?v2 ?v4) ?v3)))) (member$d (smap$g ?v2 ?v0) (streams$e ?v3)))) :named a60))
(assert (! (forall ((?v0 B_stream_stream$) (?v1 B_stream_set$) (?v2 B_stream_a_fun$) (?v3 A_set$)) (=> (and (member$a ?v0 (streams$c ?v1)) (forall ((?v4 B_stream$)) (=> (member$e ?v4 ?v1) (member$g (fun_app$h ?v2 ?v4) ?v3)))) (member$d (smap$f ?v2 ?v0) (streams$e ?v3)))) :named a61))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_set$) (?v2 A_stream_b_fun$) (?v3 B_set$)) (=> (and (member$c ?v0 (streams$b ?v1)) (forall ((?v4 A_stream$)) (=> (member$d ?v4 ?v1) (member$f (fun_app$g ?v2 ?v4) ?v3)))) (member$e (smap$e ?v2 ?v0) (streams$d ?v3)))) :named a62))
(assert (! (forall ((?v0 B_stream_stream$) (?v1 B_stream_set$) (?v2 B_stream_b_fun$) (?v3 B_set$)) (=> (and (member$a ?v0 (streams$c ?v1)) (forall ((?v4 B_stream$)) (=> (member$e ?v4 ?v1) (member$f (fun_app$f ?v2 ?v4) ?v3)))) (member$e (smap$d ?v2 ?v0) (streams$d ?v3)))) :named a63))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$) (?v2 A_a_stream_fun$) (?v3 A_stream_set$)) (=> (and (member$d ?v0 (streams$e ?v1)) (forall ((?v4 A$)) (=> (member$g ?v4 ?v1) (member$d (fun_app$m ?v2 ?v4) ?v3)))) (member$c (smap$k ?v2 ?v0) (streams$b ?v3)))) :named a64))
(assert (! (forall ((?v0 A_stream$) (?v1 A_set$) (?v2 A_b_stream_fun$) (?v3 B_stream_set$)) (=> (and (member$d ?v0 (streams$e ?v1)) (forall ((?v4 A$)) (=> (member$g ?v4 ?v1) (member$e (fun_app$l ?v2 ?v4) ?v3)))) (member$a (smap$j ?v2 ?v0) (streams$c ?v3)))) :named a65))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_b_stream_fun$) (?v3 A_b_stream_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$g ?v4 (sset$e ?v0)) (and (member$g ?v5 (sset$e ?v1)) (= (fun_app$l ?v2 ?v4) (fun_app$l ?v3 ?v5)))) (= ?v4 ?v5))) (= (smap$j ?v2 ?v0) (smap$j ?v3 ?v1))) (= ?v0 ?v1))) :named a66))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_stream_fun$) (?v3 A_a_stream_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$g ?v4 (sset$e ?v0)) (and (member$g ?v5 (sset$e ?v1)) (= (fun_app$m ?v2 ?v4) (fun_app$m ?v3 ?v5)))) (= ?v4 ?v5))) (= (smap$k ?v2 ?v0) (smap$k ?v3 ?v1))) (= ?v0 ?v1))) :named a67))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream$) (?v2 B_b_stream_fun$) (?v3 B_b_stream_fun$)) (=> (and (forall ((?v4 B$) (?v5 B$)) (=> (and (member$f ?v4 (sset$d ?v0)) (and (member$f ?v5 (sset$d ?v1)) (= (fun_app$j ?v2 ?v4) (fun_app$j ?v3 ?v5)))) (= ?v4 ?v5))) (= (smap$h ?v2 ?v0) (smap$h ?v3 ?v1))) (= ?v0 ?v1))) :named a68))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream$) (?v2 B_a_stream_fun$) (?v3 B_a_stream_fun$)) (=> (and (forall ((?v4 B$) (?v5 B$)) (=> (and (member$f ?v4 (sset$d ?v0)) (and (member$f ?v5 (sset$d ?v1)) (= (fun_app$k ?v2 ?v4) (fun_app$k ?v3 ?v5)))) (= ?v4 ?v5))) (= (smap$i ?v2 ?v0) (smap$i ?v3 ?v1))) (= ?v0 ?v1))) :named a69))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream$) (?v2 A_stream_a_fun$) (?v3 A_stream_a_fun$)) (=> (and (forall ((?v4 A_stream$) (?v5 A_stream$)) (=> (and (member$d ?v4 (sset$b ?v0)) (and (member$d ?v5 (sset$b ?v1)) (= (fun_app$i ?v2 ?v4) (fun_app$i ?v3 ?v5)))) (= ?v4 ?v5))) (= (smap$g ?v2 ?v0) (smap$g ?v3 ?v1))) (= ?v0 ?v1))) :named a70))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$g ?v4 (sset$e ?v0)) (and (member$g ?v5 (sset$e ?v1)) (= (fun_app$e ?v2 ?v4) (fun_app$e ?v3 ?v5)))) (= ?v4 ?v5))) (= (fun_app$d (smap$c ?v2) ?v0) (fun_app$d (smap$c ?v3) ?v1))) (= ?v0 ?v1))) :named a71))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_b_fun$) (?v3 A_b_fun$)) (=> (and (forall ((?v4 A$) (?v5 A$)) (=> (and (member$g ?v4 (sset$e ?v0)) (and (member$g ?v5 (sset$e ?v1)) (= (fun_app$c ?v2 ?v4) (fun_app$c ?v3 ?v5)))) (= ?v4 ?v5))) (= (fun_app$b (smap$b ?v2) ?v0) (fun_app$b (smap$b ?v3) ?v1))) (= ?v0 ?v1))) :named a72))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream$) (?v2 B_b_fun$) (?v3 B_b_fun$)) (=> (and (forall ((?v4 B$) (?v5 B$)) (=> (and (member$f ?v4 (sset$d ?v0)) (and (member$f ?v5 (sset$d ?v1)) (= (fun_app$a ?v2 ?v4) (fun_app$a ?v3 ?v5)))) (= ?v4 ?v5))) (= (smap$a ?v2 ?v0) (smap$a ?v3 ?v1))) (= ?v0 ?v1))) :named a73))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream$) (?v2 B_a_fun$) (?v3 B_a_fun$)) (=> (and (forall ((?v4 B$) (?v5 B$)) (=> (and (member$f ?v4 (sset$d ?v0)) (and (member$f ?v5 (sset$d ?v1)) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v5)))) (= ?v4 ?v5))) (= (smap$ ?v2 ?v0) (smap$ ?v3 ?v1))) (= ?v0 ?v1))) :named a74))
(assert (! (forall ((?v0 A_stream$) (?v1 A_b_stream_fun$) (?v2 A_b_stream_fun$)) (=> (forall ((?v3 A$)) (=> (member$g ?v3 (sset$e ?v0)) (= (fun_app$l ?v1 ?v3) (fun_app$l ?v2 ?v3)))) (= (smap$j ?v1 ?v0) (smap$j ?v2 ?v0)))) :named a75))
(assert (! (forall ((?v0 A_stream$) (?v1 A_a_stream_fun$) (?v2 A_a_stream_fun$)) (=> (forall ((?v3 A$)) (=> (member$g ?v3 (sset$e ?v0)) (= (fun_app$m ?v1 ?v3) (fun_app$m ?v2 ?v3)))) (= (smap$k ?v1 ?v0) (smap$k ?v2 ?v0)))) :named a76))
(assert (! (forall ((?v0 B_stream$) (?v1 B_b_stream_fun$) (?v2 B_b_stream_fun$)) (=> (forall ((?v3 B$)) (=> (member$f ?v3 (sset$d ?v0)) (= (fun_app$j ?v1 ?v3) (fun_app$j ?v2 ?v3)))) (= (smap$h ?v1 ?v0) (smap$h ?v2 ?v0)))) :named a77))
(assert (! (forall ((?v0 B_stream$) (?v1 B_a_stream_fun$) (?v2 B_a_stream_fun$)) (=> (forall ((?v3 B$)) (=> (member$f ?v3 (sset$d ?v0)) (= (fun_app$k ?v1 ?v3) (fun_app$k ?v2 ?v3)))) (= (smap$i ?v1 ?v0) (smap$i ?v2 ?v0)))) :named a78))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_a_fun$) (?v2 A_stream_a_fun$)) (=> (forall ((?v3 A_stream$)) (=> (member$d ?v3 (sset$b ?v0)) (= (fun_app$i ?v1 ?v3) (fun_app$i ?v2 ?v3)))) (= (smap$g ?v1 ?v0) (smap$g ?v2 ?v0)))) :named a79))
(assert (! (forall ((?v0 A_stream$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (=> (forall ((?v3 A$)) (=> (member$g ?v3 (sset$e ?v0)) (= (fun_app$e ?v1 ?v3) (fun_app$e ?v2 ?v3)))) (= (fun_app$d (smap$c ?v1) ?v0) (fun_app$d (smap$c ?v2) ?v0)))) :named a80))
(assert (! (forall ((?v0 A_stream$) (?v1 A_b_fun$) (?v2 A_b_fun$)) (=> (forall ((?v3 A$)) (=> (member$g ?v3 (sset$e ?v0)) (= (fun_app$c ?v1 ?v3) (fun_app$c ?v2 ?v3)))) (= (fun_app$b (smap$b ?v1) ?v0) (fun_app$b (smap$b ?v2) ?v0)))) :named a81))
(assert (! (forall ((?v0 B_stream$) (?v1 B_b_fun$) (?v2 B_b_fun$)) (=> (forall ((?v3 B$)) (=> (member$f ?v3 (sset$d ?v0)) (= (fun_app$a ?v1 ?v3) (fun_app$a ?v2 ?v3)))) (= (smap$a ?v1 ?v0) (smap$a ?v2 ?v0)))) :named a82))
(assert (! (forall ((?v0 B_stream$) (?v1 B_a_fun$) (?v2 B_a_fun$)) (=> (forall ((?v3 B$)) (=> (member$f ?v3 (sset$d ?v0)) (= (fun_app$ ?v1 ?v3) (fun_app$ ?v2 ?v3)))) (= (smap$ ?v1 ?v0) (smap$ ?v2 ?v0)))) :named a83))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_b_stream_fun$) (?v3 A_b_stream_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$g ?v4 (sset$e ?v1)) (= (fun_app$l ?v2 ?v4) (fun_app$l ?v3 ?v4))))) (= (smap$j ?v2 ?v0) (smap$j ?v3 ?v1)))) :named a84))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_stream_fun$) (?v3 A_a_stream_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$g ?v4 (sset$e ?v1)) (= (fun_app$m ?v2 ?v4) (fun_app$m ?v3 ?v4))))) (= (smap$k ?v2 ?v0) (smap$k ?v3 ?v1)))) :named a85))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream$) (?v2 B_b_stream_fun$) (?v3 B_b_stream_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 B$)) (=> (member$f ?v4 (sset$d ?v1)) (= (fun_app$j ?v2 ?v4) (fun_app$j ?v3 ?v4))))) (= (smap$h ?v2 ?v0) (smap$h ?v3 ?v1)))) :named a86))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream$) (?v2 B_a_stream_fun$) (?v3 B_a_stream_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 B$)) (=> (member$f ?v4 (sset$d ?v1)) (= (fun_app$k ?v2 ?v4) (fun_app$k ?v3 ?v4))))) (= (smap$i ?v2 ?v0) (smap$i ?v3 ?v1)))) :named a87))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream$) (?v2 A_stream_a_fun$) (?v3 A_stream_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_stream$)) (=> (member$d ?v4 (sset$b ?v1)) (= (fun_app$i ?v2 ?v4) (fun_app$i ?v3 ?v4))))) (= (smap$g ?v2 ?v0) (smap$g ?v3 ?v1)))) :named a88))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$g ?v4 (sset$e ?v1)) (= (fun_app$e ?v2 ?v4) (fun_app$e ?v3 ?v4))))) (= (fun_app$d (smap$c ?v2) ?v0) (fun_app$d (smap$c ?v3) ?v1)))) :named a89))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_b_fun$) (?v3 A_b_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$g ?v4 (sset$e ?v1)) (= (fun_app$c ?v2 ?v4) (fun_app$c ?v3 ?v4))))) (= (fun_app$b (smap$b ?v2) ?v0) (fun_app$b (smap$b ?v3) ?v1)))) :named a90))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream$) (?v2 B_b_fun$) (?v3 B_b_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 B$)) (=> (member$f ?v4 (sset$d ?v1)) (= (fun_app$a ?v2 ?v4) (fun_app$a ?v3 ?v4))))) (= (smap$a ?v2 ?v0) (smap$a ?v3 ?v1)))) :named a91))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream$) (?v2 B_a_fun$) (?v3 B_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 B$)) (=> (member$f ?v4 (sset$d ?v1)) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (smap$ ?v2 ?v0) (smap$ ?v3 ?v1)))) :named a92))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream$) (?v2 A_stream_stream$)) (! (= (smap$g ?v0 (sCons$c ?v1 ?v2)) (sCons$ (fun_app$i ?v0 ?v1) (smap$g ?v0 ?v2))) :pattern ((smap$g ?v0 (sCons$c ?v1 ?v2))))) :named a93))
(assert (! (forall ((?v0 A_stream_b_stream_fun$) (?v1 A_stream$) (?v2 A_stream_stream$)) (! (= (smap$l ?v0 (sCons$c ?v1 ?v2)) (sCons$b (fun_app$b ?v0 ?v1) (smap$l ?v0 ?v2))) :pattern ((smap$l ?v0 (sCons$c ?v1 ?v2))))) :named a94))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream$) (?v2 A_stream_stream$)) (! (= (smap$m ?v0 (sCons$c ?v1 ?v2)) (sCons$c (fun_app$d ?v0 ?v1) (smap$m ?v0 ?v2))) :pattern ((smap$m ?v0 (sCons$c ?v1 ?v2))))) :named a95))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$) (?v2 B_stream$)) (! (= (smap$a ?v0 (sCons$a ?v1 ?v2)) (sCons$a (fun_app$a ?v0 ?v1) (smap$a ?v0 ?v2))) :pattern ((smap$a ?v0 (sCons$a ?v1 ?v2))))) :named a96))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$b (smap$b ?v0) (sCons$ ?v1 ?v2)) (sCons$a (fun_app$c ?v0 ?v1) (fun_app$b (smap$b ?v0) ?v2))) :pattern ((fun_app$b (smap$b ?v0) (sCons$ ?v1 ?v2))))) :named a97))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$d (smap$c ?v0) (sCons$ ?v1 ?v2)) (sCons$ (fun_app$e ?v0 ?v1) (fun_app$d (smap$c ?v0) ?v2))) :pattern ((fun_app$d (smap$c ?v0) (sCons$ ?v1 ?v2))))) :named a98))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B$) (?v2 B_stream$)) (! (= (smap$ ?v0 (sCons$a ?v1 ?v2)) (sCons$ (fun_app$ ?v0 ?v1) (smap$ ?v0 ?v2))) :pattern ((smap$ ?v0 (sCons$a ?v1 ?v2))))) :named a99))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A_b_fun$) (?v2 A_stream$)) (= (smap$ ?v0 (fun_app$b (smap$b ?v1) ?v2)) (fun_app$d (smap$c (fun_app$n (comp$ ?v0) ?v1)) ?v2))) :named a100))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (fun_app$d (smap$c ?v0) (fun_app$d (smap$c ?v1) ?v2)) (fun_app$d (smap$c (fun_app$o (comp$a ?v0) ?v1)) ?v2))) :named a101))
(assert (! (forall ((?v0 A_b_fun$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (fun_app$b (smap$b ?v0) (smap$ ?v1 ?v2)) (smap$a (fun_app$p (comp$b ?v0) ?v1) ?v2))) :named a102))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (fun_app$b (smap$b ?v0) (fun_app$d (smap$c ?v1) ?v2)) (fun_app$b (smap$b (fun_app$q (comp$c ?v0) ?v1)) ?v2))) :named a103))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_b_fun$) (?v2 A_stream$)) (= (smap$a ?v0 (fun_app$b (smap$b ?v1) ?v2)) (fun_app$b (smap$b (fun_app$r (comp$d ?v0) ?v1)) ?v2))) :named a104))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B_stream$)) (= (smap$a ?v0 (smap$a ?v1 ?v2)) (smap$a (fun_app$s (comp$e ?v0) ?v1) ?v2))) :named a105))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (fun_app$d (smap$c ?v0) (smap$ ?v1 ?v2)) (smap$ (fun_app$t (comp$f ?v0) ?v1) ?v2))) :named a106))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_b_fun$) (?v2 B_stream$)) (= (smap$ ?v0 (smap$a ?v1 ?v2)) (smap$ (fun_app$u (comp$g ?v0) ?v1) ?v2))) :named a107))
(assert (! (forall ((?v0 B$) (?v1 B_stream$) (?v2 B$) (?v3 B_stream$)) (= (= (sCons$a ?v0 ?v1) (sCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a108))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a109))
(assert (! (forall ((?v0 B_stream$)) (= (sCons$a (shd$a ?v0) (stl$a ?v0)) ?v0)) :named a110))
(assert (! (forall ((?v0 A_stream$)) (= (sCons$ (shd$ ?v0) (stl$ ?v0)) ?v0)) :named a111))
(assert (! (forall ((?v0 Nat$) (?v1 B_stream$)) (= (shd$a (sdrop$c ?v0 ?v1)) (snth$ ?v1 ?v0))) :named a112))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (= (shd$ (fun_app$d (sdrop$ ?v0) ?v1)) (snth$a ?v1 ?v0))) :named a113))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_stream$) (?v2 A_stream_set$)) (= (member$c (sCons$c ?v0 ?v1) (streams$b ?v2)) (and (member$d ?v0 ?v2) (member$c ?v1 (streams$b ?v2))))) :named a114))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream_stream$) (?v2 B_stream_set$)) (= (member$a (sCons$b ?v0 ?v1) (streams$c ?v2)) (and (member$e ?v0 ?v2) (member$a ?v1 (streams$c ?v2))))) :named a115))
(assert (! (forall ((?v0 B$) (?v1 B_stream$) (?v2 B_set$)) (= (member$e (sCons$a ?v0 ?v1) (streams$d ?v2)) (and (member$f ?v0 ?v2) (member$e ?v1 (streams$d ?v2))))) :named a116))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A_set$)) (= (member$d (sCons$ ?v0 ?v1) (streams$e ?v2)) (and (member$g ?v0 ?v2) (member$d ?v1 (streams$e ?v2))))) :named a117))
(check-sat)
;(get-unsat-core)
