; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 33
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort Bool_a_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_bool_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_fun_fun$ 0)
(declare-sort A_bool_fun_a_bool_fun_fun$ 0)
(declare-sort Bool_a_fun_bool_a_fun_fun$ 0)
(declare-sort Bool_a_fun_bool_bool_fun_fun$ 0)
(declare-sort Bool_bool_fun_bool_a_fun_fun$ 0)
(declare-sort Bool_bool_fun_bool_bool_fun_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-fun m$ () Nat$)
(declare-fun p$ () A_bool_fun$)
(declare-fun s$ () A_stream$)
(declare-fun ma$ () Nat$)
(declare-fun sa$ () A_stream$)
(declare-fun uu$ () Bool_bool_fun$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun uua$ () Nat_bool_fun$)
(declare-fun uub$ () A_a_fun$)
(declare-fun uuc$ () Bool_bool_fun$)
(declare-fun comp$ (Bool_bool_fun$) A_bool_fun_a_bool_fun_fun$)
(declare-fun snth$ (A_stream$ Nat$) A$)
(declare-fun comp$a (A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun comp$b (Bool_a_fun$) A_bool_fun_a_a_fun_fun$)
(declare-fun comp$c (A_bool_fun$) Bool_a_fun_bool_bool_fun_fun$)
(declare-fun comp$d (Bool_a_fun$) Bool_bool_fun_bool_a_fun_fun$)
(declare-fun comp$e (A_a_fun$) Bool_a_fun_bool_a_fun_fun$)
(declare-fun comp$f (Bool_bool_fun$) Bool_bool_fun_bool_bool_fun_fun$)
(declare-fun comp$g (A_bool_fun$) A_a_fun_a_bool_fun_fun$)
(declare-fun least$ (Nat_bool_fun$) Nat$)
(declare-fun sdrop$ (Nat$ A_stream$) A_stream$)
(declare-fun fun_app$ (Nat_bool_fun$ Nat$) Bool)
(declare-fun less_eq$ (Nat$) Nat_bool_fun$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (Bool_bool_fun$ Bool) Bool)
(declare-fun fun_app$c (A_a_fun$ A$) A$)
(declare-fun fun_app$d (A_bool_fun_a_bool_fun_fun$ A_bool_fun$) A_bool_fun$)
(declare-fun fun_app$e (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$f (A_bool_fun_a_a_fun_fun$ A_bool_fun$) A_a_fun$)
(declare-fun fun_app$g (Bool_a_fun$ Bool) A$)
(declare-fun fun_app$h (Bool_a_fun_bool_bool_fun_fun$ Bool_a_fun$) Bool_bool_fun$)
(declare-fun fun_app$i (Bool_bool_fun_bool_a_fun_fun$ Bool_bool_fun$) Bool_a_fun$)
(declare-fun fun_app$j (Bool_a_fun_bool_a_fun_fun$ Bool_a_fun$) Bool_a_fun$)
(declare-fun fun_app$k (Bool_bool_fun_bool_bool_fun_fun$ Bool_bool_fun$) Bool_bool_fun$)
(declare-fun fun_app$l (A_a_fun_a_bool_fun_fun$ A_a_fun$) A_bool_fun$)
(declare-fun fun_app$m (Nat_nat_fun$ Nat$) Nat$)
(declare-fun sdrop_while$ (A_bool_fun$ A_stream$) A_stream$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uua$ ?v0) (fun_app$a p$ (snth$ s$ ?v0))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Bool)) (! (= (fun_app$b uu$ ?v0) (not ?v0)) :pattern ((fun_app$b uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 Bool)) (! (= (fun_app$b uuc$ ?v0) ?v0) :pattern ((fun_app$b uuc$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$c uub$ ?v0) ?v0) :pattern ((fun_app$c uub$ ?v0)))) :named a3))
(assert (! (not (= (sdrop_while$ (fun_app$d (comp$ uu$) p$) (stl$ sa$)) (sdrop$ ma$ (stl$ sa$)))) :named a4))
(assert (! (= (suc$ ma$) (suc$ ma$)) :named a5))
(assert (! (fun_app$a p$ (snth$ sa$ (suc$ ma$))) :named a6))
(assert (! (forall ((?v0 Nat$)) (=> (fun_app$a p$ (snth$ sa$ ?v0)) (fun_app$ (less_eq$ (suc$ ma$)) ?v0))) :named a7))
(assert (! (exists ((?v0 Nat$)) (fun_app$a p$ (snth$ s$ ?v0))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (= (sdrop$ ?v0 (stl$ ?v1)) (stl$ (sdrop$ ?v0 ?v1)))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (= (stl$ (sdrop$ ?v0 ?v1)) (sdrop$ (suc$ ?v0) ?v1))) :named a10))
(assert (! (forall ((?v0 A_stream$)) (=> (and (fun_app$a p$ (snth$ ?v0 ma$)) (and (forall ((?v1 Nat$)) (=> (fun_app$a p$ (snth$ ?v0 ?v1)) (fun_app$ (less_eq$ ma$) ?v1))) (= ma$ ma$))) (= (sdrop_while$ (fun_app$d (comp$ uu$) p$) ?v0) (sdrop$ ma$ ?v0)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (! (= (sdrop$ (suc$ ?v0) ?v1) (sdrop$ ?v0 (stl$ ?v1))) :pattern ((sdrop$ (suc$ ?v0) ?v1)))) :named a12))
(assert (! (fun_app$a p$ (snth$ s$ m$)) :named a13))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$c (fun_app$e (comp$a ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$c (fun_app$e (comp$a ?v0) ?v1) ?v2)))) :named a14))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$c (fun_app$f (comp$b ?v0) ?v1) ?v2) (fun_app$g ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$c (fun_app$f (comp$b ?v0) ?v1) ?v2)))) :named a15))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 Bool)) (! (= (fun_app$b (fun_app$h (comp$c ?v0) ?v1) ?v2) (fun_app$a ?v0 (fun_app$g ?v1 ?v2))) :pattern ((fun_app$b (fun_app$h (comp$c ?v0) ?v1) ?v2)))) :named a16))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 Bool_bool_fun$) (?v2 Bool)) (! (= (fun_app$g (fun_app$i (comp$d ?v0) ?v1) ?v2) (fun_app$g ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$g (fun_app$i (comp$d ?v0) ?v1) ?v2)))) :named a17))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Bool_a_fun$) (?v2 Bool)) (! (= (fun_app$g (fun_app$j (comp$e ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$g ?v1 ?v2))) :pattern ((fun_app$g (fun_app$j (comp$e ?v0) ?v1) ?v2)))) :named a18))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool)) (! (= (fun_app$b (fun_app$k (comp$f ?v0) ?v1) ?v2) (fun_app$b ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$b (fun_app$k (comp$f ?v0) ?v1) ?v2)))) :named a19))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$a (fun_app$l (comp$g ?v0) ?v1) ?v2) (fun_app$a ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$a (fun_app$l (comp$g ?v0) ?v1) ?v2)))) :named a20))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$a (fun_app$d (comp$ ?v0) ?v1) ?v2) (fun_app$b ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$a (fun_app$d (comp$ ?v0) ?v1) ?v2)))) :named a21))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$)) (= (fun_app$d (comp$ ?v0) (fun_app$l (comp$g ?v1) ?v2)) (fun_app$l (comp$g (fun_app$d (comp$ ?v0) ?v1)) ?v2))) :named a22))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$)) (= (fun_app$d (comp$ ?v0) (fun_app$d (comp$ ?v1) ?v2)) (fun_app$d (comp$ (fun_app$k (comp$f ?v0) ?v1)) ?v2))) :named a23))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_a_fun$)) (= (fun_app$k (comp$f ?v0) (fun_app$h (comp$c ?v1) ?v2)) (fun_app$h (comp$c (fun_app$d (comp$ ?v0) ?v1)) ?v2))) :named a24))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$)) (= (fun_app$k (comp$f ?v0) (fun_app$k (comp$f ?v1) ?v2)) (fun_app$k (comp$f (fun_app$k (comp$f ?v0) ?v1)) ?v2))) :named a25))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 A_bool_fun$)) (= (fun_app$l (comp$g ?v0) (fun_app$f (comp$b ?v1) ?v2)) (fun_app$d (comp$ (fun_app$h (comp$c ?v0) ?v1)) ?v2))) :named a26))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (= (fun_app$l (comp$g ?v0) (fun_app$e (comp$a ?v1) ?v2)) (fun_app$l (comp$g (fun_app$l (comp$g ?v0) ?v1)) ?v2))) :named a27))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (= (fun_app$e (comp$a ?v0) (fun_app$e (comp$a ?v1) ?v2)) (fun_app$e (comp$a (fun_app$e (comp$a ?v0) ?v1)) ?v2))) :named a28))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Bool_a_fun$) (?v2 A_bool_fun$)) (= (fun_app$e (comp$a ?v0) (fun_app$f (comp$b ?v1) ?v2)) (fun_app$f (comp$b (fun_app$j (comp$e ?v0) ?v1)) ?v2))) :named a29))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$)) (= (fun_app$f (comp$b ?v0) (fun_app$d (comp$ ?v1) ?v2)) (fun_app$f (comp$b (fun_app$i (comp$d ?v0) ?v1)) ?v2))) :named a30))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$)) (= (fun_app$f (comp$b ?v0) (fun_app$l (comp$g ?v1) ?v2)) (fun_app$e (comp$a (fun_app$f (comp$b ?v0) ?v1)) ?v2))) :named a31))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$)) (= (fun_app$l (comp$g (fun_app$d (comp$ ?v0) ?v1)) ?v2) (fun_app$d (comp$ ?v0) (fun_app$l (comp$g ?v1) ?v2)))) :named a32))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$)) (= (fun_app$d (comp$ (fun_app$k (comp$f ?v0) ?v1)) ?v2) (fun_app$d (comp$ ?v0) (fun_app$d (comp$ ?v1) ?v2)))) :named a33))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_a_fun$)) (= (fun_app$h (comp$c (fun_app$d (comp$ ?v0) ?v1)) ?v2) (fun_app$k (comp$f ?v0) (fun_app$h (comp$c ?v1) ?v2)))) :named a34))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 A_bool_fun$)) (= (fun_app$d (comp$ (fun_app$h (comp$c ?v0) ?v1)) ?v2) (fun_app$l (comp$g ?v0) (fun_app$f (comp$b ?v1) ?v2)))) :named a35))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$)) (= (fun_app$k (comp$f (fun_app$k (comp$f ?v0) ?v1)) ?v2) (fun_app$k (comp$f ?v0) (fun_app$k (comp$f ?v1) ?v2)))) :named a36))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (= (fun_app$l (comp$g (fun_app$l (comp$g ?v0) ?v1)) ?v2) (fun_app$l (comp$g ?v0) (fun_app$e (comp$a ?v1) ?v2)))) :named a37))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 Bool_bool_fun$)) (= (fun_app$k (comp$f (fun_app$h (comp$c ?v0) ?v1)) ?v2) (fun_app$h (comp$c ?v0) (fun_app$i (comp$d ?v1) ?v2)))) :named a38))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (= (fun_app$e (comp$a (fun_app$e (comp$a ?v0) ?v1)) ?v2) (fun_app$e (comp$a ?v0) (fun_app$e (comp$a ?v1) ?v2)))) :named a39))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$)) (= (fun_app$e (comp$a (fun_app$f (comp$b ?v0) ?v1)) ?v2) (fun_app$f (comp$b ?v0) (fun_app$l (comp$g ?v1) ?v2)))) :named a40))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$)) (= (fun_app$f (comp$b (fun_app$i (comp$d ?v0) ?v1)) ?v2) (fun_app$f (comp$b ?v0) (fun_app$d (comp$ ?v1) ?v2)))) :named a41))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$c (fun_app$e (comp$a ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$c (fun_app$e (comp$a ?v0) ?v1) ?v2)))) :named a42))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$c (fun_app$f (comp$b ?v0) ?v1) ?v2) (fun_app$g ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$c (fun_app$f (comp$b ?v0) ?v1) ?v2)))) :named a43))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 Bool)) (! (= (fun_app$b (fun_app$h (comp$c ?v0) ?v1) ?v2) (fun_app$a ?v0 (fun_app$g ?v1 ?v2))) :pattern ((fun_app$b (fun_app$h (comp$c ?v0) ?v1) ?v2)))) :named a44))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 Bool_bool_fun$) (?v2 Bool)) (! (= (fun_app$g (fun_app$i (comp$d ?v0) ?v1) ?v2) (fun_app$g ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$g (fun_app$i (comp$d ?v0) ?v1) ?v2)))) :named a45))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Bool_a_fun$) (?v2 Bool)) (! (= (fun_app$g (fun_app$j (comp$e ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$g ?v1 ?v2))) :pattern ((fun_app$g (fun_app$j (comp$e ?v0) ?v1) ?v2)))) :named a46))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool)) (! (= (fun_app$b (fun_app$k (comp$f ?v0) ?v1) ?v2) (fun_app$b ?v0 (fun_app$b ?v1 ?v2))) :pattern ((fun_app$b (fun_app$k (comp$f ?v0) ?v1) ?v2)))) :named a47))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$a (fun_app$l (comp$g ?v0) ?v1) ?v2) (fun_app$a ?v0 (fun_app$c ?v1 ?v2))) :pattern ((fun_app$a (fun_app$l (comp$g ?v0) ?v1) ?v2)))) :named a48))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A$)) (! (= (fun_app$a (fun_app$d (comp$ ?v0) ?v1) ?v2) (fun_app$b ?v0 (fun_app$a ?v1 ?v2))) :pattern ((fun_app$a (fun_app$d (comp$ ?v0) ?v1) ?v2)))) :named a49))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$)) (=> (and (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$b ?v0 (fun_app$a ?v1 ?v4)) (fun_app$b ?v2 (fun_app$a ?v3 ?v4)))) false)) false)) :named a50))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$)) (=> (and (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$l (comp$g ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$b ?v0 (fun_app$a ?v1 ?v4)) (fun_app$a ?v2 (fun_app$c ?v3 ?v4)))) false)) false)) :named a51))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$)) (=> (and (= (fun_app$k (comp$f ?v0) ?v1) (fun_app$k (comp$f ?v2) ?v3)) (=> (forall ((?v4 Bool)) (= (fun_app$b ?v0 (fun_app$b ?v1 ?v4)) (fun_app$b ?v2 (fun_app$b ?v3 ?v4)))) false)) false)) :named a52))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$)) (=> (and (= (fun_app$l (comp$g ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$a ?v0 (fun_app$c ?v1 ?v4)) (fun_app$b ?v2 (fun_app$a ?v3 ?v4)))) false)) false)) :named a53))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$)) (=> (and (= (fun_app$l (comp$g ?v0) ?v1) (fun_app$l (comp$g ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$a ?v0 (fun_app$c ?v1 ?v4)) (fun_app$a ?v2 (fun_app$c ?v3 ?v4)))) false)) false)) :named a54))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$) (?v3 Bool_a_fun$)) (=> (and (= (fun_app$k (comp$f ?v0) ?v1) (fun_app$h (comp$c ?v2) ?v3)) (=> (forall ((?v4 Bool)) (= (fun_app$b ?v0 (fun_app$b ?v1 ?v4)) (fun_app$a ?v2 (fun_app$g ?v3 ?v4)))) false)) false)) :named a55))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= (fun_app$e (comp$a ?v0) ?v1) (fun_app$e (comp$a ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$c ?v0 (fun_app$c ?v1 ?v4)) (fun_app$c ?v2 (fun_app$c ?v3 ?v4)))) false)) false)) :named a56))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 Bool_a_fun$) (?v3 A_bool_fun$)) (=> (and (= (fun_app$e (comp$a ?v0) ?v1) (fun_app$f (comp$b ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$c ?v0 (fun_app$c ?v1 ?v4)) (fun_app$g ?v2 (fun_app$a ?v3 ?v4)))) false)) false)) :named a57))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= (fun_app$f (comp$b ?v0) ?v1) (fun_app$e (comp$a ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$g ?v0 (fun_app$a ?v1 ?v4)) (fun_app$c ?v2 (fun_app$c ?v3 ?v4)))) false)) false)) :named a58))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 Bool_a_fun$) (?v3 A_bool_fun$)) (=> (and (= (fun_app$f (comp$b ?v0) ?v1) (fun_app$f (comp$b ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$g ?v0 (fun_app$a ?v1 ?v4)) (fun_app$g ?v2 (fun_app$a ?v3 ?v4)))) false)) false)) :named a59))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 Bool_bool_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$l (comp$g ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (= (fun_app$k (comp$f ?v4) ?v2) ?v5)) (= (fun_app$l (comp$g (fun_app$d (comp$ ?v4) ?v0)) ?v1) (fun_app$d (comp$ ?v5) ?v3)))) :named a60))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$) (?v4 Bool_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$l (comp$g ?v2) ?v3)) (= (fun_app$d (comp$ ?v4) ?v2) ?v5)) (= (fun_app$d (comp$ (fun_app$k (comp$f ?v4) ?v0)) ?v1) (fun_app$l (comp$g ?v5) ?v3)))) :named a61))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 Bool_bool_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (= (fun_app$k (comp$f ?v4) ?v2) ?v5)) (= (fun_app$d (comp$ (fun_app$k (comp$f ?v4) ?v0)) ?v1) (fun_app$d (comp$ ?v5) ?v3)))) :named a62))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Bool_a_fun$) (?v2 Bool_a_fun$) (?v3 Bool_bool_fun$) (?v4 A_bool_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$j (comp$e ?v0) ?v1) (fun_app$i (comp$d ?v2) ?v3)) (= (fun_app$h (comp$c ?v4) ?v2) ?v5)) (= (fun_app$h (comp$c (fun_app$l (comp$g ?v4) ?v0)) ?v1) (fun_app$k (comp$f ?v5) ?v3)))) :named a63))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 Bool_a_fun$) (?v3 A_bool_fun$) (?v4 A_bool_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$e (comp$a ?v0) ?v1) (fun_app$f (comp$b ?v2) ?v3)) (= (fun_app$h (comp$c ?v4) ?v2) ?v5)) (= (fun_app$l (comp$g (fun_app$l (comp$g ?v4) ?v0)) ?v1) (fun_app$d (comp$ ?v5) ?v3)))) :named a64))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$f (comp$b ?v0) ?v1) (fun_app$e (comp$a ?v2) ?v3)) (= (fun_app$l (comp$g ?v4) ?v2) ?v5)) (= (fun_app$d (comp$ (fun_app$h (comp$c ?v4) ?v0)) ?v1) (fun_app$l (comp$g ?v5) ?v3)))) :named a65))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 Bool_bool_fun$) (?v2 A_a_fun$) (?v3 Bool_a_fun$) (?v4 A_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$i (comp$d ?v0) ?v1) (fun_app$j (comp$e ?v2) ?v3)) (= (fun_app$l (comp$g ?v4) ?v2) ?v5)) (= (fun_app$k (comp$f (fun_app$h (comp$c ?v4) ?v0)) ?v1) (fun_app$h (comp$c ?v5) ?v3)))) :named a66))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$e (comp$a ?v0) ?v1) (fun_app$e (comp$a ?v2) ?v3)) (= (fun_app$l (comp$g ?v4) ?v2) ?v5)) (= (fun_app$l (comp$g (fun_app$l (comp$g ?v4) ?v0)) ?v1) (fun_app$l (comp$g ?v5) ?v3)))) :named a67))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$) (?v4 Bool_bool_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$h (comp$c ?v0) ?v1) (fun_app$k (comp$f ?v2) ?v3)) (= (fun_app$k (comp$f ?v4) ?v2) ?v5)) (= (fun_app$h (comp$c (fun_app$d (comp$ ?v4) ?v0)) ?v1) (fun_app$k (comp$f ?v5) ?v3)))) :named a68))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$) (?v3 Bool_a_fun$) (?v4 Bool_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$k (comp$f ?v0) ?v1) (fun_app$h (comp$c ?v2) ?v3)) (= (fun_app$d (comp$ ?v4) ?v2) ?v5)) (= (fun_app$k (comp$f (fun_app$k (comp$f ?v4) ?v0)) ?v1) (fun_app$h (comp$c ?v5) ?v3)))) :named a69))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$) (?v4 A_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$k (comp$f ?v0) ?v1) (fun_app$k (comp$f ?v2) ?v3)) (= (fun_app$d (comp$ ?v3) ?v4) ?v5)) (= (fun_app$d (comp$ ?v0) (fun_app$d (comp$ ?v1) ?v4)) (fun_app$d (comp$ ?v2) ?v5)))) :named a70))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 A_a_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (= (fun_app$l (comp$g ?v3) ?v4) ?v5)) (= (fun_app$d (comp$ ?v0) (fun_app$l (comp$g ?v1) ?v4)) (fun_app$d (comp$ ?v2) ?v5)))) :named a71))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$) (?v4 A_bool_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$h (comp$c ?v0) ?v1) (fun_app$k (comp$f ?v2) ?v3)) (= (fun_app$d (comp$ ?v3) ?v4) ?v5)) (= (fun_app$l (comp$g ?v0) (fun_app$f (comp$b ?v1) ?v4)) (fun_app$d (comp$ ?v2) ?v5)))) :named a72))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 Bool_a_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (= (fun_app$h (comp$c ?v3) ?v4) ?v5)) (= (fun_app$k (comp$f ?v0) (fun_app$h (comp$c ?v1) ?v4)) (fun_app$k (comp$f ?v2) ?v5)))) :named a73))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$) (?v4 A_a_fun$) (?v5 A_a_fun$)) (=> (and (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$l (comp$g ?v2) ?v3)) (= (fun_app$e (comp$a ?v3) ?v4) ?v5)) (= (fun_app$d (comp$ ?v0) (fun_app$l (comp$g ?v1) ?v4)) (fun_app$l (comp$g ?v2) ?v5)))) :named a74))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$) (?v4 Bool_a_fun$) (?v5 Bool_a_fun$)) (=> (and (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$l (comp$g ?v2) ?v3)) (= (fun_app$j (comp$e ?v3) ?v4) ?v5)) (= (fun_app$k (comp$f ?v0) (fun_app$h (comp$c ?v1) ?v4)) (fun_app$h (comp$c ?v2) ?v5)))) :named a75))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$) (?v3 Bool_a_fun$) (?v4 A_bool_fun$) (?v5 A_a_fun$)) (=> (and (= (fun_app$k (comp$f ?v0) ?v1) (fun_app$h (comp$c ?v2) ?v3)) (= (fun_app$f (comp$b ?v3) ?v4) ?v5)) (= (fun_app$d (comp$ ?v0) (fun_app$d (comp$ ?v1) ?v4)) (fun_app$l (comp$g ?v2) ?v5)))) :named a76))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$) (?v4 Bool_bool_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$k (comp$f ?v0) ?v1) (fun_app$k (comp$f ?v2) ?v3)) (= (fun_app$k (comp$f ?v3) ?v4) ?v5)) (= (fun_app$k (comp$f ?v0) (fun_app$k (comp$f ?v1) ?v4)) (fun_app$k (comp$f ?v2) ?v5)))) :named a77))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 Bool_a_fun$) (?v5 Bool_bool_fun$)) (=> (and (= (fun_app$l (comp$g ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (= (fun_app$h (comp$c ?v3) ?v4) ?v5)) (= (fun_app$h (comp$c ?v0) (fun_app$j (comp$e ?v1) ?v4)) (fun_app$k (comp$f ?v2) ?v5)))) :named a78))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 A_a_fun$) (?v5 A_bool_fun$)) (=> (and (= (fun_app$l (comp$g ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (= (fun_app$l (comp$g ?v3) ?v4) ?v5)) (= (fun_app$l (comp$g ?v0) (fun_app$e (comp$a ?v1) ?v4)) (fun_app$d (comp$ ?v2) ?v5)))) :named a79))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 A$)) (=> (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (= (fun_app$b ?v0 (fun_app$a ?v1 ?v4)) (fun_app$b ?v2 (fun_app$a ?v3 ?v4))))) :named a80))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$) (?v4 A$)) (=> (= (fun_app$d (comp$ ?v0) ?v1) (fun_app$l (comp$g ?v2) ?v3)) (= (fun_app$b ?v0 (fun_app$a ?v1 ?v4)) (fun_app$a ?v2 (fun_app$c ?v3 ?v4))))) :named a81))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$) (?v4 Bool)) (=> (= (fun_app$k (comp$f ?v0) ?v1) (fun_app$k (comp$f ?v2) ?v3)) (= (fun_app$b ?v0 (fun_app$b ?v1 ?v4)) (fun_app$b ?v2 (fun_app$b ?v3 ?v4))))) :named a82))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$) (?v4 A$)) (=> (= (fun_app$l (comp$g ?v0) ?v1) (fun_app$d (comp$ ?v2) ?v3)) (= (fun_app$a ?v0 (fun_app$c ?v1 ?v4)) (fun_app$b ?v2 (fun_app$a ?v3 ?v4))))) :named a83))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$) (?v4 A$)) (=> (= (fun_app$l (comp$g ?v0) ?v1) (fun_app$l (comp$g ?v2) ?v3)) (= (fun_app$a ?v0 (fun_app$c ?v1 ?v4)) (fun_app$a ?v2 (fun_app$c ?v3 ?v4))))) :named a84))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 A_bool_fun$) (?v3 Bool_a_fun$) (?v4 Bool)) (=> (= (fun_app$k (comp$f ?v0) ?v1) (fun_app$h (comp$c ?v2) ?v3)) (= (fun_app$b ?v0 (fun_app$b ?v1 ?v4)) (fun_app$a ?v2 (fun_app$g ?v3 ?v4))))) :named a85))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A$)) (=> (= (fun_app$e (comp$a ?v0) ?v1) (fun_app$e (comp$a ?v2) ?v3)) (= (fun_app$c ?v0 (fun_app$c ?v1 ?v4)) (fun_app$c ?v2 (fun_app$c ?v3 ?v4))))) :named a86))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 Bool_a_fun$) (?v3 A_bool_fun$) (?v4 A$)) (=> (= (fun_app$e (comp$a ?v0) ?v1) (fun_app$f (comp$b ?v2) ?v3)) (= (fun_app$c ?v0 (fun_app$c ?v1 ?v4)) (fun_app$g ?v2 (fun_app$a ?v3 ?v4))))) :named a87))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A$)) (=> (= (fun_app$f (comp$b ?v0) ?v1) (fun_app$e (comp$a ?v2) ?v3)) (= (fun_app$g ?v0 (fun_app$a ?v1 ?v4)) (fun_app$c ?v2 (fun_app$c ?v3 ?v4))))) :named a88))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 Bool_a_fun$) (?v3 A_bool_fun$) (?v4 A$)) (=> (= (fun_app$f (comp$b ?v0) ?v1) (fun_app$f (comp$b ?v2) ?v3)) (= (fun_app$g ?v0 (fun_app$a ?v1 ?v4)) (fun_app$g ?v2 (fun_app$a ?v3 ?v4))))) :named a89))
(assert (! (forall ((?v0 Nat$)) (=> (fun_app$a p$ (snth$ s$ ?v0)) (fun_app$ (less_eq$ m$) ?v0))) :named a90))
(assert (! (= (least$ uua$) m$) :named a91))
(assert (! (forall ((?v0 A_a_fun$)) (= (fun_app$e (comp$a uub$) ?v0) ?v0)) :named a92))
(assert (! (forall ((?v0 Bool_a_fun$)) (= (fun_app$j (comp$e uub$) ?v0) ?v0)) :named a93))
(assert (! (forall ((?v0 Bool_bool_fun$)) (= (fun_app$k (comp$f uuc$) ?v0) ?v0)) :named a94))
(assert (! (forall ((?v0 A_bool_fun$)) (= (fun_app$d (comp$ uuc$) ?v0) ?v0)) :named a95))
(assert (! (forall ((?v0 A_stream$) (?v1 Nat$)) (! (= (snth$ ?v0 (suc$ ?v1)) (snth$ (stl$ ?v0) ?v1)) :pattern ((snth$ ?v0 (suc$ ?v1))))) :named a96))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A$)) (=> (= (fun_app$e (comp$a ?v0) ?v1) ?v2) (= (fun_app$c ?v0 (fun_app$c ?v1 ?v3)) (fun_app$c ?v2 ?v3)))) :named a97))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$) (?v3 A$)) (=> (= (fun_app$f (comp$b ?v0) ?v1) ?v2) (= (fun_app$g ?v0 (fun_app$a ?v1 ?v3)) (fun_app$c ?v2 ?v3)))) :named a98))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 Bool_bool_fun$) (?v3 Bool)) (=> (= (fun_app$h (comp$c ?v0) ?v1) ?v2) (= (fun_app$a ?v0 (fun_app$g ?v1 ?v3)) (fun_app$b ?v2 ?v3)))) :named a99))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_a_fun$) (?v3 Bool)) (=> (= (fun_app$i (comp$d ?v0) ?v1) ?v2) (= (fun_app$g ?v0 (fun_app$b ?v1 ?v3)) (fun_app$g ?v2 ?v3)))) :named a100))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Bool_a_fun$) (?v2 Bool_a_fun$) (?v3 Bool)) (=> (= (fun_app$j (comp$e ?v0) ?v1) ?v2) (= (fun_app$c ?v0 (fun_app$g ?v1 ?v3)) (fun_app$g ?v2 ?v3)))) :named a101))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool)) (=> (= (fun_app$k (comp$f ?v0) ?v1) ?v2) (= (fun_app$b ?v0 (fun_app$b ?v1 ?v3)) (fun_app$b ?v2 ?v3)))) :named a102))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_bool_fun$) (?v3 A$)) (=> (= (fun_app$l (comp$g ?v0) ?v1) ?v2) (= (fun_app$a ?v0 (fun_app$c ?v1 ?v3)) (fun_app$a ?v2 ?v3)))) :named a103))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A$)) (=> (= (fun_app$d (comp$ ?v0) ?v1) ?v2) (= (fun_app$b ?v0 (fun_app$a ?v1 ?v3)) (fun_app$a ?v2 ?v3)))) :named a104))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$)) (=> (= (fun_app$k (comp$f ?v0) ?v1) ?v2) (= (fun_app$d (comp$ ?v0) (fun_app$d (comp$ ?v1) ?v3)) (fun_app$d (comp$ ?v2) ?v3)))) :named a105))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$d (comp$ ?v0) ?v1) ?v2) (= (fun_app$d (comp$ ?v0) (fun_app$l (comp$g ?v1) ?v3)) (fun_app$l (comp$g ?v2) ?v3)))) :named a106))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 Bool_bool_fun$) (?v3 A_bool_fun$)) (=> (= (fun_app$h (comp$c ?v0) ?v1) ?v2) (= (fun_app$l (comp$g ?v0) (fun_app$f (comp$b ?v1) ?v3)) (fun_app$d (comp$ ?v2) ?v3)))) :named a107))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 Bool_a_fun$)) (=> (= (fun_app$d (comp$ ?v0) ?v1) ?v2) (= (fun_app$k (comp$f ?v0) (fun_app$h (comp$c ?v1) ?v3)) (fun_app$h (comp$c ?v2) ?v3)))) :named a108))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$)) (=> (= (fun_app$k (comp$f ?v0) ?v1) ?v2) (= (fun_app$k (comp$f ?v0) (fun_app$k (comp$f ?v1) ?v3)) (fun_app$k (comp$f ?v2) ?v3)))) :named a109))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_bool_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$l (comp$g ?v0) ?v1) ?v2) (= (fun_app$l (comp$g ?v0) (fun_app$e (comp$a ?v1) ?v3)) (fun_app$l (comp$g ?v2) ?v3)))) :named a110))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_bool_fun$) (?v3 Bool_a_fun$)) (=> (= (fun_app$l (comp$g ?v0) ?v1) ?v2) (= (fun_app$h (comp$c ?v0) (fun_app$j (comp$e ?v1) ?v3)) (fun_app$h (comp$c ?v2) ?v3)))) :named a111))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$e (comp$a ?v0) ?v1) ?v2) (= (fun_app$e (comp$a ?v0) (fun_app$e (comp$a ?v1) ?v3)) (fun_app$e (comp$a ?v2) ?v3)))) :named a112))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 Bool_a_fun$)) (=> (= (fun_app$e (comp$a ?v0) ?v1) ?v2) (= (fun_app$j (comp$e ?v0) (fun_app$j (comp$e ?v1) ?v3)) (fun_app$j (comp$e ?v2) ?v3)))) :named a113))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$f (comp$b ?v0) ?v1) ?v2) (= (fun_app$f (comp$b ?v0) (fun_app$l (comp$g ?v1) ?v3)) (fun_app$e (comp$a ?v2) ?v3)))) :named a114))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_bool_fun$) (?v3 Bool_bool_fun$)) (=> (= (fun_app$l (comp$g ?v0) ?v1) ?v2) (= (fun_app$l (comp$g (fun_app$d (comp$ ?v3) ?v0)) ?v1) (fun_app$d (comp$ ?v3) ?v2)))) :named a115))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 Bool_bool_fun$)) (=> (= (fun_app$d (comp$ ?v0) ?v1) ?v2) (= (fun_app$d (comp$ (fun_app$k (comp$f ?v3) ?v0)) ?v1) (fun_app$d (comp$ ?v3) ?v2)))) :named a116))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 Bool_a_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$)) (=> (= (fun_app$h (comp$c ?v0) ?v1) ?v2) (= (fun_app$h (comp$c (fun_app$d (comp$ ?v3) ?v0)) ?v1) (fun_app$k (comp$f ?v3) ?v2)))) :named a117))
(assert (! (forall ((?v0 Bool_a_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$) (?v3 A_bool_fun$)) (=> (= (fun_app$f (comp$b ?v0) ?v1) ?v2) (= (fun_app$d (comp$ (fun_app$h (comp$c ?v3) ?v0)) ?v1) (fun_app$l (comp$g ?v3) ?v2)))) :named a118))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_bool_fun$)) (=> (= (fun_app$e (comp$a ?v0) ?v1) ?v2) (= (fun_app$l (comp$g (fun_app$l (comp$g ?v3) ?v0)) ?v1) (fun_app$l (comp$g ?v3) ?v2)))) :named a119))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_bool_fun$)) (=> (= (fun_app$k (comp$f ?v0) ?v1) ?v2) (= (fun_app$k (comp$f (fun_app$k (comp$f ?v3) ?v0)) ?v1) (fun_app$k (comp$f ?v3) ?v2)))) :named a120))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_bool_fun$) (?v2 A_bool_fun$) (?v3 Bool_a_fun$)) (=> (= (fun_app$d (comp$ ?v0) ?v1) ?v2) (= (fun_app$f (comp$b (fun_app$i (comp$d ?v3) ?v0)) ?v1) (fun_app$f (comp$b ?v3) ?v2)))) :named a121))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 Bool_bool_fun$) (?v2 Bool_bool_fun$) (?v3 Bool_a_fun$)) (=> (= (fun_app$k (comp$f ?v0) ?v1) ?v2) (= (fun_app$i (comp$d (fun_app$i (comp$d ?v3) ?v0)) ?v1) (fun_app$i (comp$d ?v3) ?v2)))) :named a122))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_fun$) (?v2 A_bool_fun$) (?v3 Bool_a_fun$)) (=> (= (fun_app$l (comp$g ?v0) ?v1) ?v2) (= (fun_app$e (comp$a (fun_app$f (comp$b ?v3) ?v0)) ?v1) (fun_app$f (comp$b ?v3) ?v2)))) :named a123))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (= (fun_app$e (comp$a ?v0) ?v1) ?v2) (= (fun_app$e (comp$a (fun_app$e (comp$a ?v3) ?v0)) ?v1) (fun_app$e (comp$a ?v3) ?v2)))) :named a124))
(assert (! (=> (forall ((?v0 Nat$)) (=> (and (fun_app$a p$ (snth$ s$ ?v0)) (and (forall ((?v1 Nat$)) (=> (fun_app$a p$ (snth$ s$ ?v1)) (fun_app$ (less_eq$ ?v0) ?v1))) (= (least$ uua$) ?v0))) false)) false) :named a125))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (less_eq$ (suc$ ?v0)) (suc$ ?v1)) (fun_app$ (less_eq$ ?v0) ?v1)) :pattern ((fun_app$ (less_eq$ (suc$ ?v0)) (suc$ ?v1))))) :named a126))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (less_eq$ (fun_app$m ?v0 (suc$ ?v3))) (fun_app$m ?v0 ?v3))) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ (fun_app$m ?v0 ?v2)) (fun_app$m ?v0 ?v1)))) :named a127))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (and (forall ((?v3 Nat$)) (fun_app$ (less_eq$ (fun_app$m ?v0 ?v3)) (fun_app$m ?v0 (suc$ ?v3)))) (fun_app$ (less_eq$ ?v1) ?v2)) (fun_app$ (less_eq$ (fun_app$m ?v0 ?v1)) (fun_app$m ?v0 ?v2)))) :named a128))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a129))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (= (suc$ ?v0) (suc$ ?v1)) (= ?v0 ?v1))) :named a130))
(assert (! (forall ((?v0 Nat$)) (fun_app$ (less_eq$ ?v0) ?v0)) :named a131))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (less_eq$ ?v0) (suc$ ?v1)) (or (fun_app$ (less_eq$ ?v0) ?v1) (= ?v0 (suc$ ?v1)))) :pattern ((fun_app$ (less_eq$ ?v0) (suc$ ?v1))))) :named a132))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (not (fun_app$ (less_eq$ ?v0) ?v1)) (fun_app$ (less_eq$ (suc$ ?v1)) ?v0))) :named a133))
(assert (! (forall ((?v0 Nat_bool_fun$) (?v1 Nat$)) (=> (fun_app$ ?v0 ?v1) (fun_app$ ?v0 (least$ ?v0)))) :named a134))
(check-sat)
;(get-unsat-core)
