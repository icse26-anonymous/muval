; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 156
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_list_set$ 0)
(declare-sort A_a_set_fun$ 0)
(declare-sort A_list_bool_fun$ 0)
(declare-sort A_a_list_set_fun$ 0)
(declare-sort A_list_a_set_fun$ 0)
(declare-sort A_list_a_list_set_fun$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-codatatypes () ((A_list_stream$ (sCons$ (shd$ A_list$) (stl$ A_list_stream$)))
  (A_stream$ (sCons$a (shd$a A$) (stl$a A_stream$)))))
(declare-fun m$ () Nat$)
(declare-fun n$ () Nat$)
(declare-fun s$ () A_list_stream$)
(declare-fun x$ () A$)
(declare-fun m$a () Nat$)
(declare-fun nth$ (A_list$ Nat$) A$)
(declare-fun set$ () A_list_a_set_fun$)
(declare-fun flat$ (A_list_stream$) A_stream$)
(declare-fun less$ (Nat$ Nat$) Bool)
(declare-fun size$ (A_list$) Nat$)
(declare-fun snth$ (A_list_stream$ Nat$) A_list$)
(declare-fun sset$ (A_list_stream$) A_list_set$)
(declare-fun less$a (A_list_set$ A_list_set$) Bool)
(declare-fun less$b (A_set$ A_set$) Bool)
(declare-fun snth$a (A_stream$ Nat$) A$)
(declare-fun sset$a (A_stream$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_a_set_fun$ A$) A_set$)
(declare-fun member$a (A_list$ A_list_set$) Bool)
(declare-fun fun_app$a (A_a_list_set_fun$ A$) A_list_set$)
(declare-fun fun_app$b (A_list_a_list_set_fun$ A_list$) A_list_set$)
(declare-fun fun_app$c (A_list_a_set_fun$ A_list$) A_set$)
(declare-fun fun_app$d (A_bool_fun$ A$) Bool)
(declare-fun fun_app$e (A_list_bool_fun$ A_list$) Bool)
(declare-fun supremum$ (A_list_set$ A_list_a_set_fun$) A_set$)
(declare-fun supremum$a (A_set$ A_a_set_fun$) A_set$)
(declare-fun supremum$b (A_set$ A_a_list_set_fun$) A_list_set$)
(declare-fun supremum$c (A_list_set$ A_list_a_list_set_fun$) A_list_set$)
(assert (! (not (member$ x$ (supremum$ (sset$ s$) set$))) :named a0))
(assert (! (less$ m$ (size$ (snth$ s$ n$))) :named a1))
(assert (! (= x$ (nth$ (snth$ s$ n$) m$)) :named a2))
(assert (! (forall ((?v0 A_list$)) (=> (member$a ?v0 (sset$ s$)) (not (= ?v0 nil$)))) :named a3))
(assert (! (=> (forall ((?v0 Nat$) (?v1 Nat$)) (=> (and (= x$ (nth$ (snth$ s$ ?v0) ?v1)) (less$ ?v1 (size$ (snth$ s$ ?v0)))) false)) false) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_a_set_fun$)) (= (member$ ?v0 (supremum$a ?v1 ?v2)) (exists ((?v3 A$)) (and (member$ ?v3 ?v1) (member$ ?v0 (fun_app$ ?v2 ?v3)))))) :named a5))
(assert (! (forall ((?v0 A_list$) (?v1 A_set$) (?v2 A_a_list_set_fun$)) (= (member$a ?v0 (supremum$b ?v1 ?v2)) (exists ((?v3 A$)) (and (member$ ?v3 ?v1) (member$a ?v0 (fun_app$a ?v2 ?v3)))))) :named a6))
(assert (! (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list_a_list_set_fun$)) (= (member$a ?v0 (supremum$c ?v1 ?v2)) (exists ((?v3 A_list$)) (and (member$a ?v3 ?v1) (member$a ?v0 (fun_app$b ?v2 ?v3)))))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_list_set$) (?v2 A_list_a_set_fun$)) (= (member$ ?v0 (supremum$ ?v1 ?v2)) (exists ((?v3 A_list$)) (and (member$a ?v3 ?v1) (member$ ?v0 (fun_app$c ?v2 ?v3)))))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A$) (?v3 A_a_set_fun$)) (=> (and (member$ ?v0 ?v1) (member$ ?v2 (fun_app$ ?v3 ?v0))) (member$ ?v2 (supremum$a ?v1 ?v3)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_list$) (?v3 A_a_list_set_fun$)) (=> (and (member$ ?v0 ?v1) (member$a ?v2 (fun_app$a ?v3 ?v0))) (member$a ?v2 (supremum$b ?v1 ?v3)))) :named a10))
(assert (! (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A_list$) (?v3 A_list_a_list_set_fun$)) (=> (and (member$a ?v0 ?v1) (member$a ?v2 (fun_app$b ?v3 ?v0))) (member$a ?v2 (supremum$c ?v1 ?v3)))) :named a11))
(assert (! (forall ((?v0 A_list$) (?v1 A_list_set$) (?v2 A$) (?v3 A_list_a_set_fun$)) (=> (and (member$a ?v0 ?v1) (member$ ?v2 (fun_app$c ?v3 ?v0))) (member$ ?v2 (supremum$ ?v1 ?v3)))) :named a12))
(assert (! (member$ x$ (sset$a (flat$ s$))) :named a13))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$ ?v3 (supremum$a ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (exists ((?v4 A$)) (and (member$ ?v4 (fun_app$ ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a14))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_list_set_fun$) (?v2 A_list_bool_fun$)) (= (exists ((?v3 A_list$)) (and (member$a ?v3 (supremum$b ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (exists ((?v4 A_list$)) (and (member$a ?v4 (fun_app$a ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a15))
(assert (! (forall ((?v0 A_list_set$) (?v1 A_list_a_list_set_fun$) (?v2 A_list_bool_fun$)) (= (exists ((?v3 A_list$)) (and (member$a ?v3 (supremum$c ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (exists ((?v3 A_list$)) (and (member$a ?v3 ?v0) (exists ((?v4 A_list$)) (and (member$a ?v4 (fun_app$b ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a16))
(assert (! (forall ((?v0 A_list_set$) (?v1 A_list_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (exists ((?v3 A_list$)) (and (member$a ?v3 ?v0) (exists ((?v4 A$)) (and (member$ ?v4 (fun_app$c ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a17))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$ ?v3 (supremum$a ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (exists ((?v4 A$)) (and (member$ ?v4 (fun_app$ ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a18))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_list_set_fun$) (?v2 A_list_bool_fun$)) (= (exists ((?v3 A_list$)) (and (member$a ?v3 (supremum$b ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (exists ((?v3 A$)) (and (member$ ?v3 ?v0) (exists ((?v4 A_list$)) (and (member$a ?v4 (fun_app$a ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a19))
(assert (! (forall ((?v0 A_list_set$) (?v1 A_list_a_list_set_fun$) (?v2 A_list_bool_fun$)) (= (exists ((?v3 A_list$)) (and (member$a ?v3 (supremum$c ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (exists ((?v3 A_list$)) (and (member$a ?v3 ?v0) (exists ((?v4 A_list$)) (and (member$a ?v4 (fun_app$b ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a20))
(assert (! (forall ((?v0 A_list_set$) (?v1 A_list_a_set_fun$) (?v2 A_bool_fun$)) (= (exists ((?v3 A$)) (and (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (exists ((?v3 A_list$)) (and (member$a ?v3 ?v0) (exists ((?v4 A$)) (and (member$ ?v4 (fun_app$c ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a21))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$ ?v3 (supremum$a ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$ ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a22))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_list_set_fun$) (?v2 A_list_bool_fun$)) (= (forall ((?v3 A_list$)) (=> (member$a ?v3 (supremum$b ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A_list$)) (=> (member$a ?v4 (fun_app$a ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a23))
(assert (! (forall ((?v0 A_list_set$) (?v1 A_list_a_list_set_fun$) (?v2 A_list_bool_fun$)) (= (forall ((?v3 A_list$)) (=> (member$a ?v3 (supremum$c ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (forall ((?v3 A_list$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A_list$)) (=> (member$a ?v4 (fun_app$b ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a24))
(assert (! (forall ((?v0 A_list_set$) (?v1 A_list_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (forall ((?v3 A_list$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$c ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a25))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$ ?v3 (supremum$a ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$ ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a26))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_list_set_fun$) (?v2 A_list_bool_fun$)) (= (forall ((?v3 A_list$)) (=> (member$a ?v3 (supremum$b ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$ ?v3 ?v0) (forall ((?v4 A_list$)) (=> (member$a ?v4 (fun_app$a ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a27))
(assert (! (forall ((?v0 A_list_set$) (?v1 A_list_a_list_set_fun$) (?v2 A_list_bool_fun$)) (= (forall ((?v3 A_list$)) (=> (member$a ?v3 (supremum$c ?v0 ?v1)) (fun_app$e ?v2 ?v3))) (forall ((?v3 A_list$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A_list$)) (=> (member$a ?v4 (fun_app$b ?v1 ?v3)) (fun_app$e ?v2 ?v4))))))) :named a28))
(assert (! (forall ((?v0 A_list_set$) (?v1 A_list_a_set_fun$) (?v2 A_bool_fun$)) (= (forall ((?v3 A$)) (=> (member$ ?v3 (supremum$ ?v0 ?v1)) (fun_app$d ?v2 ?v3))) (forall ((?v3 A_list$)) (=> (member$a ?v3 ?v0) (forall ((?v4 A$)) (=> (member$ ?v4 (fun_app$c ?v1 ?v3)) (fun_app$d ?v2 ?v4))))))) :named a29))
(assert (! (= x$ (snth$a (flat$ s$) m$a)) :named a30))
(assert (! (forall ((?v0 A_list_stream$) (?v1 Nat$)) (member$a (snth$ ?v0 ?v1) (sset$ ?v0))) :named a31))
(assert (! (forall ((?v0 A_stream$) (?v1 Nat$)) (member$ (snth$a ?v0 ?v1) (sset$a ?v0))) :named a32))
(assert (! (=> (forall ((?v0 Nat$)) (=> (= x$ (snth$a (flat$ s$) ?v0)) false)) false) :named a33))
(assert (! (forall ((?v0 A_list_set$) (?v1 A_list_a_list_set_fun$) (?v2 A_list_set$) (?v3 A_list$)) (=> (and (less$a (supremum$c ?v0 ?v1) ?v2) (member$a ?v3 ?v0)) (less$a (fun_app$b ?v1 ?v3) ?v2))) :named a34))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_list_set_fun$) (?v2 A_list_set$) (?v3 A$)) (=> (and (less$a (supremum$b ?v0 ?v1) ?v2) (member$ ?v3 ?v0)) (less$a (fun_app$a ?v1 ?v3) ?v2))) :named a35))
(assert (! (forall ((?v0 A_set$) (?v1 A_a_set_fun$) (?v2 A_set$) (?v3 A$)) (=> (and (less$b (supremum$a ?v0 ?v1) ?v2) (member$ ?v3 ?v0)) (less$b (fun_app$ ?v1 ?v3) ?v2))) :named a36))
(assert (! (forall ((?v0 A_list_set$) (?v1 A_list_a_set_fun$) (?v2 A_set$) (?v3 A_list$)) (=> (and (less$b (supremum$ ?v0 ?v1) ?v2) (member$a ?v3 ?v0)) (less$b (fun_app$c ?v1 ?v3) ?v2))) :named a37))
(check-sat)
;(get-unsat-core)
