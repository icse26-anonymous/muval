; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 58
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_stream_set$ 0)
(declare-sort A_a_stream_fun$ 0)
(declare-sort A_stream_a_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort A_stream_stream_set$ 0)
(declare-sort A_a_stream_stream_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort A_stream_stream_a_fun$ 0)
(declare-sort A_stream_stream_bool_fun$ 0)
(declare-sort A_stream_stream_stream_set$ 0)
(declare-sort A_a_stream_stream_stream_fun$ 0)
(declare-sort A_stream_a_stream_stream_fun$ 0)
(declare-sort A_stream_stream_a_stream_fun$ 0)
(declare-sort A_stream_stream_stream_a_fun$ 0)
(declare-sort A_stream_stream_stream_bool_fun$ 0)
(declare-sort A_stream_stream_stream_stream_set$ 0)
(declare-sort A_stream_stream_a_stream_stream_fun$ 0)
(declare-sort A_stream_stream_stream_stream_bool_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (A_stream_stream$ (sCons$a (shd$a A_stream$) (stl$a A_stream_stream$)))
  (A_stream_stream_stream$ (sCons$b (shd$b A_stream_stream$) (stl$b A_stream_stream_stream$)))
  (A_stream_stream_stream_stream$ (sCons$c (shd$c A_stream_stream_stream$) (stl$c A_stream_stream_stream_stream$)))))
(declare-fun x$ () A$)
(declare-fun y$ () A_stream$)
(declare-fun uu$ () A_stream_a_stream_fun$)
(declare-fun x$a () A$)
(declare-fun y$a () A_stream_set$)
(declare-fun sset$ (A_stream_stream_stream_stream$) A_stream_stream_stream_set$)
(declare-fun image$ (A_stream_a_stream_fun$ A_stream_set$) A_stream_set$)
(declare-fun sset$a (A_stream_stream_stream$) A_stream_stream_set$)
(declare-fun sset$b (A_stream$) A_set$)
(declare-fun sset$c (A_stream_stream$) A_stream_set$)
(declare-fun image$a (A_a_fun$ A_set$) A_set$)
(declare-fun image$b (A_stream_a_fun$ A_stream_set$) A_set$)
(declare-fun image$c (A_a_stream_fun$ A_set$) A_stream_set$)
(declare-fun image$d (A_a_stream_stream_fun$ A_set$) A_stream_stream_set$)
(declare-fun image$e (A_stream_stream_a_fun$ A_stream_stream_set$) A_set$)
(declare-fun image$f (A_stream_a_stream_stream_fun$ A_stream_set$) A_stream_stream_set$)
(declare-fun image$g (A_stream_stream_a_stream_fun$ A_stream_stream_set$) A_stream_set$)
(declare-fun image$h (A_stream_stream_a_stream_stream_fun$ A_stream_stream_set$) A_stream_stream_set$)
(declare-fun image$i (A_a_stream_stream_stream_fun$ A_set$) A_stream_stream_stream_set$)
(declare-fun image$j (A_stream_stream_stream_a_fun$ A_stream_stream_stream_set$) A_set$)
(declare-fun member$ (A_stream$ A_stream_set$) Bool)
(declare-fun fun_app$ (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (A_stream_stream$ A_stream_stream_set$) Bool)
(declare-fun member$c (A_stream_stream_stream$ A_stream_stream_stream_set$) Bool)
(declare-fun member$d (A_stream_stream_stream_stream$ A_stream_stream_stream_stream_set$) Bool)
(declare-fun smember$ (A_stream_stream$) A_stream_stream_stream_bool_fun$)
(declare-fun streams$ (A_stream_stream_stream_set$) A_stream_stream_stream_stream_set$)
(declare-fun fun_app$a (A_stream_stream_stream_bool_fun$ A_stream_stream_stream$) Bool)
(declare-fun fun_app$b (A_stream_stream_bool_fun$ A_stream_stream$) Bool)
(declare-fun fun_app$c (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$d (A_a_fun$ A$) A$)
(declare-fun fun_app$e (A_stream_a_fun$ A_stream$) A$)
(declare-fun fun_app$f (A_a_stream_fun$ A$) A_stream$)
(declare-fun fun_app$g (A_a_stream_stream_fun$ A$) A_stream_stream$)
(declare-fun fun_app$h (A_stream_stream_a_fun$ A_stream_stream$) A$)
(declare-fun fun_app$i (A_stream_a_stream_stream_fun$ A_stream$) A_stream_stream$)
(declare-fun fun_app$j (A_stream_stream_a_stream_fun$ A_stream_stream$) A_stream$)
(declare-fun fun_app$k (A_stream_stream_a_stream_stream_fun$ A_stream_stream$) A_stream_stream$)
(declare-fun fun_app$l (A_a_stream_stream_stream_fun$ A$) A_stream_stream_stream$)
(declare-fun fun_app$m (A_bool_fun$ A$) Bool)
(declare-fun fun_app$n (A_stream_stream_stream_a_fun$ A_stream_stream_stream$) A$)
(declare-fun fun_app$o (A_stream_stream_stream_stream_bool_fun$ A_stream_stream_stream_stream$) Bool)
(declare-fun smember$a (A_stream$) A_stream_stream_bool_fun$)
(declare-fun smember$b (A$) A_stream_bool_fun$)
(declare-fun smember$c (A_stream_stream_stream$) A_stream_stream_stream_stream_bool_fun$)
(declare-fun streams$a (A_stream_stream_set$) A_stream_stream_stream_set$)
(declare-fun streams$b (A_stream_set$) A_stream_stream_set$)
(declare-fun streams$c (A_set$) A_stream_set$)
(declare-fun streamsp$ (A_stream_stream_bool_fun$) A_stream_stream_stream_bool_fun$)
(declare-fun streamsp$a (A_stream_bool_fun$) A_stream_stream_bool_fun$)
(declare-fun streamsp$b (A_bool_fun$) A_stream_bool_fun$)
(declare-fun pred_stream$ (A_stream_stream_bool_fun$) A_stream_stream_stream_bool_fun$)
(declare-fun pred_stream$a (A_stream_bool_fun$) A_stream_stream_bool_fun$)
(declare-fun pred_stream$b (A_bool_fun$) A_stream_bool_fun$)
(assert (! (forall ((?v0 A_stream$)) (! (= (fun_app$ uu$ ?v0) (sCons$ x$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (= (member$ (sCons$ x$a y$) (image$ uu$ y$a)) (and (= x$a x$) (member$ y$ y$a)))) :named a1))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream$) (?v3 A_stream_stream_stream$)) (= (= (sCons$b ?v0 ?v1) (sCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a2))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_stream$) (?v2 A_stream$) (?v3 A_stream_stream$)) (= (= (sCons$a ?v0 ?v1) (sCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a4))
(assert (! (forall ((?v0 A_stream_stream_stream$)) (=> (forall ((?v1 A_stream_stream$) (?v2 A_stream_stream_stream$)) (=> (= ?v0 (sCons$b ?v1 ?v2)) false)) false)) :named a5))
(assert (! (forall ((?v0 A_stream_stream$)) (=> (forall ((?v1 A_stream$) (?v2 A_stream_stream$)) (=> (= ?v0 (sCons$a ?v1 ?v2)) false)) false)) :named a6))
(assert (! (forall ((?v0 A_stream$)) (=> (forall ((?v1 A$) (?v2 A_stream$)) (=> (= ?v0 (sCons$ ?v1 ?v2)) false)) false)) :named a7))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream$) (?v2 A_stream_stream_stream$)) (! (= (fun_app$a (smember$ ?v0) (sCons$b ?v1 ?v2)) (ite (= ?v0 ?v1) true (fun_app$a (smember$ ?v0) ?v2))) :pattern ((fun_app$a (smember$ ?v0) (sCons$b ?v1 ?v2))))) :named a8))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream$) (?v2 A_stream_stream$)) (! (= (fun_app$b (smember$a ?v0) (sCons$a ?v1 ?v2)) (ite (= ?v0 ?v1) true (fun_app$b (smember$a ?v0) ?v2))) :pattern ((fun_app$b (smember$a ?v0) (sCons$a ?v1 ?v2))))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$c (smember$b ?v0) (sCons$ ?v1 ?v2)) (ite (= ?v0 ?v1) true (fun_app$c (smember$b ?v0) ?v2))) :pattern ((fun_app$c (smember$b ?v0) (sCons$ ?v1 ?v2))))) :named a10))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_a_stream_fun$) (?v2 A_stream$) (?v3 A_stream_set$)) (=> (and (= ?v0 (fun_app$ ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (image$ ?v1 ?v3)))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v2)) (member$a ?v2 ?v3)) (member$a ?v0 (image$a ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_stream_a_fun$) (?v2 A_stream$) (?v3 A_stream_set$)) (=> (and (= ?v0 (fun_app$e ?v1 ?v2)) (member$ ?v2 ?v3)) (member$a ?v0 (image$b ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 A_stream$) (?v1 A_a_stream_fun$) (?v2 A$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$f ?v1 ?v2)) (member$a ?v2 ?v3)) (member$ ?v0 (image$c ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_a_stream_stream_fun$) (?v2 A$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$g ?v1 ?v2)) (member$a ?v2 ?v3)) (member$b ?v0 (image$d ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A_stream_stream_a_fun$) (?v2 A_stream_stream$) (?v3 A_stream_stream_set$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (member$b ?v2 ?v3)) (member$a ?v0 (image$e ?v1 ?v3)))) :named a16))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_a_stream_stream_fun$) (?v2 A_stream$) (?v3 A_stream_set$)) (=> (and (= ?v0 (fun_app$i ?v1 ?v2)) (member$ ?v2 ?v3)) (member$b ?v0 (image$f ?v1 ?v3)))) :named a17))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_stream_a_stream_fun$) (?v2 A_stream_stream$) (?v3 A_stream_stream_set$)) (=> (and (= ?v0 (fun_app$j ?v1 ?v2)) (member$b ?v2 ?v3)) (member$ ?v0 (image$g ?v1 ?v3)))) :named a18))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_a_stream_stream_fun$) (?v2 A_stream_stream$) (?v3 A_stream_stream_set$)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (member$b ?v2 ?v3)) (member$b ?v0 (image$h ?v1 ?v3)))) :named a19))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 A_a_stream_stream_stream_fun$) (?v2 A$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$l ?v1 ?v2)) (member$a ?v2 ?v3)) (member$c ?v0 (image$i ?v1 ?v3)))) :named a20))
(assert (! (forall ((?v0 A_stream_stream_bool_fun$) (?v1 A_stream_stream$) (?v2 A_stream_stream_stream$)) (! (= (fun_app$a (pred_stream$ ?v0) (sCons$b ?v1 ?v2)) (and (fun_app$b ?v0 ?v1) (fun_app$a (pred_stream$ ?v0) ?v2))) :pattern ((fun_app$a (pred_stream$ ?v0) (sCons$b ?v1 ?v2))))) :named a21))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$) (?v2 A_stream_stream$)) (! (= (fun_app$b (pred_stream$a ?v0) (sCons$a ?v1 ?v2)) (and (fun_app$c ?v0 ?v1) (fun_app$b (pred_stream$a ?v0) ?v2))) :pattern ((fun_app$b (pred_stream$a ?v0) (sCons$a ?v1 ?v2))))) :named a22))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (fun_app$c (pred_stream$b ?v0) (sCons$ ?v1 ?v2)) (and (fun_app$m ?v0 ?v1) (fun_app$c (pred_stream$b ?v0) ?v2))) :pattern ((fun_app$c (pred_stream$b ?v0) (sCons$ ?v1 ?v2))))) :named a23))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_a_stream_fun$) (?v2 A_stream_set$)) (= (member$ ?v0 (image$ ?v1 ?v2)) (exists ((?v3 A_stream$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$ ?v1 ?v3)))))) :named a24))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A_set$)) (= (member$a ?v0 (image$a ?v1 ?v2)) (exists ((?v3 A$)) (and (member$a ?v3 ?v2) (= ?v0 (fun_app$d ?v1 ?v3)))))) :named a25))
(assert (! (forall ((?v0 A_stream$) (?v1 A_a_stream_fun$) (?v2 A_set$)) (= (member$ ?v0 (image$c ?v1 ?v2)) (exists ((?v3 A$)) (and (member$a ?v3 ?v2) (= ?v0 (fun_app$f ?v1 ?v3)))))) :named a26))
(assert (! (forall ((?v0 A$) (?v1 A_stream_a_fun$) (?v2 A_stream_set$)) (= (member$a ?v0 (image$b ?v1 ?v2)) (exists ((?v3 A_stream$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$e ?v1 ?v3)))))) :named a27))
(assert (! (forall ((?v0 A$) (?v1 A_stream_stream_a_fun$) (?v2 A_stream_stream_set$)) (= (member$a ?v0 (image$e ?v1 ?v2)) (exists ((?v3 A_stream_stream$)) (and (member$b ?v3 ?v2) (= ?v0 (fun_app$h ?v1 ?v3)))))) :named a28))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_a_stream_stream_fun$) (?v2 A_set$)) (= (member$b ?v0 (image$d ?v1 ?v2)) (exists ((?v3 A$)) (and (member$a ?v3 ?v2) (= ?v0 (fun_app$g ?v1 ?v3)))))) :named a29))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_stream_a_stream_fun$) (?v2 A_stream_stream_set$)) (= (member$ ?v0 (image$g ?v1 ?v2)) (exists ((?v3 A_stream_stream$)) (and (member$b ?v3 ?v2) (= ?v0 (fun_app$j ?v1 ?v3)))))) :named a30))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_a_stream_stream_fun$) (?v2 A_stream_set$)) (= (member$b ?v0 (image$f ?v1 ?v2)) (exists ((?v3 A_stream$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$i ?v1 ?v3)))))) :named a31))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_a_stream_stream_fun$) (?v2 A_stream_stream_set$)) (= (member$b ?v0 (image$h ?v1 ?v2)) (exists ((?v3 A_stream_stream$)) (and (member$b ?v3 ?v2) (= ?v0 (fun_app$k ?v1 ?v3)))))) :named a32))
(assert (! (forall ((?v0 A$) (?v1 A_stream_stream_stream_a_fun$) (?v2 A_stream_stream_stream_set$)) (= (member$a ?v0 (image$j ?v1 ?v2)) (exists ((?v3 A_stream_stream_stream$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$n ?v1 ?v3)))))) :named a33))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_set$) (?v2 A_stream_a_stream_stream_fun$) (?v3 A_stream_a_stream_stream_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_stream$)) (=> (member$ ?v4 ?v1) (= (fun_app$i ?v2 ?v4) (fun_app$i ?v3 ?v4))))) (= (image$f ?v2 ?v0) (image$f ?v3 ?v1)))) :named a34))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_set$) (?v2 A_stream_a_fun$) (?v3 A_stream_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_stream$)) (=> (member$ ?v4 ?v1) (= (fun_app$e ?v2 ?v4) (fun_app$e ?v3 ?v4))))) (= (image$b ?v2 ?v0) (image$b ?v3 ?v1)))) :named a35))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_stream_stream_fun$) (?v3 A_a_stream_stream_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$a ?v4 ?v1) (= (fun_app$g ?v2 ?v4) (fun_app$g ?v3 ?v4))))) (= (image$d ?v2 ?v0) (image$d ?v3 ?v1)))) :named a36))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_stream_fun$) (?v3 A_a_stream_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$a ?v4 ?v1) (= (fun_app$f ?v2 ?v4) (fun_app$f ?v3 ?v4))))) (= (image$c ?v2 ?v0) (image$c ?v3 ?v1)))) :named a37))
(assert (! (forall ((?v0 A_set$) (?v1 A_set$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A$)) (=> (member$a ?v4 ?v1) (= (fun_app$d ?v2 ?v4) (fun_app$d ?v3 ?v4))))) (= (image$a ?v2 ?v0) (image$a ?v3 ?v1)))) :named a38))
(assert (! (forall ((?v0 A_stream_set$) (?v1 A_stream_set$) (?v2 A_stream_a_stream_fun$) (?v3 A_stream_a_stream_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_stream$)) (=> (member$ ?v4 ?v1) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (image$ ?v2 ?v0) (image$ ?v3 ?v1)))) :named a39))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_set$) (?v2 A_stream_bool_fun$)) (=> (exists ((?v3 A_stream$)) (and (member$ ?v3 (image$ ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A_stream$)) (and (member$ ?v3 ?v1) (fun_app$c ?v2 (fun_app$ ?v0 ?v3)))))) :named a40))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_set$) (?v2 A_bool_fun$)) (=> (exists ((?v3 A$)) (and (member$a ?v3 (image$a ?v0 ?v1)) (fun_app$m ?v2 ?v3))) (exists ((?v3 A$)) (and (member$a ?v3 ?v1) (fun_app$m ?v2 (fun_app$d ?v0 ?v3)))))) :named a41))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_set$) (?v2 A_stream_bool_fun$)) (=> (exists ((?v3 A_stream$)) (and (member$ ?v3 (image$c ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A$)) (and (member$a ?v3 ?v1) (fun_app$c ?v2 (fun_app$f ?v0 ?v3)))))) :named a42))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_set$) (?v2 A_bool_fun$)) (=> (exists ((?v3 A$)) (and (member$a ?v3 (image$b ?v0 ?v1)) (fun_app$m ?v2 ?v3))) (exists ((?v3 A_stream$)) (and (member$ ?v3 ?v1) (fun_app$m ?v2 (fun_app$e ?v0 ?v3)))))) :named a43))
(assert (! (forall ((?v0 A_stream_stream_a_fun$) (?v1 A_stream_stream_set$) (?v2 A_bool_fun$)) (=> (exists ((?v3 A$)) (and (member$a ?v3 (image$e ?v0 ?v1)) (fun_app$m ?v2 ?v3))) (exists ((?v3 A_stream_stream$)) (and (member$b ?v3 ?v1) (fun_app$m ?v2 (fun_app$h ?v0 ?v3)))))) :named a44))
(assert (! (forall ((?v0 A_a_stream_stream_fun$) (?v1 A_set$) (?v2 A_stream_stream_bool_fun$)) (=> (exists ((?v3 A_stream_stream$)) (and (member$b ?v3 (image$d ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (exists ((?v3 A$)) (and (member$a ?v3 ?v1) (fun_app$b ?v2 (fun_app$g ?v0 ?v3)))))) :named a45))
(assert (! (forall ((?v0 A_stream_stream_a_stream_fun$) (?v1 A_stream_stream_set$) (?v2 A_stream_bool_fun$)) (=> (exists ((?v3 A_stream$)) (and (member$ ?v3 (image$g ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 A_stream_stream$)) (and (member$b ?v3 ?v1) (fun_app$c ?v2 (fun_app$j ?v0 ?v3)))))) :named a46))
(assert (! (forall ((?v0 A_stream_a_stream_stream_fun$) (?v1 A_stream_set$) (?v2 A_stream_stream_bool_fun$)) (=> (exists ((?v3 A_stream_stream$)) (and (member$b ?v3 (image$f ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (exists ((?v3 A_stream$)) (and (member$ ?v3 ?v1) (fun_app$b ?v2 (fun_app$i ?v0 ?v3)))))) :named a47))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_fun$) (?v1 A_stream_stream_set$) (?v2 A_stream_stream_bool_fun$)) (=> (exists ((?v3 A_stream_stream$)) (and (member$b ?v3 (image$h ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (exists ((?v3 A_stream_stream$)) (and (member$b ?v3 ?v1) (fun_app$b ?v2 (fun_app$k ?v0 ?v3)))))) :named a48))
(assert (! (forall ((?v0 A_stream_stream_stream_a_fun$) (?v1 A_stream_stream_stream_set$) (?v2 A_bool_fun$)) (=> (exists ((?v3 A$)) (and (member$a ?v3 (image$j ?v0 ?v1)) (fun_app$m ?v2 ?v3))) (exists ((?v3 A_stream_stream_stream$)) (and (member$c ?v3 ?v1) (fun_app$m ?v2 (fun_app$n ?v0 ?v3)))))) :named a49))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 A_stream_set$) (?v2 A_stream_bool_fun$)) (=> (forall ((?v3 A_stream$)) (=> (member$ ?v3 (image$ ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A_stream$)) (=> (member$ ?v3 ?v1) (fun_app$c ?v2 (fun_app$ ?v0 ?v3)))))) :named a50))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_set$) (?v2 A_bool_fun$)) (=> (forall ((?v3 A$)) (=> (member$a ?v3 (image$a ?v0 ?v1)) (fun_app$m ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$a ?v3 ?v1) (fun_app$m ?v2 (fun_app$d ?v0 ?v3)))))) :named a51))
(assert (! (forall ((?v0 A_a_stream_fun$) (?v1 A_set$) (?v2 A_stream_bool_fun$)) (=> (forall ((?v3 A_stream$)) (=> (member$ ?v3 (image$c ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$a ?v3 ?v1) (fun_app$c ?v2 (fun_app$f ?v0 ?v3)))))) :named a52))
(assert (! (forall ((?v0 A_stream_a_fun$) (?v1 A_stream_set$) (?v2 A_bool_fun$)) (=> (forall ((?v3 A$)) (=> (member$a ?v3 (image$b ?v0 ?v1)) (fun_app$m ?v2 ?v3))) (forall ((?v3 A_stream$)) (=> (member$ ?v3 ?v1) (fun_app$m ?v2 (fun_app$e ?v0 ?v3)))))) :named a53))
(assert (! (forall ((?v0 A_stream_stream_a_fun$) (?v1 A_stream_stream_set$) (?v2 A_bool_fun$)) (=> (forall ((?v3 A$)) (=> (member$a ?v3 (image$e ?v0 ?v1)) (fun_app$m ?v2 ?v3))) (forall ((?v3 A_stream_stream$)) (=> (member$b ?v3 ?v1) (fun_app$m ?v2 (fun_app$h ?v0 ?v3)))))) :named a54))
(assert (! (forall ((?v0 A_a_stream_stream_fun$) (?v1 A_set$) (?v2 A_stream_stream_bool_fun$)) (=> (forall ((?v3 A_stream_stream$)) (=> (member$b ?v3 (image$d ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (forall ((?v3 A$)) (=> (member$a ?v3 ?v1) (fun_app$b ?v2 (fun_app$g ?v0 ?v3)))))) :named a55))
(assert (! (forall ((?v0 A_stream_stream_a_stream_fun$) (?v1 A_stream_stream_set$) (?v2 A_stream_bool_fun$)) (=> (forall ((?v3 A_stream$)) (=> (member$ ?v3 (image$g ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 A_stream_stream$)) (=> (member$b ?v3 ?v1) (fun_app$c ?v2 (fun_app$j ?v0 ?v3)))))) :named a56))
(assert (! (forall ((?v0 A_stream_a_stream_stream_fun$) (?v1 A_stream_set$) (?v2 A_stream_stream_bool_fun$)) (=> (forall ((?v3 A_stream_stream$)) (=> (member$b ?v3 (image$f ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (forall ((?v3 A_stream$)) (=> (member$ ?v3 ?v1) (fun_app$b ?v2 (fun_app$i ?v0 ?v3)))))) :named a57))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_fun$) (?v1 A_stream_stream_set$) (?v2 A_stream_stream_bool_fun$)) (=> (forall ((?v3 A_stream_stream$)) (=> (member$b ?v3 (image$h ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (forall ((?v3 A_stream_stream$)) (=> (member$b ?v3 ?v1) (fun_app$b ?v2 (fun_app$k ?v0 ?v3)))))) :named a58))
(assert (! (forall ((?v0 A_stream_stream_stream_a_fun$) (?v1 A_stream_stream_stream_set$) (?v2 A_bool_fun$)) (=> (forall ((?v3 A$)) (=> (member$a ?v3 (image$j ?v0 ?v1)) (fun_app$m ?v2 ?v3))) (forall ((?v3 A_stream_stream_stream$)) (=> (member$c ?v3 ?v1) (fun_app$m ?v2 (fun_app$n ?v0 ?v3)))))) :named a59))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_set$) (?v2 A_stream$) (?v3 A_stream_a_stream_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$ ?v3 ?v0))) (member$ ?v2 (image$ ?v3 ?v1)))) :named a60))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A$) (?v3 A_a_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$d ?v3 ?v0))) (member$a ?v2 (image$a ?v3 ?v1)))) :named a61))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_set$) (?v2 A$) (?v3 A_stream_a_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$e ?v3 ?v0))) (member$a ?v2 (image$b ?v3 ?v1)))) :named a62))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_stream$) (?v3 A_a_stream_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$f ?v3 ?v0))) (member$ ?v2 (image$c ?v3 ?v1)))) :named a63))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_stream_stream$) (?v3 A_a_stream_stream_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$g ?v3 ?v0))) (member$b ?v2 (image$d ?v3 ?v1)))) :named a64))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_set$) (?v2 A$) (?v3 A_stream_stream_a_fun$)) (=> (and (member$b ?v0 ?v1) (= ?v2 (fun_app$h ?v3 ?v0))) (member$a ?v2 (image$e ?v3 ?v1)))) :named a65))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_set$) (?v2 A_stream_stream$) (?v3 A_stream_a_stream_stream_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$i ?v3 ?v0))) (member$b ?v2 (image$f ?v3 ?v1)))) :named a66))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_set$) (?v2 A_stream$) (?v3 A_stream_stream_a_stream_fun$)) (=> (and (member$b ?v0 ?v1) (= ?v2 (fun_app$j ?v3 ?v0))) (member$ ?v2 (image$g ?v3 ?v1)))) :named a67))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_set$) (?v2 A_stream_stream$) (?v3 A_stream_stream_a_stream_stream_fun$)) (=> (and (member$b ?v0 ?v1) (= ?v2 (fun_app$k ?v3 ?v0))) (member$b ?v2 (image$h ?v3 ?v1)))) :named a68))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_stream_stream_stream$) (?v3 A_a_stream_stream_stream_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$l ?v3 ?v0))) (member$c ?v2 (image$i ?v3 ?v1)))) :named a69))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_set$) (?v2 A_stream_a_stream_fun$)) (=> (member$ ?v0 ?v1) (member$ (fun_app$ ?v2 ?v0) (image$ ?v2 ?v1)))) :named a70))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_a_fun$)) (=> (member$a ?v0 ?v1) (member$a (fun_app$d ?v2 ?v0) (image$a ?v2 ?v1)))) :named a71))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_set$) (?v2 A_stream_a_fun$)) (=> (member$ ?v0 ?v1) (member$a (fun_app$e ?v2 ?v0) (image$b ?v2 ?v1)))) :named a72))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_a_stream_fun$)) (=> (member$a ?v0 ?v1) (member$ (fun_app$f ?v2 ?v0) (image$c ?v2 ?v1)))) :named a73))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_a_stream_stream_fun$)) (=> (member$a ?v0 ?v1) (member$b (fun_app$g ?v2 ?v0) (image$d ?v2 ?v1)))) :named a74))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_set$) (?v2 A_stream_stream_a_fun$)) (=> (member$b ?v0 ?v1) (member$a (fun_app$h ?v2 ?v0) (image$e ?v2 ?v1)))) :named a75))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_set$) (?v2 A_stream_a_stream_stream_fun$)) (=> (member$ ?v0 ?v1) (member$b (fun_app$i ?v2 ?v0) (image$f ?v2 ?v1)))) :named a76))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_set$) (?v2 A_stream_stream_a_stream_fun$)) (=> (member$b ?v0 ?v1) (member$ (fun_app$j ?v2 ?v0) (image$g ?v2 ?v1)))) :named a77))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_set$) (?v2 A_stream_stream_a_stream_stream_fun$)) (=> (member$b ?v0 ?v1) (member$b (fun_app$k ?v2 ?v0) (image$h ?v2 ?v1)))) :named a78))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_a_stream_stream_stream_fun$)) (=> (member$a ?v0 ?v1) (member$c (fun_app$l ?v2 ?v0) (image$i ?v2 ?v1)))) :named a79))
(assert (! (forall ((?v0 A_stream_stream_bool_fun$) (?v1 A_stream_stream_stream$)) (= (fun_app$a (streamsp$ ?v0) ?v1) (exists ((?v2 A_stream_stream$) (?v3 A_stream_stream_stream$)) (and (= ?v1 (sCons$b ?v2 ?v3)) (and (fun_app$b ?v0 ?v2) (fun_app$a (streamsp$ ?v0) ?v3)))))) :named a80))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream_stream$)) (= (fun_app$b (streamsp$a ?v0) ?v1) (exists ((?v2 A_stream$) (?v3 A_stream_stream$)) (and (= ?v1 (sCons$a ?v2 ?v3)) (and (fun_app$c ?v0 ?v2) (fun_app$b (streamsp$a ?v0) ?v3)))))) :named a81))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (= (fun_app$c (streamsp$b ?v0) ?v1) (exists ((?v2 A$) (?v3 A_stream$)) (and (= ?v1 (sCons$ ?v2 ?v3)) (and (fun_app$m ?v0 ?v2) (fun_app$c (streamsp$b ?v0) ?v3)))))) :named a82))
(assert (! (forall ((?v0 A_stream_stream_bool_fun$) (?v1 A_stream_stream_stream$)) (=> (and (fun_app$a (streamsp$ ?v0) ?v1) (forall ((?v2 A_stream_stream$) (?v3 A_stream_stream_stream$)) (=> (and (= ?v1 (sCons$b ?v2 ?v3)) (and (fun_app$b ?v0 ?v2) (fun_app$a (streamsp$ ?v0) ?v3))) false))) false)) :named a83))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream_stream$)) (=> (and (fun_app$b (streamsp$a ?v0) ?v1) (forall ((?v2 A_stream$) (?v3 A_stream_stream$)) (=> (and (= ?v1 (sCons$a ?v2 ?v3)) (and (fun_app$c ?v0 ?v2) (fun_app$b (streamsp$a ?v0) ?v3))) false))) false)) :named a84))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_stream$)) (=> (and (fun_app$c (streamsp$b ?v0) ?v1) (forall ((?v2 A$) (?v3 A_stream$)) (=> (and (= ?v1 (sCons$ ?v2 ?v3)) (and (fun_app$m ?v0 ?v2) (fun_app$c (streamsp$b ?v0) ?v3))) false))) false)) :named a85))
(assert (! (forall ((?v0 A_stream_stream_stream_bool_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream_bool_fun$)) (=> (and (fun_app$a ?v0 ?v1) (forall ((?v3 A_stream_stream_stream$)) (=> (fun_app$a ?v0 ?v3) (exists ((?v4 A_stream_stream$) (?v5 A_stream_stream_stream$)) (and (= ?v3 (sCons$b ?v4 ?v5)) (and (fun_app$b ?v2 ?v4) (or (fun_app$a ?v0 ?v5) (fun_app$a (streamsp$ ?v2) ?v5)))))))) (fun_app$a (streamsp$ ?v2) ?v1))) :named a86))
(assert (! (forall ((?v0 A_stream_stream_bool_fun$) (?v1 A_stream_stream$) (?v2 A_stream_bool_fun$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v3 A_stream_stream$)) (=> (fun_app$b ?v0 ?v3) (exists ((?v4 A_stream$) (?v5 A_stream_stream$)) (and (= ?v3 (sCons$a ?v4 ?v5)) (and (fun_app$c ?v2 ?v4) (or (fun_app$b ?v0 ?v5) (fun_app$b (streamsp$a ?v2) ?v5)))))))) (fun_app$b (streamsp$a ?v2) ?v1))) :named a87))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$) (?v2 A_bool_fun$)) (=> (and (fun_app$c ?v0 ?v1) (forall ((?v3 A_stream$)) (=> (fun_app$c ?v0 ?v3) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v3 (sCons$ ?v4 ?v5)) (and (fun_app$m ?v2 ?v4) (or (fun_app$c ?v0 ?v5) (fun_app$c (streamsp$b ?v2) ?v5)))))))) (fun_app$c (streamsp$b ?v2) ?v1))) :named a88))
(assert (! (forall ((?v0 A_stream_stream_stream$) (?v1 A_stream_stream_stream_stream$)) (! (= (fun_app$o (smember$c ?v0) ?v1) (member$c ?v0 (sset$ ?v1))) :pattern ((fun_app$o (smember$c ?v0) ?v1)))) :named a89))
(assert (! (forall ((?v0 A_stream_stream$) (?v1 A_stream_stream_stream$)) (! (= (fun_app$a (smember$ ?v0) ?v1) (member$b ?v0 (sset$a ?v1))) :pattern ((fun_app$a (smember$ ?v0) ?v1)))) :named a90))
(assert (! (forall ((?v0 A$) (?v1 A_stream$)) (! (= (fun_app$c (smember$b ?v0) ?v1) (member$a ?v0 (sset$b ?v1))) :pattern ((fun_app$c (smember$b ?v0) ?v1)))) :named a91))
(assert (! (forall ((?v0 A_stream$) (?v1 A_stream_stream$)) (! (= (fun_app$b (smember$a ?v0) ?v1) (member$ ?v0 (sset$c ?v1))) :pattern ((fun_app$b (smember$a ?v0) ?v1)))) :named a92))
(assert (! (forall ((?v0 A_stream_stream_stream_stream_bool_fun$) (?v1 A_stream_stream_stream_stream$) (?v2 A_stream_stream_stream_set$)) (=> (and (fun_app$o ?v0 ?v1) (forall ((?v3 A_stream_stream_stream_stream$)) (=> (fun_app$o ?v0 ?v3) (exists ((?v4 A_stream_stream_stream$) (?v5 A_stream_stream_stream_stream$)) (and (= ?v3 (sCons$c ?v4 ?v5)) (and (member$c ?v4 ?v2) (or (fun_app$o ?v0 ?v5) (member$d ?v5 (streams$ ?v2))))))))) (member$d ?v1 (streams$ ?v2)))) :named a93))
(assert (! (forall ((?v0 A_stream_stream_stream_bool_fun$) (?v1 A_stream_stream_stream$) (?v2 A_stream_stream_set$)) (=> (and (fun_app$a ?v0 ?v1) (forall ((?v3 A_stream_stream_stream$)) (=> (fun_app$a ?v0 ?v3) (exists ((?v4 A_stream_stream$) (?v5 A_stream_stream_stream$)) (and (= ?v3 (sCons$b ?v4 ?v5)) (and (member$b ?v4 ?v2) (or (fun_app$a ?v0 ?v5) (member$c ?v5 (streams$a ?v2))))))))) (member$c ?v1 (streams$a ?v2)))) :named a94))
(assert (! (forall ((?v0 A_stream_stream_bool_fun$) (?v1 A_stream_stream$) (?v2 A_stream_set$)) (=> (and (fun_app$b ?v0 ?v1) (forall ((?v3 A_stream_stream$)) (=> (fun_app$b ?v0 ?v3) (exists ((?v4 A_stream$) (?v5 A_stream_stream$)) (and (= ?v3 (sCons$a ?v4 ?v5)) (and (member$ ?v4 ?v2) (or (fun_app$b ?v0 ?v5) (member$b ?v5 (streams$b ?v2))))))))) (member$b ?v1 (streams$b ?v2)))) :named a95))
(assert (! (forall ((?v0 A_stream_bool_fun$) (?v1 A_stream$) (?v2 A_set$)) (=> (and (fun_app$c ?v0 ?v1) (forall ((?v3 A_stream$)) (=> (fun_app$c ?v0 ?v3) (exists ((?v4 A$) (?v5 A_stream$)) (and (= ?v3 (sCons$ ?v4 ?v5)) (and (member$a ?v4 ?v2) (or (fun_app$c ?v0 ?v5) (member$ ?v5 (streams$c ?v2))))))))) (member$ ?v1 (streams$c ?v2)))) :named a96))
(check-sat)
;(get-unsat-core)
