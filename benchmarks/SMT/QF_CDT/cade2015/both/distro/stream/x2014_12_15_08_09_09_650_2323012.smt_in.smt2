; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 358
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort Nat_set$ 0)
(declare-sort A_nat_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-datatypes () ((Num$ (one$) (bit0$ (select$ Num$)) (bit1$ (selecta$ Num$)))))
(declare-codatatypes () ((Nat_stream$ (sCons$a (shd$a Nat$) (stl$a Nat_stream$)))))
(declare-fun n$ () Nat$)
(declare-fun x$ () A$)
(declare-fun s1$ () A_stream$)
(declare-fun s2$ () A_stream$)
(declare-fun sup$ (A_set$ A_set$) A_set$)
(declare-fun top$ () Nat_set$)
(declare-fun snth$ (A_stream$) Nat_a_fun$)
(declare-fun sset$ (A_stream$) A_set$)
(declare-fun sup$a (Nat_set$ Nat_set$) Nat_set$)
(declare-fun top$a () A_set$)
(declare-fun image$ (Nat_a_fun$ Nat_set$) A_set$)
(declare-fun snth$a (Nat_stream$) Nat_nat_fun$)
(declare-fun sset$a (Nat_stream$) Nat_set$)
(declare-fun times$ (Nat$) Nat_nat_fun$)
(declare-fun image$a (A_nat_fun$ A_set$) Nat_set$)
(declare-fun image$b (Nat_nat_fun$ Nat_set$) Nat_set$)
(declare-fun image$c (A_a_fun$ A_set$) A_set$)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (Nat_a_fun$ Nat$) A$)
(declare-fun member$a (Nat$ Nat_set$) Bool)
(declare-fun numeral$ (Num$) Nat$)
(declare-fun fun_app$a (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$b (A_nat_fun$ A$) Nat$)
(declare-fun fun_app$c (A_a_fun$ A$) A$)
(declare-fun sinterleave$ (A_stream$ A_stream$) A_stream$)
(assert (! (not (member$ x$ (image$ (snth$ (sinterleave$ s1$ s2$)) top$))) :named a0))
(assert (! (= x$ (fun_app$ (snth$ s1$) n$)) :named a1))
(assert (! (=> (forall ((?v0 Nat$)) (=> (= x$ (fun_app$ (snth$ s1$) ?v0)) false)) false) :named a2))
(assert (! (member$ x$ (sset$ s1$)) :named a3))
(assert (! (= (fun_app$ (snth$ (sinterleave$ s1$ s2$)) (fun_app$a (times$ (numeral$ (bit0$ one$))) n$)) x$) :named a4))
(assert (! (member$ x$ (sup$ (sset$ s1$) (sset$ s2$))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 A_nat_fun$) (?v2 A$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$b ?v1 ?v2)) (member$ ?v2 ?v3)) (member$a ?v0 (image$a ?v1 ?v3)))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$) (?v3 Nat_set$)) (=> (and (= ?v0 (fun_app$a ?v1 ?v2)) (member$a ?v2 ?v3)) (member$a ?v0 (image$b ?v1 ?v3)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 Nat_a_fun$) (?v2 Nat$) (?v3 Nat_set$)) (=> (and (= ?v0 (fun_app$ ?v1 ?v2)) (member$a ?v2 ?v3)) (member$ ?v0 (image$ ?v1 ?v3)))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (image$c ?v1 ?v3)))) :named a9))
(assert (! (forall ((?v0 A$)) (= (member$ ?v0 top$a) true)) :named a10))
(assert (! (forall ((?v0 Nat$)) (= (member$a ?v0 top$) true)) :named a11))
(assert (! (forall ((?v0 A$)) (member$ ?v0 top$a)) :named a12))
(assert (! (forall ((?v0 Nat$)) (member$a ?v0 top$)) :named a13))
(assert (! (forall ((?v0 A_nat_fun$)) (= (= (image$a ?v0 top$a) top$) (forall ((?v1 Nat$)) (exists ((?v2 A$)) (= ?v1 (fun_app$b ?v0 ?v2)))))) :named a14))
(assert (! (forall ((?v0 A_a_fun$)) (= (= (image$c ?v0 top$a) top$a) (forall ((?v1 A$)) (exists ((?v2 A$)) (= ?v1 (fun_app$c ?v0 ?v2)))))) :named a15))
(assert (! (forall ((?v0 Nat_a_fun$)) (= (= (image$ ?v0 top$) top$a) (forall ((?v1 A$)) (exists ((?v2 Nat$)) (= ?v1 (fun_app$ ?v0 ?v2)))))) :named a16))
(assert (! (forall ((?v0 Nat_nat_fun$)) (= (= (image$b ?v0 top$) top$) (forall ((?v1 Nat$)) (exists ((?v2 Nat$)) (= ?v1 (fun_app$a ?v0 ?v2)))))) :named a17))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 Nat_a_fun$)) (=> (forall ((?v2 Nat$)) (= (fun_app$b ?v0 (fun_app$ ?v1 ?v2)) ?v2)) (= (image$a ?v0 top$a) top$))) :named a18))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$)) (=> (forall ((?v2 A$)) (= (fun_app$c ?v0 (fun_app$c ?v1 ?v2)) ?v2)) (= (image$c ?v0 top$a) top$a))) :named a19))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 A_nat_fun$)) (=> (forall ((?v2 A$)) (= (fun_app$ ?v0 (fun_app$b ?v1 ?v2)) ?v2)) (= (image$ ?v0 top$) top$a))) :named a20))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_nat_fun$)) (=> (forall ((?v2 Nat$)) (= (fun_app$a ?v0 (fun_app$a ?v1 ?v2)) ?v2)) (= (image$b ?v0 top$) top$))) :named a21))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 Nat$)) (=> (and (= (image$a ?v0 top$a) top$) (forall ((?v2 A$)) (=> (= ?v1 (fun_app$b ?v0 ?v2)) false))) false)) :named a22))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (=> (and (= (image$c ?v0 top$a) top$a) (forall ((?v2 A$)) (=> (= ?v1 (fun_app$c ?v0 ?v2)) false))) false)) :named a23))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 A$)) (=> (and (= (image$ ?v0 top$) top$a) (forall ((?v2 Nat$)) (=> (= ?v1 (fun_app$ ?v0 ?v2)) false))) false)) :named a24))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$)) (=> (and (= (image$b ?v0 top$) top$) (forall ((?v2 Nat$)) (=> (= ?v1 (fun_app$a ?v0 ?v2)) false))) false)) :named a25))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 Nat$)) (=> (= (image$a ?v0 top$a) top$) (exists ((?v2 A$)) (= ?v1 (fun_app$b ?v0 ?v2))))) :named a26))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (=> (= (image$c ?v0 top$a) top$a) (exists ((?v2 A$)) (= ?v1 (fun_app$c ?v0 ?v2))))) :named a27))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 A$)) (=> (= (image$ ?v0 top$) top$a) (exists ((?v2 Nat$)) (= ?v1 (fun_app$ ?v0 ?v2))))) :named a28))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$)) (=> (= (image$b ?v0 top$) top$) (exists ((?v2 Nat$)) (= ?v1 (fun_app$a ?v0 ?v2))))) :named a29))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (=> (= ?v0 (fun_app$a ?v1 ?v2)) (member$a ?v0 (image$b ?v1 top$)))) :named a30))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A$)) (=> (= ?v0 (fun_app$c ?v1 ?v2)) (member$ ?v0 (image$c ?v1 top$a)))) :named a31))
(assert (! (forall ((?v0 Nat$) (?v1 A_nat_fun$) (?v2 A$)) (=> (= ?v0 (fun_app$b ?v1 ?v2)) (member$a ?v0 (image$a ?v1 top$a)))) :named a32))
(assert (! (forall ((?v0 A$) (?v1 Nat_a_fun$) (?v2 Nat$)) (=> (= ?v0 (fun_app$ ?v1 ?v2)) (member$ ?v0 (image$ ?v1 top$)))) :named a33))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$)) (member$a (fun_app$a ?v0 ?v1) (image$b ?v0 top$))) :named a34))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$)) (member$ (fun_app$c ?v0 ?v1) (image$c ?v0 top$a))) :named a35))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A$)) (member$a (fun_app$b ?v0 ?v1) (image$a ?v0 top$a))) :named a36))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat$)) (member$ (fun_app$ ?v0 ?v1) (image$ ?v0 top$))) :named a37))
(assert (! (forall ((?v0 Nat_stream$)) (! (= (sset$a ?v0) (image$b (snth$a ?v0) top$)) :pattern ((sset$a ?v0)))) :named a38))
(assert (! (forall ((?v0 A_stream$)) (! (= (sset$ ?v0) (image$ (snth$ ?v0) top$)) :pattern ((sset$ ?v0)))) :named a39))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_set$) (?v2 Nat_set$)) (= (member$a ?v0 (sup$a ?v1 ?v2)) (or (member$a ?v0 ?v1) (member$a ?v0 ?v2)))) :named a40))
(assert (! (forall ((?v0 A$) (?v1 A_set$) (?v2 A_set$)) (= (member$ ?v0 (sup$ ?v1 ?v2)) (or (member$ ?v0 ?v1) (member$ ?v0 ?v2)))) :named a41))
(check-sat)
;(get-unsat-core)
