; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 225
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-fun s$ () A_stream$)
(declare-fun na$ () Nat$)
(declare-fun ua$ () A_list$)
(declare-fun min$ (Nat$ Nat$) Nat$)
(declare-fun suc$ (Nat$) Nat$)
(declare-fun size$ (A_list$) Nat$)
(declare-fun take$ (Nat$ A_list$) A_list$)
(declare-fun minus$ (Nat$ Nat$) Nat$)
(declare-fun shift$ (A_list$ A_stream$) A_stream$)
(declare-fun stake$ (Nat$ A_stream$) A_list$)
(declare-fun append$ (A_list$ A_list$) A_list$)
(assert (! (not (= (stake$ (suc$ na$) (shift$ ua$ s$)) (append$ (take$ (min$ (size$ ua$) (suc$ na$)) ua$) (stake$ (minus$ (suc$ na$) (size$ ua$)) s$)))) :named a0))
(assert (! (forall ((?v0 A_list$) (?v1 A_stream$) (?v2 A_stream$)) (= (= (shift$ ?v0 ?v1) (shift$ ?v0 ?v2)) (= ?v1 ?v2))) :named a1))
(assert (! (forall ((?v0 A_list$)) (= (stake$ na$ (shift$ ?v0 s$)) (append$ (take$ (min$ (size$ ?v0) na$) ?v0) (stake$ (minus$ na$ (size$ ?v0)) s$)))) :named a2))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_stream$)) (= (shift$ (append$ ?v0 ?v1) ?v2) (shift$ ?v0 (shift$ ?v1 ?v2)))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (= (size$ (stake$ ?v0 ?v1)) ?v0)) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_stream$)) (= (take$ ?v0 (stake$ ?v1 ?v2)) (stake$ (min$ ?v0 ?v1) ?v2))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 A_list$) (?v2 A_stream$)) (= (stake$ ?v0 (shift$ ?v1 ?v2)) (append$ (take$ ?v0 ?v1) (stake$ (minus$ ?v0 (size$ ?v1)) ?v2)))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 A_list$) (?v2 A_list$)) (= (take$ ?v0 (append$ ?v1 ?v2)) (append$ (take$ ?v0 ?v1) (take$ (minus$ ?v0 (size$ ?v1)) ?v2)))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 A_list$)) (= (size$ (take$ ?v0 ?v1)) (min$ (size$ ?v1) ?v0))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 A_list$)) (= (take$ ?v0 (take$ ?v1 ?v2)) (take$ (min$ ?v0 ?v1) ?v2))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (min$ (suc$ ?v0) (suc$ ?v1)) (suc$ (min$ ?v0 ?v1)))) :named a10))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (=> (or (= (size$ ?v0) (size$ ?v1)) (= (size$ ?v2) (size$ ?v3))) (= (= (append$ ?v0 ?v2) (append$ ?v1 ?v3)) (and (= ?v0 ?v1) (= ?v2 ?v3))))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$) (?v2 Nat$)) (= (minus$ (minus$ (suc$ ?v0) ?v1) (suc$ ?v2)) (minus$ (minus$ ?v0 ?v1) ?v2))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (minus$ (suc$ ?v0) (suc$ ?v1)) (minus$ ?v0 ?v1)) :pattern ((minus$ (suc$ ?v0) (suc$ ?v1))))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (min$ (min$ ?v0 ?v1) ?v1) (min$ ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (= (min$ ?v0 (min$ ?v0 ?v1)) (min$ ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 Nat$)) (= (min$ ?v0 ?v0) ?v0)) :named a16))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (append$ ?v0 ?v1) (append$ ?v0 ?v2)) (= ?v1 ?v2))) :named a17))
(check-sat)
;(get-unsat-core)
