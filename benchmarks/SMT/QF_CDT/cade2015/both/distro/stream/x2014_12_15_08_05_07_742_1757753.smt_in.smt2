; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 236
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort A_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun s1$ () A_stream$)
(declare-fun s2$ () A_stream$)
(declare-fun xs$ () A_list$)
(declare-fun map$ (A_a_fun$ A_list$) A_list$)
(declare-fun set$ (A_list$) A_set$)
(declare-fun sup$ (A_set$ A_set$) A_set$)
(declare-fun smap$ (A_a_fun$ A_stream$) A_stream$)
(declare-fun sset$ (A_stream$) A_set$)
(declare-fun shift$ (A_list$ A_stream$) A_stream$)
(declare-fun append$ (A_list$ A_list$) A_list$)
(declare-fun fun_app$ (A_a_fun$ A$) A$)
(assert (! (not (= (= (shift$ xs$ s1$) (shift$ xs$ s2$)) (= s1$ s2$))) :named a0))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_stream$)) (= (shift$ (append$ ?v0 ?v1) ?v2) (shift$ ?v0 (shift$ ?v1 ?v2)))) :named a1))
(assert (! (forall ((?v0 A_stream$)) (! (= (shift$ nil$ ?v0) ?v0) :pattern ((shift$ nil$ ?v0)))) :named a2))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_list$) (?v2 A_stream$)) (= (smap$ ?v0 (shift$ ?v1 ?v2)) (shift$ (map$ ?v0 ?v1) (smap$ ?v0 ?v2)))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A_stream$)) (! (= (shift$ (cons$ ?v0 ?v1) ?v2) (sCons$ ?v0 (shift$ ?v1 ?v2))) :pattern ((shift$ (cons$ ?v0 ?v1) ?v2)))) :named a4))
(assert (! (forall ((?v0 A_list$) (?v1 A_stream$)) (= (shd$ (shift$ ?v0 ?v1)) (ite (= ?v0 nil$) (shd$ ?v1) (hd$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_list$) (?v1 A_stream$)) (= (stl$ (shift$ ?v0 ?v1)) (ite (= ?v0 nil$) (stl$ ?v1) (shift$ (tl$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 A_list$) (?v1 A_stream$)) (= (sset$ (shift$ ?v0 ?v1)) (sup$ (set$ ?v0) (sset$ ?v1)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a8))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (stl$ (smap$ ?v0 ?v1)) (smap$ ?v0 (stl$ ?v1)))) :named a9))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (shd$ (smap$ ?v0 ?v1)) (fun_app$ ?v0 (shd$ ?v1)))) :named a10))
(assert (! (forall ((?v0 A_stream$)) (= (sCons$ (shd$ ?v0) (stl$ ?v0)) ?v0)) :named a11))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (smap$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= (fun_app$ ?v0 (shd$ ?v1)) ?v2) (= (smap$ ?v0 (stl$ ?v1)) ?v3)))) :named a12))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_stream$)) (! (= (smap$ ?v0 (sCons$ ?v1 ?v2)) (sCons$ (fun_app$ ?v0 ?v1) (smap$ ?v0 ?v2))) :pattern ((smap$ ?v0 (sCons$ ?v1 ?v2))))) :named a13))
(check-sat)
;(get-unsat-core)
