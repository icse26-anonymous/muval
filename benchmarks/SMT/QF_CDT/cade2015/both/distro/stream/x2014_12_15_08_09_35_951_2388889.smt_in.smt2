; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 93
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort A_c_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort C_a_fun$ 0)
(declare-sort C_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort A_a_a_fun_fun$ 0)
(declare-sort A_a_b_fun_fun$ 0)
(declare-sort A_a_c_fun_fun$ 0)
(declare-sort A_b_a_fun_fun$ 0)
(declare-sort A_b_b_fun_fun$ 0)
(declare-sort A_b_c_fun_fun$ 0)
(declare-sort A_c_a_fun_fun$ 0)
(declare-sort A_c_b_fun_fun$ 0)
(declare-sort A_c_c_fun_fun$ 0)
(declare-sort B_a_a_fun_fun$ 0)
(declare-sort B_a_b_fun_fun$ 0)
(declare-sort B_a_c_fun_fun$ 0)
(declare-sort B_b_a_fun_fun$ 0)
(declare-sort B_b_b_fun_fun$ 0)
(declare-sort B_b_c_fun_fun$ 0)
(declare-sort B_c_a_fun_fun$ 0)
(declare-sort B_c_b_fun_fun$ 0)
(declare-sort B_c_c_fun_fun$ 0)
(declare-sort C_a_a_fun_fun$ 0)
(declare-sort C_b_a_fun_fun$ 0)
(declare-sort C_b_b_fun_fun$ 0)
(declare-sort C_c_a_fun_fun$ 0)
(declare-sort B_c_prod_a_fun$ 0)
(declare-sort A_list_a_list_fun$ 0)
(declare-sort A_list_b_list_fun$ 0)
(declare-sort A_list_c_list_fun$ 0)
(declare-sort B_list_a_list_fun$ 0)
(declare-sort B_list_b_list_fun$ 0)
(declare-sort B_c_prod_list_a_list_fun$ 0)
(declare-sort A_a_fun_a_list_a_list_fun_fun$ 0)
(declare-sort A_b_fun_a_list_b_list_fun_fun$ 0)
(declare-sort A_c_fun_a_list_c_list_fun_fun$ 0)
(declare-sort B_a_fun_b_list_a_list_fun_fun$ 0)
(declare-sort B_b_fun_b_list_b_list_fun_fun$ 0)
(declare-sort B_c_a_fun_fun_b_c_prod_a_fun_fun$ 0)
(declare-sort B_c_prod_a_fun_b_c_prod_list_a_list_fun_fun$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))
  (B_stream$ (sCons$a (shd$a B$) (stl$a B_stream$)))
  (C_stream$ (sCons$b (shd$b C$) (stl$b C_stream$)))))
(declare-datatypes () ((B_c_prod$ (pair$ (fst$ B$) (snd$ C$)))
  (B_c_prod_list$ (nil$a) (cons$a (hd$a B_c_prod$) (tl$a B_c_prod_list$)))
  (B_list$ (nil$b) (cons$b (hd$b B$) (tl$b B_list$)))
  (C_list$ (nil$c) (cons$c (hd$c C$) (tl$c C_list$)))
  (A_a_prod$ (pair$a (fst$a A$) (snd$a A$)))
  (A_a_prod_list$ (nil$d) (cons$d (hd$d A_a_prod$) (tl$d A_a_prod_list$)))))
(declare-codatatypes () ((A_a_prod_stream$ (sCons$c (shd$c A_a_prod$) (stl$c A_a_prod_stream$)))))
(declare-datatypes () ((A_b_prod$ (pair$b (fst$b A$) (snd$b B$)))
  (A_b_prod_list$ (nil$e) (cons$e (hd$e A_b_prod$) (tl$e A_b_prod_list$)))))
(declare-codatatypes () ((A_b_prod_stream$ (sCons$d (shd$d A_b_prod$) (stl$d A_b_prod_stream$)))))
(declare-datatypes () ((A_c_prod$ (pair$c (fst$c A$) (snd$c C$)))
  (A_c_prod_list$ (nil$f) (cons$f (hd$f A_c_prod$) (tl$f A_c_prod_list$)))))
(declare-codatatypes () ((A_c_prod_stream$ (sCons$e (shd$e A_c_prod$) (stl$e A_c_prod_stream$)))))
(declare-datatypes () ((B_a_prod$ (pair$d (fst$d B$) (snd$d A$)))
  (B_a_prod_list$ (nil$g) (cons$g (hd$g B_a_prod$) (tl$g B_a_prod_list$)))))
(declare-codatatypes () ((B_a_prod_stream$ (sCons$f (shd$f B_a_prod$) (stl$f B_a_prod_stream$)))))
(declare-datatypes () ((B_b_prod$ (pair$e (fst$e B$) (snd$e B$)))
  (B_b_prod_list$ (nil$h) (cons$h (hd$h B_b_prod$) (tl$h B_b_prod_list$)))))
(declare-codatatypes () ((B_b_prod_stream$ (sCons$g (shd$g B_b_prod$) (stl$g B_b_prod_stream$)))
  (B_c_prod_stream$ (sCons$h (shd$h B_c_prod$) (stl$h B_c_prod_stream$)))))
(declare-datatypes () ((C_a_prod$ (pair$f (fst$f C$) (snd$f A$)))
  (C_a_prod_list$ (nil$i) (cons$i (hd$i C_a_prod$) (tl$i C_a_prod_list$)))))
(declare-codatatypes () ((C_a_prod_stream$ (sCons$i (shd$i C_a_prod$) (stl$i C_a_prod_stream$)))))
(declare-datatypes () ((C_b_prod$ (pair$g (fst$g C$) (snd$g B$)))
  (C_b_prod_list$ (nil$j) (cons$j (hd$j C_b_prod$) (tl$j C_b_prod_list$)))))
(declare-codatatypes () ((C_b_prod_stream$ (sCons$j (shd$j C_b_prod$) (stl$j C_b_prod_stream$)))))
(declare-datatypes () ((C_c_prod$ (pair$h (fst$h C$) (snd$h C$)))
  (C_c_prod_list$ (nil$k) (cons$k (hd$k C_c_prod$) (tl$k C_c_prod_list$)))))
(declare-codatatypes () ((C_c_prod_stream$ (sCons$k (shd$k C_c_prod$) (stl$k C_c_prod_stream$)))))
(declare-datatypes () ((A_b_b_prod_prod$ (pair$i (fst$i A$) (snd$i B_b_prod$)))
  (A_b_b_prod_prod_list$ (nil$l) (cons$l (hd$l A_b_b_prod_prod$) (tl$l A_b_b_prod_prod_list$)))))
(declare-codatatypes () ((A_b_b_prod_prod_stream$ (sCons$l (shd$l A_b_b_prod_prod$) (stl$l A_b_b_prod_prod_stream$)))))
(declare-fun f$ () B_c_a_fun_fun$)
(declare-fun n$ () Nat$)
(declare-fun s1$ () B_stream$)
(declare-fun s2$ () C_stream$)
(declare-fun map$ () B_c_prod_a_fun_b_c_prod_list_a_list_fun_fun$)
(declare-fun zip$ (B_list$ C_list$) B_c_prod_list$)
(declare-fun map$a () A_a_fun_a_list_a_list_fun_fun$)
(declare-fun map$b () B_a_fun_b_list_a_list_fun_fun$)
(declare-fun map$c (C_a_fun$ C_list$) A_list$)
(declare-fun map$d () A_b_fun_a_list_b_list_fun_fun$)
(declare-fun map$e () B_b_fun_b_list_b_list_fun_fun$)
(declare-fun map$f (C_b_fun$ C_list$) B_list$)
(declare-fun map$g () A_c_fun_a_list_c_list_fun_fun$)
(declare-fun map$h (B_c_fun$ B_list$) C_list$)
(declare-fun map$i (C_c_fun$ C_list$) C_list$)
(declare-fun size$ (B_c_prod_list$) Nat$)
(declare-fun smap$ (A_a_fun$ A_stream$) A_stream$)
(declare-fun snth$ (A_stream$ Nat$) A$)
(declare-fun szip$ (A_stream$ A_stream$) A_a_prod_stream$)
(declare-fun zip$a (A_list$ A_list$) A_a_prod_list$)
(declare-fun zip$b (A_list$ B_list$) A_b_prod_list$)
(declare-fun zip$c (A_list$ C_list$) A_c_prod_list$)
(declare-fun zip$d (B_list$ A_list$) B_a_prod_list$)
(declare-fun zip$e (B_list$ B_list$) B_b_prod_list$)
(declare-fun zip$f (C_list$ A_list$) C_a_prod_list$)
(declare-fun zip$g (C_list$ B_list$) C_b_prod_list$)
(declare-fun zip$h (C_list$ C_list$) C_c_prod_list$)
(declare-fun zip$i (A_list$ B_b_prod_list$) A_b_b_prod_prod_list$)
(declare-fun size$a (B_b_prod_list$) Nat$)
(declare-fun size$b (B_a_prod_list$) Nat$)
(declare-fun size$c (A_c_prod_list$) Nat$)
(declare-fun size$d (A_b_prod_list$) Nat$)
(declare-fun size$e (A_a_prod_list$) Nat$)
(declare-fun size$f (A_list$) Nat$)
(declare-fun size$g (B_list$) Nat$)
(declare-fun size$h (C_list$) Nat$)
(declare-fun smap$a (B_a_fun$ B_stream$) A_stream$)
(declare-fun smap$b (C_a_fun$ C_stream$) A_stream$)
(declare-fun smap$c (A_b_fun$ A_stream$) B_stream$)
(declare-fun smap$d (B_b_fun$ B_stream$) B_stream$)
(declare-fun smap$e (C_b_fun$ C_stream$) B_stream$)
(declare-fun smap$f (A_c_fun$ A_stream$) C_stream$)
(declare-fun smap$g (B_c_fun$ B_stream$) C_stream$)
(declare-fun smap$h (C_c_fun$ C_stream$) C_stream$)
(declare-fun smap$i (B_c_prod_a_fun$ B_c_prod_stream$) A_stream$)
(declare-fun smap2$ (B_c_a_fun_fun$ B_stream$ C_stream$) A_stream$)
(declare-fun snth$a (B_stream$ Nat$) B$)
(declare-fun snth$b (C_stream$ Nat$) C$)
(declare-fun stake$ (Nat$ A_stream$) A_list$)
(declare-fun szip$a (A_stream$ B_stream$) A_b_prod_stream$)
(declare-fun szip$b (A_stream$ C_stream$) A_c_prod_stream$)
(declare-fun szip$c (B_stream$ A_stream$) B_a_prod_stream$)
(declare-fun szip$d (B_stream$ B_stream$) B_b_prod_stream$)
(declare-fun szip$e (B_stream$ C_stream$) B_c_prod_stream$)
(declare-fun szip$f (C_stream$ A_stream$) C_a_prod_stream$)
(declare-fun szip$g (C_stream$ B_stream$) C_b_prod_stream$)
(declare-fun szip$h (C_stream$ C_stream$) C_c_prod_stream$)
(declare-fun szip$i (A_stream$ B_b_prod_stream$) A_b_b_prod_prod_stream$)
(declare-fun smap2$a (A_a_a_fun_fun$ A_stream$ A_stream$) A_stream$)
(declare-fun smap2$b (A_b_a_fun_fun$ A_stream$ B_stream$) A_stream$)
(declare-fun smap2$c (A_c_a_fun_fun$ A_stream$ C_stream$) A_stream$)
(declare-fun smap2$d (B_a_a_fun_fun$ B_stream$ A_stream$) A_stream$)
(declare-fun smap2$e (B_b_a_fun_fun$ B_stream$ B_stream$) A_stream$)
(declare-fun smap2$f (C_a_a_fun_fun$ C_stream$ A_stream$) A_stream$)
(declare-fun smap2$g (C_b_a_fun_fun$ C_stream$ B_stream$) A_stream$)
(declare-fun smap2$h (C_c_a_fun_fun$ C_stream$ C_stream$) A_stream$)
(declare-fun smap2$i (A_a_b_fun_fun$ A_stream$ A_stream$) B_stream$)
(declare-fun smap2$j (A_a_c_fun_fun$ A_stream$ A_stream$) C_stream$)
(declare-fun smap2$k (A_b_b_fun_fun$ A_stream$ B_stream$) B_stream$)
(declare-fun smap2$l (A_b_c_fun_fun$ A_stream$ B_stream$) C_stream$)
(declare-fun smap2$m (A_c_b_fun_fun$ A_stream$ C_stream$) B_stream$)
(declare-fun smap2$n (A_c_c_fun_fun$ A_stream$ C_stream$) C_stream$)
(declare-fun smap2$o (B_b_b_fun_fun$ B_stream$ B_stream$) B_stream$)
(declare-fun smap2$p (B_b_c_fun_fun$ B_stream$ B_stream$) C_stream$)
(declare-fun smap2$q (B_c_b_fun_fun$ B_stream$ C_stream$) B_stream$)
(declare-fun smap2$r (B_c_c_fun_fun$ B_stream$ C_stream$) C_stream$)
(declare-fun smap2$s (B_a_b_fun_fun$ B_stream$ A_stream$) B_stream$)
(declare-fun smap2$t (B_a_c_fun_fun$ B_stream$ A_stream$) C_stream$)
(declare-fun smap2$u (C_b_b_fun_fun$ C_stream$ B_stream$) B_stream$)
(declare-fun stake$a (Nat$ B_stream$) B_list$)
(declare-fun stake$b (Nat$ C_stream$) C_list$)
(declare-fun stake$c (Nat$ A_a_prod_stream$) A_a_prod_list$)
(declare-fun stake$d (Nat$ A_b_prod_stream$) A_b_prod_list$)
(declare-fun stake$e (Nat$ A_c_prod_stream$) A_c_prod_list$)
(declare-fun stake$f (Nat$ B_a_prod_stream$) B_a_prod_list$)
(declare-fun stake$g (Nat$ B_b_prod_stream$) B_b_prod_list$)
(declare-fun stake$h (Nat$ B_c_prod_stream$) B_c_prod_list$)
(declare-fun stake$i (Nat$ C_a_prod_stream$) C_a_prod_list$)
(declare-fun stake$j (Nat$ C_b_prod_stream$) C_b_prod_list$)
(declare-fun stake$k (Nat$ C_c_prod_stream$) C_c_prod_list$)
(declare-fun stake$l (Nat$ A_b_b_prod_prod_stream$) A_b_b_prod_prod_list$)
(declare-fun fun_app$ (B_c_prod_list_a_list_fun$ B_c_prod_list$) A_list$)
(declare-fun fun_app$a (B_c_prod_a_fun_b_c_prod_list_a_list_fun_fun$ B_c_prod_a_fun$) B_c_prod_list_a_list_fun$)
(declare-fun fun_app$b (B_c_a_fun_fun_b_c_prod_a_fun_fun$ B_c_a_fun_fun$) B_c_prod_a_fun$)
(declare-fun fun_app$c (B_c_prod_a_fun$ B_c_prod$) A$)
(declare-fun fun_app$d (A_list_a_list_fun$ A_list$) A_list$)
(declare-fun fun_app$e (A_a_fun_a_list_a_list_fun_fun$ A_a_fun$) A_list_a_list_fun$)
(declare-fun fun_app$f (B_list_a_list_fun$ B_list$) A_list$)
(declare-fun fun_app$g (B_a_fun_b_list_a_list_fun_fun$ B_a_fun$) B_list_a_list_fun$)
(declare-fun fun_app$h (A_list_b_list_fun$ A_list$) B_list$)
(declare-fun fun_app$i (A_b_fun_a_list_b_list_fun_fun$ A_b_fun$) A_list_b_list_fun$)
(declare-fun fun_app$j (B_list_b_list_fun$ B_list$) B_list$)
(declare-fun fun_app$k (B_b_fun_b_list_b_list_fun_fun$ B_b_fun$) B_list_b_list_fun$)
(declare-fun fun_app$l (A_list_c_list_fun$ A_list$) C_list$)
(declare-fun fun_app$m (A_c_fun_a_list_c_list_fun_fun$ A_c_fun$) A_list_c_list_fun$)
(declare-fun fun_app$n (C_a_fun$ C$) A$)
(declare-fun fun_app$o (B_c_a_fun_fun$ B$) C_a_fun$)
(declare-fun fun_app$p (A_a_fun$ A$) A$)
(declare-fun fun_app$q (A_a_a_fun_fun$ A$) A_a_fun$)
(declare-fun fun_app$r (B_a_fun$ B$) A$)
(declare-fun fun_app$s (A_b_a_fun_fun$ A$) B_a_fun$)
(declare-fun fun_app$t (A_c_a_fun_fun$ A$) C_a_fun$)
(declare-fun fun_app$u (B_a_a_fun_fun$ B$) A_a_fun$)
(declare-fun fun_app$v (B_b_a_fun_fun$ B$) B_a_fun$)
(declare-fun fun_app$w (C_a_a_fun_fun$ C$) A_a_fun$)
(declare-fun fun_app$x (C_b_a_fun_fun$ C$) B_a_fun$)
(declare-fun fun_app$y (C_c_a_fun_fun$ C$) C_a_fun$)
(declare-fun fun_app$z (A_b_fun$ A$) B$)
(declare-fun case_prod$ () B_c_a_fun_fun_b_c_prod_a_fun_fun$)
(declare-fun fun_app$aa (A_a_b_fun_fun$ A$) A_b_fun$)
(declare-fun fun_app$ab (A_c_fun$ A$) C$)
(declare-fun fun_app$ac (A_a_c_fun_fun$ A$) A_c_fun$)
(declare-fun fun_app$ad (B_b_fun$ B$) B$)
(declare-fun fun_app$ae (A_b_b_fun_fun$ A$) B_b_fun$)
(declare-fun fun_app$af (B_c_fun$ B$) C$)
(declare-fun fun_app$ag (A_b_c_fun_fun$ A$) B_c_fun$)
(declare-fun fun_app$ah (C_b_fun$ C$) B$)
(declare-fun fun_app$ai (A_c_b_fun_fun$ A$) C_b_fun$)
(declare-fun fun_app$aj (C_c_fun$ C$) C$)
(declare-fun fun_app$ak (A_c_c_fun_fun$ A$) C_c_fun$)
(declare-fun fun_app$al (B_b_b_fun_fun$ B$) B_b_fun$)
(declare-fun fun_app$am (B_b_c_fun_fun$ B$) B_c_fun$)
(declare-fun fun_app$an (B_c_b_fun_fun$ B$) C_b_fun$)
(declare-fun fun_app$ao (B_c_c_fun_fun$ B$) C_c_fun$)
(declare-fun fun_app$ap (B_a_b_fun_fun$ B$) A_b_fun$)
(declare-fun fun_app$aq (B_a_c_fun_fun$ B$) A_c_fun$)
(declare-fun fun_app$ar (C_b_b_fun_fun$ C$) B_b_fun$)
(declare-fun map_tailrec$ () B_b_fun_b_list_b_list_fun_fun$)
(declare-fun map_tailrec$a () B_a_fun_b_list_a_list_fun_fun$)
(declare-fun map_tailrec$b () A_c_fun_a_list_c_list_fun_fun$)
(declare-fun map_tailrec$c () A_b_fun_a_list_b_list_fun_fun$)
(declare-fun map_tailrec$d () A_a_fun_a_list_a_list_fun_fun$)
(declare-fun map_tailrec$e () B_c_prod_a_fun_b_c_prod_list_a_list_fun_fun$)
(declare-fun internal_split$ () B_c_a_fun_fun_b_c_prod_a_fun_fun$)
(assert (! (not (= (stake$ n$ (smap2$ f$ s1$ s2$)) (fun_app$ (fun_app$a map$ (fun_app$b case_prod$ f$)) (zip$ (stake$a n$ s1$) (stake$b n$ s2$))))) :named a0))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$) (?v2 A_stream$)) (= (stake$c ?v0 (szip$ ?v1 ?v2)) (zip$a (stake$ ?v0 ?v1) (stake$ ?v0 ?v2)))) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$) (?v2 B_stream$)) (= (stake$d ?v0 (szip$a ?v1 ?v2)) (zip$b (stake$ ?v0 ?v1) (stake$a ?v0 ?v2)))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$) (?v2 C_stream$)) (= (stake$e ?v0 (szip$b ?v1 ?v2)) (zip$c (stake$ ?v0 ?v1) (stake$b ?v0 ?v2)))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 B_stream$) (?v2 A_stream$)) (= (stake$f ?v0 (szip$c ?v1 ?v2)) (zip$d (stake$a ?v0 ?v1) (stake$ ?v0 ?v2)))) :named a4))
(assert (! (forall ((?v0 Nat$) (?v1 B_stream$) (?v2 B_stream$)) (= (stake$g ?v0 (szip$d ?v1 ?v2)) (zip$e (stake$a ?v0 ?v1) (stake$a ?v0 ?v2)))) :named a5))
(assert (! (forall ((?v0 Nat$) (?v1 B_stream$) (?v2 C_stream$)) (= (stake$h ?v0 (szip$e ?v1 ?v2)) (zip$ (stake$a ?v0 ?v1) (stake$b ?v0 ?v2)))) :named a6))
(assert (! (forall ((?v0 Nat$) (?v1 C_stream$) (?v2 A_stream$)) (= (stake$i ?v0 (szip$f ?v1 ?v2)) (zip$f (stake$b ?v0 ?v1) (stake$ ?v0 ?v2)))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 C_stream$) (?v2 B_stream$)) (= (stake$j ?v0 (szip$g ?v1 ?v2)) (zip$g (stake$b ?v0 ?v1) (stake$a ?v0 ?v2)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 C_stream$) (?v2 C_stream$)) (= (stake$k ?v0 (szip$h ?v1 ?v2)) (zip$h (stake$b ?v0 ?v1) (stake$b ?v0 ?v2)))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$) (?v2 B_b_prod_stream$)) (= (stake$l ?v0 (szip$i ?v1 ?v2)) (zip$i (stake$ ?v0 ?v1) (stake$g ?v0 ?v2)))) :named a10))
(assert (! (forall ((?v0 B_c_prod$) (?v1 B_c_prod$) (?v2 B_c_a_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$c (fun_app$b case_prod$ ?v2) ?v0) (fun_app$c (fun_app$b case_prod$ ?v2) ?v1)))) :named a11))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (stake$ ?v0 (smap$ ?v1 ?v2)) (fun_app$d (fun_app$e map$a ?v1) (stake$ ?v0 ?v2)))) :named a12))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_fun$) (?v2 B_stream$)) (= (stake$ ?v0 (smap$a ?v1 ?v2)) (fun_app$f (fun_app$g map$b ?v1) (stake$a ?v0 ?v2)))) :named a13))
(assert (! (forall ((?v0 Nat$) (?v1 C_a_fun$) (?v2 C_stream$)) (= (stake$ ?v0 (smap$b ?v1 ?v2)) (map$c ?v1 (stake$b ?v0 ?v2)))) :named a14))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_fun$) (?v2 A_stream$)) (= (stake$a ?v0 (smap$c ?v1 ?v2)) (fun_app$h (fun_app$i map$d ?v1) (stake$ ?v0 ?v2)))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_fun$) (?v2 B_stream$)) (= (stake$a ?v0 (smap$d ?v1 ?v2)) (fun_app$j (fun_app$k map$e ?v1) (stake$a ?v0 ?v2)))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 C_b_fun$) (?v2 C_stream$)) (= (stake$a ?v0 (smap$e ?v1 ?v2)) (map$f ?v1 (stake$b ?v0 ?v2)))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 A_c_fun$) (?v2 A_stream$)) (= (stake$b ?v0 (smap$f ?v1 ?v2)) (fun_app$l (fun_app$m map$g ?v1) (stake$ ?v0 ?v2)))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 B_c_fun$) (?v2 B_stream$)) (= (stake$b ?v0 (smap$g ?v1 ?v2)) (map$h ?v1 (stake$a ?v0 ?v2)))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 C_c_fun$) (?v2 C_stream$)) (= (stake$b ?v0 (smap$h ?v1 ?v2)) (map$i ?v1 (stake$b ?v0 ?v2)))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 B_c_prod_a_fun$) (?v2 B_c_prod_stream$)) (= (stake$ ?v0 (smap$i ?v1 ?v2)) (fun_app$ (fun_app$a map$ ?v1) (stake$h ?v0 ?v2)))) :named a21))
(assert (! (forall ((?v0 B_c_a_fun_fun$) (?v1 B_stream$) (?v2 C_stream$) (?v3 Nat$)) (= (snth$ (smap2$ ?v0 ?v1 ?v2) ?v3) (fun_app$n (fun_app$o ?v0 (snth$a ?v1 ?v3)) (snth$b ?v2 ?v3)))) :named a22))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_stream$) (?v2 A_stream$) (?v3 Nat$)) (= (snth$ (smap2$a ?v0 ?v1 ?v2) ?v3) (fun_app$p (fun_app$q ?v0 (snth$ ?v1 ?v3)) (snth$ ?v2 ?v3)))) :named a23))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 A_stream$) (?v2 B_stream$) (?v3 Nat$)) (= (snth$ (smap2$b ?v0 ?v1 ?v2) ?v3) (fun_app$r (fun_app$s ?v0 (snth$ ?v1 ?v3)) (snth$a ?v2 ?v3)))) :named a24))
(assert (! (forall ((?v0 A_c_a_fun_fun$) (?v1 A_stream$) (?v2 C_stream$) (?v3 Nat$)) (= (snth$ (smap2$c ?v0 ?v1 ?v2) ?v3) (fun_app$n (fun_app$t ?v0 (snth$ ?v1 ?v3)) (snth$b ?v2 ?v3)))) :named a25))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B_stream$) (?v2 A_stream$) (?v3 Nat$)) (= (snth$ (smap2$d ?v0 ?v1 ?v2) ?v3) (fun_app$p (fun_app$u ?v0 (snth$a ?v1 ?v3)) (snth$ ?v2 ?v3)))) :named a26))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B_stream$) (?v2 B_stream$) (?v3 Nat$)) (= (snth$ (smap2$e ?v0 ?v1 ?v2) ?v3) (fun_app$r (fun_app$v ?v0 (snth$a ?v1 ?v3)) (snth$a ?v2 ?v3)))) :named a27))
(assert (! (forall ((?v0 C_a_a_fun_fun$) (?v1 C_stream$) (?v2 A_stream$) (?v3 Nat$)) (= (snth$ (smap2$f ?v0 ?v1 ?v2) ?v3) (fun_app$p (fun_app$w ?v0 (snth$b ?v1 ?v3)) (snth$ ?v2 ?v3)))) :named a28))
(assert (! (forall ((?v0 C_b_a_fun_fun$) (?v1 C_stream$) (?v2 B_stream$) (?v3 Nat$)) (= (snth$ (smap2$g ?v0 ?v1 ?v2) ?v3) (fun_app$r (fun_app$x ?v0 (snth$b ?v1 ?v3)) (snth$a ?v2 ?v3)))) :named a29))
(assert (! (forall ((?v0 C_c_a_fun_fun$) (?v1 C_stream$) (?v2 C_stream$) (?v3 Nat$)) (= (snth$ (smap2$h ?v0 ?v1 ?v2) ?v3) (fun_app$n (fun_app$y ?v0 (snth$b ?v1 ?v3)) (snth$b ?v2 ?v3)))) :named a30))
(assert (! (forall ((?v0 A_a_b_fun_fun$) (?v1 A_stream$) (?v2 A_stream$) (?v3 Nat$)) (= (snth$a (smap2$i ?v0 ?v1 ?v2) ?v3) (fun_app$z (fun_app$aa ?v0 (snth$ ?v1 ?v3)) (snth$ ?v2 ?v3)))) :named a31))
(assert (! (forall ((?v0 B_c_a_fun_fun$) (?v1 B_stream$) (?v2 C_stream$) (?v3 A_stream$)) (= (= (smap2$ ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$n (fun_app$o ?v0 (snth$a ?v1 ?v4)) (snth$b ?v2 ?v4)) (snth$ ?v3 ?v4))))) :named a32))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_stream$) (?v2 A_stream$) (?v3 A_stream$)) (= (= (smap2$a ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$p (fun_app$q ?v0 (snth$ ?v1 ?v4)) (snth$ ?v2 ?v4)) (snth$ ?v3 ?v4))))) :named a33))
(assert (! (forall ((?v0 A_a_b_fun_fun$) (?v1 A_stream$) (?v2 A_stream$) (?v3 B_stream$)) (= (= (smap2$i ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$z (fun_app$aa ?v0 (snth$ ?v1 ?v4)) (snth$ ?v2 ?v4)) (snth$a ?v3 ?v4))))) :named a34))
(assert (! (forall ((?v0 A_a_c_fun_fun$) (?v1 A_stream$) (?v2 A_stream$) (?v3 C_stream$)) (= (= (smap2$j ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$ab (fun_app$ac ?v0 (snth$ ?v1 ?v4)) (snth$ ?v2 ?v4)) (snth$b ?v3 ?v4))))) :named a35))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 A_stream$) (?v2 B_stream$) (?v3 A_stream$)) (= (= (smap2$b ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$r (fun_app$s ?v0 (snth$ ?v1 ?v4)) (snth$a ?v2 ?v4)) (snth$ ?v3 ?v4))))) :named a36))
(assert (! (forall ((?v0 A_b_b_fun_fun$) (?v1 A_stream$) (?v2 B_stream$) (?v3 B_stream$)) (= (= (smap2$k ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$ad (fun_app$ae ?v0 (snth$ ?v1 ?v4)) (snth$a ?v2 ?v4)) (snth$a ?v3 ?v4))))) :named a37))
(assert (! (forall ((?v0 A_b_c_fun_fun$) (?v1 A_stream$) (?v2 B_stream$) (?v3 C_stream$)) (= (= (smap2$l ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$af (fun_app$ag ?v0 (snth$ ?v1 ?v4)) (snth$a ?v2 ?v4)) (snth$b ?v3 ?v4))))) :named a38))
(assert (! (forall ((?v0 A_c_a_fun_fun$) (?v1 A_stream$) (?v2 C_stream$) (?v3 A_stream$)) (= (= (smap2$c ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$n (fun_app$t ?v0 (snth$ ?v1 ?v4)) (snth$b ?v2 ?v4)) (snth$ ?v3 ?v4))))) :named a39))
(assert (! (forall ((?v0 A_c_b_fun_fun$) (?v1 A_stream$) (?v2 C_stream$) (?v3 B_stream$)) (= (= (smap2$m ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$ah (fun_app$ai ?v0 (snth$ ?v1 ?v4)) (snth$b ?v2 ?v4)) (snth$a ?v3 ?v4))))) :named a40))
(assert (! (forall ((?v0 A_c_c_fun_fun$) (?v1 A_stream$) (?v2 C_stream$) (?v3 C_stream$)) (= (= (smap2$n ?v0 ?v1 ?v2) ?v3) (forall ((?v4 Nat$)) (= (fun_app$aj (fun_app$ak ?v0 (snth$ ?v1 ?v4)) (snth$b ?v2 ?v4)) (snth$b ?v3 ?v4))))) :named a41))
(assert (! (= map$e map_tailrec$) :named a42))
(assert (! (= map$b map_tailrec$a) :named a43))
(assert (! (= map$g map_tailrec$b) :named a44))
(assert (! (= map$d map_tailrec$c) :named a45))
(assert (! (= map$a map_tailrec$d) :named a46))
(assert (! (= map$ map_tailrec$e) :named a47))
(assert (! (= internal_split$ case_prod$) :named a48))
(assert (! (forall ((?v0 Nat$) (?v1 B_c_prod_stream$)) (= (size$ (stake$h ?v0 ?v1)) ?v0)) :named a49))
(assert (! (forall ((?v0 Nat$) (?v1 B_b_prod_stream$)) (= (size$a (stake$g ?v0 ?v1)) ?v0)) :named a50))
(assert (! (forall ((?v0 Nat$) (?v1 B_a_prod_stream$)) (= (size$b (stake$f ?v0 ?v1)) ?v0)) :named a51))
(assert (! (forall ((?v0 Nat$) (?v1 A_c_prod_stream$)) (= (size$c (stake$e ?v0 ?v1)) ?v0)) :named a52))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_stream$)) (= (size$d (stake$d ?v0 ?v1)) ?v0)) :named a53))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_prod_stream$)) (= (size$e (stake$c ?v0 ?v1)) ?v0)) :named a54))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (= (size$f (stake$ ?v0 ?v1)) ?v0)) :named a55))
(assert (! (forall ((?v0 Nat$) (?v1 B_stream$)) (= (size$g (stake$a ?v0 ?v1)) ?v0)) :named a56))
(assert (! (forall ((?v0 Nat$) (?v1 C_stream$)) (= (size$h (stake$b ?v0 ?v1)) ?v0)) :named a57))
(assert (! (forall ((?v0 B_c_a_fun_fun$) (?v1 B_stream$) (?v2 C_stream$)) (= (shd$ (smap2$ ?v0 ?v1 ?v2)) (fun_app$n (fun_app$o ?v0 (shd$a ?v1)) (shd$b ?v2)))) :named a58))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (shd$ (smap2$a ?v0 ?v1 ?v2)) (fun_app$p (fun_app$q ?v0 (shd$ ?v1)) (shd$ ?v2)))) :named a59))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 A_stream$) (?v2 B_stream$)) (= (shd$ (smap2$b ?v0 ?v1 ?v2)) (fun_app$r (fun_app$s ?v0 (shd$ ?v1)) (shd$a ?v2)))) :named a60))
(assert (! (forall ((?v0 A_c_a_fun_fun$) (?v1 A_stream$) (?v2 C_stream$)) (= (shd$ (smap2$c ?v0 ?v1 ?v2)) (fun_app$n (fun_app$t ?v0 (shd$ ?v1)) (shd$b ?v2)))) :named a61))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B_stream$) (?v2 A_stream$)) (= (shd$ (smap2$d ?v0 ?v1 ?v2)) (fun_app$p (fun_app$u ?v0 (shd$a ?v1)) (shd$ ?v2)))) :named a62))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B_stream$) (?v2 B_stream$)) (= (shd$ (smap2$e ?v0 ?v1 ?v2)) (fun_app$r (fun_app$v ?v0 (shd$a ?v1)) (shd$a ?v2)))) :named a63))
(assert (! (forall ((?v0 C_a_a_fun_fun$) (?v1 C_stream$) (?v2 A_stream$)) (= (shd$ (smap2$f ?v0 ?v1 ?v2)) (fun_app$p (fun_app$w ?v0 (shd$b ?v1)) (shd$ ?v2)))) :named a64))
(assert (! (forall ((?v0 C_b_a_fun_fun$) (?v1 C_stream$) (?v2 B_stream$)) (= (shd$ (smap2$g ?v0 ?v1 ?v2)) (fun_app$r (fun_app$x ?v0 (shd$b ?v1)) (shd$a ?v2)))) :named a65))
(assert (! (forall ((?v0 C_c_a_fun_fun$) (?v1 C_stream$) (?v2 C_stream$)) (= (shd$ (smap2$h ?v0 ?v1 ?v2)) (fun_app$n (fun_app$y ?v0 (shd$b ?v1)) (shd$b ?v2)))) :named a66))
(assert (! (forall ((?v0 A_a_b_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (shd$a (smap2$i ?v0 ?v1 ?v2)) (fun_app$z (fun_app$aa ?v0 (shd$ ?v1)) (shd$ ?v2)))) :named a67))
(assert (! (forall ((?v0 B_c_a_fun_fun$) (?v1 B$) (?v2 B_stream$) (?v3 C$) (?v4 C_stream$)) (! (= (smap2$ ?v0 (sCons$a ?v1 ?v2) (sCons$b ?v3 ?v4)) (sCons$ (fun_app$n (fun_app$o ?v0 ?v1) ?v3) (smap2$ ?v0 ?v2 ?v4))) :pattern ((smap2$ ?v0 (sCons$a ?v1 ?v2) (sCons$b ?v3 ?v4))))) :named a68))
(assert (! (forall ((?v0 B_b_b_fun_fun$) (?v1 B$) (?v2 B_stream$) (?v3 B$) (?v4 B_stream$)) (! (= (smap2$o ?v0 (sCons$a ?v1 ?v2) (sCons$a ?v3 ?v4)) (sCons$a (fun_app$ad (fun_app$al ?v0 ?v1) ?v3) (smap2$o ?v0 ?v2 ?v4))) :pattern ((smap2$o ?v0 (sCons$a ?v1 ?v2) (sCons$a ?v3 ?v4))))) :named a69))
(assert (! (forall ((?v0 B_b_c_fun_fun$) (?v1 B$) (?v2 B_stream$) (?v3 B$) (?v4 B_stream$)) (! (= (smap2$p ?v0 (sCons$a ?v1 ?v2) (sCons$a ?v3 ?v4)) (sCons$b (fun_app$af (fun_app$am ?v0 ?v1) ?v3) (smap2$p ?v0 ?v2 ?v4))) :pattern ((smap2$p ?v0 (sCons$a ?v1 ?v2) (sCons$a ?v3 ?v4))))) :named a70))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B$) (?v2 B_stream$) (?v3 B$) (?v4 B_stream$)) (! (= (smap2$e ?v0 (sCons$a ?v1 ?v2) (sCons$a ?v3 ?v4)) (sCons$ (fun_app$r (fun_app$v ?v0 ?v1) ?v3) (smap2$e ?v0 ?v2 ?v4))) :pattern ((smap2$e ?v0 (sCons$a ?v1 ?v2) (sCons$a ?v3 ?v4))))) :named a71))
(assert (! (forall ((?v0 B_c_b_fun_fun$) (?v1 B$) (?v2 B_stream$) (?v3 C$) (?v4 C_stream$)) (! (= (smap2$q ?v0 (sCons$a ?v1 ?v2) (sCons$b ?v3 ?v4)) (sCons$a (fun_app$ah (fun_app$an ?v0 ?v1) ?v3) (smap2$q ?v0 ?v2 ?v4))) :pattern ((smap2$q ?v0 (sCons$a ?v1 ?v2) (sCons$b ?v3 ?v4))))) :named a72))
(assert (! (forall ((?v0 B_c_c_fun_fun$) (?v1 B$) (?v2 B_stream$) (?v3 C$) (?v4 C_stream$)) (! (= (smap2$r ?v0 (sCons$a ?v1 ?v2) (sCons$b ?v3 ?v4)) (sCons$b (fun_app$aj (fun_app$ao ?v0 ?v1) ?v3) (smap2$r ?v0 ?v2 ?v4))) :pattern ((smap2$r ?v0 (sCons$a ?v1 ?v2) (sCons$b ?v3 ?v4))))) :named a73))
(assert (! (forall ((?v0 B_a_b_fun_fun$) (?v1 B$) (?v2 B_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (smap2$s ?v0 (sCons$a ?v1 ?v2) (sCons$ ?v3 ?v4)) (sCons$a (fun_app$z (fun_app$ap ?v0 ?v1) ?v3) (smap2$s ?v0 ?v2 ?v4))) :pattern ((smap2$s ?v0 (sCons$a ?v1 ?v2) (sCons$ ?v3 ?v4))))) :named a74))
(assert (! (forall ((?v0 B_a_c_fun_fun$) (?v1 B$) (?v2 B_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (smap2$t ?v0 (sCons$a ?v1 ?v2) (sCons$ ?v3 ?v4)) (sCons$b (fun_app$ab (fun_app$aq ?v0 ?v1) ?v3) (smap2$t ?v0 ?v2 ?v4))) :pattern ((smap2$t ?v0 (sCons$a ?v1 ?v2) (sCons$ ?v3 ?v4))))) :named a75))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B$) (?v2 B_stream$) (?v3 A$) (?v4 A_stream$)) (! (= (smap2$d ?v0 (sCons$a ?v1 ?v2) (sCons$ ?v3 ?v4)) (sCons$ (fun_app$p (fun_app$u ?v0 ?v1) ?v3) (smap2$d ?v0 ?v2 ?v4))) :pattern ((smap2$d ?v0 (sCons$a ?v1 ?v2) (sCons$ ?v3 ?v4))))) :named a76))
(assert (! (forall ((?v0 C_b_b_fun_fun$) (?v1 C$) (?v2 C_stream$) (?v3 B$) (?v4 B_stream$)) (! (= (smap2$u ?v0 (sCons$b ?v1 ?v2) (sCons$a ?v3 ?v4)) (sCons$a (fun_app$ad (fun_app$ar ?v0 ?v1) ?v3) (smap2$u ?v0 ?v2 ?v4))) :pattern ((smap2$u ?v0 (sCons$b ?v1 ?v2) (sCons$a ?v3 ?v4))))) :named a77))
(assert (! (forall ((?v0 B_c_a_fun_fun$) (?v1 B_stream$) (?v2 C_stream$)) (= (stl$ (smap2$ ?v0 ?v1 ?v2)) (smap2$ ?v0 (stl$a ?v1) (stl$b ?v2)))) :named a78))
(assert (! (forall ((?v0 A_a_a_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (stl$ (smap2$a ?v0 ?v1 ?v2)) (smap2$a ?v0 (stl$ ?v1) (stl$ ?v2)))) :named a79))
(assert (! (forall ((?v0 A_b_a_fun_fun$) (?v1 A_stream$) (?v2 B_stream$)) (= (stl$ (smap2$b ?v0 ?v1 ?v2)) (smap2$b ?v0 (stl$ ?v1) (stl$a ?v2)))) :named a80))
(assert (! (forall ((?v0 A_c_a_fun_fun$) (?v1 A_stream$) (?v2 C_stream$)) (= (stl$ (smap2$c ?v0 ?v1 ?v2)) (smap2$c ?v0 (stl$ ?v1) (stl$b ?v2)))) :named a81))
(assert (! (forall ((?v0 B_a_a_fun_fun$) (?v1 B_stream$) (?v2 A_stream$)) (= (stl$ (smap2$d ?v0 ?v1 ?v2)) (smap2$d ?v0 (stl$a ?v1) (stl$ ?v2)))) :named a82))
(assert (! (forall ((?v0 B_b_a_fun_fun$) (?v1 B_stream$) (?v2 B_stream$)) (= (stl$ (smap2$e ?v0 ?v1 ?v2)) (smap2$e ?v0 (stl$a ?v1) (stl$a ?v2)))) :named a83))
(assert (! (forall ((?v0 C_a_a_fun_fun$) (?v1 C_stream$) (?v2 A_stream$)) (= (stl$ (smap2$f ?v0 ?v1 ?v2)) (smap2$f ?v0 (stl$b ?v1) (stl$ ?v2)))) :named a84))
(assert (! (forall ((?v0 C_b_a_fun_fun$) (?v1 C_stream$) (?v2 B_stream$)) (= (stl$ (smap2$g ?v0 ?v1 ?v2)) (smap2$g ?v0 (stl$b ?v1) (stl$a ?v2)))) :named a85))
(assert (! (forall ((?v0 C_c_a_fun_fun$) (?v1 C_stream$) (?v2 C_stream$)) (= (stl$ (smap2$h ?v0 ?v1 ?v2)) (smap2$h ?v0 (stl$b ?v1) (stl$b ?v2)))) :named a86))
(assert (! (forall ((?v0 A_a_b_fun_fun$) (?v1 A_stream$) (?v2 A_stream$)) (= (stl$a (smap2$i ?v0 ?v1 ?v2)) (smap2$i ?v0 (stl$ ?v1) (stl$ ?v2)))) :named a87))
(assert (! (forall ((?v0 B_c_a_fun_fun$) (?v1 B_stream$) (?v2 C_stream$)) (! (= (smap2$ ?v0 ?v1 ?v2) (smap$i (fun_app$b case_prod$ ?v0) (szip$e ?v1 ?v2))) :pattern ((smap2$ ?v0 ?v1 ?v2)))) :named a88))
(assert (! (forall ((?v0 B$) (?v1 B_stream$) (?v2 B$) (?v3 B_stream$)) (= (= (sCons$a ?v0 ?v1) (sCons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a89))
(assert (! (forall ((?v0 C$) (?v1 C_stream$) (?v2 C$) (?v3 C_stream$)) (= (= (sCons$b ?v0 ?v1) (sCons$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a90))
(assert (! (forall ((?v0 A$) (?v1 A_stream$) (?v2 A$) (?v3 A_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a91))
(assert (! (forall ((?v0 B_c_prod_a_fun$) (?v1 B_c_prod_list$)) (= (size$f (fun_app$ (fun_app$a map$ ?v0) ?v1)) (size$ ?v1))) :named a92))
(assert (! (forall ((?v0 C_c_fun$) (?v1 C_list$)) (= (size$h (map$i ?v0 ?v1)) (size$h ?v1))) :named a93))
(assert (! (forall ((?v0 B_c_fun$) (?v1 B_list$)) (= (size$h (map$h ?v0 ?v1)) (size$g ?v1))) :named a94))
(assert (! (forall ((?v0 A_c_fun$) (?v1 A_list$)) (= (size$h (fun_app$l (fun_app$m map$g ?v0) ?v1)) (size$f ?v1))) :named a95))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_list$)) (= (size$g (map$f ?v0 ?v1)) (size$h ?v1))) :named a96))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_list$)) (= (size$g (fun_app$j (fun_app$k map$e ?v0) ?v1)) (size$g ?v1))) :named a97))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_list$)) (= (size$g (fun_app$h (fun_app$i map$d ?v0) ?v1)) (size$f ?v1))) :named a98))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_list$)) (= (size$f (map$c ?v0 ?v1)) (size$h ?v1))) :named a99))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_list$)) (= (size$f (fun_app$f (fun_app$g map$b ?v0) ?v1)) (size$g ?v1))) :named a100))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_list$)) (= (size$f (fun_app$d (fun_app$e map$a ?v0) ?v1)) (size$f ?v1))) :named a101))
(assert (! (forall ((?v0 C_a_fun$) (?v1 C_stream$)) (= (stl$ (smap$b ?v0 ?v1)) (smap$b ?v0 (stl$b ?v1)))) :named a102))
(assert (! (forall ((?v0 C_b_fun$) (?v1 C_stream$)) (= (stl$a (smap$e ?v0 ?v1)) (smap$e ?v0 (stl$b ?v1)))) :named a103))
(assert (! (forall ((?v0 B_c_fun$) (?v1 B_stream$)) (= (stl$b (smap$g ?v0 ?v1)) (smap$g ?v0 (stl$a ?v1)))) :named a104))
(assert (! (forall ((?v0 C_c_fun$) (?v1 C_stream$)) (= (stl$b (smap$h ?v0 ?v1)) (smap$h ?v0 (stl$b ?v1)))) :named a105))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$)) (= (stl$a (smap$d ?v0 ?v1)) (smap$d ?v0 (stl$a ?v1)))) :named a106))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$)) (= (stl$ (smap$a ?v0 ?v1)) (smap$a ?v0 (stl$a ?v1)))) :named a107))
(assert (! (forall ((?v0 A_c_fun$) (?v1 A_stream$)) (= (stl$b (smap$f ?v0 ?v1)) (smap$f ?v0 (stl$ ?v1)))) :named a108))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_stream$)) (= (stl$a (smap$c ?v0 ?v1)) (smap$c ?v0 (stl$ ?v1)))) :named a109))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (stl$ (smap$ ?v0 ?v1)) (smap$ ?v0 (stl$ ?v1)))) :named a110))
(assert (! (forall ((?v0 B_c_fun$) (?v1 B_stream$)) (= (shd$b (smap$g ?v0 ?v1)) (fun_app$af ?v0 (shd$a ?v1)))) :named a111))
(assert (! (forall ((?v0 C_c_fun$) (?v1 C_stream$)) (= (shd$b (smap$h ?v0 ?v1)) (fun_app$aj ?v0 (shd$b ?v1)))) :named a112))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_stream$)) (= (shd$a (smap$d ?v0 ?v1)) (fun_app$ad ?v0 (shd$a ?v1)))) :named a113))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B_stream$)) (= (shd$ (smap$a ?v0 ?v1)) (fun_app$r ?v0 (shd$a ?v1)))) :named a114))
(assert (! (forall ((?v0 A_c_fun$) (?v1 A_stream$)) (= (shd$b (smap$f ?v0 ?v1)) (fun_app$ab ?v0 (shd$ ?v1)))) :named a115))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A_stream$)) (= (shd$a (smap$c ?v0 ?v1)) (fun_app$z ?v0 (shd$ ?v1)))) :named a116))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$)) (= (shd$ (smap$ ?v0 ?v1)) (fun_app$p ?v0 (shd$ ?v1)))) :named a117))
(check-sat)
;(get-unsat-core)
