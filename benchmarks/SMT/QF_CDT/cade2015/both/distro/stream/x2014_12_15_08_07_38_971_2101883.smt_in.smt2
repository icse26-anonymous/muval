; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 266
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_nat_fun$ 0)
(declare-sort Nat_a_fun$ 0)
(declare-sort Nat_nat_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort Nat_nat_fun_nat_nat_fun_fun$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-datatypes () ((Nat_list$ (nil$a) (cons$a (hd$a Nat$) (tl$a Nat_list$)))))
(declare-codatatypes () ((Nat_stream$ (sCons$a (shd$a Nat$) (stl$a Nat_stream$)))))
(declare-fun f$ () A_a_fun$)
(declare-fun n$ () Nat$)
(declare-fun x$ () A$)
(declare-fun uu$ () Nat_a_fun$)
(declare-fun map$ (Nat_a_fun$ Nat_list$) A_list$)
(declare-fun upt$ (Nat$ Nat$) Nat_list$)
(declare-fun uua$ () Nat_nat_fun$)
(declare-fun uub$ () A_a_fun$)
(declare-fun map$a (Nat_nat_fun$ Nat_list$) Nat_list$)
(declare-fun map$b (A_a_fun$ A_list$) A_list$)
(declare-fun map$c (A_nat_fun$ A_list$) Nat_list$)
(declare-fun smap$ (A_nat_fun$ A_stream$) Nat_stream$)
(declare-fun snth$ (Nat_stream$) Nat_nat_fun$)
(declare-fun zero$ () Nat$)
(declare-fun sdrop$ (Nat$ Nat_stream$) Nat_stream$)
(declare-fun smap$a (Nat_nat_fun$ Nat_stream$) Nat_stream$)
(declare-fun smap$b (Nat_a_fun$ Nat_stream$) A_stream$)
(declare-fun smap$c (A_a_fun$ A_stream$) A_stream$)
(declare-fun snth$a (A_stream$) Nat_a_fun$)
(declare-fun stake$ (Nat$ A_stream$) A_list$)
(declare-fun compow$ (Nat$) A_a_fun_a_a_fun_fun$)
(declare-fun sdrop$a (Nat$ A_stream$) A_stream$)
(declare-fun stake$a (Nat$ Nat_stream$) Nat_list$)
(declare-fun compow$a (Nat$) Nat_nat_fun_nat_nat_fun_fun$)
(declare-fun fun_app$ (Nat_a_fun$ Nat$) A$)
(declare-fun fun_app$a (A_a_fun$ A$) A$)
(declare-fun fun_app$b (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$c (Nat_nat_fun$ Nat$) Nat$)
(declare-fun fun_app$d (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun$) Nat_nat_fun$)
(declare-fun fun_app$e (A_nat_fun$ A$) Nat$)
(declare-fun siterate$ (A_a_fun$ A$) A_stream$)
(declare-fun siterate$a (Nat_nat_fun$ Nat$) Nat_stream$)
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$ uu$ ?v0) (fun_app$a (fun_app$b (compow$ ?v0) f$) x$)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Nat$)) (! (= (fun_app$c uua$ ?v0) ?v0) :pattern ((fun_app$c uua$ ?v0)))) :named a1))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$a uub$ ?v0) ?v0) :pattern ((fun_app$a uub$ ?v0)))) :named a2))
(assert (! (not (= (stake$ n$ (siterate$ f$ x$)) (map$ uu$ (upt$ zero$ n$)))) :named a3))
(assert (! (forall ((?v0 Nat_list$)) (= (map$a uua$ ?v0) ?v0)) :named a4))
(assert (! (forall ((?v0 A_list$)) (= (map$b uub$ ?v0) ?v0)) :named a5))
(assert (! (forall ((?v0 Nat_list$)) (= (map$a uua$ ?v0) ?v0)) :named a6))
(assert (! (forall ((?v0 A_list$)) (= (map$b uub$ ?v0) ?v0)) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat$)) (= (sdrop$ ?v0 (siterate$a ?v1 ?v2)) (siterate$a ?v1 (fun_app$c (fun_app$d (compow$a ?v0) ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A$)) (= (sdrop$a ?v0 (siterate$ ?v1 ?v2)) (siterate$ ?v1 (fun_app$a (fun_app$b (compow$ ?v0) ?v1) ?v2)))) :named a9))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat$) (?v2 Nat$)) (= (fun_app$c (snth$ (siterate$a ?v0 ?v1)) ?v2) (fun_app$c (fun_app$d (compow$a ?v2) ?v0) ?v1))) :named a10))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 Nat$)) (= (fun_app$ (snth$a (siterate$ ?v0 ?v1)) ?v2) (fun_app$a (fun_app$b (compow$ ?v2) ?v0) ?v1))) :named a11))
(assert (! (forall ((?v0 A_a_fun$) (?v1 Nat$) (?v2 A$)) (= (fun_app$a ?v0 (fun_app$a (fun_app$b (compow$ ?v1) ?v0) ?v2)) (fun_app$a (fun_app$b (compow$ ?v1) ?v0) (fun_app$a ?v0 ?v2)))) :named a12))
(assert (! (= zero$ zero$) :named a13))
(assert (! (forall ((?v0 Nat$)) (=> (and (=> (= ?v0 zero$) false) (=> (not (= ?v0 zero$)) false)) false)) :named a14))
(assert (! (forall ((?v0 Nat$)) (= (= zero$ ?v0) (= ?v0 zero$))) :named a15))
(assert (! (forall ((?v0 Nat$) (?v1 A_nat_fun$) (?v2 A_stream$)) (= (stake$a ?v0 (smap$ ?v1 ?v2)) (map$c ?v1 (stake$ ?v0 ?v2)))) :named a16))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat_stream$)) (= (stake$a ?v0 (smap$a ?v1 ?v2)) (map$a ?v1 (stake$a ?v0 ?v2)))) :named a17))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_a_fun$) (?v2 Nat_stream$)) (= (stake$ ?v0 (smap$b ?v1 ?v2)) (map$ ?v1 (stake$a ?v0 ?v2)))) :named a18))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (stake$ ?v0 (smap$c ?v1 ?v2)) (map$b ?v1 (stake$ ?v0 ?v2)))) :named a19))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_stream$)) (= (= (stake$a ?v0 ?v1) nil$a) (= ?v0 zero$))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 A_stream$)) (= (= (stake$ ?v0 ?v1) nil$) (= ?v0 zero$))) :named a21))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A_list$)) (= (= nil$a (map$c ?v0 ?v1)) (= ?v1 nil$))) :named a22))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_list$)) (= (= nil$a (map$a ?v0 ?v1)) (= ?v1 nil$a))) :named a23))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_list$)) (= (= nil$ (map$b ?v0 ?v1)) (= ?v1 nil$))) :named a24))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_list$)) (= (= nil$ (map$ ?v0 ?v1)) (= ?v1 nil$a))) :named a25))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A_list$)) (= (= (map$c ?v0 ?v1) nil$a) (= ?v1 nil$))) :named a26))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_list$)) (= (= (map$a ?v0 ?v1) nil$a) (= ?v1 nil$a))) :named a27))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_list$)) (= (= (map$b ?v0 ?v1) nil$) (= ?v1 nil$))) :named a28))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_list$)) (= (= (map$ ?v0 ?v1) nil$) (= ?v1 nil$a))) :named a29))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A_list$)) (= (= (map$c ?v0 ?v1) nil$a) (= ?v1 nil$))) :named a30))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_list$)) (= (= (map$a ?v0 ?v1) nil$a) (= ?v1 nil$a))) :named a31))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_list$)) (= (= (map$b ?v0 ?v1) nil$) (= ?v1 nil$))) :named a32))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_list$)) (= (= (map$ ?v0 ?v1) nil$) (= ?v1 nil$a))) :named a33))
(assert (! (forall ((?v0 Nat_nat_fun$) (?v1 Nat_stream$) (?v2 Nat$)) (= (fun_app$c (snth$ (smap$a ?v0 ?v1)) ?v2) (fun_app$c ?v0 (fun_app$c (snth$ ?v1) ?v2)))) :named a34))
(assert (! (forall ((?v0 A_nat_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (fun_app$c (snth$ (smap$ ?v0 ?v1)) ?v2) (fun_app$e ?v0 (fun_app$ (snth$a ?v1) ?v2)))) :named a35))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_stream$) (?v2 Nat$)) (= (fun_app$ (snth$a (smap$c ?v0 ?v1)) ?v2) (fun_app$a ?v0 (fun_app$ (snth$a ?v1) ?v2)))) :named a36))
(assert (! (forall ((?v0 Nat_a_fun$) (?v1 Nat_stream$) (?v2 Nat$)) (= (fun_app$ (snth$a (smap$b ?v0 ?v1)) ?v2) (fun_app$ ?v0 (fun_app$c (snth$ ?v1) ?v2)))) :named a37))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_nat_fun$) (?v2 Nat_stream$)) (= (sdrop$ ?v0 (smap$a ?v1 ?v2)) (smap$a ?v1 (sdrop$ ?v0 ?v2)))) :named a38))
(assert (! (forall ((?v0 Nat$) (?v1 A_nat_fun$) (?v2 A_stream$)) (= (sdrop$ ?v0 (smap$ ?v1 ?v2)) (smap$ ?v1 (sdrop$a ?v0 ?v2)))) :named a39))
(assert (! (forall ((?v0 Nat$) (?v1 A_a_fun$) (?v2 A_stream$)) (= (sdrop$a ?v0 (smap$c ?v1 ?v2)) (smap$c ?v1 (sdrop$a ?v0 ?v2)))) :named a40))
(assert (! (forall ((?v0 Nat$) (?v1 Nat_a_fun$) (?v2 Nat_stream$)) (= (sdrop$a ?v0 (smap$b ?v1 ?v2)) (smap$b ?v1 (sdrop$ ?v0 ?v2)))) :named a41))
(check-sat)
;(get-unsat-core)
