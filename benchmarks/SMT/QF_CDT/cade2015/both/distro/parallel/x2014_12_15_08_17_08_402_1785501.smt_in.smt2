; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 448
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort Dtree_dtree_prod_bool_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))
  (Dtree_dtree_prod$ (pair$ (fst$ Dtree$) (snd$ Dtree$)))))
(declare-fun t$ () T$)
(declare-fun par$ (Dtree_dtree_prod$) Dtree$)
(declare-fun tr1$ () Dtree$)
(declare-fun tr2$ () Dtree$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun fun_app$ (Dtree_dtree_prod_bool_fun$ Dtree_dtree_prod$) Bool)
(assert (! (not (= (member$ (inl$ t$) (cont$ (par$ (pair$ tr1$ tr2$)))) (or (member$ (inl$ t$) (cont$ tr1$)) (member$ (inl$ t$) (cont$ tr2$))))) :named a0))
(assert (! (forall ((?v0 Dtree_dtree_prod$)) (=> (forall ((?v1 Dtree$) (?v2 Dtree$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a1))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a4))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a5))
(assert (! (forall ((?v0 T$) (?v1 T$)) (=> (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 Dtree_dtree_prod$)) (=> (forall ((?v1 Dtree$) (?v2 Dtree$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a7))
(assert (! (forall ((?v0 Dtree_dtree_prod$)) (exists ((?v1 Dtree$) (?v2 Dtree$)) (= ?v0 (pair$ ?v1 ?v2)))) :named a8))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a9))
(assert (! (forall ((?v0 Dtree_dtree_prod$)) (=> (forall ((?v1 Dtree$) (?v2 Dtree$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a10))
(assert (! (forall ((?v0 Dtree_dtree_prod_bool_fun$) (?v1 Dtree_dtree_prod$)) (=> (forall ((?v2 Dtree$) (?v3 Dtree$)) (fun_app$ ?v0 (pair$ ?v2 ?v3))) (fun_app$ ?v0 ?v1))) :named a11))
(check-sat)
;(get-unsat-core)
