; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 546
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort T_set$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort T_set_T_set_fun$ 0)
(declare-sort T_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_T_fun$ 0)
(declare-sort T_dtree_dtree_prod_sum_set$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0)
(declare-sort T_T_dtree_dtree_prod_sum_fun$ 0)
(declare-sort T_dtree_dtree_prod_sum_T_fun$ 0)
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0)
(declare-sort T_dtree_dtree_prod_sum_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_dtree_prod_sum_fun$ 0)
(declare-sort T_dtree_dtree_prod_sum_T_dtree_dtree_prod_sum_fun$ 0)
(declare-sort T_dtree_dtree_prod_sum_set_T_dtree_dtree_prod_sum_set_fun$ 0)
(declare-datatypes () ((Dtree_dtree_prod$ (pair$ (fst$ Dtree$) (snd$ Dtree$)))
  (T_dtree_dtree_prod_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree_dtree_prod$)))
  (T_dtree_sum$ (inl$a (projl$a T$)) (inr$a (projr$a Dtree$)))))
(declare-fun uu$ () T_T_dtree_dtree_prod_sum_fun$)
(declare-fun sup$ (T_dtree_sum_set$) T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun tr1$ () Dtree$)
(declare-fun tr2$ () Dtree$)
(declare-fun uua$ () T_T_dtree_sum_fun$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun sup$a (T_dtree_dtree_prod_sum_set$) T_dtree_dtree_prod_sum_set_T_dtree_dtree_prod_sum_set_fun$)
(declare-fun sup$b (T_set$) T_set_T_set_fun$)
(declare-fun image$ (T_T_dtree_dtree_prod_sum_fun$ T_set$) T_dtree_dtree_prod_sum_set$)
(declare-fun finite$ (T_dtree_dtree_prod_sum_set$) Bool)
(declare-fun image$a (T_dtree_dtree_prod_sum_T_dtree_sum_fun$ T_dtree_dtree_prod_sum_set$) T_dtree_sum_set$)
(declare-fun image$b (T_dtree_dtree_prod_sum_T_fun$ T_dtree_dtree_prod_sum_set$) T_set$)
(declare-fun image$c (T_dtree_sum_T_dtree_dtree_prod_sum_fun$ T_dtree_sum_set$) T_dtree_dtree_prod_sum_set$)
(declare-fun image$d (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun image$e (T_dtree_sum_T_fun$ T_dtree_sum_set$) T_set$)
(declare-fun image$f (T_T_dtree_sum_fun$ T_set$) T_dtree_sum_set$)
(declare-fun image$g (T_T_fun$ T_set$) T_set$)
(declare-fun image$h (T_dtree_dtree_prod_sum_T_dtree_dtree_prod_sum_fun$ T_dtree_dtree_prod_sum_set$) T_dtree_dtree_prod_sum_set$)
(declare-fun member$ (T$ T_set$) Bool)
(declare-fun vimage$ (T_T_dtree_sum_fun$ T_dtree_sum_set$) T_set$)
(declare-fun finite$a (T_set$) Bool)
(declare-fun finite$b (T_dtree_sum_set$) Bool)
(declare-fun fun_app$ (T_T_dtree_dtree_prod_sum_fun$ T$) T_dtree_dtree_prod_sum$)
(declare-fun member$a (T_dtree_dtree_prod_sum$ T_dtree_dtree_prod_sum_set$) Bool)
(declare-fun member$b (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun vimage$a (T_dtree_dtree_prod_sum_T_dtree_sum_fun$ T_dtree_sum_set$) T_dtree_dtree_prod_sum_set$)
(declare-fun vimage$b (T_dtree_sum_T_fun$ T_set$) T_dtree_sum_set$)
(declare-fun vimage$c (T_T_fun$ T_set$) T_set$)
(declare-fun vimage$d (T_dtree_dtree_prod_sum_T_fun$ T_set$) T_dtree_dtree_prod_sum_set$)
(declare-fun vimage$e (T_dtree_sum_T_dtree_dtree_prod_sum_fun$ T_dtree_dtree_prod_sum_set$) T_dtree_sum_set$)
(declare-fun vimage$f (T_T_dtree_dtree_prod_sum_fun$ T_dtree_dtree_prod_sum_set$) T_set$)
(declare-fun vimage$g (T_dtree_dtree_prod_sum_T_dtree_dtree_prod_sum_fun$ T_dtree_dtree_prod_sum_set$) T_dtree_dtree_prod_sum_set$)
(declare-fun vimage$h (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun fun_app$a (T_T_dtree_sum_fun$ T$) T_dtree_sum$)
(declare-fun fun_app$b (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun fun_app$c (T_dtree_dtree_prod_sum_set_T_dtree_dtree_prod_sum_set_fun$ T_dtree_dtree_prod_sum_set$) T_dtree_dtree_prod_sum_set$)
(declare-fun fun_app$d (T_set_T_set_fun$ T_set$) T_set$)
(declare-fun fun_app$e (T_T_fun$ T$) T$)
(declare-fun fun_app$f (T_dtree_sum_T_fun$ T_dtree_sum$) T$)
(declare-fun fun_app$g (T_dtree_sum_T_dtree_dtree_prod_sum_fun$ T_dtree_sum$) T_dtree_dtree_prod_sum$)
(declare-fun fun_app$h (T_dtree_dtree_prod_sum_T_fun$ T_dtree_dtree_prod_sum$) T$)
(declare-fun fun_app$i (T_dtree_dtree_prod_sum_T_dtree_sum_fun$ T_dtree_dtree_prod_sum$) T_dtree_sum$)
(declare-fun fun_app$j (T_dtree_dtree_prod_sum_T_dtree_dtree_prod_sum_fun$ T_dtree_dtree_prod_sum$) T_dtree_dtree_prod_sum$)
(declare-fun fun_app$k (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$) T_dtree_sum$)
(assert (! (forall ((?v0 T$)) (! (= (fun_app$ uu$ ?v0) (inl$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$a uua$ ?v0) (inl$a ?v0)) :pattern ((fun_app$a uua$ ?v0)))) :named a1))
(assert (! (not (finite$ (image$ uu$ (vimage$ uua$ (fun_app$b (sup$ (cont$ tr1$)) (cont$ tr2$)))))) :named a2))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (vimage$a ?v0 (fun_app$b (sup$ ?v1) ?v2)) (fun_app$c (sup$a (vimage$a ?v0 ?v1)) (vimage$a ?v0 ?v2)))) :named a3))
(assert (! (forall ((?v0 T_dtree_sum_T_fun$) (?v1 T_set$) (?v2 T_set$)) (= (vimage$b ?v0 (fun_app$d (sup$b ?v1) ?v2)) (fun_app$b (sup$ (vimage$b ?v0 ?v1)) (vimage$b ?v0 ?v2)))) :named a4))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_set$) (?v2 T_set$)) (= (vimage$c ?v0 (fun_app$d (sup$b ?v1) ?v2)) (fun_app$d (sup$b (vimage$c ?v0 ?v1)) (vimage$c ?v0 ?v2)))) :named a5))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum_T_fun$) (?v1 T_set$) (?v2 T_set$)) (= (vimage$d ?v0 (fun_app$d (sup$b ?v1) ?v2)) (fun_app$c (sup$a (vimage$d ?v0 ?v1)) (vimage$d ?v0 ?v2)))) :named a6))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_dtree_prod_sum_fun$) (?v1 T_dtree_dtree_prod_sum_set$) (?v2 T_dtree_dtree_prod_sum_set$)) (= (vimage$e ?v0 (fun_app$c (sup$a ?v1) ?v2)) (fun_app$b (sup$ (vimage$e ?v0 ?v1)) (vimage$e ?v0 ?v2)))) :named a7))
(assert (! (forall ((?v0 T_T_dtree_dtree_prod_sum_fun$) (?v1 T_dtree_dtree_prod_sum_set$) (?v2 T_dtree_dtree_prod_sum_set$)) (= (vimage$f ?v0 (fun_app$c (sup$a ?v1) ?v2)) (fun_app$d (sup$b (vimage$f ?v0 ?v1)) (vimage$f ?v0 ?v2)))) :named a8))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum_T_dtree_dtree_prod_sum_fun$) (?v1 T_dtree_dtree_prod_sum_set$) (?v2 T_dtree_dtree_prod_sum_set$)) (= (vimage$g ?v0 (fun_app$c (sup$a ?v1) ?v2)) (fun_app$c (sup$a (vimage$g ?v0 ?v1)) (vimage$g ?v0 ?v2)))) :named a9))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (vimage$ ?v0 (fun_app$b (sup$ ?v1) ?v2)) (fun_app$d (sup$b (vimage$ ?v0 ?v1)) (vimage$ ?v0 ?v2)))) :named a10))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (vimage$h ?v0 (fun_app$b (sup$ ?v1) ?v2)) (fun_app$b (sup$ (vimage$h ?v0 ?v1)) (vimage$h ?v0 ?v2)))) :named a11))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (= (finite$a (fun_app$d (sup$b ?v0) ?v1)) (and (finite$a ?v0) (finite$a ?v1)))) :named a12))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum_set$) (?v1 T_dtree_dtree_prod_sum_set$)) (= (finite$ (fun_app$c (sup$a ?v0) ?v1)) (and (finite$ ?v0) (finite$ ?v1)))) :named a13))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (finite$b (fun_app$b (sup$ ?v0) ?v1)) (and (finite$b ?v0) (finite$b ?v1)))) :named a14))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum_set$) (?v1 T_dtree_dtree_prod_sum_T_dtree_sum_fun$)) (=> (finite$ ?v0) (finite$b (image$a ?v1 ?v0)))) :named a15))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum_set$) (?v1 T_dtree_dtree_prod_sum_T_fun$)) (=> (finite$ ?v0) (finite$a (image$b ?v1 ?v0)))) :named a16))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_T_dtree_dtree_prod_sum_fun$)) (=> (finite$b ?v0) (finite$ (image$c ?v1 ?v0)))) :named a17))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_T_dtree_sum_fun$)) (=> (finite$b ?v0) (finite$b (image$d ?v1 ?v0)))) :named a18))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_T_fun$)) (=> (finite$b ?v0) (finite$a (image$e ?v1 ?v0)))) :named a19))
(assert (! (forall ((?v0 T_set$) (?v1 T_T_dtree_sum_fun$)) (=> (finite$a ?v0) (finite$b (image$f ?v1 ?v0)))) :named a20))
(assert (! (forall ((?v0 T_set$) (?v1 T_T_fun$)) (=> (finite$a ?v0) (finite$a (image$g ?v1 ?v0)))) :named a21))
(assert (! (forall ((?v0 T_set$) (?v1 T_T_dtree_dtree_prod_sum_fun$)) (=> (finite$a ?v0) (finite$ (image$ ?v1 ?v0)))) :named a22))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum_set$) (?v1 T_dtree_dtree_prod_sum_T_dtree_dtree_prod_sum_fun$)) (=> (finite$ ?v0) (finite$ (image$h ?v1 ?v0)))) :named a23))
(assert (! (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T_set$)) (= (member$ ?v0 (vimage$c ?v1 ?v2)) (member$ (fun_app$e ?v1 ?v0) ?v2))) :named a24))
(assert (! (forall ((?v0 T$) (?v1 T_T_dtree_dtree_prod_sum_fun$) (?v2 T_dtree_dtree_prod_sum_set$)) (= (member$ ?v0 (vimage$f ?v1 ?v2)) (member$a (fun_app$ ?v1 ?v0) ?v2))) :named a25))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_fun$) (?v2 T_set$)) (= (member$b ?v0 (vimage$b ?v1 ?v2)) (member$ (fun_app$f ?v1 ?v0) ?v2))) :named a26))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_dtree_prod_sum_fun$) (?v2 T_dtree_dtree_prod_sum_set$)) (= (member$b ?v0 (vimage$e ?v1 ?v2)) (member$a (fun_app$g ?v1 ?v0) ?v2))) :named a27))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum$) (?v1 T_dtree_dtree_prod_sum_T_fun$) (?v2 T_set$)) (= (member$a ?v0 (vimage$d ?v1 ?v2)) (member$ (fun_app$h ?v1 ?v0) ?v2))) :named a28))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum$) (?v1 T_dtree_dtree_prod_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$a ?v0 (vimage$a ?v1 ?v2)) (member$b (fun_app$i ?v1 ?v0) ?v2))) :named a29))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum$) (?v1 T_dtree_dtree_prod_sum_T_dtree_dtree_prod_sum_fun$) (?v2 T_dtree_dtree_prod_sum_set$)) (= (member$a ?v0 (vimage$g ?v1 ?v2)) (member$a (fun_app$j ?v1 ?v0) ?v2))) :named a30))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$b ?v0 (vimage$h ?v1 ?v2)) (member$b (fun_app$k ?v1 ?v0) ?v2))) :named a31))
(assert (! (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$ ?v0 (vimage$ ?v1 ?v2)) (member$b (fun_app$a ?v1 ?v0) ?v2))) :named a32))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$e ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$ ?v1 (vimage$c ?v0 ?v3)))) :named a33))
(assert (! (forall ((?v0 T_dtree_sum_T_fun$) (?v1 T_dtree_sum$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$f ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$b ?v1 (vimage$b ?v0 ?v3)))) :named a34))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum_T_fun$) (?v1 T_dtree_dtree_prod_sum$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$h ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$a ?v1 (vimage$d ?v0 ?v3)))) :named a35))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum_T_dtree_sum_fun$) (?v1 T_dtree_dtree_prod_sum$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$i ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$a ?v1 (vimage$a ?v0 ?v3)))) :named a36))
(assert (! (forall ((?v0 T_T_dtree_dtree_prod_sum_fun$) (?v1 T$) (?v2 T_dtree_dtree_prod_sum$) (?v3 T_dtree_dtree_prod_sum_set$)) (=> (and (= (fun_app$ ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$ ?v1 (vimage$f ?v0 ?v3)))) :named a37))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_dtree_prod_sum_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_dtree_prod_sum$) (?v3 T_dtree_dtree_prod_sum_set$)) (=> (and (= (fun_app$g ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$b ?v1 (vimage$e ?v0 ?v3)))) :named a38))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum_T_dtree_dtree_prod_sum_fun$) (?v1 T_dtree_dtree_prod_sum$) (?v2 T_dtree_dtree_prod_sum$) (?v3 T_dtree_dtree_prod_sum_set$)) (=> (and (= (fun_app$j ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$a ?v1 (vimage$g ?v0 ?v3)))) :named a39))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$k ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$b ?v1 (vimage$h ?v0 ?v3)))) :named a40))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$a ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$ ?v1 (vimage$ ?v0 ?v3)))) :named a41))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a42))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= (inl$a ?v0) (inl$a ?v1)) (= ?v0 ?v1))) :named a43))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a44))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= (inl$a ?v0) (inl$a ?v1)) (= ?v0 ?v1))) :named a45))
(assert (! (forall ((?v0 T$) (?v1 T_set$) (?v2 T_set$)) (= (member$ ?v0 (fun_app$d (sup$b ?v1) ?v2)) (or (member$ ?v0 ?v1) (member$ ?v0 ?v2)))) :named a46))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum$) (?v1 T_dtree_dtree_prod_sum_set$) (?v2 T_dtree_dtree_prod_sum_set$)) (= (member$a ?v0 (fun_app$c (sup$a ?v1) ?v2)) (or (member$a ?v0 ?v1) (member$a ?v0 ?v2)))) :named a47))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (member$b ?v0 (fun_app$b (sup$ ?v1) ?v2)) (or (member$b ?v0 ?v1) (member$b ?v0 ?v2)))) :named a48))
(assert (! (forall ((?v0 T$) (?v1 T_set$) (?v2 T_set$)) (=> (=> (not (member$ ?v0 ?v1)) (member$ ?v0 ?v2)) (member$ ?v0 (fun_app$d (sup$b ?v2) ?v1)))) :named a49))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum$) (?v1 T_dtree_dtree_prod_sum_set$) (?v2 T_dtree_dtree_prod_sum_set$)) (=> (=> (not (member$a ?v0 ?v1)) (member$a ?v0 ?v2)) (member$a ?v0 (fun_app$c (sup$a ?v2) ?v1)))) :named a50))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (=> (not (member$b ?v0 ?v1)) (member$b ?v0 ?v2)) (member$b ?v0 (fun_app$b (sup$ ?v2) ?v1)))) :named a51))
(assert (! (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T$) (?v3 T_set$)) (=> (and (= ?v0 (fun_app$e ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (image$g ?v1 ?v3)))) :named a52))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_T_dtree_sum_fun$) (?v2 T$) (?v3 T_set$)) (=> (and (= ?v0 (fun_app$a ?v1 ?v2)) (member$ ?v2 ?v3)) (member$b ?v0 (image$f ?v1 ?v3)))) :named a53))
(assert (! (forall ((?v0 T$) (?v1 T_dtree_sum_T_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$f ?v1 ?v2)) (member$b ?v2 ?v3)) (member$ ?v0 (image$e ?v1 ?v3)))) :named a54))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (member$b ?v2 ?v3)) (member$b ?v0 (image$d ?v1 ?v3)))) :named a55))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum$) (?v1 T_dtree_sum_T_dtree_dtree_prod_sum_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$g ?v1 ?v2)) (member$b ?v2 ?v3)) (member$a ?v0 (image$c ?v1 ?v3)))) :named a56))
(assert (! (forall ((?v0 T$) (?v1 T_dtree_dtree_prod_sum_T_fun$) (?v2 T_dtree_dtree_prod_sum$) (?v3 T_dtree_dtree_prod_sum_set$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (member$a ?v2 ?v3)) (member$ ?v0 (image$b ?v1 ?v3)))) :named a57))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_dtree_prod_sum_T_dtree_sum_fun$) (?v2 T_dtree_dtree_prod_sum$) (?v3 T_dtree_dtree_prod_sum_set$)) (=> (and (= ?v0 (fun_app$i ?v1 ?v2)) (member$a ?v2 ?v3)) (member$b ?v0 (image$a ?v1 ?v3)))) :named a58))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum$) (?v1 T_dtree_dtree_prod_sum_T_dtree_dtree_prod_sum_fun$) (?v2 T_dtree_dtree_prod_sum$) (?v3 T_dtree_dtree_prod_sum_set$)) (=> (and (= ?v0 (fun_app$j ?v1 ?v2)) (member$a ?v2 ?v3)) (member$a ?v0 (image$h ?v1 ?v3)))) :named a59))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum$) (?v1 T_T_dtree_dtree_prod_sum_fun$) (?v2 T$) (?v3 T_set$)) (=> (and (= ?v0 (fun_app$ ?v1 ?v2)) (member$ ?v2 ?v3)) (member$a ?v0 (image$ ?v1 ?v3)))) :named a60))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (= (fun_app$d (sup$b (fun_app$d (sup$b ?v0) ?v1)) ?v1) (fun_app$d (sup$b ?v0) ?v1))) :named a61))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum_set$) (?v1 T_dtree_dtree_prod_sum_set$)) (= (fun_app$c (sup$a (fun_app$c (sup$a ?v0) ?v1)) ?v1) (fun_app$c (sup$a ?v0) ?v1))) :named a62))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (fun_app$b (sup$ (fun_app$b (sup$ ?v0) ?v1)) ?v1) (fun_app$b (sup$ ?v0) ?v1))) :named a63))
(assert (! (forall ((?v0 T_set$)) (! (= (fun_app$d (sup$b ?v0) ?v0) ?v0) :pattern ((sup$b ?v0)))) :named a64))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum_set$)) (! (= (fun_app$c (sup$a ?v0) ?v0) ?v0) :pattern ((sup$a ?v0)))) :named a65))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (! (= (fun_app$b (sup$ ?v0) ?v0) ?v0) :pattern ((sup$ ?v0)))) :named a66))
(assert (! (forall ((?v0 T_set$)) (! (= (fun_app$d (sup$b ?v0) ?v0) ?v0) :pattern ((sup$b ?v0)))) :named a67))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum_set$)) (! (= (fun_app$c (sup$a ?v0) ?v0) ?v0) :pattern ((sup$a ?v0)))) :named a68))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (! (= (fun_app$b (sup$ ?v0) ?v0) ?v0) :pattern ((sup$ ?v0)))) :named a69))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (= (fun_app$d (sup$b ?v0) (fun_app$d (sup$b ?v0) ?v1)) (fun_app$d (sup$b ?v0) ?v1))) :named a70))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum_set$) (?v1 T_dtree_dtree_prod_sum_set$)) (= (fun_app$c (sup$a ?v0) (fun_app$c (sup$a ?v0) ?v1)) (fun_app$c (sup$a ?v0) ?v1))) :named a71))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (fun_app$b (sup$ ?v0) (fun_app$b (sup$ ?v0) ?v1)) (fun_app$b (sup$ ?v0) ?v1))) :named a72))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (= (fun_app$d (sup$b ?v0) (fun_app$d (sup$b ?v0) ?v1)) (fun_app$d (sup$b ?v0) ?v1))) :named a73))
(assert (! (forall ((?v0 T_dtree_dtree_prod_sum_set$) (?v1 T_dtree_dtree_prod_sum_set$)) (= (fun_app$c (sup$a ?v0) (fun_app$c (sup$a ?v0) ?v1)) (fun_app$c (sup$a ?v0) ?v1))) :named a74))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (= (fun_app$b (sup$ ?v0) (fun_app$b (sup$ ?v0) ?v1)) (fun_app$b (sup$ ?v0) ?v1))) :named a75))
(check-sat)
;(get-unsat-core)
