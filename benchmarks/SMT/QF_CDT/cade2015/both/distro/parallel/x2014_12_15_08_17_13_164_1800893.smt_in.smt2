; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 368
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort Dtree$ 0)
(declare-datatypes () ((Dtree_dtree_prod$ (pair$ (fst$ Dtree$) (snd$ Dtree$)))))
(declare-fun par$ (Dtree_dtree_prod$) Dtree$)
(declare-fun trA$ () Dtree$)
(declare-fun trB$ () Dtree$)
(declare-fun root$ (Dtree$) N$)
(declare-fun nplus$ (N$ N$) N$)
(assert (! (not (= trA$ trB$)) :named a0))
(assert (! (exists ((?v0 Dtree$) (?v1 Dtree$)) (and (= trA$ (par$ (pair$ ?v0 ?v1))) (= trB$ (par$ (pair$ ?v1 ?v0))))) :named a1))
(assert (! (forall ((?v0 Dtree_dtree_prod$)) (=> (forall ((?v1 Dtree$) (?v2 Dtree$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a2))
(assert (! (forall ((?v0 N$) (?v1 N$) (?v2 N$)) (= (nplus$ (nplus$ ?v0 ?v1) ?v2) (nplus$ ?v0 (nplus$ ?v1 ?v2)))) :named a3))
(assert (! (forall ((?v0 N$) (?v1 N$)) (= (nplus$ ?v0 ?v1) (nplus$ ?v1 ?v0))) :named a4))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a5))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a6))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (root$ (par$ (pair$ ?v0 ?v1))) (nplus$ (root$ ?v0) (root$ ?v1)))) :named a7))
(assert (! (forall ((?v0 Dtree_dtree_prod$)) (=> (forall ((?v1 Dtree$) (?v2 Dtree$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a8))
(assert (! (forall ((?v0 Dtree_dtree_prod$)) (exists ((?v1 Dtree$) (?v2 Dtree$)) (= ?v0 (pair$ ?v1 ?v2)))) :named a9))
(check-sat)
;(get-unsat-core)
