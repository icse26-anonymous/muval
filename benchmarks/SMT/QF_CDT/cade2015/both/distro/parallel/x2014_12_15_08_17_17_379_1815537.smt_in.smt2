; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 398
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort T_set$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort T_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_T_fun$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))
  (Dtree_dtree_prod$ (pair$ (fst$ Dtree$) (snd$ Dtree$)))))
(declare-fun n$ () T$)
(declare-fun uu$ () T_T_dtree_sum_fun$)
(declare-fun par$ (Dtree_dtree_prod$) Dtree$)
(declare-fun sup$ (T_dtree_sum_set$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun trA$ () Dtree$)
(declare-fun trB$ () Dtree$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun sup$a (T_set$ T_set$) T_set$)
(declare-fun tr1a$ () Dtree$)
(declare-fun tr2a$ () Dtree$)
(declare-fun member$ (T$ T_set$) Bool)
(declare-fun vimage$ (T_T_dtree_sum_fun$ T_dtree_sum_set$) T_set$)
(declare-fun collect$ (T_dtree_sum_bool_fun$) T_dtree_sum_set$)
(declare-fun fun_app$ (T_T_dtree_sum_fun$ T$) T_dtree_sum$)
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun vimage$a (T_T_fun$ T_set$) T_set$)
(declare-fun vimage$b (T_dtree_sum_T_fun$ T_set$) T_dtree_sum_set$)
(declare-fun vimage$c (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun collect$a (T_bool_fun$) T_set$)
(declare-fun fun_app$a (T_T_fun$ T$) T$)
(declare-fun fun_app$b (T_dtree_sum_T_fun$ T_dtree_sum$) T$)
(declare-fun fun_app$c (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$) T_dtree_sum$)
(declare-fun fun_app$d (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun fun_app$e (T_bool_fun$ T$) Bool)
(assert (! (forall ((?v0 T$)) (! (= (fun_app$ uu$ ?v0) (inl$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (member$ n$ (vimage$ uu$ (cont$ (par$ (pair$ tr2a$ tr1a$)))))) :named a1))
(assert (! (exists ((?v0 Dtree$) (?v1 Dtree$)) (and (= trA$ (par$ (pair$ ?v0 ?v1))) (= trB$ (par$ (pair$ ?v1 ?v0))))) :named a2))
(assert (! (member$a (inl$ n$) (cont$ (par$ (pair$ tr1a$ tr2a$)))) :named a3))
(assert (! (forall ((?v0 T$) (?v1 Dtree$) (?v2 Dtree$)) (= (member$a (inl$ ?v0) (cont$ (par$ (pair$ ?v1 ?v2)))) (or (member$a (inl$ ?v0) (cont$ ?v1)) (member$a (inl$ ?v0) (cont$ ?v2))))) :named a4))
(assert (! (forall ((?v0 Dtree_dtree_prod$)) (=> (forall ((?v1 Dtree$) (?v2 Dtree$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a5))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T_set$)) (= (member$ ?v0 (vimage$a ?v1 ?v2)) (member$ (fun_app$a ?v1 ?v0) ?v2))) :named a8))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_fun$) (?v2 T_set$)) (= (member$a ?v0 (vimage$b ?v1 ?v2)) (member$ (fun_app$b ?v1 ?v0) ?v2))) :named a9))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$a ?v0 (vimage$c ?v1 ?v2)) (member$a (fun_app$c ?v1 ?v0) ?v2))) :named a10))
(assert (! (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$ ?v0 (vimage$ ?v1 ?v2)) (member$a (fun_app$ ?v1 ?v0) ?v2))) :named a11))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$a ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$ ?v1 (vimage$a ?v0 ?v3)))) :named a12))
(assert (! (forall ((?v0 T_dtree_sum_T_fun$) (?v1 T_dtree_sum$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$b ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$a ?v1 (vimage$b ?v0 ?v3)))) :named a13))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$c ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$a ?v1 (vimage$c ?v0 ?v3)))) :named a14))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$ ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$ ?v1 (vimage$ ?v0 ?v3)))) :named a15))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a16))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a17))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (vimage$ uu$ (cont$ (par$ (pair$ ?v0 ?v1)))) (vimage$ uu$ (sup$ (cont$ ?v0) (cont$ ?v1))))) :named a18))
(assert (! (forall ((?v0 T$) (?v1 T$)) (=> (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a19))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_bool_fun$)) (=> (forall ((?v3 T_dtree_sum$)) (= (fun_app$d ?v0 (fun_app$c ?v1 ?v3)) (fun_app$d ?v2 ?v3))) (= (vimage$c ?v1 (collect$ ?v0)) (collect$ ?v2)))) :named a20))
(assert (! (forall ((?v0 T_bool_fun$) (?v1 T_dtree_sum_T_fun$) (?v2 T_dtree_sum_bool_fun$)) (=> (forall ((?v3 T_dtree_sum$)) (= (fun_app$e ?v0 (fun_app$b ?v1 ?v3)) (fun_app$d ?v2 ?v3))) (= (vimage$b ?v1 (collect$a ?v0)) (collect$ ?v2)))) :named a21))
(assert (! (forall ((?v0 T_bool_fun$) (?v1 T_T_fun$) (?v2 T_bool_fun$)) (=> (forall ((?v3 T$)) (= (fun_app$e ?v0 (fun_app$a ?v1 ?v3)) (fun_app$e ?v2 ?v3))) (= (vimage$a ?v1 (collect$a ?v0)) (collect$a ?v2)))) :named a22))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_T_dtree_sum_fun$) (?v2 T_bool_fun$)) (=> (forall ((?v3 T$)) (= (fun_app$d ?v0 (fun_app$ ?v1 ?v3)) (fun_app$e ?v2 ?v3))) (= (vimage$ ?v1 (collect$ ?v0)) (collect$a ?v2)))) :named a23))
(assert (! (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T_set$)) (=> (and (member$ ?v0 (vimage$a ?v1 ?v2)) (forall ((?v3 T$)) (=> (and (= (fun_app$a ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a24))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_fun$) (?v2 T_set$)) (=> (and (member$a ?v0 (vimage$b ?v1 ?v2)) (forall ((?v3 T$)) (=> (and (= (fun_app$b ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a25))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (and (member$a ?v0 (vimage$c ?v1 ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (= (fun_app$c ?v1 ?v0) ?v3) (member$a ?v3 ?v2)) false))) false)) :named a26))
(assert (! (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (and (member$ ?v0 (vimage$ ?v1 ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (= (fun_app$ ?v1 ?v0) ?v3) (member$a ?v3 ?v2)) false))) false)) :named a27))
(assert (! (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T_set$)) (=> (member$ ?v0 (vimage$a ?v1 ?v2)) (member$ (fun_app$a ?v1 ?v0) ?v2))) :named a28))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_fun$) (?v2 T_set$)) (=> (member$a ?v0 (vimage$b ?v1 ?v2)) (member$ (fun_app$b ?v1 ?v0) ?v2))) :named a29))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$a ?v0 (vimage$c ?v1 ?v2)) (member$a (fun_app$c ?v1 ?v0) ?v2))) :named a30))
(assert (! (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$ ?v0 (vimage$ ?v1 ?v2)) (member$a (fun_app$ ?v1 ?v0) ?v2))) :named a31))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T$) (?v2 T_set$)) (=> (member$ (fun_app$a ?v0 ?v1) ?v2) (member$ ?v1 (vimage$a ?v0 ?v2)))) :named a32))
(assert (! (forall ((?v0 T_dtree_sum_T_fun$) (?v1 T_dtree_sum$) (?v2 T_set$)) (=> (member$ (fun_app$b ?v0 ?v1) ?v2) (member$a ?v1 (vimage$b ?v0 ?v2)))) :named a33))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_set$)) (=> (member$a (fun_app$c ?v0 ?v1) ?v2) (member$a ?v1 (vimage$c ?v0 ?v2)))) :named a34))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T$) (?v2 T_dtree_sum_set$)) (=> (member$a (fun_app$ ?v0 ?v1) ?v2) (member$ ?v1 (vimage$ ?v0 ?v2)))) :named a35))
(assert (! (forall ((?v0 T$) (?v1 T_set$) (?v2 T_set$)) (= (member$ ?v0 (sup$a ?v1 ?v2)) (or (member$ ?v0 ?v1) (member$ ?v0 ?v2)))) :named a36))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (= (member$a ?v0 (sup$ ?v1 ?v2)) (or (member$a ?v0 ?v1) (member$a ?v0 ?v2)))) :named a37))
(check-sat)
;(get-unsat-core)
