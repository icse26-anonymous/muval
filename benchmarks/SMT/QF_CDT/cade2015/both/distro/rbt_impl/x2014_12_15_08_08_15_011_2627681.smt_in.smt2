; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 45
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_b_b_fun_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_b_b_fun_fun_fun$ 0)
(declare-datatypes () ((Color$ (r$) (b$))
  (A_b_rbt$ (empty$) (branch$ (select$ Color$) (selecta$ A_b_rbt$) (selectb$ A$) (selectc$ B$) (selectd$ A_b_rbt$)))))
(declare-fun a$ () A_b_rbt$)
(declare-fun c$ () A_b_rbt$)
(declare-fun s$ () A$)
(declare-fun t$ () A$)
(declare-fun b$a () A_b_rbt$)
(declare-fun ka$ () A$)
(declare-fun less$ () A_a_bool_fun_fun$)
(declare-fun paint$ (Color$ A_b_rbt$) A_b_rbt$)
(declare-fun is_rbt$ (A_a_bool_fun_fun$ A_b_rbt$) Bool)
(declare-fun balance$ (A_b_rbt$ A$ B$ A_b_rbt$) A_b_rbt$)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun rbt_less$ (A_a_bool_fun_fun$ A$ A_b_rbt$) Bool)
(declare-fun rbt_insert$ (A_a_bool_fun_fun$ A$ B$ A_b_rbt$) A_b_rbt$)
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$ A_b_rbt$) Bool)
(declare-fun rbt_greater$ (A_a_bool_fun_fun$ A$ A_b_rbt$) Bool)
(declare-fun rbt_insert_with$ (A_a_bool_fun_fun$ B_b_b_fun_fun$ A$ B$ A_b_rbt$) A_b_rbt$)
(declare-fun rbt_insert_with_key$ (A_a_bool_fun_fun$ A_b_b_b_fun_fun_fun$ A$ B$ A_b_rbt$) A_b_rbt$)
(assert (! (not (rbt_greater$ less$ s$ c$)) :named a0))
(assert (! (fun_app$ (fun_app$a less$ s$) t$) :named a1))
(assert (! (fun_app$ (fun_app$a less$ ka$) t$) :named a2))
(assert (! (rbt_less$ less$ t$ a$) :named a3))
(assert (! (fun_app$ (fun_app$a less$ ka$) s$) :named a4))
(assert (! (rbt_less$ less$ t$ b$a) :named a5))
(assert (! (rbt_greater$ less$ ka$ a$) :named a6))
(assert (! (rbt_greater$ less$ t$ c$) :named a7))
(assert (! (rbt_greater$ less$ ka$ b$a) :named a8))
(assert (! (rbt_greater$ less$ ka$ c$) :named a9))
(assert (! (rbt_less$ less$ s$ a$) :named a10))
(assert (! (rbt_greater$ less$ s$ b$a) :named a11))
(assert (! (rbt_sorted$ less$ a$) :named a12))
(assert (! (rbt_sorted$ less$ b$a) :named a13))
(assert (! (rbt_sorted$ less$ c$) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (not (fun_app$ (fun_app$a less$ ?v0) ?v1)) (or (fun_app$ (fun_app$a less$ ?v1) ?v0) (= ?v0 ?v1)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (not (= ?v0 ?v1)) (or (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v0)))) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) false) (and (=> (= ?v0 ?v1) false) (=> (fun_app$ (fun_app$a less$ ?v1) ?v0) false))) false)) :named a17))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (=> (not false) (fun_app$ (fun_app$a less$ ?v1) ?v0))) false)) :named a18))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v2)) (fun_app$ (fun_app$a less$ ?v0) ?v2))) :named a19))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v2)) (fun_app$ (fun_app$a less$ ?v0) ?v2))) :named a20))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v2) ?v0)) (fun_app$ (fun_app$a less$ ?v2) ?v1))) :named a21))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v0)) false)) :named a22))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v0)) false)) :named a23))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v0)) false)) :named a24))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$ (fun_app$a less$ ?v0) ?v2))) :named a25))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (= (= ?v1 ?v0) false))) :named a26))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (= (= ?v0 ?v1) false))) :named a27))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 Bool)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (= (=> (fun_app$ (fun_app$a less$ ?v1) ?v0) ?v2) true))) :named a28))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (= (not (fun_app$ (fun_app$a less$ ?v1) ?v0)) true))) :named a29))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (not (fun_app$ (fun_app$a less$ ?v1) ?v0)))) :named a30))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (not (= ?v0 ?v1)))) :named a31))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (not (= ?v0 ?v1)))) :named a32))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) (not (= ?v1 ?v0)))) :named a33))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (= ?v0 ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v2)) (fun_app$ (fun_app$a less$ ?v0) ?v2))) :named a34))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (not (fun_app$ (fun_app$a less$ ?v0) ?v1)) (= (not (fun_app$ (fun_app$a less$ ?v1) ?v0)) (= ?v1 ?v0)))) :named a35))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (not (= ?v0 ?v1)) (and (=> (fun_app$ (fun_app$a less$ ?v0) ?v1) false) (=> (fun_app$ (fun_app$a less$ ?v1) ?v0) false))) false)) :named a36))
(assert (! (forall ((?v0 A$) (?v1 A$)) (or (fun_app$ (fun_app$a less$ ?v0) ?v1) (or (= ?v0 ?v1) (fun_app$ (fun_app$a less$ ?v1) ?v0)))) :named a37))
(assert (! (forall ((?v0 A$)) (not (fun_app$ (fun_app$a less$ ?v0) ?v0))) :named a38))
(assert (! (forall ((?v0 A$)) (not (fun_app$ (fun_app$a less$ ?v0) ?v0))) :named a39))
(assert (! (forall ((?v0 A$) (?v1 A_b_rbt$) (?v2 A$)) (=> (and (rbt_less$ less$ ?v0 ?v1) (fun_app$ (fun_app$a less$ ?v0) ?v2)) (rbt_less$ less$ ?v2 ?v1))) :named a40))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_b_rbt$)) (=> (and (fun_app$ (fun_app$a less$ ?v0) ?v1) (rbt_greater$ less$ ?v1 ?v2)) (rbt_greater$ less$ ?v0 ?v2))) :named a41))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 B_b_b_fun_fun$) (?v2 A$) (?v3 B$)) (=> (rbt_sorted$ less$ ?v0) (rbt_sorted$ less$ (rbt_insert_with$ less$ ?v1 ?v2 ?v3 ?v0)))) :named a42))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$)) (=> (rbt_sorted$ less$ ?v0) (rbt_sorted$ less$ (rbt_insert$ less$ ?v1 ?v2 ?v0)))) :named a43))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_b_b_b_fun_fun_fun$) (?v2 A$) (?v3 B$)) (=> (rbt_sorted$ less$ ?v0) (rbt_sorted$ less$ (rbt_insert_with_key$ less$ ?v1 ?v2 ?v3 ?v0)))) :named a44))
(assert (! (forall ((?v0 A_b_rbt$)) (=> (is_rbt$ less$ ?v0) (rbt_sorted$ less$ ?v0))) :named a45))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 Color$)) (=> (rbt_sorted$ less$ ?v0) (rbt_sorted$ less$ (paint$ ?v1 ?v0)))) :named a46))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$)) (=> (and (rbt_sorted$ less$ ?v0) (and (rbt_sorted$ less$ ?v1) (and (rbt_less$ less$ ?v2 ?v0) (rbt_greater$ less$ ?v2 ?v1)))) (rbt_sorted$ less$ (balance$ ?v0 ?v2 ?v3 ?v1)))) :named a47))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (! (= (rbt_sorted$ less$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) (and (rbt_less$ less$ ?v2 ?v1) (and (rbt_greater$ less$ ?v2 ?v4) (and (rbt_sorted$ less$ ?v1) (rbt_sorted$ less$ ?v4))))) :pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a48))
(check-sat)
;(get-unsat-core)
