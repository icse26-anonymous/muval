; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 90
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_a_list_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))
  (Color$ (r$) (b$))
  (A_b_rbt$ (empty$) (branch$ (select$ Color$) (selecta$ A_b_rbt$) (selectb$ A$) (selectc$ B$) (selectd$ A_b_rbt$)))))
(declare-fun k$ () A$)
(declare-fun l$ () A_b_rbt$)
(declare-fun v$ () B$)
(declare-fun r$a () A_b_rbt$)
(declare-fun bind$ (A_list$ A_a_list_fun$) A_list$)
(declare-fun keys$ (A_b_rbt$) A_list$)
(declare-fun maps$ (A_a_list_fun$ A_list$) A_list$)
(declare-fun append$ (A_list$ A_list$) A_list$)
(declare-fun member$ (A_list$) A_bool_fun$)
(declare-fun balance$ (A_b_rbt$ A$ B$ A_b_rbt$) A_b_rbt$)
(declare-fun fun_app$ (A_a_list_fun$ A$) A_list$)
(declare-fun lexordp$ (A_a_bool_fun_fun$ A_list$ A_list$) Bool)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (B_bool_fun$ B$) Bool)
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun pred_rbt$ (A_bool_fun$ B_bool_fun$ A_b_rbt$) Bool)
(assert (! (not (= (keys$ (balance$ l$ k$ v$ r$a)) (append$ (keys$ l$) (cons$ k$ (keys$ r$a))))) :named a0))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (append$ ?v0 ?v1) (append$ ?v0 ?v2)) (= ?v1 ?v2))) :named a1))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (= (append$ ?v0 ?v1) (append$ ?v2 ?v1)) (= ?v0 ?v2))) :named a2))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$)) (= (append$ (append$ ?v0 ?v1) ?v2) (append$ ?v0 (append$ ?v1 ?v2)))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A$) (?v3 A_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$)) (! (= (append$ (cons$ ?v0 ?v1) ?v2) (cons$ ?v0 (append$ ?v1 ?v2))) :pattern ((append$ (cons$ ?v0 ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (and (= (cons$ ?v0 ?v1) ?v2) (= ?v3 (append$ ?v1 ?v4))) (= (cons$ ?v0 ?v3) (append$ ?v2 ?v4)))) :named a6))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (! (= (keys$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) (append$ (keys$ ?v1) (cons$ ?v2 (keys$ ?v4)))) :pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A_a_list_fun$)) (! (= (bind$ (cons$ ?v0 ?v1) ?v2) (append$ (fun_app$ ?v2 ?v0) (bind$ ?v1 ?v2))) :pattern ((bind$ (cons$ ?v0 ?v1) ?v2)))) :named a8))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (= (= (append$ ?v0 ?v1) (append$ ?v2 ?v3)) (exists ((?v4 A_list$)) (or (and (= ?v0 (append$ ?v2 ?v4)) (= (append$ ?v4 ?v1) ?v3)) (and (= (append$ ?v0 ?v4) ?v2) (= ?v1 (append$ ?v4 ?v3))))))) :named a9))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$) (?v4 A_list$)) (=> (and (= (append$ ?v0 ?v1) ?v2) (= ?v3 (append$ ?v1 ?v4))) (= (append$ ?v0 ?v3) (append$ ?v2 ?v4)))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (not (= (cons$ ?v0 ?v1) ?v1))) :named a11))
(assert (! (forall ((?v0 A_a_list_fun$) (?v1 A$) (?v2 A_list$)) (! (= (maps$ ?v0 (cons$ ?v1 ?v2)) (append$ (fun_app$ ?v0 ?v1) (maps$ ?v0 ?v2))) :pattern ((maps$ ?v0 (cons$ ?v1 ?v2))))) :named a12))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 Color$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$)) (= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4) (branch$ ?v5 ?v6 ?v7 ?v8 ?v9)) (and (= ?v0 ?v5) (and (= ?v1 ?v6) (and (= ?v2 ?v7) (and (= ?v3 ?v8) (= ?v4 ?v9))))))) :named a13))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 B_bool_fun$) (?v2 Color$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$)) (! (= (pred_rbt$ ?v0 ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6)) (and (pred_rbt$ ?v0 ?v1 ?v3) (and (fun_app$a ?v0 ?v4) (and (fun_app$b ?v1 ?v5) (pred_rbt$ ?v0 ?v1 ?v6))))) :pattern ((pred_rbt$ ?v0 ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6))))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 A$)) (! (= (fun_app$a (member$ (cons$ ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$a (member$ ?v1) ?v2))) :pattern ((fun_app$a (member$ (cons$ ?v0 ?v1)) ?v2)))) :named a15))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_list$) (?v4 A_list$) (?v5 A_list$)) (=> (fun_app$a (fun_app$c ?v0 ?v1) ?v2) (lexordp$ ?v0 (append$ ?v3 (cons$ ?v1 ?v4)) (append$ ?v3 (cons$ ?v2 ?v5))))) :named a16))
(check-sat)
;(get-unsat-core)
