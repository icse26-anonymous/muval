; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 24
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_b_b_fun_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_b_b_fun_fun_fun$ 0)
(declare-sort A_b_rbt_a_b_rbt_fun$ 0)
(declare-datatypes () ((Color$ (r$) (b$))
  (A_b_rbt$ (empty$) (branch$ (select$ Color$) (selecta$ A_b_rbt$) (selectb$ A$) (selectc$ B$) (selectd$ A_b_rbt$)))))
(declare-fun a$ () A_b_rbt$)
(declare-fun k$ () A$)
(declare-fun x$ () B$)
(declare-fun b$a () A_b_rbt$)
(declare-fun inv1$ (A_b_rbt$) Bool)
(declare-fun inv2$ (A_b_rbt$) Bool)
(declare-fun inv1l$ (A_b_rbt$) Bool)
(declare-fun paint$ (Color$) A_b_rbt_a_b_rbt_fun$)
(declare-fun balance$ (A_b_rbt$ A$ B$) A_b_rbt_a_b_rbt_fun$)
(declare-fun fun_app$ (A_b_rbt_a_b_rbt_fun$ A_b_rbt$) A_b_rbt$)
(declare-fun rbt_ins$ (A_a_bool_fun_fun$ A_b_b_b_fun_fun_fun$ A$ B$ A_b_rbt$) A_b_rbt$)
(declare-fun color_of$ (A_b_rbt$) Color$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$c (B_b_fun$ B$) B$)
(declare-fun fun_app$d (B_b_b_fun_fun$ B$) B_b_fun$)
(declare-fun fun_app$e (A_b_b_b_fun_fun_fun$ A$) B_b_b_fun_fun$)
(declare-fun balance_left$ (A_b_rbt$ A$ B$) A_b_rbt_a_b_rbt_fun$)
(declare-fun balance_right$ (A_b_rbt$ A$ B$ A_b_rbt$) A_b_rbt$)
(assert (! (not (inv1$ (balance_right$ a$ k$ x$ b$a))) :named a0))
(assert (! (inv1$ a$) :named a1))
(assert (! (inv1l$ b$a) :named a2))
(assert (! (= (color_of$ a$) b$) :named a3))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$)) (=> (and (inv1l$ ?v0) (and (inv1$ ?v1) (= (color_of$ ?v1) b$))) (inv1$ (fun_app$ (balance_left$ ?v0 ?v2 ?v3) ?v1)))) :named a4))
(assert (! (forall ((?v0 A_b_rbt$)) (=> (inv1l$ ?v0) (inv1$ (fun_app$ (paint$ b$) ?v0)))) :named a5))
(assert (! (forall ((?v0 A_b_rbt$)) (= (color_of$ (fun_app$ (paint$ b$) ?v0)) b$)) :named a6))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$)) (=> (and (inv1l$ ?v0) (inv1$ ?v1)) (inv1l$ (fun_app$ (balance_left$ ?v0 ?v2 ?v3) ?v1)))) :named a7))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (! (= (inv1$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) (and (inv1$ ?v1) (and (inv1$ ?v4) (or (= ?v0 b$) (and (= (color_of$ ?v1) b$) (= (color_of$ ?v4) b$)))))) :pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a8))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$)) (=> (and (inv1l$ ?v0) (inv1l$ ?v1)) (inv1$ (fun_app$ (balance$ ?v0 ?v2 ?v3) ?v1)))) :named a9))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (! (= (inv1l$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) (and (inv1$ ?v1) (inv1$ ?v4))) :pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a10))
(assert (! (= (color_of$ empty$) b$) :named a11))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_a_bool_fun_fun$) (?v2 A_b_b_b_fun_fun_fun$) (?v3 A$) (?v4 B$)) (=> (and (inv1$ ?v0) (and (inv2$ ?v0) (= (color_of$ ?v0) b$))) (inv1$ (rbt_ins$ ?v1 ?v2 ?v3 ?v4 ?v0)))) :named a12))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 Color$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$)) (= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4) (branch$ ?v5 ?v6 ?v7 ?v8 ?v9)) (and (= ?v0 ?v5) (and (= ?v1 ?v6) (and (= ?v2 ?v7) (and (= ?v3 ?v8) (= ?v4 ?v9))))))) :named a13))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 A$) (?v6 B$) (?v7 A_b_rbt$) (?v8 A$) (?v9 B$) (?v10 A_b_rbt$) (?v11 A$) (?v12 B$)) (! (= (fun_app$ (balance$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10)) ?v11 ?v12) empty$) (branch$ b$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10)) ?v11 ?v12 empty$)) :pattern ((balance$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10)) ?v11 ?v12)))) :named a14))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 A$) (?v6 B$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$) (?v10 A$) (?v11 B$) (?v12 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 empty$) ?v7 ?v8) (branch$ b$ ?v9 ?v10 ?v11 ?v12)) (branch$ b$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 empty$) ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12))) :pattern ((fun_app$ (balance$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 empty$) ?v7 ?v8) (branch$ b$ ?v9 ?v10 ?v11 ?v12))))) :named a15))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 A$) (?v6 B$) (?v7 A$) (?v8 B$)) (! (= (fun_app$ (balance$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 empty$) ?v7 ?v8) empty$) (branch$ b$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 empty$) ?v7 ?v8 empty$)) :pattern ((balance$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 empty$) ?v7 ?v8)))) :named a16))
(assert (! (forall ((?v0 Color$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$) (?v10 A$) (?v11 B$) (?v12 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ ?v0 empty$ ?v1 ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6)) ?v7 ?v8) (branch$ b$ ?v9 ?v10 ?v11 ?v12)) (branch$ b$ (branch$ ?v0 empty$ ?v1 ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6)) ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12))) :pattern ((fun_app$ (balance$ (branch$ ?v0 empty$ ?v1 ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6)) ?v7 ?v8) (branch$ b$ ?v9 ?v10 ?v11 ?v12))))) :named a17))
(assert (! (forall ((?v0 Color$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$)) (! (= (fun_app$ (balance$ (branch$ ?v0 empty$ ?v1 ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6)) ?v7 ?v8) empty$) (branch$ b$ (branch$ ?v0 empty$ ?v1 ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6)) ?v7 ?v8 empty$)) :pattern ((balance$ (branch$ ?v0 empty$ ?v1 ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6)) ?v7 ?v8)))) :named a18))
(assert (! (forall ((?v0 Color$) (?v1 A$) (?v2 B$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$) (?v6 A$) (?v7 B$) (?v8 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ ?v0 empty$ ?v1 ?v2 empty$) ?v3 ?v4) (branch$ b$ ?v5 ?v6 ?v7 ?v8)) (branch$ b$ (branch$ ?v0 empty$ ?v1 ?v2 empty$) ?v3 ?v4 (branch$ b$ ?v5 ?v6 ?v7 ?v8))) :pattern ((fun_app$ (balance$ (branch$ ?v0 empty$ ?v1 ?v2 empty$) ?v3 ?v4) (branch$ b$ ?v5 ?v6 ?v7 ?v8))))) :named a19))
(assert (! (forall ((?v0 Color$) (?v1 A$) (?v2 B$) (?v3 A$) (?v4 B$)) (! (= (fun_app$ (balance$ (branch$ ?v0 empty$ ?v1 ?v2 empty$) ?v3 ?v4) empty$) (branch$ b$ (branch$ ?v0 empty$ ?v1 ?v2 empty$) ?v3 ?v4 empty$)) :pattern ((balance$ (branch$ ?v0 empty$ ?v1 ?v2 empty$) ?v3 ?v4)))) :named a20))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$)) (! (= (fun_app$ (balance$ (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 ?v6) ?v7 ?v8) empty$) (branch$ b$ (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 ?v6) ?v7 ?v8 empty$)) :pattern ((balance$ (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 ?v6) ?v7 ?v8)))) :named a21))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 Color$) (?v7 A_b_rbt$) (?v8 A$) (?v9 B$) (?v10 A_b_rbt$) (?v11 A$) (?v12 B$)) (! (= (fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10) ?v11 ?v12 empty$)) (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 (branch$ ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10) ?v11 ?v12 empty$))) :pattern ((fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10) ?v11 ?v12 empty$))))) :named a22))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 Color$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$) (?v10 A$) (?v11 B$) (?v12 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ ?v6 empty$ ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12))) (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 (branch$ ?v6 empty$ ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12)))) :pattern ((fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ ?v6 empty$ ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12)))))) :named a23))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 Color$) (?v7 A$) (?v8 B$)) (! (= (fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ ?v6 empty$ ?v7 ?v8 empty$)) (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 (branch$ ?v6 empty$ ?v7 ?v8 empty$))) :pattern ((fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ ?v6 empty$ ?v7 ?v8 empty$))))) :named a24))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$)) (! (= (fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ b$ ?v6 ?v7 ?v8 empty$)) (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 (branch$ b$ ?v6 ?v7 ?v8 empty$))) :pattern ((fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ b$ ?v6 ?v7 ?v8 empty$))))) :named a25))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$)) (! (= (fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) empty$) (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 empty$)) :pattern ((balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5)))) :named a26))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$) (?v6 A$) (?v7 B$) (?v8 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ b$ empty$ ?v0 ?v1 ?v2) ?v3 ?v4) (branch$ b$ ?v5 ?v6 ?v7 ?v8)) (branch$ b$ (branch$ b$ empty$ ?v0 ?v1 ?v2) ?v3 ?v4 (branch$ b$ ?v5 ?v6 ?v7 ?v8))) :pattern ((fun_app$ (balance$ (branch$ b$ empty$ ?v0 ?v1 ?v2) ?v3 ?v4) (branch$ b$ ?v5 ?v6 ?v7 ?v8))))) :named a27))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$)) (! (= (fun_app$ (balance$ (branch$ b$ empty$ ?v0 ?v1 ?v2) ?v3 ?v4) empty$) (branch$ b$ (branch$ b$ empty$ ?v0 ?v1 ?v2) ?v3 ?v4 empty$)) :pattern ((balance$ (branch$ b$ empty$ ?v0 ?v1 ?v2) ?v3 ?v4)))) :named a28))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 Color$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$) (?v10 A$) (?v11 B$) (?v12 A_b_rbt$)) (! (= (fun_app$ (balance$ empty$ ?v0 ?v1) (branch$ ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6) ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12))) (branch$ b$ empty$ ?v0 ?v1 (branch$ ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6) ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12)))) :pattern ((fun_app$ (balance$ empty$ ?v0 ?v1) (branch$ ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6) ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12)))))) :named a29))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 Color$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$)) (! (= (fun_app$ (balance$ empty$ ?v0 ?v1) (branch$ ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6) ?v7 ?v8 empty$)) (branch$ b$ empty$ ?v0 ?v1 (branch$ ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6) ?v7 ?v8 empty$))) :pattern ((fun_app$ (balance$ empty$ ?v0 ?v1) (branch$ ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6) ?v7 ?v8 empty$))))) :named a30))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 Color$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$) (?v6 A$) (?v7 B$) (?v8 A_b_rbt$)) (! (= (fun_app$ (balance$ empty$ ?v0 ?v1) (branch$ ?v2 empty$ ?v3 ?v4 (branch$ b$ ?v5 ?v6 ?v7 ?v8))) (branch$ b$ empty$ ?v0 ?v1 (branch$ ?v2 empty$ ?v3 ?v4 (branch$ b$ ?v5 ?v6 ?v7 ?v8)))) :pattern ((fun_app$ (balance$ empty$ ?v0 ?v1) (branch$ ?v2 empty$ ?v3 ?v4 (branch$ b$ ?v5 ?v6 ?v7 ?v8)))))) :named a31))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 Color$) (?v3 A$) (?v4 B$)) (! (= (fun_app$ (balance$ empty$ ?v0 ?v1) (branch$ ?v2 empty$ ?v3 ?v4 empty$)) (branch$ b$ empty$ ?v0 ?v1 (branch$ ?v2 empty$ ?v3 ?v4 empty$))) :pattern ((fun_app$ (balance$ empty$ ?v0 ?v1) (branch$ ?v2 empty$ ?v3 ?v4 empty$))))) :named a32))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$) (?v6 A$) (?v7 B$) (?v8 A_b_rbt$)) (! (= (fun_app$ (balance$ empty$ ?v0 ?v1) (branch$ b$ ?v2 ?v3 ?v4 (branch$ b$ ?v5 ?v6 ?v7 ?v8))) (branch$ b$ empty$ ?v0 ?v1 (branch$ b$ ?v2 ?v3 ?v4 (branch$ b$ ?v5 ?v6 ?v7 ?v8)))) :pattern ((fun_app$ (balance$ empty$ ?v0 ?v1) (branch$ b$ ?v2 ?v3 ?v4 (branch$ b$ ?v5 ?v6 ?v7 ?v8)))))) :named a33))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$)) (! (= (fun_app$ (balance$ empty$ ?v0 ?v1) (branch$ b$ ?v2 ?v3 ?v4 ?v5)) (branch$ b$ empty$ ?v0 ?v1 (branch$ b$ ?v2 ?v3 ?v4 ?v5))) :pattern ((fun_app$ (balance$ empty$ ?v0 ?v1) (branch$ b$ ?v2 ?v3 ?v4 ?v5))))) :named a34))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$)) (! (= (fun_app$ (balance$ empty$ ?v0 ?v1) (branch$ b$ ?v2 ?v3 ?v4 empty$)) (branch$ b$ empty$ ?v0 ?v1 (branch$ b$ ?v2 ?v3 ?v4 empty$))) :pattern ((fun_app$ (balance$ empty$ ?v0 ?v1) (branch$ b$ ?v2 ?v3 ?v4 empty$))))) :named a35))
(assert (! (forall ((?v0 A$) (?v1 B$)) (! (= (fun_app$ (balance$ empty$ ?v0 ?v1) empty$) (branch$ b$ empty$ ?v0 ?v1 empty$)) :pattern ((balance$ empty$ ?v0 ?v1)))) :named a36))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_b_b_b_fun_fun_fun$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 A$) (?v6 B$) (?v7 A_b_rbt$)) (! (= (rbt_ins$ ?v0 ?v1 ?v2 ?v3 (branch$ b$ ?v4 ?v5 ?v6 ?v7)) (ite (fun_app$a (fun_app$b ?v0 ?v2) ?v5) (fun_app$ (balance$ (rbt_ins$ ?v0 ?v1 ?v2 ?v3 ?v4) ?v5 ?v6) ?v7) (ite (fun_app$a (fun_app$b ?v0 ?v5) ?v2) (fun_app$ (balance$ ?v4 ?v5 ?v6) (rbt_ins$ ?v0 ?v1 ?v2 ?v3 ?v7)) (branch$ b$ ?v4 ?v5 (fun_app$c (fun_app$d (fun_app$e ?v1 ?v2) ?v6) ?v3) ?v7)))) :pattern ((rbt_ins$ ?v0 ?v1 ?v2 ?v3 (branch$ b$ ?v4 ?v5 ?v6 ?v7))))) :named a37))
(assert (! (forall ((?v0 Color$) (?v1 Color$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$)) (! (= (fun_app$ (paint$ ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5)) (branch$ ?v0 ?v2 ?v3 ?v4 ?v5)) :pattern ((fun_app$ (paint$ ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5))))) :named a38))
(assert (! (= (inv2$ empty$) true) :named a39))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$)) (! (= (fun_app$ (balance_left$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) empty$) empty$) :pattern ((balance_left$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5)))) :named a40))
(assert (! (forall ((?v0 A$) (?v1 B$)) (! (= (fun_app$ (balance_left$ empty$ ?v0 ?v1) empty$) empty$) :pattern ((balance_left$ empty$ ?v0 ?v1)))) :named a41))
(assert (! (forall ((?v0 Color$)) (! (= (fun_app$ (paint$ ?v0) empty$) empty$) :pattern ((paint$ ?v0)))) :named a42))
(assert (! (forall ((?v0 A_b_rbt$)) (=> (and (=> (= ?v0 empty$) false) (forall ((?v1 Color$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$)) (=> (= ?v0 (branch$ ?v1 ?v2 ?v3 ?v4 ?v5)) false))) false)) :named a43))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 Color$)) (=> (inv2$ ?v0) (inv2$ (fun_app$ (paint$ ?v1) ?v0)))) :named a44))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (not (= empty$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a45))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ b$ ?v6 ?v7 ?v8 ?v9)) (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 (branch$ b$ ?v6 ?v7 ?v8 ?v9))) :pattern ((fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ b$ ?v6 ?v7 ?v8 ?v9))))) :named a46))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ b$ ?v6 ?v7 ?v8 ?v9)) (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 (branch$ b$ ?v6 ?v7 ?v8 ?v9))) :pattern ((fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ b$ ?v6 ?v7 ?v8 ?v9))))) :named a47))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$) (?v10 A$) (?v11 B$) (?v12 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ b$ ?v6 ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12))) (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 (branch$ b$ ?v6 ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12)))) :pattern ((fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ b$ ?v6 ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12)))))) :named a48))
(check-sat)
;(get-unsat-core)
