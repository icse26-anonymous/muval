; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 145
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_rbt_a_b_rbt_fun$ 0)
(declare-datatypes () ((Color$ (r$) (b$))
  (A_b_rbt$ (empty$) (branch$ (select$ Color$) (selecta$ A_b_rbt$) (selectb$ A$) (selectc$ B$) (selectd$ A_b_rbt$)))
  (A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun c$ () Color$)
(declare-fun t$ () A_b_rbt$)
(declare-fun inv2$ (A_b_rbt$) Bool)
(declare-fun less$ () A_a_bool_fun_fun$)
(declare-fun inv1l$ (A_b_rbt$) Bool)
(declare-fun paint$ (Color$) A_b_rbt_a_b_rbt_fun$)
(declare-fun is_rbt$ (A_a_bool_fun_fun$ A_b_rbt$) Bool)
(declare-fun member$ (A$ A_set$) Bool)
(declare-fun fun_app$ (A_b_rbt_a_b_rbt_fun$ A_b_rbt$) A_b_rbt$)
(declare-fun lexordp$ (A_a_bool_fun_fun$ A_list$ A_list$) Bool)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun lessThan$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun lexordp_eq$ (A_a_bool_fun_fun$ A_list$ A_list$) Bool)
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$ A_b_rbt$) Bool)
(declare-fun greaterThan$ (A_a_bool_fun_fun$ A$) A_set$)
(declare-fun greaterThanLessThan$ (A_a_bool_fun_fun$ A$ A$) A_set$)
(assert (! (not (rbt_sorted$ less$ (fun_app$ (paint$ c$) t$))) :named a0))
(assert (! (rbt_sorted$ less$ t$) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$b less$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$a (fun_app$b less$ ?v0) ?v2))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (= ?v0 ?v1) (fun_app$a (fun_app$b less$ ?v1) ?v2)) (fun_app$a (fun_app$b less$ ?v0) ?v2))) :named a3))
(assert (! (forall ((?v0 A_b_rbt$)) (=> (is_rbt$ less$ ?v0) (rbt_sorted$ less$ ?v0))) :named a4))
(assert (! (= (rbt_sorted$ less$ empty$) true) :named a5))
(assert (! (forall ((?v0 A_list$)) (lexordp_eq$ less$ ?v0 ?v0)) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (= (member$ ?v0 (greaterThanLessThan$ less$ ?v1 ?v2)) (and (fun_app$a (fun_app$b less$ ?v1) ?v0) (fun_app$a (fun_app$b less$ ?v0) ?v2)))) :named a7))
(assert (! (forall ((?v0 A_list$)) (=> (forall ((?v1 A$)) (not (fun_app$a (fun_app$b less$ ?v1) ?v1))) (not (lexordp$ less$ ?v0 ?v0)))) :named a8))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_b_rbt$)) (=> (is_rbt$ ?v0 ?v1) (rbt_sorted$ ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (member$ ?v0 (lessThan$ less$ ?v1)) (fun_app$a (fun_app$b less$ ?v0) ?v1))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (member$ ?v0 (greaterThan$ less$ ?v1)) (fun_app$a (fun_app$b less$ ?v1) ?v0))) :named a11))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 Color$)) (=> (inv1l$ ?v0) (inv1l$ (fun_app$ (paint$ ?v1) ?v0)))) :named a12))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 Color$)) (=> (inv2$ ?v0) (inv2$ (fun_app$ (paint$ ?v1) ?v0)))) :named a13))
(assert (! (is_rbt$ less$ empty$) :named a14))
(assert (! (forall ((?v0 Color$)) (! (= (fun_app$ (paint$ ?v0) empty$) empty$) :pattern ((paint$ ?v0)))) :named a15))
(assert (! (forall ((?v0 Color$) (?v1 Color$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$)) (! (= (fun_app$ (paint$ ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5)) (branch$ ?v0 ?v2 ?v3 ?v4 ?v5)) :pattern ((fun_app$ (paint$ ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5))))) :named a16))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (=> (lexordp$ less$ ?v0 ?v1) (lexordp_eq$ less$ ?v0 ?v1))) :named a17))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 Color$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$)) (= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4) (branch$ ?v5 ?v6 ?v7 ?v8 ?v9)) (and (= ?v0 ?v5) (and (= ?v1 ?v6) (and (= ?v2 ?v7) (and (= ?v3 ?v8) (= ?v4 ?v9))))))) :named a18))
(check-sat)
;(get-unsat-core)
