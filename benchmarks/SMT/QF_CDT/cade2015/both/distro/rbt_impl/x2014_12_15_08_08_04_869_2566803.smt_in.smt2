; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 67
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_b_b_fun_fun_fun$ 0)
(declare-sort A_b_rbt_a_b_rbt_fun$ 0)
(declare-datatypes () ((Color$ (r$) (b$))
  (A_b_rbt$ (empty$) (branch$ (select$ Color$) (selecta$ A_b_rbt$) (selectb$ A$) (selectc$ B$) (selectd$ A_b_rbt$)))))
(declare-fun k$ () A$)
(declare-fun v$ () B$)
(declare-fun lt$ () A_b_rbt$)
(declare-fun rt$ () A_b_rbt$)
(declare-fun one$ () Nat$)
(declare-fun inv1$ (A_b_rbt$) Bool)
(declare-fun inv2$ (A_b_rbt$) Bool)
(declare-fun plus$ (Nat$ Nat$) Nat$)
(declare-fun paint$ (Color$ A_b_rbt$) A_b_rbt$)
(declare-fun balance$ (A_b_rbt$ A$ B$) A_b_rbt_a_b_rbt_fun$)
(declare-fun bheight$ (A_b_rbt$) Nat$)
(declare-fun fun_app$ (A_b_rbt_a_b_rbt_fun$ A_b_rbt$) A_b_rbt$)
(declare-fun rbt_ins$ (A_a_bool_fun_fun$ A_b_b_b_fun_fun_fun$ A$ B$ A_b_rbt$) A_b_rbt$)
(declare-fun color_of$ (A_b_rbt$) Color$)
(declare-fun balance_left$ (A_b_rbt$ A$ B$) A_b_rbt_a_b_rbt_fun$)
(assert (! (not (inv2$ (fun_app$ (balance_left$ lt$ k$ v$) rt$))) :named a0))
(assert (! (= (color_of$ rt$) b$) :named a1))
(assert (! (inv2$ rt$) :named a2))
(assert (! (inv2$ lt$) :named a3))
(assert (! (= (plus$ (bheight$ lt$) one$) (bheight$ rt$)) :named a4))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 Color$)) (=> (inv2$ ?v0) (inv2$ (paint$ ?v1 ?v0)))) :named a5))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$)) (=> (and (inv2$ ?v0) (and (inv2$ ?v1) (and (= (plus$ (bheight$ ?v0) one$) (bheight$ ?v1)) (inv1$ ?v1)))) (= (bheight$ (fun_app$ (balance_left$ ?v0 ?v2 ?v3) ?v1)) (plus$ (bheight$ ?v0) one$)))) :named a6))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$)) (=> (and (inv2$ ?v0) (and (inv2$ ?v1) (and (= (plus$ (bheight$ ?v0) one$) (bheight$ ?v1)) (inv1$ ?v1)))) (inv2$ (fun_app$ (balance_left$ ?v0 ?v2 ?v3) ?v1)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 B$)) (! (= (fun_app$ (balance_left$ empty$ ?v0 ?v1) empty$) empty$) :pattern ((balance_left$ empty$ ?v0 ?v1)))) :named a8))
(assert (! (= (inv2$ empty$) true) :named a9))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$)) (=> (and (inv2$ ?v0) (and (inv2$ ?v1) (= (bheight$ ?v0) (bheight$ ?v1)))) (inv2$ (fun_app$ (balance$ ?v0 ?v2 ?v3) ?v1)))) :named a10))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (! (= (inv2$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) (and (inv2$ ?v1) (and (inv2$ ?v4) (= (bheight$ ?v1) (bheight$ ?v4))))) :pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a11))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_a_bool_fun_fun$) (?v2 A_b_b_b_fun_fun_fun$) (?v3 A$) (?v4 B$)) (=> (and (inv1$ ?v0) (inv2$ ?v0)) (inv2$ (rbt_ins$ ?v1 ?v2 ?v3 ?v4 ?v0)))) :named a12))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_a_bool_fun_fun$) (?v2 A_b_b_b_fun_fun_fun$) (?v3 A$) (?v4 B$)) (=> (and (inv1$ ?v0) (inv2$ ?v0)) (= (bheight$ (rbt_ins$ ?v1 ?v2 ?v3 ?v4 ?v0)) (bheight$ ?v0)))) :named a13))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_a_bool_fun_fun$) (?v2 A_b_b_b_fun_fun_fun$) (?v3 A$) (?v4 B$)) (=> (and (inv1$ ?v0) (and (inv2$ ?v0) (= (color_of$ ?v0) b$))) (inv1$ (rbt_ins$ ?v1 ?v2 ?v3 ?v4 ?v0)))) :named a14))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 Color$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$)) (= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4) (branch$ ?v5 ?v6 ?v7 ?v8 ?v9)) (and (= ?v0 ?v5) (and (= ?v1 ?v6) (and (= ?v2 ?v7) (and (= ?v3 ?v8) (= ?v4 ?v9))))))) :named a15))
(assert (! (forall ((?v0 A_b_rbt$)) (= (color_of$ (paint$ b$ ?v0)) b$)) :named a16))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 A$) (?v6 B$) (?v7 A_b_rbt$) (?v8 A$) (?v9 B$) (?v10 A_b_rbt$) (?v11 A$) (?v12 B$) (?v13 A_b_rbt$) (?v14 A$) (?v15 B$) (?v16 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10)) ?v11 ?v12) (branch$ b$ ?v13 ?v14 ?v15 ?v16)) (branch$ b$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10)) ?v11 ?v12 (branch$ b$ ?v13 ?v14 ?v15 ?v16))) :pattern ((fun_app$ (balance$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10)) ?v11 ?v12) (branch$ b$ ?v13 ?v14 ?v15 ?v16))))) :named a17))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 A$) (?v6 B$) (?v7 A_b_rbt$) (?v8 A$) (?v9 B$) (?v10 A_b_rbt$) (?v11 A$) (?v12 B$)) (! (= (fun_app$ (balance$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10)) ?v11 ?v12) empty$) (branch$ b$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10)) ?v11 ?v12 empty$)) :pattern ((balance$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10)) ?v11 ?v12)))) :named a18))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 A$) (?v6 B$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$) (?v10 A$) (?v11 B$) (?v12 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 empty$) ?v7 ?v8) (branch$ b$ ?v9 ?v10 ?v11 ?v12)) (branch$ b$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 empty$) ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12))) :pattern ((fun_app$ (balance$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 empty$) ?v7 ?v8) (branch$ b$ ?v9 ?v10 ?v11 ?v12))))) :named a19))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 A$) (?v6 B$) (?v7 A$) (?v8 B$)) (! (= (fun_app$ (balance$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 empty$) ?v7 ?v8) empty$) (branch$ b$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 empty$) ?v7 ?v8 empty$)) :pattern ((balance$ (branch$ ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4) ?v5 ?v6 empty$) ?v7 ?v8)))) :named a20))
(assert (! (forall ((?v0 Color$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$) (?v10 A$) (?v11 B$) (?v12 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ ?v0 empty$ ?v1 ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6)) ?v7 ?v8) (branch$ b$ ?v9 ?v10 ?v11 ?v12)) (branch$ b$ (branch$ ?v0 empty$ ?v1 ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6)) ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12))) :pattern ((fun_app$ (balance$ (branch$ ?v0 empty$ ?v1 ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6)) ?v7 ?v8) (branch$ b$ ?v9 ?v10 ?v11 ?v12))))) :named a21))
(assert (! (forall ((?v0 Color$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$)) (! (= (fun_app$ (balance$ (branch$ ?v0 empty$ ?v1 ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6)) ?v7 ?v8) empty$) (branch$ b$ (branch$ ?v0 empty$ ?v1 ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6)) ?v7 ?v8 empty$)) :pattern ((balance$ (branch$ ?v0 empty$ ?v1 ?v2 (branch$ b$ ?v3 ?v4 ?v5 ?v6)) ?v7 ?v8)))) :named a22))
(assert (! (forall ((?v0 Color$) (?v1 A$) (?v2 B$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$) (?v6 A$) (?v7 B$) (?v8 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ ?v0 empty$ ?v1 ?v2 empty$) ?v3 ?v4) (branch$ b$ ?v5 ?v6 ?v7 ?v8)) (branch$ b$ (branch$ ?v0 empty$ ?v1 ?v2 empty$) ?v3 ?v4 (branch$ b$ ?v5 ?v6 ?v7 ?v8))) :pattern ((fun_app$ (balance$ (branch$ ?v0 empty$ ?v1 ?v2 empty$) ?v3 ?v4) (branch$ b$ ?v5 ?v6 ?v7 ?v8))))) :named a23))
(assert (! (forall ((?v0 Color$) (?v1 A$) (?v2 B$) (?v3 A$) (?v4 B$)) (! (= (fun_app$ (balance$ (branch$ ?v0 empty$ ?v1 ?v2 empty$) ?v3 ?v4) empty$) (branch$ b$ (branch$ ?v0 empty$ ?v1 ?v2 empty$) ?v3 ?v4 empty$)) :pattern ((balance$ (branch$ ?v0 empty$ ?v1 ?v2 empty$) ?v3 ?v4)))) :named a24))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$) (?v10 A$) (?v11 B$) (?v12 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 ?v6) ?v7 ?v8) (branch$ b$ ?v9 ?v10 ?v11 ?v12)) (branch$ b$ (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 ?v6) ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12))) :pattern ((fun_app$ (balance$ (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 ?v6) ?v7 ?v8) (branch$ b$ ?v9 ?v10 ?v11 ?v12))))) :named a25))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$)) (! (= (fun_app$ (balance$ (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 ?v6) ?v7 ?v8) empty$) (branch$ b$ (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 ?v6) ?v7 ?v8 empty$)) :pattern ((balance$ (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 ?v6) ?v7 ?v8)))) :named a26))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 Color$) (?v7 A_b_rbt$) (?v8 A$) (?v9 B$) (?v10 A_b_rbt$) (?v11 A$) (?v12 B$) (?v13 A_b_rbt$) (?v14 A$) (?v15 B$) (?v16 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10) ?v11 ?v12 (branch$ b$ ?v13 ?v14 ?v15 ?v16))) (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 (branch$ ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10) ?v11 ?v12 (branch$ b$ ?v13 ?v14 ?v15 ?v16)))) :pattern ((fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10) ?v11 ?v12 (branch$ b$ ?v13 ?v14 ?v15 ?v16)))))) :named a27))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 Color$) (?v7 A_b_rbt$) (?v8 A$) (?v9 B$) (?v10 A_b_rbt$) (?v11 A$) (?v12 B$)) (! (= (fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10) ?v11 ?v12 empty$)) (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 (branch$ ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10) ?v11 ?v12 empty$))) :pattern ((fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ ?v6 (branch$ b$ ?v7 ?v8 ?v9 ?v10) ?v11 ?v12 empty$))))) :named a28))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 Color$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$) (?v10 A$) (?v11 B$) (?v12 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ ?v6 empty$ ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12))) (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 (branch$ ?v6 empty$ ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12)))) :pattern ((fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ ?v6 empty$ ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12)))))) :named a29))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 Color$) (?v7 A$) (?v8 B$)) (! (= (fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ ?v6 empty$ ?v7 ?v8 empty$)) (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 (branch$ ?v6 empty$ ?v7 ?v8 empty$))) :pattern ((fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ ?v6 empty$ ?v7 ?v8 empty$))))) :named a30))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$) (?v10 A$) (?v11 B$) (?v12 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ b$ ?v6 ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12))) (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 (branch$ b$ ?v6 ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12)))) :pattern ((fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ b$ ?v6 ?v7 ?v8 (branch$ b$ ?v9 ?v10 ?v11 ?v12)))))) :named a31))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ b$ ?v6 ?v7 ?v8 ?v9)) (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 (branch$ b$ ?v6 ?v7 ?v8 ?v9))) :pattern ((fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ b$ ?v6 ?v7 ?v8 ?v9))))) :named a32))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$)) (! (= (fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ b$ ?v6 ?v7 ?v8 ?v9)) (branch$ b$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5 (branch$ b$ ?v6 ?v7 ?v8 ?v9))) :pattern ((fun_app$ (balance$ (branch$ b$ ?v0 ?v1 ?v2 ?v3) ?v4 ?v5) (branch$ b$ ?v6 ?v7 ?v8 ?v9))))) :named a33))
(check-sat)
;(get-unsat-core)
