; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 48
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort Nat$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort B_c_fun$ 0)
(declare-sort C_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_b_b_fun_fun$ 0)
(declare-sort A_b_c_fun_fun$ 0)
(declare-sort A_c_b_fun_fun$ 0)
(declare-sort A_c_c_fun_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_b_b_fun_fun_fun$ 0)
(declare-sort A_b_rbt_a_b_rbt_fun$ 0)
(declare-sort A_b_rbt_a_c_rbt_fun$ 0)
(declare-sort A_c_c_c_fun_fun_fun$ 0)
(declare-sort A_c_rbt_a_b_rbt_fun$ 0)
(declare-sort A_c_rbt_a_c_rbt_fun$ 0)
(declare-datatypes () ((Color$ (r$) (b$))
  (A_b_rbt$ (empty$) (branch$ (select$ Color$) (selecta$ A_b_rbt$) (selectb$ A$) (selectc$ B$) (selectd$ A_b_rbt$)))
  (A_c_rbt$ (empty$a) (branch$a (selecte$ Color$) (selectf$ A_c_rbt$) (selectg$ A$) (selecth$ C$) (selecti$ A_c_rbt$)))
  (A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))))
(declare-fun f$ () A_c_b_fun_fun$)
(declare-fun t$ () A_c_rbt$)
(declare-fun map$ (A_c_b_fun_fun$) A_c_rbt_a_b_rbt_fun$)
(declare-fun inv1$ (A_b_rbt$) Bool)
(declare-fun inv2$ (A_b_rbt$) Bool)
(declare-fun keys$ (A_b_rbt$) A_list$)
(declare-fun map$a (A_b_b_fun_fun$) A_b_rbt_a_b_rbt_fun$)
(declare-fun map$b (A_b_c_fun_fun$) A_b_rbt_a_c_rbt_fun$)
(declare-fun map$c (A_c_c_fun_fun$) A_c_rbt_a_c_rbt_fun$)
(declare-fun inv1$a (A_c_rbt$) Bool)
(declare-fun inv2$a (A_c_rbt$) Bool)
(declare-fun keys$a (A_c_rbt$) A_list$)
(declare-fun paint$ (Color$) A_b_rbt_a_b_rbt_fun$)
(declare-fun paint$a (Color$) A_c_rbt_a_c_rbt_fun$)
(declare-fun bheight$ (A_b_rbt$) Nat$)
(declare-fun combine$ (A_b_rbt$ A_b_rbt$) A_b_rbt$)
(declare-fun fun_app$ (A_c_rbt_a_b_rbt_fun$ A_c_rbt$) A_b_rbt$)
(declare-fun rbt_ins$ (A_a_bool_fun_fun$ A_b_b_b_fun_fun_fun$ A$ B$ A_b_rbt$) A_b_rbt$)
(declare-fun bheight$a (A_c_rbt$) Nat$)
(declare-fun color_of$ (A_b_rbt$) Color$)
(declare-fun combine$a (A_c_rbt$ A_c_rbt$) A_c_rbt$)
(declare-fun fun_app$a (A_b_rbt_a_b_rbt_fun$ A_b_rbt$) A_b_rbt$)
(declare-fun fun_app$b (A_b_rbt_a_c_rbt_fun$ A_b_rbt$) A_c_rbt$)
(declare-fun fun_app$c (A_c_rbt_a_c_rbt_fun$ A_c_rbt$) A_c_rbt$)
(declare-fun fun_app$d (C_c_fun$ C$) C$)
(declare-fun fun_app$e (A_c_c_fun_fun$ A$) C_c_fun$)
(declare-fun fun_app$f (B_c_fun$ B$) C$)
(declare-fun fun_app$g (A_b_c_fun_fun$ A$) B_c_fun$)
(declare-fun fun_app$h (B_b_fun$ B$) B$)
(declare-fun fun_app$i (A_b_b_fun_fun$ A$) B_b_fun$)
(declare-fun fun_app$j (C_b_fun$ C$) B$)
(declare-fun fun_app$k (A_c_b_fun_fun$ A$) C_b_fun$)
(declare-fun fun_app$l (A_bool_fun$ A$) Bool)
(declare-fun fun_app$m (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun rbt_ins$a (A_a_bool_fun_fun$ A_c_c_c_fun_fun_fun$ A$ C$ A_c_rbt$) A_c_rbt$)
(declare-fun color_of$a (A_c_rbt$) Color$)
(declare-fun rbt_map_entry$ (A_a_bool_fun_fun$ A$ B_b_fun$) A_b_rbt_a_b_rbt_fun$)
(declare-fun rbt_map_entry$a (A_a_bool_fun_fun$ A$ C_c_fun$) A_c_rbt_a_c_rbt_fun$)
(assert (! (not (= (inv2$ (fun_app$ (map$ f$) t$)) (inv2$a t$))) :named a0))
(assert (! (forall ((?v0 A_b_b_fun_fun$) (?v1 A_b_rbt$)) (= (keys$ (fun_app$a (map$a ?v0) ?v1)) (keys$ ?v1))) :named a1))
(assert (! (forall ((?v0 A_b_c_fun_fun$) (?v1 A_b_rbt$)) (= (keys$a (fun_app$b (map$b ?v0) ?v1)) (keys$ ?v1))) :named a2))
(assert (! (forall ((?v0 A_c_c_fun_fun$) (?v1 A_c_rbt$)) (= (keys$a (fun_app$c (map$c ?v0) ?v1)) (keys$a ?v1))) :named a3))
(assert (! (forall ((?v0 A_c_b_fun_fun$) (?v1 A_c_rbt$)) (= (keys$ (fun_app$ (map$ ?v0) ?v1)) (keys$a ?v1))) :named a4))
(assert (! (forall ((?v0 A_b_b_fun_fun$) (?v1 A_b_rbt$)) (= (color_of$ (fun_app$a (map$a ?v0) ?v1)) (color_of$ ?v1))) :named a5))
(assert (! (forall ((?v0 A_b_c_fun_fun$) (?v1 A_b_rbt$)) (= (color_of$a (fun_app$b (map$b ?v0) ?v1)) (color_of$ ?v1))) :named a6))
(assert (! (forall ((?v0 A_c_c_fun_fun$) (?v1 A_c_rbt$)) (= (color_of$a (fun_app$c (map$c ?v0) ?v1)) (color_of$a ?v1))) :named a7))
(assert (! (forall ((?v0 A_c_b_fun_fun$) (?v1 A_c_rbt$)) (= (color_of$ (fun_app$ (map$ ?v0) ?v1)) (color_of$a ?v1))) :named a8))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 B_b_fun$) (?v3 A_b_rbt$)) (= (inv2$ (fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2) ?v3)) (inv2$ ?v3))) :named a9))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 C_c_fun$) (?v3 A_c_rbt$)) (= (inv2$a (fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2) ?v3)) (inv2$a ?v3))) :named a10))
(assert (! (forall ((?v0 A_b_b_fun_fun$) (?v1 A_b_rbt$)) (= (inv1$ (fun_app$a (map$a ?v0) ?v1)) (inv1$ ?v1))) :named a11))
(assert (! (forall ((?v0 A_b_c_fun_fun$) (?v1 A_b_rbt$)) (= (inv1$a (fun_app$b (map$b ?v0) ?v1)) (inv1$ ?v1))) :named a12))
(assert (! (forall ((?v0 A_c_c_fun_fun$) (?v1 A_c_rbt$)) (= (inv1$a (fun_app$c (map$c ?v0) ?v1)) (inv1$a ?v1))) :named a13))
(assert (! (forall ((?v0 A_c_b_fun_fun$) (?v1 A_c_rbt$)) (= (inv1$ (fun_app$ (map$ ?v0) ?v1)) (inv1$a ?v1))) :named a14))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 Color$)) (=> (inv2$ ?v0) (inv2$ (fun_app$a (paint$ ?v1) ?v0)))) :named a15))
(assert (! (forall ((?v0 A_c_rbt$) (?v1 Color$)) (=> (inv2$a ?v0) (inv2$a (fun_app$c (paint$a ?v1) ?v0)))) :named a16))
(assert (! (forall ((?v0 A_c_c_fun_fun$)) (! (= (fun_app$c (map$c ?v0) empty$a) empty$a) :pattern ((map$c ?v0)))) :named a17))
(assert (! (forall ((?v0 A_b_c_fun_fun$)) (! (= (fun_app$b (map$b ?v0) empty$) empty$a) :pattern ((map$b ?v0)))) :named a18))
(assert (! (forall ((?v0 A_b_b_fun_fun$)) (! (= (fun_app$a (map$a ?v0) empty$) empty$) :pattern ((map$a ?v0)))) :named a19))
(assert (! (forall ((?v0 A_c_b_fun_fun$)) (! (= (fun_app$ (map$ ?v0) empty$a) empty$) :pattern ((map$ ?v0)))) :named a20))
(assert (! (forall ((?v0 A_c_c_fun_fun$) (?v1 Color$) (?v2 A_c_rbt$) (?v3 A$) (?v4 C$) (?v5 A_c_rbt$)) (! (= (fun_app$c (map$c ?v0) (branch$a ?v1 ?v2 ?v3 ?v4 ?v5)) (branch$a ?v1 (fun_app$c (map$c ?v0) ?v2) ?v3 (fun_app$d (fun_app$e ?v0 ?v3) ?v4) (fun_app$c (map$c ?v0) ?v5))) :pattern ((fun_app$c (map$c ?v0) (branch$a ?v1 ?v2 ?v3 ?v4 ?v5))))) :named a21))
(assert (! (forall ((?v0 A_b_c_fun_fun$) (?v1 Color$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$)) (! (= (fun_app$b (map$b ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5)) (branch$a ?v1 (fun_app$b (map$b ?v0) ?v2) ?v3 (fun_app$f (fun_app$g ?v0 ?v3) ?v4) (fun_app$b (map$b ?v0) ?v5))) :pattern ((fun_app$b (map$b ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5))))) :named a22))
(assert (! (forall ((?v0 A_b_b_fun_fun$) (?v1 Color$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$)) (! (= (fun_app$a (map$a ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5)) (branch$ ?v1 (fun_app$a (map$a ?v0) ?v2) ?v3 (fun_app$h (fun_app$i ?v0 ?v3) ?v4) (fun_app$a (map$a ?v0) ?v5))) :pattern ((fun_app$a (map$a ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5))))) :named a23))
(assert (! (forall ((?v0 A_c_b_fun_fun$) (?v1 Color$) (?v2 A_c_rbt$) (?v3 A$) (?v4 C$) (?v5 A_c_rbt$)) (! (= (fun_app$ (map$ ?v0) (branch$a ?v1 ?v2 ?v3 ?v4 ?v5)) (branch$ ?v1 (fun_app$ (map$ ?v0) ?v2) ?v3 (fun_app$j (fun_app$k ?v0 ?v3) ?v4) (fun_app$ (map$ ?v0) ?v5))) :pattern ((fun_app$ (map$ ?v0) (branch$a ?v1 ?v2 ?v3 ?v4 ?v5))))) :named a24))
(assert (! (= (inv2$ empty$) true) :named a25))
(assert (! (= (inv2$a empty$a) true) :named a26))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_a_bool_fun_fun$) (?v2 A_b_b_b_fun_fun_fun$) (?v3 A$) (?v4 B$)) (=> (and (inv1$ ?v0) (inv2$ ?v0)) (inv2$ (rbt_ins$ ?v1 ?v2 ?v3 ?v4 ?v0)))) :named a27))
(assert (! (forall ((?v0 A_c_rbt$) (?v1 A_a_bool_fun_fun$) (?v2 A_c_c_c_fun_fun_fun$) (?v3 A$) (?v4 C$)) (=> (and (inv1$a ?v0) (inv2$a ?v0)) (inv2$a (rbt_ins$a ?v1 ?v2 ?v3 ?v4 ?v0)))) :named a28))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_b_rbt$)) (=> (and (inv2$ ?v0) (and (inv2$ ?v1) (= (bheight$ ?v0) (bheight$ ?v1)))) (= (bheight$ (combine$ ?v0 ?v1)) (bheight$ ?v0)))) :named a29))
(assert (! (forall ((?v0 A_c_rbt$) (?v1 A_c_rbt$)) (=> (and (inv2$a ?v0) (and (inv2$a ?v1) (= (bheight$a ?v0) (bheight$a ?v1)))) (= (bheight$a (combine$a ?v0 ?v1)) (bheight$a ?v0)))) :named a30))
(assert (! (forall ((?v0 Color$) (?v1 A_c_rbt$) (?v2 A$) (?v3 C$) (?v4 A_c_rbt$) (?v5 Color$) (?v6 A_c_rbt$) (?v7 A$) (?v8 C$) (?v9 A_c_rbt$)) (= (= (branch$a ?v0 ?v1 ?v2 ?v3 ?v4) (branch$a ?v5 ?v6 ?v7 ?v8 ?v9)) (and (= ?v0 ?v5) (and (= ?v1 ?v6) (and (= ?v2 ?v7) (and (= ?v3 ?v8) (= ?v4 ?v9))))))) :named a31))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 Color$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$)) (= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4) (branch$ ?v5 ?v6 ?v7 ?v8 ?v9)) (and (= ?v0 ?v5) (and (= ?v1 ?v6) (and (= ?v2 ?v7) (and (= ?v3 ?v8) (= ?v4 ?v9))))))) :named a32))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 C_c_fun$) (?v3 Color$) (?v4 A_c_rbt$) (?v5 A$) (?v6 C$) (?v7 A_c_rbt$)) (! (= (fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2) (branch$a ?v3 ?v4 ?v5 ?v6 ?v7)) (ite (fun_app$l (fun_app$m ?v0 ?v1) ?v5) (branch$a ?v3 (fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2) ?v4) ?v5 ?v6 ?v7) (ite (fun_app$l (fun_app$m ?v0 ?v5) ?v1) (branch$a ?v3 ?v4 ?v5 ?v6 (fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2) ?v7)) (branch$a ?v3 ?v4 ?v5 (fun_app$d ?v2 ?v6) ?v7)))) :pattern ((fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2) (branch$a ?v3 ?v4 ?v5 ?v6 ?v7))))) :named a33))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 B_b_fun$) (?v3 Color$) (?v4 A_b_rbt$) (?v5 A$) (?v6 B$) (?v7 A_b_rbt$)) (! (= (fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2) (branch$ ?v3 ?v4 ?v5 ?v6 ?v7)) (ite (fun_app$l (fun_app$m ?v0 ?v1) ?v5) (branch$ ?v3 (fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2) ?v4) ?v5 ?v6 ?v7) (ite (fun_app$l (fun_app$m ?v0 ?v5) ?v1) (branch$ ?v3 ?v4 ?v5 ?v6 (fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2) ?v7)) (branch$ ?v3 ?v4 ?v5 (fun_app$h ?v2 ?v6) ?v7)))) :pattern ((fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2) (branch$ ?v3 ?v4 ?v5 ?v6 ?v7))))) :named a34))
(assert (! (forall ((?v0 Color$) (?v1 Color$) (?v2 A_c_rbt$) (?v3 A$) (?v4 C$) (?v5 A_c_rbt$)) (! (= (fun_app$c (paint$a ?v0) (branch$a ?v1 ?v2 ?v3 ?v4 ?v5)) (branch$a ?v0 ?v2 ?v3 ?v4 ?v5)) :pattern ((fun_app$c (paint$a ?v0) (branch$a ?v1 ?v2 ?v3 ?v4 ?v5))))) :named a35))
(assert (! (forall ((?v0 Color$) (?v1 Color$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$)) (! (= (fun_app$a (paint$ ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5)) (branch$ ?v0 ?v2 ?v3 ?v4 ?v5)) :pattern ((fun_app$a (paint$ ?v0) (branch$ ?v1 ?v2 ?v3 ?v4 ?v5))))) :named a36))
(assert (! (forall ((?v0 Color$) (?v1 A_c_rbt$) (?v2 A$) (?v3 C$) (?v4 A_c_rbt$)) (! (= (combine$a (branch$a ?v0 ?v1 ?v2 ?v3 ?v4) empty$a) (branch$a ?v0 ?v1 ?v2 ?v3 ?v4)) :pattern ((branch$a ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a37))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (! (= (combine$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4) empty$) (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) :pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a38))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 C_c_fun$) (?v3 A_c_rbt$)) (= (inv1$a (fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2) ?v3)) (inv1$a ?v3))) :named a39))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 B_b_fun$) (?v3 A_b_rbt$)) (= (inv1$ (fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2) ?v3)) (inv1$ ?v3))) :named a40))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 C_c_fun$) (?v3 A_c_rbt$)) (= (bheight$a (fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2) ?v3)) (bheight$a ?v3))) :named a41))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 B_b_fun$) (?v3 A_b_rbt$)) (= (bheight$ (fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2) ?v3)) (bheight$ ?v3))) :named a42))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 C_c_fun$) (?v3 A_c_rbt$)) (= (color_of$a (fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2) ?v3)) (color_of$a ?v3))) :named a43))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 B_b_fun$) (?v3 A_b_rbt$)) (= (color_of$ (fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2) ?v3)) (color_of$ ?v3))) :named a44))
(assert (! (forall ((?v0 A_c_rbt$)) (! (= (combine$a empty$a ?v0) ?v0) :pattern ((combine$a empty$a ?v0)))) :named a45))
(assert (! (forall ((?v0 A_b_rbt$)) (! (= (combine$ empty$ ?v0) ?v0) :pattern ((combine$ empty$ ?v0)))) :named a46))
(assert (! (forall ((?v0 Color$) (?v1 A_c_rbt$) (?v2 A$) (?v3 C$) (?v4 A_c_rbt$)) (! (= (color_of$a (branch$a ?v0 ?v1 ?v2 ?v3 ?v4)) ?v0) :pattern ((branch$a ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a47))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (! (= (color_of$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) ?v0) :pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a48))
(assert (! (= (inv1$a empty$a) true) :named a49))
(assert (! (= (inv1$ empty$) true) :named a50))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 C_c_fun$)) (! (= (fun_app$c (rbt_map_entry$a ?v0 ?v1 ?v2) empty$a) empty$a) :pattern ((rbt_map_entry$a ?v0 ?v1 ?v2)))) :named a51))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 B_b_fun$)) (! (= (fun_app$a (rbt_map_entry$ ?v0 ?v1 ?v2) empty$) empty$) :pattern ((rbt_map_entry$ ?v0 ?v1 ?v2)))) :named a52))
(assert (! (forall ((?v0 Color$)) (! (= (fun_app$c (paint$a ?v0) empty$a) empty$a) :pattern ((paint$a ?v0)))) :named a53))
(assert (! (forall ((?v0 Color$)) (! (= (fun_app$a (paint$ ?v0) empty$) empty$) :pattern ((paint$ ?v0)))) :named a54))
(assert (! (forall ((?v0 A_c_rbt$)) (=> (and (=> (= ?v0 empty$a) false) (forall ((?v1 Color$) (?v2 A_c_rbt$) (?v3 A$) (?v4 C$) (?v5 A_c_rbt$)) (=> (= ?v0 (branch$a ?v1 ?v2 ?v3 ?v4 ?v5)) false))) false)) :named a55))
(assert (! (forall ((?v0 A_b_rbt$)) (=> (and (=> (= ?v0 empty$) false) (forall ((?v1 Color$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$)) (=> (= ?v0 (branch$ ?v1 ?v2 ?v3 ?v4 ?v5)) false))) false)) :named a56))
(assert (! (forall ((?v0 Color$) (?v1 A_c_rbt$) (?v2 A$) (?v3 C$) (?v4 A_c_rbt$)) (not (= empty$a (branch$a ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a57))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (not (= empty$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a58))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_a_bool_fun_fun$) (?v2 A_b_b_b_fun_fun_fun$) (?v3 A$) (?v4 B$)) (=> (and (inv1$ ?v0) (inv2$ ?v0)) (= (bheight$ (rbt_ins$ ?v1 ?v2 ?v3 ?v4 ?v0)) (bheight$ ?v0)))) :named a59))
(assert (! (forall ((?v0 A_c_rbt$) (?v1 A_a_bool_fun_fun$) (?v2 A_c_c_c_fun_fun_fun$) (?v3 A$) (?v4 C$)) (=> (and (inv1$a ?v0) (inv2$a ?v0)) (= (bheight$a (rbt_ins$a ?v1 ?v2 ?v3 ?v4 ?v0)) (bheight$a ?v0)))) :named a60))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (! (= (inv2$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) (and (inv2$ ?v1) (and (inv2$ ?v4) (= (bheight$ ?v1) (bheight$ ?v4))))) :pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a61))
(assert (! (forall ((?v0 Color$) (?v1 A_c_rbt$) (?v2 A$) (?v3 C$) (?v4 A_c_rbt$)) (! (= (inv2$a (branch$a ?v0 ?v1 ?v2 ?v3 ?v4)) (and (inv2$a ?v1) (and (inv2$a ?v4) (= (bheight$a ?v1) (bheight$a ?v4))))) :pattern ((branch$a ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a62))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A_b_rbt$)) (=> (and (inv2$ ?v0) (and (inv2$ ?v1) (= (bheight$ ?v0) (bheight$ ?v1)))) (inv2$ (combine$ ?v0 ?v1)))) :named a63))
(assert (! (forall ((?v0 A_c_rbt$) (?v1 A_c_rbt$)) (=> (and (inv2$a ?v0) (and (inv2$a ?v1) (= (bheight$a ?v0) (bheight$a ?v1)))) (inv2$a (combine$a ?v0 ?v1)))) :named a64))
(check-sat)
;(get-unsat-core)
