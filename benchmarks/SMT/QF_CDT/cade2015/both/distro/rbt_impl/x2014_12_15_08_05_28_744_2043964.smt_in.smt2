; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 253
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_rbt_bool_fun$ 0)
(declare-datatypes () ((Color$ (r$) (b$))
  (A_b_rbt$ (empty$) (branch$ (select$ Color$) (selecta$ A_b_rbt$) (selectb$ A$) (selectc$ B$) (selectd$ A_b_rbt$)))))
(declare-fun t$ () A_b_rbt$)
(declare-fun inv1$ (A_b_rbt$) Bool)
(declare-fun inv1l$ (A_b_rbt$) Bool)
(declare-fun fun_app$ (A_bool_fun$ A$) Bool)
(declare-fun color_of$ (A_b_rbt$) Color$)
(declare-fun fun_app$a (B_bool_fun$ B$) Bool)
(declare-fun fun_app$b (A_b_rbt_bool_fun$ A_b_rbt$) Bool)
(declare-fun pred_rbt$ (A_bool_fun$ B_bool_fun$ A_b_rbt$) Bool)
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$) A_b_rbt_bool_fun$)
(assert (! (not (inv1l$ t$)) :named a0))
(assert (! (inv1$ t$) :named a1))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (! (= (inv1l$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) (and (inv1$ ?v1) (inv1$ ?v4))) :pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a2))
(assert (! (= (inv1l$ empty$) true) :named a3))
(assert (! (= (inv1$ empty$) true) :named a4))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (! (= (inv1$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) (and (inv1$ ?v1) (and (inv1$ ?v4) (or (= ?v0 b$) (and (= (color_of$ ?v1) b$) (= (color_of$ ?v4) b$)))))) :pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a5))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 Color$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$)) (= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4) (branch$ ?v5 ?v6 ?v7 ?v8 ?v9)) (and (= ?v0 ?v5) (and (= ?v1 ?v6) (and (= ?v2 ?v7) (and (= ?v3 ?v8) (= ?v4 ?v9))))))) :named a6))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (! (= (color_of$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)) ?v0) :pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a7))
(assert (! (= (color_of$ empty$) b$) :named a8))
(assert (! (forall ((?v0 A_b_rbt$)) (=> (and (=> (= ?v0 empty$) false) (forall ((?v1 Color$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$)) (=> (= ?v0 (branch$ ?v1 ?v2 ?v3 ?v4 ?v5)) false))) false)) :named a9))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (not (= empty$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a10))
(assert (! (forall ((?v0 A_b_rbt$)) (=> (and (=> (= ?v0 empty$) false) (and (forall ((?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (=> (= ?v0 (branch$ r$ ?v1 ?v2 ?v3 ?v4)) false)) (forall ((?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (=> (= ?v0 (branch$ b$ ?v1 ?v2 ?v3 ?v4)) false)))) false)) :named a11))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 B_bool_fun$) (?v2 Color$) (?v3 A_b_rbt$) (?v4 A$) (?v5 B$) (?v6 A_b_rbt$)) (! (= (pred_rbt$ ?v0 ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6)) (and (pred_rbt$ ?v0 ?v1 ?v3) (and (fun_app$ ?v0 ?v4) (and (fun_app$a ?v1 ?v5) (pred_rbt$ ?v0 ?v1 ?v6))))) :pattern ((pred_rbt$ ?v0 ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6))))) :named a12))
(assert (! (forall ((?v0 A_a_bool_fun_fun$)) (! (= (fun_app$b (rbt_sorted$ ?v0) empty$) true) :pattern ((rbt_sorted$ ?v0)))) :named a13))
(assert (! (forall ((?v0 Color$)) (=> (and (=> (= ?v0 r$) false) (=> (= ?v0 b$) false)) false)) :named a14))
(check-sat)
;(get-unsat-core)
