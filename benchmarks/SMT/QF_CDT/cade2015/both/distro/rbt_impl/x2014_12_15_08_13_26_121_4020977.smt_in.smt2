; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 307
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort Nat$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort Nat_bool_fun$ 0)
(declare-sort B_a_b_prod_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort Nat_a_b_prod_fun$ 0)
(declare-sort B_nat_nat_prod_fun$ 0)
(declare-sort A_b_rbt_a_b_rbt_fun$ 0)
(declare-sort A_b_a_b_prod_fun_fun$ 0)
(declare-sort Nat_nat_bool_fun_fun$ 0)
(declare-sort Nat_nat_nat_prod_fun$ 0)
(declare-sort A_b_prod_list_bool_fun$ 0)
(declare-sort A_b_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_a_b_prod_fun_fun$ 0)
(declare-sort B_a_b_rbt_a_b_rbt_fun_fun$ 0)
(declare-sort A_b_prod_list_a_b_prod_fun$ 0)
(declare-sort Nat_nat_nat_nat_prod_fun_fun$ 0)
(declare-sort A_b_prod_list_nat_nat_prod_fun$ 0)
(declare-sort A_b_a_b_rbt_a_b_rbt_fun_fun_fun$ 0)
(declare-sort B_a_b_rbt_a_b_prod_list_prod_fun$ 0)
(declare-sort A_b_rbt_a_b_prod_list_bool_fun_fun$ 0)
(declare-sort Nat_a_b_rbt_a_b_prod_list_prod_fun$ 0)
(declare-sort A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$ 0)
(declare-sort A_b_rbt_a_b_prod_list_a_b_prod_fun_fun$ 0)
(declare-sort A_b_rbt_a_b_prod_list_nat_nat_prod_fun_fun$ 0)
(declare-sort Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$ 0)
(declare-sort A_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun$ 0)
(declare-sort A_b_prod_list_a_b_a_b_rbt_a_b_prod_list_prod_fun_fun_fun$ 0)
(declare-sort A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ 0)
(declare-sort A_b_prod_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ 0)
(declare-datatypes () ((A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))
  (A_b_prod_list$ (nil$) (cons$ (hd$ A_b_prod$) (tl$ A_b_prod_list$)))
  (Color$ (r$) (b$))
  (A_b_rbt$ (empty$) (branch$ (select$ Color$) (selecta$ A_b_rbt$) (selectb$ A$) (selectc$ B$) (selectd$ A_b_rbt$)))
  (A_b_rbt_a_b_prod_list_prod$ (pair$a (fst$a A_b_rbt$) (snd$a A_b_prod_list$)))
  (Nat_nat_prod$ (pair$b (fst$b Nat$) (snd$b Nat$)))
  (Num$ (one$) (bit0$ (selecte$ Num$)) (bit1$ (selectf$ Num$)))))
(declare-fun n$ () Nat$)
(declare-fun uu$ (A_b_rbt$) A_b_a_b_rbt_a_b_rbt_fun_fun_fun$)
(declare-fun div$ (Nat$ Nat$) Nat$)
(declare-fun kvs$ () A_b_prod_list$)
(declare-fun mod$ (Nat$ Nat$) Nat$)
(declare-fun uua$ (Nat$ A_b_rbt$) A_b_prod_list_a_b_a_b_rbt_a_b_prod_list_prod_fun_fun_fun$)
(declare-fun uub$ (Nat$ A_b_rbt$) A_b_prod_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uuc$ (Nat$) A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uud$ () Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uue$ (A_b_prod_list$) A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uuf$ () A_b_prod_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uug$ (Nat$ A_b_rbt$) A_b_prod_list_a_b_a_b_rbt_a_b_prod_list_prod_fun_fun_fun$)
(declare-fun uuh$ (Nat$ A_b_rbt$) A_b_prod_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uui$ (Nat$) A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uuj$ (A_b_prod_list$) Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uuk$ (Nat$ A_b_rbt$) A_b_prod_list_a_b_a_b_rbt_a_b_prod_list_prod_fun_fun_fun$)
(declare-fun uul$ (Nat$ A_b_rbt$) A_b_prod_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uum$ (Nat$) A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uun$ (Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$ Nat_nat_nat_nat_prod_fun_fun$) Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uuo$ (Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$ A_b_nat_nat_prod_fun_fun$) A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uup$ (A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$ Nat_nat_a_b_prod_fun_fun$) Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uuq$ (A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$ A_b_a_b_prod_fun_fun$) A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uur$ (Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$ A_b_rbt_a_b_prod_list_nat_nat_prod_fun_fun$) A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uus$ (A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$) Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uut$ (A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$) A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uuu$ (A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$ A_b_rbt_a_b_prod_list_a_b_prod_fun_fun$) A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uuv$ (A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$) A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun uuw$ (Nat_nat_nat_nat_prod_fun_fun$ Nat_nat_nat_nat_prod_fun_fun$) Nat_nat_nat_nat_prod_fun_fun$)
(declare-fun one$a () Nat$)
(declare-fun zero$ () Nat$)
(declare-fun apfst$ (A_b_rbt_a_b_rbt_fun$ A_b_rbt_a_b_prod_list_prod$) A_b_rbt_a_b_prod_list_prod$)
(declare-fun fun_app$ (Nat_a_b_rbt_a_b_prod_list_prod_fun$ Nat$) A_b_rbt_a_b_prod_list_prod$)
(declare-fun numeral$ (Num$) Nat$)
(declare-fun fun_app$a (Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$ Nat$) Nat_a_b_rbt_a_b_prod_list_prod_fun$)
(declare-fun fun_app$b (A_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun$ A_b_prod_list$) A_b_rbt_a_b_prod_list_prod$)
(declare-fun fun_app$c (A_b_prod_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ A_b_prod$) A_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun$)
(declare-fun fun_app$d (A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ A_b_rbt$) A_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun$)
(declare-fun fun_app$e (B_a_b_rbt_a_b_prod_list_prod_fun$ B$) A_b_rbt_a_b_prod_list_prod$)
(declare-fun fun_app$f (A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$ A$) B_a_b_rbt_a_b_prod_list_prod_fun$)
(declare-fun fun_app$g (A_b_rbt_a_b_rbt_fun$ A_b_rbt$) A_b_rbt$)
(declare-fun fun_app$h (B_a_b_rbt_a_b_rbt_fun_fun$ B$) A_b_rbt_a_b_rbt_fun$)
(declare-fun fun_app$i (A_b_a_b_rbt_a_b_rbt_fun_fun_fun$ A$) B_a_b_rbt_a_b_rbt_fun_fun$)
(declare-fun fun_app$j (A_b_prod_list_a_b_a_b_rbt_a_b_prod_list_prod_fun_fun_fun$ A_b_prod_list$) A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$)
(declare-fun fun_app$k (A_b_prod_list_nat_nat_prod_fun$ A_b_prod_list$) Nat_nat_prod$)
(declare-fun fun_app$l (A_b_rbt_a_b_prod_list_nat_nat_prod_fun_fun$ A_b_rbt$) A_b_prod_list_nat_nat_prod_fun$)
(declare-fun fun_app$m (Nat_nat_nat_prod_fun$ Nat$) Nat_nat_prod$)
(declare-fun fun_app$n (Nat_nat_nat_nat_prod_fun_fun$ Nat$) Nat_nat_nat_prod_fun$)
(declare-fun fun_app$o (B_nat_nat_prod_fun$ B$) Nat_nat_prod$)
(declare-fun fun_app$p (A_b_nat_nat_prod_fun_fun$ A$) B_nat_nat_prod_fun$)
(declare-fun fun_app$q (A_b_prod_list_a_b_prod_fun$ A_b_prod_list$) A_b_prod$)
(declare-fun fun_app$r (A_b_rbt_a_b_prod_list_a_b_prod_fun_fun$ A_b_rbt$) A_b_prod_list_a_b_prod_fun$)
(declare-fun fun_app$s (Nat_a_b_prod_fun$ Nat$) A_b_prod$)
(declare-fun fun_app$t (Nat_nat_a_b_prod_fun_fun$ Nat$) Nat_a_b_prod_fun$)
(declare-fun fun_app$u (B_a_b_prod_fun$ B$) A_b_prod$)
(declare-fun fun_app$v (A_b_a_b_prod_fun_fun$ A$) B_a_b_prod_fun$)
(declare-fun fun_app$w (B_bool_fun$ B$) Bool)
(declare-fun fun_app$x (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$y (Nat_bool_fun$ Nat$) Bool)
(declare-fun fun_app$z (Nat_nat_bool_fun_fun$ Nat$) Nat_bool_fun$)
(declare-fun case_list$ (A_b_rbt_a_b_prod_list_prod$ A_b_prod_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$) A_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun$)
(declare-fun case_prod$ (A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$ A_b_rbt_a_b_prod_list_prod$) A_b_rbt_a_b_prod_list_prod$)
(declare-fun fun_app$aa (A_b_prod_list_bool_fun$ A_b_prod_list$) Bool)
(declare-fun fun_app$ab (A_b_rbt_a_b_prod_list_bool_fun_fun$ A_b_rbt$) A_b_prod_list_bool_fun$)
(declare-fun undefined$ () A_b_rbt_a_b_prod_list_prod$)
(declare-fun case_prod$a (A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$ A_b_prod$) A_b_rbt_a_b_prod_list_prod$)
(declare-fun case_prod$b (Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$ Nat_nat_prod$) A_b_rbt_a_b_prod_list_prod$)
(declare-fun case_prod$c (Nat_nat_nat_nat_prod_fun_fun$ Nat_nat_prod$) Nat_nat_prod$)
(declare-fun case_prod$d (A_b_nat_nat_prod_fun_fun$ A_b_prod$) Nat_nat_prod$)
(declare-fun case_prod$e (Nat_nat_a_b_prod_fun_fun$ Nat_nat_prod$) A_b_prod$)
(declare-fun case_prod$f (A_b_a_b_prod_fun_fun$ A_b_prod$) A_b_prod$)
(declare-fun case_prod$g (A_b_rbt_a_b_prod_list_nat_nat_prod_fun_fun$ A_b_rbt_a_b_prod_list_prod$) Nat_nat_prod$)
(declare-fun case_prod$h (A_b_rbt_a_b_prod_list_a_b_prod_fun_fun$ A_b_rbt_a_b_prod_list_prod$) A_b_prod$)
(declare-fun case_prod$i (A_b_bool_fun_fun$ A_b_prod$) Bool)
(declare-fun case_prod$j (Nat_nat_bool_fun_fun$ Nat_nat_prod$) Bool)
(declare-fun case_prod$k (A_b_rbt_a_b_prod_list_bool_fun_fun$ A_b_rbt_a_b_prod_list_prod$) Bool)
(declare-fun divmod_nat$ (Nat$ Nat$) Nat_nat_prod$)
(declare-fun size_color$ (Color$) Nat$)
(declare-fun rbtreeify_f$ (Nat$ A_b_prod_list$) A_b_rbt_a_b_prod_list_prod$)
(declare-fun rbtreeify_g$ (Nat$ A_b_prod_list$) A_b_rbt_a_b_prod_list_prod$)
(assert (! (forall ((?v0 Nat$) (?v1 Nat$)) (! (= (fun_app$ (fun_app$a uud$ ?v0) ?v1) (ite (= ?v1 zero$) (case_prod$ (uuc$ ?v0) (rbtreeify_g$ ?v0 kvs$)) (case_prod$ (uuc$ ?v0) (rbtreeify_f$ ?v0 kvs$)))) :pattern ((fun_app$ (fun_app$a uud$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_list$)) (! (= (fun_app$b (fun_app$c uuf$ ?v0) ?v1) (case_prod$a (uue$ ?v1) ?v0)) :pattern ((fun_app$b (fun_app$c uuf$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_rbt$)) (! (= (fun_app$d (uum$ ?v0) ?v1) (case_list$ undefined$ (uul$ ?v0 ?v1))) :pattern ((fun_app$d (uum$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_rbt$)) (! (= (fun_app$d (uui$ ?v0) ?v1) (case_list$ undefined$ (uuh$ ?v0 ?v1))) :pattern ((fun_app$d (uui$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_rbt$)) (! (= (fun_app$d (uuc$ ?v0) ?v1) (case_list$ undefined$ (uub$ ?v0 ?v1))) :pattern ((fun_app$d (uuc$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 Nat$) (?v2 Nat$)) (! (= (fun_app$ (fun_app$a (uuj$ ?v0) ?v1) ?v2) (ite (= ?v2 zero$) (case_prod$ (uuc$ ?v1) (rbtreeify_f$ ?v1 ?v0)) (case_prod$ (uui$ ?v1) (rbtreeify_f$ ?v1 ?v0)))) :pattern ((fun_app$ (fun_app$a (uuj$ ?v0) ?v1) ?v2)))) :named a5))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A$) (?v2 B$)) (! (= (fun_app$e (fun_app$f (uue$ ?v0) ?v1) ?v2) (pair$a (branch$ r$ empty$ ?v1 ?v2 empty$) ?v0)) :pattern ((fun_app$e (fun_app$f (uue$ ?v0) ?v1) ?v2)))) :named a6))
(assert (! (forall ((?v0 A_b_rbt$) (?v1 A$) (?v2 B$) (?v3 A_b_rbt$)) (! (= (fun_app$g (fun_app$h (fun_app$i (uu$ ?v0) ?v1) ?v2) ?v3) (branch$ b$ ?v0 ?v1 ?v2 ?v3)) :pattern ((fun_app$g (fun_app$h (fun_app$i (uu$ ?v0) ?v1) ?v2) ?v3)))) :named a7))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_rbt$) (?v2 A_b_prod$) (?v3 A_b_prod_list$)) (! (= (fun_app$b (fun_app$c (uul$ ?v0 ?v1) ?v2) ?v3) (case_prod$a (fun_app$j (uuk$ ?v0 ?v1) ?v3) ?v2)) :pattern ((fun_app$b (fun_app$c (uul$ ?v0 ?v1) ?v2) ?v3)))) :named a8))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_rbt$) (?v2 A_b_prod$) (?v3 A_b_prod_list$)) (! (= (fun_app$b (fun_app$c (uuh$ ?v0 ?v1) ?v2) ?v3) (case_prod$a (fun_app$j (uug$ ?v0 ?v1) ?v3) ?v2)) :pattern ((fun_app$b (fun_app$c (uuh$ ?v0 ?v1) ?v2) ?v3)))) :named a9))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_rbt$) (?v2 A_b_prod$) (?v3 A_b_prod_list$)) (! (= (fun_app$b (fun_app$c (uub$ ?v0 ?v1) ?v2) ?v3) (case_prod$a (fun_app$j (uua$ ?v0 ?v1) ?v3) ?v2)) :pattern ((fun_app$b (fun_app$c (uub$ ?v0 ?v1) ?v2) ?v3)))) :named a10))
(assert (! (forall ((?v0 A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v2 A_b_rbt$) (?v3 A_b_prod_list$)) (! (= (fun_app$b (fun_app$d (uuv$ ?v0 ?v1) ?v2) ?v3) (case_prod$ ?v0 (fun_app$b (fun_app$d ?v1 ?v2) ?v3))) :pattern ((fun_app$b (fun_app$d (uuv$ ?v0 ?v1) ?v2) ?v3)))) :named a11))
(assert (! (forall ((?v0 A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$a (uus$ ?v0 ?v1) ?v2) ?v3) (case_prod$ ?v0 (fun_app$ (fun_app$a ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uus$ ?v0 ?v1) ?v2) ?v3)))) :named a12))
(assert (! (forall ((?v0 A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$e (fun_app$f (uut$ ?v0 ?v1) ?v2) ?v3) (case_prod$ ?v0 (fun_app$e (fun_app$f ?v1 ?v2) ?v3))) :pattern ((fun_app$e (fun_app$f (uut$ ?v0 ?v1) ?v2) ?v3)))) :named a13))
(assert (! (forall ((?v0 Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 A_b_rbt_a_b_prod_list_nat_nat_prod_fun_fun$) (?v2 A_b_rbt$) (?v3 A_b_prod_list$)) (! (= (fun_app$b (fun_app$d (uur$ ?v0 ?v1) ?v2) ?v3) (case_prod$b ?v0 (fun_app$k (fun_app$l ?v1 ?v2) ?v3))) :pattern ((fun_app$b (fun_app$d (uur$ ?v0 ?v1) ?v2) ?v3)))) :named a14))
(assert (! (forall ((?v0 Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$a (uun$ ?v0 ?v1) ?v2) ?v3) (case_prod$b ?v0 (fun_app$m (fun_app$n ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uun$ ?v0 ?v1) ?v2) ?v3)))) :named a15))
(assert (! (forall ((?v0 Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 A_b_nat_nat_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$e (fun_app$f (uuo$ ?v0 ?v1) ?v2) ?v3) (case_prod$b ?v0 (fun_app$o (fun_app$p ?v1 ?v2) ?v3))) :pattern ((fun_app$e (fun_app$f (uuo$ ?v0 ?v1) ?v2) ?v3)))) :named a16))
(assert (! (forall ((?v0 Nat_nat_nat_nat_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$m (fun_app$n (uuw$ ?v0 ?v1) ?v2) ?v3) (case_prod$c ?v0 (fun_app$m (fun_app$n ?v1 ?v2) ?v3))) :pattern ((fun_app$m (fun_app$n (uuw$ ?v0 ?v1) ?v2) ?v3)))) :named a17))
(assert (! (forall ((?v0 A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 A_b_rbt_a_b_prod_list_a_b_prod_fun_fun$) (?v2 A_b_rbt$) (?v3 A_b_prod_list$)) (! (= (fun_app$b (fun_app$d (uuu$ ?v0 ?v1) ?v2) ?v3) (case_prod$a ?v0 (fun_app$q (fun_app$r ?v1 ?v2) ?v3))) :pattern ((fun_app$b (fun_app$d (uuu$ ?v0 ?v1) ?v2) ?v3)))) :named a18))
(assert (! (forall ((?v0 A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 Nat_nat_a_b_prod_fun_fun$) (?v2 Nat$) (?v3 Nat$)) (! (= (fun_app$ (fun_app$a (uup$ ?v0 ?v1) ?v2) ?v3) (case_prod$a ?v0 (fun_app$s (fun_app$t ?v1 ?v2) ?v3))) :pattern ((fun_app$ (fun_app$a (uup$ ?v0 ?v1) ?v2) ?v3)))) :named a19))
(assert (! (forall ((?v0 A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A$) (?v3 B$)) (! (= (fun_app$e (fun_app$f (uuq$ ?v0 ?v1) ?v2) ?v3) (case_prod$a ?v0 (fun_app$u (fun_app$v ?v1 ?v2) ?v3))) :pattern ((fun_app$e (fun_app$f (uuq$ ?v0 ?v1) ?v2) ?v3)))) :named a20))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_rbt$) (?v2 A_b_prod_list$) (?v3 A$) (?v4 B$)) (! (= (fun_app$e (fun_app$f (fun_app$j (uuk$ ?v0 ?v1) ?v2) ?v3) ?v4) (apfst$ (fun_app$h (fun_app$i (uu$ ?v1) ?v3) ?v4) (rbtreeify_g$ (div$ ?v0 (numeral$ (bit0$ one$))) ?v2))) :pattern ((fun_app$e (fun_app$f (fun_app$j (uuk$ ?v0 ?v1) ?v2) ?v3) ?v4)))) :named a21))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_rbt$) (?v2 A_b_prod_list$) (?v3 A$) (?v4 B$)) (! (= (fun_app$e (fun_app$f (fun_app$j (uua$ ?v0 ?v1) ?v2) ?v3) ?v4) (apfst$ (fun_app$h (fun_app$i (uu$ ?v1) ?v3) ?v4) (rbtreeify_g$ ?v0 ?v2))) :pattern ((fun_app$e (fun_app$f (fun_app$j (uua$ ?v0 ?v1) ?v2) ?v3) ?v4)))) :named a22))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_rbt$) (?v2 A_b_prod_list$) (?v3 A$) (?v4 B$)) (! (= (fun_app$e (fun_app$f (fun_app$j (uug$ ?v0 ?v1) ?v2) ?v3) ?v4) (apfst$ (fun_app$h (fun_app$i (uu$ ?v1) ?v3) ?v4) (rbtreeify_f$ ?v0 ?v2))) :pattern ((fun_app$e (fun_app$f (fun_app$j (uug$ ?v0 ?v1) ?v2) ?v3) ?v4)))) :named a23))
(assert (! (not (= (rbtreeify_g$ n$ kvs$) (ite (or (= n$ zero$) (= n$ one$a)) (pair$a empty$ kvs$) (case_prod$b uud$ (divmod_nat$ n$ (numeral$ (bit0$ one$))))))) :named a24))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$) (?v5 Color$) (?v6 A_b_rbt$) (?v7 A$) (?v8 B$) (?v9 A_b_rbt$)) (= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4) (branch$ ?v5 ?v6 ?v7 ?v8 ?v9)) (and (= ?v0 ?v5) (and (= ?v1 ?v6) (and (= ?v2 ?v7) (and (= ?v3 ?v8) (= ?v4 ?v9))))))) :named a25))
(assert (! (forall ((?v0 A_b_rbt$)) (=> (and (=> (= ?v0 empty$) false) (forall ((?v1 Color$) (?v2 A_b_rbt$) (?v3 A$) (?v4 B$) (?v5 A_b_rbt$)) (=> (= ?v0 (branch$ ?v1 ?v2 ?v3 ?v4 ?v5)) false))) false)) :named a26))
(assert (! (forall ((?v0 Color$) (?v1 A_b_rbt$) (?v2 A$) (?v3 B$) (?v4 A_b_rbt$)) (not (= empty$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4)))) :named a27))
(assert (! (forall ((?v0 Num$)) (= (= (numeral$ ?v0) one$a) (= ?v0 one$))) :named a28))
(assert (! (forall ((?v0 Num$)) (= (= one$a (numeral$ ?v0)) (= one$ ?v0))) :named a29))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_list$)) (= (rbtreeify_f$ ?v0 ?v1) (ite (= ?v0 zero$) (pair$a empty$ ?v1) (ite (= ?v0 one$a) (fun_app$b (case_list$ undefined$ uuf$) ?v1) (case_prod$b (uuj$ ?v1) (divmod_nat$ ?v0 (numeral$ (bit0$ one$)))))))) :named a30))
(assert (! (forall ((?v0 A_b_rbt_a_b_rbt_fun$) (?v1 A_b_rbt$) (?v2 A_b_prod_list$)) (! (= (apfst$ ?v0 (pair$a ?v1 ?v2)) (pair$a (fun_app$g ?v0 ?v1) ?v2)) :pattern ((apfst$ ?v0 (pair$a ?v1 ?v2))))) :named a31))
(assert (! (forall ((?v0 Num$)) (= (= (bit0$ ?v0) one$) false)) :named a32))
(assert (! (forall ((?v0 Num$)) (= (= one$ (bit0$ ?v0)) false)) :named a33))
(assert (! (not (= zero$ (numeral$ (bit0$ one$)))) :named a34))
(assert (! (= (numeral$ one$) one$a) :named a35))
(assert (! (= (numeral$ one$) one$a) :named a36))
(assert (! (forall ((?v0 Nat$) (?v1 A_b_prod_list$)) (= (rbtreeify_g$ ?v0 ?v1) (ite (or (= ?v0 zero$) (= ?v0 one$a)) (pair$a empty$ ?v1) (ite (= (mod$ ?v0 (numeral$ (bit0$ one$))) zero$) (case_prod$ (uum$ ?v0) (rbtreeify_g$ (div$ ?v0 (numeral$ (bit0$ one$))) ?v1)) (case_prod$ (uum$ ?v0) (rbtreeify_f$ (div$ ?v0 (numeral$ (bit0$ one$))) ?v1)))))) :named a37))
(assert (! (= (size_color$ b$) zero$) :named a38))
(assert (! (forall ((?v0 Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (case_prod$b ?v0 (case_prod$c ?v1 ?v2)) (case_prod$b (uun$ ?v0 ?v1) ?v2))) :named a39))
(assert (! (forall ((?v0 Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 A_b_nat_nat_prod_fun_fun$) (?v2 A_b_prod$)) (= (case_prod$b ?v0 (case_prod$d ?v1 ?v2)) (case_prod$a (uuo$ ?v0 ?v1) ?v2))) :named a40))
(assert (! (forall ((?v0 A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 Nat_nat_a_b_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (case_prod$a ?v0 (case_prod$e ?v1 ?v2)) (case_prod$b (uup$ ?v0 ?v1) ?v2))) :named a41))
(assert (! (forall ((?v0 A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 A_b_a_b_prod_fun_fun$) (?v2 A_b_prod$)) (= (case_prod$a ?v0 (case_prod$f ?v1 ?v2)) (case_prod$a (uuq$ ?v0 ?v1) ?v2))) :named a42))
(assert (! (forall ((?v0 Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 A_b_rbt_a_b_prod_list_nat_nat_prod_fun_fun$) (?v2 A_b_rbt_a_b_prod_list_prod$)) (= (case_prod$b ?v0 (case_prod$g ?v1 ?v2)) (case_prod$ (uur$ ?v0 ?v1) ?v2))) :named a43))
(assert (! (forall ((?v0 A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 Nat_nat_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (case_prod$ ?v0 (case_prod$b ?v1 ?v2)) (case_prod$b (uus$ ?v0 ?v1) ?v2))) :named a44))
(assert (! (forall ((?v0 A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v2 A_b_prod$)) (= (case_prod$ ?v0 (case_prod$a ?v1 ?v2)) (case_prod$a (uut$ ?v0 ?v1) ?v2))) :named a45))
(assert (! (forall ((?v0 A_b_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 A_b_rbt_a_b_prod_list_a_b_prod_fun_fun$) (?v2 A_b_rbt_a_b_prod_list_prod$)) (= (case_prod$a ?v0 (case_prod$h ?v1 ?v2)) (case_prod$ (uuu$ ?v0 ?v1) ?v2))) :named a46))
(assert (! (forall ((?v0 A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v1 A_b_rbt_a_b_prod_list_a_b_rbt_a_b_prod_list_prod_fun_fun$) (?v2 A_b_rbt_a_b_prod_list_prod$)) (= (case_prod$ ?v0 (case_prod$ ?v1 ?v2)) (case_prod$ (uuv$ ?v0 ?v1) ?v2))) :named a47))
(assert (! (forall ((?v0 Nat_nat_nat_nat_prod_fun_fun$) (?v1 Nat_nat_nat_nat_prod_fun_fun$) (?v2 Nat_nat_prod$)) (= (case_prod$c ?v0 (case_prod$c ?v1 ?v2)) (case_prod$c (uuw$ ?v0 ?v1) ?v2))) :named a48))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 B$)) (=> (fun_app$w (fun_app$x ?v0 ?v1) ?v2) (case_prod$i ?v0 (pair$ ?v1 ?v2)))) :named a49))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$y (fun_app$z ?v0 ?v1) ?v2) (case_prod$j ?v0 (pair$b ?v1 ?v2)))) :named a50))
(assert (! (forall ((?v0 A_b_rbt_a_b_prod_list_bool_fun_fun$) (?v1 A_b_rbt$) (?v2 A_b_prod_list$)) (=> (fun_app$aa (fun_app$ab ?v0 ?v1) ?v2) (case_prod$k ?v0 (pair$a ?v1 ?v2)))) :named a51))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 B$)) (=> (fun_app$w (fun_app$x ?v0 ?v1) ?v2) (case_prod$i ?v0 (pair$ ?v1 ?v2)))) :named a52))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$) (?v1 Nat$) (?v2 Nat$)) (=> (fun_app$y (fun_app$z ?v0 ?v1) ?v2) (case_prod$j ?v0 (pair$b ?v1 ?v2)))) :named a53))
(assert (! (forall ((?v0 A_b_rbt_a_b_prod_list_bool_fun_fun$) (?v1 A_b_rbt$) (?v2 A_b_prod_list$)) (=> (fun_app$aa (fun_app$ab ?v0 ?v1) ?v2) (case_prod$k ?v0 (pair$a ?v1 ?v2)))) :named a54))
(check-sat)
;(get-unsat-core)
