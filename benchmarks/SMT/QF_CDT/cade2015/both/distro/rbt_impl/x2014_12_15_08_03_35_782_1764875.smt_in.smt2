; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 331
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_b_prod_a_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))
  (A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))
  (A_b_prod_list$ (nil$a) (cons$a (hd$a A_b_prod$) (tl$a A_b_prod_list$)))
  (Color$ (r$) (b$))
  (A_b_rbt$ (empty$) (branch$ (select$ Color$) (selecta$ A_b_rbt$) (selectb$ A$) (selectc$ B$) (selectd$ A_b_rbt$)))))
(declare-fun t$ () A_b_rbt$)
(declare-fun uu$ () A_b_prod_a_fun$)
(declare-fun map$ (A_b_prod_a_fun$ A_b_prod_list$) A_list$)
(declare-fun less$ () A_a_bool_fun_fun$)
(declare-fun sorted$ (A_a_bool_fun_fun$ A_list$) Bool)
(declare-fun entries$ (A_b_rbt$) A_b_prod_list$)
(declare-fun fun_app$ (A_b_prod_a_fun$ A_b_prod$) A$)
(declare-fun less_eq$ () A_a_bool_fun_fun$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun rbt_sorted$ (A_a_bool_fun_fun$ A_b_rbt$) Bool)
(assert (! (forall ((?v0 A_b_prod$)) (! (= (fun_app$ uu$ ?v0) (fst$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (sorted$ less_eq$ (map$ uu$ (entries$ t$)))) :named a1))
(assert (! (rbt_sorted$ less$ t$) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (= ?v0 ?v1) (and (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) (fun_app$a (fun_app$b less_eq$ ?v1) ?v0)))) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (=> (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) false) (=> (fun_app$a (fun_app$b less_eq$ ?v1) ?v0) false)) false)) :named a4))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$)) (=> (and (forall ((?v3 A$) (?v4 A$)) (=> (fun_app$a (fun_app$b less_eq$ ?v3) ?v4) (fun_app$a (fun_app$b ?v0 ?v3) ?v4))) (forall ((?v3 A$) (?v4 A$)) (=> (fun_app$a (fun_app$b ?v0 ?v4) ?v3) (fun_app$a (fun_app$b ?v0 ?v3) ?v4)))) (fun_app$a (fun_app$b ?v0 ?v1) ?v2))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (= ?v0 ?v1) (fun_app$a (fun_app$b less_eq$ ?v1) ?v2)) (fun_app$a (fun_app$b less_eq$ ?v0) ?v2))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (= ?v0 ?v1) (fun_app$a (fun_app$b less_eq$ ?v0) ?v1))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$a (fun_app$b less_eq$ ?v0) ?v2))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) (fun_app$a (fun_app$b less_eq$ ?v1) ?v0)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) (fun_app$a (fun_app$b less_eq$ ?v1) ?v0)) (= ?v1 ?v0))) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) (fun_app$a (fun_app$b less_eq$ ?v1) ?v0)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) (fun_app$a (fun_app$b less_eq$ ?v1) ?v2)) (fun_app$a (fun_app$b less_eq$ ?v0) ?v2))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) (fun_app$a (fun_app$b less_eq$ ?v1) ?v2)) (fun_app$a (fun_app$b less_eq$ ?v0) ?v2))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) (fun_app$a (fun_app$b less_eq$ ?v2) ?v0)) (fun_app$a (fun_app$b less_eq$ ?v2) ?v1))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) (= (fun_app$a (fun_app$b less_eq$ ?v1) ?v0) (= ?v1 ?v0)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A$)) (or (fun_app$a (fun_app$b less_eq$ ?v0) ?v1) (fun_app$a (fun_app$b less_eq$ ?v1) ?v0))) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (not (fun_app$a (fun_app$b less$ ?v0) ?v1)) (or (fun_app$a (fun_app$b less$ ?v1) ?v0) (= ?v0 ?v1)))) :named a17))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (not (= ?v0 ?v1)) (or (fun_app$a (fun_app$b less$ ?v0) ?v1) (fun_app$a (fun_app$b less$ ?v1) ?v0)))) :named a18))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (=> (fun_app$a (fun_app$b less$ ?v0) ?v1) false) (and (=> (= ?v0 ?v1) false) (=> (fun_app$a (fun_app$b less$ ?v1) ?v0) false))) false)) :named a19))
(check-sat)
;(get-unsat-core)
