; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 14
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_list_set$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort B_a_set_fun$ 0)
(declare-sort A_a_prod_set$ 0)
(declare-sort A_b_prod_set$ 0)
(declare-sort B_a_prod_set$ 0)
(declare-sort B_b_prod_set$ 0)
(declare-sort A_a_b_prod_fun$ 0)
(declare-sort A_b_prod_a_fun$ 0)
(declare-sort A_b_prod_b_fun$ 0)
(declare-sort B_a_b_prod_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort A_a_prod_bool_fun$ 0)
(declare-sort A_b_a_set_fun_fun$ 0)
(declare-sort A_b_prod_bool_fun$ 0)
(declare-sort A_b_prod_list_set$ 0)
(declare-sort A_list_a_list_fun$ 0)
(declare-sort B_a_prod_bool_fun$ 0)
(declare-sort B_a_b_prod_set_fun$ 0)
(declare-sort A_a_b_prod_prod_set$ 0)
(declare-sort A_b_a_prod_prod_set$ 0)
(declare-sort A_b_prod_a_prod_set$ 0)
(declare-sort B_a_prod_a_prod_set$ 0)
(declare-sort B_a_prod_b_prod_set$ 0)
(declare-sort A_b_prod_a_b_prod_fun$ 0)
(declare-sort A_b_prod_b_a_prod_fun$ 0)
(declare-sort B_a_prod_a_b_prod_fun$ 0)
(declare-sort A_list_a_list_prod_set$ 0)
(declare-sort A_a_b_prod_bool_fun_fun$ 0)
(declare-sort A_a_b_prod_prod_bool_fun$ 0)
(declare-sort A_b_a_b_prod_set_fun_fun$ 0)
(declare-sort A_a_prod_a_a_prod_prod_set$ 0)
(declare-sort A_b_prod_a_b_prod_prod_set$ 0)
(declare-sort A_list_a_list_prod_bool_fun$ 0)
(declare-sort A_b_prod_list_a_b_prod_list_fun$ 0)
(declare-sort A_b_prod_list_a_b_prod_list_prod_set$ 0)
(declare-sort A_b_prod_list_a_b_prod_list_prod_bool_fun$ 0)
(declare-datatypes () ((A_list$ (nil$) (cons$ (hd$ A$) (tl$ A_list$)))
  (Color$ (r$) (b$))
  (A_b_rbt$ (empty$) (branch$ (select$ Color$) (selecta$ A_b_rbt$) (selectb$ A$) (selectc$ B$) (selectd$ A_b_rbt$)))
  (A_b_prod$ (pair$ (fst$ A$) (snd$ B$)))
  (A_b_prod_list$ (nil$a) (cons$a (hd$a A_b_prod$) (tl$a A_b_prod_list$)))
  (A_b_prod_a_b_prod_rbt$ (empty$a) (branch$a (selecte$ Color$) (selectf$ A_b_prod_a_b_prod_rbt$) (selectg$ A_b_prod$) (selecth$ A_b_prod$) (selecti$ A_b_prod_a_b_prod_rbt$)))
  (A_b_prod_a_b_prod_prod$ (pair$a (fst$a A_b_prod$) (snd$a A_b_prod$)))
  (A_b_prod_a_b_prod_prod_list$ (nil$b) (cons$b (hd$b A_b_prod_a_b_prod_prod$) (tl$b A_b_prod_a_b_prod_prod_list$)))
  (A_b_prod_a_rbt$ (empty$b) (branch$b (selectj$ Color$) (selectk$ A_b_prod_a_rbt$) (selectl$ A_b_prod$) (selectm$ A$) (selectn$ A_b_prod_a_rbt$)))
  (A_b_prod_a_prod$ (pair$b (fst$b A_b_prod$) (snd$b A$)))
  (A_b_prod_a_prod_list$ (nil$c) (cons$c (hd$c A_b_prod_a_prod$) (tl$c A_b_prod_a_prod_list$)))
  (A_b_prod_list_a_b_prod_list_rbt$ (empty$c) (branch$c (selecto$ Color$) (selectp$ A_b_prod_list_a_b_prod_list_rbt$) (selectq$ A_b_prod_list$) (selectr$ A_b_prod_list$) (selects$ A_b_prod_list_a_b_prod_list_rbt$)))
  (A_b_prod_list_a_b_prod_list_prod$ (pair$c (fst$c A_b_prod_list$) (snd$c A_b_prod_list$)))
  (A_b_prod_list_a_b_prod_list_prod_list$ (nil$d) (cons$d (hd$d A_b_prod_list_a_b_prod_list_prod$) (tl$d A_b_prod_list_a_b_prod_list_prod_list$)))
  (A_b_prod_list_list$ (nil$e) (cons$e (hd$e A_b_prod_list$) (tl$e A_b_prod_list_list$)))
  (A_list_a_list_rbt$ (empty$d) (branch$d (selectt$ Color$) (selectu$ A_list_a_list_rbt$) (selectv$ A_list$) (selectw$ A_list$) (selectx$ A_list_a_list_rbt$)))
  (A_list_a_list_prod$ (pair$d (fst$d A_list$) (snd$d A_list$)))
  (A_list_a_list_prod_list$ (nil$f) (cons$f (hd$f A_list_a_list_prod$) (tl$f A_list_a_list_prod_list$)))
  (A_list_list$ (nil$g) (cons$g (hd$g A_list$) (tl$g A_list_list$)))
  (B_a_rbt$ (empty$e) (branch$e (selecty$ Color$) (selectz$ B_a_rbt$) (selecua$ B$) (selecub$ A$) (selecuc$ B_a_rbt$)))
  (B_a_prod$ (pair$e (fst$e B$) (snd$e A$)))
  (B_a_prod_list$ (nil$h) (cons$h (hd$h B_a_prod$) (tl$h B_a_prod_list$)))
  (B_list$ (nil$i) (cons$i (hd$i B$) (tl$i B_list$)))
  (A_a_b_prod_rbt$ (empty$f) (branch$f (selecud$ Color$) (selecue$ A_a_b_prod_rbt$) (selecuf$ A$) (selecug$ A_b_prod$) (selecuh$ A_a_b_prod_rbt$)))
  (A_a_b_prod_prod$ (pair$f (fst$f A$) (snd$f A_b_prod$)))
  (A_a_b_prod_prod_list$ (nil$j) (cons$j (hd$j A_a_b_prod_prod$) (tl$j A_a_b_prod_prod_list$)))
  (A_a_rbt$ (empty$g) (branch$g (selecui$ Color$) (selecuj$ A_a_rbt$) (selecuk$ A$) (selecul$ A$) (selecum$ A_a_rbt$)))
  (A_a_prod$ (pair$g (fst$g A$) (snd$g A$)))
  (A_a_prod_list$ (nil$k) (cons$k (hd$k A_a_prod$) (tl$k A_a_prod_list$)))
  (B_b_prod$ (pair$h (fst$h B$) (snd$h B$)))
  (B_b_prod_list$ (nil$l) (cons$l (hd$l B_b_prod$) (tl$l B_b_prod_list$)))
  (B_a_prod_a_prod$ (pair$i (fst$i B_a_prod$) (snd$i A$)))
  (B_a_prod_a_prod_list$ (nil$m) (cons$m (hd$m B_a_prod_a_prod$) (tl$m B_a_prod_a_prod_list$)))
  (B_a_prod_b_prod$ (pair$j (fst$j B_a_prod$) (snd$j B$)))
  (B_a_prod_b_prod_list$ (nil$n) (cons$n (hd$n B_a_prod_b_prod$) (tl$n B_a_prod_b_prod_list$)))
  (A_b_a_prod_prod$ (pair$k (fst$k A$) (snd$k B_a_prod$)))
  (A_b_a_prod_prod_list$ (nil$o) (cons$o (hd$o A_b_a_prod_prod$) (tl$o A_b_a_prod_prod_list$)))
  (A_a_prod_a_a_prod_prod$ (pair$l (fst$l A_a_prod$) (snd$l A_a_prod$)))
  (A_a_prod_a_a_prod_prod_list$ (nil$p) (cons$p (hd$p A_a_prod_a_a_prod_prod$) (tl$p A_a_prod_a_a_prod_prod_list$)))))
(declare-fun k$ () A$)
(declare-fun t$ () A_b_rbt$)
(declare-fun uu$ (A_set$) A_bool_fun$)
(declare-fun set$ (A_list$) A_set$)
(declare-fun top$ () A_set$)
(declare-fun uua$ (A_b_prod_set$) A_b_prod_bool_fun$)
(declare-fun zip$ (A_b_prod_list$ A_b_prod_list$) A_b_prod_a_b_prod_prod_list$)
(declare-fun keys$ (A_b_rbt$) A_list$)
(declare-fun set$a (A_b_prod_list$) A_b_prod_set$)
(declare-fun set$b (A_b_prod_a_b_prod_prod_list$) A_b_prod_a_b_prod_prod_set$)
(declare-fun set$c (A_b_prod_a_prod_list$) A_b_prod_a_prod_set$)
(declare-fun set$d (A_b_prod_list_a_b_prod_list_prod_list$) A_b_prod_list_a_b_prod_list_prod_set$)
(declare-fun set$e (A_b_prod_list_list$) A_b_prod_list_set$)
(declare-fun set$f (A_list_a_list_prod_list$) A_list_a_list_prod_set$)
(declare-fun set$g (A_list_list$) A_list_set$)
(declare-fun set$h (B_a_prod_list$) B_a_prod_set$)
(declare-fun set$i (B_list$) B_set$)
(declare-fun set$j (A_a_b_prod_prod_list$) A_a_b_prod_prod_set$)
(declare-fun set$k (A_a_prod_list$) A_a_prod_set$)
(declare-fun set$l (B_b_prod_list$) B_b_prod_set$)
(declare-fun set$m (B_a_prod_a_prod_list$) B_a_prod_a_prod_set$)
(declare-fun set$n (B_a_prod_b_prod_list$) B_a_prod_b_prod_set$)
(declare-fun set$o (A_b_a_prod_prod_list$) A_b_a_prod_prod_set$)
(declare-fun set$p (A_a_prod_a_a_prod_prod_list$) A_a_prod_a_a_prod_prod_set$)
(declare-fun swap$ (A_b_prod_a_prod$) A_a_b_prod_prod$)
(declare-fun top$a () A_b_prod_set$)
(declare-fun zip$a (A_b_prod_list$ A_list$) A_b_prod_a_prod_list$)
(declare-fun zip$b (A_b_prod_list_list$ A_b_prod_list_list$) A_b_prod_list_a_b_prod_list_prod_list$)
(declare-fun zip$c (A_list_list$ A_list_list$) A_list_a_list_prod_list$)
(declare-fun zip$d (B_list$ A_list$) B_a_prod_list$)
(declare-fun zip$e (A_list$ A_b_prod_list$) A_a_b_prod_prod_list$)
(declare-fun zip$f (A_list$ A_list$) A_a_prod_list$)
(declare-fun zip$g (A_list$ B_list$) A_b_prod_list$)
(declare-fun zip$h (B_list$ B_list$) B_b_prod_list$)
(declare-fun zip$i (B_a_prod_list$ A_list$) B_a_prod_a_prod_list$)
(declare-fun zip$j (B_a_prod_list$ B_list$) B_a_prod_b_prod_list$)
(declare-fun zip$k (A_list$ B_a_prod_list$) A_b_a_prod_prod_list$)
(declare-fun zip$l (A_a_prod_list$ A_a_prod_list$) A_a_prod_a_a_prod_prod_list$)
(declare-fun apfst$ (A_b_prod_list_a_b_prod_list_fun$ A_b_prod_list_a_b_prod_list_prod$) A_b_prod_list_a_b_prod_list_prod$)
(declare-fun apsnd$ (B_b_fun$) A_b_prod_a_b_prod_fun$)
(declare-fun curry$ (A_b_prod_bool_fun$ A$) B_bool_fun$)
(declare-fun image$ (A_b_prod_b_a_prod_fun$ A_b_prod_set$) B_a_prod_set$)
(declare-fun keys$a (A_b_prod_a_b_prod_rbt$) A_b_prod_list$)
(declare-fun keys$b (A_b_prod_a_rbt$) A_b_prod_list$)
(declare-fun keys$c (A_b_prod_list_a_b_prod_list_rbt$) A_b_prod_list_list$)
(declare-fun keys$d (A_list_a_list_rbt$) A_list_list$)
(declare-fun keys$e (B_a_rbt$) B_list$)
(declare-fun keys$f (A_a_b_prod_rbt$) A_list$)
(declare-fun keys$g (A_a_rbt$) A_list$)
(declare-fun swap$a (A_b_prod_list_a_b_prod_list_prod$) A_b_prod_list_a_b_prod_list_prod$)
(declare-fun swap$b (A_list_a_list_prod$) A_list_a_list_prod$)
(declare-fun swap$c (A_a_b_prod_prod$) A_b_prod_a_prod$)
(declare-fun swap$d (A_a_prod$) A_a_prod$)
(declare-fun swap$e () B_a_prod_a_b_prod_fun$)
(declare-fun swap$f () A_b_prod_b_a_prod_fun$)
(declare-fun apfst$a (A_list_a_list_fun$ A_list_a_list_prod$) A_list_a_list_prod$)
(declare-fun apfst$b (B_b_fun$ B_a_prod$) B_a_prod$)
(declare-fun apfst$c (B_a_fun$ B_a_prod$) A_a_prod$)
(declare-fun apfst$d (A_a_fun$ A_a_b_prod_prod$) A_a_b_prod_prod$)
(declare-fun apfst$e (A_b_fun$ A_a_prod$) B_a_prod$)
(declare-fun apfst$f (A_a_fun$ A_a_prod$) A_a_prod$)
(declare-fun apfst$g (A_a_fun$) A_b_prod_a_b_prod_fun$)
(declare-fun apsnd$a (B_a_fun$ A_b_prod$) A_a_prod$)
(declare-fun apsnd$b (A_a_fun$ B_a_prod$) B_a_prod$)
(declare-fun apsnd$c (A_b_fun$ A_a_prod$) A_b_prod$)
(declare-fun apsnd$d (A_a_fun$ A_a_prod$) A_a_prod$)
(declare-fun apsnd$e (B_a_b_prod_fun$ A_b_prod$) A_a_b_prod_prod$)
(declare-fun apsnd$f (A_b_prod_b_fun$ A_a_b_prod_prod$) A_b_prod$)
(declare-fun apsnd$g (A_b_prod_a_fun$ A_a_b_prod_prod$) A_a_prod$)
(declare-fun apsnd$h (A_a_b_prod_fun$ A_a_prod$) A_a_b_prod_prod$)
(declare-fun apsnd$i (A_list_a_list_fun$ A_list_a_list_prod$) A_list_a_list_prod$)
(declare-fun curry$a (A_b_prod_list_a_b_prod_list_prod_bool_fun$ A_b_prod_list$ A_b_prod_list$) Bool)
(declare-fun curry$b (A_list_a_list_prod_bool_fun$ A_list$ A_list$) Bool)
(declare-fun curry$c (B_a_prod_bool_fun$) B_a_bool_fun_fun$)
(declare-fun curry$d (A_a_b_prod_prod_bool_fun$) A_a_b_prod_bool_fun_fun$)
(declare-fun curry$e (A_a_prod_bool_fun$) A_a_bool_fun_fun$)
(declare-fun image$a (B_a_prod_a_b_prod_fun$ B_a_prod_set$) A_b_prod_set$)
(declare-fun image$b (A_a_fun$ A_set$) A_set$)
(declare-fun image$c (A_a_b_prod_fun$ A_set$) A_b_prod_set$)
(declare-fun image$d (A_b_prod_a_fun$ A_b_prod_set$) A_set$)
(declare-fun image$e (A_b_prod_a_b_prod_fun$ A_b_prod_set$) A_b_prod_set$)
(declare-fun insert$ (A$) A_list_a_list_fun$)
(declare-fun lexord$ (A_a_prod_set$) A_list_a_list_prod_set$)
(declare-fun member$ (A_b_prod$ A_b_prod_set$) Bool)
(declare-fun collect$ (A_bool_fun$) A_set$)
(declare-fun entries$ (A_b_rbt$) A_b_prod_list$)
(declare-fun fun_app$ (A_b_prod_bool_fun$ A_b_prod$) Bool)
(declare-fun insert$a (A_b_prod$) A_b_prod_list_a_b_prod_list_fun$)
(declare-fun lexord$a (A_b_prod_a_b_prod_prod_set$) A_b_prod_list_a_b_prod_list_prod_set$)
(declare-fun listMem$ (A$ A_list$) Bool)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_set$) Bool)
(declare-fun member$c (A_b_prod_a_prod$ A_b_prod_a_prod_set$) Bool)
(declare-fun member$d (A_b_prod_list_a_b_prod_list_prod$ A_b_prod_list_a_b_prod_list_prod_set$) Bool)
(declare-fun member$e (A_b_prod_list$ A_b_prod_list_set$) Bool)
(declare-fun member$f (A_list_a_list_prod$ A_list_a_list_prod_set$) Bool)
(declare-fun member$g (A_list$ A_list_set$) Bool)
(declare-fun member$h (B_a_prod$ B_a_prod_set$) Bool)
(declare-fun member$i (B$ B_set$) Bool)
(declare-fun member$j (A_a_b_prod_prod$ A_a_b_prod_prod_set$) Bool)
(declare-fun member$k (A_a_prod$ A_a_prod_set$) Bool)
(declare-fun member$l (B_b_prod$ B_b_prod_set$) Bool)
(declare-fun member$m (B_a_prod_a_prod$ B_a_prod_a_prod_set$) Bool)
(declare-fun member$n (B_a_prod_b_prod$ B_a_prod_b_prod_set$) Bool)
(declare-fun member$o (A_b_a_prod_prod$ A_b_a_prod_prod_set$) Bool)
(declare-fun member$p (A_a_prod_a_a_prod_prod$ A_a_prod_a_a_prod_prod_set$) Bool)
(declare-fun member$q (A_list$) A_bool_fun$)
(declare-fun member$r (A_b_prod_list$) A_b_prod_bool_fun$)
(declare-fun rotate1$ (A_list$) A_list$)
(declare-fun collect$a (A_b_prod_bool_fun$) A_b_prod_set$)
(declare-fun entries$a (A_b_prod_a_b_prod_rbt$) A_b_prod_a_b_prod_prod_list$)
(declare-fun entries$b (A_b_prod_a_rbt$) A_b_prod_a_prod_list$)
(declare-fun entries$c (A_b_prod_list_a_b_prod_list_rbt$) A_b_prod_list_a_b_prod_list_prod_list$)
(declare-fun entries$d (A_list_a_list_rbt$) A_list_a_list_prod_list$)
(declare-fun entries$e (B_a_rbt$) B_a_prod_list$)
(declare-fun entries$f (A_a_b_prod_rbt$) A_a_b_prod_prod_list$)
(declare-fun entries$g (A_a_rbt$) A_a_prod_list$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod$) Bool)
(declare-fun fun_app$c (A_b_prod_list_a_b_prod_list_prod_bool_fun$ A_b_prod_list_a_b_prod_list_prod$) Bool)
(declare-fun fun_app$d (A_list_a_list_prod_bool_fun$ A_list_a_list_prod$) Bool)
(declare-fun fun_app$e (B_a_prod_bool_fun$ B_a_prod$) Bool)
(declare-fun fun_app$f (A_a_prod_bool_fun$ A_a_prod$) Bool)
(declare-fun fun_app$g (B_bool_fun$ B$) Bool)
(declare-fun fun_app$h (B_a_prod_a_b_prod_fun$ B_a_prod$) A_b_prod$)
(declare-fun fun_app$i (A_b_prod_b_a_prod_fun$ A_b_prod$) B_a_prod$)
(declare-fun fun_app$j (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$k (A_a_b_prod_bool_fun_fun$ A$) A_b_prod_bool_fun$)
(declare-fun fun_app$l (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$m (A_b_prod_list_a_b_prod_list_fun$ A_b_prod_list$) A_b_prod_list$)
(declare-fun fun_app$n (A_list_a_list_fun$ A_list$) A_list$)
(declare-fun fun_app$o (B_b_fun$ B$) B$)
(declare-fun fun_app$p (B_a_fun$ B$) A$)
(declare-fun fun_app$q (A_a_fun$ A$) A$)
(declare-fun fun_app$r (A_b_fun$ A$) B$)
(declare-fun fun_app$s (A_b_prod_a_b_prod_fun$ A_b_prod$) A_b_prod$)
(declare-fun fun_app$t (B_a_b_prod_fun$ B$) A_b_prod$)
(declare-fun fun_app$u (A_b_prod_b_fun$ A_b_prod$) B$)
(declare-fun fun_app$v (A_b_prod_a_fun$ A_b_prod$) A$)
(declare-fun fun_app$w (A_a_b_prod_fun$ A$) A_b_prod$)
(declare-fun fun_app$x (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$y (B_a_set_fun$ B$) A_set$)
(declare-fun fun_app$z (A_b_a_set_fun_fun$ A$) B_a_set_fun$)
(declare-fun listMem$a (A_b_prod$ A_b_prod_list$) Bool)
(declare-fun list_ex1$ (A_bool_fun$ A_list$) Bool)
(declare-fun rotate1$a (A_b_prod_list$) A_b_prod_list$)
(declare-fun case_prod$ (A_b_bool_fun_fun$) A_b_prod_bool_fun$)
(declare-fun fun_app$aa (B_a_b_prod_set_fun$ B$) A_b_prod_set$)
(declare-fun fun_app$ab (A_b_a_b_prod_set_fun_fun$ A$) B_a_b_prod_set_fun$)
(declare-fun list_ex1$a (A_b_prod_bool_fun$ A_b_prod_list$) Bool)
(declare-fun partition$ (A_bool_fun$ A_list$) A_list_a_list_prod$)
(declare-fun can_select$ (A_bool_fun$ A_set$) Bool)
(declare-fun case_prod$a (A_b_a_set_fun_fun$ A_b_prod$) A_set$)
(declare-fun case_prod$b (A_b_a_b_prod_set_fun_fun$ A_b_prod$) A_b_prod_set$)
(declare-fun partition$a (A_b_prod_bool_fun$ A_b_prod_list$) A_b_prod_list_a_b_prod_list_prod$)
(declare-fun can_select$a (A_b_prod_bool_fun$ A_b_prod_set$) Bool)
(assert (! (forall ((?v0 A_b_prod_set$) (?v1 A_b_prod$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$ (uua$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_set$) (?v1 A$)) (! (= (fun_app$a (uu$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$a (uu$ ?v0) ?v1)))) :named a1))
(assert (! (not (= (member$a k$ (set$ (keys$ t$))) (exists ((?v0 B$)) (member$ (pair$ k$ ?v0) (set$a (entries$ t$)))))) :named a2))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod_a_b_prod_rbt$)) (=> (member$b (pair$a ?v0 ?v1) (set$b (entries$a ?v2))) (member$ ?v0 (set$a (keys$a ?v2))))) :named a3))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$) (?v2 A_b_prod_a_rbt$)) (=> (member$c (pair$b ?v0 ?v1) (set$c (entries$b ?v2))) (member$ ?v0 (set$a (keys$b ?v2))))) :named a4))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list_a_b_prod_list_rbt$)) (=> (member$d (pair$c ?v0 ?v1) (set$d (entries$c ?v2))) (member$e ?v0 (set$e (keys$c ?v2))))) :named a5))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list_a_list_rbt$)) (=> (member$f (pair$d ?v0 ?v1) (set$f (entries$d ?v2))) (member$g ?v0 (set$g (keys$d ?v2))))) :named a6))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B_a_rbt$)) (=> (member$h (pair$e ?v0 ?v1) (set$h (entries$e ?v2))) (member$i ?v0 (set$i (keys$e ?v2))))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A_a_b_prod_rbt$)) (=> (member$j (pair$f ?v0 ?v1) (set$j (entries$f ?v2))) (member$a ?v0 (set$ (keys$f ?v2))))) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_a_rbt$)) (=> (member$k (pair$g ?v0 ?v1) (set$k (entries$g ?v2))) (member$a ?v0 (set$ (keys$g ?v2))))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_b_rbt$)) (=> (member$ (pair$ ?v0 ?v1) (set$a (entries$ ?v2))) (member$a ?v0 (set$ (keys$ ?v2))))) :named a10))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list$) (?v3 A_b_prod_list$)) (= (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a11))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (= (= (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (= (= (pair$e ?v0 ?v1) (pair$e ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A$) (?v3 A_b_prod$)) (= (= (pair$f ?v0 ?v1) (pair$f ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$g ?v0 ?v1) (pair$g ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a16))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list$) (?v3 A_b_prod_list$)) (= (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a17))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (= (= (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a18))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (= (= (pair$e ?v0 ?v1) (pair$e ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a19))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A$) (?v3 A_b_prod$)) (= (= (pair$f ?v0 ?v1) (pair$f ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a20))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (= (= (pair$g ?v0 ?v1) (pair$g ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a21))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a22))
(assert (! (forall ((?v0 A_b_prod_list_a_b_prod_list_prod$)) (=> (forall ((?v1 A_b_prod_list$) (?v2 A_b_prod_list$)) (=> (= ?v0 (pair$c ?v1 ?v2)) false)) false)) :named a23))
(assert (! (forall ((?v0 A_list_a_list_prod$)) (=> (forall ((?v1 A_list$) (?v2 A_list$)) (=> (= ?v0 (pair$d ?v1 ?v2)) false)) false)) :named a24))
(assert (! (forall ((?v0 B_a_prod$)) (=> (forall ((?v1 B$) (?v2 A$)) (=> (= ?v0 (pair$e ?v1 ?v2)) false)) false)) :named a25))
(assert (! (forall ((?v0 A_a_b_prod_prod$)) (=> (forall ((?v1 A$) (?v2 A_b_prod$)) (=> (= ?v0 (pair$f ?v1 ?v2)) false)) false)) :named a26))
(assert (! (forall ((?v0 A_a_prod$)) (=> (forall ((?v1 A$) (?v2 A$)) (=> (= ?v0 (pair$g ?v1 ?v2)) false)) false)) :named a27))
(assert (! (forall ((?v0 A_b_prod$)) (=> (forall ((?v1 A$) (?v2 B$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a28))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$) (?v1 A_a_b_prod_prod$)) (=> (forall ((?v2 A$) (?v3 A$) (?v4 B$)) (fun_app$b ?v0 (pair$f ?v2 (pair$ ?v3 ?v4)))) (fun_app$b ?v0 ?v1))) :named a29))
(assert (! (forall ((?v0 A_b_prod_list_a_b_prod_list_prod$)) (exists ((?v1 A_b_prod_list$) (?v2 A_b_prod_list$)) (= ?v0 (pair$c ?v1 ?v2)))) :named a30))
(assert (! (forall ((?v0 A_list_a_list_prod$)) (exists ((?v1 A_list$) (?v2 A_list$)) (= ?v0 (pair$d ?v1 ?v2)))) :named a31))
(assert (! (forall ((?v0 B_a_prod$)) (exists ((?v1 B$) (?v2 A$)) (= ?v0 (pair$e ?v1 ?v2)))) :named a32))
(assert (! (forall ((?v0 A_a_b_prod_prod$)) (exists ((?v1 A$) (?v2 A_b_prod$)) (= ?v0 (pair$f ?v1 ?v2)))) :named a33))
(assert (! (forall ((?v0 A_a_prod$)) (exists ((?v1 A$) (?v2 A$)) (= ?v0 (pair$g ?v1 ?v2)))) :named a34))
(assert (! (forall ((?v0 A_b_prod$)) (exists ((?v1 A$) (?v2 B$)) (= ?v0 (pair$ ?v1 ?v2)))) :named a35))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list$) (?v3 A_b_prod_list$)) (=> (and (= (pair$c ?v0 ?v1) (pair$c ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a36))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (=> (and (= (pair$d ?v0 ?v1) (pair$d ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a37))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B$) (?v3 A$)) (=> (and (= (pair$e ?v0 ?v1) (pair$e ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a38))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A$) (?v3 A_b_prod$)) (=> (and (= (pair$f ?v0 ?v1) (pair$f ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a39))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$) (?v3 A$)) (=> (and (= (pair$g ?v0 ?v1) (pair$g ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a40))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A$) (?v3 B$)) (=> (and (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a41))
(assert (! (forall ((?v0 A_b_prod_list_a_b_prod_list_prod$)) (=> (forall ((?v1 A_b_prod_list$) (?v2 A_b_prod_list$)) (=> (= ?v0 (pair$c ?v1 ?v2)) false)) false)) :named a42))
(assert (! (forall ((?v0 A_list_a_list_prod$)) (=> (forall ((?v1 A_list$) (?v2 A_list$)) (=> (= ?v0 (pair$d ?v1 ?v2)) false)) false)) :named a43))
(assert (! (forall ((?v0 B_a_prod$)) (=> (forall ((?v1 B$) (?v2 A$)) (=> (= ?v0 (pair$e ?v1 ?v2)) false)) false)) :named a44))
(assert (! (forall ((?v0 A_a_b_prod_prod$)) (=> (forall ((?v1 A$) (?v2 A_b_prod$)) (=> (= ?v0 (pair$f ?v1 ?v2)) false)) false)) :named a45))
(assert (! (forall ((?v0 A_a_prod$)) (=> (forall ((?v1 A$) (?v2 A$)) (=> (= ?v0 (pair$g ?v1 ?v2)) false)) false)) :named a46))
(assert (! (forall ((?v0 A_b_prod$)) (=> (forall ((?v1 A$) (?v2 B$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a47))
(assert (! (forall ((?v0 A_b_prod_list_a_b_prod_list_prod_bool_fun$) (?v1 A_b_prod_list_a_b_prod_list_prod$)) (=> (forall ((?v2 A_b_prod_list$) (?v3 A_b_prod_list$)) (fun_app$c ?v0 (pair$c ?v2 ?v3))) (fun_app$c ?v0 ?v1))) :named a48))
(assert (! (forall ((?v0 A_list_a_list_prod_bool_fun$) (?v1 A_list_a_list_prod$)) (=> (forall ((?v2 A_list$) (?v3 A_list$)) (fun_app$d ?v0 (pair$d ?v2 ?v3))) (fun_app$d ?v0 ?v1))) :named a49))
(assert (! (forall ((?v0 B_a_prod_bool_fun$) (?v1 B_a_prod$)) (=> (forall ((?v2 B$) (?v3 A$)) (fun_app$e ?v0 (pair$e ?v2 ?v3))) (fun_app$e ?v0 ?v1))) :named a50))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$) (?v1 A_a_b_prod_prod$)) (=> (forall ((?v2 A$) (?v3 A_b_prod$)) (fun_app$b ?v0 (pair$f ?v2 ?v3))) (fun_app$b ?v0 ?v1))) :named a51))
(assert (! (forall ((?v0 A_a_prod_bool_fun$) (?v1 A_a_prod$)) (=> (forall ((?v2 A$) (?v3 A$)) (fun_app$f ?v0 (pair$g ?v2 ?v3))) (fun_app$f ?v0 ?v1))) :named a52))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A_b_prod$)) (=> (forall ((?v2 A$) (?v3 B$)) (fun_app$ ?v0 (pair$ ?v2 ?v3))) (fun_app$ ?v0 ?v1))) :named a53))
(assert (! (forall ((?v0 A_a_b_prod_prod$)) (=> (forall ((?v1 A$) (?v2 A$) (?v3 B$)) (=> (= ?v0 (pair$f ?v1 (pair$ ?v2 ?v3))) false)) false)) :named a54))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list_a_b_prod_list_prod_set$) (?v3 A_b_prod_list$)) (=> (and (member$d (pair$c ?v0 ?v1) ?v2) (= ?v3 ?v1)) (member$d (pair$c ?v0 ?v3) ?v2))) :named a55))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list_a_list_prod_set$) (?v3 A_list$)) (=> (and (member$f (pair$d ?v0 ?v1) ?v2) (= ?v3 ?v1)) (member$f (pair$d ?v0 ?v3) ?v2))) :named a56))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B_a_prod_set$) (?v3 A$)) (=> (and (member$h (pair$e ?v0 ?v1) ?v2) (= ?v3 ?v1)) (member$h (pair$e ?v0 ?v3) ?v2))) :named a57))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A_a_b_prod_prod_set$) (?v3 A_b_prod$)) (=> (and (member$j (pair$f ?v0 ?v1) ?v2) (= ?v3 ?v1)) (member$j (pair$f ?v0 ?v3) ?v2))) :named a58))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_a_prod_set$) (?v3 A$)) (=> (and (member$k (pair$g ?v0 ?v1) ?v2) (= ?v3 ?v1)) (member$k (pair$g ?v0 ?v3) ?v2))) :named a59))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_b_prod_set$) (?v3 B$)) (=> (and (member$ (pair$ ?v0 ?v1) ?v2) (= ?v3 ?v1)) (member$ (pair$ ?v0 ?v3) ?v2))) :named a60))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$g (curry$ ?v0 ?v1) ?v2) (fun_app$ ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$g (curry$ ?v0 ?v1) ?v2)))) :named a61))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$)) (= (swap$ (pair$b ?v0 ?v1)) (pair$f ?v1 ?v0))) :named a62))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$)) (= (swap$a (pair$c ?v0 ?v1)) (pair$c ?v1 ?v0))) :named a63))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$)) (= (swap$b (pair$d ?v0 ?v1)) (pair$d ?v1 ?v0))) :named a64))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$)) (= (swap$c (pair$f ?v0 ?v1)) (pair$b ?v1 ?v0))) :named a65))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (swap$d (pair$g ?v0 ?v1)) (pair$g ?v1 ?v0))) :named a66))
(assert (! (forall ((?v0 B$) (?v1 A$)) (= (fun_app$h swap$e (pair$e ?v0 ?v1)) (pair$ ?v1 ?v0))) :named a67))
(assert (! (forall ((?v0 A$) (?v1 B$)) (= (fun_app$i swap$f (pair$ ?v0 ?v1)) (pair$e ?v1 ?v0))) :named a68))
(assert (! (forall ((?v0 A_b_prod_list_a_b_prod_list_prod_bool_fun$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list$)) (=> (fun_app$c ?v0 (pair$c ?v1 ?v2)) (curry$a ?v0 ?v1 ?v2))) :named a69))
(assert (! (forall ((?v0 A_list_a_list_prod_bool_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (fun_app$d ?v0 (pair$d ?v1 ?v2)) (curry$b ?v0 ?v1 ?v2))) :named a70))
(assert (! (forall ((?v0 B_a_prod_bool_fun$) (?v1 B$) (?v2 A$)) (=> (fun_app$e ?v0 (pair$e ?v1 ?v2)) (fun_app$a (fun_app$j (curry$c ?v0) ?v1) ?v2))) :named a71))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$) (?v1 A$) (?v2 A_b_prod$)) (=> (fun_app$b ?v0 (pair$f ?v1 ?v2)) (fun_app$ (fun_app$k (curry$d ?v0) ?v1) ?v2))) :named a72))
(assert (! (forall ((?v0 A_a_prod_bool_fun$) (?v1 A$) (?v2 A$)) (=> (fun_app$f ?v0 (pair$g ?v1 ?v2)) (fun_app$a (fun_app$l (curry$e ?v0) ?v1) ?v2))) :named a73))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A$) (?v2 B$)) (=> (fun_app$ ?v0 (pair$ ?v1 ?v2)) (fun_app$g (curry$ ?v0 ?v1) ?v2))) :named a74))
(assert (! (forall ((?v0 A_b_prod_list_a_b_prod_list_fun$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list$)) (! (= (apfst$ ?v0 (pair$c ?v1 ?v2)) (pair$c (fun_app$m ?v0 ?v1) ?v2)) :pattern ((apfst$ ?v0 (pair$c ?v1 ?v2))))) :named a75))
(assert (! (forall ((?v0 A_list_a_list_fun$) (?v1 A_list$) (?v2 A_list$)) (! (= (apfst$a ?v0 (pair$d ?v1 ?v2)) (pair$d (fun_app$n ?v0 ?v1) ?v2)) :pattern ((apfst$a ?v0 (pair$d ?v1 ?v2))))) :named a76))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$) (?v2 A$)) (! (= (apfst$b ?v0 (pair$e ?v1 ?v2)) (pair$e (fun_app$o ?v0 ?v1) ?v2)) :pattern ((apfst$b ?v0 (pair$e ?v1 ?v2))))) :named a77))
(assert (! (forall ((?v0 B_a_fun$) (?v1 B$) (?v2 A$)) (! (= (apfst$c ?v0 (pair$e ?v1 ?v2)) (pair$g (fun_app$p ?v0 ?v1) ?v2)) :pattern ((apfst$c ?v0 (pair$e ?v1 ?v2))))) :named a78))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_b_prod$)) (! (= (apfst$d ?v0 (pair$f ?v1 ?v2)) (pair$f (fun_app$q ?v0 ?v1) ?v2)) :pattern ((apfst$d ?v0 (pair$f ?v1 ?v2))))) :named a79))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A$) (?v2 A$)) (! (= (apfst$e ?v0 (pair$g ?v1 ?v2)) (pair$e (fun_app$r ?v0 ?v1) ?v2)) :pattern ((apfst$e ?v0 (pair$g ?v1 ?v2))))) :named a80))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A$)) (! (= (apfst$f ?v0 (pair$g ?v1 ?v2)) (pair$g (fun_app$q ?v0 ?v1) ?v2)) :pattern ((apfst$f ?v0 (pair$g ?v1 ?v2))))) :named a81))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$s (apfst$g ?v0) (pair$ ?v1 ?v2)) (pair$ (fun_app$q ?v0 ?v1) ?v2)) :pattern ((fun_app$s (apfst$g ?v0) (pair$ ?v1 ?v2))))) :named a82))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A$) (?v2 B$)) (! (= (fun_app$s (apsnd$ ?v0) (pair$ ?v1 ?v2)) (pair$ ?v1 (fun_app$o ?v0 ?v2))) :pattern ((fun_app$s (apsnd$ ?v0) (pair$ ?v1 ?v2))))) :named a83))
(assert (! (forall ((?v0 B_a_fun$) (?v1 A$) (?v2 B$)) (! (= (apsnd$a ?v0 (pair$ ?v1 ?v2)) (pair$g ?v1 (fun_app$p ?v0 ?v2))) :pattern ((apsnd$a ?v0 (pair$ ?v1 ?v2))))) :named a84))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B$) (?v2 A$)) (! (= (apsnd$b ?v0 (pair$e ?v1 ?v2)) (pair$e ?v1 (fun_app$q ?v0 ?v2))) :pattern ((apsnd$b ?v0 (pair$e ?v1 ?v2))))) :named a85))
(assert (! (forall ((?v0 A_b_fun$) (?v1 A$) (?v2 A$)) (! (= (apsnd$c ?v0 (pair$g ?v1 ?v2)) (pair$ ?v1 (fun_app$r ?v0 ?v2))) :pattern ((apsnd$c ?v0 (pair$g ?v1 ?v2))))) :named a86))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A$)) (! (= (apsnd$d ?v0 (pair$g ?v1 ?v2)) (pair$g ?v1 (fun_app$q ?v0 ?v2))) :pattern ((apsnd$d ?v0 (pair$g ?v1 ?v2))))) :named a87))
(assert (! (forall ((?v0 B_a_b_prod_fun$) (?v1 A$) (?v2 B$)) (! (= (apsnd$e ?v0 (pair$ ?v1 ?v2)) (pair$f ?v1 (fun_app$t ?v0 ?v2))) :pattern ((apsnd$e ?v0 (pair$ ?v1 ?v2))))) :named a88))
(assert (! (forall ((?v0 A_b_prod_b_fun$) (?v1 A$) (?v2 A_b_prod$)) (! (= (apsnd$f ?v0 (pair$f ?v1 ?v2)) (pair$ ?v1 (fun_app$u ?v0 ?v2))) :pattern ((apsnd$f ?v0 (pair$f ?v1 ?v2))))) :named a89))
(assert (! (forall ((?v0 A_b_prod_a_fun$) (?v1 A$) (?v2 A_b_prod$)) (! (= (apsnd$g ?v0 (pair$f ?v1 ?v2)) (pair$g ?v1 (fun_app$v ?v0 ?v2))) :pattern ((apsnd$g ?v0 (pair$f ?v1 ?v2))))) :named a90))
(assert (! (forall ((?v0 A_a_b_prod_fun$) (?v1 A$) (?v2 A$)) (! (= (apsnd$h ?v0 (pair$g ?v1 ?v2)) (pair$f ?v1 (fun_app$w ?v0 ?v2))) :pattern ((apsnd$h ?v0 (pair$g ?v1 ?v2))))) :named a91))
(assert (! (forall ((?v0 A_list_a_list_fun$) (?v1 A_list$) (?v2 A_list$)) (! (= (apsnd$i ?v0 (pair$d ?v1 ?v2)) (pair$d ?v1 (fun_app$n ?v0 ?v2))) :pattern ((apsnd$i ?v0 (pair$d ?v1 ?v2))))) :named a92))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod_list$) (?v3 A_b_prod_list$)) (=> (member$b (pair$a ?v0 ?v1) (set$b (zip$ ?v2 ?v3))) (member$ ?v0 (set$a ?v2)))) :named a93))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$) (?v2 A_b_prod_list$) (?v3 A_list$)) (=> (member$c (pair$b ?v0 ?v1) (set$c (zip$a ?v2 ?v3))) (member$ ?v0 (set$a ?v2)))) :named a94))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list_list$) (?v3 A_b_prod_list_list$)) (=> (member$d (pair$c ?v0 ?v1) (set$d (zip$b ?v2 ?v3))) (member$e ?v0 (set$e ?v2)))) :named a95))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list_list$)) (=> (member$f (pair$d ?v0 ?v1) (set$f (zip$c ?v2 ?v3))) (member$g ?v0 (set$g ?v2)))) :named a96))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B_list$) (?v3 A_list$)) (=> (member$h (pair$e ?v0 ?v1) (set$h (zip$d ?v2 ?v3))) (member$i ?v0 (set$i ?v2)))) :named a97))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A_list$) (?v3 A_b_prod_list$)) (=> (member$j (pair$f ?v0 ?v1) (set$j (zip$e ?v2 ?v3))) (member$a ?v0 (set$ ?v2)))) :named a98))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (=> (member$k (pair$g ?v0 ?v1) (set$k (zip$f ?v2 ?v3))) (member$a ?v0 (set$ ?v2)))) :named a99))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_list$) (?v3 B_list$)) (=> (member$ (pair$ ?v0 ?v1) (set$a (zip$g ?v2 ?v3))) (member$a ?v0 (set$ ?v2)))) :named a100))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod_list$) (?v3 A_b_prod_list$)) (=> (member$b (pair$a ?v0 ?v1) (set$b (zip$ ?v2 ?v3))) (member$ ?v1 (set$a ?v3)))) :named a101))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$) (?v2 A_b_prod_list$) (?v3 A_list$)) (=> (member$c (pair$b ?v0 ?v1) (set$c (zip$a ?v2 ?v3))) (member$a ?v1 (set$ ?v3)))) :named a102))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list_list$) (?v3 A_b_prod_list_list$)) (=> (member$d (pair$c ?v0 ?v1) (set$d (zip$b ?v2 ?v3))) (member$e ?v1 (set$e ?v3)))) :named a103))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list_list$) (?v3 A_list_list$)) (=> (member$f (pair$d ?v0 ?v1) (set$f (zip$c ?v2 ?v3))) (member$g ?v1 (set$g ?v3)))) :named a104))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B_list$) (?v3 A_list$)) (=> (member$h (pair$e ?v0 ?v1) (set$h (zip$d ?v2 ?v3))) (member$a ?v1 (set$ ?v3)))) :named a105))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A_list$) (?v3 A_b_prod_list$)) (=> (member$j (pair$f ?v0 ?v1) (set$j (zip$e ?v2 ?v3))) (member$ ?v1 (set$a ?v3)))) :named a106))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (=> (member$k (pair$g ?v0 ?v1) (set$k (zip$f ?v2 ?v3))) (member$a ?v1 (set$ ?v3)))) :named a107))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_list$) (?v3 B_list$)) (=> (member$ (pair$ ?v0 ?v1) (set$a (zip$g ?v2 ?v3))) (member$i ?v1 (set$i ?v3)))) :named a108))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_list$) (?v3 A_list$)) (=> (and (member$k (pair$g ?v0 ?v1) (set$k (zip$f ?v2 ?v3))) (=> (and (member$a ?v0 (set$ ?v2)) (member$a ?v1 (set$ ?v3))) false)) false)) :named a109))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 A_list$) (?v3 B_list$)) (=> (and (member$ (pair$ ?v0 ?v1) (set$a (zip$g ?v2 ?v3))) (=> (and (member$a ?v0 (set$ ?v2)) (member$i ?v1 (set$i ?v3))) false)) false)) :named a110))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod$) (?v2 A_list$) (?v3 A_b_prod_list$)) (=> (and (member$j (pair$f ?v0 ?v1) (set$j (zip$e ?v2 ?v3))) (=> (and (member$a ?v0 (set$ ?v2)) (member$ ?v1 (set$a ?v3))) false)) false)) :named a111))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$) (?v2 A_b_prod_list$) (?v3 A_list$)) (=> (and (member$c (pair$b ?v0 ?v1) (set$c (zip$a ?v2 ?v3))) (=> (and (member$ ?v0 (set$a ?v2)) (member$a ?v1 (set$ ?v3))) false)) false)) :named a112))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod_list$) (?v3 A_b_prod_list$)) (=> (and (member$b (pair$a ?v0 ?v1) (set$b (zip$ ?v2 ?v3))) (=> (and (member$ ?v0 (set$a ?v2)) (member$ ?v1 (set$a ?v3))) false)) false)) :named a113))
(assert (! (forall ((?v0 B$) (?v1 B$) (?v2 B_list$) (?v3 B_list$)) (=> (and (member$l (pair$h ?v0 ?v1) (set$l (zip$h ?v2 ?v3))) (=> (and (member$i ?v0 (set$i ?v2)) (member$i ?v1 (set$i ?v3))) false)) false)) :named a114))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 B_list$) (?v3 A_list$)) (=> (and (member$h (pair$e ?v0 ?v1) (set$h (zip$d ?v2 ?v3))) (=> (and (member$i ?v0 (set$i ?v2)) (member$a ?v1 (set$ ?v3))) false)) false)) :named a115))
(assert (! (forall ((?v0 B_a_prod$) (?v1 A$) (?v2 B_a_prod_list$) (?v3 A_list$)) (=> (and (member$m (pair$i ?v0 ?v1) (set$m (zip$i ?v2 ?v3))) (=> (and (member$h ?v0 (set$h ?v2)) (member$a ?v1 (set$ ?v3))) false)) false)) :named a116))
(assert (! (forall ((?v0 B_a_prod$) (?v1 B$) (?v2 B_a_prod_list$) (?v3 B_list$)) (=> (and (member$n (pair$j ?v0 ?v1) (set$n (zip$j ?v2 ?v3))) (=> (and (member$h ?v0 (set$h ?v2)) (member$i ?v1 (set$i ?v3))) false)) false)) :named a117))
(assert (! (forall ((?v0 A$) (?v1 B_a_prod$) (?v2 A_list$) (?v3 B_a_prod_list$)) (=> (and (member$o (pair$k ?v0 ?v1) (set$o (zip$k ?v2 ?v3))) (=> (and (member$a ?v0 (set$ ?v2)) (member$h ?v1 (set$h ?v3))) false)) false)) :named a118))
(assert (! (forall ((?v0 B_a_prod$)) (= (fun_app$i swap$f (fun_app$h swap$e ?v0)) ?v0)) :named a119))
(assert (! (forall ((?v0 A_b_prod$)) (= (fun_app$h swap$e (fun_app$i swap$f ?v0)) ?v0)) :named a120))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_a_fun$) (?v2 A_b_prod$)) (= (fun_app$s (apsnd$ ?v0) (fun_app$s (apfst$g ?v1) ?v2)) (fun_app$s (apfst$g ?v1) (fun_app$s (apsnd$ ?v0) ?v2)))) :named a121))
(assert (! (forall ((?v0 A_b_prod_list_a_b_prod_list_prod_bool_fun$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list$)) (=> (and (curry$a ?v0 ?v1 ?v2) (=> (fun_app$c ?v0 (pair$c ?v1 ?v2)) false)) false)) :named a122))
(assert (! (forall ((?v0 A_list_a_list_prod_bool_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (and (curry$b ?v0 ?v1 ?v2) (=> (fun_app$d ?v0 (pair$d ?v1 ?v2)) false)) false)) :named a123))
(assert (! (forall ((?v0 B_a_prod_bool_fun$) (?v1 B$) (?v2 A$)) (=> (and (fun_app$a (fun_app$j (curry$c ?v0) ?v1) ?v2) (=> (fun_app$e ?v0 (pair$e ?v1 ?v2)) false)) false)) :named a124))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$) (?v1 A$) (?v2 A_b_prod$)) (=> (and (fun_app$ (fun_app$k (curry$d ?v0) ?v1) ?v2) (=> (fun_app$b ?v0 (pair$f ?v1 ?v2)) false)) false)) :named a125))
(assert (! (forall ((?v0 A_a_prod_bool_fun$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$l (curry$e ?v0) ?v1) ?v2) (=> (fun_app$f ?v0 (pair$g ?v1 ?v2)) false)) false)) :named a126))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A$) (?v2 B$)) (=> (and (fun_app$g (curry$ ?v0 ?v1) ?v2) (=> (fun_app$ ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a127))
(assert (! (forall ((?v0 A_b_prod_list_a_b_prod_list_prod_bool_fun$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list$)) (=> (curry$a ?v0 ?v1 ?v2) (fun_app$c ?v0 (pair$c ?v1 ?v2)))) :named a128))
(assert (! (forall ((?v0 A_list_a_list_prod_bool_fun$) (?v1 A_list$) (?v2 A_list$)) (=> (curry$b ?v0 ?v1 ?v2) (fun_app$d ?v0 (pair$d ?v1 ?v2)))) :named a129))
(assert (! (forall ((?v0 B_a_prod_bool_fun$) (?v1 B$) (?v2 A$)) (=> (fun_app$a (fun_app$j (curry$c ?v0) ?v1) ?v2) (fun_app$e ?v0 (pair$e ?v1 ?v2)))) :named a130))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$) (?v1 A$) (?v2 A_b_prod$)) (=> (fun_app$ (fun_app$k (curry$d ?v0) ?v1) ?v2) (fun_app$b ?v0 (pair$f ?v1 ?v2)))) :named a131))
(assert (! (forall ((?v0 A_a_prod_bool_fun$) (?v1 A$) (?v2 A$)) (=> (fun_app$a (fun_app$l (curry$e ?v0) ?v1) ?v2) (fun_app$f ?v0 (pair$g ?v1 ?v2)))) :named a132))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A$) (?v2 B$)) (=> (fun_app$g (curry$ ?v0 ?v1) ?v2) (fun_app$ ?v0 (pair$ ?v1 ?v2)))) :named a133))
(assert (! (forall ((?v0 A_a_prod$) (?v1 A_a_prod$) (?v2 A_a_prod_list$)) (= (member$p (pair$l ?v0 ?v1) (set$p (zip$l ?v2 ?v2))) (and (member$k ?v0 (set$k ?v2)) (= ?v0 ?v1)))) :named a134))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list_list$)) (= (member$d (pair$c ?v0 ?v1) (set$d (zip$b ?v2 ?v2))) (and (member$e ?v0 (set$e ?v2)) (= ?v0 ?v1)))) :named a135))
(assert (! (forall ((?v0 A_list$) (?v1 A_list$) (?v2 A_list_list$)) (= (member$f (pair$d ?v0 ?v1) (set$f (zip$c ?v2 ?v2))) (and (member$g ?v0 (set$g ?v2)) (= ?v0 ?v1)))) :named a136))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A_list$)) (= (member$k (pair$g ?v0 ?v1) (set$k (zip$f ?v2 ?v2))) (and (member$a ?v0 (set$ ?v2)) (= ?v0 ?v1)))) :named a137))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_prod_list$)) (= (member$b (pair$a ?v0 ?v1) (set$b (zip$ ?v2 ?v2))) (and (member$ ?v0 (set$a ?v2)) (= ?v0 ?v1)))) :named a138))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (= (member$a ?v0 (set$ ?v1)) (fun_app$a (member$q ?v1) ?v0))) :named a139))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_list$)) (= (member$ ?v0 (set$a ?v1)) (fun_app$ (member$r ?v1) ?v0))) :named a140))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (=> (member$a ?v0 (set$ ?v1)) (= (fun_app$n (insert$ ?v0) ?v1) ?v1)) :pattern ((fun_app$n (insert$ ?v0) ?v1)))) :named a141))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_list$)) (! (=> (member$ ?v0 (set$a ?v1)) (= (fun_app$m (insert$a ?v0) ?v1) ?v1)) :pattern ((fun_app$m (insert$a ?v0) ?v1)))) :named a142))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_list$)) (= (list_ex1$ ?v0 ?v1) (exists ((?v2 A$)) (and (and (member$a ?v2 (set$ ?v1)) (fun_app$a ?v0 ?v2)) (forall ((?v3 A$)) (=> (and (member$a ?v3 (set$ ?v1)) (fun_app$a ?v0 ?v3)) (= ?v3 ?v2))))))) :named a143))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A_b_prod_list$)) (= (list_ex1$a ?v0 ?v1) (exists ((?v2 A_b_prod$)) (and (and (member$ ?v2 (set$a ?v1)) (fun_app$ ?v0 ?v2)) (forall ((?v3 A_b_prod$)) (=> (and (member$ ?v3 (set$a ?v1)) (fun_app$ ?v0 ?v3)) (= ?v3 ?v2))))))) :named a144))
(assert (! (forall ((?v0 B$) (?v1 A$) (?v2 A_b_prod_set$)) (= (member$h (pair$e ?v0 ?v1) (image$ swap$f ?v2)) (member$ (pair$ ?v1 ?v0) ?v2))) :named a145))
(assert (! (forall ((?v0 A$) (?v1 B$) (?v2 B_a_prod_set$)) (= (member$ (pair$ ?v0 ?v1) (image$a swap$e ?v2)) (member$h (pair$e ?v1 ?v0) ?v2))) :named a146))
(assert (! (forall ((?v0 A_list$) (?v1 A_a_prod_set$) (?v2 A_list$) (?v3 A_list$)) (=> (and (forall ((?v4 A$) (?v5 A$) (?v6 A$)) (=> (and (member$a ?v4 (set$ ?v0)) (and (member$k (pair$g ?v4 ?v5) ?v1) (member$k (pair$g ?v5 ?v6) ?v1))) (member$k (pair$g ?v4 ?v6) ?v1))) (and (member$f (pair$d ?v0 ?v2) (lexord$ ?v1)) (member$f (pair$d ?v2 ?v3) (lexord$ ?v1)))) (member$f (pair$d ?v0 ?v3) (lexord$ ?v1)))) :named a147))
(assert (! (forall ((?v0 A_b_prod_list$) (?v1 A_b_prod_a_b_prod_prod_set$) (?v2 A_b_prod_list$) (?v3 A_b_prod_list$)) (=> (and (forall ((?v4 A_b_prod$) (?v5 A_b_prod$) (?v6 A_b_prod$)) (=> (and (member$ ?v4 (set$a ?v0)) (and (member$b (pair$a ?v4 ?v5) ?v1) (member$b (pair$a ?v5 ?v6) ?v1))) (member$b (pair$a ?v4 ?v6) ?v1))) (and (member$d (pair$c ?v0 ?v2) (lexord$a ?v1)) (member$d (pair$c ?v2 ?v3) (lexord$a ?v1)))) (member$d (pair$c ?v0 ?v3) (lexord$a ?v1)))) :named a148))
(assert (! (forall ((?v0 A_list$)) (= (set$ (rotate1$ ?v0)) (set$ ?v0))) :named a149))
(assert (! (forall ((?v0 A_b_prod_list$)) (= (set$a (rotate1$a ?v0)) (set$a ?v0))) :named a150))
(assert (! (forall ((?v0 A$) (?v1 A_list$)) (! (= (listMem$ ?v0 ?v1) (member$a ?v0 (set$ ?v1))) :pattern ((listMem$ ?v0 ?v1)))) :named a151))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_list$)) (! (= (listMem$a ?v0 ?v1) (member$ ?v0 (set$a ?v1))) :pattern ((listMem$a ?v0 ?v1)))) :named a152))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 B$)) (=> (fun_app$g (fun_app$x ?v0 ?v1) ?v2) (fun_app$ (case_prod$ ?v0) (pair$ ?v1 ?v2)))) :named a153))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 B$)) (=> (fun_app$g (fun_app$x ?v0 ?v1) ?v2) (fun_app$ (case_prod$ ?v0) (pair$ ?v1 ?v2)))) :named a154))
(assert (! (forall ((?v0 A_set$)) (= (collect$ (uu$ ?v0)) ?v0)) :named a155))
(assert (! (forall ((?v0 A_b_prod_set$)) (= (collect$a (uua$ ?v0)) ?v0)) :named a156))
(assert (! (forall ((?v0 A$) (?v1 A_bool_fun$)) (= (member$a ?v0 (collect$ ?v1)) (fun_app$a ?v1 ?v0))) :named a157))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_bool_fun$)) (= (member$ ?v0 (collect$a ?v1)) (fun_app$ ?v1 ?v0))) :named a158))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_bool_fun_fun$)) (=> (forall ((?v2 A$) (?v3 B$)) (=> (= ?v0 (pair$ ?v2 ?v3)) (fun_app$g (fun_app$x ?v1 ?v2) ?v3))) (fun_app$ (case_prod$ ?v1) ?v0))) :named a159))
(assert (! (forall ((?v0 A$) (?v1 A_b_a_set_fun_fun$) (?v2 A$) (?v3 B$)) (=> (member$a ?v0 (fun_app$y (fun_app$z ?v1 ?v2) ?v3)) (member$a ?v0 (case_prod$a ?v1 (pair$ ?v2 ?v3))))) :named a160))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_a_b_prod_set_fun_fun$) (?v2 A$) (?v3 B$)) (=> (member$ ?v0 (fun_app$aa (fun_app$ab ?v1 ?v2) ?v3)) (member$ ?v0 (case_prod$b ?v1 (pair$ ?v2 ?v3))))) :named a161))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A$) (?v2 A_b_a_set_fun_fun$)) (=> (forall ((?v3 A$) (?v4 B$)) (=> (= ?v0 (pair$ ?v3 ?v4)) (member$a ?v1 (fun_app$y (fun_app$z ?v2 ?v3) ?v4)))) (member$a ?v1 (case_prod$a ?v2 ?v0)))) :named a162))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod$) (?v2 A_b_a_b_prod_set_fun_fun$)) (=> (forall ((?v3 A$) (?v4 B$)) (=> (= ?v0 (pair$ ?v3 ?v4)) (member$ ?v1 (fun_app$aa (fun_app$ab ?v2 ?v3) ?v4)))) (member$ ?v1 (case_prod$b ?v2 ?v0)))) :named a163))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A_b_prod$)) (=> (and (fun_app$ (case_prod$ ?v0) ?v1) (forall ((?v2 A$) (?v3 B$)) (=> (and (= ?v1 (pair$ ?v2 ?v3)) (fun_app$g (fun_app$x ?v0 ?v2) ?v3)) false))) false)) :named a164))
(assert (! (forall ((?v0 A_b_bool_fun_fun$) (?v1 A$) (?v2 B$)) (=> (fun_app$ (case_prod$ ?v0) (pair$ ?v1 ?v2)) (fun_app$g (fun_app$x ?v0 ?v1) ?v2))) :named a165))
(assert (! (forall ((?v0 A$) (?v1 A_b_a_set_fun_fun$) (?v2 A_b_prod$)) (=> (and (member$a ?v0 (case_prod$a ?v1 ?v2)) (forall ((?v3 A$) (?v4 B$)) (=> (and (= ?v2 (pair$ ?v3 ?v4)) (member$a ?v0 (fun_app$y (fun_app$z ?v1 ?v3) ?v4))) false))) false)) :named a166))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_a_b_prod_set_fun_fun$) (?v2 A_b_prod$)) (=> (and (member$ ?v0 (case_prod$b ?v1 ?v2)) (forall ((?v3 A$) (?v4 B$)) (=> (and (= ?v2 (pair$ ?v3 ?v4)) (member$ ?v0 (fun_app$aa (fun_app$ab ?v1 ?v3) ?v4))) false))) false)) :named a167))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_list$)) (= (can_select$ ?v0 (set$ ?v1)) (list_ex1$ ?v0 ?v1))) :named a168))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A_b_prod_list$)) (= (can_select$a ?v0 (set$a ?v1)) (list_ex1$a ?v0 ?v1))) :named a169))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$q ?v1 ?v2)) (member$a ?v2 ?v3)) (member$a ?v0 (image$b ?v1 ?v3)))) :named a170))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_a_b_prod_fun$) (?v2 A$) (?v3 A_set$)) (=> (and (= ?v0 (fun_app$w ?v1 ?v2)) (member$a ?v2 ?v3)) (member$ ?v0 (image$c ?v1 ?v3)))) :named a171))
(assert (! (forall ((?v0 A$) (?v1 A_b_prod_a_fun$) (?v2 A_b_prod$) (?v3 A_b_prod_set$)) (=> (and (= ?v0 (fun_app$v ?v1 ?v2)) (member$ ?v2 ?v3)) (member$a ?v0 (image$d ?v1 ?v3)))) :named a172))
(assert (! (forall ((?v0 A_b_prod$) (?v1 A_b_prod_a_b_prod_fun$) (?v2 A_b_prod$) (?v3 A_b_prod_set$)) (=> (and (= ?v0 (fun_app$s ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (image$e ?v1 ?v3)))) :named a173))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_list$) (?v2 A_list$) (?v3 A_list$)) (=> (= (partition$ ?v0 ?v1) (pair$d ?v2 ?v3)) (and (forall ((?v4 A$)) (=> (member$a ?v4 (set$ ?v2)) (fun_app$a ?v0 ?v4))) (forall ((?v4 A$)) (=> (member$a ?v4 (set$ ?v3)) (not (fun_app$a ?v0 ?v4))))))) :named a174))
(assert (! (forall ((?v0 A_b_prod_bool_fun$) (?v1 A_b_prod_list$) (?v2 A_b_prod_list$) (?v3 A_b_prod_list$)) (=> (= (partition$a ?v0 ?v1) (pair$c ?v2 ?v3)) (and (forall ((?v4 A_b_prod$)) (=> (member$ ?v4 (set$a ?v2)) (fun_app$ ?v0 ?v4))) (forall ((?v4 A_b_prod$)) (=> (member$ ?v4 (set$a ?v3)) (not (fun_app$ ?v0 ?v4))))))) :named a175))
(assert (! (forall ((?v0 A$)) (member$a ?v0 top$)) :named a176))
(assert (! (forall ((?v0 A_b_prod$)) (member$ ?v0 top$a)) :named a177))
(assert (! (forall ((?v0 A$) (?v1 A_list$) (?v2 B$) (?v3 B_list$)) (! (= (zip$g (cons$ ?v0 ?v1) (cons$i ?v2 ?v3)) (cons$a (pair$ ?v0 ?v2) (zip$g ?v1 ?v3))) :pattern ((zip$g (cons$ ?v0 ?v1) (cons$i ?v2 ?v3))))) :named a178))
(check-sat)
;(get-unsat-core)
