; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 149
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort C_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort A_c_b_fun_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-datatypes () ((B_option$ (none$) (some$ (the$ B$)))
  (Color$ (r$) (b$))
  (A_b_rbt$ (empty$) (branch$ (select$ Color$) (selecta$ A_b_rbt$) (selectb$ A$) (selectc$ B$) (selectd$ A_b_rbt$)))
  (A_c_rbt$ (empty$a) (branch$a (selecte$ Color$) (selectf$ A_c_rbt$) (selectg$ A$) (selecth$ C$) (selecti$ A_c_rbt$)))
  (C_option$ (none$a) (some$a (the$a C$)))))
(declare-fun f$ () A_c_b_fun_fun$)
(declare-fun t$ () A_c_rbt$)
(declare-fun x$ () A$)
(declare-fun map$ (A_c_b_fun_fun$ A_c_rbt$) A_b_rbt$)
(declare-fun less$ () A_a_bool_fun_fun$)
(declare-fun fun_app$ (A_c_b_fun_fun$ A$) C_b_fun$)
(declare-fun fun_app$a (A_bool_fun$ A$) Bool)
(declare-fun fun_app$b (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun map_option$ (C_b_fun$ C_option$) B_option$)
(declare-fun rbt_lookup$ (A_a_bool_fun_fun$ A_b_rbt$ A$) B_option$)
(declare-fun rbt_lookup$a (A_a_bool_fun_fun$ A_c_rbt$ A$) C_option$)
(assert (! (not (= (rbt_lookup$ less$ (map$ f$ t$) x$) (map_option$ (fun_app$ f$ x$) (rbt_lookup$a less$ t$ x$)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (not (fun_app$a (fun_app$b less$ ?v0) ?v1)) (or (fun_app$a (fun_app$b less$ ?v1) ?v0) (= ?v0 ?v1)))) :named a1))
(assert (! (forall ((?v0 A$) (?v1 A$)) (= (not (= ?v0 ?v1)) (or (fun_app$a (fun_app$b less$ ?v0) ?v1) (fun_app$a (fun_app$b less$ ?v1) ?v0)))) :named a2))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (=> (fun_app$a (fun_app$b less$ ?v0) ?v1) false) (and (=> (= ?v0 ?v1) false) (=> (fun_app$a (fun_app$b less$ ?v1) ?v0) false))) false)) :named a3))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$a (fun_app$b less$ ?v0) ?v1) (=> (not false) (fun_app$a (fun_app$b less$ ?v1) ?v0))) false)) :named a4))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$b less$ ?v0) ?v1) (fun_app$a (fun_app$b less$ ?v1) ?v2)) (fun_app$a (fun_app$b less$ ?v0) ?v2))) :named a5))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$b less$ ?v0) ?v1) (fun_app$a (fun_app$b less$ ?v1) ?v2)) (fun_app$a (fun_app$b less$ ?v0) ?v2))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$b less$ ?v0) ?v1) (fun_app$a (fun_app$b less$ ?v2) ?v0)) (fun_app$a (fun_app$b less$ ?v2) ?v1))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$a (fun_app$b less$ ?v0) ?v1) (fun_app$a (fun_app$b less$ ?v1) ?v0)) false)) :named a8))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$a (fun_app$b less$ ?v0) ?v1) (fun_app$a (fun_app$b less$ ?v1) ?v0)) false)) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (and (fun_app$a (fun_app$b less$ ?v0) ?v1) (fun_app$a (fun_app$b less$ ?v1) ?v0)) false)) :named a10))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 A$)) (=> (and (fun_app$a (fun_app$b less$ ?v0) ?v1) (= ?v1 ?v2)) (fun_app$a (fun_app$b less$ ?v0) ?v2))) :named a11))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$a (fun_app$b less$ ?v0) ?v1) (= (= ?v1 ?v0) false))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$a (fun_app$b less$ ?v0) ?v1) (= (= ?v0 ?v1) false))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A$) (?v2 Bool)) (=> (fun_app$a (fun_app$b less$ ?v0) ?v1) (= (=> (fun_app$a (fun_app$b less$ ?v1) ?v0) ?v2) true))) :named a14))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$a (fun_app$b less$ ?v0) ?v1) (= (not (fun_app$a (fun_app$b less$ ?v1) ?v0)) true))) :named a15))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$a (fun_app$b less$ ?v0) ?v1) (not (fun_app$a (fun_app$b less$ ?v1) ?v0)))) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A$)) (=> (fun_app$a (fun_app$b less$ ?v0) ?v1) (not (= ?v0 ?v1)))) :named a17))
(check-sat)
;(get-unsat-core)
