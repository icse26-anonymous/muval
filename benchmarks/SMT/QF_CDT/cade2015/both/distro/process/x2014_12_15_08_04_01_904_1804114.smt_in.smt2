; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 67
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_process_bool_fun$ 0)
(declare-sort B_a_b_process_term_fun$ 0)
(declare-sort A_process_a_process_bool_fun_fun$ 0)
(declare-codatatypes () ((A_process$ (action$ (prefOf$ A$) (contOf$ A_process$)) (choice$ (ch1Of$ A_process$) (ch2Of$ A_process$)))))
(declare-datatypes () ((A_b_process_term$ (var$ (select$ B$)) (proc$ (selecta$ A_process$)) (act$ (selectb$ A$) (selectc$ A_b_process_term$)) (ch$ (selectd$ A_b_process_term$) (selecte$ A_b_process_term$)))))
(declare-fun p$ () A_process$)
(declare-fun q$ () A_process$)
(declare-fun p$a () A_process$)
(declare-fun pa$ () A_process$)
(declare-fun uu$ () A_a_fun$)
(declare-fun cH1$ (B_a_b_process_term_fun$ A_b_process_term$) A_b_process_term$)
(declare-fun cH2$ (B_a_b_process_term_fun$ A_b_process_term$) A_b_process_term$)
(declare-fun sys$ () B_a_b_process_term_fun$)
(declare-fun cont$ (B_a_b_process_term_fun$ A_b_process_term$) A_b_process_term$)
(declare-fun pref$ (B_a_b_process_term_fun$ A_b_process_term$) A$)
(declare-fun isACT$ (B_a_b_process_term_fun$ A_b_process_term$) Bool)
(declare-fun fun_app$ (A_a_fun$ A$) A$)
(declare-fun fun_app$a (A_process_bool_fun$ A_process$) Bool)
(declare-fun fun_app$b (A_process_a_process_bool_fun_fun$ A_process$) A_process_bool_fun$)
(declare-fun fun_app$c (A_bool_fun$ A$) Bool)
(declare-fun isAction$ (A_process$) Bool)
(declare-fun isChoice$ (A_process$) Bool)
(declare-fun solution$ (B_a_b_process_term_fun$ A_b_process_term$) A_process$)
(declare-fun map_process$ (A_a_fun$ A_process$) A_process$)
(declare-fun pred_process$ (A_bool_fun$ A_process$) Bool)
(declare-fun pred_process_term$ (A_bool_fun$ B_bool_fun$ A_b_process_term$) Bool)
(assert (! (forall ((?v0 A$)) (! (= (fun_app$ uu$ ?v0) ?v0) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (and (= (isAction$ pa$) (isAction$ p$)) (= (isChoice$ pa$) (isChoice$ p$)))) :named a1))
(assert (! (or (isAction$ pa$) (isChoice$ pa$)) :named a2))
(assert (! (forall ((?v0 A_process$)) (=> (and (=> (isAction$ ?v0) false) (=> (isChoice$ ?v0) false)) false)) :named a3))
(assert (! (forall ((?v0 A_process$)) (=> (isAction$ ?v0) (not (isChoice$ ?v0)))) :named a4))
(assert (! (forall ((?v0 A_process$)) (=> (isChoice$ ?v0) (not (isAction$ ?v0)))) :named a5))
(assert (! (forall ((?v0 A_process$)) (or (isAction$ ?v0) (isChoice$ ?v0))) :named a6))
(assert (! (forall ((?v0 A_process$)) (not (and (isAction$ ?v0) (isChoice$ ?v0)))) :named a7))
(assert (! (= p$ (solution$ sys$ (proc$ pa$))) :named a8))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_process$)) (= (isChoice$ (map_process$ ?v0 ?v1)) (isChoice$ ?v1))) :named a9))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_process$)) (= (isAction$ (map_process$ ?v0 ?v1)) (isAction$ ?v1))) :named a10))
(assert (! (forall ((?v0 A_process$)) (= (isChoice$ ?v0) (exists ((?v1 A_process$) (?v2 A_process$)) (= ?v0 (choice$ ?v1 ?v2))))) :named a11))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$) (?v2 A_process$)) (=> (= ?v0 (choice$ ?v1 ?v2)) (isChoice$ ?v0))) :named a12))
(assert (! (forall ((?v0 A$) (?v1 A_process$)) (not (isChoice$ (action$ ?v0 ?v1)))) :named a13))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (isChoice$ (choice$ ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 A_process$)) (= (isAction$ ?v0) (exists ((?v1 A$) (?v2 A_process$)) (= ?v0 (action$ ?v1 ?v2))))) :named a15))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (= (= (proc$ ?v0) (proc$ ?v1)) (= ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 A$) (?v1 A_process$) (?v2 A$) (?v3 A_process$)) (= (= (action$ ?v0 ?v1) (action$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a17))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$) (?v2 A_process$) (?v3 A_process$)) (= (= (choice$ ?v0 ?v1) (choice$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a18))
(assert (! (= q$ (solution$ sys$ (proc$ p$a))) :named a19))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_process$)) (! (= (map_process$ ?v0 (action$ ?v1 ?v2)) (action$ (fun_app$ ?v0 ?v1) (map_process$ ?v0 ?v2))) :pattern ((map_process$ ?v0 (action$ ?v1 ?v2))))) :named a20))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_process$) (?v2 A_process$)) (! (= (map_process$ ?v0 (choice$ ?v1 ?v2)) (choice$ (map_process$ ?v0 ?v1) (map_process$ ?v0 ?v2))) :pattern ((map_process$ ?v0 (choice$ ?v1 ?v2))))) :named a21))
(assert (! (forall ((?v0 A_process$)) (= (map_process$ uu$ ?v0) ?v0)) :named a22))
(assert (! (forall ((?v0 A_process$)) (=> (and (forall ((?v1 A$) (?v2 A_process$)) (=> (= ?v0 (action$ ?v1 ?v2)) false)) (forall ((?v1 A_process$) (?v2 A_process$)) (=> (= ?v0 (choice$ ?v1 ?v2)) false))) false)) :named a23))
(assert (! (forall ((?v0 A$) (?v1 A_process$) (?v2 A_process$) (?v3 A_process$)) (not (= (action$ ?v0 ?v1) (choice$ ?v2 ?v3)))) :named a24))
(assert (! (forall ((?v0 A_process_a_process_bool_fun_fun$) (?v1 A_process$) (?v2 A_process$)) (=> (and (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (and (forall ((?v3 A_process$) (?v4 A_process$)) (=> (fun_app$a (fun_app$b ?v0 ?v3) ?v4) (and (= (isAction$ ?v3) (isAction$ ?v4)) (= (isChoice$ ?v3) (isChoice$ ?v4))))) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_process$) (?v6 A_process$)) (=> (fun_app$a (fun_app$b ?v0 (action$ ?v3 ?v5)) (action$ ?v4 ?v6)) (and (= ?v3 ?v4) (fun_app$a (fun_app$b ?v0 ?v5) ?v6)))) (forall ((?v3 A_process$) (?v4 A_process$) (?v5 A_process$) (?v6 A_process$)) (=> (fun_app$a (fun_app$b ?v0 (choice$ ?v3 ?v4)) (choice$ ?v5 ?v6)) (and (fun_app$a (fun_app$b ?v0 ?v3) ?v5) (fun_app$a (fun_app$b ?v0 ?v4) ?v6))))))) (= ?v1 ?v2))) :named a25))
(assert (! (forall ((?v0 A_process_a_process_bool_fun_fun$) (?v1 A_process$) (?v2 A_process$)) (=> (and (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (and (forall ((?v3 A_process$) (?v4 A_process$)) (=> (fun_app$a (fun_app$b ?v0 ?v3) ?v4) (and (= (isAction$ ?v3) (isAction$ ?v4)) (= (isChoice$ ?v3) (isChoice$ ?v4))))) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_process$) (?v6 A_process$)) (=> (fun_app$a (fun_app$b ?v0 (action$ ?v3 ?v5)) (action$ ?v4 ?v6)) (and (= ?v3 ?v4) (or (fun_app$a (fun_app$b ?v0 ?v5) ?v6) (= ?v5 ?v6))))) (forall ((?v3 A_process$) (?v4 A_process$) (?v5 A_process$) (?v6 A_process$)) (=> (fun_app$a (fun_app$b ?v0 (choice$ ?v3 ?v4)) (choice$ ?v5 ?v6)) (and (or (fun_app$a (fun_app$b ?v0 ?v3) ?v5) (= ?v3 ?v5)) (or (fun_app$a (fun_app$b ?v0 ?v4) ?v6) (= ?v4 ?v6)))))))) (= ?v1 ?v2))) :named a26))
(assert (! (forall ((?v0 A$) (?v1 A_process$)) (isAction$ (action$ ?v0 ?v1))) :named a27))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (not (isAction$ (choice$ ?v0 ?v1)))) :named a28))
(assert (! (forall ((?v0 A_process$) (?v1 A$) (?v2 A_process$)) (=> (= ?v0 (action$ ?v1 ?v2)) (isAction$ ?v0))) :named a29))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (= (isChoice$ (solution$ ?v0 ?v1)) (not (isACT$ ?v0 ?v1)))) :named a30))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (= (isAction$ (solution$ ?v0 ?v1)) (isACT$ ?v0 ?v1))) :named a31))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_process$) (?v2 A_process$)) (! (= (pred_process$ ?v0 (choice$ ?v1 ?v2)) (and (pred_process$ ?v0 ?v1) (pred_process$ ?v0 ?v2))) :pattern ((pred_process$ ?v0 (choice$ ?v1 ?v2))))) :named a32))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_process$)) (! (= (pred_process$ ?v0 (action$ ?v1 ?v2)) (and (fun_app$c ?v0 ?v1) (pred_process$ ?v0 ?v2))) :pattern ((pred_process$ ?v0 (action$ ?v1 ?v2))))) :named a33))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (not (isACT$ ?v0 ?v1)) (isChoice$ (solution$ ?v0 ?v1)))) :named a34))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (isACT$ ?v0 ?v1) (isAction$ (solution$ ?v0 ?v1)))) :named a35))
(assert (! (forall ((?v0 A_process$) (?v1 A_a_fun$)) (=> (isChoice$ ?v0) (= (ch2Of$ (map_process$ ?v1 ?v0)) (map_process$ ?v1 (ch2Of$ ?v0))))) :named a36))
(assert (! (forall ((?v0 A_process$) (?v1 A_a_fun$)) (=> (isChoice$ ?v0) (= (ch1Of$ (map_process$ ?v1 ?v0)) (map_process$ ?v1 (ch1Of$ ?v0))))) :named a37))
(assert (! (forall ((?v0 A_process$) (?v1 A_a_fun$)) (=> (isAction$ ?v0) (= (prefOf$ (map_process$ ?v1 ?v0)) (fun_app$ ?v1 (prefOf$ ?v0))))) :named a38))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_process$)) (! (= (isACT$ ?v0 (proc$ ?v1)) (isAction$ ?v1)) :pattern ((isACT$ ?v0 (proc$ ?v1))))) :named a39))
(assert (! (forall ((?v0 A_process$)) (=> (isChoice$ ?v0) (= (choice$ (ch1Of$ ?v0) (ch2Of$ ?v0)) ?v0))) :named a40))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (and (=> (isACT$ ?v0 ?v1) false) (=> (not (isACT$ ?v0 ?v1)) false)) false)) :named a41))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (! (= (ch2Of$ (choice$ ?v0 ?v1)) ?v1) :pattern ((choice$ ?v0 ?v1)))) :named a42))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (! (= (ch1Of$ (choice$ ?v0 ?v1)) ?v0) :pattern ((choice$ ?v0 ?v1)))) :named a43))
(assert (! (forall ((?v0 A$) (?v1 A_process$)) (! (= (prefOf$ (action$ ?v0 ?v1)) ?v0) :pattern ((action$ ?v0 ?v1)))) :named a44))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (=> (and (= (isAction$ ?v0) (isAction$ ?v1)) (and (=> (and (isAction$ ?v0) (isAction$ ?v1)) (and (= (prefOf$ ?v0) (prefOf$ ?v1)) (= (contOf$ ?v0) (contOf$ ?v1)))) (=> (and (isChoice$ ?v0) (isChoice$ ?v1)) (and (= (ch1Of$ ?v0) (ch1Of$ ?v1)) (= (ch2Of$ ?v0) (ch2Of$ ?v1)))))) (= ?v0 ?v1))) :named a45))
(assert (! (forall ((?v0 A_process_a_process_bool_fun_fun$) (?v1 A_process$) (?v2 A_process$)) (=> (and (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (forall ((?v3 A_process$) (?v4 A_process$)) (=> (fun_app$a (fun_app$b ?v0 ?v3) ?v4) (and (= (isAction$ ?v3) (isAction$ ?v4)) (and (=> (and (isAction$ ?v3) (isAction$ ?v4)) (and (= (prefOf$ ?v3) (prefOf$ ?v4)) (or (fun_app$a (fun_app$b ?v0 (contOf$ ?v3)) (contOf$ ?v4)) (= (contOf$ ?v3) (contOf$ ?v4))))) (=> (and (isChoice$ ?v3) (isChoice$ ?v4)) (and (or (fun_app$a (fun_app$b ?v0 (ch1Of$ ?v3)) (ch1Of$ ?v4)) (= (ch1Of$ ?v3) (ch1Of$ ?v4))) (or (fun_app$a (fun_app$b ?v0 (ch2Of$ ?v3)) (ch2Of$ ?v4)) (= (ch2Of$ ?v3) (ch2Of$ ?v4)))))))))) (= ?v1 ?v2))) :named a46))
(assert (! (forall ((?v0 A_process_a_process_bool_fun_fun$) (?v1 A_process$) (?v2 A_process$)) (=> (and (fun_app$a (fun_app$b ?v0 ?v1) ?v2) (forall ((?v3 A_process$) (?v4 A_process$)) (=> (fun_app$a (fun_app$b ?v0 ?v3) ?v4) (and (= (isAction$ ?v3) (isAction$ ?v4)) (and (=> (and (isAction$ ?v3) (isAction$ ?v4)) (and (= (prefOf$ ?v3) (prefOf$ ?v4)) (fun_app$a (fun_app$b ?v0 (contOf$ ?v3)) (contOf$ ?v4)))) (=> (and (isChoice$ ?v3) (isChoice$ ?v4)) (and (fun_app$a (fun_app$b ?v0 (ch1Of$ ?v3)) (ch1Of$ ?v4)) (fun_app$a (fun_app$b ?v0 (ch2Of$ ?v3)) (ch2Of$ ?v4))))))))) (= ?v1 ?v2))) :named a47))
(assert (! (forall ((?v0 A_process$)) (=> (and (=> (= ?v0 (action$ (prefOf$ ?v0) (contOf$ ?v0))) false) (=> (= ?v0 (choice$ (ch1Of$ ?v0) (ch2Of$ ?v0))) false)) false)) :named a48))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (isACT$ ?v0 ?v1) (= (prefOf$ (solution$ ?v0 ?v1)) (pref$ ?v0 ?v1)))) :named a49))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (not (isACT$ ?v0 ?v1)) (= (ch2Of$ (solution$ ?v0 ?v1)) (solution$ ?v0 (cH2$ ?v0 ?v1))))) :named a50))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (not (isACT$ ?v0 ?v1)) (= (ch1Of$ (solution$ ?v0 ?v1)) (solution$ ?v0 (cH1$ ?v0 ?v1))))) :named a51))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 B_bool_fun$) (?v2 A_process$)) (! (= (pred_process_term$ ?v0 ?v1 (proc$ ?v2)) (pred_process$ ?v0 ?v2)) :pattern ((pred_process_term$ ?v0 ?v1 (proc$ ?v2))))) :named a52))
(assert (! (forall ((?v0 A_process$)) (=> (isAction$ ?v0) (= (action$ (prefOf$ ?v0) (contOf$ ?v0)) ?v0))) :named a53))
(assert (! (forall ((?v0 A$) (?v1 A_process$)) (! (= (contOf$ (action$ ?v0 ?v1)) ?v1) :pattern ((action$ ?v0 ?v1)))) :named a54))
(assert (! (forall ((?v0 A_process$) (?v1 A_a_fun$)) (=> (isAction$ ?v0) (= (contOf$ (map_process$ ?v1 ?v0)) (map_process$ ?v1 (contOf$ ?v0))))) :named a55))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (not (isACT$ ?v0 ?v1)) (= (solution$ ?v0 ?v1) (choice$ (solution$ ?v0 (cH1$ ?v0 ?v1)) (solution$ ?v0 (cH2$ ?v0 ?v1)))))) :named a56))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_process$)) (! (= (cH1$ ?v0 (proc$ ?v1)) (proc$ (ch1Of$ ?v1))) :pattern ((cH1$ ?v0 (proc$ ?v1))))) :named a57))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_process$)) (! (= (cH2$ ?v0 (proc$ ?v1)) (proc$ (ch2Of$ ?v1))) :pattern ((cH2$ ?v0 (proc$ ?v1))))) :named a58))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_process$)) (! (= (pref$ ?v0 (proc$ ?v1)) (prefOf$ ?v1)) :pattern ((pref$ ?v0 (proc$ ?v1))))) :named a59))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (= (solution$ ?v0 ?v1) (ite (isACT$ ?v0 ?v1) (action$ (pref$ ?v0 ?v1) (solution$ ?v0 (cont$ ?v0 ?v1))) (choice$ (solution$ ?v0 (cH1$ ?v0 ?v1)) (solution$ ?v0 (cH2$ ?v0 ?v1)))))) :named a60))
(check-sat)
;(get-unsat-core)
