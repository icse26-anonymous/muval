; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 103
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_a_process_fun$ 0)
(declare-sort A_process_a_fun$ 0)
(declare-sort B_b_process_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_process_bool_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort B_b_fun_b_b_fun_fun$ 0)
(declare-sort A_a_process_a_fun_fun$ 0)
(declare-sort B_a_b_process_term_fun$ 0)
(declare-sort A_process_a_process_fun$ 0)
(declare-sort B_process_b_process_fun$ 0)
(declare-sort A_a_fun_a_a_process_fun_fun$ 0)
(declare-sort B_b_fun_b_b_process_fun_fun$ 0)
(declare-sort A_a_fun_a_a_bool_fun_fun_fun$ 0)
(declare-sort A_a_process_a_process_fun_fun$ 0)
(declare-sort A_process_a_process_a_fun_fun$ 0)
(declare-sort A_process_process_a_process_fun$ 0)
(declare-sort A_process_a_process_bool_fun_fun$ 0)
(declare-sort A_a_process_fun_a_a_process_fun_fun$ 0)
(declare-sort B_b_process_fun_b_b_process_fun_fun$ 0)
(declare-sort A_process_a_process_a_process_fun_fun$ 0)
(declare-sort A_process_a_process_process_a_process_fun_fun$ 0)
(declare-sort A_a_process_fun_a_a_fun_a_a_process_fun_fun_fun$ 0)
(declare-sort B_b_process_fun_b_b_fun_b_b_process_fun_fun_fun$ 0)
(declare-sort A_process_process_a_process_process_a_process_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun$ 0)
(declare-sort B_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun$ 0)
(declare-sort B_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun$ 0)
(declare-sort A_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort B_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort B_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort B_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort B_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort B_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort B_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-codatatypes () ((A_process$ (action$ (prefOf$ A$) (contOf$ A_process$)) (choice$ (ch1Of$ A_process$) (ch2Of$ A_process$)))))
(declare-datatypes () ((A_b_process_term$ (var$ (select$ B$)) (proc$ (selecta$ A_process$)) (act$ (selectb$ A$) (selectc$ A_b_process_term$)) (ch$ (selectd$ A_b_process_term$) (selecte$ A_b_process_term$)))))
(declare-codatatypes () ((B_process$ (action$a (prefOf$a B$) (contOf$a B_process$)) (choice$a (ch1Of$a B_process$) (ch2Of$a B_process$)))))
(declare-datatypes () ((A_a_process_term$ (var$a (selectf$ A$)) (proc$a (selectg$ A_process$)) (act$a (selecth$ A$) (selecti$ A_a_process_term$)) (ch$a (selectj$ A_a_process_term$) (selectk$ A_a_process_term$)))
  (B_a_process_term$ (var$b (selectl$ A$)) (proc$b (selectm$ B_process$)) (act$b (selectn$ B$) (selecto$ B_a_process_term$)) (ch$b (selectp$ B_a_process_term$) (selectq$ B_a_process_term$)))
  (B_b_process_term$ (var$c (selectr$ B$)) (proc$c (selects$ B_process$)) (act$c (selectt$ B$) (selectu$ B_b_process_term$)) (ch$c (selectv$ B_b_process_term$) (selectw$ B_b_process_term$)))))
(declare-codatatypes () ((A_process_process$ (action$b (prefOf$b A_process$) (contOf$b A_process_process$)) (choice$b (ch1Of$b A_process_process$) (ch2Of$b A_process_process$)))))
(declare-fun p$ () A_process$)
(declare-fun q$ () A_process$)
(declare-fun p$a () A_process$)
(declare-fun pa$ () A_process$)
(declare-fun uu$ () A_a_fun$)
(declare-fun cH1$ (B_a_b_process_term_fun$ A_b_process_term$) A_b_process_term$)
(declare-fun cH2$ (B_a_b_process_term_fun$ A_b_process_term$) A_b_process_term$)
(declare-fun sys$ () B_a_b_process_term_fun$)
(declare-fun uua$ () B_b_fun$)
(declare-fun uub$ () A_a_bool_fun_fun$)
(declare-fun uuc$ () A_process_a_process_bool_fun_fun$)
(declare-fun uud$ (A_a_bool_fun_fun$) A_a_fun_a_a_bool_fun_fun_fun$)
(declare-fun uue$ (A_a_bool_fun_fun$) A_a_fun_a_a_bool_fun_fun_fun$)
(declare-fun uuf$ (A$) A_a_fun$)
(declare-fun uug$ (B$) B_b_fun$)
(declare-fun uuh$ () A_process_a_process_process_a_process_fun_fun$)
(declare-fun uui$ () A_process_process_a_process_process_a_process_fun_fun$)
(declare-fun uuj$ () A_a_process_a_fun_fun$)
(declare-fun uuk$ () A_process_a_process_a_fun_fun$)
(declare-fun uul$ () A_a_process_a_process_fun_fun$)
(declare-fun uum$ () A_process_a_process_a_process_fun_fun$)
(declare-fun uun$ () A_a_process_a_process_fun_fun$)
(declare-fun uuo$ () A_process_a_process_a_process_fun_fun$)
(declare-fun uup$ () A_process_a_process_a_process_fun_fun$)
(declare-fun comp$ (B_process_b_process_fun$) B_b_process_fun_b_b_process_fun_fun$)
(declare-fun cont$ (B_a_b_process_term_fun$ A_b_process_term$) A_b_process_term$)
(declare-fun pref$ (B_a_b_process_term_fun$ A_b_process_term$) A$)
(declare-fun comp$a (B_b_fun$) B_b_fun_b_b_fun_fun$)
(declare-fun comp$b (A_process_a_process_fun$) A_a_process_fun_a_a_process_fun_fun$)
(declare-fun comp$c (A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun isACT$ (B_a_b_process_term_fun$ A_b_process_term$) Bool)
(declare-fun fun_app$ (A_process_bool_fun$ A_process$) Bool)
(declare-fun fun_app$a (A_process_a_process_bool_fun_fun$ A_process$) A_process_bool_fun$)
(declare-fun fun_app$b (A_bool_fun$ A$) Bool)
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun fun_app$d (A_a_fun_a_a_bool_fun_fun_fun$ A_a_fun$) A_a_bool_fun_fun$)
(declare-fun fun_app$e (A_a_fun$ A$) A$)
(declare-fun fun_app$f (A_process_process_a_process_fun$ A_process_process$) A_process$)
(declare-fun fun_app$g (A_process_a_process_process_a_process_fun_fun$ A_process$) A_process_process_a_process_fun$)
(declare-fun fun_app$h (A_process_a_process_fun$ A_process$) A_process$)
(declare-fun fun_app$i (A_process_a_process_a_process_fun_fun$ A_process$) A_process_a_process_fun$)
(declare-fun fun_app$j (B_b_fun$ B$) B$)
(declare-fun fun_app$k (A_process_a_fun$ A_process$) A$)
(declare-fun fun_app$l (A_a_process_a_fun_fun$ A$) A_process_a_fun$)
(declare-fun fun_app$m (A_a_process_a_process_fun_fun$ A$) A_process_a_process_fun$)
(declare-fun fun_app$n (A_process_process_a_process_process_a_process_fun_fun$ A_process_process$) A_process_process_a_process_fun$)
(declare-fun fun_app$o (A_process_a_process_a_fun_fun$ A_process$) A_process_a_fun$)
(declare-fun fun_app$p (B_b_process_fun_b_b_process_fun_fun$ B_b_process_fun$) B_b_process_fun$)
(declare-fun fun_app$q (B_b_fun_b_b_process_fun_fun$ B_b_fun$) B_b_process_fun$)
(declare-fun fun_app$r (B_b_process_fun_b_b_fun_b_b_process_fun_fun_fun$ B_b_process_fun$) B_b_fun_b_b_process_fun_fun$)
(declare-fun fun_app$s (B_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun$ B_bool_fun$) B_b_process_fun_b_b_fun_b_b_process_fun_fun_fun$)
(declare-fun fun_app$t (B_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun$ B_b_fun$) B_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun$)
(declare-fun fun_app$u (B_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun$ B_b_process_fun$) B_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun$)
(declare-fun fun_app$v (B_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun_fun$ B_bool_fun$) B_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$w (B_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun_fun_fun$ B_b_fun$) B_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$x (B_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun_fun_fun_fun$ B_b_process_fun$) B_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$y (B_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun$ B_bool_fun$) B_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$z (B_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun$ B_b_fun$) B_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun isAction$ (A_process$) Bool)
(declare-fun isChoice$ (A_process$) Bool)
(declare-fun solution$ (B_a_b_process_term_fun$ A_b_process_term$) A_process$)
(declare-fun fun_app$aa (B_b_fun_b_b_fun_fun$ B_b_fun$) B_b_fun$)
(declare-fun fun_app$ab (A_a_process_fun_a_a_process_fun_fun$ A_a_process_fun$) A_a_process_fun$)
(declare-fun fun_app$ac (A_a_fun_a_a_process_fun_fun$ A_a_fun$) A_a_process_fun$)
(declare-fun fun_app$ad (A_a_process_fun_a_a_fun_a_a_process_fun_fun_fun$ A_a_process_fun$) A_a_fun_a_a_process_fun_fun$)
(declare-fun fun_app$ae (A_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun$ A_bool_fun$) A_a_process_fun_a_a_fun_a_a_process_fun_fun_fun$)
(declare-fun fun_app$af (A_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun$ A_a_fun$) A_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun$)
(declare-fun fun_app$ag (A_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun$ A_a_process_fun$) A_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun$)
(declare-fun fun_app$ah (A_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun_fun$ A_bool_fun$) A_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$ai (A_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun_fun_fun$ A_a_fun$) A_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$aj (A_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun_fun_fun_fun$ A_a_process_fun$) A_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$ak (A_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun$ A_bool_fun$) A_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$al (A_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun$ A_a_fun$) A_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$am (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$an (B_process_b_process_fun$ B_process$) B_process$)
(declare-fun undefined$ () A_process$)
(declare-fun undefined$a () A$)
(declare-fun map_process$ (A_a_fun$) A_process_a_process_fun$)
(declare-fun rel_process$ (A_a_bool_fun_fun$) A_process_a_process_bool_fun_fun$)
(declare-fun case_process$ (A_a_process_a_fun_fun$ A_process_a_process_a_fun_fun$ A_process$) A$)
(declare-fun map_process$a (B_b_fun$) B_process_b_process_fun$)
(declare-fun pred_process$ (A_bool_fun$) A_process_bool_fun$)
(declare-fun case_process$a (A_a_process_a_process_fun_fun$ A_process_a_process_a_process_fun_fun$ A_process$) A_process$)
(declare-fun case_process$b (A_process_a_process_process_a_process_fun_fun$ A_process_process_a_process_process_a_process_fun_fun$ A_process_process$) A_process$)
(declare-fun corec_process$ (B_bool_fun$) B_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_bool_fun_b_b_process_fun_b_b_fun_b_b_process_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun corec_process$a (A_bool_fun$) A_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_bool_fun_a_a_process_fun_a_a_fun_a_a_process_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun map_process_term$ (A_a_fun$ B_b_fun$ A_b_process_term$) A_b_process_term$)
(declare-fun map_process_term$a (A_a_fun$ A_a_fun$ A_a_process_term$) A_a_process_term$)
(declare-fun map_process_term$b (B_b_fun$ A_a_fun$ B_a_process_term$) B_a_process_term$)
(declare-fun map_process_term$c (B_b_fun$ B_b_fun$ B_b_process_term$) B_b_process_term$)
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (! (= (fun_app$ (fun_app$a uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (fun_app$a uuc$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$b (fun_app$c uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c uub$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$c (fun_app$d (uud$ ?v0) ?v1) ?v2) (fun_app$c ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$c (fun_app$d (uud$ ?v0) ?v1) ?v2)))) :named a2))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A$) (?v3 A$)) (! (= (fun_app$b (fun_app$c (fun_app$d (uue$ ?v0) ?v1) ?v2) ?v3) (fun_app$b (fun_app$c ?v0 ?v2) (fun_app$e ?v1 ?v3))) :pattern ((fun_app$b (fun_app$c (fun_app$d (uue$ ?v0) ?v1) ?v2) ?v3)))) :named a3))
(assert (! (forall ((?v0 A_process$) (?v1 A_process_process$)) (! (= (fun_app$f (fun_app$g uuh$ ?v0) ?v1) ?v0) :pattern ((fun_app$f (fun_app$g uuh$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (! (= (fun_app$h (fun_app$i uuo$ ?v0) ?v1) ?v0) :pattern ((fun_app$h (fun_app$i uuo$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$j (uug$ ?v0) ?v1) ?v0) :pattern ((fun_app$j (uug$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 A$) (?v1 A_process$)) (! (= (fun_app$k (fun_app$l uuj$ ?v0) ?v1) ?v0) :pattern ((fun_app$k (fun_app$l uuj$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 A$) (?v1 A$)) (! (= (fun_app$e (uuf$ ?v0) ?v1) ?v0) :pattern ((fun_app$e (uuf$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (! (= (fun_app$h (fun_app$i uup$ ?v0) ?v1) ?v1) :pattern ((fun_app$h (fun_app$i uup$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 A$) (?v1 A_process$)) (! (= (fun_app$h (fun_app$m uul$ ?v0) ?v1) ?v1) :pattern ((fun_app$h (fun_app$m uul$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 A_process_process$) (?v1 A_process_process$)) (! (= (fun_app$f (fun_app$n uui$ ?v0) ?v1) undefined$) :pattern ((fun_app$f (fun_app$n uui$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (! (= (fun_app$h (fun_app$i uum$ ?v0) ?v1) undefined$) :pattern ((fun_app$h (fun_app$i uum$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (! (= (fun_app$k (fun_app$o uuk$ ?v0) ?v1) undefined$a) :pattern ((fun_app$k (fun_app$o uuk$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 A$) (?v1 A_process$)) (! (= (fun_app$h (fun_app$m uun$ ?v0) ?v1) undefined$) :pattern ((fun_app$h (fun_app$m uun$ ?v0) ?v1)))) :named a14))
(assert (! (forall ((?v0 B$)) (! (= (fun_app$j uua$ ?v0) ?v0) :pattern ((fun_app$j uua$ ?v0)))) :named a15))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$e uu$ ?v0) ?v0) :pattern ((fun_app$e uu$ ?v0)))) :named a16))
(assert (! (not (and (= (isAction$ pa$) (isAction$ p$)) (= (isChoice$ pa$) (isChoice$ p$)))) :named a17))
(assert (! (forall ((?v0 A_process$)) (or (isAction$ ?v0) (isChoice$ ?v0))) :named a18))
(assert (! (not (isACT$ sys$ (proc$ pa$))) :named a19))
(assert (! (= q$ (solution$ sys$ (proc$ p$a))) :named a20))
(assert (! (isChoice$ pa$) :named a21))
(assert (! (or (isAction$ pa$) (isChoice$ pa$)) :named a22))
(assert (! (forall ((?v0 A_process$)) (=> (and (=> (isAction$ ?v0) false) (=> (isChoice$ ?v0) false)) false)) :named a23))
(assert (! (forall ((?v0 A_process$)) (=> (isAction$ ?v0) (not (isChoice$ ?v0)))) :named a24))
(assert (! (forall ((?v0 A_process$)) (=> (isChoice$ ?v0) (not (isAction$ ?v0)))) :named a25))
(assert (! (forall ((?v0 A_process$)) (not (and (isAction$ ?v0) (isChoice$ ?v0)))) :named a26))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (= (isChoice$ (solution$ ?v0 ?v1)) (not (isACT$ ?v0 ?v1)))) :named a27))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (= (isAction$ (solution$ ?v0 ?v1)) (isACT$ ?v0 ?v1))) :named a28))
(assert (! (= p$ (solution$ sys$ (proc$ pa$))) :named a29))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (= (= (proc$ ?v0) (proc$ ?v1)) (= ?v0 ?v1))) :named a30))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (not (isACT$ ?v0 ?v1)) (isChoice$ (solution$ ?v0 ?v1)))) :named a31))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (isACT$ ?v0 ?v1) (isAction$ (solution$ ?v0 ?v1)))) :named a32))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_process$)) (! (= (isACT$ ?v0 (proc$ ?v1)) (isAction$ ?v1)) :pattern ((isACT$ ?v0 (proc$ ?v1))))) :named a33))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_process$)) (= (isChoice$ (fun_app$h (map_process$ ?v0) ?v1)) (isChoice$ ?v1))) :named a34))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_process$)) (= (isAction$ (fun_app$h (map_process$ ?v0) ?v1)) (isAction$ ?v1))) :named a35))
(assert (! (forall ((?v0 A_process$)) (= (fun_app$h (map_process$ uu$) ?v0) ?v0)) :named a36))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (and (=> (isACT$ ?v0 ?v1) false) (=> (not (isACT$ ?v0 ?v1)) false)) false)) :named a37))
(assert (! (forall ((?v0 A_process$) (?v1 A_a_fun$)) (=> (isAction$ ?v0) (= (prefOf$ (fun_app$h (map_process$ ?v1) ?v0)) (fun_app$e ?v1 (prefOf$ ?v0))))) :named a38))
(assert (! (forall ((?v0 A_process$) (?v1 A_a_fun$)) (=> (isChoice$ ?v0) (= (ch2Of$ (fun_app$h (map_process$ ?v1) ?v0)) (fun_app$h (map_process$ ?v1) (ch2Of$ ?v0))))) :named a39))
(assert (! (forall ((?v0 A_process$) (?v1 A_a_fun$)) (=> (isChoice$ ?v0) (= (ch1Of$ (fun_app$h (map_process$ ?v1) ?v0)) (fun_app$h (map_process$ ?v1) (ch1Of$ ?v0))))) :named a40))
(assert (! (forall ((?v0 A_process$) (?v1 A_a_fun$)) (=> (isAction$ ?v0) (= (contOf$ (fun_app$h (map_process$ ?v1) ?v0)) (fun_app$h (map_process$ ?v1) (contOf$ ?v0))))) :named a41))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 A_process$)) (! (= (map_process_term$ ?v0 ?v1 (proc$ ?v2)) (proc$ (fun_app$h (map_process$ ?v0) ?v2))) :pattern ((map_process_term$ ?v0 ?v1 (proc$ ?v2))))) :named a42))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (isACT$ ?v0 ?v1) (= (prefOf$ (solution$ ?v0 ?v1)) (pref$ ?v0 ?v1)))) :named a43))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (isACT$ ?v0 ?v1) (= (contOf$ (solution$ ?v0 ?v1)) (solution$ ?v0 (cont$ ?v0 ?v1))))) :named a44))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (not (isACT$ ?v0 ?v1)) (= (ch1Of$ (solution$ ?v0 ?v1)) (solution$ ?v0 (cH1$ ?v0 ?v1))))) :named a45))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (=> (and (= (isAction$ ?v0) (isAction$ ?v1)) (and (=> (and (isAction$ ?v0) (isAction$ ?v1)) (and (= (prefOf$ ?v0) (prefOf$ ?v1)) (= (contOf$ ?v0) (contOf$ ?v1)))) (=> (and (isChoice$ ?v0) (isChoice$ ?v1)) (and (= (ch1Of$ ?v0) (ch1Of$ ?v1)) (= (ch2Of$ ?v0) (ch2Of$ ?v1)))))) (= ?v0 ?v1))) :named a46))
(assert (! (forall ((?v0 A_process_a_process_bool_fun_fun$) (?v1 A_process$) (?v2 A_process$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (forall ((?v3 A_process$) (?v4 A_process$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (and (= (isAction$ ?v3) (isAction$ ?v4)) (and (=> (and (isAction$ ?v3) (isAction$ ?v4)) (and (= (prefOf$ ?v3) (prefOf$ ?v4)) (or (fun_app$ (fun_app$a ?v0 (contOf$ ?v3)) (contOf$ ?v4)) (= (contOf$ ?v3) (contOf$ ?v4))))) (=> (and (isChoice$ ?v3) (isChoice$ ?v4)) (and (or (fun_app$ (fun_app$a ?v0 (ch1Of$ ?v3)) (ch1Of$ ?v4)) (= (ch1Of$ ?v3) (ch1Of$ ?v4))) (or (fun_app$ (fun_app$a ?v0 (ch2Of$ ?v3)) (ch2Of$ ?v4)) (= (ch2Of$ ?v3) (ch2Of$ ?v4)))))))))) (= ?v1 ?v2))) :named a47))
(assert (! (forall ((?v0 A_process_a_process_bool_fun_fun$) (?v1 A_process$) (?v2 A_process$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (forall ((?v3 A_process$) (?v4 A_process$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (and (= (isAction$ ?v3) (isAction$ ?v4)) (and (=> (and (isAction$ ?v3) (isAction$ ?v4)) (and (= (prefOf$ ?v3) (prefOf$ ?v4)) (fun_app$ (fun_app$a ?v0 (contOf$ ?v3)) (contOf$ ?v4)))) (=> (and (isChoice$ ?v3) (isChoice$ ?v4)) (and (fun_app$ (fun_app$a ?v0 (ch1Of$ ?v3)) (ch1Of$ ?v4)) (fun_app$ (fun_app$a ?v0 (ch2Of$ ?v3)) (ch2Of$ ?v4))))))))) (= ?v1 ?v2))) :named a48))
(assert (! (forall ((?v0 A_b_process_term$)) (= (map_process_term$ uu$ uua$ ?v0) ?v0)) :named a49))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_process$)) (! (= (cont$ ?v0 (proc$ ?v1)) (proc$ (contOf$ ?v1))) :pattern ((cont$ ?v0 (proc$ ?v1))))) :named a50))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_process$)) (! (= (cH1$ ?v0 (proc$ ?v1)) (proc$ (ch1Of$ ?v1))) :pattern ((cH1$ ?v0 (proc$ ?v1))))) :named a51))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_process$)) (! (= (pref$ ?v0 (proc$ ?v1)) (prefOf$ ?v1)) :pattern ((pref$ ?v0 (proc$ ?v1))))) :named a52))
(assert (! (forall ((?v0 A_a_process_a_fun_fun$) (?v1 A_process_a_process_a_fun_fun$) (?v2 A_process$)) (! (= (case_process$ ?v0 ?v1 ?v2) (ite (isAction$ ?v2) (fun_app$k (fun_app$l ?v0 (prefOf$ ?v2)) (contOf$ ?v2)) (fun_app$k (fun_app$o ?v1 (ch1Of$ ?v2)) (ch2Of$ ?v2)))) :pattern ((case_process$ ?v0 ?v1 ?v2)))) :named a53))
(assert (! (forall ((?v0 A_a_process_a_process_fun_fun$) (?v1 A_process_a_process_a_process_fun_fun$) (?v2 A_process$)) (! (= (case_process$a ?v0 ?v1 ?v2) (ite (isAction$ ?v2) (fun_app$h (fun_app$m ?v0 (prefOf$ ?v2)) (contOf$ ?v2)) (fun_app$h (fun_app$i ?v1 (ch1Of$ ?v2)) (ch2Of$ ?v2)))) :pattern ((case_process$a ?v0 ?v1 ?v2)))) :named a54))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (not (isACT$ ?v0 ?v1)) (= (ch2Of$ (solution$ ?v0 ?v1)) (solution$ ?v0 (cH2$ ?v0 ?v1))))) :named a55))
(assert (! (forall ((?v0 A_process_a_process_bool_fun_fun$) (?v1 A_process$) (?v2 A_process$) (?v3 A_a_bool_fun_fun$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (forall ((?v4 A_process$) (?v5 A_process$)) (=> (fun_app$ (fun_app$a ?v0 ?v4) ?v5) (and (= (isAction$ ?v4) (isAction$ ?v5)) (and (=> (and (isAction$ ?v4) (isAction$ ?v5)) (and (fun_app$b (fun_app$c ?v3 (prefOf$ ?v4)) (prefOf$ ?v5)) (fun_app$ (fun_app$a ?v0 (contOf$ ?v4)) (contOf$ ?v5)))) (=> (and (isChoice$ ?v4) (isChoice$ ?v5)) (and (fun_app$ (fun_app$a ?v0 (ch1Of$ ?v4)) (ch1Of$ ?v5)) (fun_app$ (fun_app$a ?v0 (ch2Of$ ?v4)) (ch2Of$ ?v5))))))))) (fun_app$ (fun_app$a (rel_process$ ?v3) ?v1) ?v2))) :named a56))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_process$) (?v2 A_process$)) (= (fun_app$ (fun_app$a (rel_process$ ?v0) ?v1) ?v2) (and (= (isAction$ ?v1) (isAction$ ?v2)) (and (=> (and (isAction$ ?v1) (isAction$ ?v2)) (and (fun_app$b (fun_app$c ?v0 (prefOf$ ?v1)) (prefOf$ ?v2)) (fun_app$ (fun_app$a (rel_process$ ?v0) (contOf$ ?v1)) (contOf$ ?v2)))) (=> (and (isChoice$ ?v1) (isChoice$ ?v2)) (and (fun_app$ (fun_app$a (rel_process$ ?v0) (ch1Of$ ?v1)) (ch1Of$ ?v2)) (fun_app$ (fun_app$a (rel_process$ ?v0) (ch2Of$ ?v1)) (ch2Of$ ?v2)))))))) :named a57))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (isACT$ ?v0 ?v1) (= (solution$ ?v0 ?v1) (action$ (pref$ ?v0 ?v1) (solution$ ?v0 (cont$ ?v0 ?v1)))))) :named a58))
(assert (! (forall ((?v0 A_process$)) (=> (isChoice$ ?v0) (= (choice$ (ch1Of$ ?v0) (ch2Of$ ?v0)) ?v0))) :named a59))
(assert (! (forall ((?v0 A_process$)) (=> (isAction$ ?v0) (= (action$ (prefOf$ ?v0) (contOf$ ?v0)) ?v0))) :named a60))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_process$)) (! (= (cH2$ ?v0 (proc$ ?v1)) (proc$ (ch2Of$ ?v1))) :pattern ((cH2$ ?v0 (proc$ ?v1))))) :named a61))
(assert (! (forall ((?v0 A$) (?v1 A_process$) (?v2 A$) (?v3 A_process$)) (= (= (action$ ?v0 ?v1) (action$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a62))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$) (?v2 A_process$) (?v3 A_process$)) (= (= (choice$ ?v0 ?v1) (choice$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a63))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_process$) (?v3 A$) (?v4 A_process$)) (! (= (fun_app$ (fun_app$a (rel_process$ ?v0) (action$ ?v1 ?v2)) (action$ ?v3 ?v4)) (and (fun_app$b (fun_app$c ?v0 ?v1) ?v3) (fun_app$ (fun_app$a (rel_process$ ?v0) ?v2) ?v4))) :pattern ((fun_app$ (fun_app$a (rel_process$ ?v0) (action$ ?v1 ?v2)) (action$ ?v3 ?v4))))) :named a64))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_process$) (?v2 A_process$) (?v3 A_process$) (?v4 A_process$)) (! (= (fun_app$ (fun_app$a (rel_process$ ?v0) (choice$ ?v1 ?v2)) (choice$ ?v3 ?v4)) (and (fun_app$ (fun_app$a (rel_process$ ?v0) ?v1) ?v3) (fun_app$ (fun_app$a (rel_process$ ?v0) ?v2) ?v4))) :pattern ((fun_app$ (fun_app$a (rel_process$ ?v0) (choice$ ?v1 ?v2)) (choice$ ?v3 ?v4))))) :named a65))
(assert (! (forall ((?v0 A_a_process_a_fun_fun$) (?v1 A_process_a_process_a_fun_fun$) (?v2 A$) (?v3 A_process$)) (! (= (case_process$ ?v0 ?v1 (action$ ?v2 ?v3)) (fun_app$k (fun_app$l ?v0 ?v2) ?v3)) :pattern ((case_process$ ?v0 ?v1 (action$ ?v2 ?v3))))) :named a66))
(assert (! (forall ((?v0 A_a_process_a_process_fun_fun$) (?v1 A_process_a_process_a_process_fun_fun$) (?v2 A$) (?v3 A_process$)) (! (= (case_process$a ?v0 ?v1 (action$ ?v2 ?v3)) (fun_app$h (fun_app$m ?v0 ?v2) ?v3)) :pattern ((case_process$a ?v0 ?v1 (action$ ?v2 ?v3))))) :named a67))
(assert (! (forall ((?v0 A_a_process_a_fun_fun$) (?v1 A_process_a_process_a_fun_fun$) (?v2 A_process$) (?v3 A_process$)) (! (= (case_process$ ?v0 ?v1 (choice$ ?v2 ?v3)) (fun_app$k (fun_app$o ?v1 ?v2) ?v3)) :pattern ((case_process$ ?v0 ?v1 (choice$ ?v2 ?v3))))) :named a68))
(assert (! (forall ((?v0 A_a_process_a_process_fun_fun$) (?v1 A_process_a_process_a_process_fun_fun$) (?v2 A_process$) (?v3 A_process$)) (! (= (case_process$a ?v0 ?v1 (choice$ ?v2 ?v3)) (fun_app$h (fun_app$i ?v1 ?v2) ?v3)) :pattern ((case_process$a ?v0 ?v1 (choice$ ?v2 ?v3))))) :named a69))
(assert (! (= (rel_process$ uub$) uuc$) :named a70))
(assert (! (forall ((?v0 A_process$)) (=> (and (forall ((?v1 A$) (?v2 A_process$)) (=> (= ?v0 (action$ ?v1 ?v2)) false)) (forall ((?v1 A_process$) (?v2 A_process$)) (=> (= ?v0 (choice$ ?v1 ?v2)) false))) false)) :named a71))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_process$) (?v2 A_process$)) (=> (and (fun_app$ (fun_app$a (rel_process$ ?v0) ?v1) ?v2) (and (forall ((?v3 A$) (?v4 A_process$) (?v5 A$) (?v6 A_process$)) (=> (and (= ?v1 (action$ ?v3 ?v4)) (and (= ?v2 (action$ ?v5 ?v6)) (and (fun_app$b (fun_app$c ?v0 ?v3) ?v5) (fun_app$ (fun_app$a (rel_process$ ?v0) ?v4) ?v6)))) false)) (forall ((?v3 A_process$) (?v4 A_process$) (?v5 A_process$) (?v6 A_process$)) (=> (and (= ?v1 (choice$ ?v3 ?v4)) (and (= ?v2 (choice$ ?v5 ?v6)) (and (fun_app$ (fun_app$a (rel_process$ ?v0) ?v3) ?v5) (fun_app$ (fun_app$a (rel_process$ ?v0) ?v4) ?v6)))) false)))) false)) :named a72))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_process$) (?v2 A_process$) (?v3 A_process$) (?v4 A_process$)) (=> (and (fun_app$ (fun_app$a (rel_process$ ?v0) ?v1) ?v2) (fun_app$ (fun_app$a (rel_process$ ?v0) ?v3) ?v4)) (fun_app$ (fun_app$a (rel_process$ ?v0) (choice$ ?v1 ?v3)) (choice$ ?v2 ?v4)))) :named a73))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A$) (?v3 A_process$) (?v4 A_process$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (fun_app$ (fun_app$a (rel_process$ ?v0) ?v3) ?v4)) (fun_app$ (fun_app$a (rel_process$ ?v0) (action$ ?v1 ?v3)) (action$ ?v2 ?v4)))) :named a74))
(assert (! (forall ((?v0 A$) (?v1 A_process$) (?v2 A_process$) (?v3 A_process$)) (not (= (action$ ?v0 ?v1) (choice$ ?v2 ?v3)))) :named a75))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A$) (?v2 A_process$) (?v3 A_process$) (?v4 A_process$)) (not (fun_app$ (fun_app$a (rel_process$ ?v0) (action$ ?v1 ?v2)) (choice$ ?v3 ?v4)))) :named a76))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_process$) (?v2 A_process$) (?v3 A$) (?v4 A_process$)) (not (fun_app$ (fun_app$a (rel_process$ ?v0) (choice$ ?v1 ?v2)) (action$ ?v3 ?v4)))) :named a77))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_bool_fun$) (?v2 B_b_fun$) (?v3 B_bool_fun$) (?v4 B_b_process_fun$) (?v5 B_b_fun$) (?v6 B_bool_fun$) (?v7 B_b_process_fun$) (?v8 B_b_fun$) (?v9 B_bool_fun$) (?v10 B_b_process_fun$) (?v11 B_b_fun$)) (= (fun_app$p (comp$ (map_process$a ?v0)) (fun_app$q (fun_app$r (fun_app$s (fun_app$t (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z (corec_process$ ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) ?v7) ?v8) ?v9) ?v10) ?v11)) (fun_app$q (fun_app$r (fun_app$s (fun_app$t (fun_app$u (fun_app$v (fun_app$w (fun_app$x (fun_app$y (fun_app$z (corec_process$ ?v1) (fun_app$aa (comp$a ?v0) ?v2)) ?v3) (fun_app$p (comp$ (map_process$a ?v0)) ?v4)) ?v5) ?v6) (fun_app$p (comp$ (map_process$a ?v0)) ?v7)) ?v8) ?v9) (fun_app$p (comp$ (map_process$a ?v0)) ?v10)) ?v11))) :named a78))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_bool_fun$) (?v2 A_a_fun$) (?v3 A_bool_fun$) (?v4 A_a_process_fun$) (?v5 A_a_fun$) (?v6 A_bool_fun$) (?v7 A_a_process_fun$) (?v8 A_a_fun$) (?v9 A_bool_fun$) (?v10 A_a_process_fun$) (?v11 A_a_fun$)) (= (fun_app$ab (comp$b (map_process$ ?v0)) (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (fun_app$aj (fun_app$ak (fun_app$al (corec_process$a ?v1) ?v2) ?v3) ?v4) ?v5) ?v6) ?v7) ?v8) ?v9) ?v10) ?v11)) (fun_app$ac (fun_app$ad (fun_app$ae (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (fun_app$aj (fun_app$ak (fun_app$al (corec_process$a ?v1) (fun_app$am (comp$c ?v0) ?v2)) ?v3) (fun_app$ab (comp$b (map_process$ ?v0)) ?v4)) ?v5) ?v6) (fun_app$ab (comp$b (map_process$ ?v0)) ?v7)) ?v8) ?v9) (fun_app$ab (comp$b (map_process$ ?v0)) ?v10)) ?v11))) :named a79))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B_process$)) (= (fun_app$an (map_process$a ?v0) (fun_app$an (map_process$a ?v1) ?v2)) (fun_app$an (map_process$a (fun_app$aa (comp$a ?v0) ?v1)) ?v2))) :named a80))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_process$)) (= (fun_app$h (map_process$ ?v0) (fun_app$h (map_process$ ?v1) ?v2)) (fun_app$h (map_process$ (fun_app$am (comp$c ?v0) ?v1)) ?v2))) :named a81))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A_a_process_term$)) (= (map_process_term$a ?v0 ?v1 (map_process_term$a ?v2 ?v3 ?v4)) (map_process_term$a (fun_app$am (comp$c ?v0) ?v2) (fun_app$am (comp$c ?v1) ?v3) ?v4))) :named a82))
(assert (! (forall ((?v0 B_b_fun$) (?v1 A_a_fun$) (?v2 B_b_fun$) (?v3 A_a_fun$) (?v4 B_a_process_term$)) (= (map_process_term$b ?v0 ?v1 (map_process_term$b ?v2 ?v3 ?v4)) (map_process_term$b (fun_app$aa (comp$a ?v0) ?v2) (fun_app$am (comp$c ?v1) ?v3) ?v4))) :named a83))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B_b_fun$) (?v3 B_b_fun$) (?v4 B_b_process_term$)) (= (map_process_term$c ?v0 ?v1 (map_process_term$c ?v2 ?v3 ?v4)) (map_process_term$c (fun_app$aa (comp$a ?v0) ?v2) (fun_app$aa (comp$a ?v1) ?v3) ?v4))) :named a84))
(assert (! (forall ((?v0 A_a_fun$) (?v1 B_b_fun$) (?v2 A_a_fun$) (?v3 B_b_fun$) (?v4 A_b_process_term$)) (= (map_process_term$ ?v0 ?v1 (map_process_term$ ?v2 ?v3 ?v4)) (map_process_term$ (fun_app$am (comp$c ?v0) ?v2) (fun_app$aa (comp$a ?v1) ?v3) ?v4))) :named a85))
(assert (! (forall ((?v0 A_process_a_process_bool_fun_fun$) (?v1 A_process$) (?v2 A_process$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (and (forall ((?v3 A_process$) (?v4 A_process$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (and (= (isAction$ ?v3) (isAction$ ?v4)) (= (isChoice$ ?v3) (isChoice$ ?v4))))) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_process$) (?v6 A_process$)) (=> (fun_app$ (fun_app$a ?v0 (action$ ?v3 ?v5)) (action$ ?v4 ?v6)) (and (= ?v3 ?v4) (fun_app$ (fun_app$a ?v0 ?v5) ?v6)))) (forall ((?v3 A_process$) (?v4 A_process$) (?v5 A_process$) (?v6 A_process$)) (=> (fun_app$ (fun_app$a ?v0 (choice$ ?v3 ?v4)) (choice$ ?v5 ?v6)) (and (fun_app$ (fun_app$a ?v0 ?v3) ?v5) (fun_app$ (fun_app$a ?v0 ?v4) ?v6))))))) (= ?v1 ?v2))) :named a86))
(assert (! (forall ((?v0 A_process_a_process_bool_fun_fun$) (?v1 A_process$) (?v2 A_process$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (and (forall ((?v3 A_process$) (?v4 A_process$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (and (= (isAction$ ?v3) (isAction$ ?v4)) (= (isChoice$ ?v3) (isChoice$ ?v4))))) (and (forall ((?v3 A$) (?v4 A$) (?v5 A_process$) (?v6 A_process$)) (=> (fun_app$ (fun_app$a ?v0 (action$ ?v3 ?v5)) (action$ ?v4 ?v6)) (and (= ?v3 ?v4) (or (fun_app$ (fun_app$a ?v0 ?v5) ?v6) (= ?v5 ?v6))))) (forall ((?v3 A_process$) (?v4 A_process$) (?v5 A_process$) (?v6 A_process$)) (=> (fun_app$ (fun_app$a ?v0 (choice$ ?v3 ?v4)) (choice$ ?v5 ?v6)) (and (or (fun_app$ (fun_app$a ?v0 ?v3) ?v5) (= ?v3 ?v5)) (or (fun_app$ (fun_app$a ?v0 ?v4) ?v6) (= ?v4 ?v6)))))))) (= ?v1 ?v2))) :named a87))
(assert (! (forall ((?v0 A$) (?v1 A_process$)) (isAction$ (action$ ?v0 ?v1))) :named a88))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (not (isAction$ (choice$ ?v0 ?v1)))) :named a89))
(assert (! (forall ((?v0 A_process$) (?v1 A$) (?v2 A_process$)) (=> (= ?v0 (action$ ?v1 ?v2)) (isAction$ ?v0))) :named a90))
(assert (! (forall ((?v0 A_process$)) (= (isAction$ ?v0) (exists ((?v1 A$) (?v2 A_process$)) (= ?v0 (action$ ?v1 ?v2))))) :named a91))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A$) (?v2 A_process$)) (! (= (fun_app$h (map_process$ ?v0) (action$ ?v1 ?v2)) (action$ (fun_app$e ?v0 ?v1) (fun_app$h (map_process$ ?v0) ?v2))) :pattern ((fun_app$h (map_process$ ?v0) (action$ ?v1 ?v2))))) :named a92))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_process$) (?v2 A_process$)) (! (= (fun_app$h (map_process$ ?v0) (choice$ ?v1 ?v2)) (choice$ (fun_app$h (map_process$ ?v0) ?v1) (fun_app$h (map_process$ ?v0) ?v2))) :pattern ((fun_app$h (map_process$ ?v0) (choice$ ?v1 ?v2))))) :named a93))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (isChoice$ (choice$ ?v0 ?v1))) :named a94))
(assert (! (forall ((?v0 A$) (?v1 A_process$)) (not (isChoice$ (action$ ?v0 ?v1)))) :named a95))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$) (?v2 A_process$)) (=> (= ?v0 (choice$ ?v1 ?v2)) (isChoice$ ?v0))) :named a96))
(assert (! (forall ((?v0 A_process$)) (= (isChoice$ ?v0) (exists ((?v1 A_process$) (?v2 A_process$)) (= ?v0 (choice$ ?v1 ?v2))))) :named a97))
(assert (! (forall ((?v0 A$) (?v1 A_process$)) (! (= (contOf$ (action$ ?v0 ?v1)) ?v1) :pattern ((action$ ?v0 ?v1)))) :named a98))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (! (= (ch1Of$ (choice$ ?v0 ?v1)) ?v0) :pattern ((choice$ ?v0 ?v1)))) :named a99))
(assert (! (forall ((?v0 A_process$) (?v1 A_process$)) (! (= (ch2Of$ (choice$ ?v0 ?v1)) ?v1) :pattern ((choice$ ?v0 ?v1)))) :named a100))
(assert (! (forall ((?v0 A$) (?v1 A_process$)) (! (= (prefOf$ (action$ ?v0 ?v1)) ?v0) :pattern ((action$ ?v0 ?v1)))) :named a101))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_a_fun$) (?v2 A_process$) (?v3 A_process$)) (= (fun_app$ (fun_app$a (rel_process$ ?v0) (fun_app$h (map_process$ ?v1) ?v2)) ?v3) (fun_app$ (fun_app$a (rel_process$ (fun_app$d (uud$ ?v0) ?v1)) ?v2) ?v3))) :named a102))
(assert (! (forall ((?v0 A_a_bool_fun_fun$) (?v1 A_process$) (?v2 A_a_fun$) (?v3 A_process$)) (= (fun_app$ (fun_app$a (rel_process$ ?v0) ?v1) (fun_app$h (map_process$ ?v2) ?v3)) (fun_app$ (fun_app$a (rel_process$ (fun_app$d (uue$ ?v0) ?v2)) ?v1) ?v3))) :named a103))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_process_a_fun_fun$) (?v2 A_process_a_process_a_fun_fun$) (?v3 A_process$)) (= (fun_app$b ?v0 (case_process$ ?v1 ?v2 ?v3)) (not (or (and (= ?v3 (action$ (prefOf$ ?v3) (contOf$ ?v3))) (not (fun_app$b ?v0 (fun_app$k (fun_app$l ?v1 (prefOf$ ?v3)) (contOf$ ?v3))))) (and (= ?v3 (choice$ (ch1Of$ ?v3) (ch2Of$ ?v3))) (not (fun_app$b ?v0 (fun_app$k (fun_app$o ?v2 (ch1Of$ ?v3)) (ch2Of$ ?v3))))))))) :named a104))
(assert (! (forall ((?v0 A_process_bool_fun$) (?v1 A_a_process_a_process_fun_fun$) (?v2 A_process_a_process_a_process_fun_fun$) (?v3 A_process$)) (= (fun_app$ ?v0 (case_process$a ?v1 ?v2 ?v3)) (not (or (and (= ?v3 (action$ (prefOf$ ?v3) (contOf$ ?v3))) (not (fun_app$ ?v0 (fun_app$h (fun_app$m ?v1 (prefOf$ ?v3)) (contOf$ ?v3))))) (and (= ?v3 (choice$ (ch1Of$ ?v3) (ch2Of$ ?v3))) (not (fun_app$ ?v0 (fun_app$h (fun_app$i ?v2 (ch1Of$ ?v3)) (ch2Of$ ?v3))))))))) :named a105))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_a_process_a_fun_fun$) (?v2 A_process_a_process_a_fun_fun$) (?v3 A_process$)) (= (fun_app$b ?v0 (case_process$ ?v1 ?v2 ?v3)) (and (=> (= ?v3 (action$ (prefOf$ ?v3) (contOf$ ?v3))) (fun_app$b ?v0 (fun_app$k (fun_app$l ?v1 (prefOf$ ?v3)) (contOf$ ?v3)))) (=> (= ?v3 (choice$ (ch1Of$ ?v3) (ch2Of$ ?v3))) (fun_app$b ?v0 (fun_app$k (fun_app$o ?v2 (ch1Of$ ?v3)) (ch2Of$ ?v3))))))) :named a106))
(assert (! (forall ((?v0 A_process_bool_fun$) (?v1 A_a_process_a_process_fun_fun$) (?v2 A_process_a_process_a_process_fun_fun$) (?v3 A_process$)) (= (fun_app$ ?v0 (case_process$a ?v1 ?v2 ?v3)) (and (=> (= ?v3 (action$ (prefOf$ ?v3) (contOf$ ?v3))) (fun_app$ ?v0 (fun_app$h (fun_app$m ?v1 (prefOf$ ?v3)) (contOf$ ?v3)))) (=> (= ?v3 (choice$ (ch1Of$ ?v3) (ch2Of$ ?v3))) (fun_app$ ?v0 (fun_app$h (fun_app$i ?v2 (ch1Of$ ?v3)) (ch2Of$ ?v3))))))) :named a107))
(assert (! (forall ((?v0 A_process$)) (=> (and (=> (= ?v0 (action$ (prefOf$ ?v0) (contOf$ ?v0))) false) (=> (= ?v0 (choice$ (ch1Of$ ?v0) (ch2Of$ ?v0))) false)) false)) :named a108))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (=> (not (isACT$ ?v0 ?v1)) (= (solution$ ?v0 ?v1) (choice$ (solution$ ?v0 (cH1$ ?v0 ?v1)) (solution$ ?v0 (cH2$ ?v0 ?v1)))))) :named a109))
(assert (! (forall ((?v0 B_a_b_process_term_fun$) (?v1 A_b_process_term$)) (= (solution$ ?v0 ?v1) (ite (isACT$ ?v0 ?v1) (action$ (pref$ ?v0 ?v1) (solution$ ?v0 (cont$ ?v0 ?v1))) (choice$ (solution$ ?v0 (cH1$ ?v0 ?v1)) (solution$ ?v0 (cH2$ ?v0 ?v1)))))) :named a110))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$e (fun_app$am (comp$c ?v0) ?v1) ?v2) (fun_app$e ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$e (fun_app$am (comp$c ?v0) ?v1) ?v2)))) :named a111))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$j (fun_app$aa (comp$a ?v0) ?v1) ?v2) (fun_app$j ?v0 (fun_app$j ?v1 ?v2))) :pattern ((fun_app$j (fun_app$aa (comp$a ?v0) ?v1) ?v2)))) :named a112))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 A$)) (= (fun_app$e (fun_app$am (comp$c (uuf$ ?v0)) ?v1) ?v2) ?v0)) :named a113))
(assert (! (forall ((?v0 B$) (?v1 B_b_fun$) (?v2 B$)) (= (fun_app$j (fun_app$aa (comp$a (uug$ ?v0)) ?v1) ?v2) ?v0)) :named a114))
(assert (! (forall ((?v0 A_a_fun$)) (= (fun_app$am (comp$c uu$) ?v0) ?v0)) :named a115))
(assert (! (forall ((?v0 B_b_fun$)) (= (fun_app$aa (comp$a uua$) ?v0) ?v0)) :named a116))
(assert (! (forall ((?v0 A_process_process$)) (= (prefOf$b ?v0) (case_process$b uuh$ uui$ ?v0))) :named a117))
(assert (! (forall ((?v0 A_process$)) (= (prefOf$ ?v0) (case_process$ uuj$ uuk$ ?v0))) :named a118))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A_process$) (?v2 A_process$)) (! (= (fun_app$ (pred_process$ ?v0) (choice$ ?v1 ?v2)) (and (fun_app$ (pred_process$ ?v0) ?v1) (fun_app$ (pred_process$ ?v0) ?v2))) :pattern ((fun_app$ (pred_process$ ?v0) (choice$ ?v1 ?v2))))) :named a119))
(assert (! (forall ((?v0 A_bool_fun$) (?v1 A$) (?v2 A_process$)) (! (= (fun_app$ (pred_process$ ?v0) (action$ ?v1 ?v2)) (and (fun_app$b ?v0 ?v1) (fun_app$ (pred_process$ ?v0) ?v2))) :pattern ((fun_app$ (pred_process$ ?v0) (action$ ?v1 ?v2))))) :named a120))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$)) (= (fun_app$am (comp$c ?v0) (fun_app$am (comp$c ?v1) ?v2)) (fun_app$am (comp$c (fun_app$am (comp$c ?v0) ?v1)) ?v2))) :named a121))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B_b_fun$)) (= (fun_app$aa (comp$a ?v0) (fun_app$aa (comp$a ?v1) ?v2)) (fun_app$aa (comp$a (fun_app$aa (comp$a ?v0) ?v1)) ?v2))) :named a122))
(assert (! (forall ((?v0 A_process$)) (= (contOf$ ?v0) (case_process$a uul$ uum$ ?v0))) :named a123))
(assert (! (forall ((?v0 A_process$)) (= (ch1Of$ ?v0) (case_process$a uun$ uuo$ ?v0))) :named a124))
(assert (! (forall ((?v0 A_process$)) (= (ch2Of$ ?v0) (case_process$a uun$ uup$ ?v0))) :named a125))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A$)) (=> (= (fun_app$am (comp$c ?v0) ?v1) ?v2) (= (fun_app$e ?v0 (fun_app$e ?v1 ?v3)) (fun_app$e ?v2 ?v3)))) :named a126))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B_b_fun$) (?v3 B$)) (=> (= (fun_app$aa (comp$a ?v0) ?v1) ?v2) (= (fun_app$j ?v0 (fun_app$j ?v1 ?v3)) (fun_app$j ?v2 ?v3)))) :named a127))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$) (?v4 A$)) (=> (= (fun_app$am (comp$c ?v0) ?v1) (fun_app$am (comp$c ?v2) ?v3)) (= (fun_app$e ?v0 (fun_app$e ?v1 ?v4)) (fun_app$e ?v2 (fun_app$e ?v3 ?v4))))) :named a128))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B_b_fun$) (?v3 B_b_fun$) (?v4 B$)) (=> (= (fun_app$aa (comp$a ?v0) ?v1) (fun_app$aa (comp$a ?v2) ?v3)) (= (fun_app$j ?v0 (fun_app$j ?v1 ?v4)) (fun_app$j ?v2 (fun_app$j ?v3 ?v4))))) :named a129))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A_a_fun$) (?v3 A_a_fun$)) (=> (and (= (fun_app$am (comp$c ?v0) ?v1) (fun_app$am (comp$c ?v2) ?v3)) (=> (forall ((?v4 A$)) (= (fun_app$e ?v0 (fun_app$e ?v1 ?v4)) (fun_app$e ?v2 (fun_app$e ?v3 ?v4)))) false)) false)) :named a130))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B_b_fun$) (?v3 B_b_fun$)) (=> (and (= (fun_app$aa (comp$a ?v0) ?v1) (fun_app$aa (comp$a ?v2) ?v3)) (=> (forall ((?v4 B$)) (= (fun_app$j ?v0 (fun_app$j ?v1 ?v4)) (fun_app$j ?v2 (fun_app$j ?v3 ?v4)))) false)) false)) :named a131))
(assert (! (forall ((?v0 A_a_fun$) (?v1 A_a_fun$) (?v2 A$)) (! (= (fun_app$e (fun_app$am (comp$c ?v0) ?v1) ?v2) (fun_app$e ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$e (fun_app$am (comp$c ?v0) ?v1) ?v2)))) :named a132))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B_b_fun$) (?v2 B$)) (! (= (fun_app$j (fun_app$aa (comp$a ?v0) ?v1) ?v2) (fun_app$j ?v0 (fun_app$j ?v1 ?v2))) :pattern ((fun_app$j (fun_app$aa (comp$a ?v0) ?v1) ?v2)))) :named a133))
(check-sat)
;(get-unsat-core)
