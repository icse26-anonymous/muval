; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 462
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort N_set_set$ 0)
(declare-sort T_set_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort A_dtree_fun$ 0)
(declare-sort Dtree_a_fun$ 0)
(declare-sort T_a_sum_set$ 0)
(declare-sort N_set_set_set$ 0)
(declare-sort T_set_set_set$ 0)
(declare-sort N_set_bool_fun$ 0)
(declare-sort T_set_bool_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort T_a_sum_set_set$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort T_set_T_set_fun$ 0)
(declare-sort T_a_sum_bool_fun$ 0)
(declare-sort N_set_set_set_set$ 0)
(declare-sort T_set_set_set_set$ 0)
(declare-sort N_set_set_bool_fun$ 0)
(declare-sort T_set_set_bool_fun$ 0)
(declare-sort T_a_sum_T_a_sum_fun$ 0)
(declare-sort T_a_sum_set_set_set$ 0)
(declare-sort T_dtree_sum_set_set$ 0)
(declare-sort T_a_sum_set_bool_fun$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort T_a_sum_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_T_a_sum_fun$ 0)
(declare-sort T_dtree_sum_set_set_set$ 0)
(declare-sort T_set_set_T_set_set_fun$ 0)
(declare-sort T_dtree_sum_set_bool_fun$ 0)
(declare-sort T_a_sum_set_T_a_sum_set_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0)
(declare-sort T_set_set_set_T_set_set_set_fun$ 0)
(declare-sort T_a_sum_set_set_T_a_sum_set_set_fun$ 0)
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0)
(declare-sort T_dtree_sum_set_set_T_dtree_sum_set_set_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))
  (T_a_sum$ (inl$a (projl$a T$)) (inr$a (projr$a A$)))))
(declare-fun n$ () N$)
(declare-fun fr$ (N_set$ Dtree$) T_set$)
(declare-fun id$ () T_T_fun$)
(declare-fun ns$ () N_set$)
(declare-fun tr$ () Dtree$)
(declare-fun uu$ () T_bool_fun$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun bot$ () N_set$)
(declare-fun ftr$ () A_dtree_fun$)
(declare-fun id$a () T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun id$b () T_dtree_sum_set_set_T_dtree_sum_set_set_fun$)
(declare-fun id$c () T_a_sum_set_T_a_sum_set_fun$)
(declare-fun id$d () T_a_sum_set_set_T_a_sum_set_set_fun$)
(declare-fun id$e () T_set_set_T_set_set_fun$)
(declare-fun id$f () T_set_set_set_T_set_set_set_fun$)
(declare-fun id$g () T_set_T_set_fun$)
(declare-fun id$h () T_a_sum_T_a_sum_fun$)
(declare-fun id$i () T_dtree_sum_T_dtree_sum_fun$)
(declare-fun sup$ (T_set_set$) T_set$)
(declare-fun tns$ () T_a_sum_set$)
(declare-fun uua$ () T_set_bool_fun$)
(declare-fun uub$ (T_dtree_sum_set$) T_dtree_sum_set_bool_fun$)
(declare-fun uuc$ (T_a_sum_set$) T_a_sum_set_bool_fun$)
(declare-fun uud$ (N_set_set$) N_set_set_bool_fun$)
(declare-fun uue$ (T_set_set$) T_set_set_bool_fun$)
(declare-fun uuf$ (N_set$) N_set_bool_fun$)
(declare-fun uug$ (T_a_sum$) T_a_sum_bool_fun$)
(declare-fun uuh$ (T_dtree_sum$) T_dtree_sum_bool_fun$)
(declare-fun uui$ (T$) T_bool_fun$)
(declare-fun uuj$ (T_set$) T_set_bool_fun$)
(declare-fun uuk$ (N$) N_bool_fun$)
(declare-fun uul$ (T_dtree_sum_set$) T_dtree_sum_set_bool_fun$)
(declare-fun uum$ (T_a_sum_set$) T_a_sum_set_bool_fun$)
(declare-fun uun$ (N_set_set$) N_set_set_bool_fun$)
(declare-fun uuo$ (T_set_set$) T_set_set_bool_fun$)
(declare-fun uup$ (N_set$) N_set_bool_fun$)
(declare-fun uuq$ (T_a_sum$) T_a_sum_bool_fun$)
(declare-fun uur$ (T_dtree_sum$) T_dtree_sum_bool_fun$)
(declare-fun uus$ (T$) T_bool_fun$)
(declare-fun uut$ (T_set$) T_set_bool_fun$)
(declare-fun uuu$ (N$) N_bool_fun$)
(declare-fun bot$a () T_dtree_sum_set_set$)
(declare-fun bot$b () T_a_sum_set_set$)
(declare-fun bot$c () N_set_set_set$)
(declare-fun bot$d () T_set_set_set$)
(declare-fun bot$e () N_set_set$)
(declare-fun bot$f () T_set_set$)
(declare-fun bot$g () T_a_sum_set$)
(declare-fun bot$h () T_set$)
(declare-fun bot$i () T_dtree_sum_set$)
(declare-fun bot$j () T_dtree_sum_set_set_set$)
(declare-fun bot$k () T_a_sum_set_set_set$)
(declare-fun bot$l () N_set_set_set_set$)
(declare-fun bot$m () T_set_set_set_set$)
(declare-fun node$ (N$ T_dtree_sum_set$) Dtree$)
(declare-fun sup$a (T_dtree_sum_set_set$) T_dtree_sum_set$)
(declare-fun sup$b (T_a_sum_set_set$) T_a_sum_set$)
(declare-fun sup$c (N_set_set_set$) N_set_set$)
(declare-fun sup$d (T_set_set_set$) T_set_set$)
(declare-fun sup$e (N_set_set$) N_set$)
(declare-fun sup$f (T_dtree_sum_set_set_set$) T_dtree_sum_set_set$)
(declare-fun sup$g (T_a_sum_set_set_set$) T_a_sum_set_set$)
(declare-fun sup$h (N_set_set_set_set$) N_set_set_set$)
(declare-fun sup$i (T_set_set_set_set$) T_set_set_set$)
(declare-fun image$ (T_a_sum_T_dtree_sum_fun$ T_a_sum_set$) T_dtree_sum_set$)
(declare-fun minus$ (N_set$ N_set$) N_set$)
(declare-fun finite$ (T_a_sum_set$) Bool)
(declare-fun image$a (T_dtree_sum_T_dtree_sum_fun$) T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun image$b (T_dtree_sum_T_a_sum_fun$ T_dtree_sum_set$) T_a_sum_set$)
(declare-fun image$c (T_a_sum_T_a_sum_fun$) T_a_sum_set_T_a_sum_set_fun$)
(declare-fun image$d (T_dtree_sum_set_T_dtree_sum_set_fun$) T_dtree_sum_set_set_T_dtree_sum_set_set_fun$)
(declare-fun image$e (T_a_sum_set_T_a_sum_set_fun$) T_a_sum_set_set_T_a_sum_set_set_fun$)
(declare-fun image$f (T_set_set_T_set_set_fun$) T_set_set_set_T_set_set_set_fun$)
(declare-fun image$g (T_set_T_set_fun$) T_set_set_T_set_set_fun$)
(declare-fun image$h (T_T_fun$) T_set_T_set_fun$)
(declare-fun insert$ (N$ N_set$) N_set$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun minus$a (T_dtree_sum_set_set$ T_dtree_sum_set_set$) T_dtree_sum_set_set$)
(declare-fun minus$b (T_a_sum_set_set$ T_a_sum_set_set$) T_a_sum_set_set$)
(declare-fun minus$c (N_set_set_set$ N_set_set_set$) N_set_set_set$)
(declare-fun minus$d (T_set_set_set$ T_set_set_set$) T_set_set_set$)
(declare-fun minus$e (T_set_set$ T_set_set$) T_set_set$)
(declare-fun minus$f (N_set_set$ N_set_set$) N_set_set$)
(declare-fun minus$g (T_a_sum_set$ T_a_sum_set$) T_a_sum_set$)
(declare-fun minus$h (T_set$ T_set$) T_set$)
(declare-fun minus$i (T_dtree_sum_set$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun collect$ (T_bool_fun$) T_set$)
(declare-fun fun_app$ (T_bool_fun$ T$) Bool)
(declare-fun insert$a (T_dtree_sum_set$ T_dtree_sum_set_set$) T_dtree_sum_set_set$)
(declare-fun insert$b (T_a_sum_set$ T_a_sum_set_set$) T_a_sum_set_set$)
(declare-fun insert$c (N_set_set$ N_set_set_set$) N_set_set_set$)
(declare-fun insert$d (T_set_set$ T_set_set_set$) T_set_set_set$)
(declare-fun insert$e (N_set$ N_set_set$) N_set_set$)
(declare-fun insert$f (T_set$ T_set_set$) T_set_set$)
(declare-fun insert$g (T_a_sum$ T_a_sum_set$) T_a_sum_set$)
(declare-fun insert$h (T$ T_set$) T_set$)
(declare-fun insert$i (T_dtree_sum$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun map_sum$ (T_T_fun$ A_dtree_fun$) T_a_sum_T_dtree_sum_fun$)
(declare-fun member$a (T$) T_set_bool_fun$)
(declare-fun member$b (T_a_sum$ T_a_sum_set$) Bool)
(declare-fun member$c (N$) N_set_bool_fun$)
(declare-fun member$d (T_dtree_sum_set$ T_dtree_sum_set_set$) Bool)
(declare-fun member$e (T_a_sum_set$ T_a_sum_set_set$) Bool)
(declare-fun member$f (N_set_set$ N_set_set_set$) Bool)
(declare-fun member$g (T_set_set$ T_set_set_set$) Bool)
(declare-fun member$h (T_set$ T_set_set$) Bool)
(declare-fun member$i (N_set$ N_set_set$) Bool)
(declare-fun member$j (T_dtree_sum_set_set$ T_dtree_sum_set_set_set$) Bool)
(declare-fun member$k (T_a_sum_set_set$ T_a_sum_set_set_set$) Bool)
(declare-fun member$l (N_set_set_set$ N_set_set_set_set$) Bool)
(declare-fun member$m (T_set_set_set$ T_set_set_set_set$) Bool)
(declare-fun collect$a (T_set_bool_fun$) T_set_set$)
(declare-fun collect$b (T_dtree_sum_set_bool_fun$) T_dtree_sum_set_set$)
(declare-fun collect$c (T_a_sum_set_bool_fun$) T_a_sum_set_set$)
(declare-fun collect$d (N_set_set_bool_fun$) N_set_set_set$)
(declare-fun collect$e (T_set_set_bool_fun$) T_set_set_set$)
(declare-fun collect$f (N_set_bool_fun$) N_set_set$)
(declare-fun collect$g (T_a_sum_bool_fun$) T_a_sum_set$)
(declare-fun collect$h (T_dtree_sum_bool_fun$) T_dtree_sum_set$)
(declare-fun collect$i (N_bool_fun$) N_set$)
(declare-fun fun_app$a (T_set_bool_fun$ T_set$) Bool)
(declare-fun fun_app$b (A_dtree_fun$ A$) Dtree$)
(declare-fun fun_app$c (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun fun_app$d (T_a_sum_bool_fun$ T_a_sum$) Bool)
(declare-fun fun_app$e (T_dtree_sum_set_bool_fun$ T_dtree_sum_set$) Bool)
(declare-fun fun_app$f (T_a_sum_set_bool_fun$ T_a_sum_set$) Bool)
(declare-fun fun_app$g (T_set_set_bool_fun$ T_set_set$) Bool)
(declare-fun fun_app$h (N_set_set_bool_fun$ N_set_set$) Bool)
(declare-fun fun_app$i (N_set_bool_fun$ N_set$) Bool)
(declare-fun fun_app$j (N_bool_fun$ N$) Bool)
(declare-fun fun_app$k (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun fun_app$l (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$m (Dtree_a_fun$ Dtree$) A$)
(declare-fun fun_app$n (T_a_sum_set_T_a_sum_set_fun$ T_a_sum_set$) T_a_sum_set$)
(declare-fun fun_app$o (A_a_fun$ A$) A$)
(declare-fun map_sum$a (T_T_fun$ Dtree_dtree_fun$) T_dtree_sum_T_dtree_sum_fun$)
(declare-fun map_sum$b (T_T_fun$ Dtree_a_fun$) T_dtree_sum_T_a_sum_fun$)
(declare-fun map_sum$c (T_T_fun$ A_a_fun$) T_a_sum_T_a_sum_fun$)
(assert (! (forall ((?v0 T$)) (! (= (fun_app$ uu$ ?v0) (exists ((?v1 Dtree$)) (and (member$ (inr$ ?v1) (image$ (map_sum$ id$ ftr$) tns$)) (fun_app$a (member$a ?v0) (fr$ (minus$ ns$ (insert$ n$ bot$)) ?v1))))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 T_set$)) (! (= (fun_app$a uua$ ?v0) (exists ((?v1 A$)) (and (= ?v0 (fr$ (minus$ ns$ (insert$ n$ bot$)) (fun_app$b ftr$ ?v1))) (member$b (inr$a ?v1) tns$)))) :pattern ((fun_app$a uua$ ?v0)))) :named a1))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$)) (! (= (fun_app$c (uuh$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$c (uuh$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 T_a_sum$) (?v1 T_a_sum$)) (! (= (fun_app$d (uug$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (uug$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (! (= (fun_app$e (uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$e (uub$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 T_a_sum_set$) (?v1 T_a_sum_set$)) (! (= (fun_app$f (uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$f (uuc$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set$)) (! (= (fun_app$g (uue$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$g (uue$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set$)) (! (= (fun_app$h (uud$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$h (uud$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (! (= (fun_app$a (uuj$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$a (uuj$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (! (= (fun_app$i (uuf$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$i (uuf$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 T$) (?v1 T$)) (! (= (fun_app$ (uui$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (uui$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 N$) (?v1 N$)) (! (= (fun_app$j (uuk$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$j (uuk$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$)) (! (= (fun_app$c (uur$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$c (uur$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 T_a_sum$) (?v1 T_a_sum$)) (! (= (fun_app$d (uuq$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$d (uuq$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (! (= (fun_app$e (uul$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$e (uul$ ?v0) ?v1)))) :named a14))
(assert (! (forall ((?v0 T_a_sum_set$) (?v1 T_a_sum_set$)) (! (= (fun_app$f (uum$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$f (uum$ ?v0) ?v1)))) :named a15))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set$)) (! (= (fun_app$g (uuo$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$g (uuo$ ?v0) ?v1)))) :named a16))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set$)) (! (= (fun_app$h (uun$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$h (uun$ ?v0) ?v1)))) :named a17))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (! (= (fun_app$a (uut$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$a (uut$ ?v0) ?v1)))) :named a18))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (! (= (fun_app$i (uup$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$i (uup$ ?v0) ?v1)))) :named a19))
(assert (! (forall ((?v0 T$) (?v1 T$)) (! (= (fun_app$ (uus$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$ (uus$ ?v0) ?v1)))) :named a20))
(assert (! (forall ((?v0 N$) (?v1 N$)) (! (= (fun_app$j (uuu$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$j (uuu$ ?v0) ?v1)))) :named a21))
(assert (! (not (= (collect$ uu$) (sup$ (collect$a uua$)))) :named a22))
(assert (! (fun_app$i (member$c n$) ns$) :named a23))
(assert (! (finite$ tns$) :named a24))
(assert (! (= tr$ (node$ n$ (image$ (map_sum$ id$ ftr$) tns$))) :named a25))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 T_dtree_sum_set$)) (= (member$ (inr$ ?v0) (fun_app$k (image$a (map_sum$a id$ ?v1)) ?v2)) (exists ((?v3 Dtree$)) (and (member$ (inr$ ?v3) ?v2) (= (fun_app$l ?v1 ?v3) ?v0))))) :named a26))
(assert (! (forall ((?v0 A$) (?v1 Dtree_a_fun$) (?v2 T_dtree_sum_set$)) (= (member$b (inr$a ?v0) (image$b (map_sum$b id$ ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$ (inr$ ?v3) ?v2) (= (fun_app$m ?v1 ?v3) ?v0))))) :named a27))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 T_a_sum_set$)) (= (member$b (inr$a ?v0) (fun_app$n (image$c (map_sum$c id$ ?v1)) ?v2)) (exists ((?v3 A$)) (and (member$b (inr$a ?v3) ?v2) (= (fun_app$o ?v1 ?v3) ?v0))))) :named a28))
(assert (! (forall ((?v0 Dtree$) (?v1 A_dtree_fun$) (?v2 T_a_sum_set$)) (= (member$ (inr$ ?v0) (image$ (map_sum$ id$ ?v1) ?v2)) (exists ((?v3 A$)) (and (member$b (inr$a ?v3) ?v2) (= (fun_app$b ?v1 ?v3) ?v0))))) :named a29))
(assert (! (forall ((?v0 A$)) (=> (member$b (inr$a ?v0) tns$) (wf$ (fun_app$b ftr$ ?v0)))) :named a30))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (= (sup$a (insert$a ?v0 bot$a)) ?v0)) :named a31))
(assert (! (forall ((?v0 T_a_sum_set$)) (= (sup$b (insert$b ?v0 bot$b)) ?v0)) :named a32))
(assert (! (forall ((?v0 N_set_set$)) (= (sup$c (insert$c ?v0 bot$c)) ?v0)) :named a33))
(assert (! (forall ((?v0 T_set_set$)) (= (sup$d (insert$d ?v0 bot$d)) ?v0)) :named a34))
(assert (! (forall ((?v0 N_set$)) (= (sup$e (insert$e ?v0 bot$e)) ?v0)) :named a35))
(assert (! (forall ((?v0 T_set$)) (= (sup$ (insert$f ?v0 bot$f)) ?v0)) :named a36))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set_set$)) (= (insert$a ?v0 (minus$a ?v1 (insert$a ?v0 bot$a))) (insert$a ?v0 ?v1))) :named a37))
(assert (! (forall ((?v0 T_a_sum_set$) (?v1 T_a_sum_set_set$)) (= (insert$b ?v0 (minus$b ?v1 (insert$b ?v0 bot$b))) (insert$b ?v0 ?v1))) :named a38))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set_set$)) (= (insert$c ?v0 (minus$c ?v1 (insert$c ?v0 bot$c))) (insert$c ?v0 ?v1))) :named a39))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set_set$)) (= (insert$d ?v0 (minus$d ?v1 (insert$d ?v0 bot$d))) (insert$d ?v0 ?v1))) :named a40))
(assert (! (forall ((?v0 T_set$) (?v1 T_set_set$)) (= (insert$f ?v0 (minus$e ?v1 (insert$f ?v0 bot$f))) (insert$f ?v0 ?v1))) :named a41))
(assert (! (forall ((?v0 N_set$) (?v1 N_set_set$)) (= (insert$e ?v0 (minus$f ?v1 (insert$e ?v0 bot$e))) (insert$e ?v0 ?v1))) :named a42))
(assert (! (forall ((?v0 T_a_sum$) (?v1 T_a_sum_set$)) (= (insert$g ?v0 (minus$g ?v1 (insert$g ?v0 bot$g))) (insert$g ?v0 ?v1))) :named a43))
(assert (! (forall ((?v0 T$) (?v1 T_set$)) (= (insert$h ?v0 (minus$h ?v1 (insert$h ?v0 bot$h))) (insert$h ?v0 ?v1))) :named a44))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (= (insert$i ?v0 (minus$i ?v1 (insert$i ?v0 bot$i))) (insert$i ?v0 ?v1))) :named a45))
(assert (! (forall ((?v0 N$) (?v1 N_set$)) (= (insert$ ?v0 (minus$ ?v1 (insert$ ?v0 bot$))) (insert$ ?v0 ?v1))) :named a46))
(assert (! (= (sup$f bot$j) bot$a) :named a47))
(assert (! (= (sup$g bot$k) bot$b) :named a48))
(assert (! (= (sup$h bot$l) bot$c) :named a49))
(assert (! (= (sup$i bot$m) bot$d) :named a50))
(assert (! (= (sup$d bot$d) bot$f) :named a51))
(assert (! (= (sup$c bot$c) bot$e) :named a52))
(assert (! (= (sup$b bot$b) bot$g) :named a53))
(assert (! (= (sup$a bot$a) bot$i) :named a54))
(assert (! (= (sup$e bot$e) bot$) :named a55))
(assert (! (= (sup$ bot$f) bot$h) :named a56))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (= (collect$b (uub$ ?v0)) (insert$a ?v0 bot$a))) :named a57))
(assert (! (forall ((?v0 T_a_sum_set$)) (= (collect$c (uuc$ ?v0)) (insert$b ?v0 bot$b))) :named a58))
(assert (! (forall ((?v0 N_set_set$)) (= (collect$d (uud$ ?v0)) (insert$c ?v0 bot$c))) :named a59))
(assert (! (forall ((?v0 T_set_set$)) (= (collect$e (uue$ ?v0)) (insert$d ?v0 bot$d))) :named a60))
(assert (! (forall ((?v0 N_set$)) (= (collect$f (uuf$ ?v0)) (insert$e ?v0 bot$e))) :named a61))
(assert (! (forall ((?v0 T_a_sum$)) (= (collect$g (uug$ ?v0)) (insert$g ?v0 bot$g))) :named a62))
(assert (! (forall ((?v0 T_dtree_sum$)) (= (collect$h (uuh$ ?v0)) (insert$i ?v0 bot$i))) :named a63))
(assert (! (forall ((?v0 T$)) (= (collect$ (uui$ ?v0)) (insert$h ?v0 bot$h))) :named a64))
(assert (! (forall ((?v0 T_set$)) (= (collect$a (uuj$ ?v0)) (insert$f ?v0 bot$f))) :named a65))
(assert (! (forall ((?v0 N$)) (= (collect$i (uuk$ ?v0)) (insert$ ?v0 bot$))) :named a66))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (= (collect$b (uul$ ?v0)) (insert$a ?v0 bot$a))) :named a67))
(assert (! (forall ((?v0 T_a_sum_set$)) (= (collect$c (uum$ ?v0)) (insert$b ?v0 bot$b))) :named a68))
(assert (! (forall ((?v0 N_set_set$)) (= (collect$d (uun$ ?v0)) (insert$c ?v0 bot$c))) :named a69))
(assert (! (forall ((?v0 T_set_set$)) (= (collect$e (uuo$ ?v0)) (insert$d ?v0 bot$d))) :named a70))
(assert (! (forall ((?v0 N_set$)) (= (collect$f (uup$ ?v0)) (insert$e ?v0 bot$e))) :named a71))
(assert (! (forall ((?v0 T_a_sum$)) (= (collect$g (uuq$ ?v0)) (insert$g ?v0 bot$g))) :named a72))
(assert (! (forall ((?v0 T_dtree_sum$)) (= (collect$h (uur$ ?v0)) (insert$i ?v0 bot$i))) :named a73))
(assert (! (forall ((?v0 T$)) (= (collect$ (uus$ ?v0)) (insert$h ?v0 bot$h))) :named a74))
(assert (! (forall ((?v0 T_set$)) (= (collect$a (uut$ ?v0)) (insert$f ?v0 bot$f))) :named a75))
(assert (! (forall ((?v0 N$)) (= (collect$i (uuu$ ?v0)) (insert$ ?v0 bot$))) :named a76))
(assert (! (= (image$d id$a) id$b) :named a77))
(assert (! (= (image$e id$c) id$d) :named a78))
(assert (! (= (image$f id$e) id$f) :named a79))
(assert (! (= (image$g id$g) id$e) :named a80))
(assert (! (= (image$c id$h) id$c) :named a81))
(assert (! (= (image$a id$i) id$a) :named a82))
(assert (! (= (image$h id$) id$g) :named a83))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set_set$) (?v2 T_dtree_sum_set_set$)) (=> (member$d ?v0 ?v1) (= (minus$a (insert$a ?v0 ?v2) ?v1) (minus$a ?v2 ?v1)))) :named a84))
(assert (! (forall ((?v0 T_a_sum_set$) (?v1 T_a_sum_set_set$) (?v2 T_a_sum_set_set$)) (=> (member$e ?v0 ?v1) (= (minus$b (insert$b ?v0 ?v2) ?v1) (minus$b ?v2 ?v1)))) :named a85))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set_set$) (?v2 N_set_set_set$)) (=> (member$f ?v0 ?v1) (= (minus$c (insert$c ?v0 ?v2) ?v1) (minus$c ?v2 ?v1)))) :named a86))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set_set$) (?v2 T_set_set_set$)) (=> (member$g ?v0 ?v1) (= (minus$d (insert$d ?v0 ?v2) ?v1) (minus$d ?v2 ?v1)))) :named a87))
(assert (! (forall ((?v0 T_set$) (?v1 T_set_set$) (?v2 T_set_set$)) (=> (member$h ?v0 ?v1) (= (minus$e (insert$f ?v0 ?v2) ?v1) (minus$e ?v2 ?v1)))) :named a88))
(assert (! (forall ((?v0 N_set$) (?v1 N_set_set$) (?v2 N_set_set$)) (=> (member$i ?v0 ?v1) (= (minus$f (insert$e ?v0 ?v2) ?v1) (minus$f ?v2 ?v1)))) :named a89))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (member$ ?v0 ?v1) (= (minus$i (insert$i ?v0 ?v2) ?v1) (minus$i ?v2 ?v1)))) :named a90))
(assert (! (forall ((?v0 T$) (?v1 T_set$) (?v2 T_set$)) (=> (fun_app$a (member$a ?v0) ?v1) (= (minus$h (insert$h ?v0 ?v2) ?v1) (minus$h ?v2 ?v1)))) :named a91))
(assert (! (forall ((?v0 T_a_sum$) (?v1 T_a_sum_set$) (?v2 T_a_sum_set$)) (=> (member$b ?v0 ?v1) (= (minus$g (insert$g ?v0 ?v2) ?v1) (minus$g ?v2 ?v1)))) :named a92))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (fun_app$i (member$c ?v0) ?v1) (= (minus$ (insert$ ?v0 ?v2) ?v1) (minus$ ?v2 ?v1)))) :named a93))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set_set$) (?v2 T_dtree_sum_set_set$)) (=> (not (member$d ?v0 ?v1)) (= (minus$a ?v1 (insert$a ?v0 ?v2)) (minus$a ?v1 ?v2)))) :named a94))
(assert (! (forall ((?v0 T_a_sum_set$) (?v1 T_a_sum_set_set$) (?v2 T_a_sum_set_set$)) (=> (not (member$e ?v0 ?v1)) (= (minus$b ?v1 (insert$b ?v0 ?v2)) (minus$b ?v1 ?v2)))) :named a95))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set_set$) (?v2 N_set_set_set$)) (=> (not (member$f ?v0 ?v1)) (= (minus$c ?v1 (insert$c ?v0 ?v2)) (minus$c ?v1 ?v2)))) :named a96))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set_set$) (?v2 T_set_set_set$)) (=> (not (member$g ?v0 ?v1)) (= (minus$d ?v1 (insert$d ?v0 ?v2)) (minus$d ?v1 ?v2)))) :named a97))
(assert (! (forall ((?v0 T_set$) (?v1 T_set_set$) (?v2 T_set_set$)) (=> (not (member$h ?v0 ?v1)) (= (minus$e ?v1 (insert$f ?v0 ?v2)) (minus$e ?v1 ?v2)))) :named a98))
(assert (! (forall ((?v0 N_set$) (?v1 N_set_set$) (?v2 N_set_set$)) (=> (not (member$i ?v0 ?v1)) (= (minus$f ?v1 (insert$e ?v0 ?v2)) (minus$f ?v1 ?v2)))) :named a99))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (not (member$ ?v0 ?v1)) (= (minus$i ?v1 (insert$i ?v0 ?v2)) (minus$i ?v1 ?v2)))) :named a100))
(assert (! (forall ((?v0 T$) (?v1 T_set$) (?v2 T_set$)) (=> (not (fun_app$a (member$a ?v0) ?v1)) (= (minus$h ?v1 (insert$h ?v0 ?v2)) (minus$h ?v1 ?v2)))) :named a101))
(assert (! (forall ((?v0 T_a_sum$) (?v1 T_a_sum_set$) (?v2 T_a_sum_set$)) (=> (not (member$b ?v0 ?v1)) (= (minus$g ?v1 (insert$g ?v0 ?v2)) (minus$g ?v1 ?v2)))) :named a102))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (not (fun_app$i (member$c ?v0) ?v1)) (= (minus$ ?v1 (insert$ ?v0 ?v2)) (minus$ ?v1 ?v2)))) :named a103))
(assert (! (forall ((?v0 T_dtree_sum_set_set_set$)) (= (= bot$a (sup$f ?v0)) (forall ((?v1 T_dtree_sum_set_set$)) (=> (member$j ?v1 ?v0) (= ?v1 bot$a))))) :named a104))
(assert (! (forall ((?v0 T_a_sum_set_set_set$)) (= (= bot$b (sup$g ?v0)) (forall ((?v1 T_a_sum_set_set$)) (=> (member$k ?v1 ?v0) (= ?v1 bot$b))))) :named a105))
(assert (! (forall ((?v0 N_set_set_set_set$)) (= (= bot$c (sup$h ?v0)) (forall ((?v1 N_set_set_set$)) (=> (member$l ?v1 ?v0) (= ?v1 bot$c))))) :named a106))
(assert (! (forall ((?v0 T_set_set_set_set$)) (= (= bot$d (sup$i ?v0)) (forall ((?v1 T_set_set_set$)) (=> (member$m ?v1 ?v0) (= ?v1 bot$d))))) :named a107))
(assert (! (forall ((?v0 T_set_set_set$)) (= (= bot$f (sup$d ?v0)) (forall ((?v1 T_set_set$)) (=> (member$g ?v1 ?v0) (= ?v1 bot$f))))) :named a108))
(assert (! (forall ((?v0 N_set_set_set$)) (= (= bot$e (sup$c ?v0)) (forall ((?v1 N_set_set$)) (=> (member$f ?v1 ?v0) (= ?v1 bot$e))))) :named a109))
(assert (! (forall ((?v0 T_a_sum_set_set$)) (= (= bot$g (sup$b ?v0)) (forall ((?v1 T_a_sum_set$)) (=> (member$e ?v1 ?v0) (= ?v1 bot$g))))) :named a110))
(assert (! (forall ((?v0 T_dtree_sum_set_set$)) (= (= bot$i (sup$a ?v0)) (forall ((?v1 T_dtree_sum_set$)) (=> (member$d ?v1 ?v0) (= ?v1 bot$i))))) :named a111))
(assert (! (forall ((?v0 N_set_set$)) (= (= bot$ (sup$e ?v0)) (forall ((?v1 N_set$)) (=> (member$i ?v1 ?v0) (= ?v1 bot$))))) :named a112))
(assert (! (forall ((?v0 T_set_set$)) (= (= bot$h (sup$ ?v0)) (forall ((?v1 T_set$)) (=> (member$h ?v1 ?v0) (= ?v1 bot$h))))) :named a113))
(assert (! (forall ((?v0 T_dtree_sum_set_set_set$)) (= (= (sup$f ?v0) bot$a) (forall ((?v1 T_dtree_sum_set_set$)) (=> (member$j ?v1 ?v0) (= ?v1 bot$a))))) :named a114))
(assert (! (forall ((?v0 T_a_sum_set_set_set$)) (= (= (sup$g ?v0) bot$b) (forall ((?v1 T_a_sum_set_set$)) (=> (member$k ?v1 ?v0) (= ?v1 bot$b))))) :named a115))
(assert (! (forall ((?v0 N_set_set_set_set$)) (= (= (sup$h ?v0) bot$c) (forall ((?v1 N_set_set_set$)) (=> (member$l ?v1 ?v0) (= ?v1 bot$c))))) :named a116))
(assert (! (forall ((?v0 T_set_set_set_set$)) (= (= (sup$i ?v0) bot$d) (forall ((?v1 T_set_set_set$)) (=> (member$m ?v1 ?v0) (= ?v1 bot$d))))) :named a117))
(assert (! (forall ((?v0 T_set_set_set$)) (= (= (sup$d ?v0) bot$f) (forall ((?v1 T_set_set$)) (=> (member$g ?v1 ?v0) (= ?v1 bot$f))))) :named a118))
(assert (! (forall ((?v0 N_set_set_set$)) (= (= (sup$c ?v0) bot$e) (forall ((?v1 N_set_set$)) (=> (member$f ?v1 ?v0) (= ?v1 bot$e))))) :named a119))
(assert (! (forall ((?v0 T_a_sum_set_set$)) (= (= (sup$b ?v0) bot$g) (forall ((?v1 T_a_sum_set$)) (=> (member$e ?v1 ?v0) (= ?v1 bot$g))))) :named a120))
(assert (! (forall ((?v0 T_dtree_sum_set_set$)) (= (= (sup$a ?v0) bot$i) (forall ((?v1 T_dtree_sum_set$)) (=> (member$d ?v1 ?v0) (= ?v1 bot$i))))) :named a121))
(assert (! (forall ((?v0 N_set_set$)) (= (= (sup$e ?v0) bot$) (forall ((?v1 N_set$)) (=> (member$i ?v1 ?v0) (= ?v1 bot$))))) :named a122))
(assert (! (forall ((?v0 T_set_set$)) (= (= (sup$ ?v0) bot$h) (forall ((?v1 T_set$)) (=> (member$h ?v1 ?v0) (= ?v1 bot$h))))) :named a123))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (= (member$d ?v0 bot$a) false)) :named a124))
(assert (! (forall ((?v0 T_a_sum_set$)) (= (member$e ?v0 bot$b) false)) :named a125))
(assert (! (forall ((?v0 N_set_set$)) (= (member$f ?v0 bot$c) false)) :named a126))
(assert (! (forall ((?v0 T_set_set$)) (= (member$g ?v0 bot$d) false)) :named a127))
(assert (! (forall ((?v0 T_set$)) (= (member$h ?v0 bot$f) false)) :named a128))
(assert (! (forall ((?v0 N_set$)) (= (member$i ?v0 bot$e) false)) :named a129))
(assert (! (forall ((?v0 T_dtree_sum$)) (= (member$ ?v0 bot$i) false)) :named a130))
(assert (! (forall ((?v0 T$)) (= (fun_app$a (member$a ?v0) bot$h) false)) :named a131))
(assert (! (forall ((?v0 T_a_sum$)) (= (member$b ?v0 bot$g) false)) :named a132))
(assert (! (forall ((?v0 N$)) (= (fun_app$i (member$c ?v0) bot$) false)) :named a133))
(assert (! (forall ((?v0 N_set_bool_fun$)) (= (= bot$e (collect$f ?v0)) (forall ((?v1 N_set$)) (not (fun_app$i ?v0 ?v1))))) :named a134))
(assert (! (forall ((?v0 T_a_sum_bool_fun$)) (= (= bot$g (collect$g ?v0)) (forall ((?v1 T_a_sum$)) (not (fun_app$d ?v0 ?v1))))) :named a135))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$)) (= (= bot$i (collect$h ?v0)) (forall ((?v1 T_dtree_sum$)) (not (fun_app$c ?v0 ?v1))))) :named a136))
(assert (! (forall ((?v0 T_bool_fun$)) (= (= bot$h (collect$ ?v0)) (forall ((?v1 T$)) (not (fun_app$ ?v0 ?v1))))) :named a137))
(assert (! (forall ((?v0 T_set_bool_fun$)) (= (= bot$f (collect$a ?v0)) (forall ((?v1 T_set$)) (not (fun_app$a ?v0 ?v1))))) :named a138))
(assert (! (forall ((?v0 N_bool_fun$)) (= (= bot$ (collect$i ?v0)) (forall ((?v1 N$)) (not (fun_app$j ?v0 ?v1))))) :named a139))
(check-sat)
;(get-unsat-core)
