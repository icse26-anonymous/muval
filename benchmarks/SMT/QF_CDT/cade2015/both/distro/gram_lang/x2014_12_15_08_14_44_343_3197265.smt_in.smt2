; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 399
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-datatypes () ((N_list$ (nil$) (cons$ (hd$ N$) (tl$ N_list$)))))
(declare-fun f$ () N_dtree_fun$)
(declare-fun n$ () N$)
(declare-fun n1$ () N$)
(declare-fun nl$ () N_list$)
(declare-fun tr$ () Dtree$)
(declare-fun nl1$ () N_list$)
(declare-fun nl2$ () N_list$)
(declare-fun reg$ (N_dtree_fun$ Dtree$) Bool)
(declare-fun tr1$ () Dtree$)
(declare-fun last$ (N_list$) N$)
(declare-fun path$ (N_dtree_fun$ N_list$) Bool)
(declare-fun root$ (Dtree$) N$)
(declare-fun fun_app$ (N_dtree_fun$ N$) Dtree$)
(declare-fun regular$ (Dtree$) Bool)
(assert (! (not (path$ f$ (cons$ n1$ nl2$))) :named a0))
(assert (! (regular$ tr$) :named a1))
(assert (! (= (fun_app$ f$ n$) tr$) :named a2))
(assert (! (path$ f$ nl$) :named a3))
(assert (! (reg$ f$ tr$) :named a4))
(assert (! (= nl1$ (cons$ n1$ nl2$)) :named a5))
(assert (! (=> (forall ((?v0 N$) (?v1 N_list$)) (=> (= nl$ (cons$ ?v0 ?v1)) false)) false) :named a6))
(assert (! (forall ((?v0 N$) (?v1 N_list$) (?v2 N$) (?v3 N_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a7))
(assert (! (forall ((?v0 N$)) (= (root$ (fun_app$ f$ ?v0)) ?v0)) :named a8))
(assert (! (= nl$ (cons$ n$ nl1$)) :named a9))
(assert (! (= (hd$ nl1$) n1$) :named a10))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (not (= (cons$ ?v0 ?v1) ?v1))) :named a11))
(assert (! (= (fun_app$ f$ (hd$ nl$)) tr$) :named a12))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N$) (?v2 N_list$)) (=> (and (path$ ?v0 (cons$ ?v1 ?v2)) (not (= ?v2 nil$))) (path$ ?v0 ?v2))) :named a13))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N$)) (path$ ?v0 (cons$ ?v1 nil$))) :named a14))
(assert (! (= (fun_app$ f$ (last$ nl$)) tr1$) :named a15))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (=> (path$ ?v0 ?v1) (not (= ?v1 nil$)))) :named a16))
(check-sat)
;(get-unsat-core)
