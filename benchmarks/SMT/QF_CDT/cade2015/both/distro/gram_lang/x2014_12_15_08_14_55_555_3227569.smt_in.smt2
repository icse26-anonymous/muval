; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 398
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort N_set_set$ 0)
(declare-sort T_set_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort N_set_set_set$ 0)
(declare-sort T_set_set_set$ 0)
(declare-sort N_set_bool_fun$ 0)
(declare-sort T_set_bool_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort N_set_set_set_set$ 0)
(declare-sort T_T_dtree_sum_fun$ 0)
(declare-sort T_set_set_set_set$ 0)
(declare-sort N_set_set_bool_fun$ 0)
(declare-sort T_set_set_bool_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun x$ () T$)
(declare-fun ns$ () N_set$)
(declare-fun tr$ () Dtree$)
(declare-fun uu$ () T_T_dtree_sum_fun$)
(declare-fun bot$ () N_set$)
(declare-fun sup$ (T_set_set$) T_set$)
(declare-fun uua$ () T_set_bool_fun$)
(declare-fun uub$ (N_set_set$) N_set_set_bool_fun$)
(declare-fun uuc$ (T_set_set$) T_set_set_bool_fun$)
(declare-fun uud$ (N_set$) N_set_bool_fun$)
(declare-fun uue$ (T_set$) T_set_bool_fun$)
(declare-fun uuf$ (T$) T_bool_fun$)
(declare-fun uug$ (N$) N_bool_fun$)
(declare-fun uuh$ (N_set_set$) N_set_set_bool_fun$)
(declare-fun uui$ (T_set_set$) T_set_set_bool_fun$)
(declare-fun uuj$ (N_set$) N_set_bool_fun$)
(declare-fun uuk$ (T_set$) T_set_bool_fun$)
(declare-fun uul$ (T$) T_bool_fun$)
(declare-fun uum$ (N$) N_bool_fun$)
(declare-fun bot$a () N_set_set_set$)
(declare-fun bot$b () T_set_set_set$)
(declare-fun bot$c () N_set_set$)
(declare-fun bot$d () T_set_set$)
(declare-fun bot$e () T_set$)
(declare-fun bot$f () N_set_set_set_set$)
(declare-fun bot$g () T_set_set_set_set$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun inFr$ (N_set$ Dtree$) T_bool_fun$)
(declare-fun root$ (Dtree$) N$)
(declare-fun sup$a (N_set_set_set$) N_set_set$)
(declare-fun sup$b (T_set_set_set$) T_set_set$)
(declare-fun sup$c (N_set_set$) N_set$)
(declare-fun sup$d (N_set_set_set_set$) N_set_set_set$)
(declare-fun sup$e (T_set_set_set_set$) T_set_set_set$)
(declare-fun minus$ (N_set$ N_set$) N_set$)
(declare-fun insert$ (N$ N_set$) N_set$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun minus$a (N_set_set_set$ N_set_set_set$) N_set_set_set$)
(declare-fun minus$b (T_set_set_set$ T_set_set_set$) T_set_set_set$)
(declare-fun minus$c (T_set_set$ T_set_set$) T_set_set$)
(declare-fun minus$d (T_set$ T_set$) T_set$)
(declare-fun minus$e (N_set_set$ N_set_set$) N_set_set$)
(declare-fun vimage$ (T_T_dtree_sum_fun$ T_dtree_sum_set$) T_set$)
(declare-fun collect$ (T_bool_fun$) T_set$)
(declare-fun fun_app$ (T_set_bool_fun$ T_set$) Bool)
(declare-fun insert$a (N_set_set$ N_set_set_set$) N_set_set_set$)
(declare-fun insert$b (T_set_set$ T_set_set_set$) T_set_set_set$)
(declare-fun insert$c (N_set$ N_set_set$) N_set_set$)
(declare-fun insert$d (T_set$ T_set_set$) T_set_set$)
(declare-fun insert$e (T$ T_set$) T_set$)
(declare-fun member$a (T$ T_set$) Bool)
(declare-fun member$b (N$ N_set$) Bool)
(declare-fun regular$ (Dtree$) Bool)
(declare-fun collect$a (T_set_bool_fun$) T_set_set$)
(declare-fun collect$b (N_set_set_bool_fun$) N_set_set_set$)
(declare-fun collect$c (T_set_set_bool_fun$) T_set_set_set$)
(declare-fun collect$d (N_set_bool_fun$) N_set_set$)
(declare-fun collect$e (N_bool_fun$) N_set$)
(declare-fun fun_app$a (T_T_dtree_sum_fun$ T$) T_dtree_sum$)
(declare-fun fun_app$b (T_set_set_bool_fun$ T_set_set$) Bool)
(declare-fun fun_app$c (N_set_set_bool_fun$ N_set_set$) Bool)
(declare-fun fun_app$d (N_set_bool_fun$ N_set$) Bool)
(declare-fun fun_app$e (T_bool_fun$ T$) Bool)
(declare-fun fun_app$f (N_bool_fun$ N$) Bool)
(assert (! (forall ((?v0 T_set$)) (! (= (fun_app$ uua$ ?v0) (exists ((?v1 Dtree$)) (and (= ?v0 (collect$ (inFr$ (minus$ ns$ (insert$ (root$ tr$) bot$)) ?v1))) (member$ (inr$ ?v1) (cont$ tr$))))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$a uu$ ?v0) (inl$ ?v0)) :pattern ((fun_app$a uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set$)) (! (= (fun_app$b (uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (uuc$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set$)) (! (= (fun_app$c (uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$c (uub$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (! (= (fun_app$ (uue$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (uue$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (! (= (fun_app$d (uud$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (uud$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 T$) (?v1 T$)) (! (= (fun_app$e (uuf$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$e (uuf$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 N$) (?v1 N$)) (! (= (fun_app$f (uug$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$f (uug$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set$)) (! (= (fun_app$b (uui$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$b (uui$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set$)) (! (= (fun_app$c (uuh$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$c (uuh$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (! (= (fun_app$ (uuk$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$ (uuk$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (! (= (fun_app$d (uuj$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$d (uuj$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 T$) (?v1 T$)) (! (= (fun_app$e (uul$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$e (uul$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 N$) (?v1 N$)) (! (= (fun_app$f (uum$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$f (uum$ ?v0) ?v1)))) :named a13))
(assert (! (not (member$a x$ (vimage$ uu$ (cont$ tr$)))) :named a14))
(assert (! (member$b (root$ tr$) ns$) :named a15))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (and (member$b (root$ ?v0) ?v1) (member$ (inl$ ?v2) (cont$ ?v0))) (fun_app$e (inFr$ ?v1 ?v0) ?v2))) :named a16))
(assert (! (forall ((?v0 T$)) (=> (fun_app$e (inFr$ ns$ tr$) ?v0) (or (member$a ?v0 (vimage$ uu$ (cont$ tr$))) (exists ((?v1 Dtree$)) (and (member$ (inr$ ?v1) (cont$ tr$)) (fun_app$e (inFr$ (minus$ ns$ (insert$ (root$ tr$) bot$)) ?v1) ?v0)))))) :named a17))
(assert (! (not (member$a x$ (sup$ (collect$a uua$)))) :named a18))
(assert (! (fun_app$e (inFr$ ns$ tr$) x$) :named a19))
(assert (! (regular$ tr$) :named a20))
(assert (! (member$b (root$ tr$) ns$) :named a21))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (= (fun_app$e (inFr$ ?v0 ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 T$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (member$b (root$ ?v3) ?v4) (member$ (inl$ ?v5) (cont$ ?v3))))))) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 T$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$b (root$ ?v3) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (fun_app$e (inFr$ ?v4 ?v5) ?v6)))))))))) :named a22))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (and (fun_app$e (inFr$ ?v0 ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 T$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (member$b (root$ ?v3) ?v4) (member$ (inl$ ?v5) (cont$ ?v3)))))) false)) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 T$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$b (root$ ?v3) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (fun_app$e (inFr$ ?v4 ?v5) ?v6)))))) false)))) false)) :named a23))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (fun_app$e (inFr$ ?v0 ?v1) ?v2) (member$ (inr$ ?v1) (cont$ ?v3))) (fun_app$e (inFr$ (insert$ (root$ ?v3) ?v0) ?v3) ?v2))) :named a24))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$e (inFr$ ?v0 ?v1) ?v2) (member$b (root$ ?v1) ?v0))) :named a25))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (and (member$b (root$ ?v0) ?v1) (member$ (inl$ ?v2) (cont$ ?v0))) (fun_app$e (inFr$ ?v1 ?v0) ?v2))) :named a26))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 T$)) (=> (and (member$b (root$ ?v0) ?v1) (and (member$ (inr$ ?v2) (cont$ ?v0)) (fun_app$e (inFr$ ?v1 ?v2) ?v3))) (fun_app$e (inFr$ ?v1 ?v0) ?v3))) :named a27))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (not (member$b (root$ ?v0) ?v1)) (not (fun_app$e (inFr$ ?v1 ?v0) ?v2)))) :named a28))
(assert (! (forall ((?v0 N_set_set$)) (= (sup$a (insert$a ?v0 bot$a)) ?v0)) :named a29))
(assert (! (forall ((?v0 T_set_set$)) (= (sup$b (insert$b ?v0 bot$b)) ?v0)) :named a30))
(assert (! (forall ((?v0 N_set$)) (= (sup$c (insert$c ?v0 bot$c)) ?v0)) :named a31))
(assert (! (forall ((?v0 T_set$)) (= (sup$ (insert$d ?v0 bot$d)) ?v0)) :named a32))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set_set$)) (= (insert$a ?v0 (minus$a ?v1 (insert$a ?v0 bot$a))) (insert$a ?v0 ?v1))) :named a33))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set_set$)) (= (insert$b ?v0 (minus$b ?v1 (insert$b ?v0 bot$b))) (insert$b ?v0 ?v1))) :named a34))
(assert (! (forall ((?v0 T_set$) (?v1 T_set_set$)) (= (insert$d ?v0 (minus$c ?v1 (insert$d ?v0 bot$d))) (insert$d ?v0 ?v1))) :named a35))
(assert (! (forall ((?v0 T$) (?v1 T_set$)) (= (insert$e ?v0 (minus$d ?v1 (insert$e ?v0 bot$e))) (insert$e ?v0 ?v1))) :named a36))
(assert (! (forall ((?v0 N_set$) (?v1 N_set_set$)) (= (insert$c ?v0 (minus$e ?v1 (insert$c ?v0 bot$c))) (insert$c ?v0 ?v1))) :named a37))
(assert (! (forall ((?v0 N$) (?v1 N_set$)) (= (insert$ ?v0 (minus$ ?v1 (insert$ ?v0 bot$))) (insert$ ?v0 ?v1))) :named a38))
(assert (! (= (sup$d bot$f) bot$a) :named a39))
(assert (! (= (sup$e bot$g) bot$b) :named a40))
(assert (! (= (sup$b bot$b) bot$d) :named a41))
(assert (! (= (sup$a bot$a) bot$c) :named a42))
(assert (! (= (sup$c bot$c) bot$) :named a43))
(assert (! (= (sup$ bot$d) bot$e) :named a44))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (and (regular$ ?v0) (and (member$b (root$ ?v0) ?v1) (fun_app$e (inFr$ ?v1 ?v0) ?v2))) (or (member$a ?v2 (vimage$ uu$ (cont$ ?v0))) (exists ((?v3 Dtree$)) (and (member$ (inr$ ?v3) (cont$ ?v0)) (fun_app$e (inFr$ (minus$ ?v1 (insert$ (root$ ?v0) bot$)) ?v3) ?v2)))))) :named a45))
(assert (! (forall ((?v0 N_set_set$)) (= (collect$b (uub$ ?v0)) (insert$a ?v0 bot$a))) :named a46))
(assert (! (forall ((?v0 T_set_set$)) (= (collect$c (uuc$ ?v0)) (insert$b ?v0 bot$b))) :named a47))
(assert (! (forall ((?v0 N_set$)) (= (collect$d (uud$ ?v0)) (insert$c ?v0 bot$c))) :named a48))
(assert (! (forall ((?v0 T_set$)) (= (collect$a (uue$ ?v0)) (insert$d ?v0 bot$d))) :named a49))
(assert (! (forall ((?v0 T$)) (= (collect$ (uuf$ ?v0)) (insert$e ?v0 bot$e))) :named a50))
(assert (! (forall ((?v0 N$)) (= (collect$e (uug$ ?v0)) (insert$ ?v0 bot$))) :named a51))
(assert (! (forall ((?v0 N_set_set$)) (= (collect$b (uuh$ ?v0)) (insert$a ?v0 bot$a))) :named a52))
(assert (! (forall ((?v0 T_set_set$)) (= (collect$c (uui$ ?v0)) (insert$b ?v0 bot$b))) :named a53))
(assert (! (forall ((?v0 N_set$)) (= (collect$d (uuj$ ?v0)) (insert$c ?v0 bot$c))) :named a54))
(assert (! (forall ((?v0 T_set$)) (= (collect$a (uuk$ ?v0)) (insert$d ?v0 bot$d))) :named a55))
(assert (! (forall ((?v0 T$)) (= (collect$ (uul$ ?v0)) (insert$e ?v0 bot$e))) :named a56))
(assert (! (forall ((?v0 N$)) (= (collect$e (uum$ ?v0)) (insert$ ?v0 bot$))) :named a57))
(assert (! (forall ((?v0 T$) (?v1 Dtree$)) (= (= (inl$ ?v0) (inr$ ?v1)) false)) :named a58))
(assert (! (forall ((?v0 Dtree$) (?v1 T$)) (= (= (inr$ ?v0) (inl$ ?v1)) false)) :named a59))
(check-sat)
;(get-unsat-core)
