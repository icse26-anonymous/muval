; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 456
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort N_N_fun$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort T_N_sum_set$ 0)
(declare-sort N_T_N_sum_fun$ 0)
(declare-sort T_N_sum_N_fun$ 0)
(declare-sort T_N_sum_bool_fun$ 0)
(declare-sort T_N_sum_T_N_sum_fun$ 0)
(declare-sort N_T_N_sum_set_prod_set$ 0)
(declare-sort N_N_T_N_sum_set_prod_fun$ 0)
(declare-sort N_T_N_sum_set_prod_N_fun$ 0)
(declare-sort N_T_N_sum_set_prod_bool_fun$ 0)
(declare-sort N_T_N_sum_set_prod_T_N_sum_fun$ 0)
(declare-sort T_N_sum_N_T_N_sum_set_prod_fun$ 0)
(declare-sort N_T_N_sum_set_prod_N_T_N_sum_set_prod_fun$ 0)
(declare-datatypes () ((T_N_sum$ (inl$ (projl$ T$)) (inr$ (projr$ N$)))
  (N_T_N_sum_set_prod$ (pair$ (fst$ N$) (snd$ T_N_sum_set$)))))
(declare-fun k$ (N$) T_set$)
(declare-fun n$ () N$)
(declare-fun p$ () N_T_N_sum_set_prod_set$)
(declare-fun fr$ (N_set$ Dtree$) T_set$)
(declare-fun ns$ () N_set$)
(declare-fun tr$ () Dtree$)
(declare-fun uu$ () N_T_N_sum_fun$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun xb$ () N$)
(declare-fun bot$ () N_set$)
(declare-fun ftr$ (N$) Dtree$)
(declare-fun tns$ () T_N_sum_set$)
(declare-fun bot$a () N_T_N_sum_set_prod_set$)
(declare-fun bot$b () T_N_sum_set$)
(declare-fun rcut$ (Dtree$) Dtree$)
(declare-fun root$ (Dtree$) N$)
(declare-fun minus$ (N_set$ N_set$) N_set$)
(declare-fun insert$ (N$ N_set$) N_set$)
(declare-fun member$ (N$ N_set$) Bool)
(declare-fun vimage$ (N_T_N_sum_fun$ T_N_sum_set$) N_set$)
(declare-fun collect$ (T_N_sum_bool_fun$) T_N_sum_set$)
(declare-fun fun_app$ (N_T_N_sum_fun$ N$) T_N_sum$)
(declare-fun member$a (T_N_sum$ T_N_sum_set$) Bool)
(declare-fun member$b (N_T_N_sum_set_prod$ N_T_N_sum_set_prod_set$) Bool)
(declare-fun vimage$a (N_N_fun$ N_set$) N_set$)
(declare-fun vimage$b (N_N_T_N_sum_set_prod_fun$ N_T_N_sum_set_prod_set$) N_set$)
(declare-fun vimage$c (T_N_sum_N_fun$ N_set$) T_N_sum_set$)
(declare-fun vimage$d (T_N_sum_T_N_sum_fun$ T_N_sum_set$) T_N_sum_set$)
(declare-fun vimage$e (T_N_sum_N_T_N_sum_set_prod_fun$ N_T_N_sum_set_prod_set$) T_N_sum_set$)
(declare-fun vimage$f (N_T_N_sum_set_prod_N_fun$ N_set$) N_T_N_sum_set_prod_set$)
(declare-fun vimage$g (N_T_N_sum_set_prod_T_N_sum_fun$ T_N_sum_set$) N_T_N_sum_set_prod_set$)
(declare-fun vimage$h (N_T_N_sum_set_prod_N_T_N_sum_set_prod_fun$ N_T_N_sum_set_prod_set$) N_T_N_sum_set_prod_set$)
(declare-fun collect$a (N_T_N_sum_set_prod_bool_fun$) N_T_N_sum_set_prod_set$)
(declare-fun collect$b (N_bool_fun$) N_set$)
(declare-fun fun_app$a (N_N_fun$ N$) N$)
(declare-fun fun_app$b (N_N_T_N_sum_set_prod_fun$ N$) N_T_N_sum_set_prod$)
(declare-fun fun_app$c (T_N_sum_N_fun$ T_N_sum$) N$)
(declare-fun fun_app$d (T_N_sum_T_N_sum_fun$ T_N_sum$) T_N_sum$)
(declare-fun fun_app$e (T_N_sum_N_T_N_sum_set_prod_fun$ T_N_sum$) N_T_N_sum_set_prod$)
(declare-fun fun_app$f (N_T_N_sum_set_prod_N_fun$ N_T_N_sum_set_prod$) N$)
(declare-fun fun_app$g (N_T_N_sum_set_prod_T_N_sum_fun$ N_T_N_sum_set_prod$) T_N_sum$)
(declare-fun fun_app$h (N_T_N_sum_set_prod_N_T_N_sum_set_prod_fun$ N_T_N_sum_set_prod$) N_T_N_sum_set_prod$)
(declare-fun fun_app$i (N_dtree_fun$ N$) Dtree$)
(declare-fun fun_app$j (T_N_sum_bool_fun$ T_N_sum$) Bool)
(declare-fun fun_app$k (N_T_N_sum_set_prod_bool_fun$ N_T_N_sum_set_prod$) Bool)
(declare-fun fun_app$l (N_bool_fun$ N$) Bool)
(declare-fun hsubst_r$ (Dtree$) N$)
(assert (! (forall ((?v0 N$)) (! (= (fun_app$ uu$ ?v0) (inr$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (member$ (root$ (ftr$ xb$)) (vimage$ uu$ tns$))) :named a1))
(assert (! (member$a (inr$ xb$) tns$) :named a2))
(assert (! (forall ((?v0 N$)) (=> (member$a (inr$ ?v0) tns$) (and (= (k$ ?v0) (fr$ (minus$ ns$ (insert$ n$ bot$)) (ftr$ ?v0))) (and (wf$ (ftr$ ?v0)) (= (root$ (ftr$ ?v0)) ?v0))))) :named a3))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (= (member$ ?v0 (vimage$a ?v1 ?v2)) (member$ (fun_app$a ?v1 ?v0) ?v2))) :named a4))
(assert (! (forall ((?v0 N$) (?v1 N_N_T_N_sum_set_prod_fun$) (?v2 N_T_N_sum_set_prod_set$)) (= (member$ ?v0 (vimage$b ?v1 ?v2)) (member$b (fun_app$b ?v1 ?v0) ?v2))) :named a5))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_N_fun$) (?v2 N_set$)) (= (member$a ?v0 (vimage$c ?v1 ?v2)) (member$ (fun_app$c ?v1 ?v0) ?v2))) :named a6))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_T_N_sum_fun$) (?v2 T_N_sum_set$)) (= (member$a ?v0 (vimage$d ?v1 ?v2)) (member$a (fun_app$d ?v1 ?v0) ?v2))) :named a7))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_N_T_N_sum_set_prod_fun$) (?v2 N_T_N_sum_set_prod_set$)) (= (member$a ?v0 (vimage$e ?v1 ?v2)) (member$b (fun_app$e ?v1 ?v0) ?v2))) :named a8))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$) (?v1 N_T_N_sum_set_prod_N_fun$) (?v2 N_set$)) (= (member$b ?v0 (vimage$f ?v1 ?v2)) (member$ (fun_app$f ?v1 ?v0) ?v2))) :named a9))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$) (?v1 N_T_N_sum_set_prod_T_N_sum_fun$) (?v2 T_N_sum_set$)) (= (member$b ?v0 (vimage$g ?v1 ?v2)) (member$a (fun_app$g ?v1 ?v0) ?v2))) :named a10))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$) (?v1 N_T_N_sum_set_prod_N_T_N_sum_set_prod_fun$) (?v2 N_T_N_sum_set_prod_set$)) (= (member$b ?v0 (vimage$h ?v1 ?v2)) (member$b (fun_app$h ?v1 ?v0) ?v2))) :named a11))
(assert (! (forall ((?v0 N$) (?v1 N_T_N_sum_fun$) (?v2 T_N_sum_set$)) (= (member$ ?v0 (vimage$ ?v1 ?v2)) (member$a (fun_app$ ?v1 ?v0) ?v2))) :named a12))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$a ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$ ?v1 (vimage$a ?v0 ?v3)))) :named a13))
(assert (! (forall ((?v0 T_N_sum_N_fun$) (?v1 T_N_sum$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$c ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$a ?v1 (vimage$c ?v0 ?v3)))) :named a14))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_N_fun$) (?v1 N_T_N_sum_set_prod$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$f ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$b ?v1 (vimage$f ?v0 ?v3)))) :named a15))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$) (?v1 T_N_sum$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= (fun_app$d ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$a ?v1 (vimage$d ?v0 ?v3)))) :named a16))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_T_N_sum_fun$) (?v1 N_T_N_sum_set_prod$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= (fun_app$g ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$b ?v1 (vimage$g ?v0 ?v3)))) :named a17))
(assert (! (forall ((?v0 N_N_T_N_sum_set_prod_fun$) (?v1 N$) (?v2 N_T_N_sum_set_prod$) (?v3 N_T_N_sum_set_prod_set$)) (=> (and (= (fun_app$b ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$ ?v1 (vimage$b ?v0 ?v3)))) :named a18))
(assert (! (forall ((?v0 T_N_sum_N_T_N_sum_set_prod_fun$) (?v1 T_N_sum$) (?v2 N_T_N_sum_set_prod$) (?v3 N_T_N_sum_set_prod_set$)) (=> (and (= (fun_app$e ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$a ?v1 (vimage$e ?v0 ?v3)))) :named a19))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_N_T_N_sum_set_prod_fun$) (?v1 N_T_N_sum_set_prod$) (?v2 N_T_N_sum_set_prod$) (?v3 N_T_N_sum_set_prod_set$)) (=> (and (= (fun_app$h ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$b ?v1 (vimage$h ?v0 ?v3)))) :named a20))
(assert (! (forall ((?v0 N_T_N_sum_fun$) (?v1 N$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= (fun_app$ ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$ ?v1 (vimage$ ?v0 ?v3)))) :named a21))
(assert (! (forall ((?v0 N$) (?v1 N$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a22))
(assert (! (forall ((?v0 N$) (?v1 N$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a23))
(assert (! (= (root$ tr$) n$) :named a24))
(assert (! (forall ((?v0 Dtree$)) (! (= (hsubst_r$ ?v0) (root$ ?v0)) :pattern ((hsubst_r$ ?v0)))) :named a25))
(assert (! (=> (forall ((?v0 N_dtree_fun$)) (=> (forall ((?v1 N$)) (=> (member$a (inr$ ?v1) tns$) (and (= (k$ ?v1) (fr$ (minus$ ns$ (insert$ n$ bot$)) (fun_app$i ?v0 ?v1))) (and (wf$ (fun_app$i ?v0 ?v1)) (= (root$ (fun_app$i ?v0 ?v1)) ?v1))))) false)) false) :named a26))
(assert (! (forall ((?v0 N$)) (=> (member$a (inr$ ?v0) tns$) (exists ((?v1 Dtree$)) (and (= (k$ ?v0) (fr$ (minus$ ns$ (insert$ n$ bot$)) ?v1)) (and (wf$ ?v1) (= (root$ ?v1) ?v0)))))) :named a27))
(assert (! (member$b (pair$ n$ tns$) p$) :named a28))
(assert (! (forall ((?v0 Dtree$)) (= (root$ (rcut$ ?v0)) (root$ ?v0))) :named a29))
(assert (! (forall ((?v0 T_N_sum_bool_fun$) (?v1 N_T_N_sum_set_prod_T_N_sum_fun$) (?v2 N_T_N_sum_set_prod_bool_fun$)) (=> (forall ((?v3 N_T_N_sum_set_prod$)) (= (fun_app$j ?v0 (fun_app$g ?v1 ?v3)) (fun_app$k ?v2 ?v3))) (= (vimage$g ?v1 (collect$ ?v0)) (collect$a ?v2)))) :named a30))
(assert (! (forall ((?v0 N_bool_fun$) (?v1 N_T_N_sum_set_prod_N_fun$) (?v2 N_T_N_sum_set_prod_bool_fun$)) (=> (forall ((?v3 N_T_N_sum_set_prod$)) (= (fun_app$l ?v0 (fun_app$f ?v1 ?v3)) (fun_app$k ?v2 ?v3))) (= (vimage$f ?v1 (collect$b ?v0)) (collect$a ?v2)))) :named a31))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_bool_fun$) (?v1 N_T_N_sum_set_prod_N_T_N_sum_set_prod_fun$) (?v2 N_T_N_sum_set_prod_bool_fun$)) (=> (forall ((?v3 N_T_N_sum_set_prod$)) (= (fun_app$k ?v0 (fun_app$h ?v1 ?v3)) (fun_app$k ?v2 ?v3))) (= (vimage$h ?v1 (collect$a ?v0)) (collect$a ?v2)))) :named a32))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_bool_fun$) (?v1 T_N_sum_N_T_N_sum_set_prod_fun$) (?v2 T_N_sum_bool_fun$)) (=> (forall ((?v3 T_N_sum$)) (= (fun_app$k ?v0 (fun_app$e ?v1 ?v3)) (fun_app$j ?v2 ?v3))) (= (vimage$e ?v1 (collect$a ?v0)) (collect$ ?v2)))) :named a33))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_bool_fun$) (?v1 N_N_T_N_sum_set_prod_fun$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (= (fun_app$k ?v0 (fun_app$b ?v1 ?v3)) (fun_app$l ?v2 ?v3))) (= (vimage$b ?v1 (collect$a ?v0)) (collect$b ?v2)))) :named a34))
(assert (! (forall ((?v0 T_N_sum_bool_fun$) (?v1 T_N_sum_T_N_sum_fun$) (?v2 T_N_sum_bool_fun$)) (=> (forall ((?v3 T_N_sum$)) (= (fun_app$j ?v0 (fun_app$d ?v1 ?v3)) (fun_app$j ?v2 ?v3))) (= (vimage$d ?v1 (collect$ ?v0)) (collect$ ?v2)))) :named a35))
(assert (! (forall ((?v0 N_bool_fun$) (?v1 T_N_sum_N_fun$) (?v2 T_N_sum_bool_fun$)) (=> (forall ((?v3 T_N_sum$)) (= (fun_app$l ?v0 (fun_app$c ?v1 ?v3)) (fun_app$j ?v2 ?v3))) (= (vimage$c ?v1 (collect$b ?v0)) (collect$ ?v2)))) :named a36))
(assert (! (forall ((?v0 N_bool_fun$) (?v1 N_N_fun$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (= (fun_app$l ?v0 (fun_app$a ?v1 ?v3)) (fun_app$l ?v2 ?v3))) (= (vimage$a ?v1 (collect$b ?v0)) (collect$b ?v2)))) :named a37))
(assert (! (forall ((?v0 T_N_sum_bool_fun$) (?v1 N_T_N_sum_fun$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (= (fun_app$j ?v0 (fun_app$ ?v1 ?v3)) (fun_app$l ?v2 ?v3))) (= (vimage$ ?v1 (collect$ ?v0)) (collect$b ?v2)))) :named a38))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (=> (and (member$ ?v0 (vimage$a ?v1 ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$a ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a39))
(assert (! (forall ((?v0 N$) (?v1 N_N_T_N_sum_set_prod_fun$) (?v2 N_T_N_sum_set_prod_set$)) (=> (and (member$ ?v0 (vimage$b ?v1 ?v2)) (forall ((?v3 N_T_N_sum_set_prod$)) (=> (and (= (fun_app$b ?v1 ?v0) ?v3) (member$b ?v3 ?v2)) false))) false)) :named a40))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_N_fun$) (?v2 N_set$)) (=> (and (member$a ?v0 (vimage$c ?v1 ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$c ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a41))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_T_N_sum_fun$) (?v2 T_N_sum_set$)) (=> (and (member$a ?v0 (vimage$d ?v1 ?v2)) (forall ((?v3 T_N_sum$)) (=> (and (= (fun_app$d ?v1 ?v0) ?v3) (member$a ?v3 ?v2)) false))) false)) :named a42))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_N_T_N_sum_set_prod_fun$) (?v2 N_T_N_sum_set_prod_set$)) (=> (and (member$a ?v0 (vimage$e ?v1 ?v2)) (forall ((?v3 N_T_N_sum_set_prod$)) (=> (and (= (fun_app$e ?v1 ?v0) ?v3) (member$b ?v3 ?v2)) false))) false)) :named a43))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$) (?v1 N_T_N_sum_set_prod_N_fun$) (?v2 N_set$)) (=> (and (member$b ?v0 (vimage$f ?v1 ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$f ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a44))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$) (?v1 N_T_N_sum_set_prod_T_N_sum_fun$) (?v2 T_N_sum_set$)) (=> (and (member$b ?v0 (vimage$g ?v1 ?v2)) (forall ((?v3 T_N_sum$)) (=> (and (= (fun_app$g ?v1 ?v0) ?v3) (member$a ?v3 ?v2)) false))) false)) :named a45))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$) (?v1 N_T_N_sum_set_prod_N_T_N_sum_set_prod_fun$) (?v2 N_T_N_sum_set_prod_set$)) (=> (and (member$b ?v0 (vimage$h ?v1 ?v2)) (forall ((?v3 N_T_N_sum_set_prod$)) (=> (and (= (fun_app$h ?v1 ?v0) ?v3) (member$b ?v3 ?v2)) false))) false)) :named a46))
(assert (! (forall ((?v0 N$) (?v1 N_T_N_sum_fun$) (?v2 T_N_sum_set$)) (=> (and (member$ ?v0 (vimage$ ?v1 ?v2)) (forall ((?v3 T_N_sum$)) (=> (and (= (fun_app$ ?v1 ?v0) ?v3) (member$a ?v3 ?v2)) false))) false)) :named a47))
(assert (! (member$ n$ ns$) :named a48))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_bool_fun$)) (= (= (collect$a ?v0) bot$a) (forall ((?v1 N_T_N_sum_set_prod$)) (not (fun_app$k ?v0 ?v1))))) :named a49))
(assert (! (forall ((?v0 T_N_sum_bool_fun$)) (= (= (collect$ ?v0) bot$b) (forall ((?v1 T_N_sum$)) (not (fun_app$j ?v0 ?v1))))) :named a50))
(assert (! (forall ((?v0 N_bool_fun$)) (= (= (collect$b ?v0) bot$) (forall ((?v1 N$)) (not (fun_app$l ?v0 ?v1))))) :named a51))
(assert (! (forall ((?v0 T_N_sum_set$)) (= (forall ((?v1 T_N_sum$)) (not (member$a ?v1 ?v0))) (= ?v0 bot$b))) :named a52))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$)) (= (forall ((?v1 N_T_N_sum_set_prod$)) (not (member$b ?v1 ?v0))) (= ?v0 bot$a))) :named a53))
(assert (! (forall ((?v0 N_set$)) (= (forall ((?v1 N$)) (not (member$ ?v1 ?v0))) (= ?v0 bot$))) :named a54))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_bool_fun$)) (= (= bot$a (collect$a ?v0)) (forall ((?v1 N_T_N_sum_set_prod$)) (not (fun_app$k ?v0 ?v1))))) :named a55))
(assert (! (forall ((?v0 T_N_sum_bool_fun$)) (= (= bot$b (collect$ ?v0)) (forall ((?v1 T_N_sum$)) (not (fun_app$j ?v0 ?v1))))) :named a56))
(assert (! (forall ((?v0 N_bool_fun$)) (= (= bot$ (collect$b ?v0)) (forall ((?v1 N$)) (not (fun_app$l ?v0 ?v1))))) :named a57))
(check-sat)
;(get-unsat-core)
