; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 182
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort N_list_bool_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-datatypes () ((N_list$ (nil$) (cons$ (hd$ N$) (tl$ N_list$)))
  (T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun f$ () N_dtree_fun$)
(declare-fun n$ () N$)
(declare-fun n1$ () N$)
(declare-fun nl$ () N_list$)
(declare-fun nl1$ () N_list$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun path$ (N_dtree_fun$) N_list_bool_fun$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun fun_app$ (N_list_bool_fun$ N_list$) Bool)
(declare-fun fun_app$a (N_dtree_fun$ N$) Dtree$)
(assert (! (not (fun_app$ (path$ f$) (cons$ n1$ nl1$))) :named a0))
(assert (! (not (= nl$ nil$)) :named a1))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (= (fun_app$ (path$ ?v0) ?v1) (or (exists ((?v2 N$)) (= ?v1 (cons$ ?v2 nil$))) (exists ((?v2 N$) (?v3 N_list$) (?v4 N$)) (and (= ?v1 (cons$ ?v4 (cons$ ?v2 ?v3))) (and (fun_app$ (path$ ?v0) (cons$ ?v2 ?v3)) (member$ (inr$ (fun_app$a ?v0 ?v2)) (cont$ (fun_app$a ?v0 ?v4))))))))) :named a2))
(assert (! (= nl$ (cons$ n1$ nl1$)) :named a3))
(assert (! (fun_app$ (path$ f$) (cons$ n$ nl$)) :named a4))
(assert (! (=> (forall ((?v0 N$) (?v1 N_list$)) (=> (= nl$ (cons$ ?v0 ?v1)) false)) false) :named a5))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N$)) (fun_app$ (path$ ?v0) (cons$ ?v1 nil$))) :named a6))
(assert (! (forall ((?v0 N$) (?v1 N_list$) (?v2 N$) (?v3 N_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a7))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (=> (fun_app$ (path$ ?v0) ?v1) (not (= ?v1 nil$)))) :named a8))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N$) (?v2 N_list$) (?v3 N$)) (=> (and (fun_app$ (path$ ?v0) (cons$ ?v1 ?v2)) (member$ (inr$ (fun_app$a ?v0 ?v1)) (cont$ (fun_app$a ?v0 ?v3)))) (fun_app$ (path$ ?v0) (cons$ ?v3 (cons$ ?v1 ?v2))))) :named a9))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (=> (and (fun_app$ (path$ ?v0) ?v1) (and (forall ((?v2 N$)) (=> (= ?v1 (cons$ ?v2 nil$)) false)) (forall ((?v2 N$) (?v3 N_list$) (?v4 N$)) (=> (and (= ?v1 (cons$ ?v4 (cons$ ?v2 ?v3))) (and (fun_app$ (path$ ?v0) (cons$ ?v2 ?v3)) (member$ (inr$ (fun_app$a ?v0 ?v2)) (cont$ (fun_app$a ?v0 ?v4))))) false)))) false)) :named a10))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (not (= (cons$ ?v0 ?v1) ?v1))) :named a11))
(assert (! (forall ((?v0 N_list$)) (= (not (= ?v0 nil$)) (exists ((?v1 N$) (?v2 N_list$)) (= ?v0 (cons$ ?v1 ?v2))))) :named a12))
(assert (! (forall ((?v0 N_list$)) (=> (and (=> (= ?v0 nil$) false) (and (forall ((?v1 N$)) (=> (= ?v0 (cons$ ?v1 nil$)) false)) (forall ((?v1 N$) (?v2 N$) (?v3 N_list$)) (=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3))) false)))) false)) :named a13))
(assert (! (forall ((?v0 N_list$)) (=> (and (=> (= ?v0 nil$) false) (forall ((?v1 N$) (?v2 N_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) false))) false)) :named a14))
(assert (! (forall ((?v0 N_list$) (?v1 N$) (?v2 N_list$)) (=> (= ?v0 (cons$ ?v1 ?v2)) (not (= ?v0 nil$)))) :named a15))
(assert (! (forall ((?v0 N_list$) (?v1 N_list_bool_fun$)) (=> (and (not (= ?v0 nil$)) (and (forall ((?v2 N$)) (fun_app$ ?v1 (cons$ ?v2 nil$))) (forall ((?v2 N$) (?v3 N_list$)) (=> (and (not (= ?v3 nil$)) (fun_app$ ?v1 ?v3)) (fun_app$ ?v1 (cons$ ?v2 ?v3)))))) (fun_app$ ?v1 ?v0))) :named a16))
(check-sat)
;(get-unsat-core)
