; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 293
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort Dtree$ 0)
(declare-sort T_N_sum_set$ 0)
(declare-sort N_T_N_sum_set_prod_set$ 0)
(declare-datatypes () ((N_T_N_sum_set_prod$ (pair$ (fst$ N$) (snd$ T_N_sum_set$)))))
(declare-fun p$ () N_T_N_sum_set_prod_set$)
(declare-fun s$ (N$) T_N_sum_set$)
(declare-fun na$ () N$)
(declare-fun tr$ () Dtree$)
(declare-fun deftr$ (N$) Dtree$)
(declare-fun member$ (N_T_N_sum_set_prod$ N_T_N_sum_set_prod_set$) Bool)
(assert (! (not (member$ (pair$ na$ (s$ na$)) p$)) :named a0))
(assert (! (exists ((?v0 N$)) (= tr$ (deftr$ ?v0))) :named a1))
(assert (! (forall ((?v0 N$)) (member$ (pair$ ?v0 (s$ ?v0)) p$)) :named a2))
(assert (! (forall ((?v0 N$)) (exists ((?v1 T_N_sum_set$)) (member$ (pair$ ?v0 ?v1) p$))) :named a3))
(assert (! (forall ((?v0 N$) (?v1 T_N_sum_set$) (?v2 N$) (?v3 T_N_sum_set$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a4))
(assert (! (forall ((?v0 N$) (?v1 T_N_sum_set$) (?v2 N$) (?v3 T_N_sum_set$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a5))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$)) (=> (forall ((?v1 N$) (?v2 T_N_sum_set$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a6))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$)) (exists ((?v1 N$) (?v2 T_N_sum_set$)) (= ?v0 (pair$ ?v1 ?v2)))) :named a7))
(assert (! (forall ((?v0 N$) (?v1 T_N_sum_set$) (?v2 N$) (?v3 T_N_sum_set$)) (=> (and (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a8))
(check-sat)
;(get-unsat-core)
