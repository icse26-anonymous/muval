; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 139
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort Dtree_bool_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort Dtree_dtree_bool_fun_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun h$ (Dtree$ N$) Dtree$)
(declare-fun n$ () N$)
(declare-fun tr$ () Dtree$)
(declare-fun top$ () N_set$)
(declare-fun tr0$ () Dtree$)
(declare-fun tr1$ () Dtree$)
(declare-fun tr2$ () Dtree$)
(declare-fun tra$ () Dtree$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun pick$ (Dtree$ N$) Dtree$)
(declare-fun root$ (Dtree$) N$)
(declare-fun top$a () T_dtree_sum_set$)
(declare-fun tr1a$ () Dtree$)
(declare-fun inItr$ (N_set$ Dtree$ N$) Bool)
(declare-fun subtr$ (N_set$ Dtree$) Dtree_bool_fun$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun thesis$ () Bool)
(declare-fun fun_app$ (Dtree_bool_fun$ Dtree$) Bool)
(declare-fun member$a (N$ N_set$) Bool)
(declare-fun fun_app$a (Dtree_dtree_bool_fun_fun$ Dtree$) Dtree_bool_fun$)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 N$)) (=> (and (member$ (inr$ tr2$) (cont$ tr1a$)) (and (fun_app$ (subtr$ top$ tr1a$) tra$) (and (inItr$ top$ tr0$ ?v0) (= tr1a$ (h$ tr0$ ?v0))))) thesis$)) :named a1))
(assert (! (= tra$ (h$ tr0$ n$)) :named a2))
(assert (! (inItr$ top$ tr0$ n$) :named a3))
(assert (! (fun_app$ (subtr$ top$ tr1a$) tra$) :named a4))
(assert (! (fun_app$ (subtr$ top$ tr1$) tr$) :named a5))
(assert (! (member$ (inr$ tr2$) (cont$ tr1a$)) :named a6))
(assert (! (=> (= tra$ (h$ tr0$ n$)) (exists ((?v0 N$)) (and (inItr$ top$ tr0$ ?v0) (= tr1a$ (h$ tr0$ ?v0))))) :named a7))
(assert (! (fun_app$ (subtr$ top$ tr1$) (h$ tr0$ n$)) :named a8))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$) (?v3 Dtree$)) (=> (and (inItr$ ?v0 ?v1 ?v2) (fun_app$ (subtr$ ?v0 ?v1) ?v3)) (inItr$ ?v0 ?v3 ?v2))) :named a9))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (fun_app$ (subtr$ ?v0 ?v1) ?v2) (fun_app$ (subtr$ ?v0 ?v2) ?v3)) (fun_app$ (subtr$ ?v0 ?v1) ?v3))) :named a10))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree_dtree_bool_fun_fun$)) (=> (and (fun_app$ (subtr$ top$ ?v0) ?v1) (and (forall ((?v3 Dtree$)) (fun_app$ (fun_app$a ?v2 ?v3) ?v3)) (forall ((?v3 Dtree$) (?v4 Dtree$) (?v5 Dtree$)) (=> (and (member$ (inr$ ?v3) (cont$ ?v4)) (and (fun_app$ (subtr$ top$ ?v4) ?v5) (fun_app$ (fun_app$a ?v2 ?v4) ?v5))) (fun_app$ (fun_app$a ?v2 ?v3) ?v5))))) (fun_app$ (fun_app$a ?v2 ?v0) ?v1))) :named a11))
(assert (! (forall ((?v0 N$)) (=> (inItr$ top$ tr0$ ?v0) (fun_app$ (subtr$ top$ (pick$ tr0$ ?v0)) tr0$))) :named a12))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 T_dtree_sum$)) (= (member$ ?v0 top$a) true)) :named a15))
(assert (! (forall ((?v0 N$)) (= (member$a ?v0 top$) true)) :named a16))
(assert (! (forall ((?v0 T_dtree_sum$)) (member$ ?v0 top$a)) :named a17))
(assert (! (forall ((?v0 N$)) (member$a ?v0 top$)) :named a18))
(assert (! (forall ((?v0 N$)) (=> (inItr$ top$ tr0$ ?v0) (= (root$ (h$ tr0$ ?v0)) ?v0))) :named a19))
(check-sat)
;(get-unsat-core)
