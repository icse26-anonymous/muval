; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 565
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort N_set_set$ 0)
(declare-sort T_set_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort N_T_set_fun$ 0)
(declare-sort T_N_sum_set$ 0)
(declare-sort N_set_set_set$ 0)
(declare-sort T_T_N_sum_fun$ 0)
(declare-sort T_set_set_set$ 0)
(declare-sort N_set_bool_fun$ 0)
(declare-sort T_set_bool_fun$ 0)
(declare-sort T_N_sum_set_set$ 0)
(declare-sort T_N_sum_bool_fun$ 0)
(declare-sort N_set_set_set_set$ 0)
(declare-sort T_set_set_set_set$ 0)
(declare-sort N_set_set_bool_fun$ 0)
(declare-sort T_set_set_bool_fun$ 0)
(declare-sort T_N_sum_set_set_set$ 0)
(declare-sort T_N_sum_set_bool_fun$ 0)
(declare-sort N_T_N_sum_set_prod_set$ 0)
(declare-sort N_set_T_set_bool_fun_fun$ 0)
(declare-sort N_T_N_sum_set_prod_set_set$ 0)
(declare-sort N_T_N_sum_set_prod_bool_fun$ 0)
(declare-sort N_T_N_sum_set_prod_set_set_set$ 0)
(declare-sort N_T_set_fun_T_set_bool_fun_fun$ 0)
(declare-sort N_T_N_sum_set_prod_set_bool_fun$ 0)
(declare-datatypes () ((T_N_sum$ (inl$ (projl$ T$)) (inr$ (projr$ N$)))
  (N_T_N_sum_set_prod$ (pair$ (fst$ N$) (snd$ T_N_sum_set$)))))
(declare-fun l$ (N_set$ N$) T_set_set$)
(declare-fun n$ () N$)
(declare-fun p$ () N_T_N_sum_set_prod_set$)
(declare-fun lr$ (N_set$ N$) T_set_set$)
(declare-fun ns$ () N_set$)
(declare-fun uu$ () T_T_N_sum_fun$)
(declare-fun bot$ () N_set$)
(declare-fun sup$ (T_set$ T_set$) T_set$)
(declare-fun uua$ (T_N_sum_set$) N_T_set_fun_T_set_bool_fun_fun$)
(declare-fun uub$ () T_set_bool_fun$)
(declare-fun uuc$ (N$) N_set_T_set_bool_fun_fun$)
(declare-fun uud$ (T_N_sum_set$) T_N_sum_set_bool_fun$)
(declare-fun uue$ (N_T_N_sum_set_prod_set$) N_T_N_sum_set_prod_set_bool_fun$)
(declare-fun uuf$ (N_set_set$) N_set_set_bool_fun$)
(declare-fun uug$ (T_set_set$) T_set_set_bool_fun$)
(declare-fun uuh$ (T$) T_bool_fun$)
(declare-fun uui$ (N_set$) N_set_bool_fun$)
(declare-fun uuj$ (N_T_N_sum_set_prod$) N_T_N_sum_set_prod_bool_fun$)
(declare-fun uuk$ (T_N_sum$) T_N_sum_bool_fun$)
(declare-fun uul$ (T_set$) T_set_bool_fun$)
(declare-fun uum$ (N$) N_bool_fun$)
(declare-fun uun$ (T_N_sum_set$) T_N_sum_set_bool_fun$)
(declare-fun uuo$ (N_T_N_sum_set_prod_set$) N_T_N_sum_set_prod_set_bool_fun$)
(declare-fun uup$ (N_set_set$) N_set_set_bool_fun$)
(declare-fun uuq$ (T_set_set$) T_set_set_bool_fun$)
(declare-fun uur$ (T$) T_bool_fun$)
(declare-fun uus$ (N_set$) N_set_bool_fun$)
(declare-fun uut$ (N_T_N_sum_set_prod$) N_T_N_sum_set_prod_bool_fun$)
(declare-fun uuu$ (T_N_sum$) T_N_sum_bool_fun$)
(declare-fun uuv$ (T_set$) T_set_bool_fun$)
(declare-fun uuw$ (N$) N_bool_fun$)
(declare-fun bot$a () T_N_sum_set_set$)
(declare-fun bot$b () N_T_N_sum_set_prod_set_set$)
(declare-fun bot$c () N_set_set_set$)
(declare-fun bot$d () T_set_set_set$)
(declare-fun bot$e () N_set_set$)
(declare-fun bot$f () T_set_set$)
(declare-fun bot$g () T_set$)
(declare-fun bot$h () N_T_N_sum_set_prod_set$)
(declare-fun bot$i () T_N_sum_set$)
(declare-fun bot$j () T_N_sum_set_set_set$)
(declare-fun bot$k () N_T_N_sum_set_prod_set_set_set$)
(declare-fun bot$l () N_set_set_set_set$)
(declare-fun bot$m () T_set_set_set_set$)
(declare-fun sup$a (T_set_set$) T_set$)
(declare-fun sup$b (T_N_sum_set_set$) T_N_sum_set$)
(declare-fun sup$c (T_N_sum_set$ T_N_sum_set$) T_N_sum_set$)
(declare-fun sup$d (N_T_N_sum_set_prod_set_set$) N_T_N_sum_set_prod_set$)
(declare-fun sup$e (N_T_N_sum_set_prod_set$ N_T_N_sum_set_prod_set$) N_T_N_sum_set_prod_set$)
(declare-fun sup$f (N_set_set_set$) N_set_set$)
(declare-fun sup$g (N_set_set$ N_set_set$) N_set_set$)
(declare-fun sup$h (T_set_set_set$) T_set_set$)
(declare-fun sup$i (T_set_set$ T_set_set$) T_set_set$)
(declare-fun sup$j (N_set_set$) N_set$)
(declare-fun sup$k (N_set$ N_set$) N_set$)
(declare-fun sup$l (T_N_sum_set_set_set$) T_N_sum_set_set$)
(declare-fun sup$m (N_T_N_sum_set_prod_set_set_set$) N_T_N_sum_set_prod_set_set$)
(declare-fun sup$n (N_set_set_set_set$) N_set_set_set$)
(declare-fun sup$o (T_set_set_set_set$) T_set_set_set$)
(declare-fun minus$ (N_set$ N_set$) N_set$)
(declare-fun insert$ (N$ N_set$) N_set$)
(declare-fun member$ (N_T_N_sum_set_prod$) N_T_N_sum_set_prod_set_bool_fun$)
(declare-fun minus$a (T_N_sum_set_set$ T_N_sum_set_set$) T_N_sum_set_set$)
(declare-fun minus$b (N_T_N_sum_set_prod_set_set$ N_T_N_sum_set_prod_set_set$) N_T_N_sum_set_prod_set_set$)
(declare-fun minus$c (N_set_set_set$ N_set_set_set$) N_set_set_set$)
(declare-fun minus$d (T_set_set_set$ T_set_set_set$) T_set_set_set$)
(declare-fun minus$e (T_set$ T_set$) T_set$)
(declare-fun minus$f (N_set_set$ N_set_set$) N_set_set$)
(declare-fun minus$g (N_T_N_sum_set_prod_set$ N_T_N_sum_set_prod_set$) N_T_N_sum_set_prod_set$)
(declare-fun minus$h (T_N_sum_set$ T_N_sum_set$) T_N_sum_set$)
(declare-fun minus$i (T_set_set$ T_set_set$) T_set_set$)
(declare-fun vimage$ (T_T_N_sum_fun$ T_N_sum_set$) T_set$)
(declare-fun collect$ (T_set_bool_fun$) T_set_set$)
(declare-fun fun_app$ (T_set_bool_fun$ T_set$) Bool)
(declare-fun insert$a (T_N_sum_set$ T_N_sum_set_set$) T_N_sum_set_set$)
(declare-fun insert$b (N_T_N_sum_set_prod_set$ N_T_N_sum_set_prod_set_set$) N_T_N_sum_set_prod_set_set$)
(declare-fun insert$c (N_set_set$ N_set_set_set$) N_set_set_set$)
(declare-fun insert$d (T_set_set$ T_set_set_set$) T_set_set_set$)
(declare-fun insert$e (N_set$ N_set_set$) N_set_set$)
(declare-fun insert$f (T_set$ T_set_set$) T_set_set$)
(declare-fun insert$g (T$ T_set$) T_set$)
(declare-fun insert$h (N_T_N_sum_set_prod$ N_T_N_sum_set_prod_set$) N_T_N_sum_set_prod_set$)
(declare-fun insert$i (T_N_sum$ T_N_sum_set$) T_N_sum_set$)
(declare-fun less_eq$ (T_set_set$) T_set_set_bool_fun$)
(declare-fun member$a (T_N_sum$) T_N_sum_set_bool_fun$)
(declare-fun member$b (T_set$) T_set_set_bool_fun$)
(declare-fun member$c (N$) N_set_bool_fun$)
(declare-fun member$d (T_N_sum_set$ T_N_sum_set_set$) Bool)
(declare-fun member$e (N_T_N_sum_set_prod_set$ N_T_N_sum_set_prod_set_set$) Bool)
(declare-fun member$f (N_set_set$ N_set_set_set$) Bool)
(declare-fun member$g (T_set_set$ T_set_set_set$) Bool)
(declare-fun member$h (T$) T_set_bool_fun$)
(declare-fun member$i (N_set$) N_set_set_bool_fun$)
(declare-fun collect$a (T_N_sum_set_bool_fun$) T_N_sum_set_set$)
(declare-fun collect$b (N_T_N_sum_set_prod_set_bool_fun$) N_T_N_sum_set_prod_set_set$)
(declare-fun collect$c (N_set_set_bool_fun$) N_set_set_set$)
(declare-fun collect$d (T_set_set_bool_fun$) T_set_set_set$)
(declare-fun collect$e (T_bool_fun$) T_set$)
(declare-fun collect$f (N_set_bool_fun$) N_set_set$)
(declare-fun collect$g (N_T_N_sum_set_prod_bool_fun$) N_T_N_sum_set_prod_set$)
(declare-fun collect$h (T_N_sum_bool_fun$) T_N_sum_set$)
(declare-fun collect$i (N_bool_fun$) N_set$)
(declare-fun fun_app$a (N_T_set_fun_T_set_bool_fun_fun$ N_T_set_fun$) T_set_bool_fun$)
(declare-fun fun_app$b (N_T_N_sum_set_prod_set_bool_fun$ N_T_N_sum_set_prod_set$) Bool)
(declare-fun fun_app$c (T_N_sum_set_bool_fun$ T_N_sum_set$) Bool)
(declare-fun fun_app$d (T_set_set_bool_fun$ T_set_set$) Bool)
(declare-fun fun_app$e (N_T_set_fun$ N$) T_set$)
(declare-fun fun_app$f (T_T_N_sum_fun$ T$) T_N_sum$)
(declare-fun fun_app$g (N_T_N_sum_set_prod_bool_fun$ N_T_N_sum_set_prod$) Bool)
(declare-fun fun_app$h (T_N_sum_bool_fun$ T_N_sum$) Bool)
(declare-fun fun_app$i (N_set_set_bool_fun$ N_set_set$) Bool)
(declare-fun fun_app$j (N_set_bool_fun$ N_set$) Bool)
(declare-fun fun_app$k (T_bool_fun$ T$) Bool)
(declare-fun fun_app$l (N_bool_fun$ N$) Bool)
(declare-fun fun_app$m (N_set_T_set_bool_fun_fun$ N_set$) T_set_bool_fun$)
(declare-fun less_eq$a (T_N_sum_set_set$ T_N_sum_set_set$) Bool)
(declare-fun less_eq$b (N_T_N_sum_set_prod_set_set$ N_T_N_sum_set_prod_set_set$) Bool)
(declare-fun less_eq$c (N_set_set_set$ N_set_set_set$) Bool)
(declare-fun less_eq$d (T_set_set_set$ T_set_set_set$) Bool)
(declare-fun less_eq$e (T_set$) T_set_bool_fun$)
(declare-fun less_eq$f (N_set_set$) N_set_set_bool_fun$)
(declare-fun less_eq$g (N_T_N_sum_set_prod_set$) N_T_N_sum_set_prod_set_bool_fun$)
(declare-fun less_eq$h (T_N_sum_set$) T_N_sum_set_bool_fun$)
(declare-fun less_eq$i (N_set$) N_set_bool_fun$)
(assert (! (forall ((?v0 T_set$)) (! (= (fun_app$ uub$ ?v0) (exists ((?v1 T_N_sum_set$) (?v2 N_T_set_fun$)) (and (= ?v0 (sup$ (vimage$ uu$ ?v1) (sup$a (collect$ (fun_app$a (uua$ ?v1) ?v2))))) (and (fun_app$b (member$ (pair$ n$ ?v1)) p$) (forall ((?v3 N$)) (=> (fun_app$c (member$a (inr$ ?v3)) ?v1) (fun_app$d (member$b (fun_app$e ?v2 ?v3)) (l$ (minus$ ns$ (insert$ n$ bot$)) ?v3)))))))) :pattern ((fun_app$ uub$ ?v0)))) :named a0))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$f uu$ ?v0) (inl$ ?v0)) :pattern ((fun_app$f uu$ ?v0)))) :named a1))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$) (?v1 N_T_N_sum_set_prod$)) (! (= (fun_app$g (uuj$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$g (uuj$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum$)) (! (= (fun_app$h (uuk$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$h (uuk$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$) (?v1 N_T_N_sum_set_prod_set$)) (! (= (fun_app$b (uue$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (uue$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set$)) (! (= (fun_app$c (uud$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$c (uud$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set$)) (! (= (fun_app$d (uug$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (uug$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set$)) (! (= (fun_app$i (uuf$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$i (uuf$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (! (= (fun_app$ (uul$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (uul$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (! (= (fun_app$j (uui$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$j (uui$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 T$) (?v1 T$)) (! (= (fun_app$k (uuh$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$k (uuh$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 N$) (?v1 N$)) (! (= (fun_app$l (uum$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$l (uum$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$) (?v1 N_T_N_sum_set_prod$)) (! (= (fun_app$g (uut$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$g (uut$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum$)) (! (= (fun_app$h (uuu$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$h (uuu$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$) (?v1 N_T_N_sum_set_prod_set$)) (! (= (fun_app$b (uuo$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$b (uuo$ ?v0) ?v1)))) :named a14))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set$)) (! (= (fun_app$c (uun$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$c (uun$ ?v0) ?v1)))) :named a15))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set$)) (! (= (fun_app$d (uuq$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$d (uuq$ ?v0) ?v1)))) :named a16))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set$)) (! (= (fun_app$i (uup$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$i (uup$ ?v0) ?v1)))) :named a17))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (! (= (fun_app$ (uuv$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$ (uuv$ ?v0) ?v1)))) :named a18))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (! (= (fun_app$j (uus$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$j (uus$ ?v0) ?v1)))) :named a19))
(assert (! (forall ((?v0 T$) (?v1 T$)) (! (= (fun_app$k (uur$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$k (uur$ ?v0) ?v1)))) :named a20))
(assert (! (forall ((?v0 N$) (?v1 N$)) (! (= (fun_app$l (uuw$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$l (uuw$ ?v0) ?v1)))) :named a21))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 N_T_set_fun$) (?v2 T_set$)) (! (= (fun_app$ (fun_app$a (uua$ ?v0) ?v1) ?v2) (exists ((?v3 N$)) (and (= ?v2 (fun_app$e ?v1 ?v3)) (fun_app$c (member$a (inr$ ?v3)) ?v0)))) :pattern ((fun_app$ (fun_app$a (uua$ ?v0) ?v1) ?v2)))) :named a22))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 T_set$)) (! (= (fun_app$ (fun_app$m (uuc$ ?v0) ?v1) ?v2) (exists ((?v3 T_N_sum_set$) (?v4 N_T_set_fun$)) (and (= ?v2 (sup$ (vimage$ uu$ ?v3) (sup$a (collect$ (fun_app$a (uua$ ?v3) ?v4))))) (and (fun_app$b (member$ (pair$ ?v0 ?v3)) p$) (forall ((?v5 N$)) (=> (fun_app$c (member$a (inr$ ?v5)) ?v3) (fun_app$d (member$b (fun_app$e ?v4 ?v5)) (lr$ (minus$ ?v1 (insert$ ?v0 bot$)) ?v5)))))))) :pattern ((fun_app$ (fun_app$m (uuc$ ?v0) ?v1) ?v2)))) :named a23))
(assert (! (not (fun_app$d (less_eq$ (collect$ uub$)) (l$ ns$ n$))) :named a24))
(assert (! (fun_app$j (member$c n$) ns$) :named a25))
(assert (! (forall ((?v0 N$)) (exists ((?v1 T_N_sum_set$)) (fun_app$b (member$ (pair$ ?v0 ?v1)) p$))) :named a26))
(assert (! (forall ((?v0 N$) (?v1 N_set$)) (=> (fun_app$j (member$c ?v0) ?v1) (fun_app$d (less_eq$ (lr$ ?v1 ?v0)) (collect$ (fun_app$m (uuc$ ?v0) ?v1))))) :named a27))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set_set$)) (= (sup$b (insert$a ?v0 ?v1)) (sup$c ?v0 (sup$b ?v1)))) :named a28))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$) (?v1 N_T_N_sum_set_prod_set_set$)) (= (sup$d (insert$b ?v0 ?v1)) (sup$e ?v0 (sup$d ?v1)))) :named a29))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set_set$)) (= (sup$f (insert$c ?v0 ?v1)) (sup$g ?v0 (sup$f ?v1)))) :named a30))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set_set$)) (= (sup$h (insert$d ?v0 ?v1)) (sup$i ?v0 (sup$h ?v1)))) :named a31))
(assert (! (forall ((?v0 N_set$) (?v1 N_set_set$)) (= (sup$j (insert$e ?v0 ?v1)) (sup$k ?v0 (sup$j ?v1)))) :named a32))
(assert (! (forall ((?v0 T_set$) (?v1 T_set_set$)) (= (sup$a (insert$f ?v0 ?v1)) (sup$ ?v0 (sup$a ?v1)))) :named a33))
(assert (! (forall ((?v0 T_N_sum_set$)) (= (sup$b (insert$a ?v0 bot$a)) ?v0)) :named a34))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$)) (= (sup$d (insert$b ?v0 bot$b)) ?v0)) :named a35))
(assert (! (forall ((?v0 N_set_set$)) (= (sup$f (insert$c ?v0 bot$c)) ?v0)) :named a36))
(assert (! (forall ((?v0 T_set_set$)) (= (sup$h (insert$d ?v0 bot$d)) ?v0)) :named a37))
(assert (! (forall ((?v0 N_set$)) (= (sup$j (insert$e ?v0 bot$e)) ?v0)) :named a38))
(assert (! (forall ((?v0 T_set$)) (= (sup$a (insert$f ?v0 bot$f)) ?v0)) :named a39))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set_set$)) (= (insert$a ?v0 (minus$a ?v1 (insert$a ?v0 bot$a))) (insert$a ?v0 ?v1))) :named a40))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$) (?v1 N_T_N_sum_set_prod_set_set$)) (= (insert$b ?v0 (minus$b ?v1 (insert$b ?v0 bot$b))) (insert$b ?v0 ?v1))) :named a41))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set_set$)) (= (insert$c ?v0 (minus$c ?v1 (insert$c ?v0 bot$c))) (insert$c ?v0 ?v1))) :named a42))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set_set$)) (= (insert$d ?v0 (minus$d ?v1 (insert$d ?v0 bot$d))) (insert$d ?v0 ?v1))) :named a43))
(assert (! (forall ((?v0 T$) (?v1 T_set$)) (= (insert$g ?v0 (minus$e ?v1 (insert$g ?v0 bot$g))) (insert$g ?v0 ?v1))) :named a44))
(assert (! (forall ((?v0 N_set$) (?v1 N_set_set$)) (= (insert$e ?v0 (minus$f ?v1 (insert$e ?v0 bot$e))) (insert$e ?v0 ?v1))) :named a45))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$) (?v1 N_T_N_sum_set_prod_set$)) (= (insert$h ?v0 (minus$g ?v1 (insert$h ?v0 bot$h))) (insert$h ?v0 ?v1))) :named a46))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$)) (= (insert$i ?v0 (minus$h ?v1 (insert$i ?v0 bot$i))) (insert$i ?v0 ?v1))) :named a47))
(assert (! (forall ((?v0 T_set$) (?v1 T_set_set$)) (= (insert$f ?v0 (minus$i ?v1 (insert$f ?v0 bot$f))) (insert$f ?v0 ?v1))) :named a48))
(assert (! (forall ((?v0 N$) (?v1 N_set$)) (= (insert$ ?v0 (minus$ ?v1 (insert$ ?v0 bot$))) (insert$ ?v0 ?v1))) :named a49))
(assert (! (forall ((?v0 T_N_sum_set_set$) (?v1 T_N_sum_set_set$)) (= (= (minus$a ?v0 ?v1) bot$a) (less_eq$a ?v0 ?v1))) :named a50))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set_set$) (?v1 N_T_N_sum_set_prod_set_set$)) (= (= (minus$b ?v0 ?v1) bot$b) (less_eq$b ?v0 ?v1))) :named a51))
(assert (! (forall ((?v0 N_set_set_set$) (?v1 N_set_set_set$)) (= (= (minus$c ?v0 ?v1) bot$c) (less_eq$c ?v0 ?v1))) :named a52))
(assert (! (forall ((?v0 T_set_set_set$) (?v1 T_set_set_set$)) (= (= (minus$d ?v0 ?v1) bot$d) (less_eq$d ?v0 ?v1))) :named a53))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (= (= (minus$e ?v0 ?v1) bot$g) (fun_app$ (less_eq$e ?v0) ?v1))) :named a54))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set$)) (= (= (minus$f ?v0 ?v1) bot$e) (fun_app$i (less_eq$f ?v0) ?v1))) :named a55))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$) (?v1 N_T_N_sum_set_prod_set$)) (= (= (minus$g ?v0 ?v1) bot$h) (fun_app$b (less_eq$g ?v0) ?v1))) :named a56))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set$)) (= (= (minus$h ?v0 ?v1) bot$i) (fun_app$c (less_eq$h ?v0) ?v1))) :named a57))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (= (= (minus$ ?v0 ?v1) bot$) (fun_app$j (less_eq$i ?v0) ?v1))) :named a58))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set$)) (= (= (minus$i ?v0 ?v1) bot$f) (fun_app$d (less_eq$ ?v0) ?v1))) :named a59))
(assert (! (= (sup$l bot$j) bot$a) :named a60))
(assert (! (= (sup$m bot$k) bot$b) :named a61))
(assert (! (= (sup$n bot$l) bot$c) :named a62))
(assert (! (= (sup$o bot$m) bot$d) :named a63))
(assert (! (= (sup$h bot$d) bot$f) :named a64))
(assert (! (= (sup$f bot$c) bot$e) :named a65))
(assert (! (= (sup$d bot$b) bot$h) :named a66))
(assert (! (= (sup$b bot$a) bot$i) :named a67))
(assert (! (= (sup$j bot$e) bot$) :named a68))
(assert (! (= (sup$a bot$f) bot$g) :named a69))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set_set$) (?v2 T_N_sum_set$)) (= (= (insert$a ?v0 ?v1) (insert$a ?v2 bot$a)) (and (= ?v0 ?v2) (less_eq$a ?v1 (insert$a ?v2 bot$a))))) :named a70))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$) (?v1 N_T_N_sum_set_prod_set_set$) (?v2 N_T_N_sum_set_prod_set$)) (= (= (insert$b ?v0 ?v1) (insert$b ?v2 bot$b)) (and (= ?v0 ?v2) (less_eq$b ?v1 (insert$b ?v2 bot$b))))) :named a71))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set_set$) (?v2 N_set_set$)) (= (= (insert$c ?v0 ?v1) (insert$c ?v2 bot$c)) (and (= ?v0 ?v2) (less_eq$c ?v1 (insert$c ?v2 bot$c))))) :named a72))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set_set$) (?v2 T_set_set$)) (= (= (insert$d ?v0 ?v1) (insert$d ?v2 bot$d)) (and (= ?v0 ?v2) (less_eq$d ?v1 (insert$d ?v2 bot$d))))) :named a73))
(assert (! (forall ((?v0 T$) (?v1 T_set$) (?v2 T$)) (= (= (insert$g ?v0 ?v1) (insert$g ?v2 bot$g)) (and (= ?v0 ?v2) (fun_app$ (less_eq$e ?v1) (insert$g ?v2 bot$g))))) :named a74))
(assert (! (forall ((?v0 N_set$) (?v1 N_set_set$) (?v2 N_set$)) (= (= (insert$e ?v0 ?v1) (insert$e ?v2 bot$e)) (and (= ?v0 ?v2) (fun_app$i (less_eq$f ?v1) (insert$e ?v2 bot$e))))) :named a75))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$) (?v1 N_T_N_sum_set_prod_set$) (?v2 N_T_N_sum_set_prod$)) (= (= (insert$h ?v0 ?v1) (insert$h ?v2 bot$h)) (and (= ?v0 ?v2) (fun_app$b (less_eq$g ?v1) (insert$h ?v2 bot$h))))) :named a76))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$) (?v2 T_N_sum$)) (= (= (insert$i ?v0 ?v1) (insert$i ?v2 bot$i)) (and (= ?v0 ?v2) (fun_app$c (less_eq$h ?v1) (insert$i ?v2 bot$i))))) :named a77))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N$)) (= (= (insert$ ?v0 ?v1) (insert$ ?v2 bot$)) (and (= ?v0 ?v2) (fun_app$j (less_eq$i ?v1) (insert$ ?v2 bot$))))) :named a78))
(assert (! (forall ((?v0 T_set$) (?v1 T_set_set$) (?v2 T_set$)) (= (= (insert$f ?v0 ?v1) (insert$f ?v2 bot$f)) (and (= ?v0 ?v2) (fun_app$d (less_eq$ ?v1) (insert$f ?v2 bot$f))))) :named a79))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set$) (?v2 T_N_sum_set_set$)) (= (= (insert$a ?v0 bot$a) (insert$a ?v1 ?v2)) (and (= ?v1 ?v0) (less_eq$a ?v2 (insert$a ?v0 bot$a))))) :named a80))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$) (?v1 N_T_N_sum_set_prod_set$) (?v2 N_T_N_sum_set_prod_set_set$)) (= (= (insert$b ?v0 bot$b) (insert$b ?v1 ?v2)) (and (= ?v1 ?v0) (less_eq$b ?v2 (insert$b ?v0 bot$b))))) :named a81))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set$) (?v2 N_set_set_set$)) (= (= (insert$c ?v0 bot$c) (insert$c ?v1 ?v2)) (and (= ?v1 ?v0) (less_eq$c ?v2 (insert$c ?v0 bot$c))))) :named a82))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set$) (?v2 T_set_set_set$)) (= (= (insert$d ?v0 bot$d) (insert$d ?v1 ?v2)) (and (= ?v1 ?v0) (less_eq$d ?v2 (insert$d ?v0 bot$d))))) :named a83))
(assert (! (forall ((?v0 T$) (?v1 T$) (?v2 T_set$)) (= (= (insert$g ?v0 bot$g) (insert$g ?v1 ?v2)) (and (= ?v1 ?v0) (fun_app$ (less_eq$e ?v2) (insert$g ?v0 bot$g))))) :named a84))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set_set$)) (= (= (insert$e ?v0 bot$e) (insert$e ?v1 ?v2)) (and (= ?v1 ?v0) (fun_app$i (less_eq$f ?v2) (insert$e ?v0 bot$e))))) :named a85))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$) (?v1 N_T_N_sum_set_prod$) (?v2 N_T_N_sum_set_prod_set$)) (= (= (insert$h ?v0 bot$h) (insert$h ?v1 ?v2)) (and (= ?v1 ?v0) (fun_app$b (less_eq$g ?v2) (insert$h ?v0 bot$h))))) :named a86))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum$) (?v2 T_N_sum_set$)) (= (= (insert$i ?v0 bot$i) (insert$i ?v1 ?v2)) (and (= ?v1 ?v0) (fun_app$c (less_eq$h ?v2) (insert$i ?v0 bot$i))))) :named a87))
(assert (! (forall ((?v0 N$) (?v1 N$) (?v2 N_set$)) (= (= (insert$ ?v0 bot$) (insert$ ?v1 ?v2)) (and (= ?v1 ?v0) (fun_app$j (less_eq$i ?v2) (insert$ ?v0 bot$))))) :named a88))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$) (?v2 T_set_set$)) (= (= (insert$f ?v0 bot$f) (insert$f ?v1 ?v2)) (and (= ?v1 ?v0) (fun_app$d (less_eq$ ?v2) (insert$f ?v0 bot$f))))) :named a89))
(assert (! (forall ((?v0 T_N_sum_set$)) (= (collect$a (uud$ ?v0)) (insert$a ?v0 bot$a))) :named a90))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$)) (= (collect$b (uue$ ?v0)) (insert$b ?v0 bot$b))) :named a91))
(assert (! (forall ((?v0 N_set_set$)) (= (collect$c (uuf$ ?v0)) (insert$c ?v0 bot$c))) :named a92))
(assert (! (forall ((?v0 T_set_set$)) (= (collect$d (uug$ ?v0)) (insert$d ?v0 bot$d))) :named a93))
(assert (! (forall ((?v0 T$)) (= (collect$e (uuh$ ?v0)) (insert$g ?v0 bot$g))) :named a94))
(assert (! (forall ((?v0 N_set$)) (= (collect$f (uui$ ?v0)) (insert$e ?v0 bot$e))) :named a95))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$)) (= (collect$g (uuj$ ?v0)) (insert$h ?v0 bot$h))) :named a96))
(assert (! (forall ((?v0 T_N_sum$)) (= (collect$h (uuk$ ?v0)) (insert$i ?v0 bot$i))) :named a97))
(assert (! (forall ((?v0 T_set$)) (= (collect$ (uul$ ?v0)) (insert$f ?v0 bot$f))) :named a98))
(assert (! (forall ((?v0 N$)) (= (collect$i (uum$ ?v0)) (insert$ ?v0 bot$))) :named a99))
(assert (! (forall ((?v0 T_N_sum_set$)) (= (collect$a (uun$ ?v0)) (insert$a ?v0 bot$a))) :named a100))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$)) (= (collect$b (uuo$ ?v0)) (insert$b ?v0 bot$b))) :named a101))
(assert (! (forall ((?v0 N_set_set$)) (= (collect$c (uup$ ?v0)) (insert$c ?v0 bot$c))) :named a102))
(assert (! (forall ((?v0 T_set_set$)) (= (collect$d (uuq$ ?v0)) (insert$d ?v0 bot$d))) :named a103))
(assert (! (forall ((?v0 T$)) (= (collect$e (uur$ ?v0)) (insert$g ?v0 bot$g))) :named a104))
(assert (! (forall ((?v0 N_set$)) (= (collect$f (uus$ ?v0)) (insert$e ?v0 bot$e))) :named a105))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$)) (= (collect$g (uut$ ?v0)) (insert$h ?v0 bot$h))) :named a106))
(assert (! (forall ((?v0 T_N_sum$)) (= (collect$h (uuu$ ?v0)) (insert$i ?v0 bot$i))) :named a107))
(assert (! (forall ((?v0 T_set$)) (= (collect$ (uuv$ ?v0)) (insert$f ?v0 bot$f))) :named a108))
(assert (! (forall ((?v0 N$)) (= (collect$i (uuw$ ?v0)) (insert$ ?v0 bot$))) :named a109))
(assert (! (forall ((?v0 T$) (?v1 N$)) (= (= (inl$ ?v0) (inr$ ?v1)) false)) :named a110))
(assert (! (forall ((?v0 N$) (?v1 T$)) (= (= (inr$ ?v0) (inl$ ?v1)) false)) :named a111))
(assert (! (forall ((?v0 T_N_sum_set$)) (= (member$d ?v0 bot$a) false)) :named a112))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$)) (= (member$e ?v0 bot$b) false)) :named a113))
(assert (! (forall ((?v0 N_set_set$)) (= (member$f ?v0 bot$c) false)) :named a114))
(assert (! (forall ((?v0 T_set_set$)) (= (member$g ?v0 bot$d) false)) :named a115))
(assert (! (forall ((?v0 T$)) (= (fun_app$ (member$h ?v0) bot$g) false)) :named a116))
(assert (! (forall ((?v0 N_set$)) (= (fun_app$i (member$i ?v0) bot$e) false)) :named a117))
(assert (! (forall ((?v0 T_N_sum$)) (= (fun_app$c (member$a ?v0) bot$i) false)) :named a118))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$)) (= (fun_app$b (member$ ?v0) bot$h) false)) :named a119))
(assert (! (forall ((?v0 T_set$)) (= (fun_app$d (member$b ?v0) bot$f) false)) :named a120))
(assert (! (forall ((?v0 N$)) (= (fun_app$j (member$c ?v0) bot$) false)) :named a121))
(assert (! (forall ((?v0 T_N_sum_set_bool_fun$)) (= (= bot$a (collect$a ?v0)) (forall ((?v1 T_N_sum_set$)) (not (fun_app$c ?v0 ?v1))))) :named a122))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set_bool_fun$)) (= (= bot$b (collect$b ?v0)) (forall ((?v1 N_T_N_sum_set_prod_set$)) (not (fun_app$b ?v0 ?v1))))) :named a123))
(assert (! (forall ((?v0 N_set_set_bool_fun$)) (= (= bot$c (collect$c ?v0)) (forall ((?v1 N_set_set$)) (not (fun_app$i ?v0 ?v1))))) :named a124))
(assert (! (forall ((?v0 T_set_set_bool_fun$)) (= (= bot$d (collect$d ?v0)) (forall ((?v1 T_set_set$)) (not (fun_app$d ?v0 ?v1))))) :named a125))
(assert (! (forall ((?v0 T_bool_fun$)) (= (= bot$g (collect$e ?v0)) (forall ((?v1 T$)) (not (fun_app$k ?v0 ?v1))))) :named a126))
(assert (! (forall ((?v0 N_set_bool_fun$)) (= (= bot$e (collect$f ?v0)) (forall ((?v1 N_set$)) (not (fun_app$j ?v0 ?v1))))) :named a127))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_bool_fun$)) (= (= bot$h (collect$g ?v0)) (forall ((?v1 N_T_N_sum_set_prod$)) (not (fun_app$g ?v0 ?v1))))) :named a128))
(assert (! (forall ((?v0 T_N_sum_bool_fun$)) (= (= bot$i (collect$h ?v0)) (forall ((?v1 T_N_sum$)) (not (fun_app$h ?v0 ?v1))))) :named a129))
(assert (! (forall ((?v0 T_set_bool_fun$)) (= (= bot$f (collect$ ?v0)) (forall ((?v1 T_set$)) (not (fun_app$ ?v0 ?v1))))) :named a130))
(assert (! (forall ((?v0 N_bool_fun$)) (= (= bot$ (collect$i ?v0)) (forall ((?v1 N$)) (not (fun_app$l ?v0 ?v1))))) :named a131))
(assert (! (forall ((?v0 T_N_sum_set_set$)) (= (forall ((?v1 T_N_sum_set$)) (not (member$d ?v1 ?v0))) (= ?v0 bot$a))) :named a132))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set_set$)) (= (forall ((?v1 N_T_N_sum_set_prod_set$)) (not (member$e ?v1 ?v0))) (= ?v0 bot$b))) :named a133))
(assert (! (forall ((?v0 N_set_set_set$)) (= (forall ((?v1 N_set_set$)) (not (member$f ?v1 ?v0))) (= ?v0 bot$c))) :named a134))
(assert (! (forall ((?v0 T_set_set_set$)) (= (forall ((?v1 T_set_set$)) (not (member$g ?v1 ?v0))) (= ?v0 bot$d))) :named a135))
(assert (! (forall ((?v0 T_set$)) (= (forall ((?v1 T$)) (not (fun_app$ (member$h ?v1) ?v0))) (= ?v0 bot$g))) :named a136))
(assert (! (forall ((?v0 N_set_set$)) (= (forall ((?v1 N_set$)) (not (fun_app$i (member$i ?v1) ?v0))) (= ?v0 bot$e))) :named a137))
(assert (! (forall ((?v0 T_N_sum_set$)) (= (forall ((?v1 T_N_sum$)) (not (fun_app$c (member$a ?v1) ?v0))) (= ?v0 bot$i))) :named a138))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$)) (= (forall ((?v1 N_T_N_sum_set_prod$)) (not (fun_app$b (member$ ?v1) ?v0))) (= ?v0 bot$h))) :named a139))
(assert (! (forall ((?v0 T_set_set$)) (= (forall ((?v1 T_set$)) (not (fun_app$d (member$b ?v1) ?v0))) (= ?v0 bot$f))) :named a140))
(assert (! (forall ((?v0 N_set$)) (= (forall ((?v1 N$)) (not (fun_app$j (member$c ?v1) ?v0))) (= ?v0 bot$))) :named a141))
(check-sat)
;(get-unsat-core)
