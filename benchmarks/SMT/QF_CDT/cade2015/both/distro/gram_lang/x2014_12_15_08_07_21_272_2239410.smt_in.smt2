; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 59
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort Dtree_bool_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort Dtree_T_bool_fun_fun$ 0)
(declare-sort Dtree_dtree_bool_fun_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun tr$ () Dtree$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun phi$ (Dtree$) Bool)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun inFr$ (N_set$) Dtree_T_bool_fun_fun$)
(declare-fun root$ (Dtree$) N$)
(declare-fun inFr2$ (N_set$) Dtree_T_bool_fun_fun$)
(declare-fun inItr$ (N_set$ Dtree$ N$) Bool)
(declare-fun setrp$ (T_dtree_sum$) Dtree_bool_fun$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun subtr2$ (N_set$) Dtree_dtree_bool_fun_fun$)
(declare-fun fun_app$ (Dtree_bool_fun$ Dtree$) Bool)
(declare-fun member$a (N$ N_set$) Bool)
(declare-fun fun_app$a (T_bool_fun$ T$) Bool)
(declare-fun fun_app$b (Dtree_T_bool_fun_fun$ Dtree$) T_bool_fun$)
(declare-fun fun_app$c (Dtree_dtree_bool_fun_fun$ Dtree$) Dtree_bool_fun$)
(declare-fun pred_sum$ (T_bool_fun$ Dtree_bool_fun$ T_dtree_sum$) Bool)
(assert (! (not (wf$ tr$)) :named a0))
(assert (! (phi$ tr$) :named a1))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (member$ (inr$ ?v1) (cont$ ?v0))) (wf$ ?v1))) :named a2))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (and (member$ (inr$ ?v1) (cont$ ?v0)) (member$ (inr$ ?v2) (cont$ ?v0)))) (= (= (root$ ?v1) (root$ ?v2)) (= ?v1 ?v2)))) :named a5))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (not (= ?v0 ?v1)) (not (= (inr$ ?v0) (inr$ ?v1))))) :named a7))
(assert (! (forall ((?v0 T_bool_fun$) (?v1 Dtree_bool_fun$) (?v2 Dtree$)) (! (= (pred_sum$ ?v0 ?v1 (inr$ ?v2)) (fun_app$ ?v1 ?v2)) :pattern ((pred_sum$ ?v0 ?v1 (inr$ ?v2))))) :named a8))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 Dtree$)) (= (fun_app$ (setrp$ ?v0) ?v1) (exists ((?v2 Dtree$)) (and (= ?v1 ?v2) (= ?v0 (inr$ ?v2)))))) :named a9))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 Dtree$)) (=> (= ?v0 (inr$ ?v1)) (fun_app$ (setrp$ ?v0) ?v1))) :named a10))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 Dtree$)) (=> (and (fun_app$ (setrp$ ?v0) ?v1) (forall ((?v2 Dtree$)) (=> (and (= ?v1 ?v2) (= ?v0 (inr$ ?v2))) false))) false)) :named a11))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (fun_app$a (fun_app$b (inFr2$ ?v0) ?v1) ?v2) (and (member$a (root$ ?v3) ?v0) (member$ (inr$ ?v1) (cont$ ?v3)))) (fun_app$a (fun_app$b (inFr2$ ?v0) ?v3) ?v2))) :named a12))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$a (fun_app$b (inFr2$ ?v0) ?v1) ?v2) (member$a (root$ ?v1) ?v0))) :named a13))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (= (root$ ?v0) (root$ ?v1)) (= (cont$ ?v0) (cont$ ?v1))) (= ?v0 ?v1))) :named a14))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 N$)) (=> (and (member$a (root$ ?v0) ?v1) (and (member$ (inr$ ?v2) (cont$ ?v0)) (inItr$ ?v1 ?v2 ?v3))) (inItr$ ?v1 ?v0 ?v3))) :named a15))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (and (inItr$ ?v0 ?v1 ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 (root$ ?v3)) (member$a (root$ ?v3) ?v4)))) false)) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 N$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$a (root$ ?v3) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (inItr$ ?v4 ?v5 ?v6)))))) false)))) false)) :named a16))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (= (inItr$ ?v0 ?v1 ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 (root$ ?v3)) (member$a (root$ ?v3) ?v4))))) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 N$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$a (root$ ?v3) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (inItr$ ?v4 ?v5 ?v6)))))))))) :named a17))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 T$)) (=> (and (member$a (root$ ?v0) ?v1) (and (member$ (inr$ ?v2) (cont$ ?v0)) (fun_app$a (fun_app$b (inFr$ ?v1) ?v2) ?v3))) (fun_app$a (fun_app$b (inFr$ ?v1) ?v0) ?v3))) :named a18))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$a (root$ ?v0) ?v1) (and (member$ (inr$ ?v0) (cont$ ?v2)) (fun_app$ (fun_app$c (subtr2$ ?v1) ?v2) ?v3))) (fun_app$ (fun_app$c (subtr2$ ?v1) ?v0) ?v3))) :named a19))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$a (root$ ?v0) ?v1) (and (member$ (inr$ ?v2) (cont$ ?v0)) (fun_app$ (fun_app$c (subtr2$ ?v1) ?v3) ?v2))) (fun_app$ (fun_app$c (subtr2$ ?v1) ?v3) ?v0))) :named a20))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (fun_app$ (fun_app$c (subtr2$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (member$a (root$ ?v3) ?v4)))) false)) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$a (root$ ?v3) ?v4) (and (member$ (inr$ ?v3) (cont$ ?v5)) (fun_app$ (fun_app$c (subtr2$ ?v4) ?v5) ?v6)))))) false)))) false)) :named a21))
(check-sat)
;(get-unsat-core)
