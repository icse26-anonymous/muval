; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 62
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort N_N_fun$ 0)
(declare-sort Dtree_set$ 0)
(declare-sort N_set_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort Dtree_N_fun$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort Dtree_set_set$ 0)
(declare-sort N_set_set_set$ 0)
(declare-sort Dtree_bool_fun$ 0)
(declare-sort N_set_bool_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort N_set_N_set_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort N_T_N_sum_set_fun$ 0)
(declare-sort N_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_N_fun$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort Dtree_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_dtree_fun$ 0)
(declare-sort Dtree_set_dtree_set_fun$ 0)
(declare-sort N_set_set_N_set_set_fun$ 0)
(declare-sort Dtree_dtree_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0)
(declare-sort Dtree_set_set_dtree_set_set_fun$ 0)
(declare-sort N_set_set_set_N_set_set_set_fun$ 0)
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0)
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0)
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun n$ () N$)
(declare-fun s$ () N_T_N_sum_set_fun$)
(declare-fun id$ () N_N_fun$)
(declare-fun na$ () N$)
(declare-fun ns$ () N_set$)
(declare-fun tr$ () Dtree$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun id$a () Dtree_set_dtree_set_fun$)
(declare-fun id$b () Dtree_set_set_dtree_set_set_fun$)
(declare-fun id$c () N_set_set_N_set_set_fun$)
(declare-fun id$d () N_set_set_set_N_set_set_set_fun$)
(declare-fun id$e () T_dtree_sum_T_dtree_sum_fun$)
(declare-fun id$f () T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun id$g () N_set_N_set_fun$)
(declare-fun id$h () Dtree_dtree_fun$)
(declare-fun nsa$ () N_set$)
(declare-fun top$ () N_set$)
(declare-fun tr1$ () Dtree$)
(declare-fun tr2$ () Dtree$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun root$ (Dtree$) N$)
(declare-fun top$a () Dtree_set_set$)
(declare-fun top$b () N_set_set_set$)
(declare-fun top$c () N_set_set$)
(declare-fun top$d () T_dtree_sum_set$)
(declare-fun top$e () Dtree_set$)
(declare-fun top$f () Dtree_bool_fun$)
(declare-fun top$g () Bool)
(declare-fun top$h () T_dtree_sum_bool_fun$)
(declare-fun top$i () N_bool_fun$)
(declare-fun top$j () N_set_bool_fun$)
(declare-fun deftr$ () N_dtree_fun$)
(declare-fun image$ (N_dtree_fun$ N_set$) Dtree_set$)
(declare-fun subtr$ (N_set$ Dtree$) Dtree_bool_fun$)
(declare-fun image$a (Dtree_set_dtree_set_fun$) Dtree_set_set_dtree_set_set_fun$)
(declare-fun image$b (N_set_set_N_set_set_fun$) N_set_set_set_N_set_set_set_fun$)
(declare-fun image$c (T_dtree_sum_T_dtree_sum_fun$) T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun image$d (N_set_N_set_fun$) N_set_set_N_set_set_fun$)
(declare-fun image$e (Dtree_dtree_fun$) Dtree_set_dtree_set_fun$)
(declare-fun image$f (N_N_fun$) N_set_N_set_fun$)
(declare-fun image$g (Dtree_T_dtree_sum_fun$ Dtree_set$) T_dtree_sum_set$)
(declare-fun image$h (Dtree_N_fun$ Dtree_set$) N_set$)
(declare-fun image$i (T_dtree_sum_dtree_fun$ T_dtree_sum_set$) Dtree_set$)
(declare-fun image$j (T_dtree_sum_N_fun$ T_dtree_sum_set$) N_set$)
(declare-fun image$k (N_T_dtree_sum_fun$ N_set$) T_dtree_sum_set$)
(declare-fun member$ (Dtree$ Dtree_set$) Bool)
(declare-fun thesis$ () Bool)
(declare-fun unfold$ (N_N_fun$) N_T_N_sum_set_fun_N_dtree_fun_fun$)
(declare-fun collect$ (N_set_bool_fun$) N_set_set$)
(declare-fun fun_app$ (N_dtree_fun$ N$) Dtree$)
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun member$b (N$ N_set$) Bool)
(declare-fun member$c (N_set$ N_set_set$) Bool)
(declare-fun subtrOf$ (Dtree$) N_dtree_fun$)
(declare-fun collect$a (T_dtree_sum_bool_fun$) T_dtree_sum_set$)
(declare-fun collect$b (Dtree_bool_fun$) Dtree_set$)
(declare-fun collect$c (N_bool_fun$) N_set$)
(declare-fun fun_app$a (Dtree_bool_fun$ Dtree$) Bool)
(declare-fun fun_app$b (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$) N_dtree_fun$)
(declare-fun fun_app$c (Dtree_dtree_bool_fun_fun$ Dtree$) Dtree_bool_fun$)
(declare-fun fun_app$d (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$) Dtree_dtree_bool_fun_fun$)
(declare-fun fun_app$e (Dtree_set_set_dtree_set_set_fun$ Dtree_set_set$) Dtree_set_set$)
(declare-fun fun_app$f (N_set_set_set_N_set_set_set_fun$ N_set_set_set$) N_set_set_set$)
(declare-fun fun_app$g (N_set_set_N_set_set_fun$ N_set_set$) N_set_set$)
(declare-fun fun_app$h (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun fun_app$i (Dtree_set_dtree_set_fun$ Dtree_set$) Dtree_set$)
(declare-fun fun_app$j (N_set_N_set_fun$ N_set$) N_set$)
(declare-fun fun_app$k (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$l (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$) T_dtree_sum$)
(declare-fun fun_app$m (N_N_fun$ N$) N$)
(declare-fun fun_app$n (Dtree_T_dtree_sum_fun$ Dtree$) T_dtree_sum$)
(declare-fun fun_app$o (Dtree_N_fun$ Dtree$) N$)
(declare-fun fun_app$p (T_dtree_sum_dtree_fun$ T_dtree_sum$) Dtree$)
(declare-fun fun_app$q (T_dtree_sum_N_fun$ T_dtree_sum$) N$)
(declare-fun fun_app$r (N_T_dtree_sum_fun$ N$) T_dtree_sum$)
(declare-fun fun_app$s (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun fun_app$t (N_bool_fun$ N$) Bool)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 N$)) (=> (= tr2$ (fun_app$ deftr$ ?v0)) thesis$)) :named a1))
(assert (! (member$ tr2$ (image$ deftr$ top$)) :named a2))
(assert (! (forall ((?v0 N$)) (=> (= tr2$ (fun_app$ deftr$ ?v0)) (= tr1$ (fun_app$ deftr$ (root$ tr1$))))) :named a3))
(assert (! (fun_app$a (subtr$ nsa$ tr1$) tr2$) :named a4))
(assert (! (fun_app$a (subtr$ ns$ tr$) (fun_app$ deftr$ n$)) :named a5))
(assert (! (member$a (inr$ tr2$) (cont$ (fun_app$ deftr$ na$))) :named a6))
(assert (! (member$b (root$ (fun_app$ deftr$ na$)) nsa$) :named a7))
(assert (! (forall ((?v0 N$)) (wf$ (fun_app$ deftr$ ?v0))) :named a8))
(assert (! (forall ((?v0 N$)) (= (root$ (fun_app$ deftr$ ?v0)) ?v0)) :named a9))
(assert (! (= deftr$ (fun_app$b (unfold$ id$) s$)) :named a10))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (and (member$a (inr$ ?v1) (cont$ ?v0)) (member$a (inr$ ?v2) (cont$ ?v0)))) (= (= (root$ ?v1) (root$ ?v2)) (= ?v1 ?v2)))) :named a11))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (= (fun_app$a (subtr$ ?v0 ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (member$b (root$ ?v3) ?v4))))) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (and (= ?v0 ?v4) (and (= ?v1 ?v5) (and (= ?v2 ?v3) (and (member$b (root$ ?v3) ?v4) (and (fun_app$a (subtr$ ?v4 ?v5) ?v6) (member$a (inr$ ?v6) (cont$ ?v3))))))))))) :named a12))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 N_set_dtree_dtree_bool_fun_fun_fun$)) (=> (and (fun_app$a (subtr$ ?v0 ?v1) ?v2) (and (forall ((?v4 N_set$) (?v5 Dtree$)) (fun_app$a (fun_app$c (fun_app$d ?v3 ?v4) ?v5) ?v5)) (forall ((?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$) (?v7 Dtree$)) (=> (and (member$b (root$ ?v5) ?v4) (and (member$a (inr$ ?v5) (cont$ ?v6)) (and (fun_app$a (subtr$ ?v4 ?v6) ?v7) (fun_app$a (fun_app$c (fun_app$d ?v3 ?v4) ?v6) ?v7)))) (fun_app$a (fun_app$c (fun_app$d ?v3 ?v4) ?v5) ?v7))))) (fun_app$a (fun_app$c (fun_app$d ?v3 ?v0) ?v1) ?v2))) :named a13))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (fun_app$a (subtr$ ?v0 ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (member$b (root$ ?v3) ?v4)))) false)) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v5) (and (= ?v2 ?v3) (and (member$b (root$ ?v3) ?v4) (and (fun_app$a (subtr$ ?v4 ?v5) ?v6) (member$a (inr$ ?v6) (cont$ ?v3))))))) false)))) false)) :named a14))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (fun_app$a (subtr$ ?v0 ?v1) ?v2) (fun_app$a (subtr$ ?v0 ?v2) ?v3)) (fun_app$a (subtr$ ?v0 ?v1) ?v3))) :named a15))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$a (subtr$ ?v0 ?v1) ?v2) (member$b (root$ ?v2) ?v0))) :named a16))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$a (subtr$ ?v0 ?v1) ?v2) (member$b (root$ ?v1) ?v0))) :named a17))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree_dtree_bool_fun_fun$)) (=> (and (fun_app$a (subtr$ top$ ?v0) ?v1) (and (forall ((?v3 Dtree$)) (fun_app$a (fun_app$c ?v2 ?v3) ?v3)) (forall ((?v3 Dtree$) (?v4 Dtree$) (?v5 Dtree$)) (=> (and (member$a (inr$ ?v3) (cont$ ?v4)) (and (fun_app$a (subtr$ top$ ?v4) ?v5) (fun_app$a (fun_app$c ?v2 ?v4) ?v5))) (fun_app$a (fun_app$c ?v2 ?v3) ?v5))))) (fun_app$a (fun_app$c ?v2 ?v0) ?v1))) :named a18))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$b (root$ ?v0) ?v1) (and (fun_app$a (subtr$ ?v1 ?v2) ?v3) (member$a (inr$ ?v3) (cont$ ?v0)))) (fun_app$a (subtr$ ?v1 ?v2) ?v0))) :named a19))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$b (root$ ?v0) ?v1) (and (member$a (inr$ ?v0) (cont$ ?v2)) (fun_app$a (subtr$ ?v1 ?v2) ?v3))) (fun_app$a (subtr$ ?v1 ?v0) ?v3))) :named a20))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$b (root$ ?v0) ?v1) (fun_app$a (subtr$ ?v1 ?v0) ?v0))) :named a21))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (fun_app$a (subtr$ ?v1 ?v2) ?v0)) (wf$ ?v2))) :named a22))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (member$a (inr$ ?v1) (cont$ ?v0))) (wf$ ?v1))) :named a23))
(assert (! (= (image$a id$a) id$b) :named a24))
(assert (! (= (image$b id$c) id$d) :named a25))
(assert (! (= (image$c id$e) id$f) :named a26))
(assert (! (= (image$d id$g) id$c) :named a27))
(assert (! (= (image$e id$h) id$a) :named a28))
(assert (! (= (image$f id$) id$g) :named a29))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (member$a (inr$ ?v1) (cont$ ?v0))) (= (fun_app$ (subtrOf$ ?v0) (root$ ?v1)) ?v1))) :named a30))
(assert (! (= (fun_app$e (image$a id$a) top$a) top$a) :named a31))
(assert (! (= (fun_app$f (image$b id$c) top$b) top$b) :named a32))
(assert (! (= (fun_app$g (image$d id$g) top$c) top$c) :named a33))
(assert (! (= (fun_app$h (image$c id$e) top$d) top$d) :named a34))
(assert (! (= (fun_app$i (image$e id$h) top$e) top$e) :named a35))
(assert (! (= (fun_app$j (image$f id$) top$) top$) :named a36))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a37))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a38))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$k id$h ?v0) ?v0) :pattern ((fun_app$k id$h ?v0)))) :named a39))
(assert (! (forall ((?v0 Dtree_set$)) (! (= (fun_app$i id$a ?v0) ?v0) :pattern ((fun_app$i id$a ?v0)))) :named a40))
(assert (! (forall ((?v0 N_set_set$)) (! (= (fun_app$g id$c ?v0) ?v0) :pattern ((fun_app$g id$c ?v0)))) :named a41))
(assert (! (forall ((?v0 T_dtree_sum$)) (! (= (fun_app$l id$e ?v0) ?v0) :pattern ((fun_app$l id$e ?v0)))) :named a42))
(assert (! (forall ((?v0 N_set$)) (! (= (fun_app$j id$g ?v0) ?v0) :pattern ((fun_app$j id$g ?v0)))) :named a43))
(assert (! (forall ((?v0 N$)) (! (= (fun_app$m id$ ?v0) ?v0) :pattern ((fun_app$m id$ ?v0)))) :named a44))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N_T_N_sum_set_fun$) (?v2 N$)) (= (root$ (fun_app$ (fun_app$b (unfold$ ?v0) ?v1) ?v2)) (fun_app$m ?v0 ?v2))) :named a45))
(assert (! (forall ((?v0 N_set$)) (= (member$c ?v0 top$c) true)) :named a46))
(assert (! (forall ((?v0 Dtree$)) (= (member$ ?v0 top$e) true)) :named a47))
(assert (! (forall ((?v0 T_dtree_sum$)) (= (member$a ?v0 top$d) true)) :named a48))
(assert (! (forall ((?v0 N$)) (= (member$b ?v0 top$) true)) :named a49))
(assert (! (forall ((?v0 N_set$)) (member$c ?v0 top$c)) :named a50))
(assert (! (forall ((?v0 Dtree$)) (member$ ?v0 top$e)) :named a51))
(assert (! (forall ((?v0 T_dtree_sum$)) (member$a ?v0 top$d)) :named a52))
(assert (! (forall ((?v0 N$)) (member$b ?v0 top$)) :named a53))
(assert (! (forall ((?v0 N_set$) (?v1 N_set_N_set_fun$) (?v2 N_set$) (?v3 N_set_set$)) (=> (and (= ?v0 (fun_app$j ?v1 ?v2)) (member$c ?v2 ?v3)) (member$c ?v0 (fun_app$g (image$d ?v1) ?v3)))) :named a54))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (fun_app$i (image$e ?v1) ?v3)))) :named a55))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 Dtree_T_dtree_sum_fun$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= ?v0 (fun_app$n ?v1 ?v2)) (member$ ?v2 ?v3)) (member$a ?v0 (image$g ?v1 ?v3)))) :named a56))
(assert (! (forall ((?v0 N$) (?v1 Dtree_N_fun$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= ?v0 (fun_app$o ?v1 ?v2)) (member$ ?v2 ?v3)) (member$b ?v0 (image$h ?v1 ?v3)))) :named a57))
(assert (! (forall ((?v0 Dtree$) (?v1 T_dtree_sum_dtree_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$p ?v1 ?v2)) (member$a ?v2 ?v3)) (member$ ?v0 (image$i ?v1 ?v3)))) :named a58))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$l ?v1 ?v2)) (member$a ?v2 ?v3)) (member$a ?v0 (fun_app$h (image$c ?v1) ?v3)))) :named a59))
(assert (! (forall ((?v0 N$) (?v1 T_dtree_sum_N_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$q ?v1 ?v2)) (member$a ?v2 ?v3)) (member$b ?v0 (image$j ?v1 ?v3)))) :named a60))
(assert (! (forall ((?v0 Dtree$) (?v1 N_dtree_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$ ?v1 ?v2)) (member$b ?v2 ?v3)) (member$ ?v0 (image$ ?v1 ?v3)))) :named a61))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 N_T_dtree_sum_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$r ?v1 ?v2)) (member$b ?v2 ?v3)) (member$a ?v0 (image$k ?v1 ?v3)))) :named a62))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$m ?v1 ?v2)) (member$b ?v2 ?v3)) (member$b ?v0 (fun_app$j (image$f ?v1) ?v3)))) :named a63))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$a top$f ?v0) top$g) :pattern ((fun_app$a top$f ?v0)))) :named a64))
(assert (! (forall ((?v0 T_dtree_sum$)) (! (= (fun_app$s top$h ?v0) top$g) :pattern ((fun_app$s top$h ?v0)))) :named a65))
(assert (! (forall ((?v0 N$)) (! (= (fun_app$t top$i ?v0) top$g) :pattern ((fun_app$t top$i ?v0)))) :named a66))
(assert (! (= top$c (collect$ top$j)) :named a67))
(assert (! (= top$d (collect$a top$h)) :named a68))
(assert (! (= top$e (collect$b top$f)) :named a69))
(assert (! (= top$ (collect$c top$i)) :named a70))
(assert (! (forall ((?v0 N_set$) (?v1 N_set_set$) (?v2 N_set_N_set_fun$)) (=> (member$c ?v0 ?v1) (member$c (fun_app$j ?v2 ?v0) (fun_app$g (image$d ?v2) ?v1)))) :named a71))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_set$) (?v2 Dtree_dtree_fun$)) (=> (member$ ?v0 ?v1) (member$ (fun_app$k ?v2 ?v0) (fun_app$i (image$e ?v2) ?v1)))) :named a72))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_set$) (?v2 Dtree_T_dtree_sum_fun$)) (=> (member$ ?v0 ?v1) (member$a (fun_app$n ?v2 ?v0) (image$g ?v2 ?v1)))) :named a73))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_set$) (?v2 Dtree_N_fun$)) (=> (member$ ?v0 ?v1) (member$b (fun_app$o ?v2 ?v0) (image$h ?v2 ?v1)))) :named a74))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_dtree_fun$)) (=> (member$a ?v0 ?v1) (member$ (fun_app$p ?v2 ?v0) (image$i ?v2 ?v1)))) :named a75))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_T_dtree_sum_fun$)) (=> (member$a ?v0 ?v1) (member$a (fun_app$l ?v2 ?v0) (fun_app$h (image$c ?v2) ?v1)))) :named a76))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_N_fun$)) (=> (member$a ?v0 ?v1) (member$b (fun_app$q ?v2 ?v0) (image$j ?v2 ?v1)))) :named a77))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N_dtree_fun$)) (=> (member$b ?v0 ?v1) (member$ (fun_app$ ?v2 ?v0) (image$ ?v2 ?v1)))) :named a78))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N_T_dtree_sum_fun$)) (=> (member$b ?v0 ?v1) (member$a (fun_app$r ?v2 ?v0) (image$k ?v2 ?v1)))) :named a79))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N_N_fun$)) (=> (member$b ?v0 ?v1) (member$b (fun_app$m ?v2 ?v0) (fun_app$j (image$f ?v2) ?v1)))) :named a80))
(check-sat)
;(get-unsat-core)
