; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 93
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort Dtree_bool_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort N_dtree_bool_fun_fun$ 0)
(declare-sort Dtree_dtree_bool_fun_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun n$ () N$)
(declare-fun tr$ () Dtree$)
(declare-fun uu$ () Dtree_bool_fun$)
(declare-fun eps$ (Dtree_bool_fun$) Dtree$)
(declare-fun itr$ (N_set$ Dtree$) N_set$)
(declare-fun tr$a () Dtree$)
(declare-fun uua$ (Dtree$) N_dtree_bool_fun_fun$)
(declare-fun uub$ (Dtree$) Dtree_bool_fun$)
(declare-fun uuc$ (Dtree$) Dtree_bool_fun$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun inFr$ (N_set$ Dtree$ T$) Bool)
(declare-fun node$ (N$ T_dtree_sum_set$) Dtree$)
(declare-fun root$ (Dtree$) N$)
(declare-fun inFr2$ (N_set$ Dtree$ T$) Bool)
(declare-fun inItr$ (N_set$ Dtree$) N_bool_fun$)
(declare-fun subtr$ (N_set$) Dtree_dtree_bool_fun_fun$)
(declare-fun insert$ (N$ N_set$) N_set$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun subtr2$ (N_set$) Dtree_dtree_bool_fun_fun$)
(declare-fun collect$ (N_bool_fun$) N_set$)
(declare-fun fun_app$ (Dtree_bool_fun$ Dtree$) Bool)
(declare-fun member$a (N$ N_set$) Bool)
(declare-fun subtrOf$ (Dtree$ N$) Dtree$)
(declare-fun fun_app$a (N_dtree_bool_fun_fun$ N$) Dtree_bool_fun$)
(declare-fun fun_app$b (N_bool_fun$ N$) Bool)
(declare-fun fun_app$c (Dtree_dtree_bool_fun_fun$ Dtree$) Dtree_bool_fun$)
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$ uu$ ?v0) (and (member$ (inr$ ?v0) (cont$ tr$)) (= (root$ ?v0) n$))) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (! (= (fun_app$ (uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (uub$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (! (= (fun_app$ (uuc$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$ (uuc$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 Dtree$) (?v1 N$) (?v2 Dtree$)) (! (= (fun_app$ (fun_app$a (uua$ ?v0) ?v1) ?v2) (and (member$ (inr$ ?v2) (cont$ ?v0)) (= (root$ ?v2) ?v1))) :pattern ((fun_app$ (fun_app$a (uua$ ?v0) ?v1) ?v2)))) :named a3))
(assert (! (not (and (member$ (inr$ (eps$ uu$)) (cont$ tr$)) (= (root$ (eps$ uu$)) n$))) :named a4))
(assert (! (and (member$ (inr$ tr$a) (cont$ tr$)) (= (root$ tr$a) n$)) :named a5))
(assert (! (=> (forall ((?v0 Dtree$)) (=> (and (member$ (inr$ ?v0) (cont$ tr$)) (= (root$ ?v0) n$)) false)) false) :named a6))
(assert (! (forall ((?v0 Dtree$) (?v1 N$)) (= (subtrOf$ ?v0 ?v1) (eps$ (fun_app$a (uua$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 Dtree$)) (= (eps$ (uub$ ?v0)) ?v0)) :named a8))
(assert (! (forall ((?v0 Dtree$)) (= (eps$ (uuc$ ?v0)) ?v0)) :named a9))
(assert (! (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v2 Dtree$)) (=> (fun_app$ ?v0 ?v2) (= ?v2 ?v1)))) (= (eps$ ?v0) ?v1))) :named a10))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a11))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a12))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (= (root$ ?v0) (root$ ?v1)) (= (cont$ ?v0) (cont$ ?v1))) (= ?v0 ?v1))) :named a13))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (inFr2$ ?v0 ?v1 ?v2) (and (member$a (root$ ?v3) ?v0) (member$ (inr$ ?v1) (cont$ ?v3)))) (inFr2$ ?v0 ?v3 ?v2))) :named a14))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (= (fun_app$b (inItr$ ?v0 ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 (root$ ?v3)) (member$a (root$ ?v3) ?v4))))) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 N$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$a (root$ ?v3) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (fun_app$b (inItr$ ?v4 ?v5) ?v6)))))))))) :named a15))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (and (fun_app$b (inItr$ ?v0 ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 (root$ ?v3)) (member$a (root$ ?v3) ?v4)))) false)) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 N$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$a (root$ ?v3) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (fun_app$b (inItr$ ?v4 ?v5) ?v6)))))) false)))) false)) :named a16))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 N$)) (=> (and (member$a (root$ ?v0) ?v1) (and (member$ (inr$ ?v2) (cont$ ?v0)) (fun_app$b (inItr$ ?v1 ?v2) ?v3))) (fun_app$b (inItr$ ?v1 ?v0) ?v3))) :named a17))
(assert (! (forall ((?v0 Dtree_bool_fun$)) (= (fun_app$ ?v0 (eps$ ?v0)) (exists ((?v1 Dtree$)) (fun_app$ ?v0 ?v1)))) :named a18))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$a (root$ ?v0) ?v1) (fun_app$b (inItr$ ?v1 ?v0) (root$ ?v0)))) :named a19))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (fun_app$b (inItr$ ?v0 ?v1) ?v2) (member$a (root$ ?v1) ?v0))) :named a20))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (inFr2$ ?v0 ?v1 ?v2) (member$a (root$ ?v1) ?v0))) :named a21))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a22))
(assert (! (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree$)) (=> (fun_app$ ?v0 ?v1) (fun_app$ ?v0 (eps$ ?v0)))) :named a23))
(assert (! (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree$)) (=> (fun_app$ ?v0 ?v1) (fun_app$ ?v0 (eps$ ?v0)))) :named a24))
(assert (! (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree$) (?v2 Dtree_bool_fun$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 Dtree$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ ?v2 ?v3)))) (fun_app$ ?v2 (eps$ ?v0)))) :named a25))
(assert (! (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree$)) (=> (and (exists ((?v2 Dtree$)) (and (fun_app$ ?v0 ?v2) (forall ((?v3 Dtree$)) (=> (fun_app$ ?v0 ?v3) (= ?v3 ?v2))))) (fun_app$ ?v0 ?v1)) (= (eps$ ?v0) ?v1))) :named a26))
(assert (! (forall ((?v0 Dtree_bool_fun$)) (=> (exists ((?v1 Dtree$)) (fun_app$ ?v0 ?v1)) (fun_app$ ?v0 (eps$ ?v0)))) :named a27))
(assert (! (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree_bool_fun$)) (=> (and (exists ((?v2 Dtree$)) (fun_app$ ?v0 ?v2)) (forall ((?v2 Dtree$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)))) (fun_app$ ?v1 (eps$ ?v0)))) :named a28))
(assert (! (forall ((?v0 Dtree$)) (= (node$ (root$ ?v0) (cont$ ?v0)) ?v0)) :named a29))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 T$)) (=> (and (member$a (root$ ?v0) ?v1) (and (member$ (inr$ ?v2) (cont$ ?v0)) (inFr$ ?v1 ?v2 ?v3))) (inFr$ ?v1 ?v0 ?v3))) :named a30))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$)) (! (= (itr$ ?v0 ?v1) (collect$ (inItr$ ?v0 ?v1))) :pattern ((itr$ ?v0 ?v1)))) :named a31))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$a (root$ ?v0) ?v1) (and (member$ (inr$ ?v0) (cont$ ?v2)) (fun_app$ (fun_app$c (subtr2$ ?v1) ?v2) ?v3))) (fun_app$ (fun_app$c (subtr2$ ?v1) ?v0) ?v3))) :named a32))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$a (root$ ?v0) ?v1) (and (member$ (inr$ ?v2) (cont$ ?v0)) (fun_app$ (fun_app$c (subtr2$ ?v1) ?v3) ?v2))) (fun_app$ (fun_app$c (subtr2$ ?v1) ?v3) ?v0))) :named a33))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (fun_app$ (fun_app$c (subtr2$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (member$a (root$ ?v3) ?v4)))) false)) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$a (root$ ?v3) ?v4) (and (member$ (inr$ ?v3) (cont$ ?v5)) (fun_app$ (fun_app$c (subtr2$ ?v4) ?v5) ?v6)))))) false)))) false)) :named a34))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (= (fun_app$ (fun_app$c (subtr2$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (member$a (root$ ?v3) ?v4))))) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$a (root$ ?v3) ?v4) (and (member$ (inr$ ?v3) (cont$ ?v5)) (fun_app$ (fun_app$c (subtr2$ ?v4) ?v5) ?v6)))))))))) :named a35))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 N_set$) (?v3 T$)) (=> (and (member$ (inr$ ?v0) (cont$ ?v1)) (inFr2$ ?v2 ?v0 ?v3)) (inFr2$ (insert$ (root$ ?v1) ?v2) ?v1 ?v3))) :named a36))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$a (root$ ?v0) ?v1) (and (member$ (inr$ ?v0) (cont$ ?v2)) (fun_app$ (fun_app$c (subtr$ ?v1) ?v2) ?v3))) (fun_app$ (fun_app$c (subtr$ ?v1) ?v0) ?v3))) :named a37))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$a (root$ ?v0) ?v1) (and (fun_app$ (fun_app$c (subtr$ ?v1) ?v2) ?v3) (member$ (inr$ ?v3) (cont$ ?v0)))) (fun_app$ (fun_app$c (subtr$ ?v1) ?v2) ?v0))) :named a38))
(check-sat)
;(get-unsat-core)
