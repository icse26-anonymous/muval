; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 34
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort N_N_fun$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort Dtree_set$ 0)
(declare-sort T_set_set$ 0)
(declare-sort Dtree_N_fun$ 0)
(declare-sort T_N_sum_set$ 0)
(declare-sort N_T_N_sum_fun$ 0)
(declare-sort T_N_sum_N_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort N_set_N_set_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort T_set_T_set_fun$ 0)
(declare-sort N_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_N_fun$ 0)
(declare-sort T_N_sum_T_N_sum_fun$ 0)
(declare-sort T_T_sum_T_T_sum_fun$ 0)
(declare-sort Dtree_set_dtree_set_fun$ 0)
(declare-sort N_set_set_N_set_set_fun$ 0)
(declare-sort T_N_sum_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_T_N_sum_fun$ 0)
(declare-sort T_set_set_T_set_set_fun$ 0)
(declare-sort Dtree_T_sum_dtree_T_sum_fun$ 0)
(declare-sort T_N_sum_set_T_N_sum_set_fun$ 0)
(declare-sort T_T_set_sum_T_T_set_sum_fun$ 0)
(declare-sort T_T_sum_set_T_T_sum_set_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0)
(declare-sort T_set_T_sum_T_set_T_sum_fun$ 0)
(declare-sort Dtree_set_set_dtree_set_set_fun$ 0)
(declare-sort T_T_T_sum_sum_T_T_T_sum_sum_fun$ 0)
(declare-sort Dtree_T_set_sum_dtree_T_set_sum_fun$ 0)
(declare-sort Dtree_dtree_sum_dtree_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0)
(declare-sort T_set_dtree_sum_T_set_dtree_sum_fun$ 0)
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0)
(declare-sort T_T_dtree_sum_sum_T_T_dtree_sum_sum_fun$ 0)
(declare-sort T_dtree_sum_set_set_T_dtree_sum_set_set_fun$ 0)
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0)
(declare-datatypes () ((T_N_sum$ (inl$ (projl$ T$)) (inr$ (projr$ N$)))
  (T_dtree_sum$ (inl$a (projl$a T$)) (inr$a (projr$a Dtree$)))
  (T_T_sum$ (inl$b (projl$b T$)) (inr$b (projr$b T$)))
  (Dtree_T_sum$ (inl$c (projl$c Dtree$)) (inr$c (projr$c T$)))
  (Dtree_dtree_sum$ (inl$d (projl$d Dtree$)) (inr$d (projr$d Dtree$)))
  (T_T_set_sum$ (inl$e (projl$e T$)) (inr$e (projr$e T_set$)))
  (T_set_T_sum$ (inl$f (projl$f T_set$)) (inr$f (projr$f T$)))
  (T_set_dtree_sum$ (inl$g (projl$g T_set$)) (inr$g (projr$g Dtree$)))
  (Dtree_T_set_sum$ (inl$h (projl$h Dtree$)) (inr$h (projr$h T_set$)))
  (T_T_dtree_sum_sum$ (inl$i (projl$i T$)) (inr$i (projr$i T_dtree_sum$)))
  (T_T_T_sum_sum$ (inl$j (projl$j T$)) (inr$j (projr$j T_T_sum$)))))
(declare-fun n$ () N$)
(declare-fun id$ () T_T_fun$)
(declare-fun ns$ () N_set$)
(declare-fun tr$ () Dtree$)
(declare-fun h_c$ (Dtree$ N$) T_N_sum_set$)
(declare-fun id$a () T_set_T_set_fun$)
(declare-fun id$b () T_dtree_sum_T_dtree_sum_fun$)
(declare-fun id$c () T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun id$d () Dtree_dtree_fun$)
(declare-fun id$e () Dtree_set_dtree_set_fun$)
(declare-fun id$f () N_N_fun$)
(declare-fun id$g () N_set_N_set_fun$)
(declare-fun id$h () T_set_set_T_set_set_fun$)
(declare-fun id$i () T_T_sum_T_T_sum_fun$)
(declare-fun id$j () T_T_sum_set_T_T_sum_set_fun$)
(declare-fun id$k () T_N_sum_T_N_sum_fun$)
(declare-fun id$l () T_N_sum_set_T_N_sum_set_fun$)
(declare-fun id$m () T_dtree_sum_set_set_T_dtree_sum_set_set_fun$)
(declare-fun id$n () Dtree_set_set_dtree_set_set_fun$)
(declare-fun id$o () N_set_set_N_set_set_fun$)
(declare-fun id$p () Dtree_T_sum_dtree_T_sum_fun$)
(declare-fun id$q () Dtree_dtree_sum_dtree_dtree_sum_fun$)
(declare-fun id$r () T_T_set_sum_T_T_set_sum_fun$)
(declare-fun id$s () T_set_T_sum_T_set_T_sum_fun$)
(declare-fun id$t () T_set_dtree_sum_T_set_dtree_sum_fun$)
(declare-fun id$u () Dtree_T_set_sum_dtree_T_set_sum_fun$)
(declare-fun id$v () T_T_dtree_sum_sum_T_T_dtree_sum_sum_fun$)
(declare-fun id$w () T_T_T_sum_sum_T_T_T_sum_sum_fun$)
(declare-fun tns$ () T_N_sum_set$)
(declare-fun tr$a () Dtree$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun pick$ (Dtree$ N$) Dtree$)
(declare-fun rcut$ (Dtree$) Dtree$)
(declare-fun root$ () Dtree_N_fun$)
(declare-fun image$ (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$) T_N_sum_set$)
(declare-fun hsubst$ (Dtree$) Dtree_dtree_fun$)
(declare-fun image$a (T_T_fun$) T_set_T_set_fun$)
(declare-fun image$b (T_dtree_sum_T_dtree_sum_fun$) T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun image$c (Dtree_dtree_fun$) Dtree_set_dtree_set_fun$)
(declare-fun image$d (N_N_fun$) N_set_N_set_fun$)
(declare-fun image$e (T_set_T_set_fun$) T_set_set_T_set_set_fun$)
(declare-fun image$f (T_T_sum_T_T_sum_fun$) T_T_sum_set_T_T_sum_set_fun$)
(declare-fun image$g (T_N_sum_T_N_sum_fun$) T_N_sum_set_T_N_sum_set_fun$)
(declare-fun image$h (T_dtree_sum_set_T_dtree_sum_set_fun$) T_dtree_sum_set_set_T_dtree_sum_set_set_fun$)
(declare-fun image$i (Dtree_set_dtree_set_fun$) Dtree_set_set_dtree_set_set_fun$)
(declare-fun image$j (N_set_N_set_fun$) N_set_set_N_set_set_fun$)
(declare-fun image$k (T_N_sum_N_fun$ T_N_sum_set$) N_set$)
(declare-fun image$l (N_T_N_sum_fun$ N_set$) T_N_sum_set$)
(declare-fun image$m (N_T_dtree_sum_fun$ N_set$) T_dtree_sum_set$)
(declare-fun image$n (T_dtree_sum_N_fun$ T_dtree_sum_set$) N_set$)
(declare-fun image$o (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$) T_dtree_sum_set$)
(declare-fun member$ (N$ N_set$) Bool)
(declare-fun fun_app$ (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$) T_dtree_sum_T_N_sum_fun$)
(declare-fun map_sum$ (T_T_fun$) Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$)
(declare-fun member$a (T_N_sum$ T_N_sum_set$) Bool)
(declare-fun member$b (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun member$c (T$ T_set$) Bool)
(declare-fun subtrOf$ (Dtree$ N$) Dtree$)
(declare-fun fun_app$a (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$b (Dtree_N_fun$ Dtree$) N$)
(declare-fun fun_app$c (T_T_fun$ T$) T$)
(declare-fun fun_app$d (T_set_T_set_fun$ T_set$) T_set$)
(declare-fun fun_app$e (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$) T_dtree_sum$)
(declare-fun fun_app$f (T_T_sum_T_T_sum_fun$ T_T_sum$) T_T_sum$)
(declare-fun fun_app$g (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun fun_app$h (N_N_fun$ N$) N$)
(declare-fun fun_app$i (Dtree_set_dtree_set_fun$ Dtree_set$) Dtree_set$)
(declare-fun fun_app$j (N_set_N_set_fun$ N_set$) N_set$)
(declare-fun fun_app$k (T_set_set_T_set_set_fun$ T_set_set$) T_set_set$)
(declare-fun fun_app$l (T_N_sum_N_fun$ T_N_sum$) N$)
(declare-fun fun_app$m (N_T_N_sum_fun$ N$) T_N_sum$)
(declare-fun fun_app$n (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$) T_N_sum$)
(declare-fun fun_app$o (T_N_sum_T_N_sum_fun$ T_N_sum$) T_N_sum$)
(declare-fun fun_app$p (T_N_sum_set_T_N_sum_set_fun$ T_N_sum_set$) T_N_sum_set$)
(declare-fun fun_app$q (N_T_dtree_sum_fun$ N$) T_dtree_sum$)
(declare-fun fun_app$r (T_dtree_sum_N_fun$ T_dtree_sum$) N$)
(declare-fun fun_app$s (T_N_sum_T_dtree_sum_fun$ T_N_sum$) T_dtree_sum$)
(declare-fun fun_app$t (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$) T_dtree_sum_T_dtree_sum_fun$)
(declare-fun fun_app$u (Dtree_T_sum_dtree_T_sum_fun$ Dtree_T_sum$) Dtree_T_sum$)
(declare-fun fun_app$v (Dtree_dtree_sum_dtree_dtree_sum_fun$ Dtree_dtree_sum$) Dtree_dtree_sum$)
(declare-fun fun_app$w (T_T_set_sum_T_T_set_sum_fun$ T_T_set_sum$) T_T_set_sum$)
(declare-fun fun_app$x (T_set_T_sum_T_set_T_sum_fun$ T_set_T_sum$) T_set_T_sum$)
(declare-fun fun_app$y (T_set_dtree_sum_T_set_dtree_sum_fun$ T_set_dtree_sum$) T_set_dtree_sum$)
(declare-fun fun_app$z (Dtree_T_set_sum_dtree_T_set_sum_fun$ Dtree_T_set_sum$) Dtree_T_set_sum$)
(declare-fun hsubst_c$ (Dtree$ Dtree$) T_dtree_sum_set$)
(declare-fun hsubst_r$ (Dtree$) N$)
(declare-fun map_sum$a (T_T_fun$ T_T_fun$) T_T_sum_T_T_sum_fun$)
(declare-fun map_sum$b (T_T_fun$) Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$)
(declare-fun map_sum$c (Dtree_dtree_fun$ T_T_fun$) Dtree_T_sum_dtree_T_sum_fun$)
(declare-fun map_sum$d (Dtree_dtree_fun$ Dtree_dtree_fun$) Dtree_dtree_sum_dtree_dtree_sum_fun$)
(declare-fun map_sum$e (T_T_fun$ T_set_T_set_fun$) T_T_set_sum_T_T_set_sum_fun$)
(declare-fun map_sum$f (T_set_T_set_fun$ T_T_fun$) T_set_T_sum_T_set_T_sum_fun$)
(declare-fun map_sum$g (T_set_T_set_fun$ Dtree_dtree_fun$) T_set_dtree_sum_T_set_dtree_sum_fun$)
(declare-fun map_sum$h (Dtree_dtree_fun$ T_set_T_set_fun$) Dtree_T_set_sum_dtree_T_set_sum_fun$)
(declare-fun map_sum$i (T_T_fun$ T_dtree_sum_T_dtree_sum_fun$) T_T_dtree_sum_sum_T_T_dtree_sum_sum_fun$)
(declare-fun map_sum$j (T_T_fun$ T_T_sum_T_T_sum_fun$) T_T_T_sum_sum_T_T_T_sum_sum_fun$)
(declare-fun fun_app$aa (T_T_dtree_sum_sum_T_T_dtree_sum_sum_fun$ T_T_dtree_sum_sum$) T_T_dtree_sum_sum$)
(declare-fun fun_app$ab (T_T_T_sum_sum_T_T_T_sum_sum_fun$ T_T_T_sum_sum$) T_T_T_sum_sum$)
(assert (! (not (= (image$ (fun_app$ (map_sum$ id$) root$) (cont$ tr$)) tns$)) :named a0))
(assert (! (= tr$a (fun_app$a (hsubst$ tr$) tr$)) :named a1))
(assert (! (= (fun_app$b root$ tr$) n$) :named a2))
(assert (! (= (image$a id$) id$a) :named a3))
(assert (! (= (image$b id$b) id$c) :named a4))
(assert (! (= (image$c id$d) id$e) :named a5))
(assert (! (= (image$d id$f) id$g) :named a6))
(assert (! (= (image$e id$a) id$h) :named a7))
(assert (! (= (image$f id$i) id$j) :named a8))
(assert (! (= (image$g id$k) id$l) :named a9))
(assert (! (= (image$h id$c) id$m) :named a10))
(assert (! (= (image$i id$e) id$n) :named a11))
(assert (! (= (image$j id$g) id$o) :named a12))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$c id$ ?v0) ?v0) :pattern ((fun_app$c id$ ?v0)))) :named a13))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$a id$d ?v0) ?v0) :pattern ((fun_app$a id$d ?v0)))) :named a14))
(assert (! (forall ((?v0 T_set$)) (! (= (fun_app$d id$a ?v0) ?v0) :pattern ((fun_app$d id$a ?v0)))) :named a15))
(assert (! (forall ((?v0 T_dtree_sum$)) (! (= (fun_app$e id$b ?v0) ?v0) :pattern ((fun_app$e id$b ?v0)))) :named a16))
(assert (! (forall ((?v0 T_T_sum$)) (! (= (fun_app$f id$i ?v0) ?v0) :pattern ((fun_app$f id$i ?v0)))) :named a17))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (! (= (fun_app$g id$c ?v0) ?v0) :pattern ((fun_app$g id$c ?v0)))) :named a18))
(assert (! (forall ((?v0 N$)) (! (= (fun_app$h id$f ?v0) ?v0) :pattern ((fun_app$h id$f ?v0)))) :named a19))
(assert (! (forall ((?v0 Dtree_set$)) (! (= (fun_app$i id$e ?v0) ?v0) :pattern ((fun_app$i id$e ?v0)))) :named a20))
(assert (! (forall ((?v0 N_set$)) (! (= (fun_app$j id$g ?v0) ?v0) :pattern ((fun_app$j id$g ?v0)))) :named a21))
(assert (! (forall ((?v0 T_set_set$)) (! (= (fun_app$k id$h ?v0) ?v0) :pattern ((fun_app$k id$h ?v0)))) :named a22))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (fun_app$j (image$d ?v1) ?v3)))) :named a23))
(assert (! (forall ((?v0 N$) (?v1 T_N_sum_N_fun$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= ?v0 (fun_app$l ?v1 ?v2)) (member$a ?v2 ?v3)) (member$ ?v0 (image$k ?v1 ?v3)))) :named a24))
(assert (! (forall ((?v0 T_N_sum$) (?v1 N_T_N_sum_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$m ?v1 ?v2)) (member$ ?v2 ?v3)) (member$a ?v0 (image$l ?v1 ?v3)))) :named a25))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$e ?v1 ?v2)) (member$b ?v2 ?v3)) (member$b ?v0 (fun_app$g (image$b ?v1) ?v3)))) :named a26))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_dtree_sum_T_N_sum_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$n ?v1 ?v2)) (member$b ?v2 ?v3)) (member$a ?v0 (image$ ?v1 ?v3)))) :named a27))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_T_N_sum_fun$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= ?v0 (fun_app$o ?v1 ?v2)) (member$a ?v2 ?v3)) (member$a ?v0 (fun_app$p (image$g ?v1) ?v3)))) :named a28))
(assert (! (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T$) (?v3 T_set$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v2)) (member$c ?v2 ?v3)) (member$c ?v0 (fun_app$d (image$a ?v1) ?v3)))) :named a29))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 N_T_dtree_sum_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$q ?v1 ?v2)) (member$ ?v2 ?v3)) (member$b ?v0 (image$m ?v1 ?v3)))) :named a30))
(assert (! (forall ((?v0 N$) (?v1 T_dtree_sum_N_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$r ?v1 ?v2)) (member$b ?v2 ?v3)) (member$ ?v0 (image$n ?v1 ?v3)))) :named a31))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_N_sum_T_dtree_sum_fun$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= ?v0 (fun_app$s ?v1 ?v2)) (member$a ?v2 ?v3)) (member$b ?v0 (image$o ?v1 ?v3)))) :named a32))
(assert (! (forall ((?v0 T_T_sum$)) (= (fun_app$f (map_sum$a id$ id$) ?v0) ?v0)) :named a33))
(assert (! (forall ((?v0 T_dtree_sum$)) (= (fun_app$e (fun_app$t (map_sum$b id$) id$d) ?v0) ?v0)) :named a34))
(assert (! (forall ((?v0 Dtree_T_sum$)) (= (fun_app$u (map_sum$c id$d id$) ?v0) ?v0)) :named a35))
(assert (! (forall ((?v0 Dtree_dtree_sum$)) (= (fun_app$v (map_sum$d id$d id$d) ?v0) ?v0)) :named a36))
(assert (! (forall ((?v0 T_T_set_sum$)) (= (fun_app$w (map_sum$e id$ id$a) ?v0) ?v0)) :named a37))
(assert (! (forall ((?v0 T_set_T_sum$)) (= (fun_app$x (map_sum$f id$a id$) ?v0) ?v0)) :named a38))
(assert (! (forall ((?v0 T_set_dtree_sum$)) (= (fun_app$y (map_sum$g id$a id$d) ?v0) ?v0)) :named a39))
(assert (! (forall ((?v0 Dtree_T_set_sum$)) (= (fun_app$z (map_sum$h id$d id$a) ?v0) ?v0)) :named a40))
(assert (! (forall ((?v0 T_T_dtree_sum_sum$)) (= (fun_app$aa (map_sum$i id$ id$b) ?v0) ?v0)) :named a41))
(assert (! (forall ((?v0 T_T_T_sum_sum$)) (= (fun_app$ab (map_sum$j id$ id$i) ?v0) ?v0)) :named a42))
(assert (! (= (map_sum$a id$ id$) id$i) :named a43))
(assert (! (= (fun_app$t (map_sum$b id$) id$d) id$b) :named a44))
(assert (! (= (map_sum$c id$d id$) id$p) :named a45))
(assert (! (= (map_sum$d id$d id$d) id$q) :named a46))
(assert (! (= (map_sum$e id$ id$a) id$r) :named a47))
(assert (! (= (map_sum$f id$a id$) id$s) :named a48))
(assert (! (= (map_sum$g id$a id$d) id$t) :named a49))
(assert (! (= (map_sum$h id$d id$a) id$u) :named a50))
(assert (! (= (map_sum$i id$ id$b) id$v) :named a51))
(assert (! (= (map_sum$j id$ id$i) id$w) :named a52))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (= (fun_app$b root$ ?v0) (fun_app$b root$ ?v1)) (= (cont$ ?v0) (cont$ ?v1))) (= ?v0 ?v1))) :named a53))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (! (= (hsubst_c$ ?v0 ?v1) (ite (= (fun_app$b root$ ?v1) (fun_app$b root$ ?v0)) (cont$ ?v0) (cont$ ?v1))) :pattern ((hsubst_c$ ?v0 ?v1)))) :named a54))
(assert (! (forall ((?v0 Dtree$) (?v1 N$)) (! (= (h_c$ ?v0 ?v1) (image$ (fun_app$ (map_sum$ id$) root$) (cont$ (pick$ ?v0 ?v1)))) :pattern ((h_c$ ?v0 ?v1)))) :named a55))
(assert (! (forall ((?v0 Dtree$)) (! (= (hsubst_r$ ?v0) (fun_app$b root$ ?v0)) :pattern ((hsubst_r$ ?v0)))) :named a56))
(assert (! (forall ((?v0 N$) (?v1 Dtree$)) (=> (member$a (inr$ ?v0) (image$ (fun_app$ (map_sum$ id$) root$) (cont$ ?v1))) (= (fun_app$b root$ (subtrOf$ ?v1 ?v0)) ?v0))) :named a57))
(assert (! (forall ((?v0 Dtree$)) (= (fun_app$b root$ (rcut$ ?v0)) (fun_app$b root$ ?v0))) :named a58))
(assert (! (member$ n$ ns$) :named a59))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (fun_app$b root$ (fun_app$a (hsubst$ ?v0) ?v1)) (fun_app$b root$ ?v1))) :named a60))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (not (= (fun_app$b root$ ?v0) (fun_app$b root$ ?v1))) (= (cont$ (fun_app$a (hsubst$ ?v1) ?v0)) (fun_app$g (image$b (fun_app$t (map_sum$b id$) (hsubst$ ?v1))) (cont$ ?v0))))) :named a61))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (fun_app$b root$ ?v0) (fun_app$b root$ ?v1)) (= (cont$ (fun_app$a (hsubst$ ?v1) ?v0)) (fun_app$g (image$b (fun_app$t (map_sum$b id$) (hsubst$ ?v1))) (cont$ ?v1))))) :named a62))
(check-sat)
;(get-unsat-core)
