; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 177
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-datatypes () ((N_list$ (nil$) (cons$ (hd$ N$) (tl$ N_list$)))))
(declare-fun f$ () N_dtree_fun$)
(declare-fun nl$ () N_list$)
(declare-fun tr$ () Dtree$)
(declare-fun nsa$ () N_set$)
(declare-fun reg$ (N_dtree_fun$ Dtree$) Bool)
(declare-fun set$ (N_list$) N_set$)
(declare-fun tr2$ () Dtree$)
(declare-fun tra$ () Dtree$)
(declare-fun last$ (N_list$) N$)
(declare-fun path$ (N_dtree_fun$ N_list$) Bool)
(declare-fun root$ (Dtree$) N$)
(declare-fun tr1a$ () Dtree$)
(declare-fun subtr$ (N_set$ Dtree$ Dtree$) Bool)
(declare-fun member$ (N$ N_set$) Bool)
(declare-fun fun_app$ (N_dtree_fun$ N$) Dtree$)
(declare-fun less_eq$ (N_set$ N_set$) Bool)
(assert (! (not (and (path$ f$ (cons$ (root$ tra$) nl$)) (and (= (fun_app$ f$ (hd$ (cons$ (root$ tra$) nl$))) tra$) (and (= (fun_app$ f$ (last$ (cons$ (root$ tra$) nl$))) tr2$) (less_eq$ (set$ (cons$ (root$ tra$) nl$)) nsa$))))) :named a0))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree$)) (=> (reg$ ?v0 ?v1) (= (fun_app$ ?v0 (root$ ?v1)) ?v1))) :named a1))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (=> (path$ ?v0 ?v1) (not (= ?v1 nil$)))) :named a2))
(assert (! (reg$ f$ tra$) :named a3))
(assert (! (path$ f$ nl$) :named a4))
(assert (! (member$ (root$ tra$) nsa$) :named a5))
(assert (! (reg$ f$ tr$) :named a6))
(assert (! (less_eq$ (set$ nl$) nsa$) :named a7))
(assert (! (reg$ f$ tra$) :named a8))
(assert (! (= (fun_app$ f$ (last$ nl$)) tr2$) :named a9))
(assert (! (path$ f$ (cons$ (root$ tra$) nl$)) :named a10))
(assert (! (= (fun_app$ f$ (hd$ nl$)) tr1a$) :named a11))
(assert (! (=> (reg$ f$ tr1a$) (exists ((?v0 N_list$)) (and (path$ f$ ?v0) (and (= (fun_app$ f$ (hd$ ?v0)) tr1a$) (and (= (fun_app$ f$ (last$ ?v0)) tr2$) (less_eq$ (set$ ?v0) nsa$)))))) :named a12))
(assert (! (=> (forall ((?v0 N_list$)) (=> (and (path$ f$ ?v0) (and (= (fun_app$ f$ (hd$ ?v0)) tr1a$) (and (= (fun_app$ f$ (last$ ?v0)) tr2$) (less_eq$ (set$ ?v0) nsa$)))) false)) false) :named a13))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N$) (?v2 N_list$)) (=> (and (path$ ?v0 (cons$ ?v1 ?v2)) (not (= ?v2 nil$))) (path$ ?v0 ?v2))) :named a14))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N$)) (path$ ?v0 (cons$ ?v1 nil$))) :named a15))
(assert (! (subtr$ nsa$ tr2$ tr1a$) :named a16))
(assert (! (forall ((?v0 N_list$) (?v1 N$)) (less_eq$ (set$ ?v0) (set$ (cons$ ?v1 ?v0)))) :named a17))
(check-sat)
;(get-unsat-core)
