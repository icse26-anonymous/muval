; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 490
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-datatypes () ((N_list$ (nil$) (cons$ (hd$ N$) (tl$ N_list$)))
  (T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun f$ () N_dtree_fun$)
(declare-fun n$ () N$)
(declare-fun t$ () T$)
(declare-fun n1$ () N$)
(declare-fun nl$ () N_list$)
(declare-fun ns$ () N_set$)
(declare-fun tr$ () Dtree$)
(declare-fun nl1$ () N_list$)
(declare-fun nl2$ () N_list$)
(declare-fun reg$ (N_dtree_fun$ Dtree$) Bool)
(declare-fun set$ (N_list$) N_set$)
(declare-fun tr1$ () Dtree$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun last$ (N_list$) N$)
(declare-fun path$ (N_dtree_fun$ N_list$) Bool)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun fun_app$ (N_dtree_fun$ N$) Dtree$)
(declare-fun less_eq$ (N_set$ N_set$) Bool)
(declare-fun member$a (N$ N_set$) Bool)
(declare-fun distinct$ (N_list$) Bool)
(declare-fun less_eq$a (T_dtree_sum_set$ T_dtree_sum_set$) Bool)
(assert (! (not (exists ((?v0 N_list$) (?v1 Dtree$)) (and (distinct$ ?v0) (and (path$ f$ ?v0) (and (= (fun_app$ f$ (hd$ ?v0)) (fun_app$ f$ n1$)) (and (= (fun_app$ f$ (last$ ?v0)) ?v1) (and (less_eq$ (set$ ?v0) (set$ nl1$)) (member$ (inl$ t$) (cont$ ?v1))))))))) :named a0))
(assert (! (distinct$ nl$) :named a1))
(assert (! (member$ (inl$ t$) (cont$ tr1$)) :named a2))
(assert (! (path$ f$ nl$) :named a3))
(assert (! (path$ f$ nl1$) :named a4))
(assert (! (= (hd$ nl1$) n1$) :named a5))
(assert (! (not (member$a n$ (set$ nl1$))) :named a6))
(assert (! (= (fun_app$ f$ (last$ nl$)) tr1$) :named a7))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (=> (path$ ?v0 ?v1) (exists ((?v2 N_list$)) (and (path$ ?v0 ?v2) (and (= (hd$ ?v2) (hd$ ?v1)) (and (= (last$ ?v2) (last$ ?v1)) (and (less_eq$ (set$ ?v2) (set$ ?v1)) (distinct$ ?v2)))))))) :named a8))
(assert (! (= nl1$ (cons$ n1$ nl2$)) :named a9))
(assert (! (reg$ f$ (fun_app$ f$ n1$)) :named a10))
(assert (! (= (last$ nl1$) (last$ nl$)) :named a11))
(assert (! (less_eq$ (set$ nl$) ns$) :named a12))
(assert (! (=> (forall ((?v0 N_list$) (?v1 Dtree$)) (=> (and (distinct$ ?v0) (and (path$ f$ ?v0) (and (= (fun_app$ f$ (hd$ ?v0)) tr$) (and (= (fun_app$ f$ (last$ ?v0)) ?v1) (and (less_eq$ (set$ ?v0) ns$) (member$ (inl$ t$) (cont$ ?v1))))))) false)) false) :named a13))
(assert (! (= (fun_app$ f$ (hd$ nl$)) tr$) :named a14))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a15))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$)) (=> (forall ((?v2 T_dtree_sum$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))) (less_eq$a ?v0 ?v1))) :named a17))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (=> (forall ((?v2 N$)) (=> (member$a ?v2 ?v0) (member$a ?v2 ?v1))) (less_eq$ ?v0 ?v1))) :named a18))
(check-sat)
;(get-unsat-core)
