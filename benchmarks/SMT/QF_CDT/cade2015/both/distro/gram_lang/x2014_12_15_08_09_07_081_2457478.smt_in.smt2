; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 73
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort N_N_fun$ 0)
(declare-sort N_T_fun$ 0)
(declare-sort T_N_fun$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort Dtree_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort Dtree_N_fun$ 0)
(declare-sort Dtree_T_fun$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort T_dtree_fun$ 0)
(declare-sort Dtree_bool_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort N_T_dtree_sum_fun$ 0)
(declare-sort T_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_N_fun$ 0)
(declare-sort Dtree_N_bool_fun_fun$ 0)
(declare-sort Dtree_T_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort Dtree_T_dtree_sum_fun$ 0)
(declare-sort Dtree_dtree_bool_fun_fun$ 0)
(declare-sort Dtree_T_dtree_sum_set_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0)
(declare-sort Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun tr$ () Dtree$)
(declare-fun uu$ () Dtree_T_dtree_sum_fun$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun tr0$ () Dtree$)
(declare-fun tra$ () Dtree$)
(declare-fun uua$ (N_set$) N_bool_fun$)
(declare-fun uub$ (T_dtree_sum_set$) T_dtree_sum_bool_fun$)
(declare-fun uuc$ () T_T_dtree_sum_fun$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun node$ (N$ T_dtree_sum_set$) Dtree$)
(declare-fun root$ () Dtree_N_fun$)
(declare-fun tr1a$ () Dtree$)
(declare-fun image$ (Dtree_dtree_fun$ Dtree_set$) Dtree_set$)
(declare-fun inFr2$ (N_set$) Dtree_T_bool_fun_fun$)
(declare-fun inItr$ (N_set$) Dtree_N_bool_fun_fun$)
(declare-fun subtr$ (N_set$) Dtree_dtree_bool_fun_fun$)
(declare-fun finite$ (T_dtree_sum_set$) Bool)
(declare-fun hsubst$ (Dtree$) Dtree_dtree_fun$)
(declare-fun image$a (N_N_fun$ N_set$) N_set$)
(declare-fun image$b (N_T_dtree_sum_fun$ N_set$) T_dtree_sum_set$)
(declare-fun image$c (T_dtree_sum_N_fun$ T_dtree_sum_set$) N_set$)
(declare-fun image$d (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun image$e (N_T_fun$ N_set$) T_set$)
(declare-fun image$f (N_dtree_fun$ N_set$) Dtree_set$)
(declare-fun image$g (T_N_fun$ T_set$) N_set$)
(declare-fun image$h (T_T_fun$ T_set$) T_set$)
(declare-fun image$i (T_dtree_fun$ T_set$) Dtree_set$)
(declare-fun image$j (Dtree_N_fun$ Dtree_set$) N_set$)
(declare-fun image$k (Dtree_T_fun$ Dtree_set$) T_set$)
(declare-fun inj_on$ (Dtree_N_fun$ Dtree_set$) Bool)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun unfold$ (Dtree_N_fun$) Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$)
(declare-fun vimage$ (Dtree_T_dtree_sum_fun$ T_dtree_sum_set$) Dtree_set$)
(declare-fun collect$ (T_dtree_sum_bool_fun$) T_dtree_sum_set$)
(declare-fun fun_app$ (Dtree_T_dtree_sum_fun$ Dtree$) T_dtree_sum$)
(declare-fun inj_on$a (Dtree_dtree_fun$ Dtree_set$) Bool)
(declare-fun member$a (N$ N_set$) Bool)
(declare-fun member$b (Dtree$ Dtree_set$) Bool)
(declare-fun member$c (T$ T_set$) Bool)
(declare-fun subtrOf$ (Dtree$) N_dtree_fun$)
(declare-fun vimage$a (N_N_fun$ N_set$) N_set$)
(declare-fun vimage$b (N_T_dtree_sum_fun$ T_dtree_sum_set$) N_set$)
(declare-fun vimage$c (T_dtree_sum_N_fun$ N_set$) T_dtree_sum_set$)
(declare-fun vimage$d (T_T_dtree_sum_fun$ T_dtree_sum_set$) T_set$)
(declare-fun vimage$e (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun vimage$f (N_T_fun$ T_set$) N_set$)
(declare-fun vimage$g (N_dtree_fun$ Dtree_set$) N_set$)
(declare-fun vimage$h (T_N_fun$ N_set$) T_set$)
(declare-fun vimage$i (T_T_fun$ T_set$) T_set$)
(declare-fun vimage$j (Dtree_N_fun$ N_set$) Dtree_set$)
(declare-fun vimage$k (T_dtree_fun$ Dtree_set$) T_set$)
(declare-fun vimage$l (Dtree_T_fun$ T_set$) Dtree_set$)
(declare-fun vimage$m (Dtree_dtree_fun$ Dtree_set$) Dtree_set$)
(declare-fun collect$a (Dtree_bool_fun$) Dtree_set$)
(declare-fun collect$b (T_bool_fun$) T_set$)
(declare-fun collect$c (N_bool_fun$) N_set$)
(declare-fun fun_app$a (T_T_dtree_sum_fun$ T$) T_dtree_sum$)
(declare-fun fun_app$b (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun fun_app$c (N_bool_fun$ N$) Bool)
(declare-fun fun_app$d (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$e (Dtree_N_fun$ Dtree$) N$)
(declare-fun fun_app$f (Dtree_T_dtree_sum_set_fun$ Dtree$) T_dtree_sum_set$)
(declare-fun fun_app$g (N_N_fun$ N$) N$)
(declare-fun fun_app$h (N_T_dtree_sum_fun$ N$) T_dtree_sum$)
(declare-fun fun_app$i (T_dtree_sum_N_fun$ T_dtree_sum$) N$)
(declare-fun fun_app$j (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$) T_dtree_sum$)
(declare-fun fun_app$k (N_T_fun$ N$) T$)
(declare-fun fun_app$l (N_dtree_fun$ N$) Dtree$)
(declare-fun fun_app$m (T_N_fun$ T$) N$)
(declare-fun fun_app$n (T_T_fun$ T$) T$)
(declare-fun fun_app$o (T_bool_fun$ T$) Bool)
(declare-fun fun_app$p (Dtree_T_bool_fun_fun$ Dtree$) T_bool_fun$)
(declare-fun fun_app$q (T_dtree_fun$ T$) Dtree$)
(declare-fun fun_app$r (Dtree_T_fun$ Dtree$) T$)
(declare-fun fun_app$s (Dtree_bool_fun$ Dtree$) Bool)
(declare-fun fun_app$t (Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ Dtree_T_dtree_sum_set_fun$) Dtree_dtree_fun$)
(declare-fun fun_app$u (Dtree_dtree_bool_fun_fun$ Dtree$) Dtree_bool_fun$)
(declare-fun fun_app$v (Dtree_N_bool_fun_fun$ Dtree$) N_bool_fun$)
(declare-fun hsubst_c$ (Dtree$) Dtree_T_dtree_sum_set_fun$)
(declare-fun hsubst_r$ () Dtree_N_fun$)
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$ uu$ ?v0) (inr$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$a uuc$ ?v0) (inl$ ?v0)) :pattern ((fun_app$a uuc$ ?v0)))) :named a1))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum$)) (! (= (fun_app$b (uub$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$b (uub$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 N_set$) (?v1 N$)) (! (= (fun_app$c (uua$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$c (uua$ ?v0) ?v1)))) :named a3))
(assert (! (not (inj_on$ root$ (vimage$ uu$ (cont$ (fun_app$d (hsubst$ tr0$) tra$))))) :named a4))
(assert (! (wf$ tr$) :named a5))
(assert (! (wf$ tr0$) :named a6))
(assert (! (forall ((?v0 Dtree$)) (=> (= (fun_app$e root$ ?v0) (fun_app$e root$ tr0$)) (= (fun_app$d (hsubst$ tr0$) ?v0) (fun_app$d (hsubst$ tr0$) tr0$)))) :named a7))
(assert (! (wf$ tra$) :named a8))
(assert (! (= tr1a$ (fun_app$d (hsubst$ tr0$) tra$)) :named a9))
(assert (! (forall ((?v0 Dtree$)) (= (fun_app$e root$ (fun_app$d (hsubst$ tr0$) ?v0)) (fun_app$e root$ ?v0))) :named a10))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$f (hsubst_c$ tr0$) ?v0) (ite (= (fun_app$e root$ ?v0) (fun_app$e root$ tr0$)) (cont$ tr0$) (cont$ ?v0))) :pattern ((fun_app$f (hsubst_c$ tr0$) ?v0)))) :named a11))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (fun_app$e root$ (fun_app$d (hsubst$ ?v0) ?v1)) (fun_app$e root$ ?v1))) :named a12))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (fun_app$e root$ ?v0) (fun_app$e root$ ?v1)) (= (fun_app$d (hsubst$ ?v1) ?v0) (fun_app$d (hsubst$ ?v1) ?v1)))) :named a13))
(assert (! (exists ((?v0 Dtree$)) (and (wf$ ?v0) (= tr1a$ (fun_app$d (hsubst$ tr0$) ?v0)))) :named a14))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (= (member$a ?v0 (vimage$a ?v1 ?v2)) (member$a (fun_app$g ?v1 ?v0) ?v2))) :named a15))
(assert (! (forall ((?v0 N$) (?v1 N_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$a ?v0 (vimage$b ?v1 ?v2)) (member$ (fun_app$h ?v1 ?v0) ?v2))) :named a16))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_N_fun$) (?v2 N_set$)) (= (member$ ?v0 (vimage$c ?v1 ?v2)) (member$a (fun_app$i ?v1 ?v0) ?v2))) :named a17))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$b ?v0 (vimage$ ?v1 ?v2)) (member$ (fun_app$ ?v1 ?v0) ?v2))) :named a18))
(assert (! (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$c ?v0 (vimage$d ?v1 ?v2)) (member$ (fun_app$a ?v1 ?v0) ?v2))) :named a19))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$ ?v0 (vimage$e ?v1 ?v2)) (member$ (fun_app$j ?v1 ?v0) ?v2))) :named a20))
(assert (! (forall ((?v0 N$) (?v1 N_T_fun$) (?v2 T_set$)) (= (member$a ?v0 (vimage$f ?v1 ?v2)) (member$c (fun_app$k ?v1 ?v0) ?v2))) :named a21))
(assert (! (forall ((?v0 N$) (?v1 N_dtree_fun$) (?v2 Dtree_set$)) (= (member$a ?v0 (vimage$g ?v1 ?v2)) (member$b (fun_app$l ?v1 ?v0) ?v2))) :named a22))
(assert (! (forall ((?v0 T$) (?v1 T_N_fun$) (?v2 N_set$)) (= (member$c ?v0 (vimage$h ?v1 ?v2)) (member$a (fun_app$m ?v1 ?v0) ?v2))) :named a23))
(assert (! (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T_set$)) (= (member$c ?v0 (vimage$i ?v1 ?v2)) (member$c (fun_app$n ?v1 ?v0) ?v2))) :named a24))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$g ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$a ?v1 (vimage$a ?v0 ?v3)))) :named a25))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$) (?v1 T_dtree_sum$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$i ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$ ?v1 (vimage$c ?v0 ?v3)))) :named a26))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$) (?v1 N$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$h ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$a ?v1 (vimage$b ?v0 ?v3)))) :named a27))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$) (?v1 Dtree$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$ ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$b ?v1 (vimage$ ?v0 ?v3)))) :named a28))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$a ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$c ?v1 (vimage$d ?v0 ?v3)))) :named a29))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$j ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$ ?v1 (vimage$e ?v0 ?v3)))) :named a30))
(assert (! (forall ((?v0 T_N_fun$) (?v1 T$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$m ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$c ?v1 (vimage$h ?v0 ?v3)))) :named a31))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$e ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$b ?v1 (vimage$j ?v0 ?v3)))) :named a32))
(assert (! (forall ((?v0 N_T_fun$) (?v1 N$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$k ?v0 ?v1) ?v2) (member$c ?v2 ?v3)) (member$a ?v1 (vimage$f ?v0 ?v3)))) :named a33))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$n ?v0 ?v1) ?v2) (member$c ?v2 ?v3)) (member$c ?v1 (vimage$i ?v0 ?v3)))) :named a34))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a35))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a36))
(assert (! (forall ((?v0 Dtree$)) (=> (= (fun_app$e root$ ?v0) (fun_app$e root$ tr0$)) (= (vimage$ uu$ (cont$ (fun_app$d (hsubst$ tr0$) ?v0))) (image$ (hsubst$ tr0$) (vimage$ uu$ (cont$ tr0$)))))) :named a37))
(assert (! (forall ((?v0 Dtree$)) (=> (not (= (fun_app$e root$ ?v0) (fun_app$e root$ tr0$))) (= (vimage$ uu$ (cont$ (fun_app$d (hsubst$ tr0$) ?v0))) (image$ (hsubst$ tr0$) (vimage$ uu$ (cont$ ?v0)))))) :named a38))
(assert (! (forall ((?v0 Dtree$)) (=> (wf$ ?v0) (inj_on$ root$ (vimage$ uu$ (cont$ ?v0))))) :named a39))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (= (fun_app$e root$ ?v0) (fun_app$e root$ ?v1)) (= (cont$ ?v0) (cont$ ?v1))) (= ?v0 ?v1))) :named a40))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (fun_app$o (fun_app$p (inFr2$ ?v0) ?v1) ?v2) (and (member$a (fun_app$e root$ ?v3) ?v0) (member$ (inr$ ?v1) (cont$ ?v3)))) (fun_app$o (fun_app$p (inFr2$ ?v0) ?v3) ?v2))) :named a41))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (and (member$ (inr$ ?v1) (cont$ ?v0)) (member$ (inr$ ?v2) (cont$ ?v0)))) (= (= (fun_app$e root$ ?v1) (fun_app$e root$ ?v2)) (= ?v1 ?v2)))) :named a42))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (fun_app$e root$ ?v0) (fun_app$e root$ ?v1)) (= (vimage$ uu$ (cont$ (fun_app$d (hsubst$ ?v1) ?v0))) (image$ (hsubst$ ?v1) (vimage$ uu$ (cont$ ?v1)))))) :named a43))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v2)) (member$b ?v2 ?v3)) (member$b ?v0 (image$ ?v1 ?v3)))) :named a44))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$g ?v1 ?v2)) (member$a ?v2 ?v3)) (member$a ?v0 (image$a ?v1 ?v3)))) :named a45))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 N_T_dtree_sum_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (member$a ?v2 ?v3)) (member$ ?v0 (image$b ?v1 ?v3)))) :named a46))
(assert (! (forall ((?v0 N$) (?v1 T_dtree_sum_N_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$i ?v1 ?v2)) (member$ ?v2 ?v3)) (member$a ?v0 (image$c ?v1 ?v3)))) :named a47))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$j ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (image$d ?v1 ?v3)))) :named a48))
(assert (! (forall ((?v0 T$) (?v1 N_T_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (member$a ?v2 ?v3)) (member$c ?v0 (image$e ?v1 ?v3)))) :named a49))
(assert (! (forall ((?v0 Dtree$) (?v1 N_dtree_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$l ?v1 ?v2)) (member$a ?v2 ?v3)) (member$b ?v0 (image$f ?v1 ?v3)))) :named a50))
(assert (! (forall ((?v0 N$) (?v1 T_N_fun$) (?v2 T$) (?v3 T_set$)) (=> (and (= ?v0 (fun_app$m ?v1 ?v2)) (member$c ?v2 ?v3)) (member$a ?v0 (image$g ?v1 ?v3)))) :named a51))
(assert (! (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T$) (?v3 T_set$)) (=> (and (= ?v0 (fun_app$n ?v1 ?v2)) (member$c ?v2 ?v3)) (member$c ?v0 (image$h ?v1 ?v3)))) :named a52))
(assert (! (forall ((?v0 Dtree$) (?v1 T_dtree_fun$) (?v2 T$) (?v3 T_set$)) (=> (and (= ?v0 (fun_app$q ?v1 ?v2)) (member$c ?v2 ?v3)) (member$b ?v0 (image$i ?v1 ?v3)))) :named a53))
(assert (! (=> (forall ((?v0 Dtree$)) (=> (and (wf$ ?v0) (= tr1a$ (fun_app$d (hsubst$ tr0$) ?v0))) false)) false) :named a54))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_set$)) (= (member$b ?v0 (image$ ?v1 ?v2)) (exists ((?v3 Dtree$)) (and (member$b ?v3 ?v2) (= ?v0 (fun_app$d ?v1 ?v3)))))) :named a55))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (= (member$a ?v0 (image$a ?v1 ?v2)) (exists ((?v3 N$)) (and (member$a ?v3 ?v2) (= ?v0 (fun_app$g ?v1 ?v3)))))) :named a56))
(assert (! (forall ((?v0 N$) (?v1 T_dtree_sum_N_fun$) (?v2 T_dtree_sum_set$)) (= (member$a ?v0 (image$c ?v1 ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$i ?v1 ?v3)))))) :named a57))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 N_T_dtree_sum_fun$) (?v2 N_set$)) (= (member$ ?v0 (image$b ?v1 ?v2)) (exists ((?v3 N$)) (and (member$a ?v3 ?v2) (= ?v0 (fun_app$h ?v1 ?v3)))))) :named a58))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$ ?v0 (image$d ?v1 ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$j ?v1 ?v3)))))) :named a59))
(assert (! (forall ((?v0 N$) (?v1 T_N_fun$) (?v2 T_set$)) (= (member$a ?v0 (image$g ?v1 ?v2)) (exists ((?v3 T$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$m ?v1 ?v3)))))) :named a60))
(assert (! (forall ((?v0 N$) (?v1 Dtree_N_fun$) (?v2 Dtree_set$)) (= (member$a ?v0 (image$j ?v1 ?v2)) (exists ((?v3 Dtree$)) (and (member$b ?v3 ?v2) (= ?v0 (fun_app$e ?v1 ?v3)))))) :named a61))
(assert (! (forall ((?v0 T$) (?v1 N_T_fun$) (?v2 N_set$)) (= (member$c ?v0 (image$e ?v1 ?v2)) (exists ((?v3 N$)) (and (member$a ?v3 ?v2) (= ?v0 (fun_app$k ?v1 ?v3)))))) :named a62))
(assert (! (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T_set$)) (= (member$c ?v0 (image$h ?v1 ?v2)) (exists ((?v3 T$)) (and (member$c ?v3 ?v2) (= ?v0 (fun_app$n ?v1 ?v3)))))) :named a63))
(assert (! (forall ((?v0 T$) (?v1 Dtree_T_fun$) (?v2 Dtree_set$)) (= (member$c ?v0 (image$k ?v1 ?v2)) (exists ((?v3 Dtree$)) (and (member$b ?v3 ?v2) (= ?v0 (fun_app$r ?v1 ?v3)))))) :named a64))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_T_dtree_sum_fun$) (?v3 N_T_dtree_sum_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 N$)) (=> (member$a ?v4 ?v1) (= (fun_app$h ?v2 ?v4) (fun_app$h ?v3 ?v4))))) (= (image$b ?v2 ?v0) (image$b ?v3 ?v1)))) :named a65))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_N_fun$) (?v3 N_N_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 N$)) (=> (member$a ?v4 ?v1) (= (fun_app$g ?v2 ?v4) (fun_app$g ?v3 ?v4))))) (= (image$a ?v2 ?v0) (image$a ?v3 ?v1)))) :named a66))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_T_dtree_sum_fun$) (?v3 T_dtree_sum_T_dtree_sum_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 T_dtree_sum$)) (=> (member$ ?v4 ?v1) (= (fun_app$j ?v2 ?v4) (fun_app$j ?v3 ?v4))))) (= (image$d ?v2 ?v0) (image$d ?v3 ?v1)))) :named a67))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_N_fun$) (?v3 T_dtree_sum_N_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 T_dtree_sum$)) (=> (member$ ?v4 ?v1) (= (fun_app$i ?v2 ?v4) (fun_app$i ?v3 ?v4))))) (= (image$c ?v2 ?v0) (image$c ?v3 ?v1)))) :named a68))
(assert (! (forall ((?v0 Dtree_set$) (?v1 Dtree_set$) (?v2 Dtree_dtree_fun$) (?v3 Dtree_dtree_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 Dtree$)) (=> (member$b ?v4 ?v1) (= (fun_app$d ?v2 ?v4) (fun_app$d ?v3 ?v4))))) (= (image$ ?v2 ?v0) (image$ ?v3 ?v1)))) :named a69))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_set$) (?v2 Dtree_bool_fun$)) (=> (exists ((?v3 Dtree$)) (and (member$b ?v3 (image$ ?v0 ?v1)) (fun_app$s ?v2 ?v3))) (exists ((?v3 Dtree$)) (and (member$b ?v3 ?v1) (fun_app$s ?v2 (fun_app$d ?v0 ?v3)))))) :named a70))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N_set$) (?v2 N_bool_fun$)) (=> (exists ((?v3 N$)) (and (member$a ?v3 (image$a ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 N$)) (and (member$a ?v3 ?v1) (fun_app$c ?v2 (fun_app$g ?v0 ?v3)))))) :named a71))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$) (?v1 T_dtree_sum_set$) (?v2 N_bool_fun$)) (=> (exists ((?v3 N$)) (and (member$a ?v3 (image$c ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 ?v1) (fun_app$c ?v2 (fun_app$i ?v0 ?v3)))))) :named a72))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$) (?v1 N_set$) (?v2 T_dtree_sum_bool_fun$)) (=> (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 (image$b ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (exists ((?v3 N$)) (and (member$a ?v3 ?v1) (fun_app$b ?v2 (fun_app$h ?v0 ?v3)))))) :named a73))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_bool_fun$)) (=> (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 (image$d ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 ?v1) (fun_app$b ?v2 (fun_app$j ?v0 ?v3)))))) :named a74))
(assert (! (forall ((?v0 T_N_fun$) (?v1 T_set$) (?v2 N_bool_fun$)) (=> (exists ((?v3 N$)) (and (member$a ?v3 (image$g ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 T$)) (and (member$c ?v3 ?v1) (fun_app$c ?v2 (fun_app$m ?v0 ?v3)))))) :named a75))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_set$) (?v2 N_bool_fun$)) (=> (exists ((?v3 N$)) (and (member$a ?v3 (image$j ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (exists ((?v3 Dtree$)) (and (member$b ?v3 ?v1) (fun_app$c ?v2 (fun_app$e ?v0 ?v3)))))) :named a76))
(assert (! (forall ((?v0 N_T_fun$) (?v1 N_set$) (?v2 T_bool_fun$)) (=> (exists ((?v3 T$)) (and (member$c ?v3 (image$e ?v0 ?v1)) (fun_app$o ?v2 ?v3))) (exists ((?v3 N$)) (and (member$a ?v3 ?v1) (fun_app$o ?v2 (fun_app$k ?v0 ?v3)))))) :named a77))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_set$) (?v2 T_bool_fun$)) (=> (exists ((?v3 T$)) (and (member$c ?v3 (image$h ?v0 ?v1)) (fun_app$o ?v2 ?v3))) (exists ((?v3 T$)) (and (member$c ?v3 ?v1) (fun_app$o ?v2 (fun_app$n ?v0 ?v3)))))) :named a78))
(assert (! (forall ((?v0 Dtree_T_fun$) (?v1 Dtree_set$) (?v2 T_bool_fun$)) (=> (exists ((?v3 T$)) (and (member$c ?v3 (image$k ?v0 ?v1)) (fun_app$o ?v2 ?v3))) (exists ((?v3 Dtree$)) (and (member$b ?v3 ?v1) (fun_app$o ?v2 (fun_app$r ?v0 ?v3)))))) :named a79))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_set$) (?v2 Dtree_bool_fun$)) (=> (forall ((?v3 Dtree$)) (=> (member$b ?v3 (image$ ?v0 ?v1)) (fun_app$s ?v2 ?v3))) (forall ((?v3 Dtree$)) (=> (member$b ?v3 ?v1) (fun_app$s ?v2 (fun_app$d ?v0 ?v3)))))) :named a80))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N_set$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (=> (member$a ?v3 (image$a ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 N$)) (=> (member$a ?v3 ?v1) (fun_app$c ?v2 (fun_app$g ?v0 ?v3)))))) :named a81))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$) (?v1 T_dtree_sum_set$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (=> (member$a ?v3 (image$c ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 ?v1) (fun_app$c ?v2 (fun_app$i ?v0 ?v3)))))) :named a82))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$) (?v1 N_set$) (?v2 T_dtree_sum_bool_fun$)) (=> (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 (image$b ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (forall ((?v3 N$)) (=> (member$a ?v3 ?v1) (fun_app$b ?v2 (fun_app$h ?v0 ?v3)))))) :named a83))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_bool_fun$)) (=> (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 (image$d ?v0 ?v1)) (fun_app$b ?v2 ?v3))) (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 ?v1) (fun_app$b ?v2 (fun_app$j ?v0 ?v3)))))) :named a84))
(assert (! (forall ((?v0 T_N_fun$) (?v1 T_set$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (=> (member$a ?v3 (image$g ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 T$)) (=> (member$c ?v3 ?v1) (fun_app$c ?v2 (fun_app$m ?v0 ?v3)))))) :named a85))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_set$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (=> (member$a ?v3 (image$j ?v0 ?v1)) (fun_app$c ?v2 ?v3))) (forall ((?v3 Dtree$)) (=> (member$b ?v3 ?v1) (fun_app$c ?v2 (fun_app$e ?v0 ?v3)))))) :named a86))
(assert (! (forall ((?v0 N_T_fun$) (?v1 N_set$) (?v2 T_bool_fun$)) (=> (forall ((?v3 T$)) (=> (member$c ?v3 (image$e ?v0 ?v1)) (fun_app$o ?v2 ?v3))) (forall ((?v3 N$)) (=> (member$a ?v3 ?v1) (fun_app$o ?v2 (fun_app$k ?v0 ?v3)))))) :named a87))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_set$) (?v2 T_bool_fun$)) (=> (forall ((?v3 T$)) (=> (member$c ?v3 (image$h ?v0 ?v1)) (fun_app$o ?v2 ?v3))) (forall ((?v3 T$)) (=> (member$c ?v3 ?v1) (fun_app$o ?v2 (fun_app$n ?v0 ?v3)))))) :named a88))
(assert (! (forall ((?v0 Dtree_T_fun$) (?v1 Dtree_set$) (?v2 T_bool_fun$)) (=> (forall ((?v3 T$)) (=> (member$c ?v3 (image$k ?v0 ?v1)) (fun_app$o ?v2 ?v3))) (forall ((?v3 Dtree$)) (=> (member$b ?v3 ?v1) (fun_app$o ?v2 (fun_app$r ?v0 ?v3)))))) :named a89))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_set$) (?v2 Dtree$) (?v3 Dtree_dtree_fun$)) (=> (and (member$b ?v0 ?v1) (= ?v2 (fun_app$d ?v3 ?v0))) (member$b ?v2 (image$ ?v3 ?v1)))) :named a90))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N$) (?v3 N_N_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$g ?v3 ?v0))) (member$a ?v2 (image$a ?v3 ?v1)))) :named a91))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 T_dtree_sum$) (?v3 N_T_dtree_sum_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$h ?v3 ?v0))) (member$ ?v2 (image$b ?v3 ?v1)))) :named a92))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 N$) (?v3 T_dtree_sum_N_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$i ?v3 ?v0))) (member$a ?v2 (image$c ?v3 ?v1)))) :named a93))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_T_dtree_sum_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$j ?v3 ?v0))) (member$ ?v2 (image$d ?v3 ?v1)))) :named a94))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 T$) (?v3 N_T_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$k ?v3 ?v0))) (member$c ?v2 (image$e ?v3 ?v1)))) :named a95))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 Dtree$) (?v3 N_dtree_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$l ?v3 ?v0))) (member$b ?v2 (image$f ?v3 ?v1)))) :named a96))
(assert (! (forall ((?v0 T$) (?v1 T_set$) (?v2 N$) (?v3 T_N_fun$)) (=> (and (member$c ?v0 ?v1) (= ?v2 (fun_app$m ?v3 ?v0))) (member$a ?v2 (image$g ?v3 ?v1)))) :named a97))
(assert (! (forall ((?v0 T$) (?v1 T_set$) (?v2 T$) (?v3 T_T_fun$)) (=> (and (member$c ?v0 ?v1) (= ?v2 (fun_app$n ?v3 ?v0))) (member$c ?v2 (image$h ?v3 ?v1)))) :named a98))
(assert (! (forall ((?v0 T$) (?v1 T_set$) (?v2 Dtree$) (?v3 T_dtree_fun$)) (=> (and (member$c ?v0 ?v1) (= ?v2 (fun_app$q ?v3 ?v0))) (member$b ?v2 (image$i ?v3 ?v1)))) :named a99))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_set$) (?v2 Dtree_dtree_fun$)) (=> (member$b ?v0 ?v1) (member$b (fun_app$d ?v2 ?v0) (image$ ?v2 ?v1)))) :named a100))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N_N_fun$)) (=> (member$a ?v0 ?v1) (member$a (fun_app$g ?v2 ?v0) (image$a ?v2 ?v1)))) :named a101))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N_T_dtree_sum_fun$)) (=> (member$a ?v0 ?v1) (member$ (fun_app$h ?v2 ?v0) (image$b ?v2 ?v1)))) :named a102))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_N_fun$)) (=> (member$ ?v0 ?v1) (member$a (fun_app$i ?v2 ?v0) (image$c ?v2 ?v1)))) :named a103))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_T_dtree_sum_fun$)) (=> (member$ ?v0 ?v1) (member$ (fun_app$j ?v2 ?v0) (image$d ?v2 ?v1)))) :named a104))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N_T_fun$)) (=> (member$a ?v0 ?v1) (member$c (fun_app$k ?v2 ?v0) (image$e ?v2 ?v1)))) :named a105))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N_dtree_fun$)) (=> (member$a ?v0 ?v1) (member$b (fun_app$l ?v2 ?v0) (image$f ?v2 ?v1)))) :named a106))
(assert (! (forall ((?v0 T$) (?v1 T_set$) (?v2 T_N_fun$)) (=> (member$c ?v0 ?v1) (member$a (fun_app$m ?v2 ?v0) (image$g ?v2 ?v1)))) :named a107))
(assert (! (forall ((?v0 T$) (?v1 T_set$) (?v2 T_T_fun$)) (=> (member$c ?v0 ?v1) (member$c (fun_app$n ?v2 ?v0) (image$h ?v2 ?v1)))) :named a108))
(assert (! (forall ((?v0 T$) (?v1 T_set$) (?v2 T_dtree_fun$)) (=> (member$c ?v0 ?v1) (member$b (fun_app$q ?v2 ?v0) (image$i ?v2 ?v1)))) :named a109))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$o (fun_app$p (inFr2$ ?v0) ?v1) ?v2) (member$a (fun_app$e root$ ?v1) ?v0))) :named a110))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (member$ (inr$ ?v1) (cont$ ?v0))) (wf$ ?v1))) :named a111))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a112))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N$) (?v2 N_set$)) (=> (member$a (fun_app$g ?v0 ?v1) ?v2) (member$a ?v1 (vimage$a ?v0 ?v2)))) :named a113))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$) (?v1 T_dtree_sum$) (?v2 N_set$)) (=> (member$a (fun_app$i ?v0 ?v1) ?v2) (member$ ?v1 (vimage$c ?v0 ?v2)))) :named a114))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$) (?v1 N$) (?v2 T_dtree_sum_set$)) (=> (member$ (fun_app$h ?v0 ?v1) ?v2) (member$a ?v1 (vimage$b ?v0 ?v2)))) :named a115))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$) (?v1 Dtree$) (?v2 T_dtree_sum_set$)) (=> (member$ (fun_app$ ?v0 ?v1) ?v2) (member$b ?v1 (vimage$ ?v0 ?v2)))) :named a116))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T$) (?v2 T_dtree_sum_set$)) (=> (member$ (fun_app$a ?v0 ?v1) ?v2) (member$c ?v1 (vimage$d ?v0 ?v2)))) :named a117))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_set$)) (=> (member$ (fun_app$j ?v0 ?v1) ?v2) (member$ ?v1 (vimage$e ?v0 ?v2)))) :named a118))
(assert (! (forall ((?v0 T_N_fun$) (?v1 T$) (?v2 N_set$)) (=> (member$a (fun_app$m ?v0 ?v1) ?v2) (member$c ?v1 (vimage$h ?v0 ?v2)))) :named a119))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree$) (?v2 N_set$)) (=> (member$a (fun_app$e ?v0 ?v1) ?v2) (member$b ?v1 (vimage$j ?v0 ?v2)))) :named a120))
(assert (! (forall ((?v0 N_T_fun$) (?v1 N$) (?v2 T_set$)) (=> (member$c (fun_app$k ?v0 ?v1) ?v2) (member$a ?v1 (vimage$f ?v0 ?v2)))) :named a121))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T$) (?v2 T_set$)) (=> (member$c (fun_app$n ?v0 ?v1) ?v2) (member$c ?v1 (vimage$i ?v0 ?v2)))) :named a122))
(assert (! (forall ((?v0 T$) (?v1 T_dtree_fun$) (?v2 Dtree_set$)) (=> (member$c ?v0 (vimage$k ?v1 ?v2)) (member$b (fun_app$q ?v1 ?v0) ?v2))) :named a123))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_N_fun$) (?v2 N_set$)) (=> (member$b ?v0 (vimage$j ?v1 ?v2)) (member$a (fun_app$e ?v1 ?v0) ?v2))) :named a124))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_T_fun$) (?v2 T_set$)) (=> (member$b ?v0 (vimage$l ?v1 ?v2)) (member$c (fun_app$r ?v1 ?v0) ?v2))) :named a125))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_set$)) (=> (member$b ?v0 (vimage$m ?v1 ?v2)) (member$b (fun_app$d ?v1 ?v0) ?v2))) :named a126))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (=> (member$a ?v0 (vimage$a ?v1 ?v2)) (member$a (fun_app$g ?v1 ?v0) ?v2))) :named a127))
(assert (! (forall ((?v0 N$) (?v1 N_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$a ?v0 (vimage$b ?v1 ?v2)) (member$ (fun_app$h ?v1 ?v0) ?v2))) :named a128))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_N_fun$) (?v2 N_set$)) (=> (member$ ?v0 (vimage$c ?v1 ?v2)) (member$a (fun_app$i ?v1 ?v0) ?v2))) :named a129))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$ ?v0 (vimage$e ?v1 ?v2)) (member$ (fun_app$j ?v1 ?v0) ?v2))) :named a130))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$b ?v0 (vimage$ ?v1 ?v2)) (member$ (fun_app$ ?v1 ?v0) ?v2))) :named a131))
(assert (! (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$c ?v0 (vimage$d ?v1 ?v2)) (member$ (fun_app$a ?v1 ?v0) ?v2))) :named a132))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (=> (and (member$a ?v0 (vimage$a ?v1 ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$g ?v1 ?v0) ?v3) (member$a ?v3 ?v2)) false))) false)) :named a133))
(assert (! (forall ((?v0 N$) (?v1 N_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (and (member$a ?v0 (vimage$b ?v1 ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (= (fun_app$h ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a134))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_N_fun$) (?v2 N_set$)) (=> (and (member$ ?v0 (vimage$c ?v1 ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$i ?v1 ?v0) ?v3) (member$a ?v3 ?v2)) false))) false)) :named a135))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (and (member$ ?v0 (vimage$e ?v1 ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (= (fun_app$j ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a136))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (and (member$b ?v0 (vimage$ ?v1 ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (= (fun_app$ ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a137))
(assert (! (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (and (member$c ?v0 (vimage$d ?v1 ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (= (fun_app$a ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a138))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 Dtree_T_dtree_sum_fun$) (?v2 Dtree_bool_fun$)) (=> (forall ((?v3 Dtree$)) (= (fun_app$b ?v0 (fun_app$ ?v1 ?v3)) (fun_app$s ?v2 ?v3))) (= (vimage$ ?v1 (collect$ ?v0)) (collect$a ?v2)))) :named a139))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_T_dtree_sum_fun$) (?v2 T_bool_fun$)) (=> (forall ((?v3 T$)) (= (fun_app$b ?v0 (fun_app$a ?v1 ?v3)) (fun_app$o ?v2 ?v3))) (= (vimage$d ?v1 (collect$ ?v0)) (collect$b ?v2)))) :named a140))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (! (= (fun_app$f (hsubst_c$ ?v0) ?v1) (ite (= (fun_app$e root$ ?v1) (fun_app$e root$ ?v0)) (cont$ ?v0) (cont$ ?v1))) :pattern ((fun_app$f (hsubst_c$ ?v0) ?v1)))) :named a141))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (not (= (fun_app$e root$ ?v0) (fun_app$e root$ ?v1))) (= (vimage$ uu$ (cont$ (fun_app$d (hsubst$ ?v1) ?v0))) (image$ (hsubst$ ?v1) (vimage$ uu$ (cont$ ?v0)))))) :named a142))
(assert (! (= (hsubst$ tr0$) (fun_app$t (unfold$ hsubst_r$) (hsubst_c$ tr0$))) :named a143))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (member$ (inr$ ?v1) (cont$ ?v0))) (= (fun_app$l (subtrOf$ ?v0) (fun_app$e root$ ?v1)) ?v1))) :named a144))
(assert (! (forall ((?v0 Dtree$)) (finite$ (fun_app$f (hsubst_c$ tr0$) ?v0))) :named a145))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (fun_app$s (fun_app$u (subtr$ ?v1) ?v2) ?v0)) (inj_on$ root$ (vimage$ uu$ (cont$ ?v2))))) :named a146))
(assert (! (forall ((?v0 Dtree$)) (= (node$ (fun_app$e root$ ?v0) (cont$ ?v0)) ?v0)) :named a147))
(assert (! (forall ((?v0 Dtree_set$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$)) (=> (and (forall ((?v3 Dtree$)) (=> (member$b ?v3 ?v0) (forall ((?v4 Dtree$)) (=> (member$b ?v4 ?v0) (= (= (fun_app$e ?v1 (fun_app$d ?v2 ?v3)) (fun_app$e ?v1 (fun_app$d ?v2 ?v4))) (= (fun_app$e ?v1 ?v3) (fun_app$e ?v1 ?v4))))))) (inj_on$a ?v2 ?v0)) (= (inj_on$ ?v1 (image$ ?v2 ?v0)) (inj_on$ ?v1 ?v0)))) :named a148))
(assert (! (forall ((?v0 N_set$)) (= (collect$c (uua$ ?v0)) ?v0)) :named a149))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (= (collect$ (uub$ ?v0)) ?v0)) :named a150))
(assert (! (forall ((?v0 N$) (?v1 N_bool_fun$)) (= (member$a ?v0 (collect$c ?v1)) (fun_app$c ?v1 ?v0))) :named a151))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$b ?v1 ?v0))) :named a152))
(assert (! (forall ((?v0 Dtree$)) (=> (not (= (fun_app$e root$ ?v0) (fun_app$e root$ tr0$))) (= (vimage$d uuc$ (cont$ (fun_app$d (hsubst$ tr0$) ?v0))) (vimage$d uuc$ (cont$ ?v0))))) :named a153))
(assert (! (forall ((?v0 Dtree$)) (=> (= (fun_app$e root$ ?v0) (fun_app$e root$ tr0$)) (= (vimage$d uuc$ (cont$ (fun_app$d (hsubst$ tr0$) ?v0))) (vimage$d uuc$ (cont$ tr0$))))) :named a154))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 N$)) (=> (and (member$a (fun_app$e root$ ?v0) ?v1) (and (member$ (inr$ ?v2) (cont$ ?v0)) (fun_app$c (fun_app$v (inItr$ ?v1) ?v2) ?v3))) (fun_app$c (fun_app$v (inItr$ ?v1) ?v0) ?v3))) :named a155))
(check-sat)
;(get-unsat-core)
