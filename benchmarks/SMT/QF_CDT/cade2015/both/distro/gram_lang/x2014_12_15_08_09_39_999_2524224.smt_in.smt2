; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 187
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun ta$ () T$)
(declare-fun nsa$ () N_set$)
(declare-fun tr0$ () Dtree$)
(declare-fun tr1$ () Dtree$)
(declare-fun tra$ () Dtree$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun inFr$ (N_set$ Dtree$ T$) Bool)
(declare-fun root$ (Dtree$) N$)
(declare-fun tr1a$ () Dtree$)
(declare-fun deftr$ (N$) Dtree$)
(declare-fun inFr2$ (N_set$ Dtree$ T$) Bool)
(declare-fun inItr$ (N_set$ Dtree$ N$) Bool)
(declare-fun hsubst$ (Dtree$ Dtree$) Dtree$)
(declare-fun member$ (N$ N_set$) Bool)
(declare-fun subtr2$ (N_set$ Dtree$ Dtree$) Bool)
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun hsubst_c$ (Dtree$ Dtree$) T_dtree_sum_set$)
(declare-fun hsubst_r$ (Dtree$) N$)
(assert (! (not (member$ (root$ tr1a$) nsa$)) :named a0))
(assert (! (inFr$ nsa$ tr1$ ta$) :named a1))
(assert (! (= tr1a$ (hsubst$ tr0$ tra$)) :named a2))
(assert (! (member$a (inr$ tr1$) (cont$ tr1a$)) :named a3))
(assert (! (member$ (root$ tr1a$) nsa$) :named a4))
(assert (! (forall ((?v0 Dtree$)) (=> (= (root$ ?v0) (root$ tr0$)) (= (hsubst$ tr0$ ?v0) (hsubst$ tr0$ tr0$)))) :named a5))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (inFr$ ?v0 ?v1 ?v2) (member$ (root$ ?v1) ?v0))) :named a6))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (not (member$ (root$ ?v0) ?v1)) (not (inFr$ ?v1 ?v0 ?v2)))) :named a7))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (root$ (hsubst$ ?v0 ?v1)) (root$ ?v1))) :named a8))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (root$ ?v0) (root$ ?v1)) (= (hsubst$ ?v1 ?v0) (hsubst$ ?v1 ?v1)))) :named a9))
(assert (! (forall ((?v0 N$)) (= (root$ (deftr$ ?v0)) ?v0)) :named a10))
(assert (! (forall ((?v0 Dtree$)) (! (= (hsubst_r$ ?v0) (root$ ?v0)) :pattern ((hsubst_r$ ?v0)))) :named a11))
(assert (! (forall ((?v0 Dtree$)) (= (root$ (hsubst$ tr0$ ?v0)) (root$ ?v0))) :named a12))
(assert (! (forall ((?v0 Dtree$)) (! (= (hsubst_c$ tr0$ ?v0) (ite (= (root$ ?v0) (root$ tr0$)) (cont$ tr0$) (cont$ ?v0))) :pattern ((hsubst_c$ tr0$ ?v0)))) :named a13))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (inFr2$ ?v0 ?v1 ?v2) (member$ (root$ ?v1) ?v0))) :named a14))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (inItr$ ?v0 ?v1 ?v2) (member$ (root$ ?v1) ?v0))) :named a15))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$ (root$ ?v0) ?v1) (inItr$ ?v1 ?v0 (root$ ?v0)))) :named a16))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (subtr2$ ?v0 ?v1 ?v2) (member$ (root$ ?v2) ?v0))) :named a17))
(check-sat)
;(get-unsat-core)
