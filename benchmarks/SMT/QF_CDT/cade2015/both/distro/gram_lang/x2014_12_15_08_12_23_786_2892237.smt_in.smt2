; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 145
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-datatypes () ((N_list$ (nil$) (cons$ (hd$ N$) (tl$ N_list$)))
  (T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))
  (T_dtree_sum_list$ (nil$a) (cons$a (hd$a T_dtree_sum$) (tl$a T_dtree_sum_list$)))))
(declare-fun f$ () N_dtree_fun$)
(declare-fun n$ () N$)
(declare-fun n1$ () N$)
(declare-fun nl$ () N_list$)
(declare-fun nla$ () N_list$)
(declare-fun set$ (N_list$) N_set$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun last$ (N_list$) N$)
(declare-fun path$ (N_dtree_fun$ N_list$) Bool)
(declare-fun root$ (Dtree$) N$)
(declare-fun set$a (T_dtree_sum_list$) T_dtree_sum_set$)
(declare-fun subtr$ (N_set$ Dtree$ Dtree$) Bool)
(declare-fun insert$ (N$ N_set$) N_set$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun fun_app$ (N_dtree_fun$ N$) Dtree$)
(declare-fun insert$a (T_dtree_sum$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun member$a (N$ N_set$) Bool)
(declare-fun regular$ (Dtree$) Bool)
(assert (! (not (subtr$ (insert$ n$ (insert$ n1$ (set$ nla$))) (fun_app$ f$ (last$ (cons$ n1$ nla$))) (fun_app$ f$ n1$))) :named a0))
(assert (! (path$ f$ nl$) :named a1))
(assert (! (path$ f$ (cons$ n1$ nla$)) :named a2))
(assert (! (member$ (inr$ (fun_app$ f$ n1$)) (cont$ (fun_app$ f$ n$))) :named a3))
(assert (! (subtr$ (insert$ n1$ (set$ nla$)) (fun_app$ f$ (last$ (cons$ n1$ nla$))) (fun_app$ f$ n1$)) :named a4))
(assert (! (subtr$ (set$ (cons$ n1$ nla$)) (fun_app$ f$ (last$ (cons$ n1$ nla$))) (fun_app$ f$ (hd$ (cons$ n1$ nla$)))) :named a5))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (subtr$ ?v0 ?v1 ?v2) (subtr$ ?v0 ?v2 ?v3)) (subtr$ ?v0 ?v1 ?v3))) :named a6))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (! (= (set$a (cons$a ?v0 ?v1)) (insert$a ?v0 (set$a ?v1))) :pattern ((cons$a ?v0 ?v1)))) :named a7))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (! (= (set$ (cons$ ?v0 ?v1)) (insert$ ?v0 (set$ ?v1))) :pattern ((cons$ ?v0 ?v1)))) :named a8))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (= (insert$a ?v0 (insert$a ?v0 ?v1)) (insert$a ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 N$) (?v1 N_set$)) (= (insert$ ?v0 (insert$ ?v0 ?v1)) (insert$ ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 N$) (?v1 N$) (?v2 N_set$)) (= (member$a ?v0 (insert$ ?v1 ?v2)) (or (= ?v0 ?v1) (member$a ?v0 ?v2)))) :named a11))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_set$)) (= (member$ ?v0 (insert$a ?v1 ?v2)) (or (= ?v0 ?v1) (member$ ?v0 ?v2)))) :named a12))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N$)) (=> (=> (not (member$a ?v0 ?v1)) (= ?v0 ?v2)) (member$a ?v0 (insert$ ?v2 ?v1)))) :named a13))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$)) (=> (=> (not (member$ ?v0 ?v1)) (= ?v0 ?v2)) (member$ ?v0 (insert$a ?v2 ?v1)))) :named a14))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_list$)) (= (= (cons$a ?v0 ?v1) (cons$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 N$) (?v1 N_list$) (?v2 N$) (?v3 N_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a16))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_list$)) (=> (member$ ?v0 (set$a (cons$a ?v1 ?v2))) (or (= ?v0 ?v1) (member$ ?v0 (set$a ?v2))))) :named a17))
(assert (! (forall ((?v0 N$) (?v1 N$) (?v2 N_list$)) (=> (member$a ?v0 (set$ (cons$ ?v1 ?v2))) (or (= ?v0 ?v1) (member$a ?v0 (set$ ?v2))))) :named a18))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (=> (and (member$ ?v0 (set$a ?v1)) (and (forall ((?v2 T_dtree_sum_list$)) (=> (= ?v1 (cons$a ?v0 ?v2)) false)) (forall ((?v2 T_dtree_sum$) (?v3 T_dtree_sum_list$)) (=> (and (= ?v1 (cons$a ?v2 ?v3)) (member$ ?v0 (set$a ?v3))) false)))) false)) :named a19))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (=> (and (member$a ?v0 (set$ ?v1)) (and (forall ((?v2 N_list$)) (=> (= ?v1 (cons$ ?v0 ?v2)) false)) (forall ((?v2 N$) (?v3 N_list$)) (=> (and (= ?v1 (cons$ ?v2 ?v3)) (member$a ?v0 (set$ ?v3))) false)))) false)) :named a20))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$) (?v2 T_dtree_sum$)) (=> (member$ ?v0 (set$a ?v1)) (member$ ?v0 (set$a (cons$a ?v2 ?v1))))) :named a21))
(assert (! (forall ((?v0 N$) (?v1 N_list$) (?v2 N$)) (=> (member$a ?v0 (set$ ?v1)) (member$a ?v0 (set$ (cons$ ?v2 ?v1))))) :named a22))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_list$)) (member$ ?v0 (set$a (cons$a ?v0 ?v1)))) :named a23))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (member$a ?v0 (set$ (cons$ ?v0 ?v1)))) :named a24))
(assert (! (forall ((?v0 N$)) (= (root$ (fun_app$ f$ ?v0)) ?v0)) :named a25))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$)) (=> (and (regular$ ?v0) (subtr$ ?v1 ?v2 ?v0)) (regular$ ?v2))) :named a26))
(check-sat)
;(get-unsat-core)
