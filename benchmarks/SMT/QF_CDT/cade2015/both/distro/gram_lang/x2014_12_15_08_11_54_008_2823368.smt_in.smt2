; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 24
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort N_set$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-datatypes () ((N_list$ (nil$) (cons$ (hd$ N$) (tl$ N_list$)))))
(declare-fun f$ () N_dtree_fun$)
(declare-fun n$ () N$)
(declare-fun nl$ () N_list$)
(declare-fun nl1$ () N_list$)
(declare-fun nla$ () N_list$)
(declare-fun set$ (N_list$) N_set$)
(declare-fun last$ (N_list$) N$)
(declare-fun path$ (N_dtree_fun$ N_list$) Bool)
(declare-fun member$ (N$ N_set$) Bool)
(declare-fun less_eq$ (N_set$ N_set$) Bool)
(declare-fun distinct$ (N_list$) Bool)
(assert (! (not (and (path$ f$ (cons$ n$ nil$)) (and (= (hd$ (cons$ n$ nil$)) (hd$ (cons$ n$ nil$))) (and (= (last$ (cons$ n$ nil$)) (last$ (cons$ n$ nil$))) (and (less_eq$ (set$ (cons$ n$ nil$)) (set$ (cons$ n$ nil$))) (distinct$ (cons$ n$ nil$))))))) :named a0))
(assert (! (= nl1$ nil$) :named a1))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N$)) (path$ ?v0 (cons$ ?v1 nil$))) :named a2))
(assert (! (path$ f$ nl$) :named a3))
(assert (! (path$ f$ nla$) :named a4))
(assert (! (= nla$ (cons$ n$ nl1$)) :named a5))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N$) (?v2 N_list$)) (=> (and (path$ ?v0 (cons$ ?v1 ?v2)) (not (= ?v2 nil$))) (path$ ?v0 ?v2))) :named a6))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (=> (path$ ?v0 ?v1) (not (= ?v1 nil$)))) :named a7))
(assert (! (path$ f$ nla$) :named a8))
(assert (! (=> (forall ((?v0 N$) (?v1 N_list$)) (=> (= nla$ (cons$ ?v0 ?v1)) false)) false) :named a9))
(assert (! (forall ((?v0 N_list$)) (=> (not (= ?v0 nil$)) (member$ (last$ ?v0) (set$ ?v0)))) :named a10))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (! (= (last$ (cons$ ?v0 ?v1)) (ite (= ?v1 nil$) ?v0 (last$ ?v1))) :pattern ((cons$ ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 N_list$) (?v1 N$)) (! (=> (= ?v0 nil$) (= (last$ (cons$ ?v1 ?v0)) ?v1)) :pattern ((cons$ ?v1 ?v0)))) :named a12))
(assert (! (forall ((?v0 N_list$) (?v1 N$)) (! (=> (not (= ?v0 nil$)) (= (last$ (cons$ ?v1 ?v0)) (last$ ?v0))) :pattern ((cons$ ?v1 ?v0)))) :named a13))
(assert (! (forall ((?v0 N_list$)) (=> (not (= ?v0 nil$)) (member$ (hd$ ?v0) (set$ ?v0)))) :named a14))
(assert (! (forall ((?v0 N_list$)) (=> (not (= ?v0 nil$)) (member$ (hd$ ?v0) (set$ ?v0)))) :named a15))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (! (= (distinct$ (cons$ ?v0 ?v1)) (and (not (member$ ?v0 (set$ ?v1))) (distinct$ ?v1))) :pattern ((cons$ ?v0 ?v1)))) :named a16))
(assert (! (forall ((?v0 N$)) (distinct$ (cons$ ?v0 nil$))) :named a17))
(check-sat)
;(get-unsat-core)
