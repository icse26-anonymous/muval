; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 33
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort Dtree_N_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort T_T_dtree_sum_fun$ 0)
(declare-sort Dtree_T_bool_fun_fun$ 0)
(declare-sort Dtree_T_dtree_sum_set_fun$ 0)
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun t$ () T$)
(declare-fun ns$ () N_set$)
(declare-fun uu$ () T_T_dtree_sum_fun$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun tr0$ () Dtree$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun inFr$ () N_set_dtree_T_bool_fun_fun_fun$)
(declare-fun root$ (Dtree$) N$)
(declare-fun inFr2$ () N_set_dtree_T_bool_fun_fun_fun$)
(declare-fun subtr$ (N_set$ Dtree$ Dtree$) Bool)
(declare-fun finite$ (T_dtree_sum_set$) Bool)
(declare-fun hsubst$ (Dtree$) Dtree_dtree_fun$)
(declare-fun member$ (T$ T_set$) Bool)
(declare-fun unfold$ (Dtree_N_fun$ Dtree_T_dtree_sum_set_fun$) Dtree_dtree_fun$)
(declare-fun vimage$ (T_T_dtree_sum_fun$ T_dtree_sum_set$) T_set$)
(declare-fun fun_app$ (T_T_dtree_sum_fun$ T$) T_dtree_sum$)
(declare-fun member$a (N$ N_set$) Bool)
(declare-fun member$b (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun fun_app$a (T_bool_fun$ T$) Bool)
(declare-fun fun_app$b (Dtree_T_bool_fun_fun$ Dtree$) T_bool_fun$)
(declare-fun fun_app$c (N_set_dtree_T_bool_fun_fun_fun$ N_set$) Dtree_T_bool_fun_fun$)
(declare-fun fun_app$d (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$e (Dtree_T_dtree_sum_set_fun$ Dtree$) T_dtree_sum_set$)
(declare-fun fun_app$f (Dtree_N_fun$ Dtree$) N$)
(declare-fun hsubst_c$ (Dtree$) Dtree_T_dtree_sum_set_fun$)
(declare-fun hsubst_r$ () Dtree_N_fun$)
(assert (! (forall ((?v0 T$)) (! (= (fun_app$ uu$ ?v0) (inl$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (fun_app$a (fun_app$b (fun_app$c inFr$ ns$) (fun_app$d (hsubst$ tr0$) tr0$)) t$)) :named a1))
(assert (! (member$ t$ (vimage$ uu$ (cont$ tr0$))) :named a2))
(assert (! (member$a (root$ tr0$) ns$) :named a3))
(assert (! (forall ((?v0 Dtree$)) (=> (and (wf$ tr0$) (wf$ ?v0)) (wf$ (fun_app$d (hsubst$ tr0$) ?v0)))) :named a4))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (and (fun_app$a (fun_app$b (fun_app$c inFr$ ?v0) ?v1) ?v2) (not (member$a (root$ tr0$) ?v0))) (fun_app$a (fun_app$b (fun_app$c inFr$ ?v0) (fun_app$d (hsubst$ tr0$) ?v1)) ?v2))) :named a5))
(assert (! (forall ((?v0 Dtree$)) (=> (= (root$ ?v0) (root$ tr0$)) (= (fun_app$d (hsubst$ tr0$) ?v0) (fun_app$d (hsubst$ tr0$) tr0$)))) :named a6))
(assert (! (= (hsubst$ tr0$) (unfold$ hsubst_r$ (hsubst_c$ tr0$))) :named a7))
(assert (! (forall ((?v0 Dtree$)) (= (root$ (fun_app$d (hsubst$ tr0$) ?v0)) (root$ ?v0))) :named a8))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (fun_app$a (fun_app$b (fun_app$c inFr$ ?v0) ?v1) ?v2) (not (member$a (root$ ?v3) ?v0))) (fun_app$a (fun_app$b (fun_app$c inFr$ ?v0) (fun_app$d (hsubst$ ?v3) ?v1)) ?v2))) :named a9))
(assert (! (= inFr$ inFr2$) :named a10))
(assert (! (forall ((?v0 Dtree$)) (finite$ (fun_app$e (hsubst_c$ tr0$) ?v0))) :named a11))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (wf$ ?v1)) (wf$ (fun_app$d (hsubst$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 Dtree$)) (=> (= (root$ ?v0) (root$ tr0$)) (= (vimage$ uu$ (cont$ (fun_app$d (hsubst$ tr0$) ?v0))) (vimage$ uu$ (cont$ tr0$))))) :named a13))
(assert (! (forall ((?v0 Dtree$)) (=> (not (= (root$ ?v0) (root$ tr0$))) (= (vimage$ uu$ (cont$ (fun_app$d (hsubst$ tr0$) ?v0))) (vimage$ uu$ (cont$ ?v0))))) :named a14))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (fun_app$a (fun_app$b (fun_app$c inFr$ ?v0) ?v1) ?v2) (subtr$ ?v0 ?v1 ?v3)) (fun_app$a (fun_app$b (fun_app$c inFr$ ?v0) ?v3) ?v2))) :named a15))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$e (hsubst_c$ tr0$) ?v0) (ite (= (root$ ?v0) (root$ tr0$)) (cont$ tr0$) (cont$ ?v0))) :pattern ((fun_app$e (hsubst_c$ tr0$) ?v0)))) :named a16))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (! (= (fun_app$e (hsubst_c$ ?v0) ?v1) (ite (= (root$ ?v1) (root$ ?v0)) (cont$ ?v0) (cont$ ?v1))) :pattern ((fun_app$e (hsubst_c$ ?v0) ?v1)))) :named a17))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$f hsubst_r$ ?v0) (root$ ?v0)) :pattern ((fun_app$f hsubst_r$ ?v0)))) :named a18))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$a (fun_app$b (fun_app$c inFr2$ ?v0) ?v1) ?v2) (member$a (root$ ?v1) ?v0))) :named a19))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (subtr$ ?v0 ?v1 ?v2) (subtr$ ?v0 ?v2 ?v3)) (subtr$ ?v0 ?v1 ?v3))) :named a20))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (subtr$ ?v0 ?v1 ?v2) (member$a (root$ ?v2) ?v0))) :named a21))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (subtr$ ?v0 ?v1 ?v2) (member$a (root$ ?v1) ?v0))) :named a22))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (and (member$a (root$ ?v0) ?v1) (member$b (inl$ ?v2) (cont$ ?v0))) (fun_app$a (fun_app$b (fun_app$c inFr2$ ?v1) ?v0) ?v2))) :named a23))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$a (root$ ?v0) ?v1) (subtr$ ?v1 ?v0 ?v0))) :named a24))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (subtr$ ?v1 ?v2 ?v0)) (wf$ ?v2))) :named a25))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (finite$ (fun_app$e (hsubst_c$ ?v0) ?v1))) :named a26))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (not (= (root$ ?v0) (root$ ?v1))) (= (vimage$ uu$ (cont$ (fun_app$d (hsubst$ ?v1) ?v0))) (vimage$ uu$ (cont$ ?v0))))) :named a27))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (root$ ?v0) (root$ ?v1)) (= (vimage$ uu$ (cont$ (fun_app$d (hsubst$ ?v1) ?v0))) (vimage$ uu$ (cont$ ?v1))))) :named a28))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (and (member$a (root$ ?v0) ?v1) (member$b (inl$ ?v2) (cont$ ?v0))) (fun_app$a (fun_app$b (fun_app$c inFr$ ?v1) ?v0) ?v2))) :named a29))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$a (fun_app$b (fun_app$c inFr$ ?v0) ?v1) ?v2) (exists ((?v3 Dtree$)) (and (subtr$ ?v0 ?v3 ?v1) (member$b (inl$ ?v2) (cont$ ?v3)))))) :named a30))
(assert (! (forall ((?v0 Dtree$)) (! (= (hsubst$ ?v0) (unfold$ hsubst_r$ (hsubst_c$ ?v0))) :pattern ((hsubst$ ?v0)))) :named a31))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (root$ ?v0) (root$ ?v1)) (= (fun_app$d (hsubst$ ?v1) ?v0) (fun_app$d (hsubst$ ?v1) ?v1)))) :named a32))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (root$ (fun_app$d (hsubst$ ?v0) ?v1)) (root$ ?v1))) :named a33))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (not (member$a (root$ ?v0) ?v1)) (not (fun_app$a (fun_app$b (fun_app$c inFr$ ?v1) ?v0) ?v2)))) :named a34))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$a (fun_app$b (fun_app$c inFr$ ?v0) ?v1) ?v2) (member$a (root$ ?v1) ?v0))) :named a35))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a36))
(check-sat)
;(get-unsat-core)
