; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 463
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort N_T_fun$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort N_set_set$ 0)
(declare-sort T_set_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort T_N_sum_set$ 0)
(declare-sort T_T_set_fun$ 0)
(declare-sort T_set_T_fun$ 0)
(declare-sort N_set_set_set$ 0)
(declare-sort T_N_sum_T_fun$ 0)
(declare-sort T_T_N_sum_fun$ 0)
(declare-sort T_set_set_set$ 0)
(declare-sort N_set_bool_fun$ 0)
(declare-sort T_set_bool_fun$ 0)
(declare-sort T_N_sum_set_set$ 0)
(declare-sort T_set_T_set_fun$ 0)
(declare-sort N_set_set_set_set$ 0)
(declare-sort T_N_sum_T_set_fun$ 0)
(declare-sort T_set_T_N_sum_fun$ 0)
(declare-sort T_set_set_set_set$ 0)
(declare-sort N_set_set_bool_fun$ 0)
(declare-sort T_set_set_bool_fun$ 0)
(declare-sort T_N_sum_T_N_sum_fun$ 0)
(declare-sort T_N_sum_set_set_set$ 0)
(declare-sort T_N_sum_set_bool_fun$ 0)
(declare-datatypes () ((T_N_sum$ (inl$ (projl$ T$)) (inr$ (projr$ N$)))))
(declare-fun k$ (N$) T_set$)
(declare-fun n$ () N$)
(declare-fun fr$ (N_set$ Dtree$) T_set$)
(declare-fun ns$ () N_set$)
(declare-fun tr$ () Dtree$)
(declare-fun uu$ () T_T_N_sum_fun$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun bot$ () N_set$)
(declare-fun ftr$ (N$) Dtree$)
(declare-fun sup$ (T_set$) T_set_T_set_fun$)
(declare-fun tns$ () T_N_sum_set$)
(declare-fun tr$a () Dtree$)
(declare-fun uua$ () T_set_bool_fun$)
(declare-fun uub$ () T_set_bool_fun$)
(declare-fun uuc$ (T_N_sum_set$) T_N_sum_set_bool_fun$)
(declare-fun uud$ (N_set_set$) N_set_set_bool_fun$)
(declare-fun uue$ (T_set_set$) T_set_set_bool_fun$)
(declare-fun uuf$ (T$) T_bool_fun$)
(declare-fun uug$ (N_set$) N_set_bool_fun$)
(declare-fun uuh$ (T_set$) T_set_bool_fun$)
(declare-fun uui$ (N$) N_bool_fun$)
(declare-fun uuj$ (T_N_sum_set$) T_N_sum_set_bool_fun$)
(declare-fun uuk$ (N_set_set$) N_set_set_bool_fun$)
(declare-fun uul$ (T_set_set$) T_set_set_bool_fun$)
(declare-fun uum$ (T$) T_bool_fun$)
(declare-fun uun$ (N_set$) N_set_bool_fun$)
(declare-fun uuo$ (T_set$) T_set_bool_fun$)
(declare-fun uup$ (N$) N_bool_fun$)
(declare-fun bot$a () T_set_set_set$)
(declare-fun bot$b () T_N_sum_set_set$)
(declare-fun bot$c () N_set_set_set$)
(declare-fun bot$d () N_set_set$)
(declare-fun bot$e () T_set_set$)
(declare-fun bot$f () T_set$)
(declare-fun bot$g () N_set_set_set_set$)
(declare-fun bot$h () T_set_set_set_set$)
(declare-fun bot$i () T_N_sum_set$)
(declare-fun root$ (Dtree$) N$)
(declare-fun sup$a (T_set_set$) T_set$)
(declare-fun sup$b (T_set_set_set_set$) T_set_set_set$)
(declare-fun sup$c (T_set_set_set$ T_set_set_set$) T_set_set_set$)
(declare-fun sup$d (T_N_sum_set_set_set$) T_N_sum_set_set$)
(declare-fun sup$e (T_N_sum_set_set$ T_N_sum_set_set$) T_N_sum_set_set$)
(declare-fun sup$f (N_set_set_set$) N_set_set$)
(declare-fun sup$g (N_set_set$ N_set_set$) N_set_set$)
(declare-fun sup$h (T_N_sum_set_set$) T_N_sum_set$)
(declare-fun sup$i (T_N_sum_set$ T_N_sum_set$) T_N_sum_set$)
(declare-fun sup$j (T_set_set_set$) T_set_set$)
(declare-fun sup$k (T_set_set$ T_set_set$) T_set_set$)
(declare-fun sup$l (N_set_set$) N_set$)
(declare-fun sup$m (N_set$ N_set$) N_set$)
(declare-fun sup$n (N_set_set_set_set$) N_set_set_set$)
(declare-fun sup$o (T_set_set_set_set$ T_set_set_set_set$) T_set_set_set_set$)
(declare-fun sup$p (T_N_sum_set_set_set$ T_N_sum_set_set_set$) T_N_sum_set_set_set$)
(declare-fun sup$q (N_set_set_set$ N_set_set_set$) N_set_set_set$)
(declare-fun minus$ (N_set$ N_set$) N_set$)
(declare-fun insert$ (N$ N_set$) N_set$)
(declare-fun member$ (T_N_sum$ T_N_sum_set$) Bool)
(declare-fun minus$a (T_N_sum_set_set$ T_N_sum_set_set$) T_N_sum_set_set$)
(declare-fun minus$b (N_set_set_set$ N_set_set_set$) N_set_set_set$)
(declare-fun minus$c (T_set_set_set$ T_set_set_set$) T_set_set_set$)
(declare-fun minus$d (T_set_set$ T_set_set$) T_set_set$)
(declare-fun minus$e (T_set$) T_set_T_set_fun$)
(declare-fun minus$f (N_set_set$ N_set_set$) N_set_set$)
(declare-fun vimage$ (T_T_N_sum_fun$ T_N_sum_set$) T_set$)
(declare-fun collect$ (T_set_bool_fun$) T_set_set$)
(declare-fun fun_app$ (T_set_bool_fun$ T_set$) Bool)
(declare-fun insert$a (T_set_set_set$ T_set_set_set_set$) T_set_set_set_set$)
(declare-fun insert$b (T_N_sum_set_set$ T_N_sum_set_set_set$) T_N_sum_set_set_set$)
(declare-fun insert$c (N_set_set$ N_set_set_set$) N_set_set_set$)
(declare-fun insert$d (T_N_sum_set$ T_N_sum_set_set$) T_N_sum_set_set$)
(declare-fun insert$e (T_set_set$ T_set_set_set$) T_set_set_set$)
(declare-fun insert$f (N_set$ N_set_set$) N_set_set$)
(declare-fun insert$g (T_set$ T_set_set$) T_set_set$)
(declare-fun insert$h (T$) T_set_T_set_fun$)
(declare-fun member$a (N$ N_set$) Bool)
(declare-fun vimage$a (T_T_fun$) T_set_T_set_fun$)
(declare-fun vimage$b (T_set_T_fun$ T_set$) T_set_set$)
(declare-fun vimage$c (T_T_set_fun$ T_set_set$) T_set$)
(declare-fun vimage$d (T_N_sum_T_fun$ T_set$) T_N_sum_set$)
(declare-fun vimage$e (T_set_T_set_fun$ T_set_set$) T_set_set$)
(declare-fun vimage$f (T_set_T_N_sum_fun$ T_N_sum_set$) T_set_set$)
(declare-fun vimage$g (T_N_sum_T_set_fun$ T_set_set$) T_N_sum_set$)
(declare-fun vimage$h (T_N_sum_T_N_sum_fun$ T_N_sum_set$) T_N_sum_set$)
(declare-fun vimage$i (N_T_fun$ T_set$) N_set$)
(declare-fun collect$a (T_N_sum_set_bool_fun$) T_N_sum_set_set$)
(declare-fun collect$b (N_set_set_bool_fun$) N_set_set_set$)
(declare-fun collect$c (T_set_set_bool_fun$) T_set_set_set$)
(declare-fun collect$d (T_bool_fun$) T_set$)
(declare-fun collect$e (N_set_bool_fun$) N_set_set$)
(declare-fun collect$f (N_bool_fun$) N_set$)
(declare-fun fun_app$a (T_T_N_sum_fun$ T$) T_N_sum$)
(declare-fun fun_app$b (T_N_sum_set_bool_fun$ T_N_sum_set$) Bool)
(declare-fun fun_app$c (T_set_set_bool_fun$ T_set_set$) Bool)
(declare-fun fun_app$d (N_set_set_bool_fun$ N_set_set$) Bool)
(declare-fun fun_app$e (N_set_bool_fun$ N_set$) Bool)
(declare-fun fun_app$f (T_bool_fun$ T$) Bool)
(declare-fun fun_app$g (N_bool_fun$ N$) Bool)
(declare-fun fun_app$h (T_set_T_set_fun$ T_set$) T_set$)
(declare-fun fun_app$i (N_dtree_fun$ N$) Dtree$)
(assert (! (forall ((?v0 T_set$)) (! (= (fun_app$ uua$ ?v0) (exists ((?v1 N$)) (and (= ?v0 (fr$ (minus$ ns$ (insert$ n$ bot$)) (ftr$ ?v1))) (member$ (inr$ ?v1) tns$)))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 T_set$)) (! (= (fun_app$ uub$ ?v0) (exists ((?v1 N$)) (and (= ?v0 (k$ ?v1)) (member$ (inr$ ?v1) tns$)))) :pattern ((fun_app$ uub$ ?v0)))) :named a1))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$a uu$ ?v0) (inl$ ?v0)) :pattern ((fun_app$a uu$ ?v0)))) :named a2))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set$)) (! (= (fun_app$b (uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (uuc$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set$)) (! (= (fun_app$c (uue$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$c (uue$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set$)) (! (= (fun_app$d (uud$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (uud$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (! (= (fun_app$ (uuh$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (uuh$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (! (= (fun_app$e (uug$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$e (uug$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 T$) (?v1 T$)) (! (= (fun_app$f (uuf$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$f (uuf$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 N$) (?v1 N$)) (! (= (fun_app$g (uui$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$g (uui$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set$)) (! (= (fun_app$b (uuj$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$b (uuj$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set$)) (! (= (fun_app$c (uul$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$c (uul$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set$)) (! (= (fun_app$d (uuk$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$d (uuk$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (! (= (fun_app$ (uuo$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$ (uuo$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (! (= (fun_app$e (uun$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$e (uun$ ?v0) ?v1)))) :named a14))
(assert (! (forall ((?v0 T$) (?v1 T$)) (! (= (fun_app$f (uum$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$f (uum$ ?v0) ?v1)))) :named a15))
(assert (! (forall ((?v0 N$) (?v1 N$)) (! (= (fun_app$g (uup$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$g (uup$ ?v0) ?v1)))) :named a16))
(assert (! (not (exists ((?v0 Dtree$)) (and (= (fun_app$h (sup$ (vimage$ uu$ tns$)) (sup$a (collect$ uua$))) (fr$ ns$ ?v0)) (and (wf$ ?v0) (= (root$ ?v0) n$))))) :named a17))
(assert (! (member$a n$ ns$) :named a18))
(assert (! (wf$ tr$) :named a19))
(assert (! (=> (forall ((?v0 N_dtree_fun$)) (=> (forall ((?v1 N$)) (=> (member$ (inr$ ?v1) tns$) (and (= (k$ ?v1) (fr$ (minus$ ns$ (insert$ n$ bot$)) (fun_app$i ?v0 ?v1))) (and (wf$ (fun_app$i ?v0 ?v1)) (= (root$ (fun_app$i ?v0 ?v1)) ?v1))))) false)) false) :named a20))
(assert (! (forall ((?v0 N$)) (=> (member$ (inr$ ?v0) tns$) (exists ((?v1 Dtree$)) (and (= (k$ ?v0) (fr$ (minus$ ns$ (insert$ n$ bot$)) ?v1)) (and (wf$ ?v1) (= (root$ ?v1) ?v0)))))) :named a21))
(assert (! (= (collect$ uub$) (collect$ uua$)) :named a22))
(assert (! (forall ((?v0 N$)) (=> (member$ (inr$ ?v0) tns$) (and (= (k$ ?v0) (fr$ (minus$ ns$ (insert$ n$ bot$)) (ftr$ ?v0))) (and (wf$ (ftr$ ?v0)) (= (root$ (ftr$ ?v0)) ?v0))))) :named a23))
(assert (! (= (root$ tr$a) n$) :named a24))
(assert (! (forall ((?v0 T_set_set_set$) (?v1 T_set_set_set_set$)) (= (sup$b (insert$a ?v0 ?v1)) (sup$c ?v0 (sup$b ?v1)))) :named a25))
(assert (! (forall ((?v0 T_N_sum_set_set$) (?v1 T_N_sum_set_set_set$)) (= (sup$d (insert$b ?v0 ?v1)) (sup$e ?v0 (sup$d ?v1)))) :named a26))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set_set$)) (= (sup$f (insert$c ?v0 ?v1)) (sup$g ?v0 (sup$f ?v1)))) :named a27))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set_set$)) (= (sup$h (insert$d ?v0 ?v1)) (sup$i ?v0 (sup$h ?v1)))) :named a28))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set_set$)) (= (sup$j (insert$e ?v0 ?v1)) (sup$k ?v0 (sup$j ?v1)))) :named a29))
(assert (! (forall ((?v0 N_set$) (?v1 N_set_set$)) (= (sup$l (insert$f ?v0 ?v1)) (sup$m ?v0 (sup$l ?v1)))) :named a30))
(assert (! (forall ((?v0 T_set$) (?v1 T_set_set$)) (= (sup$a (insert$g ?v0 ?v1)) (fun_app$h (sup$ ?v0) (sup$a ?v1)))) :named a31))
(assert (! (forall ((?v0 T_set_set$)) (= (sup$j (insert$e ?v0 bot$a)) ?v0)) :named a32))
(assert (! (forall ((?v0 T_N_sum_set$)) (= (sup$h (insert$d ?v0 bot$b)) ?v0)) :named a33))
(assert (! (forall ((?v0 N_set_set$)) (= (sup$f (insert$c ?v0 bot$c)) ?v0)) :named a34))
(assert (! (forall ((?v0 N_set$)) (= (sup$l (insert$f ?v0 bot$d)) ?v0)) :named a35))
(assert (! (forall ((?v0 T_set$)) (= (sup$a (insert$g ?v0 bot$e)) ?v0)) :named a36))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set_set$)) (= (insert$d ?v0 (minus$a ?v1 (insert$d ?v0 bot$b))) (insert$d ?v0 ?v1))) :named a37))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set_set$)) (= (insert$c ?v0 (minus$b ?v1 (insert$c ?v0 bot$c))) (insert$c ?v0 ?v1))) :named a38))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set_set$)) (= (insert$e ?v0 (minus$c ?v1 (insert$e ?v0 bot$a))) (insert$e ?v0 ?v1))) :named a39))
(assert (! (forall ((?v0 T_set$) (?v1 T_set_set$)) (= (insert$g ?v0 (minus$d ?v1 (insert$g ?v0 bot$e))) (insert$g ?v0 ?v1))) :named a40))
(assert (! (forall ((?v0 T$) (?v1 T_set$)) (= (fun_app$h (insert$h ?v0) (fun_app$h (minus$e ?v1) (fun_app$h (insert$h ?v0) bot$f))) (fun_app$h (insert$h ?v0) ?v1))) :named a41))
(assert (! (forall ((?v0 N_set$) (?v1 N_set_set$)) (= (insert$f ?v0 (minus$f ?v1 (insert$f ?v0 bot$d))) (insert$f ?v0 ?v1))) :named a42))
(assert (! (forall ((?v0 N$) (?v1 N_set$)) (= (insert$ ?v0 (minus$ ?v1 (insert$ ?v0 bot$))) (insert$ ?v0 ?v1))) :named a43))
(assert (! (= (sup$n bot$g) bot$c) :named a44))
(assert (! (= (sup$b bot$h) bot$a) :named a45))
(assert (! (= (sup$h bot$b) bot$i) :named a46))
(assert (! (= (sup$j bot$a) bot$e) :named a47))
(assert (! (= (sup$f bot$c) bot$d) :named a48))
(assert (! (= (sup$l bot$d) bot$) :named a49))
(assert (! (= (sup$a bot$e) bot$f) :named a50))
(assert (! (forall ((?v0 T_N_sum_set$)) (= (collect$a (uuc$ ?v0)) (insert$d ?v0 bot$b))) :named a51))
(assert (! (forall ((?v0 N_set_set$)) (= (collect$b (uud$ ?v0)) (insert$c ?v0 bot$c))) :named a52))
(assert (! (forall ((?v0 T_set_set$)) (= (collect$c (uue$ ?v0)) (insert$e ?v0 bot$a))) :named a53))
(assert (! (forall ((?v0 T$)) (= (collect$d (uuf$ ?v0)) (fun_app$h (insert$h ?v0) bot$f))) :named a54))
(assert (! (forall ((?v0 N_set$)) (= (collect$e (uug$ ?v0)) (insert$f ?v0 bot$d))) :named a55))
(assert (! (forall ((?v0 T_set$)) (= (collect$ (uuh$ ?v0)) (insert$g ?v0 bot$e))) :named a56))
(assert (! (forall ((?v0 N$)) (= (collect$f (uui$ ?v0)) (insert$ ?v0 bot$))) :named a57))
(assert (! (forall ((?v0 T_N_sum_set$)) (= (collect$a (uuj$ ?v0)) (insert$d ?v0 bot$b))) :named a58))
(assert (! (forall ((?v0 N_set_set$)) (= (collect$b (uuk$ ?v0)) (insert$c ?v0 bot$c))) :named a59))
(assert (! (forall ((?v0 T_set_set$)) (= (collect$c (uul$ ?v0)) (insert$e ?v0 bot$a))) :named a60))
(assert (! (forall ((?v0 T$)) (= (collect$d (uum$ ?v0)) (fun_app$h (insert$h ?v0) bot$f))) :named a61))
(assert (! (forall ((?v0 N_set$)) (= (collect$e (uun$ ?v0)) (insert$f ?v0 bot$d))) :named a62))
(assert (! (forall ((?v0 T_set$)) (= (collect$ (uuo$ ?v0)) (insert$g ?v0 bot$e))) :named a63))
(assert (! (forall ((?v0 N$)) (= (collect$f (uup$ ?v0)) (insert$ ?v0 bot$))) :named a64))
(assert (! (forall ((?v0 T$) (?v1 N$)) (= (= (inl$ ?v0) (inr$ ?v1)) false)) :named a65))
(assert (! (forall ((?v0 N$) (?v1 T$)) (= (= (inr$ ?v0) (inl$ ?v1)) false)) :named a66))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_set$) (?v2 T_set$)) (= (fun_app$h (vimage$a ?v0) (fun_app$h (sup$ ?v1) ?v2)) (fun_app$h (sup$ (fun_app$h (vimage$a ?v0) ?v1)) (fun_app$h (vimage$a ?v0) ?v2)))) :named a67))
(assert (! (forall ((?v0 T_T_N_sum_fun$) (?v1 T_N_sum_set$) (?v2 T_N_sum_set$)) (= (vimage$ ?v0 (sup$i ?v1 ?v2)) (fun_app$h (sup$ (vimage$ ?v0 ?v1)) (vimage$ ?v0 ?v2)))) :named a68))
(assert (! (forall ((?v0 T_set_T_fun$) (?v1 T_set$) (?v2 T_set$)) (= (vimage$b ?v0 (fun_app$h (sup$ ?v1) ?v2)) (sup$k (vimage$b ?v0 ?v1) (vimage$b ?v0 ?v2)))) :named a69))
(assert (! (forall ((?v0 T_T_set_fun$) (?v1 T_set_set$) (?v2 T_set_set$)) (= (vimage$c ?v0 (sup$k ?v1 ?v2)) (fun_app$h (sup$ (vimage$c ?v0 ?v1)) (vimage$c ?v0 ?v2)))) :named a70))
(assert (! (forall ((?v0 T_N_sum_T_fun$) (?v1 T_set$) (?v2 T_set$)) (= (vimage$d ?v0 (fun_app$h (sup$ ?v1) ?v2)) (sup$i (vimage$d ?v0 ?v1) (vimage$d ?v0 ?v2)))) :named a71))
(assert (! (forall ((?v0 T_set_T_set_fun$) (?v1 T_set_set$) (?v2 T_set_set$)) (= (vimage$e ?v0 (sup$k ?v1 ?v2)) (sup$k (vimage$e ?v0 ?v1) (vimage$e ?v0 ?v2)))) :named a72))
(assert (! (forall ((?v0 T_set_T_N_sum_fun$) (?v1 T_N_sum_set$) (?v2 T_N_sum_set$)) (= (vimage$f ?v0 (sup$i ?v1 ?v2)) (sup$k (vimage$f ?v0 ?v1) (vimage$f ?v0 ?v2)))) :named a73))
(assert (! (forall ((?v0 T_N_sum_T_set_fun$) (?v1 T_set_set$) (?v2 T_set_set$)) (= (vimage$g ?v0 (sup$k ?v1 ?v2)) (sup$i (vimage$g ?v0 ?v1) (vimage$g ?v0 ?v2)))) :named a74))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$) (?v1 T_N_sum_set$) (?v2 T_N_sum_set$)) (= (vimage$h ?v0 (sup$i ?v1 ?v2)) (sup$i (vimage$h ?v0 ?v1) (vimage$h ?v0 ?v2)))) :named a75))
(assert (! (forall ((?v0 N_T_fun$) (?v1 T_set$) (?v2 T_set$)) (= (vimage$i ?v0 (fun_app$h (sup$ ?v1) ?v2)) (sup$m (vimage$i ?v0 ?v1) (vimage$i ?v0 ?v2)))) :named a76))
(assert (! (forall ((?v0 T_set_set_set_set$) (?v1 T_set_set_set_set$)) (= (sup$b (sup$o ?v0 ?v1)) (sup$c (sup$b ?v0) (sup$b ?v1)))) :named a77))
(assert (! (forall ((?v0 T_N_sum_set_set_set$) (?v1 T_N_sum_set_set_set$)) (= (sup$d (sup$p ?v0 ?v1)) (sup$e (sup$d ?v0) (sup$d ?v1)))) :named a78))
(assert (! (forall ((?v0 N_set_set_set$) (?v1 N_set_set_set$)) (= (sup$f (sup$q ?v0 ?v1)) (sup$g (sup$f ?v0) (sup$f ?v1)))) :named a79))
(assert (! (forall ((?v0 T_N_sum_set_set$) (?v1 T_N_sum_set_set$)) (= (sup$h (sup$e ?v0 ?v1)) (sup$i (sup$h ?v0) (sup$h ?v1)))) :named a80))
(assert (! (forall ((?v0 T_set_set_set$) (?v1 T_set_set_set$)) (= (sup$j (sup$c ?v0 ?v1)) (sup$k (sup$j ?v0) (sup$j ?v1)))) :named a81))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set$)) (= (sup$l (sup$g ?v0 ?v1)) (sup$m (sup$l ?v0) (sup$l ?v1)))) :named a82))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set$)) (= (sup$a (sup$k ?v0 ?v1)) (fun_app$h (sup$ (sup$a ?v0)) (sup$a ?v1)))) :named a83))
(check-sat)
;(get-unsat-core)
