; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 449
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort A_set$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort Dtree_set$ 0)
(declare-sort N_set_set$ 0)
(declare-sort T_set_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort A_dtree_fun$ 0)
(declare-sort Dtree_a_fun$ 0)
(declare-sort T_a_sum_set$ 0)
(declare-sort A_T_a_sum_fun$ 0)
(declare-sort N_set_set_set$ 0)
(declare-sort T_T_a_sum_fun$ 0)
(declare-sort T_a_sum_a_fun$ 0)
(declare-sort T_set_set_set$ 0)
(declare-sort N_set_bool_fun$ 0)
(declare-sort T_set_bool_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort T_a_sum_set_set$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort T_a_sum_bool_fun$ 0)
(declare-sort A_T_dtree_sum_fun$ 0)
(declare-sort N_set_set_set_set$ 0)
(declare-sort T_T_a_sum_sum_set$ 0)
(declare-sort T_T_dtree_sum_fun$ 0)
(declare-sort T_a_sum_dtree_fun$ 0)
(declare-sort T_dtree_sum_a_fun$ 0)
(declare-sort T_set_set_set_set$ 0)
(declare-sort N_set_set_bool_fun$ 0)
(declare-sort T_set_set_bool_fun$ 0)
(declare-sort T_T_T_a_sum_sum_fun$ 0)
(declare-sort T_a_sum_T_a_sum_fun$ 0)
(declare-sort T_a_sum_set_set_set$ 0)
(declare-sort T_dtree_sum_set_set$ 0)
(declare-sort T_a_sum_set_bool_fun$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort Dtree_T_dtree_sum_fun$ 0)
(declare-sort T_T_dtree_sum_sum_set$ 0)
(declare-sort T_dtree_sum_dtree_fun$ 0)
(declare-sort T_T_T_dtree_sum_sum_fun$ 0)
(declare-sort T_a_sum_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_T_a_sum_fun$ 0)
(declare-sort T_T_a_sum_sum_T_a_sum_fun$ 0)
(declare-sort T_a_sum_T_T_a_sum_sum_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0)
(declare-sort T_T_a_sum_sum_T_dtree_sum_fun$ 0)
(declare-sort T_T_dtree_sum_sum_T_a_sum_fun$ 0)
(declare-sort T_a_sum_T_T_dtree_sum_sum_fun$ 0)
(declare-sort T_T_dtree_sum_sum_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_T_T_dtree_sum_sum_fun$ 0)
(declare-sort T_T_a_sum_sum_T_T_dtree_sum_sum_fun$ 0)
(declare-sort A_dtree_fun_T_a_sum_T_dtree_sum_fun_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))
  (T_a_sum$ (inl$a (projl$a T$)) (inr$a (projr$a A$)))
  (T_T_dtree_sum_sum$ (inl$b (projl$b T$)) (inr$b (projr$b T_dtree_sum$)))
  (T_T_a_sum_sum$ (inl$c (projl$c T$)) (inr$c (projr$c T_a_sum$)))))
(declare-fun n$ () N$)
(declare-fun fr$ (N_set$ Dtree$) T_set$)
(declare-fun id$ () T_T_fun$)
(declare-fun ns$ () N_set$)
(declare-fun tr$ () Dtree$)
(declare-fun uu$ () T_T_dtree_sum_fun$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun bot$ () N_set$)
(declare-fun frr$ (N_set$ Dtree$) T_set$)
(declare-fun ftr$ () A_dtree_fun$)
(declare-fun sup$ (T_set$ T_set$) T_set$)
(declare-fun tns$ () T_a_sum_set$)
(declare-fun uua$ () T_set_bool_fun$)
(declare-fun uub$ () T_T_a_sum_fun$)
(declare-fun uuc$ () A_T_a_sum_fun$)
(declare-fun uud$ () Dtree_T_dtree_sum_fun$)
(declare-fun uue$ () T_dtree_sum_T_T_dtree_sum_sum_fun$)
(declare-fun uuf$ () T_a_sum_T_T_a_sum_sum_fun$)
(declare-fun uug$ () T_T_T_dtree_sum_sum_fun$)
(declare-fun uuh$ () T_T_T_a_sum_sum_fun$)
(declare-fun uui$ (T_a_sum_set$) T_a_sum_set_bool_fun$)
(declare-fun uuj$ (N_set_set$) N_set_set_bool_fun$)
(declare-fun uuk$ (T_set_set$) T_set_set_bool_fun$)
(declare-fun uul$ (T_dtree_sum$) T_dtree_sum_bool_fun$)
(declare-fun uum$ (T$) T_bool_fun$)
(declare-fun uun$ (N_set$) N_set_bool_fun$)
(declare-fun uuo$ (T_a_sum$) T_a_sum_bool_fun$)
(declare-fun uup$ (T_set$) T_set_bool_fun$)
(declare-fun uuq$ (N$) N_bool_fun$)
(declare-fun bot$a () T_a_sum_set_set$)
(declare-fun bot$b () N_set_set_set$)
(declare-fun bot$c () T_set_set_set$)
(declare-fun bot$d () N_set_set$)
(declare-fun bot$e () T_set_set$)
(declare-fun bot$f () T_dtree_sum_set$)
(declare-fun bot$g () T_set$)
(declare-fun bot$h () T_a_sum_set$)
(declare-fun bot$i () T_a_sum_set_set_set$)
(declare-fun bot$j () N_set_set_set_set$)
(declare-fun bot$k () T_set_set_set_set$)
(declare-fun bot$l () T_dtree_sum_set_set$)
(declare-fun bot$m () T_T_dtree_sum_sum_set$)
(declare-fun node$ (N$ T_dtree_sum_set$) Dtree$)
(declare-fun sup$a (T_set_set$) T_set$)
(declare-fun sup$b (T_a_sum_set_set$) T_a_sum_set$)
(declare-fun sup$c (T_a_sum_set$ T_a_sum_set$) T_a_sum_set$)
(declare-fun sup$d (N_set_set_set$) N_set_set$)
(declare-fun sup$e (N_set_set$ N_set_set$) N_set_set$)
(declare-fun sup$f (T_set_set_set$) T_set_set$)
(declare-fun sup$g (T_set_set$ T_set_set$) T_set_set$)
(declare-fun sup$h (N_set_set$) N_set$)
(declare-fun sup$i (N_set$ N_set$) N_set$)
(declare-fun sup$j (T_a_sum_set_set_set$) T_a_sum_set_set$)
(declare-fun sup$k (N_set_set_set_set$) N_set_set_set$)
(declare-fun sup$l (T_set_set_set_set$) T_set_set_set$)
(declare-fun sup$m (T_dtree_sum_set_set$) T_dtree_sum_set$)
(declare-fun image$ (T_a_sum_T_dtree_sum_fun$ T_a_sum_set$) T_dtree_sum_set$)
(declare-fun minus$ (N_set$ N_set$) N_set$)
(declare-fun finite$ (T_a_sum_set$) Bool)
(declare-fun image$a (T_a_sum_T_a_sum_fun$ T_a_sum_set$) T_a_sum_set$)
(declare-fun image$b (A_a_fun$ A_set$) A_set$)
(declare-fun image$c (A_dtree_fun$ A_set$) Dtree_set$)
(declare-fun image$d (T_T_a_sum_sum_T_T_dtree_sum_sum_fun$ T_T_a_sum_sum_set$) T_T_dtree_sum_sum_set$)
(declare-fun image$e (T_dtree_sum_T_a_sum_fun$ T_dtree_sum_set$) T_a_sum_set$)
(declare-fun image$f (Dtree_a_fun$ Dtree_set$) A_set$)
(declare-fun image$g (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun image$h (Dtree_dtree_fun$ Dtree_set$) Dtree_set$)
(declare-fun image$i (T_T_dtree_sum_sum_T_a_sum_fun$ T_T_dtree_sum_sum_set$) T_a_sum_set$)
(declare-fun image$j (T_dtree_sum_a_fun$ T_dtree_sum_set$) A_set$)
(declare-fun image$k (T_T_a_sum_sum_T_a_sum_fun$ T_T_a_sum_sum_set$) T_a_sum_set$)
(declare-fun image$l (T_a_sum_a_fun$ T_a_sum_set$) A_set$)
(declare-fun image$m (T_T_dtree_sum_sum_T_dtree_sum_fun$ T_T_dtree_sum_sum_set$) T_dtree_sum_set$)
(declare-fun image$n (T_dtree_sum_dtree_fun$ T_dtree_sum_set$) Dtree_set$)
(declare-fun image$o (T_T_a_sum_sum_T_dtree_sum_fun$ T_T_a_sum_sum_set$) T_dtree_sum_set$)
(declare-fun image$p (T_a_sum_dtree_fun$ T_a_sum_set$) Dtree_set$)
(declare-fun image$q (T_a_sum_T_T_dtree_sum_sum_fun$ T_a_sum_set$) T_T_dtree_sum_sum_set$)
(declare-fun image$r (A_T_dtree_sum_fun$ A_set$) T_dtree_sum_set$)
(declare-fun image$s (T_dtree_sum_T_T_dtree_sum_sum_fun$ T_dtree_sum_set$) T_T_dtree_sum_sum_set$)
(declare-fun insert$ (N$ N_set$) N_set$)
(declare-fun member$ (T_a_sum$) T_a_sum_set_bool_fun$)
(declare-fun minus$a (T_a_sum_set_set$ T_a_sum_set_set$) T_a_sum_set_set$)
(declare-fun minus$b (N_set_set_set$ N_set_set_set$) N_set_set_set$)
(declare-fun minus$c (T_set_set_set$ T_set_set_set$) T_set_set_set$)
(declare-fun minus$d (T_dtree_sum_set$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun minus$e (T_set_set$ T_set_set$) T_set_set$)
(declare-fun minus$f (T_set$ T_set$) T_set$)
(declare-fun minus$g (N_set_set$ N_set_set$) N_set_set$)
(declare-fun minus$h (T_a_sum_set$ T_a_sum_set$) T_a_sum_set$)
(declare-fun vimage$ (T_T_dtree_sum_fun$ T_dtree_sum_set$) T_set$)
(declare-fun collect$ (T_set_bool_fun$) T_set_set$)
(declare-fun fun_app$ (T_set_bool_fun$ T_set$) Bool)
(declare-fun insert$a (T_a_sum_set$ T_a_sum_set_set$) T_a_sum_set_set$)
(declare-fun insert$b (N_set_set$ N_set_set_set$) N_set_set_set$)
(declare-fun insert$c (T_set_set$ T_set_set_set$) T_set_set_set$)
(declare-fun insert$d (N_set$ N_set_set$) N_set_set$)
(declare-fun insert$e (T_set$ T_set_set$) T_set_set$)
(declare-fun insert$f (T_dtree_sum$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun insert$g (T$ T_set$) T_set$)
(declare-fun insert$h (T_a_sum$ T_a_sum_set$) T_a_sum_set$)
(declare-fun map_sum$ (T_T_fun$) A_dtree_fun_T_a_sum_T_dtree_sum_fun_fun$)
(declare-fun member$a (N$) N_set_bool_fun$)
(declare-fun member$b (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun member$c (T_T_dtree_sum_sum$ T_T_dtree_sum_sum_set$) Bool)
(declare-fun member$d (T_T_a_sum_sum$ T_T_a_sum_sum_set$) Bool)
(declare-fun member$e (T$) T_set_bool_fun$)
(declare-fun member$f (T_set$) T_set_set_bool_fun$)
(declare-fun member$g (N_set$) N_set_set_bool_fun$)
(declare-fun member$h (N_set_set$ N_set_set_set$) Bool)
(declare-fun member$i (T_set_set$ T_set_set_set$) Bool)
(declare-fun member$j (T_a_sum_set$ T_a_sum_set_set$) Bool)
(declare-fun vimage$a (T_T_a_sum_fun$ T_a_sum_set$) T_set$)
(declare-fun vimage$b (A_T_a_sum_fun$ T_a_sum_set$) A_set$)
(declare-fun vimage$c (Dtree_T_dtree_sum_fun$ T_dtree_sum_set$) Dtree_set$)
(declare-fun vimage$d (T_dtree_sum_T_T_dtree_sum_sum_fun$ T_T_dtree_sum_sum_set$) T_dtree_sum_set$)
(declare-fun vimage$e (T_a_sum_T_T_a_sum_sum_fun$ T_T_a_sum_sum_set$) T_a_sum_set$)
(declare-fun vimage$f (T_T_T_dtree_sum_sum_fun$ T_T_dtree_sum_sum_set$) T_set$)
(declare-fun vimage$g (T_T_T_a_sum_sum_fun$ T_T_a_sum_sum_set$) T_set$)
(declare-fun collect$a (T_a_sum_set_bool_fun$) T_a_sum_set_set$)
(declare-fun collect$b (N_set_set_bool_fun$) N_set_set_set$)
(declare-fun collect$c (T_set_set_bool_fun$) T_set_set_set$)
(declare-fun collect$d (T_dtree_sum_bool_fun$) T_dtree_sum_set$)
(declare-fun collect$e (T_bool_fun$) T_set$)
(declare-fun collect$f (N_set_bool_fun$) N_set_set$)
(declare-fun collect$g (T_a_sum_bool_fun$) T_a_sum_set$)
(declare-fun collect$h (N_bool_fun$) N_set$)
(declare-fun fun_app$a (A_dtree_fun$ A$) Dtree$)
(declare-fun fun_app$b (T_a_sum_set_bool_fun$ T_a_sum_set$) Bool)
(declare-fun fun_app$c (T_dtree_sum_T_T_dtree_sum_sum_fun$ T_dtree_sum$) T_T_dtree_sum_sum$)
(declare-fun fun_app$d (T_a_sum_T_T_a_sum_sum_fun$ T_a_sum$) T_T_a_sum_sum$)
(declare-fun fun_app$e (Dtree_T_dtree_sum_fun$ Dtree$) T_dtree_sum$)
(declare-fun fun_app$f (A_T_a_sum_fun$ A$) T_a_sum$)
(declare-fun fun_app$g (T_T_T_dtree_sum_sum_fun$ T$) T_T_dtree_sum_sum$)
(declare-fun fun_app$h (T_T_T_a_sum_sum_fun$ T$) T_T_a_sum_sum$)
(declare-fun fun_app$i (T_T_dtree_sum_fun$ T$) T_dtree_sum$)
(declare-fun fun_app$j (T_T_a_sum_fun$ T$) T_a_sum$)
(declare-fun fun_app$k (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun fun_app$l (T_a_sum_bool_fun$ T_a_sum$) Bool)
(declare-fun fun_app$m (T_set_set_bool_fun$ T_set_set$) Bool)
(declare-fun fun_app$n (N_set_set_bool_fun$ N_set_set$) Bool)
(declare-fun fun_app$o (N_set_bool_fun$ N_set$) Bool)
(declare-fun fun_app$p (T_bool_fun$ T$) Bool)
(declare-fun fun_app$q (N_bool_fun$ N$) Bool)
(declare-fun fun_app$r (A_dtree_fun_T_a_sum_T_dtree_sum_fun_fun$ A_dtree_fun$) T_a_sum_T_dtree_sum_fun$)
(declare-fun fun_app$s (A_a_fun$ A$) A$)
(declare-fun fun_app$t (Dtree_a_fun$ Dtree$) A$)
(declare-fun fun_app$u (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$v (T_dtree_sum_a_fun$ T_dtree_sum$) A$)
(declare-fun fun_app$w (T_a_sum_a_fun$ T_a_sum$) A$)
(declare-fun fun_app$x (T_dtree_sum_dtree_fun$ T_dtree_sum$) Dtree$)
(declare-fun fun_app$y (T_a_sum_dtree_fun$ T_a_sum$) Dtree$)
(declare-fun fun_app$z (A_T_dtree_sum_fun$ A$) T_dtree_sum$)
(declare-fun map_sum$a (T_T_fun$ A_a_fun$) T_a_sum_T_a_sum_fun$)
(declare-fun map_sum$b (T_T_fun$ T_a_sum_T_dtree_sum_fun$) T_T_a_sum_sum_T_T_dtree_sum_sum_fun$)
(declare-fun map_sum$c (T_T_fun$ Dtree_a_fun$) T_dtree_sum_T_a_sum_fun$)
(declare-fun map_sum$d (T_T_fun$ Dtree_dtree_fun$) T_dtree_sum_T_dtree_sum_fun$)
(declare-fun map_sum$e (T_T_fun$ T_dtree_sum_a_fun$) T_T_dtree_sum_sum_T_a_sum_fun$)
(declare-fun map_sum$f (T_T_fun$ T_a_sum_a_fun$) T_T_a_sum_sum_T_a_sum_fun$)
(declare-fun map_sum$g (T_T_fun$ T_dtree_sum_dtree_fun$) T_T_dtree_sum_sum_T_dtree_sum_fun$)
(declare-fun map_sum$h (T_T_fun$ T_a_sum_dtree_fun$) T_T_a_sum_sum_T_dtree_sum_fun$)
(declare-fun map_sum$i (T_T_fun$ A_T_dtree_sum_fun$) T_a_sum_T_T_dtree_sum_sum_fun$)
(declare-fun map_sum$j (T_T_fun$ Dtree_T_dtree_sum_fun$) T_dtree_sum_T_T_dtree_sum_sum_fun$)
(assert (! (forall ((?v0 T_set$)) (! (= (fun_app$ uua$ ?v0) (exists ((?v1 A$)) (and (= ?v0 (fr$ (minus$ ns$ (insert$ n$ bot$)) (fun_app$a ftr$ ?v1))) (fun_app$b (member$ (inr$a ?v1)) tns$)))) :pattern ((fun_app$ uua$ ?v0)))) :named a0))
(assert (! (forall ((?v0 T_dtree_sum$)) (! (= (fun_app$c uue$ ?v0) (inr$b ?v0)) :pattern ((fun_app$c uue$ ?v0)))) :named a1))
(assert (! (forall ((?v0 T_a_sum$)) (! (= (fun_app$d uuf$ ?v0) (inr$c ?v0)) :pattern ((fun_app$d uuf$ ?v0)))) :named a2))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$e uud$ ?v0) (inr$ ?v0)) :pattern ((fun_app$e uud$ ?v0)))) :named a3))
(assert (! (forall ((?v0 A$)) (! (= (fun_app$f uuc$ ?v0) (inr$a ?v0)) :pattern ((fun_app$f uuc$ ?v0)))) :named a4))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$g uug$ ?v0) (inl$b ?v0)) :pattern ((fun_app$g uug$ ?v0)))) :named a5))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$h uuh$ ?v0) (inl$c ?v0)) :pattern ((fun_app$h uuh$ ?v0)))) :named a6))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$i uu$ ?v0) (inl$ ?v0)) :pattern ((fun_app$i uu$ ?v0)))) :named a7))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$j uub$ ?v0) (inl$a ?v0)) :pattern ((fun_app$j uub$ ?v0)))) :named a8))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$)) (! (= (fun_app$k (uul$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$k (uul$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 T_a_sum$) (?v1 T_a_sum$)) (! (= (fun_app$l (uuo$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$l (uuo$ ?v0) ?v1)))) :named a10))
(assert (! (forall ((?v0 T_a_sum_set$) (?v1 T_a_sum_set$)) (! (= (fun_app$b (uui$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (uui$ ?v0) ?v1)))) :named a11))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set$)) (! (= (fun_app$m (uuk$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$m (uuk$ ?v0) ?v1)))) :named a12))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set$)) (! (= (fun_app$n (uuj$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$n (uuj$ ?v0) ?v1)))) :named a13))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (! (= (fun_app$ (uup$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (uup$ ?v0) ?v1)))) :named a14))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (! (= (fun_app$o (uun$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$o (uun$ ?v0) ?v1)))) :named a15))
(assert (! (forall ((?v0 T$) (?v1 T$)) (! (= (fun_app$p (uum$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$p (uum$ ?v0) ?v1)))) :named a16))
(assert (! (forall ((?v0 N$) (?v1 N$)) (! (= (fun_app$q (uuq$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$q (uuq$ ?v0) ?v1)))) :named a17))
(assert (! (not (= (sup$ (vimage$ uu$ (image$ (fun_app$r (map_sum$ id$) ftr$) tns$)) (sup$a (collect$ uua$))) (sup$ (vimage$a uub$ tns$) (sup$a (collect$ uua$))))) :named a18))
(assert (! (fun_app$o (member$a n$) ns$) :named a19))
(assert (! (finite$ tns$) :named a20))
(assert (! (= tr$ (node$ n$ (image$ (fun_app$r (map_sum$ id$) ftr$) tns$))) :named a21))
(assert (! (forall ((?v0 A_a_fun$) (?v1 T_a_sum_set$)) (= (vimage$b uuc$ (image$a (map_sum$a id$ ?v0) ?v1)) (image$b ?v0 (vimage$b uuc$ ?v1)))) :named a22))
(assert (! (forall ((?v0 A_dtree_fun$) (?v1 T_a_sum_set$)) (= (vimage$c uud$ (image$ (fun_app$r (map_sum$ id$) ?v0) ?v1)) (image$c ?v0 (vimage$b uuc$ ?v1)))) :named a23))
(assert (! (forall ((?v0 T_a_sum_T_dtree_sum_fun$) (?v1 T_T_a_sum_sum_set$)) (= (vimage$d uue$ (image$d (map_sum$b id$ ?v0) ?v1)) (image$ ?v0 (vimage$e uuf$ ?v1)))) :named a24))
(assert (! (forall ((?v0 Dtree_a_fun$) (?v1 T_dtree_sum_set$)) (= (vimage$b uuc$ (image$e (map_sum$c id$ ?v0) ?v1)) (image$f ?v0 (vimage$c uud$ ?v1)))) :named a25))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 T_dtree_sum_set$)) (= (vimage$c uud$ (image$g (map_sum$d id$ ?v0) ?v1)) (image$h ?v0 (vimage$c uud$ ?v1)))) :named a26))
(assert (! (forall ((?v0 T_dtree_sum_a_fun$) (?v1 T_T_dtree_sum_sum_set$)) (= (vimage$b uuc$ (image$i (map_sum$e id$ ?v0) ?v1)) (image$j ?v0 (vimage$d uue$ ?v1)))) :named a27))
(assert (! (forall ((?v0 T_a_sum_a_fun$) (?v1 T_T_a_sum_sum_set$)) (= (vimage$b uuc$ (image$k (map_sum$f id$ ?v0) ?v1)) (image$l ?v0 (vimage$e uuf$ ?v1)))) :named a28))
(assert (! (forall ((?v0 T_dtree_sum_dtree_fun$) (?v1 T_T_dtree_sum_sum_set$)) (= (vimage$c uud$ (image$m (map_sum$g id$ ?v0) ?v1)) (image$n ?v0 (vimage$d uue$ ?v1)))) :named a29))
(assert (! (forall ((?v0 T_a_sum_dtree_fun$) (?v1 T_T_a_sum_sum_set$)) (= (vimage$c uud$ (image$o (map_sum$h id$ ?v0) ?v1)) (image$p ?v0 (vimage$e uuf$ ?v1)))) :named a30))
(assert (! (forall ((?v0 A_T_dtree_sum_fun$) (?v1 T_a_sum_set$)) (= (vimage$d uue$ (image$q (map_sum$i id$ ?v0) ?v1)) (image$r ?v0 (vimage$b uuc$ ?v1)))) :named a31))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 T_dtree_sum_set$)) (= (vimage$ uu$ (image$g (map_sum$d id$ ?v0) ?v1)) (vimage$ uu$ ?v1))) :named a32))
(assert (! (forall ((?v0 Dtree_a_fun$) (?v1 T_dtree_sum_set$)) (= (vimage$a uub$ (image$e (map_sum$c id$ ?v0) ?v1)) (vimage$ uu$ ?v1))) :named a33))
(assert (! (forall ((?v0 A_a_fun$) (?v1 T_a_sum_set$)) (= (vimage$a uub$ (image$a (map_sum$a id$ ?v0) ?v1)) (vimage$a uub$ ?v1))) :named a34))
(assert (! (forall ((?v0 A_dtree_fun$) (?v1 T_a_sum_set$)) (= (vimage$ uu$ (image$ (fun_app$r (map_sum$ id$) ?v0) ?v1)) (vimage$a uub$ ?v1))) :named a35))
(assert (! (forall ((?v0 T_a_sum_T_dtree_sum_fun$) (?v1 T_T_a_sum_sum_set$)) (= (vimage$f uug$ (image$d (map_sum$b id$ ?v0) ?v1)) (vimage$g uuh$ ?v1))) :named a36))
(assert (! (forall ((?v0 T_dtree_sum_dtree_fun$) (?v1 T_T_dtree_sum_sum_set$)) (= (vimage$ uu$ (image$m (map_sum$g id$ ?v0) ?v1)) (vimage$f uug$ ?v1))) :named a37))
(assert (! (forall ((?v0 T_a_sum_dtree_fun$) (?v1 T_T_a_sum_sum_set$)) (= (vimage$ uu$ (image$o (map_sum$h id$ ?v0) ?v1)) (vimage$g uuh$ ?v1))) :named a38))
(assert (! (forall ((?v0 T_dtree_sum_a_fun$) (?v1 T_T_dtree_sum_sum_set$)) (= (vimage$a uub$ (image$i (map_sum$e id$ ?v0) ?v1)) (vimage$f uug$ ?v1))) :named a39))
(assert (! (forall ((?v0 T_a_sum_a_fun$) (?v1 T_T_a_sum_sum_set$)) (= (vimage$a uub$ (image$k (map_sum$f id$ ?v0) ?v1)) (vimage$g uuh$ ?v1))) :named a40))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$) (?v1 T_dtree_sum_set$)) (= (vimage$f uug$ (image$s (map_sum$j id$ ?v0) ?v1)) (vimage$ uu$ ?v1))) :named a41))
(assert (! (forall ((?v0 T$) (?v1 Dtree_dtree_fun$) (?v2 T_dtree_sum_set$)) (= (member$b (inl$ ?v0) (image$g (map_sum$d id$ ?v1) ?v2)) (member$b (inl$ ?v0) ?v2))) :named a42))
(assert (! (forall ((?v0 T$) (?v1 Dtree_a_fun$) (?v2 T_dtree_sum_set$)) (= (fun_app$b (member$ (inl$a ?v0)) (image$e (map_sum$c id$ ?v1) ?v2)) (member$b (inl$ ?v0) ?v2))) :named a43))
(assert (! (forall ((?v0 T$) (?v1 A_a_fun$) (?v2 T_a_sum_set$)) (= (fun_app$b (member$ (inl$a ?v0)) (image$a (map_sum$a id$ ?v1) ?v2)) (fun_app$b (member$ (inl$a ?v0)) ?v2))) :named a44))
(assert (! (forall ((?v0 T$) (?v1 A_dtree_fun$) (?v2 T_a_sum_set$)) (= (member$b (inl$ ?v0) (image$ (fun_app$r (map_sum$ id$) ?v1) ?v2)) (fun_app$b (member$ (inl$a ?v0)) ?v2))) :named a45))
(assert (! (forall ((?v0 T$) (?v1 T_a_sum_T_dtree_sum_fun$) (?v2 T_T_a_sum_sum_set$)) (= (member$c (inl$b ?v0) (image$d (map_sum$b id$ ?v1) ?v2)) (member$d (inl$c ?v0) ?v2))) :named a46))
(assert (! (forall ((?v0 T$) (?v1 T_dtree_sum_dtree_fun$) (?v2 T_T_dtree_sum_sum_set$)) (= (member$b (inl$ ?v0) (image$m (map_sum$g id$ ?v1) ?v2)) (member$c (inl$b ?v0) ?v2))) :named a47))
(assert (! (forall ((?v0 T$) (?v1 T_a_sum_dtree_fun$) (?v2 T_T_a_sum_sum_set$)) (= (member$b (inl$ ?v0) (image$o (map_sum$h id$ ?v1) ?v2)) (member$d (inl$c ?v0) ?v2))) :named a48))
(assert (! (forall ((?v0 T$) (?v1 T_dtree_sum_a_fun$) (?v2 T_T_dtree_sum_sum_set$)) (= (fun_app$b (member$ (inl$a ?v0)) (image$i (map_sum$e id$ ?v1) ?v2)) (member$c (inl$b ?v0) ?v2))) :named a49))
(assert (! (forall ((?v0 T$) (?v1 T_a_sum_a_fun$) (?v2 T_T_a_sum_sum_set$)) (= (fun_app$b (member$ (inl$a ?v0)) (image$k (map_sum$f id$ ?v1) ?v2)) (member$d (inl$c ?v0) ?v2))) :named a50))
(assert (! (forall ((?v0 T$) (?v1 Dtree_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$c (inl$b ?v0) (image$s (map_sum$j id$ ?v1) ?v2)) (member$b (inl$ ?v0) ?v2))) :named a51))
(assert (! (forall ((?v0 A$) (?v1 A_a_fun$) (?v2 T_a_sum_set$)) (= (fun_app$b (member$ (inr$a ?v0)) (image$a (map_sum$a id$ ?v1) ?v2)) (exists ((?v3 A$)) (and (fun_app$b (member$ (inr$a ?v3)) ?v2) (= (fun_app$s ?v1 ?v3) ?v0))))) :named a52))
(assert (! (forall ((?v0 Dtree$) (?v1 A_dtree_fun$) (?v2 T_a_sum_set$)) (= (member$b (inr$ ?v0) (image$ (fun_app$r (map_sum$ id$) ?v1) ?v2)) (exists ((?v3 A$)) (and (fun_app$b (member$ (inr$a ?v3)) ?v2) (= (fun_app$a ?v1 ?v3) ?v0))))) :named a53))
(assert (! (forall ((?v0 A$) (?v1 Dtree_a_fun$) (?v2 T_dtree_sum_set$)) (= (fun_app$b (member$ (inr$a ?v0)) (image$e (map_sum$c id$ ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$b (inr$ ?v3) ?v2) (= (fun_app$t ?v1 ?v3) ?v0))))) :named a54))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 T_dtree_sum_set$)) (= (member$b (inr$ ?v0) (image$g (map_sum$d id$ ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$b (inr$ ?v3) ?v2) (= (fun_app$u ?v1 ?v3) ?v0))))) :named a55))
(assert (! (forall ((?v0 A$) (?v1 T_dtree_sum_a_fun$) (?v2 T_T_dtree_sum_sum_set$)) (= (fun_app$b (member$ (inr$a ?v0)) (image$i (map_sum$e id$ ?v1) ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$c (inr$b ?v3) ?v2) (= (fun_app$v ?v1 ?v3) ?v0))))) :named a56))
(assert (! (forall ((?v0 A$) (?v1 T_a_sum_a_fun$) (?v2 T_T_a_sum_sum_set$)) (= (fun_app$b (member$ (inr$a ?v0)) (image$k (map_sum$f id$ ?v1) ?v2)) (exists ((?v3 T_a_sum$)) (and (member$d (inr$c ?v3) ?v2) (= (fun_app$w ?v1 ?v3) ?v0))))) :named a57))
(assert (! (forall ((?v0 Dtree$) (?v1 T_dtree_sum_dtree_fun$) (?v2 T_T_dtree_sum_sum_set$)) (= (member$b (inr$ ?v0) (image$m (map_sum$g id$ ?v1) ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$c (inr$b ?v3) ?v2) (= (fun_app$x ?v1 ?v3) ?v0))))) :named a58))
(assert (! (forall ((?v0 Dtree$) (?v1 T_a_sum_dtree_fun$) (?v2 T_T_a_sum_sum_set$)) (= (member$b (inr$ ?v0) (image$o (map_sum$h id$ ?v1) ?v2)) (exists ((?v3 T_a_sum$)) (and (member$d (inr$c ?v3) ?v2) (= (fun_app$y ?v1 ?v3) ?v0))))) :named a59))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 A_T_dtree_sum_fun$) (?v2 T_a_sum_set$)) (= (member$c (inr$b ?v0) (image$q (map_sum$i id$ ?v1) ?v2)) (exists ((?v3 A$)) (and (fun_app$b (member$ (inr$a ?v3)) ?v2) (= (fun_app$z ?v1 ?v3) ?v0))))) :named a60))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 Dtree_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$c (inr$b ?v0) (image$s (map_sum$j id$ ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$b (inr$ ?v3) ?v2) (= (fun_app$e ?v1 ?v3) ?v0))))) :named a61))
(assert (! (= (frr$ (minus$ ns$ (insert$ n$ bot$)) tr$) (sup$a (collect$ uua$))) :named a62))
(assert (! (forall ((?v0 T_a_sum_set$) (?v1 T_a_sum_set_set$)) (= (sup$b (insert$a ?v0 ?v1)) (sup$c ?v0 (sup$b ?v1)))) :named a63))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set_set$)) (= (sup$d (insert$b ?v0 ?v1)) (sup$e ?v0 (sup$d ?v1)))) :named a64))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set_set$)) (= (sup$f (insert$c ?v0 ?v1)) (sup$g ?v0 (sup$f ?v1)))) :named a65))
(assert (! (forall ((?v0 N_set$) (?v1 N_set_set$)) (= (sup$h (insert$d ?v0 ?v1)) (sup$i ?v0 (sup$h ?v1)))) :named a66))
(assert (! (forall ((?v0 T_set$) (?v1 T_set_set$)) (= (sup$a (insert$e ?v0 ?v1)) (sup$ ?v0 (sup$a ?v1)))) :named a67))
(assert (! (forall ((?v0 T_a_sum_set$)) (= (sup$b (insert$a ?v0 bot$a)) ?v0)) :named a68))
(assert (! (forall ((?v0 N_set_set$)) (= (sup$d (insert$b ?v0 bot$b)) ?v0)) :named a69))
(assert (! (forall ((?v0 T_set_set$)) (= (sup$f (insert$c ?v0 bot$c)) ?v0)) :named a70))
(assert (! (forall ((?v0 N_set$)) (= (sup$h (insert$d ?v0 bot$d)) ?v0)) :named a71))
(assert (! (forall ((?v0 T_set$)) (= (sup$a (insert$e ?v0 bot$e)) ?v0)) :named a72))
(assert (! (forall ((?v0 T_a_sum_set$) (?v1 T_a_sum_set_set$)) (= (insert$a ?v0 (minus$a ?v1 (insert$a ?v0 bot$a))) (insert$a ?v0 ?v1))) :named a73))
(assert (! (forall ((?v0 N_set_set$) (?v1 N_set_set_set$)) (= (insert$b ?v0 (minus$b ?v1 (insert$b ?v0 bot$b))) (insert$b ?v0 ?v1))) :named a74))
(assert (! (forall ((?v0 T_set_set$) (?v1 T_set_set_set$)) (= (insert$c ?v0 (minus$c ?v1 (insert$c ?v0 bot$c))) (insert$c ?v0 ?v1))) :named a75))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (= (insert$f ?v0 (minus$d ?v1 (insert$f ?v0 bot$f))) (insert$f ?v0 ?v1))) :named a76))
(assert (! (forall ((?v0 T_set$) (?v1 T_set_set$)) (= (insert$e ?v0 (minus$e ?v1 (insert$e ?v0 bot$e))) (insert$e ?v0 ?v1))) :named a77))
(assert (! (forall ((?v0 T$) (?v1 T_set$)) (= (insert$g ?v0 (minus$f ?v1 (insert$g ?v0 bot$g))) (insert$g ?v0 ?v1))) :named a78))
(assert (! (forall ((?v0 N_set$) (?v1 N_set_set$)) (= (insert$d ?v0 (minus$g ?v1 (insert$d ?v0 bot$d))) (insert$d ?v0 ?v1))) :named a79))
(assert (! (forall ((?v0 T_a_sum$) (?v1 T_a_sum_set$)) (= (insert$h ?v0 (minus$h ?v1 (insert$h ?v0 bot$h))) (insert$h ?v0 ?v1))) :named a80))
(assert (! (forall ((?v0 N$) (?v1 N_set$)) (= (insert$ ?v0 (minus$ ?v1 (insert$ ?v0 bot$))) (insert$ ?v0 ?v1))) :named a81))
(assert (! (= (sup$j bot$i) bot$a) :named a82))
(assert (! (= (sup$k bot$j) bot$b) :named a83))
(assert (! (= (sup$l bot$k) bot$c) :named a84))
(assert (! (= (sup$m bot$l) bot$f) :named a85))
(assert (! (= (sup$f bot$c) bot$e) :named a86))
(assert (! (= (sup$d bot$b) bot$d) :named a87))
(assert (! (= (sup$b bot$a) bot$h) :named a88))
(assert (! (= (sup$h bot$d) bot$) :named a89))
(assert (! (= (sup$a bot$e) bot$g) :named a90))
(assert (! (forall ((?v0 A$)) (=> (fun_app$b (member$ (inr$a ?v0)) tns$) (wf$ (fun_app$a ftr$ ?v0)))) :named a91))
(assert (! (forall ((?v0 T_a_sum_set$)) (= (collect$a (uui$ ?v0)) (insert$a ?v0 bot$a))) :named a92))
(assert (! (forall ((?v0 N_set_set$)) (= (collect$b (uuj$ ?v0)) (insert$b ?v0 bot$b))) :named a93))
(assert (! (forall ((?v0 T_set_set$)) (= (collect$c (uuk$ ?v0)) (insert$c ?v0 bot$c))) :named a94))
(assert (! (forall ((?v0 T_dtree_sum$)) (= (collect$d (uul$ ?v0)) (insert$f ?v0 bot$f))) :named a95))
(assert (! (forall ((?v0 T$)) (= (collect$e (uum$ ?v0)) (insert$g ?v0 bot$g))) :named a96))
(assert (! (forall ((?v0 N_set$)) (= (collect$f (uun$ ?v0)) (insert$d ?v0 bot$d))) :named a97))
(assert (! (forall ((?v0 T_a_sum$)) (= (collect$g (uuo$ ?v0)) (insert$h ?v0 bot$h))) :named a98))
(assert (! (forall ((?v0 T_set$)) (= (collect$ (uup$ ?v0)) (insert$e ?v0 bot$e))) :named a99))
(assert (! (forall ((?v0 N$)) (= (collect$h (uuq$ ?v0)) (insert$ ?v0 bot$))) :named a100))
(assert (! (forall ((?v0 N$)) (= (fun_app$o (member$a ?v0) bot$) false)) :named a101))
(assert (! (forall ((?v0 T_a_sum$)) (= (fun_app$b (member$ ?v0) bot$h) false)) :named a102))
(assert (! (forall ((?v0 T$)) (= (fun_app$ (member$e ?v0) bot$g) false)) :named a103))
(assert (! (forall ((?v0 T_set$)) (= (fun_app$m (member$f ?v0) bot$e) false)) :named a104))
(assert (! (forall ((?v0 N_set$)) (= (fun_app$n (member$g ?v0) bot$d) false)) :named a105))
(assert (! (forall ((?v0 T_dtree_sum$)) (= (member$b ?v0 bot$f) false)) :named a106))
(assert (! (forall ((?v0 N_set_set$)) (= (member$h ?v0 bot$b) false)) :named a107))
(assert (! (forall ((?v0 T_set_set$)) (= (member$i ?v0 bot$c) false)) :named a108))
(assert (! (forall ((?v0 T_a_sum_set$)) (= (member$j ?v0 bot$a) false)) :named a109))
(assert (! (forall ((?v0 T_T_dtree_sum_sum$)) (= (member$c ?v0 bot$m) false)) :named a110))
(assert (! (forall ((?v0 T_a_sum_set_bool_fun$)) (= (= bot$a (collect$a ?v0)) (forall ((?v1 T_a_sum_set$)) (not (fun_app$b ?v0 ?v1))))) :named a111))
(assert (! (forall ((?v0 N_set_set_bool_fun$)) (= (= bot$b (collect$b ?v0)) (forall ((?v1 N_set_set$)) (not (fun_app$n ?v0 ?v1))))) :named a112))
(assert (! (forall ((?v0 T_set_set_bool_fun$)) (= (= bot$c (collect$c ?v0)) (forall ((?v1 T_set_set$)) (not (fun_app$m ?v0 ?v1))))) :named a113))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$)) (= (= bot$f (collect$d ?v0)) (forall ((?v1 T_dtree_sum$)) (not (fun_app$k ?v0 ?v1))))) :named a114))
(assert (! (forall ((?v0 T_bool_fun$)) (= (= bot$g (collect$e ?v0)) (forall ((?v1 T$)) (not (fun_app$p ?v0 ?v1))))) :named a115))
(assert (! (forall ((?v0 N_set_bool_fun$)) (= (= bot$d (collect$f ?v0)) (forall ((?v1 N_set$)) (not (fun_app$o ?v0 ?v1))))) :named a116))
(assert (! (forall ((?v0 T_a_sum_bool_fun$)) (= (= bot$h (collect$g ?v0)) (forall ((?v1 T_a_sum$)) (not (fun_app$l ?v0 ?v1))))) :named a117))
(assert (! (forall ((?v0 T_set_bool_fun$)) (= (= bot$e (collect$ ?v0)) (forall ((?v1 T_set$)) (not (fun_app$ ?v0 ?v1))))) :named a118))
(assert (! (forall ((?v0 N_bool_fun$)) (= (= bot$ (collect$h ?v0)) (forall ((?v1 N$)) (not (fun_app$q ?v0 ?v1))))) :named a119))
(assert (! (forall ((?v0 N_set$)) (= (forall ((?v1 N$)) (not (fun_app$o (member$a ?v1) ?v0))) (= ?v0 bot$))) :named a120))
(assert (! (forall ((?v0 T_a_sum_set$)) (= (forall ((?v1 T_a_sum$)) (not (fun_app$b (member$ ?v1) ?v0))) (= ?v0 bot$h))) :named a121))
(assert (! (forall ((?v0 T_set$)) (= (forall ((?v1 T$)) (not (fun_app$ (member$e ?v1) ?v0))) (= ?v0 bot$g))) :named a122))
(assert (! (forall ((?v0 T_set_set$)) (= (forall ((?v1 T_set$)) (not (fun_app$m (member$f ?v1) ?v0))) (= ?v0 bot$e))) :named a123))
(assert (! (forall ((?v0 N_set_set$)) (= (forall ((?v1 N_set$)) (not (fun_app$n (member$g ?v1) ?v0))) (= ?v0 bot$d))) :named a124))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (= (forall ((?v1 T_dtree_sum$)) (not (member$b ?v1 ?v0))) (= ?v0 bot$f))) :named a125))
(assert (! (forall ((?v0 N_set_set_set$)) (= (forall ((?v1 N_set_set$)) (not (member$h ?v1 ?v0))) (= ?v0 bot$b))) :named a126))
(assert (! (forall ((?v0 T_set_set_set$)) (= (forall ((?v1 T_set_set$)) (not (member$i ?v1 ?v0))) (= ?v0 bot$c))) :named a127))
(assert (! (forall ((?v0 T_a_sum_set_set$)) (= (forall ((?v1 T_a_sum_set$)) (not (member$j ?v1 ?v0))) (= ?v0 bot$a))) :named a128))
(assert (! (forall ((?v0 T_T_dtree_sum_sum_set$)) (= (forall ((?v1 T_T_dtree_sum_sum$)) (not (member$c ?v1 ?v0))) (= ?v0 bot$m))) :named a129))
(check-sat)
;(get-unsat-core)
