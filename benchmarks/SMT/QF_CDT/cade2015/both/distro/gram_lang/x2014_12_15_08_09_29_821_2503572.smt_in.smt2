; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 2
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort N_N_fun$ 0)
(declare-sort N_T_fun$ 0)
(declare-sort T_N_fun$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort Dtree_N_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort N_T_dtree_sum_fun$ 0)
(declare-sort T_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_N_fun$ 0)
(declare-sort T_dtree_sum_T_fun$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort Dtree_T_dtree_sum_set_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun ta$ () T$)
(declare-fun uu$ () T_T_dtree_sum_fun$)
(declare-fun nsa$ () N_set$)
(declare-fun tr0$ () Dtree$)
(declare-fun tra$ () Dtree$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun root$ (Dtree$) N$)
(declare-fun tr1a$ () Dtree$)
(declare-fun hsubst$ (Dtree$) Dtree_dtree_fun$)
(declare-fun member$ (T$ T_set$) Bool)
(declare-fun unfold$ (Dtree_N_fun$ Dtree_T_dtree_sum_set_fun$) Dtree_dtree_fun$)
(declare-fun vimage$ (T_T_dtree_sum_fun$ T_dtree_sum_set$) T_set$)
(declare-fun collect$ (N_bool_fun$) N_set$)
(declare-fun fun_app$ (T_T_dtree_sum_fun$ T$) T_dtree_sum$)
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun member$b (N$ N_set$) Bool)
(declare-fun vimage$a (T_T_fun$ T_set$) T_set$)
(declare-fun vimage$b (T_N_fun$ N_set$) T_set$)
(declare-fun vimage$c (T_dtree_sum_T_fun$ T_set$) T_dtree_sum_set$)
(declare-fun vimage$d (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun vimage$e (T_dtree_sum_N_fun$ N_set$) T_dtree_sum_set$)
(declare-fun vimage$f (N_T_fun$ T_set$) N_set$)
(declare-fun vimage$g (N_T_dtree_sum_fun$ T_dtree_sum_set$) N_set$)
(declare-fun vimage$h (N_N_fun$ N_set$) N_set$)
(declare-fun collect$a (T_dtree_sum_bool_fun$) T_dtree_sum_set$)
(declare-fun collect$b (T_bool_fun$) T_set$)
(declare-fun fun_app$a (T_T_fun$ T$) T$)
(declare-fun fun_app$b (T_N_fun$ T$) N$)
(declare-fun fun_app$c (T_dtree_sum_T_fun$ T_dtree_sum$) T$)
(declare-fun fun_app$d (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$) T_dtree_sum$)
(declare-fun fun_app$e (T_dtree_sum_N_fun$ T_dtree_sum$) N$)
(declare-fun fun_app$f (N_T_fun$ N$) T$)
(declare-fun fun_app$g (N_T_dtree_sum_fun$ N$) T_dtree_sum$)
(declare-fun fun_app$h (N_N_fun$ N$) N$)
(declare-fun fun_app$i (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$j (N_bool_fun$ N$) Bool)
(declare-fun fun_app$k (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun fun_app$l (T_bool_fun$ T$) Bool)
(declare-fun fun_app$m (Dtree_T_dtree_sum_set_fun$ Dtree$) T_dtree_sum_set$)
(declare-fun hsubst_c$ (Dtree$) Dtree_T_dtree_sum_set_fun$)
(declare-fun hsubst_r$ () Dtree_N_fun$)
(assert (! (forall ((?v0 T$)) (! (= (fun_app$ uu$ ?v0) (inl$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (member$ ta$ (vimage$ uu$ (cont$ tr0$)))) :named a1))
(assert (! (member$a (inl$ ta$) (cont$ tr1a$)) :named a2))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T_set$)) (= (member$ ?v0 (vimage$a ?v1 ?v2)) (member$ (fun_app$a ?v1 ?v0) ?v2))) :named a5))
(assert (! (forall ((?v0 T$) (?v1 T_N_fun$) (?v2 N_set$)) (= (member$ ?v0 (vimage$b ?v1 ?v2)) (member$b (fun_app$b ?v1 ?v0) ?v2))) :named a6))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_fun$) (?v2 T_set$)) (= (member$a ?v0 (vimage$c ?v1 ?v2)) (member$ (fun_app$c ?v1 ?v0) ?v2))) :named a7))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$a ?v0 (vimage$d ?v1 ?v2)) (member$a (fun_app$d ?v1 ?v0) ?v2))) :named a8))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_N_fun$) (?v2 N_set$)) (= (member$a ?v0 (vimage$e ?v1 ?v2)) (member$b (fun_app$e ?v1 ?v0) ?v2))) :named a9))
(assert (! (forall ((?v0 N$) (?v1 N_T_fun$) (?v2 T_set$)) (= (member$b ?v0 (vimage$f ?v1 ?v2)) (member$ (fun_app$f ?v1 ?v0) ?v2))) :named a10))
(assert (! (forall ((?v0 N$) (?v1 N_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$b ?v0 (vimage$g ?v1 ?v2)) (member$a (fun_app$g ?v1 ?v0) ?v2))) :named a11))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (= (member$b ?v0 (vimage$h ?v1 ?v2)) (member$b (fun_app$h ?v1 ?v0) ?v2))) :named a12))
(assert (! (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$ ?v0 (vimage$ ?v1 ?v2)) (member$a (fun_app$ ?v1 ?v0) ?v2))) :named a13))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$a ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$ ?v1 (vimage$a ?v0 ?v3)))) :named a14))
(assert (! (forall ((?v0 T_dtree_sum_T_fun$) (?v1 T_dtree_sum$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$c ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$a ?v1 (vimage$c ?v0 ?v3)))) :named a15))
(assert (! (forall ((?v0 N_T_fun$) (?v1 N$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$f ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$b ?v1 (vimage$f ?v0 ?v3)))) :named a16))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$d ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$a ?v1 (vimage$d ?v0 ?v3)))) :named a17))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$) (?v1 N$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$g ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$b ?v1 (vimage$g ?v0 ?v3)))) :named a18))
(assert (! (forall ((?v0 T_N_fun$) (?v1 T$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$b ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$ ?v1 (vimage$b ?v0 ?v3)))) :named a19))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$) (?v1 T_dtree_sum$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$e ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$a ?v1 (vimage$e ?v0 ?v3)))) :named a20))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$h ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$b ?v1 (vimage$h ?v0 ?v3)))) :named a21))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$ ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$ ?v1 (vimage$ ?v0 ?v3)))) :named a22))
(assert (! (= (root$ tr1a$) (root$ tr0$)) :named a23))
(assert (! (= tr1a$ (fun_app$i (hsubst$ tr0$) tra$)) :named a24))
(assert (! (forall ((?v0 T$) (?v1 T$)) (=> (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a25))
(assert (! (forall ((?v0 N_bool_fun$) (?v1 T_dtree_sum_N_fun$) (?v2 T_dtree_sum_bool_fun$)) (=> (forall ((?v3 T_dtree_sum$)) (= (fun_app$j ?v0 (fun_app$e ?v1 ?v3)) (fun_app$k ?v2 ?v3))) (= (vimage$e ?v1 (collect$ ?v0)) (collect$a ?v2)))) :named a26))
(assert (! (forall ((?v0 N_bool_fun$) (?v1 N_N_fun$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (= (fun_app$j ?v0 (fun_app$h ?v1 ?v3)) (fun_app$j ?v2 ?v3))) (= (vimage$h ?v1 (collect$ ?v0)) (collect$ ?v2)))) :named a27))
(assert (! (forall ((?v0 N_bool_fun$) (?v1 T_N_fun$) (?v2 T_bool_fun$)) (=> (forall ((?v3 T$)) (= (fun_app$j ?v0 (fun_app$b ?v1 ?v3)) (fun_app$l ?v2 ?v3))) (= (vimage$b ?v1 (collect$ ?v0)) (collect$b ?v2)))) :named a28))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 N_T_dtree_sum_fun$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (= (fun_app$k ?v0 (fun_app$g ?v1 ?v3)) (fun_app$j ?v2 ?v3))) (= (vimage$g ?v1 (collect$a ?v0)) (collect$ ?v2)))) :named a29))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_bool_fun$)) (=> (forall ((?v3 T_dtree_sum$)) (= (fun_app$k ?v0 (fun_app$d ?v1 ?v3)) (fun_app$k ?v2 ?v3))) (= (vimage$d ?v1 (collect$a ?v0)) (collect$a ?v2)))) :named a30))
(assert (! (forall ((?v0 T_bool_fun$) (?v1 N_T_fun$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (= (fun_app$l ?v0 (fun_app$f ?v1 ?v3)) (fun_app$j ?v2 ?v3))) (= (vimage$f ?v1 (collect$b ?v0)) (collect$ ?v2)))) :named a31))
(assert (! (forall ((?v0 T_bool_fun$) (?v1 T_dtree_sum_T_fun$) (?v2 T_dtree_sum_bool_fun$)) (=> (forall ((?v3 T_dtree_sum$)) (= (fun_app$l ?v0 (fun_app$c ?v1 ?v3)) (fun_app$k ?v2 ?v3))) (= (vimage$c ?v1 (collect$b ?v0)) (collect$a ?v2)))) :named a32))
(assert (! (forall ((?v0 T_bool_fun$) (?v1 T_T_fun$) (?v2 T_bool_fun$)) (=> (forall ((?v3 T$)) (= (fun_app$l ?v0 (fun_app$a ?v1 ?v3)) (fun_app$l ?v2 ?v3))) (= (vimage$a ?v1 (collect$b ?v0)) (collect$b ?v2)))) :named a33))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_T_dtree_sum_fun$) (?v2 T_bool_fun$)) (=> (forall ((?v3 T$)) (= (fun_app$k ?v0 (fun_app$ ?v1 ?v3)) (fun_app$l ?v2 ?v3))) (= (vimage$ ?v1 (collect$a ?v0)) (collect$b ?v2)))) :named a34))
(assert (! (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T_set$)) (=> (and (member$ ?v0 (vimage$a ?v1 ?v2)) (forall ((?v3 T$)) (=> (and (= (fun_app$a ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a35))
(assert (! (forall ((?v0 T$) (?v1 T_N_fun$) (?v2 N_set$)) (=> (and (member$ ?v0 (vimage$b ?v1 ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$b ?v1 ?v0) ?v3) (member$b ?v3 ?v2)) false))) false)) :named a36))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_fun$) (?v2 T_set$)) (=> (and (member$a ?v0 (vimage$c ?v1 ?v2)) (forall ((?v3 T$)) (=> (and (= (fun_app$c ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a37))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (and (member$a ?v0 (vimage$d ?v1 ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (= (fun_app$d ?v1 ?v0) ?v3) (member$a ?v3 ?v2)) false))) false)) :named a38))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_N_fun$) (?v2 N_set$)) (=> (and (member$a ?v0 (vimage$e ?v1 ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$e ?v1 ?v0) ?v3) (member$b ?v3 ?v2)) false))) false)) :named a39))
(assert (! (forall ((?v0 N$) (?v1 N_T_fun$) (?v2 T_set$)) (=> (and (member$b ?v0 (vimage$f ?v1 ?v2)) (forall ((?v3 T$)) (=> (and (= (fun_app$f ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a40))
(assert (! (forall ((?v0 N$) (?v1 N_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (and (member$b ?v0 (vimage$g ?v1 ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (= (fun_app$g ?v1 ?v0) ?v3) (member$a ?v3 ?v2)) false))) false)) :named a41))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (=> (and (member$b ?v0 (vimage$h ?v1 ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$h ?v1 ?v0) ?v3) (member$b ?v3 ?v2)) false))) false)) :named a42))
(assert (! (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (and (member$ ?v0 (vimage$ ?v1 ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (= (fun_app$ ?v1 ?v0) ?v3) (member$a ?v3 ?v2)) false))) false)) :named a43))
(assert (! (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T_set$)) (=> (member$ ?v0 (vimage$a ?v1 ?v2)) (member$ (fun_app$a ?v1 ?v0) ?v2))) :named a44))
(assert (! (forall ((?v0 T$) (?v1 T_N_fun$) (?v2 N_set$)) (=> (member$ ?v0 (vimage$b ?v1 ?v2)) (member$b (fun_app$b ?v1 ?v0) ?v2))) :named a45))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_fun$) (?v2 T_set$)) (=> (member$a ?v0 (vimage$c ?v1 ?v2)) (member$ (fun_app$c ?v1 ?v0) ?v2))) :named a46))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$a ?v0 (vimage$d ?v1 ?v2)) (member$a (fun_app$d ?v1 ?v0) ?v2))) :named a47))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_N_fun$) (?v2 N_set$)) (=> (member$a ?v0 (vimage$e ?v1 ?v2)) (member$b (fun_app$e ?v1 ?v0) ?v2))) :named a48))
(assert (! (forall ((?v0 N$) (?v1 N_T_fun$) (?v2 T_set$)) (=> (member$b ?v0 (vimage$f ?v1 ?v2)) (member$ (fun_app$f ?v1 ?v0) ?v2))) :named a49))
(assert (! (forall ((?v0 N$) (?v1 N_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$b ?v0 (vimage$g ?v1 ?v2)) (member$a (fun_app$g ?v1 ?v0) ?v2))) :named a50))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (=> (member$b ?v0 (vimage$h ?v1 ?v2)) (member$b (fun_app$h ?v1 ?v0) ?v2))) :named a51))
(assert (! (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$ ?v0 (vimage$ ?v1 ?v2)) (member$a (fun_app$ ?v1 ?v0) ?v2))) :named a52))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T$) (?v2 T_set$)) (=> (member$ (fun_app$a ?v0 ?v1) ?v2) (member$ ?v1 (vimage$a ?v0 ?v2)))) :named a53))
(assert (! (forall ((?v0 T_dtree_sum_T_fun$) (?v1 T_dtree_sum$) (?v2 T_set$)) (=> (member$ (fun_app$c ?v0 ?v1) ?v2) (member$a ?v1 (vimage$c ?v0 ?v2)))) :named a54))
(assert (! (forall ((?v0 N_T_fun$) (?v1 N$) (?v2 T_set$)) (=> (member$ (fun_app$f ?v0 ?v1) ?v2) (member$b ?v1 (vimage$f ?v0 ?v2)))) :named a55))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_set$)) (=> (member$a (fun_app$d ?v0 ?v1) ?v2) (member$a ?v1 (vimage$d ?v0 ?v2)))) :named a56))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$) (?v1 N$) (?v2 T_dtree_sum_set$)) (=> (member$a (fun_app$g ?v0 ?v1) ?v2) (member$b ?v1 (vimage$g ?v0 ?v2)))) :named a57))
(assert (! (forall ((?v0 T_N_fun$) (?v1 T$) (?v2 N_set$)) (=> (member$b (fun_app$b ?v0 ?v1) ?v2) (member$ ?v1 (vimage$b ?v0 ?v2)))) :named a58))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$) (?v1 T_dtree_sum$) (?v2 N_set$)) (=> (member$b (fun_app$e ?v0 ?v1) ?v2) (member$a ?v1 (vimage$e ?v0 ?v2)))) :named a59))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N$) (?v2 N_set$)) (=> (member$b (fun_app$h ?v0 ?v1) ?v2) (member$b ?v1 (vimage$h ?v0 ?v2)))) :named a60))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T$) (?v2 T_dtree_sum_set$)) (=> (member$a (fun_app$ ?v0 ?v1) ?v2) (member$ ?v1 (vimage$ ?v0 ?v2)))) :named a61))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$m (hsubst_c$ tr0$) ?v0) (ite (= (root$ ?v0) (root$ tr0$)) (cont$ tr0$) (cont$ ?v0))) :pattern ((fun_app$m (hsubst_c$ tr0$) ?v0)))) :named a62))
(assert (! (member$b (root$ tr1a$) nsa$) :named a63))
(assert (! (forall ((?v0 Dtree$)) (=> (= (root$ ?v0) (root$ tr0$)) (= (fun_app$i (hsubst$ tr0$) ?v0) (fun_app$i (hsubst$ tr0$) tr0$)))) :named a64))
(assert (! (forall ((?v0 Dtree$)) (= (root$ (fun_app$i (hsubst$ tr0$) ?v0)) (root$ ?v0))) :named a65))
(assert (! (forall ((?v0 Dtree$)) (=> (not (= (root$ ?v0) (root$ tr0$))) (= (vimage$ uu$ (cont$ (fun_app$i (hsubst$ tr0$) ?v0))) (vimage$ uu$ (cont$ ?v0))))) :named a66))
(assert (! (forall ((?v0 Dtree$)) (=> (= (root$ ?v0) (root$ tr0$)) (= (vimage$ uu$ (cont$ (fun_app$i (hsubst$ tr0$) ?v0))) (vimage$ uu$ (cont$ tr0$))))) :named a67))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (root$ (fun_app$i (hsubst$ ?v0) ?v1)) (root$ ?v1))) :named a68))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (root$ ?v0) (root$ ?v1)) (= (fun_app$i (hsubst$ ?v1) ?v0) (fun_app$i (hsubst$ ?v1) ?v1)))) :named a69))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (! (= (fun_app$m (hsubst_c$ ?v0) ?v1) (ite (= (root$ ?v1) (root$ ?v0)) (cont$ ?v0) (cont$ ?v1))) :pattern ((fun_app$m (hsubst_c$ ?v0) ?v1)))) :named a70))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (not (= (root$ ?v0) (root$ ?v1))) (= (vimage$ uu$ (cont$ (fun_app$i (hsubst$ ?v1) ?v0))) (vimage$ uu$ (cont$ ?v0))))) :named a71))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (root$ ?v0) (root$ ?v1)) (= (vimage$ uu$ (cont$ (fun_app$i (hsubst$ ?v1) ?v0))) (vimage$ uu$ (cont$ ?v1))))) :named a72))
(assert (! (= (hsubst$ tr0$) (unfold$ hsubst_r$ (hsubst_c$ tr0$))) :named a73))
(check-sat)
;(get-unsat-core)
