; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 438
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-datatypes () ((N_list$ (nil$) (cons$ (hd$ N$) (tl$ N_list$)))))
(declare-fun f$ () N_dtree_fun$)
(declare-fun ns$ () N_set$)
(declare-fun tr$ () Dtree$)
(declare-fun reg$ (N_dtree_fun$ Dtree$) Bool)
(declare-fun set$ (N_list$) N_set$)
(declare-fun tr1$ () Dtree$)
(declare-fun last$ (N_list$) N$)
(declare-fun path$ (N_dtree_fun$ N_list$) Bool)
(declare-fun root$ (Dtree$) N$)
(declare-fun subtr$ (N_set$ Dtree$ Dtree$) Bool)
(declare-fun member$ (N$ N_set$) Bool)
(declare-fun collect$ (N_bool_fun$) N_set$)
(declare-fun fun_app$ (N_dtree_fun$ N$) Dtree$)
(declare-fun less_eq$ (N_set$ N_set$) Bool)
(declare-fun distinct$ (N_list$) Bool)
(declare-fun fun_app$a (N_bool_fun$ N$) Bool)
(assert (! (not (exists ((?v0 N_list$)) (and (path$ f$ ?v0) (and (= (fun_app$ f$ (hd$ ?v0)) tr$) (and (= (fun_app$ f$ (last$ ?v0)) tr1$) (less_eq$ (set$ ?v0) ns$)))))) :named a0))
(assert (! (reg$ f$ tr$) :named a1))
(assert (! (subtr$ ns$ tr1$ tr$) :named a2))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (=> (forall ((?v2 N$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))) (less_eq$ ?v0 ?v1))) :named a3))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 N_set$)) (less_eq$ ?v0 ?v0)) :named a5))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 N_set$)) (=> (and (subtr$ ?v0 ?v1 ?v2) (less_eq$ ?v0 ?v3)) (subtr$ ?v3 ?v1 ?v2))) :named a6))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (=> (path$ ?v0 ?v1) (exists ((?v2 N_list$)) (and (path$ ?v0 ?v2) (and (= (hd$ ?v2) (hd$ ?v1)) (and (= (last$ ?v2) (last$ ?v1)) (and (less_eq$ (set$ ?v2) (set$ ?v1)) (distinct$ ?v2)))))))) :named a7))
(assert (! (forall ((?v0 N_list$) (?v1 N_set$)) (= (less_eq$ (set$ ?v0) ?v1) (forall ((?v2 N$)) (=> (member$ ?v2 (set$ ?v0)) (member$ ?v2 ?v1))))) :named a8))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_list$)) (=> (and (forall ((?v2 N$)) (= (root$ (fun_app$ ?v0 ?v2)) ?v2)) (path$ ?v0 ?v1)) (subtr$ (set$ ?v1) (fun_app$ ?v0 (last$ ?v1)) (fun_app$ ?v0 (hd$ ?v1))))) :named a9))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (= (= ?v0 ?v1) (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)))) :named a10))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (= (less_eq$ ?v0 ?v1) (forall ((?v2 N$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))))) :named a11))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (= (less_eq$ ?v0 ?v1) (forall ((?v2 N$)) (=> (member$ ?v2 ?v0) (member$ ?v2 ?v1))))) :named a12))
(assert (! (forall ((?v0 N_bool_fun$) (?v1 N_bool_fun$)) (=> (forall ((?v2 N$)) (=> (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2))) (less_eq$ (collect$ ?v0) (collect$ ?v1)))) :named a13))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (= ?v0 ?v1) (=> (and (less_eq$ ?v0 ?v1) (less_eq$ ?v1 ?v0)) false)) false)) :named a14))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree$)) (= (reg$ ?v0 ?v1) (forall ((?v2 N_set$) (?v3 Dtree$)) (=> (subtr$ ?v2 ?v3 ?v1) (= ?v3 (fun_app$ ?v0 (root$ ?v3))))))) :named a15))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (subtr$ ?v0 ?v1 ?v2) (member$ (root$ ?v2) ?v0))) :named a16))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (subtr$ ?v0 ?v1 ?v2) (member$ (root$ ?v1) ?v0))) :named a17))
(check-sat)
;(get-unsat-core)
