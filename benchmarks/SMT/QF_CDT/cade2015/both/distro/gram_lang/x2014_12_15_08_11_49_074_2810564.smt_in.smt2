; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 300
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort N_list_set$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort N_list_bool_fun$ 0)
(declare-datatypes () ((N_list$ (nil$) (cons$ (hd$ N$) (tl$ N_list$)))))
(declare-fun f$ () N_dtree_fun$)
(declare-fun nl$ () N_list$)
(declare-fun uu$ (N_list_set$ N$) N_list_bool_fun$)
(declare-fun nla$ () N_list$)
(declare-fun null$ (N_list$) Bool)
(declare-fun path$ (N_dtree_fun$ N_list$) Bool)
(declare-fun shift$ (N_list_set$ N$) N_list_set$)
(declare-fun member$ (N_list$ N_list_set$) Bool)
(declare-fun thesis$ () Bool)
(declare-fun collect$ (N_list_bool_fun$) N_list_set$)
(declare-fun fun_app$ (N_list_bool_fun$ N_list$) Bool)
(declare-fun listMem$ (N$ N_list$) Bool)
(declare-fun list_ex$ (N_bool_fun$) N_list_bool_fun$)
(declare-fun member$a (N_list$) N_bool_fun$)
(declare-fun fun_app$a (N_bool_fun$ N$) Bool)
(assert (! (forall ((?v0 N_list_set$) (?v1 N$) (?v2 N_list$)) (! (= (fun_app$ (uu$ ?v0 ?v1) ?v2) (member$ (cons$ ?v1 ?v2) ?v0)) :pattern ((fun_app$ (uu$ ?v0 ?v1) ?v2)))) :named a0))
(assert (! (not thesis$) :named a1))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (=> (= nla$ (cons$ ?v0 ?v1)) thesis$)) :named a2))
(assert (! (path$ f$ nla$) :named a3))
(assert (! (forall ((?v0 N$) (?v1 N_list$) (?v2 N$) (?v3 N_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a4))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (not (= (cons$ ?v0 ?v1) ?v1))) :named a5))
(assert (! (path$ f$ nla$) :named a6))
(assert (! (forall ((?v0 N$) (?v1 N_list$) (?v2 N$)) (! (= (fun_app$a (member$a (cons$ ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$a (member$a ?v1) ?v2))) :pattern ((fun_app$a (member$a (cons$ ?v0 ?v1)) ?v2)))) :named a7))
(assert (! (forall ((?v0 N_list$) (?v1 N_list_set$) (?v2 N$)) (=> (member$ ?v0 (shift$ ?v1 ?v2)) (member$ (cons$ ?v2 ?v0) ?v1))) :named a8))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N$) (?v2 N_list$)) (=> (and (path$ ?v0 (cons$ ?v1 ?v2)) (not (= ?v2 nil$))) (path$ ?v0 ?v2))) :named a9))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N$)) (path$ ?v0 (cons$ ?v1 nil$))) :named a10))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (! (= (null$ (cons$ ?v0 ?v1)) false) :pattern ((cons$ ?v0 ?v1)))) :named a11))
(assert (! (forall ((?v0 N_bool_fun$) (?v1 N$) (?v2 N_list$)) (! (= (fun_app$ (list_ex$ ?v0) (cons$ ?v1 ?v2)) (or (fun_app$a ?v0 ?v1) (fun_app$ (list_ex$ ?v0) ?v2))) :pattern ((fun_app$ (list_ex$ ?v0) (cons$ ?v1 ?v2))))) :named a12))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (= (listMem$ ?v0 ?v1) (or (exists ((?v2 N$) (?v3 N_list$)) (and (= ?v0 ?v2) (= ?v1 (cons$ ?v2 ?v3)))) (exists ((?v2 N$) (?v3 N_list$) (?v4 N$)) (and (= ?v0 ?v2) (and (= ?v1 (cons$ ?v4 ?v3)) (listMem$ ?v2 ?v3))))))) :named a13))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (=> (and (listMem$ ?v0 ?v1) (and (forall ((?v2 N$) (?v3 N_list$)) (=> (and (= ?v0 ?v2) (= ?v1 (cons$ ?v2 ?v3))) false)) (forall ((?v2 N$) (?v3 N_list$) (?v4 N$)) (=> (and (= ?v0 ?v2) (and (= ?v1 (cons$ ?v4 ?v3)) (listMem$ ?v2 ?v3))) false)))) false)) :named a14))
(assert (! (path$ f$ nl$) :named a15))
(assert (! (forall ((?v0 N_bool_fun$)) (! (= (fun_app$ (list_ex$ ?v0) nil$) false) :pattern ((list_ex$ ?v0)))) :named a16))
(assert (! (forall ((?v0 N_list$)) (= (= ?v0 nil$) (null$ ?v0))) :named a17))
(assert (! (forall ((?v0 N_list_set$) (?v1 N$)) (= (shift$ ?v0 ?v1) (collect$ (uu$ ?v0 ?v1)))) :named a18))
(check-sat)
;(get-unsat-core)
