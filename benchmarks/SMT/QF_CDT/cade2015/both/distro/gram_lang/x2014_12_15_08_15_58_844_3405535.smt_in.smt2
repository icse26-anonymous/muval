; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 436
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort N_set_set$ 0)
(declare-sort T_set_set$ 0)
(declare-sort N_N_sum_set$ 0)
(declare-sort N_T_sum_set$ 0)
(declare-sort T_N_sum_set$ 0)
(declare-sort T_T_sum_set$ 0)
(declare-sort N_N_prod_set$ 0)
(declare-sort N_T_prod_set$ 0)
(declare-sort T_N_prod_set$ 0)
(declare-sort T_T_prod_set$ 0)
(declare-sort N_set_set_set$ 0)
(declare-sort T_set_set_set$ 0)
(declare-sort T_N_sum_set_set$ 0)
(declare-sort N_T_N_sum_sum_set$ 0)
(declare-sort T_N_sum_N_sum_set$ 0)
(declare-sort T_N_sum_T_sum_set$ 0)
(declare-sort T_T_N_sum_sum_set$ 0)
(declare-sort N_T_N_sum_prod_set$ 0)
(declare-sort T_N_sum_N_prod_set$ 0)
(declare-sort T_N_sum_T_prod_set$ 0)
(declare-sort T_T_N_sum_prod_set$ 0)
(declare-sort T_N_sum_set_set_set$ 0)
(declare-sort N_T_N_sum_set_sum_set$ 0)
(declare-sort T_N_sum_set_T_sum_set$ 0)
(declare-sort T_T_N_sum_set_sum_set$ 0)
(declare-sort N_T_N_sum_set_prod_set$ 0)
(declare-sort T_N_sum_set_T_prod_set$ 0)
(declare-sort T_N_sum_T_N_sum_sum_set$ 0)
(declare-sort T_N_sum_set_set_set_set$ 0)
(declare-sort T_N_sum_T_N_sum_prod_set$ 0)
(declare-sort T_N_sum_T_N_sum_sum_set_set$ 0)
(declare-sort T_N_sum_T_N_sum_prod_set_set$ 0)
(declare-sort N_T_N_sum_T_N_sum_sum_sum_set$ 0)
(declare-sort T_N_sum_T_N_sum_prod_set_set_set$ 0)
(declare-datatypes () ((N_T_N_sum_set_prod$ (pair$ (fst$ N$) (snd$ T_N_sum_set$)))))
(declare-fun n$ () N$)
(declare-fun p$ () N_T_N_sum_set_prod_set$)
(declare-fun s$ (N$) T_N_sum_set$)
(declare-fun ns$ () N_set$)
(declare-fun h_c$ (Dtree$ N$) T_N_sum_set$)
(declare-fun tns$ () T_N_sum_set$)
(declare-fun top$ () T_N_sum_set$)
(declare-fun plus$ (T_set$ N_set$) T_N_sum_set$)
(declare-fun top$a () T_set$)
(declare-fun top$b () N_set$)
(declare-fun top$c () T_N_sum_T_N_sum_sum_set$)
(declare-fun top$d () T_T_sum_set$)
(declare-fun top$e () N_T_sum_set$)
(declare-fun top$f () N_N_sum_set$)
(declare-fun top$g () T_N_sum_T_sum_set$)
(declare-fun top$h () T_N_sum_N_sum_set$)
(declare-fun top$i () T_T_N_sum_sum_set$)
(declare-fun top$j () N_T_N_sum_sum_set$)
(declare-fun top$k () T_N_sum_set_T_sum_set$)
(declare-fun top$l () T_N_sum_set_set$)
(declare-fun top$m () T_N_sum_T_N_sum_prod_set$)
(declare-fun top$n () T_T_prod_set$)
(declare-fun top$o () T_N_prod_set$)
(declare-fun top$p () N_T_prod_set$)
(declare-fun top$q () N_N_prod_set$)
(declare-fun top$r () T_N_sum_T_prod_set$)
(declare-fun top$s () T_N_sum_N_prod_set$)
(declare-fun top$t () T_T_N_sum_prod_set$)
(declare-fun top$u () N_T_N_sum_prod_set$)
(declare-fun top$v () T_N_sum_set_T_prod_set$)
(declare-fun top$w () T_set_set$)
(declare-fun top$x () N_set_set$)
(declare-fun top$y () T_N_sum_set_set_set$)
(declare-fun top$z () T_N_sum_T_N_sum_prod_set_set$)
(declare-fun plus$a (T_N_sum_set$ T_N_sum_set$) T_N_sum_T_N_sum_sum_set$)
(declare-fun plus$b (T_set$ T_set$) T_T_sum_set$)
(declare-fun plus$c (N_set$ T_set$) N_T_sum_set$)
(declare-fun plus$d (N_set$ N_set$) N_N_sum_set$)
(declare-fun plus$e (T_N_sum_set$ T_set$) T_N_sum_T_sum_set$)
(declare-fun plus$f (T_N_sum_set$ N_set$) T_N_sum_N_sum_set$)
(declare-fun plus$g (T_set$ T_N_sum_set$) T_T_N_sum_sum_set$)
(declare-fun plus$h (N_set$ T_N_sum_set$) N_T_N_sum_sum_set$)
(declare-fun plus$i (T_set$ T_N_sum_set_set$) T_T_N_sum_set_sum_set$)
(declare-fun plus$j (N_set$ T_N_sum_T_N_sum_sum_set$) N_T_N_sum_T_N_sum_sum_sum_set$)
(declare-fun plus$k (N_set$ T_N_sum_set_set$) N_T_N_sum_set_sum_set$)
(declare-fun top$aa () T_N_sum_T_N_sum_sum_set_set$)
(declare-fun top$ab () T_set_set_set$)
(declare-fun top$ac () N_set_set_set$)
(declare-fun top$ad () T_N_sum_set_set_set_set$)
(declare-fun top$ae () T_N_sum_T_N_sum_prod_set_set_set$)
(declare-fun finite$ (T_N_sum_set$) Bool)
(declare-fun member$ (N$ N_set$) Bool)
(declare-fun finite$a (T_set$) Bool)
(declare-fun finite$b (N_set$) Bool)
(declare-fun finite$c (T_N_sum_T_N_sum_sum_set$) Bool)
(declare-fun finite$d (T_T_sum_set$) Bool)
(declare-fun finite$e (N_T_sum_set$) Bool)
(declare-fun finite$f (N_N_sum_set$) Bool)
(declare-fun finite$g (T_N_sum_T_sum_set$) Bool)
(declare-fun finite$h (T_N_sum_N_sum_set$) Bool)
(declare-fun finite$i (T_T_N_sum_sum_set$) Bool)
(declare-fun finite$j (N_T_N_sum_sum_set$) Bool)
(declare-fun finite$k (T_T_N_sum_set_sum_set$) Bool)
(declare-fun finite$l (T_N_sum_set_set$) Bool)
(declare-fun finite$m (N_T_N_sum_T_N_sum_sum_sum_set$) Bool)
(declare-fun finite$n (N_T_N_sum_set_sum_set$) Bool)
(declare-fun finite$o (T_N_sum_set_T_sum_set$) Bool)
(declare-fun finite$p (T_N_sum_T_N_sum_prod_set$) Bool)
(declare-fun finite$q (T_T_prod_set$) Bool)
(declare-fun finite$r (T_N_prod_set$) Bool)
(declare-fun finite$s (N_T_prod_set$) Bool)
(declare-fun finite$t (N_N_prod_set$) Bool)
(declare-fun finite$u (T_N_sum_T_prod_set$) Bool)
(declare-fun finite$v (T_N_sum_N_prod_set$) Bool)
(declare-fun finite$w (T_T_N_sum_prod_set$) Bool)
(declare-fun finite$x (N_T_N_sum_prod_set$) Bool)
(declare-fun finite$y (T_N_sum_set_T_prod_set$) Bool)
(declare-fun finite$z (T_set_set$) Bool)
(declare-fun member$a (N_T_N_sum_set_prod$ N_T_N_sum_set_prod_set$) Bool)
(declare-fun finite$aa (N_set_set$) Bool)
(declare-fun finite$ab (T_N_sum_set_set_set$) Bool)
(declare-fun finite$ac (T_N_sum_T_N_sum_prod_set_set$) Bool)
(declare-fun finite$ad (T_N_sum_T_N_sum_sum_set_set$) Bool)
(declare-fun finite$ae (T_set_set_set$) Bool)
(declare-fun finite$af (N_set_set_set$) Bool)
(declare-fun finite$ag (T_N_sum_set_set_set_set$) Bool)
(declare-fun finite$ah (T_N_sum_T_N_sum_prod_set_set_set$) Bool)
(assert (! (not (finite$ tns$)) :named a0))
(assert (! (member$ n$ ns$) :named a1))
(assert (! (forall ((?v0 N$) (?v1 T_N_sum_set$)) (=> (member$a (pair$ ?v0 ?v1) p$) (finite$ ?v1))) :named a2))
(assert (! (member$a (pair$ n$ tns$) p$) :named a3))
(assert (! (forall ((?v0 Dtree$) (?v1 N$)) (finite$ (h_c$ ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 N$)) (finite$ (s$ ?v0))) :named a5))
(assert (! (forall ((?v0 T_set$) (?v1 N_set$)) (= (finite$ (plus$ ?v0 ?v1)) (and (finite$a ?v0) (finite$b ?v1)))) :named a6))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set$)) (= (finite$c (plus$a ?v0 ?v1)) (and (finite$ ?v0) (finite$ ?v1)))) :named a7))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (= (finite$d (plus$b ?v0 ?v1)) (and (finite$a ?v0) (finite$a ?v1)))) :named a8))
(assert (! (forall ((?v0 N_set$) (?v1 T_set$)) (= (finite$e (plus$c ?v0 ?v1)) (and (finite$b ?v0) (finite$a ?v1)))) :named a9))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (= (finite$f (plus$d ?v0 ?v1)) (and (finite$b ?v0) (finite$b ?v1)))) :named a10))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_set$)) (= (finite$g (plus$e ?v0 ?v1)) (and (finite$ ?v0) (finite$a ?v1)))) :named a11))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 N_set$)) (= (finite$h (plus$f ?v0 ?v1)) (and (finite$ ?v0) (finite$b ?v1)))) :named a12))
(assert (! (forall ((?v0 T_set$) (?v1 T_N_sum_set$)) (= (finite$i (plus$g ?v0 ?v1)) (and (finite$a ?v0) (finite$ ?v1)))) :named a13))
(assert (! (forall ((?v0 N_set$) (?v1 T_N_sum_set$)) (= (finite$j (plus$h ?v0 ?v1)) (and (finite$b ?v0) (finite$ ?v1)))) :named a14))
(assert (! (forall ((?v0 T_set$) (?v1 T_N_sum_set_set$)) (= (finite$k (plus$i ?v0 ?v1)) (and (finite$a ?v0) (finite$l ?v1)))) :named a15))
(assert (! (forall ((?v0 N_set$) (?v1 T_N_sum_T_N_sum_sum_set$)) (=> (finite$m (plus$j ?v0 ?v1)) (finite$b ?v0))) :named a16))
(assert (! (forall ((?v0 N_set$) (?v1 T_N_sum_set$)) (=> (finite$j (plus$h ?v0 ?v1)) (finite$b ?v0))) :named a17))
(assert (! (forall ((?v0 N_set$) (?v1 T_N_sum_set_set$)) (=> (finite$n (plus$k ?v0 ?v1)) (finite$b ?v0))) :named a18))
(assert (! (forall ((?v0 N_set$) (?v1 T_set$)) (=> (finite$e (plus$c ?v0 ?v1)) (finite$b ?v0))) :named a19))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (=> (finite$f (plus$d ?v0 ?v1)) (finite$b ?v0))) :named a20))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set$)) (=> (finite$c (plus$a ?v0 ?v1)) (finite$ ?v0))) :named a21))
(assert (! (forall ((?v0 T_set$) (?v1 N_set$)) (=> (finite$ (plus$ ?v0 ?v1)) (finite$a ?v0))) :named a22))
(assert (! (forall ((?v0 N_set$) (?v1 T_N_sum_set$)) (=> (finite$j (plus$h ?v0 ?v1)) (finite$ ?v1))) :named a23))
(assert (! (forall ((?v0 N_set$) (?v1 T_set$)) (=> (finite$e (plus$c ?v0 ?v1)) (finite$a ?v1))) :named a24))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (=> (finite$f (plus$d ?v0 ?v1)) (finite$b ?v1))) :named a25))
(assert (! (forall ((?v0 N_set$) (?v1 T_N_sum_T_N_sum_sum_set$)) (=> (finite$m (plus$j ?v0 ?v1)) (finite$c ?v1))) :named a26))
(assert (! (forall ((?v0 N_set$) (?v1 T_N_sum_set_set$)) (=> (finite$n (plus$k ?v0 ?v1)) (finite$l ?v1))) :named a27))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set$)) (=> (finite$c (plus$a ?v0 ?v1)) (finite$ ?v1))) :named a28))
(assert (! (forall ((?v0 T_set$) (?v1 N_set$)) (=> (finite$ (plus$ ?v0 ?v1)) (finite$b ?v1))) :named a29))
(assert (! (forall ((?v0 T_set$) (?v1 N_set$)) (=> (and (finite$a ?v0) (finite$b ?v1)) (finite$ (plus$ ?v0 ?v1)))) :named a30))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set$)) (=> (and (finite$ ?v0) (finite$ ?v1)) (finite$c (plus$a ?v0 ?v1)))) :named a31))
(assert (! (forall ((?v0 T_set$) (?v1 T_set$)) (=> (and (finite$a ?v0) (finite$a ?v1)) (finite$d (plus$b ?v0 ?v1)))) :named a32))
(assert (! (forall ((?v0 N_set$) (?v1 T_set$)) (=> (and (finite$b ?v0) (finite$a ?v1)) (finite$e (plus$c ?v0 ?v1)))) :named a33))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$)) (=> (and (finite$b ?v0) (finite$b ?v1)) (finite$f (plus$d ?v0 ?v1)))) :named a34))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_set$)) (=> (and (finite$ ?v0) (finite$a ?v1)) (finite$g (plus$e ?v0 ?v1)))) :named a35))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 N_set$)) (=> (and (finite$ ?v0) (finite$b ?v1)) (finite$h (plus$f ?v0 ?v1)))) :named a36))
(assert (! (forall ((?v0 T_set$) (?v1 T_N_sum_set$)) (=> (and (finite$a ?v0) (finite$ ?v1)) (finite$i (plus$g ?v0 ?v1)))) :named a37))
(assert (! (forall ((?v0 N_set$) (?v1 T_N_sum_set$)) (=> (and (finite$b ?v0) (finite$ ?v1)) (finite$j (plus$h ?v0 ?v1)))) :named a38))
(assert (! (forall ((?v0 T_set$) (?v1 T_N_sum_set_set$)) (=> (and (finite$a ?v0) (finite$l ?v1)) (finite$k (plus$i ?v0 ?v1)))) :named a39))
(assert (! (= (finite$ top$) (and (finite$a top$a) (finite$b top$b))) :named a40))
(assert (! (= (finite$c top$c) (and (finite$ top$) (finite$ top$))) :named a41))
(assert (! (= (finite$d top$d) (and (finite$a top$a) (finite$a top$a))) :named a42))
(assert (! (= (finite$e top$e) (and (finite$b top$b) (finite$a top$a))) :named a43))
(assert (! (= (finite$f top$f) (and (finite$b top$b) (finite$b top$b))) :named a44))
(assert (! (= (finite$g top$g) (and (finite$ top$) (finite$a top$a))) :named a45))
(assert (! (= (finite$h top$h) (and (finite$ top$) (finite$b top$b))) :named a46))
(assert (! (= (finite$i top$i) (and (finite$a top$a) (finite$ top$))) :named a47))
(assert (! (= (finite$j top$j) (and (finite$b top$b) (finite$ top$))) :named a48))
(assert (! (= (finite$o top$k) (and (finite$l top$l) (finite$a top$a))) :named a49))
(assert (! (= (finite$p top$m) (and (finite$ top$) (finite$ top$))) :named a50))
(assert (! (= (finite$q top$n) (and (finite$a top$a) (finite$a top$a))) :named a51))
(assert (! (= (finite$r top$o) (and (finite$a top$a) (finite$b top$b))) :named a52))
(assert (! (= (finite$s top$p) (and (finite$b top$b) (finite$a top$a))) :named a53))
(assert (! (= (finite$t top$q) (and (finite$b top$b) (finite$b top$b))) :named a54))
(assert (! (= (finite$u top$r) (and (finite$ top$) (finite$a top$a))) :named a55))
(assert (! (= (finite$v top$s) (and (finite$ top$) (finite$b top$b))) :named a56))
(assert (! (= (finite$w top$t) (and (finite$a top$a) (finite$ top$))) :named a57))
(assert (! (= (finite$x top$u) (and (finite$b top$b) (finite$ top$))) :named a58))
(assert (! (= (finite$y top$v) (and (finite$l top$l) (finite$a top$a))) :named a59))
(assert (! (= (finite$l top$l) (finite$ top$)) :named a60))
(assert (! (= (finite$z top$w) (finite$a top$a)) :named a61))
(assert (! (= (finite$aa top$x) (finite$b top$b)) :named a62))
(assert (! (= (finite$ab top$y) (finite$l top$l)) :named a63))
(assert (! (= (finite$ac top$z) (finite$p top$m)) :named a64))
(assert (! (= (finite$ad top$aa) (finite$c top$c)) :named a65))
(assert (! (= (finite$ae top$ab) (finite$z top$w)) :named a66))
(assert (! (= (finite$af top$ac) (finite$aa top$x)) :named a67))
(assert (! (= (finite$ag top$ad) (finite$ab top$y)) :named a68))
(assert (! (= (finite$ah top$ae) (finite$ac top$z)) :named a69))
(check-sat)
;(get-unsat-core)
