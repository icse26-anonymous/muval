; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 166
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort N_N_fun$ 0)
(declare-sort N_T_fun$ 0)
(declare-sort T_N_fun$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort N_set_N_set_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort T_set_T_set_fun$ 0)
(declare-sort N_T_dtree_sum_fun$ 0)
(declare-sort T_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_N_fun$ 0)
(declare-sort T_dtree_sum_T_fun$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun ta$ () T$)
(declare-fun uu$ () T_T_dtree_sum_fun$)
(declare-fun bot$ () N_set$)
(declare-fun nsa$ () N_set$)
(declare-fun tr0$ () Dtree$)
(declare-fun tra$ () Dtree$)
(declare-fun uua$ (T_dtree_sum$) T_dtree_sum_bool_fun$)
(declare-fun uub$ (T$) T_bool_fun$)
(declare-fun uuc$ (N$) N_bool_fun$)
(declare-fun uud$ (T_dtree_sum$) T_dtree_sum_bool_fun$)
(declare-fun uue$ (T$) T_bool_fun$)
(declare-fun uuf$ (N$) N_bool_fun$)
(declare-fun bot$a () T_dtree_sum_set$)
(declare-fun bot$b () T_set$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun inFr$ (N_set$ Dtree$ T$) Bool)
(declare-fun root$ (Dtree$) N$)
(declare-fun tr1a$ () Dtree$)
(declare-fun inFrr$ (N_set$ Dtree$ T$) Bool)
(declare-fun minus$ (N_set$) N_set_N_set_fun$)
(declare-fun hsubst$ (Dtree$ Dtree$) Dtree$)
(declare-fun insert$ (N$ N_set$) N_set$)
(declare-fun member$ (T$ T_set$) Bool)
(declare-fun minus$a (T_dtree_sum_set$) T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun minus$b (T_set$) T_set_T_set_fun$)
(declare-fun vimage$ (T_T_dtree_sum_fun$ T_dtree_sum_set$) T_set$)
(declare-fun collect$ (T_dtree_sum_bool_fun$) T_dtree_sum_set$)
(declare-fun fun_app$ (T_T_dtree_sum_fun$ T$) T_dtree_sum$)
(declare-fun insert$a (T_dtree_sum$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun insert$b (T$ T_set$) T_set$)
(declare-fun member$a (N$ N_set$) Bool)
(declare-fun member$b (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun vimage$a (T_dtree_sum_N_fun$ N_set$) T_dtree_sum_set$)
(declare-fun vimage$b (T_N_fun$ N_set$) T_set$)
(declare-fun vimage$c (N_T_dtree_sum_fun$ T_dtree_sum_set$) N_set$)
(declare-fun vimage$d (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun vimage$e (N_T_fun$ T_set$) N_set$)
(declare-fun vimage$f (T_dtree_sum_T_fun$ T_set$) T_dtree_sum_set$)
(declare-fun vimage$g (T_T_fun$ T_set$) T_set$)
(declare-fun vimage$h (N_N_fun$ N_set$) N_set$)
(declare-fun collect$a (T_bool_fun$) T_set$)
(declare-fun collect$b (N_bool_fun$) N_set$)
(declare-fun fun_app$a (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun fun_app$b (T_bool_fun$ T$) Bool)
(declare-fun fun_app$c (N_bool_fun$ N$) Bool)
(declare-fun fun_app$d (N_set_N_set_fun$ N_set$) N_set$)
(declare-fun fun_app$e (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun fun_app$f (T_set_T_set_fun$ T_set$) T_set$)
(declare-fun hsubst_c$ (Dtree$ Dtree$) T_dtree_sum_set$)
(assert (! (forall ((?v0 T$)) (! (= (fun_app$ uu$ ?v0) (inl$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$)) (! (= (fun_app$a (uua$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$a (uua$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 T$) (?v1 T$)) (! (= (fun_app$b (uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (uub$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 N$) (?v1 N$)) (! (= (fun_app$c (uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$c (uuc$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$)) (! (= (fun_app$a (uud$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$a (uud$ ?v0) ?v1)))) :named a4))
(assert (! (forall ((?v0 T$) (?v1 T$)) (! (= (fun_app$b (uue$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$b (uue$ ?v0) ?v1)))) :named a5))
(assert (! (forall ((?v0 N$) (?v1 N$)) (! (= (fun_app$c (uuf$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$c (uuf$ ?v0) ?v1)))) :named a6))
(assert (! (not (or (member$ ta$ (vimage$ uu$ (cont$ tr0$))) (or (inFrr$ (fun_app$d (minus$ nsa$) (insert$ (root$ tr0$) bot$)) tr0$ ta$) (inFr$ (fun_app$d (minus$ nsa$) (insert$ (root$ tr0$) bot$)) tra$ ta$)))) :named a7))
(assert (! (not (= (root$ tr1a$) (root$ tr0$))) :named a8))
(assert (! (member$a (root$ tr1a$) nsa$) :named a9))
(assert (! (member$b (inl$ ta$) (cont$ tr1a$)) :named a10))
(assert (! (inFr$ (fun_app$d (minus$ nsa$) (insert$ (root$ tr0$) bot$)) tra$ ta$) :named a11))
(assert (! (forall ((?v0 Dtree$)) (! (= (hsubst_c$ tr0$ ?v0) (ite (= (root$ ?v0) (root$ tr0$)) (cont$ tr0$) (cont$ ?v0))) :pattern ((hsubst_c$ tr0$ ?v0)))) :named a12))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (inFr$ ?v0 ?v1 ?v2) (member$a (root$ ?v1) ?v0))) :named a13))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (and (member$a (root$ ?v0) ?v1) (member$b (inl$ ?v2) (cont$ ?v0))) (inFr$ ?v1 ?v0 ?v2))) :named a14))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (not (member$a (root$ ?v0) ?v1)) (not (inFr$ ?v1 ?v0 ?v2)))) :named a15))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$)) (= (insert$a ?v0 (fun_app$e (minus$a ?v1) (insert$a ?v0 bot$a))) (insert$a ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 T$) (?v1 T_set$)) (= (insert$b ?v0 (fun_app$f (minus$b ?v1) (insert$b ?v0 bot$b))) (insert$b ?v0 ?v1))) :named a17))
(assert (! (forall ((?v0 N$) (?v1 N_set$)) (= (insert$ ?v0 (fun_app$d (minus$ ?v1) (insert$ ?v0 bot$))) (insert$ ?v0 ?v1))) :named a18))
(assert (! (= tr1a$ (hsubst$ tr0$ tra$)) :named a19))
(assert (! (forall ((?v0 T_dtree_sum$)) (= (collect$ (uua$ ?v0)) (insert$a ?v0 bot$a))) :named a20))
(assert (! (forall ((?v0 T$)) (= (collect$a (uub$ ?v0)) (insert$b ?v0 bot$b))) :named a21))
(assert (! (forall ((?v0 N$)) (= (collect$b (uuc$ ?v0)) (insert$ ?v0 bot$))) :named a22))
(assert (! (forall ((?v0 T_dtree_sum$)) (= (collect$ (uud$ ?v0)) (insert$a ?v0 bot$a))) :named a23))
(assert (! (forall ((?v0 T$)) (= (collect$a (uue$ ?v0)) (insert$b ?v0 bot$b))) :named a24))
(assert (! (forall ((?v0 N$)) (= (collect$b (uuf$ ?v0)) (insert$ ?v0 bot$))) :named a25))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$)) (= (vimage$a ?v0 bot$) bot$a)) :named a26))
(assert (! (forall ((?v0 T_N_fun$)) (= (vimage$b ?v0 bot$) bot$b)) :named a27))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$)) (= (vimage$c ?v0 bot$a) bot$)) :named a28))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$)) (= (vimage$d ?v0 bot$a) bot$a)) :named a29))
(assert (! (forall ((?v0 N_T_fun$)) (= (vimage$e ?v0 bot$b) bot$)) :named a30))
(assert (! (forall ((?v0 T_dtree_sum_T_fun$)) (= (vimage$f ?v0 bot$b) bot$a)) :named a31))
(assert (! (forall ((?v0 T_T_fun$)) (= (vimage$g ?v0 bot$b) bot$b)) :named a32))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$)) (= (vimage$ ?v0 bot$a) bot$b)) :named a33))
(assert (! (forall ((?v0 N_N_fun$)) (= (vimage$h ?v0 bot$) bot$)) :named a34))
(assert (! (forall ((?v0 T$) (?v1 T_set$) (?v2 T_set$)) (=> (member$ ?v0 ?v1) (= (fun_app$f (minus$b (insert$b ?v0 ?v2)) ?v1) (fun_app$f (minus$b ?v2) ?v1)))) :named a35))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (member$b ?v0 ?v1) (= (fun_app$e (minus$a (insert$a ?v0 ?v2)) ?v1) (fun_app$e (minus$a ?v2) ?v1)))) :named a36))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (member$a ?v0 ?v1) (= (fun_app$d (minus$ (insert$ ?v0 ?v2)) ?v1) (fun_app$d (minus$ ?v2) ?v1)))) :named a37))
(assert (! (forall ((?v0 T$) (?v1 T_set$) (?v2 T_set$)) (=> (not (member$ ?v0 ?v1)) (= (fun_app$f (minus$b ?v1) (insert$b ?v0 ?v2)) (fun_app$f (minus$b ?v1) ?v2)))) :named a38))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_set$)) (=> (not (member$b ?v0 ?v1)) (= (fun_app$e (minus$a ?v1) (insert$a ?v0 ?v2)) (fun_app$e (minus$a ?v1) ?v2)))) :named a39))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N_set$)) (=> (not (member$a ?v0 ?v1)) (= (fun_app$d (minus$ ?v1) (insert$ ?v0 ?v2)) (fun_app$d (minus$ ?v1) ?v2)))) :named a40))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (= (fun_app$e (minus$a ?v0) bot$a) ?v0)) :named a41))
(assert (! (forall ((?v0 T_set$)) (= (fun_app$f (minus$b ?v0) bot$b) ?v0)) :named a42))
(assert (! (forall ((?v0 N_set$)) (= (fun_app$d (minus$ ?v0) bot$) ?v0)) :named a43))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (! (= (fun_app$e (minus$a ?v0) ?v0) bot$a) :pattern ((minus$a ?v0)))) :named a44))
(assert (! (forall ((?v0 T_set$)) (! (= (fun_app$f (minus$b ?v0) ?v0) bot$b) :pattern ((minus$b ?v0)))) :named a45))
(assert (! (forall ((?v0 N_set$)) (! (= (fun_app$d (minus$ ?v0) ?v0) bot$) :pattern ((minus$ ?v0)))) :named a46))
(check-sat)
;(get-unsat-core)
