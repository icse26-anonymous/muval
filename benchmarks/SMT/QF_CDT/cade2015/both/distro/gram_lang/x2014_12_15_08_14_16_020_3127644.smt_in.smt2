; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 120
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort N_N_fun$ 0)
(declare-sort N_T_fun$ 0)
(declare-sort T_N_fun$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort Dtree_set$ 0)
(declare-sort N_set_set$ 0)
(declare-sort T_set_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort Dtree_N_fun$ 0)
(declare-sort N_N_sum_set$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort T_N_sum_set$ 0)
(declare-sort N_N_prod_set$ 0)
(declare-sort N_option_set$ 0)
(declare-sort T_option_set$ 0)
(declare-sort Dtree_set_set$ 0)
(declare-sort N_set_set_set$ 0)
(declare-sort N_set_bool_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort T_N_sum_set_set$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort Dtree_option_set$ 0)
(declare-sort N_set_option_set$ 0)
(declare-sort T_N_sum_bool_fun$ 0)
(declare-sort N_T_N_sum_set_fun$ 0)
(declare-sort N_T_N_sum_sum_set$ 0)
(declare-sort T_N_sum_N_sum_set$ 0)
(declare-sort N_T_N_sum_prod_set$ 0)
(declare-sort T_N_sum_N_prod_set$ 0)
(declare-sort T_N_sum_option_set$ 0)
(declare-sort N_N_fun_N_N_fun_fun$ 0)
(declare-sort N_N_fun_N_T_fun_fun$ 0)
(declare-sort N_N_sum_N_N_sum_fun$ 0)
(declare-sort N_T_fun_N_N_fun_fun$ 0)
(declare-sort N_T_sum_N_T_sum_fun$ 0)
(declare-sort T_N_fun_T_T_fun_fun$ 0)
(declare-sort T_N_sum_T_N_sum_fun$ 0)
(declare-sort T_N_sum_set_set_set$ 0)
(declare-sort T_T_fun_T_N_fun_fun$ 0)
(declare-sort T_T_fun_T_T_fun_fun$ 0)
(declare-sort T_T_sum_T_T_sum_fun$ 0)
(declare-sort T_dtree_sum_set_set$ 0)
(declare-sort Dtree_N_bool_fun_fun$ 0)
(declare-sort Dtree_dtree_prod_set$ 0)
(declare-sort T_N_sum_set_bool_fun$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort N_T_dtree_sum_sum_set$ 0)
(declare-sort T_dtree_sum_N_sum_set$ 0)
(declare-sort N_T_dtree_sum_prod_set$ 0)
(declare-sort T_N_sum_set_option_set$ 0)
(declare-sort T_dtree_sum_N_prod_set$ 0)
(declare-sort T_dtree_sum_option_set$ 0)
(declare-sort N_N_fun_N_dtree_fun_fun$ 0)
(declare-sort N_dtree_fun_N_N_fun_fun$ 0)
(declare-sort T_N_sum_T_N_sum_sum_set$ 0)
(declare-sort T_dtree_sum_set_set_set$ 0)
(declare-sort T_N_sum_T_N_sum_prod_set$ 0)
(declare-sort T_dtree_sum_set_option_set$ 0)
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0)
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0)
(declare-sort T_N_sum_T_dtree_sum_sum_set$ 0)
(declare-sort T_dtree_sum_T_N_sum_sum_set$ 0)
(declare-sort T_N_sum_T_dtree_sum_prod_set$ 0)
(declare-sort T_dtree_sum_T_N_sum_prod_set$ 0)
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0)
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_prod_set$ 0)
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))
  (T_N_sum$ (inl$a (projl$a T$)) (inr$a (projr$a N$)))
  (N_N_sum$ (inl$b (projl$b N$)) (inr$b (projr$b N$)))
  (N_T_sum$ (inl$c (projl$c N$)) (inr$c (projr$c T$)))
  (T_T_sum$ (inl$d (projl$d T$)) (inr$d (projr$d T$)))
  (Dtree_dtree_sum$ (inl$e (projl$e Dtree$)) (inr$e (projr$e Dtree$)))
  (N_dtree_sum$ (inl$f (projl$f N$)) (inr$f (projr$f Dtree$)))
  (Dtree_N_sum$ (inl$g (projl$g Dtree$)) (inr$g (projr$g N$)))))
(declare-fun h$ (Dtree$) N_dtree_fun$)
(declare-fun s$ () N_T_N_sum_set_fun$)
(declare-fun id$ () N_N_fun$)
(declare-fun uu$ (T_N_sum_set$) T_N_sum_bool_fun$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun h_c$ (Dtree$) N_T_N_sum_set_fun$)
(declare-fun h_r$ (Dtree$) N_N_fun$)
(declare-fun id$a () T_T_fun$)
(declare-fun id$b (T_dtree_sum$) T_dtree_sum$)
(declare-fun id$c () Dtree_N_fun_dtree_N_fun_fun$)
(declare-fun id$d () Dtree_dtree_fun$)
(declare-fun id$e () N_N_sum_N_N_sum_fun$)
(declare-fun id$f () N_T_sum_N_T_sum_fun$)
(declare-fun id$g () T_N_sum_T_N_sum_fun$)
(declare-fun id$h () T_T_sum_T_T_sum_fun$)
(declare-fun pow$ (N_set$) N_set_set$)
(declare-fun reg$ (N_dtree_fun$ Dtree$) Bool)
(declare-fun top$ () N_set$)
(declare-fun tr0$ () Dtree$)
(declare-fun uua$ (T_set$) T_bool_fun$)
(declare-fun uub$ (N_set$) N_bool_fun$)
(declare-fun uuc$ (T_dtree_sum_set$) T_dtree_sum_bool_fun$)
(declare-fun comp$ (Dtree_N_fun$) N_dtree_fun_N_N_fun_fun$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun node$ (N$ T_dtree_sum_set$) Dtree$)
(declare-fun pick$ (Dtree$) N_dtree_fun$)
(declare-fun pow$a (T_N_sum_set$) T_N_sum_set_set$)
(declare-fun pow$b (T_dtree_sum_set$) T_dtree_sum_set_set$)
(declare-fun rcut$ (Dtree$) Dtree$)
(declare-fun root$ () Dtree_N_fun$)
(declare-fun top$a () T_dtree_sum_set$)
(declare-fun top$b () T_set$)
(declare-fun top$c () Dtree_set$)
(declare-fun top$d () T_N_sum_set$)
(declare-fun top$e () N_N_sum_set$)
(declare-fun top$f () T_N_sum_N_sum_set$)
(declare-fun top$g () T_dtree_sum_N_sum_set$)
(declare-fun top$h () N_T_N_sum_sum_set$)
(declare-fun top$i () N_T_dtree_sum_sum_set$)
(declare-fun top$j () T_N_sum_T_N_sum_sum_set$)
(declare-fun top$k () T_N_sum_T_dtree_sum_sum_set$)
(declare-fun top$l () T_dtree_sum_T_N_sum_sum_set$)
(declare-fun top$m () N_N_prod_set$)
(declare-fun top$n () T_N_sum_N_prod_set$)
(declare-fun top$o () T_dtree_sum_N_prod_set$)
(declare-fun top$p () N_T_N_sum_prod_set$)
(declare-fun top$q () N_T_dtree_sum_prod_set$)
(declare-fun top$r () T_N_sum_T_N_sum_prod_set$)
(declare-fun top$s () T_N_sum_T_dtree_sum_prod_set$)
(declare-fun top$t () T_dtree_sum_T_N_sum_prod_set$)
(declare-fun top$u () T_dtree_sum_T_dtree_sum_prod_set$)
(declare-fun top$v () Dtree_dtree_prod_set$)
(declare-fun top$w () Dtree_set_set$)
(declare-fun top$x () T_dtree_sum_set_set_set$)
(declare-fun top$y () T_dtree_sum_set_set$)
(declare-fun top$z () T_N_sum_set_set_set$)
(declare-fun comp$a (N_N_fun$) Dtree_N_fun_dtree_N_fun_fun$)
(declare-fun comp$b (N_N_fun$) N_N_fun_N_N_fun_fun$)
(declare-fun comp$c (Dtree_N_fun$) Dtree_dtree_fun_dtree_N_fun_fun$)
(declare-fun comp$d (N_dtree_fun$) N_N_fun_N_dtree_fun_fun$)
(declare-fun comp$e (Dtree_dtree_fun$) N_dtree_fun_N_dtree_fun_fun$)
(declare-fun comp$f (N_dtree_fun$) Dtree_N_fun_dtree_dtree_fun_fun$)
(declare-fun comp$g (T_N_fun$) N_T_fun_N_N_fun_fun$)
(declare-fun comp$h (T_N_fun$) T_T_fun_T_N_fun_fun$)
(declare-fun comp$i (T_T_fun$) T_T_fun_T_T_fun_fun$)
(declare-fun comp$j (N_T_fun$) T_N_fun_T_T_fun_fun$)
(declare-fun comp$k (N_T_fun$) N_N_fun_N_T_fun_fun$)
(declare-fun deftr$ () N_dtree_fun$)
(declare-fun inItr$ (N_set$) Dtree_N_bool_fun_fun$)
(declare-fun subtr$ (N_set$ Dtree$ Dtree$) Bool)
(declare-fun top$aa () T_N_sum_set_set$)
(declare-fun top$ab () N_set_set_set$)
(declare-fun top$ac () N_set_set$)
(declare-fun top$ad () T_set_set$)
(declare-fun top$ae () Dtree_option_set$)
(declare-fun top$af () T_dtree_sum_set_option_set$)
(declare-fun top$ag () T_N_sum_set_option_set$)
(declare-fun top$ah () N_set_option_set$)
(declare-fun top$ai () T_option_set$)
(declare-fun top$aj () T_N_sum_option_set$)
(declare-fun top$ak () T_dtree_sum_option_set$)
(declare-fun top$al () N_option_set$)
(declare-fun top$am () T_dtree_sum_bool_fun$)
(declare-fun top$an () Bool)
(declare-fun top$ao () N_bool_fun$)
(declare-fun top$ap () T_N_sum_set_bool_fun$)
(declare-fun top$aq () N_set_bool_fun$)
(declare-fun top$ar () T_bool_fun$)
(declare-fun finite$ (T_N_sum_set$) Bool)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun unfold$ (N_N_fun$) N_T_N_sum_set_fun_N_dtree_fun_fun$)
(declare-fun collect$ (T_dtree_sum_bool_fun$) T_dtree_sum_set$)
(declare-fun finite$a (T_dtree_sum_set$) Bool)
(declare-fun finite$b (T_set$) Bool)
(declare-fun finite$c (Dtree_set$) Bool)
(declare-fun finite$d (N_set$) Bool)
(declare-fun finite$e (N_N_sum_set$) Bool)
(declare-fun finite$f (T_N_sum_N_sum_set$) Bool)
(declare-fun finite$g (T_dtree_sum_N_sum_set$) Bool)
(declare-fun finite$h (N_T_N_sum_sum_set$) Bool)
(declare-fun finite$i (N_T_dtree_sum_sum_set$) Bool)
(declare-fun finite$j (T_N_sum_T_N_sum_sum_set$) Bool)
(declare-fun finite$k (T_N_sum_T_dtree_sum_sum_set$) Bool)
(declare-fun finite$l (T_dtree_sum_T_N_sum_sum_set$) Bool)
(declare-fun finite$m (N_N_prod_set$) Bool)
(declare-fun finite$n (T_N_sum_N_prod_set$) Bool)
(declare-fun finite$o (T_dtree_sum_N_prod_set$) Bool)
(declare-fun finite$p (N_T_N_sum_prod_set$) Bool)
(declare-fun finite$q (N_T_dtree_sum_prod_set$) Bool)
(declare-fun finite$r (T_N_sum_T_N_sum_prod_set$) Bool)
(declare-fun finite$s (T_N_sum_T_dtree_sum_prod_set$) Bool)
(declare-fun finite$t (T_dtree_sum_T_N_sum_prod_set$) Bool)
(declare-fun finite$u (T_dtree_sum_T_dtree_sum_prod_set$) Bool)
(declare-fun finite$v (Dtree_dtree_prod_set$) Bool)
(declare-fun finite$w (Dtree_set_set$) Bool)
(declare-fun finite$x (T_dtree_sum_set_set_set$) Bool)
(declare-fun finite$y (T_dtree_sum_set_set$) Bool)
(declare-fun finite$z (T_N_sum_set_set_set$) Bool)
(declare-fun fun_app$ (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun map_sum$ (T_T_fun$ Dtree_N_fun$ T_dtree_sum$) T_N_sum$)
(declare-fun member$a (T_N_sum$ T_N_sum_set$) Bool)
(declare-fun member$b (T$ T_set$) Bool)
(declare-fun member$c (N$ N_set$) Bool)
(declare-fun member$d (Dtree$ Dtree_set$) Bool)
(declare-fun member$e (T_dtree_sum_set$ T_dtree_sum_set_set$) Bool)
(declare-fun member$f (T_N_sum_set$ T_N_sum_set_set$) Bool)
(declare-fun member$g (N_set$ N_set_set$) Bool)
(declare-fun regular$ (Dtree$) Bool)
(declare-fun collect$a (N_bool_fun$) N_set$)
(declare-fun collect$b (T_N_sum_bool_fun$) T_N_sum_set$)
(declare-fun collect$c (T_bool_fun$) T_set$)
(declare-fun collect$d (T_N_sum_set_bool_fun$) T_N_sum_set_set$)
(declare-fun collect$e (N_set_bool_fun$) N_set_set$)
(declare-fun finite$aa (T_N_sum_set_set$) Bool)
(declare-fun finite$ab (N_set_set_set$) Bool)
(declare-fun finite$ac (N_set_set$) Bool)
(declare-fun finite$ad (T_set_set$) Bool)
(declare-fun finite$ae (Dtree_option_set$) Bool)
(declare-fun finite$af (T_dtree_sum_set_option_set$) Bool)
(declare-fun finite$ag (T_N_sum_set_option_set$) Bool)
(declare-fun finite$ah (N_set_option_set$) Bool)
(declare-fun finite$ai (T_option_set$) Bool)
(declare-fun finite$aj (T_N_sum_option_set$) Bool)
(declare-fun finite$ak (T_dtree_sum_option_set$) Bool)
(declare-fun finite$al (N_option_set$) Bool)
(declare-fun fun_app$a (T_N_sum_bool_fun$ T_N_sum$) Bool)
(declare-fun fun_app$b (T_bool_fun$ T$) Bool)
(declare-fun fun_app$c (N_bool_fun$ N$) Bool)
(declare-fun fun_app$d (N_dtree_fun$ N$) Dtree$)
(declare-fun fun_app$e (Dtree_N_fun$ Dtree$) N$)
(declare-fun fun_app$f (N_T_N_sum_set_fun$ N$) T_N_sum_set$)
(declare-fun fun_app$g (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$) N_dtree_fun$)
(declare-fun fun_app$h (N_N_fun$ N$) N$)
(declare-fun fun_app$i (Dtree_N_bool_fun_fun$ Dtree$) N_bool_fun$)
(declare-fun fun_app$j (T_T_fun$ T$) T$)
(declare-fun fun_app$k (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$) N_N_fun$)
(declare-fun fun_app$l (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$) Dtree_N_fun$)
(declare-fun fun_app$m (N_N_fun_N_N_fun_fun$ N_N_fun$) N_N_fun$)
(declare-fun fun_app$n (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$o (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$) Dtree_N_fun$)
(declare-fun fun_app$p (N_N_fun_N_dtree_fun_fun$ N_N_fun$) N_dtree_fun$)
(declare-fun fun_app$q (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$) N_dtree_fun$)
(declare-fun fun_app$r (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$) Dtree_dtree_fun$)
(declare-fun fun_app$s (N_T_fun_N_N_fun_fun$ N_T_fun$) N_N_fun$)
(declare-fun fun_app$t (T_T_fun_T_N_fun_fun$ T_T_fun$) T_N_fun$)
(declare-fun fun_app$u (T_T_fun_T_T_fun_fun$ T_T_fun$) T_T_fun$)
(declare-fun fun_app$v (T_N_fun_T_T_fun_fun$ T_N_fun$) T_T_fun$)
(declare-fun fun_app$w (N_N_fun_N_T_fun_fun$ N_N_fun$) N_T_fun$)
(declare-fun fun_app$x (N_N_sum_N_N_sum_fun$ N_N_sum$) N_N_sum$)
(declare-fun fun_app$y (N_T_sum_N_T_sum_fun$ N_T_sum$) N_T_sum$)
(declare-fun fun_app$z (T_N_sum_T_N_sum_fun$ T_N_sum$) T_N_sum$)
(declare-fun hsubst_r$ (Dtree$) N$)
(declare-fun map_sum$a (N_N_fun$ N_N_fun$) N_N_sum_N_N_sum_fun$)
(declare-fun map_sum$b (N_N_fun$ T_T_fun$) N_T_sum_N_T_sum_fun$)
(declare-fun map_sum$c (T_T_fun$ N_N_fun$) T_N_sum_T_N_sum_fun$)
(declare-fun map_sum$d (T_T_fun$ T_T_fun$) T_T_sum_T_T_sum_fun$)
(declare-fun map_sum$e (Dtree_N_fun$ Dtree_N_fun$ Dtree_dtree_sum$) N_N_sum$)
(declare-fun map_sum$f (N_dtree_fun$ N_dtree_fun$ N_N_sum$) Dtree_dtree_sum$)
(declare-fun map_sum$g (Dtree_N_fun$ N_N_fun$ Dtree_N_sum$) N_N_sum$)
(declare-fun map_sum$h (N_dtree_fun$ Dtree_N_fun$ N_dtree_sum$) Dtree_N_sum$)
(declare-fun map_sum$i (N_N_fun$ Dtree_N_fun$ N_dtree_sum$) N_N_sum$)
(declare-fun map_sum$j (Dtree_N_fun$ N_dtree_fun$ Dtree_N_sum$) N_dtree_sum$)
(declare-fun map_sum$k (T_T_fun$ Dtree_dtree_fun$ T_dtree_sum$) T_dtree_sum$)
(declare-fun fun_app$aa (T_T_sum_T_T_sum_fun$ T_T_sum$) T_T_sum$)
(declare-fun type_definition$ (N_T_fun$ T_N_fun$ T_set$) Bool)
(declare-fun type_definition$a (T_T_fun$ T_T_fun$ T_set$) Bool)
(declare-fun type_definition$b (N_dtree_fun$ Dtree_N_fun$ Dtree_set$) Bool)
(declare-fun type_definition$c (N_N_fun$ N_N_fun$ N_set$) Bool)
(declare-fun type_definition$d (T_N_fun$ N_T_fun$ N_set$) Bool)
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum$)) (! (= (fun_app$ (uuc$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$ (uuc$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum$)) (! (= (fun_app$a (uu$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$a (uu$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 T_set$) (?v1 T$)) (! (= (fun_app$b (uua$ ?v0) ?v1) (member$b ?v1 ?v0)) :pattern ((fun_app$b (uua$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 N_set$) (?v1 N$)) (! (= (fun_app$c (uub$ ?v0) ?v1) (member$c ?v1 ?v0)) :pattern ((fun_app$c (uub$ ?v0) ?v1)))) :named a3))
(assert (! (not (exists ((?v0 N_dtree_fun$)) (reg$ ?v0 (rcut$ tr0$)))) :named a4))
(assert (! (reg$ (h$ tr0$) (rcut$ tr0$)) :named a5))
(assert (! (= (= (rcut$ tr0$) tr0$) (reg$ (h$ tr0$) tr0$)) :named a6))
(assert (! (=> (reg$ (h$ tr0$) tr0$) (= (rcut$ tr0$) tr0$)) :named a7))
(assert (! (forall ((?v0 Dtree$)) (= (= (rcut$ ?v0) ?v0) (reg$ (h$ ?v0) ?v0))) :named a8))
(assert (! (forall ((?v0 Dtree$)) (! (=> (reg$ (h$ ?v0) ?v0) (= (rcut$ ?v0) ?v0)) :pattern ((rcut$ ?v0)))) :named a9))
(assert (! (forall ((?v0 Dtree$)) (reg$ (h$ ?v0) (rcut$ ?v0))) :named a10))
(assert (! (= (rcut$ tr0$) (fun_app$d (h$ tr0$) (fun_app$e root$ tr0$))) :named a11))
(assert (! (forall ((?v0 Dtree$)) (= (regular$ ?v0) (exists ((?v1 N_dtree_fun$)) (reg$ ?v1 ?v0)))) :named a12))
(assert (! (forall ((?v0 N$)) (reg$ deftr$ (fun_app$d deftr$ ?v0))) :named a13))
(assert (! (forall ((?v0 N$)) (finite$ (fun_app$f (h_c$ tr0$) ?v0))) :named a14))
(assert (! (= (h$ tr0$) (fun_app$g (unfold$ (h_r$ tr0$)) (h_c$ tr0$))) :named a15))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree$) (?v2 N_set$) (?v3 Dtree$)) (=> (and (reg$ ?v0 ?v1) (subtr$ ?v2 ?v3 ?v1)) (reg$ ?v0 ?v3))) :named a16))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree$)) (=> (reg$ ?v0 ?v1) (= (fun_app$d ?v0 (fun_app$e root$ ?v1)) ?v1))) :named a17))
(assert (! (forall ((?v0 Dtree$)) (! (= (rcut$ ?v0) (fun_app$d (h$ ?v0) (fun_app$e root$ ?v0))) :pattern ((rcut$ ?v0)))) :named a18))
(assert (! (forall ((?v0 N$)) (= (fun_app$e root$ (fun_app$d (h$ tr0$) ?v0)) (fun_app$e root$ (fun_app$d (pick$ tr0$) ?v0)))) :named a19))
(assert (! (forall ((?v0 N$)) (! (= (fun_app$h (h_r$ tr0$) ?v0) (fun_app$e root$ (fun_app$d (pick$ tr0$) ?v0))) :pattern ((fun_app$h (h_r$ tr0$) ?v0)))) :named a20))
(assert (! (forall ((?v0 N$)) (= (fun_app$e root$ (fun_app$d deftr$ ?v0)) ?v0)) :named a21))
(assert (! (forall ((?v0 Dtree$) (?v1 N$)) (= (fun_app$e root$ (fun_app$d (h$ ?v0) ?v1)) (fun_app$e root$ (fun_app$d (pick$ ?v0) ?v1)))) :named a22))
(assert (! (forall ((?v0 Dtree$) (?v1 N$)) (! (= (fun_app$h (h_r$ ?v0) ?v1) (fun_app$e root$ (fun_app$d (pick$ ?v0) ?v1))) :pattern ((fun_app$h (h_r$ ?v0) ?v1)))) :named a23))
(assert (! (forall ((?v0 Dtree$)) (! (= (h$ ?v0) (fun_app$g (unfold$ (h_r$ ?v0)) (h_c$ ?v0))) :pattern ((h$ ?v0)))) :named a24))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (subtr$ ?v0 ?v1 (fun_app$d deftr$ ?v2)) (= ?v1 (fun_app$d deftr$ (fun_app$e root$ ?v1))))) :named a25))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (subtr$ ?v0 ?v1 ?v2) (subtr$ ?v0 ?v2 ?v3)) (subtr$ ?v0 ?v1 ?v3))) :named a26))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (subtr$ ?v0 ?v1 ?v2) (member$c (fun_app$e root$ ?v2) ?v0))) :named a27))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (subtr$ ?v0 ?v1 ?v2) (member$c (fun_app$e root$ ?v1) ?v0))) :named a28))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$c (fun_app$e root$ ?v0) ?v1) (subtr$ ?v1 ?v0 ?v0))) :named a29))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$)) (=> (and (regular$ ?v0) (subtr$ ?v1 ?v2 ?v0)) (regular$ ?v2))) :named a30))
(assert (! (forall ((?v0 Dtree$) (?v1 N$)) (finite$ (fun_app$f (h_c$ ?v0) ?v1))) :named a31))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree$)) (= (reg$ ?v0 ?v1) (forall ((?v2 N_set$) (?v3 Dtree$)) (=> (subtr$ ?v2 ?v3 ?v1) (= ?v3 (fun_app$d ?v0 (fun_app$e root$ ?v3))))))) :named a32))
(assert (! (forall ((?v0 Dtree$)) (= (regular$ ?v0) (exists ((?v1 N_dtree_fun$)) (and (reg$ ?v1 ?v0) (forall ((?v2 N$)) (= (fun_app$e root$ (fun_app$d ?v1 ?v2)) ?v2)))))) :named a33))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N_T_N_sum_set_fun$) (?v2 N$)) (= (fun_app$e root$ (fun_app$d (fun_app$g (unfold$ ?v0) ?v1) ?v2)) (fun_app$h ?v0 ?v2))) :named a34))
(assert (! (forall ((?v0 Dtree$)) (! (= (hsubst_r$ ?v0) (fun_app$e root$ ?v0)) :pattern ((hsubst_r$ ?v0)))) :named a35))
(assert (! (forall ((?v0 N$)) (finite$ (fun_app$f s$ ?v0))) :named a36))
(assert (! (forall ((?v0 N$)) (=> (fun_app$c (fun_app$i (inItr$ top$) tr0$) ?v0) (and (subtr$ top$ (fun_app$d (pick$ tr0$) ?v0) tr0$) (= (fun_app$e root$ (fun_app$d (pick$ tr0$) ?v0)) ?v0)))) :named a37))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree$)) (= (reg$ ?v0 ?v1) (forall ((?v2 Dtree$)) (=> (subtr$ top$ ?v2 ?v1) (= ?v2 (fun_app$d ?v0 (fun_app$e root$ ?v2))))))) :named a38))
(assert (! (forall ((?v0 N$)) (=> (fun_app$c (fun_app$i (inItr$ top$) tr0$) ?v0) (subtr$ top$ (fun_app$d (pick$ tr0$) ?v0) tr0$))) :named a39))
(assert (! (forall ((?v0 N$) (?v1 Dtree$)) (=> (and (fun_app$c (fun_app$i (inItr$ top$) tr0$) ?v0) (subtr$ top$ ?v1 (fun_app$d (h$ tr0$) ?v0))) (exists ((?v2 N$)) (and (fun_app$c (fun_app$i (inItr$ top$) tr0$) ?v2) (= ?v1 (fun_app$d (h$ tr0$) ?v2)))))) :named a40))
(assert (! (forall ((?v0 N$)) (=> (fun_app$c (fun_app$i (inItr$ top$) tr0$) ?v0) (= (fun_app$e root$ (fun_app$d (pick$ tr0$) ?v0)) ?v0))) :named a41))
(assert (! (= (finite$a top$a) (and (finite$b top$b) (finite$c top$c))) :named a42))
(assert (! (= (finite$ top$d) (and (finite$b top$b) (finite$d top$))) :named a43))
(assert (! (= (finite$e top$e) (and (finite$d top$) (finite$d top$))) :named a44))
(assert (! (= (finite$f top$f) (and (finite$ top$d) (finite$d top$))) :named a45))
(assert (! (= (finite$g top$g) (and (finite$a top$a) (finite$d top$))) :named a46))
(assert (! (= (finite$h top$h) (and (finite$d top$) (finite$ top$d))) :named a47))
(assert (! (= (finite$i top$i) (and (finite$d top$) (finite$a top$a))) :named a48))
(assert (! (= (finite$j top$j) (and (finite$ top$d) (finite$ top$d))) :named a49))
(assert (! (= (finite$k top$k) (and (finite$ top$d) (finite$a top$a))) :named a50))
(assert (! (= (finite$l top$l) (and (finite$a top$a) (finite$ top$d))) :named a51))
(assert (! (forall ((?v0 N$)) (=> (fun_app$c (fun_app$i (inItr$ top$) tr0$) ?v0) (= (fun_app$e root$ (fun_app$d (h$ tr0$) ?v0)) ?v0))) :named a52))
(assert (! (= (finite$m top$m) (and (finite$d top$) (finite$d top$))) :named a53))
(assert (! (= (finite$n top$n) (and (finite$ top$d) (finite$d top$))) :named a54))
(assert (! (= (finite$o top$o) (and (finite$a top$a) (finite$d top$))) :named a55))
(assert (! (= (finite$p top$p) (and (finite$d top$) (finite$ top$d))) :named a56))
(assert (! (= (finite$q top$q) (and (finite$d top$) (finite$a top$a))) :named a57))
(assert (! (= (finite$r top$r) (and (finite$ top$d) (finite$ top$d))) :named a58))
(assert (! (= (finite$s top$s) (and (finite$ top$d) (finite$a top$a))) :named a59))
(assert (! (= (finite$t top$t) (and (finite$a top$a) (finite$ top$d))) :named a60))
(assert (! (= (finite$u top$u) (and (finite$a top$a) (finite$a top$a))) :named a61))
(assert (! (= (finite$v top$v) (and (finite$c top$c) (finite$c top$c))) :named a62))
(assert (! (= (finite$w top$w) (finite$c top$c)) :named a63))
(assert (! (= (finite$x top$x) (finite$y top$y)) :named a64))
(assert (! (= (finite$z top$z) (finite$aa top$aa)) :named a65))
(assert (! (= (finite$ab top$ab) (finite$ac top$ac)) :named a66))
(assert (! (= (finite$ad top$ad) (finite$b top$b)) :named a67))
(assert (! (= (finite$aa top$aa) (finite$ top$d)) :named a68))
(assert (! (= (finite$y top$y) (finite$a top$a)) :named a69))
(assert (! (= (finite$ac top$ac) (finite$d top$)) :named a70))
(assert (! (=> (and (finite$d top$) (finite$d top$)) (finite$m top$m)) :named a71))
(assert (! (=> (and (finite$ top$d) (finite$d top$)) (finite$n top$n)) :named a72))
(assert (! (=> (and (finite$a top$a) (finite$d top$)) (finite$o top$o)) :named a73))
(assert (! (=> (and (finite$d top$) (finite$ top$d)) (finite$p top$p)) :named a74))
(assert (! (=> (and (finite$d top$) (finite$a top$a)) (finite$q top$q)) :named a75))
(assert (! (=> (and (finite$ top$d) (finite$ top$d)) (finite$r top$r)) :named a76))
(assert (! (=> (and (finite$ top$d) (finite$a top$a)) (finite$s top$s)) :named a77))
(assert (! (=> (and (finite$a top$a) (finite$ top$d)) (finite$t top$t)) :named a78))
(assert (! (=> (and (finite$a top$a) (finite$a top$a)) (finite$u top$u)) :named a79))
(assert (! (=> (and (finite$c top$c) (finite$c top$c)) (finite$v top$v)) :named a80))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_dtree_sum_bool_fun$)) (=> (forall ((?v2 T_dtree_sum$)) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) (= (collect$ ?v0) (collect$ ?v1)))) :named a81))
(assert (! (forall ((?v0 N_bool_fun$) (?v1 N_bool_fun$)) (=> (forall ((?v2 N$)) (= (fun_app$c ?v0 ?v2) (fun_app$c ?v1 ?v2))) (= (collect$a ?v0) (collect$a ?v1)))) :named a82))
(assert (! (forall ((?v0 T_N_sum_set$)) (= (collect$b (uu$ ?v0)) ?v0)) :named a83))
(assert (! (forall ((?v0 T_set$)) (= (collect$c (uua$ ?v0)) ?v0)) :named a84))
(assert (! (forall ((?v0 N_set$)) (= (collect$a (uub$ ?v0)) ?v0)) :named a85))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (= (collect$ (uuc$ ?v0)) ?v0)) :named a86))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_bool_fun$)) (= (member$a ?v0 (collect$b ?v1)) (fun_app$a ?v1 ?v0))) :named a87))
(assert (! (forall ((?v0 T$) (?v1 T_bool_fun$)) (= (member$b ?v0 (collect$c ?v1)) (fun_app$b ?v1 ?v0))) :named a88))
(assert (! (forall ((?v0 N$) (?v1 N_bool_fun$)) (= (member$c ?v0 (collect$a ?v1)) (fun_app$c ?v1 ?v0))) :named a89))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$ ?v1 ?v0))) :named a90))
(assert (! (finite$d top$) :named a91))
(assert (! (forall ((?v0 Dtree_set$)) (=> (and (not (finite$c top$c)) (finite$c ?v0)) (exists ((?v1 Dtree$)) (not (member$d ?v1 ?v0))))) :named a92))
(assert (! (forall ((?v0 T_dtree_sum_set_set$)) (=> (and (not (finite$y top$y)) (finite$y ?v0)) (exists ((?v1 T_dtree_sum_set$)) (not (member$e ?v1 ?v0))))) :named a93))
(assert (! (forall ((?v0 T_N_sum_set_set$)) (=> (and (not (finite$aa top$aa)) (finite$aa ?v0)) (exists ((?v1 T_N_sum_set$)) (not (member$f ?v1 ?v0))))) :named a94))
(assert (! (forall ((?v0 N_set_set$)) (=> (and (not (finite$ac top$ac)) (finite$ac ?v0)) (exists ((?v1 N_set$)) (not (member$g ?v1 ?v0))))) :named a95))
(assert (! (forall ((?v0 T_set$)) (=> (and (not (finite$b top$b)) (finite$b ?v0)) (exists ((?v1 T$)) (not (member$b ?v1 ?v0))))) :named a96))
(assert (! (forall ((?v0 T_N_sum_set$)) (=> (and (not (finite$ top$d)) (finite$ ?v0)) (exists ((?v1 T_N_sum$)) (not (member$a ?v1 ?v0))))) :named a97))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (=> (and (not (finite$a top$a)) (finite$a ?v0)) (exists ((?v1 T_dtree_sum$)) (not (member$ ?v1 ?v0))))) :named a98))
(assert (! (forall ((?v0 N_set$)) (=> (and (not (finite$d top$)) (finite$d ?v0)) (exists ((?v1 N$)) (not (member$c ?v1 ?v0))))) :named a99))
(assert (! (forall ((?v0 Dtree$) (?v1 N$)) (=> (fun_app$c (fun_app$i (inItr$ top$) ?v0) ?v1) (= (fun_app$e root$ (fun_app$d (h$ ?v0) ?v1)) ?v1))) :named a100))
(assert (! (forall ((?v0 Dtree$) (?v1 N$)) (=> (fun_app$c (fun_app$i (inItr$ top$) ?v0) ?v1) (= (fun_app$e root$ (fun_app$d (pick$ ?v0) ?v1)) ?v1))) :named a101))
(assert (! (forall ((?v0 Dtree$) (?v1 N$) (?v2 Dtree$)) (=> (and (fun_app$c (fun_app$i (inItr$ top$) ?v0) ?v1) (subtr$ top$ ?v2 (fun_app$d (h$ ?v0) ?v1))) (exists ((?v3 N$)) (and (fun_app$c (fun_app$i (inItr$ top$) ?v0) ?v3) (= ?v2 (fun_app$d (h$ ?v0) ?v3)))))) :named a102))
(assert (! (forall ((?v0 Dtree$) (?v1 N$)) (=> (fun_app$c (fun_app$i (inItr$ top$) ?v0) ?v1) (subtr$ top$ (fun_app$d (pick$ ?v0) ?v1) ?v0))) :named a103))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$c (fun_app$e root$ ?v0) ?v1) (fun_app$c (fun_app$i (inItr$ ?v1) ?v0) (fun_app$e root$ ?v0)))) :named a104))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (fun_app$c (fun_app$i (inItr$ ?v0) ?v1) ?v2) (member$c (fun_app$e root$ ?v1) ?v0))) :named a105))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$) (?v3 Dtree$)) (=> (and (fun_app$c (fun_app$i (inItr$ ?v0) ?v1) ?v2) (subtr$ ?v0 ?v1 ?v3)) (fun_app$c (fun_app$i (inItr$ ?v0) ?v3) ?v2))) :named a106))
(assert (! (forall ((?v0 Dtree$) (?v1 N$)) (=> (fun_app$c (fun_app$i (inItr$ top$) ?v0) ?v1) (and (subtr$ top$ (fun_app$d (pick$ ?v0) ?v1) ?v0) (= (fun_app$e root$ (fun_app$d (pick$ ?v0) ?v1)) ?v1)))) :named a107))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (fun_app$c (fun_app$i (inItr$ ?v0) ?v1) ?v2) (exists ((?v3 Dtree$)) (and (subtr$ ?v0 ?v3 ?v1) (= (fun_app$e root$ ?v3) ?v2))))) :named a108))
(assert (! (forall ((?v0 N$)) (=> (and (wf$ tr0$) (fun_app$c (fun_app$i (inItr$ top$) tr0$) ?v0)) (wf$ (fun_app$d (pick$ tr0$) ?v0)))) :named a109))
(assert (! (forall ((?v0 N$)) (=> (and (wf$ tr0$) (fun_app$c (fun_app$i (inItr$ top$) tr0$) ?v0)) (wf$ (fun_app$d (h$ tr0$) ?v0)))) :named a110))
(assert (! (= (finite$ae top$ae) (finite$c top$c)) :named a111))
(assert (! (= (finite$af top$af) (finite$y top$y)) :named a112))
(assert (! (= (finite$ag top$ag) (finite$aa top$aa)) :named a113))
(assert (! (= (finite$ah top$ah) (finite$ac top$ac)) :named a114))
(assert (! (= (finite$ai top$ai) (finite$b top$b)) :named a115))
(assert (! (= (finite$aj top$aj) (finite$ top$d)) :named a116))
(assert (! (= (finite$ak top$ak) (finite$a top$a)) :named a117))
(assert (! (= (finite$al top$al) (finite$d top$)) :named a118))
(assert (! (forall ((?v0 T_N_sum$)) (member$a ?v0 top$d)) :named a119))
(assert (! (forall ((?v0 T_N_sum_set$)) (member$f ?v0 top$aa)) :named a120))
(assert (! (forall ((?v0 N_set$)) (member$g ?v0 top$ac)) :named a121))
(assert (! (forall ((?v0 T$)) (member$b ?v0 top$b)) :named a122))
(assert (! (forall ((?v0 T_dtree_sum$)) (member$ ?v0 top$a)) :named a123))
(assert (! (forall ((?v0 N$)) (member$c ?v0 top$)) :named a124))
(assert (! (forall ((?v0 T_N_sum$)) (= (member$a ?v0 top$d) true)) :named a125))
(assert (! (forall ((?v0 T_N_sum_set$)) (= (member$f ?v0 top$aa) true)) :named a126))
(assert (! (forall ((?v0 N_set$)) (= (member$g ?v0 top$ac) true)) :named a127))
(assert (! (forall ((?v0 T$)) (= (member$b ?v0 top$b) true)) :named a128))
(assert (! (forall ((?v0 T_dtree_sum$)) (= (member$ ?v0 top$a) true)) :named a129))
(assert (! (forall ((?v0 N$)) (= (member$c ?v0 top$) true)) :named a130))
(assert (! (forall ((?v0 T_dtree_sum$)) (! (= (fun_app$ top$am ?v0) top$an) :pattern ((fun_app$ top$am ?v0)))) :named a131))
(assert (! (forall ((?v0 N$)) (! (= (fun_app$c top$ao ?v0) top$an) :pattern ((fun_app$c top$ao ?v0)))) :named a132))
(assert (! (= deftr$ (fun_app$g (unfold$ id$) s$)) :named a133))
(assert (! (forall ((?v0 Dtree$) (?v1 N$)) (=> (and (wf$ ?v0) (fun_app$c (fun_app$i (inItr$ top$) ?v0) ?v1)) (wf$ (fun_app$d (pick$ ?v0) ?v1)))) :named a134))
(assert (! (= top$a (collect$ top$am)) :named a135))
(assert (! (= top$aa (collect$d top$ap)) :named a136))
(assert (! (= top$ac (collect$e top$aq)) :named a137))
(assert (! (= top$b (collect$c top$ar)) :named a138))
(assert (! (= top$ (collect$a top$ao)) :named a139))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (subtr$ ?v1 ?v2 ?v0)) (wf$ ?v2))) :named a140))
(assert (! (forall ((?v0 N$)) (wf$ (fun_app$d deftr$ ?v0))) :named a141))
(assert (! (forall ((?v0 N_set_set$)) (=> (forall ((?v1 N_set$)) (member$g ?v1 ?v0)) (= top$ac ?v0))) :named a142))
(assert (! (forall ((?v0 T_set$)) (=> (forall ((?v1 T$)) (member$b ?v1 ?v0)) (= top$b ?v0))) :named a143))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (=> (forall ((?v1 T_dtree_sum$)) (member$ ?v1 ?v0)) (= top$a ?v0))) :named a144))
(assert (! (forall ((?v0 N_set$)) (=> (forall ((?v1 N$)) (member$c ?v1 ?v0)) (= top$ ?v0))) :named a145))
(assert (! (exists ((?v0 T_dtree_sum$)) (member$ ?v0 top$a)) :named a146))
(assert (! (exists ((?v0 N$)) (member$c ?v0 top$)) :named a147))
(assert (! (forall ((?v0 Dtree$) (?v1 N$)) (=> (and (wf$ ?v0) (fun_app$c (fun_app$i (inItr$ top$) ?v0) ?v1)) (wf$ (fun_app$d (h$ ?v0) ?v1)))) :named a148))
(assert (! (forall ((?v0 N$)) (! (= (fun_app$h id$ ?v0) ?v0) :pattern ((fun_app$h id$ ?v0)))) :named a149))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$j id$a ?v0) ?v0) :pattern ((fun_app$j id$a ?v0)))) :named a150))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= ?v0 ?v1) (exists ((?v2 T$)) (and (member$b ?v2 top$b) (and (= (fun_app$j id$a ?v2) ?v0) (= (fun_app$j id$a ?v2) ?v1)))))) :named a151))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum$)) (= (= ?v0 ?v1) (exists ((?v2 T_dtree_sum$)) (and (member$ ?v2 top$a) (and (= (id$b ?v2) ?v0) (= (id$b ?v2) ?v1)))))) :named a152))
(assert (! (forall ((?v0 N$) (?v1 N$)) (= (= ?v0 ?v1) (exists ((?v2 N$)) (and (member$c ?v2 top$) (and (= (fun_app$h id$ ?v2) ?v0) (= (fun_app$h id$ ?v2) ?v1)))))) :named a153))
(assert (! (= (fun_app$k (comp$ root$) deftr$) id$) :named a154))
(assert (! (forall ((?v0 N$) (?v1 T_dtree_sum_set$)) (= (fun_app$e root$ (node$ ?v0 ?v1)) ?v0)) :named a155))
(assert (! (= (pow$ top$) top$ac) :named a156))
(assert (! (forall ((?v0 N$)) (! (= (fun_app$h id$ ?v0) ?v0) :pattern ((fun_app$h id$ ?v0)))) :named a157))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$j id$a ?v0) ?v0) :pattern ((fun_app$j id$a ?v0)))) :named a158))
(assert (! (forall ((?v0 T_dtree_sum$)) (! (= (fun_app$ top$am ?v0) (member$ ?v0 top$a)) :pattern ((fun_app$ top$am ?v0)))) :named a159))
(assert (! (forall ((?v0 N$)) (! (= (fun_app$c top$ao ?v0) (member$c ?v0 top$)) :pattern ((fun_app$c top$ao ?v0)))) :named a160))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N$)) (! (= (fun_app$h (fun_app$k (comp$ ?v0) ?v1) ?v2) (fun_app$e ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$h (fun_app$k (comp$ ?v0) ?v1) ?v2)))) :named a161))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree$)) (! (= (fun_app$e (fun_app$l (comp$a ?v0) ?v1) ?v2) (fun_app$h ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$e (fun_app$l (comp$a ?v0) ?v1) ?v2)))) :named a162))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 N$) (?v3 N$)) (=> (and (finite$a ?v0) (finite$a ?v1)) (= (= (node$ ?v2 ?v0) (node$ ?v3 ?v1)) (and (= ?v2 ?v3) (= ?v0 ?v1))))) :named a163))
(assert (! (forall ((?v0 Dtree_N_fun$)) (= (fun_app$l (comp$a id$) ?v0) ?v0)) :named a164))
(assert (! (forall ((?v0 T_N_sum_set$)) (= (finite$aa (pow$a ?v0)) (finite$ ?v0))) :named a165))
(assert (! (forall ((?v0 N_set$)) (= (finite$ac (pow$ ?v0)) (finite$d ?v0))) :named a166))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (= (finite$y (pow$b ?v0)) (finite$a ?v0))) :named a167))
(assert (! (forall ((?v0 Dtree$)) (=> (forall ((?v1 N$) (?v2 T_dtree_sum_set$)) (=> (and (finite$a ?v2) (= ?v0 (node$ ?v1 ?v2))) false)) false)) :named a168))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N_N_fun$) (?v3 N$)) (=> (= (fun_app$k (comp$ ?v0) ?v1) (fun_app$m (comp$b id$) ?v2)) (= (fun_app$e ?v0 (fun_app$d ?v1 ?v3)) (fun_app$h ?v2 ?v3)))) :named a169))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree$)) (=> (= (fun_app$l (comp$a ?v0) ?v1) (fun_app$l (comp$a id$) ?v2)) (= (fun_app$h ?v0 (fun_app$e ?v1 ?v3)) (fun_app$e ?v2 ?v3)))) :named a170))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_N_fun$) (?v2 N$) (?v3 Dtree_dtree_fun$) (?v4 N_dtree_fun$) (?v5 Dtree_N_fun$)) (=> (= (fun_app$d ?v0 (fun_app$h ?v1 ?v2)) (fun_app$n ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$h (fun_app$m (comp$b (fun_app$k (comp$ ?v5) ?v0)) ?v1) ?v2) (fun_app$h (fun_app$k (comp$ (fun_app$o (comp$c ?v5) ?v3)) ?v4) ?v2)))) :named a171))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree$) (?v3 N_N_fun$) (?v4 Dtree_N_fun$) (?v5 N_N_fun$)) (=> (= (fun_app$e ?v0 (fun_app$n ?v1 ?v2)) (fun_app$h ?v3 (fun_app$e ?v4 ?v2))) (= (fun_app$e (fun_app$o (comp$c (fun_app$l (comp$a ?v5) ?v0)) ?v1) ?v2) (fun_app$e (fun_app$l (comp$a (fun_app$m (comp$b ?v5) ?v3)) ?v4) ?v2)))) :named a172))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 N_dtree_fun$) (?v2 N$) (?v3 N_dtree_fun$) (?v4 N_N_fun$) (?v5 Dtree_N_fun$)) (=> (= (fun_app$n ?v0 (fun_app$d ?v1 ?v2)) (fun_app$d ?v3 (fun_app$h ?v4 ?v2))) (= (fun_app$h (fun_app$k (comp$ (fun_app$o (comp$c ?v5) ?v0)) ?v1) ?v2) (fun_app$h (fun_app$m (comp$b (fun_app$k (comp$ ?v5) ?v3)) ?v4) ?v2)))) :named a173))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N$) (?v3 Dtree_N_fun$) (?v4 N_dtree_fun$) (?v5 N_N_fun$)) (=> (= (fun_app$e ?v0 (fun_app$d ?v1 ?v2)) (fun_app$e ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$h (fun_app$k (comp$ (fun_app$l (comp$a ?v5) ?v0)) ?v1) ?v2) (fun_app$h (fun_app$k (comp$ (fun_app$l (comp$a ?v5) ?v3)) ?v4) ?v2)))) :named a174))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree$) (?v3 Dtree_N_fun$) (?v4 Dtree_dtree_fun$) (?v5 N_N_fun$)) (=> (= (fun_app$h ?v0 (fun_app$e ?v1 ?v2)) (fun_app$e ?v3 (fun_app$n ?v4 ?v2))) (= (fun_app$e (fun_app$l (comp$a (fun_app$m (comp$b ?v5) ?v0)) ?v1) ?v2) (fun_app$e (fun_app$o (comp$c (fun_app$l (comp$a ?v5) ?v3)) ?v4) ?v2)))) :named a175))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree$) (?v3 N_dtree_fun$) (?v4 Dtree_N_fun$) (?v5 Dtree_N_fun$)) (=> (= (fun_app$d ?v0 (fun_app$e ?v1 ?v2)) (fun_app$d ?v3 (fun_app$e ?v4 ?v2))) (= (fun_app$e (fun_app$l (comp$a (fun_app$k (comp$ ?v5) ?v0)) ?v1) ?v2) (fun_app$e (fun_app$l (comp$a (fun_app$k (comp$ ?v5) ?v3)) ?v4) ?v2)))) :named a176))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N_N_fun$) (?v3 N$)) (=> (= (fun_app$k (comp$ ?v0) ?v1) ?v2) (= (fun_app$e ?v0 (fun_app$d ?v1 ?v3)) (fun_app$h ?v2 ?v3)))) :named a177))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree$)) (=> (= (fun_app$l (comp$a ?v0) ?v1) ?v2) (= (fun_app$h ?v0 (fun_app$e ?v1 ?v3)) (fun_app$e ?v2 ?v3)))) :named a178))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 N_dtree_fun$) (?v4 N$)) (=> (= (fun_app$k (comp$ ?v0) ?v1) (fun_app$k (comp$ ?v2) ?v3)) (= (fun_app$e ?v0 (fun_app$d ?v1 ?v4)) (fun_app$e ?v2 (fun_app$d ?v3 ?v4))))) :named a179))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_N_fun$) (?v3 Dtree_N_fun$) (?v4 Dtree$)) (=> (= (fun_app$l (comp$a ?v0) ?v1) (fun_app$l (comp$a ?v2) ?v3)) (= (fun_app$h ?v0 (fun_app$e ?v1 ?v4)) (fun_app$h ?v2 (fun_app$e ?v3 ?v4))))) :named a180))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 N_dtree_fun$)) (=> (and (= (fun_app$k (comp$ ?v0) ?v1) (fun_app$k (comp$ ?v2) ?v3)) (=> (forall ((?v4 N$)) (= (fun_app$e ?v0 (fun_app$d ?v1 ?v4)) (fun_app$e ?v2 (fun_app$d ?v3 ?v4)))) false)) false)) :named a181))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_N_fun$) (?v3 Dtree_N_fun$)) (=> (and (= (fun_app$l (comp$a ?v0) ?v1) (fun_app$l (comp$a ?v2) ?v3)) (=> (forall ((?v4 Dtree$)) (= (fun_app$h ?v0 (fun_app$e ?v1 ?v4)) (fun_app$h ?v2 (fun_app$e ?v3 ?v4)))) false)) false)) :named a182))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N$)) (! (= (fun_app$h (fun_app$k (comp$ ?v0) ?v1) ?v2) (fun_app$e ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$h (fun_app$k (comp$ ?v0) ?v1) ?v2)))) :named a183))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree$)) (! (= (fun_app$e (fun_app$l (comp$a ?v0) ?v1) ?v2) (fun_app$h ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$e (fun_app$l (comp$a ?v0) ?v1) ?v2)))) :named a184))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N_N_fun$)) (= (fun_app$m (comp$b (fun_app$k (comp$ ?v0) ?v1)) ?v2) (fun_app$k (comp$ ?v0) (fun_app$p (comp$d ?v1) ?v2)))) :named a185))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$)) (= (fun_app$o (comp$c (fun_app$l (comp$a ?v0) ?v1)) ?v2) (fun_app$l (comp$a ?v0) (fun_app$o (comp$c ?v1) ?v2)))) :named a186))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 N_dtree_fun$)) (= (fun_app$k (comp$ (fun_app$o (comp$c ?v0) ?v1)) ?v2) (fun_app$k (comp$ ?v0) (fun_app$q (comp$e ?v1) ?v2)))) :named a187))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_dtree_fun$)) (= (fun_app$k (comp$ (fun_app$l (comp$a ?v0) ?v1)) ?v2) (fun_app$m (comp$b ?v0) (fun_app$k (comp$ ?v1) ?v2)))) :named a188))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N_N_fun$) (?v2 Dtree_N_fun$)) (= (fun_app$l (comp$a (fun_app$m (comp$b ?v0) ?v1)) ?v2) (fun_app$l (comp$a ?v0) (fun_app$l (comp$a ?v1) ?v2)))) :named a189))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 Dtree_N_fun$)) (= (fun_app$l (comp$a (fun_app$k (comp$ ?v0) ?v1)) ?v2) (fun_app$o (comp$c ?v0) (fun_app$r (comp$f ?v1) ?v2)))) :named a190))
(assert (! (forall ((?v0 Dtree_N_fun$)) (= (fun_app$l (comp$a id$) ?v0) ?v0)) :named a191))
(assert (! (= (comp$a id$) id$c) :named a192))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N$)) (=> (= (fun_app$k (comp$ ?v0) ?v1) id$) (= (fun_app$e ?v0 (fun_app$d ?v1 ?v2)) ?v2))) :named a193))
(assert (! (forall ((?v0 N_T_fun$) (?v1 T_N_fun$) (?v2 T_T_fun$)) (=> (and (type_definition$ ?v0 ?v1 top$b) (= ?v2 id$a)) (= (fun_app$s (comp$g (fun_app$t (comp$h ?v1) ?v2)) ?v0) id$))) :named a194))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_T_fun$) (?v2 T_T_fun$)) (=> (and (type_definition$a ?v0 ?v1 top$b) (= ?v2 id$a)) (= (fun_app$u (comp$i (fun_app$u (comp$i ?v1) ?v2)) ?v0) id$a))) :named a195))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$)) (=> (and (type_definition$b ?v0 ?v1 top$c) (= ?v2 id$d)) (= (fun_app$k (comp$ (fun_app$o (comp$c ?v1) ?v2)) ?v0) id$))) :named a196))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N_N_fun$) (?v2 N_N_fun$)) (=> (and (type_definition$c ?v0 ?v1 top$) (= ?v2 id$)) (= (fun_app$m (comp$b (fun_app$m (comp$b ?v1) ?v2)) ?v0) id$))) :named a197))
(assert (! (forall ((?v0 T_N_fun$) (?v1 N_T_fun$) (?v2 N_N_fun$)) (=> (and (type_definition$d ?v0 ?v1 top$) (= ?v2 id$)) (= (fun_app$v (comp$j (fun_app$w (comp$k ?v1) ?v2)) ?v0) id$a))) :named a198))
(assert (! (forall ((?v0 N$) (?v1 T_dtree_sum$)) (=> (and (fun_app$c (fun_app$i (inItr$ top$) tr0$) ?v0) (member$ ?v1 (cont$ (fun_app$d (pick$ tr0$) ?v0)))) (= (map_sum$ id$a (fun_app$l (comp$a (fun_app$k (comp$ root$) (h$ tr0$))) root$) ?v1) (map_sum$ id$a root$ ?v1)))) :named a199))
(assert (! (forall ((?v0 Dtree$)) (= (node$ (fun_app$e root$ ?v0) (cont$ ?v0)) ?v0)) :named a200))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 N$)) (=> (finite$a ?v0) (= (cont$ (node$ ?v1 ?v0)) ?v0))) :named a201))
(assert (! (forall ((?v0 N_N_sum$)) (= (fun_app$x (map_sum$a id$ id$) ?v0) ?v0)) :named a202))
(assert (! (forall ((?v0 N_T_sum$)) (= (fun_app$y (map_sum$b id$ id$a) ?v0) ?v0)) :named a203))
(assert (! (forall ((?v0 T_N_sum$)) (= (fun_app$z (map_sum$c id$a id$) ?v0) ?v0)) :named a204))
(assert (! (forall ((?v0 T_T_sum$)) (= (fun_app$aa (map_sum$d id$a id$a) ?v0) ?v0)) :named a205))
(assert (! (= (map_sum$a id$ id$) id$e) :named a206))
(assert (! (= (map_sum$b id$ id$a) id$f) :named a207))
(assert (! (= (map_sum$c id$a id$) id$g) :named a208))
(assert (! (= (map_sum$d id$a id$a) id$h) :named a209))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_dtree_fun$) (?v3 N_dtree_fun$) (?v4 N_N_sum$)) (= (map_sum$e ?v0 ?v1 (map_sum$f ?v2 ?v3 ?v4)) (fun_app$x (map_sum$a (fun_app$k (comp$ ?v0) ?v2) (fun_app$k (comp$ ?v1) ?v3)) ?v4))) :named a210))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_N_fun$) (?v2 N_dtree_fun$) (?v3 Dtree_N_fun$) (?v4 N_dtree_sum$)) (= (map_sum$g ?v0 ?v1 (map_sum$h ?v2 ?v3 ?v4)) (map_sum$i (fun_app$k (comp$ ?v0) ?v2) (fun_app$l (comp$a ?v1) ?v3) ?v4))) :named a211))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_N_fun$) (?v3 N_dtree_fun$) (?v4 Dtree_N_sum$)) (= (map_sum$i ?v0 ?v1 (map_sum$j ?v2 ?v3 ?v4)) (map_sum$g (fun_app$l (comp$a ?v0) ?v2) (fun_app$k (comp$ ?v1) ?v3) ?v4))) :named a212))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N_N_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree_N_fun$) (?v4 Dtree_dtree_sum$)) (= (fun_app$x (map_sum$a ?v0 ?v1) (map_sum$e ?v2 ?v3 ?v4)) (map_sum$e (fun_app$l (comp$a ?v0) ?v2) (fun_app$l (comp$a ?v1) ?v3) ?v4))) :named a213))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_N_fun$) (?v2 T_T_fun$) (?v3 Dtree_N_fun$) (?v4 T_dtree_sum$)) (= (fun_app$z (map_sum$c ?v0 ?v1) (map_sum$ ?v2 ?v3 ?v4)) (map_sum$ (fun_app$u (comp$i ?v0) ?v2) (fun_app$l (comp$a ?v1) ?v3) ?v4))) :named a214))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_N_fun$) (?v2 T_T_fun$) (?v3 Dtree_dtree_fun$) (?v4 T_dtree_sum$)) (= (map_sum$ ?v0 ?v1 (map_sum$k ?v2 ?v3 ?v4)) (map_sum$ (fun_app$u (comp$i ?v0) ?v2) (fun_app$o (comp$c ?v1) ?v3) ?v4))) :named a215))
(assert (! (forall ((?v0 Dtree$)) (finite$a (cont$ ?v0))) :named a216))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (= (fun_app$e root$ ?v0) (fun_app$e root$ ?v1)) (= (cont$ ?v0) (cont$ ?v1))) (= ?v0 ?v1))) :named a217))
(check-sat)
;(get-unsat-core)
