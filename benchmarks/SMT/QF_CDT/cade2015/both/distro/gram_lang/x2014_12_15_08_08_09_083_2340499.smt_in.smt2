; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 216
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T_N_sum_set$ 0)
(declare-sort T_N_sum_set_bool_fun$ 0)
(declare-sort N_T_N_sum_set_prod_set$ 0)
(declare-sort N_T_N_sum_set_bool_fun_fun$ 0)
(declare-sort N_T_N_sum_set_prod_bool_fun$ 0)
(declare-datatypes () ((N_T_N_sum_set_prod$ (pair$ (fst$ N$) (snd$ T_N_sum_set$)))))
(declare-fun n$ () N$)
(declare-fun p$ () N_T_N_sum_set_prod_set$)
(declare-fun s$ (N$) T_N_sum_set$)
(declare-fun uu$ () T_N_sum_set_bool_fun$)
(declare-fun eps$ (T_N_sum_set_bool_fun$) T_N_sum_set$)
(declare-fun uua$ (N$) T_N_sum_set_bool_fun$)
(declare-fun uub$ (T_N_sum_set$) T_N_sum_set_bool_fun$)
(declare-fun uuc$ (T_N_sum_set$) T_N_sum_set_bool_fun$)
(declare-fun uud$ (N_T_N_sum_set_prod_set$) N_T_N_sum_set_bool_fun_fun$)
(declare-fun member$ (N_T_N_sum_set_prod$ N_T_N_sum_set_prod_set$) Bool)
(declare-fun fun_app$ (T_N_sum_set_bool_fun$ T_N_sum_set$) Bool)
(declare-fun fun_app$a (N_T_N_sum_set_bool_fun_fun$ N$) T_N_sum_set_bool_fun$)
(declare-fun fun_app$b (N_T_N_sum_set_prod_bool_fun$ N_T_N_sum_set_prod$) Bool)
(assert (! (forall ((?v0 T_N_sum_set$)) (! (= (fun_app$ uu$ ?v0) (member$ (pair$ n$ ?v0) p$)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 N$) (?v1 T_N_sum_set$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (member$ (pair$ ?v0 ?v1) p$)) :pattern ((fun_app$ (uua$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set$)) (! (= (fun_app$ (uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$ (uub$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set$)) (! (= (fun_app$ (uuc$ ?v0) ?v1) (= ?v1 ?v0)) :pattern ((fun_app$ (uuc$ ?v0) ?v1)))) :named a3))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$) (?v1 N$) (?v2 T_N_sum_set$)) (! (= (fun_app$ (fun_app$a (uud$ ?v0) ?v1) ?v2) (member$ (pair$ ?v1 ?v2) ?v0)) :pattern ((fun_app$ (fun_app$a (uud$ ?v0) ?v1) ?v2)))) :named a4))
(assert (! (not (member$ (pair$ n$ (eps$ uu$)) p$)) :named a5))
(assert (! (forall ((?v0 N$)) (exists ((?v1 T_N_sum_set$)) (member$ (pair$ ?v0 ?v1) p$))) :named a6))
(assert (! (forall ((?v0 N$)) (= (s$ ?v0) (eps$ (uua$ ?v0)))) :named a7))
(assert (! (forall ((?v0 T_N_sum_set$)) (= (eps$ (uub$ ?v0)) ?v0)) :named a8))
(assert (! (forall ((?v0 T_N_sum_set$)) (= (eps$ (uuc$ ?v0)) ?v0)) :named a9))
(assert (! (forall ((?v0 T_N_sum_set_bool_fun$) (?v1 T_N_sum_set$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v2 T_N_sum_set$)) (=> (fun_app$ ?v0 ?v2) (= ?v2 ?v1)))) (= (eps$ ?v0) ?v1))) :named a10))
(assert (! (forall ((?v0 N$) (?v1 T_N_sum_set$) (?v2 N$) (?v3 T_N_sum_set$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a11))
(assert (! (forall ((?v0 N$) (?v1 T_N_sum_set$) (?v2 N$) (?v3 T_N_sum_set$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 T_N_sum_set_bool_fun$)) (= (fun_app$ ?v0 (eps$ ?v0)) (exists ((?v1 T_N_sum_set$)) (fun_app$ ?v0 ?v1)))) :named a13))
(assert (! (forall ((?v0 T_N_sum_set_bool_fun$) (?v1 T_N_sum_set_bool_fun$)) (=> (and (exists ((?v2 T_N_sum_set$)) (fun_app$ ?v0 ?v2)) (forall ((?v2 T_N_sum_set$)) (=> (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2)))) (fun_app$ ?v1 (eps$ ?v0)))) :named a14))
(assert (! (forall ((?v0 T_N_sum_set_bool_fun$)) (=> (exists ((?v1 T_N_sum_set$)) (fun_app$ ?v0 ?v1)) (fun_app$ ?v0 (eps$ ?v0)))) :named a15))
(assert (! (forall ((?v0 T_N_sum_set_bool_fun$) (?v1 T_N_sum_set$)) (=> (and (exists ((?v2 T_N_sum_set$)) (and (fun_app$ ?v0 ?v2) (forall ((?v3 T_N_sum_set$)) (=> (fun_app$ ?v0 ?v3) (= ?v3 ?v2))))) (fun_app$ ?v0 ?v1)) (= (eps$ ?v0) ?v1))) :named a16))
(assert (! (forall ((?v0 T_N_sum_set_bool_fun$) (?v1 T_N_sum_set$) (?v2 T_N_sum_set_bool_fun$)) (=> (and (fun_app$ ?v0 ?v1) (forall ((?v3 T_N_sum_set$)) (=> (fun_app$ ?v0 ?v3) (fun_app$ ?v2 ?v3)))) (fun_app$ ?v2 (eps$ ?v0)))) :named a17))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$) (?v1 N_T_N_sum_set_prod_set$)) (= (= (uud$ ?v0) (uud$ ?v1)) (= ?v0 ?v1))) :named a18))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$)) (exists ((?v1 N$) (?v2 T_N_sum_set$)) (= ?v0 (pair$ ?v1 ?v2)))) :named a19))
(assert (! (forall ((?v0 N$) (?v1 T_N_sum_set$) (?v2 N$) (?v3 T_N_sum_set$)) (=> (and (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a20))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$)) (=> (forall ((?v1 N$) (?v2 T_N_sum_set$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a21))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_bool_fun$) (?v1 N_T_N_sum_set_prod$)) (=> (forall ((?v2 N$) (?v3 T_N_sum_set$)) (fun_app$b ?v0 (pair$ ?v2 ?v3))) (fun_app$b ?v0 ?v1))) :named a22))
(check-sat)
;(get-unsat-core)
