; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 380
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))
  (N_list$ (nil$) (cons$ (hd$ N$) (tl$ N_list$)))))
(declare-fun f$ () N_dtree_fun$)
(declare-fun n$ () N$)
(declare-fun n1$ () N$)
(declare-fun nl$ () N_list$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun nl1$ () N_list$)
(declare-fun nl2$ () N_list$)
(declare-fun nla$ () N_list$)
(declare-fun reg$ (N_dtree_fun$ Dtree$) Bool)
(declare-fun set$ (N_list$) N_set$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun last$ (N_list$) N$)
(declare-fun nl1$a () N_list$)
(declare-fun nl2$a () N_list$)
(declare-fun path$ (N_dtree_fun$ N_list$) Bool)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun fun_app$ (N_dtree_fun$ N$) Dtree$)
(declare-fun member$a (N$ N_set$) Bool)
(assert (! (not (member$ (inr$ (fun_app$ f$ n1$)) (cont$ (fun_app$ f$ n$)))) :named a0))
(assert (! (path$ f$ nl$) :named a1))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a3))
(assert (! (path$ f$ nl1$) :named a4))
(assert (! (not (member$a n$ (set$ nl1$a))) :named a5))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (reg$ ?v0 ?v1) (member$ (inr$ ?v2) (cont$ ?v1))) (reg$ ?v0 ?v2))) :named a6))
(assert (! (= nl1$ (cons$ n1$ nl2$)) :named a7))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (not (= ?v0 ?v1)) (not (= (inr$ ?v0) (inr$ ?v1))))) :named a9))
(assert (! (= nl1$a (cons$ n1$ nl2$a)) :named a10))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (member$ (inr$ ?v1) (cont$ ?v0))) (wf$ ?v1))) :named a11))
(assert (! (path$ f$ nla$) :named a12))
(assert (! (=> (forall ((?v0 N_list$)) (=> (= nl1$ (cons$ n1$ ?v0)) false)) false) :named a13))
(assert (! (=> (forall ((?v0 N$) (?v1 N_list$)) (=> (= nla$ (cons$ ?v0 ?v1)) false)) false) :named a14))
(assert (! (= nla$ (cons$ n$ nl1$a)) :named a15))
(assert (! (path$ f$ nl1$a) :named a16))
(assert (! (= (last$ nl1$) (last$ nl1$a)) :named a17))
(check-sat)
;(get-unsat-core)
