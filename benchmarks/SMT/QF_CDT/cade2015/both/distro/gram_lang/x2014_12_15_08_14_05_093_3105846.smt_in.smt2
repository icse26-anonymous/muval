; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 223
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun h$ (Dtree$ N$) Dtree$)
(declare-fun n$ () N$)
(declare-fun x$ () Dtree$)
(declare-fun y$ () Dtree$)
(declare-fun na$ () N$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun h_r$ (Dtree$ N$) N$)
(declare-fun top$ () N_set$)
(declare-fun tr0$ () Dtree$)
(declare-fun tra$ () Dtree$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun pick$ (Dtree$ N$) Dtree$)
(declare-fun root$ (Dtree$) N$)
(declare-fun inItr$ (N_set$ Dtree$ N$) Bool)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun member$a (N$ N_set$) Bool)
(assert (! (not (= (h$ tr0$ (root$ x$)) (h$ tr0$ (root$ y$)))) :named a0))
(assert (! (member$ (inr$ x$) (cont$ (pick$ tr0$ na$))) :named a1))
(assert (! (member$ (inr$ y$) (cont$ (pick$ tr0$ na$))) :named a2))
(assert (! (= (root$ (h$ tr0$ (root$ x$))) (root$ (h$ tr0$ (root$ y$)))) :named a3))
(assert (! (inItr$ top$ tr0$ n$) :named a4))
(assert (! (wf$ tr0$) :named a5))
(assert (! (inItr$ top$ tr0$ na$) :named a6))
(assert (! (forall ((?v0 N$)) (= (root$ (h$ tr0$ ?v0)) (root$ (pick$ tr0$ ?v0)))) :named a7))
(assert (! (= tra$ (h$ tr0$ na$)) :named a8))
(assert (! (exists ((?v0 N$)) (and (inItr$ top$ tr0$ ?v0) (= tra$ (h$ tr0$ ?v0)))) :named a9))
(assert (! (forall ((?v0 N$)) (! (= (h_r$ tr0$ ?v0) (root$ (pick$ tr0$ ?v0))) :pattern ((h_r$ tr0$ ?v0)))) :named a10))
(assert (! (forall ((?v0 N$)) (=> (inItr$ top$ tr0$ ?v0) (= (root$ (pick$ tr0$ ?v0)) ?v0))) :named a11))
(assert (! (forall ((?v0 Dtree$) (?v1 N$)) (= (root$ (h$ ?v0 ?v1)) (root$ (pick$ ?v0 ?v1)))) :named a12))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (= (inItr$ ?v0 ?v1 ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 (root$ ?v3)) (member$a (root$ ?v3) ?v4))))) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 N$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$a (root$ ?v3) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (inItr$ ?v4 ?v5 ?v6)))))))))) :named a13))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (and (inItr$ ?v0 ?v1 ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 (root$ ?v3)) (member$a (root$ ?v3) ?v4)))) false)) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 N$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$a (root$ ?v3) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (inItr$ ?v4 ?v5 ?v6)))))) false)))) false)) :named a14))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 N$)) (=> (and (member$a (root$ ?v0) ?v1) (and (member$ (inr$ ?v2) (cont$ ?v0)) (inItr$ ?v1 ?v2 ?v3))) (inItr$ ?v1 ?v0 ?v3))) :named a15))
(assert (! (forall ((?v0 N$)) (=> (inItr$ top$ tr0$ ?v0) (= (root$ (h$ tr0$ ?v0)) ?v0))) :named a16))
(assert (! (=> (forall ((?v0 N$)) (=> (and (inItr$ top$ tr0$ ?v0) (= tra$ (h$ tr0$ ?v0))) false)) false) :named a17))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a18))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a19))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (= (root$ ?v0) (root$ ?v1)) (= (cont$ ?v0) (cont$ ?v1))) (= ?v0 ?v1))) :named a20))
(check-sat)
;(get-unsat-core)
