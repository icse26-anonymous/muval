; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 198
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort N_N_fun$ 0)
(declare-sort N_T_fun$ 0)
(declare-sort T_N_fun$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort Dtree_set$ 0)
(declare-sort Dtree_N_fun$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort T_N_sum_set$ 0)
(declare-sort N_N_sum_N_fun$ 0)
(declare-sort N_T_N_sum_fun$ 0)
(declare-sort N_T_sum_N_fun$ 0)
(declare-sort T_N_sum_N_fun$ 0)
(declare-sort T_N_sum_T_fun$ 0)
(declare-sort T_T_N_sum_fun$ 0)
(declare-sort T_T_sum_T_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort N_set_N_set_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort T_set_T_set_fun$ 0)
(declare-sort T_N_sum_bool_fun$ 0)
(declare-sort Dtree_N_sum_N_fun$ 0)
(declare-sort Dtree_T_N_sum_fun$ 0)
(declare-sort N_N_sum_dtree_fun$ 0)
(declare-sort N_T_N_sum_set_fun$ 0)
(declare-sort N_T_dtree_sum_fun$ 0)
(declare-sort N_dtree_sum_N_fun$ 0)
(declare-sort T_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_N_fun$ 0)
(declare-sort N_N_fun_N_N_fun_fun$ 0)
(declare-sort N_N_fun_N_T_fun_fun$ 0)
(declare-sort N_N_sum_N_N_sum_fun$ 0)
(declare-sort N_N_sum_T_N_sum_fun$ 0)
(declare-sort N_T_sum_N_T_sum_fun$ 0)
(declare-sort N_T_sum_T_T_sum_fun$ 0)
(declare-sort T_N_sum_N_N_sum_fun$ 0)
(declare-sort T_N_sum_T_N_sum_fun$ 0)
(declare-sort T_T_fun_T_N_fun_fun$ 0)
(declare-sort T_T_fun_T_T_fun_fun$ 0)
(declare-sort T_T_sum_N_T_sum_fun$ 0)
(declare-sort T_T_sum_T_T_sum_fun$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort Dtree_N_sum_dtree_fun$ 0)
(declare-sort Dtree_T_dtree_sum_fun$ 0)
(declare-sort Dtree_dtree_sum_N_fun$ 0)
(declare-sort N_dtree_sum_dtree_fun$ 0)
(declare-sort Dtree_N_sum_N_N_sum_fun$ 0)
(declare-sort Dtree_T_sum_N_T_sum_fun$ 0)
(declare-sort N_N_fun_N_dtree_fun_fun$ 0)
(declare-sort N_dtree_fun_N_N_fun_fun$ 0)
(declare-sort N_dtree_sum_N_N_sum_fun$ 0)
(declare-sort T_N_sum_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_T_N_sum_fun$ 0)
(declare-sort Dtree_T_dtree_sum_set_fun$ 0)
(declare-sort Dtree_dtree_sum_dtree_fun$ 0)
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0)
(declare-sort Dtree_dtree_sum_N_N_sum_fun$ 0)
(declare-sort N_N_sum_dtree_dtree_sum_fun$ 0)
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0)
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0)
(declare-sort Dtree_N_sum_dtree_dtree_sum_fun$ 0)
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0)
(declare-sort N_N_fun_T_N_sum_T_N_sum_fun_fun$ 0)
(declare-sort N_dtree_sum_dtree_dtree_sum_fun$ 0)
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0)
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0)
(declare-sort Dtree_dtree_sum_dtree_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0)
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0)
(declare-sort N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ 0)
(declare-sort Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ 0)
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0)
(declare-sort T_N_sum_T_N_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ 0)
(declare-sort T_N_sum_T_dtree_sum_fun_T_N_sum_T_N_sum_fun_fun$ 0)
(declare-sort T_N_sum_T_dtree_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ 0)
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ 0)
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))
  (T_N_sum$ (inl$a (projl$a T$)) (inr$a (projr$a N$)))
  (Dtree_dtree_sum$ (inl$b (projl$b Dtree$)) (inr$b (projr$b Dtree$)))
  (N_N_sum$ (inl$c (projl$c N$)) (inr$c (projr$c N$)))
  (Dtree_N_sum$ (inl$d (projl$d Dtree$)) (inr$d (projr$d N$)))
  (N_dtree_sum$ (inl$e (projl$e N$)) (inr$e (projr$e Dtree$)))
  (T_T_sum$ (inl$f (projl$f T$)) (inr$f (projr$f T$)))
  (N_T_sum$ (inl$g (projl$g N$)) (inr$g (projr$g T$)))
  (Dtree_T_sum$ (inl$h (projl$h Dtree$)) (inr$h (projr$h T$)))))
(declare-fun s$ () N_T_N_sum_set_fun$)
(declare-fun id$ () T_T_fun$)
(declare-fun tr$ () Dtree$)
(declare-fun uu$ () T_T_N_sum_fun$)
(declare-fun id$a () Dtree_dtree_fun$)
(declare-fun id$b () T_set_T_set_fun$)
(declare-fun id$c () N_N_fun$)
(declare-fun id$d () N_set_N_set_fun$)
(declare-fun id$e () T_dtree_sum_T_dtree_sum_fun$)
(declare-fun id$f () T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun id$g () T_T_sum_T_T_sum_fun$)
(declare-fun id$h () T_N_sum_T_N_sum_fun$)
(declare-fun id$i () N_T_sum_N_T_sum_fun$)
(declare-fun id$j () N_N_sum_N_N_sum_fun$)
(declare-fun tr0$ () Dtree$)
(declare-fun uua$ () T_T_dtree_sum_fun$)
(declare-fun uub$ () Dtree_T_dtree_sum_fun$)
(declare-fun uuc$ () N_T_N_sum_fun$)
(declare-fun comp$ (Dtree_N_fun$) Dtree_dtree_fun_dtree_N_fun_fun$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun node$ (N$ T_dtree_sum_set$) Dtree$)
(declare-fun root$ () Dtree_N_fun$)
(declare-fun comp$a (Dtree_N_fun$) N_dtree_fun_N_N_fun_fun$)
(declare-fun comp$b (N_N_fun$) Dtree_N_fun_dtree_N_fun_fun$)
(declare-fun comp$c (N_dtree_fun$) Dtree_N_fun_dtree_dtree_fun_fun$)
(declare-fun comp$d (N_N_fun$) N_N_fun_N_N_fun_fun$)
(declare-fun comp$e (N_dtree_fun$) N_N_fun_N_dtree_fun_fun$)
(declare-fun comp$f (Dtree_dtree_fun$) Dtree_dtree_fun_dtree_dtree_fun_fun$)
(declare-fun comp$g (Dtree_dtree_fun$) N_dtree_fun_N_dtree_fun_fun$)
(declare-fun comp$h (T_N_sum_T_N_sum_fun$) T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$)
(declare-fun comp$i (T_dtree_sum_T_dtree_sum_fun$) T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$)
(declare-fun comp$j (T_dtree_sum_T_dtree_sum_fun$) T_N_sum_T_dtree_sum_fun_T_N_sum_T_dtree_sum_fun_fun$)
(declare-fun comp$k (T_N_sum_T_dtree_sum_fun$) T_N_sum_T_N_sum_fun_T_N_sum_T_dtree_sum_fun_fun$)
(declare-fun comp$l (T_N_sum_T_dtree_sum_fun$) T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$)
(declare-fun comp$m (T_dtree_sum_T_N_sum_fun$) T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$)
(declare-fun comp$n (T_dtree_sum_T_N_sum_fun$) T_N_sum_T_dtree_sum_fun_T_N_sum_T_N_sum_fun_fun$)
(declare-fun comp$o (T_T_fun$) T_T_fun_T_T_fun_fun$)
(declare-fun comp$p (Dtree_dtree_sum_N_N_sum_fun$ Dtree_dtree_sum_dtree_dtree_sum_fun$) Dtree_dtree_sum_N_N_sum_fun$)
(declare-fun comp$q (Dtree_dtree_sum_N_N_sum_fun$ Dtree_N_sum_dtree_dtree_sum_fun$) Dtree_N_sum_N_N_sum_fun$)
(declare-fun comp$r (Dtree_dtree_sum_N_N_sum_fun$ N_dtree_sum_dtree_dtree_sum_fun$) N_dtree_sum_N_N_sum_fun$)
(declare-fun comp$s (Dtree_dtree_sum_N_N_sum_fun$ N_N_sum_dtree_dtree_sum_fun$) N_N_sum_N_N_sum_fun$)
(declare-fun comp$t (T_T_sum_T_fun$ T_T_sum_T_T_sum_fun$ T_T_sum$) T$)
(declare-fun comp$u (T_T_sum_T_fun$ N_T_sum_T_T_sum_fun$ N_T_sum$) T$)
(declare-fun comp$v (N_T_fun$) N_N_fun_N_T_fun_fun$)
(declare-fun comp$w (T_N_sum_T_fun$ T_N_sum_T_N_sum_fun$ T_N_sum$) T$)
(declare-fun comp$x (T_N_sum_T_fun$ N_N_sum_T_N_sum_fun$ N_N_sum$) T$)
(declare-fun comp$y (N_T_sum_N_fun$ T_T_sum_N_T_sum_fun$ T_T_sum$) N$)
(declare-fun comp$z (T_N_fun$) T_T_fun_T_N_fun_fun$)
(declare-fun deftr$ () N_dtree_fun$)
(declare-fun image$ (T_dtree_sum_T_dtree_sum_fun$) T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun comp$aa (N_T_sum_N_fun$ N_T_sum_N_T_sum_fun$ N_T_sum$) N$)
(declare-fun comp$ab (N_N_sum_N_fun$ T_N_sum_N_N_sum_fun$ T_N_sum$) N$)
(declare-fun comp$ac (N_N_sum_N_fun$ N_N_sum_N_N_sum_fun$ N_N_sum$) N$)
(declare-fun comp$ad (N_T_sum_N_fun$ Dtree_T_sum_N_T_sum_fun$ Dtree_T_sum$) N$)
(declare-fun comp$ae (N_N_sum_N_fun$ Dtree_N_sum_N_N_sum_fun$ Dtree_N_sum$) N$)
(declare-fun comp$af (Dtree_dtree_sum_N_fun$ Dtree_dtree_sum_dtree_dtree_sum_fun$) Dtree_dtree_sum_N_fun$)
(declare-fun comp$ag (Dtree_dtree_sum_N_fun$ Dtree_N_sum_dtree_dtree_sum_fun$) Dtree_N_sum_N_fun$)
(declare-fun comp$ah (Dtree_dtree_sum_N_fun$ N_dtree_sum_dtree_dtree_sum_fun$) N_dtree_sum_N_fun$)
(declare-fun comp$ai (Dtree_dtree_sum_N_fun$ N_N_sum_dtree_dtree_sum_fun$) N_N_sum_N_fun$)
(declare-fun comp$aj (T_dtree_sum_N_fun$ T_dtree_sum_T_dtree_sum_fun$) T_dtree_sum_N_fun$)
(declare-fun comp$ak (T_dtree_sum_N_fun$ T_N_sum_T_dtree_sum_fun$) T_N_sum_N_fun$)
(declare-fun comp$al (Dtree_N_fun$ Dtree_dtree_sum_dtree_fun$) Dtree_dtree_sum_N_fun$)
(declare-fun comp$am (Dtree_N_fun$ Dtree_N_sum_dtree_fun$) Dtree_N_sum_N_fun$)
(declare-fun comp$an (Dtree_N_fun$ N_dtree_sum_dtree_fun$) N_dtree_sum_N_fun$)
(declare-fun comp$ao (Dtree_N_fun$ N_N_sum_dtree_fun$) N_N_sum_N_fun$)
(declare-fun comp$ap (T_N_sum_T_N_sum_fun$ T_T_N_sum_fun$) T_T_N_sum_fun$)
(declare-fun comp$aq (T_T_N_sum_fun$ T_T_fun$) T_T_N_sum_fun$)
(declare-fun comp$ar (T_dtree_sum_T_dtree_sum_fun$ T_T_dtree_sum_fun$) T_T_dtree_sum_fun$)
(declare-fun comp$as (T_T_dtree_sum_fun$ T_T_fun$) T_T_dtree_sum_fun$)
(declare-fun comp$at (T_N_sum_T_dtree_sum_fun$ T_T_N_sum_fun$) T_T_dtree_sum_fun$)
(declare-fun comp$au (T_dtree_sum_T_N_sum_fun$ T_T_dtree_sum_fun$) T_T_N_sum_fun$)
(declare-fun comp$av (T_dtree_sum_T_dtree_sum_fun$ Dtree_T_dtree_sum_fun$) Dtree_T_dtree_sum_fun$)
(declare-fun comp$aw (Dtree_T_dtree_sum_fun$ Dtree_dtree_fun$) Dtree_T_dtree_sum_fun$)
(declare-fun comp$ax (T_N_sum_T_dtree_sum_fun$ N_T_N_sum_fun$) N_T_dtree_sum_fun$)
(declare-fun comp$ay (Dtree_T_dtree_sum_fun$ N_dtree_fun$) N_T_dtree_sum_fun$)
(declare-fun comp$az (T_dtree_sum_T_N_sum_fun$ Dtree_T_dtree_sum_fun$) Dtree_T_N_sum_fun$)
(declare-fun comp$ba (N_T_N_sum_fun$ Dtree_N_fun$) Dtree_T_N_sum_fun$)
(declare-fun finite$ (T_dtree_sum_set$) Bool)
(declare-fun hsubst$ (Dtree$) Dtree_dtree_fun$)
(declare-fun image$a (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$) T_dtree_sum_set$)
(declare-fun image$b (T_T_fun$) T_set_T_set_fun$)
(declare-fun image$c (N_N_fun$) N_set_N_set_fun$)
(declare-fun image$d (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$) T_N_sum_set$)
(declare-fun image$e (T_N_sum_T_N_sum_fun$ T_N_sum_set$) T_N_sum_set$)
(declare-fun image$f (Dtree_N_fun$ Dtree_set$) N_set$)
(declare-fun image$g (Dtree_dtree_fun$ Dtree_set$) Dtree_set$)
(declare-fun image$h (N_dtree_fun$ N_set$) Dtree_set$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun unfold$ (Dtree_N_fun$) Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$)
(declare-fun vimage$ (N_N_fun$) N_set_N_set_fun$)
(declare-fun finite$a (T_N_sum_set$) Bool)
(declare-fun fun_app$ (Dtree_T_dtree_sum_fun$ Dtree$) T_dtree_sum$)
(declare-fun map_sum$ (T_T_fun$) Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$)
(declare-fun member$a (T_N_sum$ T_N_sum_set$) Bool)
(declare-fun unfold$a (N_N_fun$) N_T_N_sum_set_fun_N_dtree_fun_fun$)
(declare-fun vimage$a (T_T_N_sum_fun$ T_N_sum_set$) T_set$)
(declare-fun vimage$b (T_T_dtree_sum_fun$ T_dtree_sum_set$) T_set$)
(declare-fun case_sum$ (T_T_fun$ T_T_fun$) T_T_sum_T_fun$)
(declare-fun fun_app$a (N_T_N_sum_fun$ N$) T_N_sum$)
(declare-fun fun_app$b (T_T_dtree_sum_fun$ T$) T_dtree_sum$)
(declare-fun fun_app$c (T_T_N_sum_fun$ T$) T_N_sum$)
(declare-fun fun_app$d (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$e (Dtree_N_fun$ Dtree$) N$)
(declare-fun fun_app$f (Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ Dtree_T_dtree_sum_set_fun$) Dtree_dtree_fun$)
(declare-fun fun_app$g (Dtree_T_dtree_sum_set_fun$ Dtree$) T_dtree_sum_set$)
(declare-fun fun_app$h (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$) Dtree_N_fun$)
(declare-fun fun_app$i (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun fun_app$j (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$) T_dtree_sum_T_dtree_sum_fun$)
(declare-fun fun_app$k (N_T_N_sum_set_fun$ N$) T_N_sum_set$)
(declare-fun fun_app$l (N_dtree_fun$ N$) Dtree$)
(declare-fun fun_app$m (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$) N_dtree_fun$)
(declare-fun fun_app$n (N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ N_dtree_fun$) T_N_sum_T_dtree_sum_fun$)
(declare-fun fun_app$o (T_T_fun$ T$) T$)
(declare-fun fun_app$p (N_N_fun$ N$) N$)
(declare-fun fun_app$q (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$) N_N_fun$)
(declare-fun fun_app$r (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$) T_dtree_sum$)
(declare-fun fun_app$s (T_N_sum_T_dtree_sum_fun$ T_N_sum$) T_dtree_sum$)
(declare-fun fun_app$t (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$) T_N_sum$)
(declare-fun fun_app$u (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun fun_app$v (T_N_sum_bool_fun$ T_N_sum$) Bool)
(declare-fun fun_app$w (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$) Dtree_N_fun$)
(declare-fun fun_app$x (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$) Dtree_dtree_fun$)
(declare-fun fun_app$y (N_N_fun_N_N_fun_fun$ N_N_fun$) N_N_fun$)
(declare-fun fun_app$z (N_N_fun_N_dtree_fun_fun$ N_N_fun$) N_dtree_fun$)
(declare-fun hsubst_c$ (Dtree$) Dtree_T_dtree_sum_set_fun$)
(declare-fun hsubst_r$ () Dtree_N_fun$)
(declare-fun map_sum$a (T_T_fun$) N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$)
(declare-fun map_sum$b (Dtree_N_fun$ Dtree_N_fun$) Dtree_dtree_sum_N_N_sum_fun$)
(declare-fun map_sum$c (Dtree_dtree_fun$ Dtree_dtree_fun$) Dtree_dtree_sum_dtree_dtree_sum_fun$)
(declare-fun map_sum$d (Dtree_dtree_fun$ N_dtree_fun$) Dtree_N_sum_dtree_dtree_sum_fun$)
(declare-fun map_sum$e (Dtree_N_fun$ N_N_fun$) Dtree_N_sum_N_N_sum_fun$)
(declare-fun map_sum$f (N_dtree_fun$ Dtree_dtree_fun$) N_dtree_sum_dtree_dtree_sum_fun$)
(declare-fun map_sum$g (N_N_fun$ Dtree_N_fun$) N_dtree_sum_N_N_sum_fun$)
(declare-fun map_sum$h (N_dtree_fun$ N_dtree_fun$) N_N_sum_dtree_dtree_sum_fun$)
(declare-fun map_sum$i (N_N_fun$ N_N_fun$) N_N_sum_N_N_sum_fun$)
(declare-fun map_sum$j (T_T_fun$) N_N_fun_T_N_sum_T_N_sum_fun_fun$)
(declare-fun map_sum$k (T_T_fun$) Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$)
(declare-fun map_sum$l (T_T_fun$ T_T_fun$) T_T_sum_T_T_sum_fun$)
(declare-fun map_sum$m (N_N_fun$ T_T_fun$) N_T_sum_N_T_sum_fun$)
(declare-fun map_sum$n (N_T_fun$ T_T_fun$) N_T_sum_T_T_sum_fun$)
(declare-fun map_sum$o (N_T_fun$ N_N_fun$) N_N_sum_T_N_sum_fun$)
(declare-fun map_sum$p (T_N_fun$ T_T_fun$) T_T_sum_N_T_sum_fun$)
(declare-fun map_sum$q (T_N_fun$ N_N_fun$) T_N_sum_N_N_sum_fun$)
(declare-fun map_sum$r (Dtree_N_fun$ T_T_fun$) Dtree_T_sum_N_T_sum_fun$)
(declare-fun case_sum$a (N_T_fun$ T_T_fun$ N_T_sum$) T$)
(declare-fun case_sum$b (T_T_fun$ N_T_fun$) T_N_sum_T_fun$)
(declare-fun case_sum$c (N_T_fun$ N_T_fun$ N_N_sum$) T$)
(declare-fun case_sum$d (N_N_fun$ T_N_fun$) N_T_sum_N_fun$)
(declare-fun case_sum$e (T_N_fun$ T_N_fun$ T_T_sum$) N$)
(declare-fun case_sum$f (N_N_fun$ N_N_fun$) N_N_sum_N_fun$)
(declare-fun case_sum$g (T_N_fun$ N_N_fun$) T_N_sum_N_fun$)
(declare-fun case_sum$h (Dtree_N_fun$ T_N_fun$ Dtree_T_sum$) N$)
(declare-fun case_sum$i (Dtree_N_fun$ N_N_fun$) Dtree_N_sum_N_fun$)
(declare-fun case_sum$j (Dtree_N_fun$ Dtree_N_fun$) Dtree_dtree_sum_N_fun$)
(declare-fun case_sum$k (N_N_fun$ Dtree_N_fun$) N_dtree_sum_N_fun$)
(declare-fun case_sum$l (T_N_fun$ Dtree_N_fun$) T_dtree_sum_N_fun$)
(declare-fun case_sum$m (Dtree_dtree_fun$ Dtree_dtree_fun$) Dtree_dtree_sum_dtree_fun$)
(declare-fun case_sum$n (Dtree_dtree_fun$ N_dtree_fun$) Dtree_N_sum_dtree_fun$)
(declare-fun case_sum$o (N_dtree_fun$ Dtree_dtree_fun$) N_dtree_sum_dtree_fun$)
(declare-fun case_sum$p (N_dtree_fun$ N_dtree_fun$) N_N_sum_dtree_fun$)
(declare-fun fun_app$aa (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$) Dtree_dtree_fun$)
(declare-fun fun_app$ab (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$) N_dtree_fun$)
(declare-fun fun_app$ac (N_set_N_set_fun$ N_set$) N_set$)
(declare-fun fun_app$ad (T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ T_dtree_sum_T_N_sum_fun$) T_dtree_sum_T_N_sum_fun$)
(declare-fun fun_app$ae (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_dtree_sum_fun$) T_dtree_sum_T_dtree_sum_fun$)
(declare-fun fun_app$af (T_N_sum_T_dtree_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ T_N_sum_T_dtree_sum_fun$) T_N_sum_T_dtree_sum_fun$)
(declare-fun fun_app$ag (T_N_sum_T_N_sum_fun_T_N_sum_T_dtree_sum_fun_fun$ T_N_sum_T_N_sum_fun$) T_N_sum_T_dtree_sum_fun$)
(declare-fun fun_app$ah (T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_N_sum_fun$) T_dtree_sum_T_dtree_sum_fun$)
(declare-fun fun_app$ai (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ T_dtree_sum_T_dtree_sum_fun$) T_dtree_sum_T_N_sum_fun$)
(declare-fun fun_app$aj (T_N_sum_T_dtree_sum_fun_T_N_sum_T_N_sum_fun_fun$ T_N_sum_T_dtree_sum_fun$) T_N_sum_T_N_sum_fun$)
(declare-fun fun_app$ak (Dtree_dtree_sum_N_N_sum_fun$ Dtree_dtree_sum$) N_N_sum$)
(declare-fun fun_app$al (Dtree_dtree_sum_dtree_dtree_sum_fun$ Dtree_dtree_sum$) Dtree_dtree_sum$)
(declare-fun fun_app$am (Dtree_N_sum_dtree_dtree_sum_fun$ Dtree_N_sum$) Dtree_dtree_sum$)
(declare-fun fun_app$an (Dtree_N_sum_N_N_sum_fun$ Dtree_N_sum$) N_N_sum$)
(declare-fun fun_app$ao (N_dtree_sum_dtree_dtree_sum_fun$ N_dtree_sum$) Dtree_dtree_sum$)
(declare-fun fun_app$ap (N_dtree_sum_N_N_sum_fun$ N_dtree_sum$) N_N_sum$)
(declare-fun fun_app$aq (N_N_sum_dtree_dtree_sum_fun$ N_N_sum$) Dtree_dtree_sum$)
(declare-fun fun_app$ar (N_N_sum_N_N_sum_fun$ N_N_sum$) N_N_sum$)
(declare-fun fun_app$as (T_N_sum_T_N_sum_fun$ T_N_sum$) T_N_sum$)
(declare-fun fun_app$at (N_N_fun_T_N_sum_T_N_sum_fun_fun$ N_N_fun$) T_N_sum_T_N_sum_fun$)
(declare-fun fun_app$au (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$) T_dtree_sum_T_N_sum_fun$)
(declare-fun fun_app$av (T_T_fun_T_T_fun_fun$ T_T_fun$) T_T_fun$)
(declare-fun fun_app$aw (T_T_sum_T_T_sum_fun$ T_T_sum$) T_T_sum$)
(declare-fun fun_app$ax (N_T_sum_N_T_sum_fun$ N_T_sum$) N_T_sum$)
(declare-fun fun_app$ay (T_T_sum_T_fun$ T_T_sum$) T$)
(declare-fun fun_app$az (N_N_fun_N_T_fun_fun$ N_N_fun$) N_T_fun$)
(declare-fun fun_app$ba (T_N_sum_T_fun$ T_N_sum$) T$)
(declare-fun fun_app$bb (T_T_fun_T_N_fun_fun$ T_T_fun$) T_N_fun$)
(declare-fun fun_app$bc (N_T_sum_N_fun$ N_T_sum$) N$)
(declare-fun fun_app$bd (T_N_sum_N_fun$ T_N_sum$) N$)
(declare-fun fun_app$be (N_N_sum_N_fun$ N_N_sum$) N$)
(declare-fun fun_app$bf (Dtree_N_sum_N_fun$ Dtree_N_sum$) N$)
(declare-fun fun_app$bg (Dtree_dtree_sum_N_fun$ Dtree_dtree_sum$) N$)
(declare-fun fun_app$bh (N_dtree_sum_N_fun$ N_dtree_sum$) N$)
(declare-fun fun_app$bi (T_dtree_sum_N_fun$ T_dtree_sum$) N$)
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$ uub$ ?v0) (inr$ ?v0)) :pattern ((fun_app$ uub$ ?v0)))) :named a0))
(assert (! (forall ((?v0 N$)) (! (= (fun_app$a uuc$ ?v0) (inr$a ?v0)) :pattern ((fun_app$a uuc$ ?v0)))) :named a1))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$b uua$ ?v0) (inl$ ?v0)) :pattern ((fun_app$b uua$ ?v0)))) :named a2))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$c uu$ ?v0) (inl$a ?v0)) :pattern ((fun_app$c uu$ ?v0)))) :named a3))
(assert (! (not (= (fun_app$d (hsubst$ tr0$) tr$) (fun_app$d (hsubst$ tr0$) tr0$))) :named a4))
(assert (! (= (fun_app$e root$ tr$) (fun_app$e root$ tr0$)) :named a5))
(assert (! (= (hsubst$ tr0$) (fun_app$f (unfold$ hsubst_r$) (hsubst_c$ tr0$))) :named a6))
(assert (! (forall ((?v0 Dtree$)) (= (fun_app$e root$ (fun_app$d (hsubst$ tr0$) ?v0)) (fun_app$e root$ ?v0))) :named a7))
(assert (! (forall ((?v0 Dtree$)) (finite$ (fun_app$g (hsubst_c$ tr0$) ?v0))) :named a8))
(assert (! (= (fun_app$h (comp$ root$) (hsubst$ tr0$)) root$) :named a9))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (fun_app$e root$ (fun_app$d (hsubst$ ?v0) ?v1)) (fun_app$e root$ ?v1))) :named a10))
(assert (! (forall ((?v0 Dtree$)) (! (= (hsubst$ ?v0) (fun_app$f (unfold$ hsubst_r$) (hsubst_c$ ?v0))) :pattern ((hsubst$ ?v0)))) :named a11))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$g (hsubst_c$ tr0$) ?v0) (ite (= (fun_app$e root$ ?v0) (fun_app$e root$ tr0$)) (cont$ tr0$) (cont$ ?v0))) :pattern ((fun_app$g (hsubst_c$ tr0$) ?v0)))) :named a12))
(assert (! (forall ((?v0 Dtree$)) (= (fun_app$h (comp$ root$) (hsubst$ ?v0)) root$)) :named a13))
(assert (! (forall ((?v0 Dtree$)) (=> (= (fun_app$e root$ ?v0) (fun_app$e root$ tr0$)) (= (cont$ (fun_app$d (hsubst$ tr0$) ?v0)) (fun_app$i (image$ (fun_app$j (map_sum$ id$) (hsubst$ tr0$))) (cont$ tr0$))))) :named a14))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (! (= (fun_app$g (hsubst_c$ ?v0) ?v1) (ite (= (fun_app$e root$ ?v1) (fun_app$e root$ ?v0)) (cont$ ?v0) (cont$ ?v1))) :pattern ((fun_app$g (hsubst_c$ ?v0) ?v1)))) :named a15))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$e hsubst_r$ ?v0) (fun_app$e root$ ?v0)) :pattern ((fun_app$e hsubst_r$ ?v0)))) :named a16))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (fun_app$e root$ ?v0) (fun_app$e root$ ?v1)) (= (cont$ (fun_app$d (hsubst$ ?v1) ?v0)) (fun_app$i (image$ (fun_app$j (map_sum$ id$) (hsubst$ ?v1))) (cont$ ?v1))))) :named a17))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (finite$ (fun_app$g (hsubst_c$ ?v0) ?v1))) :named a18))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_set_fun$) (?v1 Dtree$) (?v2 Dtree_N_fun$)) (=> (finite$ (fun_app$g ?v0 ?v1)) (= (cont$ (fun_app$d (fun_app$f (unfold$ ?v2) ?v0) ?v1)) (fun_app$i (image$ (fun_app$j (map_sum$ id$) (fun_app$f (unfold$ ?v2) ?v0))) (fun_app$g ?v0 ?v1))))) :named a19))
(assert (! (forall ((?v0 N_T_N_sum_set_fun$) (?v1 N$) (?v2 N_N_fun$)) (=> (finite$a (fun_app$k ?v0 ?v1)) (= (cont$ (fun_app$l (fun_app$m (unfold$a ?v2) ?v0) ?v1)) (image$a (fun_app$n (map_sum$a id$) (fun_app$m (unfold$a ?v2) ?v0)) (fun_app$k ?v0 ?v1))))) :named a20))
(assert (! (forall ((?v0 Dtree_N_fun$)) (= (fun_app$h (comp$ ?v0) id$a) ?v0)) :named a21))
(assert (! (= (image$b id$) id$b) :named a22))
(assert (! (= (image$c id$c) id$d) :named a23))
(assert (! (= (image$ id$e) id$f) :named a24))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_T_dtree_sum_fun$)) (=> (finite$ ?v0) (finite$ (fun_app$i (image$ ?v1) ?v0)))) :named a25))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_T_N_sum_fun$)) (=> (finite$ ?v0) (finite$a (image$d ?v1 ?v0)))) :named a26))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_T_dtree_sum_fun$)) (=> (finite$a ?v0) (finite$ (image$a ?v1 ?v0)))) :named a27))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_T_N_sum_fun$)) (=> (finite$a ?v0) (finite$a (image$e ?v1 ?v0)))) :named a28))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$o id$ ?v0) ?v0) :pattern ((fun_app$o id$ ?v0)))) :named a29))
(assert (! (forall ((?v0 N$)) (! (= (fun_app$p id$c ?v0) ?v0) :pattern ((fun_app$p id$c ?v0)))) :named a30))
(assert (! (forall ((?v0 Dtree$)) (finite$ (cont$ ?v0))) :named a31))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_T_dtree_sum_set_fun$) (?v2 Dtree$)) (= (fun_app$e root$ (fun_app$d (fun_app$f (unfold$ ?v0) ?v1) ?v2)) (fun_app$e ?v0 ?v2))) :named a32))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N_T_N_sum_set_fun$) (?v2 N$)) (= (fun_app$e root$ (fun_app$l (fun_app$m (unfold$a ?v0) ?v1) ?v2)) (fun_app$p ?v0 ?v2))) :named a33))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree$)) (! (= (fun_app$e (fun_app$h (comp$ ?v0) ?v1) ?v2) (fun_app$e ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$e (fun_app$h (comp$ ?v0) ?v1) ?v2)))) :named a34))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N$)) (! (= (fun_app$p (fun_app$q (comp$a ?v0) ?v1) ?v2) (fun_app$e ?v0 (fun_app$l ?v1 ?v2))) :pattern ((fun_app$p (fun_app$q (comp$a ?v0) ?v1) ?v2)))) :named a35))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$r ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (fun_app$i (image$ ?v1) ?v3)))) :named a36))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_N_sum_T_dtree_sum_fun$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= ?v0 (fun_app$s ?v1 ?v2)) (member$a ?v2 ?v3)) (member$ ?v0 (image$a ?v1 ?v3)))) :named a37))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_dtree_sum_T_N_sum_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$t ?v1 ?v2)) (member$ ?v2 ?v3)) (member$a ?v0 (image$d ?v1 ?v3)))) :named a38))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_T_dtree_sum_fun$)) (=> (member$ ?v0 ?v1) (member$ (fun_app$r ?v2 ?v0) (fun_app$i (image$ ?v2) ?v1)))) :named a39))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$) (?v2 T_N_sum_T_dtree_sum_fun$)) (=> (member$a ?v0 ?v1) (member$ (fun_app$s ?v2 ?v0) (image$a ?v2 ?v1)))) :named a40))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_T_N_sum_fun$)) (=> (member$ ?v0 ?v1) (member$a (fun_app$t ?v2 ?v0) (image$d ?v2 ?v1)))) :named a41))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_T_dtree_sum_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$r ?v3 ?v0))) (member$ ?v2 (fun_app$i (image$ ?v3) ?v1)))) :named a42))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$) (?v2 T_dtree_sum$) (?v3 T_N_sum_T_dtree_sum_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$s ?v3 ?v0))) (member$ ?v2 (image$a ?v3 ?v1)))) :named a43))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_set$) (?v2 T_N_sum$) (?v3 T_dtree_sum_T_N_sum_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$t ?v3 ?v0))) (member$a ?v2 (image$d ?v3 ?v1)))) :named a44))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_bool_fun$)) (=> (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 (fun_app$i (image$ ?v0) ?v1)) (fun_app$u ?v2 ?v3))) (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 ?v1) (fun_app$u ?v2 (fun_app$r ?v0 ?v3)))))) :named a45))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$) (?v1 T_N_sum_set$) (?v2 T_dtree_sum_bool_fun$)) (=> (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 (image$a ?v0 ?v1)) (fun_app$u ?v2 ?v3))) (forall ((?v3 T_N_sum$)) (=> (member$a ?v3 ?v1) (fun_app$u ?v2 (fun_app$s ?v0 ?v3)))))) :named a46))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$) (?v1 T_dtree_sum_set$) (?v2 T_N_sum_bool_fun$)) (=> (forall ((?v3 T_N_sum$)) (=> (member$a ?v3 (image$d ?v0 ?v1)) (fun_app$v ?v2 ?v3))) (forall ((?v3 T_dtree_sum$)) (=> (member$ ?v3 ?v1) (fun_app$v ?v2 (fun_app$t ?v0 ?v3)))))) :named a47))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_bool_fun$)) (=> (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 (fun_app$i (image$ ?v0) ?v1)) (fun_app$u ?v2 ?v3))) (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 ?v1) (fun_app$u ?v2 (fun_app$r ?v0 ?v3)))))) :named a48))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$) (?v1 T_N_sum_set$) (?v2 T_dtree_sum_bool_fun$)) (=> (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 (image$a ?v0 ?v1)) (fun_app$u ?v2 ?v3))) (exists ((?v3 T_N_sum$)) (and (member$a ?v3 ?v1) (fun_app$u ?v2 (fun_app$s ?v0 ?v3)))))) :named a49))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$) (?v1 T_dtree_sum_set$) (?v2 T_N_sum_bool_fun$)) (=> (exists ((?v3 T_N_sum$)) (and (member$a ?v3 (image$d ?v0 ?v1)) (fun_app$v ?v2 ?v3))) (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 ?v1) (fun_app$v ?v2 (fun_app$t ?v0 ?v3)))))) :named a50))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_T_dtree_sum_fun$) (?v3 T_dtree_sum_T_dtree_sum_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 T_dtree_sum$)) (=> (member$ ?v4 ?v1) (= (fun_app$r ?v2 ?v4) (fun_app$r ?v3 ?v4))))) (= (fun_app$i (image$ ?v2) ?v0) (fun_app$i (image$ ?v3) ?v1)))) :named a51))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set$) (?v2 T_N_sum_T_dtree_sum_fun$) (?v3 T_N_sum_T_dtree_sum_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 T_N_sum$)) (=> (member$a ?v4 ?v1) (= (fun_app$s ?v2 ?v4) (fun_app$s ?v3 ?v4))))) (= (image$a ?v2 ?v0) (image$a ?v3 ?v1)))) :named a52))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 T_dtree_sum_T_N_sum_fun$) (?v3 T_dtree_sum_T_N_sum_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 T_dtree_sum$)) (=> (member$ ?v4 ?v1) (= (fun_app$t ?v2 ?v4) (fun_app$t ?v3 ?v4))))) (= (image$d ?v2 ?v0) (image$d ?v3 ?v1)))) :named a53))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$ ?v0 (fun_app$i (image$ ?v1) ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$r ?v1 ?v3)))))) :named a54))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_N_sum_T_dtree_sum_fun$) (?v2 T_N_sum_set$)) (= (member$ ?v0 (image$a ?v1 ?v2)) (exists ((?v3 T_N_sum$)) (and (member$a ?v3 ?v2) (= ?v0 (fun_app$s ?v1 ?v3)))))) :named a55))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_dtree_sum_T_N_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$a ?v0 (image$d ?v1 ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$ ?v3 ?v2) (= ?v0 (fun_app$t ?v1 ?v3)))))) :named a56))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree$)) (=> (= (fun_app$h (comp$ ?v0) ?v1) ?v2) (= (fun_app$e ?v0 (fun_app$d ?v1 ?v3)) (fun_app$e ?v2 ?v3)))) :named a57))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N_N_fun$) (?v3 N$)) (=> (= (fun_app$q (comp$a ?v0) ?v1) ?v2) (= (fun_app$e ?v0 (fun_app$l ?v1 ?v3)) (fun_app$p ?v2 ?v3)))) :named a58))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree_dtree_fun$) (?v4 Dtree$)) (=> (= (fun_app$h (comp$ ?v0) ?v1) (fun_app$h (comp$ ?v2) ?v3)) (= (fun_app$e ?v0 (fun_app$d ?v1 ?v4)) (fun_app$e ?v2 (fun_app$d ?v3 ?v4))))) :named a59))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 N_dtree_fun$) (?v4 N$)) (=> (= (fun_app$q (comp$a ?v0) ?v1) (fun_app$q (comp$a ?v2) ?v3)) (= (fun_app$e ?v0 (fun_app$l ?v1 ?v4)) (fun_app$e ?v2 (fun_app$l ?v3 ?v4))))) :named a60))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree_dtree_fun$)) (=> (and (= (fun_app$h (comp$ ?v0) ?v1) (fun_app$h (comp$ ?v2) ?v3)) (=> (forall ((?v4 Dtree$)) (= (fun_app$e ?v0 (fun_app$d ?v1 ?v4)) (fun_app$e ?v2 (fun_app$d ?v3 ?v4)))) false)) false)) :named a61))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 N_dtree_fun$)) (=> (and (= (fun_app$q (comp$a ?v0) ?v1) (fun_app$q (comp$a ?v2) ?v3)) (=> (forall ((?v4 N$)) (= (fun_app$e ?v0 (fun_app$l ?v1 ?v4)) (fun_app$e ?v2 (fun_app$l ?v3 ?v4)))) false)) false)) :named a62))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree$)) (! (= (fun_app$e (fun_app$h (comp$ ?v0) ?v1) ?v2) (fun_app$e ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$e (fun_app$h (comp$ ?v0) ?v1) ?v2)))) :named a63))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N$)) (! (= (fun_app$p (fun_app$q (comp$a ?v0) ?v1) ?v2) (fun_app$e ?v0 (fun_app$l ?v1 ?v2))) :pattern ((fun_app$p (fun_app$q (comp$a ?v0) ?v1) ?v2)))) :named a64))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 Dtree_N_fun$)) (= (fun_app$w (comp$b (fun_app$q (comp$a ?v0) ?v1)) ?v2) (fun_app$h (comp$ ?v0) (fun_app$x (comp$c ?v1) ?v2)))) :named a65))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N_N_fun$)) (= (fun_app$y (comp$d (fun_app$q (comp$a ?v0) ?v1)) ?v2) (fun_app$q (comp$a ?v0) (fun_app$z (comp$e ?v1) ?v2)))) :named a66))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$)) (= (fun_app$h (comp$ (fun_app$w (comp$b ?v0) ?v1)) ?v2) (fun_app$w (comp$b ?v0) (fun_app$h (comp$ ?v1) ?v2)))) :named a67))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_dtree_fun$)) (= (fun_app$h (comp$ (fun_app$h (comp$ ?v0) ?v1)) ?v2) (fun_app$h (comp$ ?v0) (fun_app$aa (comp$f ?v1) ?v2)))) :named a68))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_dtree_fun$)) (= (fun_app$q (comp$a (fun_app$w (comp$b ?v0) ?v1)) ?v2) (fun_app$y (comp$d ?v0) (fun_app$q (comp$a ?v1) ?v2)))) :named a69))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 N_dtree_fun$)) (= (fun_app$q (comp$a (fun_app$h (comp$ ?v0) ?v1)) ?v2) (fun_app$q (comp$a ?v0) (fun_app$ab (comp$g ?v1) ?v2)))) :named a70))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$)) (= (fun_app$w (comp$b ?v0) (fun_app$h (comp$ ?v1) ?v2)) (fun_app$h (comp$ (fun_app$w (comp$b ?v0) ?v1)) ?v2))) :named a71))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_dtree_fun$)) (= (fun_app$y (comp$d ?v0) (fun_app$q (comp$a ?v1) ?v2)) (fun_app$q (comp$a (fun_app$w (comp$b ?v0) ?v1)) ?v2))) :named a72))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 Dtree_N_fun$)) (= (fun_app$h (comp$ ?v0) (fun_app$x (comp$c ?v1) ?v2)) (fun_app$w (comp$b (fun_app$q (comp$a ?v0) ?v1)) ?v2))) :named a73))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_dtree_fun$)) (= (fun_app$h (comp$ ?v0) (fun_app$aa (comp$f ?v1) ?v2)) (fun_app$h (comp$ (fun_app$h (comp$ ?v0) ?v1)) ?v2))) :named a74))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N_N_fun$)) (= (fun_app$q (comp$a ?v0) (fun_app$z (comp$e ?v1) ?v2)) (fun_app$y (comp$d (fun_app$q (comp$a ?v0) ?v1)) ?v2))) :named a75))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 N_dtree_fun$)) (= (fun_app$q (comp$a ?v0) (fun_app$ab (comp$g ?v1) ?v2)) (fun_app$q (comp$a (fun_app$h (comp$ ?v0) ?v1)) ?v2))) :named a76))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$o id$ ?v0) ?v0) :pattern ((fun_app$o id$ ?v0)))) :named a77))
(assert (! (forall ((?v0 N$)) (! (= (fun_app$p id$c ?v0) ?v0) :pattern ((fun_app$p id$c ?v0)))) :named a78))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_set$)) (= (image$f ?v0 (image$g ?v1 ?v2)) (image$f (fun_app$h (comp$ ?v0) ?v1) ?v2))) :named a79))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N_set$)) (= (image$f ?v0 (image$h ?v1 ?v2)) (fun_app$ac (image$c (fun_app$q (comp$a ?v0) ?v1)) ?v2))) :named a80))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$) (?v1 T_dtree_sum_T_N_sum_fun$) (?v2 T_dtree_sum_set$)) (= (image$e ?v0 (image$d ?v1 ?v2)) (image$d (fun_app$ad (comp$h ?v0) ?v1) ?v2))) :named a81))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (fun_app$i (image$ ?v0) (fun_app$i (image$ ?v1) ?v2)) (fun_app$i (image$ (fun_app$ae (comp$i ?v0) ?v1)) ?v2))) :named a82))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_N_sum_T_dtree_sum_fun$) (?v2 T_N_sum_set$)) (= (fun_app$i (image$ ?v0) (image$a ?v1 ?v2)) (image$a (fun_app$af (comp$j ?v0) ?v1) ?v2))) :named a83))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$) (?v1 T_N_sum_T_N_sum_fun$) (?v2 T_N_sum_set$)) (= (image$a ?v0 (image$e ?v1 ?v2)) (image$a (fun_app$ag (comp$k ?v0) ?v1) ?v2))) :named a84))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum_T_N_sum_fun$) (?v2 T_dtree_sum_set$)) (= (image$a ?v0 (image$d ?v1 ?v2)) (fun_app$i (image$ (fun_app$ah (comp$l ?v0) ?v1)) ?v2))) :named a85))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (image$d ?v0 (fun_app$i (image$ ?v1) ?v2)) (image$d (fun_app$ai (comp$m ?v0) ?v1) ?v2))) :named a86))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$) (?v1 T_N_sum_T_dtree_sum_fun$) (?v2 T_N_sum_set$)) (= (image$d ?v0 (image$a ?v1 ?v2)) (image$e (fun_app$aj (comp$n ?v0) ?v1) ?v2))) :named a87))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree$)) (=> (= (fun_app$h (comp$ ?v0) ?v1) (fun_app$w (comp$b id$c) ?v2)) (= (fun_app$e ?v0 (fun_app$d ?v1 ?v3)) (fun_app$e ?v2 ?v3)))) :named a88))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N_N_fun$) (?v3 N$)) (=> (= (fun_app$q (comp$a ?v0) ?v1) (fun_app$y (comp$d id$c) ?v2)) (= (fun_app$e ?v0 (fun_app$l ?v1 ?v3)) (fun_app$p ?v2 ?v3)))) :named a89))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$) (?v3 Dtree_dtree_fun$) (?v4 Dtree_dtree_sum$)) (= (fun_app$ak (map_sum$b ?v0 ?v1) (fun_app$al (map_sum$c ?v2 ?v3) ?v4)) (fun_app$ak (map_sum$b (fun_app$h (comp$ ?v0) ?v2) (fun_app$h (comp$ ?v1) ?v3)) ?v4))) :named a90))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$) (?v3 N_dtree_fun$) (?v4 Dtree_N_sum$)) (= (fun_app$ak (map_sum$b ?v0 ?v1) (fun_app$am (map_sum$d ?v2 ?v3) ?v4)) (fun_app$an (map_sum$e (fun_app$h (comp$ ?v0) ?v2) (fun_app$q (comp$a ?v1) ?v3)) ?v4))) :named a91))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_dtree_fun$) (?v3 Dtree_dtree_fun$) (?v4 N_dtree_sum$)) (= (fun_app$ak (map_sum$b ?v0 ?v1) (fun_app$ao (map_sum$f ?v2 ?v3) ?v4)) (fun_app$ap (map_sum$g (fun_app$q (comp$a ?v0) ?v2) (fun_app$h (comp$ ?v1) ?v3)) ?v4))) :named a92))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_dtree_fun$) (?v3 N_dtree_fun$) (?v4 N_N_sum$)) (= (fun_app$ak (map_sum$b ?v0 ?v1) (fun_app$aq (map_sum$h ?v2 ?v3) ?v4)) (fun_app$ar (map_sum$i (fun_app$q (comp$a ?v0) ?v2) (fun_app$q (comp$a ?v1) ?v3)) ?v4))) :named a93))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_N_fun$) (?v2 T_T_fun$) (?v3 Dtree_N_fun$) (?v4 T_dtree_sum$)) (= (fun_app$as (fun_app$at (map_sum$j ?v0) ?v1) (fun_app$t (fun_app$au (map_sum$k ?v2) ?v3) ?v4)) (fun_app$t (fun_app$au (map_sum$k (fun_app$av (comp$o ?v0) ?v2)) (fun_app$w (comp$b ?v1) ?v3)) ?v4))) :named a94))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$) (?v2 T_T_fun$) (?v3 Dtree_dtree_fun$) (?v4 T_dtree_sum$)) (= (fun_app$r (fun_app$j (map_sum$ ?v0) ?v1) (fun_app$r (fun_app$j (map_sum$ ?v2) ?v3) ?v4)) (fun_app$r (fun_app$j (map_sum$ (fun_app$av (comp$o ?v0) ?v2)) (fun_app$aa (comp$f ?v1) ?v3)) ?v4))) :named a95))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$) (?v2 T_T_fun$) (?v3 N_dtree_fun$) (?v4 T_N_sum$)) (= (fun_app$r (fun_app$j (map_sum$ ?v0) ?v1) (fun_app$s (fun_app$n (map_sum$a ?v2) ?v3) ?v4)) (fun_app$s (fun_app$n (map_sum$a (fun_app$av (comp$o ?v0) ?v2)) (fun_app$ab (comp$g ?v1) ?v3)) ?v4))) :named a96))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$) (?v2 T_T_fun$) (?v3 N_N_fun$) (?v4 T_N_sum$)) (= (fun_app$s (fun_app$n (map_sum$a ?v0) ?v1) (fun_app$as (fun_app$at (map_sum$j ?v2) ?v3) ?v4)) (fun_app$s (fun_app$n (map_sum$a (fun_app$av (comp$o ?v0) ?v2)) (fun_app$z (comp$e ?v1) ?v3)) ?v4))) :named a97))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$) (?v2 T_T_fun$) (?v3 Dtree_N_fun$) (?v4 T_dtree_sum$)) (= (fun_app$s (fun_app$n (map_sum$a ?v0) ?v1) (fun_app$t (fun_app$au (map_sum$k ?v2) ?v3) ?v4)) (fun_app$r (fun_app$j (map_sum$ (fun_app$av (comp$o ?v0) ?v2)) (fun_app$x (comp$c ?v1) ?v3)) ?v4))) :named a98))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_N_fun$) (?v2 T_T_fun$) (?v3 Dtree_dtree_fun$) (?v4 T_dtree_sum$)) (= (fun_app$t (fun_app$au (map_sum$k ?v0) ?v1) (fun_app$r (fun_app$j (map_sum$ ?v2) ?v3) ?v4)) (fun_app$t (fun_app$au (map_sum$k (fun_app$av (comp$o ?v0) ?v2)) (fun_app$h (comp$ ?v1) ?v3)) ?v4))) :named a99))
(assert (! (= (map_sum$l id$ id$) id$g) :named a100))
(assert (! (= (fun_app$at (map_sum$j id$) id$c) id$h) :named a101))
(assert (! (= (map_sum$m id$c id$) id$i) :named a102))
(assert (! (= (map_sum$i id$c id$c) id$j) :named a103))
(assert (! (= (fun_app$j (map_sum$ id$) id$a) id$e) :named a104))
(assert (! (forall ((?v0 T_T_sum$)) (= (fun_app$aw (map_sum$l id$ id$) ?v0) ?v0)) :named a105))
(assert (! (forall ((?v0 T_N_sum$)) (= (fun_app$as (fun_app$at (map_sum$j id$) id$c) ?v0) ?v0)) :named a106))
(assert (! (forall ((?v0 N_T_sum$)) (= (fun_app$ax (map_sum$m id$c id$) ?v0) ?v0)) :named a107))
(assert (! (forall ((?v0 N_N_sum$)) (= (fun_app$ar (map_sum$i id$c id$c) ?v0) ?v0)) :named a108))
(assert (! (forall ((?v0 T_dtree_sum$)) (= (fun_app$r (fun_app$j (map_sum$ id$) id$a) ?v0) ?v0)) :named a109))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (= (fun_app$e root$ ?v0) (fun_app$e root$ ?v1)) (= (cont$ ?v0) (cont$ ?v1))) (= ?v0 ?v1))) :named a110))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 N$)) (=> (finite$ ?v0) (= (cont$ (node$ ?v1 ?v0)) ?v0))) :named a111))
(assert (! (forall ((?v0 Dtree$)) (= (node$ (fun_app$e root$ ?v0) (cont$ ?v0)) ?v0)) :named a112))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$) (?v3 Dtree_dtree_fun$)) (= (comp$p (map_sum$b ?v0 ?v1) (map_sum$c ?v2 ?v3)) (map_sum$b (fun_app$h (comp$ ?v0) ?v2) (fun_app$h (comp$ ?v1) ?v3)))) :named a113))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$) (?v3 N_dtree_fun$)) (= (comp$q (map_sum$b ?v0 ?v1) (map_sum$d ?v2 ?v3)) (map_sum$e (fun_app$h (comp$ ?v0) ?v2) (fun_app$q (comp$a ?v1) ?v3)))) :named a114))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_dtree_fun$) (?v3 Dtree_dtree_fun$)) (= (comp$r (map_sum$b ?v0 ?v1) (map_sum$f ?v2 ?v3)) (map_sum$g (fun_app$q (comp$a ?v0) ?v2) (fun_app$h (comp$ ?v1) ?v3)))) :named a115))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_dtree_fun$) (?v3 N_dtree_fun$)) (= (comp$s (map_sum$b ?v0 ?v1) (map_sum$h ?v2 ?v3)) (map_sum$i (fun_app$q (comp$a ?v0) ?v2) (fun_app$q (comp$a ?v1) ?v3)))) :named a116))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_N_fun$) (?v2 T_T_fun$) (?v3 Dtree_N_fun$)) (= (fun_app$ad (comp$h (fun_app$at (map_sum$j ?v0) ?v1)) (fun_app$au (map_sum$k ?v2) ?v3)) (fun_app$au (map_sum$k (fun_app$av (comp$o ?v0) ?v2)) (fun_app$w (comp$b ?v1) ?v3)))) :named a117))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$) (?v2 T_T_fun$) (?v3 Dtree_dtree_fun$)) (= (fun_app$ae (comp$i (fun_app$j (map_sum$ ?v0) ?v1)) (fun_app$j (map_sum$ ?v2) ?v3)) (fun_app$j (map_sum$ (fun_app$av (comp$o ?v0) ?v2)) (fun_app$aa (comp$f ?v1) ?v3)))) :named a118))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$) (?v2 T_T_fun$) (?v3 N_dtree_fun$)) (= (fun_app$af (comp$j (fun_app$j (map_sum$ ?v0) ?v1)) (fun_app$n (map_sum$a ?v2) ?v3)) (fun_app$n (map_sum$a (fun_app$av (comp$o ?v0) ?v2)) (fun_app$ab (comp$g ?v1) ?v3)))) :named a119))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$) (?v2 T_T_fun$) (?v3 N_N_fun$)) (= (fun_app$ag (comp$k (fun_app$n (map_sum$a ?v0) ?v1)) (fun_app$at (map_sum$j ?v2) ?v3)) (fun_app$n (map_sum$a (fun_app$av (comp$o ?v0) ?v2)) (fun_app$z (comp$e ?v1) ?v3)))) :named a120))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$) (?v2 T_T_fun$) (?v3 Dtree_N_fun$)) (= (fun_app$ah (comp$l (fun_app$n (map_sum$a ?v0) ?v1)) (fun_app$au (map_sum$k ?v2) ?v3)) (fun_app$j (map_sum$ (fun_app$av (comp$o ?v0) ?v2)) (fun_app$x (comp$c ?v1) ?v3)))) :named a121))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_N_fun$) (?v2 T_T_fun$) (?v3 Dtree_dtree_fun$)) (= (fun_app$ai (comp$m (fun_app$au (map_sum$k ?v0) ?v1)) (fun_app$j (map_sum$ ?v2) ?v3)) (fun_app$au (map_sum$k (fun_app$av (comp$o ?v0) ?v2)) (fun_app$h (comp$ ?v1) ?v3)))) :named a122))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$) (?v3 Dtree_dtree_fun$) (?v4 Dtree_dtree_sum$)) (= (fun_app$ak (map_sum$b ?v0 ?v1) (fun_app$al (map_sum$c ?v2 ?v3) ?v4)) (fun_app$ak (map_sum$b (fun_app$h (comp$ ?v0) ?v2) (fun_app$h (comp$ ?v1) ?v3)) ?v4))) :named a123))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$) (?v3 N_dtree_fun$) (?v4 Dtree_N_sum$)) (= (fun_app$ak (map_sum$b ?v0 ?v1) (fun_app$am (map_sum$d ?v2 ?v3) ?v4)) (fun_app$an (map_sum$e (fun_app$h (comp$ ?v0) ?v2) (fun_app$q (comp$a ?v1) ?v3)) ?v4))) :named a124))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_dtree_fun$) (?v3 Dtree_dtree_fun$) (?v4 N_dtree_sum$)) (= (fun_app$ak (map_sum$b ?v0 ?v1) (fun_app$ao (map_sum$f ?v2 ?v3) ?v4)) (fun_app$ap (map_sum$g (fun_app$q (comp$a ?v0) ?v2) (fun_app$h (comp$ ?v1) ?v3)) ?v4))) :named a125))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_dtree_fun$) (?v3 N_dtree_fun$) (?v4 N_N_sum$)) (= (fun_app$ak (map_sum$b ?v0 ?v1) (fun_app$aq (map_sum$h ?v2 ?v3) ?v4)) (fun_app$ar (map_sum$i (fun_app$q (comp$a ?v0) ?v2) (fun_app$q (comp$a ?v1) ?v3)) ?v4))) :named a126))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_N_fun$) (?v2 T_T_fun$) (?v3 Dtree_N_fun$) (?v4 T_dtree_sum$)) (= (fun_app$as (fun_app$at (map_sum$j ?v0) ?v1) (fun_app$t (fun_app$au (map_sum$k ?v2) ?v3) ?v4)) (fun_app$t (fun_app$au (map_sum$k (fun_app$av (comp$o ?v0) ?v2)) (fun_app$w (comp$b ?v1) ?v3)) ?v4))) :named a127))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$) (?v2 T_T_fun$) (?v3 Dtree_dtree_fun$) (?v4 T_dtree_sum$)) (= (fun_app$r (fun_app$j (map_sum$ ?v0) ?v1) (fun_app$r (fun_app$j (map_sum$ ?v2) ?v3) ?v4)) (fun_app$r (fun_app$j (map_sum$ (fun_app$av (comp$o ?v0) ?v2)) (fun_app$aa (comp$f ?v1) ?v3)) ?v4))) :named a128))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$) (?v2 T_T_fun$) (?v3 N_dtree_fun$) (?v4 T_N_sum$)) (= (fun_app$r (fun_app$j (map_sum$ ?v0) ?v1) (fun_app$s (fun_app$n (map_sum$a ?v2) ?v3) ?v4)) (fun_app$s (fun_app$n (map_sum$a (fun_app$av (comp$o ?v0) ?v2)) (fun_app$ab (comp$g ?v1) ?v3)) ?v4))) :named a129))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$) (?v2 T_T_fun$) (?v3 N_N_fun$) (?v4 T_N_sum$)) (= (fun_app$s (fun_app$n (map_sum$a ?v0) ?v1) (fun_app$as (fun_app$at (map_sum$j ?v2) ?v3) ?v4)) (fun_app$s (fun_app$n (map_sum$a (fun_app$av (comp$o ?v0) ?v2)) (fun_app$z (comp$e ?v1) ?v3)) ?v4))) :named a130))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$) (?v2 T_T_fun$) (?v3 Dtree_N_fun$) (?v4 T_dtree_sum$)) (= (fun_app$s (fun_app$n (map_sum$a ?v0) ?v1) (fun_app$t (fun_app$au (map_sum$k ?v2) ?v3) ?v4)) (fun_app$r (fun_app$j (map_sum$ (fun_app$av (comp$o ?v0) ?v2)) (fun_app$x (comp$c ?v1) ?v3)) ?v4))) :named a131))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_N_fun$) (?v2 T_T_fun$) (?v3 Dtree_dtree_fun$) (?v4 T_dtree_sum$)) (= (fun_app$t (fun_app$au (map_sum$k ?v0) ?v1) (fun_app$r (fun_app$j (map_sum$ ?v2) ?v3) ?v4)) (fun_app$t (fun_app$au (map_sum$k (fun_app$av (comp$o ?v0) ?v2)) (fun_app$h (comp$ ?v1) ?v3)) ?v4))) :named a132))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N$)) (=> (= (fun_app$q (comp$a ?v0) ?v1) id$c) (= (fun_app$e ?v0 (fun_app$l ?v1 ?v2)) ?v2))) :named a133))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 N$) (?v3 N$)) (=> (and (finite$ ?v0) (finite$ ?v1)) (= (= (node$ ?v2 ?v0) (node$ ?v3 ?v1)) (and (= ?v2 ?v3) (= ?v0 ?v1))))) :named a134))
(assert (! (= (fun_app$q (comp$a root$) deftr$) id$c) :named a135))
(assert (! (forall ((?v0 N$)) (= (fun_app$e root$ (fun_app$l deftr$ ?v0)) ?v0)) :named a136))
(assert (! (forall ((?v0 N$) (?v1 T_dtree_sum_set$)) (= (fun_app$e root$ (node$ ?v0 ?v1)) ?v0)) :named a137))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$) (?v3 Dtree_dtree_fun$) (?v4 Dtree_N_fun$) (?v5 Dtree_N_fun$)) (=> (and (= (fun_app$x (comp$c ?v0) ?v1) (fun_app$aa (comp$f ?v2) ?v3)) (= (fun_app$h (comp$ ?v4) ?v2) ?v5)) (= (fun_app$w (comp$b (fun_app$q (comp$a ?v4) ?v0)) ?v1) (fun_app$h (comp$ ?v5) ?v3)))) :named a138))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_N_fun$) (?v2 Dtree_dtree_fun$) (?v3 N_dtree_fun$) (?v4 Dtree_N_fun$) (?v5 Dtree_N_fun$)) (=> (and (= (fun_app$z (comp$e ?v0) ?v1) (fun_app$ab (comp$g ?v2) ?v3)) (= (fun_app$h (comp$ ?v4) ?v2) ?v5)) (= (fun_app$y (comp$d (fun_app$q (comp$a ?v4) ?v0)) ?v1) (fun_app$q (comp$a ?v5) ?v3)))) :named a139))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_dtree_fun$) (?v3 Dtree_dtree_fun$) (?v4 Dtree_N_fun$) (?v5 Dtree_N_fun$)) (=> (and (= (fun_app$aa (comp$f ?v0) ?v1) (fun_app$aa (comp$f ?v2) ?v3)) (= (fun_app$h (comp$ ?v4) ?v2) ?v5)) (= (fun_app$h (comp$ (fun_app$h (comp$ ?v4) ?v0)) ?v1) (fun_app$h (comp$ ?v5) ?v3)))) :named a140))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 N_dtree_fun$) (?v2 Dtree_dtree_fun$) (?v3 N_dtree_fun$) (?v4 Dtree_N_fun$) (?v5 Dtree_N_fun$)) (=> (and (= (fun_app$ab (comp$g ?v0) ?v1) (fun_app$ab (comp$g ?v2) ?v3)) (= (fun_app$h (comp$ ?v4) ?v2) ?v5)) (= (fun_app$q (comp$a (fun_app$h (comp$ ?v4) ?v0)) ?v1) (fun_app$q (comp$a ?v5) ?v3)))) :named a141))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_dtree_fun$) (?v2 N_dtree_fun$) (?v3 Dtree_N_fun$) (?v4 Dtree_N_fun$) (?v5 N_N_fun$)) (=> (and (= (fun_app$aa (comp$f ?v0) ?v1) (fun_app$x (comp$c ?v2) ?v3)) (= (fun_app$q (comp$a ?v4) ?v2) ?v5)) (= (fun_app$h (comp$ (fun_app$h (comp$ ?v4) ?v0)) ?v1) (fun_app$w (comp$b ?v5) ?v3)))) :named a142))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 N_dtree_fun$) (?v2 N_dtree_fun$) (?v3 N_N_fun$) (?v4 Dtree_N_fun$) (?v5 N_N_fun$)) (=> (and (= (fun_app$ab (comp$g ?v0) ?v1) (fun_app$z (comp$e ?v2) ?v3)) (= (fun_app$q (comp$a ?v4) ?v2) ?v5)) (= (fun_app$q (comp$a (fun_app$h (comp$ ?v4) ?v0)) ?v1) (fun_app$y (comp$d ?v5) ?v3)))) :named a143))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree_dtree_fun$) (?v4 N_N_fun$) (?v5 Dtree_N_fun$)) (=> (and (= (fun_app$h (comp$ ?v0) ?v1) (fun_app$h (comp$ ?v2) ?v3)) (= (fun_app$w (comp$b ?v4) ?v2) ?v5)) (= (fun_app$h (comp$ (fun_app$w (comp$b ?v4) ?v0)) ?v1) (fun_app$h (comp$ ?v5) ?v3)))) :named a144))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 N_dtree_fun$) (?v4 N_N_fun$) (?v5 Dtree_N_fun$)) (=> (and (= (fun_app$q (comp$a ?v0) ?v1) (fun_app$q (comp$a ?v2) ?v3)) (= (fun_app$w (comp$b ?v4) ?v2) ?v5)) (= (fun_app$q (comp$a (fun_app$w (comp$b ?v4) ?v0)) ?v1) (fun_app$q (comp$a ?v5) ?v3)))) :named a145))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree_dtree_fun$) (?v4 Dtree_dtree_fun$) (?v5 Dtree_dtree_fun$)) (=> (and (= (fun_app$w (comp$b ?v0) ?v1) (fun_app$h (comp$ ?v2) ?v3)) (= (fun_app$aa (comp$f ?v3) ?v4) ?v5)) (= (fun_app$w (comp$b ?v0) (fun_app$h (comp$ ?v1) ?v4)) (fun_app$h (comp$ ?v2) ?v5)))) :named a146))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree_dtree_fun$) (?v4 N_dtree_fun$) (?v5 N_dtree_fun$)) (=> (and (= (fun_app$w (comp$b ?v0) ?v1) (fun_app$h (comp$ ?v2) ?v3)) (= (fun_app$ab (comp$g ?v3) ?v4) ?v5)) (= (fun_app$y (comp$d ?v0) (fun_app$q (comp$a ?v1) ?v4)) (fun_app$q (comp$a ?v2) ?v5)))) :named a147))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 N_N_fun$) (?v3 Dtree_N_fun$) (?v4 Dtree_dtree_fun$) (?v5 Dtree_N_fun$)) (=> (and (= (fun_app$h (comp$ ?v0) ?v1) (fun_app$w (comp$b ?v2) ?v3)) (= (fun_app$h (comp$ ?v3) ?v4) ?v5)) (= (fun_app$h (comp$ ?v0) (fun_app$aa (comp$f ?v1) ?v4)) (fun_app$w (comp$b ?v2) ?v5)))) :named a148))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 N_N_fun$) (?v3 Dtree_N_fun$) (?v4 N_dtree_fun$) (?v5 N_N_fun$)) (=> (and (= (fun_app$h (comp$ ?v0) ?v1) (fun_app$w (comp$b ?v2) ?v3)) (= (fun_app$q (comp$a ?v3) ?v4) ?v5)) (= (fun_app$q (comp$a ?v0) (fun_app$ab (comp$g ?v1) ?v4)) (fun_app$y (comp$d ?v2) ?v5)))) :named a149))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree_dtree_fun$) (?v4 Dtree_dtree_fun$) (?v5 Dtree_dtree_fun$)) (=> (and (= (fun_app$h (comp$ ?v0) ?v1) (fun_app$h (comp$ ?v2) ?v3)) (= (fun_app$aa (comp$f ?v3) ?v4) ?v5)) (= (fun_app$h (comp$ ?v0) (fun_app$aa (comp$f ?v1) ?v4)) (fun_app$h (comp$ ?v2) ?v5)))) :named a150))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree_dtree_fun$) (?v4 N_dtree_fun$) (?v5 N_dtree_fun$)) (=> (and (= (fun_app$h (comp$ ?v0) ?v1) (fun_app$h (comp$ ?v2) ?v3)) (= (fun_app$ab (comp$g ?v3) ?v4) ?v5)) (= (fun_app$q (comp$a ?v0) (fun_app$ab (comp$g ?v1) ?v4)) (fun_app$q (comp$a ?v2) ?v5)))) :named a151))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 N_dtree_fun$) (?v4 Dtree_N_fun$) (?v5 Dtree_dtree_fun$)) (=> (and (= (fun_app$q (comp$a ?v0) ?v1) (fun_app$q (comp$a ?v2) ?v3)) (= (fun_app$x (comp$c ?v3) ?v4) ?v5)) (= (fun_app$h (comp$ ?v0) (fun_app$x (comp$c ?v1) ?v4)) (fun_app$h (comp$ ?v2) ?v5)))) :named a152))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 N_dtree_fun$) (?v4 N_N_fun$) (?v5 N_dtree_fun$)) (=> (and (= (fun_app$q (comp$a ?v0) ?v1) (fun_app$q (comp$a ?v2) ?v3)) (= (fun_app$z (comp$e ?v3) ?v4) ?v5)) (= (fun_app$q (comp$a ?v0) (fun_app$z (comp$e ?v1) ?v4)) (fun_app$q (comp$a ?v2) ?v5)))) :named a153))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$) (?v3 Dtree_N_fun$)) (=> (= (fun_app$x (comp$c ?v0) ?v1) ?v2) (= (fun_app$w (comp$b (fun_app$q (comp$a ?v3) ?v0)) ?v1) (fun_app$h (comp$ ?v3) ?v2)))) :named a154))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_N_fun$) (?v2 N_dtree_fun$) (?v3 Dtree_N_fun$)) (=> (= (fun_app$z (comp$e ?v0) ?v1) ?v2) (= (fun_app$y (comp$d (fun_app$q (comp$a ?v3) ?v0)) ?v1) (fun_app$q (comp$a ?v3) ?v2)))) :named a155))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_dtree_fun$) (?v3 Dtree_N_fun$)) (=> (= (fun_app$aa (comp$f ?v0) ?v1) ?v2) (= (fun_app$h (comp$ (fun_app$h (comp$ ?v3) ?v0)) ?v1) (fun_app$h (comp$ ?v3) ?v2)))) :named a156))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 N_dtree_fun$) (?v2 N_dtree_fun$) (?v3 Dtree_N_fun$)) (=> (= (fun_app$ab (comp$g ?v0) ?v1) ?v2) (= (fun_app$q (comp$a (fun_app$h (comp$ ?v3) ?v0)) ?v1) (fun_app$q (comp$a ?v3) ?v2)))) :named a157))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 N_N_fun$)) (=> (= (fun_app$h (comp$ ?v0) ?v1) ?v2) (= (fun_app$h (comp$ (fun_app$w (comp$b ?v3) ?v0)) ?v1) (fun_app$w (comp$b ?v3) ?v2)))) :named a158))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N_N_fun$) (?v3 N_N_fun$)) (=> (= (fun_app$q (comp$a ?v0) ?v1) ?v2) (= (fun_app$q (comp$a (fun_app$w (comp$b ?v3) ?v0)) ?v1) (fun_app$y (comp$d ?v3) ?v2)))) :named a159))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree_dtree_fun$)) (=> (= (fun_app$w (comp$b ?v0) ?v1) ?v2) (= (fun_app$w (comp$b ?v0) (fun_app$h (comp$ ?v1) ?v3)) (fun_app$h (comp$ ?v2) ?v3)))) :named a160))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_N_fun$) (?v3 N_dtree_fun$)) (=> (= (fun_app$w (comp$b ?v0) ?v1) ?v2) (= (fun_app$y (comp$d ?v0) (fun_app$q (comp$a ?v1) ?v3)) (fun_app$q (comp$a ?v2) ?v3)))) :named a161))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree_dtree_fun$)) (=> (= (fun_app$h (comp$ ?v0) ?v1) ?v2) (= (fun_app$h (comp$ ?v0) (fun_app$aa (comp$f ?v1) ?v3)) (fun_app$h (comp$ ?v2) ?v3)))) :named a162))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 N_dtree_fun$)) (=> (= (fun_app$h (comp$ ?v0) ?v1) ?v2) (= (fun_app$q (comp$a ?v0) (fun_app$ab (comp$g ?v1) ?v3)) (fun_app$q (comp$a ?v2) ?v3)))) :named a163))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N_N_fun$) (?v3 Dtree_N_fun$)) (=> (= (fun_app$q (comp$a ?v0) ?v1) ?v2) (= (fun_app$h (comp$ ?v0) (fun_app$x (comp$c ?v1) ?v3)) (fun_app$w (comp$b ?v2) ?v3)))) :named a164))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N_N_fun$) (?v3 N_N_fun$)) (=> (= (fun_app$q (comp$a ?v0) ?v1) ?v2) (= (fun_app$q (comp$a ?v0) (fun_app$z (comp$e ?v1) ?v3)) (fun_app$y (comp$d ?v2) ?v3)))) :named a165))
(assert (! (forall ((?v0 Dtree$)) (=> (forall ((?v1 N$) (?v2 T_dtree_sum_set$)) (=> (and (finite$ ?v2) (= ?v0 (node$ ?v1 ?v2))) false)) false)) :named a166))
(assert (! (forall ((?v0 N$)) (= (cont$ (fun_app$l deftr$ ?v0)) (image$a (fun_app$n (map_sum$a id$) deftr$) (fun_app$k s$ ?v0)))) :named a167))
(assert (! (= deftr$ (fun_app$m (unfold$a id$c) s$)) :named a168))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_T_fun$) (?v2 T_T_sum$)) (= (comp$t (case_sum$ id$ ?v0) (map_sum$l ?v1 id$) ?v2) (fun_app$ay (case_sum$ (fun_app$av (comp$o ?v1) id$) ?v0) ?v2))) :named a169))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_T_fun$) (?v2 N_T_sum$)) (= (comp$u (case_sum$ id$ ?v0) (map_sum$n ?v1 id$) ?v2) (case_sum$a (fun_app$az (comp$v ?v1) id$c) ?v0 ?v2))) :named a170))
(assert (! (forall ((?v0 N_T_fun$) (?v1 T_T_fun$) (?v2 T_N_sum$)) (= (comp$w (case_sum$b id$ ?v0) (fun_app$at (map_sum$j ?v1) id$c) ?v2) (fun_app$ba (case_sum$b (fun_app$av (comp$o ?v1) id$) ?v0) ?v2))) :named a171))
(assert (! (forall ((?v0 N_T_fun$) (?v1 N_T_fun$) (?v2 N_N_sum$)) (= (comp$x (case_sum$b id$ ?v0) (map_sum$o ?v1 id$c) ?v2) (case_sum$c (fun_app$az (comp$v ?v1) id$c) ?v0 ?v2))) :named a172))
(assert (! (forall ((?v0 T_N_fun$) (?v1 T_N_fun$) (?v2 T_T_sum$)) (= (comp$y (case_sum$d id$c ?v0) (map_sum$p ?v1 id$) ?v2) (case_sum$e (fun_app$bb (comp$z ?v1) id$) ?v0 ?v2))) :named a173))
(assert (! (forall ((?v0 T_N_fun$) (?v1 N_N_fun$) (?v2 N_T_sum$)) (= (comp$aa (case_sum$d id$c ?v0) (map_sum$m ?v1 id$) ?v2) (fun_app$bc (case_sum$d (fun_app$y (comp$d ?v1) id$c) ?v0) ?v2))) :named a174))
(assert (! (forall ((?v0 N_N_fun$) (?v1 T_N_fun$) (?v2 T_N_sum$)) (= (comp$ab (case_sum$f id$c ?v0) (map_sum$q ?v1 id$c) ?v2) (fun_app$bd (case_sum$g (fun_app$bb (comp$z ?v1) id$) ?v0) ?v2))) :named a175))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N_N_fun$) (?v2 N_N_sum$)) (= (comp$ac (case_sum$f id$c ?v0) (map_sum$i ?v1 id$c) ?v2) (fun_app$be (case_sum$f (fun_app$y (comp$d ?v1) id$c) ?v0) ?v2))) :named a176))
(assert (! (forall ((?v0 T_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_T_sum$)) (= (comp$ad (case_sum$d id$c ?v0) (map_sum$r ?v1 id$) ?v2) (case_sum$h (fun_app$h (comp$ ?v1) id$a) ?v0 ?v2))) :named a177))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_N_sum$)) (= (comp$ae (case_sum$f id$c ?v0) (map_sum$e ?v1 id$c) ?v2) (fun_app$bf (case_sum$i (fun_app$h (comp$ ?v1) id$a) ?v0) ?v2))) :named a178))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$) (?v3 Dtree_dtree_fun$)) (= (comp$af (case_sum$j ?v0 ?v1) (map_sum$c ?v2 ?v3)) (case_sum$j (fun_app$h (comp$ ?v0) ?v2) (fun_app$h (comp$ ?v1) ?v3)))) :named a179))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$) (?v3 N_dtree_fun$)) (= (comp$ag (case_sum$j ?v0 ?v1) (map_sum$d ?v2 ?v3)) (case_sum$i (fun_app$h (comp$ ?v0) ?v2) (fun_app$q (comp$a ?v1) ?v3)))) :named a180))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_dtree_fun$) (?v3 Dtree_dtree_fun$)) (= (comp$ah (case_sum$j ?v0 ?v1) (map_sum$f ?v2 ?v3)) (case_sum$k (fun_app$q (comp$a ?v0) ?v2) (fun_app$h (comp$ ?v1) ?v3)))) :named a181))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_dtree_fun$) (?v3 N_dtree_fun$)) (= (comp$ai (case_sum$j ?v0 ?v1) (map_sum$h ?v2 ?v3)) (case_sum$f (fun_app$q (comp$a ?v0) ?v2) (fun_app$q (comp$a ?v1) ?v3)))) :named a182))
(assert (! (forall ((?v0 T_N_fun$) (?v1 Dtree_N_fun$) (?v2 T_T_fun$) (?v3 Dtree_dtree_fun$)) (= (comp$aj (case_sum$l ?v0 ?v1) (fun_app$j (map_sum$ ?v2) ?v3)) (case_sum$l (fun_app$bb (comp$z ?v0) ?v2) (fun_app$h (comp$ ?v1) ?v3)))) :named a183))
(assert (! (forall ((?v0 T_N_fun$) (?v1 Dtree_N_fun$) (?v2 T_T_fun$) (?v3 N_dtree_fun$)) (= (comp$ak (case_sum$l ?v0 ?v1) (fun_app$n (map_sum$a ?v2) ?v3)) (case_sum$g (fun_app$bb (comp$z ?v0) ?v2) (fun_app$q (comp$a ?v1) ?v3)))) :named a184))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree$) (?v3 Dtree_dtree_fun$) (?v4 Dtree_dtree_fun$) (?v5 Dtree_N_fun$)) (=> (= (fun_app$l ?v0 (fun_app$e ?v1 ?v2)) (fun_app$d ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$e (fun_app$w (comp$b (fun_app$q (comp$a ?v5) ?v0)) ?v1) ?v2) (fun_app$e (fun_app$h (comp$ (fun_app$h (comp$ ?v5) ?v3)) ?v4) ?v2)))) :named a185))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_N_fun$) (?v2 N$) (?v3 Dtree_dtree_fun$) (?v4 N_dtree_fun$) (?v5 Dtree_N_fun$)) (=> (= (fun_app$l ?v0 (fun_app$p ?v1 ?v2)) (fun_app$d ?v3 (fun_app$l ?v4 ?v2))) (= (fun_app$p (fun_app$y (comp$d (fun_app$q (comp$a ?v5) ?v0)) ?v1) ?v2) (fun_app$p (fun_app$q (comp$a (fun_app$h (comp$ ?v5) ?v3)) ?v4) ?v2)))) :named a186))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree$) (?v3 N_dtree_fun$) (?v4 Dtree_N_fun$) (?v5 Dtree_N_fun$)) (=> (= (fun_app$d ?v0 (fun_app$d ?v1 ?v2)) (fun_app$l ?v3 (fun_app$e ?v4 ?v2))) (= (fun_app$e (fun_app$h (comp$ (fun_app$h (comp$ ?v5) ?v0)) ?v1) ?v2) (fun_app$e (fun_app$w (comp$b (fun_app$q (comp$a ?v5) ?v3)) ?v4) ?v2)))) :named a187))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree$) (?v3 Dtree_dtree_fun$) (?v4 Dtree_dtree_fun$) (?v5 Dtree_N_fun$)) (=> (= (fun_app$d ?v0 (fun_app$d ?v1 ?v2)) (fun_app$d ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$e (fun_app$h (comp$ (fun_app$h (comp$ ?v5) ?v0)) ?v1) ?v2) (fun_app$e (fun_app$h (comp$ (fun_app$h (comp$ ?v5) ?v3)) ?v4) ?v2)))) :named a188))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 N_dtree_fun$) (?v2 N$) (?v3 N_dtree_fun$) (?v4 N_N_fun$) (?v5 Dtree_N_fun$)) (=> (= (fun_app$d ?v0 (fun_app$l ?v1 ?v2)) (fun_app$l ?v3 (fun_app$p ?v4 ?v2))) (= (fun_app$p (fun_app$q (comp$a (fun_app$h (comp$ ?v5) ?v0)) ?v1) ?v2) (fun_app$p (fun_app$y (comp$d (fun_app$q (comp$a ?v5) ?v3)) ?v4) ?v2)))) :named a189))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 N_dtree_fun$) (?v2 N$) (?v3 Dtree_dtree_fun$) (?v4 N_dtree_fun$) (?v5 Dtree_N_fun$)) (=> (= (fun_app$d ?v0 (fun_app$l ?v1 ?v2)) (fun_app$d ?v3 (fun_app$l ?v4 ?v2))) (= (fun_app$p (fun_app$q (comp$a (fun_app$h (comp$ ?v5) ?v0)) ?v1) ?v2) (fun_app$p (fun_app$q (comp$a (fun_app$h (comp$ ?v5) ?v3)) ?v4) ?v2)))) :named a190))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree$) (?v3 Dtree_N_fun$) (?v4 Dtree_dtree_fun$)) (=> (= (fun_app$e ?v0 (fun_app$d ?v1 ?v2)) (fun_app$e ?v3 (fun_app$d ?v4 ?v2))) (= (fun_app$e (fun_app$h (comp$ ?v0) ?v1) ?v2) (fun_app$e (fun_app$h (comp$ ?v3) ?v4) ?v2)))) :named a191))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N$) (?v3 Dtree_N_fun$) (?v4 N_dtree_fun$)) (=> (= (fun_app$e ?v0 (fun_app$l ?v1 ?v2)) (fun_app$e ?v3 (fun_app$l ?v4 ?v2))) (= (fun_app$p (fun_app$q (comp$a ?v0) ?v1) ?v2) (fun_app$p (fun_app$q (comp$a ?v3) ?v4) ?v2)))) :named a192))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree$) (?v3 Dtree_N_fun$) (?v4 Dtree_dtree_fun$) (?v5 Dtree$)) (=> (= (fun_app$e ?v0 (fun_app$d ?v1 ?v2)) (fun_app$e ?v3 (fun_app$d ?v4 ?v5))) (= (fun_app$e (fun_app$h (comp$ ?v0) ?v1) ?v2) (fun_app$e (fun_app$h (comp$ ?v3) ?v4) ?v5)))) :named a193))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree$) (?v3 Dtree_N_fun$) (?v4 N_dtree_fun$) (?v5 N$)) (=> (= (fun_app$e ?v0 (fun_app$d ?v1 ?v2)) (fun_app$e ?v3 (fun_app$l ?v4 ?v5))) (= (fun_app$e (fun_app$h (comp$ ?v0) ?v1) ?v2) (fun_app$p (fun_app$q (comp$a ?v3) ?v4) ?v5)))) :named a194))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N$) (?v3 Dtree_N_fun$) (?v4 Dtree_dtree_fun$) (?v5 Dtree$)) (=> (= (fun_app$e ?v0 (fun_app$l ?v1 ?v2)) (fun_app$e ?v3 (fun_app$d ?v4 ?v5))) (= (fun_app$p (fun_app$q (comp$a ?v0) ?v1) ?v2) (fun_app$e (fun_app$h (comp$ ?v3) ?v4) ?v5)))) :named a195))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N$) (?v3 Dtree_N_fun$) (?v4 N_dtree_fun$) (?v5 N$)) (=> (= (fun_app$e ?v0 (fun_app$l ?v1 ?v2)) (fun_app$e ?v3 (fun_app$l ?v4 ?v5))) (= (fun_app$p (fun_app$q (comp$a ?v0) ?v1) ?v2) (fun_app$p (fun_app$q (comp$a ?v3) ?v4) ?v5)))) :named a196))
(assert (! (forall ((?v0 N$)) (finite$a (fun_app$k s$ ?v0))) :named a197))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$) (?v3 Dtree_dtree_fun$) (?v4 Dtree_dtree_sum$)) (= (fun_app$bg (case_sum$j ?v0 ?v1) (fun_app$al (map_sum$c ?v2 ?v3) ?v4)) (fun_app$bg (case_sum$j (fun_app$h (comp$ ?v0) ?v2) (fun_app$h (comp$ ?v1) ?v3)) ?v4))) :named a198))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$) (?v3 N_dtree_fun$) (?v4 Dtree_N_sum$)) (= (fun_app$bg (case_sum$j ?v0 ?v1) (fun_app$am (map_sum$d ?v2 ?v3) ?v4)) (fun_app$bf (case_sum$i (fun_app$h (comp$ ?v0) ?v2) (fun_app$q (comp$a ?v1) ?v3)) ?v4))) :named a199))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_dtree_fun$) (?v3 Dtree_dtree_fun$) (?v4 N_dtree_sum$)) (= (fun_app$bg (case_sum$j ?v0 ?v1) (fun_app$ao (map_sum$f ?v2 ?v3) ?v4)) (fun_app$bh (case_sum$k (fun_app$q (comp$a ?v0) ?v2) (fun_app$h (comp$ ?v1) ?v3)) ?v4))) :named a200))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_dtree_fun$) (?v3 N_dtree_fun$) (?v4 N_N_sum$)) (= (fun_app$bg (case_sum$j ?v0 ?v1) (fun_app$aq (map_sum$h ?v2 ?v3) ?v4)) (fun_app$be (case_sum$f (fun_app$q (comp$a ?v0) ?v2) (fun_app$q (comp$a ?v1) ?v3)) ?v4))) :named a201))
(assert (! (forall ((?v0 T_N_fun$) (?v1 Dtree_N_fun$) (?v2 T_T_fun$) (?v3 Dtree_dtree_fun$) (?v4 T_dtree_sum$)) (= (fun_app$bi (case_sum$l ?v0 ?v1) (fun_app$r (fun_app$j (map_sum$ ?v2) ?v3) ?v4)) (fun_app$bi (case_sum$l (fun_app$bb (comp$z ?v0) ?v2) (fun_app$h (comp$ ?v1) ?v3)) ?v4))) :named a202))
(assert (! (forall ((?v0 T_N_fun$) (?v1 Dtree_N_fun$) (?v2 T_T_fun$) (?v3 N_dtree_fun$) (?v4 T_N_sum$)) (= (fun_app$bi (case_sum$l ?v0 ?v1) (fun_app$s (fun_app$n (map_sum$a ?v2) ?v3) ?v4)) (fun_app$bd (case_sum$g (fun_app$bb (comp$z ?v0) ?v2) (fun_app$q (comp$a ?v1) ?v3)) ?v4))) :named a203))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_dtree_fun$)) (= (comp$al ?v0 (case_sum$m ?v1 ?v2)) (case_sum$j (fun_app$h (comp$ ?v0) ?v1) (fun_app$h (comp$ ?v0) ?v2)))) :named a204))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 N_dtree_fun$)) (= (comp$am ?v0 (case_sum$n ?v1 ?v2)) (case_sum$i (fun_app$h (comp$ ?v0) ?v1) (fun_app$q (comp$a ?v0) ?v2)))) :named a205))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 Dtree_dtree_fun$)) (= (comp$an ?v0 (case_sum$o ?v1 ?v2)) (case_sum$k (fun_app$q (comp$a ?v0) ?v1) (fun_app$h (comp$ ?v0) ?v2)))) :named a206))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 N_dtree_fun$)) (= (comp$ao ?v0 (case_sum$p ?v1 ?v2)) (case_sum$f (fun_app$q (comp$a ?v0) ?v1) (fun_app$q (comp$a ?v0) ?v2)))) :named a207))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_N_fun$)) (= (comp$ap (fun_app$at (map_sum$j ?v0) ?v1) uu$) (comp$aq uu$ ?v0))) :named a208))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$)) (= (comp$ar (fun_app$j (map_sum$ ?v0) ?v1) uua$) (comp$as uua$ ?v0))) :named a209))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$)) (= (comp$at (fun_app$n (map_sum$a ?v0) ?v1) uu$) (comp$as uua$ ?v0))) :named a210))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_N_fun$)) (= (comp$au (fun_app$au (map_sum$k ?v0) ?v1) uua$) (comp$aq uu$ ?v0))) :named a211))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$)) (= (comp$av (fun_app$j (map_sum$ ?v0) ?v1) uub$) (comp$aw uub$ ?v1))) :named a212))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$)) (= (comp$ax (fun_app$n (map_sum$a ?v0) ?v1) uuc$) (comp$ay uub$ ?v1))) :named a213))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_N_fun$)) (= (comp$az (fun_app$au (map_sum$k ?v0) ?v1) uub$) (comp$ba uuc$ ?v1))) :named a214))
(assert (! (= (vimage$ id$c) id$d) :named a215))
(assert (! (forall ((?v0 Dtree$)) (= (vimage$a uu$ (image$d (fun_app$au (map_sum$k id$) root$) (cont$ ?v0))) (vimage$b uua$ (cont$ ?v0)))) :named a216))
(check-sat)
;(get-unsat-core)
