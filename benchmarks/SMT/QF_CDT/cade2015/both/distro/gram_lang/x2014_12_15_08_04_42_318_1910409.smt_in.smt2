; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 222
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun ns$ () N_set$)
(declare-fun sup$ (N_set$ N_set$) N_set$)
(declare-fun tr1$ () Dtree$)
(declare-fun tr2$ () Dtree$)
(declare-fun tr3$ () Dtree$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun root$ (Dtree$) N$)
(declare-fun subtr$ (N_set$ Dtree$ Dtree$) Bool)
(declare-fun member$ (N$ N_set$) Bool)
(declare-fun less_eq$ (N_set$ N_set$) Bool)
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$) Bool)
(assert (! (not (subtr$ ns$ tr1$ tr3$)) :named a0))
(assert (! (subtr$ ns$ tr2$ tr3$) :named a1))
(assert (! (member$ (root$ tr1$) ns$) :named a2))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (subtr$ ?v0 ?v1 ?v2) (subtr$ ?v0 ?v2 ?v3)) (subtr$ ?v0 ?v1 ?v3))) :named a3))
(assert (! (member$a (inr$ tr1$) (cont$ tr2$)) :named a4))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 N_set$)) (=> (and (subtr$ ?v0 ?v1 ?v2) (less_eq$ ?v0 ?v3)) (subtr$ ?v3 ?v1 ?v2))) :named a5))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (subtr$ ?v0 ?v1 ?v2) (member$ (root$ ?v2) ?v0))) :named a6))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (subtr$ ?v0 ?v1 ?v2) (member$ (root$ ?v1) ?v0))) :named a7))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$ (root$ ?v0) ?v1) (subtr$ ?v1 ?v0 ?v0))) :named a8))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 N_set$) (?v4 Dtree$)) (=> (and (subtr$ ?v0 ?v1 ?v2) (subtr$ ?v3 ?v2 ?v4)) (subtr$ (sup$ ?v0 ?v3) ?v1 ?v4))) :named a9))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (= (subtr$ ?v0 ?v1 ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (member$ (root$ ?v3) ?v4))))) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (and (= ?v0 ?v4) (and (= ?v1 ?v5) (and (= ?v2 ?v3) (and (member$ (root$ ?v3) ?v4) (and (subtr$ ?v4 ?v5 ?v6) (member$a (inr$ ?v6) (cont$ ?v3))))))))))) :named a10))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (subtr$ ?v0 ?v1 ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v3) (member$ (root$ ?v3) ?v4)))) false)) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 Dtree$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v5) (and (= ?v2 ?v3) (and (member$ (root$ ?v3) ?v4) (and (subtr$ ?v4 ?v5 ?v6) (member$a (inr$ ?v6) (cont$ ?v3))))))) false)))) false)) :named a11))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$ (root$ ?v0) ?v1) (and (subtr$ ?v1 ?v2 ?v3) (member$a (inr$ ?v3) (cont$ ?v0)))) (subtr$ ?v1 ?v2 ?v0))) :named a12))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (= (less_eq$ (sup$ ?v0 ?v1) ?v2) (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2)))) :named a13))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (= (less_eq$ (sup$ ?v0 ?v1) ?v2) (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2)))) :named a14))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_set$)) (= (less_eq$ (sup$ ?v0 ?v1) ?v2) (and (less_eq$ ?v0 ?v2) (less_eq$ ?v1 ?v2)))) :named a15))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a16))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a17))
(check-sat)
;(get-unsat-core)
