; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 119
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort N_N_fun$ 0)
(declare-sort N_T_fun$ 0)
(declare-sort T_N_fun$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort Dtree_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort Dtree_N_fun$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort N_set_N_set_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort T_set_T_set_fun$ 0)
(declare-sort N_T_dtree_sum_fun$ 0)
(declare-sort T_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_N_fun$ 0)
(declare-sort N_N_fun_N_N_fun_fun$ 0)
(declare-sort N_set_dtree_set_fun$ 0)
(declare-sort T_T_fun_T_T_fun_fun$ 0)
(declare-sort Dtree_N_bool_fun_fun$ 0)
(declare-sort Dtree_T_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort Dtree_set_dtree_set_fun$ 0)
(declare-sort N_dtree_fun_N_N_fun_fun$ 0)
(declare-sort Dtree_T_dtree_sum_set_fun$ 0)
(declare-sort T_dtree_sum_set_T_set_fun$ 0)
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0)
(declare-sort N_T_fun_N_T_dtree_sum_fun_fun$ 0)
(declare-sort T_T_fun_T_T_dtree_sum_fun_fun$ 0)
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0)
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0)
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0)
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0)
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0)
(declare-sort T_set_T_set_fun_T_set_T_set_fun_fun$ 0)
(declare-sort N_set_N_set_fun_N_set_dtree_set_fun_fun$ 0)
(declare-sort T_T_dtree_sum_fun_T_T_dtree_sum_fun_fun$ 0)
(declare-sort N_set_dtree_set_fun_N_set_dtree_set_fun_fun$ 0)
(declare-sort Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ 0)
(declare-sort Dtree_set_dtree_set_fun_dtree_set_dtree_set_fun_fun$ 0)
(declare-sort T_dtree_sum_set_T_set_fun_T_dtree_sum_set_T_set_fun_fun$ 0)
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun_T_dtree_sum_set_T_set_fun_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun tr$ () Dtree$)
(declare-fun uu$ () T_T_dtree_sum_fun$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun tr0$ () Dtree$)
(declare-fun tr1$ () Dtree$)
(declare-fun uua$ (T_set$) T_bool_fun$)
(declare-fun uub$ (N_set$) N_bool_fun$)
(declare-fun uuc$ (T_dtree_sum_set$) T_dtree_sum_bool_fun$)
(declare-fun comp$ (Dtree_N_fun$) Dtree_dtree_fun_dtree_N_fun_fun$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun inFr$ () N_set_dtree_T_bool_fun_fun_fun$)
(declare-fun node$ (N$ T_dtree_sum_set$) Dtree$)
(declare-fun root$ () Dtree_N_fun$)
(declare-fun comp$a (T_dtree_sum_set_T_set_fun$) T_dtree_sum_set_T_dtree_sum_set_fun_T_dtree_sum_set_T_set_fun_fun$)
(declare-fun comp$b (Dtree_set_dtree_set_fun$) N_set_dtree_set_fun_N_set_dtree_set_fun_fun$)
(declare-fun comp$c (T_set_T_set_fun$) T_dtree_sum_set_T_set_fun_T_dtree_sum_set_T_set_fun_fun$)
(declare-fun comp$d (T_T_dtree_sum_fun$) T_T_fun_T_T_dtree_sum_fun_fun$)
(declare-fun comp$e (N_N_fun$) Dtree_N_fun_dtree_N_fun_fun$)
(declare-fun comp$f (T_dtree_sum_T_dtree_sum_fun$) T_T_dtree_sum_fun_T_T_dtree_sum_fun_fun$)
(declare-fun comp$g (Dtree_N_fun$) N_dtree_fun_N_N_fun_fun$)
(declare-fun comp$h (Dtree_dtree_fun$) Dtree_dtree_fun_dtree_dtree_fun_fun$)
(declare-fun comp$i (N_dtree_fun$) Dtree_N_fun_dtree_dtree_fun_fun$)
(declare-fun comp$j (T_T_fun$) T_T_fun_T_T_fun_fun$)
(declare-fun comp$k (N_N_fun$) N_N_fun_N_N_fun_fun$)
(declare-fun comp$l (T_T_dtree_sum_fun$) N_T_fun_N_T_dtree_sum_fun_fun$)
(declare-fun comp$m (N_set_dtree_set_fun$) N_set_N_set_fun_N_set_dtree_set_fun_fun$)
(declare-fun comp$n (Dtree_set_dtree_set_fun$) Dtree_set_dtree_set_fun_dtree_set_dtree_set_fun_fun$)
(declare-fun comp$o (T_set_T_set_fun$) T_set_T_set_fun_T_set_T_set_fun_fun$)
(declare-fun deftr$ (N$) Dtree$)
(declare-fun inFr2$ () N_set_dtree_T_bool_fun_fun_fun$)
(declare-fun inItr$ (N_set$) Dtree_N_bool_fun_fun$)
(declare-fun subtr$ (N_set$ Dtree$ Dtree$) Bool)
(declare-fun finite$ (T_dtree_sum_set$) Bool)
(declare-fun hsubst$ (Dtree$) Dtree_dtree_fun$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun unfold$ (Dtree_N_fun$) Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$)
(declare-fun vimage$ (T_T_dtree_sum_fun$) T_dtree_sum_set_T_set_fun$)
(declare-fun collect$ (T_dtree_sum_bool_fun$) T_dtree_sum_set$)
(declare-fun fun_app$ (T_T_dtree_sum_fun$ T$) T_dtree_sum$)
(declare-fun member$a (T$ T_set$) Bool)
(declare-fun member$b (N$ N_set$) Bool)
(declare-fun member$c (Dtree$ Dtree_set$) Bool)
(declare-fun vimage$a (N_N_fun$) N_set_N_set_fun$)
(declare-fun vimage$b (N_T_dtree_sum_fun$ T_dtree_sum_set$) N_set$)
(declare-fun vimage$c (T_dtree_sum_N_fun$ N_set$) T_dtree_sum_set$)
(declare-fun vimage$d (T_dtree_sum_T_dtree_sum_fun$) T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun vimage$e (N_T_fun$ T_set$) N_set$)
(declare-fun vimage$f (T_N_fun$ N_set$) T_set$)
(declare-fun vimage$g (Dtree_dtree_fun$) Dtree_set_dtree_set_fun$)
(declare-fun vimage$h (Dtree_N_fun$) N_set_dtree_set_fun$)
(declare-fun vimage$i (T_T_fun$) T_set_T_set_fun$)
(declare-fun vimage$j (N_dtree_fun$ Dtree_set$) N_set$)
(declare-fun collect$a (N_bool_fun$) N_set$)
(declare-fun collect$b (T_bool_fun$) T_set$)
(declare-fun fun_app$a (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun fun_app$b (T_bool_fun$ T$) Bool)
(declare-fun fun_app$c (N_bool_fun$ N$) Bool)
(declare-fun fun_app$d (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$e (Dtree_N_fun$ Dtree$) N$)
(declare-fun fun_app$f (Dtree_T_dtree_sum_set_fun_dtree_dtree_fun_fun$ Dtree_T_dtree_sum_set_fun$) Dtree_dtree_fun$)
(declare-fun fun_app$g (Dtree_T_dtree_sum_set_fun$ Dtree$) T_dtree_sum_set$)
(declare-fun fun_app$h (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$) Dtree_N_fun$)
(declare-fun fun_app$i (T_dtree_sum_set_T_set_fun$ T_dtree_sum_set$) T_set$)
(declare-fun fun_app$j (N_set_N_set_fun$ N_set$) N_set$)
(declare-fun fun_app$k (N_N_fun$ N$) N$)
(declare-fun fun_app$l (N_T_dtree_sum_fun$ N$) T_dtree_sum$)
(declare-fun fun_app$m (T_dtree_sum_N_fun$ T_dtree_sum$) N$)
(declare-fun fun_app$n (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun fun_app$o (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$) T_dtree_sum$)
(declare-fun fun_app$p (N_T_fun$ N$) T$)
(declare-fun fun_app$q (T_N_fun$ T$) N$)
(declare-fun fun_app$r (Dtree_set_dtree_set_fun$ Dtree_set$) Dtree_set$)
(declare-fun fun_app$s (N_set_dtree_set_fun$ N_set$) Dtree_set$)
(declare-fun fun_app$t (T_set_T_set_fun$ T_set$) T_set$)
(declare-fun fun_app$u (T_T_fun$ T$) T$)
(declare-fun fun_app$v (T_dtree_sum_set_T_dtree_sum_set_fun_T_dtree_sum_set_T_set_fun_fun$ T_dtree_sum_set_T_dtree_sum_set_fun$) T_dtree_sum_set_T_set_fun$)
(declare-fun fun_app$w (N_set_dtree_set_fun_N_set_dtree_set_fun_fun$ N_set_dtree_set_fun$) N_set_dtree_set_fun$)
(declare-fun fun_app$x (T_dtree_sum_set_T_set_fun_T_dtree_sum_set_T_set_fun_fun$ T_dtree_sum_set_T_set_fun$) T_dtree_sum_set_T_set_fun$)
(declare-fun fun_app$y (T_T_fun_T_T_dtree_sum_fun_fun$ T_T_fun$) T_T_dtree_sum_fun$)
(declare-fun fun_app$z (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$) Dtree_N_fun$)
(declare-fun hsubst_c$ (Dtree$) Dtree_T_dtree_sum_set_fun$)
(declare-fun hsubst_r$ () Dtree_N_fun$)
(declare-fun fun_app$aa (T_T_dtree_sum_fun_T_T_dtree_sum_fun_fun$ T_T_dtree_sum_fun$) T_T_dtree_sum_fun$)
(declare-fun fun_app$ab (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$) N_N_fun$)
(declare-fun fun_app$ac (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$) Dtree_dtree_fun$)
(declare-fun fun_app$ad (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$) Dtree_dtree_fun$)
(declare-fun fun_app$ae (T_T_fun_T_T_fun_fun$ T_T_fun$) T_T_fun$)
(declare-fun fun_app$af (N_N_fun_N_N_fun_fun$ N_N_fun$) N_N_fun$)
(declare-fun fun_app$ag (N_T_fun_N_T_dtree_sum_fun_fun$ N_T_fun$) N_T_dtree_sum_fun$)
(declare-fun fun_app$ah (N_set_N_set_fun_N_set_dtree_set_fun_fun$ N_set_N_set_fun$) N_set_dtree_set_fun$)
(declare-fun fun_app$ai (Dtree_set_dtree_set_fun_dtree_set_dtree_set_fun_fun$ Dtree_set_dtree_set_fun$) Dtree_set_dtree_set_fun$)
(declare-fun fun_app$aj (T_set_T_set_fun_T_set_T_set_fun_fun$ T_set_T_set_fun$) T_set_T_set_fun$)
(declare-fun fun_app$ak (Dtree_T_bool_fun_fun$ Dtree$) T_bool_fun$)
(declare-fun fun_app$al (N_set_dtree_T_bool_fun_fun_fun$ N_set$) Dtree_T_bool_fun_fun$)
(declare-fun fun_app$am (Dtree_N_bool_fun_fun$ Dtree$) N_bool_fun$)
(assert (! (forall ((?v0 T$)) (! (= (fun_app$ uu$ ?v0) (inl$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum$)) (! (= (fun_app$a (uuc$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$a (uuc$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 T_set$) (?v1 T$)) (! (= (fun_app$b (uua$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$b (uua$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 N_set$) (?v1 N$)) (! (= (fun_app$c (uub$ ?v0) ?v1) (member$b ?v1 ?v0)) :pattern ((fun_app$c (uub$ ?v0) ?v1)))) :named a3))
(assert (! (not (wf$ tr1$)) :named a4))
(assert (! (exists ((?v0 Dtree$)) (and (wf$ ?v0) (= tr1$ (fun_app$d (hsubst$ tr0$) ?v0)))) :named a5))
(assert (! (wf$ tr$) :named a6))
(assert (! (wf$ tr0$) :named a7))
(assert (! (forall ((?v0 Dtree$)) (=> (= (fun_app$e root$ ?v0) (fun_app$e root$ tr0$)) (= (fun_app$d (hsubst$ tr0$) ?v0) (fun_app$d (hsubst$ tr0$) tr0$)))) :named a8))
(assert (! (= (hsubst$ tr0$) (fun_app$f (unfold$ hsubst_r$) (hsubst_c$ tr0$))) :named a9))
(assert (! (forall ((?v0 Dtree$)) (= (fun_app$e root$ (fun_app$d (hsubst$ tr0$) ?v0)) (fun_app$e root$ ?v0))) :named a10))
(assert (! (forall ((?v0 N$)) (wf$ (deftr$ ?v0))) :named a11))
(assert (! (forall ((?v0 Dtree$)) (finite$ (fun_app$g (hsubst_c$ tr0$) ?v0))) :named a12))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (subtr$ ?v1 ?v2 ?v0)) (wf$ ?v2))) :named a13))
(assert (! (= (fun_app$h (comp$ root$) (hsubst$ tr0$)) root$) :named a14))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (fun_app$e root$ (fun_app$d (hsubst$ ?v0) ?v1)) (fun_app$e root$ ?v1))) :named a15))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (fun_app$e root$ ?v0) (fun_app$e root$ ?v1)) (= (fun_app$d (hsubst$ ?v1) ?v0) (fun_app$d (hsubst$ ?v1) ?v1)))) :named a16))
(assert (! (forall ((?v0 Dtree$)) (! (= (hsubst$ ?v0) (fun_app$f (unfold$ hsubst_r$) (hsubst_c$ ?v0))) :pattern ((hsubst$ ?v0)))) :named a17))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$g (hsubst_c$ tr0$) ?v0) (ite (= (fun_app$e root$ ?v0) (fun_app$e root$ tr0$)) (cont$ tr0$) (cont$ ?v0))) :pattern ((fun_app$g (hsubst_c$ tr0$) ?v0)))) :named a18))
(assert (! (forall ((?v0 Dtree$)) (=> (= (fun_app$e root$ ?v0) (fun_app$e root$ tr0$)) (= (fun_app$i (vimage$ uu$) (cont$ (fun_app$d (hsubst$ tr0$) ?v0))) (fun_app$i (vimage$ uu$) (cont$ tr0$))))) :named a19))
(assert (! (forall ((?v0 N$)) (= (fun_app$e root$ (deftr$ ?v0)) ?v0)) :named a20))
(assert (! (forall ((?v0 Dtree$)) (=> (not (= (fun_app$e root$ ?v0) (fun_app$e root$ tr0$))) (= (fun_app$i (vimage$ uu$) (cont$ (fun_app$d (hsubst$ tr0$) ?v0))) (fun_app$i (vimage$ uu$) (cont$ ?v0))))) :named a21))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (! (= (fun_app$g (hsubst_c$ ?v0) ?v1) (ite (= (fun_app$e root$ ?v1) (fun_app$e root$ ?v0)) (cont$ ?v0) (cont$ ?v1))) :pattern ((fun_app$g (hsubst_c$ ?v0) ?v1)))) :named a22))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$e hsubst_r$ ?v0) (fun_app$e root$ ?v0)) :pattern ((fun_app$e hsubst_r$ ?v0)))) :named a23))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (subtr$ ?v0 ?v1 ?v2) (subtr$ ?v0 ?v2 ?v3)) (subtr$ ?v0 ?v1 ?v3))) :named a24))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (subtr$ ?v0 ?v1 ?v2) (member$b (fun_app$e root$ ?v2) ?v0))) :named a25))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (subtr$ ?v0 ?v1 ?v2) (member$b (fun_app$e root$ ?v1) ?v0))) :named a26))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (fun_app$e root$ ?v0) (fun_app$e root$ ?v1)) (= (fun_app$i (vimage$ uu$) (cont$ (fun_app$d (hsubst$ ?v1) ?v0))) (fun_app$i (vimage$ uu$) (cont$ ?v1))))) :named a27))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$b (fun_app$e root$ ?v0) ?v1) (subtr$ ?v1 ?v0 ?v0))) :named a28))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (not (= (fun_app$e root$ ?v0) (fun_app$e root$ ?v1))) (= (fun_app$i (vimage$ uu$) (cont$ (fun_app$d (hsubst$ ?v1) ?v0))) (fun_app$i (vimage$ uu$) (cont$ ?v0))))) :named a29))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (finite$ (fun_app$g (hsubst_c$ ?v0) ?v1))) :named a30))
(assert (! (forall ((?v0 Dtree$)) (= (fun_app$h (comp$ root$) (hsubst$ ?v0)) root$)) :named a31))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a32))
(assert (! (forall ((?v0 T$) (?v1 T$)) (= (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a33))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (= (member$b ?v0 (fun_app$j (vimage$a ?v1) ?v2)) (member$b (fun_app$k ?v1 ?v0) ?v2))) :named a34))
(assert (! (forall ((?v0 N$) (?v1 N_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$b ?v0 (vimage$b ?v1 ?v2)) (member$ (fun_app$l ?v1 ?v0) ?v2))) :named a35))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_N_fun$) (?v2 N_set$)) (= (member$ ?v0 (vimage$c ?v1 ?v2)) (member$b (fun_app$m ?v1 ?v0) ?v2))) :named a36))
(assert (! (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$a ?v0 (fun_app$i (vimage$ ?v1) ?v2)) (member$ (fun_app$ ?v1 ?v0) ?v2))) :named a37))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$ ?v0 (fun_app$n (vimage$d ?v1) ?v2)) (member$ (fun_app$o ?v1 ?v0) ?v2))) :named a38))
(assert (! (forall ((?v0 N$) (?v1 N_T_fun$) (?v2 T_set$)) (= (member$b ?v0 (vimage$e ?v1 ?v2)) (member$a (fun_app$p ?v1 ?v0) ?v2))) :named a39))
(assert (! (forall ((?v0 T$) (?v1 T_N_fun$) (?v2 N_set$)) (= (member$a ?v0 (vimage$f ?v1 ?v2)) (member$b (fun_app$q ?v1 ?v0) ?v2))) :named a40))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_set$)) (= (member$c ?v0 (fun_app$r (vimage$g ?v1) ?v2)) (member$c (fun_app$d ?v1 ?v0) ?v2))) :named a41))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_N_fun$) (?v2 N_set$)) (= (member$c ?v0 (fun_app$s (vimage$h ?v1) ?v2)) (member$b (fun_app$e ?v1 ?v0) ?v2))) :named a42))
(assert (! (forall ((?v0 T$) (?v1 T_T_fun$) (?v2 T_set$)) (= (member$a ?v0 (fun_app$t (vimage$i ?v1) ?v2)) (member$a (fun_app$u ?v1 ?v0) ?v2))) :named a43))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$k ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$b ?v1 (fun_app$j (vimage$a ?v0) ?v3)))) :named a44))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$) (?v1 T_dtree_sum$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$m ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$ ?v1 (vimage$c ?v0 ?v3)))) :named a45))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$) (?v1 N$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$l ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$b ?v1 (vimage$b ?v0 ?v3)))) :named a46))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$ ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$a ?v1 (fun_app$i (vimage$ ?v0) ?v3)))) :named a47))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$o ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$ ?v1 (fun_app$n (vimage$d ?v0) ?v3)))) :named a48))
(assert (! (forall ((?v0 T_N_fun$) (?v1 T$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$q ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$a ?v1 (vimage$f ?v0 ?v3)))) :named a49))
(assert (! (forall ((?v0 N_T_fun$) (?v1 N$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$p ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$b ?v1 (vimage$e ?v0 ?v3)))) :named a50))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= (fun_app$d ?v0 ?v1) ?v2) (member$c ?v2 ?v3)) (member$c ?v1 (fun_app$r (vimage$g ?v0) ?v3)))) :named a51))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$e ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$c ?v1 (fun_app$s (vimage$h ?v0) ?v3)))) :named a52))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T$) (?v2 T$) (?v3 T_set$)) (=> (and (= (fun_app$u ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$a ?v1 (fun_app$t (vimage$i ?v0) ?v3)))) :named a53))
(assert (! (forall ((?v0 Dtree$)) (finite$ (cont$ ?v0))) :named a54))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_T_dtree_sum_set_fun$) (?v2 Dtree$)) (= (fun_app$e root$ (fun_app$d (fun_app$f (unfold$ ?v0) ?v1) ?v2)) (fun_app$e ?v0 ?v2))) :named a55))
(assert (! (forall ((?v0 T_dtree_sum_set_T_set_fun$) (?v1 T_dtree_sum_set_T_dtree_sum_set_fun$) (?v2 T_dtree_sum_set$)) (! (= (fun_app$i (fun_app$v (comp$a ?v0) ?v1) ?v2) (fun_app$i ?v0 (fun_app$n ?v1 ?v2))) :pattern ((fun_app$i (fun_app$v (comp$a ?v0) ?v1) ?v2)))) :named a56))
(assert (! (forall ((?v0 Dtree_set_dtree_set_fun$) (?v1 N_set_dtree_set_fun$) (?v2 N_set$)) (! (= (fun_app$s (fun_app$w (comp$b ?v0) ?v1) ?v2) (fun_app$r ?v0 (fun_app$s ?v1 ?v2))) :pattern ((fun_app$s (fun_app$w (comp$b ?v0) ?v1) ?v2)))) :named a57))
(assert (! (forall ((?v0 T_set_T_set_fun$) (?v1 T_dtree_sum_set_T_set_fun$) (?v2 T_dtree_sum_set$)) (! (= (fun_app$i (fun_app$x (comp$c ?v0) ?v1) ?v2) (fun_app$t ?v0 (fun_app$i ?v1 ?v2))) :pattern ((fun_app$i (fun_app$x (comp$c ?v0) ?v1) ?v2)))) :named a58))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T_T_fun$) (?v2 T$)) (! (= (fun_app$ (fun_app$y (comp$d ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$u ?v1 ?v2))) :pattern ((fun_app$ (fun_app$y (comp$d ?v0) ?v1) ?v2)))) :named a59))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree$)) (! (= (fun_app$e (fun_app$z (comp$e ?v0) ?v1) ?v2) (fun_app$k ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$e (fun_app$z (comp$e ?v0) ?v1) ?v2)))) :named a60))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree$)) (! (= (fun_app$e (fun_app$h (comp$ ?v0) ?v1) ?v2) (fun_app$e ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$e (fun_app$h (comp$ ?v0) ?v1) ?v2)))) :named a61))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (= (fun_app$e root$ ?v0) (fun_app$e root$ ?v1)) (= (cont$ ?v0) (cont$ ?v1))) (= ?v0 ?v1))) :named a62))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_N_fun$) (?v2 N_set$)) (= (fun_app$r (vimage$g ?v0) (fun_app$s (vimage$h ?v1) ?v2)) (fun_app$s (vimage$h (fun_app$h (comp$ ?v1) ?v0)) ?v2))) :named a63))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (fun_app$t (vimage$i ?v0) (fun_app$i (vimage$ ?v1) ?v2)) (fun_app$i (vimage$ (fun_app$y (comp$d ?v1) ?v0)) ?v2))) :named a64))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (fun_app$i (vimage$ ?v0) (fun_app$n (vimage$d ?v1) ?v2)) (fun_app$i (vimage$ (fun_app$aa (comp$f ?v1) ?v0)) ?v2))) :named a65))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree_N_fun$) (?v2 N_set$)) (= (vimage$j ?v0 (fun_app$s (vimage$h ?v1) ?v2)) (fun_app$j (vimage$a (fun_app$ab (comp$g ?v1) ?v0)) ?v2))) :named a66))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_set$)) (= (fun_app$r (vimage$g ?v0) (fun_app$r (vimage$g ?v1) ?v2)) (fun_app$r (vimage$g (fun_app$ac (comp$h ?v1) ?v0)) ?v2))) :named a67))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 Dtree_set$)) (= (fun_app$s (vimage$h ?v0) (vimage$j ?v1 ?v2)) (fun_app$r (vimage$g (fun_app$ad (comp$i ?v1) ?v0)) ?v2))) :named a68))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_N_fun$) (?v2 N_set$)) (= (fun_app$s (vimage$h ?v0) (fun_app$j (vimage$a ?v1) ?v2)) (fun_app$s (vimage$h (fun_app$z (comp$e ?v1) ?v0)) ?v2))) :named a69))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_T_fun$) (?v2 T_set$)) (= (fun_app$t (vimage$i ?v0) (fun_app$t (vimage$i ?v1) ?v2)) (fun_app$t (vimage$i (fun_app$ae (comp$j ?v1) ?v0)) ?v2))) :named a70))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N_N_fun$) (?v2 N_set$)) (= (fun_app$j (vimage$a ?v0) (fun_app$j (vimage$a ?v1) ?v2)) (fun_app$j (vimage$a (fun_app$af (comp$k ?v1) ?v0)) ?v2))) :named a71))
(assert (! (forall ((?v0 N_T_fun$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (vimage$e ?v0 (fun_app$i (vimage$ ?v1) ?v2)) (vimage$b (fun_app$ag (comp$l ?v1) ?v0) ?v2))) :named a72))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_N_fun$) (?v2 N_set$)) (= (fun_app$r (vimage$g ?v0) (fun_app$s (vimage$h ?v1) ?v2)) (fun_app$s (vimage$h (fun_app$h (comp$ ?v1) ?v0)) ?v2))) :named a73))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (fun_app$t (vimage$i ?v0) (fun_app$i (vimage$ ?v1) ?v2)) (fun_app$i (vimage$ (fun_app$y (comp$d ?v1) ?v0)) ?v2))) :named a74))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (fun_app$i (vimage$ ?v0) (fun_app$n (vimage$d ?v1) ?v2)) (fun_app$i (vimage$ (fun_app$aa (comp$f ?v1) ?v0)) ?v2))) :named a75))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree_N_fun$) (?v2 N_set$)) (= (vimage$j ?v0 (fun_app$s (vimage$h ?v1) ?v2)) (fun_app$j (vimage$a (fun_app$ab (comp$g ?v1) ?v0)) ?v2))) :named a76))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_set$)) (= (fun_app$r (vimage$g ?v0) (fun_app$r (vimage$g ?v1) ?v2)) (fun_app$r (vimage$g (fun_app$ac (comp$h ?v1) ?v0)) ?v2))) :named a77))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 Dtree_set$)) (= (fun_app$s (vimage$h ?v0) (vimage$j ?v1 ?v2)) (fun_app$r (vimage$g (fun_app$ad (comp$i ?v1) ?v0)) ?v2))) :named a78))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_N_fun$) (?v2 N_set$)) (= (fun_app$s (vimage$h ?v0) (fun_app$j (vimage$a ?v1) ?v2)) (fun_app$s (vimage$h (fun_app$z (comp$e ?v1) ?v0)) ?v2))) :named a79))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_T_fun$) (?v2 T_set$)) (= (fun_app$t (vimage$i ?v0) (fun_app$t (vimage$i ?v1) ?v2)) (fun_app$t (vimage$i (fun_app$ae (comp$j ?v1) ?v0)) ?v2))) :named a80))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N_N_fun$) (?v2 N_set$)) (= (fun_app$j (vimage$a ?v0) (fun_app$j (vimage$a ?v1) ?v2)) (fun_app$j (vimage$a (fun_app$af (comp$k ?v1) ?v0)) ?v2))) :named a81))
(assert (! (forall ((?v0 N_T_fun$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (vimage$e ?v0 (fun_app$i (vimage$ ?v1) ?v2)) (vimage$b (fun_app$ag (comp$l ?v1) ?v0) ?v2))) :named a82))
(assert (! (forall ((?v0 T_dtree_sum_set_T_set_fun$) (?v1 T_dtree_sum_set_T_dtree_sum_set_fun$) (?v2 T_dtree_sum_set_T_set_fun$) (?v3 T_dtree_sum_set$)) (=> (= (fun_app$v (comp$a ?v0) ?v1) ?v2) (= (fun_app$i ?v0 (fun_app$n ?v1 ?v3)) (fun_app$i ?v2 ?v3)))) :named a83))
(assert (! (forall ((?v0 Dtree_set_dtree_set_fun$) (?v1 N_set_dtree_set_fun$) (?v2 N_set_dtree_set_fun$) (?v3 N_set$)) (=> (= (fun_app$w (comp$b ?v0) ?v1) ?v2) (= (fun_app$r ?v0 (fun_app$s ?v1 ?v3)) (fun_app$s ?v2 ?v3)))) :named a84))
(assert (! (forall ((?v0 T_set_T_set_fun$) (?v1 T_dtree_sum_set_T_set_fun$) (?v2 T_dtree_sum_set_T_set_fun$) (?v3 T_dtree_sum_set$)) (=> (= (fun_app$x (comp$c ?v0) ?v1) ?v2) (= (fun_app$t ?v0 (fun_app$i ?v1 ?v3)) (fun_app$i ?v2 ?v3)))) :named a85))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T_T_fun$) (?v2 T_T_dtree_sum_fun$) (?v3 T$)) (=> (= (fun_app$y (comp$d ?v0) ?v1) ?v2) (= (fun_app$ ?v0 (fun_app$u ?v1 ?v3)) (fun_app$ ?v2 ?v3)))) :named a86))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree$)) (=> (= (fun_app$z (comp$e ?v0) ?v1) ?v2) (= (fun_app$k ?v0 (fun_app$e ?v1 ?v3)) (fun_app$e ?v2 ?v3)))) :named a87))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree$)) (=> (= (fun_app$h (comp$ ?v0) ?v1) ?v2) (= (fun_app$e ?v0 (fun_app$d ?v1 ?v3)) (fun_app$e ?v2 ?v3)))) :named a88))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 N_N_fun$) (?v3 Dtree_N_fun$) (?v4 Dtree$)) (=> (= (fun_app$h (comp$ ?v0) ?v1) (fun_app$z (comp$e ?v2) ?v3)) (= (fun_app$e ?v0 (fun_app$d ?v1 ?v4)) (fun_app$k ?v2 (fun_app$e ?v3 ?v4))))) :named a89))
(assert (! (forall ((?v0 T_dtree_sum_set_T_set_fun$) (?v1 T_dtree_sum_set_T_dtree_sum_set_fun$) (?v2 T_dtree_sum_set_T_set_fun$) (?v3 T_dtree_sum_set_T_dtree_sum_set_fun$) (?v4 T_dtree_sum_set$)) (=> (= (fun_app$v (comp$a ?v0) ?v1) (fun_app$v (comp$a ?v2) ?v3)) (= (fun_app$i ?v0 (fun_app$n ?v1 ?v4)) (fun_app$i ?v2 (fun_app$n ?v3 ?v4))))) :named a90))
(assert (! (forall ((?v0 T_dtree_sum_set_T_set_fun$) (?v1 T_dtree_sum_set_T_dtree_sum_set_fun$) (?v2 T_set_T_set_fun$) (?v3 T_dtree_sum_set_T_set_fun$) (?v4 T_dtree_sum_set$)) (=> (= (fun_app$v (comp$a ?v0) ?v1) (fun_app$x (comp$c ?v2) ?v3)) (= (fun_app$i ?v0 (fun_app$n ?v1 ?v4)) (fun_app$t ?v2 (fun_app$i ?v3 ?v4))))) :named a91))
(assert (! (forall ((?v0 Dtree_set_dtree_set_fun$) (?v1 N_set_dtree_set_fun$) (?v2 Dtree_set_dtree_set_fun$) (?v3 N_set_dtree_set_fun$) (?v4 N_set$)) (=> (= (fun_app$w (comp$b ?v0) ?v1) (fun_app$w (comp$b ?v2) ?v3)) (= (fun_app$r ?v0 (fun_app$s ?v1 ?v4)) (fun_app$r ?v2 (fun_app$s ?v3 ?v4))))) :named a92))
(assert (! (forall ((?v0 T_set_T_set_fun$) (?v1 T_dtree_sum_set_T_set_fun$) (?v2 T_dtree_sum_set_T_set_fun$) (?v3 T_dtree_sum_set_T_dtree_sum_set_fun$) (?v4 T_dtree_sum_set$)) (=> (= (fun_app$x (comp$c ?v0) ?v1) (fun_app$v (comp$a ?v2) ?v3)) (= (fun_app$t ?v0 (fun_app$i ?v1 ?v4)) (fun_app$i ?v2 (fun_app$n ?v3 ?v4))))) :named a93))
(assert (! (forall ((?v0 T_set_T_set_fun$) (?v1 T_dtree_sum_set_T_set_fun$) (?v2 T_set_T_set_fun$) (?v3 T_dtree_sum_set_T_set_fun$) (?v4 T_dtree_sum_set$)) (=> (= (fun_app$x (comp$c ?v0) ?v1) (fun_app$x (comp$c ?v2) ?v3)) (= (fun_app$t ?v0 (fun_app$i ?v1 ?v4)) (fun_app$t ?v2 (fun_app$i ?v3 ?v4))))) :named a94))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T_T_fun$) (?v2 T_T_dtree_sum_fun$) (?v3 T_T_fun$) (?v4 T$)) (=> (= (fun_app$y (comp$d ?v0) ?v1) (fun_app$y (comp$d ?v2) ?v3)) (= (fun_app$ ?v0 (fun_app$u ?v1 ?v4)) (fun_app$ ?v2 (fun_app$u ?v3 ?v4))))) :named a95))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree_dtree_fun$) (?v4 Dtree$)) (=> (= (fun_app$z (comp$e ?v0) ?v1) (fun_app$h (comp$ ?v2) ?v3)) (= (fun_app$k ?v0 (fun_app$e ?v1 ?v4)) (fun_app$e ?v2 (fun_app$d ?v3 ?v4))))) :named a96))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_N_fun$) (?v3 Dtree_N_fun$) (?v4 Dtree$)) (=> (= (fun_app$z (comp$e ?v0) ?v1) (fun_app$z (comp$e ?v2) ?v3)) (= (fun_app$k ?v0 (fun_app$e ?v1 ?v4)) (fun_app$k ?v2 (fun_app$e ?v3 ?v4))))) :named a97))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree_dtree_fun$) (?v4 Dtree$)) (=> (= (fun_app$h (comp$ ?v0) ?v1) (fun_app$h (comp$ ?v2) ?v3)) (= (fun_app$e ?v0 (fun_app$d ?v1 ?v4)) (fun_app$e ?v2 (fun_app$d ?v3 ?v4))))) :named a98))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 N_N_fun$) (?v3 Dtree_N_fun$)) (=> (and (= (fun_app$h (comp$ ?v0) ?v1) (fun_app$z (comp$e ?v2) ?v3)) (=> (forall ((?v4 Dtree$)) (= (fun_app$e ?v0 (fun_app$d ?v1 ?v4)) (fun_app$k ?v2 (fun_app$e ?v3 ?v4)))) false)) false)) :named a99))
(assert (! (forall ((?v0 T_dtree_sum_set_T_set_fun$) (?v1 T_dtree_sum_set_T_dtree_sum_set_fun$) (?v2 T_dtree_sum_set_T_set_fun$) (?v3 T_dtree_sum_set_T_dtree_sum_set_fun$)) (=> (and (= (fun_app$v (comp$a ?v0) ?v1) (fun_app$v (comp$a ?v2) ?v3)) (=> (forall ((?v4 T_dtree_sum_set$)) (= (fun_app$i ?v0 (fun_app$n ?v1 ?v4)) (fun_app$i ?v2 (fun_app$n ?v3 ?v4)))) false)) false)) :named a100))
(assert (! (forall ((?v0 T_dtree_sum_set_T_set_fun$) (?v1 T_dtree_sum_set_T_dtree_sum_set_fun$) (?v2 T_set_T_set_fun$) (?v3 T_dtree_sum_set_T_set_fun$)) (=> (and (= (fun_app$v (comp$a ?v0) ?v1) (fun_app$x (comp$c ?v2) ?v3)) (=> (forall ((?v4 T_dtree_sum_set$)) (= (fun_app$i ?v0 (fun_app$n ?v1 ?v4)) (fun_app$t ?v2 (fun_app$i ?v3 ?v4)))) false)) false)) :named a101))
(assert (! (forall ((?v0 Dtree_set_dtree_set_fun$) (?v1 N_set_dtree_set_fun$) (?v2 Dtree_set_dtree_set_fun$) (?v3 N_set_dtree_set_fun$)) (=> (and (= (fun_app$w (comp$b ?v0) ?v1) (fun_app$w (comp$b ?v2) ?v3)) (=> (forall ((?v4 N_set$)) (= (fun_app$r ?v0 (fun_app$s ?v1 ?v4)) (fun_app$r ?v2 (fun_app$s ?v3 ?v4)))) false)) false)) :named a102))
(assert (! (forall ((?v0 T_set_T_set_fun$) (?v1 T_dtree_sum_set_T_set_fun$) (?v2 T_dtree_sum_set_T_set_fun$) (?v3 T_dtree_sum_set_T_dtree_sum_set_fun$)) (=> (and (= (fun_app$x (comp$c ?v0) ?v1) (fun_app$v (comp$a ?v2) ?v3)) (=> (forall ((?v4 T_dtree_sum_set$)) (= (fun_app$t ?v0 (fun_app$i ?v1 ?v4)) (fun_app$i ?v2 (fun_app$n ?v3 ?v4)))) false)) false)) :named a103))
(assert (! (forall ((?v0 T_set_T_set_fun$) (?v1 T_dtree_sum_set_T_set_fun$) (?v2 T_set_T_set_fun$) (?v3 T_dtree_sum_set_T_set_fun$)) (=> (and (= (fun_app$x (comp$c ?v0) ?v1) (fun_app$x (comp$c ?v2) ?v3)) (=> (forall ((?v4 T_dtree_sum_set$)) (= (fun_app$t ?v0 (fun_app$i ?v1 ?v4)) (fun_app$t ?v2 (fun_app$i ?v3 ?v4)))) false)) false)) :named a104))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T_T_fun$) (?v2 T_T_dtree_sum_fun$) (?v3 T_T_fun$)) (=> (and (= (fun_app$y (comp$d ?v0) ?v1) (fun_app$y (comp$d ?v2) ?v3)) (=> (forall ((?v4 T$)) (= (fun_app$ ?v0 (fun_app$u ?v1 ?v4)) (fun_app$ ?v2 (fun_app$u ?v3 ?v4)))) false)) false)) :named a105))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree_dtree_fun$)) (=> (and (= (fun_app$z (comp$e ?v0) ?v1) (fun_app$h (comp$ ?v2) ?v3)) (=> (forall ((?v4 Dtree$)) (= (fun_app$k ?v0 (fun_app$e ?v1 ?v4)) (fun_app$e ?v2 (fun_app$d ?v3 ?v4)))) false)) false)) :named a106))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 N_N_fun$) (?v3 Dtree_N_fun$)) (=> (and (= (fun_app$z (comp$e ?v0) ?v1) (fun_app$z (comp$e ?v2) ?v3)) (=> (forall ((?v4 Dtree$)) (= (fun_app$k ?v0 (fun_app$e ?v1 ?v4)) (fun_app$k ?v2 (fun_app$e ?v3 ?v4)))) false)) false)) :named a107))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree_dtree_fun$)) (=> (and (= (fun_app$h (comp$ ?v0) ?v1) (fun_app$h (comp$ ?v2) ?v3)) (=> (forall ((?v4 Dtree$)) (= (fun_app$e ?v0 (fun_app$d ?v1 ?v4)) (fun_app$e ?v2 (fun_app$d ?v3 ?v4)))) false)) false)) :named a108))
(assert (! (forall ((?v0 T_dtree_sum_set_T_set_fun$) (?v1 T_dtree_sum_set_T_dtree_sum_set_fun$) (?v2 T_dtree_sum_set$)) (! (= (fun_app$i (fun_app$v (comp$a ?v0) ?v1) ?v2) (fun_app$i ?v0 (fun_app$n ?v1 ?v2))) :pattern ((fun_app$i (fun_app$v (comp$a ?v0) ?v1) ?v2)))) :named a109))
(assert (! (forall ((?v0 Dtree_set_dtree_set_fun$) (?v1 N_set_dtree_set_fun$) (?v2 N_set$)) (! (= (fun_app$s (fun_app$w (comp$b ?v0) ?v1) ?v2) (fun_app$r ?v0 (fun_app$s ?v1 ?v2))) :pattern ((fun_app$s (fun_app$w (comp$b ?v0) ?v1) ?v2)))) :named a110))
(assert (! (forall ((?v0 T_set_T_set_fun$) (?v1 T_dtree_sum_set_T_set_fun$) (?v2 T_dtree_sum_set$)) (! (= (fun_app$i (fun_app$x (comp$c ?v0) ?v1) ?v2) (fun_app$t ?v0 (fun_app$i ?v1 ?v2))) :pattern ((fun_app$i (fun_app$x (comp$c ?v0) ?v1) ?v2)))) :named a111))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T_T_fun$) (?v2 T$)) (! (= (fun_app$ (fun_app$y (comp$d ?v0) ?v1) ?v2) (fun_app$ ?v0 (fun_app$u ?v1 ?v2))) :pattern ((fun_app$ (fun_app$y (comp$d ?v0) ?v1) ?v2)))) :named a112))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree$)) (! (= (fun_app$e (fun_app$z (comp$e ?v0) ?v1) ?v2) (fun_app$k ?v0 (fun_app$e ?v1 ?v2))) :pattern ((fun_app$e (fun_app$z (comp$e ?v0) ?v1) ?v2)))) :named a113))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree$)) (! (= (fun_app$e (fun_app$h (comp$ ?v0) ?v1) ?v2) (fun_app$e ?v0 (fun_app$d ?v1 ?v2))) :pattern ((fun_app$e (fun_app$h (comp$ ?v0) ?v1) ?v2)))) :named a114))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$)) (= (fun_app$h (comp$ (fun_app$z (comp$e ?v0) ?v1)) ?v2) (fun_app$z (comp$e ?v0) (fun_app$h (comp$ ?v1) ?v2)))) :named a115))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_dtree_fun$)) (= (fun_app$h (comp$ (fun_app$h (comp$ ?v0) ?v1)) ?v2) (fun_app$h (comp$ ?v0) (fun_app$ac (comp$h ?v1) ?v2)))) :named a116))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 N_dtree_fun$) (?v2 Dtree_N_fun$)) (= (fun_app$z (comp$e (fun_app$ab (comp$g ?v0) ?v1)) ?v2) (fun_app$h (comp$ ?v0) (fun_app$ad (comp$i ?v1) ?v2)))) :named a117))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N_N_fun$) (?v2 Dtree_N_fun$)) (= (fun_app$z (comp$e (fun_app$af (comp$k ?v0) ?v1)) ?v2) (fun_app$z (comp$e ?v0) (fun_app$z (comp$e ?v1) ?v2)))) :named a118))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T_T_fun$) (?v2 T_T_fun$)) (= (fun_app$y (comp$d (fun_app$y (comp$d ?v0) ?v1)) ?v2) (fun_app$y (comp$d ?v0) (fun_app$ae (comp$j ?v1) ?v2)))) :named a119))
(assert (! (forall ((?v0 Dtree_set_dtree_set_fun$) (?v1 N_set_dtree_set_fun$) (?v2 N_set_N_set_fun$)) (= (fun_app$ah (comp$m (fun_app$w (comp$b ?v0) ?v1)) ?v2) (fun_app$w (comp$b ?v0) (fun_app$ah (comp$m ?v1) ?v2)))) :named a120))
(assert (! (forall ((?v0 Dtree_set_dtree_set_fun$) (?v1 Dtree_set_dtree_set_fun$) (?v2 N_set_dtree_set_fun$)) (= (fun_app$w (comp$b (fun_app$ai (comp$n ?v0) ?v1)) ?v2) (fun_app$w (comp$b ?v0) (fun_app$w (comp$b ?v1) ?v2)))) :named a121))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_T_dtree_sum_fun$) (?v2 T_T_fun$)) (= (fun_app$y (comp$d (fun_app$aa (comp$f ?v0) ?v1)) ?v2) (fun_app$aa (comp$f ?v0) (fun_app$y (comp$d ?v1) ?v2)))) :named a122))
(assert (! (forall ((?v0 T_set_T_set_fun$) (?v1 T_set_T_set_fun$) (?v2 T_dtree_sum_set_T_set_fun$)) (= (fun_app$x (comp$c (fun_app$aj (comp$o ?v0) ?v1)) ?v2) (fun_app$x (comp$c ?v0) (fun_app$x (comp$c ?v1) ?v2)))) :named a123))
(assert (! (forall ((?v0 T_set_T_set_fun$) (?v1 T_dtree_sum_set_T_set_fun$) (?v2 T_dtree_sum_set_T_dtree_sum_set_fun$)) (= (fun_app$v (comp$a (fun_app$x (comp$c ?v0) ?v1)) ?v2) (fun_app$x (comp$c ?v0) (fun_app$v (comp$a ?v1) ?v2)))) :named a124))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N$) (?v2 N_set$)) (=> (member$b (fun_app$k ?v0 ?v1) ?v2) (member$b ?v1 (fun_app$j (vimage$a ?v0) ?v2)))) :named a125))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$) (?v1 T_dtree_sum$) (?v2 N_set$)) (=> (member$b (fun_app$m ?v0 ?v1) ?v2) (member$ ?v1 (vimage$c ?v0 ?v2)))) :named a126))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$) (?v1 N$) (?v2 T_dtree_sum_set$)) (=> (member$ (fun_app$l ?v0 ?v1) ?v2) (member$b ?v1 (vimage$b ?v0 ?v2)))) :named a127))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T$) (?v2 T_dtree_sum_set$)) (=> (member$ (fun_app$ ?v0 ?v1) ?v2) (member$a ?v1 (fun_app$i (vimage$ ?v0) ?v2)))) :named a128))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$) (?v1 T_dtree_sum$) (?v2 T_dtree_sum_set$)) (=> (member$ (fun_app$o ?v0 ?v1) ?v2) (member$ ?v1 (fun_app$n (vimage$d ?v0) ?v2)))) :named a129))
(assert (! (forall ((?v0 T_N_fun$) (?v1 T$) (?v2 N_set$)) (=> (member$b (fun_app$q ?v0 ?v1) ?v2) (member$a ?v1 (vimage$f ?v0 ?v2)))) :named a130))
(assert (! (forall ((?v0 N_T_fun$) (?v1 N$) (?v2 T_set$)) (=> (member$a (fun_app$p ?v0 ?v1) ?v2) (member$b ?v1 (vimage$e ?v0 ?v2)))) :named a131))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree$) (?v2 Dtree_set$)) (=> (member$c (fun_app$d ?v0 ?v1) ?v2) (member$c ?v1 (fun_app$r (vimage$g ?v0) ?v2)))) :named a132))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree$) (?v2 N_set$)) (=> (member$b (fun_app$e ?v0 ?v1) ?v2) (member$c ?v1 (fun_app$s (vimage$h ?v0) ?v2)))) :named a133))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T$) (?v2 T_set$)) (=> (member$a (fun_app$u ?v0 ?v1) ?v2) (member$a ?v1 (fun_app$t (vimage$i ?v0) ?v2)))) :named a134))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_dtree_sum_bool_fun$)) (=> (forall ((?v2 T_dtree_sum$)) (= (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2))) (= (collect$ ?v0) (collect$ ?v1)))) :named a135))
(assert (! (forall ((?v0 N_bool_fun$) (?v1 N_bool_fun$)) (=> (forall ((?v2 N$)) (= (fun_app$c ?v0 ?v2) (fun_app$c ?v1 ?v2))) (= (collect$a ?v0) (collect$a ?v1)))) :named a136))
(assert (! (forall ((?v0 T_bool_fun$) (?v1 T_bool_fun$)) (=> (forall ((?v2 T$)) (= (fun_app$b ?v0 ?v2) (fun_app$b ?v1 ?v2))) (= (collect$b ?v0) (collect$b ?v1)))) :named a137))
(assert (! (forall ((?v0 T_set$)) (= (collect$b (uua$ ?v0)) ?v0)) :named a138))
(assert (! (forall ((?v0 N_set$)) (= (collect$a (uub$ ?v0)) ?v0)) :named a139))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (= (collect$ (uuc$ ?v0)) ?v0)) :named a140))
(assert (! (forall ((?v0 T$) (?v1 T_bool_fun$)) (= (member$a ?v0 (collect$b ?v1)) (fun_app$b ?v1 ?v0))) :named a141))
(assert (! (forall ((?v0 N$) (?v1 N_bool_fun$)) (= (member$b ?v0 (collect$a ?v1)) (fun_app$c ?v1 ?v0))) :named a142))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$a ?v1 ?v0))) :named a143))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (=> (member$b ?v0 (fun_app$j (vimage$a ?v1) ?v2)) (member$b (fun_app$k ?v1 ?v0) ?v2))) :named a144))
(assert (! (forall ((?v0 N$) (?v1 N_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$b ?v0 (vimage$b ?v1 ?v2)) (member$ (fun_app$l ?v1 ?v0) ?v2))) :named a145))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_N_fun$) (?v2 N_set$)) (=> (member$ ?v0 (vimage$c ?v1 ?v2)) (member$b (fun_app$m ?v1 ?v0) ?v2))) :named a146))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$ ?v0 (fun_app$n (vimage$d ?v1) ?v2)) (member$ (fun_app$o ?v1 ?v0) ?v2))) :named a147))
(assert (! (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$a ?v0 (fun_app$i (vimage$ ?v1) ?v2)) (member$ (fun_app$ ?v1 ?v0) ?v2))) :named a148))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (=> (and (member$b ?v0 (fun_app$j (vimage$a ?v1) ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$k ?v1 ?v0) ?v3) (member$b ?v3 ?v2)) false))) false)) :named a149))
(assert (! (forall ((?v0 N$) (?v1 N_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (and (member$b ?v0 (vimage$b ?v1 ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (= (fun_app$l ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a150))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_N_fun$) (?v2 N_set$)) (=> (and (member$ ?v0 (vimage$c ?v1 ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$m ?v1 ?v0) ?v3) (member$b ?v3 ?v2)) false))) false)) :named a151))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (and (member$ ?v0 (fun_app$n (vimage$d ?v1) ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (= (fun_app$o ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a152))
(assert (! (forall ((?v0 T$) (?v1 T_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (and (member$a ?v0 (fun_app$i (vimage$ ?v1) ?v2)) (forall ((?v3 T_dtree_sum$)) (=> (and (= (fun_app$ ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a153))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_T_dtree_sum_fun$) (?v2 T_bool_fun$)) (=> (forall ((?v3 T$)) (= (fun_app$a ?v0 (fun_app$ ?v1 ?v3)) (fun_app$b ?v2 ?v3))) (= (fun_app$i (vimage$ ?v1) (collect$ ?v0)) (collect$b ?v2)))) :named a154))
(assert (! (forall ((?v0 T$) (?v1 T$)) (=> (= (inl$ ?v0) (inl$ ?v1)) (= ?v0 ?v1))) :named a155))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_N_fun$)) (= (fun_app$w (comp$b (vimage$g ?v0)) (vimage$h ?v1)) (vimage$h (fun_app$h (comp$ ?v1) ?v0)))) :named a156))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_T_dtree_sum_fun$)) (= (fun_app$x (comp$c (vimage$i ?v0)) (vimage$ ?v1)) (vimage$ (fun_app$y (comp$d ?v1) ?v0)))) :named a157))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$) (?v1 T_dtree_sum_T_dtree_sum_fun$)) (= (fun_app$v (comp$a (vimage$ ?v0)) (vimage$d ?v1)) (vimage$ (fun_app$aa (comp$f ?v1) ?v0)))) :named a158))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 N$)) (=> (finite$ ?v0) (= (cont$ (node$ ?v1 ?v0)) ?v0))) :named a159))
(assert (! (forall ((?v0 Dtree$)) (= (node$ (fun_app$e root$ ?v0) (cont$ ?v0)) ?v0)) :named a160))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (and (member$b (fun_app$e root$ ?v0) ?v1) (member$ (inl$ ?v2) (cont$ ?v0))) (fun_app$b (fun_app$ak (fun_app$al inFr2$ ?v1) ?v0) ?v2))) :named a161))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum_set$) (?v2 N$) (?v3 N$)) (=> (and (finite$ ?v0) (finite$ ?v1)) (= (= (node$ ?v2 ?v0) (node$ ?v3 ?v1)) (and (= ?v2 ?v3) (= ?v0 ?v1))))) :named a162))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$b (fun_app$ak (fun_app$al inFr$ ?v0) ?v1) ?v2) (exists ((?v3 Dtree$)) (and (subtr$ ?v0 ?v3 ?v1) (member$ (inl$ ?v2) (cont$ ?v3)))))) :named a163))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (and (member$b (fun_app$e root$ ?v0) ?v1) (member$ (inl$ ?v2) (cont$ ?v0))) (fun_app$b (fun_app$ak (fun_app$al inFr$ ?v1) ?v0) ?v2))) :named a164))
(assert (! (forall ((?v0 N$) (?v1 T_dtree_sum_set$)) (= (fun_app$e root$ (node$ ?v0 ?v1)) ?v0)) :named a165))
(assert (! (= inFr$ inFr2$) :named a166))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$b (fun_app$ak (fun_app$al inFr$ ?v0) ?v1) ?v2) (member$b (fun_app$e root$ ?v1) ?v0))) :named a167))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (not (member$b (fun_app$e root$ ?v0) ?v1)) (not (fun_app$b (fun_app$ak (fun_app$al inFr$ ?v1) ?v0) ?v2)))) :named a168))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (fun_app$b (fun_app$ak (fun_app$al inFr$ ?v0) ?v1) ?v2) (subtr$ ?v0 ?v1 ?v3)) (fun_app$b (fun_app$ak (fun_app$al inFr$ ?v0) ?v3) ?v2))) :named a169))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$b (fun_app$ak (fun_app$al inFr2$ ?v0) ?v1) ?v2) (member$b (fun_app$e root$ ?v1) ?v0))) :named a170))
(assert (! (forall ((?v0 Dtree$)) (=> (forall ((?v1 N$) (?v2 T_dtree_sum_set$)) (=> (and (finite$ ?v2) (= ?v0 (node$ ?v1 ?v2))) false)) false)) :named a171))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (= (fun_app$b (fun_app$ak (fun_app$al inFr$ ?v0) ?v1) ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 T$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (member$b (fun_app$e root$ ?v3) ?v4) (member$ (inl$ ?v5) (cont$ ?v3))))))) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 T$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$b (fun_app$e root$ ?v3) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (fun_app$b (fun_app$ak (fun_app$al inFr$ ?v4) ?v5) ?v6)))))))))) :named a172))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (and (fun_app$b (fun_app$ak (fun_app$al inFr$ ?v0) ?v1) ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 T$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v5) (and (member$b (fun_app$e root$ ?v3) ?v4) (member$ (inl$ ?v5) (cont$ ?v3)))))) false)) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 T$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$b (fun_app$e root$ ?v3) ?v4) (and (member$ (inr$ ?v5) (cont$ ?v3)) (fun_app$b (fun_app$ak (fun_app$al inFr$ ?v4) ?v5) ?v6)))))) false)))) false)) :named a173))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (and (member$ (inr$ ?v1) (cont$ ?v0)) (member$ (inr$ ?v2) (cont$ ?v0)))) (= (= (fun_app$e root$ ?v1) (fun_app$e root$ ?v2)) (= ?v1 ?v2)))) :named a174))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (fun_app$c (fun_app$am (inItr$ ?v0) ?v1) ?v2) (exists ((?v3 Dtree$)) (and (subtr$ ?v0 ?v3 ?v1) (= (fun_app$e root$ ?v3) ?v2))))) :named a175))
(assert (! (forall ((?v0 N_N_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$)) (= (fun_app$z (comp$e ?v0) (fun_app$h (comp$ ?v1) ?v2)) (fun_app$h (comp$ (fun_app$z (comp$e ?v0) ?v1)) ?v2))) :named a176))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_dtree_fun$)) (= (fun_app$h (comp$ ?v0) (fun_app$ac (comp$h ?v1) ?v2)) (fun_app$h (comp$ (fun_app$h (comp$ ?v0) ?v1)) ?v2))) :named a177))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_dtree_fun$) (?v3 Dtree_dtree_fun$) (?v4 Dtree_N_fun$) (?v5 Dtree_N_fun$)) (=> (and (= (fun_app$ac (comp$h ?v0) ?v1) (fun_app$ac (comp$h ?v2) ?v3)) (= (fun_app$h (comp$ ?v4) ?v2) ?v5)) (= (fun_app$h (comp$ (fun_app$h (comp$ ?v4) ?v0)) ?v1) (fun_app$h (comp$ ?v5) ?v3)))) :named a178))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_N_fun$) (?v3 Dtree_dtree_fun$) (?v4 N_N_fun$) (?v5 Dtree_N_fun$)) (=> (and (= (fun_app$h (comp$ ?v0) ?v1) (fun_app$h (comp$ ?v2) ?v3)) (= (fun_app$z (comp$e ?v4) ?v2) ?v5)) (= (fun_app$h (comp$ (fun_app$z (comp$e ?v4) ?v0)) ?v1) (fun_app$h (comp$ ?v5) ?v3)))) :named a179))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a180))
(check-sat)
;(get-unsat-core)
