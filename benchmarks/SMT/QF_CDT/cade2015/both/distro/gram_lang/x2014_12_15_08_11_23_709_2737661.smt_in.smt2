; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 31
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort A_set$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort Dtree_N_fun$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort Dtree_bool_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort Dtree_T_bool_fun_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))
  (T_N_sum$ (inl$a (projl$a T$)) (inr$a (projr$a N$)))))
(declare-fun k$ (Dtree$) A_set$)
(declare-fun n$ () N$)
(declare-fun x$ () A$)
(declare-fun id$ () T_T_fun$)
(declare-fun tr$ () Dtree$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun reg$ (N_dtree_fun$) Dtree_bool_fun$)
(declare-fun ttr$ () T_dtree_sum$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun inFr$ (N_set$) Dtree_T_bool_fun_fun$)
(declare-fun root$ () Dtree_N_fun$)
(declare-fun inFrr$ (N_set$) Dtree_T_bool_fun_fun$)
(declare-fun setrp$ (T_dtree_sum$) Dtree_bool_fun$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun setrp$a (T_N_sum$) N_bool_fun$)
(declare-fun fun_app$ (N_dtree_fun$ N$) Dtree$)
(declare-fun map_sum$ (T_T_fun$ Dtree_N_fun$ T_dtree_sum$) T_N_sum$)
(declare-fun member$a (A$ A_set$) Bool)
(declare-fun member$b (N$ N_set$) Bool)
(declare-fun subtrOf$ (Dtree$) N_dtree_fun$)
(declare-fun fun_app$a (Dtree_bool_fun$ Dtree$) Bool)
(declare-fun fun_app$b (Dtree_N_fun$ Dtree$) N$)
(declare-fun fun_app$c (T_bool_fun$ T$) Bool)
(declare-fun fun_app$d (Dtree_T_bool_fun_fun$ Dtree$) T_bool_fun$)
(declare-fun fun_app$e (N_bool_fun$ N$) Bool)
(declare-fun pred_sum$ (T_bool_fun$ Dtree_bool_fun$ T_dtree_sum$) Bool)
(declare-fun pred_sum$a (T_bool_fun$ N_bool_fun$ T_N_sum$) Bool)
(assert (! (not (exists ((?v0 Dtree$)) (and (= (k$ (fun_app$ (subtrOf$ tr$) n$)) (k$ ?v0)) (member$ (inr$ ?v0) (cont$ tr$))))) :named a0))
(assert (! (member$ ttr$ (cont$ tr$)) :named a1))
(assert (! (wf$ tr$) :named a2))
(assert (! (member$a x$ (k$ (fun_app$ (subtrOf$ tr$) n$))) :named a3))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a4))
(assert (! (forall ((?v0 N$) (?v1 N$)) (= (= (inr$a ?v0) (inr$a ?v1)) (= ?v0 ?v1))) :named a5))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a6))
(assert (! (forall ((?v0 N$) (?v1 N$)) (= (= (inr$a ?v0) (inr$a ?v1)) (= ?v0 ?v1))) :named a7))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (fun_app$a (reg$ ?v0) ?v1) (member$ (inr$ ?v2) (cont$ ?v1))) (fun_app$a (reg$ ?v0) ?v2))) :named a8))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a9))
(assert (! (forall ((?v0 N$) (?v1 N$)) (=> (= (inr$a ?v0) (inr$a ?v1)) (= ?v0 ?v1))) :named a10))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (not (= ?v0 ?v1)) (not (= (inr$ ?v0) (inr$ ?v1))))) :named a11))
(assert (! (forall ((?v0 N$) (?v1 N$)) (=> (not (= ?v0 ?v1)) (not (= (inr$a ?v0) (inr$a ?v1))))) :named a12))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (member$ (inr$ ?v1) (cont$ ?v0))) (wf$ ?v1))) :named a13))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (member$ (inr$ ?v1) (cont$ ?v0))) (= (fun_app$ (subtrOf$ ?v0) (fun_app$b root$ ?v1)) ?v1))) :named a14))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (= (fun_app$c (fun_app$d (inFrr$ ?v0) ?v1) ?v2) (exists ((?v3 Dtree$)) (and (member$ (inr$ ?v3) (cont$ ?v1)) (fun_app$c (fun_app$d (inFr$ ?v0) ?v3) ?v2))))) :named a15))
(assert (! (forall ((?v0 T_bool_fun$) (?v1 Dtree_bool_fun$) (?v2 Dtree$)) (! (= (pred_sum$ ?v0 ?v1 (inr$ ?v2)) (fun_app$a ?v1 ?v2)) :pattern ((pred_sum$ ?v0 ?v1 (inr$ ?v2))))) :named a16))
(assert (! (forall ((?v0 T_bool_fun$) (?v1 N_bool_fun$) (?v2 N$)) (! (= (pred_sum$a ?v0 ?v1 (inr$a ?v2)) (fun_app$e ?v1 ?v2)) :pattern ((pred_sum$a ?v0 ?v1 (inr$a ?v2))))) :named a17))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 Dtree$)) (= (fun_app$a (setrp$ ?v0) ?v1) (exists ((?v2 Dtree$)) (and (= ?v1 ?v2) (= ?v0 (inr$ ?v2)))))) :named a18))
(assert (! (forall ((?v0 T_N_sum$) (?v1 N$)) (= (fun_app$e (setrp$a ?v0) ?v1) (exists ((?v2 N$)) (and (= ?v1 ?v2) (= ?v0 (inr$a ?v2)))))) :named a19))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (and (member$ (inr$ ?v1) (cont$ ?v0)) (member$ (inr$ ?v2) (cont$ ?v0)))) (= (= (fun_app$b root$ ?v1) (fun_app$b root$ ?v2)) (= ?v1 ?v2)))) :named a20))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$c (fun_app$d (inFr$ ?v0) ?v1) ?v2) (member$b (fun_app$b root$ ?v1) ?v0))) :named a21))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree$)) (=> (fun_app$a (reg$ ?v0) ?v1) (= (fun_app$ ?v0 (fun_app$b root$ ?v1)) ?v1))) :named a22))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 T$)) (=> (not (member$b (fun_app$b root$ ?v0) ?v1)) (not (fun_app$c (fun_app$d (inFr$ ?v1) ?v0) ?v2)))) :named a23))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 T$)) (=> (and (member$b (fun_app$b root$ ?v0) ?v1) (and (member$ (inr$ ?v2) (cont$ ?v0)) (fun_app$c (fun_app$d (inFr$ ?v1) ?v2) ?v3))) (fun_app$c (fun_app$d (inFr$ ?v1) ?v0) ?v3))) :named a24))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 Dtree$)) (=> (and (fun_app$a (setrp$ ?v0) ?v1) (forall ((?v2 Dtree$)) (=> (and (= ?v1 ?v2) (= ?v0 (inr$ ?v2))) false))) false)) :named a25))
(assert (! (forall ((?v0 T_N_sum$) (?v1 N$)) (=> (and (fun_app$e (setrp$a ?v0) ?v1) (forall ((?v2 N$)) (=> (and (= ?v1 ?v2) (= ?v0 (inr$a ?v2))) false))) false)) :named a26))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 Dtree$)) (=> (= ?v0 (inr$ ?v1)) (fun_app$a (setrp$ ?v0) ?v1))) :named a27))
(assert (! (forall ((?v0 T_N_sum$) (?v1 N$)) (=> (= ?v0 (inr$a ?v1)) (fun_app$e (setrp$a ?v0) ?v1))) :named a28))
(assert (! (= (inr$a n$) (map_sum$ id$ root$ ttr$)) :named a29))
(check-sat)
;(get-unsat-core)
