; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 57
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort N_N_fun$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort Dtree_set$ 0)
(declare-sort Dtree_N_fun$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort T_N_sum_set$ 0)
(declare-sort T_T_sum_set$ 0)
(declare-sort N_T_N_sum_fun$ 0)
(declare-sort T_N_sum_N_fun$ 0)
(declare-sort T_T_T_sum_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort N_set_N_set_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort T_set_N_sum_set$ 0)
(declare-sort T_set_T_set_fun$ 0)
(declare-sort T_set_T_sum_set$ 0)
(declare-sort Dtree_T_N_sum_fun$ 0)
(declare-sort N_T_dtree_sum_fun$ 0)
(declare-sort N_T_set_N_sum_fun$ 0)
(declare-sort T_N_sum_dtree_fun$ 0)
(declare-sort T_T_N_sum_sum_set$ 0)
(declare-sort T_T_set_T_sum_fun$ 0)
(declare-sort T_dtree_sum_N_fun$ 0)
(declare-sort T_N_sum_T_N_sum_fun$ 0)
(declare-sort T_T_sum_T_T_sum_fun$ 0)
(declare-sort T_set_dtree_sum_set$ 0)
(declare-sort Dtree_T_dtree_sum_fun$ 0)
(declare-sort T_T_dtree_sum_sum_set$ 0)
(declare-sort T_dtree_sum_dtree_fun$ 0)
(declare-sort N_T_N_sum_set_prod_set$ 0)
(declare-sort Dtree_set_dtree_set_fun$ 0)
(declare-sort N_set_set_N_set_set_fun$ 0)
(declare-sort T_N_sum_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_T_N_sum_fun$ 0)
(declare-sort T_set_set_T_set_set_fun$ 0)
(declare-sort Dtree_T_set_dtree_sum_fun$ 0)
(declare-sort T_N_sum_T_T_N_sum_sum_fun$ 0)
(declare-sort T_T_N_sum_sum_T_N_sum_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0)
(declare-sort T_set_T_sum_T_set_T_sum_fun$ 0)
(declare-sort T_T_N_sum_sum_T_dtree_sum_fun$ 0)
(declare-sort T_T_dtree_sum_sum_T_N_sum_fun$ 0)
(declare-sort T_dtree_sum_T_T_N_sum_sum_fun$ 0)
(declare-sort Dtree_set_set_dtree_set_set_fun$ 0)
(declare-sort T_set_dtree_sum_T_set_N_sum_fun$ 0)
(declare-sort T_set_set_set_T_set_set_set_fun$ 0)
(declare-sort T_T_dtree_sum_sum_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_T_T_dtree_sum_sum_fun$ 0)
(declare-sort T_T_dtree_sum_sum_T_T_N_sum_sum_fun$ 0)
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0)
(declare-sort T_set_dtree_sum_T_set_dtree_sum_fun$ 0)
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0)
(declare-sort T_dtree_sum_set_set_T_dtree_sum_set_set_fun$ 0)
(declare-datatypes () ((N_T_N_sum_set_prod$ (pair$ (fst$ N$) (snd$ T_N_sum_set$)))
  (T_N_sum$ (inl$ (projl$ T$)) (inr$ (projr$ N$)))
  (T_dtree_sum$ (inl$a (projl$a T$)) (inr$a (projr$a Dtree$)))
  (T_T_N_sum_sum$ (inl$b (projl$b T$)) (inr$b (projr$b T_N_sum$)))
  (T_T_dtree_sum_sum$ (inl$c (projl$c T$)) (inr$c (projr$c T_dtree_sum$)))
  (T_T_sum$ (inl$d (projl$d T$)) (inr$d (projr$d T$)))
  (T_set_N_sum$ (inl$e (projl$e T_set$)) (inr$e (projr$e N$)))
  (T_set_dtree_sum$ (inl$f (projl$f T_set$)) (inr$f (projr$f Dtree$)))
  (T_set_T_sum$ (inl$g (projl$g T_set$)) (inr$g (projr$g T$)))))
(declare-fun h$ (Dtree$) N_dtree_fun$)
(declare-fun n$ () N$)
(declare-fun p$ () N_T_N_sum_set_prod_set$)
(declare-fun id$ () T_T_fun$)
(declare-fun na$ () N$)
(declare-fun uu$ () Dtree_T_dtree_sum_fun$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun id$a () T_set_T_set_fun$)
(declare-fun id$b () T_dtree_sum_T_dtree_sum_fun$)
(declare-fun id$c () T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun id$d () Dtree_dtree_fun$)
(declare-fun id$e () Dtree_set_dtree_set_fun$)
(declare-fun id$f () T_dtree_sum_set_set_T_dtree_sum_set_set_fun$)
(declare-fun id$g () Dtree_set_set_dtree_set_set_fun$)
(declare-fun id$h () T_set_set_T_set_set_fun$)
(declare-fun id$i () T_set_set_set_T_set_set_set_fun$)
(declare-fun id$j () N_set_N_set_fun$)
(declare-fun id$k () N_set_set_N_set_set_fun$)
(declare-fun id$l () N_N_fun$)
(declare-fun top$ () N_set$)
(declare-fun tr0$ () Dtree$)
(declare-fun tra$ () Dtree$)
(declare-fun uua$ () N_T_N_sum_fun$)
(declare-fun uub$ () T_N_sum_T_T_N_sum_sum_fun$)
(declare-fun uuc$ () T_dtree_sum_T_T_dtree_sum_sum_fun$)
(declare-fun uud$ () T_T_T_sum_fun$)
(declare-fun uue$ () N_T_set_N_sum_fun$)
(declare-fun uuf$ () Dtree_T_set_dtree_sum_fun$)
(declare-fun uug$ () T_T_set_T_sum_fun$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun pick$ (Dtree$) N_dtree_fun$)
(declare-fun root$ () Dtree_N_fun$)
(declare-fun top$a () T_dtree_sum_set$)
(declare-fun top$b () Dtree_set$)
(declare-fun top$c () T_set$)
(declare-fun top$d () T_N_sum_set$)
(declare-fun image$ (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$) T_N_sum_set$)
(declare-fun inItr$ (N_set$ Dtree$ N$) Bool)
(declare-fun subtr$ (N_set$ Dtree$ Dtree$) Bool)
(declare-fun image$a (T_dtree_sum_T_dtree_sum_fun$) T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun image$b (Dtree_dtree_fun$) Dtree_set_dtree_set_fun$)
(declare-fun image$c (Dtree_N_fun$ Dtree_set$) N_set$)
(declare-fun image$d (T_T_dtree_sum_sum_T_T_N_sum_sum_fun$ T_T_dtree_sum_sum_set$) T_T_N_sum_sum_set$)
(declare-fun image$e (T_T_sum_T_T_sum_fun$ T_T_sum_set$) T_T_sum_set$)
(declare-fun image$f (T_T_fun$) T_set_T_set_fun$)
(declare-fun image$g (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$) T_dtree_sum_set$)
(declare-fun image$h (N_dtree_fun$ N_set$) Dtree_set$)
(declare-fun image$i (T_N_sum_T_N_sum_fun$ T_N_sum_set$) T_N_sum_set$)
(declare-fun image$j (N_N_fun$) N_set_N_set_fun$)
(declare-fun image$k (T_set_dtree_sum_T_set_N_sum_fun$ T_set_dtree_sum_set$) T_set_N_sum_set$)
(declare-fun image$l (T_set_dtree_sum_T_set_dtree_sum_fun$ T_set_dtree_sum_set$) T_set_dtree_sum_set$)
(declare-fun image$m (T_set_T_sum_T_set_T_sum_fun$ T_set_T_sum_set$) T_set_T_sum_set$)
(declare-fun image$n (T_T_N_sum_sum_T_dtree_sum_fun$ T_T_N_sum_sum_set$) T_dtree_sum_set$)
(declare-fun image$o (T_N_sum_dtree_fun$ T_N_sum_set$) Dtree_set$)
(declare-fun image$p (T_T_dtree_sum_sum_T_dtree_sum_fun$ T_T_dtree_sum_sum_set$) T_dtree_sum_set$)
(declare-fun image$q (T_T_N_sum_sum_T_N_sum_fun$ T_T_N_sum_sum_set$) T_N_sum_set$)
(declare-fun image$r (T_T_dtree_sum_sum_T_N_sum_fun$ T_T_dtree_sum_sum_set$) T_N_sum_set$)
(declare-fun image$s (T_dtree_sum_T_T_N_sum_sum_fun$ T_dtree_sum_set$) T_T_N_sum_sum_set$)
(declare-fun image$t (T_N_sum_T_T_N_sum_sum_fun$ T_N_sum_set$) T_T_N_sum_sum_set$)
(declare-fun image$u (T_dtree_sum_set_T_dtree_sum_set_fun$) T_dtree_sum_set_set_T_dtree_sum_set_set_fun$)
(declare-fun image$v (Dtree_set_dtree_set_fun$) Dtree_set_set_dtree_set_set_fun$)
(declare-fun image$w (T_set_set_T_set_set_fun$) T_set_set_set_T_set_set_set_fun$)
(declare-fun image$x (N_set_N_set_fun$) N_set_set_N_set_set_fun$)
(declare-fun image$y (T_set_T_set_fun$) T_set_set_T_set_set_fun$)
(declare-fun inj_on$ (Dtree_N_fun$ Dtree_set$) Bool)
(declare-fun member$ (N_T_N_sum_set_prod$ N_T_N_sum_set_prod_set$) Bool)
(declare-fun vimage$ (Dtree_T_dtree_sum_fun$ T_dtree_sum_set$) Dtree_set$)
(declare-fun fun_app$ (T_dtree_sum_T_T_dtree_sum_sum_fun$ T_dtree_sum$) T_T_dtree_sum_sum$)
(declare-fun map_sum$ (T_T_fun$) Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$)
(declare-fun member$a (Dtree$ Dtree_set$) Bool)
(declare-fun member$b (N$ N_set$) Bool)
(declare-fun member$c (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun member$d (T_N_sum$ T_N_sum_set$) Bool)
(declare-fun member$e (T_T_N_sum_sum$ T_T_N_sum_sum_set$) Bool)
(declare-fun member$f (T_T_dtree_sum_sum$ T_T_dtree_sum_sum_set$) Bool)
(declare-fun vimage$a (N_T_N_sum_fun$ T_N_sum_set$) N_set$)
(declare-fun vimage$b (T_N_sum_T_T_N_sum_sum_fun$ T_T_N_sum_sum_set$) T_N_sum_set$)
(declare-fun vimage$c (T_dtree_sum_T_T_dtree_sum_sum_fun$ T_T_dtree_sum_sum_set$) T_dtree_sum_set$)
(declare-fun vimage$d (T_T_T_sum_fun$ T_T_sum_set$) T_set$)
(declare-fun vimage$e (N_T_set_N_sum_fun$ T_set_N_sum_set$) N_set$)
(declare-fun vimage$f (Dtree_T_set_dtree_sum_fun$ T_set_dtree_sum_set$) Dtree_set$)
(declare-fun vimage$g (T_T_set_T_sum_fun$ T_set_T_sum_set$) T_set$)
(declare-fun vimage$h (T_dtree_sum_T_dtree_sum_fun$) T_dtree_sum_set_T_dtree_sum_set_fun$)
(declare-fun vimage$i (Dtree_dtree_fun$) Dtree_set_dtree_set_fun$)
(declare-fun vimage$j (T_dtree_sum_set_T_dtree_sum_set_fun$) T_dtree_sum_set_set_T_dtree_sum_set_set_fun$)
(declare-fun vimage$k (Dtree_set_dtree_set_fun$) Dtree_set_set_dtree_set_set_fun$)
(declare-fun vimage$l (T_set_set_T_set_set_fun$) T_set_set_set_T_set_set_set_fun$)
(declare-fun vimage$m (N_set_N_set_fun$) N_set_set_N_set_set_fun$)
(declare-fun vimage$n (T_set_T_set_fun$) T_set_set_T_set_set_fun$)
(declare-fun vimage$o (N_N_fun$) N_set_N_set_fun$)
(declare-fun vimage$p (T_T_fun$) T_set_T_set_fun$)
(declare-fun vimage$q (Dtree_N_fun$ N_set$) Dtree_set$)
(declare-fun vimage$r (N_dtree_fun$ Dtree_set$) N_set$)
(declare-fun vimage$s (T_dtree_sum_N_fun$ N_set$) T_dtree_sum_set$)
(declare-fun vimage$t (N_T_dtree_sum_fun$ T_dtree_sum_set$) N_set$)
(declare-fun vimage$u (T_dtree_sum_dtree_fun$ Dtree_set$) T_dtree_sum_set$)
(declare-fun fun_app$a (T_N_sum_T_T_N_sum_sum_fun$ T_N_sum$) T_T_N_sum_sum$)
(declare-fun fun_app$b (Dtree_T_set_dtree_sum_fun$ Dtree$) T_set_dtree_sum$)
(declare-fun fun_app$c (Dtree_T_dtree_sum_fun$ Dtree$) T_dtree_sum$)
(declare-fun fun_app$d (T_T_set_T_sum_fun$ T$) T_set_T_sum$)
(declare-fun fun_app$e (T_T_T_sum_fun$ T$) T_T_sum$)
(declare-fun fun_app$f (N_T_set_N_sum_fun$ N$) T_set_N_sum$)
(declare-fun fun_app$g (N_T_N_sum_fun$ N$) T_N_sum$)
(declare-fun fun_app$h (Dtree_N_fun$ Dtree$) N$)
(declare-fun fun_app$i (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$) T_dtree_sum_T_N_sum_fun$)
(declare-fun fun_app$j (N_dtree_fun$ N$) Dtree$)
(declare-fun fun_app$k (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun fun_app$l (Dtree_set_dtree_set_fun$ Dtree_set$) Dtree_set$)
(declare-fun fun_app$m (T_set_T_set_fun$ T_set$) T_set$)
(declare-fun fun_app$n (N_set_N_set_fun$ N_set$) N_set$)
(declare-fun fun_app$o (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$p (N_N_fun$ N$) N$)
(declare-fun fun_app$q (T_N_sum_dtree_fun$ T_N_sum$) Dtree$)
(declare-fun fun_app$r (T_dtree_sum_dtree_fun$ T_dtree_sum$) Dtree$)
(declare-fun fun_app$s (T_N_sum_N_fun$ T_N_sum$) N$)
(declare-fun fun_app$t (T_dtree_sum_N_fun$ T_dtree_sum$) N$)
(declare-fun fun_app$u (Dtree_T_N_sum_fun$ Dtree$) T_N_sum$)
(declare-fun map_sum$a (T_T_fun$ Dtree_dtree_fun$) T_dtree_sum_T_dtree_sum_fun$)
(declare-fun map_sum$b (T_T_fun$ T_dtree_sum_T_N_sum_fun$) T_T_dtree_sum_sum_T_T_N_sum_sum_fun$)
(declare-fun map_sum$c (T_T_fun$ T_T_fun$) T_T_sum_T_T_sum_fun$)
(declare-fun map_sum$d (T_T_fun$ N_dtree_fun$) T_N_sum_T_dtree_sum_fun$)
(declare-fun map_sum$e (T_T_fun$ N_N_fun$) T_N_sum_T_N_sum_fun$)
(declare-fun map_sum$f (T_set_T_set_fun$ Dtree_N_fun$) T_set_dtree_sum_T_set_N_sum_fun$)
(declare-fun map_sum$g (T_set_T_set_fun$ Dtree_dtree_fun$) T_set_dtree_sum_T_set_dtree_sum_fun$)
(declare-fun map_sum$h (T_set_T_set_fun$ T_T_fun$) T_set_T_sum_T_set_T_sum_fun$)
(declare-fun map_sum$i (T_T_fun$ T_N_sum_dtree_fun$) T_T_N_sum_sum_T_dtree_sum_fun$)
(declare-fun map_sum$j (T_T_fun$ T_dtree_sum_dtree_fun$) T_T_dtree_sum_sum_T_dtree_sum_fun$)
(declare-fun map_sum$k (T_T_fun$ T_N_sum_N_fun$) T_T_N_sum_sum_T_N_sum_fun$)
(declare-fun map_sum$l (T_T_fun$ T_dtree_sum_N_fun$) T_T_dtree_sum_sum_T_N_sum_fun$)
(declare-fun map_sum$m (T_T_fun$ Dtree_T_N_sum_fun$) T_dtree_sum_T_T_N_sum_sum_fun$)
(declare-fun map_sum$n (T_T_fun$ N_T_N_sum_fun$) T_N_sum_T_T_N_sum_sum_fun$)
(assert (! (forall ((?v0 T_dtree_sum$)) (! (= (fun_app$ uuc$ ?v0) (inr$c ?v0)) :pattern ((fun_app$ uuc$ ?v0)))) :named a0))
(assert (! (forall ((?v0 T_N_sum$)) (! (= (fun_app$a uub$ ?v0) (inr$b ?v0)) :pattern ((fun_app$a uub$ ?v0)))) :named a1))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$b uuf$ ?v0) (inr$f ?v0)) :pattern ((fun_app$b uuf$ ?v0)))) :named a2))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$c uu$ ?v0) (inr$a ?v0)) :pattern ((fun_app$c uu$ ?v0)))) :named a3))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$d uug$ ?v0) (inr$g ?v0)) :pattern ((fun_app$d uug$ ?v0)))) :named a4))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$e uud$ ?v0) (inr$d ?v0)) :pattern ((fun_app$e uud$ ?v0)))) :named a5))
(assert (! (forall ((?v0 N$)) (! (= (fun_app$f uue$ ?v0) (inr$e ?v0)) :pattern ((fun_app$f uue$ ?v0)))) :named a6))
(assert (! (forall ((?v0 N$)) (! (= (fun_app$g uua$ ?v0) (inr$ ?v0)) :pattern ((fun_app$g uua$ ?v0)))) :named a7))
(assert (! (not (and (member$ (pair$ (fun_app$h root$ tra$) (image$ (fun_app$i (map_sum$ id$) root$) (cont$ tra$))) p$) (and (inj_on$ root$ (vimage$ uu$ (cont$ tra$))) (forall ((?v0 Dtree$)) (=> (member$a ?v0 (vimage$ uu$ (cont$ tra$))) (exists ((?v1 N$)) (and (inItr$ top$ tr0$ ?v1) (= ?v0 (fun_app$j (h$ tr0$) ?v1))))))))) :named a8))
(assert (! (inItr$ top$ tr0$ n$) :named a9))
(assert (! (inItr$ top$ tr0$ na$) :named a10))
(assert (! (wf$ tr0$) :named a11))
(assert (! (exists ((?v0 N$)) (and (inItr$ top$ tr0$ ?v0) (= tra$ (fun_app$j (h$ tr0$) ?v0)))) :named a12))
(assert (! (= tra$ (fun_app$j (h$ tr0$) na$)) :named a13))
(assert (! (=> (forall ((?v0 N$)) (=> (and (inItr$ top$ tr0$ ?v0) (= tra$ (fun_app$j (h$ tr0$) ?v0))) false)) false) :named a14))
(assert (! (forall ((?v0 N$)) (=> (inItr$ top$ tr0$ ?v0) (= (fun_app$h root$ (fun_app$j (h$ tr0$) ?v0)) ?v0))) :named a15))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (= (inItr$ ?v0 ?v1 ?v2) (or (exists ((?v3 Dtree$) (?v4 N_set$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 (fun_app$h root$ ?v3)) (member$b (fun_app$h root$ ?v3) ?v4))))) (exists ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 N$)) (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$b (fun_app$h root$ ?v3) ?v4) (and (member$c (inr$a ?v5) (cont$ ?v3)) (inItr$ ?v4 ?v5 ?v6)))))))))) :named a16))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (and (inItr$ ?v0 ?v1 ?v2) (and (forall ((?v3 Dtree$) (?v4 N_set$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 (fun_app$h root$ ?v3)) (member$b (fun_app$h root$ ?v3) ?v4)))) false)) (forall ((?v3 Dtree$) (?v4 N_set$) (?v5 Dtree$) (?v6 N$)) (=> (and (= ?v0 ?v4) (and (= ?v1 ?v3) (and (= ?v2 ?v6) (and (member$b (fun_app$h root$ ?v3) ?v4) (and (member$c (inr$a ?v5) (cont$ ?v3)) (inItr$ ?v4 ?v5 ?v6)))))) false)))) false)) :named a17))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (inItr$ ?v0 ?v1 ?v2) (member$b (fun_app$h root$ ?v1) ?v0))) :named a18))
(assert (! (forall ((?v0 Dtree$) (?v1 N$)) (=> (inItr$ top$ ?v0 ?v1) (= (fun_app$h root$ (fun_app$j (h$ ?v0) ?v1)) ?v1))) :named a19))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 N$)) (=> (and (member$b (fun_app$h root$ ?v0) ?v1) (and (member$c (inr$a ?v2) (cont$ ?v0)) (inItr$ ?v1 ?v2 ?v3))) (inItr$ ?v1 ?v0 ?v3))) :named a20))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$b (fun_app$h root$ ?v0) ?v1) (inItr$ ?v1 ?v0 (fun_app$h root$ ?v0)))) :named a21))
(assert (! (forall ((?v0 N$)) (exists ((?v1 T_N_sum_set$)) (member$ (pair$ ?v0 ?v1) p$))) :named a22))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 T_dtree_sum_set$)) (= (vimage$ uu$ (fun_app$k (image$a (map_sum$a id$ ?v0)) ?v1)) (fun_app$l (image$b ?v0) (vimage$ uu$ ?v1)))) :named a23))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 T_dtree_sum_set$)) (= (vimage$a uua$ (image$ (fun_app$i (map_sum$ id$) ?v0) ?v1)) (image$c ?v0 (vimage$ uu$ ?v1)))) :named a24))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$) (?v1 T_T_dtree_sum_sum_set$)) (= (vimage$b uub$ (image$d (map_sum$b id$ ?v0) ?v1)) (image$ ?v0 (vimage$c uuc$ ?v1)))) :named a25))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_T_sum_set$)) (= (vimage$d uud$ (image$e (map_sum$c id$ ?v0) ?v1)) (fun_app$m (image$f ?v0) (vimage$d uud$ ?v1)))) :named a26))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 T_N_sum_set$)) (= (vimage$ uu$ (image$g (map_sum$d id$ ?v0) ?v1)) (image$h ?v0 (vimage$a uua$ ?v1)))) :named a27))
(assert (! (forall ((?v0 N_N_fun$) (?v1 T_N_sum_set$)) (= (vimage$a uua$ (image$i (map_sum$e id$ ?v0) ?v1)) (fun_app$n (image$j ?v0) (vimage$a uua$ ?v1)))) :named a28))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 T_set_dtree_sum_set$)) (= (vimage$e uue$ (image$k (map_sum$f id$a ?v0) ?v1)) (image$c ?v0 (vimage$f uuf$ ?v1)))) :named a29))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 T_set_dtree_sum_set$)) (= (vimage$f uuf$ (image$l (map_sum$g id$a ?v0) ?v1)) (fun_app$l (image$b ?v0) (vimage$f uuf$ ?v1)))) :named a30))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_set_T_sum_set$)) (= (vimage$g uug$ (image$m (map_sum$h id$a ?v0) ?v1)) (fun_app$m (image$f ?v0) (vimage$g uug$ ?v1)))) :named a31))
(assert (! (forall ((?v0 T_N_sum_dtree_fun$) (?v1 T_T_N_sum_sum_set$)) (= (vimage$ uu$ (image$n (map_sum$i id$ ?v0) ?v1)) (image$o ?v0 (vimage$b uub$ ?v1)))) :named a32))
(assert (! (forall ((?v0 N$)) (=> (and (wf$ tr0$) (inItr$ top$ tr0$ ?v0)) (member$ (pair$ ?v0 (image$ (fun_app$i (map_sum$ id$) root$) (cont$ (fun_app$j (h$ tr0$) ?v0)))) p$))) :named a33))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 T_dtree_sum_set$)) (= (member$c (inr$a ?v0) (fun_app$k (image$a (map_sum$a id$ ?v1)) ?v2)) (exists ((?v3 Dtree$)) (and (member$c (inr$a ?v3) ?v2) (= (fun_app$o ?v1 ?v3) ?v0))))) :named a34))
(assert (! (forall ((?v0 N$) (?v1 Dtree_N_fun$) (?v2 T_dtree_sum_set$)) (= (member$d (inr$ ?v0) (image$ (fun_app$i (map_sum$ id$) ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$c (inr$a ?v3) ?v2) (= (fun_app$h ?v1 ?v3) ?v0))))) :named a35))
(assert (! (forall ((?v0 Dtree$) (?v1 N_dtree_fun$) (?v2 T_N_sum_set$)) (= (member$c (inr$a ?v0) (image$g (map_sum$d id$ ?v1) ?v2)) (exists ((?v3 N$)) (and (member$d (inr$ ?v3) ?v2) (= (fun_app$j ?v1 ?v3) ?v0))))) :named a36))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 T_N_sum_set$)) (= (member$d (inr$ ?v0) (image$i (map_sum$e id$ ?v1) ?v2)) (exists ((?v3 N$)) (and (member$d (inr$ ?v3) ?v2) (= (fun_app$p ?v1 ?v3) ?v0))))) :named a37))
(assert (! (forall ((?v0 Dtree$) (?v1 T_N_sum_dtree_fun$) (?v2 T_T_N_sum_sum_set$)) (= (member$c (inr$a ?v0) (image$n (map_sum$i id$ ?v1) ?v2)) (exists ((?v3 T_N_sum$)) (and (member$e (inr$b ?v3) ?v2) (= (fun_app$q ?v1 ?v3) ?v0))))) :named a38))
(assert (! (forall ((?v0 Dtree$) (?v1 T_dtree_sum_dtree_fun$) (?v2 T_T_dtree_sum_sum_set$)) (= (member$c (inr$a ?v0) (image$p (map_sum$j id$ ?v1) ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$f (inr$c ?v3) ?v2) (= (fun_app$r ?v1 ?v3) ?v0))))) :named a39))
(assert (! (forall ((?v0 N$) (?v1 T_N_sum_N_fun$) (?v2 T_T_N_sum_sum_set$)) (= (member$d (inr$ ?v0) (image$q (map_sum$k id$ ?v1) ?v2)) (exists ((?v3 T_N_sum$)) (and (member$e (inr$b ?v3) ?v2) (= (fun_app$s ?v1 ?v3) ?v0))))) :named a40))
(assert (! (forall ((?v0 N$) (?v1 T_dtree_sum_N_fun$) (?v2 T_T_dtree_sum_sum_set$)) (= (member$d (inr$ ?v0) (image$r (map_sum$l id$ ?v1) ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$f (inr$c ?v3) ?v2) (= (fun_app$t ?v1 ?v3) ?v0))))) :named a41))
(assert (! (forall ((?v0 T_N_sum$) (?v1 Dtree_T_N_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$e (inr$b ?v0) (image$s (map_sum$m id$ ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$c (inr$a ?v3) ?v2) (= (fun_app$u ?v1 ?v3) ?v0))))) :named a42))
(assert (! (forall ((?v0 T_N_sum$) (?v1 N_T_N_sum_fun$) (?v2 T_N_sum_set$)) (= (member$e (inr$b ?v0) (image$t (map_sum$n id$ ?v1) ?v2)) (exists ((?v3 N$)) (and (member$d (inr$ ?v3) ?v2) (= (fun_app$g ?v1 ?v3) ?v0))))) :named a43))
(assert (! (forall ((?v0 N$)) (=> (inItr$ top$ tr0$ ?v0) (= (fun_app$h root$ (fun_app$j (pick$ tr0$) ?v0)) ?v0))) :named a44))
(assert (! (forall ((?v0 N$)) (= (fun_app$h root$ (fun_app$j (h$ tr0$) ?v0)) (fun_app$h root$ (fun_app$j (pick$ tr0$) ?v0)))) :named a45))
(assert (! (= (vimage$h id$b) id$c) :named a46))
(assert (! (= (vimage$i id$d) id$e) :named a47))
(assert (! (= (vimage$j id$c) id$f) :named a48))
(assert (! (= (vimage$k id$e) id$g) :named a49))
(assert (! (= (vimage$l id$h) id$i) :named a50))
(assert (! (= (vimage$m id$j) id$k) :named a51))
(assert (! (= (vimage$n id$a) id$h) :named a52))
(assert (! (= (vimage$o id$l) id$j) :named a53))
(assert (! (= (vimage$p id$) id$a) :named a54))
(assert (! (forall ((?v0 N_N_fun$)) (= (fun_app$n (vimage$o ?v0) top$) top$)) :named a55))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$)) (= (vimage$ ?v0 top$a) top$b)) :named a56))
(assert (! (forall ((?v0 T_T_fun$)) (= (fun_app$m (vimage$p ?v0) top$c) top$c)) :named a57))
(assert (! (forall ((?v0 Dtree_N_fun$)) (= (vimage$q ?v0 top$) top$b)) :named a58))
(assert (! (forall ((?v0 N_dtree_fun$)) (= (vimage$r ?v0 top$b) top$)) :named a59))
(assert (! (forall ((?v0 Dtree_dtree_fun$)) (= (fun_app$l (vimage$i ?v0) top$b) top$b)) :named a60))
(assert (! (forall ((?v0 N_T_N_sum_fun$)) (= (vimage$a ?v0 top$d) top$)) :named a61))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$)) (= (vimage$s ?v0 top$) top$a)) :named a62))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$)) (= (vimage$t ?v0 top$a) top$)) :named a63))
(assert (! (forall ((?v0 T_dtree_sum_dtree_fun$)) (= (vimage$u ?v0 top$b) top$a)) :named a64))
(assert (! (= (image$u id$c) id$f) :named a65))
(assert (! (= (image$v id$e) id$g) :named a66))
(assert (! (= (image$w id$h) id$i) :named a67))
(assert (! (= (image$x id$j) id$k) :named a68))
(assert (! (= (image$j id$l) id$j) :named a69))
(assert (! (= (image$y id$a) id$h) :named a70))
(assert (! (= (image$a id$b) id$c) :named a71))
(assert (! (= (image$b id$d) id$e) :named a72))
(assert (! (= (image$f id$) id$a) :named a73))
(assert (! (forall ((?v0 N$) (?v1 Dtree$)) (=> (and (inItr$ top$ tr0$ ?v0) (subtr$ top$ ?v1 (fun_app$j (h$ tr0$) ?v0))) (exists ((?v2 N$)) (and (inItr$ top$ tr0$ ?v2) (= ?v1 (fun_app$j (h$ tr0$) ?v2)))))) :named a74))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 T_dtree_sum_set$)) (=> (member$c (inr$a ?v0) (fun_app$k (image$a (map_sum$a id$ ?v1)) ?v2)) (exists ((?v3 Dtree$)) (and (member$c (inr$a ?v3) ?v2) (= (fun_app$o ?v1 ?v3) ?v0))))) :named a75))
(assert (! (forall ((?v0 N$) (?v1 Dtree_N_fun$) (?v2 T_dtree_sum_set$)) (=> (member$d (inr$ ?v0) (image$ (fun_app$i (map_sum$ id$) ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$c (inr$a ?v3) ?v2) (= (fun_app$h ?v1 ?v3) ?v0))))) :named a76))
(assert (! (forall ((?v0 Dtree$) (?v1 N_dtree_fun$) (?v2 T_N_sum_set$)) (=> (member$c (inr$a ?v0) (image$g (map_sum$d id$ ?v1) ?v2)) (exists ((?v3 N$)) (and (member$d (inr$ ?v3) ?v2) (= (fun_app$j ?v1 ?v3) ?v0))))) :named a77))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 T_N_sum_set$)) (=> (member$d (inr$ ?v0) (image$i (map_sum$e id$ ?v1) ?v2)) (exists ((?v3 N$)) (and (member$d (inr$ ?v3) ?v2) (= (fun_app$p ?v1 ?v3) ?v0))))) :named a78))
(assert (! (forall ((?v0 Dtree$) (?v1 T_N_sum_dtree_fun$) (?v2 T_T_N_sum_sum_set$)) (=> (member$c (inr$a ?v0) (image$n (map_sum$i id$ ?v1) ?v2)) (exists ((?v3 T_N_sum$)) (and (member$e (inr$b ?v3) ?v2) (= (fun_app$q ?v1 ?v3) ?v0))))) :named a79))
(assert (! (forall ((?v0 Dtree$) (?v1 T_dtree_sum_dtree_fun$) (?v2 T_T_dtree_sum_sum_set$)) (=> (member$c (inr$a ?v0) (image$p (map_sum$j id$ ?v1) ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$f (inr$c ?v3) ?v2) (= (fun_app$r ?v1 ?v3) ?v0))))) :named a80))
(assert (! (forall ((?v0 N$) (?v1 T_N_sum_N_fun$) (?v2 T_T_N_sum_sum_set$)) (=> (member$d (inr$ ?v0) (image$q (map_sum$k id$ ?v1) ?v2)) (exists ((?v3 T_N_sum$)) (and (member$e (inr$b ?v3) ?v2) (= (fun_app$s ?v1 ?v3) ?v0))))) :named a81))
(assert (! (forall ((?v0 N$) (?v1 T_dtree_sum_N_fun$) (?v2 T_T_dtree_sum_sum_set$)) (=> (member$d (inr$ ?v0) (image$r (map_sum$l id$ ?v1) ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$f (inr$c ?v3) ?v2) (= (fun_app$t ?v1 ?v3) ?v0))))) :named a82))
(assert (! (forall ((?v0 T_N_sum$) (?v1 Dtree_T_N_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$e (inr$b ?v0) (image$s (map_sum$m id$ ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$c (inr$a ?v3) ?v2) (= (fun_app$u ?v1 ?v3) ?v0))))) :named a83))
(assert (! (forall ((?v0 T_N_sum$) (?v1 N_T_N_sum_fun$) (?v2 T_N_sum_set$)) (=> (member$e (inr$b ?v0) (image$t (map_sum$n id$ ?v1) ?v2)) (exists ((?v3 N$)) (and (member$d (inr$ ?v3) ?v2) (= (fun_app$g ?v1 ?v3) ?v0))))) :named a84))
(check-sat)
;(get-unsat-core)
