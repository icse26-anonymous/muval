; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 489
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort N_set$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-datatypes () ((N_list$ (nil$) (cons$ (hd$ N$) (tl$ N_list$)))))
(declare-fun f$ () N_dtree_fun$)
(declare-fun n$ () N$)
(declare-fun n1$ () N$)
(declare-fun nl$ () N_list$)
(declare-fun bot$ () N_set$)
(declare-fun nl1$ () N_list$)
(declare-fun nl2$ () N_list$)
(declare-fun nla$ () N_list$)
(declare-fun set$ (N_list$) N_set$)
(declare-fun sup$ (N_set$ N_set$) N_set$)
(declare-fun last$ (N_list$) N$)
(declare-fun nl11$ () N_list$)
(declare-fun nl12$ () N_list$)
(declare-fun path$ (N_dtree_fun$ N_list$) Bool)
(declare-fun nl12$a () N_list$)
(declare-fun append$ (N_list$ N_list$) N_list$)
(declare-fun insert$ (N$ N_set$) N_set$)
(declare-fun member$ (N$ N_set$) Bool)
(declare-fun less_eq$ (N_set$ N_set$) Bool)
(declare-fun distinct$ (N_list$) Bool)
(assert (! (not (and (path$ f$ nl12$) (and (= (hd$ nl12$) (hd$ (cons$ n$ (append$ nl11$ (cons$ n$ nl12$a))))) (and (= (last$ nl12$) (last$ (cons$ n$ (append$ nl11$ (cons$ n$ nl12$a))))) (and (less_eq$ (set$ nl12$) (set$ (cons$ n$ (append$ nl11$ (cons$ n$ nl12$a))))) (distinct$ nl12$)))))) :named a0))
(assert (! (path$ f$ nl12$) :named a1))
(assert (! (= (hd$ nl12$) n$) :named a2))
(assert (! (= (last$ nl12$) (last$ (cons$ n$ nl12$a))) :named a3))
(assert (! (distinct$ nl12$) :named a4))
(assert (! (less_eq$ (set$ nl12$) (sup$ (insert$ n$ bot$) (set$ nl12$a))) :named a5))
(assert (! (distinct$ nl12$) :named a6))
(assert (! (path$ f$ nl$) :named a7))
(assert (! (path$ f$ nl12$) :named a8))
(assert (! (= (hd$ nl12$) n$) :named a9))
(assert (! (path$ f$ nla$) :named a10))
(assert (! (member$ n$ (set$ nl1$)) :named a11))
(assert (! (= (last$ nl12$) (last$ (cons$ n$ nl12$a))) :named a12))
(assert (! (less_eq$ (set$ nl12$) (sup$ (insert$ n$ bot$) (set$ nl12$a))) :named a13))
(assert (! (path$ f$ (cons$ n$ nl12$a)) :named a14))
(assert (! (= nl1$ (append$ nl11$ (cons$ n$ nl12$a))) :named a15))
(assert (! (=> (forall ((?v0 N_list$)) (=> (and (path$ f$ ?v0) (and (= (hd$ ?v0) n$) (and (= (last$ ?v0) (last$ (cons$ n$ nl12$a))) (and (distinct$ ?v0) (less_eq$ (set$ ?v0) (sup$ (insert$ n$ bot$) (set$ nl12$a))))))) false)) false) :named a16))
(assert (! (= nl1$ (cons$ n1$ nl2$)) :named a17))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_list$) (?v2 N_list$)) (=> (and (path$ ?v0 ?v1) (path$ ?v0 (cons$ (last$ ?v1) ?v2))) (path$ ?v0 (append$ ?v1 ?v2)))) :named a18))
(assert (! (path$ f$ nla$) :named a19))
(assert (! (=> (forall ((?v0 N$) (?v1 N_list$)) (=> (= nla$ (cons$ ?v0 ?v1)) false)) false) :named a20))
(assert (! (=> (forall ((?v0 N_list$) (?v1 N_list$)) (=> (= nl1$ (append$ ?v0 (cons$ n$ ?v1))) false)) false) :named a21))
(assert (! (path$ f$ nl1$) :named a22))
(check-sat)
;(get-unsat-core)
