; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 237
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort N_N_fun$ 0)
(declare-sort Dtree_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort Dtree_N_fun$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort T_N_sum_set$ 0)
(declare-sort N_T_N_sum_fun$ 0)
(declare-sort T_N_sum_N_fun$ 0)
(declare-sort Dtree_bool_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort T_N_sum_bool_fun$ 0)
(declare-sort Dtree_T_N_sum_fun$ 0)
(declare-sort T_N_sum_dtree_fun$ 0)
(declare-sort T_N_sum_T_N_sum_fun$ 0)
(declare-datatypes () ((T_N_sum$ (inl$ (projl$ T$)) (inr$ (projr$ N$)))))
(declare-fun uu$ () N_T_N_sum_fun$)
(declare-fun ftr$ () N_dtree_fun$)
(declare-fun tns$ () T_N_sum_set$)
(declare-fun rcut$ (Dtree$) Dtree$)
(declare-fun root$ () Dtree_N_fun$)
(declare-fun image$ (Dtree_N_fun$ Dtree_set$) N_set$)
(declare-fun image$a (N_dtree_fun$ N_set$) Dtree_set$)
(declare-fun image$b (N_N_fun$ N_set$) N_set$)
(declare-fun image$c (N_T_N_sum_fun$ N_set$) T_N_sum_set$)
(declare-fun image$d (T_N_sum_N_fun$ T_N_sum_set$) N_set$)
(declare-fun image$e (T_N_sum_T_N_sum_fun$ T_N_sum_set$) T_N_sum_set$)
(declare-fun image$f (T_N_sum_dtree_fun$ T_N_sum_set$) Dtree_set$)
(declare-fun image$g (Dtree_T_N_sum_fun$ Dtree_set$) T_N_sum_set$)
(declare-fun image$h (Dtree_dtree_fun$ Dtree_set$) Dtree_set$)
(declare-fun member$ (N$ N_set$) Bool)
(declare-fun vimage$ (N_T_N_sum_fun$ T_N_sum_set$) N_set$)
(declare-fun collect$ (Dtree_bool_fun$) Dtree_set$)
(declare-fun fun_app$ (N_T_N_sum_fun$ N$) T_N_sum$)
(declare-fun member$a (Dtree$ Dtree_set$) Bool)
(declare-fun member$b (T_N_sum$ T_N_sum_set$) Bool)
(declare-fun vimage$a (N_N_fun$ N_set$) N_set$)
(declare-fun vimage$b (N_dtree_fun$ Dtree_set$) N_set$)
(declare-fun vimage$c (T_N_sum_N_fun$ N_set$) T_N_sum_set$)
(declare-fun vimage$d (T_N_sum_T_N_sum_fun$ T_N_sum_set$) T_N_sum_set$)
(declare-fun vimage$e (T_N_sum_dtree_fun$ Dtree_set$) T_N_sum_set$)
(declare-fun vimage$f (Dtree_N_fun$ N_set$) Dtree_set$)
(declare-fun vimage$g (Dtree_T_N_sum_fun$ T_N_sum_set$) Dtree_set$)
(declare-fun vimage$h (Dtree_dtree_fun$ Dtree_set$) Dtree_set$)
(declare-fun collect$a (N_bool_fun$) N_set$)
(declare-fun collect$b (T_N_sum_bool_fun$) T_N_sum_set$)
(declare-fun fun_app$a (N_N_fun$ N$) N$)
(declare-fun fun_app$b (N_dtree_fun$ N$) Dtree$)
(declare-fun fun_app$c (T_N_sum_N_fun$ T_N_sum$) N$)
(declare-fun fun_app$d (T_N_sum_T_N_sum_fun$ T_N_sum$) T_N_sum$)
(declare-fun fun_app$e (T_N_sum_dtree_fun$ T_N_sum$) Dtree$)
(declare-fun fun_app$f (Dtree_N_fun$ Dtree$) N$)
(declare-fun fun_app$g (Dtree_T_N_sum_fun$ Dtree$) T_N_sum$)
(declare-fun fun_app$h (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$i (Dtree_bool_fun$ Dtree$) Bool)
(declare-fun fun_app$j (N_bool_fun$ N$) Bool)
(declare-fun fun_app$k (T_N_sum_bool_fun$ T_N_sum$) Bool)
(declare-fun hsubst_r$ (Dtree$) N$)
(assert (! (forall ((?v0 N$)) (! (= (fun_app$ uu$ ?v0) (inr$ ?v0)) :pattern ((fun_app$ uu$ ?v0)))) :named a0))
(assert (! (not (= (image$ root$ (image$a ftr$ (vimage$ uu$ tns$))) (vimage$ uu$ tns$))) :named a1))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (= (member$ ?v0 (vimage$a ?v1 ?v2)) (member$ (fun_app$a ?v1 ?v0) ?v2))) :named a2))
(assert (! (forall ((?v0 N$) (?v1 N_dtree_fun$) (?v2 Dtree_set$)) (= (member$ ?v0 (vimage$b ?v1 ?v2)) (member$a (fun_app$b ?v1 ?v0) ?v2))) :named a3))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_N_fun$) (?v2 N_set$)) (= (member$b ?v0 (vimage$c ?v1 ?v2)) (member$ (fun_app$c ?v1 ?v0) ?v2))) :named a4))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_T_N_sum_fun$) (?v2 T_N_sum_set$)) (= (member$b ?v0 (vimage$d ?v1 ?v2)) (member$b (fun_app$d ?v1 ?v0) ?v2))) :named a5))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_dtree_fun$) (?v2 Dtree_set$)) (= (member$b ?v0 (vimage$e ?v1 ?v2)) (member$a (fun_app$e ?v1 ?v0) ?v2))) :named a6))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_N_fun$) (?v2 N_set$)) (= (member$a ?v0 (vimage$f ?v1 ?v2)) (member$ (fun_app$f ?v1 ?v0) ?v2))) :named a7))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_T_N_sum_fun$) (?v2 T_N_sum_set$)) (= (member$a ?v0 (vimage$g ?v1 ?v2)) (member$b (fun_app$g ?v1 ?v0) ?v2))) :named a8))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_set$)) (= (member$a ?v0 (vimage$h ?v1 ?v2)) (member$a (fun_app$h ?v1 ?v0) ?v2))) :named a9))
(assert (! (forall ((?v0 N$) (?v1 N_T_N_sum_fun$) (?v2 T_N_sum_set$)) (= (member$ ?v0 (vimage$ ?v1 ?v2)) (member$b (fun_app$ ?v1 ?v0) ?v2))) :named a10))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$a ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$ ?v1 (vimage$a ?v0 ?v3)))) :named a11))
(assert (! (forall ((?v0 T_N_sum_N_fun$) (?v1 T_N_sum$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$c ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$b ?v1 (vimage$c ?v0 ?v3)))) :named a12))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$f ?v0 ?v1) ?v2) (member$ ?v2 ?v3)) (member$a ?v1 (vimage$f ?v0 ?v3)))) :named a13))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$) (?v1 T_N_sum$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= (fun_app$d ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$b ?v1 (vimage$d ?v0 ?v3)))) :named a14))
(assert (! (forall ((?v0 Dtree_T_N_sum_fun$) (?v1 Dtree$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= (fun_app$g ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$a ?v1 (vimage$g ?v0 ?v3)))) :named a15))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= (fun_app$b ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$ ?v1 (vimage$b ?v0 ?v3)))) :named a16))
(assert (! (forall ((?v0 T_N_sum_dtree_fun$) (?v1 T_N_sum$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= (fun_app$e ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$b ?v1 (vimage$e ?v0 ?v3)))) :named a17))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= (fun_app$h ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$a ?v1 (vimage$h ?v0 ?v3)))) :named a18))
(assert (! (forall ((?v0 N_T_N_sum_fun$) (?v1 N$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= (fun_app$ ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$ ?v1 (vimage$ ?v0 ?v3)))) :named a19))
(assert (! (forall ((?v0 N$) (?v1 N$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a20))
(assert (! (forall ((?v0 N$) (?v1 N$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a21))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$a ?v1 ?v2)) (member$ ?v2 ?v3)) (member$ ?v0 (image$b ?v1 ?v3)))) :named a22))
(assert (! (forall ((?v0 T_N_sum$) (?v1 N_T_N_sum_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$ ?v1 ?v2)) (member$ ?v2 ?v3)) (member$b ?v0 (image$c ?v1 ?v3)))) :named a23))
(assert (! (forall ((?v0 N$) (?v1 T_N_sum_N_fun$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v2)) (member$b ?v2 ?v3)) (member$ ?v0 (image$d ?v1 ?v3)))) :named a24))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_T_N_sum_fun$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= ?v0 (fun_app$d ?v1 ?v2)) (member$b ?v2 ?v3)) (member$b ?v0 (image$e ?v1 ?v3)))) :named a25))
(assert (! (forall ((?v0 Dtree$) (?v1 T_N_sum_dtree_fun$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= ?v0 (fun_app$e ?v1 ?v2)) (member$b ?v2 ?v3)) (member$a ?v0 (image$f ?v1 ?v3)))) :named a26))
(assert (! (forall ((?v0 T_N_sum$) (?v1 Dtree_T_N_sum_fun$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= ?v0 (fun_app$g ?v1 ?v2)) (member$a ?v2 ?v3)) (member$b ?v0 (image$g ?v1 ?v3)))) :named a27))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= ?v0 (fun_app$h ?v1 ?v2)) (member$a ?v2 ?v3)) (member$a ?v0 (image$h ?v1 ?v3)))) :named a28))
(assert (! (forall ((?v0 N$) (?v1 Dtree_N_fun$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= ?v0 (fun_app$f ?v1 ?v2)) (member$a ?v2 ?v3)) (member$ ?v0 (image$ ?v1 ?v3)))) :named a29))
(assert (! (forall ((?v0 Dtree$) (?v1 N_dtree_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$b ?v1 ?v2)) (member$ ?v2 ?v3)) (member$a ?v0 (image$a ?v1 ?v3)))) :named a30))
(assert (! (forall ((?v0 Dtree$)) (! (= (hsubst_r$ ?v0) (fun_app$f root$ ?v0)) :pattern ((hsubst_r$ ?v0)))) :named a31))
(assert (! (forall ((?v0 Dtree$)) (= (fun_app$f root$ (rcut$ ?v0)) (fun_app$f root$ ?v0))) :named a32))
(assert (! (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_bool_fun$)) (=> (forall ((?v3 Dtree$)) (= (fun_app$i ?v0 (fun_app$h ?v1 ?v3)) (fun_app$i ?v2 ?v3))) (= (vimage$h ?v1 (collect$ ?v0)) (collect$ ?v2)))) :named a33))
(assert (! (forall ((?v0 Dtree_bool_fun$) (?v1 N_dtree_fun$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (= (fun_app$i ?v0 (fun_app$b ?v1 ?v3)) (fun_app$j ?v2 ?v3))) (= (vimage$b ?v1 (collect$ ?v0)) (collect$a ?v2)))) :named a34))
(assert (! (forall ((?v0 T_N_sum_bool_fun$) (?v1 Dtree_T_N_sum_fun$) (?v2 Dtree_bool_fun$)) (=> (forall ((?v3 Dtree$)) (= (fun_app$k ?v0 (fun_app$g ?v1 ?v3)) (fun_app$i ?v2 ?v3))) (= (vimage$g ?v1 (collect$b ?v0)) (collect$ ?v2)))) :named a35))
(assert (! (forall ((?v0 N_bool_fun$) (?v1 Dtree_N_fun$) (?v2 Dtree_bool_fun$)) (=> (forall ((?v3 Dtree$)) (= (fun_app$j ?v0 (fun_app$f ?v1 ?v3)) (fun_app$i ?v2 ?v3))) (= (vimage$f ?v1 (collect$a ?v0)) (collect$ ?v2)))) :named a36))
(assert (! (forall ((?v0 T_N_sum_bool_fun$) (?v1 T_N_sum_T_N_sum_fun$) (?v2 T_N_sum_bool_fun$)) (=> (forall ((?v3 T_N_sum$)) (= (fun_app$k ?v0 (fun_app$d ?v1 ?v3)) (fun_app$k ?v2 ?v3))) (= (vimage$d ?v1 (collect$b ?v0)) (collect$b ?v2)))) :named a37))
(assert (! (forall ((?v0 N_bool_fun$) (?v1 T_N_sum_N_fun$) (?v2 T_N_sum_bool_fun$)) (=> (forall ((?v3 T_N_sum$)) (= (fun_app$j ?v0 (fun_app$c ?v1 ?v3)) (fun_app$k ?v2 ?v3))) (= (vimage$c ?v1 (collect$a ?v0)) (collect$b ?v2)))) :named a38))
(assert (! (forall ((?v0 N_bool_fun$) (?v1 N_N_fun$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (= (fun_app$j ?v0 (fun_app$a ?v1 ?v3)) (fun_app$j ?v2 ?v3))) (= (vimage$a ?v1 (collect$a ?v0)) (collect$a ?v2)))) :named a39))
(assert (! (forall ((?v0 T_N_sum_bool_fun$) (?v1 N_T_N_sum_fun$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (= (fun_app$k ?v0 (fun_app$ ?v1 ?v3)) (fun_app$j ?v2 ?v3))) (= (vimage$ ?v1 (collect$b ?v0)) (collect$a ?v2)))) :named a40))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (=> (and (member$ ?v0 (vimage$a ?v1 ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$a ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a41))
(assert (! (forall ((?v0 N$) (?v1 N_dtree_fun$) (?v2 Dtree_set$)) (=> (and (member$ ?v0 (vimage$b ?v1 ?v2)) (forall ((?v3 Dtree$)) (=> (and (= (fun_app$b ?v1 ?v0) ?v3) (member$a ?v3 ?v2)) false))) false)) :named a42))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_N_fun$) (?v2 N_set$)) (=> (and (member$b ?v0 (vimage$c ?v1 ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$c ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a43))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_T_N_sum_fun$) (?v2 T_N_sum_set$)) (=> (and (member$b ?v0 (vimage$d ?v1 ?v2)) (forall ((?v3 T_N_sum$)) (=> (and (= (fun_app$d ?v1 ?v0) ?v3) (member$b ?v3 ?v2)) false))) false)) :named a44))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_dtree_fun$) (?v2 Dtree_set$)) (=> (and (member$b ?v0 (vimage$e ?v1 ?v2)) (forall ((?v3 Dtree$)) (=> (and (= (fun_app$e ?v1 ?v0) ?v3) (member$a ?v3 ?v2)) false))) false)) :named a45))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_N_fun$) (?v2 N_set$)) (=> (and (member$a ?v0 (vimage$f ?v1 ?v2)) (forall ((?v3 N$)) (=> (and (= (fun_app$f ?v1 ?v0) ?v3) (member$ ?v3 ?v2)) false))) false)) :named a46))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_T_N_sum_fun$) (?v2 T_N_sum_set$)) (=> (and (member$a ?v0 (vimage$g ?v1 ?v2)) (forall ((?v3 T_N_sum$)) (=> (and (= (fun_app$g ?v1 ?v0) ?v3) (member$b ?v3 ?v2)) false))) false)) :named a47))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_set$)) (=> (and (member$a ?v0 (vimage$h ?v1 ?v2)) (forall ((?v3 Dtree$)) (=> (and (= (fun_app$h ?v1 ?v0) ?v3) (member$a ?v3 ?v2)) false))) false)) :named a48))
(assert (! (forall ((?v0 N$) (?v1 N_T_N_sum_fun$) (?v2 T_N_sum_set$)) (=> (and (member$ ?v0 (vimage$ ?v1 ?v2)) (forall ((?v3 T_N_sum$)) (=> (and (= (fun_app$ ?v1 ?v0) ?v3) (member$b ?v3 ?v2)) false))) false)) :named a49))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (=> (member$ ?v0 (vimage$a ?v1 ?v2)) (member$ (fun_app$a ?v1 ?v0) ?v2))) :named a50))
(assert (! (forall ((?v0 N$) (?v1 N_dtree_fun$) (?v2 Dtree_set$)) (=> (member$ ?v0 (vimage$b ?v1 ?v2)) (member$a (fun_app$b ?v1 ?v0) ?v2))) :named a51))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_N_fun$) (?v2 N_set$)) (=> (member$b ?v0 (vimage$c ?v1 ?v2)) (member$ (fun_app$c ?v1 ?v0) ?v2))) :named a52))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_T_N_sum_fun$) (?v2 T_N_sum_set$)) (=> (member$b ?v0 (vimage$d ?v1 ?v2)) (member$b (fun_app$d ?v1 ?v0) ?v2))) :named a53))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_dtree_fun$) (?v2 Dtree_set$)) (=> (member$b ?v0 (vimage$e ?v1 ?v2)) (member$a (fun_app$e ?v1 ?v0) ?v2))) :named a54))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_N_fun$) (?v2 N_set$)) (=> (member$a ?v0 (vimage$f ?v1 ?v2)) (member$ (fun_app$f ?v1 ?v0) ?v2))) :named a55))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_T_N_sum_fun$) (?v2 T_N_sum_set$)) (=> (member$a ?v0 (vimage$g ?v1 ?v2)) (member$b (fun_app$g ?v1 ?v0) ?v2))) :named a56))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_set$)) (=> (member$a ?v0 (vimage$h ?v1 ?v2)) (member$a (fun_app$h ?v1 ?v0) ?v2))) :named a57))
(assert (! (forall ((?v0 N$) (?v1 N_T_N_sum_fun$) (?v2 T_N_sum_set$)) (=> (member$ ?v0 (vimage$ ?v1 ?v2)) (member$b (fun_app$ ?v1 ?v0) ?v2))) :named a58))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N$) (?v2 N_set$)) (=> (member$ (fun_app$a ?v0 ?v1) ?v2) (member$ ?v1 (vimage$a ?v0 ?v2)))) :named a59))
(assert (! (forall ((?v0 T_N_sum_N_fun$) (?v1 T_N_sum$) (?v2 N_set$)) (=> (member$ (fun_app$c ?v0 ?v1) ?v2) (member$b ?v1 (vimage$c ?v0 ?v2)))) :named a60))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree$) (?v2 N_set$)) (=> (member$ (fun_app$f ?v0 ?v1) ?v2) (member$a ?v1 (vimage$f ?v0 ?v2)))) :named a61))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$) (?v1 T_N_sum$) (?v2 T_N_sum_set$)) (=> (member$b (fun_app$d ?v0 ?v1) ?v2) (member$b ?v1 (vimage$d ?v0 ?v2)))) :named a62))
(assert (! (forall ((?v0 Dtree_T_N_sum_fun$) (?v1 Dtree$) (?v2 T_N_sum_set$)) (=> (member$b (fun_app$g ?v0 ?v1) ?v2) (member$a ?v1 (vimage$g ?v0 ?v2)))) :named a63))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N$) (?v2 Dtree_set$)) (=> (member$a (fun_app$b ?v0 ?v1) ?v2) (member$ ?v1 (vimage$b ?v0 ?v2)))) :named a64))
(assert (! (forall ((?v0 T_N_sum_dtree_fun$) (?v1 T_N_sum$) (?v2 Dtree_set$)) (=> (member$a (fun_app$e ?v0 ?v1) ?v2) (member$b ?v1 (vimage$e ?v0 ?v2)))) :named a65))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree$) (?v2 Dtree_set$)) (=> (member$a (fun_app$h ?v0 ?v1) ?v2) (member$a ?v1 (vimage$h ?v0 ?v2)))) :named a66))
(assert (! (forall ((?v0 N_T_N_sum_fun$) (?v1 N$) (?v2 T_N_sum_set$)) (=> (member$b (fun_app$ ?v0 ?v1) ?v2) (member$ ?v1 (vimage$ ?v0 ?v2)))) :named a67))
(assert (! (forall ((?v0 N$) (?v1 N$)) (=> (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a68))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N_N_fun$)) (=> (member$ ?v0 ?v1) (member$ (fun_app$a ?v2 ?v0) (image$b ?v2 ?v1)))) :named a69))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N_T_N_sum_fun$)) (=> (member$ ?v0 ?v1) (member$b (fun_app$ ?v2 ?v0) (image$c ?v2 ?v1)))) :named a70))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$) (?v2 T_N_sum_N_fun$)) (=> (member$b ?v0 ?v1) (member$ (fun_app$c ?v2 ?v0) (image$d ?v2 ?v1)))) :named a71))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$) (?v2 T_N_sum_T_N_sum_fun$)) (=> (member$b ?v0 ?v1) (member$b (fun_app$d ?v2 ?v0) (image$e ?v2 ?v1)))) :named a72))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$) (?v2 T_N_sum_dtree_fun$)) (=> (member$b ?v0 ?v1) (member$a (fun_app$e ?v2 ?v0) (image$f ?v2 ?v1)))) :named a73))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_set$) (?v2 Dtree_T_N_sum_fun$)) (=> (member$a ?v0 ?v1) (member$b (fun_app$g ?v2 ?v0) (image$g ?v2 ?v1)))) :named a74))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_set$) (?v2 Dtree_dtree_fun$)) (=> (member$a ?v0 ?v1) (member$a (fun_app$h ?v2 ?v0) (image$h ?v2 ?v1)))) :named a75))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_set$) (?v2 Dtree_N_fun$)) (=> (member$a ?v0 ?v1) (member$ (fun_app$f ?v2 ?v0) (image$ ?v2 ?v1)))) :named a76))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N_dtree_fun$)) (=> (member$ ?v0 ?v1) (member$a (fun_app$b ?v2 ?v0) (image$a ?v2 ?v1)))) :named a77))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 N$) (?v3 N_N_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$a ?v3 ?v0))) (member$ ?v2 (image$b ?v3 ?v1)))) :named a78))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 T_N_sum$) (?v3 N_T_N_sum_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$ ?v3 ?v0))) (member$b ?v2 (image$c ?v3 ?v1)))) :named a79))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$) (?v2 N$) (?v3 T_N_sum_N_fun$)) (=> (and (member$b ?v0 ?v1) (= ?v2 (fun_app$c ?v3 ?v0))) (member$ ?v2 (image$d ?v3 ?v1)))) :named a80))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$) (?v2 T_N_sum$) (?v3 T_N_sum_T_N_sum_fun$)) (=> (and (member$b ?v0 ?v1) (= ?v2 (fun_app$d ?v3 ?v0))) (member$b ?v2 (image$e ?v3 ?v1)))) :named a81))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_set$) (?v2 Dtree$) (?v3 T_N_sum_dtree_fun$)) (=> (and (member$b ?v0 ?v1) (= ?v2 (fun_app$e ?v3 ?v0))) (member$a ?v2 (image$f ?v3 ?v1)))) :named a82))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_set$) (?v2 T_N_sum$) (?v3 Dtree_T_N_sum_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$g ?v3 ?v0))) (member$b ?v2 (image$g ?v3 ?v1)))) :named a83))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_set$) (?v2 Dtree$) (?v3 Dtree_dtree_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$h ?v3 ?v0))) (member$a ?v2 (image$h ?v3 ?v1)))) :named a84))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_set$) (?v2 N$) (?v3 Dtree_N_fun$)) (=> (and (member$a ?v0 ?v1) (= ?v2 (fun_app$f ?v3 ?v0))) (member$ ?v2 (image$ ?v3 ?v1)))) :named a85))
(assert (! (forall ((?v0 N$) (?v1 N_set$) (?v2 Dtree$) (?v3 N_dtree_fun$)) (=> (and (member$ ?v0 ?v1) (= ?v2 (fun_app$b ?v3 ?v0))) (member$a ?v2 (image$a ?v3 ?v1)))) :named a86))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N_set$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (=> (member$ ?v3 (image$b ?v0 ?v1)) (fun_app$j ?v2 ?v3))) (forall ((?v3 N$)) (=> (member$ ?v3 ?v1) (fun_app$j ?v2 (fun_app$a ?v0 ?v3)))))) :named a87))
(assert (! (forall ((?v0 T_N_sum_N_fun$) (?v1 T_N_sum_set$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (=> (member$ ?v3 (image$d ?v0 ?v1)) (fun_app$j ?v2 ?v3))) (forall ((?v3 T_N_sum$)) (=> (member$b ?v3 ?v1) (fun_app$j ?v2 (fun_app$c ?v0 ?v3)))))) :named a88))
(assert (! (forall ((?v0 N_T_N_sum_fun$) (?v1 N_set$) (?v2 T_N_sum_bool_fun$)) (=> (forall ((?v3 T_N_sum$)) (=> (member$b ?v3 (image$c ?v0 ?v1)) (fun_app$k ?v2 ?v3))) (forall ((?v3 N$)) (=> (member$ ?v3 ?v1) (fun_app$k ?v2 (fun_app$ ?v0 ?v3)))))) :named a89))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$) (?v1 T_N_sum_set$) (?v2 T_N_sum_bool_fun$)) (=> (forall ((?v3 T_N_sum$)) (=> (member$b ?v3 (image$e ?v0 ?v1)) (fun_app$k ?v2 ?v3))) (forall ((?v3 T_N_sum$)) (=> (member$b ?v3 ?v1) (fun_app$k ?v2 (fun_app$d ?v0 ?v3)))))) :named a90))
(assert (! (forall ((?v0 Dtree_T_N_sum_fun$) (?v1 Dtree_set$) (?v2 T_N_sum_bool_fun$)) (=> (forall ((?v3 T_N_sum$)) (=> (member$b ?v3 (image$g ?v0 ?v1)) (fun_app$k ?v2 ?v3))) (forall ((?v3 Dtree$)) (=> (member$a ?v3 ?v1) (fun_app$k ?v2 (fun_app$g ?v0 ?v3)))))) :named a91))
(assert (! (forall ((?v0 T_N_sum_dtree_fun$) (?v1 T_N_sum_set$) (?v2 Dtree_bool_fun$)) (=> (forall ((?v3 Dtree$)) (=> (member$a ?v3 (image$f ?v0 ?v1)) (fun_app$i ?v2 ?v3))) (forall ((?v3 T_N_sum$)) (=> (member$b ?v3 ?v1) (fun_app$i ?v2 (fun_app$e ?v0 ?v3)))))) :named a92))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_set$) (?v2 Dtree_bool_fun$)) (=> (forall ((?v3 Dtree$)) (=> (member$a ?v3 (image$h ?v0 ?v1)) (fun_app$i ?v2 ?v3))) (forall ((?v3 Dtree$)) (=> (member$a ?v3 ?v1) (fun_app$i ?v2 (fun_app$h ?v0 ?v3)))))) :named a93))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_set$) (?v2 N_bool_fun$)) (=> (forall ((?v3 N$)) (=> (member$ ?v3 (image$ ?v0 ?v1)) (fun_app$j ?v2 ?v3))) (forall ((?v3 Dtree$)) (=> (member$a ?v3 ?v1) (fun_app$j ?v2 (fun_app$f ?v0 ?v3)))))) :named a94))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_set$) (?v2 Dtree_bool_fun$)) (=> (forall ((?v3 Dtree$)) (=> (member$a ?v3 (image$a ?v0 ?v1)) (fun_app$i ?v2 ?v3))) (forall ((?v3 N$)) (=> (member$ ?v3 ?v1) (fun_app$i ?v2 (fun_app$b ?v0 ?v3)))))) :named a95))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N_set$) (?v2 N_bool_fun$)) (=> (exists ((?v3 N$)) (and (member$ ?v3 (image$b ?v0 ?v1)) (fun_app$j ?v2 ?v3))) (exists ((?v3 N$)) (and (member$ ?v3 ?v1) (fun_app$j ?v2 (fun_app$a ?v0 ?v3)))))) :named a96))
(assert (! (forall ((?v0 T_N_sum_N_fun$) (?v1 T_N_sum_set$) (?v2 N_bool_fun$)) (=> (exists ((?v3 N$)) (and (member$ ?v3 (image$d ?v0 ?v1)) (fun_app$j ?v2 ?v3))) (exists ((?v3 T_N_sum$)) (and (member$b ?v3 ?v1) (fun_app$j ?v2 (fun_app$c ?v0 ?v3)))))) :named a97))
(assert (! (forall ((?v0 N_T_N_sum_fun$) (?v1 N_set$) (?v2 T_N_sum_bool_fun$)) (=> (exists ((?v3 T_N_sum$)) (and (member$b ?v3 (image$c ?v0 ?v1)) (fun_app$k ?v2 ?v3))) (exists ((?v3 N$)) (and (member$ ?v3 ?v1) (fun_app$k ?v2 (fun_app$ ?v0 ?v3)))))) :named a98))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$) (?v1 T_N_sum_set$) (?v2 T_N_sum_bool_fun$)) (=> (exists ((?v3 T_N_sum$)) (and (member$b ?v3 (image$e ?v0 ?v1)) (fun_app$k ?v2 ?v3))) (exists ((?v3 T_N_sum$)) (and (member$b ?v3 ?v1) (fun_app$k ?v2 (fun_app$d ?v0 ?v3)))))) :named a99))
(assert (! (forall ((?v0 Dtree_T_N_sum_fun$) (?v1 Dtree_set$) (?v2 T_N_sum_bool_fun$)) (=> (exists ((?v3 T_N_sum$)) (and (member$b ?v3 (image$g ?v0 ?v1)) (fun_app$k ?v2 ?v3))) (exists ((?v3 Dtree$)) (and (member$a ?v3 ?v1) (fun_app$k ?v2 (fun_app$g ?v0 ?v3)))))) :named a100))
(assert (! (forall ((?v0 T_N_sum_dtree_fun$) (?v1 T_N_sum_set$) (?v2 Dtree_bool_fun$)) (=> (exists ((?v3 Dtree$)) (and (member$a ?v3 (image$f ?v0 ?v1)) (fun_app$i ?v2 ?v3))) (exists ((?v3 T_N_sum$)) (and (member$b ?v3 ?v1) (fun_app$i ?v2 (fun_app$e ?v0 ?v3)))))) :named a101))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_set$) (?v2 Dtree_bool_fun$)) (=> (exists ((?v3 Dtree$)) (and (member$a ?v3 (image$h ?v0 ?v1)) (fun_app$i ?v2 ?v3))) (exists ((?v3 Dtree$)) (and (member$a ?v3 ?v1) (fun_app$i ?v2 (fun_app$h ?v0 ?v3)))))) :named a102))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_set$) (?v2 N_bool_fun$)) (=> (exists ((?v3 N$)) (and (member$ ?v3 (image$ ?v0 ?v1)) (fun_app$j ?v2 ?v3))) (exists ((?v3 Dtree$)) (and (member$a ?v3 ?v1) (fun_app$j ?v2 (fun_app$f ?v0 ?v3)))))) :named a103))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N_set$) (?v2 Dtree_bool_fun$)) (=> (exists ((?v3 Dtree$)) (and (member$a ?v3 (image$a ?v0 ?v1)) (fun_app$i ?v2 ?v3))) (exists ((?v3 N$)) (and (member$ ?v3 ?v1) (fun_app$i ?v2 (fun_app$b ?v0 ?v3)))))) :named a104))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_T_N_sum_fun$) (?v3 N_T_N_sum_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 N$)) (=> (member$ ?v4 ?v1) (= (fun_app$ ?v2 ?v4) (fun_app$ ?v3 ?v4))))) (= (image$c ?v2 ?v0) (image$c ?v3 ?v1)))) :named a105))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_N_fun$) (?v3 N_N_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 N$)) (=> (member$ ?v4 ?v1) (= (fun_app$a ?v2 ?v4) (fun_app$a ?v3 ?v4))))) (= (image$b ?v2 ?v0) (image$b ?v3 ?v1)))) :named a106))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum_set$) (?v2 T_N_sum_N_fun$) (?v3 T_N_sum_N_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 T_N_sum$)) (=> (member$b ?v4 ?v1) (= (fun_app$c ?v2 ?v4) (fun_app$c ?v3 ?v4))))) (= (image$d ?v2 ?v0) (image$d ?v3 ?v1)))) :named a107))
(assert (! (forall ((?v0 Dtree_set$) (?v1 Dtree_set$) (?v2 Dtree_T_N_sum_fun$) (?v3 Dtree_T_N_sum_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 Dtree$)) (=> (member$a ?v4 ?v1) (= (fun_app$g ?v2 ?v4) (fun_app$g ?v3 ?v4))))) (= (image$g ?v2 ?v0) (image$g ?v3 ?v1)))) :named a108))
(assert (! (forall ((?v0 Dtree_set$) (?v1 Dtree_set$) (?v2 Dtree_dtree_fun$) (?v3 Dtree_dtree_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 Dtree$)) (=> (member$a ?v4 ?v1) (= (fun_app$h ?v2 ?v4) (fun_app$h ?v3 ?v4))))) (= (image$h ?v2 ?v0) (image$h ?v3 ?v1)))) :named a109))
(assert (! (forall ((?v0 Dtree_set$) (?v1 Dtree_set$) (?v2 Dtree_N_fun$) (?v3 Dtree_N_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 Dtree$)) (=> (member$a ?v4 ?v1) (= (fun_app$f ?v2 ?v4) (fun_app$f ?v3 ?v4))))) (= (image$ ?v2 ?v0) (image$ ?v3 ?v1)))) :named a110))
(assert (! (forall ((?v0 N_set$) (?v1 N_set$) (?v2 N_dtree_fun$) (?v3 N_dtree_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 N$)) (=> (member$ ?v4 ?v1) (= (fun_app$b ?v2 ?v4) (fun_app$b ?v3 ?v4))))) (= (image$a ?v2 ?v0) (image$a ?v3 ?v1)))) :named a111))
(check-sat)
;(get-unsat-core)
