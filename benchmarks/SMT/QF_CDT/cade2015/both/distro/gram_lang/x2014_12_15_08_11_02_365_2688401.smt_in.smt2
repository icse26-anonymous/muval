; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 30
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort Dtree_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort T_bool_fun$ 0)
(declare-sort Dtree_N_fun$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort Dtree_bool_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort Dtree_N_bool_fun_fun$ 0)
(declare-sort Dtree_T_bool_fun_fun$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort Dtree_dtree_bool_fun_fun$ 0)
(declare-sort Dtree_T_dtree_sum_set_fun$ 0)
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0)
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0)
(declare-datatypes () ((T_dtree_sum$ (inl$ (projl$ T$)) (inr$ (projr$ Dtree$)))))
(declare-fun n$ () N$)
(declare-fun na$ () N$)
(declare-fun nb$ () N$)
(declare-fun ns$ () N_set$)
(declare-fun tr$ () Dtree$)
(declare-fun uu$ (N_set$) N_bool_fun$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun nsa$ () N_set$)
(declare-fun reg$ (N_dtree_fun$) Dtree_bool_fun$)
(declare-fun top$ () N_set$)
(declare-fun tr1$ () Dtree$)
(declare-fun tr2$ () Dtree$)
(declare-fun uua$ (T_dtree_sum_set$) T_dtree_sum_bool_fun$)
(declare-fun uub$ (Dtree_set$) Dtree_bool_fun$)
(declare-fun comp$ (Dtree_N_fun$ Dtree_dtree_fun$) Dtree_N_fun$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun inFr$ () N_set_dtree_T_bool_fun_fun_fun$)
(declare-fun root$ () Dtree_N_fun$)
(declare-fun deftr$ () N_dtree_fun$)
(declare-fun image$ (N_dtree_fun$ N_set$) Dtree_set$)
(declare-fun inFr2$ () N_set_dtree_T_bool_fun_fun_fun$)
(declare-fun inItr$ (N_set$) Dtree_N_bool_fun_fun$)
(declare-fun subtr$ () N_set_dtree_dtree_bool_fun_fun_fun$)
(declare-fun hsubst$ (Dtree$) Dtree_dtree_fun$)
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun subtr2$ () N_set_dtree_dtree_bool_fun_fun_fun$)
(declare-fun unfold$ (Dtree_N_fun$ Dtree_T_dtree_sum_set_fun$) Dtree_dtree_fun$)
(declare-fun collect$ (Dtree_bool_fun$) Dtree_set$)
(declare-fun fun_app$ (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun member$a (Dtree$ Dtree_set$) Bool)
(declare-fun member$b (N$ N_set$) Bool)
(declare-fun regular$ (Dtree$) Bool)
(declare-fun collect$a (T_dtree_sum_bool_fun$) T_dtree_sum_set$)
(declare-fun collect$b (N_bool_fun$) N_set$)
(declare-fun fun_app$a (Dtree_bool_fun$ Dtree$) Bool)
(declare-fun fun_app$b (N_bool_fun$ N$) Bool)
(declare-fun fun_app$c (N_dtree_fun$ N$) Dtree$)
(declare-fun fun_app$d (Dtree_N_fun$ Dtree$) N$)
(declare-fun fun_app$e (Dtree_dtree_bool_fun_fun$ Dtree$) Dtree_bool_fun$)
(declare-fun fun_app$f (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$) Dtree_dtree_bool_fun_fun$)
(declare-fun fun_app$g (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$h (T_bool_fun$ T$) Bool)
(declare-fun fun_app$i (Dtree_T_bool_fun_fun$ Dtree$) T_bool_fun$)
(declare-fun fun_app$j (N_set_dtree_T_bool_fun_fun_fun$ N_set$) Dtree_T_bool_fun_fun$)
(declare-fun fun_app$k (Dtree_N_bool_fun_fun$ Dtree$) N_bool_fun$)
(declare-fun fun_app$l (Dtree_T_dtree_sum_set_fun$ Dtree$) T_dtree_sum_set$)
(declare-fun hsubst_c$ (Dtree$) Dtree_T_dtree_sum_set_fun$)
(declare-fun hsubst_r$ () Dtree_N_fun$)
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum$)) (! (= (fun_app$ (uua$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$ (uua$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 Dtree_set$) (?v1 Dtree$)) (! (= (fun_app$a (uub$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$a (uub$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 N_set$) (?v1 N$)) (! (= (fun_app$b (uu$ ?v0) ?v1) (member$b ?v1 ?v0)) :pattern ((fun_app$b (uu$ ?v0) ?v1)))) :named a2))
(assert (! (not (= tr1$ (fun_app$c deftr$ (fun_app$d root$ tr1$)))) :named a3))
(assert (! (= tr2$ (fun_app$c deftr$ nb$)) :named a4))
(assert (! (forall ((?v0 N$)) (=> (= tr2$ (fun_app$c deftr$ ?v0)) (= tr1$ (fun_app$c deftr$ (fun_app$d root$ tr1$))))) :named a5))
(assert (! (=> (forall ((?v0 N$)) (=> (= tr2$ (fun_app$c deftr$ ?v0)) false)) false) :named a6))
(assert (! (member$b (fun_app$d root$ (fun_app$c deftr$ na$)) nsa$) :named a7))
(assert (! (forall ((?v0 N$)) (= (fun_app$d root$ (fun_app$c deftr$ ?v0)) ?v0)) :named a8))
(assert (! (fun_app$a (fun_app$e (fun_app$f subtr$ nsa$) tr1$) tr2$) :named a9))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$d hsubst_r$ ?v0) (fun_app$d root$ ?v0)) :pattern ((fun_app$d hsubst_r$ ?v0)))) :named a10))
(assert (! (fun_app$a (fun_app$e (fun_app$f subtr$ ns$) tr$) (fun_app$c deftr$ n$)) :named a11))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (fun_app$d root$ (fun_app$g (hsubst$ ?v0) ?v1)) (fun_app$d root$ ?v1))) :named a12))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree$)) (=> (fun_app$a (reg$ ?v0) ?v1) (= (fun_app$c ?v0 (fun_app$d root$ ?v1)) ?v1))) :named a13))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$)) (=> (fun_app$h (fun_app$i (fun_app$j inFr2$ ?v0) ?v1) ?v2) (member$b (fun_app$d root$ ?v1) ?v0))) :named a14))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (fun_app$b (fun_app$k (inItr$ ?v0) ?v1) ?v2) (member$b (fun_app$d root$ ?v1) ?v0))) :named a15))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$b (fun_app$d root$ ?v0) ?v1) (fun_app$b (fun_app$k (inItr$ ?v1) ?v0) (fun_app$d root$ ?v0)))) :named a16))
(assert (! (forall ((?v0 N$)) (wf$ (fun_app$c deftr$ ?v0))) :named a17))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$a (fun_app$e (fun_app$f subtr2$ ?v0) ?v1) ?v2) (member$b (fun_app$d root$ ?v2) ?v0))) :named a18))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$a (fun_app$e (fun_app$f subtr2$ ?v0) ?v1) ?v2) (member$b (fun_app$d root$ ?v1) ?v0))) :named a19))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$b (fun_app$d root$ ?v0) ?v1) (fun_app$a (fun_app$e (fun_app$f subtr2$ ?v1) ?v0) ?v0))) :named a20))
(assert (! (= subtr$ subtr2$) :named a21))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$) (?v3 Dtree$)) (=> (and (fun_app$b (fun_app$k (inItr$ ?v0) ?v1) ?v2) (fun_app$a (fun_app$e (fun_app$f subtr$ ?v0) ?v1) ?v3)) (fun_app$b (fun_app$k (inItr$ ?v0) ?v3) ?v2))) :named a22))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (fun_app$a (fun_app$e (fun_app$f subtr$ ?v0) ?v1) ?v2) (fun_app$a (fun_app$e (fun_app$f subtr$ ?v0) ?v2) ?v3)) (fun_app$a (fun_app$e (fun_app$f subtr$ ?v0) ?v1) ?v3))) :named a23))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (fun_app$a (fun_app$e (fun_app$f subtr2$ ?v0) ?v1) ?v2) (fun_app$a (fun_app$e (fun_app$f subtr2$ ?v0) ?v2) ?v3)) (fun_app$a (fun_app$e (fun_app$f subtr2$ ?v0) ?v1) ?v3))) :named a24))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree$) (?v2 N_set$) (?v3 Dtree$)) (=> (and (fun_app$a (reg$ ?v0) ?v1) (fun_app$a (fun_app$e (fun_app$f subtr$ ?v2) ?v3) ?v1)) (fun_app$a (reg$ ?v0) ?v3))) :named a25))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (fun_app$a (fun_app$e (fun_app$f subtr$ ?v1) ?v2) ?v0)) (wf$ ?v2))) :named a26))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (wf$ ?v1)) (wf$ (fun_app$g (hsubst$ ?v0) ?v1)))) :named a27))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 N$)) (=> (fun_app$b (fun_app$k (inItr$ ?v0) ?v1) ?v2) (exists ((?v3 Dtree$)) (and (fun_app$a (fun_app$e (fun_app$f subtr$ ?v0) ?v3) ?v1) (= (fun_app$d root$ ?v3) ?v2))))) :named a28))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree$)) (= (fun_app$a (reg$ ?v0) ?v1) (forall ((?v2 N_set$) (?v3 Dtree$)) (=> (fun_app$a (fun_app$e (fun_app$f subtr$ ?v2) ?v3) ?v1) (= ?v3 (fun_app$c ?v0 (fun_app$d root$ ?v3))))))) :named a29))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$b (fun_app$d root$ ?v0) ?v1) (fun_app$a (fun_app$e (fun_app$f subtr$ ?v1) ?v0) ?v0))) :named a30))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$a (fun_app$e (fun_app$f subtr$ ?v0) ?v1) ?v2) (member$b (fun_app$d root$ ?v1) ?v0))) :named a31))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$a (fun_app$e (fun_app$f subtr$ ?v0) ?v1) ?v2) (member$b (fun_app$d root$ ?v2) ?v0))) :named a32))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (= (fun_app$d root$ ?v0) (fun_app$d root$ ?v1)) (= (fun_app$g (hsubst$ ?v1) ?v0) (fun_app$g (hsubst$ ?v1) ?v1)))) :named a33))
(assert (! (forall ((?v0 Dtree$)) (= (regular$ ?v0) (exists ((?v1 N_dtree_fun$)) (and (fun_app$a (reg$ ?v1) ?v0) (forall ((?v2 N$)) (= (fun_app$d root$ (fun_app$c ?v1 ?v2)) ?v2)))))) :named a34))
(assert (! (member$ (inr$ tr2$) (cont$ (fun_app$c deftr$ na$))) :named a35))
(assert (! (forall ((?v0 Dtree$)) (! (= (hsubst$ ?v0) (unfold$ hsubst_r$ (hsubst_c$ ?v0))) :pattern ((hsubst$ ?v0)))) :named a36))
(assert (! (forall ((?v0 Dtree$)) (= (regular$ ?v0) (exists ((?v1 N_dtree_fun$)) (fun_app$a (reg$ ?v1) ?v0)))) :named a37))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree$)) (= (fun_app$a (reg$ ?v0) ?v1) (forall ((?v2 Dtree$)) (=> (fun_app$a (fun_app$e (fun_app$f subtr$ top$) ?v2) ?v1) (= ?v2 (fun_app$c ?v0 (fun_app$d root$ ?v2))))))) :named a38))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$)) (=> (and (regular$ ?v0) (fun_app$a (fun_app$e (fun_app$f subtr$ ?v1) ?v2) ?v0)) (regular$ ?v2))) :named a39))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 T$) (?v3 Dtree$)) (=> (and (fun_app$h (fun_app$i (fun_app$j inFr$ ?v0) ?v1) ?v2) (not (member$b (fun_app$d root$ ?v3) ?v0))) (fun_app$h (fun_app$i (fun_app$j inFr$ ?v0) (fun_app$g (hsubst$ ?v3) ?v1)) ?v2))) :named a40))
(assert (! (forall ((?v0 Dtree$)) (= (comp$ root$ (hsubst$ ?v0)) root$)) :named a41))
(assert (! (member$a tr2$ (image$ deftr$ top$)) :named a42))
(assert (! (= inFr$ inFr2$) :named a43))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (and (member$ (inr$ ?v1) (cont$ ?v0)) (member$ (inr$ ?v2) (cont$ ?v0)))) (= (= (fun_app$d root$ ?v1) (fun_app$d root$ ?v2)) (= ?v1 ?v2)))) :named a44))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree_dtree_bool_fun_fun$)) (=> (and (fun_app$a (fun_app$e (fun_app$f subtr$ top$) ?v0) ?v1) (and (forall ((?v3 Dtree$)) (fun_app$a (fun_app$e ?v2 ?v3) ?v3)) (forall ((?v3 Dtree$) (?v4 Dtree$) (?v5 Dtree$)) (=> (and (member$ (inr$ ?v3) (cont$ ?v4)) (and (fun_app$a (fun_app$e (fun_app$f subtr$ top$) ?v4) ?v5) (fun_app$a (fun_app$e ?v2 ?v4) ?v5))) (fun_app$a (fun_app$e ?v2 ?v3) ?v5))))) (fun_app$a (fun_app$e ?v2 ?v0) ?v1))) :named a45))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 T$)) (=> (and (member$b (fun_app$d root$ ?v0) ?v1) (and (member$ (inr$ ?v2) (cont$ ?v0)) (fun_app$h (fun_app$i (fun_app$j inFr$ ?v1) ?v2) ?v3))) (fun_app$h (fun_app$i (fun_app$j inFr$ ?v1) ?v0) ?v3))) :named a46))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (member$ (inr$ ?v1) (cont$ ?v0))) (wf$ ?v1))) :named a47))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (fun_app$a (reg$ ?v0) ?v1) (member$ (inr$ ?v2) (cont$ ?v1))) (fun_app$a (reg$ ?v0) ?v2))) :named a48))
(assert (! (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree_bool_fun$)) (=> (forall ((?v2 Dtree$)) (= (fun_app$a ?v0 ?v2) (fun_app$a ?v1 ?v2))) (= (collect$ ?v0) (collect$ ?v1)))) :named a49))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$) (?v1 T_dtree_sum_bool_fun$)) (=> (forall ((?v2 T_dtree_sum$)) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) (= (collect$a ?v0) (collect$a ?v1)))) :named a50))
(assert (! (forall ((?v0 N_bool_fun$) (?v1 N_bool_fun$)) (=> (forall ((?v2 N$)) (= (fun_app$b ?v0 ?v2) (fun_app$b ?v1 ?v2))) (= (collect$b ?v0) (collect$b ?v1)))) :named a51))
(assert (! (forall ((?v0 N_set$)) (= (collect$b (uu$ ?v0)) ?v0)) :named a52))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (= (collect$a (uua$ ?v0)) ?v0)) :named a53))
(assert (! (forall ((?v0 Dtree_set$)) (= (collect$ (uub$ ?v0)) ?v0)) :named a54))
(assert (! (forall ((?v0 N$) (?v1 N_bool_fun$)) (= (member$b ?v0 (collect$b ?v1)) (fun_app$b ?v1 ?v0))) :named a55))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_bool_fun$)) (= (member$ ?v0 (collect$a ?v1)) (fun_app$ ?v1 ?v0))) :named a56))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_bool_fun$)) (= (member$a ?v0 (collect$ ?v1)) (fun_app$a ?v1 ?v0))) :named a57))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (! (= (fun_app$l (hsubst_c$ ?v0) ?v1) (ite (= (fun_app$d root$ ?v1) (fun_app$d root$ ?v0)) (cont$ ?v0) (cont$ ?v1))) :pattern ((fun_app$l (hsubst_c$ ?v0) ?v1)))) :named a58))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$b (fun_app$d root$ ?v0) ?v1) (and (member$ (inr$ ?v0) (cont$ ?v2)) (fun_app$a (fun_app$e (fun_app$f subtr$ ?v1) ?v2) ?v3))) (fun_app$a (fun_app$e (fun_app$f subtr$ ?v1) ?v0) ?v3))) :named a59))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$b (fun_app$d root$ ?v0) ?v1) (and (fun_app$a (fun_app$e (fun_app$f subtr$ ?v1) ?v2) ?v3) (member$ (inr$ ?v3) (cont$ ?v0)))) (fun_app$a (fun_app$e (fun_app$f subtr$ ?v1) ?v2) ?v0))) :named a60))
(check-sat)
;(get-unsat-core)
