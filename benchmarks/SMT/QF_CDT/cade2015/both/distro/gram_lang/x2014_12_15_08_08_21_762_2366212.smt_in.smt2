; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 71
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort T$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort T_set$ 0)
(declare-sort N_N_fun$ 0)
(declare-sort T_T_fun$ 0)
(declare-sort Dtree_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort Dtree_N_fun$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-sort T_N_sum_set$ 0)
(declare-sort N_T_N_sum_fun$ 0)
(declare-sort T_N_sum_N_fun$ 0)
(declare-sort Dtree_bool_fun$ 0)
(declare-sort Dtree_dtree_fun$ 0)
(declare-sort N_set_N_set_fun$ 0)
(declare-sort T_dtree_sum_set$ 0)
(declare-sort T_set_N_sum_set$ 0)
(declare-sort T_set_T_set_fun$ 0)
(declare-sort T_N_sum_bool_fun$ 0)
(declare-sort Dtree_T_N_sum_fun$ 0)
(declare-sort N_T_dtree_sum_fun$ 0)
(declare-sort N_T_set_N_sum_fun$ 0)
(declare-sort T_N_sum_dtree_fun$ 0)
(declare-sort T_T_N_sum_sum_set$ 0)
(declare-sort T_dtree_sum_N_fun$ 0)
(declare-sort T_N_sum_T_N_sum_fun$ 0)
(declare-sort T_set_dtree_sum_set$ 0)
(declare-sort T_dtree_sum_bool_fun$ 0)
(declare-sort Dtree_T_dtree_sum_fun$ 0)
(declare-sort T_T_dtree_sum_sum_set$ 0)
(declare-sort T_dtree_sum_dtree_fun$ 0)
(declare-sort N_T_N_sum_set_prod_set$ 0)
(declare-sort T_N_sum_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_T_N_sum_fun$ 0)
(declare-sort T_set_set_T_set_set_fun$ 0)
(declare-sort Dtree_dtree_bool_fun_fun$ 0)
(declare-sort Dtree_T_set_dtree_sum_fun$ 0)
(declare-sort T_N_sum_T_T_N_sum_sum_fun$ 0)
(declare-sort T_T_N_sum_sum_T_N_sum_fun$ 0)
(declare-sort N_T_N_sum_set_prod_bool_fun$ 0)
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0)
(declare-sort T_set_N_sum_T_set_N_sum_fun$ 0)
(declare-sort T_N_sum_T_T_dtree_sum_sum_fun$ 0)
(declare-sort T_T_N_sum_sum_T_dtree_sum_fun$ 0)
(declare-sort T_T_dtree_sum_sum_T_N_sum_fun$ 0)
(declare-sort T_set_N_sum_T_set_dtree_sum_fun$ 0)
(declare-sort T_T_dtree_sum_sum_T_dtree_sum_fun$ 0)
(declare-sort T_dtree_sum_T_T_dtree_sum_sum_fun$ 0)
(declare-sort T_T_N_sum_sum_T_T_dtree_sum_sum_fun$ 0)
(declare-sort T_T_dtree_sum_sum_T_T_N_sum_sum_fun$ 0)
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0)
(declare-sort N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ 0)
(declare-datatypes () ((N_T_N_sum_set_prod$ (pair$ (fst$ N$) (snd$ T_N_sum_set$)))
  (T_N_sum$ (inl$ (projl$ T$)) (inr$ (projr$ N$)))
  (T_dtree_sum$ (inl$a (projl$a T$)) (inr$a (projr$a Dtree$)))
  (T_T_N_sum_sum$ (inl$b (projl$b T$)) (inr$b (projr$b T_N_sum$)))
  (T_T_dtree_sum_sum$ (inl$c (projl$c T$)) (inr$c (projr$c T_dtree_sum$)))
  (T_set_dtree_sum$ (inl$d (projl$d T_set$)) (inr$d (projr$d Dtree$)))
  (T_set_N_sum$ (inl$e (projl$e T_set$)) (inr$e (projr$e N$)))))
(declare-fun p$ () N_T_N_sum_set_prod_set$)
(declare-fun s$ (N$) T_N_sum_set$)
(declare-fun id$ () T_T_fun$)
(declare-fun tr$ () Dtree$)
(declare-fun uu$ () Dtree_T_dtree_sum_fun$)
(declare-fun wf$ (Dtree$) Bool)
(declare-fun id$a () T_set_T_set_fun$)
(declare-fun id$b () T_set_set_T_set_set_fun$)
(declare-fun id$c () N_N_fun$)
(declare-fun id$d () N_set_N_set_fun$)
(declare-fun tra$ () Dtree$)
(declare-fun uua$ () N_T_N_sum_fun$)
(declare-fun uub$ () T_N_sum_T_T_N_sum_sum_fun$)
(declare-fun uuc$ () T_dtree_sum_T_T_dtree_sum_sum_fun$)
(declare-fun uud$ () Dtree_T_set_dtree_sum_fun$)
(declare-fun uue$ () N_T_set_N_sum_fun$)
(declare-fun uuf$ (N_T_N_sum_set_prod_set$) N_T_N_sum_set_prod_bool_fun$)
(declare-fun uug$ (Dtree_set$) Dtree_bool_fun$)
(declare-fun uuh$ (T_dtree_sum_set$) T_dtree_sum_bool_fun$)
(declare-fun uui$ (T_N_sum_set$) T_N_sum_bool_fun$)
(declare-fun uuj$ (N_set$) N_bool_fun$)
(declare-fun cont$ (Dtree$) T_dtree_sum_set$)
(declare-fun root$ () Dtree_N_fun$)
(declare-fun deftr$ () N_dtree_fun$)
(declare-fun image$ (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$) T_N_sum_set$)
(declare-fun subtr$ (N_set$) Dtree_dtree_bool_fun_fun$)
(declare-fun image$a (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$) T_dtree_sum_set$)
(declare-fun image$b (Dtree_dtree_fun$ Dtree_set$) Dtree_set$)
(declare-fun image$c (T_N_sum_T_N_sum_fun$ T_N_sum_set$) T_N_sum_set$)
(declare-fun image$d (N_N_fun$) N_set_N_set_fun$)
(declare-fun image$e (Dtree_N_fun$ Dtree_set$) N_set$)
(declare-fun image$f (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$) T_dtree_sum_set$)
(declare-fun image$g (N_dtree_fun$ N_set$) Dtree_set$)
(declare-fun image$h (T_T_dtree_sum_sum_T_T_N_sum_sum_fun$ T_T_dtree_sum_sum_set$) T_T_N_sum_sum_set$)
(declare-fun image$i (T_T_N_sum_sum_T_T_dtree_sum_sum_fun$ T_T_N_sum_sum_set$) T_T_dtree_sum_sum_set$)
(declare-fun image$j (T_set_N_sum_T_set_dtree_sum_fun$ T_set_N_sum_set$) T_set_dtree_sum_set$)
(declare-fun image$k (T_set_N_sum_T_set_N_sum_fun$ T_set_N_sum_set$) T_set_N_sum_set$)
(declare-fun image$l (T_T_dtree_sum_sum_T_dtree_sum_fun$ T_T_dtree_sum_sum_set$) T_dtree_sum_set$)
(declare-fun image$m (T_dtree_sum_dtree_fun$ T_dtree_sum_set$) Dtree_set$)
(declare-fun image$n (T_T_N_sum_sum_T_dtree_sum_fun$ T_T_N_sum_sum_set$) T_dtree_sum_set$)
(declare-fun image$o (T_N_sum_dtree_fun$ T_N_sum_set$) Dtree_set$)
(declare-fun image$p (T_T_dtree_sum_sum_T_N_sum_fun$ T_T_dtree_sum_sum_set$) T_N_sum_set$)
(declare-fun image$q (T_T_N_sum_sum_T_N_sum_fun$ T_T_N_sum_sum_set$) T_N_sum_set$)
(declare-fun image$r (T_dtree_sum_T_T_dtree_sum_sum_fun$ T_dtree_sum_set$) T_T_dtree_sum_sum_set$)
(declare-fun image$s (T_N_sum_T_T_dtree_sum_sum_fun$ T_N_sum_set$) T_T_dtree_sum_sum_set$)
(declare-fun image$t (T_set_T_set_fun$) T_set_set_T_set_set_fun$)
(declare-fun image$u (T_T_fun$) T_set_T_set_fun$)
(declare-fun image$v (Dtree_T_dtree_sum_fun$ Dtree_set$) T_dtree_sum_set$)
(declare-fun image$w (Dtree_T_N_sum_fun$ Dtree_set$) T_N_sum_set$)
(declare-fun image$x (T_dtree_sum_N_fun$ T_dtree_sum_set$) N_set$)
(declare-fun image$y (T_N_sum_N_fun$ T_N_sum_set$) N_set$)
(declare-fun inj_on$ (Dtree_N_fun$ Dtree_set$) Bool)
(declare-fun member$ (N_T_N_sum_set_prod$ N_T_N_sum_set_prod_set$) Bool)
(declare-fun vimage$ (Dtree_T_dtree_sum_fun$ T_dtree_sum_set$) Dtree_set$)
(declare-fun collect$ (N_T_N_sum_set_prod_bool_fun$) N_T_N_sum_set_prod_set$)
(declare-fun fun_app$ (T_dtree_sum_T_T_dtree_sum_sum_fun$ T_dtree_sum$) T_T_dtree_sum_sum$)
(declare-fun inj_on$a (T_T_fun$ T_set$) Bool)
(declare-fun inj_on$b (Dtree_dtree_fun$ Dtree_set$) Bool)
(declare-fun inj_on$c (Dtree_T_dtree_sum_fun$ Dtree_set$) Bool)
(declare-fun inj_on$d (N_T_N_sum_fun$ N_set$) Bool)
(declare-fun map_sum$ (T_T_fun$) Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$)
(declare-fun member$a (T_dtree_sum$ T_dtree_sum_set$) Bool)
(declare-fun member$b (T_N_sum$ T_N_sum_set$) Bool)
(declare-fun member$c (Dtree$ Dtree_set$) Bool)
(declare-fun member$d (N$ N_set$) Bool)
(declare-fun member$e (T_T_dtree_sum_sum$ T_T_dtree_sum_sum_set$) Bool)
(declare-fun member$f (T_T_N_sum_sum$ T_T_N_sum_sum_set$) Bool)
(declare-fun member$g (T$ T_set$) Bool)
(declare-fun subtrOf$ (Dtree$) N_dtree_fun$)
(declare-fun vimage$a (N_T_N_sum_fun$ T_N_sum_set$) N_set$)
(declare-fun vimage$b (T_N_sum_T_T_N_sum_sum_fun$ T_T_N_sum_sum_set$) T_N_sum_set$)
(declare-fun vimage$c (T_dtree_sum_T_T_dtree_sum_sum_fun$ T_T_dtree_sum_sum_set$) T_dtree_sum_set$)
(declare-fun vimage$d (Dtree_T_set_dtree_sum_fun$ T_set_dtree_sum_set$) Dtree_set$)
(declare-fun vimage$e (N_T_set_N_sum_fun$ T_set_N_sum_set$) N_set$)
(declare-fun vimage$f (T_set_T_set_fun$) T_set_set_T_set_set_fun$)
(declare-fun vimage$g (N_N_fun$) N_set_N_set_fun$)
(declare-fun vimage$h (T_T_fun$) T_set_T_set_fun$)
(declare-fun vimage$i (Dtree_dtree_fun$ Dtree_set$) Dtree_set$)
(declare-fun vimage$j (N_dtree_fun$ Dtree_set$) N_set$)
(declare-fun vimage$k (Dtree_N_fun$ N_set$) Dtree_set$)
(declare-fun vimage$l (T_dtree_sum_dtree_fun$ Dtree_set$) T_dtree_sum_set$)
(declare-fun vimage$m (T_N_sum_dtree_fun$ Dtree_set$) T_N_sum_set$)
(declare-fun vimage$n (N_T_dtree_sum_fun$ T_dtree_sum_set$) N_set$)
(declare-fun vimage$o (Dtree_T_N_sum_fun$ T_N_sum_set$) Dtree_set$)
(declare-fun vimage$p (T_dtree_sum_N_fun$ N_set$) T_dtree_sum_set$)
(declare-fun vimage$q (T_N_sum_N_fun$ N_set$) T_N_sum_set$)
(declare-fun collect$a (Dtree_bool_fun$) Dtree_set$)
(declare-fun collect$b (T_dtree_sum_bool_fun$) T_dtree_sum_set$)
(declare-fun collect$c (T_N_sum_bool_fun$) T_N_sum_set$)
(declare-fun collect$d (N_bool_fun$) N_set$)
(declare-fun fun_app$a (T_N_sum_T_T_N_sum_sum_fun$ T_N_sum$) T_T_N_sum_sum$)
(declare-fun fun_app$b (Dtree_T_set_dtree_sum_fun$ Dtree$) T_set_dtree_sum$)
(declare-fun fun_app$c (Dtree_T_dtree_sum_fun$ Dtree$) T_dtree_sum$)
(declare-fun fun_app$d (N_T_set_N_sum_fun$ N$) T_set_N_sum$)
(declare-fun fun_app$e (N_T_N_sum_fun$ N$) T_N_sum$)
(declare-fun fun_app$f (N_T_N_sum_set_prod_bool_fun$ N_T_N_sum_set_prod$) Bool)
(declare-fun fun_app$g (T_dtree_sum_bool_fun$ T_dtree_sum$) Bool)
(declare-fun fun_app$h (T_N_sum_bool_fun$ T_N_sum$) Bool)
(declare-fun fun_app$i (Dtree_bool_fun$ Dtree$) Bool)
(declare-fun fun_app$j (N_bool_fun$ N$) Bool)
(declare-fun fun_app$k (Dtree_N_fun$ Dtree$) N$)
(declare-fun fun_app$l (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$) T_dtree_sum_T_N_sum_fun$)
(declare-fun fun_app$m (N_dtree_fun$ N$) Dtree$)
(declare-fun fun_app$n (N_set_N_set_fun$ N_set$) N_set$)
(declare-fun fun_app$o (N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ N_dtree_fun$) T_N_sum_T_dtree_sum_fun$)
(declare-fun fun_app$p (Dtree_dtree_fun$ Dtree$) Dtree$)
(declare-fun fun_app$q (N_N_fun$ N$) N$)
(declare-fun fun_app$r (T_dtree_sum_dtree_fun$ T_dtree_sum$) Dtree$)
(declare-fun fun_app$s (T_N_sum_dtree_fun$ T_N_sum$) Dtree$)
(declare-fun fun_app$t (T_dtree_sum_N_fun$ T_dtree_sum$) N$)
(declare-fun fun_app$u (T_N_sum_N_fun$ T_N_sum$) N$)
(declare-fun fun_app$v (N_T_dtree_sum_fun$ N$) T_dtree_sum$)
(declare-fun fun_app$w (T_set_T_set_fun$ T_set$) T_set$)
(declare-fun fun_app$x (T_T_fun$ T$) T$)
(declare-fun fun_app$y (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$) T_dtree_sum$)
(declare-fun fun_app$z (T_N_sum_T_N_sum_fun$ T_N_sum$) T_N_sum$)
(declare-fun map_sum$a (T_T_fun$ Dtree_dtree_fun$) T_dtree_sum_T_dtree_sum_fun$)
(declare-fun map_sum$b (T_T_fun$ N_N_fun$) T_N_sum_T_N_sum_fun$)
(declare-fun map_sum$c (T_T_fun$) N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$)
(declare-fun map_sum$d (T_T_fun$ T_dtree_sum_T_N_sum_fun$) T_T_dtree_sum_sum_T_T_N_sum_sum_fun$)
(declare-fun map_sum$e (T_T_fun$ T_N_sum_T_dtree_sum_fun$) T_T_N_sum_sum_T_T_dtree_sum_sum_fun$)
(declare-fun map_sum$f (T_set_T_set_fun$ N_dtree_fun$) T_set_N_sum_T_set_dtree_sum_fun$)
(declare-fun map_sum$g (T_set_T_set_fun$ N_N_fun$) T_set_N_sum_T_set_N_sum_fun$)
(declare-fun map_sum$h (T_T_fun$ T_dtree_sum_dtree_fun$) T_T_dtree_sum_sum_T_dtree_sum_fun$)
(declare-fun map_sum$i (T_T_fun$ T_N_sum_dtree_fun$) T_T_N_sum_sum_T_dtree_sum_fun$)
(declare-fun map_sum$j (T_T_fun$ T_dtree_sum_N_fun$) T_T_dtree_sum_sum_T_N_sum_fun$)
(declare-fun map_sum$k (T_T_fun$ T_N_sum_N_fun$) T_T_N_sum_sum_T_N_sum_fun$)
(declare-fun map_sum$l (T_T_fun$ Dtree_T_dtree_sum_fun$) T_dtree_sum_T_T_dtree_sum_sum_fun$)
(declare-fun map_sum$m (T_T_fun$ N_T_dtree_sum_fun$) T_N_sum_T_T_dtree_sum_sum_fun$)
(declare-fun fun_app$aa (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$) T_N_sum$)
(declare-fun fun_app$ab (T_N_sum_T_dtree_sum_fun$ T_N_sum$) T_dtree_sum$)
(declare-fun fun_app$ac (Dtree_dtree_bool_fun_fun$ Dtree$) Dtree_bool_fun$)
(declare-fun fun_app$ad (Dtree_T_N_sum_fun$ Dtree$) T_N_sum$)
(assert (! (forall ((?v0 T_dtree_sum$)) (! (= (fun_app$ uuc$ ?v0) (inr$c ?v0)) :pattern ((fun_app$ uuc$ ?v0)))) :named a0))
(assert (! (forall ((?v0 T_N_sum$)) (! (= (fun_app$a uub$ ?v0) (inr$b ?v0)) :pattern ((fun_app$a uub$ ?v0)))) :named a1))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$b uud$ ?v0) (inr$d ?v0)) :pattern ((fun_app$b uud$ ?v0)))) :named a2))
(assert (! (forall ((?v0 Dtree$)) (! (= (fun_app$c uu$ ?v0) (inr$a ?v0)) :pattern ((fun_app$c uu$ ?v0)))) :named a3))
(assert (! (forall ((?v0 N$)) (! (= (fun_app$d uue$ ?v0) (inr$e ?v0)) :pattern ((fun_app$d uue$ ?v0)))) :named a4))
(assert (! (forall ((?v0 N$)) (! (= (fun_app$e uua$ ?v0) (inr$ ?v0)) :pattern ((fun_app$e uua$ ?v0)))) :named a5))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$) (?v1 N_T_N_sum_set_prod$)) (! (= (fun_app$f (uuf$ ?v0) ?v1) (member$ ?v1 ?v0)) :pattern ((fun_app$f (uuf$ ?v0) ?v1)))) :named a6))
(assert (! (forall ((?v0 T_dtree_sum_set$) (?v1 T_dtree_sum$)) (! (= (fun_app$g (uuh$ ?v0) ?v1) (member$a ?v1 ?v0)) :pattern ((fun_app$g (uuh$ ?v0) ?v1)))) :named a7))
(assert (! (forall ((?v0 T_N_sum_set$) (?v1 T_N_sum$)) (! (= (fun_app$h (uui$ ?v0) ?v1) (member$b ?v1 ?v0)) :pattern ((fun_app$h (uui$ ?v0) ?v1)))) :named a8))
(assert (! (forall ((?v0 Dtree_set$) (?v1 Dtree$)) (! (= (fun_app$i (uug$ ?v0) ?v1) (member$c ?v1 ?v0)) :pattern ((fun_app$i (uug$ ?v0) ?v1)))) :named a9))
(assert (! (forall ((?v0 N_set$) (?v1 N$)) (! (= (fun_app$j (uuj$ ?v0) ?v1) (member$d ?v1 ?v0)) :pattern ((fun_app$j (uuj$ ?v0) ?v1)))) :named a10))
(assert (! (not (and (member$ (pair$ (fun_app$k root$ tra$) (image$ (fun_app$l (map_sum$ id$) root$) (cont$ tra$))) p$) (and (inj_on$ root$ (vimage$ uu$ (cont$ tra$))) (forall ((?v0 Dtree$)) (=> (member$c ?v0 (vimage$ uu$ (cont$ tra$))) (exists ((?v1 N$)) (= ?v0 (fun_app$m deftr$ ?v1)))))))) :named a11))
(assert (! (exists ((?v0 N$)) (= tra$ (fun_app$m deftr$ ?v0))) :named a12))
(assert (! (exists ((?v0 N$)) (= tr$ (fun_app$m deftr$ ?v0))) :named a13))
(assert (! (forall ((?v0 N$)) (= (fun_app$k root$ (fun_app$m deftr$ ?v0)) ?v0)) :named a14))
(assert (! (forall ((?v0 N$)) (exists ((?v1 T_N_sum_set$)) (member$ (pair$ ?v0 ?v1) p$))) :named a15))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 T_dtree_sum_set$)) (= (vimage$ uu$ (image$a (map_sum$a id$ ?v0) ?v1)) (image$b ?v0 (vimage$ uu$ ?v1)))) :named a16))
(assert (! (forall ((?v0 N_N_fun$) (?v1 T_N_sum_set$)) (= (vimage$a uua$ (image$c (map_sum$b id$ ?v0) ?v1)) (fun_app$n (image$d ?v0) (vimage$a uua$ ?v1)))) :named a17))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 T_dtree_sum_set$)) (= (vimage$a uua$ (image$ (fun_app$l (map_sum$ id$) ?v0) ?v1)) (image$e ?v0 (vimage$ uu$ ?v1)))) :named a18))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 T_N_sum_set$)) (= (vimage$ uu$ (image$f (fun_app$o (map_sum$c id$) ?v0) ?v1)) (image$g ?v0 (vimage$a uua$ ?v1)))) :named a19))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$) (?v1 T_T_dtree_sum_sum_set$)) (= (vimage$b uub$ (image$h (map_sum$d id$ ?v0) ?v1)) (image$ ?v0 (vimage$c uuc$ ?v1)))) :named a20))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$) (?v1 T_T_N_sum_sum_set$)) (= (vimage$c uuc$ (image$i (map_sum$e id$ ?v0) ?v1)) (image$f ?v0 (vimage$b uub$ ?v1)))) :named a21))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 T_set_N_sum_set$)) (= (vimage$d uud$ (image$j (map_sum$f id$a ?v0) ?v1)) (image$g ?v0 (vimage$e uue$ ?v1)))) :named a22))
(assert (! (forall ((?v0 N_N_fun$) (?v1 T_set_N_sum_set$)) (= (vimage$e uue$ (image$k (map_sum$g id$a ?v0) ?v1)) (fun_app$n (image$d ?v0) (vimage$e uue$ ?v1)))) :named a23))
(assert (! (forall ((?v0 T_dtree_sum_dtree_fun$) (?v1 T_T_dtree_sum_sum_set$)) (= (vimage$ uu$ (image$l (map_sum$h id$ ?v0) ?v1)) (image$m ?v0 (vimage$c uuc$ ?v1)))) :named a24))
(assert (! (forall ((?v0 T_N_sum_dtree_fun$) (?v1 T_T_N_sum_sum_set$)) (= (vimage$ uu$ (image$n (map_sum$i id$ ?v0) ?v1)) (image$o ?v0 (vimage$b uub$ ?v1)))) :named a25))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 T_dtree_sum_set$)) (= (member$a (inr$a ?v0) (image$a (map_sum$a id$ ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$a (inr$a ?v3) ?v2) (= (fun_app$p ?v1 ?v3) ?v0))))) :named a26))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 T_N_sum_set$)) (= (member$b (inr$ ?v0) (image$c (map_sum$b id$ ?v1) ?v2)) (exists ((?v3 N$)) (and (member$b (inr$ ?v3) ?v2) (= (fun_app$q ?v1 ?v3) ?v0))))) :named a27))
(assert (! (forall ((?v0 N$) (?v1 Dtree_N_fun$) (?v2 T_dtree_sum_set$)) (= (member$b (inr$ ?v0) (image$ (fun_app$l (map_sum$ id$) ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$a (inr$a ?v3) ?v2) (= (fun_app$k ?v1 ?v3) ?v0))))) :named a28))
(assert (! (forall ((?v0 Dtree$) (?v1 N_dtree_fun$) (?v2 T_N_sum_set$)) (= (member$a (inr$a ?v0) (image$f (fun_app$o (map_sum$c id$) ?v1) ?v2)) (exists ((?v3 N$)) (and (member$b (inr$ ?v3) ?v2) (= (fun_app$m ?v1 ?v3) ?v0))))) :named a29))
(assert (! (forall ((?v0 Dtree$) (?v1 T_dtree_sum_dtree_fun$) (?v2 T_T_dtree_sum_sum_set$)) (= (member$a (inr$a ?v0) (image$l (map_sum$h id$ ?v1) ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$e (inr$c ?v3) ?v2) (= (fun_app$r ?v1 ?v3) ?v0))))) :named a30))
(assert (! (forall ((?v0 Dtree$) (?v1 T_N_sum_dtree_fun$) (?v2 T_T_N_sum_sum_set$)) (= (member$a (inr$a ?v0) (image$n (map_sum$i id$ ?v1) ?v2)) (exists ((?v3 T_N_sum$)) (and (member$f (inr$b ?v3) ?v2) (= (fun_app$s ?v1 ?v3) ?v0))))) :named a31))
(assert (! (forall ((?v0 N$) (?v1 T_dtree_sum_N_fun$) (?v2 T_T_dtree_sum_sum_set$)) (= (member$b (inr$ ?v0) (image$p (map_sum$j id$ ?v1) ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$e (inr$c ?v3) ?v2) (= (fun_app$t ?v1 ?v3) ?v0))))) :named a32))
(assert (! (forall ((?v0 N$) (?v1 T_N_sum_N_fun$) (?v2 T_T_N_sum_sum_set$)) (= (member$b (inr$ ?v0) (image$q (map_sum$k id$ ?v1) ?v2)) (exists ((?v3 T_N_sum$)) (and (member$f (inr$b ?v3) ?v2) (= (fun_app$u ?v1 ?v3) ?v0))))) :named a33))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 Dtree_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$e (inr$c ?v0) (image$r (map_sum$l id$ ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$a (inr$a ?v3) ?v2) (= (fun_app$c ?v1 ?v3) ?v0))))) :named a34))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 N_T_dtree_sum_fun$) (?v2 T_N_sum_set$)) (= (member$e (inr$c ?v0) (image$s (map_sum$m id$ ?v1) ?v2)) (exists ((?v3 N$)) (and (member$b (inr$ ?v3) ?v2) (= (fun_app$v ?v1 ?v3) ?v0))))) :named a35))
(assert (! (= (vimage$f id$a) id$b) :named a36))
(assert (! (= (vimage$g id$c) id$d) :named a37))
(assert (! (= (vimage$h id$) id$a) :named a38))
(assert (! (= (image$t id$a) id$b) :named a39))
(assert (! (= (image$d id$c) id$d) :named a40))
(assert (! (= (image$u id$) id$a) :named a41))
(assert (! (forall ((?v0 Dtree$)) (= (wf$ ?v0) (exists ((?v1 Dtree$)) (and (= ?v0 ?v1) (and (member$ (pair$ (fun_app$k root$ ?v1) (image$ (fun_app$l (map_sum$ id$) root$) (cont$ ?v1))) p$) (and (inj_on$ root$ (vimage$ uu$ (cont$ ?v1))) (forall ((?v2 Dtree$)) (=> (member$c ?v2 (vimage$ uu$ (cont$ ?v1))) (wf$ ?v2))))))))) :named a42))
(assert (! (forall ((?v0 Dtree$)) (=> (and (member$ (pair$ (fun_app$k root$ ?v0) (image$ (fun_app$l (map_sum$ id$) root$) (cont$ ?v0))) p$) (and (inj_on$ root$ (vimage$ uu$ (cont$ ?v0))) (forall ((?v1 Dtree$)) (=> (member$c ?v1 (vimage$ uu$ (cont$ ?v0))) (wf$ ?v1))))) (wf$ ?v0))) :named a43))
(assert (! (forall ((?v0 Dtree$)) (=> (and (wf$ ?v0) (forall ((?v1 Dtree$)) (=> (and (= ?v0 ?v1) (and (member$ (pair$ (fun_app$k root$ ?v1) (image$ (fun_app$l (map_sum$ id$) root$) (cont$ ?v1))) p$) (and (inj_on$ root$ (vimage$ uu$ (cont$ ?v1))) (forall ((?v2 Dtree$)) (=> (member$c ?v2 (vimage$ uu$ (cont$ ?v1))) (wf$ ?v2)))))) false))) false)) :named a44))
(assert (! (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree$)) (=> (and (fun_app$i ?v0 ?v1) (forall ((?v2 Dtree$)) (=> (fun_app$i ?v0 ?v2) (and (member$ (pair$ (fun_app$k root$ ?v2) (image$ (fun_app$l (map_sum$ id$) root$) (cont$ ?v2))) p$) (and (inj_on$ root$ (vimage$ uu$ (cont$ ?v2))) (forall ((?v3 Dtree$)) (=> (member$c ?v3 (vimage$ uu$ (cont$ ?v2))) (fun_app$i ?v0 ?v3)))))))) (wf$ ?v1))) :named a45))
(assert (! (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree$)) (=> (and (fun_app$i ?v0 ?v1) (forall ((?v2 Dtree$)) (=> (fun_app$i ?v0 ?v2) (exists ((?v3 Dtree$)) (and (= ?v2 ?v3) (and (member$ (pair$ (fun_app$k root$ ?v3) (image$ (fun_app$l (map_sum$ id$) root$) (cont$ ?v3))) p$) (and (inj_on$ root$ (vimage$ uu$ (cont$ ?v3))) (forall ((?v4 Dtree$)) (=> (member$c ?v4 (vimage$ uu$ (cont$ ?v3))) (or (fun_app$i ?v0 ?v4) (wf$ ?v4))))))))))) (wf$ ?v1))) :named a46))
(assert (! (forall ((?v0 Dtree_bool_fun$) (?v1 Dtree$)) (=> (and (fun_app$i ?v0 ?v1) (forall ((?v2 Dtree$)) (=> (fun_app$i ?v0 ?v2) (and (member$ (pair$ (fun_app$k root$ ?v2) (image$ (fun_app$l (map_sum$ id$) root$) (cont$ ?v2))) p$) (and (inj_on$ root$ (vimage$ uu$ (cont$ ?v2))) (forall ((?v3 Dtree$)) (=> (member$c ?v3 (vimage$ uu$ (cont$ ?v2))) (or (fun_app$i ?v0 ?v3) (wf$ ?v3))))))))) (wf$ ?v1))) :named a47))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 T_dtree_sum_set$)) (=> (member$a (inr$a ?v0) (image$a (map_sum$a id$ ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$a (inr$a ?v3) ?v2) (= (fun_app$p ?v1 ?v3) ?v0))))) :named a48))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 T_N_sum_set$)) (=> (member$b (inr$ ?v0) (image$c (map_sum$b id$ ?v1) ?v2)) (exists ((?v3 N$)) (and (member$b (inr$ ?v3) ?v2) (= (fun_app$q ?v1 ?v3) ?v0))))) :named a49))
(assert (! (forall ((?v0 N$) (?v1 Dtree_N_fun$) (?v2 T_dtree_sum_set$)) (=> (member$b (inr$ ?v0) (image$ (fun_app$l (map_sum$ id$) ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$a (inr$a ?v3) ?v2) (= (fun_app$k ?v1 ?v3) ?v0))))) :named a50))
(assert (! (forall ((?v0 Dtree$) (?v1 N_dtree_fun$) (?v2 T_N_sum_set$)) (=> (member$a (inr$a ?v0) (image$f (fun_app$o (map_sum$c id$) ?v1) ?v2)) (exists ((?v3 N$)) (and (member$b (inr$ ?v3) ?v2) (= (fun_app$m ?v1 ?v3) ?v0))))) :named a51))
(assert (! (forall ((?v0 Dtree$) (?v1 T_dtree_sum_dtree_fun$) (?v2 T_T_dtree_sum_sum_set$)) (=> (member$a (inr$a ?v0) (image$l (map_sum$h id$ ?v1) ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$e (inr$c ?v3) ?v2) (= (fun_app$r ?v1 ?v3) ?v0))))) :named a52))
(assert (! (forall ((?v0 Dtree$) (?v1 T_N_sum_dtree_fun$) (?v2 T_T_N_sum_sum_set$)) (=> (member$a (inr$a ?v0) (image$n (map_sum$i id$ ?v1) ?v2)) (exists ((?v3 T_N_sum$)) (and (member$f (inr$b ?v3) ?v2) (= (fun_app$s ?v1 ?v3) ?v0))))) :named a53))
(assert (! (forall ((?v0 N$) (?v1 T_dtree_sum_N_fun$) (?v2 T_T_dtree_sum_sum_set$)) (=> (member$b (inr$ ?v0) (image$p (map_sum$j id$ ?v1) ?v2)) (exists ((?v3 T_dtree_sum$)) (and (member$e (inr$c ?v3) ?v2) (= (fun_app$t ?v1 ?v3) ?v0))))) :named a54))
(assert (! (forall ((?v0 N$) (?v1 T_N_sum_N_fun$) (?v2 T_T_N_sum_sum_set$)) (=> (member$b (inr$ ?v0) (image$q (map_sum$k id$ ?v1) ?v2)) (exists ((?v3 T_N_sum$)) (and (member$f (inr$b ?v3) ?v2) (= (fun_app$u ?v1 ?v3) ?v0))))) :named a55))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 Dtree_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (=> (member$e (inr$c ?v0) (image$r (map_sum$l id$ ?v1) ?v2)) (exists ((?v3 Dtree$)) (and (member$a (inr$a ?v3) ?v2) (= (fun_app$c ?v1 ?v3) ?v0))))) :named a56))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 N_T_dtree_sum_fun$) (?v2 T_N_sum_set$)) (=> (member$e (inr$c ?v0) (image$s (map_sum$m id$ ?v1) ?v2)) (exists ((?v3 N$)) (and (member$b (inr$ ?v3) ?v2) (= (fun_app$v ?v1 ?v3) ?v0))))) :named a57))
(assert (! (forall ((?v0 Dtree$)) (=> (wf$ ?v0) (member$ (pair$ (fun_app$k root$ ?v0) (image$ (fun_app$l (map_sum$ id$) root$) (cont$ ?v0))) p$))) :named a58))
(assert (! (forall ((?v0 T_set$)) (! (= (fun_app$w id$a ?v0) ?v0) :pattern ((fun_app$w id$a ?v0)))) :named a59))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$x id$ ?v0) ?v0) :pattern ((fun_app$x id$ ?v0)))) :named a60))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (and (member$a (inr$a ?v1) (cont$ ?v0)) (member$a (inr$a ?v2) (cont$ ?v0)))) (= (= (fun_app$k root$ ?v1) (fun_app$k root$ ?v2)) (= ?v1 ?v2)))) :named a61))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (member$a (inr$a ?v1) (cont$ ?v0))) (wf$ ?v1))) :named a62))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_set$) (?v2 T$) (?v3 T$)) (=> (and (inj_on$a ?v0 ?v1) (and (not (= ?v2 ?v3)) (and (member$g ?v2 ?v1) (member$g ?v3 ?v1)))) (not (= (fun_app$x ?v0 ?v2) (fun_app$x ?v0 ?v3))))) :named a63))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (inj_on$b ?v0 ?v1) (and (not (= ?v2 ?v3)) (and (member$c ?v2 ?v1) (member$c ?v3 ?v1)))) (not (= (fun_app$p ?v0 ?v2) (fun_app$p ?v0 ?v3))))) :named a64))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$) (?v1 Dtree_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (inj_on$c ?v0 ?v1) (and (not (= ?v2 ?v3)) (and (member$c ?v2 ?v1) (member$c ?v3 ?v1)))) (not (= (fun_app$c ?v0 ?v2) (fun_app$c ?v0 ?v3))))) :named a65))
(assert (! (forall ((?v0 N_T_N_sum_fun$) (?v1 N_set$) (?v2 N$) (?v3 N$)) (=> (and (inj_on$d ?v0 ?v1) (and (not (= ?v2 ?v3)) (and (member$d ?v2 ?v1) (member$d ?v3 ?v1)))) (not (= (fun_app$e ?v0 ?v2) (fun_app$e ?v0 ?v3))))) :named a66))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (inj_on$ ?v0 ?v1) (and (not (= ?v2 ?v3)) (and (member$c ?v2 ?v1) (member$c ?v3 ?v1)))) (not (= (fun_app$k ?v0 ?v2) (fun_app$k ?v0 ?v3))))) :named a67))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_set$) (?v2 T$) (?v3 T$)) (=> (and (inj_on$a ?v0 ?v1) (and (member$g ?v2 ?v1) (member$g ?v3 ?v1))) (= (= (fun_app$x ?v0 ?v2) (fun_app$x ?v0 ?v3)) (= ?v2 ?v3)))) :named a68))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (inj_on$b ?v0 ?v1) (and (member$c ?v2 ?v1) (member$c ?v3 ?v1))) (= (= (fun_app$p ?v0 ?v2) (fun_app$p ?v0 ?v3)) (= ?v2 ?v3)))) :named a69))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$) (?v1 Dtree_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (inj_on$c ?v0 ?v1) (and (member$c ?v2 ?v1) (member$c ?v3 ?v1))) (= (= (fun_app$c ?v0 ?v2) (fun_app$c ?v0 ?v3)) (= ?v2 ?v3)))) :named a70))
(assert (! (forall ((?v0 N_T_N_sum_fun$) (?v1 N_set$) (?v2 N$) (?v3 N$)) (=> (and (inj_on$d ?v0 ?v1) (and (member$d ?v2 ?v1) (member$d ?v3 ?v1))) (= (= (fun_app$e ?v0 ?v2) (fun_app$e ?v0 ?v3)) (= ?v2 ?v3)))) :named a71))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (inj_on$ ?v0 ?v1) (and (member$c ?v2 ?v1) (member$c ?v3 ?v1))) (= (= (fun_app$k ?v0 ?v2) (fun_app$k ?v0 ?v3)) (= ?v2 ?v3)))) :named a72))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_set$) (?v2 T$) (?v3 T$)) (=> (and (inj_on$a ?v0 ?v1) (and (= (fun_app$x ?v0 ?v2) (fun_app$x ?v0 ?v3)) (and (member$g ?v2 ?v1) (member$g ?v3 ?v1)))) (= ?v2 ?v3))) :named a73))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (inj_on$b ?v0 ?v1) (and (= (fun_app$p ?v0 ?v2) (fun_app$p ?v0 ?v3)) (and (member$c ?v2 ?v1) (member$c ?v3 ?v1)))) (= ?v2 ?v3))) :named a74))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$) (?v1 Dtree_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (inj_on$c ?v0 ?v1) (and (= (fun_app$c ?v0 ?v2) (fun_app$c ?v0 ?v3)) (and (member$c ?v2 ?v1) (member$c ?v3 ?v1)))) (= ?v2 ?v3))) :named a75))
(assert (! (forall ((?v0 N_T_N_sum_fun$) (?v1 N_set$) (?v2 N$) (?v3 N$)) (=> (and (inj_on$d ?v0 ?v1) (and (= (fun_app$e ?v0 ?v2) (fun_app$e ?v0 ?v3)) (and (member$d ?v2 ?v1) (member$d ?v3 ?v1)))) (= ?v2 ?v3))) :named a76))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_set$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (inj_on$ ?v0 ?v1) (and (= (fun_app$k ?v0 ?v2) (fun_app$k ?v0 ?v3)) (and (member$c ?v2 ?v1) (member$c ?v3 ?v1)))) (= ?v2 ?v3))) :named a77))
(assert (! (forall ((?v0 T_set$) (?v1 T_T_fun$)) (=> (forall ((?v2 T$) (?v3 T$)) (=> (and (member$g ?v2 ?v0) (and (member$g ?v3 ?v0) (= (fun_app$x ?v1 ?v2) (fun_app$x ?v1 ?v3)))) (= ?v2 ?v3))) (inj_on$a ?v1 ?v0))) :named a78))
(assert (! (forall ((?v0 Dtree_set$) (?v1 Dtree_dtree_fun$)) (=> (forall ((?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$c ?v2 ?v0) (and (member$c ?v3 ?v0) (= (fun_app$p ?v1 ?v2) (fun_app$p ?v1 ?v3)))) (= ?v2 ?v3))) (inj_on$b ?v1 ?v0))) :named a79))
(assert (! (forall ((?v0 Dtree_set$) (?v1 Dtree_T_dtree_sum_fun$)) (=> (forall ((?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$c ?v2 ?v0) (and (member$c ?v3 ?v0) (= (fun_app$c ?v1 ?v2) (fun_app$c ?v1 ?v3)))) (= ?v2 ?v3))) (inj_on$c ?v1 ?v0))) :named a80))
(assert (! (forall ((?v0 N_set$) (?v1 N_T_N_sum_fun$)) (=> (forall ((?v2 N$) (?v3 N$)) (=> (and (member$d ?v2 ?v0) (and (member$d ?v3 ?v0) (= (fun_app$e ?v1 ?v2) (fun_app$e ?v1 ?v3)))) (= ?v2 ?v3))) (inj_on$d ?v1 ?v0))) :named a81))
(assert (! (forall ((?v0 Dtree_set$) (?v1 Dtree_N_fun$)) (=> (forall ((?v2 Dtree$) (?v3 Dtree$)) (=> (and (member$c ?v2 ?v0) (and (member$c ?v3 ?v0) (= (fun_app$k ?v1 ?v2) (fun_app$k ?v1 ?v3)))) (= ?v2 ?v3))) (inj_on$ ?v1 ?v0))) :named a82))
(assert (! (forall ((?v0 T_set$) (?v1 T_T_fun$) (?v2 T_T_fun$)) (=> (forall ((?v3 T$)) (=> (member$g ?v3 ?v0) (= (fun_app$x ?v1 (fun_app$x ?v2 ?v3)) ?v3))) (inj_on$a ?v2 ?v0))) :named a83))
(assert (! (forall ((?v0 Dtree_set$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_dtree_fun$)) (=> (forall ((?v3 Dtree$)) (=> (member$c ?v3 ?v0) (= (fun_app$p ?v1 (fun_app$p ?v2 ?v3)) ?v3))) (inj_on$b ?v2 ?v0))) :named a84))
(assert (! (forall ((?v0 Dtree_set$) (?v1 T_dtree_sum_dtree_fun$) (?v2 Dtree_T_dtree_sum_fun$)) (=> (forall ((?v3 Dtree$)) (=> (member$c ?v3 ?v0) (= (fun_app$r ?v1 (fun_app$c ?v2 ?v3)) ?v3))) (inj_on$c ?v2 ?v0))) :named a85))
(assert (! (forall ((?v0 N_set$) (?v1 T_N_sum_N_fun$) (?v2 N_T_N_sum_fun$)) (=> (forall ((?v3 N$)) (=> (member$d ?v3 ?v0) (= (fun_app$u ?v1 (fun_app$e ?v2 ?v3)) ?v3))) (inj_on$d ?v2 ?v0))) :named a86))
(assert (! (forall ((?v0 Dtree_set$) (?v1 N_dtree_fun$) (?v2 Dtree_N_fun$)) (=> (forall ((?v3 Dtree$)) (=> (member$c ?v3 ?v0) (= (fun_app$m ?v1 (fun_app$k ?v2 ?v3)) ?v3))) (inj_on$ ?v2 ?v0))) :named a87))
(assert (! (forall ((?v0 T_set$) (?v1 T_T_fun$) (?v2 T_T_fun$)) (=> (forall ((?v3 T$)) (=> (member$g ?v3 ?v0) (= (fun_app$x ?v1 ?v3) (fun_app$x ?v2 ?v3)))) (= (inj_on$a ?v1 ?v0) (inj_on$a ?v2 ?v0)))) :named a88))
(assert (! (forall ((?v0 Dtree_set$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_dtree_fun$)) (=> (forall ((?v3 Dtree$)) (=> (member$c ?v3 ?v0) (= (fun_app$p ?v1 ?v3) (fun_app$p ?v2 ?v3)))) (= (inj_on$b ?v1 ?v0) (inj_on$b ?v2 ?v0)))) :named a89))
(assert (! (forall ((?v0 Dtree_set$) (?v1 Dtree_T_dtree_sum_fun$) (?v2 Dtree_T_dtree_sum_fun$)) (=> (forall ((?v3 Dtree$)) (=> (member$c ?v3 ?v0) (= (fun_app$c ?v1 ?v3) (fun_app$c ?v2 ?v3)))) (= (inj_on$c ?v1 ?v0) (inj_on$c ?v2 ?v0)))) :named a90))
(assert (! (forall ((?v0 N_set$) (?v1 N_T_N_sum_fun$) (?v2 N_T_N_sum_fun$)) (=> (forall ((?v3 N$)) (=> (member$d ?v3 ?v0) (= (fun_app$e ?v1 ?v3) (fun_app$e ?v2 ?v3)))) (= (inj_on$d ?v1 ?v0) (inj_on$d ?v2 ?v0)))) :named a91))
(assert (! (forall ((?v0 Dtree_set$) (?v1 Dtree_N_fun$) (?v2 Dtree_N_fun$)) (=> (forall ((?v3 Dtree$)) (=> (member$c ?v3 ?v0) (= (fun_app$k ?v1 ?v3) (fun_app$k ?v2 ?v3)))) (= (inj_on$ ?v1 ?v0) (inj_on$ ?v2 ?v0)))) :named a92))
(assert (! (forall ((?v0 T_T_fun$) (?v1 T_set$)) (= (inj_on$a ?v0 ?v1) (forall ((?v2 T$)) (=> (member$g ?v2 ?v1) (forall ((?v3 T$)) (=> (and (member$g ?v3 ?v1) (= (fun_app$x ?v0 ?v2) (fun_app$x ?v0 ?v3))) (= ?v2 ?v3))))))) :named a93))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree_set$)) (= (inj_on$b ?v0 ?v1) (forall ((?v2 Dtree$)) (=> (member$c ?v2 ?v1) (forall ((?v3 Dtree$)) (=> (and (member$c ?v3 ?v1) (= (fun_app$p ?v0 ?v2) (fun_app$p ?v0 ?v3))) (= ?v2 ?v3))))))) :named a94))
(assert (! (forall ((?v0 Dtree_T_dtree_sum_fun$) (?v1 Dtree_set$)) (= (inj_on$c ?v0 ?v1) (forall ((?v2 Dtree$)) (=> (member$c ?v2 ?v1) (forall ((?v3 Dtree$)) (=> (and (member$c ?v3 ?v1) (= (fun_app$c ?v0 ?v2) (fun_app$c ?v0 ?v3))) (= ?v2 ?v3))))))) :named a95))
(assert (! (forall ((?v0 N_T_N_sum_fun$) (?v1 N_set$)) (= (inj_on$d ?v0 ?v1) (forall ((?v2 N$)) (=> (member$d ?v2 ?v1) (forall ((?v3 N$)) (=> (and (member$d ?v3 ?v1) (= (fun_app$e ?v0 ?v2) (fun_app$e ?v0 ?v3))) (= ?v2 ?v3))))))) :named a96))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree_set$)) (= (inj_on$ ?v0 ?v1) (forall ((?v2 Dtree$)) (=> (member$c ?v2 ?v1) (forall ((?v3 Dtree$)) (=> (and (member$c ?v3 ?v1) (= (fun_app$k ?v0 ?v2) (fun_app$k ?v0 ?v3))) (= ?v2 ?v3))))))) :named a97))
(assert (! (forall ((?v0 T$)) (! (= (fun_app$x id$ ?v0) ?v0) :pattern ((fun_app$x id$ ?v0)))) :named a98))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (member$a (inr$a ?v0) (cont$ ?v1)) (member$b (inr$ (fun_app$k root$ ?v0)) (image$ (fun_app$l (map_sum$ id$) root$) (cont$ ?v1))))) :named a99))
(assert (! (forall ((?v0 Dtree_set$) (?v1 Dtree_N_fun$) (?v2 Dtree_dtree_fun$)) (=> (and (forall ((?v3 Dtree$)) (=> (member$c ?v3 ?v0) (forall ((?v4 Dtree$)) (=> (member$c ?v4 ?v0) (= (= (fun_app$k ?v1 (fun_app$p ?v2 ?v3)) (fun_app$k ?v1 (fun_app$p ?v2 ?v4))) (= (fun_app$k ?v1 ?v3) (fun_app$k ?v1 ?v4))))))) (inj_on$b ?v2 ?v0)) (= (inj_on$ ?v1 (image$b ?v2 ?v0)) (inj_on$ ?v1 ?v0)))) :named a100))
(assert (! (forall ((?v0 T_set$)) (inj_on$a id$ ?v0)) :named a101))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_dtree_fun$) (?v2 T_dtree_sum$) (?v3 Dtree$)) (=> (= (fun_app$y (map_sum$a ?v0 ?v1) ?v2) (inr$a ?v3)) (exists ((?v4 Dtree$)) (and (= ?v2 (inr$a ?v4)) (= (fun_app$p ?v1 ?v4) ?v3))))) :named a102))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_N_fun$) (?v2 T_N_sum$) (?v3 N$)) (=> (= (fun_app$z (map_sum$b ?v0 ?v1) ?v2) (inr$ ?v3)) (exists ((?v4 N$)) (and (= ?v2 (inr$ ?v4)) (= (fun_app$q ?v1 ?v4) ?v3))))) :named a103))
(assert (! (forall ((?v0 T_T_fun$) (?v1 Dtree_N_fun$) (?v2 T_dtree_sum$) (?v3 N$)) (=> (= (fun_app$aa (fun_app$l (map_sum$ ?v0) ?v1) ?v2) (inr$ ?v3)) (exists ((?v4 Dtree$)) (and (= ?v2 (inr$a ?v4)) (= (fun_app$k ?v1 ?v4) ?v3))))) :named a104))
(assert (! (forall ((?v0 T_T_fun$) (?v1 N_dtree_fun$) (?v2 T_N_sum$) (?v3 Dtree$)) (=> (= (fun_app$ab (fun_app$o (map_sum$c ?v0) ?v1) ?v2) (inr$a ?v3)) (exists ((?v4 N$)) (and (= ?v2 (inr$ ?v4)) (= (fun_app$m ?v1 ?v4) ?v3))))) :named a105))
(assert (! (forall ((?v0 Dtree$)) (=> (wf$ ?v0) (inj_on$ root$ (vimage$ uu$ (cont$ ?v0))))) :named a106))
(assert (! (forall ((?v0 N$) (?v1 Dtree$)) (=> (member$b (inr$ ?v0) (image$ (fun_app$l (map_sum$ id$) root$) (cont$ ?v1))) (= (fun_app$k root$ (fun_app$m (subtrOf$ ?v1) ?v0)) ?v0))) :named a107))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (member$a (inr$a ?v1) (cont$ ?v0))) (exists ((?v2 N$)) (and (member$b (inr$ ?v2) (image$ (fun_app$l (map_sum$ id$) root$) (cont$ ?v0))) (= (fun_app$m (subtrOf$ ?v0) ?v2) ?v1))))) :named a108))
(assert (! (forall ((?v0 N$)) (= (cont$ (fun_app$m deftr$ ?v0)) (image$f (fun_app$o (map_sum$c id$) deftr$) (s$ ?v0)))) :named a109))
(assert (! (forall ((?v0 N$) (?v1 Dtree$)) (=> (member$b (inr$ ?v0) (image$ (fun_app$l (map_sum$ id$) root$) (cont$ ?v1))) (member$a (inr$a (fun_app$m (subtrOf$ ?v1) ?v0)) (cont$ ?v1)))) :named a110))
(assert (! (forall ((?v0 N$) (?v1 Dtree$)) (=> (member$b (inr$ ?v0) (image$ (fun_app$l (map_sum$ id$) root$) (cont$ ?v1))) (and (member$a (inr$a (fun_app$m (subtrOf$ ?v1) ?v0)) (cont$ ?v1)) (= (fun_app$k root$ (fun_app$m (subtrOf$ ?v1) ?v0)) ?v0)))) :named a111))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (=> (and (wf$ ?v0) (member$a (inr$a ?v1) (cont$ ?v0))) (= (fun_app$m (subtrOf$ ?v0) (fun_app$k root$ ?v1)) ?v1))) :named a112))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$) (?v2 Dtree$)) (=> (and (wf$ ?v0) (fun_app$i (fun_app$ac (subtr$ ?v1) ?v2) ?v0)) (member$ (pair$ (fun_app$k root$ ?v2) (image$ (fun_app$l (map_sum$ id$) root$) (cont$ ?v2))) p$))) :named a113))
(assert (! (forall ((?v0 Dtree_dtree_fun$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= (fun_app$p ?v0 ?v1) ?v2) (member$c ?v2 ?v3)) (member$c ?v1 (vimage$i ?v0 ?v3)))) :named a114))
(assert (! (forall ((?v0 N_dtree_fun$) (?v1 N$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= (fun_app$m ?v0 ?v1) ?v2) (member$c ?v2 ?v3)) (member$d ?v1 (vimage$j ?v0 ?v3)))) :named a115))
(assert (! (forall ((?v0 Dtree_N_fun$) (?v1 Dtree$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$k ?v0 ?v1) ?v2) (member$d ?v2 ?v3)) (member$c ?v1 (vimage$k ?v0 ?v3)))) :named a116))
(assert (! (forall ((?v0 N_N_fun$) (?v1 N$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$q ?v0 ?v1) ?v2) (member$d ?v2 ?v3)) (member$d ?v1 (fun_app$n (vimage$g ?v0) ?v3)))) :named a117))
(assert (! (forall ((?v0 T_dtree_sum_dtree_fun$) (?v1 T_dtree_sum$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= (fun_app$r ?v0 ?v1) ?v2) (member$c ?v2 ?v3)) (member$a ?v1 (vimage$l ?v0 ?v3)))) :named a118))
(assert (! (forall ((?v0 T_N_sum_dtree_fun$) (?v1 T_N_sum$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= (fun_app$s ?v0 ?v1) ?v2) (member$c ?v2 ?v3)) (member$b ?v1 (vimage$m ?v0 ?v3)))) :named a119))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$) (?v1 N$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= (fun_app$v ?v0 ?v1) ?v2) (member$a ?v2 ?v3)) (member$d ?v1 (vimage$n ?v0 ?v3)))) :named a120))
(assert (! (forall ((?v0 Dtree_T_N_sum_fun$) (?v1 Dtree$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= (fun_app$ad ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$c ?v1 (vimage$o ?v0 ?v3)))) :named a121))
(assert (! (forall ((?v0 N_T_N_sum_fun$) (?v1 N$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= (fun_app$e ?v0 ?v1) ?v2) (member$b ?v2 ?v3)) (member$d ?v1 (vimage$a ?v0 ?v3)))) :named a122))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$) (?v1 T_dtree_sum$) (?v2 N$) (?v3 N_set$)) (=> (and (= (fun_app$t ?v0 ?v1) ?v2) (member$d ?v2 ?v3)) (member$a ?v1 (vimage$p ?v0 ?v3)))) :named a123))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 Dtree_set$)) (= (member$c ?v0 (vimage$i ?v1 ?v2)) (member$c (fun_app$p ?v1 ?v0) ?v2))) :named a124))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_N_fun$) (?v2 N_set$)) (= (member$c ?v0 (vimage$k ?v1 ?v2)) (member$d (fun_app$k ?v1 ?v0) ?v2))) :named a125))
(assert (! (forall ((?v0 N$) (?v1 N_dtree_fun$) (?v2 Dtree_set$)) (= (member$d ?v0 (vimage$j ?v1 ?v2)) (member$c (fun_app$m ?v1 ?v0) ?v2))) :named a126))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N_set$)) (= (member$d ?v0 (fun_app$n (vimage$g ?v1) ?v2)) (member$d (fun_app$q ?v1 ?v0) ?v2))) :named a127))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_T_N_sum_fun$) (?v2 T_N_sum_set$)) (= (member$c ?v0 (vimage$o ?v1 ?v2)) (member$b (fun_app$ad ?v1 ?v0) ?v2))) :named a128))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_dtree_fun$) (?v2 Dtree_set$)) (= (member$a ?v0 (vimage$l ?v1 ?v2)) (member$c (fun_app$r ?v1 ?v0) ?v2))) :named a129))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_N_fun$) (?v2 N_set$)) (= (member$a ?v0 (vimage$p ?v1 ?v2)) (member$d (fun_app$t ?v1 ?v0) ?v2))) :named a130))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_dtree_fun$) (?v2 Dtree_set$)) (= (member$b ?v0 (vimage$m ?v1 ?v2)) (member$c (fun_app$s ?v1 ?v0) ?v2))) :named a131))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_N_fun$) (?v2 N_set$)) (= (member$b ?v0 (vimage$q ?v1 ?v2)) (member$d (fun_app$u ?v1 ?v0) ?v2))) :named a132))
(assert (! (forall ((?v0 N$) (?v1 N_T_dtree_sum_fun$) (?v2 T_dtree_sum_set$)) (= (member$d ?v0 (vimage$n ?v1 ?v2)) (member$a (fun_app$v ?v1 ?v0) ?v2))) :named a133))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$a ?v0) (inr$a ?v1)) (= ?v0 ?v1))) :named a134))
(assert (! (forall ((?v0 N$) (?v1 N$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a135))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_dtree_fun$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= ?v0 (fun_app$p ?v1 ?v2)) (member$c ?v2 ?v3)) (member$c ?v0 (image$b ?v1 ?v3)))) :named a136))
(assert (! (forall ((?v0 N$) (?v1 Dtree_N_fun$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= ?v0 (fun_app$k ?v1 ?v2)) (member$c ?v2 ?v3)) (member$d ?v0 (image$e ?v1 ?v3)))) :named a137))
(assert (! (forall ((?v0 Dtree$) (?v1 N_dtree_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$m ?v1 ?v2)) (member$d ?v2 ?v3)) (member$c ?v0 (image$g ?v1 ?v3)))) :named a138))
(assert (! (forall ((?v0 N$) (?v1 N_N_fun$) (?v2 N$) (?v3 N_set$)) (=> (and (= ?v0 (fun_app$q ?v1 ?v2)) (member$d ?v2 ?v3)) (member$d ?v0 (fun_app$n (image$d ?v1) ?v3)))) :named a139))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 Dtree_T_dtree_sum_fun$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= ?v0 (fun_app$c ?v1 ?v2)) (member$c ?v2 ?v3)) (member$a ?v0 (image$v ?v1 ?v3)))) :named a140))
(assert (! (forall ((?v0 T_N_sum$) (?v1 Dtree_T_N_sum_fun$) (?v2 Dtree$) (?v3 Dtree_set$)) (=> (and (= ?v0 (fun_app$ad ?v1 ?v2)) (member$c ?v2 ?v3)) (member$b ?v0 (image$w ?v1 ?v3)))) :named a141))
(assert (! (forall ((?v0 Dtree$) (?v1 T_dtree_sum_dtree_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$r ?v1 ?v2)) (member$a ?v2 ?v3)) (member$c ?v0 (image$m ?v1 ?v3)))) :named a142))
(assert (! (forall ((?v0 N$) (?v1 T_dtree_sum_N_fun$) (?v2 T_dtree_sum$) (?v3 T_dtree_sum_set$)) (=> (and (= ?v0 (fun_app$t ?v1 ?v2)) (member$a ?v2 ?v3)) (member$d ?v0 (image$x ?v1 ?v3)))) :named a143))
(assert (! (forall ((?v0 Dtree$) (?v1 T_N_sum_dtree_fun$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= ?v0 (fun_app$s ?v1 ?v2)) (member$b ?v2 ?v3)) (member$c ?v0 (image$o ?v1 ?v3)))) :named a144))
(assert (! (forall ((?v0 N$) (?v1 T_N_sum_N_fun$) (?v2 T_N_sum$) (?v3 T_N_sum_set$)) (=> (and (= ?v0 (fun_app$u ?v1 ?v2)) (member$b ?v2 ?v3)) (member$d ?v0 (image$y ?v1 ?v3)))) :named a145))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree$)) (= (= (inr$a ?v0) (inr$a ?v1)) (= ?v0 ?v1))) :named a146))
(assert (! (forall ((?v0 N$) (?v1 N$)) (= (= (inr$ ?v0) (inr$ ?v1)) (= ?v0 ?v1))) :named a147))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$) (?v3 Dtree$)) (=> (and (fun_app$i (fun_app$ac (subtr$ ?v0) ?v1) ?v2) (fun_app$i (fun_app$ac (subtr$ ?v0) ?v2) ?v3)) (fun_app$i (fun_app$ac (subtr$ ?v0) ?v1) ?v3))) :named a148))
(assert (! (forall ((?v0 Dtree_set$)) (inj_on$c uu$ ?v0)) :named a149))
(assert (! (forall ((?v0 N_set$)) (inj_on$d uua$ ?v0)) :named a150))
(assert (! (forall ((?v0 N_T_N_sum_set_prod_set$)) (= (collect$ (uuf$ ?v0)) ?v0)) :named a151))
(assert (! (forall ((?v0 Dtree_set$)) (= (collect$a (uug$ ?v0)) ?v0)) :named a152))
(assert (! (forall ((?v0 T_dtree_sum_set$)) (= (collect$b (uuh$ ?v0)) ?v0)) :named a153))
(assert (! (forall ((?v0 T_N_sum_set$)) (= (collect$c (uui$ ?v0)) ?v0)) :named a154))
(assert (! (forall ((?v0 N_set$)) (= (collect$d (uuj$ ?v0)) ?v0)) :named a155))
(assert (! (forall ((?v0 N_T_N_sum_set_prod$) (?v1 N_T_N_sum_set_prod_bool_fun$)) (= (member$ ?v0 (collect$ ?v1)) (fun_app$f ?v1 ?v0))) :named a156))
(assert (! (forall ((?v0 Dtree$) (?v1 Dtree_bool_fun$)) (= (member$c ?v0 (collect$a ?v1)) (fun_app$i ?v1 ?v0))) :named a157))
(assert (! (forall ((?v0 T_dtree_sum$) (?v1 T_dtree_sum_bool_fun$)) (= (member$a ?v0 (collect$b ?v1)) (fun_app$g ?v1 ?v0))) :named a158))
(assert (! (forall ((?v0 T_N_sum$) (?v1 T_N_sum_bool_fun$)) (= (member$b ?v0 (collect$c ?v1)) (fun_app$h ?v1 ?v0))) :named a159))
(assert (! (forall ((?v0 N$) (?v1 N_bool_fun$)) (= (member$d ?v0 (collect$d ?v1)) (fun_app$j ?v1 ?v0))) :named a160))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$i (fun_app$ac (subtr$ ?v0) ?v1) ?v2) (member$d (fun_app$k root$ ?v2) ?v0))) :named a161))
(assert (! (forall ((?v0 N_set$) (?v1 Dtree$) (?v2 Dtree$)) (=> (fun_app$i (fun_app$ac (subtr$ ?v0) ?v1) ?v2) (member$d (fun_app$k root$ ?v1) ?v0))) :named a162))
(assert (! (forall ((?v0 Dtree$) (?v1 N_set$)) (=> (member$d (fun_app$k root$ ?v0) ?v1) (fun_app$i (fun_app$ac (subtr$ ?v1) ?v0) ?v0))) :named a163))
(check-sat)
;(get-unsat-core)
