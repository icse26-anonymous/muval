; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 426
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort N$ 0)
(declare-sort Dtree$ 0)
(declare-sort N_set$ 0)
(declare-sort N_bool_fun$ 0)
(declare-sort N_list_set$ 0)
(declare-sort N_dtree_fun$ 0)
(declare-datatypes () ((N_list$ (nil$) (cons$ (hd$ N$) (tl$ N_list$)))
  (N_list_list$ (nil$a) (cons$a (hd$a N_list$) (tl$a N_list_list$)))))
(declare-fun f$ () N_dtree_fun$)
(declare-fun nl$ () N_list$)
(declare-fun ns$ () N_set$)
(declare-fun tr$ () Dtree$)
(declare-fun reg$ (N_dtree_fun$ Dtree$) Bool)
(declare-fun set$ (N_list$) N_set$)
(declare-fun tr1$ () Dtree$)
(declare-fun last$ (N_list$) N$)
(declare-fun null$ (N_list$) Bool)
(declare-fun path$ (N_dtree_fun$ N_list$) Bool)
(declare-fun root$ (Dtree$) N$)
(declare-fun set$a (N_list_list$) N_list_set$)
(declare-fun shift$ (N_list_set$ N$) N_list_set$)
(declare-fun member$ (N_list_list$ N_list$) Bool)
(declare-fun thesis$ () Bool)
(declare-fun fun_app$ (N_dtree_fun$ N$) Dtree$)
(declare-fun less_eq$ (N_set$ N_set$) Bool)
(declare-fun list_ex$ (N_bool_fun$ N_list$) Bool)
(declare-fun member$a (N_list$) N_bool_fun$)
(declare-fun member$b (N_list$ N_list_set$) Bool)
(declare-fun member$c (N$ N_set$) Bool)
(declare-fun regular$ (Dtree$) Bool)
(declare-fun distinct$ (N_list$) Bool)
(declare-fun fun_app$a (N_bool_fun$ N$) Bool)
(declare-fun less_eq$a (N_list_set$ N_list_set$) Bool)
(assert (! (not thesis$) :named a0))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (=> (= nl$ (cons$ ?v0 ?v1)) thesis$)) :named a1))
(assert (! (distinct$ nl$) :named a2))
(assert (! (regular$ tr$) :named a3))
(assert (! (forall ((?v0 N$) (?v1 N_list$) (?v2 N$) (?v3 N_list$)) (= (= (cons$ ?v0 ?v1) (cons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a4))
(assert (! (path$ f$ nl$) :named a5))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (not (= (cons$ ?v0 ?v1) ?v1))) :named a6))
(assert (! (= (fun_app$ f$ (last$ nl$)) tr1$) :named a7))
(assert (! (= (fun_app$ f$ (hd$ nl$)) tr$) :named a8))
(assert (! (less_eq$ (set$ nl$) ns$) :named a9))
(assert (! (forall ((?v0 N_list$) (?v1 N_list_list$) (?v2 N_list$)) (! (= (member$ (cons$a ?v0 ?v1) ?v2) (or (= ?v0 ?v2) (member$ ?v1 ?v2))) :pattern ((member$ (cons$a ?v0 ?v1) ?v2)))) :named a10))
(assert (! (forall ((?v0 N$) (?v1 N_list$) (?v2 N$)) (! (= (fun_app$a (member$a (cons$ ?v0 ?v1)) ?v2) (or (= ?v0 ?v2) (fun_app$a (member$a ?v1) ?v2))) :pattern ((fun_app$a (member$a (cons$ ?v0 ?v1)) ?v2)))) :named a11))
(assert (! (forall ((?v0 N_list$) (?v1 N_list_set$) (?v2 N$)) (=> (member$b ?v0 (shift$ ?v1 ?v2)) (member$b (cons$ ?v2 ?v0) ?v1))) :named a12))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (! (= (null$ (cons$ ?v0 ?v1)) false) :pattern ((cons$ ?v0 ?v1)))) :named a13))
(assert (! (forall ((?v0 N_bool_fun$) (?v1 N$) (?v2 N_list$)) (! (= (list_ex$ ?v0 (cons$ ?v1 ?v2)) (or (fun_app$a ?v0 ?v1) (list_ex$ ?v0 ?v2))) :pattern ((list_ex$ ?v0 (cons$ ?v1 ?v2))))) :named a14))
(assert (! (reg$ f$ tr$) :named a15))
(assert (! (member$c (root$ tr$) ns$) :named a16))
(assert (! (forall ((?v0 N_list$) (?v1 N_list_list$)) (= (member$b ?v0 (set$a ?v1)) (member$ ?v1 ?v0))) :named a17))
(assert (! (forall ((?v0 N$) (?v1 N_list$)) (= (member$c ?v0 (set$ ?v1)) (fun_app$a (member$a ?v1) ?v0))) :named a18))
(assert (! (forall ((?v0 N_list_list$) (?v1 N_list_set$)) (= (less_eq$a (set$a ?v0) ?v1) (forall ((?v2 N_list$)) (=> (member$b ?v2 (set$a ?v0)) (member$b ?v2 ?v1))))) :named a19))
(assert (! (forall ((?v0 N_list$) (?v1 N_set$)) (= (less_eq$ (set$ ?v0) ?v1) (forall ((?v2 N$)) (=> (member$c ?v2 (set$ ?v0)) (member$c ?v2 ?v1))))) :named a20))
(check-sat)
;(get-unsat-core)
