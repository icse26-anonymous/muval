; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 88
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort C_c_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort C_bool_fun$ 0)
(declare-sort A_b_c_sp_mu$ 0)
(declare-sort B_c_prod_set$ 0)
(declare-sort C_b_prod_set$ 0)
(declare-sort Bool_bool_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort B_c_bool_fun_fun$ 0)
(declare-sort C_c_bool_fun_fun$ 0)
(declare-sort A_a_b_c_sp_mu_fun$ 0)
(declare-sort A_stream_bool_fun$ 0)
(declare-sort B_c_prod_bool_fun$ 0)
(declare-sort A_b_c_sp_mu_bool_fun$ 0)
(declare-sort A_stream_a_stream_fun$ 0)
(declare-sort B_c_prod_b_c_prod_fun$ 0)
(declare-sort B_c_prod_c_b_prod_fun$ 0)
(declare-sort C_b_prod_b_c_prod_fun$ 0)
(declare-sort A_stream_b_c_prod_prod_set$ 0)
(declare-sort B_c_prod_a_stream_prod_set$ 0)
(declare-sort A_b_c_sp_mu_a_b_c_sp_mu_fun$ 0)
(declare-sort B_c_prod_a_stream_bool_fun_fun$ 0)
(declare-sort B_c_prod_a_stream_prod_bool_fun$ 0)
(declare-sort A_b_c_sp_mu_a_b_c_sp_mu_prod_set$ 0)
(declare-sort A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$ 0)
(declare-sort A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$ 0)
(declare-sort C_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun$ 0)
(declare-sort A_b_c_sp_mu_a_b_c_sp_mu_prod_set_bool_fun$ 0)
(declare-sort B_c_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$ 0)
(declare-sort A_stream_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun$ 0)
(declare-sort A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun$ 0)
(declare-sort A_stream_b_c_prod_prod_b_c_prod_a_stream_prod_fun$ 0)
(declare-sort B_c_prod_a_stream_prod_a_stream_b_c_prod_prod_fun$ 0)
(declare-sort B_c_prod_a_stream_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$ 0)
(declare-sort A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$ 0)
(declare-sort A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$ 0)
(declare-sort A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun$ 0)
(declare-sort A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun_a_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun_fun$ 0)
(declare-sort A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun_a_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$ 0)
(declare-datatypes () ((A_b_c_sp_mu_a_b_c_sp_mu_prod$ (pair$ (fst$ A_b_c_sp_mu$) (snd$ A_b_c_sp_mu$)))
  (B_c_prod$ (pair$a (fst$a B$) (snd$a C$)))))
(declare-codatatypes () ((A_stream$ (sCons$ (shd$ A$) (stl$ A_stream$)))))
(declare-datatypes () ((B_c_prod_a_stream_prod$ (pair$b (fst$b B_c_prod$) (snd$b A_stream$)))
  (A_stream_b_c_prod_prod$ (pair$c (fst$c A_stream$) (snd$c B_c_prod$)))
  (C_b_prod$ (pair$d (fst$d C$) (snd$d B$)))))
(declare-fun p$ (A_b_c_sp_mu$) Bool)
(declare-fun x$ () A_b_c_sp_mu$)
(declare-fun uu$ (A_b_c_sp_mu_a_b_c_sp_mu_prod_set$) A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$)
(declare-fun get$ (A_a_b_c_sp_mu_fun$) A_b_c_sp_mu$)
(declare-fun put$ (B$ C$) A_b_c_sp_mu$)
(declare-fun sub$ () A_b_c_sp_mu_a_b_c_sp_mu_prod_set$)
(declare-fun top$ () A_b_c_sp_mu_a_b_c_sp_mu_prod_set$)
(declare-fun uua$ () B_b_bool_fun_fun$)
(declare-fun uub$ () C_c_bool_fun_fun$)
(declare-fun uuc$ () A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$)
(declare-fun swap$ () A_stream_b_c_prod_prod_b_c_prod_a_stream_prod_fun$)
(declare-fun apfst$ (B_c_prod_b_c_prod_fun$ B_c_prod_a_stream_prod$) B_c_prod_a_stream_prod$)
(declare-fun apsnd$ (A_stream_a_stream_fun$ B_c_prod_a_stream_prod$) B_c_prod_a_stream_prod$)
(declare-fun curry$ (A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun$) A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$)
(declare-fun image$ (B_c_prod_a_stream_prod_a_stream_b_c_prod_prod_fun$ B_c_prod_a_stream_prod_set$) A_stream_b_c_prod_prod_set$)
(declare-fun swap$a () C_b_prod_b_c_prod_fun$)
(declare-fun swap$b () B_c_prod_a_stream_prod_a_stream_b_c_prod_prod_fun$)
(declare-fun swap$c () B_c_prod_c_b_prod_fun$)
(declare-fun swap$d () A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$)
(declare-fun apfst$a (B_b_fun$) B_c_prod_b_c_prod_fun$)
(declare-fun apfst$b (A_b_c_sp_mu_a_b_c_sp_mu_fun$) A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$)
(declare-fun apsnd$a (C_c_fun$) B_c_prod_b_c_prod_fun$)
(declare-fun apsnd$b (A_b_c_sp_mu_a_b_c_sp_mu_fun$) A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$)
(declare-fun curry$a (A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$) A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$)
(declare-fun curry$b (B_c_prod_a_stream_prod_bool_fun$ B_c_prod$) A_stream_bool_fun$)
(declare-fun curry$c (B_c_prod_bool_fun$) B_c_bool_fun_fun$)
(declare-fun image$a (B_c_prod_c_b_prod_fun$ B_c_prod_set$) C_b_prod_set$)
(declare-fun image$b (A_stream_b_c_prod_prod_b_c_prod_a_stream_prod_fun$ A_stream_b_c_prod_prod_set$) B_c_prod_a_stream_prod_set$)
(declare-fun image$c (C_b_prod_b_c_prod_fun$ C_b_prod_set$) B_c_prod_set$)
(declare-fun image$d (A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$ A_b_c_sp_mu_a_b_c_sp_mu_prod_set$) A_b_c_sp_mu_a_b_c_sp_mu_prod_set$)
(declare-fun member$ (A_b_c_sp_mu_a_b_c_sp_mu_prod$) A_b_c_sp_mu_a_b_c_sp_mu_prod_set_bool_fun$)
(declare-fun run_mu$ (A_b_c_sp_mu$ A_stream$) B_c_prod_a_stream_prod$)
(declare-fun collect$ (A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$) A_b_c_sp_mu_a_b_c_sp_mu_prod_set$)
(declare-fun fun_app$ (A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$ A_b_c_sp_mu_a_b_c_sp_mu_prod$) Bool)
(declare-fun member$a (B_c_prod_a_stream_prod$ B_c_prod_a_stream_prod_set$) Bool)
(declare-fun member$b (B_c_prod$ B_c_prod_set$) Bool)
(declare-fun member$c (A_stream_b_c_prod_prod$ A_stream_b_c_prod_prod_set$) Bool)
(declare-fun member$d (C_b_prod$ C_b_prod_set$) Bool)
(declare-fun fun_app$a (A_b_c_sp_mu_a_b_c_sp_mu_prod_set_bool_fun$ A_b_c_sp_mu_a_b_c_sp_mu_prod_set$) Bool)
(declare-fun fun_app$b (A_b_c_sp_mu_bool_fun$ A_b_c_sp_mu$) Bool)
(declare-fun fun_app$c (A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$ A_b_c_sp_mu$) A_b_c_sp_mu_bool_fun$)
(declare-fun fun_app$d (C_bool_fun$ C$) Bool)
(declare-fun fun_app$e (C_c_bool_fun_fun$ C$) C_bool_fun$)
(declare-fun fun_app$f (B_bool_fun$ B$) Bool)
(declare-fun fun_app$g (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$h (A_a_b_c_sp_mu_fun$ A$) A_b_c_sp_mu$)
(declare-fun fun_app$i (B_c_prod_a_stream_prod_bool_fun$ B_c_prod_a_stream_prod$) Bool)
(declare-fun fun_app$j (B_c_prod_bool_fun$ B_c_prod$) Bool)
(declare-fun fun_app$k (A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun$ A_b_c_sp_mu_a_b_c_sp_mu_prod$) A_b_c_sp_mu_a_b_c_sp_mu_prod_set$)
(declare-fun fun_app$l (A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun_a_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$ A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$) A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun$)
(declare-fun fun_app$m (A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun$ A_b_c_sp_mu$) A_b_c_sp_mu_a_b_c_sp_mu_prod_set$)
(declare-fun fun_app$n (A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$ A_b_c_sp_mu$) A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun$)
(declare-fun fun_app$o (A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun_a_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun_fun$ A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$) A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$)
(declare-fun fun_app$p (A_stream_b_c_prod_prod_b_c_prod_a_stream_prod_fun$ A_stream_b_c_prod_prod$) B_c_prod_a_stream_prod$)
(declare-fun fun_app$q (C_b_prod_b_c_prod_fun$ C_b_prod$) B_c_prod$)
(declare-fun fun_app$r (B_c_prod_a_stream_prod_a_stream_b_c_prod_prod_fun$ B_c_prod_a_stream_prod$) A_stream_b_c_prod_prod$)
(declare-fun fun_app$s (B_c_prod_c_b_prod_fun$ B_c_prod$) C_b_prod$)
(declare-fun fun_app$t (A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$ A_b_c_sp_mu_a_b_c_sp_mu_prod$) A_b_c_sp_mu_a_b_c_sp_mu_prod$)
(declare-fun fun_app$u (A_stream_bool_fun$ A_stream$) Bool)
(declare-fun fun_app$v (B_c_bool_fun_fun$ B$) C_bool_fun$)
(declare-fun fun_app$w (A_stream_a_stream_fun$ A_stream$) A_stream$)
(declare-fun fun_app$x (B_c_prod_b_c_prod_fun$ B_c_prod$) B_c_prod$)
(declare-fun fun_app$y (C_c_fun$ C$) C$)
(declare-fun fun_app$z (A_b_c_sp_mu_a_b_c_sp_mu_fun$ A_b_c_sp_mu$) A_b_c_sp_mu$)
(declare-fun pred_fun$ (A_b_c_sp_mu_bool_fun$ A_a_b_c_sp_mu_fun$) Bool)
(declare-fun case_prod$ () A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun_a_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun_fun$)
(declare-fun fun_app$aa (B_b_fun$ B$) B$)
(declare-fun fun_app$ab (B_c_prod_a_stream_bool_fun_fun$ B_c_prod$) A_stream_bool_fun$)
(declare-fun fun_app$ac (A_stream_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun$ A_stream$) A_b_c_sp_mu_a_b_c_sp_mu_prod_set$)
(declare-fun fun_app$ad (B_c_prod_a_stream_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$ B_c_prod$) A_stream_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun$)
(declare-fun fun_app$ae (C_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun$ C$) A_b_c_sp_mu_a_b_c_sp_mu_prod_set$)
(declare-fun fun_app$af (B_c_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$ B$) C_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun$)
(declare-fun fun_app$ag (Bool_bool_fun$ Bool) Bool)
(declare-fun rel_sp_mu$ (B_b_bool_fun_fun$ C_c_bool_fun_fun$) A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$)
(declare-fun case_prod$a () A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun_a_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$)
(declare-fun case_prod$b (B_c_prod_a_stream_bool_fun_fun$) B_c_prod_a_stream_prod_bool_fun$)
(declare-fun case_prod$c (B_c_bool_fun_fun$) B_c_prod_bool_fun$)
(declare-fun case_prod$d (B_c_prod_a_stream_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$ B_c_prod_a_stream_prod$) A_b_c_sp_mu_a_b_c_sp_mu_prod_set$)
(declare-fun case_prod$e (B_c_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$ B_c_prod$) A_b_c_sp_mu_a_b_c_sp_mu_prod_set$)
(declare-fun pred_sp_mu$ (B_bool_fun$ C_bool_fun$) A_b_c_sp_mu_bool_fun$)
(declare-fun internal_split$ () A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun_a_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$)
(declare-fun internal_split$a () A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun_a_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun_fun$)
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_set$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (! (= (fun_app$ (uu$ ?v0) ?v1) (fun_app$a (member$ ?v1) ?v0)) :pattern ((fun_app$ (uu$ ?v0) ?v1)))) :named a0))
(assert (! (forall ((?v0 A_b_c_sp_mu$) (?v1 A_b_c_sp_mu$)) (! (= (fun_app$b (fun_app$c uuc$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$b (fun_app$c uuc$ ?v0) ?v1)))) :named a1))
(assert (! (forall ((?v0 C$) (?v1 C$)) (! (= (fun_app$d (fun_app$e uub$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$d (fun_app$e uub$ ?v0) ?v1)))) :named a2))
(assert (! (forall ((?v0 B$) (?v1 B$)) (! (= (fun_app$f (fun_app$g uua$ ?v0) ?v1) (= ?v0 ?v1)) :pattern ((fun_app$f (fun_app$g uua$ ?v0) ?v1)))) :named a3))
(assert (! (not (p$ x$)) :named a4))
(assert (! (forall ((?v0 A_b_c_sp_mu$)) (=> (forall ((?v1 A_b_c_sp_mu$)) (=> (fun_app$a (member$ (pair$ ?v1 ?v0)) sub$) (p$ ?v1))) (p$ ?v0))) :named a5))
(assert (! (forall ((?v0 A_b_c_sp_mu$)) (=> (forall ((?v1 A_b_c_sp_mu$)) (=> (exists ((?v2 A$) (?v3 A_a_b_c_sp_mu_fun$)) (and (= ?v1 (fun_app$h ?v3 ?v2)) (= ?v0 (get$ ?v3)))) (p$ ?v1))) (p$ ?v0))) :named a6))
(assert (! (forall ((?v0 B$) (?v1 C$) (?v2 B$) (?v3 C$)) (= (= (put$ ?v0 ?v1) (put$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a7))
(assert (! (forall ((?v0 A_a_b_c_sp_mu_fun$) (?v1 A_a_b_c_sp_mu_fun$)) (= (= (get$ ?v0) (get$ ?v1)) (= ?v0 ?v1))) :named a8))
(assert (! (forall ((?v0 A_a_b_c_sp_mu_fun$) (?v1 A$)) (fun_app$a (member$ (pair$ (fun_app$h ?v0 ?v1) (get$ ?v0))) sub$)) :named a9))
(assert (! (forall ((?v0 A_b_c_sp_mu$)) (=> (and (forall ((?v1 A_a_b_c_sp_mu_fun$)) (=> (= ?v0 (get$ ?v1)) false)) (forall ((?v1 B$) (?v2 C$)) (=> (= ?v0 (put$ ?v1 ?v2)) false))) false)) :named a10))
(assert (! (forall ((?v0 A_a_b_c_sp_mu_fun$) (?v1 B$) (?v2 C$)) (not (= (get$ ?v0) (put$ ?v1 ?v2)))) :named a11))
(assert (! (forall ((?v0 B_c_prod$) (?v1 A_stream$) (?v2 B_c_prod$) (?v3 A_stream$)) (= (= (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a12))
(assert (! (forall ((?v0 B$) (?v1 C$) (?v2 B$) (?v3 C$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a13))
(assert (! (forall ((?v0 A_b_c_sp_mu$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$) (?v3 A_b_c_sp_mu$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a14))
(assert (! (forall ((?v0 B_c_prod$) (?v1 A_stream$) (?v2 B_c_prod$) (?v3 A_stream$)) (= (= (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a15))
(assert (! (forall ((?v0 B$) (?v1 C$) (?v2 B$) (?v3 C$)) (= (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a16))
(assert (! (forall ((?v0 A_b_c_sp_mu$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$) (?v3 A_b_c_sp_mu$)) (= (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a17))
(assert (! (forall ((?v0 B$) (?v1 C$) (?v2 A_stream$)) (! (= (run_mu$ (put$ ?v0 ?v1) ?v2) (pair$b (pair$a ?v0 ?v1) ?v2)) :pattern ((run_mu$ (put$ ?v0 ?v1) ?v2)))) :named a18))
(assert (! (forall ((?v0 B_bool_fun$) (?v1 C_bool_fun$) (?v2 B$) (?v3 C$)) (! (= (fun_app$b (pred_sp_mu$ ?v0 ?v1) (put$ ?v2 ?v3)) (and (fun_app$f ?v0 ?v2) (fun_app$d ?v1 ?v3))) :pattern ((fun_app$b (pred_sp_mu$ ?v0 ?v1) (put$ ?v2 ?v3))))) :named a19))
(assert (! (forall ((?v0 B_c_prod_a_stream_prod$)) (=> (forall ((?v1 B_c_prod$) (?v2 A_stream$)) (=> (= ?v0 (pair$b ?v1 ?v2)) false)) false)) :named a20))
(assert (! (forall ((?v0 B_c_prod$)) (=> (forall ((?v1 B$) (?v2 C$)) (=> (= ?v0 (pair$a ?v1 ?v2)) false)) false)) :named a21))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (=> (forall ((?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a22))
(assert (! (forall ((?v0 B_c_prod_a_stream_prod$)) (exists ((?v1 B_c_prod$) (?v2 A_stream$)) (= ?v0 (pair$b ?v1 ?v2)))) :named a23))
(assert (! (forall ((?v0 B_c_prod$)) (exists ((?v1 B$) (?v2 C$)) (= ?v0 (pair$a ?v1 ?v2)))) :named a24))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (exists ((?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (= ?v0 (pair$ ?v1 ?v2)))) :named a25))
(assert (! (forall ((?v0 B_c_prod$) (?v1 A_stream$) (?v2 B_c_prod$) (?v3 A_stream$)) (=> (and (= (pair$b ?v0 ?v1) (pair$b ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a26))
(assert (! (forall ((?v0 B$) (?v1 C$) (?v2 B$) (?v3 C$)) (=> (and (= (pair$a ?v0 ?v1) (pair$a ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a27))
(assert (! (forall ((?v0 A_b_c_sp_mu$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$) (?v3 A_b_c_sp_mu$)) (=> (and (= (pair$ ?v0 ?v1) (pair$ ?v2 ?v3)) (=> (and (= ?v0 ?v2) (= ?v1 ?v3)) false)) false)) :named a28))
(assert (! (forall ((?v0 B_c_prod_a_stream_prod$)) (=> (forall ((?v1 B_c_prod$) (?v2 A_stream$)) (=> (= ?v0 (pair$b ?v1 ?v2)) false)) false)) :named a29))
(assert (! (forall ((?v0 B_c_prod$)) (=> (forall ((?v1 B$) (?v2 C$)) (=> (= ?v0 (pair$a ?v1 ?v2)) false)) false)) :named a30))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (=> (forall ((?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (=> (= ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a31))
(assert (! (forall ((?v0 B_c_prod_a_stream_prod_bool_fun$) (?v1 B_c_prod_a_stream_prod$)) (=> (forall ((?v2 B_c_prod$) (?v3 A_stream$)) (fun_app$i ?v0 (pair$b ?v2 ?v3))) (fun_app$i ?v0 ?v1))) :named a32))
(assert (! (forall ((?v0 B_c_prod_bool_fun$) (?v1 B_c_prod$)) (=> (forall ((?v2 B$) (?v3 C$)) (fun_app$j ?v0 (pair$a ?v2 ?v3))) (fun_app$j ?v0 ?v1))) :named a33))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (=> (forall ((?v2 A_b_c_sp_mu$) (?v3 A_b_c_sp_mu$)) (fun_app$ ?v0 (pair$ ?v2 ?v3))) (fun_app$ ?v0 ?v1))) :named a34))
(assert (! (forall ((?v0 B_bool_fun$) (?v1 C_bool_fun$) (?v2 A_a_b_c_sp_mu_fun$)) (! (= (fun_app$b (pred_sp_mu$ ?v0 ?v1) (get$ ?v2)) (pred_fun$ (pred_sp_mu$ ?v0 ?v1) ?v2)) :pattern ((fun_app$b (pred_sp_mu$ ?v0 ?v1) (get$ ?v2))))) :named a35))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (! (= (fun_app$k (fun_app$l internal_split$ ?v0) (pair$ ?v1 ?v2)) (fun_app$m (fun_app$n ?v0 ?v1) ?v2)) :pattern ((fun_app$k (fun_app$l internal_split$ ?v0) (pair$ ?v1 ?v2))))) :named a36))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (! (= (fun_app$ (fun_app$o internal_split$a ?v0) (pair$ ?v1 ?v2)) (fun_app$b (fun_app$c ?v0 ?v1) ?v2)) :pattern ((fun_app$ (fun_app$o internal_split$a ?v0) (pair$ ?v1 ?v2))))) :named a37))
(assert (! (forall ((?v0 B_c_prod$) (?v1 A_stream$) (?v2 B_c_prod_a_stream_prod_set$) (?v3 A_stream$)) (=> (and (member$a (pair$b ?v0 ?v1) ?v2) (= ?v3 ?v1)) (member$a (pair$b ?v0 ?v3) ?v2))) :named a38))
(assert (! (forall ((?v0 B$) (?v1 C$) (?v2 B_c_prod_set$) (?v3 C$)) (=> (and (member$b (pair$a ?v0 ?v1) ?v2) (= ?v3 ?v1)) (member$b (pair$a ?v0 ?v3) ?v2))) :named a39))
(assert (! (forall ((?v0 A_b_c_sp_mu$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_prod_set$) (?v3 A_b_c_sp_mu$)) (=> (and (fun_app$a (member$ (pair$ ?v0 ?v1)) ?v2) (= ?v3 ?v1)) (fun_app$a (member$ (pair$ ?v0 ?v3)) ?v2))) :named a40))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (! (= (fun_app$m (fun_app$n (curry$ ?v0) ?v1) ?v2) (fun_app$k ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$m (fun_app$n (curry$ ?v0) ?v1) ?v2)))) :named a41))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (! (= (fun_app$b (fun_app$c (curry$a ?v0) ?v1) ?v2) (fun_app$ ?v0 (pair$ ?v1 ?v2))) :pattern ((fun_app$b (fun_app$c (curry$a ?v0) ?v1) ?v2)))) :named a42))
(assert (! (forall ((?v0 A_stream$) (?v1 B_c_prod$)) (= (fun_app$p swap$ (pair$c ?v0 ?v1)) (pair$b ?v1 ?v0))) :named a43))
(assert (! (forall ((?v0 C$) (?v1 B$)) (= (fun_app$q swap$a (pair$d ?v0 ?v1)) (pair$a ?v1 ?v0))) :named a44))
(assert (! (forall ((?v0 B_c_prod$) (?v1 A_stream$)) (= (fun_app$r swap$b (pair$b ?v0 ?v1)) (pair$c ?v1 ?v0))) :named a45))
(assert (! (forall ((?v0 B$) (?v1 C$)) (= (fun_app$s swap$c (pair$a ?v0 ?v1)) (pair$d ?v1 ?v0))) :named a46))
(assert (! (forall ((?v0 A_b_c_sp_mu$) (?v1 A_b_c_sp_mu$)) (= (fun_app$t swap$d (pair$ ?v0 ?v1)) (pair$ ?v1 ?v0))) :named a47))
(assert (! (forall ((?v0 B_c_prod_a_stream_prod_bool_fun$) (?v1 B_c_prod$) (?v2 A_stream$)) (=> (fun_app$i ?v0 (pair$b ?v1 ?v2)) (fun_app$u (curry$b ?v0 ?v1) ?v2))) :named a48))
(assert (! (forall ((?v0 B_c_prod_bool_fun$) (?v1 B$) (?v2 C$)) (=> (fun_app$j ?v0 (pair$a ?v1 ?v2)) (fun_app$d (fun_app$v (curry$c ?v0) ?v1) ?v2))) :named a49))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (=> (fun_app$ ?v0 (pair$ ?v1 ?v2)) (fun_app$b (fun_app$c (curry$a ?v0) ?v1) ?v2))) :named a50))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (= (fun_app$t swap$d (fun_app$t swap$d ?v0)) ?v0)) :named a51))
(assert (! (forall ((?v0 B_c_prod_a_stream_prod_bool_fun$) (?v1 B_c_prod$) (?v2 A_stream$)) (=> (and (fun_app$u (curry$b ?v0 ?v1) ?v2) (=> (fun_app$i ?v0 (pair$b ?v1 ?v2)) false)) false)) :named a52))
(assert (! (forall ((?v0 B_c_prod_bool_fun$) (?v1 B$) (?v2 C$)) (=> (and (fun_app$d (fun_app$v (curry$c ?v0) ?v1) ?v2) (=> (fun_app$j ?v0 (pair$a ?v1 ?v2)) false)) false)) :named a53))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (=> (and (fun_app$b (fun_app$c (curry$a ?v0) ?v1) ?v2) (=> (fun_app$ ?v0 (pair$ ?v1 ?v2)) false)) false)) :named a54))
(assert (! (forall ((?v0 B_c_prod_a_stream_prod_bool_fun$) (?v1 B_c_prod$) (?v2 A_stream$)) (=> (fun_app$u (curry$b ?v0 ?v1) ?v2) (fun_app$i ?v0 (pair$b ?v1 ?v2)))) :named a55))
(assert (! (forall ((?v0 B_c_prod_bool_fun$) (?v1 B$) (?v2 C$)) (=> (fun_app$d (fun_app$v (curry$c ?v0) ?v1) ?v2) (fun_app$j ?v0 (pair$a ?v1 ?v2)))) :named a56))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (=> (fun_app$b (fun_app$c (curry$a ?v0) ?v1) ?v2) (fun_app$ ?v0 (pair$ ?v1 ?v2)))) :named a57))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$)) (=> (forall ((?v2 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (= (fun_app$ ?v0 ?v2) (fun_app$ ?v1 ?v2))) (= (collect$ ?v0) (collect$ ?v1)))) :named a58))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_set$)) (= (collect$ (uu$ ?v0)) ?v0)) :named a59))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$)) (= (fun_app$a (member$ ?v0) (collect$ ?v1)) (fun_app$ ?v1 ?v0))) :named a60))
(assert (! (forall ((?v0 A_stream$) (?v1 B_c_prod$) (?v2 B_c_prod_a_stream_prod_set$)) (= (member$c (pair$c ?v0 ?v1) (image$ swap$b ?v2)) (member$a (pair$b ?v1 ?v0) ?v2))) :named a61))
(assert (! (forall ((?v0 C$) (?v1 B$) (?v2 B_c_prod_set$)) (= (member$d (pair$d ?v0 ?v1) (image$a swap$c ?v2)) (member$b (pair$a ?v1 ?v0) ?v2))) :named a62))
(assert (! (forall ((?v0 B_c_prod$) (?v1 A_stream$) (?v2 A_stream_b_c_prod_prod_set$)) (= (member$a (pair$b ?v0 ?v1) (image$b swap$ ?v2)) (member$c (pair$c ?v1 ?v0) ?v2))) :named a63))
(assert (! (forall ((?v0 B$) (?v1 C$) (?v2 C_b_prod_set$)) (= (member$b (pair$a ?v0 ?v1) (image$c swap$a ?v2)) (member$d (pair$d ?v1 ?v0) ?v2))) :named a64))
(assert (! (forall ((?v0 A_b_c_sp_mu$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_prod_set$)) (= (fun_app$a (member$ (pair$ ?v0 ?v1)) (image$d swap$d ?v2)) (fun_app$a (member$ (pair$ ?v1 ?v0)) ?v2))) :named a65))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 B$) (?v3 C$) (?v4 A_a_b_c_sp_mu_fun$)) (not (fun_app$b (fun_app$c (rel_sp_mu$ ?v0 ?v1) (put$ ?v2 ?v3)) (get$ ?v4)))) :named a66))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 A_a_b_c_sp_mu_fun$) (?v3 B$) (?v4 C$)) (not (fun_app$b (fun_app$c (rel_sp_mu$ ?v0 ?v1) (get$ ?v2)) (put$ ?v3 ?v4)))) :named a67))
(assert (! (= internal_split$a case_prod$) :named a68))
(assert (! (= internal_split$ case_prod$a) :named a69))
(assert (! (forall ((?v0 A_stream_a_stream_fun$) (?v1 B_c_prod$) (?v2 A_stream$)) (! (= (apsnd$ ?v0 (pair$b ?v1 ?v2)) (pair$b ?v1 (fun_app$w ?v0 ?v2))) :pattern ((apsnd$ ?v0 (pair$b ?v1 ?v2))))) :named a70))
(assert (! (forall ((?v0 C_c_fun$) (?v1 B$) (?v2 C$)) (! (= (fun_app$x (apsnd$a ?v0) (pair$a ?v1 ?v2)) (pair$a ?v1 (fun_app$y ?v0 ?v2))) :pattern ((fun_app$x (apsnd$a ?v0) (pair$a ?v1 ?v2))))) :named a71))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (! (= (fun_app$t (apsnd$b ?v0) (pair$ ?v1 ?v2)) (pair$ ?v1 (fun_app$z ?v0 ?v2))) :pattern ((fun_app$t (apsnd$b ?v0) (pair$ ?v1 ?v2))))) :named a72))
(assert (! (forall ((?v0 B_c_prod_b_c_prod_fun$) (?v1 B_c_prod$) (?v2 A_stream$)) (! (= (apfst$ ?v0 (pair$b ?v1 ?v2)) (pair$b (fun_app$x ?v0 ?v1) ?v2)) :pattern ((apfst$ ?v0 (pair$b ?v1 ?v2))))) :named a73))
(assert (! (forall ((?v0 B_b_fun$) (?v1 B$) (?v2 C$)) (! (= (fun_app$x (apfst$a ?v0) (pair$a ?v1 ?v2)) (pair$a (fun_app$aa ?v0 ?v1) ?v2)) :pattern ((fun_app$x (apfst$a ?v0) (pair$a ?v1 ?v2))))) :named a74))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (! (= (fun_app$t (apfst$b ?v0) (pair$ ?v1 ?v2)) (pair$ (fun_app$z ?v0 ?v1) ?v2)) :pattern ((fun_app$t (apfst$b ?v0) (pair$ ?v1 ?v2))))) :named a75))
(assert (! (forall ((?v0 B_c_prod_a_stream_bool_fun_fun$) (?v1 B_c_prod$) (?v2 A_stream$)) (=> (fun_app$u (fun_app$ab ?v0 ?v1) ?v2) (fun_app$i (case_prod$b ?v0) (pair$b ?v1 ?v2)))) :named a76))
(assert (! (forall ((?v0 B_c_bool_fun_fun$) (?v1 B$) (?v2 C$)) (=> (fun_app$d (fun_app$v ?v0 ?v1) ?v2) (fun_app$j (case_prod$c ?v0) (pair$a ?v1 ?v2)))) :named a77))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (=> (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (fun_app$ (fun_app$o case_prod$ ?v0) (pair$ ?v1 ?v2)))) :named a78))
(assert (! (forall ((?v0 B_c_prod_a_stream_bool_fun_fun$) (?v1 B_c_prod$) (?v2 A_stream$)) (=> (fun_app$u (fun_app$ab ?v0 ?v1) ?v2) (fun_app$i (case_prod$b ?v0) (pair$b ?v1 ?v2)))) :named a79))
(assert (! (forall ((?v0 B_c_bool_fun_fun$) (?v1 B$) (?v2 C$)) (=> (fun_app$d (fun_app$v ?v0 ?v1) ?v2) (fun_app$j (case_prod$c ?v0) (pair$a ?v1 ?v2)))) :named a80))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (=> (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (fun_app$ (fun_app$o case_prod$ ?v0) (pair$ ?v1 ?v2)))) :named a81))
(assert (! (forall ((?v0 B_c_prod_a_stream_prod$) (?v1 B_c_prod_a_stream_bool_fun_fun$)) (=> (forall ((?v2 B_c_prod$) (?v3 A_stream$)) (=> (= ?v0 (pair$b ?v2 ?v3)) (fun_app$u (fun_app$ab ?v1 ?v2) ?v3))) (fun_app$i (case_prod$b ?v1) ?v0))) :named a82))
(assert (! (forall ((?v0 B_c_prod$) (?v1 B_c_bool_fun_fun$)) (=> (forall ((?v2 B$) (?v3 C$)) (=> (= ?v0 (pair$a ?v2 ?v3)) (fun_app$d (fun_app$v ?v1 ?v2) ?v3))) (fun_app$j (case_prod$c ?v1) ?v0))) :named a83))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$)) (=> (forall ((?v2 A_b_c_sp_mu$) (?v3 A_b_c_sp_mu$)) (=> (= ?v0 (pair$ ?v2 ?v3)) (fun_app$b (fun_app$c ?v1 ?v2) ?v3))) (fun_app$ (fun_app$o case_prod$ ?v1) ?v0))) :named a84))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 B_c_prod_a_stream_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$) (?v2 B_c_prod$) (?v3 A_stream$)) (=> (fun_app$a (member$ ?v0) (fun_app$ac (fun_app$ad ?v1 ?v2) ?v3)) (fun_app$a (member$ ?v0) (case_prod$d ?v1 (pair$b ?v2 ?v3))))) :named a85))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 B_c_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$) (?v2 B$) (?v3 C$)) (=> (fun_app$a (member$ ?v0) (fun_app$ae (fun_app$af ?v1 ?v2) ?v3)) (fun_app$a (member$ ?v0) (case_prod$e ?v1 (pair$a ?v2 ?v3))))) :named a86))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$) (?v2 A_b_c_sp_mu$) (?v3 A_b_c_sp_mu$)) (=> (fun_app$a (member$ ?v0) (fun_app$m (fun_app$n ?v1 ?v2) ?v3)) (fun_app$a (member$ ?v0) (fun_app$k (fun_app$l case_prod$a ?v1) (pair$ ?v2 ?v3))))) :named a87))
(assert (! (forall ((?v0 B_c_prod_a_stream_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v2 B_c_prod_a_stream_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$)) (=> (forall ((?v3 B_c_prod$) (?v4 A_stream$)) (=> (= ?v0 (pair$b ?v3 ?v4)) (fun_app$a (member$ ?v1) (fun_app$ac (fun_app$ad ?v2 ?v3) ?v4)))) (fun_app$a (member$ ?v1) (case_prod$d ?v2 ?v0)))) :named a88))
(assert (! (forall ((?v0 B_c_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v2 B_c_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$)) (=> (forall ((?v3 B$) (?v4 C$)) (=> (= ?v0 (pair$a ?v3 ?v4)) (fun_app$a (member$ ?v1) (fun_app$ae (fun_app$af ?v2 ?v3) ?v4)))) (fun_app$a (member$ ?v1) (case_prod$e ?v2 ?v0)))) :named a89))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$)) (=> (forall ((?v3 A_b_c_sp_mu$) (?v4 A_b_c_sp_mu$)) (=> (= ?v0 (pair$ ?v3 ?v4)) (fun_app$a (member$ ?v1) (fun_app$m (fun_app$n ?v2 ?v3) ?v4)))) (fun_app$a (member$ ?v1) (fun_app$k (fun_app$l case_prod$a ?v2) ?v0)))) :named a90))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$)) (= (curry$a (fun_app$o case_prod$ ?v0)) ?v0)) :named a91))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$)) (= (curry$ (fun_app$l case_prod$a ?v0)) ?v0)) :named a92))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$)) (= (fun_app$o case_prod$ (curry$a ?v0)) ?v0)) :named a93))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun$)) (= (fun_app$l case_prod$a (curry$ ?v0)) ?v0)) :named a94))
(assert (! (= (rel_sp_mu$ uua$ uub$) uuc$) :named a95))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_fun$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_fun$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (= (fun_app$t (apsnd$b ?v0) (fun_app$t (apfst$b ?v1) ?v2)) (fun_app$t (apfst$b ?v1) (fun_app$t (apsnd$b ?v0) ?v2)))) :named a96))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$ (fun_app$o case_prod$ ?v2) ?v0) (fun_app$ (fun_app$o case_prod$ ?v2) ?v1)))) :named a97))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$)) (=> (= ?v0 ?v1) (= (fun_app$k (fun_app$l case_prod$a ?v2) ?v0) (fun_app$k (fun_app$l case_prod$a ?v2) ?v1)))) :named a98))
(assert (! (forall ((?v0 B_c_prod_a_stream_bool_fun_fun$) (?v1 B_c_prod_a_stream_prod$)) (=> (and (fun_app$i (case_prod$b ?v0) ?v1) (forall ((?v2 B_c_prod$) (?v3 A_stream$)) (=> (and (= ?v1 (pair$b ?v2 ?v3)) (fun_app$u (fun_app$ab ?v0 ?v2) ?v3)) false))) false)) :named a99))
(assert (! (forall ((?v0 B_c_bool_fun_fun$) (?v1 B_c_prod$)) (=> (and (fun_app$j (case_prod$c ?v0) ?v1) (forall ((?v2 B$) (?v3 C$)) (=> (and (= ?v1 (pair$a ?v2 ?v3)) (fun_app$d (fun_app$v ?v0 ?v2) ?v3)) false))) false)) :named a100))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (=> (and (fun_app$ (fun_app$o case_prod$ ?v0) ?v1) (forall ((?v2 A_b_c_sp_mu$) (?v3 A_b_c_sp_mu$)) (=> (and (= ?v1 (pair$ ?v2 ?v3)) (fun_app$b (fun_app$c ?v0 ?v2) ?v3)) false))) false)) :named a101))
(assert (! (forall ((?v0 B_c_prod_a_stream_bool_fun_fun$) (?v1 B_c_prod$) (?v2 A_stream$)) (=> (fun_app$i (case_prod$b ?v0) (pair$b ?v1 ?v2)) (fun_app$u (fun_app$ab ?v0 ?v1) ?v2))) :named a102))
(assert (! (forall ((?v0 B_c_bool_fun_fun$) (?v1 B$) (?v2 C$)) (=> (fun_app$j (case_prod$c ?v0) (pair$a ?v1 ?v2)) (fun_app$d (fun_app$v ?v0 ?v1) ?v2))) :named a103))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (=> (fun_app$ (fun_app$o case_prod$ ?v0) (pair$ ?v1 ?v2)) (fun_app$b (fun_app$c ?v0 ?v1) ?v2))) :named a104))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 B_c_prod_a_stream_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$) (?v2 B_c_prod_a_stream_prod$)) (=> (and (fun_app$a (member$ ?v0) (case_prod$d ?v1 ?v2)) (forall ((?v3 B_c_prod$) (?v4 A_stream$)) (=> (and (= ?v2 (pair$b ?v3 ?v4)) (fun_app$a (member$ ?v0) (fun_app$ac (fun_app$ad ?v1 ?v3) ?v4))) false))) false)) :named a105))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 B_c_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$) (?v2 B_c_prod$)) (=> (and (fun_app$a (member$ ?v0) (case_prod$e ?v1 ?v2)) (forall ((?v3 B$) (?v4 C$)) (=> (and (= ?v2 (pair$a ?v3 ?v4)) (fun_app$a (member$ ?v0) (fun_app$ae (fun_app$af ?v1 ?v3) ?v4))) false))) false)) :named a106))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (=> (and (fun_app$a (member$ ?v0) (fun_app$k (fun_app$l case_prod$a ?v1) ?v2)) (forall ((?v3 A_b_c_sp_mu$) (?v4 A_b_c_sp_mu$)) (=> (and (= ?v2 (pair$ ?v3 ?v4)) (fun_app$a (member$ ?v0) (fun_app$m (fun_app$n ?v1 ?v3) ?v4))) false))) false)) :named a107))
(assert (! (forall ((?v0 Bool_bool_fun$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (=> (and (fun_app$ag ?v0 (fun_app$ (fun_app$o case_prod$ ?v1) ?v2)) (forall ((?v3 A_b_c_sp_mu$) (?v4 A_b_c_sp_mu$)) (=> (and (= ?v2 (pair$ ?v3 ?v4)) (fun_app$ag ?v0 (fun_app$b (fun_app$c ?v1 ?v3) ?v4))) false))) false)) :named a108))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_set_bool_fun$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (=> (and (fun_app$a ?v0 (fun_app$k (fun_app$l case_prod$a ?v1) ?v2)) (forall ((?v3 A_b_c_sp_mu$) (?v4 A_b_c_sp_mu$)) (=> (and (= ?v2 (pair$ ?v3 ?v4)) (fun_app$a ?v0 (fun_app$m (fun_app$n ?v1 ?v3) ?v4))) false))) false)) :named a109))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (! (= (fun_app$ (fun_app$o case_prod$ ?v0) (pair$ ?v1 ?v2)) (fun_app$b (fun_app$c ?v0 ?v1) ?v2)) :pattern ((fun_app$ (fun_app$o case_prod$ ?v0) (pair$ ?v1 ?v2))))) :named a110))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (! (= (fun_app$k (fun_app$l case_prod$a ?v0) (pair$ ?v1 ?v2)) (fun_app$m (fun_app$n ?v0 ?v1) ?v2)) :pattern ((fun_app$k (fun_app$l case_prod$a ?v0) (pair$ ?v1 ?v2))))) :named a111))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (! (= (fun_app$ (fun_app$o case_prod$ ?v0) (pair$ ?v1 ?v2)) (fun_app$b (fun_app$c ?v0 ?v1) ?v2)) :pattern ((fun_app$ (fun_app$o case_prod$ ?v0) (pair$ ?v1 ?v2))))) :named a112))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$) (?v1 A_b_c_sp_mu$) (?v2 A_b_c_sp_mu$)) (! (= (fun_app$k (fun_app$l case_prod$a ?v0) (pair$ ?v1 ?v2)) (fun_app$m (fun_app$n ?v0 ?v1) ?v2)) :pattern ((fun_app$k (fun_app$l case_prod$a ?v0) (pair$ ?v1 ?v2))))) :named a113))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 B$) (?v2 B$) (?v3 C_c_bool_fun_fun$) (?v4 C$) (?v5 C$)) (=> (and (fun_app$f (fun_app$g ?v0 ?v1) ?v2) (fun_app$d (fun_app$e ?v3 ?v4) ?v5)) (fun_app$b (fun_app$c (rel_sp_mu$ ?v0 ?v3) (put$ ?v1 ?v4)) (put$ ?v2 ?v5)))) :named a114))
(assert (! (forall ((?v0 B_b_bool_fun_fun$) (?v1 C_c_bool_fun_fun$) (?v2 B$) (?v3 C$) (?v4 B$) (?v5 C$)) (! (= (fun_app$b (fun_app$c (rel_sp_mu$ ?v0 ?v1) (put$ ?v2 ?v3)) (put$ ?v4 ?v5)) (and (fun_app$f (fun_app$g ?v0 ?v2) ?v4) (fun_app$d (fun_app$e ?v1 ?v3) ?v5))) :pattern ((fun_app$b (fun_app$c (rel_sp_mu$ ?v0 ?v1) (put$ ?v2 ?v3)) (put$ ?v4 ?v5))))) :named a115))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v3 A_b_c_sp_mu_a_b_c_sp_mu_prod_set$)) (=> (and (= ?v0 (fun_app$t ?v1 ?v2)) (fun_app$a (member$ ?v2) ?v3)) (fun_app$a (member$ ?v0) (image$d ?v1 ?v3)))) :named a116))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_bool_fun_fun$) (?v3 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (=> (and (forall ((?v4 A_b_c_sp_mu$) (?v5 A_b_c_sp_mu$)) (=> (= (pair$ ?v4 ?v5) ?v0) (= (fun_app$b (fun_app$c ?v1 ?v4) ?v5) (fun_app$b (fun_app$c ?v2 ?v4) ?v5)))) (= ?v3 ?v0)) (= (fun_app$ (fun_app$o case_prod$ ?v1) ?v3) (fun_app$ (fun_app$o case_prod$ ?v2) ?v0)))) :named a117))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_a_b_c_sp_mu_prod_set_fun_fun$) (?v3 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (=> (and (forall ((?v4 A_b_c_sp_mu$) (?v5 A_b_c_sp_mu$)) (=> (= (pair$ ?v4 ?v5) ?v0) (= (fun_app$m (fun_app$n ?v1 ?v4) ?v5) (fun_app$m (fun_app$n ?v2 ?v4) ?v5)))) (= ?v3 ?v0)) (= (fun_app$k (fun_app$l case_prod$a ?v1) ?v3) (fun_app$k (fun_app$l case_prod$a ?v2) ?v0)))) :named a118))
(assert (! (= (image$d swap$d top$) top$) :named a119))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod_set$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$)) (=> (fun_app$a (member$ ?v0) ?v1) (fun_app$a (member$ (fun_app$t ?v2 ?v0)) (image$d ?v2 ?v1)))) :named a120))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod_set$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v3 A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$)) (=> (and (fun_app$a (member$ ?v0) ?v1) (= ?v2 (fun_app$t ?v3 ?v0))) (fun_app$a (member$ ?v2) (image$d ?v3 ?v1)))) :named a121))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod_set$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$)) (=> (forall ((?v3 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (=> (fun_app$a (member$ ?v3) (image$d ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (forall ((?v3 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (=> (fun_app$a (member$ ?v3) ?v1) (fun_app$ ?v2 (fun_app$t ?v0 ?v3)))))) :named a122))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod_set$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_prod_bool_fun$)) (=> (exists ((?v3 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (and (fun_app$a (member$ ?v3) (image$d ?v0 ?v1)) (fun_app$ ?v2 ?v3))) (exists ((?v3 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (and (fun_app$a (member$ ?v3) ?v1) (fun_app$ ?v2 (fun_app$t ?v0 ?v3)))))) :named a123))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_set$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod_set$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$) (?v3 A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$)) (=> (and (= ?v0 ?v1) (forall ((?v4 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (=> (fun_app$a (member$ ?v4) ?v1) (= (fun_app$t ?v2 ?v4) (fun_app$t ?v3 ?v4))))) (= (image$d ?v2 ?v0) (image$d ?v3 ?v1)))) :named a124))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (fun_app$a (member$ ?v0) top$)) :named a125))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (fun_app$a (member$ (fun_app$t ?v0 ?v1)) (image$d ?v0 top$))) :named a126))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (=> (= ?v0 (fun_app$t ?v1 ?v2)) (fun_app$a (member$ ?v0) (image$d ?v1 top$)))) :named a127))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod_set$)) (=> (forall ((?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (fun_app$a (member$ ?v1) ?v0)) (= top$ ?v0))) :named a128))
(assert (! (exists ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (fun_app$a (member$ ?v0) top$)) :named a129))
(assert (! (forall ((?v0 A_b_c_sp_mu_a_b_c_sp_mu_prod$) (?v1 A_b_c_sp_mu_a_b_c_sp_mu_prod_a_b_c_sp_mu_a_b_c_sp_mu_prod_fun$) (?v2 A_b_c_sp_mu_a_b_c_sp_mu_prod_set$)) (= (fun_app$a (member$ ?v0) (image$d ?v1 ?v2)) (exists ((?v3 A_b_c_sp_mu_a_b_c_sp_mu_prod$)) (and (fun_app$a (member$ ?v3) ?v2) (= ?v0 (fun_app$t ?v1 ?v3)))))) :named a130))
(check-sat)
;(get-unsat-core)
