; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --random-seed=1 --lang=smt2 --tlimit 17
;(set-option :produce-unsat-cores true)
(set-logic ALL_SUPPORTED)
(declare-sort A$ 0)
(declare-sort B$ 0)
(declare-sort C$ 0)
(declare-sort B_set$ 0)
(declare-sort A_b_sp_nu$ 0)
(declare-sort A_c_sp_nu$ 0)
(declare-sort C_b_sp_nu$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort B_stream_set$ 0)
(declare-sort B_stream_bool_fun$ 0)
(declare-sort B_stream_stream_set$ 0)
(declare-sort B_b_stream_bool_fun_fun$ 0)
(declare-sort B_stream_stream_bool_fun$ 0)
(declare-sort B_stream_stream_stream_set$ 0)
(declare-sort B_stream_b_stream_bool_fun_fun$ 0)
(declare-sort B_stream_stream_stream_bool_fun$ 0)
(declare-sort B_stream_b_stream_stream_bool_fun_fun$ 0)
(declare-sort B_stream_stream_b_stream_stream_bool_fun_fun$ 0)
(declare-sort B_stream_stream_b_stream_stream_stream_bool_fun_fun$ 0)
(declare-codatatypes () ((B_stream$ (sCons$ (shd$ B$) (stl$ B_stream$)))
  (A_stream$ (sCons$a (shd$a A$) (stl$a A_stream$)))
  (C_stream$ (sCons$b (shd$b C$) (stl$b C_stream$)))
  (B_stream_stream$ (sCons$c (shd$c B_stream$) (stl$c B_stream_stream$)))
  (B_stream_stream_stream$ (sCons$d (shd$d B_stream_stream$) (stl$d B_stream_stream_stream$)))))
(declare-fun sa$ () A_stream$)
(declare-fun spa$ () C_b_sp_nu$)
(declare-fun sp_a$ () A_c_sp_nu$)
(declare-fun sset$ (B_stream_stream_stream$) B_stream_stream_set$)
(declare-fun sset$a (B_stream_stream$) B_stream_set$)
(declare-fun sset$b (B_stream$) B_set$)
(declare-fun member$ (B_stream_stream_stream$ B_stream_stream_stream_set$) Bool)
(declare-fun run_nu$ (A_b_sp_nu$ A_stream$) B_stream$)
(declare-fun fun_app$ (B_stream_stream_bool_fun$ B_stream_stream$) Bool)
(declare-fun member$a (B_stream_stream$ B_stream_stream_set$) Bool)
(declare-fun member$b (B_stream$ B_stream_set$) Bool)
(declare-fun member$c (B$ B_set$) Bool)
(declare-fun run_nu$a (C_b_sp_nu$ C_stream$) B_stream$)
(declare-fun run_nu$b (A_c_sp_nu$ A_stream$) C_stream$)
(declare-fun streams$ (B_stream_stream_set$) B_stream_stream_stream_set$)
(declare-fun fun_app$a (B_stream_stream_b_stream_stream_bool_fun_fun$ B_stream_stream$) B_stream_stream_bool_fun$)
(declare-fun fun_app$b (B_stream_bool_fun$ B_stream$) Bool)
(declare-fun fun_app$c (B_stream_b_stream_bool_fun_fun$ B_stream$) B_stream_bool_fun$)
(declare-fun fun_app$d (B_bool_fun$ B$) Bool)
(declare-fun fun_app$e (B_stream_stream_stream_bool_fun$ B_stream_stream_stream$) Bool)
(declare-fun fun_app$f (B_stream_stream_b_stream_stream_stream_bool_fun_fun$ B_stream_stream$) B_stream_stream_stream_bool_fun$)
(declare-fun fun_app$g (B_stream_b_stream_stream_bool_fun_fun$ B_stream$) B_stream_stream_bool_fun$)
(declare-fun fun_app$h (B_b_stream_bool_fun_fun$ B$) B_stream_bool_fun$)
(declare-fun streams$a (B_stream_set$) B_stream_stream_set$)
(declare-fun streams$b (B_set$) B_stream_set$)
(declare-fun sdrop_while$ (B_stream_bool_fun$ B_stream_stream$) B_stream_stream$)
(declare-fun sp_nu_comp2$ (C_b_sp_nu$ A_c_sp_nu$) A_b_sp_nu$)
(declare-fun sdrop_while$a (B_bool_fun$ B_stream$) B_stream$)
(assert (! (not (and (= (shd$ (run_nu$ (sp_nu_comp2$ spa$ sp_a$) sa$)) (shd$ (run_nu$a spa$ (run_nu$b sp_a$ sa$)))) (exists ((?v0 C_b_sp_nu$) (?v1 A_c_sp_nu$) (?v2 A_stream$)) (and (= (stl$ (run_nu$ (sp_nu_comp2$ spa$ sp_a$) sa$)) (run_nu$ (sp_nu_comp2$ ?v0 ?v1) ?v2)) (= (stl$ (run_nu$a spa$ (run_nu$b sp_a$ sa$))) (run_nu$a ?v0 (run_nu$b ?v1 ?v2))))))) :named a0))
(assert (! (forall ((?v0 B_stream_stream$) (?v1 B_stream_stream$)) (=> (and (= (shd$c ?v0) (shd$c ?v1)) (= (stl$c ?v0) (stl$c ?v1))) (= ?v0 ?v1))) :named a1))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream$)) (=> (and (= (shd$ ?v0) (shd$ ?v1)) (= (stl$ ?v0) (stl$ ?v1))) (= ?v0 ?v1))) :named a2))
(assert (! (forall ((?v0 B_stream_stream_b_stream_stream_bool_fun_fun$) (?v1 B_stream_stream$) (?v2 B_stream_stream$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (forall ((?v3 B_stream_stream$) (?v4 B_stream_stream$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (and (= (shd$c ?v3) (shd$c ?v4)) (or (fun_app$ (fun_app$a ?v0 (stl$c ?v3)) (stl$c ?v4)) (= (stl$c ?v3) (stl$c ?v4))))))) (= ?v1 ?v2))) :named a3))
(assert (! (forall ((?v0 B_stream_b_stream_bool_fun_fun$) (?v1 B_stream$) (?v2 B_stream$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (forall ((?v3 B_stream$) (?v4 B_stream$)) (=> (fun_app$b (fun_app$c ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (or (fun_app$b (fun_app$c ?v0 (stl$ ?v3)) (stl$ ?v4)) (= (stl$ ?v3) (stl$ ?v4))))))) (= ?v1 ?v2))) :named a4))
(assert (! (forall ((?v0 B_stream_stream_b_stream_stream_bool_fun_fun$) (?v1 B_stream_stream$) (?v2 B_stream_stream$)) (=> (and (fun_app$ (fun_app$a ?v0 ?v1) ?v2) (forall ((?v3 B_stream_stream$) (?v4 B_stream_stream$)) (=> (fun_app$ (fun_app$a ?v0 ?v3) ?v4) (and (= (shd$c ?v3) (shd$c ?v4)) (fun_app$ (fun_app$a ?v0 (stl$c ?v3)) (stl$c ?v4)))))) (= ?v1 ?v2))) :named a5))
(assert (! (forall ((?v0 B_stream_b_stream_bool_fun_fun$) (?v1 B_stream$) (?v2 B_stream$)) (=> (and (fun_app$b (fun_app$c ?v0 ?v1) ?v2) (forall ((?v3 B_stream$) (?v4 B_stream$)) (=> (fun_app$b (fun_app$c ?v0 ?v3) ?v4) (and (= (shd$ ?v3) (shd$ ?v4)) (fun_app$b (fun_app$c ?v0 (stl$ ?v3)) (stl$ ?v4)))))) (= ?v1 ?v2))) :named a6))
(assert (! (forall ((?v0 B_stream_bool_fun$) (?v1 B_stream_stream$)) (= (sdrop_while$ ?v0 ?v1) (ite (fun_app$b ?v0 (shd$c ?v1)) (sdrop_while$ ?v0 (stl$c ?v1)) ?v1))) :named a7))
(assert (! (forall ((?v0 B_bool_fun$) (?v1 B_stream$)) (= (sdrop_while$a ?v0 ?v1) (ite (fun_app$d ?v0 (shd$ ?v1)) (sdrop_while$a ?v0 (stl$ ?v1)) ?v1))) :named a8))
(assert (! (forall ((?v0 B_stream_stream$)) (= (sCons$c (shd$c ?v0) (stl$c ?v0)) ?v0)) :named a9))
(assert (! (forall ((?v0 B_stream$)) (= (sCons$ (shd$ ?v0) (stl$ ?v0)) ?v0)) :named a10))
(assert (! (forall ((?v0 B_stream_stream_stream$) (?v1 B_stream_stream_set$)) (=> (and (member$ (stl$d ?v0) (streams$ ?v1)) (member$a (shd$d ?v0) ?v1)) (member$ ?v0 (streams$ ?v1)))) :named a11))
(assert (! (forall ((?v0 B_stream_stream$) (?v1 B_stream_set$)) (=> (and (member$a (stl$c ?v0) (streams$a ?v1)) (member$b (shd$c ?v0) ?v1)) (member$a ?v0 (streams$a ?v1)))) :named a12))
(assert (! (forall ((?v0 B_stream$) (?v1 B_set$)) (=> (and (member$b (stl$ ?v0) (streams$b ?v1)) (member$c (shd$ ?v0) ?v1)) (member$b ?v0 (streams$b ?v1)))) :named a13))
(assert (! (forall ((?v0 B_stream_stream_stream$) (?v1 B_stream_stream_set$)) (=> (and (member$ ?v0 (streams$ ?v1)) (=> (and (member$a (shd$d ?v0) ?v1) (member$ (stl$d ?v0) (streams$ ?v1))) false)) false)) :named a14))
(assert (! (forall ((?v0 B_stream_stream$) (?v1 B_stream_set$)) (=> (and (member$a ?v0 (streams$a ?v1)) (=> (and (member$b (shd$c ?v0) ?v1) (member$a (stl$c ?v0) (streams$a ?v1))) false)) false)) :named a15))
(assert (! (forall ((?v0 B_stream$) (?v1 B_set$)) (=> (and (member$b ?v0 (streams$b ?v1)) (=> (and (member$c (shd$ ?v0) ?v1) (member$b (stl$ ?v0) (streams$b ?v1))) false)) false)) :named a16))
(assert (! (forall ((?v0 B_stream_stream$) (?v1 B_stream_stream_stream$) (?v2 B_stream_stream_b_stream_stream_stream_bool_fun_fun$)) (=> (and (member$a ?v0 (sset$ ?v1)) (and (forall ((?v3 B_stream_stream_stream$)) (fun_app$e (fun_app$f ?v2 (shd$d ?v3)) ?v3)) (forall ((?v3 B_stream_stream_stream$) (?v4 B_stream_stream$)) (=> (and (member$a ?v4 (sset$ (stl$d ?v3))) (fun_app$e (fun_app$f ?v2 ?v4) (stl$d ?v3))) (fun_app$e (fun_app$f ?v2 ?v4) ?v3))))) (fun_app$e (fun_app$f ?v2 ?v0) ?v1))) :named a17))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream_stream$) (?v2 B_stream_b_stream_stream_bool_fun_fun$)) (=> (and (member$b ?v0 (sset$a ?v1)) (and (forall ((?v3 B_stream_stream$)) (fun_app$ (fun_app$g ?v2 (shd$c ?v3)) ?v3)) (forall ((?v3 B_stream_stream$) (?v4 B_stream$)) (=> (and (member$b ?v4 (sset$a (stl$c ?v3))) (fun_app$ (fun_app$g ?v2 ?v4) (stl$c ?v3))) (fun_app$ (fun_app$g ?v2 ?v4) ?v3))))) (fun_app$ (fun_app$g ?v2 ?v0) ?v1))) :named a18))
(assert (! (forall ((?v0 B$) (?v1 B_stream$) (?v2 B_b_stream_bool_fun_fun$)) (=> (and (member$c ?v0 (sset$b ?v1)) (and (forall ((?v3 B_stream$)) (fun_app$b (fun_app$h ?v2 (shd$ ?v3)) ?v3)) (forall ((?v3 B_stream$) (?v4 B$)) (=> (and (member$c ?v4 (sset$b (stl$ ?v3))) (fun_app$b (fun_app$h ?v2 ?v4) (stl$ ?v3))) (fun_app$b (fun_app$h ?v2 ?v4) ?v3))))) (fun_app$b (fun_app$h ?v2 ?v0) ?v1))) :named a19))
(assert (! (forall ((?v0 B_stream_stream$)) (=> (=> (= ?v0 (sCons$c (shd$c ?v0) (stl$c ?v0))) false) false)) :named a20))
(assert (! (forall ((?v0 B_stream$)) (=> (=> (= ?v0 (sCons$ (shd$ ?v0) (stl$ ?v0))) false) false)) :named a21))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream_stream$) (?v2 B_stream$) (?v3 B_stream_stream$)) (= (= (sCons$c ?v0 ?v1) (sCons$c ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a22))
(assert (! (forall ((?v0 B$) (?v1 B_stream$) (?v2 B$) (?v3 B_stream$)) (= (= (sCons$ ?v0 ?v1) (sCons$ ?v2 ?v3)) (and (= ?v0 ?v2) (= ?v1 ?v3)))) :named a23))
(assert (! (forall ((?v0 B_stream_stream$) (?v1 B_stream_stream_stream$) (?v2 B_stream_stream_set$)) (= (member$ (sCons$d ?v0 ?v1) (streams$ ?v2)) (and (member$a ?v0 ?v2) (member$ ?v1 (streams$ ?v2))))) :named a24))
(assert (! (forall ((?v0 B_stream$) (?v1 B_stream_stream$) (?v2 B_stream_set$)) (= (member$a (sCons$c ?v0 ?v1) (streams$a ?v2)) (and (member$b ?v0 ?v2) (member$a ?v1 (streams$a ?v2))))) :named a25))
(assert (! (forall ((?v0 B$) (?v1 B_stream$) (?v2 B_set$)) (= (member$b (sCons$ ?v0 ?v1) (streams$b ?v2)) (and (member$c ?v0 ?v2) (member$b ?v1 (streams$b ?v2))))) :named a26))
(assert (! (forall ((?v0 B_stream_bool_fun$) (?v1 B_stream$) (?v2 B_stream_stream$)) (! (= (sdrop_while$ ?v0 (sCons$c ?v1 ?v2)) (ite (fun_app$b ?v0 ?v1) (sdrop_while$ ?v0 ?v2) (sCons$c ?v1 ?v2))) :pattern ((sdrop_while$ ?v0 (sCons$c ?v1 ?v2))))) :named a27))
(assert (! (forall ((?v0 B_bool_fun$) (?v1 B$) (?v2 B_stream$)) (! (= (sdrop_while$a ?v0 (sCons$ ?v1 ?v2)) (ite (fun_app$d ?v0 ?v1) (sdrop_while$a ?v0 ?v2) (sCons$ ?v1 ?v2))) :pattern ((sdrop_while$a ?v0 (sCons$ ?v1 ?v2))))) :named a28))
(check-sat)
;(get-unsat-core)
