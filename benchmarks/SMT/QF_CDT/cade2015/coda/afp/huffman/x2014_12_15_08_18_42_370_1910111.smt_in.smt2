;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun uu$ ()A_nat_fun$ )
(declare-fun t_1$ ()A_tree$ )
(declare-fun t_2$ ()A_tree$ )
(declare-fun freq$ (A_tree$ )A_nat_fun$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun fun_app$ (A_nat_fun$ A$ )Nat$ )
(declare-fun uniteTrees$ (A_tree$ A_tree$ )A_tree$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(plus$ (fun_app$ (freq$ t_1$ )?v0 )(fun_app$ (freq$ t_2$ )?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (freq$ (uniteTrees$ t_1$ t_2$ ))uu$ )):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )(plus$ ?v2 ?v3 ))(plus$ (plus$ ?v0 ?v2 )(plus$ ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ (plus$ ?v0 ?v2 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ ?v0 (plus$ ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ ?v0 (plus$ ?v1 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ ?v0 (plus$ ?v1 ?v2 ))(plus$ (plus$ ?v0 ?v1 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (plus$ (plus$ ?v0 ?v1 )?v2 )(plus$ ?v0 (plus$ ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (= ?v0 ?v1 )(= ?v2 ?v3 ))(= (plus$ ?v0 ?v2 )(plus$ ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a15 ))
(check-sat )
;(get-unsat-core )
