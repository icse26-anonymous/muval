;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun c$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun u$ ()A_tree$ )
(declare-fun cost$ (A_tree$ )Nat$ )
(declare-fun freq$ (A_tree$ )A_nat_fun$ )
(declare-fun depth$ (A_tree$ A$ )Nat$ )
(declare-fun height$ (A_tree$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun minima$ (A_tree$ A$ A$ )Bool )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun sibling$ (A_tree$ A$ )A$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun mergeSibling$ (A_tree$ A$ )A_tree$ )
(declare-fun swapFourSyms$ (A_tree$ A$ A$ A$ A$ )A_tree$ )
(assert (! (not (less_eq$ (cost$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$ )))(cost$ u$ ))):named a0 ))
(assert (! (consistent$ u$ ):named a1 ))
(assert (! (member$ c$ (alphabet$ u$ )):named a2 ))
(assert (! (= (depth$ u$ c$ )(height$ u$ )):named a3 ))
(assert (! (minima$ u$ a$ b$ ):named a4 ))
(assert (! (member$ (sibling$ u$ c$ )(alphabet$ u$ )):named a5 ))
(assert (! (= (depth$ u$ (sibling$ u$ c$ ))(height$ u$ )):named a6 ))
(assert (! (not (= a$ b$ )):named a7 ))
(assert (! (not (= (sibling$ u$ c$ )c$ )):named a8 ))
(assert (! (member$ a$ (alphabet$ u$ )):named a9 ))
(assert (! (member$ b$ (alphabet$ u$ )):named a10 ))
(assert (! (= (sibling$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$ ))a$ )b$ ):named a11 ))
(assert (! (consistent$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$ ))):named a12 ))
(assert (! (= (alphabet$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$ )))(alphabet$ u$ )):named a13 ))
(assert (! (= (freq$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$ )))(freq$ u$ )):named a14 ))
(assert (! (consistent$ (mergeSibling$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$ ))a$ )):named a15 ))
(assert (! (not (member$ b$ (alphabet$ t$ ))):named a16 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (sibling$ ?v0 (sibling$ ?v0 ?v1 ))?v1 ))):named a17 ))
(check-sat )
;(get-unsat-core )
