;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort A_tree_list$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun nil$ ()A_tree_list$)
(declare-fun hd$ (A_tree_list$)A_tree$)
(declare-fun tl$ (A_tree_list$)A_tree_list$)
(declare-fun cons$ (A_tree$ A_tree_list$ )A_tree_list$)
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun ts$ ()A_tree_list$ )
(declare-fun sup$ (A_set$ A_set$ )A_set$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_b$ ()Nat$ )
(declare-fun cost$ (A_tree$ )Nat$ )
(declare-fun freq$ (A_tree$ )A_nat_fun$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun freq_F$ (A_tree_list$ A$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun weight$ (A_tree$ )Nat$ )
(declare-fun fun_app$ (A_nat_fun$ A$ )Nat$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun optimum$ (A_tree$ )Bool )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun swapSyms$ (A_tree$ A$ A$ )A_tree$ )
(declare-fun splitLeaf$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(declare-fun alphabet_F$ (A_tree_list$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun insortTree$ (A_tree$ A_tree_list$ )A_tree_list$ )
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(declare-fun uniteTrees$ (A_tree$ A_tree$ )A_tree$ )
(declare-fun splitLeaf_F$ (A_tree_list$ Nat$ A$ Nat$ A$ )A_tree_list$ )
(declare-fun swapFourSyms$ (A_tree$ A$ A$ A$ A$ )A_tree$ )
(assert (! (not (= (splitLeaf_F$ (insortTree$ t$ ts$ )w_a$ a$ w_b$ b$ )(insortTree$ (splitLeaf$ t$ w_a$ a$ w_b$ b$ )ts$ ))):named a0 ))
(assert (! (member$ a$ (alphabet$ t$ )):named a1 ))
(assert (! (consistent$ t$ ):named a2 ))
(assert (! (not (member$ a$ (alphabet_F$ ts$ ))):named a3 ))
(assert (! (= (fun_app$ (freq$ t$ )a$ )(plus$ w_a$ w_b$ )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 Nat$ )(?v4 A$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4 )?v1 )):pattern ((splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree_list$ )(?v2 Nat$ )(?v3 Nat$ )(?v4 A$ ))(! (=> (not (member$ ?v0 (alphabet_F$ ?v1 )))(= (splitLeaf_F$ ?v1 ?v2 ?v0 ?v3 ?v4 )?v1 )):pattern ((splitLeaf_F$ ?v1 ?v2 ?v0 ?v3 ?v4 )))):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ )(?v4 Nat$ ))(=> (and (consistent$ ?v0 )(not (member$ ?v1 (alphabet$ ?v0 ))))(consistent$ (splitLeaf$ ?v0 ?v2 ?v3 ?v4 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ )(?v3 A$ )(?v4 A$ ))(=> (and (consistent$ ?v0 )(and (member$ ?v1 (alphabet$ ?v0 ))(and (member$ ?v2 (alphabet$ ?v0 ))(and (member$ ?v3 (alphabet$ ?v0 ))(member$ ?v4 (alphabet$ ?v0 ))))))(= (freq$ (swapFourSyms$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(freq$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 A$ ))(= (freq_F$ (insortTree$ ?v0 ?v1 )?v2 )(plus$ (fun_app$ (freq$ ?v0 )?v2 )(freq_F$ ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 Nat$ )(?v3 Nat$ )(?v4 A$ ))(=> (and (consistent$ ?v0 )(and (member$ ?v1 (alphabet$ ?v0 ))(= (fun_app$ (freq$ ?v0 )?v1 )(plus$ ?v2 ?v3 ))))(= (cost$ (splitLeaf$ ?v0 ?v2 ?v1 ?v3 ?v4 ))(plus$ (plus$ (cost$ ?v0 )?v2 )?v3 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 Nat$ )(?v3 Nat$ )(?v4 A$ ))(=> (and (consistent$ ?v0 )(and (member$ ?v1 (alphabet$ ?v0 ))(= (fun_app$ (freq$ ?v0 )?v1 )(plus$ ?v2 ?v3 ))))(= (weight$ (splitLeaf$ ?v0 ?v2 ?v1 ?v3 ?v4 ))(weight$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ ))(=> (and (consistent$ ?v0 )(and (member$ ?v1 (alphabet$ ?v0 ))(member$ ?v2 (alphabet$ ?v0 ))))(= (freq$ (swapSyms$ ?v0 ?v1 ?v2 ))(freq$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A$ ))(= (fun_app$ (freq$ (uniteTrees$ ?v0 ?v1 ))?v2 )(plus$ (fun_app$ (freq$ ?v0 )?v2 )(fun_app$ (freq$ ?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(= (alphabet_F$ (insortTree$ ?v0 ?v1 ))(sup$ (alphabet$ ?v0 )(alphabet_F$ ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A$ )(?v4 A$ ))(=> (and (member$ ?v0 (alphabet$ ?v1 ))(and (member$ ?v2 (alphabet$ ?v1 ))(and (member$ ?v3 (alphabet$ ?v1 ))(member$ ?v4 (alphabet$ ?v1 )))))(= (alphabet$ (swapFourSyms$ ?v1 ?v0 ?v2 ?v3 ?v4 ))(alphabet$ ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ )(?v3 Nat$ )(?v4 Nat$ ))(=> (and (consistent$ ?v0 )(and (optimum$ ?v0 )(and (member$ ?v1 (alphabet$ ?v0 ))(and (not (member$ ?v2 (alphabet$ ?v0 )))(and (= (fun_app$ (freq$ ?v0 )?v1 )(plus$ ?v3 ?v4 ))(and (forall ((?v5 A$ ))(=> (member$ ?v5 (alphabet$ ?v0 ))(and (less_eq$ ?v3 (fun_app$ (freq$ ?v0 )?v5 ))(less_eq$ ?v4 (fun_app$ (freq$ ?v0 )?v5 )))))(less_eq$ ?v3 ?v4 )))))))(optimum$ (splitLeaf$ ?v0 ?v3 ?v1 ?v4 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (swapLeaves$ ?v0 (fun_app$ (freq$ ?v0 )?v1 )?v1 (fun_app$ (freq$ ?v0 )?v1 )?v1 )?v0 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less_eq$ (plus$ ?v0 ?v1 )(plus$ ?v0 ?v2 ))(less_eq$ ?v1 ?v2 ))):named a21 ))
(check-sat )
;(get-unsat-core )
