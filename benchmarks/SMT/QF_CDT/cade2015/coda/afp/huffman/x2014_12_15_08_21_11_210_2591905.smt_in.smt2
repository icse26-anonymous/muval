;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_tree_list_a_tree_list_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort A_tree_list$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun nil$ ()A_tree_list$)
(declare-fun hd$ (A_tree_list$)A_tree$)
(declare-fun tl$ (A_tree_list$)A_tree_list$)
(declare-fun cons$ (A_tree$ A_tree_list$ )A_tree_list$)
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun ts$ ()A_tree_list$ )
(declare-fun uu$ (A_tree$ )A_tree_list_a_tree_list_fun$ )
(declare-fun bot$ ()A_set$ )
(declare-fun sup$ (A_set$ A_set$ )A_set$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_b$ ()Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun freq_F$ (A_tree_list$ A$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_tree_list_a_tree_list_fun$ A_tree_list$ )A_tree_list$ )
(declare-fun huffman$ (A_tree_list$ )A_tree$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun splitLeaf$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(declare-fun alphabet_F$ (A_tree_list$ )A_set$ )
(declare-fun insortTree$ (A_tree$ )A_tree_list_a_tree_list_fun$ )
(declare-fun splitLeaf_F$ (A_tree_list$ Nat$ A$ Nat$ A$ )A_tree_list$ )
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(cons$ ?v0 ?v1 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (= (splitLeaf_F$ ts$ w_a$ a$ w_b$ b$ )ts$ )):named a1 ))
(assert (! (not (member$ a$ (alphabet_F$ ts$ ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(! (= (splitLeaf_F$ nil$ ?v0 ?v1 ?v2 ?v3 )nil$ ):pattern ((splitLeaf_F$ nil$ ?v0 ?v1 ?v2 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ )(?v2 Nat$ )(?v3 A$ )(?v4 Nat$ )(?v5 A$ ))(! (= (splitLeaf_F$ (cons$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )(cons$ (splitLeaf$ ?v0 ?v2 ?v3 ?v4 ?v5 )(splitLeaf_F$ ?v1 ?v2 ?v3 ?v4 ?v5 ))):pattern ((splitLeaf_F$ (cons$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree_list$ ))(! (=> (not (member$ ?v0 (alphabet_F$ ?v1 )))(= (freq_F$ ?v1 ?v0 )zero$ )):pattern ((freq_F$ ?v1 ?v0 )))):named a5 ))
(assert (! (= (alphabet_F$ nil$ )bot$ ):named a6 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (not (= ?v0 nil$ ))(= (alphabet$ (huffman$ ?v0 ))(alphabet_F$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(= (alphabet_F$ (fun_app$ (insortTree$ ?v0 )?v1 ))(sup$ (alphabet$ ?v0 )(alphabet_F$ ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(! (= (alphabet_F$ (cons$ ?v0 ?v1 ))(sup$ (alphabet$ ?v0 )(alphabet_F$ ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 Nat$ )(?v4 A$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4 )?v1 )):pattern ((splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4 )))):named a10 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (fun_app$ (insortTree$ ?v0 )nil$ )(cons$ ?v0 nil$ )):pattern ((insortTree$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (huffman$ (cons$ ?v0 nil$ ))?v0 ):pattern ((uu$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A$ ))(! (= (freq_F$ nil$ ?v0 )zero$ ):pattern ((freq_F$ nil$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (forall ((?v1 A_tree$ ))(=> (= ?v0 (cons$ ?v1 nil$ ))false ))(and (forall ((?v1 A_tree$ )(?v2 A_tree$ )(?v3 A_tree_list$ ))(=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3 )))false ))(=> (= ?v0 nil$ )false )))false )):named a14 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_list$ ))(not (= (fun_app$ (insortTree$ ?v0 )?v1 )nil$ ))):named a15 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (= (sup$ ?v0 ?v1 )bot$ )(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a17 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (= bot$ (sup$ ?v0 ?v1 ))(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a18 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (= (sup$ ?v0 ?v1 )bot$ )(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a19 ))
(check-sat )
;(get-unsat-core )
