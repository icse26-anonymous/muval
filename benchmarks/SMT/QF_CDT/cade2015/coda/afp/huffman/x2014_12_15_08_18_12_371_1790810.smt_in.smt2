;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun t$ ()A_tree$ )
(declare-fun u$ ()A_tree$ )
(declare-fun less$ (Nat$ )Nat_bool_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun height$ (A_tree$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun consistent$ (A_tree$ )Bool )
(assert (! (not (fun_app$ (less$ zero$ )(height$ u$ ))):named a0 ))
(assert (! (consistent$ t$ ):named a1 ))
(assert (! (fun_app$ (less$ zero$ )(height$ t$ )):named a2 ))
(assert (! (= (alphabet$ t$ )(alphabet$ u$ )):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (= ?v0 zero$ ))(fun_app$ (less$ zero$ )?v0 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (fun_app$ (less$ zero$ )?v0 ))(= ?v0 zero$ ))):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (less$ ?v0 )zero$ )false ):pattern ((less$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(=> (=> (= ?v0 zero$ )false )(fun_app$ (less$ zero$ )?v0 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )?v1 )(not (= ?v1 zero$ )))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(=> (fun_app$ (less$ ?v0 )zero$ )false )):named a9 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (and (fun_app$ ?v0 zero$ )(forall ((?v2 Nat$ ))(=> (and (fun_app$ (less$ zero$ )?v2 )(not (fun_app$ ?v0 ?v2 )))(exists ((?v3 Nat$ ))(and (fun_app$ (less$ ?v3 )?v2 )(not (fun_app$ ?v0 ?v3 )))))))(fun_app$ ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$ (less$ ?v0 )zero$ ))):named a11 ))
(assert (! (not (fun_app$ (less$ zero$ )zero$ )):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$ (less$ ?v0 )?v1 )(fun_app$ (less$ ?v1 )?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a15 ))
(check-sat )
;(get-unsat-core )
