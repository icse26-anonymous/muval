;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun x1$ ()Nat$ )
(declare-fun x2$ ()A$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_s$ ()Nat$ )
(declare-fun height$ (A_tree$ )Nat$ )
(declare-fun weight$ (A_tree$ )Nat$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun sibling$ (A_tree$ A$ )A$ )
(declare-fun pred_tree$ (A_bool_fun$ A_tree$ )Bool )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(declare-fun cachedWeight$ (A_tree$ )Nat$ )
(assert (! (not (= (sibling$ (swapLeaves$ (leaf$ x1$ x2$ )w_a$ a$ w_s$ (sibling$ (leaf$ x1$ x2$ )b$ ))a$ )b$ )):named a0 ))
(assert (! (not (= a$ b$ )):named a1 ))
(assert (! (consistent$ (leaf$ x1$ x2$ )):named a2 ))
(assert (! (not (= (sibling$ (leaf$ x1$ x2$ )b$ )b$ )):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ )(?v4 Nat$ )(?v5 A$ ))(! (= (swapLeaves$ (leaf$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )(ite (= ?v1 ?v3 )(leaf$ ?v4 ?v5 )(ite (= ?v1 ?v5 )(leaf$ ?v2 ?v3 )(leaf$ ?v0 ?v1 )))):pattern ((swapLeaves$ (leaf$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A$ ))(! (= (sibling$ (leaf$ ?v0 ?v1 )?v2 )?v2 ):pattern ((sibling$ (leaf$ ?v0 ?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (sibling$ ?v0 (sibling$ ?v0 ?v1 ))?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ )(?v4 A$ ))(=> (consistent$ ?v0 )(consistent$ (swapLeaves$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a8 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ ))(=> (and (consistent$ ?v0 )(= (sibling$ ?v0 ?v1 )?v2 ))(= (sibling$ ?v0 ?v2 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (consistent$ (leaf$ ?v0 ?v1 ))true ):pattern ((leaf$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 Nat$ )(?v2 A$ ))(! (= (pred_tree$ ?v0 (leaf$ ?v1 ?v2 ))(fun_app$ ?v0 ?v2 )):pattern ((pred_tree$ ?v0 (leaf$ ?v1 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (cachedWeight$ (leaf$ ?v0 ?v1 ))?v0 ):pattern ((leaf$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ )(?v4 A$ )(?v5 A$ ))(! (= (sibling$ (innerNode$ ?v0 (leaf$ ?v1 ?v2 )(leaf$ ?v3 ?v4 ))?v5 )(ite (= ?v5 ?v2 )?v4 (ite (= ?v5 ?v4 )?v2 ?v5 ))):pattern ((sibling$ (innerNode$ ?v0 (leaf$ ?v1 ?v2 )(leaf$ ?v3 ?v4 ))?v5 )))):named a13 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ )(?v4 A$ ))(= (height$ (swapLeaves$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(height$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (weight$ (leaf$ ?v0 ?v1 ))?v0 ):pattern ((leaf$ ?v0 ?v1 )))):named a15 ))
(check-sat )
;(get-unsat-core )
