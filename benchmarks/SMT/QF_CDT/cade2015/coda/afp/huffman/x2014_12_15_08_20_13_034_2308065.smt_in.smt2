;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun c$ ()A$ )
(declare-fun w$ ()Nat$ )
(declare-fun t_1$ ()A_tree$ )
(declare-fun t_2$ ()A_tree$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_c$ ()Nat$ )
(declare-fun w_s$ ()Nat$ )
(declare-fun x11$ ()Nat$ )
(declare-fun x12$ ()A$ )
(declare-fun sibling$ (A_tree$ A$ )A$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun swapLeaves$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(assert (! (not (= (sibling$ (swapLeaves$ (innerNode$ w$ t_1$ t_2$ )w_a$ a$ w_s$ (sibling$ (innerNode$ w$ t_1$ t_2$ )b$ ))a$ )b$ )):named a0 ))
(assert (! (= t_1$ (leaf$ w_c$ c$ )):named a1 ))
(assert (! (= t_2$ (leaf$ x11$ x12$ )):named a2 ))
(assert (! (not (= a$ b$ )):named a3 ))
(assert (! (consistent$ (innerNode$ w$ t_1$ t_2$ )):named a4 ))
(assert (! (not (= (sibling$ (innerNode$ w$ t_1$ t_2$ )b$ )b$ )):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a6 ))
(assert (! (=> (and (consistent$ t_1$ )(and (not (= (sibling$ t_1$ b$ )b$ ))(not (= a$ b$ ))))(= (sibling$ (swapLeaves$ t_1$ w_a$ a$ w_s$ (sibling$ t_1$ b$ ))a$ )b$ )):named a7 ))
(assert (! (=> (and (consistent$ t_2$ )(and (not (= (sibling$ t_2$ b$ )b$ ))(not (= a$ b$ ))))(= (sibling$ (swapLeaves$ t_2$ w_a$ a$ w_s$ (sibling$ t_2$ b$ ))a$ )b$ )):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A$ )(?v5 Nat$ )(?v6 A$ ))(! (= (swapLeaves$ (innerNode$ ?v0 ?v1 ?v2 )?v3 ?v4 ?v5 ?v6 )(innerNode$ ?v0 (swapLeaves$ ?v1 ?v3 ?v4 ?v5 ?v6 )(swapLeaves$ ?v2 ?v3 ?v4 ?v5 ?v6 ))):pattern ((swapLeaves$ (innerNode$ ?v0 ?v1 ?v2 )?v3 ?v4 ?v5 ?v6 )))):named a9 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (consistent$ ?v0 )(= (sibling$ ?v0 (sibling$ ?v0 ?v1 ))?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ )(?v4 A$ )(?v5 A$ ))(! (= (sibling$ (innerNode$ ?v0 (leaf$ ?v1 ?v2 )(leaf$ ?v3 ?v4 ))?v5 )(ite (= ?v5 ?v2 )?v4 (ite (= ?v5 ?v4 )?v2 ?v5 ))):pattern ((sibling$ (innerNode$ ?v0 (leaf$ ?v1 ?v2 )(leaf$ ?v3 ?v4 ))?v5 )))):named a11 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 Nat$ )(?v2 A$ )(?v3 Nat$ )(?v4 A$ ))(=> (consistent$ ?v0 )(consistent$ (swapLeaves$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a12 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ ))(=> (and (consistent$ ?v0 )(= (sibling$ ?v0 ?v1 )?v2 ))(= (sibling$ ?v0 ?v2 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ )(?v4 Nat$ )(?v5 A$ ))(! (= (swapLeaves$ (leaf$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )(ite (= ?v1 ?v3 )(leaf$ ?v4 ?v5 )(ite (= ?v1 ?v5 )(leaf$ ?v2 ?v3 )(leaf$ ?v0 ?v1 )))):pattern ((swapLeaves$ (leaf$ ?v0 ?v1 )?v2 ?v3 ?v4 ?v5 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A$ ))(! (= (sibling$ (leaf$ ?v0 ?v1 )?v2 )?v2 ):pattern ((sibling$ (leaf$ ?v0 ?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (forall ((?v1 Nat$ )(?v2 A$ ))(=> (= ?v0 (leaf$ ?v1 ?v2 ))false ))(forall ((?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v0 (innerNode$ ?v1 ?v2 ?v3 ))false )))false )):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A_tree$ )(?v4 A_tree$ ))(not (= (leaf$ ?v0 ?v1 )(innerNode$ ?v2 ?v3 ?v4 )))):named a17 ))
(check-sat )
;(get-unsat-core )
