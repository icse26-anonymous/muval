;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun u$ ()A_tree$ )
(declare-fun bot$ ()A_set$ )
(declare-fun sup$ (A_set$ A_set$ )A_set$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_b$ ()Nat$ )
(declare-fun freq$ (A_tree$ A$ )Nat$ )
(declare-fun sup$a (Nat$ Nat$ )Nat$ )
(declare-fun insert$ (A$ A_set$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun minima$ (A_tree$ A$ A$ )Bool )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun less_eq$a (A_set$ A_set$ )Bool )
(assert (! (not (minima$ u$ a$ b$ )):named a0 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 (alphabet$ t$ ))(and (less_eq$ w_a$ (freq$ t$ ?v0 ))(less_eq$ w_b$ (freq$ t$ ?v0 ))))):named a1 ))
(assert (! (= (alphabet$ u$ )(sup$ (alphabet$ t$ )(insert$ b$ bot$ ))):named a2 ))
(assert (! (member$ a$ (alphabet$ u$ )):named a3 ))
(assert (! (not (= a$ b$ )):named a4 ))
(assert (! (forall ((?v0 A$ ))(! (= (freq$ u$ ?v0 )(ite (= ?v0 a$ )w_a$ (ite (= ?v0 b$ )w_b$ (freq$ t$ ?v0 )))):pattern ((freq$ u$ ?v0 )))):named a5 ))
(assert (! (less_eq$ w_a$ w_b$ ):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A$ ))(= (minima$ ?v0 ?v1 ?v2 )(and (member$ ?v1 (alphabet$ ?v0 ))(and (member$ ?v2 (alphabet$ ?v0 ))(and (not (= ?v1 ?v2 ))(and (less_eq$ (freq$ ?v0 ?v1 )(freq$ ?v0 ?v2 ))(forall ((?v3 A$ ))(=> (and (member$ ?v3 (alphabet$ ?v0 ))(and (not (= ?v3 ?v1 ))(not (= ?v3 ?v2 ))))(and (less_eq$ (freq$ ?v0 ?v1 )(freq$ ?v0 ?v3 ))(less_eq$ (freq$ ?v0 ?v2 )(freq$ ?v0 ?v3 ))))))))))):named a7 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (sup$ (insert$ ?v0 ?v1 )?v2 )(insert$ ?v0 (sup$ ?v1 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ )(?v2 A_set$ ))(= (sup$ ?v0 (insert$ ?v1 ?v2 ))(insert$ ?v1 (sup$ ?v0 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (= (sup$ ?v0 ?v1 )bot$ )(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a11 ))
(assert (! (forall ((?v0 A$ ))(member$ ?v0 (insert$ ?v0 bot$ ))):named a12 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (= bot$ (sup$ ?v0 ?v1 ))(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a13 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (= (sup$ ?v0 ?v1 )bot$ )(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a14 ))
(assert (! (forall ((?v0 A_set$ ))(= (sup$ ?v0 bot$ )?v0 )):named a15 ))
(assert (! (forall ((?v0 A_set$ ))(= (sup$ bot$ ?v0 )?v0 )):named a16 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_set$ ))(= (less_eq$a (sup$ ?v0 ?v1 )?v2 )(and (less_eq$a ?v0 ?v2 )(less_eq$a ?v1 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less_eq$ (sup$a ?v0 ?v1 )?v2 )(and (less_eq$ ?v0 ?v2 )(less_eq$ ?v1 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_set$ ))(= (less_eq$a (sup$ ?v0 ?v1 )?v2 )(and (less_eq$a ?v0 ?v2 )(less_eq$a ?v1 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less_eq$ (sup$a ?v0 ?v1 )?v2 )(and (less_eq$ ?v0 ?v2 )(less_eq$ ?v1 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (= (insert$ ?v0 bot$ )(sup$ ?v1 ?v2 ))(or (and (= ?v1 bot$ )(= ?v2 (insert$ ?v0 bot$ )))(or (and (= ?v1 (insert$ ?v0 bot$ ))(= ?v2 bot$ ))(and (= ?v1 (insert$ ?v0 bot$ ))(= ?v2 (insert$ ?v0 bot$ ))))))):named a21 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A$ ))(= (= (sup$ ?v0 ?v1 )(insert$ ?v2 bot$ ))(or (and (= ?v0 bot$ )(= ?v1 (insert$ ?v2 bot$ )))(or (and (= ?v0 (insert$ ?v2 bot$ ))(= ?v1 bot$ ))(and (= ?v0 (insert$ ?v2 bot$ ))(= ?v1 (insert$ ?v2 bot$ ))))))):named a22 ))
(assert (! (forall ((?v0 A_set$ ))(less_eq$a bot$ ?v0 )):named a23 ))
(assert (! (forall ((?v0 A_set$ ))(= (less_eq$a ?v0 bot$ )(= ?v0 bot$ ))):named a24 ))
(assert (! (forall ((?v0 A$ ))(= (member$ ?v0 bot$ )false )):named a25 ))
(check-sat )
;(get-unsat-core )
