;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun a$ ()A$ )
(declare-fun b$ ()A$ )
(declare-fun c$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun u$ ()A_tree$ )
(declare-fun w_a$ ()Nat$ )
(declare-fun w_b$ ()Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun sibling$ (A_tree$ A$ )A$ )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun splitLeaf$ (A_tree$ Nat$ A$ Nat$ A$ )A_tree$ )
(declare-fun consistent$ (A_tree$ )Bool )
(declare-fun swapFourSyms$ (A_tree$ A$ A$ A$ A$ )A_tree$ )
(assert (! (not (= (alphabet$ (swapFourSyms$ u$ a$ b$ c$ (sibling$ u$ c$ )))(alphabet$ u$ ))):named a0 ))
(assert (! (member$ a$ (alphabet$ u$ )):named a1 ))
(assert (! (member$ c$ (alphabet$ u$ )):named a2 ))
(assert (! (member$ b$ (alphabet$ u$ )):named a3 ))
(assert (! (member$ a$ (alphabet$ t$ )):named a4 ))
(assert (! (not (member$ b$ (alphabet$ t$ ))):named a5 ))
(assert (! (member$ (sibling$ u$ c$ )(alphabet$ u$ )):named a6 ))
(assert (! (not (= a$ b$ )):named a7 ))
(assert (! (= (alphabet$ (splitLeaf$ t$ w_a$ a$ w_b$ b$ ))(alphabet$ u$ )):named a8 ))
(assert (! (not (= (sibling$ u$ c$ )c$ )):named a9 ))
(assert (! (consistent$ u$ ):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (sibling$ ?v1 ?v0 )?v0 )):pattern ((sibling$ ?v1 ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A$ )(?v4 A$ ))(=> (and (member$ ?v0 (alphabet$ ?v1 ))(and (member$ ?v2 (alphabet$ ?v1 ))(and (member$ ?v3 (alphabet$ ?v1 ))(member$ ?v4 (alphabet$ ?v1 )))))(= (alphabet$ (swapFourSyms$ ?v1 ?v0 ?v2 ?v3 ?v4 ))(alphabet$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 Nat$ )(?v4 A$ ))(! (=> (not (member$ ?v0 (alphabet$ ?v1 )))(= (splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4 )?v1 )):pattern ((splitLeaf$ ?v1 ?v2 ?v0 ?v3 ?v4 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (member$ ?v0 (alphabet$ ?v1 ))(member$ (sibling$ ?v1 ?v0 )(alphabet$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (not (= (sibling$ ?v0 ?v1 )?v1 ))(member$ (sibling$ ?v0 ?v1 )(alphabet$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a16 ))
(assert (! (consistent$ t$ ):named a17 ))
(check-sat )
;(get-unsat-core )
