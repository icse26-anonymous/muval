;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_tree_set$ 0 )
(declare-sort A_tree_bool_fun$ 0 )
(declare-sort A_tree_tree_set$ 0 )
(declare-sort A_tree_tree_bool_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort A_tree_list$ 0)
(declare-sort A_tree_tree$ 0)
(declare-sort A_tree_tree_list$ 0)
(declare-sort A_list$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun nil$ ()A_tree_list$)
(declare-fun hd$ (A_tree_list$)A_tree$)
(declare-fun tl$ (A_tree_list$)A_tree_list$)
(declare-fun cons$ (A_tree$ A_tree_list$ )A_tree_list$)
(declare-fun selecte$ (A_tree_tree$)Nat$)
(declare-fun selectf$ (A_tree_tree$)A_tree$)
(declare-fun leaf$a (Nat$ A_tree$ )A_tree_tree$)
(declare-fun selectg$ (A_tree_tree$)Nat$)
(declare-fun selecth$ (A_tree_tree$)A_tree_tree$)
(declare-fun selecti$ (A_tree_tree$)A_tree_tree$)
(declare-fun innerNode$a (Nat$ A_tree_tree$ A_tree_tree$ )A_tree_tree$)
(declare-fun nil$a ()A_tree_tree_list$)
(declare-fun hd$a (A_tree_tree_list$)A_tree_tree$)
(declare-fun tl$a (A_tree_tree_list$)A_tree_tree_list$)
(declare-fun cons$a (A_tree_tree$ A_tree_tree_list$ )A_tree_tree_list$)
(declare-fun nil$b ()A_list$)
(declare-fun hd$b (A_list$)A$)
(declare-fun tl$b (A_list$)A_list$)
(declare-fun cons$b (A$ A_list$ )A_list$)
(declare-fun a$ ()A$ )
(declare-fun set$ (A_tree_list$ )A_tree_set$ )
(declare-fun freq$ (A_tree_tree$ A_tree$ )Nat$ )
(declare-fun set$a (A_tree_tree_list$ )A_tree_tree_set$ )
(declare-fun set$b (A_list$ )A_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun freq$a (A_tree$ A$ )Nat$ )
(declare-fun freq_F$ (A_tree_list$ A$ )Nat$ )
(declare-fun member$ (A_tree$ A_tree_set$ )Bool )
(declare-fun freq_F$a (A_tree_tree_list$ A_tree$ )Nat$ )
(declare-fun fun_app$ (A_tree_tree_bool_fun$ A_tree_tree$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun member$b (A_tree_tree$ A_tree_tree_set$ )Bool )
(declare-fun fun_app$a (A_tree_bool_fun$ A_tree$ )Bool )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun height_F$ (A_tree_list$ )Nat$ )
(declare-fun set_tree$ (A_tree_tree$ )A_tree_set$ )
(declare-fun dropWhile$ (A_tree_tree_bool_fun$ A_tree_tree_list$ )A_tree_tree_list$ )
(declare-fun height_F$a (A_tree_tree_list$ )Nat$ )
(declare-fun pred_tree$ (A_tree_bool_fun$ )A_tree_tree_bool_fun$ )
(declare-fun set_tree$a (A_tree$ )A_set$ )
(declare-fun alphabet_F$ (A_tree_list$ )A_set$ )
(declare-fun consistent$ (A_tree_tree$ )Bool )
(declare-fun dropWhile$a (A_bool_fun$ A_list$ )A_list$ )
(declare-fun dropWhile$b (A_tree_bool_fun$ A_tree_list$ )A_tree_list$ )
(declare-fun pred_tree$a (A_bool_fun$ )A_tree_bool_fun$ )
(declare-fun alphabet_F$a (A_tree_tree_list$ )A_tree_set$ )
(declare-fun consistent$a (A_tree$ )Bool )
(declare-fun consistent_F$ (A_tree_list$ )Bool )
(declare-fun consistent_F$a (A_tree_tree_list$ )Bool )
(assert (! (not (member$ (leaf$ (freq_F$ nil$ a$ )a$ )(set$ nil$ ))):named a0 ))
(assert (! (consistent_F$ nil$ ):named a1 ))
(assert (! (= (height_F$ nil$ )zero$ ):named a2 ))
(assert (! (member$a a$ (alphabet_F$ nil$ )):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 Nat$ )(?v3 A_tree$ ))(= (= (leaf$a ?v0 ?v1 )(leaf$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (= (consistent_F$a nil$a )true ):named a6 ))
(assert (! (= (consistent_F$ nil$ )true ):named a7 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (freq_F$a nil$a ?v0 )zero$ ):pattern ((freq_F$a nil$a ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A$ ))(! (= (freq_F$ nil$ ?v0 )zero$ ):pattern ((freq_F$ nil$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_tree_list$ ))(! (=> (not (member$ ?v0 (alphabet_F$a ?v1 )))(= (freq_F$a ?v1 ?v0 )zero$ )):pattern ((freq_F$a ?v1 ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree_list$ ))(! (=> (not (member$a ?v0 (alphabet_F$ ?v1 )))(= (freq_F$ ?v1 ?v0 )zero$ )):pattern ((freq_F$ ?v1 ?v0 )))):named a11 ))
(assert (! (= (height_F$a nil$a )zero$ ):named a12 ))
(assert (! (= (height_F$ nil$ )zero$ ):named a13 ))
(assert (! (forall ((?v0 A_tree_bool_fun$ )(?v1 Nat$ )(?v2 A_tree$ ))(! (= (fun_app$ (pred_tree$ ?v0 )(leaf$a ?v1 ?v2 ))(fun_app$a ?v0 ?v2 )):pattern ((fun_app$ (pred_tree$ ?v0 )(leaf$a ?v1 ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 Nat$ )(?v2 A$ ))(! (= (fun_app$a (pred_tree$a ?v0 )(leaf$ ?v1 ?v2 ))(fun_app$b ?v0 ?v2 )):pattern ((fun_app$a (pred_tree$a ?v0 )(leaf$ ?v1 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A_tree_tree_list$ ))(=> (and (=> (= ?v0 nil$a )false )(=> (not (= ?v0 nil$a ))false ))false )):named a16 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$b )false )(=> (not (= ?v0 nil$b ))false ))false )):named a17 ))
(assert (! (forall ((?v0 A_tree_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ ))(! (= (consistent$ (leaf$a ?v0 ?v1 ))true ):pattern ((leaf$a ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (consistent$a (leaf$ ?v0 ?v1 ))true ):pattern ((leaf$ ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (freq$ (leaf$a ?v0 ?v1 )?v2 )(ite (= ?v2 ?v1 )?v0 zero$ )):pattern ((freq$ (leaf$a ?v0 ?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A$ ))(! (= (freq$a (leaf$ ?v0 ?v1 )?v2 )(ite (= ?v2 ?v1 )?v0 zero$ )):pattern ((freq$a (leaf$ ?v0 ?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 Nat$ ))(member$ ?v0 (set_tree$ (leaf$a ?v1 ?v0 )))):named a23 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ ))(member$a ?v0 (set_tree$a (leaf$ ?v1 ?v0 )))):named a24 ))
(assert (! (forall ((?v0 A_tree_tree_bool_fun$ )(?v1 A_tree_tree_list$ ))(= (= (dropWhile$ ?v0 ?v1 )nil$a )(forall ((?v2 A_tree_tree$ ))(=> (member$b ?v2 (set$a ?v1 ))(fun_app$ ?v0 ?v2 ))))):named a25 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_list$ ))(= (= (dropWhile$a ?v0 ?v1 )nil$b )(forall ((?v2 A$ ))(=> (member$a ?v2 (set$b ?v1 ))(fun_app$b ?v0 ?v2 ))))):named a26 ))
(assert (! (forall ((?v0 A_tree_bool_fun$ )(?v1 A_tree_list$ ))(= (= (dropWhile$b ?v0 ?v1 )nil$ )(forall ((?v2 A_tree$ ))(=> (member$ ?v2 (set$ ?v1 ))(fun_app$a ?v0 ?v2 ))))):named a27 ))
(assert (! (forall ((?v0 A_tree_bool_fun$ )(?v1 A_tree_list$ ))(= (dropWhile$b ?v0 (dropWhile$b ?v0 ?v1 ))(dropWhile$b ?v0 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_list$ ))(= (dropWhile$a ?v0 (dropWhile$a ?v0 ?v1 ))(dropWhile$a ?v0 ?v1 ))):named a29 ))
(check-sat )
;(get-unsat-core )
