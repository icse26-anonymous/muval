;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun x1$ ()Nat$ )
(declare-fun x2$ ()A$ )
(declare-fun zero$ ()Nat$ )
(declare-fun depth$ (A_tree$ A$ )Nat$ )
(declare-fun finite$ (A_set$ )Bool )
(declare-fun height$ (A_tree$ )Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun alphabet$ (A_tree$ )A_set$ )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun map_tree$ (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(declare-fun pred_tree$ (A_bool_fun$ A_tree$ )Bool )
(declare-fun consistent$ (A_tree$ )Bool )
(assert (! (not (exists ((?v0 A$ ))(and (member$ ?v0 (alphabet$ (leaf$ x1$ x2$ )))(= (depth$ (leaf$ x1$ x2$ )?v0 )(height$ (leaf$ x1$ x2$ )))))):named a0 ))
(assert (! (consistent$ (leaf$ x1$ x2$ )):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_tree$ ))(exists ((?v1 A$ ))(member$ ?v1 (alphabet$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (consistent$ (leaf$ ?v0 ?v1 ))true ):pattern ((leaf$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 Nat$ )(?v2 A$ ))(! (= (pred_tree$ ?v0 (leaf$ ?v1 ?v2 ))(fun_app$ ?v0 ?v2 )):pattern ((pred_tree$ ?v0 (leaf$ ?v1 ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(less_eq$ (depth$ ?v0 ?v1 )(height$ ?v0 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A$ ))(! (= (depth$ (leaf$ ?v0 ?v1 )?v2 )zero$ ):pattern ((depth$ (leaf$ ?v0 ?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (height$ (leaf$ ?v0 ?v1 ))zero$ ):pattern ((leaf$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ ))(member$ ?v0 (set_tree$ (leaf$ ?v1 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (and (forall ((?v1 Nat$ )(?v2 A$ ))(=> (= ?v0 (leaf$ ?v1 ?v2 ))false ))(forall ((?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v0 (innerNode$ ?v1 ?v2 ?v3 ))false )))false )):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A_tree$ )(?v4 A_tree$ ))(not (= (leaf$ ?v0 ?v1 )(innerNode$ ?v2 ?v3 ?v4 )))):named a11 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 Nat$ )(?v2 A$ ))(! (= (map_tree$ ?v0 (leaf$ ?v1 ?v2 ))(leaf$ ?v1 (fun_app$a ?v0 ?v2 ))):pattern ((map_tree$ ?v0 (leaf$ ?v1 ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A_tree$ ))(finite$ (alphabet$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 Nat$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (innerNode$ ?v0 ?v1 ?v2 )(innerNode$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a14 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 Nat$ )(?v2 A_tree$ )(?v3 A_tree$ ))(! (= (pred_tree$ ?v0 (innerNode$ ?v1 ?v2 ?v3 ))(and (pred_tree$ ?v0 ?v2 )(pred_tree$ ?v0 ?v3 ))):pattern ((pred_tree$ ?v0 (innerNode$ ?v1 ?v2 ?v3 ))))):named a15 ))
(check-sat )
;(get-unsat-core )
