;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Ref$ 0 )
(declare-sort Ref_set$ 0 )
(declare-sort Ref_ref_fun$ 0 )
(declare-sort Ref_ref_ref_fun_fun$ 0 )
(declare-sort Ref_ref_ref_ref_fun_fun_fun$ 0 )
(declare-sort Dag$ 0)
(declare-fun tip$ ()Dag$)
(declare-fun select$ (Dag$)Dag$)
(declare-fun selecta$ (Dag$)Ref$)
(declare-fun selectb$ (Dag$)Dag$)
(declare-fun node$ (Dag$ Ref$ Dag$ )Dag$)
(declare-fun l$ ()Ref_ref_fun$ )
(declare-fun p$ ()Ref$ )
(declare-fun q$ ()Ref$ )
(declare-fun r$ ()Ref_ref_fun$ )
(declare-fun t$ ()Dag$ )
(declare-fun y$ ()Ref$ )
(declare-fun dag$ (Ref$ Ref_ref_fun$ Ref_ref_fun$ Dag$ )Bool )
(declare-fun null$ ()Ref$ )
(declare-fun member$ (Ref$ Ref_set$ )Bool )
(declare-fun set_of$ (Dag$ )Ref_set$ )
(declare-fun fun_app$ (Ref_ref_ref_fun_fun$ Ref$ )Ref_ref_fun$ )
(declare-fun fun_upd$ (Ref_ref_fun$ )Ref_ref_ref_ref_fun_fun_fun$ )
(declare-fun fun_app$a (Ref_ref_ref_ref_fun_fun_fun$ Ref$ )Ref_ref_ref_fun_fun$ )
(declare-fun fun_app$b (Ref_ref_fun$ Ref$ )Ref$ )
(assert (! (not (dag$ p$ (fun_app$ (fun_app$a (fun_upd$ l$ )q$ )y$ )r$ t$ )):named a0 ))
(assert (! (dag$ p$ l$ r$ t$ ):named a1 ))
(assert (! (not (member$ q$ (set_of$ t$ ))):named a2 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Dag$ )(?v2 Ref$ )(?v3 Ref_ref_fun$ )(?v4 Ref$ )(?v5 Ref_ref_fun$ ))(=> (not (member$ ?v0 (set_of$ ?v1 )))(= (dag$ ?v2 (fun_app$ (fun_app$a (fun_upd$ ?v3 )?v0 )?v4 )?v5 ?v1 )(dag$ ?v2 ?v3 ?v5 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Dag$ )(?v2 Ref$ )(?v3 Ref_ref_fun$ )(?v4 Ref_ref_fun$ )(?v5 Ref$ ))(=> (not (member$ ?v0 (set_of$ ?v1 )))(= (dag$ ?v2 ?v3 (fun_app$ (fun_app$a (fun_upd$ ?v4 )?v0 )?v5 )?v1 )(dag$ ?v2 ?v3 ?v4 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref$ )(?v2 Ref$ )(?v3 Ref$ ))(! (= (fun_app$b (fun_app$ (fun_app$a (fun_upd$ ?v0 )?v1 )?v2 )?v3 )(ite (= ?v3 ?v1 )?v2 (fun_app$b ?v0 ?v3 ))):pattern ((fun_app$b (fun_app$ (fun_app$a (fun_upd$ ?v0 )?v1 )?v2 )?v3 )))):named a5 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref$ )(?v2 Ref$ )(?v3 Ref$ ))(= (fun_app$ (fun_app$a (fun_upd$ (fun_app$ (fun_app$a (fun_upd$ ?v0 )?v1 )?v2 ))?v1 )?v3 )(fun_app$ (fun_app$a (fun_upd$ ?v0 )?v1 )?v3 ))):named a6 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref$ ))(= (fun_app$ (fun_app$a (fun_upd$ ?v0 )?v1 )(fun_app$b ?v0 ?v1 ))?v0 )):named a7 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (dag$ ?v0 ?v1 ?v2 ?v3 )(not (member$ null$ (set_of$ ?v3 ))))):named a8 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (not (= ?v0 null$ ))(not (dag$ ?v0 (fun_app$ (fun_app$a (fun_upd$ ?v1 )?v0 )?v0 )?v2 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (not (= ?v0 null$ ))(not (dag$ ?v0 ?v1 (fun_app$ (fun_app$a (fun_upd$ ?v2 )?v0 )?v0 )?v3 )))):named a10 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref$ )(?v2 Ref$ ))(= (= (fun_app$ (fun_app$a (fun_upd$ ?v0 )?v1 )?v2 )?v0 )(= (fun_app$b ?v0 ?v1 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref$ )(?v2 Ref$ ))(! (= (fun_app$b (fun_app$ (fun_app$a (fun_upd$ ?v0 )?v1 )?v2 )?v1 )?v2 ):pattern ((fun_app$ (fun_app$a (fun_upd$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref$ )(?v2 Ref$ )(?v3 Ref$ ))(! (= (fun_app$b (fun_app$ (fun_app$a (fun_upd$ ?v0 )?v1 )?v2 )?v3 )(ite (= ?v3 ?v1 )?v2 (fun_app$b ?v0 ?v3 ))):pattern ((fun_app$b (fun_app$ (fun_app$a (fun_upd$ ?v0 )?v1 )?v2 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref$ )(?v2 Ref$ ))(! (=> (= (fun_app$b ?v0 ?v1 )?v2 )(= (fun_app$ (fun_app$a (fun_upd$ ?v0 )?v1 )?v2 )?v0 )):pattern ((fun_app$ (fun_app$a (fun_upd$ ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref$ )(?v2 Ref_ref_fun$ )(?v3 Ref$ ))(! (=> (not (= ?v0 ?v1 ))(= (fun_app$b (fun_app$ (fun_app$a (fun_upd$ ?v2 )?v1 )?v3 )?v0 )(fun_app$b ?v2 ?v0 ))):pattern ((fun_app$b (fun_app$ (fun_app$a (fun_upd$ ?v2 )?v1 )?v3 )?v0 )))):named a15 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref$ )(?v2 Ref_ref_fun$ )(?v3 Ref$ )(?v4 Ref$ ))(=> (not (= ?v0 ?v1 ))(= (fun_app$ (fun_app$a (fun_upd$ (fun_app$ (fun_app$a (fun_upd$ ?v2 )?v0 )?v3 ))?v1 )?v4 )(fun_app$ (fun_app$a (fun_upd$ (fun_app$ (fun_app$a (fun_upd$ ?v2 )?v1 )?v4 ))?v0 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(= (dag$ ?v0 ?v1 (fun_app$ (fun_app$a (fun_upd$ ?v2 )?v0 )?v0 )?v3 )(and (= ?v0 null$ )(= ?v3 tip$ )))):named a17 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(= (dag$ ?v0 (fun_app$ (fun_app$a (fun_upd$ ?v1 )?v0 )?v0 )?v2 ?v3 )(and (= ?v0 null$ )(= ?v3 tip$ )))):named a18 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref_ref_fun$ )(?v2 Dag$ ))(= (dag$ null$ ?v0 ?v1 ?v2 )(= ?v2 tip$ ))):named a19 ))
(check-sat )
;(get-unsat-core )
