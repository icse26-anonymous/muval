;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Ref$ 0 )
(declare-sort Dag$ 0)
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-fun tip$ ()Dag$)
(declare-fun select$ (Dag$)Dag$)
(declare-fun selecta$ (Dag$)Ref$)
(declare-fun selectb$ (Dag$)Dag$)
(declare-fun node$ (Dag$ Ref$ Dag$ )Dag$)
(declare-fun nibble0$ ()Nibble$)
(declare-fun nibble1$ ()Nibble$)
(declare-fun nibble2$ ()Nibble$)
(declare-fun nibble3$ ()Nibble$)
(declare-fun nibble4$ ()Nibble$)
(declare-fun nibble5$ ()Nibble$)
(declare-fun nibble6$ ()Nibble$)
(declare-fun nibble7$ ()Nibble$)
(declare-fun nibble8$ ()Nibble$)
(declare-fun nibble9$ ()Nibble$)
(declare-fun nibbleA$ ()Nibble$)
(declare-fun nibbleB$ ()Nibble$)
(declare-fun nibbleC$ ()Nibble$)
(declare-fun nibbleD$ ()Nibble$)
(declare-fun nibbleE$ ()Nibble$)
(declare-fun nibbleF$ ()Nibble$)
(declare-fun selectc$ (Char$)Nibble$)
(declare-fun selectd$ (Char$)Nibble$)
(declare-fun char$ (Nibble$ Nibble$ )Char$)
(declare-fun a$ ()Ref$ )
(declare-fun lt$ ()Dag$ )
(declare-fun rt$ ()Dag$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun size$ (Dag$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun size_dag$ (Dag$ )Nat$ )
(declare-fun size_bool$ (Bool )Nat$ )
(declare-fun size_char$ (Char$ )Nat$ )
(assert (! (not (not (= rt$ (node$ lt$ a$ rt$ )))):named a0 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Ref$ )(?v2 Dag$ )(?v3 Dag$ )(?v4 Ref$ )(?v5 Dag$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a1 ))
(assert (! (forall ((?v0 Dag$ ))(=> (and (=> (= ?v0 tip$ )false )(forall ((?v1 Dag$ )(?v2 Ref$ )(?v3 Dag$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false )))false )):named a2 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Ref$ )(?v2 Dag$ ))(not (= tip$ (node$ ?v0 ?v1 ?v2 )))):named a3 ))
(assert (! (= (size$ tip$ )zero$ ):named a4 ))
(assert (! (= (size_dag$ tip$ )zero$ ):named a5 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Dag$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(not (= ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a7 ))
(assert (! (= zero$ zero$ ):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a9 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Ref$ )(?v2 Dag$ ))(! (= (size$ (node$ ?v0 ?v1 ?v2 ))(plus$ (plus$ (size$ ?v0 )(size$ ?v2 ))(suc$ zero$ ))):pattern ((node$ ?v0 ?v1 ?v2 )))):named a11 ))
(assert (! (= (size_bool$ false )zero$ ):named a12 ))
(check-sat )
;(get-unsat-core )
