;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Ref$ 0 )
(declare-sort Ref_set$ 0 )
(declare-sort Ref_ref_fun$ 0 )
(declare-sort Dag_bool_fun$ 0 )
(declare-sort Dag$ 0)
(declare-fun tip$ ()Dag$)
(declare-fun select$ (Dag$)Dag$)
(declare-fun selecta$ (Dag$)Ref$)
(declare-fun selectb$ (Dag$)Dag$)
(declare-fun node$ (Dag$ Ref$ Dag$ )Dag$)
(declare-fun l$ ()Ref_ref_fun$ )
(declare-fun p$ ()Ref$ )
(declare-fun r$ ()Ref_ref_fun$ )
(declare-fun t$ ()Dag$ )
(declare-fun dag$ (Ref$ Ref_ref_fun$ Ref_ref_fun$ )Dag_bool_fun$ )
(declare-fun dag$a (Dag$ )Bool )
(declare-fun less$ (Dag$ Dag$ )Bool )
(declare-fun null$ ()Ref$ )
(declare-fun member$ (Ref$ Ref_set$ )Bool )
(declare-fun set_of$ (Dag$ )Ref_set$ )
(declare-fun subdag$ (Dag$ Dag$ )Bool )
(declare-fun fun_app$ (Dag_bool_fun$ Dag$ )Bool )
(declare-fun fun_app$a (Ref_ref_fun$ Ref$ )Ref$ )
(assert (! (not (= (fun_app$ (dag$ p$ l$ r$ )t$ )(exists ((?v0 Dag$ )(?v1 Dag$ ))(and (= t$ (node$ ?v0 p$ ?v1 ))(and (fun_app$ (dag$ (fun_app$a l$ p$ )l$ r$ )?v0 )(fun_app$ (dag$ (fun_app$a r$ p$ )l$ r$ )?v1 )))))):named a0 ))
(assert (! (not (= p$ null$ )):named a1 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Ref$ )(?v2 Dag$ )(?v3 Dag$ )(?v4 Ref$ )(?v5 Dag$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a2 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Ref$ )(?v5 Dag$ ))(! (= (fun_app$ (dag$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v4 )(and (not (= ?v0 null$ ))(and (fun_app$ (dag$ (fun_app$a ?v1 ?v0 )?v1 ?v2 )?v3 )(fun_app$ (dag$ (fun_app$a ?v2 ?v0 )?v1 ?v2 )?v5 ))))):pattern ((fun_app$ (dag$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a3 ))
(assert (! (forall ((?v0 Ref_ref_fun$ )(?v1 Ref_ref_fun$ )(?v2 Dag$ ))(= (fun_app$ (dag$ null$ ?v0 ?v1 )?v2 )(= ?v2 tip$ ))):named a4 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ ))(! (= (fun_app$ (dag$ ?v0 ?v1 ?v2 )tip$ )(= ?v0 null$ )):pattern ((dag$ ?v0 ?v1 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 Dag$ ))(=> (and (=> (= ?v0 tip$ )false )(forall ((?v1 Dag$ )(?v2 Ref$ )(?v3 Dag$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false )))false )):named a6 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Ref$ )(?v2 Dag$ ))(not (= tip$ (node$ ?v0 ?v1 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Ref$ )(?v2 Dag$ )(?v3 Dag$ ))(! (= (subdag$ (node$ ?v0 ?v1 ?v2 )?v3 )(or (= ?v3 ?v0 )(or (= ?v3 ?v2 )(or (subdag$ ?v0 ?v3 )(subdag$ ?v2 ?v3 ))))):pattern ((subdag$ (node$ ?v0 ?v1 ?v2 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Dag$ )(?v2 Ref$ )(?v3 Dag$ ))(=> (subdag$ ?v0 (node$ ?v1 ?v2 ?v3 ))(and (subdag$ ?v0 ?v1 )(subdag$ ?v0 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Dag$ )(?v2 Ref$ )(?v3 Dag$ ))(! (= (less$ ?v0 (node$ ?v1 ?v2 ?v3 ))(or (= ?v0 ?v1 )(or (= ?v0 ?v3 )(or (less$ ?v0 ?v1 )(less$ ?v0 ?v3 ))))):pattern ((less$ ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a10 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Ref$ )(?v2 Dag$ )(?v3 Dag$ ))(=> (less$ (node$ ?v0 ?v1 ?v2 )?v3 )(and (less$ ?v0 ?v3 )(less$ ?v2 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Ref$ )(?v2 Dag$ ))(! (= (dag$a (node$ ?v0 ?v1 ?v2 ))(and (not (member$ ?v1 (set_of$ ?v0 )))(and (not (member$ ?v1 (set_of$ ?v2 )))(and (dag$a ?v0 )(dag$a ?v2 ))))):pattern ((node$ ?v0 ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Dag$ ))(= (member$ ?v0 (set_of$ ?v1 ))(exists ((?v2 Dag$ )(?v3 Dag$ ))(or (= ?v1 (node$ ?v2 ?v0 ?v3 ))(subdag$ ?v1 (node$ ?v2 ?v0 ?v3 )))))):named a13 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Dag$ ))(! (= (less$ ?v0 ?v1 )(subdag$ ?v1 ?v0 )):pattern ((less$ ?v0 ?v1 )))):named a14 ))
(check-sat )
;(get-unsat-core )
