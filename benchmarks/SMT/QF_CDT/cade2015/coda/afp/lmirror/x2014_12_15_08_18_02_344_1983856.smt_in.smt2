;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun f$ ()B_a_fun$ )
(declare-fun xs$ ()B_llist$ )
(declare-fun lmap$ (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun ldrop$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun lmap$a (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$b (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$c (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnull$ (B_llist$ )Bool )
(declare-fun ldrop$a (Enat$ )B_llist_b_llist_fun$ )
(declare-fun ldropn$ (Nat$ )A_llist_a_llist_fun$ )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun fun_app$ (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun ldropn$a (Nat$ )B_llist_b_llist_fun$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lmirror$ ()B_llist_b_llist_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (B_b_fun$ B$ )B$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun lmirror$a ()A_llist_a_llist_fun$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun iterates$a (B_b_fun$ B$ )B_llist$ )
(declare-fun lsublist$a (B_llist$ Nat_set$ )B_llist$ )
(declare-fun lmirror_aux$ (B_llist$ )B_llist_b_llist_fun$ )
(declare-fun lmirror_aux$a (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lstrict_prefix$ (B_llist$ B_llist$ )Bool )
(declare-fun lstrict_prefix$a (A_llist$ A_llist$ )Bool )
(assert (! (not (= (lmap$ f$ (fun_app$ lmirror$ xs$ ))(fun_app$a lmirror$a (lmap$ f$ xs$ )))):named a0 ))
(assert (! (= (fun_app$ lmirror$ lNil$a )lNil$a ):named a1 ))
(assert (! (= (fun_app$a lmirror$a lNil$ )lNil$ ):named a2 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lnull$ (fun_app$ lmirror$ ?v0 ))(lnull$ ?v0 ))):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lnull$a (fun_app$a lmirror$a ?v0 ))(lnull$a ?v0 ))):named a4 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (lmap$a ?v0 (fun_app$ (lmirror_aux$ ?v1 )?v2 ))(fun_app$ (lmirror_aux$ (lmap$a ?v0 ?v1 ))(lmap$a ?v0 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lmap$b ?v0 (fun_app$a (lmirror_aux$a ?v1 )?v2 ))(fun_app$ (lmirror_aux$ (lmap$b ?v0 ?v1 ))(lmap$b ?v0 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lmap$c ?v0 (fun_app$a (lmirror_aux$a ?v1 )?v2 ))(fun_app$a (lmirror_aux$a (lmap$c ?v0 ?v1 ))(lmap$c ?v0 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (lmap$ ?v0 (fun_app$ (lmirror_aux$ ?v1 )?v2 ))(fun_app$a (lmirror_aux$a (lmap$ ?v0 ?v1 ))(lmap$ ?v0 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$ (lmap$a ?v2 ?v0 )(lmap$a ?v2 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$ (lmap$b ?v2 ?v0 )(lmap$b ?v2 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$a (lmap$c ?v2 ?v0 )(lmap$c ?v2 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_a_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$a (lmap$ ?v2 ?v0 )(lmap$ ?v2 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ )(?v2 Nat_set$ ))(= (lsublist$ (lmap$c ?v0 ?v1 )?v2 )(lmap$c ?v0 (lsublist$ ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ )(?v2 Nat_set$ ))(= (lsublist$a (lmap$b ?v0 ?v1 )?v2 )(lmap$b ?v0 (lsublist$ ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ )(?v2 Nat_set$ ))(= (lsublist$a (lmap$a ?v0 ?v1 )?v2 )(lmap$a ?v0 (lsublist$a ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ )(?v2 Nat_set$ ))(= (lsublist$ (lmap$ ?v0 ?v1 )?v2 )(lmap$ ?v0 (lsublist$a ?v1 ?v2 )))):named a16 ))
(assert (! (= lmirror$ (lmirror_aux$ lNil$a )):named a17 ))
(assert (! (= lmirror$a (lmirror_aux$a lNil$ )):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$a (ldrop$ ?v0 )(lmap$c ?v1 ?v2 ))(lmap$c ?v1 (fun_app$a (ldrop$ ?v0 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ldrop$a ?v0 )(lmap$b ?v1 ?v2 ))(lmap$b ?v1 (fun_app$a (ldrop$ ?v0 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (fun_app$ (ldrop$a ?v0 )(lmap$a ?v1 ?v2 ))(lmap$a ?v1 (fun_app$ (ldrop$a ?v0 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (fun_app$a (ldrop$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$ (ldrop$a ?v0 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$a (ldropn$ ?v0 )(lmap$c ?v1 ?v2 ))(lmap$c ?v1 (fun_app$a (ldropn$ ?v0 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ldropn$a ?v0 )(lmap$b ?v1 ?v2 ))(lmap$b ?v1 (fun_app$a (ldropn$ ?v0 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (fun_app$ (ldropn$a ?v0 )(lmap$a ?v1 ?v2 ))(lmap$a ?v1 (fun_app$ (ldropn$a ?v0 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (fun_app$a (ldropn$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$ (ldropn$a ?v0 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$c ?v0 ?v1 ))(lnull$a ?v1 ))):named a27 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$b ?v0 ?v1 ))(lnull$a ?v1 ))):named a28 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$ (lmap$a ?v0 ?v1 ))(lnull$ ?v1 ))):named a29 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$a (lmap$ ?v0 ?v1 ))(lnull$ ?v1 ))):named a30 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (lmap$c ?v0 (iterates$ ?v0 ?v1 ))(iterates$ ?v0 (fun_app$b ?v0 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (lmap$a ?v0 (iterates$a ?v0 ?v1 ))(iterates$a ?v0 (fun_app$c ?v0 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$c ?v0 ?v1 ))(llength$ ?v1 ))):named a33 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$b ?v0 ?v1 ))(llength$ ?v1 ))):named a34 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$a (lmap$a ?v0 ?v1 ))(llength$a ?v1 ))):named a35 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$a ?v1 ))):named a36 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$ (lmap$c ?v0 ?v1 ))(lmap$c ?v0 (ltl$ ?v1 )))):named a37 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (ltl$a (lmap$b ?v0 ?v1 ))(lmap$b ?v0 (ltl$ ?v1 )))):named a38 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (ltl$a (lmap$a ?v0 ?v1 ))(lmap$a ?v0 (ltl$a ?v1 )))):named a39 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$ (lmap$ ?v0 ?v1 ))(lmap$ ?v0 (ltl$a ?v1 )))):named a40 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$a (ldrop$ ?v0 )lNil$ )lNil$ ):pattern ((ldrop$ ?v0 )))):named a41 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ldrop$a ?v0 )lNil$a )lNil$a ):pattern ((ldrop$a ?v0 )))):named a42 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (ldropn$ ?v0 )lNil$ )lNil$ ):pattern ((ldropn$ ?v0 )))):named a43 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ldropn$a ?v0 )lNil$a )lNil$a ):pattern ((ldropn$a ?v0 )))):named a44 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$ lNil$ ?v0 )lNil$ ):pattern ((lsublist$ lNil$ ?v0 )))):named a45 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$a lNil$a ?v0 )lNil$a ):pattern ((lsublist$a lNil$a ?v0 )))):named a46 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$ (fun_app$ (lmirror_aux$ ?v0 )?v1 )))(or (not (lnull$ ?v1 ))(not (lnull$ ?v0 ))))):named a47 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$a (fun_app$a (lmirror_aux$a ?v0 )?v1 )))(or (not (lnull$a ?v1 ))(not (lnull$a ?v0 ))))):named a48 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$ (fun_app$ (lmirror_aux$ ?v0 )?v1 ))(and (lnull$ ?v1 )(lnull$ ?v0 )))):named a49 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$a (fun_app$a (lmirror_aux$a ?v0 )?v1 ))(and (lnull$a ?v1 )(lnull$a ?v0 )))):named a50 ))
(check-sat )
;(get-unsat-core )
