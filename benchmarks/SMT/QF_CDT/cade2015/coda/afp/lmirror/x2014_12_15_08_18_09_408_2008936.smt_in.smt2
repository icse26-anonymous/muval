;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun xs$ ()A_llist$ )
(declare-fun rev$ (A_list$ )A_list$ )
(declare-fun append$ (A_list$ A_list$ )A_list$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun lmirror$ (A_llist$ )A_llist$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun undefined$ ()A_list$ )
(declare-fun list_of_aux$ (A_list$ A_llist$ )A_list$ )
(assert (! (not (= (list_of$ (lmirror$ xs$ ))(append$ (list_of$ xs$ )(rev$ (list_of$ xs$ ))))):named a0 ))
(assert (! (lfinite$ xs$ ):named a1 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (rev$ (append$ ?v0 ?v1 ))(append$ (rev$ ?v1 )(rev$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (rev$ ?v0 )(rev$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_list$ ))(= (rev$ (rev$ ?v0 ))?v0 )):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a5 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ ))(= (append$ (append$ ?v0 ?v1 )?v2 )(append$ ?v0 (append$ ?v1 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(= (lmirror$ (llist_of$ ?v0 ))(llist_of$ (append$ ?v0 (rev$ ?v0 ))))):named a8 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (rev$ ?v0 )?v1 )(= ?v0 (rev$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v2 ?v3 ))(exists ((?v4 A_list$ ))(or (and (= ?v0 (append$ ?v2 ?v4 ))(= (append$ ?v4 ?v1 )?v3 ))(and (= (append$ ?v0 ?v4 )?v2 )(= ?v1 (append$ ?v4 ?v3 ))))))):named a10 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_list$ )(?v3 A_list$ )(?v4 A_list$ ))(=> (and (= (append$ ?v0 ?v1 )?v2 )(= ?v3 (append$ ?v1 ?v4 )))(= (append$ ?v0 ?v3 )(append$ ?v2 ?v4 )))):named a11 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_llist$ ))(! (= (list_of_aux$ ?v0 ?v1 )(ite (lfinite$ ?v1 )(append$ (rev$ ?v0 )(list_of$ ?v1 ))undefined$ )):pattern ((list_of_aux$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lfinite$ ?v0 )(lfinite$ ?v1 ))(= (list_of$ (lappend$ ?v0 ?v1 ))(append$ (list_of$ ?v0 )(list_of$ ?v1 ))))):named a13 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (lappend$ ?v0 ?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(= (llist_of$ (list_of$ ?v0 ))?v0 ))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a18 ))
(check-sat )
;(get-unsat-core )
