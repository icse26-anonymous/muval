;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun xs$ ()A_llist$ )
(declare-fun acc$ ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun acca$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lmirror_aux$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (and (lfinite$ xsa$ )(lfinite$ acca$ ))):named a0 ))
(assert (! (lnull$ xsa$ ):named a1 ))
(assert (! (lfinite$ (fun_app$ (lmirror_aux$ acc$ )xs$ )):named a2 ))
(assert (! (lfinite$ (fun_app$ (lmirror_aux$ acca$ )xsa$ )):named a3 ))
(assert (! (=> (= (ltl$ (fun_app$ (lmirror_aux$ acca$ )xsa$ ))(fun_app$ (lmirror_aux$ (ltl$ acca$ ))lNil$ ))(and (lfinite$ lNil$ )(lfinite$ (ltl$ acca$ )))):named a4 ))
(assert (! (not (lnull$ (fun_app$ (lmirror_aux$ acca$ )xsa$ ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (= (ltl$ (fun_app$ (lmirror_aux$ acca$ )xsa$ ))(fun_app$ (lmirror_aux$ ?v0 )?v1 ))(and (lfinite$ ?v1 )(lfinite$ ?v0 )))):named a6 ))
(assert (! (= (lfinite$ lNil$ )true ):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ (ltl$ ?v0 ))(lfinite$ ?v0 ))):named a8 ))
(assert (! (lfinite$ lNil$ ):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lnull$ ?v0 )(lfinite$ ?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lmirror_aux$ ?v0 )lNil$ )?v0 ):pattern ((lmirror_aux$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (fun_app$ (lmirror_aux$ ?v0 )?v1 )))(or (not (lnull$ ?v1 ))(not (lnull$ ?v0 ))))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (lmirror_aux$ ?v0 )?v1 ))(and (lnull$ ?v1 )(lnull$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_bool_fun$ ))(=> (and (lfinite$ ?v0 )(and (forall ((?v2 A_llist$ ))(=> (lnull$ ?v2 )(fun_app$a ?v1 ?v2 )))(forall ((?v2 A_llist$ ))(=> (and (lfinite$ ?v2 )(and (not (lnull$ ?v2 ))(fun_app$a ?v1 (ltl$ ?v2 ))))(fun_app$a ?v1 ?v2 )))))(fun_app$a ?v1 ?v0 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (fun_app$a (lstrict_prefix$ ?v0 )?v1 )(lfinite$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$ (ldropn$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a17 ))
(check-sat )
;(get-unsat-core )
