;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-fun f$ ()B_a_fun$ )
(declare-fun xs$ ()B_llist$ )
(declare-fun acc$ ()B_llist$ )
(declare-fun lmap$ (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$a (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$b (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$c (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnull$ (B_llist$ )Bool )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun fun_app$ (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun lappend$ (B_llist$ B_llist$ )B_llist$ )
(declare-fun lfinite$ (B_llist$ )Bool )
(declare-fun lmirror$ ()B_llist_b_llist_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$a (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun lmirror$a ()A_llist_a_llist_fun$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun lsublist$a (B_llist$ Nat_set$ )B_llist$ )
(declare-fun lmirror_aux$ (B_llist$ )B_llist_b_llist_fun$ )
(declare-fun lmirror_aux$a (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lstrict_prefix$ (B_llist$ B_llist$ )Bool )
(declare-fun lstrict_prefix$a (A_llist$ A_llist$ )Bool )
(assert (! (not (= (lmap$ f$ (fun_app$ (lmirror_aux$ acc$ )xs$ ))(fun_app$a (lmirror_aux$a (lmap$ f$ acc$ ))(lmap$ f$ xs$ )))):named a0 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$ (lmirror_aux$ ?v0 )lNil$a )?v0 ):pattern ((lmirror_aux$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (lmirror_aux$a ?v0 )lNil$ )?v0 ):pattern ((lmirror_aux$a ?v0 )))):named a2 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (fun_app$ (lmirror_aux$ ?v0 )(lCons$a ?v1 ?v2 ))(lCons$a ?v1 (fun_app$ (lmirror_aux$ (lCons$a ?v1 ?v0 ))?v2 ))):pattern ((fun_app$ (lmirror_aux$ ?v0 )(lCons$a ?v1 ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$a (lmirror_aux$a ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v1 (fun_app$a (lmirror_aux$a (lCons$ ?v1 ?v0 ))?v2 ))):pattern ((fun_app$a (lmirror_aux$a ?v0 )(lCons$ ?v1 ?v2 ))))):named a4 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$ (fun_app$ (lmirror_aux$ ?v0 )?v1 )))(or (not (lnull$ ?v1 ))(not (lnull$ ?v0 ))))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$a (fun_app$a (lmirror_aux$a ?v0 )?v1 )))(or (not (lnull$a ?v1 ))(not (lnull$a ?v0 ))))):named a6 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$ (fun_app$ (lmirror_aux$ ?v0 )?v1 ))(and (lnull$ ?v1 )(lnull$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$a (fun_app$a (lmirror_aux$a ?v0 )?v1 ))(and (lnull$a ?v1 )(lnull$a ?v0 )))):named a8 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lfinite$ (fun_app$ (lmirror_aux$ ?v0 )?v1 ))(and (lfinite$ ?v1 )(lfinite$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$a (fun_app$a (lmirror_aux$a ?v0 )?v1 ))(and (lfinite$a ?v1 )(lfinite$a ?v0 )))):named a10 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(not (lnull$ (fun_app$ (lmirror_aux$ ?v1 )?v0 ))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (or (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))(not (lnull$a (fun_app$a (lmirror_aux$a ?v1 )?v0 ))))):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (lnull$ ?v0 )(lnull$ ?v1 ))(lnull$ (fun_app$ (lmirror_aux$ ?v1 )?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lnull$a ?v0 )(lnull$a ?v1 ))(lnull$a (fun_app$a (lmirror_aux$a ?v1 )?v0 )))):named a14 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$ (lmirror_aux$ (lappend$ ?v0 ?v1 ))?v2 )(lappend$ (fun_app$ (lmirror_aux$ ?v0 )?v2 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$a (lmirror_aux$a (lappend$a ?v0 ?v1 ))?v2 )(lappend$a (fun_app$a (lmirror_aux$a ?v0 )?v2 )?v1 ))):named a16 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (fun_app$ (lmirror_aux$ ?v1 )?v0 )?v0 )):pattern ((fun_app$ (lmirror_aux$ ?v1 )?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (not (lfinite$a ?v0 ))(= (fun_app$a (lmirror_aux$a ?v1 )?v0 )?v0 )):pattern ((fun_app$a (lmirror_aux$a ?v1 )?v0 )))):named a18 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$ (lmap$a ?v2 ?v0 )(lmap$a ?v2 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$ (lmap$b ?v2 ?v0 )(lmap$b ?v2 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$a (lmap$c ?v2 ?v0 )(lmap$c ?v2 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_a_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$a (lmap$ ?v2 ?v0 )(lmap$ ?v2 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ )(?v2 Nat_set$ ))(= (lsublist$ (lmap$c ?v0 ?v1 )?v2 )(lmap$c ?v0 (lsublist$ ?v1 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ )(?v2 Nat_set$ ))(= (lsublist$a (lmap$b ?v0 ?v1 )?v2 )(lmap$b ?v0 (lsublist$ ?v1 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ )(?v2 Nat_set$ ))(= (lsublist$a (lmap$a ?v0 ?v1 )?v2 )(lmap$a ?v0 (lsublist$a ?v1 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ )(?v2 Nat_set$ ))(= (lsublist$ (lmap$ ?v0 ?v1 )?v2 )(lmap$ ?v0 (lsublist$a ?v1 ?v2 )))):named a26 ))
(assert (! (= lmirror$ (lmirror_aux$ lNil$a )):named a27 ))
(assert (! (= lmirror$a (lmirror_aux$a lNil$ )):named a28 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a29 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$a (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$a ?v1 ?v2 ))):pattern ((lappend$a (lCons$ ?v0 ?v1 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B_llist$ ))(! (= (lappend$ (lCons$a ?v0 ?v1 )?v2 )(lCons$a ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$a ?v0 ?v1 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$a (lCons$ ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a33 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$ (lCons$a ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$a (lCons$ ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a35 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$ (lCons$a ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$a (lappend$a ?v0 ?v1 )))(or (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a37 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$ (lappend$ ?v0 ?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a38 ))
(check-sat )
;(get-unsat-core )
