;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun inf$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(assert (! (not (= (lnull$ (fun_app$ (inf$ xs$ )ys$ ))(=> (and (not (= xs$ lNil$ ))(not (= ys$ lNil$ )))(not (= (lhd$ xs$ )(lhd$ ys$ )))))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (inf$ ?v0 )lNil$ )lNil$ ):pattern ((inf$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (inf$ lNil$ )?v0 )lNil$ ):pattern ((fun_app$ (inf$ lNil$ )?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (inf$ ?v0 )lNil$ )lNil$ ):pattern ((inf$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (inf$ lNil$ )?v0 )lNil$ ):pattern ((fun_app$ (inf$ lNil$ )?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (=> (or (lnull$ ?v0 )(not (fun_app$a ?v1 (lhd$ ?v0 ))))false )(=> (and (not (lnull$ ?v0 ))(fun_app$a ?v1 (lhd$ ?v0 )))false ))false )):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lnull$ ?v0 )(= ?v0 lNil$ )):pattern ((lnull$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (= ?v0 lNil$ )(lnull$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lnull$ ?v0 )(= ?v0 lNil$ ))):named a8 ))
(assert (! (lnull$ lNil$ ):named a9 ))
(check-sat )
;(get-unsat-core )
