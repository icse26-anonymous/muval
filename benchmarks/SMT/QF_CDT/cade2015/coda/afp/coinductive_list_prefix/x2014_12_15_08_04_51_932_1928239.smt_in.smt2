;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun zs$ ()A_llist$ )
(declare-fun inf$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun less_eq$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(assert (! (not (fun_app$ (fun_app$a lprefix$ xs$ )(inf$ ys$ zs$ ))):named a0 ))
(assert (! (fun_app$ (fun_app$a less_eq$ xs$ )ys$ ):named a1 ))
(assert (! (fun_app$ (fun_app$a less_eq$ xs$ )zs$ ):named a2 ))
(assert (! (fun_app$ (fun_app$a less_eq$ (inf$ xs$ ys$ ))xs$ ):named a3 ))
(assert (! (fun_app$ (fun_app$a less_eq$ (inf$ xs$ ys$ ))ys$ ):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (= less_eq$ lprefix$ ):named a8 ))
(check-sat )
;(get-unsat-core )
