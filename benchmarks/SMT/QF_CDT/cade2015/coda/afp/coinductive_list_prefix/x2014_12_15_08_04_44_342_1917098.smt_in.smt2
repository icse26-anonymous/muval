;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun inf$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(assert (! (not (= (lhd$ (fun_app$ (inf$ xs$ )ys$ ))(lhd$ ys$ ))):named a0 ))
(assert (! (not (= xs$ lNil$ )):named a1 ))
(assert (! (not (= ys$ lNil$ )):named a2 ))
(assert (! (= (lhd$ xs$ )(lhd$ ys$ )):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (inf$ ?v0 )lNil$ )lNil$ ):pattern ((inf$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (inf$ lNil$ )?v0 )lNil$ ):pattern ((fun_app$ (inf$ lNil$ )?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (inf$ ?v0 )lNil$ )lNil$ ):pattern ((inf$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (inf$ lNil$ )?v0 )lNil$ ):pattern ((fun_app$ (inf$ lNil$ )?v0 )))):named a7 ))
(check-sat )
;(get-unsat-core )
