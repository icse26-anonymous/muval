;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_tree$ 0)
(declare-sort Num$ 0)
(declare-sort A_op_s_t$ 0)
(declare-fun leaf$ ()A_tree$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun val$ (A_tree$)A$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A_tree$ A$ A_tree$ )A_tree$)
(declare-fun one$ ()Num$)
(declare-fun select$ (Num$)Num$)
(declare-fun bit0$ (Num$ )Num$)
(declare-fun selecta$ (Num$)Num$)
(declare-fun bit1$ (Num$ )Num$)
(declare-fun selectb$ (A_op_s_t$)A$)
(declare-fun splay$ (A$ )A_op_s_t$)
(declare-fun selectc$ (A_op_s_t$)A$)
(declare-fun insert$ (A$ )A_op_s_t$)
(declare-fun selectd$ (A_op_s_t$)A$)
(declare-fun delete$ (A$ )A_op_s_t$)
(declare-fun a$ ()A$ )
(declare-fun e$ ()A$ )
(declare-fun f$ ()A_op_s_t$ )
(declare-fun l$ ()A_tree$ )
(declare-fun r$ ()A_tree$ )
(declare-fun s$ ()A_tree$ )
(declare-fun bst$ (A_tree$ )Bool )
(declare-fun log$ (Real Real )Real )
(declare-fun phi$ (A_tree$ )Real )
(declare-fun plus$ (Num$ Num$ )Num$ )
(declare-fun real$ (Nat$ )Real )
(declare-fun size1$ (A_tree$ )Nat$ )
(declare-fun t_s_t$ (A_op_s_t$ A_tree$ )Real )
(declare-fun times$ (Real Real )Real )
(declare-fun splay$a (A$ A_tree$ )A_tree$ )
(declare-fun less_eq$ (Num$ Num$ )Bool )
(declare-fun numeral$ (Num$ )Real )
(declare-fun nxt_s_t$ (A_op_s_t$ A_tree$ )A_tree$ )
(declare-fun t_splay$ (A$ A_tree$ )Nat$ )
(assert (! (not (<= (- (+ (real$ (t_splay$ a$ s$ ))(+ (phi$ l$ )(phi$ r$ )))(phi$ s$ ))(+ (* 2.0 (log$ 2.0 (+ (real$ (size1$ l$ ))(real$ (size1$ r$ )))))1.0 ))):named a0 ))
(assert (! (bst$ s$ ):named a1 ))
(assert (! (not (= s$ leaf$ )):named a2 ))
(assert (! (<= (- (+ (real$ (t_splay$ a$ s$ ))(phi$ (splay$a a$ s$ )))(phi$ s$ ))(+ (* 3.0 (log$ 2.0 (real$ (size1$ s$ ))))1.0 )):named a3 ))
(assert (! (= (+ 1.0 1.0 )2.0 ):named a4 ))
(assert (! (not (= e$ a$ )):named a5 ))
(assert (! (forall ((?v0 Num$ ))(= (+ (numeral$ ?v0 )1.0 )(numeral$ (plus$ ?v0 one$ )))):named a6 ))
(assert (! (forall ((?v0 Num$ ))(= (+ 1.0 (numeral$ ?v0 ))(numeral$ (plus$ one$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Num$ ))(= (<= (numeral$ ?v0 )1.0 )(less_eq$ ?v0 one$ ))):named a8 ))
(assert (! (= (- (+ (t_s_t$ f$ s$ )(phi$ (nxt_s_t$ f$ s$ )))(phi$ s$ ))(+ (+ (- (+ (real$ (t_splay$ a$ s$ ))(+ (phi$ l$ )(phi$ r$ )))(phi$ s$ ))(log$ 2.0 (+ (real$ (size1$ l$ ))1.0 )))(log$ 2.0 (+ 1.0 (+ (real$ (size1$ l$ ))(real$ (size1$ r$ ))))))):named a9 ))
(assert (! (forall ((?v0 Num$ ))(= (= (numeral$ ?v0 )1.0 )(= ?v0 one$ ))):named a10 ))
(assert (! (forall ((?v0 Num$ ))(= (= 1.0 (numeral$ ?v0 ))(= one$ ?v0 ))):named a11 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Num$ ))(= (times$ (- ?v0 ?v1 )(numeral$ ?v2 ))(- (times$ ?v0 (numeral$ ?v2 ))(times$ ?v1 (numeral$ ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 Num$ )(?v1 Real )(?v2 Real ))(= (times$ (numeral$ ?v0 )(- ?v1 ?v2 ))(- (times$ (numeral$ ?v0 )?v1 )(times$ (numeral$ ?v0 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Num$ ))(= (times$ (+ ?v0 ?v1 )(numeral$ ?v2 ))(+ (times$ ?v0 (numeral$ ?v2 ))(times$ ?v1 (numeral$ ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 Num$ )(?v1 Real )(?v2 Real ))(= (times$ (numeral$ ?v0 )(+ ?v1 ?v2 ))(+ (times$ (numeral$ ?v0 )?v1 )(times$ (numeral$ ?v0 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(check-sat )
;(get-unsat-core )
