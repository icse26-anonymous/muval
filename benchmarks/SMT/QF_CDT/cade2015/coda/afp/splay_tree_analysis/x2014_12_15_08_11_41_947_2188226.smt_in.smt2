;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Num$ 0)
(declare-sort A_tree$ 0)
(declare-fun one$ ()Num$)
(declare-fun select$ (Num$)Num$)
(declare-fun bit0$ (Num$ )Num$)
(declare-fun selecta$ (Num$)Num$)
(declare-fun bit1$ (Num$ )Num$)
(declare-fun leaf$ ()A_tree$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun val$ (A_tree$)A$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A_tree$ A$ A_tree$ )A_tree$)
(declare-fun b$ ()A$ )
(declare-fun c$ ()A$ )
(declare-fun l$ ()A_tree$ )
(declare-fun r$ ()A_tree$ )
(declare-fun u$ ()A$ )
(declare-fun am$ (A_tree$ )Real )
(declare-fun l$a ()A_tree$ )
(declare-fun rl$ ()A_tree$ )
(declare-fun rr$ ()A_tree$ )
(declare-fun bst$ (A_tree$ )Bool )
(declare-fun log$ (Real Real )Real )
(declare-fun one$a ()Nat$ )
(declare-fun plus$ (Nat$ Nat$ )Nat$ )
(declare-fun real$ (Nat$ )Real )
(declare-fun size$ (A_tree$ )Nat$ )
(declare-fun size1$ (A_tree$ )Nat$ )
(declare-fun times$ (Real Real )Real )
(declare-fun times$a (Nat$ Nat$ )Nat$ )
(declare-fun numeral$ (Num$ )Real )
(declare-fun numeral$a (Num$ )Nat$ )
(declare-fun splay_max$ (A_tree$ )A_tree$ )
(assert (! (not (<= (- (+ (* 2.0 (log$ 2.0 (real$ (size1$ (node$ l$ b$ (node$ rl$ c$ rr$ ))))))(log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$ )c$ l$a )))))2.0 )(- (* 3.0 (log$ 2.0 (real$ (size1$ (node$ l$ b$ (node$ rl$ c$ rr$ ))))))2.0 ))):named a0 ))
(assert (! (= (size$ rr$ )(plus$ (plus$ (size$ l$a )(size$ r$ ))one$a )):named a1 ))
(assert (! (not (= rr$ leaf$ )):named a2 ))
(assert (! (bst$ (node$ l$ b$ (node$ rl$ c$ rr$ ))):named a3 ))
(assert (! (= (splay_max$ rr$ )(node$ l$a u$ r$ )):named a4 ))
(assert (! (not (= (node$ l$ b$ (node$ rl$ c$ rr$ ))leaf$ )):named a5 ))
(assert (! (<= (am$ (node$ l$ b$ (node$ rl$ c$ rr$ )))(- (+ (* 2.0 (log$ 2.0 (real$ (size1$ (node$ l$ b$ (node$ rl$ c$ rr$ ))))))(log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$ )c$ l$a )))))2.0 )):named a6 ))
(assert (! (= (+ (- (- (+ (+ (* 3.0 (- (log$ 2.0 (real$ (size1$ rr$ )))1.0 ))(log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$ )))))(log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$ )c$ l$a )))))(log$ 2.0 (real$ (size1$ rr$ ))))(log$ 2.0 (real$ (size1$ (node$ rl$ c$ rr$ )))))2.0 )(- (- (+ (+ (* 2.0 (log$ 2.0 (real$ (size1$ rr$ ))))(log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$ )))))(log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$ )c$ l$a )))))(log$ 2.0 (real$ (size1$ (node$ rl$ c$ rr$ )))))1.0 )):named a7 ))
(assert (! (<= (- (+ (+ (log$ 2.0 (real$ (size1$ rr$ )))(log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$ )))))(log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$ )c$ l$a )))))1.0 )(- (+ (* 2.0 (log$ 2.0 (real$ (size1$ (node$ l$ b$ (node$ rl$ c$ rr$ ))))))(log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$ )c$ l$a )))))2.0 )):named a8 ))
(assert (! (<= (- (- (+ (+ (* 2.0 (log$ 2.0 (real$ (size1$ rr$ ))))(log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$ )))))(log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$ )c$ l$a )))))(log$ 2.0 (real$ (size1$ (node$ rl$ c$ rr$ )))))1.0 )(- (+ (+ (log$ 2.0 (real$ (size1$ rr$ )))(log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$ )))))(log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$ )c$ l$a )))))1.0 )):named a9 ))
(assert (! (<= (+ (- (- (+ (+ (am$ rr$ )(log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$ )))))(log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$ )c$ l$a )))))(log$ 2.0 (real$ (size1$ rr$ ))))(log$ 2.0 (real$ (size1$ (node$ rl$ c$ rr$ )))))1.0 )(+ (- (- (+ (+ (* 3.0 (- (log$ 2.0 (real$ (size1$ rr$ )))1.0 ))(log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$ )))))(log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$ )c$ l$a )))))(log$ 2.0 (real$ (size1$ rr$ ))))(log$ 2.0 (real$ (size1$ (node$ rl$ c$ rr$ )))))2.0 )):named a10 ))
(assert (! (=> (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(=> (= (splay_max$ rr$ )(node$ ?v0 ?v1 ?v2 ))false ))false ):named a11 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Num$ ))(= (times$ (- ?v0 ?v1 )(numeral$ ?v2 ))(- (times$ ?v0 (numeral$ ?v2 ))(times$ ?v1 (numeral$ ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 Num$ )(?v1 Real )(?v2 Real ))(= (times$ (numeral$ ?v0 )(- ?v1 ?v2 ))(- (times$ (numeral$ ?v0 )?v1 )(times$ (numeral$ ?v0 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Num$ ))(= (times$a (plus$ ?v0 ?v1 )(numeral$a ?v2 ))(plus$ (times$a ?v0 (numeral$a ?v2 ))(times$a ?v1 (numeral$a ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 Real )(?v1 Real )(?v2 Num$ ))(= (times$ (+ ?v0 ?v1 )(numeral$ ?v2 ))(+ (times$ ?v0 (numeral$ ?v2 ))(times$ ?v1 (numeral$ ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 Num$ )(?v1 Nat$ )(?v2 Nat$ ))(= (times$a (numeral$a ?v0 )(plus$ ?v1 ?v2 ))(plus$ (times$a (numeral$a ?v0 )?v1 )(times$a (numeral$a ?v0 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 Num$ )(?v1 Real )(?v2 Real ))(= (times$ (numeral$ ?v0 )(+ ?v1 ?v2 ))(+ (times$ (numeral$ ?v0 )?v1 )(times$ (numeral$ ?v0 )?v2 )))):named a17 ))
(assert (! (= (am$ (node$ l$ b$ (node$ rl$ c$ rr$ )))(+ (- (- (+ (+ (am$ rr$ )(log$ 2.0 (real$ (size1$ (node$ l$ b$ rl$ )))))(log$ 2.0 (real$ (size1$ (node$ (node$ l$ b$ rl$ )c$ l$a )))))(log$ 2.0 (real$ (size1$ rr$ ))))(log$ 2.0 (real$ (size1$ (node$ rl$ c$ rr$ )))))1.0 )):named a18 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit1$ ?v0 )one$ )false )):named a19 ))
(check-sat )
;(get-unsat-core )
