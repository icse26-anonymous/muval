;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun leaf$ ()A_tree$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun val$ (A_tree$)A$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A_tree$ A$ A_tree$ )A_tree$)
(declare-fun a$ ()A$ )
(declare-fun t$ ()A_tree$ )
(declare-fun bst$ (A_tree$ )Bool )
(declare-fun size$ (A_tree$ )Nat$ )
(declare-fun splay$ (A$ A_tree$ )A_tree$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun is_root$ (A$ A_tree$ )Bool )
(declare-fun t_splay$ (A$ A_tree$ )Nat$ )
(declare-fun map_tree$ (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(declare-fun splay_max$ (A_tree$ )A_tree$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 A$ ))(=> (and (member$ ?v0 (set_tree$ t$ ))(and (= (splay$ ?v0 t$ )(splay$ a$ t$ ))(= (t_splay$ ?v0 t$ )(t_splay$ a$ t$ ))))thesis$ )):named a1 ))
(assert (! (forall ((?v0 A$ ))(exists ((?v1 A$ ))(and (member$ ?v1 (set_tree$ t$ ))(and (= (splay$ ?v1 t$ )(splay$ ?v0 t$ ))(= (t_splay$ ?v1 t$ )(t_splay$ ?v0 t$ )))))):named a2 ))
(assert (! (bst$ t$ ):named a3 ))
(assert (! (not (= t$ leaf$ )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(= (set_tree$ (splay$ ?v0 ?v1 ))(set_tree$ ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (and (not (= ?v0 leaf$ ))(bst$ ?v0 ))(exists ((?v2 A$ ))(and (member$ ?v2 (set_tree$ ?v0 ))(and (= (splay$ ?v2 ?v0 )(splay$ ?v1 ?v0 ))(= (t_splay$ ?v2 ?v0 )(t_splay$ ?v1 ?v0 ))))))):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (bst$ ?v0 )(= (is_root$ ?v1 (splay$ ?v1 ?v0 ))(member$ ?v1 (set_tree$ ?v0 ))))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(= (size$ (splay$ ?v0 ?v1 ))(size$ ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_tree$ ))(= (set_tree$ (splay_max$ ?v0 ))(set_tree$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(= (= (splay$ ?v0 ?v1 )leaf$ )(= ?v1 leaf$ ))):named a10 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(=> (and (bst$ ?v0 )(= (splay$ ?v1 ?v0 )?v2 ))(= (member$ ?v1 (set_tree$ ?v0 ))(exists ((?v3 A_tree$ )(?v4 A_tree$ ))(= ?v2 (node$ ?v3 ?v1 ?v4 )))))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (splay$ ?v0 (node$ ?v1 ?v0 ?v2 ))(node$ ?v1 ?v0 ?v2 )):pattern ((node$ ?v1 ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (bst$ ?v0 )(bst$ (splay$ ?v1 ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (set_tree$ ?v0 ))(and (member$ ?v5 (set_tree$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (map_tree$ ?v2 ?v0 )(map_tree$ ?v3 ?v1 )))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$ ?v3 (set_tree$ ?v0 ))(= (fun_app$ ?v1 ?v3 )(fun_app$ ?v2 ?v3 ))))(= (map_tree$ ?v1 ?v0 )(map_tree$ ?v2 ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (set_tree$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (map_tree$ ?v2 ?v0 )(map_tree$ ?v3 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ )(?v4 A$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a17 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (= (map_tree$ ?v0 ?v1 )leaf$ )(= ?v1 leaf$ ))):named a18 ))
(check-sat )
;(get-unsat-core )
