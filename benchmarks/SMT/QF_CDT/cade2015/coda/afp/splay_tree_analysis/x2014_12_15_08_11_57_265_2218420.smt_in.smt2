;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_tree_a_tree_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort A_op_s_t$ 0)
(declare-sort A_list$ 0)
(declare-fun leaf$ ()A_tree$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun val$ (A_tree$)A$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A_tree$ A$ A_tree$ )A_tree$)
(declare-fun select$ (A_op_s_t$)A$)
(declare-fun splay$ (A$ )A_op_s_t$)
(declare-fun selecta$ (A_op_s_t$)A$)
(declare-fun insert$ (A$ )A_op_s_t$)
(declare-fun selectb$ (A_op_s_t$)A$)
(declare-fun delete$ (A$ )A_op_s_t$)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun f$ ()A_op_s_t$ )
(declare-fun s$ ()A_tree$ )
(declare-fun bst$ (A_tree$ )Bool )
(declare-fun sorted$ (A_list$ )Bool )
(declare-fun splay$a (A$ )A_tree_a_tree_fun$ )
(declare-fun delete$a (A$ A_tree$ )A_tree$ )
(declare-fun fun_app$ (A_tree_a_tree_fun$ A_tree$ )A_tree$ )
(declare-fun inorder$ (A_tree$ )A_list$ )
(declare-fun insert$a (A$ A_tree$ )A_tree$ )
(declare-fun nxt_s_t$ (A_op_s_t$ A_tree$ )A_tree$ )
(declare-fun splay_max$ (A_tree$ )A_tree$ )
(assert (! (not (bst$ (nxt_s_t$ f$ s$ ))):named a0 ))
(assert (! (bst$ s$ ):named a1 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (bst$ ?v0 )(bst$ (delete$a ?v1 ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (bst$ ?v0 )(bst$ (insert$a ?v1 ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (bst$ ?v0 )(bst$ (splay_max$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (= (nxt_s_t$ (delete$ ?v0 )?v1 )(delete$a ?v0 ?v1 )):pattern ((nxt_s_t$ (delete$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ ))(=> (bst$ ?v0 )(bst$ (fun_app$ (splay$a ?v1 )?v0 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (= (nxt_s_t$ (insert$ ?v0 )?v1 )(insert$a ?v0 ?v1 )):pattern ((nxt_s_t$ (insert$ ?v0 )?v1 )))):named a7 ))
(assert (! (= (bst$ leaf$ )true ):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(! (= (nxt_s_t$ (splay$ ?v0 )?v1 )(fun_app$ (splay$a ?v0 )?v1 )):pattern ((nxt_s_t$ (splay$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (bst$ ?v0 )(exists ((?v1 A$ ))(= (splay_max$ ?v0 )(fun_app$ (splay$a ?v1 )?v0 ))))):named a10 ))
(assert (! (forall ((?v0 A_tree$ ))(=> (bst$ ?v0 )(sorted$ (inorder$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (splay$ ?v0 )(splay$ ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (delete$ ?v0 )(delete$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (insert$ ?v0 )(insert$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(= (= (fun_app$ (splay$a ?v0 )?v1 )leaf$ )(= ?v1 leaf$ ))):named a15 ))
(assert (! (forall ((?v0 A_tree$ ))(= (= (splay_max$ ?v0 )leaf$ )(= ?v0 leaf$ ))):named a16 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ (splay$a ?v0 )leaf$ )leaf$ ):pattern ((splay$a ?v0 )))):named a17 ))
(check-sat )
;(get-unsat-core )
