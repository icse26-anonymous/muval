;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Num_bool_fun$ 0 )
(declare-sort Num$ 0)
(declare-fun one$ ()Num$)
(declare-fun select$ (Num$)Num$)
(declare-fun bit0$ (Num$ )Num$)
(declare-fun selecta$ (Num$)Num$)
(declare-fun bit1$ (Num$ )Num$)
(declare-fun log$ (Real Real )Real )
(declare-fun less$ (Num$ )Num_bool_fun$ )
(declare-fun fun_app$ (Num_bool_fun$ Num$ )Bool )
(declare-fun numeral$ (Num$ )Real )
(assert (! (not (< 0.0 (log$ 2.0 2.0 ))):named a0 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit0$ ?v0 )one$ )false )):named a1 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit0$ ?v0 ))false )):named a2 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (< (numeral$ ?v0 )(numeral$ ?v1 ))(fun_app$ (less$ ?v0 )?v1 ))):named a3 ))
(assert (! (forall ((?v0 Num$ ))(< 0.0 (numeral$ ?v0 ))):named a4 ))
(assert (! (forall ((?v0 Num$ ))(not (< (numeral$ ?v0 )0.0 ))):named a5 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Real )(?v1 Real ))(=> (and (< 0.0 ?v0 )(< 0.0 ?v1 ))(exists ((?v2 Real ))(and (< 0.0 ?v2 )(and (< ?v2 ?v0 )(< ?v2 ?v1 )))))):named a9 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(! (= (fun_app$ (less$ (bit0$ ?v0 ))(bit0$ ?v1 ))(fun_app$ (less$ ?v0 )?v1 )):pattern ((fun_app$ (less$ (bit0$ ?v0 ))(bit0$ ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 Num$ ))(! (= (fun_app$ (less$ ?v0 )one$ )false ):pattern ((less$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Num$ ))(! (= (fun_app$ (less$ one$ )(bit0$ ?v0 ))true ):pattern ((bit0$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Real ))(= (= 0.0 ?v0 )(= ?v0 0.0 ))):named a13 ))
(assert (! (= (= one$ one$ )true ):named a14 ))
(check-sat )
;(get-unsat-core )
