;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_tree_set$ 0 )
(declare-sort A_tree$ 0)
(declare-sort A_tree_tree$ 0)
(declare-fun leaf$ ()A_tree$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun val$ (A_tree$)A$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A_tree$ A$ A_tree$ )A_tree$)
(declare-fun leaf$a ()A_tree_tree$)
(declare-fun left$a (A_tree_tree$)A_tree_tree$)
(declare-fun val$a (A_tree_tree$)A_tree$)
(declare-fun right$a (A_tree_tree$)A_tree_tree$)
(declare-fun node$a (A_tree_tree$ A_tree$ A_tree_tree$ )A_tree_tree$)
(declare-fun b$ ()A$ )
(declare-fun c$ ()A$ )
(declare-fun l$ ()A_tree$ )
(declare-fun r$ ()A_tree$ )
(declare-fun aa$ ()A$ )
(declare-fun la$ ()A_tree$ )
(declare-fun ra$ ()A_tree$ )
(declare-fun rl$ ()A_tree$ )
(declare-fun rr$ ()A_tree$ )
(declare-fun bst$ (A_tree$ )Bool )
(declare-fun sup$ (A_set$ A_set$ )A_set$ )
(declare-fun less$ (A$ A$ )Bool )
(declare-fun insert$ (A$ A_set$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun member$a (A_tree$ A_tree_set$ )Bool )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(declare-fun subtrees$ (A_tree$ )A_tree_set$ )
(declare-fun set_tree$a (A_tree_tree$ )A_tree_set$ )
(assert (! (not (and (not (member$ aa$ (set_tree$ rr$ )))(not (member$ aa$ (set_tree$ l$ ))))):named a0 ))
(assert (! (less$ aa$ b$ ):named a1 ))
(assert (! (less$ c$ aa$ ):named a2 ))
(assert (! (not (= aa$ b$ )):named a3 ))
(assert (! (=> (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(=> (= r$ (node$ ?v0 ?v1 ?v2 ))false ))false ):named a4 ))
(assert (! (not (= aa$ c$ )):named a5 ))
(assert (! (bst$ (node$ l$ c$ r$ )):named a6 ))
(assert (! (not (member$ b$ (set_tree$ l$ ))):named a7 ))
(assert (! (or (less$ aa$ b$ )(less$ b$ aa$ )):named a8 ))
(assert (! (or (less$ aa$ c$ )(less$ c$ aa$ )):named a9 ))
(assert (! (= r$ (node$ rl$ b$ rr$ )):named a10 ))
(assert (! (less$ c$ b$ ):named a11 ))
(assert (! (member$ aa$ (insert$ c$ (sup$ (set_tree$ l$ )(set_tree$ r$ )))):named a12 ))
(assert (! (member$a (node$ la$ aa$ ra$ )(subtrees$ (node$ l$ c$ r$ ))):named a13 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_tree$ ))(=> (and (member$a ?v0 (set_tree$a ?v1 ))(and (forall ((?v2 A_tree_tree$ )(?v3 A_tree$ )(?v4 A_tree_tree$ ))(=> (and (= ?v1 (node$a ?v2 ?v3 ?v4 ))(member$a ?v0 (set_tree$a ?v2 )))false ))(and (forall ((?v2 A_tree_tree$ )(?v3 A_tree_tree$ ))(=> (= ?v1 (node$a ?v2 ?v0 ?v3 ))false ))(forall ((?v2 A_tree_tree$ )(?v3 A_tree$ )(?v4 A_tree_tree$ ))(=> (and (= ?v1 (node$a ?v2 ?v3 ?v4 ))(member$a ?v0 (set_tree$a ?v4 )))false )))))false )):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (and (member$ ?v0 (set_tree$ ?v1 ))(and (forall ((?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ ))(=> (and (= ?v1 (node$ ?v2 ?v3 ?v4 ))(member$ ?v0 (set_tree$ ?v2 )))false ))(and (forall ((?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v1 (node$ ?v2 ?v0 ?v3 ))false ))(forall ((?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ ))(=> (and (= ?v1 (node$ ?v2 ?v3 ?v4 ))(member$ ?v0 (set_tree$ ?v4 )))false )))))false )):named a15 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree$ )(?v3 A_tree_tree$ ))(=> (member$a ?v0 (set_tree$a ?v1 ))(member$a ?v0 (set_tree$a (node$a ?v1 ?v2 ?v3 ))))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(=> (member$ ?v0 (set_tree$ ?v1 ))(member$ ?v0 (set_tree$ (node$ ?v1 ?v2 ?v3 ))))):named a17 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ )(?v3 A_tree$ ))(=> (member$a ?v0 (set_tree$a ?v1 ))(member$a ?v0 (set_tree$a (node$a ?v2 ?v3 ?v1 ))))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ ))(=> (member$ ?v0 (set_tree$ ?v1 ))(member$ ?v0 (set_tree$ (node$ ?v2 ?v3 ?v1 ))))):named a19 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree_tree$ )(?v2 A_tree_tree$ ))(member$a ?v0 (set_tree$a (node$a ?v1 ?v0 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ ))(member$ ?v0 (set_tree$ (node$ ?v1 ?v0 ?v2 )))):named a21 ))
(check-sat )
;(get-unsat-core )
