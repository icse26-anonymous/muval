;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Rule_nat_bool_fun_fun$ 0 )
(declare-codatatypes ()((Rule_stream$ (sCons$ (shd$ Rule$ )(stl$ Rule_stream$ )))))
(declare-fun r$ ()Rule$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun bot$ ()Rule_set$ )
(declare-fun pos$ (Rule_stream$ Rule$ )Nat$ )
(declare-fun uua$ (Rule_stream$ )Rule_nat_bool_fun_fun$ )
(declare-fun fair$ (Rule_stream$ Rule_stream$ )Bool )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun fenum$ (Rule_stream$ )Rule_stream$ )
(declare-fun least$ (Nat_bool_fun$ )Nat$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun sdrop$ (Nat$ Rule_stream$ )Rule_stream$ )
(declare-fun member$ (Rule$ Rule_set$ )Bool )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$a (Rule_nat_bool_fun_fun$ Rule$ )Nat_bool_fun$ )
(declare-fun countable$ (Rule_set$ )Bool )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(= (shd$ (sdrop$ ?v0 rs$ ))r$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )(= (shd$ (sdrop$ ?v2 ?v0 ))?v1 )):pattern ((fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (not (= (shd$ (sdrop$ (least$ uu$ )rs$ ))r$ )):named a2 ))
(assert (! (fair$ rules$ rs$ ):named a3 ))
(assert (! (member$ r$ (sset$ rules$ )):named a4 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Nat$ ))(=> (fair$ rules$ ?v0 )(fair$ rules$ (sdrop$ ?v1 ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule$ ))(= (pos$ ?v0 ?v1 )(least$ (fun_app$a (uua$ ?v0 )?v1 )))):named a6 ))
(assert (! (= (sset$ (fenum$ rules$ ))(sset$ rules$ )):named a7 ))
(assert (! (fair$ rules$ (fenum$ rules$ )):named a8 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ )(?v2 Nat$ ))(=> (fair$ ?v0 ?v1 )(fair$ ?v0 (sdrop$ ?v2 ?v1 )))):named a9 ))
(assert (! (not (= (sset$ rules$ )bot$ )):named a10 ))
(assert (! (forall ((?v0 Rule_stream$ ))(member$ (shd$ ?v0 )(sset$ ?v0 ))):named a11 ))
(assert (! (countable$ (sset$ rules$ )):named a12 ))
(assert (! (forall ((?v0 Rule_stream$ ))(=> (fair$ rules$ ?v0 )(fair$ rules$ (stl$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 (least$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Rule_stream$ ))(fair$ ?v0 (fenum$ ?v0 ))):named a15 ))
(assert (! (forall ((?v0 Rule_stream$ ))(= (sset$ (fenum$ ?v0 ))(sset$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ ))(=> (and (exists ((?v2 Nat$ ))(fun_app$ ?v0 ?v2 ))(forall ((?v2 Nat$ ))(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))))(fun_app$ ?v1 (least$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Nat_bool_fun$ ))(=> (exists ((?v1 Nat$ ))(fun_app$ ?v0 ?v1 ))(fun_app$ ?v0 (least$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v3 Nat$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ ?v2 ?v3 ))))(fun_app$ ?v2 (least$ ?v0 )))):named a19 ))
(check-sat )
;(get-unsat-core )
