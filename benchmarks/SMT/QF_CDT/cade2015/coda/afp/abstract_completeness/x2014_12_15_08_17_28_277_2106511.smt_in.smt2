;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_stream_bool_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort State_rule_prod_stream_state_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-codatatypes ()((State_rule_prod_stream$ (sCons$ (shd$ State_rule_prod$ )(stl$ State_rule_prod_stream$ )))(Rule_stream$ (sCons$a (shd$a Rule$ )(stl$a Rule_stream$ )))))
(declare-fun r$ ()Rule$ )
(declare-fun s$ ()State_set$ )
(declare-fun sl$ ()State_fset$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun per$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_set$ Rule$ )Bool )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun epath$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_stream$ )Bool )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun steps$ ()State_rule_prod_stream$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun stepsa$ ()State_rule_prod_stream$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fmember$ (State$ State_fset$ )Bool )
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun member$a (Rule$ Rule_set$ )Bool )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun fun_app$c (State_rule_prod_stream_bool_fun$ State_rule_prod_stream$ )Bool )
(declare-fun fun_app$d (State_rule_prod_stream_state_rule_prod_stream_bool_fun_fun$ State_rule_prod_stream$ )State_rule_prod_stream_bool_fun$ )
(assert (! (not (enabled$ eff$ r$ (fst$ (shd$ (stl$ stepsa$ ))))):named a0 ))
(assert (! (member$ (fst$ (shd$ stepsa$ ))s$ ):named a1 ))
(assert (! (not (= (snd$ (shd$ stepsa$ ))r$ )):named a2 ))
(assert (! (member$a (snd$ (shd$ stepsa$ ))(sset$ rules$ )):named a3 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a4 ))
(assert (! (enabled$ eff$ r$ (fst$ (shd$ stepsa$ ))):named a5 ))
(assert (! (and (fun_app$ (fun_app$a (fun_app$b eff$ (snd$ (shd$ stepsa$ )))(fst$ (shd$ stepsa$ )))sl$ )(fmember$ (fst$ (shd$ (stl$ stepsa$ )))sl$ )):named a6 ))
(assert (! (per$ eff$ rules$ s$ r$ ):named a7 ))
(assert (! (=> (forall ((?v0 State_fset$ ))(=> (and (fun_app$ (fun_app$a (fun_app$b eff$ (snd$ (shd$ stepsa$ )))(fst$ (shd$ stepsa$ )))?v0 )(fmember$ (fst$ (shd$ (stl$ stepsa$ )))?v0 ))false ))false ):named a8 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(=> (enabled$ eff$ ?v0 ?v1 )(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )(pickEff$ eff$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State$ ))(! (= (enabled$ ?v0 ?v1 ?v2 )(exists ((?v3 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )?v3 ))):pattern ((enabled$ ?v0 ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 State_rule_prod_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 State_rule_prod_stream_state_rule_prod_stream_bool_fun_fun$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_stream$ ))(=> (and (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(forall ((?v3 State_rule_prod_stream$ )(?v4 State_rule_prod_stream$ ))(=> (fun_app$c (fun_app$d ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$c (fun_app$d ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a12 ))
(assert (! (forall ((?v0 State_rule_prod_stream_state_rule_prod_stream_bool_fun_fun$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_stream$ ))(=> (and (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(forall ((?v3 State_rule_prod_stream$ )(?v4 State_rule_prod_stream$ ))(=> (fun_app$c (fun_app$d ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(fun_app$c (fun_app$d ?v0 (stl$ ?v3 ))(stl$ ?v4 ))))))(= ?v1 ?v2 ))):named a13 ))
(assert (! (and (epath$ eff$ rules$ steps$ )(member$ (fst$ (shd$ steps$ ))s$ )):named a14 ))
(assert (! (forall ((?v0 State$ ))(=> (member$ ?v0 s$ )(exists ((?v1 Rule$ ))(and (member$a ?v1 (sset$ rules$ ))(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v1 )?v0 )?v2 )))))):named a15 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(= (epath$ eff$ rules$ ?v0 )(exists ((?v1 State_rule_prod_stream$ )(?v2 State_fset$ ))(and (= ?v0 ?v1 )(and (member$a (snd$ (shd$ ?v1 ))(sset$ rules$ ))(and (fmember$ (fst$ (shd$ (stl$ ?v1 )))?v2 )(and (fun_app$ (fun_app$a (fun_app$b eff$ (snd$ (shd$ ?v1 )))(fst$ (shd$ ?v1 )))?v2 )(epath$ eff$ rules$ (stl$ ?v1 ))))))))):named a16 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(=> (and (epath$ eff$ rules$ ?v0 )(forall ((?v1 State_rule_prod_stream$ )(?v2 State_fset$ ))(=> (and (= ?v0 ?v1 )(and (member$a (snd$ (shd$ ?v1 ))(sset$ rules$ ))(and (fmember$ (fst$ (shd$ (stl$ ?v1 )))?v2 )(and (fun_app$ (fun_app$a (fun_app$b eff$ (snd$ (shd$ ?v1 )))(fst$ (shd$ ?v1 )))?v2 )(epath$ eff$ rules$ (stl$ ?v1 ))))))false )))false )):named a17 ))
(check-sat )
;(get-unsat-core )
