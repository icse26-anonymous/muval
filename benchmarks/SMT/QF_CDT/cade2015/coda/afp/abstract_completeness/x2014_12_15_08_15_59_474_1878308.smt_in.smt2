;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_rule_list_fun$ 0 )
(declare-codatatypes ()((Rule_stream$ (sCons$ (shd$ Rule$ )(stl$ Rule_stream$ )))))
(declare-sort Rule_list$ 0)
(declare-fun nil$ ()Rule_list$)
(declare-fun hd$ (Rule_list$)Rule$)
(declare-fun tl$ (Rule_list$)Rule_list$)
(declare-fun cons$ (Rule$ Rule_list$ )Rule_list$)
(declare-codatatypes ()((Rule_list_stream$ (sCons$a (shd$a Rule_list$ )(stl$a Rule_list_stream$ )))(Nat_stream$ (sCons$b (shd$b Nat$ )(stl$b Nat_stream$ )))))
(declare-fun uu$ ()Nat_rule_list_fun$ )
(declare-fun bot$ ()Rule_set$ )
(declare-fun one$ ()Nat$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun uua$ (Rule_stream$ )Nat_rule_list_fun$ )
(declare-fun uub$ ()Nat_nat_fun$ )
(declare-fun bot$a ()Nat_set$ )
(declare-fun flat$ (Rule_list_stream$ )Rule_stream$ )
(declare-fun smap$ (Nat_rule_list_fun$ Nat_stream$ )Rule_list_stream$ )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun fenum$ (Rule_stream$ )Rule_stream$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun smap$a (Nat_nat_fun$ Nat_stream$ )Nat_stream$ )
(declare-fun sset$a (Nat_stream$ )Nat_set$ )
(declare-fun stake$ (Nat$ Rule_stream$ )Rule_list$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun fun_app$ (Nat_rule_list_fun$ Nat$ )Rule_list$ )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun siterate$ (Nat_nat_fun$ Nat$ )Nat_stream$ )
(declare-fun countable$ (Rule_set$ )Bool )
(declare-fun countable$a (Nat_set$ )Bool )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(stake$ ?v0 rules$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Nat$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(stake$ ?v1 ?v0 )):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a uub$ ?v0 )?v0 ):pattern ((fun_app$a uub$ ?v0 )))):named a2 ))
(assert (! (not (= (sset$ (flat$ (smap$ uu$ (siterate$ suc$ one$ ))))(sset$ rules$ ))):named a3 ))
(assert (! (= (fenum$ rules$ )(flat$ (smap$ uu$ (siterate$ suc$ one$ )))):named a4 ))
(assert (! (forall ((?v0 Rule_stream$ ))(= (fenum$ ?v0 )(flat$ (smap$ (uua$ ?v0 )(siterate$ suc$ one$ ))))):named a5 ))
(assert (! (not (= (sset$ rules$ )bot$ )):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$a suc$ ?v0 )(fun_app$a suc$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$a suc$ ?v0 )(fun_app$a suc$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (smap$a ?v0 (siterate$ ?v0 ?v1 ))(siterate$ ?v0 (fun_app$a ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ )(?v2 Nat_nat_fun$ )(?v3 Nat_nat_fun$ ))(=> (and (forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (and (member$ ?v4 (sset$a ?v0 ))(and (member$ ?v5 (sset$a ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$a ?v2 ?v0 )(smap$a ?v3 ?v1 )))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ )(?v2 Nat_rule_list_fun$ )(?v3 Nat_rule_list_fun$ ))(=> (and (forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (and (member$ ?v4 (sset$a ?v0 ))(and (member$ ?v5 (sset$a ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$ ?v2 ?v0 )(smap$ ?v3 ?v1 )))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_nat_fun$ )(?v2 Nat_nat_fun$ ))(=> (forall ((?v3 Nat$ ))(=> (member$ ?v3 (sset$a ?v0 ))(= (fun_app$a ?v1 ?v3 )(fun_app$a ?v2 ?v3 ))))(= (smap$a ?v1 ?v0 )(smap$a ?v2 ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_rule_list_fun$ )(?v2 Nat_rule_list_fun$ ))(=> (forall ((?v3 Nat$ ))(=> (member$ ?v3 (sset$a ?v0 ))(= (fun_app$ ?v1 ?v3 )(fun_app$ ?v2 ?v3 ))))(= (smap$ ?v1 ?v0 )(smap$ ?v2 ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ )(?v2 Nat_nat_fun$ )(?v3 Nat_nat_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (member$ ?v4 (sset$a ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (smap$a ?v2 ?v0 )(smap$a ?v3 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ )(?v2 Nat_rule_list_fun$ )(?v3 Nat_rule_list_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (member$ ?v4 (sset$a ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (smap$ ?v2 ?v0 )(smap$ ?v3 ?v1 )))):named a15 ))
(assert (! (countable$ (sset$ rules$ )):named a16 ))
(assert (! (forall ((?v0 Nat_stream$ ))(= (smap$a uub$ ?v0 )?v0 )):named a17 ))
(assert (! (forall ((?v0 Nat_stream$ ))(countable$a (sset$a ?v0 ))):named a18 ))
(assert (! (forall ((?v0 Rule_stream$ ))(countable$ (sset$ ?v0 ))):named a19 ))
(assert (! (forall ((?v0 Nat_stream$ ))(not (= (sset$a ?v0 )bot$a ))):named a20 ))
(assert (! (forall ((?v0 Rule_stream$ ))(not (= (sset$ ?v0 )bot$ ))):named a21 ))
(assert (! (forall ((?v0 Nat$ ))(= (= one$ ?v0 )(= ?v0 one$ ))):named a22 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (fun_app$a suc$ ?v0 )))):named a23 ))
(check-sat )
;(get-unsat-core )
