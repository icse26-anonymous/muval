;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort Rule_stream_bool_fun$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_rule_prod_tree_fset$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort State_state_rule_prod_tree_fun$ 0 )
(declare-sort Rule_stream_rule_stream_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-codatatypes ()((Rule_stream$ (sCons$ (shd$ Rule$ )(stl$ Rule_stream$ )))))
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-fun s$ ()State_set$ )
(declare-fun t$ ()State_rule_prod_tree$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State$ )
(declare-fun s$b ()State$ )
(declare-fun sl$ ()State_fset$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun cont$ (State_rule_prod_tree$ )State_rule_prod_tree_fset$ )
(declare-fun fair$ (Rule_stream$ Rule_stream$ )Bool )
(declare-fun root$ (State_rule_prod_tree$ )State_rule_prod$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun fimage$ (State_state_rule_prod_tree_fun$ State_fset$ )State_rule_prod_tree_fset$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ )State_state_rule_prod_tree_fun$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fmember$ (State$ State_fset$ )Bool )
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun fmember$a (State_rule_prod_tree$ State_rule_prod_tree_fset$ )Bool )
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun fun_app$c (State_state_rule_prod_tree_fun$ State$ )State_rule_prod_tree$ )
(declare-fun fun_app$d (Rule_stream_bool_fun$ Rule_stream$ )Bool )
(declare-fun fun_app$e (Rule_stream_rule_stream_bool_fun_fun$ Rule_stream$ )Rule_stream_bool_fun$ )
(assert (! (not (exists ((?v0 State_fset$ )(?v1 State$ ))(and (member$ ?v1 s$ )(and (fun_app$ (fun_app$a (fun_app$b eff$ (shd$ (trim$ eff$ rs$ s$a )))s$a )?v0 )(and (fmember$ ?v1 ?v0 )(= t$ (fun_app$c (mkTree$ eff$ (stl$ (trim$ eff$ rs$ s$a )))?v1 ))))))):named a0 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(=> (enabled$ eff$ ?v0 ?v1 )(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )(pickEff$ eff$ ?v0 ?v1 )))):named a1 ))
(assert (! (member$ s$b s$ ):named a2 ))
(assert (! (fmember$ s$b sl$ ):named a3 ))
(assert (! (member$ s$a s$ ):named a4 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a5 ))
(assert (! (enabled$ eff$ (shd$ (trim$ eff$ rs$ s$a ))s$a ):named a6 ))
(assert (! (fmember$ s$b (pickEff$ eff$ (shd$ (trim$ eff$ rs$ s$a ))s$a )):named a7 ))
(assert (! (= t$ (fun_app$c (mkTree$ eff$ (stl$ (trim$ eff$ rs$ s$a )))s$b )):named a8 ))
(assert (! (= sl$ (pickEff$ eff$ (shd$ (trim$ eff$ rs$ s$a ))s$a )):named a9 ))
(assert (! (=> (forall ((?v0 State$ ))(=> (and (fmember$ ?v0 sl$ )(= t$ (fun_app$c (mkTree$ eff$ (stl$ (trim$ eff$ rs$ s$a )))?v0 )))false ))false ):named a10 ))
(assert (! (fmember$a t$ (cont$ (fun_app$c (mkTree$ eff$ rs$ )s$a ))):named a11 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Rule_stream_rule_stream_bool_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(forall ((?v3 Rule_stream$ )(?v4 Rule_stream$ ))(=> (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$d (fun_app$e ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 Rule_stream_rule_stream_bool_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(forall ((?v3 Rule_stream$ )(?v4 Rule_stream$ ))(=> (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(fun_app$d (fun_app$e ?v0 (stl$ ?v3 ))(stl$ ?v4 ))))))(= ?v1 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (cont$ (fun_app$c (mkTree$ eff$ ?v0 )?v1 ))(fimage$ (mkTree$ eff$ (stl$ (trim$ eff$ ?v0 ?v1 )))(pickEff$ eff$ (shd$ (trim$ eff$ ?v0 ?v1 ))?v1 )))):named a15 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (root$ (fun_app$c (mkTree$ eff$ ?v0 )?v1 ))(pair$ ?v1 (shd$ (trim$ eff$ ?v0 ?v1 ))))):named a16 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$ ?v0 s$ )(fair$ rules$ ?v1 ))(enabled$ eff$ (shd$ (trim$ eff$ ?v1 ?v0 ))?v0 ))):named a17 ))
(check-sat )
;(get-unsat-core )
