;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_rule_fun$ 0 )
(declare-sort Rule_nat_fun$ 0 )
(declare-sort Rule_rule_fun$ 0 )
(declare-sort Nat_rule_list_fun$ 0 )
(declare-sort Rule_list_nat_fun$ 0 )
(declare-sort Rule_list_rule_fun$ 0 )
(declare-sort Rule_rule_list_fun$ 0 )
(declare-sort Rule_list_rule_list_fun$ 0 )
(declare-sort Rule_list$ 0)
(declare-fun nil$ ()Rule_list$)
(declare-fun hd$ (Rule_list$)Rule$)
(declare-fun tl$ (Rule_list$)Rule_list$)
(declare-fun cons$ (Rule$ Rule_list$ )Rule_list$)
(declare-codatatypes ()((Rule_stream$ (sCons$ (shd$ Rule$ )(stl$ Rule_stream$ )))(Rule_list_stream$ (sCons$a (shd$a Rule_list$ )(stl$a Rule_list_stream$ )))(Nat_stream$ (sCons$b (shd$b Nat$ )(stl$b Nat_stream$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun na$ ()Nat$ )
(declare-fun uu$ ()Nat_rule_list_fun$ )
(declare-fun one$ ()Nat$ )
(declare-fun rsa$ ()Rule_list$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun fair$ (Rule_stream$ Rule_stream$ )Bool )
(declare-fun flat$ (Rule_list_stream$ )Rule_stream$ )
(declare-fun less$ (Nat$ )Nat_bool_fun$ )
(declare-fun smap$ (Nat_rule_list_fun$ Nat_stream$ )Rule_list_stream$ )
(declare-fun zero$ ()Nat$ )
(declare-fun fenum$ (Rule_stream$ )Rule_stream$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun shift$ (Rule_list$ Rule_stream$ )Rule_stream$ )
(declare-fun smap$a (Rule_list_rule_fun$ Rule_list_stream$ )Rule_stream$ )
(declare-fun smap$b (Nat_rule_fun$ Nat_stream$ )Rule_stream$ )
(declare-fun smap$c (Rule_rule_list_fun$ Rule_stream$ )Rule_list_stream$ )
(declare-fun smap$d (Rule_list_rule_list_fun$ Rule_list_stream$ )Rule_list_stream$ )
(declare-fun smap$e (Rule_nat_fun$ Rule_stream$ )Nat_stream$ )
(declare-fun smap$f (Rule_list_nat_fun$ Rule_list_stream$ )Nat_stream$ )
(declare-fun smap$g (Nat_nat_fun$ Nat_stream$ )Nat_stream$ )
(declare-fun smap$h (Rule_rule_fun$ Rule_stream$ )Rule_stream$ )
(declare-fun stake$ (Nat$ Rule_stream$ )Rule_list$ )
(declare-fun fun_app$ (Nat_rule_list_fun$ Nat$ )Rule_list$ )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$b (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun siterate$ (Nat_nat_fun$ Nat$ )Nat_stream$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(stake$ ?v0 rules$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (exists ((?v0 Nat$ )(?v1 Rule_list$ ))(and (= (stl$ (shift$ rsa$ (flat$ (smap$ uu$ (siterate$ suc$ na$ )))))(shift$ ?v1 (flat$ (smap$ uu$ (siterate$ suc$ ?v0 )))))(fun_app$a (less$ zero$ )?v0 )))):named a1 ))
(assert (! (fun_app$a (less$ zero$ )n$ ):named a2 ))
(assert (! (fun_app$a (less$ zero$ )na$ ):named a3 ))
(assert (! (forall ((?v0 Rule_stream$ ))(=> (fair$ rules$ ?v0 )(fair$ rules$ (stl$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (less$ ?v0 )(fun_app$b suc$ zero$ ))(= ?v0 zero$ )):pattern ((less$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$a (less$ zero$ )(fun_app$b suc$ ?v0 ))):named a6 ))
(assert (! (forall ((?v0 Rule_list_rule_fun$ )(?v1 Rule_list_stream$ ))(= (stl$ (smap$a ?v0 ?v1 ))(smap$a ?v0 (stl$a ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Nat_rule_fun$ )(?v1 Nat_stream$ ))(= (stl$ (smap$b ?v0 ?v1 ))(smap$b ?v0 (stl$b ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Rule_rule_list_fun$ )(?v1 Rule_stream$ ))(= (stl$a (smap$c ?v0 ?v1 ))(smap$c ?v0 (stl$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Rule_list_rule_list_fun$ )(?v1 Rule_list_stream$ ))(= (stl$a (smap$d ?v0 ?v1 ))(smap$d ?v0 (stl$a ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Rule_nat_fun$ )(?v1 Rule_stream$ ))(= (stl$b (smap$e ?v0 ?v1 ))(smap$e ?v0 (stl$ ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Rule_list_nat_fun$ )(?v1 Rule_list_stream$ ))(= (stl$b (smap$f ?v0 ?v1 ))(smap$f ?v0 (stl$a ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_stream$ ))(= (stl$b (smap$g ?v0 ?v1 ))(smap$g ?v0 (stl$b ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Rule_rule_fun$ )(?v1 Rule_stream$ ))(= (stl$ (smap$h ?v0 ?v1 ))(smap$h ?v0 (stl$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat_rule_list_fun$ )(?v1 Nat_stream$ ))(= (stl$a (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$b ?v1 )))):named a15 ))
(assert (! (= (fenum$ rules$ )(flat$ (smap$ uu$ (siterate$ suc$ one$ )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$a (less$ (fun_app$b suc$ ?v0 ))(fun_app$b suc$ ?v1 ))(fun_app$a (less$ ?v0 )?v1 )):pattern ((fun_app$a (less$ (fun_app$b suc$ ?v0 ))(fun_app$b suc$ ?v1 ))))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$a (less$ ?v0 )?v1 )(fun_app$a (less$ (fun_app$b suc$ ?v0 ))(fun_app$b suc$ ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$a (less$ ?v0 )(fun_app$b suc$ ?v0 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (= ?v0 zero$ ))(fun_app$a (less$ zero$ )?v0 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (fun_app$a (less$ zero$ )?v0 ))(= ?v0 zero$ ))):named a21 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (less$ ?v0 )zero$ )false ):pattern ((less$ ?v0 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$a (less$ ?v0 )(fun_app$b suc$ ?v1 ))(or (= ?v0 zero$ )(exists ((?v2 Nat$ ))(and (= ?v0 (fun_app$b suc$ ?v2 ))(fun_app$a (less$ ?v2 )?v1 )))))):named a23 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (less$ zero$ )?v0 )(exists ((?v1 Nat$ ))(= ?v0 (fun_app$b suc$ ?v1 ))))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$b suc$ ?v0 )(fun_app$b suc$ ?v1 ))(= ?v0 ?v1 ))):named a25 ))
(check-sat )
;(get-unsat-core )
