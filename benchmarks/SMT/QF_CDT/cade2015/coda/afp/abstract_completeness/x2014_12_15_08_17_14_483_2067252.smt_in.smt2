;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort Rule_bool_fun$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_rule_prod_bool_fun$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_bool_fun_rule_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_stream_bool_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort State_rule_prod_bool_fun_state_rule_prod_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-codatatypes ()((State_rule_prod_stream$ (sCons$ (shd$ State_rule_prod$ )(stl$ State_rule_prod_stream$ )))(Rule_stream$ (sCons$a (shd$a Rule$ )(stl$a Rule_stream$ )))))
(declare-fun r$ ()Rule$ )
(declare-fun s$ ()State_set$ )
(declare-fun ev$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun s$a ()State$ )
(declare-fun s$b ()State$ )
(declare-fun sa$ ()State$ )
(declare-fun uu$ ()State_rule_prod_bool_fun$ )
(declare-fun alw$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun pos$ (Rule_stream$ Rule$ )Nat$ )
(declare-fun rsa$ ()Rule_stream$ )
(declare-fun uua$ (Rule_bool_fun$ )Rule_bool_fun_rule_bool_fun_fun$ )
(declare-fun uub$ (State_rule_prod_bool_fun$ )State_rule_prod_bool_fun_state_rule_prod_bool_fun_fun$ )
(declare-fun uuc$ (State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$ )
(declare-fun uud$ ()State_rule_prod_stream_bool_fun$ )
(declare-fun uue$ ()State_rule_prod_bool_fun$ )
(declare-fun holds$ (State_rule_prod_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun sdrop$ (Nat$ Rule_stream$ )Rule_stream$ )
(declare-fun holds$a (Rule_bool_fun$ Rule_stream$ )Bool )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun stepsa$ ()State_rule_prod_stream$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (State_rule_prod_bool_fun$ State_rule_prod$ )Bool )
(declare-fun minWait$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Nat$ )
(declare-fun fun_app$a (State_rule_prod_stream_bool_fun$ State_rule_prod_stream$ )Bool )
(declare-fun fun_app$b (State_rule_prod_stream_bool_fun_state_rule_prod_stream_bool_fun_fun$ State_rule_prod_stream_bool_fun$ )State_rule_prod_stream_bool_fun$ )
(declare-fun fun_app$c (State_rule_prod_bool_fun_state_rule_prod_bool_fun_fun$ State_rule_prod_bool_fun$ )State_rule_prod_bool_fun$ )
(declare-fun fun_app$d (Rule_bool_fun$ Rule$ )Bool )
(declare-fun fun_app$e (Rule_bool_fun_rule_bool_fun_fun$ Rule_bool_fun$ )Rule_bool_fun$ )
(declare-fun fun_app$f (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$g (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$h (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(assert (! (forall ((?v0 State_rule_prod$ ))(! (= (fun_app$ uue$ ?v0 )(enabled$ eff$ r$ (fst$ ?v0 ))):pattern ((fun_app$ uue$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 State_rule_prod$ ))(! (= (fun_app$ uu$ ?v0 )(= (snd$ ?v0 )r$ )):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream_bool_fun$ )(?v2 State_rule_prod_stream$ ))(! (= (fun_app$a (fun_app$b (uuc$ ?v0 )?v1 )?v2 )(or (fun_app$a ?v0 ?v2 )(fun_app$a ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$b (uuc$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$ )(?v1 State_rule_prod_bool_fun$ )(?v2 State_rule_prod$ ))(! (= (fun_app$ (fun_app$c (uub$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$c (uub$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 Rule_bool_fun$ )(?v1 Rule_bool_fun$ )(?v2 Rule$ ))(! (= (fun_app$d (fun_app$e (uua$ ?v0 )?v1 )?v2 )(and (fun_app$d ?v0 ?v2 )(fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$e (uua$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(! (= (fun_app$a uud$ ?v0 )false ):pattern ((fun_app$a uud$ ?v0 )))):named a5 ))
(assert (! (not (fun_app$a (ev$ (holds$ uu$ ))stepsa$ )):named a6 ))
(assert (! (= (shd$a (sdrop$ (pos$ rsa$ r$ )rsa$ ))r$ ):named a7 ))
(assert (! (= (pos$ rsa$ r$ )(minWait$ eff$ rsa$ sa$ )):named a8 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ ))(= (ev$ (ev$ ?v0 ))(ev$ ?v0 ))):named a9 ))
(assert (! (member$ sa$ s$ ):named a10 ))
(assert (! (forall ((?v0 Rule_bool_fun$ )(?v1 Rule_stream$ )(?v2 Rule_bool_fun$ ))(= (and (holds$a ?v0 ?v1 )(holds$a ?v2 ?v1 ))(holds$a (fun_app$e (uua$ ?v0 )?v2 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_bool_fun$ ))(= (and (fun_app$a (holds$ ?v0 )?v1 )(fun_app$a (holds$ ?v2 )?v1 ))(fun_app$a (holds$ (fun_app$c (uub$ ?v0 )?v2 ))?v1 ))):named a12 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream_bool_fun$ )(?v2 State_rule_prod_stream$ ))(= (fun_app$a (ev$ (fun_app$b (uuc$ ?v0 )?v1 ))?v2 )(or (fun_app$a (ev$ ?v0 )?v2 )(fun_app$a (ev$ ?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(= (fun_app$a (ev$ uud$ )?v0 )false )):named a14 ))
(assert (! (forall ((?v0 Rule_bool_fun$ )(?v1 Rule_stream$ )(?v2 Rule_bool_fun$ ))(=> (and (holds$a ?v0 ?v1 )(forall ((?v3 Rule$ ))(=> (fun_app$d ?v0 ?v3 )(fun_app$d ?v2 ?v3 ))))(holds$a ?v2 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_bool_fun$ ))(=> (and (fun_app$a (holds$ ?v0 )?v1 )(forall ((?v3 State_rule_prod$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ ?v2 ?v3 ))))(fun_app$a (holds$ ?v2 )?v1 ))):named a16 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_stream_bool_fun$ ))(=> (and (fun_app$a (ev$ ?v0 )?v1 )(forall ((?v3 State_rule_prod_stream$ ))(=> (fun_app$a ?v0 ?v3 )(fun_app$a ?v2 ?v3 ))))(fun_app$a (ev$ ?v2 )?v1 ))):named a17 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream$ ))(=> (fun_app$a ?v0 ?v1 )(fun_app$a (ev$ ?v0 )?v1 ))):named a18 ))
(assert (! (fun_app$a (alw$ (holds$ uue$ ))stepsa$ ):named a19 ))
(assert (! (forall ((?v0 Rule_bool_fun$ )(?v1 Rule_stream$ ))(! (= (holds$a ?v0 ?v1 )(fun_app$d ?v0 (shd$a ?v1 ))):pattern ((holds$a ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$ )(?v1 State_rule_prod_stream$ ))(! (= (fun_app$a (holds$ ?v0 )?v1 )(fun_app$ ?v0 (shd$ ?v1 ))):pattern ((fun_app$a (holds$ ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 Rule_bool_fun$ )(?v1 Rule_stream$ )(?v2 Bool ))(=> (and (= (holds$a ?v0 ?v1 )?v2 )(forall ((?v3 Rule_bool_fun$ )(?v4 Rule_stream$ ))(=> (and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 (fun_app$d ?v3 (shd$a ?v4 )))))false )))false )):named a22 ))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$ )(?v1 State_rule_prod_stream$ )(?v2 Bool ))(=> (and (= (fun_app$a (holds$ ?v0 )?v1 )?v2 )(forall ((?v3 State_rule_prod_bool_fun$ )(?v4 State_rule_prod_stream$ ))(=> (and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 (fun_app$ ?v3 (shd$ ?v4 )))))false )))false )):named a23 ))
(assert (! (forall ((?v0 Rule_bool_fun$ )(?v1 Rule_stream$ ))(=> (and (holds$a ?v0 ?v1 )(forall ((?v2 Rule_bool_fun$ )(?v3 Rule_stream$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(fun_app$d ?v2 (shd$a ?v3 ))))false )))false )):named a24 ))
(assert (! (forall ((?v0 State_rule_prod_bool_fun$ )(?v1 State_rule_prod_stream$ ))(=> (and (fun_app$a (holds$ ?v0 )?v1 )(forall ((?v2 State_rule_prod_bool_fun$ )(?v3 State_rule_prod_stream$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(fun_app$ ?v2 (shd$ ?v3 ))))false )))false )):named a25 ))
(assert (! (member$ s$a s$ ):named a26 ))
(assert (! (member$ s$b s$ ):named a27 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$f (fun_app$g (fun_app$h eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a28 ))
(check-sat )
;(get-unsat-core )
