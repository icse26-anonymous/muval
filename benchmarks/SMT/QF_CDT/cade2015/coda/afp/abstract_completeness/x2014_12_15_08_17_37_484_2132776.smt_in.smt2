;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-codatatypes ()((Rule_stream$ (sCons$ (shd$ Rule$ )(stl$ Rule_stream$ )))))
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-codatatypes ()((State_rule_prod_stream$ (sCons$a (shd$a State_rule_prod$ )(stl$a State_rule_prod_stream$ )))))
(declare-fun r$ ()Rule$ )
(declare-fun s$ ()State_set$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State$ )
(declare-fun sa$ ()State$ )
(declare-fun wf$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_tree$ )Bool )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun per$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_set$ Rule$ )Bool )
(declare-fun rsa$ ()Rule_stream$ )
(declare-fun fair$ (Rule_stream$ Rule_stream$ )Bool )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun fair$a (State_rule_prod_stream$ State_rule_prod_stream$ )Bool )
(declare-fun fenum$ (Rule_stream$ )Rule_stream$ )
(declare-fun ipath$ (State_rule_prod_tree$ State_rule_prod_stream$ )Bool )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun sdrop$ (Nat$ Rule_stream$ )Rule_stream$ )
(declare-fun steps$ ()State_rule_prod_stream$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )State_rule_prod_tree$ )
(declare-fun sdrop$a (Nat$ State_rule_prod_stream$ )State_rule_prod_stream$ )
(declare-fun stepsa$ ()State_rule_prod_stream$ )
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun member$a (Rule$ Rule_set$ )Bool )
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(assert (! (not (exists ((?v0 Rule_stream$ )(?v1 State$ )(?v2 State_rule_prod_stream$ ))(and (= (stl$a stepsa$ )?v2 )(and (member$ ?v1 s$ )(and (fair$ rules$ ?v0 )(ipath$ (mkTree$ eff$ ?v0 ?v1 )?v2 )))))):named a0 ))
(assert (! (member$ sa$ s$ ):named a1 ))
(assert (! (fair$ rules$ rsa$ ):named a2 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Nat$ ))(=> (fair$ rules$ ?v0 )(fair$ rules$ (sdrop$ ?v1 ?v0 )))):named a3 ))
(assert (! (member$ s$a s$ ):named a4 ))
(assert (! (member$a r$ (sset$ rules$ )):named a5 ))
(assert (! (fair$ rules$ rs$ ):named a6 ))
(assert (! (ipath$ (mkTree$ eff$ rsa$ sa$ )stepsa$ ):named a7 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$ ?v0 s$ )(fair$ rules$ ?v1 ))(member$a (shd$ (trim$ eff$ ?v1 ?v0 ))(sset$ rules$ )))):named a8 ))
(assert (! (forall ((?v0 State$ ))(=> (member$ ?v0 s$ )(exists ((?v1 Rule$ ))(and (member$a ?v1 (sset$ rules$ ))(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v1 )?v0 )?v2 )))))):named a9 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$ ?v0 s$ )(fair$ rules$ ?v1 ))(fair$ rules$ (trim$ eff$ ?v1 ?v0 )))):named a10 ))
(assert (! (fair$ rules$ (fenum$ rules$ )):named a11 ))
(assert (! (ipath$ (mkTree$ eff$ rs$ s$a )steps$ ):named a12 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 State_rule_prod_stream$ ))(=> (fair$a ?v0 ?v1 )(fair$a ?v0 (stl$a ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ ))(=> (fair$ ?v0 ?v1 )(fair$ ?v0 (stl$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$ ?v0 s$ )(fair$ rules$ ?v1 ))(wf$ eff$ rules$ (mkTree$ eff$ ?v1 ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Rule$ ))(=> (member$a ?v0 (sset$ rules$ ))(per$ eff$ rules$ s$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_stream$ )(?v3 Nat$ ))(=> (and (member$ ?v0 s$ )(and (fair$ rules$ ?v1 )(ipath$ (mkTree$ eff$ ?v1 ?v0 )?v2 )))(exists ((?v4 Nat$ )(?v5 State$ ))(and (member$ ?v5 s$ )(ipath$ (mkTree$ eff$ (sdrop$ ?v4 ?v1 )?v5 )(sdrop$a ?v3 ?v2 )))))):named a17 ))
(assert (! (= (sset$ (fenum$ rules$ ))(sset$ rules$ )):named a18 ))
(check-sat )
;(get-unsat-core )
