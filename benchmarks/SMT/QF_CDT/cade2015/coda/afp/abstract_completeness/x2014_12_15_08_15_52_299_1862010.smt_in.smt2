;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_stream_bool_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_state_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort Rule_stream_state_rule_prod_stream_bool_fun_fun$ 0 )
(declare-codatatypes ()((Rule_stream$ (sCons$ (shd$ Rule$ )(stl$ Rule_stream$ )))))
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-codatatypes ()((State_rule_prod_stream$ (sCons$a (shd$a State_rule_prod$ )(stl$a State_rule_prod_stream$ )))))
(declare-fun t$ ()State_rule_prod_tree$ )
(declare-fun wf$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_tree$ )Bool )
(declare-fun bot$ ()Rule_set$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun epath$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_stream_state_rule_prod_stream_bool_fun_fun$ )
(declare-fun ipath$ (State_rule_prod_tree$ )State_rule_prod_stream_bool_fun$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun steps$ ()State_rule_prod_stream$ )
(declare-fun member$ (Rule$ Rule_set$ )Bool )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fmember$ (State$ State_fset$ )Bool )
(declare-fun fun_app$ (State_rule_prod_stream_bool_fun$ State_rule_prod_stream$ )Bool )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun fun_app$a (Rule_stream_state_rule_prod_stream_bool_fun_fun$ Rule_stream$ )State_rule_prod_stream_bool_fun$ )
(declare-fun fun_app$b (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$c (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$d (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun fun_app$e (Rule_state_rule_prod_stream_bool_fun_fun$ Rule$ )State_rule_prod_stream_bool_fun$ )
(declare-fun countable$ (Rule_set$ )Bool )
(declare-fun saturated$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_stream_state_rule_prod_stream_bool_fun_fun$ )
(declare-fun saturated$a (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_state_rule_prod_stream_bool_fun_fun$ )
(assert (! (not (fun_app$ (fun_app$a (epath$ eff$ )rules$ )steps$ )):named a0 ))
(assert (! (wf$ eff$ rules$ t$ ):named a1 ))
(assert (! (fun_app$ (ipath$ t$ )steps$ ):named a2 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$b (fun_app$c (fun_app$d eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(=> (enabled$ eff$ ?v0 ?v1 )(fun_app$b (fun_app$c (fun_app$d eff$ ?v0 )?v1 )(pickEff$ eff$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(= (fun_app$ (fun_app$a (saturated$ eff$ )rules$ )?v0 )(forall ((?v1 Rule$ ))(=> (member$ ?v1 (sset$ rules$ ))(fun_app$ (fun_app$e (saturated$a eff$ )?v1 )?v0 ))))):named a5 ))
(assert (! (not (= (sset$ rules$ )bot$ )):named a6 ))
(assert (! (countable$ (sset$ rules$ )):named a7 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State$ ))(! (= (enabled$ ?v0 ?v1 ?v2 )(exists ((?v3 State_fset$ ))(fun_app$b (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )?v3 ))):pattern ((enabled$ ?v0 ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(= (fun_app$ (fun_app$a (epath$ eff$ )rules$ )?v0 )(exists ((?v1 State_rule_prod_stream$ )(?v2 State_fset$ ))(and (= ?v0 ?v1 )(and (member$ (snd$ (shd$a ?v1 ))(sset$ rules$ ))(and (fmember$ (fst$ (shd$a (stl$a ?v1 )))?v2 )(and (fun_app$b (fun_app$c (fun_app$d eff$ (snd$ (shd$a ?v1 )))(fst$ (shd$a ?v1 )))?v2 )(fun_app$ (fun_app$a (epath$ eff$ )rules$ )(stl$a ?v1 ))))))))):named a9 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(=> (and (fun_app$ (fun_app$a (epath$ eff$ )rules$ )?v0 )(forall ((?v1 State_rule_prod_stream$ )(?v2 State_fset$ ))(=> (and (= ?v0 ?v1 )(and (member$ (snd$ (shd$a ?v1 ))(sset$ rules$ ))(and (fmember$ (fst$ (shd$a (stl$a ?v1 )))?v2 )(and (fun_app$b (fun_app$c (fun_app$d eff$ (snd$ (shd$a ?v1 )))(fst$ (shd$a ?v1 )))?v2 )(fun_app$ (fun_app$a (epath$ eff$ )rules$ )(stl$a ?v1 ))))))false )))false )):named a10 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 State_fset$ ))(=> (and (member$ (snd$ (shd$a ?v0 ))(sset$ rules$ ))(and (fmember$ (fst$ (shd$a (stl$a ?v0 )))?v1 )(and (fun_app$b (fun_app$c (fun_app$d eff$ (snd$ (shd$a ?v0 )))(fst$ (shd$a ?v0 )))?v1 )(fun_app$ (fun_app$a (epath$ eff$ )rules$ )(stl$a ?v0 )))))(fun_app$ (fun_app$a (epath$ eff$ )rules$ )?v0 ))):named a11 ))
(assert (! (forall ((?v0 State_rule_prod_stream_bool_fun$ )(?v1 State_rule_prod_stream$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v2 State_rule_prod_stream$ ))(=> (fun_app$ ?v0 ?v2 )(exists ((?v3 State_rule_prod_stream$ )(?v4 State_fset$ ))(and (= ?v2 ?v3 )(and (member$ (snd$ (shd$a ?v3 ))(sset$ rules$ ))(and (fmember$ (fst$ (shd$a (stl$a ?v3 )))?v4 )(and (fun_app$b (fun_app$c (fun_app$d eff$ (snd$ (shd$a ?v3 )))(fst$ (shd$a ?v3 )))?v4 )(or (fun_app$ ?v0 (stl$a ?v3 ))(fun_app$ (fun_app$a (epath$ eff$ )rules$ )(stl$a ?v3 )))))))))))(fun_app$ (fun_app$a (epath$ eff$ )rules$ )?v1 ))):named a12 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_stream$ ))(= (fun_app$ (fun_app$a (saturated$ ?v0 )?v1 )?v2 )(forall ((?v3 Rule$ ))(=> (member$ ?v3 (sset$ ?v1 ))(fun_app$ (fun_app$e (saturated$a ?v0 )?v3 )?v2 ))))):named a13 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_stream$ ))(= (fun_app$ (fun_app$a (epath$ ?v0 )?v1 )?v2 )(exists ((?v3 State_rule_prod_stream$ )(?v4 State_fset$ ))(and (= ?v2 ?v3 )(and (member$ (snd$ (shd$a ?v3 ))(sset$ ?v1 ))(and (fmember$ (fst$ (shd$a (stl$a ?v3 )))?v4 )(and (fun_app$b (fun_app$c (fun_app$d ?v0 (snd$ (shd$a ?v3 )))(fst$ (shd$a ?v3 )))?v4 )(fun_app$ (fun_app$a (epath$ ?v0 )?v1 )(stl$a ?v3 ))))))))):named a14 ))
(check-sat )
;(get-unsat-core )
