;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Rule_bool_fun$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_nat_bool_fun_fun$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_stream_state_nat_bool_fun_fun_fun$ 0 )
(declare-codatatypes ()((Rule_stream$ (sCons$ (shd$ Rule$ )(stl$ Rule_stream$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun s$ ()State$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun uua$ (Rule_stream$ )State_nat_bool_fun_fun$ )
(declare-fun uub$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_stream_state_nat_bool_fun_fun_fun$ )
(declare-fun uuc$ (State$ )Rule_bool_fun$ )
(declare-fun uud$ (Rule_state_state_fset_bool_fun_fun_fun$ State$ )Rule_bool_fun$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun least$ (Nat_bool_fun$ )Nat$ )
(declare-fun sdrop$ (Nat$ Rule_stream$ )Rule_stream$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun less_eq$ (Nat$ )Nat_bool_fun$ )
(declare-fun minWait$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Nat$ )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun fun_app$a (Rule_bool_fun$ Rule$ )Bool )
(declare-fun fun_app$b (State_nat_bool_fun_fun$ State$ )Nat_bool_fun$ )
(declare-fun fun_app$c (Rule_stream_state_nat_bool_fun_fun_fun$ Rule_stream$ )State_nat_bool_fun_fun$ )
(declare-fun fun_app$d (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$e (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$f (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun ruleSystem$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_set$ )Bool )
(declare-fun sdrop_while$ (Rule_bool_fun$ Rule_stream$ )Rule_stream$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(enabled$ eff$ (shd$ (sdrop$ ?v0 rs$ ))s$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule$ ))(! (= (fun_app$a (uuc$ ?v0 )?v1 )(not (enabled$ eff$ ?v1 ?v0 ))):pattern ((fun_app$a (uuc$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$b (uua$ ?v0 )?v1 )?v2 )(enabled$ eff$ (shd$ (sdrop$ ?v2 ?v0 ))?v1 )):pattern ((fun_app$ (fun_app$b (uua$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 State$ )(?v2 Rule$ ))(! (= (fun_app$a (uud$ ?v0 ?v1 )?v2 )(not (enabled$ ?v0 ?v2 ?v1 ))):pattern ((fun_app$a (uud$ ?v0 ?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule_stream$ )(?v2 State$ )(?v3 Nat$ ))(! (= (fun_app$ (fun_app$b (fun_app$c (uub$ ?v0 )?v1 )?v2 )?v3 )(enabled$ ?v0 (shd$ (sdrop$ ?v3 ?v1 ))?v2 )):pattern ((fun_app$ (fun_app$b (fun_app$c (uub$ ?v0 )?v1 )?v2 )?v3 )))):named a4 ))
(assert (! (not (fun_app$ (less_eq$ (least$ uu$ ))n$ )):named a5 ))
(assert (! (enabled$ eff$ (shd$ (sdrop$ n$ rs$ ))s$ ):named a6 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$d (fun_app$e (fun_app$f eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (minWait$ eff$ ?v0 ?v1 )(least$ (fun_app$b (uua$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(=> (enabled$ eff$ ?v0 ?v1 )(fun_app$d (fun_app$e (fun_app$f eff$ ?v0 )?v1 )(pickEff$ eff$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State$ ))(! (= (enabled$ ?v0 ?v1 ?v2 )(exists ((?v3 State_fset$ ))(fun_app$d (fun_app$e (fun_app$f ?v0 ?v1 )?v2 )?v3 ))):pattern ((enabled$ ?v0 ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (fun_app$ ?v0 ?v1 )(fun_app$ (less_eq$ (least$ ?v0 ))?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$ (less_eq$ ?v0 )?v0 )):named a12 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(and (forall ((?v3 Nat$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ (less_eq$ ?v1 )?v3 )))(forall ((?v3 Nat$ ))(=> (and (fun_app$ ?v0 ?v3 )(forall ((?v4 Nat$ ))(=> (fun_app$ ?v0 ?v4 )(fun_app$ (less_eq$ ?v3 )?v4 ))))(fun_app$ ?v2 ?v3 )))))(fun_app$ ?v2 (least$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v2 Nat$ ))(=> (fun_app$ ?v0 ?v2 )(fun_app$ (less_eq$ ?v1 )?v2 ))))(= (least$ ?v0 )?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v3 Nat$ ))(=> (and (fun_app$ ?v0 ?v3 )(forall ((?v4 Nat$ ))(=> (fun_app$ ?v0 ?v4 )(fun_app$ (less_eq$ ?v3 )?v4 ))))(fun_app$ ?v2 ?v3 ))))(fun_app$ ?v2 (least$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_set$ )(?v3 Rule_stream$ )(?v4 State$ ))(=> (ruleSystem$ ?v0 ?v1 ?v2 )(= (minWait$ ?v0 ?v3 ?v4 )(least$ (fun_app$b (fun_app$c (uub$ ?v0 )?v3 )?v4 ))))):named a16 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 (least$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (trim$ eff$ ?v0 ?v1 )(sdrop_while$ (uuc$ ?v1 )?v0 ))):named a18 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ ))(=> (and (exists ((?v2 Nat$ ))(fun_app$ ?v0 ?v2 ))(forall ((?v2 Nat$ ))(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))))(fun_app$ ?v1 (least$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 Nat_bool_fun$ ))(=> (exists ((?v1 Nat$ ))(fun_app$ ?v0 ?v1 ))(fun_app$ ?v0 (least$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v3 Nat$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ ?v2 ?v3 ))))(fun_app$ ?v2 (least$ ?v0 )))):named a21 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State$ ))(=> (enabled$ ?v0 ?v1 ?v2 )(fun_app$d (fun_app$e (fun_app$f ?v0 ?v1 )?v2 )(pickEff$ ?v0 ?v1 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule_stream$ )(?v2 State$ ))(= (trim$ ?v0 ?v1 ?v2 )(sdrop_while$ (uud$ ?v0 ?v2 )?v1 ))):named a23 ))
(check-sat )
;(get-unsat-core )
