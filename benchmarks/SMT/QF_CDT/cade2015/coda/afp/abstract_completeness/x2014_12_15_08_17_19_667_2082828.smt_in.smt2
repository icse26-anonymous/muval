;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-codatatypes ()((Rule_stream$ (sCons$ (shd$ Rule$ )(stl$ Rule_stream$ )))))
(declare-fun r$ ()Rule$ )
(declare-fun s$ ()State$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State_set$ )
(declare-fun s$b ()State$ )
(declare-fun sa$ ()State$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun pos$ (Rule_stream$ Rule$ )Nat$ )
(declare-fun rsa$ ()Rule_stream$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun fair$ (Rule_stream$ Rule_stream$ )Bool )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun minus$ (Nat$ Nat$ )Nat$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun sdrop$ (Nat$ Rule_stream$ )Rule_stream$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun member$a (Rule$ Rule_set$ )Bool )
(declare-fun minWait$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Nat$ )
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(assert (! (not (= (minus$ (pos$ rsa$ r$ )(suc$ (minWait$ eff$ rsa$ sa$ )))(pos$ (stl$ (trim$ eff$ rsa$ sa$ ))r$ ))):named a0 ))
(assert (! (member$ s$ s$a ):named a1 ))
(assert (! (member$ s$b s$a ):named a2 ))
(assert (! (member$ sa$ s$a ):named a3 ))
(assert (! (fair$ rules$ rs$ ):named a4 ))
(assert (! (fair$ rules$ rsa$ ):named a5 ))
(assert (! (member$a r$ (sset$ rules$ )):named a6 ))
(assert (! (enabled$ eff$ r$ sa$ ):named a7 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a8 ))
(assert (! (less$ (minWait$ eff$ rsa$ sa$ )(pos$ rsa$ r$ )):named a9 ))
(assert (! (not (= (pos$ rsa$ r$ )(minWait$ eff$ rsa$ sa$ ))):named a10 ))
(assert (! (forall ((?v0 Rule_stream$ ))(=> (fair$ rules$ ?v0 )(fair$ rules$ (stl$ ?v0 )))):named a11 ))
(assert (! (less_eq$ (suc$ (minus$ (pos$ rsa$ r$ )(suc$ (minWait$ eff$ rsa$ sa$ ))))(pos$ rsa$ r$ )):named a12 ))
(assert (! (= (trim$ eff$ rsa$ sa$ )(sdrop$ (minWait$ eff$ rsa$ sa$ )rsa$ )):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (minus$ (minus$ (suc$ ?v0 )?v1 )(suc$ ?v2 ))(minus$ (minus$ ?v0 ?v1 )?v2 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (minus$ (suc$ ?v0 )(suc$ ?v1 ))(minus$ ?v0 ?v1 )):pattern ((minus$ (suc$ ?v0 )(suc$ ?v1 ))))):named a15 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$ ?v0 s$a )(fair$ rules$ ?v1 ))(fair$ rules$ (trim$ eff$ ?v1 ?v0 )))):named a16 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ )(?v2 Rule$ ))(=> (and (fair$ rules$ ?v0 )(and (less$ (minWait$ eff$ ?v0 ?v1 )(pos$ ?v0 ?v2 ))(and (member$a ?v2 (sset$ rules$ ))(member$ ?v1 s$a ))))(= (pos$ (stl$ (trim$ eff$ ?v0 ?v1 ))?v2 )(minus$ (pos$ ?v0 ?v2 )(suc$ (minWait$ eff$ ?v0 ?v1 )))))):named a17 ))
(check-sat )
;(get-unsat-core )
