;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-codatatypes ()((State_rule_prod_stream$ (sCons$ (shd$ State_rule_prod$ )(stl$ State_rule_prod_stream$ )))(Rule_stream$ (sCons$a (shd$a Rule$ )(stl$a Rule_stream$ )))(State_stream$ (sCons$b (shd$b State$ )(stl$b State_stream$ )))))
(declare-sort Rule_rule_prod$ 0)
(declare-fun fst$a (Rule_rule_prod$)Rule$)
(declare-fun snd$a (Rule_rule_prod$)Rule$)
(declare-fun pair$a (Rule$ Rule$ )Rule_rule_prod$)
(declare-codatatypes ()((Rule_rule_prod_stream$ (sCons$c (shd$c Rule_rule_prod$ )(stl$c Rule_rule_prod_stream$ )))))
(declare-sort State_rule_prod_rule_prod$ 0)
(declare-fun fst$b (State_rule_prod_rule_prod$)State_rule_prod$)
(declare-fun snd$b (State_rule_prod_rule_prod$)Rule$)
(declare-fun pair$b (State_rule_prod$ Rule$ )State_rule_prod_rule_prod$)
(declare-codatatypes ()((State_rule_prod_rule_prod_stream$ (sCons$d (shd$d State_rule_prod_rule_prod$ )(stl$d State_rule_prod_rule_prod_stream$ )))))
(declare-sort Rule_state_rule_prod_prod$ 0)
(declare-fun fst$c (Rule_state_rule_prod_prod$)Rule$)
(declare-fun snd$c (Rule_state_rule_prod_prod$)State_rule_prod$)
(declare-fun pair$c (Rule$ State_rule_prod$ )Rule_state_rule_prod_prod$)
(declare-codatatypes ()((Rule_state_rule_prod_prod_stream$ (sCons$e (shd$e Rule_state_rule_prod_prod$ )(stl$e Rule_state_rule_prod_prod_stream$ )))))
(declare-sort State_rule_prod_state_rule_prod_prod$ 0)
(declare-fun fst$d (State_rule_prod_state_rule_prod_prod$)State_rule_prod$)
(declare-fun snd$d (State_rule_prod_state_rule_prod_prod$)State_rule_prod$)
(declare-fun pair$d (State_rule_prod$ State_rule_prod$ )State_rule_prod_state_rule_prod_prod$)
(declare-codatatypes ()((State_rule_prod_state_rule_prod_prod_stream$ (sCons$f (shd$f State_rule_prod_state_rule_prod_prod$ )(stl$f State_rule_prod_state_rule_prod_prod_stream$ )))))
(declare-sort Rule_state_prod$ 0)
(declare-fun fst$e (Rule_state_prod$)Rule$)
(declare-fun snd$e (Rule_state_prod$)State$)
(declare-fun pair$e (Rule$ State$ )Rule_state_prod$)
(declare-codatatypes ()((Rule_state_prod_stream$ (sCons$g (shd$g Rule_state_prod$ )(stl$g Rule_state_prod_stream$ )))))
(declare-sort Rule_rule_rule_prod_prod$ 0)
(declare-fun fst$f (Rule_rule_rule_prod_prod$)Rule$)
(declare-fun snd$f (Rule_rule_rule_prod_prod$)Rule_rule_prod$)
(declare-fun pair$f (Rule$ Rule_rule_prod$ )Rule_rule_rule_prod_prod$)
(declare-codatatypes ()((Rule_rule_rule_prod_prod_stream$ (sCons$h (shd$h Rule_rule_rule_prod_prod$ )(stl$h Rule_rule_rule_prod_prod_stream$ )))))
(declare-sort Rule_state_rule_prod_rule_prod_prod$ 0)
(declare-fun fst$g (Rule_state_rule_prod_rule_prod_prod$)Rule$)
(declare-fun snd$g (Rule_state_rule_prod_rule_prod_prod$)State_rule_prod_rule_prod$)
(declare-fun pair$g (Rule$ State_rule_prod_rule_prod$ )Rule_state_rule_prod_rule_prod_prod$)
(declare-codatatypes ()((Rule_state_rule_prod_rule_prod_prod_stream$ (sCons$i (shd$i Rule_state_rule_prod_rule_prod_prod$ )(stl$i Rule_state_rule_prod_rule_prod_prod_stream$ )))))
(declare-sort State_state_prod$ 0)
(declare-fun fst$h (State_state_prod$)State$)
(declare-fun snd$h (State_state_prod$)State$)
(declare-fun pair$h (State$ State$ )State_state_prod$)
(declare-codatatypes ()((State_state_prod_stream$ (sCons$j (shd$j State_state_prod$ )(stl$j State_state_prod_stream$ )))))
(declare-sort State_rule_prod_state_prod$ 0)
(declare-fun fst$i (State_rule_prod_state_prod$)State_rule_prod$)
(declare-fun snd$i (State_rule_prod_state_prod$)State$)
(declare-fun pair$i (State_rule_prod$ State$ )State_rule_prod_state_prod$)
(declare-codatatypes ()((State_rule_prod_state_prod_stream$ (sCons$k (shd$k State_rule_prod_state_prod$ )(stl$k State_rule_prod_state_prod_stream$ )))))
(declare-sort State_state_rule_prod_prod$ 0)
(declare-fun fst$j (State_state_rule_prod_prod$)State$)
(declare-fun snd$j (State_state_rule_prod_prod$)State_rule_prod$)
(declare-fun pair$j (State$ State_rule_prod$ )State_state_rule_prod_prod$)
(declare-codatatypes ()((State_state_rule_prod_prod_stream$ (sCons$l (shd$l State_state_rule_prod_prod$ )(stl$l State_state_rule_prod_prod_stream$ )))))
(declare-fun s$ ()State_set$ )
(declare-fun ma$ ()Nat$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State$ )
(declare-fun wf$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_tree$ )Bool )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun rsa$ ()Rule_stream$ )
(declare-fun fair$ (Rule_stream$ Rule_stream$ )Bool )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun szip$ (Rule_stream$ Rule_stream$ )Rule_rule_prod_stream$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun epath$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_stream$ )Bool )
(declare-fun fair$a (State_rule_prod_stream$ State_rule_prod_stream$ )Bool )
(declare-fun fair$b (State_stream$ State_stream$ )Bool )
(declare-fun fair$c (Rule_rule_prod_stream$ Rule_rule_prod_stream$ )Bool )
(declare-fun fair$d (State_rule_prod_rule_prod_stream$ State_rule_prod_rule_prod_stream$ )Bool )
(declare-fun fair$e (Rule_state_rule_prod_prod_stream$ Rule_state_rule_prod_prod_stream$ )Bool )
(declare-fun fair$f (State_rule_prod_state_rule_prod_prod_stream$ State_rule_prod_state_rule_prod_prod_stream$ )Bool )
(declare-fun fair$g (Rule_state_prod_stream$ Rule_state_prod_stream$ )Bool )
(declare-fun fair$h (Rule_rule_rule_prod_prod_stream$ Rule_rule_rule_prod_prod_stream$ )Bool )
(declare-fun fair$i (Rule_state_rule_prod_rule_prod_prod_stream$ Rule_state_rule_prod_rule_prod_prod_stream$ )Bool )
(declare-fun ipath$ (State_rule_prod_tree$ State_rule_prod_stream$ )Bool )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun sdrop$ (Nat$ Rule_stream$ )Rule_stream$ )
(declare-fun steps$ ()State_rule_prod_stream$ )
(declare-fun szip$a (State_stream$ Rule_stream$ )State_rule_prod_stream$ )
(declare-fun szip$b (Rule_stream$ State_rule_prod_stream$ )Rule_state_rule_prod_prod_stream$ )
(declare-fun szip$c (State_rule_prod_stream$ Rule_stream$ )State_rule_prod_rule_prod_stream$ )
(declare-fun szip$d (State_rule_prod_stream$ State_rule_prod_stream$ )State_rule_prod_state_rule_prod_prod_stream$ )
(declare-fun szip$e (Rule_stream$ State_stream$ )Rule_state_prod_stream$ )
(declare-fun szip$f (State_stream$ State_stream$ )State_state_prod_stream$ )
(declare-fun szip$g (Rule_stream$ Rule_rule_prod_stream$ )Rule_rule_rule_prod_prod_stream$ )
(declare-fun szip$h (State_rule_prod_stream$ State_stream$ )State_rule_prod_state_prod_stream$ )
(declare-fun szip$i (State_stream$ State_rule_prod_stream$ )State_state_rule_prod_prod_stream$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )State_rule_prod_tree$ )
(declare-fun sdrop$a (Nat$ State_rule_prod_stream$ )State_rule_prod_stream$ )
(declare-fun sdrop$b (Nat$ State_stream$ )State_stream$ )
(declare-fun sdrop$c (Nat$ Rule_rule_prod_stream$ )Rule_rule_prod_stream$ )
(declare-fun sdrop$d (Nat$ State_rule_prod_rule_prod_stream$ )State_rule_prod_rule_prod_stream$ )
(declare-fun sdrop$e (Nat$ Rule_state_rule_prod_prod_stream$ )Rule_state_rule_prod_prod_stream$ )
(declare-fun sdrop$f (Nat$ State_rule_prod_state_rule_prod_prod_stream$ )State_rule_prod_state_rule_prod_prod_stream$ )
(declare-fun sdrop$g (Nat$ Rule_state_prod_stream$ )Rule_state_prod_stream$ )
(declare-fun sdrop$h (Nat$ Rule_rule_rule_prod_prod_stream$ )Rule_rule_rule_prod_prod_stream$ )
(declare-fun sdrop$i (Nat$ Rule_state_rule_prod_rule_prod_prod_stream$ )Rule_state_rule_prod_rule_prod_prod_stream$ )
(declare-fun sdrop$j (Nat$ State_state_prod_stream$ )State_state_prod_stream$ )
(declare-fun sdrop$k (Nat$ State_rule_prod_state_prod_stream$ )State_rule_prod_state_prod_stream$ )
(declare-fun sdrop$l (Nat$ State_state_rule_prod_prod_stream$ )State_state_rule_prod_prod_stream$ )
(declare-fun stepsa$ ()State_rule_prod_stream$ )
(declare-fun thesis$ ()Bool )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun member$a (Rule$ Rule_set$ )Bool )
(declare-fun minWait$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Nat$ )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun tfinite$ (State_rule_prod_tree$ )Bool )
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 State$ )(?v1 Nat$ ))(=> (and (member$ ?v0 s$ )(ipath$ (mkTree$ eff$ (sdrop$ ?v1 rsa$ )?v0 )(sdrop$a ma$ stepsa$ )))thesis$ )):named a1 ))
(assert (! (member$ s$a s$ ):named a2 ))
(assert (! (fair$ rules$ rs$ ):named a3 ))
(assert (! (fair$ rules$ rsa$ ):named a4 ))
(assert (! (ipath$ (mkTree$ eff$ rs$ s$a )steps$ ):named a5 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Nat$ ))(=> (fair$ rules$ ?v0 )(fair$ rules$ (sdrop$ ?v1 ?v0 )))):named a6 ))
(assert (! (ipath$ (mkTree$ eff$ rsa$ s$a )stepsa$ ):named a7 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State_rule_prod_stream$ ))(=> (and (member$ s$a s$ )(and (fair$ rules$ ?v0 )(ipath$ (mkTree$ eff$ ?v0 s$a )?v1 )))(exists ((?v2 Nat$ )(?v3 State$ ))(and (member$ ?v3 s$ )(ipath$ (mkTree$ eff$ (sdrop$ ?v2 ?v0 )?v3 )(sdrop$a ma$ ?v1 )))))):named a9 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ )(?v2 Nat$ ))(=> (fair$ ?v0 ?v1 )(fair$ ?v0 (sdrop$ ?v2 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 State_rule_prod_stream$ )(?v2 Nat$ ))(=> (fair$a ?v0 ?v1 )(fair$a ?v0 (sdrop$a ?v2 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 State_stream$ )(?v1 State_stream$ )(?v2 Nat$ ))(=> (fair$b ?v0 ?v1 )(fair$b ?v0 (sdrop$b ?v2 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Rule_rule_prod_stream$ )(?v1 Rule_rule_prod_stream$ )(?v2 Nat$ ))(=> (fair$c ?v0 ?v1 )(fair$c ?v0 (sdrop$c ?v2 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 State_rule_prod_rule_prod_stream$ )(?v1 State_rule_prod_rule_prod_stream$ )(?v2 Nat$ ))(=> (fair$d ?v0 ?v1 )(fair$d ?v0 (sdrop$d ?v2 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Rule_state_rule_prod_prod_stream$ )(?v1 Rule_state_rule_prod_prod_stream$ )(?v2 Nat$ ))(=> (fair$e ?v0 ?v1 )(fair$e ?v0 (sdrop$e ?v2 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 State_rule_prod_state_rule_prod_prod_stream$ )(?v1 State_rule_prod_state_rule_prod_prod_stream$ )(?v2 Nat$ ))(=> (fair$f ?v0 ?v1 )(fair$f ?v0 (sdrop$f ?v2 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Rule_state_prod_stream$ )(?v1 Rule_state_prod_stream$ )(?v2 Nat$ ))(=> (fair$g ?v0 ?v1 )(fair$g ?v0 (sdrop$g ?v2 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 Rule_rule_rule_prod_prod_stream$ )(?v1 Rule_rule_rule_prod_prod_stream$ )(?v2 Nat$ ))(=> (fair$h ?v0 ?v1 )(fair$h ?v0 (sdrop$h ?v2 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Rule_state_rule_prod_rule_prod_prod_stream$ )(?v1 Rule_state_rule_prod_rule_prod_prod_stream$ )(?v2 Nat$ ))(=> (fair$i ?v0 ?v1 )(fair$i ?v0 (sdrop$i ?v2 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$ ?v0 s$ )(fair$ rules$ ?v1 ))(fair$ rules$ (trim$ eff$ ?v1 ?v0 )))):named a20 ))
(assert (! (forall ((?v0 State$ ))(=> (member$ ?v0 s$ )(exists ((?v1 Rule$ ))(and (member$a ?v1 (sset$ rules$ ))(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v1 )?v0 )?v2 )))))):named a21 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(! (=> (and (member$ ?v0 s$ )(fair$ rules$ ?v1 ))(= (trim$ eff$ ?v1 ?v0 )(sdrop$ (minWait$ eff$ ?v1 ?v0 )?v1 ))):pattern ((trim$ eff$ ?v1 ?v0 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(= (sdrop$c ?v0 (szip$ ?v1 ?v2 ))(szip$ (sdrop$ ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ )(?v2 Rule_stream$ ))(= (sdrop$a ?v0 (szip$a ?v1 ?v2 ))(szip$a (sdrop$b ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 State_rule_prod_stream$ ))(= (sdrop$e ?v0 (szip$b ?v1 ?v2 ))(szip$b (sdrop$ ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_rule_prod_stream$ )(?v2 Rule_stream$ ))(= (sdrop$d ?v0 (szip$c ?v1 ?v2 ))(szip$c (sdrop$a ?v0 ?v1 )(sdrop$ ?v0 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_stream$ ))(= (sdrop$f ?v0 (szip$d ?v1 ?v2 ))(szip$d (sdrop$a ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 State_stream$ ))(= (sdrop$g ?v0 (szip$e ?v1 ?v2 ))(szip$e (sdrop$ ?v0 ?v1 )(sdrop$b ?v0 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ )(?v2 State_stream$ ))(= (sdrop$j ?v0 (szip$f ?v1 ?v2 ))(szip$f (sdrop$b ?v0 ?v1 )(sdrop$b ?v0 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ )(?v2 Rule_rule_prod_stream$ ))(= (sdrop$h ?v0 (szip$g ?v1 ?v2 ))(szip$g (sdrop$ ?v0 ?v1 )(sdrop$c ?v0 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_rule_prod_stream$ )(?v2 State_stream$ ))(= (sdrop$k ?v0 (szip$h ?v1 ?v2 ))(szip$h (sdrop$a ?v0 ?v1 )(sdrop$b ?v0 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_stream$ )(?v2 State_rule_prod_stream$ ))(= (sdrop$l ?v0 (szip$i ?v1 ?v2 ))(szip$i (sdrop$b ?v0 ?v1 )(sdrop$a ?v0 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$ ?v0 s$ )(fair$ rules$ ?v1 ))(exists ((?v2 Nat$ ))(enabled$ eff$ (shd$a (sdrop$ ?v2 ?v1 ))?v0 )))):named a33 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_stream$ ))(=> (and (wf$ eff$ rules$ ?v0 )(ipath$ ?v0 ?v1 ))(epath$ eff$ rules$ ?v1 ))):named a34 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_stream$ ))(=> (tfinite$ ?v0 )(not (ipath$ ?v0 ?v1 )))):named a35 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(=> (enabled$ eff$ ?v0 ?v1 )(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )(pickEff$ eff$ ?v0 ?v1 )))):named a36 ))
(check-sat )
;(get-unsat-core )
