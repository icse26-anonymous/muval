;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort Rule_bool_fun$ 0 )
(declare-sort State_state_fun$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_rule_prod_set$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_rule_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_fset$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_fun$ 0 )
(declare-sort State_state_rule_prod_tree_fun$ 0 )
(declare-sort State_state_fun_state_state_fun_fun$ 0 )
(declare-sort Rule_stream_state_rule_prod_tree_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_rule_stream_state_rule_prod_tree_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_rule_prod_tree_fun$ 0 )
(declare-sort Rule_stream_state_state_rule_prod_tree_fun_fun$ 0 )
(declare-sort State_state_fun_state_state_rule_prod_tree_fun_fun$ 0 )
(declare-sort State_state_rule_prod_tree_fun_state_state_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_fun_state_rule_prod_tree_state_fun_fun$ 0 )
(declare-sort State_state_rule_prod_tree_fun_state_state_rule_prod_tree_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_fun_state_rule_prod_tree_state_rule_prod_tree_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_rule_prod_tree_fun_state_rule_prod_tree_state_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_rule_prod_tree_fun_state_rule_prod_tree_state_rule_prod_tree_fun_fun$ 0 )
(declare-codatatypes ()((Rule_stream$ (sCons$ (shd$ Rule$ )(stl$ Rule_stream$ )))))
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-fun s$ ()State$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun uu$ ()Rule_rule_stream_state_rule_prod_tree_fun_fun$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun uua$ ()State_state_fun$ )
(declare-fun uub$ ()State_rule_prod_tree_state_rule_prod_tree_fun$ )
(declare-fun uuc$ (State$ )Rule_bool_fun$ )
(declare-fun uud$ (State_state_fun$ )State_rule_prod_tree_state_fun_state_rule_prod_tree_state_fun_fun$ )
(declare-fun uue$ (State_rule_prod_tree_state_fun$ )State_rule_prod_tree_state_rule_prod_tree_fun_state_rule_prod_tree_state_fun_fun$ )
(declare-fun uuf$ (State_rule_prod_tree_state_fun$ )State_state_rule_prod_tree_fun_state_state_fun_fun$ )
(declare-fun uug$ (State_state_rule_prod_tree_fun$ )State_rule_prod_tree_state_fun_state_rule_prod_tree_state_rule_prod_tree_fun_fun$ )
(declare-fun uuh$ (State_state_fun$ )State_state_fun_state_state_fun_fun$ )
(declare-fun uui$ (State_rule_prod_tree_state_rule_prod_tree_fun$ )State_rule_prod_tree_state_rule_prod_tree_fun_state_rule_prod_tree_state_rule_prod_tree_fun_fun$ )
(declare-fun uuj$ (State_rule_prod_tree_state_rule_prod_tree_fun$ )State_state_rule_prod_tree_fun_state_state_rule_prod_tree_fun_fun$ )
(declare-fun uuk$ (State_state_rule_prod_tree_fun$ )State_state_fun_state_state_rule_prod_tree_fun_fun$ )
(declare-fun uul$ (State_rule_prod_set$ )State_rule_bool_fun_fun$ )
(declare-fun cont$ (State_rule_prod_tree$ )State_rule_prod_tree_fset$ )
(declare-fun node$ (State_rule_prod$ State_rule_prod_tree_fset$ )State_rule_prod_tree$ )
(declare-fun root$ (State_rule_prod_tree$ )State_rule_prod$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun fimage$ (State_state_rule_prod_tree_fun$ State_fset$ )State_rule_prod_tree_fset$ )
(declare-fun member$ (State_rule_prod$ State_rule_prod_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_stream_state_state_rule_prod_tree_fun_fun$ )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fimage$a (State_state_fun$ State_fset$ )State_fset$ )
(declare-fun fimage$b (State_rule_prod_tree_state_rule_prod_tree_fun$ State_rule_prod_tree_fset$ )State_rule_prod_tree_fset$ )
(declare-fun fimage$c (State_rule_prod_tree_state_fun$ State_rule_prod_tree_fset$ )State_fset$ )
(declare-fun fun_app$ (Rule_stream_state_rule_prod_tree_fun$ Rule_stream$ )State_rule_prod_tree$ )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun fun_app$a (Rule_rule_stream_state_rule_prod_tree_fun_fun$ Rule$ )Rule_stream_state_rule_prod_tree_fun$ )
(declare-fun fun_app$b (Rule_stream_state_state_rule_prod_tree_fun_fun$ Rule_stream$ )State_state_rule_prod_tree_fun$ )
(declare-fun fun_app$c (Rule_bool_fun$ Rule$ )Bool )
(declare-fun fun_app$d (State_rule_bool_fun_fun$ State$ )Rule_bool_fun$ )
(declare-fun fun_app$e (State_rule_prod_tree_state_rule_prod_tree_fun$ State_rule_prod_tree$ )State_rule_prod_tree$ )
(declare-fun fun_app$f (State_rule_prod_tree_state_rule_prod_tree_fun_state_rule_prod_tree_state_rule_prod_tree_fun_fun$ State_rule_prod_tree_state_rule_prod_tree_fun$ )State_rule_prod_tree_state_rule_prod_tree_fun$ )
(declare-fun fun_app$g (State_state_rule_prod_tree_fun$ State$ )State_rule_prod_tree$ )
(declare-fun fun_app$h (State_state_rule_prod_tree_fun_state_state_rule_prod_tree_fun_fun$ State_state_rule_prod_tree_fun$ )State_state_rule_prod_tree_fun$ )
(declare-fun fun_app$i (State_rule_prod_tree_state_fun$ State_rule_prod_tree$ )State$ )
(declare-fun fun_app$j (State_rule_prod_tree_state_rule_prod_tree_fun_state_rule_prod_tree_state_fun_fun$ State_rule_prod_tree_state_rule_prod_tree_fun$ )State_rule_prod_tree_state_fun$ )
(declare-fun fun_app$k (State_state_fun$ State$ )State$ )
(declare-fun fun_app$l (State_state_rule_prod_tree_fun_state_state_fun_fun$ State_state_rule_prod_tree_fun$ )State_state_fun$ )
(declare-fun fun_app$m (State_rule_prod_tree_state_fun_state_rule_prod_tree_state_rule_prod_tree_fun_fun$ State_rule_prod_tree_state_fun$ )State_rule_prod_tree_state_rule_prod_tree_fun$ )
(declare-fun fun_app$n (State_state_fun_state_state_rule_prod_tree_fun_fun$ State_state_fun$ )State_state_rule_prod_tree_fun$ )
(declare-fun fun_app$o (State_rule_prod_tree_state_fun_state_rule_prod_tree_state_fun_fun$ State_rule_prod_tree_state_fun$ )State_rule_prod_tree_state_fun$ )
(declare-fun fun_app$p (State_state_fun_state_state_fun_fun$ State_state_fun$ )State_state_fun$ )
(declare-fun fun_app$q (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$r (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$s (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun case_stream$ (Rule_rule_stream_state_rule_prod_tree_fun_fun$ Rule_stream$ )State_rule_prod_tree$ )
(declare-fun sdrop_while$ (Rule_bool_fun$ Rule_stream$ )Rule_stream$ )
(assert (! (forall ((?v0 Rule$ )(?v1 Rule_stream$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(node$ (pair$ s$ ?v0 )(fimage$ (fun_app$b (mkTree$ eff$ )?v1 )(pickEff$ eff$ ?v0 s$ )))):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule$ ))(! (= (fun_app$c (uuc$ ?v0 )?v1 )(not (enabled$ eff$ ?v1 ?v0 ))):pattern ((fun_app$c (uuc$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 State_rule_prod_set$ )(?v1 State$ )(?v2 Rule$ ))(! (= (fun_app$c (fun_app$d (uul$ ?v0 )?v1 )?v2 )(member$ (pair$ ?v1 ?v2 )?v0 )):pattern ((fun_app$c (fun_app$d (uul$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_rule_prod_tree_fun$ )(?v1 State_rule_prod_tree_state_rule_prod_tree_fun$ )(?v2 State_rule_prod_tree$ ))(! (= (fun_app$e (fun_app$f (uui$ ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$f (uui$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_rule_prod_tree_fun$ )(?v1 State_state_rule_prod_tree_fun$ )(?v2 State$ ))(! (= (fun_app$g (fun_app$h (uuj$ ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$h (uuj$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_fun$ )(?v1 State_rule_prod_tree_state_rule_prod_tree_fun$ )(?v2 State_rule_prod_tree$ ))(! (= (fun_app$i (fun_app$j (uue$ ?v0 )?v1 )?v2 )(fun_app$i ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$i (fun_app$j (uue$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_fun$ )(?v1 State_state_rule_prod_tree_fun$ )(?v2 State$ ))(! (= (fun_app$k (fun_app$l (uuf$ ?v0 )?v1 )?v2 )(fun_app$i ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$k (fun_app$l (uuf$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 State_state_rule_prod_tree_fun$ )(?v1 State_rule_prod_tree_state_fun$ )(?v2 State_rule_prod_tree$ ))(! (= (fun_app$e (fun_app$m (uug$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$i ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$m (uug$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 State_state_rule_prod_tree_fun$ )(?v1 State_state_fun$ )(?v2 State$ ))(! (= (fun_app$g (fun_app$n (uuk$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$k ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$n (uuk$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_rule_prod_tree_state_fun$ )(?v2 State_rule_prod_tree$ ))(! (= (fun_app$i (fun_app$o (uud$ ?v0 )?v1 )?v2 )(fun_app$k ?v0 (fun_app$i ?v1 ?v2 ))):pattern ((fun_app$i (fun_app$o (uud$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_state_fun$ )(?v2 State$ ))(! (= (fun_app$k (fun_app$p (uuh$ ?v0 )?v1 )?v2 )(fun_app$k ?v0 (fun_app$k ?v1 ?v2 ))):pattern ((fun_app$k (fun_app$p (uuh$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ ))(! (= (fun_app$e uub$ ?v0 )?v0 ):pattern ((fun_app$e uub$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 State$ ))(! (= (fun_app$k uua$ ?v0 )?v0 ):pattern ((fun_app$k uua$ ?v0 )))):named a12 ))
(assert (! (not (= (fun_app$g (fun_app$b (mkTree$ eff$ )rs$ )s$ )(case_stream$ uu$ (trim$ eff$ rs$ s$ )))):named a13 ))
(assert (! (forall ((?v0 State_rule_prod$ )(?v1 State_rule_prod_tree_fset$ )(?v2 State_rule_prod$ )(?v3 State_rule_prod_tree_fset$ ))(= (= (node$ ?v0 ?v1 )(node$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$q (fun_app$r (fun_app$s eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(=> (enabled$ eff$ ?v0 ?v1 )(fun_app$q (fun_app$r (fun_app$s eff$ ?v0 )?v1 )(pickEff$ eff$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ ))(=> (forall ((?v1 State_rule_prod$ )(?v2 State_rule_prod_tree_fset$ ))(=> (= ?v0 (node$ ?v1 ?v2 ))false ))false )):named a17 ))
(assert (! (forall ((?v0 State_fset$ ))(= (fimage$a uua$ ?v0 )?v0 )):named a18 ))
(assert (! (forall ((?v0 State_rule_prod_tree_fset$ ))(= (fimage$b uub$ ?v0 )?v0 )):named a19 ))
(assert (! (forall ((?v0 State_fset$ ))(= (fimage$a uua$ ?v0 )?v0 )):named a20 ))
(assert (! (forall ((?v0 State_rule_prod_tree_fset$ ))(= (fimage$b uub$ ?v0 )?v0 )):named a21 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(! (= (fun_app$g (fun_app$b (mkTree$ eff$ )?v0 )?v1 )(node$ (pair$ ?v1 (shd$ (trim$ eff$ ?v0 ?v1 )))(fimage$ (fun_app$b (mkTree$ eff$ )(stl$ (trim$ eff$ ?v0 ?v1 )))(pickEff$ eff$ (shd$ (trim$ eff$ ?v0 ?v1 ))?v1 )))):pattern ((fun_app$g (fun_app$b (mkTree$ eff$ )?v0 )?v1 )))):named a22 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule$ )(?v2 State$ )(?v3 Rule$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a23 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule$ )(?v2 State$ )(?v3 Rule$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (trim$ eff$ ?v0 ?v1 )(sdrop_while$ (uuc$ ?v1 )?v0 ))):named a25 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_rule_prod_tree_state_fun$ )(?v2 State_rule_prod_tree_fset$ ))(= (fimage$a ?v0 (fimage$c ?v1 ?v2 ))(fimage$c (fun_app$o (uud$ ?v0 )?v1 )?v2 ))):named a26 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_fun$ )(?v1 State_rule_prod_tree_state_rule_prod_tree_fun$ )(?v2 State_rule_prod_tree_fset$ ))(= (fimage$c ?v0 (fimage$b ?v1 ?v2 ))(fimage$c (fun_app$j (uue$ ?v0 )?v1 )?v2 ))):named a27 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_fun$ )(?v1 State_state_rule_prod_tree_fun$ )(?v2 State_fset$ ))(= (fimage$c ?v0 (fimage$ ?v1 ?v2 ))(fimage$a (fun_app$l (uuf$ ?v0 )?v1 )?v2 ))):named a28 ))
(assert (! (forall ((?v0 State_state_rule_prod_tree_fun$ )(?v1 State_rule_prod_tree_state_fun$ )(?v2 State_rule_prod_tree_fset$ ))(= (fimage$ ?v0 (fimage$c ?v1 ?v2 ))(fimage$b (fun_app$m (uug$ ?v0 )?v1 )?v2 ))):named a29 ))
(assert (! (forall ((?v0 State_state_fun$ )(?v1 State_state_fun$ )(?v2 State_fset$ ))(= (fimage$a ?v0 (fimage$a ?v1 ?v2 ))(fimage$a (fun_app$p (uuh$ ?v0 )?v1 )?v2 ))):named a30 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_rule_prod_tree_fun$ )(?v1 State_rule_prod_tree_state_rule_prod_tree_fun$ )(?v2 State_rule_prod_tree_fset$ ))(= (fimage$b ?v0 (fimage$b ?v1 ?v2 ))(fimage$b (fun_app$f (uui$ ?v0 )?v1 )?v2 ))):named a31 ))
(assert (! (forall ((?v0 State_rule_prod_tree_state_rule_prod_tree_fun$ )(?v1 State_state_rule_prod_tree_fun$ )(?v2 State_fset$ ))(= (fimage$b ?v0 (fimage$ ?v1 ?v2 ))(fimage$ (fun_app$h (uuj$ ?v0 )?v1 )?v2 ))):named a32 ))
(assert (! (forall ((?v0 State_state_rule_prod_tree_fun$ )(?v1 State_state_fun$ )(?v2 State_fset$ ))(= (fimage$ ?v0 (fimage$a ?v1 ?v2 ))(fimage$ (fun_app$n (uuk$ ?v0 )?v1 )?v2 ))):named a33 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (root$ (fun_app$g (fun_app$b (mkTree$ eff$ )?v0 )?v1 ))(pair$ ?v1 (shd$ (trim$ eff$ ?v0 ?v1 ))))):named a34 ))
(assert (! (forall ((?v0 State_rule_prod_set$ )(?v1 State_rule_prod_set$ ))(= (= (uul$ ?v0 )(uul$ ?v1 ))(= ?v0 ?v1 ))):named a35 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule_stream$ )(?v2 State$ ))(! (= (fun_app$g (fun_app$b (mkTree$ ?v0 )?v1 )?v2 )(node$ (pair$ ?v2 (shd$ (trim$ ?v0 ?v1 ?v2 )))(fimage$ (fun_app$b (mkTree$ ?v0 )(stl$ (trim$ ?v0 ?v1 ?v2 )))(pickEff$ ?v0 (shd$ (trim$ ?v0 ?v1 ?v2 ))?v2 )))):pattern ((fun_app$g (fun_app$b (mkTree$ ?v0 )?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State$ ))(=> (enabled$ ?v0 ?v1 ?v2 )(fun_app$q (fun_app$r (fun_app$s ?v0 ?v1 )?v2 )(pickEff$ ?v0 ?v1 ?v2 )))):named a37 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (cont$ (fun_app$g (fun_app$b (mkTree$ eff$ )?v0 )?v1 ))(fimage$ (fun_app$b (mkTree$ eff$ )(stl$ (trim$ eff$ ?v0 ?v1 )))(pickEff$ eff$ (shd$ (trim$ eff$ ?v0 ?v1 ))?v1 )))):named a38 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ ))(= (node$ (root$ ?v0 )(cont$ ?v0 ))?v0 )):named a39 ))
(check-sat )
;(get-unsat-core )
