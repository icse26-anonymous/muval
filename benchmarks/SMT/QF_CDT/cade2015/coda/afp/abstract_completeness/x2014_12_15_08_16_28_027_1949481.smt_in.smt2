;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort Rule_set$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Rule_bool_fun$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort State_nat_bool_fun_fun$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort Rule_stream_state_nat_bool_fun_fun_fun$ 0 )
(declare-codatatypes ()((Rule_stream$ (sCons$ (shd$ Rule$ )(stl$ Rule_stream$ )))))
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-codatatypes ()((State_rule_prod_stream$ (sCons$a (shd$a State_rule_prod$ )(stl$a State_rule_prod_stream$ )))(State_stream$ (sCons$b (shd$b State$ )(stl$b State_stream$ )))))
(declare-fun s$ ()State$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State_set$ )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun bot$ ()Rule_set$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun uua$ (Rule_stream$ )State_nat_bool_fun_fun$ )
(declare-fun uub$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_stream_state_nat_bool_fun_fun_fun$ )
(declare-fun uuc$ (State$ )Rule_bool_fun$ )
(declare-fun fair$ (Rule_stream$ Rule_stream$ )Bool )
(declare-fun sset$ (Rule_stream$ )Rule_set$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun fenum$ (Rule_stream$ )Rule_stream$ )
(declare-fun least$ (Nat_bool_fun$ )Nat$ )
(declare-fun rules$ ()Rule_stream$ )
(declare-fun sdrop$ (Nat$ Rule_stream$ )Rule_stream$ )
(declare-fun sset$a (State_stream$ )State_set$ )
(declare-fun member$ (Rule$ Rule_set$ )Bool )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun member$a (State$ State_set$ )Bool )
(declare-fun minWait$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Nat$ )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun fun_app$a (Rule_bool_fun$ Rule$ )Bool )
(declare-fun fun_app$b (State_nat_bool_fun_fun$ State$ )Nat_bool_fun$ )
(declare-fun fun_app$c (Rule_stream_state_nat_bool_fun_fun_fun$ Rule_stream$ )State_nat_bool_fun_fun$ )
(declare-fun fun_app$d (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$e (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$f (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun countable$ (Rule_set$ )Bool )
(declare-fun saturated$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_rule_prod_stream$ )Bool )
(declare-fun ruleSystem$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State_set$ )Bool )
(declare-fun saturated$a (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State_rule_prod_stream$ )Bool )
(declare-fun sdrop_while$ (Rule_bool_fun$ Rule_stream$ )Rule_stream$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(enabled$ eff$ (shd$ (sdrop$ ?v0 rs$ ))s$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule$ ))(! (= (fun_app$a (uuc$ ?v0 )?v1 )(not (enabled$ eff$ ?v1 ?v0 ))):pattern ((fun_app$a (uuc$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$b (uua$ ?v0 )?v1 )?v2 )(enabled$ eff$ (shd$ (sdrop$ ?v2 ?v0 ))?v1 )):pattern ((fun_app$ (fun_app$b (uua$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule_stream$ )(?v2 State$ )(?v3 Nat$ ))(! (= (fun_app$ (fun_app$b (fun_app$c (uub$ ?v0 )?v1 )?v2 )?v3 )(enabled$ ?v0 (shd$ (sdrop$ ?v3 ?v1 ))?v2 )):pattern ((fun_app$ (fun_app$b (fun_app$c (uub$ ?v0 )?v1 )?v2 )?v3 )))):named a3 ))
(assert (! (not (member$ (shd$ (sdrop$ (least$ uu$ )rs$ ))(sset$ rules$ ))):named a4 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$d (fun_app$e (fun_app$f eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a5 ))
(assert (! (member$a s$ s$a ):named a6 ))
(assert (! (fair$ rules$ rs$ ):named a7 ))
(assert (! (= (sset$ (fenum$ rules$ ))(sset$ rules$ )):named a8 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (minWait$ eff$ ?v0 ?v1 )(least$ (fun_app$b (uua$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(=> (enabled$ eff$ ?v0 ?v1 )(fun_app$d (fun_app$e (fun_app$f eff$ ?v0 )?v1 )(pickEff$ eff$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule$ )(?v2 State$ ))(! (= (enabled$ ?v0 ?v1 ?v2 )(exists ((?v3 State_fset$ ))(fun_app$d (fun_app$e (fun_app$f ?v0 ?v1 )?v2 )?v3 ))):pattern ((enabled$ ?v0 ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 State$ ))(=> (member$a ?v0 s$a )(exists ((?v1 Rule$ ))(and (member$ ?v1 (sset$ rules$ ))(exists ((?v2 State_fset$ ))(fun_app$d (fun_app$e (fun_app$f eff$ ?v1 )?v0 )?v2 )))))):named a12 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ ))(= (saturated$ eff$ rules$ ?v0 )(forall ((?v1 Rule$ ))(=> (member$ ?v1 (sset$ rules$ ))(saturated$a eff$ ?v1 ?v0 ))))):named a13 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Nat$ ))(=> (fair$ rules$ ?v0 )(fair$ rules$ (sdrop$ ?v1 ?v0 )))):named a14 ))
(assert (! (forall ((?v0 State$ )(?v1 Rule_stream$ ))(=> (and (member$a ?v0 s$a )(fair$ rules$ ?v1 ))(exists ((?v2 Nat$ ))(enabled$ eff$ (shd$ (sdrop$ ?v2 ?v1 ))?v0 )))):named a15 ))
(assert (! (not (= (sset$ rules$ )bot$ )):named a16 ))
(assert (! (forall ((?v0 State_stream$ ))(member$a (shd$b ?v0 )(sset$a ?v0 ))):named a17 ))
(assert (! (forall ((?v0 Rule_stream$ ))(member$ (shd$ ?v0 )(sset$ ?v0 ))):named a18 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule_stream$ )(?v2 State_set$ )(?v3 Rule_stream$ )(?v4 State$ ))(=> (ruleSystem$ ?v0 ?v1 ?v2 )(= (minWait$ ?v0 ?v3 ?v4 )(least$ (fun_app$b (fun_app$c (uub$ ?v0 )?v3 )?v4 ))))):named a19 ))
(assert (! (countable$ (sset$ rules$ )):named a20 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 (least$ ?v0 )))):named a21 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (trim$ eff$ ?v0 ?v1 )(sdrop_while$ (uuc$ ?v1 )?v0 ))):named a22 ))
(check-sat )
;(get-unsat-core )
