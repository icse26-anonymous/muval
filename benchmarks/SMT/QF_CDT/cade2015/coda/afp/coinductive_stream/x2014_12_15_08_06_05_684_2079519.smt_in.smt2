;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_a_stream_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))(A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_stream$ )
(declare-fun bot$ ()A_set$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun smap$ (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun sset$ (A_stream$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun smember$ (A$ A_stream$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$d (A_a_stream_bool_fun_fun$ A$ )A_stream_bool_fun$ )
(declare-fun stream_all2$ (A_a_bool_fun_fun$ A_stream$ A_stream$ )Bool )
(declare-fun llist_of_stream$ (A_stream$ )A_llist$ )
(assert (! (not (member$ x$ (sset$ xs$ ))):named a0 ))
(assert (! (member$ x$ (lset$ (llist_of_stream$ xs$ ))):named a1 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (= (llist_of_stream$ ?v0 )(llist_of_stream$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (smember$ ?v0 ?v1 )(member$ ?v0 (sset$ ?v1 ))):pattern ((smember$ ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_stream$ ))(not (= (sset$ ?v0 )bot$ ))):named a4 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 Nat$ ))(member$ (snth$ ?v0 ?v1 )(sset$ ?v0 ))):named a5 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (stream_all2$ ?v0 ?v1 ?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (sset$ ?v1 ))(and (member$ ?v5 (sset$ ?v2 ))(fun_app$ (fun_app$a ?v0 ?v4 )?v5 )))(fun_app$ (fun_app$a ?v3 ?v4 )?v5 ))))(stream_all2$ ?v3 ?v1 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 A_stream$ ))(member$ (shd$ ?v0 )(sset$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (sset$ ?v0 ))(and (member$ ?v5 (sset$ ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (smap$ ?v2 ?v0 )(smap$ ?v3 ?v1 )))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$ ?v3 (sset$ ?v0 ))(= (fun_app$b ?v1 ?v3 )(fun_app$b ?v2 ?v3 ))))(= (smap$ ?v1 ?v0 )(smap$ ?v2 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (sset$ ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v4 )))))(= (smap$ ?v2 ?v0 )(smap$ ?v3 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_a_stream_bool_fun_fun$ ))(=> (and (member$ ?v0 (sset$ ?v1 ))(and (forall ((?v3 A$ )(?v4 A_stream$ ))(fun_app$c (fun_app$d ?v2 ?v3 )(sCons$ ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_stream$ )(?v5 A$ ))(=> (and (member$ ?v5 (sset$ ?v4 ))(fun_app$c (fun_app$d ?v2 ?v5 )?v4 ))(fun_app$c (fun_app$d ?v2 ?v5 )(sCons$ ?v3 ?v4 ))))))(fun_app$c (fun_app$d ?v2 ?v0 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(=> (and (member$ ?v0 (sset$ ?v1 ))(and (forall ((?v2 A_stream$ ))(=> (= ?v1 (sCons$ ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_stream$ ))(=> (and (= ?v1 (sCons$ ?v2 ?v3 ))(member$ ?v0 (sset$ ?v3 )))false ))))false )):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ ))(=> (member$ ?v0 (sset$ ?v1 ))(member$ ?v0 (sset$ (sCons$ ?v2 ?v1 ))))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$b ?v0 (shd$ ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (stream_all2$ ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(and (fun_app$ (fun_app$a ?v0 ?v1 )?v3 )(stream_all2$ ?v0 ?v2 ?v4 ))):pattern ((stream_all2$ ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$ (smap$ ?v0 ?v1 )?v2 )(fun_app$b ?v0 (snth$ ?v1 ?v2 )))):named a17 ))
(check-sat )
;(get-unsat-core )
