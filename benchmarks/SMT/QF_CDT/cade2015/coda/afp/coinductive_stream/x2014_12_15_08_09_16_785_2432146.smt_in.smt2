;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Nat$ )
(declare-fun p$ ()A_stream_bool_fun$ )
(declare-fun na$ ()Nat$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun omega$ ()A_stream$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun smap2$ (A_a_a_fun_fun$ A_stream$ A_stream$ )A_stream$ )
(declare-fun omega$a ()A_stream$ )
(declare-fun sfirst$ (A_stream_bool_fun$ A_stream$ )Enat$ )
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$b (Nat_enat_fun$ Nat$ )Enat$ )
(assert (! (not (not (fun_app$ p$ (sdrop$ (suc$ na$ )omega$ )))):named a0 ))
(assert (! (less$ (enat$ n$ )(sfirst$ p$ omega$a )):named a1 ))
(assert (! (less$ (enat$ (suc$ na$ ))(sfirst$ p$ omega$ )):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (less$ (enat$ na$ )(sfirst$ p$ ?v0 ))(not (fun_app$ p$ (sdrop$ na$ ?v0 ))))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (stl$ (sdrop$ ?v0 ?v1 ))(sdrop$ (suc$ ?v0 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(! (= (sdrop$ (suc$ ?v0 )?v1 )(sdrop$ ?v0 (stl$ ?v1 ))):pattern ((sdrop$ (suc$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_fun_fun$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (sdrop$ ?v0 (smap2$ ?v1 ?v2 ?v3 ))(smap2$ ?v1 (sdrop$ ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stl$ (smap2$ ?v0 ?v1 ?v2 ))(smap2$ ?v0 (stl$ ?v1 )(stl$ ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(less$a (fun_app$a ?v0 ?v3 )(fun_app$a ?v0 (suc$ ?v3 ))))(= (less$a (fun_app$a ?v0 ?v1 )(fun_app$a ?v0 ?v2 ))(less$a ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(less$ (fun_app$b ?v0 ?v3 )(fun_app$b ?v0 (suc$ ?v3 ))))(= (less$ (fun_app$b ?v0 ?v1 )(fun_app$b ?v0 ?v2 ))(less$a ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less$a (fun_app$a ?v0 ?v3 )(fun_app$a ?v0 (suc$ ?v3 ))))(less$a ?v1 ?v2 ))(less$a (fun_app$a ?v0 ?v1 )(fun_app$a ?v0 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less$ (fun_app$b ?v0 ?v3 )(fun_app$b ?v0 (suc$ ?v3 ))))(less$a ?v1 ?v2 ))(less$ (fun_app$b ?v0 ?v1 )(fun_app$b ?v0 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (sdrop$ ?v0 (stl$ ?v1 ))(stl$ (sdrop$ ?v0 ?v1 )))):named a16 ))
(check-sat )
;(get-unsat-core )
