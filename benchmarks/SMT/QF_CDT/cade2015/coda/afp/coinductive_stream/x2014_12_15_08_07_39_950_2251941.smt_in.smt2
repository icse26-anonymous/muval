;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort B_llist_b_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_llist_a_stream_fun$ 0 )
(declare-sort B_llist_b_stream_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))(A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))(B_stream$ (sCons$a (shd$a B$ )(stl$a B_stream$ )))))
(declare-fun x$ (A_stream$ B_stream$ )Bool )
(declare-fun pa$ ()A_b_bool_fun_fun$ )
(declare-fun uu$ ()B_b_bool_fun_fun$ )
(declare-fun xa$ (A_llist$ B_llist$ )Bool )
(declare-fun xs$ ()A_stream$ )
(declare-fun ys$ ()B_stream$ )
(declare-fun uua$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun uub$ ()A_a_bool_fun_fun$ )
(declare-fun uuc$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun uud$ ()A_llist_a_fun$ )
(declare-fun uue$ ()A_llist_a_llist_fun$ )
(declare-fun uuf$ ()B_llist_b_fun$ )
(declare-fun uug$ ()B_llist_b_llist_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()B_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun fun_app$ (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (B_llist_b_fun$ B_llist$ )B$ )
(declare-fun fun_app$c (A_llist_a_fun$ A_llist$ )A$ )
(declare-fun fun_app$d (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$e (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$f (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$g (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$h (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$i (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$j (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$k (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$l (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$m (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$n (B_llist_a_llist_bool_fun_fun$ B_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$o (A_llist_b_llist_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$p (B_llist_b_stream_fun$ B_llist$ )B_stream$ )
(declare-fun fun_app$q (A_llist_a_stream_fun$ A_llist$ )A_stream$ )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun llist_all2$a (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (B_a_bool_fun_fun$ B_llist$ )A_llist_bool_fun$ )
(declare-fun llist_all2$c (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun unfold_stream$ (A_llist_a_fun$ A_llist_a_llist_fun$ )A_llist_a_stream_fun$ )
(declare-fun unfold_stream$a (B_llist_b_fun$ B_llist_b_llist_fun$ )B_llist_b_stream_fun$ )
(declare-fun llist_of_stream$ (A_stream$ )A_llist$ )
(declare-fun stream_of_llist$ ()A_llist_a_stream_fun$ )
(declare-fun llist_of_stream$a (B_stream$ )B_llist$ )
(declare-fun stream_of_llist$a ()B_llist_b_stream_fun$ )
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$ uug$ ?v0 )(ltl$a ?v0 )):pattern ((fun_app$ uug$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a uue$ ?v0 )(ltl$ ?v0 )):pattern ((fun_app$a uue$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$b uuf$ ?v0 )(lhd$a ?v0 )):pattern ((fun_app$b uuf$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c uud$ ?v0 )(lhd$ ?v0 )):pattern ((fun_app$c uud$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$d (fun_app$e uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uua$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$f (fun_app$g uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uuc$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$h (fun_app$i uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$h (fun_app$i uu$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$j (fun_app$k uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$j (fun_app$k uub$ ?v0 )?v1 )))):named a7 ))
(assert (! (not (fun_app$d (llist_all2$ pa$ xsa$ )ysa$ )):named a8 ))
(assert (! (not (lfinite$ xsa$ )):named a9 ))
(assert (! (not (lfinite$a ysa$ )):named a10 ))
(assert (! (xa$ xsa$ ysa$ ):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(=> (and (not (lfinite$ ?v0 ))(and (not (lfinite$a ?v1 ))(xa$ ?v0 ?v1 )))(and (fun_app$h (fun_app$l pa$ (lhd$ ?v0 ))(lhd$a ?v1 ))(or (xa$ (ltl$ ?v0 )(ltl$a ?v1 ))(fun_app$d (llist_all2$ pa$ (ltl$ ?v0 ))(ltl$a ?v1 )))))):named a12 ))
(assert (! (x$ xs$ ys$ ):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ (ltl$ ?v0 ))(lfinite$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lfinite$a (ltl$a ?v0 ))(lfinite$a ?v0 ))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$f (fun_app$g (llist_all2$a ?v0 )?v1 )?v2 )(= (lfinite$ ?v1 )(lfinite$ ?v2 )))):named a16 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (fun_app$f (llist_all2$b ?v0 ?v1 )?v2 )(= (lfinite$a ?v1 )(lfinite$ ?v2 )))):named a17 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (fun_app$d (fun_app$e (llist_all2$c ?v0 )?v1 )?v2 )(= (lfinite$a ?v1 )(lfinite$a ?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (fun_app$d (llist_all2$ ?v0 ?v1 )?v2 )(= (lfinite$ ?v1 )(lfinite$a ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$f (fun_app$g (llist_all2$a ?v0 )?v1 )?v2 )(fun_app$f (fun_app$g (llist_all2$a ?v0 )(ltl$ ?v1 ))(ltl$ ?v2 )))):named a20 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (fun_app$f (llist_all2$b ?v0 ?v1 )?v2 )(fun_app$f (llist_all2$b ?v0 (ltl$a ?v1 ))(ltl$ ?v2 )))):named a21 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (fun_app$d (fun_app$e (llist_all2$c ?v0 )?v1 )?v2 )(fun_app$d (fun_app$e (llist_all2$c ?v0 )(ltl$a ?v1 ))(ltl$a ?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (fun_app$d (llist_all2$ ?v0 ?v1 )?v2 )(fun_app$d (llist_all2$ ?v0 (ltl$ ?v1 ))(ltl$a ?v2 )))):named a23 ))
(assert (! (= (llist_all2$c uu$ )uua$ ):named a24 ))
(assert (! (= (llist_all2$a uub$ )uuc$ ):named a25 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$e (llist_all2$c ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 B$ ))(=> (fun_app$h (fun_app$i ?v0 ?v4 )?v5 )(fun_app$h (fun_app$i ?v3 ?v4 )?v5 ))))(fun_app$d (fun_app$e (llist_all2$c ?v3 )?v1 )?v2 ))):named a26 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (fun_app$f (llist_all2$b ?v0 ?v1 )?v2 )(forall ((?v4 B$ )(?v5 A$ ))(=> (fun_app$j (fun_app$m ?v0 ?v4 )?v5 )(fun_app$j (fun_app$m ?v3 ?v4 )?v5 ))))(fun_app$f (llist_all2$b ?v3 ?v1 )?v2 ))):named a27 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$f (fun_app$g (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (fun_app$j (fun_app$k ?v0 ?v4 )?v5 )(fun_app$j (fun_app$k ?v3 ?v4 )?v5 ))))(fun_app$f (fun_app$g (llist_all2$a ?v3 )?v1 )?v2 ))):named a28 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$d (llist_all2$ ?v0 ?v1 )?v2 )(forall ((?v4 A$ )(?v5 B$ ))(=> (fun_app$h (fun_app$l ?v0 ?v4 )?v5 )(fun_app$h (fun_app$l ?v3 ?v4 )?v5 ))))(fun_app$d (llist_all2$ ?v3 ?v1 )?v2 ))):named a29 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B_b_bool_fun_fun$ )(?v3 B_llist$ )(?v4 B_llist$ )(?v5 B_llist$ )(?v6 B_llist$ ))(=> (and (forall ((?v7 B$ )(?v8 B$ ))(=> (fun_app$h (fun_app$i ?v0 ?v7 )?v8 )(forall ((?v9 B$ )(?v10 B$ ))(=> (fun_app$h (fun_app$i ?v0 ?v9 )?v10 )(= (fun_app$h (fun_app$i ?v1 ?v7 )?v9 )(fun_app$h (fun_app$i ?v2 ?v8 )?v10 ))))))(and (fun_app$d (fun_app$e (llist_all2$c ?v0 )?v3 )?v4 )(fun_app$d (fun_app$e (llist_all2$c ?v0 )?v5 )?v6 )))(= (fun_app$d (fun_app$e (llist_all2$c ?v1 )?v3 )?v5 )(fun_app$d (fun_app$e (llist_all2$c ?v2 )?v4 )?v6 )))):named a30 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_a_bool_fun_fun$ )(?v3 B_llist$ )(?v4 A_llist$ )(?v5 B_llist$ )(?v6 A_llist$ ))(=> (and (forall ((?v7 B$ )(?v8 A$ ))(=> (fun_app$j (fun_app$m ?v0 ?v7 )?v8 )(forall ((?v9 B$ )(?v10 A$ ))(=> (fun_app$j (fun_app$m ?v0 ?v9 )?v10 )(= (fun_app$h (fun_app$i ?v1 ?v7 )?v9 )(fun_app$j (fun_app$k ?v2 ?v8 )?v10 ))))))(and (fun_app$f (llist_all2$b ?v0 ?v3 )?v4 )(fun_app$f (llist_all2$b ?v0 ?v5 )?v6 )))(= (fun_app$d (fun_app$e (llist_all2$c ?v1 )?v3 )?v5 )(fun_app$f (fun_app$g (llist_all2$a ?v2 )?v4 )?v6 )))):named a31 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_a_bool_fun_fun$ )(?v3 A_llist$ )(?v4 A_llist$ )(?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (forall ((?v7 A$ )(?v8 A$ ))(=> (fun_app$j (fun_app$k ?v0 ?v7 )?v8 )(forall ((?v9 A$ )(?v10 A$ ))(=> (fun_app$j (fun_app$k ?v0 ?v9 )?v10 )(= (fun_app$j (fun_app$k ?v1 ?v7 )?v9 )(fun_app$j (fun_app$k ?v2 ?v8 )?v10 ))))))(and (fun_app$f (fun_app$g (llist_all2$a ?v0 )?v3 )?v4 )(fun_app$f (fun_app$g (llist_all2$a ?v0 )?v5 )?v6 )))(= (fun_app$f (fun_app$g (llist_all2$a ?v1 )?v3 )?v5 )(fun_app$f (fun_app$g (llist_all2$a ?v2 )?v4 )?v6 )))):named a32 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 B_b_bool_fun_fun$ )(?v3 A_llist$ )(?v4 B_llist$ )(?v5 A_llist$ )(?v6 B_llist$ ))(=> (and (forall ((?v7 A$ )(?v8 B$ ))(=> (fun_app$h (fun_app$l ?v0 ?v7 )?v8 )(forall ((?v9 A$ )(?v10 B$ ))(=> (fun_app$h (fun_app$l ?v0 ?v9 )?v10 )(= (fun_app$j (fun_app$k ?v1 ?v7 )?v9 )(fun_app$h (fun_app$i ?v2 ?v8 )?v10 ))))))(and (fun_app$d (llist_all2$ ?v0 ?v3 )?v4 )(fun_app$d (llist_all2$ ?v0 ?v5 )?v6 )))(= (fun_app$f (fun_app$g (llist_all2$a ?v1 )?v3 )?v5 )(fun_app$d (fun_app$e (llist_all2$c ?v2 )?v4 )?v6 )))):named a33 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$f (fun_app$g (llist_all2$a ?v0 )?v1 )?v2 )(and (= (lnull$ ?v1 )(lnull$ ?v2 ))(=> (and (not (lnull$ ?v1 ))(not (lnull$ ?v2 )))(and (fun_app$j (fun_app$k ?v0 (lhd$ ?v1 ))(lhd$ ?v2 ))(fun_app$f (fun_app$g (llist_all2$a ?v0 )(ltl$ ?v1 ))(ltl$ ?v2 ))))))):named a34 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(= (fun_app$f (llist_all2$b ?v0 ?v1 )?v2 )(and (= (lnull$a ?v1 )(lnull$ ?v2 ))(=> (and (not (lnull$a ?v1 ))(not (lnull$ ?v2 )))(and (fun_app$j (fun_app$m ?v0 (lhd$a ?v1 ))(lhd$ ?v2 ))(fun_app$f (llist_all2$b ?v0 (ltl$a ?v1 ))(ltl$ ?v2 ))))))):named a35 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$d (fun_app$e (llist_all2$c ?v0 )?v1 )?v2 )(and (= (lnull$a ?v1 )(lnull$a ?v2 ))(=> (and (not (lnull$a ?v1 ))(not (lnull$a ?v2 )))(and (fun_app$h (fun_app$i ?v0 (lhd$a ?v1 ))(lhd$a ?v2 ))(fun_app$d (fun_app$e (llist_all2$c ?v0 )(ltl$a ?v1 ))(ltl$a ?v2 ))))))):named a36 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(= (fun_app$d (llist_all2$ ?v0 ?v1 )?v2 )(and (= (lnull$ ?v1 )(lnull$a ?v2 ))(=> (and (not (lnull$ ?v1 ))(not (lnull$a ?v2 )))(and (fun_app$h (fun_app$l ?v0 (lhd$ ?v1 ))(lhd$a ?v2 ))(fun_app$d (llist_all2$ ?v0 (ltl$ ?v1 ))(ltl$a ?v2 ))))))):named a37 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (and (= (lnull$ ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (fun_app$j (fun_app$k ?v2 (lhd$ ?v0 ))(lhd$ ?v1 ))(fun_app$f (fun_app$g (llist_all2$a ?v2 )(ltl$ ?v0 ))(ltl$ ?v1 )))))(fun_app$f (fun_app$g (llist_all2$a ?v2 )?v0 )?v1 ))):named a38 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ )(?v2 B_a_bool_fun_fun$ ))(=> (and (= (lnull$a ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$a ?v0 ))(not (lnull$ ?v1 )))(and (fun_app$j (fun_app$m ?v2 (lhd$a ?v0 ))(lhd$ ?v1 ))(fun_app$f (llist_all2$b ?v2 (ltl$a ?v0 ))(ltl$ ?v1 )))))(fun_app$f (llist_all2$b ?v2 ?v0 )?v1 ))):named a39 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_bool_fun_fun$ ))(=> (and (= (lnull$a ?v0 )(lnull$a ?v1 ))(=> (and (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))(and (fun_app$h (fun_app$i ?v2 (lhd$a ?v0 ))(lhd$a ?v1 ))(fun_app$d (fun_app$e (llist_all2$c ?v2 )(ltl$a ?v0 ))(ltl$a ?v1 )))))(fun_app$d (fun_app$e (llist_all2$c ?v2 )?v0 )?v1 ))):named a40 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A_b_bool_fun_fun$ ))(=> (and (= (lnull$ ?v0 )(lnull$a ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$a ?v1 )))(and (fun_app$h (fun_app$l ?v2 (lhd$ ?v0 ))(lhd$a ?v1 ))(fun_app$d (llist_all2$ ?v2 (ltl$ ?v0 ))(ltl$a ?v1 )))))(fun_app$d (llist_all2$ ?v2 ?v0 )?v1 ))):named a41 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$f (fun_app$g ?v0 ?v1 )?v2 )(and (forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (fun_app$f (fun_app$g ?v0 ?v4 )?v5 )(= (lnull$ ?v4 )(lnull$ ?v5 ))))(forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (and (fun_app$f (fun_app$g ?v0 ?v4 )?v5 )(and (not (lnull$ ?v4 ))(not (lnull$ ?v5 ))))(and (fun_app$j (fun_app$k ?v3 (lhd$ ?v4 ))(lhd$ ?v5 ))(or (fun_app$f (fun_app$g ?v0 (ltl$ ?v4 ))(ltl$ ?v5 ))(fun_app$f (fun_app$g (llist_all2$a ?v3 )(ltl$ ?v4 ))(ltl$ ?v5 ))))))))(fun_app$f (fun_app$g (llist_all2$a ?v3 )?v1 )?v2 ))):named a42 ))
(assert (! (forall ((?v0 B_llist_a_llist_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (fun_app$f (fun_app$n ?v0 ?v1 )?v2 )(and (forall ((?v4 B_llist$ )(?v5 A_llist$ ))(=> (fun_app$f (fun_app$n ?v0 ?v4 )?v5 )(= (lnull$a ?v4 )(lnull$ ?v5 ))))(forall ((?v4 B_llist$ )(?v5 A_llist$ ))(=> (and (fun_app$f (fun_app$n ?v0 ?v4 )?v5 )(and (not (lnull$a ?v4 ))(not (lnull$ ?v5 ))))(and (fun_app$j (fun_app$m ?v3 (lhd$a ?v4 ))(lhd$ ?v5 ))(or (fun_app$f (fun_app$n ?v0 (ltl$a ?v4 ))(ltl$ ?v5 ))(fun_app$f (llist_all2$b ?v3 (ltl$a ?v4 ))(ltl$ ?v5 ))))))))(fun_app$f (llist_all2$b ?v3 ?v1 )?v2 ))):named a43 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(and (forall ((?v4 B_llist$ )(?v5 B_llist$ ))(=> (fun_app$d (fun_app$e ?v0 ?v4 )?v5 )(= (lnull$a ?v4 )(lnull$a ?v5 ))))(forall ((?v4 B_llist$ )(?v5 B_llist$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v4 )?v5 )(and (not (lnull$a ?v4 ))(not (lnull$a ?v5 ))))(and (fun_app$h (fun_app$i ?v3 (lhd$a ?v4 ))(lhd$a ?v5 ))(or (fun_app$d (fun_app$e ?v0 (ltl$a ?v4 ))(ltl$a ?v5 ))(fun_app$d (fun_app$e (llist_all2$c ?v3 )(ltl$a ?v4 ))(ltl$a ?v5 ))))))))(fun_app$d (fun_app$e (llist_all2$c ?v3 )?v1 )?v2 ))):named a44 ))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$o ?v0 ?v1 )?v2 )(and (forall ((?v4 A_llist$ )(?v5 B_llist$ ))(=> (fun_app$d (fun_app$o ?v0 ?v4 )?v5 )(= (lnull$ ?v4 )(lnull$a ?v5 ))))(forall ((?v4 A_llist$ )(?v5 B_llist$ ))(=> (and (fun_app$d (fun_app$o ?v0 ?v4 )?v5 )(and (not (lnull$ ?v4 ))(not (lnull$a ?v5 ))))(and (fun_app$h (fun_app$l ?v3 (lhd$ ?v4 ))(lhd$a ?v5 ))(or (fun_app$d (fun_app$o ?v0 (ltl$ ?v4 ))(ltl$a ?v5 ))(fun_app$d (llist_all2$ ?v3 (ltl$ ?v4 ))(ltl$a ?v5 ))))))))(fun_app$d (llist_all2$ ?v3 ?v1 )?v2 ))):named a45 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$f (fun_app$g ?v0 ?v1 )?v2 )(forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (fun_app$f (fun_app$g ?v0 ?v4 )?v5 )(and (= (lnull$ ?v4 )(lnull$ ?v5 ))(=> (and (not (lnull$ ?v4 ))(not (lnull$ ?v5 )))(and (fun_app$j (fun_app$k ?v3 (lhd$ ?v4 ))(lhd$ ?v5 ))(fun_app$f (fun_app$g ?v0 (ltl$ ?v4 ))(ltl$ ?v5 ))))))))(fun_app$f (fun_app$g (llist_all2$a ?v3 )?v1 )?v2 ))):named a46 ))
(assert (! (forall ((?v0 B_llist_a_llist_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (fun_app$f (fun_app$n ?v0 ?v1 )?v2 )(forall ((?v4 B_llist$ )(?v5 A_llist$ ))(=> (fun_app$f (fun_app$n ?v0 ?v4 )?v5 )(and (= (lnull$a ?v4 )(lnull$ ?v5 ))(=> (and (not (lnull$a ?v4 ))(not (lnull$ ?v5 )))(and (fun_app$j (fun_app$m ?v3 (lhd$a ?v4 ))(lhd$ ?v5 ))(fun_app$f (fun_app$n ?v0 (ltl$a ?v4 ))(ltl$ ?v5 ))))))))(fun_app$f (llist_all2$b ?v3 ?v1 )?v2 ))):named a47 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(forall ((?v4 B_llist$ )(?v5 B_llist$ ))(=> (fun_app$d (fun_app$e ?v0 ?v4 )?v5 )(and (= (lnull$a ?v4 )(lnull$a ?v5 ))(=> (and (not (lnull$a ?v4 ))(not (lnull$a ?v5 )))(and (fun_app$h (fun_app$i ?v3 (lhd$a ?v4 ))(lhd$a ?v5 ))(fun_app$d (fun_app$e ?v0 (ltl$a ?v4 ))(ltl$a ?v5 ))))))))(fun_app$d (fun_app$e (llist_all2$c ?v3 )?v1 )?v2 ))):named a48 ))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$o ?v0 ?v1 )?v2 )(forall ((?v4 A_llist$ )(?v5 B_llist$ ))(=> (fun_app$d (fun_app$o ?v0 ?v4 )?v5 )(and (= (lnull$ ?v4 )(lnull$a ?v5 ))(=> (and (not (lnull$ ?v4 ))(not (lnull$a ?v5 )))(and (fun_app$h (fun_app$l ?v3 (lhd$ ?v4 ))(lhd$a ?v5 ))(fun_app$d (fun_app$o ?v0 (ltl$ ?v4 ))(ltl$a ?v5 ))))))))(fun_app$d (llist_all2$ ?v3 ?v1 )?v2 ))):named a49 ))
(assert (! (= stream_of_llist$ (unfold_stream$ uud$ uue$ )):named a50 ))
(assert (! (= stream_of_llist$a (unfold_stream$a uuf$ uug$ )):named a51 ))
(assert (! (forall ((?v0 A_stream$ ))(not (lfinite$ (llist_of_stream$ ?v0 )))):named a52 ))
(assert (! (forall ((?v0 B_stream$ ))(not (lfinite$a (llist_of_stream$a ?v0 )))):named a53 ))
(assert (! (forall ((?v0 B_stream$ ))(= (fun_app$p stream_of_llist$a (llist_of_stream$a ?v0 ))?v0 )):named a54 ))
(assert (! (forall ((?v0 A_stream$ ))(= (fun_app$q stream_of_llist$ (llist_of_stream$ ?v0 ))?v0 )):named a55 ))
(assert (! (forall ((?v0 B_stream$ ))(= (fun_app$p stream_of_llist$a (llist_of_stream$a ?v0 ))?v0 )):named a56 ))
(assert (! (forall ((?v0 A_stream$ ))(= (fun_app$q stream_of_llist$ (llist_of_stream$ ?v0 ))?v0 )):named a57 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lfinite$ ?v0 ))(= (llist_of_stream$ (fun_app$q stream_of_llist$ ?v0 ))?v0 ))):named a58 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (not (lfinite$a ?v0 ))(= (llist_of_stream$a (fun_app$p stream_of_llist$a ?v0 ))?v0 ))):named a59 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (= (llist_of_stream$a ?v0 )(llist_of_stream$a ?v1 ))(= ?v0 ?v1 ))):named a60 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (= (llist_of_stream$ ?v0 )(llist_of_stream$ ?v1 ))(= ?v0 ?v1 ))):named a61 ))
(check-sat )
;(get-unsat-core )
