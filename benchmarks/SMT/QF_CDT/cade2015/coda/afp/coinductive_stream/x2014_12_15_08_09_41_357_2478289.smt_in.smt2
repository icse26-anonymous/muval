;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Enat_set$ 0 )
(declare-sort Enat_set_set$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Enat_set_set_set$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort Enat_set_bool_fun$ 0 )
(declare-sort Enat_set_set_set_set$ 0 )
(declare-sort Enat_set_set_bool_fun$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-sort Enat_set_set_set_bool_fun$ 0 )
(declare-sort Enat_set_enat_set_bool_fun_fun$ 0 )
(declare-sort Enat_set_set_enat_set_set_bool_fun_fun$ 0 )
(declare-sort A_stream_bool_fun_a_stream_bool_fun_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun p$ ()A_stream_bool_fun$ )
(declare-fun uu$ ()Enat_bool_fun$ )
(declare-fun alw$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun inf$ (Enat_set$ )Enat$ )
(declare-fun uua$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun uub$ (Enat_set_set_enat_set_set_bool_fun_fun$ )Enat_set_set_set_bool_fun$ )
(declare-fun uuc$ (Enat_set_enat_set_bool_fun_fun$ )Enat_set_set_bool_fun$ )
(declare-fun uud$ (Enat_enat_bool_fun_fun$ )Enat_set_bool_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun zero$ ()Enat$ )
(declare-fun omega$ ()A_stream$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun smap2$ (A_a_a_fun_fun$ A_stream$ A_stream$ )A_stream$ )
(declare-fun until$ (A_stream_bool_fun$ )A_stream_bool_fun_a_stream_bool_fun_fun$ )
(declare-fun member$ (Enat_set_set_set$ Enat_set_set_set_set$ )Bool )
(declare-fun sfirst$ (A_stream_bool_fun$ A_stream$ )Enat$ )
(declare-fun collect$ (Enat_bool_fun$ )Enat_set$ )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun member$a (Enat_set_set$ Enat_set_set_set$ )Bool )
(declare-fun member$b (Enat_set$ Enat_set_set$ )Bool )
(declare-fun collect$a (Enat_set_bool_fun$ )Enat_set_set$ )
(declare-fun collect$b (Enat_set_set_bool_fun$ )Enat_set_set_set$ )
(declare-fun collect$c (Enat_set_set_set_bool_fun$ )Enat_set_set_set_set$ )
(declare-fun fun_app$a (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$b (Enat_set_bool_fun$ Enat_set$ )Bool )
(declare-fun fun_app$c (Enat_enat_bool_fun_fun$ Enat$ )Enat_bool_fun$ )
(declare-fun fun_app$d (Enat_set_set_bool_fun$ Enat_set_set$ )Bool )
(declare-fun fun_app$e (Enat_set_enat_set_bool_fun_fun$ Enat_set$ )Enat_set_bool_fun$ )
(declare-fun fun_app$f (Enat_set_set_set_bool_fun$ Enat_set_set_set$ )Bool )
(declare-fun fun_app$g (Enat_set_set_enat_set_set_bool_fun_fun$ Enat_set_set$ )Enat_set_set_bool_fun$ )
(declare-fun fun_app$h (A_stream_bool_fun_a_stream_bool_fun_fun$ A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun part_equivp$ (Enat_set_set_enat_set_set_bool_fun_fun$ )Bool )
(declare-fun part_equivp$a (Enat_set_enat_set_bool_fun_fun$ )Bool )
(declare-fun part_equivp$b (Enat_enat_bool_fun_fun$ )Bool )
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ uu$ ?v0 )(exists ((?v1 Nat$ ))(and (= ?v0 (enat$ ?v1 ))(fun_app$a p$ (sdrop$ ?v1 omega$ ))))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(! (= (fun_app$a (uua$ ?v0 )?v1 )(not (fun_app$a ?v0 ?v1 ))):pattern ((fun_app$a (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat_set$ ))(! (= (fun_app$b (uud$ ?v0 )?v1 )(exists ((?v2 Enat$ ))(and (fun_app$ (fun_app$c ?v0 ?v2 )?v2 )(= ?v1 (collect$ (fun_app$c ?v0 ?v2 )))))):pattern ((fun_app$b (uud$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Enat_set_enat_set_bool_fun_fun$ )(?v1 Enat_set_set$ ))(! (= (fun_app$d (uuc$ ?v0 )?v1 )(exists ((?v2 Enat_set$ ))(and (fun_app$b (fun_app$e ?v0 ?v2 )?v2 )(= ?v1 (collect$a (fun_app$e ?v0 ?v2 )))))):pattern ((fun_app$d (uuc$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 Enat_set_set_enat_set_set_bool_fun_fun$ )(?v1 Enat_set_set_set$ ))(! (= (fun_app$f (uub$ ?v0 )?v1 )(exists ((?v2 Enat_set_set$ ))(and (fun_app$d (fun_app$g ?v0 ?v2 )?v2 )(= ?v1 (collect$b (fun_app$g ?v0 ?v2 )))))):pattern ((fun_app$f (uub$ ?v0 )?v1 )))):named a4 ))
(assert (! (not (= (sfirst$ p$ omega$ )(inf$ (collect$ uu$ )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(=> (fun_app$ (less$ (enat$ ?v0 ))(sfirst$ ?v1 ?v2 ))(not (fun_app$a ?v1 (sdrop$ ?v0 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(! (=> (fun_app$a ?v0 ?v1 )(= (sfirst$ ?v0 ?v1 )zero$ )):pattern ((sfirst$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(= (= (sfirst$ ?v0 ?v1 )zero$ )(fun_app$a ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(=> (fun_app$a (fun_app$h (until$ (uua$ ?v0 ))(alw$ ?v0 ))?v1 )(= (fun_app$ (less$ (enat$ ?v2 ))(sfirst$ ?v0 ?v1 ))(not (fun_app$a ?v0 (sdrop$ ?v2 ?v1 )))))):named a10 ))
(assert (! (forall ((?v0 Enat_set_set_enat_set_set_bool_fun_fun$ ))(=> (part_equivp$ ?v0 )(exists ((?v1 Enat_set_set_set$ ))(member$ ?v1 (collect$c (uub$ ?v0 )))))):named a11 ))
(assert (! (forall ((?v0 Enat_set_enat_set_bool_fun_fun$ ))(=> (part_equivp$a ?v0 )(exists ((?v1 Enat_set_set$ ))(member$a ?v1 (collect$b (uuc$ ?v0 )))))):named a12 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ ))(=> (part_equivp$b ?v0 )(exists ((?v1 Enat_set$ ))(member$b ?v1 (collect$a (uud$ ?v0 )))))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_fun_fun$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (sdrop$ ?v0 (smap2$ ?v1 ?v2 ?v3 ))(smap2$ ?v1 (sdrop$ ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 Enat$ ))(= (fun_app$ (less$ zero$ )?v0 )(not (= ?v0 zero$ )))):named a15 ))
(assert (! (forall ((?v0 Enat_set_enat_set_bool_fun_fun$ ))(= (part_equivp$a ?v0 )(and (exists ((?v1 Enat_set$ ))(fun_app$b (fun_app$e ?v0 ?v1 )?v1 ))(forall ((?v1 Enat_set$ )(?v2 Enat_set$ ))(= (fun_app$b (fun_app$e ?v0 ?v1 )?v2 )(and (fun_app$b (fun_app$e ?v0 ?v1 )?v1 )(and (fun_app$b (fun_app$e ?v0 ?v2 )?v2 )(= (fun_app$e ?v0 ?v1 )(fun_app$e ?v0 ?v2 ))))))))):named a16 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ ))(= (part_equivp$b ?v0 )(and (exists ((?v1 Enat$ ))(fun_app$ (fun_app$c ?v0 ?v1 )?v1 ))(forall ((?v1 Enat$ )(?v2 Enat$ ))(= (fun_app$ (fun_app$c ?v0 ?v1 )?v2 )(and (fun_app$ (fun_app$c ?v0 ?v1 )?v1 )(and (fun_app$ (fun_app$c ?v0 ?v2 )?v2 )(= (fun_app$c ?v0 ?v1 )(fun_app$c ?v0 ?v2 ))))))))):named a17 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a18 ))
(check-sat )
;(get-unsat-core )
