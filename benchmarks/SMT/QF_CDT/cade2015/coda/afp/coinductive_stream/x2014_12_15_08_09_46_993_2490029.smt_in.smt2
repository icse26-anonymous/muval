;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun i$ ()Nat$ )
(declare-fun p$ ()A_stream_bool_fun$ )
(declare-fun ia$ ()Nat$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun omega$ ()A_stream$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun omega$a ()A_stream$ )
(declare-fun sfirst$ (A_stream_bool_fun$ A_stream$ )Enat$ )
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun fun_app$a (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun fun_app$b (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun less_eq$a (Nat$ Nat$ )Bool )
(assert (! (not (less_eq$ (sfirst$ p$ omega$ )(enat$ (suc$ ia$ )))):named a0 ))
(assert (! (fun_app$ p$ (sdrop$ i$ omega$a )):named a1 ))
(assert (! (fun_app$ p$ (sdrop$ (suc$ ia$ )omega$ )):named a2 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (fun_app$ p$ (sdrop$ ia$ ?v0 ))(less_eq$ (sfirst$ p$ ?v0 )(enat$ ia$ )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Enat$ ))(less_eq$ ?v0 ?v0 )):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$a ?v0 ?v0 )):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less_eq$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less_eq$ (fun_app$a ?v0 (suc$ ?v3 ))(fun_app$a ?v0 ?v3 )))(less_eq$a ?v1 ?v2 ))(less_eq$ (fun_app$a ?v0 ?v2 )(fun_app$a ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less_eq$a (fun_app$b ?v0 (suc$ ?v3 ))(fun_app$b ?v0 ?v3 )))(less_eq$a ?v1 ?v2 ))(less_eq$a (fun_app$b ?v0 ?v2 )(fun_app$b ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less_eq$ (fun_app$a ?v0 ?v3 )(fun_app$a ?v0 (suc$ ?v3 ))))(less_eq$a ?v1 ?v2 ))(less_eq$ (fun_app$a ?v0 ?v1 )(fun_app$a ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less_eq$a (fun_app$b ?v0 ?v3 )(fun_app$b ?v0 (suc$ ?v3 ))))(less_eq$a ?v1 ?v2 ))(less_eq$a (fun_app$b ?v0 ?v1 )(fun_app$b ?v0 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= ?v0 ?v1 )(and (less_eq$a ?v0 ?v1 )(less_eq$a ?v1 ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (less_eq$a (suc$ ?v0 )(suc$ ?v1 ))(less_eq$a ?v0 ?v1 )):pattern ((less_eq$a (suc$ ?v0 )(suc$ ?v1 ))))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (less_eq$ (enat$ ?v0 )(enat$ ?v1 ))(less_eq$a ?v0 ?v1 )):pattern ((less_eq$ (enat$ ?v0 )(enat$ ?v1 ))))):named a19 ))
(check-sat )
;(get-unsat-core )
