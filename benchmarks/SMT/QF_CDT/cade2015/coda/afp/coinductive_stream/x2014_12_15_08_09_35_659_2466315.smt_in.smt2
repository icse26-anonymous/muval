;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort A_stream_bool_fun_a_stream_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun p$ ()A_stream_bool_fun$ )
(declare-fun uu$ ()A_stream_bool_fun$ )
(declare-fun alw$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun uua$ ()A_stream_bool_fun$ )
(declare-fun uub$ (A_stream_bool_fun$ )A_stream_bool_fun_a_stream_bool_fun_fun$ )
(declare-fun uuc$ (A_stream_a_stream_fun$ )A_stream_bool_fun_a_stream_bool_fun_fun$ )
(declare-fun omega$ ()A_stream$ )
(declare-fun until$ (A_stream_bool_fun$ )A_stream_bool_fun_a_stream_bool_fun_fun$ )
(declare-fun scount$ (A_stream_bool_fun$ A_stream$ )Enat$ )
(declare-fun fun_app$ (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$a (A_stream_bool_fun_a_stream_bool_fun_fun$ A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun fun_app$b (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$ uu$ ?v0 )(not (fun_app$ p$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(! (= (fun_app$ (fun_app$a (uub$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uub$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(! (= (fun_app$ (fun_app$a (uuc$ ?v0 )?v1 )?v2 )(fun_app$ ?v1 (fun_app$b ?v0 ?v2 ))):pattern ((fun_app$ (fun_app$a (uuc$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$ uua$ ?v0 )false ):pattern ((fun_app$ uua$ ?v0 )))):named a3 ))
(assert (! (not (fun_app$ p$ (stl$ omega$ ))):named a4 ))
(assert (! (fun_app$ p$ omega$ ):named a5 ))
(assert (! (fun_app$ (fun_app$a (until$ uu$ )(alw$ p$ ))omega$ ):named a6 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(= (fun_app$ (fun_app$a (until$ ?v0 )?v1 )?v2 )(or (exists ((?v3 A_stream$ ))(and (= ?v2 ?v3 )(fun_app$ ?v1 ?v3 )))(exists ((?v3 A_stream$ ))(and (= ?v2 ?v3 )(and (fun_app$ ?v0 ?v3 )(fun_app$ (fun_app$a (until$ ?v0 )?v1 )(stl$ ?v3 )))))))):named a7 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(=> (and (fun_app$ (fun_app$a (until$ ?v0 )?v1 )?v2 )(and (forall ((?v3 A_stream$ ))(=> (and (= ?v2 ?v3 )(fun_app$ ?v1 ?v3 ))false ))(forall ((?v3 A_stream$ ))(=> (and (= ?v2 ?v3 )(and (fun_app$ ?v0 ?v3 )(fun_app$ (fun_app$a (until$ ?v0 )?v1 )(stl$ ?v3 ))))false ))))false )):named a8 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_stream_bool_fun$ )(?v3 A_stream_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v4 A_stream$ ))(=> (fun_app$ ?v0 ?v4 )(or (exists ((?v5 A_stream$ ))(and (= ?v4 ?v5 )(fun_app$ ?v2 ?v5 )))(exists ((?v5 A_stream$ ))(and (= ?v4 ?v5 )(and (fun_app$ ?v3 ?v5 )(or (fun_app$ ?v0 (stl$ ?v5 ))(fun_app$ (fun_app$a (until$ ?v3 )?v2 )(stl$ ?v5 ))))))))))(fun_app$ (fun_app$a (until$ ?v3 )?v2 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_stream_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(fun_app$ (fun_app$a (until$ ?v0 )?v2 )(stl$ ?v1 )))(fun_app$ (fun_app$a (until$ ?v0 )?v2 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (scount$ ?v0 ?v1 )(scount$ ?v0 (stl$ ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(= (fun_app$ (alw$ ?v0 )?v1 )(exists ((?v2 A_stream$ ))(and (= ?v1 ?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ (alw$ ?v0 )(stl$ ?v2 ))))))):named a12 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (and (fun_app$ (alw$ ?v0 )?v1 )(forall ((?v2 A_stream$ ))(=> (and (= ?v1 ?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ (alw$ ?v0 )(stl$ ?v2 ))))false )))false )):named a13 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_stream_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(and (forall ((?v3 A_stream$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ ?v2 ?v3 )))(forall ((?v3 A_stream$ ))(=> (and (fun_app$ ?v0 ?v3 )(not (fun_app$ (alw$ ?v2 )(stl$ ?v3 ))))(fun_app$ ?v0 (stl$ ?v3 ))))))(fun_app$ (alw$ ?v2 )?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_stream_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v3 A_stream$ ))(=> (fun_app$ ?v0 ?v3 )(exists ((?v4 A_stream$ ))(and (= ?v3 ?v4 )(and (fun_app$ ?v2 ?v4 )(or (fun_app$ ?v0 (stl$ ?v4 ))(fun_app$ (alw$ ?v2 )(stl$ ?v4 )))))))))(fun_app$ (alw$ ?v2 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (and (fun_app$ ?v0 ?v1 )(fun_app$ (alw$ ?v0 )(stl$ ?v1 )))(fun_app$ (alw$ ?v0 )?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (alw$ (alw$ ?v0 ))(alw$ ?v0 ))):named a17 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (fun_app$a (until$ ?v0 )uua$ )(alw$ ?v0 ))):named a18 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(= (fun_app$ (alw$ (fun_app$a (uub$ ?v0 )?v1 ))?v2 )(and (fun_app$ (alw$ ?v0 )?v2 )(fun_app$ (alw$ ?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_stream$ ))(= (fun_app$ (alw$ uua$ )?v0 )false )):named a20 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_bool_fun$ )(?v2 A_stream$ ))(=> (forall ((?v3 A_stream$ ))(= (fun_app$b ?v0 (stl$ ?v3 ))(stl$ (fun_app$b ?v0 ?v3 ))))(= (fun_app$ (alw$ ?v1 )(fun_app$b ?v0 ?v2 ))(fun_app$ (alw$ (fun_app$a (uuc$ ?v0 )?v1 ))?v2 )))):named a21 ))
(check-sat )
;(get-unsat-core )
