;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun fun$ ()Nat_a_fun$ )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun fun_app$ (Nat_a_fun$ Nat$ )A$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun cr_stream$ (A_llist$ A_stream$ )Bool )
(declare-fun inf_llist$ (Nat_a_fun$ )A_llist$ )
(declare-fun llist_all2$ (A_a_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(declare-fun llist_of_stream$ (A_stream$ )A_llist$ )
(declare-fun stream_of_llist$ (A_llist$ )A_stream$ )
(assert (! (not (not (lfinite$ (inf_llist$ fun$ )))):named a0 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_a_fun$ ))(= (= (inf_llist$ ?v0 )(inf_llist$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(not (lfinite$ (inf_llist$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lfinite$ ?v0 ))(= (inf_llist$ (lnth$ ?v0 ))?v0 ))):named a3 ))
(assert (! (forall ((?v0 A_stream$ ))(not (lfinite$ (llist_of_stream$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lfinite$ ?v0 ))(cr_stream$ ?v0 (stream_of_llist$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lfinite$ ?v0 ))):named a6 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A_llist$ ))(= (lprefix$ (inf_llist$ ?v0 )?v1 )(= ?v1 (inf_llist$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat$ ))(= (fun_app$ (lnth$ (inf_llist$ ?v0 ))?v1 )(fun_app$ ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lfinite$ ?v0 ))(= (llist_of_stream$ (stream_of_llist$ ?v0 ))?v0 ))):named a9 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 A_llist$ ))(= (lappend$ (inf_llist$ ?v0 )?v1 )(inf_llist$ ?v0 ))):named a10 ))
(assert (! (= (lfinite$ lNil$ )true ):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 Nat_a_fun$ )(?v2 Nat_a_fun$ ))(= (fun_app$a (llist_all2$ ?v0 (inf_llist$ ?v1 ))(inf_llist$ ?v2 ))(forall ((?v3 Nat$ ))(fun_app$b (fun_app$c ?v0 (fun_app$ ?v1 ?v3 ))(fun_app$ ?v2 ?v3 ))))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$ lNil$ ?v0 )true ):pattern ((lprefix$ lNil$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$a (llist_all2$ ?v0 ?v1 )lNil$ )(= ?v1 lNil$ )):pattern ((llist_all2$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$a (llist_all2$ ?v0 lNil$ )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$a (llist_all2$ ?v0 lNil$ )?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
