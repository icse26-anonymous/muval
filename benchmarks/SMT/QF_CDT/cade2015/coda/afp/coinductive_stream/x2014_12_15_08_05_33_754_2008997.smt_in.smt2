;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_stream_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort A_stream_a_stream_a_stream_fun_fun$ 0 )
(declare-sort A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))(A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun uu$ ()A_llist_a_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun hld$ (A_set$ A_stream$ )Bool )
(declare-fun uua$ ()A_llist_a_llist_fun$ )
(declare-fun uub$ ()A_stream_a_fun$ )
(declare-fun uuc$ ()A_stream_a_stream_fun$ )
(declare-fun holds$ (A_bool_fun$ A_stream$ )Bool )
(declare-fun smap2$ (A_a_a_fun_fun$ )A_stream_a_stream_a_stream_fun_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$a (A_llist_a_fun$ A_llist$ )A$ )
(declare-fun fun_app$b (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun fun_app$c (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$d (A_llist_a_stream_fun$ A_llist$ )A_stream$ )
(declare-fun fun_app$e (A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ A_stream_a_stream_fun$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$f (A_stream_a_stream_a_stream_fun_fun$ A_stream$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$g (A_a_fun$ A$ )A$ )
(declare-fun fun_app$h (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$i (A_bool_fun$ A$ )Bool )
(declare-fun siterate$ (A_a_fun$ A$ )A_stream$ )
(declare-fun sinterleave$ (A_stream$ )A_stream_a_stream_fun$ )
(declare-fun unfold_stream$ (A_llist_a_fun$ A_llist_a_llist_fun$ )A_llist_a_stream_fun$ )
(declare-fun unfold_stream$a (A_stream_a_fun$ )A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ )
(declare-fun stream_of_llist$ ()A_llist_a_stream_fun$ )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uua$ ?v0 )(ltl$ ?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a uu$ ?v0 )(lhd$ ?v0 )):pattern ((fun_app$a uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$b uuc$ ?v0 )(stl$ ?v0 )):pattern ((fun_app$b uuc$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$c uub$ ?v0 )(shd$ ?v0 )):pattern ((fun_app$c uub$ ?v0 )))):named a3 ))
(assert (! (not (= (shd$ (fun_app$d stream_of_llist$ xs$ ))(lhd$ xs$ ))):named a4 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(= (shd$ (fun_app$d (unfold_stream$ ?v0 ?v1 )?v2 ))(fun_app$a ?v0 ?v2 ))):named a5 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream$ ))(= (shd$ (fun_app$b (fun_app$e (unfold_stream$a ?v0 )?v1 )?v2 ))(fun_app$c ?v0 ?v2 ))):named a6 ))
(assert (! (= stream_of_llist$ (unfold_stream$ uu$ uua$ )):named a7 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$ (fun_app$b (sinterleave$ ?v0 )?v1 ))(shd$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_stream$ ))(! (= (hld$ ?v0 ?v1 )(member$ (shd$ ?v1 )?v0 )):pattern ((hld$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (shd$ (fun_app$b (fun_app$f (smap2$ ?v0 )?v1 )?v2 ))(fun_app$g (fun_app$h ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(= (stl$ (fun_app$d stream_of_llist$ ?v0 ))(fun_app$d stream_of_llist$ (ltl$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(! (= (holds$ ?v0 ?v1 )(fun_app$i ?v0 (shd$ ?v1 ))):pattern ((holds$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (shd$ (siterate$ ?v0 ?v1 ))?v1 )):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ )(?v2 Bool ))(=> (and (= (holds$ ?v0 ?v1 )?v2 )(forall ((?v3 A_bool_fun$ )(?v4 A_stream$ ))(=> (and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 (fun_app$i ?v3 (shd$ ?v4 )))))false )))false )):named a14 ))
(assert (! (forall ((?v0 A_stream$ ))(= (fun_app$b (fun_app$e (unfold_stream$a uub$ )uuc$ )?v0 )?v0 )):named a15 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stl$ (fun_app$b (fun_app$f (smap2$ ?v0 )?v1 )?v2 ))(fun_app$b (fun_app$f (smap2$ ?v0 )(stl$ ?v1 ))(stl$ ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(= (stl$ (fun_app$d (unfold_stream$ ?v0 ?v1 )?v2 ))(fun_app$d (unfold_stream$ ?v0 ?v1 )(fun_app$ ?v1 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream$ ))(= (stl$ (fun_app$b (fun_app$e (unfold_stream$a ?v0 )?v1 )?v2 ))(fun_app$b (fun_app$e (unfold_stream$a ?v0 )?v1 )(fun_app$b ?v1 ?v2 )))):named a18 ))
(check-sat )
;(get-unsat-core )
