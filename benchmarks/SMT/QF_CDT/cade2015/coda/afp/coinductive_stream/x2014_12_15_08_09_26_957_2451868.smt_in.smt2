;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun p$ ()A_stream_bool_fun$ )
(declare-fun ev$ (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun omega$ ()A_stream$ )
(declare-fun sfirst$ (A_stream_bool_fun$ A_stream$ )Enat$ )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$a (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun infinity$ ()Enat$ )
(assert (! (not (fun_app$ (less$ (sfirst$ p$ omega$ ))infinity$ )):named a0 ))
(assert (! (ev$ p$ omega$ ):named a1 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (less$ ?v0 )infinity$ )(not (= ?v0 infinity$ ))):pattern ((less$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (less$ infinity$ )?v0 )false ):pattern ((fun_app$ (less$ infinity$ )?v0 )))):named a3 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$ (less$ ?v0 )?v1 )(fun_app$ (less$ ?v1 )?v0 )))):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (fun_app$ (less$ ?v0 )?v1 ))(or (fun_app$ (less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (=> (fun_app$ (less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$ (less$ ?v1 )?v0 )false )))false )):named a7 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat_enat_fun$ )(?v2 Enat$ )(?v3 Enat$ ))(=> (and (= ?v0 (fun_app$a ?v1 ?v2 ))(and (fun_app$ (less$ ?v2 )?v3 )(forall ((?v4 Enat$ )(?v5 Enat$ ))(=> (fun_app$ (less$ ?v4 )?v5 )(fun_app$ (less$ (fun_app$a ?v1 ?v4 ))(fun_app$a ?v1 ?v5 ))))))(fun_app$ (less$ ?v0 )(fun_app$a ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (less$ ?v1 )?v2 ))(fun_app$ (less$ ?v0 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (fun_app$ (less$ ?v0 )?v1 )(=> (not false )(fun_app$ (less$ ?v1 )?v0 )))false )):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat_enat_fun$ )(?v3 Enat$ ))(=> (and (fun_app$ (less$ ?v0 )?v1 )(and (= (fun_app$a ?v2 ?v1 )?v3 )(forall ((?v4 Enat$ )(?v5 Enat$ ))(=> (fun_app$ (less$ ?v4 )?v5 )(fun_app$ (less$ (fun_app$a ?v2 ?v4 ))(fun_app$a ?v2 ?v5 ))))))(fun_app$ (less$ (fun_app$a ?v2 ?v0 ))?v3 ))):named a12 ))
(assert (! (forall ((?v0 Enat$ ))(not (fun_app$ (less$ ?v0 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 Enat$ ))(not (fun_app$ (less$ ?v0 )?v0 ))):named a14 ))
(check-sat )
;(get-unsat-core )
