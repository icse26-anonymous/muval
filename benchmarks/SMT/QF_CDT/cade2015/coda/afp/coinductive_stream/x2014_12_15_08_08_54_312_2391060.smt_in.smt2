;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort A_stream_nat_bool_fun_fun$ 0 )
(declare-sort Nat_bool_fun_nat_bool_fun_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun_nat_nat_bool_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun p$ ()A_stream_bool_fun$ )
(declare-fun ev$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun alw$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun bot$ ()Nat_set$ )
(declare-fun uua$ ()A_stream_bool_fun$ )
(declare-fun uub$ (Nat_bool_fun$ )Nat_bool_fun_nat_bool_fun_fun$ )
(declare-fun uuc$ (Nat_bool_fun$ )Nat_bool_fun_nat_bool_fun_fun$ )
(declare-fun uud$ (Nat_set$ )Nat_nat_bool_fun_fun_nat_nat_bool_fun_fun_fun$ )
(declare-fun uue$ (Nat$ )Nat_bool_fun$ )
(declare-fun uuf$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun uug$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun uuh$ (A_stream_bool_fun$ )A_stream_bool_fun$ )
(declare-fun uui$ (A_stream_bool_fun$ )A_stream_nat_bool_fun_fun$ )
(declare-fun card$ (Nat_set$ )Nat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun omega$ ()A_stream$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun smap2$ (A_a_a_fun_fun$ A_stream$ A_stream$ )A_stream$ )
(declare-fun finite$ (Nat_set$ )Bool )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun omega$a ()A_stream$ )
(declare-fun scount$ (A_stream_bool_fun$ A_stream$ )Enat$ )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun less_eq$ (Nat$ )Nat_bool_fun$ )
(declare-fun fun_app$a (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$b (Nat_bool_fun_nat_bool_fun_fun$ Nat_bool_fun$ )Nat_bool_fun$ )
(declare-fun fun_app$c (A_stream_nat_bool_fun_fun$ A_stream$ )Nat_bool_fun$ )
(declare-fun fun_app$d (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun fun_app$e (Nat_nat_bool_fun_fun_nat_nat_bool_fun_fun_fun$ Nat_nat_bool_fun_fun$ )Nat_nat_bool_fun_fun$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$a p$ (sdrop$ ?v0 omega$ ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$a uua$ ?v0 )(not (fun_app$a p$ ?v0 ))):pattern ((fun_app$a uua$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (uue$ ?v0 )?v1 )(fun_app$ (less_eq$ ?v1 )?v0 )):pattern ((fun_app$ (uue$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(! (= (fun_app$a (uug$ ?v0 )?v1 )(not (fun_app$a (alw$ (uuf$ ?v0 ))?v1 ))):pattern ((fun_app$a (uug$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(! (= (fun_app$a (uuh$ ?v0 )?v1 )(not (fun_app$a (ev$ (uuf$ ?v0 ))?v1 ))):pattern ((fun_app$a (uuh$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(! (= (fun_app$a (uuf$ ?v0 )?v1 )(not (fun_app$a ?v0 ?v1 ))):pattern ((fun_app$a (uuf$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$b (uub$ ?v0 )?v1 )?v2 )(or (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uub$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$b (uuc$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uuc$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$c (uui$ ?v0 )?v1 )?v2 )(fun_app$a ?v0 (sdrop$ ?v2 ?v1 ))):pattern ((fun_app$ (fun_app$c (uui$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_nat_bool_fun_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(! (= (fun_app$ (fun_app$d (fun_app$e (uud$ ?v0 )?v1 )?v2 )?v3 )(and (member$ ?v3 ?v0 )(fun_app$ (fun_app$d ?v1 ?v3 )?v2 ))):pattern ((fun_app$ (fun_app$d (fun_app$e (uud$ ?v0 )?v1 )?v2 )?v3 )))):named a9 ))
(assert (! (not (finite$ (collect$ uu$ ))):named a10 ))
(assert (! (fun_app$a (alw$ uua$ )omega$ ):named a11 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ ))(= (finite$ (collect$ (fun_app$b (uub$ ?v0 )?v1 )))(and (finite$ (collect$ ?v0 ))(finite$ (collect$ ?v1 ))))):named a12 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ ))(=> (or (finite$ (collect$ ?v0 ))(finite$ (collect$ ?v1 )))(finite$ (collect$ (fun_app$b (uuc$ ?v0 )?v1 ))))):named a13 ))
(assert (! (= (collect$ uu$ )bot$ ):named a14 ))
(assert (! (forall ((?v0 Nat_bool_fun$ ))(=> (not (finite$ (collect$ ?v0 )))(exists ((?v1 Nat$ ))(fun_app$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ )(?v2 Nat_nat_bool_fun_fun$ ))(=> (and (not (finite$ ?v0 ))(and (finite$ ?v1 )(forall ((?v3 Nat$ ))(=> (member$ ?v3 ?v0 )(exists ((?v4 Nat$ ))(and (member$ ?v4 ?v1 )(fun_app$ (fun_app$d ?v2 ?v3 )?v4 )))))))(exists ((?v3 Nat$ ))(and (member$ ?v3 ?v1 )(not (finite$ (collect$ (fun_app$d (fun_app$e (uud$ ?v0 )?v2 )?v3 )))))))):named a16 ))
(assert (! (= (scount$ p$ omega$ )(enat$ (card$ (collect$ uu$ )))):named a17 ))
(assert (! (fun_app$a (ev$ (alw$ uua$ ))omega$a ):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_fun_fun$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (sdrop$ ?v0 (smap2$ ?v1 ?v2 ?v3 ))(smap2$ ?v1 (sdrop$ ?v0 ?v2 )(sdrop$ ?v0 ?v3 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ ))(finite$ (collect$ (uue$ ?v0 )))):named a20 ))
(assert (! (finite$ bot$ ):named a21 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (uug$ ?v0 )(ev$ ?v0 ))):named a22 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ ))(= (uuh$ ?v0 )(alw$ ?v0 ))):named a23 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(= (not (finite$ (collect$ (fun_app$c (uui$ ?v0 )?v1 ))))(fun_app$a (alw$ (ev$ ?v0 ))?v1 ))):named a24 ))
(check-sat )
;(get-unsat-core )
