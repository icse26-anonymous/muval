;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort A_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_fun$ 0 )
(declare-sort A_a_prod_b_fun$ 0 )
(declare-sort B_a_a_prod_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort B_b_a_prod_fun$ 0 )
(declare-sort B_b_b_prod_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_b_b_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort B_a_a_a_prod_prod_fun$ 0 )
(declare-sort B_a_a_prod_a_prod_fun$ 0 )
(declare-sort B_a_a_prod_b_prod_fun$ 0 )
(declare-sort B_b_a_a_prod_prod_fun$ 0 )
(declare-sort B_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_fun_b_b_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_a_prod_fun_fun$ 0 )
(declare-sort B_a_a_prod_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_a_prod_fun_b_b_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_a_prod_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_a_prod_fun_fun$ 0 )
(declare-sort B_a_a_prod_a_a_prod_prod_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-sort A_a_prod$ 0)
(declare-fun fst$ (A_a_prod$)A$)
(declare-fun snd$ (A_a_prod$)A$)
(declare-fun pair$ (A$ A$ )A_a_prod$)
(declare-codatatypes ()((B_stream$ (sCons$a (shd$a B$ )(stl$a B_stream$ )))(A_a_prod_stream$ (sCons$b (shd$b A_a_prod$ )(stl$b A_a_prod_stream$ )))))
(declare-sort A_b_prod$ 0)
(declare-sort A_a_a_prod_prod$ 0)
(declare-sort B_a_prod$ 0)
(declare-sort B_b_prod$ 0)
(declare-sort B_a_a_prod_prod$ 0)
(declare-sort A_a_prod_a_prod$ 0)
(declare-sort A_a_prod_b_prod$ 0)
(declare-sort A_a_prod_a_a_prod_prod$ 0)
(declare-fun fst$a (A_b_prod$)A$)
(declare-fun snd$a (A_b_prod$)B$)
(declare-fun pair$a (A$ B$ )A_b_prod$)
(declare-fun fst$b (A_a_a_prod_prod$)A$)
(declare-fun snd$b (A_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$b (A$ A_a_prod$ )A_a_a_prod_prod$)
(declare-fun fst$c (B_a_prod$)B$)
(declare-fun snd$c (B_a_prod$)A$)
(declare-fun pair$c (B$ A$ )B_a_prod$)
(declare-fun fst$d (B_b_prod$)B$)
(declare-fun snd$d (B_b_prod$)B$)
(declare-fun pair$d (B$ B$ )B_b_prod$)
(declare-fun fst$e (B_a_a_prod_prod$)B$)
(declare-fun snd$e (B_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$e (B$ A_a_prod$ )B_a_a_prod_prod$)
(declare-fun fst$f (A_a_prod_a_prod$)A_a_prod$)
(declare-fun snd$f (A_a_prod_a_prod$)A$)
(declare-fun pair$f (A_a_prod$ A$ )A_a_prod_a_prod$)
(declare-fun fst$g (A_a_prod_b_prod$)A_a_prod$)
(declare-fun snd$g (A_a_prod_b_prod$)B$)
(declare-fun pair$g (A_a_prod$ B$ )A_a_prod_b_prod$)
(declare-fun fst$h (A_a_prod_a_a_prod_prod$)A_a_prod$)
(declare-fun snd$h (A_a_prod_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$h (A_a_prod$ A_a_prod$ )A_a_prod_a_a_prod_prod$)
(declare-fun b$ ()B$ )
(declare-fun comp$ (B_a_fun$ )B_b_fun_b_a_fun_fun$ )
(declare-fun shd$c ()B_a_fun$ )
(declare-fun smap$ (A_b_fun$ A_stream$ )B_stream$ )
(declare-fun stl$c ()B_b_fun$ )
(declare-fun swap$ (B$ )B_b_b_fun_b_b_fun_fun_fun$ )
(declare-fun comp$a (B_b_fun$ )B_b_fun_b_b_fun_fun$ )
(declare-fun comp$b (A_a_fun$ )B_a_fun_b_a_fun_fun$ )
(declare-fun comp$c (B_a_a_prod_fun$ )B_b_fun_b_a_a_prod_fun_fun$ )
(declare-fun comp$d (A_b_fun$ )B_a_fun_b_b_fun_fun$ )
(declare-fun comp$e (B_a_fun$ )A_b_fun_a_a_fun_fun$ )
(declare-fun comp$f (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun comp$g (A_a_a_prod_fun$ )B_a_fun_b_a_a_prod_fun_fun$ )
(declare-fun comp$h (A_a_prod_a_fun$ )B_a_a_prod_fun_b_a_fun_fun$ )
(declare-fun comp$i (A_a_prod_b_fun$ )B_a_a_prod_fun_b_b_fun_fun$ )
(declare-fun comp$j (A_b_fun$ )A_a_fun_a_b_fun_fun$ )
(declare-fun comp$k (B_b_fun$ )A_b_fun_a_b_fun_fun$ )
(declare-fun comp$l (B_a_b_prod_fun$ B_b_fun$ )B_a_b_prod_fun$ )
(declare-fun comp$m (B_a_a_a_prod_prod_fun$ B_b_fun$ )B_a_a_a_prod_prod_fun$ )
(declare-fun comp$n (B_b_a_prod_fun$ B_b_fun$ )B_b_a_prod_fun$ )
(declare-fun comp$o (B_b_b_prod_fun$ B_b_fun$ )B_b_b_prod_fun$ )
(declare-fun comp$p (B_b_a_a_prod_prod_fun$ B_b_fun$ )B_b_a_a_prod_prod_fun$ )
(declare-fun comp$q (B_a_a_prod_a_prod_fun$ B_b_fun$ )B_a_a_prod_a_prod_fun$ )
(declare-fun comp$r (B_a_a_prod_b_prod_fun$ B_b_fun$ )B_a_a_prod_b_prod_fun$ )
(declare-fun comp$s (B_a_a_prod_a_a_prod_prod_fun$ B_b_fun$ )B_a_a_prod_a_a_prod_prod_fun$ )
(declare-fun smap$a (B_a_a_prod_fun$ B_stream$ )A_a_prod_stream$ )
(declare-fun smap$b (B_b_fun$ B_stream$ )B_stream$ )
(declare-fun smap$c (B_a_fun$ B_stream$ )A_stream$ )
(declare-fun smap$d (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun swap$a (B$ )B_b_a_fun_b_a_fun_fun_fun$ )
(declare-fun convol$ (B_a_fun$ B_b_fun$ )B_a_b_prod_fun$ )
(declare-fun convol$a (B_a_fun$ B_a_a_prod_fun$ )B_a_a_a_prod_prod_fun$ )
(declare-fun convol$b (B_b_fun$ B_a_fun$ )B_b_a_prod_fun$ )
(declare-fun convol$c (B_b_fun$ B_b_fun$ )B_b_b_prod_fun$ )
(declare-fun convol$d (B_b_fun$ B_a_a_prod_fun$ )B_b_a_a_prod_prod_fun$ )
(declare-fun convol$e (B_a_a_prod_fun$ B_a_fun$ )B_a_a_prod_a_prod_fun$ )
(declare-fun convol$f (B_a_a_prod_fun$ B_b_fun$ )B_a_a_prod_b_prod_fun$ )
(declare-fun convol$g (B_a_a_prod_fun$ B_a_a_prod_fun$ )B_a_a_prod_a_a_prod_prod_fun$ )
(declare-fun convol$h (A_a_fun$ )A_a_fun_a_a_a_prod_fun_fun$ )
(declare-fun convol$i (B_a_fun$ )B_a_fun_b_a_a_prod_fun_fun$ )
(declare-fun fun_app$ (B_b_fun$ B$ )B$ )
(declare-fun fun_upd$ (B_b_fun$ )B_b_b_b_fun_fun_fun$ )
(declare-fun fun_app$a (B_b_fun_b_a_fun_fun$ B_b_fun$ )B_a_fun$ )
(declare-fun fun_app$b (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun$ )
(declare-fun fun_app$c (B_a_fun$ B$ )A$ )
(declare-fun fun_app$d (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$e (A_a_fun$ A$ )A$ )
(declare-fun fun_app$f (B_a_a_prod_fun$ B$ )A_a_prod$ )
(declare-fun fun_app$g (B_b_fun_b_a_a_prod_fun_fun$ B_b_fun$ )B_a_a_prod_fun$ )
(declare-fun fun_app$h (B_a_fun_b_b_fun_fun$ B_a_fun$ )B_b_fun$ )
(declare-fun fun_app$i (A_b_fun_a_a_fun_fun$ A_b_fun$ )A_a_fun$ )
(declare-fun fun_app$j (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$k (B_a_fun_b_a_a_prod_fun_fun$ B_a_fun$ )B_a_a_prod_fun$ )
(declare-fun fun_app$l (B_a_a_prod_fun_b_a_fun_fun$ B_a_a_prod_fun$ )B_a_fun$ )
(declare-fun fun_app$m (B_a_a_prod_fun_b_b_fun_fun$ B_a_a_prod_fun$ )B_b_fun$ )
(declare-fun fun_app$n (A_a_fun_a_b_fun_fun$ A_a_fun$ )A_b_fun$ )
(declare-fun fun_app$o (A_b_fun_a_b_fun_fun$ A_b_fun$ )A_b_fun$ )
(declare-fun fun_app$p (A_b_fun$ A$ )B$ )
(declare-fun fun_app$q (A_a_fun_a_a_a_prod_fun_fun$ A_a_fun$ )A_a_a_prod_fun$ )
(declare-fun fun_app$r (B_b_b_fun_fun$ B$ )B_b_fun$ )
(declare-fun fun_app$s (B_b_b_b_fun_fun_fun$ B$ )B_b_b_fun_fun$ )
(declare-fun fun_app$t (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$u (B_a_b_a_fun_fun_fun$ B$ )A_b_a_fun_fun$ )
(declare-fun fun_app$v (B_b_b_fun_b_b_fun_fun_fun$ B$ )B_b_fun_b_b_fun_fun$ )
(declare-fun fun_app$w (B_b_a_fun_b_a_fun_fun_fun$ B$ )B_a_fun_b_a_fun_fun$ )
(declare-fun fun_upd$a (B_a_fun$ )B_a_b_a_fun_fun_fun$ )
(declare-fun unfold_stream$ (B_a_fun$ B_b_fun$ B$ )A_stream$ )
(declare-fun unfold_stream$a (B_b_fun$ B_b_fun$ B$ )B_stream$ )
(declare-fun unfold_stream$b (B_a_a_prod_fun$ B_b_fun$ B$ )A_a_prod_stream$ )
(assert (! (not (= (unfold_stream$ shd$c stl$c (fun_app$ stl$c b$ ))(unfold_stream$ (fun_app$a (comp$ shd$c )stl$c )stl$c b$ ))):named a0 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$ (fun_app$b (comp$a ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (comp$a ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$c (fun_app$d (comp$b ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$d (comp$b ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$f (fun_app$g (comp$c ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$g (comp$c ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$c (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$a (comp$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (fun_app$d (comp$b ?v0 )(fun_app$a (comp$ ?v1 )?v2 ))(fun_app$a (comp$ (fun_app$d (comp$b ?v0 )?v1 ))?v2 ))):named a5 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$a (comp$ ?v0 )(fun_app$b (comp$a ?v1 )?v2 ))(fun_app$a (comp$ (fun_app$a (comp$ ?v0 )?v1 ))?v2 ))):named a6 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (fun_app$h (comp$d ?v0 )(fun_app$a (comp$ ?v1 )?v2 ))(fun_app$b (comp$a (fun_app$h (comp$d ?v0 )?v1 ))?v2 ))):named a7 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 B_a_fun$ ))(= (fun_app$a (comp$ ?v0 )(fun_app$h (comp$d ?v1 )?v2 ))(fun_app$d (comp$b (fun_app$i (comp$e ?v0 )?v1 ))?v2 ))):named a8 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$b (comp$a ?v0 )(fun_app$b (comp$a ?v1 )?v2 ))(fun_app$b (comp$a (fun_app$b (comp$a ?v0 )?v1 ))?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 B_a_fun$ ))(= (fun_app$d (comp$b ?v0 )(fun_app$d (comp$b ?v1 )?v2 ))(fun_app$d (comp$b (fun_app$j (comp$f ?v0 )?v1 ))?v2 ))):named a10 ))
(assert (! (forall ((?v0 A_a_a_prod_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (fun_app$k (comp$g ?v0 )(fun_app$a (comp$ ?v1 )?v2 ))(fun_app$g (comp$c (fun_app$k (comp$g ?v0 )?v1 ))?v2 ))):named a11 ))
(assert (! (forall ((?v0 A_a_prod_a_fun$ )(?v1 B_a_a_prod_fun$ )(?v2 B_b_fun$ ))(= (fun_app$l (comp$h ?v0 )(fun_app$g (comp$c ?v1 )?v2 ))(fun_app$a (comp$ (fun_app$l (comp$h ?v0 )?v1 ))?v2 ))):named a12 ))
(assert (! (forall ((?v0 A_a_prod_b_fun$ )(?v1 B_a_a_prod_fun$ )(?v2 B_b_fun$ ))(= (fun_app$m (comp$i ?v0 )(fun_app$g (comp$c ?v1 )?v2 ))(fun_app$b (comp$a (fun_app$m (comp$i ?v0 )?v1 ))?v2 ))):named a13 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$g (comp$c ?v0 )(fun_app$b (comp$a ?v1 )?v2 ))(fun_app$g (comp$c (fun_app$g (comp$c ?v0 )?v1 ))?v2 ))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (fun_app$a (comp$ (fun_app$d (comp$b ?v0 )?v1 ))?v2 )(fun_app$d (comp$b ?v0 )(fun_app$a (comp$ ?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$a (comp$ (fun_app$a (comp$ ?v0 )?v1 ))?v2 )(fun_app$a (comp$ ?v0 )(fun_app$b (comp$a ?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (fun_app$b (comp$a (fun_app$h (comp$d ?v0 )?v1 ))?v2 )(fun_app$h (comp$d ?v0 )(fun_app$a (comp$ ?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$b (comp$a (fun_app$b (comp$a ?v0 )?v1 ))?v2 )(fun_app$b (comp$a ?v0 )(fun_app$b (comp$a ?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 B_a_fun$ ))(= (fun_app$d (comp$b (fun_app$i (comp$e ?v0 )?v1 ))?v2 )(fun_app$a (comp$ ?v0 )(fun_app$h (comp$d ?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 B_a_fun$ ))(= (fun_app$d (comp$b (fun_app$j (comp$f ?v0 )?v1 ))?v2 )(fun_app$d (comp$b ?v0 )(fun_app$d (comp$b ?v1 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_a_prod_a_fun$ )(?v1 B_a_a_prod_fun$ )(?v2 B_b_fun$ ))(= (fun_app$a (comp$ (fun_app$l (comp$h ?v0 )?v1 ))?v2 )(fun_app$l (comp$h ?v0 )(fun_app$g (comp$c ?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_a_prod_b_fun$ )(?v1 B_a_a_prod_fun$ )(?v2 B_b_fun$ ))(= (fun_app$b (comp$a (fun_app$m (comp$i ?v0 )?v1 ))?v2 )(fun_app$m (comp$i ?v0 )(fun_app$g (comp$c ?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_a_a_prod_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (fun_app$g (comp$c (fun_app$k (comp$g ?v0 )?v1 ))?v2 )(fun_app$k (comp$g ?v0 )(fun_app$a (comp$ ?v1 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$g (comp$c (fun_app$g (comp$c ?v0 )?v1 ))?v2 )(fun_app$g (comp$c ?v0 )(fun_app$b (comp$a ?v1 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$ (fun_app$b (comp$a ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (comp$a ?v0 )?v1 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$c (fun_app$d (comp$b ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$d (comp$b ?v0 )?v1 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$f (fun_app$g (comp$c ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$g (comp$c ?v0 )?v1 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$c (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$a (comp$ ?v0 )?v1 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$d (comp$b ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$c ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$c ?v3 ?v4 ))))false ))false )):named a29 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$b (comp$a ?v0 )?v1 )(fun_app$b (comp$a ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$ ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$ ?v3 ?v4 ))))false ))false )):named a30 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$d (comp$b ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$e ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$ ?v3 ?v4 ))))false ))false )):named a31 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (and (= (fun_app$d (comp$b ?v0 )?v1 )(fun_app$d (comp$b ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$e ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$c ?v3 ?v4 ))))false ))false )):named a32 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_b_fun$ )(?v2 B_a_a_prod_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$g (comp$c ?v0 )?v1 )(fun_app$g (comp$c ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$f ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$ ?v3 ?v4 ))))false ))false )):named a33 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(=> (forall ((?v4 B$ ))(= (fun_app$c ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$ ?v3 ?v4 ))))false ))false )):named a34 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$b (comp$a ?v0 )?v1 )(fun_app$b (comp$a ?v2 )?v3 ))(= (fun_app$a (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$a (comp$ (fun_app$a (comp$ ?v4 )?v0 ))?v1 )(fun_app$a (comp$ ?v5 )?v3 )))):named a35 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 A_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$d (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$a (comp$ (fun_app$d (comp$b ?v4 )?v0 ))?v1 )(fun_app$a (comp$ ?v5 )?v3 )))):named a36 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$h (comp$d ?v0 )?v1 )(fun_app$b (comp$a ?v2 )?v3 ))(= (fun_app$a (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$d (comp$b (fun_app$i (comp$e ?v4 )?v0 ))?v1 )(fun_app$a (comp$ ?v5 )?v3 )))):named a37 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 A_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$h (comp$d ?v4 )?v2 )?v5 ))(= (fun_app$b (comp$a (fun_app$h (comp$d ?v4 )?v0 ))?v1 )(fun_app$b (comp$a ?v5 )?v3 )))):named a38 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 A_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$d (comp$b ?v2 )?v3 ))(= (fun_app$j (comp$f ?v4 )?v2 )?v5 ))(= (fun_app$a (comp$ (fun_app$d (comp$b ?v4 )?v0 ))?v1 )(fun_app$d (comp$b ?v5 )?v3 )))):named a39 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 A_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$d (comp$b ?v2 )?v3 ))(= (fun_app$n (comp$j ?v4 )?v2 )?v5 ))(= (fun_app$b (comp$a (fun_app$h (comp$d ?v4 )?v0 ))?v1 )(fun_app$h (comp$d ?v5 )?v3 )))):named a40 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ )(?v3 B_a_fun$ )(?v4 B_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$b (comp$a ?v0 )?v1 )(fun_app$h (comp$d ?v2 )?v3 ))(= (fun_app$i (comp$e ?v4 )?v2 )?v5 ))(= (fun_app$a (comp$ (fun_app$a (comp$ ?v4 )?v0 ))?v1 )(fun_app$d (comp$b ?v5 )?v3 )))):named a41 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$b (comp$a ?v0 )?v1 )(fun_app$b (comp$a ?v2 )?v3 ))(= (fun_app$b (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$b (comp$a (fun_app$b (comp$a ?v4 )?v0 ))?v1 )(fun_app$b (comp$a ?v5 )?v3 )))):named a42 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 A_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$d (comp$b ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$h (comp$d ?v4 )?v2 )?v5 ))(= (fun_app$h (comp$d (fun_app$n (comp$j ?v4 )?v0 ))?v1 )(fun_app$b (comp$a ?v5 )?v3 )))):named a43 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 A_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$d (comp$b ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$d (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$d (comp$b (fun_app$j (comp$f ?v4 )?v0 ))?v1 )(fun_app$a (comp$ ?v5 )?v3 )))):named a44 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$d (comp$b ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$b (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$d (comp$b ?v0 )(fun_app$a (comp$ ?v1 )?v4 ))(fun_app$a (comp$ ?v2 )?v5 )))):named a45 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 B_b_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$d (comp$b ?v2 )?v3 ))(= (fun_app$a (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$a (comp$ ?v0 )(fun_app$b (comp$a ?v1 )?v4 ))(fun_app$d (comp$b ?v2 )?v5 )))):named a46 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$b (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$a (comp$ ?v0 )(fun_app$b (comp$a ?v1 )?v4 ))(fun_app$a (comp$ ?v2 )?v5 )))):named a47 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 B_a_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$n (comp$j ?v0 )?v1 )(fun_app$o (comp$k ?v2 )?v3 ))(= (fun_app$h (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$h (comp$d ?v0 )(fun_app$d (comp$b ?v1 )?v4 ))(fun_app$b (comp$a ?v2 )?v5 )))):named a48 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 B_a_fun$ )(?v3 A_b_fun$ )(?v4 B_a_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$j (comp$f ?v0 )?v1 )(fun_app$i (comp$e ?v2 )?v3 ))(= (fun_app$h (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$d (comp$b ?v0 )(fun_app$d (comp$b ?v1 )?v4 ))(fun_app$a (comp$ ?v2 )?v5 )))):named a49 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 B_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$i (comp$e ?v0 )?v1 )(fun_app$j (comp$f ?v2 )?v3 ))(= (fun_app$d (comp$b ?v3 )?v4 )?v5 ))(= (fun_app$a (comp$ ?v0 )(fun_app$h (comp$d ?v1 )?v4 ))(fun_app$d (comp$b ?v2 )?v5 )))):named a50 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ )(?v4 B_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$o (comp$k ?v0 )?v1 )(fun_app$n (comp$j ?v2 )?v3 ))(= (fun_app$d (comp$b ?v3 )?v4 )?v5 ))(= (fun_app$b (comp$a ?v0 )(fun_app$h (comp$d ?v1 )?v4 ))(fun_app$h (comp$d ?v2 )?v5 )))):named a51 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 B_a_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$j (comp$f ?v0 )?v1 )(fun_app$j (comp$f ?v2 )?v3 ))(= (fun_app$d (comp$b ?v3 )?v4 )?v5 ))(= (fun_app$d (comp$b ?v0 )(fun_app$d (comp$b ?v1 )?v4 ))(fun_app$d (comp$b ?v2 )?v5 )))):named a52 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$h (comp$d ?v0 )?v1 )(fun_app$b (comp$a ?v2 )?v3 ))(= (fun_app$b (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$h (comp$d ?v0 )(fun_app$a (comp$ ?v1 )?v4 ))(fun_app$b (comp$a ?v2 )?v5 )))):named a53 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ )(?v3 B_a_fun$ )(?v4 B_b_fun$ )(?v5 B_a_fun$ ))(=> (and (= (fun_app$b (comp$a ?v0 )?v1 )(fun_app$h (comp$d ?v2 )?v3 ))(= (fun_app$a (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$b (comp$a ?v0 )(fun_app$b (comp$a ?v1 )?v4 ))(fun_app$h (comp$d ?v2 )?v5 )))):named a54 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 B$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$d (comp$b ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$c ?v3 ?v4 ))))):named a55 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$b (comp$a ?v0 )?v1 )(fun_app$b (comp$a ?v2 )?v3 ))(= (fun_app$ ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$ ?v2 (fun_app$ ?v3 ?v4 ))))):named a56 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$d (comp$b ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$e ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$ ?v3 ?v4 ))))):named a57 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 B$ ))(=> (= (fun_app$d (comp$b ?v0 )?v1 )(fun_app$d (comp$b ?v2 )?v3 ))(= (fun_app$e ?v0 (fun_app$c ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$c ?v3 ?v4 ))))):named a58 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_b_fun$ )(?v2 B_a_a_prod_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$g (comp$c ?v0 )?v1 )(fun_app$g (comp$c ?v2 )?v3 ))(= (fun_app$f ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$ ?v3 ?v4 ))))):named a59 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )(fun_app$a (comp$ ?v2 )?v3 ))(= (fun_app$c ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$ ?v3 ?v4 ))))):named a60 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$b (comp$a ?v0 )?v1 )?v2 )(= (fun_app$a (comp$ (fun_app$a (comp$ ?v3 )?v0 ))?v1 )(fun_app$a (comp$ ?v3 )?v2 )))):named a61 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )?v2 )(= (fun_app$a (comp$ (fun_app$d (comp$b ?v3 )?v0 ))?v1 )(fun_app$d (comp$b ?v3 )?v2 )))):named a62 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$h (comp$d ?v0 )?v1 )?v2 )(= (fun_app$d (comp$b (fun_app$i (comp$e ?v3 )?v0 ))?v1 )(fun_app$a (comp$ ?v3 )?v2 )))):named a63 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 A_b_fun$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )?v2 )(= (fun_app$b (comp$a (fun_app$h (comp$d ?v3 )?v0 ))?v1 )(fun_app$h (comp$d ?v3 )?v2 )))):named a64 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$b (comp$a ?v0 )?v1 )?v2 )(= (fun_app$b (comp$a (fun_app$b (comp$a ?v3 )?v0 ))?v1 )(fun_app$b (comp$a ?v3 )?v2 )))):named a65 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$d (comp$b ?v0 )?v1 )?v2 )(= (fun_app$d (comp$b (fun_app$j (comp$f ?v3 )?v0 ))?v1 )(fun_app$d (comp$b ?v3 )?v2 )))):named a66 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 A_a_a_prod_fun$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )?v2 )(= (fun_app$g (comp$c (fun_app$k (comp$g ?v3 )?v0 ))?v1 )(fun_app$k (comp$g ?v3 )?v2 )))):named a67 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_a_a_prod_fun$ ))(=> (= (fun_app$b (comp$a ?v0 )?v1 )?v2 )(= (fun_app$g (comp$c (fun_app$g (comp$c ?v3 )?v0 ))?v1 )(fun_app$g (comp$c ?v3 )?v2 )))):named a68 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_b_fun$ )(?v2 B_a_a_prod_fun$ )(?v3 A_a_prod_a_fun$ ))(=> (= (fun_app$g (comp$c ?v0 )?v1 )?v2 )(= (fun_app$a (comp$ (fun_app$l (comp$h ?v3 )?v0 ))?v1 )(fun_app$l (comp$h ?v3 )?v2 )))):named a69 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_b_fun$ )(?v2 B_a_a_prod_fun$ )(?v3 A_a_prod_b_fun$ ))(=> (= (fun_app$g (comp$c ?v0 )?v1 )?v2 )(= (fun_app$b (comp$a (fun_app$m (comp$i ?v3 )?v0 ))?v1 )(fun_app$m (comp$i ?v3 )?v2 )))):named a70 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$d (comp$b ?v0 )?v1 )?v2 )(= (fun_app$d (comp$b ?v0 )(fun_app$a (comp$ ?v1 )?v3 ))(fun_app$a (comp$ ?v2 )?v3 )))):named a71 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )?v2 )(= (fun_app$a (comp$ ?v0 )(fun_app$b (comp$a ?v1 )?v3 ))(fun_app$a (comp$ ?v2 )?v3 )))):named a72 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$h (comp$d ?v0 )?v1 )?v2 )(= (fun_app$h (comp$d ?v0 )(fun_app$a (comp$ ?v1 )?v3 ))(fun_app$b (comp$a ?v2 )?v3 )))):named a73 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$i (comp$e ?v0 )?v1 )?v2 )(= (fun_app$a (comp$ ?v0 )(fun_app$h (comp$d ?v1 )?v3 ))(fun_app$d (comp$b ?v2 )?v3 )))):named a74 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$j (comp$f ?v0 )?v1 )?v2 )(= (fun_app$d (comp$b ?v0 )(fun_app$d (comp$b ?v1 )?v3 ))(fun_app$d (comp$b ?v2 )?v3 )))):named a75 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$b (comp$a ?v0 )?v1 )?v2 )(= (fun_app$b (comp$a ?v0 )(fun_app$b (comp$a ?v1 )?v3 ))(fun_app$b (comp$a ?v2 )?v3 )))):named a76 ))
(assert (! (forall ((?v0 A_a_a_prod_fun$ )(?v1 B_a_fun$ )(?v2 B_a_a_prod_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$k (comp$g ?v0 )?v1 )?v2 )(= (fun_app$k (comp$g ?v0 )(fun_app$a (comp$ ?v1 )?v3 ))(fun_app$g (comp$c ?v2 )?v3 )))):named a77 ))
(assert (! (forall ((?v0 A_a_prod_a_fun$ )(?v1 B_a_a_prod_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$l (comp$h ?v0 )?v1 )?v2 )(= (fun_app$l (comp$h ?v0 )(fun_app$g (comp$c ?v1 )?v3 ))(fun_app$a (comp$ ?v2 )?v3 )))):named a78 ))
(assert (! (forall ((?v0 A_a_prod_b_fun$ )(?v1 B_a_a_prod_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$m (comp$i ?v0 )?v1 )?v2 )(= (fun_app$m (comp$i ?v0 )(fun_app$g (comp$c ?v1 )?v3 ))(fun_app$b (comp$a ?v2 )?v3 )))):named a79 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_b_fun$ )(?v2 B_a_a_prod_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$g (comp$c ?v0 )?v1 )?v2 )(= (fun_app$g (comp$c ?v0 )(fun_app$b (comp$a ?v1 )?v3 ))(fun_app$g (comp$c ?v2 )?v3 )))):named a80 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B$ ))(=> (= (fun_app$b (comp$a ?v0 )?v1 )?v2 )(= (fun_app$ ?v0 (fun_app$ ?v1 ?v3 ))(fun_app$ ?v2 ?v3 )))):named a81 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B$ ))(=> (= (fun_app$d (comp$b ?v0 )?v1 )?v2 )(= (fun_app$e ?v0 (fun_app$c ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a82 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_b_fun$ )(?v2 B_a_a_prod_fun$ )(?v3 B$ ))(=> (= (fun_app$g (comp$c ?v0 )?v1 )?v2 )(= (fun_app$f ?v0 (fun_app$ ?v1 ?v3 ))(fun_app$f ?v2 ?v3 )))):named a83 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B$ ))(=> (= (fun_app$a (comp$ ?v0 )?v1 )?v2 )(= (fun_app$c ?v0 (fun_app$ ?v1 ?v3 ))(fun_app$c ?v2 ?v3 )))):named a84 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 A_b_fun$ )(?v4 B_a_fun$ )(?v5 B_a_fun$ ))(=> (= (fun_app$ ?v0 (fun_app$ ?v1 ?v2 ))(fun_app$p ?v3 (fun_app$c ?v4 ?v2 )))(= (fun_app$c (fun_app$a (comp$ (fun_app$a (comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$c (fun_app$d (comp$b (fun_app$i (comp$e ?v5 )?v3 ))?v4 )?v2 )))):named a85 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B_a_fun$ )(?v4 B_b_fun$ )(?v5 A_a_fun$ ))(=> (= (fun_app$c ?v0 (fun_app$ ?v1 ?v2 ))(fun_app$c ?v3 (fun_app$ ?v4 ?v2 )))(= (fun_app$c (fun_app$a (comp$ (fun_app$d (comp$b ?v5 )?v0 ))?v1 )?v2 )(fun_app$c (fun_app$a (comp$ (fun_app$d (comp$b ?v5 )?v3 ))?v4 )?v2 )))):named a86 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 A_a_fun$ )(?v4 B_a_fun$ )(?v5 A_a_fun$ ))(=> (= (fun_app$c ?v0 (fun_app$ ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$c ?v4 ?v2 )))(= (fun_app$c (fun_app$a (comp$ (fun_app$d (comp$b ?v5 )?v0 ))?v1 )?v2 )(fun_app$c (fun_app$d (comp$b (fun_app$j (comp$f ?v5 )?v3 ))?v4 )?v2 )))):named a87 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (= (fun_app$ ?v0 (fun_app$ ?v1 ?v2 ))(fun_app$ ?v3 (fun_app$ ?v4 ?v2 )))(= (fun_app$ (fun_app$b (comp$a (fun_app$b (comp$a ?v5 )?v0 ))?v1 )?v2 )(fun_app$ (fun_app$b (comp$a (fun_app$b (comp$a ?v5 )?v3 ))?v4 )?v2 )))):named a88 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ )(?v5 B_a_fun$ ))(=> (= (fun_app$p ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$ ?v3 (fun_app$ ?v4 ?v2 )))(= (fun_app$c (fun_app$d (comp$b (fun_app$i (comp$e ?v5 )?v0 ))?v1 )?v2 )(fun_app$c (fun_app$a (comp$ (fun_app$a (comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a89 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ )(?v3 B_a_fun$ )(?v4 B_b_fun$ )(?v5 A_a_fun$ ))(=> (= (fun_app$e ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$c ?v3 (fun_app$ ?v4 ?v2 )))(= (fun_app$c (fun_app$d (comp$b (fun_app$j (comp$f ?v5 )?v0 ))?v1 )?v2 )(fun_app$c (fun_app$a (comp$ (fun_app$d (comp$b ?v5 )?v3 ))?v4 )?v2 )))):named a90 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ )(?v5 B_a_a_prod_fun$ ))(=> (= (fun_app$ ?v0 (fun_app$ ?v1 ?v2 ))(fun_app$ ?v3 (fun_app$ ?v4 ?v2 )))(= (fun_app$f (fun_app$g (comp$c (fun_app$g (comp$c ?v5 )?v0 ))?v1 )?v2 )(fun_app$f (fun_app$g (comp$c (fun_app$g (comp$c ?v5 )?v3 ))?v4 )?v2 )))):named a91 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ )(?v5 B_a_fun$ ))(=> (= (fun_app$ ?v0 (fun_app$ ?v1 ?v2 ))(fun_app$ ?v3 (fun_app$ ?v4 ?v2 )))(= (fun_app$c (fun_app$a (comp$ (fun_app$a (comp$ ?v5 )?v0 ))?v1 )?v2 )(fun_app$c (fun_app$a (comp$ (fun_app$a (comp$ ?v5 )?v3 ))?v4 )?v2 )))):named a92 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 A_a_fun$ )(?v4 B_a_fun$ )(?v5 B$ ))(=> (= (fun_app$c ?v0 (fun_app$ ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$c ?v4 ?v5 )))(= (fun_app$c (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$d (comp$b ?v3 )?v4 )?v5 )))):named a93 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ )(?v5 B$ ))(=> (= (fun_app$ ?v0 (fun_app$ ?v1 ?v2 ))(fun_app$ ?v3 (fun_app$ ?v4 ?v5 )))(= (fun_app$ (fun_app$b (comp$a ?v0 )?v1 )?v2 )(fun_app$ (fun_app$b (comp$a ?v3 )?v4 )?v5 )))):named a94 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ )(?v3 B_a_fun$ )(?v4 B_b_fun$ )(?v5 B$ ))(=> (= (fun_app$e ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$c ?v3 (fun_app$ ?v4 ?v5 )))(= (fun_app$c (fun_app$d (comp$b ?v0 )?v1 )?v2 )(fun_app$c (fun_app$a (comp$ ?v3 )?v4 )?v5 )))):named a95 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ )(?v3 A_a_fun$ )(?v4 B_a_fun$ )(?v5 B$ ))(=> (= (fun_app$e ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$c ?v4 ?v5 )))(= (fun_app$c (fun_app$d (comp$b ?v0 )?v1 )?v2 )(fun_app$c (fun_app$d (comp$b ?v3 )?v4 )?v5 )))):named a96 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B_a_a_prod_fun$ )(?v4 B_b_fun$ )(?v5 B$ ))(=> (= (fun_app$f ?v0 (fun_app$ ?v1 ?v2 ))(fun_app$f ?v3 (fun_app$ ?v4 ?v5 )))(= (fun_app$f (fun_app$g (comp$c ?v0 )?v1 )?v2 )(fun_app$f (fun_app$g (comp$c ?v3 )?v4 )?v5 )))):named a97 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B_a_fun$ )(?v4 B_b_fun$ )(?v5 B$ ))(=> (= (fun_app$c ?v0 (fun_app$ ?v1 ?v2 ))(fun_app$c ?v3 (fun_app$ ?v4 ?v5 )))(= (fun_app$c (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$a (comp$ ?v3 )?v4 )?v5 )))):named a98 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 A_a_fun$ )(?v4 B_a_fun$ ))(=> (= (fun_app$c ?v0 (fun_app$ ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$c ?v4 ?v2 )))(= (fun_app$c (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$d (comp$b ?v3 )?v4 )?v2 )))):named a99 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B_b_fun$ )(?v4 B_b_fun$ ))(=> (= (fun_app$ ?v0 (fun_app$ ?v1 ?v2 ))(fun_app$ ?v3 (fun_app$ ?v4 ?v2 )))(= (fun_app$ (fun_app$b (comp$a ?v0 )?v1 )?v2 )(fun_app$ (fun_app$b (comp$a ?v3 )?v4 )?v2 )))):named a100 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ )(?v3 B_a_fun$ )(?v4 B_b_fun$ ))(=> (= (fun_app$e ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$c ?v3 (fun_app$ ?v4 ?v2 )))(= (fun_app$c (fun_app$d (comp$b ?v0 )?v1 )?v2 )(fun_app$c (fun_app$a (comp$ ?v3 )?v4 )?v2 )))):named a101 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ )(?v3 A_a_fun$ )(?v4 B_a_fun$ ))(=> (= (fun_app$e ?v0 (fun_app$c ?v1 ?v2 ))(fun_app$e ?v3 (fun_app$c ?v4 ?v2 )))(= (fun_app$c (fun_app$d (comp$b ?v0 )?v1 )?v2 )(fun_app$c (fun_app$d (comp$b ?v3 )?v4 )?v2 )))):named a102 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B_a_a_prod_fun$ )(?v4 B_b_fun$ ))(=> (= (fun_app$f ?v0 (fun_app$ ?v1 ?v2 ))(fun_app$f ?v3 (fun_app$ ?v4 ?v2 )))(= (fun_app$f (fun_app$g (comp$c ?v0 )?v1 )?v2 )(fun_app$f (fun_app$g (comp$c ?v3 )?v4 )?v2 )))):named a103 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B_a_fun$ )(?v4 B_b_fun$ ))(=> (= (fun_app$c ?v0 (fun_app$ ?v1 ?v2 ))(fun_app$c ?v3 (fun_app$ ?v4 ?v2 )))(= (fun_app$c (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$a (comp$ ?v3 )?v4 )?v2 )))):named a104 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (smap$ ?v0 (unfold_stream$ ?v1 ?v2 ?v3 ))(unfold_stream$a (fun_app$h (comp$d ?v0 )?v1 )?v2 ?v3 ))):named a105 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (smap$a ?v0 (unfold_stream$a ?v1 ?v2 ?v3 ))(unfold_stream$b (fun_app$g (comp$c ?v0 )?v1 )?v2 ?v3 ))):named a106 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (smap$b ?v0 (unfold_stream$a ?v1 ?v2 ?v3 ))(unfold_stream$a (fun_app$b (comp$a ?v0 )?v1 )?v2 ?v3 ))):named a107 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (smap$c ?v0 (unfold_stream$a ?v1 ?v2 ?v3 ))(unfold_stream$ (fun_app$a (comp$ ?v0 )?v1 )?v2 ?v3 ))):named a108 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (smap$d ?v0 (unfold_stream$ ?v1 ?v2 ?v3 ))(unfold_stream$ (fun_app$d (comp$b ?v0 )?v1 )?v2 ?v3 ))):named a109 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (comp$l (convol$ ?v0 ?v1 )?v2 )(convol$ (fun_app$a (comp$ ?v0 )?v2 )(fun_app$b (comp$a ?v1 )?v2 )))):named a110 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_a_prod_fun$ )(?v2 B_b_fun$ ))(= (comp$m (convol$a ?v0 ?v1 )?v2 )(convol$a (fun_app$a (comp$ ?v0 )?v2 )(fun_app$g (comp$c ?v1 )?v2 )))):named a111 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (comp$n (convol$b ?v0 ?v1 )?v2 )(convol$b (fun_app$b (comp$a ?v0 )?v2 )(fun_app$a (comp$ ?v1 )?v2 )))):named a112 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (comp$o (convol$c ?v0 ?v1 )?v2 )(convol$c (fun_app$b (comp$a ?v0 )?v2 )(fun_app$b (comp$a ?v1 )?v2 )))):named a113 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_a_a_prod_fun$ )(?v2 B_b_fun$ ))(= (comp$p (convol$d ?v0 ?v1 )?v2 )(convol$d (fun_app$b (comp$a ?v0 )?v2 )(fun_app$g (comp$c ?v1 )?v2 )))):named a114 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (comp$q (convol$e ?v0 ?v1 )?v2 )(convol$e (fun_app$g (comp$c ?v0 )?v2 )(fun_app$a (comp$ ?v1 )?v2 )))):named a115 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (comp$r (convol$f ?v0 ?v1 )?v2 )(convol$f (fun_app$g (comp$c ?v0 )?v2 )(fun_app$b (comp$a ?v1 )?v2 )))):named a116 ))
(assert (! (forall ((?v0 B_a_a_prod_fun$ )(?v1 B_a_a_prod_fun$ )(?v2 B_b_fun$ ))(= (comp$s (convol$g ?v0 ?v1 )?v2 )(convol$g (fun_app$g (comp$c ?v0 )?v2 )(fun_app$g (comp$c ?v1 )?v2 )))):named a117 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 B_a_fun$ ))(= (fun_app$k (comp$g (fun_app$q (convol$h ?v0 )?v1 ))?v2 )(fun_app$k (convol$i (fun_app$d (comp$b ?v0 )?v2 ))(fun_app$d (comp$b ?v1 )?v2 )))):named a118 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (fun_app$g (comp$c (fun_app$k (convol$i ?v0 )?v1 ))?v2 )(fun_app$k (convol$i (fun_app$a (comp$ ?v0 )?v2 ))(fun_app$a (comp$ ?v1 )?v2 )))):named a119 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (shd$ (unfold_stream$ ?v0 ?v1 ?v2 ))(fun_app$c ?v0 ?v2 ))):named a120 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (unfold_stream$ ?v0 ?v1 ?v2 )(sCons$ (fun_app$c ?v0 ?v2 )(unfold_stream$ ?v0 ?v1 (fun_app$ ?v1 ?v2 ))))):named a121 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B$ ))(= (fun_app$a (comp$ ?v0 )(fun_app$r (fun_app$s (fun_upd$ ?v1 )?v2 )?v3 ))(fun_app$t (fun_app$u (fun_upd$a (fun_app$a (comp$ ?v0 )?v1 ))?v2 )(fun_app$c ?v0 ?v3 )))):named a122 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B$ )(?v3 B_b_fun$ ))(= (fun_app$a (comp$ ?v0 )(fun_app$b (fun_app$v (swap$ ?v1 )?v2 )?v3 ))(fun_app$d (fun_app$w (swap$a ?v1 )?v2 )(fun_app$a (comp$ ?v0 )?v3 )))):named a123 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (stl$ (unfold_stream$ ?v0 ?v1 ?v2 ))(unfold_stream$ ?v0 ?v1 (fun_app$ ?v1 ?v2 )))):named a124 ))
(check-sat )
;(get-unsat-core )
