;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort A_stream_a_stream_fun_a_stream_a_fun_fun$ 0 )
(declare-sort A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun x$ ()B$ )
(declare-fun uu$ ()B_bool_fun$ )
(declare-fun uua$ ()A_llist_bool_fun$ )
(declare-fun uub$ ()A_stream_a_fun$ )
(declare-fun uuc$ ()A_stream_a_stream_fun$ )
(declare-fun comp$ (A_stream_a_fun$ )A_stream_a_stream_fun_a_stream_a_fun_fun$ )
(declare-fun shd$a ()B_a_fun$ )
(declare-fun stl$a ()B_b_fun$ )
(declare-fun comp$a (B_a_fun$ )B_b_fun_b_a_fun_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun collect$ (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun fun_app$b (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$c (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$d (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$e (A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ A_stream_a_stream_fun$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$f (B_a_fun$ B$ )A$ )
(declare-fun fun_app$g (B_b_fun$ B$ )B$ )
(declare-fun fun_app$h (A_stream_a_stream_fun_a_stream_a_fun_fun$ A_stream_a_stream_fun$ )A_stream_a_fun$ )
(declare-fun fun_app$i (B_b_fun_b_a_fun_fun$ B_b_fun$ )B_a_fun$ )
(declare-fun cr_stream$ (A_llist$ )A_stream_bool_fun$ )
(declare-fun unfold_llist$ (B_bool_fun$ B_a_fun$ B_b_fun$ B$ )A_llist$ )
(declare-fun unfold_stream$ (B_a_fun$ B_b_fun$ B$ )A_stream$ )
(declare-fun unfold_stream$a (A_stream_a_fun$ )A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ )
(declare-fun llist_of_stream$ (A_stream$ )A_llist$ )
(declare-fun stream_of_llist$ (A_llist$ )A_stream$ )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uua$ ?v0 )(not (lfinite$ ?v0 ))):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$a uuc$ ?v0 )(stl$ ?v0 )):pattern ((fun_app$a uuc$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$b uub$ ?v0 )(shd$ ?v0 )):pattern ((fun_app$b uub$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$c uu$ ?v0 )false ):pattern ((fun_app$c uu$ ?v0 )))):named a3 ))
(assert (! (not (= (llist_of_stream$ (unfold_stream$ shd$a stl$a x$ ))(unfold_llist$ uu$ shd$a stl$a x$ ))):named a4 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (= (llist_of_stream$ ?v0 )(llist_of_stream$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_stream$ ))(! (= (fun_app$d (cr_stream$ ?v0 )?v1 )(= ?v0 (llist_of_stream$ ?v1 ))):pattern ((fun_app$d (cr_stream$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (llist_of_stream$ ?v0 ))?v0 )):named a7 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (llist_of_stream$ ?v0 ))?v0 )):named a8 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream$ )(?v3 A$ )(?v4 A_stream$ ))(= (= (fun_app$a (fun_app$e (unfold_stream$a ?v0 )?v1 )?v2 )(sCons$ ?v3 ?v4 ))(and (= ?v3 (fun_app$b ?v0 ?v2 ))(= ?v4 (fun_app$a (fun_app$e (unfold_stream$a ?v0 )?v1 )(fun_app$a ?v1 ?v2 )))))):named a9 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 A$ )(?v4 A_stream$ ))(= (= (unfold_stream$ ?v0 ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(and (= ?v3 (fun_app$f ?v0 ?v2 ))(= ?v4 (unfold_stream$ ?v0 ?v1 (fun_app$g ?v1 ?v2 )))))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_bool_fun$ ))(=> (and (member$ ?v0 (collect$ uua$ ))(forall ((?v2 A_stream$ ))(fun_app$ ?v1 (llist_of_stream$ ?v2 ))))(fun_app$ ?v1 ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (member$ ?v0 (collect$ uua$ ))(forall ((?v1 A_stream$ ))(=> (= ?v0 (llist_of_stream$ ?v1 ))false )))false )):named a12 ))
(assert (! (forall ((?v0 A_stream$ ))(member$ (llist_of_stream$ ?v0 )(collect$ uua$ ))):named a13 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream$ ))(= (shd$ (fun_app$a (fun_app$e (unfold_stream$a ?v0 )?v1 )?v2 ))(fun_app$b ?v0 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (shd$ (unfold_stream$ ?v0 ?v1 ?v2 ))(fun_app$f ?v0 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream$ ))(= (fun_app$a (fun_app$e (unfold_stream$a ?v0 )?v1 )?v2 )(sCons$ (fun_app$b ?v0 ?v2 )(fun_app$a (fun_app$e (unfold_stream$a ?v0 )?v1 )(fun_app$a ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (unfold_stream$ ?v0 ?v1 ?v2 )(sCons$ (fun_app$f ?v0 ?v2 )(unfold_stream$ ?v0 ?v1 (fun_app$g ?v1 ?v2 ))))):named a17 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream$ ))(= (fun_app$a (fun_app$e (unfold_stream$a ?v0 )?v1 )(fun_app$a ?v1 ?v2 ))(fun_app$a (fun_app$e (unfold_stream$a (fun_app$h (comp$ ?v0 )?v1 ))?v1 )?v2 ))):named a18 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (unfold_stream$ ?v0 ?v1 (fun_app$g ?v1 ?v2 ))(unfold_stream$ (fun_app$i (comp$a ?v0 )?v1 )?v1 ?v2 ))):named a19 ))
(assert (! (forall ((?v0 A_stream$ ))(not (lnull$ (llist_of_stream$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream$ ))(= (stl$ (fun_app$a (fun_app$e (unfold_stream$a ?v0 )?v1 )?v2 ))(fun_app$a (fun_app$e (unfold_stream$a ?v0 )?v1 )(fun_app$a ?v1 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(= (stl$ (unfold_stream$ ?v0 ?v1 ?v2 ))(unfold_stream$ ?v0 ?v1 (fun_app$g ?v1 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_stream$ ))(= (fun_app$a (fun_app$e (unfold_stream$a uub$ )uuc$ )?v0 )?v0 )):named a23 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lfinite$ ?v0 ))(= (llist_of_stream$ (stream_of_llist$ ?v0 ))?v0 ))):named a24 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ ))(=> (forall ((?v2 A_llist$ ))(=> (member$ ?v2 (collect$ uua$ ))(fun_app$d ?v0 (stream_of_llist$ ?v2 ))))(fun_app$d ?v0 ?v1 ))):named a25 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A_llist$ ))(=> (and (= ?v0 (stream_of_llist$ ?v1 ))(member$ ?v1 (collect$ uua$ )))false ))false )):named a26 ))
(check-sat )
;(get-unsat-core )
