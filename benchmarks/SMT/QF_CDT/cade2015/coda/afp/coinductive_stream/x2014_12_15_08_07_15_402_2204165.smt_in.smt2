;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))(A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun xs$ ()A_llist$ )
(declare-fun bot$ ()A_set$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun smap$ (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun sset$ (A_stream$ )A_set$ )
(declare-fun lsetp$ (A_llist$ A$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(declare-fun smember$ (A$ A_stream$ )Bool )
(declare-fun cr_stream$ (A_llist$ A_stream$ )Bool )
(declare-fun llist_of_stream$ (A_stream$ )A_llist$ )
(declare-fun stream_of_llist$ (A_llist$ )A_stream$ )
(assert (! (not (= (sset$ (stream_of_llist$ xs$ ))(lset$ xs$ ))):named a0 ))
(assert (! (not (lfinite$ xs$ )):named a1 ))
(assert (! (forall ((?v0 A_stream$ ))(= (lset$ (llist_of_stream$ ?v0 ))(sset$ ?v0 ))):named a2 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (smap$ ?v0 (stream_of_llist$ xs$ ))(stream_of_llist$ (lmap$ ?v0 xs$ )))):named a3 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (llist_of_stream$ ?v0 ))?v0 )):named a4 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (llist_of_stream$ ?v0 ))?v0 )):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (smember$ ?v0 ?v1 )(member$ ?v0 (sset$ ?v1 ))):pattern ((smember$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_stream$ ))(not (= (sset$ ?v0 )bot$ ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(lmember$ ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (member$ ?v0 (lset$ ?v1 ))(lsetp$ ?v1 ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (lsetp$ ?v0 ?v1 )(member$ ?v1 (lset$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lfinite$ ?v0 ))(cr_stream$ ?v0 (stream_of_llist$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lfinite$ ?v0 ))(= (llist_of_stream$ (stream_of_llist$ ?v0 ))?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 Nat$ ))(member$ (snth$ ?v0 ?v1 )(sset$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (snth$ (smap$ ?v0 ?v1 )?v2 )(fun_app$ ?v0 (snth$ ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (lmap$ ?v0 (llist_of_stream$ ?v1 ))(llist_of_stream$ (smap$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (= (llist_of_stream$ ?v0 )(llist_of_stream$ ?v1 ))(= ?v0 ?v1 ))):named a17 ))
(check-sat )
;(get-unsat-core )
