;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_stream_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort Nat_a_stream_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort A_a_a_stream_fun_fun$ 0 )
(declare-sort A_a_stream_a_fun_fun$ 0 )
(declare-sort A_stream_a_a_fun_fun$ 0 )
(declare-sort A_a_stream_stream_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort A_stream_stream_a_fun$ 0 )
(declare-sort Nat_a_stream_stream_fun$ 0 )
(declare-sort A_stream_stream_bool_fun$ 0 )
(declare-sort A_stream_stream_stream_set$ 0 )
(declare-sort A_a_a_stream_stream_fun_fun$ 0 )
(declare-sort A_a_stream_a_stream_fun_fun$ 0 )
(declare-sort A_a_stream_stream_a_fun_fun$ 0 )
(declare-sort A_stream_a_a_stream_fun_fun$ 0 )
(declare-sort A_stream_a_stream_a_fun_fun$ 0 )
(declare-sort A_stream_stream_a_a_fun_fun$ 0 )
(declare-sort A_stream_a_stream_stream_fun$ 0 )
(declare-sort A_stream_stream_a_stream_fun$ 0 )
(declare-sort A_stream_a_stream_a_stream_fun_fun$ 0 )
(declare-sort A_stream_stream_a_stream_stream_fun$ 0 )
(declare-sort A_stream_a_stream_a_stream_stream_fun_fun$ 0 )
(declare-sort A_stream_a_stream_stream_a_stream_fun_fun$ 0 )
(declare-sort A_stream_stream_a_stream_a_stream_fun_fun$ 0 )
(declare-sort A_stream_a_stream_stream_a_stream_stream_fun_fun$ 0 )
(declare-sort A_stream_stream_a_stream_a_stream_stream_fun_fun$ 0 )
(declare-sort A_stream_stream_a_stream_stream_a_stream_fun_fun$ 0 )
(declare-sort A_stream_stream_stream_a_stream_a_stream_fun_fun$ 0 )
(declare-sort A_stream_stream_a_stream_stream_a_stream_stream_fun_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))(A_stream_stream$ (sCons$a (shd$a A_stream$ )(stl$a A_stream_stream$ )))(A_stream_stream_stream$ (sCons$b (shd$b A_stream_stream$ )(stl$b A_stream_stream_stream$ )))(A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_stream_llist$ (lNil$a )(lCons$a (lhd$a A_stream$ )(ltl$a A_stream_llist$ )))(A_stream_stream_llist$ (lNil$b )(lCons$b (lhd$b A_stream_stream$ )(ltl$b A_stream_stream_llist$ )))(A_stream_stream_stream_stream$ (sCons$c (shd$c A_stream_stream_stream$ )(stl$c A_stream_stream_stream_stream$ )))))
(declare-fun f$ ()Nat_a_fun$ )
(declare-fun lnth$ (A_stream_stream_llist$ )Nat_a_stream_stream_fun$ )
(declare-fun smap$ (A_stream_stream_a_fun$ A_stream_stream_stream$ )A_stream$ )
(declare-fun snth$ (A_stream$ )Nat_a_fun$ )
(declare-fun sset$ (A_stream_stream_stream$ )A_stream_stream_set$ )
(declare-fun lnth$a (A_stream_llist$ )Nat_a_stream_fun$ )
(declare-fun lnth$b (A_llist$ )Nat_a_fun$ )
(declare-fun smap$a (A_stream_stream_a_stream_fun$ A_stream_stream_stream$ )A_stream_stream$ )
(declare-fun smap$b (A_a_stream_stream_fun$ A_stream$ )A_stream_stream_stream$ )
(declare-fun smap$c (A_stream_a_stream_stream_fun$ A_stream_stream$ )A_stream_stream_stream$ )
(declare-fun smap$d (A_stream_stream_a_stream_stream_fun$ A_stream_stream_stream$ )A_stream_stream_stream$ )
(declare-fun smap$e (A_stream_a_fun$ )A_stream_stream_a_stream_fun$ )
(declare-fun smap$f (A_a_stream_fun$ )A_stream_a_stream_stream_fun$ )
(declare-fun smap$g (A_stream_a_stream_fun$ )A_stream_stream_a_stream_stream_fun$ )
(declare-fun smap$h (A_a_fun$ )A_stream_a_stream_fun$ )
(declare-fun smap2$ (A_a_a_fun_fun$ )A_stream_a_stream_a_stream_fun_fun$ )
(declare-fun snth$a (A_stream_stream_stream$ )Nat_a_stream_stream_fun$ )
(declare-fun snth$b (A_stream_stream$ )Nat_a_stream_fun$ )
(declare-fun snth$c (A_stream_stream_stream_stream$ Nat$ )A_stream_stream_stream$ )
(declare-fun sset$a (A_stream_stream$ )A_stream_set$ )
(declare-fun sset$b (A_stream$ )A_set$ )
(declare-fun member$ (A_stream_stream_stream$ A_stream_stream_stream_set$ )Bool )
(declare-fun of_seq$ (Nat_a_fun$ )A_stream$ )
(declare-fun smap2$a (A_a_stream_a_fun_fun$ )A_stream_a_stream_stream_a_stream_fun_fun$ )
(declare-fun smap2$b (A_stream_a_a_fun_fun$ )A_stream_stream_a_stream_a_stream_fun_fun$ )
(declare-fun smap2$c (A_a_a_stream_fun_fun$ )A_stream_a_stream_a_stream_stream_fun_fun$ )
(declare-fun smap2$d (A_stream_a_stream_a_fun_fun$ )A_stream_stream_a_stream_stream_a_stream_fun_fun$ )
(declare-fun smap2$e (A_a_stream_a_stream_fun_fun$ )A_stream_a_stream_stream_a_stream_stream_fun_fun$ )
(declare-fun smap2$f (A_stream_a_a_stream_fun_fun$ )A_stream_stream_a_stream_a_stream_stream_fun_fun$ )
(declare-fun smap2$g (A_stream_a_stream_a_stream_fun_fun$ )A_stream_stream_a_stream_stream_a_stream_stream_fun_fun$ )
(declare-fun smap2$h (A_a_stream_stream_a_fun_fun$ A_stream$ A_stream_stream_stream$ )A_stream$ )
(declare-fun smap2$i (A_stream_stream_a_a_fun_fun$ )A_stream_stream_stream_a_stream_a_stream_fun_fun$ )
(declare-fun smap2$j (A_a_a_stream_stream_fun_fun$ A_stream$ A_stream$ )A_stream_stream_stream$ )
(declare-fun smerge$ (A_stream_stream_stream_stream$ )A_stream_stream_stream$ )
(declare-fun fun_app$ (A_stream_stream_bool_fun$ A_stream_stream$ )Bool )
(declare-fun member$a (A_stream_stream$ A_stream_stream_set$ )Bool )
(declare-fun member$b (A_stream$ A_stream_set$ )Bool )
(declare-fun member$c (A$ A_set$ )Bool )
(declare-fun of_seq$a (Nat_a_stream_fun$ )A_stream_stream$ )
(declare-fun smerge$a (A_stream_stream_stream$ )A_stream_stream$ )
(declare-fun smerge$b (A_stream_stream$ )A_stream$ )
(declare-fun streams$ (A_stream_stream_set$ )A_stream_stream_stream_set$ )
(declare-fun fun_app$a (Nat_a_stream_stream_fun$ Nat$ )A_stream_stream$ )
(declare-fun fun_app$b (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$c (Nat_a_stream_fun$ Nat$ )A_stream$ )
(declare-fun fun_app$d (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$e (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$f (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun fun_app$g (A_stream_a_stream_a_stream_fun_fun$ A_stream$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$h (A_a_fun$ A$ )A$ )
(declare-fun fun_app$i (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$j (A_stream_stream_a_stream_fun$ A_stream_stream$ )A_stream$ )
(declare-fun fun_app$k (A_stream_a_stream_stream_a_stream_fun_fun$ A_stream$ )A_stream_stream_a_stream_fun$ )
(declare-fun fun_app$l (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$m (A_a_stream_a_fun_fun$ A$ )A_stream_a_fun$ )
(declare-fun fun_app$n (A_stream_stream_a_stream_a_stream_fun_fun$ A_stream_stream$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$o (A_stream_a_a_fun_fun$ A_stream$ )A_a_fun$ )
(declare-fun fun_app$p (A_stream_a_stream_stream_fun$ A_stream$ )A_stream_stream$ )
(declare-fun fun_app$q (A_stream_a_stream_a_stream_stream_fun_fun$ A_stream$ )A_stream_a_stream_stream_fun$ )
(declare-fun fun_app$r (A_a_stream_fun$ A$ )A_stream$ )
(declare-fun fun_app$s (A_a_a_stream_fun_fun$ A$ )A_a_stream_fun$ )
(declare-fun fun_app$t (A_stream_stream_a_stream_stream_a_stream_fun_fun$ A_stream_stream$ )A_stream_stream_a_stream_fun$ )
(declare-fun fun_app$u (A_stream_a_stream_a_fun_fun$ A_stream$ )A_stream_a_fun$ )
(declare-fun fun_app$v (A_stream_stream_a_stream_stream_fun$ A_stream_stream$ )A_stream_stream$ )
(declare-fun fun_app$w (A_stream_a_stream_stream_a_stream_stream_fun_fun$ A_stream$ )A_stream_stream_a_stream_stream_fun$ )
(declare-fun fun_app$x (A_a_stream_a_stream_fun_fun$ A$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$y (A_stream_stream_a_stream_a_stream_stream_fun_fun$ A_stream_stream$ )A_stream_a_stream_stream_fun$ )
(declare-fun fun_app$z (A_stream_a_a_stream_fun_fun$ A_stream$ )A_a_stream_fun$ )
(declare-fun streams$a (A_stream_set$ )A_stream_stream_set$ )
(declare-fun streams$b (A_set$ )A_stream_set$ )
(declare-fun fun_app$aa (A_stream_stream_a_stream_stream_a_stream_stream_fun_fun$ A_stream_stream$ )A_stream_stream_a_stream_stream_fun$ )
(declare-fun fun_app$ab (A_stream_stream_a_fun$ A_stream_stream$ )A$ )
(declare-fun fun_app$ac (A_a_stream_stream_a_fun_fun$ A$ )A_stream_stream_a_fun$ )
(declare-fun fun_app$ad (A_stream_stream_stream_a_stream_a_stream_fun_fun$ A_stream_stream_stream$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$ae (A_stream_stream_a_a_fun_fun$ A_stream_stream$ )A_a_fun$ )
(declare-fun fun_app$af (A_a_stream_stream_fun$ A$ )A_stream_stream$ )
(declare-fun fun_app$ag (A_a_a_stream_stream_fun_fun$ A$ )A_a_stream_stream_fun$ )
(declare-fun inf_llist$ (Nat_a_fun$ )A_llist$ )
(declare-fun inf_llist$a (Nat_a_stream_fun$ )A_stream_llist$ )
(declare-fun stream_all$ (A_stream_stream_bool_fun$ A_stream_stream_stream$ )Bool )
(declare-fun stream_all$a (A_stream_bool_fun$ )A_stream_stream_bool_fun$ )
(declare-fun stream_all$b (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun llist_of_stream$ (A_stream_stream$ )A_stream_llist$ )
(declare-fun stream_of_llist$ (A_llist$ )A_stream$ )
(declare-fun llist_of_stream$a (A_stream$ )A_llist$ )
(declare-fun llist_of_stream$b (A_stream_stream_stream$ )A_stream_stream_llist$ )
(declare-fun stream_of_llist$a (A_stream_llist$ )A_stream_stream$ )
(assert (! (not (= (snth$ (of_seq$ f$ ))f$ )):named a0 ))
(assert (! (forall ((?v0 A_stream_stream_bool_fun$ )(?v1 A_stream_stream_stream$ ))(= (stream_all$ ?v0 ?v1 )(forall ((?v2 Nat$ ))(fun_app$ ?v0 (fun_app$a (snth$a ?v1 )?v2 ))))):named a1 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream_stream$ ))(= (fun_app$ (stream_all$a ?v0 )?v1 )(forall ((?v2 Nat$ ))(fun_app$b ?v0 (fun_app$c (snth$b ?v1 )?v2 ))))):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (fun_app$b (stream_all$b ?v0 )?v1 )(forall ((?v2 Nat$ ))(fun_app$d ?v0 (fun_app$e (snth$ ?v1 )?v2 ))))):named a3 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 Nat$ ))(= (fun_app$e (snth$ (fun_app$f (fun_app$g (smap2$ ?v0 )?v1 )?v2 ))?v3 )(fun_app$h (fun_app$i ?v0 (fun_app$e (snth$ ?v1 )?v3 ))(fun_app$e (snth$ ?v2 )?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_a_stream_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream_stream$ )(?v3 Nat$ ))(= (fun_app$e (snth$ (fun_app$j (fun_app$k (smap2$a ?v0 )?v1 )?v2 ))?v3 )(fun_app$l (fun_app$m ?v0 (fun_app$e (snth$ ?v1 )?v3 ))(fun_app$c (snth$b ?v2 )?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_stream_a_a_fun_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream$ )(?v3 Nat$ ))(= (fun_app$e (snth$ (fun_app$f (fun_app$n (smap2$b ?v0 )?v1 )?v2 ))?v3 )(fun_app$h (fun_app$o ?v0 (fun_app$c (snth$b ?v1 )?v3 ))(fun_app$e (snth$ ?v2 )?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_a_a_stream_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 Nat$ ))(= (fun_app$c (snth$b (fun_app$p (fun_app$q (smap2$c ?v0 )?v1 )?v2 ))?v3 )(fun_app$r (fun_app$s ?v0 (fun_app$e (snth$ ?v1 )?v3 ))(fun_app$e (snth$ ?v2 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_stream_a_stream_a_fun_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream_stream$ )(?v3 Nat$ ))(= (fun_app$e (snth$ (fun_app$j (fun_app$t (smap2$d ?v0 )?v1 )?v2 ))?v3 )(fun_app$l (fun_app$u ?v0 (fun_app$c (snth$b ?v1 )?v3 ))(fun_app$c (snth$b ?v2 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 A_a_stream_a_stream_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream_stream$ )(?v3 Nat$ ))(= (fun_app$c (snth$b (fun_app$v (fun_app$w (smap2$e ?v0 )?v1 )?v2 ))?v3 )(fun_app$f (fun_app$x ?v0 (fun_app$e (snth$ ?v1 )?v3 ))(fun_app$c (snth$b ?v2 )?v3 )))):named a9 ))
(assert (! (forall ((?v0 A_stream_a_a_stream_fun_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream$ )(?v3 Nat$ ))(= (fun_app$c (snth$b (fun_app$p (fun_app$y (smap2$f ?v0 )?v1 )?v2 ))?v3 )(fun_app$r (fun_app$z ?v0 (fun_app$c (snth$b ?v1 )?v3 ))(fun_app$e (snth$ ?v2 )?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_stream_a_stream_a_stream_fun_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream_stream$ )(?v3 Nat$ ))(= (fun_app$c (snth$b (fun_app$v (fun_app$aa (smap2$g ?v0 )?v1 )?v2 ))?v3 )(fun_app$f (fun_app$g ?v0 (fun_app$c (snth$b ?v1 )?v3 ))(fun_app$c (snth$b ?v2 )?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_a_stream_stream_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream_stream_stream$ )(?v3 Nat$ ))(= (fun_app$e (snth$ (smap2$h ?v0 ?v1 ?v2 ))?v3 )(fun_app$ab (fun_app$ac ?v0 (fun_app$e (snth$ ?v1 )?v3 ))(fun_app$a (snth$a ?v2 )?v3 )))):named a12 ))
(assert (! (forall ((?v0 A_stream_stream_a_a_fun_fun$ )(?v1 A_stream_stream_stream$ )(?v2 A_stream$ )(?v3 Nat$ ))(= (fun_app$e (snth$ (fun_app$f (fun_app$ad (smap2$i ?v0 )?v1 )?v2 ))?v3 )(fun_app$h (fun_app$ae ?v0 (fun_app$a (snth$a ?v1 )?v3 ))(fun_app$e (snth$ ?v2 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (= (fun_app$f (fun_app$g (smap2$ ?v0 )?v1 )?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$h (fun_app$i ?v0 (fun_app$e (snth$ ?v1 )?v4 ))(fun_app$e (snth$ ?v2 )?v4 ))(fun_app$e (snth$ ?v3 )?v4 ))))):named a14 ))
(assert (! (forall ((?v0 A_a_a_stream_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 A_stream_stream$ ))(= (= (fun_app$p (fun_app$q (smap2$c ?v0 )?v1 )?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$r (fun_app$s ?v0 (fun_app$e (snth$ ?v1 )?v4 ))(fun_app$e (snth$ ?v2 )?v4 ))(fun_app$c (snth$b ?v3 )?v4 ))))):named a15 ))
(assert (! (forall ((?v0 A_a_stream_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream_stream$ )(?v3 A_stream$ ))(= (= (fun_app$j (fun_app$k (smap2$a ?v0 )?v1 )?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$l (fun_app$m ?v0 (fun_app$e (snth$ ?v1 )?v4 ))(fun_app$c (snth$b ?v2 )?v4 ))(fun_app$e (snth$ ?v3 )?v4 ))))):named a16 ))
(assert (! (forall ((?v0 A_stream_a_a_fun_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (= (fun_app$f (fun_app$n (smap2$b ?v0 )?v1 )?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$h (fun_app$o ?v0 (fun_app$c (snth$b ?v1 )?v4 ))(fun_app$e (snth$ ?v2 )?v4 ))(fun_app$e (snth$ ?v3 )?v4 ))))):named a17 ))
(assert (! (forall ((?v0 A_a_stream_a_stream_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream_stream$ )(?v3 A_stream_stream$ ))(= (= (fun_app$v (fun_app$w (smap2$e ?v0 )?v1 )?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$f (fun_app$x ?v0 (fun_app$e (snth$ ?v1 )?v4 ))(fun_app$c (snth$b ?v2 )?v4 ))(fun_app$c (snth$b ?v3 )?v4 ))))):named a18 ))
(assert (! (forall ((?v0 A_stream_a_a_stream_fun_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream$ )(?v3 A_stream_stream$ ))(= (= (fun_app$p (fun_app$y (smap2$f ?v0 )?v1 )?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$r (fun_app$z ?v0 (fun_app$c (snth$b ?v1 )?v4 ))(fun_app$e (snth$ ?v2 )?v4 ))(fun_app$c (snth$b ?v3 )?v4 ))))):named a19 ))
(assert (! (forall ((?v0 A_stream_a_stream_a_fun_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream_stream$ )(?v3 A_stream$ ))(= (= (fun_app$j (fun_app$t (smap2$d ?v0 )?v1 )?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$l (fun_app$u ?v0 (fun_app$c (snth$b ?v1 )?v4 ))(fun_app$c (snth$b ?v2 )?v4 ))(fun_app$e (snth$ ?v3 )?v4 ))))):named a20 ))
(assert (! (forall ((?v0 A_stream_a_stream_a_stream_fun_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream_stream$ )(?v3 A_stream_stream$ ))(= (= (fun_app$v (fun_app$aa (smap2$g ?v0 )?v1 )?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$f (fun_app$g ?v0 (fun_app$c (snth$b ?v1 )?v4 ))(fun_app$c (snth$b ?v2 )?v4 ))(fun_app$c (snth$b ?v3 )?v4 ))))):named a21 ))
(assert (! (forall ((?v0 A_a_a_stream_stream_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 A_stream_stream_stream$ ))(= (= (smap2$j ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$af (fun_app$ag ?v0 (fun_app$e (snth$ ?v1 )?v4 ))(fun_app$e (snth$ ?v2 )?v4 ))(fun_app$a (snth$a ?v3 )?v4 ))))):named a22 ))
(assert (! (forall ((?v0 A_a_stream_stream_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream_stream_stream$ )(?v3 A_stream$ ))(= (= (smap2$h ?v0 ?v1 ?v2 )?v3 )(forall ((?v4 Nat$ ))(= (fun_app$ab (fun_app$ac ?v0 (fun_app$e (snth$ ?v1 )?v4 ))(fun_app$a (snth$a ?v2 )?v4 ))(fun_app$e (snth$ ?v3 )?v4 ))))):named a23 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(! (= (of_seq$ ?v0 )(stream_of_llist$ (inf_llist$ ?v0 ))):pattern ((of_seq$ ?v0 )))):named a24 ))
(assert (! (forall ((?v0 Nat_a_stream_fun$ ))(= (llist_of_stream$ (of_seq$a ?v0 ))(inf_llist$a ?v0 ))):named a25 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(= (llist_of_stream$a (of_seq$ ?v0 ))(inf_llist$ ?v0 ))):named a26 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_set$ ))(= (member$ ?v0 (streams$ ?v1 ))(forall ((?v2 Nat$ ))(member$a (fun_app$a (snth$a ?v0 )?v2 )?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(= (member$a ?v0 (streams$a ?v1 ))(forall ((?v2 Nat$ ))(member$b (fun_app$c (snth$b ?v0 )?v2 )?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(= (member$b ?v0 (streams$b ?v1 ))(forall ((?v2 Nat$ ))(member$c (fun_app$e (snth$ ?v0 )?v2 )?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 A_stream_stream_set$ )(?v2 Nat$ ))(=> (member$ ?v0 (streams$ ?v1 ))(member$a (fun_app$a (snth$a ?v0 )?v2 )?v1 ))):named a30 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ )(?v2 Nat$ ))(=> (member$a ?v0 (streams$a ?v1 ))(member$b (fun_app$c (snth$b ?v0 )?v2 )?v1 ))):named a31 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ )(?v2 Nat$ ))(=> (member$b ?v0 (streams$b ?v1 ))(member$c (fun_app$e (snth$ ?v0 )?v2 )?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_stream_stream_a_fun$ )(?v1 A_stream_stream_stream$ )(?v2 Nat$ ))(= (fun_app$e (snth$ (smap$ ?v0 ?v1 ))?v2 )(fun_app$ab ?v0 (fun_app$a (snth$a ?v1 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 A_stream_stream_a_stream_fun$ )(?v1 A_stream_stream_stream$ )(?v2 Nat$ ))(= (fun_app$c (snth$b (smap$a ?v0 ?v1 ))?v2 )(fun_app$j ?v0 (fun_app$a (snth$a ?v1 )?v2 )))):named a34 ))
(assert (! (forall ((?v0 A_a_stream_stream_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$a (snth$a (smap$b ?v0 ?v1 ))?v2 )(fun_app$af ?v0 (fun_app$e (snth$ ?v1 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 A_stream_a_stream_stream_fun$ )(?v1 A_stream_stream$ )(?v2 Nat$ ))(= (fun_app$a (snth$a (smap$c ?v0 ?v1 ))?v2 )(fun_app$p ?v0 (fun_app$c (snth$b ?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_fun$ )(?v1 A_stream_stream_stream$ )(?v2 Nat$ ))(= (fun_app$a (snth$a (smap$d ?v0 ?v1 ))?v2 )(fun_app$v ?v0 (fun_app$a (snth$a ?v1 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ )(?v2 Nat$ ))(= (fun_app$e (snth$ (fun_app$j (smap$e ?v0 )?v1 ))?v2 )(fun_app$l ?v0 (fun_app$c (snth$b ?v1 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$c (snth$b (fun_app$p (smap$f ?v0 )?v1 ))?v2 )(fun_app$r ?v0 (fun_app$e (snth$ ?v1 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ )(?v2 Nat$ ))(= (fun_app$c (snth$b (fun_app$v (smap$g ?v0 )?v1 ))?v2 )(fun_app$f ?v0 (fun_app$c (snth$b ?v1 )?v2 )))):named a40 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 Nat$ ))(= (fun_app$e (snth$ (fun_app$f (smap$h ?v0 )?v1 ))?v2 )(fun_app$h ?v0 (fun_app$e (snth$ ?v1 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 Nat$ ))(member$a (fun_app$a (snth$a ?v0 )?v1 )(sset$ ?v0 ))):named a42 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 Nat$ ))(member$b (fun_app$c (snth$b ?v0 )?v1 )(sset$a ?v0 ))):named a43 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 Nat$ ))(member$c (fun_app$e (snth$ ?v0 )?v1 )(sset$b ?v0 ))):named a44 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ ))(= (lnth$ (llist_of_stream$b ?v0 ))(snth$a ?v0 ))):named a45 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(= (lnth$a (llist_of_stream$ ?v0 ))(snth$b ?v0 ))):named a46 ))
(assert (! (forall ((?v0 A_stream$ ))(= (lnth$b (llist_of_stream$a ?v0 ))(snth$ ?v0 ))):named a47 ))
(assert (! (forall ((?v0 A_a_stream_stream_fun$ )(?v1 A_stream$ )(?v2 A_stream_stream_stream$ ))(= (= (smap$b ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$af ?v0 (fun_app$e (snth$ ?v1 )?v3 ))(fun_app$a (snth$a ?v2 )?v3 ))))):named a48 ))
(assert (! (forall ((?v0 A_stream_a_stream_stream_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream_stream_stream$ ))(= (= (smap$c ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$p ?v0 (fun_app$c (snth$b ?v1 )?v3 ))(fun_app$a (snth$a ?v2 )?v3 ))))):named a49 ))
(assert (! (forall ((?v0 A_stream_stream_a_fun$ )(?v1 A_stream_stream_stream$ )(?v2 A_stream$ ))(= (= (smap$ ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$ab ?v0 (fun_app$a (snth$a ?v1 )?v3 ))(fun_app$e (snth$ ?v2 )?v3 ))))):named a50 ))
(assert (! (forall ((?v0 A_stream_stream_a_stream_fun$ )(?v1 A_stream_stream_stream$ )(?v2 A_stream_stream$ ))(= (= (smap$a ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$j ?v0 (fun_app$a (snth$a ?v1 )?v3 ))(fun_app$c (snth$b ?v2 )?v3 ))))):named a51 ))
(assert (! (forall ((?v0 A_stream_stream_a_stream_stream_fun$ )(?v1 A_stream_stream_stream$ )(?v2 A_stream_stream_stream$ ))(= (= (smap$d ?v0 ?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$v ?v0 (fun_app$a (snth$a ?v1 )?v3 ))(fun_app$a (snth$a ?v2 )?v3 ))))):named a52 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A_stream$ )(?v2 A_stream_stream$ ))(= (= (fun_app$p (smap$f ?v0 )?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$r ?v0 (fun_app$e (snth$ ?v1 )?v3 ))(fun_app$c (snth$b ?v2 )?v3 ))))):named a53 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream$ ))(= (= (fun_app$j (smap$e ?v0 )?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$l ?v0 (fun_app$c (snth$b ?v1 )?v3 ))(fun_app$e (snth$ ?v2 )?v3 ))))):named a54 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream_stream$ ))(= (= (fun_app$v (smap$g ?v0 )?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$f ?v0 (fun_app$c (snth$b ?v1 )?v3 ))(fun_app$c (snth$b ?v2 )?v3 ))))):named a55 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (= (fun_app$f (smap$h ?v0 )?v1 )?v2 )(forall ((?v3 Nat$ ))(= (fun_app$h ?v0 (fun_app$e (snth$ ?v1 )?v3 ))(fun_app$e (snth$ ?v2 )?v3 ))))):named a56 ))
(assert (! (forall ((?v0 A_stream_stream_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$a (fun_app$a (snth$a (snth$c ?v0 ?v1 ))?v2 )(sset$ (smerge$ ?v0 )))):named a57 ))
(assert (! (forall ((?v0 A_stream_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$b (fun_app$c (snth$b (fun_app$a (snth$a ?v0 )?v1 ))?v2 )(sset$a (smerge$a ?v0 )))):named a58 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$c (fun_app$e (snth$ (fun_app$c (snth$b ?v0 )?v1 ))?v2 )(sset$b (smerge$b ?v0 )))):named a59 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(= (stream_of_llist$a (llist_of_stream$ ?v0 ))?v0 )):named a60 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (llist_of_stream$a ?v0 ))?v0 )):named a61 ))
(assert (! (forall ((?v0 A_stream_stream$ ))(= (stream_of_llist$a (llist_of_stream$ ?v0 ))?v0 )):named a62 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stream_of_llist$ (llist_of_stream$a ?v0 ))?v0 )):named a63 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream$ ))(= (= (llist_of_stream$ ?v0 )(llist_of_stream$ ?v1 ))(= ?v0 ?v1 ))):named a64 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (= (llist_of_stream$a ?v0 )(llist_of_stream$a ?v1 ))(= ?v0 ?v1 ))):named a65 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_stream_fun$ )(?v3 A_a_stream_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$c ?v4 (sset$b ?v0 ))(and (member$c ?v5 (sset$b ?v1 ))(= (fun_app$r ?v2 ?v4 )(fun_app$r ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$p (smap$f ?v2 )?v0 )(fun_app$p (smap$f ?v3 )?v1 )))(= ?v0 ?v1 ))):named a66 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream$ )(?v2 A_stream_a_stream_fun$ )(?v3 A_stream_a_stream_fun$ ))(=> (and (forall ((?v4 A_stream$ )(?v5 A_stream$ ))(=> (and (member$b ?v4 (sset$a ?v0 ))(and (member$b ?v5 (sset$a ?v1 ))(= (fun_app$f ?v2 ?v4 )(fun_app$f ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$v (smap$g ?v2 )?v0 )(fun_app$v (smap$g ?v3 )?v1 )))(= ?v0 ?v1 ))):named a67 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream$ )(?v2 A_stream_a_fun$ )(?v3 A_stream_a_fun$ ))(=> (and (forall ((?v4 A_stream$ )(?v5 A_stream$ ))(=> (and (member$b ?v4 (sset$a ?v0 ))(and (member$b ?v5 (sset$a ?v1 ))(= (fun_app$l ?v2 ?v4 )(fun_app$l ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$j (smap$e ?v2 )?v0 )(fun_app$j (smap$e ?v3 )?v1 )))(= ?v0 ?v1 ))):named a68 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$c ?v4 (sset$b ?v0 ))(and (member$c ?v5 (sset$b ?v1 ))(= (fun_app$h ?v2 ?v4 )(fun_app$h ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (fun_app$f (smap$h ?v2 )?v0 )(fun_app$f (smap$h ?v3 )?v1 )))(= ?v0 ?v1 ))):named a69 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_stream_fun$ )(?v2 A_a_stream_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$c ?v3 (sset$b ?v0 ))(= (fun_app$r ?v1 ?v3 )(fun_app$r ?v2 ?v3 ))))(= (fun_app$p (smap$f ?v1 )?v0 )(fun_app$p (smap$f ?v2 )?v0 )))):named a70 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_a_stream_fun$ )(?v2 A_stream_a_stream_fun$ ))(=> (forall ((?v3 A_stream$ ))(=> (member$b ?v3 (sset$a ?v0 ))(= (fun_app$f ?v1 ?v3 )(fun_app$f ?v2 ?v3 ))))(= (fun_app$v (smap$g ?v1 )?v0 )(fun_app$v (smap$g ?v2 )?v0 )))):named a71 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_a_fun$ )(?v2 A_stream_a_fun$ ))(=> (forall ((?v3 A_stream$ ))(=> (member$b ?v3 (sset$a ?v0 ))(= (fun_app$l ?v1 ?v3 )(fun_app$l ?v2 ?v3 ))))(= (fun_app$j (smap$e ?v1 )?v0 )(fun_app$j (smap$e ?v2 )?v0 )))):named a72 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$c ?v3 (sset$b ?v0 ))(= (fun_app$h ?v1 ?v3 )(fun_app$h ?v2 ?v3 ))))(= (fun_app$f (smap$h ?v1 )?v0 )(fun_app$f (smap$h ?v2 )?v0 )))):named a73 ))
(check-sat )
;(get-unsat-core )
