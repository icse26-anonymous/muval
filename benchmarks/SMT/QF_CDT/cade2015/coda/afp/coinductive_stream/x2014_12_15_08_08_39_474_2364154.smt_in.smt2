;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun p$ (A_stream$ )Bool )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun bot$ ()Nat_set$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun sup$ (Nat_set$ Nat_set$ )Nat_set$ )
(declare-fun uua$ ()Nat_bool_fun$ )
(declare-fun uub$ (Nat$ )Nat_bool_fun$ )
(declare-fun uuc$ (Nat$ )Nat_bool_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun image$ (Nat_nat_fun$ Nat_set$ )Nat_set$ )
(declare-fun omega$ ()A_stream$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun finite$ (Nat_set$ )Bool )
(declare-fun insert$ (Nat$ Nat_set$ )Nat_set$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uua$ ?v0 )(p$ (sdrop$ ?v0 (stl$ omega$ )))):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(p$ (sdrop$ ?v0 omega$ ))):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )(= ?v1 ?v0 )):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (= (collect$ uu$ )(sup$ (ite (p$ omega$ )(insert$ zero$ bot$ )bot$ )(image$ suc$ (collect$ uua$ ))))):named a4 ))
(assert (! (finite$ (collect$ uua$ )):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (stl$ (sdrop$ ?v0 ?v1 ))(sdrop$ (fun_app$a suc$ ?v0 )?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(= (collect$ (uub$ ?v0 ))(insert$ ?v0 bot$ ))):named a7 ))
(assert (! (forall ((?v0 Nat$ ))(= (collect$ (uuc$ ?v0 ))(insert$ ?v0 bot$ ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat_set$ ))(= (sup$ (insert$ ?v0 ?v1 )?v2 )(insert$ ?v0 (sup$ ?v1 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat$ )(?v2 Nat_set$ ))(= (sup$ ?v0 (insert$ ?v1 ?v2 ))(insert$ ?v1 (sup$ ?v0 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(= (= (sup$ ?v0 ?v1 )bot$ )(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a11 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat_set$ ))(= (image$ ?v0 (insert$ ?v1 ?v2 ))(insert$ (fun_app$a ?v0 ?v1 )(image$ ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat_nat_fun$ ))(=> (member$ ?v0 ?v1 )(= (insert$ (fun_app$a ?v2 ?v0 )(image$ ?v2 ?v1 ))(image$ ?v2 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(member$ ?v0 (insert$ ?v0 bot$ ))):named a14 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(= (= bot$ (sup$ ?v0 ?v1 ))(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a15 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ ))(= (= (sup$ ?v0 ?v1 )bot$ )(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a16 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (sup$ ?v0 bot$ )?v0 )):named a17 ))
(assert (! (forall ((?v0 Nat$ ))(= (member$ ?v0 bot$ )false )):named a18 ))
(assert (! (forall ((?v0 Nat_bool_fun$ ))(= (= bot$ (collect$ ?v0 ))(forall ((?v1 Nat$ ))(not (fun_app$ ?v0 ?v1 ))))):named a19 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (forall ((?v1 Nat$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$ ))):named a20 ))
(assert (! (forall ((?v0 Nat_bool_fun$ ))(= (= (collect$ ?v0 )bot$ )(forall ((?v1 Nat$ ))(not (fun_app$ ?v0 ?v1 ))))):named a21 ))
(check-sat )
;(get-unsat-core )
