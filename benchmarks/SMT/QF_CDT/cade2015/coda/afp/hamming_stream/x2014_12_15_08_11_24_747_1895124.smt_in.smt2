;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun b$ ()Bool )
(declare-fun f$ (B$ C$ )A$ )
(declare-fun x$ ()B$ )
(declare-fun y$ ()B$ )
(declare-fun x$a ()C$ )
(declare-fun y$a ()C$ )
(declare-fun inf$ (Enat$ )Enat_enat_fun$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun fun_app$ (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun infinity$ ()Enat$ )
(assert (! (not (= (ite b$ (f$ x$ x$a )(f$ y$ y$a ))(f$ (ite b$ x$ y$ )(ite b$ x$a y$a )))):named a0 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (inf$ ?v0 )infinity$ )?v0 ):pattern ((inf$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (inf$ infinity$ )?v0 )?v0 ):pattern ((fun_app$ (inf$ infinity$ )?v0 )))):named a2 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (fun_app$ (inf$ (eSuc$ ?v0 ))(eSuc$ ?v1 ))(eSuc$ (fun_app$ (inf$ ?v0 )?v1 )))):named a3 ))
(assert (! (= (eSuc$ infinity$ )infinity$ ):named a4 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (eSuc$ ?v0 )(eSuc$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (eSuc$ ?v0 )(eSuc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (fun_app$ (inf$ (fun_app$ (inf$ ?v0 )?v1 ))?v1 )(fun_app$ (inf$ ?v0 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (fun_app$ (inf$ (fun_app$ (inf$ ?v0 )?v1 ))?v1 )(fun_app$ (inf$ ?v0 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (fun_app$ (inf$ ?v0 )(fun_app$ (inf$ ?v0 )?v1 ))(fun_app$ (inf$ ?v0 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (fun_app$ (inf$ ?v0 )(fun_app$ (inf$ ?v0 )?v1 ))(fun_app$ (inf$ ?v0 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (inf$ ?v0 )?v0 )?v0 ):pattern ((inf$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (inf$ ?v0 )?v0 )?v0 ):pattern ((inf$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ ))(= (= (eSuc$ ?v0 )infinity$ )(= ?v0 infinity$ ))):named a13 ))
(assert (! (forall ((?v0 Enat$ ))(= (= infinity$ (eSuc$ ?v0 ))(= ?v0 infinity$ ))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (fun_app$ (inf$ ?v0 )?v1 )(fun_app$ (inf$ ?v1 )?v0 ))):named a15 ))
(check-sat )
;(get-unsat-core )
