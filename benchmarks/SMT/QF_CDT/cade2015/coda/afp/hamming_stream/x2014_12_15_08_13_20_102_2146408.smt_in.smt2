;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Unit$ 0 )
(declare-sort Nat_llist_enat_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((Nat_llist$ (lNil$ )(lCons$ (lhd$ Nat$ )(ltl$ Nat_llist$ )))))
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun llcp$ (Nat_llist$ )Nat_llist_enat_fun$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun lnull$ (Nat_llist$ )Bool )
(declare-fun unity$ ()Unit$ )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (Nat_llist_enat_fun$ Nat_llist$ )Enat$ )
(declare-fun hamming$ ()Nat_llist$ )
(declare-fun lfinite$ (Nat_llist$ )Bool )
(declare-fun llength$ (Nat_llist$ )Enat$ )
(declare-fun hamming$a (Unit$ )Nat_llist$ )
(declare-fun the_enat$ (Enat$ )Nat$ )
(declare-fun gen_llength$ (Nat$ Nat_llist$ )Enat$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= (llength$ hamming$ )(enat$ ?v0 ))thesis$ )):named a1 ))
(assert (! (lfinite$ hamming$ ):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (= (= hamming$ lNil$ )false ):named a4 ))
(assert (! (not (lnull$ hamming$ )):named a5 ))
(assert (! (forall ((?v0 Nat_llist$ ))(= (lfinite$ ?v0 )(exists ((?v1 Nat$ ))(= (llength$ ?v0 )(enat$ ?v1 ))))):named a6 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat$ ))(=> (= (llength$ ?v0 )(enat$ ?v1 ))(lfinite$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 Nat_llist$ ))(=> (lfinite$ ?v0 )(exists ((?v1 Nat$ ))(= (llength$ ?v0 )(enat$ ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ ))(! (= (gen_llength$ ?v0 ?v1 )(plus$ (enat$ ?v0 )(llength$ ?v1 ))):pattern ((gen_llength$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$ (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a10 ))
(assert (! (= hamming$ (hamming$a unity$ )):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (the_enat$ (enat$ ?v0 ))?v0 ):pattern ((enat$ ?v0 )))):named a12 ))
(assert (! (= (lfinite$ lNil$ )true ):named a13 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(= (fun_app$ (llcp$ ?v0 )?v1 )(fun_app$ (llcp$ ?v1 )?v0 ))):named a14 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (lnull$ ?v0 )(= ?v0 lNil$ )):pattern ((lnull$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a16 ))
(check-sat )
;(get-unsat-core )
