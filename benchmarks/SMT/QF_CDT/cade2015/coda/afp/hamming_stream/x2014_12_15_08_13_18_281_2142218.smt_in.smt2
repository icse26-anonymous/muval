;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Unit$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Nat_llist_nat_llist_fun$ 0 )
(declare-codatatypes ()((Nat_llist$ (lNil$ )(lCons$ (lhd$ Nat$ )(ltl$ Nat_llist$ )))))
(declare-fun lnull$ (Nat_llist$ )Bool )
(declare-fun unity$ ()Unit$ )
(declare-fun ldropn$ (Nat$ )Nat_llist_nat_llist_fun$ )
(declare-fun lmerge$ (Nat_llist$ )Nat_llist_nat_llist_fun$ )
(declare-fun fun_app$ (Nat_llist_nat_llist_fun$ Nat_llist$ )Nat_llist$ )
(declare-fun hamming$ ()Nat_llist$ )
(declare-fun lfinite$ (Nat_llist$ )Bool )
(declare-fun lmerge$a (Nat_nat_bool_fun_fun$ Nat_llist$ Nat_llist$ )Nat_llist$ )
(declare-fun hamming$a (Unit$ )Nat_llist$ )
(declare-fun lstrict_prefix$ (Nat_llist$ Nat_llist$ )Bool )
(assert (! (not (not (lfinite$ hamming$ ))):named a0 ))
(assert (! (= (= hamming$ lNil$ )false ):named a1 ))
(assert (! (not (lnull$ hamming$ )):named a2 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (and (not (lfinite$ ?v0 ))(not (lfinite$ ?v1 )))(not (lfinite$ (fun_app$ (lmerge$ ?v0 )?v1 ))))):named a3 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (lfinite$ (fun_app$ (lmerge$ ?v0 )?v1 ))(or (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a4 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (and (lfinite$ ?v0 )(lfinite$ ?v1 ))(lfinite$ (fun_app$ (lmerge$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ )(?v2 Nat_nat_bool_fun_fun$ ))(=> (and (not (lfinite$ ?v0 ))(not (lfinite$ ?v1 )))(not (lfinite$ (lmerge$a ?v2 ?v0 ?v1 ))))):named a6 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ ))(=> (lfinite$ (lmerge$a ?v0 ?v1 ?v2 ))(or (lfinite$ ?v1 )(lfinite$ ?v2 )))):named a7 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ )(?v2 Nat_nat_bool_fun_fun$ ))(=> (and (lfinite$ ?v0 )(lfinite$ ?v1 ))(lfinite$ (lmerge$a ?v2 ?v0 ?v1 )))):named a8 ))
(assert (! (= hamming$ (hamming$a unity$ )):named a9 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lfinite$ ?v0 ))):named a10 ))
(assert (! (= (lfinite$ lNil$ )true ):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ ))(= (lfinite$ (fun_app$ (ldropn$ ?v0 )?v1 ))(lfinite$ ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ldropn$ ?v0 )lNil$ )lNil$ ):pattern ((ldropn$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(= (not (lnull$ (fun_app$ (lmerge$ ?v0 )?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a14 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(= (lnull$ (fun_app$ (lmerge$ ?v0 )?v1 ))(or (lnull$ ?v0 )(lnull$ ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$ (lmerge$ ?v0 )lNil$ )lNil$ ):pattern ((lmerge$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$ (lmerge$ lNil$ )?v0 )lNil$ ):pattern ((fun_app$ (lmerge$ lNil$ )?v0 )))):named a17 ))
(check-sat )
;(get-unsat-core )
