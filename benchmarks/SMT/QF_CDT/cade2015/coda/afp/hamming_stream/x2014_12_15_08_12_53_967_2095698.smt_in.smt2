;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Unit$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_llist_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Nat_llist_nat_set_fun$ 0 )
(declare-sort Nat_llist_nat_llist_fun$ 0 )
(declare-codatatypes ()((Nat_llist$ (lNil$ )(lCons$ (lhd$ Nat$ )(ltl$ Nat_llist$ )))))
(declare-fun lnull$ (Nat_llist$ )Bool )
(declare-fun unity$ ()Unit$ )
(declare-fun lmerge$ (Nat_llist$ )Nat_llist_nat_llist_fun$ )
(declare-fun fun_app$ (Nat_llist_nat_llist_fun$ Nat_llist$ )Nat_llist$ )
(declare-fun hamming$ ()Nat_llist$ )
(declare-fun lmember$ (Nat$ )Nat_llist_bool_fun$ )
(declare-fun lmerge$a (Nat_nat_bool_fun_fun$ Nat_llist$ )Nat_llist_nat_llist_fun$ )
(declare-fun fun_app$a (Nat_llist_bool_fun$ Nat_llist$ )Bool )
(declare-fun fun_app$b (Nat_llist_nat_set_fun$ Nat_llist$ )Nat_set$ )
(declare-fun gen_lset$ (Nat_set$ )Nat_llist_nat_set_fun$ )
(declare-fun hamming$a (Unit$ )Nat_llist$ )
(declare-fun finite_lprefix$ (Nat_llist$ )Nat_llist_bool_fun$ )
(assert (! (not (= (= hamming$ lNil$ )false )):named a0 ))
(assert (! (not (lnull$ hamming$ )):named a1 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$ (lmerge$ ?v0 )lNil$ )lNil$ ):pattern ((lmerge$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$ (lmerge$ lNil$ )?v0 )lNil$ ):pattern ((fun_app$ (lmerge$ lNil$ )?v0 )))):named a3 ))
(assert (! (= hamming$ (hamming$a unity$ )):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(= (= (fun_app$ (lmerge$ ?v0 )?v1 )lNil$ )(or (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a6 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ ))(= (= (fun_app$ (lmerge$a ?v0 ?v1 )?v2 )lNil$ )(or (= ?v1 lNil$ )(= ?v2 lNil$ )))):named a7 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat_llist$ ))(! (= (fun_app$ (lmerge$a ?v0 ?v1 )lNil$ )lNil$ ):pattern ((lmerge$a ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat_llist$ ))(! (= (fun_app$ (lmerge$a ?v0 lNil$ )?v1 )lNil$ ):pattern ((fun_app$ (lmerge$a ?v0 lNil$ )?v1 )))):named a9 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (fun_app$b (gen_lset$ ?v0 )lNil$ )?v0 ):pattern ((gen_lset$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$a (finite_lprefix$ ?v0 )lNil$ )(= ?v0 lNil$ )):pattern ((finite_lprefix$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$a (finite_lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$a (finite_lprefix$ lNil$ )?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(= (not (lnull$ (fun_app$ (lmerge$ ?v0 )?v1 )))(and (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a13 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(= (lnull$ (fun_app$ (lmerge$ ?v0 )?v1 ))(or (lnull$ ?v0 )(lnull$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ ))(= (not (lnull$ (fun_app$ (lmerge$a ?v0 ?v1 )?v2 )))(and (not (lnull$ ?v1 ))(not (lnull$ ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ ))(= (lnull$ (fun_app$ (lmerge$a ?v0 ?v1 )?v2 ))(or (lnull$ ?v1 )(lnull$ ?v2 )))):named a16 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a17 ))
(check-sat )
;(get-unsat-core )
