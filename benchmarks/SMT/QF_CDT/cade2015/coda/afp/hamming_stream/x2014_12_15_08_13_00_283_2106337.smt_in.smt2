;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-codatatypes ()((Nat_llist$ (lNil$ )(lCons$ (lhd$ Nat$ )(ltl$ Nat_llist$ )))))
(declare-sort Num$ 0)
(declare-fun one$ ()Num$)
(declare-fun select$ (Num$)Num$)
(declare-fun bit0$ (Num$ )Num$)
(declare-fun selecta$ (Num$)Num$)
(declare-fun bit1$ (Num$ )Num$)
(declare-fun lmap$ (Nat_nat_fun$ Nat_llist$ )Nat_llist$ )
(declare-fun one$a ()Nat$ )
(declare-fun times$ (Nat$ )Nat_nat_fun$ )
(declare-fun lmerge$ (Nat_llist$ Nat_llist$ )Nat_llist$ )
(declare-fun times$a (Num$ Num$ )Num$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun hamming$ ()Nat_llist$ )
(declare-fun numeral$ (Num$ )Nat$ )
(assert (! (not (= hamming$ (lCons$ one$a (lmerge$ (lmap$ (times$ (numeral$ (bit0$ one$ )))hamming$ )(lmerge$ (lmap$ (times$ (numeral$ (bit1$ one$ )))hamming$ )(lmap$ (times$ (numeral$ (bit1$ (bit0$ one$ ))))hamming$ )))))):named a0 ))
(assert (! (forall ((?v0 Num$ ))(= (= (numeral$ ?v0 )one$a )(= ?v0 one$ ))):named a1 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$a (numeral$ ?v0 ))(= one$ ?v0 ))):named a2 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit1$ ?v0 )one$ )false )):named a3 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit1$ ?v0 ))false )):named a4 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit1$ ?v1 ))false )):named a5 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit1$ ?v0 )(bit0$ ?v1 ))false )):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= one$a (fun_app$ (times$ ?v0 )?v1 ))(and (= ?v0 one$a )(= ?v1 one$a )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ (times$ ?v0 )?v1 )one$a )(and (= ?v0 one$a )(= ?v1 one$a )))):named a8 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit0$ ?v0 )one$ )false )):named a9 ))
(assert (! (forall ((?v0 Num$ ))(= (= one$ (bit0$ ?v0 ))false )):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ ?v0 )one$a )?v0 )):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ ?v0 )one$a )?v0 )):named a12 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (numeral$ ?v0 )(numeral$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(! (= (times$a (bit0$ ?v0 )(bit0$ ?v1 ))(bit0$ (bit0$ (times$a ?v0 ?v1 )))):pattern ((times$a (bit0$ ?v0 )(bit0$ ?v1 ))))):named a14 ))
(assert (! (forall ((?v0 Num$ )(?v1 Num$ ))(= (= (bit0$ ?v0 )(bit0$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(check-sat )
;(get-unsat-core )
