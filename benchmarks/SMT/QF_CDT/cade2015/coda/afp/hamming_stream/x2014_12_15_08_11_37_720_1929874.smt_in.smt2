;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_c_llist_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort C_c_bool_fun_fun$ 0 )
(declare-sort C_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_c_llist_fun$ 0 )
(declare-sort C_llist_a_llist_fun$ 0 )
(declare-sort C_llist_c_llist_fun$ 0 )
(declare-sort B_c_llist_fun_bool_fun$ 0 )
(declare-sort A_llist_b_c_llist_fun_fun$ 0 )
(declare-sort B_a_llist_c_llist_fun_fun$ 0 )
(declare-sort B_c_llist_c_llist_fun_fun$ 0 )
(declare-sort B_c_llist_fun_a_llist_fun$ 0 )
(declare-sort B_c_llist_fun_c_llist_fun$ 0 )
(declare-sort C_llist_b_c_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort C_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_a_llist_fun_fun$ 0 )
(declare-sort B_b_c_llist_fun_a_llist_fun_fun$ 0 )
(declare-sort B_b_c_llist_fun_c_llist_fun_fun$ 0 )
(declare-sort B_c_llist_fun_b_c_llist_fun_fun$ 0 )
(declare-sort C_llist_c_llist_c_llist_fun_fun$ 0 )
(declare-sort B_b_c_llist_fun_b_c_llist_fun_fun_fun$ 0 )
(declare-sort B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_c_llist_fun_fun$ 0 )
(declare-sort A_llist_c_llist_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_c_llist_fun_a_llist_c_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_b_c_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_b_c_llist_fun_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_c_llist_fun_a_llist_b_c_llist_fun_fun_fun$ 0 )
(declare-sort C_llist_a_llist_fun_c_llist_b_c_llist_fun_fun_fun$ 0 )
(declare-sort C_llist_c_llist_fun_c_llist_b_c_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_b_c_llist_fun_fun_a_llist_b_c_llist_fun_fun_fun$ 0 )
(declare-sort B_c_llist_fun_a_llist_fun_b_c_llist_fun_a_llist_fun_fun$ 0 )
(declare-sort B_c_llist_fun_a_llist_fun_b_c_llist_fun_c_llist_fun_fun$ 0 )
(declare-sort B_c_llist_fun_c_llist_fun_b_c_llist_fun_a_llist_fun_fun$ 0 )
(declare-sort B_c_llist_fun_c_llist_fun_b_c_llist_fun_c_llist_fun_fun$ 0 )
(declare-sort C_llist_b_c_llist_fun_fun_c_llist_b_c_llist_fun_fun_fun$ 0 )
(declare-sort B_c_llist_fun_a_llist_fun_b_c_llist_fun_b_c_llist_fun_fun_fun$ 0 )
(declare-sort B_c_llist_fun_b_c_llist_fun_fun_b_c_llist_fun_a_llist_fun_fun$ 0 )
(declare-sort B_c_llist_fun_c_llist_fun_b_c_llist_fun_b_c_llist_fun_fun_fun$ 0 )
(declare-sort B_c_llist_fun_b_c_llist_fun_fun_b_c_llist_fun_b_c_llist_fun_fun_fun$ 0 )
(declare-codatatypes ()((C_llist$ (lNil$ )(lCons$ (lhd$ C$ )(ltl$ C_llist$ )))(A_llist$ (lNil$a )(lCons$a (lhd$a A$ )(ltl$a A_llist$ )))))
(declare-fun f$ ()B_c_llist_fun_a_llist_fun$ )
(declare-fun g$ ()B_c_llist_fun_a_llist_fun$ )
(declare-fun uu$ ()B_c_llist_fun_a_llist_fun$ )
(declare-fun uua$ (A$ )A_bool_fun$ )
(declare-fun uub$ (A_llist_c_llist_fun$ )B_c_llist_fun_a_llist_fun_b_c_llist_fun_c_llist_fun_fun$ )
(declare-fun uuc$ (A_llist_a_llist_fun$ )B_c_llist_fun_a_llist_fun_b_c_llist_fun_a_llist_fun_fun$ )
(declare-fun uud$ (B_c_llist_fun_a_llist_fun$ )B_c_llist_fun_b_c_llist_fun_fun_b_c_llist_fun_a_llist_fun_fun$ )
(declare-fun uue$ (C_llist_c_llist_fun$ )A_llist_c_llist_fun_a_llist_c_llist_fun_fun$ )
(declare-fun uuf$ (C_llist_a_llist_fun$ )A_llist_c_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uug$ (A_llist_c_llist_fun$ )A_llist_a_llist_fun_a_llist_c_llist_fun_fun$ )
(declare-fun uuh$ (A_llist_a_llist_fun$ )A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uui$ (C_llist_a_llist_fun$ )B_c_llist_fun_c_llist_fun_b_c_llist_fun_a_llist_fun_fun$ )
(declare-fun uuj$ (C_llist_c_llist_fun$ )B_c_llist_fun_c_llist_fun_b_c_llist_fun_c_llist_fun_fun$ )
(declare-fun uuk$ (B_c_llist_fun_a_llist_fun$ )A_llist_b_c_llist_fun_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uul$ (C_llist_c_llist_fun$ )B_b_c_llist_fun_c_llist_fun_fun$ )
(declare-fun uum$ (C_llist_b_c_llist_fun_fun$ )B_b_c_llist_fun_b_c_llist_fun_fun_fun$ )
(declare-fun uun$ (C_llist_a_llist_fun$ )B_b_c_llist_fun_a_llist_fun_fun$ )
(declare-fun uuo$ (A_llist_b_c_llist_fun_fun$ )C_llist_a_llist_fun_c_llist_b_c_llist_fun_fun_fun$ )
(declare-fun uup$ (B_c_llist_fun_b_c_llist_fun_fun$ )C_llist_b_c_llist_fun_fun_c_llist_b_c_llist_fun_fun_fun$ )
(declare-fun uuq$ (C_llist_b_c_llist_fun_fun$ )C_llist_c_llist_fun_c_llist_b_c_llist_fun_fun_fun$ )
(declare-fun uur$ (C_llist_b_c_llist_fun_fun$ )A_llist_c_llist_fun_a_llist_b_c_llist_fun_fun_fun$ )
(declare-fun uus$ (C_llist_b_c_llist_fun_fun$ )B_c_llist_fun_c_llist_fun_b_c_llist_fun_b_c_llist_fun_fun_fun$ )
(declare-fun uut$ (A_llist_b_c_llist_fun_fun$ )A_llist_a_llist_fun_a_llist_b_c_llist_fun_fun_fun$ )
(declare-fun uuu$ (B_c_llist_fun_b_c_llist_fun_fun$ )A_llist_b_c_llist_fun_fun_a_llist_b_c_llist_fun_fun_fun$ )
(declare-fun uuv$ (B_c_llist_fun_b_c_llist_fun_fun$ )B_c_llist_fun_b_c_llist_fun_fun_b_c_llist_fun_b_c_llist_fun_fun_fun$ )
(declare-fun uuw$ (A_llist_b_c_llist_fun_fun$ )B_c_llist_fun_a_llist_fun_b_c_llist_fun_b_c_llist_fun_fun_fun$ )
(declare-fun uux$ (C_llist$ )C_llist_c_llist_fun$ )
(declare-fun uuy$ (A_llist$ )C_llist_a_llist_fun$ )
(declare-fun uuz$ (C_llist$ )A_llist_c_llist_fun$ )
(declare-fun uva$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun uvb$ (C_llist$ )B_c_llist_fun_c_llist_fun$ )
(declare-fun uvc$ (A_llist$ )B_c_llist_fun_a_llist_fun$ )
(declare-fun uvd$ (B$ )B_c_llist_fun_c_llist_fun$ )
(declare-fun uve$ (C_llist_b_c_llist_fun_fun$ )B_c_llist_c_llist_fun_fun$ )
(declare-fun uvf$ (A_llist_b_c_llist_fun_fun$ )B_a_llist_c_llist_fun_fun$ )
(declare-fun uvg$ (B_c_llist_fun_b_c_llist_fun_fun$ )B_b_c_llist_fun_c_llist_fun_fun$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun lmerge$ (A_a_bool_fun_fun$ )A_llist_a_llist_a_llist_fun_fun$ )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (B_c_llist_fun_a_llist_fun$ B_c_llist_fun$ )A_llist$ )
(declare-fun fun_ord$ (C_llist_c_llist_bool_fun_fun$ )B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )
(declare-fun lmerge$a (C_c_bool_fun_fun$ )C_llist_c_llist_c_llist_fun_fun$ )
(declare-fun lprefix$ ()C_llist_c_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_llist_a_llist_a_llist_fun_fun$ A_llist$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$c (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$d (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$e (B_c_llist_fun_c_llist_fun$ B_c_llist_fun$ )C_llist$ )
(declare-fun fun_app$f (B_c_llist_fun$ B$ )C_llist$ )
(declare-fun fun_app$g (C_llist_c_llist_fun$ C_llist$ )C_llist$ )
(declare-fun fun_app$h (B_c_llist_c_llist_fun_fun$ B$ )C_llist_c_llist_fun$ )
(declare-fun fun_app$i (C_llist_b_c_llist_fun_fun$ C_llist$ )B_c_llist_fun$ )
(declare-fun fun_app$j (A_llist_c_llist_fun$ A_llist$ )C_llist$ )
(declare-fun fun_app$k (B_a_llist_c_llist_fun_fun$ B$ )A_llist_c_llist_fun$ )
(declare-fun fun_app$l (A_llist_b_c_llist_fun_fun$ A_llist$ )B_c_llist_fun$ )
(declare-fun fun_app$m (B_b_c_llist_fun_c_llist_fun_fun$ B$ )B_c_llist_fun_c_llist_fun$ )
(declare-fun fun_app$n (B_c_llist_fun_b_c_llist_fun_fun$ B_c_llist_fun$ )B_c_llist_fun$ )
(declare-fun fun_app$o (A_llist_c_llist_fun_a_llist_c_llist_fun_fun$ A_llist_c_llist_fun$ )A_llist_c_llist_fun$ )
(declare-fun fun_app$p (B_c_llist_fun_c_llist_fun_b_c_llist_fun_c_llist_fun_fun$ B_c_llist_fun_c_llist_fun$ )B_c_llist_fun_c_llist_fun$ )
(declare-fun fun_app$q (A_llist_c_llist_fun_a_llist_a_llist_fun_fun$ A_llist_c_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$r (C_llist_a_llist_fun$ C_llist$ )A_llist$ )
(declare-fun fun_app$s (B_c_llist_fun_c_llist_fun_b_c_llist_fun_a_llist_fun_fun$ B_c_llist_fun_c_llist_fun$ )B_c_llist_fun_a_llist_fun$ )
(declare-fun fun_app$t (C_llist_c_llist_fun_c_llist_b_c_llist_fun_fun_fun$ C_llist_c_llist_fun$ )C_llist_b_c_llist_fun_fun$ )
(declare-fun fun_app$u (A_llist_c_llist_fun_a_llist_b_c_llist_fun_fun_fun$ A_llist_c_llist_fun$ )A_llist_b_c_llist_fun_fun$ )
(declare-fun fun_app$v (B_c_llist_fun_c_llist_fun_b_c_llist_fun_b_c_llist_fun_fun_fun$ B_c_llist_fun_c_llist_fun$ )B_c_llist_fun_b_c_llist_fun_fun$ )
(declare-fun fun_app$w (A_llist_a_llist_fun_a_llist_c_llist_fun_fun$ A_llist_a_llist_fun$ )A_llist_c_llist_fun$ )
(declare-fun fun_app$x (B_c_llist_fun_a_llist_fun_b_c_llist_fun_c_llist_fun_fun$ B_c_llist_fun_a_llist_fun$ )B_c_llist_fun_c_llist_fun$ )
(declare-fun fun_app$y (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$z (B_c_llist_fun_a_llist_fun_b_c_llist_fun_a_llist_fun_fun$ B_c_llist_fun_a_llist_fun$ )B_c_llist_fun_a_llist_fun$ )
(declare-fun lessThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun lprefix$a ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun monotone$ (B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ B_c_llist_fun_a_llist_fun$ )Bool )
(declare-fun fun_app$aa (C_llist_a_llist_fun_c_llist_b_c_llist_fun_fun_fun$ C_llist_a_llist_fun$ )C_llist_b_c_llist_fun_fun$ )
(declare-fun fun_app$ab (A_llist_a_llist_fun_a_llist_b_c_llist_fun_fun_fun$ A_llist_a_llist_fun$ )A_llist_b_c_llist_fun_fun$ )
(declare-fun fun_app$ac (B_c_llist_fun_a_llist_fun_b_c_llist_fun_b_c_llist_fun_fun_fun$ B_c_llist_fun_a_llist_fun$ )B_c_llist_fun_b_c_llist_fun_fun$ )
(declare-fun fun_app$ad (A_llist_b_c_llist_fun_fun_a_llist_a_llist_fun_fun$ A_llist_b_c_llist_fun_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ae (B_c_llist_fun_b_c_llist_fun_fun_b_c_llist_fun_a_llist_fun_fun$ B_c_llist_fun_b_c_llist_fun_fun$ )B_c_llist_fun_a_llist_fun$ )
(declare-fun fun_app$af (C_llist_b_c_llist_fun_fun_c_llist_b_c_llist_fun_fun_fun$ C_llist_b_c_llist_fun_fun$ )C_llist_b_c_llist_fun_fun$ )
(declare-fun fun_app$ag (A_llist_b_c_llist_fun_fun_a_llist_b_c_llist_fun_fun_fun$ A_llist_b_c_llist_fun_fun$ )A_llist_b_c_llist_fun_fun$ )
(declare-fun fun_app$ah (B_c_llist_fun_b_c_llist_fun_fun_b_c_llist_fun_b_c_llist_fun_fun_fun$ B_c_llist_fun_b_c_llist_fun_fun$ )B_c_llist_fun_b_c_llist_fun_fun$ )
(declare-fun fun_app$ai (B_b_c_llist_fun_a_llist_fun_fun$ B$ )B_c_llist_fun_a_llist_fun$ )
(declare-fun fun_app$aj (B_b_c_llist_fun_b_c_llist_fun_fun_fun$ B$ )B_c_llist_fun_b_c_llist_fun_fun$ )
(declare-fun fun_app$ak (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$al (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$am (C_llist_bool_fun$ C_llist$ )Bool )
(declare-fun fun_app$an (C_llist_c_llist_bool_fun_fun$ C_llist$ )C_llist_bool_fun$ )
(declare-fun fun_app$ao (C_llist_c_llist_c_llist_fun_fun$ C_llist$ )C_llist_c_llist_fun$ )
(declare-fun fun_app$ap (B_c_llist_fun_bool_fun$ B_c_llist_fun$ )Bool )
(declare-fun fun_app$aq (B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ B_c_llist_fun$ )B_c_llist_fun_bool_fun$ )
(declare-fun monotone$a (A_llist_a_llist_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ A_llist_c_llist_fun$ )Bool )
(declare-fun monotone$b (B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ B_c_llist_fun_c_llist_fun$ )Bool )
(declare-fun monotone$c (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun monotone$d (B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ B_c_llist_fun_b_c_llist_fun_fun$ )Bool )
(declare-fun monotone$e (C_llist_c_llist_bool_fun_fun$ C_llist_c_llist_bool_fun_fun$ C_llist_c_llist_fun$ )Bool )
(declare-fun monotone$f (C_llist_c_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ C_llist_a_llist_fun$ )Bool )
(declare-fun monotone$g (A_llist_a_llist_bool_fun_fun$ B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ A_llist_b_c_llist_fun_fun$ )Bool )
(declare-fun monotone$h (C_llist_c_llist_bool_fun_fun$ B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ C_llist_b_c_llist_fun_fun$ )Bool )
(declare-fun greaterThan$ (A_a_bool_fun_fun$ A$ )A_set$ )
(assert (! (forall ((?v0 B_c_llist_fun$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$a (fun_app$b (lmerge$ less$ )(fun_app$ f$ ?v0 ))(fun_app$ g$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$c (uua$ ?v0 )?v1 )(fun_app$c (fun_app$d less$ ?v1 )?v0 )):pattern ((fun_app$c (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B_c_llist_fun$ ))(! (= (fun_app$e (uvd$ ?v0 )?v1 )(fun_app$f ?v1 ?v0 )):pattern ((fun_app$e (uvd$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 C_llist_b_c_llist_fun_fun$ )(?v1 B$ )(?v2 C_llist$ ))(! (= (fun_app$g (fun_app$h (uve$ ?v0 )?v1 )?v2 )(fun_app$f (fun_app$i ?v0 ?v2 )?v1 )):pattern ((fun_app$g (fun_app$h (uve$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_b_c_llist_fun_fun$ )(?v1 B$ )(?v2 A_llist$ ))(! (= (fun_app$j (fun_app$k (uvf$ ?v0 )?v1 )?v2 )(fun_app$f (fun_app$l ?v0 ?v2 )?v1 )):pattern ((fun_app$j (fun_app$k (uvf$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 B_c_llist_fun_b_c_llist_fun_fun$ )(?v1 B$ )(?v2 B_c_llist_fun$ ))(! (= (fun_app$e (fun_app$m (uvg$ ?v0 )?v1 )?v2 )(fun_app$f (fun_app$n ?v0 ?v2 )?v1 )):pattern ((fun_app$e (fun_app$m (uvg$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 C_llist_c_llist_fun$ )(?v1 A_llist_c_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$j (fun_app$o (uue$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$o (uue$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 C_llist_c_llist_fun$ )(?v1 B_c_llist_fun_c_llist_fun$ )(?v2 B_c_llist_fun$ ))(! (= (fun_app$e (fun_app$p (uuj$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$p (uuj$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 C_llist_a_llist_fun$ )(?v1 A_llist_c_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$a (fun_app$q (uuf$ ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$q (uuf$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 C_llist_a_llist_fun$ )(?v1 B_c_llist_fun_c_llist_fun$ )(?v2 B_c_llist_fun$ ))(! (= (fun_app$ (fun_app$s (uui$ ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$s (uui$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 C_llist_b_c_llist_fun_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 C_llist$ ))(! (= (fun_app$i (fun_app$t (uuq$ ?v0 )?v1 )?v2 )(fun_app$i ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$i (fun_app$t (uuq$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 C_llist_b_c_llist_fun_fun$ )(?v1 A_llist_c_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$l (fun_app$u (uur$ ?v0 )?v1 )?v2 )(fun_app$i ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$u (uur$ ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 C_llist_b_c_llist_fun_fun$ )(?v1 B_c_llist_fun_c_llist_fun$ )(?v2 B_c_llist_fun$ ))(! (= (fun_app$n (fun_app$v (uus$ ?v0 )?v1 )?v2 )(fun_app$i ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$n (fun_app$v (uus$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_llist_c_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$j (fun_app$w (uug$ ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$w (uug$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_llist_c_llist_fun$ )(?v1 B_c_llist_fun_a_llist_fun$ )(?v2 B_c_llist_fun$ ))(! (= (fun_app$e (fun_app$x (uub$ ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$x (uub$ ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$a (fun_app$y (uuh$ ?v0 )?v1 )?v2 )(fun_app$a ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$y (uuh$ ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 B_c_llist_fun_a_llist_fun$ )(?v2 B_c_llist_fun$ ))(! (= (fun_app$ (fun_app$z (uuc$ ?v0 )?v1 )?v2 )(fun_app$a ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$z (uuc$ ?v0 )?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_b_c_llist_fun_fun$ )(?v1 C_llist_a_llist_fun$ )(?v2 C_llist$ ))(! (= (fun_app$i (fun_app$aa (uuo$ ?v0 )?v1 )?v2 )(fun_app$l ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$i (fun_app$aa (uuo$ ?v0 )?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_llist_b_c_llist_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$l (fun_app$ab (uut$ ?v0 )?v1 )?v2 )(fun_app$l ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$ab (uut$ ?v0 )?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_llist_b_c_llist_fun_fun$ )(?v1 B_c_llist_fun_a_llist_fun$ )(?v2 B_c_llist_fun$ ))(! (= (fun_app$n (fun_app$ac (uuw$ ?v0 )?v1 )?v2 )(fun_app$l ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$n (fun_app$ac (uuw$ ?v0 )?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 B_c_llist_fun_a_llist_fun$ )(?v1 A_llist_b_c_llist_fun_fun$ )(?v2 A_llist$ ))(! (= (fun_app$a (fun_app$ad (uuk$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$l ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$ad (uuk$ ?v0 )?v1 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 B_c_llist_fun_a_llist_fun$ )(?v1 B_c_llist_fun_b_c_llist_fun_fun$ )(?v2 B_c_llist_fun$ ))(! (= (fun_app$ (fun_app$ae (uud$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$ae (uud$ ?v0 )?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 B_c_llist_fun_b_c_llist_fun_fun$ )(?v1 C_llist_b_c_llist_fun_fun$ )(?v2 C_llist$ ))(! (= (fun_app$i (fun_app$af (uup$ ?v0 )?v1 )?v2 )(fun_app$n ?v0 (fun_app$i ?v1 ?v2 ))):pattern ((fun_app$i (fun_app$af (uup$ ?v0 )?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 B_c_llist_fun_b_c_llist_fun_fun$ )(?v1 A_llist_b_c_llist_fun_fun$ )(?v2 A_llist$ ))(! (= (fun_app$l (fun_app$ag (uuu$ ?v0 )?v1 )?v2 )(fun_app$n ?v0 (fun_app$l ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$ag (uuu$ ?v0 )?v1 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 B_c_llist_fun_b_c_llist_fun_fun$ )(?v1 B_c_llist_fun_b_c_llist_fun_fun$ )(?v2 B_c_llist_fun$ ))(! (= (fun_app$n (fun_app$ah (uuv$ ?v0 )?v1 )?v2 )(fun_app$n ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$n (fun_app$ah (uuv$ ?v0 )?v1 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 C_llist_c_llist_fun$ )(?v1 B$ )(?v2 B_c_llist_fun$ ))(! (= (fun_app$e (fun_app$m (uul$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$f ?v2 ?v1 ))):pattern ((fun_app$e (fun_app$m (uul$ ?v0 )?v1 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 C_llist_a_llist_fun$ )(?v1 B$ )(?v2 B_c_llist_fun$ ))(! (= (fun_app$ (fun_app$ai (uun$ ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$f ?v2 ?v1 ))):pattern ((fun_app$ (fun_app$ai (uun$ ?v0 )?v1 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 C_llist_b_c_llist_fun_fun$ )(?v1 B$ )(?v2 B_c_llist_fun$ ))(! (= (fun_app$n (fun_app$aj (uum$ ?v0 )?v1 )?v2 )(fun_app$i ?v0 (fun_app$f ?v2 ?v1 ))):pattern ((fun_app$n (fun_app$aj (uum$ ?v0 )?v1 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(! (= (fun_app$g (uux$ ?v0 )?v1 )?v0 ):pattern ((fun_app$g (uux$ ?v0 )?v1 )))):named a28 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 A_llist$ ))(! (= (fun_app$j (uuz$ ?v0 )?v1 )?v0 ):pattern ((fun_app$j (uuz$ ?v0 )?v1 )))):named a29 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 B_c_llist_fun$ ))(! (= (fun_app$e (uvb$ ?v0 )?v1 )?v0 ):pattern ((fun_app$e (uvb$ ?v0 )?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 C_llist$ ))(! (= (fun_app$r (uuy$ ?v0 )?v1 )?v0 ):pattern ((fun_app$r (uuy$ ?v0 )?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$a (uva$ ?v0 )?v1 )?v0 ):pattern ((fun_app$a (uva$ ?v0 )?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_c_llist_fun$ ))(! (= (fun_app$ (uvc$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (uvc$ ?v0 )?v1 )))):named a33 ))
(assert (! (not (monotone$ (fun_ord$ lprefix$ )lprefix$a uu$ )):named a34 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$c (fun_app$d less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$c (fun_app$d less$ ?v0 )?v2 ))):named a35 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$c (fun_app$d less$ ?v1 )?v2 ))(fun_app$c (fun_app$d less$ ?v0 )?v2 ))):named a36 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (and (fun_app$ak (fun_app$al lprefix$a ?v0 )?v1 )(fun_app$ak (fun_app$al lprefix$a ?v2 )?v3 ))(fun_app$ak (fun_app$al lprefix$a (fun_app$a (fun_app$b (lmerge$ less$ )?v0 )?v2 ))(fun_app$a (fun_app$b (lmerge$ less$ )?v1 )?v3 )))):named a37 ))
(assert (! (monotone$ (fun_ord$ lprefix$ )lprefix$a f$ ):named a38 ))
(assert (! (monotone$ (fun_ord$ lprefix$ )lprefix$a g$ ):named a39 ))
(assert (! (forall ((?v0 A$ ))(= (lessThan$ less$ ?v0 )(collect$ (uua$ ?v0 )))):named a40 ))
(assert (! (forall ((?v0 A$ ))(! (= (greaterThan$ less$ ?v0 )(collect$ (fun_app$d less$ ?v0 ))):pattern ((greaterThan$ less$ ?v0 )))):named a41 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_llist$ )(?v3 C_llist$ )(?v4 C_c_bool_fun_fun$ ))(=> (and (fun_app$am (fun_app$an lprefix$ ?v0 )?v1 )(fun_app$am (fun_app$an lprefix$ ?v2 )?v3 ))(fun_app$am (fun_app$an lprefix$ (fun_app$g (fun_app$ao (lmerge$a ?v4 )?v0 )?v2 ))(fun_app$g (fun_app$ao (lmerge$a ?v4 )?v1 )?v3 )))):named a42 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ )(?v4 A_a_bool_fun_fun$ ))(=> (and (fun_app$ak (fun_app$al lprefix$a ?v0 )?v1 )(fun_app$ak (fun_app$al lprefix$a ?v2 )?v3 ))(fun_app$ak (fun_app$al lprefix$a (fun_app$a (fun_app$b (lmerge$ ?v4 )?v0 )?v2 ))(fun_app$a (fun_app$b (lmerge$ ?v4 )?v1 )?v3 )))):named a43 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_c_llist_fun$ )(?v2 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v3 B_c_llist_fun_a_llist_fun$ ))(=> (and (monotone$a ?v0 lprefix$ ?v1 )(monotone$ ?v2 ?v0 ?v3 ))(monotone$b ?v2 lprefix$ (fun_app$x (uub$ ?v1 )?v3 )))):named a44 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v3 B_c_llist_fun_a_llist_fun$ ))(=> (and (monotone$c ?v0 lprefix$a ?v1 )(monotone$ ?v2 ?v0 ?v3 ))(monotone$ ?v2 lprefix$a (fun_app$z (uuc$ ?v1 )?v3 )))):named a45 ))
(assert (! (forall ((?v0 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v1 B_c_llist_fun_a_llist_fun$ )(?v2 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v3 B_c_llist_fun_b_c_llist_fun_fun$ ))(=> (and (monotone$ ?v0 lprefix$a ?v1 )(monotone$d ?v2 ?v0 ?v3 ))(monotone$ ?v2 lprefix$a (fun_app$ae (uud$ ?v1 )?v3 )))):named a46 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_c_llist_fun$ ))(=> (and (monotone$e ?v0 lprefix$ ?v1 )(monotone$a ?v2 ?v0 ?v3 ))(monotone$a ?v2 lprefix$ (fun_app$o (uue$ ?v1 )?v3 )))):named a47 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_a_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_c_llist_fun$ ))(=> (and (monotone$f ?v0 lprefix$a ?v1 )(monotone$a ?v2 ?v0 ?v3 ))(monotone$c ?v2 lprefix$a (fun_app$q (uuf$ ?v1 )?v3 )))):named a48 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_c_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (monotone$a ?v0 lprefix$ ?v1 )(monotone$c ?v2 ?v0 ?v3 ))(monotone$a ?v2 lprefix$ (fun_app$w (uug$ ?v1 )?v3 )))):named a49 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (monotone$c ?v0 lprefix$a ?v1 )(monotone$c ?v2 ?v0 ?v3 ))(monotone$c ?v2 lprefix$a (fun_app$y (uuh$ ?v1 )?v3 )))):named a50 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_a_llist_fun$ )(?v2 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v3 B_c_llist_fun_c_llist_fun$ ))(=> (and (monotone$f ?v0 lprefix$a ?v1 )(monotone$b ?v2 ?v0 ?v3 ))(monotone$ ?v2 lprefix$a (fun_app$s (uui$ ?v1 )?v3 )))):named a51 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v3 B_c_llist_fun_c_llist_fun$ ))(=> (and (monotone$e ?v0 lprefix$ ?v1 )(monotone$b ?v2 ?v0 ?v3 ))(monotone$b ?v2 lprefix$ (fun_app$p (uuj$ ?v1 )?v3 )))):named a52 ))
(assert (! (forall ((?v0 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v1 B_c_llist_fun_a_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_b_c_llist_fun_fun$ ))(=> (and (monotone$ ?v0 lprefix$a ?v1 )(monotone$g ?v2 ?v0 ?v3 ))(monotone$c ?v2 lprefix$a (fun_app$ad (uuk$ ?v1 )?v3 )))):named a53 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_c_llist_bool_fun_fun$ )(?v2 C_llist_c_llist_fun$ )(?v3 B$ ))(=> (monotone$e ?v0 ?v1 ?v2 )(monotone$b (fun_ord$ ?v0 )?v1 (fun_app$m (uul$ ?v2 )?v3 )))):named a54 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v2 C_llist_b_c_llist_fun_fun$ )(?v3 B$ ))(=> (monotone$h ?v0 ?v1 ?v2 )(monotone$d (fun_ord$ ?v0 )?v1 (fun_app$aj (uum$ ?v2 )?v3 )))):named a55 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 C_llist_a_llist_fun$ )(?v3 B$ ))(=> (monotone$f ?v0 ?v1 ?v2 )(monotone$ (fun_ord$ ?v0 )?v1 (fun_app$ai (uun$ ?v2 )?v3 )))):named a56 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_b_c_llist_fun_fun$ )(?v2 C_llist_c_llist_bool_fun_fun$ )(?v3 C_llist_a_llist_fun$ ))(=> (and (monotone$g ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$f ?v2 ?v0 ?v3 ))(monotone$h ?v2 (fun_ord$ lprefix$ )(fun_app$aa (uuo$ ?v1 )?v3 )))):named a57 ))
(assert (! (forall ((?v0 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v1 B_c_llist_fun_b_c_llist_fun_fun$ )(?v2 C_llist_c_llist_bool_fun_fun$ )(?v3 C_llist_b_c_llist_fun_fun$ ))(=> (and (monotone$d ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$h ?v2 ?v0 ?v3 ))(monotone$h ?v2 (fun_ord$ lprefix$ )(fun_app$af (uup$ ?v1 )?v3 )))):named a58 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_b_c_llist_fun_fun$ )(?v2 C_llist_c_llist_bool_fun_fun$ )(?v3 C_llist_c_llist_fun$ ))(=> (and (monotone$h ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$e ?v2 ?v0 ?v3 ))(monotone$h ?v2 (fun_ord$ lprefix$ )(fun_app$t (uuq$ ?v1 )?v3 )))):named a59 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_b_c_llist_fun_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_c_llist_fun$ ))(=> (and (monotone$h ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$a ?v2 ?v0 ?v3 ))(monotone$g ?v2 (fun_ord$ lprefix$ )(fun_app$u (uur$ ?v1 )?v3 )))):named a60 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_b_c_llist_fun_fun$ )(?v2 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v3 B_c_llist_fun_c_llist_fun$ ))(=> (and (monotone$h ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$b ?v2 ?v0 ?v3 ))(monotone$d ?v2 (fun_ord$ lprefix$ )(fun_app$v (uus$ ?v1 )?v3 )))):named a61 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_b_c_llist_fun_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (monotone$g ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$c ?v2 ?v0 ?v3 ))(monotone$g ?v2 (fun_ord$ lprefix$ )(fun_app$ab (uut$ ?v1 )?v3 )))):named a62 ))
(assert (! (forall ((?v0 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v1 B_c_llist_fun_b_c_llist_fun_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_b_c_llist_fun_fun$ ))(=> (and (monotone$d ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$g ?v2 ?v0 ?v3 ))(monotone$g ?v2 (fun_ord$ lprefix$ )(fun_app$ag (uuu$ ?v1 )?v3 )))):named a63 ))
(assert (! (forall ((?v0 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v1 B_c_llist_fun_b_c_llist_fun_fun$ )(?v2 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v3 B_c_llist_fun_b_c_llist_fun_fun$ ))(=> (and (monotone$d ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$d ?v2 ?v0 ?v3 ))(monotone$d ?v2 (fun_ord$ lprefix$ )(fun_app$ah (uuv$ ?v1 )?v3 )))):named a64 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_b_c_llist_fun_fun$ )(?v2 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v3 B_c_llist_fun_a_llist_fun$ ))(=> (and (monotone$g ?v0 (fun_ord$ lprefix$ )?v1 )(monotone$ ?v2 ?v0 ?v3 ))(monotone$d ?v2 (fun_ord$ lprefix$ )(fun_app$ac (uuw$ ?v1 )?v3 )))):named a65 ))
(assert (! (forall ((?v0 B_c_llist_fun_c_llist_fun$ )(?v1 B_c_llist_fun$ )(?v2 C_llist$ )(?v3 B_c_llist_fun_c_llist_fun$ )(?v4 C_llist_c_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 B_c_llist_fun$ ))(= (fun_app$e ?v0 ?v5 )(ite (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 )?v2 (fun_app$e ?v3 ?v5 ))))(and (forall ((?v5 B_c_llist_fun$ )(?v6 B_c_llist_fun$ ))(=> (and (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v6 )(not (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 )))(fun_app$am (fun_app$an ?v4 (fun_app$e ?v3 ?v5 ))(fun_app$e ?v3 ?v6 ))))(and (forall ((?v5 B_c_llist_fun$ ))(=> (not (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 ))(fun_app$am (fun_app$an ?v4 ?v2 )(fun_app$e ?v3 ?v5 ))))(fun_app$am (fun_app$an ?v4 ?v2 )?v2 ))))(monotone$b (fun_ord$ lprefix$ )?v4 ?v0 ))):named a66 ))
(assert (! (forall ((?v0 B_c_llist_fun_b_c_llist_fun_fun$ )(?v1 B_c_llist_fun$ )(?v2 B_c_llist_fun$ )(?v3 B_c_llist_fun_b_c_llist_fun_fun$ )(?v4 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ ))(=> (and (forall ((?v5 B_c_llist_fun$ ))(= (fun_app$n ?v0 ?v5 )(ite (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 )?v2 (fun_app$n ?v3 ?v5 ))))(and (forall ((?v5 B_c_llist_fun$ )(?v6 B_c_llist_fun$ ))(=> (and (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v6 )(not (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 )))(fun_app$ap (fun_app$aq ?v4 (fun_app$n ?v3 ?v5 ))(fun_app$n ?v3 ?v6 ))))(and (forall ((?v5 B_c_llist_fun$ ))(=> (not (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 ))(fun_app$ap (fun_app$aq ?v4 ?v2 )(fun_app$n ?v3 ?v5 ))))(fun_app$ap (fun_app$aq ?v4 ?v2 )?v2 ))))(monotone$d (fun_ord$ lprefix$ )?v4 ?v0 ))):named a67 ))
(assert (! (forall ((?v0 B_c_llist_fun_a_llist_fun$ )(?v1 B_c_llist_fun$ )(?v2 A_llist$ )(?v3 B_c_llist_fun_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 B_c_llist_fun$ ))(= (fun_app$ ?v0 ?v5 )(ite (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 )?v2 (fun_app$ ?v3 ?v5 ))))(and (forall ((?v5 B_c_llist_fun$ )(?v6 B_c_llist_fun$ ))(=> (and (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v6 )(not (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 )))(fun_app$ak (fun_app$al ?v4 (fun_app$ ?v3 ?v5 ))(fun_app$ ?v3 ?v6 ))))(and (forall ((?v5 B_c_llist_fun$ ))(=> (not (fun_app$ap (fun_app$aq (fun_ord$ lprefix$ )?v5 )?v1 ))(fun_app$ak (fun_app$al ?v4 ?v2 )(fun_app$ ?v3 ?v5 ))))(fun_app$ak (fun_app$al ?v4 ?v2 )?v2 ))))(monotone$ (fun_ord$ lprefix$ )?v4 ?v0 ))):named a68 ))
(assert (! (forall ((?v0 C_llist$ ))(fun_app$am (fun_app$an lprefix$ ?v0 )?v0 )):named a69 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ak (fun_app$al lprefix$a ?v0 )?v0 )):named a70 ))
(assert (! (forall ((?v0 C_llist$ ))(fun_app$am (fun_app$an lprefix$ ?v0 )?v0 )):named a71 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ak (fun_app$al lprefix$a ?v0 )?v0 )):named a72 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist$ ))(monotone$e ?v0 lprefix$ (uux$ ?v1 ))):named a73 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 A_llist$ ))(monotone$f ?v0 lprefix$a (uuy$ ?v1 ))):named a74 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 C_llist$ ))(monotone$a ?v0 lprefix$ (uuz$ ?v1 ))):named a75 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ ))(monotone$c ?v0 lprefix$a (uva$ ?v1 ))):named a76 ))
(assert (! (forall ((?v0 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v1 C_llist$ ))(monotone$b ?v0 lprefix$ (uvb$ ?v1 ))):named a77 ))
(assert (! (forall ((?v0 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v1 A_llist$ ))(monotone$ ?v0 lprefix$a (uvc$ ?v1 ))):named a78 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 B$ ))(monotone$b (fun_ord$ ?v0 )?v0 (uvd$ ?v1 ))):named a79 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist_c_llist_bool_fun_fun$ )(?v2 C_llist_b_c_llist_fun_fun$ ))(= (monotone$h ?v0 (fun_ord$ ?v1 )?v2 )(forall ((?v3 B$ ))(monotone$e ?v0 ?v1 (fun_app$h (uve$ ?v2 )?v3 ))))):named a80 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 C_llist_c_llist_bool_fun_fun$ )(?v2 A_llist_b_c_llist_fun_fun$ ))(= (monotone$g ?v0 (fun_ord$ ?v1 )?v2 )(forall ((?v3 B$ ))(monotone$a ?v0 ?v1 (fun_app$k (uvf$ ?v2 )?v3 ))))):named a81 ))
(assert (! (forall ((?v0 B_c_llist_fun_b_c_llist_fun_bool_fun_fun$ )(?v1 C_llist_c_llist_bool_fun_fun$ )(?v2 B_c_llist_fun_b_c_llist_fun_fun$ ))(= (monotone$d ?v0 (fun_ord$ ?v1 )?v2 )(forall ((?v3 B$ ))(monotone$b ?v0 ?v1 (fun_app$m (uvg$ ?v2 )?v3 ))))):named a82 ))
(check-sat )
;(get-unsat-core )
