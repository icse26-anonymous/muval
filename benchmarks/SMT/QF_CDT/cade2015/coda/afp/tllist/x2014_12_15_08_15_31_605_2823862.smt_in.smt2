;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ A$ )(ttl$ A_b_tllist$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun tmap$ (A_a_fun$ B_b_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun minus$ (Enat$ )Enat_enat_fun$ )
(declare-fun minus$a (Nat$ )Nat_nat_fun$ )
(declare-fun tdropn$ (Nat$ A_b_tllist$ )A_b_tllist$ )
(declare-fun fun_app$ (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun tlength$ (A_b_tllist$ )Enat$ )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(assert (! (not (= (tlength$ (tdropn$ n$ xs$ ))(fun_app$ (minus$ (tlength$ xs$ ))(enat$ n$ )))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$a (minus$a (fun_app$a (minus$a ?v0 )?v1 ))?v2 )(fun_app$a (minus$a (fun_app$a (minus$a ?v0 )?v2 ))?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (tdropn$ zero$ ?v0 )?v0 ):pattern ((tdropn$ zero$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (minus$ (enat$ zero$ ))?v0 )(enat$ zero$ )):pattern ((fun_app$ (minus$ (enat$ zero$ ))?v0 )))):named a4 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (minus$ ?v0 )(enat$ zero$ ))?v0 ):pattern ((minus$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ ))(= (tlength$ (tmap$ ?v0 ?v1 ?v2 ))(tlength$ ?v2 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (minus$ (enat$ ?v0 ))(enat$ ?v1 ))(enat$ (fun_app$a (minus$a ?v0 )?v1 ))):pattern ((fun_app$ (minus$ (enat$ ?v0 ))(enat$ ?v1 ))))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B$ ))(! (= (tdropn$ ?v0 (tNil$ ?v1 ))(tNil$ ?v1 )):pattern ((tdropn$ ?v0 (tNil$ ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (minus$a zero$ )?v0 )zero$ )):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (minus$a ?v0 )?v0 )zero$ ):pattern ((minus$a ?v0 )))):named a11 ))
(check-sat )
;(get-unsat-core )
