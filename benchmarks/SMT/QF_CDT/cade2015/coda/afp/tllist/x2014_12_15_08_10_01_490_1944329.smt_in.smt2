;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort B_set$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-codatatypes ()((A_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ A$ )(ttl$ A_b_tllist$ )))))
(declare-fun a$ ()C$ )
(declare-fun b$ ()B$ )
(declare-fun thd$a ()C_a_fun$ )
(declare-fun tnil$ ()C_b_fun$ )
(declare-fun ttl$a ()C_c_fun$ )
(declare-fun member$ (B$ B_set$ )Bool )
(declare-fun fun_app$ (C_bool_fun$ C$ )Bool )
(declare-fun iS_TNIL$ ()C_bool_fun$ )
(declare-fun is_TNil$ (A_b_tllist$ )Bool )
(declare-fun fun_app$a (C_b_fun$ C$ )B$ )
(declare-fun fun_app$b (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$c (C_c_fun$ C$ )C$ )
(declare-fun fun_app$d (C_a_fun$ C$ )A$ )
(declare-fun pred_tllist$ (A_bool_fun$ B_bool_fun$ A_b_tllist$ )Bool )
(declare-fun set2_tllist$ (A_b_tllist$ )B_set$ )
(declare-fun unfold_tllist$ (C_bool_fun$ C_b_fun$ C_a_fun$ C_c_fun$ C$ )A_b_tllist$ )
(assert (! (not (= (= (unfold_tllist$ iS_TNIL$ tnil$ thd$a ttl$a a$ )(tNil$ b$ ))(and (fun_app$ iS_TNIL$ a$ )(= b$ (fun_app$a tnil$ a$ ))))):named a0 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_b_fun$ )(?v3 C_a_fun$ )(?v4 C_c_fun$ ))(! (=> (fun_app$ ?v0 ?v1 )(= (unfold_tllist$ ?v0 ?v2 ?v3 ?v4 ?v1 )(tNil$ (fun_app$a ?v2 ?v1 )))):pattern ((unfold_tllist$ ?v0 ?v2 ?v3 ?v4 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 B$ ))(! (= (pred_tllist$ ?v0 ?v1 (tNil$ ?v2 ))(fun_app$b ?v1 ?v2 )):pattern ((pred_tllist$ ?v0 ?v1 (tNil$ ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(= (ttl$ (unfold_tllist$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(ite (fun_app$ ?v0 ?v4 )(tNil$ (fun_app$a ?v1 ?v4 ))(unfold_tllist$ ?v0 ?v1 ?v2 ?v3 (fun_app$c ?v3 ?v4 ))))):named a4 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(= (unfold_tllist$ ?v0 ?v1 ?v2 ?v3 ?v4 )(ite (fun_app$ ?v0 ?v4 )(tNil$ (fun_app$a ?v1 ?v4 ))(tCons$ (fun_app$d ?v2 ?v4 )(unfold_tllist$ ?v0 ?v1 ?v2 ?v3 (fun_app$c ?v3 ?v4 )))))):named a5 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_b_fun$ )(?v3 C_a_fun$ )(?v4 C_c_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (thd$ (unfold_tllist$ ?v0 ?v2 ?v3 ?v4 ?v1 ))(fun_app$d ?v3 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_b_fun$ )(?v3 C_a_fun$ )(?v4 C_c_fun$ ))(=> (fun_app$ ?v0 ?v1 )(= (terminal$ (unfold_tllist$ ?v0 ?v2 ?v3 ?v4 ?v1 ))(fun_app$a ?v2 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(= (not (is_TNil$ (unfold_tllist$ ?v0 ?v1 ?v2 ?v3 ?v4 )))(not (fun_app$ ?v0 ?v4 )))):named a8 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(= (is_TNil$ (unfold_tllist$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(fun_app$ ?v0 ?v4 ))):named a9 ))
(assert (! (forall ((?v0 B$ ))(member$ ?v0 (set2_tllist$ (tNil$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C$ )(?v2 C_b_fun$ )(?v3 C_a_fun$ )(?v4 C_c_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (ttl$ (unfold_tllist$ ?v0 ?v2 ?v3 ?v4 ?v1 ))(unfold_tllist$ ?v0 ?v2 ?v3 ?v4 (fun_app$c ?v4 ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 B$ ))(! (= (terminal$ (tNil$ ?v0 ))?v0 ):pattern ((tNil$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (terminal$ (tCons$ ?v0 ?v1 ))(terminal$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (terminal$ (ttl$ ?v0 ))(terminal$ ?v0 ))):named a15 ))
(check-sat )
;(get-unsat-core )
