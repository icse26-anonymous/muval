;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-codatatypes ()((A_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ A$ )(ttl$ A_b_tllist$ )))(A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_llist_b_tllist$ (tNil$a (terminal$a B$ ))(tCons$a (thd$a A_llist$ )(ttl$a A_llist_b_tllist$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun tdropn$ (Nat$ A_b_tllist$ )A_b_tllist$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun tconcat$ (B$ A_llist_b_tllist$ )A_b_tllist$ )
(declare-fun lappendt$ (A_llist$ A_b_tllist$ )A_b_tllist$ )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$ (B$ A_llist$ )A_b_tllist$ )
(assert (! (not (= (lappendt$ (ltake$ (enat$ n$ )(llist_of_tllist$ xs$ ))(tdropn$ n$ xs$ ))xs$ )):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_tllist$ ))(= (llist_of_tllist$ (lappendt$ ?v0 ?v1 ))(lappend$ ?v0 (llist_of_tllist$ ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (tdropn$ zero$ ?v0 )?v0 ):pattern ((tdropn$ zero$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B$ ))(! (= (tdropn$ ?v0 (tNil$ ?v1 ))(tNil$ ?v1 )):pattern ((tdropn$ ?v0 (tNil$ ?v1 ))))):named a5 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (lappendt$ lNil$ ?v0 )?v0 ):pattern ((lappendt$ lNil$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (llist_of_tllist$ (tllist_of_llist$ ?v0 ?v1 ))?v1 )):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(lprefix$ (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(lprefix$ ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (= (llist_of_tllist$ ?v0 )(lappend$ ?v1 ?v2 ))(exists ((?v3 A_b_tllist$ ))(and (= ?v0 (lappendt$ ?v1 ?v3 ))(and (= ?v2 (llist_of_tllist$ ?v3 ))(= (terminal$ ?v0 )(terminal$ ?v3 ))))))):named a9 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ )(?v2 A_llist_b_tllist$ ))(! (= (tconcat$ ?v0 (tCons$a ?v1 ?v2 ))(lappendt$ ?v1 (tconcat$ ?v0 ?v2 ))):pattern ((tconcat$ ?v0 (tCons$a ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a12 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_tllist$ )(?v2 A_llist$ )(?v3 A_llist_b_tllist$ ))(= (= (tCons$a ?v0 ?v1 )(tCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$ lNil$ ?v0 )true ):pattern ((lprefix$ lNil$ ?v0 )))):named a15 ))
(check-sat )
;(get-unsat-core )
