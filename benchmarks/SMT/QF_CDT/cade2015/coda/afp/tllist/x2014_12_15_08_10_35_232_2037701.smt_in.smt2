;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_llist_a_b_tllist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ A$ )(ttl$ A_b_tllist$ )))))
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun tmap$ (A_a_fun$ B_b_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun tset$ (A_b_tllist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_llist_a_b_tllist_fun$ A_llist$ )A_b_tllist$ )
(declare-fun is_TNil$ (A_b_tllist$ )Bool )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun fun_app$b (B_b_fun$ B$ )B$ )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$ (B$ )A_llist_a_b_tllist_fun$ )
(assert (! (not (= (ltl$ (llist_of_tllist$ xs$ ))(llist_of_tllist$ (ttl$ xs$ )))):named a0 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (ttl$ (fun_app$ (tllist_of_llist$ ?v0 )?v1 ))(fun_app$ (tllist_of_llist$ ?v0 )(ltl$ ?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (terminal$ (ttl$ ?v0 ))(terminal$ ?v0 ))):named a2 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ ))(= (ttl$ (tmap$ ?v0 ?v1 ?v2 ))(tmap$ ?v0 ?v1 (ttl$ ?v2 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(=> (member$ ?v0 (tset$ (ttl$ ?v1 )))(member$ ?v0 (tset$ ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (ttl$ (tCons$ ?v0 ?v1 ))?v1 ):pattern ((tCons$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 B$ ))(! (= (ttl$ (tNil$ ?v0 ))(tNil$ ?v0 )):pattern ((tNil$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (is_TNil$ ?v0 )(is_TNil$ (ttl$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 B$ ))(! (= (llist_of_tllist$ (tNil$ ?v0 ))lNil$ ):pattern ((tNil$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ ))(= (is_TNil$ (tmap$ ?v0 ?v1 ?v2 ))(is_TNil$ ?v2 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (terminal$ (tCons$ ?v0 ?v1 ))(terminal$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (is_TNil$ ?v0 )(= (tNil$ (terminal$ ?v0 ))?v0 ))):named a13 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ (tllist_of_llist$ ?v0 )lNil$ )(tNil$ ?v0 )):pattern ((tllist_of_llist$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (tmap$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))(tCons$ (fun_app$a ?v0 ?v2 )(tmap$ ?v0 ?v1 ?v3 ))):pattern ((tmap$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ )(?v3 B$ ))(= (= (tmap$ ?v0 ?v1 ?v2 )(tNil$ ?v3 ))(exists ((?v4 B$ ))(and (= ?v2 (tNil$ ?v4 ))(= (fun_app$b ?v1 ?v4 )?v3 ))))):named a16 ))
(assert (! (forall ((?v0 B$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_tllist$ ))(= (= (tNil$ ?v0 )(tmap$ ?v1 ?v2 ?v3 ))(exists ((?v4 B$ ))(and (= ?v3 (tNil$ ?v4 ))(= (fun_app$b ?v2 ?v4 )?v0 ))))):named a17 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (tmap$ ?v0 ?v1 (tNil$ ?v2 ))(tNil$ (fun_app$b ?v1 ?v2 ))):pattern ((tmap$ ?v0 ?v1 (tNil$ ?v2 ))))):named a18 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (is_TNil$ ?v0 )(exists ((?v1 B$ ))(= ?v0 (tNil$ ?v1 ))))):named a19 ))
(assert (! (forall ((?v0 B$ ))(! (= (terminal$ (tNil$ ?v0 ))?v0 ):pattern ((tNil$ ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (and (=> (is_TNil$ ?v0 )false )(=> (not (is_TNil$ ?v0 ))false ))false )):named a21 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (and (=> (is_TNil$ ?v0 )false )(=> (not (is_TNil$ ?v0 ))false ))false )):named a22 ))
(check-sat )
;(get-unsat-core )
