;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort Unit_b_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_b_tllist_fun$ 0 )
(declare-sort B_a_llist_b_tllist_fun$ 0 )
(declare-codatatypes ()((A_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ A$ )(ttl$ A_b_tllist$ )))(A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_b_tllist$ (tNil$a (terminal$a B$ ))(tCons$a (thd$a A_llist$ )(ttl$a A_llist_b_tllist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-fun a$ ()A_llist$ )
(declare-fun b$ ()B$ )
(declare-fun tr$ ()A_llist_b_tllist$ )
(declare-fun member$ (B$ B_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun tappend$ (A_b_tllist$ B_a_b_tllist_fun$ )A_b_tllist$ )
(declare-fun tconcat$ (B$ A_llist_b_tllist$ )A_b_tllist$ )
(declare-fun tfilter$ (Unit_b_fun$ A_bool_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lappendt$ (A_llist$ A_b_tllist$ )A_b_tllist$ )
(declare-fun tappend$a (A_llist_b_tllist$ B_a_llist_b_tllist_fun$ )A_llist_b_tllist$ )
(declare-fun tfilter$a (Unit_b_fun$ A_llist_bool_fun$ A_llist_b_tllist$ )A_llist_b_tllist$ )
(declare-fun tfilter$b (B$ A_bool_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun tfilter$c (B$ A_llist_bool_fun$ A_llist_b_tllist$ )A_llist_b_tllist$ )
(declare-fun lappendt$a (A_llist_llist$ A_llist_b_tllist$ )A_llist_b_tllist$ )
(declare-fun pred_tllist$ (A_bool_fun$ B_bool_fun$ A_b_tllist$ )Bool )
(declare-fun set2_tllist$ (A_b_tllist$ )B_set$ )
(declare-fun pred_tllist$a (A_llist_bool_fun$ B_bool_fun$ A_llist_b_tllist$ )Bool )
(declare-fun set2_tllist$a (A_llist_b_tllist$ )B_set$ )
(assert (! (not (= (tconcat$ b$ (tCons$a a$ tr$ ))(lappendt$ a$ (tconcat$ b$ tr$ )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_tllist$ )(?v2 A_llist$ )(?v3 A_llist_b_tllist$ ))(= (= (tCons$a ?v0 ?v1 )(tCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))(and (fun_app$ ?v0 ?v2 )(pred_tllist$ ?v0 ?v1 ?v3 ))):pattern ((pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a3 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 B_bool_fun$ )(?v2 A_llist$ )(?v3 A_llist_b_tllist$ ))(! (= (pred_tllist$a ?v0 ?v1 (tCons$a ?v2 ?v3 ))(and (fun_app$a ?v0 ?v2 )(pred_tllist$a ?v0 ?v1 ?v3 ))):pattern ((pred_tllist$a ?v0 ?v1 (tCons$a ?v2 ?v3 ))))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_b_tllist$ ))(! (= (lappendt$ (lCons$ ?v0 ?v1 )?v2 )(tCons$ ?v0 (lappendt$ ?v1 ?v2 ))):pattern ((lappendt$ (lCons$ ?v0 ?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_b_tllist$ ))(! (= (lappendt$a (lCons$a ?v0 ?v1 )?v2 )(tCons$a ?v0 (lappendt$a ?v1 ?v2 ))):pattern ((lappendt$a (lCons$a ?v0 ?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 Unit_b_fun$ )(?v1 A_bool_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (tfilter$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))(ite (fun_app$ ?v1 ?v2 )(tCons$ ?v2 (tfilter$ ?v0 ?v1 ?v3 ))(tfilter$ ?v0 ?v1 ?v3 ))):pattern ((tfilter$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a7 ))
(assert (! (forall ((?v0 Unit_b_fun$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist$ )(?v3 A_llist_b_tllist$ ))(! (= (tfilter$a ?v0 ?v1 (tCons$a ?v2 ?v3 ))(ite (fun_app$a ?v1 ?v2 )(tCons$a ?v2 (tfilter$a ?v0 ?v1 ?v3 ))(tfilter$a ?v0 ?v1 ?v3 ))):pattern ((tfilter$a ?v0 ?v1 (tCons$a ?v2 ?v3 ))))):named a8 ))
(assert (! (forall ((?v0 B$ )(?v1 A_bool_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (tfilter$b ?v0 ?v1 (tCons$ ?v2 ?v3 ))(ite (fun_app$ ?v1 ?v2 )(tCons$ ?v2 (tfilter$b ?v0 ?v1 ?v3 ))(tfilter$b ?v0 ?v1 ?v3 ))):pattern ((tfilter$b ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a9 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist$ )(?v3 A_llist_b_tllist$ ))(! (= (tfilter$c ?v0 ?v1 (tCons$a ?v2 ?v3 ))(ite (fun_app$a ?v1 ?v2 )(tCons$a ?v2 (tfilter$c ?v0 ?v1 ?v3 ))(tfilter$c ?v0 ?v1 ?v3 ))):pattern ((tfilter$c ?v0 ?v1 (tCons$a ?v2 ?v3 ))))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 B_a_b_tllist_fun$ ))(! (= (tappend$ (tCons$ ?v0 ?v1 )?v2 )(tCons$ ?v0 (tappend$ ?v1 ?v2 ))):pattern ((tappend$ (tCons$ ?v0 ?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_tllist$ )(?v2 B_a_llist_b_tllist_fun$ ))(! (= (tappend$a (tCons$a ?v0 ?v1 )?v2 )(tCons$a ?v0 (tappend$a ?v1 ?v2 ))):pattern ((tappend$a (tCons$a ?v0 ?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_llist_b_tllist$ ))(! (= (lappendt$a lNil$a ?v0 )?v0 ):pattern ((lappendt$a lNil$a ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (lappendt$ lNil$ ?v0 )?v0 ):pattern ((lappendt$ lNil$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (set2_tllist$ (tCons$ ?v0 ?v1 ))(set2_tllist$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_tllist$ ))(! (= (set2_tllist$a (tCons$a ?v0 ?v1 ))(set2_tllist$a ?v1 )):pattern ((tCons$a ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_tllist$ )(?v2 A$ ))(=> (member$ ?v0 (set2_tllist$ ?v1 ))(member$ ?v0 (set2_tllist$ (tCons$ ?v2 ?v1 ))))):named a17 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_b_tllist$ )(?v2 A_llist$ ))(=> (member$ ?v0 (set2_tllist$a ?v1 ))(member$ ?v0 (set2_tllist$a (tCons$a ?v2 ?v1 ))))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (terminal$ (tCons$ ?v0 ?v1 ))(terminal$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_tllist$ ))(! (= (terminal$a (tCons$a ?v0 ?v1 ))(terminal$a ?v1 )):pattern ((tCons$a ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (not (= ?v0 lNil$a ))(exists ((?v1 A_llist$ )(?v2 A_llist_llist$ ))(= ?v0 (lCons$a ?v1 ?v2 ))))):named a23 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (= ?v0 lNil$ ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a24 ))
(check-sat )
;(get-unsat-core )
