;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ A$ )(ttl$ A_b_tllist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun uua$ (A_a_bool_fun_fun$ A_a_fun$ )A_a_bool_fun_fun$ )
(declare-fun uub$ (B_b_bool_fun_fun$ B_b_fun$ )B_b_bool_fun_fun$ )
(declare-fun uuc$ (A_a_bool_fun_fun$ A_a_fun$ )A_a_bool_fun_fun$ )
(declare-fun uud$ (B_b_bool_fun_fun$ B_b_fun$ )B_b_bool_fun_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun tmap$ (A_a_fun$ B_b_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun tnth$ (A_b_tllist$ Nat$ )A$ )
(declare-fun tset$ (A_b_tllist$ )A_set$ )
(declare-fun less$a (Nat$ )Nat_bool_fun$ )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun tlength$ (A_b_tllist$ )Enat$ )
(declare-fun fun_app$a (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$b (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$c (B_b_fun$ B$ )B$ )
(declare-fun fun_app$d (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$e (A_a_fun$ A$ )A$ )
(declare-fun fun_app$f (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$g (Nat_bool_fun$ Nat$ )Bool )
(declare-fun tllist_all2$ (A_a_bool_fun_fun$ B_b_bool_fun_fun$ A_b_tllist$ A_b_tllist$ )Bool )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(exists ((?v1 Nat$ ))(and (= ?v0 (tnth$ xs$ ?v1 ))(fun_app$a (less$ (enat$ ?v1 ))(tlength$ xs$ ))))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$b (uub$ ?v0 ?v1 )?v2 )(fun_app$b ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$b (uub$ ?v0 ?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$d (uua$ ?v0 ?v1 )?v2 )(fun_app$d ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$d (uua$ ?v0 ?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B$ ))(! (= (fun_app$f (fun_app$b (uud$ ?v0 ?v1 )?v2 )?v3 )(fun_app$f (fun_app$b ?v0 ?v2 )(fun_app$c ?v1 ?v3 ))):pattern ((fun_app$f (fun_app$b (uud$ ?v0 ?v1 )?v2 )?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_fun$ )(?v2 A$ )(?v3 A$ ))(! (= (fun_app$ (fun_app$d (uuc$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ (fun_app$d ?v0 ?v2 )(fun_app$e ?v1 ?v3 ))):pattern ((fun_app$ (fun_app$d (uuc$ ?v0 ?v1 )?v2 )?v3 )))):named a4 ))
(assert (! (not (= (tset$ xs$ )(collect$ uu$ ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (fun_app$a (less$ ?v0 )(enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_tllist$ )(?v2 A_a_fun$ )(?v3 B_b_fun$ ))(=> (fun_app$a (less$ (enat$ ?v0 ))(tlength$ ?v1 ))(= (tnth$ (tmap$ ?v2 ?v3 ?v1 )?v0 )(fun_app$e ?v2 (tnth$ ?v1 ?v0 ))))):named a8 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_b_tllist$ )(?v3 A_b_tllist$ )(?v4 Nat$ ))(=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(fun_app$a (less$ (enat$ ?v4 ))(tlength$ ?v3 )))(fun_app$ (fun_app$d ?v0 (tnth$ ?v2 ?v4 ))(tnth$ ?v3 ?v4 )))):named a9 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_b_tllist$ )(?v3 A_b_tllist$ )(?v4 Nat$ ))(=> (and (tllist_all2$ ?v0 ?v1 ?v2 ?v3 )(fun_app$a (less$ (enat$ ?v4 ))(tlength$ ?v2 )))(fun_app$ (fun_app$d ?v0 (tnth$ ?v2 ?v4 ))(tnth$ ?v3 ?v4 )))):named a10 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$a (less$ ?v3 )?v2 )(fun_app$a ?v0 ?v3 )))(fun_app$a ?v0 ?v2 )))(fun_app$a ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$a (less$ ?v0 )?v1 )(fun_app$a (less$ ?v1 )?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$g (less$a ?v0 )?v1 )(fun_app$g (less$a ?v1 )?v0 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (fun_app$a (less$ ?v0 )?v1 ))(or (fun_app$a (less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (fun_app$g (less$a ?v0 )?v1 ))(or (fun_app$g (less$a ?v1 )?v0 )(= ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (=> (fun_app$a (less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$a (less$ ?v1 )?v0 )false )))false )):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (=> (fun_app$g (less$a ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$g (less$a ?v1 )?v0 )false )))false )):named a17 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$a (less$ ?v3 )?v2 )(fun_app$a ?v0 ?v3 )))(fun_app$a ?v0 ?v2 )))(fun_app$a ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(=> (fun_app$g (less$a ?v3 )?v2 )(fun_app$g ?v0 ?v3 )))(fun_app$g ?v0 ?v2 )))(fun_app$g ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$a (less$ (enat$ ?v0 ))(enat$ ?v1 ))(fun_app$g (less$a ?v0 )?v1 )):pattern ((fun_app$a (less$ (enat$ ?v0 ))(enat$ ?v1 ))))):named a20 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ ))(= (tlength$ (tmap$ ?v0 ?v1 ?v2 ))(tlength$ ?v2 ))):named a21 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_a_fun$ )(?v3 B_b_fun$ )(?v4 A_b_tllist$ )(?v5 A_b_tllist$ ))(= (tllist_all2$ ?v0 ?v1 (tmap$ ?v2 ?v3 ?v4 )?v5 )(tllist_all2$ (uua$ ?v0 ?v2 )(uub$ ?v1 ?v3 )?v4 ?v5 ))):named a22 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_a_fun$ )(?v3 B_b_fun$ )(?v4 A_b_tllist$ )(?v5 A_b_tllist$ ))(= (tllist_all2$ ?v0 ?v1 (tmap$ ?v2 ?v3 ?v4 )?v5 )(tllist_all2$ (uua$ ?v0 ?v2 )(uub$ ?v1 ?v3 )?v4 ?v5 ))):named a23 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_b_tllist$ )(?v3 A_a_fun$ )(?v4 B_b_fun$ )(?v5 A_b_tllist$ ))(= (tllist_all2$ ?v0 ?v1 ?v2 (tmap$ ?v3 ?v4 ?v5 ))(tllist_all2$ (uuc$ ?v0 ?v3 )(uud$ ?v1 ?v4 )?v2 ?v5 ))):named a24 ))
(check-sat )
;(get-unsat-core )
