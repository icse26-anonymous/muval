;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort D_bool_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort B_d_b_tllist_fun$ 0 )
(declare-sort C_d_bool_fun_fun$ 0 )
(declare-sort D_b_tllist_bool_fun$ 0 )
(declare-sort A_c_llist_a_prod_fun$ 0 )
(declare-sort D_llist_d_b_tllist_fun$ 0 )
(declare-sort C_llist_a_prod_d_b_tllist_bool_fun_fun$ 0 )
(declare-codatatypes ()((C_llist$ (lNil$ )(lCons$ (lhd$ C$ )(ltl$ C_llist$ )))))
(declare-sort C_llist_a_prod$ 0)
(declare-fun fst$ (C_llist_a_prod$)C_llist$)
(declare-fun snd$ (C_llist_a_prod$)A$)
(declare-fun pair$ (C_llist$ A$ )C_llist_a_prod$)
(declare-codatatypes ()((D_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ D$ )(ttl$ D_b_tllist$ )))(D_llist$ (lNil$a )(lCons$a (lhd$a D$ )(ltl$a D_llist$ )))))
(declare-fun a$ ()C_d_bool_fun_fun$ )
(declare-fun b$ ()A_b_bool_fun_fun$ )
(declare-fun uu$ ()A_c_llist_a_prod_fun$ )
(declare-fun uua$ ()B_d_b_tllist_fun$ )
(declare-fun fun_app$ (A_c_llist_a_prod_fun$ A$ )C_llist_a_prod$ )
(declare-fun rel_fun$ (A_b_bool_fun_fun$ C_llist_a_prod_d_b_tllist_bool_fun_fun$ A_c_llist_a_prod_fun$ B_d_b_tllist_fun$ )Bool )
(declare-fun fun_app$a (B_d_b_tllist_fun$ B$ )D_b_tllist$ )
(declare-fun fun_app$b (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$c (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$d (D_b_tllist_bool_fun$ D_b_tllist$ )Bool )
(declare-fun fun_app$e (C_llist_a_prod_d_b_tllist_bool_fun_fun$ C_llist_a_prod$ )D_b_tllist_bool_fun$ )
(declare-fun fun_app$f (D_llist_d_b_tllist_fun$ D_llist$ )D_b_tllist$ )
(declare-fun pcr_tllist$ (C_d_bool_fun_fun$ A_b_bool_fun_fun$ )C_llist_a_prod_d_b_tllist_bool_fun_fun$ )
(declare-fun pred_tllist$ (D_bool_fun$ B_bool_fun$ D_b_tllist$ )Bool )
(declare-fun llist_of_tllist$ (D_b_tllist$ )D_llist$ )
(declare-fun tllist_of_llist$ (B$ )D_llist_d_b_tllist_fun$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(pair$ lNil$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$a uua$ ?v0 )(tNil$ ?v0 )):pattern ((fun_app$a uua$ ?v0 )))):named a1 ))
(assert (! (not (rel_fun$ b$ (pcr_tllist$ a$ b$ )uu$ uua$ )):named a2 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 C_llist_a_prod_d_b_tllist_bool_fun_fun$ )(?v2 A_c_llist_a_prod_fun$ )(?v3 B_d_b_tllist_fun$ ))(=> (forall ((?v4 A$ )(?v5 B$ ))(=> (fun_app$b (fun_app$c ?v0 ?v4 )?v5 )(fun_app$d (fun_app$e ?v1 (fun_app$ ?v2 ?v4 ))(fun_app$a ?v3 ?v5 ))))(rel_fun$ ?v0 ?v1 ?v2 ?v3 ))):named a4 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 A$ )(?v2 C_llist$ )(?v3 A$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 A$ )(?v2 C_llist$ )(?v3 A$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 D_bool_fun$ )(?v1 B_bool_fun$ )(?v2 B$ ))(! (= (pred_tllist$ ?v0 ?v1 (tNil$ ?v2 ))(fun_app$b ?v1 ?v2 )):pattern ((pred_tllist$ ?v0 ?v1 (tNil$ ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 B$ ))(! (= (llist_of_tllist$ (tNil$ ?v0 ))lNil$a ):pattern ((tNil$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 B$ )(?v1 D_llist$ )(?v2 B$ ))(= (= (fun_app$f (tllist_of_llist$ ?v0 )?v1 )(tNil$ ?v2 ))(and (= ?v2 ?v0 )(= ?v1 lNil$a )))):named a9 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 D_llist$ ))(= (= (tNil$ ?v0 )(fun_app$f (tllist_of_llist$ ?v1 )?v2 ))(and (= ?v0 ?v1 )(= ?v2 lNil$a )))):named a10 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$f (tllist_of_llist$ ?v0 )lNil$a )(tNil$ ?v0 )):pattern ((tllist_of_llist$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 C_llist_a_prod_d_b_tllist_bool_fun_fun$ )(?v2 A_c_llist_a_prod_fun$ )(?v3 B_d_b_tllist_fun$ )(?v4 A$ )(?v5 B$ ))(=> (and (rel_fun$ ?v0 ?v1 ?v2 ?v3 )(and (fun_app$b (fun_app$c ?v0 ?v4 )?v5 )(=> (fun_app$d (fun_app$e ?v1 (fun_app$ ?v2 ?v4 ))(fun_app$a ?v3 ?v5 ))false )))false )):named a12 ))
(assert (! (forall ((?v0 B$ )(?v1 D_llist$ ))(= (llist_of_tllist$ (fun_app$f (tllist_of_llist$ ?v0 )?v1 ))?v1 )):named a13 ))
(assert (! (forall ((?v0 C_llist_a_prod$ ))(exists ((?v1 C_llist$ )(?v2 A$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 A$ )(?v2 C_llist$ )(?v3 A$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a15 ))
(assert (! (forall ((?v0 C_llist_a_prod$ ))(=> (forall ((?v1 C_llist$ )(?v2 A$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a16 ))
(check-sat )
;(get-unsat-core )
