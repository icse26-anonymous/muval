;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort B_a_b_tllist_fun$ 0 )
(declare-sort B_a_c_tllist_fun$ 0 )
(declare-sort C_a_b_tllist_fun$ 0 )
(declare-sort C_a_c_tllist_fun$ 0 )
(declare-sort A_b_tllist_bool_fun$ 0 )
(declare-sort A_c_tllist_bool_fun$ 0 )
(declare-sort B_a_b_tllist_fun_a_b_tllist_fun$ 0 )
(declare-sort C_a_c_tllist_fun_a_c_tllist_fun$ 0 )
(declare-codatatypes ()((A_c_tllist$ (tNil$ (terminal$ C$ ))(tCons$ (thd$ A$ )(ttl$ A_c_tllist$ )))(A_b_tllist$ (tNil$a (terminal$a B$ ))(tCons$a (thd$a A$ )(ttl$a A_b_tllist$ )))(A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun f$ ()B_a_c_tllist_fun$ )
(declare-fun uu$ ()C_a_c_tllist_fun$ )
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun uua$ ()B_a_b_tllist_fun$ )
(declare-fun tmap$ (A_a_fun$ B_c_fun$ A_b_tllist$ )A_c_tllist$ )
(declare-fun tcast$ (A_b_tllist$ )A_c_tllist$ )
(declare-fun tmap$a (A_a_fun$ C_c_fun$ A_c_tllist$ )A_c_tllist$ )
(declare-fun tmap$b (A_a_fun$ C_b_fun$ A_c_tllist$ )A_b_tllist$ )
(declare-fun tmap$c (A_a_fun$ B_b_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun fun_app$ (C_a_c_tllist_fun$ C$ )A_c_tllist$ )
(declare-fun is_TNil$ (A_c_tllist$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun tappend$ (A_b_tllist$ B_a_c_tllist_fun$ )A_c_tllist$ )
(declare-fun fun_app$a (B_a_b_tllist_fun$ B$ )A_b_tllist$ )
(declare-fun fun_app$b (C_a_b_tllist_fun$ C$ )A_b_tllist$ )
(declare-fun fun_app$c (C_a_c_tllist_fun_a_c_tllist_fun$ C_a_c_tllist_fun$ )A_c_tllist$ )
(declare-fun fun_app$d (B_a_c_tllist_fun$ B$ )A_c_tllist$ )
(declare-fun fun_app$e (B_a_b_tllist_fun_a_b_tllist_fun$ B_a_b_tllist_fun$ )A_b_tllist$ )
(declare-fun fun_app$f (B_c_fun$ B$ )C$ )
(declare-fun fun_app$g (C_c_fun$ C$ )C$ )
(declare-fun fun_app$h (C_b_fun$ C$ )B$ )
(declare-fun fun_app$i (B_b_fun$ B$ )B$ )
(declare-fun fun_app$j (A_c_tllist_bool_fun$ A_c_tllist$ )Bool )
(declare-fun fun_app$k (A_b_tllist_bool_fun$ A_b_tllist$ )Bool )
(declare-fun is_TNil$a (A_b_tllist$ )Bool )
(declare-fun tappend$a (A_c_tllist$ C_a_b_tllist_fun$ )A_b_tllist$ )
(declare-fun tappend$b (A_c_tllist$ )C_a_c_tllist_fun_a_c_tllist_fun$ )
(declare-fun tappend$c (A_b_tllist$ )B_a_b_tllist_fun_a_b_tllist_fun$ )
(declare-fun undefined$ ()C$ )
(declare-fun undefined$a ()B$ )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$ (C$ A_llist$ )A_c_tllist$ )
(declare-fun llist_of_tllist$a (A_c_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$a (B$ A_llist$ )A_b_tllist$ )
(assert (! (forall ((?v0 C$ ))(! (= (fun_app$ uu$ ?v0 )(tNil$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$a uua$ ?v0 )(tNil$a ?v0 )):pattern ((fun_app$a uua$ ?v0 )))):named a1 ))
(assert (! (not (= (tappend$ xs$ f$ )(tcast$ xs$ ))):named a2 ))
(assert (! (not (lfinite$ (llist_of_tllist$ xs$ ))):named a3 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 C_a_b_tllist_fun$ ))(= (lfinite$ (llist_of_tllist$ (tappend$a ?v0 ?v1 )))(and (lfinite$ (llist_of_tllist$a ?v0 ))(lfinite$ (llist_of_tllist$ (fun_app$b ?v1 (terminal$ ?v0 ))))))):named a4 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 C_a_c_tllist_fun$ ))(= (lfinite$ (llist_of_tllist$a (fun_app$c (tappend$b ?v0 )?v1 )))(and (lfinite$ (llist_of_tllist$a ?v0 ))(lfinite$ (llist_of_tllist$a (fun_app$ ?v1 (terminal$ ?v0 ))))))):named a5 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 B_a_c_tllist_fun$ ))(= (lfinite$ (llist_of_tllist$a (tappend$ ?v0 ?v1 )))(and (lfinite$ (llist_of_tllist$ ?v0 ))(lfinite$ (llist_of_tllist$a (fun_app$d ?v1 (terminal$a ?v0 ))))))):named a6 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 B_a_b_tllist_fun$ ))(= (lfinite$ (llist_of_tllist$ (fun_app$e (tappend$c ?v0 )?v1 )))(and (lfinite$ (llist_of_tllist$ ?v0 ))(lfinite$ (llist_of_tllist$ (fun_app$a ?v1 (terminal$a ?v0 ))))))):named a7 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 C_a_c_tllist_fun$ ))(= (terminal$ (fun_app$c (tappend$b ?v0 )?v1 ))(ite (lfinite$ (llist_of_tllist$a ?v0 ))(terminal$ (fun_app$ ?v1 (terminal$ ?v0 )))(terminal$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 B_a_b_tllist_fun$ ))(= (terminal$a (fun_app$e (tappend$c ?v0 )?v1 ))(ite (lfinite$ (llist_of_tllist$ ?v0 ))(terminal$a (fun_app$a ?v1 (terminal$a ?v0 )))(terminal$a ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_c_tllist$ ))(=> (is_TNil$ ?v0 )(lfinite$ (llist_of_tllist$a ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (is_TNil$a ?v0 )(lfinite$ (llist_of_tllist$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 B_a_b_tllist_fun$ ))(! (= (fun_app$e (tappend$c (tCons$a ?v0 ?v1 ))?v2 )(tCons$a ?v0 (fun_app$e (tappend$c ?v1 )?v2 ))):pattern ((fun_app$e (tappend$c (tCons$a ?v0 ?v1 ))?v2 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_tllist$ )(?v2 C_a_b_tllist_fun$ ))(! (= (tappend$a (tCons$ ?v0 ?v1 )?v2 )(tCons$a ?v0 (tappend$a ?v1 ?v2 ))):pattern ((tappend$a (tCons$ ?v0 ?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_tllist$ )(?v2 C_a_c_tllist_fun$ ))(! (= (fun_app$c (tappend$b (tCons$ ?v0 ?v1 ))?v2 )(tCons$ ?v0 (fun_app$c (tappend$b ?v1 )?v2 ))):pattern ((fun_app$c (tappend$b (tCons$ ?v0 ?v1 ))?v2 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 B_a_c_tllist_fun$ ))(! (= (tappend$ (tCons$a ?v0 ?v1 )?v2 )(tCons$ ?v0 (tappend$ ?v1 ?v2 ))):pattern ((tappend$ (tCons$a ?v0 ?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 C$ )(?v1 C_a_c_tllist_fun$ ))(! (= (fun_app$c (tappend$b (tNil$ ?v0 ))?v1 )(fun_app$ ?v1 ?v0 )):pattern ((fun_app$c (tappend$b (tNil$ ?v0 ))?v1 )))):named a16 ))
(assert (! (forall ((?v0 C$ )(?v1 C_a_b_tllist_fun$ ))(! (= (tappend$a (tNil$ ?v0 )?v1 )(fun_app$b ?v1 ?v0 )):pattern ((tappend$a (tNil$ ?v0 )?v1 )))):named a17 ))
(assert (! (forall ((?v0 B$ )(?v1 B_a_b_tllist_fun$ ))(! (= (fun_app$e (tappend$c (tNil$a ?v0 ))?v1 )(fun_app$a ?v1 ?v0 )):pattern ((fun_app$e (tappend$c (tNil$a ?v0 ))?v1 )))):named a18 ))
(assert (! (forall ((?v0 B$ )(?v1 B_a_c_tllist_fun$ ))(! (= (tappend$ (tNil$a ?v0 )?v1 )(fun_app$d ?v1 ?v0 )):pattern ((tappend$ (tNil$a ?v0 )?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_c_tllist$ ))(! (= (fun_app$c (tappend$b ?v0 )uu$ )?v0 ):pattern ((tappend$b ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (fun_app$e (tappend$c ?v0 )uua$ )?v0 ):pattern ((tappend$c ?v0 )))):named a21 ))
(assert (! (forall ((?v0 C$ )(?v1 A_llist$ ))(= (llist_of_tllist$a (tllist_of_llist$ ?v0 ?v1 ))?v1 )):named a22 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (llist_of_tllist$ (tllist_of_llist$a ?v0 ?v1 ))?v1 )):named a23 ))
(assert (! (forall ((?v0 C$ )(?v1 A_llist$ )(?v2 C$ )(?v3 A_llist$ ))(= (= (tllist_of_llist$ ?v0 ?v1 )(tllist_of_llist$ ?v2 ?v3 ))(and (= ?v1 ?v3 )(=> (lfinite$ ?v3 )(= ?v0 ?v2 ))))):named a24 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ )(?v2 B$ )(?v3 A_llist$ ))(= (= (tllist_of_llist$a ?v0 ?v1 )(tllist_of_llist$a ?v2 ?v3 ))(and (= ?v1 ?v3 )(=> (lfinite$ ?v3 )(= ?v0 ?v2 ))))):named a25 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_a_fun$ )(?v2 B_c_fun$ ))(=> (lfinite$ (llist_of_tllist$ ?v0 ))(= (terminal$ (tmap$ ?v1 ?v2 ?v0 ))(fun_app$f ?v2 (terminal$a ?v0 ))))):named a26 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_a_fun$ )(?v2 C_c_fun$ ))(=> (lfinite$ (llist_of_tllist$a ?v0 ))(= (terminal$ (tmap$a ?v1 ?v2 ?v0 ))(fun_app$g ?v2 (terminal$ ?v0 ))))):named a27 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_a_fun$ )(?v2 C_b_fun$ ))(=> (lfinite$ (llist_of_tllist$a ?v0 ))(= (terminal$a (tmap$b ?v1 ?v2 ?v0 ))(fun_app$h ?v2 (terminal$ ?v0 ))))):named a28 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ ))(=> (lfinite$ (llist_of_tllist$ ?v0 ))(= (terminal$a (tmap$c ?v1 ?v2 ?v0 ))(fun_app$i ?v2 (terminal$a ?v0 ))))):named a29 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 C$ )(?v3 C$ ))(=> (and (= ?v0 ?v1 )(=> (lfinite$ ?v1 )(= ?v2 ?v3 )))(= (tllist_of_llist$ ?v2 ?v0 )(tllist_of_llist$ ?v3 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 B$ )(?v3 B$ ))(=> (and (= ?v0 ?v1 )(=> (lfinite$ ?v1 )(= ?v2 ?v3 )))(= (tllist_of_llist$a ?v2 ?v0 )(tllist_of_llist$a ?v3 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_c_tllist$ )(?v1 A_c_tllist_bool_fun$ ))(=> (and (lfinite$ (llist_of_tllist$a ?v0 ))(and (forall ((?v2 C$ ))(fun_app$j ?v1 (tNil$ ?v2 )))(forall ((?v2 A$ )(?v3 A_c_tllist$ ))(=> (and (lfinite$ (llist_of_tllist$a ?v3 ))(fun_app$j ?v1 ?v3 ))(fun_app$j ?v1 (tCons$ ?v2 ?v3 ))))))(fun_app$j ?v1 ?v0 ))):named a32 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_b_tllist_bool_fun$ ))(=> (and (lfinite$ (llist_of_tllist$ ?v0 ))(and (forall ((?v2 B$ ))(fun_app$k ?v1 (tNil$a ?v2 )))(forall ((?v2 A$ )(?v3 A_b_tllist$ ))(=> (and (lfinite$ (llist_of_tllist$ ?v3 ))(fun_app$k ?v1 ?v3 ))(fun_app$k ?v1 (tCons$a ?v2 ?v3 ))))))(fun_app$k ?v1 ?v0 ))):named a33 ))
(assert (! (forall ((?v0 A_c_tllist$ ))(! (=> (not (lfinite$ (llist_of_tllist$a ?v0 )))(= (terminal$ ?v0 )undefined$ )):pattern ((terminal$ ?v0 )))):named a34 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (=> (not (lfinite$ (llist_of_tllist$ ?v0 )))(= (terminal$a ?v0 )undefined$a )):pattern ((terminal$a ?v0 )))):named a35 ))
(assert (! (forall ((?v0 C$ )(?v1 C$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$a ?v0 )(tNil$a ?v1 ))(= ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$a ?v0 ?v1 )(tCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a38 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_tllist$ )(?v2 A$ )(?v3 A_c_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a39 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_b_fun$ )(?v2 A_c_tllist$ ))(= (is_TNil$a (tmap$b ?v0 ?v1 ?v2 ))(is_TNil$ ?v2 ))):named a40 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_c_fun$ )(?v2 A_b_tllist$ ))(= (is_TNil$ (tmap$ ?v0 ?v1 ?v2 ))(is_TNil$a ?v2 ))):named a41 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_c_fun$ )(?v2 A_c_tllist$ ))(= (is_TNil$ (tmap$a ?v0 ?v1 ?v2 ))(is_TNil$ ?v2 ))):named a42 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ ))(= (is_TNil$a (tmap$c ?v0 ?v1 ?v2 ))(is_TNil$a ?v2 ))):named a43 ))
(assert (! (forall ((?v0 A$ )(?v1 A_c_tllist$ ))(! (= (terminal$ (tCons$ ?v0 ?v1 ))(terminal$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (terminal$a (tCons$a ?v0 ?v1 ))(terminal$a ?v1 )):pattern ((tCons$a ?v0 ?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 C$ ))(=> (lfinite$ ?v0 )(= (terminal$ (tllist_of_llist$ ?v1 ?v0 ))?v1 ))):named a46 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(=> (lfinite$ ?v0 )(= (terminal$a (tllist_of_llist$a ?v1 ?v0 ))?v1 ))):named a47 ))
(check-sat )
;(get-unsat-core )
