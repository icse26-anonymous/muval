;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort B_set$ 0 )
(declare-sort D_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_d_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort D_b_fun$ 0 )
(declare-sort D_d_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort D_bool_fun$ 0 )
(declare-sort A_b_tllist_b_fun$ 0 )
(declare-sort C_d_tllist_d_fun$ 0 )
(declare-codatatypes ()((C_d_tllist$ (tNil$ (terminal$ D$ ))(tCons$ (thd$ C$ )(ttl$ C_d_tllist$ )))(A_b_tllist$ (tNil$a (terminal$a B$ ))(tCons$a (thd$a A$ )(ttl$a A_b_tllist$ )))))
(declare-fun f$ ()A_c_fun$ )
(declare-fun g$ ()B_d_fun$ )
(declare-fun uu$ ()C_d_tllist_d_fun$ )
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun uua$ ()A_b_tllist_b_fun$ )
(declare-fun tmap$ (A_c_fun$ B_d_fun$ A_b_tllist$ )C_d_tllist$ )
(declare-fun tmap$a (C_a_fun$ D_b_fun$ C_d_tllist$ )A_b_tllist$ )
(declare-fun tmap$b (C_c_fun$ D_d_fun$ C_d_tllist$ )C_d_tllist$ )
(declare-fun tmap$c (A_a_fun$ B_b_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun member$ (D$ D_set$ )Bool )
(declare-fun fun_app$ (C_d_tllist_d_fun$ C_d_tllist$ )D$ )
(declare-fun is_TNil$ (A_b_tllist$ )Bool )
(declare-fun member$a (B$ B_set$ )Bool )
(declare-fun fun_app$a (A_b_tllist_b_fun$ A_b_tllist$ )B$ )
(declare-fun fun_app$b (B_d_fun$ B$ )D$ )
(declare-fun fun_app$c (D_b_fun$ D$ )B$ )
(declare-fun fun_app$d (B_b_fun$ B$ )B$ )
(declare-fun fun_app$e (D_d_fun$ D$ )D$ )
(declare-fun fun_app$f (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$g (D_bool_fun$ D$ )Bool )
(declare-fun fun_app$h (A_a_fun$ A$ )A$ )
(declare-fun fun_app$i (C_a_fun$ C$ )A$ )
(declare-fun fun_app$j (C_c_fun$ C$ )C$ )
(declare-fun fun_app$k (A_c_fun$ A$ )C$ )
(declare-fun is_TNil$a (C_d_tllist$ )Bool )
(declare-fun terminal0$ ()C_d_tllist_d_fun$ )
(declare-fun terminal0$a ()A_b_tllist_b_fun$ )
(declare-fun pred_tllist$ (A_bool_fun$ B_bool_fun$ A_b_tllist$ )Bool )
(declare-fun set2_tllist$ (C_d_tllist$ )D_set$ )
(declare-fun pred_tllist$a (C_bool_fun$ D_bool_fun$ C_d_tllist$ )Bool )
(declare-fun set2_tllist$a (A_b_tllist$ )B_set$ )
(assert (! (forall ((?v0 C_d_tllist$ ))(! (= (fun_app$ uu$ ?v0 )(terminal$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (fun_app$a uua$ ?v0 )(terminal$a ?v0 )):pattern ((fun_app$a uua$ ?v0 )))):named a1 ))
(assert (! (not (= (tmap$ f$ g$ xs$ )(tNil$ (fun_app$b g$ (terminal$a xs$ ))))):named a2 ))
(assert (! (is_TNil$ xs$ ):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$a ?v0 )(tNil$a ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 D$ )(?v1 D$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 D_b_fun$ )(?v2 C_d_tllist$ ))(= (is_TNil$ (tmap$a ?v0 ?v1 ?v2 ))(is_TNil$a ?v2 ))):named a6 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 D_d_fun$ )(?v2 C_d_tllist$ ))(= (is_TNil$a (tmap$b ?v0 ?v1 ?v2 ))(is_TNil$a ?v2 ))):named a7 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 B_d_fun$ )(?v2 A_b_tllist$ ))(= (is_TNil$a (tmap$ ?v0 ?v1 ?v2 ))(is_TNil$ ?v2 ))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ ))(= (is_TNil$ (tmap$c ?v0 ?v1 ?v2 ))(is_TNil$ ?v2 ))):named a9 ))
(assert (! (forall ((?v0 C_d_tllist$ ))(=> (is_TNil$a ?v0 )(= (tNil$ (terminal$ ?v0 ))?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (is_TNil$ ?v0 )(= (tNil$a (terminal$a ?v0 ))?v0 ))):named a11 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 D_b_fun$ )(?v2 D$ ))(! (= (tmap$a ?v0 ?v1 (tNil$ ?v2 ))(tNil$a (fun_app$c ?v1 ?v2 ))):pattern ((tmap$a ?v0 ?v1 (tNil$ ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (tmap$c ?v0 ?v1 (tNil$a ?v2 ))(tNil$a (fun_app$d ?v1 ?v2 ))):pattern ((tmap$c ?v0 ?v1 (tNil$a ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 D_d_fun$ )(?v2 D$ ))(! (= (tmap$b ?v0 ?v1 (tNil$ ?v2 ))(tNil$ (fun_app$e ?v1 ?v2 ))):pattern ((tmap$b ?v0 ?v1 (tNil$ ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 B_d_fun$ )(?v2 B$ ))(! (= (tmap$ ?v0 ?v1 (tNil$a ?v2 ))(tNil$ (fun_app$b ?v1 ?v2 ))):pattern ((tmap$ ?v0 ?v1 (tNil$a ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 C_d_tllist$ ))(= (is_TNil$a ?v0 )(exists ((?v1 D$ ))(= ?v0 (tNil$ ?v1 ))))):named a16 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (is_TNil$ ?v0 )(exists ((?v1 B$ ))(= ?v0 (tNil$a ?v1 ))))):named a17 ))
(assert (! (forall ((?v0 D$ ))(! (= (terminal$ (tNil$ ?v0 ))?v0 ):pattern ((tNil$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 B$ ))(! (= (terminal$a (tNil$a ?v0 ))?v0 ):pattern ((tNil$a ?v0 )))):named a19 ))
(assert (! (forall ((?v0 C_d_tllist$ ))(=> (and (=> (is_TNil$a ?v0 )false )(=> (not (is_TNil$a ?v0 ))false ))false )):named a20 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (and (=> (is_TNil$ ?v0 )false )(=> (not (is_TNil$ ?v0 ))false ))false )):named a21 ))
(assert (! (forall ((?v0 C_d_tllist$ )(?v1 D$ ))(=> (= ?v0 (tNil$ ?v1 ))(is_TNil$a ?v0 ))):named a22 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 B$ ))(=> (= ?v0 (tNil$a ?v1 ))(is_TNil$ ?v0 ))):named a23 ))
(assert (! (forall ((?v0 C_d_tllist$ )(?v1 C_a_fun$ )(?v2 D_b_fun$ ))(=> (is_TNil$a ?v0 )(= (terminal$a (tmap$a ?v1 ?v2 ?v0 ))(fun_app$c ?v2 (terminal$ ?v0 ))))):named a24 ))
(assert (! (forall ((?v0 C_d_tllist$ )(?v1 C_c_fun$ )(?v2 D_d_fun$ ))(=> (is_TNil$a ?v0 )(= (terminal$ (tmap$b ?v1 ?v2 ?v0 ))(fun_app$e ?v2 (terminal$ ?v0 ))))):named a25 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_c_fun$ )(?v2 B_d_fun$ ))(=> (is_TNil$ ?v0 )(= (terminal$ (tmap$ ?v1 ?v2 ?v0 ))(fun_app$b ?v2 (terminal$a ?v0 ))))):named a26 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ ))(=> (is_TNil$ ?v0 )(= (terminal$a (tmap$c ?v1 ?v2 ?v0 ))(fun_app$d ?v2 (terminal$a ?v0 ))))):named a27 ))
(assert (! (forall ((?v0 D$ ))(is_TNil$a (tNil$ ?v0 ))):named a28 ))
(assert (! (forall ((?v0 B$ ))(is_TNil$ (tNil$a ?v0 ))):named a29 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 B$ ))(! (= (pred_tllist$ ?v0 ?v1 (tNil$a ?v2 ))(fun_app$f ?v1 ?v2 )):pattern ((pred_tllist$ ?v0 ?v1 (tNil$a ?v2 ))))):named a30 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 D_bool_fun$ )(?v2 D$ ))(! (= (pred_tllist$a ?v0 ?v1 (tNil$ ?v2 ))(fun_app$g ?v1 ?v2 )):pattern ((pred_tllist$a ?v0 ?v1 (tNil$ ?v2 ))))):named a31 ))
(assert (! (= terminal0$ uu$ ):named a32 ))
(assert (! (= terminal0$a uua$ ):named a33 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ ))(=> (not (is_TNil$ ?v0 ))(= (thd$a (tmap$c ?v1 ?v2 ?v0 ))(fun_app$h ?v1 (thd$a ?v0 ))))):named a34 ))
(assert (! (forall ((?v0 C_d_tllist$ )(?v1 C_a_fun$ )(?v2 D_b_fun$ ))(=> (not (is_TNil$a ?v0 ))(= (thd$a (tmap$a ?v1 ?v2 ?v0 ))(fun_app$i ?v1 (thd$ ?v0 ))))):named a35 ))
(assert (! (forall ((?v0 C_d_tllist$ )(?v1 C_c_fun$ )(?v2 D_d_fun$ ))(=> (not (is_TNil$a ?v0 ))(= (thd$ (tmap$b ?v1 ?v2 ?v0 ))(fun_app$j ?v1 (thd$ ?v0 ))))):named a36 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_c_fun$ )(?v2 B_d_fun$ ))(=> (not (is_TNil$ ?v0 ))(= (thd$ (tmap$ ?v1 ?v2 ?v0 ))(fun_app$k ?v1 (thd$a ?v0 ))))):named a37 ))
(assert (! (forall ((?v0 C_d_tllist$ ))(=> (is_TNil$a ?v0 )(member$ (terminal$ ?v0 )(set2_tllist$ ?v0 )))):named a38 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (is_TNil$ ?v0 )(member$a (terminal$a ?v0 )(set2_tllist$a ?v0 )))):named a39 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ ))(=> (not (is_TNil$ ?v0 ))(= (ttl$a (tmap$c ?v1 ?v2 ?v0 ))(tmap$c ?v1 ?v2 (ttl$a ?v0 ))))):named a40 ))
(assert (! (forall ((?v0 C_d_tllist$ )(?v1 C_a_fun$ )(?v2 D_b_fun$ ))(=> (not (is_TNil$a ?v0 ))(= (ttl$a (tmap$a ?v1 ?v2 ?v0 ))(tmap$a ?v1 ?v2 (ttl$ ?v0 ))))):named a41 ))
(assert (! (forall ((?v0 C_d_tllist$ )(?v1 C_c_fun$ )(?v2 D_d_fun$ ))(=> (not (is_TNil$a ?v0 ))(= (ttl$ (tmap$b ?v1 ?v2 ?v0 ))(tmap$b ?v1 ?v2 (ttl$ ?v0 ))))):named a42 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_c_fun$ )(?v2 B_d_fun$ ))(=> (not (is_TNil$ ?v0 ))(= (ttl$ (tmap$ ?v1 ?v2 ?v0 ))(tmap$ ?v1 ?v2 (ttl$a ?v0 ))))):named a43 ))
(assert (! (forall ((?v0 C_d_tllist$ ))(= (terminal$ (ttl$ ?v0 ))(terminal$ ?v0 ))):named a44 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (terminal$a (ttl$a ?v0 ))(terminal$a ?v0 ))):named a45 ))
(check-sat )
;(get-unsat-core )
