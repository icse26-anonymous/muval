;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_b_tllist_b_fun$ 0 )
(declare-sort B_a_b_tllist_fun$ 0 )
(declare-sort A_b_tllist_bool_fun$ 0 )
(declare-sort B_bool_fun_a_b_tllist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ A$ )(ttl$ A_b_tllist$ )))(A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun p$ ()A_bool_fun$ )
(declare-fun y$ ()B$ )
(declare-fun uu$ ()A_b_tllist_b_fun$ )
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun y$a ()B$ )
(declare-fun tmap$ (A_a_fun$ B_b_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun tset$ (A_b_tllist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_b_tllist_b_fun$ A_b_tllist$ )B$ )
(declare-fun is_TNil$ (A_b_tllist$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun tappend$ (A_b_tllist$ B_a_b_tllist_fun$ )A_b_tllist$ )
(declare-fun tfilter$ (B$ A_bool_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (B_a_b_tllist_fun$ B$ )A_b_tllist$ )
(declare-fun fun_app$c (B_b_fun$ B$ )B$ )
(declare-fun fun_app$d (A_b_tllist_bool_fun$ A_b_tllist$ )Bool )
(declare-fun fun_app$e (B_bool_fun_a_b_tllist_bool_fun_fun$ B_bool_fun$ )A_b_tllist_bool_fun$ )
(declare-fun fun_app$f (B_bool_fun$ B$ )Bool )
(declare-fun lappendt$ (A_llist$ A_b_tllist$ )A_b_tllist$ )
(declare-fun terminal0$ ()A_b_tllist_b_fun$ )
(declare-fun undefined$ ()B$ )
(declare-fun pred_tllist$ (A_bool_fun$ )B_bool_fun_a_b_tllist_bool_fun_fun$ )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$ (B$ A_llist$ )A_b_tllist$ )
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (fun_app$ uu$ ?v0 )(terminal$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (= (tfilter$ y$ p$ xs$ )(tNil$ y$a ))(and (forall ((?v0 A$ ))(=> (member$ ?v0 (tset$ xs$ ))(not (fun_app$a p$ ?v0 ))))(ite (lfinite$ (llist_of_tllist$ xs$ ))(= (terminal$ xs$ )y$a )(= y$ y$a ))))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 B$ )(?v1 A_bool_fun$ )(?v2 B$ ))(! (= (tfilter$ ?v0 ?v1 (tNil$ ?v2 ))(tNil$ ?v2 )):pattern ((tfilter$ ?v0 ?v1 (tNil$ ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 B$ ))(! (= (terminal$ (tNil$ ?v0 ))?v0 ):pattern ((tNil$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_tllist$ ))(=> (lfinite$ ?v0 )(= (terminal$ (lappendt$ ?v0 ?v1 ))(terminal$ ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 B_a_b_tllist_fun$ ))(= (lfinite$ (llist_of_tllist$ (tappend$ ?v0 ?v1 )))(and (lfinite$ (llist_of_tllist$ ?v0 ))(lfinite$ (llist_of_tllist$ (fun_app$b ?v1 (terminal$ ?v0 ))))))):named a6 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 B_a_b_tllist_fun$ ))(= (terminal$ (tappend$ ?v0 ?v1 ))(ite (lfinite$ (llist_of_tllist$ ?v0 ))(terminal$ (fun_app$b ?v1 (terminal$ ?v0 )))(terminal$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ ))(=> (lfinite$ (llist_of_tllist$ ?v0 ))(= (terminal$ (tmap$ ?v1 ?v2 ?v0 ))(fun_app$c ?v2 (terminal$ ?v0 ))))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 B$ ))(! (= (fun_app$d (fun_app$e (pred_tllist$ ?v0 )?v1 )(tNil$ ?v2 ))(fun_app$f ?v1 ?v2 )):pattern ((fun_app$d (fun_app$e (pred_tllist$ ?v0 )?v1 )(tNil$ ?v2 ))))):named a9 ))
(assert (! (= terminal0$ uu$ ):named a10 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_b_tllist_bool_fun$ ))(=> (and (lfinite$ (llist_of_tllist$ ?v0 ))(and (forall ((?v2 B$ ))(fun_app$d ?v1 (tNil$ ?v2 )))(forall ((?v2 A$ )(?v3 A_b_tllist$ ))(=> (and (lfinite$ (llist_of_tllist$ ?v3 ))(fun_app$d ?v1 ?v3 ))(fun_app$d ?v1 (tCons$ ?v2 ?v3 ))))))(fun_app$d ?v1 ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (=> (not (lfinite$ (llist_of_tllist$ ?v0 )))(= (terminal$ ?v0 )undefined$ )):pattern ((terminal$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 B$ )(?v1 A_bool_fun$ )(?v2 A_b_tllist$ ))(= (is_TNil$ (tfilter$ ?v0 ?v1 ?v2 ))(forall ((?v3 A$ ))(=> (member$ ?v3 (tset$ ?v2 ))(not (fun_app$a ?v1 ?v3 )))))):named a13 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (tllist_of_llist$ (terminal$ ?v0 )(llist_of_tllist$ ?v0 ))?v0 )):named a14 ))
(assert (! (forall ((?v0 B$ ))(! (= (llist_of_tllist$ (tNil$ ?v0 ))lNil$ ):pattern ((tNil$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(=> (lfinite$ ?v0 )(= (terminal$ (tllist_of_llist$ ?v1 ?v0 ))?v1 ))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ )(?v2 B$ )(?v3 A_llist$ ))(= (= (tllist_of_llist$ ?v0 ?v1 )(tllist_of_llist$ ?v2 ?v3 ))(and (= ?v1 ?v3 )(=> (lfinite$ ?v3 )(= ?v0 ?v2 ))))):named a18 ))
(check-sat )
;(get-unsat-core )
