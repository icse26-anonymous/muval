;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort E$ 0 )
(declare-sort F$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_e_prod_bool_fun$ 0 )
(declare-sort B_llist_f_prod_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-sort A_llist_e_prod$ 0)
(declare-sort B_llist_f_prod$ 0)
(declare-fun fst$ (A_llist_e_prod$)A_llist$)
(declare-fun snd$ (A_llist_e_prod$)E$)
(declare-fun pair$ (A_llist$ E$ )A_llist_e_prod$)
(declare-fun fst$a (B_llist_f_prod$)B_llist$)
(declare-fun snd$a (B_llist_f_prod$)F$)
(declare-fun pair$a (B_llist$ F$ )B_llist_f_prod$)
(declare-fun bc$ ()F$ )
(declare-fun pa$ ()A_b_bool_fun_fun$ )
(declare-fun ra$ (E$ F$ )Bool )
(declare-fun uu$ ()A_a_bool_fun_fun$ )
(declare-fun x1$ ()A_llist$ )
(declare-fun x2$ ()C$ )
(declare-fun uua$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun uub$ ()B_b_bool_fun_fun$ )
(declare-fun uuc$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun x1a$ ()B_llist$ )
(declare-fun x1b$ ()A_llist$ )
(declare-fun x1c$ ()B_llist$ )
(declare-fun x2a$ ()D$ )
(declare-fun x2b$ ()E$ )
(declare-fun xs_a$ (C$ )A_llist_e_prod$ )
(declare-fun ys_a$ (D$ )B_llist_f_prod$ )
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun lappend$ (B_llist$ B_llist$ )B_llist$ )
(declare-fun lfinite$ (B_llist$ )Bool )
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$f (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$h (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$i (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$j (A_llist_e_prod_bool_fun$ A_llist_e_prod$ )Bool )
(declare-fun fun_app$k (B_llist_f_prod_bool_fun$ B_llist_f_prod$ )Bool )
(declare-fun lappend$a (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(declare-fun llist_all2$a (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (B_a_bool_fun_fun$ B_llist$ A_llist$ )Bool )
(declare-fun llist_all2$c (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uuc$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$d (fun_app$e uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$f (fun_app$g uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uu$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (llist_all2$ pa$ x1$ (lappend$ x1a$ x1c$ ))):named a4 ))
(assert (! (=> (and false (lfinite$ x1a$ ))(and (llist_all2$ pa$ x1b$ x1c$ )(=> (lfinite$a x1b$ )(ra$ x2b$ bc$ )))):named a5 ))
(assert (! (llist_all2$ pa$ x1$ x1a$ ):named a6 ))
(assert (! (not (lfinite$a x1$ )):named a7 ))
(assert (! (= (xs_a$ x2$ )(pair$ x1b$ x2b$ )):named a8 ))
(assert (! (= (ys_a$ x2a$ )(pair$a x1c$ bc$ )):named a9 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lfinite$ (lappend$ ?v0 ?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$a (lappend$a ?v0 ?v1 ))(and (lfinite$a ?v0 )(lfinite$a ?v1 )))):named a11 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_llist$ )(?v4 B_llist$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$a ?v0 )?v1 )?v2 )(=> (and (lfinite$ ?v1 )(lfinite$ ?v2 ))(fun_app$ (fun_app$a (llist_all2$a ?v0 )?v3 )?v4 )))(fun_app$ (fun_app$a (llist_all2$a ?v0 )(lappend$ ?v1 ?v3 ))(lappend$ ?v2 ?v4 )))):named a12 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist$ )(?v4 A_llist$ ))(=> (and (llist_all2$b ?v0 ?v1 ?v2 )(=> (and (lfinite$ ?v1 )(lfinite$a ?v2 ))(llist_all2$b ?v0 ?v3 ?v4 )))(llist_all2$b ?v0 (lappend$ ?v1 ?v3 )(lappend$a ?v2 ?v4 )))):named a13 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$c ?v0 )?v1 )?v2 )(=> (and (lfinite$a ?v1 )(lfinite$a ?v2 ))(fun_app$b (fun_app$c (llist_all2$c ?v0 )?v3 )?v4 )))(fun_app$b (fun_app$c (llist_all2$c ?v0 )(lappend$a ?v1 ?v3 ))(lappend$a ?v2 ?v4 )))):named a14 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_llist$ )(?v4 B_llist$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(=> (and (lfinite$a ?v1 )(lfinite$ ?v2 ))(llist_all2$ ?v0 ?v3 ?v4 )))(llist_all2$ ?v0 (lappend$a ?v1 ?v3 )(lappend$ ?v2 ?v4 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 E$ )(?v2 A_llist$ )(?v3 E$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 F$ )(?v2 B_llist$ )(?v3 F$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 E$ )(?v2 A_llist$ )(?v3 E$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a18 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 F$ )(?v2 B_llist$ )(?v3 F$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a19 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (lappend$ ?v0 ?v1 )?v0 )):pattern ((lappend$ ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (not (lfinite$a ?v0 ))(= (lappend$a ?v0 ?v1 )?v0 )):pattern ((lappend$a ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (fun_app$ (fun_app$a (llist_all2$a ?v0 )?v1 )?v2 )(= (lfinite$ ?v1 )(lfinite$ ?v2 )))):named a22 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (llist_all2$b ?v0 ?v1 ?v2 )(= (lfinite$ ?v1 )(lfinite$a ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$b (fun_app$c (llist_all2$c ?v0 )?v1 )?v2 )(= (lfinite$a ?v1 )(lfinite$a ?v2 )))):named a24 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (llist_all2$ ?v0 ?v1 ?v2 )(= (lfinite$a ?v1 )(lfinite$ ?v2 )))):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$a (lappend$a ?v0 ?v1 )?v2 )(lappend$a ?v0 (lappend$a ?v1 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a27 ))
(assert (! (= (llist_all2$c uu$ )uua$ ):named a28 ))
(assert (! (= (llist_all2$a uub$ )uuc$ ):named a29 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$c ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (fun_app$f (fun_app$g ?v0 ?v4 )?v5 )(fun_app$f (fun_app$g ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$c (llist_all2$c ?v3 )?v1 )?v2 ))):named a30 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (llist_all2$b ?v0 ?v1 ?v2 )(forall ((?v4 B$ )(?v5 A$ ))(=> (fun_app$f (fun_app$h ?v0 ?v4 )?v5 )(fun_app$f (fun_app$h ?v3 ?v4 )?v5 ))))(llist_all2$b ?v3 ?v1 ?v2 ))):named a31 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 B$ ))(=> (fun_app$d (fun_app$e ?v0 ?v4 )?v5 )(fun_app$d (fun_app$e ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$a (llist_all2$a ?v3 )?v1 )?v2 ))):named a32 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(forall ((?v4 A$ )(?v5 B$ ))(=> (fun_app$d (fun_app$i ?v0 ?v4 )?v5 )(fun_app$d (fun_app$i ?v3 ?v4 )?v5 ))))(llist_all2$ ?v3 ?v1 ?v2 ))):named a33 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_a_bool_fun_fun$ )(?v3 A_llist$ )(?v4 A_llist$ )(?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (forall ((?v7 A$ )(?v8 A$ ))(=> (fun_app$f (fun_app$g ?v0 ?v7 )?v8 )(forall ((?v9 A$ )(?v10 A$ ))(=> (fun_app$f (fun_app$g ?v0 ?v9 )?v10 )(= (fun_app$f (fun_app$g ?v1 ?v7 )?v9 )(fun_app$f (fun_app$g ?v2 ?v8 )?v10 ))))))(and (fun_app$b (fun_app$c (llist_all2$c ?v0 )?v3 )?v4 )(fun_app$b (fun_app$c (llist_all2$c ?v0 )?v5 )?v6 )))(= (fun_app$b (fun_app$c (llist_all2$c ?v1 )?v3 )?v5 )(fun_app$b (fun_app$c (llist_all2$c ?v2 )?v4 )?v6 )))):named a34 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_a_bool_fun_fun$ )(?v3 B_llist$ )(?v4 A_llist$ )(?v5 B_llist$ )(?v6 A_llist$ ))(=> (and (forall ((?v7 B$ )(?v8 A$ ))(=> (fun_app$f (fun_app$h ?v0 ?v7 )?v8 )(forall ((?v9 B$ )(?v10 A$ ))(=> (fun_app$f (fun_app$h ?v0 ?v9 )?v10 )(= (fun_app$d (fun_app$e ?v1 ?v7 )?v9 )(fun_app$f (fun_app$g ?v2 ?v8 )?v10 ))))))(and (llist_all2$b ?v0 ?v3 ?v4 )(llist_all2$b ?v0 ?v5 ?v6 )))(= (fun_app$ (fun_app$a (llist_all2$a ?v1 )?v3 )?v5 )(fun_app$b (fun_app$c (llist_all2$c ?v2 )?v4 )?v6 )))):named a35 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B_b_bool_fun_fun$ )(?v3 B_llist$ )(?v4 B_llist$ )(?v5 B_llist$ )(?v6 B_llist$ ))(=> (and (forall ((?v7 B$ )(?v8 B$ ))(=> (fun_app$d (fun_app$e ?v0 ?v7 )?v8 )(forall ((?v9 B$ )(?v10 B$ ))(=> (fun_app$d (fun_app$e ?v0 ?v9 )?v10 )(= (fun_app$d (fun_app$e ?v1 ?v7 )?v9 )(fun_app$d (fun_app$e ?v2 ?v8 )?v10 ))))))(and (fun_app$ (fun_app$a (llist_all2$a ?v0 )?v3 )?v4 )(fun_app$ (fun_app$a (llist_all2$a ?v0 )?v5 )?v6 )))(= (fun_app$ (fun_app$a (llist_all2$a ?v1 )?v3 )?v5 )(fun_app$ (fun_app$a (llist_all2$a ?v2 )?v4 )?v6 )))):named a36 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 B_b_bool_fun_fun$ )(?v3 A_llist$ )(?v4 B_llist$ )(?v5 A_llist$ )(?v6 B_llist$ ))(=> (and (forall ((?v7 A$ )(?v8 B$ ))(=> (fun_app$d (fun_app$i ?v0 ?v7 )?v8 )(forall ((?v9 A$ )(?v10 B$ ))(=> (fun_app$d (fun_app$i ?v0 ?v9 )?v10 )(= (fun_app$f (fun_app$g ?v1 ?v7 )?v9 )(fun_app$d (fun_app$e ?v2 ?v8 )?v10 ))))))(and (llist_all2$ ?v0 ?v3 ?v4 )(llist_all2$ ?v0 ?v5 ?v6 )))(= (fun_app$b (fun_app$c (llist_all2$c ?v1 )?v3 )?v5 )(fun_app$ (fun_app$a (llist_all2$a ?v2 )?v4 )?v6 )))):named a37 ))
(assert (! (forall ((?v0 A_llist_e_prod$ ))(=> (forall ((?v1 A_llist$ )(?v2 E$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a38 ))
(assert (! (forall ((?v0 B_llist_f_prod$ ))(=> (forall ((?v1 B_llist$ )(?v2 F$ ))(=> (= ?v0 (pair$a ?v1 ?v2 ))false ))false )):named a39 ))
(assert (! (forall ((?v0 A_llist_e_prod$ ))(exists ((?v1 A_llist$ )(?v2 E$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a40 ))
(assert (! (forall ((?v0 B_llist_f_prod$ ))(exists ((?v1 B_llist$ )(?v2 F$ ))(= ?v0 (pair$a ?v1 ?v2 )))):named a41 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 E$ )(?v2 A_llist$ )(?v3 E$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a42 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 F$ )(?v2 B_llist$ )(?v3 F$ ))(=> (and (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a43 ))
(assert (! (forall ((?v0 A_llist_e_prod$ ))(=> (forall ((?v1 A_llist$ )(?v2 E$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a44 ))
(assert (! (forall ((?v0 B_llist_f_prod$ ))(=> (forall ((?v1 B_llist$ )(?v2 F$ ))(=> (= ?v0 (pair$a ?v1 ?v2 ))false ))false )):named a45 ))
(assert (! (forall ((?v0 A_llist_e_prod_bool_fun$ )(?v1 A_llist_e_prod$ ))(=> (forall ((?v2 A_llist$ )(?v3 E$ ))(fun_app$j ?v0 (pair$ ?v2 ?v3 )))(fun_app$j ?v0 ?v1 ))):named a46 ))
(assert (! (forall ((?v0 B_llist_f_prod_bool_fun$ )(?v1 B_llist_f_prod$ ))(=> (forall ((?v2 B_llist$ )(?v3 F$ ))(fun_app$k ?v0 (pair$a ?v2 ?v3 )))(fun_app$k ?v0 ?v1 ))):named a47 ))
(check-sat )
;(get-unsat-core )
