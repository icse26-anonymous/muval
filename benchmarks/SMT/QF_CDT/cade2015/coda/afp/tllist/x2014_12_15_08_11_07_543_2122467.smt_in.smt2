;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_d_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort D_b_fun$ 0 )
(declare-sort D_d_fun$ 0 )
(declare-sort C_a_fun_c_a_fun_fun$ 0 )
(declare-sort C_c_fun_c_a_fun_fun$ 0 )
(declare-sort D_b_fun_d_b_fun_fun$ 0 )
(declare-sort D_d_fun_d_b_fun_fun$ 0 )
(declare-codatatypes ()((A_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ A$ )(ttl$ A_b_tllist$ )))(C_d_tllist$ (tNil$a (terminal$a D$ ))(tCons$a (thd$a C$ )(ttl$a C_d_tllist$ )))(C_llist$ (lNil$ )(lCons$ (lhd$ C$ )(ltl$ C_llist$ )))(A_llist$ (lNil$a )(lCons$a (lhd$a A$ )(ltl$a A_llist$ )))(B_a_tllist$ (tNil$b (terminal$b A$ ))(tCons$b (thd$b B$ )(ttl$b B_a_tllist$ )))(A_d_tllist$ (tNil$c (terminal$c D$ ))(tCons$c (thd$c A$ )(ttl$c A_d_tllist$ )))(A_c_tllist$ (tNil$d (terminal$d C$ ))(tCons$d (thd$d A$ )(ttl$d A_c_tllist$ )))(A_a_tllist$ (tNil$e (terminal$e A$ ))(tCons$e (thd$e A$ )(ttl$e A_a_tllist$ )))(B_b_tllist$ (tNil$f (terminal$f B$ ))(tCons$f (thd$f B$ )(ttl$f B_b_tllist$ )))(B_c_tllist$ (tNil$g (terminal$g C$ ))(tCons$g (thd$g B$ )(ttl$g B_c_tllist$ )))(B_d_tllist$ (tNil$h (terminal$h D$ ))(tCons$h (thd$h B$ )(ttl$h B_d_tllist$ )))(C_a_tllist$ (tNil$i (terminal$i A$ ))(tCons$i (thd$i C$ )(ttl$i C_a_tllist$ )))(C_b_tllist$ (tNil$j (terminal$j B$ ))(tCons$j (thd$j C$ )(ttl$j C_b_tllist$ )))(C_c_tllist$ (tNil$k (terminal$k C$ ))(tCons$k (thd$k C$ )(ttl$k C_c_tllist$ )))(D_c_tllist$ (tNil$l (terminal$l C$ ))(tCons$l (thd$l D$ )(ttl$l D_c_tllist$ )))(D_d_tllist$ (tNil$m (terminal$m D$ ))(tCons$m (thd$m D$ )(ttl$m D_d_tllist$ )))(D_a_tllist$ (tNil$n (terminal$n A$ ))(tCons$n (thd$n D$ )(ttl$n D_a_tllist$ )))(D_b_tllist$ (tNil$o (terminal$o B$ ))(tCons$o (thd$o D$ )(ttl$o D_b_tllist$ )))))
(declare-fun b$ ()D$ )
(declare-fun f$ ()C_a_fun$ )
(declare-fun g$ ()D_b_fun$ )
(declare-fun id$ ()C_c_fun$ )
(declare-fun xs$ ()C_llist$ )
(declare-fun id$a ()D_d_fun$ )
(declare-fun id$b ()A_a_fun$ )
(declare-fun id$c ()B_b_fun$ )
(declare-fun comp$ (A_a_fun$ )C_a_fun_c_a_fun_fun$ )
(declare-fun lmap$ (C_a_fun$ C_llist$ )A_llist$ )
(declare-fun tmap$ (C_a_fun$ D_b_fun$ C_d_tllist$ )A_b_tllist$ )
(declare-fun comp$a (B_b_fun$ )D_b_fun_d_b_fun_fun$ )
(declare-fun comp$b (C_a_fun$ )C_c_fun_c_a_fun_fun$ )
(declare-fun comp$c (D_b_fun$ )D_d_fun_d_b_fun_fun$ )
(declare-fun lmap$a (C_c_fun$ C_llist$ )C_llist$ )
(declare-fun lmap$b (A_c_fun$ A_llist$ )C_llist$ )
(declare-fun lmap$c (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun tmap$a (B_b_fun$ A_a_fun$ B_a_tllist$ )B_a_tllist$ )
(declare-fun tmap$b (A_a_fun$ D_b_fun$ A_d_tllist$ )A_b_tllist$ )
(declare-fun tmap$c (A_a_fun$ C_a_fun$ A_c_tllist$ )A_a_tllist$ )
(declare-fun tmap$d (A_a_fun$ A_a_fun$ A_a_tllist$ )A_a_tllist$ )
(declare-fun tmap$e (A_c_fun$ B_d_fun$ A_b_tllist$ )C_d_tllist$ )
(declare-fun tmap$f (C_c_fun$ D_d_fun$ C_d_tllist$ )C_d_tllist$ )
(declare-fun tmap$g (A_a_fun$ B_b_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun tmap$h (A_a_fun$ C_c_fun$ A_c_tllist$ )A_c_tllist$ )
(declare-fun tmap$i (A_a_fun$ D_d_fun$ A_d_tllist$ )A_d_tllist$ )
(declare-fun tmap$j (B_b_fun$ B_b_fun$ B_b_tllist$ )B_b_tllist$ )
(declare-fun tmap$k (B_b_fun$ C_c_fun$ B_c_tllist$ )B_c_tllist$ )
(declare-fun tmap$l (B_b_fun$ D_d_fun$ B_d_tllist$ )B_d_tllist$ )
(declare-fun tmap$m (C_c_fun$ A_a_fun$ C_a_tllist$ )C_a_tllist$ )
(declare-fun tmap$n (C_c_fun$ B_b_fun$ C_b_tllist$ )C_b_tllist$ )
(declare-fun tmap$o (C_c_fun$ C_c_fun$ C_c_tllist$ )C_c_tllist$ )
(declare-fun tmap$p (C_a_fun$ C_a_fun$ C_c_tllist$ )A_a_tllist$ )
(declare-fun tmap$q (C_a_fun$ A_a_fun$ C_a_tllist$ )A_a_tllist$ )
(declare-fun tmap$r (C_c_fun$ C_a_fun$ C_c_tllist$ )C_a_tllist$ )
(declare-fun tmap$s (D_b_fun$ C_a_fun$ D_c_tllist$ )B_a_tllist$ )
(declare-fun tmap$t (D_d_fun$ C_c_fun$ D_c_tllist$ )D_c_tllist$ )
(declare-fun tmap$u (D_b_fun$ D_b_fun$ D_d_tllist$ )B_b_tllist$ )
(declare-fun tmap$v (D_d_fun$ D_d_fun$ D_d_tllist$ )D_d_tllist$ )
(declare-fun tmap$w (D_b_fun$ A_a_fun$ D_a_tllist$ )B_a_tllist$ )
(declare-fun tmap$x (D_d_fun$ C_a_fun$ D_c_tllist$ )D_a_tllist$ )
(declare-fun tmap$y (D_b_fun$ B_b_fun$ D_b_tllist$ )B_b_tllist$ )
(declare-fun tmap$z (D_d_fun$ D_b_fun$ D_d_tllist$ )D_b_tllist$ )
(declare-fun tmap$aa (C_a_fun$ C_c_fun$ C_c_tllist$ )A_c_tllist$ )
(declare-fun fun_app$ (D_b_fun$ D$ )B$ )
(declare-fun is_TNil$ (B_a_tllist$ )Bool )
(declare-fun lfinite$ (C_llist$ )Bool )
(declare-fun fun_app$a (B_b_fun$ B$ )B$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (C_c_fun$ C$ )C$ )
(declare-fun fun_app$d (A_c_fun$ A$ )C$ )
(declare-fun fun_app$e (C_a_fun$ C$ )A$ )
(declare-fun fun_app$f (B_d_fun$ B$ )D$ )
(declare-fun fun_app$g (D_d_fun$ D$ )D$ )
(declare-fun fun_app$h (C_a_fun_c_a_fun_fun$ C_a_fun$ )C_a_fun$ )
(declare-fun fun_app$i (D_b_fun_d_b_fun_fun$ D_b_fun$ )D_b_fun$ )
(declare-fun fun_app$j (C_c_fun_c_a_fun_fun$ C_c_fun$ )C_a_fun$ )
(declare-fun fun_app$k (D_d_fun_d_b_fun_fun$ D_d_fun$ )D_b_fun$ )
(declare-fun is_TNil$a (A_a_tllist$ )Bool )
(declare-fun is_TNil$b (A_c_tllist$ )Bool )
(declare-fun is_TNil$c (A_b_tllist$ )Bool )
(declare-fun is_TNil$d (A_d_tllist$ )Bool )
(declare-fun is_TNil$e (C_d_tllist$ )Bool )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun lstrict_prefix$ (C_llist$ C_llist$ )Bool )
(declare-fun llist_of_tllist$ (C_d_tllist$ )C_llist$ )
(declare-fun lstrict_prefix$a (A_llist$ A_llist$ )Bool )
(declare-fun tllist_of_llist$ (D$ C_llist$ )C_d_tllist$ )
(declare-fun llist_of_tllist$a (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$a (B$ A_llist$ )A_b_tllist$ )
(assert (! (not (= (tmap$ f$ g$ (tllist_of_llist$ b$ xs$ ))(tllist_of_llist$a (fun_app$ g$ b$ )(lmap$ f$ xs$ )))):named a0 ))
(assert (! (forall ((?v0 D$ )(?v1 C_llist$ ))(= (llist_of_tllist$ (tllist_of_llist$ ?v0 ?v1 ))?v1 )):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (llist_of_tllist$a (tllist_of_llist$a ?v0 ?v1 ))?v1 )):named a2 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_a_fun$ )(?v2 B_a_tllist$ ))(= (ttl$b (tmap$a ?v0 ?v1 ?v2 ))(tmap$a ?v0 ?v1 (ttl$b ?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 D_b_fun$ )(?v2 A_d_tllist$ ))(= (ttl$ (tmap$b ?v0 ?v1 ?v2 ))(tmap$b ?v0 ?v1 (ttl$c ?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 A_c_tllist$ ))(= (ttl$e (tmap$c ?v0 ?v1 ?v2 ))(tmap$c ?v0 ?v1 (ttl$d ?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_tllist$ ))(= (ttl$e (tmap$d ?v0 ?v1 ?v2 ))(tmap$d ?v0 ?v1 (ttl$e ?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 B_d_fun$ )(?v2 A_b_tllist$ ))(= (ttl$a (tmap$e ?v0 ?v1 ?v2 ))(tmap$e ?v0 ?v1 (ttl$ ?v2 )))):named a7 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 D_d_fun$ )(?v2 C_d_tllist$ ))(= (ttl$a (tmap$f ?v0 ?v1 ?v2 ))(tmap$f ?v0 ?v1 (ttl$a ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ ))(= (ttl$ (tmap$g ?v0 ?v1 ?v2 ))(tmap$g ?v0 ?v1 (ttl$ ?v2 )))):named a9 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 D_b_fun$ )(?v2 C_d_tllist$ ))(= (ttl$ (tmap$ ?v0 ?v1 ?v2 ))(tmap$ ?v0 ?v1 (ttl$a ?v2 )))):named a10 ))
(assert (! (forall ((?v0 D$ )(?v1 C_llist$ )(?v2 D$ )(?v3 C_llist$ ))(= (= (tllist_of_llist$ ?v0 ?v1 )(tllist_of_llist$ ?v2 ?v3 ))(and (= ?v1 ?v3 )(=> (lfinite$ ?v3 )(= ?v0 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ )(?v2 B$ )(?v3 A_llist$ ))(= (= (tllist_of_llist$a ?v0 ?v1 )(tllist_of_llist$a ?v2 ?v3 ))(and (= ?v1 ?v3 )(=> (lfinite$a ?v3 )(= ?v0 ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_a_fun$ )(?v2 B_a_tllist$ ))(= (is_TNil$ (tmap$a ?v0 ?v1 ?v2 ))(is_TNil$ ?v2 ))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 A_c_tllist$ ))(= (is_TNil$a (tmap$c ?v0 ?v1 ?v2 ))(is_TNil$b ?v2 ))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_tllist$ ))(= (is_TNil$a (tmap$d ?v0 ?v1 ?v2 ))(is_TNil$a ?v2 ))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 D_b_fun$ )(?v2 A_d_tllist$ ))(= (is_TNil$c (tmap$b ?v0 ?v1 ?v2 ))(is_TNil$d ?v2 ))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ ))(= (is_TNil$c (tmap$g ?v0 ?v1 ?v2 ))(is_TNil$c ?v2 ))):named a17 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 B_d_fun$ )(?v2 A_b_tllist$ ))(= (is_TNil$e (tmap$e ?v0 ?v1 ?v2 ))(is_TNil$c ?v2 ))):named a18 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 D_d_fun$ )(?v2 C_d_tllist$ ))(= (is_TNil$e (tmap$f ?v0 ?v1 ?v2 ))(is_TNil$e ?v2 ))):named a19 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 D_b_fun$ )(?v2 C_d_tllist$ ))(= (is_TNil$c (tmap$ ?v0 ?v1 ?v2 ))(is_TNil$e ?v2 ))):named a20 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_a_fun$ )(?v2 B$ )(?v3 B_a_tllist$ ))(! (= (tmap$a ?v0 ?v1 (tCons$b ?v2 ?v3 ))(tCons$b (fun_app$a ?v0 ?v2 )(tmap$a ?v0 ?v1 ?v3 ))):pattern ((tmap$a ?v0 ?v1 (tCons$b ?v2 ?v3 ))))):named a21 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 A$ )(?v3 A_c_tllist$ ))(! (= (tmap$c ?v0 ?v1 (tCons$d ?v2 ?v3 ))(tCons$e (fun_app$b ?v0 ?v2 )(tmap$c ?v0 ?v1 ?v3 ))):pattern ((tmap$c ?v0 ?v1 (tCons$d ?v2 ?v3 ))))):named a22 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ )(?v3 A_a_tllist$ ))(! (= (tmap$d ?v0 ?v1 (tCons$e ?v2 ?v3 ))(tCons$e (fun_app$b ?v0 ?v2 )(tmap$d ?v0 ?v1 ?v3 ))):pattern ((tmap$d ?v0 ?v1 (tCons$e ?v2 ?v3 ))))):named a23 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 D_b_fun$ )(?v2 A$ )(?v3 A_d_tllist$ ))(! (= (tmap$b ?v0 ?v1 (tCons$c ?v2 ?v3 ))(tCons$ (fun_app$b ?v0 ?v2 )(tmap$b ?v0 ?v1 ?v3 ))):pattern ((tmap$b ?v0 ?v1 (tCons$c ?v2 ?v3 ))))):named a24 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 D_d_fun$ )(?v2 C$ )(?v3 C_d_tllist$ ))(! (= (tmap$f ?v0 ?v1 (tCons$a ?v2 ?v3 ))(tCons$a (fun_app$c ?v0 ?v2 )(tmap$f ?v0 ?v1 ?v3 ))):pattern ((tmap$f ?v0 ?v1 (tCons$a ?v2 ?v3 ))))):named a25 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 B_d_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (tmap$e ?v0 ?v1 (tCons$ ?v2 ?v3 ))(tCons$a (fun_app$d ?v0 ?v2 )(tmap$e ?v0 ?v1 ?v3 ))):pattern ((tmap$e ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a26 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (tmap$g ?v0 ?v1 (tCons$ ?v2 ?v3 ))(tCons$ (fun_app$b ?v0 ?v2 )(tmap$g ?v0 ?v1 ?v3 ))):pattern ((tmap$g ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a27 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 D_b_fun$ )(?v2 C$ )(?v3 C_d_tllist$ ))(! (= (tmap$ ?v0 ?v1 (tCons$a ?v2 ?v3 ))(tCons$ (fun_app$e ?v0 ?v2 )(tmap$ ?v0 ?v1 ?v3 ))):pattern ((tmap$ ?v0 ?v1 (tCons$a ?v2 ?v3 ))))):named a28 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_a_fun$ )(?v2 B_a_tllist$ )(?v3 A$ ))(= (= (tmap$a ?v0 ?v1 ?v2 )(tNil$b ?v3 ))(exists ((?v4 A$ ))(and (= ?v2 (tNil$b ?v4 ))(= (fun_app$b ?v1 ?v4 )?v3 ))))):named a29 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 D_b_fun$ )(?v2 A_d_tllist$ )(?v3 B$ ))(= (= (tmap$b ?v0 ?v1 ?v2 )(tNil$ ?v3 ))(exists ((?v4 D$ ))(and (= ?v2 (tNil$c ?v4 ))(= (fun_app$ ?v1 ?v4 )?v3 ))))):named a30 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 A_c_tllist$ )(?v3 A$ ))(= (= (tmap$c ?v0 ?v1 ?v2 )(tNil$e ?v3 ))(exists ((?v4 C$ ))(and (= ?v2 (tNil$d ?v4 ))(= (fun_app$e ?v1 ?v4 )?v3 ))))):named a31 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_tllist$ )(?v3 A$ ))(= (= (tmap$d ?v0 ?v1 ?v2 )(tNil$e ?v3 ))(exists ((?v4 A$ ))(and (= ?v2 (tNil$e ?v4 ))(= (fun_app$b ?v1 ?v4 )?v3 ))))):named a32 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 B_d_fun$ )(?v2 A_b_tllist$ )(?v3 D$ ))(= (= (tmap$e ?v0 ?v1 ?v2 )(tNil$a ?v3 ))(exists ((?v4 B$ ))(and (= ?v2 (tNil$ ?v4 ))(= (fun_app$f ?v1 ?v4 )?v3 ))))):named a33 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 D_d_fun$ )(?v2 C_d_tllist$ )(?v3 D$ ))(= (= (tmap$f ?v0 ?v1 ?v2 )(tNil$a ?v3 ))(exists ((?v4 D$ ))(and (= ?v2 (tNil$a ?v4 ))(= (fun_app$g ?v1 ?v4 )?v3 ))))):named a34 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 A_b_tllist$ )(?v3 B$ ))(= (= (tmap$g ?v0 ?v1 ?v2 )(tNil$ ?v3 ))(exists ((?v4 B$ ))(and (= ?v2 (tNil$ ?v4 ))(= (fun_app$a ?v1 ?v4 )?v3 ))))):named a35 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 D_b_fun$ )(?v2 C_d_tllist$ )(?v3 B$ ))(= (= (tmap$ ?v0 ?v1 ?v2 )(tNil$ ?v3 ))(exists ((?v4 D$ ))(and (= ?v2 (tNil$a ?v4 ))(= (fun_app$ ?v1 ?v4 )?v3 ))))):named a36 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_tllist$ ))(= (= (tNil$b ?v0 )(tmap$a ?v1 ?v2 ?v3 ))(exists ((?v4 A$ ))(and (= ?v3 (tNil$b ?v4 ))(= (fun_app$b ?v2 ?v4 )?v0 ))))):named a37 ))
(assert (! (forall ((?v0 B$ )(?v1 A_a_fun$ )(?v2 D_b_fun$ )(?v3 A_d_tllist$ ))(= (= (tNil$ ?v0 )(tmap$b ?v1 ?v2 ?v3 ))(exists ((?v4 D$ ))(and (= ?v3 (tNil$c ?v4 ))(= (fun_app$ ?v2 ?v4 )?v0 ))))):named a38 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_fun$ )(?v2 C_a_fun$ )(?v3 A_c_tllist$ ))(= (= (tNil$e ?v0 )(tmap$c ?v1 ?v2 ?v3 ))(exists ((?v4 C$ ))(and (= ?v3 (tNil$d ?v4 ))(= (fun_app$e ?v2 ?v4 )?v0 ))))):named a39 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_tllist$ ))(= (= (tNil$e ?v0 )(tmap$d ?v1 ?v2 ?v3 ))(exists ((?v4 A$ ))(and (= ?v3 (tNil$e ?v4 ))(= (fun_app$b ?v2 ?v4 )?v0 ))))):named a40 ))
(assert (! (forall ((?v0 D$ )(?v1 A_c_fun$ )(?v2 B_d_fun$ )(?v3 A_b_tllist$ ))(= (= (tNil$a ?v0 )(tmap$e ?v1 ?v2 ?v3 ))(exists ((?v4 B$ ))(and (= ?v3 (tNil$ ?v4 ))(= (fun_app$f ?v2 ?v4 )?v0 ))))):named a41 ))
(assert (! (forall ((?v0 D$ )(?v1 C_c_fun$ )(?v2 D_d_fun$ )(?v3 C_d_tllist$ ))(= (= (tNil$a ?v0 )(tmap$f ?v1 ?v2 ?v3 ))(exists ((?v4 D$ ))(and (= ?v3 (tNil$a ?v4 ))(= (fun_app$g ?v2 ?v4 )?v0 ))))):named a42 ))
(assert (! (forall ((?v0 B$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_tllist$ ))(= (= (tNil$ ?v0 )(tmap$g ?v1 ?v2 ?v3 ))(exists ((?v4 B$ ))(and (= ?v3 (tNil$ ?v4 ))(= (fun_app$a ?v2 ?v4 )?v0 ))))):named a43 ))
(assert (! (forall ((?v0 B$ )(?v1 C_a_fun$ )(?v2 D_b_fun$ )(?v3 C_d_tllist$ ))(= (= (tNil$ ?v0 )(tmap$ ?v1 ?v2 ?v3 ))(exists ((?v4 D$ ))(and (= ?v3 (tNil$a ?v4 ))(= (fun_app$ ?v2 ?v4 )?v0 ))))):named a44 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (tmap$a ?v0 ?v1 (tNil$b ?v2 ))(tNil$b (fun_app$b ?v1 ?v2 ))):pattern ((tmap$a ?v0 ?v1 (tNil$b ?v2 ))))):named a45 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 D_b_fun$ )(?v2 D$ ))(! (= (tmap$b ?v0 ?v1 (tNil$c ?v2 ))(tNil$ (fun_app$ ?v1 ?v2 ))):pattern ((tmap$b ?v0 ?v1 (tNil$c ?v2 ))))):named a46 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (tmap$c ?v0 ?v1 (tNil$d ?v2 ))(tNil$e (fun_app$e ?v1 ?v2 ))):pattern ((tmap$c ?v0 ?v1 (tNil$d ?v2 ))))):named a47 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (tmap$d ?v0 ?v1 (tNil$e ?v2 ))(tNil$e (fun_app$b ?v1 ?v2 ))):pattern ((tmap$d ?v0 ?v1 (tNil$e ?v2 ))))):named a48 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 B_d_fun$ )(?v2 B$ ))(! (= (tmap$e ?v0 ?v1 (tNil$ ?v2 ))(tNil$a (fun_app$f ?v1 ?v2 ))):pattern ((tmap$e ?v0 ?v1 (tNil$ ?v2 ))))):named a49 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 D_d_fun$ )(?v2 D$ ))(! (= (tmap$f ?v0 ?v1 (tNil$a ?v2 ))(tNil$a (fun_app$g ?v1 ?v2 ))):pattern ((tmap$f ?v0 ?v1 (tNil$a ?v2 ))))):named a50 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (tmap$g ?v0 ?v1 (tNil$ ?v2 ))(tNil$ (fun_app$a ?v1 ?v2 ))):pattern ((tmap$g ?v0 ?v1 (tNil$ ?v2 ))))):named a51 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 D_b_fun$ )(?v2 D$ ))(! (= (tmap$ ?v0 ?v1 (tNil$a ?v2 ))(tNil$ (fun_app$ ?v1 ?v2 ))):pattern ((tmap$ ?v0 ?v1 (tNil$a ?v2 ))))):named a52 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 D$ )(?v3 D$ ))(=> (and (= ?v0 ?v1 )(=> (lfinite$ ?v1 )(= ?v2 ?v3 )))(= (tllist_of_llist$ ?v2 ?v0 )(tllist_of_llist$ ?v3 ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 B$ )(?v3 B$ ))(=> (and (= ?v0 ?v1 )(=> (lfinite$a ?v1 )(= ?v2 ?v3 )))(= (tllist_of_llist$a ?v2 ?v0 )(tllist_of_llist$a ?v3 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 C_d_tllist$ ))(= (tmap$f id$ id$a ?v0 )?v0 )):named a55 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (tmap$g id$b id$c ?v0 )?v0 )):named a56 ))
(assert (! (forall ((?v0 A_c_tllist$ ))(= (tmap$h id$b id$ ?v0 )?v0 )):named a57 ))
(assert (! (forall ((?v0 A_d_tllist$ ))(= (tmap$i id$b id$a ?v0 )?v0 )):named a58 ))
(assert (! (forall ((?v0 B_b_tllist$ ))(= (tmap$j id$c id$c ?v0 )?v0 )):named a59 ))
(assert (! (forall ((?v0 B_c_tllist$ ))(= (tmap$k id$c id$ ?v0 )?v0 )):named a60 ))
(assert (! (forall ((?v0 B_d_tllist$ ))(= (tmap$l id$c id$a ?v0 )?v0 )):named a61 ))
(assert (! (forall ((?v0 C_a_tllist$ ))(= (tmap$m id$ id$b ?v0 )?v0 )):named a62 ))
(assert (! (forall ((?v0 C_b_tllist$ ))(= (tmap$n id$ id$c ?v0 )?v0 )):named a63 ))
(assert (! (forall ((?v0 C_c_tllist$ ))(= (tmap$o id$ id$ ?v0 )?v0 )):named a64 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 C_a_fun$ )(?v3 D_b_fun$ )(?v4 C_d_tllist$ ))(= (tmap$g ?v0 ?v1 (tmap$ ?v2 ?v3 ?v4 ))(tmap$ (fun_app$h (comp$ ?v0 )?v2 )(fun_app$i (comp$a ?v1 )?v3 )?v4 ))):named a65 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 D_b_fun$ )(?v2 C_c_fun$ )(?v3 D_d_fun$ )(?v4 C_d_tllist$ ))(= (tmap$ ?v0 ?v1 (tmap$f ?v2 ?v3 ?v4 ))(tmap$ (fun_app$j (comp$b ?v0 )?v2 )(fun_app$k (comp$c ?v1 )?v3 )?v4 ))):named a66 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_a_fun$ )(?v2 C_c_fun$ )(?v3 C_c_fun$ )(?v4 C_c_tllist$ ))(= (tmap$p ?v0 ?v1 (tmap$o ?v2 ?v3 ?v4 ))(tmap$p (fun_app$j (comp$b ?v0 )?v2 )(fun_app$j (comp$b ?v1 )?v3 )?v4 ))):named a67 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 A_a_fun$ )(?v2 C_c_fun$ )(?v3 C_a_fun$ )(?v4 C_c_tllist$ ))(= (tmap$q ?v0 ?v1 (tmap$r ?v2 ?v3 ?v4 ))(tmap$p (fun_app$j (comp$b ?v0 )?v2 )(fun_app$h (comp$ ?v1 )?v3 )?v4 ))):named a68 ))
(assert (! (forall ((?v0 D_b_fun$ )(?v1 C_a_fun$ )(?v2 D_d_fun$ )(?v3 C_c_fun$ )(?v4 D_c_tllist$ ))(= (tmap$s ?v0 ?v1 (tmap$t ?v2 ?v3 ?v4 ))(tmap$s (fun_app$k (comp$c ?v0 )?v2 )(fun_app$j (comp$b ?v1 )?v3 )?v4 ))):named a69 ))
(assert (! (forall ((?v0 D_b_fun$ )(?v1 D_b_fun$ )(?v2 D_d_fun$ )(?v3 D_d_fun$ )(?v4 D_d_tllist$ ))(= (tmap$u ?v0 ?v1 (tmap$v ?v2 ?v3 ?v4 ))(tmap$u (fun_app$k (comp$c ?v0 )?v2 )(fun_app$k (comp$c ?v1 )?v3 )?v4 ))):named a70 ))
(assert (! (forall ((?v0 D_b_fun$ )(?v1 A_a_fun$ )(?v2 D_d_fun$ )(?v3 C_a_fun$ )(?v4 D_c_tllist$ ))(= (tmap$w ?v0 ?v1 (tmap$x ?v2 ?v3 ?v4 ))(tmap$s (fun_app$k (comp$c ?v0 )?v2 )(fun_app$h (comp$ ?v1 )?v3 )?v4 ))):named a71 ))
(assert (! (forall ((?v0 D_b_fun$ )(?v1 B_b_fun$ )(?v2 D_d_fun$ )(?v3 D_b_fun$ )(?v4 D_d_tllist$ ))(= (tmap$y ?v0 ?v1 (tmap$z ?v2 ?v3 ?v4 ))(tmap$u (fun_app$k (comp$c ?v0 )?v2 )(fun_app$i (comp$a ?v1 )?v3 )?v4 ))):named a72 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ )(?v4 C_c_tllist$ ))(= (tmap$c ?v0 ?v1 (tmap$aa ?v2 ?v3 ?v4 ))(tmap$p (fun_app$h (comp$ ?v0 )?v2 )(fun_app$j (comp$b ?v1 )?v3 )?v4 ))):named a73 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 C_a_fun$ )(?v3 C_a_fun$ )(?v4 C_c_tllist$ ))(= (tmap$d ?v0 ?v1 (tmap$p ?v2 ?v3 ?v4 ))(tmap$p (fun_app$h (comp$ ?v0 )?v2 )(fun_app$h (comp$ ?v1 )?v3 )?v4 ))):named a74 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_c_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$ (lmap$a ?v2 ?v0 )(lmap$a ?v2 ?v1 )))):named a75 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_c_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$ (lmap$b ?v2 ?v0 )(lmap$b ?v2 ?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$a (lmap$c ?v2 ?v0 )(lmap$c ?v2 ?v1 )))):named a77 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_a_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$a (lmap$ ?v2 ?v0 )(lmap$ ?v2 ?v1 )))):named a78 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a79 ))
(assert (! (forall ((?v0 D$ )(?v1 D$ ))(= (= (tNil$a ?v0 )(tNil$a ?v1 ))(= ?v0 ?v1 ))):named a80 ))
(assert (! (forall ((?v0 C$ )(?v1 C_d_tllist$ )(?v2 C$ )(?v3 C_d_tllist$ ))(= (= (tCons$a ?v0 ?v1 )(tCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a81 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a82 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$a (lmap$c ?v0 ?v1 ))(lfinite$a ?v1 ))):named a83 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$b ?v0 ?v1 ))(lfinite$a ?v1 ))):named a84 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_llist$ ))(= (lfinite$ (lmap$a ?v0 ?v1 ))(lfinite$ ?v1 ))):named a85 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_llist$ ))(= (lfinite$a (lmap$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a86 ))
(assert (! (forall ((?v0 B$ ))(! (= (ttl$ (tNil$ ?v0 ))(tNil$ ?v0 )):pattern ((tNil$ ?v0 )))):named a87 ))
(assert (! (forall ((?v0 D$ ))(! (= (ttl$a (tNil$a ?v0 ))(tNil$a ?v0 )):pattern ((tNil$a ?v0 )))):named a88 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (is_TNil$c ?v0 )(exists ((?v1 B$ ))(= ?v0 (tNil$ ?v1 ))))):named a89 ))
(assert (! (forall ((?v0 C_d_tllist$ ))(= (is_TNil$e ?v0 )(exists ((?v1 D$ ))(= ?v0 (tNil$a ?v1 ))))):named a90 ))
(check-sat )
;(get-unsat-core )
