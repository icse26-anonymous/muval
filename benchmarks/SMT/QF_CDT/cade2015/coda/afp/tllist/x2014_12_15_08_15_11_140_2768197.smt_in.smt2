;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Unit$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort Unit_b_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_b_tllist_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort B_a_llist_b_tllist_fun$ 0 )
(declare-sort A_b_tllist_a_b_tllist_fun$ 0 )
(declare-sort B_a_llist_llist_b_tllist_fun$ 0 )
(declare-sort A_llist_b_tllist_a_b_tllist_fun$ 0 )
(declare-sort B_a_b_tllist_fun_a_b_tllist_fun$ 0 )
(declare-sort A_llist_b_tllist_a_llist_b_tllist_fun$ 0 )
(declare-sort A_bool_fun_a_b_tllist_a_b_tllist_fun_fun$ 0 )
(declare-sort A_llist_llist_b_tllist_a_llist_b_tllist_fun$ 0 )
(declare-sort B_a_llist_b_tllist_fun_a_llist_b_tllist_fun$ 0 )
(declare-sort B_a_llist_llist_b_tllist_fun_a_llist_llist_b_tllist_fun$ 0 )
(declare-sort A_llist_bool_fun_a_llist_b_tllist_a_llist_b_tllist_fun_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ A$ )(ttl$ A_b_tllist$ )))(A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))(A_llist_llist_b_tllist$ (tNil$a (terminal$a B$ ))(tCons$a (thd$a A_llist_llist$ )(ttl$a A_llist_llist_b_tllist$ )))(A_llist_b_tllist$ (tNil$b (terminal$b B$ ))(tCons$b (thd$b A_llist$ )(ttl$b A_llist_b_tllist$ )))(A_llist_llist_llist$ (lNil$b )(lCons$b (lhd$b A_llist_llist$ )(ltl$b A_llist_llist_llist$ )))(A_llist_llist_llist_b_tllist$ (tNil$c (terminal$c B$ ))(tCons$c (thd$c A_llist_llist_llist$ )(ttl$c A_llist_llist_llist_b_tllist$ )))))
(declare-fun b$ ()B$ )
(declare-fun uu$ ()B_a_llist_llist_b_tllist_fun$ )
(declare-fun uua$ ()B_a_llist_b_tllist_fun$ )
(declare-fun uub$ ()B_a_b_tllist_fun$ )
(declare-fun zero$ ()Enat$ )
(declare-fun unity$ ()Unit$ )
(declare-fun fun_app$ (B_a_llist_llist_b_tllist_fun$ B$ )A_llist_llist_b_tllist$ )
(declare-fun tappend$ (A_llist_b_tllist$ )B_a_llist_b_tllist_fun_a_llist_b_tllist_fun$ )
(declare-fun tconcat$ (B$ A_llist_llist_llist_b_tllist$ )A_llist_llist_b_tllist$ )
(declare-fun tfilter$ (Unit_b_fun$ A_llist_llist_bool_fun$ A_llist_llist_b_tllist$ )A_llist_llist_b_tllist$ )
(declare-fun tlength$ (A_b_tllist$ )Enat$ )
(declare-fun fun_app$a (B_a_llist_b_tllist_fun$ B$ )A_llist_b_tllist$ )
(declare-fun fun_app$b (B_a_b_tllist_fun$ B$ )A_b_tllist$ )
(declare-fun fun_app$c (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$d (A_llist_llist_b_tllist_a_llist_b_tllist_fun$ A_llist_llist_b_tllist$ )A_llist_b_tllist$ )
(declare-fun fun_app$e (A_llist_b_tllist_a_b_tllist_fun$ A_llist_b_tllist$ )A_b_tllist$ )
(declare-fun fun_app$f (A_llist_b_tllist_a_llist_b_tllist_fun$ A_llist_b_tllist$ )A_llist_b_tllist$ )
(declare-fun fun_app$g (A_llist_bool_fun_a_llist_b_tllist_a_llist_b_tllist_fun_fun$ A_llist_bool_fun$ )A_llist_b_tllist_a_llist_b_tllist_fun$ )
(declare-fun fun_app$h (A_b_tllist_a_b_tllist_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun fun_app$i (A_bool_fun_a_b_tllist_a_b_tllist_fun_fun$ A_bool_fun$ )A_b_tllist_a_b_tllist_fun$ )
(declare-fun fun_app$j (B_a_llist_b_tllist_fun_a_llist_b_tllist_fun$ B_a_llist_b_tllist_fun$ )A_llist_b_tllist$ )
(declare-fun fun_app$k (B_a_b_tllist_fun_a_b_tllist_fun$ B_a_b_tllist_fun$ )A_b_tllist$ )
(declare-fun fun_app$l (B_a_llist_llist_b_tllist_fun_a_llist_llist_b_tllist_fun$ B_a_llist_llist_b_tllist_fun$ )A_llist_llist_b_tllist$ )
(declare-fun fun_app$m (Unit_b_fun$ Unit$ )B$ )
(declare-fun tappend$a (A_b_tllist$ )B_a_b_tllist_fun_a_b_tllist_fun$ )
(declare-fun tappend$b (A_llist_llist_b_tllist$ )B_a_llist_llist_b_tllist_fun_a_llist_llist_b_tllist_fun$ )
(declare-fun tconcat$a (B$ )A_llist_llist_b_tllist_a_llist_b_tllist_fun$ )
(declare-fun tconcat$b (B$ )A_llist_b_tllist_a_b_tllist_fun$ )
(declare-fun tconcat$c (Unit_b_fun$ A_llist_llist_llist_b_tllist$ )A_llist_llist_b_tllist$ )
(declare-fun tconcat$d (Unit_b_fun$ )A_llist_llist_b_tllist_a_llist_b_tllist_fun$ )
(declare-fun tconcat$e (Unit_b_fun$ )A_llist_b_tllist_a_b_tllist_fun$ )
(declare-fun tfilter$a (Unit_b_fun$ )A_llist_bool_fun_a_llist_b_tllist_a_llist_b_tllist_fun_fun$ )
(declare-fun tfilter$b (Unit_b_fun$ )A_bool_fun_a_b_tllist_a_b_tllist_fun_fun$ )
(declare-fun tfilter$c (B$ A_llist_llist_bool_fun$ A_llist_llist_b_tllist$ )A_llist_llist_b_tllist$ )
(declare-fun tfilter$d (B$ )A_llist_bool_fun_a_llist_b_tllist_a_llist_b_tllist_fun_fun$ )
(declare-fun tfilter$e (B$ )A_bool_fun_a_b_tllist_a_b_tllist_fun_fun$ )
(declare-fun pred_tllist$ (A_llist_llist_bool_fun$ B_bool_fun$ A_llist_llist_b_tllist$ )Bool )
(declare-fun pred_tllist$a (A_llist_bool_fun$ B_bool_fun$ A_llist_b_tllist$ )Bool )
(declare-fun pred_tllist$b (A_bool_fun$ B_bool_fun$ A_b_tllist$ )Bool )
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ uu$ ?v0 )(tNil$a ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$a uua$ ?v0 )(tNil$b ?v0 )):pattern ((fun_app$a uua$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$b uub$ ?v0 )(tNil$ ?v0 )):pattern ((fun_app$b uub$ ?v0 )))):named a2 ))
(assert (! (not (= (tlength$ (tNil$ b$ ))zero$ )):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$a ?v0 )(tNil$a ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$b ?v0 )(tNil$b ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$ )(?v1 B_bool_fun$ )(?v2 B$ ))(! (= (pred_tllist$ ?v0 ?v1 (tNil$a ?v2 ))(fun_app$c ?v1 ?v2 )):pattern ((pred_tllist$ ?v0 ?v1 (tNil$a ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 B_bool_fun$ )(?v2 B$ ))(! (= (pred_tllist$a ?v0 ?v1 (tNil$b ?v2 ))(fun_app$c ?v1 ?v2 )):pattern ((pred_tllist$a ?v0 ?v1 (tNil$b ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 B$ ))(! (= (pred_tllist$b ?v0 ?v1 (tNil$ ?v2 ))(fun_app$c ?v1 ?v2 )):pattern ((pred_tllist$b ?v0 ?v1 (tNil$ ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (tconcat$ ?v0 (tNil$c ?v1 ))(tNil$a ?v1 )):pattern ((tconcat$ ?v0 (tNil$c ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$d (tconcat$a ?v0 )(tNil$a ?v1 ))(tNil$b ?v1 )):pattern ((fun_app$d (tconcat$a ?v0 )(tNil$a ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$e (tconcat$b ?v0 )(tNil$b ?v1 ))(tNil$ ?v1 )):pattern ((fun_app$e (tconcat$b ?v0 )(tNil$b ?v1 ))))):named a12 ))
(assert (! (forall ((?v0 Enat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a13 ))
(assert (! (forall ((?v0 Enat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a14 ))
(assert (! (forall ((?v0 Unit_b_fun$ )(?v1 B$ ))(! (= (tconcat$c ?v0 (tNil$c ?v1 ))(tNil$a ?v1 )):pattern ((tconcat$c ?v0 (tNil$c ?v1 ))))):named a15 ))
(assert (! (forall ((?v0 Unit_b_fun$ )(?v1 B$ ))(! (= (fun_app$d (tconcat$d ?v0 )(tNil$a ?v1 ))(tNil$b ?v1 )):pattern ((fun_app$d (tconcat$d ?v0 )(tNil$a ?v1 ))))):named a16 ))
(assert (! (forall ((?v0 Unit_b_fun$ )(?v1 B$ ))(! (= (fun_app$e (tconcat$e ?v0 )(tNil$b ?v1 ))(tNil$ ?v1 )):pattern ((fun_app$e (tconcat$e ?v0 )(tNil$b ?v1 ))))):named a17 ))
(assert (! (forall ((?v0 Unit_b_fun$ )(?v1 A_llist_llist_bool_fun$ )(?v2 B$ ))(! (= (tfilter$ ?v0 ?v1 (tNil$a ?v2 ))(tNil$a ?v2 )):pattern ((tfilter$ ?v0 ?v1 (tNil$a ?v2 ))))):named a18 ))
(assert (! (forall ((?v0 Unit_b_fun$ )(?v1 A_llist_bool_fun$ )(?v2 B$ ))(! (= (fun_app$f (fun_app$g (tfilter$a ?v0 )?v1 )(tNil$b ?v2 ))(tNil$b ?v2 )):pattern ((fun_app$f (fun_app$g (tfilter$a ?v0 )?v1 )(tNil$b ?v2 ))))):named a19 ))
(assert (! (forall ((?v0 Unit_b_fun$ )(?v1 A_bool_fun$ )(?v2 B$ ))(! (= (fun_app$h (fun_app$i (tfilter$b ?v0 )?v1 )(tNil$ ?v2 ))(tNil$ ?v2 )):pattern ((fun_app$h (fun_app$i (tfilter$b ?v0 )?v1 )(tNil$ ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_llist_bool_fun$ )(?v2 B$ ))(! (= (tfilter$c ?v0 ?v1 (tNil$a ?v2 ))(tNil$a ?v2 )):pattern ((tfilter$c ?v0 ?v1 (tNil$a ?v2 ))))):named a21 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_bool_fun$ )(?v2 B$ ))(! (= (fun_app$f (fun_app$g (tfilter$d ?v0 )?v1 )(tNil$b ?v2 ))(tNil$b ?v2 )):pattern ((fun_app$f (fun_app$g (tfilter$d ?v0 )?v1 )(tNil$b ?v2 ))))):named a22 ))
(assert (! (forall ((?v0 B$ )(?v1 A_bool_fun$ )(?v2 B$ ))(! (= (fun_app$h (fun_app$i (tfilter$e ?v0 )?v1 )(tNil$ ?v2 ))(tNil$ ?v2 )):pattern ((fun_app$h (fun_app$i (tfilter$e ?v0 )?v1 )(tNil$ ?v2 ))))):named a23 ))
(assert (! (forall ((?v0 B$ )(?v1 B_a_llist_b_tllist_fun$ ))(! (= (fun_app$j (tappend$ (tNil$b ?v0 ))?v1 )(fun_app$a ?v1 ?v0 )):pattern ((fun_app$j (tappend$ (tNil$b ?v0 ))?v1 )))):named a24 ))
(assert (! (forall ((?v0 B$ )(?v1 B_a_b_tllist_fun$ ))(! (= (fun_app$k (tappend$a (tNil$ ?v0 ))?v1 )(fun_app$b ?v1 ?v0 )):pattern ((fun_app$k (tappend$a (tNil$ ?v0 ))?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_llist_llist_b_tllist$ ))(! (= (fun_app$l (tappend$b ?v0 )uu$ )?v0 ):pattern ((tappend$b ?v0 )))):named a26 ))
(assert (! (forall ((?v0 A_llist_b_tllist$ ))(! (= (fun_app$j (tappend$ ?v0 )uua$ )?v0 ):pattern ((tappend$ ?v0 )))):named a27 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (fun_app$k (tappend$a ?v0 )uub$ )?v0 ):pattern ((tappend$a ?v0 )))):named a28 ))
(assert (! (forall ((?v0 Unit_b_fun$ ))(! (= (tconcat$d ?v0 )(tconcat$a (fun_app$m ?v0 unity$ ))):pattern ((tconcat$d ?v0 )))):named a29 ))
(assert (! (forall ((?v0 Unit_b_fun$ ))(! (= (tconcat$e ?v0 )(tconcat$b (fun_app$m ?v0 unity$ ))):pattern ((tconcat$e ?v0 )))):named a30 ))
(assert (! (forall ((?v0 Unit_b_fun$ ))(! (= (tfilter$a ?v0 )(tfilter$d (fun_app$m ?v0 unity$ ))):pattern ((tfilter$a ?v0 )))):named a31 ))
(assert (! (forall ((?v0 Unit_b_fun$ ))(! (= (tfilter$b ?v0 )(tfilter$e (fun_app$m ?v0 unity$ ))):pattern ((tfilter$b ?v0 )))):named a32 ))
(check-sat )
;(get-unsat-core )
