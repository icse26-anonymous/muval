;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort Nat_a_llist_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort Nat_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ A$ )(ttl$ A_b_tllist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))(A_llist_llist_llist$ (lNil$b )(lCons$b (lhd$b A_llist_llist$ )(ltl$b A_llist_llist_llist$ )))(A_llist_llist_b_tllist$ (tNil$a (terminal$a B$ ))(tCons$a (thd$a A_llist_llist$ )(ttl$a A_llist_llist_b_tllist$ )))(A_llist_b_tllist$ (tNil$b (terminal$b B$ ))(tCons$b (thd$b A_llist$ )(ttl$b A_llist_b_tllist$ )))))
(declare-sort A_llist_llist_llist_b_prod$ 0)
(declare-sort A_llist_llist_b_prod$ 0)
(declare-sort A_llist_b_prod$ 0)
(declare-fun fst$ (A_llist_llist_llist_b_prod$)A_llist_llist_llist$)
(declare-fun snd$ (A_llist_llist_llist_b_prod$)B$)
(declare-fun pair$ (A_llist_llist_llist$ B$ )A_llist_llist_llist_b_prod$)
(declare-fun fst$a (A_llist_llist_b_prod$)A_llist_llist$)
(declare-fun snd$a (A_llist_llist_b_prod$)B$)
(declare-fun pair$a (A_llist_llist$ B$ )A_llist_llist_b_prod$)
(declare-fun fst$b (A_llist_b_prod$)A_llist$)
(declare-fun snd$b (A_llist_b_prod$)B$)
(declare-fun pair$b (A_llist$ B$ )A_llist_b_prod$)
(declare-codatatypes ()((A_llist_llist_llist_b_tllist$ (tNil$c (terminal$c B$ ))(tCons$c (thd$c A_llist_llist_llist$ )(ttl$c A_llist_llist_llist_b_tllist$ )))(A_llist_llist_llist_llist$ (lNil$c )(lCons$c (lhd$c A_llist_llist_llist$ )(ltl$c A_llist_llist_llist_llist$ )))))
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun lset$ (A_llist_llist_llist$ )A_llist_llist_set$ )
(declare-fun tnth$ (A_b_tllist$ )Nat_a_fun$ )
(declare-fun tset$ (A_llist_llist_b_tllist$ )A_llist_llist_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lnth$a (A_llist_llist_llist$ )Nat_a_llist_llist_fun$ )
(declare-fun lnth$b (A_llist_llist$ )Nat_a_llist_fun$ )
(declare-fun lset$a (A_llist_llist$ )A_llist_set$ )
(declare-fun lset$b (A_llist$ )A_set$ )
(declare-fun tnth$a (A_llist_llist_b_tllist$ )Nat_a_llist_llist_fun$ )
(declare-fun tnth$b (A_llist_b_tllist$ )Nat_a_llist_fun$ )
(declare-fun tset$a (A_llist_b_tllist$ )A_llist_set$ )
(declare-fun tset$b (A_b_tllist$ )A_set$ )
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$ )A_llist$ )
(declare-fun lappend$ (A_llist_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$ (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lfilter$ (A_llist_llist_bool_fun$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun tconcat$ (B$ A_llist_llist_llist_b_tllist$ )A_llist_llist_b_tllist$ )
(declare-fun tfilter$ (B$ A_llist_llist_bool_fun$ A_llist_llist_b_tllist$ )A_llist_llist_b_tllist$ )
(declare-fun fun_app$a (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$b (A_llist_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun fun_app$c (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$a (A_llist_llist$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun lappend$b (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lappendt$ (A_llist_llist_llist$ A_llist_llist_b_tllist$ )A_llist_llist_b_tllist$ )
(declare-fun lconcat$a (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist$ )A_llist$ )
(declare-fun lfilter$a (A_llist_bool_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lfilter$b (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun tconcat$a (B$ A_llist_llist_b_tllist$ )A_llist_b_tllist$ )
(declare-fun tconcat$b (B$ A_llist_b_tllist$ )A_b_tllist$ )
(declare-fun tfilter$a (B$ A_llist_bool_fun$ A_llist_b_tllist$ )A_llist_b_tllist$ )
(declare-fun tfilter$b (B$ A_bool_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun inf_llist$ (Nat_a_llist_fun$ )A_llist_llist$ )
(declare-fun lappendt$a (A_llist_llist$ A_llist_b_tllist$ )A_llist_b_tllist$ )
(declare-fun lappendt$b (A_llist$ A_b_tllist$ )A_b_tllist$ )
(declare-fun undefined$ (Nat$ )A_llist$ )
(declare-fun inf_llist$a (Nat_a_fun$ )A_llist$ )
(declare-fun undefined$a (Nat$ )A$ )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$ (B$ A_llist_llist_llist$ )A_llist_llist_b_tllist$ )
(declare-fun llist_of_tllist$a (A_llist_llist_b_tllist$ )A_llist_llist_llist$ )
(declare-fun llist_of_tllist$b (A_llist_b_tllist$ )A_llist_llist$ )
(declare-fun llist_of_tllist$c (A_llist_llist_llist_b_tllist$ )A_llist_llist_llist_llist$ )
(declare-fun tllist_of_llist$a (B$ A_llist_llist$ )A_llist_b_tllist$ )
(declare-fun tllist_of_llist$b (B$ A_llist$ )A_b_tllist$ )
(assert (! (not (= (lnth$ (llist_of_tllist$ xs$ ))(tnth$ xs$ ))):named a0 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_llist_llist$ ))(= (llist_of_tllist$a (tllist_of_llist$ ?v0 ?v1 ))?v1 )):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_llist$ ))(= (llist_of_tllist$b (tllist_of_llist$a ?v0 ?v1 ))?v1 )):named a2 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (llist_of_tllist$ (tllist_of_llist$b ?v0 ?v1 ))?v1 )):named a3 ))
(assert (! (forall ((?v0 A_llist_llist_b_tllist$ ))(! (= (tnth$a ?v0 )(lnth$a (fst$ (pair$ (llist_of_tllist$a ?v0 )(terminal$a ?v0 ))))):pattern ((tnth$a ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_llist_b_tllist$ ))(! (= (tnth$b ?v0 )(lnth$b (fst$a (pair$a (llist_of_tllist$b ?v0 )(terminal$b ?v0 ))))):pattern ((tnth$b ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (tnth$ ?v0 )(lnth$ (fst$b (pair$b (llist_of_tllist$ ?v0 )(terminal$ ?v0 ))))):pattern ((tnth$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat_a_llist_fun$ )(?v1 Nat$ ))(= (fun_app$ (lnth$b (inf_llist$ ?v0 ))?v1 )(fun_app$ ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat$ ))(= (fun_app$a (lnth$ (inf_llist$a ?v0 ))?v1 )(fun_app$a ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_llist_llist_b_tllist$ ))(= (llist_of_tllist$a (tconcat$ ?v0 ?v1 ))(lconcat$ (llist_of_tllist$c ?v1 )))):named a9 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_llist_b_tllist$ ))(= (llist_of_tllist$b (tconcat$a ?v0 ?v1 ))(lconcat$a (llist_of_tllist$a ?v1 )))):named a10 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_b_tllist$ ))(= (llist_of_tllist$ (tconcat$b ?v0 ?v1 ))(lconcat$b (llist_of_tllist$b ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_b_tllist$ ))(= (llist_of_tllist$a (lappendt$ ?v0 ?v1 ))(lappend$ ?v0 (llist_of_tllist$a ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_b_tllist$ ))(= (llist_of_tllist$b (lappendt$a ?v0 ?v1 ))(fun_app$b (lappend$a ?v0 )(llist_of_tllist$b ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_tllist$ ))(= (llist_of_tllist$ (lappendt$b ?v0 ?v1 ))(fun_app$c (lappend$b ?v0 )(llist_of_tllist$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_tllist$ ))(! (= (fun_app$ (tnth$b (tCons$b ?v0 ?v1 ))zero$ )?v0 ):pattern ((tCons$b ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (fun_app$a (tnth$ (tCons$ ?v0 ?v1 ))zero$ )?v0 ):pattern ((tCons$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_llist_bool_fun$ )(?v2 A_llist_llist_b_tllist$ ))(= (llist_of_tllist$a (tfilter$ ?v0 ?v1 ?v2 ))(lfilter$ ?v1 (llist_of_tllist$a ?v2 )))):named a17 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist_b_tllist$ ))(= (llist_of_tllist$b (tfilter$a ?v0 ?v1 ?v2 ))(lfilter$a ?v1 (llist_of_tllist$b ?v2 )))):named a18 ))
(assert (! (forall ((?v0 B$ )(?v1 A_bool_fun$ )(?v2 A_b_tllist$ ))(= (llist_of_tllist$ (tfilter$b ?v0 ?v1 ?v2 ))(lfilter$b ?v1 (llist_of_tllist$ ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_tllist$ )(?v2 Nat$ ))(! (= (fun_app$ (tnth$b (tCons$b ?v0 ?v1 ))(suc$ ?v2 ))(fun_app$ (tnth$b ?v1 )?v2 )):pattern ((fun_app$ (tnth$b (tCons$b ?v0 ?v1 ))(suc$ ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 Nat$ ))(! (= (fun_app$a (tnth$ (tCons$ ?v0 ?v1 ))(suc$ ?v2 ))(fun_app$a (tnth$ ?v1 )?v2 )):pattern ((fun_app$a (tnth$ (tCons$ ?v0 ?v1 ))(suc$ ?v2 ))))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist_b_tllist$ ))(= (lset$ (llist_of_tllist$a ?v0 ))(tset$ ?v0 ))):named a22 ))
(assert (! (forall ((?v0 A_llist_b_tllist$ ))(= (lset$a (llist_of_tllist$b ?v0 ))(tset$a ?v0 ))):named a23 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (lset$b (llist_of_tllist$ ?v0 ))(tset$b ?v0 ))):named a24 ))
(assert (! (forall ((?v0 B$ ))(! (= (llist_of_tllist$a (tNil$a ?v0 ))lNil$b ):pattern ((tNil$a ?v0 )))):named a25 ))
(assert (! (forall ((?v0 B$ ))(! (= (llist_of_tllist$b (tNil$b ?v0 ))lNil$a ):pattern ((tNil$b ?v0 )))):named a26 ))
(assert (! (forall ((?v0 B$ ))(! (= (llist_of_tllist$ (tNil$ ?v0 ))lNil$ ):pattern ((tNil$ ?v0 )))):named a27 ))
(assert (! (forall ((?v0 B$ )(?v1 Nat$ ))(! (= (fun_app$ (tnth$b (tNil$b ?v0 ))?v1 )(undefined$ ?v1 )):pattern ((fun_app$ (tnth$b (tNil$b ?v0 ))?v1 )))):named a28 ))
(assert (! (forall ((?v0 B$ )(?v1 Nat$ ))(! (= (fun_app$a (tnth$ (tNil$ ?v0 ))?v1 )(undefined$a ?v1 )):pattern ((fun_app$a (tnth$ (tNil$ ?v0 ))?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_llist_llist_b_tllist$ ))(= (ltl$b (llist_of_tllist$a ?v0 ))(llist_of_tllist$a (ttl$a ?v0 )))):named a30 ))
(assert (! (forall ((?v0 A_llist_b_tllist$ ))(= (ltl$a (llist_of_tllist$b ?v0 ))(llist_of_tllist$b (ttl$b ?v0 )))):named a31 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (ltl$ (llist_of_tllist$ ?v0 ))(llist_of_tllist$ (ttl$ ?v0 )))):named a32 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (lfilter$a ?v0 (lfilter$a ?v0 ?v1 ))(lfilter$a ?v0 ?v1 ))):named a33 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfilter$b ?v0 (lfilter$b ?v0 ?v1 ))(lfilter$b ?v0 ?v1 ))):named a34 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a35 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$b ?v0 )(tNil$b ?v1 ))(= ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_a_fun$ ))(= (= (inf_llist$a ?v0 )(inf_llist$a ?v1 ))(= ?v0 ?v1 ))):named a38 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$b (lappend$a ?v0 )lNil$a )?v0 ):pattern ((lappend$a ?v0 )))):named a39 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (lappend$b ?v0 )lNil$ )?v0 ):pattern ((lappend$b ?v0 )))):named a40 ))
(check-sat )
;(get-unsat-core )
