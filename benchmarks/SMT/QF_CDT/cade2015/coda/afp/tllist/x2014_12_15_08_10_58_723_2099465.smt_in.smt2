;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort B_a_b_tllist_fun$ 0 )
(declare-sort A_b_tllist_bool_fun$ 0 )
(declare-sort A_llist_b_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_bool_fun$ 0 )
(declare-sort B_a_b_tllist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_a_b_tllist_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_b_tllist_fun$ 0 )
(declare-sort B_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_b_a_b_tllist_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_b_tllist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort A_llist_b_prod$ 0)
(declare-fun fst$ (A_llist_b_prod$)A_llist$)
(declare-fun snd$ (A_llist_b_prod$)B$)
(declare-fun pair$ (A_llist$ B$ )A_llist_b_prod$)
(declare-codatatypes ()((A_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ A$ )(ttl$ A_b_tllist$ )))))
(declare-fun uu$ ()A_llist_b_a_b_tllist_bool_fun_fun_fun$ )
(declare-fun uua$ ()A_llist_b_a_b_tllist_fun_fun$ )
(declare-fun uub$ (A_llist$ B$ )A_llist_b_bool_fun_fun$ )
(declare-fun uuc$ ()A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uud$ (Bool A_llist_b_bool_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uue$ (A_llist_b_a_b_tllist_bool_fun_fun_fun$ A_b_tllist$ )A_llist_b_bool_fun_fun$ )
(declare-fun uuf$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_prod$ )A_llist_b_bool_fun_fun$ )
(declare-fun uug$ (A_llist_b_prod_a_b_tllist_bool_fun_fun$ )A_llist_b_a_b_tllist_bool_fun_fun_fun$ )
(declare-fun uuh$ (A_llist_b_prod_a_b_tllist_fun$ )A_llist_b_a_b_tllist_fun_fun$ )
(declare-fun uui$ (A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ )A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uuj$ (A_llist_b_prod_bool_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun fun_app$ (B_a_b_tllist_fun$ B$ )A_b_tllist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_b_a_b_tllist_fun_fun$ A_llist$ )B_a_b_tllist_fun$ )
(declare-fun fun_app$b (B_a_llist_b_prod_bool_fun_fun$ B$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$c (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist$ )B_a_llist_b_prod_bool_fun_fun$ )
(declare-fun fun_app$d (A_b_tllist_bool_fun$ A_b_tllist$ )Bool )
(declare-fun fun_app$e (B_a_b_tllist_bool_fun_fun$ B$ )A_b_tllist_bool_fun$ )
(declare-fun fun_app$f (A_llist_b_a_b_tllist_bool_fun_fun_fun$ A_llist$ )B_a_b_tllist_bool_fun_fun$ )
(declare-fun fun_app$g (A_llist_b_prod_a_b_tllist_fun$ A_llist_b_prod$ )A_b_tllist$ )
(declare-fun fun_app$h (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$i (A_llist_b_bool_fun_fun$ A_llist$ )B_bool_fun$ )
(declare-fun fun_app$j (A_llist_b_prod_bool_fun$ A_llist_b_prod$ )Bool )
(declare-fun fun_app$k (A_llist_b_prod_a_b_tllist_bool_fun_fun$ A_llist_b_prod$ )A_b_tllist_bool_fun$ )
(declare-fun fun_app$l (A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ A_llist_b_prod$ )A_llist_b_prod_bool_fun$ )
(declare-fun case_prod$ (A_llist_b_bool_fun_fun$ )A_llist_b_prod_bool_fun$ )
(declare-fun cr_tllist$ ()A_llist_b_prod_a_b_tllist_bool_fun_fun$ )
(declare-fun case_prod$a (A_llist_b_a_b_tllist_bool_fun_fun_fun$ )A_llist_b_prod_a_b_tllist_bool_fun_fun$ )
(declare-fun case_prod$b (A_llist_b_a_b_tllist_fun_fun$ )A_llist_b_prod_a_b_tllist_fun$ )
(declare-fun case_prod$c (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$ (B$ A_llist$ )A_b_tllist$ )
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$ (fun_app$a uua$ ?v0 )?v1 )(tllist_of_llist$ ?v1 ?v0 )):pattern ((fun_app$ (fun_app$a uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$b (fun_app$c uuc$ ?v0 )?v1 )(case_prod$ (uub$ ?v0 ?v1 ))):pattern ((fun_app$b (fun_app$c uuc$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ )(?v2 A_b_tllist$ ))(! (= (fun_app$d (fun_app$e (fun_app$f uu$ ?v0 )?v1 )?v2 )(= (tllist_of_llist$ ?v1 ?v0 )?v2 )):pattern ((fun_app$d (fun_app$e (fun_app$f uu$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_b_tllist_fun$ )(?v1 A_llist$ )(?v2 B$ ))(! (= (fun_app$ (fun_app$a (uuh$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (pair$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uuh$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun$ )(?v1 A_llist$ )(?v2 B$ ))(! (= (fun_app$h (fun_app$i (uuj$ ?v0 )?v1 )?v2 )(fun_app$j ?v0 (pair$ ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$i (uuj$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_b_tllist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B$ ))(! (= (fun_app$e (fun_app$f (uug$ ?v0 )?v1 )?v2 )(fun_app$k ?v0 (pair$ ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$f (uug$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B$ ))(! (= (fun_app$b (fun_app$c (uui$ ?v0 )?v1 )?v2 )(fun_app$l ?v0 (pair$ ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$c (uui$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_llist_b_a_b_tllist_bool_fun_fun_fun$ )(?v1 A_b_tllist$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$i (uue$ ?v0 ?v1 )?v2 )?v3 )(fun_app$d (fun_app$e (fun_app$f ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$h (fun_app$i (uue$ ?v0 ?v1 )?v2 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$i (uuf$ ?v0 ?v1 )?v2 )?v3 )(fun_app$j (fun_app$b (fun_app$c ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$h (fun_app$i (uuf$ ?v0 ?v1 )?v2 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$i (uub$ ?v0 ?v1 )?v2 )?v3 )(and (= ?v0 ?v2 )(=> (lfinite$ ?v2 )(= ?v1 ?v3 )))):pattern ((fun_app$h (fun_app$i (uub$ ?v0 ?v1 )?v2 )?v3 )))):named a9 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$i (uud$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$h (fun_app$i ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$i (uud$ ?v0 ?v1 )?v2 )?v3 )))):named a10 ))
(assert (! (not (and (forall ((?v0 A_llist_b_prod$ )(?v1 A_b_tllist$ ))(=> (fun_app$d (fun_app$k (case_prod$a uu$ )?v0 )?v1 )(= (fun_app$g (case_prod$b uua$ )?v0 )?v1 )))(and (forall ((?v0 A_b_tllist$ ))(fun_app$d (fun_app$k (case_prod$a uu$ )(pair$ (llist_of_tllist$ ?v0 )(terminal$ ?v0 )))?v0 ))(forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ ))(= (fun_app$j (fun_app$l (case_prod$c uuc$ )?v0 )?v1 )(and (fun_app$d (fun_app$k (case_prod$a uu$ )?v0 )(fun_app$g (case_prod$b uua$ )?v0 ))(and (fun_app$d (fun_app$k (case_prod$a uu$ )?v1 )(fun_app$g (case_prod$b uua$ )?v1 ))(= (fun_app$g (case_prod$b uua$ )?v0 )(fun_app$g (case_prod$b uua$ )?v1 ))))))))):named a11 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ )(?v2 B$ )(?v3 A_llist$ ))(= (= (tllist_of_llist$ ?v0 ?v1 )(tllist_of_llist$ ?v2 ?v3 ))(and (= ?v1 ?v3 )(=> (lfinite$ ?v3 )(= ?v0 ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (llist_of_tllist$ (tllist_of_llist$ ?v0 ?v1 ))?v1 )):named a13 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (tllist_of_llist$ (terminal$ ?v0 )(llist_of_tllist$ ?v0 ))?v0 )):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 B$ )(?v3 B$ ))(=> (and (= ?v0 ?v1 )(=> (lfinite$ ?v1 )(= ?v2 ?v3 )))(= (tllist_of_llist$ ?v2 ?v0 )(tllist_of_llist$ ?v3 ?v1 )))):named a15 ))
(assert (! (= cr_tllist$ (case_prod$a uu$ )):named a16 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_a_b_tllist_bool_fun_fun_fun$ )(?v2 A_b_tllist$ ))(=> (forall ((?v3 A_llist$ )(?v4 B$ ))(=> (= (pair$ ?v3 ?v4 )?v0 )(fun_app$d (fun_app$e (fun_app$f ?v1 ?v3 )?v4 )?v2 )))(fun_app$d (fun_app$k (case_prod$a ?v1 )?v0 )?v2 ))):named a17 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v2 A_llist_b_prod$ ))(=> (forall ((?v3 A_llist$ )(?v4 B$ ))(=> (= (pair$ ?v3 ?v4 )?v0 )(fun_app$j (fun_app$b (fun_app$c ?v1 ?v3 )?v4 )?v2 )))(fun_app$j (fun_app$l (case_prod$c ?v1 )?v0 )?v2 ))):named a18 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_bool_fun_fun$ ))(=> (forall ((?v2 A_llist$ )(?v3 B$ ))(=> (= ?v0 (pair$ ?v2 ?v3 ))(fun_app$h (fun_app$i ?v1 ?v2 )?v3 )))(fun_app$j (case_prod$ ?v1 )?v0 ))):named a19 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B$ ))(=> (fun_app$h (fun_app$i ?v0 ?v1 )?v2 )(fun_app$j (case_prod$ ?v0 )(pair$ ?v1 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B$ ))(=> (fun_app$h (fun_app$i ?v0 ?v1 )?v2 )(fun_app$j (case_prod$ ?v0 )(pair$ ?v1 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$j (case_prod$ (uud$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$j (case_prod$ ?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ )(?v2 A_llist$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ )(?v2 A_llist$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 A_llist_b_a_b_tllist_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 A_b_tllist$ ))(= (fun_app$d (fun_app$k (case_prod$a ?v0 )?v1 )?v2 )(fun_app$j (case_prod$ (uue$ ?v0 ?v2 ))?v1 ))):named a25 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_prod$ ))(= (fun_app$j (fun_app$l (case_prod$c ?v0 )?v1 )?v2 )(fun_app$j (case_prod$ (uuf$ ?v0 ?v2 ))?v1 ))):named a26 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_b_tllist_bool_fun_fun$ ))(= (case_prod$a (uug$ ?v0 ))?v0 )):named a27 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_b_tllist_fun$ ))(= (case_prod$b (uuh$ ?v0 ))?v0 )):named a28 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ ))(= (case_prod$c (uui$ ?v0 ))?v0 )):named a29 ))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun$ ))(= (case_prod$ (uuj$ ?v0 ))?v0 )):named a30 ))
(assert (! (forall ((?v0 A_llist_b_a_b_tllist_bool_fun_fun_fun$ )(?v1 A_llist_b_prod_a_b_tllist_bool_fun_fun$ ))(=> (forall ((?v2 A_llist$ )(?v3 B$ ))(= (fun_app$e (fun_app$f ?v0 ?v2 )?v3 )(fun_app$k ?v1 (pair$ ?v2 ?v3 ))))(= (case_prod$a ?v0 )?v1 ))):named a31 ))
(assert (! (forall ((?v0 A_llist_b_a_b_tllist_fun_fun$ )(?v1 A_llist_b_prod_a_b_tllist_fun$ ))(=> (forall ((?v2 A_llist$ )(?v3 B$ ))(= (fun_app$ (fun_app$a ?v0 ?v2 )?v3 )(fun_app$g ?v1 (pair$ ?v2 ?v3 ))))(= (case_prod$b ?v0 )?v1 ))):named a32 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ ))(=> (forall ((?v2 A_llist$ )(?v3 B$ ))(= (fun_app$b (fun_app$c ?v0 ?v2 )?v3 )(fun_app$l ?v1 (pair$ ?v2 ?v3 ))))(= (case_prod$c ?v0 )?v1 ))):named a33 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist_b_prod_bool_fun$ ))(=> (forall ((?v2 A_llist$ )(?v3 B$ ))(= (fun_app$h (fun_app$i ?v0 ?v2 )?v3 )(fun_app$j ?v1 (pair$ ?v2 ?v3 ))))(= (case_prod$ ?v0 )?v1 ))):named a34 ))
(assert (! (forall ((?v0 A_llist_b_a_b_tllist_bool_fun_fun_fun$ )(?v1 A_llist$ )(?v2 B$ )(?v3 A_b_tllist$ ))(=> (fun_app$d (fun_app$k (case_prod$a ?v0 )(pair$ ?v1 ?v2 ))?v3 )(fun_app$d (fun_app$e (fun_app$f ?v0 ?v1 )?v2 )?v3 ))):named a35 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist$ )(?v2 B$ )(?v3 A_llist_b_prod$ ))(=> (fun_app$j (fun_app$l (case_prod$c ?v0 )(pair$ ?v1 ?v2 ))?v3 )(fun_app$j (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )?v3 ))):named a36 ))
(check-sat )
;(get-unsat-core )
