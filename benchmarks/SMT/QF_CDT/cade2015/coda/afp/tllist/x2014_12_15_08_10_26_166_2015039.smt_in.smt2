;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort A_b_tllist_bool_fun$ 0 )
(declare-sort A_b_tllist_a_b_tllist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ A$ )(ttl$ A_b_tllist$ )))))
(declare-fun b$ ()B$ )
(declare-fun uu$ ()A_a_bool_fun_fun$ )
(declare-fun uua$ ()B_b_bool_fun_fun$ )
(declare-fun uub$ ()A_b_tllist_a_b_tllist_bool_fun_fun$ )
(declare-fun member$ (B$ B_set$ )Bool )
(declare-fun fun_app$ (A_b_tllist_bool_fun$ A_b_tllist$ )Bool )
(declare-fun fun_app$a (A_b_tllist_a_b_tllist_bool_fun_fun$ A_b_tllist$ )A_b_tllist_bool_fun$ )
(declare-fun fun_app$b (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$c (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$d (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$e (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun undefined$ ()A$ )
(declare-fun pred_tllist$ (A_bool_fun$ B_bool_fun$ A_b_tllist$ )Bool )
(declare-fun set2_tllist$ (A_b_tllist$ )B_set$ )
(declare-fun tllist_all2$ (A_a_bool_fun_fun$ B_b_bool_fun_fun$ )A_b_tllist_a_b_tllist_bool_fun_fun$ )
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_b_tllist$ ))(! (= (fun_app$ (fun_app$a uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uub$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$b (fun_app$c uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$d (fun_app$e uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uu$ ?v0 )?v1 )))):named a2 ))
(assert (! (not (= (thd$ (tNil$ b$ ))undefined$ )):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 B$ ))(! (= (pred_tllist$ ?v0 ?v1 (tNil$ ?v2 ))(fun_app$b ?v1 ?v2 )):pattern ((pred_tllist$ ?v0 ?v1 (tNil$ ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 B$ ))(member$ ?v0 (set2_tllist$ (tNil$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 B$ ))(! (= (terminal$ (tNil$ ?v0 ))?v0 ):pattern ((tNil$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B$ )(?v3 B$ ))(! (= (fun_app$ (fun_app$a (tllist_all2$ ?v0 ?v1 )(tNil$ ?v2 ))(tNil$ ?v3 ))(fun_app$b (fun_app$c ?v1 ?v2 )?v3 )):pattern ((fun_app$ (fun_app$a (tllist_all2$ ?v0 ?v1 )(tNil$ ?v2 ))(tNil$ ?v3 ))))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (thd$ (tCons$ ?v0 ?v1 ))?v0 ):pattern ((tCons$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A$ )(?v3 A_b_tllist$ )(?v4 A$ )(?v5 A_b_tllist$ ))(! (= (fun_app$ (fun_app$a (tllist_all2$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(tCons$ ?v4 ?v5 ))(and (fun_app$d (fun_app$e ?v0 ?v2 )?v4 )(fun_app$ (fun_app$a (tllist_all2$ ?v0 ?v1 )?v3 )?v5 ))):pattern ((fun_app$ (fun_app$a (tllist_all2$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(tCons$ ?v4 ?v5 ))))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (terminal$ (tCons$ ?v0 ?v1 ))(terminal$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))(and (fun_app$d ?v0 ?v2 )(pred_tllist$ ?v0 ?v1 ?v3 ))):pattern ((pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (set2_tllist$ (tCons$ ?v0 ?v1 ))(set2_tllist$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a14 ))
(assert (! (= (tllist_all2$ uu$ uua$ )uub$ ):named a15 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_tllist$ )(?v2 A$ ))(=> (member$ ?v0 (set2_tllist$ ?v1 ))(member$ ?v0 (set2_tllist$ (tCons$ ?v2 ?v1 ))))):named a16 ))
(check-sat )
;(get-unsat-core )
