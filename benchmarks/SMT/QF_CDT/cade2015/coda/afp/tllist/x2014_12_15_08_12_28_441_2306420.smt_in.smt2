;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort B_enat_fun$ 0 )
(declare-sort B_a_llist_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_a_b_tllist_fun$ 0 )
(declare-sort Bool_a_llist_fun$ 0 )
(declare-sort Enat_a_llist_fun$ 0 )
(declare-sort A_b_tllist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort Bool_a_b_tllist_fun$ 0 )
(declare-sort Enat_b_enat_fun_fun$ 0 )
(declare-sort B_a_llist_b_prod_fun$ 0 )
(declare-sort Enat_b_prod_enat_fun$ 0 )
(declare-sort Enat_enat_b_prod_fun$ 0 )
(declare-sort A_llist_b_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_bool_fun$ 0 )
(declare-sort A_llist_b_prod_enat_fun$ 0 )
(declare-sort Bool_a_llist_b_prod_fun$ 0 )
(declare-sort A_llist_b_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_b_prod_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_fun$ 0 )
(declare-sort A_llist_b_a_b_tllist_fun_fun$ 0 )
(declare-sort B_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_enat_b_prod_fun$ 0 )
(declare-sort Enat_enat_fun_enat_enat_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_fun_fun$ 0 )
(declare-sort A_llist_b_prod_bool_fun_bool_fun$ 0 )
(declare-sort Bool_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_fun$ 0 )
(declare-sort Enat_a_llist_fun_enat_enat_fun_fun$ 0 )
(declare-sort Enat_enat_fun_enat_a_llist_fun_fun$ 0 )
(declare-sort A_llist_enat_fun_a_llist_enat_fun_fun$ 0 )
(declare-sort Enat_enat_b_prod_fun_enat_enat_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_enat_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort Enat_b_prod_enat_fun_enat_b_prod_enat_fun_fun$ 0 )
(declare-sort A_llist_a_llist_b_prod_fun_a_llist_enat_fun_fun$ 0 )
(declare-sort A_llist_b_bool_fun_fun_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_bool_fun_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_enat_fun_a_llist_b_prod_enat_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_fun_a_llist_b_prod_enat_fun_fun$ 0 )
(declare-sort A_llist_b_prod_enat_fun_a_llist_b_prod_a_llist_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_fun_a_llist_b_prod_a_llist_fun_fun$ 0 )
(declare-sort A_llist_b_prod_enat_b_prod_fun_a_llist_b_prod_enat_fun_fun$ 0 )
(declare-sort A_llist_b_prod_enat_fun_a_llist_b_prod_enat_b_prod_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_enat_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_bool_fun_fun_fun_a_llist_b_prod_a_llist_b_prod_bool_fun_fun_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort A_llist_b_prod$ 0)
(declare-sort Enat_b_prod$ 0)
(declare-fun fst$ (A_llist_b_prod$)A_llist$)
(declare-fun snd$ (A_llist_b_prod$)B$)
(declare-fun pair$ (A_llist$ B$ )A_llist_b_prod$)
(declare-fun fst$a (Enat_b_prod$)Enat$)
(declare-fun snd$a (Enat_b_prod$)B$)
(declare-fun pair$a (Enat$ B$ )Enat_b_prod$)
(declare-codatatypes ()((A_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ A$ )(ttl$ A_b_tllist$ )))))
(declare-fun uu$ ()A_llist_b_prod_a_llist_fun$ )
(declare-fun uua$ (A_llist$ B$ )A_llist_b_bool_fun_fun$ )
(declare-fun uub$ ()A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uuc$ (Bool A_llist_b_bool_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uud$ ()Enat_b_enat_fun_fun$ )
(declare-fun uue$ ()A_llist_b_a_llist_fun_fun$ )
(declare-fun uuf$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_prod$ )A_llist_b_bool_fun_fun$ )
(declare-fun uug$ ()Enat_enat_fun$ )
(declare-fun uuh$ (A_llist$ )A_llist_b_prod_a_llist_fun$ )
(declare-fun uui$ (Enat$ )A_llist_b_prod_enat_fun$ )
(declare-fun uuj$ (Enat$ )Enat_b_prod_enat_fun$ )
(declare-fun uuk$ (Enat$ )Enat_enat_fun$ )
(declare-fun uul$ (Enat$ )A_llist_enat_fun$ )
(declare-fun uum$ (A_llist_b_a_llist_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_llist_fun_fun$ )
(declare-fun uun$ (A_llist_b_a_llist_b_prod_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_llist_b_prod_fun_fun$ )
(declare-fun uuo$ (A_llist_b_a_b_tllist_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_b_tllist_fun_fun$ )
(declare-fun uup$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uuq$ (A_llist_b_bool_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uur$ (Bool_bool_fun$ A_llist_b_bool_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uus$ (A_llist_b_prod_bool_fun_bool_fun$ A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uut$ (Bool_a_llist_b_prod_bool_fun_fun$ A_llist_b_bool_fun_fun$ )A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uuu$ (A_llist_b_prod_bool_fun_a_llist_b_prod_bool_fun_fun$ A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uuv$ (Bool_a_llist_fun$ A_llist_b_bool_fun_fun$ )A_llist_b_a_llist_fun_fun$ )
(declare-fun uuw$ (A_llist_bool_fun$ A_llist_b_a_llist_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uux$ (Bool_a_b_tllist_fun$ A_llist_b_bool_fun_fun$ )A_llist_b_a_b_tllist_fun_fun$ )
(declare-fun uuy$ (A_llist_a_llist_fun$ A_llist_b_a_llist_fun_fun$ )A_llist_b_a_llist_fun_fun$ )
(declare-fun uuz$ (A_b_tllist_bool_fun$ A_llist_b_a_b_tllist_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uva$ (Bool_a_llist_b_prod_fun$ A_llist_b_bool_fun_fun$ )A_llist_b_a_llist_b_prod_fun_fun$ )
(declare-fun uvb$ ()A_llist_b_a_b_tllist_fun_fun$ )
(declare-fun uvc$ ()Enat_b_prod_enat_fun$ )
(declare-fun comp$ (A_llist_enat_fun$ )A_llist_b_prod_a_llist_fun_a_llist_b_prod_enat_fun_fun$ )
(declare-fun apfst$ (A_llist_enat_fun$ )A_llist_b_prod_enat_b_prod_fun$ )
(declare-fun comp$a (A_llist_b_prod_a_llist_fun$ )A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_fun_fun$ )
(declare-fun comp$b (A_llist_b_prod_enat_fun$ )A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_enat_fun_fun$ )
(declare-fun comp$c (Enat_b_prod_enat_fun$ )A_llist_b_prod_enat_b_prod_fun_a_llist_b_prod_enat_fun_fun$ )
(declare-fun comp$d (Enat_enat_fun$ )A_llist_enat_fun_a_llist_enat_fun_fun$ )
(declare-fun comp$e (Enat_enat_fun$ )A_llist_b_prod_enat_fun_a_llist_b_prod_enat_fun_fun$ )
(declare-fun comp$f (A_llist_a_llist_fun$ )A_llist_b_prod_a_llist_fun_a_llist_b_prod_a_llist_fun_fun$ )
(declare-fun comp$g (A_llist_enat_fun$ )A_llist_a_llist_fun_a_llist_enat_fun_fun$ )
(declare-fun comp$h (Enat_enat_fun$ )Enat_enat_fun_enat_enat_fun_fun$ )
(declare-fun comp$i (Enat_a_llist_fun$ )A_llist_b_prod_enat_fun_a_llist_b_prod_a_llist_fun_fun$ )
(declare-fun comp$j (A_llist_enat_fun$ )Enat_a_llist_fun_enat_enat_fun_fun$ )
(declare-fun comp$k (A_llist_b_prod_enat_fun$ )A_llist_a_llist_b_prod_fun_a_llist_enat_fun_fun$ )
(declare-fun comp$l (Enat_enat_b_prod_fun$ )A_llist_b_prod_enat_fun_a_llist_b_prod_enat_b_prod_fun_fun$ )
(declare-fun comp$m (Enat_b_prod_enat_fun$ )Enat_enat_b_prod_fun_enat_enat_fun_fun$ )
(declare-fun comp$n (Enat_enat_fun$ )Enat_b_prod_enat_fun_enat_b_prod_enat_fun_fun$ )
(declare-fun comp$o (Enat_a_llist_fun$ )Enat_enat_fun_enat_a_llist_fun_fun$ )
(declare-fun prod1$ ()A_llist_b_prod$ )
(declare-fun prod2$ ()A_llist_b_prod$ )
(declare-fun reflp$ (A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ )Bool )
(declare-fun apfst$a (A_llist_a_llist_fun$ )A_llist_b_prod_a_llist_b_prod_fun$ )
(declare-fun fun_app$ (A_llist_b_prod_a_llist_fun$ A_llist_b_prod$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ ()A_llist_enat_fun$ )
(declare-fun fun_app$a (Enat_b_prod_enat_fun$ Enat_b_prod$ )Enat$ )
(declare-fun fun_app$b (B_a_b_tllist_fun$ B$ )A_b_tllist$ )
(declare-fun fun_app$c (A_llist_b_a_b_tllist_fun_fun$ A_llist$ )B_a_b_tllist_fun$ )
(declare-fun fun_app$d (B_a_llist_b_prod_bool_fun_fun$ B$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$e (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist$ )B_a_llist_b_prod_bool_fun_fun$ )
(declare-fun fun_app$f (A_llist_b_bool_fun_fun_a_llist_b_prod_bool_fun_fun$ A_llist_b_bool_fun_fun$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$g (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$h (A_llist_b_bool_fun_fun$ A_llist$ )B_bool_fun$ )
(declare-fun fun_app$i (A_llist_b_prod_bool_fun$ A_llist_b_prod$ )Bool )
(declare-fun fun_app$j (B_a_llist_b_prod_fun$ B$ )A_llist_b_prod$ )
(declare-fun fun_app$k (A_llist_b_a_llist_b_prod_fun_fun$ A_llist$ )B_a_llist_b_prod_fun$ )
(declare-fun fun_app$l (B_a_llist_fun$ B$ )A_llist$ )
(declare-fun fun_app$m (A_llist_b_a_llist_fun_fun$ A_llist$ )B_a_llist_fun$ )
(declare-fun fun_app$n (A_llist_b_prod_a_llist_b_prod_fun$ A_llist_b_prod$ )A_llist_b_prod$ )
(declare-fun fun_app$o (A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ A_llist_b_prod$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$p (A_llist_b_a_llist_b_prod_bool_fun_fun_fun_a_llist_b_prod_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ )
(declare-fun fun_app$q (A_b_tllist_bool_fun$ A_b_tllist$ )Bool )
(declare-fun fun_app$r (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$s (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$t (Bool_a_b_tllist_fun$ Bool )A_b_tllist$ )
(declare-fun fun_app$u (Bool_a_llist_fun$ Bool )A_llist$ )
(declare-fun fun_app$v (Bool_a_llist_b_prod_fun$ Bool )A_llist_b_prod$ )
(declare-fun fun_app$w (Bool_bool_fun$ Bool )Bool )
(declare-fun fun_app$x (Bool_a_llist_b_prod_bool_fun_fun$ Bool )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$y (A_llist_b_prod_bool_fun_bool_fun$ A_llist_b_prod_bool_fun$ )Bool )
(declare-fun fun_app$z (A_llist_b_prod_bool_fun_a_llist_b_prod_bool_fun_fun$ A_llist_b_prod_bool_fun$ )A_llist_b_prod_bool_fun$ )
(declare-fun case_prod$ ()A_llist_b_bool_fun_fun_a_llist_b_prod_bool_fun_fun$ )
(declare-fun fun_app$aa (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$ab (A_llist_b_prod_enat_fun$ A_llist_b_prod$ )Enat$ )
(declare-fun fun_app$ac (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun fun_app$ad (B_enat_fun$ B$ )Enat$ )
(declare-fun fun_app$ae (Enat_b_enat_fun_fun$ Enat$ )B_enat_fun$ )
(declare-fun fun_app$af (A_llist_b_prod_a_llist_fun_a_llist_b_prod_enat_fun_fun$ A_llist_b_prod_a_llist_fun$ )A_llist_b_prod_enat_fun$ )
(declare-fun fun_app$ag (A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_a_llist_fun_fun$ A_llist_b_prod_a_llist_b_prod_fun$ )A_llist_b_prod_a_llist_fun$ )
(declare-fun fun_app$ah (A_llist_b_prod_a_llist_b_prod_fun_a_llist_b_prod_enat_fun_fun$ A_llist_b_prod_a_llist_b_prod_fun$ )A_llist_b_prod_enat_fun$ )
(declare-fun fun_app$ai (A_llist_b_prod_enat_b_prod_fun_a_llist_b_prod_enat_fun_fun$ A_llist_b_prod_enat_b_prod_fun$ )A_llist_b_prod_enat_fun$ )
(declare-fun fun_app$aj (A_llist_b_prod_enat_b_prod_fun$ A_llist_b_prod$ )Enat_b_prod$ )
(declare-fun fun_app$ak (A_llist_enat_fun_a_llist_enat_fun_fun$ A_llist_enat_fun$ )A_llist_enat_fun$ )
(declare-fun fun_app$al (A_llist_b_prod_enat_fun_a_llist_b_prod_enat_fun_fun$ A_llist_b_prod_enat_fun$ )A_llist_b_prod_enat_fun$ )
(declare-fun fun_app$am (A_llist_b_prod_a_llist_fun_a_llist_b_prod_a_llist_fun_fun$ A_llist_b_prod_a_llist_fun$ )A_llist_b_prod_a_llist_fun$ )
(declare-fun fun_app$an (A_llist_a_llist_fun_a_llist_enat_fun_fun$ A_llist_a_llist_fun$ )A_llist_enat_fun$ )
(declare-fun fun_app$ao (Enat_enat_fun_enat_enat_fun_fun$ Enat_enat_fun$ )Enat_enat_fun$ )
(declare-fun fun_app$ap (A_llist_b_prod_enat_fun_a_llist_b_prod_a_llist_fun_fun$ A_llist_b_prod_enat_fun$ )A_llist_b_prod_a_llist_fun$ )
(declare-fun fun_app$aq (Enat_a_llist_fun_enat_enat_fun_fun$ Enat_a_llist_fun$ )Enat_enat_fun$ )
(declare-fun fun_app$ar (A_llist_a_llist_b_prod_fun_a_llist_enat_fun_fun$ A_llist_a_llist_b_prod_fun$ )A_llist_enat_fun$ )
(declare-fun fun_app$as (A_llist_b_prod_enat_fun_a_llist_b_prod_enat_b_prod_fun_fun$ A_llist_b_prod_enat_fun$ )A_llist_b_prod_enat_b_prod_fun$ )
(declare-fun fun_app$at (Enat_enat_b_prod_fun_enat_enat_fun_fun$ Enat_enat_b_prod_fun$ )Enat_enat_fun$ )
(declare-fun fun_app$au (Enat_b_prod_enat_fun_enat_b_prod_enat_fun_fun$ Enat_b_prod_enat_fun$ )Enat_b_prod_enat_fun$ )
(declare-fun fun_app$av (Enat_enat_fun_enat_a_llist_fun_fun$ Enat_enat_fun$ )Enat_a_llist_fun$ )
(declare-fun case_prod$a (A_llist_b_a_b_tllist_fun_fun$ A_llist_b_prod$ )A_b_tllist$ )
(declare-fun case_prod$b (A_llist_b_a_llist_fun_fun$ )A_llist_b_prod_a_llist_fun$ )
(declare-fun case_prod$c (A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_prod_a_llist_b_prod_fun$ )
(declare-fun case_prod$d ()A_llist_b_a_llist_b_prod_bool_fun_fun_fun_a_llist_b_prod_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun case_prod$e (Enat_b_enat_fun_fun$ )Enat_b_prod_enat_fun$ )
(declare-fun internal_split$ ()A_llist_b_a_llist_b_prod_bool_fun_fun_fun_a_llist_b_prod_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun internal_split$a ()A_llist_b_bool_fun_fun_a_llist_b_prod_bool_fun_fun$ )
(declare-fun tllist_of_llist$ (B$ A_llist$ )A_b_tllist$ )
(assert (! (forall ((?v0 A_llist_b_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Enat_b_prod$ ))(! (= (fun_app$a uvc$ ?v0 )(fst$a ?v0 )):pattern ((fun_app$a uvc$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$b (fun_app$c uvb$ ?v0 )?v1 )(tllist_of_llist$ ?v1 ?v0 )):pattern ((fun_app$b (fun_app$c uvb$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$d (fun_app$e uub$ ?v0 )?v1 )(fun_app$f case_prod$ (uua$ ?v0 ?v1 ))):pattern ((fun_app$d (fun_app$e uub$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$h (uuf$ ?v0 ?v1 )?v2 )?v3 )(fun_app$i (fun_app$d (fun_app$e ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$g (fun_app$h (uuf$ ?v0 ?v1 )?v2 )?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$h (uua$ ?v0 ?v1 )?v2 )?v3 )(and (= ?v0 ?v2 )(=> (lfinite$ ?v2 )(= ?v1 ?v3 )))):pattern ((fun_app$g (fun_app$h (uua$ ?v0 ?v1 )?v2 )?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_llist_b_a_b_tllist_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$b (fun_app$c (uuo$ ?v0 ?v1 )?v2 )?v3 )(case_prod$a ?v0 (fun_app$j (fun_app$k ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (uuo$ ?v0 ?v1 )?v2 )?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$l (fun_app$m (uum$ ?v0 ?v1 )?v2 )?v3 )(fun_app$ (case_prod$b ?v0 )(fun_app$j (fun_app$k ?v1 ?v2 )?v3 ))):pattern ((fun_app$l (fun_app$m (uum$ ?v0 ?v1 )?v2 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$j (fun_app$k (uun$ ?v0 ?v1 )?v2 )?v3 )(fun_app$n (case_prod$c ?v0 )(fun_app$j (fun_app$k ?v1 ?v2 )?v3 ))):pattern ((fun_app$j (fun_app$k (uun$ ?v0 ?v1 )?v2 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$h (uuq$ ?v0 ?v1 )?v2 )?v3 )(fun_app$i (fun_app$f case_prod$ ?v0 )(fun_app$j (fun_app$k ?v1 ?v2 )?v3 ))):pattern ((fun_app$g (fun_app$h (uuq$ ?v0 ?v1 )?v2 )?v3 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$d (fun_app$e (uup$ ?v0 ?v1 )?v2 )?v3 )(fun_app$o (fun_app$p case_prod$d ?v0 )(fun_app$j (fun_app$k ?v1 ?v2 )?v3 ))):pattern ((fun_app$d (fun_app$e (uup$ ?v0 ?v1 )?v2 )?v3 )))):named a10 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$h (uuc$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$g (fun_app$h ?v1 ?v2 )?v3 ))):pattern ((fun_app$g (fun_app$h (uuc$ ?v0 ?v1 )?v2 )?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_b_tllist_bool_fun$ )(?v1 A_llist_b_a_b_tllist_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$h (uuz$ ?v0 ?v1 )?v2 )?v3 )(fun_app$q ?v0 (fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))):pattern ((fun_app$g (fun_app$h (uuz$ ?v0 ?v1 )?v2 )?v3 )))):named a12 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_b_a_llist_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$l (fun_app$m (uuy$ ?v0 ?v1 )?v2 )?v3 )(fun_app$r ?v0 (fun_app$l (fun_app$m ?v1 ?v2 )?v3 ))):pattern ((fun_app$l (fun_app$m (uuy$ ?v0 ?v1 )?v2 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_b_a_llist_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$h (uuw$ ?v0 ?v1 )?v2 )?v3 )(fun_app$s ?v0 (fun_app$l (fun_app$m ?v1 ?v2 )?v3 ))):pattern ((fun_app$g (fun_app$h (uuw$ ?v0 ?v1 )?v2 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 Bool_a_b_tllist_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$b (fun_app$c (uux$ ?v0 ?v1 )?v2 )?v3 )(fun_app$t ?v0 (fun_app$g (fun_app$h ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (uux$ ?v0 ?v1 )?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 Bool_a_llist_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$l (fun_app$m (uuv$ ?v0 ?v1 )?v2 )?v3 )(fun_app$u ?v0 (fun_app$g (fun_app$h ?v1 ?v2 )?v3 ))):pattern ((fun_app$l (fun_app$m (uuv$ ?v0 ?v1 )?v2 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 Bool_a_llist_b_prod_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$j (fun_app$k (uva$ ?v0 ?v1 )?v2 )?v3 )(fun_app$v ?v0 (fun_app$g (fun_app$h ?v1 ?v2 )?v3 ))):pattern ((fun_app$j (fun_app$k (uva$ ?v0 ?v1 )?v2 )?v3 )))):named a17 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$h (uur$ ?v0 ?v1 )?v2 )?v3 )(fun_app$w ?v0 (fun_app$g (fun_app$h ?v1 ?v2 )?v3 ))):pattern ((fun_app$g (fun_app$h (uur$ ?v0 ?v1 )?v2 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 Bool_a_llist_b_prod_bool_fun_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$d (fun_app$e (uut$ ?v0 ?v1 )?v2 )?v3 )(fun_app$x ?v0 (fun_app$g (fun_app$h ?v1 ?v2 )?v3 ))):pattern ((fun_app$d (fun_app$e (uut$ ?v0 ?v1 )?v2 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun_bool_fun$ )(?v1 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$h (uus$ ?v0 ?v1 )?v2 )?v3 )(fun_app$y ?v0 (fun_app$d (fun_app$e ?v1 ?v2 )?v3 ))):pattern ((fun_app$g (fun_app$h (uus$ ?v0 ?v1 )?v2 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun_a_llist_b_prod_bool_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$d (fun_app$e (uuu$ ?v0 ?v1 )?v2 )?v3 )(fun_app$z ?v0 (fun_app$d (fun_app$e ?v1 ?v2 )?v3 ))):pattern ((fun_app$d (fun_app$e (uuu$ ?v0 ?v1 )?v2 )?v3 )))):named a21 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_prod$ ))(! (= (fun_app$ (uuh$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (uuh$ ?v0 )?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$l (fun_app$m uue$ ?v0 )?v1 )?v0 ):pattern ((fun_app$l (fun_app$m uue$ ?v0 )?v1 )))):named a23 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(! (= (fun_app$aa (uul$ ?v0 )?v1 )?v0 ):pattern ((fun_app$aa (uul$ ?v0 )?v1 )))):named a24 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_b_prod$ ))(! (= (fun_app$ab (uui$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ab (uui$ ?v0 )?v1 )))):named a25 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat_b_prod$ ))(! (= (fun_app$a (uuj$ ?v0 )?v1 )?v0 ):pattern ((fun_app$a (uuj$ ?v0 )?v1 )))):named a26 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (fun_app$ac (uuk$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ac (uuk$ ?v0 )?v1 )))):named a27 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B$ ))(! (= (fun_app$ad (fun_app$ae uud$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ad (fun_app$ae uud$ ?v0 )?v1 )))):named a28 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ac uug$ ?v0 )?v0 ):pattern ((fun_app$ac uug$ ?v0 )))):named a29 ))
(assert (! (not (= (fun_app$ab (fun_app$af (comp$ llength$ )uu$ )prod1$ )(fun_app$ab (fun_app$af (comp$ llength$ )uu$ )prod2$ ))):named a30 ))
(assert (! (fun_app$i (fun_app$o (fun_app$p case_prod$d uub$ )prod1$ )prod2$ ):named a31 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$i (fun_app$f case_prod$ (uuc$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$i (fun_app$f case_prod$ ?v1 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$ (fun_app$ag (comp$a ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$ag (comp$a ?v0 )?v1 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 A_llist_b_prod_enat_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$ab (fun_app$ah (comp$b ?v0 )?v1 )?v2 )(fun_app$ab ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$ab (fun_app$ah (comp$b ?v0 )?v1 )?v2 )))):named a34 ))
(assert (! (forall ((?v0 Enat_b_prod_enat_fun$ )(?v1 A_llist_b_prod_enat_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$ab (fun_app$ai (comp$c ?v0 )?v1 )?v2 )(fun_app$a ?v0 (fun_app$aj ?v1 ?v2 ))):pattern ((fun_app$ab (fun_app$ai (comp$c ?v0 )?v1 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist$ ))(! (= (fun_app$aa (fun_app$ak (comp$d ?v0 )?v1 )?v2 )(fun_app$ac ?v0 (fun_app$aa ?v1 ?v2 ))):pattern ((fun_app$aa (fun_app$ak (comp$d ?v0 )?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$ab (fun_app$al (comp$e ?v0 )?v1 )?v2 )(fun_app$ac ?v0 (fun_app$ab ?v1 ?v2 ))):pattern ((fun_app$ab (fun_app$al (comp$e ?v0 )?v1 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$ab (fun_app$af (comp$ ?v0 )?v1 )?v2 )(fun_app$aa ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ab (fun_app$af (comp$ ?v0 )?v1 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 Enat_b_prod$ ))(= (fst$a ?v0 )(fun_app$a (case_prod$e uud$ )?v0 ))):named a39 ))
(assert (! (forall ((?v0 A_llist_b_prod$ ))(= (fst$ ?v0 )(fun_app$ (case_prod$b uue$ )?v0 ))):named a40 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_prod$ ))(= (fun_app$i (fun_app$o (fun_app$p case_prod$d ?v0 )?v1 )?v2 )(fun_app$i (fun_app$f case_prod$ (uuf$ ?v0 ?v2 ))?v1 ))):named a41 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ ))(= (fun_app$ak (comp$d uug$ )?v0 )?v0 )):named a42 ))
(assert (! (forall ((?v0 A_llist_b_prod_enat_fun$ ))(= (fun_app$al (comp$e uug$ )?v0 )?v0 )):named a43 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ (fun_app$ag (comp$a (uuh$ ?v0 ))?v1 )?v2 )?v0 )):named a44 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ab (fun_app$ah (comp$b (uui$ ?v0 ))?v1 )?v2 )?v0 )):named a45 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_b_prod_enat_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ab (fun_app$ai (comp$c (uuj$ ?v0 ))?v1 )?v2 )?v0 )):named a46 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist$ ))(= (fun_app$aa (fun_app$ak (comp$d (uuk$ ?v0 ))?v1 )?v2 )?v0 )):named a47 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ab (fun_app$al (comp$e (uuk$ ?v0 ))?v1 )?v2 )?v0 )):named a48 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ab (fun_app$af (comp$ (uul$ ?v0 ))?v1 )?v2 )?v0 )):named a49 ))
(assert (! (reflp$ (fun_app$p case_prod$d uub$ )):named a50 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ (case_prod$b ?v0 )(fun_app$n (case_prod$c ?v1 )?v2 ))(fun_app$ (case_prod$b (uum$ ?v0 ?v1 ))?v2 ))):named a51 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$n (case_prod$c ?v0 )(fun_app$n (case_prod$c ?v1 )?v2 ))(fun_app$n (case_prod$c (uun$ ?v0 ?v1 ))?v2 ))):named a52 ))
(assert (! (forall ((?v0 A_llist_b_a_b_tllist_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (case_prod$a ?v0 (fun_app$n (case_prod$c ?v1 )?v2 ))(case_prod$a (uuo$ ?v0 ?v1 )?v2 ))):named a53 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$o (fun_app$p case_prod$d ?v0 )(fun_app$n (case_prod$c ?v1 )?v2 ))(fun_app$o (fun_app$p case_prod$d (uup$ ?v0 ?v1 ))?v2 ))):named a54 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$i (fun_app$f case_prod$ ?v0 )(fun_app$n (case_prod$c ?v1 )?v2 ))(fun_app$i (fun_app$f case_prod$ (uuq$ ?v0 ?v1 ))?v2 ))):named a55 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$w ?v0 (fun_app$i (fun_app$f case_prod$ ?v1 )?v2 ))(fun_app$i (fun_app$f case_prod$ (uur$ ?v0 ?v1 ))?v2 ))):named a56 ))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun_bool_fun$ )(?v1 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$y ?v0 (fun_app$o (fun_app$p case_prod$d ?v1 )?v2 ))(fun_app$i (fun_app$f case_prod$ (uus$ ?v0 ?v1 ))?v2 ))):named a57 ))
(assert (! (forall ((?v0 Bool_a_llist_b_prod_bool_fun_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$x ?v0 (fun_app$i (fun_app$f case_prod$ ?v1 )?v2 ))(fun_app$o (fun_app$p case_prod$d (uut$ ?v0 ?v1 ))?v2 ))):named a58 ))
(assert (! (forall ((?v0 A_llist_b_prod_bool_fun_a_llist_b_prod_bool_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$z ?v0 (fun_app$o (fun_app$p case_prod$d ?v1 )?v2 ))(fun_app$o (fun_app$p case_prod$d (uuu$ ?v0 ?v1 ))?v2 ))):named a59 ))
(assert (! (forall ((?v0 Bool_a_llist_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$u ?v0 (fun_app$i (fun_app$f case_prod$ ?v1 )?v2 ))(fun_app$ (case_prod$b (uuv$ ?v0 ?v1 ))?v2 ))):named a60 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_b_a_llist_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$s ?v0 (fun_app$ (case_prod$b ?v1 )?v2 ))(fun_app$i (fun_app$f case_prod$ (uuw$ ?v0 ?v1 ))?v2 ))):named a61 ))
(assert (! (forall ((?v0 Bool_a_b_tllist_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$t ?v0 (fun_app$i (fun_app$f case_prod$ ?v1 )?v2 ))(case_prod$a (uux$ ?v0 ?v1 )?v2 ))):named a62 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_b_a_llist_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$r ?v0 (fun_app$ (case_prod$b ?v1 )?v2 ))(fun_app$ (case_prod$b (uuy$ ?v0 ?v1 ))?v2 ))):named a63 ))
(assert (! (forall ((?v0 A_b_tllist_bool_fun$ )(?v1 A_llist_b_a_b_tllist_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$q ?v0 (case_prod$a ?v1 ?v2 ))(fun_app$i (fun_app$f case_prod$ (uuz$ ?v0 ?v1 ))?v2 ))):named a64 ))
(assert (! (forall ((?v0 Bool_a_llist_b_prod_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$v ?v0 (fun_app$i (fun_app$f case_prod$ ?v1 )?v2 ))(fun_app$n (case_prod$c (uva$ ?v0 ?v1 ))?v2 ))):named a65 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ ))(= (fun_app$al (comp$e ?v0 )(fun_app$af (comp$ ?v1 )?v2 ))(fun_app$af (comp$ (fun_app$ak (comp$d ?v0 )?v1 ))?v2 ))):named a66 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ ))(= (fun_app$af (comp$ ?v0 )(fun_app$am (comp$f ?v1 )?v2 ))(fun_app$af (comp$ (fun_app$an (comp$g ?v0 )?v1 ))?v2 ))):named a67 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_b_prod_fun$ ))(= (fun_app$af (comp$ ?v0 )(fun_app$ag (comp$a ?v1 )?v2 ))(fun_app$ah (comp$b (fun_app$af (comp$ ?v0 )?v1 ))?v2 ))):named a68 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_enat_fun$ )(?v2 A_llist_enat_fun$ ))(= (fun_app$ak (comp$d ?v0 )(fun_app$ak (comp$d ?v1 )?v2 ))(fun_app$ak (comp$d (fun_app$ao (comp$h ?v0 )?v1 ))?v2 ))):named a69 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist_a_llist_fun$ ))(= (fun_app$ak (comp$d ?v0 )(fun_app$an (comp$g ?v1 )?v2 ))(fun_app$an (comp$g (fun_app$ak (comp$d ?v0 )?v1 ))?v2 ))):named a70 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_enat_fun$ )(?v2 A_llist_b_prod_enat_fun$ ))(= (fun_app$al (comp$e ?v0 )(fun_app$al (comp$e ?v1 )?v2 ))(fun_app$al (comp$e (fun_app$ao (comp$h ?v0 )?v1 ))?v2 ))):named a71 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 Enat_a_llist_fun$ )(?v2 A_llist_b_prod_enat_fun$ ))(= (fun_app$af (comp$ ?v0 )(fun_app$ap (comp$i ?v1 )?v2 ))(fun_app$al (comp$e (fun_app$aq (comp$j ?v0 )?v1 ))?v2 ))):named a72 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 A_llist_a_llist_b_prod_fun$ ))(= (fun_app$ak (comp$d ?v0 )(fun_app$ar (comp$k ?v1 )?v2 ))(fun_app$ar (comp$k (fun_app$al (comp$e ?v0 )?v1 ))?v2 ))):named a73 ))
(assert (! (forall ((?v0 Enat_b_prod_enat_fun$ )(?v1 Enat_enat_b_prod_fun$ )(?v2 A_llist_b_prod_enat_fun$ ))(= (fun_app$ai (comp$c ?v0 )(fun_app$as (comp$l ?v1 )?v2 ))(fun_app$al (comp$e (fun_app$at (comp$m ?v0 )?v1 ))?v2 ))):named a74 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_b_prod_enat_fun$ )(?v2 A_llist_b_prod_enat_b_prod_fun$ ))(= (fun_app$al (comp$e ?v0 )(fun_app$ai (comp$c ?v1 )?v2 ))(fun_app$ai (comp$c (fun_app$au (comp$n ?v0 )?v1 ))?v2 ))):named a75 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ ))(= (fun_app$af (comp$ (fun_app$ak (comp$d ?v0 )?v1 ))?v2 )(fun_app$al (comp$e ?v0 )(fun_app$af (comp$ ?v1 )?v2 )))):named a76 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ ))(= (fun_app$af (comp$ (fun_app$an (comp$g ?v0 )?v1 ))?v2 )(fun_app$af (comp$ ?v0 )(fun_app$am (comp$f ?v1 )?v2 )))):named a77 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_b_prod_fun$ ))(= (fun_app$ah (comp$b (fun_app$af (comp$ ?v0 )?v1 ))?v2 )(fun_app$af (comp$ ?v0 )(fun_app$ag (comp$a ?v1 )?v2 )))):named a78 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_enat_fun$ )(?v2 A_llist_enat_fun$ ))(= (fun_app$ak (comp$d (fun_app$ao (comp$h ?v0 )?v1 ))?v2 )(fun_app$ak (comp$d ?v0 )(fun_app$ak (comp$d ?v1 )?v2 )))):named a79 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist_a_llist_fun$ ))(= (fun_app$an (comp$g (fun_app$ak (comp$d ?v0 )?v1 ))?v2 )(fun_app$ak (comp$d ?v0 )(fun_app$an (comp$g ?v1 )?v2 )))):named a80 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_enat_fun$ )(?v2 A_llist_b_prod_enat_fun$ ))(= (fun_app$al (comp$e (fun_app$ao (comp$h ?v0 )?v1 ))?v2 )(fun_app$al (comp$e ?v0 )(fun_app$al (comp$e ?v1 )?v2 )))):named a81 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 A_llist_a_llist_b_prod_fun$ ))(= (fun_app$ar (comp$k (fun_app$al (comp$e ?v0 )?v1 ))?v2 )(fun_app$ak (comp$d ?v0 )(fun_app$ar (comp$k ?v1 )?v2 )))):named a82 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 Enat_a_llist_fun$ )(?v2 A_llist_b_prod_enat_fun$ ))(= (fun_app$al (comp$e (fun_app$aq (comp$j ?v0 )?v1 ))?v2 )(fun_app$af (comp$ ?v0 )(fun_app$ap (comp$i ?v1 )?v2 )))):named a83 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_b_prod_enat_fun$ )(?v2 A_llist_b_prod_enat_b_prod_fun$ ))(= (fun_app$ai (comp$c (fun_app$au (comp$n ?v0 )?v1 ))?v2 )(fun_app$al (comp$e ?v0 )(fun_app$ai (comp$c ?v1 )?v2 )))):named a84 ))
(assert (! (forall ((?v0 Enat_b_prod_enat_fun$ )(?v1 Enat_enat_b_prod_fun$ )(?v2 A_llist_b_prod_enat_fun$ ))(= (fun_app$al (comp$e (fun_app$at (comp$m ?v0 )?v1 ))?v2 )(fun_app$ai (comp$c ?v0 )(fun_app$as (comp$l ?v1 )?v2 )))):named a85 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$ (fun_app$ag (comp$a ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$ag (comp$a ?v0 )?v1 )?v2 )))):named a86 ))
(assert (! (forall ((?v0 A_llist_b_prod_enat_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$ab (fun_app$ah (comp$b ?v0 )?v1 )?v2 )(fun_app$ab ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$ab (fun_app$ah (comp$b ?v0 )?v1 )?v2 )))):named a87 ))
(assert (! (forall ((?v0 Enat_b_prod_enat_fun$ )(?v1 A_llist_b_prod_enat_b_prod_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$ab (fun_app$ai (comp$c ?v0 )?v1 )?v2 )(fun_app$a ?v0 (fun_app$aj ?v1 ?v2 ))):pattern ((fun_app$ab (fun_app$ai (comp$c ?v0 )?v1 )?v2 )))):named a88 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist$ ))(! (= (fun_app$aa (fun_app$ak (comp$d ?v0 )?v1 )?v2 )(fun_app$ac ?v0 (fun_app$aa ?v1 ?v2 ))):pattern ((fun_app$aa (fun_app$ak (comp$d ?v0 )?v1 )?v2 )))):named a89 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$ab (fun_app$al (comp$e ?v0 )?v1 )?v2 )(fun_app$ac ?v0 (fun_app$ab ?v1 ?v2 ))):pattern ((fun_app$ab (fun_app$al (comp$e ?v0 )?v1 )?v2 )))):named a90 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod$ ))(! (= (fun_app$ab (fun_app$af (comp$ ?v0 )?v1 )?v2 )(fun_app$aa ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ab (fun_app$af (comp$ ?v0 )?v1 )?v2 )))):named a91 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_a_llist_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$ (case_prod$b ?v2 )?v0 )(fun_app$ (case_prod$b ?v2 )?v1 )))):named a92 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_a_llist_b_prod_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$n (case_prod$c ?v2 )?v0 )(fun_app$n (case_prod$c ?v2 )?v1 )))):named a93 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_a_b_tllist_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$a ?v2 ?v0 )(case_prod$a ?v2 ?v1 )))):named a94 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$o (fun_app$p case_prod$d ?v2 )?v0 )(fun_app$o (fun_app$p case_prod$d ?v2 )?v1 )))):named a95 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_bool_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$i (fun_app$f case_prod$ ?v2 )?v0 )(fun_app$i (fun_app$f case_prod$ ?v2 )?v1 )))):named a96 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ )(?v3 A_llist_b_prod$ ))(=> (= (fun_app$ag (comp$a ?v0 )?v1 )?v2 )(= (fun_app$ ?v0 (fun_app$n ?v1 ?v3 ))(fun_app$ ?v2 ?v3 )))):named a97 ))
(assert (! (forall ((?v0 A_llist_b_prod_enat_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod_enat_fun$ )(?v3 A_llist_b_prod$ ))(=> (= (fun_app$ah (comp$b ?v0 )?v1 )?v2 )(= (fun_app$ab ?v0 (fun_app$n ?v1 ?v3 ))(fun_app$ab ?v2 ?v3 )))):named a98 ))
(assert (! (forall ((?v0 Enat_b_prod_enat_fun$ )(?v1 A_llist_b_prod_enat_b_prod_fun$ )(?v2 A_llist_b_prod_enat_fun$ )(?v3 A_llist_b_prod$ ))(=> (= (fun_app$ai (comp$c ?v0 )?v1 )?v2 )(= (fun_app$a ?v0 (fun_app$aj ?v1 ?v3 ))(fun_app$ab ?v2 ?v3 )))):named a99 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist_enat_fun$ )(?v3 A_llist$ ))(=> (= (fun_app$ak (comp$d ?v0 )?v1 )?v2 )(= (fun_app$ac ?v0 (fun_app$aa ?v1 ?v3 ))(fun_app$aa ?v2 ?v3 )))):named a100 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 A_llist_b_prod_enat_fun$ )(?v3 A_llist_b_prod$ ))(=> (= (fun_app$al (comp$e ?v0 )?v1 )?v2 )(= (fun_app$ac ?v0 (fun_app$ab ?v1 ?v3 ))(fun_app$ab ?v2 ?v3 )))):named a101 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_enat_fun$ )(?v3 A_llist_b_prod$ ))(=> (= (fun_app$af (comp$ ?v0 )?v1 )?v2 )(= (fun_app$aa ?v0 (fun_app$ ?v1 ?v3 ))(fun_app$ab ?v2 ?v3 )))):named a102 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist_enat_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ ))(=> (= (fun_app$ak (comp$d ?v0 )?v1 )?v2 )(= (fun_app$al (comp$e ?v0 )(fun_app$af (comp$ ?v1 )?v3 ))(fun_app$af (comp$ ?v2 )?v3 )))):named a103 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_enat_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ ))(=> (= (fun_app$an (comp$g ?v0 )?v1 )?v2 )(= (fun_app$af (comp$ ?v0 )(fun_app$am (comp$f ?v1 )?v3 ))(fun_app$af (comp$ ?v2 )?v3 )))):named a104 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_enat_fun$ )(?v3 A_llist_b_prod_a_llist_b_prod_fun$ ))(=> (= (fun_app$af (comp$ ?v0 )?v1 )?v2 )(= (fun_app$af (comp$ ?v0 )(fun_app$ag (comp$a ?v1 )?v3 ))(fun_app$ah (comp$b ?v2 )?v3 )))):named a105 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_enat_fun$ )(?v2 Enat_enat_fun$ )(?v3 A_llist_enat_fun$ ))(=> (= (fun_app$ao (comp$h ?v0 )?v1 )?v2 )(= (fun_app$ak (comp$d ?v0 )(fun_app$ak (comp$d ?v1 )?v3 ))(fun_app$ak (comp$d ?v2 )?v3 )))):named a106 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist_enat_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (= (fun_app$ak (comp$d ?v0 )?v1 )?v2 )(= (fun_app$ak (comp$d ?v0 )(fun_app$an (comp$g ?v1 )?v3 ))(fun_app$an (comp$g ?v2 )?v3 )))):named a107 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_enat_fun$ )(?v2 Enat_enat_fun$ )(?v3 A_llist_b_prod_enat_fun$ ))(=> (= (fun_app$ao (comp$h ?v0 )?v1 )?v2 )(= (fun_app$al (comp$e ?v0 )(fun_app$al (comp$e ?v1 )?v3 ))(fun_app$al (comp$e ?v2 )?v3 )))):named a108 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 Enat_a_llist_fun$ )(?v2 Enat_enat_fun$ )(?v3 A_llist_b_prod_enat_fun$ ))(=> (= (fun_app$aq (comp$j ?v0 )?v1 )?v2 )(= (fun_app$af (comp$ ?v0 )(fun_app$ap (comp$i ?v1 )?v3 ))(fun_app$al (comp$e ?v2 )?v3 )))):named a109 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 A_llist_b_prod_enat_fun$ )(?v3 A_llist_a_llist_b_prod_fun$ ))(=> (= (fun_app$al (comp$e ?v0 )?v1 )?v2 )(= (fun_app$ak (comp$d ?v0 )(fun_app$ar (comp$k ?v1 )?v3 ))(fun_app$ar (comp$k ?v2 )?v3 )))):named a110 ))
(assert (! (forall ((?v0 Enat_b_prod_enat_fun$ )(?v1 Enat_enat_b_prod_fun$ )(?v2 Enat_enat_fun$ )(?v3 A_llist_b_prod_enat_fun$ ))(=> (= (fun_app$at (comp$m ?v0 )?v1 )?v2 )(= (fun_app$ai (comp$c ?v0 )(fun_app$as (comp$l ?v1 )?v3 ))(fun_app$al (comp$e ?v2 )?v3 )))):named a111 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_b_prod_enat_fun$ )(?v2 Enat_b_prod_enat_fun$ )(?v3 A_llist_b_prod_enat_b_prod_fun$ ))(=> (= (fun_app$au (comp$n ?v0 )?v1 )?v2 )(= (fun_app$al (comp$e ?v0 )(fun_app$ai (comp$c ?v1 )?v3 ))(fun_app$ai (comp$c ?v2 )?v3 )))):named a112 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_enat_fun$ )(?v3 Enat_enat_fun$ ))(=> (= (fun_app$af (comp$ ?v0 )?v1 )?v2 )(= (fun_app$af (comp$ (fun_app$ak (comp$d ?v3 )?v0 ))?v1 )(fun_app$al (comp$e ?v3 )?v2 )))):named a113 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ )(?v3 A_llist_enat_fun$ ))(=> (= (fun_app$am (comp$f ?v0 )?v1 )?v2 )(= (fun_app$af (comp$ (fun_app$an (comp$g ?v3 )?v0 ))?v1 )(fun_app$af (comp$ ?v3 )?v2 )))):named a114 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ )(?v3 A_llist_enat_fun$ ))(=> (= (fun_app$ag (comp$a ?v0 )?v1 )?v2 )(= (fun_app$ah (comp$b (fun_app$af (comp$ ?v3 )?v0 ))?v1 )(fun_app$af (comp$ ?v3 )?v2 )))):named a115 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist_enat_fun$ )(?v3 Enat_enat_fun$ ))(=> (= (fun_app$ak (comp$d ?v0 )?v1 )?v2 )(= (fun_app$ak (comp$d (fun_app$ao (comp$h ?v3 )?v0 ))?v1 )(fun_app$ak (comp$d ?v3 )?v2 )))):named a116 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_enat_fun$ )(?v3 Enat_enat_fun$ ))(=> (= (fun_app$an (comp$g ?v0 )?v1 )?v2 )(= (fun_app$an (comp$g (fun_app$ak (comp$d ?v3 )?v0 ))?v1 )(fun_app$ak (comp$d ?v3 )?v2 )))):named a117 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 A_llist_b_prod_enat_fun$ )(?v3 Enat_enat_fun$ ))(=> (= (fun_app$al (comp$e ?v0 )?v1 )?v2 )(= (fun_app$al (comp$e (fun_app$ao (comp$h ?v3 )?v0 ))?v1 )(fun_app$al (comp$e ?v3 )?v2 )))):named a118 ))
(assert (! (forall ((?v0 A_llist_b_prod_enat_fun$ )(?v1 A_llist_a_llist_b_prod_fun$ )(?v2 A_llist_enat_fun$ )(?v3 Enat_enat_fun$ ))(=> (= (fun_app$ar (comp$k ?v0 )?v1 )?v2 )(= (fun_app$ar (comp$k (fun_app$al (comp$e ?v3 )?v0 ))?v1 )(fun_app$ak (comp$d ?v3 )?v2 )))):named a119 ))
(assert (! (forall ((?v0 Enat_a_llist_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ )(?v3 A_llist_enat_fun$ ))(=> (= (fun_app$ap (comp$i ?v0 )?v1 )?v2 )(= (fun_app$al (comp$e (fun_app$aq (comp$j ?v3 )?v0 ))?v1 )(fun_app$af (comp$ ?v3 )?v2 )))):named a120 ))
(assert (! (forall ((?v0 Enat_enat_b_prod_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 A_llist_b_prod_enat_b_prod_fun$ )(?v3 Enat_b_prod_enat_fun$ ))(=> (= (fun_app$as (comp$l ?v0 )?v1 )?v2 )(= (fun_app$al (comp$e (fun_app$at (comp$m ?v3 )?v0 ))?v1 )(fun_app$ai (comp$c ?v3 )?v2 )))):named a121 ))
(assert (! (forall ((?v0 Enat_b_prod_enat_fun$ )(?v1 A_llist_b_prod_enat_b_prod_fun$ )(?v2 A_llist_b_prod_enat_fun$ )(?v3 Enat_enat_fun$ ))(=> (= (fun_app$ai (comp$c ?v0 )?v1 )?v2 )(= (fun_app$ai (comp$c (fun_app$au (comp$n ?v3 )?v0 ))?v1 )(fun_app$al (comp$e ?v3 )?v2 )))):named a122 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_enat_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$af (comp$ ?v0 )?v1 )(fun_app$af (comp$ ?v2 )?v3 ))(= (fun_app$aa ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$aa ?v2 (fun_app$ ?v3 ?v4 ))))):named a123 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_enat_fun$ )(?v2 Enat_enat_fun$ )(?v3 A_llist_enat_fun$ )(?v4 A_llist$ ))(=> (= (fun_app$ak (comp$d ?v0 )?v1 )(fun_app$ak (comp$d ?v2 )?v3 ))(= (fun_app$ac ?v0 (fun_app$aa ?v1 ?v4 ))(fun_app$ac ?v2 (fun_app$aa ?v3 ?v4 ))))):named a124 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 Enat_enat_fun$ )(?v3 A_llist_b_prod_enat_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$al (comp$e ?v0 )?v1 )(fun_app$al (comp$e ?v2 )?v3 ))(= (fun_app$ac ?v0 (fun_app$ab ?v1 ?v4 ))(fun_app$ac ?v2 (fun_app$ab ?v3 ?v4 ))))):named a125 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 Enat_enat_fun$ )(?v3 A_llist_b_prod_enat_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$af (comp$ ?v0 )?v1 )(fun_app$al (comp$e ?v2 )?v3 ))(= (fun_app$aa ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$ac ?v2 (fun_app$ab ?v3 ?v4 ))))):named a126 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 A_llist_enat_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$al (comp$e ?v0 )?v1 )(fun_app$af (comp$ ?v2 )?v3 ))(= (fun_app$ac ?v0 (fun_app$ab ?v1 ?v4 ))(fun_app$aa ?v2 (fun_app$ ?v3 ?v4 ))))):named a127 ))
(assert (! (forall ((?v0 Enat_b_prod_enat_fun$ )(?v1 A_llist_b_prod_enat_b_prod_fun$ )(?v2 Enat_enat_fun$ )(?v3 A_llist_b_prod_enat_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$ai (comp$c ?v0 )?v1 )(fun_app$al (comp$e ?v2 )?v3 ))(= (fun_app$a ?v0 (fun_app$aj ?v1 ?v4 ))(fun_app$ac ?v2 (fun_app$ab ?v3 ?v4 ))))):named a128 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 Enat_b_prod_enat_fun$ )(?v3 A_llist_b_prod_enat_b_prod_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$al (comp$e ?v0 )?v1 )(fun_app$ai (comp$c ?v2 )?v3 ))(= (fun_app$ac ?v0 (fun_app$ab ?v1 ?v4 ))(fun_app$a ?v2 (fun_app$aj ?v3 ?v4 ))))):named a129 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 Enat_b_prod_enat_fun$ )(?v3 A_llist_b_prod_enat_b_prod_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$af (comp$ ?v0 )?v1 )(fun_app$ai (comp$c ?v2 )?v3 ))(= (fun_app$aa ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$a ?v2 (fun_app$aj ?v3 ?v4 ))))):named a130 ))
(assert (! (forall ((?v0 A_llist_b_prod_enat_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 Enat_enat_fun$ )(?v3 A_llist_b_prod_enat_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$ah (comp$b ?v0 )?v1 )(fun_app$al (comp$e ?v2 )?v3 ))(= (fun_app$ab ?v0 (fun_app$n ?v1 ?v4 ))(fun_app$ac ?v2 (fun_app$ab ?v3 ?v4 ))))):named a131 ))
(assert (! (forall ((?v0 Enat_b_prod_enat_fun$ )(?v1 A_llist_b_prod_enat_b_prod_fun$ )(?v2 A_llist_enat_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ )(?v4 A_llist_b_prod$ ))(=> (= (fun_app$ai (comp$c ?v0 )?v1 )(fun_app$af (comp$ ?v2 )?v3 ))(= (fun_app$a ?v0 (fun_app$aj ?v1 ?v4 ))(fun_app$aa ?v2 (fun_app$ ?v3 ?v4 ))))):named a132 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist_enat_fun$ )(?v3 A_llist_a_llist_fun$ )(?v4 A_llist_b_prod_a_llist_fun$ )(?v5 A_llist_b_prod_a_llist_fun$ ))(=> (and (= (fun_app$ak (comp$d ?v0 )?v1 )(fun_app$an (comp$g ?v2 )?v3 ))(= (fun_app$am (comp$f ?v3 )?v4 )?v5 ))(= (fun_app$al (comp$e ?v0 )(fun_app$af (comp$ ?v1 )?v4 ))(fun_app$af (comp$ ?v2 )?v5 )))):named a133 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 Enat_enat_fun$ )(?v3 A_llist_enat_fun$ )(?v4 A_llist_b_prod_a_llist_fun$ )(?v5 A_llist_b_prod_enat_fun$ ))(=> (and (= (fun_app$an (comp$g ?v0 )?v1 )(fun_app$ak (comp$d ?v2 )?v3 ))(= (fun_app$af (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$af (comp$ ?v0 )(fun_app$am (comp$f ?v1 )?v4 ))(fun_app$al (comp$e ?v2 )?v5 )))):named a134 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_enat_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ )(?v4 A_llist_b_prod_a_llist_b_prod_fun$ )(?v5 A_llist_b_prod_a_llist_fun$ ))(=> (and (= (fun_app$af (comp$ ?v0 )?v1 )(fun_app$af (comp$ ?v2 )?v3 ))(= (fun_app$ag (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$af (comp$ ?v0 )(fun_app$ag (comp$a ?v1 )?v4 ))(fun_app$af (comp$ ?v2 )?v5 )))):named a135 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_enat_fun$ )(?v2 Enat_enat_fun$ )(?v3 Enat_enat_fun$ )(?v4 A_llist_enat_fun$ )(?v5 A_llist_enat_fun$ ))(=> (and (= (fun_app$ao (comp$h ?v0 )?v1 )(fun_app$ao (comp$h ?v2 )?v3 ))(= (fun_app$ak (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$ak (comp$d ?v0 )(fun_app$ak (comp$d ?v1 )?v4 ))(fun_app$ak (comp$d ?v2 )?v5 )))):named a136 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_enat_fun$ )(?v2 Enat_enat_fun$ )(?v3 A_llist_enat_fun$ )(?v4 A_llist_a_llist_fun$ )(?v5 A_llist_enat_fun$ ))(=> (and (= (fun_app$ak (comp$d ?v0 )?v1 )(fun_app$ak (comp$d ?v2 )?v3 ))(= (fun_app$an (comp$g ?v3 )?v4 )?v5 ))(= (fun_app$ak (comp$d ?v0 )(fun_app$an (comp$g ?v1 )?v4 ))(fun_app$ak (comp$d ?v2 )?v5 )))):named a137 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_enat_fun$ )(?v2 Enat_enat_fun$ )(?v3 Enat_enat_fun$ )(?v4 A_llist_b_prod_enat_fun$ )(?v5 A_llist_b_prod_enat_fun$ ))(=> (and (= (fun_app$ao (comp$h ?v0 )?v1 )(fun_app$ao (comp$h ?v2 )?v3 ))(= (fun_app$al (comp$e ?v3 )?v4 )?v5 ))(= (fun_app$al (comp$e ?v0 )(fun_app$al (comp$e ?v1 )?v4 ))(fun_app$al (comp$e ?v2 )?v5 )))):named a138 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_enat_fun$ )(?v2 A_llist_enat_fun$ )(?v3 Enat_a_llist_fun$ )(?v4 A_llist_b_prod_enat_fun$ )(?v5 A_llist_b_prod_a_llist_fun$ ))(=> (and (= (fun_app$ao (comp$h ?v0 )?v1 )(fun_app$aq (comp$j ?v2 )?v3 ))(= (fun_app$ap (comp$i ?v3 )?v4 )?v5 ))(= (fun_app$al (comp$e ?v0 )(fun_app$al (comp$e ?v1 )?v4 ))(fun_app$af (comp$ ?v2 )?v5 )))):named a139 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 Enat_a_llist_fun$ )(?v2 Enat_enat_fun$ )(?v3 Enat_enat_fun$ )(?v4 A_llist_b_prod_enat_fun$ )(?v5 A_llist_b_prod_enat_fun$ ))(=> (and (= (fun_app$aq (comp$j ?v0 )?v1 )(fun_app$ao (comp$h ?v2 )?v3 ))(= (fun_app$al (comp$e ?v3 )?v4 )?v5 ))(= (fun_app$af (comp$ ?v0 )(fun_app$ap (comp$i ?v1 )?v4 ))(fun_app$al (comp$e ?v2 )?v5 )))):named a140 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_enat_fun$ )(?v2 Enat_enat_fun$ )(?v3 A_llist_enat_fun$ )(?v4 A_llist_b_prod_a_llist_fun$ )(?v5 A_llist_b_prod_enat_fun$ ))(=> (and (= (fun_app$ak (comp$d ?v0 )?v1 )(fun_app$ak (comp$d ?v2 )?v3 ))(= (fun_app$af (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$al (comp$e ?v0 )(fun_app$af (comp$ ?v1 )?v4 ))(fun_app$al (comp$e ?v2 )?v5 )))):named a141 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 Enat_enat_fun$ )(?v3 A_llist_b_prod_enat_fun$ )(?v4 A_llist_a_llist_b_prod_fun$ )(?v5 A_llist_enat_fun$ ))(=> (and (= (fun_app$al (comp$e ?v0 )?v1 )(fun_app$al (comp$e ?v2 )?v3 ))(= (fun_app$ar (comp$k ?v3 )?v4 )?v5 ))(= (fun_app$ak (comp$d ?v0 )(fun_app$ar (comp$k ?v1 )?v4 ))(fun_app$ak (comp$d ?v2 )?v5 )))):named a142 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 A_llist_b_prod_enat_fun$ )(?v3 A_llist_b_prod_a_llist_b_prod_fun$ )(?v4 Enat_a_llist_fun$ )(?v5 A_llist_b_prod_a_llist_fun$ ))(=> (and (= (fun_app$al (comp$e ?v0 )?v1 )(fun_app$ah (comp$b ?v2 )?v3 ))(= (fun_app$ap (comp$i ?v4 )?v2 )?v5 ))(= (fun_app$ap (comp$i (fun_app$av (comp$o ?v4 )?v0 ))?v1 )(fun_app$ag (comp$a ?v5 )?v3 )))):named a143 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 A_llist_b_prod_enat_fun$ )(?v3 A_llist_b_prod_a_llist_b_prod_fun$ )(?v4 Enat_enat_fun$ )(?v5 A_llist_b_prod_enat_fun$ ))(=> (and (= (fun_app$al (comp$e ?v0 )?v1 )(fun_app$ah (comp$b ?v2 )?v3 ))(= (fun_app$al (comp$e ?v4 )?v2 )?v5 ))(= (fun_app$al (comp$e (fun_app$ao (comp$h ?v4 )?v0 ))?v1 )(fun_app$ah (comp$b ?v5 )?v3 )))):named a144 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 Enat_b_prod_enat_fun$ )(?v3 A_llist_b_prod_enat_b_prod_fun$ )(?v4 Enat_enat_fun$ )(?v5 Enat_b_prod_enat_fun$ ))(=> (and (= (fun_app$al (comp$e ?v0 )?v1 )(fun_app$ai (comp$c ?v2 )?v3 ))(= (fun_app$au (comp$n ?v4 )?v2 )?v5 ))(= (fun_app$al (comp$e (fun_app$ao (comp$h ?v4 )?v0 ))?v1 )(fun_app$ai (comp$c ?v5 )?v3 )))):named a145 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 A_llist_b_prod_enat_fun$ )(?v2 Enat_enat_fun$ )(?v3 A_llist_b_prod_enat_fun$ )(?v4 Enat_enat_fun$ )(?v5 Enat_enat_fun$ ))(=> (and (= (fun_app$al (comp$e ?v0 )?v1 )(fun_app$al (comp$e ?v2 )?v3 ))(= (fun_app$ao (comp$h ?v4 )?v2 )?v5 ))(= (fun_app$al (comp$e (fun_app$ao (comp$h ?v4 )?v0 ))?v1 )(fun_app$al (comp$e ?v5 )?v3 )))):named a146 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_b_prod_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ )(?v4 A_llist_enat_fun$ )(?v5 A_llist_enat_fun$ ))(=> (and (= (fun_app$ag (comp$a ?v0 )?v1 )(fun_app$am (comp$f ?v2 )?v3 ))(= (fun_app$an (comp$g ?v4 )?v2 )?v5 ))(= (fun_app$ah (comp$b (fun_app$af (comp$ ?v4 )?v0 ))?v1 )(fun_app$af (comp$ ?v5 )?v3 )))):named a147 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_b_prod_a_llist_fun$ )(?v3 A_llist_b_prod_a_llist_b_prod_fun$ )(?v4 A_llist_enat_fun$ )(?v5 A_llist_b_prod_enat_fun$ ))(=> (and (= (fun_app$am (comp$f ?v0 )?v1 )(fun_app$ag (comp$a ?v2 )?v3 ))(= (fun_app$af (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$af (comp$ (fun_app$an (comp$g ?v4 )?v0 ))?v1 )(fun_app$ah (comp$b ?v5 )?v3 )))):named a148 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_enat_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ )(?v4 Enat_enat_fun$ )(?v5 A_llist_enat_fun$ ))(=> (and (= (fun_app$af (comp$ ?v0 )?v1 )(fun_app$af (comp$ ?v2 )?v3 ))(= (fun_app$ak (comp$d ?v4 )?v2 )?v5 ))(= (fun_app$af (comp$ (fun_app$ak (comp$d ?v4 )?v0 ))?v1 )(fun_app$af (comp$ ?v5 )?v3 )))):named a149 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_b_prod_a_llist_fun$ )(?v2 A_llist_enat_fun$ )(?v3 A_llist_b_prod_a_llist_fun$ ))(=> (and (= (fun_app$af (comp$ ?v0 )?v1 )(fun_app$af (comp$ ?v2 )?v3 ))(=> (forall ((?v4 A_llist_b_prod$ ))(= (fun_app$aa ?v0 (fun_app$ ?v1 ?v4 ))(fun_app$aa ?v2 (fun_app$ ?v3 ?v4 ))))false ))false )):named a150 ))
(assert (! (= internal_split$ case_prod$d ):named a151 ))
(assert (! (= internal_split$a case_prod$ ):named a152 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ ))(= (= (case_prod$a uvb$ ?v0 )(case_prod$a uvb$ ?v1 ))(fun_app$i (fun_app$o (fun_app$p case_prod$d uub$ )?v0 )?v1 ))):named a153 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ ))(= (fun_app$ai (comp$c uvc$ )(apfst$ ?v0 ))(fun_app$af (comp$ ?v0 )uu$ ))):named a154 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ ))(= (fun_app$ag (comp$a uu$ )(apfst$a ?v0 ))(fun_app$am (comp$f ?v0 )uu$ ))):named a155 ))
(check-sat )
;(get-unsat-core )
