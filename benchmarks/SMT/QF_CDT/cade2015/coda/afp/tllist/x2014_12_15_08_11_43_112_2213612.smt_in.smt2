;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-codatatypes ()((B_a_tllist$ (tNil$ (terminal$ A$ ))(tCons$ (thd$ B$ )(ttl$ B_a_tllist$ )))(B_llist$ (lNil$ )(lCons$ (lhd$ B$ )(ltl$ B_llist$ )))))
(declare-fun b$ ()A$ )
(declare-fun xs$ ()B_llist$ )
(declare-fun bot$ ()A_set$ )
(declare-fun bot$a ()A_bool_fun$ )
(declare-fun bot$b ()Bool )
(declare-fun insert$ (A$ A_set$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lfinite$ (B_llist$ )Bool )
(declare-fun set2_tllist$ (B_a_tllist$ )A_set$ )
(declare-fun tllist_of_llist$ (A$ B_llist$ )B_a_tllist$ )
(assert (! (not (= (set2_tllist$ (tllist_of_llist$ b$ xs$ ))(ite (lfinite$ xs$ )(insert$ b$ bot$ )bot$ ))):named a0 ))
(assert (! (not (lfinite$ xs$ )):named a1 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 (set2_tllist$ (tllist_of_llist$ b$ xs$ )))false )):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 B_llist$ )(?v2 A$ )(?v3 B_llist$ ))(= (= (tllist_of_llist$ ?v0 ?v1 )(tllist_of_llist$ ?v2 ?v3 ))(and (= ?v1 ?v3 )(=> (lfinite$ ?v3 )(= ?v0 ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 A$ )(?v3 A$ ))(=> (and (= ?v0 ?v1 )(=> (lfinite$ ?v1 )(= ?v2 ?v3 )))(= (tllist_of_llist$ ?v2 ?v0 )(tllist_of_llist$ ?v3 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ ))(member$ ?v0 (insert$ ?v0 bot$ ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_set$ ))(= (member$ ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$ ?v2 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= (collect$ ?v0 )bot$ )(forall ((?v1 A$ ))(not (fun_app$ ?v0 ?v1 ))))):named a9 ))
(assert (! (forall ((?v0 A_set$ ))(= (forall ((?v1 A$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$ ))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= bot$ (collect$ ?v0 ))(forall ((?v1 A$ ))(not (fun_app$ ?v0 ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 A$ ))(= (member$ ?v0 bot$ )false )):named a12 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ bot$a ?v0 )bot$b ):pattern ((fun_app$ bot$a ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (insert$ ?v0 (insert$ ?v1 bot$ ))(insert$ ?v2 (insert$ ?v3 bot$ )))(or (and (= ?v0 ?v2 )(= ?v1 ?v3 ))(and (= ?v0 ?v3 )(= ?v1 ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$ ?v0 (insert$ ?v1 bot$ ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (= (insert$ ?v0 bot$ )(insert$ ?v1 bot$ ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (= bot$ (collect$ bot$a )):named a17 ))
(check-sat )
;(get-unsat-core )
