;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort B_a_b_tllist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ A$ )(ttl$ A_b_tllist$ )))))
(declare-fun a$ ()B$ )
(declare-fun p$ ()A_bool_fun$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun ys$ ()A_b_tllist$ )
(declare-fun sup$ (A_set$ A_set$ )A_set$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun tset$ (A_b_tllist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun member$a (B$ B_set$ )Bool )
(declare-fun tappend$ (A_b_tllist$ B_a_b_tllist_fun$ )A_b_tllist$ )
(declare-fun tfilter$ (B$ A_bool_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun lappendt$ (A_llist$ A_b_tllist$ )A_b_tllist$ )
(declare-fun pred_tllist$ (A_bool_fun$ B_bool_fun$ A_b_tllist$ )Bool )
(declare-fun set2_tllist$ (A_b_tllist$ )B_set$ )
(assert (! (not (exists ((?v0 A_llist$ )(?v1 A_b_tllist$ ))(and (= ys$ (lappendt$ ?v0 (tCons$ x$ ?v1 )))(and (lfinite$ ?v0 )(and (forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v0 ))(not (fun_app$ p$ ?v2 ))))(and (fun_app$ p$ x$ )(= xs$ (tfilter$ a$ p$ ?v1 )))))))):named a0 ))
(assert (! (= (tfilter$ a$ p$ ys$ )(tCons$ x$ xs$ )):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 B$ )(?v1 A_bool_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (tfilter$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))(ite (fun_app$ ?v1 ?v2 )(tCons$ ?v2 (tfilter$ ?v0 ?v1 ?v3 ))(tfilter$ ?v0 ?v1 ?v3 ))):pattern ((tfilter$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a3 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))(and (fun_app$ ?v0 ?v2 )(pred_tllist$ ?v0 ?v1 ?v3 ))):pattern ((pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_tllist$ ))(=> (lfinite$ ?v0 )(= (terminal$ (lappendt$ ?v0 ?v1 ))(terminal$ ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_b_tllist$ ))(! (= (lappendt$ (lCons$ ?v0 ?v1 )?v2 )(tCons$ ?v0 (lappendt$ ?v1 ?v2 ))):pattern ((lappendt$ (lCons$ ?v0 ?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 B_a_b_tllist_fun$ ))(! (= (tappend$ (tCons$ ?v0 ?v1 )?v2 )(tCons$ ?v0 (tappend$ ?v1 ?v2 ))):pattern ((tappend$ (tCons$ ?v0 ?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_tllist$ ))(=> (lfinite$ ?v0 )(= (tset$ (lappendt$ ?v0 ?v1 ))(sup$ (lset$ ?v0 )(tset$ ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 B$ )(?v1 A_bool_fun$ )(?v2 B$ ))(! (= (tfilter$ ?v0 ?v1 (tNil$ ?v2 ))(tNil$ ?v2 )):pattern ((tfilter$ ?v0 ?v1 (tNil$ ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (lappendt$ lNil$ ?v0 )?v0 ):pattern ((lappendt$ lNil$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (set2_tllist$ (tCons$ ?v0 ?v1 ))(set2_tllist$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_tllist$ )(?v2 A$ ))(=> (member$a ?v0 (set2_tllist$ ?v1 ))(member$a ?v0 (set2_tllist$ (tCons$ ?v2 ?v1 ))))):named a12 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (terminal$ (tCons$ ?v0 ?v1 ))(terminal$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a14 ))
(check-sat )
;(get-unsat-core )
