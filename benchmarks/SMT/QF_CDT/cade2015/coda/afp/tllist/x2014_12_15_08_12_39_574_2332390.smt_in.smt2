;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_b_tllist_b_fun$ 0 )
(declare-sort A_b_tllist_bool_fun$ 0 )
(declare-sort A_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_llist_b_a_prod_llist_fun$ 0 )
(declare-sort B_llist_a_b_prod_llist_fun$ 0 )
(declare-sort B_llist_b_b_prod_llist_fun$ 0 )
(declare-sort A_a_prod_llist_a_a_a_prod_prod_llist_fun$ 0 )
(declare-sort A_a_prod_llist_b_a_a_prod_prod_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_b_tllist$ (tNil$ (terminal$ B$ ))(tCons$ (thd$ A$ )(ttl$ A_b_tllist$ )))))
(declare-sort A_a_prod$ 0)
(declare-sort B_a_a_prod_prod$ 0)
(declare-fun fst$ (A_a_prod$)A$)
(declare-fun snd$ (A_a_prod$)A$)
(declare-fun pair$ (A$ A$ )A_a_prod$)
(declare-fun fst$a (B_a_a_prod_prod$)B$)
(declare-fun snd$a (B_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$a (B$ A_a_prod$ )B_a_a_prod_prod$)
(declare-codatatypes ()((B_a_a_prod_prod_llist$ (lNil$a )(lCons$a (lhd$a B_a_a_prod_prod$ )(ltl$a B_a_a_prod_prod_llist$ )))))
(declare-sort B_b_prod$ 0)
(declare-fun fst$b (B_b_prod$)B$)
(declare-fun snd$b (B_b_prod$)B$)
(declare-fun pair$b (B$ B$ )B_b_prod$)
(declare-codatatypes ()((B_b_prod_llist$ (lNil$b )(lCons$b (lhd$b B_b_prod$ )(ltl$b B_b_prod_llist$ )))))
(declare-sort B_a_prod$ 0)
(declare-fun fst$c (B_a_prod$)B$)
(declare-fun snd$c (B_a_prod$)A$)
(declare-fun pair$c (B$ A$ )B_a_prod$)
(declare-codatatypes ()((B_a_prod_llist$ (lNil$c )(lCons$c (lhd$c B_a_prod$ )(ltl$c B_a_prod_llist$ )))))
(declare-sort A_a_a_prod_prod$ 0)
(declare-fun fst$d (A_a_a_prod_prod$)A$)
(declare-fun snd$d (A_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$d (A$ A_a_prod$ )A_a_a_prod_prod$)
(declare-codatatypes ()((A_a_a_prod_prod_llist$ (lNil$d )(lCons$d (lhd$d A_a_a_prod_prod$ )(ltl$d A_a_a_prod_prod_llist$ )))))
(declare-sort A_b_prod$ 0)
(declare-fun fst$e (A_b_prod$)A$)
(declare-fun snd$e (A_b_prod$)B$)
(declare-fun pair$e (A$ B$ )A_b_prod$)
(declare-codatatypes ()((A_b_prod_llist$ (lNil$e )(lCons$e (lhd$e A_b_prod$ )(ltl$e A_b_prod_llist$ )))(A_a_prod_llist$ (lNil$f )(lCons$f (lhd$f A_a_prod$ )(ltl$f A_a_prod_llist$ )))(B_llist$ (lNil$g )(lCons$g (lhd$g B$ )(ltl$g B_llist$ )))))
(declare-sort A_a_prod_a_prod$ 0)
(declare-fun fst$f (A_a_prod_a_prod$)A_a_prod$)
(declare-fun snd$f (A_a_prod_a_prod$)A$)
(declare-fun pair$f (A_a_prod$ A$ )A_a_prod_a_prod$)
(declare-codatatypes ()((A_a_prod_a_prod_llist$ (lNil$h )(lCons$h (lhd$h A_a_prod_a_prod$ )(ltl$h A_a_prod_a_prod_llist$ )))))
(declare-sort A_a_prod_b_prod$ 0)
(declare-fun fst$g (A_a_prod_b_prod$)A_a_prod$)
(declare-fun snd$g (A_a_prod_b_prod$)B$)
(declare-fun pair$g (A_a_prod$ B$ )A_a_prod_b_prod$)
(declare-codatatypes ()((A_a_prod_b_prod_llist$ (lNil$i )(lCons$i (lhd$i A_a_prod_b_prod$ )(ltl$i A_a_prod_b_prod_llist$ )))))
(declare-sort A_a_prod_a_a_prod_prod$ 0)
(declare-fun fst$h (A_a_prod_a_a_prod_prod$)A_a_prod$)
(declare-fun snd$h (A_a_prod_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$h (A_a_prod$ A_a_prod$ )A_a_prod_a_a_prod_prod$)
(declare-codatatypes ()((A_a_prod_a_a_prod_prod_llist$ (lNil$j )(lCons$j (lhd$j A_a_prod_a_a_prod_prod$ )(ltl$j A_a_prod_a_a_prod_prod_llist$ )))))
(declare-sort A_b_b_prod_prod$ 0)
(declare-fun fst$i (A_b_b_prod_prod$)A$)
(declare-fun snd$i (A_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$i (A$ B_b_prod$ )A_b_b_prod_prod$)
(declare-codatatypes ()((A_b_b_prod_prod_llist$ (lNil$k )(lCons$k (lhd$k A_b_b_prod_prod$ )(ltl$k A_b_b_prod_prod_llist$ )))))
(declare-fun uu$ ()A_b_tllist_b_fun$ )
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun lzip$ (A_llist$ )A_llist_a_a_prod_llist_fun$ )
(declare-fun llast$ (B_a_a_prod_prod_llist$ )B_a_a_prod_prod$ )
(declare-fun lzip$a (A_llist$ )B_llist_a_b_prod_llist_fun$ )
(declare-fun lzip$b (B_llist$ )A_llist_b_a_prod_llist_fun$ )
(declare-fun lzip$c (B_llist$ )B_llist_b_b_prod_llist_fun$ )
(declare-fun lzip$d (A_llist$ )A_a_prod_llist_a_a_a_prod_prod_llist_fun$ )
(declare-fun lzip$e (B_llist$ )A_a_prod_llist_b_a_a_prod_prod_llist_fun$ )
(declare-fun lzip$f (A_a_prod_llist$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lzip$g (A_a_prod_llist$ B_llist$ )A_a_prod_b_prod_llist$ )
(declare-fun lzip$h (A_a_prod_llist$ A_a_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun lzip$i (A_llist$ B_b_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun ldropn$ (Nat$ B_a_a_prod_prod_llist$ )B_a_a_prod_prod_llist$ )
(declare-fun llast$a (B_b_prod_llist$ )B_b_prod$ )
(declare-fun llast$b (B_a_prod_llist$ )B_a_prod$ )
(declare-fun llast$c (A_a_a_prod_prod_llist$ )A_a_a_prod_prod$ )
(declare-fun llast$d (A_b_prod_llist$ )A_b_prod$ )
(declare-fun llast$e (A_a_prod_llist$ )A_a_prod$ )
(declare-fun llast$f (B_llist$ )B$ )
(declare-fun llast$g (A_llist$ )A$ )
(declare-fun fun_app$ (A_b_tllist_b_fun$ A_b_tllist$ )B$ )
(declare-fun is_TNil$ (A_b_tllist$ )Bool )
(declare-fun ldropn$a (Nat$ B_b_prod_llist$ )B_b_prod_llist$ )
(declare-fun ldropn$b (Nat$ B_a_prod_llist$ )B_a_prod_llist$ )
(declare-fun ldropn$c (Nat$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun ldropn$d (Nat$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun ldropn$e (Nat$ B_llist$ )B_llist$ )
(declare-fun ldropn$f (Nat$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun ldropn$g (Nat$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_b_tllist_bool_fun$ A_b_tllist$ )Bool )
(declare-fun fun_app$b (A_llist_a_a_prod_llist_fun$ A_llist$ )A_a_prod_llist$ )
(declare-fun fun_app$c (B_llist_a_b_prod_llist_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun fun_app$d (A_llist_b_a_prod_llist_fun$ A_llist$ )B_a_prod_llist$ )
(declare-fun fun_app$e (B_llist_b_b_prod_llist_fun$ B_llist$ )B_b_prod_llist$ )
(declare-fun fun_app$f (A_a_prod_llist_a_a_a_prod_prod_llist_fun$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun fun_app$g (A_a_prod_llist_b_a_a_prod_prod_llist_fun$ A_a_prod_llist$ )B_a_a_prod_prod_llist$ )
(declare-fun lfinite$a (B_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$b (B_b_prod_llist$ )Bool )
(declare-fun lfinite$c (B_a_prod_llist$ )Bool )
(declare-fun lfinite$d (A_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$e (A_b_prod_llist$ )Bool )
(declare-fun lfinite$f (A_a_prod_llist$ )Bool )
(declare-fun lfinite$g (B_llist$ )Bool )
(declare-fun lfinite$h (A_a_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$i (A_a_prod_b_prod_llist$ )Bool )
(declare-fun lfinite$j (A_a_prod_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$k (A_b_b_prod_prod_llist$ )Bool )
(declare-fun terminal0$ ()A_b_tllist_b_fun$ )
(declare-fun undefined$ ()B$ )
(declare-fun undefined$a ()B_a_a_prod_prod$ )
(declare-fun undefined$b ()B_b_prod$ )
(declare-fun undefined$c ()B_a_prod$ )
(declare-fun undefined$d ()A_a_a_prod_prod$ )
(declare-fun undefined$e ()A_b_prod$ )
(declare-fun undefined$f ()A_a_prod$ )
(declare-fun undefined$g ()A$ )
(declare-fun lstrict_prefix$ (B_a_a_prod_prod_llist$ B_a_a_prod_prod_llist$ )Bool )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun lstrict_prefix$a (B_b_prod_llist$ B_b_prod_llist$ )Bool )
(declare-fun lstrict_prefix$b (B_a_prod_llist$ B_a_prod_llist$ )Bool )
(declare-fun lstrict_prefix$c (A_a_a_prod_prod_llist$ A_a_a_prod_prod_llist$ )Bool )
(declare-fun lstrict_prefix$d (A_b_prod_llist$ A_b_prod_llist$ )Bool )
(declare-fun lstrict_prefix$e (B_llist$ B_llist$ )Bool )
(declare-fun lstrict_prefix$f (A_a_prod_llist$ A_a_prod_llist$ )Bool )
(declare-fun lstrict_prefix$g (A_llist$ A_llist$ )Bool )
(declare-fun tllist_of_llist$ (B$ A_llist$ )A_b_tllist$ )
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (fun_app$ uu$ ?v0 )(terminal$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (lfinite$ (llist_of_tllist$ xs$ ))):named a1 ))
(assert (! (not (= (fun_app$ terminal0$ xs$ )undefined$ )):named a2 ))
(assert (! (not (lfinite$ (llist_of_tllist$ xs$ ))):named a3 ))
(assert (! (= terminal0$ uu$ ):named a4 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(=> (is_TNil$ ?v0 )(lfinite$ (llist_of_tllist$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 B_a_a_prod_prod_llist$ ))(! (=> (not (lfinite$a ?v0 ))(= (llast$ ?v0 )undefined$a )):pattern ((llast$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 B_b_prod_llist$ ))(! (=> (not (lfinite$b ?v0 ))(= (llast$a ?v0 )undefined$b )):pattern ((llast$a ?v0 )))):named a7 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(! (=> (not (lfinite$c ?v0 ))(= (llast$b ?v0 )undefined$c )):pattern ((llast$b ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(! (=> (not (lfinite$d ?v0 ))(= (llast$c ?v0 )undefined$d )):pattern ((llast$c ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (=> (not (lfinite$e ?v0 ))(= (llast$d ?v0 )undefined$e )):pattern ((llast$d ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (=> (not (lfinite$f ?v0 ))(= (llast$e ?v0 )undefined$f )):pattern ((llast$e ?v0 )))):named a11 ))
(assert (! (forall ((?v0 B_llist$ ))(! (=> (not (lfinite$g ?v0 ))(= (llast$f ?v0 )undefined$ )):pattern ((llast$f ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (llast$g ?v0 )undefined$g )):pattern ((llast$g ?v0 )))):named a13 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (llist_of_tllist$ (tllist_of_llist$ ?v0 ?v1 ))?v1 )):named a14 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ )(?v2 B$ )(?v3 A_llist$ ))(= (= (tllist_of_llist$ ?v0 ?v1 )(tllist_of_llist$ ?v2 ?v3 ))(and (= ?v1 ?v3 )(=> (lfinite$ ?v3 )(= ?v0 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 B$ )(?v3 B$ ))(=> (and (= ?v0 ?v1 )(=> (lfinite$ ?v1 )(= ?v2 ?v3 )))(= (tllist_of_llist$ ?v2 ?v0 )(tllist_of_llist$ ?v3 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_b_tllist_bool_fun$ ))(=> (and (lfinite$ (llist_of_tllist$ ?v0 ))(and (forall ((?v2 B$ ))(fun_app$a ?v1 (tNil$ ?v2 )))(forall ((?v2 A$ )(?v3 A_b_tllist$ ))(=> (and (lfinite$ (llist_of_tllist$ ?v3 ))(fun_app$a ?v1 ?v3 ))(fun_app$a ?v1 (tCons$ ?v2 ?v3 ))))))(fun_app$a ?v1 ?v0 ))):named a17 ))
(assert (! (forall ((?v0 B_a_a_prod_prod_llist$ )(?v1 B_a_a_prod_prod_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lfinite$a ?v0 ))):named a18 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 B_b_prod_llist$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lfinite$b ?v0 ))):named a19 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ ))(=> (lstrict_prefix$b ?v0 ?v1 )(lfinite$c ?v0 ))):named a20 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 A_a_a_prod_prod_llist$ ))(=> (lstrict_prefix$c ?v0 ?v1 )(lfinite$d ?v0 ))):named a21 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(=> (lstrict_prefix$d ?v0 ?v1 )(lfinite$e ?v0 ))):named a22 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (lstrict_prefix$e ?v0 ?v1 )(lfinite$g ?v0 ))):named a23 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(=> (lstrict_prefix$f ?v0 ?v1 )(lfinite$f ?v0 ))):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$g ?v0 ?v1 )(lfinite$ ?v0 ))):named a25 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ ))(! (= (terminal$ (tCons$ ?v0 ?v1 ))(fun_app$ terminal0$ ?v1 )):pattern ((tCons$ ?v0 ?v1 )))):named a26 ))
(assert (! (= (lfinite$a lNil$a )true ):named a27 ))
(assert (! (= (lfinite$b lNil$b )true ):named a28 ))
(assert (! (= (lfinite$c lNil$c )true ):named a29 ))
(assert (! (= (lfinite$d lNil$d )true ):named a30 ))
(assert (! (= (lfinite$e lNil$e )true ):named a31 ))
(assert (! (= (lfinite$g lNil$g )true ):named a32 ))
(assert (! (= (lfinite$f lNil$f )true ):named a33 ))
(assert (! (= (lfinite$ lNil$ )true ):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_a_prod_prod_llist$ ))(= (lfinite$a (ldropn$ ?v0 ?v1 ))(lfinite$a ?v1 ))):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_prod_llist$ ))(= (lfinite$b (ldropn$a ?v0 ?v1 ))(lfinite$b ?v1 ))):named a36 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_prod_llist$ ))(= (lfinite$c (ldropn$b ?v0 ?v1 ))(lfinite$c ?v1 ))):named a37 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_prod_prod_llist$ ))(= (lfinite$d (ldropn$c ?v0 ?v1 ))(lfinite$d ?v1 ))):named a38 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_llist$ ))(= (lfinite$e (ldropn$d ?v0 ?v1 ))(lfinite$e ?v1 ))):named a39 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ ))(= (lfinite$g (ldropn$e ?v0 ?v1 ))(lfinite$g ?v1 ))):named a40 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ ))(= (lfinite$f (ldropn$f ?v0 ?v1 ))(lfinite$f ?v1 ))):named a41 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$ (ldropn$g ?v0 ?v1 ))(lfinite$ ?v1 ))):named a42 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$f (fun_app$b (lzip$ ?v0 )?v1 ))(or (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(= (lfinite$e (fun_app$c (lzip$a ?v0 )?v1 ))(or (lfinite$ ?v0 )(lfinite$g ?v1 )))):named a44 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(= (lfinite$c (fun_app$d (lzip$b ?v0 )?v1 ))(or (lfinite$g ?v0 )(lfinite$ ?v1 )))):named a45 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lfinite$b (fun_app$e (lzip$c ?v0 )?v1 ))(or (lfinite$g ?v0 )(lfinite$g ?v1 )))):named a46 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$d (fun_app$f (lzip$d ?v0 )?v1 ))(or (lfinite$ ?v0 )(lfinite$f ?v1 )))):named a47 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$a (fun_app$g (lzip$e ?v0 )?v1 ))(or (lfinite$g ?v0 )(lfinite$f ?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_llist$ ))(= (lfinite$h (lzip$f ?v0 ?v1 ))(or (lfinite$f ?v0 )(lfinite$ ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 B_llist$ ))(= (lfinite$i (lzip$g ?v0 ?v1 ))(or (lfinite$f ?v0 )(lfinite$g ?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$j (lzip$h ?v0 ?v1 ))(or (lfinite$f ?v0 )(lfinite$f ?v1 )))):named a51 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_b_prod_llist$ ))(= (lfinite$k (lzip$i ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$b ?v1 )))):named a52 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= (tNil$ ?v0 )(tNil$ ?v1 ))(= ?v0 ?v1 ))):named a53 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a54 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$d (lzip$b ?v0 )lNil$ )lNil$c ):pattern ((lzip$b ?v0 )))):named a55 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$g (lzip$e ?v0 )lNil$f )lNil$a ):pattern ((lzip$e ?v0 )))):named a56 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$f (lzip$d ?v0 )lNil$f )lNil$d ):pattern ((lzip$d ?v0 )))):named a57 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$e (lzip$c ?v0 )lNil$g )lNil$b ):pattern ((lzip$c ?v0 )))):named a58 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (lzip$a ?v0 )lNil$g )lNil$e ):pattern ((lzip$a ?v0 )))):named a59 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (lzip$ ?v0 )lNil$ )lNil$f ):pattern ((lzip$ ?v0 )))):named a60 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (= (fun_app$f (lzip$d lNil$ )?v0 )lNil$d ):pattern ((fun_app$f (lzip$d lNil$ )?v0 )))):named a61 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$c (lzip$a lNil$ )?v0 )lNil$e ):pattern ((fun_app$c (lzip$a lNil$ )?v0 )))):named a62 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (= (fun_app$g (lzip$e lNil$g )?v0 )lNil$a ):pattern ((fun_app$g (lzip$e lNil$g )?v0 )))):named a63 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$e (lzip$c lNil$g )?v0 )lNil$b ):pattern ((fun_app$e (lzip$c lNil$g )?v0 )))):named a64 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$d (lzip$b lNil$g )?v0 )lNil$c ):pattern ((fun_app$d (lzip$b lNil$g )?v0 )))):named a65 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (lzip$ lNil$ )?v0 )lNil$f ):pattern ((fun_app$b (lzip$ lNil$ )?v0 )))):named a66 ))
(check-sat )
;(get-unsat-core )
