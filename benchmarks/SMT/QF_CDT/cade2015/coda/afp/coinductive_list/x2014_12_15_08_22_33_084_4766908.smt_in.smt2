;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_a_prod_a_fun$ 0 )
(declare-sort A_a_prod_b_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort B_a_prod_a_fun$ 0 )
(declare-sort B_b_prod_a_fun$ 0 )
(declare-sort B_b_prod_b_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort A_a_prod_llist_enat_fun$ 0 )
(declare-sort A_b_prod_llist_enat_fun$ 0 )
(declare-sort B_a_prod_llist_enat_fun$ 0 )
(declare-sort B_b_prod_llist_enat_fun$ 0 )
(declare-sort A_a_b_prod_prod_llist_enat_fun$ 0 )
(declare-sort A_b_a_prod_prod_llist_enat_fun$ 0 )
(declare-sort A_b_b_prod_prod_llist_enat_fun$ 0 )
(declare-sort B_a_a_prod_prod_llist_enat_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-codatatypes ()((A_b_prod_llist$ (lNil$a )(lCons$a (lhd$a A_b_prod$ )(ltl$a A_b_prod_llist$ )))(B_llist$ (lNil$b )(lCons$b (lhd$b B$ )(ltl$b B_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort B_b_prod$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun fst$a (B_b_prod$)B$)
(declare-fun snd$a (B_b_prod$)B$)
(declare-fun pair$a (B$ B$ )B_b_prod$)
(declare-codatatypes ()((B_b_prod_llist$ (lNil$c )(lCons$c (lhd$c B_b_prod$ )(ltl$c B_b_prod_llist$ )))))
(declare-sort B_a_prod$ 0)
(declare-fun fst$b (B_a_prod$)B$)
(declare-fun snd$b (B_a_prod$)A$)
(declare-fun pair$b (B$ A$ )B_a_prod$)
(declare-codatatypes ()((B_a_prod_llist$ (lNil$d )(lCons$d (lhd$d B_a_prod$ )(ltl$d B_a_prod_llist$ )))))
(declare-sort A_a_prod$ 0)
(declare-fun fst$c (A_a_prod$)A$)
(declare-fun snd$c (A_a_prod$)A$)
(declare-fun pair$c (A$ A$ )A_a_prod$)
(declare-codatatypes ()((A_a_prod_llist$ (lNil$e )(lCons$e (lhd$e A_a_prod$ )(ltl$e A_a_prod_llist$ )))))
(declare-sort B_a_a_prod_prod$ 0)
(declare-fun fst$d (B_a_a_prod_prod$)B$)
(declare-fun snd$d (B_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$d (B$ A_a_prod$ )B_a_a_prod_prod$)
(declare-codatatypes ()((B_a_a_prod_prod_llist$ (lNil$f )(lCons$f (lhd$f B_a_a_prod_prod$ )(ltl$f B_a_a_prod_prod_llist$ )))))
(declare-sort A_a_b_prod_prod$ 0)
(declare-fun fst$e (A_a_b_prod_prod$)A$)
(declare-fun snd$e (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$e (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-codatatypes ()((A_a_b_prod_prod_llist$ (lNil$g )(lCons$g (lhd$g A_a_b_prod_prod$ )(ltl$g A_a_b_prod_prod_llist$ )))))
(declare-sort A_a_a_prod_prod$ 0)
(declare-fun fst$f (A_a_a_prod_prod$)A$)
(declare-fun snd$f (A_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$f (A$ A_a_prod$ )A_a_a_prod_prod$)
(declare-codatatypes ()((A_a_a_prod_prod_llist$ (lNil$h )(lCons$h (lhd$h A_a_a_prod_prod$ )(ltl$h A_a_a_prod_prod_llist$ )))))
(declare-sort A_b_b_prod_prod$ 0)
(declare-fun fst$g (A_b_b_prod_prod$)A$)
(declare-fun snd$g (A_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$g (A$ B_b_prod$ )A_b_b_prod_prod$)
(declare-codatatypes ()((A_b_b_prod_prod_llist$ (lNil$i )(lCons$i (lhd$i A_b_b_prod_prod$ )(ltl$i A_b_b_prod_prod_llist$ )))))
(declare-sort A_b_a_prod_prod$ 0)
(declare-fun fst$h (A_b_a_prod_prod$)A$)
(declare-fun snd$h (A_b_a_prod_prod$)B_a_prod$)
(declare-fun pair$h (A$ B_a_prod$ )A_b_a_prod_prod$)
(declare-codatatypes ()((A_b_a_prod_prod_llist$ (lNil$j )(lCons$j (lhd$j A_b_a_prod_prod$ )(ltl$j A_b_a_prod_prod_llist$ )))))
(declare-sort B_a_b_prod_prod$ 0)
(declare-fun fst$i (B_a_b_prod_prod$)B$)
(declare-fun snd$i (B_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$i (B$ A_b_prod$ )B_a_b_prod_prod$)
(declare-codatatypes ()((B_a_b_prod_prod_llist$ (lNil$k )(lCons$k (lhd$k B_a_b_prod_prod$ )(ltl$k B_a_b_prod_prod_llist$ )))))
(declare-sort B_b_b_prod_prod$ 0)
(declare-fun fst$j (B_b_b_prod_prod$)B$)
(declare-fun snd$j (B_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$j (B$ B_b_prod$ )B_b_b_prod_prod$)
(declare-codatatypes ()((B_b_b_prod_prod_llist$ (lNil$l )(lCons$l (lhd$l B_b_b_prod_prod$ )(ltl$l B_b_b_prod_prod_llist$ )))))
(declare-sort A_b_prod_a_prod$ 0)
(declare-fun fst$k (A_b_prod_a_prod$)A_b_prod$)
(declare-fun snd$k (A_b_prod_a_prod$)A$)
(declare-fun pair$k (A_b_prod$ A$ )A_b_prod_a_prod$)
(declare-codatatypes ()((A_b_prod_a_prod_llist$ (lNil$m )(lCons$m (lhd$m A_b_prod_a_prod$ )(ltl$m A_b_prod_a_prod_llist$ )))))
(declare-sort A_b_prod_b_prod$ 0)
(declare-fun fst$l (A_b_prod_b_prod$)A_b_prod$)
(declare-fun snd$l (A_b_prod_b_prod$)B$)
(declare-fun pair$l (A_b_prod$ B$ )A_b_prod_b_prod$)
(declare-codatatypes ()((A_b_prod_b_prod_llist$ (lNil$n )(lCons$n (lhd$n A_b_prod_b_prod$ )(ltl$n A_b_prod_b_prod_llist$ )))))
(declare-fun uu$ ()A_b_prod_a_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun llcp$ (B_a_a_prod_prod_llist$ )B_a_a_prod_prod_llist_enat_fun$ )
(declare-fun lmap$ (A_b_prod_a_fun$ A_b_prod_llist$ )A_llist$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun llcp$a (B_b_prod_llist$ )B_b_prod_llist_enat_fun$ )
(declare-fun llcp$b (B_a_prod_llist$ )B_a_prod_llist_enat_fun$ )
(declare-fun llcp$c (A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist_enat_fun$ )
(declare-fun llcp$d (A_a_a_prod_prod_llist$ A_a_a_prod_prod_llist$ )Enat$ )
(declare-fun llcp$e (A_b_prod_llist$ )A_b_prod_llist_enat_fun$ )
(declare-fun llcp$f (B_llist$ )B_llist_enat_fun$ )
(declare-fun llcp$g (A_a_prod_llist$ )A_a_prod_llist_enat_fun$ )
(declare-fun llcp$h (A_llist$ )A_llist_enat_fun$ )
(declare-fun llcp$i (A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist_enat_fun$ )
(declare-fun llcp$j (A_b_a_prod_prod_llist$ )A_b_a_prod_prod_llist_enat_fun$ )
(declare-fun lmap$a (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$b (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$c (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$d (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$e (B_b_prod_a_fun$ B_b_prod_llist$ )A_llist$ )
(declare-fun lmap$f (B_a_prod_a_fun$ B_a_prod_llist$ )A_llist$ )
(declare-fun lmap$g (A_a_prod_a_fun$ A_a_prod_llist$ )A_llist$ )
(declare-fun lmap$h (A_b_prod_b_fun$ A_b_prod_llist$ )B_llist$ )
(declare-fun lmap$i (B_b_prod_b_fun$ B_b_prod_llist$ )B_llist$ )
(declare-fun lmap$j (A_a_b_prod_fun$ A_llist$ )A_b_prod_llist$ )
(declare-fun lmap$k (B_a_b_prod_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun lmap$l (A_a_prod_b_fun$ A_a_prod_llist$ )B_llist$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun lzip$a (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun lzip$b (B_llist$ A_llist$ )B_a_prod_llist$ )
(declare-fun lzip$c (B_llist$ B_llist$ )B_b_prod_llist$ )
(declare-fun lzip$d (A_llist$ A_b_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun lzip$e (A_llist$ B_b_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun lzip$f (A_llist$ B_a_prod_llist$ )A_b_a_prod_prod_llist$ )
(declare-fun lzip$g (A_llist$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lzip$h (B_llist$ A_b_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun lzip$i (B_llist$ B_b_prod_llist$ )B_b_b_prod_prod_llist$ )
(declare-fun lzip$j (A_b_prod_llist$ A_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun lzip$k (A_b_prod_llist$ B_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun lzip$l (B_llist$ A_a_prod_llist$ )B_a_a_prod_prod_llist$ )
(declare-fun ltake$a (Enat$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun ltake$b (Enat$ B_llist$ )B_llist$ )
(declare-fun ltake$c (Enat$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun ltake$d (Enat$ B_a_a_prod_prod_llist$ )B_a_a_prod_prod_llist$ )
(declare-fun ltake$e (Enat$ B_b_prod_llist$ )B_b_prod_llist$ )
(declare-fun ltake$f (Enat$ B_a_prod_llist$ )B_a_prod_llist$ )
(declare-fun ltake$g (Enat$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun ltake$h (Enat$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun ltake$i (Enat$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun ltake$j (Enat$ A_b_a_prod_prod_llist$ )A_b_a_prod_prod_llist$ )
(declare-fun ltake$k (Enat$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun ltake$l (Enat$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun ltake$m (Enat$ B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun fun_app$ (A_b_prod_a_fun$ A_b_prod$ )A$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (B_a_a_prod_prod_llist_enat_fun$ B_a_a_prod_prod_llist$ )Enat$ )
(declare-fun fun_app$b (B_b_prod_llist_enat_fun$ B_b_prod_llist$ )Enat$ )
(declare-fun fun_app$c (B_a_prod_llist_enat_fun$ B_a_prod_llist$ )Enat$ )
(declare-fun fun_app$d (A_a_b_prod_prod_llist_enat_fun$ A_a_b_prod_prod_llist$ )Enat$ )
(declare-fun fun_app$e (A_b_prod_llist_enat_fun$ A_b_prod_llist$ )Enat$ )
(declare-fun fun_app$f (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun fun_app$g (A_a_prod_llist_enat_fun$ A_a_prod_llist$ )Enat$ )
(declare-fun fun_app$h (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$i (A_b_b_prod_prod_llist_enat_fun$ A_b_b_prod_prod_llist$ )Enat$ )
(declare-fun fun_app$j (A_b_a_prod_prod_llist_enat_fun$ A_b_a_prod_prod_llist$ )Enat$ )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun llength$b (A_b_prod_llist$ )Enat$ )
(declare-fun llength$c (B_b_prod_llist$ )Enat$ )
(declare-fun llength$d (B_a_prod_llist$ )Enat$ )
(declare-fun llength$e (A_a_prod_llist$ )Enat$ )
(declare-fun llength$f (B_a_a_prod_prod_llist$ )Enat$ )
(declare-fun llength$g (A_b_b_prod_prod_llist$ )Enat$ )
(declare-fun llength$h (A_b_a_prod_prod_llist$ )Enat$ )
(declare-fun llength$i (A_a_b_prod_prod_llist$ )Enat$ )
(declare-fun llength$j (A_a_a_prod_prod_llist$ )Enat$ )
(declare-fun llength$k (B_a_b_prod_prod_llist$ )Enat$ )
(declare-fun llength$l (B_b_b_prod_prod_llist$ )Enat$ )
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (lmap$ uu$ (lzip$ xs$ ys$ ))(ltake$ (min$ (llength$ xs$ )(llength$a ys$ ))xs$ ))):named a1 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$a ?v0 ?v1 ))(llength$ ?v1 ))):named a2 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$ (lmap$b ?v0 ?v1 ))(llength$a ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$c ?v0 ?v1 ))(llength$ ?v1 ))):named a4 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$a (lmap$d ?v0 ?v1 ))(llength$a ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$b ?v1 ))):named a6 ))
(assert (! (forall ((?v0 B_b_prod_a_fun$ )(?v1 B_b_prod_llist$ ))(= (llength$ (lmap$e ?v0 ?v1 ))(llength$c ?v1 ))):named a7 ))
(assert (! (forall ((?v0 B_a_prod_a_fun$ )(?v1 B_a_prod_llist$ ))(= (llength$ (lmap$f ?v0 ?v1 ))(llength$d ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_a_prod_a_fun$ )(?v1 A_a_prod_llist$ ))(= (llength$ (lmap$g ?v0 ?v1 ))(llength$e ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$a (lmap$h ?v0 ?v1 ))(llength$b ?v1 ))):named a10 ))
(assert (! (forall ((?v0 B_b_prod_b_fun$ )(?v1 B_b_prod_llist$ ))(= (llength$a (lmap$i ?v0 ?v1 ))(llength$c ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ltake$ ?v0 (lmap$a ?v1 ?v2 ))(lmap$a ?v1 (ltake$ ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_a_fun$ )(?v2 A_b_prod_llist$ ))(= (ltake$ ?v0 (lmap$ ?v1 ?v2 ))(lmap$ ?v1 (ltake$a ?v0 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ltake$b ?v0 (lmap$d ?v1 ?v2 ))(lmap$d ?v1 (ltake$b ?v0 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ltake$b ?v0 (lmap$c ?v1 ?v2 ))(lmap$c ?v1 (ltake$ ?v0 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ltake$ ?v0 (lmap$b ?v1 ?v2 ))(lmap$b ?v1 (ltake$b ?v0 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_a_fun$ )(?v2 A_a_prod_llist$ ))(= (ltake$ ?v0 (lmap$g ?v1 ?v2 ))(lmap$g ?v1 (ltake$c ?v0 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_b_prod_fun$ )(?v2 A_llist$ ))(= (ltake$a ?v0 (lmap$j ?v1 ?v2 ))(lmap$j ?v1 (ltake$ ?v0 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_b_prod_fun$ )(?v2 B_llist$ ))(= (ltake$a ?v0 (lmap$k ?v1 ?v2 ))(lmap$k ?v1 (ltake$b ?v0 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_b_fun$ )(?v2 A_b_prod_llist$ ))(= (ltake$b ?v0 (lmap$h ?v1 ?v2 ))(lmap$h ?v1 (ltake$a ?v0 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_b_fun$ )(?v2 A_a_prod_llist$ ))(= (ltake$b ?v0 (lmap$l ?v1 ?v2 ))(lmap$l ?v1 (ltake$c ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 B_a_a_prod_prod_llist$ ))(= (ltake$d ?v0 (ltake$d ?v1 ?v2 ))(ltake$d (min$ ?v0 ?v1 )?v2 ))):named a22 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 B_b_prod_llist$ ))(= (ltake$e ?v0 (ltake$e ?v1 ?v2 ))(ltake$e (min$ ?v0 ?v1 )?v2 ))):named a23 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 B_a_prod_llist$ ))(= (ltake$f ?v0 (ltake$f ?v1 ?v2 ))(ltake$f (min$ ?v0 ?v1 )?v2 ))):named a24 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_a_b_prod_prod_llist$ ))(= (ltake$g ?v0 (ltake$g ?v1 ?v2 ))(ltake$g (min$ ?v0 ?v1 )?v2 ))):named a25 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_a_a_prod_prod_llist$ ))(= (ltake$h ?v0 (ltake$h ?v1 ?v2 ))(ltake$h (min$ ?v0 ?v1 )?v2 ))):named a26 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_b_prod_llist$ ))(= (ltake$a ?v0 (ltake$a ?v1 ?v2 ))(ltake$a (min$ ?v0 ?v1 )?v2 ))):named a27 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 B_llist$ ))(= (ltake$b ?v0 (ltake$b ?v1 ?v2 ))(ltake$b (min$ ?v0 ?v1 )?v2 ))):named a28 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_a_prod_llist$ ))(= (ltake$c ?v0 (ltake$c ?v1 ?v2 ))(ltake$c (min$ ?v0 ?v1 )?v2 ))):named a29 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (ltake$ ?v0 (ltake$ ?v1 ?v2 ))(ltake$ (min$ ?v0 ?v1 )?v2 ))):named a30 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (llength$ (ltake$ ?v0 ?v1 ))(min$ ?v0 (llength$ ?v1 )))):named a31 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(= (llength$a (ltake$b ?v0 ?v1 ))(min$ ?v0 (llength$a ?v1 )))):named a32 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ ))(= (llength$b (ltake$a ?v0 ?v1 ))(min$ ?v0 (llength$b ?v1 )))):named a33 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_prod_llist$ ))(= (llength$c (ltake$e ?v0 ?v1 ))(min$ ?v0 (llength$c ?v1 )))):named a34 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_prod_llist$ ))(= (llength$d (ltake$f ?v0 ?v1 ))(min$ ?v0 (llength$d ?v1 )))):named a35 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_llist$ ))(= (llength$e (ltake$c ?v0 ?v1 ))(min$ ?v0 (llength$e ?v1 )))):named a36 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_a_prod_prod_llist$ ))(= (llength$f (ltake$d ?v0 ?v1 ))(min$ ?v0 (llength$f ?v1 )))):named a37 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_b_prod_prod_llist$ ))(= (llength$g (ltake$i ?v0 ?v1 ))(min$ ?v0 (llength$g ?v1 )))):named a38 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_a_prod_prod_llist$ ))(= (llength$h (ltake$j ?v0 ?v1 ))(min$ ?v0 (llength$h ?v1 )))):named a39 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_b_prod_prod_llist$ ))(= (llength$i (ltake$g ?v0 ?v1 ))(min$ ?v0 (llength$i ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (llength$e (lzip$a ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$ ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(= (llength$b (lzip$ ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$a ?v1 )))):named a42 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(= (llength$d (lzip$b ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$ ?v1 )))):named a43 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (llength$c (lzip$c ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$a ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ ))(= (llength$i (lzip$d ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$b ?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_b_prod_llist$ ))(= (llength$g (lzip$e ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$c ?v1 )))):named a46 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_a_prod_llist$ ))(= (llength$h (lzip$f ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$d ?v1 )))):named a47 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_llist$ ))(= (llength$j (lzip$g ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$e ?v1 )))):named a48 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ ))(= (llength$k (lzip$h ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$b ?v1 )))):named a49 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_b_prod_llist$ ))(= (llength$l (lzip$i ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$c ?v1 )))):named a50 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 B_llist$ ))(= (ltake$a ?v0 (lzip$ ?v1 ?v2 ))(lzip$ (ltake$ ?v0 ?v1 )(ltake$b ?v0 ?v2 )))):named a51 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (ltake$c ?v0 (lzip$a ?v1 ?v2 ))(lzip$a (ltake$ ?v0 ?v1 )(ltake$ ?v0 ?v2 )))):named a52 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 A_llist$ ))(= (ltake$f ?v0 (lzip$b ?v1 ?v2 ))(lzip$b (ltake$b ?v0 ?v1 )(ltake$ ?v0 ?v2 )))):named a53 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (ltake$e ?v0 (lzip$c ?v1 ?v2 ))(lzip$c (ltake$b ?v0 ?v1 )(ltake$b ?v0 ?v2 )))):named a54 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_b_prod_llist$ ))(= (ltake$g ?v0 (lzip$d ?v1 ?v2 ))(lzip$d (ltake$ ?v0 ?v1 )(ltake$a ?v0 ?v2 )))):named a55 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_a_prod_llist$ ))(= (ltake$h ?v0 (lzip$g ?v1 ?v2 ))(lzip$g (ltake$ ?v0 ?v1 )(ltake$c ?v0 ?v2 )))):named a56 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 A_llist$ ))(= (ltake$k ?v0 (lzip$j ?v1 ?v2 ))(lzip$j (ltake$a ?v0 ?v1 )(ltake$ ?v0 ?v2 )))):named a57 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 B_llist$ ))(= (ltake$l ?v0 (lzip$k ?v1 ?v2 ))(lzip$k (ltake$a ?v0 ?v1 )(ltake$b ?v0 ?v2 )))):named a58 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 A_b_prod_llist$ ))(= (ltake$m ?v0 (lzip$h ?v1 ?v2 ))(lzip$h (ltake$b ?v0 ?v1 )(ltake$a ?v0 ?v2 )))):named a59 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 A_a_prod_llist$ ))(= (ltake$d ?v0 (lzip$l ?v1 ?v2 ))(lzip$l (ltake$b ?v0 ?v1 )(ltake$c ?v0 ?v2 )))):named a60 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ (min$ ?v0 ?v1 )?v1 )(min$ ?v0 ?v1 ))):named a61 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ ?v0 (min$ ?v0 ?v1 ))(min$ ?v0 ?v1 ))):named a62 ))
(assert (! (forall ((?v0 Enat$ ))(= (min$ ?v0 ?v0 )?v0 )):named a63 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_a_prod_prod_llist$ )(?v2 Enat$ )(?v3 B_a_a_prod_prod_llist$ ))(= (fun_app$a (llcp$ (ltake$d ?v0 ?v1 ))(ltake$d ?v2 ?v3 ))(min$ (min$ ?v0 ?v2 )(fun_app$a (llcp$ ?v1 )?v3 )))):named a64 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_prod_llist$ )(?v2 Enat$ )(?v3 B_b_prod_llist$ ))(= (fun_app$b (llcp$a (ltake$e ?v0 ?v1 ))(ltake$e ?v2 ?v3 ))(min$ (min$ ?v0 ?v2 )(fun_app$b (llcp$a ?v1 )?v3 )))):named a65 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_prod_llist$ )(?v2 Enat$ )(?v3 B_a_prod_llist$ ))(= (fun_app$c (llcp$b (ltake$f ?v0 ?v1 ))(ltake$f ?v2 ?v3 ))(min$ (min$ ?v0 ?v2 )(fun_app$c (llcp$b ?v1 )?v3 )))):named a66 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_b_prod_prod_llist$ )(?v2 Enat$ )(?v3 A_a_b_prod_prod_llist$ ))(= (fun_app$d (llcp$c (ltake$g ?v0 ?v1 ))(ltake$g ?v2 ?v3 ))(min$ (min$ ?v0 ?v2 )(fun_app$d (llcp$c ?v1 )?v3 )))):named a67 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_a_prod_prod_llist$ )(?v2 Enat$ )(?v3 A_a_a_prod_prod_llist$ ))(= (llcp$d (ltake$h ?v0 ?v1 )(ltake$h ?v2 ?v3 ))(min$ (min$ ?v0 ?v2 )(llcp$d ?v1 ?v3 )))):named a68 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 Enat$ )(?v3 A_b_prod_llist$ ))(= (fun_app$e (llcp$e (ltake$a ?v0 ?v1 ))(ltake$a ?v2 ?v3 ))(min$ (min$ ?v0 ?v2 )(fun_app$e (llcp$e ?v1 )?v3 )))):named a69 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 Enat$ )(?v3 B_llist$ ))(= (fun_app$f (llcp$f (ltake$b ?v0 ?v1 ))(ltake$b ?v2 ?v3 ))(min$ (min$ ?v0 ?v2 )(fun_app$f (llcp$f ?v1 )?v3 )))):named a70 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_llist$ )(?v2 Enat$ )(?v3 A_a_prod_llist$ ))(= (fun_app$g (llcp$g (ltake$c ?v0 ?v1 ))(ltake$c ?v2 ?v3 ))(min$ (min$ ?v0 ?v2 )(fun_app$g (llcp$g ?v1 )?v3 )))):named a71 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 Enat$ )(?v3 A_llist$ ))(= (fun_app$h (llcp$h (ltake$ ?v0 ?v1 ))(ltake$ ?v2 ?v3 ))(min$ (min$ ?v0 ?v2 )(fun_app$h (llcp$h ?v1 )?v3 )))):named a72 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (min$ (min$ ?v0 ?v1 )?v2 )(min$ ?v0 (min$ ?v1 ?v2 )))):named a73 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (min$ ?v0 (min$ ?v1 ?v2 ))(min$ ?v1 (min$ ?v0 ?v2 )))):named a74 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ ?v0 ?v1 )(min$ ?v1 ?v0 ))):named a75 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_a_prod_prod_llist$ )(?v2 B_a_a_prod_prod_llist$ ))(= (fun_app$a (llcp$ (ltake$d ?v0 ?v1 ))?v2 )(min$ ?v0 (fun_app$a (llcp$ ?v1 )?v2 )))):named a76 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_prod_llist$ )(?v2 B_b_prod_llist$ ))(= (fun_app$b (llcp$a (ltake$e ?v0 ?v1 ))?v2 )(min$ ?v0 (fun_app$b (llcp$a ?v1 )?v2 )))):named a77 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_prod_llist$ )(?v2 B_a_prod_llist$ ))(= (fun_app$c (llcp$b (ltake$f ?v0 ?v1 ))?v2 )(min$ ?v0 (fun_app$c (llcp$b ?v1 )?v2 )))):named a78 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_b_prod_prod_llist$ )(?v2 A_a_b_prod_prod_llist$ ))(= (fun_app$d (llcp$c (ltake$g ?v0 ?v1 ))?v2 )(min$ ?v0 (fun_app$d (llcp$c ?v1 )?v2 )))):named a79 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_a_prod_prod_llist$ )(?v2 A_a_a_prod_prod_llist$ ))(= (llcp$d (ltake$h ?v0 ?v1 )?v2 )(min$ ?v0 (llcp$d ?v1 ?v2 )))):named a80 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(= (fun_app$e (llcp$e (ltake$a ?v0 ?v1 ))?v2 )(min$ ?v0 (fun_app$e (llcp$e ?v1 )?v2 )))):named a81 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$f (llcp$f (ltake$b ?v0 ?v1 ))?v2 )(min$ ?v0 (fun_app$f (llcp$f ?v1 )?v2 )))):named a82 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_llist$ ))(= (fun_app$g (llcp$g (ltake$c ?v0 ?v1 ))?v2 )(min$ ?v0 (fun_app$g (llcp$g ?v1 )?v2 )))):named a83 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$h (llcp$h (ltake$ ?v0 ?v1 ))?v2 )(min$ ?v0 (fun_app$h (llcp$h ?v1 )?v2 )))):named a84 ))
(assert (! (forall ((?v0 B_a_a_prod_prod_llist$ )(?v1 Enat$ )(?v2 B_a_a_prod_prod_llist$ ))(= (fun_app$a (llcp$ ?v0 )(ltake$d ?v1 ?v2 ))(min$ ?v1 (fun_app$a (llcp$ ?v0 )?v2 )))):named a85 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 Enat$ )(?v2 B_b_prod_llist$ ))(= (fun_app$b (llcp$a ?v0 )(ltake$e ?v1 ?v2 ))(min$ ?v1 (fun_app$b (llcp$a ?v0 )?v2 )))):named a86 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 Enat$ )(?v2 B_a_prod_llist$ ))(= (fun_app$c (llcp$b ?v0 )(ltake$f ?v1 ?v2 ))(min$ ?v1 (fun_app$c (llcp$b ?v0 )?v2 )))):named a87 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 Enat$ )(?v2 A_a_b_prod_prod_llist$ ))(= (fun_app$d (llcp$c ?v0 )(ltake$g ?v1 ?v2 ))(min$ ?v1 (fun_app$d (llcp$c ?v0 )?v2 )))):named a88 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 Enat$ )(?v2 A_a_a_prod_prod_llist$ ))(= (llcp$d ?v0 (ltake$h ?v1 ?v2 ))(min$ ?v1 (llcp$d ?v0 ?v2 )))):named a89 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 Enat$ )(?v2 A_b_prod_llist$ ))(= (fun_app$e (llcp$e ?v0 )(ltake$a ?v1 ?v2 ))(min$ ?v1 (fun_app$e (llcp$e ?v0 )?v2 )))):named a90 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Enat$ )(?v2 B_llist$ ))(= (fun_app$f (llcp$f ?v0 )(ltake$b ?v1 ?v2 ))(min$ ?v1 (fun_app$f (llcp$f ?v0 )?v2 )))):named a91 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 Enat$ )(?v2 A_a_prod_llist$ ))(= (fun_app$g (llcp$g ?v0 )(ltake$c ?v1 ?v2 ))(min$ ?v1 (fun_app$g (llcp$g ?v0 )?v2 )))):named a92 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (fun_app$h (llcp$h ?v0 )(ltake$ ?v1 ?v2 ))(min$ ?v1 (fun_app$h (llcp$h ?v0 )?v2 )))):named a93 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$ ?v0 )?v1 )(= (ltake$ ?v1 ?v0 )?v0 )):pattern ((ltake$ ?v1 ?v0 )))):named a94 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$a ?v0 )?v1 )(= (ltake$b ?v1 ?v0 )?v0 )):pattern ((ltake$b ?v1 ?v0 )))):named a95 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$b ?v0 )?v1 )(= (ltake$a ?v1 ?v0 )?v0 )):pattern ((ltake$a ?v1 ?v0 )))):named a96 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$c ?v0 )?v1 )(= (ltake$e ?v1 ?v0 )?v0 )):pattern ((ltake$e ?v1 ?v0 )))):named a97 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$d ?v0 )?v1 )(= (ltake$f ?v1 ?v0 )?v0 )):pattern ((ltake$f ?v1 ?v0 )))):named a98 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$e ?v0 )?v1 )(= (ltake$c ?v1 ?v0 )?v0 )):pattern ((ltake$c ?v1 ?v0 )))):named a99 ))
(assert (! (forall ((?v0 B_a_a_prod_prod_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$f ?v0 )?v1 )(= (ltake$d ?v1 ?v0 )?v0 )):pattern ((ltake$d ?v1 ?v0 )))):named a100 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$g ?v0 )?v1 )(= (ltake$i ?v1 ?v0 )?v0 )):pattern ((ltake$i ?v1 ?v0 )))):named a101 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$h ?v0 )?v1 )(= (ltake$j ?v1 ?v0 )?v0 )):pattern ((ltake$j ?v1 ?v0 )))):named a102 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$i ?v0 )?v1 )(= (ltake$g ?v1 ?v0 )?v0 )):pattern ((ltake$g ?v1 ?v0 )))):named a103 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$h (llcp$h ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$h ?v0 )))):named a104 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$f (llcp$f ?v0 )?v0 )(llength$a ?v0 )):pattern ((llcp$f ?v0 )))):named a105 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$e (llcp$e ?v0 )?v0 )(llength$b ?v0 )):pattern ((llcp$e ?v0 )))):named a106 ))
(assert (! (forall ((?v0 B_b_prod_llist$ ))(! (= (fun_app$b (llcp$a ?v0 )?v0 )(llength$c ?v0 )):pattern ((llcp$a ?v0 )))):named a107 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(! (= (fun_app$c (llcp$b ?v0 )?v0 )(llength$d ?v0 )):pattern ((llcp$b ?v0 )))):named a108 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (= (fun_app$g (llcp$g ?v0 )?v0 )(llength$e ?v0 )):pattern ((llcp$g ?v0 )))):named a109 ))
(assert (! (forall ((?v0 B_a_a_prod_prod_llist$ ))(! (= (fun_app$a (llcp$ ?v0 )?v0 )(llength$f ?v0 )):pattern ((llcp$ ?v0 )))):named a110 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$ ))(! (= (fun_app$i (llcp$i ?v0 )?v0 )(llength$g ?v0 )):pattern ((llcp$i ?v0 )))):named a111 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ ))(! (= (fun_app$j (llcp$j ?v0 )?v0 )(llength$h ?v0 )):pattern ((llcp$j ?v0 )))):named a112 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ ))(! (= (fun_app$d (llcp$c ?v0 )?v0 )(llength$i ?v0 )):pattern ((llcp$c ?v0 )))):named a113 ))
(check-sat )
;(get-unsat-core )
