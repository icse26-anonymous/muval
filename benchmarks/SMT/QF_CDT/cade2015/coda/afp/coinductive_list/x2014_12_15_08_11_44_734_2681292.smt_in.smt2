;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-fun f$ ()A_b_fun$ )
(declare-fun uu$ ()A_llist_a_llist_fun$ )
(declare-fun uua$ ()B_llist_b_llist_fun$ )
(declare-fun uub$ (A$ )A_llist_a_llist_fun$ )
(declare-fun uuc$ (B$ )B_llist_b_llist_fun$ )
(declare-fun lmap$ (A_b_fun$ )A_llist_b_llist_fun$ )
(declare-fun lmap$a (B_b_fun$ )B_llist_b_llist_fun$ )
(declare-fun lmap$b (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$c (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun transp$ (A_llist_a_llist_bool_fun_fun$ )Bool )
(declare-fun fun_app$ (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun lfinite$ (B_llist$ )Bool )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun transp$a (B_llist_b_llist_bool_fun_fun$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$e (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$f (A_llist_b_llist_fun$ A_llist$ )B_llist$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun lprefix$a ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun monotone$ (A_llist_a_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ A_llist_b_llist_fun$ )Bool )
(declare-fun monotone$a (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun monotone$b (B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_fun$ )Bool )
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$ uua$ ?v0 )(ltl$a ?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a uu$ ?v0 )(ltl$ ?v0 )):pattern ((fun_app$a uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )(lCons$a ?v0 ?v1 )):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$a (uub$ ?v0 )?v1 )(lCons$ ?v0 ?v1 )):pattern ((fun_app$a (uub$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (monotone$ lprefix$ lprefix$a (lmap$ f$ ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$d (fun_app$e lprefix$a ?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v0 )):named a7 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$d (fun_app$e lprefix$a ?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_llist$ ))(= (fun_app$a ?v0 ?v5 )(ite (fun_app$b (fun_app$c lprefix$ ?v5 )?v1 )?v2 (fun_app$a ?v3 ?v5 ))))(and (forall ((?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v5 )?v6 )(not (fun_app$b (fun_app$c lprefix$ ?v5 )?v1 )))(fun_app$b (fun_app$c ?v4 (fun_app$a ?v3 ?v5 ))(fun_app$a ?v3 ?v6 ))))(and (forall ((?v5 A_llist$ ))(=> (not (fun_app$b (fun_app$c lprefix$ ?v5 )?v1 ))(fun_app$b (fun_app$c ?v4 ?v2 )(fun_app$a ?v3 ?v5 ))))(fun_app$b (fun_app$c ?v4 ?v2 )?v2 ))))(monotone$a lprefix$ ?v4 ?v0 ))):named a9 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_llist_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 B_llist$ ))(= (fun_app$ ?v0 ?v5 )(ite (fun_app$d (fun_app$e lprefix$a ?v5 )?v1 )?v2 (fun_app$ ?v3 ?v5 ))))(and (forall ((?v5 B_llist$ )(?v6 B_llist$ ))(=> (and (fun_app$d (fun_app$e lprefix$a ?v5 )?v6 )(not (fun_app$d (fun_app$e lprefix$a ?v5 )?v1 )))(fun_app$d (fun_app$e ?v4 (fun_app$ ?v3 ?v5 ))(fun_app$ ?v3 ?v6 ))))(and (forall ((?v5 B_llist$ ))(=> (not (fun_app$d (fun_app$e lprefix$a ?v5 )?v1 ))(fun_app$d (fun_app$e ?v4 ?v2 )(fun_app$ ?v3 ?v5 ))))(fun_app$d (fun_app$e ?v4 ?v2 )?v2 ))))(monotone$b lprefix$a ?v4 ?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_llist_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_llist$ ))(= (fun_app$f ?v0 ?v5 )(ite (fun_app$b (fun_app$c lprefix$ ?v5 )?v1 )?v2 (fun_app$f ?v3 ?v5 ))))(and (forall ((?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v5 )?v6 )(not (fun_app$b (fun_app$c lprefix$ ?v5 )?v1 )))(fun_app$d (fun_app$e ?v4 (fun_app$f ?v3 ?v5 ))(fun_app$f ?v3 ?v6 ))))(and (forall ((?v5 A_llist$ ))(=> (not (fun_app$b (fun_app$c lprefix$ ?v5 )?v1 ))(fun_app$d (fun_app$e ?v4 ?v2 )(fun_app$f ?v3 ?v5 ))))(fun_app$d (fun_app$e ?v4 ?v2 )?v2 ))))(monotone$ lprefix$ ?v4 ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$d (fun_app$e lprefix$a ?v0 )?v1 )(fun_app$d (fun_app$e lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$d (fun_app$e lprefix$a ?v0 )?v1 )(fun_app$d (fun_app$e lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v2 )?v1 ))(or (fun_app$b (fun_app$c lprefix$ ?v0 )?v2 )(fun_app$b (fun_app$c lprefix$ ?v2 )?v0 )))):named a16 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$d (fun_app$e lprefix$a ?v0 )?v1 )(fun_app$d (fun_app$e lprefix$a ?v2 )?v1 ))(or (fun_app$d (fun_app$e lprefix$a ?v0 )?v2 )(fun_app$d (fun_app$e lprefix$a ?v2 )?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v1 )?v2 ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v2 ))):named a18 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$d (fun_app$e lprefix$a ?v0 )?v1 )(fun_app$d (fun_app$e lprefix$a ?v1 )?v2 ))(fun_app$d (fun_app$e lprefix$a ?v0 )?v2 ))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v1 )?v2 ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v2 ))):named a20 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$d (fun_app$e lprefix$a ?v0 )?v1 )(fun_app$d (fun_app$e lprefix$a ?v1 )?v2 ))(fun_app$d (fun_app$e lprefix$a ?v0 )?v2 ))):named a21 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_b_llist_fun$ ))(= (monotone$b ?v0 ?v1 ?v2 )(forall ((?v3 B_llist$ )(?v4 B_llist$ ))(=> (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(fun_app$d (fun_app$e ?v1 (fun_app$ ?v2 ?v3 ))(fun_app$ ?v2 ?v4 )))))):named a22 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ ))(= (monotone$a ?v0 ?v1 ?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$b (fun_app$c ?v0 ?v3 )?v4 )(fun_app$b (fun_app$c ?v1 (fun_app$a ?v2 ?v3 ))(fun_app$a ?v2 ?v4 )))))):named a23 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 A_llist_b_llist_fun$ ))(= (monotone$ ?v0 ?v1 ?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$b (fun_app$c ?v0 ?v3 )?v4 )(fun_app$d (fun_app$e ?v1 (fun_app$f ?v2 ?v3 ))(fun_app$f ?v2 ?v4 )))))):named a24 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_b_llist_fun$ ))(=> (forall ((?v3 B_llist$ )(?v4 B_llist$ ))(=> (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(fun_app$d (fun_app$e ?v1 (fun_app$ ?v2 ?v3 ))(fun_app$ ?v2 ?v4 ))))(monotone$b ?v0 ?v1 ?v2 ))):named a25 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ ))(=> (forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$b (fun_app$c ?v0 ?v3 )?v4 )(fun_app$b (fun_app$c ?v1 (fun_app$a ?v2 ?v3 ))(fun_app$a ?v2 ?v4 ))))(monotone$a ?v0 ?v1 ?v2 ))):named a26 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 A_llist_b_llist_fun$ ))(=> (forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$b (fun_app$c ?v0 ?v3 )?v4 )(fun_app$d (fun_app$e ?v1 (fun_app$f ?v2 ?v3 ))(fun_app$f ?v2 ?v4 ))))(monotone$ ?v0 ?v1 ?v2 ))):named a27 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_b_llist_fun$ )(?v3 B_llist$ )(?v4 B_llist$ ))(=> (and (monotone$b ?v0 ?v1 ?v2 )(fun_app$d (fun_app$e ?v0 ?v3 )?v4 ))(fun_app$d (fun_app$e ?v1 (fun_app$ ?v2 ?v3 ))(fun_app$ ?v2 ?v4 )))):named a28 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (and (monotone$a ?v0 ?v1 ?v2 )(fun_app$b (fun_app$c ?v0 ?v3 )?v4 ))(fun_app$b (fun_app$c ?v1 (fun_app$a ?v2 ?v3 ))(fun_app$a ?v2 ?v4 )))):named a29 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 A_llist_b_llist_fun$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (and (monotone$ ?v0 ?v1 ?v2 )(fun_app$b (fun_app$c ?v0 ?v3 )?v4 ))(fun_app$d (fun_app$e ?v1 (fun_app$f ?v2 ?v3 ))(fun_app$f ?v2 ?v4 )))):named a30 ))
(assert (! (monotone$a lprefix$ lprefix$ uu$ ):named a31 ))
(assert (! (monotone$b lprefix$a lprefix$a uua$ ):named a32 ))
(assert (! (forall ((?v0 A$ ))(monotone$a lprefix$ lprefix$ (uub$ ?v0 ))):named a33 ))
(assert (! (forall ((?v0 B$ ))(monotone$b lprefix$a lprefix$a (uuc$ ?v0 ))):named a34 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lfinite$ (fun_app$ (lmap$a ?v0 )?v1 ))(lfinite$ ?v1 ))):named a35 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lfinite$a (lmap$b ?v0 ?v1 ))(lfinite$ ?v1 ))):named a36 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$a (fun_app$a (lmap$c ?v0 )?v1 ))(lfinite$a ?v1 ))):named a37 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$f (lmap$ ?v0 )?v1 ))(lfinite$a ?v1 ))):named a38 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (ltl$a (fun_app$ (lmap$a ?v0 )?v1 ))(fun_app$ (lmap$a ?v0 )(ltl$a ?v1 )))):named a39 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$ (lmap$b ?v0 ?v1 ))(lmap$b ?v0 (ltl$a ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$ (fun_app$a (lmap$c ?v0 )?v1 ))(fun_app$a (lmap$c ?v0 )(ltl$ ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (ltl$a (fun_app$f (lmap$ ?v0 )?v1 ))(fun_app$f (lmap$ ?v0 )(ltl$ ?v1 )))):named a42 ))
(assert (! (transp$ lprefix$ ):named a43 ))
(assert (! (transp$a lprefix$a ):named a44 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (fun_app$c lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$b (fun_app$c lprefix$ lNil$ )?v0 )))):named a45 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$d (fun_app$e lprefix$a lNil$a )?v0 )true ):pattern ((fun_app$d (fun_app$e lprefix$a lNil$a )?v0 )))):named a46 ))
(check-sat )
;(get-unsat-core )
