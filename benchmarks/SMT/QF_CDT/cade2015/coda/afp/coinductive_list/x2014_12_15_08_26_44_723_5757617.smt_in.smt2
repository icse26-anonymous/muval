;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_list$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun i$ ()Nat$ )
(declare-fun j$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun nth$ (A_list$ )Nat_a_fun$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun compow$ (Nat$ )A_a_fun_a_a_fun_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (Nat_a_fun$ Nat$ )A$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun fun_app$b (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun undefined$ (Nat$ )A$ )
(assert (! (not (not (= (fun_app$ (lnth$ xs$ )i$ )(fun_app$ (lnth$ xs$ )j$ )))):named a0 ))
(assert (! (not (= i$ j$ )):named a1 ))
(assert (! (not (= (fun_app$ (lnth$ xsa$ )(suc$ i$ ))(fun_app$ (lnth$ xsa$ )(suc$ j$ )))):named a2 ))
(assert (! (not (member$ x$ (lset$ xs$ ))):named a3 ))
(assert (! (less$ (enat$ i$ )(llength$ xs$ )):named a4 ))
(assert (! (less$ (enat$ j$ )(llength$ xs$ )):named a5 ))
(assert (! (= xsa$ (lCons$ x$ xs$ )):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 Nat$ ))(= (fun_app$ (lnth$ (iterates$ ?v0 ?v1 ))?v2 )(fun_app$a (fun_app$b (compow$ ?v2 )?v0 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$ (lnth$ (lCons$ ?v0 ?v1 ))zero$ )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_list$ ))(= (lnth$ (llist_of$ ?v0 ))(nth$ ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 Nat$ ))(! (= (fun_app$ (lnth$ (lCons$ ?v0 ?v1 ))(suc$ ?v2 ))(fun_app$ (lnth$ ?v1 )?v2 )):pattern ((fun_app$ (lnth$ (lCons$ ?v0 ?v1 ))(suc$ ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (less$ (enat$ ?v0 )(llength$ xs$a ))(and (less$ (enat$ ?v1 )(llength$ xs$a ))(not (= ?v0 ?v1 ))))(not (= (fun_app$ (lnth$ xs$a )?v0 )(fun_app$ (lnth$ xs$a )?v1 ))))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (lnth$ lNil$ )?v0 )(undefined$ ?v0 )):pattern ((fun_app$ (lnth$ lNil$ )?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (less$ (enat$ ?v0 )(llength$ xsa$ ))(and (less$ (enat$ ?v1 )(llength$ xsa$ ))(not (= ?v0 ?v1 ))))(not (= (fun_app$ (lnth$ xsa$ )?v0 )(fun_app$ (lnth$ xsa$ )?v1 ))))):named a13 ))
(assert (! (=> (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (= xsa$ (lCons$ ?v0 ?v1 ))false ))false ):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (less$ (enat$ (suc$ j$ ))(llength$ xsa$ )):named a17 ))
(check-sat )
;(get-unsat-core )
