;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun ldrop$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun zero$a ()Enat$ )
(declare-fun ldropn$ (Nat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun the_enat$ (Enat$ )Nat$ )
(declare-fun gen_llength$ (Nat$ )A_llist_enat_fun$ )
(assert (! (not (= (fun_app$ (ldrop$ (enat$ n$ ))xs$ )(fun_app$ (ldropn$ n$ )xs$ ))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (ldropn$ zero$ )?v0 )?v0 ):pattern ((fun_app$ (ldropn$ zero$ )?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$ (ldrop$ zero$a )?v0 )?v0 )):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ldropn$ ?v0 )lNil$ )lNil$ ):pattern ((ldropn$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ldrop$ ?v0 )lNil$ )lNil$ ):pattern ((ldrop$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (ltl$ (fun_app$ (ldropn$ ?v0 )?v1 ))(fun_app$ (ldropn$ ?v0 )(ltl$ ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (the_enat$ (enat$ ?v0 ))?v0 ):pattern ((enat$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (ltl$ (fun_app$ (ldrop$ ?v0 )?v1 ))(fun_app$ (ldrop$ ?v0 )(ltl$ ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (gen_llength$ ?v0 )lNil$ )(enat$ ?v0 )):pattern ((gen_llength$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (ldropn$ ?v0 )?v1 ))(less_eq$ (llength$ ?v1 )(enat$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ ))(= (less_eq$ ?v0 zero$a )(= ?v0 zero$a ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(= (= (llength$ ?v0 )zero$a )(lnull$ ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (lnull$ ?v0 )(= (llength$ ?v0 )zero$a )):pattern ((llength$ ?v0 )))):named a13 ))
(assert (! (= (llength$ lNil$ )zero$a ):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (ldrop$ ?v0 )?v1 ))(less_eq$ (llength$ ?v1 )?v0 ))):named a15 ))
(check-sat )
;(get-unsat-core )
