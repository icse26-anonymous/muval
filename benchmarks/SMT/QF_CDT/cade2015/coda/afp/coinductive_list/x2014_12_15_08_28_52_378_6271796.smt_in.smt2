;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort A_list$ 0)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun r$ ()A_a_bool_fun_fun$ )
(declare-fun y$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun zs$ ()A_list$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun x21$ ()A$ )
(declare-fun x22$ ()A_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun zs$a ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(assert (! (not (fun_app$ (fun_app$a r$ (lnth$ xs$ (size$ zs$ )))(lnth$ ys$ (size$ zs$ )))):named a0 ))
(assert (! (fun_app$ (fun_app$a r$ (lhd$ xs$a ))y$ ):named a1 ))
(assert (! (llexord$ r$ xs$ ys$ ):named a2 ))
(assert (! (or (= xs$a lNil$ )(fun_app$ (fun_app$a r$ (lhd$ xs$a ))y$ )):named a3 ))
(assert (! (= (ltake$ (enat$ (size$ zs$ ))xs$ )(ltake$ (enat$ (size$ zs$ ))ys$ )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(= (= ?v0 ?v1 )false ))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_list$ ))(= (size$ ?v1 )?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (size$ ?v0 )(size$ ?v1 )))(not (= ?v0 ?v1 )))):named a8 ))
(assert (! (exists ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(and (lfinite$ ?v0 )(and (= xs$ (lappend$ ?v0 ?v1 ))(and (= ys$ (lappend$ ?v0 (lCons$ ?v2 ?v3 )))(or (= ?v1 lNil$ )(fun_app$ (fun_app$a r$ (lhd$ ?v1 ))?v2 )))))):named a9 ))
(assert (! (less$ (enat$ (size$ zs$ ))(min$ (llength$ xs$ )(llength$ ys$ ))):named a10 ))
(assert (! (=> (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(=> (and (lfinite$ ?v0 )(and (or (= ?v1 lNil$ )(fun_app$ (fun_app$a r$ (lhd$ ?v1 ))?v2 ))(and (= xs$ (lappend$ ?v0 ?v1 ))(= ys$ (lappend$ ?v0 (lCons$ ?v2 ?v3 ))))))false ))false ):named a11 ))
(assert (! (= zs$a (llist_of$ zs$ )):named a12 ))
(assert (! (= xs$ (lappend$ zs$a xs$a )):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lnth$ (lCons$ ?v0 ?v1 )zero$ )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a14 ))
(assert (! (= xs$a (lCons$ x21$ x22$ )):named a15 ))
(assert (! (lfinite$ zs$a ):named a16 ))
(assert (! (=> (forall ((?v0 A_list$ ))(=> (= zs$a (llist_of$ ?v0 ))false ))false ):named a17 ))
(check-sat )
;(get-unsat-core )
