;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-codatatypes ()((Nat_llist$ (lNil$a )(lCons$a (lhd$a Nat$ )(ltl$a Nat_llist$ )))))
(declare-sort Nat_list$ 0)
(declare-fun nil$a ()Nat_list$)
(declare-fun hd$a (Nat_list$)Nat$)
(declare-fun tl$a (Nat_list$)Nat_list$)
(declare-fun cons$a (Nat$ Nat_list$ )Nat_list$)
(declare-fun f$ ()Nat_a_fun$ )
(declare-fun xs$ ()A_list$ )
(declare-fun last$ (A_list$ )A$ )
(declare-fun zero$ ()Nat$ )
(declare-fun llast$ (A_llist$ )A$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (Nat_a_fun$ Nat$ )A$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun listsum$ (Nat_list$ )Nat$ )
(declare-fun lsorted$ (Nat_llist$ )Bool )
(declare-fun sublist$ (A_list$ Nat_set$ )A_list$ )
(declare-fun lfinite$a (Nat_llist$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun llistsum$ (Nat_llist$ )Nat$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun inf_llist$ (Nat_a_fun$ )A_llist$ )
(declare-fun llist_of$a (Nat_list$ )Nat_llist$ )
(declare-fun lsublist$a (Nat_llist$ Nat_set$ )Nat_llist$ )
(declare-fun inf_llist$a (Nat_nat_fun$ )Nat_llist$ )
(assert (! (not (not (= (llist_of$ xs$ )(inf_llist$ f$ )))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a2 ))
(assert (! (forall ((?v0 Nat_nat_fun$ ))(not (= (inf_llist$a ?v0 )lNil$a ))):named a3 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(not (= (inf_llist$ ?v0 )lNil$ ))):named a4 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(not (lnull$ (inf_llist$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(not (lfinite$ (inf_llist$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 Nat_list$ ))(= (llistsum$ (llist_of$a ?v0 ))(listsum$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat_set$ ))(= (lsublist$ (llist_of$ ?v0 )?v1 )(llist_of$ (sublist$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_list$ ))(= (llast$ (llist_of$ ?v0 ))(last$ ?v0 ))):named a10 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(= (lhd$ (inf_llist$ ?v0 ))(fun_app$ ?v0 zero$ ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(= (llist_of$ (list_of$ ?v0 ))?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_list$ ))(= (lhd$ (llist_of$ ?v0 ))(hd$ ?v0 ))):named a13 ))
(assert (! (= (lfinite$a lNil$a )true ):named a14 ))
(assert (! (= (lfinite$ lNil$ )true ):named a15 ))
(assert (! (= (lsorted$ lNil$a )true ):named a16 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$a lNil$a ?v0 )lNil$a ):pattern ((lsublist$a lNil$a ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$ lNil$ ?v0 )lNil$ ):pattern ((lsublist$ lNil$ ?v0 )))):named a18 ))
(assert (! (= (llistsum$ lNil$a )zero$ ):named a19 ))
(check-sat )
;(get-unsat-core )
