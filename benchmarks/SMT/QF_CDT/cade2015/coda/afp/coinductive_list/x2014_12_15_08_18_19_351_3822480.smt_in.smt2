;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort Nat_llist_nat_fun$ 0 )
(declare-sort Nat_nat_a_fun_fun$ 0 )
(declare-sort Enat_nat_a_fun_fun$ 0 )
(declare-sort A_a_llist_a_fun_fun$ 0 )
(declare-sort Nat_nat_nat_fun_fun$ 0 )
(declare-sort Enat_nat_nat_fun_fun$ 0 )
(declare-sort Nat_a_fun_nat_a_fun_fun$ 0 )
(declare-sort Nat_nat_llist_nat_fun_fun$ 0 )
(declare-sort Nat_nat_nat_a_fun_fun_fun$ 0 )
(declare-sort Enat_nat_nat_a_fun_fun_fun$ 0 )
(declare-sort Nat_nat_fun_nat_nat_fun_fun$ 0 )
(declare-sort Nat_a_fun_llist_nat_a_fun_fun$ 0 )
(declare-sort Nat_a_fun_enat_nat_a_fun_fun_fun$ 0 )
(declare-sort Nat_nat_fun_enat_nat_nat_fun_fun_fun$ 0 )
(declare-sort Nat_nat_a_fun_fun_nat_nat_a_fun_fun_fun$ 0 )
(declare-sort Nat_a_fun_nat_a_fun_llist_nat_a_fun_fun_fun$ 0 )
(declare-sort Nat_nat_nat_fun_fun_nat_nat_nat_fun_fun_fun$ 0 )
(declare-sort Nat_nat_a_fun_fun_enat_nat_nat_a_fun_fun_fun_fun$ 0 )
(declare-sort Nat_nat_nat_a_fun_fun_fun_nat_nat_nat_a_fun_fun_fun_fun$ 0 )
(declare-sort Nat_a_fun_nat_a_fun_llist_nat_a_fun_fun_fun_nat_a_fun_llist_nat_a_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((Nat_nat_a_fun_fun_llist$ (lNil$a )(lCons$a (select$ Nat_nat_a_fun_fun$ )(selecta$ Nat_nat_a_fun_fun_llist$ )))(Nat_nat_fun_llist$ (lNil$b )(lCons$b (selectb$ Nat_nat_fun$ )(selectc$ Nat_nat_fun_llist$ )))(Nat_a_fun_llist$ (lNil$c )(lCons$c (selectd$ Nat_a_fun$ )(selecte$ Nat_a_fun_llist$ )))(Nat_llist$ (lNil$d )(lCons$d (lhd$a Nat$ )(ltl$a Nat_llist$ )))))
(declare-fun na$ ()Nat$ )
(declare-fun uu$ ()Nat_nat_fun$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun uua$ (Nat$ )Nat_nat_llist_nat_fun_fun$ )
(declare-fun uub$ (Nat$ )Nat_a_fun_nat_a_fun_llist_nat_a_fun_fun_fun$ )
(declare-fun uuc$ (Nat$ )A_a_llist_a_fun_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lnth$ (Nat_llist$ )Nat_nat_fun$ )
(declare-fun llast$ (Nat_nat_a_fun_fun_llist$ )Nat_nat_a_fun_fun$ )
(declare-fun lnth$a (Nat_a_fun_llist$ )Nat_nat_a_fun_fun$ )
(declare-fun lnth$b (A_llist$ )Nat_a_fun$ )
(declare-fun lnth$c (Nat_nat_a_fun_fun_llist$ )Nat_nat_nat_a_fun_fun_fun$ )
(declare-fun lnth$d (Nat_nat_fun_llist$ )Nat_nat_nat_fun_fun$ )
(declare-fun minus$ (Nat$ )Nat_nat_fun$ )
(declare-fun llast$a (Nat_nat_fun_llist$ )Nat_nat_fun$ )
(declare-fun llast$b (Nat_a_fun_llist$ )Nat_a_fun$ )
(declare-fun llast$c (Nat_llist$ )Nat$ )
(declare-fun llast$d (A_llist$ )A$ )
(declare-fun fun_app$ (Nat_llist_nat_fun$ Nat_llist$ )Nat$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun case_nat$ (Nat_nat_a_fun_fun$ )Nat_nat_nat_a_fun_fun_fun_nat_nat_nat_a_fun_fun_fun_fun$ )
(declare-fun fun_app$a (Nat_nat_llist_nat_fun_fun$ Nat$ )Nat_llist_nat_fun$ )
(declare-fun fun_app$b (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$c (Nat_a_fun_llist_nat_a_fun_fun$ Nat_a_fun_llist$ )Nat_a_fun$ )
(declare-fun fun_app$d (Nat_a_fun_nat_a_fun_llist_nat_a_fun_fun_fun$ Nat_a_fun$ )Nat_a_fun_llist_nat_a_fun_fun$ )
(declare-fun fun_app$e (Nat_nat_a_fun_fun$ Nat$ )Nat_a_fun$ )
(declare-fun fun_app$f (A_llist_a_fun$ A_llist$ )A$ )
(declare-fun fun_app$g (A_a_llist_a_fun_fun$ A$ )A_llist_a_fun$ )
(declare-fun fun_app$h (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$i (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$j (Enat_nat_nat_a_fun_fun_fun$ Enat$ )Nat_nat_a_fun_fun$ )
(declare-fun fun_app$k (Nat_nat_a_fun_fun_enat_nat_nat_a_fun_fun_fun_fun$ Nat_nat_a_fun_fun$ )Enat_nat_nat_a_fun_fun_fun$ )
(declare-fun fun_app$l (Nat_nat_nat_a_fun_fun_fun_nat_nat_nat_a_fun_fun_fun_fun$ Nat_nat_nat_a_fun_fun_fun$ )Nat_nat_nat_a_fun_fun_fun$ )
(declare-fun fun_app$m (Enat_nat_nat_fun_fun$ Enat$ )Nat_nat_fun$ )
(declare-fun fun_app$n (Nat_nat_fun_enat_nat_nat_fun_fun_fun$ Nat_nat_fun$ )Enat_nat_nat_fun_fun$ )
(declare-fun fun_app$o (Nat_nat_nat_fun_fun_nat_nat_nat_fun_fun_fun$ Nat_nat_nat_fun_fun$ )Nat_nat_nat_fun_fun$ )
(declare-fun fun_app$p (Enat_nat_a_fun_fun$ Enat$ )Nat_a_fun$ )
(declare-fun fun_app$q (Nat_a_fun_enat_nat_a_fun_fun_fun$ Nat_a_fun$ )Enat_nat_a_fun_fun$ )
(declare-fun fun_app$r (Nat_nat_a_fun_fun_nat_nat_a_fun_fun_fun$ Nat_nat_a_fun_fun$ )Nat_nat_a_fun_fun$ )
(declare-fun fun_app$s (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun$ )Nat_nat_fun$ )
(declare-fun fun_app$t (Nat_a_fun_nat_a_fun_fun$ Nat_a_fun$ )Nat_a_fun$ )
(declare-fun fun_app$u (Nat_a_fun_nat_a_fun_llist_nat_a_fun_fun_fun_nat_a_fun_llist_nat_a_fun_fun_fun$ Nat_a_fun_nat_a_fun_llist_nat_a_fun_fun_fun$ )Nat_a_fun_llist_nat_a_fun_fun$ )
(declare-fun fun_app$v (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun less_eq$a (Nat$ )Nat_bool_fun$ )
(declare-fun llength$a (Nat_nat_a_fun_fun_llist$ )Enat$ )
(declare-fun llength$b (Nat_nat_fun_llist$ )Enat$ )
(declare-fun llength$c (Nat_a_fun_llist$ )Enat$ )
(declare-fun llength$d (Nat_llist$ )Enat$ )
(declare-fun case_enat$ (Nat_nat_fun$ Nat$ Enat$ )Nat$ )
(declare-fun case_nat$a (Nat_nat_fun$ )Nat_nat_nat_fun_fun_nat_nat_nat_fun_fun_fun$ )
(declare-fun case_nat$b (Nat_a_fun$ )Nat_nat_a_fun_fun_nat_nat_a_fun_fun_fun$ )
(declare-fun case_nat$c (Nat$ )Nat_nat_fun_nat_nat_fun_fun$ )
(declare-fun case_nat$d (A$ )Nat_a_fun_nat_a_fun_fun$ )
(declare-fun undefined$ ()Nat_a_fun$ )
(declare-fun case_enat$a (Nat_nat_nat_a_fun_fun_fun$ )Nat_nat_a_fun_fun_enat_nat_nat_a_fun_fun_fun_fun$ )
(declare-fun case_enat$b (Nat_nat_nat_fun_fun$ )Nat_nat_fun_enat_nat_nat_fun_fun_fun$ )
(declare-fun case_enat$c (Nat_nat_a_fun_fun$ )Nat_a_fun_enat_nat_a_fun_fun_fun$ )
(declare-fun case_enat$d (Nat_a_fun$ A$ Enat$ )A$ )
(declare-fun case_llist$ (Nat$ Nat_nat_llist_nat_fun_fun$ Nat_llist$ )Nat$ )
(declare-fun undefined$a ()Nat$ )
(declare-fun undefined$b ()Nat_nat_a_fun_fun$ )
(declare-fun undefined$c ()Nat_nat_fun$ )
(declare-fun undefined$d ()A$ )
(declare-fun case_llist$a (Nat_a_fun$ )Nat_a_fun_nat_a_fun_llist_nat_a_fun_fun_fun_nat_a_fun_llist_nat_a_fun_fun_fun$ )
(declare-fun case_llist$b (A$ A_a_llist_a_fun_fun$ A_llist$ )A$ )
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_llist$ ))(! (= (fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )(fun_app$b (lnth$ ?v2 )?v0 )):pattern ((fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_fun$ )(?v2 Nat_a_fun_llist$ ))(! (= (fun_app$c (fun_app$d (uub$ ?v0 )?v1 )?v2 )(fun_app$e (lnth$a ?v2 )?v0 )):pattern ((fun_app$c (fun_app$d (uub$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$f (fun_app$g (uuc$ ?v0 )?v1 )?v2 )(fun_app$h (lnth$b ?v2 )?v0 )):pattern ((fun_app$f (fun_app$g (uuc$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$b uu$ ?v0 )?v0 ):pattern ((fun_app$b uu$ ?v0 )))):named a3 ))
(assert (! (not (= (fun_app$h (lnth$b xsa$ )(suc$ na$ ))(fun_app$h undefined$ (fun_app$b (minus$ (suc$ na$ ))(case_enat$ uu$ undefined$a (llength$ xsa$ )))))):named a4 ))
(assert (! (less_eq$ (llength$ xsa$ )(enat$ (suc$ na$ ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (less_eq$ (llength$ ?v0 )(enat$ na$ ))(= (fun_app$h (lnth$b ?v0 )na$ )(fun_app$h undefined$ (fun_app$b (minus$ na$ )(case_enat$ uu$ undefined$a (llength$ ?v0 ))))))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$b (minus$ (fun_app$b (minus$ (suc$ ?v0 ))?v1 ))(suc$ ?v2 ))(fun_app$b (minus$ (fun_app$b (minus$ ?v0 )?v1 ))?v2 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$b (minus$ (suc$ ?v0 ))(suc$ ?v1 ))(fun_app$b (minus$ ?v0 )?v1 )):pattern ((fun_app$b (minus$ (suc$ ?v0 ))(suc$ ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$i ?v0 ?v1 )(forall ((?v3 Nat$ ))(=> (fun_app$i ?v0 (suc$ ?v3 ))(fun_app$i ?v0 ?v3 ))))(fun_app$i ?v0 (fun_app$b (minus$ ?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat_nat_a_fun_fun_llist$ ))(! (= (llast$ ?v0 )(fun_app$j (fun_app$k (case_enat$a (fun_app$l (case_nat$ undefined$b )(lnth$c ?v0 )))undefined$b )(llength$a ?v0 ))):pattern ((llast$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat_nat_fun_llist$ ))(! (= (llast$a ?v0 )(fun_app$m (fun_app$n (case_enat$b (fun_app$o (case_nat$a undefined$c )(lnth$d ?v0 )))undefined$c )(llength$b ?v0 ))):pattern ((llast$a ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Nat_a_fun_llist$ ))(! (= (llast$b ?v0 )(fun_app$p (fun_app$q (case_enat$c (fun_app$r (case_nat$b undefined$ )(lnth$a ?v0 )))undefined$ )(llength$c ?v0 ))):pattern ((llast$b ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (llast$c ?v0 )(case_enat$ (fun_app$s (case_nat$c undefined$a )(lnth$ ?v0 ))undefined$a (llength$d ?v0 ))):pattern ((llast$c ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (llast$d ?v0 )(case_enat$d (fun_app$t (case_nat$d undefined$d )(lnth$b ?v0 ))undefined$d (llength$ ?v0 ))):pattern ((llast$d ?v0 )))):named a16 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat$ ))(= (fun_app$b (lnth$ ?v0 )(suc$ ?v1 ))(case_llist$ (fun_app$b undefined$c (suc$ ?v1 ))(uua$ ?v1 )?v0 ))):named a17 ))
(assert (! (forall ((?v0 Nat_a_fun_llist$ )(?v1 Nat$ ))(= (fun_app$e (lnth$a ?v0 )(suc$ ?v1 ))(fun_app$c (fun_app$u (case_llist$a (fun_app$e undefined$b (suc$ ?v1 )))(uub$ ?v1 ))?v0 ))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(= (fun_app$h (lnth$b ?v0 )(suc$ ?v1 ))(case_llist$b (fun_app$h undefined$ (suc$ ?v1 ))(uuc$ ?v1 )?v0 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$b (minus$ (fun_app$b (minus$ ?v0 )?v1 ))?v2 )(fun_app$b (minus$ (fun_app$b (minus$ ?v0 )?v2 ))?v1 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a22 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$i (less_eq$a (fun_app$b ?v0 ?v3 ))(fun_app$b ?v0 (suc$ ?v3 ))))(fun_app$i (less_eq$a ?v1 )?v2 ))(fun_app$i (less_eq$a (fun_app$b ?v0 ?v1 ))(fun_app$b ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less_eq$ (fun_app$v ?v0 ?v3 )(fun_app$v ?v0 (suc$ ?v3 ))))(fun_app$i (less_eq$a ?v1 )?v2 ))(less_eq$ (fun_app$v ?v0 ?v1 )(fun_app$v ?v0 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$i (less_eq$a (fun_app$b ?v0 (suc$ ?v3 )))(fun_app$b ?v0 ?v3 )))(fun_app$i (less_eq$a ?v1 )?v2 ))(fun_app$i (less_eq$a (fun_app$b ?v0 ?v2 ))(fun_app$b ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less_eq$ (fun_app$v ?v0 (suc$ ?v3 ))(fun_app$v ?v0 ?v3 )))(fun_app$i (less_eq$a ?v1 )?v2 ))(less_eq$ (fun_app$v ?v0 ?v2 )(fun_app$v ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat_a_fun$ )(?v2 Nat$ ))(! (= (fun_app$h (fun_app$t (case_nat$d ?v0 )?v1 )(suc$ ?v2 ))(fun_app$h ?v1 ?v2 )):pattern ((fun_app$h (fun_app$t (case_nat$d ?v0 )?v1 )(suc$ ?v2 ))))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ ))(! (= (fun_app$b (fun_app$s (case_nat$c ?v0 )?v1 )(suc$ ?v2 ))(fun_app$b ?v1 ?v2 )):pattern ((fun_app$b (fun_app$s (case_nat$c ?v0 )?v1 )(suc$ ?v2 ))))):named a28 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_nat_a_fun_fun$ )(?v2 Nat$ ))(! (= (fun_app$e (fun_app$r (case_nat$b ?v0 )?v1 )(suc$ ?v2 ))(fun_app$e ?v1 ?v2 )):pattern ((fun_app$e (fun_app$r (case_nat$b ?v0 )?v1 )(suc$ ?v2 ))))):named a29 ))
(check-sat )
;(get-unsat-core )
