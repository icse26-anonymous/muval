;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun zs$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(assert (! (not (lprefix$ ys$ zs$ )):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a1 ))
(assert (! (lprefix$ (lappend$ xs$ ys$ )(lappend$ xs$ zs$ )):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v2 ?v1 ))(or (lprefix$ ?v0 ?v2 )(lprefix$ ?v2 ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v2 ))(lprefix$ ?v0 ?v2 ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (lprefix$ ?v0 ?v1 )(= ?v0 ?v1 ))):pattern ((lprefix$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (lprefix$ ?v0 ?v1 )(lprefix$ (lappend$ ?v2 ?v0 )(lappend$ ?v2 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(lprefix$ ?v0 (lappend$ ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$ lNil$ ?v0 )true ):pattern ((lprefix$ lNil$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (lprefix$ (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(lprefix$ ?v1 ?v3 ))):pattern ((lprefix$ (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ lNil$ ?v0 )):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lprefix$ ?v0 ?v1 )(lprefix$ (ltl$ ?v0 )(ltl$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lprefix$ (lCons$ ?v0 ?v1 )?v2 )(exists ((?v3 A_llist$ ))(and (= ?v2 (lCons$ ?v0 ?v3 ))(lprefix$ ?v1 ?v3 ))))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A$ ))(=> (lprefix$ ?v0 ?v1 )(lprefix$ (lCons$ ?v2 ?v0 )(lCons$ ?v2 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (lappend$ ?v0 ?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(not (lnull$ ?v0 )))(not (lnull$ ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
