;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun i$ ()Nat$ )
(declare-fun j$ ()Nat$ )
(declare-fun ia$ ()Nat$ )
(declare-fun ja$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun ldistinct$ (A_llist$ )Bool )
(assert (! (not (exists ((?v0 Nat$ ))(and (less$ (enat$ ?v0 )(llength$ (ldropn$ (suc$ ia$ )xs$ )))(= (lnth$ (ldropn$ (suc$ ia$ )xs$ )?v0 )(lnth$ xs$ ja$ ))))):named a0 ))
(assert (! (not (= i$ j$ )):named a1 ))
(assert (! (not (= ia$ ja$ )):named a2 ))
(assert (! (less_eq$ ia$ ja$ ):named a3 ))
(assert (! (less$a ia$ ja$ ):named a4 ))
(assert (! (less$ (enat$ ia$ )(llength$ xs$ )):named a5 ))
(assert (! (less$ (enat$ ja$ )(llength$ xs$ )):named a6 ))
(assert (! (less$ (enat$ i$ )(llength$ xs$ )):named a7 ))
(assert (! (less$ (enat$ j$ )(llength$ xs$ )):named a8 ))
(assert (! (ldistinct$ xs$ ):named a9 ))
(assert (! (ldistinct$ (ldropn$ ia$ xs$ )):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (ldropn$ ?v0 ?v1 )(lCons$ (lnth$ ?v1 ?v0 )(ldropn$ (suc$ ?v0 )?v1 ))))):named a11 ))
(assert (! (=> (less$ (enat$ ia$ )(llength$ xs$ ))(ldistinct$ (lCons$ (lnth$ xs$ ia$ )(ldropn$ (suc$ ia$ )xs$ )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a16 ))
(check-sat )
;(get-unsat-core )
