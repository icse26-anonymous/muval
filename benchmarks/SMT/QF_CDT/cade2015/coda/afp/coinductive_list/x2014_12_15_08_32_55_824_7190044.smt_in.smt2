;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-sort A_llist_list$ 0)
(declare-fun nil$ ()A_llist_list$)
(declare-fun hd$ (A_llist_list$)A_llist$)
(declare-fun tl$ (A_llist_list$)A_llist_list$)
(declare-fun cons$ (A_llist$ A_llist_list$ )A_llist_list$)
(declare-fun n$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun na$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun xss$a ()A_llist_llist$ )
(declare-fun xss$b ()A_llist_list$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun ldrop$ (Enat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun ldrop$a (Enat$ A_llist$ )A_llist$ )
(declare-fun ldropn$ (Nat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun ldropn$a (Nat$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lmember$ (A_llist$ A_llist_llist$ )Bool )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun lappend$a (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun llength$a (A_llist_llist$ )Enat$ )
(declare-fun llist_of$ (A_llist_list$ )A_llist_llist$ )
(declare-fun lmember$a (A$ )A_llist_bool_fun$ )
(declare-fun pred_llist$ (A_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun pred_llist$a (A_bool_fun$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (A_llist_llist$ A_llist_llist$ )Bool )
(declare-fun lstrict_prefix$a (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (fun_app$ (less$ (enat$ na$ ))(llength$ (lconcat$ (lCons$a xs$ xss$ ))))):named a0 ))
(assert (! (= (lconcat$ xssa$ )(lCons$ x$ xs$a )):named a1 ))
(assert (! (= xs$a (lconcat$ (lCons$a xs$ xss$ ))):named a2 ))
(assert (! (fun_app$ (less$ (enat$ (suc$ na$ )))(llength$ (lconcat$ xssa$ ))):named a3 ))
(assert (! (fun_app$ (less$ (enat$ n$ ))(llength$ (lconcat$ xss$a ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (=> (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (= (lconcat$ xssa$ )(lCons$ ?v0 ?v1 ))false ))false ):named a7 ))
(assert (! (= xs$a (lappend$ xs$ (lconcat$ xss$ ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )(enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(=> (= (ldropn$ ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(fun_app$ (less$ (enat$ ?v0 ))(llength$a ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(=> (= (ldropn$a ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(fun_app$ (less$ (enat$ ?v0 ))(llength$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (pred_llist$ ?v0 (lCons$a ?v1 ?v2 ))(and (fun_app$a ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$a ?v1 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$a (pred_llist$a ?v0 )(lCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(fun_app$a (pred_llist$a ?v0 )?v2 ))):pattern ((fun_app$a (pred_llist$a ?v0 )(lCons$ ?v1 ?v2 ))))):named a14 ))
(assert (! (= xssa$ (lappend$a (llist_of$ xss$b )(lCons$a (lCons$ x$ xs$ )xss$ ))):named a15 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(fun_app$ (less$ (llength$a ?v0 ))(llength$a ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (fun_app$a (lstrict_prefix$a ?v0 )?v1 )(fun_app$ (less$ (llength$ ?v0 ))(llength$ ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (lmember$ ?v0 (lCons$a ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$ ?v0 ?v2 ))):pattern ((lmember$ ?v0 (lCons$a ?v1 ?v2 ))))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$a (lmember$a ?v0 )(lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(fun_app$a (lmember$a ?v0 )?v2 ))):pattern ((fun_app$a (lmember$a ?v0 )(lCons$ ?v1 ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(=> (= (ldrop$ ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(fun_app$ (less$ ?v0 )(llength$a ?v1 )))):named a21 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(=> (= (ldrop$a ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(fun_app$ (less$ ?v0 )(llength$ ?v1 )))):named a22 ))
(check-sat )
;(get-unsat-core )
