;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun xs$ ()A_llist$ )
(declare-fun bot$ ()Nat_set$ )
(declare-fun bot$a ()Nat_bool_fun$ )
(declare-fun bot$b ()Bool )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun gen_lset$ (A_set$ )A_llist_a_set_fun$ )
(declare-fun is_empty$ (Nat_set$ )Bool )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun finite_lprefix$ (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (= (lsublist$ xs$ bot$ )lNil$ )):named a0 ))
(assert (! (forall ((?v0 Nat_bool_fun$ ))(= (= (collect$ ?v0 )bot$ )(forall ((?v1 Nat$ ))(not (fun_app$ ?v0 ?v1 ))))):named a1 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (forall ((?v1 Nat$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$ ))):named a2 ))
(assert (! (forall ((?v0 Nat_bool_fun$ ))(= (= bot$ (collect$ ?v0 ))(forall ((?v1 Nat$ ))(not (fun_app$ ?v0 ?v1 ))))):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(= (member$ ?v0 bot$ )false )):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ bot$a ?v0 )bot$b ):pattern ((fun_app$ bot$a ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (exists ((?v1 Nat$ ))(member$ ?v1 ?v0 ))(not (= ?v0 bot$ )))):named a7 ))
(assert (! (forall ((?v0 Nat_set$ ))(=> (forall ((?v1 Nat$ ))(=> (member$ ?v1 ?v0 )false ))(= ?v0 bot$ ))):named a8 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat$ ))(=> (= ?v0 bot$ )(not (member$ ?v1 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(=> (member$ ?v0 bot$ )false )):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ bot$a ?v0 )bot$b ):pattern ((fun_app$ bot$a ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$b (gen_lset$ ?v0 )lNil$ )?v0 ):pattern ((gen_lset$ ?v0 )))):named a12 ))
(assert (! (= bot$ (collect$ bot$a )):named a13 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (is_empty$ ?v0 )(= ?v0 bot$ )):pattern ((is_empty$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ bot$a ?v0 )(member$ ?v0 bot$ )):pattern ((fun_app$ bot$a ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (finite_lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$a (finite_lprefix$ lNil$ )?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (finite_lprefix$ ?v0 )lNil$ )(= ?v0 lNil$ )):pattern ((finite_lprefix$ ?v0 )))):named a17 ))
(check-sat )
;(get-unsat-core )
