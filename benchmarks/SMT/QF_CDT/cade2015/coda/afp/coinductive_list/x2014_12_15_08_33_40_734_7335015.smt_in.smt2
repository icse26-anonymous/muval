;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_llist_set$ 0 )
(declare-sort A_llist_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_llist_llist_set$ 0 )
(declare-sort A_llist_llist_llist_llist_bool_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort A_llist_list$ 0)
(declare-fun nil$ ()A_llist_list$)
(declare-fun hd$ (A_llist_list$)A_llist$)
(declare-fun tl$ (A_llist_list$)A_llist_list$)
(declare-fun cons$ (A_llist$ A_llist_list$ )A_llist_list$)
(declare-codatatypes ()((A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))(A_llist_llist_llist$ (lNil$b )(lCons$b (lhd$b A_llist_llist$ )(ltl$b A_llist_llist_llist$ )))(A_llist_llist_llist_llist$ (lNil$c )(lCons$c (lhd$c A_llist_llist_llist$ )(ltl$c A_llist_llist_llist_llist$ )))))
(declare-sort A_llist_llist_llist_list$ 0)
(declare-sort A_llist_llist_list$ 0)
(declare-fun nil$a ()A_llist_llist_llist_list$)
(declare-fun hd$a (A_llist_llist_llist_list$)A_llist_llist_llist$)
(declare-fun tl$a (A_llist_llist_llist_list$)A_llist_llist_llist_list$)
(declare-fun cons$a (A_llist_llist_llist$ A_llist_llist_llist_list$ )A_llist_llist_llist_list$)
(declare-fun nil$b ()A_llist_llist_list$)
(declare-fun hd$b (A_llist_llist_list$)A_llist_llist$)
(declare-fun tl$b (A_llist_llist_list$)A_llist_llist_list$)
(declare-fun cons$b (A_llist_llist$ A_llist_llist_list$ )A_llist_llist_list$)
(declare-codatatypes ()((A_llist_llist_llist_llist_llist$ (lNil$d )(lCons$d (lhd$d A_llist_llist_llist_llist$ )(ltl$d A_llist_llist_llist_llist_llist$ )))))
(declare-sort A_llist_llist_llist_llist_list$ 0)
(declare-fun nil$c ()A_llist_llist_llist_llist_list$)
(declare-fun hd$c (A_llist_llist_llist_llist_list$)A_llist_llist_llist_llist$)
(declare-fun tl$c (A_llist_llist_llist_llist_list$)A_llist_llist_llist_llist_list$)
(declare-fun cons$c (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_list$ )A_llist_llist_llist_llist_list$)
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun set$ (A_llist_list$ )A_llist_set$ )
(declare-fun set$a (A_llist_llist_llist_llist_list$ )A_llist_llist_llist_llist_set$ )
(declare-fun set$b (A_llist_llist_llist_list$ )A_llist_llist_llist_set$ )
(declare-fun set$c (A_llist_llist_list$ )A_llist_llist_set$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun lnull$ ()A_llist_bool_fun$ )
(declare-fun lnull$a ()A_llist_llist_llist_llist_bool_fun$ )
(declare-fun lnull$b ()A_llist_llist_llist_bool_fun$ )
(declare-fun lnull$c ()A_llist_llist_bool_fun$ )
(declare-fun member$ (A_llist_llist_llist$ A_llist_llist_llist_set$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun collect$ (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_llist_llist_llist_bool_fun$ A_llist_llist_llist_llist$ )Bool )
(declare-fun lappend$ (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun less_eq$ (A_llist_set$ A_llist_set$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun member$a (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun member$b (A_llist$ A_llist_set$ )Bool )
(declare-fun collect$a (A_llist_llist_llist_llist_bool_fun$ )A_llist_llist_llist_llist_set$ )
(declare-fun collect$b (A_llist_llist_llist_bool_fun$ )A_llist_llist_llist_set$ )
(declare-fun collect$c (A_llist_llist_bool_fun$ )A_llist_llist_set$ )
(declare-fun fun_app$a (A_llist_llist_llist_bool_fun$ A_llist_llist_llist$ )Bool )
(declare-fun fun_app$b (A_llist_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lappend$a (A_llist$ A_llist$ )A_llist$ )
(declare-fun lappend$b (A_llist_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$ )
(declare-fun lappend$c (A_llist_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lappend$d (A_llist_llist_llist_llist_llist$ A_llist_llist_llist_llist_llist$ )A_llist_llist_llist_llist_llist$ )
(declare-fun lconcat$a (A_llist_llist_llist_llist_llist$ )A_llist_llist_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$c (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun less_eq$a (A_llist_llist_llist_llist_set$ A_llist_llist_llist_llist_set$ )Bool )
(declare-fun less_eq$b (A_llist_llist_llist_set$ A_llist_llist_llist_set$ )Bool )
(declare-fun less_eq$c (A_llist_llist_set$ A_llist_llist_set$ )Bool )
(declare-fun llist_of$ (A_llist_list$ )A_llist_llist$ )
(declare-fun llist_of$a (A_llist_llist_llist_list$ )A_llist_llist_llist_llist$ )
(declare-fun llist_of$b (A_llist_llist_list$ )A_llist_llist_llist$ )
(declare-fun llist_of$c (A_llist_llist_llist_llist_list$ )A_llist_llist_llist_llist_llist$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(=> (and (= xssa$ (lappend$ (llist_of$ ?v0 )(lCons$a (lCons$ x$ ?v1 )?v2 )))(and (= xs$ (lappend$a ?v1 (lconcat$ ?v2 )))(less_eq$ (set$ ?v0 )(collect$ lnull$ ))))thesis$ )):named a1 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ )(?v2 A_llist_llist_llist$ )(?v3 A_llist_llist_llist_llist$ ))(= (= (lCons$c ?v0 ?v1 )(lCons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_llist_llist_llist_list$ )(?v1 A_llist_llist_llist_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist_llist_list$ )(?v1 A_llist_llist_list$ ))(= (= (llist_of$b ?v0 )(llist_of$b ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ )(?v2 A_llist_llist_llist_llist$ ))(! (= (lappend$b (lCons$c ?v0 ?v1 )?v2 )(lCons$c ?v0 (lappend$b ?v1 ?v2 ))):pattern ((lappend$b (lCons$c ?v0 ?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (lappend$c (lCons$b ?v0 ?v1 )?v2 )(lCons$b ?v0 (lappend$c ?v1 ?v2 ))):pattern ((lappend$c (lCons$b ?v0 ?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(! (= (lappend$ (lCons$a ?v0 ?v1 )?v2 )(lCons$a ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$a ?v0 ?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$a (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$a ?v1 ?v2 ))):pattern ((lappend$a (lCons$ ?v0 ?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ ))(= (not (fun_app$ lnull$a (lappend$b ?v0 ?v1 )))(or (not (fun_app$ lnull$a ?v0 ))(not (fun_app$ lnull$a ?v1 ))))):named a13 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(= (not (fun_app$a lnull$b (lappend$c ?v0 ?v1 )))(or (not (fun_app$a lnull$b ?v0 ))(not (fun_app$a lnull$b ?v1 ))))):named a14 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (not (fun_app$b lnull$c (lappend$ ?v0 ?v1 )))(or (not (fun_app$b lnull$c ?v0 ))(not (fun_app$b lnull$c ?v1 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (fun_app$c lnull$ (lappend$a ?v0 ?v1 )))(or (not (fun_app$c lnull$ ?v0 ))(not (fun_app$c lnull$ ?v1 ))))):named a16 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ ))(= (fun_app$ lnull$a (lappend$b ?v0 ?v1 ))(and (fun_app$ lnull$a ?v0 )(fun_app$ lnull$a ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(= (fun_app$a lnull$b (lappend$c ?v0 ?v1 ))(and (fun_app$a lnull$b ?v0 )(fun_app$a lnull$b ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (fun_app$b lnull$c (lappend$ ?v0 ?v1 ))(and (fun_app$b lnull$c ?v0 )(fun_app$b lnull$c ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (fun_app$c lnull$ (lappend$a ?v0 ?v1 ))(and (fun_app$c lnull$ ?v0 )(fun_app$c lnull$ ?v1 )))):named a20 ))
(assert (! (= (lconcat$ xssa$ )(lCons$ x$ xs$ )):named a21 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist_llist$ ))(! (= (lconcat$a (lCons$d ?v0 ?v1 ))(lappend$b ?v0 (lconcat$a ?v1 ))):pattern ((lCons$d ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ ))(! (= (lconcat$b (lCons$c ?v0 ?v1 ))(lappend$c ?v0 (lconcat$b ?v1 ))):pattern ((lCons$c ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lconcat$c (lCons$b ?v0 ?v1 ))(lappend$ ?v0 (lconcat$c ?v1 ))):pattern ((lCons$b ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lconcat$ (lCons$a ?v0 ?v1 ))(lappend$a ?v0 (lconcat$ ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a25 ))
(assert (! (lfinite$ xs$ ):named a26 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ )(?v2 A_llist_llist_llist_llist$ ))(= (lappend$b (lappend$b ?v0 ?v1 )?v2 )(lappend$b ?v0 (lappend$b ?v1 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(= (lappend$c (lappend$c ?v0 ?v1 )?v2 )(lappend$c ?v0 (lappend$c ?v1 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$a (lappend$a ?v0 ?v1 )?v2 )(lappend$a ?v0 (lappend$a ?v1 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist_llist$ ))(= (= (lconcat$a ?v0 )(lCons$c ?v1 ?v2 ))(exists ((?v3 A_llist_llist_llist_llist$ )(?v4 A_llist_llist_llist_llist_list$ )(?v5 A_llist_llist_llist_llist_llist$ ))(and (= ?v0 (lappend$d (llist_of$c ?v4 )(lCons$d (lCons$c ?v1 ?v3 )?v5 )))(and (= ?v2 (lappend$b ?v3 (lconcat$a ?v5 )))(less_eq$a (set$a ?v4 )(collect$a lnull$a ))))))):named a31 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(= (= (lconcat$b ?v0 )(lCons$b ?v1 ?v2 ))(exists ((?v3 A_llist_llist_llist$ )(?v4 A_llist_llist_llist_list$ )(?v5 A_llist_llist_llist_llist$ ))(and (= ?v0 (lappend$b (llist_of$a ?v4 )(lCons$c (lCons$b ?v1 ?v3 )?v5 )))(and (= ?v2 (lappend$c ?v3 (lconcat$b ?v5 )))(less_eq$b (set$b ?v4 )(collect$b lnull$b ))))))):named a32 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(= (= (lconcat$c ?v0 )(lCons$a ?v1 ?v2 ))(exists ((?v3 A_llist_llist$ )(?v4 A_llist_llist_list$ )(?v5 A_llist_llist_llist$ ))(and (= ?v0 (lappend$c (llist_of$b ?v4 )(lCons$b (lCons$a ?v1 ?v3 )?v5 )))(and (= ?v2 (lappend$ ?v3 (lconcat$c ?v5 )))(less_eq$c (set$c ?v4 )(collect$c lnull$c ))))))):named a33 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A$ )(?v2 A_llist$ ))(= (= (lconcat$ ?v0 )(lCons$ ?v1 ?v2 ))(exists ((?v3 A_llist$ )(?v4 A_llist_list$ )(?v5 A_llist_llist$ ))(and (= ?v0 (lappend$ (llist_of$ ?v4 )(lCons$a (lCons$ ?v1 ?v3 )?v5 )))(and (= ?v2 (lappend$a ?v3 (lconcat$ ?v5 )))(less_eq$ (set$ ?v4 )(collect$ lnull$ ))))))):named a34 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ ))(= (not (fun_app$ lnull$a ?v0 ))(exists ((?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist_llist$ ))(= ?v0 (lCons$c ?v1 ?v2 ))))):named a35 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(= (not (fun_app$a lnull$b ?v0 ))(exists ((?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(= ?v0 (lCons$b ?v1 ?v2 ))))):named a36 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (not (fun_app$b lnull$c ?v0 ))(exists ((?v1 A_llist$ )(?v2 A_llist_llist$ ))(= ?v0 (lCons$a ?v1 ?v2 ))))):named a37 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (fun_app$c lnull$ ?v0 ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a38 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (or (fun_app$c lnull$ ?v0 )(fun_app$a lnull$b ?v1 ))false )(=> (and (not (fun_app$c lnull$ ?v0 ))(not (fun_app$a lnull$b ?v1 )))false ))false )):named a39 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (or (fun_app$b lnull$c ?v0 )(fun_app$a lnull$b ?v1 ))false )(=> (and (not (fun_app$b lnull$c ?v0 ))(not (fun_app$a lnull$b ?v1 )))false ))false )):named a40 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (fun_app$a lnull$b ?v0 )(fun_app$c lnull$ ?v1 ))false )(=> (and (not (fun_app$a lnull$b ?v0 ))(not (fun_app$c lnull$ ?v1 )))false ))false )):named a41 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (fun_app$a lnull$b ?v0 )(fun_app$b lnull$c ?v1 ))false )(=> (and (not (fun_app$a lnull$b ?v0 ))(not (fun_app$b lnull$c ?v1 )))false ))false )):named a42 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (or (fun_app$a lnull$b ?v0 )(fun_app$a lnull$b ?v1 ))false )(=> (and (not (fun_app$a lnull$b ?v0 ))(not (fun_app$a lnull$b ?v1 )))false ))false )):named a43 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (fun_app$c lnull$ ?v0 )(fun_app$b lnull$c ?v1 ))false )(=> (and (not (fun_app$c lnull$ ?v0 ))(not (fun_app$b lnull$c ?v1 )))false ))false )):named a44 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (fun_app$b lnull$c ?v0 )(fun_app$c lnull$ ?v1 ))false )(=> (and (not (fun_app$b lnull$c ?v0 ))(not (fun_app$c lnull$ ?v1 )))false ))false )):named a45 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (fun_app$b lnull$c ?v0 )(fun_app$b lnull$c ?v1 ))false )(=> (and (not (fun_app$b lnull$c ?v0 ))(not (fun_app$b lnull$c ?v1 )))false ))false )):named a46 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (fun_app$c lnull$ ?v0 )(fun_app$c lnull$ ?v1 ))false )(=> (and (not (fun_app$c lnull$ ?v0 ))(not (fun_app$c lnull$ ?v1 )))false ))false )):named a47 ))
(assert (! (forall ((?v0 A_llist_llist_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist_llist_llist$ ))(=> (member$ ?v1 ?v0 )(fun_app$a lnull$b ?v1 )))false )(=> (not (forall ((?v1 A_llist_llist_llist$ ))(=> (member$ ?v1 ?v0 )(fun_app$a lnull$b ?v1 ))))false ))false )):named a48 ))
(assert (! (forall ((?v0 A_llist_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(fun_app$b lnull$c ?v1 )))false )(=> (not (forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(fun_app$b lnull$c ?v1 ))))false ))false )):named a49 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$b ?v1 ?v0 )(fun_app$c lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$b ?v1 ?v0 )(fun_app$c lnull$ ?v1 ))))false ))false )):named a50 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (and (fun_app$a lnull$b ?v0 )(fun_app$a lnull$b ?v1 ))false )(=> (or (not (fun_app$a lnull$b ?v0 ))(not (fun_app$a lnull$b ?v1 )))false ))false )):named a51 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (and (fun_app$b lnull$c ?v0 )(fun_app$b lnull$c ?v1 ))false )(=> (or (not (fun_app$b lnull$c ?v0 ))(not (fun_app$b lnull$c ?v1 )))false ))false )):named a52 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (fun_app$c lnull$ ?v0 )(fun_app$c lnull$ ?v1 ))false )(=> (or (not (fun_app$c lnull$ ?v0 ))(not (fun_app$c lnull$ ?v1 )))false ))false )):named a53 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(=> (and (=> (fun_app$a lnull$b ?v0 )false )(=> (not (fun_app$a lnull$b ?v0 ))false ))false )):named a54 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (and (=> (fun_app$b lnull$c ?v0 )false )(=> (not (fun_app$b lnull$c ?v0 ))false ))false )):named a55 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (fun_app$c lnull$ ?v0 )false )(=> (not (fun_app$c lnull$ ?v0 ))false ))false )):named a56 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist_llist$ ))(=> (= ?v0 (lCons$c ?v1 ?v2 ))(not (fun_app$ lnull$a ?v0 )))):named a57 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(=> (= ?v0 (lCons$b ?v1 ?v2 ))(not (fun_app$a lnull$b ?v0 )))):named a58 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(=> (= ?v0 (lCons$a ?v1 ?v2 ))(not (fun_app$b lnull$c ?v0 )))):named a59 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))(not (fun_app$c lnull$ ?v0 )))):named a60 ))
(check-sat )
;(get-unsat-core )
