;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun xs$ ()A_llist$ )
(declare-fun ya$ ()A_llist_set$ )
(declare-fun max$ (A_a_bool_fun_fun$ A$ A$ )A$ )
(declare-fun min$ (A_a_bool_fun_fun$ A$ A$ )A$ )
(declare-fun lSup$ (A_llist_set$ )A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun less_eq$ ()A_a_bool_fun_fun$ )
(declare-fun lsorted$ (A_a_bool_fun_fun$ A_llist$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun atLeastAtMost$ (A_a_bool_fun_fun$ A$ A$ )A_set$ )
(assert (! (not (fun_app$ (fun_app$a less_eq$ (lhd$ (lSup$ ya$ )))(lhd$ (ltl$ (lSup$ ya$ ))))):named a0 ))
(assert (! (member$ xs$ ya$ ):named a1 ))
(assert (! (fun_app$ (fun_app$a less_eq$ (lhd$ xs$ ))(lhd$ (ltl$ xs$ ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less_eq$ ?v1 )?v2 ))(fun_app$ (fun_app$a less_eq$ ?v0 )?v2 ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less_eq$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less_eq$ ?v0 )?v2 ))):named a4 ))
(assert (! (= (lhd$ (lSup$ ya$ ))(lhd$ xs$ )):named a5 ))
(assert (! (= (lhd$ (ltl$ (lSup$ ya$ )))(lhd$ (ltl$ xs$ ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (max$ less_eq$ ?v0 ?v1 )(ite (fun_app$ (fun_app$a less_eq$ ?v0 )?v1 )?v1 ?v0 )):pattern ((max$ less_eq$ ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (min$ less_eq$ ?v0 ?v1 )(ite (fun_app$ (fun_app$a less_eq$ ?v0 )?v1 )?v0 ?v1 )):pattern ((min$ less_eq$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$ ?v0 ya$ )(lsorted$ less_eq$ ?v0 ))):named a9 ))
(assert (! (not (lnull$ (lSup$ ya$ ))):named a10 ))
(assert (! (not (lnull$ (ltl$ (lSup$ ya$ )))):named a11 ))
(assert (! (not (lnull$ (ltl$ xs$ ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$ ?v0 ya$ )(lsorted$ less_eq$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lsorted$ less_eq$ ?v0 )(lsorted$ less_eq$ (ltl$ ?v0 )))):named a14 ))
(assert (! (=> (forall ((?v0 A_llist$ ))(=> (and (member$ ?v0 ya$ )(and (not (lnull$ ?v0 ))(not (lnull$ (ltl$ ?v0 )))))false ))false ):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (member$a ?v0 (atLeastAtMost$ less_eq$ ?v1 ?v2 ))(and (fun_app$ (fun_app$a less_eq$ ?v1 )?v0 )(fun_app$ (fun_app$a less_eq$ ?v0 )?v2 )))):named a16 ))
(assert (! (not (lnull$ xs$ )):named a17 ))
(check-sat )
;(get-unsat-core )
