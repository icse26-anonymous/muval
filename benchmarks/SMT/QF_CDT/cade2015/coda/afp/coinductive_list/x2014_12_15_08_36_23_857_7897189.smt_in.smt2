;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-sort B_llist_b_set_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun uu$ ()B_b_bool_fun_fun$ )
(declare-fun uua$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun uub$ ()A_a_bool_fun_fun$ )
(declare-fun uuc$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$f (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$h (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$i (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$j (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun fun_app$k (B_llist_b_set_fun$ B_llist$ )B_set$ )
(declare-fun gen_lset$ (A_set$ )A_llist_a_set_fun$ )
(declare-fun lmember$a (B$ )B_llist_bool_fun$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun gen_lset$a (B_set$ )B_llist_b_set_fun$ )
(declare-fun lsublist$a (B_llist$ Nat_set$ )B_llist$ )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun llist_all2$a (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (B_a_bool_fun_fun$ B_llist$ )A_llist_bool_fun$ )
(declare-fun llist_all2$c (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun pred_llist$a (B_bool_fun$ B_llist$ )Bool )
(declare-fun finite_lprefix$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(declare-fun finite_lprefix$a (B_llist$ )B_llist_bool_fun$ )
(declare-fun lstrict_prefix$a (B_llist$ B_llist$ )Bool )
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uuc$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$d (fun_app$e uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uu$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$f (fun_app$g uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uub$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (fun_app$ (llist_all2$ p$ lNil$ )lNil$a )):named a4 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )lNil$ )(= ?v1 lNil$ )):pattern ((fun_app$c (llist_all2$a ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$b (llist_all2$b ?v0 ?v1 )lNil$ )(= ?v1 lNil$a )):pattern ((llist_all2$b ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a (llist_all2$c ?v0 )?v1 )lNil$a )(= ?v1 lNil$a )):pattern ((fun_app$a (llist_all2$c ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$ (llist_all2$ ?v0 ?v1 )lNil$a )(= ?v1 lNil$ )):pattern ((llist_all2$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c (llist_all2$a ?v0 )lNil$ )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$b (fun_app$c (llist_all2$a ?v0 )lNil$ )?v1 )))):named a9 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 A_llist$ ))(! (= (fun_app$b (llist_all2$b ?v0 lNil$a )?v1 )(= ?v1 lNil$ )):pattern ((fun_app$b (llist_all2$b ?v0 lNil$a )?v1 )))):named a10 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a (llist_all2$c ?v0 )lNil$a )?v1 )(= ?v1 lNil$a )):pattern ((fun_app$ (fun_app$a (llist_all2$c ?v0 )lNil$a )?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 B_llist$ ))(! (= (fun_app$ (llist_all2$ ?v0 lNil$ )?v1 )(= ?v1 lNil$a )):pattern ((fun_app$ (llist_all2$ ?v0 lNil$ )?v1 )))):named a12 ))
(assert (! (= (llist_all2$c uu$ )uua$ ):named a13 ))
(assert (! (= (llist_all2$a uub$ )uuc$ ):named a14 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$c ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 B$ ))(=> (fun_app$d (fun_app$e ?v0 ?v4 )?v5 )(fun_app$d (fun_app$e ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$a (llist_all2$c ?v3 )?v1 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (fun_app$b (llist_all2$b ?v0 ?v1 )?v2 )(forall ((?v4 B$ )(?v5 A$ ))(=> (fun_app$f (fun_app$h ?v0 ?v4 )?v5 )(fun_app$f (fun_app$h ?v3 ?v4 )?v5 ))))(fun_app$b (llist_all2$b ?v3 ?v1 )?v2 ))):named a16 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (fun_app$f (fun_app$g ?v0 ?v4 )?v5 )(fun_app$f (fun_app$g ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$c (llist_all2$a ?v3 )?v1 )?v2 ))):named a17 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$ (llist_all2$ ?v0 ?v1 )?v2 )(forall ((?v4 A$ )(?v5 B$ ))(=> (fun_app$d (fun_app$i ?v0 ?v4 )?v5 )(fun_app$d (fun_app$i ?v3 ?v4 )?v5 ))))(fun_app$ (llist_all2$ ?v3 ?v1 )?v2 ))):named a18 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ ))(fun_app$b (fun_app$c (llist_all2$a ?v0 )lNil$ )lNil$ )):named a19 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ ))(fun_app$b (llist_all2$b ?v0 lNil$a )lNil$ )):named a20 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ ))(fun_app$ (fun_app$a (llist_all2$c ?v0 )lNil$a )lNil$a )):named a21 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ ))(fun_app$ (llist_all2$ ?v0 lNil$ )lNil$a )):named a22 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a23 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ (lmember$a ?v0 )lNil$a )false ):pattern ((lmember$a ?v0 )))):named a24 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$j (gen_lset$ ?v0 )lNil$ )?v0 ):pattern ((gen_lset$ ?v0 )))):named a25 ))
(assert (! (forall ((?v0 B_set$ ))(! (= (fun_app$k (gen_lset$a ?v0 )lNil$a )?v0 ):pattern ((gen_lset$a ?v0 )))):named a26 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (finite_lprefix$ ?v0 )lNil$ )(= ?v0 lNil$ )):pattern ((finite_lprefix$ ?v0 )))):named a27 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$ (finite_lprefix$a ?v0 )lNil$a )(= ?v0 lNil$a )):pattern ((finite_lprefix$a ?v0 )))):named a28 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (finite_lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$b (finite_lprefix$ lNil$ )?v0 )))):named a29 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$ (finite_lprefix$a lNil$a )?v0 )true ):pattern ((fun_app$ (finite_lprefix$a lNil$a )?v0 )))):named a30 ))
(assert (! (= (lstrict_prefix$ lNil$ lNil$ )false ):named a31 ))
(assert (! (= (lstrict_prefix$a lNil$a lNil$a )false ):named a32 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_llist$ ?v0 lNil$ )):named a33 ))
(assert (! (forall ((?v0 B_bool_fun$ ))(pred_llist$a ?v0 lNil$a )):named a34 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(and (=> (and (= ?v1 lNil$ )(= ?v2 lNil$ ))false )(forall ((?v3 A$ )(?v4 A_llist$ )(?v5 A$ )(?v6 A_llist$ ))(=> (and (= ?v1 (lCons$ ?v3 ?v4 ))(and (= ?v2 (lCons$ ?v5 ?v6 ))(and (fun_app$f (fun_app$g ?v0 ?v3 )?v5 )(fun_app$b (fun_app$c (llist_all2$a ?v0 )?v4 )?v6 ))))false ))))false )):named a35 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$b (llist_all2$b ?v0 ?v1 )?v2 )(and (=> (and (= ?v1 lNil$a )(= ?v2 lNil$ ))false )(forall ((?v3 B$ )(?v4 B_llist$ )(?v5 A$ )(?v6 A_llist$ ))(=> (and (= ?v1 (lCons$a ?v3 ?v4 ))(and (= ?v2 (lCons$ ?v5 ?v6 ))(and (fun_app$f (fun_app$h ?v0 ?v3 )?v5 )(fun_app$b (llist_all2$b ?v0 ?v4 )?v6 ))))false ))))false )):named a36 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$c ?v0 )?v1 )?v2 )(and (=> (and (= ?v1 lNil$a )(= ?v2 lNil$a ))false )(forall ((?v3 B$ )(?v4 B_llist$ )(?v5 B$ )(?v6 B_llist$ ))(=> (and (= ?v1 (lCons$a ?v3 ?v4 ))(and (= ?v2 (lCons$a ?v5 ?v6 ))(and (fun_app$d (fun_app$e ?v0 ?v3 )?v5 )(fun_app$ (fun_app$a (llist_all2$c ?v0 )?v4 )?v6 ))))false ))))false )):named a37 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$ (llist_all2$ ?v0 ?v1 )?v2 )(and (=> (and (= ?v1 lNil$ )(= ?v2 lNil$a ))false )(forall ((?v3 A$ )(?v4 A_llist$ )(?v5 B$ )(?v6 B_llist$ ))(=> (and (= ?v1 (lCons$ ?v3 ?v4 ))(and (= ?v2 (lCons$a ?v5 ?v6 ))(and (fun_app$d (fun_app$i ?v0 ?v3 )?v5 )(fun_app$ (llist_all2$ ?v0 ?v4 )?v6 ))))false ))))false )):named a38 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(and (=> (and (= ?v1 lNil$ )(= ?v2 lNil$ ))false )(forall ((?v3 A$ )(?v4 A_llist$ )(?v5 A$ )(?v6 A_llist$ ))(=> (and (= ?v1 (lCons$ ?v3 ?v4 ))(and (= ?v2 (lCons$ ?v5 ?v6 ))(and (fun_app$f (fun_app$g ?v0 ?v3 )?v5 )(fun_app$b (fun_app$c (llist_all2$a ?v0 )?v4 )?v6 ))))false ))))false )):named a39 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$b (llist_all2$b ?v0 ?v1 )?v2 )(and (=> (and (= ?v1 lNil$a )(= ?v2 lNil$ ))false )(forall ((?v3 B$ )(?v4 B_llist$ )(?v5 A$ )(?v6 A_llist$ ))(=> (and (= ?v1 (lCons$a ?v3 ?v4 ))(and (= ?v2 (lCons$ ?v5 ?v6 ))(and (fun_app$f (fun_app$h ?v0 ?v3 )?v5 )(fun_app$b (llist_all2$b ?v0 ?v4 )?v6 ))))false ))))false )):named a40 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$c ?v0 )?v1 )?v2 )(and (=> (and (= ?v1 lNil$a )(= ?v2 lNil$a ))false )(forall ((?v3 B$ )(?v4 B_llist$ )(?v5 B$ )(?v6 B_llist$ ))(=> (and (= ?v1 (lCons$a ?v3 ?v4 ))(and (= ?v2 (lCons$a ?v5 ?v6 ))(and (fun_app$d (fun_app$e ?v0 ?v3 )?v5 )(fun_app$ (fun_app$a (llist_all2$c ?v0 )?v4 )?v6 ))))false ))))false )):named a41 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$ (llist_all2$ ?v0 ?v1 )?v2 )(and (=> (and (= ?v1 lNil$ )(= ?v2 lNil$a ))false )(forall ((?v3 A$ )(?v4 A_llist$ )(?v5 B$ )(?v6 B_llist$ ))(=> (and (= ?v1 (lCons$ ?v3 ?v4 ))(and (= ?v2 (lCons$a ?v5 ?v6 ))(and (fun_app$d (fun_app$i ?v0 ?v3 )?v5 )(fun_app$ (llist_all2$ ?v0 ?v4 )?v6 ))))false ))))false )):named a42 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ ))(not (fun_app$ (fun_app$a (llist_all2$c ?v0 )(lCons$a ?v1 ?v2 ))lNil$a ))):named a43 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ ))(not (fun_app$b (llist_all2$b ?v0 (lCons$a ?v1 ?v2 ))lNil$ ))):named a44 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ ))(not (fun_app$b (fun_app$c (llist_all2$a ?v0 )(lCons$ ?v1 ?v2 ))lNil$ ))):named a45 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ ))(not (fun_app$ (llist_all2$ ?v0 (lCons$ ?v1 ?v2 ))lNil$a ))):named a46 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ ))(not (fun_app$ (fun_app$a (llist_all2$c ?v0 )lNil$a )(lCons$a ?v1 ?v2 )))):named a47 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ ))(not (fun_app$b (llist_all2$b ?v0 lNil$a )(lCons$ ?v1 ?v2 )))):named a48 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ ))(not (fun_app$b (fun_app$c (llist_all2$a ?v0 )lNil$ )(lCons$ ?v1 ?v2 )))):named a49 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 B$ )(?v2 B_llist$ ))(not (fun_app$ (llist_all2$ ?v0 lNil$ )(lCons$a ?v1 ?v2 )))):named a50 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$ lNil$ ?v0 )lNil$ ):pattern ((lsublist$ lNil$ ?v0 )))):named a51 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$a lNil$a ?v0 )lNil$a ):pattern ((lsublist$a lNil$a ?v0 )))):named a52 ))
(check-sat )
;(get-unsat-core )
