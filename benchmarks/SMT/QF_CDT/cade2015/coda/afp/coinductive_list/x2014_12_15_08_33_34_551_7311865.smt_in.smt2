;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Nat$ )
(declare-fun w$ ()Nat$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lmap$ (A_llist_a_fun$ A_llist_llist$ )A_llist$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun lmap$a (A_llist_a_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lmap$b (A_a_llist_fun$ A_llist$ )A_llist_llist$ )
(declare-fun lmap$c (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lnth$a (A_llist_llist$ Nat$ )A_llist$ )
(declare-fun ltake$ (Enat$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun ltake$a (Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (A_llist_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_llist_a_fun$ A_llist$ )A$ )
(declare-fun fun_app$c (A_a_llist_fun$ A$ )A_llist$ )
(declare-fun fun_app$d (A_a_fun$ A$ )A$ )
(declare-fun llength$a (A_llist_llist$ )Enat$ )
(declare-fun lprefix$a (A_llist_llist$ A_llist_llist$ )Bool )
(declare-fun ldistinct$ (A_llist_llist$ )Bool )
(declare-fun ldistinct$a (A_llist$ )Bool )
(assert (! (not (= (lnth$ (lconcat$ (fun_app$ (ltake$ (enat$ n$ ))xss$ ))w$ )(lnth$ (lconcat$ xss$ )w$ ))):named a0 ))
(assert (! (less$ (enat$ w$ )(llength$ (lconcat$ (fun_app$ (ltake$ (enat$ n$ ))xss$ )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(= (fun_app$a (ltake$a (enat$ ?v2 ))?v0 )(fun_app$a (ltake$a (enat$ ?v2 ))?v1 )))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (forall ((?v2 Nat$ ))(= (fun_app$ (ltake$ (enat$ ?v2 ))?v0 )(fun_app$ (ltake$ (enat$ ?v2 ))?v1 )))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )?v1 )(= (lnth$ (fun_app$a (ltake$a ?v1 )?v2 )?v0 )(lnth$ ?v2 ?v0 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 A_llist_llist$ ))(=> (less$ (enat$ ?v0 )?v1 )(= (lnth$a (fun_app$ (ltake$ ?v1 )?v2 )?v0 )(lnth$a ?v2 ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(lprefix$ (fun_app$a (ltake$a (enat$ ?v2 ))?v0 )(fun_app$a (ltake$a (enat$ ?v2 ))?v1 )))(lprefix$ ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (forall ((?v2 Nat$ ))(lprefix$a (fun_app$ (ltake$ (enat$ ?v2 ))?v0 )(fun_app$ (ltake$ (enat$ ?v2 ))?v1 )))(lprefix$a ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (ldistinct$ ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$a ?v0 ))(and (less$ (enat$ ?v2 )(llength$a ?v0 ))(not (= ?v1 ?v2 ))))(not (= (lnth$a ?v0 ?v1 )(lnth$a ?v0 ?v2 ))))))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ldistinct$a ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ (enat$ ?v1 )(llength$ ?v0 ))(and (less$ (enat$ ?v2 )(llength$ ?v0 ))(not (= ?v1 ?v2 ))))(not (= (lnth$ ?v0 ?v1 )(lnth$ ?v0 ?v2 ))))))):named a11 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$a (ltake$a ?v0 )lNil$ )lNil$ ):pattern ((ltake$a ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ltake$ ?v0 )lNil$a )lNil$a ):pattern ((ltake$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(lprefix$ (fun_app$a (ltake$a ?v0 )?v1 )?v1 )):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_llist$ ))(lprefix$a (fun_app$ (ltake$ ?v0 )?v1 )?v1 )):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_fun$ ))(=> (less$ (enat$ ?v0 )(llength$a ?v1 ))(= (lnth$ (lmap$ ?v2 ?v1 )?v0 )(fun_app$b ?v2 (lnth$a ?v1 ?v0 ))))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_llist$ )(?v2 A_llist_a_llist_fun$ ))(=> (less$ (enat$ ?v0 )(llength$a ?v1 ))(= (lnth$a (lmap$a ?v2 ?v1 )?v0 )(fun_app$a ?v2 (lnth$a ?v1 ?v0 ))))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_llist_fun$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (lnth$a (lmap$b ?v2 ?v1 )?v0 )(fun_app$c ?v2 (lnth$ ?v1 ?v0 ))))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (lnth$ (fun_app$a (lmap$c ?v2 )?v1 )?v0 )(fun_app$d ?v2 (lnth$ ?v1 ?v0 ))))):named a19 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 Nat$ ))(=> (and (lprefix$a ?v0 ?v1 )(less$ (enat$ ?v2 )(llength$a ?v0 )))(= (lnth$a ?v0 ?v2 )(lnth$a ?v1 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 Nat$ ))(=> (and (lprefix$ ?v0 ?v1 )(less$ (enat$ ?v2 )(llength$ ?v0 )))(= (lnth$ ?v0 ?v2 )(lnth$ ?v1 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(lprefix$a ?v0 ?v0 )):named a22 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a23 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(lprefix$a ?v0 ?v0 )):named a24 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a25 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$ lNil$ ?v0 )true ):pattern ((lprefix$ lNil$ ?v0 )))):named a26 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (lprefix$a lNil$a ?v0 )true ):pattern ((lprefix$a lNil$a ?v0 )))):named a27 ))
(check-sat )
;(get-unsat-core )
