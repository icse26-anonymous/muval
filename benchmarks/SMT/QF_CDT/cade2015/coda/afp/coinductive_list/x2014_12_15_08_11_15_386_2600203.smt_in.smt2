;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun y$ ()A_llist_set$ )
(declare-fun uu$ ()A_llist_a_llist_fun$ )
(declare-fun bot$ ()A_llist_set$ )
(declare-fun lSup$ (A_llist_set$ )A_llist$ )
(declare-fun image$ (A_llist_a_llist_fun$ A_llist_set$ )A_llist_set$ )
(declare-fun insert$ (A_llist$ A_llist_set$ )A_llist_set$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun collect$ (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uu$ ?v0 )(ltl$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (lSup$ (insert$ lNil$ (image$ uu$ y$ )))(lSup$ (image$ uu$ y$ )))):named a1 ))
(assert (! (not (= y$ bot$ )):named a2 ))
(assert (! (= (ltl$ (lSup$ y$ ))(lSup$ (insert$ lNil$ (image$ uu$ y$ )))):named a3 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (lSup$ (insert$ lNil$ ?v0 ))(lSup$ ?v0 ))):named a4 ))
(assert (! (= (ltl$ lNil$ )lNil$ ):named a5 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist$ )(?v2 A_llist_set$ ))(= (image$ ?v0 (insert$ ?v1 ?v2 ))(insert$ (fun_app$ ?v0 ?v1 )(image$ ?v0 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_a_llist_fun$ ))(=> (member$ ?v0 ?v1 )(= (insert$ (fun_app$ ?v2 ?v0 )(image$ ?v2 ?v1 ))(image$ ?v2 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_set$ ))(= (member$ ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$ ?v2 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ )(?v3 A_llist_set$ ))(=> (and (= ?v0 (fun_app$ ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$ ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lSup$ (insert$ ?v0 bot$ ))?v0 )):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_set$ ))(= (insert$ ?v0 (insert$ ?v1 ?v2 ))(insert$ ?v1 (insert$ ?v0 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_set$ ))(=> (and (member$ ?v0 (insert$ ?v1 ?v2 ))(and (=> (= ?v0 ?v1 )false )(=> (member$ ?v0 ?v2 )false )))false )):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ ))(=> (and (member$ ?v0 ?v1 )(forall ((?v2 A_llist_set$ ))(=> (and (= ?v1 (insert$ ?v0 ?v2 ))(not (member$ ?v0 ?v2 )))false )))false )):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ ))(! (=> (member$ ?v0 ?v1 )(= (insert$ ?v0 ?v1 )?v1 )):pattern ((insert$ ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(= (= (collect$ ?v0 )bot$ )(forall ((?v1 A_llist$ ))(not (fun_app$a ?v0 ?v1 ))))):named a18 ))
(check-sat )
;(get-unsat-core )
