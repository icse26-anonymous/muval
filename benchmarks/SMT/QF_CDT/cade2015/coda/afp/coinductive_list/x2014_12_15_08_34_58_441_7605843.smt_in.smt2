;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun zero$ ()Enat$ )
(declare-fun ldrop$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun minus$ (Enat$ Enat$ )Enat$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(assert (! (not (= xs$ (lappend$ (ltake$ (enat$ n$ )xs$ )(fun_app$ (ldrop$ (enat$ n$ ))xs$ )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a1 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (lappend$ (ltake$ ?v0 ?v1 )(fun_app$ (ldrop$ ?v0 )?v1 ))?v1 )):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a3 ))
(assert (! (less_eq$ (enat$ n$ )(llength$ xs$ )):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lappend$ (ltake$ (enat$ ?v0 )?v1 )(ldropn$ ?v0 ?v1 ))?v1 )):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (ltake$ (plus$ ?v0 ?v1 )?v2 )(lappend$ (ltake$ ?v0 ?v2 )(ltake$ ?v1 (fun_app$ (ldrop$ ?v0 )?v2 ))))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(! (= (fun_app$ (ldrop$ (enat$ ?v0 ))?v1 )(ldropn$ ?v0 ?v1 )):pattern ((fun_app$ (ldrop$ (enat$ ?v0 ))?v1 )))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (ltake$ ?v0 (fun_app$ (ldrop$ ?v1 )?v2 ))(fun_app$ (ldrop$ ?v1 )(ltake$ (plus$ ?v0 ?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(ltake$ ?v1 ?v2 ))(ltake$ (minus$ ?v1 ?v0 )(fun_app$ (ldrop$ ?v0 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(lprefix$ (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(lprefix$ ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$ (ldrop$ zero$ )?v0 )?v0 )):named a12 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ldrop$ ?v0 )lNil$ )lNil$ ):pattern ((ldrop$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(fun_app$ (ldrop$ ?v1 )?v2 ))(fun_app$ (ldrop$ (plus$ ?v0 ?v1 ))?v2 ))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a16 ))
(check-sat )
;(get-unsat-core )
