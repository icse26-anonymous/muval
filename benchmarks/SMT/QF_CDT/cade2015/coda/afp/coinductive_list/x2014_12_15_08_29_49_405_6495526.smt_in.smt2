;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_bool_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun uua$ (A_llist_a_llist_fun$ )A_bool_fun_a_llist_a_llist_fun_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lfilter$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_bool_fun_a_llist_a_llist_fun_fun$ A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$d (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun monotone$ (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )(fun_app$ (lfilter$ ?v1 )(fun_app$ ?v0 ?v2 ))):pattern ((fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b uu$ ?v0 )true ):pattern ((fun_app$b uu$ ?v0 )))):named a1 ))
(assert (! (not (= (fun_app$ (lfilter$ uu$ )xs$ )xs$ )):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$ (lfilter$ ?v0 )lNil$ )lNil$ ):pattern ((lfilter$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))(ite (fun_app$b ?v0 ?v1 )(lCons$ ?v1 (fun_app$ (lfilter$ ?v0 )?v2 ))(fun_app$ (lfilter$ ?v0 )?v2 ))):pattern ((fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (=> (not (fun_app$b ?v0 ?v1 ))(= (fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))(fun_app$ (lfilter$ ?v0 )?v2 ))):pattern ((fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (=> (fun_app$b ?v0 ?v1 )(= (fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v1 (fun_app$ (lfilter$ ?v0 )?v2 )))):pattern ((fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_bool_fun$ ))(=> (monotone$ ?v0 lprefix$ ?v1 )(monotone$ ?v0 lprefix$ (fun_app$a (uua$ ?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(! (=> (forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v0 ))(not (fun_app$b ?v1 ?v2 ))))(= (fun_app$ (lfilter$ ?v1 )?v0 )lNil$ )):pattern ((fun_app$ (lfilter$ ?v1 )?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (lfilter$ ?v0 )?v1 ))(forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v1 ))(not (fun_app$b ?v0 ?v2 )))))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (fun_app$ (lfilter$ ?v0 )?v1 )lNil$ )(forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v1 ))(not (fun_app$b ?v0 ?v2 )))))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(monotone$ lprefix$ lprefix$ (lfilter$ ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$c (fun_app$d lprefix$ ?v0 )?v0 )):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$c (fun_app$d lprefix$ ?v0 )?v0 )):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$c (fun_app$d lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$c (fun_app$d lprefix$ ?v1 )?v3 ))):pattern ((fun_app$c (fun_app$d lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (fun_app$d lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$c (fun_app$d lprefix$ lNil$ )?v0 )))):named a16 ))
(check-sat )
;(get-unsat-core )
