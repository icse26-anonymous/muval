;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(assert (! (not (and (lfinite$ xsa$ )(lfinite$ ysa$ ))):named a0 ))
(assert (! (lfinite$ (fun_app$ (lappend$ xs$ )ys$ )):named a1 ))
(assert (! (= lNil$ (fun_app$ (lappend$ xsa$ )ysa$ )):named a2 ))
(assert (! (= (lfinite$ lNil$ )true ):named a3 ))
(assert (! (lfinite$ lNil$ ):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ (ltl$ ?v0 ))(lfinite$ ?v0 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0 )?v1 ))?v2 )(fun_app$ (lappend$ ?v0 )(fun_app$ (lappend$ ?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (lfinite$ ?v0 )(lfinite$ (lCons$ ?v1 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lnull$ ?v0 )(lfinite$ ?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ lNil$ )?v0 )?v0 ):pattern ((fun_app$ (lappend$ lNil$ )?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ ?v0 )(or (= ?v0 lNil$ )(exists ((?v1 A_llist$ )(?v2 A$ ))(and (= ?v0 (lCons$ ?v2 ?v1 ))(lfinite$ ?v1 )))))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (lfinite$ ?v0 )(and (=> (= ?v0 lNil$ )false )(forall ((?v1 A_llist$ )(?v2 A$ ))(=> (and (= ?v0 (lCons$ ?v2 ?v1 ))(lfinite$ ?v1 ))false ))))false )):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (fun_app$ (lappend$ ?v0 )?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (lnull$ ?v0 )(lnull$ ?v1 )))):named a17 ))
(check-sat )
;(get-unsat-core )
