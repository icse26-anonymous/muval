;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun y$ ()A_llist_set$ )
(declare-fun bot$ ()A_llist_set$ )
(declare-fun lSup$ (A_llist_set$ )A_llist$ )
(declare-fun insert$ (A_llist$ A_llist_set$ )A_llist_set$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun collect$ (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(assert (! (not (= (lSup$ (insert$ lNil$ y$ ))(lSup$ y$ ))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_set$ ))(= (member$ ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$ ?v2 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lSup$ (insert$ ?v0 bot$ ))?v0 )):named a4 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_set$ ))(= (insert$ ?v0 (insert$ ?v1 ?v2 ))(insert$ ?v1 (insert$ ?v0 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_set$ ))(=> (and (member$ ?v0 (insert$ ?v1 ?v2 ))(and (=> (= ?v0 ?v1 )false )(=> (member$ ?v0 ?v2 )false )))false )):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ ))(=> (and (member$ ?v0 ?v1 )(forall ((?v2 A_llist_set$ ))(=> (and (= ?v1 (insert$ ?v0 ?v2 ))(not (member$ ?v0 ?v2 )))false )))false )):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ ))(! (=> (member$ ?v0 ?v1 )(= (insert$ ?v0 ?v1 )?v1 )):pattern ((insert$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist$ ))(=> (member$ ?v0 ?v1 )(member$ ?v0 (insert$ ?v2 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ ))(=> (member$ ?v0 ?v1 )(exists ((?v2 A_llist_set$ ))(and (= ?v1 (insert$ ?v0 ?v2 ))(not (member$ ?v0 ?v2 )))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist$ )(?v3 A_llist_set$ ))(=> (and (not (member$ ?v0 ?v1 ))(not (member$ ?v2 ?v3 )))(= (= (insert$ ?v0 ?v1 )(insert$ ?v2 ?v3 ))(ite (= ?v0 ?v2 )(= ?v1 ?v3 )(exists ((?v4 A_llist_set$ ))(and (= ?v1 (insert$ ?v2 ?v4 ))(and (not (member$ ?v2 ?v4 ))(and (= ?v3 (insert$ ?v0 ?v4 ))(not (member$ ?v0 ?v4 )))))))))):named a12 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(= (= (collect$ ?v0 )bot$ )(forall ((?v1 A_llist$ ))(not (fun_app$ ?v0 ?v1 ))))):named a13 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (forall ((?v1 A_llist$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$ ))):named a14 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(= (= bot$ (collect$ ?v0 ))(forall ((?v1 A_llist$ ))(not (fun_app$ ?v0 ?v1 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(= (member$ ?v0 bot$ )false )):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(member$ ?v0 (insert$ ?v0 bot$ ))):named a17 ))
(check-sat )
;(get-unsat-core )
