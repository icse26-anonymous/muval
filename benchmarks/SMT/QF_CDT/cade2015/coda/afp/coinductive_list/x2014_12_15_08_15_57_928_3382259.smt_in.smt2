;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Enat_set$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort A_llist_b_llist_prod_set$ 0 )
(declare-sort A_llist_b_llist_prod_bool_fun$ 0 )
(declare-sort Enat_a_llist_b_llist_prod_fun$ 0 )
(declare-codatatypes ()((B_llist$ (lNil$ )(lCons$ (lhd$ B$ )(ltl$ B_llist$ )))(A_llist$ (lNil$a )(lCons$a (lhd$a A$ )(ltl$a A_llist$ )))))
(declare-sort A_llist_b_llist_prod$ 0)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun fst$ (A_llist_b_llist_prod$)A_llist$)
(declare-fun snd$ (A_llist_b_llist_prod$)B_llist$)
(declare-fun pair$ (A_llist$ B_llist$ )A_llist_b_llist_prod$)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun uu$ ()Enat_a_llist_b_llist_prod_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun top$ ()Nat_set$ )
(declare-fun enat$ ()Nat_enat_fun$ )
(declare-fun xsys$ ()A_llist_b_llist_prod$ )
(declare-fun image$ (Enat_a_llist_b_llist_prod_fun$ Enat_set$ )A_llist_b_llist_prod_set$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun image$a (Nat_enat_fun$ Nat_set$ )Enat_set$ )
(declare-fun ltake$a (Enat$ B_llist$ )B_llist$ )
(declare-fun member$ (A_llist_b_llist_prod$ A_llist_b_llist_prod_set$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun fun_app$ (Enat_a_llist_b_llist_prod_fun$ Enat$ )A_llist_b_llist_prod$ )
(declare-fun fun_app$a (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun fun_app$b (A_llist_b_llist_prod_bool_fun$ A_llist_b_llist_prod$ )Bool )
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ uu$ ?v0 )(pair$ (ltake$ ?v0 xs$ )(ltake$a ?v0 ys$ ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not thesis$ ):named a1 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= xsys$ (pair$ (ltake$ (fun_app$a enat$ ?v0 )xs$ )(ltake$a (fun_app$a enat$ ?v0 )ys$ )))thesis$ )):named a2 ))
(assert (! (member$ xsys$ (image$ uu$ (image$a enat$ top$ ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$a enat$ ?v0 )(fun_app$a enat$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(=> (forall ((?v1 A_llist$ )(?v2 B_llist$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a7 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(exists ((?v1 A_llist$ )(?v2 B_llist$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a9 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(=> (forall ((?v1 A_llist$ )(?v2 B_llist$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a10 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod_bool_fun$ )(?v1 A_llist_b_llist_prod$ ))(=> (forall ((?v2 A_llist$ )(?v3 B_llist$ ))(fun_app$b ?v0 (pair$ ?v2 ?v3 )))(fun_app$b ?v0 ?v1 ))):named a11 ))
(check-sat )
;(get-unsat-core )
