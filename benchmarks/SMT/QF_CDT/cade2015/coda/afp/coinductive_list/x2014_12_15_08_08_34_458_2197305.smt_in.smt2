;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_prod_set$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_prod_bool_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort A_llist_a_llist_prod$ 0)
(declare-fun fst$ (A_llist_a_llist_prod$)A_llist$)
(declare-fun snd$ (A_llist_a_llist_prod$)A_llist$)
(declare-fun pair$ (A_llist$ A_llist$ )A_llist_a_llist_prod$)
(declare-fun p$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A_llist_a_llist_prod$ A_llist_a_llist_prod_set$ )Bool )
(declare-fun collect$ (A_llist_a_llist_prod_bool_fun$ )A_llist_a_llist_prod_set$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_a_llist_prod_bool_fun$ A_llist_a_llist_prod$ )Bool )
(declare-fun case_prod$ (A_llist_a_llist_bool_fun_fun$ )A_llist_a_llist_prod_bool_fun$ )
(assert (! (not (or (lnull$ xsa$ )(exists ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(and (= xsa$ (lCons$ ?v0 ?v1 ))(and (= ysa$ (lCons$ ?v0 ?v2 ))(or (member$ (pair$ ?v1 ?v2 )(collect$ (case_prod$ p$ )))(lprefix$ ?v1 ?v2 ))))))):named a0 ))
(assert (! (fun_app$ (fun_app$a p$ xs$ )ys$ ):named a1 ))
(assert (! (and (=> (lnull$ ysa$ )(lnull$ xsa$ ))(=> (and (not (lnull$ xsa$ ))(not (lnull$ ysa$ )))(and (= (lhd$ xsa$ )(lhd$ ysa$ ))(or (fun_app$ (fun_app$a p$ (ltl$ xsa$ ))(ltl$ ysa$ ))(lprefix$ (ltl$ xsa$ )(ltl$ ysa$ )))))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (member$ (pair$ xsa$ ysa$ )(collect$ (case_prod$ p$ ))):named a4 ))
(assert (! (fun_app$ (fun_app$a p$ xsa$ )ysa$ ):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (fun_app$ (fun_app$a p$ ?v0 )?v1 )(and (=> (lnull$ ?v1 )(lnull$ ?v0 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(or (fun_app$ (fun_app$a p$ (ltl$ ?v0 ))(ltl$ ?v1 ))(lprefix$ (ltl$ ?v0 )(ltl$ ?v1 )))))))):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (lnull$ ?v0 ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))(not (lnull$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_a_llist_prod_set$ ))(=> (and (member$ (pair$ ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (member$ (pair$ ?v3 ?v4 )?v2 )(or (lnull$ ?v3 )(exists ((?v5 A$ )(?v6 A_llist$ )(?v7 A_llist$ ))(and (= ?v3 (lCons$ ?v5 ?v6 ))(and (= ?v4 (lCons$ ?v5 ?v7 ))(or (member$ (pair$ ?v6 ?v7 )?v2 )(lprefix$ ?v6 ?v7 )))))))))(lprefix$ ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A$ ))(=> (lprefix$ ?v0 ?v1 )(lprefix$ (lCons$ ?v2 ?v0 )(lCons$ ?v2 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(not (lnull$ (lCons$ ?v0 ?v1 )))):named a13 ))
(assert (! (member$ (pair$ xs$ ys$ )(collect$ (case_prod$ p$ ))):named a14 ))
(assert (! (forall ((?v0 A_llist_a_llist_prod$ )(?v1 A_llist_a_llist_bool_fun_fun$ ))(=> (forall ((?v2 A_llist$ )(?v3 A_llist$ ))(=> (= ?v0 (pair$ ?v2 ?v3 ))(fun_app$ (fun_app$a ?v1 ?v2 )?v3 )))(fun_app$b (case_prod$ ?v1 )?v0 ))):named a15 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(fun_app$b (case_prod$ ?v0 )(pair$ ?v1 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(fun_app$b (case_prod$ ?v0 )(pair$ ?v1 ?v2 )))):named a17 ))
(check-sat )
;(get-unsat-core )
