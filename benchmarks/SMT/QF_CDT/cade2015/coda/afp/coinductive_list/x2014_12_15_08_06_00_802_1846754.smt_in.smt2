;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_a_llist_bool_fun_fun$ 0 )
(declare-sort B_b_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-fun f$ ()B_a_fun$ )
(declare-fun y$ ()A$ )
(declare-fun xs$ ()B_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun lmap$ (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lset$ (B_llist$ )B_set$ )
(declare-fun lmap$a (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$b (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun member$ (B$ B_set$ )Bool )
(declare-fun fun_app$ (B_a_fun$ B$ )A$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun fun_app$b (A_b_fun$ A$ )B$ )
(declare-fun fun_app$c (B_b_fun$ B$ )B$ )
(declare-fun fun_app$d (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$e (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$f (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$g (A_a_llist_bool_fun_fun$ A$ )A_llist_bool_fun$ )
(declare-fun fun_app$h (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$i (B_b_llist_bool_fun_fun$ B$ )B_llist_bool_fun$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun pred_llist$a (B_bool_fun$ B_llist$ )Bool )
(assert (! (not (= (= (lmap$ f$ xs$ )(lCons$ y$ ys$ ))(exists ((?v0 B$ )(?v1 B_llist$ ))(and (= xs$ (lCons$a ?v0 ?v1 ))(and (= y$ (fun_app$ f$ ?v0 ))(= ys$ (lmap$ f$ ?v1 ))))))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (lmap$a ?v0 (lCons$ ?v1 ?v2 ))(lCons$ (fun_app$a ?v0 ?v1 )(lmap$a ?v0 ?v2 ))):pattern ((lmap$a ?v0 (lCons$ ?v1 ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (lmap$b ?v0 (lCons$ ?v1 ?v2 ))(lCons$a (fun_app$b ?v0 ?v1 )(lmap$b ?v0 ?v2 ))):pattern ((lmap$b ?v0 (lCons$ ?v1 ?v2 ))))):named a4 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (lmap$ ?v0 (lCons$a ?v1 ?v2 ))(lCons$ (fun_app$ ?v0 ?v1 )(lmap$ ?v0 ?v2 ))):pattern ((lmap$ ?v0 (lCons$a ?v1 ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (lmap$c ?v0 (lCons$a ?v1 ?v2 ))(lCons$a (fun_app$c ?v0 ?v1 )(lmap$c ?v0 ?v2 ))):pattern ((lmap$c ?v0 (lCons$a ?v1 ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))(and (fun_app$d ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (pred_llist$a ?v0 (lCons$a ?v1 ?v2 ))(and (fun_app$e ?v0 ?v1 )(pred_llist$a ?v0 ?v2 ))):pattern ((pred_llist$a ?v0 (lCons$a ?v1 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (ltl$a (lmap$c ?v0 ?v1 ))(lmap$c ?v0 (ltl$a ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (ltl$a (lmap$b ?v0 ?v1 ))(lmap$b ?v0 (ltl$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$ (lmap$a ?v0 ?v1 ))(lmap$a ?v0 (ltl$ ?v1 )))):named a11 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$ (lmap$ ?v0 ?v1 ))(lmap$ ?v0 (ltl$a ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$a ?v0 ?v1 ))(lnull$ ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$b ?v0 ?v1 ))(lnull$ ?v1 ))):named a14 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$a (lmap$c ?v0 ?v1 ))(lnull$a ?v1 ))):named a15 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$ (lmap$ ?v0 ?v1 ))(lnull$a ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lhd$ (lCons$ ?v0 ?v1 ))?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lhd$a (lCons$a ?v0 ?v1 ))?v0 ):pattern ((lCons$a ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (and (forall ((?v4 B$ )(?v5 B$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$c ?v2 ?v4 )(fun_app$c ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (lmap$c ?v2 ?v0 )(lmap$c ?v3 ?v1 )))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ )(?v3 A_b_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$a ?v4 (lset$a ?v0 ))(and (member$a ?v5 (lset$a ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (lmap$b ?v2 ?v0 )(lmap$b ?v3 ?v1 )))(= ?v0 ?v1 ))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$a ?v4 (lset$a ?v0 ))(and (member$a ?v5 (lset$a ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (lmap$a ?v2 ?v0 )(lmap$a ?v3 ?v1 )))(= ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_a_fun$ )(?v3 B_a_fun$ ))(=> (and (forall ((?v4 B$ )(?v5 B$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (lmap$ ?v2 ?v0 )(lmap$ ?v3 ?v1 )))(= ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(=> (forall ((?v3 B$ ))(=> (member$ ?v3 (lset$ ?v0 ))(= (fun_app$c ?v1 ?v3 )(fun_app$c ?v2 ?v3 ))))(= (lmap$c ?v1 ?v0 )(lmap$c ?v2 ?v0 )))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$a ?v3 (lset$a ?v0 ))(= (fun_app$b ?v1 ?v3 )(fun_app$b ?v2 ?v3 ))))(= (lmap$b ?v1 ?v0 )(lmap$b ?v2 ?v0 )))):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$a ?v3 (lset$a ?v0 ))(= (fun_app$a ?v1 ?v3 )(fun_app$a ?v2 ?v3 ))))(= (lmap$a ?v1 ?v0 )(lmap$a ?v2 ?v0 )))):named a25 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ ))(=> (forall ((?v3 B$ ))(=> (member$ ?v3 (lset$ ?v0 ))(= (fun_app$ ?v1 ?v3 )(fun_app$ ?v2 ?v3 ))))(= (lmap$ ?v1 ?v0 )(lmap$ ?v2 ?v0 )))):named a26 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 B$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$c ?v2 ?v4 )(fun_app$c ?v3 ?v4 )))))(= (lmap$c ?v2 ?v0 )(lmap$c ?v3 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ )(?v3 A_b_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$a ?v4 (lset$a ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v4 )))))(= (lmap$b ?v2 ?v0 )(lmap$b ?v3 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$a ?v4 (lset$a ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (lmap$a ?v2 ?v0 )(lmap$a ?v3 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_a_fun$ )(?v3 B_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 B$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (lmap$ ?v2 ?v0 )(lmap$ ?v3 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_a_llist_bool_fun_fun$ ))(=> (and (member$a ?v0 (lset$a ?v1 ))(and (forall ((?v3 A$ )(?v4 A_llist$ ))(fun_app$f (fun_app$g ?v2 ?v3 )(lCons$ ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_llist$ )(?v5 A$ ))(=> (and (member$a ?v5 (lset$a ?v4 ))(fun_app$f (fun_app$g ?v2 ?v5 )?v4 ))(fun_app$f (fun_app$g ?v2 ?v5 )(lCons$ ?v3 ?v4 ))))))(fun_app$f (fun_app$g ?v2 ?v0 )?v1 ))):named a31 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B_b_llist_bool_fun_fun$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v3 B$ )(?v4 B_llist$ ))(fun_app$h (fun_app$i ?v2 ?v3 )(lCons$a ?v3 ?v4 )))(forall ((?v3 B$ )(?v4 B_llist$ )(?v5 B$ ))(=> (and (member$ ?v5 (lset$ ?v4 ))(fun_app$h (fun_app$i ?v2 ?v5 )?v4 ))(fun_app$h (fun_app$i ?v2 ?v5 )(lCons$a ?v3 ?v4 ))))))(fun_app$h (fun_app$i ?v2 ?v0 )?v1 ))):named a32 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (and (member$a ?v0 (lset$a ?v1 ))(and (forall ((?v2 A_llist$ ))(=> (= ?v1 (lCons$ ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v1 (lCons$ ?v2 ?v3 ))(member$a ?v0 (lset$a ?v3 )))false ))))false )):named a33 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v2 B_llist$ ))(=> (= ?v1 (lCons$a ?v0 ?v2 ))false ))(forall ((?v2 B$ )(?v3 B_llist$ ))(=> (and (= ?v1 (lCons$a ?v2 ?v3 ))(member$ ?v0 (lset$ ?v3 )))false ))))false )):named a34 ))
(check-sat )
;(get-unsat-core )
