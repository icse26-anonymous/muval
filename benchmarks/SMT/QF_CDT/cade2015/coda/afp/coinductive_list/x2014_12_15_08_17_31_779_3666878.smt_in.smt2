;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun$ 0 )
(declare-sort B_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-fun f$ ()B_a_fun$ )
(declare-fun n$ ()Enat$ )
(declare-fun xs$ ()B_llist$ )
(declare-fun lmap$ (B_a_fun$ )B_llist_a_llist_fun$ )
(declare-fun zero$ ()Enat$ )
(declare-fun ldrop$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun lmap$a (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lmap$b (A_b_fun$ )A_llist_b_llist_fun$ )
(declare-fun lmap$c (B_b_fun$ )B_llist_b_llist_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun ldrop$a (Enat$ )B_llist_b_llist_fun$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun ltake$a (Enat$ B_llist$ )B_llist$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (B_llist$ )B_llist_b_llist_fun$ )
(declare-fun ldropn$a (Nat$ B_llist$ )B_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (B_llist_a_llist_fun$ B_llist$ )A_llist$ )
(declare-fun fun_app$b (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$c (A_llist_b_llist_fun$ A_llist$ )B_llist$ )
(declare-fun lappend$a (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun llength$a (B_llist$ )Enat$ )
(assert (! (not (= (fun_app$ (ldrop$ n$ )(fun_app$a (lmap$ f$ )xs$ ))(fun_app$a (lmap$ f$ )(fun_app$b (ldrop$a n$ )xs$ )))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ldropn$ ?v0 (fun_app$ (lmap$a ?v1 )?v2 ))(fun_app$ (lmap$a ?v1 )(ldropn$ ?v0 ?v2 )))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ldropn$a ?v0 (fun_app$c (lmap$b ?v1 )?v2 ))(fun_app$c (lmap$b ?v1 )(ldropn$ ?v0 ?v2 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ldropn$a ?v0 (fun_app$b (lmap$c ?v1 )?v2 ))(fun_app$b (lmap$c ?v1 )(ldropn$a ?v0 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ldropn$ ?v0 (fun_app$a (lmap$ ?v1 )?v2 ))(fun_app$a (lmap$ ?v1 )(ldropn$a ?v0 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$ (ldrop$ zero$ )?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 B_llist$ ))(= (fun_app$b (ldrop$a zero$ )?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (fun_app$ (lmap$a ?v0 )?v1 ))(llength$ ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$a (fun_app$c (lmap$b ?v0 )?v1 ))(llength$ ?v1 ))):named a8 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$a (fun_app$b (lmap$c ?v0 )?v1 ))(llength$a ?v1 ))):named a9 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$ (fun_app$a (lmap$ ?v0 )?v1 ))(llength$a ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ldrop$ ?v0 )lNil$ )lNil$ ):pattern ((ldrop$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b (ldrop$a ?v0 )lNil$a )lNil$a ):pattern ((ldrop$a ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ltake$ ?v0 (fun_app$ (lmap$a ?v1 )?v2 ))(fun_app$ (lmap$a ?v1 )(ltake$ ?v0 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ltake$a ?v0 (fun_app$c (lmap$b ?v1 )?v2 ))(fun_app$c (lmap$b ?v1 )(ltake$ ?v0 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ltake$a ?v0 (fun_app$b (lmap$c ?v1 )?v2 ))(fun_app$b (lmap$c ?v1 )(ltake$a ?v0 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ltake$ ?v0 (fun_app$a (lmap$ ?v1 )?v2 ))(fun_app$a (lmap$ ?v1 )(ltake$a ?v0 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$ (lmap$a ?v0 )?v1 ))(lfinite$ ?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lfinite$a (fun_app$c (lmap$b ?v0 )?v1 ))(lfinite$ ?v1 ))):named a18 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lfinite$a (fun_app$b (lmap$c ?v0 )?v1 ))(lfinite$a ?v1 ))):named a19 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lfinite$ (fun_app$a (lmap$ ?v0 )?v1 ))(lfinite$a ?v1 ))):named a20 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (lmap$a ?v0 )?v1 ))(lnull$ ?v1 ))):named a21 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$a (fun_app$c (lmap$b ?v0 )?v1 ))(lnull$ ?v1 ))):named a22 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$a (fun_app$b (lmap$c ?v0 )?v1 ))(lnull$a ?v1 ))):named a23 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$ (fun_app$a (lmap$ ?v0 )?v1 ))(lnull$a ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$ (fun_app$ (lmap$a ?v0 )?v1 ))(fun_app$ (lmap$a ?v0 )(ltl$ ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (ltl$a (fun_app$c (lmap$b ?v0 )?v1 ))(fun_app$c (lmap$b ?v0 )(ltl$ ?v1 )))):named a26 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (ltl$a (fun_app$b (lmap$c ?v0 )?v1 ))(fun_app$b (lmap$c ?v0 )(ltl$a ?v1 )))):named a27 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$ (fun_app$a (lmap$ ?v0 )?v1 ))(fun_app$a (lmap$ ?v0 )(ltl$a ?v1 )))):named a28 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= (fun_app$b (lmap$c ?v0 )?v1 )lNil$a )(= ?v1 lNil$a ))):named a29 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= (fun_app$c (lmap$b ?v0 )?v1 )lNil$a )(= ?v1 lNil$ ))):named a30 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= (fun_app$ (lmap$a ?v0 )?v1 )lNil$ )(= ?v1 lNil$ ))):named a31 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= (fun_app$a (lmap$ ?v0 )?v1 )lNil$ )(= ?v1 lNil$a ))):named a32 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= lNil$a (fun_app$b (lmap$c ?v0 )?v1 ))(= ?v1 lNil$a ))):named a33 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= lNil$a (fun_app$c (lmap$b ?v0 )?v1 ))(= ?v1 lNil$ ))):named a34 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$ (lmap$a ?v0 )?v1 ))(= ?v1 lNil$ ))):named a35 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= lNil$ (fun_app$a (lmap$ ?v0 )?v1 ))(= ?v1 lNil$a ))):named a36 ))
(assert (! (forall ((?v0 B_b_fun$ ))(! (= (fun_app$b (lmap$c ?v0 )lNil$a )lNil$a ):pattern ((lmap$c ?v0 )))):named a37 ))
(assert (! (forall ((?v0 A_b_fun$ ))(! (= (fun_app$c (lmap$b ?v0 )lNil$ )lNil$a ):pattern ((lmap$b ?v0 )))):named a38 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$ (lmap$a ?v0 )lNil$ )lNil$ ):pattern ((lmap$a ?v0 )))):named a39 ))
(assert (! (forall ((?v0 B_a_fun$ ))(! (= (fun_app$a (lmap$ ?v0 )lNil$a )lNil$ ):pattern ((lmap$ ?v0 )))):named a40 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$b (lmap$c ?v0 )(fun_app$b (lappend$ ?v1 )?v2 ))(fun_app$b (lappend$ (fun_app$b (lmap$c ?v0 )?v1 ))(fun_app$b (lmap$c ?v0 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$c (lmap$b ?v0 )(fun_app$ (lappend$a ?v1 )?v2 ))(fun_app$b (lappend$ (fun_app$c (lmap$b ?v0 )?v1 ))(fun_app$c (lmap$b ?v0 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ (lmap$a ?v0 )(fun_app$ (lappend$a ?v1 )?v2 ))(fun_app$ (lappend$a (fun_app$ (lmap$a ?v0 )?v1 ))(fun_app$ (lmap$a ?v0 )?v2 )))):named a43 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$a (lmap$ ?v0 )(fun_app$b (lappend$ ?v1 )?v2 ))(fun_app$ (lappend$a (fun_app$a (lmap$ ?v0 )?v1 ))(fun_app$a (lmap$ ?v0 )?v2 )))):named a44 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (fun_app$ (lappend$a ?v0 )?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a45 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$a (fun_app$b (lappend$ ?v0 )?v1 )))(or (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a46 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (lappend$a ?v0 )?v1 ))(and (lnull$ ?v0 )(lnull$ ?v1 )))):named a47 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$a (fun_app$b (lappend$ ?v0 )?v1 ))(and (lnull$a ?v0 )(lnull$a ?v1 )))):named a48 ))
(assert (! (= (lfinite$a lNil$a )true ):named a49 ))
(assert (! (= (lfinite$ lNil$ )true ):named a50 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$b (lappend$ ?v0 )lNil$a )?v0 ):pattern ((lappend$ ?v0 )))):named a51 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$a ?v0 )lNil$ )?v0 ):pattern ((lappend$a ?v0 )))):named a52 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$b (lappend$ lNil$a )?v0 )?v0 ):pattern ((fun_app$b (lappend$ lNil$a )?v0 )))):named a53 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$a lNil$ )?v0 )?v0 ):pattern ((fun_app$ (lappend$a lNil$ )?v0 )))):named a54 ))
(check-sat )
;(get-unsat-core )
