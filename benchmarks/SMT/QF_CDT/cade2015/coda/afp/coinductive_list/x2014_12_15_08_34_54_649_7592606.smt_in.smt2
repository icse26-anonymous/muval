;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_nat_prod_a_nat_prod_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_nat_prod$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun fst$ (A_nat_prod$)A$)
(declare-fun snd$ (A_nat_prod$)Nat$)
(declare-fun pair$ (A$ Nat$ )A_nat_prod$)
(declare-codatatypes ()((A_nat_prod_llist$ (lNil$a )(lCons$a (lhd$a A_nat_prod$ )(ltl$a A_nat_prod_llist$ )))(Nat_llist$ (lNil$b )(lCons$b (lhd$b Nat$ )(ltl$b Nat_llist$ )))))
(declare-fun a$ ()Nat_set$ )
(declare-fun k$ ()Nat$ )
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lzip$ (A_llist$ Nat_llist$ )A_nat_prod_llist$ )
(declare-fun plus$ (Nat$ )Nat_nat_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun ltake$ (Enat$ Nat_llist$ )Nat_llist$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_nat_prod_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun iterates$ (Nat_nat_fun$ Nat$ )Nat_llist$ )
(declare-fun lappend$a (A_nat_prod_llist$ A_nat_prod_llist$ )A_nat_prod_llist$ )
(declare-fun lappend$b (Nat_llist$ Nat_llist$ )Nat_llist$ )
(declare-fun lfinite$a (Nat_llist$ )Bool )
(declare-fun lfinite$b (A_llist$ )Bool )
(declare-fun llength$a (Nat_llist$ )Enat$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun iterates$a (A_nat_prod_a_nat_prod_fun$ A_nat_prod$ )A_nat_prod_llist$ )
(declare-fun iterates$b (A_a_fun$ A$ )A_llist$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(member$ (fun_app$a (plus$ ?v0 )k$ )a$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (lsublist$ (lappend$ xs$ ys$ )a$ )(lappend$ (lsublist$ xs$ a$ )(lsublist$ ys$ (collect$ uu$ ))))):named a1 ))
(assert (! (= (llength$ xs$ )(enat$ k$ )):named a2 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 A_nat_prod_llist$ )(?v2 A_nat_prod_llist$ ))(= (lappend$a (lappend$a ?v0 ?v1 )?v2 )(lappend$a ?v0 (lappend$a ?v1 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ ))(= (lappend$b (lappend$b ?v0 ?v1 )?v2 )(lappend$b ?v0 (lappend$b ?v1 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a5 ))
(assert (! (=> (and (= (llength$ xs$ )(llength$a (ltake$ (enat$ k$ )(iterates$ suc$ zero$ ))))(lfinite$ (lzip$ xs$ (ltake$ (enat$ k$ )(iterates$ suc$ zero$ )))))(= (lsublist$ (lappend$ xs$ ys$ )a$ )(lappend$ (lsublist$ xs$ a$ )(lsublist$ ys$ (collect$ uu$ ))))):named a6 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(= (lfinite$a (lappend$b ?v0 ?v1 ))(and (lfinite$a ?v0 )(lfinite$a ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 A_nat_prod_llist$ ))(= (lfinite$ (lappend$a ?v0 ?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$b (lappend$ ?v0 ?v1 ))(and (lfinite$b ?v0 )(lfinite$b ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$a (plus$ ?v0 )?v1 )(fun_app$a (plus$ ?v2 )?v1 ))(= ?v0 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$a (plus$ ?v0 )?v1 )(fun_app$a (plus$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 A_nat_prod_a_nat_prod_fun$ )(?v1 A_nat_prod$ )(?v2 A_nat_prod_llist$ ))(= (lappend$a (iterates$a ?v0 ?v1 )?v2 )(iterates$a ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_llist$ ))(= (lappend$ (iterates$b ?v0 ?v1 )?v2 )(iterates$b ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat_llist$ ))(= (lappend$b (iterates$ ?v0 ?v1 )?v2 )(iterates$ ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(! (=> (not (lfinite$a ?v0 ))(= (lappend$b ?v0 ?v1 )?v0 )):pattern ((lappend$b ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 A_nat_prod_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (lappend$a ?v0 ?v1 )?v0 )):pattern ((lappend$a ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (not (lfinite$b ?v0 ))(= (lappend$ ?v0 ?v1 )?v0 )):pattern ((lappend$ ?v0 ?v1 )))):named a17 ))
(assert (! (lfinite$b xs$ ):named a18 ))
(assert (! (= (lzip$ xs$ (ltake$ (enat$ k$ )(iterates$ suc$ zero$ )))(lzip$ xs$ (iterates$ suc$ zero$ ))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$a (plus$ ?v0 )?v1 )(fun_app$a (plus$ ?v2 )?v1 ))(= ?v0 ?v2 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$a (plus$ ?v0 )?v1 )(fun_app$a (plus$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (fun_app$a (plus$ (fun_app$a (plus$ ?v0 )?v1 ))(fun_app$a (plus$ ?v2 )?v3 ))(fun_app$a (plus$ (fun_app$a (plus$ ?v0 )?v2 ))(fun_app$a (plus$ ?v1 )?v3 )))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$a (plus$ (fun_app$a (plus$ ?v0 )?v1 ))?v2 )(fun_app$a (plus$ (fun_app$a (plus$ ?v0 )?v2 ))?v1 ))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$a suc$ ?v0 )(fun_app$a suc$ ?v1 ))(= ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$a suc$ ?v0 )(fun_app$a suc$ ?v1 ))(= ?v0 ?v1 ))):named a25 ))
(check-sat )
;(get-unsat-core )
