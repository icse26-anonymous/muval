;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun y$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun max$ (A_a_bool_fun_fun$ A$ A$ )A$ )
(declare-fun min$ (A_a_bool_fun_fun$ A$ A$ )A$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun less_eq$ ()A_a_bool_fun_fun$ )
(declare-fun lsorted$ (A_a_bool_fun_fun$ )A_llist_bool_fun$ )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(assert (! (not (fun_app$ (fun_app$a less_eq$ (lhd$ xs$ ))y$ )):named a0 ))
(assert (! (fun_app$b (lsorted$ less_eq$ )xs$ ):named a1 ))
(assert (! (not (lnull$ xs$ )):named a2 ))
(assert (! (member$ y$ (lset$ (ltl$ xs$ ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (fun_app$a less_eq$ ?v1 )?v2 ))(fun_app$ (fun_app$a less_eq$ ?v0 )?v2 ))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (= ?v0 ?v1 )(fun_app$ (fun_app$a less_eq$ ?v0 )?v1 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less_eq$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$ (fun_app$a less_eq$ ?v0 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$a less_eq$ ?v0 )?v1 )(fun_app$ (fun_app$a less_eq$ ?v1 )?v2 ))(fun_app$ (fun_app$a less_eq$ ?v0 )?v2 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (fun_app$b (lsorted$ less_eq$ )?v0 )(fun_app$b (lsorted$ less_eq$ )(ltl$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (max$ less_eq$ ?v0 ?v1 )(ite (fun_app$ (fun_app$a less_eq$ ?v0 )?v1 )?v1 ?v0 )):pattern ((max$ less_eq$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (min$ less_eq$ ?v0 ?v1 )(ite (fun_app$ (fun_app$a less_eq$ ?v0 )?v1 )?v0 ?v1 )):pattern ((min$ less_eq$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A$ ))(fun_app$ (fun_app$a less_eq$ ?v0 )?v0 )):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (fun_app$b (lsorted$ less_eq$ )?v0 )(and (not (lnull$ ?v0 ))(not (lnull$ (ltl$ ?v0 )))))(fun_app$ (fun_app$a less_eq$ (lhd$ ?v0 ))(lhd$ (ltl$ ?v0 ))))):named a12 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (and (fun_app$b ?v0 ?v1 )(forall ((?v2 A_llist$ ))(=> (and (fun_app$b ?v0 ?v2 )(and (not (lnull$ ?v2 ))(not (lnull$ (ltl$ ?v2 )))))(and (fun_app$ (fun_app$a less_eq$ (lhd$ ?v2 ))(lhd$ (ltl$ ?v2 )))(or (fun_app$b ?v0 (ltl$ ?v2 ))(fun_app$b (lsorted$ less_eq$ )(ltl$ ?v2 )))))))(fun_app$b (lsorted$ less_eq$ )?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (and (fun_app$b ?v0 ?v1 )(forall ((?v2 A_llist$ ))(=> (and (fun_app$b ?v0 ?v2 )(not (lnull$ ?v2 )))(and (forall ((?v3 A$ ))(=> (member$ ?v3 (lset$ (ltl$ ?v2 )))(fun_app$ (fun_app$a less_eq$ (lhd$ ?v2 ))?v3 )))(or (fun_app$b ?v0 (ltl$ ?v2 ))(fun_app$b (lsorted$ less_eq$ )(ltl$ ?v2 )))))))(fun_app$b (lsorted$ less_eq$ )?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (=> (or (lnull$ ?v0 )(not (fun_app$ ?v1 (lhd$ ?v0 ))))false )(=> (and (not (lnull$ ?v0 ))(fun_app$ ?v1 (lhd$ ?v0 )))false ))false )):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a16 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a18 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (= (lnull$ ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(= (ltl$ ?v0 )(ltl$ ?v1 )))))(= ?v0 ?v1 ))):named a20 ))
(check-sat )
;(get-unsat-core )
