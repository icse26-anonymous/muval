;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort Nat_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun f$ ()A_a_fun$ )
(declare-fun x$ ()A$ )
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun lsetp$ (A_llist$ )A_bool_fun$ )
(declare-fun compow$ ()Nat_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun funpow$ ()Nat_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun less_eq$ (A_set$ A_set$ )Bool )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun fun_app$b (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$c (Nat_a_a_fun_a_a_fun_fun_fun$ Nat$ )A_a_fun_a_a_fun_fun$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(exists ((?v1 Nat$ ))(and (= ?v0 (fun_app$a (fun_app$b (fun_app$c compow$ ?v1 )f$ )x$ ))true ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (lset$ (iterates$ f$ x$ ))(collect$ uu$ ))):named a1 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 Nat$ )(?v2 A$ ))(= (fun_app$a ?v0 (fun_app$a (fun_app$b (fun_app$c compow$ ?v1 )?v0 )?v2 ))(fun_app$a (fun_app$b (fun_app$c compow$ ?v1 )?v0 )(fun_app$a ?v0 ?v2 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(lmember$ ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 Nat$ ))(= (lnth$ (iterates$ ?v0 ?v1 )?v2 )(fun_app$a (fun_app$b (fun_app$c compow$ ?v2 )?v0 )?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lset$ ?v0 )(collect$ (lsetp$ ?v0 ))):pattern ((lset$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (ldropn$ ?v0 (iterates$ ?v1 ?v2 ))(iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c compow$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (member$ ?v0 (lset$ ?v1 ))(fun_app$ (lsetp$ ?v1 )?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (fun_app$ (lsetp$ ?v0 )?v1 )(member$ ?v1 (lset$ ?v0 )))):named a8 ))
(assert (! (= funpow$ compow$ ):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 Enat$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (ldrop$ ?v1 ?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (ldropn$ ?v1 ?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (ldrop$ (enat$ ?v0 )(iterates$ ?v1 ?v2 ))(iterates$ ?v1 (fun_app$a (fun_app$b (fun_app$c compow$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(less_eq$ (lset$ (ldropn$ ?v0 ?v1 ))(lset$ ?v1 ))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(less_eq$ (lset$ (ldrop$ ?v0 ?v1 ))(lset$ ?v1 ))):named a14 ))
(check-sat )
;(get-unsat-core )
