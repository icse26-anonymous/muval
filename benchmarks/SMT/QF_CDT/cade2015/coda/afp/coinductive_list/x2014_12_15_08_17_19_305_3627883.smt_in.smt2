;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun na$ ()Nat$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun less$a (Nat$ )Nat_bool_fun$ )
(declare-fun minus$ (Nat$ )Nat_nat_fun$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$b (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun the_enat$ (Enat$ )Nat$ )
(assert (! (not (= (ldropn$ (suc$ na$ )(lappend$ xsa$ ys$ ))(ite (less$ (enat$ (suc$ na$ ))(llength$ xsa$ ))(lappend$ (ldropn$ (suc$ na$ )xsa$ )ys$ )(ldropn$ (fun_app$ (minus$ (suc$ na$ ))(the_enat$ (llength$ xsa$ )))ys$ )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ldropn$ na$ (lappend$ ?v0 ys$ ))(ite (less$ (enat$ na$ )(llength$ ?v0 ))(lappend$ (ldropn$ na$ ?v0 )ys$ )(ldropn$ (fun_app$ (minus$ na$ )(the_enat$ (llength$ ?v0 )))ys$ )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (minus$ (fun_app$ (minus$ (suc$ ?v0 ))?v1 ))(suc$ ?v2 ))(fun_app$ (minus$ (fun_app$ (minus$ ?v0 )?v1 ))?v2 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (minus$ (suc$ ?v0 ))(suc$ ?v1 ))(fun_app$ (minus$ ?v0 )?v1 )):pattern ((fun_app$ (minus$ (suc$ ?v0 ))(suc$ ?v1 ))))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (the_enat$ (enat$ ?v0 ))?v0 ):pattern ((enat$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$a ?v0 ?v1 )(forall ((?v3 Nat$ ))(=> (fun_app$a ?v0 (suc$ ?v3 ))(fun_app$a ?v0 ?v3 ))))(fun_app$a ?v0 (fun_app$ (minus$ ?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less$ (fun_app$b ?v0 ?v3 )(fun_app$b ?v0 (suc$ ?v3 ))))(fun_app$a (less$a ?v1 )?v2 ))(less$ (fun_app$b ?v0 ?v1 )(fun_app$b ?v0 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$a (less$a (fun_app$ ?v0 ?v3 ))(fun_app$ ?v0 (suc$ ?v3 ))))(fun_app$a (less$a ?v1 )?v2 ))(fun_app$a (less$a (fun_app$ ?v0 ?v1 ))(fun_app$ ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$a (less$a ?v0 )(suc$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$a (less$a ?v0 )?v1 )(fun_app$a (less$a (suc$ ?v0 ))(suc$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$a (less$a (suc$ ?v0 ))(suc$ ?v1 ))(fun_app$a (less$a ?v0 )?v1 )):pattern ((fun_app$a (less$a (suc$ ?v0 ))(suc$ ?v1 ))))):named a15 ))
(check-sat )
;(get-unsat-core )
