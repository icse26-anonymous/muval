;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_list_a_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_list_a_a_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-sort A_list$ 0)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun f$ (A_a_a_fun_fun$ A$ )A_list_a_fun$ )
(declare-fun uu$ ()B_a_fun$ )
(declare-fun xs$ ()B_llist$ )
(declare-fun rev$ (A_list$ )A_list$ )
(declare-fun uua$ ()B_b_fun$ )
(declare-fun uub$ ()A_a_fun$ )
(declare-fun fold$ (A_a_a_fun_fun$ )A_list_a_a_fun_fun$ )
(declare-fun lmap$ (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun plus$ ()A_a_a_fun_fun$ )
(declare-fun zero$ ()A$ )
(declare-fun foldr$ (A_a_a_fun_fun$ )A_list_a_a_fun_fun$ )
(declare-fun ldrop$ (Enat$ B_llist$ )B_llist$ )
(declare-fun lmap$a (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$b (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$c (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun append$ (A_list$ A_list$ )A_list$ )
(declare-fun ldrop$a (Enat$ A_llist$ )A_llist$ )
(declare-fun ldropn$ (Nat$ B_llist$ )B_llist$ )
(declare-fun fun_app$ (B_b_fun$ B$ )B$ )
(declare-fun ldropn$a (Nat$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun listsum$ (A_a_a_fun_fun$ A$ )A_list_a_fun$ )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun fun_app$b (B_a_fun$ B$ )A$ )
(declare-fun fun_app$c (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$d (A_list_a_fun$ A_list$ )A$ )
(declare-fun fun_app$e (A_list_a_a_fun_fun$ A_list$ )A_a_fun$ )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun llistsum$ (A_a_a_fun_fun$ A$ A_llist$ )A$ )
(declare-fun lsublist$ (B_llist$ Nat_set$ )B_llist$ )
(declare-fun lsublist$a (A_llist$ Nat_set$ )A_llist$ )
(declare-fun lstrict_prefix$ (B_llist$ B_llist$ )Bool )
(declare-fun lstrict_prefix$a (A_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ uua$ ?v0 )?v0 ):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a uub$ ?v0 )?v0 ):pattern ((fun_app$a uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$b uu$ ?v0 )zero$ ):pattern ((fun_app$b uu$ ?v0 )))):named a2 ))
(assert (! (not (= (llistsum$ plus$ zero$ (lmap$ uu$ xs$ ))zero$ )):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (fun_app$a (fun_app$c plus$ (fun_app$a (fun_app$c plus$ ?v0 )?v1 ))?v2 )(fun_app$a (fun_app$c plus$ ?v0 )(fun_app$a (fun_app$c plus$ ?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lmap$a uua$ ?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lmap$b uub$ ?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 A$ ))(= (fun_app$a (fun_app$c plus$ ?v0 )zero$ )?v0 )):named a7 ))
(assert (! (forall ((?v0 A$ ))(= (fun_app$a (fun_app$c plus$ zero$ )?v0 )?v0 )):named a8 ))
(assert (! (= (listsum$ plus$ zero$ )(f$ plus$ zero$ )):named a9 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$d (listsum$ plus$ zero$ )?v0 )(fun_app$a (fun_app$e (foldr$ plus$ )?v0 )zero$ )):pattern ((fun_app$d (listsum$ plus$ zero$ )?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (llistsum$ plus$ zero$ ?v0 )(ite (lfinite$ ?v0 )(fun_app$d (listsum$ plus$ zero$ )(list_of$ ?v0 ))zero$ )):pattern ((llistsum$ plus$ zero$ ?v0 )))):named a11 ))
(assert (! (= (fun_app$d (listsum$ plus$ zero$ )nil$ )zero$ ):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (fun_app$d (listsum$ plus$ zero$ )(cons$ ?v0 ?v1 ))(fun_app$a (fun_app$c plus$ ?v0 )(fun_app$d (listsum$ plus$ zero$ )?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (fun_app$d (listsum$ plus$ zero$ )(append$ ?v0 ?v1 ))(fun_app$a (fun_app$c plus$ (fun_app$d (listsum$ plus$ zero$ )?v0 ))(fun_app$d (listsum$ plus$ zero$ )?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ )(?v2 Nat_set$ ))(= (lsublist$ (lmap$c ?v0 ?v1 )?v2 )(lmap$c ?v0 (lsublist$a ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ )(?v2 Nat_set$ ))(= (lsublist$ (lmap$a ?v0 ?v1 )?v2 )(lmap$a ?v0 (lsublist$ ?v1 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ )(?v2 Nat_set$ ))(= (lsublist$a (lmap$b ?v0 ?v1 )?v2 )(lmap$b ?v0 (lsublist$a ?v1 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ )(?v2 Nat_set$ ))(= (lsublist$a (lmap$ ?v0 ?v1 )?v2 )(lmap$ ?v0 (lsublist$ ?v1 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$ (lmap$a ?v2 ?v0 )(lmap$a ?v2 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$ (lmap$c ?v2 ?v0 )(lmap$c ?v2 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lstrict_prefix$a (lmap$b ?v2 ?v0 )(lmap$b ?v2 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_a_fun$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lstrict_prefix$a (lmap$ ?v2 ?v0 )(lmap$ ?v2 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (fun_app$e (fold$ plus$ )?v0 )(fun_app$c plus$ (fun_app$d (listsum$ plus$ zero$ )(rev$ ?v0 )))):pattern ((fun_app$e (fold$ plus$ )?v0 )))):named a23 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ldrop$ ?v0 (lmap$c ?v1 ?v2 ))(lmap$c ?v1 (ldrop$a ?v0 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ldrop$ ?v0 (lmap$a ?v1 ?v2 ))(lmap$a ?v1 (ldrop$ ?v0 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ldrop$a ?v0 (lmap$b ?v1 ?v2 ))(lmap$b ?v1 (ldrop$a ?v0 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ldrop$a ?v0 (lmap$ ?v1 ?v2 ))(lmap$ ?v1 (ldrop$ ?v0 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (ldropn$ ?v0 (lmap$c ?v1 ?v2 ))(lmap$c ?v1 (ldropn$a ?v0 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (ldropn$ ?v0 (lmap$a ?v1 ?v2 ))(lmap$a ?v1 (ldropn$ ?v0 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (ldropn$a ?v0 (lmap$b ?v1 ?v2 ))(lmap$b ?v1 (ldropn$a ?v0 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (ldropn$a ?v0 (lmap$ ?v1 ?v2 ))(lmap$ ?v1 (ldropn$ ?v0 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lfinite$a (lmap$c ?v0 ?v1 ))(lfinite$ ?v1 ))):named a32 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lfinite$a (lmap$a ?v0 ?v1 ))(lfinite$a ?v1 ))):named a33 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$b ?v0 ?v1 ))(lfinite$ ?v1 ))):named a34 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lfinite$ (lmap$ ?v0 ?v1 ))(lfinite$a ?v1 ))):named a35 ))
(check-sat )
;(get-unsat-core )
