;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort A_llist_b_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort B_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_a_llist_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_llist_fun_a_b_fun_fun$ 0 )
(declare-sort A_llist_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_b_llist_fun$ 0 )
(declare-sort B_b_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_a_fun_a_llist_a_fun_fun$ 0 )
(declare-sort A_llist_a_fun_a_llist_b_fun_fun$ 0 )
(declare-sort A_llist_b_fun_a_llist_a_fun_fun$ 0 )
(declare-sort A_llist_b_fun_a_llist_b_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_a_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_b_fun_fun$ 0 )
(declare-sort A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-codatatypes ()((B_llist$ (lNil$ )(lCons$ (lhd$ B$ )(ltl$ B_llist$ )))(A_llist$ (lNil$a )(lCons$a (lhd$a A$ )(ltl$a A_llist$ )))(A_llist_llist$ (lNil$b )(lCons$b (lhd$b A_llist$ )(ltl$b A_llist_llist$ )))))
(declare-fun f$ ()A_b_fun$ )
(declare-fun x$ ()A_llist$ )
(declare-fun uu$ ()A_llist_bool_fun$ )
(declare-fun uua$ ()A_llist_a_fun$ )
(declare-fun uub$ ()A_llist_a_llist_fun$ )
(declare-fun uuc$ ()A_a_fun$ )
(declare-fun uud$ ()B_b_fun$ )
(declare-fun uue$ ()B_b_llist_b_llist_fun_fun$ )
(declare-fun uuf$ ()A_a_llist_a_llist_fun_fun$ )
(declare-fun uug$ (A$ )A_llist_a_fun$ )
(declare-fun uuh$ (B$ )B_b_fun$ )
(declare-fun uui$ (B$ )A_b_fun$ )
(declare-fun uuj$ (A$ )A_a_fun$ )
(declare-fun comp$ (A_b_fun$ )A_llist_a_fun_a_llist_b_fun_fun$ )
(declare-fun lmap$ (A_b_fun$ )A_llist_b_llist_fun$ )
(declare-fun comp$a (B_b_fun$ )A_b_fun_a_b_fun_fun$ )
(declare-fun comp$b (A_b_fun$ )A_a_fun_a_b_fun_fun$ )
(declare-fun comp$c (B_a_fun$ )A_b_fun_a_a_fun_fun$ )
(declare-fun comp$d (A_b_fun$ )B_a_fun_b_b_fun_fun$ )
(declare-fun comp$e (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun comp$f (B_b_fun$ )B_b_fun_b_b_fun_fun$ )
(declare-fun comp$g (B_a_fun$ )A_llist_b_fun_a_llist_a_fun_fun$ )
(declare-fun comp$h (A_a_fun$ )A_llist_a_fun_a_llist_a_fun_fun$ )
(declare-fun comp$i (A_llist_a_fun$ )A_a_llist_fun_a_a_fun_fun$ )
(declare-fun comp$j (A_llist_a_fun$ )A_llist_a_llist_fun_a_llist_a_fun_fun$ )
(declare-fun comp$k (B_b_fun$ )A_llist_b_fun_a_llist_b_fun_fun$ )
(declare-fun comp$l (A_llist_b_fun$ )A_llist_a_llist_fun_a_llist_b_fun_fun$ )
(declare-fun comp$m (A_llist_b_fun$ )A_a_llist_fun_a_b_fun_fun$ )
(declare-fun lmap$a (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lmap$b (B_b_fun$ )B_llist_b_llist_fun$ )
(declare-fun lmap$c (B_a_fun$ )B_llist_a_llist_fun$ )
(declare-fun lmap$d (A_llist_a_fun$ )A_llist_llist_a_llist_fun$ )
(declare-fun lmap$e (A_llist_b_fun$ )A_llist_llist_b_llist_fun$ )
(declare-fun lmap$f (A_a_llist_fun$ A_llist$ )A_llist_llist$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_llist_a_fun$ A_llist$ )A$ )
(declare-fun fun_app$c (B_b_fun$ B$ )B$ )
(declare-fun fun_app$d (A_b_fun$ A$ )B$ )
(declare-fun fun_app$e (A_a_fun$ A$ )A$ )
(declare-fun fun_app$f (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$g (B_b_llist_b_llist_fun_fun$ B$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$h (A_a_llist_a_llist_fun_fun$ A$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$i (A_llist_b_llist_fun$ A_llist$ )B_llist$ )
(declare-fun fun_app$j (A_llist_a_fun_a_llist_b_fun_fun$ A_llist_a_fun$ )A_llist_b_fun$ )
(declare-fun fun_app$k (B_llist_a_llist_fun$ B_llist$ )A_llist$ )
(declare-fun fun_app$l (A_llist_llist_a_llist_fun$ A_llist_llist$ )A_llist$ )
(declare-fun fun_app$m (A_llist_llist_b_llist_fun$ A_llist_llist$ )B_llist$ )
(declare-fun fun_app$n (A_b_fun_a_b_fun_fun$ A_b_fun$ )A_b_fun$ )
(declare-fun fun_app$o (A_a_fun_a_b_fun_fun$ A_a_fun$ )A_b_fun$ )
(declare-fun fun_app$p (A_b_fun_a_a_fun_fun$ A_b_fun$ )A_a_fun$ )
(declare-fun fun_app$q (B_a_fun_b_b_fun_fun$ B_a_fun$ )B_b_fun$ )
(declare-fun fun_app$r (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$s (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun$ )
(declare-fun fun_app$t (A_llist_b_fun_a_llist_a_fun_fun$ A_llist_b_fun$ )A_llist_a_fun$ )
(declare-fun fun_app$u (A_llist_a_fun_a_llist_a_fun_fun$ A_llist_a_fun$ )A_llist_a_fun$ )
(declare-fun fun_app$v (A_a_llist_fun_a_a_fun_fun$ A_a_llist_fun$ )A_a_fun$ )
(declare-fun fun_app$w (A_llist_b_fun$ A_llist$ )B$ )
(declare-fun fun_app$x (A_llist_a_llist_fun_a_llist_a_fun_fun$ A_llist_a_llist_fun$ )A_llist_a_fun$ )
(declare-fun fun_app$y (A_llist_b_fun_a_llist_b_fun_fun$ A_llist_b_fun$ )A_llist_b_fun$ )
(declare-fun fun_app$z (A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ A_a_llist_a_llist_fun_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$aa (A_llist_a_llist_fun_a_llist_b_fun_fun$ A_llist_a_llist_fun$ )A_llist_b_fun$ )
(declare-fun fun_app$ab (A_a_llist_fun_a_b_fun_fun$ A_a_llist_fun$ )A_b_fun$ )
(declare-fun fun_app$ac (B_a_fun$ B$ )A$ )
(declare-fun case_llist$ (B_llist$ B_b_llist_b_llist_fun_fun$ B_llist$ )B_llist$ )
(declare-fun case_llist$a (A_llist$ )A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ )
(declare-fun unfold_llist$ (A_llist_bool_fun$ A_llist_b_fun$ A_llist_a_llist_fun$ A_llist$ )B_llist$ )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uu$ ?v0 )(= ?v0 lNil$a )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a uub$ ?v0 )(ltl$a ?v0 )):pattern ((fun_app$a uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b uua$ ?v0 )(lhd$a ?v0 )):pattern ((fun_app$b uua$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$c (uuh$ ?v0 )?v1 )?v0 ):pattern ((fun_app$c (uuh$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ ))(! (= (fun_app$d (uui$ ?v0 )?v1 )?v0 ):pattern ((fun_app$d (uui$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$b (uug$ ?v0 )?v1 )?v0 ):pattern ((fun_app$b (uug$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$e (uuj$ ?v0 )?v1 )?v0 ):pattern ((fun_app$e (uuj$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (fun_app$f (fun_app$g uue$ ?v0 )?v1 )?v1 ):pattern ((fun_app$f (fun_app$g uue$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$a (fun_app$h uuf$ ?v0 )?v1 )?v1 ):pattern ((fun_app$a (fun_app$h uuf$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$c uud$ ?v0 )?v0 ):pattern ((fun_app$c uud$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$e uuc$ ?v0 )?v0 ):pattern ((fun_app$e uuc$ ?v0 )))):named a10 ))
(assert (! (not (= (fun_app$i (lmap$ f$ )x$ )(unfold_llist$ uu$ (fun_app$j (comp$ f$ )uua$ )uub$ x$ ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$a (lmap$a uuc$ )?v0 )?v0 )):named a12 ))
(assert (! (forall ((?v0 B_llist$ ))(= (fun_app$f (lmap$b uud$ )?v0 )?v0 )):named a13 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$a (fun_app$k (lmap$c ?v0 )?v1 ))(fun_app$k (lmap$c ?v0 )(ltl$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (ltl$a (fun_app$l (lmap$d ?v0 )?v1 ))(fun_app$l (lmap$d ?v0 )(ltl$b ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist_b_fun$ )(?v1 A_llist_llist$ ))(= (ltl$ (fun_app$m (lmap$e ?v0 )?v1 ))(fun_app$m (lmap$e ?v0 )(ltl$b ?v1 )))):named a16 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (ltl$ (fun_app$f (lmap$b ?v0 )?v1 ))(fun_app$f (lmap$b ?v0 )(ltl$ ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$a (fun_app$a (lmap$a ?v0 )?v1 ))(fun_app$a (lmap$a ?v0 )(ltl$a ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (ltl$ (fun_app$i (lmap$ ?v0 )?v1 ))(fun_app$i (lmap$ ?v0 )(ltl$a ?v1 )))):named a19 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= (fun_app$k (lmap$c ?v0 )?v1 )lNil$a )(= ?v1 lNil$ ))):named a20 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (= (fun_app$l (lmap$d ?v0 )?v1 )lNil$a )(= ?v1 lNil$b ))):named a21 ))
(assert (! (forall ((?v0 A_llist_b_fun$ )(?v1 A_llist_llist$ ))(= (= (fun_app$m (lmap$e ?v0 )?v1 )lNil$ )(= ?v1 lNil$b ))):named a22 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= (fun_app$f (lmap$b ?v0 )?v1 )lNil$ )(= ?v1 lNil$ ))):named a23 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= (fun_app$a (lmap$a ?v0 )?v1 )lNil$a )(= ?v1 lNil$a ))):named a24 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= (fun_app$i (lmap$ ?v0 )?v1 )lNil$ )(= ?v1 lNil$a ))):named a25 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= lNil$a (fun_app$k (lmap$c ?v0 )?v1 ))(= ?v1 lNil$ ))):named a26 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (= lNil$a (fun_app$l (lmap$d ?v0 )?v1 ))(= ?v1 lNil$b ))):named a27 ))
(assert (! (forall ((?v0 A_llist_b_fun$ )(?v1 A_llist_llist$ ))(= (= lNil$ (fun_app$m (lmap$e ?v0 )?v1 ))(= ?v1 lNil$b ))):named a28 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= lNil$ (fun_app$f (lmap$b ?v0 )?v1 ))(= ?v1 lNil$ ))):named a29 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= lNil$a (fun_app$a (lmap$a ?v0 )?v1 ))(= ?v1 lNil$a ))):named a30 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$i (lmap$ ?v0 )?v1 ))(= ?v1 lNil$a ))):named a31 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (fun_app$f (lmap$b ?v0 )(fun_app$i (lmap$ ?v1 )?v2 ))(fun_app$i (lmap$ (fun_app$n (comp$a ?v0 )?v1 ))?v2 ))):named a32 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$i (lmap$ ?v0 )(fun_app$a (lmap$a ?v1 )?v2 ))(fun_app$i (lmap$ (fun_app$o (comp$b ?v0 )?v1 ))?v2 ))):named a33 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist_a_fun$ )(?v2 A_llist_llist$ ))(= (fun_app$i (lmap$ ?v0 )(fun_app$l (lmap$d ?v1 )?v2 ))(fun_app$m (lmap$e (fun_app$j (comp$ ?v0 )?v1 ))?v2 ))):named a34 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (fun_app$k (lmap$c ?v0 )(fun_app$i (lmap$ ?v1 )?v2 ))(fun_app$a (lmap$a (fun_app$p (comp$c ?v0 )?v1 ))?v2 ))):named a35 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (fun_app$i (lmap$ ?v0 )(fun_app$k (lmap$c ?v1 )?v2 ))(fun_app$f (lmap$b (fun_app$q (comp$d ?v0 )?v1 ))?v2 ))):named a36 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$a (lmap$a ?v0 )(fun_app$a (lmap$a ?v1 )?v2 ))(fun_app$a (lmap$a (fun_app$r (comp$e ?v0 )?v1 ))?v2 ))):named a37 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (fun_app$f (lmap$b ?v0 )(fun_app$f (lmap$b ?v1 )?v2 ))(fun_app$f (lmap$b (fun_app$s (comp$f ?v0 )?v1 ))?v2 ))):named a38 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_llist_b_fun$ )(?v2 A_llist_llist$ ))(= (fun_app$k (lmap$c ?v0 )(fun_app$m (lmap$e ?v1 )?v2 ))(fun_app$l (lmap$d (fun_app$t (comp$g ?v0 )?v1 ))?v2 ))):named a39 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist_a_fun$ )(?v2 A_llist_llist$ ))(= (fun_app$a (lmap$a ?v0 )(fun_app$l (lmap$d ?v1 )?v2 ))(fun_app$l (lmap$d (fun_app$u (comp$h ?v0 )?v1 ))?v2 ))):named a40 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_a_llist_fun$ )(?v2 A_llist$ ))(= (fun_app$l (lmap$d ?v0 )(lmap$f ?v1 ?v2 ))(fun_app$a (lmap$a (fun_app$v (comp$i ?v0 )?v1 ))?v2 ))):named a41 ))
(assert (! (forall ((?v0 B_a_fun$ ))(! (= (fun_app$k (lmap$c ?v0 )lNil$ )lNil$a ):pattern ((lmap$c ?v0 )))):named a42 ))
(assert (! (forall ((?v0 A_llist_a_fun$ ))(! (= (fun_app$l (lmap$d ?v0 )lNil$b )lNil$a ):pattern ((lmap$d ?v0 )))):named a43 ))
(assert (! (forall ((?v0 A_llist_b_fun$ ))(! (= (fun_app$m (lmap$e ?v0 )lNil$b )lNil$ ):pattern ((lmap$e ?v0 )))):named a44 ))
(assert (! (forall ((?v0 B_b_fun$ ))(! (= (fun_app$f (lmap$b ?v0 )lNil$ )lNil$ ):pattern ((lmap$b ?v0 )))):named a45 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$a (lmap$a ?v0 )lNil$a )lNil$a ):pattern ((lmap$a ?v0 )))):named a46 ))
(assert (! (forall ((?v0 A_b_fun$ ))(! (= (fun_app$i (lmap$ ?v0 )lNil$a )lNil$ ):pattern ((lmap$ ?v0 )))):named a47 ))
(assert (! (= (ltl$ lNil$ )lNil$ ):named a48 ))
(assert (! (= (ltl$a lNil$a )lNil$a ):named a49 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist_b_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (lhd$ (unfold_llist$ ?v0 ?v2 ?v3 ?v1 ))(fun_app$w ?v2 ?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist_b_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (ltl$ (unfold_llist$ ?v0 ?v2 ?v3 ?v1 ))(unfold_llist$ ?v0 ?v2 ?v3 (fun_app$a ?v3 ?v1 ))))):named a51 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist_b_fun$ )(?v3 A_llist_a_llist_fun$ ))(! (=> (fun_app$ ?v0 ?v1 )(= (unfold_llist$ ?v0 ?v2 ?v3 ?v1 )lNil$ )):pattern ((unfold_llist$ ?v0 ?v2 ?v3 ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$b (fun_app$x (comp$j ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$x (comp$j ?v0 )?v1 )?v2 )))):named a53 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_llist_b_fun$ )(?v2 A_llist$ ))(! (= (fun_app$w (fun_app$y (comp$k ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$w ?v1 ?v2 ))):pattern ((fun_app$w (fun_app$y (comp$k ?v0 )?v1 )?v2 )))):named a54 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$d (fun_app$n (comp$a ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$n (comp$a ?v0 )?v1 )?v2 )))):named a55 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$d (fun_app$o (comp$b ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$o (comp$b ?v0 )?v1 )?v2 )))):named a56 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist_a_fun$ )(?v2 A_llist$ ))(! (= (fun_app$b (fun_app$u (comp$h ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$u (comp$h ?v0 )?v1 )?v2 )))):named a57 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist_a_fun$ )(?v2 A_llist$ ))(! (= (fun_app$w (fun_app$j (comp$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$w (fun_app$j (comp$ ?v0 )?v1 )?v2 )))):named a58 ))
(assert (! (forall ((?v0 B_llist$ ))(= (ltl$ ?v0 )(case_llist$ lNil$ uue$ ?v0 ))):named a59 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ltl$a ?v0 )(fun_app$a (fun_app$z (case_llist$a lNil$a )uuf$ )?v0 ))):named a60 ))
(assert (! (forall ((?v0 A_llist_b_fun$ ))(= (fun_app$y (comp$k uud$ )?v0 )?v0 )):named a61 ))
(assert (! (forall ((?v0 A_b_fun$ ))(= (fun_app$n (comp$a uud$ )?v0 )?v0 )):named a62 ))
(assert (! (forall ((?v0 A_llist_a_fun$ ))(= (fun_app$u (comp$h uuc$ )?v0 )?v0 )):named a63 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(= (fun_app$b (fun_app$x (comp$j (uug$ ?v0 ))?v1 )?v2 )?v0 )):named a64 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_b_fun$ )(?v2 A_llist$ ))(= (fun_app$w (fun_app$y (comp$k (uuh$ ?v0 ))?v1 )?v2 )?v0 )):named a65 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_fun$ )(?v2 A$ ))(= (fun_app$d (fun_app$n (comp$a (uuh$ ?v0 ))?v1 )?v2 )?v0 )):named a66 ))
(assert (! (forall ((?v0 B$ )(?v1 A_a_fun$ )(?v2 A$ ))(= (fun_app$d (fun_app$o (comp$b (uui$ ?v0 ))?v1 )?v2 )?v0 )):named a67 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist_a_fun$ )(?v2 A_llist$ ))(= (fun_app$b (fun_app$u (comp$h (uuj$ ?v0 ))?v1 )?v2 )?v0 )):named a68 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist_a_fun$ )(?v2 A_llist$ ))(= (fun_app$w (fun_app$j (comp$ (uui$ ?v0 ))?v1 )?v2 )?v0 )):named a69 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(=> (= ?v0 (lCons$ (lhd$ ?v0 )(ltl$ ?v0 )))false ))false )):named a70 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$a )false )(=> (= ?v0 (lCons$a (lhd$a ?v0 )(ltl$a ?v0 )))false ))false )):named a71 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B$ )(?v2 B_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))(and (not (= ?v0 lNil$ ))(and (= (lhd$ ?v0 )?v1 )(= (ltl$ ?v0 )?v2 ))))):named a72 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$a ?v1 ?v2 ))(and (not (= ?v0 lNil$a ))(and (= (lhd$a ?v0 )?v1 )(= (ltl$a ?v0 )?v2 ))))):named a73 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_llist_a_fun$ ))(= (fun_app$y (comp$k ?v0 )(fun_app$j (comp$ ?v1 )?v2 ))(fun_app$j (comp$ (fun_app$n (comp$a ?v0 )?v1 ))?v2 ))):named a74 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_llist_a_fun$ ))(= (fun_app$j (comp$ ?v0 )(fun_app$u (comp$h ?v1 )?v2 ))(fun_app$j (comp$ (fun_app$o (comp$b ?v0 )?v1 ))?v2 ))):named a75 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist_a_fun$ )(?v2 A_llist_a_llist_fun$ ))(= (fun_app$j (comp$ ?v0 )(fun_app$x (comp$j ?v1 )?v2 ))(fun_app$aa (comp$l (fun_app$j (comp$ ?v0 )?v1 ))?v2 ))):named a76 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ ))(= (fun_app$n (comp$a ?v0 )(fun_app$n (comp$a ?v1 )?v2 ))(fun_app$n (comp$a (fun_app$s (comp$f ?v0 )?v1 ))?v2 ))):named a77 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ ))(= (fun_app$n (comp$a ?v0 )(fun_app$o (comp$b ?v1 )?v2 ))(fun_app$o (comp$b (fun_app$n (comp$a ?v0 )?v1 ))?v2 ))):named a78 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 A_b_fun$ ))(= (fun_app$o (comp$b ?v0 )(fun_app$p (comp$c ?v1 )?v2 ))(fun_app$n (comp$a (fun_app$q (comp$d ?v0 )?v1 ))?v2 ))):named a79 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(= (fun_app$o (comp$b ?v0 )(fun_app$r (comp$e ?v1 )?v2 ))(fun_app$o (comp$b (fun_app$o (comp$b ?v0 )?v1 ))?v2 ))):named a80 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_llist_a_fun$ ))(= (fun_app$t (comp$g ?v0 )(fun_app$j (comp$ ?v1 )?v2 ))(fun_app$u (comp$h (fun_app$p (comp$c ?v0 )?v1 ))?v2 ))):named a81 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 A_llist_b_fun$ ))(= (fun_app$j (comp$ ?v0 )(fun_app$t (comp$g ?v1 )?v2 ))(fun_app$y (comp$k (fun_app$q (comp$d ?v0 )?v1 ))?v2 ))):named a82 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_llist_b_fun$ ))(= (fun_app$y (comp$k ?v0 )(fun_app$y (comp$k ?v1 )?v2 ))(fun_app$y (comp$k (fun_app$s (comp$f ?v0 )?v1 ))?v2 ))):named a83 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_llist_a_fun$ ))(= (fun_app$j (comp$ (fun_app$n (comp$a ?v0 )?v1 ))?v2 )(fun_app$y (comp$k ?v0 )(fun_app$j (comp$ ?v1 )?v2 )))):named a84 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_llist_a_fun$ ))(= (fun_app$j (comp$ (fun_app$o (comp$b ?v0 )?v1 ))?v2 )(fun_app$j (comp$ ?v0 )(fun_app$u (comp$h ?v1 )?v2 )))):named a85 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist_a_fun$ )(?v2 A_llist_a_llist_fun$ ))(= (fun_app$aa (comp$l (fun_app$j (comp$ ?v0 )?v1 ))?v2 )(fun_app$j (comp$ ?v0 )(fun_app$x (comp$j ?v1 )?v2 )))):named a86 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ ))(= (fun_app$n (comp$a (fun_app$s (comp$f ?v0 )?v1 ))?v2 )(fun_app$n (comp$a ?v0 )(fun_app$n (comp$a ?v1 )?v2 )))):named a87 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 A_b_fun$ ))(= (fun_app$n (comp$a (fun_app$q (comp$d ?v0 )?v1 ))?v2 )(fun_app$o (comp$b ?v0 )(fun_app$p (comp$c ?v1 )?v2 )))):named a88 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ ))(= (fun_app$o (comp$b (fun_app$n (comp$a ?v0 )?v1 ))?v2 )(fun_app$n (comp$a ?v0 )(fun_app$o (comp$b ?v1 )?v2 )))):named a89 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(= (fun_app$o (comp$b (fun_app$o (comp$b ?v0 )?v1 ))?v2 )(fun_app$o (comp$b ?v0 )(fun_app$r (comp$e ?v1 )?v2 )))):named a90 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist_a_fun$ )(?v2 A_a_llist_fun$ ))(= (fun_app$ab (comp$m (fun_app$j (comp$ ?v0 )?v1 ))?v2 )(fun_app$o (comp$b ?v0 )(fun_app$v (comp$i ?v1 )?v2 )))):named a91 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_llist_b_fun$ )(?v2 A_a_llist_fun$ ))(= (fun_app$ab (comp$m (fun_app$y (comp$k ?v0 )?v1 ))?v2 )(fun_app$n (comp$a ?v0 )(fun_app$ab (comp$m ?v1 )?v2 )))):named a92 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 A_llist_b_fun$ ))(= (fun_app$y (comp$k (fun_app$q (comp$d ?v0 )?v1 ))?v2 )(fun_app$j (comp$ ?v0 )(fun_app$t (comp$g ?v1 )?v2 )))):named a93 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$b (fun_app$x (comp$j ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$x (comp$j ?v0 )?v1 )?v2 )))):named a94 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_llist_b_fun$ )(?v2 A_llist$ ))(! (= (fun_app$w (fun_app$y (comp$k ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$w ?v1 ?v2 ))):pattern ((fun_app$w (fun_app$y (comp$k ?v0 )?v1 )?v2 )))):named a95 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$d (fun_app$n (comp$a ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$n (comp$a ?v0 )?v1 )?v2 )))):named a96 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$d (fun_app$o (comp$b ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$e ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$o (comp$b ?v0 )?v1 )?v2 )))):named a97 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist_a_fun$ )(?v2 A_llist$ ))(! (= (fun_app$b (fun_app$u (comp$h ?v0 )?v1 )?v2 )(fun_app$e ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$u (comp$h ?v0 )?v1 )?v2 )))):named a98 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist_a_fun$ )(?v2 A_llist$ ))(! (= (fun_app$w (fun_app$j (comp$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$w (fun_app$j (comp$ ?v0 )?v1 )?v2 )))):named a99 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist_a_fun$ )(?v2 A_b_fun$ )(?v3 A_llist_a_fun$ ))(=> (and (= (fun_app$j (comp$ ?v0 )?v1 )(fun_app$j (comp$ ?v2 )?v3 ))(=> (forall ((?v4 A_llist$ ))(= (fun_app$d ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$b ?v3 ?v4 ))))false ))false )):named a100 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ ))(=> (and (= (fun_app$n (comp$a ?v0 )?v1 )(fun_app$n (comp$a ?v2 )?v3 ))(=> (forall ((?v4 A$ ))(= (fun_app$c ?v0 (fun_app$d ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$d ?v3 ?v4 ))))false ))false )):named a101 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ ))(=> (and (= (fun_app$n (comp$a ?v0 )?v1 )(fun_app$o (comp$b ?v2 )?v3 ))(=> (forall ((?v4 A$ ))(= (fun_app$c ?v0 (fun_app$d ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$e ?v3 ?v4 ))))false ))false )):named a102 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ ))(=> (and (= (fun_app$o (comp$b ?v0 )?v1 )(fun_app$n (comp$a ?v2 )?v3 ))(=> (forall ((?v4 A$ ))(= (fun_app$d ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$d ?v3 ?v4 ))))false ))false )):named a103 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ ))(=> (and (= (fun_app$o (comp$b ?v0 )?v1 )(fun_app$o (comp$b ?v2 )?v3 ))(=> (forall ((?v4 A$ ))(= (fun_app$d ?v0 (fun_app$e ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$e ?v3 ?v4 ))))false ))false )):named a104 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist_a_fun$ )(?v2 B_b_fun$ )(?v3 A_llist_b_fun$ ))(=> (and (= (fun_app$j (comp$ ?v0 )?v1 )(fun_app$y (comp$k ?v2 )?v3 ))(=> (forall ((?v4 A_llist$ ))(= (fun_app$d ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$w ?v3 ?v4 ))))false ))false )):named a105 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_llist_b_fun$ )(?v2 A_b_fun$ )(?v3 A_llist_a_fun$ ))(=> (and (= (fun_app$y (comp$k ?v0 )?v1 )(fun_app$j (comp$ ?v2 )?v3 ))(=> (forall ((?v4 A_llist$ ))(= (fun_app$c ?v0 (fun_app$w ?v1 ?v4 ))(fun_app$d ?v2 (fun_app$b ?v3 ?v4 ))))false ))false )):named a106 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_llist_b_fun$ )(?v2 B_b_fun$ )(?v3 A_llist_b_fun$ ))(=> (and (= (fun_app$y (comp$k ?v0 )?v1 )(fun_app$y (comp$k ?v2 )?v3 ))(=> (forall ((?v4 A_llist$ ))(= (fun_app$c ?v0 (fun_app$w ?v1 ?v4 ))(fun_app$c ?v2 (fun_app$w ?v3 ?v4 ))))false ))false )):named a107 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist_a_fun$ )(?v2 A_a_fun$ )(?v3 A_llist_a_fun$ ))(=> (and (= (fun_app$u (comp$h ?v0 )?v1 )(fun_app$u (comp$h ?v2 )?v3 ))(=> (forall ((?v4 A_llist$ ))(= (fun_app$e ?v0 (fun_app$b ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$b ?v3 ?v4 ))))false ))false )):named a108 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_a_fun$ )(?v3 A_llist_a_fun$ ))(=> (and (= (fun_app$x (comp$j ?v0 )?v1 )(fun_app$u (comp$h ?v2 )?v3 ))(=> (forall ((?v4 A_llist$ ))(= (fun_app$b ?v0 (fun_app$a ?v1 ?v4 ))(fun_app$e ?v2 (fun_app$b ?v3 ?v4 ))))false ))false )):named a109 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist_a_fun$ )(?v2 A_b_fun$ )(?v3 A_llist_a_fun$ )(?v4 B_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$j (comp$ ?v0 )?v1 )(fun_app$j (comp$ ?v2 )?v3 ))(= (fun_app$n (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$j (comp$ (fun_app$n (comp$a ?v4 )?v0 ))?v1 )(fun_app$j (comp$ ?v5 )?v3 )))):named a110 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_a_fun$ )(?v3 A_llist_a_fun$ )(?v4 A_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$x (comp$j ?v0 )?v1 )(fun_app$u (comp$h ?v2 )?v3 ))(= (fun_app$o (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$aa (comp$l (fun_app$j (comp$ ?v4 )?v0 ))?v1 )(fun_app$j (comp$ ?v5 )?v3 )))):named a111 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist_a_fun$ )(?v2 A_llist_a_fun$ )(?v3 A_llist_a_llist_fun$ )(?v4 A_b_fun$ )(?v5 A_llist_b_fun$ ))(=> (and (= (fun_app$u (comp$h ?v0 )?v1 )(fun_app$x (comp$j ?v2 )?v3 ))(= (fun_app$j (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$j (comp$ (fun_app$o (comp$b ?v4 )?v0 ))?v1 )(fun_app$aa (comp$l ?v5 )?v3 )))):named a112 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 B_a_fun$ )(?v3 A_b_fun$ )(?v4 A_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$r (comp$e ?v0 )?v1 )(fun_app$p (comp$c ?v2 )?v3 ))(= (fun_app$q (comp$d ?v4 )?v2 )?v5 ))(= (fun_app$o (comp$b (fun_app$o (comp$b ?v4 )?v0 ))?v1 )(fun_app$n (comp$a ?v5 )?v3 )))):named a113 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$p (comp$c ?v0 )?v1 )(fun_app$r (comp$e ?v2 )?v3 ))(= (fun_app$o (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$n (comp$a (fun_app$q (comp$d ?v4 )?v0 ))?v1 )(fun_app$o (comp$b ?v5 )?v3 )))):named a114 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$r (comp$e ?v0 )?v1 )(fun_app$r (comp$e ?v2 )?v3 ))(= (fun_app$o (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$o (comp$b (fun_app$o (comp$b ?v4 )?v0 ))?v1 )(fun_app$o (comp$b ?v5 )?v3 )))):named a115 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$n (comp$a ?v0 )?v1 )(fun_app$n (comp$a ?v2 )?v3 ))(= (fun_app$s (comp$f ?v4 )?v2 )?v5 ))(= (fun_app$n (comp$a (fun_app$s (comp$f ?v4 )?v0 ))?v1 )(fun_app$n (comp$a ?v5 )?v3 )))):named a116 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ )(?v4 B_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$n (comp$a ?v0 )?v1 )(fun_app$o (comp$b ?v2 )?v3 ))(= (fun_app$n (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$n (comp$a (fun_app$s (comp$f ?v4 )?v0 ))?v1 )(fun_app$o (comp$b ?v5 )?v3 )))):named a117 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 B_b_fun$ )(?v5 B_b_fun$ ))(=> (and (= (fun_app$o (comp$b ?v0 )?v1 )(fun_app$n (comp$a ?v2 )?v3 ))(= (fun_app$s (comp$f ?v4 )?v2 )?v5 ))(= (fun_app$o (comp$b (fun_app$n (comp$a ?v4 )?v0 ))?v1 )(fun_app$n (comp$a ?v5 )?v3 )))):named a118 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ )(?v4 B_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$o (comp$b ?v0 )?v1 )(fun_app$o (comp$b ?v2 )?v3 ))(= (fun_app$n (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$o (comp$b (fun_app$n (comp$a ?v4 )?v0 ))?v1 )(fun_app$o (comp$b ?v5 )?v3 )))):named a119 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ )(?v4 A_llist_a_fun$ )(?v5 A_llist_a_fun$ ))(=> (and (= (fun_app$n (comp$a ?v0 )?v1 )(fun_app$o (comp$b ?v2 )?v3 ))(= (fun_app$u (comp$h ?v3 )?v4 )?v5 ))(= (fun_app$y (comp$k ?v0 )(fun_app$j (comp$ ?v1 )?v4 ))(fun_app$j (comp$ ?v2 )?v5 )))):named a120 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 A_llist_a_fun$ )(?v5 A_llist_b_fun$ ))(=> (and (= (fun_app$o (comp$b ?v0 )?v1 )(fun_app$n (comp$a ?v2 )?v3 ))(= (fun_app$j (comp$ ?v3 )?v4 )?v5 ))(= (fun_app$j (comp$ ?v0 )(fun_app$u (comp$h ?v1 )?v4 ))(fun_app$y (comp$k ?v2 )?v5 )))):named a121 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist_a_fun$ )(?v2 A_b_fun$ )(?v3 A_llist_a_fun$ )(?v4 A_llist_a_llist_fun$ )(?v5 A_llist_a_fun$ ))(=> (and (= (fun_app$j (comp$ ?v0 )?v1 )(fun_app$j (comp$ ?v2 )?v3 ))(= (fun_app$x (comp$j ?v3 )?v4 )?v5 ))(= (fun_app$j (comp$ ?v0 )(fun_app$x (comp$j ?v1 )?v4 ))(fun_app$j (comp$ ?v2 )?v5 )))):named a122 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 A_b_fun$ )(?v3 B_a_fun$ )(?v4 A_b_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$s (comp$f ?v0 )?v1 )(fun_app$q (comp$d ?v2 )?v3 ))(= (fun_app$p (comp$c ?v3 )?v4 )?v5 ))(= (fun_app$n (comp$a ?v0 )(fun_app$n (comp$a ?v1 )?v4 ))(fun_app$o (comp$b ?v2 )?v5 )))):named a123 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 A_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$s (comp$f ?v0 )?v1 )(fun_app$s (comp$f ?v2 )?v3 ))(= (fun_app$n (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$n (comp$a ?v0 )(fun_app$n (comp$a ?v1 )?v4 ))(fun_app$n (comp$a ?v2 )?v5 )))):named a124 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 A_b_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$q (comp$d ?v0 )?v1 )(fun_app$s (comp$f ?v2 )?v3 ))(= (fun_app$n (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$o (comp$b ?v0 )(fun_app$p (comp$c ?v1 )?v4 ))(fun_app$n (comp$a ?v2 )?v5 )))):named a125 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 A_a_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$n (comp$a ?v0 )?v1 )(fun_app$n (comp$a ?v2 )?v3 ))(= (fun_app$o (comp$b ?v3 )?v4 )?v5 ))(= (fun_app$n (comp$a ?v0 )(fun_app$o (comp$b ?v1 )?v4 ))(fun_app$n (comp$a ?v2 )?v5 )))):named a126 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ )(?v4 A_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$n (comp$a ?v0 )?v1 )(fun_app$o (comp$b ?v2 )?v3 ))(= (fun_app$r (comp$e ?v3 )?v4 )?v5 ))(= (fun_app$n (comp$a ?v0 )(fun_app$o (comp$b ?v1 )?v4 ))(fun_app$o (comp$b ?v2 )?v5 )))):named a127 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 B_b_fun$ )(?v3 A_b_fun$ )(?v4 A_a_fun$ )(?v5 A_b_fun$ ))(=> (and (= (fun_app$o (comp$b ?v0 )?v1 )(fun_app$n (comp$a ?v2 )?v3 ))(= (fun_app$o (comp$b ?v3 )?v4 )?v5 ))(= (fun_app$o (comp$b ?v0 )(fun_app$r (comp$e ?v1 )?v4 ))(fun_app$n (comp$a ?v2 )?v5 )))):named a128 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_b_fun$ )(?v3 A_a_fun$ )(?v4 A_a_fun$ )(?v5 A_a_fun$ ))(=> (and (= (fun_app$o (comp$b ?v0 )?v1 )(fun_app$o (comp$b ?v2 )?v3 ))(= (fun_app$r (comp$e ?v3 )?v4 )?v5 ))(= (fun_app$o (comp$b ?v0 )(fun_app$r (comp$e ?v1 )?v4 ))(fun_app$o (comp$b ?v2 )?v5 )))):named a129 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a130 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a131 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_a_llist_fun_fun$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$a (fun_app$z (case_llist$a ?v0 )?v1 )(lCons$a ?v2 ?v3 ))(fun_app$a (fun_app$h ?v1 ?v2 )?v3 )):pattern ((fun_app$a (fun_app$z (case_llist$a ?v0 )?v1 )(lCons$a ?v2 ?v3 ))))):named a132 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (fun_app$l (lmap$d ?v0 )?v1 )(lCons$a ?v2 ?v3 ))(exists ((?v4 A_llist$ )(?v5 A_llist_llist$ ))(and (= ?v1 (lCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$b ?v0 ?v4 ))(= ?v3 (fun_app$l (lmap$d ?v0 )?v5 ))))))):named a133 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (fun_app$a (lmap$a ?v0 )?v1 )(lCons$a ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_llist$ ))(and (= ?v1 (lCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$e ?v0 ?v4 ))(= ?v3 (fun_app$a (lmap$a ?v0 )?v5 ))))))):named a134 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (fun_app$k (lmap$c ?v0 )?v1 )(lCons$a ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_llist$ ))(and (= ?v1 (lCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$ac ?v0 ?v4 ))(= ?v3 (fun_app$k (lmap$c ?v0 )?v5 ))))))):named a135 ))
(assert (! (forall ((?v0 A_llist_b_fun$ )(?v1 A_llist_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (fun_app$m (lmap$e ?v0 )?v1 )(lCons$ ?v2 ?v3 ))(exists ((?v4 A_llist$ )(?v5 A_llist_llist$ ))(and (= ?v1 (lCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$w ?v0 ?v4 ))(= ?v3 (fun_app$m (lmap$e ?v0 )?v5 ))))))):named a136 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (fun_app$f (lmap$b ?v0 )?v1 )(lCons$ ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_llist$ ))(and (= ?v1 (lCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$c ?v0 ?v4 ))(= ?v3 (fun_app$f (lmap$b ?v0 )?v5 ))))))):named a137 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (fun_app$i (lmap$ ?v0 )?v1 )(lCons$ ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_llist$ ))(and (= ?v1 (lCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$d ?v0 ?v4 ))(= ?v3 (fun_app$i (lmap$ ?v0 )?v5 ))))))):named a138 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (fun_app$f (lmap$b ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ (fun_app$c ?v0 ?v1 )(fun_app$f (lmap$b ?v0 )?v2 ))):pattern ((fun_app$f (lmap$b ?v0 )(lCons$ ?v1 ?v2 ))))):named a139 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$i (lmap$ ?v0 )(lCons$a ?v1 ?v2 ))(lCons$ (fun_app$d ?v0 ?v1 )(fun_app$i (lmap$ ?v0 )?v2 ))):pattern ((fun_app$i (lmap$ ?v0 )(lCons$a ?v1 ?v2 ))))):named a140 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(not (= lNil$a (lCons$a ?v0 ?v1 )))):named a141 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$a )false )(forall ((?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$a ?v1 ?v2 ))false )))false )):named a142 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (ltl$a (lCons$a ?v0 ?v1 ))?v1 ):pattern ((lCons$a ?v0 ?v1 )))):named a143 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lhd$a (lCons$a ?v0 ?v1 ))?v0 ):pattern ((lCons$a ?v0 ?v1 )))):named a144 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist_b_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (unfold_llist$ ?v0 ?v2 ?v3 ?v1 )(lCons$ (fun_app$w ?v2 ?v1 )(unfold_llist$ ?v0 ?v2 ?v3 (fun_app$a ?v3 ?v1 )))))):named a145 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_b_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist$ ))(= (unfold_llist$ ?v0 ?v1 ?v2 ?v3 )(ite (fun_app$ ?v0 ?v3 )lNil$ (lCons$ (fun_app$w ?v1 ?v3 )(unfold_llist$ ?v0 ?v1 ?v2 (fun_app$a ?v2 ?v3 )))))):named a146 ))
(check-sat )
;(get-unsat-core )
