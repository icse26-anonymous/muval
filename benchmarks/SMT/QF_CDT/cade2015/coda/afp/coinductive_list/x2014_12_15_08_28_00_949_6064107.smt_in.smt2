;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_prod_set$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_prod_bool_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort A_llist_a_llist_prod$ 0)
(declare-fun fst$ (A_llist_a_llist_prod$)A_llist$)
(declare-fun snd$ (A_llist_a_llist_prod$)A_llist$)
(declare-fun pair$ (A_llist$ A_llist$ )A_llist_a_llist_prod$)
(declare-fun r$ ()A_a_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A_llist_a_llist_prod$ A_llist_a_llist_prod_set$ )Bool )
(declare-fun collect$ (A_llist_a_llist_prod_bool_fun$ )A_llist_a_llist_prod_set$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun llexord$ (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun case_prod$ (A_llist_a_llist_bool_fun_fun$ )A_llist_a_llist_prod_bool_fun$ )
(assert (! (not (and (fun_app$ (fun_app$a (llexord$ r$ )xs$ )ys$ )(fun_app$ (fun_app$a (llexord$ r$ )ys$ )xs$ ))):named a0 ))
(assert (! (forall ((?v0 A$ ))(not (fun_app$b (fun_app$c r$ ?v0 )?v0 ))):named a1 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(fun_app$ (fun_app$a (llexord$ ?v0 )?v1 )?v1 )):named a2 ))
(assert (! (member$ (pair$ xs$ ys$ )(collect$ (case_prod$ (llexord$ r$ )))):named a3 ))
(assert (! (member$ (pair$ ys$ xs$ )(collect$ (case_prod$ (llexord$ r$ )))):named a4 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (fun_app$ (fun_app$a (llexord$ ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))(or (and (= ?v1 ?v3 )(fun_app$ (fun_app$a (llexord$ ?v0 )?v2 )?v4 ))(fun_app$b (fun_app$c ?v0 ?v1 )?v3 ))):pattern ((fun_app$ (fun_app$a (llexord$ ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v3 ?v4 ))))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_llist$ ))(! (=> (lnull$ ?v0 )(= (fun_app$ (fun_app$a (llexord$ ?v1 )?v2 )?v0 )(lnull$ ?v2 ))):pattern ((fun_app$ (fun_app$a (llexord$ ?v1 )?v2 )?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(fun_app$ (fun_app$a (llexord$ ?v0 )lNil$ )?v1 )):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (lprefix$ ?v0 ?v1 )(fun_app$ (fun_app$a (llexord$ ?v2 )?v0 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A_llist$ ))(= (fun_app$ (fun_app$a (llexord$ ?v0 )(lCons$ ?v1 ?v2 ))?v3 )(exists ((?v4 A$ )(?v5 A_llist$ ))(and (= ?v3 (lCons$ ?v4 ?v5 ))(or (and (= ?v1 ?v4 )(fun_app$ (fun_app$a (llexord$ ?v0 )?v2 )?v5 ))(fun_app$b (fun_app$c ?v0 ?v1 )?v4 )))))):named a9 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A$ ))(=> (fun_app$ (fun_app$a (llexord$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a (llexord$ ?v0 )(lCons$ ?v3 ?v1 ))(lCons$ ?v3 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(fun_app$ (fun_app$a (llexord$ ?v0 )(lCons$ ?v1 ?v3 ))(lCons$ ?v2 ?v4 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_llist$ ))(=> (lnull$ ?v0 )(fun_app$ (fun_app$a (llexord$ ?v1 )?v0 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (fun_app$ (fun_app$a (llexord$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a (llexord$ ?v0 )(lappend$ ?v3 ?v1 ))(lappend$ ?v3 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(fun_app$ (fun_app$a (llexord$ ?v0 )?v1 )(lappend$ ?v1 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a17 ))
(check-sat )
;(get-unsat-core )
