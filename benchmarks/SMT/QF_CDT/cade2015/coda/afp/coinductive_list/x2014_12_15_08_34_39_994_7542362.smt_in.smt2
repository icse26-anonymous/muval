;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_llist_bool_fun$ 0 )
(declare-codatatypes ()((Nat_llist$ (lNil$ )(lCons$ (lhd$ Nat$ )(ltl$ Nat_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun ma$ ()Nat$ )
(declare-fun na$ ()Nat$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lnth$ (Nat_llist$ )Nat_nat_fun$ )
(declare-fun ltake$ (Enat$ Nat_llist$ )Nat_llist$ )
(declare-fun ldropn$ (Nat$ Nat_llist$ )Nat_llist$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun lmember$ (Nat$ )Nat_llist_bool_fun$ )
(declare-fun fun_app$a (Nat_llist_bool_fun$ Nat_llist$ )Bool )
(declare-fun fun_app$b (Nat_bool_fun$ Nat$ )Bool )
(declare-fun iterates$ (Nat_nat_fun$ Nat$ )Nat_llist$ )
(declare-fun pred_llist$ (Nat_bool_fun$ )Nat_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (Nat_llist$ )Nat_llist_bool_fun$ )
(assert (! (not (= (ltake$ (enat$ (fun_app$ suc$ na$ ))(iterates$ suc$ ma$ ))(lCons$ ma$ (ltake$ (enat$ na$ )(iterates$ suc$ (fun_app$ suc$ ma$ )))))):named a0 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat$ )(?v3 Nat_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (iterates$ ?v0 ?v1 )(lCons$ ?v1 (iterates$ ?v0 (fun_app$ ?v0 ?v1 ))))):named a2 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ suc$ ?v0 )(fun_app$ suc$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ suc$ ?v0 )(fun_app$ suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ )(?v2 Nat_llist$ ))(! (= (fun_app$a (pred_llist$ ?v0 )(lCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(fun_app$a (pred_llist$ ?v0 )?v2 ))):pattern ((fun_app$a (pred_llist$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_llist$ ))(! (= (fun_app$a (lmember$ ?v0 )(lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(fun_app$a (lmember$ ?v0 )?v2 ))):pattern ((fun_app$a (lmember$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (fun_app$ suc$ ?v0 )(fun_app$ suc$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (fun_app$ suc$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_llist$ ))(! (= (ldropn$ (fun_app$ suc$ ?v0 )(lCons$ ?v1 ?v2 ))(ldropn$ ?v0 ?v2 )):pattern ((ldropn$ (fun_app$ suc$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat$ )(?v3 Nat_llist$ ))(! (= (fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$a (lstrict_prefix$ ?v1 )?v3 ))):pattern ((fun_app$a (lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat$ ))(! (= (fun_app$ (lnth$ (lCons$ ?v0 ?v1 ))(fun_app$ suc$ ?v2 ))(fun_app$ (lnth$ ?v1 )?v2 )):pattern ((fun_app$ (lnth$ (lCons$ ?v0 ?v1 ))(fun_app$ suc$ ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ )(?v2 Nat_llist$ ))(= (ltake$ (eSuc$ ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v1 (ltake$ ?v0 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (eSuc$ ?v0 )(eSuc$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Nat_llist_bool_fun$ )(?v1 Nat_llist$ ))(=> (forall ((?v2 Nat_llist$ ))(=> (forall ((?v3 Nat_llist$ ))(=> (fun_app$a (lstrict_prefix$ ?v3 )?v2 )(fun_app$a ?v0 ?v3 )))(fun_app$a ?v0 ?v2 )))(fun_app$a ?v0 ?v1 ))):named a16 ))
(check-sat )
;(get-unsat-core )
