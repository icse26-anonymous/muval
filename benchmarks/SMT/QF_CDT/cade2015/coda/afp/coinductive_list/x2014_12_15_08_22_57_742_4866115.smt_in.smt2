;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun p$ ()A_bool_fun$ )
(declare-fun uu$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun inf$ (A_set$ A_set$ )A_set$ )
(declare-fun uua$ (A_set$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun less_eq$ (A_set$ A_set$ )Bool )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(declare-fun fun_app$a (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(assert (! (forall ((?v0 A_set$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )(and (member$ ?v2 ?v0 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )))):named a0 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$a (uu$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$a (uu$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (not (= (= (ltakeWhile$ p$ xs$ )xs$ )(less_eq$ (lset$ xs$ )(collect$ p$ )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(! (=> (forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v0 ))(fun_app$ ?v1 ?v2 )))(= (ltakeWhile$ ?v1 ?v0 )?v0 )):pattern ((ltakeWhile$ ?v1 ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (ltakeWhile$ ?v1 ?v2 )))(and (member$ ?v0 (lset$ ?v2 ))(fun_app$ ?v1 ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(=> (forall ((?v2 A$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 )))(less_eq$ ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_set$ ))(less_eq$ ?v0 ?v0 )):named a7 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_bool_fun$ )(?v2 A_bool_fun$ ))(= (less_eq$ ?v0 (collect$ (fun_app$a (uu$ ?v1 )?v2 )))(and (less_eq$ ?v0 (collect$ ?v1 ))(less_eq$ ?v0 (collect$ ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ )(?v3 A_bool_fun$ ))(=> (and (member$ ?v0 ?v1 )(less_eq$ ?v1 (collect$ (fun_app$a (uua$ ?v2 )?v3 ))))(fun_app$ ?v3 ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (less_eq$ ?v0 ?v1 )(forall ((?v4 A$ ))(=> (and (member$ ?v4 ?v0 )(fun_app$ ?v2 ?v4 ))(fun_app$ ?v3 ?v4 ))))(less_eq$ (collect$ (fun_app$a (uua$ ?v0 )?v2 ))(collect$ (fun_app$a (uua$ ?v1 )?v3 ))))):named a10 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_bool_fun$ ))(=> (less_eq$ ?v0 ?v1 )(= (less_eq$ ?v0 (collect$ (fun_app$a (uua$ ?v1 )?v2 )))(forall ((?v3 A$ ))(=> (member$ ?v3 ?v0 )(fun_app$ ?v2 ?v3 )))))):named a11 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_bool_fun$ ))(less_eq$ (collect$ (fun_app$a (uua$ ?v0 )?v1 ))?v0 )):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(less_eq$ (lset$ (ltakeWhile$ ?v0 ?v1 ))(inf$ (lset$ ?v1 )(collect$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(lmember$ ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (= ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (less_eq$ ?v0 ?v1 )(forall ((?v2 A$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 ))))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (member$ ?v0 (inf$ ?v1 ?v2 ))(and (member$ ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (and (member$ ?v0 ?v1 )(member$ ?v0 ?v2 ))(member$ ?v0 (inf$ ?v1 ?v2 )))):named a18 ))
(check-sat )
;(get-unsat-core )
