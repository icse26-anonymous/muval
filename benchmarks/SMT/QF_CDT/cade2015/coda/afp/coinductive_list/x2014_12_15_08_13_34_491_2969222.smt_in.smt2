;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_list_set$ 0 )
(declare-sort A_list_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun xs$ ()A_list$ )
(declare-fun map$ (A_a_fun$ A_list$ )A_list$ )
(declare-fun set$ (A_list$ )A_set$ )
(declare-fun top$ ()A_list_set$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun append$ (A_list$ A_list$ )A_list$ )
(declare-fun inj_on$ (A_list_a_llist_fun$ A_list_set$ )Bool )
(declare-fun fun_app$ (A_list_a_llist_fun$ A_list$ )A_llist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun inv_into$ (A_list_set$ A_list_a_llist_fun$ A_llist$ )A_list$ )
(declare-fun llist_of$ ()A_list_a_llist_fun$ )
(declare-fun undefined$ ()A_list$ )
(assert (! (not (= (list_of$ (fun_app$ llist_of$ xs$ ))xs$ )):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (fun_app$ llist_of$ ?v0 )(fun_app$ llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (fun_app$ llist_of$ ?v0 ))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (list_of$ ?v0 )(ite (lfinite$ ?v0 )(inv_into$ top$ llist_of$ ?v0 )undefined$ )):pattern ((list_of$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_list$ ))(= (lhd$ (fun_app$ llist_of$ ?v0 ))(hd$ ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_list$ ))(= (lnull$ (fun_app$ llist_of$ ?v0 ))(= ?v0 nil$ ))):named a5 ))
(assert (! (forall ((?v0 A_list$ ))(= (ltl$ (fun_app$ llist_of$ ?v0 ))(fun_app$ llist_of$ (tl$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_list$ ))(= (lset$ (fun_app$ llist_of$ ?v0 ))(set$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (lmap$ ?v0 (fun_app$ llist_of$ ?v1 ))(fun_app$ llist_of$ (map$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (fun_app$ llist_of$ ?v0 )lNil$ )(= ?v0 nil$ ))):named a9 ))
(assert (! (= (fun_app$ llist_of$ nil$ )lNil$ ):named a10 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (fun_app$a (lappend$ (fun_app$ llist_of$ ?v0 ))(fun_app$ llist_of$ ?v1 ))(fun_app$ llist_of$ (append$ ?v0 ?v1 )))):named a11 ))
(assert (! (inj_on$ llist_of$ top$ ):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (fun_app$a (lappend$ ?v0 )?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$a (lappend$ ?v0 )?v1 ))(and (lnull$ ?v0 )(lnull$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$ ?v0 ?v1 ))(lnull$ ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a16 ))
(check-sat )
;(get-unsat-core )
