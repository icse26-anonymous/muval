;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun sup$ (A_set$ A_set$ )A_set$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lsetp$ (A_llist$ A$ )Bool )
(declare-fun finite$ (A_set$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun less_eq$ (A_set$ A_set$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(assert (! (not (= (member$ x$ (lset$ (fun_app$ (lappend$ xs$ )ys$ )))(or (member$ x$ (lset$ xs$ ))(and (lfinite$ xs$ )(member$ x$ (lset$ ys$ )))))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0 )?v1 ))?v2 )(fun_app$ (lappend$ ?v0 )(fun_app$ (lappend$ ?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (fun_app$ (lappend$ ?v0 )?v1 )?v0 )):pattern ((fun_app$ (lappend$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lfinite$ ?v0 )(= (lset$ (fun_app$ (lappend$ ?v0 )?v1 ))(sup$ (lset$ ?v0 )(lset$ ?v1 ))))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(lmember$ ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lset$ (fun_app$ (lappend$ ?v0 )?v1 ))(ite (lfinite$ ?v0 )(sup$ (lset$ ?v0 )(lset$ ?v1 ))(lset$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(less_eq$ (lset$ ?v0 )(lset$ (fun_app$ (lappend$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(finite$ (lset$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (member$ ?v0 (lset$ ?v1 ))(lsetp$ ?v1 ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (lsetp$ ?v0 ?v1 )(member$ ?v1 (lset$ ?v0 )))):named a10 ))
(assert (! (= (lfinite$ lNil$ )true ):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ (ltl$ ?v0 ))(lfinite$ ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ lNil$ )?v0 )?v0 ):pattern ((fun_app$ (lappend$ lNil$ )?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$ (lmap$ ?v0 ?v1 ))(lmap$ ?v0 (ltl$ ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= (lmap$ ?v0 ?v1 )lNil$ )(= ?v1 lNil$ ))):named a17 ))
(check-sat )
;(get-unsat-core )
