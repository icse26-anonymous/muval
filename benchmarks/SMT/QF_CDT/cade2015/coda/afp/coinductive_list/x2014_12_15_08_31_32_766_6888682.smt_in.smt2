;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_a_llist_set_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-fun fun_app$ (A_llist_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun lmember$ (A_llist$ )A_llist_llist_bool_fun$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_llist_llist_a_llist_set_fun$ A_llist_llist$ )A_llist_set$ )
(declare-fun fun_app$c (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun fun_app$d (A_llist_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun fun_app$e (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun gen_lset$ (A_llist_set$ )A_llist_llist_a_llist_set_fun$ )
(declare-fun lmember$a (A$ )A_llist_bool_fun$ )
(declare-fun gen_lset$a (A_set$ )A_llist_a_set_fun$ )
(declare-fun ldistinct$ (A_llist_llist$ )Bool )
(declare-fun ldistinct$a (A_llist$ )Bool )
(declare-fun ldropWhile$ (A_llist_bool_fun$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun pred_llist$ (A_llist_bool_fun$ )A_llist_llist_bool_fun$ )
(declare-fun ldropWhile$a (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun pred_llist$a (A_bool_fun$ )A_llist_bool_fun$ )
(declare-fun finite_lprefix$ (A_llist_llist$ )A_llist_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (A_llist_llist$ )A_llist_llist_bool_fun$ )
(declare-fun finite_lprefix$a (A_llist$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$a (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (= (lconcat$ lNil$a )lNil$ )):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lmember$ ?v0 )lNil$a )false ):pattern ((lmember$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a (lmember$a ?v0 )lNil$ )false ):pattern ((lmember$a ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_set$ ))(! (= (fun_app$b (gen_lset$ ?v0 )lNil$a )?v0 ):pattern ((gen_lset$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$c (gen_lset$a ?v0 )lNil$ )?v0 ):pattern ((gen_lset$a ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$ (finite_lprefix$ ?v0 )lNil$a )(= ?v0 lNil$a )):pattern ((finite_lprefix$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (finite_lprefix$a ?v0 )lNil$ )(= ?v0 lNil$ )):pattern ((finite_lprefix$a ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$ (finite_lprefix$ lNil$a )?v0 )true ):pattern ((fun_app$ (finite_lprefix$ lNil$a )?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (finite_lprefix$a lNil$ )?v0 )true ):pattern ((fun_app$a (finite_lprefix$a lNil$ )?v0 )))):named a8 ))
(assert (! (= (fun_app$ (lstrict_prefix$ lNil$a )lNil$a )false ):named a9 ))
(assert (! (= (fun_app$a (lstrict_prefix$a lNil$ )lNil$ )false ):named a10 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(fun_app$ (pred_llist$ ?v0 )lNil$a )):named a11 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(fun_app$a (pred_llist$a ?v0 )lNil$ )):named a12 ))
(assert (! (= (ldistinct$ lNil$a )true ):named a13 ))
(assert (! (= (ldistinct$a lNil$ )true ):named a14 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(! (= (fun_app$d (ldropWhile$ ?v0 )lNil$a )lNil$a ):pattern ((ldropWhile$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$e (ldropWhile$a ?v0 )lNil$ )lNil$ ):pattern ((ldropWhile$a ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (forall ((?v2 A_llist$ ))(=> (forall ((?v3 A_llist$ ))(=> (fun_app$a (lstrict_prefix$a ?v3 )?v2 )(fun_app$a ?v0 ?v3 )))(fun_app$a ?v0 ?v2 )))(fun_app$a ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$ )(?v1 A_llist_llist$ ))(=> (forall ((?v2 A_llist_llist$ ))(=> (forall ((?v3 A_llist_llist$ ))(=> (fun_app$ (lstrict_prefix$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a18 ))
(assert (! (ldistinct$ lNil$a ):named a19 ))
(assert (! (ldistinct$a lNil$ ):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (fun_app$ (lstrict_prefix$ (lCons$a ?v0 ?v1 ))lNil$a )false ):pattern ((lCons$a ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$a (lstrict_prefix$a (lCons$ ?v0 ?v1 ))lNil$ )false ):pattern ((lCons$ ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (fun_app$ (lstrict_prefix$ lNil$a )(lCons$a ?v0 ?v1 ))true ):pattern ((lCons$a ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$a (lstrict_prefix$a lNil$ )(lCons$ ?v0 ?v1 ))true ):pattern ((lCons$ ?v0 ?v1 )))):named a24 ))
(check-sat )
;(get-unsat-core )
