;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_a_prod_bool_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort B_a_prod_bool_fun$ 0 )
(declare-sort B_b_prod_bool_fun$ 0 )
(declare-sort A_a_a_prod_prod_bool_fun$ 0 )
(declare-sort A_a_b_prod_prod_bool_fun$ 0 )
(declare-sort B_a_a_prod_prod_bool_fun$ 0 )
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-codatatypes ()((A_b_prod_llist$ (lNil$ )(lCons$ (lhd$ A_b_prod$ )(ltl$ A_b_prod_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_llist$ (lNil$a )(lCons$a (lhd$a A$ )(ltl$a A_llist$ )))(B_llist$ (lNil$b )(lCons$b (lhd$b B$ )(ltl$b B_llist$ )))))
(declare-sort A_a_prod$ 0)
(declare-sort B_a_a_prod_prod$ 0)
(declare-fun fst$a (A_a_prod$)A$)
(declare-fun snd$a (A_a_prod$)A$)
(declare-fun pair$a (A$ A$ )A_a_prod$)
(declare-fun fst$b (B_a_a_prod_prod$)B$)
(declare-fun snd$b (B_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$b (B$ A_a_prod$ )B_a_a_prod_prod$)
(declare-codatatypes ()((B_a_a_prod_prod_llist$ (lNil$c )(lCons$c (lhd$c B_a_a_prod_prod$ )(ltl$c B_a_a_prod_prod_llist$ )))))
(declare-sort B_b_prod$ 0)
(declare-fun fst$c (B_b_prod$)B$)
(declare-fun snd$c (B_b_prod$)B$)
(declare-fun pair$c (B$ B$ )B_b_prod$)
(declare-codatatypes ()((B_b_prod_llist$ (lNil$d )(lCons$d (lhd$d B_b_prod$ )(ltl$d B_b_prod_llist$ )))))
(declare-sort B_a_prod$ 0)
(declare-fun fst$d (B_a_prod$)B$)
(declare-fun snd$d (B_a_prod$)A$)
(declare-fun pair$d (B$ A$ )B_a_prod$)
(declare-codatatypes ()((B_a_prod_llist$ (lNil$e )(lCons$e (lhd$e B_a_prod$ )(ltl$e B_a_prod_llist$ )))))
(declare-sort A_a_b_prod_prod$ 0)
(declare-fun fst$e (A_a_b_prod_prod$)A$)
(declare-fun snd$e (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$e (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-codatatypes ()((A_a_b_prod_prod_llist$ (lNil$f )(lCons$f (lhd$f A_a_b_prod_prod$ )(ltl$f A_a_b_prod_prod_llist$ )))))
(declare-sort A_a_a_prod_prod$ 0)
(declare-fun fst$f (A_a_a_prod_prod$)A$)
(declare-fun snd$f (A_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$f (A$ A_a_prod$ )A_a_a_prod_prod$)
(declare-codatatypes ()((A_a_a_prod_prod_llist$ (lNil$g )(lCons$g (lhd$g A_a_a_prod_prod$ )(ltl$g A_a_a_prod_prod_llist$ )))(A_a_prod_llist$ (lNil$h )(lCons$h (lhd$h A_a_prod$ )(ltl$h A_a_prod_llist$ )))))
(declare-sort A_a_prod_a_prod$ 0)
(declare-fun fst$g (A_a_prod_a_prod$)A_a_prod$)
(declare-fun snd$g (A_a_prod_a_prod$)A$)
(declare-fun pair$g (A_a_prod$ A$ )A_a_prod_a_prod$)
(declare-codatatypes ()((A_a_prod_a_prod_llist$ (lNil$i )(lCons$i (lhd$i A_a_prod_a_prod$ )(ltl$i A_a_prod_a_prod_llist$ )))))
(declare-sort A_a_prod_b_prod$ 0)
(declare-fun fst$h (A_a_prod_b_prod$)A_a_prod$)
(declare-fun snd$h (A_a_prod_b_prod$)B$)
(declare-fun pair$h (A_a_prod$ B$ )A_a_prod_b_prod$)
(declare-codatatypes ()((A_a_prod_b_prod_llist$ (lNil$j )(lCons$j (lhd$j A_a_prod_b_prod$ )(ltl$j A_a_prod_b_prod_llist$ )))))
(declare-sort B_a_b_prod_prod$ 0)
(declare-fun fst$i (B_a_b_prod_prod$)B$)
(declare-fun snd$i (B_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$i (B$ A_b_prod$ )B_a_b_prod_prod$)
(declare-codatatypes ()((B_a_b_prod_prod_llist$ (lNil$k )(lCons$k (lhd$k B_a_b_prod_prod$ )(ltl$k B_a_b_prod_prod_llist$ )))))
(declare-fun x$ ()A$ )
(declare-fun na$ ()Enat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()B_llist$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun ldrop$ (Enat$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lsetp$ (B_a_a_prod_prod_llist$ )B_a_a_prod_prod_bool_fun$ )
(declare-fun lzip$a (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun lzip$b (B_llist$ A_llist$ )B_a_prod_llist$ )
(declare-fun lzip$c (B_llist$ B_llist$ )B_b_prod_llist$ )
(declare-fun lzip$d (A_llist$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lzip$e (A_llist$ A_b_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun lzip$f (A_a_prod_llist$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lzip$g (A_a_prod_llist$ B_llist$ )A_a_prod_b_prod_llist$ )
(declare-fun lzip$h (B_llist$ A_a_prod_llist$ )B_a_a_prod_prod_llist$ )
(declare-fun lzip$i (B_llist$ A_b_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun ldrop$a (Enat$ A_llist$ )A_llist$ )
(declare-fun ldrop$b (Enat$ B_llist$ )B_llist$ )
(declare-fun ldrop$c (Enat$ B_a_a_prod_prod_llist$ )B_a_a_prod_prod_llist$ )
(declare-fun ldrop$d (Enat$ B_b_prod_llist$ )B_b_prod_llist$ )
(declare-fun ldrop$e (Enat$ B_a_prod_llist$ )B_a_prod_llist$ )
(declare-fun ldrop$f (Enat$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun ldrop$g (Enat$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun ldrop$h (Enat$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun lsetp$a (B_b_prod_llist$ )B_b_prod_bool_fun$ )
(declare-fun lsetp$b (B_a_prod_llist$ )B_a_prod_bool_fun$ )
(declare-fun lsetp$c (A_a_b_prod_prod_llist$ )A_a_b_prod_prod_bool_fun$ )
(declare-fun lsetp$d (A_a_a_prod_prod_llist$ )A_a_a_prod_prod_bool_fun$ )
(declare-fun lsetp$e (A_a_prod_llist$ )A_a_prod_bool_fun$ )
(declare-fun lsetp$f (B_llist$ )B_bool_fun$ )
(declare-fun lsetp$g (A_b_prod_llist$ )A_b_prod_bool_fun$ )
(declare-fun lsetp$h (A_llist$ )A_bool_fun$ )
(declare-fun fun_app$ (B_a_a_prod_prod_bool_fun$ B_a_a_prod_prod$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lmember$ (B_a_a_prod_prod$ B_a_a_prod_prod_llist$ )Bool )
(declare-fun fun_app$a (B_b_prod_bool_fun$ B_b_prod$ )Bool )
(declare-fun fun_app$b (B_a_prod_bool_fun$ B_a_prod$ )Bool )
(declare-fun fun_app$c (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod$ )Bool )
(declare-fun fun_app$d (A_a_a_prod_prod_bool_fun$ A_a_a_prod_prod$ )Bool )
(declare-fun fun_app$e (A_a_prod_bool_fun$ A_a_prod$ )Bool )
(declare-fun fun_app$f (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$g (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun fun_app$h (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$i (A_bool_fun$ A$ )Bool )
(declare-fun lfinite$a (B_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$b (B_b_prod_llist$ )Bool )
(declare-fun lfinite$c (B_a_prod_llist$ )Bool )
(declare-fun lfinite$d (A_a_b_prod_prod_llist$ )Bool )
(declare-fun lfinite$e (A_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$f (A_a_prod_llist$ )Bool )
(declare-fun lfinite$g (B_llist$ )Bool )
(declare-fun lfinite$h (A_b_prod_llist$ )Bool )
(declare-fun lmember$a (B_b_prod$ B_b_prod_llist$ )Bool )
(declare-fun lmember$b (B_a_prod$ B_a_prod_llist$ )Bool )
(declare-fun lmember$c (A_a_b_prod_prod$ A_a_b_prod_prod_llist$ )Bool )
(declare-fun lmember$d (A_a_a_prod_prod$ A_a_a_prod_prod_llist$ )Bool )
(declare-fun lmember$e (A_a_prod$ A_a_prod_llist$ )Bool )
(declare-fun lmember$f (B$ B_llist$ )Bool )
(declare-fun lmember$g (A_b_prod$ A_b_prod_llist$ )Bool )
(declare-fun lmember$h (A$ )A_llist_bool_fun$ )
(declare-fun pred_llist$ (B_a_a_prod_prod_bool_fun$ B_a_a_prod_prod_llist$ )Bool )
(declare-fun pred_llist$a (B_b_prod_bool_fun$ B_b_prod_llist$ )Bool )
(declare-fun pred_llist$b (B_a_prod_bool_fun$ B_a_prod_llist$ )Bool )
(declare-fun pred_llist$c (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod_llist$ )Bool )
(declare-fun pred_llist$d (A_a_a_prod_prod_bool_fun$ A_a_a_prod_prod_llist$ )Bool )
(declare-fun pred_llist$e (A_a_prod_bool_fun$ A_a_prod_llist$ )Bool )
(declare-fun pred_llist$f (B_bool_fun$ B_llist$ )Bool )
(declare-fun pred_llist$g (A_b_prod_bool_fun$ A_b_prod_llist$ )Bool )
(declare-fun pred_llist$h (A_bool_fun$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (B_a_a_prod_prod_llist$ B_a_a_prod_prod_llist$ )Bool )
(declare-fun lstrict_prefix$a (B_b_prod_llist$ B_b_prod_llist$ )Bool )
(declare-fun lstrict_prefix$b (B_a_prod_llist$ B_a_prod_llist$ )Bool )
(declare-fun lstrict_prefix$c (A_a_b_prod_prod_llist$ A_a_b_prod_prod_llist$ )Bool )
(declare-fun lstrict_prefix$d (A_a_a_prod_prod_llist$ A_a_a_prod_prod_llist$ )Bool )
(declare-fun lstrict_prefix$e (A_a_prod_llist$ A_a_prod_llist$ )Bool )
(declare-fun lstrict_prefix$f (B_llist$ B_llist$ )Bool )
(declare-fun lstrict_prefix$g (A_b_prod_llist$ A_b_prod_llist$ )Bool )
(declare-fun lstrict_prefix$h (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (= (ldrop$ na$ (lzip$ (lCons$a x$ xsa$ )ysa$ ))(lzip$ (ldrop$a na$ (lCons$a x$ xsa$ ))(ldrop$b na$ ysa$ )))):named a0 ))
(assert (! (lfinite$ xsa$ ):named a1 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(= (ldrop$ ?v0 (lzip$ xsa$ ?v1 ))(lzip$ (ldrop$a ?v0 xsa$ )(ldrop$b ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 B_a_a_prod_prod$ )(?v1 B_a_a_prod_prod_llist$ )(?v2 B_a_a_prod_prod$ )(?v3 B_a_a_prod_prod_llist$ ))(= (= (lCons$c ?v0 ?v1 )(lCons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod_llist$ )(?v2 B_b_prod$ )(?v3 B_b_prod_llist$ ))(= (= (lCons$d ?v0 ?v1 )(lCons$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 B_a_prod_llist$ )(?v2 B_a_prod$ )(?v3 B_a_prod_llist$ ))(= (= (lCons$e ?v0 ?v1 )(lCons$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod_llist$ )(?v2 A_a_b_prod_prod$ )(?v3 A_a_b_prod_prod_llist$ ))(= (= (lCons$f ?v0 ?v1 )(lCons$f ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod_llist$ )(?v2 A_a_a_prod_prod$ )(?v3 A_a_a_prod_prod_llist$ ))(= (= (lCons$g ?v0 ?v1 )(lCons$g ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod$ )(?v3 A_a_prod_llist$ ))(= (= (lCons$h ?v0 ?v1 )(lCons$h ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a8 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod$ )(?v3 A_b_prod_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 B_a_a_prod_prod$ )(?v1 B_a_a_prod_prod_llist$ ))(! (= (lfinite$a (lCons$c ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$c ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod_llist$ ))(! (= (lfinite$b (lCons$d ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$d ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 B_a_prod_llist$ ))(! (= (lfinite$c (lCons$e ?v0 ?v1 ))(lfinite$c ?v1 )):pattern ((lCons$e ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod_llist$ ))(! (= (lfinite$d (lCons$f ?v0 ?v1 ))(lfinite$d ?v1 )):pattern ((lCons$f ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod_llist$ ))(! (= (lfinite$e (lCons$g ?v0 ?v1 ))(lfinite$e ?v1 )):pattern ((lCons$g ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ ))(! (= (lfinite$f (lCons$h ?v0 ?v1 ))(lfinite$f ?v1 )):pattern ((lCons$h ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$g (lCons$b ?v0 ?v1 ))(lfinite$g ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ ))(! (= (lfinite$h (lCons$ ?v0 ?v1 ))(lfinite$h ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$a ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 B_a_a_prod_prod$ )(?v1 B_a_a_prod_prod_llist$ ))(! (= (lfinite$a (lCons$c ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$c ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod_llist$ ))(! (= (lfinite$b (lCons$d ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$d ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 B_a_prod_llist$ ))(! (= (lfinite$c (lCons$e ?v0 ?v1 ))(lfinite$c ?v1 )):pattern ((lCons$e ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod_llist$ ))(! (= (lfinite$d (lCons$f ?v0 ?v1 ))(lfinite$d ?v1 )):pattern ((lCons$f ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod_llist$ ))(! (= (lfinite$e (lCons$g ?v0 ?v1 ))(lfinite$e ?v1 )):pattern ((lCons$g ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ ))(! (= (lfinite$f (lCons$h ?v0 ?v1 ))(lfinite$f ?v1 )):pattern ((lCons$h ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$g (lCons$b ?v0 ?v1 ))(lfinite$g ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ ))(! (= (lfinite$h (lCons$ ?v0 ?v1 ))(lfinite$h ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$a ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 B_a_a_prod_prod_llist$ )(?v1 B_a_a_prod_prod$ ))(=> (lfinite$a ?v0 )(lfinite$a (lCons$c ?v1 ?v0 )))):named a30 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 B_b_prod$ ))(=> (lfinite$b ?v0 )(lfinite$b (lCons$d ?v1 ?v0 )))):named a31 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod$ ))(=> (lfinite$c ?v0 )(lfinite$c (lCons$e ?v1 ?v0 )))):named a32 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 A_a_b_prod_prod$ ))(=> (lfinite$d ?v0 )(lfinite$d (lCons$f ?v1 ?v0 )))):named a33 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 A_a_a_prod_prod$ ))(=> (lfinite$e ?v0 )(lfinite$e (lCons$g ?v1 ?v0 )))):named a34 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod$ ))(=> (lfinite$f ?v0 )(lfinite$f (lCons$h ?v1 ?v0 )))):named a35 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B$ ))(=> (lfinite$g ?v0 )(lfinite$g (lCons$b ?v1 ?v0 )))):named a36 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod$ ))(=> (lfinite$h ?v0 )(lfinite$h (lCons$ ?v1 ?v0 )))):named a37 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (lfinite$ ?v0 )(lfinite$ (lCons$a ?v1 ?v0 )))):named a38 ))
(assert (! (forall ((?v0 B_a_a_prod_prod_bool_fun$ )(?v1 B_a_a_prod_prod$ )(?v2 B_a_a_prod_prod_llist$ ))(! (= (pred_llist$ ?v0 (lCons$c ?v1 ?v2 ))(and (fun_app$ ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$c ?v1 ?v2 ))))):named a39 ))
(assert (! (forall ((?v0 B_b_prod_bool_fun$ )(?v1 B_b_prod$ )(?v2 B_b_prod_llist$ ))(! (= (pred_llist$a ?v0 (lCons$d ?v1 ?v2 ))(and (fun_app$a ?v0 ?v1 )(pred_llist$a ?v0 ?v2 ))):pattern ((pred_llist$a ?v0 (lCons$d ?v1 ?v2 ))))):named a40 ))
(assert (! (forall ((?v0 B_a_prod_bool_fun$ )(?v1 B_a_prod$ )(?v2 B_a_prod_llist$ ))(! (= (pred_llist$b ?v0 (lCons$e ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(pred_llist$b ?v0 ?v2 ))):pattern ((pred_llist$b ?v0 (lCons$e ?v1 ?v2 ))))):named a41 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$ )(?v1 A_a_b_prod_prod$ )(?v2 A_a_b_prod_prod_llist$ ))(! (= (pred_llist$c ?v0 (lCons$f ?v1 ?v2 ))(and (fun_app$c ?v0 ?v1 )(pred_llist$c ?v0 ?v2 ))):pattern ((pred_llist$c ?v0 (lCons$f ?v1 ?v2 ))))):named a42 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_bool_fun$ )(?v1 A_a_a_prod_prod$ )(?v2 A_a_a_prod_prod_llist$ ))(! (= (pred_llist$d ?v0 (lCons$g ?v1 ?v2 ))(and (fun_app$d ?v0 ?v1 )(pred_llist$d ?v0 ?v2 ))):pattern ((pred_llist$d ?v0 (lCons$g ?v1 ?v2 ))))):named a43 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_llist$ ))(! (= (pred_llist$e ?v0 (lCons$h ?v1 ?v2 ))(and (fun_app$e ?v0 ?v1 )(pred_llist$e ?v0 ?v2 ))):pattern ((pred_llist$e ?v0 (lCons$h ?v1 ?v2 ))))):named a44 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (pred_llist$f ?v0 (lCons$b ?v1 ?v2 ))(and (fun_app$f ?v0 ?v1 )(pred_llist$f ?v0 ?v2 ))):pattern ((pred_llist$f ?v0 (lCons$b ?v1 ?v2 ))))):named a45 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod$ )(?v2 A_b_prod_llist$ ))(! (= (pred_llist$g ?v0 (lCons$ ?v1 ?v2 ))(and (fun_app$g ?v0 ?v1 )(pred_llist$g ?v0 ?v2 ))):pattern ((pred_llist$g ?v0 (lCons$ ?v1 ?v2 ))))):named a46 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$h (pred_llist$h ?v0 )(lCons$a ?v1 ?v2 ))(and (fun_app$i ?v0 ?v1 )(fun_app$h (pred_llist$h ?v0 )?v2 ))):pattern ((fun_app$h (pred_llist$h ?v0 )(lCons$a ?v1 ?v2 ))))):named a47 ))
(assert (! (forall ((?v0 B_a_a_prod_prod$ )(?v1 B_a_a_prod_prod$ )(?v2 B_a_a_prod_prod_llist$ ))(! (= (lmember$ ?v0 (lCons$c ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$ ?v0 ?v2 ))):pattern ((lmember$ ?v0 (lCons$c ?v1 ?v2 ))))):named a48 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod$ )(?v2 B_b_prod_llist$ ))(! (= (lmember$a ?v0 (lCons$d ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$a ?v0 ?v2 ))):pattern ((lmember$a ?v0 (lCons$d ?v1 ?v2 ))))):named a49 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 B_a_prod$ )(?v2 B_a_prod_llist$ ))(! (= (lmember$b ?v0 (lCons$e ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$b ?v0 ?v2 ))):pattern ((lmember$b ?v0 (lCons$e ?v1 ?v2 ))))):named a50 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod$ )(?v2 A_a_b_prod_prod_llist$ ))(! (= (lmember$c ?v0 (lCons$f ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$c ?v0 ?v2 ))):pattern ((lmember$c ?v0 (lCons$f ?v1 ?v2 ))))):named a51 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod$ )(?v2 A_a_a_prod_prod_llist$ ))(! (= (lmember$d ?v0 (lCons$g ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$d ?v0 ?v2 ))):pattern ((lmember$d ?v0 (lCons$g ?v1 ?v2 ))))):named a52 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod$ )(?v2 A_a_prod_llist$ ))(! (= (lmember$e ?v0 (lCons$h ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$e ?v0 ?v2 ))):pattern ((lmember$e ?v0 (lCons$h ?v1 ?v2 ))))):named a53 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (lmember$f ?v0 (lCons$b ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$f ?v0 ?v2 ))):pattern ((lmember$f ?v0 (lCons$b ?v1 ?v2 ))))):named a54 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod$ )(?v2 A_b_prod_llist$ ))(! (= (lmember$g ?v0 (lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$g ?v0 ?v2 ))):pattern ((lmember$g ?v0 (lCons$ ?v1 ?v2 ))))):named a55 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$h (lmember$h ?v0 )(lCons$a ?v1 ?v2 ))(or (= ?v0 ?v1 )(fun_app$h (lmember$h ?v0 )?v2 ))):pattern ((fun_app$h (lmember$h ?v0 )(lCons$a ?v1 ?v2 ))))):named a56 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 B$ )(?v3 B_llist$ ))(! (= (lzip$ (lCons$a ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(lCons$ (pair$ ?v0 ?v2 )(lzip$ ?v1 ?v3 ))):pattern ((lzip$ (lCons$a ?v0 ?v1 )(lCons$b ?v2 ?v3 ))))):named a57 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (lzip$a (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(lCons$h (pair$a ?v0 ?v2 )(lzip$a ?v1 ?v3 ))):pattern ((lzip$a (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))))):named a58 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (lzip$b (lCons$b ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(lCons$e (pair$d ?v0 ?v2 )(lzip$b ?v1 ?v3 ))):pattern ((lzip$b (lCons$b ?v0 ?v1 )(lCons$a ?v2 ?v3 ))))):named a59 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(! (= (lzip$c (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(lCons$d (pair$c ?v0 ?v2 )(lzip$c ?v1 ?v3 ))):pattern ((lzip$c (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))))):named a60 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_a_prod$ )(?v3 A_a_prod_llist$ ))(! (= (lzip$d (lCons$a ?v0 ?v1 )(lCons$h ?v2 ?v3 ))(lCons$g (pair$f ?v0 ?v2 )(lzip$d ?v1 ?v3 ))):pattern ((lzip$d (lCons$a ?v0 ?v1 )(lCons$h ?v2 ?v3 ))))):named a61 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_b_prod$ )(?v3 A_b_prod_llist$ ))(! (= (lzip$e (lCons$a ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(lCons$f (pair$e ?v0 ?v2 )(lzip$e ?v1 ?v3 ))):pattern ((lzip$e (lCons$a ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a62 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (lzip$f (lCons$h ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(lCons$i (pair$g ?v0 ?v2 )(lzip$f ?v1 ?v3 ))):pattern ((lzip$f (lCons$h ?v0 ?v1 )(lCons$a ?v2 ?v3 ))))):named a63 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ )(?v2 B$ )(?v3 B_llist$ ))(! (= (lzip$g (lCons$h ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(lCons$j (pair$h ?v0 ?v2 )(lzip$g ?v1 ?v3 ))):pattern ((lzip$g (lCons$h ?v0 ?v1 )(lCons$b ?v2 ?v3 ))))):named a64 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 A_a_prod$ )(?v3 A_a_prod_llist$ ))(! (= (lzip$h (lCons$b ?v0 ?v1 )(lCons$h ?v2 ?v3 ))(lCons$c (pair$b ?v0 ?v2 )(lzip$h ?v1 ?v3 ))):pattern ((lzip$h (lCons$b ?v0 ?v1 )(lCons$h ?v2 ?v3 ))))):named a65 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 A_b_prod$ )(?v3 A_b_prod_llist$ ))(! (= (lzip$i (lCons$b ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(lCons$k (pair$i ?v0 ?v2 )(lzip$i ?v1 ?v3 ))):pattern ((lzip$i (lCons$b ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a66 ))
(assert (! (forall ((?v0 B_a_a_prod_prod$ )(?v1 B_a_a_prod_prod_llist$ )(?v2 B_a_a_prod_prod$ )(?v3 B_a_a_prod_prod_llist$ ))(! (= (lstrict_prefix$ (lCons$c ?v0 ?v1 )(lCons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(lstrict_prefix$ ?v1 ?v3 ))):pattern ((lstrict_prefix$ (lCons$c ?v0 ?v1 )(lCons$c ?v2 ?v3 ))))):named a67 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod_llist$ )(?v2 B_b_prod$ )(?v3 B_b_prod_llist$ ))(! (= (lstrict_prefix$a (lCons$d ?v0 ?v1 )(lCons$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(lstrict_prefix$a ?v1 ?v3 ))):pattern ((lstrict_prefix$a (lCons$d ?v0 ?v1 )(lCons$d ?v2 ?v3 ))))):named a68 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 B_a_prod_llist$ )(?v2 B_a_prod$ )(?v3 B_a_prod_llist$ ))(! (= (lstrict_prefix$b (lCons$e ?v0 ?v1 )(lCons$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(lstrict_prefix$b ?v1 ?v3 ))):pattern ((lstrict_prefix$b (lCons$e ?v0 ?v1 )(lCons$e ?v2 ?v3 ))))):named a69 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod_llist$ )(?v2 A_a_b_prod_prod$ )(?v3 A_a_b_prod_prod_llist$ ))(! (= (lstrict_prefix$c (lCons$f ?v0 ?v1 )(lCons$f ?v2 ?v3 ))(and (= ?v0 ?v2 )(lstrict_prefix$c ?v1 ?v3 ))):pattern ((lstrict_prefix$c (lCons$f ?v0 ?v1 )(lCons$f ?v2 ?v3 ))))):named a70 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod_llist$ )(?v2 A_a_a_prod_prod$ )(?v3 A_a_a_prod_prod_llist$ ))(! (= (lstrict_prefix$d (lCons$g ?v0 ?v1 )(lCons$g ?v2 ?v3 ))(and (= ?v0 ?v2 )(lstrict_prefix$d ?v1 ?v3 ))):pattern ((lstrict_prefix$d (lCons$g ?v0 ?v1 )(lCons$g ?v2 ?v3 ))))):named a71 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod$ )(?v3 A_a_prod_llist$ ))(! (= (lstrict_prefix$e (lCons$h ?v0 ?v1 )(lCons$h ?v2 ?v3 ))(and (= ?v0 ?v2 )(lstrict_prefix$e ?v1 ?v3 ))):pattern ((lstrict_prefix$e (lCons$h ?v0 ?v1 )(lCons$h ?v2 ?v3 ))))):named a72 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(! (= (lstrict_prefix$f (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(lstrict_prefix$f ?v1 ?v3 ))):pattern ((lstrict_prefix$f (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))))):named a73 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod$ )(?v3 A_b_prod_llist$ ))(! (= (lstrict_prefix$g (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(lstrict_prefix$g ?v1 ?v3 ))):pattern ((lstrict_prefix$g (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a74 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$h (lstrict_prefix$h (lCons$a ?v0 ?v1 ))(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$h (lstrict_prefix$h ?v1 )?v3 ))):pattern ((fun_app$h (lstrict_prefix$h (lCons$a ?v0 ?v1 ))(lCons$a ?v2 ?v3 ))))):named a75 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_a_prod_prod$ )(?v2 B_a_a_prod_prod_llist$ ))(= (ldrop$c (eSuc$ ?v0 )(lCons$c ?v1 ?v2 ))(ldrop$c ?v0 ?v2 ))):named a76 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_prod$ )(?v2 B_b_prod_llist$ ))(= (ldrop$d (eSuc$ ?v0 )(lCons$d ?v1 ?v2 ))(ldrop$d ?v0 ?v2 ))):named a77 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_prod$ )(?v2 B_a_prod_llist$ ))(= (ldrop$e (eSuc$ ?v0 )(lCons$e ?v1 ?v2 ))(ldrop$e ?v0 ?v2 ))):named a78 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_b_prod_prod$ )(?v2 A_a_b_prod_prod_llist$ ))(= (ldrop$f (eSuc$ ?v0 )(lCons$f ?v1 ?v2 ))(ldrop$f ?v0 ?v2 ))):named a79 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_a_prod_prod$ )(?v2 A_a_a_prod_prod_llist$ ))(= (ldrop$g (eSuc$ ?v0 )(lCons$g ?v1 ?v2 ))(ldrop$g ?v0 ?v2 ))):named a80 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_prod$ )(?v2 A_a_prod_llist$ ))(= (ldrop$h (eSuc$ ?v0 )(lCons$h ?v1 ?v2 ))(ldrop$h ?v0 ?v2 ))):named a81 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod$ )(?v2 A_b_prod_llist$ ))(= (ldrop$ (eSuc$ ?v0 )(lCons$ ?v1 ?v2 ))(ldrop$ ?v0 ?v2 ))):named a82 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B$ )(?v2 B_llist$ ))(= (ldrop$b (eSuc$ ?v0 )(lCons$b ?v1 ?v2 ))(ldrop$b ?v0 ?v2 ))):named a83 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A$ )(?v2 A_llist$ ))(= (ldrop$a (eSuc$ ?v0 )(lCons$a ?v1 ?v2 ))(ldrop$a ?v0 ?v2 ))):named a84 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A_b_prod$ )(?v3 A_b_prod_llist$ ))(= (= (lzip$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_llist$ )(?v6 B$ )(?v7 B_llist$ ))(and (= ?v0 (lCons$a ?v4 ?v5 ))(and (= ?v1 (lCons$b ?v6 ?v7 ))(and (= ?v2 (pair$ ?v4 ?v6 ))(= ?v3 (lzip$ ?v5 ?v7 )))))))):named a85 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_prod$ )(?v3 A_a_prod_llist$ ))(= (= (lzip$a ?v0 ?v1 )(lCons$h ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_llist$ )(?v6 A$ )(?v7 A_llist$ ))(and (= ?v0 (lCons$a ?v4 ?v5 ))(and (= ?v1 (lCons$a ?v6 ?v7 ))(and (= ?v2 (pair$a ?v4 ?v6 ))(= ?v3 (lzip$a ?v5 ?v7 )))))))):named a86 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ )(?v2 B_a_prod$ )(?v3 B_a_prod_llist$ ))(= (= (lzip$b ?v0 ?v1 )(lCons$e ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_llist$ )(?v6 A$ )(?v7 A_llist$ ))(and (= ?v0 (lCons$b ?v4 ?v5 ))(and (= ?v1 (lCons$a ?v6 ?v7 ))(and (= ?v2 (pair$d ?v4 ?v6 ))(= ?v3 (lzip$b ?v5 ?v7 )))))))):named a87 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_prod$ )(?v3 B_b_prod_llist$ ))(= (= (lzip$c ?v0 ?v1 )(lCons$d ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_llist$ )(?v6 B$ )(?v7 B_llist$ ))(and (= ?v0 (lCons$b ?v4 ?v5 ))(and (= ?v1 (lCons$b ?v6 ?v7 ))(and (= ?v2 (pair$c ?v4 ?v6 ))(= ?v3 (lzip$c ?v5 ?v7 )))))))):named a88 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_llist$ )(?v2 A_a_a_prod_prod$ )(?v3 A_a_a_prod_prod_llist$ ))(= (= (lzip$d ?v0 ?v1 )(lCons$g ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_llist$ )(?v6 A_a_prod$ )(?v7 A_a_prod_llist$ ))(and (= ?v0 (lCons$a ?v4 ?v5 ))(and (= ?v1 (lCons$h ?v6 ?v7 ))(and (= ?v2 (pair$f ?v4 ?v6 ))(= ?v3 (lzip$d ?v5 ?v7 )))))))):named a89 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_a_b_prod_prod$ )(?v3 A_a_b_prod_prod_llist$ ))(= (= (lzip$e ?v0 ?v1 )(lCons$f ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_llist$ )(?v6 A_b_prod$ )(?v7 A_b_prod_llist$ ))(and (= ?v0 (lCons$a ?v4 ?v5 ))(and (= ?v1 (lCons$ ?v6 ?v7 ))(and (= ?v2 (pair$e ?v4 ?v6 ))(= ?v3 (lzip$e ?v5 ?v7 )))))))):named a90 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_llist$ )(?v2 A_a_prod_a_prod$ )(?v3 A_a_prod_a_prod_llist$ ))(= (= (lzip$f ?v0 ?v1 )(lCons$i ?v2 ?v3 ))(exists ((?v4 A_a_prod$ )(?v5 A_a_prod_llist$ )(?v6 A$ )(?v7 A_llist$ ))(and (= ?v0 (lCons$h ?v4 ?v5 ))(and (= ?v1 (lCons$a ?v6 ?v7 ))(and (= ?v2 (pair$g ?v4 ?v6 ))(= ?v3 (lzip$f ?v5 ?v7 )))))))):named a91 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 B_llist$ )(?v2 A_a_prod_b_prod$ )(?v3 A_a_prod_b_prod_llist$ ))(= (= (lzip$g ?v0 ?v1 )(lCons$j ?v2 ?v3 ))(exists ((?v4 A_a_prod$ )(?v5 A_a_prod_llist$ )(?v6 B$ )(?v7 B_llist$ ))(and (= ?v0 (lCons$h ?v4 ?v5 ))(and (= ?v1 (lCons$b ?v6 ?v7 ))(and (= ?v2 (pair$h ?v4 ?v6 ))(= ?v3 (lzip$g ?v5 ?v7 )))))))):named a92 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_a_prod_llist$ )(?v2 B_a_a_prod_prod$ )(?v3 B_a_a_prod_prod_llist$ ))(= (= (lzip$h ?v0 ?v1 )(lCons$c ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_llist$ )(?v6 A_a_prod$ )(?v7 A_a_prod_llist$ ))(and (= ?v0 (lCons$b ?v4 ?v5 ))(and (= ?v1 (lCons$h ?v6 ?v7 ))(and (= ?v2 (pair$b ?v4 ?v6 ))(= ?v3 (lzip$h ?v5 ?v7 )))))))):named a93 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ )(?v2 B_a_b_prod_prod$ )(?v3 B_a_b_prod_prod_llist$ ))(= (= (lzip$i ?v0 ?v1 )(lCons$k ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_llist$ )(?v6 A_b_prod$ )(?v7 A_b_prod_llist$ ))(and (= ?v0 (lCons$b ?v4 ?v5 ))(and (= ?v1 (lCons$ ?v6 ?v7 ))(and (= ?v2 (pair$i ?v4 ?v6 ))(= ?v3 (lzip$i ?v5 ?v7 )))))))):named a94 ))
(assert (! (forall ((?v0 B_a_a_prod_prod_llist$ )(?v1 B_a_a_prod_prod$ ))(= (fun_app$ (lsetp$ ?v0 )?v1 )(or (exists ((?v2 B_a_a_prod_prod$ )(?v3 B_a_a_prod_prod_llist$ ))(and (= ?v0 (lCons$c ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 B_a_a_prod_prod_llist$ )(?v3 B_a_a_prod_prod$ )(?v4 B_a_a_prod_prod$ ))(and (= ?v0 (lCons$c ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$ (lsetp$ ?v2 )?v3 ))))))):named a95 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 B_b_prod$ ))(= (fun_app$a (lsetp$a ?v0 )?v1 )(or (exists ((?v2 B_b_prod$ )(?v3 B_b_prod_llist$ ))(and (= ?v0 (lCons$d ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 B_b_prod_llist$ )(?v3 B_b_prod$ )(?v4 B_b_prod$ ))(and (= ?v0 (lCons$d ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$a (lsetp$a ?v2 )?v3 ))))))):named a96 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod$ ))(= (fun_app$b (lsetp$b ?v0 )?v1 )(or (exists ((?v2 B_a_prod$ )(?v3 B_a_prod_llist$ ))(and (= ?v0 (lCons$e ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 B_a_prod_llist$ )(?v3 B_a_prod$ )(?v4 B_a_prod$ ))(and (= ?v0 (lCons$e ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$b (lsetp$b ?v2 )?v3 ))))))):named a97 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 A_a_b_prod_prod$ ))(= (fun_app$c (lsetp$c ?v0 )?v1 )(or (exists ((?v2 A_a_b_prod_prod$ )(?v3 A_a_b_prod_prod_llist$ ))(and (= ?v0 (lCons$f ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 A_a_b_prod_prod_llist$ )(?v3 A_a_b_prod_prod$ )(?v4 A_a_b_prod_prod$ ))(and (= ?v0 (lCons$f ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$c (lsetp$c ?v2 )?v3 ))))))):named a98 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 A_a_a_prod_prod$ ))(= (fun_app$d (lsetp$d ?v0 )?v1 )(or (exists ((?v2 A_a_a_prod_prod$ )(?v3 A_a_a_prod_prod_llist$ ))(and (= ?v0 (lCons$g ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 A_a_a_prod_prod_llist$ )(?v3 A_a_a_prod_prod$ )(?v4 A_a_a_prod_prod$ ))(and (= ?v0 (lCons$g ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$d (lsetp$d ?v2 )?v3 ))))))):named a99 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod$ ))(= (fun_app$e (lsetp$e ?v0 )?v1 )(or (exists ((?v2 A_a_prod$ )(?v3 A_a_prod_llist$ ))(and (= ?v0 (lCons$h ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 A_a_prod_llist$ )(?v3 A_a_prod$ )(?v4 A_a_prod$ ))(and (= ?v0 (lCons$h ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$e (lsetp$e ?v2 )?v3 ))))))):named a100 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B$ ))(= (fun_app$f (lsetp$f ?v0 )?v1 )(or (exists ((?v2 B$ )(?v3 B_llist$ ))(and (= ?v0 (lCons$b ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 B_llist$ )(?v3 B$ )(?v4 B$ ))(and (= ?v0 (lCons$b ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$f (lsetp$f ?v2 )?v3 ))))))):named a101 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod$ ))(= (fun_app$g (lsetp$g ?v0 )?v1 )(or (exists ((?v2 A_b_prod$ )(?v3 A_b_prod_llist$ ))(and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 A_b_prod_llist$ )(?v3 A_b_prod$ )(?v4 A_b_prod$ ))(and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$g (lsetp$g ?v2 )?v3 ))))))):named a102 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(= (fun_app$i (lsetp$h ?v0 )?v1 )(or (exists ((?v2 A$ )(?v3 A_llist$ ))(and (= ?v0 (lCons$a ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(and (= ?v0 (lCons$a ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$i (lsetp$h ?v2 )?v3 ))))))):named a103 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 B_b_prod$ ))(=> (and (fun_app$a (lsetp$a ?v0 )?v1 )(and (forall ((?v2 B_b_prod$ )(?v3 B_b_prod_llist$ ))(=> (and (= ?v0 (lCons$d ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 B_b_prod_llist$ )(?v3 B_b_prod$ )(?v4 B_b_prod$ ))(=> (and (= ?v0 (lCons$d ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$a (lsetp$a ?v2 )?v3 )))false ))))false )):named a104 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod$ ))(=> (and (fun_app$b (lsetp$b ?v0 )?v1 )(and (forall ((?v2 B_a_prod$ )(?v3 B_a_prod_llist$ ))(=> (and (= ?v0 (lCons$e ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 B_a_prod_llist$ )(?v3 B_a_prod$ )(?v4 B_a_prod$ ))(=> (and (= ?v0 (lCons$e ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$b (lsetp$b ?v2 )?v3 )))false ))))false )):named a105 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 A_a_b_prod_prod$ ))(=> (and (fun_app$c (lsetp$c ?v0 )?v1 )(and (forall ((?v2 A_a_b_prod_prod$ )(?v3 A_a_b_prod_prod_llist$ ))(=> (and (= ?v0 (lCons$f ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 A_a_b_prod_prod_llist$ )(?v3 A_a_b_prod_prod$ )(?v4 A_a_b_prod_prod$ ))(=> (and (= ?v0 (lCons$f ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$c (lsetp$c ?v2 )?v3 )))false ))))false )):named a106 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 A_a_a_prod_prod$ ))(=> (and (fun_app$d (lsetp$d ?v0 )?v1 )(and (forall ((?v2 A_a_a_prod_prod$ )(?v3 A_a_a_prod_prod_llist$ ))(=> (and (= ?v0 (lCons$g ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 A_a_a_prod_prod_llist$ )(?v3 A_a_a_prod_prod$ )(?v4 A_a_a_prod_prod$ ))(=> (and (= ?v0 (lCons$g ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$d (lsetp$d ?v2 )?v3 )))false ))))false )):named a107 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod$ ))(=> (and (fun_app$e (lsetp$e ?v0 )?v1 )(and (forall ((?v2 A_a_prod$ )(?v3 A_a_prod_llist$ ))(=> (and (= ?v0 (lCons$h ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 A_a_prod_llist$ )(?v3 A_a_prod$ )(?v4 A_a_prod$ ))(=> (and (= ?v0 (lCons$h ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$e (lsetp$e ?v2 )?v3 )))false ))))false )):named a108 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B$ ))(=> (and (fun_app$f (lsetp$f ?v0 )?v1 )(and (forall ((?v2 B$ )(?v3 B_llist$ ))(=> (and (= ?v0 (lCons$b ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 B_llist$ )(?v3 B$ )(?v4 B$ ))(=> (and (= ?v0 (lCons$b ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$f (lsetp$f ?v2 )?v3 )))false ))))false )):named a109 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod$ ))(=> (and (fun_app$g (lsetp$g ?v0 )?v1 )(and (forall ((?v2 A_b_prod$ )(?v3 A_b_prod_llist$ ))(=> (and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 A_b_prod_llist$ )(?v3 A_b_prod$ )(?v4 A_b_prod$ ))(=> (and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$g (lsetp$g ?v2 )?v3 )))false ))))false )):named a110 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (and (fun_app$i (lsetp$h ?v0 )?v1 )(and (forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v0 (lCons$a ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(=> (and (= ?v0 (lCons$a ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$i (lsetp$h ?v2 )?v3 )))false ))))false )):named a111 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod$ )(?v2 A_a_prod$ ))(=> (fun_app$e (lsetp$e ?v0 )?v1 )(fun_app$e (lsetp$e (lCons$h ?v2 ?v0 ))?v1 ))):named a112 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B$ )(?v2 B$ ))(=> (fun_app$f (lsetp$f ?v0 )?v1 )(fun_app$f (lsetp$f (lCons$b ?v2 ?v0 ))?v1 ))):named a113 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod$ )(?v2 A_b_prod$ ))(=> (fun_app$g (lsetp$g ?v0 )?v1 )(fun_app$g (lsetp$g (lCons$ ?v2 ?v0 ))?v1 ))):named a114 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A$ ))(=> (fun_app$i (lsetp$h ?v0 )?v1 )(fun_app$i (lsetp$h (lCons$a ?v2 ?v0 ))?v1 ))):named a115 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (fun_app$h (lstrict_prefix$h ?v0 )?v1 )(lfinite$ ?v0 ))):named a116 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ ))(=> (forall ((?v2 A_llist$ ))(=> (forall ((?v3 A_llist$ ))(=> (fun_app$h (lstrict_prefix$h ?v3 )?v2 )(fun_app$h ?v0 ?v3 )))(fun_app$h ?v0 ?v2 )))(fun_app$h ?v0 ?v1 ))):named a117 ))
(check-sat )
;(get-unsat-core )
