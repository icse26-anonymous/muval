;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-codatatypes ()((A_b_prod_llist$ (lNil$b )(lCons$b (lhd$b A_b_prod$ )(ltl$b A_b_prod_llist$ )))))
(declare-sort A_list$ 0)
(declare-sort B_list$ 0)
(declare-sort A_b_prod_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun nil$a ()B_list$)
(declare-fun hd$a (B_list$)B$)
(declare-fun tl$a (B_list$)B_list$)
(declare-fun cons$a (B$ B_list$ )B_list$)
(declare-fun nil$b ()A_b_prod_list$)
(declare-fun hd$b (A_b_prod_list$)A_b_prod$)
(declare-fun tl$b (A_b_prod_list$)A_b_prod_list$)
(declare-fun cons$b (A_b_prod$ A_b_prod_list$ )A_b_prod_list$)
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun lmap$a (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$b (A_b_prod_a_fun$ A_b_prod_llist$ )A_llist$ )
(declare-fun lmap$c (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$d (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$e (A_b_prod_b_fun$ A_b_prod_llist$ )B_llist$ )
(declare-fun lmap$f (A_a_b_prod_fun$ A_llist$ )A_b_prod_llist$ )
(declare-fun lmap$g (B_a_b_prod_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun lmap$h (A_b_prod_a_b_prod_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun ldropn$a (Nat$ B_llist$ )B_llist$ )
(declare-fun ldropn$b (Nat$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun lappend$a (B_llist$ B_llist$ )B_llist$ )
(declare-fun lappend$b (A_b_prod_llist$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun lfinite$b (A_b_prod_llist$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun lprefix$a (B_llist$ B_llist$ )Bool )
(declare-fun lprefix$b (A_b_prod_llist$ A_b_prod_llist$ )Bool )
(declare-fun iterates$a (B_b_fun$ B$ )B_llist$ )
(declare-fun iterates$b (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod_llist$ )
(declare-fun llist_of$a (B_list$ )B_llist$ )
(declare-fun llist_of$b (A_b_prod_list$ )A_b_prod_llist$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(declare-fun lstrict_prefix$a (B_llist$ B_llist$ )Bool )
(declare-fun lstrict_prefix$b (A_b_prod_llist$ A_b_prod_llist$ )Bool )
(assert (! (not (or (lfinite$ xs$ )(lfinite$a ys$ ))):named a0 ))
(assert (! (lfinite$b (lzip$ xs$ ys$ )):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lfinite$ ?v0 ))):named a2 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lfinite$a ?v0 ))):named a3 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(=> (lstrict_prefix$b ?v0 ?v1 )(lfinite$b ?v0 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$ (ldropn$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ ))(= (lfinite$a (ldropn$a ?v0 ?v1 ))(lfinite$a ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_llist$ ))(= (lfinite$b (ldropn$b ?v0 ?v1 ))(lfinite$b ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(not (lfinite$ (iterates$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(not (lfinite$a (iterates$a ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod$ ))(not (lfinite$b (iterates$b ?v0 ?v1 )))):named a10 ))
(assert (! (= (lfinite$ lNil$ )true ):named a11 ))
(assert (! (= (lfinite$a lNil$a )true ):named a12 ))
(assert (! (= (lfinite$b lNil$b )true ):named a13 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a14 ))
(assert (! (forall ((?v0 B_list$ ))(lfinite$a (llist_of$a ?v0 ))):named a15 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(lfinite$b (llist_of$b ?v0 ))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ ))(! (= (lfinite$b (lCons$b ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ ))(! (= (lfinite$b (lCons$b ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a23 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lfinite$ (lmap$a ?v0 ?v1 ))(lfinite$a ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_llist$ ))(= (lfinite$ (lmap$b ?v0 ?v1 ))(lfinite$b ?v1 ))):named a25 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lfinite$a (lmap$c ?v0 ?v1 ))(lfinite$ ?v1 ))):named a26 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lfinite$a (lmap$d ?v0 ?v1 ))(lfinite$a ?v1 ))):named a27 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_llist$ ))(= (lfinite$a (lmap$e ?v0 ?v1 ))(lfinite$b ?v1 ))):named a28 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_llist$ ))(= (lfinite$b (lmap$f ?v0 ?v1 ))(lfinite$ ?v1 ))):named a29 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_llist$ ))(= (lfinite$b (lmap$g ?v0 ?v1 ))(lfinite$a ?v1 ))):named a30 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_llist$ ))(= (lfinite$b (lmap$h ?v0 ?v1 ))(lfinite$b ?v1 ))):named a31 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (lappend$ ?v0 ?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a32 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lfinite$a (lappend$a ?v0 ?v1 ))(and (lfinite$a ?v0 )(lfinite$a ?v1 )))):named a33 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (lfinite$b (lappend$b ?v0 ?v1 ))(and (lfinite$b ?v0 )(lfinite$b ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ (ltl$ ?v0 ))(lfinite$ ?v0 ))):named a35 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lfinite$a (ltl$a ?v0 ))(lfinite$a ?v0 ))):named a36 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(= (lfinite$b (ltl$b ?v0 ))(lfinite$b ?v0 ))):named a37 ))
(assert (! (lfinite$ lNil$ ):named a38 ))
(assert (! (lfinite$a lNil$a ):named a39 ))
(assert (! (lfinite$b lNil$b ):named a40 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lfinite$ ?v1 ))(lfinite$ ?v0 ))):named a41 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(lfinite$a ?v1 ))(lfinite$a ?v0 ))):named a42 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(=> (and (lprefix$b ?v0 ?v1 )(lfinite$b ?v1 ))(lfinite$b ?v0 ))):named a43 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(lprefix$b ?v0 ?v0 )):named a44 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a45 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a46 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(lprefix$b ?v0 ?v0 )):named a47 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a48 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a49 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod$ )(?v3 A_b_prod_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a50 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a51 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a52 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(= (= (llist_of$b ?v0 )(llist_of$b ?v1 ))(= ?v0 ?v1 ))):named a53 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a54 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a55 ))
(check-sat )
;(get-unsat-core )
