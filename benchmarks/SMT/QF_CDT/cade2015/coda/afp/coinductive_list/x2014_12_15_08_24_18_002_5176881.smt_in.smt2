;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Nat$ )
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun uu$ ()A_a_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun uua$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun uub$ ()B_b_bool_fun_fun$ )
(declare-fun uuc$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun lmap$ (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun lset$ (B_llist$ )B_set$ )
(declare-fun lmap$a (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$b (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$c (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lnth$a (B_llist$ Nat$ )B$ )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun member$ (B$ B_set$ )Bool )
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun lappend$ (B_llist$ B_llist$ )B_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (B_llist$ B_llist$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun fun_app$a (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$e (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$f (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$g (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$h (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$i (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$j (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$k (B_a_fun$ B$ )A$ )
(declare-fun fun_app$l (B_b_fun$ B$ )B$ )
(declare-fun fun_app$m (A_a_fun$ A$ )A$ )
(declare-fun fun_app$n (A_b_fun$ A$ )B$ )
(declare-fun lappend$a (A_llist$ A_llist$ )A_llist$ )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun lprefix$a (A_llist$ A_llist$ )Bool )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(declare-fun ltakeWhile$ (B_bool_fun$ B_llist$ )B_llist$ )
(declare-fun llist_all2$a (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun llist_all2$c (B_a_bool_fun_fun$ B_llist$ A_llist$ )Bool )
(declare-fun ltakeWhile$a (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun lstrict_prefix$ (B_llist$ B_llist$ )Bool )
(declare-fun lstrict_prefix$a (A_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$ (fun_app$a uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uuc$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$b (fun_app$c uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$d (fun_app$e uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$f (fun_app$g uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uu$ ?v0 )?v1 )))):named a3 ))
(assert (! (not (fun_app$d (fun_app$h p$ (lnth$ xs$ n$ ))(lnth$a ys$ n$ ))):named a4 ))
(assert (! (llist_all2$ p$ xs$ ys$ ):named a5 ))
(assert (! (fun_app$i (less$ (enat$ n$ ))(llength$ xs$ )):named a6 ))
(assert (! (= (llist_all2$a uu$ )uua$ ):named a7 ))
(assert (! (= (llist_all2$b uub$ )uuc$ ):named a8 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (llist_all2$c ?v0 ?v1 ?v2 )(= (llength$a ?v1 )(llength$ ?v2 )))):named a9 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (fun_app$ (fun_app$a (llist_all2$b ?v0 )?v1 )?v2 )(= (llength$a ?v1 )(llength$a ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(= (llength$ ?v1 )(llength$ ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (llist_all2$ ?v0 ?v1 ?v2 )(= (llength$ ?v1 )(llength$a ?v2 )))):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_bool_fun_fun$ ))(=> (and (= (llength$a ?v0 )(llength$a ?v1 ))(forall ((?v3 Nat$ ))(=> (fun_app$i (less$ (enat$ ?v3 ))(llength$a ?v0 ))(fun_app$d (fun_app$e ?v2 (lnth$a ?v0 ?v3 ))(lnth$a ?v1 ?v3 )))))(fun_app$ (fun_app$a (llist_all2$b ?v2 )?v0 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ )(?v2 B_a_bool_fun_fun$ ))(=> (and (= (llength$a ?v0 )(llength$ ?v1 ))(forall ((?v3 Nat$ ))(=> (fun_app$i (less$ (enat$ ?v3 ))(llength$a ?v0 ))(fun_app$f (fun_app$j ?v2 (lnth$a ?v0 ?v3 ))(lnth$ ?v1 ?v3 )))))(llist_all2$c ?v2 ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (and (= (llength$ ?v0 )(llength$ ?v1 ))(forall ((?v3 Nat$ ))(=> (fun_app$i (less$ (enat$ ?v3 ))(llength$ ?v0 ))(fun_app$f (fun_app$g ?v2 (lnth$ ?v0 ?v3 ))(lnth$ ?v1 ?v3 )))))(fun_app$b (fun_app$c (llist_all2$a ?v2 )?v0 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A_b_bool_fun_fun$ ))(=> (and (= (llength$ ?v0 )(llength$a ?v1 ))(forall ((?v3 Nat$ ))(=> (fun_app$i (less$ (enat$ ?v3 ))(llength$ ?v0 ))(fun_app$d (fun_app$h ?v2 (lnth$ ?v0 ?v3 ))(lnth$a ?v1 ?v3 )))))(llist_all2$ ?v2 ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (fun_app$i (less$ ?v0 )(enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_a_fun$ ))(=> (fun_app$i (less$ (enat$ ?v0 ))(llength$a ?v1 ))(= (lnth$ (lmap$ ?v2 ?v1 )?v0 )(fun_app$k ?v2 (lnth$a ?v1 ?v0 ))))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_b_fun$ ))(=> (fun_app$i (less$ (enat$ ?v0 ))(llength$a ?v1 ))(= (lnth$a (lmap$a ?v2 ?v1 )?v0 )(fun_app$l ?v2 (lnth$a ?v1 ?v0 ))))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (fun_app$i (less$ (enat$ ?v0 ))(llength$ ?v1 ))(= (lnth$ (lmap$b ?v2 ?v1 )?v0 )(fun_app$m ?v2 (lnth$ ?v1 ?v0 ))))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_b_fun$ ))(=> (fun_app$i (less$ (enat$ ?v0 ))(llength$ ?v1 ))(= (lnth$a (lmap$c ?v2 ?v1 )?v0 )(fun_app$n ?v2 (lnth$ ?v1 ?v0 ))))):named a22 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 Nat$ ))(=> (and (lprefix$ ?v0 ?v1 )(fun_app$i (less$ (enat$ ?v2 ))(llength$a ?v0 )))(= (lnth$a ?v0 ?v2 )(lnth$a ?v1 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 Nat$ ))(=> (and (lprefix$a ?v0 ?v1 )(fun_app$i (less$ (enat$ ?v2 ))(llength$ ?v0 )))(= (lnth$ ?v0 ?v2 )(lnth$ ?v1 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_bool_fun$ )(?v2 B_llist$ ))(=> (fun_app$i (less$ (enat$ ?v0 ))(llength$a (ltakeWhile$ ?v1 ?v2 )))(= (lnth$a (ltakeWhile$ ?v1 ?v2 )?v0 )(lnth$a ?v2 ?v0 )))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (fun_app$i (less$ (enat$ ?v0 ))(llength$ (ltakeWhile$a ?v1 ?v2 )))(= (lnth$ (ltakeWhile$a ?v1 ?v2 )?v0 )(lnth$ ?v2 ?v0 )))):named a26 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(exists ((?v2 Nat$ ))(and (fun_app$i (less$ (enat$ ?v2 ))(llength$a ?v1 ))(= (lnth$a ?v1 ?v2 )?v0 ))))):named a27 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$a ?v0 (lset$a ?v1 ))(exists ((?v2 Nat$ ))(and (fun_app$i (less$ (enat$ ?v2 ))(llength$ ?v1 ))(= (lnth$ ?v1 ?v2 )?v0 ))))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (fun_app$i (less$ (enat$ ?v0 ))(llength$a ?v1 ))(= (lnth$a (lappend$ ?v1 ?v2 )?v0 )(lnth$a ?v1 ?v0 )))):named a29 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$i (less$ (enat$ ?v0 ))(llength$ ?v1 ))(= (lnth$ (lappend$a ?v1 ?v2 )?v0 )(lnth$ ?v1 ?v0 )))):named a30 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$i (less$ ?v3 )?v2 )(fun_app$i ?v0 ?v3 )))(fun_app$i ?v0 ?v2 )))(fun_app$i ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(fun_app$i (less$ (llength$a ?v0 ))(llength$a ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(fun_app$i (less$ (llength$ ?v0 ))(llength$ ?v1 )))):named a33 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$i (less$ ?v0 )?v1 )(fun_app$i (less$ ?v1 )?v0 )))):named a34 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (fun_app$i (less$ ?v0 )?v1 ))(or (fun_app$i (less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a35 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$a ?v0 ?v0 )):named a36 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$ ?v0 ?v0 )):named a37 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$a ?v0 ?v0 )):named a38 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$ ?v0 ?v0 )):named a39 ))
(check-sat )
;(get-unsat-core )
