;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_list$ 0)
(declare-sort Nat_list$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun nil$a ()Nat_list$)
(declare-fun hd$a (Nat_list$)Nat$)
(declare-fun tl$a (Nat_list$)Nat_list$)
(declare-fun cons$a (Nat$ Nat_list$ )Nat_list$)
(declare-codatatypes ()((Nat_llist$ (lNil$a )(lCons$a (lhd$a Nat$ )(ltl$a Nat_llist$ )))))
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-fun nibble0$ ()Nibble$)
(declare-fun nibble1$ ()Nibble$)
(declare-fun nibble2$ ()Nibble$)
(declare-fun nibble3$ ()Nibble$)
(declare-fun nibble4$ ()Nibble$)
(declare-fun nibble5$ ()Nibble$)
(declare-fun nibble6$ ()Nibble$)
(declare-fun nibble7$ ()Nibble$)
(declare-fun nibble8$ ()Nibble$)
(declare-fun nibble9$ ()Nibble$)
(declare-fun nibbleA$ ()Nibble$)
(declare-fun nibbleB$ ()Nibble$)
(declare-fun nibbleC$ ()Nibble$)
(declare-fun nibbleD$ ()Nibble$)
(declare-fun nibbleE$ ()Nibble$)
(declare-fun nibbleF$ ()Nibble$)
(declare-fun select$ (Char$)Nibble$)
(declare-fun selecta$ (Char$)Nibble$)
(declare-fun char$ (Nibble$ Nibble$ )Char$)
(declare-fun f$ ()Nat_a_fun$ )
(declare-fun n$ ()Nat$ )
(declare-fun map$ (Nat_a_fun$ Nat_list$ )A_list$ )
(declare-fun upt$ (Nat$ Nat$ )Nat_list$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lmap$ (A_nat_fun$ A_llist$ )Nat_llist$ )
(declare-fun map$a (A_nat_fun$ A_list$ )Nat_list$ )
(declare-fun map$b (Nat_nat_fun$ Nat_list$ )Nat_list$ )
(declare-fun map$c (A_a_fun$ A_list$ )A_list$ )
(declare-fun size$ (Enat$ )Nat$ )
(declare-fun take$ (Nat$ Nat_list$ )Nat_list$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lmap$a (Nat_nat_fun$ Nat_llist$ )Nat_llist$ )
(declare-fun lmap$b (Nat_a_fun$ Nat_llist$ )A_llist$ )
(declare-fun lmap$c (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun take$a (Nat$ A_list$ )A_list$ )
(declare-fun ltake$a (Enat$ Nat_llist$ )Nat_llist$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun lprefix$ (Nat_llist$ Nat_llist$ )Bool )
(declare-fun fun_app$a (Nat_a_fun$ Nat$ )A$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun lprefix$a (A_llist$ A_llist$ )Bool )
(declare-fun inf_llist$ (Nat_a_fun$ )A_llist$ )
(declare-fun llist_of$a (Nat_list$ )Nat_llist$ )
(declare-fun size_char$ (Char$ )Nat$ )
(declare-fun size_enat$ (Enat$ )Nat$ )
(declare-fun inf_llist$a (Nat_nat_fun$ )Nat_llist$ )
(assert (! (not (= (ltake$ (enat$ n$ )(inf_llist$ f$ ))(llist_of$ (map$ f$ (upt$ zero$ n$ ))))):named a0 ))
(assert (! (forall ((?v0 Nat_list$ )(?v1 Nat_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ ))(= (= (inf_llist$a ?v0 )(inf_llist$a ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_a_fun$ ))(= (= (inf_llist$ ?v0 )(inf_llist$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat_llist$ ))(=> (and (forall ((?v1 Nat_list$ ))(=> (= ?v0 (llist_of$a ?v1 ))false ))(forall ((?v1 Nat_nat_fun$ ))(=> (= ?v0 (inf_llist$a ?v1 ))false )))false )):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (forall ((?v1 A_list$ ))(=> (= ?v0 (llist_of$ ?v1 ))false ))(forall ((?v1 Nat_a_fun$ ))(=> (= ?v0 (inf_llist$ ?v1 ))false )))false )):named a6 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$a (enat$ ?v2 )?v0 )(ltake$a (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat_list$ )(?v1 Nat_nat_fun$ ))(not (= (llist_of$a ?v0 )(inf_llist$a ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat_a_fun$ ))(not (= (llist_of$ ?v0 )(inf_llist$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (size_enat$ (enat$ ?v0 ))zero$ ):pattern ((enat$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_list$ ))(= (ltake$a (enat$ ?v0 )(llist_of$a ?v1 ))(llist_of$a (take$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (ltake$ (enat$ ?v0 )(llist_of$ ?v1 ))(llist_of$ (take$a ?v0 ?v1 )))):named a14 ))
(assert (! (= zero$ zero$ ):named a15 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a16 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (size$ (enat$ ?v0 ))zero$ ):pattern ((enat$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a18 ))
(assert (! (forall ((?v0 Nat_nat_fun$ ))(= (lhd$a (inf_llist$a ?v0 ))(fun_app$ ?v0 zero$ ))):named a19 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(= (lhd$ (inf_llist$ ?v0 ))(fun_app$a ?v0 zero$ ))):named a20 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a21 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 A_list$ ))(= (lmap$ ?v0 (llist_of$ ?v1 ))(llist_of$a (map$a ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_list$ ))(= (lmap$a ?v0 (llist_of$a ?v1 ))(llist_of$a (map$b ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_list$ ))(= (lmap$b ?v0 (llist_of$a ?v1 ))(llist_of$ (map$ ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (lmap$c ?v0 (llist_of$ ?v1 ))(llist_of$ (map$c ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (forall ((?v2 Nat$ ))(lprefix$ (ltake$a (enat$ ?v2 )?v0 )(ltake$a (enat$ ?v2 )?v1 )))(lprefix$ ?v0 ?v1 ))):named a26 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(lprefix$a (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(lprefix$a ?v0 ?v1 ))):named a27 ))
(check-sat )
;(get-unsat-core )
