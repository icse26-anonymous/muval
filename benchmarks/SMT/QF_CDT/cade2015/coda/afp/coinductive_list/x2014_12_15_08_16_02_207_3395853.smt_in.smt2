;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Enat_set$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_llist_b_llist_prod_set$ 0 )
(declare-sort Enat_a_llist_b_llist_prod_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_llist_b_llist_prod$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun fst$ (A_llist_b_llist_prod$)A_llist$)
(declare-fun snd$ (A_llist_b_llist_prod$)B_llist$)
(declare-fun pair$ (A_llist$ B_llist$ )A_llist_b_llist_prod$)
(declare-fun n$ ()Nat$ )
(declare-fun p$ (A_llist$ B_llist$ )Bool )
(declare-fun uu$ ()Enat_a_llist_b_llist_prod_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun top$ ()Nat_set$ )
(declare-fun uua$ ()B_b_fun$ )
(declare-fun uub$ ()A_a_fun$ )
(declare-fun enat$ ()Nat_enat_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun xsys$ ()A_llist_b_llist_prod$ )
(declare-fun image$ (Enat_a_llist_b_llist_prod_fun$ Enat_set$ )A_llist_b_llist_prod_set$ )
(declare-fun lmap$a (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$b (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun ltake$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun image$a (Nat_enat_fun$ Nat_set$ )Enat_set$ )
(declare-fun ltake$a (Enat$ )B_llist_b_llist_fun$ )
(declare-fun member$ (A_llist_b_llist_prod$ A_llist_b_llist_prod_set$ )Bool )
(declare-fun fun_app$ (Enat_a_llist_b_llist_prod_fun$ Enat$ )A_llist_b_llist_prod$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$c (B_b_fun$ B$ )B$ )
(declare-fun fun_app$d (A_a_fun$ A$ )A$ )
(declare-fun fun_app$e (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun lfinite$a (B_llist$ )Bool )
(declare-fun lprefix$a (B_llist$ B_llist$ )Bool )
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ uu$ ?v0 )(pair$ (fun_app$a (ltake$ ?v0 )xs$ )(fun_app$b (ltake$a ?v0 )ys$ ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$c uua$ ?v0 )?v0 ):pattern ((fun_app$c uua$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$d uub$ ?v0 )?v0 ):pattern ((fun_app$d uub$ ?v0 )))):named a2 ))
(assert (! (not (p$ (fun_app$a (ltake$ (fun_app$e enat$ n$ ))xs$ )(fun_app$b (ltake$a (fun_app$e enat$ n$ ))ys$ ))):named a3 ))
(assert (! (= xsys$ (pair$ (fun_app$a (ltake$ (fun_app$e enat$ n$ ))xs$ )(fun_app$b (ltake$a (fun_app$e enat$ n$ ))ys$ ))):named a4 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= xsys$ (pair$ (fun_app$a (ltake$ (fun_app$e enat$ ?v0 ))xs$ )(fun_app$b (ltake$a (fun_app$e enat$ ?v0 ))ys$ )))false ))false ):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$e enat$ ?v0 )(fun_app$e enat$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (p$ lNil$ lNil$a ):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$a (ltake$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$a (ltake$ ?v0 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_a_fun$ )(?v2 B_llist$ ))(= (fun_app$a (ltake$ ?v0 )(lmap$a ?v1 ?v2 ))(lmap$a ?v1 (fun_app$b (ltake$a ?v0 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_fun$ )(?v2 A_llist$ ))(= (fun_app$b (ltake$a ?v0 )(lmap$b ?v1 ?v2 ))(lmap$b ?v1 (fun_app$a (ltake$ ?v0 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_b_fun$ )(?v2 B_llist$ ))(= (fun_app$b (ltake$a ?v0 )(lmap$c ?v1 ?v2 ))(lmap$c ?v1 (fun_app$b (ltake$a ?v0 )?v2 )))):named a11 ))
(assert (! (member$ xsys$ (image$ uu$ (image$a enat$ top$ ))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(lprefix$ (fun_app$a (ltake$ ?v0 )?v1 )?v1 )):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(lprefix$a (fun_app$b (ltake$a ?v0 )?v1 )?v1 )):named a14 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$a (ltake$ ?v0 )lNil$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$b (ltake$a ?v0 )lNil$a )lNil$a ):pattern ((ltake$a ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(p$ ?v0 lNil$a ))):named a17 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (lfinite$a ?v0 )(p$ lNil$ ?v0 ))):named a18 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a19 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a20 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a21 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a22 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lmap$c uua$ ?v0 )?v0 )):named a23 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lmap$ uub$ ?v0 )?v0 )):named a24 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$ lNil$ ?v0 )true ):pattern ((lprefix$ lNil$ ?v0 )))):named a25 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (lprefix$a lNil$a ?v0 )true ):pattern ((lprefix$a lNil$a ?v0 )))):named a26 ))
(assert (! (= (lfinite$ lNil$ )true ):named a27 ))
(assert (! (= (lfinite$a lNil$a )true ):named a28 ))
(check-sat )
;(get-unsat-core )
