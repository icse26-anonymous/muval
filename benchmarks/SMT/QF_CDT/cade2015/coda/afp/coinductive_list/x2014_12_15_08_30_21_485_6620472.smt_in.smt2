;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun p$ (A$ )Bool )
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun uua$ ()A_bool_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(not (p$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uua$ ?v0 )true ):pattern ((fun_app$ uua$ ?v0 )))):named a1 ))
(assert (! (not (= xsa$ (lappend$ (ltakeWhile$ uu$ xsa$ )(lCons$ (lhd$ (ldropWhile$ uu$ xsa$ ))(ltl$ (ldropWhile$ uu$ xsa$ )))))):named a2 ))
(assert (! (exists ((?v0 A$ ))(and (member$ ?v0 (lset$ xsa$ ))(p$ ?v0 ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ltakeWhile$ uua$ ?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$ (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$ ?v0 ?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (ldropWhile$ ?v0 (lCons$ ?v1 ?v2 ))(ite (fun_app$ ?v0 ?v1 )(ldropWhile$ ?v0 ?v2 )(lCons$ ?v1 ?v2 ))):pattern ((ldropWhile$ ?v0 (lCons$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lappend$ (ltakeWhile$ ?v0 ?v1 )(ldropWhile$ ?v0 ?v1 ))?v1 )):named a8 ))
(assert (! (not (lfinite$ xsa$ )):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lhd$ (lCons$ ?v0 ?v1 ))?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (ltl$ (lCons$ ?v0 ?v1 ))?v1 ):pattern ((lCons$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (exists ((?v2 A$ ))(and (member$ ?v2 (lset$ ?v0 ))(not (fun_app$ ?v1 ?v2 ))))(member$ (lhd$ (ldropWhile$ ?v1 ?v0 ))(lset$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (exists ((?v2 A$ ))(and (member$ ?v2 (lset$ ?v0 ))(not (fun_app$ ?v1 ?v2 ))))(not (fun_app$ ?v1 (lhd$ (ldropWhile$ ?v1 ?v0 )))))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_bool_fun$ )(?v3 A_llist$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(not (fun_app$ ?v2 ?v0 )))(= (ltakeWhile$ ?v2 (lappend$ ?v1 ?v3 ))(ltakeWhile$ ?v2 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (ldropWhile$ ?v2 ?v0 )(ldropWhile$ ?v3 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (ldropWhile$ ?v1 ?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (ltakeWhile$ ?v2 ?v0 )(ltakeWhile$ ?v3 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(! (=> (forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v0 ))(fun_app$ ?v1 ?v2 )))(= (ltakeWhile$ ?v1 ?v0 )?v0 )):pattern ((ltakeWhile$ ?v1 ?v0 )))):named a19 ))
(check-sat )
;(get-unsat-core )
