;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort B$ 0 )
(declare-sort B_set$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort B_b_llist_fun$ 0 )
(declare-sort B_llist_b_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort B_llist_llist_b_llist_llist_fun$ 0 )
(declare-sort B_llist_llist_llist_b_llist_llist_llist_fun$ 0 )
(declare-sort B_llist_llist_llist_llist_b_llist_llist_llist_llist_fun$ 0 )
(declare-codatatypes ()((B_llist$ (lNil$ )(lCons$ (lhd$ B$ )(ltl$ B_llist$ )))(B_llist_llist$ (lNil$a )(lCons$a (lhd$a B_llist$ )(ltl$a B_llist_llist$ )))(B_llist_llist_llist$ (lNil$b )(lCons$b (lhd$b B_llist_llist$ )(ltl$b B_llist_llist_llist$ )))(B_llist_llist_llist_llist$ (lNil$c )(lCons$c (lhd$c B_llist_llist_llist$ )(ltl$c B_llist_llist_llist_llist$ )))))
(declare-fun id$ ()B_llist_b_llist_fun$ )
(declare-fun uu$ ()B_bool_fun$ )
(declare-fun xs$ ()B_llist$ )
(declare-fun id$a ()B_llist_llist_llist_b_llist_llist_llist_fun$ )
(declare-fun id$b ()B_llist_llist_b_llist_llist_fun$ )
(declare-fun id$c ()B_b_fun$ )
(declare-fun id$d ()B_llist_llist_llist_llist_b_llist_llist_llist_llist_fun$ )
(declare-fun uua$ ()B_llist_llist_b_llist_llist_fun$ )
(declare-fun uub$ ()B_llist_b_llist_fun$ )
(declare-fun uuc$ ()B_b_fun$ )
(declare-fun lmap$ (B_llist_llist_llist_b_llist_llist_llist_fun$ )B_llist_llist_llist_llist_b_llist_llist_llist_llist_fun$ )
(declare-fun lset$ (B_llist$ )B_set$ )
(declare-fun lmap$a (B_llist_llist_b_llist_llist_fun$ )B_llist_llist_llist_b_llist_llist_llist_fun$ )
(declare-fun lmap$b (B_b_fun$ )B_llist_b_llist_fun$ )
(declare-fun lmap$c (B_llist_b_llist_fun$ )B_llist_llist_b_llist_llist_fun$ )
(declare-fun lmap$d (B_llist_b_fun$ B_llist_llist$ )B_llist$ )
(declare-fun lmap$e (B_b_llist_fun$ B_llist$ )B_llist_llist$ )
(declare-fun member$ (B$ B_set$ )Bool )
(declare-fun fun_app$ (B_llist_llist_b_llist_llist_fun$ B_llist_llist$ )B_llist_llist$ )
(declare-fun fun_app$a (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$b (B_b_fun$ B$ )B$ )
(declare-fun fun_app$c (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$d (B_llist_llist_llist_b_llist_llist_llist_fun$ B_llist_llist_llist$ )B_llist_llist_llist$ )
(declare-fun fun_app$e (B_llist_llist_llist_llist_b_llist_llist_llist_llist_fun$ B_llist_llist_llist_llist$ )B_llist_llist_llist_llist$ )
(declare-fun ldropWhile$ (B_bool_fun$ )B_llist_b_llist_fun$ )
(declare-fun ldropWhile$a (B_llist_bool_fun$ )B_llist_llist_b_llist_llist_fun$ )
(declare-fun iso_tuple_surjective_proof_assist$ (B_llist_llist_llist$ B_llist_llist_llist$ B_llist_llist_llist_b_llist_llist_llist_fun$ )Bool )
(declare-fun iso_tuple_surjective_proof_assist$a (B_llist_llist$ B_llist_llist$ B_llist_llist_b_llist_llist_fun$ )Bool )
(declare-fun iso_tuple_surjective_proof_assist$b (B$ B$ B_b_fun$ )Bool )
(declare-fun iso_tuple_surjective_proof_assist$c (B_llist$ B_llist$ B_llist_b_llist_fun$ )Bool )
(assert (! (forall ((?v0 B_llist_llist$ ))(! (= (fun_app$ uua$ ?v0 )?v0 ):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$a uub$ ?v0 )?v0 ):pattern ((fun_app$a uub$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$b uuc$ ?v0 )?v0 ):pattern ((fun_app$b uuc$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$c uu$ ?v0 )false ):pattern ((fun_app$c uu$ ?v0 )))):named a3 ))
(assert (! (not (= (fun_app$a (ldropWhile$ uu$ )xs$ )(fun_app$a id$ xs$ ))):named a4 ))
(assert (! (forall ((?v0 B_llist_llist_llist$ ))(! (= (fun_app$d id$a ?v0 )?v0 ):pattern ((fun_app$d id$a ?v0 )))):named a5 ))
(assert (! (forall ((?v0 B_llist_llist$ ))(! (= (fun_app$ id$b ?v0 )?v0 ):pattern ((fun_app$ id$b ?v0 )))):named a6 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$b id$c ?v0 )?v0 ):pattern ((fun_app$b id$c ?v0 )))):named a7 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$a id$ ?v0 )?v0 ):pattern ((fun_app$a id$ ?v0 )))):named a8 ))
(assert (! (= (lmap$ id$a )id$d ):named a9 ))
(assert (! (= (lmap$a id$b )id$a ):named a10 ))
(assert (! (= (lmap$b id$c )id$ ):named a11 ))
(assert (! (= (lmap$c id$ )id$b ):named a12 ))
(assert (! (forall ((?v0 B_llist_llist_llist$ ))(! (= (fun_app$d id$a ?v0 )?v0 ):pattern ((fun_app$d id$a ?v0 )))):named a13 ))
(assert (! (forall ((?v0 B_llist_llist$ ))(! (= (fun_app$ id$b ?v0 )?v0 ):pattern ((fun_app$ id$b ?v0 )))):named a14 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$b id$c ?v0 )?v0 ):pattern ((fun_app$b id$c ?v0 )))):named a15 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$a id$ ?v0 )?v0 ):pattern ((fun_app$a id$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 B_llist_bool_fun$ ))(! (= (fun_app$ (ldropWhile$a ?v0 )lNil$a )lNil$a ):pattern ((ldropWhile$a ?v0 )))):named a17 ))
(assert (! (forall ((?v0 B_bool_fun$ ))(! (= (fun_app$a (ldropWhile$ ?v0 )lNil$ )lNil$ ):pattern ((ldropWhile$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (fun_app$a (ldropWhile$ ?v0 )(lCons$ ?v1 ?v2 ))(ite (fun_app$c ?v0 ?v1 )(fun_app$a (ldropWhile$ ?v0 )?v2 )(lCons$ ?v1 ?v2 ))):pattern ((fun_app$a (ldropWhile$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a19 ))
(assert (! (forall ((?v0 B$ )(?v1 B_bool_fun$ )(?v2 B_llist$ ))(=> (member$ ?v0 (lset$ (fun_app$a (ldropWhile$ ?v1 )?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a20 ))
(assert (! (forall ((?v0 B_llist_llist_llist$ )(?v1 B_llist_llist_llist$ ))(=> (iso_tuple_surjective_proof_assist$ ?v0 ?v1 id$a )(= ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 B_llist_llist$ )(?v1 B_llist_llist$ ))(=> (iso_tuple_surjective_proof_assist$a ?v0 ?v1 id$b )(= ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(=> (iso_tuple_surjective_proof_assist$b ?v0 ?v1 id$c )(= ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (iso_tuple_surjective_proof_assist$c ?v0 ?v1 id$ )(= ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 B_llist_llist_llist_llist$ ))(= (fun_app$e (lmap$ id$a )?v0 )?v0 )):named a25 ))
(assert (! (forall ((?v0 B_llist_llist_llist$ ))(= (fun_app$d (lmap$a id$b )?v0 )?v0 )):named a26 ))
(assert (! (forall ((?v0 B_llist$ ))(= (fun_app$a (lmap$b id$c )?v0 )?v0 )):named a27 ))
(assert (! (forall ((?v0 B_llist_llist$ ))(= (fun_app$ (lmap$c id$ )?v0 )?v0 )):named a28 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a29 ))
(assert (! (forall ((?v0 B_llist_llist_llist$ ))(= (fun_app$d (lmap$a uua$ )?v0 )?v0 )):named a30 ))
(assert (! (forall ((?v0 B_llist_llist$ ))(= (fun_app$ (lmap$c uub$ )?v0 )?v0 )):named a31 ))
(assert (! (forall ((?v0 B_llist$ ))(= (fun_app$a (lmap$b uuc$ )?v0 )?v0 )):named a32 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B_b_fun$ ))(! (= (iso_tuple_surjective_proof_assist$b ?v0 ?v1 ?v2 )(= (fun_app$b ?v2 ?v0 )?v1 )):pattern ((iso_tuple_surjective_proof_assist$b ?v0 ?v1 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 B_llist_llist$ )(?v1 B_llist_llist$ )(?v2 B_llist_llist_b_llist_llist_fun$ ))(! (= (iso_tuple_surjective_proof_assist$a ?v0 ?v1 ?v2 )(= (fun_app$ ?v2 ?v0 )?v1 )):pattern ((iso_tuple_surjective_proof_assist$a ?v0 ?v1 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist_b_llist_fun$ ))(! (= (iso_tuple_surjective_proof_assist$c ?v0 ?v1 ?v2 )(= (fun_app$a ?v2 ?v0 )?v1 )):pattern ((iso_tuple_surjective_proof_assist$c ?v0 ?v1 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 B_llist_b_fun$ )(?v1 B_llist_llist$ ))(= (= (lmap$d ?v0 ?v1 )lNil$ )(= ?v1 lNil$a ))):named a36 ))
(assert (! (forall ((?v0 B_b_llist_fun$ )(?v1 B_llist$ ))(= (= (lmap$e ?v0 ?v1 )lNil$a )(= ?v1 lNil$ ))):named a37 ))
(assert (! (forall ((?v0 B_llist_llist_b_llist_llist_fun$ )(?v1 B_llist_llist_llist$ ))(= (= (fun_app$d (lmap$a ?v0 )?v1 )lNil$b )(= ?v1 lNil$b ))):named a38 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B_llist_llist$ ))(= (= (fun_app$ (lmap$c ?v0 )?v1 )lNil$a )(= ?v1 lNil$a ))):named a39 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= (fun_app$a (lmap$b ?v0 )?v1 )lNil$ )(= ?v1 lNil$ ))):named a40 ))
(check-sat )
;(get-unsat-core )
