;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-codatatypes ()((B_llist$ (lNil$ )(lCons$ (lhd$ B$ )(ltl$ B_llist$ )))(A_llist$ (lNil$a )(lCons$a (lhd$a A$ )(ltl$a A_llist$ )))))
(declare-fun f$ ()B_a_fun$ )
(declare-fun xs$ ()B_llist$ )
(declare-fun lmap$ (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lset$ (B_llist$ )B_set$ )
(declare-fun image$ (A_b_fun$ A_set$ )B_set$ )
(declare-fun lmap$a (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$b (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun lsetp$ (A_llist$ A$ )Bool )
(declare-fun image$a (A_a_fun$ A_set$ )A_set$ )
(declare-fun image$b (B_a_fun$ B_set$ )A_set$ )
(declare-fun image$c (B_b_fun$ B_set$ )B_set$ )
(declare-fun inj_on$ (B_a_fun$ B_set$ )Bool )
(declare-fun lsetp$a (B_llist$ B$ )Bool )
(declare-fun member$ (B$ B_set$ )Bool )
(declare-fun fun_app$ (B_a_fun$ B$ )A$ )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_b_fun$ A$ )B$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (B_b_fun$ B$ )B$ )
(declare-fun lmember$a (B$ B_llist$ )Bool )
(declare-fun ldistinct$ (B_llist$ )Bool )
(declare-fun ldistinct$a (A_llist$ )Bool )
(assert (! (not (inj_on$ f$ (lset$ xs$ ))):named a0 ))
(assert (! (ldistinct$ xs$ ):named a1 ))
(assert (! (ldistinct$a (lmap$ f$ xs$ )):named a2 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_set$ ))(= (inj_on$ ?v0 ?v1 )(forall ((?v2 B$ ))(=> (member$ ?v2 ?v1 )(forall ((?v3 B$ ))(=> (and (member$ ?v3 ?v1 )(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v0 ?v3 )))(= ?v2 ?v3 ))))))):named a3 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ ))(=> (forall ((?v3 B$ ))(=> (member$ ?v3 ?v0 )(= (fun_app$ ?v1 ?v3 )(fun_app$ ?v2 ?v3 ))))(= (inj_on$ ?v1 ?v0 )(inj_on$ ?v2 ?v0 )))):named a4 ))
(assert (! (forall ((?v0 B_set$ )(?v1 A_b_fun$ )(?v2 B_a_fun$ ))(=> (forall ((?v3 B$ ))(=> (member$ ?v3 ?v0 )(= (fun_app$a ?v1 (fun_app$ ?v2 ?v3 ))?v3 )))(inj_on$ ?v2 ?v0 ))):named a5 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B_a_fun$ ))(=> (forall ((?v2 B$ )(?v3 B$ ))(=> (and (member$ ?v2 ?v0 )(and (member$ ?v3 ?v0 )(= (fun_app$ ?v1 ?v2 )(fun_app$ ?v1 ?v3 ))))(= ?v2 ?v3 )))(inj_on$ ?v1 ?v0 ))):named a6 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_set$ )(?v2 B$ )(?v3 B$ ))(=> (and (inj_on$ ?v0 ?v1 )(and (= (fun_app$ ?v0 ?v2 )(fun_app$ ?v0 ?v3 ))(and (member$ ?v2 ?v1 )(member$ ?v3 ?v1 ))))(= ?v2 ?v3 ))):named a7 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_set$ )(?v2 B$ )(?v3 B$ ))(=> (and (inj_on$ ?v0 ?v1 )(and (member$ ?v2 ?v1 )(member$ ?v3 ?v1 )))(= (= (fun_app$ ?v0 ?v2 )(fun_app$ ?v0 ?v3 ))(= ?v2 ?v3 )))):named a8 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_set$ )(?v2 B$ )(?v3 B$ ))(=> (and (inj_on$ ?v0 ?v1 )(and (not (= ?v2 ?v3 ))(and (member$ ?v2 ?v1 )(member$ ?v3 ?v1 ))))(not (= (fun_app$ ?v0 ?v2 )(fun_app$ ?v0 ?v3 ))))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$a ?v0 (lset$a ?v1 ))(lmember$ ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(lmember$a ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (member$a ?v0 (lset$a ?v1 ))(lsetp$ ?v1 ?v0 ))):named a12 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(=> (member$ ?v0 (lset$ ?v1 ))(lsetp$a ?v1 ?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (lsetp$ ?v0 ?v1 )(member$a ?v1 (lset$a ?v0 )))):named a14 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B$ ))(=> (lsetp$a ?v0 ?v1 )(member$ ?v1 (lset$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$a ?v4 (lset$a ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v4 )))))(= (lmap$a ?v2 ?v0 )(lmap$a ?v3 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ )(?v3 A_b_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$a ?v4 (lset$a ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (lmap$b ?v2 ?v0 )(lmap$b ?v3 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 B$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$c ?v2 ?v4 )(fun_app$c ?v3 ?v4 )))))(= (lmap$c ?v2 ?v0 )(lmap$c ?v3 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_a_fun$ )(?v3 B_a_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 B$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (lmap$ ?v2 ?v0 )(lmap$ ?v3 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$a ?v3 (lset$a ?v0 ))(= (fun_app$b ?v1 ?v3 )(fun_app$b ?v2 ?v3 ))))(= (lmap$a ?v1 ?v0 )(lmap$a ?v2 ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$a ?v3 (lset$a ?v0 ))(= (fun_app$a ?v1 ?v3 )(fun_app$a ?v2 ?v3 ))))(= (lmap$b ?v1 ?v0 )(lmap$b ?v2 ?v0 )))):named a21 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(=> (forall ((?v3 B$ ))(=> (member$ ?v3 (lset$ ?v0 ))(= (fun_app$c ?v1 ?v3 )(fun_app$c ?v2 ?v3 ))))(= (lmap$c ?v1 ?v0 )(lmap$c ?v2 ?v0 )))):named a22 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ ))(=> (forall ((?v3 B$ ))(=> (member$ ?v3 (lset$ ?v0 ))(= (fun_app$ ?v1 ?v3 )(fun_app$ ?v2 ?v3 ))))(= (lmap$ ?v1 ?v0 )(lmap$ ?v2 ?v0 )))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$a ?v4 (lset$a ?v0 ))(and (member$a ?v5 (lset$a ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (lmap$a ?v2 ?v0 )(lmap$a ?v3 ?v1 )))(= ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ )(?v3 A_b_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$a ?v4 (lset$a ?v0 ))(and (member$a ?v5 (lset$a ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (lmap$b ?v2 ?v0 )(lmap$b ?v3 ?v1 )))(= ?v0 ?v1 ))):named a25 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ ))(=> (and (forall ((?v4 B$ )(?v5 B$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$c ?v2 ?v4 )(fun_app$c ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (lmap$c ?v2 ?v0 )(lmap$c ?v3 ?v1 )))(= ?v0 ?v1 ))):named a26 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_a_fun$ )(?v3 B_a_fun$ ))(=> (and (forall ((?v4 B$ )(?v5 B$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (lmap$ ?v2 ?v0 )(lmap$ ?v3 ?v1 )))(= ?v0 ?v1 ))):named a27 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (ldistinct$a (lCons$a ?v0 ?v1 ))(and (not (member$a ?v0 (lset$a ?v1 )))(ldistinct$a ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (ldistinct$ (lCons$ ?v0 ?v1 ))(and (not (member$ ?v0 (lset$ ?v1 )))(ldistinct$ ?v1 ))):pattern ((lCons$ ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lset$ (lmap$b ?v0 ?v1 ))(image$ ?v0 (lset$a ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lset$a (lmap$a ?v0 ?v1 ))(image$a ?v0 (lset$a ?v1 )))):named a31 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lset$a (lmap$ ?v0 ?v1 ))(image$b ?v0 (lset$ ?v1 )))):named a32 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lset$ (lmap$c ?v0 ?v1 ))(image$c ?v0 (lset$ ?v1 )))):named a33 ))
(check-sat )
;(get-unsat-core )
