;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_a_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-fun x$ ()A_llist$ )
(declare-fun uu$ ()A_llist_bool_fun$ )
(declare-fun xs$ ()A_llist_llist$ )
(declare-fun uua$ ()A_bool_fun$ )
(declare-fun uub$ ()A_llist_bool_fun$ )
(declare-fun uuc$ (A_bool_fun$ )A_llist_a_bool_fun_fun$ )
(declare-fun uud$ (A_llist_bool_fun$ )A_llist_llist_a_llist_bool_fun_fun$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun lset$ (A_llist_llist$ )A_llist_set$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun lnull$ ()A_llist_bool_fun$ )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun lnull$a (A_llist_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun thesis$ ()Bool )
(declare-fun collect$ (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lappend$ (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun less_eq$ (A_llist_set$ A_llist_set$ )Bool )
(declare-fun lfilter$ (A_llist_bool_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lfinite$ (A_llist_llist$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun collect$a (A_bool_fun$ )A_set$ )
(declare-fun fun_app$a (A_llist_llist_a_llist_bool_fun_fun$ A_llist_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_llist_a_bool_fun_fun$ A_llist$ )A_bool_fun$ )
(declare-fun lappend$a (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfilter$a (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uu$ ?v0 )(not (fun_app$ lnull$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$a (uud$ ?v0 )?v1 )?v2 )(and (member$ ?v2 (lset$ ?v1 ))(fun_app$ ?v0 ?v2 ))):pattern ((fun_app$ (fun_app$a (uud$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ )(?v2 A$ ))(! (= (fun_app$b (fun_app$c (uuc$ ?v0 )?v1 )?v2 )(and (member$a ?v2 (lset$a ?v1 ))(fun_app$b ?v0 ?v2 ))):pattern ((fun_app$b (fun_app$c (uuc$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uub$ ?v0 )true ):pattern ((fun_app$ uub$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b uua$ ?v0 )true ):pattern ((fun_app$b uua$ ?v0 )))):named a4 ))
(assert (! (not thesis$ ):named a5 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (= xssa$ (lappend$ ?v0 (lCons$a x$ ?v1 )))(and (lfinite$ ?v0 )(and (less_eq$ (lset$ ?v0 )(collect$ lnull$ ))(and (not (fun_app$ lnull$ x$ ))(= xs$ (lfilter$ uu$ ?v1 ))))))thesis$ )):named a6 ))
(assert (! (lfinite$ xs$ ):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfilter$a ?v0 (lfilter$a ?v0 ?v1 ))(lfilter$a ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v0 ?v1 ))(lfilter$ ?v0 ?v1 ))):named a11 ))
(assert (! (lfinite$ (lfilter$ uu$ xss$ )):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfilter$a uua$ ?v0 )?v0 )):named a13 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (lfilter$ uub$ ?v0 )?v0 )):named a14 ))
(assert (! (= (lCons$a x$ xs$ )(lfilter$ uu$ xssa$ )):named a15 ))
(assert (! (exists ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(and (= xssa$ (lappend$ ?v0 (lCons$a x$ ?v1 )))(and (lfinite$ ?v0 )(and (forall ((?v2 A_llist$ ))(=> (member$ ?v2 (lset$ ?v0 ))(not (not (fun_app$ lnull$ ?v2 )))))(and (not (fun_app$ lnull$ x$ ))(= xs$ (lfilter$ uu$ ?v1 ))))))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$a (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$a ?v1 ?v2 ))):pattern ((lappend$a (lCons$ ?v0 ?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(! (= (lappend$ (lCons$a ?v0 ?v1 )?v2 )(lCons$a ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$a ?v0 ?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$a (lCons$ ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lfinite$ (lCons$a ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$a (lCons$ ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lfinite$ (lCons$a ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (not (lnull$a (lappend$ ?v0 ?v1 )))(or (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (fun_app$ lnull$ (lappend$a ?v0 ?v1 )))(or (not (fun_app$ lnull$ ?v0 ))(not (fun_app$ lnull$ ?v1 ))))):named a24 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (lnull$a (lappend$ ?v0 ?v1 ))(and (lnull$a ?v0 )(lnull$a ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (fun_app$ lnull$ (lappend$a ?v0 ?v1 ))(and (fun_app$ lnull$ ?v0 )(fun_app$ lnull$ ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (lfilter$a ?v0 (lCons$ ?v1 ?v2 ))(ite (fun_app$b ?v0 ?v1 )(lCons$ ?v1 (lfilter$a ?v0 ?v2 ))(lfilter$a ?v0 ?v2 ))):pattern ((lfilter$a ?v0 (lCons$ ?v1 ?v2 ))))):named a27 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (lfilter$ ?v0 (lCons$a ?v1 ?v2 ))(ite (fun_app$ ?v0 ?v1 )(lCons$a ?v1 (lfilter$ ?v0 ?v2 ))(lfilter$ ?v0 ?v2 ))):pattern ((lfilter$ ?v0 (lCons$a ?v1 ?v2 ))))):named a28 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$a (lappend$a ?v0 ?v1 ))(and (lfinite$a ?v0 )(lfinite$a ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (lfinite$ (lappend$ ?v0 ?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lset$a (lfilter$a ?v0 ?v1 ))(collect$a (fun_app$c (uuc$ ?v0 )?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (lset$ (lfilter$ ?v0 ?v1 ))(collect$ (fun_app$a (uud$ ?v0 )?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (lnull$a (lfilter$ ?v0 ?v1 ))(forall ((?v2 A_llist$ ))(=> (member$ ?v2 (lset$ ?v1 ))(not (fun_app$ ?v0 ?v2 )))))):named a33 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$ lnull$ (lfilter$a ?v0 ?v1 ))(forall ((?v2 A$ ))(=> (member$a ?v2 (lset$a ?v1 ))(not (fun_app$b ?v0 ?v2 )))))):named a34 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (lfinite$a ?v0 )(= (lfilter$a ?v1 (lappend$a ?v0 ?v2 ))(lappend$a (lfilter$a ?v1 ?v0 )(lfilter$a ?v1 ?v2 ))))):named a35 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist_llist$ ))(=> (lfinite$ ?v0 )(= (lfilter$ ?v1 (lappend$ ?v0 ?v2 ))(lappend$ (lfilter$ ?v1 ?v0 )(lfilter$ ?v1 ?v2 ))))):named a36 ))
(check-sat )
;(get-unsat-core )
