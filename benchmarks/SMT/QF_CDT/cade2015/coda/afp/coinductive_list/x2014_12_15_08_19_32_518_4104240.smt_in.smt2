;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_llist_llist_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_a_fun$ 0 )
(declare-sort A_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_fun$ 0 )
(declare-sort Nat_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_llist_llist_a_llist_llist_llist_fun$ 0 )
(declare-sort Nat_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_fun_a_llist_llist_a_llist_llist_fun_fun$ 0 )
(declare-sort Nat_a_llist_llist_a_llist_llist_fun_a_llist_llist_a_llist_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_llist_llist_a_llist_llist_llist_fun_a_llist_llist_llist_a_llist_llist_llist_fun_fun$ 0 )
(declare-sort Nat_a_llist_llist_llist_a_llist_llist_llist_fun_a_llist_llist_llist_a_llist_llist_llist_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))(A_llist_llist_llist$ (lNil$b )(lCons$b (lhd$b A_llist_llist$ )(ltl$b A_llist_llist_llist$ )))(A_llist_llist_llist_llist$ (lNil$c )(lCons$c (lhd$c A_llist_llist_llist$ )(ltl$c A_llist_llist_llist_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun f$ ()A_a_fun$ )
(declare-fun h$ (A$ )A_llist$ )
(declare-fun n$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun lmap$ (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun ldrop$ (Enat$ )A_llist_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun lmap$a (A_llist_llist_a_llist_llist_fun$ )A_llist_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun lmap$b (A_llist_a_llist_fun$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun lmap$c (A_llist_llist_llist_a_llist_llist_llist_fun$ )A_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ )
(declare-fun lmap$d (A_a_llist_fun$ )A_llist_a_llist_llist_fun$ )
(declare-fun lmap$e (A_llist_a_fun$ )A_llist_llist_a_llist_fun$ )
(declare-fun lmap$f (A_llist_llist_a_fun$ A_llist_llist_llist$ )A_llist$ )
(declare-fun lmap$g (A_llist_llist_a_llist_fun$ A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lmap$h (A_a_llist_llist_fun$ A_llist$ )A_llist_llist_llist$ )
(declare-fun lmap$i (A_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun compow$ ()Nat_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ )
(declare-fun funpow$ ()Nat_a_llist_llist_llist_a_llist_llist_llist_fun_a_llist_llist_llist_a_llist_llist_llist_fun_fun_fun$ )
(declare-fun ldrop$a (Enat$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun ldrop$b (Enat$ )A_llist_a_llist_fun$ )
(declare-fun ldropn$ (Nat$ )A_llist_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun lnull$a (A_llist_llist_llist$ )Bool )
(declare-fun lnull$b (A_llist_llist$ )Bool )
(declare-fun lnull$c (A_llist_llist_llist_llist$ )Bool )
(declare-fun compow$a ()Nat_a_llist_llist_llist_a_llist_llist_llist_fun_a_llist_llist_llist_a_llist_llist_llist_fun_fun_fun$ )
(declare-fun compow$b ()Nat_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun compow$c ()Nat_a_llist_llist_a_llist_llist_fun_a_llist_llist_a_llist_llist_fun_fun_fun$ )
(declare-fun compow$d (Nat$ A_llist_llist_llist_llist_a_llist_llist_llist_llist_fun$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun funpow$a ()Nat_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun funpow$b ()Nat_a_llist_llist_a_llist_llist_fun_a_llist_llist_a_llist_llist_fun_fun_fun$ )
(declare-fun funpow$c ()Nat_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ )
(declare-fun ldropn$a (Nat$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun ldropn$b (Nat$ )A_llist_a_llist_fun$ )
(declare-fun llength$ (A_llist_llist_llist$ )Enat$ )
(declare-fun fun_app$a (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$b (Nat_a_llist_a_llist_fun_a_llist_a_llist_fun_fun_fun$ Nat$ )A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun fun_app$c (A_a_llist_fun$ A$ )A_llist$ )
(declare-fun fun_app$d (A_llist_llist_llist_a_llist_llist_llist_fun$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun fun_app$e (A_llist_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun fun_app$f (A_llist_a_llist_llist_fun$ A_llist$ )A_llist_llist$ )
(declare-fun fun_app$g (A_a_fun$ A$ )A$ )
(declare-fun fun_app$h (A_llist_llist_llist_a_llist_llist_llist_fun_a_llist_llist_llist_a_llist_llist_llist_fun_fun$ A_llist_llist_llist_a_llist_llist_llist_fun$ )A_llist_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun fun_app$i (Nat_a_llist_llist_llist_a_llist_llist_llist_fun_a_llist_llist_llist_a_llist_llist_llist_fun_fun_fun$ Nat$ )A_llist_llist_llist_a_llist_llist_llist_fun_a_llist_llist_llist_a_llist_llist_llist_fun_fun$ )
(declare-fun fun_app$j (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$k (Nat_a_a_fun_a_a_fun_fun_fun$ Nat$ )A_a_fun_a_a_fun_fun$ )
(declare-fun fun_app$l (A_llist_llist_a_llist_llist_fun_a_llist_llist_a_llist_llist_fun_fun$ A_llist_llist_a_llist_llist_fun$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun fun_app$m (Nat_a_llist_llist_a_llist_llist_fun_a_llist_llist_a_llist_llist_fun_fun_fun$ Nat$ )A_llist_llist_a_llist_llist_fun_a_llist_llist_a_llist_llist_fun_fun$ )
(declare-fun fun_app$n (A_llist_llist_a_llist_fun$ A_llist_llist$ )A_llist$ )
(declare-fun iterates$ (A_a_fun$ )A_a_llist_fun$ )
(declare-fun llength$a (A_llist_llist$ )Enat$ )
(declare-fun llength$b (A_llist$ )Enat$ )
(declare-fun iterates$a (A_llist_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist_llist$ )
(declare-fun iterates$b (A_llist_a_llist_fun$ )A_llist_a_llist_llist_fun$ )
(assert (! (not (= (fun_app$ (fun_app$a (fun_app$b compow$ n$ )(lmap$ f$ ))(h$ x$ ))(fun_app$ (fun_app$a (fun_app$b compow$ n$ )(lmap$ f$ ))(fun_app$c (iterates$ f$ )x$ )))):named a0 ))
(assert (! (= n$ zero$ ):named a1 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_fun$ )(?v1 A_llist_llist$ ))(= (fun_app$d (lmap$a ?v0 )(iterates$a ?v0 ?v1 ))(iterates$a ?v0 (fun_app$e ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist$ ))(= (fun_app$e (lmap$b ?v0 )(fun_app$f (iterates$b ?v0 )?v1 ))(fun_app$f (iterates$b ?v0 )(fun_app$ ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$ (lmap$ ?v0 )(fun_app$c (iterates$ ?v0 )?v1 ))(fun_app$c (iterates$ ?v0 )(fun_app$g ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ ))(= (h$ ?v0 )(lCons$ ?v0 (fun_app$ (lmap$ f$ )(h$ ?v0 ))))):named a5 ))
(assert (! (forall ((?v0 A$ ))(= (ltl$ (h$ ?v0 ))(fun_app$ (lmap$ f$ )(h$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A$ ))(not (lnull$ (h$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_llist_llist_a_llist_llist_llist_fun$ )(?v1 Nat$ )(?v2 A_llist_llist_llist$ ))(= (fun_app$d ?v0 (fun_app$d (fun_app$h (fun_app$i compow$a ?v1 )?v0 )?v2 ))(fun_app$d (fun_app$h (fun_app$i compow$a ?v1 )?v0 )(fun_app$d ?v0 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 Nat$ )(?v2 A$ ))(= (fun_app$g ?v0 (fun_app$g (fun_app$j (fun_app$k compow$b ?v1 )?v0 )?v2 ))(fun_app$g (fun_app$j (fun_app$k compow$b ?v1 )?v0 )(fun_app$g ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_fun$ )(?v1 Nat$ )(?v2 A_llist_llist$ ))(= (fun_app$e ?v0 (fun_app$e (fun_app$l (fun_app$m compow$c ?v1 )?v0 )?v2 ))(fun_app$e (fun_app$l (fun_app$m compow$c ?v1 )?v0 )(fun_app$e ?v0 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 Nat$ )(?v2 A_llist$ ))(= (fun_app$ ?v0 (fun_app$ (fun_app$a (fun_app$b compow$ ?v1 )?v0 )?v2 ))(fun_app$ (fun_app$a (fun_app$b compow$ ?v1 )?v0 )(fun_app$ ?v0 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_llist_a_llist_llist_fun$ )(?v2 A_llist_llist_llist$ ))(= (lnull$a (fun_app$d (fun_app$h (fun_app$i compow$a ?v0 )(lmap$a ?v1 ))?v2 ))(lnull$a ?v2 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_llist$ ))(= (lnull$b (fun_app$e (fun_app$l (fun_app$m compow$c ?v0 )(lmap$b ?v1 ))?v2 ))(lnull$b ?v2 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (lnull$ (fun_app$ (fun_app$a (fun_app$b compow$ ?v0 )(lmap$ ?v1 ))?v2 ))(lnull$ ?v2 ))):named a14 ))
(assert (! (forall ((?v0 A$ ))(= (lhd$ (h$ ?v0 ))?v0 )):named a15 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_fun$ )(?v1 A_llist_llist$ ))(! (= (iterates$a ?v0 ?v1 )(lCons$b ?v1 (fun_app$d (lmap$a ?v0 )(iterates$a ?v0 ?v1 )))):pattern ((iterates$a ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist$ ))(! (= (fun_app$f (iterates$b ?v0 )?v1 )(lCons$a ?v1 (fun_app$e (lmap$b ?v0 )(fun_app$f (iterates$b ?v0 )?v1 )))):pattern ((fun_app$f (iterates$b ?v0 )?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(! (= (fun_app$c (iterates$ ?v0 )?v1 )(lCons$ ?v1 (fun_app$ (lmap$ ?v0 )(fun_app$c (iterates$ ?v0 )?v1 )))):pattern ((fun_app$c (iterates$ ?v0 )?v1 )))):named a18 ))
(assert (! (= funpow$ compow$a ):named a19 ))
(assert (! (= funpow$a compow$b ):named a20 ))
(assert (! (= funpow$b compow$c ):named a21 ))
(assert (! (= funpow$c compow$ ):named a22 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 Nat$ )(?v2 A_llist_llist_llist_a_llist_llist_llist_fun$ ))(=> (not (lnull$c ?v0 ))(= (lhd$c (compow$d ?v1 (lmap$c ?v2 )?v0 ))(fun_app$d (fun_app$h (fun_app$i compow$a ?v1 )?v2 )(lhd$c ?v0 ))))):named a23 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 Nat$ )(?v2 A_llist_llist_a_llist_llist_fun$ ))(=> (not (lnull$a ?v0 ))(= (lhd$b (fun_app$d (fun_app$h (fun_app$i compow$a ?v1 )(lmap$a ?v2 ))?v0 ))(fun_app$e (fun_app$l (fun_app$m compow$c ?v1 )?v2 )(lhd$b ?v0 ))))):named a24 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 Nat$ )(?v2 A_llist_a_llist_fun$ ))(=> (not (lnull$b ?v0 ))(= (lhd$a (fun_app$e (fun_app$l (fun_app$m compow$c ?v1 )(lmap$b ?v2 ))?v0 ))(fun_app$ (fun_app$a (fun_app$b compow$ ?v1 )?v2 )(lhd$a ?v0 ))))):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ )(?v2 A_a_fun$ ))(=> (not (lnull$ ?v0 ))(= (lhd$ (fun_app$ (fun_app$a (fun_app$b compow$ ?v1 )(lmap$ ?v2 ))?v0 ))(fun_app$g (fun_app$j (fun_app$k compow$b ?v1 )?v2 )(lhd$ ?v0 ))))):named a26 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_llist_a_llist_llist_fun$ )(?v2 A_llist_llist_llist$ ))(= (fun_app$d (ldrop$ ?v0 )(fun_app$d (lmap$a ?v1 )?v2 ))(fun_app$d (lmap$a ?v1 )(fun_app$d (ldrop$ ?v0 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_llist_fun$ )(?v2 A_llist$ ))(= (fun_app$e (ldrop$a ?v0 )(fun_app$f (lmap$d ?v1 )?v2 ))(fun_app$f (lmap$d ?v1 )(fun_app$ (ldrop$b ?v0 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_a_fun$ )(?v2 A_llist_llist$ ))(= (fun_app$ (ldrop$b ?v0 )(fun_app$n (lmap$e ?v1 )?v2 ))(fun_app$n (lmap$e ?v1 )(fun_app$e (ldrop$a ?v0 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_llist$ ))(= (fun_app$e (ldrop$a ?v0 )(fun_app$e (lmap$b ?v1 )?v2 ))(fun_app$e (lmap$b ?v1 )(fun_app$e (ldrop$a ?v0 )?v2 )))):named a30 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ldrop$b ?v0 )(fun_app$ (lmap$ ?v1 )?v2 ))(fun_app$ (lmap$ ?v1 )(fun_app$ (ldrop$b ?v0 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_llist_a_llist_llist_fun$ )(?v2 A_llist_llist_llist$ ))(= (fun_app$d (ldropn$ ?v0 )(fun_app$d (lmap$a ?v1 )?v2 ))(fun_app$d (lmap$a ?v1 )(fun_app$d (ldropn$ ?v0 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_llist_fun$ )(?v2 A_llist$ ))(= (fun_app$e (ldropn$a ?v0 )(fun_app$f (lmap$d ?v1 )?v2 ))(fun_app$f (lmap$d ?v1 )(fun_app$ (ldropn$b ?v0 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_a_fun$ )(?v2 A_llist_llist$ ))(= (fun_app$ (ldropn$b ?v0 )(fun_app$n (lmap$e ?v1 )?v2 ))(fun_app$n (lmap$e ?v1 )(fun_app$e (ldropn$a ?v0 )?v2 )))):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_llist$ ))(= (fun_app$e (ldropn$a ?v0 )(fun_app$e (lmap$b ?v1 )?v2 ))(fun_app$e (lmap$b ?v1 )(fun_app$e (ldropn$a ?v0 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ldropn$b ?v0 )(fun_app$ (lmap$ ?v1 )?v2 ))(fun_app$ (lmap$ ?v1 )(fun_app$ (ldropn$b ?v0 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_fun$ )(?v1 A_llist_llist_llist$ ))(= (llength$ (fun_app$d (lmap$a ?v0 )?v1 ))(llength$ ?v1 ))):named a37 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (llength$a (fun_app$f (lmap$d ?v0 )?v1 ))(llength$b ?v1 ))):named a38 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (llength$b (fun_app$n (lmap$e ?v0 )?v1 ))(llength$a ?v1 ))):named a39 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist$ ))(= (llength$a (fun_app$e (lmap$b ?v0 )?v1 ))(llength$a ?v1 ))):named a40 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$b (fun_app$ (lmap$ ?v0 )?v1 ))(llength$b ?v1 ))):named a41 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a42 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a43 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$e (ldropn$a zero$ )?v0 )?v0 ):pattern ((fun_app$e (ldropn$a zero$ )?v0 )))):named a44 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (ldropn$b zero$ )?v0 )?v0 ):pattern ((fun_app$ (ldropn$b zero$ )?v0 )))):named a45 ))
(assert (! (forall ((?v0 A_llist_llist_a_fun$ )(?v1 A_llist_llist_llist$ ))(= (lnull$ (lmap$f ?v0 ?v1 ))(lnull$a ?v1 ))):named a46 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_fun$ )(?v1 A_llist_llist_llist$ ))(= (lnull$b (lmap$g ?v0 ?v1 ))(lnull$a ?v1 ))):named a47 ))
(assert (! (forall ((?v0 A_a_llist_llist_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$h ?v0 ?v1 ))(lnull$ ?v1 ))):named a48 ))
(assert (! (forall ((?v0 A_llist_a_llist_llist_fun$ )(?v1 A_llist_llist$ ))(= (lnull$a (lmap$i ?v0 ?v1 ))(lnull$b ?v1 ))):named a49 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_fun$ )(?v1 A_llist_llist_llist$ ))(= (lnull$a (fun_app$d (lmap$a ?v0 )?v1 ))(lnull$a ?v1 ))):named a50 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (lnull$ (fun_app$n (lmap$e ?v0 )?v1 ))(lnull$b ?v1 ))):named a51 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (lnull$b (fun_app$f (lmap$d ?v0 )?v1 ))(lnull$ ?v1 ))):named a52 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist$ ))(= (lnull$b (fun_app$e (lmap$b ?v0 )?v1 ))(lnull$b ?v1 ))):named a53 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (lmap$ ?v0 )?v1 ))(lnull$ ?v1 ))):named a54 ))
(check-sat )
;(get-unsat-core )
