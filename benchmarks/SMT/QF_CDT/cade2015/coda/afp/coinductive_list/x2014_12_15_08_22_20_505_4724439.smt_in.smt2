;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_a_b_prod_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort A_b_prod_b_fun$ 0 )
(declare-sort B_a_b_prod_fun$ 0 )
(declare-sort B_b_prod_a_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort B_a_prod_b_a_prod_fun$ 0 )
(declare-sort B_b_prod_b_b_prod_fun$ 0 )
(declare-sort A_a_prod_llist_enat_fun$ 0 )
(declare-sort A_b_prod_llist_enat_fun$ 0 )
(declare-sort B_a_prod_llist_enat_fun$ 0 )
(declare-sort B_b_prod_llist_enat_fun$ 0 )
(declare-sort A_a_b_prod_prod_llist_enat_fun$ 0 )
(declare-sort A_b_a_prod_prod_llist_enat_fun$ 0 )
(declare-sort A_b_b_prod_prod_llist_enat_fun$ 0 )
(declare-sort B_a_b_prod_prod_llist_enat_fun$ 0 )
(declare-sort A_a_b_prod_prod_a_a_b_prod_prod_fun$ 0 )
(declare-sort A_b_a_prod_prod_a_b_a_prod_prod_fun$ 0 )
(declare-sort A_b_b_prod_prod_a_b_b_prod_prod_fun$ 0 )
(declare-sort B_a_b_prod_prod_b_a_b_prod_prod_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_b_prod$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-codatatypes ()((A_b_prod_llist$ (lNil$ )(lCons$ (lhd$ A_b_prod$ )(ltl$ A_b_prod_llist$ )))(A_llist$ (lNil$a )(lCons$a (lhd$a A$ )(ltl$a A_llist$ )))(B_llist$ (lNil$b )(lCons$b (lhd$b B$ )(ltl$b B_llist$ )))))
(declare-sort B_b_prod$ 0)
(declare-fun fst$a (B_b_prod$)B$)
(declare-fun snd$a (B_b_prod$)B$)
(declare-fun pair$a (B$ B$ )B_b_prod$)
(declare-codatatypes ()((B_b_prod_llist$ (lNil$c )(lCons$c (lhd$c B_b_prod$ )(ltl$c B_b_prod_llist$ )))))
(declare-sort B_a_prod$ 0)
(declare-fun fst$b (B_a_prod$)B$)
(declare-fun snd$b (B_a_prod$)A$)
(declare-fun pair$b (B$ A$ )B_a_prod$)
(declare-codatatypes ()((B_a_prod_llist$ (lNil$d )(lCons$d (lhd$d B_a_prod$ )(ltl$d B_a_prod_llist$ )))))
(declare-sort A_a_prod$ 0)
(declare-fun fst$c (A_a_prod$)A$)
(declare-fun snd$c (A_a_prod$)A$)
(declare-fun pair$c (A$ A$ )A_a_prod$)
(declare-codatatypes ()((A_a_prod_llist$ (lNil$e )(lCons$e (lhd$e A_a_prod$ )(ltl$e A_a_prod_llist$ )))))
(declare-sort B_a_b_prod_prod$ 0)
(declare-fun fst$d (B_a_b_prod_prod$)B$)
(declare-fun snd$d (B_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$d (B$ A_b_prod$ )B_a_b_prod_prod$)
(declare-codatatypes ()((B_a_b_prod_prod_llist$ (lNil$f )(lCons$f (lhd$f B_a_b_prod_prod$ )(ltl$f B_a_b_prod_prod_llist$ )))))
(declare-sort A_a_b_prod_prod$ 0)
(declare-fun fst$e (A_a_b_prod_prod$)A$)
(declare-fun snd$e (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$e (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-codatatypes ()((A_a_b_prod_prod_llist$ (lNil$g )(lCons$g (lhd$g A_a_b_prod_prod$ )(ltl$g A_a_b_prod_prod_llist$ )))))
(declare-sort A_b_b_prod_prod$ 0)
(declare-fun fst$f (A_b_b_prod_prod$)A$)
(declare-fun snd$f (A_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$f (A$ B_b_prod$ )A_b_b_prod_prod$)
(declare-codatatypes ()((A_b_b_prod_prod_llist$ (lNil$h )(lCons$h (lhd$h A_b_b_prod_prod$ )(ltl$h A_b_b_prod_prod_llist$ )))))
(declare-sort A_b_a_prod_prod$ 0)
(declare-fun fst$g (A_b_a_prod_prod$)A$)
(declare-fun snd$g (A_b_a_prod_prod$)B_a_prod$)
(declare-fun pair$g (A$ B_a_prod$ )A_b_a_prod_prod$)
(declare-codatatypes ()((A_b_a_prod_prod_llist$ (lNil$i )(lCons$i (lhd$i A_b_a_prod_prod$ )(ltl$i A_b_a_prod_prod_llist$ )))))
(declare-sort A_b_prod_a_prod$ 0)
(declare-fun fst$h (A_b_prod_a_prod$)A_b_prod$)
(declare-fun snd$h (A_b_prod_a_prod$)A$)
(declare-fun pair$h (A_b_prod$ A$ )A_b_prod_a_prod$)
(declare-codatatypes ()((A_b_prod_a_prod_llist$ (lNil$j )(lCons$j (lhd$j A_b_prod_a_prod$ )(ltl$j A_b_prod_a_prod_llist$ )))))
(declare-sort A_b_prod_b_prod$ 0)
(declare-fun fst$i (A_b_prod_b_prod$)A_b_prod$)
(declare-fun snd$i (A_b_prod_b_prod$)B$)
(declare-fun pair$i (A_b_prod$ B$ )A_b_prod_b_prod$)
(declare-codatatypes ()((A_b_prod_b_prod_llist$ (lNil$k )(lCons$k (lhd$k A_b_prod_b_prod$ )(ltl$k A_b_prod_b_prod_llist$ )))))
(declare-sort A_b_prod_a_b_prod_prod$ 0)
(declare-fun fst$j (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun snd$j (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$j (A_b_prod$ A_b_prod$ )A_b_prod_a_b_prod_prod$)
(declare-codatatypes ()((A_b_prod_a_b_prod_prod_llist$ (lNil$l )(lCons$l (lhd$l A_b_prod_a_b_prod_prod$ )(ltl$l A_b_prod_a_b_prod_prod_llist$ )))))
(declare-fun us$ ()A_b_prod_llist$ )
(declare-fun vs$ ()A_b_prod_llist$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lzip$ (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun llcp$a (B_llist$ )B_llist_enat_fun$ )
(declare-fun llcp$b (A_b_prod_llist$ )A_b_prod_llist_enat_fun$ )
(declare-fun llcp$c (B_b_prod_llist$ )B_b_prod_llist_enat_fun$ )
(declare-fun llcp$d (B_a_prod_llist$ )B_a_prod_llist_enat_fun$ )
(declare-fun llcp$e (A_a_prod_llist$ )A_a_prod_llist_enat_fun$ )
(declare-fun llcp$f (B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist_enat_fun$ )
(declare-fun llcp$g (A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist_enat_fun$ )
(declare-fun llcp$h (A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist_enat_fun$ )
(declare-fun llcp$i (A_b_a_prod_prod_llist$ )A_b_a_prod_prod_llist_enat_fun$ )
(declare-fun lmap$a (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$b (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$d (A_a_b_prod_fun$ A_llist$ )A_b_prod_llist$ )
(declare-fun lmap$e (B_a_b_prod_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun lmap$f (A_b_prod_a_fun$ A_b_prod_llist$ )A_llist$ )
(declare-fun lmap$g (A_b_prod_b_fun$ A_b_prod_llist$ )B_llist$ )
(declare-fun lmap$h (A_b_prod_a_b_prod_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun lmap$i (B_b_prod_a_fun$ B_b_prod_llist$ )A_llist$ )
(declare-fun lzip$a (B_llist$ A_llist$ )B_a_prod_llist$ )
(declare-fun lzip$b (B_llist$ B_llist$ )B_b_prod_llist$ )
(declare-fun lzip$c (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun lzip$d (A_b_prod_llist$ A_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun lzip$e (A_b_prod_llist$ B_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun lzip$f (A_llist$ A_b_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun lzip$g (B_llist$ A_b_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun lzip$h (A_b_prod_llist$ A_b_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun lzip$i (A_llist$ B_b_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun lappend$ (A_b_prod_llist$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun less_eq$ (Enat$ )Enat_bool_fun$ )
(declare-fun lfinite$ (A_b_prod_llist$ )Bool )
(declare-fun llength$ (A_b_prod_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun fun_app$b (A_b_prod_llist_enat_fun$ A_b_prod_llist$ )Enat$ )
(declare-fun fun_app$c (B_b_prod_llist_enat_fun$ B_b_prod_llist$ )Enat$ )
(declare-fun fun_app$d (B_a_prod_llist_enat_fun$ B_a_prod_llist$ )Enat$ )
(declare-fun fun_app$e (A_a_prod_llist_enat_fun$ A_a_prod_llist$ )Enat$ )
(declare-fun fun_app$f (B_a_b_prod_prod_llist_enat_fun$ B_a_b_prod_prod_llist$ )Enat$ )
(declare-fun fun_app$g (A_a_b_prod_prod_llist_enat_fun$ A_a_b_prod_prod_llist$ )Enat$ )
(declare-fun fun_app$h (A_b_b_prod_prod_llist_enat_fun$ A_b_b_prod_prod_llist$ )Enat$ )
(declare-fun fun_app$i (A_b_a_prod_prod_llist_enat_fun$ A_b_a_prod_prod_llist$ )Enat$ )
(declare-fun fun_app$j (Enat_bool_fun$ Enat$ )Bool )
(declare-fun infinity$ ()Enat$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun lfinite$b (B_llist$ )Bool )
(declare-fun lfinite$c (B_b_prod_llist$ )Bool )
(declare-fun lfinite$d (B_a_prod_llist$ )Bool )
(declare-fun lfinite$e (A_a_prod_llist$ )Bool )
(declare-fun lfinite$f (B_a_b_prod_prod_llist$ )Bool )
(declare-fun lfinite$g (A_a_b_prod_prod_llist$ )Bool )
(declare-fun lfinite$h (A_b_b_prod_prod_llist$ )Bool )
(declare-fun lfinite$i (A_b_a_prod_prod_llist$ )Bool )
(declare-fun llength$a (A_llist$ )Enat$ )
(declare-fun llength$b (B_llist$ )Enat$ )
(declare-fun llength$c (B_b_prod_llist$ )Enat$ )
(declare-fun llength$d (B_a_prod_llist$ )Enat$ )
(declare-fun llength$e (A_a_prod_llist$ )Enat$ )
(declare-fun llength$f (B_a_b_prod_prod_llist$ )Enat$ )
(declare-fun llength$g (A_a_b_prod_prod_llist$ )Enat$ )
(declare-fun llength$h (A_b_b_prod_prod_llist$ )Enat$ )
(declare-fun llength$i (A_b_a_prod_prod_llist$ )Enat$ )
(declare-fun llength$j (A_b_prod_a_prod_llist$ )Enat$ )
(declare-fun llength$k (A_b_prod_b_prod_llist$ )Enat$ )
(declare-fun llength$l (A_b_prod_a_b_prod_prod_llist$ )Enat$ )
(declare-fun lprefix$a (B_llist$ B_llist$ )Bool )
(declare-fun lprefix$b (A_b_prod_llist$ A_b_prod_llist$ )Bool )
(declare-fun lprefix$c (B_b_prod_llist$ B_b_prod_llist$ )Bool )
(declare-fun lprefix$d (B_a_prod_llist$ B_a_prod_llist$ )Bool )
(declare-fun lprefix$e (A_a_prod_llist$ A_a_prod_llist$ )Bool )
(declare-fun lprefix$f (B_a_b_prod_prod_llist$ B_a_b_prod_prod_llist$ )Bool )
(declare-fun lprefix$g (A_a_b_prod_prod_llist$ A_a_b_prod_prod_llist$ )Bool )
(declare-fun lprefix$h (A_b_b_prod_prod_llist$ A_b_b_prod_prod_llist$ )Bool )
(declare-fun lprefix$i (A_b_a_prod_prod_llist$ A_b_a_prod_prod_llist$ )Bool )
(declare-fun iterates$a (B_b_fun$ B$ )B_llist$ )
(declare-fun iterates$b (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod_llist$ )
(declare-fun iterates$c (B_b_prod_b_b_prod_fun$ B_b_prod$ )B_b_prod_llist$ )
(declare-fun iterates$d (B_a_prod_b_a_prod_fun$ B_a_prod$ )B_a_prod_llist$ )
(declare-fun iterates$e (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod_llist$ )
(declare-fun iterates$f (B_a_b_prod_prod_b_a_b_prod_prod_fun$ B_a_b_prod_prod$ )B_a_b_prod_prod_llist$ )
(declare-fun iterates$g (A_a_b_prod_prod_a_a_b_prod_prod_fun$ A_a_b_prod_prod$ )A_a_b_prod_prod_llist$ )
(declare-fun iterates$h (A_b_b_prod_prod_a_b_b_prod_prod_fun$ A_b_b_prod_prod$ )A_b_b_prod_prod_llist$ )
(declare-fun iterates$i (A_b_a_prod_prod_a_b_a_prod_prod_fun$ A_b_a_prod_prod$ )A_b_a_prod_prod_llist$ )
(assert (! (not (= (llength$ us$ )infinity$ )):named a0 ))
(assert (! (not (lfinite$ us$ )):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(= (= (llength$a ?v0 )infinity$ )(not (lfinite$a ?v0 )))):named a2 ))
(assert (! (forall ((?v0 B_llist$ ))(= (= (llength$b ?v0 )infinity$ )(not (lfinite$b ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(= (= (llength$ ?v0 )infinity$ )(not (lfinite$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 B_b_prod_llist$ ))(= (= (llength$c ?v0 )infinity$ )(not (lfinite$c ?v0 )))):named a5 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(= (= (llength$d ?v0 )infinity$ )(not (lfinite$d ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(= (= (llength$e ?v0 )infinity$ )(not (lfinite$e ?v0 )))):named a7 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$ ))(= (= (llength$f ?v0 )infinity$ )(not (lfinite$f ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ ))(= (= (llength$g ?v0 )infinity$ )(not (lfinite$g ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$ ))(= (= (llength$h ?v0 )infinity$ )(not (lfinite$h ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ ))(= (= (llength$i ?v0 )infinity$ )(not (lfinite$i ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (not (lfinite$a ?v0 ))(= (llength$a ?v0 )infinity$ )):pattern ((llength$a ?v0 )))):named a12 ))
(assert (! (forall ((?v0 B_llist$ ))(! (=> (not (lfinite$b ?v0 ))(= (llength$b ?v0 )infinity$ )):pattern ((llength$b ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (llength$ ?v0 )infinity$ )):pattern ((llength$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 B_b_prod_llist$ ))(! (=> (not (lfinite$c ?v0 ))(= (llength$c ?v0 )infinity$ )):pattern ((llength$c ?v0 )))):named a15 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(! (=> (not (lfinite$d ?v0 ))(= (llength$d ?v0 )infinity$ )):pattern ((llength$d ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (=> (not (lfinite$e ?v0 ))(= (llength$e ?v0 )infinity$ )):pattern ((llength$e ?v0 )))):named a17 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$ ))(! (=> (not (lfinite$f ?v0 ))(= (llength$f ?v0 )infinity$ )):pattern ((llength$f ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ ))(! (=> (not (lfinite$g ?v0 ))(= (llength$g ?v0 )infinity$ )):pattern ((llength$g ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$ ))(! (=> (not (lfinite$h ?v0 ))(= (llength$h ?v0 )infinity$ )):pattern ((llength$h ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ ))(! (=> (not (lfinite$i ?v0 ))(= (llength$i ?v0 )infinity$ )):pattern ((llength$i ?v0 )))):named a21 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (llength$a (iterates$ ?v0 ?v1 ))infinity$ )):named a22 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (llength$b (iterates$a ?v0 ?v1 ))infinity$ )):named a23 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod$ ))(= (llength$ (iterates$b ?v0 ?v1 ))infinity$ )):named a24 ))
(assert (! (forall ((?v0 B_b_prod_b_b_prod_fun$ )(?v1 B_b_prod$ ))(= (llength$c (iterates$c ?v0 ?v1 ))infinity$ )):named a25 ))
(assert (! (forall ((?v0 B_a_prod_b_a_prod_fun$ )(?v1 B_a_prod$ ))(= (llength$d (iterates$d ?v0 ?v1 ))infinity$ )):named a26 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod$ ))(= (llength$e (iterates$e ?v0 ?v1 ))infinity$ )):named a27 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_b_a_b_prod_prod_fun$ )(?v1 B_a_b_prod_prod$ ))(= (llength$f (iterates$f ?v0 ?v1 ))infinity$ )):named a28 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_a_a_b_prod_prod_fun$ )(?v1 A_a_b_prod_prod$ ))(= (llength$g (iterates$g ?v0 ?v1 ))infinity$ )):named a29 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_a_b_b_prod_prod_fun$ )(?v1 A_b_b_prod_prod$ ))(= (llength$h (iterates$h ?v0 ?v1 ))infinity$ )):named a30 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_a_b_a_prod_prod_fun$ )(?v1 A_b_a_prod_prod$ ))(= (llength$i (iterates$i ?v0 ?v1 ))infinity$ )):named a31 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (llcp$ ?v0 )?v0 )(llength$a ?v0 )):pattern ((llcp$ ?v0 )))):named a32 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$a (llcp$a ?v0 )?v0 )(llength$b ?v0 )):pattern ((llcp$a ?v0 )))):named a33 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$b (llcp$b ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$b ?v0 )))):named a34 ))
(assert (! (forall ((?v0 B_b_prod_llist$ ))(! (= (fun_app$c (llcp$c ?v0 )?v0 )(llength$c ?v0 )):pattern ((llcp$c ?v0 )))):named a35 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(! (= (fun_app$d (llcp$d ?v0 )?v0 )(llength$d ?v0 )):pattern ((llcp$d ?v0 )))):named a36 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (= (fun_app$e (llcp$e ?v0 )?v0 )(llength$e ?v0 )):pattern ((llcp$e ?v0 )))):named a37 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$ ))(! (= (fun_app$f (llcp$f ?v0 )?v0 )(llength$f ?v0 )):pattern ((llcp$f ?v0 )))):named a38 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ ))(! (= (fun_app$g (llcp$g ?v0 )?v0 )(llength$g ?v0 )):pattern ((llcp$g ?v0 )))):named a39 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$ ))(! (= (fun_app$h (llcp$h ?v0 )?v0 )(llength$h ?v0 )):pattern ((llcp$h ?v0 )))):named a40 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ ))(! (= (fun_app$i (llcp$i ?v0 )?v0 )(llength$i ?v0 )):pattern ((llcp$i ?v0 )))):named a41 ))
(assert (! (= (lappend$ us$ vs$ )us$ ):named a42 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$a (lmap$ ?v0 ?v1 ))(llength$a ?v1 ))):named a43 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (llength$a (lmap$a ?v0 ?v1 ))(llength$b ?v1 ))):named a44 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (llength$b (lmap$b ?v0 ?v1 ))(llength$a ?v1 ))):named a45 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (llength$b (lmap$c ?v0 ?v1 ))(llength$b ?v1 ))):named a46 ))
(assert (! (forall ((?v0 A_a_b_prod_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$d ?v0 ?v1 ))(llength$a ?v1 ))):named a47 ))
(assert (! (forall ((?v0 B_a_b_prod_fun$ )(?v1 B_llist$ ))(= (llength$ (lmap$e ?v0 ?v1 ))(llength$b ?v1 ))):named a48 ))
(assert (! (forall ((?v0 A_b_prod_a_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$a (lmap$f ?v0 ?v1 ))(llength$ ?v1 ))):named a49 ))
(assert (! (forall ((?v0 A_b_prod_b_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$b (lmap$g ?v0 ?v1 ))(llength$ ?v1 ))):named a50 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_fun$ )(?v1 A_b_prod_llist$ ))(= (llength$ (lmap$h ?v0 ?v1 ))(llength$ ?v1 ))):named a51 ))
(assert (! (forall ((?v0 B_b_prod_a_fun$ )(?v1 B_b_prod_llist$ ))(= (llength$a (lmap$i ?v0 ?v1 ))(llength$c ?v1 ))):named a52 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (llength$e (lzip$ ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$a ?v1 )))):named a53 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(= (llength$d (lzip$a ?v0 ?v1 ))(min$ (llength$b ?v0 )(llength$a ?v1 )))):named a54 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (llength$c (lzip$b ?v0 ?v1 ))(min$ (llength$b ?v0 )(llength$b ?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(= (llength$ (lzip$c ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$b ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_llist$ ))(= (llength$j (lzip$d ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$a ?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 B_llist$ ))(= (llength$k (lzip$e ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$b ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ ))(= (llength$g (lzip$f ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$ ?v1 )))):named a59 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_b_prod_llist$ ))(= (llength$f (lzip$g ?v0 ?v1 ))(min$ (llength$b ?v0 )(llength$ ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(= (llength$l (lzip$h ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$ ?v1 )))):named a61 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_b_prod_llist$ ))(= (llength$h (lzip$i ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$c ?v1 )))):named a62 ))
(assert (! (fun_app$j (less_eq$ (llength$ us$ ))(llength$a xs$ )):named a63 ))
(assert (! (fun_app$j (less_eq$ (llength$ us$ ))(llength$b ys$ )):named a64 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(= (llength$a ?v0 )(llength$a ?v1 )))(= ?v0 ?v1 ))):named a65 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(= (llength$b ?v0 )(llength$b ?v1 )))(= ?v0 ?v1 ))):named a66 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(=> (and (lprefix$b ?v0 ?v1 )(= (llength$ ?v0 )(llength$ ?v1 )))(= ?v0 ?v1 ))):named a67 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 B_b_prod_llist$ ))(=> (and (lprefix$c ?v0 ?v1 )(= (llength$c ?v0 )(llength$c ?v1 )))(= ?v0 ?v1 ))):named a68 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ ))(=> (and (lprefix$d ?v0 ?v1 )(= (llength$d ?v0 )(llength$d ?v1 )))(= ?v0 ?v1 ))):named a69 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(=> (and (lprefix$e ?v0 ?v1 )(= (llength$e ?v0 )(llength$e ?v1 )))(= ?v0 ?v1 ))):named a70 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$ )(?v1 B_a_b_prod_prod_llist$ ))(=> (and (lprefix$f ?v0 ?v1 )(= (llength$f ?v0 )(llength$f ?v1 )))(= ?v0 ?v1 ))):named a71 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 A_a_b_prod_prod_llist$ ))(=> (and (lprefix$g ?v0 ?v1 )(= (llength$g ?v0 )(llength$g ?v1 )))(= ?v0 ?v1 ))):named a72 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$ )(?v1 A_b_b_prod_prod_llist$ ))(=> (and (lprefix$h ?v0 ?v1 )(= (llength$h ?v0 )(llength$h ?v1 )))(= ?v0 ?v1 ))):named a73 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ )(?v1 A_b_a_prod_prod_llist$ ))(=> (and (lprefix$i ?v0 ?v1 )(= (llength$i ?v0 )(llength$i ?v1 )))(= ?v0 ?v1 ))):named a74 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(lprefix$e ?v0 ?v0 )):named a75 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ ))(lprefix$g ?v0 ?v0 )):named a76 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(lprefix$d ?v0 ?v0 )):named a77 ))
(assert (! (forall ((?v0 B_b_prod_llist$ ))(lprefix$c ?v0 ?v0 )):named a78 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$ ))(lprefix$f ?v0 ?v0 )):named a79 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a80 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a81 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(lprefix$b ?v0 ?v0 )):named a82 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(lprefix$e ?v0 ?v0 )):named a83 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ ))(lprefix$g ?v0 ?v0 )):named a84 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(lprefix$d ?v0 ?v0 )):named a85 ))
(assert (! (forall ((?v0 B_b_prod_llist$ ))(lprefix$c ?v0 ?v0 )):named a86 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$ ))(lprefix$f ?v0 ?v0 )):named a87 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a88 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a89 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(lprefix$b ?v0 ?v0 )):named a90 ))
(assert (! (= (lzip$c xs$ ys$ )(lappend$ us$ vs$ )):named a91 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$j (less_eq$ ?v0 )infinity$ )true ):pattern ((less_eq$ ?v0 )))):named a92 ))
(check-sat )
;(get-unsat-core )
