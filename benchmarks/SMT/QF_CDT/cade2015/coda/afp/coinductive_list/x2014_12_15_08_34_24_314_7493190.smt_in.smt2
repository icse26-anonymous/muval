;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort Nat_set$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort A_list$ 0)
(declare-sort Nat_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun nil$a ()Nat_list$)
(declare-fun hd$a (Nat_list$)Nat$)
(declare-fun tl$a (Nat_list$)Nat_list$)
(declare-fun cons$a (Nat$ Nat_list$ )Nat_list$)
(declare-fun a$ ()Nat_set$ )
(declare-fun xs$ ()A_list$ )
(declare-fun bot$ ()Nat_set$ )
(declare-fun set$ (Nat_list$ )Nat_set$ )
(declare-fun bot$a ()A_set$ )
(declare-fun last$ (A_list$ )A$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun set$a (A_list$ )A_set$ )
(declare-fun llast$ (A_llist$ )A$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun less_eq$ (A_set$ A_set$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun sublist$ (A_list$ Nat_set$ )A_list$ )
(declare-fun distinct$ (A_list$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun sublist$a (Nat_list$ Nat_set$ )Nat_list$ )
(assert (! (not (= (lsublist$ (llist_of$ xs$ )a$ )(llist_of$ (sublist$ xs$ a$ )))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a2 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$ lNil$ ?v0 )lNil$ ):pattern ((lsublist$ lNil$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a4 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (sublist$a nil$a ?v0 )nil$a ):pattern ((sublist$a nil$a ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (sublist$ nil$ ?v0 )nil$ ):pattern ((sublist$ nil$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_list$ ))(= (llast$ (llist_of$ ?v0 ))(last$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lsublist$ ?v0 bot$ )lNil$ )):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_list$ )(?v2 Nat_set$ ))(=> (member$ ?v0 (set$ (sublist$a ?v1 ?v2 )))(member$ ?v0 (set$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 Nat_set$ ))(=> (member$a ?v0 (set$a (sublist$ ?v1 ?v2 )))(member$a ?v0 (set$a ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_list$ )(?v2 Nat_set$ ))(=> (not (member$ ?v0 (set$ ?v1 )))(not (member$ ?v0 (set$ (sublist$a ?v1 ?v2 )))))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 Nat_set$ ))(=> (not (member$a ?v0 (set$a ?v1 )))(not (member$a ?v0 (set$a (sublist$ ?v1 ?v2 )))))):named a12 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat_set$ ))(=> (distinct$ ?v0 )(distinct$ (sublist$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(= (llist_of$ (list_of$ ?v0 ))?v0 ))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat_set$ ))(less_eq$ (lset$ (lsublist$ ?v0 ?v1 ))(lset$ ?v0 ))):named a15 ))
(assert (! (= (lfinite$ lNil$ )true ):named a16 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (set$a ?v0 )bot$a )(= ?v0 nil$ ))):named a17 ))
(assert (! (forall ((?v0 Nat_list$ ))(= (= (set$ ?v0 )bot$ )(= ?v0 nil$a ))):named a18 ))
(assert (! (forall ((?v0 A_list$ ))(= (= bot$a (set$a ?v0 ))(= ?v0 nil$ ))):named a19 ))
(assert (! (forall ((?v0 Nat_list$ ))(= (= bot$ (set$ ?v0 ))(= ?v0 nil$a ))):named a20 ))
(check-sat )
;(get-unsat-core )
