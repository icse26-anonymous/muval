;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort Enat_enat_prod_set$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-sort Enat_enat_prod_bool_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort Enat_enat_prod$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun fst$ (Enat_enat_prod$)Enat$)
(declare-fun snd$ (Enat_enat_prod$)Enat$)
(declare-fun pair$ (Enat$ Enat$ )Enat_enat_prod$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun m$ ()Enat$ )
(declare-fun n$ ()Enat$ )
(declare-fun ma$ ()Enat$ )
(declare-fun na$ ()Enat$ )
(declare-fun uu$ ()Enat_enat_prod_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ysa$ ()A_llist$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun zero$ ()Enat$ )
(declare-fun zero$a ()Nat$ )
(declare-fun member$ (Enat_enat_prod$ Enat_enat_prod_set$ )Bool )
(declare-fun collect$ (Enat_enat_prod_bool_fun$ )Enat_enat_prod_set$ )
(declare-fun fun_app$ (Enat_enat_prod_bool_fun$ Enat_enat_prod$ )Bool )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$b (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$c (Enat_enat_bool_fun_fun$ Enat$ )Enat_bool_fun$ )
(assert (! (forall ((?v0 Enat_enat_prod$ ))(! (= (fun_app$ uu$ ?v0 )(exists ((?v1 A_llist$ )(?v2 A_llist$ ))(and (= ?v0 (pair$ (fun_app$a (llcp$ ?v1 )?v2 )(min$ (llength$ ?v1 )(llength$ ?v2 ))))true ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (or (= ma$ zero$ )(exists ((?v0 Enat$ )(?v1 Enat$ )(?v2 Nat$ ))(and (= ma$ (eSuc$ ?v0 ))(and (= na$ (plus$ ?v1 (enat$ ?v2 )))(and (not (= ?v2 zero$a ))(or (member$ (pair$ ?v0 ?v1 )(collect$ uu$ ))(less_eq$ ?v0 ?v1 )))))))):named a1 ))
(assert (! (= ma$ (fun_app$a (llcp$ xsa$ )ysa$ )):named a2 ))
(assert (! (= na$ (min$ (llength$ xsa$ )(llength$ ysa$ ))):named a3 ))
(assert (! (member$ (pair$ ma$ na$ )(collect$ uu$ )):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a5 ))
(assert (! (=> (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (= ma$ (fun_app$a (llcp$ ?v0 )?v1 ))(= na$ (min$ (llength$ ?v0 )(llength$ ?v1 ))))false ))false ):named a6 ))
(assert (! (= m$ (fun_app$a (llcp$ xs$ )ys$ )):named a7 ))
(assert (! (= n$ (min$ (llength$ xs$ )(llength$ ys$ ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (fun_app$a (llcp$ ?v0 )?v1 )(fun_app$a (llcp$ ?v1 )?v0 ))):named a9 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (less_eq$ ?v3 ?v4 )(fun_app$b (fun_app$c ?v0 ?v3 )?v4 )))(=> (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(fun_app$b (fun_app$c ?v0 ?v2 )?v1 )))(fun_app$b (fun_app$c ?v0 ?v2 )?v1 ))):named a10 ))
(assert (! (member$ (pair$ m$ n$ )(collect$ uu$ )):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat_enat_prod_set$ ))(=> (and (member$ (pair$ ?v0 ?v1 )?v2 )(forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (member$ (pair$ ?v3 ?v4 )?v2 )(or (= ?v3 zero$ )(exists ((?v5 Enat$ )(?v6 Enat$ )(?v7 Nat$ ))(and (= ?v3 (eSuc$ ?v5 ))(and (= ?v4 (plus$ ?v6 (enat$ ?v7 )))(and (not (= ?v7 zero$a ))(or (member$ (pair$ ?v5 ?v6 )?v2 )(less_eq$ ?v5 ?v6 ))))))))))(less_eq$ ?v0 ?v1 ))):named a12 ))
(check-sat )
;(get-unsat-core )
