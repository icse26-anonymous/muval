;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Enat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun m$ ()Nat$ )
(declare-fun n$ ()Enat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun less$a (Nat$ )Nat_bool_fun$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$b (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun fun_app$c (Enat_nat_fun$ Enat$ )Nat$ )
(declare-fun fun_app$d (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun fun_app$e (Nat_nat_fun$ Nat$ )Nat$ )
(assert (! (not (= (lnth$ (ltake$ n$ xs$ )m$ )(lnth$ xs$ m$ ))):named a0 ))
(assert (! (fun_app$ (less$ (enat$ m$ ))n$ ):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )(enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$ (less$ ?v0 )?v1 )(fun_app$ (less$ ?v1 )?v0 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$a (less$a ?v0 )?v1 )(fun_app$a (less$a ?v1 )?v0 )))):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (fun_app$ (less$ ?v0 )?v1 ))(or (fun_app$ (less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (fun_app$a (less$a ?v0 )?v1 ))(or (fun_app$a (less$a ?v1 )?v0 )(= ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (=> (fun_app$ (less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$ (less$ ?v1 )?v0 )false )))false )):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (=> (fun_app$a (less$a ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$a (less$a ?v1 )?v0 )false )))false )):named a10 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(=> (fun_app$a (less$a ?v3 )?v2 )(fun_app$a ?v0 ?v3 )))(fun_app$a ?v0 ?v2 )))(fun_app$a ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat_enat_fun$ )(?v2 Enat$ )(?v3 Enat$ ))(=> (and (= ?v0 (fun_app$b ?v1 ?v2 ))(and (fun_app$ (less$ ?v2 )?v3 )(forall ((?v4 Enat$ )(?v5 Enat$ ))(=> (fun_app$ (less$ ?v4 )?v5 )(fun_app$ (less$ (fun_app$b ?v1 ?v4 ))(fun_app$b ?v1 ?v5 ))))))(fun_app$ (less$ ?v0 )(fun_app$b ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat_nat_fun$ )(?v2 Enat$ )(?v3 Enat$ ))(=> (and (= ?v0 (fun_app$c ?v1 ?v2 ))(and (fun_app$ (less$ ?v2 )?v3 )(forall ((?v4 Enat$ )(?v5 Enat$ ))(=> (fun_app$ (less$ ?v4 )?v5 )(fun_app$a (less$a (fun_app$c ?v1 ?v4 ))(fun_app$c ?v1 ?v5 ))))))(fun_app$a (less$a ?v0 )(fun_app$c ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat_enat_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (= ?v0 (fun_app$d ?v1 ?v2 ))(and (fun_app$a (less$a ?v2 )?v3 )(forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (fun_app$a (less$a ?v4 )?v5 )(fun_app$ (less$ (fun_app$d ?v1 ?v4 ))(fun_app$d ?v1 ?v5 ))))))(fun_app$ (less$ ?v0 )(fun_app$d ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (= ?v0 (fun_app$e ?v1 ?v2 ))(and (fun_app$a (less$a ?v2 )?v3 )(forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (fun_app$a (less$a ?v4 )?v5 )(fun_app$a (less$a (fun_app$e ?v1 ?v4 ))(fun_app$e ?v1 ?v5 ))))))(fun_app$a (less$a ?v0 )(fun_app$e ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (= ?v0 ?v1 )(fun_app$ (less$ ?v1 )?v2 ))(fun_app$ (less$ ?v0 )?v2 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (= ?v0 ?v1 )(fun_app$a (less$a ?v1 )?v2 ))(fun_app$a (less$a ?v0 )?v2 ))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(=> (and (fun_app$ (less$ ?v0 )?v1 )(=> (not false )(fun_app$ (less$ ?v1 )?v0 )))false )):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$a (less$a ?v0 )?v1 )(=> (not false )(fun_app$a (less$a ?v1 )?v0 )))false )):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (less$ (enat$ ?v0 ))(enat$ ?v1 ))(fun_app$a (less$a ?v0 )?v1 )):pattern ((fun_app$ (less$ (enat$ ?v0 ))(enat$ ?v1 ))))):named a21 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (and (fun_app$ (less$ ?v0 )(enat$ ?v1 ))(forall ((?v2 Nat$ ))(=> (and (= ?v0 (enat$ ?v2 ))(fun_app$a (less$a ?v2 )?v1 ))false )))false )):named a22 ))
(assert (! (forall ((?v0 Enat$ ))(not (fun_app$ (less$ ?v0 )?v0 ))):named a23 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$a (less$a ?v0 )?v0 ))):named a24 ))
(assert (! (forall ((?v0 Enat$ ))(not (fun_app$ (less$ ?v0 )?v0 ))):named a25 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$a (less$a ?v0 )?v0 ))):named a26 ))
(check-sat )
;(get-unsat-core )
