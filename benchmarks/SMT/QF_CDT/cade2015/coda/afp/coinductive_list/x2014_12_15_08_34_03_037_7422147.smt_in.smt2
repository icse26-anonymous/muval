;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_set_a_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_a_llist_fun_bool_fun$ 0 )
(declare-sort A_llist_llist_a_llist_fun_set_a_llist_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_llist_a_llist_fun_a_llist_llist_a_llist_fun_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-fun uu$ ()A_llist_llist_a_llist_fun_bool_fun$ )
(declare-fun bot$ ()A_set$ )
(declare-fun inf$ (A_set$ A_set$ )A_set$ )
(declare-fun bot$a ()A_llist_set$ )
(declare-fun inf$a (A_llist_set$ A_llist_set$ )A_llist_set$ )
(declare-fun lSup$ ()A_llist_set_a_llist_fun$ )
(declare-fun lset$ (A_llist_llist$ )A_llist_set$ )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_llist_a_llist_fun_bool_fun$ A_llist_llist_a_llist_fun$ )Bool )
(declare-fun fun_lub$ (A_llist_set_a_llist_fun$ )A_llist_llist_a_llist_fun_set_a_llist_llist_a_llist_fun_fun$ )
(declare-fun fun_ord$ (A_llist_a_llist_bool_fun_fun$ )A_llist_llist_a_llist_fun_a_llist_llist_a_llist_fun_bool_fun_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_llist_llist_a_llist_fun$ A_llist_llist$ )A_llist$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$d (A_llist_llist_a_llist_fun_a_llist_llist_a_llist_fun_bool_fun_fun$ A_llist_llist_a_llist_fun$ )A_llist_llist_a_llist_fun_bool_fun$ )
(declare-fun lprefix$a (A_llist_llist$ A_llist_llist$ )Bool )
(declare-fun ldistinct$ (A_llist_llist$ )Bool )
(declare-fun admissible$ (A_llist_llist_a_llist_fun_set_a_llist_llist_a_llist_fun_fun$ A_llist_llist_a_llist_fun_a_llist_llist_a_llist_fun_bool_fun_fun$ A_llist_llist_a_llist_fun_bool_fun$ )Bool )
(declare-fun ldistinct$a (A_llist$ )Bool )
(assert (! (forall ((?v0 A_llist_llist_a_llist_fun$ ))(! (= (fun_app$ uu$ ?v0 )(forall ((?v1 A_llist_llist$ ))(=> (and (ldistinct$ ?v1 )(and (forall ((?v2 A_llist$ ))(=> (member$ ?v2 (lset$ ?v1 ))(ldistinct$a ?v2 )))(forall ((?v2 A_llist$ ))(=> (member$ ?v2 (lset$ ?v1 ))(forall ((?v3 A_llist$ ))(=> (and (member$ ?v3 (lset$ ?v1 ))(not (= ?v2 ?v3 )))(= (inf$ (lset$a ?v2 )(lset$a ?v3 ))bot$ )))))))(ldistinct$a (fun_app$a ?v0 ?v1 ))))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (admissible$ (fun_lub$ lSup$ )(fun_ord$ lprefix$ )uu$ )):named a1 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(lprefix$a ?v0 ?v0 )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v0 )):named a3 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(lprefix$a ?v0 ?v0 )):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_fun$ )(?v1 A_llist_llist_a_llist_fun$ )(?v2 A_llist_llist_a_llist_fun$ ))(=> (and (fun_app$ (fun_app$d (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$ (fun_app$d (fun_ord$ lprefix$ )?v1 )?v2 ))(fun_app$ (fun_app$d (fun_ord$ lprefix$ )?v0 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_fun$ )(?v1 A_llist_llist_a_llist_fun$ ))(=> (and (fun_app$ (fun_app$d (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$ (fun_app$d (fun_ord$ lprefix$ )?v1 )?v0 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(lprefix$a ?v1 ?v0 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(lprefix$a ?v1 ?v0 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(lprefix$a ?v2 ?v1 ))(or (lprefix$a ?v0 ?v2 )(lprefix$a ?v2 ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v2 )?v1 ))(or (fun_app$b (fun_app$c lprefix$ ?v0 )?v2 )(fun_app$b (fun_app$c lprefix$ ?v2 )?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(lprefix$a ?v1 ?v2 ))(lprefix$a ?v0 ?v2 ))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v1 )?v2 ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(lprefix$a ?v1 ?v2 ))(lprefix$a ?v0 ?v2 ))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v1 )?v2 ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v2 ))):named a17 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (ldistinct$ ?v0 )(lprefix$a ?v1 ?v0 ))(ldistinct$ ?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (ldistinct$a ?v0 )(fun_app$b (fun_app$c lprefix$ ?v1 )?v0 ))(ldistinct$a ?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_fun$ ))(fun_app$ (fun_app$d (fun_ord$ lprefix$ )?v0 )?v0 )):named a20 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (inf$a ?v0 bot$a )bot$a )):named a21 ))
(assert (! (forall ((?v0 A_set$ ))(= (inf$ ?v0 bot$ )bot$ )):named a22 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (inf$a bot$a ?v0 )bot$a )):named a23 ))
(assert (! (forall ((?v0 A_set$ ))(= (inf$ bot$ ?v0 )bot$ )):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_set$ ))(= (member$ ?v0 (inf$a ?v1 ?v2 ))(and (member$ ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (member$a ?v0 (inf$ ?v1 ?v2 ))(and (member$a ?v0 ?v1 )(member$a ?v0 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_set$ ))(=> (and (member$ ?v0 ?v1 )(member$ ?v0 ?v2 ))(member$ ?v0 (inf$a ?v1 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (and (member$a ?v0 ?v1 )(member$a ?v0 ?v2 ))(member$a ?v0 (inf$ ?v1 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_set$ ))(= (inf$a (inf$a ?v0 ?v1 )?v1 )(inf$a ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (inf$ (inf$ ?v0 ?v1 )?v1 )(inf$ ?v0 ?v1 ))):named a30 ))
(check-sat )
;(get-unsat-core )
