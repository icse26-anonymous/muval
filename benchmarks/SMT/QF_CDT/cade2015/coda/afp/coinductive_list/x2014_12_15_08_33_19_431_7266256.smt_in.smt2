;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort A_llist_llist_enat_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-sort A_llist_list$ 0)
(declare-fun nil$ ()A_llist_list$)
(declare-fun hd$ (A_llist_list$)A_llist$)
(declare-fun tl$ (A_llist_list$)A_llist_list$)
(declare-fun cons$ (A_llist$ A_llist_list$ )A_llist_list$)
(declare-fun i$ ()Nat$ )
(declare-fun m$ ()Nat$ )
(declare-fun n$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun i$a ()Nat$ )
(declare-fun n$a ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun llcp$ (A_llist_llist$ )A_llist_llist_enat_fun$ )
(declare-fun lnth$ (A_llist_llist$ Nat$ )A_llist$ )
(declare-fun xss$a ()A_llist_list$ )
(declare-fun xss$b ()A_llist_llist$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun llcp$a (A_llist$ )A_llist_enat_fun$ )
(declare-fun lnth$a (A_llist$ Nat$ )A$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lappend$ (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lmember$ (A_llist$ A_llist_llist$ )Bool )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_llist_llist_enat_fun$ A_llist_llist$ )Enat$ )
(declare-fun fun_app$c (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun lappend$a (A_llist$ A_llist$ )A_llist$ )
(declare-fun llength$a (A_llist_llist$ )Enat$ )
(declare-fun llist_of$ (A_llist_list$ )A_llist_llist$ )
(declare-fun lmember$a (A$ )A_llist_bool_fun$ )
(declare-fun pred_llist$ (A_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun pred_llist$a (A_bool_fun$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (A_llist_llist$ A_llist_llist$ )Bool )
(declare-fun lstrict_prefix$a (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (= (llength$ (lnth$ (lCons$a (lCons$ x$ xs$ )xss$ )i$ ))(llength$ (lnth$ (lCons$a xs$ xss$ )i$ )))):named a0 ))
(assert (! (= i$ (suc$ i$a )):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= i$ (suc$ ?v0 ))false ))false ):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 Nat$ ))(! (= (lnth$ (lCons$a ?v0 ?v1 )(suc$ ?v2 ))(lnth$ ?v1 ?v2 )):pattern ((lnth$ (lCons$a ?v0 ?v1 )(suc$ ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 Nat$ ))(! (= (lnth$a (lCons$ ?v0 ?v1 )(suc$ ?v2 ))(lnth$a ?v1 ?v2 )):pattern ((lnth$a (lCons$ ?v0 ?v1 )(suc$ ?v2 ))))):named a6 ))
(assert (! (= xs$a (lconcat$ (lCons$a xs$ xss$ ))):named a7 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (pred_llist$ ?v0 (lCons$a ?v1 ?v2 ))(and (fun_app$ ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$a ?v1 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$ (pred_llist$a ?v0 )(lCons$ ?v1 ?v2 ))(and (fun_app$a ?v0 ?v1 )(fun_app$ (pred_llist$a ?v0 )?v2 ))):pattern ((fun_app$ (pred_llist$a ?v0 )(lCons$ ?v1 ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (lmember$ ?v0 (lCons$a ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$ ?v0 ?v2 ))):pattern ((lmember$ ?v0 (lCons$a ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$ (lmember$a ?v0 )(lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(fun_app$ (lmember$a ?v0 )?v2 ))):pattern ((fun_app$ (lmember$a ?v0 )(lCons$ ?v1 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lnth$ (lCons$a ?v0 ?v1 )zero$ )?v0 ):pattern ((lCons$a ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lnth$a (lCons$ ?v0 ?v1 )zero$ )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a13 ))
(assert (! (= xssa$ (lappend$ (llist_of$ xss$a )(lCons$a (lCons$ x$ xs$ )xss$ ))):named a14 ))
(assert (! (= (lconcat$ xssa$ )(lCons$ x$ xs$a )):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(! (= (lstrict_prefix$ (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(lstrict_prefix$ ?v1 ?v3 ))):pattern ((lstrict_prefix$ (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$ (lstrict_prefix$a (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$ (lstrict_prefix$a ?v1 )?v3 ))):pattern ((fun_app$ (lstrict_prefix$a (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a17 ))
(assert (! (= xs$a (lappend$a xs$ (lconcat$ xss$ ))):named a18 ))
(assert (! (less$ (enat$ n$ )(llength$ (lnth$ (lCons$a xs$ xss$ )m$ ))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (llength$a (lCons$a ?v0 ?v1 ))(eSuc$ (llength$a ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (llength$ (lCons$ ?v0 ?v1 ))(eSuc$ (llength$ ?v1 ))):pattern ((lCons$ ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$b (llcp$ ?v0 )?v0 )(llength$a ?v0 )):pattern ((llcp$ ?v0 )))):named a22 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (llcp$a ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$a ?v0 )))):named a23 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= m$ (suc$ ?v0 ))false ))false ):named a24 ))
(assert (! (less$ (enat$ n$a )(llength$ (lconcat$ xss$b ))):named a25 ))
(check-sat )
;(get-unsat-core )
