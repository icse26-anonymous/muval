;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_list$ 0)
(declare-sort B_list$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun nil$a ()B_list$)
(declare-fun hd$a (B_list$)B$)
(declare-fun tl$a (B_list$)B_list$)
(declare-fun cons$a (B$ B_list$ )B_list$)
(declare-fun n$ ()Nat$ )
(declare-fun p$ (A$ )B_bool_fun$ )
(declare-fun x$ (A_llist$ B_llist$ )Bool )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun nth$ (A_list$ )Nat_a_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun nth$a (B_list$ )Nat_b_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lmap$a (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$b (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lnth$a (B_llist$ )Nat_b_fun$ )
(declare-fun lset$a (B_llist$ )B_set$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun compow$ (Nat$ )A_a_fun_a_a_fun_fun$ )
(declare-fun ltake$a (Enat$ B_llist$ )B_llist$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun compow$a (Nat$ )B_b_fun_b_b_fun_fun$ )
(declare-fun fun_app$ (B_bool_fun$ B$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun member$a (B$ B_set$ )Bool )
(declare-fun fun_app$a (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$b (Nat_b_fun$ Nat$ )B$ )
(declare-fun fun_app$c (A_a_fun$ A$ )A$ )
(declare-fun fun_app$d (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$e (B_b_fun$ B$ )B$ )
(declare-fun fun_app$f (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun$ )
(declare-fun fun_app$g (A_b_fun$ A$ )B$ )
(declare-fun fun_app$h (B_a_fun$ B$ )A$ )
(declare-fun fun_app$i (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$j (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$k (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$l (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$m (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun lprefix$a (B_llist$ B_llist$ )Bool )
(declare-fun iterates$a (B_b_fun$ B$ )B_llist$ )
(declare-fun llist_of$a (B_list$ )B_llist$ )
(declare-fun llist_all2$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun llist_all2$a (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(declare-fun llist_all2$b (B_a_bool_fun_fun$ B_llist$ A_llist$ )Bool )
(declare-fun llist_all2$c (B_b_bool_fun_fun$ B_llist$ B_llist$ )Bool )
(declare-fun ltakeWhile$a (B_bool_fun$ B_llist$ )B_llist$ )
(assert (! (not (fun_app$ (p$ (fun_app$a (lnth$ xs$ )n$ ))(fun_app$b (lnth$a ys$ )n$ ))):named a0 ))
(assert (! (x$ xs$ ys$ ):named a1 ))
(assert (! (= (llength$ xs$ )(llength$a ys$ )):named a2 ))
(assert (! (less$ (enat$ n$ )(llength$ xs$ )):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 Nat$ ))(= (fun_app$a (lnth$ (iterates$ ?v0 ?v1 ))?v2 )(fun_app$c (fun_app$d (compow$ ?v2 )?v0 )?v1 ))):named a4 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 Nat$ ))(= (fun_app$b (lnth$a (iterates$a ?v0 ?v1 ))?v2 )(fun_app$e (fun_app$f (compow$a ?v2 )?v0 )?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )?v1 )(= (fun_app$a (lnth$ (ltake$ ?v1 ?v2 ))?v0 )(fun_app$a (lnth$ ?v2 )?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Enat$ )(?v2 B_llist$ ))(=> (less$ (enat$ ?v0 )?v1 )(= (fun_app$b (lnth$a (ltake$a ?v1 ?v2 ))?v0 )(fun_app$b (lnth$a ?v2 )?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (fun_app$a (lnth$ (lmap$ ?v2 ?v1 ))?v0 )(fun_app$c ?v2 (fun_app$a (lnth$ ?v1 )?v0 ))))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_b_fun$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (fun_app$b (lnth$a (lmap$a ?v2 ?v1 ))?v0 )(fun_app$g ?v2 (fun_app$a (lnth$ ?v1 )?v0 ))))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_a_fun$ ))(=> (less$ (enat$ ?v0 )(llength$a ?v1 ))(= (fun_app$a (lnth$ (lmap$b ?v2 ?v1 ))?v0 )(fun_app$h ?v2 (fun_app$b (lnth$a ?v1 )?v0 ))))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_b_fun$ ))(=> (less$ (enat$ ?v0 )(llength$a ?v1 ))(= (fun_app$b (lnth$a (lmap$c ?v2 ?v1 ))?v0 )(fun_app$e ?v2 (fun_app$b (lnth$a ?v1 )?v0 ))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 Nat$ ))(=> (and (lprefix$ ?v0 ?v1 )(less$ (enat$ ?v2 )(llength$ ?v0 )))(= (fun_app$a (lnth$ ?v0 )?v2 )(fun_app$a (lnth$ ?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 Nat$ ))(=> (and (lprefix$a ?v0 ?v1 )(less$ (enat$ ?v2 )(llength$a ?v0 )))(= (fun_app$b (lnth$a ?v0 )?v2 )(fun_app$b (lnth$a ?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$a (lnth$ (lCons$ ?v0 ?v1 ))zero$ )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (fun_app$b (lnth$a (lCons$a ?v0 ?v1 ))zero$ )?v0 ):pattern ((lCons$a ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_list$ ))(= (lnth$ (llist_of$ ?v0 ))(nth$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 B_list$ ))(= (lnth$a (llist_of$a ?v0 ))(nth$a ?v0 ))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )(llength$ (ltakeWhile$ ?v1 ?v2 )))(= (fun_app$a (lnth$ (ltakeWhile$ ?v1 ?v2 ))?v0 )(fun_app$a (lnth$ ?v2 )?v0 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_bool_fun$ )(?v2 B_llist$ ))(=> (less$ (enat$ ?v0 )(llength$a (ltakeWhile$a ?v1 ?v2 )))(= (fun_app$b (lnth$a (ltakeWhile$a ?v1 ?v2 ))?v0 )(fun_app$b (lnth$a ?v2 )?v0 )))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$ ?v1 ))(= (fun_app$a (lnth$ ?v1 )?v2 )?v0 ))))):named a20 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(= (member$a ?v0 (lset$a ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$a ?v1 ))(= (fun_app$b (lnth$a ?v1 )?v2 )?v0 ))))):named a21 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (llist_all2$ ?v0 ?v1 ?v2 )(and (= (llength$ ?v1 )(llength$ ?v2 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$ ?v2 ))(fun_app$i (fun_app$j ?v0 (fun_app$a (lnth$ ?v1 )?v3 ))(fun_app$a (lnth$ ?v2 )?v3 ))))))):named a22 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(= (llist_all2$a ?v0 ?v1 ?v2 )(and (= (llength$ ?v1 )(llength$a ?v2 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$a ?v2 ))(fun_app$ (fun_app$k ?v0 (fun_app$a (lnth$ ?v1 )?v3 ))(fun_app$b (lnth$a ?v2 )?v3 ))))))):named a23 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(= (llist_all2$b ?v0 ?v1 ?v2 )(and (= (llength$a ?v1 )(llength$ ?v2 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$ ?v2 ))(fun_app$i (fun_app$l ?v0 (fun_app$b (lnth$a ?v1 )?v3 ))(fun_app$a (lnth$ ?v2 )?v3 ))))))):named a24 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (llist_all2$c ?v0 ?v1 ?v2 )(and (= (llength$a ?v1 )(llength$a ?v2 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$a ?v2 ))(fun_app$ (fun_app$m ?v0 (fun_app$b (lnth$a ?v1 )?v3 ))(fun_app$b (lnth$a ?v2 )?v3 ))))))):named a25 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$ ?v2 )))(fun_app$i (fun_app$j ?v0 (fun_app$a (lnth$ ?v1 )?v3 ))(fun_app$a (lnth$ ?v2 )?v3 )))):named a26 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$b ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$ ?v2 )))(fun_app$i (fun_app$l ?v0 (fun_app$b (lnth$a ?v1 )?v3 ))(fun_app$a (lnth$ ?v2 )?v3 )))):named a27 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$a ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$a ?v2 )))(fun_app$ (fun_app$k ?v0 (fun_app$a (lnth$ ?v1 )?v3 ))(fun_app$b (lnth$a ?v2 )?v3 )))):named a28 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$c ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$a ?v2 )))(fun_app$ (fun_app$m ?v0 (fun_app$b (lnth$a ?v1 )?v3 ))(fun_app$b (lnth$a ?v2 )?v3 )))):named a29 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$ ?v1 )))(fun_app$i (fun_app$j ?v0 (fun_app$a (lnth$ ?v1 )?v3 ))(fun_app$a (lnth$ ?v2 )?v3 )))):named a30 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$a ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$ ?v1 )))(fun_app$ (fun_app$k ?v0 (fun_app$a (lnth$ ?v1 )?v3 ))(fun_app$b (lnth$a ?v2 )?v3 )))):named a31 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$b ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$a ?v1 )))(fun_app$i (fun_app$l ?v0 (fun_app$b (lnth$a ?v1 )?v3 ))(fun_app$a (lnth$ ?v2 )?v3 )))):named a32 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 Nat$ ))(=> (and (llist_all2$c ?v0 ?v1 ?v2 )(less$ (enat$ ?v3 )(llength$a ?v1 )))(fun_app$ (fun_app$m ?v0 (fun_app$b (lnth$a ?v1 )?v3 ))(fun_app$b (lnth$a ?v2 )?v3 )))):named a33 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (and (= (llength$ ?v0 )(llength$ ?v1 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$ ?v0 ))(fun_app$i (fun_app$j ?v2 (fun_app$a (lnth$ ?v0 )?v3 ))(fun_app$a (lnth$ ?v1 )?v3 )))))(llist_all2$ ?v2 ?v0 ?v1 ))):named a34 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A_b_bool_fun_fun$ ))(=> (and (= (llength$ ?v0 )(llength$a ?v1 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$ ?v0 ))(fun_app$ (fun_app$k ?v2 (fun_app$a (lnth$ ?v0 )?v3 ))(fun_app$b (lnth$a ?v1 )?v3 )))))(llist_all2$a ?v2 ?v0 ?v1 ))):named a35 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ )(?v2 B_a_bool_fun_fun$ ))(=> (and (= (llength$a ?v0 )(llength$ ?v1 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$a ?v0 ))(fun_app$i (fun_app$l ?v2 (fun_app$b (lnth$a ?v0 )?v3 ))(fun_app$a (lnth$ ?v1 )?v3 )))))(llist_all2$b ?v2 ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_b_bool_fun_fun$ ))(=> (and (= (llength$a ?v0 )(llength$a ?v1 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$a ?v0 ))(fun_app$ (fun_app$m ?v2 (fun_app$b (lnth$a ?v0 )?v3 ))(fun_app$b (lnth$a ?v1 )?v3 )))))(llist_all2$c ?v2 ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a38 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a39 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a40 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a41 ))
(check-sat )
;(get-unsat-core )
