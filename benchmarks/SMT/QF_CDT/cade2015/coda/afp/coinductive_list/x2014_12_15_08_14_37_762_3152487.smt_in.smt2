;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Enat$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun gen_lset$ (A_set$ )A_llist_a_set_fun$ )
(declare-fun ldistinct$ (A_llist$ )Bool )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(assert (! (not (= (ltake$ n$ lNil$ )lNil$ )):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$a (gen_lset$ ?v0 )lNil$ )?v0 ):pattern ((gen_lset$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_llist$ ?v0 lNil$ )):named a3 ))
(assert (! (ldistinct$ lNil$ ):named a4 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$ ?v0 lNil$ ?v1 )):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (lappend$ lNil$ )?v0 )?v0 ):pattern ((fun_app$b (lappend$ lNil$ )?v0 )))):named a7 ))
(assert (! (= (lfinite$ lNil$ )true ):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$ lNil$ ?v0 )true ):pattern ((lprefix$ lNil$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$b (lappend$ ?v0 )?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lprefix$ (fun_app$b (lappend$ ?v0 )?v1 )(fun_app$b (lappend$ ?v0 )?v2 ))(=> (lfinite$ ?v0 )(lprefix$ ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$b (lappend$ (fun_app$b (lappend$ ?v0 )?v1 ))?v2 )(fun_app$b (lappend$ ?v0 )(fun_app$b (lappend$ ?v1 )?v2 )))):named a14 ))
(check-sat )
;(get-unsat-core )
