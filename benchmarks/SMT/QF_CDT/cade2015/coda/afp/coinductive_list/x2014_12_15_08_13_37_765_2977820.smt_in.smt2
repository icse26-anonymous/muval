;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_list_fun$ 0 )
(declare-sort A_list_nat_fun$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun bind$ (A_list$ A_a_list_fun$ )A_list$ )
(declare-fun member$ (A_list$ )A_bool_fun$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun fun_app$b (A_list_bool_fun$ A_list$ )Bool )
(declare-fun fun_app$c (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$d (A_list_nat_fun$ A_list$ )Nat$ )
(declare-fun gen_lset$ (A_set$ )A_llist_a_set_fun$ )
(declare-fun list_ex1$ (A_bool_fun$ )A_list_bool_fun$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun ldistinct$ (A_llist$ )Bool )
(declare-fun gen_length$ (Nat$ )A_list_nat_fun$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(assert (! (not (= (list_of$ lNil$ )nil$ )):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a2 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$a (gen_lset$ ?v0 )lNil$ )?v0 ):pattern ((gen_lset$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a4 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (llist_of$ ?v0 )lNil$ )(= ?v0 nil$ ))):named a5 ))
(assert (! (= (llist_of$ nil$ )lNil$ ):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_llist$ ?v0 lNil$ )):named a7 ))
(assert (! (ldistinct$ lNil$ ):named a8 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$ ?v0 lNil$ ?v1 )):named a9 ))
(assert (! (forall ((?v0 A_a_list_fun$ ))(! (= (bind$ nil$ ?v0 )nil$ ):pattern ((bind$ nil$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$b (list_ex1$ ?v0 )nil$ )false ):pattern ((list_ex1$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(= (llist_of$ (list_of$ ?v0 ))?v0 ))):named a13 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$c (member$ nil$ )?v0 )false ):pattern ((fun_app$c (member$ nil$ )?v0 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$d (gen_length$ ?v0 )nil$ )?v0 ):pattern ((gen_length$ ?v0 )))):named a15 ))
(check-sat )
;(get-unsat-core )
