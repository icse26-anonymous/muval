;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))(A_llist_llist_llist$ (lNil$b )(lCons$b (lhd$b A_llist_llist$ )(ltl$b A_llist_llist_llist$ )))(A_llist_llist_llist_llist$ (lNil$c )(lCons$c (lhd$c A_llist_llist_llist$ )(ltl$c A_llist_llist_llist_llist$ )))))
(declare-fun bot$ ()A_llist_set$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun bot$a ()A_llist_llist_set$ )
(declare-fun bot$b ()A_set$ )
(declare-fun lset$ (A_llist_llist$ )A_llist_set$ )
(declare-fun lset$a (A_llist_llist_llist$ )A_llist_llist_set$ )
(declare-fun lset$b (A_llist$ )A_set$ )
(declare-fun insert$ (A_llist$ A_llist_set$ )A_llist_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun insert$a (A$ A_set$ )A_set$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun less_eq$ (A_llist_set$ A_llist_set$ )Bool )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun collect$a (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lconcat$a (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun less_eq$a (A_set$ A_set$ )Bool )
(assert (! (not (= (= (lconcat$ xss$ )lNil$ )(less_eq$ (lset$ xss$ )(insert$ lNil$ bot$ )))):named a0 ))
(assert (! (= (lconcat$a lNil$c )lNil$b ):named a1 ))
(assert (! (= (lconcat$b lNil$b )lNil$a ):named a2 ))
(assert (! (= (lconcat$ lNil$a )lNil$ ):named a3 ))
(assert (! (= (lset$a lNil$b )bot$a ):named a4 ))
(assert (! (= (lset$b lNil$ )bot$b ):named a5 ))
(assert (! (= (lset$ lNil$a )bot$ ):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A$ ))(= (= (insert$a ?v0 ?v1 )(insert$a ?v2 bot$b ))(and (= ?v0 ?v2 )(less_eq$a ?v1 (insert$a ?v2 bot$b ))))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist$ ))(= (= (insert$ ?v0 ?v1 )(insert$ ?v2 bot$ ))(and (= ?v0 ?v2 )(less_eq$ ?v1 (insert$ ?v2 bot$ ))))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_set$ ))(= (= (insert$a ?v0 bot$b )(insert$a ?v1 ?v2 ))(and (= ?v1 ?v0 )(less_eq$a ?v2 (insert$a ?v0 bot$b ))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_set$ ))(= (= (insert$ ?v0 bot$ )(insert$ ?v1 ?v2 ))(and (= ?v1 ?v0 )(less_eq$ ?v2 (insert$ ?v0 bot$ ))))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (less_eq$a (insert$a ?v0 ?v1 )?v2 )(and (member$ ?v0 ?v2 )(less_eq$a ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_set$ ))(= (less_eq$ (insert$ ?v0 ?v1 )?v2 )(and (member$a ?v0 ?v2 )(less_eq$ ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A$ ))(member$ ?v0 (insert$a ?v0 bot$b ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(member$a ?v0 (insert$ ?v0 bot$ ))):named a14 ))
(assert (! (forall ((?v0 A_set$ ))(= (less_eq$a ?v0 bot$b )(= ?v0 bot$b ))):named a15 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (less_eq$ ?v0 bot$ )(= ?v0 bot$ ))):named a16 ))
(assert (! (forall ((?v0 A_set$ ))(less_eq$a bot$b ?v0 )):named a17 ))
(assert (! (forall ((?v0 A_llist_set$ ))(less_eq$ bot$ ?v0 )):named a18 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ ))(=> (less_eq$a ?v0 (insert$a ?v1 bot$b ))(or (= ?v0 bot$b )(= ?v0 (insert$a ?v1 bot$b ))))):named a19 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist$ ))(=> (less_eq$ ?v0 (insert$ ?v1 bot$ ))(or (= ?v0 bot$ )(= ?v0 (insert$ ?v1 bot$ ))))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ ))(= (insert$a ?v0 (insert$a ?v0 ?v1 ))(insert$a ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_set$ ))(= (member$ ?v0 (insert$a ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_set$ ))(= (member$a ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$a ?v0 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$a ?v2 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist$ ))(=> (=> (not (member$a ?v0 ?v1 ))(= ?v0 ?v2 ))(member$a ?v0 (insert$ ?v2 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(=> (forall ((?v2 A$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 )))(less_eq$a ?v0 ?v1 ))):named a27 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_set$ ))(=> (forall ((?v2 A_llist$ ))(=> (member$a ?v2 ?v0 )(member$a ?v2 ?v1 )))(less_eq$ ?v0 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(=> (and (less_eq$a ?v0 ?v1 )(less_eq$a ?v1 ?v0 ))(= ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 A$ ))(= (member$ ?v0 bot$b )false )):named a31 ))
(assert (! (forall ((?v0 A_llist$ ))(= (member$a ?v0 bot$ )false )):named a32 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= bot$b (collect$ ?v0 ))(forall ((?v1 A$ ))(not (fun_app$ ?v0 ?v1 ))))):named a33 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(= (= bot$ (collect$a ?v0 ))(forall ((?v1 A_llist$ ))(not (fun_app$a ?v0 ?v1 ))))):named a34 ))
(check-sat )
;(get-unsat-core )
