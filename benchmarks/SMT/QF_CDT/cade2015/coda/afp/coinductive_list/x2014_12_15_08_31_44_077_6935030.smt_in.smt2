;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_llist_llist_llist_set$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-sort A_llist_list$ 0)
(declare-fun nil$ ()A_llist_list$)
(declare-fun hd$ (A_llist_list$)A_llist$)
(declare-fun tl$ (A_llist_list$)A_llist_list$)
(declare-fun cons$ (A_llist$ A_llist_list$ )A_llist_list$)
(declare-codatatypes ()((A_llist_llist_llist$ (lNil$b )(lCons$b (lhd$b A_llist_llist$ )(ltl$b A_llist_llist_llist$ )))(A_llist_llist_llist_llist$ (lNil$c )(lCons$c (lhd$c A_llist_llist_llist$ )(ltl$c A_llist_llist_llist_llist$ )))))
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun set$ (A_llist_list$ )A_llist_set$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun lnull$ ()A_llist_bool_fun$ )
(declare-fun lnull$a (A_llist_llist_llist$ )Bool )
(declare-fun lnull$b (A_llist_llist$ )Bool )
(declare-fun member$ (A_llist_llist_llist$ A_llist_llist_llist_set$ )Bool )
(declare-fun collect$ (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lappend$ (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun less_eq$ (A_llist_set$ A_llist_set$ )Bool )
(declare-fun member$a (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun member$b (A_llist$ A_llist_set$ )Bool )
(declare-fun lappend$a (A_llist$ A_llist$ )A_llist$ )
(declare-fun lappend$b (A_llist_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$a (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun llist_of$ (A_llist_list$ )A_llist_llist$ )
(assert (! (not (= (= (lconcat$ xss$ )(lCons$ x$ xs$ ))(exists ((?v0 A_llist$ )(?v1 A_llist_list$ )(?v2 A_llist_llist$ ))(and (= xss$ (lappend$ (llist_of$ ?v1 )(lCons$a (lCons$ x$ ?v0 )?v2 )))(and (= xs$ (lappend$a ?v0 (lconcat$ ?v2 )))(less_eq$ (set$ ?v1 )(collect$ lnull$ ))))))):named a0 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (lappend$b (lCons$b ?v0 ?v1 )?v2 )(lCons$b ?v0 (lappend$b ?v1 ?v2 ))):pattern ((lappend$b (lCons$b ?v0 ?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$a (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$a ?v1 ?v2 ))):pattern ((lappend$a (lCons$ ?v0 ?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(! (= (lappend$ (lCons$a ?v0 ?v1 )?v2 )(lCons$a ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$a ?v0 ?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(= (not (lnull$a (lappend$b ?v0 ?v1 )))(or (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a8 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (not (lnull$b (lappend$ ?v0 ?v1 )))(or (not (lnull$b ?v0 ))(not (lnull$b ?v1 ))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (fun_app$ lnull$ (lappend$a ?v0 ?v1 )))(or (not (fun_app$ lnull$ ?v0 ))(not (fun_app$ lnull$ ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(= (lnull$a (lappend$b ?v0 ?v1 ))(and (lnull$a ?v0 )(lnull$a ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (lnull$b (lappend$ ?v0 ?v1 ))(and (lnull$b ?v0 )(lnull$b ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (fun_app$ lnull$ (lappend$a ?v0 ?v1 ))(and (fun_app$ lnull$ ?v0 )(fun_app$ lnull$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ ))(! (= (lconcat$a (lCons$c ?v0 ?v1 ))(lappend$b ?v0 (lconcat$a ?v1 ))):pattern ((lCons$c ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lconcat$b (lCons$b ?v0 ?v1 ))(lappend$ ?v0 (lconcat$b ?v1 ))):pattern ((lCons$b ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lconcat$ (lCons$a ?v0 ?v1 ))(lappend$a ?v0 (lconcat$ ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(= (lappend$b (lappend$b ?v0 ?v1 )?v2 )(lappend$b ?v0 (lappend$b ?v1 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$a (lappend$a ?v0 ?v1 )?v2 )(lappend$a ?v0 (lappend$a ?v1 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(= (not (lnull$a ?v0 ))(exists ((?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(= ?v0 (lCons$b ?v1 ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (not (lnull$b ?v0 ))(exists ((?v1 A_llist$ )(?v2 A_llist_llist$ ))(= ?v0 (lCons$a ?v1 ?v2 ))))):named a21 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (fun_app$ lnull$ ?v0 ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (or (fun_app$ lnull$ ?v0 )(lnull$a ?v1 ))false )(=> (and (not (fun_app$ lnull$ ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a23 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (or (lnull$b ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$b ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a24 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(fun_app$ lnull$ ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (fun_app$ lnull$ ?v1 )))false ))false )):named a25 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$b ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a26 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a27 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (fun_app$ lnull$ ?v0 )(lnull$b ?v1 ))false )(=> (and (not (fun_app$ lnull$ ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a28 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$b ?v0 )(fun_app$ lnull$ ?v1 ))false )(=> (and (not (lnull$b ?v0 ))(not (fun_app$ lnull$ ?v1 )))false ))false )):named a29 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (lnull$b ?v0 )(lnull$b ?v1 ))false )(=> (and (not (lnull$b ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a30 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (fun_app$ lnull$ ?v0 )(fun_app$ lnull$ ?v1 ))false )(=> (and (not (fun_app$ lnull$ ?v0 ))(not (fun_app$ lnull$ ?v1 )))false ))false )):named a31 ))
(assert (! (forall ((?v0 A_llist_llist_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist_llist_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$a ?v1 )))false )(=> (not (forall ((?v1 A_llist_llist_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$a ?v1 ))))false ))false )):named a32 ))
(assert (! (forall ((?v0 A_llist_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$b ?v1 )))false )(=> (not (forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$b ?v1 ))))false ))false )):named a33 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$b ?v1 ?v0 )(fun_app$ lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$b ?v1 ?v0 )(fun_app$ lnull$ ?v1 ))))false ))false )):named a34 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (=> (and (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (or (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a35 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (and (lnull$b ?v0 )(lnull$b ?v1 ))false )(=> (or (not (lnull$b ?v0 ))(not (lnull$b ?v1 )))false ))false )):named a36 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (fun_app$ lnull$ ?v0 )(fun_app$ lnull$ ?v1 ))false )(=> (or (not (fun_app$ lnull$ ?v0 ))(not (fun_app$ lnull$ ?v1 )))false ))false )):named a37 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(=> (and (=> (lnull$a ?v0 )false )(=> (not (lnull$a ?v0 ))false ))false )):named a38 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (and (=> (lnull$b ?v0 )false )(=> (not (lnull$b ?v0 ))false ))false )):named a39 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (fun_app$ lnull$ ?v0 )false )(=> (not (fun_app$ lnull$ ?v0 ))false ))false )):named a40 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(=> (= ?v0 (lCons$b ?v1 ?v2 ))(not (lnull$a ?v0 )))):named a41 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(=> (= ?v0 (lCons$a ?v1 ?v2 ))(not (lnull$b ?v0 )))):named a42 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))(not (fun_app$ lnull$ ?v0 )))):named a43 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (or (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))(not (lnull$a (lappend$b ?v0 ?v1 ))))):named a44 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (or (not (lnull$b ?v0 ))(not (lnull$b ?v1 )))(not (lnull$b (lappend$ ?v0 ?v1 ))))):named a45 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (or (not (fun_app$ lnull$ ?v0 ))(not (fun_app$ lnull$ ?v1 )))(not (fun_app$ lnull$ (lappend$a ?v0 ?v1 ))))):named a46 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (lnull$a ?v0 )(lnull$a ?v1 ))(lnull$a (lappend$b ?v0 ?v1 )))):named a47 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (lnull$b ?v0 )(lnull$b ?v1 ))(lnull$b (lappend$ ?v0 ?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ lnull$ ?v0 )(fun_app$ lnull$ ?v1 ))(fun_app$ lnull$ (lappend$a ?v0 ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (=> (lnull$a ?v0 )(= (lappend$b ?v1 ?v0 )?v1 )):pattern ((lappend$b ?v1 ?v0 )))):named a50 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(! (=> (lnull$b ?v0 )(= (lappend$ ?v1 ?v0 )?v1 )):pattern ((lappend$ ?v1 ?v0 )))):named a51 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (fun_app$ lnull$ ?v0 )(= (lappend$a ?v1 ?v0 )?v1 )):pattern ((lappend$a ?v1 ?v0 )))):named a52 ))
(check-sat )
;(get-unsat-core )
