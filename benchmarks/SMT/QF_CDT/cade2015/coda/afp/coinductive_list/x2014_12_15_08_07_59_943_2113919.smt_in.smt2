;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-fun f$ ()B_a_fun$ )
(declare-fun xs$ ()B_llist$ )
(declare-fun lmap$ (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$a (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lmap$b (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$c (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lappend$a (B_llist$ B_llist$ )B_llist$ )
(declare-fun lfinite$a (B_llist$ )Bool )
(assert (! (not (= (lfinite$ (lmap$ f$ xs$ ))(lfinite$a xs$ ))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (lappend$ ?v0 ?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a1 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lfinite$a (lappend$a ?v0 ?v1 ))(and (lfinite$a ?v0 )(lfinite$a ?v1 )))):named a2 ))
(assert (! (= (lfinite$ lNil$ )true ):named a3 ))
(assert (! (= (lfinite$a lNil$a )true ):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ (ltl$ ?v0 ))(lfinite$ ?v0 ))):named a5 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lfinite$a (ltl$a ?v0 ))(lfinite$a ?v0 ))):named a6 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (ltl$a (lmap$a ?v0 ?v1 ))(lmap$a ?v0 (ltl$a ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (ltl$a (lmap$b ?v0 ?v1 ))(lmap$b ?v0 (ltl$ ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$ (lmap$c ?v0 ?v1 ))(lmap$c ?v0 (ltl$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$ (lmap$ ?v0 ?v1 ))(lmap$ ?v0 (ltl$a ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (lappend$ ?v0 ?v1 )?v0 )):pattern ((lappend$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (=> (not (lfinite$a ?v0 ))(= (lappend$a ?v0 ?v1 )?v0 )):pattern ((lappend$a ?v0 ?v1 )))):named a16 ))
(assert (! (lfinite$ lNil$ ):named a17 ))
(assert (! (lfinite$a lNil$a ):named a18 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (lmap$a ?v0 (lappend$a ?v1 ?v2 ))(lappend$a (lmap$a ?v0 ?v1 )(lmap$a ?v0 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lmap$b ?v0 (lappend$ ?v1 ?v2 ))(lappend$a (lmap$b ?v0 ?v1 )(lmap$b ?v0 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lmap$c ?v0 (lappend$ ?v1 ?v2 ))(lappend$ (lmap$c ?v0 ?v1 )(lmap$c ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (lmap$ ?v0 (lappend$a ?v1 ?v2 ))(lappend$ (lmap$ ?v0 ?v1 )(lmap$ ?v0 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$c ?v0 ?v1 ))(lnull$ ?v1 ))):named a23 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$b ?v0 ?v1 ))(lnull$ ?v1 ))):named a24 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$a (lmap$a ?v0 ?v1 ))(lnull$a ?v1 ))):named a25 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$ (lmap$ ?v0 ?v1 ))(lnull$a ?v1 ))):named a26 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= (lmap$a ?v0 ?v1 )lNil$a )(= ?v1 lNil$a ))):named a27 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= (lmap$b ?v0 ?v1 )lNil$a )(= ?v1 lNil$ ))):named a28 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= (lmap$c ?v0 ?v1 )lNil$ )(= ?v1 lNil$ ))):named a29 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= (lmap$ ?v0 ?v1 )lNil$ )(= ?v1 lNil$a ))):named a30 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= lNil$a (lmap$a ?v0 ?v1 ))(= ?v1 lNil$a ))):named a31 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= lNil$a (lmap$b ?v0 ?v1 ))(= ?v1 lNil$ ))):named a32 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= lNil$ (lmap$c ?v0 ?v1 ))(= ?v1 lNil$ ))):named a33 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= lNil$ (lmap$ ?v0 ?v1 ))(= ?v1 lNil$a ))):named a34 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a35 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a36 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$ (lappend$ ?v0 ?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a37 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$a (lappend$a ?v0 ?v1 )))(or (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a38 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$ (lappend$ ?v0 ?v1 ))(and (lnull$ ?v0 )(lnull$ ?v1 )))):named a39 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$a (lappend$a ?v0 ?v1 ))(and (lnull$a ?v0 )(lnull$a ?v1 )))):named a40 ))
(check-sat )
;(get-unsat-core )
