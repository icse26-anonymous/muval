;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun y$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(assert (! (not (and (not (= xs$ lNil$ ))(and (= (lhd$ xs$ )y$ )(= (ltl$ xs$ )ys$ )))):named a0 ))
(assert (! (= xs$ (lCons$ y$ ys$ )):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lhd$ (lCons$ ?v0 ?v1 ))?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (ltl$ (lCons$ ?v0 ?v1 ))?v1 ):pattern ((lCons$ ?v0 ?v1 )))):named a4 ))
(assert (! (= (ltl$ lNil$ )lNil$ ):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(=> (= ?v0 (lCons$ (lhd$ ?v0 )(ltl$ ?v0 )))false ))false )):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(forall ((?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))false )))false )):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(not (= lNil$ (lCons$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (not (lnull$ ?v0 ))(= (lCons$ (lhd$ ?v0 )(ltl$ ?v0 ))?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))(and (fun_app$ ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_llist$ ?v0 lNil$ )):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (= (lnull$ ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(= (ltl$ ?v0 )(ltl$ ?v1 )))))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$a (fun_app$b ?v0 ?v3 )?v4 )(and (= (lnull$ ?v3 )(lnull$ ?v4 ))(=> (and (not (lnull$ ?v3 ))(not (lnull$ ?v4 )))(and (= (lhd$ ?v3 )(lhd$ ?v4 ))(or (fun_app$a (fun_app$b ?v0 (ltl$ ?v3 ))(ltl$ ?v4 ))(= (ltl$ ?v3 )(ltl$ ?v4 )))))))))(= ?v1 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$a (fun_app$b ?v0 ?v3 )?v4 )(and (= (lnull$ ?v3 )(lnull$ ?v4 ))(=> (and (not (lnull$ ?v3 ))(not (lnull$ ?v4 )))(and (= (lhd$ ?v3 )(lhd$ ?v4 ))(fun_app$a (fun_app$b ?v0 (ltl$ ?v3 ))(ltl$ ?v4 ))))))))(= ?v1 ?v2 ))):named a14 ))
(check-sat )
;(get-unsat-core )
