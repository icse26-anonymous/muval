;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun zs$ ()A_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun ltake$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun minus$ (Enat$ Enat$ )Enat$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(assert (! (not (= ys$ (fun_app$ (ltake$ (llength$ ys$ ))xs$ ))):named a0 ))
(assert (! (less_eq$ (llength$ ys$ )(llength$ xs$ )):named a1 ))
(assert (! (= (lappend$ xs$ xs$a )(lappend$ ys$ zs$ )):named a2 ))
(assert (! (= (lappend$ (fun_app$ (ltake$ (llength$ ys$ ))xs$ )(lappend$ (ldrop$ (llength$ ys$ )xs$ )xs$a ))(lappend$ ys$ zs$ )):named a3 ))
(assert (! (=> (forall ((?v0 A_llist$ ))(=> (= (lappend$ xs$ ?v0 )(lappend$ ys$ zs$ ))false ))false ):named a4 ))
(assert (! (not (or (lprefix$ xs$ ys$ )(lprefix$ ys$ xs$ ))):named a5 ))
(assert (! (lprefix$ xs$ (lappend$ ys$ zs$ )):named a6 ))
(assert (! (not (lprefix$ xs$ ys$ )):named a7 ))
(assert (! (not (lprefix$ ys$ xs$ )):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$ ?v0 )?v1 )(= (fun_app$ (ltake$ ?v1 )?v0 )?v0 )):pattern ((fun_app$ (ltake$ ?v1 )?v0 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Enat$ ))(=> (and (= (fun_app$ (ltake$ ?v0 )?v1 )(fun_app$ (ltake$ ?v0 )?v2 ))(less_eq$ ?v3 ?v0 ))(= (fun_app$ (ltake$ ?v3 )?v1 )(fun_app$ (ltake$ ?v3 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (less_eq$ ?v0 (llength$ ?v1 ))(= (fun_app$ (ltake$ ?v0 )(lappend$ ?v1 ?v2 ))(fun_app$ (ltake$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (lappend$ (fun_app$ (ltake$ ?v0 )?v1 )(ldrop$ ?v0 ?v1 ))?v1 )):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (llength$ (fun_app$ (ltake$ ?v0 )?v1 ))(min$ ?v0 (llength$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 Enat$ ))(= (lprefix$ (fun_app$ (ltake$ ?v0 )?v1 )(fun_app$ (ltake$ ?v2 )?v1 ))(or (less_eq$ ?v0 ?v2 )(less_eq$ (llength$ ?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ (ltake$ ?v0 )(lappend$ ?v1 ?v2 ))(lappend$ (fun_app$ (ltake$ ?v0 )?v1 )(fun_app$ (ltake$ (minus$ ?v0 (llength$ ?v1 )))?v2 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ltake$ ?v0 )lNil$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(lprefix$ (fun_app$ (ltake$ ?v0 )?v1 )?v1 )):named a17 ))
(check-sat )
;(get-unsat-core )
