;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_fun$ 0 )
(declare-sort A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun f$ (A_llist_a_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun p$ (A$ )Bool )
(declare-fun uu$ (A_llist_a_llist_fun$ )A_a_llist_a_llist_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun uua$ ()A_llist_a_llist_fun_a_llist_fun$ )
(declare-fun fun_app$ (A_llist_a_llist_fun_a_llist_fun$ A_llist_a_llist_fun$ )A_llist$ )
(declare-fun fun_ord$ (A_llist_a_llist_bool_fun_fun$ )A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ A_a_llist_a_llist_fun_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$c (A_a_llist_a_llist_fun_fun$ A$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$e (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$f (A_llist_a_llist_fun_bool_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun fun_app$g (A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ A_llist_a_llist_fun$ )A_llist_a_llist_fun_bool_fun$ )
(declare-fun monotone$ (A_llist_a_llist_fun_a_llist_a_llist_fun_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun_a_llist_fun$ )Bool )
(declare-fun case_llist$ (A_llist$ )A_a_llist_a_llist_fun_fun_a_llist_a_llist_fun_fun$ )
(assert (! (forall ((?v0 A_llist_a_llist_fun$ ))(! (= (fun_app$ uua$ ?v0 )(fun_app$a (fun_app$b (case_llist$ lNil$ )(uu$ ?v0 ))xs$ )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$a (fun_app$c (uu$ ?v0 )?v1 )?v2 )(ite (p$ ?v1 )(lCons$ ?v1 (fun_app$a ?v0 ?v2 ))lNil$ )):pattern ((fun_app$a (fun_app$c (uu$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (not (monotone$ (fun_ord$ lprefix$ )lprefix$ uua$ )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$d (fun_app$e lprefix$ ?v0 )?v0 )):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$d (fun_app$e lprefix$ ?v0 )?v0 )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$d (fun_app$e lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$d (fun_app$e lprefix$ ?v1 )?v3 ))):pattern ((fun_app$d (fun_app$e lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$d (fun_app$e lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$d (fun_app$e lprefix$ lNil$ )?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist$ ))(= (fun_app$a (f$ ?v0 )?v1 )(fun_app$a (fun_app$b (case_llist$ lNil$ )(uu$ ?v0 ))?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(= (fun_app$d (fun_app$e lprefix$ ?v0 )(lCons$ ?v1 ?v2 ))(or (= ?v0 lNil$ )(exists ((?v3 A_llist$ ))(and (= ?v0 (lCons$ ?v1 ?v3 ))(fun_app$d (fun_app$e lprefix$ ?v3 )?v2 )))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (fun_app$d (fun_app$e lprefix$ ?v0 )?v1 )(or (exists ((?v2 A_llist$ ))(and (= ?v0 lNil$ )(= ?v1 ?v2 )))(exists ((?v2 A_llist$ )(?v3 A_llist$ )(?v4 A$ ))(and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 (lCons$ ?v4 ?v3 ))(fun_app$d (fun_app$e lprefix$ ?v2 )?v3 ))))))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$d (fun_app$e lprefix$ (lCons$ ?v0 ?v1 ))?v2 )(exists ((?v3 A_llist$ ))(and (= ?v2 (lCons$ ?v0 ?v3 ))(fun_app$d (fun_app$e lprefix$ ?v1 )?v3 ))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (= ?v0 lNil$ ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_a_llist_fun_fun$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$a (fun_app$b (case_llist$ ?v0 )?v1 )(lCons$ ?v2 ?v3 ))(fun_app$a (fun_app$c ?v1 ?v2 )?v3 )):pattern ((fun_app$a (fun_app$b (case_llist$ ?v0 )?v1 )(lCons$ ?v2 ?v3 ))))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_a_llist_fun_fun$ ))(! (= (fun_app$a (fun_app$b (case_llist$ ?v0 )?v1 )lNil$ )?v0 ):pattern ((fun_app$b (case_llist$ ?v0 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$d (fun_app$e lprefix$ (lCons$ ?v0 ?v1 ))lNil$ )false ):pattern ((lCons$ ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(forall ((?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))false )))false )):named a16 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun_a_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ )(?v3 A_llist_a_llist_fun_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_llist_a_llist_fun$ ))(= (fun_app$ ?v0 ?v5 )(ite (fun_app$f (fun_app$g (fun_ord$ lprefix$ )?v5 )?v1 )?v2 (fun_app$ ?v3 ?v5 ))))(and (forall ((?v5 A_llist_a_llist_fun$ )(?v6 A_llist_a_llist_fun$ ))(=> (and (fun_app$f (fun_app$g (fun_ord$ lprefix$ )?v5 )?v6 )(not (fun_app$f (fun_app$g (fun_ord$ lprefix$ )?v5 )?v1 )))(fun_app$d (fun_app$e ?v4 (fun_app$ ?v3 ?v5 ))(fun_app$ ?v3 ?v6 ))))(and (forall ((?v5 A_llist_a_llist_fun$ ))(=> (not (fun_app$f (fun_app$g (fun_ord$ lprefix$ )?v5 )?v1 ))(fun_app$d (fun_app$e ?v4 ?v2 )(fun_app$ ?v3 ?v5 ))))(fun_app$d (fun_app$e ?v4 ?v2 )?v2 ))))(monotone$ (fun_ord$ lprefix$ )?v4 ?v0 ))):named a17 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_a_llist_fun$ ))(=> (and (fun_app$f (fun_app$g (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$f (fun_app$g (fun_ord$ lprefix$ )?v1 )?v2 ))(fun_app$f (fun_app$g (fun_ord$ lprefix$ )?v0 )?v2 ))):named a18 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_a_llist_fun$ ))(=> (and (fun_app$f (fun_app$g (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$f (fun_app$g (fun_ord$ lprefix$ )?v1 )?v0 ))(= ?v0 ?v1 ))):named a19 ))
(check-sat )
;(get-unsat-core )
