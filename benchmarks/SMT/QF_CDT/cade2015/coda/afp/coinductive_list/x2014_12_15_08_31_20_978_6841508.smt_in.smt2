;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun a$ ()A$ )
(declare-fun m$ ()Nat$ )
(declare-fun p$ (A$ )Bool )
(declare-fun mb$ ()Nat$ )
(declare-fun nb$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(assert (! (not (= mb$ (suc$ nb$ ))):named a0 ))
(assert (! (= m$ nb$ ):named a1 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= mb$ (suc$ ?v0 ))false ))false ):named a2 ))
(assert (! (less_eq$ (suc$ nb$ )mb$ ):named a3 ))
(assert (! (= mb$ (suc$ m$ )):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (less_eq$ nb$ m$ ):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a9 ))
(assert (! (= (lnth$ xsa$ (suc$ nb$ ))a$ ):named a10 ))
(assert (! (= (lnth$ xsa$ mb$ )a$ ):named a11 ))
(assert (! (= (lnth$ xs$ nb$ )a$ ):named a12 ))
(assert (! (p$ a$ ):named a13 ))
(check-sat )
;(get-unsat-core )
