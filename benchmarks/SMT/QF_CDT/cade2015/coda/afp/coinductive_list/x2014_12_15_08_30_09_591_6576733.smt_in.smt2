;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun q$ ()A_bool_fun$ )
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun filter$ (A_bool_fun$ A_list$ )A_list$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfilter$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun monotone$ (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )true ):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (fun_app$a (lfilter$ p$ )ys$ )(fun_app$a (lfilter$ q$ )ys$ ))):named a1 ))
(assert (! (= xs$ ys$ ):named a2 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 (lset$ ys$ ))(= (fun_app$ p$ ?v0 )(fun_app$ q$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$a (lfilter$ ?v0 )(fun_app$a (lfilter$ ?v0 )?v1 ))(fun_app$a (lfilter$ ?v0 )?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$a (lfilter$ ?v0 )lNil$ )lNil$ ):pattern ((lfilter$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$a (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))(ite (fun_app$ ?v0 ?v1 )(lCons$ ?v1 (fun_app$a (lfilter$ ?v0 )?v2 ))(fun_app$a (lfilter$ ?v0 )?v2 ))):pattern ((fun_app$a (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (=> (not (fun_app$ ?v0 ?v1 ))(= (fun_app$a (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))(fun_app$a (lfilter$ ?v0 )?v2 ))):pattern ((fun_app$a (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (=> (fun_app$ ?v0 ?v1 )(= (fun_app$a (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v1 (fun_app$a (lfilter$ ?v0 )?v2 )))):pattern ((fun_app$a (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (lfinite$ ?v0 )(lfinite$ (fun_app$a (lfilter$ ?v1 )?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(! (=> (forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v0 ))(not (fun_app$ ?v1 ?v2 ))))(= (fun_app$a (lfilter$ ?v1 )?v0 )lNil$ )):pattern ((fun_app$a (lfilter$ ?v1 )?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$a (lfilter$ ?v0 )?v1 ))(forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v1 ))(not (fun_app$ ?v0 ?v2 )))))):named a11 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (fun_app$a (lfilter$ ?v0 )?v1 )lNil$ )(forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v1 ))(not (fun_app$ ?v0 ?v2 )))))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_list$ ))(= (fun_app$a (lfilter$ ?v0 )(llist_of$ ?v1 ))(llist_of$ (filter$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (lfinite$ ?v0 )(= (fun_app$a (lfilter$ ?v1 )(lappend$ ?v0 ?v2 ))(lappend$ (fun_app$a (lfilter$ ?v1 )?v0 )(fun_app$a (lfilter$ ?v1 )?v2 ))))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$a (lfilter$ uu$ )?v0 )?v0 )):named a15 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(monotone$ lprefix$ lprefix$ (lfilter$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v0 )):named a17 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v0 )):named a18 ))
(check-sat )
;(get-unsat-core )
