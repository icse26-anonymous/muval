;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_a_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun insert$ (A$ A_set$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_llist_bool_fun_fun$ A$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(assert (! (not (= (lset$ (lCons$ x$ xs$ ))(insert$ x$ (lset$ xs$ )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lset$ (lCons$ ?v0 ?v1 ))(insert$ ?v0 (lset$ ?v1 ))):pattern ((lCons$ ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_a_llist_bool_fun_fun$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v3 A$ )(?v4 A_llist$ ))(fun_app$ (fun_app$a ?v2 ?v3 )(lCons$ ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_llist$ )(?v5 A$ ))(=> (and (member$ ?v5 (lset$ ?v4 ))(fun_app$ (fun_app$a ?v2 ?v5 )?v4 ))(fun_app$ (fun_app$a ?v2 ?v5 )(lCons$ ?v3 ?v4 ))))))(fun_app$ (fun_app$a ?v2 ?v0 )?v1 ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v2 A_llist$ ))(=> (= ?v1 (lCons$ ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v1 (lCons$ ?v2 ?v3 ))(member$ ?v0 (lset$ ?v3 )))false ))))false )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ ))(=> (member$ ?v0 (lset$ ?v1 ))(member$ ?v0 (lset$ (lCons$ ?v2 ?v1 ))))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(member$ ?v0 (lset$ (lCons$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_set$ ))(= (member$ ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$ ?v2 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_set$ ))(= (insert$ ?v0 (insert$ ?v1 ?v2 ))(insert$ ?v1 (insert$ ?v0 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_set$ ))(=> (and (member$ ?v0 (insert$ ?v1 ?v2 ))(and (=> (= ?v0 ?v1 )false )(=> (member$ ?v0 ?v2 )false )))false )):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ ))(=> (and (member$ ?v0 ?v1 )(forall ((?v2 A_set$ ))(=> (and (= ?v1 (insert$ ?v0 ?v2 ))(not (member$ ?v0 ?v2 )))false )))false )):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ ))(! (=> (member$ ?v0 ?v1 )(= (insert$ ?v0 ?v1 )?v1 )):pattern ((insert$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A$ ))(=> (member$ ?v0 ?v1 )(member$ ?v0 (insert$ ?v2 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ ))(=> (member$ ?v0 ?v1 )(exists ((?v2 A_set$ ))(and (= ?v1 (insert$ ?v0 ?v2 ))(not (member$ ?v0 ?v2 )))))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A$ )(?v3 A_set$ ))(=> (and (not (member$ ?v0 ?v1 ))(not (member$ ?v2 ?v3 )))(= (= (insert$ ?v0 ?v1 )(insert$ ?v2 ?v3 ))(ite (= ?v0 ?v2 )(= ?v1 ?v3 )(exists ((?v4 A_set$ ))(and (= ?v1 (insert$ ?v2 ?v4 ))(and (not (member$ ?v2 ?v4 ))(and (= ?v3 (insert$ ?v0 ?v4 ))(not (member$ ?v0 ?v4 )))))))))):named a17 ))
(check-sat )
;(get-unsat-core )
