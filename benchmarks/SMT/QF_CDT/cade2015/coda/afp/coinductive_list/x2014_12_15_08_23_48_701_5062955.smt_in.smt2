;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun len$ ()Nat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (Enat_bool_fun$ Enat$ )Bool )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun the_enat$ (Enat$ )Nat$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )true ):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not false ):named a1 ))
(assert (! (fun_app$ p$ (lnth$ xs$ len$ )):named a2 ))
(assert (! (fun_app$a (less$ (enat$ len$ ))(llength$ xs$ )):named a3 ))
(assert (! (= (llength$ (ltakeWhile$ p$ xs$ ))(enat$ len$ )):named a4 ))
(assert (! (fun_app$a (less$ (llength$ (ltakeWhile$ p$ xs$ )))(llength$ xs$ )):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ltakeWhile$ uu$ ?v0 )?v0 )):named a6 ))
(assert (! (= (llength$ (ltakeWhile$ p$ xs$ ))(enat$ len$ )):named a7 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= (llength$ (ltakeWhile$ p$ xs$ ))(enat$ ?v0 ))false ))false ):named a8 ))
(assert (! (fun_app$ p$ (lnth$ xs$ (the_enat$ (llength$ (ltakeWhile$ p$ xs$ ))))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (llength$ (ltakeWhile$ ?v0 ?v1 ))(llength$ ?v1 ))(= (ltakeWhile$ ?v0 ?v1 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (fun_app$a (less$ (enat$ ?v0 ))(llength$ (ltakeWhile$ ?v1 ?v2 )))(= (lnth$ (ltakeWhile$ ?v1 ?v2 )?v0 )(lnth$ ?v2 ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (fun_app$a (less$ ?v0 )(enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (fun_app$a (less$ (enat$ ?v0 ))(llength$ ?v1 ))(= (lnth$ (lmap$ ?v2 ?v1 )?v0 )(fun_app$b ?v2 (lnth$ ?v1 ?v0 ))))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 Nat$ ))(=> (and (lprefix$ ?v0 ?v1 )(fun_app$a (less$ (enat$ ?v2 ))(llength$ ?v0 )))(= (lnth$ ?v0 ?v2 )(lnth$ ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(exists ((?v2 Nat$ ))(and (fun_app$a (less$ (enat$ ?v2 ))(llength$ ?v1 ))(= (lnth$ ?v1 ?v2 )?v0 ))))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$a (less$ (enat$ ?v0 ))(llength$ ?v1 ))(= (lnth$ (lappend$ ?v1 ?v2 )?v0 )(lnth$ ?v1 ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$a (less$ ?v3 )?v2 )(fun_app$a ?v0 ?v3 )))(fun_app$a ?v0 ?v2 )))(fun_app$a ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(fun_app$a (less$ (llength$ ?v0 ))(llength$ ?v1 )))):named a19 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$a (less$ ?v0 )?v1 )(fun_app$a (less$ ?v1 )?v0 )))):named a20 ))
(check-sat )
;(get-unsat-core )
