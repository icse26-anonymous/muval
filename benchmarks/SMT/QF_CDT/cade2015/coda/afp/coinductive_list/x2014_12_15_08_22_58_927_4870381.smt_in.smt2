;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun p$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun zero$ ()Nat$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ ()A_llist_enat_fun$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun ltakeWhile$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun gen_llength$ (Nat$ )A_llist_enat_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (not (= (= (fun_app$ llength$ (fun_app$a (ltakeWhile$ p$ )xs$ ))(fun_app$ llength$ xs$ ))(= (fun_app$a (ltakeWhile$ p$ )xs$ )xs$ ))):named a0 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(less_eq$ (fun_app$ llength$ (fun_app$a (ltakeWhile$ ?v0 )?v1 ))(fun_app$ llength$ ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (llcp$ ?v0 )?v0 )(fun_app$ llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$a (ltakeWhile$ ?v0 )lNil$ )lNil$ ):pattern ((ltakeWhile$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (fun_app$ llength$ (lmap$ ?v0 ?v1 ))(fun_app$ llength$ ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(lprefix$ (fun_app$a (ltakeWhile$ ?v0 )?v1 )?v1 )):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(= (fun_app$ llength$ ?v0 )(fun_app$ llength$ ?v1 )))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(! (=> (forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v0 ))(fun_app$b ?v1 ?v2 )))(= (fun_app$a (ltakeWhile$ ?v1 )?v0 )?v0 )):pattern ((fun_app$a (ltakeWhile$ ?v1 )?v0 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (fun_app$a (ltakeWhile$ ?v1 )?v2 )))(and (member$ ?v0 (lset$ ?v2 ))(fun_app$b ?v1 ?v0 )))):named a8 ))
(assert (! (= llength$ (gen_llength$ zero$ )):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (lprefix$ ?v0 ?v1 )(= (fun_app$ (llcp$ ?v1 )?v0 )(fun_app$ llength$ ?v0 ))):pattern ((fun_app$ (llcp$ ?v1 )?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (lprefix$ ?v0 ?v1 )(= (fun_app$ (llcp$ ?v0 )?v1 )(fun_app$ llength$ ?v0 ))):pattern ((fun_app$ (llcp$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(less$ (fun_app$ llength$ ?v0 )(fun_app$ llength$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$ lNil$ ?v0 )true ):pattern ((lprefix$ lNil$ ?v0 )))):named a15 ))
(assert (! (= (lstrict_prefix$ lNil$ lNil$ )false ):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= (lmap$ ?v0 ?v1 )lNil$ )(= ?v1 lNil$ ))):named a17 ))
(check-sat )
;(get-unsat-core )
