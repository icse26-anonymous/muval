;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort B_llist_set$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun$ 0 )
(declare-sort B_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_llist_b_llist_prod_set$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_llist_prod_bool_fun$ 0 )
(declare-sort A_llist_a_llist_b_llist_prod_fun$ 0 )
(declare-sort A_llist_b_llist_prod_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_prod_b_llist_fun$ 0 )
(declare-sort B_llist_a_llist_b_llist_prod_fun$ 0 )
(declare-sort A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ 0 )
(declare-sort A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-sort A_llist_b_llist_prod$ 0)
(declare-fun fst$ (A_llist_b_llist_prod$)A_llist$)
(declare-fun snd$ (A_llist_b_llist_prod$)B_llist$)
(declare-fun pair$ (A_llist$ B_llist$ )A_llist_b_llist_prod$)
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun y$ ()A_llist_b_llist_prod_set$ )
(declare-fun uu$ ()A_llist_b_llist_prod_a_llist_fun$ )
(declare-fun uua$ ()A_llist_b_llist_prod_b_llist_fun$ )
(declare-fun uub$ ()A_llist_a_llist_fun$ )
(declare-fun uuc$ ()A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ )
(declare-fun uud$ (Bool A_llist_b_llist_bool_fun_fun$ )A_llist_b_llist_bool_fun_fun$ )
(declare-fun lSup$ (A_llist_set$ )A_llist$ )
(declare-fun chain$ (A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ A_llist_b_llist_prod_set$ )Bool )
(declare-fun image$ (A_llist_b_llist_prod_a_llist_fun$ A_llist_b_llist_prod_set$ )A_llist_set$ )
(declare-fun lSup$a (B_llist_set$ )B_llist$ )
(declare-fun image$a (A_llist_b_llist_prod_b_llist_fun$ A_llist_b_llist_prod_set$ )B_llist_set$ )
(declare-fun image$b (B_llist_a_llist_b_llist_prod_fun$ B_llist_set$ )A_llist_b_llist_prod_set$ )
(declare-fun image$c (B_llist_b_llist_fun$ B_llist_set$ )B_llist_set$ )
(declare-fun image$d (B_llist_a_llist_fun$ B_llist_set$ )A_llist_set$ )
(declare-fun image$e (A_llist_a_llist_b_llist_prod_fun$ A_llist_set$ )A_llist_b_llist_prod_set$ )
(declare-fun image$f (A_llist_b_llist_fun$ A_llist_set$ )B_llist_set$ )
(declare-fun image$g (A_llist_a_llist_fun$ A_llist_set$ )A_llist_set$ )
(declare-fun image$h (A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ A_llist_b_llist_prod_set$ )A_llist_b_llist_prod_set$ )
(declare-fun member$ (A_llist_b_llist_prod$ A_llist_b_llist_prod_set$ )Bool )
(declare-fun collect$ (A_llist_b_llist_prod_bool_fun$ )A_llist_b_llist_prod_set$ )
(declare-fun fun_app$ (A_llist_b_llist_prod_b_llist_fun$ A_llist_b_llist_prod$ )B_llist$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun member$a (B_llist$ B_llist_set$ )Bool )
(declare-fun member$b (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$a (A_llist_b_llist_prod_a_llist_fun$ A_llist_b_llist_prod$ )A_llist$ )
(declare-fun fun_app$b (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$c (A_llist_b_llist_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$d (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$e (A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ A_llist_b_llist_prod$ )A_llist_b_llist_prod$ )
(declare-fun fun_app$f (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$g (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$h (A_llist_b_llist_prod_bool_fun$ A_llist_b_llist_prod$ )Bool )
(declare-fun fun_app$i (B_llist_a_llist_b_llist_prod_fun$ B_llist$ )A_llist_b_llist_prod$ )
(declare-fun fun_app$j (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$k (B_llist_a_llist_fun$ B_llist$ )A_llist$ )
(declare-fun fun_app$l (A_llist_a_llist_b_llist_prod_fun$ A_llist$ )A_llist_b_llist_prod$ )
(declare-fun fun_app$m (A_llist_b_llist_fun$ A_llist$ )B_llist$ )
(declare-fun fun_app$n (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$o (B_llist_a_llist_bool_fun_fun$ B_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$p (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$q (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$r (A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ A_llist_b_llist_prod$ )A_llist_b_llist_prod_bool_fun$ )
(declare-fun lprefix$a ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun rel_prod$ (A_llist_a_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ )A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ )
(declare-fun case_prod$ (A_llist_b_llist_bool_fun_fun$ )A_llist_b_llist_prod_bool_fun$ )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ )A_llist_b_llist_bool_fun_fun$ )
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(! (= (fun_app$ uua$ ?v0 )(snd$ ?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(! (= (fun_app$a uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$a uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_llist_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B_llist$ ))(! (= (fun_app$b (fun_app$c (uud$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (uud$ ?v0 ?v1 )?v2 )?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$d uub$ ?v0 )?v0 ):pattern ((fun_app$d uub$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(! (= (fun_app$e uuc$ ?v0 )?v0 ):pattern ((fun_app$e uuc$ ?v0 )))):named a4 ))
(assert (! (not (fun_app$b (fun_app$c (llist_all2$ p$ )(lSup$ (image$ uu$ y$ )))(lSup$a (image$a uua$ y$ )))):named a5 ))
(assert (! (chain$ (rel_prod$ lprefix$ lprefix$a )y$ ):named a6 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$ ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 B$ ))(=> (fun_app$f (fun_app$g ?v0 ?v4 )?v5 )(fun_app$f (fun_app$g ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$c (llist_all2$ ?v3 )?v1 )?v2 ))):named a7 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(=> (member$ ?v0 y$ )(fun_app$h (case_prod$ (llist_all2$ p$ ))?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 B_llist_a_llist_b_llist_prod_fun$ )(?v2 B_llist$ )(?v3 B_llist_set$ ))(=> (and (= ?v0 (fun_app$i ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$b ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist_b_llist_fun$ )(?v2 B_llist$ )(?v3 B_llist_set$ ))(=> (and (= ?v0 (fun_app$j ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (image$c ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist$ )(?v3 B_llist_set$ ))(=> (and (= ?v0 (fun_app$k ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$b ?v0 (image$d ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_a_llist_b_llist_prod_fun$ )(?v2 A_llist$ )(?v3 A_llist_set$ ))(=> (and (= ?v0 (fun_app$l ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$ ?v0 (image$e ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist_b_llist_fun$ )(?v2 A_llist$ )(?v3 A_llist_set$ ))(=> (and (= ?v0 (fun_app$m ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$a ?v0 (image$f ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ )(?v3 A_llist_set$ ))(=> (and (= ?v0 (fun_app$d ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$b ?v0 (image$g ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_b_llist_prod_a_llist_fun$ )(?v2 A_llist_b_llist_prod$ )(?v3 A_llist_b_llist_prod_set$ ))(=> (and (= ?v0 (fun_app$a ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$b ?v0 (image$ ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist_b_llist_prod_b_llist_fun$ )(?v2 A_llist_b_llist_prod$ )(?v3 A_llist_b_llist_prod_set$ ))(=> (and (= ?v0 (fun_app$ ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$a ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_b_llist_prod_a_llist_b_llist_prod_fun$ )(?v2 A_llist_b_llist_prod$ )(?v3 A_llist_b_llist_prod_set$ ))(=> (and (= ?v0 (fun_app$e ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$h ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_b_llist_prod$ ))(= (= ?v0 ?v1 )(and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 ))))):named a18 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_b_llist_prod$ ))(=> (and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 )))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_b_llist_prod$ ))(=> (and (= (fst$ ?v0 )(fst$ ?v1 ))(= (snd$ ?v0 )(snd$ ?v1 )))(= ?v0 ?v1 ))):named a20 ))
(assert (! (forall ((?v0 B_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_b_llist_prod$ ))(=> (and (fun_app$n (fun_app$o ?v0 (snd$ ?v1 ))(fst$ ?v1 ))(forall ((?v2 A_llist$ )(?v3 B_llist$ ))(=> (fun_app$n (fun_app$o ?v0 ?v3 )?v2 )false )))false )):named a21 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$n (fun_app$p lprefix$ ?v0 )?v0 )):named a22 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$b (fun_app$q lprefix$a ?v0 )?v0 )):named a23 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$n (fun_app$p lprefix$ ?v0 )?v0 )):named a24 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$b (fun_app$q lprefix$a ?v0 )?v0 )):named a25 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 A_llist_b_llist_prod$ )(?v3 A_llist_b_llist_prod$ ))(! (= (fun_app$h (fun_app$r (rel_prod$ ?v0 ?v1 )?v2 )?v3 )(and (fun_app$n (fun_app$p ?v0 (fst$ ?v2 ))(fst$ ?v3 ))(fun_app$b (fun_app$q ?v1 (snd$ ?v2 ))(snd$ ?v3 )))):pattern ((fun_app$h (fun_app$r (rel_prod$ ?v0 ?v1 )?v2 )?v3 )))):named a26 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ )(?v1 A_llist_b_llist_bool_fun_fun$ ))(=> (member$ ?v0 (collect$ (case_prod$ ?v1 )))(fun_app$b (fun_app$c ?v1 (fst$ ?v0 ))(snd$ ?v0 )))):named a27 ))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$ )(?v1 A_llist_b_llist_prod$ ))(! (= (fun_app$h (case_prod$ ?v0 )?v1 )(fun_app$b (fun_app$c ?v0 (fst$ ?v1 ))(snd$ ?v1 ))):pattern ((fun_app$h (case_prod$ ?v0 )?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_llist_b_llist_bool_fun_fun$ )(?v1 A_llist_b_llist_prod$ ))(! (= (fun_app$h (case_prod$ ?v0 )?v1 )(fun_app$b (fun_app$c ?v0 (fst$ ?v1 ))(snd$ ?v1 ))):pattern ((fun_app$h (case_prod$ ?v0 )?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (image$g uub$ ?v0 )?v0 )):named a30 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod_set$ ))(= (image$h uuc$ ?v0 )?v0 )):named a31 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_llist_bool_fun_fun$ )(?v2 A_llist_b_llist_prod$ ))(= (fun_app$h (case_prod$ (uud$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$h (case_prod$ ?v1 )?v2 )))):named a32 ))
(check-sat )
;(get-unsat-core )
