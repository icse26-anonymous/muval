;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_list_nat_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun xs$ ()A_list$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun size$ ()A_list_nat_fun$ )
(declare-fun fun_app$ (A_list_nat_fun$ A_list$ )Nat$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun rotate1$ (A_list$ )A_list$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun the_enat$ (Enat$ )Nat$ )
(declare-fun is_measure$ (A_list_nat_fun$ )Bool )
(assert (! (not (= (llength$ (llist_of$ xs$ ))(enat$ (fun_app$ size$ xs$ )))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (fun_app$ size$ ?v0 )(fun_app$ size$ ?v1 )))(= (= ?v0 ?v1 )false ))):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 A_list$ ))(= (fun_app$ size$ ?v1 )?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (not (= (fun_app$ size$ ?v0 )(fun_app$ size$ ?v1 )))(not (= ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (llength$ (lmap$ ?v0 ?v1 ))(llength$ ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (the_enat$ (enat$ ?v0 ))?v0 ):pattern ((enat$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_list$ ))(= (fun_app$ size$ (rotate1$ ?v0 ))(fun_app$ size$ ?v0 ))):named a10 ))
(assert (! (is_measure$ size$ ):named a11 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(= (llist_of$ (list_of$ ?v0 ))?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_list_nat_fun$ ))(! (= (is_measure$ ?v0 )(exists ((?v1 A_list_nat_fun$ ))(= ?v0 ?v1 ))):pattern ((is_measure$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_list_nat_fun$ ))(=> (and (is_measure$ ?v0 )(forall ((?v1 A_list_nat_fun$ ))(=> (= ?v0 ?v1 )false )))false )):named a15 ))
(check-sat )
;(get-unsat-core )
