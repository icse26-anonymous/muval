;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Nat$ )
(declare-fun n$a ()Enat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun zero$ ()Enat$ )
(declare-fun ldrop$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun infinity$ ()Enat$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun the_enat$ (Enat$ )Nat$ )
(assert (! (not (= (lhd$ (fun_app$ (ldrop$ (enat$ n$ ))xs$ ))(lnth$ xs$ (the_enat$ (enat$ n$ ))))):named a0 ))
(assert (! (= n$a (enat$ n$ )):named a1 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= n$a (enat$ ?v0 ))false ))false ):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (the_enat$ (enat$ ?v0 ))?v0 ):pattern ((enat$ ?v0 )))):named a4 ))
(assert (! (less$ n$a (llength$ xs$ )):named a5 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (lhd$ (iterates$ ?v0 ?v1 ))?v1 )):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(! (= (fun_app$ (ldrop$ (enat$ ?v0 ))?v1 )(ldropn$ ?v0 ?v1 )):pattern ((fun_app$ (ldrop$ (enat$ ?v0 ))?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$ (ldrop$ zero$ )?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 Enat$ ))(=> (not (= ?v0 infinity$ ))(= (enat$ (the_enat$ ?v0 ))?v0 ))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(fun_app$ (ldrop$ ?v1 )?v2 ))(fun_app$ (ldrop$ (plus$ ?v0 ?v1 ))?v2 ))):named a10 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ldrop$ ?v0 )lNil$ )lNil$ ):pattern ((ldrop$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ ))(= (forall ((?v1 Nat$ ))(not (= ?v0 (enat$ ?v1 ))))(= ?v0 infinity$ ))):named a12 ))
(assert (! (forall ((?v0 Enat$ ))(= (not (= ?v0 infinity$ ))(exists ((?v1 Nat$ ))(= ?v0 (enat$ ?v1 ))))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ )(?v2 Enat$ ))(= (= (plus$ ?v0 (enat$ ?v1 ))(plus$ ?v2 (enat$ ?v1 )))(= ?v0 ?v2 ))):named a14 ))
(check-sat )
;(get-unsat-core )
