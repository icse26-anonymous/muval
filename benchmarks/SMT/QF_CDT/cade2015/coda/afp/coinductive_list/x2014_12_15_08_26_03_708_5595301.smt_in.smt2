;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Enat$ )
(declare-fun n$a ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun n_a$ ()Nat$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun zero$ ()Enat$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun llast$ (A_llist$ )A$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(assert (! (not (= (llast$ (ldrop$ (enat$ (suc$ n_a$ ))xsa$ ))(llast$ xsa$ ))):named a0 ))
(assert (! (= n$ (enat$ n$a )):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (less$ (enat$ n_a$ )(llength$ ?v0 ))(= (llast$ (ldrop$ (enat$ n_a$ )?v0 ))(llast$ ?v0 )))):named a2 ))
(assert (! (less$ (enat$ (suc$ n_a$ ))(llength$ xsa$ )):named a3 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= n$ (enat$ ?v0 ))false ))false ):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (less$ n$ (llength$ xs$ )):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(! (= (ldrop$ (enat$ ?v0 )?v1 )(ldropn$ ?v0 ?v1 )):pattern ((ldrop$ (enat$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ldrop$ zero$ ?v0 )?v0 )):named a13 ))
(assert (! (forall ((?v0 Enat$ ))(= (less$ zero$ ?v0 )(not (= ?v0 zero$ )))):named a14 ))
(check-sat )
;(get-unsat-core )
