;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_a_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun b$ ()B$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lhd$a ()B_a_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun ltl$a ()B_b_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (B_bool_fun$ B$ )Bool )
(declare-fun iS_LNIL$ ()B_bool_fun$ )
(declare-fun fun_app$a (B_a_fun$ B$ )A$ )
(declare-fun fun_app$b (B_b_fun$ B$ )B$ )
(declare-fun fun_app$c (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$e (A_a_llist_bool_fun_fun$ A$ )A_llist_bool_fun$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun unfold_llist$ (B_bool_fun$ B_a_fun$ B_b_fun$ B$ )A_llist$ )
(assert (! (not (= (= (unfold_llist$ iS_LNIL$ lhd$a ltl$a b$ )(lCons$ x$ xs$ ))(and (not (fun_app$ iS_LNIL$ b$ ))(and (= x$ (fun_app$a lhd$a b$ ))(= xs$ (unfold_llist$ iS_LNIL$ lhd$a ltl$a (fun_app$b ltl$a b$ ))))))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (unfold_llist$ ?v0 ?v2 ?v3 ?v1 )(lCons$ (fun_app$a ?v2 ?v1 )(unfold_llist$ ?v0 ?v2 ?v3 (fun_app$b ?v3 ?v1 )))))):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))(and (fun_app$c ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (unfold_llist$ ?v0 ?v1 ?v2 ?v3 )(ite (fun_app$ ?v0 ?v3 )lNil$ (lCons$ (fun_app$a ?v1 ?v3 )(unfold_llist$ ?v0 ?v1 ?v2 (fun_app$b ?v2 ?v3 )))))):named a4 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (not (lnull$ (unfold_llist$ ?v0 ?v1 ?v2 ?v3 )))(not (fun_app$ ?v0 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ )(?v3 B$ ))(= (lnull$ (unfold_llist$ ?v0 ?v1 ?v2 ?v3 ))(fun_app$ ?v0 ?v3 ))):named a6 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (not (fun_app$ ?v0 ?v1 ))(= (lhd$ (unfold_llist$ ?v0 ?v2 ?v3 ?v1 ))(fun_app$a ?v2 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(! (=> (fun_app$ ?v0 ?v1 )(= (unfold_llist$ ?v0 ?v2 ?v3 ?v1 )lNil$ )):pattern ((unfold_llist$ ?v0 ?v2 ?v3 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_a_llist_bool_fun_fun$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v3 A$ )(?v4 A_llist$ ))(fun_app$d (fun_app$e ?v2 ?v3 )(lCons$ ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_llist$ )(?v5 A$ ))(=> (and (member$ ?v5 (lset$ ?v4 ))(fun_app$d (fun_app$e ?v2 ?v5 )?v4 ))(fun_app$d (fun_app$e ?v2 ?v5 )(lCons$ ?v3 ?v4 ))))))(fun_app$d (fun_app$e ?v2 ?v0 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v2 A_llist$ ))(=> (= ?v1 (lCons$ ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v1 (lCons$ ?v2 ?v3 ))(member$ ?v0 (lset$ ?v3 )))false ))))false )):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ ))(=> (member$ ?v0 (lset$ ?v1 ))(member$ ?v0 (lset$ (lCons$ ?v2 ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(member$ ?v0 (lset$ (lCons$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lnull$ ?v0 )(= ?v0 lNil$ )):pattern ((lnull$ ?v0 )))):named a13 ))
(check-sat )
;(get-unsat-core )
