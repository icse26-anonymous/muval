;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort B_llist_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_b_llist_prod_set$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_llist_prod_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_prod_b_llist_fun$ 0 )
(declare-sort A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-sort A_llist_b_llist_prod$ 0)
(declare-fun fst$ (A_llist_b_llist_prod$)A_llist$)
(declare-fun snd$ (A_llist_b_llist_prod$)B_llist$)
(declare-fun pair$ (A_llist$ B_llist$ )A_llist_b_llist_prod$)
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun uu$ ()A_llist_b_llist_prod_a_llist_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ya$ ()A_llist_b_llist_prod_set$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun uua$ ()A_llist_b_llist_prod_b_llist_fun$ )
(declare-fun uub$ ()B_b_bool_fun_fun$ )
(declare-fun uuc$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun uud$ ()A_a_bool_fun_fun$ )
(declare-fun uue$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun lSup$ (A_llist_set$ )A_llist$ )
(declare-fun chain$ (A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ A_llist_b_llist_prod_set$ )Bool )
(declare-fun image$ (A_llist_b_llist_prod_a_llist_fun$ A_llist_b_llist_prod_set$ )A_llist_set$ )
(declare-fun lSup$a (B_llist_set$ )B_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun image$a (A_llist_b_llist_prod_b_llist_fun$ A_llist_b_llist_prod_set$ )B_llist_set$ )
(declare-fun lnull$a (B_llist$ )Bool )
(declare-fun member$ (A_llist_b_llist_prod$ A_llist_b_llist_prod_set$ )Bool )
(declare-fun fun_app$ (A_llist_b_llist_prod_b_llist_fun$ A_llist_b_llist_prod$ )B_llist$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_b_llist_prod_a_llist_fun$ A_llist_b_llist_prod$ )A_llist$ )
(declare-fun fun_app$b (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$c (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$e (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$f (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$g (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$h (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$i (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$j (A_llist_b_llist_bool_fun_fun$ A_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$k (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$l (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun lprefix$a ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun rel_prod$ (A_llist_a_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ )A_llist_b_llist_prod_a_llist_b_llist_prod_bool_fun_fun$ )
(declare-fun case_prod$ (A_llist_b_llist_bool_fun_fun$ A_llist_b_llist_prod$ )Bool )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ )A_llist_b_llist_bool_fun_fun$ )
(declare-fun llist_all2$a (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun llist_all2$c (B_a_bool_fun_fun$ B_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(! (= (fun_app$ uua$ ?v0 )(snd$ ?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(! (= (fun_app$a uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$a uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$b (fun_app$c uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uuc$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$d (fun_app$e uue$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uue$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$f (fun_app$g uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uub$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$h (fun_app$i uud$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$h (fun_app$i uud$ ?v0 )?v1 )))):named a5 ))
(assert (! (not (fun_app$b (fun_app$j (llist_all2$ p$ )xs$ )ys$ )):named a6 ))
(assert (! (member$ (pair$ xs$ ys$ )ya$ ):named a7 ))
(assert (! (chain$ (rel_prod$ lprefix$ lprefix$a )ya$ ):named a8 ))
(assert (! (not (lnull$ (lSup$ (image$ uu$ ya$ )))):named a9 ))
(assert (! (not (lnull$a (lSup$a (image$a uua$ ya$ )))):named a10 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(=> (member$ ?v0 ya$ )(case_prod$ (llist_all2$ p$ )?v0 ))):named a11 ))
(assert (! (= (llist_all2$a uub$ )uuc$ ):named a12 ))
(assert (! (= (llist_all2$b uud$ )uue$ ):named a13 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 B$ ))(=> (fun_app$f (fun_app$g ?v0 ?v4 )?v5 )(fun_app$f (fun_app$g ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$c (llist_all2$a ?v3 )?v1 )?v2 ))):named a14 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (llist_all2$c ?v0 ?v1 ?v2 )(forall ((?v4 B$ )(?v5 A$ ))(=> (fun_app$h (fun_app$k ?v0 ?v4 )?v5 )(fun_app$h (fun_app$k ?v3 ?v4 )?v5 ))))(llist_all2$c ?v3 ?v1 ?v2 ))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$e (llist_all2$b ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (fun_app$h (fun_app$i ?v0 ?v4 )?v5 )(fun_app$h (fun_app$i ?v3 ?v4 )?v5 ))))(fun_app$d (fun_app$e (llist_all2$b ?v3 )?v1 )?v2 ))):named a16 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$j (llist_all2$ ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 B$ ))(=> (fun_app$f (fun_app$l ?v0 ?v4 )?v5 )(fun_app$f (fun_app$l ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$j (llist_all2$ ?v3 )?v1 )?v2 ))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a19 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$d (fun_app$e (llist_all2$b ?v0 )?v1 )?v2 )(= (lnull$ ?v1 )(lnull$ ?v2 )))):named a20 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (llist_all2$c ?v0 ?v1 ?v2 )(= (lnull$a ?v1 )(lnull$ ?v2 )))):named a21 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (fun_app$b (fun_app$c (llist_all2$a ?v0 )?v1 )?v2 )(= (lnull$a ?v1 )(lnull$a ?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (fun_app$b (fun_app$j (llist_all2$ ?v0 )?v1 )?v2 )(= (lnull$ ?v1 )(lnull$a ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$d (fun_app$e lprefix$ ?v0 )?v0 )):named a24 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$b (fun_app$c lprefix$a ?v0 )?v0 )):named a25 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$d (fun_app$e lprefix$ ?v0 )?v0 )):named a26 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$b (fun_app$c lprefix$a ?v0 )?v0 )):named a27 ))
(assert (! (forall ((?v0 A_llist_b_llist_prod$ ))(=> (forall ((?v1 A_llist$ )(?v2 B_llist$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a28 ))
(check-sat )
;(get-unsat-core )
