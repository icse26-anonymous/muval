;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Nat_a_llist_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun uu$ ()Nat_a_llist_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lsetp$ (A_llist$ )A_bool_fun$ )
(declare-fun ldropn$ (Nat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$ )A_llist$ )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun case_nat$ (A_llist$ Nat_a_llist_fun$ Nat$ )A_llist$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$d (A_a_fun$ A$ )A$ )
(declare-fun fun_app$e (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$a (ldropn$ ?v0 )xs$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (fun_app$a (ldropn$ n$ )(lCons$ x$ xs$ ))(case_nat$ (lCons$ x$ xs$ )uu$ n$ ))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$c (lmember$ ?v0 )(lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(fun_app$c (lmember$ ?v0 )?v2 ))):pattern ((fun_app$c (lmember$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a4 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (iterates$ ?v0 ?v1 )(lCons$ ?v1 (iterates$ ?v0 (fun_app$d ?v0 ?v1 ))))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (ldropn$ zero$ )?v0 )?v0 ):pattern ((fun_app$a (ldropn$ zero$ )?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(= (fun_app$b (lsetp$ ?v0 )?v1 )(or (exists ((?v2 A$ )(?v3 A_llist$ ))(and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 )))(exists ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$b (lsetp$ ?v2 )?v3 ))))))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (and (fun_app$b (lsetp$ ?v0 )?v1 )(and (forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v0 (lCons$ ?v2 ?v3 ))(= ?v1 ?v2 ))false ))(forall ((?v2 A_llist$ )(?v3 A$ )(?v4 A$ ))(=> (and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 ?v3 )(fun_app$b (lsetp$ ?v2 )?v3 )))false ))))false )):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A$ ))(=> (fun_app$b (lsetp$ ?v0 )?v1 )(fun_app$b (lsetp$ (lCons$ ?v2 ?v0 ))?v1 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(fun_app$b (lsetp$ (lCons$ ?v0 ?v1 ))?v0 )):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (ldropn$ ?v0 )lNil$ )lNil$ ):pattern ((ldropn$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A$ ))(=> (llexord$ ?v0 ?v1 ?v2 )(llexord$ ?v0 (lCons$ ?v3 ?v1 )(lCons$ ?v3 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$b (fun_app$e ?v0 ?v1 )?v2 )(llexord$ ?v0 (lCons$ ?v1 ?v3 )(lCons$ ?v2 ?v4 )))):named a13 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$c (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$ ?v0 lNil$ ?v1 )):named a15 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_llist$ ?v0 lNil$ )):named a16 ))
(check-sat )
;(get-unsat-core )
