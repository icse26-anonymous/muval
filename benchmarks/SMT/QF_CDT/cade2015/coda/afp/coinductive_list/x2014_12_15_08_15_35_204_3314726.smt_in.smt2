;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort Enat_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort Enat_a_llist_a_llist_fun_fun$ 0 )
(declare-sort Enat_a_llist_prod_a_llist_fun$ 0 )
(declare-sort Enat_a_llist_prod_a_llist_fun_bool_fun$ 0 )
(declare-sort Enat_a_llist_prod_a_llist_fun_a_llist_fun$ 0 )
(declare-sort Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort Enat_a_llist_prod$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun fst$ (Enat_a_llist_prod$)Enat$)
(declare-fun snd$ (Enat_a_llist_prod$)A_llist$)
(declare-fun pair$ (Enat$ A_llist$ )Enat_a_llist_prod$)
(declare-fun f$ (Enat_a_llist_a_llist_fun_fun$ Enat$ )A_llist_a_llist_fun$ )
(declare-fun uu$ (Enat_a_llist_prod_a_llist_fun$ A$ A_llist$ )Enat_a_llist_fun$ )
(declare-fun nxs$ ()Enat_a_llist_prod$ )
(declare-fun uua$ (Enat_a_llist_prod_a_llist_fun$ Enat$ )A_a_llist_a_llist_fun_fun$ )
(declare-fun uub$ (Enat_a_llist_prod_a_llist_fun$ )Enat_a_llist_a_llist_fun_fun$ )
(declare-fun uuc$ ()Enat_a_llist_prod_a_llist_fun_a_llist_fun$ )
(declare-fun uud$ (Enat_a_llist_a_llist_fun_fun$ A$ A_llist$ )Enat_a_llist_fun$ )
(declare-fun uue$ (Enat_a_llist_a_llist_fun_fun$ Enat$ )A_a_llist_a_llist_fun_fun$ )
(declare-fun curry$ (Enat_a_llist_prod_a_llist_fun$ Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (Enat_a_llist_prod_a_llist_fun_a_llist_fun$ Enat_a_llist_prod_a_llist_fun$ )A_llist$ )
(declare-fun fun_ord$ (A_llist_a_llist_bool_fun_fun$ )Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_bool_fun_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (Enat_a_llist_prod_a_llist_fun$ Enat_a_llist_prod$ )A_llist$ )
(declare-fun fun_app$b (Enat_a_llist_a_llist_fun_fun$ Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$c (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$d (A_a_llist_a_llist_fun_fun$ A$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$e (Enat_a_llist_fun$ Enat$ )A_llist$ )
(declare-fun fun_app$f (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$g (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$h (Enat_a_llist_prod_a_llist_fun_bool_fun$ Enat_a_llist_prod_a_llist_fun$ )Bool )
(declare-fun fun_app$i (Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_bool_fun_fun$ Enat_a_llist_prod_a_llist_fun$ )Enat_a_llist_prod_a_llist_fun_bool_fun$ )
(declare-fun monotone$ (Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ Enat_a_llist_prod_a_llist_fun_a_llist_fun$ )Bool )
(declare-fun case_enat$ (A_llist$ Enat_a_llist_fun$ Enat$ )A_llist$ )
(declare-fun case_prod$ (Enat_a_llist_a_llist_fun_fun$ )Enat_a_llist_prod_a_llist_fun$ )
(declare-fun case_llist$ (A_llist$ A_a_llist_a_llist_fun_fun$ )A_llist_a_llist_fun$ )
(assert (! (forall ((?v0 Enat_a_llist_prod_a_llist_fun$ ))(! (= (fun_app$ uuc$ ?v0 )(fun_app$a (case_prod$ (uub$ ?v0 ))nxs$ )):pattern ((fun_app$ uuc$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Enat_a_llist_prod_a_llist_fun$ )(?v1 Enat$ ))(! (= (fun_app$b (uub$ ?v0 )?v1 )(case_llist$ lNil$ (uua$ ?v0 ?v1 ))):pattern ((fun_app$b (uub$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Enat_a_llist_a_llist_fun_fun$ )(?v1 Enat$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$c (fun_app$d (uue$ ?v0 ?v1 )?v2 )?v3 )(case_enat$ lNil$ (uud$ ?v0 ?v2 ?v3 )?v1 )):pattern ((fun_app$c (fun_app$d (uue$ ?v0 ?v1 )?v2 )?v3 )))):named a2 ))
(assert (! (forall ((?v0 Enat_a_llist_prod_a_llist_fun$ )(?v1 Enat$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$c (fun_app$d (uua$ ?v0 ?v1 )?v2 )?v3 )(case_enat$ lNil$ (uu$ ?v0 ?v2 ?v3 )?v1 )):pattern ((fun_app$c (fun_app$d (uua$ ?v0 ?v1 )?v2 )?v3 )))):named a3 ))
(assert (! (forall ((?v0 Enat_a_llist_prod_a_llist_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 Enat$ ))(! (= (fun_app$e (uu$ ?v0 ?v1 ?v2 )?v3 )(lCons$ ?v1 (fun_app$c (curry$ ?v0 ?v3 )?v2 ))):pattern ((fun_app$e (uu$ ?v0 ?v1 ?v2 )?v3 )))):named a4 ))
(assert (! (forall ((?v0 Enat_a_llist_a_llist_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 Enat$ ))(! (= (fun_app$e (uud$ ?v0 ?v1 ?v2 )?v3 )(lCons$ ?v1 (fun_app$c (fun_app$b ?v0 ?v3 )?v2 ))):pattern ((fun_app$e (uud$ ?v0 ?v1 ?v2 )?v3 )))):named a5 ))
(assert (! (not (monotone$ (fun_ord$ lprefix$ )lprefix$ uuc$ )):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$f (fun_app$g lprefix$ ?v0 )?v0 )):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$f (fun_app$g lprefix$ ?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 Enat_a_llist_a_llist_fun_fun$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (fun_app$c (f$ ?v0 ?v1 )?v2 )(fun_app$c (case_llist$ lNil$ (uue$ ?v0 ?v1 ))?v2 ))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$f (fun_app$g lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$f (fun_app$g lprefix$ ?v1 )?v3 ))):pattern ((fun_app$f (fun_app$g lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$f (fun_app$g lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$f (fun_app$g lprefix$ lNil$ )?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(= (fun_app$f (fun_app$g lprefix$ ?v0 )(lCons$ ?v1 ?v2 ))(or (= ?v0 lNil$ )(exists ((?v3 A_llist$ ))(and (= ?v0 (lCons$ ?v1 ?v3 ))(fun_app$f (fun_app$g lprefix$ ?v3 )?v2 )))))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (fun_app$f (fun_app$g lprefix$ ?v0 )?v1 )(or (exists ((?v2 A_llist$ ))(and (= ?v0 lNil$ )(= ?v1 ?v2 )))(exists ((?v2 A_llist$ )(?v3 A_llist$ )(?v4 A$ ))(and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 (lCons$ ?v4 ?v3 ))(fun_app$f (fun_app$g lprefix$ ?v2 )?v3 ))))))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$f (fun_app$g lprefix$ (lCons$ ?v0 ?v1 ))?v2 )(exists ((?v3 A_llist$ ))(and (= ?v2 (lCons$ ?v0 ?v3 ))(fun_app$f (fun_app$g lprefix$ ?v1 )?v3 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (= ?v0 lNil$ ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_a_llist_fun_fun$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$c (case_llist$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(fun_app$c (fun_app$d ?v1 ?v2 )?v3 )):pattern ((fun_app$c (case_llist$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_a_llist_fun_fun$ ))(! (= (fun_app$c (case_llist$ ?v0 ?v1 )lNil$ )?v0 ):pattern ((case_llist$ ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$f (fun_app$g lprefix$ (lCons$ ?v0 ?v1 ))lNil$ )false ):pattern ((lCons$ ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(forall ((?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))false )))false )):named a20 ))
(assert (! (forall ((?v0 Enat_a_llist_prod_a_llist_fun_a_llist_fun$ )(?v1 Enat_a_llist_prod_a_llist_fun$ )(?v2 A_llist$ )(?v3 Enat_a_llist_prod_a_llist_fun_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 Enat_a_llist_prod_a_llist_fun$ ))(= (fun_app$ ?v0 ?v5 )(ite (fun_app$h (fun_app$i (fun_ord$ lprefix$ )?v5 )?v1 )?v2 (fun_app$ ?v3 ?v5 ))))(and (forall ((?v5 Enat_a_llist_prod_a_llist_fun$ )(?v6 Enat_a_llist_prod_a_llist_fun$ ))(=> (and (fun_app$h (fun_app$i (fun_ord$ lprefix$ )?v5 )?v6 )(not (fun_app$h (fun_app$i (fun_ord$ lprefix$ )?v5 )?v1 )))(fun_app$f (fun_app$g ?v4 (fun_app$ ?v3 ?v5 ))(fun_app$ ?v3 ?v6 ))))(and (forall ((?v5 Enat_a_llist_prod_a_llist_fun$ ))(=> (not (fun_app$h (fun_app$i (fun_ord$ lprefix$ )?v5 )?v1 ))(fun_app$f (fun_app$g ?v4 ?v2 )(fun_app$ ?v3 ?v5 ))))(fun_app$f (fun_app$g ?v4 ?v2 )?v2 ))))(monotone$ (fun_ord$ lprefix$ )?v4 ?v0 ))):named a21 ))
(assert (! (forall ((?v0 Enat_a_llist_prod_a_llist_fun$ )(?v1 Enat_a_llist_prod_a_llist_fun$ )(?v2 Enat_a_llist_prod_a_llist_fun$ ))(=> (and (fun_app$h (fun_app$i (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$h (fun_app$i (fun_ord$ lprefix$ )?v1 )?v2 ))(fun_app$h (fun_app$i (fun_ord$ lprefix$ )?v0 )?v2 ))):named a22 ))
(assert (! (forall ((?v0 Enat_a_llist_prod_a_llist_fun$ )(?v1 Enat_a_llist_prod_a_llist_fun$ ))(=> (and (fun_app$h (fun_app$i (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$h (fun_app$i (fun_ord$ lprefix$ )?v1 )?v0 ))(= ?v0 ?v1 ))):named a23 ))
(check-sat )
;(get-unsat-core )
