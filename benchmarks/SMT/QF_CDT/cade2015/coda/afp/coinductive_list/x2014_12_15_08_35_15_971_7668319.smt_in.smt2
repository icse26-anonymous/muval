;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort A_a_prod_set$ 0 )
(declare-sort A_nat_prod_set$ 0 )
(declare-sort Nat_a_prod_set$ 0 )
(declare-sort Nat_nat_prod_set$ 0 )
(declare-sort A_a_a_prod_prod_set$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort Nat_a_a_prod_prod_set$ 0 )
(declare-sort Nat_llist_nat_llist_fun$ 0 )
(declare-sort A_nat_prod_a_nat_prod_fun$ 0 )
(declare-sort Nat_a_prod_nat_a_prod_fun$ 0 )
(declare-sort A_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_llist_nat_a_prod_llist_fun$ 0 )
(declare-sort Nat_nat_prod_nat_nat_prod_fun$ 0 )
(declare-sort Nat_llist_a_nat_prod_llist_fun$ 0 )
(declare-sort Nat_llist_nat_nat_prod_llist_fun$ 0 )
(declare-sort A_a_prod_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_a_a_prod_prod_a_a_a_prod_prod_fun$ 0 )
(declare-sort Nat_a_a_prod_prod_nat_a_a_prod_prod_fun$ 0 )
(declare-sort A_a_prod_llist_a_a_a_prod_prod_llist_fun$ 0 )
(declare-sort A_a_prod_llist_nat_a_a_prod_prod_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort A_a_prod$ 0)
(declare-sort Nat_a_a_prod_prod$ 0)
(declare-fun fst$ (A_a_prod$)A$)
(declare-fun snd$ (A_a_prod$)A$)
(declare-fun pair$ (A$ A$ )A_a_prod$)
(declare-fun fst$a (Nat_a_a_prod_prod$)Nat$)
(declare-fun snd$a (Nat_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$a (Nat$ A_a_prod$ )Nat_a_a_prod_prod$)
(declare-codatatypes ()((Nat_a_a_prod_prod_llist$ (lNil$a )(lCons$a (lhd$a Nat_a_a_prod_prod$ )(ltl$a Nat_a_a_prod_prod_llist$ )))))
(declare-sort Nat_nat_prod$ 0)
(declare-fun fst$b (Nat_nat_prod$)Nat$)
(declare-fun snd$b (Nat_nat_prod$)Nat$)
(declare-fun pair$b (Nat$ Nat$ )Nat_nat_prod$)
(declare-codatatypes ()((Nat_nat_prod_llist$ (lNil$b )(lCons$b (lhd$b Nat_nat_prod$ )(ltl$b Nat_nat_prod_llist$ )))))
(declare-sort Nat_a_prod$ 0)
(declare-fun fst$c (Nat_a_prod$)Nat$)
(declare-fun snd$c (Nat_a_prod$)A$)
(declare-fun pair$c (Nat$ A$ )Nat_a_prod$)
(declare-codatatypes ()((Nat_a_prod_llist$ (lNil$c )(lCons$c (lhd$c Nat_a_prod$ )(ltl$c Nat_a_prod_llist$ )))))
(declare-sort A_a_a_prod_prod$ 0)
(declare-fun fst$d (A_a_a_prod_prod$)A$)
(declare-fun snd$d (A_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$d (A$ A_a_prod$ )A_a_a_prod_prod$)
(declare-codatatypes ()((A_a_a_prod_prod_llist$ (lNil$d )(lCons$d (lhd$d A_a_a_prod_prod$ )(ltl$d A_a_a_prod_prod_llist$ )))))
(declare-sort A_nat_prod$ 0)
(declare-fun fst$e (A_nat_prod$)A$)
(declare-fun snd$e (A_nat_prod$)Nat$)
(declare-fun pair$e (A$ Nat$ )A_nat_prod$)
(declare-codatatypes ()((A_nat_prod_llist$ (lNil$e )(lCons$e (lhd$e A_nat_prod$ )(ltl$e A_nat_prod_llist$ )))(A_a_prod_llist$ (lNil$f )(lCons$f (lhd$f A_a_prod$ )(ltl$f A_a_prod_llist$ )))(Nat_llist$ (lNil$g )(lCons$g (lhd$g Nat$ )(ltl$g Nat_llist$ )))))
(declare-sort A_a_prod_a_prod$ 0)
(declare-fun fst$f (A_a_prod_a_prod$)A_a_prod$)
(declare-fun snd$f (A_a_prod_a_prod$)A$)
(declare-fun pair$f (A_a_prod$ A$ )A_a_prod_a_prod$)
(declare-codatatypes ()((A_a_prod_a_prod_llist$ (lNil$h )(lCons$h (lhd$h A_a_prod_a_prod$ )(ltl$h A_a_prod_a_prod_llist$ )))))
(declare-sort A_a_prod_nat_prod$ 0)
(declare-fun fst$g (A_a_prod_nat_prod$)A_a_prod$)
(declare-fun snd$g (A_a_prod_nat_prod$)Nat$)
(declare-fun pair$g (A_a_prod$ Nat$ )A_a_prod_nat_prod$)
(declare-codatatypes ()((A_a_prod_nat_prod_llist$ (lNil$i )(lCons$i (lhd$i A_a_prod_nat_prod$ )(ltl$i A_a_prod_nat_prod_llist$ )))))
(declare-sort A_a_prod_a_a_prod_prod$ 0)
(declare-fun fst$h (A_a_prod_a_a_prod_prod$)A_a_prod$)
(declare-fun snd$h (A_a_prod_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$h (A_a_prod$ A_a_prod$ )A_a_prod_a_a_prod_prod$)
(declare-codatatypes ()((A_a_prod_a_a_prod_prod_llist$ (lNil$j )(lCons$j (lhd$j A_a_prod_a_a_prod_prod$ )(ltl$j A_a_prod_a_a_prod_prod_llist$ )))))
(declare-sort A_nat_nat_prod_prod$ 0)
(declare-fun fst$i (A_nat_nat_prod_prod$)A$)
(declare-fun snd$i (A_nat_nat_prod_prod$)Nat_nat_prod$)
(declare-fun pair$i (A$ Nat_nat_prod$ )A_nat_nat_prod_prod$)
(declare-codatatypes ()((A_nat_nat_prod_prod_llist$ (lNil$k )(lCons$k (lhd$k A_nat_nat_prod_prod$ )(ltl$k A_nat_nat_prod_prod_llist$ )))))
(declare-fun a$ ()Nat_set$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lset$ (Nat_a_a_prod_prod_llist$ )Nat_a_a_prod_prod_set$ )
(declare-fun lzip$ (A_llist$ )A_llist_a_a_prod_llist_fun$ )
(declare-fun lset$a (Nat_nat_prod_llist$ )Nat_nat_prod_set$ )
(declare-fun lset$b (Nat_a_prod_llist$ )Nat_a_prod_set$ )
(declare-fun lset$c (A_a_a_prod_prod_llist$ )A_a_a_prod_prod_set$ )
(declare-fun lset$d (A_nat_prod_llist$ )A_nat_prod_set$ )
(declare-fun lset$e (A_a_prod_llist$ )A_a_prod_set$ )
(declare-fun lset$f (Nat_llist$ )Nat_set$ )
(declare-fun lset$g (A_llist$ )A_set$ )
(declare-fun lzip$a (A_llist$ )Nat_llist_a_nat_prod_llist_fun$ )
(declare-fun lzip$b (Nat_llist$ )A_llist_nat_a_prod_llist_fun$ )
(declare-fun lzip$c (Nat_llist$ )Nat_llist_nat_nat_prod_llist_fun$ )
(declare-fun lzip$d (A_llist$ )A_a_prod_llist_a_a_a_prod_prod_llist_fun$ )
(declare-fun lzip$e (Nat_llist$ )A_a_prod_llist_nat_a_a_prod_prod_llist_fun$ )
(declare-fun lzip$f (A_a_prod_llist$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lzip$g (A_a_prod_llist$ Nat_llist$ )A_a_prod_nat_prod_llist$ )
(declare-fun lzip$h (A_a_prod_llist$ A_a_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun lzip$i (A_llist$ Nat_nat_prod_llist$ )A_nat_nat_prod_prod_llist$ )
(declare-fun finite$ (Nat_set$ )Bool )
(declare-fun ldropn$ (Nat$ Nat_a_a_prod_prod_llist$ )Nat_a_a_prod_prod_llist$ )
(declare-fun finite$a (Nat_a_a_prod_prod_set$ )Bool )
(declare-fun finite$b (Nat_nat_prod_set$ )Bool )
(declare-fun finite$c (Nat_a_prod_set$ )Bool )
(declare-fun finite$d (A_a_a_prod_prod_set$ )Bool )
(declare-fun finite$e (A_nat_prod_set$ )Bool )
(declare-fun finite$f (A_a_prod_set$ )Bool )
(declare-fun finite$g (A_set$ )Bool )
(declare-fun fun_app$ (Nat_llist_nat_llist_fun$ Nat_llist$ )Nat_llist$ )
(declare-fun ldropn$a (Nat$ Nat_nat_prod_llist$ )Nat_nat_prod_llist$ )
(declare-fun ldropn$b (Nat$ Nat_a_prod_llist$ )Nat_a_prod_llist$ )
(declare-fun ldropn$c (Nat$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun ldropn$d (Nat$ A_nat_prod_llist$ )A_nat_prod_llist$ )
(declare-fun ldropn$e (Nat$ )Nat_llist_nat_llist_fun$ )
(declare-fun ldropn$f (Nat$ )A_a_prod_llist_a_a_prod_llist_fun$ )
(declare-fun ldropn$g (Nat$ )A_llist_a_llist_fun$ )
(declare-fun ldropn$h (Nat$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun ldropn$i (Nat$ A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun ldropn$j (Nat$ A_a_prod_nat_prod_llist$ )A_a_prod_nat_prod_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_a_prod_llist_a_a_prod_llist_fun$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$c (A_llist_a_a_prod_llist_fun$ A_llist$ )A_a_prod_llist$ )
(declare-fun fun_app$d (Nat_llist_a_nat_prod_llist_fun$ Nat_llist$ )A_nat_prod_llist$ )
(declare-fun fun_app$e (A_llist_nat_a_prod_llist_fun$ A_llist$ )Nat_a_prod_llist$ )
(declare-fun fun_app$f (Nat_llist_nat_nat_prod_llist_fun$ Nat_llist$ )Nat_nat_prod_llist$ )
(declare-fun fun_app$g (A_a_prod_llist_a_a_a_prod_prod_llist_fun$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun fun_app$h (A_a_prod_llist_nat_a_a_prod_prod_llist_fun$ A_a_prod_llist$ )Nat_a_a_prod_prod_llist$ )
(declare-fun iterates$ (Nat_a_a_prod_prod_nat_a_a_prod_prod_fun$ Nat_a_a_prod_prod$ )Nat_a_a_prod_prod_llist$ )
(declare-fun lfinite$a (Nat_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$b (Nat_nat_prod_llist$ )Bool )
(declare-fun lfinite$c (Nat_a_prod_llist$ )Bool )
(declare-fun lfinite$d (A_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$e (A_nat_prod_llist$ )Bool )
(declare-fun lfinite$f (A_a_prod_llist$ )Bool )
(declare-fun lfinite$g (Nat_llist$ )Bool )
(declare-fun lfinite$h (A_a_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$i (A_a_prod_nat_prod_llist$ )Bool )
(declare-fun lfinite$j (A_a_prod_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$k (A_nat_nat_prod_prod_llist$ )Bool )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(declare-fun iterates$a (Nat_nat_prod_nat_nat_prod_fun$ Nat_nat_prod$ )Nat_nat_prod_llist$ )
(declare-fun iterates$b (Nat_a_prod_nat_a_prod_fun$ Nat_a_prod$ )Nat_a_prod_llist$ )
(declare-fun iterates$c (A_a_a_prod_prod_a_a_a_prod_prod_fun$ A_a_a_prod_prod$ )A_a_a_prod_prod_llist$ )
(declare-fun iterates$d (A_nat_prod_a_nat_prod_fun$ A_nat_prod$ )A_nat_prod_llist$ )
(declare-fun iterates$e (Nat_nat_fun$ Nat$ )Nat_llist$ )
(declare-fun iterates$f (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod_llist$ )
(declare-fun iterates$g (A_a_fun$ A$ )A_llist$ )
(declare-fun lsublist$a (A_a_prod_llist$ Nat_set$ )A_a_prod_llist$ )
(declare-fun lsublist$b (Nat_llist$ Nat_set$ )Nat_llist$ )
(declare-fun lstrict_prefix$ (Nat_a_a_prod_prod_llist$ Nat_a_a_prod_prod_llist$ )Bool )
(declare-fun lstrict_prefix$a (Nat_nat_prod_llist$ Nat_nat_prod_llist$ )Bool )
(declare-fun lstrict_prefix$b (Nat_a_prod_llist$ Nat_a_prod_llist$ )Bool )
(declare-fun lstrict_prefix$c (A_a_a_prod_prod_llist$ A_a_a_prod_prod_llist$ )Bool )
(declare-fun lstrict_prefix$d (A_nat_prod_llist$ A_nat_prod_llist$ )Bool )
(declare-fun lstrict_prefix$e (Nat_llist$ Nat_llist$ )Bool )
(declare-fun lstrict_prefix$f (A_a_prod_llist$ A_a_prod_llist$ )Bool )
(declare-fun lstrict_prefix$g (A_llist$ A_llist$ )Bool )
(assert (! (not (= (lfinite$ (lsublist$ xs$ a$ ))(or (lfinite$ xs$ )(finite$ a$ )))):named a0 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod_llist$ ))(=> (lfinite$a ?v0 )(finite$a (lset$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Nat_nat_prod_llist$ ))(=> (lfinite$b ?v0 )(finite$b (lset$a ?v0 )))):named a2 ))
(assert (! (forall ((?v0 Nat_a_prod_llist$ ))(=> (lfinite$c ?v0 )(finite$c (lset$b ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(=> (lfinite$d ?v0 )(finite$d (lset$c ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ ))(=> (lfinite$e ?v0 )(finite$e (lset$d ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(=> (lfinite$f ?v0 )(finite$f (lset$e ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat_llist$ ))(=> (lfinite$g ?v0 )(finite$ (lset$f ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(finite$g (lset$g ?v0 )))):named a8 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod_llist$ )(?v1 Nat_a_a_prod_prod_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lfinite$a ?v0 ))):named a9 ))
(assert (! (forall ((?v0 Nat_nat_prod_llist$ )(?v1 Nat_nat_prod_llist$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lfinite$b ?v0 ))):named a10 ))
(assert (! (forall ((?v0 Nat_a_prod_llist$ )(?v1 Nat_a_prod_llist$ ))(=> (lstrict_prefix$b ?v0 ?v1 )(lfinite$c ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 A_a_a_prod_prod_llist$ ))(=> (lstrict_prefix$c ?v0 ?v1 )(lfinite$d ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ )(?v1 A_nat_prod_llist$ ))(=> (lstrict_prefix$d ?v0 ?v1 )(lfinite$e ?v0 ))):named a13 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (lstrict_prefix$e ?v0 ?v1 )(lfinite$g ?v0 ))):named a14 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(=> (lstrict_prefix$f ?v0 ?v1 )(lfinite$f ?v0 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$g ?v0 ?v1 )(lfinite$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$a lNil$f ?v0 )lNil$f ):pattern ((lsublist$a lNil$f ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$b lNil$g ?v0 )lNil$g ):pattern ((lsublist$b lNil$g ?v0 )))):named a18 ))
(assert (! (forall ((?v0 Nat_set$ ))(! (= (lsublist$ lNil$ ?v0 )lNil$ ):pattern ((lsublist$ lNil$ ?v0 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_a_prod_prod_llist$ ))(= (lfinite$a (ldropn$ ?v0 ?v1 ))(lfinite$a ?v1 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_prod_llist$ ))(= (lfinite$b (ldropn$a ?v0 ?v1 ))(lfinite$b ?v1 ))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_prod_llist$ ))(= (lfinite$c (ldropn$b ?v0 ?v1 ))(lfinite$c ?v1 ))):named a22 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_prod_prod_llist$ ))(= (lfinite$d (ldropn$c ?v0 ?v1 ))(lfinite$d ?v1 ))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_nat_prod_llist$ ))(= (lfinite$e (ldropn$d ?v0 ?v1 ))(lfinite$e ?v1 ))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ ))(= (lfinite$g (fun_app$ (ldropn$e ?v0 )?v1 ))(lfinite$g ?v1 ))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ ))(= (lfinite$f (fun_app$a (ldropn$f ?v0 )?v1 ))(lfinite$f ?v1 ))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$b (ldropn$g ?v0 )?v1 ))(lfinite$ ?v1 ))):named a27 ))
(assert (! (= (lfinite$a lNil$a )true ):named a28 ))
(assert (! (= (lfinite$b lNil$b )true ):named a29 ))
(assert (! (= (lfinite$c lNil$c )true ):named a30 ))
(assert (! (= (lfinite$d lNil$d )true ):named a31 ))
(assert (! (= (lfinite$e lNil$e )true ):named a32 ))
(assert (! (= (lfinite$g lNil$g )true ):named a33 ))
(assert (! (= (lfinite$f lNil$f )true ):named a34 ))
(assert (! (= (lfinite$ lNil$ )true ):named a35 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$f (fun_app$c (lzip$ ?v0 )?v1 ))(or (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat_llist$ ))(= (lfinite$e (fun_app$d (lzip$a ?v0 )?v1 ))(or (lfinite$ ?v0 )(lfinite$g ?v1 )))):named a37 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 A_llist$ ))(= (lfinite$c (fun_app$e (lzip$b ?v0 )?v1 ))(or (lfinite$g ?v0 )(lfinite$ ?v1 )))):named a38 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(= (lfinite$b (fun_app$f (lzip$c ?v0 )?v1 ))(or (lfinite$g ?v0 )(lfinite$g ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$d (fun_app$g (lzip$d ?v0 )?v1 ))(or (lfinite$ ?v0 )(lfinite$f ?v1 )))):named a40 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$a (fun_app$h (lzip$e ?v0 )?v1 ))(or (lfinite$g ?v0 )(lfinite$f ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_llist$ ))(= (lfinite$h (lzip$f ?v0 ?v1 ))(or (lfinite$f ?v0 )(lfinite$ ?v1 )))):named a42 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 Nat_llist$ ))(= (lfinite$i (lzip$g ?v0 ?v1 ))(or (lfinite$f ?v0 )(lfinite$g ?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$j (lzip$h ?v0 ?v1 ))(or (lfinite$f ?v0 )(lfinite$f ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat_nat_prod_llist$ ))(= (lfinite$k (lzip$i ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$b ?v1 )))):named a45 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod_nat_a_a_prod_prod_fun$ )(?v1 Nat_a_a_prod_prod$ ))(not (lfinite$a (iterates$ ?v0 ?v1 )))):named a46 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_fun$ )(?v1 Nat_nat_prod$ ))(not (lfinite$b (iterates$a ?v0 ?v1 )))):named a47 ))
(assert (! (forall ((?v0 Nat_a_prod_nat_a_prod_fun$ )(?v1 Nat_a_prod$ ))(not (lfinite$c (iterates$b ?v0 ?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_a_a_a_prod_prod_fun$ )(?v1 A_a_a_prod_prod$ ))(not (lfinite$d (iterates$c ?v0 ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_nat_prod_a_nat_prod_fun$ )(?v1 A_nat_prod$ ))(not (lfinite$e (iterates$d ?v0 ?v1 )))):named a50 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(not (lfinite$g (iterates$e ?v0 ?v1 )))):named a51 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod$ ))(not (lfinite$f (iterates$f ?v0 ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(not (lfinite$ (iterates$g ?v0 ?v1 )))):named a53 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod$ )(?v1 Nat_a_a_prod_prod_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 Nat_nat_prod$ )(?v1 Nat_nat_prod_llist$ ))(! (= (lfinite$b (lCons$b ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a55 ))
(assert (! (forall ((?v0 Nat_a_prod$ )(?v1 Nat_a_prod_llist$ ))(! (= (lfinite$c (lCons$c ?v0 ?v1 ))(lfinite$c ?v1 )):pattern ((lCons$c ?v0 ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod_llist$ ))(! (= (lfinite$d (lCons$d ?v0 ?v1 ))(lfinite$d ?v1 )):pattern ((lCons$d ?v0 ?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_nat_prod$ )(?v1 A_nat_prod_llist$ ))(! (= (lfinite$e (lCons$e ?v0 ?v1 ))(lfinite$e ?v1 )):pattern ((lCons$e ?v0 ?v1 )))):named a58 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ ))(! (= (lfinite$g (lCons$g ?v0 ?v1 ))(lfinite$g ?v1 )):pattern ((lCons$g ?v0 ?v1 )))):named a59 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ ))(! (= (lfinite$f (lCons$f ?v0 ?v1 ))(lfinite$f ?v1 )):pattern ((lCons$f ?v0 ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a61 ))
(assert (! (forall ((?v0 Nat_a_a_prod_prod$ )(?v1 Nat_a_a_prod_prod_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a62 ))
(assert (! (forall ((?v0 Nat_nat_prod$ )(?v1 Nat_nat_prod_llist$ ))(! (= (lfinite$b (lCons$b ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a63 ))
(assert (! (forall ((?v0 Nat_a_prod$ )(?v1 Nat_a_prod_llist$ ))(! (= (lfinite$c (lCons$c ?v0 ?v1 ))(lfinite$c ?v1 )):pattern ((lCons$c ?v0 ?v1 )))):named a64 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod_llist$ ))(! (= (lfinite$d (lCons$d ?v0 ?v1 ))(lfinite$d ?v1 )):pattern ((lCons$d ?v0 ?v1 )))):named a65 ))
(assert (! (forall ((?v0 A_nat_prod$ )(?v1 A_nat_prod_llist$ ))(! (= (lfinite$e (lCons$e ?v0 ?v1 ))(lfinite$e ?v1 )):pattern ((lCons$e ?v0 ?v1 )))):named a66 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ ))(! (= (lfinite$g (lCons$g ?v0 ?v1 ))(lfinite$g ?v1 )):pattern ((lCons$g ?v0 ?v1 )))):named a67 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ ))(! (= (lfinite$f (lCons$f ?v0 ?v1 ))(lfinite$f ?v1 )):pattern ((lCons$f ?v0 ?v1 )))):named a68 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a69 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod$ )(?v3 A_a_prod_llist$ ))(= (= (lCons$f ?v0 ?v1 )(lCons$f ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a70 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat$ )(?v3 Nat_llist$ ))(= (= (lCons$g ?v0 ?v1 )(lCons$g ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a71 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a72 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$e (lzip$b ?v0 )lNil$ )lNil$c ):pattern ((lzip$b ?v0 )))):named a73 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$h (lzip$e ?v0 )lNil$f )lNil$a ):pattern ((lzip$e ?v0 )))):named a74 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$g (lzip$d ?v0 )lNil$f )lNil$d ):pattern ((lzip$d ?v0 )))):named a75 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$f (lzip$c ?v0 )lNil$g )lNil$b ):pattern ((lzip$c ?v0 )))):named a76 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$d (lzip$a ?v0 )lNil$g )lNil$e ):pattern ((lzip$a ?v0 )))):named a77 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (lzip$ ?v0 )lNil$ )lNil$f ):pattern ((lzip$ ?v0 )))):named a78 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (= (fun_app$g (lzip$d lNil$ )?v0 )lNil$d ):pattern ((fun_app$g (lzip$d lNil$ )?v0 )))):named a79 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$d (lzip$a lNil$ )?v0 )lNil$e ):pattern ((fun_app$d (lzip$a lNil$ )?v0 )))):named a80 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(! (= (fun_app$h (lzip$e lNil$g )?v0 )lNil$a ):pattern ((fun_app$h (lzip$e lNil$g )?v0 )))):named a81 ))
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$f (lzip$c lNil$g )?v0 )lNil$b ):pattern ((fun_app$f (lzip$c lNil$g )?v0 )))):named a82 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$e (lzip$b lNil$g )?v0 )lNil$c ):pattern ((fun_app$e (lzip$b lNil$g )?v0 )))):named a83 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (lzip$ lNil$ )?v0 )lNil$f ):pattern ((fun_app$c (lzip$ lNil$ )?v0 )))):named a84 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (ldropn$f ?v0 )lNil$f )lNil$f ):pattern ((ldropn$f ?v0 )))):named a85 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ldropn$e ?v0 )lNil$g )lNil$g ):pattern ((ldropn$e ?v0 )))):named a86 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$b (ldropn$g ?v0 )lNil$ )lNil$ ):pattern ((ldropn$g ?v0 )))):named a87 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_prod_llist$ ))(= (ldropn$c ?v0 (fun_app$g (lzip$d ?v1 )?v2 ))(fun_app$g (lzip$d (fun_app$b (ldropn$g ?v0 )?v1 ))(fun_app$a (ldropn$f ?v0 )?v2 )))):named a88 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 Nat_llist$ ))(= (ldropn$d ?v0 (fun_app$d (lzip$a ?v1 )?v2 ))(fun_app$d (lzip$a (fun_app$b (ldropn$g ?v0 )?v1 ))(fun_app$ (ldropn$e ?v0 )?v2 )))):named a89 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ )(?v2 A_llist$ ))(= (ldropn$h ?v0 (lzip$f ?v1 ?v2 ))(lzip$f (fun_app$a (ldropn$f ?v0 )?v1 )(fun_app$b (ldropn$g ?v0 )?v2 )))):named a90 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod_llist$ ))(= (ldropn$i ?v0 (lzip$h ?v1 ?v2 ))(lzip$h (fun_app$a (ldropn$f ?v0 )?v1 )(fun_app$a (ldropn$f ?v0 )?v2 )))):named a91 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ )(?v2 Nat_llist$ ))(= (ldropn$j ?v0 (lzip$g ?v1 ?v2 ))(lzip$g (fun_app$a (ldropn$f ?v0 )?v1 )(fun_app$ (ldropn$e ?v0 )?v2 )))):named a92 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 A_llist$ ))(= (ldropn$b ?v0 (fun_app$e (lzip$b ?v1 )?v2 ))(fun_app$e (lzip$b (fun_app$ (ldropn$e ?v0 )?v1 ))(fun_app$b (ldropn$g ?v0 )?v2 )))):named a93 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 A_a_prod_llist$ ))(= (ldropn$ ?v0 (fun_app$h (lzip$e ?v1 )?v2 ))(fun_app$h (lzip$e (fun_app$ (ldropn$e ?v0 )?v1 ))(fun_app$a (ldropn$f ?v0 )?v2 )))):named a94 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_llist$ )(?v2 Nat_llist$ ))(= (ldropn$a ?v0 (fun_app$f (lzip$c ?v1 )?v2 ))(fun_app$f (lzip$c (fun_app$ (ldropn$e ?v0 )?v1 ))(fun_app$ (ldropn$e ?v0 )?v2 )))):named a95 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$a (ldropn$f ?v0 )(fun_app$c (lzip$ ?v1 )?v2 ))(fun_app$c (lzip$ (fun_app$b (ldropn$g ?v0 )?v1 ))(fun_app$b (ldropn$g ?v0 )?v2 )))):named a96 ))
(check-sat )
;(get-unsat-core )
