;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-fun p$ ()A_bool_fun$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun lset$ (A_llist_llist$ )A_llist_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun lnull$a (A_llist_llist$ )Bool )
(declare-fun member$ (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun member$b (A$ A_set$ )Bool )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun lfilter$a (A_llist_bool_fun$ A_llist_llist$ )A_llist_llist$ )
(assert (! (not (not (lnull$ (lfilter$ p$ ys$ )))):named a0 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (lfilter$a ?v0 (lfilter$a ?v0 ?v1 ))(lfilter$a ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v0 ?v1 ))(lfilter$ ?v0 ?v1 ))):named a2 ))
(assert (! (= (lfilter$ p$ ys$ )(lCons$ x$ xs$ )):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a4 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a5 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a7 ))
(assert (! (forall ((?v0 A_llist_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$a ?v1 )))false )(=> (not (forall ((?v1 A_llist_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$a ?v1 ))))false ))false )):named a8 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a9 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (and (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (or (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a11 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (and (=> (lnull$a ?v0 )false )(=> (not (lnull$a ?v0 ))false ))false )):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a13 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (lfilter$a ?v0 (lCons$a ?v1 ?v2 ))(ite (fun_app$ ?v0 ?v1 )(lCons$a ?v1 (lfilter$a ?v0 ?v2 ))(lfilter$a ?v0 ?v2 ))):pattern ((lfilter$a ?v0 (lCons$a ?v1 ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (lfilter$ ?v0 (lCons$ ?v1 ?v2 ))(ite (fun_app$a ?v0 ?v1 )(lCons$ ?v1 (lfilter$ ?v0 ?v2 ))(lfilter$ ?v0 ?v2 ))):pattern ((lfilter$ ?v0 (lCons$ ?v1 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (=> (not (fun_app$ ?v0 ?v1 ))(= (lfilter$a ?v0 (lCons$a ?v1 ?v2 ))(lfilter$a ?v0 ?v2 ))):pattern ((lfilter$a ?v0 (lCons$a ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (=> (not (fun_app$a ?v0 ?v1 ))(= (lfilter$ ?v0 (lCons$ ?v1 ?v2 ))(lfilter$ ?v0 ?v2 ))):pattern ((lfilter$ ?v0 (lCons$ ?v1 ?v2 ))))):named a17 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (=> (fun_app$ ?v0 ?v1 )(= (lfilter$a ?v0 (lCons$a ?v1 ?v2 ))(lCons$a ?v1 (lfilter$a ?v0 ?v2 )))):pattern ((lfilter$a ?v0 (lCons$a ?v1 ?v2 ))))):named a18 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (=> (fun_app$a ?v0 ?v1 )(= (lfilter$ ?v0 (lCons$ ?v1 ?v2 ))(lCons$ ?v1 (lfilter$ ?v0 ?v2 )))):pattern ((lfilter$ ?v0 (lCons$ ?v1 ?v2 ))))):named a19 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (not (lnull$a ?v0 ))(exists ((?v1 A_llist$ )(?v2 A_llist_llist$ ))(= ?v0 (lCons$a ?v1 ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (lnull$ ?v0 ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(=> (= ?v0 (lCons$a ?v1 ?v2 ))(not (lnull$a ?v0 )))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))(not (lnull$ ?v0 )))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(not (lnull$a (lCons$a ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(not (lnull$ (lCons$ ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a26 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (lnull$a (lfilter$a ?v0 ?v1 ))(forall ((?v2 A_llist$ ))(=> (member$a ?v2 (lset$ ?v1 ))(not (fun_app$ ?v0 ?v2 )))))):named a27 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$ (lfilter$ ?v0 ?v1 ))(forall ((?v2 A$ ))(=> (member$b ?v2 (lset$a ?v1 ))(not (fun_app$a ?v0 ?v2 )))))):named a28 ))
(check-sat )
;(get-unsat-core )
