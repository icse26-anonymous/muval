;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))(A_llist_llist_llist$ (lNil$b )(lCons$b (lhd$b A_llist_llist$ )(ltl$b A_llist_llist_llist$ )))(A_llist_llist_llist_llist$ (lNil$c )(lCons$c (lhd$c A_llist_llist_llist$ )(ltl$c A_llist_llist_llist_llist$ )))))
(declare-fun x$ ()A$ )
(declare-fun bot$ ()A_set$ )
(declare-fun inf$ (A_set$ A_set$ )A_set$ )
(declare-fun x21$ ()A_llist$ )
(declare-fun x22$ ()A_llist_llist$ )
(declare-fun bot$a ()A_llist_set$ )
(declare-fun inf$a (A_llist_set$ A_llist_set$ )A_llist_set$ )
(declare-fun lset$ (A_llist_llist$ )A_llist_set$ )
(declare-fun xssa$ (A_llist_llist$ )A_llist$ )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun lconcat$a (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lfinite$a (A_llist_llist_llist$ )Bool )
(declare-fun lfinite$b (A_llist_llist$ )Bool )
(declare-fun lprefix$a (A_llist_llist_llist$ A_llist_llist_llist$ )Bool )
(declare-fun lprefix$b (A_llist_llist$ A_llist_llist$ )Bool )
(declare-fun lprefix$c (A_llist_llist_llist_llist$ A_llist_llist_llist_llist$ )Bool )
(declare-fun ldistinct$ (A_llist_llist$ )Bool )
(declare-fun ldistinct$a (A_llist$ )Bool )
(declare-fun ldistinct$b (A_llist_llist_llist$ )Bool )
(assert (! (not false ):named a0 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (and (ldistinct$ ?v0 )(and (forall ((?v1 A_llist$ ))(=> (member$ ?v1 (lset$ ?v0 ))(ldistinct$a ?v1 )))(forall ((?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (member$ ?v1 (lset$ ?v0 ))(and (member$ ?v2 (lset$ ?v0 ))(not (= ?v1 ?v2 ))))(= (inf$ (lset$a ?v1 )(lset$a ?v2 ))bot$ )))))(ldistinct$a (xssa$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(lprefix$ (xssa$ ?v0 )(lconcat$ ?v0 ))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (or (= ?v0 x21$ )(member$ ?v0 (lset$ x22$ )))(ldistinct$a ?v0 ))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (or (= ?v0 x21$ )(member$ ?v0 (lset$ x22$ )))(and (or (= ?v1 x21$ )(member$ ?v1 (lset$ x22$ )))(not (= ?v0 ?v1 ))))(= (inf$ (lset$a ?v0 )(lset$a ?v1 ))bot$ ))):named a4 ))
(assert (! (lfinite$ x21$ ):named a5 ))
(assert (! (member$a x$ (lset$a x21$ )):named a6 ))
(assert (! (member$a x$ (lset$a (xssa$ x22$ ))):named a7 ))
(assert (! (not (member$ x21$ (lset$ x22$ ))):named a8 ))
(assert (! (ldistinct$ x22$ ):named a9 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(lprefix$a ?v0 ?v0 )):named a10 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(lprefix$b ?v0 ?v0 )):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a12 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(lprefix$a ?v0 ?v0 )):named a13 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(lprefix$b ?v0 ?v0 )):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a15 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(lprefix$a ?v1 ?v0 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (lprefix$b ?v0 ?v1 )(lprefix$b ?v1 ?v0 ))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(lprefix$a ?v1 ?v0 ))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (lprefix$b ?v0 ?v1 )(lprefix$b ?v1 ?v0 ))(= ?v0 ?v1 ))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(lprefix$a ?v2 ?v1 ))(or (lprefix$a ?v0 ?v2 )(lprefix$a ?v2 ?v0 )))):named a22 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (and (lprefix$b ?v0 ?v1 )(lprefix$b ?v2 ?v1 ))(or (lprefix$b ?v0 ?v2 )(lprefix$b ?v2 ?v0 )))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v2 ?v1 ))(or (lprefix$ ?v0 ?v2 )(lprefix$ ?v2 ?v0 )))):named a24 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(lprefix$a ?v1 ?v2 ))(lprefix$a ?v0 ?v2 ))):named a25 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (and (lprefix$b ?v0 ?v1 )(lprefix$b ?v1 ?v2 ))(lprefix$b ?v0 ?v2 ))):named a26 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v2 ))(lprefix$ ?v0 ?v2 ))):named a27 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(lprefix$a ?v1 ?v2 ))(lprefix$a ?v0 ?v2 ))):named a28 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (and (lprefix$b ?v0 ?v1 )(lprefix$b ?v1 ?v2 ))(lprefix$b ?v0 ?v2 ))):named a29 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v2 ))(lprefix$ ?v0 ?v2 ))):named a30 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (lprefix$a ?v0 ?v1 )(lfinite$a ?v1 ))(lfinite$a ?v0 ))):named a31 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (lprefix$b ?v0 ?v1 )(lfinite$b ?v1 ))(lfinite$b ?v0 ))):named a32 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lfinite$ ?v1 ))(lfinite$ ?v0 ))):named a33 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ ))(=> (lprefix$c ?v0 ?v1 )(lprefix$a (lconcat$a ?v0 )(lconcat$a ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (lprefix$a ?v0 ?v1 )(lprefix$b (lconcat$b ?v0 )(lconcat$b ?v1 )))):named a35 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (lprefix$b ?v0 ?v1 )(lprefix$ (lconcat$ ?v0 )(lconcat$ ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (=> (not (lfinite$a ?v0 ))(= (lprefix$a ?v0 ?v1 )(= ?v0 ?v1 ))):pattern ((lprefix$a ?v0 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(! (=> (not (lfinite$b ?v0 ))(= (lprefix$b ?v0 ?v1 )(= ?v0 ?v1 ))):pattern ((lprefix$b ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (lprefix$ ?v0 ?v1 )(= ?v0 ?v1 ))):pattern ((lprefix$ ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(=> (and (ldistinct$b ?v0 )(lprefix$a ?v1 ?v0 ))(ldistinct$b ?v1 ))):named a40 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (ldistinct$ ?v0 )(lprefix$b ?v1 ?v0 ))(ldistinct$ ?v1 ))):named a41 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (ldistinct$a ?v0 )(lprefix$ ?v1 ?v0 ))(ldistinct$a ?v1 ))):named a42 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (inf$a ?v0 bot$a )bot$a )):named a43 ))
(assert (! (forall ((?v0 A_set$ ))(= (inf$ ?v0 bot$ )bot$ )):named a44 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (inf$a bot$a ?v0 )bot$a )):named a45 ))
(assert (! (forall ((?v0 A_set$ ))(= (inf$ bot$ ?v0 )bot$ )):named a46 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_set$ ))(= (member$ ?v0 (inf$a ?v1 ?v2 ))(and (member$ ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a47 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (member$a ?v0 (inf$ ?v1 ?v2 ))(and (member$a ?v0 ?v1 )(member$a ?v0 ?v2 )))):named a48 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_set$ ))(=> (and (member$ ?v0 ?v1 )(member$ ?v0 ?v2 ))(member$ ?v0 (inf$a ?v1 ?v2 )))):named a49 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (and (member$a ?v0 ?v1 )(member$a ?v0 ?v2 ))(member$a ?v0 (inf$ ?v1 ?v2 )))):named a50 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_set$ ))(= (inf$a (inf$a ?v0 ?v1 )?v1 )(inf$a ?v0 ?v1 ))):named a51 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (inf$ (inf$ ?v0 ?v1 )?v1 )(inf$ ?v0 ?v1 ))):named a52 ))
(check-sat )
;(get-unsat-core )
