;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort D_d_fun$ 0 )
(declare-sort D_set_d_fun$ 0 )
(declare-sort C_llist_d_fun$ 0 )
(declare-sort D_c_llist_fun$ 0 )
(declare-sort C_llist_bool_fun$ 0 )
(declare-sort D_d_bool_fun_fun$ 0 )
(declare-sort C_c_llist_d_fun_fun$ 0 )
(declare-sort C_llist_c_llist_fun$ 0 )
(declare-sort C_llist_d_d_fun_fun$ 0 )
(declare-sort D_d_c_llist_fun_fun$ 0 )
(declare-sort C_llist_set_c_llist_fun$ 0 )
(declare-sort C_c_llist_d_d_fun_fun_fun$ 0 )
(declare-sort C_llist_c_llist_d_fun_fun$ 0 )
(declare-sort C_llist_d_c_llist_fun_fun$ 0 )
(declare-sort D_c_c_llist_d_fun_fun_fun$ 0 )
(declare-sort D_c_llist_c_llist_fun_fun$ 0 )
(declare-sort D_d_fun_d_c_llist_fun_fun$ 0 )
(declare-sort C_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort C_c_llist_c_llist_d_fun_fun_fun$ 0 )
(declare-sort C_llist_c_c_llist_d_fun_fun_fun$ 0 )
(declare-sort C_llist_c_llist_c_llist_fun_fun$ 0 )
(declare-sort D_c_llist_fun_d_c_llist_fun_fun$ 0 )
(declare-sort C_c_llist_d_fun_fun_c_llist_d_fun_fun$ 0 )
(declare-sort C_llist_d_fun_c_llist_c_llist_fun_fun$ 0 )
(declare-sort C_llist_c_llist_fun_c_llist_c_llist_fun_fun$ 0 )
(declare-sort C_c_llist_d_d_fun_fun_fun_c_llist_d_d_fun_fun_fun$ 0 )
(declare-sort C_c_llist_c_llist_d_fun_fun_fun_c_llist_c_llist_d_fun_fun_fun$ 0 )
(declare-codatatypes ()((C_llist$ (lNil$ )(lCons$ (lhd$ C$ )(ltl$ C_llist$ )))))
(declare-fun f$ (C$ )C_llist_c_llist_d_fun_fun$ )
(declare-fun uu$ ()C_c_llist_d_fun_fun$ )
(declare-fun bot$ ()D$ )
(declare-fun sup$ ()D_set_d_fun$ )
(declare-fun uua$ (D_d_c_llist_fun_fun$ )D_d_c_llist_fun_fun$ )
(declare-fun uub$ (D_d_c_llist_fun_fun$ )D_d_fun_d_c_llist_fun_fun$ )
(declare-fun uuc$ (D_c_llist_c_llist_fun_fun$ )C_llist_d_c_llist_fun_fun$ )
(declare-fun uud$ (D_c_llist_c_llist_fun_fun$ )D_c_llist_fun_d_c_llist_fun_fun$ )
(declare-fun uue$ (C_llist_c_llist_c_llist_fun_fun$ )C_llist_c_llist_c_llist_fun_fun$ )
(declare-fun uuf$ (C_llist_c_llist_c_llist_fun_fun$ )C_llist_c_llist_fun_c_llist_c_llist_fun_fun$ )
(declare-fun uug$ (C_llist_d_c_llist_fun_fun$ )D_c_llist_c_llist_fun_fun$ )
(declare-fun uuh$ (C_llist_d_c_llist_fun_fun$ )C_llist_d_fun_c_llist_c_llist_fun_fun$ )
(declare-fun uui$ (C_c_llist_d_d_fun_fun_fun$ )D_c_c_llist_d_fun_fun_fun$ )
(declare-fun uuj$ (D_d_fun$ )C_c_llist_d_d_fun_fun_fun_c_llist_d_d_fun_fun_fun$ )
(declare-fun uuk$ (C_c_llist_c_llist_d_fun_fun_fun$ )C_llist_c_c_llist_d_fun_fun_fun$ )
(declare-fun uul$ (C_llist_d_fun$ )C_c_llist_c_llist_d_fun_fun_fun_c_llist_c_llist_d_fun_fun_fun$ )
(declare-fun uum$ (D_c_llist_fun$ )D_d_fun_d_c_llist_fun_fun$ )
(declare-fun uun$ (C_llist_c_llist_fun$ )D_c_llist_fun_d_c_llist_fun_fun$ )
(declare-fun uuo$ (C_llist_c_llist_fun$ )C_llist_c_llist_fun_c_llist_c_llist_fun_fun$ )
(declare-fun uup$ (D_c_llist_fun$ )C_llist_d_fun_c_llist_c_llist_fun_fun$ )
(declare-fun lSup$ ()C_llist_set_c_llist_fun$ )
(declare-fun mcont$ (C_llist_set_c_llist_fun$ C_llist_c_llist_bool_fun_fun$ D_set_d_fun$ D_d_bool_fun_fun$ C_llist_d_fun$ )Bool )
(declare-fun mcont$a (D_set_d_fun$ D_d_bool_fun_fun$ C_llist_set_c_llist_fun$ C_llist_c_llist_bool_fun_fun$ D_c_llist_fun$ )Bool )
(declare-fun mcont$b (D_set_d_fun$ D_d_bool_fun_fun$ D_set_d_fun$ D_d_bool_fun_fun$ D_d_fun$ )Bool )
(declare-fun mcont$c (C_llist_set_c_llist_fun$ C_llist_c_llist_bool_fun_fun$ C_llist_set_c_llist_fun$ C_llist_c_llist_bool_fun_fun$ C_llist_c_llist_fun$ )Bool )
(declare-fun fun_app$ (C_llist_d_fun$ C_llist$ )D$ )
(declare-fun less_eq$ ()D_d_bool_fun_fun$ )
(declare-fun lprefix$ ()C_llist_c_llist_bool_fun_fun$ )
(declare-fun fun_app$a (C_c_llist_d_fun_fun$ C$ )C_llist_d_fun$ )
(declare-fun fun_app$b (C_llist_c_llist_d_fun_fun$ C_llist$ )C_llist_d_fun$ )
(declare-fun fun_app$c (C_llist_c_llist_fun$ C_llist$ )C_llist$ )
(declare-fun fun_app$d (C_llist_c_llist_fun_c_llist_c_llist_fun_fun$ C_llist_c_llist_fun$ )C_llist_c_llist_fun$ )
(declare-fun fun_app$e (C_llist_c_llist_c_llist_fun_fun$ C_llist$ )C_llist_c_llist_fun$ )
(declare-fun fun_app$f (C_llist_d_fun_c_llist_c_llist_fun_fun$ C_llist_d_fun$ )C_llist_c_llist_fun$ )
(declare-fun fun_app$g (D_c_llist_fun$ D$ )C_llist$ )
(declare-fun fun_app$h (C_llist_d_c_llist_fun_fun$ C_llist$ )D_c_llist_fun$ )
(declare-fun fun_app$i (D_c_llist_fun_d_c_llist_fun_fun$ D_c_llist_fun$ )D_c_llist_fun$ )
(declare-fun fun_app$j (D_c_llist_c_llist_fun_fun$ D$ )C_llist_c_llist_fun$ )
(declare-fun fun_app$k (D_d_fun_d_c_llist_fun_fun$ D_d_fun$ )D_c_llist_fun$ )
(declare-fun fun_app$l (D_d_c_llist_fun_fun$ D$ )D_c_llist_fun$ )
(declare-fun fun_app$m (D_d_fun$ D$ )D$ )
(declare-fun fun_app$n (C_llist_c_c_llist_d_fun_fun_fun$ C_llist$ )C_c_llist_d_fun_fun$ )
(declare-fun fun_app$o (C_c_llist_c_llist_d_fun_fun_fun$ C$ )C_llist_c_llist_d_fun_fun$ )
(declare-fun fun_app$p (D_c_c_llist_d_fun_fun_fun$ D$ )C_c_llist_d_fun_fun$ )
(declare-fun fun_app$q (C_llist_d_d_fun_fun$ C_llist$ )D_d_fun$ )
(declare-fun fun_app$r (C_c_llist_d_d_fun_fun_fun$ C$ )C_llist_d_d_fun_fun$ )
(declare-fun fun_app$s (C_c_llist_c_llist_d_fun_fun_fun_c_llist_c_llist_d_fun_fun_fun$ C_c_llist_c_llist_d_fun_fun_fun$ )C_llist_c_llist_d_fun_fun$ )
(declare-fun fun_app$t (C_c_llist_d_fun_fun_c_llist_d_fun_fun$ C_c_llist_d_fun_fun$ )C_llist_d_fun$ )
(declare-fun fun_app$u (C_c_llist_d_d_fun_fun_fun_c_llist_d_d_fun_fun_fun$ C_c_llist_d_d_fun_fun_fun$ )C_llist_d_d_fun_fun$ )
(declare-fun fun_app$v (C_llist_bool_fun$ C_llist$ )Bool )
(declare-fun fun_app$w (C_llist_c_llist_bool_fun_fun$ C_llist$ )C_llist_bool_fun$ )
(declare-fun case_llist$ (D$ )C_c_llist_d_fun_fun_c_llist_d_fun_fun$ )
(assert (! (forall ((?v0 C$ )(?v1 C_llist$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(fun_app$ (fun_app$b (f$ ?v0 )?v1 )(lCons$ ?v0 ?v1 ))):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 C_llist_c_llist_c_llist_fun_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 C_llist$ ))(! (= (fun_app$c (fun_app$d (uuf$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$e ?v0 ?v2 )(fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$d (uuf$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 C_llist_d_c_llist_fun_fun$ )(?v1 C_llist_d_fun$ )(?v2 C_llist$ ))(! (= (fun_app$c (fun_app$f (uuh$ ?v0 )?v1 )?v2 )(fun_app$g (fun_app$h ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$f (uuh$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 D_c_llist_c_llist_fun_fun$ )(?v1 D_c_llist_fun$ )(?v2 D$ ))(! (= (fun_app$g (fun_app$i (uud$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$j ?v0 ?v2 )(fun_app$g ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$i (uud$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 D_d_c_llist_fun_fun$ )(?v1 D_d_fun$ )(?v2 D$ ))(! (= (fun_app$g (fun_app$k (uub$ ?v0 )?v1 )?v2 )(fun_app$g (fun_app$l ?v0 ?v2 )(fun_app$m ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$k (uub$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 C_llist_c_llist_c_llist_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ ))(! (= (fun_app$c (fun_app$e (uue$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$e ?v0 ?v2 )?v1 )):pattern ((fun_app$c (fun_app$e (uue$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 C_llist_d_c_llist_fun_fun$ )(?v1 D$ )(?v2 C_llist$ ))(! (= (fun_app$c (fun_app$j (uug$ ?v0 )?v1 )?v2 )(fun_app$g (fun_app$h ?v0 ?v2 )?v1 )):pattern ((fun_app$c (fun_app$j (uug$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 D_c_llist_c_llist_fun_fun$ )(?v1 C_llist$ )(?v2 D$ ))(! (= (fun_app$g (fun_app$h (uuc$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$j ?v0 ?v2 )?v1 )):pattern ((fun_app$g (fun_app$h (uuc$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 D_d_c_llist_fun_fun$ )(?v1 D$ )(?v2 D$ ))(! (= (fun_app$g (fun_app$l (uua$ ?v0 )?v1 )?v2 )(fun_app$g (fun_app$l ?v0 ?v2 )?v1 )):pattern ((fun_app$g (fun_app$l (uua$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 C_llist_c_llist_fun$ )(?v1 C_llist_c_llist_fun$ )(?v2 C_llist$ ))(! (= (fun_app$c (fun_app$d (uuo$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$d (uuo$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 C_llist_c_llist_fun$ )(?v1 D_c_llist_fun$ )(?v2 D$ ))(! (= (fun_app$g (fun_app$i (uun$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$i (uun$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 D_c_llist_fun$ )(?v1 C_llist_d_fun$ )(?v2 C_llist$ ))(! (= (fun_app$c (fun_app$f (uup$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$f (uup$ ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 D_c_llist_fun$ )(?v1 D_d_fun$ )(?v2 D$ ))(! (= (fun_app$g (fun_app$k (uum$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$m ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$k (uum$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 C_c_llist_c_llist_d_fun_fun_fun$ )(?v1 C_llist$ )(?v2 C$ )(?v3 C_llist$ ))(! (= (fun_app$ (fun_app$a (fun_app$n (uuk$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$b (fun_app$o ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$ (fun_app$a (fun_app$n (uuk$ ?v0 )?v1 )?v2 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 C_c_llist_d_d_fun_fun_fun$ )(?v1 D$ )(?v2 C$ )(?v3 C_llist$ ))(! (= (fun_app$ (fun_app$a (fun_app$p (uui$ ?v0 )?v1 )?v2 )?v3 )(fun_app$m (fun_app$q (fun_app$r ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$ (fun_app$a (fun_app$p (uui$ ?v0 )?v1 )?v2 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 C_llist_d_fun$ )(?v1 C_c_llist_c_llist_d_fun_fun_fun$ )(?v2 C_llist$ )(?v3 C_llist$ ))(! (= (fun_app$ (fun_app$b (fun_app$s (uul$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$t (case_llist$ (fun_app$ ?v0 ?v3 ))(fun_app$n (uuk$ ?v1 )?v3 ))?v2 )):pattern ((fun_app$ (fun_app$b (fun_app$s (uul$ ?v0 )?v1 )?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 D_d_fun$ )(?v1 C_c_llist_d_d_fun_fun_fun$ )(?v2 C_llist$ )(?v3 D$ ))(! (= (fun_app$m (fun_app$q (fun_app$u (uuj$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$t (case_llist$ (fun_app$m ?v0 ?v3 ))(fun_app$p (uui$ ?v1 )?v3 ))?v2 )):pattern ((fun_app$m (fun_app$q (fun_app$u (uuj$ ?v0 )?v1 )?v2 )?v3 )))):named a16 ))
(assert (! (not (mcont$ lSup$ lprefix$ sup$ less_eq$ (fun_app$t (case_llist$ bot$ )uu$ ))):named a17 ))
(assert (! (forall ((?v0 C_llist$ ))(fun_app$v (fun_app$w lprefix$ ?v0 )?v0 )):named a18 ))
(assert (! (forall ((?v0 C_llist$ ))(fun_app$v (fun_app$w lprefix$ ?v0 )?v0 )):named a19 ))
(assert (! (forall ((?v0 C$ )(?v1 C_llist$ )(?v2 C$ )(?v3 C_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a20 ))
(assert (! (forall ((?v0 C$ ))(mcont$ lSup$ lprefix$ sup$ less_eq$ (fun_app$a uu$ ?v0 ))):named a21 ))
(assert (! (forall ((?v0 C$ )(?v1 C_llist$ )(?v2 C$ )(?v3 C_llist$ ))(! (= (fun_app$v (fun_app$w lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$v (fun_app$w lprefix$ ?v1 )?v3 ))):pattern ((fun_app$v (fun_app$w lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a22 ))
(assert (! (forall ((?v0 C$ )(?v1 C_llist$ )(?v2 C_llist$ ))(= (fun_app$v (fun_app$w lprefix$ (lCons$ ?v0 ?v1 ))?v2 )(exists ((?v3 C_llist$ ))(and (= ?v2 (lCons$ ?v0 ?v3 ))(fun_app$v (fun_app$w lprefix$ ?v1 )?v3 ))))):named a23 ))
(assert (! (forall ((?v0 D$ )(?v1 C_c_llist_d_fun_fun$ )(?v2 C$ )(?v3 C_llist$ ))(! (= (fun_app$ (fun_app$t (case_llist$ ?v0 )?v1 )(lCons$ ?v2 ?v3 ))(fun_app$ (fun_app$a ?v1 ?v2 )?v3 )):pattern ((fun_app$ (fun_app$t (case_llist$ ?v0 )?v1 )(lCons$ ?v2 ?v3 ))))):named a24 ))
(assert (! (forall ((?v0 D_set_d_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 D_d_c_llist_fun_fun$ )(?v3 D_set_d_fun$ )(?v4 D_d_bool_fun_fun$ )(?v5 D_d_fun$ ))(=> (and (forall ((?v6 D$ ))(mcont$a ?v0 ?v1 lSup$ lprefix$ (fun_app$l ?v2 ?v6 )))(and (forall ((?v6 D$ ))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$l (uua$ ?v2 )?v6 )))(mcont$b ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$k (uub$ ?v2 )?v5 )))):named a25 ))
(assert (! (forall ((?v0 C_llist_set_c_llist_fun$ )(?v1 C_llist_c_llist_bool_fun_fun$ )(?v2 D_c_llist_c_llist_fun_fun$ )(?v3 D_set_d_fun$ )(?v4 D_d_bool_fun_fun$ )(?v5 D_c_llist_fun$ ))(=> (and (forall ((?v6 D$ ))(mcont$c ?v0 ?v1 lSup$ lprefix$ (fun_app$j ?v2 ?v6 )))(and (forall ((?v6 C_llist$ ))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$h (uuc$ ?v2 )?v6 )))(mcont$a ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$i (uud$ ?v2 )?v5 )))):named a26 ))
(assert (! (forall ((?v0 C_llist_set_c_llist_fun$ )(?v1 C_llist_c_llist_bool_fun_fun$ )(?v2 C_llist_c_llist_c_llist_fun_fun$ )(?v3 C_llist_set_c_llist_fun$ )(?v4 C_llist_c_llist_bool_fun_fun$ )(?v5 C_llist_c_llist_fun$ ))(=> (and (forall ((?v6 C_llist$ ))(mcont$c ?v0 ?v1 lSup$ lprefix$ (fun_app$e ?v2 ?v6 )))(and (forall ((?v6 C_llist$ ))(mcont$c ?v3 ?v4 lSup$ lprefix$ (fun_app$e (uue$ ?v2 )?v6 )))(mcont$c ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$c ?v3 ?v4 lSup$ lprefix$ (fun_app$d (uuf$ ?v2 )?v5 )))):named a27 ))
(assert (! (forall ((?v0 D_set_d_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 C_llist_d_c_llist_fun_fun$ )(?v3 C_llist_set_c_llist_fun$ )(?v4 C_llist_c_llist_bool_fun_fun$ )(?v5 C_llist_d_fun$ ))(=> (and (forall ((?v6 C_llist$ ))(mcont$a ?v0 ?v1 lSup$ lprefix$ (fun_app$h ?v2 ?v6 )))(and (forall ((?v6 D$ ))(mcont$c ?v3 ?v4 lSup$ lprefix$ (fun_app$j (uug$ ?v2 )?v6 )))(mcont$ ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$c ?v3 ?v4 lSup$ lprefix$ (fun_app$f (uuh$ ?v2 )?v5 )))):named a28 ))
(assert (! (forall ((?v0 D_set_d_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 D_set_d_fun$ )(?v3 D_d_bool_fun_fun$ )(?v4 D_d_fun$ )(?v5 C_c_llist_d_d_fun_fun_fun$ )(?v6 C_llist$ ))(=> (and (mcont$b ?v0 ?v1 ?v2 ?v3 ?v4 )(forall ((?v7 C$ )(?v8 C_llist$ ))(mcont$b ?v0 ?v1 ?v2 ?v3 (fun_app$q (fun_app$r ?v5 ?v7 )?v8 ))))(mcont$b ?v0 ?v1 ?v2 ?v3 (fun_app$q (fun_app$u (uuj$ ?v4 )?v5 )?v6 )))):named a29 ))
(assert (! (forall ((?v0 C_llist_set_c_llist_fun$ )(?v1 C_llist_c_llist_bool_fun_fun$ )(?v2 D_set_d_fun$ )(?v3 D_d_bool_fun_fun$ )(?v4 C_llist_d_fun$ )(?v5 C_c_llist_c_llist_d_fun_fun_fun$ )(?v6 C_llist$ ))(=> (and (mcont$ ?v0 ?v1 ?v2 ?v3 ?v4 )(forall ((?v7 C$ )(?v8 C_llist$ ))(mcont$ ?v0 ?v1 ?v2 ?v3 (fun_app$b (fun_app$o ?v5 ?v7 )?v8 ))))(mcont$ ?v0 ?v1 ?v2 ?v3 (fun_app$b (fun_app$s (uul$ ?v4 )?v5 )?v6 )))):named a30 ))
(assert (! (forall ((?v0 D_set_d_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 D_c_llist_fun$ )(?v3 D_set_d_fun$ )(?v4 D_d_bool_fun_fun$ )(?v5 D_d_fun$ ))(=> (and (mcont$a ?v0 ?v1 lSup$ lprefix$ ?v2 )(mcont$b ?v3 ?v4 ?v0 ?v1 ?v5 ))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$k (uum$ ?v2 )?v5 )))):named a31 ))
(assert (! (forall ((?v0 C_llist_set_c_llist_fun$ )(?v1 C_llist_c_llist_bool_fun_fun$ )(?v2 C_llist_c_llist_fun$ )(?v3 D_set_d_fun$ )(?v4 D_d_bool_fun_fun$ )(?v5 D_c_llist_fun$ ))(=> (and (mcont$c ?v0 ?v1 lSup$ lprefix$ ?v2 )(mcont$a ?v3 ?v4 ?v0 ?v1 ?v5 ))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$i (uun$ ?v2 )?v5 )))):named a32 ))
(assert (! (forall ((?v0 C_llist_set_c_llist_fun$ )(?v1 C_llist_c_llist_bool_fun_fun$ )(?v2 C_llist_c_llist_fun$ )(?v3 C_llist_set_c_llist_fun$ )(?v4 C_llist_c_llist_bool_fun_fun$ )(?v5 C_llist_c_llist_fun$ ))(=> (and (mcont$c ?v0 ?v1 lSup$ lprefix$ ?v2 )(mcont$c ?v3 ?v4 ?v0 ?v1 ?v5 ))(mcont$c ?v3 ?v4 lSup$ lprefix$ (fun_app$d (uuo$ ?v2 )?v5 )))):named a33 ))
(assert (! (forall ((?v0 D_set_d_fun$ )(?v1 D_d_bool_fun_fun$ )(?v2 D_c_llist_fun$ )(?v3 C_llist_set_c_llist_fun$ )(?v4 C_llist_c_llist_bool_fun_fun$ )(?v5 C_llist_d_fun$ ))(=> (and (mcont$a ?v0 ?v1 lSup$ lprefix$ ?v2 )(mcont$ ?v3 ?v4 ?v0 ?v1 ?v5 ))(mcont$c ?v3 ?v4 lSup$ lprefix$ (fun_app$f (uup$ ?v2 )?v5 )))):named a34 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(=> (and (fun_app$v (fun_app$w lprefix$ ?v0 )?v1 )(fun_app$v (fun_app$w lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a35 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(=> (and (fun_app$v (fun_app$w lprefix$ ?v0 )?v1 )(fun_app$v (fun_app$w lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (and (fun_app$v (fun_app$w lprefix$ ?v0 )?v1 )(fun_app$v (fun_app$w lprefix$ ?v2 )?v1 ))(or (fun_app$v (fun_app$w lprefix$ ?v0 )?v2 )(fun_app$v (fun_app$w lprefix$ ?v2 )?v0 )))):named a37 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (and (fun_app$v (fun_app$w lprefix$ ?v0 )?v1 )(fun_app$v (fun_app$w lprefix$ ?v1 )?v2 ))(fun_app$v (fun_app$w lprefix$ ?v0 )?v2 ))):named a38 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (and (fun_app$v (fun_app$w lprefix$ ?v0 )?v1 )(fun_app$v (fun_app$w lprefix$ ?v1 )?v2 ))(fun_app$v (fun_app$w lprefix$ ?v0 )?v2 ))):named a39 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C$ ))(=> (fun_app$v (fun_app$w lprefix$ ?v0 )?v1 )(fun_app$v (fun_app$w lprefix$ (lCons$ ?v2 ?v0 ))(lCons$ ?v2 ?v1 )))):named a40 ))
(check-sat )
;(get-unsat-core )
