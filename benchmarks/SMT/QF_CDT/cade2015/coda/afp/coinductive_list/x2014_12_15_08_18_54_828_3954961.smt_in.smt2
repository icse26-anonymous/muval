;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort Nat_a_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun n$ ()Nat$ )
(declare-fun xs$ ()A_list$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun nth$ (A_list$ )Nat_a_fun$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun minus$ (Nat$ Nat$ )Nat$ )
(declare-fun fun_app$ (Nat_a_fun$ Nat$ )A$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (Nat_a_bool_fun_fun$ Nat$ )A_bool_fun$ )
(declare-fun fun_app$c (A_list_bool_fun$ A_list$ )Bool )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(assert (! (not (= (fun_app$ (lnth$ (lappend$ (llist_of$ xs$ )ys$ ))n$ )(ite (less$ n$ (size$ xs$ ))(fun_app$ (nth$ xs$ )n$ )(fun_app$ (lnth$ ys$ )(minus$ n$ (size$ xs$ )))))):named a0 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(= (lnth$ (llist_of$ ?v0 ))(nth$ ?v0 ))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= ?v0 ?v1 )(and (= (size$ ?v0 )(size$ ?v1 ))(forall ((?v2 Nat$ ))(=> (less$ ?v2 (size$ ?v0 ))(= (fun_app$ (nth$ ?v0 )?v2 )(fun_app$ (nth$ ?v1 )?v2 ))))))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_a_bool_fun_fun$ ))(= (forall ((?v2 Nat$ ))(=> (less$ ?v2 ?v0 )(exists ((?v3 A$ ))(fun_app$a (fun_app$b ?v1 ?v2 )?v3 ))))(exists ((?v2 A_list$ ))(and (= (size$ ?v2 )?v0 )(forall ((?v3 Nat$ ))(=> (less$ ?v3 ?v0 )(fun_app$a (fun_app$b ?v1 ?v3 )(fun_app$ (nth$ ?v2 )?v3 )))))))):named a5 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (and (= (size$ ?v0 )(size$ ?v1 ))(forall ((?v2 Nat$ ))(=> (less$ ?v2 (size$ ?v0 ))(= (fun_app$ (nth$ ?v0 )?v2 )(fun_app$ (nth$ ?v1 )?v2 )))))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$ ?v0 ?v1 )(less$ ?v0 ?v2 ))(less$ (minus$ ?v2 ?v1 )(minus$ ?v2 ?v0 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (less$ ?v0 ?v1 )(less$ (minus$ ?v0 ?v2 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_list_bool_fun$ )(?v1 A_list$ ))(=> (forall ((?v2 A_list$ ))(=> (forall ((?v3 A_list$ ))(=> (less$ (size$ ?v3 )(size$ ?v2 ))(fun_app$c ?v0 ?v3 )))(fun_app$c ?v0 ?v2 )))(fun_app$c ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (minus$ (minus$ ?v0 ?v1 )?v2 )(minus$ (minus$ ?v0 ?v2 )?v1 ))):named a10 ))
(check-sat )
;(get-unsat-core )
