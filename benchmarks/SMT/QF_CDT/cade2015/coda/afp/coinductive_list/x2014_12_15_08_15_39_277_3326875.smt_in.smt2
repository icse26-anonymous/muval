;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_set_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort Enat_a_llist_a_llist_fun_fun$ 0 )
(declare-sort Enat_a_llist_prod_a_llist_fun$ 0 )
(declare-sort Enat_a_llist_prod_a_llist_fun_bool_fun$ 0 )
(declare-sort Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_fun$ 0 )
(declare-sort Enat_a_llist_prod_a_llist_fun_set_enat_a_llist_prod_a_llist_fun_fun$ 0 )
(declare-sort Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_bool_fun_fun$ 0 )
(declare-sort Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_fun_enat_a_llist_prod_a_llist_fun_fun$ 0 )
(declare-sort Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_bool_fun_fun_enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_fun_enat_a_llist_prod_a_llist_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort Enat_a_llist_prod$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun fst$ (Enat_a_llist_prod$)Enat$)
(declare-fun snd$ (Enat_a_llist_prod$)A_llist$)
(declare-fun pair$ (Enat$ A_llist$ )Enat_a_llist_prod$)
(declare-fun f$ (Enat_a_llist_a_llist_fun_fun$ )Enat_a_llist_a_llist_fun_fun$ )
(declare-fun na$ ()Enat$ )
(declare-fun uu$ ()Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun fixp$ (Enat_a_llist_prod_a_llist_fun_set_enat_a_llist_prod_a_llist_fun_fun$ )Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_bool_fun_fun_enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_fun_enat_a_llist_prod_a_llist_fun_fun_fun$ )
(declare-fun lSup$ ()A_llist_set_a_llist_fun$ )
(declare-fun curry$ (Enat_a_llist_prod_a_llist_fun$ )Enat_a_llist_a_llist_fun_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_fun$ Enat_a_llist_prod_a_llist_fun$ )Enat_a_llist_prod_a_llist_fun$ )
(declare-fun fun_lub$ (A_llist_set_a_llist_fun$ )Enat_a_llist_prod_a_llist_fun_set_enat_a_llist_prod_a_llist_fun_fun$ )
(declare-fun fun_ord$ (A_llist_a_llist_bool_fun_fun$ )Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_bool_fun_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (Enat_a_llist_a_llist_fun_fun$ Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$c (Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_fun_enat_a_llist_prod_a_llist_fun_fun$ Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_fun$ )Enat_a_llist_prod_a_llist_fun$ )
(declare-fun fun_app$d (Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_bool_fun_fun_enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_fun_enat_a_llist_prod_a_llist_fun_fun_fun$ Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_bool_fun_fun$ )Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_fun_enat_a_llist_prod_a_llist_fun_fun$ )
(declare-fun fun_app$e (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$f (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$g (A_llist_set_a_llist_fun$ A_llist_set$ )A_llist$ )
(declare-fun fun_app$h (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$i (Enat_a_llist_prod_a_llist_fun_bool_fun$ Enat_a_llist_prod_a_llist_fun$ )Bool )
(declare-fun fun_app$j (Enat_a_llist_prod_a_llist_fun_enat_a_llist_prod_a_llist_fun_bool_fun_fun$ Enat_a_llist_prod_a_llist_fun$ )Enat_a_llist_prod_a_llist_fun_bool_fun$ )
(declare-fun case_prod$ (Enat_a_llist_a_llist_fun_fun$ )Enat_a_llist_prod_a_llist_fun$ )
(assert (! (forall ((?v0 Enat_a_llist_prod_a_llist_fun$ ))(! (= (fun_app$ uu$ ?v0 )(case_prod$ (f$ (curry$ ?v0 )))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (and (= (lnull$ (ltake$ na$ xsa$ ))(lnull$ (fun_app$a (fun_app$b (curry$ (fun_app$c (fun_app$d (fixp$ (fun_lub$ lSup$ ))(fun_ord$ lprefix$ ))uu$ ))na$ )xsa$ )))(=> (and (not (lnull$ (ltake$ na$ xsa$ )))(not (lnull$ (fun_app$a (fun_app$b (curry$ (fun_app$c (fun_app$d (fixp$ (fun_lub$ lSup$ ))(fun_ord$ lprefix$ ))uu$ ))na$ )xsa$ ))))(and (= (lhd$ (ltake$ na$ xsa$ ))(lhd$ (fun_app$a (fun_app$b (curry$ (fun_app$c (fun_app$d (fixp$ (fun_lub$ lSup$ ))(fun_ord$ lprefix$ ))uu$ ))na$ )xsa$ )))(exists ((?v0 Enat$ )(?v1 A_llist$ ))(and (= (ltl$ (ltake$ na$ xsa$ ))(ltake$ ?v0 ?v1 ))(= (ltl$ (fun_app$a (fun_app$b (curry$ (fun_app$c (fun_app$d (fixp$ (fun_lub$ lSup$ ))(fun_ord$ lprefix$ ))uu$ ))na$ )xsa$ ))(fun_app$a (fun_app$b (curry$ (fun_app$c (fun_app$d (fixp$ (fun_lub$ lSup$ ))(fun_ord$ lprefix$ ))uu$ ))?v0 )?v1 )))))))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$e (fun_app$f lprefix$ ?v0 )?v0 )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$e (fun_app$f lprefix$ ?v0 )?v0 )):named a3 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (lnull$ (fun_app$g lSup$ ?v0 ))(forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))):named a4 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(fun_app$e (fun_app$f lprefix$ (ltake$ ?v0 ?v1 ))?v1 )):named a5 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (not (lnull$ (fun_app$g lSup$ ?v0 )))(not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (=> (or (lnull$ ?v0 )(not (fun_app$h ?v1 (lhd$ ?v0 ))))false )(=> (and (not (lnull$ ?v0 ))(fun_app$h ?v1 (lhd$ ?v0 )))false ))false )):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a8 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (=> (not (lnull$ ?v0 ))(and (not (lnull$ ?v1 ))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(fun_app$e (fun_app$f lprefix$ (ltl$ ?v0 ))(ltl$ ?v1 )))))(fun_app$e (fun_app$f lprefix$ ?v0 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a12 ))
(assert (! (forall ((?v0 Enat_a_llist_prod_a_llist_fun$ )(?v1 Enat_a_llist_prod_a_llist_fun$ )(?v2 Enat_a_llist_prod_a_llist_fun$ ))(=> (and (fun_app$i (fun_app$j (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$i (fun_app$j (fun_ord$ lprefix$ )?v1 )?v2 ))(fun_app$i (fun_app$j (fun_ord$ lprefix$ )?v0 )?v2 ))):named a13 ))
(assert (! (forall ((?v0 Enat_a_llist_prod_a_llist_fun$ )(?v1 Enat_a_llist_prod_a_llist_fun$ ))(=> (and (fun_app$i (fun_app$j (fun_ord$ lprefix$ )?v0 )?v1 )(fun_app$i (fun_app$j (fun_ord$ lprefix$ )?v1 )?v0 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (= (lnull$ ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(= (ltl$ ?v0 )(ltl$ ?v1 )))))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))(lnull$ (fun_app$g lSup$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(fun_app$e (fun_app$f lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a18 ))
(check-sat )
;(get-unsat-core )
