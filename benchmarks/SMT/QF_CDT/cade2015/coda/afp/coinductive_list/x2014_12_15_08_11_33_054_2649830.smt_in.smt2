;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun$ 0 )
(declare-sort B_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_llist_set_a_llist_fun$ 0 )
(declare-sort B_llist_set_b_llist_fun$ 0 )
(declare-sort A_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_b_llist_a_llist_fun_fun$ 0 )
(declare-sort B_a_llist_b_llist_fun_fun$ 0 )
(declare-sort B_b_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_b_llist_fun_fun$ 0 )
(declare-sort B_llist_a_llist_a_llist_fun_fun$ 0 )
(declare-sort B_llist_a_llist_b_llist_fun_fun$ 0 )
(declare-sort B_llist_b_llist_a_llist_fun_fun$ 0 )
(declare-sort B_llist_b_llist_b_llist_fun_fun$ 0 )
(declare-sort A_a_llist_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort A_a_llist_b_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_a_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort B_llist_a_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ 0 )
(declare-sort B_llist_a_llist_fun_b_llist_a_llist_fun_fun$ 0 )
(declare-sort B_llist_a_llist_fun_b_llist_b_llist_fun_fun$ 0 )
(declare-sort B_llist_b_llist_fun_b_llist_a_llist_fun_fun$ 0 )
(declare-sort B_llist_b_llist_fun_b_llist_b_llist_fun_fun$ 0 )
(declare-sort A_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_a_llist_a_llist_b_llist_fun_fun_fun_a_llist_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort A_a_llist_b_llist_b_llist_fun_fun_fun_a_llist_b_llist_b_llist_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-fun f$ (A$ )A_llist_a_llist_b_llist_fun_fun$ )
(declare-fun uu$ (A_llist$ )A_a_llist_b_llist_fun_fun$ )
(declare-fun uua$ ()A_llist_b_llist_fun$ )
(declare-fun uub$ (A$ )A_llist_b_llist_fun$ )
(declare-fun uuc$ (A_llist_a_llist_a_llist_fun_fun$ )A_llist_a_llist_a_llist_fun_fun$ )
(declare-fun uud$ (A_llist_a_llist_a_llist_fun_fun$ )A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uue$ (B_llist_a_llist_a_llist_fun_fun$ )A_llist_b_llist_a_llist_fun_fun$ )
(declare-fun uuf$ (B_llist_a_llist_a_llist_fun_fun$ )B_llist_a_llist_fun_b_llist_a_llist_fun_fun$ )
(declare-fun uug$ (B_llist_b_llist_a_llist_fun_fun$ )B_llist_b_llist_a_llist_fun_fun$ )
(declare-fun uuh$ (B_llist_b_llist_a_llist_fun_fun$ )B_llist_b_llist_fun_b_llist_a_llist_fun_fun$ )
(declare-fun uui$ (B_llist_a_llist_b_llist_fun_fun$ )A_llist_b_llist_b_llist_fun_fun$ )
(declare-fun uuj$ (B_llist_a_llist_b_llist_fun_fun$ )B_llist_a_llist_fun_b_llist_b_llist_fun_fun$ )
(declare-fun uuk$ (B_llist_b_llist_b_llist_fun_fun$ )B_llist_b_llist_b_llist_fun_fun$ )
(declare-fun uul$ (B_llist_b_llist_b_llist_fun_fun$ )B_llist_b_llist_fun_b_llist_b_llist_fun_fun$ )
(declare-fun uum$ (A_llist_b_llist_a_llist_fun_fun$ )B_llist_a_llist_a_llist_fun_fun$ )
(declare-fun uun$ (A_llist_b_llist_a_llist_fun_fun$ )A_llist_b_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uuo$ (A_llist_b_llist_b_llist_fun_fun$ )B_llist_a_llist_b_llist_fun_fun$ )
(declare-fun uup$ (A_llist_b_llist_b_llist_fun_fun$ )A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )
(declare-fun uuq$ (A_llist_a_llist_b_llist_fun_fun$ )A_llist_a_llist_b_llist_fun_fun$ )
(declare-fun uur$ (A_llist_a_llist_b_llist_fun_fun$ )A_llist_a_llist_fun_a_llist_b_llist_fun_fun$ )
(declare-fun uus$ (A_a_llist_b_llist_b_llist_fun_fun_fun$ )B_llist_a_a_llist_b_llist_fun_fun_fun$ )
(declare-fun uut$ (B_llist_b_llist_fun$ )A_a_llist_b_llist_b_llist_fun_fun_fun_a_llist_b_llist_b_llist_fun_fun_fun$ )
(declare-fun uuu$ (A_a_llist_a_llist_b_llist_fun_fun_fun$ )A_llist_a_a_llist_b_llist_fun_fun_fun$ )
(declare-fun uuv$ (A_llist_b_llist_fun$ )A_a_llist_a_llist_b_llist_fun_fun_fun_a_llist_a_llist_b_llist_fun_fun_fun$ )
(declare-fun uuw$ (A_llist_a_llist_fun$ )A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uux$ (A_llist_a_llist_fun$ )B_llist_a_llist_fun_b_llist_a_llist_fun_fun$ )
(declare-fun uuy$ (B_llist_a_llist_fun$ )B_llist_b_llist_fun_b_llist_a_llist_fun_fun$ )
(declare-fun uuz$ (A_llist_b_llist_fun$ )B_llist_a_llist_fun_b_llist_b_llist_fun_fun$ )
(declare-fun uva$ (B_llist_b_llist_fun$ )B_llist_b_llist_fun_b_llist_b_llist_fun_fun$ )
(declare-fun uvb$ (B_llist_a_llist_fun$ )A_llist_b_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uvc$ (B_llist_b_llist_fun$ )A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )
(declare-fun uvd$ (A_llist_b_llist_fun$ )A_llist_a_llist_fun_a_llist_b_llist_fun_fun$ )
(declare-fun uve$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun uvf$ (A_llist$ )B_llist_a_llist_fun$ )
(declare-fun uvg$ (B_llist$ )B_llist_b_llist_fun$ )
(declare-fun uvh$ (B_llist$ )A_llist_b_llist_fun$ )
(declare-fun uvi$ (B$ )B_llist_b_llist_fun$ )
(declare-fun uvj$ (A$ )A_llist_a_llist_fun$ )
(declare-fun uvk$ (A_llist_a_llist_fun$ )A_a_llist_a_llist_fun_fun$ )
(declare-fun uvl$ (B_llist_a_llist_fun$ )A_b_llist_a_llist_fun_fun$ )
(declare-fun uvm$ (B_llist_b_llist_fun$ )B_b_llist_b_llist_fun_fun$ )
(declare-fun uvn$ (A_llist_b_llist_fun$ )B_a_llist_b_llist_fun_fun$ )
(declare-fun lSup$ ()A_llist_set_a_llist_fun$ )
(declare-fun lSup$a ()B_llist_set_b_llist_fun$ )
(declare-fun mcont$ (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ B_llist_set_b_llist_fun$ B_llist_b_llist_bool_fun_fun$ A_llist_b_llist_fun$ )Bool )
(declare-fun mcont$a (A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun mcont$b (B_llist_set_b_llist_fun$ B_llist_b_llist_bool_fun_fun$ A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ B_llist_a_llist_fun$ )Bool )
(declare-fun mcont$c (B_llist_set_b_llist_fun$ B_llist_b_llist_bool_fun_fun$ B_llist_set_b_llist_fun$ B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_fun$ )Bool )
(declare-fun fun_app$ (A_llist_b_llist_fun$ A_llist$ )B_llist$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun$ A_a_llist_b_llist_fun_fun$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$b (A_llist_a_llist_b_llist_fun_fun$ A_llist$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$c (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$d (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$e (A_a_llist_b_llist_fun_fun$ A$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$f (B_llist_b_llist_fun_b_llist_b_llist_fun_fun$ B_llist_b_llist_fun$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$g (B_llist_b_llist_b_llist_fun_fun$ B_llist$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$h (B_llist_a_llist_fun$ B_llist$ )A_llist$ )
(declare-fun fun_app$i (B_llist_b_llist_fun_b_llist_a_llist_fun_fun$ B_llist_b_llist_fun$ )B_llist_a_llist_fun$ )
(declare-fun fun_app$j (B_llist_b_llist_a_llist_fun_fun$ B_llist$ )B_llist_a_llist_fun$ )
(declare-fun fun_app$k (B_llist_a_llist_fun_b_llist_b_llist_fun_fun$ B_llist_a_llist_fun$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$l (B_llist_a_llist_b_llist_fun_fun$ B_llist$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$m (B_llist_a_llist_fun_b_llist_a_llist_fun_fun$ B_llist_a_llist_fun$ )B_llist_a_llist_fun$ )
(declare-fun fun_app$n (B_llist_a_llist_a_llist_fun_fun$ B_llist$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$o (A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ A_llist_b_llist_fun$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$p (A_llist_b_llist_b_llist_fun_fun$ A_llist$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$q (A_llist_b_llist_fun_a_llist_a_llist_fun_fun$ A_llist_b_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$r (A_llist_b_llist_a_llist_fun_fun$ A_llist$ )B_llist_a_llist_fun$ )
(declare-fun fun_app$s (A_llist_a_llist_fun_a_llist_b_llist_fun_fun$ A_llist_a_llist_fun$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$t (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$u (A_llist_a_llist_a_llist_fun_fun$ A_llist$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$v (B_b_llist_b_llist_fun_fun$ B$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$w (A_b_llist_a_llist_fun_fun$ A$ )B_llist_a_llist_fun$ )
(declare-fun fun_app$x (B_a_llist_b_llist_fun_fun$ B$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$y (A_a_llist_a_llist_fun_fun$ A$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$z (B_llist_a_a_llist_b_llist_fun_fun_fun$ B_llist$ )A_a_llist_b_llist_fun_fun$ )
(declare-fun lprefix$a ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun fun_app$aa (A_a_llist_b_llist_b_llist_fun_fun_fun$ A$ )A_llist_b_llist_b_llist_fun_fun$ )
(declare-fun fun_app$ab (A_llist_a_a_llist_b_llist_fun_fun_fun$ A_llist$ )A_a_llist_b_llist_fun_fun$ )
(declare-fun fun_app$ac (A_a_llist_a_llist_b_llist_fun_fun_fun$ A$ )A_llist_a_llist_b_llist_fun_fun$ )
(declare-fun fun_app$ad (A_a_llist_a_llist_b_llist_fun_fun_fun_a_llist_a_llist_b_llist_fun_fun_fun$ A_a_llist_a_llist_b_llist_fun_fun_fun$ )A_llist_a_llist_b_llist_fun_fun$ )
(declare-fun fun_app$ae (A_a_llist_b_llist_b_llist_fun_fun_fun_a_llist_b_llist_b_llist_fun_fun_fun$ A_a_llist_b_llist_b_llist_fun_fun_fun$ )A_llist_b_llist_b_llist_fun_fun$ )
(declare-fun fun_app$af (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$ag (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$ah (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$ai (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun case_llist$ (B_llist$ )A_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun$ )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uua$ ?v0 )(fun_app$ (fun_app$a (case_llist$ lNil$a )(uu$ ?v0 ))?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$ (uub$ ?v0 )?v1 )(fun_app$ (fun_app$b (f$ ?v0 )?v1 )(lCons$ ?v0 ?v1 ))):pattern ((fun_app$ (uub$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (fun_app$c (uvi$ ?v0 )?v1 )(lCons$a ?v0 ?v1 )):pattern ((fun_app$c (uvi$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$d (uvj$ ?v0 )?v1 )(lCons$ ?v0 ?v1 )):pattern ((fun_app$d (uvj$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$e (uu$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$b (f$ ?v1 )?v2 )?v0 )):pattern ((fun_app$ (fun_app$e (uu$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 B_llist_b_llist_b_llist_fun_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$c (fun_app$f (uul$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$g ?v0 ?v2 )(fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$f (uul$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 B_llist_b_llist_a_llist_fun_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$h (fun_app$i (uuh$ ?v0 )?v1 )?v2 )(fun_app$h (fun_app$j ?v0 ?v2 )(fun_app$c ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$i (uuh$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 B_llist_a_llist_b_llist_fun_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$c (fun_app$k (uuj$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$l ?v0 ?v2 )(fun_app$h ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$k (uuj$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 B_llist_a_llist_a_llist_fun_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$h (fun_app$m (uuf$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$n ?v0 ?v2 )(fun_app$h ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$m (uuf$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_llist_b_llist_b_llist_fun_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$o (uup$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$p ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$o (uup$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_b_llist_a_llist_fun_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$d (fun_app$q (uun$ ?v0 )?v1 )?v2 )(fun_app$h (fun_app$r ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$q (uun$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_llist_a_llist_b_llist_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$s (uur$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$b ?v0 ?v2 )(fun_app$d ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$s (uur$ ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_llist_a_llist_a_llist_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$d (fun_app$t (uud$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$u ?v0 ?v2 )(fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$t (uud$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 B_llist_b_llist_b_llist_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(! (= (fun_app$c (fun_app$g (uuk$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$g ?v0 ?v2 )?v1 )):pattern ((fun_app$c (fun_app$g (uuk$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 B_llist_b_llist_a_llist_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(! (= (fun_app$h (fun_app$j (uug$ ?v0 )?v1 )?v2 )(fun_app$h (fun_app$j ?v0 ?v2 )?v1 )):pattern ((fun_app$h (fun_app$j (uug$ ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 B_llist_a_llist_b_llist_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(! (= (fun_app$c (fun_app$p (uui$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$l ?v0 ?v2 )?v1 )):pattern ((fun_app$c (fun_app$p (uui$ ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 B_llist_a_llist_a_llist_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(! (= (fun_app$h (fun_app$r (uue$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$n ?v0 ?v2 )?v1 )):pattern ((fun_app$h (fun_app$r (uue$ ?v0 )?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_b_llist_b_llist_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$l (uuo$ ?v0 )?v1 )?v2 )(fun_app$c (fun_app$p ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$l (uuo$ ?v0 )?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_llist_b_llist_a_llist_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(! (= (fun_app$d (fun_app$n (uum$ ?v0 )?v1 )?v2 )(fun_app$h (fun_app$r ?v0 ?v2 )?v1 )):pattern ((fun_app$d (fun_app$n (uum$ ?v0 )?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_llist_a_llist_b_llist_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$b (uuq$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$b ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$b (uuq$ ?v0 )?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_llist_a_llist_a_llist_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$d (fun_app$u (uuc$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$u ?v0 ?v2 )?v1 )):pattern ((fun_app$d (fun_app$u (uuc$ ?v0 )?v1 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (fun_app$c (fun_app$v (uvm$ ?v0 )?v1 )?v2 )(lCons$a ?v1 (fun_app$c ?v0 ?v2 ))):pattern ((fun_app$c (fun_app$v (uvm$ ?v0 )?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 A$ )(?v2 B_llist$ ))(! (= (fun_app$h (fun_app$w (uvl$ ?v0 )?v1 )?v2 )(lCons$ ?v1 (fun_app$h ?v0 ?v2 ))):pattern ((fun_app$h (fun_app$w (uvl$ ?v0 )?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 B$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$x (uvn$ ?v0 )?v1 )?v2 )(lCons$a ?v1 (fun_app$ ?v0 ?v2 ))):pattern ((fun_app$ (fun_app$x (uvn$ ?v0 )?v1 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$d (fun_app$y (uvk$ ?v0 )?v1 )?v2 )(lCons$ ?v1 (fun_app$d ?v0 ?v2 ))):pattern ((fun_app$d (fun_app$y (uvk$ ?v0 )?v1 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$c (fun_app$f (uva$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$f (uva$ ?v0 )?v1 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$o (uvc$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$o (uvc$ ?v0 )?v1 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$h (fun_app$i (uuy$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$i (uuy$ ?v0 )?v1 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$d (fun_app$q (uvb$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$q (uvb$ ?v0 )?v1 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$c (fun_app$k (uuz$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$h ?v1 ?v2 ))):pattern ((fun_app$c (fun_app$k (uuz$ ?v0 )?v1 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$s (uvd$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$s (uvd$ ?v0 )?v1 )?v2 )))):named a30 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$h (fun_app$m (uux$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$h ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$m (uux$ ?v0 )?v1 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$d (fun_app$t (uuw$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$t (uuw$ ?v0 )?v1 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 A_a_llist_b_llist_b_llist_fun_fun_fun$ )(?v1 B_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$ (fun_app$e (fun_app$z (uus$ ?v0 )?v1 )?v2 )?v3 )(fun_app$c (fun_app$p (fun_app$aa ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$ (fun_app$e (fun_app$z (uus$ ?v0 )?v1 )?v2 )?v3 )))):named a33 ))
(assert (! (forall ((?v0 A_a_llist_a_llist_b_llist_fun_fun_fun$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$ (fun_app$e (fun_app$ab (uuu$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$b (fun_app$ac ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$ (fun_app$e (fun_app$ab (uuu$ ?v0 )?v1 )?v2 )?v3 )))):named a34 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 A_a_llist_a_llist_b_llist_fun_fun_fun$ )(?v2 A_llist$ )(?v3 A_llist$ ))(! (= (fun_app$ (fun_app$b (fun_app$ad (uuv$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$a (case_llist$ (fun_app$ ?v0 ?v3 ))(fun_app$ab (uuu$ ?v1 )?v3 ))?v2 )):pattern ((fun_app$ (fun_app$b (fun_app$ad (uuv$ ?v0 )?v1 )?v2 )?v3 )))):named a35 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 A_a_llist_b_llist_b_llist_fun_fun_fun$ )(?v2 A_llist$ )(?v3 B_llist$ ))(! (= (fun_app$c (fun_app$p (fun_app$ae (uut$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$a (case_llist$ (fun_app$c ?v0 ?v3 ))(fun_app$z (uus$ ?v1 )?v3 ))?v2 )):pattern ((fun_app$c (fun_app$p (fun_app$ae (uut$ ?v0 )?v1 )?v2 )?v3 )))):named a36 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$c (uvg$ ?v0 )?v1 )?v0 ):pattern ((fun_app$c (uvg$ ?v0 )?v1 )))):named a37 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(! (= (fun_app$ (uvh$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (uvh$ ?v0 )?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(! (= (fun_app$h (uvf$ ?v0 )?v1 )?v0 ):pattern ((fun_app$h (uvf$ ?v0 )?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$d (uve$ ?v0 )?v1 )?v0 ):pattern ((fun_app$d (uve$ ?v0 )?v1 )))):named a40 ))
(assert (! (not (mcont$ lSup$ lprefix$ lSup$a lprefix$a uua$ )):named a41 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$af (fun_app$ag lprefix$ ?v0 )?v0 )):named a42 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$ah (fun_app$ai lprefix$a ?v0 )?v0 )):named a43 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$af (fun_app$ag lprefix$ ?v0 )?v0 )):named a44 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$ah (fun_app$ai lprefix$a ?v0 )?v0 )):named a45 ))
(assert (! (forall ((?v0 A$ ))(mcont$ lSup$ lprefix$ lSup$a lprefix$a (uub$ ?v0 ))):named a46 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$af (fun_app$ag lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$af (fun_app$ag lprefix$ lNil$ )?v0 )))):named a47 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$ah (fun_app$ai lprefix$a lNil$a )?v0 )true ):pattern ((fun_app$ah (fun_app$ai lprefix$a lNil$a )?v0 )))):named a48 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_a_llist_b_llist_fun_fun$ ))(! (= (fun_app$ (fun_app$a (case_llist$ ?v0 )?v1 )lNil$ )?v0 ):pattern ((fun_app$a (case_llist$ ?v0 )?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_a_llist_fun_fun$ )(?v3 A_llist_set_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ )(?v5 A_llist_a_llist_fun$ ))(=> (and (forall ((?v6 A_llist$ ))(mcont$a ?v0 ?v1 lSup$ lprefix$ (fun_app$u ?v2 ?v6 )))(and (forall ((?v6 A_llist$ ))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$u (uuc$ ?v2 )?v6 )))(mcont$a ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$t (uud$ ?v2 )?v5 )))):named a50 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 B_llist_a_llist_a_llist_fun_fun$ )(?v3 B_llist_set_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ )(?v5 B_llist_a_llist_fun$ ))(=> (and (forall ((?v6 B_llist$ ))(mcont$a ?v0 ?v1 lSup$ lprefix$ (fun_app$n ?v2 ?v6 )))(and (forall ((?v6 A_llist$ ))(mcont$b ?v3 ?v4 lSup$ lprefix$ (fun_app$r (uue$ ?v2 )?v6 )))(mcont$b ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$b ?v3 ?v4 lSup$ lprefix$ (fun_app$m (uuf$ ?v2 )?v5 )))):named a51 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_b_llist_a_llist_fun_fun$ )(?v3 B_llist_set_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ )(?v5 B_llist_b_llist_fun$ ))(=> (and (forall ((?v6 B_llist$ ))(mcont$b ?v0 ?v1 lSup$ lprefix$ (fun_app$j ?v2 ?v6 )))(and (forall ((?v6 B_llist$ ))(mcont$b ?v3 ?v4 lSup$ lprefix$ (fun_app$j (uug$ ?v2 )?v6 )))(mcont$c ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$b ?v3 ?v4 lSup$ lprefix$ (fun_app$i (uuh$ ?v2 )?v5 )))):named a52 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 B_llist_a_llist_b_llist_fun_fun$ )(?v3 B_llist_set_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ )(?v5 B_llist_a_llist_fun$ ))(=> (and (forall ((?v6 B_llist$ ))(mcont$ ?v0 ?v1 lSup$a lprefix$a (fun_app$l ?v2 ?v6 )))(and (forall ((?v6 A_llist$ ))(mcont$c ?v3 ?v4 lSup$a lprefix$a (fun_app$p (uui$ ?v2 )?v6 )))(mcont$b ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$c ?v3 ?v4 lSup$a lprefix$a (fun_app$k (uuj$ ?v2 )?v5 )))):named a53 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_b_llist_b_llist_fun_fun$ )(?v3 B_llist_set_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ )(?v5 B_llist_b_llist_fun$ ))(=> (and (forall ((?v6 B_llist$ ))(mcont$c ?v0 ?v1 lSup$a lprefix$a (fun_app$g ?v2 ?v6 )))(and (forall ((?v6 B_llist$ ))(mcont$c ?v3 ?v4 lSup$a lprefix$a (fun_app$g (uuk$ ?v2 )?v6 )))(mcont$c ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$c ?v3 ?v4 lSup$a lprefix$a (fun_app$f (uul$ ?v2 )?v5 )))):named a54 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 A_llist_b_llist_a_llist_fun_fun$ )(?v3 A_llist_set_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ )(?v5 A_llist_b_llist_fun$ ))(=> (and (forall ((?v6 A_llist$ ))(mcont$b ?v0 ?v1 lSup$ lprefix$ (fun_app$r ?v2 ?v6 )))(and (forall ((?v6 B_llist$ ))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$n (uum$ ?v2 )?v6 )))(mcont$ ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$q (uun$ ?v2 )?v5 )))):named a55 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 A_llist_b_llist_b_llist_fun_fun$ )(?v3 A_llist_set_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ )(?v5 A_llist_b_llist_fun$ ))(=> (and (forall ((?v6 A_llist$ ))(mcont$c ?v0 ?v1 lSup$a lprefix$a (fun_app$p ?v2 ?v6 )))(and (forall ((?v6 B_llist$ ))(mcont$ ?v3 ?v4 lSup$a lprefix$a (fun_app$l (uuo$ ?v2 )?v6 )))(mcont$ ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$ ?v3 ?v4 lSup$a lprefix$a (fun_app$o (uup$ ?v2 )?v5 )))):named a56 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_b_llist_fun_fun$ )(?v3 A_llist_set_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ )(?v5 A_llist_a_llist_fun$ ))(=> (and (forall ((?v6 A_llist$ ))(mcont$ ?v0 ?v1 lSup$a lprefix$a (fun_app$b ?v2 ?v6 )))(and (forall ((?v6 A_llist$ ))(mcont$ ?v3 ?v4 lSup$a lprefix$a (fun_app$b (uuq$ ?v2 )?v6 )))(mcont$a ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$ ?v3 ?v4 lSup$a lprefix$a (fun_app$s (uur$ ?v2 )?v5 )))):named a57 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_set_b_llist_fun$ )(?v3 B_llist_b_llist_bool_fun_fun$ )(?v4 B_llist_b_llist_fun$ )(?v5 A_a_llist_b_llist_b_llist_fun_fun_fun$ )(?v6 A_llist$ ))(=> (and (mcont$c ?v0 ?v1 ?v2 ?v3 ?v4 )(forall ((?v7 A$ )(?v8 A_llist$ ))(mcont$c ?v0 ?v1 ?v2 ?v3 (fun_app$p (fun_app$aa ?v5 ?v7 )?v8 ))))(mcont$c ?v0 ?v1 ?v2 ?v3 (fun_app$p (fun_app$ae (uut$ ?v4 )?v5 )?v6 )))):named a58 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 B_llist_set_b_llist_fun$ )(?v3 B_llist_b_llist_bool_fun_fun$ )(?v4 A_llist_b_llist_fun$ )(?v5 A_a_llist_a_llist_b_llist_fun_fun_fun$ )(?v6 A_llist$ ))(=> (and (mcont$ ?v0 ?v1 ?v2 ?v3 ?v4 )(forall ((?v7 A$ )(?v8 A_llist$ ))(mcont$ ?v0 ?v1 ?v2 ?v3 (fun_app$b (fun_app$ac ?v5 ?v7 )?v8 ))))(mcont$ ?v0 ?v1 ?v2 ?v3 (fun_app$b (fun_app$ad (uuv$ ?v4 )?v5 )?v6 )))):named a59 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist_set_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ )(?v5 A_llist_a_llist_fun$ ))(=> (and (mcont$a ?v0 ?v1 lSup$ lprefix$ ?v2 )(mcont$a ?v3 ?v4 ?v0 ?v1 ?v5 ))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$t (uuw$ ?v2 )?v5 )))):named a60 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 B_llist_set_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ )(?v5 B_llist_a_llist_fun$ ))(=> (and (mcont$a ?v0 ?v1 lSup$ lprefix$ ?v2 )(mcont$b ?v3 ?v4 ?v0 ?v1 ?v5 ))(mcont$b ?v3 ?v4 lSup$ lprefix$ (fun_app$m (uux$ ?v2 )?v5 )))):named a61 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 B_llist_set_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ )(?v5 B_llist_b_llist_fun$ ))(=> (and (mcont$b ?v0 ?v1 lSup$ lprefix$ ?v2 )(mcont$c ?v3 ?v4 ?v0 ?v1 ?v5 ))(mcont$b ?v3 ?v4 lSup$ lprefix$ (fun_app$i (uuy$ ?v2 )?v5 )))):named a62 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_b_llist_fun$ )(?v3 B_llist_set_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ )(?v5 B_llist_a_llist_fun$ ))(=> (and (mcont$ ?v0 ?v1 lSup$a lprefix$a ?v2 )(mcont$b ?v3 ?v4 ?v0 ?v1 ?v5 ))(mcont$c ?v3 ?v4 lSup$a lprefix$a (fun_app$k (uuz$ ?v2 )?v5 )))):named a63 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_b_llist_fun$ )(?v3 B_llist_set_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ )(?v5 B_llist_b_llist_fun$ ))(=> (and (mcont$c ?v0 ?v1 lSup$a lprefix$a ?v2 )(mcont$c ?v3 ?v4 ?v0 ?v1 ?v5 ))(mcont$c ?v3 ?v4 lSup$a lprefix$a (fun_app$f (uva$ ?v2 )?v5 )))):named a64 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 A_llist_set_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ )(?v5 A_llist_b_llist_fun$ ))(=> (and (mcont$b ?v0 ?v1 lSup$ lprefix$ ?v2 )(mcont$ ?v3 ?v4 ?v0 ?v1 ?v5 ))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$q (uvb$ ?v2 )?v5 )))):named a65 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_b_llist_fun$ )(?v3 A_llist_set_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ )(?v5 A_llist_b_llist_fun$ ))(=> (and (mcont$c ?v0 ?v1 lSup$a lprefix$a ?v2 )(mcont$ ?v3 ?v4 ?v0 ?v1 ?v5 ))(mcont$ ?v3 ?v4 lSup$a lprefix$a (fun_app$o (uvc$ ?v2 )?v5 )))):named a66 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_b_llist_fun$ )(?v3 A_llist_set_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ )(?v5 A_llist_a_llist_fun$ ))(=> (and (mcont$ ?v0 ?v1 lSup$a lprefix$a ?v2 )(mcont$a ?v3 ?v4 ?v0 ?v1 ?v5 ))(mcont$ ?v3 ?v4 lSup$a lprefix$a (fun_app$s (uvd$ ?v2 )?v5 )))):named a67 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$af (fun_app$ag lprefix$ ?v0 )?v1 )(fun_app$af (fun_app$ag lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a68 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$ah (fun_app$ai lprefix$a ?v0 )?v1 )(fun_app$ah (fun_app$ai lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a69 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$af (fun_app$ag lprefix$ ?v0 )?v1 )(fun_app$af (fun_app$ag lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a70 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$ah (fun_app$ai lprefix$a ?v0 )?v1 )(fun_app$ah (fun_app$ai lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a71 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$af (fun_app$ag lprefix$ ?v0 )?v1 )(fun_app$af (fun_app$ag lprefix$ ?v2 )?v1 ))(or (fun_app$af (fun_app$ag lprefix$ ?v0 )?v2 )(fun_app$af (fun_app$ag lprefix$ ?v2 )?v0 )))):named a72 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$ah (fun_app$ai lprefix$a ?v0 )?v1 )(fun_app$ah (fun_app$ai lprefix$a ?v2 )?v1 ))(or (fun_app$ah (fun_app$ai lprefix$a ?v0 )?v2 )(fun_app$ah (fun_app$ai lprefix$a ?v2 )?v0 )))):named a73 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$af (fun_app$ag lprefix$ ?v0 )?v1 )(fun_app$af (fun_app$ag lprefix$ ?v1 )?v2 ))(fun_app$af (fun_app$ag lprefix$ ?v0 )?v2 ))):named a74 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$ah (fun_app$ai lprefix$a ?v0 )?v1 )(fun_app$ah (fun_app$ai lprefix$a ?v1 )?v2 ))(fun_app$ah (fun_app$ai lprefix$a ?v0 )?v2 ))):named a75 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$af (fun_app$ag lprefix$ ?v0 )?v1 )(fun_app$af (fun_app$ag lprefix$ ?v1 )?v2 ))(fun_app$af (fun_app$ag lprefix$ ?v0 )?v2 ))):named a76 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$ah (fun_app$ai lprefix$a ?v0 )?v1 )(fun_app$ah (fun_app$ai lprefix$a ?v1 )?v2 ))(fun_app$ah (fun_app$ai lprefix$a ?v0 )?v2 ))):named a77 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist$ ))(mcont$a ?v0 ?v1 lSup$ lprefix$ (uve$ ?v2 ))):named a78 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 A_llist$ ))(mcont$b ?v0 ?v1 lSup$ lprefix$ (uvf$ ?v2 ))):named a79 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist$ ))(mcont$c ?v0 ?v1 lSup$a lprefix$a (uvg$ ?v2 ))):named a80 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 B_llist$ ))(mcont$ ?v0 ?v1 lSup$a lprefix$a (uvh$ ?v2 ))):named a81 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$af (fun_app$ag lprefix$ lNil$ )?v0 )):named a82 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$ah (fun_app$ai lprefix$a lNil$a )?v0 )):named a83 ))
(assert (! (forall ((?v0 B$ ))(mcont$c lSup$a lprefix$a lSup$a lprefix$a (uvi$ ?v0 ))):named a84 ))
(assert (! (forall ((?v0 A$ ))(mcont$a lSup$ lprefix$ lSup$ lprefix$ (uvj$ ?v0 ))):named a85 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 A$ ))(=> (mcont$a ?v0 ?v1 lSup$ lprefix$ ?v2 )(mcont$a ?v0 ?v1 lSup$ lprefix$ (fun_app$y (uvk$ ?v2 )?v3 )))):named a86 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 A$ ))(=> (mcont$b ?v0 ?v1 lSup$ lprefix$ ?v2 )(mcont$b ?v0 ?v1 lSup$ lprefix$ (fun_app$w (uvl$ ?v2 )?v3 )))):named a87 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_b_llist_fun$ )(?v3 B$ ))(=> (mcont$c ?v0 ?v1 lSup$a lprefix$a ?v2 )(mcont$c ?v0 ?v1 lSup$a lprefix$a (fun_app$v (uvm$ ?v2 )?v3 )))):named a88 ))
(assert (! (forall ((?v0 A_llist_set_a_llist_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_b_llist_fun$ )(?v3 B$ ))(=> (mcont$ ?v0 ?v1 lSup$a lprefix$a ?v2 )(mcont$ ?v0 ?v1 lSup$a lprefix$a (fun_app$x (uvn$ ?v2 )?v3 )))):named a89 ))
(check-sat )
;(get-unsat-core )
