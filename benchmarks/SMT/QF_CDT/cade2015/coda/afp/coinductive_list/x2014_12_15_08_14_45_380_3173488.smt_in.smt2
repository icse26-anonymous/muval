;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Enat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun zero$ ()Enat$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ltake$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun gen_lset$ (A_set$ )A_llist_a_set_fun$ )
(declare-fun ldistinct$ (A_llist$ )Bool )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(assert (! (not (= (= (fun_app$ (ltake$ n$ )xs$ )lNil$ )(or (= xs$ lNil$ )(= n$ zero$ )))):named a0 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ltake$ ?v0 )lNil$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$ (ltake$ zero$ )?v0 )lNil$ )):named a2 ))
(assert (! (forall ((?v0 Enat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a3 ))
(assert (! (= (llength$ lNil$ )zero$ ):named a4 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$a (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(! (=> (or (= ?v0 zero$ )(lnull$ ?v1 ))(= (fun_app$ (ltake$ ?v0 )?v1 )lNil$ )):pattern ((fun_app$ (ltake$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 Enat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a7 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$b (gen_lset$ ?v0 )lNil$ )?v0 ):pattern ((gen_lset$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (not (lnull$ (fun_app$ (ltake$ ?v0 )?v1 )))(and (not (= ?v0 zero$ ))(not (lnull$ ?v1 ))))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (ltake$ ?v0 )?v1 ))(or (= ?v0 zero$ )(lnull$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (ltake$ ?v0 )?v1 ))(or (lnull$ ?v1 )(= ?v0 zero$ )))):named a11 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_llist$ ?v0 lNil$ )):named a12 ))
(assert (! (ldistinct$ lNil$ ):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (lnull$ ?v0 )(= (llength$ ?v0 )zero$ )):pattern ((llength$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(= (= (llength$ ?v0 )zero$ )(lnull$ ?v0 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a16 ))
(check-sat )
;(get-unsat-core )
