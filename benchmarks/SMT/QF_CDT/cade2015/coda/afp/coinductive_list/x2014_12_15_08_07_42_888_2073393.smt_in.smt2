;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-fun f$ ()B_a_fun$ )
(declare-fun xs$ ()B_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun lmap$ (B_a_fun$ B_llist$ )A_llist$ )
(declare-fun lmap$a (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lmap$b (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lmap$c (B_b_fun$ B_llist$ )B_llist$ )
(declare-fun lnull$ (B_llist$ )Bool )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun fun_app$ (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun lappend$ (B_llist$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$a (A_llist$ )A_llist_a_llist_fun$ )
(assert (! (not (= (lmap$ f$ (fun_app$ (lappend$ xs$ )ys$ ))(fun_app$a (lappend$a (lmap$ f$ xs$ ))(lmap$ f$ ys$ )))):named a0 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0 )?v1 ))?v2 )(fun_app$ (lappend$ ?v0 )(fun_app$ (lappend$ ?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$a (lappend$a (fun_app$a (lappend$a ?v0 )?v1 ))?v2 )(fun_app$a (lappend$a ?v0 )(fun_app$a (lappend$a ?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$ (lappend$ ?v0 )lNil$a )?v0 ):pattern ((lappend$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (lappend$a ?v0 )lNil$ )?v0 ):pattern ((lappend$a ?v0 )))):named a4 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$ (lappend$ lNil$a )?v0 )?v0 ):pattern ((fun_app$ (lappend$ lNil$a )?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (lappend$a lNil$ )?v0 )?v0 ):pattern ((fun_app$a (lappend$a lNil$ )?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$ (lmap$a ?v0 ?v1 ))(lmap$a ?v0 (ltl$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (ltl$a (lmap$b ?v0 ?v1 ))(lmap$b ?v0 (ltl$ ?v1 )))):named a8 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (ltl$a (lmap$c ?v0 ?v1 ))(lmap$c ?v0 (ltl$a ?v1 )))):named a9 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (ltl$ (lmap$ ?v0 ?v1 ))(lmap$ ?v0 (ltl$a ?v1 )))):named a10 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B_llist$ ))(! (= (fun_app$ (lappend$ (lCons$a ?v0 ?v1 ))?v2 )(lCons$a ?v0 (fun_app$ (lappend$ ?v1 )?v2 ))):pattern ((fun_app$ (lappend$ (lCons$a ?v0 ?v1 ))?v2 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$a (lappend$a (lCons$ ?v0 ?v1 ))?v2 )(lCons$ ?v0 (fun_app$a (lappend$a ?v1 )?v2 ))):pattern ((fun_app$a (lappend$a (lCons$ ?v0 ?v1 ))?v2 )))):named a12 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (not (lnull$ (fun_app$ (lappend$ ?v0 )?v1 )))(or (not (lnull$ ?v0 ))(not (lnull$ ?v1 ))))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (not (lnull$a (fun_app$a (lappend$a ?v0 )?v1 )))(or (not (lnull$a ?v0 ))(not (lnull$a ?v1 ))))):named a14 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lnull$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (lnull$ ?v0 )(lnull$ ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lnull$a (fun_app$a (lappend$a ?v0 )?v1 ))(and (lnull$a ?v0 )(lnull$a ?v1 )))):named a16 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (= lNil$a (fun_app$ (lappend$ ?v0 )?v1 ))(and (= ?v0 lNil$a )(= ?v1 lNil$a )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$a (lappend$a ?v0 )?v1 ))(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a18 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (= (fun_app$ (lappend$ ?v0 )?v1 )lNil$a )(and (= ?v0 lNil$a )(= ?v1 lNil$a )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (fun_app$a (lappend$a ?v0 )?v1 )lNil$ )(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a20 ))
(assert (! (= (fun_app$ (lappend$ lNil$a )lNil$a )lNil$a ):named a21 ))
(assert (! (= (fun_app$a (lappend$a lNil$ )lNil$ )lNil$ ):named a22 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lnull$a (lmap$a ?v0 ?v1 ))(lnull$a ?v1 ))):named a23 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (lnull$ (lmap$b ?v0 ?v1 ))(lnull$a ?v1 ))):named a24 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (lnull$ (lmap$c ?v0 ?v1 ))(lnull$ ?v1 ))):named a25 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (lnull$a (lmap$ ?v0 ?v1 ))(lnull$ ?v1 ))):named a26 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= (lmap$a ?v0 ?v1 )lNil$ )(= ?v1 lNil$ ))):named a27 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= (lmap$b ?v0 ?v1 )lNil$a )(= ?v1 lNil$ ))):named a28 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= (lmap$c ?v0 ?v1 )lNil$a )(= ?v1 lNil$a ))):named a29 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= (lmap$ ?v0 ?v1 )lNil$ )(= ?v1 lNil$a ))):named a30 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= lNil$ (lmap$a ?v0 ?v1 ))(= ?v1 lNil$ ))):named a31 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= lNil$a (lmap$b ?v0 ?v1 ))(= ?v1 lNil$ ))):named a32 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= lNil$a (lmap$c ?v0 ?v1 ))(= ?v1 lNil$a ))):named a33 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= lNil$ (lmap$ ?v0 ?v1 ))(= ?v1 lNil$a ))):named a34 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a35 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a36 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (ltl$a (fun_app$ (lappend$ ?v0 )?v1 ))(ite (lnull$ ?v0 )(ltl$a ?v1 )(fun_app$ (lappend$ (ltl$a ?v0 ))?v1 )))):named a37 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (ltl$ (fun_app$a (lappend$a ?v0 )?v1 ))(ite (lnull$a ?v0 )(ltl$ ?v1 )(fun_app$a (lappend$a (ltl$ ?v0 ))?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (= ?v0 lNil$ ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a39 ))
(assert (! (forall ((?v0 B_llist$ ))(= (not (= ?v0 lNil$a ))(exists ((?v1 B$ )(?v2 B_llist$ ))(= ?v0 (lCons$a ?v1 ?v2 ))))):named a40 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (lnull$a ?v0 ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a41 ))
(assert (! (forall ((?v0 B_llist$ ))(= (not (lnull$ ?v0 ))(exists ((?v1 B$ )(?v2 B_llist$ ))(= ?v0 (lCons$a ?v1 ?v2 ))))):named a42 ))
(check-sat )
;(get-unsat-core )
