;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_bool_fun_fun$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun p$ ()A_bool_fun$ )
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun uua$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uub$ ()A_bool_fun$ )
(declare-fun uuc$ (A_bool_fun$ )A_llist_a_bool_fun_fun$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfilter$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_bool_fun_fun$ A_llist$ )A_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun fun_app$c (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$a (uuc$ ?v0 )?v1 )?v2 )(and (member$ ?v2 (lset$ ?v1 ))(fun_app$ ?v0 ?v2 ))):pattern ((fun_app$ (fun_app$a (uuc$ ?v0 )?v1 )?v2 )))):named a0 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$b (uua$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uua$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uub$ ?v0 )false ):pattern ((fun_app$ uub$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )true ):pattern ((fun_app$ uu$ ?v0 )))):named a3 ))
(assert (! (not (lfinite$ (fun_app$c (lfilter$ p$ )xsa$ ))):named a4 ))
(assert (! (lnull$ (fun_app$c (lfilter$ p$ )xsa$ )):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$c (lfilter$ ?v0 )(fun_app$c (lfilter$ ?v0 )?v1 ))(fun_app$c (lfilter$ ?v0 )?v1 ))):named a6 ))
(assert (! (not (lfinite$ xs$ )):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$c (lfilter$ uu$ )?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(= (fun_app$c (lfilter$ ?v0 )(fun_app$c (lfilter$ ?v1 )?v2 ))(fun_app$c (lfilter$ (fun_app$b (uua$ ?v0 )?v1 ))?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (lfinite$ ?v0 )(lfinite$ (fun_app$c (lfilter$ ?v1 )?v0 )))):named a10 ))
(assert (! (=> (lfinite$ xs$ )(lfinite$ (fun_app$c (lfilter$ p$ )xs$ ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lnull$ ?v0 )(lfinite$ ?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (lfinite$ ?v0 )(= (fun_app$c (lfilter$ ?v1 )(lappend$ ?v0 ?v2 ))(lappend$ (fun_app$c (lfilter$ ?v1 )?v0 )(fun_app$c (lfilter$ ?v1 )?v2 ))))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$c (lfilter$ uub$ )?v0 )lNil$ )):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lfinite$ ?v0 ))):named a15 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lset$ (fun_app$c (lfilter$ ?v0 )?v1 ))(collect$ (fun_app$a (uuc$ ?v0 )?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$c (lfilter$ ?v0 )lNil$ )lNil$ ):pattern ((lfilter$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$ (ldropn$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$c (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))(ite (fun_app$ ?v0 ?v1 )(lCons$ ?v1 (fun_app$c (lfilter$ ?v0 )?v2 ))(fun_app$c (lfilter$ ?v0 )?v2 ))):pattern ((fun_app$c (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a19 ))
(assert (! (= (lfinite$ lNil$ )true ):named a20 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(not (lfinite$ (iterates$ ?v0 ?v1 )))):named a21 ))
(check-sat )
;(get-unsat-core )
