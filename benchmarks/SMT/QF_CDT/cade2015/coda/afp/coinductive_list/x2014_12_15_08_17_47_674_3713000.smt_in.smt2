;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_list$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun a$ ()A$ )
(declare-fun na$ ()Nat$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_list$ )
(declare-fun drop$ (Nat$ A_list$ )A_list$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun zero$ ()Enat$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun list_of$ (A_llist$ )A_list$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(assert (! (not (= (ldrop$ (enat$ na$ )(llist_of$ (cons$ a$ xsa$ )))(llist_of$ (drop$ na$ (cons$ a$ xsa$ ))))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(= (ldrop$ (enat$ ?v0 )(llist_of$ xsa$ ))(llist_of$ (drop$ ?v0 xsa$ )))):named a1 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (ldropn$ ?v0 (llist_of$ ?v1 ))(llist_of$ (drop$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(not (= (cons$ ?v0 ?v1 )?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(! (= (ldrop$ (enat$ ?v0 )?v1 )(ldropn$ ?v0 ?v1 )):pattern ((ldrop$ (enat$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$ (llist_of$ ?v0 ))?v0 )):named a8 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ )(?v2 A_llist$ ))(= (= (llist_of$ ?v0 )(lCons$ ?v1 ?v2 ))(exists ((?v3 A_list$ ))(and (= ?v0 (cons$ ?v1 ?v3 ))(= ?v2 (llist_of$ ?v3 )))))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (llist_of$ (cons$ ?v0 ?v1 ))(lCons$ ?v0 (llist_of$ ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ldrop$ zero$ ?v0 )?v0 )):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A_list$ ))(! (= (drop$ (suc$ ?v0 )(cons$ ?v1 ?v2 ))(drop$ ?v0 ?v2 )):pattern ((drop$ (suc$ ?v0 )(cons$ ?v1 ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (ldropn$ (suc$ ?v0 )(lCons$ ?v1 ?v2 ))(ldropn$ ?v0 ?v2 )):pattern ((ldropn$ (suc$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(check-sat )
;(get-unsat-core )
