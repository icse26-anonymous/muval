;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Enat_set$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Enat_set_enat_fun$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-sort Enat_bool_fun_enat_bool_fun_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun uu$ ()Enat_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun sup$ ()Enat_set_enat_fun$ )
(declare-fun uua$ (Enat_bool_fun$ )Enat_bool_fun_enat_bool_fun_fun$ )
(declare-fun uub$ (Enat$ )Enat_bool_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun member$ (Enat$ Enat_set$ )Bool )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun less_eq$ ()Enat_enat_bool_fun_fun$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (Enat_enat_bool_fun_fun$ Enat$ )Enat_bool_fun$ )
(declare-fun fun_app$b (Enat_bool_fun_enat_bool_fun_fun$ Enat_bool_fun$ )Enat_bool_fun$ )
(declare-fun fun_app$c (Enat_set_enat_fun$ Enat_set$ )Enat$ )
(declare-fun admissible$ (Enat_set_enat_fun$ Enat_enat_bool_fun_fun$ Enat_bool_fun$ )Bool )
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ uu$ ?v0 )(lprefix$ (ltake$ ?v0 xs$ )(ltake$ ?v0 ys$ ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(! (= (fun_app$ (uub$ ?v0 )?v1 )(not (fun_app$ (fun_app$a less_eq$ ?v1 )?v0 ))):pattern ((fun_app$ (uub$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat_bool_fun$ )(?v2 Enat$ ))(! (= (fun_app$ (fun_app$b (uua$ ?v0 )?v1 )?v2 )(or (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$b (uua$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (not (admissible$ sup$ less_eq$ uu$ )):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(lprefix$ (ltake$ ?v0 ?v1 )?v1 )):named a6 ))
(assert (! (forall ((?v0 Enat_enat_bool_fun_fun$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (forall ((?v3 Enat$ )(?v4 Enat$ ))(=> (fun_app$ (fun_app$a less_eq$ ?v3 )?v4 )(fun_app$ (fun_app$a ?v0 ?v3 )?v4 )))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(fun_app$ (fun_app$a ?v0 ?v2 )?v1 )))(fun_app$ (fun_app$a ?v0 ?v2 )?v1 ))):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Enat$ ))(=> (and (= (ltake$ ?v0 ?v1 )(ltake$ ?v0 ?v2 ))(fun_app$ (fun_app$a less_eq$ ?v3 )?v0 ))(= (ltake$ ?v3 ?v1 )(ltake$ ?v3 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v2 ?v1 ))(or (lprefix$ ?v0 ?v2 )(lprefix$ ?v2 ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v2 ))(lprefix$ ?v0 ?v2 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(lprefix$ ?v1 ?v2 ))(lprefix$ ?v0 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(lprefix$ (ltake$ (enat$ ?v0 )xs$ )(ltake$ (enat$ ?v0 )ys$ ))):named a14 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat_bool_fun$ ))(=> (and (admissible$ sup$ less_eq$ ?v0 )(admissible$ sup$ less_eq$ ?v1 ))(admissible$ sup$ less_eq$ (fun_app$b (uua$ ?v0 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ ))(admissible$ sup$ less_eq$ (uub$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Enat$ ))(fun_app$ (fun_app$a less_eq$ ?v0 )?v0 )):named a17 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat$ ))(= (fun_app$ (fun_app$a less_eq$ (fun_app$c sup$ ?v0 ))?v1 )(forall ((?v2 Enat$ ))(=> (member$ ?v2 ?v0 )(fun_app$ (fun_app$a less_eq$ ?v2 )?v1 ))))):named a18 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat$ ))(=> (and (forall ((?v2 Enat$ ))(=> (member$ ?v2 ?v0 )(fun_app$ (fun_app$a less_eq$ ?v2 )?v1 )))(forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (member$ ?v3 ?v0 )(fun_app$ (fun_app$a less_eq$ ?v3 )?v2 )))(fun_app$ (fun_app$a less_eq$ ?v1 )?v2 ))))(= (fun_app$c sup$ ?v0 )?v1 ))):named a19 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ ))(=> (forall ((?v2 Enat$ ))(=> (member$ ?v2 ?v0 )(exists ((?v3 Enat$ ))(and (member$ ?v3 ?v1 )(fun_app$ (fun_app$a less_eq$ ?v2 )?v3 )))))(fun_app$ (fun_app$a less_eq$ (fun_app$c sup$ ?v0 ))(fun_app$c sup$ ?v1 )))):named a20 ))
(check-sat )
;(get-unsat-core )
