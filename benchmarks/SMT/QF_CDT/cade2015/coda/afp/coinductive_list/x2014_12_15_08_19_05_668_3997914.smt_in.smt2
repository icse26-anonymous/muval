;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Enat$ )
(declare-fun ma$ ()Nat$ )
(declare-fun na$ ()Enat$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun ltake$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(assert (! (not (= (lnth$ (fun_app$ (ltake$ na$ )xsa$ )(suc$ ma$ ))(lnth$ xsa$ (suc$ ma$ )))):named a0 ))
(assert (! (= na$ (eSuc$ n$ )):named a1 ))
(assert (! (less$ (enat$ ma$ )n$ ):named a2 ))
(assert (! (less$ (enat$ (suc$ ma$ ))na$ ):named a3 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(=> (less$ (enat$ ma$ )?v0 )(= (lnth$ (fun_app$ (ltake$ ?v0 )?v1 )ma$ )(lnth$ ?v1 ma$ )))):named a4 ))
(assert (! (=> (forall ((?v0 Enat$ ))(=> (= na$ (eSuc$ ?v0 ))false ))false ):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 Nat$ ))(! (= (lnth$ (lCons$ ?v0 ?v1 )(suc$ ?v2 ))(lnth$ ?v1 ?v2 )):pattern ((lnth$ (lCons$ ?v0 ?v1 )(suc$ ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ltake$ ?v0 )lNil$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(lprefix$ (fun_app$ (ltake$ ?v0 )?v1 )?v1 )):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_a_fun$ )(?v2 A_llist$ ))(= (fun_app$ (ltake$ ?v0 )(lmap$ ?v1 ?v2 ))(lmap$ ?v1 (fun_app$ (ltake$ ?v0 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (fun_app$ (ltake$ ?v0 )(fun_app$ (ltake$ ?v1 )?v2 ))(fun_app$ (ltake$ (min$ ?v0 ?v1 ))?v2 ))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Enat$ ))(=> (and (= (fun_app$ (ltake$ ?v0 )?v1 )(fun_app$ (ltake$ ?v0 )?v2 ))(less_eq$ ?v3 ?v0 ))(= (fun_app$ (ltake$ ?v3 )?v1 )(fun_app$ (ltake$ ?v3 )?v2 )))):named a15 ))
(check-sat )
;(get-unsat-core )
