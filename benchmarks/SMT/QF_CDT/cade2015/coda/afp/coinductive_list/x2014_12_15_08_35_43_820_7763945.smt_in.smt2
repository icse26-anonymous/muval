;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort A_a_llist_a_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun fa$ ()Nat_a_fun$ )
(declare-fun na$ ()Nat$ )
(declare-fun uu$ ()Nat_a_fun$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun uua$ (Nat_a_fun$ )Nat_a_fun$ )
(declare-fun uub$ (Nat$ )A_a_llist_a_fun_fun$ )
(declare-fun lnth$ (A_llist$ )Nat_a_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (Nat_a_fun$ Nat$ )A$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_fun$ A_llist$ )A$ )
(declare-fun fun_app$b (A_a_llist_a_fun_fun$ A$ )A_llist_a_fun$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun inf_llist$ (Nat_a_fun$ )A_llist$ )
(declare-fun undefined$ (Nat$ )A$ )
(declare-fun case_llist$ (A$ A_a_llist_a_fun_fun$ A_llist$ )A$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$ fa$ (suc$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(fun_app$ ?v0 (suc$ ?v1 ))):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$a (fun_app$b (uub$ ?v0 )?v1 )?v2 )(fun_app$ (lnth$ ?v2 )?v0 )):pattern ((fun_app$a (fun_app$b (uub$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (not (= (fun_app$ (lnth$ (inf_llist$ fa$ ))(suc$ na$ ))(fun_app$ fa$ (suc$ na$ )))):named a3 ))
(assert (! (= (fun_app$ (lnth$ (inf_llist$ uu$ ))na$ )(fun_app$ fa$ (suc$ na$ ))):named a4 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(= (fun_app$ (lnth$ (inf_llist$ ?v0 ))na$ )(fun_app$ ?v0 na$ ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(= (ltl$ (inf_llist$ ?v0 ))(inf_llist$ (uua$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 Nat$ ))(! (= (fun_app$ (lnth$ (lCons$ ?v0 ?v1 ))(suc$ ?v2 ))(fun_app$ (lnth$ ?v1 )?v2 )):pattern ((fun_app$ (lnth$ (lCons$ ?v0 ?v1 ))(suc$ ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat_a_fun$ ))(not (= (llist_of$ ?v0 )(inf_llist$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(not (= (inf_llist$ ?v0 )lNil$ ))):named a13 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(not (lnull$ (inf_llist$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(= (fun_app$ (lnth$ ?v0 )(suc$ ?v1 ))(case_llist$ (undefined$ (suc$ ?v1 ))(uub$ ?v1 )?v0 ))):named a15 ))
(assert (! (forall ((?v0 Nat_a_fun$ ))(not (lfinite$ (inf_llist$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a19 ))
(check-sat )
;(get-unsat-core )
