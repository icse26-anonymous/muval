;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-fun p$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun lset$a (A_llist_llist$ )A_llist_set$ )
(declare-fun lsetp$ (A_llist_llist$ )A_llist_bool_fun$ )
(declare-fun ldropn$ (Nat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lnull$a (A_llist_llist$ )Bool )
(declare-fun lsetp$a (A_llist$ )A_bool_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun ldropn$a (Nat$ A_llist$ )A_llist$ )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lmember$ (A_llist$ A_llist_llist$ )Bool )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun member$b (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun lfilter$a (A_llist_bool_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lfinite$a (A_llist_llist$ )Bool )
(declare-fun lmember$a (A$ )A_llist_bool_fun$ )
(declare-fun ldropWhile$ (A_llist_bool_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun llist_all2$ (A_llist_a_llist_bool_fun_fun$ A_llist_llist$ A_llist_llist$ )Bool )
(declare-fun ldropWhile$a (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun llist_all2$a (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(assert (! (not (forall ((?v0 A$ ))(=> (member$ ?v0 (lset$ xsa$ ))(not (fun_app$ p$ ?v0 ))))):named a0 ))
(assert (! (not (lfinite$ xs$ )):named a1 ))
(assert (! (not (lfinite$ xsa$ )):named a2 ))
(assert (! (lnull$ (lfilter$ p$ xsa$ )):named a3 ))
(assert (! (lfinite$ (lfilter$ p$ xs$ )):named a4 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_bool_fun$ )(?v3 A_llist_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist$ ))(=> (member$a ?v4 (lset$a ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (lfilter$a ?v2 ?v0 )(lfilter$a ?v3 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (lfilter$ ?v2 ?v0 )(lfilter$ ?v3 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (lfilter$a ?v0 (lfilter$a ?v0 ?v1 ))(lfilter$a ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v0 ?v1 ))(lfilter$ ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ ))(= (lnull$a (lfilter$a ?v0 ?v1 ))(forall ((?v2 A_llist$ ))(=> (member$a ?v2 (lset$a ?v1 ))(not (fun_app$a ?v0 ?v2 )))))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$ (lfilter$ ?v0 ?v1 ))(forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v1 ))(not (fun_app$ ?v0 ?v2 )))))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(= (member$a ?v0 (lset$a ?v1 ))(lmember$ ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(fun_app$a (lmember$a ?v0 )?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(=> (member$a ?v0 (lset$a ?v1 ))(fun_app$a (lsetp$ ?v1 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (member$ ?v0 (lset$ ?v1 ))(fun_app$ (lsetp$a ?v1 )?v0 ))):named a14 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ ))(=> (fun_app$a (lsetp$ ?v0 )?v1 )(member$a ?v1 (lset$a ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (fun_app$ (lsetp$a ?v0 )?v1 )(member$ ?v1 (lset$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_bool_fun$ )(?v3 A_llist_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist$ ))(=> (member$a ?v4 (lset$a ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (ldropWhile$ ?v2 ?v0 )(ldropWhile$ ?v3 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (ldropWhile$a ?v2 ?v0 )(ldropWhile$a ?v3 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_bool_fun$ )(?v2 A_llist_llist$ ))(=> (member$a ?v0 (lset$a (ldropWhile$ ?v1 ?v2 )))(member$a ?v0 (lset$a ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (ldropWhile$a ?v1 ?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_llist$ ))(= (llist_all2$ ?v0 ?v1 ?v1 )(forall ((?v2 A_llist$ ))(=> (member$a ?v2 (lset$a ?v1 ))(fun_app$a (fun_app$b ?v0 ?v2 )?v2 ))))):named a21 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(= (fun_app$a (fun_app$b (llist_all2$a ?v0 )?v1 )?v1 )(forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v1 ))(fun_app$ (fun_app$c ?v0 ?v2 )?v2 ))))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ )(?v2 A_llist_llist$ ))(=> (member$a ?v0 (lset$a (ldropn$ ?v1 ?v2 )))(member$a ?v0 (lset$a ?v2 )))):named a23 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (ldropn$a ?v1 ?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a25 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a26 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (=> (or (lnull$a ?v0 )(lnull$a ?v1 ))false )(=> (and (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))false ))false )):named a27 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a28 ))
(assert (! (forall ((?v0 A_llist_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist_llist$ ))(=> (member$b ?v1 ?v0 )(lnull$a ?v1 )))false )(=> (not (forall ((?v1 A_llist_llist$ ))(=> (member$b ?v1 ?v0 )(lnull$a ?v1 ))))false ))false )):named a29 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$a ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a30 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_llist$ ))(= (lfinite$a (ldropn$ ?v0 ?v1 ))(lfinite$a ?v1 ))):named a31 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$ (ldropn$a ?v0 ?v1 ))(lfinite$ ?v1 ))):named a32 ))
(check-sat )
;(get-unsat-core )
