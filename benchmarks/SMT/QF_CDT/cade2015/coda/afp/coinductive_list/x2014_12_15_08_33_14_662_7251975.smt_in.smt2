;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort Nat_nat_enat_fun_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-sort A_llist_list$ 0)
(declare-fun nil$ ()A_llist_list$)
(declare-fun hd$ (A_llist_list$)A_llist$)
(declare-fun tl$ (A_llist_list$)A_llist_list$)
(declare-fun cons$ (A_llist$ A_llist_list$ )A_llist_list$)
(declare-fun m$ ()Nat$ )
(declare-fun uu$ ()Nat_enat_fun$ )
(declare-fun uua$ ()Nat_enat_fun$ )
(declare-fun uub$ ()Nat_enat_fun$ )
(declare-fun uuc$ (Nat_enat_fun$ )Nat_nat_enat_fun_fun$ )
(declare-fun xss$ ()A_llist_list$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun lnth$ (A_llist_llist$ Nat$ )A_llist$ )
(declare-fun plus$ (Nat$ )Nat_nat_fun$ )
(declare-fun size$ (A_llist_list$ )Nat$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun zero$ ()Enat$ )
(declare-fun plus$a (Enat$ Enat$ )Enat$ )
(declare-fun zero$a ()Nat$ )
(declare-fun setsum$ (Nat_enat_fun$ Nat_set$ )Enat$ )
(declare-fun fun_app$ (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$b (Nat_nat_enat_fun_fun$ Nat$ )Nat_enat_fun$ )
(declare-fun lessThan$ (Nat$ )Nat_set$ )
(declare-fun atLeastLessThan$ (Nat$ Nat$ )Nat_set$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uua$ ?v0 )(llength$ (lnth$ xssa$ (fun_app$a (plus$ ?v0 )(size$ xss$ ))))):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(llength$ (lnth$ xssa$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(! (= (fun_app$ (fun_app$b (uuc$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$a (plus$ ?v2 )?v1 ))):pattern ((fun_app$ (fun_app$b (uuc$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uub$ ?v0 )zero$ ):pattern ((fun_app$ uub$ ?v0 )))):named a3 ))
(assert (! (not (= (setsum$ uu$ (atLeastLessThan$ (fun_app$a (plus$ zero$a )(size$ xss$ ))(fun_app$a (plus$ m$ )(size$ xss$ ))))(setsum$ uua$ (atLeastLessThan$ zero$a m$ )))):named a4 ))
(assert (! (= (atLeastLessThan$ (size$ xss$ )(fun_app$a (plus$ m$ )(size$ xss$ )))(atLeastLessThan$ (fun_app$a (plus$ zero$a )(size$ xss$ ))(fun_app$a (plus$ m$ )(size$ xss$ )))):named a5 ))
(assert (! (less$ zero$a m$ ):named a6 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (setsum$ uub$ ?v0 )zero$ )):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$a (plus$ ?v0 )?v1 )zero$a )(and (= ?v0 zero$a )(= ?v1 zero$a )))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (plus$ ?v0 )zero$a )?v0 ):pattern ((plus$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ ))(= (plus$a ?v0 zero$ )?v0 )):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (plus$ ?v0 )zero$a )?v0 )):named a11 ))
(assert (! (forall ((?v0 Enat$ ))(= (plus$a ?v0 zero$ )?v0 )):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (plus$ ?v0 )zero$a )?v0 )):named a13 ))
(assert (! (forall ((?v0 Enat$ ))(= (plus$a zero$ ?v0 )?v0 )):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (plus$ zero$a )?v0 )?v0 )):named a15 ))
(assert (! (forall ((?v0 Enat$ ))(= (plus$a zero$ ?v0 )?v0 )):named a16 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (plus$ zero$a )?v0 )?v0 )):named a17 ))
(assert (! (forall ((?v0 Nat_enat_fun$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (setsum$ ?v0 (atLeastLessThan$ (fun_app$a (plus$ ?v1 )?v2 )(fun_app$a (plus$ ?v3 )?v2 )))(setsum$ (fun_app$b (uuc$ ?v0 )?v2 )(atLeastLessThan$ ?v1 ?v3 )))):named a18 ))
(assert (! (= (setsum$ uu$ (lessThan$ (fun_app$a (plus$ m$ )(size$ xss$ ))))(plus$a (setsum$ uu$ (lessThan$ (size$ xss$ )))(setsum$ uu$ (atLeastLessThan$ (size$ xss$ )(fun_app$a (plus$ m$ )(size$ xss$ )))))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$a (plus$ ?v0 )?v1 )(fun_app$a (plus$ ?v2 )?v1 ))(= ?v0 ?v2 ))):named a20 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$a (plus$ ?v0 )?v1 )(fun_app$a (plus$ ?v0 )?v2 ))(= ?v1 ?v2 ))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (lessThan$ ?v0 )(lessThan$ ?v1 ))(= ?v0 ?v1 ))):named a22 ))
(check-sat )
;(get-unsat-core )
