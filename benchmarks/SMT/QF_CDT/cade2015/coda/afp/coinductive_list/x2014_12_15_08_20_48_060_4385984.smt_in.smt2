;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Enat_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort Enat_enat_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort Enat_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun a$ ()A_llist_set$ )
(declare-fun n$ ()Nat$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun lSup$ (A_llist_set$ )A_llist$ )
(declare-fun image$ (A_llist_enat_fun$ A_llist_set$ )Enat_set$ )
(declare-fun finite$ (Enat_set$ )Bool )
(declare-fun image$a (Enat_a_llist_fun$ Enat_set$ )A_llist_set$ )
(declare-fun image$b (A_llist_a_llist_fun$ A_llist_set$ )A_llist_set$ )
(declare-fun image$c (Enat_enat_fun$ Enat_set$ )Enat_set$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun finite$a (A_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun less_eq$ (Enat_set$ Enat_set$ )Bool )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llength$ ()A_llist_enat_fun$ )
(declare-fun member$a (Enat$ Enat_set$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (Enat_a_llist_fun$ Enat$ )A_llist$ )
(declare-fun fun_app$c (Enat_enat_fun$ Enat$ )Enat$ )
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$e (Enat_bool_fun$ Enat$ )Bool )
(declare-fun lessThan$ (Enat$ )Enat_set$ )
(declare-fun less_eq$a (A_llist_set$ A_llist_set$ )Bool )
(assert (! (not (finite$ (image$ llength$ a$ ))):named a0 ))
(assert (! (less_eq$ (image$ llength$ a$ )(lessThan$ (enat$ (suc$ n$ )))):named a1 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_a_llist_fun$ ))(=> (finite$ ?v0 )(finite$a (image$a ?v1 ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_a_llist_fun$ ))(=> (finite$a ?v0 )(finite$a (image$b ?v1 ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_enat_fun$ ))(=> (finite$a ?v0 )(finite$ (image$ ?v1 ?v0 )))):named a4 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_enat_fun$ ))(=> (finite$ ?v0 )(finite$ (image$c ?v1 ?v0 )))):named a5 ))
(assert (! (= (fun_app$ llength$ (lSup$ a$ ))(enat$ n$ )):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ )(?v3 A_llist_set$ ))(=> (and (= ?v0 (fun_app$a ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$b ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat_a_llist_fun$ )(?v2 Enat$ )(?v3 Enat_set$ ))(=> (and (= ?v0 (fun_app$b ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$a ?v1 ?v3 )))):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat_enat_fun$ )(?v2 Enat$ )(?v3 Enat_set$ ))(=> (and (= ?v0 (fun_app$c ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (image$c ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist$ )(?v3 A_llist_set$ ))(=> (and (= ?v0 (fun_app$ ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$ ?v1 ?v3 )))):named a10 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (= (fun_app$ llength$ (lSup$ a$ ))(enat$ ?v0 ))false ))false ):named a11 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 Enat_a_llist_fun$ )(?v2 Enat_set$ ))(=> (and (finite$a ?v0 )(less_eq$a ?v0 (image$a ?v1 ?v2 )))(exists ((?v3 Enat_set$ ))(and (less_eq$ ?v3 ?v2 )(and (finite$ ?v3 )(= ?v0 (image$a ?v1 ?v3 ))))))):named a12 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_set$ ))(=> (and (finite$a ?v0 )(less_eq$a ?v0 (image$b ?v1 ?v2 )))(exists ((?v3 A_llist_set$ ))(and (less_eq$a ?v3 ?v2 )(and (finite$a ?v3 )(= ?v0 (image$b ?v1 ?v3 ))))))):named a13 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist_set$ ))(=> (and (finite$ ?v0 )(less_eq$ ?v0 (image$ ?v1 ?v2 )))(exists ((?v3 A_llist_set$ ))(and (less_eq$a ?v3 ?v2 )(and (finite$a ?v3 )(= ?v0 (image$ ?v1 ?v3 ))))))):named a14 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_enat_fun$ )(?v2 Enat_set$ ))(=> (and (finite$ ?v0 )(less_eq$ ?v0 (image$c ?v1 ?v2 )))(exists ((?v3 Enat_set$ ))(and (less_eq$ ?v3 ?v2 )(and (finite$ ?v3 )(= ?v0 (image$c ?v1 ?v3 ))))))):named a15 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 A_llist_set$ )(?v2 Enat_a_llist_fun$ ))(=> (and (finite$ ?v0 )(less_eq$a ?v1 (image$a ?v2 ?v0 )))(finite$a ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_set$ )(?v2 A_llist_a_llist_fun$ ))(=> (and (finite$a ?v0 )(less_eq$a ?v1 (image$b ?v2 ?v0 )))(finite$a ?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 Enat_set$ )(?v2 A_llist_enat_fun$ ))(=> (and (finite$a ?v0 )(less_eq$ ?v1 (image$ ?v2 ?v0 )))(finite$ ?v1 ))):named a18 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ )(?v2 Enat_enat_fun$ ))(=> (and (finite$ ?v0 )(less_eq$ ?v1 (image$c ?v2 ?v0 )))(finite$ ?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_set$ ))(= (member$ ?v0 (image$b ?v1 ?v2 ))(exists ((?v3 A_llist$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$a ?v1 ?v3 )))))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat_a_llist_fun$ )(?v2 Enat_set$ ))(= (member$ ?v0 (image$a ?v1 ?v2 ))(exists ((?v3 Enat$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$b ?v1 ?v3 )))))):named a21 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat_enat_fun$ )(?v2 Enat_set$ ))(= (member$a ?v0 (image$c ?v1 ?v2 ))(exists ((?v3 Enat$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$c ?v1 ?v3 )))))):named a22 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist_enat_fun$ )(?v2 A_llist_set$ ))(= (member$a ?v0 (image$ ?v1 ?v2 ))(exists ((?v3 A_llist$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$ ?v1 ?v3 )))))):named a23 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_set$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (image$b ?v2 ?v0 )(image$b ?v3 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ )(?v2 Enat_a_llist_fun$ )(?v3 Enat_a_llist_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Enat$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v4 )))))(= (image$a ?v2 ?v0 )(image$a ?v3 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ )(?v2 Enat_enat_fun$ )(?v3 Enat_enat_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Enat$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$c ?v2 ?v4 )(fun_app$c ?v3 ?v4 )))))(= (image$c ?v2 ?v0 )(image$c ?v3 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_set$ )(?v2 A_llist_enat_fun$ )(?v3 A_llist_enat_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_llist$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (image$ ?v2 ?v0 )(image$ ?v3 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_set$ )(?v2 A_llist_bool_fun$ ))(=> (exists ((?v3 A_llist$ ))(and (member$ ?v3 (image$b ?v0 ?v1 ))(fun_app$d ?v2 ?v3 )))(exists ((?v3 A_llist$ ))(and (member$ ?v3 ?v1 )(fun_app$d ?v2 (fun_app$a ?v0 ?v3 )))))):named a28 ))
(assert (! (forall ((?v0 Enat_a_llist_fun$ )(?v1 Enat_set$ )(?v2 A_llist_bool_fun$ ))(=> (exists ((?v3 A_llist$ ))(and (member$ ?v3 (image$a ?v0 ?v1 ))(fun_app$d ?v2 ?v3 )))(exists ((?v3 Enat$ ))(and (member$a ?v3 ?v1 )(fun_app$d ?v2 (fun_app$b ?v0 ?v3 )))))):named a29 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_set$ )(?v2 Enat_bool_fun$ ))(=> (exists ((?v3 Enat$ ))(and (member$a ?v3 (image$c ?v0 ?v1 ))(fun_app$e ?v2 ?v3 )))(exists ((?v3 Enat$ ))(and (member$a ?v3 ?v1 )(fun_app$e ?v2 (fun_app$c ?v0 ?v3 )))))):named a30 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_set$ )(?v2 Enat_bool_fun$ ))(=> (exists ((?v3 Enat$ ))(and (member$a ?v3 (image$ ?v0 ?v1 ))(fun_app$e ?v2 ?v3 )))(exists ((?v3 A_llist$ ))(and (member$ ?v3 ?v1 )(fun_app$e ?v2 (fun_app$ ?v0 ?v3 )))))):named a31 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_set$ )(?v2 A_llist_bool_fun$ ))(=> (forall ((?v3 A_llist$ ))(=> (member$ ?v3 (image$b ?v0 ?v1 ))(fun_app$d ?v2 ?v3 )))(forall ((?v3 A_llist$ ))(=> (member$ ?v3 ?v1 )(fun_app$d ?v2 (fun_app$a ?v0 ?v3 )))))):named a32 ))
(assert (! (forall ((?v0 Enat_a_llist_fun$ )(?v1 Enat_set$ )(?v2 A_llist_bool_fun$ ))(=> (forall ((?v3 A_llist$ ))(=> (member$ ?v3 (image$a ?v0 ?v1 ))(fun_app$d ?v2 ?v3 )))(forall ((?v3 Enat$ ))(=> (member$a ?v3 ?v1 )(fun_app$d ?v2 (fun_app$b ?v0 ?v3 )))))):named a33 ))
(assert (! (forall ((?v0 Enat_enat_fun$ )(?v1 Enat_set$ )(?v2 Enat_bool_fun$ ))(=> (forall ((?v3 Enat$ ))(=> (member$a ?v3 (image$c ?v0 ?v1 ))(fun_app$e ?v2 ?v3 )))(forall ((?v3 Enat$ ))(=> (member$a ?v3 ?v1 )(fun_app$e ?v2 (fun_app$c ?v0 ?v3 )))))):named a34 ))
(assert (! (forall ((?v0 A_llist_enat_fun$ )(?v1 A_llist_set$ )(?v2 Enat_bool_fun$ ))(=> (forall ((?v3 Enat$ ))(=> (member$a ?v3 (image$ ?v0 ?v1 ))(fun_app$e ?v2 ?v3 )))(forall ((?v3 A_llist$ ))(=> (member$ ?v3 ?v1 )(fun_app$e ?v2 (fun_app$ ?v0 ?v3 )))))):named a35 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$a ?v3 ?v0 )))(member$ ?v2 (image$b ?v3 ?v1 )))):named a36 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat_set$ )(?v2 A_llist$ )(?v3 Enat_a_llist_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$b ?v3 ?v0 )))(member$ ?v2 (image$a ?v3 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat_set$ )(?v2 Enat$ )(?v3 Enat_enat_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$c ?v3 ?v0 )))(member$a ?v2 (image$c ?v3 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 Enat$ )(?v3 A_llist_enat_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$ ?v3 ?v0 )))(member$a ?v2 (image$ ?v3 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_set$ ))(=> (forall ((?v2 A_llist$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 )))(less_eq$a ?v0 ?v1 ))):named a40 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ ))(=> (forall ((?v2 Enat$ ))(=> (member$a ?v2 ?v0 )(member$a ?v2 ?v1 )))(less_eq$ ?v0 ?v1 ))):named a41 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_set$ ))(=> (and (less_eq$a ?v0 ?v1 )(less_eq$a ?v1 ?v0 ))(= ?v0 ?v1 ))):named a42 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a43 ))
(assert (! (lfinite$ (lSup$ a$ )):named a44 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist_set$ ))(= (= ?v0 ?v1 )(and (less_eq$a ?v0 ?v1 )(less_eq$a ?v1 ?v0 )))):named a45 ))
(assert (! (forall ((?v0 Enat_set$ )(?v1 Enat_set$ ))(= (= ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 )))):named a46 ))
(check-sat )
;(get-unsat-core )
