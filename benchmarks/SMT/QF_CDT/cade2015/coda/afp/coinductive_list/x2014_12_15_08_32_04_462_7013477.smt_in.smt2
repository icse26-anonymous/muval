;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-fun uu$ ()Nat_bool_fun$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun uua$ ()Nat_nat_fun$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun image$ (Nat_nat_fun$ Nat_set$ )Nat_set$ )
(declare-fun zero$a ()Enat$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun lfinite$ (A_llist_llist$ )Bool )
(declare-fun llength$ (A_llist_llist$ )Enat$ )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(less$ (enat$ ?v0 )(llength$ xssa$ ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a uua$ ?v0 )?v0 ):pattern ((fun_app$a uua$ ?v0 )))):named a1 ))
(assert (! (not (not (member$ zero$ (image$ suc$ (collect$ uu$ ))))):named a2 ))
(assert (! (lfinite$ xssa$ ):named a3 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (image$ uua$ ?v0 )?v0 )):named a4 ))
(assert (! (forall ((?v0 Nat_set$ ))(not (member$ zero$ (image$ suc$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$a suc$ ?v0 )(fun_app$a suc$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$a suc$ ?v0 )(fun_app$a suc$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ )(?v3 Nat_set$ ))(=> (and (= ?v0 (fun_app$a ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$ ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$a suc$ ?v1 ))false )))false )):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$a suc$ ?v1 ))false )))false )):named a12 ))
(assert (! (lfinite$ xss$ ):named a13 ))
(assert (! (forall ((?v0 Enat$ ))(= (less$ zero$a ?v0 )(not (= ?v0 zero$a )))):named a14 ))
(assert (! (forall ((?v0 Enat$ ))(not (less$ ?v0 zero$a ))):named a15 ))
(assert (! (= zero$a (enat$ zero$ )):named a16 ))
(check-sat )
;(get-unsat-core )
