;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Enat$ )
(declare-fun uu$ ()A_a_llist_a_llist_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun uua$ (A_bool_fun$ )A_a_llist_a_llist_fun_fun$ )
(declare-fun uub$ (A_bool_fun$ A_llist$ )A_a_llist_a_llist_fun_fun$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun ltake$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_a_llist_a_llist_fun_fun$ A$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$d (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$e (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun case_llist$ (A_llist$ A_a_llist_a_llist_fun_fun$ )A_llist_a_llist_fun$ )
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(lCons$ ?v0 (fun_app$ (ltake$ n$ )?v1 ))):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )(ite (fun_app$b ?v0 ?v1 )(lCons$ ?v1 (lfilter$ ?v0 ?v2 ))(lfilter$ ?v0 ?v2 ))):pattern ((fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$ (fun_app$a (uub$ ?v0 ?v1 )?v2 )?v3 )(ite (fun_app$b ?v0 ?v2 )(ldropWhile$ ?v0 ?v3 )?v1 )):pattern ((fun_app$ (fun_app$a (uub$ ?v0 ?v1 )?v2 )?v3 )))):named a2 ))
(assert (! (not (= (fun_app$ (ltake$ (eSuc$ n$ ))xs$ )(fun_app$ (case_llist$ lNil$ uu$ )xs$ ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ltake$ ?v0 )lNil$ )lNil$ ):pattern ((ltake$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A$ )(?v2 A_llist$ ))(= (fun_app$ (ltake$ (eSuc$ ?v0 ))(lCons$ ?v1 ?v2 ))(lCons$ ?v1 (fun_app$ (ltake$ ?v0 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (= ?v0 lNil$ ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_a_llist_fun_fun$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$ (case_llist$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(fun_app$ (fun_app$a ?v1 ?v2 )?v3 )):pattern ((fun_app$ (case_llist$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_a_llist_fun_fun$ ))(! (= (fun_app$ (case_llist$ ?v0 ?v1 )lNil$ )?v0 ):pattern ((case_llist$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(forall ((?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))false )))false )):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(not (= lNil$ (lCons$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (eSuc$ ?v0 )(eSuc$ ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (= (eSuc$ ?v0 )(eSuc$ ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfilter$ ?v0 ?v1 )(fun_app$ (case_llist$ lNil$ (uua$ ?v0 ))?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (ldropWhile$ ?v0 ?v1 )(fun_app$ (case_llist$ lNil$ (uub$ ?v0 ?v1 ))?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$ ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$c (llexord$ ?v0 ?v1 )?v2 )(or (exists ((?v3 A_llist$ )(?v4 A_llist$ )(?v5 A$ ))(and (= ?v1 (lCons$ ?v5 ?v3 ))(and (= ?v2 (lCons$ ?v5 ?v4 ))(fun_app$c (llexord$ ?v0 ?v3 )?v4 ))))(or (exists ((?v3 A$ )(?v4 A$ )(?v5 A_llist$ )(?v6 A_llist$ ))(and (= ?v1 (lCons$ ?v3 ?v5 ))(and (= ?v2 (lCons$ ?v4 ?v6 ))(fun_app$b (fun_app$d ?v0 ?v3 )?v4 ))))(exists ((?v3 A_llist$ ))(and (= ?v1 lNil$ )(= ?v2 ?v3 ))))))):named a17 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$c (llexord$ ?v0 ?v1 )?v2 )(and (forall ((?v3 A_llist$ )(?v4 A_llist$ )(?v5 A$ ))(=> (and (= ?v1 (lCons$ ?v5 ?v3 ))(and (= ?v2 (lCons$ ?v5 ?v4 ))(fun_app$c (llexord$ ?v0 ?v3 )?v4 )))false ))(and (forall ((?v3 A$ )(?v4 A$ )(?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (= ?v1 (lCons$ ?v3 ?v5 ))(and (= ?v2 (lCons$ ?v4 ?v6 ))(fun_app$b (fun_app$d ?v0 ?v3 )?v4 )))false ))(forall ((?v3 A_llist$ ))(=> (and (= ?v1 lNil$ )(= ?v2 ?v3 ))false )))))false )):named a18 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$c (fun_app$e ?v0 ?v1 )?v2 )(forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (fun_app$c (fun_app$e ?v0 ?v4 )?v5 )(or (exists ((?v6 A_llist$ )(?v7 A_llist$ )(?v8 A$ ))(and (= ?v4 (lCons$ ?v8 ?v6 ))(and (= ?v5 (lCons$ ?v8 ?v7 ))(or (fun_app$c (fun_app$e ?v0 ?v6 )?v7 )(fun_app$c (llexord$ ?v3 ?v6 )?v7 )))))(or (exists ((?v6 A$ )(?v7 A$ )(?v8 A_llist$ )(?v9 A_llist$ ))(and (= ?v4 (lCons$ ?v6 ?v8 ))(and (= ?v5 (lCons$ ?v7 ?v9 ))(fun_app$b (fun_app$d ?v3 ?v6 )?v7 ))))(exists ((?v6 A_llist$ ))(and (= ?v4 lNil$ )(= ?v5 ?v6 ))))))))(fun_app$c (llexord$ ?v3 ?v1 )?v2 ))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (llength$ (lCons$ ?v0 ?v1 ))(eSuc$ (llength$ ?v1 ))):pattern ((lCons$ ?v0 ?v1 )))):named a20 ))
(check-sat )
;(get-unsat-core )
