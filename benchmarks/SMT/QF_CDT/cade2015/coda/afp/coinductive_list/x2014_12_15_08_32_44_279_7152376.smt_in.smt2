;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort Nat_a_llist_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort Nat_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-sort A_llist_list$ 0)
(declare-fun nil$ ()A_llist_list$)
(declare-fun hd$ (A_llist_list$)A_llist$)
(declare-fun tl$ (A_llist_list$)A_llist_list$)
(declare-fun cons$ (A_llist$ A_llist_list$ )A_llist_list$)
(declare-codatatypes ()((A_llist_llist_llist$ (lNil$b )(lCons$b (lhd$b A_llist_llist$ )(ltl$b A_llist_llist_llist$ )))))
(declare-sort A_list$ 0)
(declare-sort A_llist_llist_list$ 0)
(declare-fun nil$a ()A_list$)
(declare-fun hd$a (A_list$)A$)
(declare-fun tl$a (A_list$)A_list$)
(declare-fun cons$a (A$ A_list$ )A_list$)
(declare-fun nil$b ()A_llist_llist_list$)
(declare-fun hd$b (A_llist_llist_list$)A_llist_llist$)
(declare-fun tl$b (A_llist_llist_list$)A_llist_llist_list$)
(declare-fun cons$b (A_llist_llist$ A_llist_llist_list$ )A_llist_llist_list$)
(declare-codatatypes ()((A_llist_llist_llist_llist$ (lNil$c )(lCons$c (lhd$c A_llist_llist_llist$ )(ltl$c A_llist_llist_llist_llist$ )))))
(declare-fun i$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun nth$ (A_llist_list$ )Nat_a_llist_fun$ )
(declare-fun set$ (A_llist_list$ )A_llist_set$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xss$ ()A_llist_list$ )
(declare-fun lnth$ (A_llist_llist$ )Nat_a_llist_fun$ )
(declare-fun nth$a (A_llist_llist_list$ )Nat_a_llist_llist_fun$ )
(declare-fun nth$b (A_list$ )Nat_a_fun$ )
(declare-fun size$ (A_llist_list$ )Nat$ )
(declare-fun xss$a ()A_llist_llist$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun lnth$a (A_llist_llist_llist$ )Nat_a_llist_llist_fun$ )
(declare-fun lnth$b (A_llist$ )Nat_a_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$ )A_llist$ )
(declare-fun lappend$ (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun lmember$ (A_llist_llist$ A_llist_llist_llist$ )Bool )
(declare-fun member$a (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$a (A_llist_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$d (Nat_a_llist_llist_fun$ Nat$ )A_llist_llist$ )
(declare-fun fun_app$e (Nat_a_fun$ Nat$ )A$ )
(declare-fun lappend$a (A_llist_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lappend$b (A_llist$ A_llist$ )A_llist$ )
(declare-fun lconcat$a (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lessThan$ (Nat$ )Nat_set$ )
(declare-fun llist_of$ (A_llist_list$ )A_llist_llist$ )
(declare-fun lmember$a (A_llist$ )A_llist_llist_bool_fun$ )
(declare-fun lmember$b (A$ )A_llist_bool_fun$ )
(declare-fun llist_of$a (A_list$ )A_llist$ )
(declare-fun llist_of$b (A_llist_llist_list$ )A_llist_llist_llist$ )
(declare-fun pred_llist$ (A_llist_llist_bool_fun$ A_llist_llist_llist$ )Bool )
(declare-fun pred_llist$a (A_llist_bool_fun$ )A_llist_llist_bool_fun$ )
(declare-fun pred_llist$b (A_bool_fun$ )A_llist_bool_fun$ )
(assert (! (not (= (fun_app$ (lnth$ (lappend$ (llist_of$ xss$ )(lCons$a (lCons$ x$ xs$ )xss$a )))i$ )(fun_app$ (nth$ xss$ )i$ ))):named a0 ))
(assert (! (member$ i$ (lessThan$ (size$ xss$ ))):named a1 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (lappend$a (lCons$b ?v0 ?v1 )?v2 )(lCons$b ?v0 (lappend$a ?v1 ?v2 ))):pattern ((lappend$a (lCons$b ?v0 ?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(! (= (lappend$ (lCons$a ?v0 ?v1 )?v2 )(lCons$a ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$a ?v0 ?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$b (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$b ?v1 ?v2 ))):pattern ((lappend$b (lCons$ ?v0 ?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_llist_list$ ))(= (lnth$a (llist_of$b ?v0 ))(nth$a ?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_list$ ))(= (lnth$b (llist_of$a ?v0 ))(nth$b ?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_llist_list$ ))(= (lnth$ (llist_of$ ?v0 ))(nth$ ?v0 ))):named a12 ))
(assert (! (= xssa$ (lappend$ (llist_of$ xss$ )(lCons$a (lCons$ x$ xs$ )xss$a ))):named a13 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(= (lappend$a (lappend$a ?v0 ?v1 )?v2 )(lappend$a ?v0 (lappend$a ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$b (lappend$b ?v0 ?v1 )?v2 )(lappend$b ?v0 (lappend$b ?v1 ?v2 )))):named a16 ))
(assert (! (= (fun_app$ (nth$ xss$ )i$ )lNil$ ):named a17 ))
(assert (! (member$a (fun_app$ (nth$ xss$ )i$ )(set$ xss$ )):named a18 ))
(assert (! (= (fun_app$ (lnth$ xssa$ )(size$ xss$ ))(lCons$ x$ xs$ )):named a19 ))
(assert (! (= xs$a (lappend$b xs$ (lconcat$ xss$a ))):named a20 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist_llist$ ))(! (= (lconcat$a (lCons$c ?v0 ?v1 ))(lappend$a ?v0 (lconcat$a ?v1 ))):pattern ((lCons$c ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lconcat$b (lCons$b ?v0 ?v1 ))(lappend$ ?v0 (lconcat$b ?v1 ))):pattern ((lCons$b ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lconcat$ (lCons$a ?v0 ?v1 ))(lappend$b ?v0 (lconcat$ ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (pred_llist$ ?v0 (lCons$b ?v1 ?v2 ))(and (fun_app$a ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$b ?v1 ?v2 ))))):named a24 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (fun_app$a (pred_llist$a ?v0 )(lCons$a ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(fun_app$a (pred_llist$a ?v0 )?v2 ))):pattern ((fun_app$a (pred_llist$a ?v0 )(lCons$a ?v1 ?v2 ))))):named a25 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$b (pred_llist$b ?v0 )(lCons$ ?v1 ?v2 ))(and (fun_app$c ?v0 ?v1 )(fun_app$b (pred_llist$b ?v0 )?v2 ))):pattern ((fun_app$b (pred_llist$b ?v0 )(lCons$ ?v1 ?v2 ))))):named a26 ))
(assert (! (= (lconcat$ xssa$ )(lCons$ x$ xs$a )):named a27 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (lmember$ ?v0 (lCons$b ?v1 ?v2 ))(or (= ?v0 ?v1 )(lmember$ ?v0 ?v2 ))):pattern ((lmember$ ?v0 (lCons$b ?v1 ?v2 ))))):named a28 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (fun_app$a (lmember$a ?v0 )(lCons$a ?v1 ?v2 ))(or (= ?v0 ?v1 )(fun_app$a (lmember$a ?v0 )?v2 ))):pattern ((fun_app$a (lmember$a ?v0 )(lCons$a ?v1 ?v2 ))))):named a29 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$b (lmember$b ?v0 )(lCons$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(fun_app$b (lmember$b ?v0 )?v2 ))):pattern ((fun_app$b (lmember$b ?v0 )(lCons$ ?v1 ?v2 ))))):named a30 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (fun_app$d (lnth$a (lCons$b ?v0 ?v1 ))zero$ )?v0 ):pattern ((lCons$b ?v0 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (fun_app$ (lnth$ (lCons$a ?v0 ?v1 ))zero$ )?v0 ):pattern ((lCons$a ?v0 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$e (lnth$b (lCons$ ?v0 ?v1 ))zero$ )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a33 ))
(assert (! (lnull$ (lconcat$ (llist_of$ xss$ ))):named a34 ))
(check-sat )
;(get-unsat-core )
