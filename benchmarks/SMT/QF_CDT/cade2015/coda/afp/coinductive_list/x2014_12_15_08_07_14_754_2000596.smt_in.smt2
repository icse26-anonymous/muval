;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun bot$ ()A_set$ )
(declare-fun sup$ (A_set$ A_set$ )A_set$ )
(declare-fun lset$ ()A_llist_a_set_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$a (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun gen_lset$ (A_set$ )A_llist_a_set_fun$ )
(assert (! (not (= lset$ (gen_lset$ bot$ ))):named a0 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= (collect$ ?v0 )bot$ )(forall ((?v1 A$ ))(not (fun_app$ ?v0 ?v1 ))))):named a1 ))
(assert (! (forall ((?v0 A_set$ ))(= (forall ((?v1 A$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$ ))):named a2 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= bot$ (collect$ ?v0 ))(forall ((?v1 A$ ))(not (fun_app$ ?v0 ?v1 ))))):named a3 ))
(assert (! (forall ((?v0 A$ ))(= (member$ ?v0 bot$ )false )):named a4 ))
(assert (! (forall ((?v0 A_set$ ))(= (exists ((?v1 A$ ))(member$ ?v1 ?v0 ))(not (= ?v0 bot$ )))):named a5 ))
(assert (! (forall ((?v0 A_set$ ))(=> (forall ((?v1 A$ ))(=> (member$ ?v1 ?v0 )false ))(= ?v0 bot$ ))):named a6 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ ))(=> (= ?v0 bot$ )(not (member$ ?v1 ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 bot$ )false )):named a8 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_llist$ ))(! (= (fun_app$a (gen_lset$ ?v0 )?v1 )(sup$ ?v0 (fun_app$a lset$ ?v1 ))):pattern ((fun_app$a (gen_lset$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(= (= (fun_app$a lset$ ?v0 )bot$ )(lnull$ ?v0 ))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (member$ ?v0 (sup$ ?v1 ?v2 ))(or (member$ ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (=> (not (member$ ?v0 ?v1 ))(member$ ?v0 ?v2 ))(member$ ?v0 (sup$ ?v2 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (= (sup$ ?v0 ?v1 )bot$ )(and (= ?v0 bot$ )(= ?v1 bot$ )))):named a13 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_bool_fun$ ))(= (exists ((?v3 A$ ))(and (member$ ?v3 (sup$ ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(or (exists ((?v3 A$ ))(and (member$ ?v3 ?v0 )(fun_app$ ?v2 ?v3 )))(exists ((?v3 A$ ))(and (member$ ?v3 ?v1 )(fun_app$ ?v2 ?v3 )))))):named a14 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_bool_fun$ ))(= (forall ((?v3 A$ ))(=> (member$ ?v3 (sup$ ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(and (forall ((?v3 A$ ))(=> (member$ ?v3 ?v0 )(fun_app$ ?v2 ?v3 )))(forall ((?v3 A$ ))(=> (member$ ?v3 ?v1 )(fun_app$ ?v2 ?v3 )))))):named a15 ))
(check-sat )
;(get-unsat-core )
