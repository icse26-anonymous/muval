;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_a_llist_a_llist_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun uu$ ()A_a_llist_a_llist_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun uua$ (A_bool_fun$ A_llist$ )A_a_llist_a_llist_fun_fun$ )
(declare-fun uub$ ()A_a_llist_a_llist_fun_fun$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ldropn$ (Nat$ )A_llist_a_llist_fun$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_a_llist_a_llist_fun_fun$ A$ )A_llist_a_llist_fun$ )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$d (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun gen_lset$ (A_set$ )A_llist_a_set_fun$ )
(declare-fun ldistinct$ (A_llist$ )Bool )
(declare-fun case_llist$ (A_llist$ A_a_llist_a_llist_fun_fun$ )A_llist_a_llist_fun$ )
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(ldropn$ n$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$a (fun_app$ (uua$ ?v0 ?v1 )?v2 )?v3 )(ite (fun_app$b ?v0 ?v2 )(ldropWhile$ ?v0 ?v3 )?v1 )):pattern ((fun_app$a (fun_app$ (uua$ ?v0 ?v1 )?v2 )?v3 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$a (fun_app$ uub$ ?v0 )?v1 )?v1 ):pattern ((fun_app$a (fun_app$ uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (not (= (fun_app$a (ldropn$ (suc$ n$ ))xs$ )(fun_app$a (case_llist$ lNil$ uu$ )xs$ ))):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (ldropn$ ?v0 )lNil$ )lNil$ ):pattern ((ldropn$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_llist_a_llist_fun_fun$ ))(! (= (fun_app$a (case_llist$ ?v0 ?v1 )lNil$ )?v0 ):pattern ((case_llist$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (ldropWhile$ ?v0 ?v1 )(fun_app$a (case_llist$ lNil$ (uua$ ?v0 ?v1 ))?v1 ))):named a8 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$c (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$d (gen_lset$ ?v0 )lNil$ )?v0 ):pattern ((gen_lset$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_llist$ ?v0 lNil$ )):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(! (=> (lnull$ ?v0 )(= (fun_app$a (ldropn$ ?v1 )?v0 )lNil$ )):pattern ((fun_app$a (ldropn$ ?v1 )?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(= (ltl$ ?v0 )(fun_app$a (case_llist$ lNil$ uub$ )?v0 ))):named a15 ))
(assert (! (ldistinct$ lNil$ ):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a17 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a19 ))
(check-sat )
;(get-unsat-core )
