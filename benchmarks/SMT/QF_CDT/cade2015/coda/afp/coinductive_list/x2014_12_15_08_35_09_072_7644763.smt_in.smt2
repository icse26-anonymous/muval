;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun a$ ()Nat_set$ )
(declare-fun n$ ()Nat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun insert$ (Nat$ Nat_set$ )Nat_set$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lessThan$ (Nat$ )Nat_set$ )
(declare-fun lsublist$ (A_llist$ Nat_set$ )A_llist$ )
(assert (! (not (= (lsublist$ (ltake$ (enat$ n$ )xs$ )(insert$ n$ a$ ))(lsublist$ (ltake$ (enat$ n$ )xs$ )a$ ))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (forall ((?v2 Nat$ ))(= (ltake$ (enat$ ?v2 )?v0 )(ltake$ (enat$ ?v2 )?v1 )))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_set$ ))(= (member$ ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$ ?v2 ?v1 )))):named a5 ))
(assert (! (fun_app$ (less$ (enat$ n$ ))(llength$ xs$ )):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(= (lsublist$ ?v0 (lessThan$ ?v1 ))(ltake$ (enat$ ?v1 )?v0 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_set$ ))(= (insert$ ?v0 (insert$ ?v1 ?v2 ))(insert$ ?v1 (insert$ ?v0 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_set$ ))(=> (and (member$ ?v0 (insert$ ?v1 ?v2 ))(and (=> (= ?v0 ?v1 )false )(=> (member$ ?v0 ?v2 )false )))false )):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ ))(=> (and (member$ ?v0 ?v1 )(forall ((?v2 Nat_set$ ))(=> (and (= ?v1 (insert$ ?v0 ?v2 ))(not (member$ ?v0 ?v2 )))false )))false )):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ ))(! (=> (member$ ?v0 ?v1 )(= (insert$ ?v0 ?v1 )?v1 )):pattern ((insert$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat$ ))(=> (member$ ?v0 ?v1 )(member$ ?v0 (insert$ ?v2 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ ))(=> (member$ ?v0 ?v1 )(exists ((?v2 Nat_set$ ))(and (= ?v1 (insert$ ?v0 ?v2 ))(not (member$ ?v0 ?v2 )))))):named a13 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )(enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 Nat_set$ )(?v3 Nat_set$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (fun_app$ (less$ (enat$ ?v4 ))(llength$ ?v1 ))(= (member$ ?v4 ?v2 )(member$ ?v4 ?v3 )))))(= (lsublist$ ?v0 ?v2 )(lsublist$ ?v1 ?v3 )))):named a16 ))
(check-sat )
;(get-unsat-core )
