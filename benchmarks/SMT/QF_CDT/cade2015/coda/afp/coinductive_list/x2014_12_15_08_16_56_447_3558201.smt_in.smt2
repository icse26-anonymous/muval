;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Enat$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun eSuc$ (Enat$ )Enat$ )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun zero$ ()Enat$ )
(declare-fun ldrop$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(assert (! (not (= (ltl$ (fun_app$ (ldrop$ n$ )xs$ ))(fun_app$ (ldrop$ n$ )(ltl$ xs$ )))):named a0 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (ltl$ (iterates$ ?v0 ?v1 ))(iterates$ ?v0 (fun_app$a ?v0 ?v1 )))):named a1 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (fun_app$ (ldrop$ ?v0 )(ltl$ ?v1 ))(fun_app$ (ldrop$ (eSuc$ ?v0 ))?v1 ))):named a2 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (fun_app$ (ldrop$ (eSuc$ ?v0 ))?v1 )(ltl$ (fun_app$ (ldrop$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$ (ldrop$ zero$ )?v0 )?v0 )):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (ltl$ (ldropn$ ?v0 ?v1 ))(ldropn$ ?v0 (ltl$ ?v1 )))):named a5 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ldrop$ ?v0 )lNil$ )lNil$ ):pattern ((ldrop$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (ltl$ (lmap$ ?v0 ?v1 ))(lmap$ ?v0 (ltl$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$ (ltl$ ?v0 ))(lfinite$ ?v0 ))):named a8 ))
(assert (! (= (ltl$ lNil$ )lNil$ ):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lprefix$ ?v0 ?v1 )(lprefix$ (ltl$ ?v0 )(ltl$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$ lNil$ ?v0 )true ):pattern ((lprefix$ lNil$ ?v0 )))):named a13 ))
(assert (! (= (lfinite$ lNil$ )true ):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (lfinite$ (lmap$ ?v0 ?v1 ))(lfinite$ ?v1 ))):named a15 ))
(check-sat )
;(get-unsat-core )
