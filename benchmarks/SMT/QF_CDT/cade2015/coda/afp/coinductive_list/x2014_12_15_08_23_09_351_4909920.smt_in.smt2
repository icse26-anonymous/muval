;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_a_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun lsetp$ (A_llist$ )A_bool_fun$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lmember$ (A$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_a_llist_bool_fun_fun$ A$ )A_llist_bool_fun$ )
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun llist_all2$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(assert (! (not (exists ((?v0 A$ ))(and (member$ ?v0 (lset$ xs$ ))(not (fun_app$ p$ ?v0 ))))):named a0 ))
(assert (! (not (= (ltakeWhile$ p$ xs$ )xs$ )):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(! (=> (forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v0 ))(fun_app$ ?v1 ?v2 )))(= (ltakeWhile$ ?v1 ?v0 )?v0 )):pattern ((ltakeWhile$ ?v1 ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (ltakeWhile$ ?v1 ?v2 )))(and (member$ ?v0 (lset$ ?v2 ))(fun_app$ ?v1 ?v0 )))):named a3 ))
(assert (! (less$ (llength$ (ltakeWhile$ p$ xs$ ))(llength$ xs$ )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(lmember$ ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (member$ ?v0 (lset$ ?v1 ))(fun_app$ (lsetp$ ?v1 )?v0 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (fun_app$ (lsetp$ ?v0 )?v1 )(member$ ?v1 (lset$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (ldropWhile$ ?v1 ?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 Enat$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (ldrop$ ?v1 ?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (ldropn$ ?v1 ?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (lset$ ?v1 ))(and (member$ ?v5 (lset$ ?v2 ))(fun_app$ (fun_app$a ?v0 ?v4 )?v5 )))(fun_app$ (fun_app$a ?v3 ?v4 )?v5 ))))(llist_all2$ ?v3 ?v1 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_a_llist_bool_fun_fun$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v3 A$ )(?v4 A_llist$ ))(fun_app$b (fun_app$c ?v2 ?v3 )(lCons$ ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_llist$ )(?v5 A$ ))(=> (and (member$ ?v5 (lset$ ?v4 ))(fun_app$b (fun_app$c ?v2 ?v5 )?v4 ))(fun_app$b (fun_app$c ?v2 ?v5 )(lCons$ ?v3 ?v4 ))))))(fun_app$b (fun_app$c ?v2 ?v0 )?v1 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(and (forall ((?v2 A_llist$ ))(=> (= ?v1 (lCons$ ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (= ?v1 (lCons$ ?v2 ?v3 ))(member$ ?v0 (lset$ ?v3 )))false ))))false )):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (llist_all2$ ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))(and (fun_app$ (fun_app$a ?v0 ?v1 )?v3 )(llist_all2$ ?v0 ?v2 ?v4 ))):pattern ((llist_all2$ ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))))):named a15 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (ldropWhile$ ?v0 (lCons$ ?v1 ?v2 ))(ite (fun_app$ ?v0 ?v1 )(ldropWhile$ ?v0 ?v2 )(lCons$ ?v1 ?v2 ))):pattern ((ldropWhile$ ?v0 (lCons$ ?v1 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (llength$ (ltakeWhile$ ?v0 ?v1 ))(llength$ ?v1 ))(= (ltakeWhile$ ?v0 ?v1 )?v1 ))):named a17 ))
(check-sat )
;(get-unsat-core )
