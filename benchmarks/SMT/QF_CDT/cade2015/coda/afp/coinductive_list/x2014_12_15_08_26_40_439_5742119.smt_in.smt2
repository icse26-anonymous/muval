;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun j$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ )Enat_bool_fun$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun zero$ ()Nat$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun llength$ ()A_llist_enat_fun$ )
(declare-fun fun_app$a (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun size_enat$ (Enat$ )Nat$ )
(declare-fun gen_llength$ (Nat$ )A_llist_enat_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (not (fun_app$ (less$ (enat$ zero$ ))(fun_app$a llength$ xsa$ ))):named a0 ))
(assert (! (fun_app$ (less$ (enat$ j$ ))(fun_app$a llength$ xs$ )):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$ (less$ (enat$ ?v0 ))(fun_app$a llength$ xsa$ ))(and (fun_app$ (less$ (enat$ ?v1 ))(fun_app$a llength$ xsa$ ))(not (= ?v0 ?v1 ))))(not (= (lnth$ xsa$ ?v0 )(lnth$ xsa$ ?v1 ))))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$ (less$ (enat$ ?v0 ))(fun_app$a llength$ xs$a ))(and (fun_app$ (less$ (enat$ ?v1 ))(fun_app$a llength$ xs$a ))(not (= ?v0 ?v1 ))))(not (= (lnth$ xs$a ?v0 )(lnth$ xs$a ?v1 ))))):named a3 ))
(assert (! (not (lnull$ xsa$ )):named a4 ))
(assert (! (=> (forall ((?v0 Nat$ ))(=> (and (fun_app$ (less$ (enat$ ?v0 ))(fun_app$a llength$ xs$ ))(= (lnth$ xs$ ?v0 )x$ ))false ))false ):named a5 ))
(assert (! (= xsa$ (lCons$ x$ xs$ )):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (fun_app$ (less$ ?v0 )(enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a8 ))
(assert (! (not (less$a zero$ zero$ )):named a9 ))
(assert (! (=> (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (= xsa$ (lCons$ ?v0 ?v1 ))false ))false ):named a10 ))
(assert (! (= llength$ (gen_llength$ zero$ )):named a11 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (size_enat$ (enat$ ?v0 ))zero$ ):pattern ((enat$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Enat_bool_fun$ )(?v1 Enat$ ))(=> (forall ((?v2 Enat$ ))(=> (forall ((?v3 Enat$ ))(=> (fun_app$ (less$ ?v3 )?v2 )(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 ?v2 )))(fun_app$ ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(fun_app$ (less$ (fun_app$a llength$ ?v0 ))(fun_app$a llength$ ?v1 )))):named a14 ))
(assert (! (= zero$ zero$ ):named a15 ))
(check-sat )
;(get-unsat-core )
