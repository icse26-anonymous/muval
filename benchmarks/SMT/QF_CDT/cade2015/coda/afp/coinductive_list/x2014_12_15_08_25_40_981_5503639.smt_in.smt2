;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun n$ ()Nat$ )
(declare-fun p$ ()A_a_bool_fun_fun$ )
(declare-fun uu$ ()A_a_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun zs$ ()A_llist$ )
(declare-fun uua$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lmap$ (A_a_fun$ A_llist$ )A_llist$ )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun transp$ (A_a_bool_fun_fun$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$d (A_a_fun$ A$ )A$ )
(declare-fun llist_all2$ (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$ (fun_app$a uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$b (fun_app$c uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uu$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (fun_app$b (fun_app$c p$ (lnth$ xs$ n$ ))(lnth$ zs$ n$ ))):named a2 ))
(assert (! (fun_app$ (fun_app$a (llist_all2$ p$ )xs$ )ys$ ):named a3 ))
(assert (! (fun_app$ (fun_app$a (llist_all2$ p$ )ys$ )zs$ ):named a4 ))
(assert (! (transp$ p$ ):named a5 ))
(assert (! (less$ (enat$ n$ )(llength$ xs$ )):named a6 ))
(assert (! (= (llength$ xs$ )(llength$ ys$ )):named a7 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ (fun_app$a (llist_all2$ ?v0 )?v1 )?v2 )(and (= (llength$ ?v1 )(llength$ ?v2 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$ ?v2 ))(fun_app$b (fun_app$c ?v0 (lnth$ ?v1 ?v3 ))(lnth$ ?v2 ?v3 ))))))):named a8 ))
(assert (! (= (llist_all2$ uu$ )uua$ ):named a9 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$ ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (fun_app$b (fun_app$c ?v0 ?v4 )?v5 )(fun_app$b (fun_app$c ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$a (llist_all2$ ?v3 )?v1 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Nat$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$ ?v0 )?v1 )?v2 )(less$ (enat$ ?v3 )(llength$ ?v2 )))(fun_app$b (fun_app$c ?v0 (lnth$ ?v1 ?v3 ))(lnth$ ?v2 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Nat$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$ ?v0 )?v1 )?v2 )(less$ (enat$ ?v3 )(llength$ ?v1 )))(fun_app$b (fun_app$c ?v0 (lnth$ ?v1 ?v3 ))(lnth$ ?v2 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$ (fun_app$a (llist_all2$ ?v0 )?v1 )?v2 )(= (llength$ ?v1 )(llength$ ?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (and (= (llength$ ?v0 )(llength$ ?v1 ))(forall ((?v3 Nat$ ))(=> (less$ (enat$ ?v3 )(llength$ ?v0 ))(fun_app$b (fun_app$c ?v2 (lnth$ ?v0 ?v3 ))(lnth$ ?v1 ?v3 )))))(fun_app$ (fun_app$a (llist_all2$ ?v2 )?v0 )?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_fun$ ))(=> (less$ (enat$ ?v0 )(llength$ ?v1 ))(= (lnth$ (lmap$ ?v2 ?v1 )?v0 )(fun_app$d ?v2 (lnth$ ?v1 ?v0 ))))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 Nat$ ))(=> (and (lprefix$ ?v0 ?v1 )(less$ (enat$ ?v2 )(llength$ ?v0 )))(= (lnth$ ?v0 ?v2 )(lnth$ ?v1 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (less$ (enat$ ?v0 )(llength$ (ltakeWhile$ ?v1 ?v2 )))(= (lnth$ (ltakeWhile$ ?v1 ?v2 )?v0 )(lnth$ ?v2 ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$ ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$ ?v1 ))(= (lnth$ ?v1 ?v2 )?v0 ))))):named a20 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ ))(= (transp$ ?v0 )(forall ((?v1 A$ )(?v2 A$ )(?v3 A$ ))(=> (and (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(fun_app$b (fun_app$c ?v0 ?v2 )?v3 ))(fun_app$b (fun_app$c ?v0 ?v1 )?v3 ))))):named a21 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ ))(=> (forall ((?v1 A$ )(?v2 A$ )(?v3 A$ ))(=> (and (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(fun_app$b (fun_app$c ?v0 ?v2 )?v3 ))(fun_app$b (fun_app$c ?v0 ?v1 )?v3 )))(transp$ ?v0 ))):named a22 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(=> (and (transp$ ?v0 )(and (fun_app$b (fun_app$c ?v0 ?v1 )?v2 )(and (fun_app$b (fun_app$c ?v0 ?v2 )?v3 )(=> (fun_app$b (fun_app$c ?v0 ?v1 )?v3 )false ))))false )):named a23 ))
(check-sat )
;(get-unsat-core )
