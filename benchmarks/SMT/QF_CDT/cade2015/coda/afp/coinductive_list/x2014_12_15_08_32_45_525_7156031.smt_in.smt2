;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-sort A_llist_list$ 0)
(declare-fun nil$ ()A_llist_list$)
(declare-fun hd$ (A_llist_list$)A_llist$)
(declare-fun tl$ (A_llist_list$)A_llist_list$)
(declare-fun cons$ (A_llist$ A_llist_list$ )A_llist_list$)
(declare-fun i$ ()Nat$ )
(declare-fun nth$ (A_llist_list$ Nat$ )A_llist$ )
(declare-fun set$ (A_llist_list$ )A_llist_set$ )
(declare-fun xss$ ()A_llist_list$ )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun lnth$ (A_llist_llist$ Nat$ )A_llist$ )
(declare-fun size$ (A_llist_list$ )Nat$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun zero$ ()Enat$ )
(declare-fun ldrop$ (Enat$ )A_llist_a_llist_fun$ )
(declare-fun lnth$a (A_llist$ Nat$ )A$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun zero$a ()Nat$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun member$a (Nat$ Nat_set$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lessThan$ (Nat$ )Nat_set$ )
(assert (! (not (= (llength$ (lnth$ xssa$ i$ ))zero$ )):named a0 ))
(assert (! (= (nth$ xss$ i$ )lNil$ ):named a1 ))
(assert (! (= (lnth$ xssa$ i$ )(nth$ xss$ i$ )):named a2 ))
(assert (! (= (llength$ lNil$ )zero$ ):named a3 ))
(assert (! (forall ((?v0 Enat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$a ?v0 )(= ?v0 zero$a ))):named a5 ))
(assert (! (forall ((?v0 Enat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a6 ))
(assert (! (member$ (nth$ xss$ i$ )(set$ xss$ )):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(= (= (llength$ ?v0 )zero$ )(lnull$ ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(! (=> (lnull$ ?v0 )(= (llength$ ?v0 )zero$ )):pattern ((llength$ ?v0 )))):named a9 ))
(assert (! (member$a i$ (lessThan$ (size$ xss$ ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a11 ))
(assert (! (=> (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (= (lconcat$ xssa$ )(lCons$ ?v0 ?v1 ))false ))false ):named a12 ))
(assert (! (not (lnull$ (lconcat$ xssa$ ))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$a (ldrop$ zero$ )?v0 )?v0 )):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lnth$ (lCons$a ?v0 ?v1 )zero$a )?v0 ):pattern ((lCons$a ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lnth$a (lCons$ ?v0 ?v1 )zero$a )?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$a (ldrop$ ?v0 )lNil$ )lNil$ ):pattern ((ldrop$ ?v0 )))):named a19 ))
(check-sat )
;(get-unsat-core )
