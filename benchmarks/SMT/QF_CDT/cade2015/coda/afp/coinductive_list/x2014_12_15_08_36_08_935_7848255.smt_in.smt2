;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort B_nat_fun$ 0 )
(declare-sort Nat_a_fun$ 0 )
(declare-sort Nat_b_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_a_a_prod_fun$ 0 )
(declare-sort Nat_a_b_prod_fun$ 0 )
(declare-sort Nat_b_a_prod_fun$ 0 )
(declare-sort Nat_a_a_a_prod_prod_fun$ 0 )
(declare-sort Nat_a_a_b_prod_prod_fun$ 0 )
(declare-sort Nat_a_b_prod_a_prod_fun$ 0 )
(declare-sort Nat_a_a_b_prod_a_prod_prod_fun$ 0 )
(declare-sort Nat_a_b_prod_a_b_prod_prod_fun$ 0 )
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-codatatypes ()((A_b_prod_llist$ (lNil$ )(lCons$ (lhd$ A_b_prod$ )(ltl$ A_b_prod_llist$ )))(A_llist$ (lNil$a )(lCons$a (lhd$a A$ )(ltl$a A_llist$ )))(B_llist$ (lNil$b )(lCons$b (lhd$b B$ )(ltl$b B_llist$ )))))
(declare-sort A_list$ 0)
(declare-sort A_b_prod_list$ 0)
(declare-sort B_list$ 0)
(declare-sort Nat_list$ 0)
(declare-sort A_a_prod$ 0)
(declare-sort A_a_prod_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun nil$a ()A_b_prod_list$)
(declare-fun hd$a (A_b_prod_list$)A_b_prod$)
(declare-fun tl$a (A_b_prod_list$)A_b_prod_list$)
(declare-fun cons$a (A_b_prod$ A_b_prod_list$ )A_b_prod_list$)
(declare-fun nil$b ()B_list$)
(declare-fun hd$b (B_list$)B$)
(declare-fun tl$b (B_list$)B_list$)
(declare-fun cons$b (B$ B_list$ )B_list$)
(declare-fun nil$c ()Nat_list$)
(declare-fun hd$c (Nat_list$)Nat$)
(declare-fun tl$c (Nat_list$)Nat_list$)
(declare-fun cons$c (Nat$ Nat_list$ )Nat_list$)
(declare-fun fst$a (A_a_prod$)A$)
(declare-fun snd$a (A_a_prod$)A$)
(declare-fun pair$a (A$ A$ )A_a_prod$)
(declare-fun nil$d ()A_a_prod_list$)
(declare-fun hd$d (A_a_prod_list$)A_a_prod$)
(declare-fun tl$d (A_a_prod_list$)A_a_prod_list$)
(declare-fun cons$d (A_a_prod$ A_a_prod_list$ )A_a_prod_list$)
(declare-codatatypes ()((A_a_prod_llist$ (lNil$c )(lCons$c (lhd$c A_a_prod$ )(ltl$c A_a_prod_llist$ )))))
(declare-sort A_b_prod_a_prod$ 0)
(declare-sort A_b_prod_a_prod_list$ 0)
(declare-fun fst$b (A_b_prod_a_prod$)A_b_prod$)
(declare-fun snd$b (A_b_prod_a_prod$)A$)
(declare-fun pair$b (A_b_prod$ A$ )A_b_prod_a_prod$)
(declare-fun nil$e ()A_b_prod_a_prod_list$)
(declare-fun hd$e (A_b_prod_a_prod_list$)A_b_prod_a_prod$)
(declare-fun tl$e (A_b_prod_a_prod_list$)A_b_prod_a_prod_list$)
(declare-fun cons$e (A_b_prod_a_prod$ A_b_prod_a_prod_list$ )A_b_prod_a_prod_list$)
(declare-codatatypes ()((A_b_prod_a_prod_llist$ (lNil$d )(lCons$d (lhd$d A_b_prod_a_prod$ )(ltl$d A_b_prod_a_prod_llist$ )))))
(declare-sort A_a_b_prod_prod$ 0)
(declare-sort A_a_b_prod_prod_list$ 0)
(declare-fun fst$c (A_a_b_prod_prod$)A$)
(declare-fun snd$c (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$c (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-fun nil$f ()A_a_b_prod_prod_list$)
(declare-fun hd$f (A_a_b_prod_prod_list$)A_a_b_prod_prod$)
(declare-fun tl$f (A_a_b_prod_prod_list$)A_a_b_prod_prod_list$)
(declare-fun cons$f (A_a_b_prod_prod$ A_a_b_prod_prod_list$ )A_a_b_prod_prod_list$)
(declare-codatatypes ()((A_a_b_prod_prod_llist$ (lNil$e )(lCons$e (lhd$e A_a_b_prod_prod$ )(ltl$e A_a_b_prod_prod_llist$ )))))
(declare-sort A_b_prod_a_b_prod_prod$ 0)
(declare-sort A_b_prod_a_b_prod_prod_list$ 0)
(declare-fun fst$d (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun snd$d (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$d (A_b_prod$ A_b_prod$ )A_b_prod_a_b_prod_prod$)
(declare-fun nil$g ()A_b_prod_a_b_prod_prod_list$)
(declare-fun hd$g (A_b_prod_a_b_prod_prod_list$)A_b_prod_a_b_prod_prod$)
(declare-fun tl$g (A_b_prod_a_b_prod_prod_list$)A_b_prod_a_b_prod_prod_list$)
(declare-fun cons$g (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_list$)
(declare-codatatypes ()((A_b_prod_a_b_prod_prod_llist$ (lNil$f )(lCons$f (lhd$f A_b_prod_a_b_prod_prod$ )(ltl$f A_b_prod_a_b_prod_prod_llist$ )))))
(declare-sort B_a_prod$ 0)
(declare-sort B_a_prod_list$ 0)
(declare-fun fst$e (B_a_prod$)B$)
(declare-fun snd$e (B_a_prod$)A$)
(declare-fun pair$e (B$ A$ )B_a_prod$)
(declare-fun nil$h ()B_a_prod_list$)
(declare-fun hd$h (B_a_prod_list$)B_a_prod$)
(declare-fun tl$h (B_a_prod_list$)B_a_prod_list$)
(declare-fun cons$h (B_a_prod$ B_a_prod_list$ )B_a_prod_list$)
(declare-codatatypes ()((B_a_prod_llist$ (lNil$g )(lCons$g (lhd$g B_a_prod$ )(ltl$g B_a_prod_llist$ )))))
(declare-sort A_a_a_prod_prod$ 0)
(declare-sort A_a_a_prod_prod_list$ 0)
(declare-fun fst$f (A_a_a_prod_prod$)A$)
(declare-fun snd$f (A_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$f (A$ A_a_prod$ )A_a_a_prod_prod$)
(declare-fun nil$i ()A_a_a_prod_prod_list$)
(declare-fun hd$i (A_a_a_prod_prod_list$)A_a_a_prod_prod$)
(declare-fun tl$i (A_a_a_prod_prod_list$)A_a_a_prod_prod_list$)
(declare-fun cons$i (A_a_a_prod_prod$ A_a_a_prod_prod_list$ )A_a_a_prod_prod_list$)
(declare-codatatypes ()((A_a_a_prod_prod_llist$ (lNil$h )(lCons$h (lhd$h A_a_a_prod_prod$ )(ltl$h A_a_a_prod_prod_llist$ )))))
(declare-sort A_a_b_prod_a_prod_prod$ 0)
(declare-sort A_a_b_prod_a_prod_prod_list$ 0)
(declare-fun fst$g (A_a_b_prod_a_prod_prod$)A$)
(declare-fun snd$g (A_a_b_prod_a_prod_prod$)A_b_prod_a_prod$)
(declare-fun pair$g (A$ A_b_prod_a_prod$ )A_a_b_prod_a_prod_prod$)
(declare-fun nil$j ()A_a_b_prod_a_prod_prod_list$)
(declare-fun hd$j (A_a_b_prod_a_prod_prod_list$)A_a_b_prod_a_prod_prod$)
(declare-fun tl$j (A_a_b_prod_a_prod_prod_list$)A_a_b_prod_a_prod_prod_list$)
(declare-fun cons$j (A_a_b_prod_a_prod_prod$ A_a_b_prod_a_prod_prod_list$ )A_a_b_prod_a_prod_prod_list$)
(declare-codatatypes ()((A_a_b_prod_a_prod_prod_llist$ (lNil$i )(lCons$i (lhd$i A_a_b_prod_a_prod_prod$ )(ltl$i A_a_b_prod_a_prod_prod_llist$ )))))
(declare-sort B_b_prod$ 0)
(declare-fun fst$h (B_b_prod$)B$)
(declare-fun snd$h (B_b_prod$)B$)
(declare-fun pair$h (B$ B$ )B_b_prod$)
(declare-codatatypes ()((B_b_prod_llist$ (lNil$j )(lCons$j (lhd$j B_b_prod$ )(ltl$j B_b_prod_llist$ )))))
(declare-sort B_b_prod_list$ 0)
(declare-sort A_b_prod_b_prod$ 0)
(declare-fun nil$k ()B_b_prod_list$)
(declare-fun hd$k (B_b_prod_list$)B_b_prod$)
(declare-fun tl$k (B_b_prod_list$)B_b_prod_list$)
(declare-fun cons$k (B_b_prod$ B_b_prod_list$ )B_b_prod_list$)
(declare-fun fst$i (A_b_prod_b_prod$)A_b_prod$)
(declare-fun snd$i (A_b_prod_b_prod$)B$)
(declare-fun pair$i (A_b_prod$ B$ )A_b_prod_b_prod$)
(declare-codatatypes ()((A_b_prod_b_prod_llist$ (lNil$k )(lCons$k (lhd$k A_b_prod_b_prod$ )(ltl$k A_b_prod_b_prod_llist$ )))))
(declare-sort A_b_prod_b_prod_list$ 0)
(declare-sort A_a_prod_a_prod$ 0)
(declare-fun nil$l ()A_b_prod_b_prod_list$)
(declare-fun hd$l (A_b_prod_b_prod_list$)A_b_prod_b_prod$)
(declare-fun tl$l (A_b_prod_b_prod_list$)A_b_prod_b_prod_list$)
(declare-fun cons$l (A_b_prod_b_prod$ A_b_prod_b_prod_list$ )A_b_prod_b_prod_list$)
(declare-fun fst$j (A_a_prod_a_prod$)A_a_prod$)
(declare-fun snd$j (A_a_prod_a_prod$)A$)
(declare-fun pair$j (A_a_prod$ A$ )A_a_prod_a_prod$)
(declare-codatatypes ()((A_a_prod_a_prod_llist$ (lNil$l )(lCons$l (lhd$l A_a_prod_a_prod$ )(ltl$l A_a_prod_a_prod_llist$ )))))
(declare-sort A_a_prod_a_prod_list$ 0)
(declare-fun nil$m ()A_a_prod_a_prod_list$)
(declare-fun hd$m (A_a_prod_a_prod_list$)A_a_prod_a_prod$)
(declare-fun tl$m (A_a_prod_a_prod_list$)A_a_prod_a_prod_list$)
(declare-fun cons$m (A_a_prod_a_prod$ A_a_prod_a_prod_list$ )A_a_prod_a_prod_list$)
(declare-fun x$ ()A$ )
(declare-fun fa$ ()Nat_b_fun$ )
(declare-fun uu$ ()Nat_b_fun$ )
(declare-fun map$ (Nat_b_fun$ Nat_list$ )B_list$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun upt$ (Nat$ Nat$ )Nat_list$ )
(declare-fun uua$ ()Nat_nat_fun$ )
(declare-fun uub$ ()A_a_fun$ )
(declare-fun uuc$ ()B_b_fun$ )
(declare-fun xsa$ ()A_list$ )
(declare-fun zip$ (A_list$ B_list$ )A_b_prod_list$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun map$a (B_a_fun$ B_list$ )A_list$ )
(declare-fun map$b (Nat_a_fun$ Nat_list$ )A_list$ )
(declare-fun map$c (A_b_fun$ A_list$ )B_list$ )
(declare-fun map$d (B_b_fun$ B_list$ )B_list$ )
(declare-fun map$e (A_nat_fun$ A_list$ )Nat_list$ )
(declare-fun map$f (B_nat_fun$ B_list$ )Nat_list$ )
(declare-fun map$g (Nat_nat_fun$ Nat_list$ )Nat_list$ )
(declare-fun map$h (A_a_fun$ A_list$ )A_list$ )
(declare-fun size$ (A_list$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun zip$a (A_list$ A_list$ )A_a_prod_list$ )
(declare-fun zip$b (A_list$ A_b_prod_list$ )A_a_b_prod_prod_list$ )
(declare-fun zip$c (A_b_prod_list$ A_list$ )A_b_prod_a_prod_list$ )
(declare-fun zip$d (A_b_prod_list$ A_b_prod_list$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun zip$e (B_list$ A_list$ )B_a_prod_list$ )
(declare-fun zip$f (B_list$ B_list$ )B_b_prod_list$ )
(declare-fun zip$g (A_list$ A_a_prod_list$ )A_a_a_prod_prod_list$ )
(declare-fun zip$h (A_b_prod_list$ B_list$ )A_b_prod_b_prod_list$ )
(declare-fun zip$i (A_a_prod_list$ A_list$ )A_a_prod_a_prod_list$ )
(declare-fun lzip$a (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun lzip$b (A_llist$ A_b_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun lzip$c (A_b_prod_llist$ A_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun lzip$d (A_b_prod_llist$ A_b_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun lzip$e (B_llist$ A_llist$ )B_a_prod_llist$ )
(declare-fun lzip$f (B_llist$ B_llist$ )B_b_prod_llist$ )
(declare-fun lzip$g (A_llist$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lzip$h (A_b_prod_llist$ B_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun lzip$i (A_a_prod_llist$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun size$a (B_list$ )Nat$ )
(declare-fun size$b (Nat_list$ )Nat$ )
(declare-fun fun_app$ (Nat_b_fun$ Nat$ )B$ )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$b (B_b_fun$ B$ )B$ )
(declare-fun fun_app$c (A_a_fun$ A$ )A$ )
(declare-fun fun_app$d (A_nat_fun$ A$ )Nat$ )
(declare-fun fun_app$e (B_nat_fun$ B$ )Nat$ )
(declare-fun fun_app$f (Nat_a_fun$ Nat$ )A$ )
(declare-fun fun_app$g (A_b_fun$ A$ )B$ )
(declare-fun fun_app$h (B_a_fun$ B$ )A$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun inf_llist$ (Nat_b_fun$ )B_llist$ )
(declare-fun llist_of$a (A_b_prod_list$ )A_b_prod_llist$ )
(declare-fun llist_of$b (B_list$ )B_llist$ )
(declare-fun llist_of$c (A_a_prod_list$ )A_a_prod_llist$ )
(declare-fun llist_of$d (A_b_prod_a_prod_list$ )A_b_prod_a_prod_llist$ )
(declare-fun llist_of$e (A_a_b_prod_prod_list$ )A_a_b_prod_prod_llist$ )
(declare-fun llist_of$f (A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun llist_of$g (B_a_prod_list$ )B_a_prod_llist$ )
(declare-fun llist_of$h (A_a_a_prod_prod_list$ )A_a_a_prod_prod_llist$ )
(declare-fun llist_of$i (A_a_b_prod_a_prod_prod_list$ )A_a_b_prod_a_prod_prod_llist$ )
(declare-fun llist_of$j (B_b_prod_list$ )B_b_prod_llist$ )
(declare-fun llist_of$k (A_b_prod_b_prod_list$ )A_b_prod_b_prod_llist$ )
(declare-fun llist_of$l (A_a_prod_a_prod_list$ )A_a_prod_a_prod_llist$ )
(declare-fun inf_llist$a (Nat_a_a_prod_fun$ )A_a_prod_llist$ )
(declare-fun inf_llist$b (Nat_a_a_b_prod_prod_fun$ )A_a_b_prod_prod_llist$ )
(declare-fun inf_llist$c (Nat_a_b_prod_a_prod_fun$ )A_b_prod_a_prod_llist$ )
(declare-fun inf_llist$d (Nat_a_b_prod_a_b_prod_prod_fun$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun inf_llist$e (Nat_a_b_prod_fun$ )A_b_prod_llist$ )
(declare-fun inf_llist$f (Nat_a_fun$ )A_llist$ )
(declare-fun inf_llist$g (Nat_b_a_prod_fun$ )B_a_prod_llist$ )
(declare-fun inf_llist$h (Nat_a_a_a_prod_prod_fun$ )A_a_a_prod_prod_llist$ )
(declare-fun inf_llist$i (Nat_a_a_b_prod_a_prod_prod_fun$ )A_a_b_prod_a_prod_prod_llist$ )
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$ fa$ (suc$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a uua$ ?v0 )?v0 ):pattern ((fun_app$a uua$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$b uuc$ ?v0 )?v0 ):pattern ((fun_app$b uuc$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$c uub$ ?v0 )?v0 ):pattern ((fun_app$c uub$ ?v0 )))):named a3 ))
(assert (! (not (= (lzip$ (llist_of$ (cons$ x$ xsa$ ))(inf_llist$ fa$ ))(llist_of$a (zip$ (cons$ x$ xsa$ )(map$ fa$ (upt$ zero$ (size$ (cons$ x$ xsa$ )))))))):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(= (= (llist_of$b ?v0 )(llist_of$b ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_a_prod_list$ ))(= (= (llist_of$c ?v0 )(llist_of$c ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_b_prod_a_prod_list$ )(?v1 A_b_prod_a_prod_list$ ))(= (= (llist_of$d ?v0 )(llist_of$d ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_list$ )(?v1 A_a_b_prod_prod_list$ ))(= (= (llist_of$e ?v0 )(llist_of$e ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ )(?v1 A_b_prod_a_b_prod_prod_list$ ))(= (= (llist_of$f ?v0 )(llist_of$f ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 B_a_prod_list$ )(?v1 B_a_prod_list$ ))(= (= (llist_of$g ?v0 )(llist_of$g ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$ )(?v1 A_a_a_prod_prod_list$ ))(= (= (llist_of$h ?v0 )(llist_of$h ?v1 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_a_b_prod_a_prod_prod_list$ )(?v1 A_a_b_prod_a_prod_prod_list$ ))(= (= (llist_of$i ?v0 )(llist_of$i ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Nat_a_a_prod_fun$ )(?v1 Nat_a_a_prod_fun$ ))(= (= (inf_llist$a ?v0 )(inf_llist$a ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 Nat_a_a_b_prod_prod_fun$ )(?v1 Nat_a_a_b_prod_prod_fun$ ))(= (= (inf_llist$b ?v0 )(inf_llist$b ?v1 ))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 Nat_a_b_prod_a_prod_fun$ )(?v1 Nat_a_b_prod_a_prod_fun$ ))(= (= (inf_llist$c ?v0 )(inf_llist$c ?v1 ))(= ?v0 ?v1 ))):named a17 ))
(assert (! (forall ((?v0 Nat_a_b_prod_a_b_prod_prod_fun$ )(?v1 Nat_a_b_prod_a_b_prod_prod_fun$ ))(= (= (inf_llist$d ?v0 )(inf_llist$d ?v1 ))(= ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 Nat_a_b_prod_fun$ )(?v1 Nat_a_b_prod_fun$ ))(= (= (inf_llist$e ?v0 )(inf_llist$e ?v1 ))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_a_fun$ ))(= (= (inf_llist$f ?v0 )(inf_llist$f ?v1 ))(= ?v0 ?v1 ))):named a20 ))
(assert (! (forall ((?v0 Nat_b_fun$ )(?v1 Nat_b_fun$ ))(= (= (inf_llist$ ?v0 )(inf_llist$ ?v1 ))(= ?v0 ?v1 ))):named a21 ))
(assert (! (= (lzip$ (llist_of$ xsa$ )(inf_llist$ uu$ ))(llist_of$a (zip$ xsa$ (map$ uu$ (upt$ zero$ (size$ xsa$ )))))):named a22 ))
(assert (! (= (map$ fa$ (upt$ zero$ (size$ (cons$ x$ xsa$ ))))(cons$b (fun_app$ fa$ zero$ )(map$ uu$ (upt$ zero$ (size$ xsa$ ))))):named a23 ))
(assert (! (forall ((?v0 Nat_b_fun$ ))(= (lzip$ (llist_of$ xsa$ )(inf_llist$ ?v0 ))(llist_of$a (zip$ xsa$ (map$ ?v0 (upt$ zero$ (size$ xsa$ ))))))):named a24 ))
(assert (! (forall ((?v0 A_list$ )(?v1 B_list$ ))(= (lzip$ (llist_of$ ?v0 )(llist_of$b ?v1 ))(llist_of$a (zip$ ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (lzip$a (llist_of$ ?v0 )(llist_of$ ?v1 ))(llist_of$c (zip$a ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_b_prod_list$ ))(= (lzip$b (llist_of$ ?v0 )(llist_of$a ?v1 ))(llist_of$e (zip$b ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_list$ ))(= (lzip$c (llist_of$a ?v0 )(llist_of$ ?v1 ))(llist_of$d (zip$c ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(= (lzip$d (llist_of$a ?v0 )(llist_of$a ?v1 ))(llist_of$f (zip$d ?v0 ?v1 )))):named a29 ))
(assert (! (forall ((?v0 B_list$ )(?v1 A_list$ ))(= (lzip$e (llist_of$b ?v0 )(llist_of$ ?v1 ))(llist_of$g (zip$e ?v0 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ ))(= (lzip$f (llist_of$b ?v0 )(llist_of$b ?v1 ))(llist_of$j (zip$f ?v0 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_a_prod_list$ ))(= (lzip$g (llist_of$ ?v0 )(llist_of$c ?v1 ))(llist_of$h (zip$g ?v0 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 B_list$ ))(= (lzip$h (llist_of$a ?v0 )(llist_of$b ?v1 ))(llist_of$k (zip$h ?v0 ?v1 )))):named a33 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_list$ ))(= (lzip$i (llist_of$c ?v0 )(llist_of$ ?v1 ))(llist_of$l (zip$i ?v0 ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (forall ((?v1 A_list$ ))(=> (= ?v0 (llist_of$ ?v1 ))false ))(forall ((?v1 Nat_a_fun$ ))(=> (= ?v0 (inf_llist$f ?v1 ))false )))false )):named a35 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (and (forall ((?v1 B_list$ ))(=> (= ?v0 (llist_of$b ?v1 ))false ))(forall ((?v1 Nat_b_fun$ ))(=> (= ?v0 (inf_llist$ ?v1 ))false )))false )):named a36 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(=> (and (forall ((?v1 A_b_prod_list$ ))(=> (= ?v0 (llist_of$a ?v1 ))false ))(forall ((?v1 Nat_a_b_prod_fun$ ))(=> (= ?v0 (inf_llist$e ?v1 ))false )))false )):named a37 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(=> (and (forall ((?v1 A_a_prod_list$ ))(=> (= ?v0 (llist_of$c ?v1 ))false ))(forall ((?v1 Nat_a_a_prod_fun$ ))(=> (= ?v0 (inf_llist$a ?v1 ))false )))false )):named a38 ))
(assert (! (forall ((?v0 A_b_prod_a_prod_llist$ ))(=> (and (forall ((?v1 A_b_prod_a_prod_list$ ))(=> (= ?v0 (llist_of$d ?v1 ))false ))(forall ((?v1 Nat_a_b_prod_a_prod_fun$ ))(=> (= ?v0 (inf_llist$c ?v1 ))false )))false )):named a39 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ ))(=> (and (forall ((?v1 A_a_b_prod_prod_list$ ))(=> (= ?v0 (llist_of$e ?v1 ))false ))(forall ((?v1 Nat_a_a_b_prod_prod_fun$ ))(=> (= ?v0 (inf_llist$b ?v1 ))false )))false )):named a40 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_llist$ ))(=> (and (forall ((?v1 A_b_prod_a_b_prod_prod_list$ ))(=> (= ?v0 (llist_of$f ?v1 ))false ))(forall ((?v1 Nat_a_b_prod_a_b_prod_prod_fun$ ))(=> (= ?v0 (inf_llist$d ?v1 ))false )))false )):named a41 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(=> (and (forall ((?v1 B_a_prod_list$ ))(=> (= ?v0 (llist_of$g ?v1 ))false ))(forall ((?v1 Nat_b_a_prod_fun$ ))(=> (= ?v0 (inf_llist$g ?v1 ))false )))false )):named a42 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(=> (and (forall ((?v1 A_a_a_prod_prod_list$ ))(=> (= ?v0 (llist_of$h ?v1 ))false ))(forall ((?v1 Nat_a_a_a_prod_prod_fun$ ))(=> (= ?v0 (inf_llist$h ?v1 ))false )))false )):named a43 ))
(assert (! (forall ((?v0 A_a_b_prod_a_prod_prod_llist$ ))(=> (and (forall ((?v1 A_a_b_prod_a_prod_prod_list$ ))(=> (= ?v0 (llist_of$i ?v1 ))false ))(forall ((?v1 Nat_a_a_b_prod_a_prod_prod_fun$ ))(=> (= ?v0 (inf_llist$i ?v1 ))false )))false )):named a44 ))
(assert (! (forall ((?v0 A_list$ )(?v1 Nat_a_fun$ ))(not (= (llist_of$ ?v0 )(inf_llist$f ?v1 )))):named a45 ))
(assert (! (forall ((?v0 B_list$ )(?v1 Nat_b_fun$ ))(not (= (llist_of$b ?v0 )(inf_llist$ ?v1 )))):named a46 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 Nat_a_b_prod_fun$ ))(not (= (llist_of$a ?v0 )(inf_llist$e ?v1 )))):named a47 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 Nat_a_a_prod_fun$ ))(not (= (llist_of$c ?v0 )(inf_llist$a ?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_b_prod_a_prod_list$ )(?v1 Nat_a_b_prod_a_prod_fun$ ))(not (= (llist_of$d ?v0 )(inf_llist$c ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_list$ )(?v1 Nat_a_a_b_prod_prod_fun$ ))(not (= (llist_of$e ?v0 )(inf_llist$b ?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ )(?v1 Nat_a_b_prod_a_b_prod_prod_fun$ ))(not (= (llist_of$f ?v0 )(inf_llist$d ?v1 )))):named a51 ))
(assert (! (forall ((?v0 B_a_prod_list$ )(?v1 Nat_b_a_prod_fun$ ))(not (= (llist_of$g ?v0 )(inf_llist$g ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$ )(?v1 Nat_a_a_a_prod_prod_fun$ ))(not (= (llist_of$h ?v0 )(inf_llist$h ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_a_b_prod_a_prod_prod_list$ )(?v1 Nat_a_a_b_prod_a_prod_prod_fun$ ))(not (= (llist_of$i ?v0 )(inf_llist$i ?v1 )))):named a54 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_list$ ))(= (size$ (map$a ?v0 ?v1 ))(size$a ?v1 ))):named a55 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_list$ ))(= (size$ (map$b ?v0 ?v1 ))(size$b ?v1 ))):named a56 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_list$ ))(= (size$a (map$c ?v0 ?v1 ))(size$ ?v1 ))):named a57 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_list$ ))(= (size$a (map$d ?v0 ?v1 ))(size$a ?v1 ))):named a58 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 A_list$ ))(= (size$b (map$e ?v0 ?v1 ))(size$ ?v1 ))):named a59 ))
(assert (! (forall ((?v0 B_nat_fun$ )(?v1 B_list$ ))(= (size$b (map$f ?v0 ?v1 ))(size$a ?v1 ))):named a60 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_list$ ))(= (size$b (map$g ?v0 ?v1 ))(size$b ?v1 ))):named a61 ))
(assert (! (forall ((?v0 Nat_b_fun$ )(?v1 Nat_list$ ))(= (size$a (map$ ?v0 ?v1 ))(size$b ?v1 ))):named a62 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ ))(= (size$ (map$h ?v0 ?v1 ))(size$ ?v1 ))):named a63 ))
(assert (! (forall ((?v0 Nat_list$ ))(= (map$g uua$ ?v0 )?v0 )):named a64 ))
(assert (! (forall ((?v0 A_list$ ))(= (map$h uub$ ?v0 )?v0 )):named a65 ))
(assert (! (forall ((?v0 B_list$ ))(= (map$d uuc$ ?v0 )?v0 )):named a66 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_list$ )(?v2 Nat$ )(?v3 Nat_list$ ))(= (= (cons$c ?v0 ?v1 )(cons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a67 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a68 ))
(assert (! (forall ((?v0 B$ )(?v1 B_list$ )(?v2 B$ )(?v3 B_list$ ))(= (= (cons$b ?v0 ?v1 )(cons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a69 ))
(assert (! (forall ((?v0 Nat_b_fun$ )(?v1 Nat_list$ )(?v2 Nat_b_fun$ )(?v3 Nat_list$ ))(=> (= (map$ ?v0 ?v1 )(map$ ?v2 ?v3 ))(= (size$b ?v1 )(size$b ?v3 )))):named a70 ))
(assert (! (forall ((?v0 Nat_b_fun$ )(?v1 Nat_list$ )(?v2 A_b_fun$ )(?v3 A_list$ ))(=> (= (map$ ?v0 ?v1 )(map$c ?v2 ?v3 ))(= (size$b ?v1 )(size$ ?v3 )))):named a71 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_list$ )(?v2 Nat_b_fun$ )(?v3 Nat_list$ ))(=> (= (map$c ?v0 ?v1 )(map$ ?v2 ?v3 ))(= (size$ ?v1 )(size$b ?v3 )))):named a72 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ )(?v2 A_a_fun$ )(?v3 A_list$ ))(=> (= (map$h ?v0 ?v1 )(map$h ?v2 ?v3 ))(= (size$ ?v1 )(size$ ?v3 )))):named a73 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_list$ )(?v2 A_b_fun$ )(?v3 A_list$ ))(=> (= (map$c ?v0 ?v1 )(map$c ?v2 ?v3 ))(= (size$ ?v1 )(size$ ?v3 )))):named a74 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ )(?v2 B_a_fun$ )(?v3 B_list$ ))(=> (= (map$h ?v0 ?v1 )(map$a ?v2 ?v3 ))(= (size$ ?v1 )(size$a ?v3 )))):named a75 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_list$ )(?v2 B_b_fun$ )(?v3 B_list$ ))(=> (= (map$c ?v0 ?v1 )(map$d ?v2 ?v3 ))(= (size$ ?v1 )(size$a ?v3 )))):named a76 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ )(?v2 Nat_a_fun$ )(?v3 Nat_list$ ))(=> (= (map$h ?v0 ?v1 )(map$b ?v2 ?v3 ))(= (size$ ?v1 )(size$b ?v3 )))):named a77 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_list$ )(?v2 A_b_fun$ )(?v3 A_list$ ))(=> (= (map$d ?v0 ?v1 )(map$c ?v2 ?v3 ))(= (size$a ?v1 )(size$ ?v3 )))):named a78 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_list$ )(?v2 A_a_fun$ )(?v3 A_list$ ))(=> (= (map$a ?v0 ?v1 )(map$h ?v2 ?v3 ))(= (size$a ?v1 )(size$ ?v3 )))):named a79 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 A$ )(?v2 A_list$ ))(! (= (map$e ?v0 (cons$ ?v1 ?v2 ))(cons$c (fun_app$d ?v0 ?v1 )(map$e ?v0 ?v2 ))):pattern ((map$e ?v0 (cons$ ?v1 ?v2 ))))):named a80 ))
(assert (! (forall ((?v0 B_nat_fun$ )(?v1 B$ )(?v2 B_list$ ))(! (= (map$f ?v0 (cons$b ?v1 ?v2 ))(cons$c (fun_app$e ?v0 ?v1 )(map$f ?v0 ?v2 ))):pattern ((map$f ?v0 (cons$b ?v1 ?v2 ))))):named a81 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat$ )(?v2 Nat_list$ ))(! (= (map$b ?v0 (cons$c ?v1 ?v2 ))(cons$ (fun_app$f ?v0 ?v1 )(map$b ?v0 ?v2 ))):pattern ((map$b ?v0 (cons$c ?v1 ?v2 ))))):named a82 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat_list$ ))(! (= (map$g ?v0 (cons$c ?v1 ?v2 ))(cons$c (fun_app$a ?v0 ?v1 )(map$g ?v0 ?v2 ))):pattern ((map$g ?v0 (cons$c ?v1 ?v2 ))))):named a83 ))
(assert (! (forall ((?v0 Nat_b_fun$ )(?v1 Nat$ )(?v2 Nat_list$ ))(! (= (map$ ?v0 (cons$c ?v1 ?v2 ))(cons$b (fun_app$ ?v0 ?v1 )(map$ ?v0 ?v2 ))):pattern ((map$ ?v0 (cons$c ?v1 ?v2 ))))):named a84 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_list$ ))(! (= (map$h ?v0 (cons$ ?v1 ?v2 ))(cons$ (fun_app$c ?v0 ?v1 )(map$h ?v0 ?v2 ))):pattern ((map$h ?v0 (cons$ ?v1 ?v2 ))))):named a85 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_list$ ))(! (= (map$c ?v0 (cons$ ?v1 ?v2 ))(cons$b (fun_app$g ?v0 ?v1 )(map$c ?v0 ?v2 ))):pattern ((map$c ?v0 (cons$ ?v1 ?v2 ))))):named a86 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_list$ ))(! (= (map$a ?v0 (cons$b ?v1 ?v2 ))(cons$ (fun_app$h ?v0 ?v1 )(map$a ?v0 ?v2 ))):pattern ((map$a ?v0 (cons$b ?v1 ?v2 ))))):named a87 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_list$ ))(! (= (map$d ?v0 (cons$b ?v1 ?v2 ))(cons$b (fun_app$b ?v0 ?v1 )(map$d ?v0 ?v2 ))):pattern ((map$d ?v0 (cons$b ?v1 ?v2 ))))):named a88 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (map$b ?v0 ?v1 )(cons$ ?v2 ?v3 ))(exists ((?v4 Nat$ )(?v5 Nat_list$ ))(and (= ?v1 (cons$c ?v4 ?v5 ))(and (= (fun_app$f ?v0 ?v4 )?v2 )(= (map$b ?v0 ?v5 )?v3 )))))):named a89 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 A_list$ )(?v2 Nat$ )(?v3 Nat_list$ ))(= (= (map$e ?v0 ?v1 )(cons$c ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_list$ ))(and (= ?v1 (cons$ ?v4 ?v5 ))(and (= (fun_app$d ?v0 ?v4 )?v2 )(= (map$e ?v0 ?v5 )?v3 )))))):named a90 ))
(assert (! (forall ((?v0 B_nat_fun$ )(?v1 B_list$ )(?v2 Nat$ )(?v3 Nat_list$ ))(= (= (map$f ?v0 ?v1 )(cons$c ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_list$ ))(and (= ?v1 (cons$b ?v4 ?v5 ))(and (= (fun_app$e ?v0 ?v4 )?v2 )(= (map$f ?v0 ?v5 )?v3 )))))):named a91 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_list$ )(?v2 Nat$ )(?v3 Nat_list$ ))(= (= (map$g ?v0 ?v1 )(cons$c ?v2 ?v3 ))(exists ((?v4 Nat$ )(?v5 Nat_list$ ))(and (= ?v1 (cons$c ?v4 ?v5 ))(and (= (fun_app$a ?v0 ?v4 )?v2 )(= (map$g ?v0 ?v5 )?v3 )))))):named a92 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (map$h ?v0 ?v1 )(cons$ ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_list$ ))(and (= ?v1 (cons$ ?v4 ?v5 ))(and (= (fun_app$c ?v0 ?v4 )?v2 )(= (map$h ?v0 ?v5 )?v3 )))))):named a93 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (map$a ?v0 ?v1 )(cons$ ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_list$ ))(and (= ?v1 (cons$b ?v4 ?v5 ))(and (= (fun_app$h ?v0 ?v4 )?v2 )(= (map$a ?v0 ?v5 )?v3 )))))):named a94 ))
(assert (! (forall ((?v0 Nat_b_fun$ )(?v1 Nat_list$ )(?v2 B$ )(?v3 B_list$ ))(= (= (map$ ?v0 ?v1 )(cons$b ?v2 ?v3 ))(exists ((?v4 Nat$ )(?v5 Nat_list$ ))(and (= ?v1 (cons$c ?v4 ?v5 ))(and (= (fun_app$ ?v0 ?v4 )?v2 )(= (map$ ?v0 ?v5 )?v3 )))))):named a95 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_list$ )(?v2 B$ )(?v3 B_list$ ))(= (= (map$c ?v0 ?v1 )(cons$b ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_list$ ))(and (= ?v1 (cons$ ?v4 ?v5 ))(and (= (fun_app$g ?v0 ?v4 )?v2 )(= (map$c ?v0 ?v5 )?v3 )))))):named a96 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_list$ )(?v2 B$ )(?v3 B_list$ ))(= (= (map$d ?v0 ?v1 )(cons$b ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_list$ ))(and (= ?v1 (cons$b ?v4 ?v5 ))(and (= (fun_app$b ?v0 ?v4 )?v2 )(= (map$d ?v0 ?v5 )?v3 )))))):named a97 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 Nat_a_fun$ )(?v3 Nat_list$ ))(= (= (cons$ ?v0 ?v1 )(map$b ?v2 ?v3 ))(exists ((?v4 Nat$ )(?v5 Nat_list$ ))(and (= ?v3 (cons$c ?v4 ?v5 ))(and (= ?v0 (fun_app$f ?v2 ?v4 ))(= ?v1 (map$b ?v2 ?v5 ))))))):named a98 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_list$ )(?v2 A_nat_fun$ )(?v3 A_list$ ))(= (= (cons$c ?v0 ?v1 )(map$e ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_list$ ))(and (= ?v3 (cons$ ?v4 ?v5 ))(and (= ?v0 (fun_app$d ?v2 ?v4 ))(= ?v1 (map$e ?v2 ?v5 ))))))):named a99 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_list$ )(?v2 B_nat_fun$ )(?v3 B_list$ ))(= (= (cons$c ?v0 ?v1 )(map$f ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_list$ ))(and (= ?v3 (cons$b ?v4 ?v5 ))(and (= ?v0 (fun_app$e ?v2 ?v4 ))(= ?v1 (map$f ?v2 ?v5 ))))))):named a100 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_list$ )(?v2 Nat_nat_fun$ )(?v3 Nat_list$ ))(= (= (cons$c ?v0 ?v1 )(map$g ?v2 ?v3 ))(exists ((?v4 Nat$ )(?v5 Nat_list$ ))(and (= ?v3 (cons$c ?v4 ?v5 ))(and (= ?v0 (fun_app$a ?v2 ?v4 ))(= ?v1 (map$g ?v2 ?v5 ))))))):named a101 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A_a_fun$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(map$h ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_list$ ))(and (= ?v3 (cons$ ?v4 ?v5 ))(and (= ?v0 (fun_app$c ?v2 ?v4 ))(= ?v1 (map$h ?v2 ?v5 ))))))):named a102 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 B_a_fun$ )(?v3 B_list$ ))(= (= (cons$ ?v0 ?v1 )(map$a ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_list$ ))(and (= ?v3 (cons$b ?v4 ?v5 ))(and (= ?v0 (fun_app$h ?v2 ?v4 ))(= ?v1 (map$a ?v2 ?v5 ))))))):named a103 ))
(assert (! (forall ((?v0 B$ )(?v1 B_list$ )(?v2 Nat_b_fun$ )(?v3 Nat_list$ ))(= (= (cons$b ?v0 ?v1 )(map$ ?v2 ?v3 ))(exists ((?v4 Nat$ )(?v5 Nat_list$ ))(and (= ?v3 (cons$c ?v4 ?v5 ))(and (= ?v0 (fun_app$ ?v2 ?v4 ))(= ?v1 (map$ ?v2 ?v5 ))))))):named a104 ))
(assert (! (forall ((?v0 B$ )(?v1 B_list$ )(?v2 A_b_fun$ )(?v3 A_list$ ))(= (= (cons$b ?v0 ?v1 )(map$c ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_list$ ))(and (= ?v3 (cons$ ?v4 ?v5 ))(and (= ?v0 (fun_app$g ?v2 ?v4 ))(= ?v1 (map$c ?v2 ?v5 ))))))):named a105 ))
(assert (! (forall ((?v0 B$ )(?v1 B_list$ )(?v2 B_b_fun$ )(?v3 B_list$ ))(= (= (cons$b ?v0 ?v1 )(map$d ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_list$ ))(and (= ?v3 (cons$b ?v4 ?v5 ))(and (= ?v0 (fun_app$b ?v2 ?v4 ))(= ?v1 (map$d ?v2 ?v5 ))))))):named a106 ))
(assert (! (forall ((?v0 Nat_a_fun$ )(?v1 Nat_list$ )(?v2 A$ )(?v3 A_list$ ))(=> (= (map$b ?v0 ?v1 )(cons$ ?v2 ?v3 ))(exists ((?v4 Nat$ )(?v5 Nat_list$ ))(and (= ?v1 (cons$c ?v4 ?v5 ))(and (= (fun_app$f ?v0 ?v4 )?v2 )(= (map$b ?v0 ?v5 )?v3 )))))):named a107 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 A_list$ )(?v2 Nat$ )(?v3 Nat_list$ ))(=> (= (map$e ?v0 ?v1 )(cons$c ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_list$ ))(and (= ?v1 (cons$ ?v4 ?v5 ))(and (= (fun_app$d ?v0 ?v4 )?v2 )(= (map$e ?v0 ?v5 )?v3 )))))):named a108 ))
(assert (! (forall ((?v0 B_nat_fun$ )(?v1 B_list$ )(?v2 Nat$ )(?v3 Nat_list$ ))(=> (= (map$f ?v0 ?v1 )(cons$c ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_list$ ))(and (= ?v1 (cons$b ?v4 ?v5 ))(and (= (fun_app$e ?v0 ?v4 )?v2 )(= (map$f ?v0 ?v5 )?v3 )))))):named a109 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_list$ )(?v2 Nat$ )(?v3 Nat_list$ ))(=> (= (map$g ?v0 ?v1 )(cons$c ?v2 ?v3 ))(exists ((?v4 Nat$ )(?v5 Nat_list$ ))(and (= ?v1 (cons$c ?v4 ?v5 ))(and (= (fun_app$a ?v0 ?v4 )?v2 )(= (map$g ?v0 ?v5 )?v3 )))))):named a110 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(=> (= (map$h ?v0 ?v1 )(cons$ ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_list$ ))(and (= ?v1 (cons$ ?v4 ?v5 ))(and (= (fun_app$c ?v0 ?v4 )?v2 )(= (map$h ?v0 ?v5 )?v3 )))))):named a111 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_list$ )(?v2 A$ )(?v3 A_list$ ))(=> (= (map$a ?v0 ?v1 )(cons$ ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_list$ ))(and (= ?v1 (cons$b ?v4 ?v5 ))(and (= (fun_app$h ?v0 ?v4 )?v2 )(= (map$a ?v0 ?v5 )?v3 )))))):named a112 ))
(assert (! (forall ((?v0 Nat_b_fun$ )(?v1 Nat_list$ )(?v2 B$ )(?v3 B_list$ ))(=> (= (map$ ?v0 ?v1 )(cons$b ?v2 ?v3 ))(exists ((?v4 Nat$ )(?v5 Nat_list$ ))(and (= ?v1 (cons$c ?v4 ?v5 ))(and (= (fun_app$ ?v0 ?v4 )?v2 )(= (map$ ?v0 ?v5 )?v3 )))))):named a113 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_list$ )(?v2 B$ )(?v3 B_list$ ))(=> (= (map$c ?v0 ?v1 )(cons$b ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_list$ ))(and (= ?v1 (cons$ ?v4 ?v5 ))(and (= (fun_app$g ?v0 ?v4 )?v2 )(= (map$c ?v0 ?v5 )?v3 )))))):named a114 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_list$ )(?v2 B$ )(?v3 B_list$ ))(=> (= (map$d ?v0 ?v1 )(cons$b ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_list$ ))(and (= ?v1 (cons$b ?v4 ?v5 ))(and (= (fun_app$b ?v0 ?v4 )?v2 )(= (map$d ?v0 ?v5 )?v3 )))))):named a115 ))
(check-sat )
;(get-unsat-core )
