;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun uu$ ()A_llist_a_llist_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun compow$ (Nat$ A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun ldropn$ (Nat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun iterates$ (A_a_fun$ A$ )A_llist$ )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uu$ ?v0 )(ltl$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (fun_app$ (ldropn$ n$ )(ltl$ xs$ ))(fun_app$ (ldropn$ (suc$ n$ ))xs$ ))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (ltl$ (fun_app$ (ldropn$ ?v0 )?v1 ))(fun_app$ (ldropn$ ?v0 )(ltl$ ?v1 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(! (= (fun_app$ (ldropn$ ?v0 )?v1 )(compow$ ?v0 uu$ ?v1 )):pattern ((fun_app$ (ldropn$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (ltl$ (iterates$ ?v0 ?v1 ))(iterates$ ?v0 (fun_app$a ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$ (ldropn$ (suc$ ?v0 ))(lCons$ ?v1 ?v2 ))(fun_app$ (ldropn$ ?v0 )?v2 )):pattern ((fun_app$ (ldropn$ (suc$ ?v0 ))(lCons$ ?v1 ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (ldropn$ zero$ )?v0 )?v0 ):pattern ((fun_app$ (ldropn$ zero$ )?v0 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ldropn$ ?v0 )lNil$ )lNil$ ):pattern ((ldropn$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a12 ))
(check-sat )
;(get-unsat-core )
