;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_prod_set$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort B_a_prod_set$ 0 )
(declare-sort B_b_prod_set$ 0 )
(declare-sort A_a_prod_bool_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort B_a_prod_bool_fun$ 0 )
(declare-sort B_b_prod_bool_fun$ 0 )
(declare-sort A_a_b_prod_prod_set$ 0 )
(declare-sort A_b_a_prod_prod_set$ 0 )
(declare-sort A_b_b_prod_prod_set$ 0 )
(declare-sort B_a_a_prod_prod_set$ 0 )
(declare-sort A_a_b_prod_prod_bool_fun$ 0 )
(declare-sort A_b_a_prod_prod_bool_fun$ 0 )
(declare-sort A_b_b_prod_prod_bool_fun$ 0 )
(declare-sort B_a_a_prod_prod_bool_fun$ 0 )
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-codatatypes ()((A_b_prod_llist$ (lNil$ )(lCons$ (lhd$ A_b_prod$ )(ltl$ A_b_prod_llist$ )))(A_llist$ (lNil$a )(lCons$a (lhd$a A$ )(ltl$a A_llist$ )))(B_llist$ (lNil$b )(lCons$b (lhd$b B$ )(ltl$b B_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort A_a_prod$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun fst$a (A_a_prod$)A$)
(declare-fun snd$a (A_a_prod$)A$)
(declare-fun pair$a (A$ A$ )A_a_prod$)
(declare-codatatypes ()((A_a_prod_llist$ (lNil$c )(lCons$c (lhd$c A_a_prod$ )(ltl$c A_a_prod_llist$ )))))
(declare-sort B_a_prod$ 0)
(declare-fun fst$b (B_a_prod$)B$)
(declare-fun snd$b (B_a_prod$)A$)
(declare-fun pair$b (B$ A$ )B_a_prod$)
(declare-codatatypes ()((B_a_prod_llist$ (lNil$d )(lCons$d (lhd$d B_a_prod$ )(ltl$d B_a_prod_llist$ )))))
(declare-sort B_b_prod$ 0)
(declare-fun fst$c (B_b_prod$)B$)
(declare-fun snd$c (B_b_prod$)B$)
(declare-fun pair$c (B$ B$ )B_b_prod$)
(declare-codatatypes ()((B_b_prod_llist$ (lNil$e )(lCons$e (lhd$e B_b_prod$ )(ltl$e B_b_prod_llist$ )))))
(declare-sort A_b_b_prod_prod$ 0)
(declare-fun fst$d (A_b_b_prod_prod$)A$)
(declare-fun snd$d (A_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$d (A$ B_b_prod$ )A_b_b_prod_prod$)
(declare-codatatypes ()((A_b_b_prod_prod_llist$ (lNil$f )(lCons$f (lhd$f A_b_b_prod_prod$ )(ltl$f A_b_b_prod_prod_llist$ )))))
(declare-sort A_b_a_prod_prod$ 0)
(declare-fun fst$e (A_b_a_prod_prod$)A$)
(declare-fun snd$e (A_b_a_prod_prod$)B_a_prod$)
(declare-fun pair$e (A$ B_a_prod$ )A_b_a_prod_prod$)
(declare-codatatypes ()((A_b_a_prod_prod_llist$ (lNil$g )(lCons$g (lhd$g A_b_a_prod_prod$ )(ltl$g A_b_a_prod_prod_llist$ )))))
(declare-sort A_a_b_prod_prod$ 0)
(declare-fun fst$f (A_a_b_prod_prod$)A$)
(declare-fun snd$f (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$f (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-codatatypes ()((A_a_b_prod_prod_llist$ (lNil$h )(lCons$h (lhd$h A_a_b_prod_prod$ )(ltl$h A_a_b_prod_prod_llist$ )))))
(declare-sort A_a_a_prod_prod$ 0)
(declare-fun fst$g (A_a_a_prod_prod$)A$)
(declare-fun snd$g (A_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$g (A$ A_a_prod$ )A_a_a_prod_prod$)
(declare-codatatypes ()((A_a_a_prod_prod_llist$ (lNil$i )(lCons$i (lhd$i A_a_a_prod_prod$ )(ltl$i A_a_a_prod_prod_llist$ )))))
(declare-sort B_b_b_prod_prod$ 0)
(declare-fun fst$h (B_b_b_prod_prod$)B$)
(declare-fun snd$h (B_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$h (B$ B_b_prod$ )B_b_b_prod_prod$)
(declare-codatatypes ()((B_b_b_prod_prod_llist$ (lNil$j )(lCons$j (lhd$j B_b_b_prod_prod$ )(ltl$j B_b_b_prod_prod_llist$ )))))
(declare-sort B_b_a_prod_prod$ 0)
(declare-fun fst$i (B_b_a_prod_prod$)B$)
(declare-fun snd$i (B_b_a_prod_prod$)B_a_prod$)
(declare-fun pair$i (B$ B_a_prod$ )B_b_a_prod_prod$)
(declare-codatatypes ()((B_b_a_prod_prod_llist$ (lNil$k )(lCons$k (lhd$k B_b_a_prod_prod$ )(ltl$k B_b_a_prod_prod_llist$ )))))
(declare-sort B_a_a_prod_prod$ 0)
(declare-fun fst$j (B_a_a_prod_prod$)B$)
(declare-fun snd$j (B_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$j (B$ A_a_prod$ )B_a_a_prod_prod$)
(declare-codatatypes ()((B_a_a_prod_prod_llist$ (lNil$l )(lCons$l (lhd$l B_a_a_prod_prod$ )(ltl$l B_a_a_prod_prod_llist$ )))))
(declare-fun uu$ ()A_b_prod_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun uua$ (A_llist$ )A_bool_fun$ )
(declare-fun uub$ (B_llist$ )B_bool_fun$ )
(declare-fun uuc$ (A_b_prod_llist$ )A_b_prod_bool_fun$ )
(declare-fun uud$ (B_b_prod_llist$ )B_b_prod_bool_fun$ )
(declare-fun uue$ (B_a_prod_llist$ )B_a_prod_bool_fun$ )
(declare-fun uuf$ (A_a_prod_llist$ )A_a_prod_bool_fun$ )
(declare-fun uug$ (B_a_a_prod_prod_llist$ )B_a_a_prod_prod_bool_fun$ )
(declare-fun uuh$ (A_b_b_prod_prod_llist$ )A_b_b_prod_prod_bool_fun$ )
(declare-fun uui$ (A_b_a_prod_prod_llist$ )A_b_a_prod_prod_bool_fun$ )
(declare-fun uuj$ (A_a_b_prod_prod_llist$ )A_a_b_prod_prod_bool_fun$ )
(declare-fun enat$ (Nat$ )Enat$ )
(declare-fun less$ (Enat$ Enat$ )Bool )
(declare-fun lnth$ (A_llist$ Nat$ )A$ )
(declare-fun lset$ (A_b_prod_llist$ )A_b_prod_set$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun min$a (Nat$ Nat$ )Nat$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun lnth$a (B_llist$ Nat$ )B$ )
(declare-fun lnth$b (B_a_a_prod_prod_llist$ Nat$ )B_a_a_prod_prod$ )
(declare-fun lnth$c (B_b_prod_llist$ Nat$ )B_b_prod$ )
(declare-fun lnth$d (B_a_prod_llist$ Nat$ )B_a_prod$ )
(declare-fun lnth$e (A_b_b_prod_prod_llist$ Nat$ )A_b_b_prod_prod$ )
(declare-fun lnth$f (A_b_a_prod_prod_llist$ Nat$ )A_b_a_prod_prod$ )
(declare-fun lnth$g (A_a_b_prod_prod_llist$ Nat$ )A_a_b_prod_prod$ )
(declare-fun lnth$h (A_b_prod_llist$ Nat$ )A_b_prod$ )
(declare-fun lnth$i (A_a_prod_llist$ Nat$ )A_a_prod$ )
(declare-fun lnth$j (A_a_a_prod_prod_llist$ Nat$ )A_a_a_prod_prod$ )
(declare-fun lnth$k (B_b_b_prod_prod_llist$ Nat$ )B_b_b_prod_prod$ )
(declare-fun lnth$l (B_b_a_prod_prod_llist$ Nat$ )B_b_a_prod_prod$ )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun lset$b (B_llist$ )B_set$ )
(declare-fun lset$c (B_b_prod_llist$ )B_b_prod_set$ )
(declare-fun lset$d (B_a_prod_llist$ )B_a_prod_set$ )
(declare-fun lset$e (A_a_prod_llist$ )A_a_prod_set$ )
(declare-fun lset$f (B_a_a_prod_prod_llist$ )B_a_a_prod_prod_set$ )
(declare-fun lset$g (A_b_b_prod_prod_llist$ )A_b_b_prod_prod_set$ )
(declare-fun lset$h (A_b_a_prod_prod_llist$ )A_b_a_prod_prod_set$ )
(declare-fun lset$i (A_a_b_prod_prod_llist$ )A_a_b_prod_prod_set$ )
(declare-fun lzip$a (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun lzip$b (B_llist$ A_llist$ )B_a_prod_llist$ )
(declare-fun lzip$c (B_llist$ B_llist$ )B_b_prod_llist$ )
(declare-fun lzip$d (A_llist$ B_b_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun lzip$e (A_llist$ B_a_prod_llist$ )A_b_a_prod_prod_llist$ )
(declare-fun lzip$f (A_llist$ A_b_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun lzip$g (A_llist$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lzip$h (B_llist$ B_b_prod_llist$ )B_b_b_prod_prod_llist$ )
(declare-fun lzip$i (B_llist$ B_a_prod_llist$ )B_b_a_prod_prod_llist$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_b_prod_bool_fun$ )A_b_prod_set$ )
(declare-fun fun_app$ (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun member$a (B$ B_set$ )Bool )
(declare-fun member$b (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun member$c (B_b_prod$ B_b_prod_set$ )Bool )
(declare-fun member$d (B_a_prod$ B_a_prod_set$ )Bool )
(declare-fun member$e (A_a_prod$ A_a_prod_set$ )Bool )
(declare-fun member$f (B_a_a_prod_prod$ B_a_a_prod_prod_set$ )Bool )
(declare-fun member$g (A_b_b_prod_prod$ A_b_b_prod_prod_set$ )Bool )
(declare-fun member$h (A_b_a_prod_prod$ A_b_a_prod_prod_set$ )Bool )
(declare-fun member$i (A_a_b_prod_prod$ A_a_b_prod_prod_set$ )Bool )
(declare-fun collect$a (A_bool_fun$ )A_set$ )
(declare-fun collect$b (B_bool_fun$ )B_set$ )
(declare-fun collect$c (B_b_prod_bool_fun$ )B_b_prod_set$ )
(declare-fun collect$d (B_a_prod_bool_fun$ )B_a_prod_set$ )
(declare-fun collect$e (A_a_prod_bool_fun$ )A_a_prod_set$ )
(declare-fun collect$f (B_a_a_prod_prod_bool_fun$ )B_a_a_prod_prod_set$ )
(declare-fun collect$g (A_b_b_prod_prod_bool_fun$ )A_b_b_prod_prod_set$ )
(declare-fun collect$h (A_b_a_prod_prod_bool_fun$ )A_b_a_prod_prod_set$ )
(declare-fun collect$i (A_a_b_prod_prod_bool_fun$ )A_a_b_prod_prod_set$ )
(declare-fun fun_app$a (B_a_a_prod_prod_bool_fun$ B_a_a_prod_prod$ )Bool )
(declare-fun fun_app$b (B_b_prod_bool_fun$ B_b_prod$ )Bool )
(declare-fun fun_app$c (B_a_prod_bool_fun$ B_a_prod$ )Bool )
(declare-fun fun_app$d (A_b_b_prod_prod_bool_fun$ A_b_b_prod_prod$ )Bool )
(declare-fun fun_app$e (A_b_a_prod_prod_bool_fun$ A_b_a_prod_prod$ )Bool )
(declare-fun fun_app$f (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod$ )Bool )
(declare-fun fun_app$g (A_a_prod_bool_fun$ A_a_prod$ )Bool )
(declare-fun fun_app$h (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$i (A_bool_fun$ A$ )Bool )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun llength$b (B_a_a_prod_prod_llist$ )Enat$ )
(declare-fun llength$c (B_b_prod_llist$ )Enat$ )
(declare-fun llength$d (B_a_prod_llist$ )Enat$ )
(declare-fun llength$e (A_b_b_prod_prod_llist$ )Enat$ )
(declare-fun llength$f (A_b_a_prod_prod_llist$ )Enat$ )
(declare-fun llength$g (A_a_b_prod_prod_llist$ )Enat$ )
(declare-fun llength$h (A_b_prod_llist$ )Enat$ )
(declare-fun llength$i (A_a_prod_llist$ )Enat$ )
(declare-fun llength$j (A_a_a_prod_prod_llist$ )Enat$ )
(declare-fun llength$k (B_b_b_prod_prod_llist$ )Enat$ )
(declare-fun llength$l (B_b_a_prod_prod_llist$ )Enat$ )
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$ uu$ ?v0 )(exists ((?v1 Nat$ ))(and (= ?v0 (pair$ (lnth$ xs$ ?v1 )(lnth$a ys$ ?v1 )))(less$ (enat$ ?v1 )(min$ (llength$ xs$ )(llength$a ys$ )))))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 B_a_a_prod_prod_llist$ )(?v1 B_a_a_prod_prod$ ))(! (= (fun_app$a (uug$ ?v0 )?v1 )(exists ((?v2 Nat$ ))(and (= ?v1 (lnth$b ?v0 ?v2 ))(less$ (enat$ ?v2 )(llength$b ?v0 ))))):pattern ((fun_app$a (uug$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 B_b_prod$ ))(! (= (fun_app$b (uud$ ?v0 )?v1 )(exists ((?v2 Nat$ ))(and (= ?v1 (lnth$c ?v0 ?v2 ))(less$ (enat$ ?v2 )(llength$c ?v0 ))))):pattern ((fun_app$b (uud$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod$ ))(! (= (fun_app$c (uue$ ?v0 )?v1 )(exists ((?v2 Nat$ ))(and (= ?v1 (lnth$d ?v0 ?v2 ))(less$ (enat$ ?v2 )(llength$d ?v0 ))))):pattern ((fun_app$c (uue$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$ )(?v1 A_b_b_prod_prod$ ))(! (= (fun_app$d (uuh$ ?v0 )?v1 )(exists ((?v2 Nat$ ))(and (= ?v1 (lnth$e ?v0 ?v2 ))(less$ (enat$ ?v2 )(llength$e ?v0 ))))):pattern ((fun_app$d (uuh$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ )(?v1 A_b_a_prod_prod$ ))(! (= (fun_app$e (uui$ ?v0 )?v1 )(exists ((?v2 Nat$ ))(and (= ?v1 (lnth$f ?v0 ?v2 ))(less$ (enat$ ?v2 )(llength$f ?v0 ))))):pattern ((fun_app$e (uui$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 A_a_b_prod_prod$ ))(! (= (fun_app$f (uuj$ ?v0 )?v1 )(exists ((?v2 Nat$ ))(and (= ?v1 (lnth$g ?v0 ?v2 ))(less$ (enat$ ?v2 )(llength$g ?v0 ))))):pattern ((fun_app$f (uuj$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )(exists ((?v2 Nat$ ))(and (= ?v1 (lnth$h ?v0 ?v2 ))(less$ (enat$ ?v2 )(llength$h ?v0 ))))):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod$ ))(! (= (fun_app$g (uuf$ ?v0 )?v1 )(exists ((?v2 Nat$ ))(and (= ?v1 (lnth$i ?v0 ?v2 ))(less$ (enat$ ?v2 )(llength$i ?v0 ))))):pattern ((fun_app$g (uuf$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B$ ))(! (= (fun_app$h (uub$ ?v0 )?v1 )(exists ((?v2 Nat$ ))(and (= ?v1 (lnth$a ?v0 ?v2 ))(less$ (enat$ ?v2 )(llength$a ?v0 ))))):pattern ((fun_app$h (uub$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(! (= (fun_app$i (uua$ ?v0 )?v1 )(exists ((?v2 Nat$ ))(and (= ?v1 (lnth$ ?v0 ?v2 ))(less$ (enat$ ?v2 )(llength$ ?v0 ))))):pattern ((fun_app$i (uua$ ?v0 )?v1 )))):named a10 ))
(assert (! (not (= (lset$ (lzip$ xs$ ys$ ))(collect$ uu$ ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (llength$i (lzip$a ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(= (llength$h (lzip$ ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$a ?v1 )))):named a13 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(= (llength$d (lzip$b ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (llength$c (lzip$c ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$a ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_b_prod_llist$ ))(= (llength$e (lzip$d ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$c ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_a_prod_llist$ ))(= (llength$f (lzip$e ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$d ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ ))(= (llength$g (lzip$f ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$h ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_llist$ ))(= (llength$j (lzip$g ?v0 ?v1 ))(min$ (llength$ ?v0 )(llength$i ?v1 )))):named a19 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_b_prod_llist$ ))(= (llength$k (lzip$h ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$c ?v1 )))):named a20 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_a_prod_llist$ ))(= (llength$l (lzip$i ?v0 ?v1 ))(min$ (llength$a ?v0 )(llength$d ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(= (member$ ?v0 (lset$a ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$ ?v1 ))(= (lnth$ ?v1 ?v2 )?v0 ))))):named a22 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(= (member$a ?v0 (lset$b ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$a ?v1 ))(= (lnth$a ?v1 ?v2 )?v0 ))))):named a23 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_llist$ ))(= (member$b ?v0 (lset$ ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$h ?v1 ))(= (lnth$h ?v1 ?v2 )?v0 ))))):named a24 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod_llist$ ))(= (member$c ?v0 (lset$c ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$c ?v1 ))(= (lnth$c ?v1 ?v2 )?v0 ))))):named a25 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 B_a_prod_llist$ ))(= (member$d ?v0 (lset$d ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$d ?v1 ))(= (lnth$d ?v1 ?v2 )?v0 ))))):named a26 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ ))(= (member$e ?v0 (lset$e ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$i ?v1 ))(= (lnth$i ?v1 ?v2 )?v0 ))))):named a27 ))
(assert (! (forall ((?v0 B_a_a_prod_prod$ )(?v1 B_a_a_prod_prod_llist$ ))(= (member$f ?v0 (lset$f ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$b ?v1 ))(= (lnth$b ?v1 ?v2 )?v0 ))))):named a28 ))
(assert (! (forall ((?v0 A_b_b_prod_prod$ )(?v1 A_b_b_prod_prod_llist$ ))(= (member$g ?v0 (lset$g ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$e ?v1 ))(= (lnth$e ?v1 ?v2 )?v0 ))))):named a29 ))
(assert (! (forall ((?v0 A_b_a_prod_prod$ )(?v1 A_b_a_prod_prod_llist$ ))(= (member$h ?v0 (lset$h ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$f ?v1 ))(= (lnth$f ?v1 ?v2 )?v0 ))))):named a30 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod_llist$ ))(= (member$i ?v0 (lset$i ?v1 ))(exists ((?v2 Nat$ ))(and (less$ (enat$ ?v2 )(llength$g ?v1 ))(= (lnth$g ?v1 ?v2 )?v0 ))))):named a31 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lset$a ?v0 )(collect$a (uua$ ?v0 )))):named a32 ))
(assert (! (forall ((?v0 B_llist$ ))(= (lset$b ?v0 )(collect$b (uub$ ?v0 )))):named a33 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(= (lset$ ?v0 )(collect$ (uuc$ ?v0 )))):named a34 ))
(assert (! (forall ((?v0 B_b_prod_llist$ ))(= (lset$c ?v0 )(collect$c (uud$ ?v0 )))):named a35 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(= (lset$d ?v0 )(collect$d (uue$ ?v0 )))):named a36 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(= (lset$e ?v0 )(collect$e (uuf$ ?v0 )))):named a37 ))
(assert (! (forall ((?v0 B_a_a_prod_prod_llist$ ))(= (lset$f ?v0 )(collect$f (uug$ ?v0 )))):named a38 ))
(assert (! (forall ((?v0 A_b_b_prod_prod_llist$ ))(= (lset$g ?v0 )(collect$g (uuh$ ?v0 )))):named a39 ))
(assert (! (forall ((?v0 A_b_a_prod_prod_llist$ ))(= (lset$h ?v0 )(collect$h (uui$ ?v0 )))):named a40 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ ))(= (lset$i ?v0 )(collect$i (uuj$ ?v0 )))):named a41 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$ ?v2 )))(= (lnth$i (lzip$a ?v1 ?v2 )?v0 )(pair$a (lnth$ ?v1 ?v0 )(lnth$ ?v2 ?v0 ))))):named a42 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$a ?v2 )))(= (lnth$h (lzip$ ?v1 ?v2 )?v0 )(pair$ (lnth$ ?v1 ?v0 )(lnth$a ?v2 ?v0 ))))):named a43 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$a ?v1 ))(less$ (enat$ ?v0 )(llength$ ?v2 )))(= (lnth$d (lzip$b ?v1 ?v2 )?v0 )(pair$b (lnth$a ?v1 ?v0 )(lnth$ ?v2 ?v0 ))))):named a44 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$a ?v1 ))(less$ (enat$ ?v0 )(llength$a ?v2 )))(= (lnth$c (lzip$c ?v1 ?v2 )?v0 )(pair$c (lnth$a ?v1 ?v0 )(lnth$a ?v2 ?v0 ))))):named a45 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 B_b_prod_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$c ?v2 )))(= (lnth$e (lzip$d ?v1 ?v2 )?v0 )(pair$d (lnth$ ?v1 ?v0 )(lnth$c ?v2 ?v0 ))))):named a46 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 B_a_prod_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$d ?v2 )))(= (lnth$f (lzip$e ?v1 ?v2 )?v0 )(pair$e (lnth$ ?v1 ?v0 )(lnth$d ?v2 ?v0 ))))):named a47 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_b_prod_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$h ?v2 )))(= (lnth$g (lzip$f ?v1 ?v2 )?v0 )(pair$f (lnth$ ?v1 ?v0 )(lnth$h ?v2 ?v0 ))))):named a48 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_a_prod_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$ ?v1 ))(less$ (enat$ ?v0 )(llength$i ?v2 )))(= (lnth$j (lzip$g ?v1 ?v2 )?v0 )(pair$g (lnth$ ?v1 ?v0 )(lnth$i ?v2 ?v0 ))))):named a49 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_b_prod_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$a ?v1 ))(less$ (enat$ ?v0 )(llength$c ?v2 )))(= (lnth$k (lzip$h ?v1 ?v2 )?v0 )(pair$h (lnth$a ?v1 ?v0 )(lnth$c ?v2 ?v0 ))))):named a50 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_a_prod_llist$ ))(=> (and (less$ (enat$ ?v0 )(llength$a ?v1 ))(less$ (enat$ ?v0 )(llength$d ?v2 )))(= (lnth$l (lzip$i ?v1 ?v2 )?v0 )(pair$i (lnth$a ?v1 ?v0 )(lnth$d ?v2 ?v0 ))))):named a51 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less$ ?v0 (min$ ?v1 ?v2 ))(and (less$ ?v0 ?v1 )(less$ ?v0 ?v2 )))):named a52 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a ?v0 (min$a ?v1 ?v2 ))(and (less$a ?v0 ?v1 )(less$a ?v0 ?v2 )))):named a53 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (min$a (min$a ?v0 ?v1 )?v1 )(min$a ?v0 ?v1 ))):named a54 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ (min$ ?v0 ?v1 )?v1 )(min$ ?v0 ?v1 ))):named a55 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (min$a ?v0 (min$a ?v0 ?v1 ))(min$a ?v0 ?v1 ))):named a56 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ ))(= (min$ ?v0 (min$ ?v0 ?v1 ))(min$ ?v0 ?v1 ))):named a57 ))
(assert (! (forall ((?v0 Nat$ ))(= (min$a ?v0 ?v0 )?v0 )):named a58 ))
(assert (! (forall ((?v0 Enat$ ))(= (min$ ?v0 ?v0 )?v0 )):named a59 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (enat$ ?v0 )(enat$ ?v1 ))(= ?v0 ?v1 ))):named a60 ))
(assert (! (forall ((?v0 B$ )(?v1 A_a_prod$ )(?v2 B$ )(?v3 A_a_prod$ ))(= (= (pair$j ?v0 ?v1 )(pair$j ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a61 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_prod$ )(?v2 A$ )(?v3 B_b_prod$ ))(= (= (pair$d ?v0 ?v1 )(pair$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a62 ))
(assert (! (forall ((?v0 A$ )(?v1 B_a_prod$ )(?v2 A$ )(?v3 B_a_prod$ ))(= (= (pair$e ?v0 ?v1 )(pair$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a63 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ )(?v2 A$ )(?v3 A_b_prod$ ))(= (= (pair$f ?v0 ?v1 )(pair$f ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a64 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_prod$ )(?v2 A$ )(?v3 A_a_prod$ ))(= (= (pair$g ?v0 ?v1 )(pair$g ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a65 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B$ )(?v3 B$ ))(= (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a66 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ )(?v2 B$ )(?v3 A$ ))(= (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a67 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a68 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a69 ))
(assert (! (forall ((?v0 B$ )(?v1 A_a_prod$ )(?v2 B$ )(?v3 A_a_prod$ ))(= (= (pair$j ?v0 ?v1 )(pair$j ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a70 ))
(assert (! (forall ((?v0 A$ )(?v1 B_b_prod$ )(?v2 A$ )(?v3 B_b_prod$ ))(= (= (pair$d ?v0 ?v1 )(pair$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a71 ))
(assert (! (forall ((?v0 A$ )(?v1 B_a_prod$ )(?v2 A$ )(?v3 B_a_prod$ ))(= (= (pair$e ?v0 ?v1 )(pair$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a72 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ )(?v2 A$ )(?v3 A_b_prod$ ))(= (= (pair$f ?v0 ?v1 )(pair$f ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a73 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_prod$ )(?v2 A$ )(?v3 A_a_prod$ ))(= (= (pair$g ?v0 ?v1 )(pair$g ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a74 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B$ )(?v3 B$ ))(= (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a75 ))
(assert (! (forall ((?v0 B$ )(?v1 A$ )(?v2 B$ )(?v3 A$ ))(= (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a76 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a77 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a78 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Nat$ ))(=> (less$ ?v0 (enat$ ?v1 ))(exists ((?v2 Nat$ ))(= ?v0 (enat$ ?v2 ))))):named a79 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(= (less$ (min$ ?v0 ?v1 )?v2 )(or (less$ ?v0 ?v2 )(less$ ?v1 ?v2 )))):named a80 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (less$a (min$a ?v0 ?v1 )?v2 )(or (less$a ?v0 ?v2 )(less$a ?v1 ?v2 )))):named a81 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (and (less$ ?v0 (min$ ?v1 ?v2 ))(=> (and (less$ ?v0 ?v1 )(less$ ?v0 ?v2 ))false ))false )):named a82 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (less$a ?v0 (min$a ?v1 ?v2 ))(=> (and (less$a ?v0 ?v1 )(less$a ?v0 ?v2 ))false ))false )):named a83 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 Enat$ ))(=> (less$ ?v0 ?v1 )(less$ (min$ ?v2 ?v0 )?v1 ))):named a84 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (less$a ?v0 ?v1 )(less$a (min$a ?v2 ?v0 )?v1 ))):named a85 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (less$ (enat$ ?v0 )(enat$ ?v1 ))(less$a ?v0 ?v1 )):pattern ((less$ (enat$ ?v0 )(enat$ ?v1 ))))):named a86 ))
(check-sat )
;(get-unsat-core )
