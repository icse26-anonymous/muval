;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_set_a_set_fun$ 0 )
(declare-sort A_llist_a_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun p$ ()A_bool_fun$ )
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun inf$ (A_set$ )A_set_a_set_fun$ )
(declare-fun uua$ (A_bool_fun$ )A_llist_a_bool_fun_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun less_eq$ (A_set$ A_set$ )Bool )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$a (A_llist_a_bool_fun_fun$ A_llist$ )A_bool_fun$ )
(declare-fun fun_app$b (A_set_a_set_fun$ A_set$ )A_set$ )
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )(and (member$ ?v2 (lset$ ?v1 ))(fun_app$ ?v0 ?v2 ))):pattern ((fun_app$ (fun_app$a (uua$ ?v0 )?v1 )?v2 )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )true ):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (not (less_eq$ (fun_app$b (inf$ (lset$ xs$ ))(collect$ p$ ))(lset$ (lfilter$ p$ xs$ )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfilter$ uu$ ?v0 )?v0 )):named a3 ))
(assert (! (less_eq$ (lset$ (lfilter$ p$ xs$ ))(fun_app$b (inf$ (lset$ xs$ ))(collect$ p$ ))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lset$ (lfilter$ ?v0 ?v1 ))(collect$ (fun_app$a (uua$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_set$ ))(= (less_eq$ ?v0 (fun_app$b (inf$ ?v1 )?v2 ))(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v0 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_set$ ))(= (less_eq$ ?v0 (fun_app$b (inf$ ?v1 )?v2 ))(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v0 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A_set$ ))(= (less_eq$ ?v0 (fun_app$b (inf$ ?v1 )?v2 ))(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v0 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(= (member$ ?v0 (fun_app$b (inf$ ?v1 )?v2 ))(and (member$ ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (and (member$ ?v0 ?v1 )(member$ ?v0 ?v2 ))(member$ ?v0 (fun_app$b (inf$ ?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$b (inf$ (fun_app$b (inf$ ?v0 )?v1 ))?v1 )(fun_app$b (inf$ ?v0 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$b (inf$ (fun_app$b (inf$ ?v0 )?v1 ))?v1 )(fun_app$b (inf$ ?v0 )?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$b (inf$ ?v0 )(fun_app$b (inf$ ?v0 )?v1 ))(fun_app$b (inf$ ?v0 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (fun_app$b (inf$ ?v0 )(fun_app$b (inf$ ?v0 )?v1 ))(fun_app$b (inf$ ?v0 )?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$b (inf$ ?v0 )?v0 )?v0 ):pattern ((inf$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$b (inf$ ?v0 )?v0 )?v0 ):pattern ((inf$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a17 ))
(check-sat )
;(get-unsat-core )
