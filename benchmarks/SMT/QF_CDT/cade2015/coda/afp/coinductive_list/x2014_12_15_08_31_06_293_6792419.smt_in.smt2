;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun ldrop$ (Enat$ A_llist$ )A_llist$ )
(declare-fun ldropn$ (Nat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun less_eq$ (A_set$ A_set$ )Bool )
(declare-fun lfilter$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun ldistinct$ (A_llist$ )Bool )
(assert (! (not (ldistinct$ (fun_app$ (lfilter$ p$ )xs$ ))):named a0 ))
(assert (! (ldistinct$ xs$ ):named a1 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (fun_app$ (lfilter$ ?v0 )(fun_app$ (lfilter$ ?v0 )?v1 ))(fun_app$ (lfilter$ ?v0 )?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (fun_app$ (lfilter$ ?v1 )?v0 )))):named a3 ))
(assert (! (and (ldistinct$ (fun_app$ (lfilter$ p$ )xs$ ))(less_eq$ (lset$ (fun_app$ (lfilter$ p$ )xs$ ))(lset$ xs$ ))):named a4 ))
(assert (! (= (ldistinct$ lNil$ )true ):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$ (lfilter$ ?v0 )lNil$ )lNil$ ):pattern ((lfilter$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))(ite (fun_app$a ?v0 ?v1 )(lCons$ ?v1 (fun_app$ (lfilter$ ?v0 )?v2 ))(fun_app$ (lfilter$ ?v0 )?v2 ))):pattern ((fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (ldropn$ ?v1 ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (ldrop$ ?v1 ?v0 )))):named a9 ))
(assert (! (ldistinct$ lNil$ ):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (ldistinct$ ?v0 )(lprefix$ ?v1 ?v0 ))(ldistinct$ ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (=> (not (fun_app$a ?v0 ?v1 ))(= (fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))(fun_app$ (lfilter$ ?v0 )?v2 ))):pattern ((fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (=> (fun_app$a ?v0 ?v1 )(= (fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ ?v1 (fun_app$ (lfilter$ ?v0 )?v2 )))):pattern ((fun_app$ (lfilter$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a15 ))
(check-sat )
;(get-unsat-core )
