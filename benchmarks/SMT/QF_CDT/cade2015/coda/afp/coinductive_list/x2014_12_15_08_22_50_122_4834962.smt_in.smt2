;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun p$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$c (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun gen_lset$ (A_set$ )A_llist_a_set_fun$ )
(declare-fun ldropWhile$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun ltakeWhile$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun finite_lprefix$ (A_llist$ )A_llist_bool_fun$ )
(assert (! (not (= (ltl$ (fun_app$ (ltakeWhile$ p$ )xs$ ))(ite (fun_app$a p$ (lhd$ xs$ ))(fun_app$ (ltakeWhile$ p$ )(ltl$ xs$ ))lNil$ ))):named a0 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$ (ltakeWhile$ ?v0 )lNil$ )lNil$ ):pattern ((ltakeWhile$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (fun_app$ (ltakeWhile$ ?v0 )?v1 )lNil$ )(=> (not (= ?v1 lNil$ ))(not (fun_app$a ?v0 (lhd$ ?v1 )))))):named a2 ))
(assert (! (= (ltl$ lNil$ )lNil$ ):named a3 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$b (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (and (not (lnull$ ?v0 ))(fun_app$a ?v1 (lhd$ ?v0 )))(= (ltl$ (fun_app$ (ltakeWhile$ ?v1 )?v0 ))(fun_app$ (ltakeWhile$ ?v1 )(ltl$ ?v0 ))))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(! (=> (or (lnull$ ?v0 )(not (fun_app$a ?v1 (lhd$ ?v0 ))))(= (fun_app$ (ltakeWhile$ ?v1 )?v0 )lNil$ )):pattern ((fun_app$ (ltakeWhile$ ?v1 )?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(=> (= ?v0 (lCons$ (lhd$ ?v0 )(ltl$ ?v0 )))false ))false )):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))(and (not (= ?v0 lNil$ ))(and (= (lhd$ ?v0 )?v1 )(= (ltl$ ?v0 )?v2 ))))):named a8 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$c (gen_lset$ ?v0 )lNil$ )?v0 ):pattern ((gen_lset$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$ (ldropWhile$ ?v0 )lNil$ )lNil$ ):pattern ((ldropWhile$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (finite_lprefix$ ?v0 )lNil$ )(= ?v0 lNil$ )):pattern ((finite_lprefix$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (finite_lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$b (finite_lprefix$ lNil$ )?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (not (lnull$ (fun_app$ (ltakeWhile$ ?v0 )?v1 )))(and (not (lnull$ ?v1 ))(fun_app$a ?v0 (lhd$ ?v1 ))))):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lnull$ (fun_app$ (ltakeWhile$ ?v0 )?v1 ))(or (lnull$ ?v1 )(not (fun_app$a ?v0 (lhd$ ?v1 )))))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a15 ))
(check-sat )
;(get-unsat-core )
