;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_set_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_set_a_llist_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-sort A_llist_list$ 0)
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_llist_list$)
(declare-fun hd$ (A_llist_list$)A_llist$)
(declare-fun tl$ (A_llist_list$)A_llist_list$)
(declare-fun cons$ (A_llist$ A_llist_list$ )A_llist_list$)
(declare-fun nil$a ()A_list$)
(declare-fun hd$a (A_list$)A$)
(declare-fun tl$a (A_list$)A_list$)
(declare-fun cons$a (A$ A_list$ )A_list$)
(declare-fun a$ ()A_llist_set$ )
(declare-fun lSup$ ()A_llist_set_a_llist_fun$ )
(declare-fun lset$ (A_llist_llist$ )A_llist_set$ )
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$ )Bool )
(declare-fun lSup$a ()A_llist_llist_set_a_llist_llist_fun$ )
(declare-fun lset$a (A_llist$ )A_set$ )
(declare-fun finite$ (A_llist_set$ )Bool )
(declare-fun ldropn$ (Nat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun finite$a (A_set$ )Bool )
(declare-fun fun_app$ (A_llist_set_a_llist_fun$ A_llist_set$ )A_llist$ )
(declare-fun ldropn$a (Nat$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun member$a (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun fun_app$a (A_llist_llist_set_a_llist_llist_fun$ A_llist_llist_set$ )A_llist_llist$ )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$c (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$d (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun iterates$ (A_llist_a_llist_fun$ A_llist$ )A_llist_llist$ )
(declare-fun lfinite$a (A_llist_llist$ )Bool )
(declare-fun llist_of$ (A_llist_list$ )A_llist_llist$ )
(declare-fun iterates$a (A_a_fun$ A$ )A_llist$ )
(declare-fun llist_of$a (A_list$ )A_llist$ )
(declare-fun lub_singleton$ (A_llist_llist_set_a_llist_llist_fun$ )Bool )
(declare-fun lstrict_prefix$ (A_llist_llist$ A_llist_llist$ )Bool )
(declare-fun lub_singleton$a (A_llist_set_a_llist_fun$ )Bool )
(declare-fun lstrict_prefix$a (A_llist$ A_llist$ )Bool )
(assert (! (not (= (lfinite$ (fun_app$ lSup$ a$ ))(and (finite$ a$ )(forall ((?v0 A_llist$ ))(=> (member$ ?v0 a$ )(lfinite$ ?v0 )))))):named a0 ))
(assert (! (forall ((?v0 A_llist_llist_set$ ))(=> (lfinite$a (fun_app$a lSup$a ?v0 ))(forall ((?v1 A_llist_llist$ ))(=> (member$a ?v1 ?v0 )(lfinite$a ?v1 ))))):named a1 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (lfinite$ (fun_app$ lSup$ ?v0 ))(forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lfinite$ ?v1 ))))):named a2 ))
(assert (! (chain$ lprefix$ a$ ):named a3 ))
(assert (! (lub_singleton$ lSup$a ):named a4 ))
(assert (! (lub_singleton$a lSup$ ):named a5 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lfinite$a ?v0 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lfinite$ ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (lfinite$a ?v0 )(finite$ (lset$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(finite$a (lset$a ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist$ ))(not (lfinite$a (iterates$ ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(not (lfinite$ (iterates$a ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist_llist$ ))(= (lfinite$a (ldropn$ ?v0 ?v1 ))(lfinite$a ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$ (fun_app$b (ldropn$a ?v0 )?v1 ))(lfinite$ ?v1 ))):named a13 ))
(assert (! (= (lfinite$a lNil$a )true ):named a14 ))
(assert (! (= (lfinite$ lNil$ )true ):named a15 ))
(assert (! (forall ((?v0 A_llist_list$ ))(lfinite$a (llist_of$ ?v0 ))):named a16 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$a ?v0 ))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$c (fun_app$d lprefix$ ?v0 )?v0 )):named a20 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$c (fun_app$d lprefix$ ?v0 )?v0 )):named a21 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a23 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a25 ))
(check-sat )
;(get-unsat-core )
