;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun r$ ()A_a_bool_fun_fun$ )
(declare-fun x$ ()A$ )
(declare-fun y$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun zs$ ()A_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun xs$b ()A_llist$ )
(declare-fun xsa$ ()A_llist$ )
(declare-fun ys$a ()A_llist$ )
(declare-fun ys$b ()A_llist$ )
(declare-fun ysa$ ()A_llist$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(assert (! (not (lfinite$ (lCons$ x$ zs$ ))):named a0 ))
(assert (! (llexord$ r$ xsa$ ysa$ ):named a1 ))
(assert (! (= xs$ (lappend$ zs$ xs$a )):named a2 ))
(assert (! (lfinite$ zs$ ):named a3 ))
(assert (! (= xsa$ (lCons$ x$ xs$ )):named a4 ))
(assert (! (= ysa$ (lCons$ x$ ys$ )):named a5 ))
(assert (! (= ys$ (lappend$ zs$ (lCons$ y$ ys$a ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ ))(=> (lfinite$ ?v0 )(lfinite$ (lCons$ ?v1 ?v0 )))):named a10 ))
(assert (! (llexord$ r$ xs$b ys$b ):named a11 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (llexord$ ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))(or (and (= ?v1 ?v3 )(llexord$ ?v0 ?v2 ?v4 ))(fun_app$ (fun_app$a ?v0 ?v1 )?v3 ))):pattern ((llexord$ ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (lappend$ ?v0 ?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$ (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$ ?v0 ?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (llexord$ ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))(or (fun_app$ (fun_app$a ?v0 ?v1 )?v3 )(and (= ?v1 ?v3 )(llexord$ ?v0 ?v2 ?v4 )))):pattern ((llexord$ ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A_llist$ ))(= (llexord$ ?v0 (lCons$ ?v1 ?v2 )?v3 )(exists ((?v4 A$ )(?v5 A_llist$ ))(and (= ?v3 (lCons$ ?v4 ?v5 ))(or (and (= ?v1 ?v4 )(llexord$ ?v0 ?v2 ?v5 ))(fun_app$ (fun_app$a ?v0 ?v1 )?v4 )))))):named a16 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A$ ))(=> (llexord$ ?v0 ?v1 ?v2 )(llexord$ ?v0 (lCons$ ?v3 ?v1 )(lCons$ ?v3 ?v2 )))):named a17 ))
(check-sat )
;(get-unsat-core )
