;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-sort A_llist_list$ 0)
(declare-fun nil$ ()A_llist_list$)
(declare-fun hd$ (A_llist_list$)A_llist$)
(declare-fun tl$ (A_llist_list$)A_llist_list$)
(declare-fun cons$ (A_llist$ A_llist_list$ )A_llist_list$)
(declare-fun i$ ()Nat$ )
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun nth$ (A_llist_list$ )Nat_a_llist_fun$ )
(declare-fun xss$ ()A_llist_list$ )
(declare-fun less$ (Nat$ Nat$ )Bool )
(declare-fun lnth$ (A_llist_llist$ )Nat_a_llist_fun$ )
(declare-fun size$ (A_llist_list$ )Nat$ )
(declare-fun xss$a ()A_llist_llist$ )
(declare-fun xssa$ ()A_llist_llist$ )
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$ )A_llist$ )
(declare-fun lappend$ (A_llist_llist$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun fun_app$a (A_llist_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$a (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun llist_of$ (A_llist_list$ )A_llist_llist$ )
(assert (! (not (= (fun_app$ (lnth$ (fun_app$a (lappend$ (llist_of$ xss$ ))(lCons$a (lCons$ x$ xs$ )xss$a )))i$ )lNil$ )):named a0 ))
(assert (! (less$ i$ (size$ xss$ )):named a1 ))
(assert (! (= (fun_app$ (nth$ xss$ )i$ )lNil$ ):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(! (= (fun_app$a (lappend$ (lCons$a ?v0 ?v1 ))?v2 )(lCons$a ?v0 (fun_app$a (lappend$ ?v1 )?v2 ))):pattern ((fun_app$a (lappend$ (lCons$a ?v0 ?v1 ))?v2 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$b (lappend$a (lCons$ ?v0 ?v1 ))?v2 )(lCons$ ?v0 (fun_app$b (lappend$a ?v1 )?v2 ))):pattern ((fun_app$b (lappend$a (lCons$ ?v0 ?v1 ))?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$a (lappend$ ?v0 )lNil$a )?v0 ):pattern ((lappend$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (lappend$a ?v0 )lNil$ )?v0 ):pattern ((lappend$a ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$a (lappend$ lNil$a )?v0 )?v0 ):pattern ((fun_app$a (lappend$ lNil$a )?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (lappend$a lNil$ )?v0 )?v0 ):pattern ((fun_app$b (lappend$a lNil$ )?v0 )))):named a11 ))
(assert (! (= xssa$ (fun_app$a (lappend$ (llist_of$ xss$ ))(lCons$a (lCons$ x$ xs$ )xss$a ))):named a12 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (= lNil$a (fun_app$a (lappend$ ?v0 )?v1 ))(and (= ?v0 lNil$a )(= ?v1 lNil$a )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$b (lappend$a ?v0 )?v1 ))(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a14 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (= (fun_app$a (lappend$ ?v0 )?v1 )lNil$a )(and (= ?v0 lNil$a )(= ?v1 lNil$a )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (fun_app$b (lappend$a ?v0 )?v1 )lNil$ )(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$b (lappend$a (fun_app$b (lappend$a ?v0 )?v1 ))?v2 )(fun_app$b (lappend$a ?v0 )(fun_app$b (lappend$a ?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(= (fun_app$a (lappend$ (fun_app$a (lappend$ ?v0 )?v1 ))?v2 )(fun_app$a (lappend$ ?v0 )(fun_app$a (lappend$ ?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(= (fun_app$a (lappend$ (fun_app$a (lappend$ ?v0 )(lCons$a ?v1 lNil$a )))?v2 )(fun_app$a (lappend$ ?v0 )(lCons$a ?v1 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(= (fun_app$b (lappend$a (fun_app$b (lappend$a ?v0 )(lCons$ ?v1 lNil$ )))?v2 )(fun_app$b (lappend$a ?v0 )(lCons$ ?v1 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (not (= ?v0 lNil$a ))(exists ((?v1 A_llist$ )(?v2 A_llist_llist$ ))(= ?v0 (lCons$a ?v1 ?v2 ))))):named a21 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (= ?v0 lNil$ ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a22 ))
(assert (! (= (fun_app$a (lappend$ lNil$a )lNil$a )lNil$a ):named a23 ))
(assert (! (= (fun_app$b (lappend$a lNil$ )lNil$ )lNil$ ):named a24 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (and (=> (= ?v0 lNil$a )false )(forall ((?v1 A_llist$ )(?v2 A_llist_llist$ ))(=> (= ?v0 (lCons$a ?v1 ?v2 ))false )))false )):named a25 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(forall ((?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))false )))false )):named a26 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(not (= lNil$a (lCons$a ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(not (= lNil$ (lCons$ ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_llist_list$ ))(= (lnth$ (llist_of$ ?v0 ))(nth$ ?v0 ))):named a29 ))
(check-sat )
;(get-unsat-core )
