;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_set_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun xs$ ()A_llist$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun lmember$ (A$ )A_llist_bool_fun$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_set_fun$ A_llist$ )A_set$ )
(declare-fun fun_app$b (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$c (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun gen_lset$ (A_set$ )A_llist_a_set_fun$ )
(declare-fun pred_llist$ (A_bool_fun$ A_llist$ )Bool )
(assert (! (not (= (lprefix$ xs$ lNil$ )(= xs$ lNil$ ))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ lNil$ ?v0 )):named a2 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$a (gen_lset$ ?v0 )lNil$ )?v0 ):pattern ((gen_lset$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(pred_llist$ ?v0 lNil$ )):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lprefix$ ?v0 ?v1 )(or (exists ((?v2 A_llist$ ))(and (= ?v0 lNil$ )(= ?v1 ?v2 )))(exists ((?v2 A_llist$ )(?v3 A_llist$ )(?v4 A$ ))(and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 (lCons$ ?v4 ?v3 ))(lprefix$ ?v2 ?v3 ))))))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (lprefix$ ?v0 ?v1 )(and (forall ((?v2 A_llist$ ))(=> (and (= ?v0 lNil$ )(= ?v1 ?v2 ))false ))(forall ((?v2 A_llist$ )(?v3 A_llist$ )(?v4 A$ ))(=> (and (= ?v0 (lCons$ ?v4 ?v2 ))(and (= ?v1 (lCons$ ?v4 ?v3 ))(lprefix$ ?v2 ?v3 )))false ))))false )):named a7 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$b ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ (fun_app$b ?v0 ?v3 )?v4 )(or (exists ((?v5 A_llist$ ))(and (= ?v3 lNil$ )(= ?v4 ?v5 )))(exists ((?v5 A_llist$ )(?v6 A_llist$ )(?v7 A$ ))(and (= ?v3 (lCons$ ?v7 ?v5 ))(and (= ?v4 (lCons$ ?v7 ?v6 ))(or (fun_app$ (fun_app$b ?v0 ?v5 )?v6 )(lprefix$ ?v5 ?v6 )))))))))(lprefix$ ?v1 ?v2 ))):named a8 ))
(assert (! (= (lfinite$ lNil$ )true ):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c (lappend$ lNil$ )?v0 )?v0 ):pattern ((fun_app$c (lappend$ lNil$ )?v0 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$c (lappend$ (lCons$ ?v0 ?v1 ))?v2 )(lCons$ ?v0 (fun_app$c (lappend$ ?v1 )?v2 ))):pattern ((fun_app$c (lappend$ (lCons$ ?v0 ?v1 ))?v2 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a14 ))
(check-sat )
;(get-unsat-core )
