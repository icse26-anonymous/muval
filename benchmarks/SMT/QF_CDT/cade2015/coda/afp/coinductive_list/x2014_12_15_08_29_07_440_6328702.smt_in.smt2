;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_a_a_prod_prod_a_a_a_prod_prod_fun$ 0 )
(declare-sort A_a_prod_a_prod_a_a_prod_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_prod_a_a_prod_a_a_prod_prod_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort A_list$ 0)
(declare-sort A_a_prod$ 0)
(declare-sort A_a_prod_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun fst$ (A_a_prod$)A$)
(declare-fun snd$ (A_a_prod$)A$)
(declare-fun pair$ (A$ A$ )A_a_prod$)
(declare-fun nil$a ()A_a_prod_list$)
(declare-fun hd$a (A_a_prod_list$)A_a_prod$)
(declare-fun tl$a (A_a_prod_list$)A_a_prod_list$)
(declare-fun cons$a (A_a_prod$ A_a_prod_list$ )A_a_prod_list$)
(declare-codatatypes ()((A_a_prod_llist$ (lNil$a )(lCons$a (lhd$a A_a_prod$ )(ltl$a A_a_prod_llist$ )))))
(declare-sort A_a_prod_a_a_prod_prod$ 0)
(declare-sort A_a_prod_a_a_prod_prod_list$ 0)
(declare-fun fst$a (A_a_prod_a_a_prod_prod$)A_a_prod$)
(declare-fun snd$a (A_a_prod_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$a (A_a_prod$ A_a_prod$ )A_a_prod_a_a_prod_prod$)
(declare-fun nil$b ()A_a_prod_a_a_prod_prod_list$)
(declare-fun hd$b (A_a_prod_a_a_prod_prod_list$)A_a_prod_a_a_prod_prod$)
(declare-fun tl$b (A_a_prod_a_a_prod_prod_list$)A_a_prod_a_a_prod_prod_list$)
(declare-fun cons$b (A_a_prod_a_a_prod_prod$ A_a_prod_a_a_prod_prod_list$ )A_a_prod_a_a_prod_prod_list$)
(declare-codatatypes ()((A_a_prod_a_a_prod_prod_llist$ (lNil$b )(lCons$b (lhd$b A_a_prod_a_a_prod_prod$ )(ltl$b A_a_prod_a_a_prod_prod_llist$ )))))
(declare-sort A_a_prod_a_prod$ 0)
(declare-sort A_a_prod_a_prod_list$ 0)
(declare-fun fst$b (A_a_prod_a_prod$)A_a_prod$)
(declare-fun snd$b (A_a_prod_a_prod$)A$)
(declare-fun pair$b (A_a_prod$ A$ )A_a_prod_a_prod$)
(declare-fun nil$c ()A_a_prod_a_prod_list$)
(declare-fun hd$c (A_a_prod_a_prod_list$)A_a_prod_a_prod$)
(declare-fun tl$c (A_a_prod_a_prod_list$)A_a_prod_a_prod_list$)
(declare-fun cons$c (A_a_prod_a_prod$ A_a_prod_a_prod_list$ )A_a_prod_a_prod_list$)
(declare-codatatypes ()((A_a_prod_a_prod_llist$ (lNil$c )(lCons$c (lhd$c A_a_prod_a_prod$ )(ltl$c A_a_prod_a_prod_llist$ )))))
(declare-sort A_a_a_prod_prod$ 0)
(declare-sort A_a_a_prod_prod_list$ 0)
(declare-fun fst$c (A_a_a_prod_prod$)A$)
(declare-fun snd$c (A_a_a_prod_prod$)A_a_prod$)
(declare-fun pair$c (A$ A_a_prod$ )A_a_a_prod_prod$)
(declare-fun nil$d ()A_a_a_prod_prod_list$)
(declare-fun hd$d (A_a_a_prod_prod_list$)A_a_a_prod_prod$)
(declare-fun tl$d (A_a_a_prod_prod_list$)A_a_a_prod_prod_list$)
(declare-fun cons$d (A_a_a_prod_prod$ A_a_a_prod_prod_list$ )A_a_a_prod_prod_list$)
(declare-codatatypes ()((A_a_a_prod_prod_llist$ (lNil$d )(lCons$d (lhd$d A_a_a_prod_prod$ )(ltl$d A_a_a_prod_prod_llist$ )))))
(declare-sort A_a_a_prod_a_prod_prod$ 0)
(declare-fun fst$d (A_a_a_prod_a_prod_prod$)A$)
(declare-fun snd$d (A_a_a_prod_a_prod_prod$)A_a_prod_a_prod$)
(declare-fun pair$d (A$ A_a_prod_a_prod$ )A_a_a_prod_a_prod_prod$)
(declare-codatatypes ()((A_a_a_prod_a_prod_prod_llist$ (lNil$e )(lCons$e (lhd$e A_a_a_prod_a_prod_prod$ )(ltl$e A_a_a_prod_a_prod_prod_llist$ )))))
(declare-sort A_a_a_a_prod_prod_prod$ 0)
(declare-fun fst$e (A_a_a_a_prod_prod_prod$)A$)
(declare-fun snd$e (A_a_a_a_prod_prod_prod$)A_a_a_prod_prod$)
(declare-fun pair$e (A$ A_a_a_prod_prod$ )A_a_a_a_prod_prod_prod$)
(declare-codatatypes ()((A_a_a_a_prod_prod_prod_llist$ (lNil$f )(lCons$f (lhd$f A_a_a_a_prod_prod_prod$ )(ltl$f A_a_a_a_prod_prod_prod_llist$ )))))
(declare-sort A_a_prod_a_prod_a_prod$ 0)
(declare-fun fst$f (A_a_prod_a_prod_a_prod$)A_a_prod_a_prod$)
(declare-fun snd$f (A_a_prod_a_prod_a_prod$)A$)
(declare-fun pair$f (A_a_prod_a_prod$ A$ )A_a_prod_a_prod_a_prod$)
(declare-codatatypes ()((A_a_prod_a_prod_a_prod_llist$ (lNil$g )(lCons$g (lhd$g A_a_prod_a_prod_a_prod$ )(ltl$g A_a_prod_a_prod_a_prod_llist$ )))))
(declare-sort A_a_a_prod_prod_a_prod$ 0)
(declare-fun fst$g (A_a_a_prod_prod_a_prod$)A_a_a_prod_prod$)
(declare-fun snd$g (A_a_a_prod_prod_a_prod$)A$)
(declare-fun pair$g (A_a_a_prod_prod$ A$ )A_a_a_prod_prod_a_prod$)
(declare-codatatypes ()((A_a_a_prod_prod_a_prod_llist$ (lNil$h )(lCons$h (lhd$h A_a_a_prod_prod_a_prod$ )(ltl$h A_a_a_prod_prod_a_prod_llist$ )))))
(declare-sort A_a_a_prod_a_a_prod_prod_prod$ 0)
(declare-fun fst$h (A_a_a_prod_a_a_prod_prod_prod$)A$)
(declare-fun snd$h (A_a_a_prod_a_a_prod_prod_prod$)A_a_prod_a_a_prod_prod$)
(declare-fun pair$h (A$ A_a_prod_a_a_prod_prod$ )A_a_a_prod_a_a_prod_prod_prod$)
(declare-codatatypes ()((A_a_a_prod_a_a_prod_prod_prod_llist$ (lNil$i )(lCons$i (lhd$i A_a_a_prod_a_a_prod_prod_prod$ )(ltl$i A_a_a_prod_a_a_prod_prod_prod_llist$ )))))
(declare-sort A_a_prod_a_a_prod_a_prod_prod$ 0)
(declare-fun fst$i (A_a_prod_a_a_prod_a_prod_prod$)A_a_prod$)
(declare-fun snd$i (A_a_prod_a_a_prod_a_prod_prod$)A_a_prod_a_prod$)
(declare-fun pair$i (A_a_prod$ A_a_prod_a_prod$ )A_a_prod_a_a_prod_a_prod_prod$)
(declare-codatatypes ()((A_a_prod_a_a_prod_a_prod_prod_llist$ (lNil$j )(lCons$j (lhd$j A_a_prod_a_a_prod_a_prod_prod$ )(ltl$j A_a_prod_a_a_prod_a_prod_prod_llist$ )))))
(declare-fun r$ ()A_a_bool_fun_fun$ )
(declare-fun xs$ ()A_list$ )
(declare-fun ys$ ()A_list$ )
(declare-fun zs$ ()A_llist$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun zs$a ()A_list$ )
(declare-fun lzip$ (A_llist$ A_llist$ )A_a_prod_llist$ )
(declare-fun lzip$a (A_llist$ A_a_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun lzip$b (A_a_prod_llist$ A_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun lzip$c (A_a_prod_llist$ A_a_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun lzip$d (A_llist$ A_a_prod_a_prod_llist$ )A_a_a_prod_a_prod_prod_llist$ )
(declare-fun lzip$e (A_llist$ A_a_a_prod_prod_llist$ )A_a_a_a_prod_prod_prod_llist$ )
(declare-fun lzip$f (A_a_prod_a_prod_llist$ A_llist$ )A_a_prod_a_prod_a_prod_llist$ )
(declare-fun lzip$g (A_a_a_prod_prod_llist$ A_llist$ )A_a_a_prod_prod_a_prod_llist$ )
(declare-fun lzip$h (A_llist$ A_a_prod_a_a_prod_prod_llist$ )A_a_a_prod_a_a_prod_prod_prod_llist$ )
(declare-fun lzip$i (A_a_prod_llist$ A_a_prod_a_prod_llist$ )A_a_prod_a_a_prod_a_prod_prod_llist$ )
(declare-fun ldropn$ (Nat$ A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun ldropn$a (Nat$ A_a_prod_a_prod_llist$ )A_a_prod_a_prod_llist$ )
(declare-fun ldropn$b (Nat$ A_a_a_prod_prod_llist$ )A_a_a_prod_prod_llist$ )
(declare-fun ldropn$c (Nat$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun ldropn$d (Nat$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun list_of$ (A_a_prod_a_a_prod_prod_llist$ )A_a_prod_a_a_prod_prod_list$ )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun iterates$ (A_a_prod_a_a_prod_prod_a_a_prod_a_a_prod_prod_fun$ A_a_prod_a_a_prod_prod$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun lfinite$a (A_a_prod_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$b (A_a_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$c (A_a_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$d (A_a_prod_llist$ )Bool )
(declare-fun lfinite$e (A_a_a_prod_a_prod_prod_llist$ )Bool )
(declare-fun lfinite$f (A_a_a_a_prod_prod_prod_llist$ )Bool )
(declare-fun lfinite$g (A_a_prod_a_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$h (A_a_a_prod_prod_a_prod_llist$ )Bool )
(declare-fun lfinite$i (A_a_a_prod_a_a_prod_prod_prod_llist$ )Bool )
(declare-fun lfinite$j (A_a_prod_a_a_prod_a_prod_prod_llist$ )Bool )
(declare-fun list_of$a (A_a_prod_a_prod_llist$ )A_a_prod_a_prod_list$ )
(declare-fun list_of$b (A_a_a_prod_prod_llist$ )A_a_a_prod_prod_list$ )
(declare-fun list_of$c (A_a_prod_llist$ )A_a_prod_list$ )
(declare-fun list_of$d (A_llist$ )A_list$ )
(declare-fun llist_of$ (A_list$ )A_llist$ )
(declare-fun iterates$a (A_a_prod_a_prod_a_a_prod_a_prod_fun$ A_a_prod_a_prod$ )A_a_prod_a_prod_llist$ )
(declare-fun iterates$b (A_a_a_prod_prod_a_a_a_prod_prod_fun$ A_a_a_prod_prod$ )A_a_a_prod_prod_llist$ )
(declare-fun iterates$c (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod_llist$ )
(declare-fun iterates$d (A_a_fun$ A$ )A_llist$ )
(declare-fun llist_of$a (A_a_prod_list$ )A_a_prod_llist$ )
(declare-fun llist_of$b (A_a_prod_a_a_prod_prod_list$ )A_a_prod_a_a_prod_prod_llist$ )
(declare-fun llist_of$c (A_a_prod_a_prod_list$ )A_a_prod_a_prod_llist$ )
(declare-fun llist_of$d (A_a_a_prod_prod_list$ )A_a_a_prod_prod_llist$ )
(declare-fun lstrict_prefix$ (A_a_prod_a_a_prod_prod_llist$ A_a_prod_a_a_prod_prod_llist$ )Bool )
(declare-fun lstrict_prefix$a (A_a_prod_a_prod_llist$ A_a_prod_a_prod_llist$ )Bool )
(declare-fun lstrict_prefix$b (A_a_a_prod_prod_llist$ A_a_a_prod_prod_llist$ )Bool )
(declare-fun lstrict_prefix$c (A_a_prod_llist$ A_a_prod_llist$ )Bool )
(declare-fun lstrict_prefix$d (A_llist$ A_llist$ )Bool )
(assert (! (not (lfinite$ (llist_of$ xs$ ))):named a0 ))
(assert (! (lfinite$ zs$ ):named a1 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_a_prod_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_list$ ))(lfinite$a (llist_of$b ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_list$ ))(lfinite$b (llist_of$c ?v0 ))):named a5 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_list$ ))(lfinite$c (llist_of$d ?v0 ))):named a6 ))
(assert (! (forall ((?v0 A_a_prod_list$ ))(lfinite$d (llist_of$a ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(lfinite$ (llist_of$ ?v0 ))):named a8 ))
(assert (! (=> (forall ((?v0 A_list$ ))(=> (= zs$ (llist_of$ ?v0 ))false ))false ):named a9 ))
(assert (! (llexord$ r$ (llist_of$ xs$ )(llist_of$ ys$ )):named a10 ))
(assert (! (= (llist_of$ xs$ )(lappend$ zs$ xs$a )):named a11 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$ ))(=> (lfinite$a ?v0 )(= (llist_of$b (list_of$ ?v0 ))?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ ))(=> (lfinite$b ?v0 )(= (llist_of$c (list_of$a ?v0 ))?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ ))(=> (lfinite$c ?v0 )(= (llist_of$d (list_of$b ?v0 ))?v0 ))):named a14 ))
(assert (! (forall ((?v0 A_a_prod_llist$ ))(=> (lfinite$d ?v0 )(= (llist_of$a (list_of$c ?v0 ))?v0 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lfinite$ ?v0 )(= (llist_of$ (list_of$d ?v0 ))?v0 ))):named a16 ))
(assert (! (= zs$ (llist_of$ zs$a )):named a17 ))
(assert (! (forall ((?v0 A_a_prod_list$ ))(= (list_of$c (llist_of$a ?v0 ))?v0 )):named a18 ))
(assert (! (forall ((?v0 A_list$ ))(= (list_of$d (llist_of$ ?v0 ))?v0 )):named a19 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_llist$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(=> (lstrict_prefix$ ?v0 ?v1 )(lfinite$a ?v0 ))):named a20 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ )(?v1 A_a_prod_a_prod_llist$ ))(=> (lstrict_prefix$a ?v0 ?v1 )(lfinite$b ?v0 ))):named a21 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 A_a_a_prod_prod_llist$ ))(=> (lstrict_prefix$b ?v0 ?v1 )(lfinite$c ?v0 ))):named a22 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(=> (lstrict_prefix$c ?v0 ?v1 )(lfinite$d ?v0 ))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (lstrict_prefix$d ?v0 ?v1 )(lfinite$ ?v0 ))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(= (lfinite$a (ldropn$ ?v0 ?v1 ))(lfinite$a ?v1 ))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_a_prod_llist$ ))(= (lfinite$b (ldropn$a ?v0 ?v1 ))(lfinite$b ?v1 ))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_a_prod_prod_llist$ ))(= (lfinite$c (ldropn$b ?v0 ?v1 ))(lfinite$c ?v1 ))):named a27 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_llist$ ))(= (lfinite$d (ldropn$c ?v0 ?v1 ))(lfinite$d ?v1 ))):named a28 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(= (lfinite$ (ldropn$d ?v0 ?v1 ))(lfinite$ ?v1 ))):named a29 ))
(assert (! (= (lfinite$a lNil$b )true ):named a30 ))
(assert (! (= (lfinite$b lNil$c )true ):named a31 ))
(assert (! (= (lfinite$c lNil$d )true ):named a32 ))
(assert (! (= (lfinite$d lNil$a )true ):named a33 ))
(assert (! (= (lfinite$ lNil$ )true ):named a34 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod_a_a_prod_a_a_prod_prod_fun$ )(?v1 A_a_prod_a_a_prod_prod$ ))(not (lfinite$a (iterates$ ?v0 ?v1 )))):named a35 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_a_a_prod_a_prod_fun$ )(?v1 A_a_prod_a_prod$ ))(not (lfinite$b (iterates$a ?v0 ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_a_a_a_prod_prod_fun$ )(?v1 A_a_a_prod_prod$ ))(not (lfinite$c (iterates$b ?v0 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod$ ))(not (lfinite$d (iterates$c ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(not (lfinite$ (iterates$d ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$d (lzip$ ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$c (lzip$a ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$d ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_llist$ ))(= (lfinite$b (lzip$b ?v0 ?v1 ))(or (lfinite$d ?v0 )(lfinite$ ?v1 )))):named a42 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_llist$ ))(= (lfinite$a (lzip$c ?v0 ?v1 ))(or (lfinite$d ?v0 )(lfinite$d ?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_a_prod_llist$ ))(= (lfinite$e (lzip$d ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$b ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_a_prod_prod_llist$ ))(= (lfinite$f (lzip$e ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$c ?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_a_prod_a_prod_llist$ )(?v1 A_llist$ ))(= (lfinite$g (lzip$f ?v0 ?v1 ))(or (lfinite$b ?v0 )(lfinite$ ?v1 )))):named a46 ))
(assert (! (forall ((?v0 A_a_a_prod_prod_llist$ )(?v1 A_llist$ ))(= (lfinite$h (lzip$g ?v0 ?v1 ))(or (lfinite$c ?v0 )(lfinite$ ?v1 )))):named a47 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(= (lfinite$i (lzip$h ?v0 ?v1 ))(or (lfinite$ ?v0 )(lfinite$a ?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 A_a_prod_a_prod_llist$ ))(= (lfinite$j (lzip$i ?v0 ?v1 ))(or (lfinite$d ?v0 )(lfinite$b ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_prod$ )(?v1 A_a_prod_a_a_prod_prod_llist$ ))(! (= (lfinite$a (lCons$b ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$b ?v0 ?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_a_prod_a_prod$ )(?v1 A_a_prod_a_prod_llist$ ))(! (= (lfinite$b (lCons$c ?v0 ?v1 ))(lfinite$b ?v1 )):pattern ((lCons$c ?v0 ?v1 )))):named a51 ))
(assert (! (forall ((?v0 A_a_a_prod_prod$ )(?v1 A_a_a_prod_prod_llist$ ))(! (= (lfinite$c (lCons$d ?v0 ?v1 ))(lfinite$c ?v1 )):pattern ((lCons$d ?v0 ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ ))(! (= (lfinite$d (lCons$a ?v0 ?v1 ))(lfinite$d ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_llist$ )(?v2 A_a_prod$ )(?v3 A_a_prod_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a55 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a56 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$ ?v0 ?v1 ?v1 )):named a57 ))
(check-sat )
;(get-unsat-core )
