;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun uu$ ()A_a_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun uua$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun chain$ (A_llist_a_llist_bool_fun_fun$ A_llist_set$ )Bool )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun transp$ (A_llist_a_llist_bool_fun_fun$ )Bool )
(declare-fun collect$ (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun llexord$ (A_a_bool_fun_fun$ A_llist$ A_llist$ )Bool )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun finite_lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v0 )):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$b (fun_app$c uu$ ?v0 )?v1 )false ):pattern ((fun_app$b (fun_app$c uu$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (= (llexord$ uu$ xs$ ys$ )(fun_app$ (fun_app$a lprefix$ xs$ )ys$ ))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v0 )):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v0 )):named a4 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$ ?v0 ?v1 ?v1 )):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v2 )?v1 ))(or (fun_app$ (fun_app$a lprefix$ ?v0 )?v2 )(fun_app$ (fun_app$a lprefix$ ?v2 )?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v2 ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(fun_app$ (fun_app$a lprefix$ ?v1 )?v2 ))(fun_app$ (fun_app$a lprefix$ ?v0 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(llexord$ ?v2 ?v0 ?v1 ))):named a11 ))
(assert (! (= finite_lprefix$ lprefix$ ):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (lstrict_prefix$ ?v0 ?v1 )(and (fun_app$ (fun_app$a lprefix$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((lstrict_prefix$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A$ )(?v4 A_llist$ ))(! (= (llexord$ ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))(or (and (= ?v1 ?v3 )(llexord$ ?v0 ?v2 ?v4 ))(fun_app$b (fun_app$c ?v0 ?v1 )?v3 ))):pattern ((llexord$ ?v0 (lCons$ ?v1 ?v2 )(lCons$ ?v3 ?v4 ))))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_llist$ ))(! (=> (lnull$ ?v0 )(= (llexord$ ?v1 ?v2 ?v0 )(lnull$ ?v2 ))):pattern ((llexord$ ?v1 ?v2 ?v0 )))):named a15 ))
(assert (! (transp$ lprefix$ ):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(chain$ lprefix$ (collect$ (uua$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (fun_app$a lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$ (fun_app$a lprefix$ lNil$ )?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ ))(llexord$ ?v0 lNil$ ?v1 )):named a19 ))
(check-sat )
;(get-unsat-core )
