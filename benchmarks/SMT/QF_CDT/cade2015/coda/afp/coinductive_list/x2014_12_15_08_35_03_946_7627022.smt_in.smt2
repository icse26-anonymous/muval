;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_nat_bool_fun_fun$ 0 )
(declare-sort A_nat_prod_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort A_nat_prod_bool_fun_a_nat_prod_bool_fun_fun$ 0 )
(declare-sort A_nat_prod$ 0)
(declare-fun fst$ (A_nat_prod$)A$)
(declare-fun snd$ (A_nat_prod$)Nat$)
(declare-fun pair$ (A$ Nat$ )A_nat_prod$)
(declare-codatatypes ()((A_nat_prod_llist$ (lNil$ )(lCons$ (lhd$ A_nat_prod$ )(ltl$ A_nat_prod_llist$ )))(A_llist$ (lNil$a )(lCons$a (lhd$a A$ )(ltl$a A_llist$ )))(Nat_llist$ (lNil$b )(lCons$b (lhd$b Nat$ )(ltl$b Nat_llist$ )))))
(declare-fun a$ ()Nat_set$ )
(declare-fun b$ ()Nat_set$ )
(declare-fun uu$ ()A_nat_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun uua$ ()A_nat_bool_fun_fun$ )
(declare-fun uub$ ()A_nat_prod_bool_fun$ )
(declare-fun uuc$ (A_nat_prod_bool_fun$ )A_nat_prod_bool_fun_a_nat_prod_bool_fun_fun$ )
(declare-fun uud$ (Bool A_nat_bool_fun_fun$ )A_nat_bool_fun_fun$ )
(declare-fun lzip$ (A_llist$ Nat_llist$ )A_nat_prod_llist$ )
(declare-fun zero$ ()Nat$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun lfilter$ (A_nat_prod_bool_fun$ A_nat_prod_llist$ )A_nat_prod_llist$ )
(declare-fun fun_app$a (A_nat_bool_fun_fun$ A$ )Nat_bool_fun$ )
(declare-fun fun_app$b (A_nat_prod_bool_fun$ A_nat_prod$ )Bool )
(declare-fun fun_app$c (A_nat_prod_bool_fun_a_nat_prod_bool_fun_fun$ A_nat_prod_bool_fun$ )A_nat_prod_bool_fun$ )
(declare-fun fun_app$d (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$e (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun iterates$ (Nat_nat_fun$ Nat$ )Nat_llist$ )
(declare-fun case_prod$ (A_nat_bool_fun_fun$ )A_nat_prod_bool_fun$ )
(assert (! (forall ((?v0 A$ )(?v1 Nat$ ))(! (= (fun_app$ (fun_app$a uua$ ?v0 )?v1 )(member$ ?v1 b$ )):pattern ((fun_app$ (fun_app$a uua$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(member$ ?v1 a$ )):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$ )(?v1 A_nat_prod_bool_fun$ )(?v2 A_nat_prod$ ))(! (= (fun_app$b (fun_app$c (uuc$ ?v0 )?v1 )?v2 )(and (fun_app$b ?v0 ?v2 )(fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$c (uuc$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 Bool )(?v1 A_nat_bool_fun_fun$ )(?v2 A$ )(?v3 Nat$ ))(! (= (fun_app$ (fun_app$a (uud$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uud$ ?v0 ?v1 )?v2 )?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_nat_prod$ ))(! (= (fun_app$b uub$ ?v0 )true ):pattern ((fun_app$b uub$ ?v0 )))):named a4 ))
(assert (! (not (= (lfilter$ (case_prod$ uu$ )(lzip$ ys$ (iterates$ suc$ zero$ )))(lfilter$ (case_prod$ uua$ )(lzip$ ys$ (iterates$ suc$ zero$ ))))):named a5 ))
(assert (! (= xs$ ys$ ):named a6 ))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$ )(?v1 A_nat_prod_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v0 ?v1 ))(lfilter$ ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_nat_prod_llist$ ))(= (lfilter$ uub$ ?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 A_nat_prod_bool_fun$ )(?v1 A_nat_prod_bool_fun$ )(?v2 A_nat_prod_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v1 ?v2 ))(lfilter$ (fun_app$c (uuc$ ?v0 )?v1 )?v2 ))):named a9 ))
(assert (! (forall ((?v0 Bool )(?v1 A_nat_bool_fun_fun$ )(?v2 A_nat_prod$ ))(= (fun_app$b (case_prod$ (uud$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$b (case_prod$ ?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$d suc$ ?v0 )(fun_app$d suc$ ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$d suc$ ?v0 )(fun_app$d suc$ ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$d suc$ ?v1 ))false )))false )):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$d suc$ ?v1 ))false )))false )):named a14 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$ (fun_app$e ?v0 ?v3 )zero$ ))(and (forall ((?v3 Nat$ ))(fun_app$ (fun_app$e ?v0 zero$ )(fun_app$d suc$ ?v3 )))(forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (fun_app$ (fun_app$e ?v0 ?v3 )?v4 )(fun_app$ (fun_app$e ?v0 (fun_app$d suc$ ?v3 ))(fun_app$d suc$ ?v4 ))))))(fun_app$ (fun_app$e ?v0 ?v1 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= (fun_app$d suc$ ?v0 )zero$ )false )):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 (fun_app$d suc$ ?v1 ))(not (= ?v0 zero$ )))):named a17 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= zero$ (fun_app$d suc$ ?v0 ))false )):named a18 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a19 ))
(check-sat )
;(get-unsat-core )
