;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun uua$ ()A_bool_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun less_eq$ (A_set$ A_set$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun ltakeWhile$ (A_bool_fun$ )A_llist_a_llist_fun$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uua$ ?v0 )false ):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )true ):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (not (= (fun_app$a (ltakeWhile$ uu$ )xs$ )xs$ )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$a (ltakeWhile$ uua$ )?v0 )lNil$ )):named a3 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$a (ltakeWhile$ ?v0 )lNil$ )lNil$ ):pattern ((ltakeWhile$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(lprefix$ (fun_app$a (ltakeWhile$ ?v0 )?v1 )?v1 )):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (llength$ (fun_app$a (ltakeWhile$ ?v0 )?v1 ))(llength$ ?v1 ))(= (fun_app$a (ltakeWhile$ ?v0 )?v1 )?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(! (=> (forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v0 ))(fun_app$ ?v1 ?v2 )))(= (fun_app$a (ltakeWhile$ ?v1 )?v0 )?v0 )):pattern ((fun_app$a (ltakeWhile$ ?v1 )?v0 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (fun_app$a (ltakeWhile$ ?v1 )?v2 )))(and (member$ ?v0 (lset$ ?v2 ))(fun_app$ ?v1 ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (= (fun_app$a (ltakeWhile$ ?v0 )?v1 )?v1 )(less_eq$ (lset$ ?v1 )(collect$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$a (ltakeWhile$ ?v0 )(lCons$ ?v1 ?v2 ))(ite (fun_app$ ?v0 ?v1 )(lCons$ ?v1 (fun_app$a (ltakeWhile$ ?v0 )?v2 ))lNil$ )):pattern ((fun_app$a (ltakeWhile$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (not (lnull$ (fun_app$a (ltakeWhile$ ?v0 )?v1 )))(and (not (lnull$ ?v1 ))(fun_app$ ?v0 (lhd$ ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (lprefix$ (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(lprefix$ ?v1 ?v3 ))):pattern ((lprefix$ (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$ lNil$ ?v0 )true ):pattern ((lprefix$ lNil$ ?v0 )))):named a16 ))
(check-sat )
;(get-unsat-core )
