;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort A_llist_b_fun$ 0 )
(declare-sort B_a_llist_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun$ 0 )
(declare-sort B_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_b_llist_fun$ 0 )
(declare-sort B_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_fun$ 0 )
(declare-sort B_llist_llist_a_llist_llist_fun$ 0 )
(declare-sort B_llist_llist_b_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_llist_a_llist_llist_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))(B_llist$ (lNil$b )(lCons$b (lhd$b B$ )(ltl$b B_llist$ )))(B_llist_llist$ (lNil$c )(lCons$c (lhd$c B_llist$ )(ltl$c B_llist_llist$ )))(A_llist_llist_llist$ (lNil$d )(lCons$d (lhd$d A_llist_llist$ )(ltl$d A_llist_llist_llist$ )))(B_llist_llist_llist$ (lNil$e )(lCons$e (lhd$e B_llist_llist$ )(ltl$e B_llist_llist_llist$ )))(A_llist_llist_llist_llist$ (lNil$f )(lCons$f (lhd$f A_llist_llist_llist$ )(ltl$f A_llist_llist_llist_llist$ )))))
(declare-fun f$ ()B_a_fun$ )
(declare-fun uu$ ()B_a_llist_fun$ )
(declare-fun xs$ ()B_llist$ )
(declare-fun uua$ ()B_b_fun$ )
(declare-fun uub$ ()A_a_fun$ )
(declare-fun uuc$ ()A_llist_a_llist_fun$ )
(declare-fun uud$ (B_llist$ )B_llist_llist_b_llist_llist_fun$ )
(declare-fun uue$ (A_llist_llist$ )A_llist_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun uuf$ (B$ )B_llist_b_llist_fun$ )
(declare-fun uug$ (A_llist$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun uuh$ (A$ )A_llist_a_llist_fun$ )
(declare-fun lmap$ (B_a_llist_fun$ )B_llist_a_llist_llist_fun$ )
(declare-fun llast$ (B_llist_llist$ )B_llist$ )
(declare-fun lmap$a (B_a_fun$ )B_llist_a_llist_fun$ )
(declare-fun lmap$b (B_b_fun$ )B_llist_b_llist_fun$ )
(declare-fun lmap$c (A_a_fun$ )A_llist_a_llist_fun$ )
(declare-fun lmap$d (A_llist_a_llist_fun$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun lmap$e (A_b_fun$ )A_llist_b_llist_fun$ )
(declare-fun lmap$f (A_llist_a_fun$ )A_llist_llist_a_llist_fun$ )
(declare-fun lmap$g (A_a_llist_fun$ )A_llist_a_llist_llist_fun$ )
(declare-fun lmap$h (A_llist_b_fun$ )A_llist_llist_b_llist_fun$ )
(declare-fun lmap$i (B_llist_a_llist_fun$ )B_llist_llist_a_llist_llist_fun$ )
(declare-fun lmap$j (B_llist_a_llist_llist_fun$ B_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lmap$k (A_llist_b_llist_fun$ A_llist_llist$ )B_llist_llist$ )
(declare-fun lmap$l (B_llist_b_llist_fun$ B_llist_llist$ )B_llist_llist$ )
(declare-fun lmap$m (A_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lmap$n (A_llist_llist_a_llist_fun$ A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lmap$o (A_llist_llist_b_llist_fun$ A_llist_llist_llist$ )B_llist_llist$ )
(declare-fun lmap$p (B_llist_llist_a_llist_llist_fun$ B_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lmap$q (A_llist_llist_a_llist_llist_fun$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun llast$a (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun llast$b (B_llist$ )B$ )
(declare-fun llast$c (A_llist_llist$ )A_llist$ )
(declare-fun llast$d (A_llist$ )A$ )
(declare-fun fun_app$ (B_a_llist_fun$ B$ )A_llist$ )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun fun_app$a (B_a_fun$ B$ )A$ )
(declare-fun fun_app$b (A_llist_llist_llist_a_llist_llist_llist_fun$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun fun_app$c (B_llist_llist_b_llist_llist_fun$ B_llist_llist$ )B_llist_llist$ )
(declare-fun fun_app$d (A_llist_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun fun_app$e (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$f (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$g (B_b_fun$ B$ )B$ )
(declare-fun fun_app$h (A_a_fun$ A$ )A$ )
(declare-fun fun_app$i (B_llist_a_llist_llist_fun$ B_llist$ )A_llist_llist$ )
(declare-fun fun_app$j (B_llist_a_llist_fun$ B_llist$ )A_llist$ )
(declare-fun fun_app$k (A_llist_b_llist_fun$ A_llist$ )B_llist$ )
(declare-fun fun_app$l (A_llist_llist_a_llist_fun$ A_llist_llist$ )A_llist$ )
(declare-fun fun_app$m (A_llist_a_llist_llist_fun$ A_llist$ )A_llist_llist$ )
(declare-fun fun_app$n (A_llist_llist_b_llist_fun$ A_llist_llist$ )B_llist$ )
(declare-fun fun_app$o (B_llist_llist_a_llist_llist_fun$ B_llist_llist$ )A_llist_llist$ )
(declare-fun fun_app$p (A_b_fun$ A$ )B$ )
(declare-fun fun_app$q (A_a_llist_fun$ A$ )A_llist$ )
(declare-fun fun_app$r (A_llist_a_fun$ A_llist$ )A$ )
(declare-fun fun_app$s (A_llist_b_fun$ A_llist$ )B$ )
(declare-fun fun_app$t (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$u (A_llist_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun fun_app$v (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$w (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$x (A_bool_fun$ A$ )Bool )
(declare-fun lconcat$a (B_llist_llist_llist$ )B_llist_llist$ )
(declare-fun lconcat$b (A_llist_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconcat$c (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun lconcat$d (B_llist_llist$ )B_llist$ )
(declare-fun pred_llist$ (B_llist_bool_fun$ B_llist_llist$ )Bool )
(declare-fun pred_llist$a (A_llist_llist_bool_fun$ A_llist_llist_llist$ )Bool )
(declare-fun pred_llist$b (B_bool_fun$ )B_llist_bool_fun$ )
(declare-fun pred_llist$c (A_llist_bool_fun$ )A_llist_llist_bool_fun$ )
(declare-fun pred_llist$d (A_bool_fun$ )A_llist_bool_fun$ )
(declare-fun finite_lprefix$ (B_llist_llist$ B_llist_llist$ )Bool )
(declare-fun lstrict_prefix$ (B_llist_llist$ B_llist_llist$ )Bool )
(declare-fun finite_lprefix$a (A_llist_llist_llist$ A_llist_llist_llist$ )Bool )
(declare-fun finite_lprefix$b (B_llist$ )B_llist_bool_fun$ )
(declare-fun finite_lprefix$c (A_llist_llist$ )A_llist_llist_bool_fun$ )
(declare-fun finite_lprefix$d (A_llist$ )A_llist_bool_fun$ )
(declare-fun lstrict_prefix$a (A_llist_llist_llist$ A_llist_llist_llist$ )Bool )
(declare-fun lstrict_prefix$b (B_llist$ )B_llist_bool_fun$ )
(declare-fun lstrict_prefix$c (A_llist_llist$ )A_llist_llist_bool_fun$ )
(declare-fun lstrict_prefix$d (A_llist$ )A_llist_bool_fun$ )
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ uu$ ?v0 )(lCons$ (fun_app$a f$ ?v0 )lNil$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (fun_app$b (uue$ ?v0 )?v1 )(lCons$d ?v0 ?v1 )):pattern ((fun_app$b (uue$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist_llist$ ))(! (= (fun_app$c (uud$ ?v0 )?v1 )(lCons$c ?v0 ?v1 )):pattern ((fun_app$c (uud$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (fun_app$d (uug$ ?v0 )?v1 )(lCons$a ?v0 ?v1 )):pattern ((fun_app$d (uug$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (fun_app$e (uuf$ ?v0 )?v1 )(lCons$b ?v0 ?v1 )):pattern ((fun_app$e (uuf$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$f (uuh$ ?v0 )?v1 )(lCons$ ?v0 ?v1 )):pattern ((fun_app$f (uuh$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$f uuc$ ?v0 )?v0 ):pattern ((fun_app$f uuc$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$g uua$ ?v0 )?v0 ):pattern ((fun_app$g uua$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$h uub$ ?v0 )?v0 ):pattern ((fun_app$h uub$ ?v0 )))):named a8 ))
(assert (! (not (= (lconcat$ (fun_app$i (lmap$ uu$ )xs$ ))(fun_app$j (lmap$a f$ )xs$ ))):named a9 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist_llist$ )(?v2 B_llist$ )(?v3 B_llist_llist$ ))(= (= (lCons$c ?v0 ?v1 )(lCons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(= (= (lCons$d ?v0 ?v1 )(lCons$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a11 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 B_llist$ ))(= (fun_app$e (lmap$b uua$ )?v0 )?v0 )):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(= (fun_app$f (lmap$c uub$ )?v0 )?v0 )):named a16 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (fun_app$d (lmap$d uuc$ )?v0 )?v0 )):named a17 ))
(assert (! (= (lconcat$a lNil$e )lNil$c ):named a18 ))
(assert (! (= (lconcat$b lNil$f )lNil$d ):named a19 ))
(assert (! (= (lconcat$c lNil$d )lNil$a ):named a20 ))
(assert (! (= (lconcat$d lNil$c )lNil$b ):named a21 ))
(assert (! (= (lconcat$ lNil$a )lNil$ ):named a22 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= (fun_app$f (lmap$c ?v0 )?v1 )lNil$ )(= ?v1 lNil$ ))):named a23 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= (fun_app$j (lmap$a ?v0 )?v1 )lNil$ )(= ?v1 lNil$b ))):named a24 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_llist$ ))(= (= (fun_app$i (lmap$ ?v0 )?v1 )lNil$a )(= ?v1 lNil$b ))):named a25 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= (fun_app$k (lmap$e ?v0 )?v1 )lNil$b )(= ?v1 lNil$ ))):named a26 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= (fun_app$e (lmap$b ?v0 )?v1 )lNil$b )(= ?v1 lNil$b ))):named a27 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (= (fun_app$l (lmap$f ?v0 )?v1 )lNil$ )(= ?v1 lNil$a ))):named a28 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (= (fun_app$m (lmap$g ?v0 )?v1 )lNil$a )(= ?v1 lNil$ ))):named a29 ))
(assert (! (forall ((?v0 A_llist_b_fun$ )(?v1 A_llist_llist$ ))(= (= (fun_app$n (lmap$h ?v0 )?v1 )lNil$b )(= ?v1 lNil$a ))):named a30 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_llist$ ))(= (= (fun_app$o (lmap$i ?v0 )?v1 )lNil$a )(= ?v1 lNil$c ))):named a31 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist$ ))(= (= (fun_app$d (lmap$d ?v0 )?v1 )lNil$a )(= ?v1 lNil$a ))):named a32 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$f (lmap$c ?v0 )?v1 ))(= ?v1 lNil$ ))):named a33 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ ))(= (= lNil$ (fun_app$j (lmap$a ?v0 )?v1 ))(= ?v1 lNil$b ))):named a34 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_llist$ ))(= (= lNil$a (fun_app$i (lmap$ ?v0 )?v1 ))(= ?v1 lNil$b ))):named a35 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ ))(= (= lNil$b (fun_app$k (lmap$e ?v0 )?v1 ))(= ?v1 lNil$ ))):named a36 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ ))(= (= lNil$b (fun_app$e (lmap$b ?v0 )?v1 ))(= ?v1 lNil$b ))):named a37 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ ))(= (= lNil$ (fun_app$l (lmap$f ?v0 )?v1 ))(= ?v1 lNil$a ))):named a38 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ ))(= (= lNil$a (fun_app$m (lmap$g ?v0 )?v1 ))(= ?v1 lNil$ ))):named a39 ))
(assert (! (forall ((?v0 A_llist_b_fun$ )(?v1 A_llist_llist$ ))(= (= lNil$b (fun_app$n (lmap$h ?v0 )?v1 ))(= ?v1 lNil$a ))):named a40 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_llist$ ))(= (= lNil$a (fun_app$o (lmap$i ?v0 )?v1 ))(= ?v1 lNil$c ))):named a41 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist$ ))(= (= lNil$a (fun_app$d (lmap$d ?v0 )?v1 ))(= ?v1 lNil$a ))):named a42 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (fun_app$j (lmap$a ?v0 )(lCons$b ?v1 ?v2 ))(lCons$ (fun_app$a ?v0 ?v1 )(fun_app$j (lmap$a ?v0 )?v2 ))):pattern ((fun_app$j (lmap$a ?v0 )(lCons$b ?v1 ?v2 ))))):named a43 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$f (lmap$c ?v0 )(lCons$ ?v1 ?v2 ))(lCons$ (fun_app$h ?v0 ?v1 )(fun_app$f (lmap$c ?v0 )?v2 ))):pattern ((fun_app$f (lmap$c ?v0 )(lCons$ ?v1 ?v2 ))))):named a44 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (fun_app$i (lmap$ ?v0 )(lCons$b ?v1 ?v2 ))(lCons$a (fun_app$ ?v0 ?v1 )(fun_app$i (lmap$ ?v0 )?v2 ))):pattern ((fun_app$i (lmap$ ?v0 )(lCons$b ?v1 ?v2 ))))):named a45 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$k (lmap$e ?v0 )(lCons$ ?v1 ?v2 ))(lCons$b (fun_app$p ?v0 ?v1 )(fun_app$k (lmap$e ?v0 )?v2 ))):pattern ((fun_app$k (lmap$e ?v0 )(lCons$ ?v1 ?v2 ))))):named a46 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (fun_app$e (lmap$b ?v0 )(lCons$b ?v1 ?v2 ))(lCons$b (fun_app$g ?v0 ?v1 )(fun_app$e (lmap$b ?v0 )?v2 ))):pattern ((fun_app$e (lmap$b ?v0 )(lCons$b ?v1 ?v2 ))))):named a47 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$m (lmap$g ?v0 )(lCons$ ?v1 ?v2 ))(lCons$a (fun_app$q ?v0 ?v1 )(fun_app$m (lmap$g ?v0 )?v2 ))):pattern ((fun_app$m (lmap$g ?v0 )(lCons$ ?v1 ?v2 ))))):named a48 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (fun_app$l (lmap$f ?v0 )(lCons$a ?v1 ?v2 ))(lCons$ (fun_app$r ?v0 ?v1 )(fun_app$l (lmap$f ?v0 )?v2 ))):pattern ((fun_app$l (lmap$f ?v0 )(lCons$a ?v1 ?v2 ))))):named a49 ))
(assert (! (forall ((?v0 A_llist_b_fun$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (fun_app$n (lmap$h ?v0 )(lCons$a ?v1 ?v2 ))(lCons$b (fun_app$s ?v0 ?v1 )(fun_app$n (lmap$h ?v0 )?v2 ))):pattern ((fun_app$n (lmap$h ?v0 )(lCons$a ?v1 ?v2 ))))):named a50 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist$ )(?v2 B_llist_llist$ ))(! (= (fun_app$o (lmap$i ?v0 )(lCons$c ?v1 ?v2 ))(lCons$a (fun_app$j ?v0 ?v1 )(fun_app$o (lmap$i ?v0 )?v2 ))):pattern ((fun_app$o (lmap$i ?v0 )(lCons$c ?v1 ?v2 ))))):named a51 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (fun_app$d (lmap$d ?v0 )(lCons$a ?v1 ?v2 ))(lCons$a (fun_app$f ?v0 ?v1 )(fun_app$d (lmap$d ?v0 )?v2 ))):pattern ((fun_app$d (lmap$d ?v0 )(lCons$a ?v1 ?v2 ))))):named a52 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (fun_app$j (lmap$a ?v0 )?v1 )(lCons$ ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_llist$ ))(and (= ?v1 (lCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$a ?v0 ?v4 ))(= ?v3 (fun_app$j (lmap$a ?v0 )?v5 ))))))):named a53 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (fun_app$f (lmap$c ?v0 )?v1 )(lCons$ ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_llist$ ))(and (= ?v1 (lCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$h ?v0 ?v4 ))(= ?v3 (fun_app$f (lmap$c ?v0 )?v5 ))))))):named a54 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (fun_app$i (lmap$ ?v0 )?v1 )(lCons$a ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_llist$ ))(and (= ?v1 (lCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$ ?v0 ?v4 ))(= ?v3 (fun_app$i (lmap$ ?v0 )?v5 ))))))):named a55 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (fun_app$k (lmap$e ?v0 )?v1 )(lCons$b ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_llist$ ))(and (= ?v1 (lCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$p ?v0 ?v4 ))(= ?v3 (fun_app$k (lmap$e ?v0 )?v5 ))))))):named a56 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (fun_app$e (lmap$b ?v0 )?v1 )(lCons$b ?v2 ?v3 ))(exists ((?v4 B$ )(?v5 B_llist$ ))(and (= ?v1 (lCons$b ?v4 ?v5 ))(and (= ?v2 (fun_app$g ?v0 ?v4 ))(= ?v3 (fun_app$e (lmap$b ?v0 )?v5 ))))))):named a57 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (fun_app$l (lmap$f ?v0 )?v1 )(lCons$ ?v2 ?v3 ))(exists ((?v4 A_llist$ )(?v5 A_llist_llist$ ))(and (= ?v1 (lCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$r ?v0 ?v4 ))(= ?v3 (fun_app$l (lmap$f ?v0 )?v5 ))))))):named a58 ))
(assert (! (forall ((?v0 A_llist_b_fun$ )(?v1 A_llist_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (fun_app$n (lmap$h ?v0 )?v1 )(lCons$b ?v2 ?v3 ))(exists ((?v4 A_llist$ )(?v5 A_llist_llist$ ))(and (= ?v1 (lCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$s ?v0 ?v4 ))(= ?v3 (fun_app$n (lmap$h ?v0 )?v5 ))))))):named a59 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (fun_app$m (lmap$g ?v0 )?v1 )(lCons$a ?v2 ?v3 ))(exists ((?v4 A$ )(?v5 A_llist$ ))(and (= ?v1 (lCons$ ?v4 ?v5 ))(and (= ?v2 (fun_app$q ?v0 ?v4 ))(= ?v3 (fun_app$m (lmap$g ?v0 )?v5 ))))))):named a60 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (fun_app$o (lmap$i ?v0 )?v1 )(lCons$a ?v2 ?v3 ))(exists ((?v4 B_llist$ )(?v5 B_llist_llist$ ))(and (= ?v1 (lCons$c ?v4 ?v5 ))(and (= ?v2 (fun_app$j ?v0 ?v4 ))(= ?v3 (fun_app$o (lmap$i ?v0 )?v5 ))))))):named a61 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (fun_app$d (lmap$d ?v0 )?v1 )(lCons$a ?v2 ?v3 ))(exists ((?v4 A_llist$ )(?v5 A_llist_llist$ ))(and (= ?v1 (lCons$a ?v4 ?v5 ))(and (= ?v2 (fun_app$f ?v0 ?v4 ))(= ?v3 (fun_app$d (lmap$d ?v0 )?v5 ))))))):named a62 ))
(assert (! (forall ((?v0 B_llist_llist$ ))(= (not (= ?v0 lNil$c ))(exists ((?v1 B_llist$ )(?v2 B_llist_llist$ ))(= ?v0 (lCons$c ?v1 ?v2 ))))):named a63 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(= (not (= ?v0 lNil$d ))(exists ((?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(= ?v0 (lCons$d ?v1 ?v2 ))))):named a64 ))
(assert (! (forall ((?v0 B_llist$ ))(= (not (= ?v0 lNil$b ))(exists ((?v1 B$ )(?v2 B_llist$ ))(= ?v0 (lCons$b ?v1 ?v2 ))))):named a65 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (not (= ?v0 lNil$a ))(exists ((?v1 A_llist$ )(?v2 A_llist_llist$ ))(= ?v0 (lCons$a ?v1 ?v2 ))))):named a66 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (= ?v0 lNil$ ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a67 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_llist_llist$ ))(= (fun_app$f (lmap$c ?v0 )(lconcat$ ?v1 ))(lconcat$ (fun_app$d (lmap$d (lmap$c ?v0 ))?v1 )))):named a68 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_llist_llist$ ))(= (fun_app$j (lmap$a ?v0 )(lconcat$d ?v1 ))(lconcat$ (fun_app$o (lmap$i (lmap$a ?v0 ))?v1 )))):named a69 ))
(assert (! (forall ((?v0 B_a_llist_fun$ )(?v1 B_llist_llist$ ))(= (fun_app$i (lmap$ ?v0 )(lconcat$d ?v1 ))(lconcat$c (lmap$j (lmap$ ?v0 )?v1 )))):named a70 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_llist_llist$ ))(= (fun_app$k (lmap$e ?v0 )(lconcat$ ?v1 ))(lconcat$d (lmap$k (lmap$e ?v0 )?v1 )))):named a71 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_llist_llist$ ))(= (fun_app$e (lmap$b ?v0 )(lconcat$d ?v1 ))(lconcat$d (lmap$l (lmap$b ?v0 )?v1 )))):named a72 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_llist_llist$ ))(= (fun_app$m (lmap$g ?v0 )(lconcat$ ?v1 ))(lconcat$c (lmap$m (lmap$g ?v0 )?v1 )))):named a73 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_llist_llist$ ))(= (fun_app$l (lmap$f ?v0 )(lconcat$c ?v1 ))(lconcat$ (lmap$n (lmap$f ?v0 )?v1 )))):named a74 ))
(assert (! (forall ((?v0 A_llist_b_fun$ )(?v1 A_llist_llist_llist$ ))(= (fun_app$n (lmap$h ?v0 )(lconcat$c ?v1 ))(lconcat$d (lmap$o (lmap$h ?v0 )?v1 )))):named a75 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_llist_llist$ ))(= (fun_app$o (lmap$i ?v0 )(lconcat$a ?v1 ))(lconcat$c (lmap$p (lmap$i ?v0 )?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_llist_llist$ ))(= (fun_app$d (lmap$d ?v0 )(lconcat$c ?v1 ))(lconcat$c (lmap$q (lmap$d ?v0 )?v1 )))):named a77 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$f (lmap$c ?v0 )lNil$ )lNil$ ):pattern ((lmap$c ?v0 )))):named a78 ))
(assert (! (forall ((?v0 B_a_fun$ ))(! (= (fun_app$j (lmap$a ?v0 )lNil$b )lNil$ ):pattern ((lmap$a ?v0 )))):named a79 ))
(assert (! (forall ((?v0 B_a_llist_fun$ ))(! (= (fun_app$i (lmap$ ?v0 )lNil$b )lNil$a ):pattern ((lmap$ ?v0 )))):named a80 ))
(assert (! (forall ((?v0 A_b_fun$ ))(! (= (fun_app$k (lmap$e ?v0 )lNil$ )lNil$b ):pattern ((lmap$e ?v0 )))):named a81 ))
(assert (! (forall ((?v0 B_b_fun$ ))(! (= (fun_app$e (lmap$b ?v0 )lNil$b )lNil$b ):pattern ((lmap$b ?v0 )))):named a82 ))
(assert (! (forall ((?v0 A_a_llist_fun$ ))(! (= (fun_app$m (lmap$g ?v0 )lNil$ )lNil$a ):pattern ((lmap$g ?v0 )))):named a83 ))
(assert (! (forall ((?v0 A_llist_a_fun$ ))(! (= (fun_app$l (lmap$f ?v0 )lNil$a )lNil$ ):pattern ((lmap$f ?v0 )))):named a84 ))
(assert (! (forall ((?v0 A_llist_b_fun$ ))(! (= (fun_app$n (lmap$h ?v0 )lNil$a )lNil$b ):pattern ((lmap$h ?v0 )))):named a85 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ ))(! (= (fun_app$o (lmap$i ?v0 )lNil$c )lNil$a ):pattern ((lmap$i ?v0 )))):named a86 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ ))(! (= (fun_app$d (lmap$d ?v0 )lNil$a )lNil$a ):pattern ((lmap$d ?v0 )))):named a87 ))
(assert (! (forall ((?v0 B_llist_llist$ ))(=> (and (=> (= ?v0 lNil$c )false )(forall ((?v1 B_llist$ )(?v2 B_llist_llist$ ))(=> (= ?v0 (lCons$c ?v1 ?v2 ))false )))false )):named a88 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(=> (and (=> (= ?v0 lNil$d )false )(forall ((?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(=> (= ?v0 (lCons$d ?v1 ?v2 ))false )))false )):named a89 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (and (=> (= ?v0 lNil$b )false )(forall ((?v1 B$ )(?v2 B_llist$ ))(=> (= ?v0 (lCons$b ?v1 ?v2 ))false )))false )):named a90 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (and (=> (= ?v0 lNil$a )false )(forall ((?v1 A_llist$ )(?v2 A_llist_llist$ ))(=> (= ?v0 (lCons$a ?v1 ?v2 ))false )))false )):named a91 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(forall ((?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))false )))false )):named a92 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist_llist$ ))(not (= lNil$c (lCons$c ?v0 ?v1 )))):named a93 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(not (= lNil$d (lCons$d ?v0 ?v1 )))):named a94 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(not (= lNil$b (lCons$b ?v0 ?v1 )))):named a95 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(not (= lNil$a (lCons$a ?v0 ?v1 )))):named a96 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(not (= lNil$ (lCons$ ?v0 ?v1 )))):named a97 ))
(assert (! (forall ((?v0 B_llist_llist$ )(?v1 B_llist$ )(?v2 B_llist_llist$ ))(= (finite_lprefix$ ?v0 (lCons$c ?v1 ?v2 ))(or (= ?v0 lNil$c )(exists ((?v3 B_llist_llist$ ))(and (= ?v0 (lCons$c ?v1 ?v3 ))(finite_lprefix$ ?v3 ?v2 )))))):named a98 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(= (finite_lprefix$a ?v0 (lCons$d ?v1 ?v2 ))(or (= ?v0 lNil$d )(exists ((?v3 A_llist_llist_llist$ ))(and (= ?v0 (lCons$d ?v1 ?v3 ))(finite_lprefix$a ?v3 ?v2 )))))):named a99 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B$ )(?v2 B_llist$ ))(= (fun_app$t (finite_lprefix$b ?v0 )(lCons$b ?v1 ?v2 ))(or (= ?v0 lNil$b )(exists ((?v3 B_llist$ ))(and (= ?v0 (lCons$b ?v1 ?v3 ))(fun_app$t (finite_lprefix$b ?v3 )?v2 )))))):named a100 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(= (fun_app$u (finite_lprefix$c ?v0 )(lCons$a ?v1 ?v2 ))(or (= ?v0 lNil$a )(exists ((?v3 A_llist_llist$ ))(and (= ?v0 (lCons$a ?v1 ?v3 ))(fun_app$u (finite_lprefix$c ?v3 )?v2 )))))):named a101 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(= (fun_app$v (finite_lprefix$d ?v0 )(lCons$ ?v1 ?v2 ))(or (= ?v0 lNil$ )(exists ((?v3 A_llist$ ))(and (= ?v0 (lCons$ ?v1 ?v3 ))(fun_app$v (finite_lprefix$d ?v3 )?v2 )))))):named a102 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist_llist$ ))(! (= (lstrict_prefix$ lNil$c (lCons$c ?v0 ?v1 ))true ):pattern ((lCons$c ?v0 ?v1 )))):named a103 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lstrict_prefix$a lNil$d (lCons$d ?v0 ?v1 ))true ):pattern ((lCons$d ?v0 ?v1 )))):named a104 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (fun_app$t (lstrict_prefix$b lNil$b )(lCons$b ?v0 ?v1 ))true ):pattern ((lCons$b ?v0 ?v1 )))):named a105 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (fun_app$u (lstrict_prefix$c lNil$a )(lCons$a ?v0 ?v1 ))true ):pattern ((lCons$a ?v0 ?v1 )))):named a106 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$v (lstrict_prefix$d lNil$ )(lCons$ ?v0 ?v1 ))true ):pattern ((lCons$ ?v0 ?v1 )))):named a107 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist_llist$ ))(! (= (lstrict_prefix$ (lCons$c ?v0 ?v1 )lNil$c )false ):pattern ((lCons$c ?v0 ?v1 )))):named a108 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(! (= (lstrict_prefix$a (lCons$d ?v0 ?v1 )lNil$d )false ):pattern ((lCons$d ?v0 ?v1 )))):named a109 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (fun_app$t (lstrict_prefix$b (lCons$b ?v0 ?v1 ))lNil$b )false ):pattern ((lCons$b ?v0 ?v1 )))):named a110 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (fun_app$u (lstrict_prefix$c (lCons$a ?v0 ?v1 ))lNil$a )false ):pattern ((lCons$a ?v0 ?v1 )))):named a111 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$v (lstrict_prefix$d (lCons$ ?v0 ?v1 ))lNil$ )false ):pattern ((lCons$ ?v0 ?v1 )))):named a112 ))
(assert (! (forall ((?v0 B_llist_bool_fun$ )(?v1 B_llist$ )(?v2 B_llist_llist$ ))(! (= (pred_llist$ ?v0 (lCons$c ?v1 ?v2 ))(and (fun_app$t ?v0 ?v1 )(pred_llist$ ?v0 ?v2 ))):pattern ((pred_llist$ ?v0 (lCons$c ?v1 ?v2 ))))):named a113 ))
(assert (! (forall ((?v0 A_llist_llist_bool_fun$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (pred_llist$a ?v0 (lCons$d ?v1 ?v2 ))(and (fun_app$u ?v0 ?v1 )(pred_llist$a ?v0 ?v2 ))):pattern ((pred_llist$a ?v0 (lCons$d ?v1 ?v2 ))))):named a114 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (fun_app$t (pred_llist$b ?v0 )(lCons$b ?v1 ?v2 ))(and (fun_app$w ?v0 ?v1 )(fun_app$t (pred_llist$b ?v0 )?v2 ))):pattern ((fun_app$t (pred_llist$b ?v0 )(lCons$b ?v1 ?v2 ))))):named a115 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (fun_app$u (pred_llist$c ?v0 )(lCons$a ?v1 ?v2 ))(and (fun_app$v ?v0 ?v1 )(fun_app$u (pred_llist$c ?v0 )?v2 ))):pattern ((fun_app$u (pred_llist$c ?v0 )(lCons$a ?v1 ?v2 ))))):named a116 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$v (pred_llist$d ?v0 )(lCons$ ?v1 ?v2 ))(and (fun_app$x ?v0 ?v1 )(fun_app$v (pred_llist$d ?v0 )?v2 ))):pattern ((fun_app$v (pred_llist$d ?v0 )(lCons$ ?v1 ?v2 ))))):named a117 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (llast$ (lCons$c ?v0 lNil$c ))?v0 ):pattern ((uud$ ?v0 )))):named a118 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (llast$a (lCons$d ?v0 lNil$d ))?v0 ):pattern ((uue$ ?v0 )))):named a119 ))
(assert (! (forall ((?v0 B$ ))(! (= (llast$b (lCons$b ?v0 lNil$b ))?v0 ):pattern ((uuf$ ?v0 )))):named a120 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (llast$c (lCons$a ?v0 lNil$a ))?v0 ):pattern ((uug$ ?v0 )))):named a121 ))
(assert (! (forall ((?v0 A$ ))(! (= (llast$d (lCons$ ?v0 lNil$ ))?v0 ):pattern ((uuh$ ?v0 )))):named a122 ))
(check-sat )
;(get-unsat-core )
