;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-codatatypes ()((B_llist$ (lNil$ )(lCons$ (lhd$ B$ )(ltl$ B_llist$ )))(A_llist$ (lNil$a )(lCons$a (lhd$a A$ )(ltl$a A_llist$ )))))
(declare-fun f$ ()A_b_fun$ )
(declare-fun g$ ()A_b_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun lmap$ (A_b_fun$ A_llist$ )B_llist$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_b_fun$ A$ )B$ )
(declare-fun less_eq$ (B$ B$ )Bool )
(declare-fun fun_app$a (B_b_fun$ B$ )B$ )
(declare-fun llistsum$ (B_llist$ )B$ )
(assert (! (not (less_eq$ (llistsum$ (lmap$ f$ xs$ ))(llistsum$ (lmap$ g$ xs$ )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 (lset$ xs$ ))(less_eq$ (fun_app$ f$ ?v0 )(fun_app$ g$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 B$ ))(less_eq$ ?v0 ?v0 )):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ )(?v3 A_b_fun$ ))(=> (and (forall ((?v4 A$ )(?v5 A$ ))(=> (and (member$ ?v4 (lset$ ?v0 ))(and (member$ ?v5 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v5 ))))(= ?v4 ?v5 )))(= (lmap$ ?v2 ?v0 )(lmap$ ?v3 ?v1 )))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_fun$ )(?v2 A_b_fun$ ))(=> (forall ((?v3 A$ ))(=> (member$ ?v3 (lset$ ?v0 ))(= (fun_app$ ?v1 ?v3 )(fun_app$ ?v2 ?v3 ))))(= (lmap$ ?v1 ?v0 )(lmap$ ?v2 ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_b_fun$ )(?v3 A_b_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (lmap$ ?v2 ?v0 )(lmap$ ?v3 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(= (= ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 )))):named a6 ))
(assert (! (forall ((?v0 B$ )(?v1 B_b_fun$ )(?v2 B$ )(?v3 B$ ))(=> (and (= ?v0 (fun_app$a ?v1 ?v2 ))(and (less_eq$ ?v2 ?v3 )(forall ((?v4 B$ )(?v5 B$ ))(=> (less_eq$ ?v4 ?v5 )(less_eq$ (fun_app$a ?v1 ?v4 )(fun_app$a ?v1 ?v5 ))))))(less_eq$ ?v0 (fun_app$a ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B$ ))(=> (and (= ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(less_eq$ ?v0 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(=> (= ?v0 ?v1 )(less_eq$ ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 B$ ))(less_eq$ ?v0 ?v0 )):named a10 ))
(check-sat )
;(get-unsat-core )
