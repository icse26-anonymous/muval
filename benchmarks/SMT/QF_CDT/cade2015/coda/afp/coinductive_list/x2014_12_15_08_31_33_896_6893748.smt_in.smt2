;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_a_llist_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun uu$ (A_llist$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun uua$ (A$ )A_llist_a_llist_fun$ )
(declare-fun ldrop$ (Enat$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun ldrop$a (Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (A_llist_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lconcat$ ()A_llist_llist_a_llist_fun$ )
(declare-fun lfilter$ (A_llist_bool_fun$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun lprefix$ ()A_llist_llist_a_llist_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_llist_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun fun_app$c (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist$ )A_llist_llist_bool_fun$ )
(declare-fun fun_app$d (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$e (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$f (A_llist_llist_a_llist_fun$ A_llist_llist$ )A_llist$ )
(declare-fun lfilter$a (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun lprefix$a ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun monotone$ (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_llist_a_llist_fun$ )Bool )
(declare-fun monotone$a (A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist_a_llist_llist_bool_fun_fun$ A_llist_llist_a_llist_llist_fun$ )Bool )
(declare-fun monotone$b (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun ldropWhile$ (A_llist_bool_fun$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun ltakeWhile$ (A_llist_bool_fun$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun ldropWhile$a (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun ltakeWhile$a (A_bool_fun$ )A_llist_a_llist_fun$ )
(declare-fun finite_lprefix$ ()A_llist_llist_a_llist_llist_bool_fun_fun$ )
(declare-fun finite_lprefix$a ()A_llist_a_llist_bool_fun_fun$ )
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(lCons$a ?v0 ?v1 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$a (uua$ ?v0 )?v1 )(lCons$ ?v0 ?v1 )):pattern ((fun_app$a (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (not (monotone$ lprefix$ lprefix$a lconcat$ )):named a2 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v0 )):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$d (fun_app$e lprefix$a ?v0 )?v0 )):named a4 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$d (fun_app$e lprefix$a ?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_fun$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_a_llist_llist_fun$ )(?v4 A_llist_llist_a_llist_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_llist_llist$ ))(= (fun_app$ ?v0 ?v5 )(ite (fun_app$b (fun_app$c lprefix$ ?v5 )?v1 )?v2 (fun_app$ ?v3 ?v5 ))))(and (forall ((?v5 A_llist_llist$ )(?v6 A_llist_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v5 )?v6 )(not (fun_app$b (fun_app$c lprefix$ ?v5 )?v1 )))(fun_app$b (fun_app$c ?v4 (fun_app$ ?v3 ?v5 ))(fun_app$ ?v3 ?v6 ))))(and (forall ((?v5 A_llist_llist$ ))(=> (not (fun_app$b (fun_app$c lprefix$ ?v5 )?v1 ))(fun_app$b (fun_app$c ?v4 ?v2 )(fun_app$ ?v3 ?v5 ))))(fun_app$b (fun_app$c ?v4 ?v2 )?v2 ))))(monotone$a lprefix$ ?v4 ?v0 ))):named a7 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_llist$ ))(= (fun_app$a ?v0 ?v5 )(ite (fun_app$d (fun_app$e lprefix$a ?v5 )?v1 )?v2 (fun_app$a ?v3 ?v5 ))))(and (forall ((?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (fun_app$d (fun_app$e lprefix$a ?v5 )?v6 )(not (fun_app$d (fun_app$e lprefix$a ?v5 )?v1 )))(fun_app$d (fun_app$e ?v4 (fun_app$a ?v3 ?v5 ))(fun_app$a ?v3 ?v6 ))))(and (forall ((?v5 A_llist$ ))(=> (not (fun_app$d (fun_app$e lprefix$a ?v5 )?v1 ))(fun_app$d (fun_app$e ?v4 ?v2 )(fun_app$a ?v3 ?v5 ))))(fun_app$d (fun_app$e ?v4 ?v2 )?v2 ))))(monotone$b lprefix$a ?v4 ?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_fun$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_llist_llist$ ))(= (fun_app$f ?v0 ?v5 )(ite (fun_app$b (fun_app$c lprefix$ ?v5 )?v1 )?v2 (fun_app$f ?v3 ?v5 ))))(and (forall ((?v5 A_llist_llist$ )(?v6 A_llist_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v5 )?v6 )(not (fun_app$b (fun_app$c lprefix$ ?v5 )?v1 )))(fun_app$d (fun_app$e ?v4 (fun_app$f ?v3 ?v5 ))(fun_app$f ?v3 ?v6 ))))(and (forall ((?v5 A_llist_llist$ ))(=> (not (fun_app$b (fun_app$c lprefix$ ?v5 )?v1 ))(fun_app$d (fun_app$e ?v4 ?v2 )(fun_app$f ?v3 ?v5 ))))(fun_app$d (fun_app$e ?v4 ?v2 )?v2 ))))(monotone$ lprefix$ ?v4 ?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$d (fun_app$e lprefix$a ?v0 )?v1 )(fun_app$d (fun_app$e lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$d (fun_app$e lprefix$a ?v0 )?v1 )(fun_app$d (fun_app$e lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v2 )?v1 ))(or (fun_app$b (fun_app$c lprefix$ ?v0 )?v2 )(fun_app$b (fun_app$c lprefix$ ?v2 )?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$d (fun_app$e lprefix$a ?v0 )?v1 )(fun_app$d (fun_app$e lprefix$a ?v2 )?v1 ))(or (fun_app$d (fun_app$e lprefix$a ?v0 )?v2 )(fun_app$d (fun_app$e lprefix$a ?v2 )?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v1 )?v2 ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v2 ))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$d (fun_app$e lprefix$a ?v0 )?v1 )(fun_app$d (fun_app$e lprefix$a ?v1 )?v2 ))(fun_app$d (fun_app$e lprefix$a ?v0 )?v2 ))):named a17 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(=> (and (fun_app$b (fun_app$c lprefix$ ?v0 )?v1 )(fun_app$b (fun_app$c lprefix$ ?v1 )?v2 ))(fun_app$b (fun_app$c lprefix$ ?v0 )?v2 ))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$d (fun_app$e lprefix$a ?v0 )?v1 )(fun_app$d (fun_app$e lprefix$a ?v1 )?v2 ))(fun_app$d (fun_app$e lprefix$a ?v0 )?v2 ))):named a19 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ ))(= (monotone$b ?v0 ?v1 ?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(fun_app$d (fun_app$e ?v1 (fun_app$a ?v2 ?v3 ))(fun_app$a ?v2 ?v4 )))))):named a20 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$ )(?v1 A_llist_llist_a_llist_llist_bool_fun_fun$ )(?v2 A_llist_llist_a_llist_llist_fun$ ))(= (monotone$a ?v0 ?v1 ?v2 )(forall ((?v3 A_llist_llist$ )(?v4 A_llist_llist$ ))(=> (fun_app$b (fun_app$c ?v0 ?v3 )?v4 )(fun_app$b (fun_app$c ?v1 (fun_app$ ?v2 ?v3 ))(fun_app$ ?v2 ?v4 )))))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_llist_a_llist_fun$ ))(= (monotone$ ?v0 ?v1 ?v2 )(forall ((?v3 A_llist_llist$ )(?v4 A_llist_llist$ ))(=> (fun_app$b (fun_app$c ?v0 ?v3 )?v4 )(fun_app$d (fun_app$e ?v1 (fun_app$f ?v2 ?v3 ))(fun_app$f ?v2 ?v4 )))))):named a22 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ ))(=> (forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$d (fun_app$e ?v0 ?v3 )?v4 )(fun_app$d (fun_app$e ?v1 (fun_app$a ?v2 ?v3 ))(fun_app$a ?v2 ?v4 ))))(monotone$b ?v0 ?v1 ?v2 ))):named a23 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$ )(?v1 A_llist_llist_a_llist_llist_bool_fun_fun$ )(?v2 A_llist_llist_a_llist_llist_fun$ ))(=> (forall ((?v3 A_llist_llist$ )(?v4 A_llist_llist$ ))(=> (fun_app$b (fun_app$c ?v0 ?v3 )?v4 )(fun_app$b (fun_app$c ?v1 (fun_app$ ?v2 ?v3 ))(fun_app$ ?v2 ?v4 ))))(monotone$a ?v0 ?v1 ?v2 ))):named a24 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_llist_a_llist_fun$ ))(=> (forall ((?v3 A_llist_llist$ )(?v4 A_llist_llist$ ))(=> (fun_app$b (fun_app$c ?v0 ?v3 )?v4 )(fun_app$d (fun_app$e ?v1 (fun_app$f ?v2 ?v3 ))(fun_app$f ?v2 ?v4 ))))(monotone$ ?v0 ?v1 ?v2 ))):named a25 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (and (monotone$b ?v0 ?v1 ?v2 )(fun_app$d (fun_app$e ?v0 ?v3 )?v4 ))(fun_app$d (fun_app$e ?v1 (fun_app$a ?v2 ?v3 ))(fun_app$a ?v2 ?v4 )))):named a26 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$ )(?v1 A_llist_llist_a_llist_llist_bool_fun_fun$ )(?v2 A_llist_llist_a_llist_llist_fun$ )(?v3 A_llist_llist$ )(?v4 A_llist_llist$ ))(=> (and (monotone$a ?v0 ?v1 ?v2 )(fun_app$b (fun_app$c ?v0 ?v3 )?v4 ))(fun_app$b (fun_app$c ?v1 (fun_app$ ?v2 ?v3 ))(fun_app$ ?v2 ?v4 )))):named a27 ))
(assert (! (forall ((?v0 A_llist_llist_a_llist_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_llist_a_llist_fun$ )(?v3 A_llist_llist$ )(?v4 A_llist_llist$ ))(=> (and (monotone$ ?v0 ?v1 ?v2 )(fun_app$b (fun_app$c ?v0 ?v3 )?v4 ))(fun_app$d (fun_app$e ?v1 (fun_app$f ?v2 ?v3 ))(fun_app$f ?v2 ?v4 )))):named a28 ))
(assert (! (= finite_lprefix$ lprefix$ ):named a29 ))
(assert (! (= finite_lprefix$a lprefix$a ):named a30 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(monotone$a lprefix$ lprefix$ (ldropWhile$ ?v0 ))):named a31 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(monotone$b lprefix$a lprefix$a (ldropWhile$a ?v0 ))):named a32 ))
(assert (! (forall ((?v0 Enat$ ))(monotone$a lprefix$ lprefix$ (ldrop$ ?v0 ))):named a33 ))
(assert (! (forall ((?v0 Enat$ ))(monotone$b lprefix$a lprefix$a (ldrop$a ?v0 ))):named a34 ))
(assert (! (forall ((?v0 A_llist$ ))(monotone$a lprefix$ lprefix$ (uu$ ?v0 ))):named a35 ))
(assert (! (forall ((?v0 A$ ))(monotone$b lprefix$a lprefix$a (uua$ ?v0 ))):named a36 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(monotone$a lprefix$ lprefix$ (lfilter$ ?v0 ))):named a37 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(monotone$b lprefix$a lprefix$a (lfilter$a ?v0 ))):named a38 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(monotone$a lprefix$ lprefix$ (ltakeWhile$ ?v0 ))):named a39 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(monotone$b lprefix$a lprefix$a (ltakeWhile$a ?v0 ))):named a40 ))
(check-sat )
;(get-unsat-core )
