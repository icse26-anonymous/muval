;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))))
(declare-sort A_llist_list$ 0)
(declare-fun nil$ ()A_llist_list$)
(declare-fun hd$ (A_llist_list$)A_llist$)
(declare-fun tl$ (A_llist_list$)A_llist_list$)
(declare-fun cons$ (A_llist$ A_llist_list$ )A_llist_list$)
(declare-fun x$ ()A$ )
(declare-fun y$ ()A$ )
(declare-fun us$ ()A_llist_llist$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun y$a ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun xss$ ()A_llist_llist$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun lconcat$ (A_llist_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist_llist$ )Bool )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun llist_of$ (A_llist_list$ )A_llist_llist$ )
(assert (! (not (= y$ x$ )):named a0 ))
(assert (! (not (lnull$ y$a )):named a1 ))
(assert (! (= y$a (lCons$ y$ ys$ )):named a2 ))
(assert (! (= (lconcat$ xss$ )(lCons$ x$ xs$ )):named a3 ))
(assert (! (lfinite$ us$ ):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (or (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a5 ))
(assert (! (forall ((?v0 A_llist_set$ ))(=> (and (=> (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 )))false )(=> (not (forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(lnull$ ?v1 ))))false ))false )):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (=> (and (lnull$ ?v0 )(lnull$ ?v1 ))false )(=> (or (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))false ))false )):named a7 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a8 ))
(assert (! (=> (forall ((?v0 A_llist_list$ ))(=> (= us$ (llist_of$ ?v0 ))false ))false ):named a9 ))
(assert (! (not (lnull$ (lconcat$ xss$ ))):named a10 ))
(assert (! (lnull$ (lconcat$ us$ )):named a11 ))
(assert (! (=> (forall ((?v0 A$ )(?v1 A_llist$ ))(=> (= y$a (lCons$ ?v0 ?v1 ))false ))false ):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_list$ )(?v1 A_llist_list$ ))(= (= (llist_of$ ?v0 )(llist_of$ ?v1 ))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lfinite$ (lCons$a ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$a (lCons$ ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(! (= (lfinite$ (lCons$a ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$a (lCons$ ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a19 ))
(check-sat )
;(get-unsat-core )
