;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Enat_set$ 0 )
(declare-sort Nat_enat_fun$ 0 )
(declare-sort Enat_bool_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort Enat_set_enat_fun$ 0 )
(declare-sort Enat_enat_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun uu$ ()Enat_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun sup$ ()Enat_set_enat_fun$ )
(declare-fun top$ ()Nat_set$ )
(declare-fun enat$ ()Nat_enat_fun$ )
(declare-fun image$ (Nat_enat_fun$ Nat_set$ )Enat_set$ )
(declare-fun lnull$ (A_llist$ )Bool )
(declare-fun ltake$ (Enat$ A_llist$ )A_llist$ )
(declare-fun transp$ (A_llist_a_llist_bool_fun_fun$ )Bool )
(declare-fun fun_app$ (Enat_bool_fun$ Enat$ )Bool )
(declare-fun less_eq$ ()Enat_enat_bool_fun_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$b (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$c (Enat_set_enat_fun$ Enat_set$ )Enat$ )
(declare-fun fun_app$d (Nat_enat_fun$ Nat$ )Enat$ )
(declare-fun admissible$ (Enat_set_enat_fun$ Enat_enat_bool_fun_fun$ Enat_bool_fun$ )Bool )
(declare-fun lstrict_prefix$ (A_llist$ A_llist$ )Bool )
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$a (fun_app$b lprefix$ (ltake$ ?v0 xs$ ))(ltake$ ?v0 ys$ ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (fun_app$a (fun_app$b lprefix$ xs$ )ys$ )):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$a (fun_app$b lprefix$ ?v0 )?v0 )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$a (fun_app$b lprefix$ ?v0 )?v0 )):named a3 ))
(assert (! (fun_app$a (fun_app$b lprefix$ (ltake$ (fun_app$c sup$ (image$ enat$ top$ ))xs$ ))(ltake$ (fun_app$c sup$ (image$ enat$ top$ ))ys$ )):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$a (fun_app$b lprefix$ (ltake$ (fun_app$d enat$ ?v0 )xs$ ))(ltake$ (fun_app$d enat$ ?v0 )ys$ ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$a (fun_app$b lprefix$ ?v0 )?v1 )(fun_app$a (fun_app$b lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$a (fun_app$b lprefix$ ?v0 )?v1 )(fun_app$a (fun_app$b lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$a (fun_app$b lprefix$ ?v0 )?v1 )(fun_app$a (fun_app$b lprefix$ ?v2 )?v1 ))(or (fun_app$a (fun_app$b lprefix$ ?v0 )?v2 )(fun_app$a (fun_app$b lprefix$ ?v2 )?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$a (fun_app$b lprefix$ ?v0 )?v1 )(fun_app$a (fun_app$b lprefix$ ?v1 )?v2 ))(fun_app$a (fun_app$b lprefix$ ?v0 )?v2 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$a (fun_app$b lprefix$ ?v0 )?v1 )(fun_app$a (fun_app$b lprefix$ ?v1 )?v2 ))(fun_app$a (fun_app$b lprefix$ ?v0 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(fun_app$a (fun_app$b lprefix$ (ltake$ ?v0 ?v1 ))?v1 )):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (lstrict_prefix$ ?v0 ?v1 )(and (fun_app$a (fun_app$b lprefix$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((lstrict_prefix$ ?v0 ?v1 )))):named a12 ))
(assert (! (admissible$ sup$ less_eq$ uu$ ):named a13 ))
(assert (! (transp$ lprefix$ ):named a14 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (fun_app$b lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$a (fun_app$b lprefix$ lNil$ )?v0 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (fun_app$a (fun_app$b lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$a (fun_app$b lprefix$ ?v1 )?v3 ))):pattern ((fun_app$a (fun_app$b lprefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$a (fun_app$b lprefix$ lNil$ )?v0 )):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$a (fun_app$b lprefix$ ?v0 )?v1 )(not (lnull$ ?v0 )))(not (lnull$ ?v1 )))):named a18 ))
(check-sat )
;(get-unsat-core )
