;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_enat_fun$ 0 )
(declare-sort B_llist_enat_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(B_llist$ (lNil$a )(lCons$a (lhd$a B$ )(ltl$a B_llist$ )))))
(declare-fun p$ ()A_b_bool_fun_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun min$ (Enat$ Enat$ )Enat$ )
(declare-fun xs$a ()A_llist$ )
(declare-fun llcp$ (A_llist$ )A_llist_enat_fun$ )
(declare-fun plus$ (Enat$ Enat$ )Enat$ )
(declare-fun llcp$a (B_llist$ )B_llist_enat_fun$ )
(declare-fun ltake$ (Enat$ )B_llist_b_llist_fun$ )
(declare-fun ltake$a (Enat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun less_eq$ (Enat$ Enat$ )Bool )
(declare-fun llength$ (A_llist$ )Enat$ )
(declare-fun lprefix$ (A_llist$ A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (A_llist_enat_fun$ A_llist$ )Enat$ )
(declare-fun fun_app$c (B_llist_enat_fun$ B_llist$ )Enat$ )
(declare-fun lappend$a (B_llist$ )B_llist_b_llist_fun$ )
(declare-fun llength$a (B_llist$ )Enat$ )
(declare-fun lprefix$a (B_llist$ B_llist$ )Bool )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(assert (! (not (= (llength$ xs$ )(llength$a (fun_app$ (ltake$ (llength$ xs$ ))ys$ )))):named a0 ))
(assert (! (less_eq$ (llength$ xs$ )(llength$a ys$ )):named a1 ))
(assert (! (less_eq$ (llength$ xs$a )(llength$a ys$ )):named a2 ))
(assert (! (= (plus$ (llength$ xs$ )(llength$ xs$a ))(llength$a ys$ )):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$ ?v0 )?v1 )(= (fun_app$a (ltake$a ?v1 )?v0 )?v0 )):pattern ((fun_app$a (ltake$a ?v1 )?v0 )))):named a4 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Enat$ ))(! (=> (less_eq$ (llength$a ?v0 )?v1 )(= (fun_app$ (ltake$ ?v1 )?v0 )?v0 )):pattern ((fun_app$ (ltake$ ?v1 )?v0 )))):named a5 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 Enat$ ))(=> (and (= (fun_app$a (ltake$a ?v0 )?v1 )(fun_app$a (ltake$a ?v0 )?v2 ))(less_eq$ ?v3 ?v0 ))(= (fun_app$a (ltake$a ?v3 )?v1 )(fun_app$a (ltake$a ?v3 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 Enat$ ))(=> (and (= (fun_app$ (ltake$ ?v0 )?v1 )(fun_app$ (ltake$ ?v0 )?v2 ))(less_eq$ ?v3 ?v0 ))(= (fun_app$ (ltake$ ?v3 )?v1 )(fun_app$ (ltake$ ?v3 )?v2 )))):named a7 ))
(assert (! (llist_all2$ p$ (fun_app$a (lappend$ xs$ )xs$a )ys$ ):named a8 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(= (llength$ (fun_app$a (ltake$a ?v0 )?v1 ))(min$ ?v0 (llength$ ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(= (llength$a (fun_app$ (ltake$ ?v0 )?v1 ))(min$ ?v0 (llength$a ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (llcp$ ?v0 )?v0 )(llength$ ?v0 )):pattern ((llcp$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$c (llcp$a ?v0 )?v0 )(llength$a ?v0 )):pattern ((llcp$a ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 Enat$ ))(= (lprefix$ (fun_app$a (ltake$a ?v0 )?v1 )(fun_app$a (ltake$a ?v2 )?v1 ))(or (less_eq$ ?v0 ?v2 )(less_eq$ (llength$ ?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 Enat$ ))(= (lprefix$a (fun_app$ (ltake$ ?v0 )?v1 )(fun_app$ (ltake$ ?v2 )?v1 ))(or (less_eq$ ?v0 ?v2 )(less_eq$ (llength$a ?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (less_eq$ ?v0 (llength$ ?v1 ))(= (fun_app$a (ltake$a ?v0 )(fun_app$a (lappend$ ?v1 )?v2 ))(fun_app$a (ltake$a ?v0 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (less_eq$ ?v0 (llength$a ?v1 ))(= (fun_app$ (ltake$ ?v0 )(fun_app$ (lappend$a ?v1 )?v2 ))(fun_app$ (ltake$ ?v0 )?v1 )))):named a16 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$a (ltake$a ?v0 )lNil$ )lNil$ ):pattern ((ltake$a ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Enat$ ))(! (= (fun_app$ (ltake$ ?v0 )lNil$a )lNil$a ):pattern ((ltake$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(lprefix$ (fun_app$a (ltake$a ?v0 )?v1 )?v1 )):named a19 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(lprefix$a (fun_app$ (ltake$ ?v0 )?v1 )?v1 )):named a20 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 A_llist$ ))(= (fun_app$a (ltake$a ?v0 )(fun_app$a (ltake$a ?v1 )?v2 ))(fun_app$a (ltake$a (min$ ?v0 ?v1 ))?v2 ))):named a21 ))
(assert (! (forall ((?v0 Enat$ )(?v1 Enat$ )(?v2 B_llist$ ))(= (fun_app$ (ltake$ ?v0 )(fun_app$ (ltake$ ?v1 )?v2 ))(fun_app$ (ltake$ (min$ ?v0 ?v1 ))?v2 ))):named a22 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a23 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a24 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$a ?v0 ?v0 )):named a25 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$ ?v0 ?v0 )):named a26 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (lprefix$a lNil$a ?v0 )true ):pattern ((lprefix$a lNil$a ?v0 )))):named a27 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$ lNil$ ?v0 )true ):pattern ((lprefix$ lNil$ ?v0 )))):named a28 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$ (lappend$a ?v0 )lNil$a )?v0 ):pattern ((lappend$a ?v0 )))):named a29 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a30 ))
(check-sat )
;(get-unsat-core )
