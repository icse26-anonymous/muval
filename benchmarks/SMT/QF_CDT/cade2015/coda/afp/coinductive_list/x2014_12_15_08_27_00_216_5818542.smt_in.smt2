;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_a_a_prod_llist_fun$ 0 )
(declare-sort A_llist_b_a_prod_llist_fun$ 0 )
(declare-sort B_llist_a_b_prod_llist_fun$ 0 )
(declare-sort B_llist_b_b_prod_llist_fun$ 0 )
(declare-sort A_b_prod_llist_a_a_b_prod_prod_llist_fun$ 0 )
(declare-sort A_b_prod_llist_b_a_b_prod_prod_llist_fun$ 0 )
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-codatatypes ()((A_b_prod_llist$ (lNil$ )(lCons$ (lhd$ A_b_prod$ )(ltl$ A_b_prod_llist$ )))(A_llist$ (lNil$a )(lCons$a (lhd$a A$ )(ltl$a A_llist$ )))(B_llist$ (lNil$b )(lCons$b (lhd$b B$ )(ltl$b B_llist$ )))))
(declare-sort B_a_b_prod_prod$ 0)
(declare-fun fst$a (B_a_b_prod_prod$)B$)
(declare-fun snd$a (B_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$a (B$ A_b_prod$ )B_a_b_prod_prod$)
(declare-codatatypes ()((B_a_b_prod_prod_llist$ (lNil$c )(lCons$c (lhd$c B_a_b_prod_prod$ )(ltl$c B_a_b_prod_prod_llist$ )))))
(declare-sort B_b_prod$ 0)
(declare-fun fst$b (B_b_prod$)B$)
(declare-fun snd$b (B_b_prod$)B$)
(declare-fun pair$b (B$ B$ )B_b_prod$)
(declare-codatatypes ()((B_b_prod_llist$ (lNil$d )(lCons$d (lhd$d B_b_prod$ )(ltl$d B_b_prod_llist$ )))))
(declare-sort B_a_prod$ 0)
(declare-fun fst$c (B_a_prod$)B$)
(declare-fun snd$c (B_a_prod$)A$)
(declare-fun pair$c (B$ A$ )B_a_prod$)
(declare-codatatypes ()((B_a_prod_llist$ (lNil$e )(lCons$e (lhd$e B_a_prod$ )(ltl$e B_a_prod_llist$ )))))
(declare-sort A_a_b_prod_prod$ 0)
(declare-fun fst$d (A_a_b_prod_prod$)A$)
(declare-fun snd$d (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$d (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-codatatypes ()((A_a_b_prod_prod_llist$ (lNil$f )(lCons$f (lhd$f A_a_b_prod_prod$ )(ltl$f A_a_b_prod_prod_llist$ )))))
(declare-sort A_a_prod$ 0)
(declare-fun fst$e (A_a_prod$)A$)
(declare-fun snd$e (A_a_prod$)A$)
(declare-fun pair$e (A$ A$ )A_a_prod$)
(declare-codatatypes ()((A_a_prod_llist$ (lNil$g )(lCons$g (lhd$g A_a_prod$ )(ltl$g A_a_prod_llist$ )))))
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-sort B_list$ 0)
(declare-sort A_b_prod_list$ 0)
(declare-sort A_list$ 0)
(declare-sort A_b_prod_a_prod$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun nil$ ()B_list$)
(declare-fun hd$ (B_list$)B$)
(declare-fun tl$ (B_list$)B_list$)
(declare-fun cons$ (B$ B_list$ )B_list$)
(declare-fun nil$a ()A_b_prod_list$)
(declare-fun hd$a (A_b_prod_list$)A_b_prod$)
(declare-fun tl$a (A_b_prod_list$)A_b_prod_list$)
(declare-fun cons$a (A_b_prod$ A_b_prod_list$ )A_b_prod_list$)
(declare-fun nil$b ()A_list$)
(declare-fun hd$b (A_list$)A$)
(declare-fun tl$b (A_list$)A_list$)
(declare-fun cons$b (A$ A_list$ )A_list$)
(declare-fun fst$f (A_b_prod_a_prod$)A_b_prod$)
(declare-fun snd$f (A_b_prod_a_prod$)A$)
(declare-fun pair$f (A_b_prod$ A$ )A_b_prod_a_prod$)
(declare-codatatypes ()((A_b_prod_a_prod_llist$ (lNil$h )(lCons$h (lhd$h A_b_prod_a_prod$ )(ltl$h A_b_prod_a_prod_llist$ )))))
(declare-sort A_b_prod_b_prod$ 0)
(declare-fun fst$g (A_b_prod_b_prod$)A_b_prod$)
(declare-fun snd$g (A_b_prod_b_prod$)B$)
(declare-fun pair$g (A_b_prod$ B$ )A_b_prod_b_prod$)
(declare-codatatypes ()((A_b_prod_b_prod_llist$ (lNil$i )(lCons$i (lhd$i A_b_prod_b_prod$ )(ltl$i A_b_prod_b_prod_llist$ )))))
(declare-sort A_b_prod_a_b_prod_prod$ 0)
(declare-fun fst$h (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun snd$h (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$h (A_b_prod$ A_b_prod$ )A_b_prod_a_b_prod_prod$)
(declare-codatatypes ()((A_b_prod_a_b_prod_prod_llist$ (lNil$j )(lCons$j (lhd$j A_b_prod_a_b_prod_prod$ )(ltl$j A_b_prod_a_b_prod_prod_llist$ )))))
(declare-sort A_b_b_prod_prod$ 0)
(declare-fun fst$i (A_b_b_prod_prod$)A$)
(declare-fun snd$i (A_b_b_prod_prod$)B_b_prod$)
(declare-fun pair$i (A$ B_b_prod$ )A_b_b_prod_prod$)
(declare-codatatypes ()((A_b_b_prod_prod_llist$ (lNil$k )(lCons$k (lhd$k A_b_b_prod_prod$ )(ltl$k A_b_b_prod_prod_llist$ )))))
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun lzip$ (A_llist$ )B_llist_a_b_prod_llist_fun$ )
(declare-fun ldrop$ (Enat$ B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun ltake$ (Enat$ B_llist$ )B_llist$ )
(declare-fun lzip$a (A_llist$ )A_llist_a_a_prod_llist_fun$ )
(declare-fun lzip$b (B_llist$ )A_llist_b_a_prod_llist_fun$ )
(declare-fun lzip$c (B_llist$ )B_llist_b_b_prod_llist_fun$ )
(declare-fun lzip$d (A_llist$ )A_b_prod_llist_a_a_b_prod_prod_llist_fun$ )
(declare-fun lzip$e (A_b_prod_llist$ A_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun lzip$f (A_b_prod_llist$ B_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun lzip$g (B_llist$ )A_b_prod_llist_b_a_b_prod_prod_llist_fun$ )
(declare-fun lzip$h (A_b_prod_llist$ A_b_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun lzip$i (A_llist$ B_b_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun ldrop$a (Enat$ B_b_prod_llist$ )B_b_prod_llist$ )
(declare-fun ldrop$b (Enat$ B_a_prod_llist$ )B_a_prod_llist$ )
(declare-fun ldrop$c (Enat$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun ldrop$d (Enat$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun ldrop$e (Enat$ B_llist$ )B_llist$ )
(declare-fun ldrop$f (Enat$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun ldrop$g (Enat$ A_llist$ )A_llist$ )
(declare-fun ldrop$h (Enat$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun ldrop$i (Enat$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun ldrop$j (Enat$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun ldrop$k (Enat$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun ldropn$ (Nat$ B_a_b_prod_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun ltake$a (Enat$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun ltake$b (Enat$ A_llist$ )A_llist$ )
(declare-fun fun_app$ (B_llist_a_b_prod_llist_fun$ B_llist$ )A_b_prod_llist$ )
(declare-fun ldropn$a (Nat$ B_b_prod_llist$ )B_b_prod_llist$ )
(declare-fun ldropn$b (Nat$ B_a_prod_llist$ )B_a_prod_llist$ )
(declare-fun ldropn$c (Nat$ A_a_b_prod_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun ldropn$d (Nat$ A_a_prod_llist$ )A_a_prod_llist$ )
(declare-fun ldropn$e (Nat$ B_llist$ )B_llist$ )
(declare-fun ldropn$f (Nat$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun ldropn$g (Nat$ A_llist$ )A_llist$ )
(declare-fun ldropn$h (Nat$ A_b_prod_a_prod_llist$ )A_b_prod_a_prod_llist$ )
(declare-fun ldropn$i (Nat$ A_b_prod_b_prod_llist$ )A_b_prod_b_prod_llist$ )
(declare-fun ldropn$j (Nat$ A_b_prod_a_b_prod_prod_llist$ )A_b_prod_a_b_prod_prod_llist$ )
(declare-fun ldropn$k (Nat$ A_b_b_prod_prod_llist$ )A_b_b_prod_prod_llist$ )
(declare-fun lprefix$ (B_llist$ B_llist$ )Bool )
(declare-fun distinct$ (B_list$ )Bool )
(declare-fun fun_app$a (A_llist_a_a_prod_llist_fun$ A_llist$ )A_a_prod_llist$ )
(declare-fun fun_app$b (A_llist_b_a_prod_llist_fun$ A_llist$ )B_a_prod_llist$ )
(declare-fun fun_app$c (B_llist_b_b_prod_llist_fun$ B_llist$ )B_b_prod_llist$ )
(declare-fun fun_app$d (A_b_prod_llist_a_a_b_prod_prod_llist_fun$ A_b_prod_llist$ )A_a_b_prod_prod_llist$ )
(declare-fun fun_app$e (A_b_prod_llist_b_a_b_prod_prod_llist_fun$ A_b_prod_llist$ )B_a_b_prod_prod_llist$ )
(declare-fun llist_of$ (B_list$ )B_llist$ )
(declare-fun lprefix$a (A_b_prod_llist$ A_b_prod_llist$ )Bool )
(declare-fun lprefix$b (A_llist$ A_llist$ )Bool )
(declare-fun distinct$a (A_b_prod_list$ )Bool )
(declare-fun distinct$b (A_list$ )Bool )
(declare-fun ldistinct$ (A_b_prod_llist$ )Bool )
(declare-fun llist_of$a (A_b_prod_list$ )A_b_prod_llist$ )
(declare-fun llist_of$b (A_list$ )A_llist$ )
(declare-fun ldistinct$a (A_llist$ )Bool )
(declare-fun ldistinct$b (B_llist$ )Bool )
(declare-fun ldistinct$c (B_a_b_prod_prod_llist$ )Bool )
(declare-fun ldistinct$d (B_b_prod_llist$ )Bool )
(declare-fun ldistinct$e (B_a_prod_llist$ )Bool )
(declare-fun ldistinct$f (A_a_b_prod_prod_llist$ )Bool )
(declare-fun ldistinct$g (A_a_prod_llist$ )Bool )
(assert (! (not (ldistinct$ (fun_app$ (lzip$ xs$ )ys$ ))):named a0 ))
(assert (! (ldistinct$a xs$ ):named a1 ))
(assert (! (= (ldistinct$b lNil$b )true ):named a2 ))
(assert (! (= (ldistinct$ lNil$ )true ):named a3 ))
(assert (! (= (ldistinct$a lNil$a )true ):named a4 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$ )(?v1 Nat$ ))(=> (ldistinct$c ?v0 )(ldistinct$c (ldropn$ ?v1 ?v0 )))):named a5 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 Nat$ ))(=> (ldistinct$d ?v0 )(ldistinct$d (ldropn$a ?v1 ?v0 )))):named a6 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 Nat$ ))(=> (ldistinct$e ?v0 )(ldistinct$e (ldropn$b ?v1 ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 Nat$ ))(=> (ldistinct$f ?v0 )(ldistinct$f (ldropn$c ?v1 ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 Nat$ ))(=> (ldistinct$g ?v0 )(ldistinct$g (ldropn$d ?v1 ?v0 )))):named a9 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Nat$ ))(=> (ldistinct$b ?v0 )(ldistinct$b (ldropn$e ?v1 ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 Nat$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (ldropn$f ?v1 ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (ldistinct$a ?v0 )(ldistinct$a (ldropn$g ?v1 ?v0 )))):named a12 ))
(assert (! (forall ((?v0 B_a_b_prod_prod_llist$ )(?v1 Enat$ ))(=> (ldistinct$c ?v0 )(ldistinct$c (ldrop$ ?v1 ?v0 )))):named a13 ))
(assert (! (forall ((?v0 B_b_prod_llist$ )(?v1 Enat$ ))(=> (ldistinct$d ?v0 )(ldistinct$d (ldrop$a ?v1 ?v0 )))):named a14 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 Enat$ ))(=> (ldistinct$e ?v0 )(ldistinct$e (ldrop$b ?v1 ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_llist$ )(?v1 Enat$ ))(=> (ldistinct$f ?v0 )(ldistinct$f (ldrop$c ?v1 ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A_a_prod_llist$ )(?v1 Enat$ ))(=> (ldistinct$g ?v0 )(ldistinct$g (ldrop$d ?v1 ?v0 )))):named a17 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Enat$ ))(=> (ldistinct$b ?v0 )(ldistinct$b (ldrop$e ?v1 ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 Enat$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (ldrop$f ?v1 ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(=> (ldistinct$a ?v0 )(ldistinct$a (ldrop$g ?v1 ?v0 )))):named a20 ))
(assert (! (ldistinct$b lNil$b ):named a21 ))
(assert (! (ldistinct$ lNil$ ):named a22 ))
(assert (! (ldistinct$a lNil$a ):named a23 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (ldistinct$b ?v0 )(lprefix$ ?v1 ?v0 ))(ldistinct$b ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(=> (and (ldistinct$ ?v0 )(lprefix$a ?v1 ?v0 ))(ldistinct$ ?v1 ))):named a25 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (ldistinct$a ?v0 )(lprefix$b ?v1 ?v0 ))(ldistinct$a ?v1 ))):named a26 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (ldistinct$b ?v0 )(ldistinct$b (ltl$b ?v0 )))):named a27 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (ltl$ ?v0 )))):named a28 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (ldistinct$a ?v0 )(ldistinct$a (ltl$a ?v0 )))):named a29 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 Enat$ ))(=> (ldistinct$b ?v0 )(ldistinct$b (ltake$ ?v1 ?v0 )))):named a30 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 Enat$ ))(=> (ldistinct$ ?v0 )(ldistinct$ (ltake$a ?v1 ?v0 )))):named a31 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Enat$ ))(=> (ldistinct$a ?v0 )(ldistinct$a (ltake$b ?v1 ?v0 )))):named a32 ))
(assert (! (forall ((?v0 B_list$ ))(= (ldistinct$b (llist_of$ ?v0 ))(distinct$ ?v0 ))):named a33 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (ldistinct$ (llist_of$a ?v0 ))(distinct$a ?v0 ))):named a34 ))
(assert (! (forall ((?v0 A_list$ ))(= (ldistinct$a (llist_of$b ?v0 ))(distinct$b ?v0 ))):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 B_llist$ ))(= (ldropn$f ?v0 (fun_app$ (lzip$ ?v1 )?v2 ))(fun_app$ (lzip$ (ldropn$g ?v0 ?v1 ))(ldropn$e ?v0 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (ldropn$d ?v0 (fun_app$a (lzip$a ?v1 )?v2 ))(fun_app$a (lzip$a (ldropn$g ?v0 ?v1 ))(ldropn$g ?v0 ?v2 )))):named a37 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 A_llist$ ))(= (ldropn$b ?v0 (fun_app$b (lzip$b ?v1 )?v2 ))(fun_app$b (lzip$b (ldropn$e ?v0 ?v1 ))(ldropn$g ?v0 ?v2 )))):named a38 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (ldropn$a ?v0 (fun_app$c (lzip$c ?v1 )?v2 ))(fun_app$c (lzip$c (ldropn$e ?v0 ?v1 ))(ldropn$e ?v0 ?v2 )))):named a39 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_b_prod_llist$ ))(= (ldropn$c ?v0 (fun_app$d (lzip$d ?v1 )?v2 ))(fun_app$d (lzip$d (ldropn$g ?v0 ?v1 ))(ldropn$f ?v0 ?v2 )))):named a40 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_llist$ )(?v2 A_llist$ ))(= (ldropn$h ?v0 (lzip$e ?v1 ?v2 ))(lzip$e (ldropn$f ?v0 ?v1 )(ldropn$g ?v0 ?v2 )))):named a41 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_llist$ )(?v2 B_llist$ ))(= (ldropn$i ?v0 (lzip$f ?v1 ?v2 ))(lzip$f (ldropn$f ?v0 ?v1 )(ldropn$e ?v0 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_llist$ )(?v2 A_b_prod_llist$ ))(= (ldropn$ ?v0 (fun_app$e (lzip$g ?v1 )?v2 ))(fun_app$e (lzip$g (ldropn$e ?v0 ?v1 ))(ldropn$f ?v0 ?v2 )))):named a43 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(= (ldropn$j ?v0 (lzip$h ?v1 ?v2 ))(lzip$h (ldropn$f ?v0 ?v1 )(ldropn$f ?v0 ?v2 )))):named a44 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 B_b_prod_llist$ ))(= (ldropn$k ?v0 (lzip$i ?v1 ?v2 ))(lzip$i (ldropn$g ?v0 ?v1 )(ldropn$a ?v0 ?v2 )))):named a45 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 B_llist$ ))(= (ldrop$f ?v0 (fun_app$ (lzip$ ?v1 )?v2 ))(fun_app$ (lzip$ (ldrop$g ?v0 ?v1 ))(ldrop$e ?v0 ?v2 )))):named a46 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (ldrop$d ?v0 (fun_app$a (lzip$a ?v1 )?v2 ))(fun_app$a (lzip$a (ldrop$g ?v0 ?v1 ))(ldrop$g ?v0 ?v2 )))):named a47 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 A_llist$ ))(= (ldrop$b ?v0 (fun_app$b (lzip$b ?v1 )?v2 ))(fun_app$b (lzip$b (ldrop$e ?v0 ?v1 ))(ldrop$g ?v0 ?v2 )))):named a48 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (ldrop$a ?v0 (fun_app$c (lzip$c ?v1 )?v2 ))(fun_app$c (lzip$c (ldrop$e ?v0 ?v1 ))(ldrop$e ?v0 ?v2 )))):named a49 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 A_b_prod_llist$ ))(= (ldrop$c ?v0 (fun_app$d (lzip$d ?v1 )?v2 ))(fun_app$d (lzip$d (ldrop$g ?v0 ?v1 ))(ldrop$f ?v0 ?v2 )))):named a50 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 A_llist$ ))(= (ldrop$h ?v0 (lzip$e ?v1 ?v2 ))(lzip$e (ldrop$f ?v0 ?v1 )(ldrop$g ?v0 ?v2 )))):named a51 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 B_llist$ ))(= (ldrop$i ?v0 (lzip$f ?v1 ?v2 ))(lzip$f (ldrop$f ?v0 ?v1 )(ldrop$e ?v0 ?v2 )))):named a52 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ )(?v2 A_b_prod_llist$ ))(= (ldrop$ ?v0 (fun_app$e (lzip$g ?v1 )?v2 ))(fun_app$e (lzip$g (ldrop$e ?v0 ?v1 ))(ldrop$f ?v0 ?v2 )))):named a53 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(= (ldrop$j ?v0 (lzip$h ?v1 ?v2 ))(lzip$h (ldrop$f ?v0 ?v1 )(ldrop$f ?v0 ?v2 )))):named a54 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ )(?v2 B_b_prod_llist$ ))(= (ldrop$k ?v0 (lzip$i ?v1 ?v2 ))(lzip$i (ldrop$g ?v0 ?v1 )(ldrop$a ?v0 ?v2 )))):named a55 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$b (lzip$b ?v0 )lNil$a )lNil$e ):pattern ((lzip$b ?v0 )))):named a56 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (lzip$a ?v0 )lNil$a )lNil$g ):pattern ((lzip$a ?v0 )))):named a57 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$e (lzip$g ?v0 )lNil$ )lNil$c ):pattern ((lzip$g ?v0 )))):named a58 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$d (lzip$d ?v0 )lNil$ )lNil$f ):pattern ((lzip$d ?v0 )))):named a59 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$c (lzip$c ?v0 )lNil$b )lNil$d ):pattern ((lzip$c ?v0 )))):named a60 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lzip$ ?v0 )lNil$b )lNil$ ):pattern ((lzip$ ?v0 )))):named a61 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$d (lzip$d lNil$a )?v0 )lNil$f ):pattern ((fun_app$d (lzip$d lNil$a )?v0 )))):named a62 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a (lzip$a lNil$a )?v0 )lNil$g ):pattern ((fun_app$a (lzip$a lNil$a )?v0 )))):named a63 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$e (lzip$g lNil$b )?v0 )lNil$c ):pattern ((fun_app$e (lzip$g lNil$b )?v0 )))):named a64 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$c (lzip$c lNil$b )?v0 )lNil$d ):pattern ((fun_app$c (lzip$c lNil$b )?v0 )))):named a65 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$b (lzip$b lNil$b )?v0 )lNil$e ):pattern ((fun_app$b (lzip$b lNil$b )?v0 )))):named a66 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$ (lzip$ lNil$a )?v0 )lNil$ ):pattern ((fun_app$ (lzip$ lNil$a )?v0 )))):named a67 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$ ?v0 ?v0 )):named a68 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$b ?v0 ?v0 )):named a69 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(lprefix$a ?v0 ?v0 )):named a70 ))
(assert (! (forall ((?v0 B_llist$ ))(lprefix$ ?v0 ?v0 )):named a71 ))
(assert (! (forall ((?v0 A_llist$ ))(lprefix$b ?v0 ?v0 )):named a72 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(lprefix$a ?v0 ?v0 )):named a73 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(= (= (llist_of$b ?v0 )(llist_of$b ?v1 ))(= ?v0 ?v1 ))):named a74 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ ))(= (= (llist_of$a ?v0 )(llist_of$a ?v1 ))(= ?v0 ?v1 ))):named a75 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (lprefix$b lNil$a ?v0 )true ):pattern ((lprefix$b lNil$a ?v0 )))):named a76 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (lprefix$a lNil$ ?v0 )true ):pattern ((lprefix$a lNil$ ?v0 )))):named a77 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (lprefix$ lNil$b ?v0 )true ):pattern ((lprefix$ lNil$b ?v0 )))):named a78 ))
(assert (! (forall ((?v0 Enat$ )(?v1 B_llist$ ))(lprefix$ (ltake$ ?v0 ?v1 )?v1 )):named a79 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_llist$ ))(lprefix$b (ltake$b ?v0 ?v1 )?v1 )):named a80 ))
(assert (! (forall ((?v0 Enat$ )(?v1 A_b_prod_llist$ ))(lprefix$a (ltake$a ?v0 ?v1 )?v1 )):named a81 ))
(check-sat )
;(get-unsat-core )
