;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun l1$ ()A_list$ )
(declare-fun l2$ ()A_list$ )
(declare-fun l2a$ ()A_list$ )
(declare-fun set$ (A_list$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun sorted$ (A_list$ )Bool )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun less_eq$ (A_set$ A_set$ )Bool )
(declare-fun distinct$ (A_list$ )Bool )
(declare-fun subset_sorted$ (A_list$ A_list$ )Bool )
(assert (! (not (= (subset_sorted$ nil$ l2a$ )(less_eq$ (set$ nil$ )(set$ l2a$ )))):named a0 ))
(assert (! (and (distinct$ l1$ )(sorted$ l1$ )):named a1 ))
(assert (! (and (distinct$ l2$ )(sorted$ l2$ )):named a2 ))
(assert (! (and (distinct$ nil$ )(sorted$ nil$ )):named a3 ))
(assert (! (and (distinct$ l2a$ )(sorted$ l2a$ )):named a4 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (subset_sorted$ nil$ ?v0 )true ):pattern ((subset_sorted$ nil$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(=> (forall ((?v2 A$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 )))(less_eq$ ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_set$ ))(less_eq$ ?v0 ?v0 )):named a8 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_set$ ))(= (less_eq$ (set$ ?v0 )?v1 )(forall ((?v2 A$ ))(=> (member$ ?v2 (set$ ?v0 ))(member$ ?v2 ?v1 ))))):named a9 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (= ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 )))):named a10 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (less_eq$ ?v0 ?v1 )(forall ((?v2 A$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (less_eq$ ?v0 ?v1 )(forall ((?v2 A$ ))(=> (member$ ?v2 ?v0 )(member$ ?v2 ?v1 ))))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ ))(=> (forall ((?v2 A$ ))(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 )))(less_eq$ (collect$ ?v0 )(collect$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(=> (and (= ?v0 ?v1 )(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))false ))false )):named a14 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(=> (= ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))):named a15 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(=> (= ?v0 ?v1 )(less_eq$ ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (and (member$ ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(member$ ?v0 ?v2 ))):named a17 ))
(check-sat )
;(get-unsat-core )
