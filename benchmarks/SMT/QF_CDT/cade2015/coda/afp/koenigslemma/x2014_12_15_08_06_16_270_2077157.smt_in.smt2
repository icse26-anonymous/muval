;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Node$ 0 )
(declare-sort Node_set$ 0 )
(declare-sort Node_bool_fun$ 0 )
(declare-sort Node_llist_set$ 0 )
(declare-sort Node_llist_bool_fun$ 0 )
(declare-sort Node_llist_llist_set$ 0 )
(declare-sort Node_node_bool_fun_fun$ 0 )
(declare-sort Node_llist_llist_bool_fun$ 0 )
(declare-sort Node_llist_node_llist_bool_fun_fun$ 0 )
(declare-codatatypes ()((Node_llist$ (lNil$ )(lCons$ (lhd$ Node$ )(ltl$ Node_llist$ )))(Node_llist_llist$ (lNil$a )(lCons$a (lhd$a Node_llist$ )(ltl$a Node_llist_llist$ )))(Node_llist_llist_llist$ (lNil$b )(lCons$b (lhd$b Node_llist_llist$ )(ltl$b Node_llist_llist_llist$ )))))
(declare-fun n$ ()Node$ )
(declare-fun top$ ()Node_set$ )
(declare-fun lset$ (Node_llist$ )Node_set$ )
(declare-fun graph$ ()Node_node_bool_fun_fun$ )
(declare-fun lset$a (Node_llist_llist_llist$ )Node_llist_llist_set$ )
(declare-fun lset$b (Node_llist_llist$ )Node_llist_set$ )
(declare-fun paths$ (Node_node_bool_fun_fun$ )Node_llist_set$ )
(declare-fun finite$ (Node_llist_set$ )Bool )
(declare-fun member$ (Node_llist$ Node_llist_set$ )Bool )
(declare-fun paths$a (Node_llist_node_llist_bool_fun_fun$ )Node_llist_llist_set$ )
(declare-fun pathsp$ (Node_llist_node_llist_bool_fun_fun$ )Node_llist_llist_bool_fun$ )
(declare-fun finite$a (Node_set$ )Bool )
(declare-fun fun_app$ (Node_llist_llist_bool_fun$ Node_llist_llist$ )Bool )
(declare-fun lappend$ (Node_llist_llist$ Node_llist_llist$ )Node_llist_llist$ )
(declare-fun lfinite$ (Node_llist$ )Bool )
(declare-fun lmember$ (Node_llist_llist$ Node_llist_llist_llist$ )Bool )
(declare-fun member$a (Node$ Node_set$ )Bool )
(declare-fun member$b (Node_llist_llist$ Node_llist_llist_set$ )Bool )
(declare-fun pathsp$a (Node_node_bool_fun_fun$ )Node_llist_bool_fun$ )
(declare-fun fun_app$a (Node_llist_bool_fun$ Node_llist$ )Bool )
(declare-fun fun_app$b (Node_bool_fun$ Node$ )Bool )
(declare-fun fun_app$c (Node_llist_node_llist_bool_fun_fun$ Node_llist$ )Node_llist_bool_fun$ )
(declare-fun fun_app$d (Node_node_bool_fun_fun$ Node$ )Node_bool_fun$ )
(declare-fun lappend$a (Node_llist$ Node_llist$ )Node_llist$ )
(declare-fun lfinite$a (Node_llist_llist$ )Bool )
(declare-fun lfinite$b (Node_llist_llist_llist$ )Bool )
(declare-fun lmember$a (Node_llist$ )Node_llist_llist_bool_fun$ )
(declare-fun lmember$b (Node$ )Node_llist_bool_fun$ )
(declare-fun connected$ (Node_node_bool_fun_fun$ )Bool )
(declare-fun ldistinct$ (Node_llist$ )Bool )
(declare-fun ldistinct$a (Node_llist_llist_llist$ )Bool )
(declare-fun ldistinct$b (Node_llist_llist$ )Bool )
(declare-fun ldropWhile$ (Node_llist_llist_bool_fun$ Node_llist_llist_llist$ )Node_llist_llist_llist$ )
(declare-fun ltakeWhile$ (Node_llist_llist_bool_fun$ Node_llist_llist_llist$ )Node_llist_llist_llist$ )
(declare-fun ldropWhile$a (Node_llist_bool_fun$ Node_llist_llist$ )Node_llist_llist$ )
(declare-fun ldropWhile$b (Node_bool_fun$ Node_llist$ )Node_llist$ )
(declare-fun ltakeWhile$a (Node_llist_bool_fun$ Node_llist_llist$ )Node_llist_llist$ )
(declare-fun ltakeWhile$b (Node_bool_fun$ Node_llist$ )Node_llist$ )
(assert (! (not (exists ((?v0 Node_llist$ ))(and (member$ ?v0 (paths$ graph$ ))(and (member$a n$ (lset$ ?v0 ))(and (not (lfinite$ ?v0 ))(ldistinct$ ?v0 )))))):named a0 ))
(assert (! (connected$ graph$ ):named a1 ))
(assert (! (forall ((?v0 Node_llist_llist$ )(?v1 Node_llist_llist$ )(?v2 Node_llist_node_llist_bool_fun_fun$ ))(=> (and (lfinite$a ?v0 )(member$b (lappend$ ?v0 ?v1 )(paths$a ?v2 )))(member$b ?v1 (paths$a ?v2 )))):named a2 ))
(assert (! (forall ((?v0 Node_llist$ )(?v1 Node_llist$ )(?v2 Node_node_bool_fun_fun$ ))(=> (and (lfinite$ ?v0 )(member$ (lappend$a ?v0 ?v1 )(paths$ ?v2 )))(member$ ?v1 (paths$ ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Node_llist_node_llist_bool_fun_fun$ )(?v1 Node_llist_llist$ ))(! (= (fun_app$ (pathsp$ ?v0 )?v1 )(member$b ?v1 (paths$a ?v0 ))):pattern ((fun_app$ (pathsp$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 Node_node_bool_fun_fun$ )(?v1 Node_llist$ ))(! (= (fun_app$a (pathsp$a ?v0 )?v1 )(member$ ?v1 (paths$ ?v0 ))):pattern ((fun_app$a (pathsp$a ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 Node_llist_llist$ )(?v1 Node_llist_llist_llist$ ))(! (= (ldistinct$a (lCons$b ?v0 ?v1 ))(and (not (member$b ?v0 (lset$a ?v1 )))(ldistinct$a ?v1 ))):pattern ((lCons$b ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Node_llist$ )(?v1 Node_llist_llist$ ))(! (= (ldistinct$b (lCons$a ?v0 ?v1 ))(and (not (member$ ?v0 (lset$b ?v1 )))(ldistinct$b ?v1 ))):pattern ((lCons$a ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_llist$ ))(! (= (ldistinct$ (lCons$ ?v0 ?v1 ))(and (not (member$a ?v0 (lset$ ?v1 )))(ldistinct$ ?v1 ))):pattern ((lCons$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Node_llist_llist_bool_fun$ )(?v1 Node_llist_llist_llist$ ))(= (lfinite$b (ldropWhile$ ?v0 ?v1 ))(=> (exists ((?v2 Node_llist_llist$ ))(and (member$b ?v2 (lset$a ?v1 ))(not (fun_app$ ?v0 ?v2 ))))(lfinite$b ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Node_llist_bool_fun$ )(?v1 Node_llist_llist$ ))(= (lfinite$a (ldropWhile$a ?v0 ?v1 ))(=> (exists ((?v2 Node_llist$ ))(and (member$ ?v2 (lset$b ?v1 ))(not (fun_app$a ?v0 ?v2 ))))(lfinite$a ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Node_bool_fun$ )(?v1 Node_llist$ ))(= (lfinite$ (ldropWhile$b ?v0 ?v1 ))(=> (exists ((?v2 Node$ ))(and (member$a ?v2 (lset$ ?v1 ))(not (fun_app$b ?v0 ?v2 ))))(lfinite$ ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Node_llist_llist$ )(?v1 Node_llist_llist_llist$ ))(=> (and (not (member$b ?v0 (lset$a ?v1 )))(ldistinct$a ?v1 ))(ldistinct$a (lCons$b ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Node_llist$ )(?v1 Node_llist_llist$ ))(=> (and (not (member$ ?v0 (lset$b ?v1 )))(ldistinct$b ?v1 ))(ldistinct$b (lCons$a ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_llist$ ))(=> (and (not (member$a ?v0 (lset$ ?v1 )))(ldistinct$ ?v1 ))(ldistinct$ (lCons$ ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Node_llist_llist$ ))(=> (lfinite$a ?v0 )(finite$ (lset$b ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Node_llist$ ))(=> (lfinite$ ?v0 )(finite$a (lset$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 Node_llist_node_llist_bool_fun_fun$ ))(member$b lNil$a (paths$a ?v0 ))):named a17 ))
(assert (! (forall ((?v0 Node_node_bool_fun_fun$ ))(member$ lNil$ (paths$ ?v0 ))):named a18 ))
(assert (! (forall ((?v0 Node_llist_llist_bool_fun$ )(?v1 Node_llist_llist_llist$ ))(= (lfinite$b (ltakeWhile$ ?v0 ?v1 ))(or (lfinite$b ?v1 )(exists ((?v2 Node_llist_llist$ ))(and (member$b ?v2 (lset$a ?v1 ))(not (fun_app$ ?v0 ?v2 ))))))):named a19 ))
(assert (! (forall ((?v0 Node_llist_bool_fun$ )(?v1 Node_llist_llist$ ))(= (lfinite$a (ltakeWhile$a ?v0 ?v1 ))(or (lfinite$a ?v1 )(exists ((?v2 Node_llist$ ))(and (member$ ?v2 (lset$b ?v1 ))(not (fun_app$a ?v0 ?v2 ))))))):named a20 ))
(assert (! (forall ((?v0 Node_bool_fun$ )(?v1 Node_llist$ ))(= (lfinite$ (ltakeWhile$b ?v0 ?v1 ))(or (lfinite$ ?v1 )(exists ((?v2 Node$ ))(and (member$a ?v2 (lset$ ?v1 ))(not (fun_app$b ?v0 ?v2 ))))))):named a21 ))
(assert (! (forall ((?v0 Node_llist_llist$ )(?v1 Node_llist_llist_llist$ ))(= (member$b ?v0 (lset$a ?v1 ))(lmember$ ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 Node_llist$ )(?v1 Node_llist_llist$ ))(= (member$ ?v0 (lset$b ?v1 ))(fun_app$ (lmember$a ?v0 )?v1 ))):named a23 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_llist$ ))(= (member$a ?v0 (lset$ ?v1 ))(fun_app$a (lmember$b ?v0 )?v1 ))):named a24 ))
(assert (! (forall ((?v0 Node_llist$ )(?v1 Node_llist_llist$ )(?v2 Node_llist_node_llist_bool_fun_fun$ ))(=> (member$b (lCons$a ?v0 ?v1 )(paths$a ?v2 ))(member$b ?v1 (paths$a ?v2 )))):named a25 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_llist$ )(?v2 Node_node_bool_fun_fun$ ))(=> (member$ (lCons$ ?v0 ?v1 )(paths$ ?v2 ))(member$ ?v1 (paths$ ?v2 )))):named a26 ))
(assert (! (forall ((?v0 Node_llist_node_llist_bool_fun_fun$ )(?v1 Node_llist$ )(?v2 Node_llist$ )(?v3 Node_llist_llist$ ))(=> (and (fun_app$a (fun_app$c ?v0 ?v1 )?v2 )(member$b (lCons$a ?v2 ?v3 )(paths$a ?v0 )))(member$b (lCons$a ?v1 (lCons$a ?v2 ?v3 ))(paths$a ?v0 )))):named a27 ))
(assert (! (forall ((?v0 Node_node_bool_fun_fun$ )(?v1 Node$ )(?v2 Node$ )(?v3 Node_llist$ ))(=> (and (fun_app$b (fun_app$d ?v0 ?v1 )?v2 )(member$ (lCons$ ?v2 ?v3 )(paths$ ?v0 )))(member$ (lCons$ ?v1 (lCons$ ?v2 ?v3 ))(paths$ ?v0 )))):named a28 ))
(assert (! (not (finite$a top$ )):named a29 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_llist$ )(?v2 Node$ )(?v3 Node_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a30 ))
(assert (! (forall ((?v0 Node_llist$ )(?v1 Node_llist_llist$ )(?v2 Node_llist$ )(?v3 Node_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a31 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_llist$ )(?v2 Node_llist$ ))(! (= (lappend$a (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$a ?v1 ?v2 ))):pattern ((lappend$a (lCons$ ?v0 ?v1 )?v2 )))):named a32 ))
(assert (! (forall ((?v0 Node_llist$ )(?v1 Node_llist_llist$ )(?v2 Node_llist_llist$ ))(! (= (lappend$ (lCons$a ?v0 ?v1 )?v2 )(lCons$a ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$a ?v0 ?v1 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 Node_llist$ )(?v1 Node_llist_llist$ ))(! (= (lfinite$a (lCons$a ?v0 ?v1 ))(lfinite$a ?v1 )):pattern ((lCons$a ?v0 ?v1 )))):named a34 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a35 ))
(check-sat )
;(get-unsat-core )
