;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Node$ 0 )
(declare-sort Node_set$ 0 )
(declare-sort Node_bool_fun$ 0 )
(declare-sort Node_llist_set$ 0 )
(declare-sort Node_llist_bool_fun$ 0 )
(declare-sort Node_node_bool_fun_fun$ 0 )
(declare-codatatypes ()((Node_llist$ (lNil$ )(lCons$ (lhd$ Node$ )(ltl$ Node_llist$ )))))
(declare-sort Node_node_set_prod$ 0)
(declare-fun fst$ (Node_node_set_prod$)Node$)
(declare-fun snd$ (Node_node_set_prod$)Node_set$)
(declare-fun pair$ (Node$ Node_set$ )Node_node_set_prod$)
(declare-fun f$ (Node_node_set_prod$ )Node_llist$ )
(declare-fun n$ ()Node$ )
(declare-fun ns$ ()Node_set$ )
(declare-fun bot$ ()Node_set$ )
(declare-fun top$ ()Node_set$ )
(declare-fun bot$a ()Node_llist_set$ )
(declare-fun lset$ (Node_llist$ )Node_set$ )
(declare-fun graph$ ()Node_node_bool_fun_fun$ )
(declare-fun lnull$ (Node_llist$ )Bool )
(declare-fun paths$ (Node_node_bool_fun_fun$ )Node_llist_set$ )
(declare-fun finite$ (Node_set$ )Bool )
(declare-fun insert$ (Node$ Node_set$ )Node_set$ )
(declare-fun member$ (Node_llist$ Node_llist_set$ )Bool )
(declare-fun uminus$ (Node_set$ )Node_set$ )
(declare-fun collect$ (Node_llist_bool_fun$ )Node_llist_set$ )
(declare-fun fun_app$ (Node_llist_bool_fun$ Node_llist$ )Bool )
(declare-fun lfinite$ (Node_llist$ )Bool )
(declare-fun member$a (Node$ Node_set$ )Bool )
(declare-fun collect$a (Node_bool_fun$ )Node_set$ )
(declare-fun fun_app$a (Node_bool_fun$ Node$ )Bool )
(declare-fun connected$ (Node_node_bool_fun_fun$ )Bool )
(declare-fun reachable_via$ (Node_node_bool_fun_fun$ Node_set$ Node$ )Node_set$ )
(assert (! (not (member$ (f$ (pair$ n$ bot$ ))(paths$ graph$ ))):named a0 ))
(assert (! (= ns$ bot$ ):named a1 ))
(assert (! (connected$ graph$ ):named a2 ))
(assert (! (exists ((?v0 Node$ )(?v1 Node_set$ ))(and (= (f$ (pair$ n$ bot$ ))(f$ (pair$ ?v0 ?v1 )))(and (finite$ ?v1 )(not (finite$ (reachable_via$ graph$ (uminus$ (insert$ ?v0 ?v1 ))?v0 )))))):named a3 ))
(assert (! (not (finite$ (reachable_via$ graph$ (uminus$ (insert$ n$ bot$ ))n$ ))):named a4 ))
(assert (! (forall ((?v0 Node_llist_bool_fun$ ))(= (= (collect$ ?v0 )bot$a )(forall ((?v1 Node_llist$ ))(not (fun_app$ ?v0 ?v1 ))))):named a5 ))
(assert (! (forall ((?v0 Node_bool_fun$ ))(= (= (collect$a ?v0 )bot$ )(forall ((?v1 Node$ ))(not (fun_app$a ?v0 ?v1 ))))):named a6 ))
(assert (! (forall ((?v0 Node_llist_set$ ))(= (forall ((?v1 Node_llist$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$a ))):named a7 ))
(assert (! (forall ((?v0 Node_set$ ))(= (forall ((?v1 Node$ ))(not (member$a ?v1 ?v0 )))(= ?v0 bot$ ))):named a8 ))
(assert (! (forall ((?v0 Node_llist_bool_fun$ ))(= (= bot$a (collect$ ?v0 ))(forall ((?v1 Node_llist$ ))(not (fun_app$ ?v0 ?v1 ))))):named a9 ))
(assert (! (forall ((?v0 Node_bool_fun$ ))(= (= bot$ (collect$a ?v0 ))(forall ((?v1 Node$ ))(not (fun_app$a ?v0 ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 Node_llist$ ))(= (member$ ?v0 bot$a )false )):named a11 ))
(assert (! (forall ((?v0 Node$ ))(= (member$a ?v0 bot$ )false )):named a12 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ )(?v2 Node$ )(?v3 Node_set$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ )(?v2 Node$ )(?v3 Node_set$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a14 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ ))(not (lnull$ (f$ (pair$ ?v0 ?v1 ))))):named a15 ))
(assert (! (member$a n$ (lset$ (f$ (pair$ n$ ns$ )))):named a16 ))
(assert (! (not (lfinite$ (f$ (pair$ n$ ns$ )))):named a17 ))
(assert (! (not (finite$ top$ )):named a18 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a19 ))
(check-sat )
;(get-unsat-core )
