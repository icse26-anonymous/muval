;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Node$ 0 )
(declare-sort Node_set$ 0 )
(declare-sort Node_set_bool_fun$ 0 )
(declare-sort Node_node_bool_fun_fun$ 0 )
(declare-codatatypes ()((Node_llist$ (lNil$ )(lCons$ (lhd$ Node$ )(ltl$ Node_llist$ )))))
(declare-sort Node_node_set_prod$ 0)
(declare-fun fst$ (Node_node_set_prod$)Node$)
(declare-fun snd$ (Node_node_set_prod$)Node_set$)
(declare-fun pair$ (Node$ Node_set$ )Node_node_set_prod$)
(declare-fun f$ (Node_node_set_prod$ )Node_llist$ )
(declare-fun n$ ()Node$ )
(declare-fun ns$ ()Node_set$ )
(declare-fun bot$ ()Node_set$ )
(declare-fun top$ ()Node_set$ )
(declare-fun lset$ (Node_llist$ )Node_set$ )
(declare-fun graph$ ()Node_node_bool_fun_fun$ )
(declare-fun finite$ (Node_set$ )Bool )
(declare-fun insert$ (Node$ Node_set$ )Node_set$ )
(declare-fun member$ (Node$ )Node_set_bool_fun$ )
(declare-fun uminus$ (Node_set$ )Node_set$ )
(declare-fun fun_app$ (Node_set_bool_fun$ Node_set$ )Bool )
(declare-fun less_eq$ (Node_set$ )Node_set_bool_fun$ )
(declare-fun connected$ (Node_node_bool_fun_fun$ )Bool )
(declare-fun reachable_via$ (Node_node_bool_fun_fun$ Node_set$ Node$ )Node_set$ )
(assert (! (not (exists ((?v0 Node$ )(?v1 Node_set$ ))(and (= (f$ (pair$ n$ bot$ ))(f$ (pair$ ?v0 ?v1 )))(and (finite$ ?v1 )(not (finite$ (reachable_via$ graph$ (uminus$ (insert$ ?v0 ?v1 ))?v0 ))))))):named a0 ))
(assert (! (connected$ graph$ ):named a1 ))
(assert (! (= ns$ bot$ ):named a2 ))
(assert (! (not (finite$ (reachable_via$ graph$ (uminus$ (insert$ n$ bot$ ))n$ ))):named a3 ))
(assert (! (not (finite$ top$ )):named a4 ))
(assert (! (fun_app$ (less_eq$ (uminus$ (insert$ n$ bot$ )))(reachable_via$ graph$ (uminus$ (insert$ n$ bot$ ))n$ )):named a5 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node$ )(?v2 Node_set$ ))(=> (and (fun_app$ (member$ ?v0 )(lset$ (f$ (pair$ ?v1 ?v2 ))))(and (not (fun_app$ (member$ ?v1 )?v2 ))(and (finite$ ?v2 )(not (finite$ (reachable_via$ graph$ (uminus$ (insert$ ?v1 ?v2 ))?v1 ))))))(not (fun_app$ (member$ ?v0 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ ))(= (finite$ (insert$ ?v0 ?v1 ))(finite$ ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Node$ ))(fun_app$ (member$ ?v0 )(insert$ ?v0 bot$ ))):named a8 ))
(assert (! (forall ((?v0 Node_set$ ))(= (finite$ ?v0 )(or (= ?v0 bot$ )(exists ((?v1 Node_set$ )(?v2 Node$ ))(and (= ?v0 (insert$ ?v2 ?v1 ))(finite$ ?v1 )))))):named a9 ))
(assert (! (forall ((?v0 Node_set_bool_fun$ )(?v1 Node_set$ ))(=> (and (forall ((?v2 Node_set$ ))(=> (not (finite$ ?v2 ))(fun_app$ ?v0 ?v2 )))(and (fun_app$ ?v0 bot$ )(forall ((?v2 Node$ )(?v3 Node_set$ ))(=> (and (finite$ ?v3 )(and (not (fun_app$ (member$ ?v2 )?v3 ))(fun_app$ ?v0 ?v3 )))(fun_app$ ?v0 (insert$ ?v2 ?v3 ))))))(fun_app$ ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Node_set$ ))(=> (and (finite$ ?v0 )(and (=> (= ?v0 bot$ )false )(forall ((?v1 Node_set$ )(?v2 Node$ ))(=> (and (= ?v0 (insert$ ?v2 ?v1 ))(finite$ ?v1 ))false ))))false )):named a11 ))
(assert (! (forall ((?v0 Node_set$ )(?v1 Node_set_bool_fun$ ))(=> (and (finite$ ?v0 )(and (not (= ?v0 bot$ ))(and (forall ((?v2 Node$ ))(fun_app$ ?v1 (insert$ ?v2 bot$ )))(forall ((?v2 Node$ )(?v3 Node_set$ ))(=> (and (finite$ ?v3 )(and (not (= ?v3 bot$ ))(and (not (fun_app$ (member$ ?v2 )?v3 ))(fun_app$ ?v1 ?v3 ))))(fun_app$ ?v1 (insert$ ?v2 ?v3 )))))))(fun_app$ ?v1 ?v0 ))):named a12 ))
(assert (! (forall ((?v0 Node_set$ )(?v1 Node_set_bool_fun$ ))(=> (and (finite$ ?v0 )(and (fun_app$ ?v1 bot$ )(forall ((?v2 Node$ )(?v3 Node_set$ ))(=> (and (finite$ ?v3 )(and (not (fun_app$ (member$ ?v2 )?v3 ))(fun_app$ ?v1 ?v3 )))(fun_app$ ?v1 (insert$ ?v2 ?v3 ))))))(fun_app$ ?v1 ?v0 ))):named a13 ))
(assert (! (forall ((?v0 Node_set$ )(?v1 Node_set$ ))(= (= (uminus$ ?v0 )(uminus$ ?v1 ))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ ))(= (fun_app$ (member$ ?v0 )(uminus$ ?v1 ))(not (fun_app$ (member$ ?v0 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 Node$ )(?v1 Node_set$ ))(=> (=> (fun_app$ (member$ ?v0 )?v1 )false )(fun_app$ (member$ ?v0 )(uminus$ ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Node$ ))(= (fun_app$ (member$ ?v0 )bot$ )false )):named a17 ))
(check-sat )
;(get-unsat-core )
