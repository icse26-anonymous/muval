;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort B_set$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort B_llist_set$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort B_llist_b_set_fun$ 0 )
(declare-sort B_llist_llist_set$ 0 )
(declare-sort B_llist_llist_llist_set$ 0 )
(declare-sort B_b_llist_a_a_fun_fun_fun$ 0 )
(declare-codatatypes ()((B_llist$ (lNil$ )(lCons$ (lhd$ B$ )(ltl$ B_llist$ )))(B_llist_llist$ (lNil$a )(lCons$a (lhd$a B_llist$ )(ltl$a B_llist_llist$ )))(B_llist_llist_llist$ (lNil$b )(lCons$b (lhd$b B_llist_llist$ )(ltl$b B_llist_llist_llist$ )))))
(declare-fun c$ ()A$ )
(declare-fun d$ ()B_b_llist_a_a_fun_fun_fun$ )
(declare-fun member$ (B_llist_llist$ B_llist_llist_set$ )Bool )
(declare-fun alllsts$ (B_llist_set$ )B_llist_llist_set$ )
(declare-fun finlsts$ (B_llist_set$ )B_llist_llist_set$ )
(declare-fun fun_app$ (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun lmember$ (B$ )B_llist_bool_fun$ )
(declare-fun member$a (B_llist$ B_llist_set$ )Bool )
(declare-fun member$b (B_llist_llist_llist$ B_llist_llist_llist_set$ )Bool )
(declare-fun member$c (B$ B_set$ )Bool )
(declare-fun poslsts$ (B_llist_set$ )B_llist_llist_set$ )
(declare-fun alllsts$a (B_set$ )B_llist_set$ )
(declare-fun alllsts$b (B_llist_llist_set$ )B_llist_llist_llist_set$ )
(declare-fun alllstsp$ (B_bool_fun$ )B_llist_bool_fun$ )
(declare-fun finlsts$a (B_set$ )B_llist_set$ )
(declare-fun finlstsp$ (B_bool_fun$ )B_llist_bool_fun$ )
(declare-fun fun_app$a (B_llist_b_set_fun$ B_llist$ )B_set$ )
(declare-fun fun_app$b (B_bool_fun$ B$ )Bool )
(declare-fun gen_lset$ (B_set$ )B_llist_b_set_fun$ )
(declare-fun poslsts$a (B_set$ )B_llist_set$ )
(declare-fun pred_llist$ (B_bool_fun$ )B_llist_bool_fun$ )
(declare-fun finlsts_rec$ (A$ B_b_llist_a_a_fun_fun_fun$ B_llist$ )A$ )
(declare-fun pred_llist$a (B_llist_bool_fun$ B_llist_llist$ )Bool )
(declare-fun finite_lprefix$ (B_llist$ )B_llist_bool_fun$ )
(declare-fun lstrict_prefix$ (B_llist$ )B_llist_bool_fun$ )
(declare-fun lstrict_prefix$a (B_llist_llist$ B_llist_llist$ )Bool )
(assert (! (not (= (finlsts_rec$ c$ d$ lNil$ )c$ )):named a0 ))
(assert (! (forall ((?v0 B_bool_fun$ ))(fun_app$ (finlstsp$ ?v0 )lNil$ )):named a1 ))
(assert (! (forall ((?v0 B_bool_fun$ ))(fun_app$ (alllstsp$ ?v0 )lNil$ )):named a2 ))
(assert (! (forall ((?v0 B_llist_set$ ))(member$ lNil$a (alllsts$ ?v0 ))):named a3 ))
(assert (! (forall ((?v0 B_set$ ))(member$a lNil$ (alllsts$a ?v0 ))):named a4 ))
(assert (! (forall ((?v0 B_llist_set$ ))(member$ lNil$a (finlsts$ ?v0 ))):named a5 ))
(assert (! (forall ((?v0 B_set$ ))(member$a lNil$ (finlsts$a ?v0 ))):named a6 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ (lmember$ ?v0 )lNil$ )false ):pattern ((lmember$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 B_set$ ))(! (= (fun_app$a (gen_lset$ ?v0 )lNil$ )?v0 ):pattern ((gen_lset$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$ (finite_lprefix$ ?v0 )lNil$ )(= ?v0 lNil$ )):pattern ((finite_lprefix$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$ (finite_lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$ (finite_lprefix$ lNil$ )?v0 )))):named a10 ))
(assert (! (forall ((?v0 B_llist_llist$ ))(=> (and (=> (= ?v0 lNil$a )false )(forall ((?v1 B_llist$ )(?v2 B_llist_llist$ ))(=> (= ?v0 (lCons$a ?v1 ?v2 ))false )))false )):named a11 ))
(assert (! (forall ((?v0 B_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(forall ((?v1 B$ )(?v2 B_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))false )))false )):named a12 ))
(assert (! (= (fun_app$ (lstrict_prefix$ lNil$ )lNil$ )false ):named a13 ))
(assert (! (forall ((?v0 B_llist_llist$ )(?v1 B_llist_set$ ))(= (member$ ?v0 (poslsts$ ?v1 ))(and (member$ ?v0 (alllsts$ ?v1 ))(not (= ?v0 lNil$a ))))):named a14 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_set$ ))(= (member$a ?v0 (poslsts$a ?v1 ))(and (member$a ?v0 (alllsts$a ?v1 ))(not (= ?v0 lNil$ ))))):named a15 ))
(assert (! (forall ((?v0 B_bool_fun$ ))(fun_app$ (pred_llist$ ?v0 )lNil$ )):named a16 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist_llist$ )(?v2 B_llist$ )(?v3 B_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a17 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a18 ))
(assert (! (forall ((?v0 B_llist_llist$ )(?v1 B_llist_llist_llist$ )(?v2 B_llist_llist_set$ ))(= (member$b (lCons$b ?v0 ?v1 )(alllsts$b ?v2 ))(and (member$ ?v0 ?v2 )(member$b ?v1 (alllsts$b ?v2 ))))):named a19 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist_llist$ )(?v2 B_llist_set$ ))(= (member$ (lCons$a ?v0 ?v1 )(alllsts$ ?v2 ))(and (member$a ?v0 ?v2 )(member$ ?v1 (alllsts$ ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B_set$ ))(= (member$a (lCons$ ?v0 ?v1 )(alllsts$a ?v2 ))(and (member$c ?v0 ?v2 )(member$a ?v1 (alllsts$a ?v2 ))))):named a21 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist_llist$ )(?v2 B_llist$ )(?v3 B_llist_llist$ ))(! (= (lstrict_prefix$a (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(lstrict_prefix$a ?v1 ?v3 ))):pattern ((lstrict_prefix$a (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))))):named a22 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ )(?v2 B$ )(?v3 B_llist$ ))(! (= (fun_app$ (lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(fun_app$ (lstrict_prefix$ ?v1 )?v3 ))):pattern ((fun_app$ (lstrict_prefix$ (lCons$ ?v0 ?v1 ))(lCons$ ?v2 ?v3 ))))):named a23 ))
(assert (! (forall ((?v0 B_llist_bool_fun$ )(?v1 B_llist$ )(?v2 B_llist_llist$ ))(! (= (pred_llist$a ?v0 (lCons$a ?v1 ?v2 ))(and (fun_app$ ?v0 ?v1 )(pred_llist$a ?v0 ?v2 ))):pattern ((pred_llist$a ?v0 (lCons$a ?v1 ?v2 ))))):named a24 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_llist$ ))(! (= (fun_app$ (pred_llist$ ?v0 )(lCons$ ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(fun_app$ (pred_llist$ ?v0 )?v2 ))):pattern ((fun_app$ (pred_llist$ ?v0 )(lCons$ ?v1 ?v2 ))))):named a25 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist_llist$ ))(! (= (lstrict_prefix$a (lCons$a ?v0 ?v1 )lNil$a )false ):pattern ((lCons$a ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 B$ )(?v1 B_llist$ ))(! (= (fun_app$ (lstrict_prefix$ (lCons$ ?v0 ?v1 ))lNil$ )false ):pattern ((lCons$ ?v0 ?v1 )))):named a27 ))
(check-sat )
;(get-unsat-core )
