;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun bot$ ()A_set$ )
(declare-fun bot$a ()A_llist_set$ )
(declare-fun bot$b ()A_llist_bool_fun$ )
(declare-fun bot$c ()Bool )
(declare-fun bot$d ()A_bool_fun$ )
(declare-fun insert$ (A_llist$ A_llist_set$ )A_llist_set$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun alllsts$ (A_set$ )A_llist_set$ )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun insert$a (A$ A_set$ )A_set$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun collect$a (A_llist_bool_fun$ )A_llist_set$ )
(declare-fun fun_app$a (A_llist_bool_fun$ A_llist$ )Bool )
(assert (! (not (= (alllsts$ bot$ )(insert$ lNil$ bot$a ))):named a0 ))
(assert (! (forall ((?v0 A_set$ ))(member$ lNil$ (alllsts$ ?v0 ))):named a1 ))
(assert (! (forall ((?v0 A$ ))(member$a ?v0 (insert$a ?v0 bot$ ))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(member$ ?v0 (insert$ ?v0 bot$a ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ ))(= (insert$a ?v0 (insert$a ?v0 ?v1 ))(insert$a ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_set$ ))(= (member$a ?v0 (insert$a ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$a ?v0 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist_set$ ))(= (member$ ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A$ ))(=> (=> (not (member$a ?v0 ?v1 ))(= ?v0 ?v2 ))(member$a ?v0 (insert$a ?v2 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$ ?v2 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= (collect$ ?v0 )bot$ )(forall ((?v1 A$ ))(not (fun_app$ ?v0 ?v1 ))))):named a10 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(= (= (collect$a ?v0 )bot$a )(forall ((?v1 A_llist$ ))(not (fun_app$a ?v0 ?v1 ))))):named a11 ))
(assert (! (forall ((?v0 A_set$ ))(= (forall ((?v1 A$ ))(not (member$a ?v1 ?v0 )))(= ?v0 bot$ ))):named a12 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (forall ((?v1 A_llist$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$a ))):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(= (= bot$ (collect$ ?v0 ))(forall ((?v1 A$ ))(not (fun_app$ ?v0 ?v1 ))))):named a14 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ ))(= (= bot$a (collect$a ?v0 ))(forall ((?v1 A_llist$ ))(not (fun_app$a ?v0 ?v1 ))))):named a15 ))
(assert (! (forall ((?v0 A$ ))(= (member$a ?v0 bot$ )false )):named a16 ))
(assert (! (forall ((?v0 A_llist$ ))(= (member$ ?v0 bot$a )false )):named a17 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a bot$b ?v0 )bot$c ):pattern ((fun_app$a bot$b ?v0 )))):named a18 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ bot$d ?v0 )bot$c ):pattern ((fun_app$ bot$d ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (insert$a ?v0 (insert$a ?v1 bot$ ))(insert$a ?v2 (insert$a ?v3 bot$ )))(or (and (= ?v0 ?v2 )(= ?v1 ?v3 ))(and (= ?v0 ?v3 )(= ?v1 ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ ))(= (= (insert$ ?v0 (insert$ ?v1 bot$a ))(insert$ ?v2 (insert$ ?v3 bot$a )))(or (and (= ?v0 ?v2 )(= ?v1 ?v3 ))(and (= ?v0 ?v3 )(= ?v1 ?v2 ))))):named a21 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$a ?v0 (insert$a ?v1 bot$ ))(= ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (member$ ?v0 (insert$ ?v1 bot$a ))(= ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (= (insert$a ?v0 bot$ )(insert$a ?v1 bot$ ))(= ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (= (insert$ ?v0 bot$a )(insert$ ?v1 bot$a ))(= ?v0 ?v1 ))):named a25 ))
(assert (! (= bot$ (collect$ bot$d )):named a26 ))
(assert (! (= bot$a (collect$a bot$b )):named a27 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a bot$b ?v0 )bot$c ):pattern ((fun_app$a bot$b ?v0 )))):named a28 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ bot$d ?v0 )bot$c ):pattern ((fun_app$ bot$d ?v0 )))):named a29 ))
(assert (! (forall ((?v0 A$ ))(=> (member$a ?v0 bot$ )false )):named a30 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$ ?v0 bot$a )false )):named a31 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ ))(=> (= ?v0 bot$ )(not (member$a ?v1 ?v0 )))):named a32 ))
(assert (! (forall ((?v0 A_llist_set$ )(?v1 A_llist$ ))(=> (= ?v0 bot$a )(not (member$ ?v1 ?v0 )))):named a33 ))
(check-sat )
;(get-unsat-core )
