;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort A_option$ 0)
(declare-fun none$ ()A_option$)
(declare-fun the$ (A_option$)A$)
(declare-fun some$ (A$ )A_option$)
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun i$ ()Nat$ )
(declare-fun j$ ()Nat$ )
(declare-fun q$ ()Bool )
(declare-fun t$ ()A_llist$ )
(declare-fun x$ ()A$ )
(declare-fun ll2f$ (A_llist$ Nat$ )A_option$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun fun_app$a (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(assert (! (not q$ ):named a0 ))
(assert (! (forall ((?v0 A$ ))(=> (= (ll2f$ t$ j$ )(some$ ?v0 ))q$ )):named a1 ))
(assert (! (less_eq$ j$ i$ ):named a2 ))
(assert (! (= (ll2f$ t$ i$ )(some$ x$ )):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (some$ ?v0 )(some$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$ ?v0 ?v0 )):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 ?v1 )(less_eq$ ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(less_eq$ ?v0 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(or (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$ ?v0 ?v0 )):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (=> (less_eq$ ?v0 ?v1 )false )(=> (less_eq$ ?v1 ?v0 )false ))false )):named a12 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (less_eq$ ?v3 ?v4 )(fun_app$ (fun_app$a ?v0 ?v3 )?v4 )))(=> (fun_app$ (fun_app$a ?v0 ?v1 )?v2 )(fun_app$ (fun_app$a ?v0 ?v2 )?v1 )))(fun_app$ (fun_app$a ?v0 ?v2 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ ))(less_eq$ ?v0 ?v0 )):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(or (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))):named a15 ))
(check-sat )
;(get-unsat-core )
