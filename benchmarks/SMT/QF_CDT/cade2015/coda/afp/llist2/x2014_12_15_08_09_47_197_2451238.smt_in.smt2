;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_llist_set$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))(A_llist_llist_llist$ (lNil$b )(lCons$b (lhd$b A_llist_llist$ )(ltl$b A_llist_llist_llist$ )))))
(declare-fun a$ ()A$ )
(declare-fun i$ ()Nat$ )
(declare-fun l$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun ltake$ (A_llist$ Nat$ )A_llist$ )
(declare-fun ldropn$ (Nat$ A_llist_llist$ )A_llist_llist$ )
(declare-fun member$ (A_llist_llist_llist$ A_llist_llist_llist_set$ )Bool )
(declare-fun alllsts$ (A_llist_llist_set$ )A_llist_llist_llist_set$ )
(declare-fun finlsts$ (A_llist_set$ )A_llist_llist_set$ )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun ldropn$a (Nat$ )A_llist_a_llist_fun$ )
(declare-fun llength$ (A_llist_llist$ )Nat$ )
(declare-fun member$a (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun member$b (A_llist$ A_llist_set$ )Bool )
(declare-fun member$c (A$ A_set$ )Bool )
(declare-fun alllsts$a (A_llist_set$ )A_llist_llist_set$ )
(declare-fun alllsts$b (A_set$ )A_llist_set$ )
(declare-fun alllstsp$ (A_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun finlsts$a (A_set$ )A_llist_set$ )
(declare-fun finlstsp$ (A_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun llength$a (A_llist$ )Nat$ )
(declare-fun alllstsp$a (A_bool_fun$ )A_llist_bool_fun$ )
(declare-fun finlstsp$a (A_bool_fun$ )A_llist_bool_fun$ )
(assert (! (not (= (ltake$ (lCons$ a$ l$ )(suc$ i$ ))(lCons$ a$ (ltake$ l$ i$ )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (ltake$ lNil$ ?v0 )lNil$ ):pattern ((ltake$ lNil$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ )(?v2 A_llist$ ))(=> (and (finlstsp$ ?v0 ?v1 )(fun_app$ ?v0 ?v2 ))(finlstsp$ ?v0 (lCons$a ?v2 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ )(?v2 A$ ))(=> (and (fun_app$ (finlstsp$a ?v0 )?v1 )(fun_app$a ?v0 ?v2 ))(fun_app$ (finlstsp$a ?v0 )(lCons$ ?v2 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_bool_fun$ )(?v1 A_llist_llist$ )(?v2 A_llist$ ))(=> (and (alllstsp$ ?v0 ?v1 )(fun_app$ ?v0 ?v2 ))(alllstsp$ ?v0 (lCons$a ?v2 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ )(?v2 A$ ))(=> (and (fun_app$ (alllstsp$a ?v0 )?v1 )(fun_app$a ?v0 ?v2 ))(fun_app$ (alllstsp$a ?v0 )(lCons$ ?v2 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_set$ ))(= (member$ (lCons$b ?v0 ?v1 )(alllsts$ ?v2 ))(and (member$a ?v0 ?v2 )(member$ ?v1 (alllsts$ ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_set$ ))(= (member$a (lCons$a ?v0 ?v1 )(alllsts$a ?v2 ))(and (member$b ?v0 ?v2 )(member$a ?v1 (alllsts$a ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_set$ ))(= (member$b (lCons$ ?v0 ?v1 )(alllsts$b ?v2 ))(and (member$c ?v0 ?v2 )(member$b ?v1 (alllsts$b ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_set$ )(?v2 A_llist$ ))(=> (member$a ?v0 (finlsts$ ?v1 ))(= (llength$ (lCons$a ?v2 ?v0 ))(suc$ (llength$ ?v0 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 A$ ))(=> (member$b ?v0 (finlsts$a ?v1 ))(= (llength$a (lCons$ ?v2 ?v0 ))(suc$ (llength$a ?v0 ))))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(! (= (ldropn$ (suc$ ?v0 )(lCons$a ?v1 ?v2 ))(ldropn$ ?v0 ?v2 )):pattern ((ldropn$ (suc$ ?v0 )(lCons$a ?v1 ?v2 ))))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$b (ldropn$a (suc$ ?v0 ))(lCons$ ?v1 ?v2 ))(fun_app$b (ldropn$a ?v0 )?v2 )):pattern ((fun_app$b (ldropn$a (suc$ ?v0 ))(lCons$ ?v1 ?v2 ))))):named a18 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$b (ldropn$a ?v0 )lNil$ )lNil$ ):pattern ((ldropn$a ?v0 )))):named a19 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_set$ ))(=> (and (member$a ?v0 (finlsts$ ?v1 ))(member$a ?v0 (alllsts$a ?v2 )))(member$a ?v0 (finlsts$ ?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (and (member$b ?v0 (finlsts$a ?v1 ))(member$b ?v0 (alllsts$b ?v2 )))(member$b ?v0 (finlsts$a ?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_set$ ))(=> (member$a ?v0 (finlsts$ ?v1 ))(member$a ?v0 (alllsts$a ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ ))(=> (member$b ?v0 (finlsts$a ?v1 ))(member$b ?v0 (alllsts$b ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_llist_set$ ))(member$a lNil$a (alllsts$a ?v0 ))):named a24 ))
(assert (! (forall ((?v0 A_set$ ))(member$b lNil$ (alllsts$b ?v0 ))):named a25 ))
(assert (! (forall ((?v0 A_llist_set$ ))(member$a lNil$a (finlsts$ ?v0 ))):named a26 ))
(assert (! (forall ((?v0 A_set$ ))(member$b lNil$ (finlsts$a ?v0 ))):named a27 ))
(check-sat )
;(get-unsat-core )
