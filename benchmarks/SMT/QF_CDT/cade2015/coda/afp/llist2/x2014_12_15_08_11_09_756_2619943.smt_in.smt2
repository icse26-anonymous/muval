;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_llist_set$ 0 )
(declare-sort A_llist_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_llist_llist_set$ 0 )
(declare-sort A_llist_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_llist_llist_bool_fun$ 0 )
(declare-sort A_llist_llist_llist_a_llist_llist_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))(A_llist_llist_llist$ (lNil$b )(lCons$b (lhd$b A_llist_llist$ )(ltl$b A_llist_llist_llist$ )))(A_llist_llist_llist_llist$ (lNil$c )(lCons$c (lhd$c A_llist_llist_llist$ )(ltl$c A_llist_llist_llist_llist$ )))))
(declare-fun a$ ()A_set$ )
(declare-fun l$ ()A_llist$ )
(declare-fun llast$ (A_llist$ )A$ )
(declare-fun llast$a (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun llast$b (A_llist_llist$ )A_llist$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun finlsts$ (A_llist_llist_set$ )A_llist_llist_llist_set$ )
(declare-fun fpslsts$ (A_set$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun member$a (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_set$ )Bool )
(declare-fun member$b (A_llist_llist_llist$ A_llist_llist_llist_set$ )Bool )
(declare-fun member$c (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun member$d (A$ A_set$ )Bool )
(declare-fun finlsts$a (A_llist_set$ )A_llist_llist_set$ )
(declare-fun finlsts$b (A_set$ )A_llist_set$ )
(declare-fun fpslsts$a (A_llist_llist_llist_set$ )A_llist_llist_llist_llist_set$ )
(declare-fun fpslsts$b (A_llist_llist_set$ )A_llist_llist_llist_set$ )
(declare-fun fpslsts$c (A_llist_set$ )A_llist_llist_set$ )
(declare-fun fun_app$a (A_llist_llist_llist_a_llist_llist_llist_fun$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun fun_app$b (A_llist_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun fun_app$c (A_llist_llist_llist_llist_bool_fun$ A_llist_llist_llist_llist$ )Bool )
(declare-fun fun_app$d (A_llist_llist_llist_bool_fun$ A_llist_llist_llist$ )Bool )
(declare-fun fun_app$e (A_llist_llist_bool_fun$ A_llist_llist$ )Bool )
(declare-fun fun_app$f (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun lappend$a (A_llist_llist_llist$ )A_llist_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun lappend$b (A_llist_llist$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun lbutlast$ (A_llist$ )A_llist$ )
(declare-fun lbutlast$a (A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lbutlast$b (A_llist_llist$ )A_llist_llist$ )
(assert (! (not (= l$ (fun_app$ (lappend$ (lbutlast$ l$ ))(lCons$ (llast$ l$ )lNil$ )))):named a0 ))
(assert (! (member$ l$ (fpslsts$ a$ )):named a1 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(= (= lNil$b (fun_app$a (lappend$a ?v0 )?v1 ))(and (= ?v0 lNil$b )(= ?v1 lNil$b )))):named a2 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (= lNil$a (fun_app$b (lappend$b ?v0 )?v1 ))(and (= ?v0 lNil$a )(= ?v1 lNil$a )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a4 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(= (= (fun_app$a (lappend$a ?v0 )?v1 )lNil$b )(and (= ?v0 lNil$b )(= ?v1 lNil$b )))):named a5 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (= (fun_app$b (lappend$b ?v0 )?v1 )lNil$a )(and (= ?v0 lNil$a )(= ?v1 lNil$a )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (fun_app$ (lappend$ ?v0 )?v1 )lNil$ )(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a7 ))
(assert (! (= (lbutlast$a lNil$b )lNil$b ):named a8 ))
(assert (! (= (lbutlast$b lNil$a )lNil$a ):named a9 ))
(assert (! (= (lbutlast$ lNil$ )lNil$ ):named a10 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(=> (and (=> (= ?v0 lNil$b )false )(forall ((?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(=> (= ?v0 (lCons$b ?v1 ?v2 ))false )))false )):named a11 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (and (=> (= ?v0 lNil$a )false )(forall ((?v1 A_llist$ )(?v2 A_llist_llist$ ))(=> (= ?v0 (lCons$a ?v1 ?v2 ))false )))false )):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(forall ((?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))false )))false )):named a13 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(= (= lNil$b (fun_app$a (lappend$a ?v0 )?v1 ))(and (= ?v0 lNil$b )(= ?v1 lNil$b )))):named a14 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (= lNil$a (fun_app$b (lappend$b ?v0 )?v1 ))(and (= ?v0 lNil$a )(= ?v1 lNil$a )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a16 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(= (= (fun_app$a (lappend$a ?v0 )?v1 )lNil$b )(and (= ?v0 lNil$b )(= ?v1 lNil$b )))):named a17 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (= (fun_app$b (lappend$b ?v0 )?v1 )lNil$a )(and (= ?v0 lNil$a )(= ?v1 lNil$a )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (fun_app$ (lappend$ ?v0 )?v1 )lNil$ )(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a19 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(! (= (fun_app$a (lappend$a ?v0 )lNil$b )?v0 ):pattern ((lappend$a ?v0 )))):named a20 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$b (lappend$b ?v0 )lNil$a )?v0 ):pattern ((lappend$b ?v0 )))):named a21 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a22 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(! (= (fun_app$a (lappend$a lNil$b )?v0 )?v0 ):pattern ((fun_app$a (lappend$a lNil$b )?v0 )))):named a23 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$b (lappend$b lNil$a )?v0 )?v0 ):pattern ((fun_app$b (lappend$b lNil$a )?v0 )))):named a24 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ lNil$ )?v0 )?v0 ):pattern ((fun_app$ (lappend$ lNil$ )?v0 )))):named a25 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (fun_app$a (lappend$a (lCons$b ?v0 ?v1 ))?v2 )(lCons$b ?v0 (fun_app$a (lappend$a ?v1 )?v2 ))):pattern ((fun_app$a (lappend$a (lCons$b ?v0 ?v1 ))?v2 )))):named a26 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(! (= (fun_app$b (lappend$b (lCons$a ?v0 ?v1 ))?v2 )(lCons$a ?v0 (fun_app$b (lappend$b ?v1 )?v2 ))):pattern ((fun_app$b (lappend$b (lCons$a ?v0 ?v1 ))?v2 )))):named a27 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )(lCons$ ?v0 (fun_app$ (lappend$ ?v1 )?v2 ))):pattern ((fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_set$ )(?v2 A_llist_llist_llist_llist_bool_fun$ ))(=> (and (member$a ?v0 (fpslsts$a ?v1 ))(and (forall ((?v3 A_llist_llist_llist$ ))(=> (member$b ?v3 ?v1 )(fun_app$c ?v2 (lCons$c ?v3 lNil$c ))))(forall ((?v3 A_llist_llist_llist$ )(?v4 A_llist_llist_llist_llist$ ))(=> (and (member$a ?v4 (fpslsts$a ?v1 ))(and (fun_app$c ?v2 ?v4 )(member$b ?v3 ?v1 )))(fun_app$c ?v2 (lCons$c ?v3 ?v4 ))))))(fun_app$c ?v2 ?v0 ))):named a29 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_set$ )(?v2 A_llist_llist_llist_bool_fun$ ))(=> (and (member$b ?v0 (fpslsts$b ?v1 ))(and (forall ((?v3 A_llist_llist$ ))(=> (member$c ?v3 ?v1 )(fun_app$d ?v2 (lCons$b ?v3 lNil$b ))))(forall ((?v3 A_llist_llist$ )(?v4 A_llist_llist_llist$ ))(=> (and (member$b ?v4 (fpslsts$b ?v1 ))(and (fun_app$d ?v2 ?v4 )(member$c ?v3 ?v1 )))(fun_app$d ?v2 (lCons$b ?v3 ?v4 ))))))(fun_app$d ?v2 ?v0 ))):named a30 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_llist_bool_fun$ ))(=> (and (member$c ?v0 (fpslsts$c ?v1 ))(and (forall ((?v3 A_llist$ ))(=> (member$ ?v3 ?v1 )(fun_app$e ?v2 (lCons$a ?v3 lNil$a ))))(forall ((?v3 A_llist$ )(?v4 A_llist_llist$ ))(=> (and (member$c ?v4 (fpslsts$c ?v1 ))(and (fun_app$e ?v2 ?v4 )(member$ ?v3 ?v1 )))(fun_app$e ?v2 (lCons$a ?v3 ?v4 ))))))(fun_app$e ?v2 ?v0 ))):named a31 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 A_llist_bool_fun$ ))(=> (and (member$ ?v0 (fpslsts$ ?v1 ))(and (forall ((?v3 A$ ))(=> (member$d ?v3 ?v1 )(fun_app$f ?v2 (lCons$ ?v3 lNil$ ))))(forall ((?v3 A$ )(?v4 A_llist$ ))(=> (and (member$ ?v4 (fpslsts$ ?v1 ))(and (fun_app$f ?v2 ?v4 )(member$d ?v3 ?v1 )))(fun_app$f ?v2 (lCons$ ?v3 ?v4 ))))))(fun_app$f ?v2 ?v0 ))):named a32 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(= (fun_app$a (lappend$a (fun_app$a (lappend$a ?v0 )(lCons$b ?v1 lNil$b )))?v2 )(fun_app$a (lappend$a ?v0 )(lCons$b ?v1 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist$ )(?v2 A_llist_llist$ ))(= (fun_app$b (lappend$b (fun_app$b (lappend$b ?v0 )(lCons$a ?v1 lNil$a )))?v2 )(fun_app$b (lappend$b ?v0 )(lCons$a ?v1 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(= (fun_app$ (lappend$ (fun_app$ (lappend$ ?v0 )(lCons$ ?v1 lNil$ )))?v2 )(fun_app$ (lappend$ ?v0 )(lCons$ ?v1 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(= (= (lCons$b ?v0 ?v1 )(lCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a36 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist$ )(?v3 A_llist_llist$ ))(= (= (lCons$a ?v0 ?v1 )(lCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a37 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a38 ))
(assert (! (= (fun_app$a (lappend$a lNil$b )lNil$b )lNil$b ):named a39 ))
(assert (! (= (fun_app$b (lappend$b lNil$a )lNil$a )lNil$a ):named a40 ))
(assert (! (= (fun_app$ (lappend$ lNil$ )lNil$ )lNil$ ):named a41 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(= (not (= ?v0 lNil$b ))(exists ((?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(= ?v0 (lCons$b ?v1 ?v2 ))))):named a42 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(= (not (= ?v0 lNil$a ))(exists ((?v1 A_llist$ )(?v2 A_llist_llist$ ))(= ?v0 (lCons$a ?v1 ?v2 ))))):named a43 ))
(assert (! (forall ((?v0 A_llist$ ))(= (not (= ?v0 lNil$ ))(exists ((?v1 A$ )(?v2 A_llist$ ))(= ?v0 (lCons$ ?v1 ?v2 ))))):named a44 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ ))(not (= lNil$b (lCons$b ?v0 ?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ ))(not (= lNil$a (lCons$a ?v0 ?v1 )))):named a46 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(not (= lNil$ (lCons$ ?v0 ?v1 )))):named a47 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_set$ )(?v2 A_llist_llist$ ))(=> (member$b ?v0 (finlsts$ ?v1 ))(= (llast$a (lCons$b ?v2 ?v0 ))(ite (= ?v0 lNil$b )?v2 (llast$a ?v0 ))))):named a48 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_set$ )(?v2 A_llist$ ))(=> (member$c ?v0 (finlsts$a ?v1 ))(= (llast$b (lCons$a ?v2 ?v0 ))(ite (= ?v0 lNil$a )?v2 (llast$b ?v0 ))))):named a49 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 A$ ))(=> (member$ ?v0 (finlsts$b ?v1 ))(= (llast$ (lCons$ ?v2 ?v0 ))(ite (= ?v0 lNil$ )?v2 (llast$ ?v0 ))))):named a50 ))
(check-sat )
;(get-unsat-core )
