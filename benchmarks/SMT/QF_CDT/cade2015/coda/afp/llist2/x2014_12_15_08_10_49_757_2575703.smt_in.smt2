;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun n$ ()Nat$ )
(declare-fun ja$ ()Nat$ )
(declare-fun ta$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun lrev$ (A_llist$ )A_llist$ )
(declare-fun ldrop$ (A_llist$ Nat$ )A_llist$ )
(declare-fun ltake$ (A_llist$ Nat$ )A_llist$ )
(declare-fun less_eq$ (Nat$ Nat$ )Bool )
(declare-fun finlstsp$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun lbutlast$ (A_llist$ )A_llist$ )
(assert (! (not (= (ldrop$ ta$ (suc$ n$ ))lNil$ )):named a0 ))
(assert (! (less_eq$ ja$ (suc$ n$ )):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_llist$ ))(=> (and (less_eq$ ?v0 n$ )(= (ldrop$ ?v1 ?v0 )lNil$ ))(= (ldrop$ ?v1 n$ )lNil$ ))):named a2 ))
(assert (! (= (ldrop$ ta$ ja$ )lNil$ ):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (ldrop$ lNil$ ?v0 )lNil$ ):pattern ((ldrop$ lNil$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (= (lbutlast$ lNil$ )lNil$ ):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (ltake$ lNil$ ?v0 )lNil$ ):pattern ((ltake$ lNil$ ?v0 )))):named a10 ))
(assert (! (= (lrev$ lNil$ )lNil$ ):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (less_eq$ (suc$ ?v0 )(suc$ ?v1 ))(less_eq$ ?v0 ?v1 )):pattern ((less_eq$ (suc$ ?v0 )(suc$ ?v1 ))))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(finlstsp$ ?v0 lNil$ )):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 ?v1 )(less_eq$ ?v0 ?v1 ))):named a14 ))
(check-sat )
;(get-unsat-core )
