;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun a$ ()A$ )
(declare-fun l$ ()A_llist$ )
(declare-fun ia$ ()Nat$ )
(declare-fun ta$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun top$ ()A_set$ )
(declare-fun less$ (A_llist$ A_llist$ )Bool )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun ltake$ (A_llist$ )Nat_a_llist_fun$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$ )A_llist$ )
(declare-fun inflsts$ (A_set$ )A_llist_set$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(assert (! (not (less$ (fun_app$ (ltake$ ta$ )(suc$ ia$ ))ta$ )):named a0 ))
(assert (! (= ta$ (lCons$ a$ l$ )):named a1 ))
(assert (! (member$ ta$ (inflsts$ top$ )):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$ ?v0 (inflsts$ top$ ))(less$ (fun_app$ (ltake$ ?v0 )ia$ )?v0 ))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(! (= (less$ (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(less$ ?v1 ?v3 ))):pattern ((less$ (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 Nat$ ))(! (= (fun_app$ (ltake$ (lCons$ ?v0 ?v1 ))(suc$ ?v2 ))(lCons$ ?v0 (fun_app$ (ltake$ ?v1 )?v2 ))):pattern ((fun_app$ (ltake$ (lCons$ ?v0 ?v1 ))(suc$ ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less$a (fun_app$a ?v0 ?v3 )(fun_app$a ?v0 (suc$ ?v3 ))))(less$a ?v1 ?v2 ))(less$a (fun_app$a ?v0 ?v1 )(fun_app$a ?v0 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Nat_a_llist_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less$ (fun_app$ ?v0 ?v3 )(fun_app$ ?v0 (suc$ ?v3 ))))(less$a ?v1 ?v2 ))(less$ (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(less$a (fun_app$a ?v0 ?v3 )(fun_app$a ?v0 (suc$ ?v3 ))))(= (less$a (fun_app$a ?v0 ?v1 )(fun_app$a ?v0 ?v2 ))(less$a ?v1 ?v2 )))):named a10 ))
(assert (! (forall ((?v0 Nat_a_llist_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(less$ (fun_app$ ?v0 ?v3 )(fun_app$ ?v0 (suc$ ?v3 ))))(= (less$ (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 ?v2 ))(less$a ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (= ?v0 ?v1 ))(or (less$a ?v0 ?v1 )(less$a ?v1 ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (less$a ?v0 ?v1 ))(or (less$a ?v1 ?v0 )(= ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (=> (less$a ?v0 ?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (less$a ?v1 ?v0 )false )))false )):named a16 ))
(assert (! (member$a a$ top$ ):named a17 ))
(assert (! (member$ l$ (inflsts$ top$ )):named a18 ))
(check-sat )
;(get-unsat-core )
