;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_llist_llist_set$ 0 )
(declare-sort A_llist_llist_llist_llist_set$ 0 )
(declare-sort A_llist_llist_a_llist_llist_fun$ 0 )
(declare-sort A_llist_llist_llist_a_llist_llist_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))(A_llist_llist_llist$ (lNil$b )(lCons$b (lhd$b A_llist_llist$ )(ltl$b A_llist_llist_llist$ )))(A_llist_llist_llist_llist$ (lNil$c )(lCons$c (lhd$c A_llist_llist_llist$ )(ltl$c A_llist_llist_llist_llist$ )))))
(declare-fun a$ ()A$ )
(declare-fun l$ ()A_llist$ )
(declare-fun x$ ()A$ )
(declare-fun a$a ()A_set$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun top$ ()A_set$ )
(declare-fun llast$ (A_llist$ )A$ )
(declare-fun llast$a (A_llist_llist_llist$ )A_llist_llist$ )
(declare-fun llast$b (A_llist_llist$ )A_llist$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun finlsts$ (A_set$ )A_llist_set$ )
(declare-fun fun_app$ (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun lappend$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun member$a (A$ A_set$ )Bool )
(declare-fun member$b (A_llist_llist_llist$ A_llist_llist_llist_set$ )Bool )
(declare-fun member$c (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun member$d (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_set$ )Bool )
(declare-fun finlsts$a (A_llist_llist_set$ )A_llist_llist_llist_set$ )
(declare-fun finlsts$b (A_llist_set$ )A_llist_llist_set$ )
(declare-fun finlsts$c (A_llist_llist_llist_set$ )A_llist_llist_llist_llist_set$ )
(declare-fun fun_app$a (A_llist_llist_llist_a_llist_llist_llist_fun$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun fun_app$b (A_llist_llist_a_llist_llist_fun$ A_llist_llist$ )A_llist_llist$ )
(declare-fun lappend$a (A_llist_llist_llist$ )A_llist_llist_llist_a_llist_llist_llist_fun$ )
(declare-fun lappend$b (A_llist_llist$ )A_llist_llist_a_llist_llist_fun$ )
(declare-fun lappend$c (A_llist_llist_llist_llist$ A_llist_llist_llist_llist$ )A_llist_llist_llist_llist$ )
(assert (! (not (= (llast$ (fun_app$ (lappend$ (lCons$ a$ l$ ))(lCons$ x$ lNil$ )))x$ )):named a0 ))
(assert (! (member$ xs$ (finlsts$ a$a )):named a1 ))
(assert (! (member$ l$ (finlsts$ a$a )):named a2 ))
(assert (! (member$a a$ a$a ):named a3 ))
(assert (! (member$ (lCons$ x$ lNil$ )(finlsts$ top$ )):named a4 ))
(assert (! (= (llast$ (fun_app$ (lappend$ l$ )(lCons$ x$ lNil$ )))x$ ):named a5 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(= (= lNil$b (fun_app$a (lappend$a ?v0 )?v1 ))(and (= ?v0 lNil$b )(= ?v1 lNil$b )))):named a6 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (= lNil$a (fun_app$b (lappend$b ?v0 )?v1 ))(and (= ?v0 lNil$a )(= ?v1 lNil$a )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a8 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(= (= (fun_app$a (lappend$a ?v0 )?v1 )lNil$b )(and (= ?v0 lNil$b )(= ?v1 lNil$b )))):named a9 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (= (fun_app$b (lappend$b ?v0 )?v1 )lNil$a )(and (= ?v0 lNil$a )(= ?v1 lNil$a )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (fun_app$ (lappend$ ?v0 )?v1 )lNil$ )(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a11 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(=> (and (=> (= ?v0 lNil$b )false )(forall ((?v1 A_llist_llist$ )(?v2 A_llist_llist_llist$ ))(=> (= ?v0 (lCons$b ?v1 ?v2 ))false )))false )):named a12 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(=> (and (=> (= ?v0 lNil$a )false )(forall ((?v1 A_llist$ )(?v2 A_llist_llist$ ))(=> (= ?v0 (lCons$a ?v1 ?v2 ))false )))false )):named a13 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (= ?v0 lNil$ )false )(forall ((?v1 A$ )(?v2 A_llist$ ))(=> (= ?v0 (lCons$ ?v1 ?v2 ))false )))false )):named a14 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_set$ )(?v2 A_llist_llist$ ))(=> (member$b ?v0 (finlsts$a ?v1 ))(= (llast$a (lCons$b ?v2 ?v0 ))(ite (= ?v0 lNil$b )?v2 (llast$a ?v0 ))))):named a15 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_set$ )(?v2 A_llist$ ))(=> (member$c ?v0 (finlsts$b ?v1 ))(= (llast$b (lCons$a ?v2 ?v0 ))(ite (= ?v0 lNil$a )?v2 (llast$b ?v0 ))))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 A$ ))(=> (member$ ?v0 (finlsts$ ?v1 ))(= (llast$ (lCons$ ?v2 ?v0 ))(ite (= ?v0 lNil$ )?v2 (llast$ ?v0 ))))):named a17 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(= (= lNil$b (fun_app$a (lappend$a ?v0 )?v1 ))(and (= ?v0 lNil$b )(= ?v1 lNil$b )))):named a18 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (= lNil$a (fun_app$b (lappend$b ?v0 )?v1 ))(and (= ?v0 lNil$a )(= ?v1 lNil$a )))):named a19 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= lNil$ (fun_app$ (lappend$ ?v0 )?v1 ))(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a20 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ ))(= (= (fun_app$a (lappend$a ?v0 )?v1 )lNil$b )(and (= ?v0 lNil$b )(= ?v1 lNil$b )))):named a21 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ ))(= (= (fun_app$b (lappend$b ?v0 )?v1 )lNil$a )(and (= ?v0 lNil$a )(= ?v1 lNil$a )))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= (fun_app$ (lappend$ ?v0 )?v1 )lNil$ )(and (= ?v0 lNil$ )(= ?v1 lNil$ )))):named a23 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(! (= (fun_app$a (lappend$a ?v0 )lNil$b )?v0 ):pattern ((lappend$a ?v0 )))):named a24 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$b (lappend$b ?v0 )lNil$a )?v0 ):pattern ((lappend$b ?v0 )))):named a25 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ ?v0 )lNil$ )?v0 ):pattern ((lappend$ ?v0 )))):named a26 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ ))(! (= (fun_app$a (lappend$a lNil$b )?v0 )?v0 ):pattern ((fun_app$a (lappend$a lNil$b )?v0 )))):named a27 ))
(assert (! (forall ((?v0 A_llist_llist$ ))(! (= (fun_app$b (lappend$b lNil$a )?v0 )?v0 ):pattern ((fun_app$b (lappend$b lNil$a )?v0 )))):named a28 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (lappend$ lNil$ )?v0 )?v0 ):pattern ((fun_app$ (lappend$ lNil$ )?v0 )))):named a29 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_llist$ ))(! (= (fun_app$a (lappend$a (lCons$b ?v0 ?v1 ))?v2 )(lCons$b ?v0 (fun_app$a (lappend$a ?v1 )?v2 ))):pattern ((fun_app$a (lappend$a (lCons$b ?v0 ?v1 ))?v2 )))):named a30 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(! (= (fun_app$b (lappend$b (lCons$a ?v0 ?v1 ))?v2 )(lCons$a ?v0 (fun_app$b (lappend$b ?v1 )?v2 ))):pattern ((fun_app$b (lappend$b (lCons$a ?v0 ?v1 ))?v2 )))):named a31 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )(lCons$ ?v0 (fun_app$ (lappend$ ?v1 )?v2 ))):pattern ((fun_app$ (lappend$ (lCons$ ?v0 ?v1 ))?v2 )))):named a32 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist$ )(?v2 A_llist_llist_set$ ))(= (member$b (fun_app$a (lappend$a ?v0 )?v1 )(finlsts$a ?v2 ))(and (member$b ?v0 (finlsts$a ?v2 ))(member$b ?v1 (finlsts$a ?v2 ))))):named a33 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_set$ ))(= (member$c (fun_app$b (lappend$b ?v0 )?v1 )(finlsts$b ?v2 ))(and (member$c ?v0 (finlsts$b ?v2 ))(member$c ?v1 (finlsts$b ?v2 ))))):named a34 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_set$ ))(= (member$ (fun_app$ (lappend$ ?v0 )?v1 )(finlsts$ ?v2 ))(and (member$ ?v0 (finlsts$ ?v2 ))(member$ ?v1 (finlsts$ ?v2 ))))):named a35 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_set$ )(?v2 A_llist_llist_llist$ )(?v3 A_llist_llist_llist$ ))(=> (member$b ?v0 (finlsts$a ?v1 ))(= (= (fun_app$a (lappend$a ?v0 )?v2 )(fun_app$a (lappend$a ?v0 )?v3 ))(= ?v2 ?v3 )))):named a36 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_llist$ )(?v3 A_llist_llist$ ))(=> (member$c ?v0 (finlsts$b ?v1 ))(= (= (fun_app$b (lappend$b ?v0 )?v2 )(fun_app$b (lappend$b ?v0 )?v3 ))(= ?v2 ?v3 )))):named a37 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (member$ ?v0 (finlsts$ ?v1 ))(= (= (fun_app$ (lappend$ ?v0 )?v2 )(fun_app$ (lappend$ ?v0 )?v3 ))(= ?v2 ?v3 )))):named a38 ))
(assert (! (forall ((?v0 A_llist_llist_llist_llist$ )(?v1 A_llist_llist_llist_set$ ))(=> (and (member$d ?v0 (finlsts$c ?v1 ))(and (=> (= ?v0 lNil$c )false )(forall ((?v2 A_llist_llist_llist$ )(?v3 A_llist_llist_llist_llist$ ))(=> (and (member$d ?v3 (finlsts$c ?v1 ))(and (member$b ?v2 ?v1 )(= ?v0 (lappend$c ?v3 (lCons$c ?v2 lNil$c )))))false ))))false )):named a39 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_set$ ))(=> (and (member$b ?v0 (finlsts$a ?v1 ))(and (=> (= ?v0 lNil$b )false )(forall ((?v2 A_llist_llist$ )(?v3 A_llist_llist_llist$ ))(=> (and (member$b ?v3 (finlsts$a ?v1 ))(and (member$c ?v2 ?v1 )(= ?v0 (fun_app$a (lappend$a ?v3 )(lCons$b ?v2 lNil$b )))))false ))))false )):named a40 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_set$ ))(=> (and (member$c ?v0 (finlsts$b ?v1 ))(and (=> (= ?v0 lNil$a )false )(forall ((?v2 A_llist$ )(?v3 A_llist_llist$ ))(=> (and (member$c ?v3 (finlsts$b ?v1 ))(and (member$ ?v2 ?v1 )(= ?v0 (fun_app$b (lappend$b ?v3 )(lCons$a ?v2 lNil$a )))))false ))))false )):named a41 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ ))(=> (and (member$ ?v0 (finlsts$ ?v1 ))(and (=> (= ?v0 lNil$ )false )(forall ((?v2 A$ )(?v3 A_llist$ ))(=> (and (member$ ?v3 (finlsts$ ?v1 ))(and (member$a ?v2 ?v1 )(= ?v0 (fun_app$ (lappend$ ?v3 )(lCons$ ?v2 lNil$ )))))false ))))false )):named a42 ))
(check-sat )
;(get-unsat-core )
