;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_llist_set$ 0 )
(declare-sort A_llist_llist_llist_set$ 0 )
(declare-sort A_llist_llist_llist_llist_set$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))(A_llist_llist$ (lNil$a )(lCons$a (lhd$a A_llist$ )(ltl$a A_llist_llist$ )))(A_llist_llist_llist$ (lNil$b )(lCons$b (lhd$b A_llist_llist$ )(ltl$b A_llist_llist_llist$ )))(A_llist_llist_llist_llist$ (lNil$c )(lCons$c (lhd$c A_llist_llist_llist$ )(ltl$c A_llist_llist_llist_llist$ )))))
(declare-fun a$ ()A_set$ )
(declare-fun s$ ()A_llist$ )
(declare-fun t$ ()A_llist$ )
(declare-fun less$ (A_llist$ A_llist$ )Bool )
(declare-fun lconst$ (A_llist_llist_llist$ )A_llist_llist_llist_llist$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun inflsts$ (A_set$ )A_llist_set$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lconst$a (A_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lconst$b (A_llist$ )A_llist_llist$ )
(declare-fun lconst$c (A$ )A_llist$ )
(declare-fun less_eq$ (A_llist$ A_llist$ )Bool )
(declare-fun member$a (A_llist_llist_llist$ A_llist_llist_llist_set$ )Bool )
(declare-fun member$b (A_llist_llist_llist_llist$ A_llist_llist_llist_llist_set$ )Bool )
(declare-fun member$c (A_llist_llist$ A_llist_llist_set$ )Bool )
(declare-fun member$d (A$ A_set$ )Bool )
(declare-fun inflsts$a (A_llist_llist_llist_set$ )A_llist_llist_llist_llist_set$ )
(declare-fun inflsts$b (A_llist_llist_set$ )A_llist_llist_llist_set$ )
(declare-fun inflsts$c (A_llist_set$ )A_llist_llist_set$ )
(declare-fun lappend$a (A_llist_llist_llist$ A_llist_llist_llist$ )A_llist_llist_llist$ )
(declare-fun lappend$b (A_llist_llist$ A_llist_llist$ )A_llist_llist$ )
(assert (! (not (= (less_eq$ s$ t$ )(= s$ t$ ))):named a0 ))
(assert (! (member$ s$ (inflsts$ a$ )):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (less$ ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(not (= ?v0 ?v1 )))):pattern ((less$ ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (less_eq$ ?v0 ?v1 )(exists ((?v2 A_llist$ ))(= ?v1 (lappend$ ?v0 ?v2 ))))):named a3 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_llist_set$ ))(=> (member$a ?v0 ?v1 )(member$b (lconst$ ?v0 )(inflsts$a ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist_set$ ))(=> (member$c ?v0 ?v1 )(member$a (lconst$a ?v0 )(inflsts$b ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ ))(=> (member$ ?v0 ?v1 )(member$c (lconst$b ?v0 )(inflsts$c ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ ))(=> (member$d ?v0 ?v1 )(member$ (lconst$c ?v0 )(inflsts$ ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_llist_llist$ )(?v1 A_llist_llist_set$ )(?v2 A_llist_llist_llist$ ))(=> (member$a ?v0 (inflsts$b ?v1 ))(= (lappend$a ?v0 ?v2 )?v0 ))):named a8 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_llist$ ))(=> (member$c ?v0 (inflsts$c ?v1 ))(= (lappend$b ?v0 ?v2 )?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 A_llist$ ))(=> (member$ ?v0 (inflsts$ ?v1 ))(= (lappend$ ?v0 ?v2 )?v0 ))):named a10 ))
(assert (! (forall ((?v0 A_llist_llist$ )(?v1 A_llist_llist$ )(?v2 A_llist_llist$ ))(= (lappend$b (lappend$b ?v0 ?v1 )?v2 )(lappend$b ?v0 (lappend$b ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a12 ))
(check-sat )
;(get-unsat-core )
