;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun i$ ()Nat$ )
(declare-fun j$ ()Nat$ )
(declare-fun r$ ()A_llist$ )
(declare-fun s$ ()A_llist$ )
(declare-fun ra$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun top$ ()A_set$ )
(declare-fun less$ (A_llist$ A_llist$ )Bool )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun ltake$ (A_llist$ )Nat_a_llist_fun$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun finlsts$ (A_set$ )A_llist_set$ )
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$ )A_llist$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Nat$ )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(assert (! (not (less$ (fun_app$ (ltake$ (lappend$ ra$ s$ ))(suc$ j$ ))ra$ )):named a0 ))
(assert (! (member$ r$ (finlsts$ top$ )):named a1 ))
(assert (! (less$a i$ (llength$ r$ )):named a2 ))
(assert (! (member$ ra$ (finlsts$ top$ )):named a3 ))
(assert (! (less$a (suc$ j$ )(llength$ ra$ )):named a4 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (member$ ?v0 (finlsts$ top$ ))(less$a j$ (llength$ ?v0 )))(less$ (fun_app$ (ltake$ (lappend$ ?v0 s$ ))j$ )?v0 ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_set$ ))(=> (and (less$ ?v0 ?v1 )(member$ ?v1 (finlsts$ ?v2 )))(member$ ?v0 (finlsts$ ?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_set$ ))(= (member$ (lappend$ ?v0 ?v1 )(finlsts$ ?v2 ))(and (member$ ?v0 (finlsts$ ?v2 ))(member$ ?v1 (finlsts$ ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 A_llist$ )(?v3 A_llist$ ))(=> (member$ ?v0 (finlsts$ ?v1 ))(= (= (lappend$ ?v0 ?v2 )(lappend$ ?v0 ?v3 ))(= ?v2 ?v3 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 A_llist$ ))(=> (member$ ?v0 (finlsts$ ?v1 ))(= (fun_app$ (ltake$ (lappend$ ?v0 ?v2 ))(llength$ ?v0 ))?v0 ))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat_a_llist_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less$ (fun_app$ ?v0 ?v3 )(fun_app$ ?v0 (suc$ ?v3 ))))(less$a ?v1 ?v2 ))(less$ (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(less$a (fun_app$a ?v0 ?v3 )(fun_app$a ?v0 (suc$ ?v3 ))))(less$a ?v1 ?v2 ))(less$a (fun_app$a ?v0 ?v1 )(fun_app$a ?v0 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat_a_llist_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(less$ (fun_app$ ?v0 ?v3 )(fun_app$ ?v0 (suc$ ?v3 ))))(= (less$ (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 ?v2 ))(less$a ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(less$a (fun_app$a ?v0 ?v3 )(fun_app$a ?v0 (suc$ ?v3 ))))(= (less$a (fun_app$a ?v0 ?v1 )(fun_app$a ?v0 ?v2 ))(less$a ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_set$ ))(=> (member$ (lappend$ ?v0 ?v1 )(finlsts$ ?v2 ))(member$ ?v0 (finlsts$ ?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 A_llist$ ))(=> (and (member$ ?v0 (finlsts$ ?v1 ))(member$ ?v2 (finlsts$ ?v1 )))(member$ (lappend$ ?v0 ?v2 )(finlsts$ ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(member$ (fun_app$ (ltake$ ?v0 )?v1 )(finlsts$ top$ ))):named a18 ))
(check-sat )
;(get-unsat-core )
