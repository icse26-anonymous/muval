;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_a_llist_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun a$ ()A_set$ )
(declare-fun n$ ()Nat$ )
(declare-fun ta$ ()A_llist$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun plus$ (Nat$ )Nat_nat_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun ldrop$ (A_llist$ )Nat_a_llist_fun$ )
(declare-fun ltake$ (A_llist$ Nat$ )A_llist$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun alllsts$ (A_set$ )A_llist_set$ )
(declare-fun fun_app$ (Nat_a_llist_fun$ Nat$ )A_llist$ )
(declare-fun inflsts$ (A_set$ )A_llist_set$ )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun llength$ (A_llist$ )Nat$ )
(declare-fun fun_app$a (Nat_nat_fun$ Nat$ )Nat$ )
(assert (! (not (member$ (fun_app$ (ldrop$ ta$ )(suc$ n$ ))(inflsts$ a$ ))):named a0 ))
(assert (! (member$ ta$ (inflsts$ a$ )):named a1 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (member$ ?v0 (inflsts$ a$ ))(member$ (fun_app$ (ldrop$ ?v0 )n$ )(inflsts$ a$ )))):named a2 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (ldrop$ lNil$ )?v0 )lNil$ ):pattern ((fun_app$ (ldrop$ lNil$ )?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 Nat$ ))(=> (member$ ?v0 (alllsts$ ?v1 ))(member$ (fun_app$ (ldrop$ ?v0 )?v2 )(alllsts$ ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (ldrop$ ?v0 )zero$ )?v0 ):pattern ((ldrop$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ ))(=> (member$ ?v0 (inflsts$ ?v1 ))(member$ ?v0 (alllsts$ ?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 A_llist$ ))(=> (member$ ?v0 (inflsts$ ?v1 ))(= (lappend$ ?v0 ?v2 )?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (ldrop$ ?v0 )(fun_app$a (plus$ ?v1 )?v2 ))(fun_app$ (ldrop$ (fun_app$ (ldrop$ ?v0 )?v1 ))?v2 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_set$ )(?v2 Nat$ ))(=> (member$ ?v0 (inflsts$ ?v1 ))(= (llength$ (ltake$ ?v0 ?v2 ))?v2 ))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$a (plus$ ?v0 )?v1 )zero$ )(and (= ?v0 zero$ )(= ?v1 zero$ )))):named a14 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (plus$ ?v0 )zero$ )?v0 ):pattern ((plus$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$a (plus$ ?v0 )(suc$ ?v1 ))(suc$ (fun_app$a (plus$ ?v0 )?v1 ))):pattern ((fun_app$a (plus$ ?v0 )(suc$ ?v1 ))))):named a16 ))
(check-sat )
;(get-unsat-core )
