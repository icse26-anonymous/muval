;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun l$ ()A_llist$ )
(declare-fun s$ ()A_llist$ )
(declare-fun t$ ()A_llist$ )
(declare-fun x$ ()A_llist$ )
(declare-fun ta$ ()A_llist$ )
(declare-fun xa$ ()A_llist$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun fun_app$ (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun less_eq$ (A_llist$ )A_llist_bool_fun$ )
(declare-fun prefix_closed$ (A_llist_set$ )Bool )
(declare-fun suffix_closed$ (A_llist_set$ )Bool )
(declare-fun pprefix_closed$ (A_llist_set$ )Bool )
(assert (! (not (or (fun_app$ (less_eq$ l$ )ta$ )(fun_app$ (less_eq$ ta$ )l$ ))):named a0 ))
(assert (! (= l$ lNil$ ):named a1 ))
(assert (! (fun_app$ (less_eq$ l$ )xa$ ):named a2 ))
(assert (! (fun_app$ (less_eq$ t$ )x$ ):named a3 ))
(assert (! (fun_app$ (less_eq$ ta$ )xa$ ):named a4 ))
(assert (! (fun_app$ (less_eq$ s$ )x$ ):named a5 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (less_eq$ ?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ (less_eq$ ?v0 )?v1 )(fun_app$ (less_eq$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ (less_eq$ ?v0 )?v1 )(fun_app$ (less_eq$ ?v1 )?v2 ))(fun_app$ (less_eq$ ?v0 )?v2 ))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ (less_eq$ ?v0 )lNil$ )(= ?v0 lNil$ )):pattern ((less_eq$ ?v0 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (less_eq$ lNil$ )?v0 )):named a10 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (prefix_closed$ ?v0 )(forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(forall ((?v2 A_llist$ ))(=> (fun_app$ (less_eq$ ?v2 )?v1 )(member$ ?v2 ?v0 ))))))):named a11 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (suffix_closed$ ?v0 )(forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(forall ((?v2 A_llist$ ))(=> (fun_app$ (less_eq$ ?v1 )?v2 )(member$ ?v2 ?v0 ))))))):named a12 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ (less_eq$ ?v0 )?v0 )):named a13 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (pprefix_closed$ ?v0 )(forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(forall ((?v2 A_llist$ ))(=> (and (fun_app$ (less_eq$ ?v2 )?v1 )(not (= ?v2 lNil$ )))(member$ ?v2 ?v0 ))))))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= ?v0 ?v1 )(and (fun_app$ (less_eq$ ?v0 )?v1 )(fun_app$ (less_eq$ ?v1 )?v0 )))):named a15 ))
(check-sat )
;(get-unsat-core )
