;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-sort A_llist_a_llist_set_fun$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun a$ ()A_set$ )
(declare-fun s$ ()A_llist$ )
(declare-fun x$ ()A_llist$ )
(declare-fun bot$ ()A_llist_set$ )
(declare-fun lrev$ (A_llist$ )A_llist$ )
(declare-fun suff$ (A_set$ A_llist$ )A_llist_set$ )
(declare-fun ldrop$ (A_llist$ Nat$ )A_llist$ )
(declare-fun ltake$ (A_llist$ Nat$ )A_llist$ )
(declare-fun minus$ (A_llist_set$ A_llist_set$ )A_llist_set$ )
(declare-fun insert$ (A_llist$ A_llist_set$ )A_llist_set$ )
(declare-fun lconst$ (A$ )A_llist$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun finpref$ (A_set$ )A_llist_a_llist_set_fun$ )
(declare-fun fun_app$ (A_llist_a_llist_set_fun$ A_llist$ )A_llist_set$ )
(declare-fun alllstsp$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun finlstsp$ (A_bool_fun$ A_llist$ )Bool )
(declare-fun lbutlast$ (A_llist$ )A_llist$ )
(declare-fun pfinpref$ (A_set$ A_llist$ )A_llist_set$ )
(assert (! (not (= (member$ x$ (pfinpref$ a$ s$ ))(and (member$ x$ (fun_app$ (finpref$ a$ )s$ ))(not (= x$ lNil$ ))))):named a0 ))
(assert (! (= (lbutlast$ lNil$ )lNil$ ):named a1 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_llist$ ))(= (member$ lNil$ (suff$ ?v0 ?v1 ))(= ?v1 lNil$ ))):named a2 ))
(assert (! (forall ((?v0 A$ ))(not (= (lconst$ ?v0 )lNil$ ))):named a3 ))
(assert (! (= (lrev$ lNil$ )lNil$ ):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (ltake$ lNil$ ?v0 )lNil$ ):pattern ((ltake$ lNil$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (ldrop$ lNil$ ?v0 )lNil$ ):pattern ((ldrop$ lNil$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(finlstsp$ ?v0 lNil$ )):named a7 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(alllstsp$ ?v0 lNil$ )):named a8 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_llist$ ))(! (= (pfinpref$ ?v0 ?v1 )(minus$ (fun_app$ (finpref$ ?v0 )?v1 )(insert$ lNil$ bot$ ))):pattern ((pfinpref$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 Nat$ ))(=> (not (= (ldrop$ ?v0 ?v1 )lNil$ ))(not (= ?v0 lNil$ )))):named a10 ))
(assert (! (forall ((?v0 A_set$ ))(! (= (fun_app$ (finpref$ ?v0 )lNil$ )(insert$ lNil$ bot$ )):pattern ((finpref$ ?v0 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ ))(= (insert$ ?v0 (minus$ ?v1 (insert$ ?v0 bot$ )))(insert$ ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_set$ ))(=> (member$ ?v0 ?v1 )(= (minus$ (insert$ ?v0 ?v2 )?v1 )(minus$ ?v2 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist_set$ )(?v2 A_llist_set$ ))(=> (not (member$ ?v0 ?v1 ))(= (minus$ ?v1 (insert$ ?v0 ?v2 ))(minus$ ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (minus$ ?v0 bot$ )?v0 )):named a15 ))
(check-sat )
;(get-unsat-core )
