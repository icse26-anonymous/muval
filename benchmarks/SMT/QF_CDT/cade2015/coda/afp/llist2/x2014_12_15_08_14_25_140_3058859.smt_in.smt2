;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_llist_set$ 0 )
(declare-codatatypes ()((A_llist$ (lNil$ )(lCons$ (lhd$ A$ )(ltl$ A_llist$ )))))
(declare-fun s$ ()A_llist$ )
(declare-fun t$ ()A_llist$ )
(declare-fun x$ ()A_llist$ )
(declare-fun top$ ()A_set$ )
(declare-fun member$ (A_llist$ A_llist_set$ )Bool )
(declare-fun alllsts$ (A_set$ )A_llist_set$ )
(declare-fun finlsts$ (A_set$ )A_llist_set$ )
(declare-fun less_eq$ (A_llist$ A_llist$ )Bool )
(declare-fun prefix_closed$ (A_llist_set$ )Bool )
(declare-fun suffix_closed$ (A_llist_set$ )Bool )
(assert (! (not (or (less_eq$ s$ t$ )(less_eq$ t$ s$ ))):named a0 ))
(assert (! (member$ s$ (finlsts$ top$ )):named a1 ))
(assert (! (less_eq$ s$ x$ ):named a2 ))
(assert (! (less_eq$ t$ x$ ):named a3 ))
(assert (! (forall ((?v0 A_llist$ ))(less_eq$ ?v0 ?v0 )):named a4 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(less_eq$ ?v0 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (prefix_closed$ ?v0 )(forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(forall ((?v2 A_llist$ ))(=> (less_eq$ ?v2 ?v1 )(member$ ?v2 ?v0 ))))))):named a7 ))
(assert (! (forall ((?v0 A_llist_set$ ))(= (suffix_closed$ ?v0 )(forall ((?v1 A_llist$ ))(=> (member$ ?v1 ?v0 )(forall ((?v2 A_llist$ ))(=> (less_eq$ ?v1 ?v2 )(member$ ?v2 ?v0 ))))))):named a8 ))
(assert (! (forall ((?v0 A_llist$ ))(less_eq$ ?v0 ?v0 )):named a9 ))
(assert (! (member$ s$ (alllsts$ top$ )):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_set$ ))(=> (and (less_eq$ ?v0 ?v1 )(member$ ?v1 (finlsts$ ?v2 )))(member$ ?v0 (finlsts$ ?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (= ?v0 ?v1 )(and (less_eq$ ?v0 ?v1 )(less_eq$ ?v1 ?v0 )))):named a12 ))
(check-sat )
;(get-unsat-core )
