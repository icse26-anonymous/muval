;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun$ 0 )
(declare-sort B_a_fun_b_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort A_tree_a_tree_fun$ 0 )
(declare-sort B_tree_b_tree_fun$ 0 )
(declare-sort A_a_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_b_a_fun_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort B_a_a_fun_a_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_a_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_a_fun_fun$ 0 )
(declare-sort B_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort A_a_fun_b_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_tree_b_a_fun_tree_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_b_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun_b_b_b_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$ 0 )
(declare-sort A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$ 0 )
(declare-sort A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$ 0 )
(declare-sort B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))(B_a_fun_tree$ (node$a (select$ B_a_fun$ )(selecta$ B_a_fun_tree$ )(selectb$ B_a_fun_tree$ )))(B_tree$ (node$b (root$a B$ )(left$a B_tree$ )(right$a B_tree$ )))(A_a_b_a_fun_fun_fun_tree$ (node$c (selectc$ A_a_b_a_fun_fun_fun$ )(selectd$ A_a_b_a_fun_fun_fun_tree$ )(selecte$ A_a_b_a_fun_fun_fun_tree$ )))(A_b_a_fun_fun_tree$ (node$d (selectf$ A_b_a_fun_fun$ )(selectg$ A_b_a_fun_fun_tree$ )(selecth$ A_b_a_fun_fun_tree$ )))(A_a_a_fun_fun_tree$ (node$e (selecti$ A_a_a_fun_fun$ )(selectj$ A_a_a_fun_fun_tree$ )(selectk$ A_a_a_fun_fun_tree$ )))(A_a_fun_tree$ (node$f (selectl$ A_a_fun$ )(selectm$ A_a_fun_tree$ )(selectn$ A_a_fun_tree$ )))(A_b_fun_tree$ (node$g (selecto$ A_b_fun$ )(selectp$ A_b_fun_tree$ )(selectq$ A_b_fun_tree$ )))(B_b_a_fun_fun_tree$ (node$h (selectr$ B_b_a_fun_fun$ )(selects$ B_b_a_fun_fun_tree$ )(selectt$ B_b_a_fun_fun_tree$ )))(B_a_a_fun_fun_tree$ (node$i (selectu$ B_a_a_fun_fun$ )(selectv$ B_a_a_fun_fun_tree$ )(selectw$ B_a_a_fun_fun_tree$ )))(B_b_fun_tree$ (node$j (selectx$ B_b_fun$ )(selecty$ B_b_fun_tree$ )(selectz$ B_b_fun_tree$ )))(B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ (node$k (selecua$ B_a_a_fun_fun_a_b_a_fun_fun_fun$ )(selecub$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ )(selecuc$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ )))(B_b_b_a_fun_fun_fun_tree$ (node$l (selecud$ B_b_b_a_fun_fun_fun$ )(selecue$ B_b_b_a_fun_fun_fun_tree$ )(selecuf$ B_b_b_a_fun_fun_fun_tree$ )))(B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ (node$m (selecug$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$ )(selecuh$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ )(selecui$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ )))(B_a_b_a_fun_fun_fun_tree$ (node$n (selecuj$ B_a_b_a_fun_fun_fun$ )(selecuk$ B_a_b_a_fun_fun_fun_tree$ )(selecul$ B_a_b_a_fun_fun_fun_tree$ )))(A_b_b_a_fun_fun_fun_tree$ (node$o (selecum$ A_b_b_a_fun_fun_fun$ )(selecun$ A_b_b_a_fun_fun_fun_tree$ )(selecuo$ A_b_b_a_fun_fun_fun_tree$ )))(B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ (node$p (selecup$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$ )(selecuq$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ )(selecur$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ )))(B_b_a_a_fun_fun_fun_tree$ (node$q (selecus$ B_b_a_a_fun_fun_fun$ )(selecut$ B_b_a_a_fun_fun_fun_tree$ )(selecuu$ B_b_a_a_fun_fun_fun_tree$ )))(B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ (node$r (selecuv$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$ )(selecuw$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ )(selecux$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ )))(B_b_b_fun_fun_tree$ (node$s (selecuy$ B_b_b_fun_fun$ )(selecuz$ B_b_b_fun_fun_tree$ )(selecva$ B_b_b_fun_fun_tree$ )))(B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ (node$t (selecvb$ B_b_b_fun_fun_b_b_b_fun_fun_fun$ )(selecvc$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ )(selecvd$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ )))(A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ (node$u (selecve$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$ )(selecvf$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ )(selecvg$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ )))(A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ (node$v (selecvh$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$ )(selecvi$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ )(selecvj$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ )))(A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ (node$w (selecvk$ A_a_a_fun_fun_a_a_a_fun_fun_fun$ )(selecvl$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ )(selecvm$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ )))(A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ (node$x (selecvn$ A_b_a_fun_fun_b_a_a_fun_fun_fun$ )(selecvo$ A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ )(selecvp$ A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ )))(B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ (node$y (selecvq$ B_b_a_fun_fun_b_b_a_fun_fun_fun$ )(selecvr$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ )(selecvs$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ )))(B_a_fun_b_a_fun_fun_tree$ (node$z (selecvt$ B_a_fun_b_a_fun_fun$ )(selecvu$ B_a_fun_b_a_fun_fun_tree$ )(selecvv$ B_a_fun_b_a_fun_fun_tree$ )))(B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ (node$aa (selecvw$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ )(selecvx$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )(selecvy$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )))(B_b_fun_b_a_fun_fun_tree$ (node$ab (selecvz$ B_b_fun_b_a_fun_fun$ )(selecwa$ B_b_fun_b_a_fun_fun_tree$ )(selecwb$ B_b_fun_b_a_fun_fun_tree$ )))(B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ (node$ac (selecwc$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ )(selecwd$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )(selecwe$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )))(B_a_b_fun_fun_tree$ (node$ad (selecwf$ B_a_b_fun_fun$ )(selecwg$ B_a_b_fun_fun_tree$ )(selecwh$ B_a_b_fun_fun_tree$ )))(B_a_fun_b_b_fun_fun_tree$ (node$ae (selecwi$ B_a_fun_b_b_fun_fun$ )(selecwj$ B_a_fun_b_b_fun_fun_tree$ )(selecwk$ B_a_fun_b_b_fun_fun_tree$ )))(B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ (node$af (selecwl$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$ )(selecwm$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ )(selecwn$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ )))(B_b_fun_b_b_fun_fun_tree$ (node$ag (selecwo$ B_b_fun_b_b_fun_fun$ )(selecwp$ B_b_fun_b_b_fun_fun_tree$ )(selecwq$ B_b_fun_b_b_fun_fun_tree$ )))(B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ (node$ah (selecwr$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$ )(selecws$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ )(selecwt$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ )))(A_b_fun_a_a_fun_fun_tree$ (node$ai (selecwu$ A_b_fun_a_a_fun_fun$ )(selecwv$ A_b_fun_a_a_fun_fun_tree$ )(selecww$ A_b_fun_a_a_fun_fun_tree$ )))(A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ (node$aj (selecwx$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$ )(selecwy$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ )(selecwz$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ )))(A_a_fun_a_a_fun_fun_tree$ (node$ak (selecxa$ A_a_fun_a_a_fun_fun$ )(selecxb$ A_a_fun_a_a_fun_fun_tree$ )(selecxc$ A_a_fun_a_a_fun_fun_tree$ )))(A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ (node$al (selecxd$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )(selecxe$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ )(selecxf$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ )))(B_b_a_fun_a_fun_fun_tree$ (node$am (selecxg$ B_b_a_fun_a_fun_fun$ )(selecxh$ B_b_a_fun_a_fun_fun_tree$ )(selecxi$ B_b_a_fun_a_fun_fun_tree$ )))(B_b_a_fun_fun_b_a_fun_fun_tree$ (node$an (selecxj$ B_b_a_fun_fun_b_a_fun_fun$ )(selecxk$ B_b_a_fun_fun_b_a_fun_fun_tree$ )(selecxl$ B_b_a_fun_fun_b_a_fun_fun_tree$ )))(B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ (node$ao (selecxm$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ )(selecxn$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ )(selecxo$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ )))(B_a_fun_a_fun_tree$ (node$ap (selecxp$ B_a_fun_a_fun$ )(selecxq$ B_a_fun_a_fun_tree$ )(selecxr$ B_a_fun_a_fun_tree$ )))(B_a_a_fun_a_fun_fun_tree$ (node$aq (selecxs$ B_a_a_fun_a_fun_fun$ )(selecxt$ B_a_a_fun_a_fun_fun_tree$ )(selecxu$ B_a_a_fun_a_fun_fun_tree$ )))(B_a_a_fun_fun_b_a_fun_fun_tree$ (node$ar (selecxv$ B_a_a_fun_fun_b_a_fun_fun$ )(selecxw$ B_a_a_fun_fun_b_a_fun_fun_tree$ )(selecxx$ B_a_a_fun_fun_b_a_fun_fun_tree$ )))(B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ (node$as (selecxy$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$ )(selecxz$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ )(selecya$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ )))(A_a_fun_a_fun_tree$ (node$at (selecyb$ A_a_fun_a_fun$ )(selecyc$ A_a_fun_a_fun_tree$ )(selecyd$ A_a_fun_a_fun_tree$ )))(B_b_fun_b_b_a_fun_fun_fun_tree$ (node$au (selecye$ B_b_fun_b_b_a_fun_fun_fun$ )(selecyf$ B_b_fun_b_b_a_fun_fun_fun_tree$ )(selecyg$ B_b_fun_b_b_a_fun_fun_fun_tree$ )))(B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ (node$av (selecyh$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$ )(selecyi$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ )(selecyj$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ )))(B_a_fun_b_b_a_fun_fun_fun_tree$ (node$aw (selecyk$ B_a_fun_b_b_a_fun_fun_fun$ )(selecyl$ B_a_fun_b_b_a_fun_fun_fun_tree$ )(selecym$ B_a_fun_b_b_a_fun_fun_fun_tree$ )))(B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ (node$ax (selecyn$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ )(selecyo$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ )(selecyp$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ )))(A_a_fun_b_a_a_fun_fun_fun_tree$ (node$ay (selecyq$ A_a_fun_b_a_a_fun_fun_fun$ )(selecyr$ A_a_fun_b_a_a_fun_fun_fun_tree$ )(selecys$ A_a_fun_b_a_a_fun_fun_fun_tree$ )))(B_a_fun_a_b_a_fun_fun_fun_tree$ (node$az (selecyt$ B_a_fun_a_b_a_fun_fun_fun$ )(selecyu$ B_a_fun_a_b_a_fun_fun_fun_tree$ )(selecyv$ B_a_fun_a_b_a_fun_fun_fun_tree$ )))(B_a_fun_b_fun_tree$ (node$ba (selecyw$ B_a_fun_b_fun$ )(selecyx$ B_a_fun_b_fun_tree$ )(selecyy$ B_a_fun_b_fun_tree$ )))))
(declare-fun f$ ()B_a_fun_tree$ )
(declare-fun x$ ()B_tree$ )
(declare-fun left$b (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun root$b (B_a_fun_tree$ )B_a_fun$ )
(declare-fun mirror$ (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun right$b (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_C$ ()B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$ ()B_a_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$ ()B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun fun_app$ (A_tree_a_tree_fun$ A_tree$ )A_tree$ )
(declare-fun mirror$a (B_a_a_fun_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun mirror$b (B_tree$ )B_tree$ )
(declare-fun mirror$c (A_tree$ )A_tree$ )
(declare-fun mirror$d (B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun mirror$e (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun mirror$f (A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun mirror$g (B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun mirror$h (B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun mirror$i (A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun mirror$j (B_a_fun_b_fun_tree$ )B_a_fun_b_fun_tree$ )
(declare-fun mirror$k (B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_C$a ()B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$b ()B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$c ()B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$d ()B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ )
(declare-fun tree_C$e ()A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$f ()A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$g ()A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ )
(declare-fun tree_C$h ()A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ )
(declare-fun tree_C$i ()B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$a ()A_a_fun_b_a_a_fun_fun_fun_tree$ )
(declare-fun tree_K$b ()B_b_b_fun_fun_tree$ )
(declare-fun tree_K$c ()B_a_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$d ()A_a_a_fun_fun_tree$ )
(declare-fun tree_K$e ()A_b_a_fun_fun_tree$ )
(declare-fun tree_S$a ()B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$b ()B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ )
(declare-fun tree_S$c ()B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ )
(declare-fun tree_S$d ()A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$e ()A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$f ()B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$g ()B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$h ()B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$i ()B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun fun_app$a (B_a_fun_tree_b_a_fun_tree_fun$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun fun_app$b (B_tree_b_tree_fun$ B_tree$ )B_tree$ )
(declare-fun fun_app$c (B_a_a_fun_fun$ B$ )A_a_fun$ )
(declare-fun fun_app$d (B_b_fun$ B$ )B$ )
(declare-fun fun_app$e (B_b_a_fun_fun$ B$ )B_a_fun$ )
(declare-fun fun_app$f (B_a_fun_b_fun$ B_a_fun$ )B$ )
(declare-fun fun_app$g (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$h (B_a_fun_a_fun$ B_a_fun$ )A$ )
(declare-fun fun_app$i (A_b_fun$ A$ )B$ )
(declare-fun fun_app$j (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$k (A_a_fun$ A$ )A$ )
(declare-fun fun_app$l (B_a_fun$ B$ )A$ )
(declare-fun map_tree$ (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun tree_ap$a (A_a_b_a_fun_fun_fun_tree$ A_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$b (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$c (A_b_fun_tree$ A_tree$ )B_tree$ )
(declare-fun tree_ap$d (B_b_a_fun_fun_tree$ B_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$e (B_a_a_fun_fun_tree$ B_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$f (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun tree_ap$g (A_b_a_fun_fun_tree$ A_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$h (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$i (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$j (B_b_b_a_fun_fun_fun_tree$ B_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$k (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$ )B_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$l (A_b_b_a_fun_fun_fun_tree$ A_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$m (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$ )A_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$n (B_a_b_a_fun_fun_fun_tree$ B_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$o (B_b_a_a_fun_fun_fun_tree$ B_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_ap$p (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ B_b_a_a_fun_fun_fun_tree$ )B_b_a_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$q (B_b_b_fun_fun_tree$ B_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$r (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_b_fun_fun_tree$ )
(declare-fun tree_ap$s (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ A_b_b_a_fun_fun_fun_tree$ )B_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$t (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ A_a_b_a_fun_fun_fun_tree$ )A_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$u (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_ap$v (A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_ap$w (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$x (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$y (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$z (B_b_fun_b_a_fun_fun_tree$ B_b_fun_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$a (A_b_a_fun_fun$ A_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$b (A_b_fun$ A_tree$ )B_tree$ )
(declare-fun map_tree$c (B_a_fun_a_fun$ B_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$d (B_a_fun_b_a_fun_fun$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$e (B_a_fun_b_fun$ B_a_fun_tree$ )B_tree$ )
(declare-fun map_tree$f (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun map_tree$g (B_b_a_fun_fun$ B_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$h (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun tree_ap$aa (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ab (B_a_fun_b_b_fun_fun_tree$ B_a_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$ac (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ B_a_b_fun_fun_tree$ )B_a_fun_b_b_fun_fun_tree$ )
(declare-fun tree_ap$ad (B_a_b_fun_fun_tree$ B_tree$ )A_b_fun_tree$ )
(declare-fun tree_ap$ae (B_b_fun_b_b_fun_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$af (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_fun_b_b_fun_fun_tree$ )
(declare-fun tree_ap$ag (A_b_fun_a_a_fun_fun_tree$ A_b_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$ah (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_b_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$ai (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$aj (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$ak (B_b_a_fun_fun_b_a_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$al (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_a_fun_fun_tree$ )B_b_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$am (B_a_fun_a_fun_tree$ B_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$an (B_b_a_fun_a_fun_fun_tree$ B_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_ap$ao (B_a_a_fun_fun_b_a_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$ap (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_a_fun_fun_tree$ )B_a_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$aq (A_a_fun_a_fun_tree$ A_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$ar (B_a_a_fun_a_fun_fun_tree$ B_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_ap$as (B_b_fun_b_b_a_fun_fun_fun_tree$ B_b_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$at (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$ )B_b_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$au (B_a_fun_b_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$av (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$ )B_a_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$aw (A_a_fun_b_a_a_fun_fun_fun_tree$ A_a_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_ap$ax (B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ay (B_a_fun_b_fun_tree$ B_a_fun_tree$ )B_tree$ )
(declare-fun tree_pure$ (A$ )A_tree$ )
(declare-fun odd_mirror$ (A_tree$ )A_tree$ )
(declare-fun tree_pure$a (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$b (B$ )B_tree$ )
(declare-fun tree_pure$c (B_a_a_fun_fun$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_pure$d (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$e (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$f (B_b_a_fun_fun$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_pure$g (B_a_fun_b_fun$ )B_a_fun_b_fun_tree$ )
(declare-fun tree_pure$h (B_a_fun_b_a_fun_fun$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$i (B_a_fun_a_fun$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_pure$j (A_b_fun$ )A_b_fun_tree$ )
(declare-fun tree_pure$k (A_b_a_fun_fun$ )A_b_a_fun_fun_tree$ )
(declare-fun even_mirror$ ()A_tree_a_tree_fun$ )
(declare-fun odd_mirror$a (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun odd_mirror$b (B_tree$ )B_tree$ )
(declare-fun even_mirror$a ()B_a_fun_tree_b_a_fun_tree_fun$ )
(declare-fun even_mirror$b ()B_tree_b_tree_fun$ )
(declare-fun even_odd_mirror$ (Bool )A_tree_a_tree_fun$ )
(declare-fun even_odd_mirror$a (Bool )B_a_fun_tree_b_a_fun_tree_fun$ )
(declare-fun even_odd_mirror$b (Bool )B_tree_b_tree_fun$ )
(declare-fun even_odd_mirror$c (Bool A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun even_odd_mirror$d (Bool B_a_a_fun_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun even_odd_mirror$e (Bool B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun even_odd_mirror$f (Bool B_a_fun_b_fun_tree$ )B_a_fun_b_fun_tree$ )
(declare-fun even_odd_mirror$g (Bool A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun even_odd_mirror$h (Bool B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun even_odd_mirror$i (Bool B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun even_odd_mirror$j (Bool A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun even_odd_mirror$k (Bool B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(assert (! (not (= (fun_app$ even_mirror$ (tree_ap$ f$ x$ ))(tree_ap$ (fun_app$a even_mirror$a f$ )(fun_app$b even_mirror$b x$ )))):named a0 ))
(assert (! (forall ((?v0 A_a_b_a_fun_fun_fun_tree$ )(?v1 A_a_b_a_fun_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$a ?v0 ?v2 )(tree_ap$a ?v1 ?v2 )))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_a_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$b ?v0 ?v2 )(tree_ap$b ?v1 ?v2 )))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_b_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$c ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$d ?v0 ?v2 )(tree_ap$d ?v1 ?v2 )))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_a_fun_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$e ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$f ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$g ?v0 ?v2 )(tree_ap$g ?v1 ?v2 )))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$h ?v0 ?v2 )(tree_ap$h ?v1 ?v2 )))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$ ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))(= ?v0 ?v1 ))):named a9 ))
(assert (! (= even_mirror$ (even_odd_mirror$ true )):named a10 ))
(assert (! (= even_mirror$a (even_odd_mirror$a true )):named a11 ))
(assert (! (= even_mirror$b (even_odd_mirror$b true )):named a12 ))
(assert (! (forall ((?v0 A$ ))(= (fun_app$ even_mirror$ (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a13 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (fun_app$a even_mirror$a (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a14 ))
(assert (! (forall ((?v0 B$ ))(= (fun_app$b even_mirror$b (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a15 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 A_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$g (tree_ap$i tree_C$ ?v0 )?v1 )?v2 )(tree_ap$h (tree_ap$e ?v0 ?v2 )?v1 ))):named a16 ))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$d (tree_ap$j (tree_ap$k tree_C$a ?v0 )?v1 )?v2 )(tree_ap$d (tree_ap$j ?v0 ?v2 )?v1 ))):named a17 ))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$ )(?v1 A_tree$ )(?v2 B_tree$ ))(= (tree_ap$d (tree_ap$l (tree_ap$m tree_C$b ?v0 )?v1 )?v2 )(tree_ap$g (tree_ap$n ?v0 ?v2 )?v1 ))):named a18 ))
(assert (! (forall ((?v0 B_b_a_a_fun_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$o (tree_ap$p tree_C$c ?v0 )?v1 )?v2 )(tree_ap$e (tree_ap$o ?v0 ?v2 )?v1 ))):named a19 ))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$f (tree_ap$q (tree_ap$r tree_C$d ?v0 )?v1 )?v2 )(tree_ap$f (tree_ap$q ?v0 ?v2 )?v1 ))):named a20 ))
(assert (! (forall ((?v0 A_b_b_a_fun_fun_fun_tree$ )(?v1 B_tree$ )(?v2 A_tree$ ))(= (tree_ap$g (tree_ap$n (tree_ap$s tree_C$e ?v0 )?v1 )?v2 )(tree_ap$d (tree_ap$l ?v0 ?v2 )?v1 ))):named a21 ))
(assert (! (forall ((?v0 A_a_b_a_fun_fun_fun_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(= (tree_ap$g (tree_ap$a (tree_ap$t tree_C$f ?v0 )?v1 )?v2 )(tree_ap$g (tree_ap$a ?v0 ?v2 )?v1 ))):named a22 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(= (tree_ap$h (tree_ap$b (tree_ap$u tree_C$g ?v0 )?v1 )?v2 )(tree_ap$h (tree_ap$b ?v0 ?v2 )?v1 ))):named a23 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 B_tree$ )(?v2 A_tree$ ))(= (tree_ap$h (tree_ap$e (tree_ap$v tree_C$h ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$g ?v0 ?v2 )?v1 ))):named a24 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$d (tree_ap$w tree_C$i ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$d ?v0 ?v2 )?v1 ))):named a25 ))
(assert (! (forall ((?v0 A_tree$ ))(= (root$ (fun_app$ even_mirror$ ?v0 ))(root$ ?v0 ))):named a26 ))
(assert (! (forall ((?v0 B_a_fun_tree$ ))(= (root$b (fun_app$a even_mirror$a ?v0 ))(root$b ?v0 ))):named a27 ))
(assert (! (forall ((?v0 B_tree$ ))(= (root$a (fun_app$b even_mirror$b ?v0 ))(root$a ?v0 ))):named a28 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$x (tree_ap$y tree_S$ ?v0 )?v1 )?v2 )(tree_ap$h (tree_ap$e ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$z (tree_ap$aa tree_S$a ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$d ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$f (tree_ap$ab (tree_ap$ac tree_S$b ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$ad ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$f (tree_ap$ae (tree_ap$af tree_S$c ?v0 )?v1 )?v2 )(tree_ap$f (tree_ap$q ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$h (tree_ap$ag (tree_ap$ah tree_S$d ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$g ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$h (tree_ap$ai (tree_ap$aj tree_S$e ?v0 )?v1 )?v2 )(tree_ap$h (tree_ap$b ?v0 ?v2 )(tree_ap$h ?v1 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ak (tree_ap$al tree_S$f ?v0 )?v1 )?v2 )(tree_ap$am (tree_ap$an ?v0 ?v2 )(tree_ap$d ?v1 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 B_a_a_fun_a_fun_fun_tree$ )(?v1 B_a_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ao (tree_ap$ap tree_S$g ?v0 )?v1 )?v2 )(tree_ap$aq (tree_ap$ar ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))):named a36 ))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$d (tree_ap$as (tree_ap$at tree_S$h ?v0 )?v1 )?v2 )(tree_ap$d (tree_ap$j ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))):named a37 ))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$d (tree_ap$au (tree_ap$av tree_S$i ?v0 )?v1 )?v2 )(tree_ap$g (tree_ap$n ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a38 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (map_tree$ ?v0 (fun_app$ even_mirror$ ?v1 ))(fun_app$ even_mirror$ (map_tree$ ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (map_tree$a ?v0 (fun_app$ even_mirror$ ?v1 ))(fun_app$a even_mirror$a (map_tree$a ?v0 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (map_tree$b ?v0 (fun_app$ even_mirror$ ?v1 ))(fun_app$b even_mirror$b (map_tree$b ?v0 ?v1 )))):named a41 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_tree$ ))(= (map_tree$c ?v0 (fun_app$a even_mirror$a ?v1 ))(fun_app$ even_mirror$ (map_tree$c ?v0 ?v1 )))):named a42 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_tree$ ))(= (map_tree$d ?v0 (fun_app$a even_mirror$a ?v1 ))(fun_app$a even_mirror$a (map_tree$d ?v0 ?v1 )))):named a43 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun_tree$ ))(= (map_tree$e ?v0 (fun_app$a even_mirror$a ?v1 ))(fun_app$b even_mirror$b (map_tree$e ?v0 ?v1 )))):named a44 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (map_tree$f ?v0 (fun_app$b even_mirror$b ?v1 ))(fun_app$ even_mirror$ (map_tree$f ?v0 ?v1 )))):named a45 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_tree$ ))(= (map_tree$g ?v0 (fun_app$b even_mirror$b ?v1 ))(fun_app$a even_mirror$a (map_tree$g ?v0 ?v1 )))):named a46 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (map_tree$h ?v0 (fun_app$b even_mirror$b ?v1 ))(fun_app$b even_mirror$b (map_tree$h ?v0 ?v1 )))):named a47 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$d (tree_ap$au tree_K$ ?v0 )?v1 )?v0 )):named a48 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$e (tree_ap$aw tree_K$a ?v0 )?v1 )?v0 )):named a49 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_tree$ ))(= (tree_ap$f (tree_ap$q tree_K$b ?v0 )?v1 )?v0 )):named a50 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$g (tree_ap$ax tree_K$c ?v0 )?v1 )?v0 )):named a51 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (tree_ap$h (tree_ap$b tree_K$d ?v0 )?v1 )?v0 )):named a52 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_ap$g tree_K$e ?v0 )?v1 )?v0 )):named a53 ))
(assert (! (forall ((?v0 A_tree$ ))(= (right$ (odd_mirror$ ?v0 ))(fun_app$ even_mirror$ (right$ ?v0 )))):named a54 ))
(assert (! (forall ((?v0 B_a_fun_tree$ ))(= (right$b (odd_mirror$a ?v0 ))(fun_app$a even_mirror$a (right$b ?v0 )))):named a55 ))
(assert (! (forall ((?v0 B_tree$ ))(= (right$a (odd_mirror$b ?v0 ))(fun_app$b even_mirror$b (right$a ?v0 )))):named a56 ))
(assert (! (forall ((?v0 A_tree$ ))(= (left$ (odd_mirror$ ?v0 ))(fun_app$ even_mirror$ (left$ ?v0 )))):named a57 ))
(assert (! (forall ((?v0 B_a_fun_tree$ ))(= (left$b (odd_mirror$a ?v0 ))(fun_app$a even_mirror$a (left$b ?v0 )))):named a58 ))
(assert (! (forall ((?v0 B_tree$ ))(= (left$a (odd_mirror$b ?v0 ))(fun_app$b even_mirror$b (left$a ?v0 )))):named a59 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (mirror$ (tree_ap$e ?v0 ?v1 ))(tree_ap$e (mirror$a ?v0 )(mirror$b ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (mirror$c (tree_ap$h ?v0 ?v1 ))(tree_ap$h (mirror$ ?v0 )(mirror$c ?v1 )))):named a61 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (mirror$c (tree_ap$am ?v0 ?v1 ))(tree_ap$am (mirror$d ?v0 )(mirror$e ?v1 )))):named a62 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (mirror$e (tree_ap$g ?v0 ?v1 ))(tree_ap$g (mirror$f ?v0 )(mirror$c ?v1 )))):named a63 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (mirror$e (tree_ap$x ?v0 ?v1 ))(tree_ap$x (mirror$g ?v0 )(mirror$e ?v1 )))):named a64 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (mirror$e (tree_ap$d ?v0 ?v1 ))(tree_ap$d (mirror$h ?v0 )(mirror$b ?v1 )))):named a65 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (mirror$b (tree_ap$c ?v0 ?v1 ))(tree_ap$c (mirror$i ?v0 )(mirror$c ?v1 )))):named a66 ))
(assert (! (forall ((?v0 B_a_fun_b_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (mirror$b (tree_ap$ay ?v0 ?v1 ))(tree_ap$ay (mirror$j ?v0 )(mirror$e ?v1 )))):named a67 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (mirror$b (tree_ap$f ?v0 ?v1 ))(tree_ap$f (mirror$k ?v0 )(mirror$b ?v1 )))):named a68 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (mirror$c (tree_ap$ ?v0 ?v1 ))(tree_ap$ (mirror$e ?v0 )(mirror$b ?v1 )))):named a69 ))
(assert (! (forall ((?v0 Bool )(?v1 B_a_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (even_odd_mirror$c ?v0 (tree_ap$e ?v1 ?v2 ))(tree_ap$e (even_odd_mirror$d ?v0 ?v1 )(fun_app$b (even_odd_mirror$b ?v0 )?v2 )))):named a70 ))
(assert (! (forall ((?v0 Bool )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (fun_app$b (even_odd_mirror$b ?v0 )(tree_ap$f ?v1 ?v2 ))(tree_ap$f (even_odd_mirror$e ?v0 ?v1 )(fun_app$b (even_odd_mirror$b ?v0 )?v2 )))):named a71 ))
(assert (! (forall ((?v0 Bool )(?v1 B_a_fun_b_fun_tree$ )(?v2 B_a_fun_tree$ ))(= (fun_app$b (even_odd_mirror$b ?v0 )(tree_ap$ay ?v1 ?v2 ))(tree_ap$ay (even_odd_mirror$f ?v0 ?v1 )(fun_app$a (even_odd_mirror$a ?v0 )?v2 )))):named a72 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_fun_tree$ )(?v2 A_tree$ ))(= (fun_app$b (even_odd_mirror$b ?v0 )(tree_ap$c ?v1 ?v2 ))(tree_ap$c (even_odd_mirror$g ?v0 ?v1 )(fun_app$ (even_odd_mirror$ ?v0 )?v2 )))):named a73 ))
(assert (! (forall ((?v0 Bool )(?v1 B_b_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (fun_app$a (even_odd_mirror$a ?v0 )(tree_ap$d ?v1 ?v2 ))(tree_ap$d (even_odd_mirror$h ?v0 ?v1 )(fun_app$b (even_odd_mirror$b ?v0 )?v2 )))):named a74 ))
(assert (! (forall ((?v0 Bool )(?v1 B_a_fun_b_a_fun_fun_tree$ )(?v2 B_a_fun_tree$ ))(= (fun_app$a (even_odd_mirror$a ?v0 )(tree_ap$x ?v1 ?v2 ))(tree_ap$x (even_odd_mirror$i ?v0 ?v1 )(fun_app$a (even_odd_mirror$a ?v0 )?v2 )))):named a75 ))
(assert (! (forall ((?v0 Bool )(?v1 A_b_a_fun_fun_tree$ )(?v2 A_tree$ ))(= (fun_app$a (even_odd_mirror$a ?v0 )(tree_ap$g ?v1 ?v2 ))(tree_ap$g (even_odd_mirror$j ?v0 ?v1 )(fun_app$ (even_odd_mirror$ ?v0 )?v2 )))):named a76 ))
(assert (! (forall ((?v0 Bool )(?v1 B_a_fun_a_fun_tree$ )(?v2 B_a_fun_tree$ ))(= (fun_app$ (even_odd_mirror$ ?v0 )(tree_ap$am ?v1 ?v2 ))(tree_ap$am (even_odd_mirror$k ?v0 ?v1 )(fun_app$a (even_odd_mirror$a ?v0 )?v2 )))):named a77 ))
(assert (! (forall ((?v0 Bool )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (fun_app$ (even_odd_mirror$ ?v0 )(tree_ap$h ?v1 ?v2 ))(tree_ap$h (even_odd_mirror$c ?v0 ?v1 )(fun_app$ (even_odd_mirror$ ?v0 )?v2 )))):named a78 ))
(assert (! (forall ((?v0 Bool )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (fun_app$ (even_odd_mirror$ ?v0 )(tree_ap$ ?v1 ?v2 ))(tree_ap$ (fun_app$a (even_odd_mirror$a ?v0 )?v1 )(fun_app$b (even_odd_mirror$b ?v0 )?v2 )))):named a79 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$e (tree_pure$c ?v0 )(tree_pure$b ?v1 ))(tree_pure$d (fun_app$c ?v0 ?v1 )))):named a80 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (tree_ap$f (tree_pure$e ?v0 )(tree_pure$b ?v1 ))(tree_pure$b (fun_app$d ?v0 ?v1 )))):named a81 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$d (tree_pure$f ?v0 )(tree_pure$b ?v1 ))(tree_pure$a (fun_app$e ?v0 ?v1 )))):named a82 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$ay (tree_pure$g ?v0 )(tree_pure$a ?v1 ))(tree_pure$b (fun_app$f ?v0 ?v1 )))):named a83 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$x (tree_pure$h ?v0 )(tree_pure$a ?v1 ))(tree_pure$a (fun_app$g ?v0 ?v1 )))):named a84 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$am (tree_pure$i ?v0 )(tree_pure$a ?v1 ))(tree_pure$ (fun_app$h ?v0 ?v1 )))):named a85 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (tree_ap$c (tree_pure$j ?v0 )(tree_pure$ ?v1 ))(tree_pure$b (fun_app$i ?v0 ?v1 )))):named a86 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ ))(= (tree_ap$g (tree_pure$k ?v0 )(tree_pure$ ?v1 ))(tree_pure$a (fun_app$j ?v0 ?v1 )))):named a87 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (tree_ap$h (tree_pure$d ?v0 )(tree_pure$ ?v1 ))(tree_pure$ (fun_app$k ?v0 ?v1 )))):named a88 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (tree_ap$ (tree_pure$a ?v0 )(tree_pure$b ?v1 ))(tree_pure$ (fun_app$l ?v0 ?v1 )))):named a89 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ ))(= (map_tree$g ?v0 (tree_pure$b ?v1 ))(tree_pure$a (fun_app$e ?v0 ?v1 )))):named a90 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ ))(= (map_tree$e ?v0 (tree_pure$a ?v1 ))(tree_pure$b (fun_app$f ?v0 ?v1 )))):named a91 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ ))(= (map_tree$d ?v0 (tree_pure$a ?v1 ))(tree_pure$a (fun_app$g ?v0 ?v1 )))):named a92 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ ))(= (map_tree$c ?v0 (tree_pure$a ?v1 ))(tree_pure$ (fun_app$h ?v0 ?v1 )))):named a93 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (map_tree$h ?v0 (tree_pure$b ?v1 ))(tree_pure$b (fun_app$d ?v0 ?v1 )))):named a94 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (map_tree$f ?v0 (tree_pure$b ?v1 ))(tree_pure$ (fun_app$l ?v0 ?v1 )))):named a95 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ ))(= (map_tree$a ?v0 (tree_pure$ ?v1 ))(tree_pure$a (fun_app$j ?v0 ?v1 )))):named a96 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (map_tree$b ?v0 (tree_pure$ ?v1 ))(tree_pure$b (fun_app$i ?v0 ?v1 )))):named a97 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$k ?v0 ?v1 )))):named a98 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun_tree$ ))(= (root$a (map_tree$e ?v0 ?v1 ))(fun_app$f ?v0 (root$b ?v1 )))):named a99 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_tree$ ))(= (root$b (map_tree$g ?v0 ?v1 ))(fun_app$e ?v0 (root$a ?v1 )))):named a100 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_tree$ ))(= (root$b (map_tree$d ?v0 ?v1 ))(fun_app$g ?v0 (root$b ?v1 )))):named a101 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_tree$ ))(= (root$ (map_tree$c ?v0 ?v1 ))(fun_app$h ?v0 (root$b ?v1 )))):named a102 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (root$a (map_tree$h ?v0 ?v1 ))(fun_app$d ?v0 (root$a ?v1 )))):named a103 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (root$ (map_tree$f ?v0 ?v1 ))(fun_app$l ?v0 (root$a ?v1 )))):named a104 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (root$b (map_tree$a ?v0 ?v1 ))(fun_app$j ?v0 (root$ ?v1 )))):named a105 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (root$a (map_tree$b ?v0 ?v1 ))(fun_app$i ?v0 (root$ ?v1 )))):named a106 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$k ?v0 (root$ ?v1 )))):named a107 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun_tree$ ))(= (root$a (map_tree$e ?v0 ?v1 ))(fun_app$f ?v0 (root$b ?v1 )))):named a108 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_tree$ ))(= (root$b (map_tree$g ?v0 ?v1 ))(fun_app$e ?v0 (root$a ?v1 )))):named a109 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_tree$ ))(= (root$b (map_tree$d ?v0 ?v1 ))(fun_app$g ?v0 (root$b ?v1 )))):named a110 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_tree$ ))(= (root$ (map_tree$c ?v0 ?v1 ))(fun_app$h ?v0 (root$b ?v1 )))):named a111 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (root$a (map_tree$h ?v0 ?v1 ))(fun_app$d ?v0 (root$a ?v1 )))):named a112 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (root$ (map_tree$f ?v0 ?v1 ))(fun_app$l ?v0 (root$a ?v1 )))):named a113 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (root$b (map_tree$a ?v0 ?v1 ))(fun_app$j ?v0 (root$ ?v1 )))):named a114 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (root$a (map_tree$b ?v0 ?v1 ))(fun_app$i ?v0 (root$ ?v1 )))):named a115 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$k ?v0 (root$ ?v1 )))):named a116 ))
(check-sat )
;(get-unsat-core )
