;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_fun_set$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun$ 0 )
(declare-sort A_a_stream_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort A_a_a_fun_fun_set$ 0 )
(declare-sort A_a_fun_a_fun_set$ 0 )
(declare-sort A_a_fun_stream_set$ 0 )
(declare-sort A_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun_a_fun$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort A_a_fun_a_stream_fun$ 0 )
(declare-sort A_stream_a_a_fun_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_set$ 0 )
(declare-sort A_a_a_fun_fun_stream_set$ 0 )
(declare-sort A_a_fun_a_fun_stream_set$ 0 )
(declare-sort A_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_fun_stream_stream_set$ 0 )
(declare-sort A_stream_stream_stream_set$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_stream_set$ 0 )
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_fun_stream_a_a_fun_stream_fun$ 0 )
(declare-sort A_a_stream_fun_a_a_stream_fun_fun$ 0 )
(declare-sort A_stream_a_fun_a_stream_a_fun_fun$ 0 )
(declare-sort A_stream_stream_a_stream_stream_fun$ 0 )
(declare-sort A_a_a_fun_a_fun_fun_a_a_a_fun_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_stream_fun_a_a_fun_a_stream_fun_fun$ 0 )
(declare-sort A_stream_a_a_fun_fun_a_stream_a_a_fun_fun_fun$ 0 )
(declare-sort A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))(A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))(A_a_fun_a_a_fun_fun_stream$ (sCons$a (select$ A_a_fun_a_a_fun_fun$ )(selecta$ A_a_fun_a_a_fun_fun_stream$ )))(A_a_fun_a_fun_stream$ (sCons$b (selectb$ A_a_fun_a_fun$ )(selectc$ A_a_fun_a_fun_stream$ )))(A_a_a_fun_fun_stream$ (sCons$c (selectd$ A_a_a_fun_fun$ )(selecte$ A_a_a_fun_fun_stream$ )))(A_stream_stream$ (sCons$d (shd$a A_stream$ )(stl$a A_stream_stream$ )))(A_a_fun_stream$ (sCons$e (selectf$ A_a_fun$ )(selectg$ A_a_fun_stream$ )))(A_a_fun_a_a_fun_fun_tree$ (node$a (selecth$ A_a_fun_a_a_fun_fun$ )(selecti$ A_a_fun_a_a_fun_fun_tree$ )(selectj$ A_a_fun_a_a_fun_fun_tree$ )))(A_a_fun_a_fun_tree$ (node$b (selectk$ A_a_fun_a_fun$ )(selectl$ A_a_fun_a_fun_tree$ )(selectm$ A_a_fun_a_fun_tree$ )))(A_a_a_fun_fun_tree$ (node$c (selectn$ A_a_a_fun_fun$ )(selecto$ A_a_a_fun_fun_tree$ )(selectp$ A_a_a_fun_fun_tree$ )))(A_a_fun_tree$ (node$d (selectq$ A_a_fun$ )(selectr$ A_a_fun_tree$ )(selects$ A_a_fun_tree$ )))(A_a_stream_fun_stream$ (sCons$f (selectt$ A_a_stream_fun$ )(selectu$ A_a_stream_fun_stream$ )))(A_stream_a_fun_stream$ (sCons$g (selectv$ A_stream_a_fun$ )(selectw$ A_stream_a_fun_stream$ )))(A_stream_a_stream_fun_stream$ (sCons$h (selectx$ A_stream_a_stream_fun$ )(selecty$ A_stream_a_stream_fun_stream$ )))(A_a_fun_a_stream_fun_stream$ (sCons$i (selectz$ A_a_fun_a_stream_fun$ )(selecua$ A_a_fun_a_stream_fun_stream$ )))(A_stream_a_a_fun_fun_stream$ (sCons$j (selecub$ A_stream_a_a_fun_fun$ )(selecuc$ A_stream_a_a_fun_fun_stream$ )))(A_a_a_fun_a_fun_fun_stream$ (sCons$k (selecud$ A_a_a_fun_a_fun_fun$ )(selecue$ A_a_a_fun_a_fun_fun_stream$ )))))
(declare-sort Dir$ 0)
(declare-sort Dir_list$ 0)
(declare-fun l$ ()Dir$)
(declare-fun r$ ()Dir$)
(declare-fun nil$ ()Dir_list$)
(declare-fun hd$ (Dir_list$)Dir$)
(declare-fun tl$ (Dir_list$)Dir_list$)
(declare-fun cons$ (Dir$ Dir_list$ )Dir_list$)
(declare-codatatypes ()((A_a_fun_stream_stream$ (sCons$l (shd$b A_a_fun_stream$ )(stl$b A_a_fun_stream_stream$ )))(A_stream_stream_stream$ (sCons$m (shd$c A_stream_stream$ )(stl$c A_stream_stream_stream$ )))(A_a_a_fun_a_fun_fun_tree$ (node$e (selecuf$ A_a_a_fun_a_fun_fun$ )(selecug$ A_a_a_fun_a_fun_fun_tree$ )(selecuh$ A_a_a_fun_a_fun_fun_tree$ )))(A_a_a_a_fun_fun_fun_tree$ (node$f (selecui$ A_a_a_a_fun_fun_fun$ )(selecuj$ A_a_a_a_fun_fun_fun_tree$ )(selecuk$ A_a_a_a_fun_fun_fun_tree$ )))(A_a_fun_a_fun_a_fun_tree$ (node$g (selecul$ A_a_fun_a_fun_a_fun$ )(selecum$ A_a_fun_a_fun_a_fun_tree$ )(selecun$ A_a_fun_a_fun_a_fun_tree$ )))(A_a_a_fun_fun_a_fun_tree$ (node$h (selecuo$ A_a_a_fun_fun_a_fun$ )(selecup$ A_a_a_fun_fun_a_fun_tree$ )(selecuq$ A_a_a_fun_fun_a_fun_tree$ )))(A_a_a_fun_a_a_fun_fun_fun_tree$ (node$i (selecur$ A_a_a_fun_a_a_fun_fun_fun$ )(selecus$ A_a_a_fun_a_a_fun_fun_fun_tree$ )(selecut$ A_a_a_fun_a_a_fun_fun_fun_tree$ )))(A_a_fun_a_a_fun_a_fun_fun_tree$ (node$j (selecuu$ A_a_fun_a_a_fun_a_fun_fun$ )(selecuv$ A_a_fun_a_a_fun_a_fun_fun_tree$ )(selecuw$ A_a_fun_a_a_fun_a_fun_fun_tree$ )))))
(declare-fun x$ ()A$ )
(declare-fun id$ ()A_a_fun$ )
(declare-fun id$a ()A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun id$b ()A_a_fun_a_fun_a_a_fun_a_fun_fun$ )
(declare-fun id$c ()A_a_a_fun_fun_a_a_a_fun_fun_fun$ )
(declare-fun id$d ()A_stream_a_stream_fun$ )
(declare-fun id$e ()A_a_fun_a_a_fun_fun$ )
(declare-fun id$f ()A_a_stream_fun_a_a_stream_fun_fun$ )
(declare-fun id$g ()A_stream_a_fun_a_stream_a_fun_fun$ )
(declare-fun id$h ()A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ )
(declare-fun id$i ()A_a_fun_a_stream_fun_a_a_fun_a_stream_fun_fun$ )
(declare-fun id$j ()A_stream_a_a_fun_fun_a_stream_a_a_fun_fun_fun$ )
(declare-fun id$k ()A_a_a_fun_a_fun_fun_a_a_a_fun_a_fun_fun_fun$ )
(declare-fun id$l ()A_a_fun_stream_a_a_fun_stream_fun$ )
(declare-fun id$m ()A_stream_stream_a_stream_stream_fun$ )
(declare-fun smap$ (A_a_fun$ )A_stream_a_stream_fun$ )
(declare-fun smap$a (A_a_a_fun_fun$ A_stream$ )A_a_fun_stream$ )
(declare-fun smap$b (A_a_fun_a_fun$ A_a_fun_stream$ )A_stream$ )
(declare-fun smap$c (A_a_fun_a_a_fun_fun$ A_a_fun_stream$ )A_a_fun_stream$ )
(declare-fun smap$d (A_a_stream_fun$ A_stream$ )A_stream_stream$ )
(declare-fun smap$e (A_stream_a_fun$ A_stream_stream$ )A_stream$ )
(declare-fun smap$f (A_stream_a_stream_fun$ A_stream_stream$ )A_stream_stream$ )
(declare-fun smap$g (A_a_fun_a_stream_fun$ A_a_fun_stream$ )A_stream_stream$ )
(declare-fun smap$h (A_stream_a_a_fun_fun$ A_stream_stream$ )A_a_fun_stream$ )
(declare-fun smap$i (A_a_a_fun_a_fun_fun$ A_stream$ )A_a_fun_a_fun_stream$ )
(declare-fun smap$j (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun_stream$ )A_a_fun_a_a_fun_fun_stream$ )
(declare-fun smap$k (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun_stream$ )A_a_fun_a_fun_stream$ )
(declare-fun smap$l (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun_stream$ )A_a_a_fun_fun_stream$ )
(declare-fun st_ap$ (A_a_fun_stream$ )A_stream_a_stream_fun$ )
(declare-fun member$ (A_a_fun_stream$ A_a_fun_stream_set$ )Bool )
(declare-fun st_ap$a (A_a_a_fun_fun_stream$ A_stream$ )A_a_fun_stream$ )
(declare-fun st_ap$b (A_a_fun_a_fun_stream$ A_a_fun_stream$ )A_stream$ )
(declare-fun st_ap$c (A_a_fun_a_a_fun_fun_stream$ A_a_fun_stream$ )A_a_fun_stream$ )
(declare-fun st_ap$d (A_a_stream_fun_stream$ A_stream$ )A_stream_stream$ )
(declare-fun st_ap$e (A_stream_a_fun_stream$ A_stream_stream$ )A_stream$ )
(declare-fun st_ap$f (A_stream_a_stream_fun_stream$ A_stream_stream$ )A_stream_stream$ )
(declare-fun st_ap$g (A_a_fun_a_stream_fun_stream$ A_a_fun_stream$ )A_stream_stream$ )
(declare-fun st_ap$h (A_stream_a_a_fun_fun_stream$ A_stream_stream$ )A_a_fun_stream$ )
(declare-fun st_ap$i (A_a_a_fun_a_fun_fun_stream$ A_stream$ )A_a_fun_a_fun_stream$ )
(declare-fun stream$ (A_tree$ )A_stream$ )
(declare-fun fun_app$ (A_a_stream_fun$ A$ )A_stream$ )
(declare-fun member$a (A_a_fun_stream_stream$ A_a_fun_stream_stream_set$ )Bool )
(declare-fun member$b (A_stream_stream$ A_stream_stream_set$ )Bool )
(declare-fun member$c (A_stream_stream_stream$ A_stream_stream_stream_set$ )Bool )
(declare-fun member$d (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_set$ )Bool )
(declare-fun member$e (A_a_fun_a_a_fun_fun_stream$ A_a_fun_a_a_fun_fun_stream_set$ )Bool )
(declare-fun member$f (A_a_fun_a_fun$ A_a_fun_a_fun_set$ )Bool )
(declare-fun member$g (A_a_fun_a_fun_stream$ A_a_fun_a_fun_stream_set$ )Bool )
(declare-fun member$h (A_a_a_fun_fun$ A_a_a_fun_fun_set$ )Bool )
(declare-fun member$i (A_a_a_fun_fun_stream$ A_a_a_fun_fun_stream_set$ )Bool )
(declare-fun member$j (A_stream$ A_stream_set$ )Bool )
(declare-fun member$k (A_a_fun$ A_a_fun_set$ )Bool )
(declare-fun member$l (A$ A_set$ )Bool )
(declare-fun streams$ (A_a_fun_stream_set$ )A_a_fun_stream_stream_set$ )
(declare-fun tree_ap$ (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun fun_app$a (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun fun_app$b (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$ )A_a_fun_a_fun$ )
(declare-fun fun_app$c (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$ )A_a_a_fun_fun$ )
(declare-fun fun_app$d (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun fun_app$e (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$f (A_a_fun$ A$ )A$ )
(declare-fun fun_app$g (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$h (A_a_fun_a_fun$ A_a_fun$ )A$ )
(declare-fun fun_app$i (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$j (A_a_fun_a_stream_fun$ A_a_fun$ )A_stream$ )
(declare-fun fun_app$k (A_stream_a_a_fun_fun$ A_stream$ )A_a_fun$ )
(declare-fun fun_app$l (A_a_a_fun_a_fun_fun$ A$ )A_a_fun_a_fun$ )
(declare-fun fun_app$m (A_a_a_a_fun_fun_fun$ A$ )A_a_a_fun_fun$ )
(declare-fun fun_app$n (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun$ )A$ )
(declare-fun fun_app$o (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun$ )A$ )
(declare-fun fun_app$p (A_a_a_fun_a_a_fun_fun_fun$ A$ )A_a_fun_a_a_fun_fun$ )
(declare-fun fun_app$q (A_a_fun_a_a_fun_a_fun_fun$ A_a_fun$ )A_a_fun_a_fun$ )
(declare-fun map_tree$ (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun siterate$ (A_a_fun$ )A_a_stream_fun$ )
(declare-fun streams$a (A_stream_stream_set$ )A_stream_stream_stream_set$ )
(declare-fun streams$b (A_a_fun_a_a_fun_fun_set$ )A_a_fun_a_a_fun_fun_stream_set$ )
(declare-fun streams$c (A_a_fun_a_fun_set$ )A_a_fun_a_fun_stream_set$ )
(declare-fun streams$d (A_a_a_fun_fun_set$ )A_a_a_fun_fun_stream_set$ )
(declare-fun streams$e (A_stream_set$ )A_stream_stream_set$ )
(declare-fun streams$f (A_a_fun_set$ )A_a_fun_stream_set$ )
(declare-fun streams$g (A_set$ )A_stream_set$ )
(declare-fun tree_ap$a (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$b (A_a_fun_a_fun_tree$ A_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$c (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$d (A_a_a_fun_a_fun_fun_tree$ A_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_ap$e (A_a_a_a_fun_fun_fun_tree$ A_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_ap$f (A_a_fun_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$g (A_a_a_fun_fun_a_fun_tree$ A_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun tree_ap$h (A_a_a_fun_a_a_fun_fun_fun_tree$ A_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$i (A_a_fun_a_a_fun_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun map_tree$a (A_a_a_fun_fun$ A_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$b (A_a_fun_a_fun$ A_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$c (A_a_fun_a_a_fun_fun$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$d (A_a_a_fun_a_fun_fun$ A_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun map_tree$e (A_a_a_a_fun_fun_fun$ A_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun map_tree$f (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$g (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun map_tree$h (A_a_a_fun_a_a_fun_fun_fun$ A_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun map_tree$i (A_a_fun_a_a_fun_a_fun_fun$ A_a_fun_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun siterate$a (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun_stream$ )
(declare-fun siterate$b (A_a_fun_a_fun_a_a_fun_a_fun_fun$ A_a_fun_a_fun$ )A_a_fun_a_fun_stream$ )
(declare-fun siterate$c (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$ )A_a_a_fun_fun_stream$ )
(declare-fun siterate$d (A_stream_a_stream_fun$ A_stream$ )A_stream_stream$ )
(declare-fun siterate$e (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun_stream$ )
(declare-fun siterate$f (A_a_stream_fun_a_a_stream_fun_fun$ A_a_stream_fun$ )A_a_stream_fun_stream$ )
(declare-fun siterate$g (A_stream_a_fun_a_stream_a_fun_fun$ A_stream_a_fun$ )A_stream_a_fun_stream$ )
(declare-fun siterate$h (A_stream_a_stream_fun_a_stream_a_stream_fun_fun$ A_stream_a_stream_fun$ )A_stream_a_stream_fun_stream$ )
(declare-fun siterate$i (A_a_fun_a_stream_fun_a_a_fun_a_stream_fun_fun$ A_a_fun_a_stream_fun$ )A_a_fun_a_stream_fun_stream$ )
(declare-fun siterate$j (A_stream_a_a_fun_fun_a_stream_a_a_fun_fun_fun$ A_stream_a_a_fun_fun$ )A_stream_a_a_fun_fun_stream$ )
(declare-fun siterate$k (A_a_a_fun_a_fun_fun_a_a_a_fun_a_fun_fun_fun$ A_a_a_fun_a_fun_fun$ )A_a_a_fun_a_fun_fun_stream$ )
(declare-fun siterate$l (A_a_fun_stream_a_a_fun_stream_fun$ A_a_fun_stream$ )A_a_fun_stream_stream$ )
(declare-fun siterate$m (A_stream_stream_a_stream_stream_fun$ A_stream_stream$ )A_stream_stream_stream$ )
(declare-fun tree_chop$ (A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_pure$ (A$ )A_tree$ )
(declare-fun tree_chop$a (A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_chop$b (A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_chop$c (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_chop$d (A_tree$ )A_tree$ )
(declare-fun tree_pure$a (A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_pure$b (A_a_fun_a_fun$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_pure$c (A_a_a_fun_fun$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_pure$d (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$e (A_a_a_fun_a_fun_fun$ )A_a_a_fun_a_fun_fun_tree$ )
(declare-fun tree_pure$f (A_a_a_a_fun_fun_fun$ )A_a_a_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$g (A_a_fun_a_fun_a_fun$ )A_a_fun_a_fun_a_fun_tree$ )
(declare-fun tree_pure$h (A_a_a_fun_fun_a_fun$ )A_a_a_fun_fun_a_fun_tree$ )
(declare-fun tree_pure$i (A_a_a_fun_a_a_fun_fun_fun$ )A_a_a_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$j (A_a_fun_a_a_fun_a_fun_fun$ )A_a_fun_a_a_fun_a_fun_fun_tree$ )
(declare-fun traverse_tree$ (Dir_list$ A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun traverse_tree$a (Dir_list$ A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun traverse_tree$b (Dir_list$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun traverse_tree$c (Dir_list$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun traverse_tree$d (Dir_list$ A_tree$ )A_tree$ )
(assert (! (not (= (stream$ (tree_pure$ x$ ))(fun_app$ (siterate$ id$ )x$ ))):named a0 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun$ ))(= (= (siterate$a id$a ?v0 )(siterate$a id$a ?v1 ))(= ?v0 ?v1 ))):named a1 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_a_fun$ ))(= (= (siterate$b id$b ?v0 )(siterate$b id$b ?v1 ))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_a_a_fun_fun$ ))(= (= (siterate$c id$c ?v0 )(siterate$c id$c ?v1 ))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (= (siterate$d id$d ?v0 )(siterate$d id$d ?v1 ))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ ))(= (= (siterate$e id$e ?v0 )(siterate$e id$e ?v1 ))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (fun_app$ (siterate$ id$ )?v0 )(fun_app$ (siterate$ id$ )?v1 ))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun$ ))(= (= (tree_pure$a ?v0 )(tree_pure$a ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_a_fun$ ))(= (= (tree_pure$b ?v0 )(tree_pure$b ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_a_a_fun_fun$ ))(= (= (tree_pure$c ?v0 )(tree_pure$c ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ ))(= (= (tree_pure$d ?v0 )(tree_pure$d ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (tree_pure$ ?v0 )(tree_pure$ ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ ))(! (= (fun_app$a id$a ?v0 )?v0 ):pattern ((fun_app$a id$a ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ ))(! (= (fun_app$b id$b ?v0 )?v0 ):pattern ((fun_app$b id$b ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(! (= (fun_app$c id$c ?v0 )?v0 ):pattern ((fun_app$c id$c ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$d id$d ?v0 )?v0 ):pattern ((fun_app$d id$d ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$e id$e ?v0 )?v0 ):pattern ((fun_app$e id$e ?v0 )))):named a16 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$f id$ ?v0 )?v0 ):pattern ((fun_app$f id$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$d (st_ap$ (siterate$e id$e ?v0 ))(fun_app$ (siterate$ id$ )?v1 ))(fun_app$ (siterate$ id$ )(fun_app$f ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (st_ap$a (siterate$c id$c ?v0 )(fun_app$ (siterate$ id$ )?v1 ))(siterate$e id$e (fun_app$g ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun$ ))(= (st_ap$b (siterate$b id$b ?v0 )(siterate$e id$e ?v1 ))(fun_app$ (siterate$ id$ )(fun_app$h ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ ))(= (st_ap$c (siterate$a id$a ?v0 )(siterate$e id$e ?v1 ))(siterate$e id$e (fun_app$e ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A$ ))(= (st_ap$d (siterate$f id$f ?v0 )(fun_app$ (siterate$ id$ )?v1 ))(siterate$d id$d (fun_app$ ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream$ ))(= (st_ap$e (siterate$g id$g ?v0 )(siterate$d id$d ?v1 ))(fun_app$ (siterate$ id$ )(fun_app$i ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream$ ))(= (st_ap$f (siterate$h id$h ?v0 )(siterate$d id$d ?v1 ))(siterate$d id$d (fun_app$d ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_a_fun_a_stream_fun$ )(?v1 A_a_fun$ ))(= (st_ap$g (siterate$i id$i ?v0 )(siterate$e id$e ?v1 ))(siterate$d id$d (fun_app$j ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_stream_a_a_fun_fun$ )(?v1 A_stream$ ))(= (st_ap$h (siterate$j id$j ?v0 )(siterate$d id$d ?v1 ))(siterate$e id$e (fun_app$k ?v0 ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$ )(?v1 A$ ))(= (st_ap$i (siterate$k id$k ?v0 )(fun_app$ (siterate$ id$ )?v1 ))(siterate$b id$b (fun_app$l ?v0 ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ ))(! (= (fun_app$a id$a ?v0 )?v0 ):pattern ((fun_app$a id$a ?v0 )))):named a28 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ ))(! (= (fun_app$b id$b ?v0 )?v0 ):pattern ((fun_app$b id$b ?v0 )))):named a29 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(! (= (fun_app$c id$c ?v0 )?v0 ):pattern ((fun_app$c id$c ?v0 )))):named a30 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$d id$d ?v0 )?v0 ):pattern ((fun_app$d id$d ?v0 )))):named a31 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$e id$e ?v0 )?v0 ):pattern ((fun_app$e id$e ?v0 )))):named a32 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$f id$ ?v0 )?v0 ):pattern ((fun_app$f id$ ?v0 )))):named a33 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_a_fun_fun$ ))(= (traverse_tree$ ?v0 (tree_pure$a ?v1 ))(tree_pure$a ?v1 ))):named a34 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_fun$ ))(= (traverse_tree$a ?v0 (tree_pure$b ?v1 ))(tree_pure$b ?v1 ))):named a35 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_fun$ ))(= (traverse_tree$b ?v0 (tree_pure$c ?v1 ))(tree_pure$c ?v1 ))):named a36 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun$ ))(= (traverse_tree$c ?v0 (tree_pure$d ?v1 ))(tree_pure$d ?v1 ))):named a37 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A$ ))(= (traverse_tree$d ?v0 (tree_pure$ ?v1 ))(tree_pure$ ?v1 ))):named a38 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ ))(= (tree_chop$ (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a39 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ ))(= (tree_chop$a (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a40 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(= (tree_chop$b (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a41 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (tree_chop$c (tree_pure$d ?v0 ))(tree_pure$d ?v0 ))):named a42 ))
(assert (! (forall ((?v0 A$ ))(= (tree_chop$d (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a43 ))
(assert (! (forall ((?v0 A_a_fun_stream$ )(?v1 A_a_fun_stream_set$ ))(=> (member$ ?v0 ?v1 )(member$a (siterate$l id$l ?v0 )(streams$ ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_stream_set$ ))(=> (member$b ?v0 ?v1 )(member$c (siterate$m id$m ?v0 )(streams$a ?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun_set$ ))(=> (member$d ?v0 ?v1 )(member$e (siterate$a id$a ?v0 )(streams$b ?v1 )))):named a46 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_a_fun_set$ ))(=> (member$f ?v0 ?v1 )(member$g (siterate$b id$b ?v0 )(streams$c ?v1 )))):named a47 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_a_a_fun_fun_set$ ))(=> (member$h ?v0 ?v1 )(member$i (siterate$c id$c ?v0 )(streams$d ?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_set$ ))(=> (member$j ?v0 ?v1 )(member$b (siterate$d id$d ?v0 )(streams$e ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_set$ ))(=> (member$k ?v0 ?v1 )(member$ (siterate$e id$e ?v0 )(streams$f ?v1 )))):named a50 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ ))(=> (member$l ?v0 ?v1 )(member$j (fun_app$ (siterate$ id$ )?v0 )(streams$g ?v1 )))):named a51 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (tree_ap$ (tree_pure$d ?v0 )(tree_pure$ ?v1 ))(tree_pure$ (fun_app$f ?v0 ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (tree_ap$a (tree_pure$c ?v0 )(tree_pure$ ?v1 ))(tree_pure$d (fun_app$g ?v0 ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun$ ))(= (tree_ap$b (tree_pure$b ?v0 )(tree_pure$d ?v1 ))(tree_pure$ (fun_app$h ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ ))(= (tree_ap$c (tree_pure$a ?v0 )(tree_pure$d ?v1 ))(tree_pure$d (fun_app$e ?v0 ?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$ )(?v1 A$ ))(= (tree_ap$d (tree_pure$e ?v0 )(tree_pure$ ?v1 ))(tree_pure$b (fun_app$l ?v0 ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun$ )(?v1 A$ ))(= (tree_ap$e (tree_pure$f ?v0 )(tree_pure$ ?v1 ))(tree_pure$c (fun_app$m ?v0 ?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun$ )(?v1 A_a_fun_a_fun$ ))(= (tree_ap$f (tree_pure$g ?v0 )(tree_pure$b ?v1 ))(tree_pure$ (fun_app$n ?v0 ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun$ )(?v1 A_a_a_fun_fun$ ))(= (tree_ap$g (tree_pure$h ?v0 )(tree_pure$c ?v1 ))(tree_pure$ (fun_app$o ?v0 ?v1 )))):named a59 ))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun$ )(?v1 A$ ))(= (tree_ap$h (tree_pure$i ?v0 )(tree_pure$ ?v1 ))(tree_pure$a (fun_app$p ?v0 ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_fun_fun$ )(?v1 A_a_fun$ ))(= (tree_ap$i (tree_pure$j ?v0 )(tree_pure$d ?v1 ))(tree_pure$b (fun_app$q ?v0 ?v1 )))):named a61 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$f ?v0 ?v1 )))):named a62 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (map_tree$a ?v0 (tree_pure$ ?v1 ))(tree_pure$d (fun_app$g ?v0 ?v1 )))):named a63 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun$ ))(= (map_tree$b ?v0 (tree_pure$d ?v1 ))(tree_pure$ (fun_app$h ?v0 ?v1 )))):named a64 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ ))(= (map_tree$c ?v0 (tree_pure$d ?v1 ))(tree_pure$d (fun_app$e ?v0 ?v1 )))):named a65 ))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$ )(?v1 A$ ))(= (map_tree$d ?v0 (tree_pure$ ?v1 ))(tree_pure$b (fun_app$l ?v0 ?v1 )))):named a66 ))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun$ )(?v1 A$ ))(= (map_tree$e ?v0 (tree_pure$ ?v1 ))(tree_pure$c (fun_app$m ?v0 ?v1 )))):named a67 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun$ )(?v1 A_a_fun_a_fun$ ))(= (map_tree$f ?v0 (tree_pure$b ?v1 ))(tree_pure$ (fun_app$n ?v0 ?v1 )))):named a68 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun$ )(?v1 A_a_a_fun_fun$ ))(= (map_tree$g ?v0 (tree_pure$c ?v1 ))(tree_pure$ (fun_app$o ?v0 ?v1 )))):named a69 ))
(assert (! (forall ((?v0 A_a_a_fun_a_a_fun_fun_fun$ )(?v1 A$ ))(= (map_tree$h ?v0 (tree_pure$ ?v1 ))(tree_pure$a (fun_app$p ?v0 ?v1 )))):named a70 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_a_fun_fun$ )(?v1 A_a_fun$ ))(= (map_tree$i ?v0 (tree_pure$d ?v1 ))(tree_pure$b (fun_app$q ?v0 ?v1 )))):named a71 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$d (smap$ ?v0 )(fun_app$ (siterate$ id$ )?v1 ))(fun_app$ (siterate$ id$ )(fun_app$f ?v0 ?v1 )))):named a72 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (smap$a ?v0 (fun_app$ (siterate$ id$ )?v1 ))(siterate$e id$e (fun_app$g ?v0 ?v1 )))):named a73 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun$ ))(= (smap$b ?v0 (siterate$e id$e ?v1 ))(fun_app$ (siterate$ id$ )(fun_app$h ?v0 ?v1 )))):named a74 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ ))(= (smap$c ?v0 (siterate$e id$e ?v1 ))(siterate$e id$e (fun_app$e ?v0 ?v1 )))):named a75 ))
(assert (! (forall ((?v0 A_a_stream_fun$ )(?v1 A$ ))(= (smap$d ?v0 (fun_app$ (siterate$ id$ )?v1 ))(siterate$d id$d (fun_app$ ?v0 ?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_stream_a_fun$ )(?v1 A_stream$ ))(= (smap$e ?v0 (siterate$d id$d ?v1 ))(fun_app$ (siterate$ id$ )(fun_app$i ?v0 ?v1 )))):named a77 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream$ ))(= (smap$f ?v0 (siterate$d id$d ?v1 ))(siterate$d id$d (fun_app$d ?v0 ?v1 )))):named a78 ))
(assert (! (forall ((?v0 A_a_fun_a_stream_fun$ )(?v1 A_a_fun$ ))(= (smap$g ?v0 (siterate$e id$e ?v1 ))(siterate$d id$d (fun_app$j ?v0 ?v1 )))):named a79 ))
(assert (! (forall ((?v0 A_stream_a_a_fun_fun$ )(?v1 A_stream$ ))(= (smap$h ?v0 (siterate$d id$d ?v1 ))(siterate$e id$e (fun_app$k ?v0 ?v1 )))):named a80 ))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$ )(?v1 A$ ))(= (smap$i ?v0 (fun_app$ (siterate$ id$ )?v1 ))(siterate$b id$b (fun_app$l ?v0 ?v1 )))):named a81 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ ))(! (= (tree_pure$a ?v0 )(node$a ?v0 (tree_pure$a ?v0 )(tree_pure$a ?v0 ))):pattern ((tree_pure$a ?v0 )))):named a82 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ ))(! (= (tree_pure$b ?v0 )(node$b ?v0 (tree_pure$b ?v0 )(tree_pure$b ?v0 ))):pattern ((tree_pure$b ?v0 )))):named a83 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(! (= (tree_pure$c ?v0 )(node$c ?v0 (tree_pure$c ?v0 )(tree_pure$c ?v0 ))):pattern ((tree_pure$c ?v0 )))):named a84 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (tree_pure$d ?v0 )(node$d ?v0 (tree_pure$d ?v0 )(tree_pure$d ?v0 ))):pattern ((tree_pure$d ?v0 )))):named a85 ))
(assert (! (forall ((?v0 A$ ))(! (= (tree_pure$ ?v0 )(node$ ?v0 (tree_pure$ ?v0 )(tree_pure$ ?v0 ))):pattern ((tree_pure$ ?v0 )))):named a86 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun$ ))(= (smap$j ?v0 (siterate$a ?v0 ?v1 ))(siterate$a ?v0 (fun_app$a ?v0 ?v1 )))):named a87 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_a_fun_a_fun_fun$ )(?v1 A_a_fun_a_fun$ ))(= (smap$k ?v0 (siterate$b ?v0 ?v1 ))(siterate$b ?v0 (fun_app$b ?v0 ?v1 )))):named a88 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_a_fun_fun_fun$ )(?v1 A_a_a_fun_fun$ ))(= (smap$l ?v0 (siterate$c ?v0 ?v1 ))(siterate$c ?v0 (fun_app$c ?v0 ?v1 )))):named a89 ))
(assert (! (forall ((?v0 A_stream_a_stream_fun$ )(?v1 A_stream$ ))(= (smap$f ?v0 (siterate$d ?v0 ?v1 ))(siterate$d ?v0 (fun_app$d ?v0 ?v1 )))):named a90 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ ))(= (smap$c ?v0 (siterate$e ?v0 ?v1 ))(siterate$e ?v0 (fun_app$e ?v0 ?v1 )))):named a91 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (fun_app$d (smap$ ?v0 )(fun_app$ (siterate$ ?v0 )?v1 ))(fun_app$ (siterate$ ?v0 )(fun_app$f ?v0 ?v1 )))):named a92 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_a_a_fun_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$a ?v0 (tree_pure$ ?v2 ))(tree_ap$a ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a93 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$ )(?v1 A_a_fun_a_a_fun_fun_tree$ ))(=> (forall ((?v2 A_a_fun$ ))(= (tree_ap$c ?v0 (tree_pure$d ?v2 ))(tree_ap$c ?v1 (tree_pure$d ?v2 ))))(= ?v0 ?v1 ))):named a94 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$ )(?v1 A_a_fun_a_fun_tree$ ))(=> (forall ((?v2 A_a_fun$ ))(= (tree_ap$b ?v0 (tree_pure$d ?v2 ))(tree_ap$b ?v1 (tree_pure$d ?v2 ))))(= ?v0 ?v1 ))):named a95 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$ ?v0 (tree_pure$ ?v2 ))(tree_ap$ ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a96 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ )(?v3 A_a_fun$ )(?v4 A_a_fun_tree$ )(?v5 A_a_fun_tree$ ))(= (= (node$d ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a97 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a98 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_a_a_fun_fun_tree$ )(?v2 A_a_a_fun_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$d (fun_app$g ?v0 ?v3 )(tree_ap$a ?v1 ?v4 )(tree_ap$a ?v2 ?v5 ))):pattern ((tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a99 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_a_fun_tree$ )(?v2 A_a_fun_a_fun_tree$ )(?v3 A_a_fun$ )(?v4 A_a_fun_tree$ )(?v5 A_a_fun_tree$ ))(! (= (tree_ap$b (node$b ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$ (fun_app$h ?v0 ?v3 )(tree_ap$b ?v1 ?v4 )(tree_ap$b ?v2 ?v5 ))):pattern ((tree_ap$b (node$b ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a100 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun_tree$ )(?v2 A_a_fun_a_a_fun_fun_tree$ )(?v3 A_a_fun$ )(?v4 A_a_fun_tree$ )(?v5 A_a_fun_tree$ ))(! (= (tree_ap$c (node$a ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$d (fun_app$e ?v0 ?v3 )(tree_ap$c ?v1 ?v4 )(tree_ap$c ?v2 ?v5 ))):pattern ((tree_ap$c (node$a ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a101 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$ (node$d ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$ (fun_app$f ?v0 ?v3 )(tree_ap$ ?v1 ?v4 )(tree_ap$ ?v2 ?v5 ))):pattern ((tree_ap$ (node$d ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a102 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_fun_tree$ )(?v2 A_a_fun_tree$ ))(= (traverse_tree$d ?v0 (tree_ap$b ?v1 ?v2 ))(tree_ap$b (traverse_tree$a ?v0 ?v1 )(traverse_tree$c ?v0 ?v2 )))):named a103 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$c ?v0 (tree_ap$a ?v1 ?v2 ))(tree_ap$a (traverse_tree$b ?v0 ?v1 )(traverse_tree$d ?v0 ?v2 )))):named a104 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_a_fun_fun_tree$ )(?v2 A_a_fun_tree$ ))(= (traverse_tree$c ?v0 (tree_ap$c ?v1 ?v2 ))(tree_ap$c (traverse_tree$ ?v0 ?v1 )(traverse_tree$c ?v0 ?v2 )))):named a105 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$d ?v0 (tree_ap$ ?v1 ?v2 ))(tree_ap$ (traverse_tree$c ?v0 ?v1 )(traverse_tree$d ?v0 ?v2 )))):named a106 ))
(check-sat )
;(get-unsat-core )
