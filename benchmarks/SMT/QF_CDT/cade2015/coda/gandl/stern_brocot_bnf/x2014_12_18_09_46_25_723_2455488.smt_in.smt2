;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Rat$ 0 )
(declare-sort Nat_rat_fun$ 0 )
(declare-sort Nat_nat_rat_fun_fun$ 0 )
(declare-sort Nat_nat_prod$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod$ 0)
(declare-fun fst$ (Nat_nat_prod$)Nat$)
(declare-fun snd$ (Nat_nat_prod$)Nat$)
(declare-fun pair$ (Nat$ Nat$ )Nat_nat_prod$)
(declare-fun fst$a (Nat_nat_prod_nat_nat_prod_prod$)Nat_nat_prod$)
(declare-fun snd$a (Nat_nat_prod_nat_nat_prod_prod$)Nat_nat_prod$)
(declare-fun pair$a (Nat_nat_prod$ Nat_nat_prod$ )Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun a$ ()Nat_nat_prod$ )
(declare-fun b$ ()Nat$ )
(declare-fun c$ ()Nat$ )
(declare-fun x$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun y$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun uu$ ()Nat_nat_rat_fun_fun$ )
(declare-fun det$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat$ )
(declare-fun one$ ()Nat$ )
(declare-fun fmat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun less$ (Rat$ Rat$ )Bool )
(declare-fun one$a ()Rat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun fract$ (Int Int )Rat$ )
(declare-fun lLmat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun less$a (Nat$ Nat$ )Bool )
(declare-fun zero$a ()Rat$ )
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun of_nat$ (Nat$ )Int )
(declare-fun fun_app$ (Nat_rat_fun$ Nat$ )Rat$ )
(declare-fun mediant$ (Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod$ )
(declare-fun of_nat$a (Nat$ )Rat$ )
(declare-fun of_nat$b (Nat$ )Nat$ )
(declare-fun fun_app$a (Nat_nat_rat_fun_fun$ Nat$ )Nat_rat_fun$ )
(declare-fun case_prod$ (Nat_nat_rat_fun_fun$ Nat_nat_prod$ )Rat$ )
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(fract$ (of_nat$ ?v0 )(of_nat$ ?v1 ))):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (less$ (case_prod$ uu$ (mediant$ (mulmat$ (mulmat$ x$ lLmat$ )y$ )))(case_prod$ uu$ (mediant$ x$ )))):named a1 ))
(assert (! (= (det$ x$ )one$ ):named a2 ))
(assert (! (= (det$ y$ )one$ ):named a3 ))
(assert (! (less$a zero$ (snd$ (mediant$ x$ ))):named a4 ))
(assert (! (less$a zero$ (snd$ (mediant$ (mulmat$ (mulmat$ x$ lLmat$ )y$ )))):named a5 ))
(assert (! (= x$ (pair$a a$ (pair$ b$ c$ ))):named a6 ))
(assert (! (= (det$ x$ )one$ ):named a7 ))
(assert (! (= (det$ y$ )one$ ):named a8 ))
(assert (! (less$a zero$ (snd$ (mediant$ x$ ))):named a9 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ )(?v1 Nat_nat_prod_nat_nat_prod_prod$ )(?v2 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ (mulmat$ ?v0 ?v1 )?v2 )(mulmat$ ?v0 (mulmat$ ?v1 ?v2 )))):named a10 ))
(assert (! (less$a zero$ (snd$ (mediant$ (mulmat$ (mulmat$ x$ lLmat$ )y$ )))):named a11 ))
(assert (! (= (det$ lLmat$ )one$ ):named a12 ))
(assert (! (= lLmat$ (pair$a (pair$ one$ one$ )(pair$ zero$ one$ ))):named a13 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ ?v0 lLmat$ ))one$ ))):named a14 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (= (det$ ?v0 )one$ )(= (det$ (mulmat$ lLmat$ ?v0 ))one$ ))):named a15 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(=> (less$a zero$ (snd$ (mediant$ ?v0 )))(less$a zero$ (snd$ (mediant$ (mulmat$ ?v0 lLmat$ )))))):named a16 ))
(assert (! (= (mediant$ fmat$ )(pair$ one$ one$ )):named a17 ))
(assert (! (forall ((?v0 Nat$ ))(= (less$ zero$a (of_nat$a ?v0 ))(less$a zero$ ?v0 ))):named a18 ))
(assert (! (forall ((?v0 Nat$ ))(= (less$a zero$ (of_nat$b ?v0 ))(less$a zero$ ?v0 ))):named a19 ))
(assert (! (forall ((?v0 Nat$ ))(= (< 0 (of_nat$ ?v0 ))(less$a zero$ ?v0 ))):named a20 ))
(assert (! (= (of_nat$a one$ )one$a ):named a21 ))
(assert (! (= (of_nat$b one$ )one$ ):named a22 ))
(assert (! (= (of_nat$ one$ )1 ):named a23 ))
(assert (! (forall ((?v0 Nat$ ))(= (less$a ?v0 one$ )(= ?v0 zero$ ))):named a24 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (less$ (of_nat$a ?v0 )(of_nat$a ?v1 ))(less$a ?v0 ?v1 ))):named a25 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (less$a (of_nat$b ?v0 )(of_nat$b ?v1 ))(less$a ?v0 ?v1 ))):named a26 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (< (of_nat$ ?v0 )(of_nat$ ?v1 ))(less$a ?v0 ?v1 ))):named a27 ))
(assert (! (forall ((?v0 Nat$ ))(= (= (of_nat$a ?v0 )zero$a )(= ?v0 zero$ ))):named a28 ))
(assert (! (forall ((?v0 Nat$ ))(= (= (of_nat$b ?v0 )zero$ )(= ?v0 zero$ ))):named a29 ))
(assert (! (forall ((?v0 Nat$ ))(= (= (of_nat$ ?v0 )0 )(= ?v0 zero$ ))):named a30 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$a (of_nat$a ?v0 ))(= zero$ ?v0 ))):named a31 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ (of_nat$b ?v0 ))(= zero$ ?v0 ))):named a32 ))
(assert (! (forall ((?v0 Nat$ ))(= (= 0 (of_nat$ ?v0 ))(= zero$ ?v0 ))):named a33 ))
(check-sat )
;(get-unsat-core )
