;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort Dir_bool_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun$ 0 )
(declare-sort A_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun_a_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_a_fun$ 0 )
(declare-codatatypes ()((A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))))
(declare-sort Dir$ 0)
(declare-sort Dir_list$ 0)
(declare-fun l$ ()Dir$)
(declare-fun r$ ()Dir$)
(declare-fun nil$ ()Dir_list$)
(declare-fun hd$ (Dir_list$)Dir$)
(declare-fun tl$ (Dir_list$)Dir_list$)
(declare-fun cons$ (Dir$ Dir_list$ )Dir_list$)
(declare-codatatypes ()((A_a_fun_a_a_fun_fun_tree$ (node$a (select$ A_a_fun_a_a_fun_fun$ )(selecta$ A_a_fun_a_a_fun_fun_tree$ )(selectb$ A_a_fun_a_a_fun_fun_tree$ )))(A_a_a_fun_fun_tree$ (node$b (selectc$ A_a_a_fun_fun$ )(selectd$ A_a_a_fun_fun_tree$ )(selecte$ A_a_a_fun_fun_tree$ )))(A_a_fun_a_fun_tree$ (node$c (selectf$ A_a_fun_a_fun$ )(selectg$ A_a_fun_a_fun_tree$ )(selecth$ A_a_fun_a_fun_tree$ )))(A_a_fun_tree$ (node$d (selecti$ A_a_fun$ )(selectj$ A_a_fun_tree$ )(selectk$ A_a_fun_tree$ )))(A_a_a_fun_fun_a_fun_tree$ (node$e (selectl$ A_a_a_fun_fun_a_fun$ )(selectm$ A_a_a_fun_fun_a_fun_tree$ )(selectn$ A_a_a_fun_fun_a_fun_tree$ )))(A_a_fun_a_fun_a_fun_tree$ (node$f (selecto$ A_a_fun_a_fun_a_fun$ )(selectp$ A_a_fun_a_fun_a_fun_tree$ )(selectq$ A_a_fun_a_fun_a_fun_tree$ )))(A_a_a_a_fun_fun_fun_tree$ (node$g (selectr$ A_a_a_a_fun_fun_fun$ )(selects$ A_a_a_a_fun_fun_fun_tree$ )(selectt$ A_a_a_a_fun_fun_fun_tree$ )))(A_a_a_fun_a_fun_fun_tree$ (node$h (selectu$ A_a_a_fun_a_fun_fun$ )(selectv$ A_a_a_fun_a_fun_fun_tree$ )(selectw$ A_a_a_fun_a_fun_fun_tree$ )))(A_a_fun_a_a_fun_fun_a_fun_tree$ (node$i (selectx$ A_a_fun_a_a_fun_fun_a_fun$ )(selecty$ A_a_fun_a_a_fun_fun_a_fun_tree$ )(selectz$ A_a_fun_a_a_fun_fun_a_fun_tree$ )))(A_a_a_fun_fun_a_a_fun_fun_tree$ (node$j (selecua$ A_a_a_fun_fun_a_a_fun_fun$ )(selecub$ A_a_a_fun_fun_a_a_fun_fun_tree$ )(selecuc$ A_a_a_fun_fun_a_a_fun_fun_tree$ )))))
(declare-fun t$ ()A_tree$ )
(declare-fun ext$ ()Dir_list$ )
(declare-fun path$ ()Dir_list$ )
(declare-fun append$ (Dir_list$ Dir_list$ )Dir_list$ )
(declare-fun fun_app$ (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun list_ex$ (Dir_bool_fun$ Dir_list$ )Bool )
(declare-fun tree_ap$ (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun fun_app$a (A_a_fun_a_fun$ A_a_fun$ )A$ )
(declare-fun fun_app$b (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$c (A_a_fun$ A$ )A$ )
(declare-fun map_tree$ (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun tree_ap$a (A_a_fun_a_fun_tree$ A_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$b (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$c (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$d (A_a_a_fun_fun_a_fun_tree$ A_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun tree_ap$e (A_a_fun_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$f (A_a_a_a_fun_fun_fun_tree$ A_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_ap$g (A_a_a_fun_a_fun_fun_tree$ A_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_ap$h (A_a_fun_a_a_fun_fun_a_fun_tree$ A_a_fun_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun tree_ap$i (A_a_a_fun_fun_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$a (A_a_fun_a_fun$ A_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$b (A_a_a_fun_fun$ A_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$c (A_a_fun_a_a_fun_fun$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$d (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun map_tree$e (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$f (A_a_a_a_fun_fun_fun$ A_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun map_tree$g (A_a_a_fun_a_fun_fun$ A_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun map_tree$h (A_a_fun_a_a_fun_fun_a_fun$ A_a_fun_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun map_tree$i (A_a_a_fun_fun_a_a_fun_fun$ A_a_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun pred_list$ (Dir_bool_fun$ Dir_list$ )Bool )
(declare-fun removeAll$ (Dir$ Dir_list$ )Dir_list$ )
(declare-fun tree_pure$ (A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_pure$a (A_a_a_fun_fun$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_pure$b (A_a_fun_a_fun$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_pure$c (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$d (A$ )A_tree$ )
(declare-fun traverse_tree$ (Dir_list$ A_tree$ )A_tree$ )
(declare-fun traverse_tree$a (Dir_list$ A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun traverse_tree$b (Dir_list$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun traverse_tree$c (Dir_list$ A_a_fun_a_fun_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun traverse_tree$d (Dir_list$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun traverse_tree$e (Dir_list$ A_a_a_fun_fun_a_fun_tree$ )A_a_a_fun_fun_a_fun_tree$ )
(declare-fun traverse_tree$f (Dir_list$ A_a_fun_a_fun_a_fun_tree$ )A_a_fun_a_fun_a_fun_tree$ )
(declare-fun traverse_tree$g (Dir_list$ A_a_a_a_fun_fun_fun_tree$ )A_a_a_a_fun_fun_fun_tree$ )
(declare-fun traverse_tree$h (Dir_list$ A_a_a_fun_a_fun_fun_tree$ )A_a_a_fun_a_fun_fun_tree$ )
(declare-fun traverse_tree$i (Dir_list$ A_a_fun_a_a_fun_fun_a_fun_tree$ )A_a_fun_a_a_fun_fun_a_fun_tree$ )
(declare-fun traverse_tree$j (Dir_list$ A_a_a_fun_fun_a_a_fun_fun_tree$ )A_a_a_fun_fun_a_a_fun_fun_tree$ )
(assert (! (not (= (traverse_tree$ (append$ path$ ext$ )t$ )(traverse_tree$ ext$ (traverse_tree$ path$ t$ )))):named a0 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ )(?v2 Dir_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v0 ?v2 ))(= ?v1 ?v2 ))):named a1 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ )(?v2 Dir_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v2 ?v1 ))(= ?v0 ?v2 ))):named a2 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ )(?v2 Dir_list$ ))(= (append$ (append$ ?v0 ?v1 )?v2 )(append$ ?v0 (append$ ?v1 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ )(?v2 Dir_list$ )(?v3 Dir_list$ ))(= (= (append$ ?v0 ?v1 )(append$ ?v2 ?v3 ))(exists ((?v4 Dir_list$ ))(or (and (= ?v0 (append$ ?v2 ?v4 ))(= (append$ ?v4 ?v1 )?v3 ))(and (= (append$ ?v0 ?v4 )?v2 )(= ?v1 (append$ ?v4 ?v3 ))))))):named a4 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ )(?v2 Dir_list$ )(?v3 Dir_list$ )(?v4 Dir_list$ ))(=> (and (= (append$ ?v0 ?v1 )?v2 )(= ?v3 (append$ ?v1 ?v4 )))(= (append$ ?v0 ?v3 )(append$ ?v2 ?v4 )))):named a5 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_a_fun_fun$ ))(= (traverse_tree$a ?v0 (tree_pure$ ?v1 ))(tree_pure$ ?v1 ))):named a6 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_fun$ ))(= (traverse_tree$b ?v0 (tree_pure$a ?v1 ))(tree_pure$a ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_fun$ ))(= (traverse_tree$c ?v0 (tree_pure$b ?v1 ))(tree_pure$b ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun$ ))(= (traverse_tree$d ?v0 (tree_pure$c ?v1 ))(tree_pure$c ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A$ ))(= (traverse_tree$ ?v0 (tree_pure$d ?v1 ))(tree_pure$d ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$ ?v1 ?v2 ))(tree_ap$ (traverse_tree$d ?v0 ?v1 )(traverse_tree$ ?v0 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_fun_tree$ )(?v2 A_a_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$a ?v1 ?v2 ))(tree_ap$a (traverse_tree$c ?v0 ?v1 )(traverse_tree$d ?v0 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$d ?v0 (tree_ap$b ?v1 ?v2 ))(tree_ap$b (traverse_tree$b ?v0 ?v1 )(traverse_tree$ ?v0 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_a_fun_fun_tree$ )(?v2 A_a_fun_tree$ ))(= (traverse_tree$d ?v0 (tree_ap$c ?v1 ?v2 ))(tree_ap$c (traverse_tree$a ?v0 ?v1 )(traverse_tree$d ?v0 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_fun_a_fun_tree$ )(?v2 A_a_a_fun_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$d ?v1 ?v2 ))(tree_ap$d (traverse_tree$e ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_fun_a_fun_tree$ )(?v2 A_a_fun_a_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$e ?v1 ?v2 ))(tree_ap$e (traverse_tree$f ?v0 ?v1 )(traverse_tree$c ?v0 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_a_fun_fun_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$b ?v0 (tree_ap$f ?v1 ?v2 ))(tree_ap$f (traverse_tree$g ?v0 ?v1 )(traverse_tree$ ?v0 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_a_fun_fun_tree$ )(?v2 A_tree$ ))(= (traverse_tree$c ?v0 (tree_ap$g ?v1 ?v2 ))(tree_ap$g (traverse_tree$h ?v0 ?v1 )(traverse_tree$ ?v0 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_a_fun_fun_a_fun_tree$ )(?v2 A_a_fun_a_a_fun_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$h ?v1 ?v2 ))(tree_ap$h (traverse_tree$i ?v0 ?v1 )(traverse_tree$a ?v0 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_fun_a_a_fun_fun_tree$ )(?v2 A_a_a_fun_fun_tree$ ))(= (traverse_tree$d ?v0 (tree_ap$i ?v1 ?v2 ))(tree_ap$i (traverse_tree$j ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun$ )(?v2 A_tree$ ))(= (traverse_tree$ ?v0 (map_tree$ ?v1 ?v2 ))(map_tree$ ?v1 (traverse_tree$ ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_fun$ )(?v2 A_a_fun_tree$ ))(= (traverse_tree$ ?v0 (map_tree$a ?v1 ?v2 ))(map_tree$a ?v1 (traverse_tree$d ?v0 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_fun$ )(?v2 A_tree$ ))(= (traverse_tree$d ?v0 (map_tree$b ?v1 ?v2 ))(map_tree$b ?v1 (traverse_tree$ ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_a_fun_fun$ )(?v2 A_a_fun_tree$ ))(= (traverse_tree$d ?v0 (map_tree$c ?v1 ?v2 ))(map_tree$c ?v1 (traverse_tree$d ?v0 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_fun_a_fun$ )(?v2 A_a_a_fun_fun_tree$ ))(= (traverse_tree$ ?v0 (map_tree$d ?v1 ?v2 ))(map_tree$d ?v1 (traverse_tree$b ?v0 ?v2 )))):named a25 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_fun_a_fun$ )(?v2 A_a_fun_a_fun_tree$ ))(= (traverse_tree$ ?v0 (map_tree$e ?v1 ?v2 ))(map_tree$e ?v1 (traverse_tree$c ?v0 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_a_fun_fun_fun$ )(?v2 A_tree$ ))(= (traverse_tree$b ?v0 (map_tree$f ?v1 ?v2 ))(map_tree$f ?v1 (traverse_tree$ ?v0 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_a_fun_fun$ )(?v2 A_tree$ ))(= (traverse_tree$c ?v0 (map_tree$g ?v1 ?v2 ))(map_tree$g ?v1 (traverse_tree$ ?v0 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_fun_a_a_fun_fun_a_fun$ )(?v2 A_a_fun_a_a_fun_fun_tree$ ))(= (traverse_tree$ ?v0 (map_tree$h ?v1 ?v2 ))(map_tree$h ?v1 (traverse_tree$a ?v0 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 A_a_a_fun_fun_a_a_fun_fun$ )(?v2 A_a_a_fun_fun_tree$ ))(= (traverse_tree$d ?v0 (map_tree$i ?v1 ?v2 ))(map_tree$i ?v1 (traverse_tree$b ?v0 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 Dir_bool_fun$ )(?v1 Dir_list$ )(?v2 Dir_list$ ))(= (list_ex$ ?v0 (append$ ?v1 ?v2 ))(or (list_ex$ ?v0 ?v1 )(list_ex$ ?v0 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 Dir$ )(?v1 Dir_list$ )(?v2 Dir_list$ ))(= (removeAll$ ?v0 (append$ ?v1 ?v2 ))(append$ (removeAll$ ?v0 ?v1 )(removeAll$ ?v0 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 Dir_bool_fun$ )(?v1 Dir_list$ )(?v2 Dir_list$ ))(= (pred_list$ ?v0 (append$ ?v1 ?v2 ))(and (pred_list$ ?v0 ?v1 )(pred_list$ ?v0 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (tree_ap$b (tree_pure$a ?v0 )(tree_pure$d ?v1 ))(tree_pure$c (fun_app$ ?v0 ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun$ ))(= (tree_ap$a (tree_pure$b ?v0 )(tree_pure$c ?v1 ))(tree_pure$d (fun_app$a ?v0 ?v1 )))):named a35 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ ))(= (tree_ap$c (tree_pure$ ?v0 )(tree_pure$c ?v1 ))(tree_pure$c (fun_app$b ?v0 ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (tree_ap$ (tree_pure$c ?v0 )(tree_pure$d ?v1 ))(tree_pure$d (fun_app$c ?v0 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ ))(= (map_tree$c ?v0 (tree_pure$c ?v1 ))(tree_pure$c (fun_app$b ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (map_tree$b ?v0 (tree_pure$d ?v1 ))(tree_pure$c (fun_app$ ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun$ ))(= (map_tree$a ?v0 (tree_pure$c ?v1 ))(tree_pure$d (fun_app$a ?v0 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$ ?v0 (tree_pure$d ?v1 ))(tree_pure$d (fun_app$c ?v0 ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ ))(= (= (tree_pure$c ?v0 )(tree_pure$c ?v1 ))(= ?v0 ?v1 ))):named a42 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (= (tree_pure$d ?v0 )(tree_pure$d ?v1 ))(= ?v0 ?v1 ))):named a43 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_tree$ ))(= (tree_ap$c (tree_pure$ ?v0 )?v1 )(map_tree$c ?v0 ?v1 ))):named a44 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_tree$ ))(= (tree_ap$b (tree_pure$a ?v0 )?v1 )(map_tree$b ?v0 ?v1 ))):named a45 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_tree$ ))(= (tree_ap$a (tree_pure$b ?v0 )?v1 )(map_tree$a ?v0 ?v1 ))):named a46 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (tree_ap$ (tree_pure$c ?v0 )?v1 )(map_tree$ ?v0 ?v1 ))):named a47 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_a_a_fun_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$b ?v0 (tree_pure$d ?v2 ))(tree_ap$b ?v1 (tree_pure$d ?v2 ))))(= ?v0 ?v1 ))):named a48 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$ )(?v1 A_a_fun_a_a_fun_fun_tree$ ))(=> (forall ((?v2 A_a_fun$ ))(= (tree_ap$c ?v0 (tree_pure$c ?v2 ))(tree_ap$c ?v1 (tree_pure$c ?v2 ))))(= ?v0 ?v1 ))):named a49 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$ )(?v1 A_a_fun_a_fun_tree$ ))(=> (forall ((?v2 A_a_fun$ ))(= (tree_ap$a ?v0 (tree_pure$c ?v2 ))(tree_ap$a ?v1 (tree_pure$c ?v2 ))))(= ?v0 ?v1 ))):named a50 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$ ?v0 (tree_pure$d ?v2 ))(tree_ap$ ?v1 (tree_pure$d ?v2 ))))(= ?v0 ?v1 ))):named a51 ))
(check-sat )
;(get-unsat-core )
