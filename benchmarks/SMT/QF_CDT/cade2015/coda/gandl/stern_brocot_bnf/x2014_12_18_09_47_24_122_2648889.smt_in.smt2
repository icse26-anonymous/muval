;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort A_c_fun_a_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_a_fun_b_c_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_b_c_fun_fun$ 0 )
(declare-sort B_c_fun_b_a_fun_fun$ 0 )
(declare-sort B_c_fun_b_b_fun_fun$ 0 )
(declare-sort B_c_fun_b_c_fun_fun$ 0 )
(declare-sort C_a_fun_c_a_fun_fun$ 0 )
(declare-sort C_a_fun_c_c_fun_fun$ 0 )
(declare-sort C_b_fun_c_a_fun_fun$ 0 )
(declare-sort C_b_fun_c_c_fun_fun$ 0 )
(declare-sort C_c_fun_c_a_fun_fun$ 0 )
(declare-sort C_c_fun_c_c_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_fun_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_c_a_fun_fun_c_a_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun_b_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))(B_a_fun_stream$ (sCons$a (select$ B_a_fun$ )(selecta$ B_a_fun_stream$ )))(B_stream$ (sCons$b (shd$a B$ )(stl$a B_stream$ )))(B_c_fun_b_a_fun_fun_stream$ (sCons$c (selectb$ B_c_fun_b_a_fun_fun$ )(selectc$ B_c_fun_b_a_fun_fun_stream$ )))(B_c_fun_stream$ (sCons$d (selectd$ B_c_fun$ )(selecte$ B_c_fun_stream$ )))(C_a_fun_b_c_fun_b_a_fun_fun_fun_stream$ (sCons$e (selectf$ C_a_fun_b_c_fun_b_a_fun_fun_fun$ )(selectg$ C_a_fun_b_c_fun_b_a_fun_fun_fun_stream$ )))(C_a_fun_stream$ (sCons$f (selecth$ C_a_fun$ )(selecti$ C_a_fun_stream$ )))(C_stream$ (sCons$g (shd$b C$ )(stl$b C_stream$ )))(C_a_fun_c_a_fun_fun_stream$ (sCons$h (selectj$ C_a_fun_c_a_fun_fun$ )(selectk$ C_a_fun_c_a_fun_fun_stream$ )))(B_a_fun_b_a_fun_fun_stream$ (sCons$i (selectl$ B_a_fun_b_a_fun_fun$ )(selectm$ B_a_fun_b_a_fun_fun_stream$ )))(A_a_fun_stream$ (sCons$j (selectn$ A_a_fun$ )(selecto$ A_a_fun_stream$ )))(A_a_fun_a_a_fun_fun_stream$ (sCons$k (selectp$ A_a_fun_a_a_fun_fun$ )(selectq$ A_a_fun_a_a_fun_fun_stream$ )))(C_c_fun_stream$ (sCons$l (selectr$ C_c_fun$ )(selects$ C_c_fun_stream$ )))(B_b_fun_stream$ (sCons$m (selectt$ B_b_fun$ )(selectu$ B_b_fun_stream$ )))(C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_stream$ (sCons$n (selectv$ C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun$ )(selectw$ C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_stream$ )))(C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun_stream$ (sCons$o (selectx$ C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun$ )(selecty$ C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun_stream$ )))(B_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun_stream$ (sCons$p (selectz$ B_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun$ )(selecua$ B_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun_stream$ )))))
(declare-fun id$ ()C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun$ )
(declare-fun r1$ ()C_a_fun_stream$ )
(declare-fun r2$ ()B_c_fun_stream$ )
(declare-fun r3$ ()B_stream$ )
(declare-fun id$a ()C_a_fun_c_a_fun_fun_c_a_fun_c_a_fun_fun_fun$ )
(declare-fun id$b ()C_a_fun_c_a_fun_fun$ )
(declare-fun id$c ()B_a_fun_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ )
(declare-fun id$d ()B_a_fun_b_a_fun_fun$ )
(declare-fun id$e ()A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun id$f ()A_a_fun_a_a_fun_fun$ )
(declare-fun id$g ()C_c_fun_c_c_fun_fun$ )
(declare-fun id$h ()C_c_fun$ )
(declare-fun id$i ()B_b_fun_b_b_fun_fun$ )
(declare-fun id$j ()B_b_fun$ )
(declare-fun id$k ()C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun_fun$ )
(declare-fun id$l ()C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun$ )
(declare-fun id$m ()B_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun_b_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun_fun$ )
(declare-fun id$n ()B_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun$ )
(declare-fun id$o ()A_a_fun$ )
(declare-fun comp$ ()C_a_fun_b_c_fun_b_a_fun_fun_fun$ )
(declare-fun comp$a (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun comp$b (C_a_fun$ )C_c_fun_c_a_fun_fun$ )
(declare-fun comp$c (B_c_fun$ )B_b_fun_b_c_fun_fun$ )
(declare-fun comp$d (B_a_fun$ )B_b_fun_b_a_fun_fun$ )
(declare-fun comp$e (A_a_fun$ )C_a_fun_c_a_fun_fun$ )
(declare-fun comp$f (A_a_fun$ )B_a_fun_b_a_fun_fun$ )
(declare-fun comp$g (B_a_fun_b_a_fun_fun$ )B_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun$ )
(declare-fun comp$h (C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun$ )
(declare-fun comp$i (B_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun$ )
(declare-fun comp$j (B_a_fun$ )A_b_fun_a_a_fun_fun$ )
(declare-fun comp$k (A_c_fun$ )C_a_fun_c_c_fun_fun$ )
(declare-fun comp$l (A_c_fun$ )B_a_fun_b_c_fun_fun$ )
(declare-fun comp$m (A_b_fun$ )B_a_fun_b_b_fun_fun$ )
(declare-fun comp$n (C_c_fun$ )B_c_fun_b_c_fun_fun$ )
(declare-fun comp$o (C_a_fun$ )A_c_fun_a_a_fun_fun$ )
(declare-fun comp$p (B_c_fun$ )C_b_fun_c_c_fun_fun$ )
(declare-fun comp$q (B_a_fun$ )C_b_fun_c_a_fun_fun$ )
(declare-fun comp$r (C_c_fun$ )C_c_fun_c_c_fun_fun$ )
(declare-fun comp$s (B_b_fun$ )B_b_fun_b_b_fun_fun$ )
(declare-fun comp$t (C_b_fun$ )B_c_fun_b_b_fun_fun$ )
(declare-fun st_ap$ (B_a_fun_stream$ B_stream$ )A_stream$ )
(declare-fun st_ap$a (B_c_fun_b_a_fun_fun_stream$ B_c_fun_stream$ )B_a_fun_stream$ )
(declare-fun st_ap$b (C_a_fun_b_c_fun_b_a_fun_fun_fun_stream$ C_a_fun_stream$ )B_c_fun_b_a_fun_fun_stream$ )
(declare-fun st_ap$c (C_a_fun_stream$ C_stream$ )A_stream$ )
(declare-fun st_ap$d (B_c_fun_stream$ B_stream$ )C_stream$ )
(declare-fun st_ap$e (C_a_fun_c_a_fun_fun_stream$ C_a_fun_stream$ )C_a_fun_stream$ )
(declare-fun st_ap$f (B_a_fun_b_a_fun_fun_stream$ B_a_fun_stream$ )B_a_fun_stream$ )
(declare-fun st_ap$g (A_a_fun_a_a_fun_fun_stream$ A_a_fun_stream$ )A_a_fun_stream$ )
(declare-fun st_ap$h (C_c_fun_stream$ C_stream$ )C_stream$ )
(declare-fun st_ap$i (B_b_fun_stream$ B_stream$ )B_stream$ )
(declare-fun st_ap$j (C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun_stream$ C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_stream$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_stream$ )
(declare-fun st_ap$k (B_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun_stream$ B_c_fun_b_a_fun_fun_stream$ )B_c_fun_b_a_fun_fun_stream$ )
(declare-fun st_ap$l (A_a_fun_stream$ A_stream$ )A_stream$ )
(declare-fun st_ap$m (C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_stream$ C_a_fun_b_c_fun_b_a_fun_fun_fun_stream$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_stream$ )
(declare-fun fun_app$ (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$a (C_c_fun_c_a_fun_fun$ C_c_fun$ )C_a_fun$ )
(declare-fun fun_app$b (B_b_fun_b_c_fun_fun$ B_b_fun$ )B_c_fun$ )
(declare-fun fun_app$c (B_b_fun_b_a_fun_fun$ B_b_fun$ )B_a_fun$ )
(declare-fun fun_app$d (C_a_fun_c_a_fun_fun$ C_a_fun$ )C_a_fun$ )
(declare-fun fun_app$e (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$f (C_c_fun$ C$ )C$ )
(declare-fun fun_app$g (B_b_fun$ B$ )B$ )
(declare-fun fun_app$h (C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun$ C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun$ )
(declare-fun fun_app$i (B_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun$ B_c_fun_b_a_fun_fun$ )B_c_fun_b_a_fun_fun$ )
(declare-fun fun_app$j (A_a_fun$ A$ )A$ )
(declare-fun fun_app$k (C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun$ C_a_fun_b_c_fun_b_a_fun_fun_fun$ )C_a_fun_b_c_fun_b_a_fun_fun_fun$ )
(declare-fun fun_app$l (B_a_fun$ B$ )A$ )
(declare-fun fun_app$m (B_c_fun_b_a_fun_fun$ B_c_fun$ )B_a_fun$ )
(declare-fun fun_app$n (C_a_fun_b_c_fun_b_a_fun_fun_fun$ C_a_fun$ )B_c_fun_b_a_fun_fun$ )
(declare-fun fun_app$o (C_a_fun$ C$ )A$ )
(declare-fun fun_app$p (B_c_fun$ B$ )C$ )
(declare-fun fun_app$q (A_b_fun_a_a_fun_fun$ A_b_fun$ )A_a_fun$ )
(declare-fun fun_app$r (A_b_fun$ A$ )B$ )
(declare-fun fun_app$s (C_a_fun_c_c_fun_fun$ C_a_fun$ )C_c_fun$ )
(declare-fun fun_app$t (A_c_fun$ A$ )C$ )
(declare-fun fun_app$u (B_a_fun_b_c_fun_fun$ B_a_fun$ )B_c_fun$ )
(declare-fun fun_app$v (B_a_fun_b_b_fun_fun$ B_a_fun$ )B_b_fun$ )
(declare-fun fun_app$w (B_c_fun_b_c_fun_fun$ B_c_fun$ )B_c_fun$ )
(declare-fun fun_app$x (A_c_fun_a_a_fun_fun$ A_c_fun$ )A_a_fun$ )
(declare-fun fun_app$y (C_b_fun_c_c_fun_fun$ C_b_fun$ )C_c_fun$ )
(declare-fun fun_app$z (C_b_fun_c_a_fun_fun$ C_b_fun$ )C_a_fun$ )
(declare-fun siterate$ (C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun$ C_a_fun_b_c_fun_b_a_fun_fun_fun$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_stream$ )
(declare-fun fun_app$aa (C_c_fun_c_c_fun_fun$ C_c_fun$ )C_c_fun$ )
(declare-fun fun_app$ab (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun$ )
(declare-fun fun_app$ac (B_c_fun_b_b_fun_fun$ B_c_fun$ )B_b_fun$ )
(declare-fun siterate$a (C_a_fun_c_a_fun_fun_c_a_fun_c_a_fun_fun_fun$ C_a_fun_c_a_fun_fun$ )C_a_fun_c_a_fun_fun_stream$ )
(declare-fun siterate$b (B_a_fun_b_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ B_a_fun_b_a_fun_fun$ )B_a_fun_b_a_fun_fun_stream$ )
(declare-fun siterate$c (A_a_fun_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun_stream$ )
(declare-fun siterate$d (C_c_fun_c_c_fun_fun$ C_c_fun$ )C_c_fun_stream$ )
(declare-fun siterate$e (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun_stream$ )
(declare-fun siterate$f (C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun_fun$ C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun_stream$ )
(declare-fun siterate$g (B_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun_b_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun_fun$ B_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun$ )B_c_fun_b_a_fun_fun_b_c_fun_b_a_fun_fun_fun_stream$ )
(declare-fun siterate$h (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun_stream$ )
(declare-fun siterate$i (C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_fun$ C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_stream$ )
(assert (! (not (= (st_ap$ (st_ap$a (st_ap$b (siterate$ id$ comp$ )r1$ )r2$ )r3$ )(st_ap$c r1$ (st_ap$d r2$ r3$ )))):named a0 ))
(assert (! (forall ((?v0 C_a_fun_stream$ ))(= (st_ap$e (siterate$a id$a id$b )?v0 )?v0 )):named a1 ))
(assert (! (forall ((?v0 B_a_fun_stream$ ))(= (st_ap$f (siterate$b id$c id$d )?v0 )?v0 )):named a2 ))
(assert (! (forall ((?v0 A_a_fun_stream$ ))(= (st_ap$g (siterate$c id$e id$f )?v0 )?v0 )):named a3 ))
(assert (! (forall ((?v0 C_stream$ ))(= (st_ap$h (siterate$d id$g id$h )?v0 )?v0 )):named a4 ))
(assert (! (forall ((?v0 B_stream$ ))(= (st_ap$i (siterate$e id$i id$j )?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun_stream$ ))(= (st_ap$j (siterate$f id$k id$l )?v0 )?v0 )):named a6 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun_stream$ ))(= (st_ap$k (siterate$g id$m id$n )?v0 )?v0 )):named a7 ))
(assert (! (forall ((?v0 A_stream$ ))(= (st_ap$l (siterate$h id$f id$o )?v0 )?v0 )):named a8 ))
(assert (! (forall ((?v0 C_a_fun_b_c_fun_b_a_fun_fun_fun_stream$ ))(= (st_ap$m (siterate$i id$l id$ )?v0 )?v0 )):named a9 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (fun_app$ (comp$a ?v0 )id$o )?v0 )):named a10 ))
(assert (! (forall ((?v0 C_a_fun$ ))(= (fun_app$a (comp$b ?v0 )id$h )?v0 )):named a11 ))
(assert (! (forall ((?v0 B_c_fun$ ))(= (fun_app$b (comp$c ?v0 )id$j )?v0 )):named a12 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (fun_app$c (comp$d ?v0 )id$j )?v0 )):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (fun_app$ (comp$a id$o )?v0 )?v0 )):named a14 ))
(assert (! (forall ((?v0 C_a_fun$ ))(= (fun_app$d (comp$e id$o )?v0 )?v0 )):named a15 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (fun_app$e (comp$f id$o )?v0 )?v0 )):named a16 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (fun_app$ (comp$a id$o )?v0 )?v0 )):named a17 ))
(assert (! (forall ((?v0 C_a_fun$ ))(= (fun_app$d (comp$e id$o )?v0 )?v0 )):named a18 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (fun_app$e (comp$f id$o )?v0 )?v0 )):named a19 ))
(assert (! (= (comp$a id$o )id$f ):named a20 ))
(assert (! (= (comp$g id$d )id$n ):named a21 ))
(assert (! (= (comp$h id$ )id$l ):named a22 ))
(assert (! (= (comp$e id$o )id$b ):named a23 ))
(assert (! (= (comp$f id$o )id$d ):named a24 ))
(assert (! (= (comp$i id$n )id$ ):named a25 ))
(assert (! (forall ((?v0 C_a_fun$ ))(! (= (fun_app$d id$b ?v0 )?v0 ):pattern ((fun_app$d id$b ?v0 )))):named a26 ))
(assert (! (forall ((?v0 B_a_fun$ ))(! (= (fun_app$e id$d ?v0 )?v0 ):pattern ((fun_app$e id$d ?v0 )))):named a27 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (fun_app$ id$f ?v0 )?v0 ):pattern ((fun_app$ id$f ?v0 )))):named a28 ))
(assert (! (forall ((?v0 C$ ))(! (= (fun_app$f id$h ?v0 )?v0 ):pattern ((fun_app$f id$h ?v0 )))):named a29 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$g id$j ?v0 )?v0 ):pattern ((fun_app$g id$j ?v0 )))):named a30 ))
(assert (! (forall ((?v0 C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun$ ))(! (= (fun_app$h id$l ?v0 )?v0 ):pattern ((fun_app$h id$l ?v0 )))):named a31 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun$ ))(! (= (fun_app$i id$n ?v0 )?v0 ):pattern ((fun_app$i id$n ?v0 )))):named a32 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$j id$o ?v0 )?v0 ):pattern ((fun_app$j id$o ?v0 )))):named a33 ))
(assert (! (forall ((?v0 C_a_fun_b_c_fun_b_a_fun_fun_fun$ ))(! (= (fun_app$k id$ ?v0 )?v0 ):pattern ((fun_app$k id$ ?v0 )))):named a34 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B$ ))(! (= (fun_app$l (fun_app$m (fun_app$n comp$ ?v0 )?v1 )?v2 )(fun_app$o ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$m (fun_app$n comp$ ?v0 )?v1 )?v2 )))):named a35 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C$ ))(! (= (fun_app$o (fun_app$a (comp$b ?v0 )?v1 )?v2 )(fun_app$o ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$o (fun_app$a (comp$b ?v0 )?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$p (fun_app$b (comp$c ?v0 )?v1 )?v2 )(fun_app$p ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$p (fun_app$b (comp$c ?v0 )?v1 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$l (fun_app$c (comp$d ?v0 )?v1 )?v2 )(fun_app$l ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$c (comp$d ?v0 )?v1 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$o (fun_app$d (comp$e ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$o (fun_app$d (comp$e ?v0 )?v1 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$l (fun_app$e (comp$f ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$l ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$e (comp$f ?v0 )?v1 )?v2 )))):named a40 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$j (fun_app$q (comp$j ?v0 )?v1 )?v2 )(fun_app$l ?v0 (fun_app$r ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$q (comp$j ?v0 )?v1 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$f (fun_app$s (comp$k ?v0 )?v1 )?v2 )(fun_app$t ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$s (comp$k ?v0 )?v1 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$p (fun_app$u (comp$l ?v0 )?v1 )?v2 )(fun_app$t ?v0 (fun_app$l ?v1 ?v2 ))):pattern ((fun_app$p (fun_app$u (comp$l ?v0 )?v1 )?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$g (fun_app$v (comp$m ?v0 )?v1 )?v2 )(fun_app$r ?v0 (fun_app$l ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$v (comp$m ?v0 )?v1 )?v2 )))):named a44 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A$ ))(=> (= (fun_app$ (comp$a ?v0 )?v1 )(fun_app$ (comp$a id$o )?v2 ))(= (fun_app$j ?v0 (fun_app$j ?v1 ?v3 ))(fun_app$j ?v2 ?v3 )))):named a45 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_a_fun$ )(?v3 C$ ))(=> (= (fun_app$a (comp$b ?v0 )?v1 )(fun_app$d (comp$e id$o )?v2 ))(= (fun_app$o ?v0 (fun_app$f ?v1 ?v3 ))(fun_app$o ?v2 ?v3 )))):named a46 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_b_fun$ )(?v2 B_c_fun$ )(?v3 B$ ))(=> (= (fun_app$b (comp$c ?v0 )?v1 )(fun_app$w (comp$n id$h )?v2 ))(= (fun_app$p ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$p ?v2 ?v3 )))):named a47 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B$ ))(=> (= (fun_app$c (comp$d ?v0 )?v1 )(fun_app$e (comp$f id$o )?v2 ))(= (fun_app$l ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$l ?v2 ?v3 )))):named a48 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_a_fun$ )(?v3 C$ ))(=> (= (fun_app$d (comp$e ?v0 )?v1 )(fun_app$d (comp$e id$o )?v2 ))(= (fun_app$j ?v0 (fun_app$o ?v1 ?v3 ))(fun_app$o ?v2 ?v3 )))):named a49 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B$ ))(=> (= (fun_app$e (comp$f ?v0 )?v1 )(fun_app$e (comp$f id$o )?v2 ))(= (fun_app$j ?v0 (fun_app$l ?v1 ?v3 ))(fun_app$l ?v2 ?v3 )))):named a50 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_a_fun$ )(?v3 B$ ))(=> (= (fun_app$m (fun_app$n comp$ ?v0 )?v1 )(fun_app$e (comp$f id$o )?v2 ))(= (fun_app$o ?v0 (fun_app$p ?v1 ?v3 ))(fun_app$l ?v2 ?v3 )))):named a51 ))
(assert (! (forall ((?v0 C_a_fun_b_c_fun_b_a_fun_fun_fun_c_a_fun_b_c_fun_b_a_fun_fun_fun_fun$ ))(! (= (fun_app$h id$l ?v0 )?v0 ):pattern ((fun_app$h id$l ?v0 )))):named a52 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun$ ))(! (= (fun_app$i id$n ?v0 )?v0 ):pattern ((fun_app$i id$n ?v0 )))):named a53 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$j id$o ?v0 )?v0 ):pattern ((fun_app$j id$o ?v0 )))):named a54 ))
(assert (! (forall ((?v0 C_a_fun_b_c_fun_b_a_fun_fun_fun$ ))(! (= (fun_app$k id$ ?v0 )?v0 ):pattern ((fun_app$k id$ ?v0 )))):named a55 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 B_c_fun$ ))(= (fun_app$e (comp$f ?v0 )(fun_app$m (fun_app$n comp$ ?v1 )?v2 ))(fun_app$m (fun_app$n comp$ (fun_app$d (comp$e ?v0 )?v1 ))?v2 ))):named a56 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_b_fun$ ))(= (fun_app$m (fun_app$n comp$ ?v0 )(fun_app$b (comp$c ?v1 )?v2 ))(fun_app$c (comp$d (fun_app$m (fun_app$n comp$ ?v0 )?v1 ))?v2 ))):named a57 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 B_c_fun$ ))(= (fun_app$m (fun_app$n comp$ ?v0 )(fun_app$w (comp$n ?v1 )?v2 ))(fun_app$m (fun_app$n comp$ (fun_app$a (comp$b ?v0 )?v1 ))?v2 ))):named a58 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 B_c_fun$ )(?v2 B_b_fun$ ))(= (fun_app$w (comp$n ?v0 )(fun_app$b (comp$c ?v1 )?v2 ))(fun_app$b (comp$c (fun_app$w (comp$n ?v0 )?v1 ))?v2 ))):named a59 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (fun_app$u (comp$l ?v0 )(fun_app$c (comp$d ?v1 )?v2 ))(fun_app$b (comp$c (fun_app$u (comp$l ?v0 )?v1 ))?v2 ))):named a60 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 A_c_fun$ )(?v2 B_a_fun$ ))(= (fun_app$m (fun_app$n comp$ ?v0 )(fun_app$u (comp$l ?v1 )?v2 ))(fun_app$e (comp$f (fun_app$x (comp$o ?v0 )?v1 ))?v2 ))):named a61 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 C_b_fun$ ))(= (fun_app$a (comp$b ?v0 )(fun_app$y (comp$p ?v1 )?v2 ))(fun_app$z (comp$q (fun_app$m (fun_app$n comp$ ?v0 )?v1 ))?v2 ))):named a62 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_c_fun$ ))(= (fun_app$a (comp$b ?v0 )(fun_app$aa (comp$r ?v1 )?v2 ))(fun_app$a (comp$b (fun_app$a (comp$b ?v0 )?v1 ))?v2 ))):named a63 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 A_c_fun$ )(?v2 C_a_fun$ ))(= (fun_app$a (comp$b ?v0 )(fun_app$s (comp$k ?v1 )?v2 ))(fun_app$d (comp$e (fun_app$x (comp$o ?v0 )?v1 ))?v2 ))):named a64 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ ))(= (fun_app$b (comp$c ?v0 )(fun_app$ab (comp$s ?v1 )?v2 ))(fun_app$b (comp$c (fun_app$b (comp$c ?v0 )?v1 ))?v2 ))):named a65 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_b_fun$ ))(= (fun_app$c (comp$d (fun_app$m (fun_app$n comp$ ?v0 )?v1 ))?v2 )(fun_app$m (fun_app$n comp$ ?v0 )(fun_app$b (comp$c ?v1 )?v2 )))):named a66 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 B_c_fun$ ))(= (fun_app$m (fun_app$n comp$ (fun_app$d (comp$e ?v0 )?v1 ))?v2 )(fun_app$e (comp$f ?v0 )(fun_app$m (fun_app$n comp$ ?v1 )?v2 )))):named a67 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 B_c_fun$ ))(= (fun_app$m (fun_app$n comp$ (fun_app$a (comp$b ?v0 )?v1 ))?v2 )(fun_app$m (fun_app$n comp$ ?v0 )(fun_app$w (comp$n ?v1 )?v2 )))):named a68 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 C_b_fun$ ))(= (fun_app$z (comp$q (fun_app$m (fun_app$n comp$ ?v0 )?v1 ))?v2 )(fun_app$a (comp$b ?v0 )(fun_app$y (comp$p ?v1 )?v2 )))):named a69 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 C_b_fun$ ))(= (fun_app$z (comp$q (fun_app$e (comp$f ?v0 )?v1 ))?v2 )(fun_app$d (comp$e ?v0 )(fun_app$z (comp$q ?v1 )?v2 )))):named a70 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 B_c_fun$ ))(= (fun_app$m (fun_app$n comp$ (fun_app$z (comp$q ?v0 )?v1 ))?v2 )(fun_app$c (comp$d ?v0 )(fun_app$ac (comp$t ?v1 )?v2 )))):named a71 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_c_fun$ ))(= (fun_app$a (comp$b (fun_app$a (comp$b ?v0 )?v1 ))?v2 )(fun_app$a (comp$b ?v0 )(fun_app$aa (comp$r ?v1 )?v2 )))):named a72 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_c_fun$ ))(= (fun_app$a (comp$b (fun_app$d (comp$e ?v0 )?v1 ))?v2 )(fun_app$d (comp$e ?v0 )(fun_app$a (comp$b ?v1 )?v2 )))):named a73 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 B_c_fun$ )(?v2 B_b_fun$ ))(= (fun_app$b (comp$c (fun_app$w (comp$n ?v0 )?v1 ))?v2 )(fun_app$w (comp$n ?v0 )(fun_app$b (comp$c ?v1 )?v2 )))):named a74 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 B_a_fun$ )(?v2 B_b_fun$ ))(= (fun_app$b (comp$c (fun_app$u (comp$l ?v0 )?v1 ))?v2 )(fun_app$u (comp$l ?v0 )(fun_app$c (comp$d ?v1 )?v2 )))):named a75 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C$ ))(! (= (fun_app$o (fun_app$a (comp$b ?v0 )?v1 )?v2 )(fun_app$o ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$o (fun_app$a (comp$b ?v0 )?v1 )?v2 )))):named a76 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$p (fun_app$b (comp$c ?v0 )?v1 )?v2 )(fun_app$p ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$p (fun_app$b (comp$c ?v0 )?v1 )?v2 )))):named a77 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$l (fun_app$c (comp$d ?v0 )?v1 )?v2 )(fun_app$l ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$c (comp$d ?v0 )?v1 )?v2 )))):named a78 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C$ ))(! (= (fun_app$o (fun_app$d (comp$e ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$o ?v1 ?v2 ))):pattern ((fun_app$o (fun_app$d (comp$e ?v0 )?v1 )?v2 )))):named a79 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$l (fun_app$e (comp$f ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$l ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$e (comp$f ?v0 )?v1 )?v2 )))):named a80 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B$ ))(! (= (fun_app$l (fun_app$m (fun_app$n comp$ ?v0 )?v1 )?v2 )(fun_app$o ?v0 (fun_app$p ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$m (fun_app$n comp$ ?v0 )?v1 )?v2 )))):named a81 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_a_fun$ )(?v3 C$ ))(=> (= (fun_app$a (comp$b ?v0 )?v1 )?v2 )(= (fun_app$o ?v0 (fun_app$f ?v1 ?v3 ))(fun_app$o ?v2 ?v3 )))):named a82 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_b_fun$ )(?v2 B_c_fun$ )(?v3 B$ ))(=> (= (fun_app$b (comp$c ?v0 )?v1 )?v2 )(= (fun_app$p ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$p ?v2 ?v3 )))):named a83 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B$ ))(=> (= (fun_app$c (comp$d ?v0 )?v1 )?v2 )(= (fun_app$l ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$l ?v2 ?v3 )))):named a84 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_a_fun$ )(?v3 C$ ))(=> (= (fun_app$d (comp$e ?v0 )?v1 )?v2 )(= (fun_app$j ?v0 (fun_app$o ?v1 ?v3 ))(fun_app$o ?v2 ?v3 )))):named a85 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun$ )(?v3 B$ ))(=> (= (fun_app$e (comp$f ?v0 )?v1 )?v2 )(= (fun_app$j ?v0 (fun_app$l ?v1 ?v3 ))(fun_app$l ?v2 ?v3 )))):named a86 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_a_fun$ )(?v3 B$ ))(=> (= (fun_app$m (fun_app$n comp$ ?v0 )?v1 )?v2 )(= (fun_app$o ?v0 (fun_app$p ?v1 ?v3 ))(fun_app$l ?v2 ?v3 )))):named a87 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_a_fun$ )(?v3 B_c_fun$ ))(=> (= (fun_app$d (comp$e ?v0 )?v1 )?v2 )(= (fun_app$e (comp$f ?v0 )(fun_app$m (fun_app$n comp$ ?v1 )?v3 ))(fun_app$m (fun_app$n comp$ ?v2 )?v3 )))):named a88 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_a_fun$ )(?v3 B_c_fun$ ))(=> (= (fun_app$a (comp$b ?v0 )?v1 )?v2 )(= (fun_app$m (fun_app$n comp$ ?v0 )(fun_app$w (comp$n ?v1 )?v3 ))(fun_app$m (fun_app$n comp$ ?v2 )?v3 )))):named a89 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$m (fun_app$n comp$ ?v0 )?v1 )?v2 )(= (fun_app$m (fun_app$n comp$ ?v0 )(fun_app$b (comp$c ?v1 )?v3 ))(fun_app$c (comp$d ?v2 )?v3 )))):named a90 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 B_c_fun$ )(?v2 B_c_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$w (comp$n ?v0 )?v1 )?v2 )(= (fun_app$w (comp$n ?v0 )(fun_app$b (comp$c ?v1 )?v3 ))(fun_app$b (comp$c ?v2 )?v3 )))):named a91 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 B_a_fun$ )(?v2 B_c_fun$ )(?v3 B_b_fun$ ))(=> (= (fun_app$u (comp$l ?v0 )?v1 )?v2 )(= (fun_app$u (comp$l ?v0 )(fun_app$c (comp$d ?v1 )?v3 ))(fun_app$b (comp$c ?v2 )?v3 )))):named a92 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 A_c_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$x (comp$o ?v0 )?v1 )?v2 )(= (fun_app$m (fun_app$n comp$ ?v0 )(fun_app$u (comp$l ?v1 )?v3 ))(fun_app$e (comp$f ?v2 )?v3 )))):named a93 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 A_c_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$x (comp$o ?v0 )?v1 )?v2 )(= (fun_app$a (comp$b ?v0 )(fun_app$s (comp$k ?v1 )?v3 ))(fun_app$d (comp$e ?v2 )?v3 )))):named a94 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 B_c_fun$ ))(=> (= (fun_app$z (comp$q ?v0 )?v1 )?v2 )(= (fun_app$c (comp$d ?v0 )(fun_app$ac (comp$t ?v1 )?v3 ))(fun_app$m (fun_app$n comp$ ?v2 )?v3 )))):named a95 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$q (comp$j ?v0 )?v1 )?v2 )(= (fun_app$c (comp$d ?v0 )(fun_app$v (comp$m ?v1 )?v3 ))(fun_app$e (comp$f ?v2 )?v3 )))):named a96 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$ (comp$a ?v0 )?v1 )?v2 )(= (fun_app$d (comp$e ?v0 )(fun_app$d (comp$e ?v1 )?v3 ))(fun_app$d (comp$e ?v2 )?v3 )))):named a97 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_b_fun$ )(?v2 B_c_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$b (comp$c ?v0 )?v1 )?v2 )(= (fun_app$c (comp$d (fun_app$m (fun_app$n comp$ ?v3 )?v0 ))?v1 )(fun_app$m (fun_app$n comp$ ?v3 )?v2 )))):named a98 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 B_c_fun$ )(?v2 B_c_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$w (comp$n ?v0 )?v1 )?v2 )(= (fun_app$m (fun_app$n comp$ (fun_app$a (comp$b ?v3 )?v0 ))?v1 )(fun_app$m (fun_app$n comp$ ?v3 )?v2 )))):named a99 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$m (fun_app$n comp$ ?v0 )?v1 )?v2 )(= (fun_app$m (fun_app$n comp$ (fun_app$d (comp$e ?v3 )?v0 ))?v1 )(fun_app$e (comp$f ?v3 )?v2 )))):named a100 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 C_b_fun$ )(?v2 C_c_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$y (comp$p ?v0 )?v1 )?v2 )(= (fun_app$z (comp$q (fun_app$m (fun_app$n comp$ ?v3 )?v0 ))?v1 )(fun_app$a (comp$b ?v3 )?v2 )))):named a101 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 C_b_fun$ )(?v2 C_a_fun$ )(?v3 A_a_fun$ ))(=> (= (fun_app$z (comp$q ?v0 )?v1 )?v2 )(= (fun_app$z (comp$q (fun_app$e (comp$f ?v3 )?v0 ))?v1 )(fun_app$d (comp$e ?v3 )?v2 )))):named a102 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 B_c_fun$ )(?v2 B_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$ac (comp$t ?v0 )?v1 )?v2 )(= (fun_app$m (fun_app$n comp$ (fun_app$z (comp$q ?v3 )?v0 ))?v1 )(fun_app$c (comp$d ?v3 )?v2 )))):named a103 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_c_fun$ )(?v2 C_c_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$aa (comp$r ?v0 )?v1 )?v2 )(= (fun_app$a (comp$b (fun_app$a (comp$b ?v3 )?v0 ))?v1 )(fun_app$a (comp$b ?v3 )?v2 )))):named a104 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_c_fun$ ))(=> (= (fun_app$ab (comp$s ?v0 )?v1 )?v2 )(= (fun_app$b (comp$c (fun_app$b (comp$c ?v3 )?v0 ))?v1 )(fun_app$b (comp$c ?v3 )?v2 )))):named a105 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B_b_fun$ )(?v3 B_a_fun$ ))(=> (= (fun_app$ab (comp$s ?v0 )?v1 )?v2 )(= (fun_app$c (comp$d (fun_app$c (comp$d ?v3 )?v0 ))?v1 )(fun_app$c (comp$d ?v3 )?v2 )))):named a106 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 C_a_fun$ )(?v2 C_c_fun$ )(?v3 C_a_fun$ ))(=> (= (fun_app$s (comp$k ?v0 )?v1 )?v2 )(= (fun_app$d (comp$e (fun_app$x (comp$o ?v3 )?v0 ))?v1 )(fun_app$a (comp$b ?v3 )?v2 )))):named a107 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 C_a_fun$ )(?v3 B_c_fun$ )(?v4 B$ ))(=> (= (fun_app$m (fun_app$n comp$ ?v0 )?v1 )(fun_app$m (fun_app$n comp$ ?v2 )?v3 ))(= (fun_app$o ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$o ?v2 (fun_app$p ?v3 ?v4 ))))):named a108 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$m (fun_app$n comp$ ?v0 )?v1 )(fun_app$c (comp$d ?v2 )?v3 ))(= (fun_app$o ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$l ?v2 (fun_app$g ?v3 ?v4 ))))):named a109 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 B_c_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 B$ ))(=> (= (fun_app$m (fun_app$n comp$ ?v0 )?v1 )(fun_app$e (comp$f ?v2 )?v3 ))(= (fun_app$o ?v0 (fun_app$p ?v1 ?v4 ))(fun_app$j ?v2 (fun_app$l ?v3 ?v4 ))))):named a110 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(=> (= (fun_app$a (comp$b ?v0 )?v1 )(fun_app$a (comp$b ?v2 )?v3 ))(= (fun_app$o ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$o ?v2 (fun_app$f ?v3 ?v4 ))))):named a111 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_c_fun$ )(?v2 A_a_fun$ )(?v3 C_a_fun$ )(?v4 C$ ))(=> (= (fun_app$a (comp$b ?v0 )?v1 )(fun_app$d (comp$e ?v2 )?v3 ))(= (fun_app$o ?v0 (fun_app$f ?v1 ?v4 ))(fun_app$j ?v2 (fun_app$o ?v3 ?v4 ))))):named a112 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_b_fun$ )(?v2 B_c_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$b (comp$c ?v0 )?v1 )(fun_app$b (comp$c ?v2 )?v3 ))(= (fun_app$p ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$p ?v2 (fun_app$g ?v3 ?v4 ))))):named a113 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 C_a_fun$ )(?v3 B_c_fun$ )(?v4 B$ ))(=> (= (fun_app$c (comp$d ?v0 )?v1 )(fun_app$m (fun_app$n comp$ ?v2 )?v3 ))(= (fun_app$l ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$o ?v2 (fun_app$p ?v3 ?v4 ))))):named a114 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B_a_fun$ )(?v3 B_b_fun$ )(?v4 B$ ))(=> (= (fun_app$c (comp$d ?v0 )?v1 )(fun_app$c (comp$d ?v2 )?v3 ))(= (fun_app$l ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$l ?v2 (fun_app$g ?v3 ?v4 ))))):named a115 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 A_a_fun$ )(?v3 B_a_fun$ )(?v4 B$ ))(=> (= (fun_app$c (comp$d ?v0 )?v1 )(fun_app$e (comp$f ?v2 )?v3 ))(= (fun_app$l ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$j ?v2 (fun_app$l ?v3 ?v4 ))))):named a116 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 C_a_fun$ )(?v2 C_a_fun$ )(?v3 C_c_fun$ )(?v4 C$ ))(=> (= (fun_app$d (comp$e ?v0 )?v1 )(fun_app$a (comp$b ?v2 )?v3 ))(= (fun_app$j ?v0 (fun_app$o ?v1 ?v4 ))(fun_app$o ?v2 (fun_app$f ?v3 ?v4 ))))):named a117 ))
(check-sat )
;(get-unsat-core )
