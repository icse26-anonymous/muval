;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Int_int_fun$ 0 )
(declare-sort Int_nat_fun$ 0 )
(declare-sort Nat_int_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Int_int_tree_fun$ 0 )
(declare-sort Int_nat_tree_fun$ 0 )
(declare-sort Int_tree_int_fun$ 0 )
(declare-sort Int_tree_nat_fun$ 0 )
(declare-sort Nat_int_tree_fun$ 0 )
(declare-sort Nat_nat_tree_fun$ 0 )
(declare-codatatypes ()((Int_tree$ (node$ (root$ Int )(left$ Int_tree$ )(right$ Int_tree$ )))))
(declare-sort Num$ 0)
(declare-fun one$ ()Num$)
(declare-fun select$ (Num$)Num$)
(declare-fun bit0$ (Num$ )Num$)
(declare-fun selecta$ (Num$)Num$)
(declare-fun bit1$ (Num$ )Num$)
(declare-codatatypes ()((Nat_tree$ (node$a (root$a Nat$ )(left$a Nat_tree$ )(right$a Nat_tree$ )))(Int_tree_tree$ (node$b (root$b Int_tree$ )(left$b Int_tree_tree$ )(right$b Int_tree_tree$ )))(Nat_tree_tree$ (node$c (root$c Nat_tree$ )(left$c Nat_tree_tree$ )(right$c Nat_tree_tree$ )))(Int_tree_tree_tree$ (node$d (root$d Int_tree_tree$ )(left$d Int_tree_tree_tree$ )(right$d Int_tree_tree_tree$ )))(Nat_tree_tree_tree$ (node$e (root$e Nat_tree_tree$ )(left$e Nat_tree_tree_tree$ )(right$e Nat_tree_tree_tree$ )))))
(declare-fun den$ ()Int_tree$ )
(declare-fun mod$ (Int_tree$ Int_tree$ )Int_tree$ )
(declare-fun num$ ()Int_tree$ )
(declare-fun den$a ()Nat_tree$ )
(declare-fun mod$a (Nat_tree$ Nat_tree$ )Nat_tree$ )
(declare-fun mod$b (Int )Int_int_fun$ )
(declare-fun mod$c (Nat$ )Nat_nat_fun$ )
(declare-fun mod$d (Int_tree_tree$ Int_tree_tree$ )Int_tree_tree$ )
(declare-fun mod$e (Nat_tree_tree$ Nat_tree_tree$ )Nat_tree_tree$ )
(declare-fun num$a ()Nat_tree$ )
(declare-fun plus$ (Int_tree$ Int_tree$ )Int_tree$ )
(declare-fun minus$ (Int_tree$ Int_tree$ )Int_tree$ )
(declare-fun plus$a (Nat_tree$ Nat_tree$ )Nat_tree$ )
(declare-fun plus$b (Nat$ )Nat_nat_fun$ )
(declare-fun plus$c (Int_tree_tree$ Int_tree_tree$ )Int_tree_tree$ )
(declare-fun plus$d (Nat_tree_tree$ Nat_tree_tree$ )Nat_tree_tree$ )
(declare-fun plus$e (Int_tree_tree_tree$ Int_tree_tree_tree$ )Int_tree_tree_tree$ )
(declare-fun plus$f (Nat_tree_tree_tree$ Nat_tree_tree_tree$ )Nat_tree_tree_tree$ )
(declare-fun times$ (Int_tree$ Int_tree$ )Int_tree$ )
(declare-fun minus$a (Nat_tree$ Nat_tree$ )Nat_tree$ )
(declare-fun minus$b (Int_tree_tree_tree$ Int_tree_tree_tree$ )Int_tree_tree_tree$ )
(declare-fun minus$c (Int_tree_tree$ Int_tree_tree$ )Int_tree_tree$ )
(declare-fun of_nat$ ()Nat_int_fun$ )
(declare-fun times$a (Nat_tree$ Nat_tree$ )Nat_tree$ )
(declare-fun times$b (Int )Int_int_fun$ )
(declare-fun times$c (Nat$ )Nat_nat_fun$ )
(declare-fun times$d (Int_tree_tree$ Int_tree_tree$ )Int_tree_tree$ )
(declare-fun times$e (Nat_tree_tree$ Nat_tree_tree$ )Nat_tree_tree$ )
(declare-fun times$f (Int_tree_tree_tree$ Int_tree_tree_tree$ )Int_tree_tree_tree$ )
(declare-fun times$g (Nat_tree_tree_tree$ Nat_tree_tree_tree$ )Nat_tree_tree_tree$ )
(declare-fun fIXME_x$ ()Int_tree$ )
(declare-fun fun_app$ (Int_int_fun$ Int )Int )
(declare-fun numeral$ (Num$ )Int_tree$ )
(declare-fun fun_app$a (Int_nat_fun$ Int )Nat$ )
(declare-fun fun_app$b (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$c (Nat_int_fun$ Nat$ )Int )
(declare-fun fun_app$d (Int_int_tree_fun$ Int )Int_tree$ )
(declare-fun fun_app$e (Nat_int_tree_fun$ Nat$ )Int_tree$ )
(declare-fun fun_app$f (Int_nat_tree_fun$ Int )Nat_tree$ )
(declare-fun fun_app$g (Nat_nat_tree_fun$ Nat$ )Nat_tree$ )
(declare-fun fun_app$h (Int_tree_int_fun$ Int_tree$ )Int )
(declare-fun fun_app$i (Int_tree_nat_fun$ Int_tree$ )Nat$ )
(declare-fun map_tree$ (Nat_int_fun$ Nat_tree$ )Int_tree$ )
(declare-fun numeral$a (Num$ )Nat_tree$ )
(declare-fun numeral$b (Num$ )Int_tree_tree_tree$ )
(declare-fun numeral$c (Num$ )Int )
(declare-fun numeral$d (Num$ )Int_tree_tree$ )
(declare-fun numeral$e (Num$ )Nat_tree_tree_tree$ )
(declare-fun numeral$f (Num$ )Nat$ )
(declare-fun numeral$g (Num$ )Nat_tree_tree$ )
(declare-fun map_tree$a (Int_int_fun$ Int_tree$ )Int_tree$ )
(declare-fun map_tree$b (Int_nat_fun$ Int_tree$ )Nat_tree$ )
(declare-fun map_tree$c (Nat_nat_fun$ Nat_tree$ )Nat_tree$ )
(declare-fun map_tree$d (Int_int_tree_fun$ Int_tree$ )Int_tree_tree$ )
(declare-fun map_tree$e (Nat_int_tree_fun$ Nat_tree$ )Int_tree_tree$ )
(declare-fun map_tree$f (Int_nat_tree_fun$ Int_tree$ )Nat_tree_tree$ )
(declare-fun map_tree$g (Nat_nat_tree_fun$ Nat_tree$ )Nat_tree_tree$ )
(declare-fun map_tree$h (Int_tree_int_fun$ Int_tree_tree$ )Int_tree$ )
(declare-fun map_tree$i (Int_tree_nat_fun$ Int_tree_tree$ )Nat_tree$ )
(declare-fun tree_chop$ (Int_tree$ )Int_tree$ )
(assert (! (not (= (minus$ (plus$ num$ den$ )(times$ (numeral$ (bit0$ one$ ))(mod$ num$ den$ )))(map_tree$ of_nat$ (minus$a (plus$a num$a den$a )(times$a (numeral$a (bit0$ one$ ))(mod$a num$a den$a )))))):named a0 ))
(assert (! (forall ((?v0 Num$ ))(= (map_tree$ of_nat$ (numeral$a ?v0 ))(numeral$ ?v0 ))):named a1 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ ))(= (mod$ (plus$ ?v0 ?v1 )?v1 )(mod$ ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 Nat_tree$ )(?v1 Nat_tree$ ))(= (mod$a (plus$a ?v0 ?v1 )?v1 )(mod$a ?v0 ?v1 ))):named a3 ))
(assert (! (= den$ (map_tree$ of_nat$ den$a )):named a4 ))
(assert (! (= num$ (map_tree$ of_nat$ num$a )):named a5 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(=> (forall ((?v3 Int )(?v4 Int ))(= (fun_app$ ?v0 (fun_app$ (mod$b ?v3 )?v4 ))(fun_app$ (mod$b (fun_app$ ?v0 ?v3 ))(fun_app$ ?v0 ?v4 ))))(= (map_tree$a ?v0 (mod$ ?v1 ?v2 ))(mod$ (map_tree$a ?v0 ?v1 )(map_tree$a ?v0 ?v2 ))))):named a6 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(=> (forall ((?v3 Int )(?v4 Int ))(= (fun_app$a ?v0 (fun_app$ (mod$b ?v3 )?v4 ))(fun_app$b (mod$c (fun_app$a ?v0 ?v3 ))(fun_app$a ?v0 ?v4 ))))(= (map_tree$b ?v0 (mod$ ?v1 ?v2 ))(mod$a (map_tree$b ?v0 ?v1 )(map_tree$b ?v0 ?v2 ))))):named a7 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (forall ((?v3 Nat$ )(?v4 Nat$ ))(= (fun_app$b ?v0 (fun_app$b (mod$c ?v3 )?v4 ))(fun_app$b (mod$c (fun_app$b ?v0 ?v3 ))(fun_app$b ?v0 ?v4 ))))(= (map_tree$c ?v0 (mod$a ?v1 ?v2 ))(mod$a (map_tree$c ?v0 ?v1 )(map_tree$c ?v0 ?v2 ))))):named a8 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (forall ((?v3 Nat$ )(?v4 Nat$ ))(= (fun_app$c ?v0 (fun_app$b (mod$c ?v3 )?v4 ))(fun_app$ (mod$b (fun_app$c ?v0 ?v3 ))(fun_app$c ?v0 ?v4 ))))(= (map_tree$ ?v0 (mod$a ?v1 ?v2 ))(mod$ (map_tree$ ?v0 ?v1 )(map_tree$ ?v0 ?v2 ))))):named a9 ))
(assert (! (forall ((?v0 Int_int_tree_fun$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(=> (forall ((?v3 Int )(?v4 Int ))(= (fun_app$d ?v0 (fun_app$ (mod$b ?v3 )?v4 ))(mod$ (fun_app$d ?v0 ?v3 )(fun_app$d ?v0 ?v4 ))))(= (map_tree$d ?v0 (mod$ ?v1 ?v2 ))(mod$d (map_tree$d ?v0 ?v1 )(map_tree$d ?v0 ?v2 ))))):named a10 ))
(assert (! (forall ((?v0 Nat_int_tree_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (forall ((?v3 Nat$ )(?v4 Nat$ ))(= (fun_app$e ?v0 (fun_app$b (mod$c ?v3 )?v4 ))(mod$ (fun_app$e ?v0 ?v3 )(fun_app$e ?v0 ?v4 ))))(= (map_tree$e ?v0 (mod$a ?v1 ?v2 ))(mod$d (map_tree$e ?v0 ?v1 )(map_tree$e ?v0 ?v2 ))))):named a11 ))
(assert (! (forall ((?v0 Int_nat_tree_fun$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(=> (forall ((?v3 Int )(?v4 Int ))(= (fun_app$f ?v0 (fun_app$ (mod$b ?v3 )?v4 ))(mod$a (fun_app$f ?v0 ?v3 )(fun_app$f ?v0 ?v4 ))))(= (map_tree$f ?v0 (mod$ ?v1 ?v2 ))(mod$e (map_tree$f ?v0 ?v1 )(map_tree$f ?v0 ?v2 ))))):named a12 ))
(assert (! (forall ((?v0 Nat_nat_tree_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (forall ((?v3 Nat$ )(?v4 Nat$ ))(= (fun_app$g ?v0 (fun_app$b (mod$c ?v3 )?v4 ))(mod$a (fun_app$g ?v0 ?v3 )(fun_app$g ?v0 ?v4 ))))(= (map_tree$g ?v0 (mod$a ?v1 ?v2 ))(mod$e (map_tree$g ?v0 ?v1 )(map_tree$g ?v0 ?v2 ))))):named a13 ))
(assert (! (forall ((?v0 Int_tree_int_fun$ )(?v1 Int_tree_tree$ )(?v2 Int_tree_tree$ ))(=> (forall ((?v3 Int_tree$ )(?v4 Int_tree$ ))(= (fun_app$h ?v0 (mod$ ?v3 ?v4 ))(fun_app$ (mod$b (fun_app$h ?v0 ?v3 ))(fun_app$h ?v0 ?v4 ))))(= (map_tree$h ?v0 (mod$d ?v1 ?v2 ))(mod$ (map_tree$h ?v0 ?v1 )(map_tree$h ?v0 ?v2 ))))):named a14 ))
(assert (! (forall ((?v0 Int_tree_nat_fun$ )(?v1 Int_tree_tree$ )(?v2 Int_tree_tree$ ))(=> (forall ((?v3 Int_tree$ )(?v4 Int_tree$ ))(= (fun_app$i ?v0 (mod$ ?v3 ?v4 ))(fun_app$b (mod$c (fun_app$i ?v0 ?v3 ))(fun_app$i ?v0 ?v4 ))))(= (map_tree$i ?v0 (mod$d ?v1 ?v2 ))(mod$a (map_tree$i ?v0 ?v1 )(map_tree$i ?v0 ?v2 ))))):named a15 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(=> (forall ((?v3 Int )(?v4 Int ))(= (fun_app$ ?v0 (+ ?v3 ?v4 ))(+ (fun_app$ ?v0 ?v3 )(fun_app$ ?v0 ?v4 ))))(= (map_tree$a ?v0 (plus$ ?v1 ?v2 ))(plus$ (map_tree$a ?v0 ?v1 )(map_tree$a ?v0 ?v2 ))))):named a16 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(=> (forall ((?v3 Int )(?v4 Int ))(= (fun_app$a ?v0 (+ ?v3 ?v4 ))(fun_app$b (plus$b (fun_app$a ?v0 ?v3 ))(fun_app$a ?v0 ?v4 ))))(= (map_tree$b ?v0 (plus$ ?v1 ?v2 ))(plus$a (map_tree$b ?v0 ?v1 )(map_tree$b ?v0 ?v2 ))))):named a17 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (forall ((?v3 Nat$ )(?v4 Nat$ ))(= (fun_app$b ?v0 (fun_app$b (plus$b ?v3 )?v4 ))(fun_app$b (plus$b (fun_app$b ?v0 ?v3 ))(fun_app$b ?v0 ?v4 ))))(= (map_tree$c ?v0 (plus$a ?v1 ?v2 ))(plus$a (map_tree$c ?v0 ?v1 )(map_tree$c ?v0 ?v2 ))))):named a18 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (forall ((?v3 Nat$ )(?v4 Nat$ ))(= (fun_app$c ?v0 (fun_app$b (plus$b ?v3 )?v4 ))(+ (fun_app$c ?v0 ?v3 )(fun_app$c ?v0 ?v4 ))))(= (map_tree$ ?v0 (plus$a ?v1 ?v2 ))(plus$ (map_tree$ ?v0 ?v1 )(map_tree$ ?v0 ?v2 ))))):named a19 ))
(assert (! (forall ((?v0 Int_int_tree_fun$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(=> (forall ((?v3 Int )(?v4 Int ))(= (fun_app$d ?v0 (+ ?v3 ?v4 ))(plus$ (fun_app$d ?v0 ?v3 )(fun_app$d ?v0 ?v4 ))))(= (map_tree$d ?v0 (plus$ ?v1 ?v2 ))(plus$c (map_tree$d ?v0 ?v1 )(map_tree$d ?v0 ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 Nat_int_tree_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (forall ((?v3 Nat$ )(?v4 Nat$ ))(= (fun_app$e ?v0 (fun_app$b (plus$b ?v3 )?v4 ))(plus$ (fun_app$e ?v0 ?v3 )(fun_app$e ?v0 ?v4 ))))(= (map_tree$e ?v0 (plus$a ?v1 ?v2 ))(plus$c (map_tree$e ?v0 ?v1 )(map_tree$e ?v0 ?v2 ))))):named a21 ))
(assert (! (forall ((?v0 Int_nat_tree_fun$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(=> (forall ((?v3 Int )(?v4 Int ))(= (fun_app$f ?v0 (+ ?v3 ?v4 ))(plus$a (fun_app$f ?v0 ?v3 )(fun_app$f ?v0 ?v4 ))))(= (map_tree$f ?v0 (plus$ ?v1 ?v2 ))(plus$d (map_tree$f ?v0 ?v1 )(map_tree$f ?v0 ?v2 ))))):named a22 ))
(assert (! (forall ((?v0 Nat_nat_tree_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (forall ((?v3 Nat$ )(?v4 Nat$ ))(= (fun_app$g ?v0 (fun_app$b (plus$b ?v3 )?v4 ))(plus$a (fun_app$g ?v0 ?v3 )(fun_app$g ?v0 ?v4 ))))(= (map_tree$g ?v0 (plus$a ?v1 ?v2 ))(plus$d (map_tree$g ?v0 ?v1 )(map_tree$g ?v0 ?v2 ))))):named a23 ))
(assert (! (forall ((?v0 Int_tree_int_fun$ )(?v1 Int_tree_tree$ )(?v2 Int_tree_tree$ ))(=> (forall ((?v3 Int_tree$ )(?v4 Int_tree$ ))(= (fun_app$h ?v0 (plus$ ?v3 ?v4 ))(+ (fun_app$h ?v0 ?v3 )(fun_app$h ?v0 ?v4 ))))(= (map_tree$h ?v0 (plus$c ?v1 ?v2 ))(plus$ (map_tree$h ?v0 ?v1 )(map_tree$h ?v0 ?v2 ))))):named a24 ))
(assert (! (forall ((?v0 Int_tree_nat_fun$ )(?v1 Int_tree_tree$ )(?v2 Int_tree_tree$ ))(=> (forall ((?v3 Int_tree$ )(?v4 Int_tree$ ))(= (fun_app$i ?v0 (plus$ ?v3 ?v4 ))(fun_app$b (plus$b (fun_app$i ?v0 ?v3 ))(fun_app$i ?v0 ?v4 ))))(= (map_tree$i ?v0 (plus$c ?v1 ?v2 ))(plus$a (map_tree$i ?v0 ?v1 )(map_tree$i ?v0 ?v2 ))))):named a25 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(=> (forall ((?v3 Int )(?v4 Int ))(= (fun_app$ ?v0 (fun_app$ (times$b ?v3 )?v4 ))(fun_app$ (times$b (fun_app$ ?v0 ?v3 ))(fun_app$ ?v0 ?v4 ))))(= (map_tree$a ?v0 (times$ ?v1 ?v2 ))(times$ (map_tree$a ?v0 ?v1 )(map_tree$a ?v0 ?v2 ))))):named a26 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(=> (forall ((?v3 Int )(?v4 Int ))(= (fun_app$a ?v0 (fun_app$ (times$b ?v3 )?v4 ))(fun_app$b (times$c (fun_app$a ?v0 ?v3 ))(fun_app$a ?v0 ?v4 ))))(= (map_tree$b ?v0 (times$ ?v1 ?v2 ))(times$a (map_tree$b ?v0 ?v1 )(map_tree$b ?v0 ?v2 ))))):named a27 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (forall ((?v3 Nat$ )(?v4 Nat$ ))(= (fun_app$b ?v0 (fun_app$b (times$c ?v3 )?v4 ))(fun_app$b (times$c (fun_app$b ?v0 ?v3 ))(fun_app$b ?v0 ?v4 ))))(= (map_tree$c ?v0 (times$a ?v1 ?v2 ))(times$a (map_tree$c ?v0 ?v1 )(map_tree$c ?v0 ?v2 ))))):named a28 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (forall ((?v3 Nat$ )(?v4 Nat$ ))(= (fun_app$c ?v0 (fun_app$b (times$c ?v3 )?v4 ))(fun_app$ (times$b (fun_app$c ?v0 ?v3 ))(fun_app$c ?v0 ?v4 ))))(= (map_tree$ ?v0 (times$a ?v1 ?v2 ))(times$ (map_tree$ ?v0 ?v1 )(map_tree$ ?v0 ?v2 ))))):named a29 ))
(assert (! (forall ((?v0 Int_int_tree_fun$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(=> (forall ((?v3 Int )(?v4 Int ))(= (fun_app$d ?v0 (fun_app$ (times$b ?v3 )?v4 ))(times$ (fun_app$d ?v0 ?v3 )(fun_app$d ?v0 ?v4 ))))(= (map_tree$d ?v0 (times$ ?v1 ?v2 ))(times$d (map_tree$d ?v0 ?v1 )(map_tree$d ?v0 ?v2 ))))):named a30 ))
(assert (! (forall ((?v0 Nat_int_tree_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (forall ((?v3 Nat$ )(?v4 Nat$ ))(= (fun_app$e ?v0 (fun_app$b (times$c ?v3 )?v4 ))(times$ (fun_app$e ?v0 ?v3 )(fun_app$e ?v0 ?v4 ))))(= (map_tree$e ?v0 (times$a ?v1 ?v2 ))(times$d (map_tree$e ?v0 ?v1 )(map_tree$e ?v0 ?v2 ))))):named a31 ))
(assert (! (forall ((?v0 Int_nat_tree_fun$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(=> (forall ((?v3 Int )(?v4 Int ))(= (fun_app$f ?v0 (fun_app$ (times$b ?v3 )?v4 ))(times$a (fun_app$f ?v0 ?v3 )(fun_app$f ?v0 ?v4 ))))(= (map_tree$f ?v0 (times$ ?v1 ?v2 ))(times$e (map_tree$f ?v0 ?v1 )(map_tree$f ?v0 ?v2 ))))):named a32 ))
(assert (! (forall ((?v0 Nat_nat_tree_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (forall ((?v3 Nat$ )(?v4 Nat$ ))(= (fun_app$g ?v0 (fun_app$b (times$c ?v3 )?v4 ))(times$a (fun_app$g ?v0 ?v3 )(fun_app$g ?v0 ?v4 ))))(= (map_tree$g ?v0 (times$a ?v1 ?v2 ))(times$e (map_tree$g ?v0 ?v1 )(map_tree$g ?v0 ?v2 ))))):named a33 ))
(assert (! (forall ((?v0 Int_tree_int_fun$ )(?v1 Int_tree_tree$ )(?v2 Int_tree_tree$ ))(=> (forall ((?v3 Int_tree$ )(?v4 Int_tree$ ))(= (fun_app$h ?v0 (times$ ?v3 ?v4 ))(fun_app$ (times$b (fun_app$h ?v0 ?v3 ))(fun_app$h ?v0 ?v4 ))))(= (map_tree$h ?v0 (times$d ?v1 ?v2 ))(times$ (map_tree$h ?v0 ?v1 )(map_tree$h ?v0 ?v2 ))))):named a34 ))
(assert (! (forall ((?v0 Int_tree_nat_fun$ )(?v1 Int_tree_tree$ )(?v2 Int_tree_tree$ ))(=> (forall ((?v3 Int_tree$ )(?v4 Int_tree$ ))(= (fun_app$i ?v0 (times$ ?v3 ?v4 ))(fun_app$b (times$c (fun_app$i ?v0 ?v3 ))(fun_app$i ?v0 ?v4 ))))(= (map_tree$i ?v0 (times$d ?v1 ?v2 ))(times$a (map_tree$i ?v0 ?v1 )(map_tree$i ?v0 ?v2 ))))):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$b (mod$c (fun_app$b (plus$b (fun_app$b (times$c ?v0 )?v1 ))?v2 ))?v0 )(fun_app$b (mod$c ?v2 )?v0 ))):named a36 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (fun_app$ (mod$b (+ (fun_app$ (times$b ?v0 )?v1 )?v2 ))?v0 )(fun_app$ (mod$b ?v2 )?v0 ))):named a37 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$b (mod$c (fun_app$b (plus$b (fun_app$b (times$c ?v0 )?v1 ))?v2 ))?v1 )(fun_app$b (mod$c ?v2 )?v1 ))):named a38 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (fun_app$ (mod$b (+ (fun_app$ (times$b ?v0 )?v1 )?v2 ))?v1 )(fun_app$ (mod$b ?v2 )?v1 ))):named a39 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$b (mod$c (fun_app$b (plus$b ?v0 )(fun_app$b (times$c ?v1 )?v2 )))?v1 )(fun_app$b (mod$c ?v0 )?v1 ))):named a40 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (fun_app$ (mod$b (+ ?v0 (fun_app$ (times$b ?v1 )?v2 )))?v1 )(fun_app$ (mod$b ?v0 )?v1 ))):named a41 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$b (mod$c (fun_app$b (plus$b ?v0 )(fun_app$b (times$c ?v1 )?v2 )))?v2 )(fun_app$b (mod$c ?v0 )?v2 ))):named a42 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (fun_app$ (mod$b (+ ?v0 (fun_app$ (times$b ?v1 )?v2 )))?v2 )(fun_app$ (mod$b ?v0 )?v2 ))):named a43 ))
(assert (! (forall ((?v0 Int_tree_tree_tree$ )(?v1 Int_tree_tree_tree$ )(?v2 Num$ ))(= (times$f (minus$b ?v0 ?v1 )(numeral$b ?v2 ))(minus$b (times$f ?v0 (numeral$b ?v2 ))(times$f ?v1 (numeral$b ?v2 ))))):named a44 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Num$ ))(= (fun_app$ (times$b (- ?v0 ?v1 ))(numeral$c ?v2 ))(- (fun_app$ (times$b ?v0 )(numeral$c ?v2 ))(fun_app$ (times$b ?v1 )(numeral$c ?v2 ))))):named a45 ))
(assert (! (forall ((?v0 Int_tree_tree$ )(?v1 Int_tree_tree$ )(?v2 Num$ ))(= (times$d (minus$c ?v0 ?v1 )(numeral$d ?v2 ))(minus$c (times$d ?v0 (numeral$d ?v2 ))(times$d ?v1 (numeral$d ?v2 ))))):named a46 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ )(?v2 Num$ ))(= (times$ (minus$ ?v0 ?v1 )(numeral$ ?v2 ))(minus$ (times$ ?v0 (numeral$ ?v2 ))(times$ ?v1 (numeral$ ?v2 ))))):named a47 ))
(assert (! (forall ((?v0 Num$ )(?v1 Int_tree_tree_tree$ )(?v2 Int_tree_tree_tree$ ))(= (times$f (numeral$b ?v0 )(minus$b ?v1 ?v2 ))(minus$b (times$f (numeral$b ?v0 )?v1 )(times$f (numeral$b ?v0 )?v2 )))):named a48 ))
(assert (! (forall ((?v0 Num$ )(?v1 Int )(?v2 Int ))(= (fun_app$ (times$b (numeral$c ?v0 ))(- ?v1 ?v2 ))(- (fun_app$ (times$b (numeral$c ?v0 ))?v1 )(fun_app$ (times$b (numeral$c ?v0 ))?v2 )))):named a49 ))
(assert (! (forall ((?v0 Num$ )(?v1 Int_tree_tree$ )(?v2 Int_tree_tree$ ))(= (times$d (numeral$d ?v0 )(minus$c ?v1 ?v2 ))(minus$c (times$d (numeral$d ?v0 )?v1 )(times$d (numeral$d ?v0 )?v2 )))):named a50 ))
(assert (! (forall ((?v0 Num$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(= (times$ (numeral$ ?v0 )(minus$ ?v1 ?v2 ))(minus$ (times$ (numeral$ ?v0 )?v1 )(times$ (numeral$ ?v0 )?v2 )))):named a51 ))
(assert (! (forall ((?v0 Int_tree_tree_tree$ )(?v1 Int_tree_tree_tree$ )(?v2 Num$ ))(= (times$f (plus$e ?v0 ?v1 )(numeral$b ?v2 ))(plus$e (times$f ?v0 (numeral$b ?v2 ))(times$f ?v1 (numeral$b ?v2 ))))):named a52 ))
(assert (! (forall ((?v0 Nat_tree_tree_tree$ )(?v1 Nat_tree_tree_tree$ )(?v2 Num$ ))(= (times$g (plus$f ?v0 ?v1 )(numeral$e ?v2 ))(plus$f (times$g ?v0 (numeral$e ?v2 ))(times$g ?v1 (numeral$e ?v2 ))))):named a53 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Num$ ))(= (fun_app$b (times$c (fun_app$b (plus$b ?v0 )?v1 ))(numeral$f ?v2 ))(fun_app$b (plus$b (fun_app$b (times$c ?v0 )(numeral$f ?v2 )))(fun_app$b (times$c ?v1 )(numeral$f ?v2 ))))):named a54 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Num$ ))(= (fun_app$ (times$b (+ ?v0 ?v1 ))(numeral$c ?v2 ))(+ (fun_app$ (times$b ?v0 )(numeral$c ?v2 ))(fun_app$ (times$b ?v1 )(numeral$c ?v2 ))))):named a55 ))
(assert (! (forall ((?v0 Nat_tree_tree$ )(?v1 Nat_tree_tree$ )(?v2 Num$ ))(= (times$e (plus$d ?v0 ?v1 )(numeral$g ?v2 ))(plus$d (times$e ?v0 (numeral$g ?v2 ))(times$e ?v1 (numeral$g ?v2 ))))):named a56 ))
(assert (! (forall ((?v0 Int_tree_tree$ )(?v1 Int_tree_tree$ )(?v2 Num$ ))(= (times$d (plus$c ?v0 ?v1 )(numeral$d ?v2 ))(plus$c (times$d ?v0 (numeral$d ?v2 ))(times$d ?v1 (numeral$d ?v2 ))))):named a57 ))
(assert (! (forall ((?v0 Int_tree$ )(?v1 Int_tree$ )(?v2 Num$ ))(= (times$ (plus$ ?v0 ?v1 )(numeral$ ?v2 ))(plus$ (times$ ?v0 (numeral$ ?v2 ))(times$ ?v1 (numeral$ ?v2 ))))):named a58 ))
(assert (! (forall ((?v0 Nat_tree$ )(?v1 Nat_tree$ )(?v2 Num$ ))(= (times$a (plus$a ?v0 ?v1 )(numeral$a ?v2 ))(plus$a (times$a ?v0 (numeral$a ?v2 ))(times$a ?v1 (numeral$a ?v2 ))))):named a59 ))
(assert (! (forall ((?v0 Num$ )(?v1 Int_tree_tree_tree$ )(?v2 Int_tree_tree_tree$ ))(= (times$f (numeral$b ?v0 )(plus$e ?v1 ?v2 ))(plus$e (times$f (numeral$b ?v0 )?v1 )(times$f (numeral$b ?v0 )?v2 )))):named a60 ))
(assert (! (forall ((?v0 Num$ )(?v1 Nat_tree_tree_tree$ )(?v2 Nat_tree_tree_tree$ ))(= (times$g (numeral$e ?v0 )(plus$f ?v1 ?v2 ))(plus$f (times$g (numeral$e ?v0 )?v1 )(times$g (numeral$e ?v0 )?v2 )))):named a61 ))
(assert (! (forall ((?v0 Num$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$b (times$c (numeral$f ?v0 ))(fun_app$b (plus$b ?v1 )?v2 ))(fun_app$b (plus$b (fun_app$b (times$c (numeral$f ?v0 ))?v1 ))(fun_app$b (times$c (numeral$f ?v0 ))?v2 )))):named a62 ))
(assert (! (forall ((?v0 Num$ )(?v1 Int )(?v2 Int ))(= (fun_app$ (times$b (numeral$c ?v0 ))(+ ?v1 ?v2 ))(+ (fun_app$ (times$b (numeral$c ?v0 ))?v1 )(fun_app$ (times$b (numeral$c ?v0 ))?v2 )))):named a63 ))
(assert (! (forall ((?v0 Num$ )(?v1 Nat_tree_tree$ )(?v2 Nat_tree_tree$ ))(= (times$e (numeral$g ?v0 )(plus$d ?v1 ?v2 ))(plus$d (times$e (numeral$g ?v0 )?v1 )(times$e (numeral$g ?v0 )?v2 )))):named a64 ))
(assert (! (forall ((?v0 Num$ )(?v1 Int_tree_tree$ )(?v2 Int_tree_tree$ ))(= (times$d (numeral$d ?v0 )(plus$c ?v1 ?v2 ))(plus$c (times$d (numeral$d ?v0 )?v1 )(times$d (numeral$d ?v0 )?v2 )))):named a65 ))
(assert (! (forall ((?v0 Num$ )(?v1 Int_tree$ )(?v2 Int_tree$ ))(= (times$ (numeral$ ?v0 )(plus$ ?v1 ?v2 ))(plus$ (times$ (numeral$ ?v0 )?v1 )(times$ (numeral$ ?v0 )?v2 )))):named a66 ))
(assert (! (forall ((?v0 Num$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(= (times$a (numeral$a ?v0 )(plus$a ?v1 ?v2 ))(plus$a (times$a (numeral$a ?v0 )?v1 )(times$a (numeral$a ?v0 )?v2 )))):named a67 ))
(assert (! (= (minus$ (plus$ (minus$ (plus$ num$ den$ )(tree_chop$ den$ ))(tree_chop$ den$ ))(times$ (numeral$ (bit0$ one$ ))fIXME_x$ ))(minus$ (plus$ num$ den$ )(times$ (numeral$ (bit0$ one$ ))(mod$ num$ den$ )))):named a68 ))
(assert (! (forall ((?v0 Num$ ))(= (= (bit0$ ?v0 )one$ )false )):named a69 ))
(check-sat )
;(get-unsat-core )
