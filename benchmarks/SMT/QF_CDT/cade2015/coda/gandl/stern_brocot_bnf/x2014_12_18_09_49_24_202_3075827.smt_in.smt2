;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Int_int_fun$ 0 )
(declare-sort Int_nat_fun$ 0 )
(declare-sort Nat_int_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Int_int_fun_int_fun$ 0 )
(declare-sort Int_int_fun_nat_fun$ 0 )
(declare-sort Int_int_int_fun_fun$ 0 )
(declare-sort Int_int_nat_fun_fun$ 0 )
(declare-sort Int_nat_fun_int_fun$ 0 )
(declare-sort Int_nat_fun_nat_fun$ 0 )
(declare-sort Int_nat_int_fun_fun$ 0 )
(declare-sort Int_nat_nat_fun_fun$ 0 )
(declare-sort Nat_int_fun_int_fun$ 0 )
(declare-sort Nat_int_fun_nat_fun$ 0 )
(declare-sort Nat_int_int_fun_fun$ 0 )
(declare-sort Nat_int_nat_fun_fun$ 0 )
(declare-sort Nat_nat_fun_nat_fun$ 0 )
(declare-sort Nat_nat_int_fun_fun$ 0 )
(declare-sort Nat_nat_nat_fun_fun$ 0 )
(declare-sort Int_int_fun_int_int_fun_fun$ 0 )
(declare-sort Int_int_fun_int_nat_fun_fun$ 0 )
(declare-sort Int_int_fun_nat_int_fun_fun$ 0 )
(declare-sort Int_int_fun_nat_nat_fun_fun$ 0 )
(declare-codatatypes ()((Nat_tree$ (node$ (root$ Nat$ )(left$ Nat_tree$ )(right$ Nat_tree$ )))(Int_tree$ (node$a (root$a Int )(left$a Int_tree$ )(right$a Int_tree$ )))(Int_int_fun_tree$ (node$b (select$ Int_int_fun$ )(selecta$ Int_int_fun_tree$ )(selectb$ Int_int_fun_tree$ )))(Nat_int_fun_tree$ (node$c (selectc$ Nat_int_fun$ )(selectd$ Nat_int_fun_tree$ )(selecte$ Nat_int_fun_tree$ )))(Int_nat_fun_tree$ (node$d (selectf$ Int_nat_fun$ )(selectg$ Int_nat_fun_tree$ )(selecth$ Int_nat_fun_tree$ )))(Nat_nat_fun_tree$ (node$e (selecti$ Nat_nat_fun$ )(selectj$ Nat_nat_fun_tree$ )(selectk$ Nat_nat_fun_tree$ )))))
(declare-sort Dir$ 0)
(declare-sort Dir_list$ 0)
(declare-fun l$ ()Dir$)
(declare-fun r$ ()Dir$)
(declare-fun nil$ ()Dir_list$)
(declare-fun hd$ (Dir_list$)Dir$)
(declare-fun tl$ (Dir_list$)Dir_list$)
(declare-fun cons$ (Dir$ Dir_list$ )Dir_list$)
(declare-codatatypes ()((Int_int_fun_int_fun_tree$ (node$f (selectl$ Int_int_fun_int_fun$ )(selectm$ Int_int_fun_int_fun_tree$ )(selectn$ Int_int_fun_int_fun_tree$ )))(Int_int_fun_nat_nat_fun_fun_tree$ (node$g (selecto$ Int_int_fun_nat_nat_fun_fun$ )(selectp$ Int_int_fun_nat_nat_fun_fun_tree$ )(selectq$ Int_int_fun_nat_nat_fun_fun_tree$ )))(Int_int_fun_nat_int_fun_fun_tree$ (node$h (selectr$ Int_int_fun_nat_int_fun_fun$ )(selects$ Int_int_fun_nat_int_fun_fun_tree$ )(selectt$ Int_int_fun_nat_int_fun_fun_tree$ )))(Int_int_fun_int_nat_fun_fun_tree$ (node$i (selectu$ Int_int_fun_int_nat_fun_fun$ )(selectv$ Int_int_fun_int_nat_fun_fun_tree$ )(selectw$ Int_int_fun_int_nat_fun_fun_tree$ )))(Int_int_fun_nat_fun_tree$ (node$j (selectx$ Int_int_fun_nat_fun$ )(selecty$ Int_int_fun_nat_fun_tree$ )(selectz$ Int_int_fun_nat_fun_tree$ )))(Nat_int_fun_nat_fun_tree$ (node$k (selecua$ Nat_int_fun_nat_fun$ )(selecub$ Nat_int_fun_nat_fun_tree$ )(selecuc$ Nat_int_fun_nat_fun_tree$ )))(Int_nat_fun_nat_fun_tree$ (node$l (selecud$ Int_nat_fun_nat_fun$ )(selecue$ Int_nat_fun_nat_fun_tree$ )(selecuf$ Int_nat_fun_nat_fun_tree$ )))(Nat_nat_fun_nat_fun_tree$ (node$m (selecug$ Nat_nat_fun_nat_fun$ )(selecuh$ Nat_nat_fun_nat_fun_tree$ )(selecui$ Nat_nat_fun_nat_fun_tree$ )))(Nat_int_fun_int_fun_tree$ (node$n (selecuj$ Nat_int_fun_int_fun$ )(selecuk$ Nat_int_fun_int_fun_tree$ )(selecul$ Nat_int_fun_int_fun_tree$ )))(Int_nat_nat_fun_fun_tree$ (node$o (selecum$ Int_nat_nat_fun_fun$ )(selecun$ Int_nat_nat_fun_fun_tree$ )(selecuo$ Int_nat_nat_fun_fun_tree$ )))(Int_int_nat_fun_fun_tree$ (node$p (selecup$ Int_int_nat_fun_fun$ )(selecuq$ Int_int_nat_fun_fun_tree$ )(selecur$ Int_int_nat_fun_fun_tree$ )))(Int_nat_int_fun_fun_tree$ (node$q (selecus$ Int_nat_int_fun_fun$ )(selecut$ Int_nat_int_fun_fun_tree$ )(selecuu$ Int_nat_int_fun_fun_tree$ )))(Int_int_int_fun_fun_tree$ (node$r (selecuv$ Int_int_int_fun_fun$ )(selecuw$ Int_int_int_fun_fun_tree$ )(selecux$ Int_int_int_fun_fun_tree$ )))(Nat_nat_nat_fun_fun_tree$ (node$s (selecuy$ Nat_nat_nat_fun_fun$ )(selecuz$ Nat_nat_nat_fun_fun_tree$ )(selecva$ Nat_nat_nat_fun_fun_tree$ )))(Nat_int_nat_fun_fun_tree$ (node$t (selecvb$ Nat_int_nat_fun_fun$ )(selecvc$ Nat_int_nat_fun_fun_tree$ )(selecvd$ Nat_int_nat_fun_fun_tree$ )))))
(declare-fun den$ ()Nat_tree$ )
(declare-fun nat$ ()Int_nat_fun$ )
(declare-fun num$ ()Int_tree$ )
(declare-fun den$a ()Int_tree$ )
(declare-fun num$a ()Nat_tree$ )
(declare-fun root$b (Int_int_fun_tree$ )Int_int_fun$ )
(declare-fun root$c (Nat_nat_fun_tree$ )Nat_nat_fun$ )
(declare-fun root$d (Nat_int_fun_tree$ )Nat_int_fun$ )
(declare-fun root$e (Int_nat_fun_tree$ )Int_nat_fun$ )
(declare-fun right$b (Int_int_fun_tree$ )Int_int_fun_tree$ )
(declare-fun right$c (Nat_nat_fun_tree$ )Nat_nat_fun_tree$ )
(declare-fun right$d (Nat_int_fun_tree$ )Nat_int_fun_tree$ )
(declare-fun right$e (Int_nat_fun_tree$ )Int_nat_fun_tree$ )
(declare-fun fun_app$ (Int_nat_fun$ Int )Nat$ )
(declare-fun tree_ap$ (Nat_nat_fun_tree$ Nat_tree$ )Nat_tree$ )
(declare-fun fun_app$a (Int_int_fun$ Int )Int )
(declare-fun fun_app$b (Nat_int_fun$ Nat$ )Int )
(declare-fun fun_app$c (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$d (Int_nat_nat_fun_fun$ Int )Nat_nat_fun$ )
(declare-fun fun_app$e (Int_int_nat_fun_fun$ Int )Int_nat_fun$ )
(declare-fun fun_app$f (Int_nat_int_fun_fun$ Int )Nat_int_fun$ )
(declare-fun fun_app$g (Int_int_int_fun_fun$ Int )Int_int_fun$ )
(declare-fun fun_app$h (Nat_nat_nat_fun_fun$ Nat$ )Nat_nat_fun$ )
(declare-fun fun_app$i (Nat_int_nat_fun_fun$ Nat$ )Int_nat_fun$ )
(declare-fun fun_app$j (Int_int_fun_int_fun$ Int_int_fun$ )Int )
(declare-fun fun_app$k (Int_int_fun_nat_nat_fun_fun$ Int_int_fun$ )Nat_nat_fun$ )
(declare-fun fun_app$l (Int_int_fun_nat_int_fun_fun$ Int_int_fun$ )Nat_int_fun$ )
(declare-fun fun_app$m (Int_int_fun_int_nat_fun_fun$ Int_int_fun$ )Int_nat_fun$ )
(declare-fun fun_app$n (Int_int_fun_int_int_fun_fun$ Int_int_fun$ )Int_int_fun$ )
(declare-fun map_tree$ (Int_nat_fun$ Int_tree$ )Nat_tree$ )
(declare-fun tree_ap$a (Int_nat_fun_tree$ Int_tree$ )Nat_tree$ )
(declare-fun tree_ap$b (Nat_int_fun_tree$ Nat_tree$ )Int_tree$ )
(declare-fun tree_ap$c (Int_int_fun_tree$ Int_tree$ )Int_tree$ )
(declare-fun tree_ap$d (Int_int_fun_nat_fun_tree$ Int_int_fun_tree$ )Nat_tree$ )
(declare-fun tree_ap$e (Nat_int_fun_nat_fun_tree$ Nat_int_fun_tree$ )Nat_tree$ )
(declare-fun tree_ap$f (Int_nat_fun_nat_fun_tree$ Int_nat_fun_tree$ )Nat_tree$ )
(declare-fun tree_ap$g (Nat_nat_fun_nat_fun_tree$ Nat_nat_fun_tree$ )Nat_tree$ )
(declare-fun tree_ap$h (Int_int_fun_int_fun_tree$ Int_int_fun_tree$ )Int_tree$ )
(declare-fun tree_ap$i (Nat_int_fun_int_fun_tree$ Nat_int_fun_tree$ )Int_tree$ )
(declare-fun tree_ap$j (Int_nat_nat_fun_fun_tree$ Int_tree$ )Nat_nat_fun_tree$ )
(declare-fun tree_ap$k (Int_int_nat_fun_fun_tree$ Int_tree$ )Int_nat_fun_tree$ )
(declare-fun tree_ap$l (Int_nat_int_fun_fun_tree$ Int_tree$ )Nat_int_fun_tree$ )
(declare-fun tree_ap$m (Int_int_int_fun_fun_tree$ Int_tree$ )Int_int_fun_tree$ )
(declare-fun tree_ap$n (Nat_nat_nat_fun_fun_tree$ Nat_tree$ )Nat_nat_fun_tree$ )
(declare-fun tree_ap$o (Nat_int_nat_fun_fun_tree$ Nat_tree$ )Int_nat_fun_tree$ )
(declare-fun map_tree$a (Nat_nat_fun$ Nat_tree$ )Nat_tree$ )
(declare-fun map_tree$b (Nat_int_fun$ Nat_tree$ )Int_tree$ )
(declare-fun map_tree$c (Int_int_fun$ Int_tree$ )Int_tree$ )
(declare-fun map_tree$d (Nat_int_int_fun_fun$ Nat_tree$ )Int_int_fun_tree$ )
(declare-fun map_tree$e (Nat_nat_int_fun_fun$ Nat_tree$ )Nat_int_fun_tree$ )
(declare-fun map_tree$f (Nat_int_nat_fun_fun$ Nat_tree$ )Int_nat_fun_tree$ )
(declare-fun map_tree$g (Nat_nat_nat_fun_fun$ Nat_tree$ )Nat_nat_fun_tree$ )
(declare-fun map_tree$h (Int_int_int_fun_fun$ Int_tree$ )Int_int_fun_tree$ )
(declare-fun map_tree$i (Int_nat_int_fun_fun$ Int_tree$ )Nat_int_fun_tree$ )
(declare-fun map_tree$j (Int_int_fun_nat_fun$ Int_int_fun_tree$ )Nat_tree$ )
(declare-fun map_tree$k (Nat_int_fun_nat_fun$ Nat_int_fun_tree$ )Nat_tree$ )
(declare-fun map_tree$l (Int_nat_fun_nat_fun$ Int_nat_fun_tree$ )Nat_tree$ )
(declare-fun map_tree$m (Nat_nat_fun_nat_fun$ Nat_nat_fun_tree$ )Nat_tree$ )
(declare-fun map_tree$n (Nat_int_fun_int_fun$ Nat_int_fun_tree$ )Int_tree$ )
(declare-fun map_tree$o (Int_nat_fun_int_fun$ Int_nat_fun_tree$ )Int_tree$ )
(declare-fun map_tree$p (Int_nat_nat_fun_fun$ Int_tree$ )Nat_nat_fun_tree$ )
(declare-fun map_tree$q (Int_int_nat_fun_fun$ Int_tree$ )Int_nat_fun_tree$ )
(declare-fun map_tree$r (Int_int_fun_int_fun$ Int_int_fun_tree$ )Int_tree$ )
(declare-fun map_tree$s (Int_int_fun_nat_nat_fun_fun$ Int_int_fun_tree$ )Nat_nat_fun_tree$ )
(declare-fun map_tree$t (Int_int_fun_nat_int_fun_fun$ Int_int_fun_tree$ )Nat_int_fun_tree$ )
(declare-fun map_tree$u (Int_int_fun_int_nat_fun_fun$ Int_int_fun_tree$ )Int_nat_fun_tree$ )
(declare-fun map_tree$v (Int_int_fun_int_int_fun_fun$ Int_int_fun_tree$ )Int_int_fun_tree$ )
(declare-fun tree_chop$ (Nat_tree$ )Nat_tree$ )
(declare-fun tree_pure$ (Nat$ )Nat_tree$ )
(declare-fun tree_chop$a (Int_tree$ )Int_tree$ )
(declare-fun tree_chop$b (Int_int_fun_tree$ )Int_int_fun_tree$ )
(declare-fun tree_chop$c (Nat_int_fun_tree$ )Nat_int_fun_tree$ )
(declare-fun tree_chop$d (Int_nat_fun_tree$ )Int_nat_fun_tree$ )
(declare-fun tree_chop$e (Nat_nat_fun_tree$ )Nat_nat_fun_tree$ )
(declare-fun tree_chop$f (Int_int_fun_int_fun_tree$ )Int_int_fun_int_fun_tree$ )
(declare-fun tree_chop$g (Int_int_fun_nat_nat_fun_fun_tree$ )Int_int_fun_nat_nat_fun_fun_tree$ )
(declare-fun tree_chop$h (Int_int_fun_nat_int_fun_fun_tree$ )Int_int_fun_nat_int_fun_fun_tree$ )
(declare-fun tree_chop$i (Int_int_fun_int_nat_fun_fun_tree$ )Int_int_fun_int_nat_fun_fun_tree$ )
(declare-fun tree_chop$j (Int_int_fun_nat_fun_tree$ )Int_int_fun_nat_fun_tree$ )
(declare-fun tree_chop$k (Nat_int_fun_nat_fun_tree$ )Nat_int_fun_nat_fun_tree$ )
(declare-fun tree_chop$l (Int_nat_fun_nat_fun_tree$ )Int_nat_fun_nat_fun_tree$ )
(declare-fun tree_chop$m (Nat_nat_fun_nat_fun_tree$ )Nat_nat_fun_nat_fun_tree$ )
(declare-fun tree_chop$n (Nat_int_fun_int_fun_tree$ )Nat_int_fun_int_fun_tree$ )
(declare-fun tree_pure$a (Int )Int_tree$ )
(declare-fun tree_pure$b (Int_int_fun$ )Int_int_fun_tree$ )
(declare-fun tree_pure$c (Nat_int_fun$ )Nat_int_fun_tree$ )
(declare-fun tree_pure$d (Int_nat_fun$ )Int_nat_fun_tree$ )
(declare-fun tree_pure$e (Nat_nat_fun$ )Nat_nat_fun_tree$ )
(declare-fun tree_pure$f (Int_int_fun_int_fun$ )Int_int_fun_int_fun_tree$ )
(declare-fun tree_pure$g (Int_int_fun_nat_nat_fun_fun$ )Int_int_fun_nat_nat_fun_fun_tree$ )
(declare-fun tree_pure$h (Int_int_fun_nat_int_fun_fun$ )Int_int_fun_nat_int_fun_fun_tree$ )
(declare-fun tree_pure$i (Int_int_fun_int_nat_fun_fun$ )Int_int_fun_int_nat_fun_fun_tree$ )
(declare-fun tree_pure$j (Int_nat_nat_fun_fun$ )Int_nat_nat_fun_fun_tree$ )
(declare-fun tree_pure$k (Int_int_nat_fun_fun$ )Int_int_nat_fun_fun_tree$ )
(declare-fun tree_pure$l (Int_nat_int_fun_fun$ )Int_nat_int_fun_fun_tree$ )
(declare-fun tree_pure$m (Int_int_int_fun_fun$ )Int_int_int_fun_fun_tree$ )
(declare-fun tree_pure$n (Nat_nat_nat_fun_fun$ )Nat_nat_nat_fun_fun_tree$ )
(declare-fun tree_pure$o (Nat_int_nat_fun_fun$ )Nat_int_nat_fun_fun_tree$ )
(declare-fun traverse_tree$ (Dir_list$ Nat_tree$ )Nat_tree$ )
(declare-fun traverse_tree$a (Dir_list$ Int_tree$ )Int_tree$ )
(declare-fun traverse_tree$b (Dir_list$ Int_int_fun_tree$ )Int_int_fun_tree$ )
(declare-fun traverse_tree$c (Dir_list$ Nat_int_fun_tree$ )Nat_int_fun_tree$ )
(declare-fun traverse_tree$d (Dir_list$ Int_nat_fun_tree$ )Int_nat_fun_tree$ )
(declare-fun traverse_tree$e (Dir_list$ Nat_nat_fun_tree$ )Nat_nat_fun_tree$ )
(declare-fun traverse_tree$f (Dir_list$ Int_int_fun_nat_fun_tree$ )Int_int_fun_nat_fun_tree$ )
(declare-fun traverse_tree$g (Dir_list$ Nat_int_fun_nat_fun_tree$ )Nat_int_fun_nat_fun_tree$ )
(declare-fun traverse_tree$h (Dir_list$ Int_nat_fun_nat_fun_tree$ )Int_nat_fun_nat_fun_tree$ )
(declare-fun traverse_tree$i (Dir_list$ Nat_nat_fun_nat_fun_tree$ )Nat_nat_fun_nat_fun_tree$ )
(declare-fun traverse_tree$j (Dir_list$ Int_int_fun_int_fun_tree$ )Int_int_fun_int_fun_tree$ )
(declare-fun traverse_tree$k (Dir_list$ Nat_int_fun_int_fun_tree$ )Nat_int_fun_int_fun_tree$ )
(assert (! (not (= (tree_chop$ den$ )(map_tree$ nat$ (tree_chop$a den$a )))):named a0 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (map_tree$a ?v0 (tree_chop$ ?v1 ))(tree_chop$ (map_tree$a ?v0 ?v1 )))):named a1 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (map_tree$b ?v0 (tree_chop$ ?v1 ))(tree_chop$a (map_tree$b ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (map_tree$c ?v0 (tree_chop$a ?v1 ))(tree_chop$a (map_tree$c ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (map_tree$ ?v0 (tree_chop$a ?v1 ))(tree_chop$ (map_tree$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 Nat_int_int_fun_fun$ )(?v1 Nat_tree$ ))(= (map_tree$d ?v0 (tree_chop$ ?v1 ))(tree_chop$b (map_tree$d ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 Nat_nat_int_fun_fun$ )(?v1 Nat_tree$ ))(= (map_tree$e ?v0 (tree_chop$ ?v1 ))(tree_chop$c (map_tree$e ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Nat_int_nat_fun_fun$ )(?v1 Nat_tree$ ))(= (map_tree$f ?v0 (tree_chop$ ?v1 ))(tree_chop$d (map_tree$f ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat_tree$ ))(= (map_tree$g ?v0 (tree_chop$ ?v1 ))(tree_chop$e (map_tree$g ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Int_int_int_fun_fun$ )(?v1 Int_tree$ ))(= (map_tree$h ?v0 (tree_chop$a ?v1 ))(tree_chop$b (map_tree$h ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Int_nat_int_fun_fun$ )(?v1 Int_tree$ ))(= (map_tree$i ?v0 (tree_chop$a ?v1 ))(tree_chop$c (map_tree$i ?v0 ?v1 )))):named a10 ))
(assert (! (= (map_tree$ nat$ den$a )den$ ):named a11 ))
(assert (! (= den$a (tree_chop$a num$ )):named a12 ))
(assert (! (= den$ (tree_chop$ num$a )):named a13 ))
(assert (! (forall ((?v0 Bool )(?v1 Int )(?v2 Int ))(= (ite ?v0 (fun_app$ nat$ ?v1 )(fun_app$ nat$ ?v2 ))(fun_app$ nat$ (ite ?v0 ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_nat_fun$ )(?v2 Int_tree$ ))(= (traverse_tree$ ?v0 (map_tree$ ?v1 ?v2 ))(map_tree$ ?v1 (traverse_tree$a ?v0 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_int_fun$ )(?v2 Int_tree$ ))(= (traverse_tree$a ?v0 (map_tree$c ?v1 ?v2 ))(map_tree$c ?v1 (traverse_tree$a ?v0 ?v2 )))):named a16 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_int_fun$ )(?v2 Nat_tree$ ))(= (traverse_tree$a ?v0 (map_tree$b ?v1 ?v2 ))(map_tree$b ?v1 (traverse_tree$ ?v0 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_nat_fun$ )(?v2 Nat_tree$ ))(= (traverse_tree$ ?v0 (map_tree$a ?v1 ?v2 ))(map_tree$a ?v1 (traverse_tree$ ?v0 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_int_fun_nat_fun$ )(?v2 Int_int_fun_tree$ ))(= (traverse_tree$ ?v0 (map_tree$j ?v1 ?v2 ))(map_tree$j ?v1 (traverse_tree$b ?v0 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_int_fun_nat_fun$ )(?v2 Nat_int_fun_tree$ ))(= (traverse_tree$ ?v0 (map_tree$k ?v1 ?v2 ))(map_tree$k ?v1 (traverse_tree$c ?v0 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_nat_fun_nat_fun$ )(?v2 Int_nat_fun_tree$ ))(= (traverse_tree$ ?v0 (map_tree$l ?v1 ?v2 ))(map_tree$l ?v1 (traverse_tree$d ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_nat_fun_nat_fun$ )(?v2 Nat_nat_fun_tree$ ))(= (traverse_tree$ ?v0 (map_tree$m ?v1 ?v2 ))(map_tree$m ?v1 (traverse_tree$e ?v0 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_int_fun_int_fun$ )(?v2 Nat_int_fun_tree$ ))(= (traverse_tree$a ?v0 (map_tree$n ?v1 ?v2 ))(map_tree$n ?v1 (traverse_tree$c ?v0 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_nat_fun_int_fun$ )(?v2 Int_nat_fun_tree$ ))(= (traverse_tree$a ?v0 (map_tree$o ?v1 ?v2 ))(map_tree$o ?v1 (traverse_tree$d ?v0 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat$ ))(= (tree_chop$ (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a25 ))
(assert (! (forall ((?v0 Int ))(= (tree_chop$a (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a26 ))
(assert (! (forall ((?v0 Int_int_fun$ ))(= (tree_chop$b (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a27 ))
(assert (! (forall ((?v0 Nat_int_fun$ ))(= (tree_chop$c (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a28 ))
(assert (! (forall ((?v0 Int_nat_fun$ ))(= (tree_chop$d (tree_pure$d ?v0 ))(tree_pure$d ?v0 ))):named a29 ))
(assert (! (forall ((?v0 Nat_nat_fun$ ))(= (tree_chop$e (tree_pure$e ?v0 ))(tree_pure$e ?v0 ))):named a30 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun$ ))(= (tree_chop$f (tree_pure$f ?v0 ))(tree_pure$f ?v0 ))):named a31 ))
(assert (! (forall ((?v0 Int_int_fun_nat_nat_fun_fun$ ))(= (tree_chop$g (tree_pure$g ?v0 ))(tree_pure$g ?v0 ))):named a32 ))
(assert (! (forall ((?v0 Int_int_fun_nat_int_fun_fun$ ))(= (tree_chop$h (tree_pure$h ?v0 ))(tree_pure$h ?v0 ))):named a33 ))
(assert (! (forall ((?v0 Int_int_fun_int_nat_fun_fun$ ))(= (tree_chop$i (tree_pure$i ?v0 ))(tree_pure$i ?v0 ))):named a34 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int ))(= (map_tree$ ?v0 (tree_pure$a ?v1 ))(tree_pure$ (fun_app$ ?v0 ?v1 )))):named a35 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int ))(= (map_tree$c ?v0 (tree_pure$a ?v1 ))(tree_pure$a (fun_app$a ?v0 ?v1 )))):named a36 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat$ ))(= (map_tree$b ?v0 (tree_pure$ ?v1 ))(tree_pure$a (fun_app$b ?v0 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (map_tree$a ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$c ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 Int_nat_nat_fun_fun$ )(?v1 Int ))(= (map_tree$p ?v0 (tree_pure$a ?v1 ))(tree_pure$e (fun_app$d ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 Int_int_nat_fun_fun$ )(?v1 Int ))(= (map_tree$q ?v0 (tree_pure$a ?v1 ))(tree_pure$d (fun_app$e ?v0 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 Int_nat_int_fun_fun$ )(?v1 Int ))(= (map_tree$i ?v0 (tree_pure$a ?v1 ))(tree_pure$c (fun_app$f ?v0 ?v1 )))):named a41 ))
(assert (! (forall ((?v0 Int_int_int_fun_fun$ )(?v1 Int ))(= (map_tree$h ?v0 (tree_pure$a ?v1 ))(tree_pure$b (fun_app$g ?v0 ?v1 )))):named a42 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat$ ))(= (map_tree$g ?v0 (tree_pure$ ?v1 ))(tree_pure$e (fun_app$h ?v0 ?v1 )))):named a43 ))
(assert (! (forall ((?v0 Nat_int_nat_fun_fun$ )(?v1 Nat$ ))(= (map_tree$f ?v0 (tree_pure$ ?v1 ))(tree_pure$d (fun_app$i ?v0 ?v1 )))):named a44 ))
(assert (! (forall ((?v0 Nat_nat_fun_tree$ )(?v1 Nat_tree$ ))(= (tree_chop$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (tree_chop$e ?v0 )(tree_chop$ ?v1 )))):named a45 ))
(assert (! (forall ((?v0 Int_nat_fun_tree$ )(?v1 Int_tree$ ))(= (tree_chop$ (tree_ap$a ?v0 ?v1 ))(tree_ap$a (tree_chop$d ?v0 )(tree_chop$a ?v1 )))):named a46 ))
(assert (! (forall ((?v0 Nat_int_fun_tree$ )(?v1 Nat_tree$ ))(= (tree_chop$a (tree_ap$b ?v0 ?v1 ))(tree_ap$b (tree_chop$c ?v0 )(tree_chop$ ?v1 )))):named a47 ))
(assert (! (forall ((?v0 Int_int_fun_tree$ )(?v1 Int_tree$ ))(= (tree_chop$a (tree_ap$c ?v0 ?v1 ))(tree_ap$c (tree_chop$b ?v0 )(tree_chop$a ?v1 )))):named a48 ))
(assert (! (forall ((?v0 Int_int_fun_nat_fun_tree$ )(?v1 Int_int_fun_tree$ ))(= (tree_chop$ (tree_ap$d ?v0 ?v1 ))(tree_ap$d (tree_chop$j ?v0 )(tree_chop$b ?v1 )))):named a49 ))
(assert (! (forall ((?v0 Nat_int_fun_nat_fun_tree$ )(?v1 Nat_int_fun_tree$ ))(= (tree_chop$ (tree_ap$e ?v0 ?v1 ))(tree_ap$e (tree_chop$k ?v0 )(tree_chop$c ?v1 )))):named a50 ))
(assert (! (forall ((?v0 Int_nat_fun_nat_fun_tree$ )(?v1 Int_nat_fun_tree$ ))(= (tree_chop$ (tree_ap$f ?v0 ?v1 ))(tree_ap$f (tree_chop$l ?v0 )(tree_chop$d ?v1 )))):named a51 ))
(assert (! (forall ((?v0 Nat_nat_fun_nat_fun_tree$ )(?v1 Nat_nat_fun_tree$ ))(= (tree_chop$ (tree_ap$g ?v0 ?v1 ))(tree_ap$g (tree_chop$m ?v0 )(tree_chop$e ?v1 )))):named a52 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun_tree$ )(?v1 Int_int_fun_tree$ ))(= (tree_chop$a (tree_ap$h ?v0 ?v1 ))(tree_ap$h (tree_chop$f ?v0 )(tree_chop$b ?v1 )))):named a53 ))
(assert (! (forall ((?v0 Nat_int_fun_int_fun_tree$ )(?v1 Nat_int_fun_tree$ ))(= (tree_chop$a (tree_ap$i ?v0 ?v1 ))(tree_ap$i (tree_chop$n ?v0 )(tree_chop$c ?v1 )))):named a54 ))
(assert (! (= (right$ den$ )den$ ):named a55 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$a (map_tree$r ?v0 ?v1 ))(fun_app$j ?v0 (root$b ?v1 )))):named a56 ))
(assert (! (forall ((?v0 Int_int_fun_nat_nat_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$c (map_tree$s ?v0 ?v1 ))(fun_app$k ?v0 (root$b ?v1 )))):named a57 ))
(assert (! (forall ((?v0 Int_int_fun_nat_int_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$d (map_tree$t ?v0 ?v1 ))(fun_app$l ?v0 (root$b ?v1 )))):named a58 ))
(assert (! (forall ((?v0 Int_int_fun_int_nat_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$e (map_tree$u ?v0 ?v1 ))(fun_app$m ?v0 (root$b ?v1 )))):named a59 ))
(assert (! (forall ((?v0 Int_int_fun_int_int_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$b (map_tree$v ?v0 ?v1 ))(fun_app$n ?v0 (root$b ?v1 )))):named a60 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (root$a (map_tree$c ?v0 ?v1 ))(fun_app$a ?v0 (root$a ?v1 )))):named a61 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (root$a (map_tree$b ?v0 ?v1 ))(fun_app$b ?v0 (root$ ?v1 )))):named a62 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (root$ (map_tree$a ?v0 ?v1 ))(fun_app$c ?v0 (root$ ?v1 )))):named a63 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$a ?v1 )))):named a64 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$a (map_tree$r ?v0 ?v1 ))(fun_app$j ?v0 (root$b ?v1 )))):named a65 ))
(assert (! (forall ((?v0 Int_int_fun_nat_nat_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$c (map_tree$s ?v0 ?v1 ))(fun_app$k ?v0 (root$b ?v1 )))):named a66 ))
(assert (! (forall ((?v0 Int_int_fun_nat_int_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$d (map_tree$t ?v0 ?v1 ))(fun_app$l ?v0 (root$b ?v1 )))):named a67 ))
(assert (! (forall ((?v0 Int_int_fun_int_nat_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$e (map_tree$u ?v0 ?v1 ))(fun_app$m ?v0 (root$b ?v1 )))):named a68 ))
(assert (! (forall ((?v0 Int_int_fun_int_int_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (root$b (map_tree$v ?v0 ?v1 ))(fun_app$n ?v0 (root$b ?v1 )))):named a69 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (root$a (map_tree$c ?v0 ?v1 ))(fun_app$a ?v0 (root$a ?v1 )))):named a70 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (root$a (map_tree$b ?v0 ?v1 ))(fun_app$b ?v0 (root$ ?v1 )))):named a71 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (root$ (map_tree$a ?v0 ?v1 ))(fun_app$c ?v0 (root$ ?v1 )))):named a72 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$a ?v1 )))):named a73 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun$ )(?v1 Int_int_fun_tree$ ))(= (right$a (map_tree$r ?v0 ?v1 ))(map_tree$r ?v0 (right$b ?v1 )))):named a74 ))
(assert (! (forall ((?v0 Int_int_fun_nat_nat_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (right$c (map_tree$s ?v0 ?v1 ))(map_tree$s ?v0 (right$b ?v1 )))):named a75 ))
(assert (! (forall ((?v0 Int_int_fun_nat_int_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (right$d (map_tree$t ?v0 ?v1 ))(map_tree$t ?v0 (right$b ?v1 )))):named a76 ))
(assert (! (forall ((?v0 Int_int_fun_int_nat_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (right$e (map_tree$u ?v0 ?v1 ))(map_tree$u ?v0 (right$b ?v1 )))):named a77 ))
(assert (! (forall ((?v0 Int_int_fun_int_int_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (right$b (map_tree$v ?v0 ?v1 ))(map_tree$v ?v0 (right$b ?v1 )))):named a78 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (right$a (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (right$a ?v1 )))):named a79 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (right$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (right$ ?v1 )))):named a80 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (right$ (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (right$ ?v1 )))):named a81 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (right$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$a ?v1 )))):named a82 ))
(assert (! (forall ((?v0 Int_int_fun_int_fun$ )(?v1 Int_int_fun_tree$ ))(= (right$a (map_tree$r ?v0 ?v1 ))(map_tree$r ?v0 (right$b ?v1 )))):named a83 ))
(assert (! (forall ((?v0 Int_int_fun_nat_nat_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (right$c (map_tree$s ?v0 ?v1 ))(map_tree$s ?v0 (right$b ?v1 )))):named a84 ))
(assert (! (forall ((?v0 Int_int_fun_nat_int_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (right$d (map_tree$t ?v0 ?v1 ))(map_tree$t ?v0 (right$b ?v1 )))):named a85 ))
(assert (! (forall ((?v0 Int_int_fun_int_nat_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (right$e (map_tree$u ?v0 ?v1 ))(map_tree$u ?v0 (right$b ?v1 )))):named a86 ))
(assert (! (forall ((?v0 Int_int_fun_int_int_fun_fun$ )(?v1 Int_int_fun_tree$ ))(= (right$b (map_tree$v ?v0 ?v1 ))(map_tree$v ?v0 (right$b ?v1 )))):named a87 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (right$a (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (right$a ?v1 )))):named a88 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (right$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (right$ ?v1 )))):named a89 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (right$ (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (right$ ?v1 )))):named a90 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (right$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$a ?v1 )))):named a91 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int ))(= (tree_ap$c (tree_pure$b ?v0 )(tree_pure$a ?v1 ))(tree_pure$a (fun_app$a ?v0 ?v1 )))):named a92 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int ))(= (tree_ap$a (tree_pure$d ?v0 )(tree_pure$a ?v1 ))(tree_pure$ (fun_app$ ?v0 ?v1 )))):named a93 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat$ ))(= (tree_ap$b (tree_pure$c ?v0 )(tree_pure$ ?v1 ))(tree_pure$a (fun_app$b ?v0 ?v1 )))):named a94 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (tree_ap$ (tree_pure$e ?v0 )(tree_pure$ ?v1 ))(tree_pure$ (fun_app$c ?v0 ?v1 )))):named a95 ))
(assert (! (forall ((?v0 Int_nat_nat_fun_fun$ )(?v1 Int ))(= (tree_ap$j (tree_pure$j ?v0 )(tree_pure$a ?v1 ))(tree_pure$e (fun_app$d ?v0 ?v1 )))):named a96 ))
(assert (! (forall ((?v0 Int_int_nat_fun_fun$ )(?v1 Int ))(= (tree_ap$k (tree_pure$k ?v0 )(tree_pure$a ?v1 ))(tree_pure$d (fun_app$e ?v0 ?v1 )))):named a97 ))
(assert (! (forall ((?v0 Int_nat_int_fun_fun$ )(?v1 Int ))(= (tree_ap$l (tree_pure$l ?v0 )(tree_pure$a ?v1 ))(tree_pure$c (fun_app$f ?v0 ?v1 )))):named a98 ))
(assert (! (forall ((?v0 Int_int_int_fun_fun$ )(?v1 Int ))(= (tree_ap$m (tree_pure$m ?v0 )(tree_pure$a ?v1 ))(tree_pure$b (fun_app$g ?v0 ?v1 )))):named a99 ))
(assert (! (forall ((?v0 Nat_nat_nat_fun_fun$ )(?v1 Nat$ ))(= (tree_ap$n (tree_pure$n ?v0 )(tree_pure$ ?v1 ))(tree_pure$e (fun_app$h ?v0 ?v1 )))):named a100 ))
(assert (! (forall ((?v0 Nat_int_nat_fun_fun$ )(?v1 Nat$ ))(= (tree_ap$o (tree_pure$o ?v0 )(tree_pure$ ?v1 ))(tree_pure$d (fun_app$i ?v0 ?v1 )))):named a101 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_nat_fun_tree$ )(?v2 Nat_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$ ?v1 ?v2 ))(tree_ap$ (traverse_tree$e ?v0 ?v1 )(traverse_tree$ ?v0 ?v2 )))):named a102 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_nat_fun_tree$ )(?v2 Int_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$a ?v1 ?v2 ))(tree_ap$a (traverse_tree$d ?v0 ?v1 )(traverse_tree$a ?v0 ?v2 )))):named a103 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_int_fun_tree$ )(?v2 Nat_tree$ ))(= (traverse_tree$a ?v0 (tree_ap$b ?v1 ?v2 ))(tree_ap$b (traverse_tree$c ?v0 ?v1 )(traverse_tree$ ?v0 ?v2 )))):named a104 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_int_fun_tree$ )(?v2 Int_tree$ ))(= (traverse_tree$a ?v0 (tree_ap$c ?v1 ?v2 ))(tree_ap$c (traverse_tree$b ?v0 ?v1 )(traverse_tree$a ?v0 ?v2 )))):named a105 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_int_fun_nat_fun_tree$ )(?v2 Int_int_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$d ?v1 ?v2 ))(tree_ap$d (traverse_tree$f ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a106 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_int_fun_nat_fun_tree$ )(?v2 Nat_int_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$e ?v1 ?v2 ))(tree_ap$e (traverse_tree$g ?v0 ?v1 )(traverse_tree$c ?v0 ?v2 )))):named a107 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_nat_fun_nat_fun_tree$ )(?v2 Int_nat_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$f ?v1 ?v2 ))(tree_ap$f (traverse_tree$h ?v0 ?v1 )(traverse_tree$d ?v0 ?v2 )))):named a108 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_nat_fun_nat_fun_tree$ )(?v2 Nat_nat_fun_tree$ ))(= (traverse_tree$ ?v0 (tree_ap$g ?v1 ?v2 ))(tree_ap$g (traverse_tree$i ?v0 ?v1 )(traverse_tree$e ?v0 ?v2 )))):named a109 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_int_fun_int_fun_tree$ )(?v2 Int_int_fun_tree$ ))(= (traverse_tree$a ?v0 (tree_ap$h ?v1 ?v2 ))(tree_ap$h (traverse_tree$j ?v0 ?v1 )(traverse_tree$b ?v0 ?v2 )))):named a110 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_int_fun_int_fun_tree$ )(?v2 Nat_int_fun_tree$ ))(= (traverse_tree$a ?v0 (tree_ap$i ?v1 ?v2 ))(tree_ap$i (traverse_tree$k ?v0 ?v1 )(traverse_tree$c ?v0 ?v2 )))):named a111 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_int_fun$ ))(= (traverse_tree$b ?v0 (tree_pure$b ?v1 ))(tree_pure$b ?v1 ))):named a112 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_int_fun$ ))(= (traverse_tree$c ?v0 (tree_pure$c ?v1 ))(tree_pure$c ?v1 ))):named a113 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_nat_fun$ ))(= (traverse_tree$d ?v0 (tree_pure$d ?v1 ))(tree_pure$d ?v1 ))):named a114 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_nat_fun$ ))(= (traverse_tree$e ?v0 (tree_pure$e ?v1 ))(tree_pure$e ?v1 ))):named a115 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat$ ))(= (traverse_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$ ?v1 ))):named a116 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int ))(= (traverse_tree$a ?v0 (tree_pure$a ?v1 ))(tree_pure$a ?v1 ))):named a117 ))
(check-sat )
;(get-unsat-core )
