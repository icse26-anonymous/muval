;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_prod$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod$ 0)
(declare-sort Dir$ 0)
(declare-sort Dir_list$ 0)
(declare-fun fst$ (Nat_nat_prod$)Nat$)
(declare-fun snd$ (Nat_nat_prod$)Nat$)
(declare-fun pair$ (Nat$ Nat$ )Nat_nat_prod$)
(declare-fun fst$a (Nat_nat_prod_nat_nat_prod_prod$)Nat_nat_prod$)
(declare-fun snd$a (Nat_nat_prod_nat_nat_prod_prod$)Nat_nat_prod$)
(declare-fun pair$a (Nat_nat_prod$ Nat_nat_prod$ )Nat_nat_prod_nat_nat_prod_prod$)
(declare-fun l$ ()Dir$)
(declare-fun r$ ()Dir$)
(declare-fun nil$ ()Dir_list$)
(declare-fun hd$ (Dir_list$)Dir$)
(declare-fun tl$ (Dir_list$)Dir_list$)
(declare-fun cons$ (Dir$ Dir_list$ )Dir_list$)
(declare-codatatypes ()((Nat_nat_prod_tree$ (node$ (root$ Nat_nat_prod$ )(left$ Nat_nat_prod_tree$ )(right$ Nat_nat_prod_tree$ )))))
(declare-fun imat$ ()Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun path$ ()Dir_list$ )
(declare-fun path$a ()Dir_list$ )
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun prefix$ (Dir_list$ Dir_list$ )Bool )
(declare-fun traverse_tree$ (Dir_list$ Nat_nat_prod_tree$ )Nat_nat_prod_tree$ )
(declare-fun stern_brocot_iterate$ ()Nat_nat_prod_tree$ )
(assert (! (not false ):named a0 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ )(?v1 Nat_nat_prod_nat_nat_prod_prod$ )(?v2 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ (mulmat$ ?v0 ?v1 )?v2 )(mulmat$ ?v0 (mulmat$ ?v1 ?v2 )))):named a1 ))
(assert (! (prefix$ path$ path$a ):named a2 ))
(assert (! (= (root$ (traverse_tree$ path$ stern_brocot_iterate$ ))(root$ (traverse_tree$ path$a stern_brocot_iterate$ ))):named a3 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ ?v0 imat$ )?v0 )):named a4 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ imat$ ?v0 )?v0 )):named a5 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ )(?v2 Dir_list$ ))(=> (and (= ?v0 ?v1 )(prefix$ ?v1 ?v2 ))(prefix$ ?v0 ?v2 ))):named a6 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ ))(=> (and (prefix$ ?v0 ?v1 )(=> (not false )(prefix$ ?v1 ?v0 )))false )):named a7 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ )(?v2 Dir_list$ ))(=> (and (prefix$ ?v0 ?v1 )(= ?v1 ?v2 ))(prefix$ ?v0 ?v2 ))):named a8 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ )(?v2 Dir_list$ ))(=> (and (prefix$ ?v0 ?v1 )(prefix$ ?v2 ?v0 ))(prefix$ ?v2 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ )(?v2 Dir_list$ ))(=> (and (prefix$ ?v0 ?v1 )(prefix$ ?v1 ?v2 ))(prefix$ ?v0 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ )(?v2 Dir_list$ ))(=> (and (prefix$ ?v0 ?v1 )(prefix$ ?v1 ?v2 ))(prefix$ ?v0 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ ))(=> (and (prefix$ ?v0 ?v1 )(prefix$ ?v1 ?v0 ))false )):named a12 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ ))(=> (and (prefix$ ?v0 ?v1 )(prefix$ ?v1 ?v0 ))false )):named a13 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ ))(=> (and (prefix$ ?v0 ?v1 )(prefix$ ?v1 ?v0 ))false )):named a14 ))
(assert (! (forall ((?v0 Dir_list$ ))(not (prefix$ ?v0 ?v0 ))):named a15 ))
(assert (! (forall ((?v0 Dir_list$ ))(not (prefix$ ?v0 ?v0 ))):named a16 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Dir_list$ ))(=> (prefix$ ?v0 ?v1 )(not (prefix$ ?v1 ?v0 )))):named a17 ))
(check-sat )
;(get-unsat-core )
