;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_c_fun$ 0 )
(declare-sort C_a_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort A_c_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun$ 0 )
(declare-sort B_c_fun_c_fun$ 0 )
(declare-sort C_a_c_fun_fun$ 0 )
(declare-sort C_a_fun_a_fun$ 0 )
(declare-sort C_b_c_fun_fun$ 0 )
(declare-sort C_c_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_a_fun_fun$ 0 )
(declare-sort A_c_a_fun_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_c_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_c_fun_fun$ 0 )
(declare-sort B_c_fun_b_a_fun_fun$ 0 )
(declare-sort B_c_fun_b_c_fun_fun$ 0 )
(declare-sort C_a_fun_c_a_fun_fun$ 0 )
(declare-sort C_b_c_fun_c_fun_fun$ 0 )
(declare-sort C_b_fun_c_a_fun_fun$ 0 )
(declare-sort C_c_fun_c_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort A_c_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun_c_a_fun_fun$ 0 )
(declare-sort B_c_fun_b_c_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_a_c_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_fun$ 0 )
(declare-sort C_b_c_fun_fun_c_c_fun_fun$ 0 )
(declare-sort A_a_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_c_a_fun_c_a_fun_fun_fun$ 0 )
(declare-sort A_c_fun_b_a_fun_b_c_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_c_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_c_b_fun_c_a_fun_fun_fun$ 0 )
(declare-sort B_c_fun_b_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort B_c_fun_b_b_fun_b_c_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_c_c_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_c_fun_b_c_fun_b_c_fun_fun_fun$ 0 )
(declare-sort B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun$ 0 )
(declare-sort C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))(B_a_fun_tree$ (node$a (select$ B_a_fun$ )(selecta$ B_a_fun_tree$ )(selectb$ B_a_fun_tree$ )))(B_tree$ (node$b (root$a B$ )(left$a B_tree$ )(right$a B_tree$ )))(B_c_fun_b_a_fun_fun_tree$ (node$c (selectc$ B_c_fun_b_a_fun_fun$ )(selectd$ B_c_fun_b_a_fun_fun_tree$ )(selecte$ B_c_fun_b_a_fun_fun_tree$ )))(B_c_fun_tree$ (node$d (selectf$ B_c_fun$ )(selectg$ B_c_fun_tree$ )(selecth$ B_c_fun_tree$ )))(B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ (node$e (selecti$ B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun$ )(selectj$ B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ )(selectk$ B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ )))(B_c_a_fun_fun_tree$ (node$f (selectl$ B_c_a_fun_fun$ )(selectm$ B_c_a_fun_fun_tree$ )(selectn$ B_c_a_fun_fun_tree$ )))(C_a_fun_tree$ (node$g (selecto$ C_a_fun$ )(selectp$ C_a_fun_tree$ )(selectq$ C_a_fun_tree$ )))(C_tree$ (node$h (root$b C$ )(left$b C_tree$ )(right$b C_tree$ )))(B_b_fun_tree$ (node$i (selectr$ B_b_fun$ )(selects$ B_b_fun_tree$ )(selectt$ B_b_fun_tree$ )))(A_c_a_fun_fun_tree$ (node$j (selectu$ A_c_a_fun_fun$ )(selectv$ A_c_a_fun_fun_tree$ )(selectw$ A_c_a_fun_fun_tree$ )))(A_b_a_fun_fun_tree$ (node$k (selectx$ A_b_a_fun_fun$ )(selecty$ A_b_a_fun_fun_tree$ )(selectz$ A_b_a_fun_fun_tree$ )))(A_c_fun_tree$ (node$l (selecua$ A_c_fun$ )(selecub$ A_c_fun_tree$ )(selecuc$ A_c_fun_tree$ )))(A_a_fun_tree$ (node$m (selecud$ A_a_fun$ )(selecue$ A_a_fun_tree$ )(selecuf$ A_a_fun_tree$ )))(B_b_b_fun_fun_tree$ (node$n (selecug$ B_b_b_fun_fun$ )(selecuh$ B_b_b_fun_fun_tree$ )(selecui$ B_b_b_fun_fun_tree$ )))(C_a_fun_a_c_a_fun_fun_fun_tree$ (node$o (selecuj$ C_a_fun_a_c_a_fun_fun_fun$ )(selecuk$ C_a_fun_a_c_a_fun_fun_fun_tree$ )(selecul$ C_a_fun_a_c_a_fun_fun_fun_tree$ )))(B_a_fun_a_b_a_fun_fun_fun_tree$ (node$p (selecum$ B_a_fun_a_b_a_fun_fun_fun$ )(selecun$ B_a_fun_a_b_a_fun_fun_fun_tree$ )(selecuo$ B_a_fun_a_b_a_fun_fun_fun_tree$ )))(C_a_c_fun_fun_tree$ (node$q (selecup$ C_a_c_fun_fun$ )(selecuq$ C_a_c_fun_fun_tree$ )(selecur$ C_a_c_fun_fun_tree$ )))(A_a_a_fun_fun_tree$ (node$r (selecus$ A_a_a_fun_fun$ )(selecut$ A_a_a_fun_fun_tree$ )(selecuu$ A_a_a_fun_fun_tree$ )))(B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ (node$s (selecuv$ B_a_fun_b_c_fun_b_a_fun_fun_fun$ )(selecuw$ B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )(selecux$ B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )))(C_a_fun_b_c_a_fun_fun_fun_tree$ (node$t (selecuy$ C_a_fun_b_c_a_fun_fun_fun$ )(selecuz$ C_a_fun_b_c_a_fun_fun_fun_tree$ )(selecva$ C_a_fun_b_c_a_fun_fun_fun_tree$ )))(C_b_c_fun_fun_tree$ (node$u (selecvb$ C_b_c_fun_fun$ )(selecvc$ C_b_c_fun_fun_tree$ )(selecvd$ C_b_c_fun_fun_tree$ )))(C_a_fun_c_a_fun_fun_tree$ (node$v (selecve$ C_a_fun_c_a_fun_fun$ )(selecvf$ C_a_fun_c_a_fun_fun_tree$ )(selecvg$ C_a_fun_c_a_fun_fun_tree$ )))(A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ (node$w (selecvh$ A_a_fun_c_a_fun_c_a_fun_fun_fun$ )(selecvi$ A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ )(selecvj$ A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ )))(C_c_fun_tree$ (node$x (selecvk$ C_c_fun$ )(selecvl$ C_c_fun_tree$ )(selecvm$ C_c_fun_tree$ )))(C_c_fun_c_a_fun_fun_tree$ (node$y (selecvn$ C_c_fun_c_a_fun_fun$ )(selecvo$ C_c_fun_c_a_fun_fun_tree$ )(selecvp$ C_c_fun_c_a_fun_fun_tree$ )))(C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ (node$z (selecvq$ C_a_fun_c_c_fun_c_a_fun_fun_fun$ )(selecvr$ C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ )(selecvs$ C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ )))(C_b_fun_tree$ (node$aa (selecvt$ C_b_fun$ )(selecvu$ C_b_fun_tree$ )(selecvv$ C_b_fun_tree$ )))(C_b_fun_c_a_fun_fun_tree$ (node$ab (selecvw$ C_b_fun_c_a_fun_fun$ )(selecvx$ C_b_fun_c_a_fun_fun_tree$ )(selecvy$ C_b_fun_c_a_fun_fun_tree$ )))(B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ (node$ac (selecvz$ B_a_fun_c_b_fun_c_a_fun_fun_fun$ )(selecwa$ B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ )(selecwb$ B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ )))(B_c_fun_b_c_fun_fun_tree$ (node$ad (selecwc$ B_c_fun_b_c_fun_fun$ )(selecwd$ B_c_fun_b_c_fun_fun_tree$ )(selecwe$ B_c_fun_b_c_fun_fun_tree$ )))(C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$ (node$ae (selecwf$ C_c_fun_b_c_fun_b_c_fun_fun_fun$ )(selecwg$ C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$ )(selecwh$ C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$ )))(B_a_fun_b_c_fun_fun_tree$ (node$af (selecwi$ B_a_fun_b_c_fun_fun$ )(selecwj$ B_a_fun_b_c_fun_fun_tree$ )(selecwk$ B_a_fun_b_c_fun_fun_tree$ )))(A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$ (node$ag (selecwl$ A_c_fun_b_a_fun_b_c_fun_fun_fun$ )(selecwm$ A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$ )(selecwn$ A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$ )))(B_b_fun_b_c_fun_fun_tree$ (node$ah (selecwo$ B_b_fun_b_c_fun_fun$ )(selecwp$ B_b_fun_b_c_fun_fun_tree$ )(selecwq$ B_b_fun_b_c_fun_fun_tree$ )))(B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$ (node$ai (selecwr$ B_c_fun_b_b_fun_b_c_fun_fun_fun$ )(selecws$ B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$ )(selecwt$ B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$ )))(B_a_fun_b_a_fun_fun_tree$ (node$aj (selecwu$ B_a_fun_b_a_fun_fun$ )(selecwv$ B_a_fun_b_a_fun_fun_tree$ )(selecww$ B_a_fun_b_a_fun_fun_tree$ )))(A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ (node$ak (selecwx$ A_a_fun_b_a_fun_b_a_fun_fun_fun$ )(selecwy$ A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )(selecwz$ A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )))(B_b_fun_b_a_fun_fun_tree$ (node$al (selecxa$ B_b_fun_b_a_fun_fun$ )(selecxb$ B_b_fun_b_a_fun_fun_tree$ )(selecxc$ B_b_fun_b_a_fun_fun_tree$ )))(B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ (node$am (selecxd$ B_a_fun_b_b_fun_b_a_fun_fun_fun$ )(selecxe$ B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ )(selecxf$ B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ )))(C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ (node$an (selecxg$ C_a_fun_b_c_fun_b_a_fun_fun_fun$ )(selecxh$ C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )(selecxi$ C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )))(C_c_a_fun_fun_tree$ (node$ao (selecxj$ C_c_a_fun_fun$ )(selecxk$ C_c_a_fun_fun_tree$ )(selecxl$ C_c_a_fun_fun_tree$ )))(B_c_fun_b_c_a_fun_fun_fun_tree$ (node$ap (selecxm$ B_c_fun_b_c_a_fun_fun_fun$ )(selecxn$ B_c_fun_b_c_a_fun_fun_fun_tree$ )(selecxo$ B_c_fun_b_c_a_fun_fun_fun_tree$ )))(C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$ (node$aq (selecxp$ C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun$ )(selecxq$ C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$ )(selecxr$ C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$ )))(A_b_a_fun_fun_a_a_fun_fun_tree$ (node$ar (selecxs$ A_b_a_fun_fun_a_a_fun_fun$ )(selecxt$ A_b_a_fun_fun_a_a_fun_fun_tree$ )(selecxu$ A_b_a_fun_fun_a_a_fun_fun_tree$ )))(A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ (node$as (selecxv$ A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun$ )(selecxw$ A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ )(selecxx$ A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ )))(A_b_a_fun_a_fun_fun_tree$ (node$at (selecxy$ A_b_a_fun_a_fun_fun$ )(selecxz$ A_b_a_fun_a_fun_fun_tree$ )(selecya$ A_b_a_fun_a_fun_fun_tree$ )))(C_b_c_fun_fun_c_c_fun_fun_tree$ (node$au (selecyb$ C_b_c_fun_fun_c_c_fun_fun$ )(selecyc$ C_b_c_fun_fun_c_c_fun_fun_tree$ )(selecyd$ C_b_c_fun_fun_c_c_fun_fun_tree$ )))(C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$ (node$av (selecye$ C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun$ )(selecyf$ C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$ )(selecyg$ C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$ )))(C_b_c_fun_c_fun_fun_tree$ (node$aw (selecyh$ C_b_c_fun_c_fun_fun$ )(selecyi$ C_b_c_fun_c_fun_fun_tree$ )(selecyj$ C_b_c_fun_c_fun_fun_tree$ )))(C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ (node$ax (selecyk$ C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun$ )(selecyl$ C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ )(selecym$ C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ )))(C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ (node$ay (selecyn$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun$ )(selecyo$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ )(selecyp$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ )))(C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ (node$az (selecyq$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun$ )(selecyr$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ )(selecys$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ )))(A_c_a_fun_fun_a_a_fun_fun_tree$ (node$ba (selecyt$ A_c_a_fun_fun_a_a_fun_fun$ )(selecyu$ A_c_a_fun_fun_a_a_fun_fun_tree$ )(selecyv$ A_c_a_fun_fun_a_a_fun_fun_tree$ )))(A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ (node$bb (selecyw$ A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun$ )(selecyx$ A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ )(selecyy$ A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ )))(A_c_a_fun_a_fun_fun_tree$ (node$bc (selecyz$ A_c_a_fun_a_fun_fun$ )(selecza$ A_c_a_fun_a_fun_fun_tree$ )(seleczb$ A_c_a_fun_a_fun_fun_tree$ )))(B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ (node$bd (seleczc$ B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun$ )(seleczd$ B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )(selecze$ B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )))(B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ (node$be (seleczf$ B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun$ )(seleczg$ B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ )(seleczh$ B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ )))(B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$ (node$bf (seleczi$ B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun$ )(seleczj$ B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$ )(seleczk$ B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$ )))(A_b_fun_tree$ (node$bg (seleczl$ A_b_fun$ )(seleczm$ A_b_fun_tree$ )(seleczn$ A_b_fun_tree$ )))(B_a_fun_a_fun_tree$ (node$bh (seleczo$ B_a_fun_a_fun$ )(seleczp$ B_a_fun_a_fun_tree$ )(seleczq$ B_a_fun_a_fun_tree$ )))(B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$ (node$bi (seleczr$ B_c_fun_b_a_fun_fun_b_a_fun_fun$ )(seleczs$ B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$ )(seleczt$ B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$ )))(C_a_fun_a_fun_tree$ (node$bj (seleczu$ C_a_fun_a_fun$ )(seleczv$ C_a_fun_a_fun_tree$ )(seleczw$ C_a_fun_a_fun_tree$ )))(B_c_a_fun_fun_c_a_fun_fun_tree$ (node$bk (seleczx$ B_c_a_fun_fun_c_a_fun_fun$ )(seleczy$ B_c_a_fun_fun_c_a_fun_fun_tree$ )(seleczz$ B_c_a_fun_fun_c_a_fun_fun_tree$ )))(B_c_fun_c_fun_tree$ (node$bl (seledaa$ B_c_fun_c_fun$ )(seledab$ B_c_fun_c_fun_tree$ )(seledac$ B_c_fun_c_fun_tree$ )))))
(declare-fun u$ ()B_c_a_fun_fun_tree$ )
(declare-fun v$ ()B_c_fun_tree$ )
(declare-fun w$ ()B_tree$ )
(declare-fun uu$ (B_c_fun$ )B_c_fun_b_a_fun_fun_b_a_fun_fun$ )
(declare-fun uua$ (C$ )C_a_fun_a_fun$ )
(declare-fun uub$ (B$ )B_c_a_fun_fun_c_a_fun_fun$ )
(declare-fun uuc$ (B$ )B_c_fun_c_fun$ )
(declare-fun uud$ (B$ )B_a_fun_a_fun$ )
(declare-fun comp$ ()A_a_fun_c_a_fun_c_a_fun_fun_fun$ )
(declare-fun comp$a ()C_a_fun_c_c_fun_c_a_fun_fun_fun$ )
(declare-fun comp$b ()B_a_fun_c_b_fun_c_a_fun_fun_fun$ )
(declare-fun comp$c ()C_c_fun_b_c_fun_b_c_fun_fun_fun$ )
(declare-fun comp$d ()A_c_fun_b_a_fun_b_c_fun_fun_fun$ )
(declare-fun comp$e ()B_c_fun_b_b_fun_b_c_fun_fun_fun$ )
(declare-fun comp$f ()A_a_fun_b_a_fun_b_a_fun_fun_fun$ )
(declare-fun comp$g ()B_a_fun_b_b_fun_b_a_fun_fun_fun$ )
(declare-fun comp$h ()C_a_fun_b_c_fun_b_a_fun_fun_fun$ )
(declare-fun comp$i ()C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun$ )
(declare-fun left$c (C_a_fun_tree$ )C_a_fun_tree$ )
(declare-fun left$d (B_c_fun_tree$ )B_c_fun_tree$ )
(declare-fun left$e (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun left$f (B_c_a_fun_fun_tree$ )B_c_a_fun_fun_tree$ )
(declare-fun left$g (B_c_fun_b_a_fun_fun_tree$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun left$h (C_c_fun_tree$ )C_c_fun_tree$ )
(declare-fun left$i (A_c_fun_tree$ )A_c_fun_tree$ )
(declare-fun left$j (C_b_fun_tree$ )C_b_fun_tree$ )
(declare-fun left$k (B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun left$l (A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun root$c (C_a_fun_tree$ )C_a_fun$ )
(declare-fun root$d (B_c_fun_tree$ )B_c_fun$ )
(declare-fun root$e (B_a_fun_tree$ )B_a_fun$ )
(declare-fun root$f (B_c_a_fun_fun_tree$ )B_c_a_fun_fun$ )
(declare-fun root$g (B_c_fun_b_a_fun_fun_tree$ )B_c_fun_b_a_fun_fun$ )
(declare-fun root$h (C_c_fun_tree$ )C_c_fun$ )
(declare-fun root$i (A_c_fun_tree$ )A_c_fun$ )
(declare-fun root$j (C_b_fun_tree$ )C_b_fun$ )
(declare-fun root$k (B_b_fun_tree$ )B_b_fun$ )
(declare-fun root$l (A_b_fun_tree$ )A_b_fun$ )
(declare-fun right$c (B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun right$d (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun right$e (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun right$f (B_c_fun_b_a_fun_fun_tree$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun right$g (B_c_fun_tree$ )B_c_fun_tree$ )
(declare-fun right$h (C_a_fun_tree$ )C_a_fun_tree$ )
(declare-fun right$i (B_c_a_fun_fun_tree$ )B_c_a_fun_fun_tree$ )
(declare-fun tree_I$ ()A_a_fun_tree$ )
(declare-fun tree_K$ ()B_b_b_fun_fun_tree$ )
(declare-fun tree_S$ ()B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ )
(declare-fun fun_app$ (B_c_fun_b_a_fun_fun_b_a_fun_fun$ B_c_fun_b_a_fun_fun$ )B_a_fun$ )
(declare-fun tree_I$a ()C_c_fun_tree$ )
(declare-fun tree_I$b ()C_a_fun_c_a_fun_fun_tree$ )
(declare-fun tree_I$c ()B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_K$a ()C_a_fun_a_c_a_fun_fun_fun_tree$ )
(declare-fun tree_K$b ()B_a_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$c ()C_a_c_fun_fun_tree$ )
(declare-fun tree_K$d ()A_a_a_fun_fun_tree$ )
(declare-fun tree_K$e ()B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$f ()A_c_a_fun_fun_tree$ )
(declare-fun tree_K$g ()C_a_fun_b_c_a_fun_fun_fun_tree$ )
(declare-fun tree_K$h ()C_b_c_fun_fun_tree$ )
(declare-fun tree_K$i ()A_b_a_fun_fun_tree$ )
(declare-fun tree_K$j ()A_b_a_fun_a_fun_fun_tree$ )
(declare-fun tree_K$k ()C_b_c_fun_c_fun_fun_tree$ )
(declare-fun tree_K$l ()C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_K$m ()A_c_a_fun_a_fun_fun_tree$ )
(declare-fun tree_K$n ()B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$a ()A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$b ()C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$ )
(declare-fun tree_S$c ()C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$d ()A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$e ()B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun fun_app$a (B_c_fun_b_a_fun_fun$ B_c_fun$ )B_a_fun$ )
(declare-fun fun_app$b (C_a_fun_a_fun$ C_a_fun$ )A$ )
(declare-fun fun_app$c (C_a_fun$ C$ )A$ )
(declare-fun fun_app$d (B_c_a_fun_fun_c_a_fun_fun$ B_c_a_fun_fun$ )C_a_fun$ )
(declare-fun fun_app$e (B_c_a_fun_fun$ B$ )C_a_fun$ )
(declare-fun fun_app$f (B_c_fun_c_fun$ B_c_fun$ )C$ )
(declare-fun fun_app$g (B_c_fun$ B$ )C$ )
(declare-fun fun_app$h (B_a_fun_a_fun$ B_a_fun$ )A$ )
(declare-fun fun_app$i (B_a_fun$ B$ )A$ )
(declare-fun fun_app$j (C_c_fun$ C$ )C$ )
(declare-fun fun_app$k (C_b_fun$ C$ )B$ )
(declare-fun fun_app$l (B_b_fun$ B$ )B$ )
(declare-fun fun_app$m (A_c_fun$ A$ )C$ )
(declare-fun fun_app$n (A_b_fun$ A$ )B$ )
(declare-fun map_tree$ (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun tree_ap$a (B_c_fun_b_a_fun_fun_tree$ B_c_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$b (B_c_a_fun_fun_b_c_fun_b_a_fun_fun_fun_tree$ B_c_a_fun_fun_tree$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$c (C_a_fun_tree$ C_tree$ )A_tree$ )
(declare-fun tree_ap$d (B_c_a_fun_fun_tree$ B_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$e (B_c_fun_tree$ B_tree$ )C_tree$ )
(declare-fun tree_ap$f (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun tree_ap$g (A_c_a_fun_fun_tree$ A_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$h (A_b_a_fun_fun_tree$ A_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$i (A_c_fun_tree$ A_tree$ )C_tree$ )
(declare-fun tree_ap$j (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$k (B_b_b_fun_fun_tree$ B_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$l (C_a_fun_a_c_a_fun_fun_fun_tree$ C_a_fun_tree$ )A_c_a_fun_fun_tree$ )
(declare-fun tree_ap$m (B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$n (C_a_c_fun_fun_tree$ C_tree$ )A_c_fun_tree$ )
(declare-fun tree_ap$o (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$p (B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$q (C_a_fun_b_c_a_fun_fun_fun_tree$ C_a_fun_tree$ )B_c_a_fun_fun_tree$ )
(declare-fun tree_ap$r (C_b_c_fun_fun_tree$ C_tree$ )B_c_fun_tree$ )
(declare-fun tree_ap$s (C_a_fun_c_a_fun_fun_tree$ C_a_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$t (A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ A_a_fun_tree$ )C_a_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$u (C_c_fun_c_a_fun_fun_tree$ C_c_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$v (C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ C_a_fun_tree$ )C_c_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$w (C_c_fun_tree$ C_tree$ )C_tree$ )
(declare-fun tree_ap$x (C_b_fun_c_a_fun_fun_tree$ C_b_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$y (B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ B_a_fun_tree$ )C_b_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$z (C_b_fun_tree$ C_tree$ )B_tree$ )
(declare-fun map_tree$a (A_c_a_fun_fun$ A_tree$ )C_a_fun_tree$ )
(declare-fun map_tree$b (A_b_a_fun_fun$ A_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$c (A_c_fun$ A_tree$ )C_tree$ )
(declare-fun map_tree$d (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$e (B_c_fun_b_a_fun_fun$ B_c_fun_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$f (C_a_fun$ C_tree$ )A_tree$ )
(declare-fun map_tree$g (B_c_a_fun_fun$ B_tree$ )C_a_fun_tree$ )
(declare-fun map_tree$h (B_c_fun$ B_tree$ )C_tree$ )
(declare-fun map_tree$i (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun tree_ap$aa (B_c_fun_b_c_fun_fun_tree$ B_c_fun_tree$ )B_c_fun_tree$ )
(declare-fun tree_ap$ab (C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$ C_c_fun_tree$ )B_c_fun_b_c_fun_fun_tree$ )
(declare-fun tree_ap$ac (B_a_fun_b_c_fun_fun_tree$ B_a_fun_tree$ )B_c_fun_tree$ )
(declare-fun tree_ap$ad (A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$ A_c_fun_tree$ )B_a_fun_b_c_fun_fun_tree$ )
(declare-fun tree_ap$ae (B_b_fun_b_c_fun_fun_tree$ B_b_fun_tree$ )B_c_fun_tree$ )
(declare-fun tree_ap$af (B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$ B_c_fun_tree$ )B_b_fun_b_c_fun_fun_tree$ )
(declare-fun tree_ap$ag (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$ah (A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ A_a_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ai (B_b_fun_b_a_fun_fun_tree$ B_b_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$aj (B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )B_b_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ak (C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ C_a_fun_tree$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$al (B_c_fun_b_c_a_fun_fun_fun_tree$ B_c_fun_tree$ )B_c_a_fun_fun_tree$ )
(declare-fun tree_ap$am (C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$ C_c_a_fun_fun_tree$ )B_c_fun_b_c_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$an (C_c_a_fun_fun_tree$ C_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$ao (A_b_a_fun_fun_a_a_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$ap (A_b_a_fun_a_fun_fun_a_b_a_fun_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_a_fun_fun_tree$ )A_b_a_fun_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$aq (C_b_c_fun_fun_c_c_fun_fun_tree$ C_b_c_fun_fun_tree$ )C_c_fun_tree$ )
(declare-fun tree_ap$ar (C_b_c_fun_c_fun_fun_c_b_c_fun_fun_c_c_fun_fun_fun_tree$ C_b_c_fun_c_fun_fun_tree$ )C_b_c_fun_fun_c_c_fun_fun_tree$ )
(declare-fun tree_ap$as (C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_fun_tree$ )C_a_fun_c_a_fun_fun_tree$ )
(declare-fun tree_ap$at (C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_c_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_fun_tree$ C_a_fun_b_c_a_fun_fun_c_a_fun_fun_fun_tree$ )C_a_fun_b_c_a_fun_fun_fun_c_a_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$au (A_c_a_fun_fun_a_a_fun_fun_tree$ A_c_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$av (A_c_a_fun_a_fun_fun_a_c_a_fun_fun_a_a_fun_fun_fun_tree$ A_c_a_fun_a_fun_fun_tree$ )A_c_a_fun_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$aw (B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ax (B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_b_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_fun_tree$ B_a_fun_b_c_fun_b_a_fun_fun_b_a_fun_fun_fun_tree$ )B_a_fun_b_c_fun_b_a_fun_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$ay (A_b_fun_tree$ A_tree$ )B_tree$ )
(declare-fun tree_ap$az (B_a_fun_a_fun_tree$ B_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$ba (B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$ B_c_fun_b_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$bb (C_a_fun_a_fun_tree$ C_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$bc (B_c_a_fun_fun_c_a_fun_fun_tree$ B_c_a_fun_fun_tree$ )C_a_fun_tree$ )
(declare-fun tree_ap$bd (B_c_fun_c_fun_tree$ B_c_fun_tree$ )C_tree$ )
(declare-fun tree_pure$ (A_a_fun_c_a_fun_c_a_fun_fun_fun$ )A_a_fun_c_a_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$a (C_a_fun_c_c_fun_c_a_fun_fun_fun$ )C_a_fun_c_c_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$b (B_a_fun_c_b_fun_c_a_fun_fun_fun$ )B_a_fun_c_b_fun_c_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$c (C_c_fun_b_c_fun_b_c_fun_fun_fun$ )C_c_fun_b_c_fun_b_c_fun_fun_fun_tree$ )
(declare-fun tree_pure$d (A_c_fun_b_a_fun_b_c_fun_fun_fun$ )A_c_fun_b_a_fun_b_c_fun_fun_fun_tree$ )
(declare-fun tree_pure$e (B_c_fun_b_b_fun_b_c_fun_fun_fun$ )B_c_fun_b_b_fun_b_c_fun_fun_fun_tree$ )
(declare-fun tree_pure$f (A_a_fun_b_a_fun_b_a_fun_fun_fun$ )A_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$g (B_a_fun_b_b_fun_b_a_fun_fun_fun$ )B_a_fun_b_b_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$h (C_a_fun_b_c_fun_b_a_fun_fun_fun$ )C_a_fun_b_c_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$i (C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun$ )C_c_a_fun_fun_b_c_fun_b_c_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_pure$j (B$ )B_tree$ )
(declare-fun tree_pure$k (A$ )A_tree$ )
(declare-fun tree_pure$l (B_c_fun$ )B_c_fun_tree$ )
(declare-fun tree_pure$m (C$ )C_tree$ )
(declare-fun tree_pure$n (C_a_fun$ )C_a_fun_tree$ )
(declare-fun tree_pure$o (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$p (B_c_a_fun_fun$ )B_c_a_fun_fun_tree$ )
(declare-fun tree_pure$q (B_c_fun_b_a_fun_fun$ )B_c_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$r (C_c_fun$ )C_c_fun_tree$ )
(declare-fun tree_pure$s (C_b_fun$ )C_b_fun_tree$ )
(declare-fun tree_pure$t (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$u (A_c_fun$ )A_c_fun_tree$ )
(declare-fun tree_pure$v (A_b_fun$ )A_b_fun_tree$ )
(declare-fun tree_pure$w (A_c_a_fun_fun$ )A_c_a_fun_fun_tree$ )
(declare-fun tree_pure$x (A_b_a_fun_fun$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_pure$y (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$z (B_c_fun_b_a_fun_fun_b_a_fun_fun$ )B_c_fun_b_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$aa (C_a_fun_a_fun$ )C_a_fun_a_fun_tree$ )
(declare-fun tree_pure$ab (B_c_a_fun_fun_c_a_fun_fun$ )B_c_a_fun_fun_c_a_fun_fun_tree$ )
(declare-fun tree_pure$ac (B_c_fun_c_fun$ )B_c_fun_c_fun_tree$ )
(declare-fun tree_pure$ad (B_a_fun_a_fun$ )B_a_fun_a_fun_tree$ )
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_c_fun_b_a_fun_fun$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(fun_app$a ?v1 ?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 C$ )(?v1 C_a_fun$ ))(! (= (fun_app$b (uua$ ?v0 )?v1 )(fun_app$c ?v1 ?v0 )):pattern ((fun_app$b (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B_c_a_fun_fun$ ))(! (= (fun_app$d (uub$ ?v0 )?v1 )(fun_app$e ?v1 ?v0 )):pattern ((fun_app$d (uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 B$ )(?v1 B_c_fun$ ))(! (= (fun_app$f (uuc$ ?v0 )?v1 )(fun_app$g ?v1 ?v0 )):pattern ((fun_app$f (uuc$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 B_a_fun$ ))(! (= (fun_app$h (uud$ ?v0 )?v1 )(fun_app$i ?v1 ?v0 )):pattern ((fun_app$h (uud$ ?v0 )?v1 )))):named a4 ))
(assert (! (not (= (tree_ap$ (tree_ap$a (tree_ap$b tree_S$ u$ )v$ )w$ )(tree_ap$c (tree_ap$d u$ w$ )(tree_ap$e v$ w$ )))):named a5 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$f ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_c_a_fun_fun_tree$ )(?v1 A_c_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$g ?v0 ?v2 )(tree_ap$g ?v1 ?v2 )))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$h ?v0 ?v2 )(tree_ap$h ?v1 ?v2 )))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_c_fun_tree$ )(?v1 A_c_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$i ?v0 ?v2 )(tree_ap$i ?v1 ?v2 )))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$j ?v0 ?v2 )(tree_ap$j ?v1 ?v2 )))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun_tree$ )(?v1 B_c_fun_b_a_fun_fun_tree$ ))(=> (forall ((?v2 B_c_fun_tree$ ))(= (tree_ap$a ?v0 ?v2 )(tree_ap$a ?v1 ?v2 )))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_a_fun_tree$ ))(=> (forall ((?v2 C_tree$ ))(= (tree_ap$c ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$d ?v0 ?v2 )(tree_ap$d ?v1 ?v2 )))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_c_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$e ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$ ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_tree$ ))(= (tree_ap$f (tree_ap$k tree_K$ ?v0 )?v1 )?v0 )):named a16 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$g (tree_ap$l tree_K$a ?v0 )?v1 )?v0 )):named a17 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$h (tree_ap$m tree_K$b ?v0 )?v1 )?v0 )):named a18 ))
(assert (! (forall ((?v0 C_tree$ )(?v1 A_tree$ ))(= (tree_ap$i (tree_ap$n tree_K$c ?v0 )?v1 )?v0 )):named a19 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (tree_ap$j (tree_ap$o tree_K$d ?v0 )?v1 )?v0 )):named a20 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_c_fun_tree$ ))(= (tree_ap$a (tree_ap$p tree_K$e ?v0 )?v1 )?v0 )):named a21 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 C_tree$ ))(= (tree_ap$c (tree_ap$g tree_K$f ?v0 )?v1 )?v0 )):named a22 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$d (tree_ap$q tree_K$g ?v0 )?v1 )?v0 )):named a23 ))
(assert (! (forall ((?v0 C_tree$ )(?v1 B_tree$ ))(= (tree_ap$e (tree_ap$r tree_K$h ?v0 )?v1 )?v0 )):named a24 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_ap$h tree_K$i ?v0 )?v1 )?v0 )):named a25 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 C_a_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$s (tree_ap$t (tree_pure$ comp$ )?v0 )?v1 )?v2 )(tree_ap$j ?v0 (tree_ap$c ?v1 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_c_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$u (tree_ap$v (tree_pure$a comp$a )?v0 )?v1 )?v2 )(tree_ap$c ?v0 (tree_ap$w ?v1 ?v2 )))):named a27 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 C_b_fun_tree$ )(?v2 C_tree$ ))(= (tree_ap$c (tree_ap$x (tree_ap$y (tree_pure$b comp$b )?v0 )?v1 )?v2 )(tree_ap$ ?v0 (tree_ap$z ?v1 ?v2 )))):named a28 ))
(assert (! (forall ((?v0 C_c_fun_tree$ )(?v1 B_c_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$aa (tree_ap$ab (tree_pure$c comp$c )?v0 )?v1 )?v2 )(tree_ap$w ?v0 (tree_ap$e ?v1 ?v2 )))):named a29 ))
(assert (! (forall ((?v0 A_c_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$ac (tree_ap$ad (tree_pure$d comp$d )?v0 )?v1 )?v2 )(tree_ap$i ?v0 (tree_ap$ ?v1 ?v2 )))):named a30 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$ae (tree_ap$af (tree_pure$e comp$e )?v0 )?v1 )?v2 )(tree_ap$e ?v0 (tree_ap$f ?v1 ?v2 )))):named a31 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ag (tree_ap$ah (tree_pure$f comp$f )?v0 )?v1 )?v2 )(tree_ap$j ?v0 (tree_ap$ ?v1 ?v2 )))):named a32 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ai (tree_ap$aj (tree_pure$g comp$g )?v0 )?v1 )?v2 )(tree_ap$ ?v0 (tree_ap$f ?v1 ?v2 )))):named a33 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 B_c_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$a (tree_ap$ak (tree_pure$h comp$h )?v0 )?v1 )?v2 )(tree_ap$c ?v0 (tree_ap$e ?v1 ?v2 )))):named a34 ))
(assert (! (forall ((?v0 C_c_a_fun_fun_tree$ )(?v1 B_c_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$d (tree_ap$al (tree_ap$am (tree_pure$i comp$i )?v0 )?v1 )?v2 )(tree_ap$an ?v0 (tree_ap$e ?v1 ?v2 )))):named a35 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$f ?v0 (tree_pure$j ?v2 ))(tree_ap$f ?v1 (tree_pure$j ?v2 ))))(= ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 A_c_a_fun_fun_tree$ )(?v1 A_c_a_fun_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$g ?v0 (tree_pure$k ?v2 ))(tree_ap$g ?v1 (tree_pure$k ?v2 ))))(= ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$h ?v0 (tree_pure$k ?v2 ))(tree_ap$h ?v1 (tree_pure$k ?v2 ))))(= ?v0 ?v1 ))):named a38 ))
(assert (! (forall ((?v0 A_c_fun_tree$ )(?v1 A_c_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$i ?v0 (tree_pure$k ?v2 ))(tree_ap$i ?v1 (tree_pure$k ?v2 ))))(= ?v0 ?v1 ))):named a39 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$j ?v0 (tree_pure$k ?v2 ))(tree_ap$j ?v1 (tree_pure$k ?v2 ))))(= ?v0 ?v1 ))):named a40 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun_tree$ )(?v1 B_c_fun_b_a_fun_fun_tree$ ))(=> (forall ((?v2 B_c_fun$ ))(= (tree_ap$a ?v0 (tree_pure$l ?v2 ))(tree_ap$a ?v1 (tree_pure$l ?v2 ))))(= ?v0 ?v1 ))):named a41 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_a_fun_tree$ ))(=> (forall ((?v2 C$ ))(= (tree_ap$c ?v0 (tree_pure$m ?v2 ))(tree_ap$c ?v1 (tree_pure$m ?v2 ))))(= ?v0 ?v1 ))):named a42 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_c_a_fun_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$d ?v0 (tree_pure$j ?v2 ))(tree_ap$d ?v1 (tree_pure$j ?v2 ))))(= ?v0 ?v1 ))):named a43 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_c_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$e ?v0 (tree_pure$j ?v2 ))(tree_ap$e ?v1 (tree_pure$j ?v2 ))))(= ?v0 ?v1 ))):named a44 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$ ?v0 (tree_pure$j ?v2 ))(tree_ap$ ?v1 (tree_pure$j ?v2 ))))(= ?v0 ?v1 ))):named a45 ))
(assert (! (= tree_I$ (tree_ap$ao (tree_ap$ap tree_S$a tree_K$j )tree_K$i )):named a46 ))
(assert (! (= tree_I$a (tree_ap$aq (tree_ap$ar tree_S$b tree_K$k )tree_K$h )):named a47 ))
(assert (! (= tree_I$b (tree_ap$as (tree_ap$at tree_S$c tree_K$l )tree_K$g )):named a48 ))
(assert (! (= tree_I$ (tree_ap$au (tree_ap$av tree_S$d tree_K$m )tree_K$f )):named a49 ))
(assert (! (= tree_I$c (tree_ap$aw (tree_ap$ax tree_S$e tree_K$n )tree_K$e )):named a50 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C$ ))(= (tree_ap$c (tree_pure$n ?v0 )(tree_pure$m ?v1 ))(tree_pure$k (fun_app$c ?v0 ?v1 )))):named a51 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B$ ))(= (tree_ap$e (tree_pure$l ?v0 )(tree_pure$j ?v1 ))(tree_pure$m (fun_app$g ?v0 ?v1 )))):named a52 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (tree_ap$ (tree_pure$o ?v0 )(tree_pure$j ?v1 ))(tree_pure$k (fun_app$i ?v0 ?v1 )))):named a53 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$d (tree_pure$p ?v0 )(tree_pure$j ?v1 ))(tree_pure$n (fun_app$e ?v0 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun$ )(?v1 B_c_fun$ ))(= (tree_ap$a (tree_pure$q ?v0 )(tree_pure$l ?v1 ))(tree_pure$o (fun_app$a ?v0 ?v1 )))):named a55 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ ))(= (tree_ap$w (tree_pure$r ?v0 )(tree_pure$m ?v1 ))(tree_pure$m (fun_app$j ?v0 ?v1 )))):named a56 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C$ ))(= (tree_ap$z (tree_pure$s ?v0 )(tree_pure$m ?v1 ))(tree_pure$j (fun_app$k ?v0 ?v1 )))):named a57 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (tree_ap$f (tree_pure$t ?v0 )(tree_pure$j ?v1 ))(tree_pure$j (fun_app$l ?v0 ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A$ ))(= (tree_ap$i (tree_pure$u ?v0 )(tree_pure$k ?v1 ))(tree_pure$m (fun_app$m ?v0 ?v1 )))):named a59 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (tree_ap$ay (tree_pure$v ?v0 )(tree_pure$k ?v1 ))(tree_pure$j (fun_app$n ?v0 ?v1 )))):named a60 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$c (tree_pure$n ?v0 )(node$h ?v1 ?v2 ?v3 ))(node$ (fun_app$c ?v0 ?v1 )(tree_ap$c (tree_pure$n ?v0 )?v2 )(tree_ap$c (tree_pure$n ?v0 )?v3 )))):named a61 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$e (tree_pure$l ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$h (fun_app$g ?v0 ?v1 )(tree_ap$e (tree_pure$l ?v0 )?v2 )(tree_ap$e (tree_pure$l ?v0 )?v3 )))):named a62 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$ (tree_pure$o ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$ (fun_app$i ?v0 ?v1 )(tree_ap$ (tree_pure$o ?v0 )?v2 )(tree_ap$ (tree_pure$o ?v0 )?v3 )))):named a63 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$d (tree_pure$p ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$g (fun_app$e ?v0 ?v1 )(tree_ap$d (tree_pure$p ?v0 )?v2 )(tree_ap$d (tree_pure$p ?v0 )?v3 )))):named a64 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun$ )(?v1 B_c_fun$ )(?v2 B_c_fun_tree$ )(?v3 B_c_fun_tree$ ))(= (tree_ap$a (tree_pure$q ?v0 )(node$d ?v1 ?v2 ?v3 ))(node$a (fun_app$a ?v0 ?v1 )(tree_ap$a (tree_pure$q ?v0 )?v2 )(tree_ap$a (tree_pure$q ?v0 )?v3 )))):named a65 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$w (tree_pure$r ?v0 )(node$h ?v1 ?v2 ?v3 ))(node$h (fun_app$j ?v0 ?v1 )(tree_ap$w (tree_pure$r ?v0 )?v2 )(tree_ap$w (tree_pure$r ?v0 )?v3 )))):named a66 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C$ )(?v2 C_tree$ )(?v3 C_tree$ ))(= (tree_ap$z (tree_pure$s ?v0 )(node$h ?v1 ?v2 ?v3 ))(node$b (fun_app$k ?v0 ?v1 )(tree_ap$z (tree_pure$s ?v0 )?v2 )(tree_ap$z (tree_pure$s ?v0 )?v3 )))):named a67 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$f (tree_pure$t ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$b (fun_app$l ?v0 ?v1 )(tree_ap$f (tree_pure$t ?v0 )?v2 )(tree_ap$f (tree_pure$t ?v0 )?v3 )))):named a68 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$i (tree_pure$u ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$h (fun_app$m ?v0 ?v1 )(tree_ap$i (tree_pure$u ?v0 )?v2 )(tree_ap$i (tree_pure$u ?v0 )?v3 )))):named a69 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$ay (tree_pure$v ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$b (fun_app$n ?v0 ?v1 )(tree_ap$ay (tree_pure$v ?v0 )?v2 )(tree_ap$ay (tree_pure$v ?v0 )?v3 )))):named a70 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_a_fun_tree$ )(?v2 C_a_fun_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(! (= (tree_ap$c (node$g ?v0 ?v1 ?v2 )(node$h ?v3 ?v4 ?v5 ))(node$ (fun_app$c ?v0 ?v3 )(tree_ap$c ?v1 ?v4 )(tree_ap$c ?v2 ?v5 ))):pattern ((tree_ap$c (node$g ?v0 ?v1 ?v2 )(node$h ?v3 ?v4 ?v5 ))))):named a71 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_c_fun_tree$ )(?v2 B_c_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$e (node$d ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$h (fun_app$g ?v0 ?v3 )(tree_ap$e ?v1 ?v4 )(tree_ap$e ?v2 ?v5 ))):pattern ((tree_ap$e (node$d ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a72 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$ (fun_app$i ?v0 ?v3 )(tree_ap$ ?v1 ?v4 )(tree_ap$ ?v2 ?v5 ))):pattern ((tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a73 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_c_a_fun_fun_tree$ )(?v2 B_c_a_fun_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$d (node$f ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$g (fun_app$e ?v0 ?v3 )(tree_ap$d ?v1 ?v4 )(tree_ap$d ?v2 ?v5 ))):pattern ((tree_ap$d (node$f ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a74 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun$ )(?v1 B_c_fun_b_a_fun_fun_tree$ )(?v2 B_c_fun_b_a_fun_fun_tree$ )(?v3 B_c_fun$ )(?v4 B_c_fun_tree$ )(?v5 B_c_fun_tree$ ))(! (= (tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$a (fun_app$a ?v0 ?v3 )(tree_ap$a ?v1 ?v4 )(tree_ap$a ?v2 ?v5 ))):pattern ((tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a75 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_c_fun_tree$ )(?v2 C_c_fun_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(! (= (tree_ap$w (node$x ?v0 ?v1 ?v2 )(node$h ?v3 ?v4 ?v5 ))(node$h (fun_app$j ?v0 ?v3 )(tree_ap$w ?v1 ?v4 )(tree_ap$w ?v2 ?v5 ))):pattern ((tree_ap$w (node$x ?v0 ?v1 ?v2 )(node$h ?v3 ?v4 ?v5 ))))):named a76 ))
(assert (! (forall ((?v0 C_b_fun$ )(?v1 C_b_fun_tree$ )(?v2 C_b_fun_tree$ )(?v3 C$ )(?v4 C_tree$ )(?v5 C_tree$ ))(! (= (tree_ap$z (node$aa ?v0 ?v1 ?v2 )(node$h ?v3 ?v4 ?v5 ))(node$b (fun_app$k ?v0 ?v3 )(tree_ap$z ?v1 ?v4 )(tree_ap$z ?v2 ?v5 ))):pattern ((tree_ap$z (node$aa ?v0 ?v1 ?v2 )(node$h ?v3 ?v4 ?v5 ))))):named a77 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun_tree$ )(?v2 B_b_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$f (node$i ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$b (fun_app$l ?v0 ?v3 )(tree_ap$f ?v1 ?v4 )(tree_ap$f ?v2 ?v5 ))):pattern ((tree_ap$f (node$i ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a78 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_c_fun_tree$ )(?v2 A_c_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$i (node$l ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$h (fun_app$m ?v0 ?v3 )(tree_ap$i ?v1 ?v4 )(tree_ap$i ?v2 ?v5 ))):pattern ((tree_ap$i (node$l ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a79 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun_tree$ )(?v2 A_b_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$ay (node$bg ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$b (fun_app$n ?v0 ?v3 )(tree_ap$ay ?v1 ?v4 )(tree_ap$ay ?v2 ?v5 ))):pattern ((tree_ap$ay (node$bg ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a80 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (tree_ap$f (tree_pure$t ?v0 )?v1 )(map_tree$ ?v0 ?v1 ))):named a81 ))
(assert (! (forall ((?v0 A_c_a_fun_fun$ )(?v1 A_tree$ ))(= (tree_ap$g (tree_pure$w ?v0 )?v1 )(map_tree$a ?v0 ?v1 ))):named a82 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (tree_ap$h (tree_pure$x ?v0 )?v1 )(map_tree$b ?v0 ?v1 ))):named a83 ))
(assert (! (forall ((?v0 A_c_fun$ )(?v1 A_tree$ ))(= (tree_ap$i (tree_pure$u ?v0 )?v1 )(map_tree$c ?v0 ?v1 ))):named a84 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (tree_ap$j (tree_pure$y ?v0 )?v1 )(map_tree$d ?v0 ?v1 ))):named a85 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun$ )(?v1 B_c_fun_tree$ ))(= (tree_ap$a (tree_pure$q ?v0 )?v1 )(map_tree$e ?v0 ?v1 ))):named a86 ))
(assert (! (forall ((?v0 C_a_fun$ )(?v1 C_tree$ ))(= (tree_ap$c (tree_pure$n ?v0 )?v1 )(map_tree$f ?v0 ?v1 ))):named a87 ))
(assert (! (forall ((?v0 B_c_a_fun_fun$ )(?v1 B_tree$ ))(= (tree_ap$d (tree_pure$p ?v0 )?v1 )(map_tree$g ?v0 ?v1 ))):named a88 ))
(assert (! (forall ((?v0 B_c_fun$ )(?v1 B_tree$ ))(= (tree_ap$e (tree_pure$l ?v0 )?v1 )(map_tree$h ?v0 ?v1 ))):named a89 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_pure$o ?v0 )?v1 )(map_tree$i ?v0 ?v1 ))):named a90 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_tree$ ))(= (root$ (tree_ap$c ?v0 ?v1 ))(fun_app$c (root$c ?v0 )(root$b ?v1 )))):named a91 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_tree$ ))(= (root$b (tree_ap$e ?v0 ?v1 ))(fun_app$g (root$d ?v0 )(root$a ?v1 )))):named a92 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (root$ (tree_ap$ ?v0 ?v1 ))(fun_app$i (root$e ?v0 )(root$a ?v1 )))):named a93 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (root$c (tree_ap$d ?v0 ?v1 ))(fun_app$e (root$f ?v0 )(root$a ?v1 )))):named a94 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun_tree$ )(?v1 B_c_fun_tree$ ))(= (root$e (tree_ap$a ?v0 ?v1 ))(fun_app$a (root$g ?v0 )(root$d ?v1 )))):named a95 ))
(assert (! (forall ((?v0 C_c_fun_tree$ )(?v1 C_tree$ ))(= (root$b (tree_ap$w ?v0 ?v1 ))(fun_app$j (root$h ?v0 )(root$b ?v1 )))):named a96 ))
(assert (! (forall ((?v0 A_c_fun_tree$ )(?v1 A_tree$ ))(= (root$b (tree_ap$i ?v0 ?v1 ))(fun_app$m (root$i ?v0 )(root$ ?v1 )))):named a97 ))
(assert (! (forall ((?v0 C_b_fun_tree$ )(?v1 C_tree$ ))(= (root$a (tree_ap$z ?v0 ?v1 ))(fun_app$k (root$j ?v0 )(root$b ?v1 )))):named a98 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (root$a (tree_ap$f ?v0 ?v1 ))(fun_app$l (root$k ?v0 )(root$a ?v1 )))):named a99 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (root$a (tree_ap$ay ?v0 ?v1 ))(fun_app$n (root$l ?v0 )(root$ ?v1 )))):named a100 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_tree$ ))(= (left$ (tree_ap$c ?v0 ?v1 ))(tree_ap$c (left$c ?v0 )(left$b ?v1 )))):named a101 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_tree$ ))(= (left$b (tree_ap$e ?v0 ?v1 ))(tree_ap$e (left$d ?v0 )(left$a ?v1 )))):named a102 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (left$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (left$e ?v0 )(left$a ?v1 )))):named a103 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (left$c (tree_ap$d ?v0 ?v1 ))(tree_ap$d (left$f ?v0 )(left$a ?v1 )))):named a104 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun_tree$ )(?v1 B_c_fun_tree$ ))(= (left$e (tree_ap$a ?v0 ?v1 ))(tree_ap$a (left$g ?v0 )(left$d ?v1 )))):named a105 ))
(assert (! (forall ((?v0 C_c_fun_tree$ )(?v1 C_tree$ ))(= (left$b (tree_ap$w ?v0 ?v1 ))(tree_ap$w (left$h ?v0 )(left$b ?v1 )))):named a106 ))
(assert (! (forall ((?v0 A_c_fun_tree$ )(?v1 A_tree$ ))(= (left$b (tree_ap$i ?v0 ?v1 ))(tree_ap$i (left$i ?v0 )(left$ ?v1 )))):named a107 ))
(assert (! (forall ((?v0 C_b_fun_tree$ )(?v1 C_tree$ ))(= (left$a (tree_ap$z ?v0 ?v1 ))(tree_ap$z (left$j ?v0 )(left$b ?v1 )))):named a108 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (left$a (tree_ap$f ?v0 ?v1 ))(tree_ap$f (left$k ?v0 )(left$a ?v1 )))):named a109 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (left$a (tree_ap$ay ?v0 ?v1 ))(tree_ap$ay (left$l ?v0 )(left$ ?v1 )))):named a110 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (right$ (tree_ap$az ?v0 ?v1 ))(tree_ap$az (right$c ?v0 )(right$d ?v1 )))):named a111 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (right$ (tree_ap$j ?v0 ?v1 ))(tree_ap$j (right$e ?v0 )(right$ ?v1 )))):named a112 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun_tree$ )(?v1 B_c_fun_tree$ ))(= (right$d (tree_ap$a ?v0 ?v1 ))(tree_ap$a (right$f ?v0 )(right$g ?v1 )))):named a113 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C_tree$ ))(= (right$ (tree_ap$c ?v0 ?v1 ))(tree_ap$c (right$h ?v0 )(right$b ?v1 )))):named a114 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (right$h (tree_ap$d ?v0 ?v1 ))(tree_ap$d (right$i ?v0 )(right$a ?v1 )))):named a115 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B_tree$ ))(= (right$b (tree_ap$e ?v0 ?v1 ))(tree_ap$e (right$g ?v0 )(right$a ?v1 )))):named a116 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (right$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (right$d ?v0 )(right$a ?v1 )))):named a117 ))
(assert (! (forall ((?v0 B_c_fun_b_a_fun_fun_tree$ )(?v1 B_c_fun$ ))(= (tree_ap$a ?v0 (tree_pure$l ?v1 ))(tree_ap$ba (tree_pure$z (uu$ ?v1 ))?v0 ))):named a118 ))
(assert (! (forall ((?v0 C_a_fun_tree$ )(?v1 C$ ))(= (tree_ap$c ?v0 (tree_pure$m ?v1 ))(tree_ap$bb (tree_pure$aa (uua$ ?v1 ))?v0 ))):named a119 ))
(assert (! (forall ((?v0 B_c_a_fun_fun_tree$ )(?v1 B$ ))(= (tree_ap$d ?v0 (tree_pure$j ?v1 ))(tree_ap$bc (tree_pure$ab (uub$ ?v1 ))?v0 ))):named a120 ))
(assert (! (forall ((?v0 B_c_fun_tree$ )(?v1 B$ ))(= (tree_ap$e ?v0 (tree_pure$j ?v1 ))(tree_ap$bd (tree_pure$ac (uuc$ ?v1 ))?v0 ))):named a121 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B$ ))(= (tree_ap$ ?v0 (tree_pure$j ?v1 ))(tree_ap$az (tree_pure$ad (uud$ ?v1 ))?v0 ))):named a122 ))
(check-sat )
;(get-unsat-core )
