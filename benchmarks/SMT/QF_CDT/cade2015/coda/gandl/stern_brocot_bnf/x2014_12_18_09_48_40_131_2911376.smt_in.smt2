;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Int_int_fun$ 0 )
(declare-sort Int_nat_fun$ 0 )
(declare-sort Nat_int_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-codatatypes ()((Nat_tree$ (node$ (root$ Nat$ )(left$ Nat_tree$ )(right$ Nat_tree$ )))(Int_tree$ (node$a (root$a Int )(left$a Int_tree$ )(right$a Int_tree$ )))))
(declare-sort Dir$ 0)
(declare-sort Dir_list$ 0)
(declare-fun l$ ()Dir$)
(declare-fun r$ ()Dir$)
(declare-fun nil$ ()Dir_list$)
(declare-fun hd$ (Dir_list$)Dir$)
(declare-fun tl$ (Dir_list$)Dir_list$)
(declare-fun cons$ (Dir$ Dir_list$ )Dir_list$)
(declare-fun den$ ()Int_tree$ )
(declare-fun nat$ ()Int_nat_fun$ )
(declare-fun num$ ()Int_tree$ )
(declare-fun den$a ()Nat_tree$ )
(declare-fun fun_app$ (Int_nat_fun$ Int )Nat$ )
(declare-fun fun_app$a (Nat_int_fun$ Nat$ )Int )
(declare-fun fun_app$b (Int_int_fun$ Int )Int )
(declare-fun fun_app$c (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun map_tree$ (Int_nat_fun$ Int_tree$ )Nat_tree$ )
(declare-fun map_tree$a (Nat_int_fun$ Nat_tree$ )Int_tree$ )
(declare-fun map_tree$b (Int_int_fun$ Int_tree$ )Int_tree$ )
(declare-fun map_tree$c (Nat_nat_fun$ Nat_tree$ )Nat_tree$ )
(declare-fun tree_chop$ (Nat_tree$ )Nat_tree$ )
(declare-fun tree_pure$ (Nat$ )Nat_tree$ )
(declare-fun tree_chop$a (Int_tree$ )Int_tree$ )
(declare-fun tree_pure$a (Int )Int_tree$ )
(declare-fun traverse_tree$ (Dir_list$ Int_tree$ )Int_tree$ )
(declare-fun traverse_tree$a (Dir_list$ Nat_tree$ )Nat_tree$ )
(assert (! (not (= (map_tree$ nat$ den$ )den$a )):named a0 ))
(assert (! (forall ((?v0 Bool )(?v1 Int )(?v2 Int ))(= (ite ?v0 (fun_app$ nat$ ?v1 )(fun_app$ nat$ ?v2 ))(fun_app$ nat$ (ite ?v0 ?v1 ?v2 )))):named a1 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_int_fun$ )(?v2 Nat_tree$ ))(= (traverse_tree$ ?v0 (map_tree$a ?v1 ?v2 ))(map_tree$a ?v1 (traverse_tree$a ?v0 ?v2 )))):named a2 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_int_fun$ )(?v2 Int_tree$ ))(= (traverse_tree$ ?v0 (map_tree$b ?v1 ?v2 ))(map_tree$b ?v1 (traverse_tree$ ?v0 ?v2 )))):named a3 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat_nat_fun$ )(?v2 Nat_tree$ ))(= (traverse_tree$a ?v0 (map_tree$c ?v1 ?v2 ))(map_tree$c ?v1 (traverse_tree$a ?v0 ?v2 )))):named a4 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int_nat_fun$ )(?v2 Int_tree$ ))(= (traverse_tree$a ?v0 (map_tree$ ?v1 ?v2 ))(map_tree$ ?v1 (traverse_tree$ ?v0 ?v2 )))):named a5 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (map_tree$a ?v0 (tree_chop$ ?v1 ))(tree_chop$a (map_tree$a ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (map_tree$c ?v0 (tree_chop$ ?v1 ))(tree_chop$ (map_tree$c ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (map_tree$b ?v0 (tree_chop$a ?v1 ))(tree_chop$a (map_tree$b ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (map_tree$ ?v0 (tree_chop$a ?v1 ))(tree_chop$ (map_tree$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat$ ))(= (map_tree$a ?v0 (tree_pure$ ?v1 ))(tree_pure$a (fun_app$a ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int ))(= (map_tree$b ?v0 (tree_pure$a ?v1 ))(tree_pure$a (fun_app$b ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(= (map_tree$c ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$c ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int ))(= (map_tree$ ?v0 (tree_pure$a ?v1 ))(tree_pure$ (fun_app$ ?v0 ?v1 )))):named a13 ))
(assert (! (= (right$ den$a )den$a ):named a14 ))
(assert (! (= den$ (tree_chop$a num$ )):named a15 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (root$a (map_tree$a ?v0 ?v1 ))(fun_app$a ?v0 (root$ ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (root$a (map_tree$b ?v0 ?v1 ))(fun_app$b ?v0 (root$a ?v1 )))):named a17 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (root$ (map_tree$c ?v0 ?v1 ))(fun_app$c ?v0 (root$ ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$a ?v1 )))):named a19 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (root$a (map_tree$a ?v0 ?v1 ))(fun_app$a ?v0 (root$ ?v1 )))):named a20 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (root$a (map_tree$b ?v0 ?v1 ))(fun_app$b ?v0 (root$a ?v1 )))):named a21 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (root$ (map_tree$c ?v0 ?v1 ))(fun_app$c ?v0 (root$ ?v1 )))):named a22 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$a ?v1 )))):named a23 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (right$a (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (right$ ?v1 )))):named a24 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (right$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (right$a ?v1 )))):named a25 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (right$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (right$ ?v1 )))):named a26 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (right$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$a ?v1 )))):named a27 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (right$a (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (right$ ?v1 )))):named a28 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (right$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (right$a ?v1 )))):named a29 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (right$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (right$ ?v1 )))):named a30 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (right$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$a ?v1 )))):named a31 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (left$a (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$ ?v1 )))):named a32 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (left$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$ ?v1 )))):named a33 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (left$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$a ?v1 )))):named a34 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$a ?v1 )))):named a35 ))
(assert (! (forall ((?v0 Nat_int_fun$ )(?v1 Nat_tree$ ))(= (left$a (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$ ?v1 )))):named a36 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_tree$ ))(= (left$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$ ?v1 )))):named a37 ))
(assert (! (forall ((?v0 Int_int_fun$ )(?v1 Int_tree$ ))(= (left$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$a ?v1 )))):named a38 ))
(assert (! (forall ((?v0 Int_nat_fun$ )(?v1 Int_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$a ?v1 )))):named a39 ))
(assert (! (= (left$a num$ )num$ ):named a40 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Nat$ ))(= (traverse_tree$a ?v0 (tree_pure$ ?v1 ))(tree_pure$ ?v1 ))):named a41 ))
(assert (! (forall ((?v0 Dir_list$ )(?v1 Int ))(= (traverse_tree$ ?v0 (tree_pure$a ?v1 ))(tree_pure$a ?v1 ))):named a42 ))
(assert (! (forall ((?v0 Nat$ ))(= (tree_chop$ (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a43 ))
(assert (! (forall ((?v0 Int ))(= (tree_chop$a (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a44 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (= (tree_pure$a ?v0 )(tree_pure$a ?v1 ))(= ?v0 ?v1 ))):named a45 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (tree_pure$ ?v0 )(tree_pure$ ?v1 ))(= ?v0 ?v1 ))):named a46 ))
(assert (! (forall ((?v0 Nat_tree$ ))(= (root$ (tree_chop$ ?v0 ))(root$ (left$ ?v0 )))):named a47 ))
(assert (! (forall ((?v0 Int_tree$ ))(= (root$a (tree_chop$a ?v0 ))(root$a (left$a ?v0 )))):named a48 ))
(check-sat )
;(get-unsat-core )
