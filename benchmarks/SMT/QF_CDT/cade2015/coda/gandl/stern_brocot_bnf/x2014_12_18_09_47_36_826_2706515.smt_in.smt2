;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))))
(declare-fun t$ ()A_stream$ )
(declare-fun t$a ()A_stream$ )
(declare-fun times$ (A_stream$ A_stream$ )A_stream$ )
(declare-fun times$a (A$ A$ )A$ )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun fun_app$a (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun szip_with$ (A_a_a_fun_fun$ A_stream$ A_stream$ )A_stream$ )
(assert (! (not (= (shd$ (times$ t$ t$a ))(times$a (shd$ t$ )(shd$ t$a )))):named a0 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (shd$ (szip_with$ ?v0 ?v1 ?v2 ))(fun_app$ (fun_app$a ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a1 ))
(check-sat )
;(get-unsat-core )
