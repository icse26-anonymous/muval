;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Nat_tree_bool_fun$ 0 )
(declare-sort Nat_tree_tree_bool_fun$ 0 )
(declare-sort Nat_tree_tree_tree_bool_fun$ 0 )
(declare-sort Nat_tree_nat_tree_bool_fun_fun$ 0 )
(declare-sort Nat_tree_tree_nat_tree_tree_bool_fun_fun$ 0 )
(declare-sort Nat_tree_tree_tree_nat_tree_tree_tree_bool_fun_fun$ 0 )
(declare-codatatypes ()((Nat_tree$ (node$ (root$ Nat$ )(left$ Nat_tree$ )(right$ Nat_tree$ )))(Nat_tree_tree$ (node$a (root$a Nat_tree$ )(left$a Nat_tree_tree$ )(right$a Nat_tree_tree$ )))(Nat_tree_tree_tree$ (node$b (root$b Nat_tree_tree$ )(left$b Nat_tree_tree_tree$ )(right$b Nat_tree_tree_tree$ )))(Nat_tree_tree_tree_tree$ (node$c (root$c Nat_tree_tree_tree$ )(left$c Nat_tree_tree_tree_tree$ )(right$c Nat_tree_tree_tree_tree$ )))))
(declare-fun den$ ()Nat_tree$ )
(declare-fun mod$ (Nat_tree$ Nat_tree$ )Nat_tree$ )
(declare-fun num$ ()Nat_tree$ )
(declare-fun mod$a (Nat_tree_tree_tree$ Nat_tree_tree_tree$ )Nat_tree_tree_tree$ )
(declare-fun mod$b (Nat_tree_tree$ Nat_tree_tree$ )Nat_tree_tree$ )
(declare-fun mod$c (Nat_tree_tree_tree_tree$ Nat_tree_tree_tree_tree$ )Nat_tree_tree_tree_tree$ )
(declare-fun mod$d (Nat$ )Nat_nat_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$a (Nat_tree_tree_tree_bool_fun$ Nat_tree_tree_tree$ )Bool )
(declare-fun fun_app$b (Nat_tree_tree_tree_nat_tree_tree_tree_bool_fun_fun$ Nat_tree_tree_tree$ )Nat_tree_tree_tree_bool_fun$ )
(declare-fun fun_app$c (Nat_tree_tree_bool_fun$ Nat_tree_tree$ )Bool )
(declare-fun fun_app$d (Nat_tree_tree_nat_tree_tree_bool_fun_fun$ Nat_tree_tree$ )Nat_tree_tree_bool_fun$ )
(declare-fun fun_app$e (Nat_tree_bool_fun$ Nat_tree$ )Bool )
(declare-fun fun_app$f (Nat_tree_nat_tree_bool_fun_fun$ Nat_tree$ )Nat_tree_bool_fun$ )
(assert (! (not (and (= (root$ (mod$ num$ den$ ))(root$ (node$ zero$ num$ (mod$ num$ den$ ))))(and (= (left$ (mod$ num$ den$ ))(left$ (node$ zero$ num$ (mod$ num$ den$ ))))(= (right$ (mod$ num$ den$ ))(right$ (node$ zero$ num$ (mod$ num$ den$ ))))))):named a0 ))
(assert (! (forall ((?v0 Nat_tree$ )(?v1 Nat_tree_tree$ )(?v2 Nat_tree_tree$ )(?v3 Nat_tree$ )(?v4 Nat_tree_tree$ )(?v5 Nat_tree_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ )(?v3 Nat$ )(?v4 Nat_tree$ )(?v5 Nat_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a2 ))
(assert (! (forall ((?v0 Nat_tree_tree_tree$ )(?v1 Nat_tree_tree_tree$ ))(= (left$b (mod$a ?v0 ?v1 ))(mod$a (left$b ?v0 )(left$b ?v1 )))):named a3 ))
(assert (! (forall ((?v0 Nat_tree_tree$ )(?v1 Nat_tree_tree$ ))(= (left$a (mod$b ?v0 ?v1 ))(mod$b (left$a ?v0 )(left$a ?v1 )))):named a4 ))
(assert (! (forall ((?v0 Nat_tree$ )(?v1 Nat_tree$ ))(= (left$ (mod$ ?v0 ?v1 ))(mod$ (left$ ?v0 )(left$ ?v1 )))):named a5 ))
(assert (! (forall ((?v0 Nat_tree_tree_tree$ )(?v1 Nat_tree_tree_tree$ ))(= (right$b (mod$a ?v0 ?v1 ))(mod$a (right$b ?v0 )(right$b ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Nat_tree_tree$ )(?v1 Nat_tree_tree$ ))(= (right$a (mod$b ?v0 ?v1 ))(mod$b (right$a ?v0 )(right$a ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Nat_tree$ )(?v1 Nat_tree$ ))(= (right$ (mod$ ?v0 ?v1 ))(mod$ (right$ ?v0 )(right$ ?v1 )))):named a8 ))
(assert (! (= (left$ num$ )num$ ):named a9 ))
(assert (! (= (right$ den$ )den$ ):named a10 ))
(assert (! (forall ((?v0 Nat_tree_tree_tree_tree$ )(?v1 Nat_tree_tree_tree_tree$ ))(= (root$c (mod$c ?v0 ?v1 ))(mod$a (root$c ?v0 )(root$c ?v1 )))):named a11 ))
(assert (! (forall ((?v0 Nat_tree_tree_tree$ )(?v1 Nat_tree_tree_tree$ ))(= (root$b (mod$a ?v0 ?v1 ))(mod$b (root$b ?v0 )(root$b ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat_tree_tree$ )(?v1 Nat_tree_tree$ ))(= (root$a (mod$b ?v0 ?v1 ))(mod$ (root$a ?v0 )(root$a ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Nat_tree$ )(?v1 Nat_tree$ ))(= (root$ (mod$ ?v0 ?v1 ))(fun_app$ (mod$d (root$ ?v0 ))(root$ ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat_tree_tree_tree$ ))(= (node$b (root$b ?v0 )(left$b ?v0 )(right$b ?v0 ))?v0 )):named a15 ))
(assert (! (forall ((?v0 Nat_tree_tree$ ))(= (node$a (root$a ?v0 )(left$a ?v0 )(right$a ?v0 ))?v0 )):named a16 ))
(assert (! (forall ((?v0 Nat_tree$ ))(= (node$ (root$ ?v0 )(left$ ?v0 )(right$ ?v0 ))?v0 )):named a17 ))
(assert (! (forall ((?v0 Nat_tree$ )(?v1 Nat_tree_tree$ )(?v2 Nat_tree_tree$ ))(! (= (left$a (node$a ?v0 ?v1 ?v2 ))?v1 ):pattern ((node$a ?v0 ?v1 ?v2 )))):named a18 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(! (= (left$ (node$ ?v0 ?v1 ?v2 ))?v1 ):pattern ((node$ ?v0 ?v1 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 Nat_tree_tree$ )(?v1 Nat_tree_tree_tree$ )(?v2 Nat_tree_tree_tree$ ))(! (= (root$b (node$b ?v0 ?v1 ?v2 ))?v0 ):pattern ((node$b ?v0 ?v1 ?v2 )))):named a20 ))
(assert (! (forall ((?v0 Nat_tree$ )(?v1 Nat_tree_tree$ )(?v2 Nat_tree_tree$ ))(! (= (root$a (node$a ?v0 ?v1 ?v2 ))?v0 ):pattern ((node$a ?v0 ?v1 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(! (= (root$ (node$ ?v0 ?v1 ?v2 ))?v0 ):pattern ((node$ ?v0 ?v1 ?v2 )))):named a22 ))
(assert (! (forall ((?v0 Nat_tree$ )(?v1 Nat_tree_tree$ )(?v2 Nat_tree_tree$ ))(! (= (right$a (node$a ?v0 ?v1 ?v2 ))?v2 ):pattern ((node$a ?v0 ?v1 ?v2 )))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(! (= (right$ (node$ ?v0 ?v1 ?v2 ))?v2 ):pattern ((node$ ?v0 ?v1 ?v2 )))):named a24 ))
(assert (! (forall ((?v0 Nat_tree_tree_tree$ ))(=> (=> (= ?v0 (node$b (root$b ?v0 )(left$b ?v0 )(right$b ?v0 )))false )false )):named a25 ))
(assert (! (forall ((?v0 Nat_tree_tree$ ))(=> (=> (= ?v0 (node$a (root$a ?v0 )(left$a ?v0 )(right$a ?v0 )))false )false )):named a26 ))
(assert (! (forall ((?v0 Nat_tree$ ))(=> (=> (= ?v0 (node$ (root$ ?v0 )(left$ ?v0 )(right$ ?v0 )))false )false )):named a27 ))
(assert (! (forall ((?v0 Nat_tree_tree$ ))(=> (forall ((?v1 Nat_tree$ )(?v2 Nat_tree_tree$ )(?v3 Nat_tree_tree$ ))(=> (= ?v0 (node$a ?v1 ?v2 ?v3 ))false ))false )):named a28 ))
(assert (! (forall ((?v0 Nat_tree$ ))(=> (forall ((?v1 Nat$ )(?v2 Nat_tree$ )(?v3 Nat_tree$ ))(=> (= ?v0 (node$ ?v1 ?v2 ?v3 ))false ))false )):named a29 ))
(assert (! (forall ((?v0 Nat_tree_tree_tree$ )(?v1 Nat_tree_tree_tree$ ))(=> (and (= (root$b ?v0 )(root$b ?v1 ))(and (= (left$b ?v0 )(left$b ?v1 ))(= (right$b ?v0 )(right$b ?v1 ))))(= ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 Nat_tree_tree$ )(?v1 Nat_tree_tree$ ))(=> (and (= (root$a ?v0 )(root$a ?v1 ))(and (= (left$a ?v0 )(left$a ?v1 ))(= (right$a ?v0 )(right$a ?v1 ))))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 Nat_tree$ )(?v1 Nat_tree$ ))(=> (and (= (root$ ?v0 )(root$ ?v1 ))(and (= (left$ ?v0 )(left$ ?v1 ))(= (right$ ?v0 )(right$ ?v1 ))))(= ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 Nat_tree_tree_tree_nat_tree_tree_tree_bool_fun_fun$ )(?v1 Nat_tree_tree_tree$ )(?v2 Nat_tree_tree_tree$ ))(=> (and (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )(forall ((?v3 Nat_tree_tree_tree$ )(?v4 Nat_tree_tree_tree$ ))(=> (fun_app$a (fun_app$b ?v0 ?v3 )?v4 )(and (= (root$b ?v3 )(root$b ?v4 ))(and (or (fun_app$a (fun_app$b ?v0 (left$b ?v3 ))(left$b ?v4 ))(= (left$b ?v3 )(left$b ?v4 )))(or (fun_app$a (fun_app$b ?v0 (right$b ?v3 ))(right$b ?v4 ))(= (right$b ?v3 )(right$b ?v4 ))))))))(= ?v1 ?v2 ))):named a33 ))
(assert (! (forall ((?v0 Nat_tree_tree_nat_tree_tree_bool_fun_fun$ )(?v1 Nat_tree_tree$ )(?v2 Nat_tree_tree$ ))(=> (and (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(forall ((?v3 Nat_tree_tree$ )(?v4 Nat_tree_tree$ ))(=> (fun_app$c (fun_app$d ?v0 ?v3 )?v4 )(and (= (root$a ?v3 )(root$a ?v4 ))(and (or (fun_app$c (fun_app$d ?v0 (left$a ?v3 ))(left$a ?v4 ))(= (left$a ?v3 )(left$a ?v4 )))(or (fun_app$c (fun_app$d ?v0 (right$a ?v3 ))(right$a ?v4 ))(= (right$a ?v3 )(right$a ?v4 ))))))))(= ?v1 ?v2 ))):named a34 ))
(assert (! (forall ((?v0 Nat_tree_nat_tree_bool_fun_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (and (fun_app$e (fun_app$f ?v0 ?v1 )?v2 )(forall ((?v3 Nat_tree$ )(?v4 Nat_tree$ ))(=> (fun_app$e (fun_app$f ?v0 ?v3 )?v4 )(and (= (root$ ?v3 )(root$ ?v4 ))(and (or (fun_app$e (fun_app$f ?v0 (left$ ?v3 ))(left$ ?v4 ))(= (left$ ?v3 )(left$ ?v4 )))(or (fun_app$e (fun_app$f ?v0 (right$ ?v3 ))(right$ ?v4 ))(= (right$ ?v3 )(right$ ?v4 ))))))))(= ?v1 ?v2 ))):named a35 ))
(assert (! (forall ((?v0 Nat_tree_tree_tree_nat_tree_tree_tree_bool_fun_fun$ )(?v1 Nat_tree_tree_tree$ )(?v2 Nat_tree_tree_tree$ ))(=> (and (fun_app$a (fun_app$b ?v0 ?v1 )?v2 )(forall ((?v3 Nat_tree_tree_tree$ )(?v4 Nat_tree_tree_tree$ ))(=> (fun_app$a (fun_app$b ?v0 ?v3 )?v4 )(and (= (root$b ?v3 )(root$b ?v4 ))(and (fun_app$a (fun_app$b ?v0 (left$b ?v3 ))(left$b ?v4 ))(fun_app$a (fun_app$b ?v0 (right$b ?v3 ))(right$b ?v4 )))))))(= ?v1 ?v2 ))):named a36 ))
(assert (! (forall ((?v0 Nat_tree_tree_nat_tree_tree_bool_fun_fun$ )(?v1 Nat_tree_tree$ )(?v2 Nat_tree_tree$ ))(=> (and (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(forall ((?v3 Nat_tree_tree$ )(?v4 Nat_tree_tree$ ))(=> (fun_app$c (fun_app$d ?v0 ?v3 )?v4 )(and (= (root$a ?v3 )(root$a ?v4 ))(and (fun_app$c (fun_app$d ?v0 (left$a ?v3 ))(left$a ?v4 ))(fun_app$c (fun_app$d ?v0 (right$a ?v3 ))(right$a ?v4 )))))))(= ?v1 ?v2 ))):named a37 ))
(assert (! (forall ((?v0 Nat_tree_nat_tree_bool_fun_fun$ )(?v1 Nat_tree$ )(?v2 Nat_tree$ ))(=> (and (fun_app$e (fun_app$f ?v0 ?v1 )?v2 )(forall ((?v3 Nat_tree$ )(?v4 Nat_tree$ ))(=> (fun_app$e (fun_app$f ?v0 ?v3 )?v4 )(and (= (root$ ?v3 )(root$ ?v4 ))(and (fun_app$e (fun_app$f ?v0 (left$ ?v3 ))(left$ ?v4 ))(fun_app$e (fun_app$f ?v0 (right$ ?v3 ))(right$ ?v4 )))))))(= ?v1 ?v2 ))):named a38 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (mod$d ?v0 )zero$ )?v0 )):named a39 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (mod$d ?v0 )?v0 )zero$ ):pattern ((mod$d ?v0 )))):named a40 ))
(check-sat )
;(get-unsat-core )
