;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-codatatypes ()((A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))))
(declare-fun t$ ()A_tree$ )
(declare-fun t$a ()A_tree$ )
(declare-fun minus$ (A_tree$ A_tree$ )A_tree$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun minus$a (A$ )A_a_fun$ )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun map_tree$ (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(declare-fun tree_pure$ (A$ )A_tree$ )
(assert (! (not (= (root$ (minus$ t$ t$a ))(fun_app$ (minus$a (root$ t$ ))(root$ t$a )))):named a0 ))
(assert (! (forall ((?v0 A$ ))(= (root$ (tree_pure$ ?v0 ))?v0 )):named a1 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$ ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$ ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_tree$ ))(member$ (root$ ?v0 )(set_tree$ ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_tree$ ))(member$ (root$ ?v0 )(set_tree$ ?v0 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (root$ (node$ ?v0 ?v1 ?v2 ))?v0 ):pattern ((node$ ?v0 ?v1 ?v2 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a7 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$ ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$ ?v0 ?v1 )))):named a8 ))
(check-sat )
;(get-unsat-core )
