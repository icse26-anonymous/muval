;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_prod_nat_fun$ 0 )
(declare-codatatypes ()((Nat_stream$ (sCons$ (shd$ Nat$ )(stl$ Nat_stream$ )))))
(declare-sort Nat_nat_prod$ 0)
(declare-fun fst$ (Nat_nat_prod$)Nat$)
(declare-fun snd$ (Nat_nat_prod$)Nat$)
(declare-fun pair$ (Nat$ Nat$ )Nat_nat_prod$)
(declare-codatatypes ()((Nat_nat_prod_stream$ (sCons$a (shd$a Nat_nat_prod$ )(stl$a Nat_nat_prod_stream$ )))))
(declare-sort Num$ 0)
(declare-sort Nat_nat_prod_nat_nat_prod_prod$ 0)
(declare-fun one$ ()Num$)
(declare-fun select$ (Num$)Num$)
(declare-fun bit0$ (Num$ )Num$)
(declare-fun selecta$ (Num$)Num$)
(declare-fun bit1$ (Num$ )Num$)
(declare-fun fst$a (Nat_nat_prod_nat_nat_prod_prod$)Nat_nat_prod$)
(declare-fun snd$a (Nat_nat_prod_nat_nat_prod_prod$)Nat_nat_prod$)
(declare-fun pair$a (Nat_nat_prod$ Nat_nat_prod$ )Nat_nat_prod_nat_nat_prod_prod$)
(declare-codatatypes ()((Nat_stream_stream$ (sCons$b (shd$b Nat_stream$ )(stl$b Nat_stream_stream$ )))(Nat_stream_stream_stream$ (sCons$c (shd$c Nat_stream_stream$ )(stl$c Nat_stream_stream_stream$ )))(Nat_stream_stream_stream_stream$ (sCons$d (shd$d Nat_stream_stream_stream$ )(stl$d Nat_stream_stream_stream_stream$ )))))
(declare-fun uu$ ()Nat_nat_prod_nat_fun$ )
(declare-fun xs$ ()Nat_stream$ )
(declare-fun mod$ (Nat_stream$ Nat_stream$ )Nat_stream$ )
(declare-fun uua$ ()Nat_nat_prod_nat_fun$ )
(declare-fun xs$a ()Nat_stream$ )
(declare-fun fusc$ ()Nat_stream$ )
(declare-fun mod$a (Nat_stream_stream$ Nat_stream_stream$ )Nat_stream_stream$ )
(declare-fun one$a ()Nat$ )
(declare-fun plus$ (Nat_stream$ Nat_stream$ )Nat_stream$ )
(declare-fun smap$ (Nat_nat_prod_nat_fun$ Nat_nat_prod_stream$ )Nat_stream$ )
(declare-fun fusc$a ()Nat_stream$ )
(declare-fun minus$ (Nat_stream$ Nat_stream$ )Nat_stream$ )
(declare-fun plus$a (Nat_stream_stream_stream$ Nat_stream_stream_stream$ )Nat_stream_stream_stream$ )
(declare-fun plus$b (Nat_stream_stream$ Nat_stream_stream$ )Nat_stream_stream$ )
(declare-fun plus$c (Nat_stream_stream_stream_stream$ Nat_stream_stream_stream_stream$ )Nat_stream_stream_stream_stream$ )
(declare-fun plus$d (Nat$ Nat$ )Nat$ )
(declare-fun times$ (Nat_stream$ Nat_stream$ )Nat_stream$ )
(declare-fun minus$a (Nat_stream_stream$ Nat_stream_stream$ )Nat_stream_stream$ )
(declare-fun mulmat$ (Nat_nat_prod_nat_nat_prod_prod$ Nat_nat_prod_nat_nat_prod_prod$ )Nat_nat_prod_nat_nat_prod_prod$ )
(declare-fun times$a (Nat_stream_stream_stream$ Nat_stream_stream_stream$ )Nat_stream_stream_stream$ )
(declare-fun times$b (Nat_stream_stream$ Nat_stream_stream$ )Nat_stream_stream$ )
(declare-fun times$c (Nat_stream_stream_stream_stream$ Nat_stream_stream_stream_stream$ )Nat_stream_stream_stream_stream$ )
(declare-fun times$d (Nat$ Nat$ )Nat$ )
(declare-fun fun_app$ (Nat_nat_prod_nat_fun$ Nat_nat_prod$ )Nat$ )
(declare-fun numeral$ (Num$ )Nat_stream$ )
(declare-fun numeral$a (Num$ )Nat_stream_stream_stream$ )
(declare-fun numeral$b (Num$ )Nat_stream_stream$ )
(declare-fun numeral$c (Num$ )Nat_stream_stream_stream_stream$ )
(declare-fun numeral$d (Num$ )Nat$ )
(declare-fun stern_brocot_loopless$ ()Nat_nat_prod_stream$ )
(assert (! (forall ((?v0 Nat_nat_prod$ ))(! (= (fun_app$ uua$ ?v0 )(snd$ ?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat_nat_prod$ ))(! (= (fun_app$ uu$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a1 ))
(assert (! (not (and (= xs$ fusc$ )(= xs$a fusc$a ))):named a2 ))
(assert (! (= xs$ (sCons$ one$a xs$a )):named a3 ))
(assert (! (= (stl$ fusc$ )fusc$a ):named a4 ))
(assert (! (= fusc$ (sCons$ one$a fusc$a )):named a5 ))
(assert (! (= (shd$ fusc$ )one$a ):named a6 ))
(assert (! (= (shd$ fusc$a )one$a ):named a7 ))
(assert (! (= fusc$ (smap$ uu$ stern_brocot_loopless$ )):named a8 ))
(assert (! (= xs$a (sCons$ one$a (minus$ (plus$ xs$ xs$a )(times$ (numeral$ (bit0$ one$ ))(mod$ xs$ xs$a ))))):named a9 ))
(assert (! (= fusc$a (smap$ uua$ stern_brocot_loopless$ )):named a10 ))
(assert (! (forall ((?v0 Nat_nat_prod_nat_nat_prod_prod$ )(?v1 Nat_nat_prod_nat_nat_prod_prod$ )(?v2 Nat_nat_prod_nat_nat_prod_prod$ ))(= (mulmat$ (mulmat$ ?v0 ?v1 )?v2 )(mulmat$ ?v0 (mulmat$ ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat_stream_stream$ )(?v1 Nat_stream_stream$ ))(= (stl$b (mod$a ?v0 ?v1 ))(mod$a (stl$b ?v0 )(stl$b ?v1 )))):named a12 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ ))(= (stl$ (mod$ ?v0 ?v1 ))(mod$ (stl$ ?v0 )(stl$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 Nat_stream_stream_stream$ )(?v1 Nat_stream_stream_stream$ ))(= (stl$c (plus$a ?v0 ?v1 ))(plus$a (stl$c ?v0 )(stl$c ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Nat_stream_stream$ )(?v1 Nat_stream_stream$ ))(= (stl$b (plus$b ?v0 ?v1 ))(plus$b (stl$b ?v0 )(stl$b ?v1 )))):named a15 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ ))(= (stl$ (plus$ ?v0 ?v1 ))(plus$ (stl$ ?v0 )(stl$ ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Nat_stream_stream$ )(?v1 Nat_stream_stream$ ))(= (stl$b (minus$a ?v0 ?v1 ))(minus$a (stl$b ?v0 )(stl$b ?v1 )))):named a17 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ ))(= (stl$ (minus$ ?v0 ?v1 ))(minus$ (stl$ ?v0 )(stl$ ?v1 )))):named a18 ))
(assert (! (forall ((?v0 Nat_stream_stream_stream$ )(?v1 Nat_stream_stream_stream$ ))(= (stl$c (times$a ?v0 ?v1 ))(times$a (stl$c ?v0 )(stl$c ?v1 )))):named a19 ))
(assert (! (forall ((?v0 Nat_stream_stream$ )(?v1 Nat_stream_stream$ ))(= (stl$b (times$b ?v0 ?v1 ))(times$b (stl$b ?v0 )(stl$b ?v1 )))):named a20 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ ))(= (stl$ (times$ ?v0 ?v1 ))(times$ (stl$ ?v0 )(stl$ ?v1 )))):named a21 ))
(assert (! (forall ((?v0 Num$ ))(= (stl$c (numeral$a ?v0 ))(numeral$a ?v0 ))):named a22 ))
(assert (! (forall ((?v0 Num$ ))(= (stl$b (numeral$b ?v0 ))(numeral$b ?v0 ))):named a23 ))
(assert (! (forall ((?v0 Num$ ))(= (stl$ (numeral$ ?v0 ))(numeral$ ?v0 ))):named a24 ))
(assert (! (forall ((?v0 Nat_stream_stream_stream_stream$ )(?v1 Nat_stream_stream_stream_stream$ ))(= (shd$d (times$c ?v0 ?v1 ))(times$a (shd$d ?v0 )(shd$d ?v1 )))):named a25 ))
(assert (! (forall ((?v0 Nat_stream_stream_stream$ )(?v1 Nat_stream_stream_stream$ ))(= (shd$c (times$a ?v0 ?v1 ))(times$b (shd$c ?v0 )(shd$c ?v1 )))):named a26 ))
(assert (! (forall ((?v0 Nat_stream_stream$ )(?v1 Nat_stream_stream$ ))(= (shd$b (times$b ?v0 ?v1 ))(times$ (shd$b ?v0 )(shd$b ?v1 )))):named a27 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ ))(= (shd$ (times$ ?v0 ?v1 ))(times$d (shd$ ?v0 )(shd$ ?v1 )))):named a28 ))
(assert (! (forall ((?v0 Nat_stream_stream_stream_stream$ )(?v1 Nat_stream_stream_stream_stream$ ))(= (shd$d (plus$c ?v0 ?v1 ))(plus$a (shd$d ?v0 )(shd$d ?v1 )))):named a29 ))
(assert (! (forall ((?v0 Nat_stream_stream_stream$ )(?v1 Nat_stream_stream_stream$ ))(= (shd$c (plus$a ?v0 ?v1 ))(plus$b (shd$c ?v0 )(shd$c ?v1 )))):named a30 ))
(assert (! (forall ((?v0 Nat_stream_stream$ )(?v1 Nat_stream_stream$ ))(= (shd$b (plus$b ?v0 ?v1 ))(plus$ (shd$b ?v0 )(shd$b ?v1 )))):named a31 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ ))(= (shd$ (plus$ ?v0 ?v1 ))(plus$d (shd$ ?v0 )(shd$ ?v1 )))):named a32 ))
(assert (! (forall ((?v0 Num$ ))(= (shd$d (numeral$c ?v0 ))(numeral$a ?v0 ))):named a33 ))
(assert (! (forall ((?v0 Num$ ))(= (shd$c (numeral$a ?v0 ))(numeral$b ?v0 ))):named a34 ))
(assert (! (forall ((?v0 Num$ ))(= (shd$b (numeral$b ?v0 ))(numeral$ ?v0 ))):named a35 ))
(assert (! (forall ((?v0 Num$ ))(= (shd$ (numeral$ ?v0 ))(numeral$d ?v0 ))):named a36 ))
(check-sat )
;(get-unsat-core )
