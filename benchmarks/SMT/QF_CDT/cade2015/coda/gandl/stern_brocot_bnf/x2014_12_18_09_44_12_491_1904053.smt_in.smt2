;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_b_fun_fun$ 0 )
(declare-sort A_b_fun_a_fun$ 0 )
(declare-sort A_b_fun_b_fun$ 0 )
(declare-sort B_a_b_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_a_b_fun_fun_fun$ 0 )
(declare-sort A_b_fun_b_a_fun_b_b_fun_fun_fun$ 0 )
(declare-sort B_a_fun_a_b_fun_a_a_fun_fun_fun$ 0 )
(declare-sort B_b_fun_a_b_fun_a_b_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_b_b_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_fun_fun_a_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_b_fun_tree$ (node$ (select$ A_b_fun$ )(selecta$ A_b_fun_tree$ )(selectb$ A_b_fun_tree$ )))(A_tree$ (node$a (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))(B_tree$ (node$b (root$a B$ )(left$a B_tree$ )(right$a B_tree$ )))(A_a_fun_a_b_fun_fun_tree$ (node$c (selectc$ A_a_fun_a_b_fun_fun$ )(selectd$ A_a_fun_a_b_fun_fun_tree$ )(selecte$ A_a_fun_a_b_fun_fun_tree$ )))(A_a_fun_tree$ (node$d (selectf$ A_a_fun$ )(selectg$ A_a_fun_tree$ )(selecth$ A_a_fun_tree$ )))(A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$ (node$e (selecti$ A_b_fun_a_a_fun_a_b_fun_fun_fun$ )(selectj$ A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$ )(selectk$ A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$ )))(A_b_fun_a_b_fun_fun_tree$ (node$f (selectl$ A_b_fun_a_b_fun_fun$ )(selectm$ A_b_fun_a_b_fun_fun_tree$ )(selectn$ A_b_fun_a_b_fun_fun_tree$ )))(B_b_fun_tree$ (node$g (selecto$ B_b_fun$ )(selectp$ B_b_fun_tree$ )(selectq$ B_b_fun_tree$ )))(B_a_fun_tree$ (node$h (selectr$ B_a_fun$ )(selects$ B_a_fun_tree$ )(selectt$ B_a_fun_tree$ )))(A_a_b_fun_fun_tree$ (node$i (selectu$ A_a_b_fun_fun$ )(selectv$ A_a_b_fun_fun_tree$ )(selectw$ A_a_b_fun_fun_tree$ )))(A_b_fun_a_fun_tree$ (node$j (selectx$ A_b_fun_a_fun$ )(selecty$ A_b_fun_a_fun_tree$ )(selectz$ A_b_fun_a_fun_tree$ )))(A_b_fun_b_fun_tree$ (node$k (selecua$ A_b_fun_b_fun$ )(selecub$ A_b_fun_b_fun_tree$ )(selecuc$ A_b_fun_b_fun_tree$ )))(B_a_b_fun_fun_tree$ (node$l (selecud$ B_a_b_fun_fun$ )(selecue$ B_a_b_fun_fun_tree$ )(selecuf$ B_a_b_fun_fun_tree$ )))(B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$ (node$m (selecug$ B_b_fun_a_b_fun_a_b_fun_fun_fun$ )(selecuh$ B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$ )(selecui$ B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$ )))(B_a_fun_b_b_fun_fun_tree$ (node$n (selecuj$ B_a_fun_b_b_fun_fun$ )(selecuk$ B_a_fun_b_b_fun_fun_tree$ )(selecul$ B_a_fun_b_b_fun_fun_tree$ )))(A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$ (node$o (selecum$ A_b_fun_b_a_fun_b_b_fun_fun_fun$ )(selecun$ A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$ )(selecuo$ A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$ )))(B_b_fun_b_b_fun_fun_tree$ (node$p (selecup$ B_b_fun_b_b_fun_fun$ )(selecuq$ B_b_fun_b_b_fun_fun_tree$ )(selecur$ B_b_fun_b_b_fun_fun_tree$ )))(B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$ (node$q (selecus$ B_b_fun_b_b_fun_b_b_fun_fun_fun$ )(selecut$ B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$ )(selecuu$ B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$ )))(A_b_fun_a_a_fun_fun_tree$ (node$r (selecuv$ A_b_fun_a_a_fun_fun$ )(selecuw$ A_b_fun_a_a_fun_fun_tree$ )(selecux$ A_b_fun_a_a_fun_fun_tree$ )))(B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$ (node$s (selecuy$ B_a_fun_a_b_fun_a_a_fun_fun_fun$ )(selecuz$ B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$ )(selecva$ B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$ )))(A_a_fun_a_a_fun_fun_tree$ (node$t (selecvb$ A_a_fun_a_a_fun_fun$ )(selecvc$ A_a_fun_a_a_fun_fun_tree$ )(selecvd$ A_a_fun_a_a_fun_fun_tree$ )))(A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ (node$u (selecve$ A_a_fun_a_a_fun_a_a_fun_fun_fun$ )(selecvf$ A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ )(selecvg$ A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ )))(A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$ (node$v (selecvh$ A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun$ )(selecvi$ A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$ )(selecvj$ A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$ )))(A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun_fun_tree$ (node$w (selecvk$ A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun_fun$ )(selecvl$ A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun_fun_tree$ )(selecvm$ A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun_fun_tree$ )))(A_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$ (node$x (selecvn$ A_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun$ )(selecvo$ A_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$ )(selecvp$ A_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$ )))(A_a_fun_a_b_fun_fun_a_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun_fun_tree$ (node$y (selecvq$ A_a_fun_a_b_fun_fun_a_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun_fun$ )(selecvr$ A_a_fun_a_b_fun_fun_a_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun_fun_tree$ )(selecvs$ A_a_fun_a_b_fun_fun_a_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun_fun_tree$ )))(A_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_tree$ (node$z (selecvt$ A_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun$ )(selecvu$ A_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_tree$ )(selecvv$ A_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_tree$ )))(A_b_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_fun_tree$ (node$aa (selecvw$ A_b_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_fun$ )(selecvx$ A_b_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_fun_tree$ )(selecvy$ A_b_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_fun_tree$ )))(A_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun_tree$ (node$ab (selecvz$ A_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun$ )(selecwa$ A_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun_tree$ )(selecwb$ A_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun_tree$ )))(A_a_fun_a_b_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun_fun_tree$ (node$ac (selecwc$ A_a_fun_a_b_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun_fun$ )(selecwd$ A_a_fun_a_b_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun_fun_tree$ )(selecwe$ A_a_fun_a_b_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun_fun_tree$ )))))
(declare-fun f$ ()A_b_fun_tree$ )
(declare-fun g$ ()A_b_fun_tree$ )
(declare-fun id$ ()A_b_fun_a_b_fun_fun$ )
(declare-fun id$a ()B_b_fun$ )
(declare-fun id$b ()A_a_fun$ )
(declare-fun comp$ ()B_b_fun_a_b_fun_a_b_fun_fun_fun$ )
(declare-fun comp$a ()A_b_fun_a_a_fun_a_b_fun_fun_fun$ )
(declare-fun comp$b ()A_b_fun_b_a_fun_b_b_fun_fun_fun$ )
(declare-fun comp$c ()B_b_fun_b_b_fun_b_b_fun_fun_fun$ )
(declare-fun comp$d ()B_a_fun_a_b_fun_a_a_fun_fun_fun$ )
(declare-fun comp$e ()A_a_fun_a_a_fun_a_a_fun_fun_fun$ )
(declare-fun comp$f ()A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun_fun$ )
(declare-fun comp$g ()A_a_fun_a_b_fun_fun_a_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun_fun$ )
(declare-fun comp$h ()A_b_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_fun$ )
(declare-fun comp$i ()A_a_fun_a_b_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun_fun$ )
(declare-fun left$b (A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun left$c (B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun left$d (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun left$e (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun left$f (A_b_fun_b_fun_tree$ )A_b_fun_b_fun_tree$ )
(declare-fun left$g (B_a_b_fun_fun_tree$ )B_a_b_fun_fun_tree$ )
(declare-fun left$h (A_a_b_fun_fun_tree$ )A_a_b_fun_fun_tree$ )
(declare-fun left$i (A_b_fun_a_fun_tree$ )A_b_fun_a_fun_tree$ )
(declare-fun left$j (A_a_fun_a_b_fun_fun_tree$ )A_a_fun_a_b_fun_fun_tree$ )
(declare-fun left$k (A_b_fun_a_b_fun_fun_tree$ )A_b_fun_a_b_fun_fun_tree$ )
(declare-fun root$b (A_b_fun_tree$ )A_b_fun$ )
(declare-fun root$c (B_b_fun_tree$ )B_b_fun$ )
(declare-fun root$d (B_a_fun_tree$ )B_a_fun$ )
(declare-fun root$e (A_a_fun_tree$ )A_a_fun$ )
(declare-fun root$f (A_b_fun_b_fun_tree$ )A_b_fun_b_fun$ )
(declare-fun root$g (B_a_b_fun_fun_tree$ )B_a_b_fun_fun$ )
(declare-fun root$h (A_a_b_fun_fun_tree$ )A_a_b_fun_fun$ )
(declare-fun root$i (A_b_fun_a_fun_tree$ )A_b_fun_a_fun$ )
(declare-fun root$j (A_a_fun_a_b_fun_fun_tree$ )A_a_fun_a_b_fun_fun$ )
(declare-fun root$k (A_b_fun_a_b_fun_fun_tree$ )A_b_fun_a_b_fun_fun$ )
(declare-fun right$b (A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun right$c (B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun right$d (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun right$e (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun right$f (A_b_fun_b_fun_tree$ )A_b_fun_b_fun_tree$ )
(declare-fun right$g (B_a_b_fun_fun_tree$ )B_a_b_fun_fun_tree$ )
(declare-fun right$h (A_a_b_fun_fun_tree$ )A_a_b_fun_fun_tree$ )
(declare-fun right$i (A_b_fun_a_fun_tree$ )A_b_fun_a_fun_tree$ )
(declare-fun right$j (A_a_fun_a_b_fun_fun_tree$ )A_a_fun_a_b_fun_fun_tree$ )
(declare-fun right$k (A_b_fun_a_b_fun_fun_tree$ )A_b_fun_a_b_fun_fun_tree$ )
(declare-fun fun_app$ (A_b_fun$ A$ )B$ )
(declare-fun tree_ap$ (A_b_fun_tree$ A_tree$ )B_tree$ )
(declare-fun fun_app$a (A_a_fun$ A$ )A$ )
(declare-fun fun_app$b (B_a_fun$ B$ )A$ )
(declare-fun fun_app$c (B_b_fun$ B$ )B$ )
(declare-fun fun_app$d (A_a_b_fun_fun$ A$ )A_b_fun$ )
(declare-fun fun_app$e (A_b_fun_a_fun$ A_b_fun$ )A$ )
(declare-fun fun_app$f (A_b_fun_b_fun$ A_b_fun$ )B$ )
(declare-fun fun_app$g (B_a_b_fun_fun$ B$ )A_b_fun$ )
(declare-fun fun_app$h (A_a_fun_a_b_fun_fun$ A_a_fun$ )A_b_fun$ )
(declare-fun fun_app$i (A_b_fun_a_b_fun_fun$ A_b_fun$ )A_b_fun$ )
(declare-fun map_tree$ (A_b_fun_a_b_fun_fun$ A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun tree_ap$a (A_a_fun_a_b_fun_fun_tree$ A_a_fun_tree$ )A_b_fun_tree$ )
(declare-fun tree_ap$b (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$c (A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$ A_b_fun_tree$ )A_a_fun_a_b_fun_fun_tree$ )
(declare-fun tree_ap$d (A_b_fun_a_b_fun_fun_tree$ A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun tree_ap$e (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun tree_ap$f (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun tree_ap$g (A_a_b_fun_fun_tree$ A_tree$ )A_b_fun_tree$ )
(declare-fun tree_ap$h (A_b_fun_a_fun_tree$ A_b_fun_tree$ )A_tree$ )
(declare-fun tree_ap$i (A_b_fun_b_fun_tree$ A_b_fun_tree$ )B_tree$ )
(declare-fun tree_ap$j (B_a_b_fun_fun_tree$ B_tree$ )A_b_fun_tree$ )
(declare-fun tree_ap$k (B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$ B_b_fun_tree$ )A_b_fun_a_b_fun_fun_tree$ )
(declare-fun tree_ap$l (B_a_fun_b_b_fun_fun_tree$ B_a_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$m (A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$ A_b_fun_tree$ )B_a_fun_b_b_fun_fun_tree$ )
(declare-fun tree_ap$n (B_b_fun_b_b_fun_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$o (B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$ B_b_fun_tree$ )B_b_fun_b_b_fun_fun_tree$ )
(declare-fun tree_ap$p (A_b_fun_a_a_fun_fun_tree$ A_b_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$q (B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$ B_a_fun_tree$ )A_b_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$r (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$s (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$t (A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$ A_b_fun_a_b_fun_fun_tree$ )A_b_fun_a_b_fun_fun_tree$ )
(declare-fun tree_ap$u (A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun_fun_tree$ A_b_fun_a_b_fun_fun_tree$ )A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$ )
(declare-fun tree_ap$v (A_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$ A_b_fun_a_a_fun_fun_tree$ )A_b_fun_a_b_fun_fun_tree$ )
(declare-fun tree_ap$w (A_a_fun_a_b_fun_fun_a_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun_fun_tree$ A_a_fun_a_b_fun_fun_tree$ )A_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun_tree$ )
(declare-fun tree_ap$x (A_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_tree$ A_a_fun_a_b_fun_fun_tree$ )A_a_fun_a_b_fun_fun_tree$ )
(declare-fun tree_ap$y (A_b_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_fun_tree$ A_b_fun_a_b_fun_fun_tree$ )A_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_tree$ )
(declare-fun tree_ap$z (A_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_b_fun_fun_tree$ )
(declare-fun map_tree$a (A_a_fun_a_b_fun_fun$ A_a_fun_tree$ )A_b_fun_tree$ )
(declare-fun map_tree$b (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun map_tree$c (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$d (A_b_fun_a_a_fun_a_b_fun_fun_fun$ A_b_fun_tree$ )A_a_fun_a_b_fun_fun_tree$ )
(declare-fun map_tree$e (B_b_fun_a_b_fun_a_b_fun_fun_fun$ B_b_fun_tree$ )A_b_fun_a_b_fun_fun_tree$ )
(declare-fun map_tree$f (A_b_fun$ A_tree$ )B_tree$ )
(declare-fun map_tree$g (A_b_fun_b_fun$ A_b_fun_tree$ )B_tree$ )
(declare-fun map_tree$h (B_a_b_fun_fun$ B_tree$ )A_b_fun_tree$ )
(declare-fun map_tree$i (A_a_b_fun_fun$ A_tree$ )A_b_fun_tree$ )
(declare-fun map_tree$j (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun map_tree$k (A_b_fun_a_fun$ A_b_fun_tree$ )A_tree$ )
(declare-fun tree_ap$aa (A_a_fun_a_b_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun_fun_tree$ A_a_fun_a_b_fun_fun_tree$ )A_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun_tree$ )
(declare-fun tree_pure$ (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$a (A$ )A_tree$ )
(declare-fun tree_pure$b (A_b_fun$ )A_b_fun_tree$ )
(declare-fun tree_pure$c (B$ )B_tree$ )
(declare-fun tree_pure$d (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$e (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$f (A_a_b_fun_fun$ )A_a_b_fun_fun_tree$ )
(declare-fun tree_pure$g (A_b_fun_a_fun$ )A_b_fun_a_fun_tree$ )
(declare-fun tree_pure$h (A_b_fun_b_fun$ )A_b_fun_b_fun_tree$ )
(declare-fun tree_pure$i (B_a_b_fun_fun$ )B_a_b_fun_fun_tree$ )
(declare-fun tree_pure$j (A_a_fun_a_b_fun_fun$ )A_a_fun_a_b_fun_fun_tree$ )
(declare-fun tree_pure$k (A_b_fun_a_b_fun_fun$ )A_b_fun_a_b_fun_fun_tree$ )
(declare-fun tree_pure$l (A_b_fun_a_a_fun_a_b_fun_fun_fun$ )A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$ )
(declare-fun tree_pure$m (B_b_fun_a_b_fun_a_b_fun_fun_fun$ )B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$ )
(declare-fun tree_pure$n (A_b_fun_b_a_fun_b_b_fun_fun_fun$ )A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$ )
(declare-fun tree_pure$o (B_b_fun_b_b_fun_b_b_fun_fun_fun$ )B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$ )
(declare-fun tree_pure$p (B_a_fun_a_b_fun_a_a_fun_fun_fun$ )B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$q (A_a_fun_a_a_fun_a_a_fun_fun_fun$ )A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_pure$r (A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun_fun$ )A_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_a_b_fun_a_b_fun_fun_fun_fun_tree$ )
(declare-fun tree_pure$s (A_a_fun_a_b_fun_fun_a_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun_fun$ )A_a_fun_a_b_fun_fun_a_b_fun_a_a_fun_fun_a_b_fun_a_b_fun_fun_fun_fun_tree$ )
(declare-fun tree_pure$t (A_b_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_fun$ )A_b_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_a_a_fun_a_b_fun_fun_fun_fun_tree$ )
(declare-fun tree_pure$u (A_a_fun_a_b_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun_fun$ )A_a_fun_a_b_fun_fun_a_a_fun_a_a_fun_fun_a_a_fun_a_b_fun_fun_fun_fun_tree$ )
(assert (! (not (= f$ g$ )):named a0 ))
(assert (! (forall ((?v0 A_tree$ ))(! (= (tree_ap$ f$ ?v0 )(tree_ap$ g$ ?v0 )):pattern ((tree_ap$ f$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_a_fun_a_b_fun_fun_tree$ )(?v1 A_a_fun_a_b_fun_fun_tree$ ))(=> (forall ((?v2 A_a_fun$ ))(= (tree_ap$a ?v0 (tree_pure$ ?v2 ))(tree_ap$a ?v1 (tree_pure$ ?v2 ))))(= ?v0 ?v1 ))):named a2 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$b ?v0 (tree_pure$a ?v2 ))(tree_ap$b ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a3 ))
(assert (! (forall ((?v0 A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$ )(?v1 A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$ ))(=> (forall ((?v2 A_b_fun$ ))(= (tree_ap$c ?v0 (tree_pure$b ?v2 ))(tree_ap$c ?v1 (tree_pure$b ?v2 ))))(= ?v0 ?v1 ))):named a4 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$ )(?v1 A_b_fun_a_b_fun_fun_tree$ ))(=> (forall ((?v2 A_b_fun$ ))(= (tree_ap$d ?v0 (tree_pure$b ?v2 ))(tree_ap$d ?v1 (tree_pure$b ?v2 ))))(= ?v0 ?v1 ))):named a5 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$e ?v0 (tree_pure$c ?v2 ))(tree_ap$e ?v1 (tree_pure$c ?v2 ))))(= ?v0 ?v1 ))):named a6 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_b_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$ ?v0 (tree_pure$a ?v2 ))(tree_ap$ ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (tree_ap$ (tree_pure$b ?v0 )(tree_pure$a ?v1 ))(tree_pure$c (fun_app$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (tree_ap$b (tree_pure$ ?v0 )(tree_pure$a ?v1 ))(tree_pure$a (fun_app$a ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (tree_ap$f (tree_pure$d ?v0 )(tree_pure$c ?v1 ))(tree_pure$a (fun_app$b ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (tree_ap$e (tree_pure$e ?v0 )(tree_pure$c ?v1 ))(tree_pure$c (fun_app$c ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A$ ))(= (tree_ap$g (tree_pure$f ?v0 )(tree_pure$a ?v1 ))(tree_pure$b (fun_app$d ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_b_fun_a_fun$ )(?v1 A_b_fun$ ))(= (tree_ap$h (tree_pure$g ?v0 )(tree_pure$b ?v1 ))(tree_pure$a (fun_app$e ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_b_fun_b_fun$ )(?v1 A_b_fun$ ))(= (tree_ap$i (tree_pure$h ?v0 )(tree_pure$b ?v1 ))(tree_pure$c (fun_app$f ?v0 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 B_a_b_fun_fun$ )(?v1 B$ ))(= (tree_ap$j (tree_pure$i ?v0 )(tree_pure$c ?v1 ))(tree_pure$b (fun_app$g ?v0 ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_a_fun_a_b_fun_fun$ )(?v1 A_a_fun$ ))(= (tree_ap$a (tree_pure$j ?v0 )(tree_pure$ ?v1 ))(tree_pure$b (fun_app$h ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$ )(?v1 A_b_fun$ ))(= (tree_ap$d (tree_pure$k ?v0 )(tree_pure$b ?v1 ))(tree_pure$b (fun_app$i ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$ (tree_pure$b ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$b (fun_app$ ?v0 ?v1 )(tree_ap$ (tree_pure$b ?v0 )?v2 )(tree_ap$ (tree_pure$b ?v0 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$b (tree_pure$ ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$a (fun_app$a ?v0 ?v1 )(tree_ap$b (tree_pure$ ?v0 )?v2 )(tree_ap$b (tree_pure$ ?v0 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$f (tree_pure$d ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$a (fun_app$b ?v0 ?v1 )(tree_ap$f (tree_pure$d ?v0 )?v2 )(tree_ap$f (tree_pure$d ?v0 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$e (tree_pure$e ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$b (fun_app$c ?v0 ?v1 )(tree_ap$e (tree_pure$e ?v0 )?v2 )(tree_ap$e (tree_pure$e ?v0 )?v3 )))):named a21 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$g (tree_pure$f ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$ (fun_app$d ?v0 ?v1 )(tree_ap$g (tree_pure$f ?v0 )?v2 )(tree_ap$g (tree_pure$f ?v0 )?v3 )))):named a22 ))
(assert (! (forall ((?v0 B_a_b_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$j (tree_pure$i ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$ (fun_app$g ?v0 ?v1 )(tree_ap$j (tree_pure$i ?v0 )?v2 )(tree_ap$j (tree_pure$i ?v0 )?v3 )))):named a23 ))
(assert (! (forall ((?v0 A_b_fun_a_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun_tree$ )(?v3 A_b_fun_tree$ ))(= (tree_ap$h (tree_pure$g ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$a (fun_app$e ?v0 ?v1 )(tree_ap$h (tree_pure$g ?v0 )?v2 )(tree_ap$h (tree_pure$g ?v0 )?v3 )))):named a24 ))
(assert (! (forall ((?v0 A_b_fun_b_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun_tree$ )(?v3 A_b_fun_tree$ ))(= (tree_ap$i (tree_pure$h ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$b (fun_app$f ?v0 ?v1 )(tree_ap$i (tree_pure$h ?v0 )?v2 )(tree_ap$i (tree_pure$h ?v0 )?v3 )))):named a25 ))
(assert (! (forall ((?v0 A_a_fun_a_b_fun_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun_tree$ )(?v3 A_a_fun_tree$ ))(= (tree_ap$a (tree_pure$j ?v0 )(node$d ?v1 ?v2 ?v3 ))(node$ (fun_app$h ?v0 ?v1 )(tree_ap$a (tree_pure$j ?v0 )?v2 )(tree_ap$a (tree_pure$j ?v0 )?v3 )))):named a26 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$ )(?v1 A_b_fun$ )(?v2 A_b_fun_tree$ )(?v3 A_b_fun_tree$ ))(= (tree_ap$d (tree_pure$k ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$ (fun_app$i ?v0 ?v1 )(tree_ap$d (tree_pure$k ?v0 )?v2 )(tree_ap$d (tree_pure$k ?v0 )?v3 )))):named a27 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun_tree$ )(?v2 A_b_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$ (node$ ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$b (fun_app$ ?v0 ?v3 )(tree_ap$ ?v1 ?v4 )(tree_ap$ ?v2 ?v5 ))):pattern ((tree_ap$ (node$ ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a28 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$b (node$d ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$a (fun_app$a ?v0 ?v3 )(tree_ap$b ?v1 ?v4 )(tree_ap$b ?v2 ?v5 ))):pattern ((tree_ap$b (node$d ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a29 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$f (node$h ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$a (fun_app$b ?v0 ?v3 )(tree_ap$f ?v1 ?v4 )(tree_ap$f ?v2 ?v5 ))):pattern ((tree_ap$f (node$h ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a30 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun_tree$ )(?v2 B_b_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$e (node$g ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$b (fun_app$c ?v0 ?v3 )(tree_ap$e ?v1 ?v4 )(tree_ap$e ?v2 ?v5 ))):pattern ((tree_ap$e (node$g ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a31 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A_a_b_fun_fun_tree$ )(?v2 A_a_b_fun_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$g (node$i ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$ (fun_app$d ?v0 ?v3 )(tree_ap$g ?v1 ?v4 )(tree_ap$g ?v2 ?v5 ))):pattern ((tree_ap$g (node$i ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a32 ))
(assert (! (forall ((?v0 B_a_b_fun_fun$ )(?v1 B_a_b_fun_fun_tree$ )(?v2 B_a_b_fun_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$j (node$l ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$ (fun_app$g ?v0 ?v3 )(tree_ap$j ?v1 ?v4 )(tree_ap$j ?v2 ?v5 ))):pattern ((tree_ap$j (node$l ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a33 ))
(assert (! (forall ((?v0 A_b_fun_a_fun$ )(?v1 A_b_fun_a_fun_tree$ )(?v2 A_b_fun_a_fun_tree$ )(?v3 A_b_fun$ )(?v4 A_b_fun_tree$ )(?v5 A_b_fun_tree$ ))(! (= (tree_ap$h (node$j ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$a (fun_app$e ?v0 ?v3 )(tree_ap$h ?v1 ?v4 )(tree_ap$h ?v2 ?v5 ))):pattern ((tree_ap$h (node$j ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a34 ))
(assert (! (forall ((?v0 A_b_fun_b_fun$ )(?v1 A_b_fun_b_fun_tree$ )(?v2 A_b_fun_b_fun_tree$ )(?v3 A_b_fun$ )(?v4 A_b_fun_tree$ )(?v5 A_b_fun_tree$ ))(! (= (tree_ap$i (node$k ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$b (fun_app$f ?v0 ?v3 )(tree_ap$i ?v1 ?v4 )(tree_ap$i ?v2 ?v5 ))):pattern ((tree_ap$i (node$k ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a35 ))
(assert (! (forall ((?v0 A_a_fun_a_b_fun_fun$ )(?v1 A_a_fun_a_b_fun_fun_tree$ )(?v2 A_a_fun_a_b_fun_fun_tree$ )(?v3 A_a_fun$ )(?v4 A_a_fun_tree$ )(?v5 A_a_fun_tree$ ))(! (= (tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(node$ (fun_app$h ?v0 ?v3 )(tree_ap$a ?v1 ?v4 )(tree_ap$a ?v2 ?v5 ))):pattern ((tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))))):named a36 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$ )(?v1 A_b_fun_a_b_fun_fun_tree$ )(?v2 A_b_fun_a_b_fun_fun_tree$ )(?v3 A_b_fun$ )(?v4 A_b_fun_tree$ )(?v5 A_b_fun_tree$ ))(! (= (tree_ap$d (node$f ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$ (fun_app$i ?v0 ?v3 )(tree_ap$d ?v1 ?v4 )(tree_ap$d ?v2 ?v5 ))):pattern ((tree_ap$d (node$f ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a37 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$ )(?v1 A_b_fun_tree$ ))(= (tree_ap$d (tree_pure$k ?v0 )?v1 )(map_tree$ ?v0 ?v1 ))):named a38 ))
(assert (! (forall ((?v0 A_a_fun_a_b_fun_fun$ )(?v1 A_a_fun_tree$ ))(= (tree_ap$a (tree_pure$j ?v0 )?v1 )(map_tree$a ?v0 ?v1 ))):named a39 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (tree_ap$e (tree_pure$e ?v0 )?v1 )(map_tree$b ?v0 ?v1 ))):named a40 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (tree_ap$b (tree_pure$ ?v0 )?v1 )(map_tree$c ?v0 ?v1 ))):named a41 ))
(assert (! (forall ((?v0 A_b_fun_a_a_fun_a_b_fun_fun_fun$ )(?v1 A_b_fun_tree$ ))(= (tree_ap$c (tree_pure$l ?v0 )?v1 )(map_tree$d ?v0 ?v1 ))):named a42 ))
(assert (! (forall ((?v0 B_b_fun_a_b_fun_a_b_fun_fun_fun$ )(?v1 B_b_fun_tree$ ))(= (tree_ap$k (tree_pure$m ?v0 )?v1 )(map_tree$e ?v0 ?v1 ))):named a43 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (tree_ap$ (tree_pure$b ?v0 )?v1 )(map_tree$f ?v0 ?v1 ))):named a44 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (root$a (tree_ap$ ?v0 ?v1 ))(fun_app$ (root$b ?v0 )(root$ ?v1 )))):named a45 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (root$a (tree_ap$e ?v0 ?v1 ))(fun_app$c (root$c ?v0 )(root$a ?v1 )))):named a46 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (root$ (tree_ap$f ?v0 ?v1 ))(fun_app$b (root$d ?v0 )(root$a ?v1 )))):named a47 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (root$ (tree_ap$b ?v0 ?v1 ))(fun_app$a (root$e ?v0 )(root$ ?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_b_fun_b_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (root$a (tree_ap$i ?v0 ?v1 ))(fun_app$f (root$f ?v0 )(root$b ?v1 )))):named a49 ))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$ )(?v1 B_tree$ ))(= (root$b (tree_ap$j ?v0 ?v1 ))(fun_app$g (root$g ?v0 )(root$a ?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree$ )(?v1 A_tree$ ))(= (root$b (tree_ap$g ?v0 ?v1 ))(fun_app$d (root$h ?v0 )(root$ ?v1 )))):named a51 ))
(assert (! (forall ((?v0 A_b_fun_a_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (root$ (tree_ap$h ?v0 ?v1 ))(fun_app$e (root$i ?v0 )(root$b ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_a_fun_a_b_fun_fun_tree$ )(?v1 A_a_fun_tree$ ))(= (root$b (tree_ap$a ?v0 ?v1 ))(fun_app$h (root$j ?v0 )(root$e ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (root$b (tree_ap$d ?v0 ?v1 ))(fun_app$i (root$k ?v0 )(root$b ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (left$a (tree_ap$ ?v0 ?v1 ))(tree_ap$ (left$b ?v0 )(left$ ?v1 )))):named a55 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (left$a (tree_ap$e ?v0 ?v1 ))(tree_ap$e (left$c ?v0 )(left$a ?v1 )))):named a56 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (left$ (tree_ap$f ?v0 ?v1 ))(tree_ap$f (left$d ?v0 )(left$a ?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (left$ (tree_ap$b ?v0 ?v1 ))(tree_ap$b (left$e ?v0 )(left$ ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_b_fun_b_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (left$a (tree_ap$i ?v0 ?v1 ))(tree_ap$i (left$f ?v0 )(left$b ?v1 )))):named a59 ))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$ )(?v1 B_tree$ ))(= (left$b (tree_ap$j ?v0 ?v1 ))(tree_ap$j (left$g ?v0 )(left$a ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree$ )(?v1 A_tree$ ))(= (left$b (tree_ap$g ?v0 ?v1 ))(tree_ap$g (left$h ?v0 )(left$ ?v1 )))):named a61 ))
(assert (! (forall ((?v0 A_b_fun_a_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (left$ (tree_ap$h ?v0 ?v1 ))(tree_ap$h (left$i ?v0 )(left$b ?v1 )))):named a62 ))
(assert (! (forall ((?v0 A_a_fun_a_b_fun_fun_tree$ )(?v1 A_a_fun_tree$ ))(= (left$b (tree_ap$a ?v0 ?v1 ))(tree_ap$a (left$j ?v0 )(left$e ?v1 )))):named a63 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (left$b (tree_ap$d ?v0 ?v1 ))(tree_ap$d (left$k ?v0 )(left$b ?v1 )))):named a64 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (right$a (tree_ap$ ?v0 ?v1 ))(tree_ap$ (right$b ?v0 )(right$ ?v1 )))):named a65 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (right$a (tree_ap$e ?v0 ?v1 ))(tree_ap$e (right$c ?v0 )(right$a ?v1 )))):named a66 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (right$ (tree_ap$f ?v0 ?v1 ))(tree_ap$f (right$d ?v0 )(right$a ?v1 )))):named a67 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (right$ (tree_ap$b ?v0 ?v1 ))(tree_ap$b (right$e ?v0 )(right$ ?v1 )))):named a68 ))
(assert (! (forall ((?v0 A_b_fun_b_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (right$a (tree_ap$i ?v0 ?v1 ))(tree_ap$i (right$f ?v0 )(right$b ?v1 )))):named a69 ))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$ )(?v1 B_tree$ ))(= (right$b (tree_ap$j ?v0 ?v1 ))(tree_ap$j (right$g ?v0 )(right$a ?v1 )))):named a70 ))
(assert (! (forall ((?v0 A_a_b_fun_fun_tree$ )(?v1 A_tree$ ))(= (right$b (tree_ap$g ?v0 ?v1 ))(tree_ap$g (right$h ?v0 )(right$ ?v1 )))):named a71 ))
(assert (! (forall ((?v0 A_b_fun_a_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (right$ (tree_ap$h ?v0 ?v1 ))(tree_ap$h (right$i ?v0 )(right$b ?v1 )))):named a72 ))
(assert (! (forall ((?v0 A_a_fun_a_b_fun_fun_tree$ )(?v1 A_a_fun_tree$ ))(= (right$b (tree_ap$a ?v0 ?v1 ))(tree_ap$a (right$j ?v0 )(right$e ?v1 )))):named a73 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$ )(?v1 A_b_fun_tree$ ))(= (right$b (tree_ap$d ?v0 ?v1 ))(tree_ap$d (right$k ?v0 )(right$b ?v1 )))):named a74 ))
(assert (! (forall ((?v0 A_b_fun_tree$ ))(= (tree_ap$d (tree_pure$k id$ )?v0 )?v0 )):named a75 ))
(assert (! (forall ((?v0 B_tree$ ))(= (tree_ap$e (tree_pure$e id$a )?v0 )?v0 )):named a76 ))
(assert (! (forall ((?v0 A_tree$ ))(= (tree_ap$b (tree_pure$ id$b )?v0 )?v0 )):named a77 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 A_b_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$ (tree_ap$d (tree_ap$k (tree_pure$m comp$ )?v0 )?v1 )?v2 )(tree_ap$e ?v0 (tree_ap$ ?v1 ?v2 )))):named a78 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$ (tree_ap$a (tree_ap$c (tree_pure$l comp$a )?v0 )?v1 )?v2 )(tree_ap$ ?v0 (tree_ap$b ?v1 ?v2 )))):named a79 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$l (tree_ap$m (tree_pure$n comp$b )?v0 )?v1 )?v2 )(tree_ap$ ?v0 (tree_ap$f ?v1 ?v2 )))):named a80 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$e (tree_ap$n (tree_ap$o (tree_pure$o comp$c )?v0 )?v1 )?v2 )(tree_ap$e ?v0 (tree_ap$e ?v1 ?v2 )))):named a81 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 A_b_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$b (tree_ap$p (tree_ap$q (tree_pure$p comp$d )?v0 )?v1 )?v2 )(tree_ap$f ?v0 (tree_ap$ ?v1 ?v2 )))):named a82 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$b (tree_ap$r (tree_ap$s (tree_pure$q comp$e )?v0 )?v1 )?v2 )(tree_ap$b ?v0 (tree_ap$b ?v1 ?v2 )))):named a83 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$ )(?v1 A_b_fun_a_b_fun_fun_tree$ )(?v2 A_b_fun_tree$ ))(= (tree_ap$d (tree_ap$t (tree_ap$u (tree_pure$r comp$f )?v0 )?v1 )?v2 )(tree_ap$d ?v0 (tree_ap$d ?v1 ?v2 )))):named a84 ))
(assert (! (forall ((?v0 A_a_fun_a_b_fun_fun_tree$ )(?v1 A_b_fun_a_a_fun_fun_tree$ )(?v2 A_b_fun_tree$ ))(= (tree_ap$d (tree_ap$v (tree_ap$w (tree_pure$s comp$g )?v0 )?v1 )?v2 )(tree_ap$a ?v0 (tree_ap$p ?v1 ?v2 )))):named a85 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun_tree$ )(?v1 A_a_fun_a_b_fun_fun_tree$ )(?v2 A_a_fun_tree$ ))(= (tree_ap$a (tree_ap$x (tree_ap$y (tree_pure$t comp$h )?v0 )?v1 )?v2 )(tree_ap$d ?v0 (tree_ap$a ?v1 ?v2 )))):named a86 ))
(assert (! (forall ((?v0 A_a_fun_a_b_fun_fun_tree$ )(?v1 A_a_fun_a_a_fun_fun_tree$ )(?v2 A_a_fun_tree$ ))(= (tree_ap$a (tree_ap$z (tree_ap$aa (tree_pure$u comp$i )?v0 )?v1 )?v2 )(tree_ap$a ?v0 (tree_ap$r ?v1 ?v2 )))):named a87 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a88 ))
(assert (! (forall ((?v0 B$ )(?v1 B_tree$ )(?v2 B_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(= (= (node$b ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a89 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun_tree$ )(?v2 A_b_fun_tree$ )(?v3 A_b_fun$ )(?v4 A_b_fun_tree$ )(?v5 A_b_fun_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a90 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$a ?v1 )))):named a91 ))
(assert (! (forall ((?v0 A_b_fun_b_fun$ )(?v1 A_b_fun_tree$ ))(= (left$a (map_tree$g ?v0 ?v1 ))(map_tree$g ?v0 (left$b ?v1 )))):named a92 ))
(assert (! (forall ((?v0 B_a_b_fun_fun$ )(?v1 B_tree$ ))(= (left$b (map_tree$h ?v0 ?v1 ))(map_tree$h ?v0 (left$a ?v1 )))):named a93 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$ )(?v1 A_b_fun_tree$ ))(= (left$b (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$b ?v1 )))):named a94 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A_tree$ ))(= (left$b (map_tree$i ?v0 ?v1 ))(map_tree$i ?v0 (left$ ?v1 )))):named a95 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$j ?v0 ?v1 ))(map_tree$j ?v0 (left$a ?v1 )))):named a96 ))
(assert (! (forall ((?v0 A_b_fun_a_fun$ )(?v1 A_b_fun_tree$ ))(= (left$ (map_tree$k ?v0 ?v1 ))(map_tree$k ?v0 (left$b ?v1 )))):named a97 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$ ?v1 )))):named a98 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$f ?v0 ?v1 ))(map_tree$f ?v0 (left$ ?v1 )))):named a99 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$a ?v1 )))):named a100 ))
(assert (! (forall ((?v0 A_b_fun_b_fun$ )(?v1 A_b_fun_tree$ ))(= (left$a (map_tree$g ?v0 ?v1 ))(map_tree$g ?v0 (left$b ?v1 )))):named a101 ))
(assert (! (forall ((?v0 B_a_b_fun_fun$ )(?v1 B_tree$ ))(= (left$b (map_tree$h ?v0 ?v1 ))(map_tree$h ?v0 (left$a ?v1 )))):named a102 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$ )(?v1 A_b_fun_tree$ ))(= (left$b (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$b ?v1 )))):named a103 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A_tree$ ))(= (left$b (map_tree$i ?v0 ?v1 ))(map_tree$i ?v0 (left$ ?v1 )))):named a104 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$j ?v0 ?v1 ))(map_tree$j ?v0 (left$a ?v1 )))):named a105 ))
(assert (! (forall ((?v0 A_b_fun_a_fun$ )(?v1 A_b_fun_tree$ ))(= (left$ (map_tree$k ?v0 ?v1 ))(map_tree$k ?v0 (left$b ?v1 )))):named a106 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$ ?v1 )))):named a107 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$f ?v0 ?v1 ))(map_tree$f ?v0 (left$ ?v1 )))):named a108 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (right$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (right$a ?v1 )))):named a109 ))
(assert (! (forall ((?v0 A_b_fun_b_fun$ )(?v1 A_b_fun_tree$ ))(= (right$a (map_tree$g ?v0 ?v1 ))(map_tree$g ?v0 (right$b ?v1 )))):named a110 ))
(assert (! (forall ((?v0 B_a_b_fun_fun$ )(?v1 B_tree$ ))(= (right$b (map_tree$h ?v0 ?v1 ))(map_tree$h ?v0 (right$a ?v1 )))):named a111 ))
(assert (! (forall ((?v0 A_b_fun_a_b_fun_fun$ )(?v1 A_b_fun_tree$ ))(= (right$b (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$b ?v1 )))):named a112 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A_tree$ ))(= (right$b (map_tree$i ?v0 ?v1 ))(map_tree$i ?v0 (right$ ?v1 )))):named a113 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (right$ (map_tree$j ?v0 ?v1 ))(map_tree$j ?v0 (right$a ?v1 )))):named a114 ))
(assert (! (forall ((?v0 A_b_fun_a_fun$ )(?v1 A_b_fun_tree$ ))(= (right$ (map_tree$k ?v0 ?v1 ))(map_tree$k ?v0 (right$b ?v1 )))):named a115 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (right$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (right$ ?v1 )))):named a116 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (right$a (map_tree$f ?v0 ?v1 ))(map_tree$f ?v0 (right$ ?v1 )))):named a117 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (right$a (map_tree$f ?v0 ?v1 ))(map_tree$f ?v0 (right$ ?v1 )))):named a118 ))
(check-sat )
;(get-unsat-core )
