;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort A_b_fun_b_fun$ 0 )
(declare-sort B_a_a_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun$ 0 )
(declare-sort B_a_fun_b_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_b_fun$ 0 )
(declare-sort A_a_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_a_fun_a_fun_fun$ 0 )
(declare-sort A_b_b_a_fun_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort B_a_a_fun_a_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_a_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_a_fun_fun$ 0 )
(declare-sort B_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort A_a_fun_b_a_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_b_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_a_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun_b_b_b_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$ 0 )
(declare-sort A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$ 0 )
(declare-sort A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$ 0 )
(declare-sort B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ 0 )
(declare-sort B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$ 0 )
(declare-codatatypes ()((A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))(B_a_fun_tree$ (node$a (select$ B_a_fun$ )(selecta$ B_a_fun_tree$ )(selectb$ B_a_fun_tree$ )))(B_tree$ (node$b (root$a B$ )(left$a B_tree$ )(right$a B_tree$ )))(A_a_fun_tree$ (node$c (selectc$ A_a_fun$ )(selectd$ A_a_fun_tree$ )(selecte$ A_a_fun_tree$ )))(B_a_fun_a_fun_tree$ (node$d (selectf$ B_a_fun_a_fun$ )(selectg$ B_a_fun_a_fun_tree$ )(selecth$ B_a_fun_a_fun_tree$ )))(A_b_a_fun_fun_tree$ (node$e (selecti$ A_b_a_fun_fun$ )(selectj$ A_b_a_fun_fun_tree$ )(selectk$ A_b_a_fun_fun_tree$ )))(B_a_fun_b_a_fun_fun_tree$ (node$f (selectl$ B_a_fun_b_a_fun_fun$ )(selectm$ B_a_fun_b_a_fun_fun_tree$ )(selectn$ B_a_fun_b_a_fun_fun_tree$ )))(A_b_fun_tree$ (node$g (selecto$ A_b_fun$ )(selectp$ A_b_fun_tree$ )(selectq$ A_b_fun_tree$ )))(B_b_fun_tree$ (node$h (selectr$ B_b_fun$ )(selects$ B_b_fun_tree$ )(selectt$ B_b_fun_tree$ )))(B_a_fun_b_fun_tree$ (node$i (selectu$ B_a_fun_b_fun$ )(selectv$ B_a_fun_b_fun_tree$ )(selectw$ B_a_fun_b_fun_tree$ )))(A_a_a_fun_fun_tree$ (node$j (selectx$ A_a_a_fun_fun$ )(selecty$ A_a_a_fun_fun_tree$ )(selectz$ A_a_a_fun_fun_tree$ )))(B_b_a_fun_fun_tree$ (node$k (selecua$ B_b_a_fun_fun$ )(selecub$ B_b_a_fun_fun_tree$ )(selecuc$ B_b_a_fun_fun_tree$ )))(A_b_fun_b_fun_tree$ (node$l (selecud$ A_b_fun_b_fun$ )(selecue$ A_b_fun_b_fun_tree$ )(selecuf$ A_b_fun_b_fun_tree$ )))(A_b_a_fun_fun_b_a_fun_fun_tree$ (node$m (selecug$ A_b_a_fun_fun_b_a_fun_fun$ )(selecuh$ A_b_a_fun_fun_b_a_fun_fun_tree$ )(selecui$ A_b_a_fun_fun_b_a_fun_fun_tree$ )))(A_a_fun_a_fun_tree$ (node$n (selecuj$ A_a_fun_a_fun$ )(selecuk$ A_a_fun_a_fun_tree$ )(selecul$ A_a_fun_a_fun_tree$ )))(B_b_a_fun_fun_b_a_fun_fun_tree$ (node$o (selecum$ B_b_a_fun_fun_b_a_fun_fun$ )(selecun$ B_b_a_fun_fun_b_a_fun_fun_tree$ )(selecuo$ B_b_a_fun_fun_b_a_fun_fun_tree$ )))(B_a_a_fun_fun_tree$ (node$p (selecup$ B_a_a_fun_fun$ )(selecuq$ B_a_a_fun_fun_tree$ )(selecur$ B_a_a_fun_fun_tree$ )))(B_a_a_fun_fun_a_a_fun_fun_tree$ (node$q (selecus$ B_a_a_fun_fun_a_a_fun_fun$ )(selecut$ B_a_a_fun_fun_a_a_fun_fun_tree$ )(selecuu$ B_a_a_fun_fun_a_a_fun_fun_tree$ )))(B_b_fun_b_fun_tree$ (node$r (selecuv$ B_b_fun_b_fun$ )(selecuw$ B_b_fun_b_fun_tree$ )(selecux$ B_b_fun_b_fun_tree$ )))(B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ (node$s (selecuy$ B_a_a_fun_fun_a_b_a_fun_fun_fun$ )(selecuz$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ )(selecva$ B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ )))(B_b_b_a_fun_fun_fun_tree$ (node$t (selecvb$ B_b_b_a_fun_fun_fun$ )(selecvc$ B_b_b_a_fun_fun_fun_tree$ )(selecvd$ B_b_b_a_fun_fun_fun_tree$ )))(B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ (node$u (selecve$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun$ )(selecvf$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ )(selecvg$ B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ )))(B_a_b_a_fun_fun_fun_tree$ (node$v (selecvh$ B_a_b_a_fun_fun_fun$ )(selecvi$ B_a_b_a_fun_fun_fun_tree$ )(selecvj$ B_a_b_a_fun_fun_fun_tree$ )))(A_b_b_a_fun_fun_fun_tree$ (node$w (selecvk$ A_b_b_a_fun_fun_fun$ )(selecvl$ A_b_b_a_fun_fun_fun_tree$ )(selecvm$ A_b_b_a_fun_fun_fun_tree$ )))(B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ (node$x (selecvn$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun$ )(selecvo$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ )(selecvp$ B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ )))(B_b_a_a_fun_fun_fun_tree$ (node$y (selecvq$ B_b_a_a_fun_fun_fun$ )(selecvr$ B_b_a_a_fun_fun_fun_tree$ )(selecvs$ B_b_a_a_fun_fun_fun_tree$ )))(B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ (node$z (selecvt$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun$ )(selecvu$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ )(selecvv$ B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ )))(B_b_b_fun_fun_tree$ (node$aa (selecvw$ B_b_b_fun_fun$ )(selecvx$ B_b_b_fun_fun_tree$ )(selecvy$ B_b_b_fun_fun_tree$ )))(B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ (node$ab (selecvz$ B_b_b_fun_fun_b_b_b_fun_fun_fun$ )(selecwa$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ )(selecwb$ B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ )))(A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ (node$ac (selecwc$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun$ )(selecwd$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ )(selecwe$ A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ )))(A_a_b_a_fun_fun_fun_tree$ (node$ad (selecwf$ A_a_b_a_fun_fun_fun$ )(selecwg$ A_a_b_a_fun_fun_fun_tree$ )(selecwh$ A_a_b_a_fun_fun_fun_tree$ )))(A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ (node$ae (selecwi$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun$ )(selecwj$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ )(selecwk$ A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ )))(A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ (node$af (selecwl$ A_a_a_fun_fun_a_a_a_fun_fun_fun$ )(selecwm$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ )(selecwn$ A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ )))(A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ (node$ag (selecwo$ A_b_a_fun_fun_b_a_a_fun_fun_fun$ )(selecwp$ A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ )(selecwq$ A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ )))(B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ (node$ah (selecwr$ B_b_a_fun_fun_b_b_a_fun_fun_fun$ )(selecws$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ )(selecwt$ B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ )))(B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ (node$ai (selecwu$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun$ )(selecwv$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )(selecww$ B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )))(B_b_fun_b_a_fun_fun_tree$ (node$aj (selecwx$ B_b_fun_b_a_fun_fun$ )(selecwy$ B_b_fun_b_a_fun_fun_tree$ )(selecwz$ B_b_fun_b_a_fun_fun_tree$ )))(B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ (node$ak (selecxa$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun$ )(selecxb$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )(selecxc$ B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )))(B_a_b_fun_fun_tree$ (node$al (selecxd$ B_a_b_fun_fun$ )(selecxe$ B_a_b_fun_fun_tree$ )(selecxf$ B_a_b_fun_fun_tree$ )))(B_a_fun_b_b_fun_fun_tree$ (node$am (selecxg$ B_a_fun_b_b_fun_fun$ )(selecxh$ B_a_fun_b_b_fun_fun_tree$ )(selecxi$ B_a_fun_b_b_fun_fun_tree$ )))(B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ (node$an (selecxj$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun$ )(selecxk$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ )(selecxl$ B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ )))(B_b_fun_b_b_fun_fun_tree$ (node$ao (selecxm$ B_b_fun_b_b_fun_fun$ )(selecxn$ B_b_fun_b_b_fun_fun_tree$ )(selecxo$ B_b_fun_b_b_fun_fun_tree$ )))(B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ (node$ap (selecxp$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun$ )(selecxq$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ )(selecxr$ B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ )))(A_b_fun_a_a_fun_fun_tree$ (node$aq (selecxs$ A_b_fun_a_a_fun_fun$ )(selecxt$ A_b_fun_a_a_fun_fun_tree$ )(selecxu$ A_b_fun_a_a_fun_fun_tree$ )))(A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ (node$ar (selecxv$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun$ )(selecxw$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ )(selecxx$ A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ )))(A_a_fun_a_a_fun_fun_tree$ (node$as (selecxy$ A_a_fun_a_a_fun_fun$ )(selecxz$ A_a_fun_a_a_fun_fun_tree$ )(selecya$ A_a_fun_a_a_fun_fun_tree$ )))(A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ (node$at (selecyb$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun$ )(selecyc$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ )(selecyd$ A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ )))(B_b_a_fun_a_fun_fun_tree$ (node$au (selecye$ B_b_a_fun_a_fun_fun$ )(selecyf$ B_b_a_fun_a_fun_fun_tree$ )(selecyg$ B_b_a_fun_a_fun_fun_tree$ )))(B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ (node$av (selecyh$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun$ )(selecyi$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ )(selecyj$ B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ )))(B_a_a_fun_a_fun_fun_tree$ (node$aw (selecyk$ B_a_a_fun_a_fun_fun$ )(selecyl$ B_a_a_fun_a_fun_fun_tree$ )(selecym$ B_a_a_fun_a_fun_fun_tree$ )))(B_a_a_fun_fun_b_a_fun_fun_tree$ (node$ax (selecyn$ B_a_a_fun_fun_b_a_fun_fun$ )(selecyo$ B_a_a_fun_fun_b_a_fun_fun_tree$ )(selecyp$ B_a_a_fun_fun_b_a_fun_fun_tree$ )))(B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ (node$ay (selecyq$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun$ )(selecyr$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ )(selecys$ B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ )))(B_b_fun_b_b_a_fun_fun_fun_tree$ (node$az (selecyt$ B_b_fun_b_b_a_fun_fun_fun$ )(selecyu$ B_b_fun_b_b_a_fun_fun_fun_tree$ )(selecyv$ B_b_fun_b_b_a_fun_fun_fun_tree$ )))(B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ (node$ba (selecyw$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun$ )(selecyx$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ )(selecyy$ B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ )))(B_a_fun_b_b_a_fun_fun_fun_tree$ (node$bb (selecyz$ B_a_fun_b_b_a_fun_fun_fun$ )(selecza$ B_a_fun_b_b_a_fun_fun_fun_tree$ )(seleczb$ B_a_fun_b_b_a_fun_fun_fun_tree$ )))(B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ (node$bc (seleczc$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun$ )(seleczd$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ )(selecze$ B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ )))(A_a_fun_b_a_a_fun_fun_fun_tree$ (node$bd (seleczf$ A_a_fun_b_a_a_fun_fun_fun$ )(seleczg$ A_a_fun_b_a_a_fun_fun_fun_tree$ )(seleczh$ A_a_fun_b_a_a_fun_fun_fun_tree$ )))(B_a_fun_a_b_a_fun_fun_fun_tree$ (node$be (seleczi$ B_a_fun_a_b_a_fun_fun_fun$ )(seleczj$ B_a_fun_a_b_a_fun_fun_fun_tree$ )(seleczk$ B_a_fun_a_b_a_fun_fun_fun_tree$ )))(A_b_a_fun_a_fun_fun_tree$ (node$bf (seleczl$ A_b_a_fun_a_fun_fun$ )(seleczm$ A_b_a_fun_a_fun_fun_tree$ )(seleczn$ A_b_a_fun_a_fun_fun_tree$ )))(B_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ (node$bg (seleczo$ B_a_fun_b_a_fun_b_a_fun_fun_fun$ )(seleczp$ B_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )(seleczq$ B_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )))))
(declare-fun c$ ()A$ )
(declare-fun x$ ()B_tree$ )
(declare-fun id$ ()B_b_fun$ )
(declare-fun uu$ ()B_a_fun$ )
(declare-fun id$a ()A_a_fun$ )
(declare-fun id$b ()B_a_fun_b_a_fun_fun$ )
(declare-fun uua$ (A$ )A_b_fun_b_fun$ )
(declare-fun uub$ (A$ )A_b_a_fun_fun_b_a_fun_fun$ )
(declare-fun uuc$ (A$ )A_a_fun_a_fun$ )
(declare-fun uud$ (B$ )B_b_a_fun_fun_b_a_fun_fun$ )
(declare-fun uue$ (B$ )B_a_a_fun_fun_a_a_fun_fun$ )
(declare-fun uuf$ (B$ )B_b_fun_b_fun$ )
(declare-fun uug$ (B$ )B_a_fun_a_fun$ )
(declare-fun uuh$ ()A_a_fun$ )
(declare-fun uui$ ()B_a_fun_b_a_fun_fun$ )
(declare-fun uuj$ (A$ )A_a_fun$ )
(declare-fun uuk$ (B_a_fun$ )A_b_a_fun_fun$ )
(declare-fun uul$ (A$ )B_a_fun_a_fun$ )
(declare-fun uum$ (B_a_fun$ )B_a_fun_b_a_fun_fun$ )
(declare-fun uun$ (A$ )B_a_fun$ )
(declare-fun left$b (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun left$c (A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun left$d (B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun left$e (B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun left$f (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun root$b (A_a_fun_tree$ )A_a_fun$ )
(declare-fun root$c (A_b_a_fun_fun_tree$ )A_b_a_fun_fun$ )
(declare-fun root$d (B_a_fun_a_fun_tree$ )B_a_fun_a_fun$ )
(declare-fun root$e (B_a_fun_b_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun$ )
(declare-fun root$f (B_a_fun_tree$ )B_a_fun$ )
(declare-fun tree_C$ ()B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_I$ ()A_a_fun_tree$ )
(declare-fun tree_K$ ()B_a_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$ ()B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun fun_app$ (B_b_a_fun_fun_b_a_fun_fun$ B_b_a_fun_fun$ )B_a_fun$ )
(declare-fun tree_C$a ()B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$b ()B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$c ()B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$d ()B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ )
(declare-fun tree_C$e ()A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$f ()A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_C$g ()A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ )
(declare-fun tree_C$h ()A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ )
(declare-fun tree_C$i ()B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_I$a ()B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_K$a ()A_a_fun_b_a_a_fun_fun_fun_tree$ )
(declare-fun tree_K$b ()B_b_b_fun_fun_tree$ )
(declare-fun tree_K$c ()B_a_fun_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_K$d ()A_a_a_fun_fun_tree$ )
(declare-fun tree_K$e ()A_b_a_fun_fun_tree$ )
(declare-fun tree_K$f ()A_b_a_fun_a_fun_fun_tree$ )
(declare-fun tree_K$g ()B_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$a ()B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$b ()B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ )
(declare-fun tree_S$c ()B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ )
(declare-fun tree_S$d ()A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$e ()A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ )
(declare-fun tree_S$f ()B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$g ()B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ )
(declare-fun tree_S$h ()B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_S$i ()B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ )
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun fun_app$a (B_b_a_fun_fun$ B$ )B_a_fun$ )
(declare-fun fun_app$b (B_a_a_fun_fun_a_a_fun_fun$ B_a_a_fun_fun$ )A_a_fun$ )
(declare-fun fun_app$c (B_a_a_fun_fun$ B$ )A_a_fun$ )
(declare-fun fun_app$d (B_b_fun_b_fun$ B_b_fun$ )B$ )
(declare-fun fun_app$e (B_b_fun$ B$ )B$ )
(declare-fun fun_app$f (B_a_fun_a_fun$ B_a_fun$ )A$ )
(declare-fun fun_app$g (B_a_fun$ B$ )A$ )
(declare-fun fun_app$h (A_b_a_fun_fun_b_a_fun_fun$ A_b_a_fun_fun$ )B_a_fun$ )
(declare-fun fun_app$i (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$j (A_b_fun_b_fun$ A_b_fun$ )B$ )
(declare-fun fun_app$k (A_b_fun$ A$ )B$ )
(declare-fun fun_app$l (A_a_fun_a_fun$ A_a_fun$ )A$ )
(declare-fun fun_app$m (A_a_fun$ A$ )A$ )
(declare-fun fun_app$n (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$o (B_a_fun_b_fun$ B_a_fun$ )B$ )
(declare-fun fun_app$p (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun map_tree$ (B_b_a_fun_fun$ B_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$a (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$b (B_a_fun_a_fun_tree$ B_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$c (A_b_a_fun_fun_tree$ A_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$d (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$e (A_b_fun_tree$ A_tree$ )B_tree$ )
(declare-fun tree_ap$f (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun tree_ap$g (B_a_fun_b_fun_tree$ B_a_fun_tree$ )B_tree$ )
(declare-fun tree_ap$h (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$i (B_b_a_fun_fun_tree$ B_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$j (A_b_fun_b_fun_tree$ A_b_fun_tree$ )B_tree$ )
(declare-fun tree_ap$k (A_b_a_fun_fun_b_a_fun_fun_tree$ A_b_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$l (A_a_fun_a_fun_tree$ A_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$m (B_b_a_fun_fun_b_a_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$n (B_a_a_fun_fun_tree$ B_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$o (B_a_a_fun_fun_a_a_fun_fun_tree$ B_a_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$p (B_b_fun_b_fun_tree$ B_b_fun_tree$ )B_tree$ )
(declare-fun tree_ap$q (B_a_a_fun_fun_a_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$r (B_b_b_a_fun_fun_fun_tree$ B_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$s (B_b_b_a_fun_fun_fun_b_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$ )B_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$t (A_b_b_a_fun_fun_fun_tree$ A_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$u (B_a_b_a_fun_fun_fun_a_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$ )A_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$v (B_a_b_a_fun_fun_fun_tree$ B_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$w (B_b_a_a_fun_fun_fun_tree$ B_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_ap$x (B_b_a_a_fun_fun_fun_b_b_a_a_fun_fun_fun_fun_tree$ B_b_a_a_fun_fun_fun_tree$ )B_b_a_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$y (B_b_b_fun_fun_tree$ B_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$z (B_b_b_fun_fun_b_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_b_fun_fun_tree$ )
(declare-fun map_tree$a (B_a_a_fun_fun$ B_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$b (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun map_tree$c (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$d (A_b_a_fun_fun$ A_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$e (B_a_fun_a_fun$ B_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$f (B_a_fun_b_a_fun_fun$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$g (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun map_tree$h (A_b_fun$ A_tree$ )B_tree$ )
(declare-fun map_tree$i (B_a_fun_b_fun$ B_a_fun_tree$ )B_tree$ )
(declare-fun map_tree$j (A_a_a_fun_fun$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$aa (A_b_b_a_fun_fun_fun_b_a_b_a_fun_fun_fun_fun_tree$ A_b_b_a_fun_fun_fun_tree$ )B_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$ab (A_a_b_a_fun_fun_fun_tree$ A_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ac (A_a_b_a_fun_fun_fun_a_a_b_a_fun_fun_fun_fun_tree$ A_a_b_a_fun_fun_fun_tree$ )A_a_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$ad (A_a_a_fun_fun_a_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_ap$ae (A_b_a_fun_fun_b_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_ap$af (B_b_a_fun_fun_b_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ag (B_a_a_fun_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ah (B_b_fun_b_a_fun_fun_tree$ B_b_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$ai (B_b_a_fun_fun_b_b_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_fun_tree$ )B_b_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$aj (B_a_fun_b_b_fun_fun_tree$ B_a_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$ak (B_a_b_fun_fun_b_a_fun_b_b_fun_fun_fun_tree$ B_a_b_fun_fun_tree$ )B_a_fun_b_b_fun_fun_tree$ )
(declare-fun tree_ap$al (B_a_b_fun_fun_tree$ B_tree$ )A_b_fun_tree$ )
(declare-fun tree_ap$am (B_b_fun_b_b_fun_fun_tree$ B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$an (B_b_b_fun_fun_b_b_fun_b_b_fun_fun_fun_tree$ B_b_b_fun_fun_tree$ )B_b_fun_b_b_fun_fun_tree$ )
(declare-fun tree_ap$ao (A_b_fun_a_a_fun_fun_tree$ A_b_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$ap (A_b_a_fun_fun_a_b_fun_a_a_fun_fun_fun_tree$ A_b_a_fun_fun_tree$ )A_b_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$aq (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$ar (A_a_a_fun_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_ap$as (B_b_a_fun_a_fun_fun_b_b_a_fun_fun_b_a_fun_fun_fun_tree$ B_b_a_fun_a_fun_fun_tree$ )B_b_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$at (B_b_a_fun_a_fun_fun_tree$ B_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_ap$au (B_a_a_fun_fun_b_a_fun_fun_tree$ B_a_a_fun_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$av (B_a_a_fun_a_fun_fun_b_a_a_fun_fun_b_a_fun_fun_fun_tree$ B_a_a_fun_a_fun_fun_tree$ )B_a_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_ap$aw (B_a_a_fun_a_fun_fun_tree$ B_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_ap$ax (B_b_fun_b_b_a_fun_fun_fun_tree$ B_b_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ay (B_b_b_a_fun_fun_fun_b_b_fun_b_b_a_fun_fun_fun_fun_tree$ B_b_b_a_fun_fun_fun_tree$ )B_b_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$az (B_a_fun_b_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_ap$ba (B_a_b_a_fun_fun_fun_b_a_fun_b_b_a_fun_fun_fun_fun_tree$ B_a_b_a_fun_fun_fun_tree$ )B_a_fun_b_b_a_fun_fun_fun_tree$ )
(declare-fun tree_ap$bb (A_a_fun_b_a_a_fun_fun_fun_tree$ A_a_fun_tree$ )B_a_a_fun_fun_tree$ )
(declare-fun tree_ap$bc (B_a_fun_a_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_ap$bd (A_b_a_fun_a_fun_fun_tree$ A_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_ap$be (B_a_fun_b_a_fun_b_a_fun_fun_fun_tree$ B_a_fun_tree$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$ (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$a (A$ )A_tree$ )
(declare-fun tree_pure$b (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$c (B$ )B_tree$ )
(declare-fun tree_pure$d (B_a_fun_a_fun$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_pure$e (A_b_a_fun_fun$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_pure$f (B_a_fun_b_a_fun_fun$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$g (A_b_fun$ )A_b_fun_tree$ )
(declare-fun tree_pure$h (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$i (B_a_fun_b_fun$ )B_a_fun_b_fun_tree$ )
(declare-fun tree_pure$j (A_a_a_fun_fun$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_pure$k (B_b_a_fun_fun$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_pure$l (A_b_fun_b_fun$ )A_b_fun_b_fun_tree$ )
(declare-fun tree_pure$m (A_b_a_fun_fun_b_a_fun_fun$ )A_b_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$n (A_a_fun_a_fun$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_pure$o (B_b_a_fun_fun_b_a_fun_fun$ )B_b_a_fun_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$p (B_a_a_fun_fun_a_a_fun_fun$ )B_a_a_fun_fun_a_a_fun_fun_tree$ )
(declare-fun tree_pure$q (B_b_fun_b_fun$ )B_b_fun_b_fun_tree$ )
(declare-fun tree_pure$r (B_a_a_fun_fun$ )B_a_a_fun_fun_tree$ )
(assert (! (forall ((?v0 B$ )(?v1 B_b_a_fun_fun$ ))(! (= (fun_app$ (uud$ ?v0 )?v1 )(fun_app$a ?v1 ?v0 )):pattern ((fun_app$ (uud$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 B$ )(?v1 B_a_a_fun_fun$ ))(! (= (fun_app$b (uue$ ?v0 )?v1 )(fun_app$c ?v1 ?v0 )):pattern ((fun_app$b (uue$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B_b_fun$ ))(! (= (fun_app$d (uuf$ ?v0 )?v1 )(fun_app$e ?v1 ?v0 )):pattern ((fun_app$d (uuf$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 B$ )(?v1 B_a_fun$ ))(! (= (fun_app$f (uug$ ?v0 )?v1 )(fun_app$g ?v1 ?v0 )):pattern ((fun_app$f (uug$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_a_fun_fun$ ))(! (= (fun_app$h (uub$ ?v0 )?v1 )(fun_app$i ?v1 ?v0 )):pattern ((fun_app$h (uub$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_fun$ ))(! (= (fun_app$j (uua$ ?v0 )?v1 )(fun_app$k ?v1 ?v0 )):pattern ((fun_app$j (uua$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_a_fun$ ))(! (= (fun_app$l (uuc$ ?v0 )?v1 )(fun_app$m ?v1 ?v0 )):pattern ((fun_app$l (uuc$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun$ ))(! (= (fun_app$n (uum$ ?v0 )?v1 )?v0 ):pattern ((fun_app$n (uum$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A$ ))(! (= (fun_app$i (uuk$ ?v0 )?v1 )?v0 ):pattern ((fun_app$i (uuk$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 B_a_fun$ ))(! (= (fun_app$f (uul$ ?v0 )?v1 )?v0 ):pattern ((fun_app$f (uul$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ ))(! (= (fun_app$g (uun$ ?v0 )?v1 )?v0 ):pattern ((fun_app$g (uun$ ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$m (uuj$ ?v0 )?v1 )?v0 ):pattern ((fun_app$m (uuj$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 B_a_fun$ ))(! (= (fun_app$n uui$ ?v0 )?v0 ):pattern ((fun_app$n uui$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$m uuh$ ?v0 )?v0 ):pattern ((fun_app$m uuh$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$g uu$ ?v0 )c$ ):pattern ((fun_app$g uu$ ?v0 )))):named a14 ))
(assert (! (not (= (tree_ap$ (tree_pure$ uu$ )x$ )(tree_pure$a c$ ))):named a15 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (tree_ap$a (tree_pure$b ?v0 )(tree_pure$a ?v1 ))(tree_pure$a (fun_app$m ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (tree_ap$ (tree_pure$ ?v0 )(tree_pure$c ?v1 ))(tree_pure$a (fun_app$g ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$b (tree_pure$d ?v0 )(tree_pure$ ?v1 ))(tree_pure$a (fun_app$f ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ ))(= (tree_ap$c (tree_pure$e ?v0 )(tree_pure$a ?v1 ))(tree_pure$ (fun_app$i ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$d (tree_pure$f ?v0 )(tree_pure$ ?v1 ))(tree_pure$ (fun_app$n ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (tree_ap$e (tree_pure$g ?v0 )(tree_pure$a ?v1 ))(tree_pure$c (fun_app$k ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (tree_ap$f (tree_pure$h ?v0 )(tree_pure$c ?v1 ))(tree_pure$c (fun_app$e ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$g (tree_pure$i ?v0 )(tree_pure$ ?v1 ))(tree_pure$c (fun_app$o ?v0 ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (tree_ap$h (tree_pure$j ?v0 )(tree_pure$a ?v1 ))(tree_pure$b (fun_app$p ?v0 ?v1 )))):named a24 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$i (tree_pure$k ?v0 )(tree_pure$c ?v1 ))(tree_pure$ (fun_app$a ?v0 ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A$ ))(= (tree_ap$e ?v0 (tree_pure$a ?v1 ))(tree_ap$j (tree_pure$l (uua$ ?v1 ))?v0 ))):named a26 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A$ ))(= (tree_ap$c ?v0 (tree_pure$a ?v1 ))(tree_ap$k (tree_pure$m (uub$ ?v1 ))?v0 ))):named a27 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A$ ))(= (tree_ap$a ?v0 (tree_pure$a ?v1 ))(tree_ap$l (tree_pure$n (uuc$ ?v1 ))?v0 ))):named a28 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B$ ))(= (tree_ap$i ?v0 (tree_pure$c ?v1 ))(tree_ap$m (tree_pure$o (uud$ ?v1 ))?v0 ))):named a29 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B$ ))(= (tree_ap$n ?v0 (tree_pure$c ?v1 ))(tree_ap$o (tree_pure$p (uue$ ?v1 ))?v0 ))):named a30 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B$ ))(= (tree_ap$f ?v0 (tree_pure$c ?v1 ))(tree_ap$p (tree_pure$q (uuf$ ?v1 ))?v0 ))):named a31 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B$ ))(= (tree_ap$ ?v0 (tree_pure$c ?v1 ))(tree_ap$b (tree_pure$d (uug$ ?v1 ))?v0 ))):named a32 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$c ?v0 (tree_pure$a ?v2 ))(tree_ap$c ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a33 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A$ ))(= (tree_ap$a ?v0 (tree_pure$a ?v2 ))(tree_ap$a ?v1 (tree_pure$a ?v2 ))))(= ?v0 ?v1 ))):named a34 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$i ?v0 (tree_pure$c ?v2 ))(tree_ap$i ?v1 (tree_pure$c ?v2 ))))(= ?v0 ?v1 ))):named a35 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_a_fun_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$n ?v0 (tree_pure$c ?v2 ))(tree_ap$n ?v1 (tree_pure$c ?v2 ))))(= ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$f ?v0 (tree_pure$c ?v2 ))(tree_ap$f ?v1 (tree_pure$c ?v2 ))))(= ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B$ ))(= (tree_ap$ ?v0 (tree_pure$c ?v2 ))(tree_ap$ ?v1 (tree_pure$c ?v2 ))))(= ?v0 ?v1 ))):named a38 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$i ?v0 ?v2 )(tree_ap$i ?v1 ?v2 )))(= ?v0 ?v1 ))):named a39 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_a_fun_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$n ?v0 ?v2 )(tree_ap$n ?v1 ?v2 )))(= ?v0 ?v1 ))):named a40 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_b_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$f ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))(= ?v0 ?v1 ))):named a41 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_a_fun_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$c ?v0 ?v2 )(tree_ap$c ?v1 ?v2 )))(= ?v0 ?v1 ))):named a42 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(=> (forall ((?v2 A_tree$ ))(= (tree_ap$a ?v0 ?v2 )(tree_ap$a ?v1 ?v2 )))(= ?v0 ?v1 ))):named a43 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(=> (forall ((?v2 B_tree$ ))(= (tree_ap$ ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))(= ?v0 ?v1 ))):named a44 ))
(assert (! (= (tree_pure$b uuh$ )tree_I$ ):named a45 ))
(assert (! (= (tree_pure$f uui$ )tree_I$a ):named a46 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 A_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$c (tree_ap$q tree_C$ ?v0 )?v1 )?v2 )(tree_ap$a (tree_ap$n ?v0 ?v2 )?v1 ))):named a47 ))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$i (tree_ap$r (tree_ap$s tree_C$a ?v0 )?v1 )?v2 )(tree_ap$i (tree_ap$r ?v0 ?v2 )?v1 ))):named a48 ))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$ )(?v1 A_tree$ )(?v2 B_tree$ ))(= (tree_ap$i (tree_ap$t (tree_ap$u tree_C$b ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$v ?v0 ?v2 )?v1 ))):named a49 ))
(assert (! (forall ((?v0 B_b_a_a_fun_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$n (tree_ap$w (tree_ap$x tree_C$c ?v0 )?v1 )?v2 )(tree_ap$n (tree_ap$w ?v0 ?v2 )?v1 ))):named a50 ))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$f (tree_ap$y (tree_ap$z tree_C$d ?v0 )?v1 )?v2 )(tree_ap$f (tree_ap$y ?v0 ?v2 )?v1 ))):named a51 ))
(assert (! (forall ((?v0 A_b_b_a_fun_fun_fun_tree$ )(?v1 B_tree$ )(?v2 A_tree$ ))(= (tree_ap$c (tree_ap$v (tree_ap$aa tree_C$e ?v0 )?v1 )?v2 )(tree_ap$i (tree_ap$t ?v0 ?v2 )?v1 ))):named a52 ))
(assert (! (forall ((?v0 A_a_b_a_fun_fun_fun_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(= (tree_ap$c (tree_ap$ab (tree_ap$ac tree_C$f ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$ab ?v0 ?v2 )?v1 ))):named a53 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_tree$ )(?v2 A_tree$ ))(= (tree_ap$a (tree_ap$h (tree_ap$ad tree_C$g ?v0 )?v1 )?v2 )(tree_ap$a (tree_ap$h ?v0 ?v2 )?v1 ))):named a54 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 B_tree$ )(?v2 A_tree$ ))(= (tree_ap$a (tree_ap$n (tree_ap$ae tree_C$h ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$c ?v0 ?v2 )?v1 ))):named a55 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$i (tree_ap$af tree_C$i ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$i ?v0 ?v2 )?v1 ))):named a56 ))
(assert (! (forall ((?v0 B_a_a_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$d (tree_ap$ag tree_S$ ?v0 )?v1 )?v2 )(tree_ap$a (tree_ap$n ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a57 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$ah (tree_ap$ai tree_S$a ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$i ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))):named a58 ))
(assert (! (forall ((?v0 B_a_b_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$f (tree_ap$aj (tree_ap$ak tree_S$b ?v0 )?v1 )?v2 )(tree_ap$e (tree_ap$al ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a59 ))
(assert (! (forall ((?v0 B_b_b_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$f (tree_ap$am (tree_ap$an tree_S$c ?v0 )?v1 )?v2 )(tree_ap$f (tree_ap$y ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))):named a60 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_b_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$a (tree_ap$ao (tree_ap$ap tree_S$d ?v0 )?v1 )?v2 )(tree_ap$ (tree_ap$c ?v0 ?v2 )(tree_ap$e ?v1 ?v2 )))):named a61 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_a_fun_tree$ )(?v2 A_tree$ ))(= (tree_ap$a (tree_ap$aq (tree_ap$ar tree_S$e ?v0 )?v1 )?v2 )(tree_ap$a (tree_ap$h ?v0 ?v2 )(tree_ap$a ?v1 ?v2 )))):named a62 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun_tree$ )(?v1 B_b_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$m (tree_ap$as tree_S$f ?v0 )?v1 )?v2 )(tree_ap$b (tree_ap$at ?v0 ?v2 )(tree_ap$i ?v1 ?v2 )))):named a63 ))
(assert (! (forall ((?v0 B_a_a_fun_a_fun_fun_tree$ )(?v1 B_a_a_fun_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$ (tree_ap$au (tree_ap$av tree_S$g ?v0 )?v1 )?v2 )(tree_ap$l (tree_ap$aw ?v0 ?v2 )(tree_ap$n ?v1 ?v2 )))):named a64 ))
(assert (! (forall ((?v0 B_b_b_a_fun_fun_fun_tree$ )(?v1 B_b_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$i (tree_ap$ax (tree_ap$ay tree_S$h ?v0 )?v1 )?v2 )(tree_ap$i (tree_ap$r ?v0 ?v2 )(tree_ap$f ?v1 ?v2 )))):named a65 ))
(assert (! (forall ((?v0 B_a_b_a_fun_fun_fun_tree$ )(?v1 B_a_fun_tree$ )(?v2 B_tree$ ))(= (tree_ap$i (tree_ap$az (tree_ap$ba tree_S$i ?v0 )?v1 )?v2 )(tree_ap$c (tree_ap$v ?v0 ?v2 )(tree_ap$ ?v1 ?v2 )))):named a66 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$i (tree_ap$az tree_K$ ?v0 )?v1 )?v0 )):named a67 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 B_tree$ ))(= (tree_ap$n (tree_ap$bb tree_K$a ?v0 )?v1 )?v0 )):named a68 ))
(assert (! (forall ((?v0 B_tree$ )(?v1 B_tree$ ))(= (tree_ap$f (tree_ap$y tree_K$b ?v0 )?v1 )?v0 )):named a69 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 A_tree$ ))(= (tree_ap$c (tree_ap$bc tree_K$c ?v0 )?v1 )?v0 )):named a70 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (tree_ap$a (tree_ap$h tree_K$d ?v0 )?v1 )?v0 )):named a71 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_ap$c tree_K$e ?v0 )?v1 )?v0 )):named a72 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$n (tree_pure$r ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$c (fun_app$c ?v0 ?v1 )(tree_ap$n (tree_pure$r ?v0 )?v2 )(tree_ap$n (tree_pure$r ?v0 )?v3 )))):named a73 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$f (tree_pure$h ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$b (fun_app$e ?v0 ?v1 )(tree_ap$f (tree_pure$h ?v0 )?v2 )(tree_ap$f (tree_pure$h ?v0 )?v3 )))):named a74 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$i (tree_pure$k ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$a (fun_app$a ?v0 ?v1 )(tree_ap$i (tree_pure$k ?v0 )?v2 )(tree_ap$i (tree_pure$k ?v0 )?v3 )))):named a75 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$e (tree_pure$g ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$b (fun_app$k ?v0 ?v1 )(tree_ap$e (tree_pure$g ?v0 )?v2 )(tree_ap$e (tree_pure$g ?v0 )?v3 )))):named a76 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$g (tree_pure$i ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$b (fun_app$o ?v0 ?v1 )(tree_ap$g (tree_pure$i ?v0 )?v2 )(tree_ap$g (tree_pure$i ?v0 )?v3 )))):named a77 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$a (tree_pure$b ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$ (fun_app$m ?v0 ?v1 )(tree_ap$a (tree_pure$b ?v0 )?v2 )(tree_ap$a (tree_pure$b ?v0 )?v3 )))):named a78 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$c (tree_pure$e ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$a (fun_app$i ?v0 ?v1 )(tree_ap$c (tree_pure$e ?v0 )?v2 )(tree_ap$c (tree_pure$e ?v0 )?v3 )))):named a79 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$b (tree_pure$d ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$ (fun_app$f ?v0 ?v1 )(tree_ap$b (tree_pure$d ?v0 )?v2 )(tree_ap$b (tree_pure$d ?v0 )?v3 )))):named a80 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$d (tree_pure$f ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$a (fun_app$n ?v0 ?v1 )(tree_ap$d (tree_pure$f ?v0 )?v2 )(tree_ap$d (tree_pure$f ?v0 )?v3 )))):named a81 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$ (tree_pure$ ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$ (fun_app$g ?v0 ?v1 )(tree_ap$ (tree_pure$ ?v0 )?v2 )(tree_ap$ (tree_pure$ ?v0 )?v3 )))):named a82 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_tree$ ))(= (tree_ap$i (tree_pure$k ?v0 )?v1 )(map_tree$ ?v0 ?v1 ))):named a83 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B_tree$ ))(= (tree_ap$n (tree_pure$r ?v0 )?v1 )(map_tree$a ?v0 ?v1 ))):named a84 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (tree_ap$f (tree_pure$h ?v0 )?v1 )(map_tree$b ?v0 ?v1 ))):named a85 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (tree_ap$a (tree_pure$b ?v0 )?v1 )(map_tree$c ?v0 ?v1 ))):named a86 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (tree_ap$c (tree_pure$e ?v0 )?v1 )(map_tree$d ?v0 ?v1 ))):named a87 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_tree$ ))(= (tree_ap$b (tree_pure$d ?v0 )?v1 )(map_tree$e ?v0 ?v1 ))):named a88 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_tree$ ))(= (tree_ap$d (tree_pure$f ?v0 )?v1 )(map_tree$f ?v0 ?v1 ))):named a89 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_pure$ ?v0 )?v1 )(map_tree$g ?v0 ?v1 ))):named a90 ))
(assert (! (forall ((?v0 B_tree$ ))(= (tree_ap$f (tree_pure$h id$ )?v0 )?v0 )):named a91 ))
(assert (! (forall ((?v0 A_tree$ ))(= (tree_ap$a (tree_pure$b id$a )?v0 )?v0 )):named a92 ))
(assert (! (forall ((?v0 B_a_fun_tree$ ))(= (tree_ap$d (tree_pure$f id$b )?v0 )?v0 )):named a93 ))
(assert (! (forall ((?v0 A$ ))(= (tree_pure$b (uuj$ ?v0 ))(tree_ap$h tree_K$d (tree_pure$a ?v0 )))):named a94 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (tree_pure$e (uuk$ ?v0 ))(tree_ap$bc tree_K$c (tree_pure$ ?v0 )))):named a95 ))
(assert (! (forall ((?v0 A$ ))(= (tree_pure$d (uul$ ?v0 ))(tree_ap$bd tree_K$f (tree_pure$a ?v0 )))):named a96 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (tree_pure$f (uum$ ?v0 ))(tree_ap$be tree_K$g (tree_pure$ ?v0 )))):named a97 ))
(assert (! (forall ((?v0 A$ ))(= (tree_pure$ (uun$ ?v0 ))(tree_ap$c tree_K$e (tree_pure$a ?v0 )))):named a98 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$c ?v0 (tree_pure$a ?v1 ))(tree_pure$a (fun_app$m ?v0 ?v1 )))):named a99 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ ))(= (map_tree$e ?v0 (tree_pure$ ?v1 ))(tree_pure$a (fun_app$f ?v0 ?v1 )))):named a100 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ ))(= (map_tree$d ?v0 (tree_pure$a ?v1 ))(tree_pure$ (fun_app$i ?v0 ?v1 )))):named a101 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ ))(= (map_tree$f ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$n ?v0 ?v1 )))):named a102 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (map_tree$h ?v0 (tree_pure$a ?v1 ))(tree_pure$c (fun_app$k ?v0 ?v1 )))):named a103 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (map_tree$b ?v0 (tree_pure$c ?v1 ))(tree_pure$c (fun_app$e ?v0 ?v1 )))):named a104 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (map_tree$g ?v0 (tree_pure$c ?v1 ))(tree_pure$a (fun_app$g ?v0 ?v1 )))):named a105 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ ))(= (map_tree$i ?v0 (tree_pure$ ?v1 ))(tree_pure$c (fun_app$o ?v0 ?v1 )))):named a106 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (map_tree$j ?v0 (tree_pure$a ?v1 ))(tree_pure$b (fun_app$p ?v0 ?v1 )))):named a107 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ ))(= (map_tree$ ?v0 (tree_pure$c ?v1 ))(tree_pure$ (fun_app$a ?v0 ?v1 )))):named a108 ))
(assert (! (forall ((?v0 B$ ))(! (= (tree_pure$c ?v0 )(node$b ?v0 (tree_pure$c ?v0 )(tree_pure$c ?v0 ))):pattern ((tree_pure$c ?v0 )))):named a109 ))
(assert (! (forall ((?v0 A_a_fun$ ))(! (= (tree_pure$b ?v0 )(node$c ?v0 (tree_pure$b ?v0 )(tree_pure$b ?v0 ))):pattern ((tree_pure$b ?v0 )))):named a110 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ ))(! (= (tree_pure$e ?v0 )(node$e ?v0 (tree_pure$e ?v0 )(tree_pure$e ?v0 ))):pattern ((tree_pure$e ?v0 )))):named a111 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ ))(! (= (tree_pure$d ?v0 )(node$d ?v0 (tree_pure$d ?v0 )(tree_pure$d ?v0 ))):pattern ((tree_pure$d ?v0 )))):named a112 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ ))(! (= (tree_pure$f ?v0 )(node$f ?v0 (tree_pure$f ?v0 )(tree_pure$f ?v0 ))):pattern ((tree_pure$f ?v0 )))):named a113 ))
(assert (! (forall ((?v0 B_a_fun$ ))(! (= (tree_pure$ ?v0 )(node$a ?v0 (tree_pure$ ?v0 )(tree_pure$ ?v0 ))):pattern ((tree_pure$ ?v0 )))):named a114 ))
(assert (! (forall ((?v0 A$ ))(! (= (tree_pure$a ?v0 )(node$ ?v0 (tree_pure$a ?v0 )(tree_pure$a ?v0 ))):pattern ((tree_pure$a ?v0 )))):named a115 ))
(assert (! (forall ((?v0 B$ ))(= (root$a (tree_pure$c ?v0 ))?v0 )):named a116 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (root$b (tree_pure$b ?v0 ))?v0 )):named a117 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ ))(= (root$c (tree_pure$e ?v0 ))?v0 )):named a118 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ ))(= (root$d (tree_pure$d ?v0 ))?v0 )):named a119 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ ))(= (root$e (tree_pure$f ?v0 ))?v0 )):named a120 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (root$f (tree_pure$ ?v0 ))?v0 )):named a121 ))
(assert (! (forall ((?v0 A$ ))(= (root$ (tree_pure$a ?v0 ))?v0 )):named a122 ))
(assert (! (forall ((?v0 B$ ))(= (left$a (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a123 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (left$b (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a124 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ ))(= (left$c (tree_pure$e ?v0 ))(tree_pure$e ?v0 ))):named a125 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ ))(= (left$d (tree_pure$d ?v0 ))(tree_pure$d ?v0 ))):named a126 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ ))(= (left$e (tree_pure$f ?v0 ))(tree_pure$f ?v0 ))):named a127 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (left$f (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a128 ))
(assert (! (forall ((?v0 A$ ))(= (left$ (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a129 ))
(assert (! (forall ((?v0 B$ )(?v1 B_tree$ )(?v2 B_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(= (= (node$b ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a130 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a131 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a132 ))
(check-sat )
;(get-unsat-core )
