;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun$ 0 )
(declare-sort B_a_fun_b_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_b_fun$ 0 )
(declare-sort A_b_a_fun_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun_b_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_a_fun_a_fun_fun$ 0 )
(declare-sort B_a_fun_a_fun_b_a_fun_a_fun_fun$ 0 )
(declare-codatatypes ()((A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))(B_a_fun_tree$ (node$a (select$ B_a_fun$ )(selecta$ B_a_fun_tree$ )(selectb$ B_a_fun_tree$ )))(B_tree$ (node$b (root$a B$ )(left$a B_tree$ )(right$a B_tree$ )))(B_a_fun_a_fun_tree$ (node$c (selectc$ B_a_fun_a_fun$ )(selectd$ B_a_fun_a_fun_tree$ )(selecte$ B_a_fun_a_fun_tree$ )))(B_b_fun_tree$ (node$d (selectf$ B_b_fun$ )(selectg$ B_b_fun_tree$ )(selecth$ B_b_fun_tree$ )))(B_b_a_fun_a_fun_fun_tree$ (node$e (selecti$ B_b_a_fun_a_fun_fun$ )(selectj$ B_b_a_fun_a_fun_fun_tree$ )(selectk$ B_b_a_fun_a_fun_fun_tree$ )))(B_a_fun_a_fun_b_fun_tree$ (node$f (selectl$ B_a_fun_a_fun_b_fun$ )(selectm$ B_a_fun_a_fun_b_fun_tree$ )(selectn$ B_a_fun_a_fun_b_fun_tree$ )))(B_a_fun_a_fun_b_a_fun_a_fun_fun_tree$ (node$g (selecto$ B_a_fun_a_fun_b_a_fun_a_fun_fun$ )(selectp$ B_a_fun_a_fun_b_a_fun_a_fun_fun_tree$ )(selectq$ B_a_fun_a_fun_b_a_fun_a_fun_fun_tree$ )))(A_b_fun_tree$ (node$h (selectr$ A_b_fun$ )(selects$ A_b_fun_tree$ )(selectt$ A_b_fun_tree$ )))(A_a_fun_tree$ (node$i (selectu$ A_a_fun$ )(selectv$ A_a_fun_tree$ )(selectw$ A_a_fun_tree$ )))(B_b_b_fun_fun_tree$ (node$j (selectx$ B_b_b_fun_fun$ )(selecty$ B_b_b_fun_fun_tree$ )(selectz$ B_b_b_fun_fun_tree$ )))(B_b_a_fun_fun_tree$ (node$k (selecua$ B_b_a_fun_fun$ )(selecub$ B_b_a_fun_fun_tree$ )(selecuc$ B_b_a_fun_fun_tree$ )))(B_a_fun_b_fun_tree$ (node$l (selecud$ B_a_fun_b_fun$ )(selecue$ B_a_fun_b_fun_tree$ )(selecuf$ B_a_fun_b_fun_tree$ )))(A_b_a_fun_fun_tree$ (node$m (selecug$ A_b_a_fun_fun$ )(selecuh$ A_b_a_fun_fun_tree$ )(selecui$ A_b_a_fun_fun_tree$ )))(B_a_fun_b_a_fun_fun_tree$ (node$n (selecuj$ B_a_fun_b_a_fun_fun$ )(selecuk$ B_a_fun_b_a_fun_fun_tree$ )(selecul$ B_a_fun_b_a_fun_fun_tree$ )))(A_b_a_fun_a_fun_fun_tree$ (node$o (selecum$ A_b_a_fun_a_fun_fun$ )(selecun$ A_b_a_fun_a_fun_fun_tree$ )(selecuo$ A_b_a_fun_a_fun_fun_tree$ )))))
(declare-fun t$ ()B_a_fun_tree$ )
(declare-fun x$ ()B$ )
(declare-fun id$ ()B_a_fun_a_fun_b_a_fun_a_fun_fun$ )
(declare-fun uu$ ()B_a_fun_a_fun$ )
(declare-fun id$a ()B_b_fun$ )
(declare-fun left$b (B_a_fun_a_fun_b_fun_tree$ )B_a_fun_a_fun_b_fun_tree$ )
(declare-fun left$c (B_b_a_fun_a_fun_fun_tree$ )B_b_a_fun_a_fun_fun_tree$ )
(declare-fun left$d (B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun left$e (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun left$f (B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun left$g (A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun left$h (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun left$i (B_a_fun_b_fun_tree$ )B_a_fun_b_fun_tree$ )
(declare-fun left$j (B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun left$k (A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun left$l (A_b_a_fun_a_fun_fun_tree$ )A_b_a_fun_a_fun_fun_tree$ )
(declare-fun root$b (B_a_fun_a_fun_b_fun_tree$ )B_a_fun_a_fun_b_fun$ )
(declare-fun root$c (B_b_a_fun_a_fun_fun_tree$ )B_b_a_fun_a_fun_fun$ )
(declare-fun root$d (B_b_fun_tree$ )B_b_fun$ )
(declare-fun root$e (B_a_fun_tree$ )B_a_fun$ )
(declare-fun root$f (B_a_fun_a_fun_tree$ )B_a_fun_a_fun$ )
(declare-fun root$g (A_b_fun_tree$ )A_b_fun$ )
(declare-fun root$h (A_a_fun_tree$ )A_a_fun$ )
(declare-fun root$i (B_a_fun_b_fun_tree$ )B_a_fun_b_fun$ )
(declare-fun root$j (B_b_a_fun_fun_tree$ )B_b_a_fun_fun$ )
(declare-fun root$k (A_b_a_fun_fun_tree$ )A_b_a_fun_fun$ )
(declare-fun root$l (A_b_a_fun_a_fun_fun_tree$ )A_b_a_fun_a_fun_fun$ )
(declare-fun right$b (B_a_fun_a_fun_b_fun_tree$ )B_a_fun_a_fun_b_fun_tree$ )
(declare-fun right$c (B_b_a_fun_a_fun_fun_tree$ )B_b_a_fun_a_fun_fun_tree$ )
(declare-fun right$d (B_b_fun_tree$ )B_b_fun_tree$ )
(declare-fun right$e (B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun right$f (B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun right$g (A_b_fun_tree$ )A_b_fun_tree$ )
(declare-fun right$h (A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun right$i (B_a_fun_b_fun_tree$ )B_a_fun_b_fun_tree$ )
(declare-fun right$j (B_b_a_fun_fun_tree$ )B_b_a_fun_fun_tree$ )
(declare-fun right$k (A_b_a_fun_fun_tree$ )A_b_a_fun_fun_tree$ )
(declare-fun right$l (A_b_a_fun_a_fun_fun_tree$ )A_b_a_fun_a_fun_fun_tree$ )
(declare-fun fun_app$ (B_a_fun_a_fun$ B_a_fun$ )A$ )
(declare-fun tree_ap$ (B_a_fun_tree$ B_tree$ )A_tree$ )
(declare-fun fun_app$a (B_a_fun$ B$ )A$ )
(declare-fun fun_app$b (B_b_fun$ B$ )B$ )
(declare-fun fun_app$c (B_b_a_fun_a_fun_fun$ B$ )B_a_fun_a_fun$ )
(declare-fun fun_app$d (B_a_fun_a_fun_b_fun$ B_a_fun_a_fun$ )B$ )
(declare-fun fun_app$e (B_a_fun_a_fun_b_a_fun_a_fun_fun$ B_a_fun_a_fun$ )B_a_fun_a_fun$ )
(declare-fun fun_app$f (A_b_fun$ A$ )B$ )
(declare-fun fun_app$g (A_a_fun$ A$ )A$ )
(declare-fun fun_app$h (B_b_b_fun_fun$ B$ )B_b_fun$ )
(declare-fun fun_app$i (B_b_a_fun_fun$ B$ )B_a_fun$ )
(declare-fun fun_app$j (B_a_fun_b_fun$ B_a_fun$ )B$ )
(declare-fun fun_app$k (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$l (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$m (A_b_a_fun_a_fun_fun$ A$ )B_a_fun_a_fun$ )
(declare-fun fun_app$n (B_b_fun_b_fun$ B_b_fun$ )B$ )
(declare-fun map_tree$ (B_a_fun_a_fun_b_a_fun_a_fun_fun$ B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_ap$a (B_a_fun_a_fun_tree$ B_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$b (B_b_fun_tree$ B_tree$ )B_tree$ )
(declare-fun tree_ap$c (B_b_a_fun_a_fun_fun_tree$ B_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_ap$d (B_a_fun_a_fun_b_fun_tree$ B_a_fun_a_fun_tree$ )B_tree$ )
(declare-fun tree_ap$e (B_a_fun_a_fun_b_a_fun_a_fun_fun_tree$ B_a_fun_a_fun_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_ap$f (A_b_fun_tree$ A_tree$ )B_tree$ )
(declare-fun tree_ap$g (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun tree_ap$h (B_b_b_fun_fun_tree$ B_tree$ )B_b_fun_tree$ )
(declare-fun tree_ap$i (B_b_a_fun_fun_tree$ B_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$j (B_a_fun_b_fun_tree$ B_a_fun_tree$ )B_tree$ )
(declare-fun tree_ap$k (A_b_a_fun_fun_tree$ A_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$l (B_a_fun_b_a_fun_fun_tree$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_ap$m (A_b_a_fun_a_fun_fun_tree$ A_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun map_tree$a (B_a_fun_a_fun_b_fun$ B_a_fun_a_fun_tree$ )B_tree$ )
(declare-fun map_tree$b (B_b_a_fun_a_fun_fun$ B_tree$ )B_a_fun_a_fun_tree$ )
(declare-fun map_tree$c (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun map_tree$d (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun map_tree$e (B_a_fun_a_fun$ B_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$f (A_b_fun$ A_tree$ )B_tree$ )
(declare-fun map_tree$g (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$h (B_b_b_fun_fun$ B_tree$ )B_b_fun_tree$ )
(declare-fun map_tree$i (B_b_a_fun_fun$ B_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$j (B_b_fun_b_fun$ B_b_fun_tree$ )B_tree$ )
(declare-fun map_tree$k (A_b_a_fun_fun$ A_tree$ )B_a_fun_tree$ )
(declare-fun map_tree$l (B_a_fun_b_a_fun_fun$ B_a_fun_tree$ )B_a_fun_tree$ )
(declare-fun tree_pure$ (B$ )B_tree$ )
(declare-fun tree_pure$a (B_a_fun_a_fun$ )B_a_fun_a_fun_tree$ )
(declare-fun tree_pure$b (B_a_fun$ )B_a_fun_tree$ )
(declare-fun tree_pure$c (A$ )A_tree$ )
(declare-fun tree_pure$d (B_b_fun$ )B_b_fun_tree$ )
(declare-fun tree_pure$e (B_b_a_fun_a_fun_fun$ )B_b_a_fun_a_fun_fun_tree$ )
(declare-fun tree_pure$f (B_a_fun_a_fun_b_fun$ )B_a_fun_a_fun_b_fun_tree$ )
(declare-fun tree_pure$g (B_a_fun_a_fun_b_a_fun_a_fun_fun$ )B_a_fun_a_fun_b_a_fun_a_fun_fun_tree$ )
(declare-fun tree_pure$h (A_b_fun$ )A_b_fun_tree$ )
(declare-fun tree_pure$i (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$j (B_b_b_fun_fun$ )B_b_b_fun_fun_tree$ )
(declare-fun tree_pure$k (B_b_a_fun_fun$ )B_b_a_fun_fun_tree$ )
(declare-fun tree_pure$l (B_a_fun_b_fun$ )B_a_fun_b_fun_tree$ )
(declare-fun tree_pure$m (A_b_a_fun_fun$ )A_b_a_fun_fun_tree$ )
(declare-fun tree_pure$n (B_a_fun_b_a_fun_fun$ )B_a_fun_b_a_fun_fun_tree$ )
(declare-fun tree_pure$o (A_b_a_fun_a_fun_fun$ )A_b_a_fun_a_fun_fun_tree$ )
(assert (! (forall ((?v0 B_a_fun$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$a ?v0 x$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (tree_ap$ t$ (tree_pure$ x$ ))(tree_ap$a (tree_pure$a uu$ )t$ ))):named a1 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (tree_ap$ (tree_pure$b ?v0 )(tree_pure$ ?v1 ))(tree_pure$c (fun_app$a ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (tree_ap$b (tree_pure$d ?v0 )(tree_pure$ ?v1 ))(tree_pure$ (fun_app$b ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ ))(= (tree_ap$a (tree_pure$a ?v0 )(tree_pure$b ?v1 ))(tree_pure$c (fun_app$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$c (tree_pure$e ?v0 )(tree_pure$ ?v1 ))(tree_pure$a (fun_app$c ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_b_fun$ )(?v1 B_a_fun_a_fun$ ))(= (tree_ap$d (tree_pure$f ?v0 )(tree_pure$a ?v1 ))(tree_pure$ (fun_app$d ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_b_a_fun_a_fun_fun$ )(?v1 B_a_fun_a_fun$ ))(= (tree_ap$e (tree_pure$g ?v0 )(tree_pure$a ?v1 ))(tree_pure$a (fun_app$e ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (tree_ap$f (tree_pure$h ?v0 )(tree_pure$c ?v1 ))(tree_pure$ (fun_app$f ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (tree_ap$g (tree_pure$i ?v0 )(tree_pure$c ?v1 ))(tree_pure$c (fun_app$g ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B$ ))(= (tree_ap$h (tree_pure$j ?v0 )(tree_pure$ ?v1 ))(tree_pure$d (fun_app$h ?v0 ?v1 )))):named a10 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ ))(= (tree_ap$i (tree_pure$k ?v0 )(tree_pure$ ?v1 ))(tree_pure$b (fun_app$i ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$ (tree_pure$b ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$ (fun_app$a ?v0 ?v1 )(tree_ap$ (tree_pure$b ?v0 )?v2 )(tree_ap$ (tree_pure$b ?v0 )?v3 )))):named a12 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$a (tree_pure$a ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$ (fun_app$ ?v0 ?v1 )(tree_ap$a (tree_pure$a ?v0 )?v2 )(tree_ap$a (tree_pure$a ?v0 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$g (tree_pure$i ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$ (fun_app$g ?v0 ?v1 )(tree_ap$g (tree_pure$i ?v0 )?v2 )(tree_ap$g (tree_pure$i ?v0 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$f (tree_pure$h ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$b (fun_app$f ?v0 ?v1 )(tree_ap$f (tree_pure$h ?v0 )?v2 )(tree_ap$f (tree_pure$h ?v0 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$b (tree_pure$d ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$b (fun_app$b ?v0 ?v1 )(tree_ap$b (tree_pure$d ?v0 )?v2 )(tree_ap$b (tree_pure$d ?v0 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$j (tree_pure$l ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$b (fun_app$j ?v0 ?v1 )(tree_ap$j (tree_pure$l ?v0 )?v2 )(tree_ap$j (tree_pure$l ?v0 )?v3 )))):named a17 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$k (tree_pure$m ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$a (fun_app$k ?v0 ?v1 )(tree_ap$k (tree_pure$m ?v0 )?v2 )(tree_ap$k (tree_pure$m ?v0 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ )(?v2 B_tree$ )(?v3 B_tree$ ))(= (tree_ap$i (tree_pure$k ?v0 )(node$b ?v1 ?v2 ?v3 ))(node$a (fun_app$i ?v0 ?v1 )(tree_ap$i (tree_pure$k ?v0 )?v2 )(tree_ap$i (tree_pure$k ?v0 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun_tree$ ))(= (tree_ap$l (tree_pure$n ?v0 )(node$a ?v1 ?v2 ?v3 ))(node$a (fun_app$l ?v0 ?v1 )(tree_ap$l (tree_pure$n ?v0 )?v2 )(tree_ap$l (tree_pure$n ?v0 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 A_b_a_fun_a_fun_fun$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ ))(= (tree_ap$m (tree_pure$o ?v0 )(node$ ?v1 ?v2 ?v3 ))(node$c (fun_app$m ?v0 ?v1 )(tree_ap$m (tree_pure$o ?v0 )?v2 )(tree_ap$m (tree_pure$o ?v0 )?v3 )))):named a21 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_b_a_fun_a_fun_fun$ )(?v1 B_a_fun_a_fun_tree$ ))(= (tree_ap$e (tree_pure$g ?v0 )?v1 )(map_tree$ ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_b_fun$ )(?v1 B_a_fun_a_fun_tree$ ))(= (tree_ap$d (tree_pure$f ?v0 )?v1 )(map_tree$a ?v0 ?v1 ))):named a23 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun$ )(?v1 B_tree$ ))(= (tree_ap$c (tree_pure$e ?v0 )?v1 )(map_tree$b ?v0 ?v1 ))):named a24 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (tree_ap$b (tree_pure$d ?v0 )?v1 )(map_tree$c ?v0 ?v1 ))):named a25 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (tree_ap$ (tree_pure$b ?v0 )?v1 )(map_tree$d ?v0 ?v1 ))):named a26 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_tree$ ))(= (tree_ap$a (tree_pure$a ?v0 )?v1 )(map_tree$e ?v0 ?v1 ))):named a27 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ ))(= (tree_ap$e (tree_pure$g id$ )?v0 )?v0 )):named a28 ))
(assert (! (forall ((?v0 B_tree$ ))(= (tree_ap$b (tree_pure$d id$a )?v0 )?v0 )):named a29 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B$ ))(= (map_tree$c ?v0 (tree_pure$ ?v1 ))(tree_pure$ (fun_app$b ?v0 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun$ )(?v1 B$ ))(= (map_tree$b ?v0 (tree_pure$ ?v1 ))(tree_pure$a (fun_app$c ?v0 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_b_fun$ )(?v1 B_a_fun_a_fun$ ))(= (map_tree$a ?v0 (tree_pure$a ?v1 ))(tree_pure$ (fun_app$d ?v0 ?v1 )))):named a32 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_b_a_fun_a_fun_fun$ )(?v1 B_a_fun_a_fun$ ))(= (map_tree$ ?v0 (tree_pure$a ?v1 ))(tree_pure$a (fun_app$e ?v0 ?v1 )))):named a33 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A$ ))(= (map_tree$f ?v0 (tree_pure$c ?v1 ))(tree_pure$ (fun_app$f ?v0 ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$g ?v0 (tree_pure$c ?v1 ))(tree_pure$c (fun_app$g ?v0 ?v1 )))):named a35 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B$ ))(= (map_tree$d ?v0 (tree_pure$ ?v1 ))(tree_pure$c (fun_app$a ?v0 ?v1 )))):named a36 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B$ ))(= (map_tree$h ?v0 (tree_pure$ ?v1 ))(tree_pure$d (fun_app$h ?v0 ?v1 )))):named a37 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ ))(= (map_tree$i ?v0 (tree_pure$ ?v1 ))(tree_pure$b (fun_app$i ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 B_b_fun_b_fun$ )(?v1 B_b_fun$ ))(= (map_tree$j ?v0 (tree_pure$d ?v1 ))(tree_pure$ (fun_app$n ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_b_fun$ ))(= (root$b (tree_pure$f ?v0 ))?v0 )):named a40 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun$ ))(= (root$c (tree_pure$e ?v0 ))?v0 )):named a41 ))
(assert (! (forall ((?v0 B_b_fun$ ))(= (root$d (tree_pure$d ?v0 ))?v0 )):named a42 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (root$e (tree_pure$b ?v0 ))?v0 )):named a43 ))
(assert (! (forall ((?v0 A$ ))(= (root$ (tree_pure$c ?v0 ))?v0 )):named a44 ))
(assert (! (forall ((?v0 B$ ))(= (root$a (tree_pure$ ?v0 ))?v0 )):named a45 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ ))(= (root$f (tree_pure$a ?v0 ))?v0 )):named a46 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_b_fun$ ))(= (left$b (tree_pure$f ?v0 ))(tree_pure$f ?v0 ))):named a47 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun$ ))(= (left$c (tree_pure$e ?v0 ))(tree_pure$e ?v0 ))):named a48 ))
(assert (! (forall ((?v0 B_b_fun$ ))(= (left$d (tree_pure$d ?v0 ))(tree_pure$d ?v0 ))):named a49 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (left$e (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a50 ))
(assert (! (forall ((?v0 A$ ))(= (left$ (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a51 ))
(assert (! (forall ((?v0 B$ ))(= (left$a (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a52 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ ))(= (left$f (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a53 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_b_fun$ ))(= (right$b (tree_pure$f ?v0 ))(tree_pure$f ?v0 ))):named a54 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun$ ))(= (right$c (tree_pure$e ?v0 ))(tree_pure$e ?v0 ))):named a55 ))
(assert (! (forall ((?v0 B_b_fun$ ))(= (right$d (tree_pure$d ?v0 ))(tree_pure$d ?v0 ))):named a56 ))
(assert (! (forall ((?v0 A$ ))(= (right$ (tree_pure$c ?v0 ))(tree_pure$c ?v0 ))):named a57 ))
(assert (! (forall ((?v0 B_a_fun$ ))(= (right$e (tree_pure$b ?v0 ))(tree_pure$b ?v0 ))):named a58 ))
(assert (! (forall ((?v0 B$ ))(= (right$a (tree_pure$ ?v0 ))(tree_pure$ ?v0 ))):named a59 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ ))(= (right$f (tree_pure$a ?v0 ))(tree_pure$a ?v0 ))):named a60 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_b_fun$ ))(! (= (tree_pure$f ?v0 )(node$f ?v0 (tree_pure$f ?v0 )(tree_pure$f ?v0 ))):pattern ((tree_pure$f ?v0 )))):named a61 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun$ ))(! (= (tree_pure$e ?v0 )(node$e ?v0 (tree_pure$e ?v0 )(tree_pure$e ?v0 ))):pattern ((tree_pure$e ?v0 )))):named a62 ))
(assert (! (forall ((?v0 B_b_fun$ ))(! (= (tree_pure$d ?v0 )(node$d ?v0 (tree_pure$d ?v0 )(tree_pure$d ?v0 ))):pattern ((tree_pure$d ?v0 )))):named a63 ))
(assert (! (forall ((?v0 B_a_fun$ ))(! (= (tree_pure$b ?v0 )(node$a ?v0 (tree_pure$b ?v0 )(tree_pure$b ?v0 ))):pattern ((tree_pure$b ?v0 )))):named a64 ))
(assert (! (forall ((?v0 A$ ))(! (= (tree_pure$c ?v0 )(node$ ?v0 (tree_pure$c ?v0 )(tree_pure$c ?v0 ))):pattern ((tree_pure$c ?v0 )))):named a65 ))
(assert (! (forall ((?v0 B$ ))(! (= (tree_pure$ ?v0 )(node$b ?v0 (tree_pure$ ?v0 )(tree_pure$ ?v0 ))):pattern ((tree_pure$ ?v0 )))):named a66 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ ))(! (= (tree_pure$a ?v0 )(node$c ?v0 (tree_pure$a ?v0 )(tree_pure$a ?v0 ))):pattern ((tree_pure$a ?v0 )))):named a67 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$ (fun_app$a ?v0 ?v3 )(tree_ap$ ?v1 ?v4 )(tree_ap$ ?v2 ?v5 ))):pattern ((tree_ap$ (node$a ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a68 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_a_fun_tree$ )(?v2 B_a_fun_a_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(! (= (tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$ (fun_app$ ?v0 ?v3 )(tree_ap$a ?v1 ?v4 )(tree_ap$a ?v2 ?v5 ))):pattern ((tree_ap$a (node$c ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a69 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$g (node$i ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$ (fun_app$g ?v0 ?v3 )(tree_ap$g ?v1 ?v4 )(tree_ap$g ?v2 ?v5 ))):pattern ((tree_ap$g (node$i ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a70 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun_tree$ )(?v2 A_b_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$f (node$h ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$b (fun_app$f ?v0 ?v3 )(tree_ap$f ?v1 ?v4 )(tree_ap$f ?v2 ?v5 ))):pattern ((tree_ap$f (node$h ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a71 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun_tree$ )(?v2 B_b_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$b (node$d ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$b (fun_app$b ?v0 ?v3 )(tree_ap$b ?v1 ?v4 )(tree_ap$b ?v2 ?v5 ))):pattern ((tree_ap$b (node$d ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a72 ))
(assert (! (forall ((?v0 B_a_fun_b_fun$ )(?v1 B_a_fun_b_fun_tree$ )(?v2 B_a_fun_b_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(! (= (tree_ap$j (node$l ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$b (fun_app$j ?v0 ?v3 )(tree_ap$j ?v1 ?v4 )(tree_ap$j ?v2 ?v5 ))):pattern ((tree_ap$j (node$l ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a73 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_b_a_fun_fun_tree$ )(?v2 A_b_a_fun_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$k (node$m ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$a (fun_app$k ?v0 ?v3 )(tree_ap$k ?v1 ?v4 )(tree_ap$k ?v2 ?v5 ))):pattern ((tree_ap$k (node$m ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a74 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_b_a_fun_fun_tree$ )(?v2 B_b_a_fun_fun_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(! (= (tree_ap$i (node$k ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(node$a (fun_app$i ?v0 ?v3 )(tree_ap$i ?v1 ?v4 )(tree_ap$i ?v2 ?v5 ))):pattern ((tree_ap$i (node$k ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))))):named a75 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_b_a_fun_fun_tree$ )(?v2 B_a_fun_b_a_fun_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(! (= (tree_ap$l (node$n ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(node$a (fun_app$l ?v0 ?v3 )(tree_ap$l ?v1 ?v4 )(tree_ap$l ?v2 ?v5 ))):pattern ((tree_ap$l (node$n ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))))):named a76 ))
(assert (! (forall ((?v0 A_b_a_fun_a_fun_fun$ )(?v1 A_b_a_fun_a_fun_fun_tree$ )(?v2 A_b_a_fun_a_fun_fun_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(! (= (tree_ap$m (node$o ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(node$c (fun_app$m ?v0 ?v3 )(tree_ap$m ?v1 ?v4 )(tree_ap$m ?v2 ?v5 ))):pattern ((tree_ap$m (node$o ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))))):named a77 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (root$ (tree_ap$ ?v0 ?v1 ))(fun_app$a (root$e ?v0 )(root$a ?v1 )))):named a78 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (root$ (tree_ap$a ?v0 ?v1 ))(fun_app$ (root$f ?v0 )(root$e ?v1 )))):named a79 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (root$a (tree_ap$b ?v0 ?v1 ))(fun_app$b (root$d ?v0 )(root$a ?v1 )))):named a80 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (root$a (tree_ap$f ?v0 ?v1 ))(fun_app$f (root$g ?v0 )(root$ ?v1 )))):named a81 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (root$ (tree_ap$g ?v0 ?v1 ))(fun_app$g (root$h ?v0 )(root$ ?v1 )))):named a82 ))
(assert (! (forall ((?v0 B_a_fun_b_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (root$a (tree_ap$j ?v0 ?v1 ))(fun_app$j (root$i ?v0 )(root$e ?v1 )))):named a83 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (root$e (tree_ap$i ?v0 ?v1 ))(fun_app$i (root$j ?v0 )(root$a ?v1 )))):named a84 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (root$e (tree_ap$k ?v0 ?v1 ))(fun_app$k (root$k ?v0 )(root$ ?v1 )))):named a85 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (root$f (tree_ap$c ?v0 ?v1 ))(fun_app$c (root$c ?v0 )(root$a ?v1 )))):named a86 ))
(assert (! (forall ((?v0 A_b_a_fun_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (root$f (tree_ap$m ?v0 ?v1 ))(fun_app$m (root$l ?v0 )(root$ ?v1 )))):named a87 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (left$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (left$e ?v0 )(left$a ?v1 )))):named a88 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (left$ (tree_ap$a ?v0 ?v1 ))(tree_ap$a (left$f ?v0 )(left$e ?v1 )))):named a89 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (left$a (tree_ap$b ?v0 ?v1 ))(tree_ap$b (left$d ?v0 )(left$a ?v1 )))):named a90 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (left$a (tree_ap$f ?v0 ?v1 ))(tree_ap$f (left$g ?v0 )(left$ ?v1 )))):named a91 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (left$ (tree_ap$g ?v0 ?v1 ))(tree_ap$g (left$h ?v0 )(left$ ?v1 )))):named a92 ))
(assert (! (forall ((?v0 B_a_fun_b_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (left$a (tree_ap$j ?v0 ?v1 ))(tree_ap$j (left$i ?v0 )(left$e ?v1 )))):named a93 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (left$e (tree_ap$i ?v0 ?v1 ))(tree_ap$i (left$j ?v0 )(left$a ?v1 )))):named a94 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (left$e (tree_ap$k ?v0 ?v1 ))(tree_ap$k (left$k ?v0 )(left$ ?v1 )))):named a95 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (left$f (tree_ap$c ?v0 ?v1 ))(tree_ap$c (left$c ?v0 )(left$a ?v1 )))):named a96 ))
(assert (! (forall ((?v0 A_b_a_fun_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (left$f (tree_ap$m ?v0 ?v1 ))(tree_ap$m (left$l ?v0 )(left$ ?v1 )))):named a97 ))
(assert (! (forall ((?v0 B_a_fun_tree$ )(?v1 B_tree$ ))(= (right$ (tree_ap$ ?v0 ?v1 ))(tree_ap$ (right$e ?v0 )(right$a ?v1 )))):named a98 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (right$ (tree_ap$a ?v0 ?v1 ))(tree_ap$a (right$f ?v0 )(right$e ?v1 )))):named a99 ))
(assert (! (forall ((?v0 B_b_fun_tree$ )(?v1 B_tree$ ))(= (right$a (tree_ap$b ?v0 ?v1 ))(tree_ap$b (right$d ?v0 )(right$a ?v1 )))):named a100 ))
(assert (! (forall ((?v0 A_b_fun_tree$ )(?v1 A_tree$ ))(= (right$a (tree_ap$f ?v0 ?v1 ))(tree_ap$f (right$g ?v0 )(right$ ?v1 )))):named a101 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (right$ (tree_ap$g ?v0 ?v1 ))(tree_ap$g (right$h ?v0 )(right$ ?v1 )))):named a102 ))
(assert (! (forall ((?v0 B_a_fun_b_fun_tree$ )(?v1 B_a_fun_tree$ ))(= (right$a (tree_ap$j ?v0 ?v1 ))(tree_ap$j (right$i ?v0 )(right$e ?v1 )))):named a103 ))
(assert (! (forall ((?v0 B_b_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (right$e (tree_ap$i ?v0 ?v1 ))(tree_ap$i (right$j ?v0 )(right$a ?v1 )))):named a104 ))
(assert (! (forall ((?v0 A_b_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (right$e (tree_ap$k ?v0 ?v1 ))(tree_ap$k (right$k ?v0 )(right$ ?v1 )))):named a105 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun_tree$ )(?v1 B_tree$ ))(= (right$f (tree_ap$c ?v0 ?v1 ))(tree_ap$c (right$c ?v0 )(right$a ?v1 )))):named a106 ))
(assert (! (forall ((?v0 A_b_a_fun_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (right$f (tree_ap$m ?v0 ?v1 ))(tree_ap$m (right$l ?v0 )(right$ ?v1 )))):named a107 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun_tree$ )(?v2 B_a_fun_tree$ )(?v3 B_a_fun$ )(?v4 B_a_fun_tree$ )(?v5 B_a_fun_tree$ ))(= (= (node$a ?v0 ?v1 ?v2 )(node$a ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a108 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a109 ))
(assert (! (forall ((?v0 B$ )(?v1 B_tree$ )(?v2 B_tree$ )(?v3 B$ )(?v4 B_tree$ )(?v5 B_tree$ ))(= (= (node$b ?v0 ?v1 ?v2 )(node$b ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a110 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_a_fun_tree$ )(?v2 B_a_fun_a_fun_tree$ )(?v3 B_a_fun_a_fun$ )(?v4 B_a_fun_a_fun_tree$ )(?v5 B_a_fun_a_fun_tree$ ))(= (= (node$c ?v0 ?v1 ?v2 )(node$c ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a111 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_tree$ ))(= (left$e (map_tree$k ?v0 ?v1 ))(map_tree$k ?v0 (left$ ?v1 )))):named a112 ))
(assert (! (forall ((?v0 B_a_fun_b_a_fun_fun$ )(?v1 B_a_fun_tree$ ))(= (left$e (map_tree$l ?v0 ?v1 ))(map_tree$l ?v0 (left$e ?v1 )))):named a113 ))
(assert (! (forall ((?v0 B_a_fun_a_fun_b_fun$ )(?v1 B_a_fun_a_fun_tree$ ))(= (left$a (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$f ?v1 )))):named a114 ))
(assert (! (forall ((?v0 B_a_fun_a_fun$ )(?v1 B_a_fun_tree$ ))(= (left$ (map_tree$e ?v0 ?v1 ))(map_tree$e ?v0 (left$e ?v1 )))):named a115 ))
(assert (! (forall ((?v0 B_b_a_fun_a_fun_fun$ )(?v1 B_tree$ ))(= (left$f (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$a ?v1 )))):named a116 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$a ?v1 )))):named a117 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$d ?v0 ?v1 ))(map_tree$d ?v0 (left$a ?v1 )))):named a118 ))
(check-sat )
;(get-unsat-core )
