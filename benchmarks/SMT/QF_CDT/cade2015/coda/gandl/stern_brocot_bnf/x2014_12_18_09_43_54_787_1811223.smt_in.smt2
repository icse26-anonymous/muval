;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_a_fun_set$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun$ 0 )
(declare-sort A_tree_bool_fun$ 0 )
(declare-sort A_a_a_fun_fun_set$ 0 )
(declare-sort A_a_fun_a_fun_set$ 0 )
(declare-sort A_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_a_a_fun_a_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_fun_a_fun$ 0 )
(declare-sort A_a_fun_tree_bool_fun$ 0 )
(declare-sort A_a_tree_bool_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_set$ 0 )
(declare-sort A_a_a_fun_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun_a_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_tree_bool_fun_fun$ 0 )
(declare-codatatypes ()((A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))(A_a_fun_a_a_fun_fun_tree$ (node$a (select$ A_a_fun_a_a_fun_fun$ )(selecta$ A_a_fun_a_a_fun_fun_tree$ )(selectb$ A_a_fun_a_a_fun_fun_tree$ )))(A_a_a_fun_fun_tree$ (node$b (selectc$ A_a_a_fun_fun$ )(selectd$ A_a_a_fun_fun_tree$ )(selecte$ A_a_a_fun_fun_tree$ )))(A_a_fun_a_fun_tree$ (node$c (selectf$ A_a_fun_a_fun$ )(selectg$ A_a_fun_a_fun_tree$ )(selecth$ A_a_fun_a_fun_tree$ )))(A_a_fun_tree$ (node$d (selecti$ A_a_fun$ )(selectj$ A_a_fun_tree$ )(selectk$ A_a_fun_tree$ )))(A_a_a_fun_fun_a_fun_tree$ (node$e (selectl$ A_a_a_fun_fun_a_fun$ )(selectm$ A_a_a_fun_fun_a_fun_tree$ )(selectn$ A_a_a_fun_fun_a_fun_tree$ )))(A_a_fun_a_fun_a_fun_tree$ (node$f (selecto$ A_a_fun_a_fun_a_fun$ )(selectp$ A_a_fun_a_fun_a_fun_tree$ )(selectq$ A_a_fun_a_fun_a_fun_tree$ )))(A_a_a_a_fun_fun_fun_tree$ (node$g (selectr$ A_a_a_a_fun_fun_fun$ )(selects$ A_a_a_a_fun_fun_fun_tree$ )(selectt$ A_a_a_a_fun_fun_fun_tree$ )))(A_a_a_fun_a_fun_fun_tree$ (node$h (selectu$ A_a_a_fun_a_fun_fun$ )(selectv$ A_a_a_fun_a_fun_fun_tree$ )(selectw$ A_a_a_fun_a_fun_fun_tree$ )))(A_a_fun_a_a_fun_fun_a_fun_tree$ (node$i (selectx$ A_a_fun_a_a_fun_fun_a_fun$ )(selecty$ A_a_fun_a_a_fun_fun_a_fun_tree$ )(selectz$ A_a_fun_a_a_fun_fun_a_fun_tree$ )))(A_a_a_fun_fun_a_a_fun_fun_tree$ (node$j (selecua$ A_a_a_fun_fun_a_a_fun_fun$ )(selecub$ A_a_a_fun_fun_a_a_fun_fun_tree$ )(selecuc$ A_a_a_fun_fun_a_a_fun_fun_tree$ )))))
(declare-fun y$ ()A_tree$ )
(declare-fun root$a (A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun$ )
(declare-fun root$b (A_a_a_fun_fun_tree$ )A_a_a_fun_fun$ )
(declare-fun root$c (A_a_fun_a_fun_tree$ )A_a_fun_a_fun$ )
(declare-fun root$d (A_a_fun_tree$ )A_a_fun$ )
(declare-fun root$e (A_a_a_fun_fun_a_fun_tree$ )A_a_a_fun_fun_a_fun$ )
(declare-fun root$f (A_a_fun_a_fun_a_fun_tree$ )A_a_fun_a_fun_a_fun$ )
(declare-fun root$g (A_a_a_a_fun_fun_fun_tree$ )A_a_a_a_fun_fun_fun$ )
(declare-fun root$h (A_a_a_fun_a_fun_fun_tree$ )A_a_a_fun_a_fun_fun$ )
(declare-fun root$i (A_a_fun_a_a_fun_fun_a_fun_tree$ )A_a_fun_a_a_fun_fun_a_fun$ )
(declare-fun root$j (A_a_a_fun_fun_a_a_fun_fun_tree$ )A_a_a_fun_fun_a_a_fun_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_a_fun$ A$ )A$ )
(declare-fun member$a (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_set$ )Bool )
(declare-fun member$b (A_a_a_fun_fun$ A_a_a_fun_fun_set$ )Bool )
(declare-fun member$c (A_a_fun_a_fun$ A_a_fun_a_fun_set$ )Bool )
(declare-fun member$d (A_a_fun$ A_a_fun_set$ )Bool )
(declare-fun tree_ap$ (A_a_fun_tree$ A_tree$ )A_tree$ )
(declare-fun fun_app$a (A_a_fun_a_fun$ A_a_fun$ )A$ )
(declare-fun fun_app$b (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$c (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$d (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun$ )A$ )
(declare-fun fun_app$e (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun$ )A$ )
(declare-fun fun_app$f (A_a_a_a_fun_fun_fun$ A$ )A_a_a_fun_fun$ )
(declare-fun fun_app$g (A_a_a_fun_a_fun_fun$ A$ )A_a_fun_a_fun$ )
(declare-fun fun_app$h (A_a_fun_a_a_fun_fun_a_fun$ A_a_fun_a_a_fun_fun$ )A$ )
(declare-fun fun_app$i (A_a_a_fun_fun_a_a_fun_fun$ A_a_a_fun_fun$ )A_a_fun$ )
(declare-fun fun_app$j (A_a_fun_tree_bool_fun$ A_a_fun_tree$ )Bool )
(declare-fun fun_app$k (A_a_fun_a_a_fun_tree_bool_fun_fun$ A_a_fun$ )A_a_fun_tree_bool_fun$ )
(declare-fun fun_app$l (A_tree_bool_fun$ A_tree$ )Bool )
(declare-fun fun_app$m (A_a_tree_bool_fun_fun$ A$ )A_tree_bool_fun$ )
(declare-fun map_tree$ (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun set_tree$ (A_tree$ )A_set$ )
(declare-fun tree_ap$a (A_a_fun_a_fun_tree$ A_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$b (A_a_a_fun_fun_tree$ A_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$c (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun tree_ap$d (A_a_a_fun_fun_a_fun_tree$ A_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun tree_ap$e (A_a_fun_a_fun_a_fun_tree$ A_a_fun_a_fun_tree$ )A_tree$ )
(declare-fun tree_ap$f (A_a_a_a_fun_fun_fun_tree$ A_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_ap$g (A_a_a_fun_a_fun_fun_tree$ A_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_ap$h (A_a_fun_a_a_fun_fun_a_fun_tree$ A_a_fun_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun tree_ap$i (A_a_a_fun_fun_a_a_fun_fun_tree$ A_a_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$a (A_a_fun_a_fun$ A_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$b (A_a_a_fun_fun$ A_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$c (A_a_fun_a_a_fun_fun$ A_a_fun_tree$ )A_a_fun_tree$ )
(declare-fun map_tree$d (A_a_a_fun_fun_a_fun$ A_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun map_tree$e (A_a_fun_a_fun_a_fun$ A_a_fun_a_fun_tree$ )A_tree$ )
(declare-fun map_tree$f (A_a_a_a_fun_fun_fun$ A_tree$ )A_a_a_fun_fun_tree$ )
(declare-fun map_tree$g (A_a_a_fun_a_fun_fun$ A_tree$ )A_a_fun_a_fun_tree$ )
(declare-fun map_tree$h (A_a_fun_a_a_fun_fun_a_fun$ A_a_fun_a_a_fun_fun_tree$ )A_tree$ )
(declare-fun map_tree$i (A_a_a_fun_fun_a_a_fun_fun$ A_a_a_fun_fun_tree$ )A_a_fun_tree$ )
(declare-fun set_tree$a (A_a_fun_a_a_fun_fun_tree$ )A_a_fun_a_a_fun_fun_set$ )
(declare-fun set_tree$b (A_a_a_fun_fun_tree$ )A_a_a_fun_fun_set$ )
(declare-fun set_tree$c (A_a_fun_a_fun_tree$ )A_a_fun_a_fun_set$ )
(declare-fun set_tree$d (A_a_fun_tree$ )A_a_fun_set$ )
(declare-fun tree_pure$ (A_a_fun_a_a_fun_fun$ )A_a_fun_a_a_fun_fun_tree$ )
(declare-fun tree_pure$a (A_a_a_fun_fun$ )A_a_a_fun_fun_tree$ )
(declare-fun tree_pure$b (A_a_fun_a_fun$ )A_a_fun_a_fun_tree$ )
(declare-fun tree_pure$c (A_a_fun$ )A_a_fun_tree$ )
(declare-fun tree_pure$d (A$ )A_tree$ )
(assert (! (not (member$ (root$ y$ )(set_tree$ y$ ))):named a0 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$ ))(member$a (root$a ?v0 )(set_tree$a ?v0 ))):named a1 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ ))(member$b (root$b ?v0 )(set_tree$b ?v0 ))):named a2 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$ ))(member$c (root$c ?v0 )(set_tree$c ?v0 ))):named a3 ))
(assert (! (forall ((?v0 A_a_fun_tree$ ))(member$d (root$d ?v0 )(set_tree$d ?v0 ))):named a4 ))
(assert (! (forall ((?v0 A_tree$ ))(member$ (root$ ?v0 )(set_tree$ ?v0 ))):named a5 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ ))(= (root$a (tree_pure$ ?v0 ))?v0 )):named a6 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(= (root$b (tree_pure$a ?v0 ))?v0 )):named a7 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ ))(= (root$c (tree_pure$b ?v0 ))?v0 )):named a8 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (root$d (tree_pure$c ?v0 ))?v0 )):named a9 ))
(assert (! (forall ((?v0 A$ ))(= (root$ (tree_pure$d ?v0 ))?v0 )):named a10 ))
(assert (! (forall ((?v0 A_a_fun_tree$ )(?v1 A_tree$ ))(= (root$ (tree_ap$ ?v0 ?v1 ))(fun_app$ (root$d ?v0 )(root$ ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_tree$ )(?v1 A_a_fun_tree$ ))(= (root$ (tree_ap$a ?v0 ?v1 ))(fun_app$a (root$c ?v0 )(root$d ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (root$d (tree_ap$b ?v0 ?v1 ))(fun_app$b (root$b ?v0 )(root$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_tree$ )(?v1 A_a_fun_tree$ ))(= (root$d (tree_ap$c ?v0 ?v1 ))(fun_app$c (root$a ?v0 )(root$d ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun_tree$ )(?v1 A_a_a_fun_fun_tree$ ))(= (root$ (tree_ap$d ?v0 ?v1 ))(fun_app$d (root$e ?v0 )(root$b ?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun_tree$ )(?v1 A_a_fun_a_fun_tree$ ))(= (root$ (tree_ap$e ?v0 ?v1 ))(fun_app$e (root$f ?v0 )(root$c ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun_tree$ )(?v1 A_tree$ ))(= (root$b (tree_ap$f ?v0 ?v1 ))(fun_app$f (root$g ?v0 )(root$ ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun_tree$ )(?v1 A_tree$ ))(= (root$c (tree_ap$g ?v0 ?v1 ))(fun_app$g (root$h ?v0 )(root$ ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun_tree$ )(?v1 A_a_fun_a_a_fun_fun_tree$ ))(= (root$ (tree_ap$h ?v0 ?v1 ))(fun_app$h (root$i ?v0 )(root$a ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun_tree$ )(?v1 A_a_a_fun_fun_tree$ ))(= (root$d (tree_ap$i ?v0 ?v1 ))(fun_app$i (root$j ?v0 )(root$b ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$ ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_tree$ ))(= (root$ (map_tree$a ?v0 ?v1 ))(fun_app$a ?v0 (root$d ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_tree$ ))(= (root$d (map_tree$b ?v0 ?v1 ))(fun_app$b ?v0 (root$ ?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_tree$ ))(= (root$d (map_tree$c ?v0 ?v1 ))(fun_app$c ?v0 (root$d ?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun$ )(?v1 A_a_a_fun_fun_tree$ ))(= (root$ (map_tree$d ?v0 ?v1 ))(fun_app$d ?v0 (root$b ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun$ )(?v1 A_a_fun_a_fun_tree$ ))(= (root$ (map_tree$e ?v0 ?v1 ))(fun_app$e ?v0 (root$c ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun$ )(?v1 A_tree$ ))(= (root$b (map_tree$f ?v0 ?v1 ))(fun_app$f ?v0 (root$ ?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$ )(?v1 A_tree$ ))(= (root$c (map_tree$g ?v0 ?v1 ))(fun_app$g ?v0 (root$ ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun$ )(?v1 A_a_fun_a_a_fun_fun_tree$ ))(= (root$ (map_tree$h ?v0 ?v1 ))(fun_app$h ?v0 (root$a ?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$ )(?v1 A_a_a_fun_fun_tree$ ))(= (root$d (map_tree$i ?v0 ?v1 ))(fun_app$i ?v0 (root$b ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (root$ (map_tree$ ?v0 ?v1 ))(fun_app$ ?v0 (root$ ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_tree$ ))(= (root$ (map_tree$a ?v0 ?v1 ))(fun_app$a ?v0 (root$d ?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_tree$ ))(= (root$d (map_tree$b ?v0 ?v1 ))(fun_app$b ?v0 (root$ ?v1 )))):named a33 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_tree$ ))(= (root$d (map_tree$c ?v0 ?v1 ))(fun_app$c ?v0 (root$d ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_fun$ )(?v1 A_a_a_fun_fun_tree$ ))(= (root$ (map_tree$d ?v0 ?v1 ))(fun_app$d ?v0 (root$b ?v1 )))):named a35 ))
(assert (! (forall ((?v0 A_a_fun_a_fun_a_fun$ )(?v1 A_a_fun_a_fun_tree$ ))(= (root$ (map_tree$e ?v0 ?v1 ))(fun_app$e ?v0 (root$c ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_a_a_a_fun_fun_fun$ )(?v1 A_tree$ ))(= (root$b (map_tree$f ?v0 ?v1 ))(fun_app$f ?v0 (root$ ?v1 )))):named a37 ))
(assert (! (forall ((?v0 A_a_a_fun_a_fun_fun$ )(?v1 A_tree$ ))(= (root$c (map_tree$g ?v0 ?v1 ))(fun_app$g ?v0 (root$ ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun_a_fun$ )(?v1 A_a_fun_a_a_fun_fun_tree$ ))(= (root$ (map_tree$h ?v0 ?v1 ))(fun_app$h ?v0 (root$a ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_a_a_fun_fun_a_a_fun_fun$ )(?v1 A_a_a_fun_fun_tree$ ))(= (root$d (map_tree$i ?v0 ?v1 ))(fun_app$i ?v0 (root$b ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun_a_a_fun_fun_tree$ )(?v2 A_a_fun_a_a_fun_fun_tree$ ))(! (= (root$a (node$a ?v0 ?v1 ?v2 ))?v0 ):pattern ((node$a ?v0 ?v1 ?v2 )))):named a41 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_a_a_fun_fun_tree$ )(?v2 A_a_a_fun_fun_tree$ ))(! (= (root$b (node$b ?v0 ?v1 ?v2 ))?v0 ):pattern ((node$b ?v0 ?v1 ?v2 )))):named a42 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun_a_fun_tree$ )(?v2 A_a_fun_a_fun_tree$ ))(! (= (root$c (node$c ?v0 ?v1 ?v2 ))?v0 ):pattern ((node$c ?v0 ?v1 ?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ ))(! (= (root$d (node$d ?v0 ?v1 ?v2 ))?v0 ):pattern ((node$d ?v0 ?v1 ?v2 )))):named a44 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ ))(! (= (root$ (node$ ?v0 ?v1 ?v2 ))?v0 ):pattern ((node$ ?v0 ?v1 ?v2 )))):named a45 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_a_a_fun_tree_bool_fun_fun$ ))(=> (and (member$d ?v0 (set_tree$d ?v1 ))(and (forall ((?v3 A_a_fun$ )(?v4 A_a_fun_tree$ )(?v5 A_a_fun_tree$ ))(fun_app$j (fun_app$k ?v2 ?v3 )(node$d ?v3 ?v4 ?v5 )))(and (forall ((?v3 A_a_fun$ )(?v4 A_a_fun_tree$ )(?v5 A_a_fun_tree$ )(?v6 A_a_fun$ ))(=> (and (member$d ?v6 (set_tree$d ?v4 ))(fun_app$j (fun_app$k ?v2 ?v6 )?v4 ))(fun_app$j (fun_app$k ?v2 ?v6 )(node$d ?v3 ?v4 ?v5 ))))(forall ((?v3 A_a_fun$ )(?v4 A_a_fun_tree$ )(?v5 A_a_fun_tree$ )(?v6 A_a_fun$ ))(=> (and (member$d ?v6 (set_tree$d ?v5 ))(fun_app$j (fun_app$k ?v2 ?v6 )?v5 ))(fun_app$j (fun_app$k ?v2 ?v6 )(node$d ?v3 ?v4 ?v5 )))))))(fun_app$j (fun_app$k ?v2 ?v0 )?v1 ))):named a46 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_a_tree_bool_fun_fun$ ))(=> (and (member$ ?v0 (set_tree$ ?v1 ))(and (forall ((?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(fun_app$l (fun_app$m ?v2 ?v3 )(node$ ?v3 ?v4 ?v5 )))(and (forall ((?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ )(?v6 A$ ))(=> (and (member$ ?v6 (set_tree$ ?v4 ))(fun_app$l (fun_app$m ?v2 ?v6 )?v4 ))(fun_app$l (fun_app$m ?v2 ?v6 )(node$ ?v3 ?v4 ?v5 ))))(forall ((?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ )(?v6 A$ ))(=> (and (member$ ?v6 (set_tree$ ?v5 ))(fun_app$l (fun_app$m ?v2 ?v6 )?v5 ))(fun_app$l (fun_app$m ?v2 ?v6 )(node$ ?v3 ?v4 ?v5 )))))))(fun_app$l (fun_app$m ?v2 ?v0 )?v1 ))):named a47 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ ))(=> (and (member$d ?v0 (set_tree$d ?v1 ))(and (forall ((?v2 A_a_fun_tree$ )(?v3 A_a_fun_tree$ ))(=> (= ?v1 (node$d ?v0 ?v2 ?v3 ))false ))(and (forall ((?v2 A_a_fun$ )(?v3 A_a_fun_tree$ )(?v4 A_a_fun_tree$ ))(=> (and (= ?v1 (node$d ?v2 ?v3 ?v4 ))(member$d ?v0 (set_tree$d ?v3 )))false ))(forall ((?v2 A_a_fun$ )(?v3 A_a_fun_tree$ )(?v4 A_a_fun_tree$ ))(=> (and (= ?v1 (node$d ?v2 ?v3 ?v4 ))(member$d ?v0 (set_tree$d ?v4 )))false )))))false )):named a48 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ ))(=> (and (member$ ?v0 (set_tree$ ?v1 ))(and (forall ((?v2 A_tree$ )(?v3 A_tree$ ))(=> (= ?v1 (node$ ?v0 ?v2 ?v3 ))false ))(and (forall ((?v2 A$ )(?v3 A_tree$ )(?v4 A_tree$ ))(=> (and (= ?v1 (node$ ?v2 ?v3 ?v4 ))(member$ ?v0 (set_tree$ ?v3 )))false ))(forall ((?v2 A$ )(?v3 A_tree$ )(?v4 A_tree$ ))(=> (and (= ?v1 (node$ ?v2 ?v3 ?v4 ))(member$ ?v0 (set_tree$ ?v4 )))false )))))false )):named a49 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun$ )(?v3 A_a_fun_tree$ ))(=> (member$d ?v0 (set_tree$d ?v1 ))(member$d ?v0 (set_tree$d (node$d ?v2 ?v1 ?v3 ))))):named a50 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(=> (member$ ?v0 (set_tree$ ?v1 ))(member$ ?v0 (set_tree$ (node$ ?v2 ?v1 ?v3 ))))):named a51 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun$ )(?v3 A_a_fun_tree$ ))(=> (member$d ?v0 (set_tree$d ?v1 ))(member$d ?v0 (set_tree$d (node$d ?v2 ?v3 ?v1 ))))):named a52 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(=> (member$ ?v0 (set_tree$ ?v1 ))(member$ ?v0 (set_tree$ (node$ ?v2 ?v3 ?v1 ))))):named a53 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ ))(member$d ?v0 (set_tree$d (node$d ?v0 ?v1 ?v2 )))):named a54 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ ))(member$ ?v0 (set_tree$ (node$ ?v0 ?v1 ?v2 )))):named a55 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun_tree$ )(?v2 A_a_fun_tree$ )(?v3 A_a_fun$ )(?v4 A_a_fun_tree$ )(?v5 A_a_fun_tree$ ))(= (= (node$d ?v0 ?v1 ?v2 )(node$d ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a56 ))
(assert (! (forall ((?v0 A$ )(?v1 A_tree$ )(?v2 A_tree$ )(?v3 A$ )(?v4 A_tree$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a57 ))
(assert (! (forall ((?v0 A_a_fun_a_a_fun_fun$ )(?v1 A_a_fun$ ))(= (map_tree$c ?v0 (tree_pure$c ?v1 ))(tree_pure$c (fun_app$c ?v0 ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ ))(= (map_tree$b ?v0 (tree_pure$d ?v1 ))(tree_pure$c (fun_app$b ?v0 ?v1 )))):named a59 ))
(assert (! (forall ((?v0 A_a_fun_a_fun$ )(?v1 A_a_fun$ ))(= (map_tree$a ?v0 (tree_pure$c ?v1 ))(tree_pure$d (fun_app$a ?v0 ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ ))(= (map_tree$ ?v0 (tree_pure$d ?v1 ))(tree_pure$d (fun_app$ ?v0 ?v1 )))):named a61 ))
(check-sat )
;(get-unsat-core )
