;(set-option :produce-unsat-cores true )
(set-logic ALL_SUPPORTED )
(declare-sort A$ 0 )
(declare-codatatypes ()((A_stream$ (sCons$ (shd$ A$ )(stl$ A_stream$ )))(A_tree$ (node$ (root$ A$ )(left$ A_tree$ )(right$ A_tree$ )))(A_tree_tree$ (node$a (root$a A_tree$ )(left$a A_tree_tree$ )(right$a A_tree_tree$ )))(A_tree_tree_tree$ (node$b (root$b A_tree_tree$ )(left$b A_tree_tree_tree$ )(right$b A_tree_tree_tree$ )))(A_tree_tree_tree_tree$ (node$c (root$c A_tree_tree_tree$ )(left$c A_tree_tree_tree_tree$ )(right$c A_tree_tree_tree_tree$ )))(A_stream_tree$ (node$d (root$d A_stream$ )(left$d A_stream_tree$ )(right$d A_stream_tree$ )))(A_stream_tree_tree$ (node$e (root$e A_stream_tree$ )(left$e A_stream_tree_tree$ )(right$e A_stream_tree_tree$ )))(A_stream_tree_tree_tree$ (node$f (root$f A_stream_tree_tree$ )(left$f A_stream_tree_tree_tree$ )(right$f A_stream_tree_tree_tree$ )))))
(declare-fun t$ ()A_tree$ )
(declare-fun t$a ()A_tree$ )
(declare-fun plus$ (A_tree$ A_tree$ )A_tree$ )
(declare-fun plus$a (A_stream$ A_stream$ )A_stream$ )
(declare-fun plus$b (A_tree_tree_tree_tree$ A_tree_tree_tree_tree$ )A_tree_tree_tree_tree$ )
(declare-fun plus$c (A_tree_tree_tree$ A_tree_tree_tree$ )A_tree_tree_tree$ )
(declare-fun plus$d (A_stream_tree_tree_tree$ A_stream_tree_tree_tree$ )A_stream_tree_tree_tree$ )
(declare-fun plus$e (A_stream_tree_tree$ A_stream_tree_tree$ )A_stream_tree_tree$ )
(declare-fun plus$f (A_stream_tree$ A_stream_tree$ )A_stream_tree$ )
(declare-fun plus$g (A_tree_tree$ A_tree_tree$ )A_tree_tree$ )
(declare-fun plus$h (A$ A$ )A$ )
(declare-fun stream$ (A_tree$ )A_stream$ )
(assert (! (not (= (stream$ (plus$ t$ t$a ))(plus$a (stream$ t$ )(stream$ t$a )))):named a0 ))
(assert (! (forall ((?v0 A_tree_tree_tree_tree$ )(?v1 A_tree_tree_tree_tree$ ))(= (root$c (plus$b ?v0 ?v1 ))(plus$c (root$c ?v0 )(root$c ?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_stream_tree_tree_tree$ )(?v1 A_stream_tree_tree_tree$ ))(= (root$f (plus$d ?v0 ?v1 ))(plus$e (root$f ?v0 )(root$f ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_stream_tree_tree$ )(?v1 A_stream_tree_tree$ ))(= (root$e (plus$e ?v0 ?v1 ))(plus$f (root$e ?v0 )(root$e ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_tree_tree_tree$ )(?v1 A_tree_tree_tree$ ))(= (root$b (plus$c ?v0 ?v1 ))(plus$g (root$b ?v0 )(root$b ?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_tree_tree$ )(?v1 A_tree_tree$ ))(= (root$a (plus$g ?v0 ?v1 ))(plus$ (root$a ?v0 )(root$a ?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_stream_tree$ )(?v1 A_stream_tree$ ))(= (root$d (plus$f ?v0 ?v1 ))(plus$a (root$d ?v0 )(root$d ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A_tree$ ))(= (root$ (plus$ ?v0 ?v1 ))(plus$h (root$ ?v0 )(root$ ?v1 )))):named a7 ))
(check-sat )
;(get-unsat-core )
